WEBVTT
1
00:00:00.000 --> 00:00:02.009
- [Instructor] Let us understand what wild cards are

2
00:00:02.009 --> 00:00:04.001
in generics.

3
00:00:04.001 --> 00:00:06.008
So far, the code that we have written in generics

4
00:00:06.008 --> 00:00:10.007
in our box application, always accesses the type parameter.

5
00:00:10.007 --> 00:00:12.007
So, we wrote a class box of T,

6
00:00:12.007 --> 00:00:14.007
and T is the type parameter there.

7
00:00:14.007 --> 00:00:16.008
We also defined bounded types.

8
00:00:16.008 --> 00:00:18.000
But even in that case,

9
00:00:18.000 --> 00:00:20.009
we always had an access to the type parameter.

10
00:00:20.009 --> 00:00:22.002
But in certain situations

11
00:00:22.002 --> 00:00:23.008
you can replace that type parameter

12
00:00:23.008 --> 00:00:26.007
with just a question mark like that.

13
00:00:26.007 --> 00:00:28.005
So, you have the angle brackets,

14
00:00:28.005 --> 00:00:30.009
and in between those, you mentioned the question mark.

15
00:00:30.009 --> 00:00:33.004
This is called the wildcard operator,

16
00:00:33.004 --> 00:00:36.006
and it is used to indicate any unknown type,

17
00:00:36.006 --> 00:00:38.003
which means if you have a method

18
00:00:38.003 --> 00:00:42.001
that has a parameter consisting of only the wildcard,

19
00:00:42.001 --> 00:00:46.001
then you can invoke the method using any type.

20
00:00:46.001 --> 00:00:49.009
Wildcards can be applied for types of parameters,

21
00:00:49.009 --> 00:00:52.006
fields, or local variables.

22
00:00:52.006 --> 00:00:55.006
You can also use them on your return types.

23
00:00:55.006 --> 00:00:57.002
Although this is allowed,

24
00:00:57.002 --> 00:00:59.005
it is always a best programming practice

25
00:00:59.005 --> 00:01:02.003
to be very specific when you write your code.

26
00:01:02.003 --> 00:01:06.003
You cannot apply wildcards for sure, in certain situations.

27
00:01:06.003 --> 00:01:09.007
The first one, is generic type instantiation.

28
00:01:09.007 --> 00:01:12.007
Let's go to the IDE and see how.

29
00:01:12.007 --> 00:01:15.005
On our package, let's create a new class

30
00:01:15.005 --> 00:01:19.008
and call this TestWildcards.

31
00:01:19.008 --> 00:01:21.009
And I'll write the main method.

32
00:01:21.009 --> 00:01:24.008
And when you say generic type instantiation,

33
00:01:24.008 --> 00:01:26.008
you want to instantiate a generic class.

34
00:01:26.008 --> 00:01:28.003
So, we have a box class,

35
00:01:28.003 --> 00:01:30.006
let's go ahead and create an instance.

36
00:01:30.006 --> 00:01:33.006
I'll say new box, and this time,

37
00:01:33.006 --> 00:01:35.000
in between the angle brackets

38
00:01:35.000 --> 00:01:37.001
I'll mention the wildcard character

39
00:01:37.001 --> 00:01:39.006
followed by the constructor call.

40
00:01:39.006 --> 00:01:42.001
If I do this, I get a compilation problem

41
00:01:42.001 --> 00:01:44.005
stating that the wildcard type question mark

42
00:01:44.005 --> 00:01:46.008
cannot be instantiated directly.

43
00:01:46.008 --> 00:01:48.005
So, this is not possible.

44
00:01:48.005 --> 00:01:50.004
I'm going to comment this line of code,

45
00:01:50.004 --> 00:01:52.009
otherwise our code will not compile.

46
00:01:52.009 --> 00:01:55.005
The other place where you cannot use wildcards,

47
00:01:55.005 --> 00:01:58.000
is generic method invocation.

48
00:01:58.000 --> 00:01:59.001
Let's see how.

49
00:01:59.001 --> 00:02:00.007
On the next line,

50
00:02:00.007 --> 00:02:05.007
I will invoke the BoxUtils empty box method, like that.

51
00:02:05.007 --> 00:02:07.009
And now we know that in order to find out

52
00:02:07.009 --> 00:02:11.004
what kind of empty box was returned out of this invocation,

53
00:02:11.004 --> 00:02:15.009
we can always declare that variable using the var keyword.

54
00:02:15.009 --> 00:02:18.000
Which is used to create a local variable.

55
00:02:18.000 --> 00:02:22.001
So let's say var box equal to BoxUtils.emptyBox.

56
00:02:22.001 --> 00:02:23.003
And when we do this,

57
00:02:23.003 --> 00:02:27.007
the intellij quickly hints us that it is box of boxable.

58
00:02:27.007 --> 00:02:30.009
However, I want to invoke this method

59
00:02:30.009 --> 00:02:32.005
with the wildcard argument.

60
00:02:32.005 --> 00:02:35.001
So, I can use the type witness.

61
00:02:35.001 --> 00:02:36.009
So, just before the method name

62
00:02:36.009 --> 00:02:39.006
I'm going to insert the pair of angle brackets,

63
00:02:39.006 --> 00:02:42.003
and in between I'll mention the question mark.

64
00:02:42.003 --> 00:02:45.008
If I do that, I get a compilation problem stating

65
00:02:45.008 --> 00:02:48.002
that it is an unexpected wildcard.

66
00:02:48.002 --> 00:02:50.004
So, you cannot do this as well.

67
00:02:50.004 --> 00:02:52.005
I'll comment out this line.

68
00:02:52.005 --> 00:02:54.005
The other place where you cannot use wildcards,

69
00:02:54.005 --> 00:02:55.008
is supertypes.

70
00:02:55.008 --> 00:02:59.005
Let's say on my TestWildcards class on line number 3.

71
00:02:59.005 --> 00:03:03.004
I'll hypothetically extend the Box class.

72
00:03:03.004 --> 00:03:09.003
And for this, I mention the wildcard character.

73
00:03:09.003 --> 00:03:10.002
The moment I do this,

74
00:03:10.002 --> 00:03:12.009
it tells me that there is no wildcard expected here.

75
00:03:12.009 --> 00:03:15.002
So, it doesn't even work with supertypes.

76
00:03:15.002 --> 00:03:19.005
Let's comment this line of code,

77
00:03:19.005 --> 00:03:24.003
copy this line again, paste it on line number 4

78
00:03:24.003 --> 00:03:28.006
and correct the definition of the TestWildcards class.

79
00:03:28.006 --> 00:03:32.000
The commented lines in this file are merely written,

80
00:03:32.000 --> 00:03:34.007
so that you can have a reference to it,

81
00:03:34.007 --> 00:03:36.008
to understand which are the places

82
00:03:36.008 --> 00:03:39.003
where you cannot use wildcards.

83
00:03:39.003 --> 00:03:41.006
There are three way is to use wildcards.

84
00:03:41.006 --> 00:03:45.007
Unbounded, upper bounded, and lower bounded.

85
00:03:45.007 --> 00:03:48.000
Let's first look at unbounded wildcards.

86
00:03:48.000 --> 00:03:51.004
These are specified using only the wildcard operator,

87
00:03:51.004 --> 00:03:53.000
which is the question mark.

88
00:03:53.000 --> 00:03:55.005
And it is used in situations

89
00:03:55.005 --> 00:03:58.009
where you do not want a reference to your type parameter

90
00:03:58.009 --> 00:04:01.009
to carry out any logic for your method for example.

91
00:04:01.009 --> 00:04:05.001
Even if your method implements bounds,

92
00:04:05.001 --> 00:04:09.006
you have no reason to access the bound's fields or methods.

93
00:04:09.006 --> 00:04:12.005
The best example for using unbounded wildcards

94
00:04:12.005 --> 00:04:16.009
would be the utility method of counting the items in the box

95
00:04:16.009 --> 00:04:19.000
that we have in a box application.

96
00:04:19.000 --> 00:04:21.001
Let's go back to the code and find out

97
00:04:21.001 --> 00:04:25.006
how we can use unbounded wildcards on that utility method.

98
00:04:25.006 --> 00:04:29.004
So, let's go to BoxUtils, and if you see on line number 5,

99
00:04:29.004 --> 00:04:33.003
we have a method which says get count of items

100
00:04:33.003 --> 00:04:35.008
and the parameter is box of T.

101
00:04:35.008 --> 00:04:37.007
We are now going to change this method

102
00:04:37.007 --> 00:04:40.007
to incorporate the unbounded wildcard usage

103
00:04:40.007 --> 00:04:42.008
for our method parameter.

104
00:04:42.008 --> 00:04:49.001
I'll do one thing, I will first copy these lines,

105
00:04:49.001 --> 00:04:51.003
paste them again on line number 9,

106
00:04:51.003 --> 00:04:55.006
and comment out lines 5 to 7.

107
00:04:55.006 --> 00:04:57.001
Now I'm commenting these lines

108
00:04:57.001 --> 00:04:59.006
so that you have a reference to that generic method

109
00:04:59.006 --> 00:05:01.000
at a later point in time.

110
00:05:01.000 --> 00:05:03.007
You could then compare how the generic method look like

111
00:05:03.007 --> 00:05:07.002
and how the usage of unbounded wildcards looks like.

112
00:05:07.002 --> 00:05:08.006
So, now on line number 9,

113
00:05:08.006 --> 00:05:11.003
we are going to use wildcard operator.

114
00:05:11.003 --> 00:05:17.000
For that, let's go ahead and change this parameter

115
00:05:17.000 --> 00:05:21.001
to incorporate the wildcard character like that.

116
00:05:21.001 --> 00:05:23.009
Now, the moment you use unbounded wildcards like this

117
00:05:23.009 --> 00:05:28.002
you don't even this T extends boxable bound.

118
00:05:28.002 --> 00:05:29.008
You don't need that.

119
00:05:29.008 --> 00:05:31.007
So, now this method is going to be invoked

120
00:05:31.007 --> 00:05:35.004
with any kind of box, any type of box.

121
00:05:35.004 --> 00:05:37.004
It could be a box of boxable,

122
00:05:37.004 --> 00:05:40.009
box of fruit, box of book, box of apple.

123
00:05:40.009 --> 00:05:45.002
And the only thing that it does inside is getting the count.

124
00:05:45.002 --> 00:05:47.005
So, it does not refer the type parameter

125
00:05:47.005 --> 00:05:51.008
and does not access the boxable bounds fields or methods.

126
00:05:51.008 --> 00:05:56.009
In such situations you can safely use wildcard parameters.

127
00:05:56.009 --> 00:05:58.004
Now, let's go ahead and test out this method,

128
00:05:58.004 --> 00:06:01.001
so we'll go to TestWildcards,

129
00:06:01.001 --> 00:06:05.002
and here let's go ahead and create a box object,

130
00:06:05.002 --> 00:06:06.001
and then create fruit.

131
00:06:06.001 --> 00:06:08.003
So, I'm not going to do that again.

132
00:06:08.003 --> 00:06:13.005
We can just copy that code from our TestBoxGenerics class.

133
00:06:13.005 --> 00:06:18.007
So, I can take lines 5 to 7, copy them,

134
00:06:18.007 --> 00:06:20.007
go to TestWildcards, paste them.

135
00:06:20.007 --> 00:06:22.007
So that we have the book box,

136
00:06:22.007 --> 00:06:25.009
and then we have two objects added to it.

137
00:06:25.009 --> 00:06:29.005
And then we can just go ahead and call the utility method.

138
00:06:29.005 --> 00:06:33.001
So we say, let's put some string,

139
00:06:33.001 --> 00:06:40.005
count of books and then say, BoxUtils.getCountOfItems,

140
00:06:40.005 --> 00:06:44.004
and now the argument that you're passing is the book box.

141
00:06:44.004 --> 00:06:45.005
But it really doesn't matter here

142
00:06:45.005 --> 00:06:49.001
because now we can invoke this get count of items method

143
00:06:49.001 --> 00:06:52.003
using a box of any type.

144
00:06:52.003 --> 00:06:55.009
It could be box of books, box of apple, box of fruit,

145
00:06:55.009 --> 00:06:58.004
box of boxable as well.

146
00:06:58.004 --> 00:07:02.004
This is how you can use unbounded wildcards.

147
00:07:02.004 --> 00:07:05.000
Let us now look at upper bounded wildcards.

148
00:07:05.000 --> 00:07:06.003
Let's recap our discussion

149
00:07:06.003 --> 00:07:08.007
for the hierarchies of type arguments.

150
00:07:08.007 --> 00:07:11.006
We had discussed that just because the class double

151
00:07:11.006 --> 00:07:13.009
is a subclass of the class number

152
00:07:13.009 --> 00:07:16.002
that does not mean that array list of double

153
00:07:16.002 --> 00:07:18.009
becomes a subtype of list of number.

154
00:07:18.009 --> 00:07:22.000
Similarly, just because apple is the subclass

155
00:07:22.000 --> 00:07:24.005
of the class fruit does not mean

156
00:07:24.005 --> 00:07:28.008
that a box of apple is a subtype of box of fruit.

157
00:07:28.008 --> 00:07:31.005
Likewise, a cardboard box of apple

158
00:07:31.005 --> 00:07:34.002
is not a subtype of box of fruit.

159
00:07:34.002 --> 00:07:36.006
This is because the type arguments

160
00:07:36.006 --> 00:07:39.003
that were used in each of these relationships

161
00:07:39.003 --> 00:07:43.000
did not have an exact match for the super and the subtype.

162
00:07:43.000 --> 00:07:44.005
For example, in the first case,

163
00:07:44.005 --> 00:07:48.000
it was number and double, not an exact match.

164
00:07:48.000 --> 00:07:51.002
In the second and the third case it was fruit and apple,

165
00:07:51.002 --> 00:07:52.008
again, not the same.

166
00:07:52.008 --> 00:07:56.006
Which is why none of these relationships is going to work.

167
00:07:56.006 --> 00:07:58.006
Here is a table for a method

168
00:07:58.006 --> 00:08:00.009
with various kinds of parameters

169
00:08:00.009 --> 00:08:04.003
and the corresponding valid arguments that you can pass

170
00:08:04.003 --> 00:08:06.005
when you invoke that method.

171
00:08:06.005 --> 00:08:10.007
Let's say your method has a parameter called box of fruit.

172
00:08:10.007 --> 00:08:13.003
In that case, the only valid argument

173
00:08:13.003 --> 00:08:15.007
that you can pass while invoking that method

174
00:08:15.007 --> 00:08:18.007
is a variable of the type box of fruit.

175
00:08:18.007 --> 00:08:21.002
If your method parameter was box of apple,

176
00:08:21.002 --> 00:08:23.007
then again the valid argument for the invocation

177
00:08:23.007 --> 00:08:26.002
is a variable of box of apple.

178
00:08:26.002 --> 00:08:27.008
So is the case with list of number

179
00:08:27.008 --> 00:08:29.008
and array list of double.

180
00:08:29.008 --> 00:08:33.001
So, here you see that we are facing a kind of a restriction

181
00:08:33.001 --> 00:08:37.003
in order to implement methods with these kind of parameters.

182
00:08:37.003 --> 00:08:39.005
In order to relax those restrictions,

183
00:08:39.005 --> 00:08:42.002
we can use upper bounded wildcards.

184
00:08:42.002 --> 00:08:46.004
They are specified with the help of the extends keyword.

185
00:08:46.004 --> 00:08:49.004
Let's look at all the classes of our box application

186
00:08:49.004 --> 00:08:53.003
and see how we can fit in the upper bounded wildcards there.

187
00:08:53.003 --> 00:08:55.004
This is our hierarchy.

188
00:08:55.004 --> 00:08:57.004
We have an interface boxable,

189
00:08:57.004 --> 00:08:59.006
and then we have two classes fruit and book

190
00:08:59.006 --> 00:09:02.003
which implement the boxable interface.

191
00:09:02.003 --> 00:09:05.000
And then down there, we have another class apple,

192
00:09:05.000 --> 00:09:06.004
that extends fruit.

193
00:09:06.004 --> 00:09:08.001
We are going to write a method

194
00:09:08.001 --> 00:09:11.005
which is called get average weight of a fruit.

195
00:09:11.005 --> 00:09:14.000
If you want to calculate the average weight of a fruit,

196
00:09:14.000 --> 00:09:18.004
we could accept a box of fruit or a box of apple.

197
00:09:18.004 --> 00:09:22.000
But we can't accept a box of boxable or a box of books

198
00:09:22.000 --> 00:09:23.005
because they're not fruits.

199
00:09:23.005 --> 00:09:27.004
So, we will write a method which has a parameter like this.

200
00:09:27.004 --> 00:09:30.008
Box of question mark followed by the extends keyword,

201
00:09:30.008 --> 00:09:33.004
followed by the name of the class fruit.

202
00:09:33.004 --> 00:09:37.001
This is read as box of anything that extends fruit.

203
00:09:37.001 --> 00:09:40.003
And then we can invoke this method with an argument

204
00:09:40.003 --> 00:09:45.006
which is, a box of fruit or a box of apple.

205
00:09:45.006 --> 00:09:49.001
But, box of boxable and box of books

206
00:09:49.001 --> 00:09:52.005
are not valid arguments for this method invocation.

207
00:09:52.005 --> 00:09:54.005
So, now the table that we saw earlier

208
00:09:54.005 --> 00:09:56.007
will change to something like this.

209
00:09:56.007 --> 00:10:01.000
If you have a parameter box of question mark extends fruit,

210
00:10:01.000 --> 00:10:04.003
then the valid argument to invoke that method

211
00:10:04.003 --> 00:10:08.005
will be either a box of fruit or a box of apple.

212
00:10:08.005 --> 00:10:10.008
That is because apple extends fruit,

213
00:10:10.008 --> 00:10:12.003
and the class that we mention

214
00:10:12.003 --> 00:10:14.008
in the extends clause in the parameter,

215
00:10:14.008 --> 00:10:16.008
is inclusive of that limit.

216
00:10:16.008 --> 00:10:19.006
Which is why box of fruit is also valid.

217
00:10:19.006 --> 00:10:20.007
If you have a parameter,

218
00:10:20.007 --> 00:10:23.004
let's say box of question mark extends apple.

219
00:10:23.004 --> 00:10:25.008
Then in that case, there is only one valid argument

220
00:10:25.008 --> 00:10:27.004
which is box of apple.

221
00:10:27.004 --> 00:10:29.003
In case where you have a parameter

222
00:10:29.003 --> 00:10:32.003
let's say a list of question mark extends number,

223
00:10:32.003 --> 00:10:34.007
then the valid arguments will be list of number,

224
00:10:34.007 --> 00:10:38.006
list of integer or list of double or list of float.

225
00:10:38.006 --> 00:10:40.007
And that is because integer, double, float

226
00:10:40.007 --> 00:10:42.009
are subclasses of the class number.

227
00:10:42.009 --> 00:10:44.001
If you have a parameter,

228
00:10:44.001 --> 00:10:47.000
let's say array list of question mark extends double,

229
00:10:47.000 --> 00:10:50.001
then the only valid argument will be array list of double

230
00:10:50.001 --> 00:10:53.003
because we do not have a subclass for the double class.

231
00:10:53.003 --> 00:10:56.004
So, now let's jump back to our IDE

232
00:10:56.004 --> 00:10:59.001
and implement the upper bounded wildcards example

233
00:10:59.001 --> 00:11:01.008
for a box application.

234
00:11:01.008 --> 00:11:03.009
Let's open our Box class

235
00:11:03.009 --> 00:11:05.006
and we'll write a method inside this,

236
00:11:05.006 --> 00:11:08.008
which is get average weight of a fruit.

237
00:11:08.008 --> 00:11:13.004
Let's come on line 35, say public, static

238
00:11:13.004 --> 00:11:15.000
and it's the average weight,

239
00:11:15.000 --> 00:11:16.005
so we'll return a double

240
00:11:16.005 --> 00:11:23.005
and let's name the method get average weight of fruit.

241
00:11:23.005 --> 00:11:27.006
And now the parameter to this will be box,

242
00:11:27.006 --> 00:11:30.009
and I will mention the upper bounded wildcards.

243
00:11:30.009 --> 00:11:34.004
So, question mark extends fruit.

244
00:11:34.004 --> 00:11:38.001
Let's give the parameter a name, let's call it box.

245
00:11:38.001 --> 00:11:39.007
And inside this method,

246
00:11:39.007 --> 00:11:42.005
we are going to just stream the items,

247
00:11:42.005 --> 00:11:44.004
get the weight of every item

248
00:11:44.004 --> 00:11:46.007
and then divide by the number of items.

249
00:11:46.007 --> 00:11:51.006
So, it'll be as simple as doing box.getItems,

250
00:11:51.006 --> 00:11:55.001
stream it using the stream API,

251
00:11:55.001 --> 00:11:57.002
call the map to double function

252
00:11:57.002 --> 00:11:59.002
and get the weight of every item

253
00:11:59.002 --> 00:12:04.004
using the boxable's get weight method.

254
00:12:04.004 --> 00:12:09.002
And we'll use the method references here, get weight.

255
00:12:09.002 --> 00:12:12.003
And then we can invoke the sum method on this

256
00:12:12.003 --> 00:12:14.004
which will calculate the sum for us.

257
00:12:14.004 --> 00:12:17.007
And then we have to divide by the number of items.

258
00:12:17.007 --> 00:12:21.002
So, box.getItems.size.

259
00:12:21.002 --> 00:12:22.005
That is all.

260
00:12:22.005 --> 00:12:26.002
So, the thing to note here is on line number 35,

261
00:12:26.002 --> 00:12:30.003
this parameter is using the upper bounded wildcards.

262
00:12:30.003 --> 00:12:33.001
So, now this method get average weight of fruit

263
00:12:33.001 --> 00:12:35.005
is going to accept any argument

264
00:12:35.005 --> 00:12:39.007
that is a fruit or is a subclass of fruit.

265
00:12:39.007 --> 00:12:44.004
Let's go ahead and test this out in our TestWildcards class.

266
00:12:44.004 --> 00:12:46.004
Before that I'll do a small change,

267
00:12:46.004 --> 00:12:47.008
I'll put a comment here saying

268
00:12:47.008 --> 00:12:50.001
this invocation of count of items

269
00:12:50.001 --> 00:12:53.006
was for unbounded wildcards.

270
00:12:53.006 --> 00:12:57.000
And now let's come on line 15 and put a comment

271
00:12:57.000 --> 00:13:02.007
stating now this is for upper bounded wildcards.

272
00:13:02.007 --> 00:13:05.007
And now let's call the average weight of fruit method.

273
00:13:05.007 --> 00:13:08.004
For that, we need to create a box of let's say fruit,

274
00:13:08.004 --> 00:13:09.009
and add items to it.

275
00:13:09.009 --> 00:13:12.003
So, I'm going to spare us some effort,

276
00:13:12.003 --> 00:13:20.006
run to that TestBoxGenerics class and copy lines 13 to 15,

277
00:13:20.006 --> 00:13:25.009
so that we don't have to do this all over again.

278
00:13:25.009 --> 00:13:29.000
Let's go to the TestWildcards back and paste that code.

279
00:13:29.000 --> 00:13:31.007
So, we have a box of fruit on line 16

280
00:13:31.007 --> 00:13:33.008
and we added two items to it.

281
00:13:33.008 --> 00:13:37.005
Now, let's come on the next line

282
00:13:37.005 --> 00:13:44.006
put a System.out.println, say average weight of fruit

283
00:13:44.006 --> 00:13:49.004
and invoke the get average weight of fruit method,

284
00:13:49.004 --> 00:13:53.006
pass in, the fruit box as an argument.

285
00:13:53.006 --> 00:13:56.008
And if you see this line which is line number 19,

286
00:13:56.008 --> 00:13:58.003
compiles well.

287
00:13:58.003 --> 00:14:01.009
Which means box of fruit is a perfectly valid argument

288
00:14:01.009 --> 00:14:03.005
to invoke the method.

289
00:14:03.005 --> 00:14:06.008
Now let's run this code,

290
00:14:06.008 --> 00:14:09.002
and it should be able to print us the average weight

291
00:14:09.002 --> 00:14:12.000
of the fruit from that fruit box.

292
00:14:12.000 --> 00:14:13.005
So the average weight is 0.4,

293
00:14:13.005 --> 00:14:18.006
given that the weight of both the items was 0.5 and 0.3.

294
00:14:18.006 --> 00:14:22.001
We are not really interested in this average output

295
00:14:22.001 --> 00:14:25.008
as much as we are interested in the argument

296
00:14:25.008 --> 00:14:27.004
that you're trying to pass to the method.

297
00:14:27.004 --> 00:14:29.005
So, box of fruit is totally valid.

298
00:14:29.005 --> 00:14:35.000
Let's do one more thing, let's create a box of apple.

299
00:14:35.000 --> 00:14:40.009
Apple box, and then instantiate this to a box object.

300
00:14:40.009 --> 00:14:44.009
And then let's directly call get average weight of fruit

301
00:14:44.009 --> 00:14:47.004
and pass the apple box.

302
00:14:47.004 --> 00:14:49.008
Note that I have not added any items to the apple box,

303
00:14:49.008 --> 00:14:51.003
it's fine because I'm just trying

304
00:14:51.003 --> 00:14:55.000
to test out the valid arguments for the method invocation.

305
00:14:55.000 --> 00:14:57.004
And if you see line 21 compiles well,

306
00:14:57.004 --> 00:14:59.007
which means the method is okay

307
00:14:59.007 --> 00:15:03.007
to accept an argument of the type box of apple.

308
00:15:03.007 --> 00:15:04.009
Let's go ahead and do something else.

309
00:15:04.009 --> 00:15:11.000
We'll say box of boxable.

310
00:15:11.000 --> 00:15:14.005
Let's create a boxable box,

311
00:15:14.005 --> 00:15:19.006
instantiate this to the box object.

312
00:15:19.006 --> 00:15:23.003
And then let's call box.getAverageWeightOfFruit

313
00:15:23.003 --> 00:15:26.002
and pass the boxable box this time.

314
00:15:26.002 --> 00:15:29.003
Now, if I do that, then I get a compilation problem

315
00:15:29.003 --> 00:15:31.006
which says that the required type

316
00:15:31.006 --> 00:15:34.008
is box of anything that extends fruit.

317
00:15:34.008 --> 00:15:38.004
But you provided box of boxable, and that's right.

318
00:15:38.004 --> 00:15:40.008
Boxable does not extend the fruit class.

319
00:15:40.008 --> 00:15:43.002
Boxable is up the hierarchy of fruit.

320
00:15:43.002 --> 00:15:46.005
So, that is not a valid argument for this invocation.

321
00:15:46.005 --> 00:15:49.009
So, let's comment out this line, this is not going to work.

322
00:15:49.009 --> 00:15:52.000
Let's also do one more thing.

323
00:15:52.000 --> 00:15:54.009
We will in invoke this method again.

324
00:15:54.009 --> 00:15:57.005
And we already have a book box created

325
00:15:57.005 --> 00:15:58.007
at the top of this class,

326
00:15:58.007 --> 00:16:01.008
so we'll pass that and see what happens.

327
00:16:01.008 --> 00:16:03.008
And we get the same problem.

328
00:16:03.008 --> 00:16:06.004
It says that the required type is box of something

329
00:16:06.004 --> 00:16:07.005
that extends fruit,

330
00:16:07.005 --> 00:16:09.000
but you provided box of book.

331
00:16:09.000 --> 00:16:10.005
So, it's the same thing again.

332
00:16:10.005 --> 00:16:13.000
Book is not a class that extends fruit

333
00:16:13.000 --> 00:16:15.009
and that is why it is not a valid argument.

334
00:16:15.009 --> 00:16:22.003
So I'll comment out this line of code as well.

335
00:16:22.003 --> 00:16:23.001
So there we go.

336
00:16:23.001 --> 00:16:27.008
That's how you define upper bounded wildcards in your code.

337
00:16:27.008 --> 00:16:30.005
Let us now look at the third way of using wildcards,

338
00:16:30.005 --> 00:16:32.008
which is the lower bounded wildcards.

339
00:16:32.008 --> 00:16:37.000
This is opposite of what we saw in upper bounded wildcards.

340
00:16:37.000 --> 00:16:40.009
This will help you relax restrictions up the hierarchy.

341
00:16:40.009 --> 00:16:44.001
And these are specified using the super keyword.

342
00:16:44.001 --> 00:16:47.006
Let's again, look at all the classes of our box application

343
00:16:47.006 --> 00:16:50.001
and let's see what example we can implement

344
00:16:50.001 --> 00:16:53.006
to accommodate lower bounded wildcards.

345
00:16:53.006 --> 00:16:55.004
This is our hierarchy as we know.

346
00:16:55.004 --> 00:16:59.001
We will write a method adding apples to a box.

347
00:16:59.001 --> 00:17:01.004
Now, when you add an apple to a box,

348
00:17:01.004 --> 00:17:04.000
that box could be a box of apple,

349
00:17:04.000 --> 00:17:07.009
or a box of fruit or a box of boxable.

350
00:17:07.009 --> 00:17:10.009
But it cannot be a box of books.

351
00:17:10.009 --> 00:17:13.001
Let's implement this using the super keyword

352
00:17:13.001 --> 00:17:14.008
and lower bounded wildcards.

353
00:17:14.008 --> 00:17:17.002
This method will now have a parameter,

354
00:17:17.002 --> 00:17:19.005
which is box of question mark,

355
00:17:19.005 --> 00:17:21.002
followed by the super keyword,

356
00:17:21.002 --> 00:17:23.009
followed by the class name apple.

357
00:17:23.009 --> 00:17:27.001
This method will now accept arguments,

358
00:17:27.001 --> 00:17:29.004
which is, an apple

359
00:17:29.004 --> 00:17:33.003
or anything that is a super type of apple.

360
00:17:33.003 --> 00:17:35.007
So, the valid arguments for this method will be

361
00:17:35.007 --> 00:17:41.001
a box of apple or a box of fruit or a box of boxable.

362
00:17:41.001 --> 00:17:44.002
But box of books is not a valid argument.

363
00:17:44.002 --> 00:17:48.004
Let's go ahead in the IDE and implement this quick example.

364
00:17:48.004 --> 00:17:51.008
So for this, let's open the Box class again

365
00:17:51.008 --> 00:17:54.008
and let's come down here and say public,

366
00:17:54.008 --> 00:18:00.002
we'll write the method, public, static, void

367
00:18:00.002 --> 00:18:04.002
add apple to box.

368
00:18:04.002 --> 00:18:11.004
And this time the method parameter will be box of something

369
00:18:11.004 --> 00:18:14.004
which is a super of apple.

370
00:18:14.004 --> 00:18:17.007
Let's give the parameter a name.

371
00:18:17.007 --> 00:18:19.001
And we are not going to do anything special,

372
00:18:19.001 --> 00:18:26.008
we just have to say box.addItem and add an apple object,

373
00:18:26.008 --> 00:18:28.006
that is all that we are going to do.

374
00:18:28.006 --> 00:18:29.009
So, we'll say Royal Gala,

375
00:18:29.009 --> 00:18:32.006
that's the name of the brand of apples.

376
00:18:32.006 --> 00:18:36.009
Country is, well, it's Sweden,

377
00:18:36.009 --> 00:18:43.003
the color is green and the weight, let's say is 0.2.

378
00:18:43.003 --> 00:18:44.006
So, that is all that we are going to do.

379
00:18:44.006 --> 00:18:46.009
We are just going to take the incoming box argument

380
00:18:46.009 --> 00:18:49.003
and add an apple to that box.

381
00:18:49.003 --> 00:18:52.005
The thing to note here is on line 39, this parameter.

382
00:18:52.005 --> 00:18:56.002
This is using lower bounded wildcards.

383
00:18:56.002 --> 00:18:59.005
This means that this method add apple to box,

384
00:18:59.005 --> 00:19:01.006
can now accept an argument

385
00:19:01.006 --> 00:19:06.003
which is either an apple or any super type of apple.

386
00:19:06.003 --> 00:19:10.004
So let's test this out in the TestWildcards class.

387
00:19:10.004 --> 00:19:13.000
I'll come down and add another comment,

388
00:19:13.000 --> 00:19:19.001
this for lower bounded wildcards.

389
00:19:19.001 --> 00:19:21.003
All right, so now let's go ahead and say,

390
00:19:21.003 --> 00:19:28.004
Box.addAppleToBox and let's pass in an apple box.

391
00:19:28.004 --> 00:19:31.002
And if you see, the code compiles perfectly well

392
00:19:31.002 --> 00:19:33.007
because we passed a box of apple.

393
00:19:33.007 --> 00:19:37.003
This apple box variable is of the type box of apple

394
00:19:37.003 --> 00:19:40.006
that we declared on line number 20.

395
00:19:40.006 --> 00:19:44.009
Let's invoke this another time with a different argument.

396
00:19:44.009 --> 00:19:48.005
Let me pass a box of fruit, like that.

397
00:19:48.005 --> 00:19:49.005
And it still works well.

398
00:19:49.005 --> 00:19:51.009
We have the fruit box passed as an argument,

399
00:19:51.009 --> 00:19:54.002
and fruit box, if you see right up there,

400
00:19:54.002 --> 00:19:58.006
is a variable of the type box of fruit on line number 60.

401
00:19:58.006 --> 00:20:00.003
This works well too.

402
00:20:00.003 --> 00:20:03.007
Let's go ahead and say, Box.addAppleToBox,

403
00:20:03.007 --> 00:20:06.005
and this time we'll pass the boxable box.

404
00:20:06.005 --> 00:20:08.004
Let's see what happens.

405
00:20:08.004 --> 00:20:10.004
Yes, and that works well too.

406
00:20:10.004 --> 00:20:13.008
So, boxable box is a variable that you see on line 22,

407
00:20:13.008 --> 00:20:17.001
which is of the type box of boxable.

408
00:20:17.001 --> 00:20:20.001
So, these three arguments work perfectly well.

409
00:20:20.001 --> 00:20:22.004
You have a box of apple, which is okay.

410
00:20:22.004 --> 00:20:26.000
Box of fruit is okay, and box of boxable is okay.

411
00:20:26.000 --> 00:20:29.008
That is because when we declare the lower bounded wildcards,

412
00:20:29.008 --> 00:20:32.003
anything up the hierarchy of apple is fine.

413
00:20:32.003 --> 00:20:35.006
So, apple is okay, fruit is okay, boxable is okay.

414
00:20:35.006 --> 00:20:41.008
Now let's test this with a box of books as well.

415
00:20:41.008 --> 00:20:44.007
And now if you see, you get a compilation problem.

416
00:20:44.007 --> 00:20:47.006
It says that the required type is something

417
00:20:47.006 --> 00:20:49.003
which is a super of apple,

418
00:20:49.003 --> 00:20:52.002
but you are providing a box of book.

419
00:20:52.002 --> 00:20:55.000
So, box of book or the entity book,

420
00:20:55.000 --> 00:20:58.002
is really not in the hierarchy of the apple class,

421
00:20:58.002 --> 00:21:01.001
and that is why this won't work.

422
00:21:01.001 --> 00:21:05.001
So, let me comment this line of code

423
00:21:05.001 --> 00:21:07.006
because this is not going to compile the code.

424
00:21:07.006 --> 00:21:08.005
So, that is it.

425
00:21:08.005 --> 00:21:11.002
This is how you define unbounded,

426
00:21:11.002 --> 00:21:13.007
upper bounded, lower bounded wildcards.

427
00:21:13.007 --> 00:21:15.006
And note that when we use wildcards,

428
00:21:15.006 --> 00:21:18.001
we've definitely eased the restrictions

429
00:21:18.001 --> 00:21:22.000
that we have on methods with certain types of parameters.

