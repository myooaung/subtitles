WEBVTT
1
00:00:00.005 --> 00:00:01.009
- [Instructor] In our previous videos,

2
00:00:01.009 --> 00:00:04.003
we have understood the concept of generics,

3
00:00:04.003 --> 00:00:07.002
we have written some sample code with generics,

4
00:00:07.002 --> 00:00:08.009
and during that process,

5
00:00:08.009 --> 00:00:11.003
we used certain terms back and forth.

6
00:00:11.003 --> 00:00:13.005
Let's clearly understand those terms

7
00:00:13.005 --> 00:00:16.008
so, that it helps us going further in this course.

8
00:00:16.008 --> 00:00:19.002
The first few terms are related to types.

9
00:00:19.002 --> 00:00:21.008
First one, among them is generic types.

10
00:00:21.008 --> 00:00:25.000
So, these are classes or interfaces

11
00:00:25.000 --> 00:00:30.000
whose declaration consists of single or multiple parameters.

12
00:00:30.000 --> 00:00:33.002
So, for example, it is the name of the interface,

13
00:00:33.002 --> 00:00:37.003
List, in this case, followed by a pair of angle brackets,

14
00:00:37.003 --> 00:00:39.001
and in between those angle brackets

15
00:00:39.001 --> 00:00:42.007
you have a type parameter, which is E, in this case.

16
00:00:42.007 --> 00:00:45.009
So, when you take this together, List of E,

17
00:00:45.009 --> 00:00:47.009
that is one generic type.

18
00:00:47.009 --> 00:00:50.001
List of E, extends collection of E.

19
00:00:50.001 --> 00:00:53.008
So, collection of E, is another generic type

20
00:00:53.008 --> 00:00:56.008
that has been defined in the Java APIs.

21
00:00:56.008 --> 00:00:59.006
Let's also see the Map interface of Java APIs.

22
00:00:59.006 --> 00:01:03.004
You read this as Map of K comma V.

23
00:01:03.004 --> 00:01:07.001
Now, this Map generic type has two parameters defined.

24
00:01:07.001 --> 00:01:12.001
One is K for the keys, and the other is V for the values.

25
00:01:12.001 --> 00:01:14.000
So far, we have looked at generic types

26
00:01:14.000 --> 00:01:16.003
from the inbuilt Java APIs,

27
00:01:16.003 --> 00:01:19.008
but we can also write our own generic types,

28
00:01:19.008 --> 00:01:22.004
which we will do in the next module.

29
00:01:22.004 --> 00:01:25.001
The next term is parameterized types.

30
00:01:25.001 --> 00:01:28.008
Each generic type defines a set of parameterized types.

31
00:01:28.008 --> 00:01:31.003
When you invoke a generic type,

32
00:01:31.003 --> 00:01:33.007
you create a parameterized type.

33
00:01:33.007 --> 00:01:37.003
So, parameterized types are also names of classes

34
00:01:37.003 --> 00:01:41.002
or interfaces, followed by a pair of angle brackets,

35
00:01:41.002 --> 00:01:42.009
and in between those angle brackets

36
00:01:42.009 --> 00:01:45.006
you mention the type argument that you pass

37
00:01:45.006 --> 00:01:47.008
when you invoke the generic type.

38
00:01:47.008 --> 00:01:51.004
So, for example, when you say List of String languages,

39
00:01:51.004 --> 00:01:54.004
the part which says, List of String,

40
00:01:54.004 --> 00:01:56.004
that is a parameterized type.

41
00:01:56.004 --> 00:01:57.007
Languages in this case

42
00:01:57.007 --> 00:02:00.003
is just a reference variable of the List type.

43
00:02:00.003 --> 00:02:01.009
The next term is raw types.

44
00:02:01.009 --> 00:02:05.007
Each generic type also defines a set of raw types.

45
00:02:05.007 --> 00:02:09.000
Raw types are merely classes or interfaces that you write

46
00:02:09.000 --> 00:02:11.006
without any type arguments.

47
00:02:11.006 --> 00:02:13.003
So, if you mention in your code

48
00:02:13.003 --> 00:02:16.003
just the name of the interface, likes say, List,

49
00:02:16.003 --> 00:02:18.009
then we say that you created a raw type.

50
00:02:18.009 --> 00:02:22.004
Let's rewind and go back to the non-generic code example

51
00:02:22.004 --> 00:02:24.003
that we wrote in our previous video.

52
00:02:24.003 --> 00:02:25.008
Let's go to the IDE.

53
00:02:25.008 --> 00:02:27.008
And if you look at the Non-generics Code Class

54
00:02:27.008 --> 00:02:31.006
on line number eight, we created a list of languages.

55
00:02:31.006 --> 00:02:33.000
When we wrote this line,

56
00:02:33.000 --> 00:02:34.009
we did not mention the angle brackets,

57
00:02:34.009 --> 00:02:37.003
we did not mention any type arguments.

58
00:02:37.003 --> 00:02:41.006
So, this is called a raw List or alternately, raw type.

59
00:02:41.006 --> 00:02:46.004
Now, a fair warning, never use raw types in your code.

60
00:02:46.004 --> 00:02:49.002
If you do, then you lose the benefits

61
00:02:49.002 --> 00:02:51.004
of safety and expressiveness

62
00:02:51.004 --> 00:02:53.009
that the generics concept comes along with.

63
00:02:53.009 --> 00:02:54.009
Then the question is,

64
00:02:54.009 --> 00:02:58.003
why do we even need these raw types in the language?

65
00:02:58.003 --> 00:03:00.008
This is to support legacy code.

66
00:03:00.008 --> 00:03:02.000
Let's understand this.

67
00:03:02.000 --> 00:03:03.007
Before the advent of generics,

68
00:03:03.007 --> 00:03:07.005
all the code in Java was written with raw types.

69
00:03:07.005 --> 00:03:09.009
When the generics feature got introduced,

70
00:03:09.009 --> 00:03:12.005
Java could not ignore that legacy code.

71
00:03:12.005 --> 00:03:14.004
It could not do away with it.

72
00:03:14.004 --> 00:03:19.003
Java needed to ensure that you can pass parameterized types

73
00:03:19.003 --> 00:03:22.005
to methods with raw types and vice versa.

74
00:03:22.005 --> 00:03:25.000
So, in order to maintain this compatibility

75
00:03:25.000 --> 00:03:26.008
with the pre-generics code,

76
00:03:26.008 --> 00:03:30.002
raw types exist in the language even today.

77
00:03:30.002 --> 00:03:32.004
Today, if you write code with generics

78
00:03:32.004 --> 00:03:35.003
and still continue to use raw types,

79
00:03:35.003 --> 00:03:37.005
then the compiler is going to generate

80
00:03:37.005 --> 00:03:39.005
a fair number of warnings.

81
00:03:39.005 --> 00:03:41.003
You will have to sit through and solve

82
00:03:41.003 --> 00:03:42.008
each one of those warnings,

83
00:03:42.008 --> 00:03:46.000
to ensure that your code is truly safe

84
00:03:46.000 --> 00:03:49.008
and does not have any potential problems at run time.

85
00:03:49.008 --> 00:03:51.003
The next couple of terms

86
00:03:51.003 --> 00:03:54.005
are with respect to parameters and arguments.

87
00:03:54.005 --> 00:03:56.007
In one of our previous videos,

88
00:03:56.007 --> 00:03:59.001
we had discussed the analogy

89
00:03:59.001 --> 00:04:01.006
between method definition invocation

90
00:04:01.006 --> 00:04:04.000
and generics definition and invocation.

91
00:04:04.000 --> 00:04:08.003
So, whenever you define a method, you have parameters.

92
00:04:08.003 --> 00:04:12.007
Whenever you invoke a method, you pass arguments.

93
00:04:12.007 --> 00:04:16.000
Similarly, when you have a generics definition,

94
00:04:16.000 --> 00:04:19.003
you do that with the help of type parameters.

95
00:04:19.003 --> 00:04:24.006
And when you invoke a generic type, you pass type arguments.

96
00:04:24.006 --> 00:04:26.008
Let's look at those couple of terms.

97
00:04:26.008 --> 00:04:29.001
First one is Formal type parameters.

98
00:04:29.001 --> 00:04:34.000
Alternately known as type parameters or type variables.

99
00:04:34.000 --> 00:04:36.006
So, these are the place holders that you find

100
00:04:36.006 --> 00:04:39.001
in the definition of your generic type.

101
00:04:39.001 --> 00:04:44.005
So, for example, in List of E, E is the type parameter.

102
00:04:44.005 --> 00:04:46.003
Type parameters are generally written

103
00:04:46.003 --> 00:04:49.000
in single uppercase letters.

104
00:04:49.000 --> 00:04:51.000
You must be wondering why have they labeled

105
00:04:51.000 --> 00:04:53.005
the type parameter E in this case.

106
00:04:53.005 --> 00:04:55.005
This is a part of the naming convention

107
00:04:55.005 --> 00:04:58.000
that Oracle has laid out for the type parameters.

108
00:04:58.000 --> 00:04:59.008
We will get to that in a bit.

109
00:04:59.008 --> 00:05:03.004
The E that you see, the type parameter, is not a class,

110
00:05:03.004 --> 00:05:07.005
it is just a placeholder, so it cannot be instantiated.

111
00:05:07.005 --> 00:05:10.007
And then the other term is Actual type arguments,

112
00:05:10.007 --> 00:05:13.003
alternately known as type arguments.

113
00:05:13.003 --> 00:05:17.000
This is the concrete type that you pass

114
00:05:17.000 --> 00:05:19.002
when you invoke a generic type.

115
00:05:19.002 --> 00:05:21.000
So, for example, if you want to invoke

116
00:05:21.000 --> 00:05:24.002
the List generic type, you could say, List of String,

117
00:05:24.002 --> 00:05:29.000
and then the String here becomes the type argument.

118
00:05:29.000 --> 00:05:30.001
Other than these terms,

119
00:05:30.001 --> 00:05:33.001
let us also take a look at the diamond operator.

120
00:05:33.001 --> 00:05:37.003
This operator was introduced as a part of Java version 1.7,

121
00:05:37.003 --> 00:05:40.008
and it provides you a way to eliminate the need

122
00:05:40.008 --> 00:05:42.007
for duplicate declaration.

123
00:05:42.007 --> 00:05:44.006
For example, in this line of code,

124
00:05:44.006 --> 00:05:48.008
List of String data equal to new ArrayList.

125
00:05:48.008 --> 00:05:50.001
And then the word ArrayList

126
00:05:50.001 --> 00:05:54.000
is followed by a pair of empty angle brackets,

127
00:05:54.000 --> 00:05:56.005
and after that, you have the constructor call,

128
00:05:56.005 --> 00:05:59.000
which is responsible for the object creation.

129
00:05:59.000 --> 00:06:01.002
This pair of empty angle brackets

130
00:06:01.002 --> 00:06:05.000
that are marked in red, is called the diamond operator.

131
00:06:05.000 --> 00:06:07.000
Let's go and look at the generic code

132
00:06:07.000 --> 00:06:08.005
that we wrote in our previous videos,

133
00:06:08.005 --> 00:06:09.009
to understand this better.

134
00:06:09.009 --> 00:06:11.006
So, let's go to the IDE,

135
00:06:11.006 --> 00:06:14.004
and I will open the Generics Code Class.

136
00:06:14.004 --> 00:06:18.001
On line number eight, we see that have a generics List,

137
00:06:18.001 --> 00:06:22.002
and the type argument String has been mentioned

138
00:06:22.002 --> 00:06:25.006
on both the sites of the assignment operator.

139
00:06:25.006 --> 00:06:27.000
If you see, you have a warning

140
00:06:27.000 --> 00:06:29.008
that the compiler is generating on the right hand side.

141
00:06:29.008 --> 00:06:33.005
It says explicit type argument String

142
00:06:33.005 --> 00:06:37.003
can be replaced with empty angle brackets.

143
00:06:37.003 --> 00:06:40.003
So, this pair of angle brackets, which is empty

144
00:06:40.003 --> 00:06:42.003
is the diamond operator.

145
00:06:42.003 --> 00:06:46.006
So, let's go ahead and remove this type argument from here.

146
00:06:46.006 --> 00:06:48.008
This is what diamond operator is for.

147
00:06:48.008 --> 00:06:51.002
The diamond operator, will completely

148
00:06:51.002 --> 00:06:53.002
eliminate the requirement

149
00:06:53.002 --> 00:06:57.006
of declaring that type argument again on the right hand side

150
00:06:57.006 --> 00:06:59.001
of the assignment operator.

151
00:06:59.001 --> 00:07:02.002
This is because, since on the left hand side of the operator

152
00:07:02.002 --> 00:07:05.006
we have already mentioned the type argument String,

153
00:07:05.006 --> 00:07:07.008
the compiler has inferred

154
00:07:07.008 --> 00:07:10.000
that it must be the same type argument

155
00:07:10.000 --> 00:07:11.009
on the right hand side as well.

156
00:07:11.009 --> 00:07:14.008
This process, by which the compiler infers

157
00:07:14.008 --> 00:07:17.004
the type arguments, based on the context

158
00:07:17.004 --> 00:07:19.005
is called type inference.

159
00:07:19.005 --> 00:07:22.006
We will look at type inference in a little more detail

160
00:07:22.006 --> 00:07:24.005
in a subsequent module.

161
00:07:24.005 --> 00:07:27.002
There is one thing that we have to remember,

162
00:07:27.002 --> 00:07:30.000
and that is we have to use these pair

163
00:07:30.000 --> 00:07:33.002
of empty angle brackets, that is, the diamond operator.

164
00:07:33.002 --> 00:07:38.006
If you remove it, then you will end up creating a raw List.

165
00:07:38.006 --> 00:07:41.006
For example, the compilers already generated a warning

166
00:07:41.006 --> 00:07:46.003
saying, raw use of parameterized class ArrayList.

167
00:07:46.003 --> 00:07:49.003
Do not forget to use the diamond operator,

168
00:07:49.003 --> 00:07:52.004
otherwise, you are still creating raw types.

169
00:07:52.004 --> 00:07:56.000
So, I'll restore that angle bracket pair, and we are good.

