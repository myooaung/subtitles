WEBVTT
1
00:00:00.005 --> 00:00:03.005
- [Instructor] Let us now understand what type erasure is.

2
00:00:03.005 --> 00:00:05.007
When you write code with generics.

3
00:00:05.007 --> 00:00:07.008
And then when you compile that code

4
00:00:07.008 --> 00:00:11.001
the generics information is erased or removed.

5
00:00:11.001 --> 00:00:13.005
This process is called type erasure.

6
00:00:13.005 --> 00:00:15.003
This essentially means

7
00:00:15.003 --> 00:00:18.001
that generics provides type safety checks

8
00:00:18.001 --> 00:00:19.009
only at the compile time.

9
00:00:19.009 --> 00:00:22.005
And this information is not carried

10
00:00:22.005 --> 00:00:26.000
in the bytecode that gets executed at runtime.

11
00:00:26.000 --> 00:00:28.009
So what really happens in the type erasure process.

12
00:00:28.009 --> 00:00:31.000
In this the Java compiler

13
00:00:31.000 --> 00:00:33.006
is going to replace your type parameters.

14
00:00:33.006 --> 00:00:35.004
And there are two scenarios here.

15
00:00:35.004 --> 00:00:39.007
One is when your generic type has unbounded type parameters.

16
00:00:39.007 --> 00:00:40.006
In that case

17
00:00:40.006 --> 00:00:43.003
the compiler will re place those type parameters

18
00:00:43.003 --> 00:00:45.000
with the Object type.

19
00:00:45.000 --> 00:00:47.005
The second scenario is when your generic type

20
00:00:47.005 --> 00:00:49.008
has bounded type parameters.

21
00:00:49.008 --> 00:00:52.005
In that case, the parameters will be replaced

22
00:00:52.005 --> 00:00:54.005
with the corresponding bounds.

23
00:00:54.005 --> 00:00:58.003
In addition to this, the compiler also ensures

24
00:00:58.003 --> 00:01:01.008
that it applies all the appropriate casts

25
00:01:01.008 --> 00:01:03.006
to maintain the compatibility

26
00:01:03.006 --> 00:01:07.001
with the types that specify your type arguments.

27
00:01:07.001 --> 00:01:09.009
This means that the type safety checks

28
00:01:09.009 --> 00:01:11.005
and the implicit costs

29
00:01:11.005 --> 00:01:13.009
that were available at the compile time

30
00:01:13.009 --> 00:01:16.009
will apply at runtime as well.

31
00:01:16.009 --> 00:01:18.005
Let us see a couple of examples

32
00:01:18.005 --> 00:01:21.000
and then let's see how the source

33
00:01:21.000 --> 00:01:23.009
and compiled code differs in type erasure.

34
00:01:23.009 --> 00:01:26.002
Let's say you have a class Box of T

35
00:01:26.002 --> 00:01:28.003
or example in the application.

36
00:01:28.003 --> 00:01:31.007
And inside that you have an instance variable data

37
00:01:31.007 --> 00:01:33.005
which is of the type T.

38
00:01:33.005 --> 00:01:37.000
When this code compiles it will look like this,

39
00:01:37.000 --> 00:01:39.000
public class Box.

40
00:01:39.000 --> 00:01:40.007
And now you see

41
00:01:40.007 --> 00:01:44.005
that the type parameter that was defined is gone.

42
00:01:44.005 --> 00:01:45.009
It's erased.

43
00:01:45.009 --> 00:01:47.007
When you come inside that class

44
00:01:47.007 --> 00:01:50.001
the data variable that you had

45
00:01:50.001 --> 00:01:54.002
the type of that data is now changed to Object.

46
00:01:54.002 --> 00:01:55.005
So this is what happens.

47
00:01:55.005 --> 00:01:57.000
The type parameter T

48
00:01:57.000 --> 00:02:00.002
is going to be replaced by the object type.

49
00:02:00.002 --> 00:02:03.004
And that is because this Box of T

50
00:02:03.004 --> 00:02:06.000
is an unbounded generic type.

51
00:02:06.000 --> 00:02:08.007
The other example is with the bounded types.

52
00:02:08.007 --> 00:02:10.000
So let's say you have a class

53
00:02:10.000 --> 00:02:12.008
Box of T extends Boxable.

54
00:02:12.008 --> 00:02:14.009
And inside you have a data variable again,

55
00:02:14.009 --> 00:02:16.001
the instance variable,

56
00:02:16.001 --> 00:02:17.005
which is of the type T.

57
00:02:17.005 --> 00:02:20.006
When this code compiles it'll look like this,

58
00:02:20.006 --> 00:02:22.003
public class Box,

59
00:02:22.003 --> 00:02:25.005
again, that bounded type in formation is gone

60
00:02:25.005 --> 00:02:30.007
and inside the T is replaced by the Boxable type.

61
00:02:30.007 --> 00:02:33.002
That is because Boxable is the first bound

62
00:02:33.002 --> 00:02:36.004
that it found in your generics source code.

63
00:02:36.004 --> 00:02:39.001
So this is how the source and compiled code will look like.

64
00:02:39.001 --> 00:02:42.003
And please note that this compiled code that you see

65
00:02:42.003 --> 00:02:44.001
is not the exact bytecode,

66
00:02:44.001 --> 00:02:46.003
it a representation of how

67
00:02:46.003 --> 00:02:48.006
the compiled code would look like.

68
00:02:48.006 --> 00:02:52.000
So now the question is why is this type erasure needed?

69
00:02:52.000 --> 00:02:54.000
There are a few reasons, let's understand.

70
00:02:54.000 --> 00:02:57.001
First is to maintain or support legacy code.

71
00:02:57.001 --> 00:02:59.005
But before the advent of generics

72
00:02:59.005 --> 00:03:03.001
all the code was written in Java with raw types.

73
00:03:03.001 --> 00:03:04.008
When generics came in

74
00:03:04.008 --> 00:03:07.006
Java could not introduce any breaking changes

75
00:03:07.006 --> 00:03:09.001
in the older code.

76
00:03:09.001 --> 00:03:10.003
It could not ignore it.

77
00:03:10.003 --> 00:03:12.002
It could not do away with it.

78
00:03:12.002 --> 00:03:15.006
It also needed a mechanism to ensure

79
00:03:15.006 --> 00:03:18.002
that today when you write code with generics,

80
00:03:18.002 --> 00:03:21.001
you are able to pass parameterized types

81
00:03:21.001 --> 00:03:24.001
to methods with raw types and vice versa.

82
00:03:24.001 --> 00:03:27.001
So in order to maintain this compatibility

83
00:03:27.001 --> 00:03:28.008
with the pre generics code,

84
00:03:28.008 --> 00:03:32.000
and to ensure that the old and the new code

85
00:03:32.000 --> 00:03:34.005
work in harmony with each other.

86
00:03:34.005 --> 00:03:37.004
The type erasure process was formulated.

87
00:03:37.004 --> 00:03:39.005
The other reason was to ensure

88
00:03:39.005 --> 00:03:41.007
that there are no new classes created

89
00:03:41.007 --> 00:03:43.005
for parameterized types.

90
00:03:43.005 --> 00:03:45.000
So when you invoke a generic type,

91
00:03:45.000 --> 00:03:48.005
let's say box of fruit or list of integer,

92
00:03:48.005 --> 00:03:50.009
there are no separate classes that get created

93
00:03:50.009 --> 00:03:52.006
for these invocations.

94
00:03:52.006 --> 00:03:54.003
The last reason is to ensure

95
00:03:54.003 --> 00:03:56.004
that there is no runtime overhead.

96
00:03:56.004 --> 00:03:58.009
This means that the type safety checks

97
00:03:58.009 --> 00:04:01.009
and the implicit casts that you got at compile time.

98
00:04:01.009 --> 00:04:04.001
None of them will apply at runtime.

99
00:04:04.001 --> 00:04:07.003
So there is no additional processing, no overhead.

100
00:04:07.003 --> 00:04:11.004
Also, there is neither an improvement in the performance

101
00:04:11.004 --> 00:04:12.009
nor a reduction.

102
00:04:12.009 --> 00:04:13.009
So at the end of the day,

103
00:04:13.009 --> 00:04:17.003
the performance of a generics list will be exactly the same

104
00:04:17.003 --> 00:04:19.004
as that of the raw list.

105
00:04:19.004 --> 00:04:22.007
Type erasure process applies to generic types

106
00:04:22.007 --> 00:04:24.005
which means generic classes,

107
00:04:24.005 --> 00:04:27.008
generic interfaces, and methods.

108
00:04:27.008 --> 00:04:29.006
There is one last bit of information

109
00:04:29.006 --> 00:04:32.001
that we need to understand in type erasure.

110
00:04:32.001 --> 00:04:35.008
That is generic's metadata in the .class files.

111
00:04:35.008 --> 00:04:36.008
In order to do this

112
00:04:36.008 --> 00:04:38.008
let's look at the decompiled version

113
00:04:38.008 --> 00:04:42.000
of the ArrayList class in our IntelliJ IDE.

114
00:04:42.000 --> 00:04:43.007
So let's head back to the IDE

115
00:04:43.007 --> 00:04:46.002
and let's open the ArrayList class.

116
00:04:46.002 --> 00:04:47.005
So let's open GenericsCode

117
00:04:47.005 --> 00:04:50.000
and somewhere we have referenced the ArrayList class.

118
00:04:50.000 --> 00:04:51.008
Yeah, on line number eight.

119
00:04:51.008 --> 00:04:55.000
So I'm just going to say, Ctrl + Click.

120
00:04:55.000 --> 00:04:57.001
This file that you see

121
00:04:57.001 --> 00:05:02.009
is the decompiled class that is provided by IntelliJ IDE.

122
00:05:02.009 --> 00:05:05.002
And in this you would assume,

123
00:05:05.002 --> 00:05:06.008
or you would expect

124
00:05:06.008 --> 00:05:09.006
that the generics information is missing.

125
00:05:09.006 --> 00:05:11.008
So let's go and see the declaration.

126
00:05:11.008 --> 00:05:13.001
Let's scroll at the top.

127
00:05:13.001 --> 00:05:15.002
And if you see on line 108

128
00:05:15.002 --> 00:05:17.006
you still see the generics information.

129
00:05:17.006 --> 00:05:20.000
You still see ArrayList of E,

130
00:05:20.000 --> 00:05:22.007
AbstractList off E, et cetera.

131
00:05:22.007 --> 00:05:24.002
So this information that you see

132
00:05:24.002 --> 00:05:27.008
is actually the metadata information about generics

133
00:05:27.008 --> 00:05:30.006
that is preserved in your .class file.

134
00:05:30.006 --> 00:05:33.004
Now your .class file does not have only the bytecode.

135
00:05:33.004 --> 00:05:35.007
It also has a lot of metadata.

136
00:05:35.007 --> 00:05:39.008
And one piece of this metadata is the generics information.

137
00:05:39.008 --> 00:05:42.002
Question is why do you need it?

138
00:05:42.002 --> 00:05:44.004
This is needed in case when your code

139
00:05:44.004 --> 00:05:47.008
is going to be used or consumed by somebody else.

140
00:05:47.008 --> 00:05:49.002
Let's understand this scenario.

141
00:05:49.002 --> 00:05:50.006
Let's say you have Box APIs

142
00:05:50.006 --> 00:05:52.007
all coded and ready to be shipped.

143
00:05:52.007 --> 00:05:54.001
Now there is a third party

144
00:05:54.001 --> 00:05:56.009
that wants to consume the Box APIs.

145
00:05:56.009 --> 00:05:58.006
So this third party is going to refer

146
00:05:58.006 --> 00:06:01.003
all your .class files in their project.

147
00:06:01.003 --> 00:06:02.007
And let's say there is a developer

148
00:06:02.007 --> 00:06:04.009
in the environment of the third party

149
00:06:04.009 --> 00:06:07.009
who wants to write a code line like this.

150
00:06:07.009 --> 00:06:11.009
Box of chocolate, chocolates equal to new Box.

151
00:06:11.009 --> 00:06:13.002
Now in order

152
00:06:13.002 --> 00:06:16.003
that the local compiler on that developer's machine

153
00:06:16.003 --> 00:06:20.006
understands that your Box APIs do support generics

154
00:06:20.006 --> 00:06:24.000
We need that generics information preserved

155
00:06:24.000 --> 00:06:26.000
in the .class files.

