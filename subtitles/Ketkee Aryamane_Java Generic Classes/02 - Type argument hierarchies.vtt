WEBVTT
1
00:00:00.000 --> 00:00:01.005
- [Instructor] In the previous video,

2
00:00:01.005 --> 00:00:04.004
we saw the hierarchies for generic classes.

3
00:00:04.004 --> 00:00:07.000
But then what happens to the type arguments?

4
00:00:07.000 --> 00:00:09.007
Remember that whenever we invoke a generic class,

5
00:00:09.007 --> 00:00:12.009
the type argument is always passed along with it.

6
00:00:12.009 --> 00:00:15.004
And type arguments at the end of the day are types,

7
00:00:15.004 --> 00:00:18.004
so they'll also have parent-child classes.

8
00:00:18.004 --> 00:00:21.002
Well, it is not as straightforward

9
00:00:21.002 --> 00:00:23.001
as it is with generic classes.

10
00:00:23.001 --> 00:00:24.009
When it comes to type arguments,

11
00:00:24.009 --> 00:00:27.002
generics is quite strict.

12
00:00:27.002 --> 00:00:29.006
And it requires an exact an match.

13
00:00:29.006 --> 00:00:30.007
Let's see how.

14
00:00:30.007 --> 00:00:33.008
We know that the class double is a subclass,

15
00:00:33.008 --> 00:00:36.008
of the class number in the Java APIs.

16
00:00:36.008 --> 00:00:39.001
Now, just because this relationship is true,

17
00:00:39.001 --> 00:00:43.002
that does not mean that an array list of double,

18
00:00:43.002 --> 00:00:46.001
becomes a subtype of list of number.

19
00:00:46.001 --> 00:00:47.004
This is not possible.

20
00:00:47.004 --> 00:00:50.004
That is because, the type argument that was used

21
00:00:50.004 --> 00:00:52.006
in the invocation of list is number,

22
00:00:52.006 --> 00:00:55.005
and the one which was used in a real is double.

23
00:00:55.005 --> 00:00:57.007
And these arguments do not match.

24
00:00:57.007 --> 00:01:00.006
This means, that you cannot pass

25
00:01:00.006 --> 00:01:03.004
an array list of double argument,

26
00:01:03.004 --> 00:01:07.007
to a method that accepts a list of number parameter.

27
00:01:07.007 --> 00:01:09.005
Let's see a piece of code for this.

28
00:01:09.005 --> 00:01:11.008
Let's say you have a class called Mathutility,

29
00:01:11.008 --> 00:01:15.005
and inside that there is a static average method.

30
00:01:15.005 --> 00:01:17.009
This method accepts a parameter,

31
00:01:17.009 --> 00:01:19.009
of the type list of number.

32
00:01:19.009 --> 00:01:21.006
Now, when you invoke this method,

33
00:01:21.006 --> 00:01:25.001
like this, Mathutility.average,

34
00:01:25.001 --> 00:01:27.009
you cannot pass an argument,

35
00:01:27.009 --> 00:01:30.006
which is new array list of double.

36
00:01:30.006 --> 00:01:31.004
Why?

37
00:01:31.004 --> 00:01:33.001
Because, the type argument

38
00:01:33.001 --> 00:01:35.006
that is used in that method argument,

39
00:01:35.006 --> 00:01:38.006
is not the same as the type argument,

40
00:01:38.006 --> 00:01:40.006
in the method parameter.

41
00:01:40.006 --> 00:01:44.008
Consequently, you will not be able to do casting as well.

42
00:01:44.008 --> 00:01:45.009
Let's understand how.

43
00:01:45.009 --> 00:01:47.009
Let's say you have this piece of code,

44
00:01:47.009 --> 00:01:49.008
there is a variable numbers,

45
00:01:49.008 --> 00:01:52.003
which is of the type list of number.

46
00:01:52.003 --> 00:01:55.004
And there is another variable doubles on the next line,

47
00:01:55.004 --> 00:01:57.009
which is of the type array list of double.

48
00:01:57.009 --> 00:02:01.004
And it is instantiated to an array list of double object.

49
00:02:01.004 --> 00:02:02.006
Given these two lines,

50
00:02:02.006 --> 00:02:05.009
you will not be able to assign the doubles variable,

51
00:02:05.009 --> 00:02:07.005
to the numbers variable.

52
00:02:07.005 --> 00:02:09.002
The reason is the same again.

53
00:02:09.002 --> 00:02:12.004
The type argument that was used with the array's class,

54
00:02:12.004 --> 00:02:16.000
is not the same as the type argument used with the list.

55
00:02:16.000 --> 00:02:19.005
Now, these restrictions that we saw on type arguments,

56
00:02:19.005 --> 00:02:21.001
could be a little more relaxed,

57
00:02:21.001 --> 00:02:22.008
when we use wildcards.

58
00:02:22.008 --> 00:02:24.009
And we're going to look at wildcards,

59
00:02:24.009 --> 00:02:27.002
in the subsequent videos in this module.

60
00:02:27.002 --> 00:02:28.006
So given all these rules,

61
00:02:28.006 --> 00:02:32.002
what are then the valid cases for generic hierarchies?

62
00:02:32.002 --> 00:02:35.002
There's one rule that we have to absolutely remember.

63
00:02:35.002 --> 00:02:38.000
That is, your subtype relationships

64
00:02:38.000 --> 00:02:39.003
are going to be preserved,

65
00:02:39.003 --> 00:02:43.001
only when your type arguments have an exact match.

66
00:02:43.001 --> 00:02:44.007
Let's see a couple of examples.

67
00:02:44.007 --> 00:02:46.009
We know that list and array list,

68
00:02:46.009 --> 00:02:48.009
are in a parent-child relationship.

69
00:02:48.009 --> 00:02:51.002
So if you create a list of double,

70
00:02:51.002 --> 00:02:53.008
and then if you create an array list of double,

71
00:02:53.008 --> 00:02:56.004
since the type argument is an exact match here,

72
00:02:56.004 --> 00:03:00.000
that's why a real of double is a correct subtype,

73
00:03:00.000 --> 00:03:01.005
of list of double.

74
00:03:01.005 --> 00:03:02.006
Let's see one more example,

75
00:03:02.006 --> 00:03:04.008
which is from our box application.

76
00:03:04.008 --> 00:03:06.001
In the previous demo,

77
00:03:06.001 --> 00:03:09.002
we created a subclass called cardboard box,

78
00:03:09.002 --> 00:03:11.001
which extended the box class.

79
00:03:11.001 --> 00:03:13.002
And when we tested that example,

80
00:03:13.002 --> 00:03:16.008
we created a box of fruit, and a cardboard box of fruit.

81
00:03:16.008 --> 00:03:18.008
So again, the type of argument

82
00:03:18.008 --> 00:03:21.007
is the same here in both cases, which is fruit.

83
00:03:21.007 --> 00:03:25.001
And that's why this relationship is also valid.

84
00:03:25.001 --> 00:03:27.002
Let us do a very quick demo,

85
00:03:27.002 --> 00:03:29.003
for the type argument hierarchies.

86
00:03:29.003 --> 00:03:32.004
So the first step is to create a class apple,

87
00:03:32.004 --> 00:03:34.000
which extends fruit.

88
00:03:34.000 --> 00:03:36.006
So now we are trying to create a parent-child relationship,

89
00:03:36.006 --> 00:03:38.003
for a type arguments that we pass

90
00:03:38.003 --> 00:03:40.003
when we invoke our generic types.

91
00:03:40.003 --> 00:03:41.008
So let's head back to the IDE,

92
00:03:41.008 --> 00:03:45.009
and create a class apple.

93
00:03:45.009 --> 00:03:48.000
This will be a class, not an annotation.

94
00:03:48.000 --> 00:03:49.004
Okay.

95
00:03:49.004 --> 00:03:53.009
And let this extend the fruit class.

96
00:03:53.009 --> 00:03:55.001
And the moment you do this,

97
00:03:55.001 --> 00:03:56.003
it'll tell you that there is no

98
00:03:56.003 --> 00:03:58.007
default constructor available in the fruit class,

99
00:03:58.007 --> 00:04:00.006
So you will have to create a constructor,

100
00:04:00.006 --> 00:04:03.006
matching the super class constructor.

101
00:04:03.006 --> 00:04:05.001
So there we go.

102
00:04:05.001 --> 00:04:09.002
The next step will be to create a box of apple instance.

103
00:04:09.002 --> 00:04:12.007
So let's go to our test class now.

104
00:04:12.007 --> 00:04:15.007
Test generic hierarchies.

105
00:04:15.007 --> 00:04:18.003
And I'm just going to put a comment here,

106
00:04:18.003 --> 00:04:23.001
type argument Hierarchies.

107
00:04:23.001 --> 00:04:26.005
So we know, that this demo specifically for type arguments.

108
00:04:26.005 --> 00:04:30.000
So let's go ahead and create a box of apple instance.

109
00:04:30.000 --> 00:04:33.001
Like that.

110
00:04:33.001 --> 00:04:34.005
Say apple box,

111
00:04:34.005 --> 00:04:39.003
and just instantiate this to the box object.

112
00:04:39.003 --> 00:04:44.001
Next step is to assign a box of apple reference,

113
00:04:44.001 --> 00:04:47.003
to a box of fruit reference.

114
00:04:47.003 --> 00:04:48.008
And on line number seven,

115
00:04:48.008 --> 00:04:51.006
we already have a fruit box variable,

116
00:04:51.006 --> 00:04:53.006
which is of the type, box of fruit.

117
00:04:53.006 --> 00:04:56.008
So we are going to say fruit box,

118
00:04:56.008 --> 00:04:58.002
equal to apple box.

119
00:04:58.002 --> 00:05:01.005
We want to assign the box of apple variable,

120
00:05:01.005 --> 00:05:03.007
to the box of variable.

121
00:05:03.007 --> 00:05:06.003
And if you see, you get a compilation problem.

122
00:05:06.003 --> 00:05:08.009
It says that the required type is box of fruit,

123
00:05:08.009 --> 00:05:10.008
but you're providing box of apple.

124
00:05:10.008 --> 00:05:14.002
And this is because, there is no exact match,

125
00:05:14.002 --> 00:05:16.009
on the type argument that you passed,

126
00:05:16.009 --> 00:05:19.002
when you created both of those boxes.

127
00:05:19.002 --> 00:05:21.008
So this is how it works for type arguments.

128
00:05:21.008 --> 00:05:26.002
And we've already seen the valid cases for hierarchies.

129
00:05:26.002 --> 00:05:28.003
Do not forget that the type argument,

130
00:05:28.003 --> 00:05:30.007
must be an exact match.

131
00:05:30.007 --> 00:05:32.004
So let's comment out this quote,

132
00:05:32.004 --> 00:05:34.006
because it'll lead to a compilation error,

133
00:05:34.006 --> 00:05:36.000
and the project will not build.

