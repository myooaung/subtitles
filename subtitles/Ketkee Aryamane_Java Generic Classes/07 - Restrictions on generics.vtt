WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Narrator] We have looked at a couple of rules

2
00:00:02.002 --> 00:00:04.003
in generics in the first module,

3
00:00:04.003 --> 00:00:06.005
but there is an additional set of restrictions

4
00:00:06.005 --> 00:00:08.002
that you need to be aware of.

5
00:00:08.002 --> 00:00:10.007
The first one is with type parameters.

6
00:00:10.007 --> 00:00:14.006
The rule is that you cannot instantiate a type parameter.

7
00:00:14.006 --> 00:00:20.005
This means you cannot write code like this, Tt = new T().

8
00:00:20.005 --> 00:00:23.008
Remember that T is just a placeholder

9
00:00:23.008 --> 00:00:26.005
and will be replaced by the desired type argument

10
00:00:26.005 --> 00:00:29.008
that you pass when you invoke your generic type.

11
00:00:29.008 --> 00:00:32.004
The next restriction is for static fields.

12
00:00:32.004 --> 00:00:34.009
You cannot declare static fields in your code

13
00:00:34.009 --> 00:00:38.002
whose types are type parameters.

14
00:00:38.002 --> 00:00:40.009
Static fields or methods are always defined

15
00:00:40.009 --> 00:00:42.004
for the class level.

16
00:00:42.004 --> 00:00:44.002
They are never associated

17
00:00:44.002 --> 00:00:47.001
with any particular instance of the class.

18
00:00:47.001 --> 00:00:49.000
So let's say, in your box class,

19
00:00:49.000 --> 00:00:53.009
you declare a static field like this, private static T t;

20
00:00:53.009 --> 00:00:57.001
and then you create two instances of the box class,

21
00:00:57.001 --> 00:00:59.008
Box<Fruit> and Box<Book>.

22
00:00:59.008 --> 00:01:02.006
In that case, it is not possible to determine

23
00:01:02.006 --> 00:01:05.006
which of these type arguments will replace that T

24
00:01:05.006 --> 00:01:09.004
for your static field, so this is not allowed.

25
00:01:09.004 --> 00:01:12.007
The next restriction is on the instanceof operator.

26
00:01:12.007 --> 00:01:16.000
instanceof operator in Java is used to check

27
00:01:16.000 --> 00:01:19.003
if a variable is an instance of a certain class

28
00:01:19.003 --> 00:01:21.008
and this check happens at runtime.

29
00:01:21.008 --> 00:01:24.000
Let's say, if you write code like this,

30
00:01:24.000 --> 00:01:27.005
Box<fruit>fruitBox = new Box<>();

31
00:01:27.005 --> 00:01:29.007
and then you make a check like this,

32
00:01:29.007 --> 00:01:33.003
if (fruitBox instanceof Box<Fruit>).

33
00:01:33.003 --> 00:01:36.002
Well, this check will not make any sense

34
00:01:36.002 --> 00:01:37.009
because after type erasure,

35
00:01:37.009 --> 00:01:40.009
the type argument fruit is going to be erased.

36
00:01:40.009 --> 00:01:43.008
So in the end, you will just check whether the fruit box

37
00:01:43.008 --> 00:01:45.006
is an instance of the box type.

38
00:01:45.006 --> 00:01:49.000
So the compiler does not allow this operation at all.

39
00:01:49.000 --> 00:01:53.001
This operator, however, works with unbounded wildcards.

40
00:01:53.001 --> 00:01:55.007
For example, let's look at this piece of code,

41
00:01:55.007 --> 00:01:59.000
Box<fruit>fruitBox = new Box<>();

42
00:01:59.000 --> 00:02:01.000
and then you make a check where you say

43
00:02:01.000 --> 00:02:04.004
if (fruitBox instanceof CardboardBox<?>)

44
00:02:04.004 --> 00:02:07.004
and you insert a wildcard character this time.

45
00:02:07.004 --> 00:02:09.009
Now, since this is a wildcard character,

46
00:02:09.009 --> 00:02:14.001
we really do not care what type argument will replace it.

47
00:02:14.001 --> 00:02:17.002
But the type argument fruit will definitely get erased

48
00:02:17.002 --> 00:02:18.007
after type erasure.

49
00:02:18.007 --> 00:02:21.002
So you will end up checking whether the fruit box

50
00:02:21.002 --> 00:02:23.005
is an instance of cardboard box type,

51
00:02:23.005 --> 00:02:27.002
which is totally fine, and is allowed by the compiler.

52
00:02:27.002 --> 00:02:29.005
The next restriction is on arrays.

53
00:02:29.005 --> 00:02:33.001
You are not allowed to create arrays of parameterized types.

54
00:02:33.001 --> 00:02:36.000
So a line of code, like this, will not work,

55
00:02:36.000 --> 00:02:38.004
Box<Fruit>, which is an array,

56
00:02:38.004 --> 00:02:40.008
the name of the array is []fruitBoxArray

57
00:02:40.008 --> 00:02:43.000
and that is equal to new Box<Fruit>

58
00:02:43.000 --> 00:02:45.001
with a capacity of 10 for that array.

59
00:02:45.001 --> 00:02:46.001
This will not work.

60
00:02:46.001 --> 00:02:48.002
It's not allowed by the compiler.

61
00:02:48.002 --> 00:02:51.002
The next restriction is on method overloading.

62
00:02:51.002 --> 00:02:54.002
The rule is that you cannot create an overloaded method,

63
00:02:54.002 --> 00:02:56.002
which has got the same type erasure

64
00:02:56.002 --> 00:02:57.009
as your original method.

65
00:02:57.009 --> 00:02:59.005
Let's say, you have a method

66
00:02:59.005 --> 00:03:04.003
called private static void add(Box<Fruit>fruitBox).

67
00:03:04.003 --> 00:03:06.007
And then you create an overloaded version

68
00:03:06.007 --> 00:03:10.003
of this method by changing the parameter, like this,

69
00:03:10.003 --> 00:03:14.008
private static void add(Box<Book>bookBox).

70
00:03:14.008 --> 00:03:16.001
After type erasure,

71
00:03:16.001 --> 00:03:19.009
both of these methods will look exactly the same.

72
00:03:19.009 --> 00:03:22.000
They will be termed as duplicate methods

73
00:03:22.000 --> 00:03:24.007
and that is something that's not allowed in Java.

74
00:03:24.007 --> 00:03:27.004
The last restriction is with throwables.

75
00:03:27.004 --> 00:03:30.004
The first rule is you cannot create a genetic subclass

76
00:03:30.004 --> 00:03:34.003
that extends throwable or any of its subtypes.

77
00:03:34.003 --> 00:03:36.000
For example, code, like this,

78
00:03:36.000 --> 00:03:41.000
class BoxException<T>extends Throwable will not work.

79
00:03:41.000 --> 00:03:42.004
The second rule to this

80
00:03:42.004 --> 00:03:46.004
is that you cannot use a type parameter in the catch clause

81
00:03:46.004 --> 00:03:49.006
when you write code for exceptions in your applications.

82
00:03:49.006 --> 00:03:51.006
However, the throws clause

83
00:03:51.006 --> 00:03:54.003
with a type parameter totally works.

84
00:03:54.003 --> 00:03:56.003
For example, if you have a class,

85
00:03:56.003 --> 00:04:00.000
GenericClass<T extends Throwable>,

86
00:04:00.000 --> 00:04:02.009
then you can use that type parameter, T,

87
00:04:02.009 --> 00:04:05.005
in the throws clause for all methods

88
00:04:05.005 --> 00:04:08.000
inside that generic clause.

