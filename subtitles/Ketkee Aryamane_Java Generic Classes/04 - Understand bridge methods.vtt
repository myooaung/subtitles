WEBVTT
1
00:00:00.004 --> 00:00:02.008
- [Instructor] One effect of the type erasure process

2
00:00:02.008 --> 00:00:05.003
is a generation of bridge methods.

3
00:00:05.003 --> 00:00:08.005
This is applicable in certain unanticipated situation

4
00:00:08.005 --> 00:00:11.008
where some subclasses extend generic classes

5
00:00:11.008 --> 00:00:14.009
and they're needed, because the type erasure

6
00:00:14.009 --> 00:00:18.006
for the overriding method in the subclass is different

7
00:00:18.006 --> 00:00:21.008
from the type erasure of the method in the superclass.

8
00:00:21.008 --> 00:00:24.005
So in order to handle this kind of a situation,

9
00:00:24.005 --> 00:00:26.008
Java compiler generates a synthetic method for you

10
00:00:26.008 --> 00:00:29.002
which is the bridge method.

11
00:00:29.002 --> 00:00:32.006
Now, this is just an implementation detail.

12
00:00:32.006 --> 00:00:34.008
You are never going to see this method,

13
00:00:34.008 --> 00:00:37.002
you are never going to invoke it either.

14
00:00:37.002 --> 00:00:39.001
This is just an interesting thing

15
00:00:39.001 --> 00:00:41.002
that you need to be aware of.

16
00:00:41.002 --> 00:00:44.005
Let's explain bridge methods to ourselves with an example,

17
00:00:44.005 --> 00:00:47.005
we know of the Java API interface comparator

18
00:00:47.005 --> 00:00:49.004
it's used to compare to objects

19
00:00:49.004 --> 00:00:52.006
and it looks like this, public interface comparator of T,

20
00:00:52.006 --> 00:00:55.006
T is the type parameter here.

21
00:00:55.006 --> 00:00:57.008
And inside we have a method compare

22
00:00:57.008 --> 00:01:01.001
which has got two parameters of the T type.

23
00:01:01.001 --> 00:01:03.003
Now let's say you to write your own competitor

24
00:01:03.003 --> 00:01:06.009
implementation, to compare two integer objects.

25
00:01:06.009 --> 00:01:09.005
In that case you can write a class like this,

26
00:01:09.005 --> 00:01:11.004
public class int comparator,

27
00:01:11.004 --> 00:01:14.007
implements comparator of integer.

28
00:01:14.007 --> 00:01:17.009
So if you recollect a generic class hierarchy's discussion

29
00:01:17.009 --> 00:01:20.006
we had stated that sometimes a sub class

30
00:01:20.006 --> 00:01:23.007
can specify a type argument directly

31
00:01:23.007 --> 00:01:26.005
for the super type in the implements clause.

32
00:01:26.005 --> 00:01:27.007
This is that case.

33
00:01:27.007 --> 00:01:31.007
Because of this, int competitor becomes a generic clause,

34
00:01:31.007 --> 00:01:35.000
and that's why the compare method of int comparator

35
00:01:35.000 --> 00:01:37.006
has parameters of the integer type.

36
00:01:37.006 --> 00:01:41.001
Now, when both of these entities get compiled,

37
00:01:41.001 --> 00:01:44.004
after type erasure this is they look like.

38
00:01:44.004 --> 00:01:46.005
The comparator interface looks like this,

39
00:01:46.005 --> 00:01:48.004
public interface comparator

40
00:01:48.004 --> 00:01:51.006
and now the type parameter T is erased.

41
00:01:51.006 --> 00:01:54.001
And inside, we are left with the compare method

42
00:01:54.001 --> 00:01:57.002
whose parameters are of the object type.

43
00:01:57.002 --> 00:01:58.009
As far as our class is concerned

44
00:01:58.009 --> 00:02:01.005
which is int comparator, it looks like this,

45
00:02:01.005 --> 00:02:05.002
public class int comparator implements comparator,

46
00:02:05.002 --> 00:02:08.000
and now the type argument for the comparator interface

47
00:02:08.000 --> 00:02:10.007
in the implements clause is erased.

48
00:02:10.007 --> 00:02:12.008
Inside we are left with a compare method

49
00:02:12.008 --> 00:02:15.008
whose parameters are of the in type.

50
00:02:15.008 --> 00:02:18.002
So now you see that the type erasure process

51
00:02:18.002 --> 00:02:22.000
in both of these yields different results, the parameters

52
00:02:22.000 --> 00:02:25.002
in the compare method of the subclass are of integer type.

53
00:02:25.002 --> 00:02:28.000
Whereas the parameters in the compare method

54
00:02:28.000 --> 00:02:31.006
of the comparator interface are of the object type.

55
00:02:31.006 --> 00:02:34.007
This means that your int comparator class

56
00:02:34.007 --> 00:02:37.008
does not technically override the compare method

57
00:02:37.008 --> 00:02:40.002
because the signatures are different.

58
00:02:40.002 --> 00:02:41.008
So in order to make this work

59
00:02:41.008 --> 00:02:44.002
the compiler will add an additional method

60
00:02:44.002 --> 00:02:46.002
for you which is the bridge method.

61
00:02:46.002 --> 00:02:48.005
And it looks like this, the line that is marked

62
00:02:48.005 --> 00:02:50.009
in red is the bridge method that was generated

63
00:02:50.009 --> 00:02:52.001
by the compiler.

64
00:02:52.001 --> 00:02:54.004
The signature of this method is exactly same

65
00:02:54.004 --> 00:02:57.002
as the one that you'll find in the super class version.

66
00:02:57.002 --> 00:02:59.004
Then this bridge method internally calls

67
00:02:59.004 --> 00:03:02.002
the subclass version of the compare method.

68
00:03:02.002 --> 00:03:06.003
So this is how Java compiler solves the type erasure issue

69
00:03:06.003 --> 00:03:08.009
for you and preserves polymorphism

70
00:03:08.009 --> 00:03:12.000
in generic types after type erasure.

