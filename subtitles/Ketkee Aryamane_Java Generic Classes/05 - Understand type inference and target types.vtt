WEBVTT
1
00:00:00.005 --> 00:00:03.002
- [Narrator] Let us understand what type inference is.

2
00:00:03.002 --> 00:00:04.006
We have introduced ourselves

3
00:00:04.006 --> 00:00:06.004
to this topic in the first module

4
00:00:06.004 --> 00:00:08.004
when we use the diamond operator.

5
00:00:08.004 --> 00:00:10.004
In order to know this concept better

6
00:00:10.004 --> 00:00:13.003
we need to know a term called type witness.

7
00:00:13.003 --> 00:00:15.009
This is a way of informing the compiler

8
00:00:15.009 --> 00:00:17.005
about the type argument

9
00:00:17.005 --> 00:00:21.003
that you intend to use in a generic type invocation.

10
00:00:21.003 --> 00:00:23.004
Let's understand this quickly with a piece of code.

11
00:00:23.004 --> 00:00:27.000
Let's go back to the IDE and I will create a class

12
00:00:27.000 --> 00:00:32.002
which is called test type inference.

13
00:00:32.002 --> 00:00:33.005
So we do all the testing

14
00:00:33.005 --> 00:00:37.002
for the type inference demos in this class.

15
00:00:37.002 --> 00:00:39.009
And inside that, let's try the main method.

16
00:00:39.009 --> 00:00:41.008
Let's put a comment here.

17
00:00:41.008 --> 00:00:45.004
That this is the type witness demo.

18
00:00:45.004 --> 00:00:47.000
Now I'll write a single line of code.

19
00:00:47.000 --> 00:00:49.007
I'll grab the collections utility package.

20
00:00:49.007 --> 00:00:53.006
And in that there is a method called empty list.

21
00:00:53.006 --> 00:00:57.006
Now, if I just invoke this method, I do not know what type

22
00:00:57.006 --> 00:01:00.002
of list is returned out of this method.

23
00:01:00.002 --> 00:01:02.000
Well, the compiler already knows about it,

24
00:01:02.000 --> 00:01:06.003
it has detected it, but we as observers don't know about it.

25
00:01:06.003 --> 00:01:09.004
So now, I'm going to find out what is the type of list

26
00:01:09.004 --> 00:01:10.006
that was returned.

27
00:01:10.006 --> 00:01:13.006
And I will do that using a Java 11 feature

28
00:01:13.006 --> 00:01:17.003
of the var keyboard or the var keyboard, as they say.

29
00:01:17.003 --> 00:01:19.009
the var keyboard, which is this

30
00:01:19.009 --> 00:01:22.008
allows you to create a local variable

31
00:01:22.008 --> 00:01:25.006
without mentioning a data type to it.

32
00:01:25.006 --> 00:01:26.008
So I'll say var,

33
00:01:26.008 --> 00:01:29.006
and I'll give this variable a name, let's say list

34
00:01:29.006 --> 00:01:33.006
and then assign collections dot empty list to that variable.

35
00:01:33.006 --> 00:01:36.004
The moment I do this, you see that intelligent hint

36
00:01:36.004 --> 00:01:39.000
and tells me that this is a list of object.

37
00:01:39.000 --> 00:01:42.000
So now I know that this was list of object,

38
00:01:42.000 --> 00:01:45.000
but all this while the compiler knew about it.

39
00:01:45.000 --> 00:01:49.000
Now let's say I intended to return a list of strings

40
00:01:49.000 --> 00:01:51.000
out of this method invocation.

41
00:01:51.000 --> 00:01:54.004
In that case, I will have to explicitly place a pair

42
00:01:54.004 --> 00:01:56.008
of angle brackets like that

43
00:01:56.008 --> 00:01:59.001
in front of the name of the method

44
00:01:59.001 --> 00:02:03.004
and then put in the type that I wish to use, like that.

45
00:02:03.004 --> 00:02:06.008
The moment do that, the IDE is going to hint

46
00:02:06.008 --> 00:02:09.003
that this is a list of string.

47
00:02:09.003 --> 00:02:13.001
So this type that I mentioned in a pair of angle brackets

48
00:02:13.001 --> 00:02:15.000
just before the name of the method

49
00:02:15.000 --> 00:02:17.000
is called the type witness.

50
00:02:17.000 --> 00:02:18.008
Where you're telling the compiler

51
00:02:18.008 --> 00:02:21.005
about the type argument that you wish to use.

52
00:02:21.005 --> 00:02:24.001
Now, in most of the typical coding scenarios

53
00:02:24.001 --> 00:02:25.008
we do not need to do this.

54
00:02:25.008 --> 00:02:28.004
That is because the compiler is smart enough

55
00:02:28.004 --> 00:02:31.006
and infer these type arguments for us.

56
00:02:31.006 --> 00:02:35.009
And that is through a process called type inference.

57
00:02:35.009 --> 00:02:39.007
So type inference is the compiler's capability

58
00:02:39.007 --> 00:02:43.008
to look at your method definition, look at its invocation

59
00:02:43.008 --> 00:02:46.007
and in further type argue accordingly.

60
00:02:46.007 --> 00:02:49.008
The inference algorithm runs in such a manner

61
00:02:49.008 --> 00:02:52.003
that it always picks the most specific type

62
00:02:52.003 --> 00:02:55.007
that satisfies both the arguments that you pass

63
00:02:55.007 --> 00:02:58.005
and the written type where you collect the result.

64
00:02:58.005 --> 00:03:01.001
Let's understand this with another code example.

65
00:03:01.001 --> 00:03:03.006
We are going to come out of this main method

66
00:03:03.006 --> 00:03:05.007
and write a method here.

67
00:03:05.007 --> 00:03:08.009
Let's say, pick one, that's the name of the method.

68
00:03:08.009 --> 00:03:11.009
It'll take in two objects as parameters

69
00:03:11.009 --> 00:03:14.002
and return one of them at random.

70
00:03:14.002 --> 00:03:15.005
So let's go ahead and write that method.

71
00:03:15.005 --> 00:03:17.008
Public static.

72
00:03:17.008 --> 00:03:18.007
This is a generic method.

73
00:03:18.007 --> 00:03:23.001
So we'll declare the T, it returns a T as well.

74
00:03:23.001 --> 00:03:25.006
And let's call this pick one

75
00:03:25.006 --> 00:03:31.004
and the parameters will be T one and T two of the type T.

76
00:03:31.004 --> 00:03:32.008
We'll write a simple logic inside this.

77
00:03:32.008 --> 00:03:40.001
We'll say, if math dot random is greater than 0.5

78
00:03:40.001 --> 00:03:44.001
then we return T one,

79
00:03:44.001 --> 00:03:47.001
else we return T2.

80
00:03:47.001 --> 00:03:49.004
So the math taught random call that we did on line

81
00:03:49.004 --> 00:03:53.004
number 12 returns numbers between zero and one randomly.

82
00:03:53.004 --> 00:03:56.006
So 50% of the times this method will return T one

83
00:03:56.006 --> 00:03:59.007
the other 50% times it'll return T2.

84
00:03:59.007 --> 00:04:02.008
Now let's in this method, pick one from a main method.

85
00:04:02.008 --> 00:04:07.001
So let's go here on line number 10, I will put a comment

86
00:04:07.001 --> 00:04:13.009
saying this is type inference demo, and let's call pick one.

87
00:04:13.009 --> 00:04:16.006
Now I will pass in two arguments to this,

88
00:04:16.006 --> 00:04:19.000
one is the integer type,

89
00:04:19.000 --> 00:04:23.005
and the other let's say is of the double type, like that.

90
00:04:23.005 --> 00:04:29.004
And let's grab the result of this method in a number type.

91
00:04:29.004 --> 00:04:32.009
So now the inference algorithm will see your line number 11

92
00:04:32.009 --> 00:04:35.006
which is the invocation, looks at your definition

93
00:04:35.006 --> 00:04:37.001
which is line 14.

94
00:04:37.001 --> 00:04:42.000
And now it wants to decide, what should be in this T.

95
00:04:42.000 --> 00:04:43.004
And it has three choices.

96
00:04:43.004 --> 00:04:46.008
One is the number type that we see on the return value.

97
00:04:46.008 --> 00:04:50.006
The other is the in integer, which was one of the arguments.

98
00:04:50.006 --> 00:04:54.005
And the third one was a double, which is the other argument.

99
00:04:54.005 --> 00:04:57.005
And number is the one that will suit all three

100
00:04:57.005 --> 00:04:59.004
the return as well as the arguments.

101
00:04:59.004 --> 00:05:01.007
And that is why this code compiles well.

102
00:05:01.007 --> 00:05:05.003
However, let's say if you try to change this type

103
00:05:05.003 --> 00:05:10.007
to an integer value, like that, we get a compilation error.

104
00:05:10.007 --> 00:05:12.006
It says that required type is integer

105
00:05:12.006 --> 00:05:15.000
but you provided a number.

106
00:05:15.000 --> 00:05:16.008
So that is a problem here.

107
00:05:16.008 --> 00:05:19.002
It knows that this is an integer.

108
00:05:19.002 --> 00:05:22.005
This is well is an integer, but this is a double.

109
00:05:22.005 --> 00:05:24.009
And it cannot cost integer to double.

110
00:05:24.009 --> 00:05:28.003
So then, that operation becomes incompatible.

111
00:05:28.003 --> 00:05:30.001
And that is why it is insisting you

112
00:05:30.001 --> 00:05:32.003
to change this return type.

113
00:05:32.003 --> 00:05:36.002
So number is the one that will suit all three in this case.

114
00:05:36.002 --> 00:05:38.006
And that's why this works well.

115
00:05:38.006 --> 00:05:40.005
Let's take another example.

116
00:05:40.005 --> 00:05:44.001
Let's create a fruit object.

117
00:05:44.001 --> 00:05:45.000
And in order to do that

118
00:05:45.000 --> 00:05:47.004
I'll have to pass in those constructive arguments.

119
00:05:47.004 --> 00:05:48.006
So let's quickly do that.

120
00:05:48.006 --> 00:05:55.009
Mango, India, the color was yellow

121
00:05:55.009 --> 00:05:58.003
and 0.5 let's say is the weight.

122
00:05:58.003 --> 00:06:00.005
This is one object.

123
00:06:00.005 --> 00:06:07.006
And the other is an apple object that we create new apple.

124
00:06:07.006 --> 00:06:12.009
Let's give this a name, Royal Gala Brand Apple,

125
00:06:12.009 --> 00:06:16.008
the country, let's say Sweden,

126
00:06:16.008 --> 00:06:22.006
green apples and weight is 0.3.

127
00:06:22.006 --> 00:06:26.006
And now let's go ahead and call the pick one method.

128
00:06:26.006 --> 00:06:28.001
I'm just going to scroll down a little bit

129
00:06:28.001 --> 00:06:31.002
and then say pick one, we pass in fruit

130
00:06:31.002 --> 00:06:33.006
and we pass in apple.

131
00:06:33.006 --> 00:06:40.004
Let's also collect the result in a fruit variable,

132
00:06:40.004 --> 00:06:42.003
like that.

133
00:06:42.003 --> 00:06:44.005
And if you see this line works well.

134
00:06:44.005 --> 00:06:46.009
So the inference algorithm is again in action.

135
00:06:46.009 --> 00:06:48.002
It looks at line number 16

136
00:06:48.002 --> 00:06:51.000
and it looks at your definition on line number 19.

137
00:06:51.000 --> 00:06:52.009
And now it has two choices.

138
00:06:52.009 --> 00:06:57.001
Fruit was the return type, fruit was also the argument

139
00:06:57.001 --> 00:06:58.009
and apple was the other argument.

140
00:06:58.009 --> 00:07:00.004
So now we're just trying to decide,

141
00:07:00.004 --> 00:07:02.003
which is the most suitable.

142
00:07:02.003 --> 00:07:03.002
And it knows,

143
00:07:03.002 --> 00:07:05.009
that you can definitely cast an apple to a fruit.

144
00:07:05.009 --> 00:07:09.001
So fruit is now the most suitable that it finds

145
00:07:09.001 --> 00:07:11.008
among the arguments, as well as the return type.

146
00:07:11.008 --> 00:07:16.000
Let's say, if we change this to apple.

147
00:07:16.000 --> 00:07:17.009
We'll start getting a compilation problem.

148
00:07:17.009 --> 00:07:23.001
It says, "Required type is apple, but you provided fruit."

149
00:07:23.001 --> 00:07:25.008
So again, the inference is in action.

150
00:07:25.008 --> 00:07:29.002
It'll look at apple as a return type, fruit as one argument

151
00:07:29.002 --> 00:07:30.008
and apple is another argument.

152
00:07:30.008 --> 00:07:34.000
And now the problem here is that it knows,

153
00:07:34.000 --> 00:07:37.008
that it can cost an apple to fruit

154
00:07:37.008 --> 00:07:41.001
but it cannot cost this fruit down to apple.

155
00:07:41.001 --> 00:07:44.003
So that's why it is giving you that compilation problem

156
00:07:44.003 --> 00:07:46.009
and asks you to change that return type.

157
00:07:46.009 --> 00:07:49.008
So it is only going to work with fruit.

158
00:07:49.008 --> 00:07:53.000
Additionally, it'll also work with any type

159
00:07:53.000 --> 00:07:54.006
which is up the hierarchy of apple.

160
00:07:54.006 --> 00:08:00.002
So let's say if I take boxable, like that

161
00:08:00.002 --> 00:08:01.008
this will also work well

162
00:08:01.008 --> 00:08:05.003
because boxable now is the one that's most suitable

163
00:08:05.003 --> 00:08:09.001
for both the arguments, as well as the return type.

164
00:08:09.001 --> 00:08:12.005
So this is how that inference algorithm works.

165
00:08:12.005 --> 00:08:15.008
Let us also look at types of type inference.

166
00:08:15.008 --> 00:08:18.004
There are three ways in which type inference works.

167
00:08:18.004 --> 00:08:21.008
One is, with instantiation of generic types.

168
00:08:21.008 --> 00:08:25.000
And this is done using the diamond operator.

169
00:08:25.000 --> 00:08:27.001
Let's go back to the IDE.

170
00:08:27.001 --> 00:08:31.009
And in our test type inference class,

171
00:08:31.009 --> 00:08:33.006
let's go on the next line.

172
00:08:33.006 --> 00:08:35.001
I'll put a comment here saying,

173
00:08:35.001 --> 00:08:40.006
type inference with instantiation.

174
00:08:40.006 --> 00:08:43.000
And here I'll write a very simple piece of code.

175
00:08:43.000 --> 00:08:44.007
I'll create a box instance.

176
00:08:44.007 --> 00:08:48.000
So I'll say box of fruit,

177
00:08:48.000 --> 00:08:54.008
fruit box equal to new box of fruit again,

178
00:08:54.008 --> 00:08:56.004
and then the constructor call.

179
00:08:56.004 --> 00:08:59.005
Now the code on line number eight in is perfectly fine.

180
00:08:59.005 --> 00:09:01.009
We have a variable fruit box,

181
00:09:01.009 --> 00:09:04.002
which is of the type box of fruit

182
00:09:04.002 --> 00:09:07.009
and the type argument used there is the fruit type.

183
00:09:07.009 --> 00:09:09.001
Then on the right hand side

184
00:09:09.001 --> 00:09:11.003
when we instantiated the box class

185
00:09:11.003 --> 00:09:14.005
we passed the type argument fruit again.

186
00:09:14.005 --> 00:09:16.003
While this code will work fine

187
00:09:16.003 --> 00:09:19.009
we still want to eliminate that duplicate declaration.

188
00:09:19.009 --> 00:09:23.004
So we could just do a way with the type argument here

189
00:09:23.004 --> 00:09:27.001
and retain that pair of empty angle brackets.

190
00:09:27.001 --> 00:09:29.002
So this pair of angle brackets, which is empty there

191
00:09:29.002 --> 00:09:31.004
is the diamond operator.

192
00:09:31.004 --> 00:09:33.002
And because of the diamond operator

193
00:09:33.002 --> 00:09:36.005
the compiler is now going to run in inference like this.

194
00:09:36.005 --> 00:09:39.004
It will look at this variable fruit box.

195
00:09:39.004 --> 00:09:42.005
It knows that it is type of box of fruit.

196
00:09:42.005 --> 00:09:45.004
So now it knows that the type argument is fruit

197
00:09:45.004 --> 00:09:47.007
and then it enfers from this context

198
00:09:47.007 --> 00:09:50.002
that it is going to be the same type argument

199
00:09:50.002 --> 00:09:52.006
on the right hand side as well.

200
00:09:52.006 --> 00:09:54.003
This is how type inference works

201
00:09:54.003 --> 00:09:56.009
with instantiation of generic types.

202
00:09:56.009 --> 00:09:59.005
Note however, that you have to use

203
00:09:59.005 --> 00:10:01.007
the spare of empty angle brackets.

204
00:10:01.007 --> 00:10:03.002
If you do not do that,

205
00:10:03.002 --> 00:10:06.007
then you'll end up creating a raw box.

206
00:10:06.007 --> 00:10:08.005
We do not want to use raw types.

207
00:10:08.005 --> 00:10:09.009
So be careful about that.

208
00:10:09.009 --> 00:10:13.009
So I'll just go back and insert that diamond operator again.

209
00:10:13.009 --> 00:10:16.008
The next type is with method arguments.

210
00:10:16.008 --> 00:10:20.006
Which means the type inference is going to infer your types

211
00:10:20.006 --> 00:10:23.002
with the help of the method arguments that you pass

212
00:10:23.002 --> 00:10:25.002
when you invoke the method.

213
00:10:25.002 --> 00:10:27.001
So let's go back to the IDE.

214
00:10:27.001 --> 00:10:30.003
So let me open the box class.

215
00:10:30.003 --> 00:10:33.007
And in this class, we'll write a new method,

216
00:10:33.007 --> 00:10:35.005
which is called of.

217
00:10:35.005 --> 00:10:38.008
So we are trying who have this method

218
00:10:38.008 --> 00:10:42.004
return a box of something.

219
00:10:42.004 --> 00:10:44.007
So let's go ahead and write that method.

220
00:10:44.007 --> 00:10:53.003
Public static, define the bound T extends boxable

221
00:10:53.003 --> 00:10:56.005
let this method return a box of T

222
00:10:56.005 --> 00:10:59.005
and let's name this method of.

223
00:10:59.005 --> 00:11:03.008
And the parameter it'll take is of the type T.

224
00:11:03.008 --> 00:11:06.008
So what we'll do inside is, first create an instance

225
00:11:06.008 --> 00:11:08.005
of the box.

226
00:11:08.005 --> 00:11:12.004
Box of T equal to new box of T.

227
00:11:12.004 --> 00:11:15.004
That will be the diamond operator usage again,

228
00:11:15.004 --> 00:11:18.007
after that we invoke the add item method

229
00:11:18.007 --> 00:11:20.007
that we've already developed before,

230
00:11:20.007 --> 00:11:24.004
and passed that incoming argument T to it,

231
00:11:24.004 --> 00:11:26.000
and then return this box.

232
00:11:26.000 --> 00:11:27.005
That is all.

233
00:11:27.005 --> 00:11:29.001
A couple of things here,

234
00:11:29.001 --> 00:11:33.001
if you observe this method, that we wrote just now

235
00:11:33.001 --> 00:11:36.004
does not have any information whatsoever

236
00:11:36.004 --> 00:11:40.000
of what type of box it is supposed to return.

237
00:11:40.000 --> 00:11:41.004
We don't know as of now.

238
00:11:41.004 --> 00:11:44.000
Secondly, you may be wondering

239
00:11:44.000 --> 00:11:48.000
that we are already inside the general class box,

240
00:11:48.000 --> 00:11:51.006
then why do we need to define these bounds again?

241
00:11:51.006 --> 00:11:53.009
Well, this is a static method.

242
00:11:53.009 --> 00:11:54.009
For static methods,

243
00:11:54.009 --> 00:11:57.004
you always have to declare those bounds.

244
00:11:57.004 --> 00:12:01.006
Only instance methods become automatically generic

245
00:12:01.006 --> 00:12:03.006
for the generic class.

246
00:12:03.006 --> 00:12:05.009
All right, so now let's go back to the test class

247
00:12:05.009 --> 00:12:09.002
and we'll invoke this method.

248
00:12:09.002 --> 00:12:10.002
Let's put a comment.

249
00:12:10.002 --> 00:12:17.002
This is type inference with method arguments.

250
00:12:17.002 --> 00:12:22.007
And let's call that box, of method.

251
00:12:22.007 --> 00:12:25.004
And to this I'll pass the fruit object

252
00:12:25.004 --> 00:12:29.006
that I created on line number 13, like that.

253
00:12:29.006 --> 00:12:31.007
Now, when this invocation happened

254
00:12:31.007 --> 00:12:34.005
I really don't know what kind of a box was created.

255
00:12:34.005 --> 00:12:35.005
How do I check it?

256
00:12:35.005 --> 00:12:39.002
So we will use that var option again.

257
00:12:39.002 --> 00:12:44.007
And say var box and assign box of, to it.

258
00:12:44.007 --> 00:12:47.002
So now you see intelligent quickly hints me

259
00:12:47.002 --> 00:12:49.004
that it is a box of fruit.

260
00:12:49.004 --> 00:12:51.002
Now, why is it a box of fruit?

261
00:12:51.002 --> 00:12:54.009
That is because the method argument that we passed

262
00:12:54.009 --> 00:12:59.006
when we invoked the of method was the fruit object.

263
00:12:59.006 --> 00:13:04.001
So on the basis of this argument, the compiler inferred

264
00:13:04.001 --> 00:13:07.000
that the return type must be a box of fruit.

265
00:13:07.000 --> 00:13:08.008
We can do this one more time.

266
00:13:08.008 --> 00:13:13.005
Let's say var another box,

267
00:13:13.005 --> 00:13:16.005
and say, box dot of,

268
00:13:16.005 --> 00:13:19.009
and this time let's pass the apple object.

269
00:13:19.009 --> 00:13:22.002
And if you see, now intelligent tells me

270
00:13:22.002 --> 00:13:24.005
that it is a box of apple.

271
00:13:24.005 --> 00:13:28.009
So on the basis of the method argument that you pass

272
00:13:28.009 --> 00:13:33.004
to the of method, the compiler is going to infer

273
00:13:33.004 --> 00:13:35.006
what return type it'll have.

274
00:13:35.006 --> 00:13:39.007
So this is how type inference with method arguments works.

275
00:13:39.007 --> 00:13:41.002
Let's look at the last one,

276
00:13:41.002 --> 00:13:42.009
that is with target types.

277
00:13:42.009 --> 00:13:46.002
This means, that the compiler is going to infer the types

278
00:13:46.002 --> 00:13:49.002
based on the target that you're using

279
00:13:49.002 --> 00:13:53.001
in order to fetch the value of the method invocation.

280
00:13:53.001 --> 00:13:54.006
Let's see this with an example.

281
00:13:54.006 --> 00:13:56.004
Let's go back to the IDE.

282
00:13:56.004 --> 00:13:59.002
And for this let us create a new method

283
00:13:59.002 --> 00:14:02.004
in the boxUtils class.

284
00:14:02.004 --> 00:14:04.007
We are going to write a method in boxUtils class

285
00:14:04.007 --> 00:14:07.008
which is going to create an empty box for us.

286
00:14:07.008 --> 00:14:11.008
So let's go ahead and say public static, same thing.

287
00:14:11.008 --> 00:14:18.008
T extends boxable and let this return box of T.

288
00:14:18.008 --> 00:14:23.009
Let's call this method empty box.

289
00:14:23.009 --> 00:14:26.000
And we are going to do nothing special,

290
00:14:26.000 --> 00:14:28.009
just return a new box of T.

291
00:14:28.009 --> 00:14:31.003
That is all.

292
00:14:31.003 --> 00:14:34.002
Again, this method does not have any information

293
00:14:34.002 --> 00:14:37.007
of what type of empty box it is going to return.

294
00:14:37.007 --> 00:14:39.005
Now let's go ahead and test this out.

295
00:14:39.005 --> 00:14:42.008
Let's go to test type inference on the next line.

296
00:14:42.008 --> 00:14:44.000
First, I'll put a comment.

297
00:14:44.000 --> 00:14:50.002
This is type inference with target types.

298
00:14:50.002 --> 00:14:56.005
And now let's invoke the boxUtils dot empty box method.

299
00:14:56.005 --> 00:14:59.006
So again, when this invocation happens on line 25,

300
00:14:59.006 --> 00:15:03.009
I don't know what type of empty box it is.

301
00:15:03.009 --> 00:15:06.003
So let's go ahead and use the var option again

302
00:15:06.003 --> 00:15:07.008
in order to find out.

303
00:15:07.008 --> 00:15:13.002
Let's say, box equal to.

304
00:15:13.002 --> 00:15:14.004
It's a duplicate variable.

305
00:15:14.004 --> 00:15:18.006
Let's go ahead and say empty box.

306
00:15:18.006 --> 00:15:20.008
And if you see, intelligent gave me the hint

307
00:15:20.008 --> 00:15:23.002
that it is a box of boxable

308
00:15:23.002 --> 00:15:25.003
but then you see there is no argument

309
00:15:25.003 --> 00:15:28.005
and there was no return type that was captured correctly.

310
00:15:28.005 --> 00:15:31.006
So then how is this box of boxable?

311
00:15:31.006 --> 00:15:34.009
That is because if you go back to the empty box method again

312
00:15:34.009 --> 00:15:37.002
and you see the bounds defined here,

313
00:15:37.002 --> 00:15:40.000
they say T extends boxable.

314
00:15:40.000 --> 00:15:41.006
So that's how it picks up

315
00:15:41.006 --> 00:15:44.001
the boxable type to be the return type.

316
00:15:44.001 --> 00:15:46.003
And that's why you see box of boxable

317
00:15:46.003 --> 00:15:50.000
that was hinted by the intelligent IDE.

318
00:15:50.000 --> 00:15:52.001
Now we'll change this code to something like this.

319
00:15:52.001 --> 00:15:54.000
We eliminate the var option.

320
00:15:54.000 --> 00:16:01.006
And instead we'll say, box of fruit.

321
00:16:01.006 --> 00:16:03.001
Fruit box one.

322
00:16:03.001 --> 00:16:06.008
And now if you see the empty box invocation

323
00:16:06.008 --> 00:16:09.003
yielded me available fruit box one,

324
00:16:09.003 --> 00:16:11.005
which is of type box of fruit,

325
00:16:11.005 --> 00:16:14.001
and this code compiles perfectly well.

326
00:16:14.001 --> 00:16:18.007
So this means that this time the compiler inferred the type

327
00:16:18.007 --> 00:16:21.009
based on the target variable

328
00:16:21.009 --> 00:16:24.005
inside which you fetched the result

329
00:16:24.005 --> 00:16:26.008
of the method invocation.

330
00:16:26.008 --> 00:16:30.004
So this is type inference with the target types.

331
00:16:30.004 --> 00:16:31.009
Let's try one more time.

332
00:16:31.009 --> 00:16:35.003
Box of, let's say apple

333
00:16:35.003 --> 00:16:40.005
call this apple box and then say, boxUtils dot empty box.

334
00:16:40.005 --> 00:16:43.008
You see this code compiles perfectly well again

335
00:16:43.008 --> 00:16:46.006
and this time, the empty box that was returned

336
00:16:46.006 --> 00:16:49.006
out of that method invocation, was a box of apple.

337
00:16:49.006 --> 00:16:50.009
How?

338
00:16:50.009 --> 00:16:54.001
Because the target type was box of apple.

339
00:16:54.001 --> 00:16:57.003
So based on this target type, the compiler inferred

340
00:16:57.003 --> 00:17:01.002
that you are trying to return an empty box of apples.

341
00:17:01.002 --> 00:17:03.003
So this is how type inference works based

342
00:17:03.003 --> 00:17:05.000
on the target types.

