WEBVTT
1
00:00:00.005 --> 00:00:01.004
- [Instructor] In this module,

2
00:00:01.004 --> 00:00:04.002
we are going to build our own generic class.

3
00:00:04.002 --> 00:00:07.002
For this, let us understand the most common use case

4
00:00:07.002 --> 00:00:10.001
that is implemented with generic classes.

5
00:00:10.001 --> 00:00:11.008
Let's say you have a box.

6
00:00:11.008 --> 00:00:13.009
This box could contain anything.

7
00:00:13.009 --> 00:00:18.005
It could be a box of fruits or books or chocolates.

8
00:00:18.005 --> 00:00:20.005
Similarly, if you have a bottle,

9
00:00:20.005 --> 00:00:24.005
it could hold water, milk or juice.

10
00:00:24.005 --> 00:00:27.001
So let's say that you have to implement this scenario.

11
00:00:27.001 --> 00:00:29.004
You have an object that has to be passed

12
00:00:29.004 --> 00:00:30.008
throughout your application.

13
00:00:30.008 --> 00:00:32.009
Let's say, for example, the book object.

14
00:00:32.009 --> 00:00:37.003
And this object should be encapsulated within a container,

15
00:00:37.003 --> 00:00:39.000
for example, the box.

16
00:00:39.000 --> 00:00:40.007
Now, why do we need a container?

17
00:00:40.007 --> 00:00:44.001
That is because it'll help us do all the operations

18
00:00:44.001 --> 00:00:46.006
on the objects that it contains.

19
00:00:46.006 --> 00:00:47.009
So let's say the container

20
00:00:47.009 --> 00:00:50.000
should be able to store an object,

21
00:00:50.000 --> 00:00:53.000
retrieve an object and perform any other tasks

22
00:00:53.000 --> 00:00:54.008
that your application desires.

23
00:00:54.008 --> 00:00:57.003
Furthermore, there is another requirement.

24
00:00:57.003 --> 00:00:59.006
This container should have the capability

25
00:00:59.006 --> 00:01:03.002
of holding objects of multiple types.

26
00:01:03.002 --> 00:01:06.003
So at one point of time in your application,

27
00:01:06.003 --> 00:01:08.000
the box could contain books.

28
00:01:08.000 --> 00:01:10.001
And it could be a box of chocolates

29
00:01:10.001 --> 00:01:11.007
at another point in time.

30
00:01:11.007 --> 00:01:13.004
So how do we implement this?

31
00:01:13.004 --> 00:01:16.004
Well, we have the object type approach implementation

32
00:01:16.004 --> 00:01:18.000
that we have talked about before.

33
00:01:18.000 --> 00:01:20.008
You can design a container and write code

34
00:01:20.008 --> 00:01:24.004
such that your container deals with object types only.

35
00:01:24.004 --> 00:01:25.009
But then we know the limitations

36
00:01:25.009 --> 00:01:27.002
that come with this approach.

37
00:01:27.002 --> 00:01:28.008
We've discussed this before.

38
00:01:28.008 --> 00:01:31.000
First is, there is no type safety.

39
00:01:31.000 --> 00:01:35.003
You can end up adding any wrong thing into that box.

40
00:01:35.003 --> 00:01:38.002
Secondly, whenever you try to retrieve an object

41
00:01:38.002 --> 00:01:39.002
from that container,

42
00:01:39.002 --> 00:01:41.007
you will have to perform an explicit casting

43
00:01:41.007 --> 00:01:43.006
to process it further.

44
00:01:43.006 --> 00:01:46.000
And even if you do all of this right,

45
00:01:46.000 --> 00:01:48.003
we definitely know that there is a possibility

46
00:01:48.003 --> 00:01:51.004
that you can encounter problems at runtime.

47
00:01:51.004 --> 00:01:55.003
So this kind of use case is implemented with generics.

48
00:01:55.003 --> 00:01:59.002
So what we can do is, we write a class called box of T.

49
00:01:59.002 --> 00:02:01.008
We take T as the type parameter name.

50
00:02:01.008 --> 00:02:04.009
That is because T can refer to any type.

51
00:02:04.009 --> 00:02:07.009
This box class will have all the methods

52
00:02:07.009 --> 00:02:09.007
to operate on that T.

53
00:02:09.007 --> 00:02:11.001
For example, storing the object,

54
00:02:11.001 --> 00:02:12.008
retrieving the object, et cetera.

55
00:02:12.008 --> 00:02:15.005
When we invoke box of T,

56
00:02:15.005 --> 00:02:20.002
we can pass either fruit, or book, or chocolate

57
00:02:20.002 --> 00:02:23.003
as the type argument so that we can create

58
00:02:23.003 --> 00:02:26.004
different kinds of boxes in the application.

59
00:02:26.004 --> 00:02:28.006
So at one time it could be box of fruits,

60
00:02:28.006 --> 00:02:30.005
the other time box of books.

61
00:02:30.005 --> 00:02:34.002
Similarly, we can write a class bottle of T

62
00:02:34.002 --> 00:02:38.000
and water, milk and juice will become the type arguments

63
00:02:38.000 --> 00:02:41.001
when we invoke the generic class bottle.

64
00:02:41.001 --> 00:02:44.007
This slide shows you an overview of everything

65
00:02:44.007 --> 00:02:48.004
that we need to do in order to get this demo up and running.

66
00:02:48.004 --> 00:02:51.009
So the first thing we will do is write the class box of T.

67
00:02:51.009 --> 00:02:55.004
Remember this box will hold multiple items

68
00:02:55.004 --> 00:02:57.000
of a specific type.

69
00:02:57.000 --> 00:03:00.002
Next, we will write methods in this box class

70
00:03:00.002 --> 00:03:03.002
so we can have a method to add an item to the box.

71
00:03:03.002 --> 00:03:06.001
We can also have a method get latest item

72
00:03:06.001 --> 00:03:08.007
which fetches you the latest item from the box.

73
00:03:08.007 --> 00:03:11.003
And yet another method to get the count

74
00:03:11.003 --> 00:03:13.000
of items from the box.

75
00:03:13.000 --> 00:03:16.004
After this, we will write the types which will behave

76
00:03:16.004 --> 00:03:19.007
as type arguments to work box of T.

77
00:03:19.007 --> 00:03:23.008
So we'll write a class fruit and another class book.

78
00:03:23.008 --> 00:03:27.001
And these two classes will have all the desired properties

79
00:03:27.001 --> 00:03:28.009
and their respective methods.

80
00:03:28.009 --> 00:03:32.004
Once we understand the setup and we write the code for it,

81
00:03:32.004 --> 00:03:34.004
the next step will be to test it out.

82
00:03:34.004 --> 00:03:37.001
In order to test it, we will invoke box of T,

83
00:03:37.001 --> 00:03:39.007
and we'll create two kinds of boxes.

84
00:03:39.007 --> 00:03:42.002
Box of fruit, box of book.

85
00:03:42.002 --> 00:03:45.003
So fruit and book will become the type arguments

86
00:03:45.003 --> 00:03:48.000
for the invocation in our test class.

