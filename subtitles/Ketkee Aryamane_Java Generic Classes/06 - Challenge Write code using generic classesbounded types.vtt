WEBVTT
1
00:00:00.002 --> 00:00:06.009
(bright electronic music)

2
00:00:06.009 --> 00:00:08.002
- [Instructor] Now it is your turn

3
00:00:08.002 --> 00:00:09.008
to solve a programming challenge

4
00:00:09.008 --> 00:00:12.007
based on all we learned in the course so far.

5
00:00:12.007 --> 00:00:14.009
Here's how the problem statement reads.

6
00:00:14.009 --> 00:00:16.003
You need to write a class

7
00:00:16.003 --> 00:00:18.009
which performs numerical operations.

8
00:00:18.009 --> 00:00:20.005
The constraint on this class is

9
00:00:20.005 --> 00:00:24.007
that it should accept only Number and its subtype of values.

10
00:00:24.007 --> 00:00:26.007
Then you add a constructor to this class

11
00:00:26.007 --> 00:00:29.009
which accepts multiple values for your operands

12
00:00:29.009 --> 00:00:32.004
and initializes the corresponding instance variable

13
00:00:32.004 --> 00:00:33.007
in your class.

14
00:00:33.007 --> 00:00:35.008
After this, you need to add a method

15
00:00:35.008 --> 00:00:39.003
which will return you a sorted list of the numbers.

16
00:00:39.003 --> 00:00:41.002
Then add yet another method

17
00:00:41.002 --> 00:00:44.002
to calculate the maximum value among them.

18
00:00:44.002 --> 00:00:45.003
And to do the above,

19
00:00:45.003 --> 00:00:47.007
you could always use standard APIs in Java

20
00:00:47.007 --> 00:00:51.003
as far as possible to perform your mathematical operations.

21
00:00:51.003 --> 00:00:54.000
So there is no need to sit and write your own logic

22
00:00:54.000 --> 00:00:56.008
for either sorting or getting the maximum value

23
00:00:56.008 --> 00:00:58.002
among the numbers.

24
00:00:58.002 --> 00:00:59.007
Once your solution is ready,

25
00:00:59.007 --> 00:01:02.009
you can test it out using a list of Long values.

26
00:01:02.009 --> 00:01:05.009
A couple of hints, in case you want a harder challenge,

27
00:01:05.009 --> 00:01:07.004
you can skip ahead.

28
00:01:07.004 --> 00:01:09.007
You can use the Collections utility class

29
00:01:09.007 --> 00:01:13.003
to sort the numbers and get maximum value among the numbers.

30
00:01:13.003 --> 00:01:16.001
There are ready-made APIs available in this utility

31
00:01:16.001 --> 00:01:18.004
in order to do those functions for you.

32
00:01:18.004 --> 00:01:21.002
You will need to use both the Number class

33
00:01:21.002 --> 00:01:22.007
and the Comparable interface

34
00:01:22.007 --> 00:01:24.007
in your generic type parameter declaration

35
00:01:24.007 --> 00:01:26.008
that you do for your class.

36
00:01:26.008 --> 00:01:28.006
So pause the video now

37
00:01:28.006 --> 00:01:38.000
and go ahead and take the challenge.

