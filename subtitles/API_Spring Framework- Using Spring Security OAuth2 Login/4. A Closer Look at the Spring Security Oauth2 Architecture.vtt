WEBVTT
1
00:00:01.640 --> 00:00:06.240
Let's start with a quick high‑level architecture of Spring Security.

2
00:00:06.240 --> 00:00:09.040
When you add Spring Security to a web app,

3
00:00:09.040 --> 00:00:12.490
you're effectively adding a single filter,

4
00:00:12.490 --> 00:00:14.740
the delegating filter proxy.

5
00:00:14.740 --> 00:00:15.790
So basically,

6
00:00:15.790 --> 00:00:21.540
Spring Security is now vetting all requests before they hit any servlets.

7
00:00:21.540 --> 00:00:25.720
This filter then passes the request to a collection of

8
00:00:25.720 --> 00:00:28.030
filters known as filtered chains,

9
00:00:28.030 --> 00:00:32.310
each filter chain handling different request paths,

10
00:00:32.310 --> 00:00:38.930
/admin might go to the filter chain 1, and /product might go to filter chain 2,

11
00:00:38.930 --> 00:00:43.240
each filter chain specializing insecurity for that request.

12
00:00:43.240 --> 00:00:45.040
Now, let's see this in action.

13
00:00:45.040 --> 00:00:50.740
If we put a breakpoint in the FilterChainProxy and access the application,

14
00:00:50.740 --> 00:00:55.840
you can see that we have three filter chains configured via Spring Boot.

15
00:00:55.840 --> 00:01:01.860
The first two are for CSS and WebJars, and as you can see, they have no filters.

16
00:01:01.860 --> 00:01:03.750
This is because in our configuration,

17
00:01:03.750 --> 00:01:08.300
we configured Spring Security to ignore CSS and WebJar paths,

18
00:01:08.300 --> 00:01:11.050
hence why there are no filters in these chains,

19
00:01:11.050 --> 00:01:14.410
so requests to these endpoints will just go straight

20
00:01:14.410 --> 00:01:16.100
through without security checks.

21
00:01:16.100 --> 00:01:21.040
The reason for that is that by default, Spring Security simply blocks everything,

22
00:01:21.040 --> 00:01:27.740
but we also need CSS styling in our registration and login pages.

23
00:01:27.740 --> 00:01:31.220
The third filter is for all other requests.

24
00:01:31.220 --> 00:01:34.410
You can see, it has 14 security filters,

25
00:01:34.410 --> 00:01:40.030
each filter performing some sort of security task or checks like headers,

26
00:01:40.030 --> 00:01:43.950
cross‑site forgery request protection, authentication,

27
00:01:43.950 --> 00:01:47.440
authorization, session management, you name it.

28
00:01:47.440 --> 00:01:51.510
And this was all configured by the builder in the web security

29
00:01:51.510 --> 00:01:55.550
configuration adapter as we requested formLogin so Spring Security

30
00:01:55.550 --> 00:01:59.040
added the UsernameAndPasswordAuthenticationFilter.

31
00:01:59.040 --> 00:02:02.000
We added logout, hence the logout filter.

32
00:02:02.000 --> 00:02:03.670
And with oauth2login,

33
00:02:03.670 --> 00:02:07.720
Spring Security added the OAuth 2 authorization request redirect filter,

34
00:02:07.720 --> 00:02:10.650
and the oauth2Login authentication filter,

35
00:02:10.650 --> 00:02:11.840
and so forth.

36
00:02:11.840 --> 00:02:15.060
Every filter here has a builder method that you can manipulate,

37
00:02:15.060 --> 00:02:18.880
so you can clearly see here how configurable Spring Security is.

38
00:02:18.880 --> 00:02:21.570
If you recall back to the login HTML page,

39
00:02:21.570 --> 00:02:26.290
the Facebook link submitted a request to this URI,

40
00:02:26.290 --> 00:02:28.540
/oauth2/authorization.

41
00:02:28.540 --> 00:02:33.080
Let's open the OAuth2AuthorizationRequestRedirectFilter.

42
00:02:33.080 --> 00:02:36.710
And as you can see, that's the path this filter looks out for.

43
00:02:36.710 --> 00:02:40.990
And the final path variable tells this filter which provider the

44
00:02:40.990 --> 00:02:45.080
user wants to sign in with then redirects the user to the

45
00:02:45.080 --> 00:02:48.180
appropriate provider's authorization server,

46
00:02:48.180 --> 00:02:51.600
requesting that Crypto Portfolio would like access to

47
00:02:51.600 --> 00:02:54.040
this user's protected resources.

48
00:02:54.040 --> 00:02:56.280
Now, after the provider, so in this case,

49
00:02:56.280 --> 00:03:01.000
Facebook or Google, then authenticates the user and gets the user's consent,

50
00:03:01.000 --> 00:03:05.170
the provider will then return an authorization code via

51
00:03:05.170 --> 00:03:08.020
a redirect back to the application,

52
00:03:08.020 --> 00:03:12.080
which will get picked up by the OAuth2LoginAuthenticationFilter,

53
00:03:12.080 --> 00:03:15.370
which handles the exchange of this authorization

54
00:03:15.370 --> 00:03:19.040
code for the actual access token, again,

55
00:03:19.040 --> 00:03:20.750
all this is customizable.

56
00:03:20.750 --> 00:03:24.600
We can manipulate the redirection filter via the redirection endpoint,

57
00:03:24.600 --> 00:03:28.240
and we can even change the location of these paths.

58
00:03:28.240 --> 00:03:30.910
Now, if we look at the OAuth 2 login builder method,

59
00:03:30.910 --> 00:03:33.640
there are basically four key endpoints here,

60
00:03:33.640 --> 00:03:36.720
which represent the stages of the OAuth 2 flow.

61
00:03:36.720 --> 00:03:40.940
For the first one, the user selects Sign in with a provider.

62
00:03:40.940 --> 00:03:45.420
Now, that generates a request to the redirection endpoint,

63
00:03:45.420 --> 00:03:50.780
which redirects the user to the OAuth 2 provider's authorization server.

64
00:03:50.780 --> 00:03:55.370
Once the provider authenticates the user and get their consent,

65
00:03:55.370 --> 00:03:58.880
it redirects the user's browser back to the authorization

66
00:03:58.880 --> 00:04:02.180
endpoint and includes the authorization code.

67
00:04:02.180 --> 00:04:07.930
The authorization endpoint calls the token endpoint with the client ID,

68
00:04:07.930 --> 00:04:13.340
secret, and authorization code to exchange for the access token.

69
00:04:13.340 --> 00:04:14.810
With the access token,

70
00:04:14.810 --> 00:04:19.640
Spring can then call the /userinfo endpoint to get the user's data.

71
00:04:19.640 --> 00:04:23.140
So everything here is configurable, all the stages.

72
00:04:23.140 --> 00:04:25.140
And once our app starts up,

73
00:04:25.140 --> 00:04:28.390
Spring will read this builder and create and configure

74
00:04:28.390 --> 00:04:31.640
the appropriate filters and endpoints.

75
00:04:31.640 --> 00:04:34.030
Another component you might want to change is the

76
00:04:34.030 --> 00:04:37.370
clientRegistrationRepository as currently,

77
00:04:37.370 --> 00:04:41.140
client details are stored in our configuration file,

78
00:04:41.140 --> 00:04:43.720
but we might want to store them in a database,

79
00:04:43.720 --> 00:04:48.140
hence you can create your own repository implementation.

80
00:04:48.140 --> 00:04:50.990
Okay, that's enough theory for now, Wojciech.

81
00:04:50.990 --> 00:04:51.820
Next,

82
00:04:51.820 --> 00:05:00.000
Let's solve the problem of registering a new OAuth 2 user when they access the application for the first time.

