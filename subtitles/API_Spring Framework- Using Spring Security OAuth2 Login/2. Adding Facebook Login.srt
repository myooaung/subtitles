1
00:00:01,740 --> 00:00:07,240
Here, we have the beginnings of the Crypto Portfolio demo application.

2
00:00:07,240 --> 00:00:11,140
It's a simple Spring Boot MVC application,

3
00:00:11,140 --> 00:00:15,350
not unlike the ones you probably see in many starter tutorials.

4
00:00:15,350 --> 00:00:22,560
Currently, it has one controller and a simple Thymeleaf HTML page that prints,

5
00:00:22,560 --> 00:00:25,040
Welcome to your portfolio.

6
00:00:25,040 --> 00:00:30,360
One of the non‑functional security requirements for this application is

7
00:00:30,360 --> 00:00:34,670
that it must support social login with Facebook or Google.

8
00:00:34,670 --> 00:00:38,630
Now, generally, developers would leave this for a later date.

9
00:00:38,630 --> 00:00:41,580
But with Spring Security and Spring Boot,

10
00:00:41,580 --> 00:00:46,560
we can add Facebook and Google sign‑in right now with only a few

11
00:00:46,560 --> 00:00:49,750
simple steps by simply adding the OAuth2 client

12
00:00:49,750 --> 00:00:53,710
spring‑boot‑starter dependency and then in our application.yml

13
00:00:53,710 --> 00:00:56,720
file or your application.properties file,

14
00:00:56,720 --> 00:01:00,820
we add the oauth2.client.registration for Facebook,

15
00:01:00,820 --> 00:01:04,250
we add under oauth2, client, registration,

16
00:01:04,250 --> 00:01:09,740
facebook, providing the client ID and secret.

17
00:01:09,740 --> 00:01:14,140
The client ID and secret are like the credentials for your application.

18
00:01:14,140 --> 00:01:17,920
You get these when you first register your application with Facebook,

19
00:01:17,920 --> 00:01:20,230
so let's go through the steps of how you would do that.

20
00:01:20,230 --> 00:01:24,040
Now, if you navigate to the Facebook for Developers page,

21
00:01:24,040 --> 00:01:27,550
under My Apps, Build Collected Experiences,

22
00:01:27,550 --> 00:01:33,330
give the app a name, select Facebook Login, Web,

23
00:01:33,330 --> 00:01:38,540
okay, that's it, save these changes, and if we go back to our application,

24
00:01:38,540 --> 00:01:39,780
go to the Settings,

25
00:01:39,780 --> 00:01:42,660
and you can copy and paste the client ID and secret

26
00:01:42,660 --> 00:01:45,140
into the application.yml file.

27
00:01:45,140 --> 00:01:46,240
That's it.

28
00:01:46,240 --> 00:01:49,970
And because the application has the DevOps dependency,

29
00:01:49,970 --> 00:01:54,940
Spring Boot notices that we made a change and restarts the application for us.

30
00:01:54,940 --> 00:01:58,240
Now, we get prompted with Facebook credentials,

31
00:01:58,240 --> 00:02:01,140
and now you can continue developing your application.

32
00:02:01,140 --> 00:02:05,340
Of course, the security implementation is far from production ready,

33
00:02:05,340 --> 00:02:09,800
but neither is our web app and the application security can

34
00:02:09,800 --> 00:02:13,720
now evolve along with the application rather than a Russian

35
00:02:13,720 --> 00:02:15,550
hack job at a later date.

36
00:02:15,550 --> 00:02:18,840
Now, the Spring team have done a really good job here.

37
00:02:18,840 --> 00:02:22,540
If you're like me, however, you're probably scratching your head and wondering,

38
00:02:22,540 --> 00:02:24,340
how is all this working?

39
00:02:24,340 --> 00:02:28,220
How did Spring Security configure all this? OAuth2,

40
00:02:28,220 --> 00:02:40,000
is an authorization protocol, so how does it do authentication? Next, let's answer these questions by taking a closer look at OAuth2.

