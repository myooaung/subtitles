WEBVTT
1
00:00:01.740 --> 00:00:02.550
Previously,

2
00:00:02.550 --> 00:00:06.640
I mentioned that the auth in OAuth2 stands for

3
00:00:06.640 --> 00:00:09.690
authorization and not authentication,

4
00:00:09.690 --> 00:00:15.370
but user authentication seems to be one of OAuth2's most popular use cases.

5
00:00:15.370 --> 00:00:20.330
Now, to unpack this, let's take a look at OAuth2's intended use case.

6
00:00:20.330 --> 00:00:25.640
How can Victoria authorize Crypto Portfolio to access her Facebook

7
00:00:25.640 --> 00:00:30.120
personal data on her behalf such as her email,

8
00:00:30.120 --> 00:00:32.450
name, friends list,

9
00:00:32.450 --> 00:00:38.540
or post to her war without giving Crypto Portfolio her Facebook password?

10
00:00:38.540 --> 00:00:41.570
Now, to understand how OAuth2 achieves this,

11
00:00:41.570 --> 00:00:46.520
you need to first understand the actors and entities in OAuth2,

12
00:00:46.520 --> 00:00:50.100
so let's start with Victoria's personal data.

13
00:00:50.100 --> 00:00:52.880
This is known as the protected resource,

14
00:00:52.880 --> 00:00:56.940
which then makes Victoria the resource owner.

15
00:00:56.940 --> 00:01:00.730
The protected resource needs to be hosted and secured somewhere.

16
00:01:00.730 --> 00:01:03.870
That somewhere is known as the resource server.

17
00:01:03.870 --> 00:01:08.740
In our demo application, that's a service provided by Facebook.

18
00:01:08.740 --> 00:01:11.200
Now Crypto Portfolio is the client,

19
00:01:11.200 --> 00:01:14.740
which wants to access Victoria's protected resources.

20
00:01:14.740 --> 00:01:18.340
The resource server will only give access to Crypto

21
00:01:18.340 --> 00:01:22.440
Portfolio if it has a valid access token,

22
00:01:22.440 --> 00:01:27.740
which is issued by an authorization server; however,

23
00:01:27.740 --> 00:01:32.000
before the authorization server issues and access token,

24
00:01:32.000 --> 00:01:37.550
it first needs to authenticate both the client and the resource owner.

25
00:01:37.550 --> 00:01:41.540
Client can authenticate with its client ID and secret,

26
00:01:41.540 --> 00:01:45.500
and Victoria would simply log into her Facebook account,

27
00:01:45.500 --> 00:01:46.030
generally,

28
00:01:46.030 --> 00:01:49.190
using her username and password or any other

29
00:01:49.190 --> 00:01:52.540
authentication mechanisms supported by Facebook.

30
00:01:52.540 --> 00:01:56.340
Now, once the auth server confirms her identity,

31
00:01:56.340 --> 00:02:01.280
then it will ask her to consent if she actually authorizes Crypto

32
00:02:01.280 --> 00:02:05.740
Portfolio to access her personal data on her behalf,

33
00:02:05.740 --> 00:02:10.240
only then it will issue an access token to the client,

34
00:02:10.240 --> 00:02:14.760
which can then present that token to the resource server to

35
00:02:14.760 --> 00:02:17.740
get access to the protected resources.

36
00:02:17.740 --> 00:02:18.520
Now,

37
00:02:18.520 --> 00:02:22.620
the rules of how these actors interact between each other to

38
00:02:22.620 --> 00:02:26.290
achieve this is known as a flow in OAuth,

39
00:02:26.290 --> 00:02:32.800
and the most common flow is the Authorization Code Grant; however,

40
00:02:32.800 --> 00:02:35.340
in regards to authentication,

41
00:02:35.340 --> 00:02:39.610
the spec only states that the auth server needs to authenticate

42
00:02:39.610 --> 00:02:43.420
the resource owner before getting her consent,

43
00:02:43.420 --> 00:02:47.540
and also, the client using the client ID and secret,

44
00:02:47.540 --> 00:02:51.840
but nothing about client authenticating the user.

45
00:02:51.840 --> 00:02:52.800
Generally, though,

46
00:02:52.800 --> 00:02:57.830
the user would first register and authenticate with the client, in this case,

47
00:02:57.830 --> 00:02:59.920
the Crypto Portfolio application,

48
00:02:59.920 --> 00:03:03.240
and only then it might be prompted to share her

49
00:03:03.240 --> 00:03:06.140
Facebook data with the application.

50
00:03:06.140 --> 00:03:08.590
Now, some developers then realized, hey,

51
00:03:08.590 --> 00:03:12.100
since Facebook turns a valid Auth token,

52
00:03:12.100 --> 00:03:16.340
then Victoria must be who she claims to be as Facebook's auth

53
00:03:16.340 --> 00:03:20.910
server is required to authenticate her, hence we can assume that it's her,

54
00:03:20.910 --> 00:03:24.900
and we can skip authenticating her ourselves and just

55
00:03:24.900 --> 00:03:27.170
simply outsource that to Facebook.

56
00:03:27.170 --> 00:03:27.910
Great!

57
00:03:27.910 --> 00:03:32.140
However, the access token is a Bearer token,

58
00:03:32.140 --> 00:03:37.710
meaning anyone in possession of it can access Victoria's data on her behalf.

59
00:03:37.710 --> 00:03:41.210
Tokens are also electronic and can be easily copied

60
00:03:41.210 --> 00:03:43.540
and shared with other services,

61
00:03:43.540 --> 00:03:47.830
so there's no guarantee that the bearer of the token is actually Victoria.

62
00:03:47.830 --> 00:03:52.520
Another site Victoria might use could also be a client of Facebook's.

63
00:03:52.520 --> 00:03:56.690
Now if that application also convinces Victoria to share her Facebook

64
00:03:56.690 --> 00:04:00.600
data and ends up with a valid Facebook access token,

65
00:04:00.600 --> 00:04:05.440
then it could present that to Crypto Portfolio and impersonate Victoria,

66
00:04:05.440 --> 00:04:07.490
gaining access to her portfolio,

67
00:04:07.490 --> 00:04:11.970
hence most providers build functionality on top of OAuth2

68
00:04:11.970 --> 00:04:15.990
to provide sign‑in functionality for their clients to

69
00:04:15.990 --> 00:04:18.910
address such cases and issues,

70
00:04:18.910 --> 00:04:25.240
hence OAuth2 login is generally an in‑house extension of the OAuth2 spec.

71
00:04:25.240 --> 00:04:26.700
Now, behind the scenes,

72
00:04:26.700 --> 00:04:31.540
Spring Security is hiding a lot of this complexity for us; however,

73
00:04:31.540 --> 00:04:35.400
it's still important to understand how the Authorization Code Grant flow

74
00:04:35.400 --> 00:04:40.150
works as it will make your life so much easier when you need to make

75
00:04:40.150 --> 00:04:50.000
adjustments or debug any issues, and the best way to understand this flow is to see it in action. So let's do that, next.

