WEBVTT
1
00:00:01.840 --> 00:00:05.160
Let's fast forward the development of our demo application.

2
00:00:05.160 --> 00:00:05.770
There,

3
00:00:05.770 --> 00:00:09.960
we now have the Crypto Portfolio application secured with

4
00:00:09.960 --> 00:00:13.140
traditional username and password login.

5
00:00:13.140 --> 00:00:17.340
Users can register and then log in with their credentials.

6
00:00:17.340 --> 00:00:19.410
Now, you can check out my course,

7
00:00:19.410 --> 00:00:22.610
Spring Framework: Securing Against Common threats,

8
00:00:22.610 --> 00:00:26.540
if you're interested in how this demo application was created.

9
00:00:26.540 --> 00:00:30.840
Now, let's start by adding Facebook and Google social login,

10
00:00:30.840 --> 00:00:33.880
which will give the user the option of either filling in the

11
00:00:33.880 --> 00:00:38.560
registration form or clicking one button and signing in

12
00:00:38.560 --> 00:00:42.240
automatically with their Facebook or Google accounts.

13
00:00:42.240 --> 00:00:43.950
Now, just like in the previous module,

14
00:00:43.950 --> 00:00:50.180
we add the spring‑boot‑starter‑oauth2‑client‑dependency and the Google

15
00:00:50.180 --> 00:00:54.260
and Facebook client IDs to our application.yml file.

16
00:00:54.260 --> 00:00:54.540
Now,

17
00:00:54.540 --> 00:00:59.420
this will trigger Spring Boot's OAuth2 client configuration into action as

18
00:00:59.420 --> 00:01:03.210
these classes will now be in the class path; however,

19
00:01:03.210 --> 00:01:07.070
because this app already has its own implementation of

20
00:01:07.070 --> 00:01:09.550
the WebSecurityConfigurationAdapter,

21
00:01:09.550 --> 00:01:13.740
Spring Boot will back off and not initialize its default.

22
00:01:13.740 --> 00:01:14.260
Now,

23
00:01:14.260 --> 00:01:19.240
the WebSecurityConfigurationAdapter uses the adapter design pattern

24
00:01:19.240 --> 00:01:23.290
to basically allow you to adjust the default security implementation

25
00:01:23.290 --> 00:01:25.690
to your unique security requirements.

26
00:01:25.690 --> 00:01:31.340
By simply creating a class that extends the WebSecurityConfigurationAdapter,

27
00:01:31.340 --> 00:01:34.760
you will have access to a number of builder objects,

28
00:01:34.760 --> 00:01:38.780
which are exposed via a number of configuration methods.

29
00:01:38.780 --> 00:01:43.230
You can override these methods in your implementation to get access to

30
00:01:43.230 --> 00:01:47.340
the builder objects and effectively customize them.

31
00:01:47.340 --> 00:01:52.740
Then when Spring Boot starts up, it will build the security accordingly.

32
00:01:52.740 --> 00:01:56.340
A key one is the HttpSecurityBuilder,

33
00:01:56.340 --> 00:02:00.930
which is responsible for configuring security for HTTP requests,

34
00:02:00.930 --> 00:02:02.720
as the name suggests.

35
00:02:02.720 --> 00:02:05.740
So in the current implementation,

36
00:02:05.740 --> 00:02:11.150
for all HTTP requests to /login or /register will be

37
00:02:11.150 --> 00:02:13.160
allowed without authentication,

38
00:02:13.160 --> 00:02:17.020
which kind of makes sense as you first need to have access to the

39
00:02:17.020 --> 00:02:21.440
registration and login page before you can get authenticated.

40
00:02:21.440 --> 00:02:27.740
For all other requests, the user must be authenticated via formLogin.

41
00:02:27.740 --> 00:02:33.740
Here is the path to our custom loginPage to present to an unauthenticated user.

42
00:02:33.740 --> 00:02:36.940
We also want the user to be able to log out.

43
00:02:36.940 --> 00:02:38.580
Now, to add OAuth,

44
00:02:38.580 --> 00:02:43.760
we add the provider's registration details for Facebook and Google in

45
00:02:43.760 --> 00:02:47.840
our application.yml file with the client ID in secret.

46
00:02:47.840 --> 00:02:50.680
Using the HttpSecurity builder object,

47
00:02:50.680 --> 00:02:54.240
we instruct Spring that we want OAuth to log in.

48
00:02:54.240 --> 00:02:56.140
Nice and easy.

49
00:02:56.140 --> 00:03:00.350
If we restart our application and access the page,

50
00:03:00.350 --> 00:03:03.840
we get the bland social login link again.

51
00:03:03.840 --> 00:03:08.990
We, however, want both the option of social login and form login,

52
00:03:08.990 --> 00:03:13.140
so the previous login view was to /login,

53
00:03:13.140 --> 00:03:18.300
hence, in the security config on our OAuth2 login builder,

54
00:03:18.300 --> 00:03:22.310
you can see there are a lot of methods to customize things.

55
00:03:22.310 --> 00:03:27.240
Let's start with the loginPage and set that to /login.

56
00:03:27.240 --> 00:03:31.940
Now, this will map the login to the Thymeleaf HTML page.

57
00:03:31.940 --> 00:03:34.820
And here, we just need to add two links,

58
00:03:34.820 --> 00:03:37.850
which I have used Bootstrap to make them look like buttons.

59
00:03:37.850 --> 00:03:44.740
The link will be to /oauth2/authorize/google and the same for Facebook,

60
00:03:44.740 --> 00:03:47.740
and this will initiate the appropriate OAuth 2 Code

61
00:03:47.740 --> 00:03:50.570
Grant flow to authenticate this user.

62
00:03:50.570 --> 00:03:51.700
That's it.

63
00:03:51.700 --> 00:03:56.740
If we refresh the app, the user can now even register and log in,

64
00:03:56.740 --> 00:03:59.730
or they could sign in with one click of a button using

65
00:03:59.730 --> 00:04:02.040
their Google or Facebook accounts.

66
00:04:02.040 --> 00:04:03.690
If you've already signed in,

67
00:04:03.690 --> 00:04:05.840
you probably might not see the login page because you

68
00:04:05.840 --> 00:04:07.420
have an active session with Google.

69
00:04:07.420 --> 00:04:09.650
Now, if we go through the consent process,

70
00:04:09.650 --> 00:04:12.240
eventually, we get an application error.

71
00:04:12.240 --> 00:04:12.620
Now,

72
00:04:12.620 --> 00:04:16.020
that's because our OAuth 2 application currently just doesn't know

73
00:04:16.020 --> 00:04:18.900
how to deal with OAuth 2 users as currently,

74
00:04:18.900 --> 00:04:23.260
when the user registers with the site using the traditional registration pages,

75
00:04:23.260 --> 00:04:26.210
a portfolio is created for them in the database,

76
00:04:26.210 --> 00:04:31.540
so we need to include some sort of auto‑registration logic for users that are

77
00:04:31.540 --> 00:04:39.000
accessing our application for the first time using OAuth 2. So next, let's look at how we can do that.

