1
00:00:01,740 --> 00:00:02,170
Hi.

2
00:00:02,170 --> 00:00:05,900
It's Wojciech Lesniak, and welcome to my course,

3
00:00:05,900 --> 00:00:11,140
Spring Framework: Using Spring Security OAuth2 Login.

4
00:00:11,140 --> 00:00:14,440
During this course, when I refer to OAuth,

5
00:00:14,440 --> 00:00:20,670
I actually mean OAuth2 and not the first version of OAuth as the first

6
00:00:20,670 --> 00:00:25,540
version is no longer relevant and is not widely used.

7
00:00:25,540 --> 00:00:32,530
OAuth2 is an open standard used to allow entities like users to grant limited

8
00:00:32,530 --> 00:00:37,340
access to their resources without sharing their credentials.

9
00:00:37,340 --> 00:00:40,040
Now, let's unpack this.

10
00:00:40,040 --> 00:00:42,350
Traditionally, as developers,

11
00:00:42,350 --> 00:00:45,450
securing an application meant the application

12
00:00:45,450 --> 00:00:47,780
prompting the user for their credentials,

13
00:00:47,780 --> 00:00:50,440
like their username and password.

14
00:00:50,440 --> 00:00:51,450
This, however,

15
00:00:51,450 --> 00:00:57,360
no longer scales well. Just think of it from a user's perspective.

16
00:00:57,360 --> 00:01:01,780
Let's introduce Victoria here. Now, she would need to maintain

17
00:01:01,780 --> 00:01:07,490
separate credentials for each application she uses, at her work, in

18
00:01:07,490 --> 00:01:09,790
her personal life, like social media,

19
00:01:09,790 --> 00:01:16,340
etc., and best practices state that she should not reuse the same credentials.

20
00:01:16,340 --> 00:01:20,140
But the more credentials that a user has to maintain,

21
00:01:20,140 --> 00:01:24,240
the greater the probability that she will reuse the same ones.

22
00:01:24,240 --> 00:01:25,840
Now we've all done that.

23
00:01:25,840 --> 00:01:30,880
Now from a systems perspective, there's greater chances of failed login attempts,

24
00:01:30,880 --> 00:01:35,540
password resets, and, hence, more support overhead,

25
00:01:35,540 --> 00:01:40,530
not to mention her credentials and personal data being maintained in multiple

26
00:01:40,530 --> 00:01:45,260
places, providing a larger attack surface for a hacker and making them as

27
00:01:45,260 --> 00:01:51,150
secure as the weakest link. Now, OAuth can provide single sign‑in where

28
00:01:51,150 --> 00:01:54,430
Victoria can authenticate with an identity provider,

29
00:01:54,430 --> 00:01:59,120
which is known as an authorization in OAuth, and then be granted

30
00:01:59,120 --> 00:02:04,310
access to all the applications she's authorized for. Same deal for the

31
00:02:04,310 --> 00:02:06,940
Google apps she uses in her personal life.

32
00:02:06,940 --> 00:02:09,990
Once authenticated with Google's authentication server,

33
00:02:09,990 --> 00:02:14,700
she has access to all the Google apps like Gmail, Docs, etc.,

34
00:02:14,700 --> 00:02:20,340
without having to maintain separate credentials for each application.

35
00:02:20,340 --> 00:02:20,580
Now,

36
00:02:20,580 --> 00:02:25,880
let's say Victoria also wants to access our demo application, CryptoPortfolio,

37
00:02:25,880 --> 00:02:28,140
which will allow her to maintain the positions and the

38
00:02:28,140 --> 00:02:30,870
value of her cryptocurrency holdings.

39
00:02:30,870 --> 00:02:35,180
Now she could register and sign in with the application; however,

40
00:02:35,180 --> 00:02:38,260
Victoria is not too keen on adding another set of

41
00:02:38,260 --> 00:02:40,440
credentials she has to maintain.

42
00:02:40,440 --> 00:02:41,120
Hence,

43
00:02:41,120 --> 00:02:45,510
we could also offer her social login where she could be signed

44
00:02:45,510 --> 00:02:50,350
into Google or Facebook and get access to her portfolio without

45
00:02:50,350 --> 00:02:56,340
CryptoPortfolio having to handle, store, and maintain her data and credentials.

46
00:02:56,340 --> 00:02:59,540
That way, if CryptoPortfolio gets hacked,

47
00:02:59,540 --> 00:03:04,340
her data and credentials won't be on a list sold on the dark web.

48
00:03:04,340 --> 00:03:10,160
Additionally, the crypto app might want to access her data in Google or Facebook,

49
00:03:10,160 --> 00:03:15,530
such as her mailing list from her Gmail account so that it could email

50
00:03:15,530 --> 00:03:19,600
her friends and invite them to join the application, or to get the

51
00:03:19,600 --> 00:03:24,450
registration data, the application needs to automatically register her

52
00:03:24,450 --> 00:03:28,000
without prompting her with an annoying registration form. Now in the

53
00:03:28,000 --> 00:03:30,250
past, to achieve something similar,

54
00:03:30,250 --> 00:03:35,120
apps would ask the user to provide their email provider credentials and

55
00:03:35,120 --> 00:03:39,040
would then sign in on their behalf to retrieve the list.

56
00:03:39,040 --> 00:03:41,540
Now this is a bad idea.

57
00:03:41,540 --> 00:03:42,700
Firstly,

58
00:03:42,700 --> 00:03:47,590
authentication now more and more is no longer just the username and password.

59
00:03:47,590 --> 00:03:51,640
It's now at least also two‑factor authentication.

60
00:03:51,640 --> 00:03:57,440
It also exposes the user's Facebook credentials to another application,

61
00:03:57,440 --> 00:03:58,260
which,

62
00:03:58,260 --> 00:04:03,740
if it needs to store them, at best that application could encrypt the password,

63
00:04:03,740 --> 00:04:06,050
which is against best practices,

64
00:04:06,050 --> 00:04:10,150
which requires the password to be stored as a hash. And this results in

65
00:04:10,150 --> 00:04:13,940
more places the hacker can steal Victoria's credentials,

66
00:04:13,940 --> 00:04:17,140
and it also broke the principle of least privilege.

67
00:04:17,140 --> 00:04:20,840
CryptoPortfolio should only have access to the resources that

68
00:04:20,840 --> 00:04:23,760
are necessary for its legitimate purpose.

69
00:04:23,760 --> 00:04:26,920
Having access to the user's credentials will allow the

70
00:04:26,920 --> 00:04:30,240
application to do anything on the user's account.

71
00:04:30,240 --> 00:04:34,750
Now, fortunately, OAuth also provides a solution to this challenge,

72
00:04:34,750 --> 00:04:38,080
and it allows you to place a bounded context around your

73
00:04:38,080 --> 00:04:42,540
authentication authorization code credentials user data,

74
00:04:42,540 --> 00:04:45,740
which will be isolated from the application code.

75
00:04:45,740 --> 00:04:50,160
This is more secure as developers will release more changes

76
00:04:50,160 --> 00:04:52,910
and features to an application's code,

77
00:04:52,910 --> 00:04:58,330
then security changes; hence, any injection vulnerabilities introduced to the

78
00:04:58,330 --> 00:05:02,940
application would not expose sensitive user credential data.

79
00:05:02,940 --> 00:05:03,360
And also,

80
00:05:03,360 --> 00:05:06,040
if you want to change the authentication strategy, like

81
00:05:06,040 --> 00:05:11,540
adding two‑factor authentication, then you only have to do it in one place.

82
00:05:11,540 --> 00:05:12,390
Next,

83
00:05:12,390 --> 00:05:22,000
let's look at why you would want to use Spring Security to add OAuth to your application and how OAuth is supported within the framework.

