WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.725
Hello everyone, Welcome back.

00:00:01.725 --> 00:00:03.750
So we just created a service implementation.

00:00:03.750 --> 00:00:04.940
So whenever we enter a new method,

00:00:04.940 --> 00:00:06.210
we can create a method inside

00:00:06.210 --> 00:00:09.690
our service implementation and we can use it in our endpoint.

00:00:09.690 --> 00:00:14.339
So in the end point we just have the method structure,

00:00:14.339 --> 00:00:15.990
our skeleton, so that

00:00:15.990 --> 00:00:19.574
detail implementation will provide insight to the employee service implementation.

00:00:19.574 --> 00:00:20.850
You can do it here itself,

00:00:20.850 --> 00:00:22.890
but the code doesn't look that good.

00:00:22.890 --> 00:00:24.990
So that is why we have a service implementation class.

00:00:24.990 --> 00:00:29.760
And one more thing, we just make sure we just made employee service I MPLS, Ottaway red.

00:00:29.760 --> 00:00:32.400
So which means they embrace risk must be a component.

00:00:32.400 --> 00:00:34.335
But we do not use any component here.

00:00:34.335 --> 00:00:35.760
So you have to use

00:00:35.760 --> 00:00:38.990
the competent in your audience when you're trying to start the application,

00:00:38.990 --> 00:00:41.900
it will throw a run time exception.

00:00:41.900 --> 00:00:44.465
The bill will not get saxes, it will get failure.

00:00:44.465 --> 00:00:49.265
So now we have everything in place at the hardcore logic has been removed.

00:00:49.265 --> 00:00:52.925
Now we have the modified D input and output response.

00:00:52.925 --> 00:00:55.970
All we need to do, just start the obligation and go

00:00:55.970 --> 00:01:00.005
and check it out how our application is books.

00:01:00.005 --> 00:01:07.025
So strands application might take you a few minutes or few seconds to get it done.

00:01:07.025 --> 00:01:10.430
So let's open the console here so we can track

00:01:10.430 --> 00:01:14.420
or this happening in the middle behind a screen.

00:01:14.420 --> 00:01:17.400
So just restart.

00:01:19.650 --> 00:01:25.480
Okay. So the dam could show you the tankers that are shot on the port number 8 gerade.

00:01:25.480 --> 00:01:27.010
So that which means the server is up and running.

00:01:27.010 --> 00:01:31.645
So we can go back to a browser and we can check the same service.

00:01:31.645 --> 00:01:34.630
Okay, so I need to refresh one more time.

00:01:34.630 --> 00:01:36.280
Okay, so we've got the visuality,

00:01:36.280 --> 00:01:38.080
the next thing which we needed a dished out.

00:01:38.080 --> 00:01:39.880
And here we get all employee,

00:01:39.880 --> 00:01:41.200
get employee and remember blah.

00:01:41.200 --> 00:01:42.970
You might see I have only one method,

00:01:42.970 --> 00:01:44.920
but why I had three different methods here,

00:01:44.920 --> 00:01:47.140
because these methods are referred from

00:01:47.140 --> 00:01:50.440
the xs d and we made some changes and they exist in that is a reason

00:01:50.440 --> 00:01:52.930
we have three methods here because we return something

00:01:52.930 --> 00:01:55.840
like a get all employees and remove an employee,

00:01:55.840 --> 00:01:57.280
but we have only implementation,

00:01:57.280 --> 00:01:58.570
forget to employee alone.

00:01:58.570 --> 00:02:00.880
So for now, let's try and get employee.

00:02:00.880 --> 00:02:02.290
And now let's go back to

00:02:02.290 --> 00:02:08.200
the our data and see what are the data's available offline repository.

00:02:08.200 --> 00:02:11.230
So we have 12345 different employees, right?

00:02:11.230 --> 00:02:14.935
So I'm going to pick the employee ID 1, 2, 3.

00:02:14.935 --> 00:02:17.575
So let's go back and hear what I'm gonna do.

00:02:17.575 --> 00:02:19.120
I'm gonna provide so 1,

00:02:19.120 --> 00:02:20.950
2, 3 as an input.

00:02:20.950 --> 00:02:22.690
When we ran before,

00:02:22.690 --> 00:02:23.935
it's a hardcore logic.

00:02:23.935 --> 00:02:25.930
Whatever they've employed you are going to pass,

00:02:25.930 --> 00:02:27.310
you will get the same output.

00:02:27.310 --> 00:02:31.480
But now we have the proper data in place,

00:02:31.480 --> 00:02:33.295
which means the real data.

00:02:33.295 --> 00:02:34.945
So let's click Go.

00:02:34.945 --> 00:02:37.510
See now we've got the employee.

00:02:37.510 --> 00:02:39.220
Okay, maybe we can try it one more time.

00:02:39.220 --> 00:02:42.295
So we have multiple employees, right?

00:02:42.295 --> 00:02:45.600
So let's write its tried to pick one to seven.

00:02:45.600 --> 00:02:50.420
So I'm going to try one to seven.

00:02:50.420 --> 00:02:52.550
Then click. Go.

00:02:52.550 --> 00:02:54.710
See we've got the updated information the first time and

00:02:54.710 --> 00:02:57.080
I'm trying I'm getting the employee ID 1, 2, 3,

00:02:57.080 --> 00:03:00.230
and now I'm getting them different employee needed because based on the input,

00:03:00.230 --> 00:03:04.340
I have to finish the proper employee, right?

00:03:04.340 --> 00:03:08.300
So now everything in place in our coding perspective.

00:03:08.300 --> 00:03:14.105
So we have the endpoint configuration for retrieve a single employee.

00:03:14.105 --> 00:03:15.380
The next thing, what do we need to do?

00:03:15.380 --> 00:03:19.940
We have to write the similar method to process get all the employees.

00:03:19.940 --> 00:03:23.585
And we have one more method to delete an employee.

00:03:23.585 --> 00:03:26.400
So let's do that in the next video.
