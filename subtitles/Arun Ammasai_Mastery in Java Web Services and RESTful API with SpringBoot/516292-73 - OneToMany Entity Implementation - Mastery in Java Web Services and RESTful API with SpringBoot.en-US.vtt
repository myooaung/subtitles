WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.025
Hello everyone, Welcome back.

00:00:02.025 --> 00:00:08.280
So we tried storing the information using the entity manager.

00:00:08.280 --> 00:00:11.190
At the same time we tried it the JPA repository as well.

00:00:11.190 --> 00:00:12.690
So in the last example,

00:00:12.690 --> 00:00:15.150
we stored the information using JPA repository and

00:00:15.150 --> 00:00:17.550
we retrieve the information using the JPA repository as well.

00:00:17.550 --> 00:00:21.735
We don't have to write any methods because since we are extending

00:00:21.735 --> 00:00:24.390
the JPA repository or limit as are already

00:00:24.390 --> 00:00:28.425
available and those mental internally communicates to the entity manager.

00:00:28.425 --> 00:00:32.040
And another thing so far we have just tried at the simple individually,

00:00:32.040 --> 00:00:33.240
it's only one table.

00:00:33.240 --> 00:00:34.770
Think about the scenario.

00:00:34.770 --> 00:00:39.745
What happens if my class I'm in my table has a, another table.

00:00:39.745 --> 00:00:42.845
Internal communication, which means for NAT,

00:00:42.845 --> 00:00:44.495
I'm in a foreign key, primary key.

00:00:44.495 --> 00:00:47.195
So in those kind of center is how we can pull the information

00:00:47.195 --> 00:00:50.330
based on the ID from your parent table to child table.

00:00:50.330 --> 00:00:52.280
Okay, so in our scenario,

00:00:52.280 --> 00:00:53.990
let's say we have a student, right?

00:00:53.990 --> 00:00:56.240
Student might have a liability card rate.

00:00:56.240 --> 00:01:01.070
So in that case, they might get multiple books from the library.

00:01:01.070 --> 00:01:05.645
So what we can do, we can create a one more attribute here,

00:01:05.645 --> 00:01:08.165
which will store all the books.

00:01:08.165 --> 00:01:11.660
Okay, so what I'm gonna do is I'm going to create a list year.

00:01:11.660 --> 00:01:16.235
So that list, and it's going to hold the book information.

00:01:16.235 --> 00:01:18.875
So we don't have the book entity so far.

00:01:18.875 --> 00:01:20.570
They will create an awhile.

00:01:20.570 --> 00:01:22.160
So all books.

00:01:22.160 --> 00:01:24.020
So all books means that works,

00:01:24.020 --> 00:01:27.290
which is the C would ASA,

00:01:27.290 --> 00:01:29.390
this particular student read.

00:01:29.390 --> 00:01:34.265
So first thing, let's create the book entity and input.

00:01:34.265 --> 00:01:37.860
Sorry, it's not importing. We're going to create a new class.

00:01:38.950 --> 00:01:42.330
Oh my god, I'm doing it again.

00:01:43.360 --> 00:01:46.880
Choose Create class book.

00:01:46.880 --> 00:01:50.615
Okay, let's, I'm gonna create inside the model itself.

00:01:50.615 --> 00:01:53.330
So let's create book entity here.

00:01:53.330 --> 00:01:55.115
Okay, so the first thing, what do we need?

00:01:55.115 --> 00:01:56.840
It is going to be a table, right?

00:01:56.840 --> 00:01:59.345
So first thing we need to provide as an entity,

00:01:59.345 --> 00:02:01.805
that is the first thing which will look the next thing.

00:02:01.805 --> 00:02:04.385
So this book also has a,

00:02:04.385 --> 00:02:08.480
must have some primary key, which is the ID.

00:02:08.480 --> 00:02:12.560
So what I'm gonna do is I'm going to use the annotation ID here.

00:02:12.560 --> 00:02:20.960
And then we need to use the generated value, generated value.

00:02:20.960 --> 00:02:23.060
And then I'm going to create a value.

00:02:23.060 --> 00:02:27.440
We're able private, long ID,

00:02:27.440 --> 00:02:29.210
and this is my primary key.

00:02:29.210 --> 00:02:31.850
And then I'm going to create a one more field here.

00:02:31.850 --> 00:02:37.710
Private String, book name.

00:02:38.410 --> 00:02:42.120
Let's create getters and setters.

00:02:43.420 --> 00:02:46.875
So create centigrade isn't that for all of them.

00:02:46.875 --> 00:02:50.740
And we need to have a constructor, since it is a GPA.

00:02:50.740 --> 00:02:57.865
We need to have the default constructor as well as the parameterized constructor as well.

00:02:57.865 --> 00:02:59.935
So let's create a constructor.

00:02:59.935 --> 00:03:03.700
This one is going to be like none.

00:03:03.700 --> 00:03:06.115
Okay, So default constructor,

00:03:06.115 --> 00:03:10.795
but the student must have multiple.

00:03:10.795 --> 00:03:14.365
Books, are maybe single or multiple.

00:03:14.365 --> 00:03:16.780
So it always comes with a list of books,

00:03:16.780 --> 00:03:18.805
even although if it is a single book.

00:03:18.805 --> 00:03:20.590
And first thing what we need to do,

00:03:20.590 --> 00:03:23.215
so it has a linkage with the book.

00:03:23.215 --> 00:03:24.625
So what I'm gonna do,

00:03:24.625 --> 00:03:27.460
I'm gonna create a student here.

00:03:27.460 --> 00:03:31.340
So private. And it automatically creates a connection between

00:03:31.340 --> 00:03:35.465
the student Andy, book table, right?

00:03:35.465 --> 00:03:42.380
So student, and let's go back to our student.

00:03:42.380 --> 00:03:46.220
So one particular steward and may have multiple books,

00:03:46.220 --> 00:03:50.464
which means it's a one to many relationship.

00:03:50.464 --> 00:03:52.820
So what I'm gonna do, so I'm going to annotate with

00:03:52.820 --> 00:04:01.505
the one-to-many and 12 mini and the field is mapped by student.

00:04:01.505 --> 00:04:03.335
So you might think what is a student?

00:04:03.335 --> 00:04:05.180
So if you go to book dot Java,

00:04:05.180 --> 00:04:07.310
you have defined as a student here.

00:04:07.310 --> 00:04:10.955
So this is a name which we are referring in the student.

00:04:10.955 --> 00:04:12.680
So the next thing what we need to do,

00:04:12.680 --> 00:04:15.725
we have to create the head doesn't set us aswell.

00:04:15.725 --> 00:04:18.155
So let's create the getters and setters as well.

00:04:18.155 --> 00:04:25.040
And that's then let's move on to the book dot Java.

00:04:25.040 --> 00:04:27.950
So here, so a student,

00:04:27.950 --> 00:04:30.545
how one-to-many, which means student,

00:04:30.545 --> 00:04:32.375
I'm in book two, student.

00:04:32.375 --> 00:04:37.459
Many-to-one. Correct. Multiple books belongs to a single student.

00:04:37.459 --> 00:04:43.265
So here I'm going on a date with D and many to one.

00:04:43.265 --> 00:04:46.190
And we need to provide the phage type password.

00:04:46.190 --> 00:04:56.690
Fish type, fetch type dot lazy.

00:04:56.850 --> 00:05:00.430
So what do you mean by a phage type dot lazy?

00:05:00.430 --> 00:05:04.210
Which means if somebody's trying to get students,

00:05:04.210 --> 00:05:07.120
then only this particular piece of code will work.

00:05:07.120 --> 00:05:10.360
So what happened when you're trying to do the good students here?

00:05:10.360 --> 00:05:12.865
So when you're normally executing a student,

00:05:12.865 --> 00:05:14.575
you will not get the all books.

00:05:14.575 --> 00:05:18.400
The moment you are trying to do get all books meant that this getMethod then

00:05:18.400 --> 00:05:22.569
only this will create a linkage to the table and fish the information.

00:05:22.569 --> 00:05:24.880
So let's go Bhutto, let's go back to Book dot

00:05:24.880 --> 00:05:27.400
Java and let's verify everything is correct.

00:05:27.400 --> 00:05:29.605
Okay, we need to create the getters and setters, right?

00:05:29.605 --> 00:05:31.845
And let's create two N.

00:05:31.845 --> 00:05:33.035
Sorry.

00:05:33.035 --> 00:05:40.010
So Control N and we'll create getters and setters as full for the student. Just good.

00:05:40.010 --> 00:05:43.370
And then, so when you are sending the response back,

00:05:43.370 --> 00:05:48.770
do we need to put in all of them for a student because it has a many to one, right?

00:05:48.770 --> 00:05:51.275
So we're gonna send only one output.

00:05:51.275 --> 00:05:56.045
So for now, I'm going to use a JSON ignore here.

00:05:56.045 --> 00:06:01.640
Okay, so now we have a student and the mapping is correct and book also looks fine.

00:06:01.640 --> 00:06:06.815
So all we need to do is just start the application and go and check the database.

00:06:06.815 --> 00:06:09.000
Let's start the application.

00:06:16.330 --> 00:06:19.370
Applications getting started.

00:06:19.370 --> 00:06:23.480
Okay, so, okay, so our obligations getting started up.

00:06:23.480 --> 00:06:25.220
So all we need to do, Let's go back to

00:06:25.220 --> 00:06:28.115
our browser and check the hashtag until it's working.

00:06:28.115 --> 00:06:30.330
Let's read it again.

00:06:30.460 --> 00:06:32.570
So the moment it starts,

00:06:32.570 --> 00:06:36.545
the application's automatically creates all the tables, right?

00:06:36.545 --> 00:06:41.510
It's connected. And see we have a book which contains no information in it.

00:06:41.510 --> 00:06:44.480
And also we have the student

00:06:44.480 --> 00:06:49.190
and 200 also don't have any entries for now what I'm gonna do,

00:06:49.190 --> 00:06:51.140
I'm gonna create some hardcore entry assignment.

00:06:51.140 --> 00:06:54.635
I'm going to insert some data here just for testing purpose.

00:06:54.635 --> 00:07:00.020
So I'm going to copy this and let's go back to here and to be.

00:07:00.020 --> 00:07:05.285
Okay, so now we have records inserted in our table, right?

00:07:05.285 --> 00:07:08.300
So let's click Student and run it one more time.

00:07:08.300 --> 00:07:10.430
Now we've got the records.

00:07:10.430 --> 00:07:12.140
Now let's go back to our ID.

00:07:12.140 --> 00:07:13.940
We'll write another method to fetch

00:07:13.940 --> 00:07:19.700
the not the student information for fetching the student information, it's pretty easy.

00:07:19.700 --> 00:07:23.855
We're going to write some mother do based on the student ID,

00:07:23.855 --> 00:07:25.850
will fetch all the books.

00:07:25.850 --> 00:07:28.895
Okay, so let's query the book as well here.

00:07:28.895 --> 00:07:31.160
So to see how many data set available.

00:07:31.160 --> 00:07:34.955
So the Sauron DID 2 contains two books.

00:07:34.955 --> 00:07:36.485
So whenever you're trying with the two,

00:07:36.485 --> 00:07:38.165
we will get two results, right?

00:07:38.165 --> 00:07:43.040
Let's go back and implement a new method in our student controller.

00:07:43.040 --> 00:07:44.090
Let's write a mother anyway,

00:07:44.090 --> 00:07:45.140
it's going to be good motto, right?

00:07:45.140 --> 00:07:48.425
So I'm going to create ESA, get mapping method.

00:07:48.425 --> 00:07:54.170
And it is going to be get all books or get books by ID, right?

00:07:54.170 --> 00:07:57.845
So get books by ID.

00:07:57.845 --> 00:07:59.660
And we have to pass the input, right?

00:07:59.660 --> 00:08:04.295
So I'm going to pass the ID as our input, and then public.

00:08:04.295 --> 00:08:07.730
And it's going to return a list of, list of books.

00:08:07.730 --> 00:08:09.425
That's what we are looking for, right?

00:08:09.425 --> 00:08:13.250
So list of book.

00:08:13.250 --> 00:08:15.155
Okay, So the matter is,

00:08:15.155 --> 00:08:18.020
get all books, get good books by Adi,

00:08:18.020 --> 00:08:21.485
get books by ID,

00:08:21.485 --> 00:08:23.720
and then it's created.

00:08:23.720 --> 00:08:28.670
Okay, the next thing we need to receive the input right to using path variable,

00:08:28.670 --> 00:08:30.455
because I'm sending the input Monday.

00:08:30.455 --> 00:08:33.890
But so long ID.

00:08:33.890 --> 00:08:38.269
Okay, the first thing we need to retrieve the student.

00:08:38.269 --> 00:08:40.070
So the moment you retrieve the student,

00:08:40.070 --> 00:08:43.910
you automatically get the all books from inside the students.

00:08:43.910 --> 00:08:45.935
So what I'm gonna do, I'm gonna do,

00:08:45.935 --> 00:08:48.560
we're gonna use this student repository.

00:08:48.560 --> 00:08:54.440
So repo dot find by ID and we're going to provide the ID.

00:08:54.440 --> 00:09:01.715
So which will return a list of students, okay?

00:09:01.715 --> 00:09:04.835
Children AS student by the way, right?

00:09:04.835 --> 00:09:09.410
So find by ID or we can use get barrier as well.

00:09:09.410 --> 00:09:13.050
Get BID which will run a simple shouldn't.

00:09:15.850 --> 00:09:19.175
Okay, so now we have a student that wanted the next thing.

00:09:19.175 --> 00:09:20.885
So the moment you have the students,

00:09:20.885 --> 00:09:23.210
we should be able to get the students from the amine,

00:09:23.210 --> 00:09:24.590
get the books from the students.

00:09:24.590 --> 00:09:34.130
So I'm gonna have to done by id dot, get all books.

00:09:34.130 --> 00:09:38.270
So we have the method and we have the students at the moment.

00:09:38.270 --> 00:09:40.490
Do you have the students? So you should be able to pull all the information

00:09:40.490 --> 00:09:43.085
because they are internally mapped, right?

00:09:43.085 --> 00:09:45.200
Let's save it and refresh your application one more time.

00:09:45.200 --> 00:09:48.800
And let's go back to the postman and ran our application is copy

00:09:48.800 --> 00:09:53.105
this cell replication starter.

00:09:53.105 --> 00:09:57.455
Let's go back to the console and refresh it one more time.

00:09:57.455 --> 00:10:03.110
Because we have to insert the data again because we just started our sorrow rate.

00:10:03.110 --> 00:10:04.565
So whenever you start the server,

00:10:04.565 --> 00:10:08.090
it automatically did all of the information which is existing.

00:10:08.090 --> 00:10:11.585
Ok. So now we have tilted everything.

00:10:11.585 --> 00:10:13.415
If you want to go back and check.

00:10:13.415 --> 00:10:14.600
Yes, we do have.

00:10:14.600 --> 00:10:17.480
So all we need to do is just pass one input and get

00:10:17.480 --> 00:10:20.930
all the books information for a particular student.

00:10:20.930 --> 00:10:26.100
Let's go back to Postman here.

00:10:26.830 --> 00:10:30.545
Okay, So let's kinda create a new request here.

00:10:30.545 --> 00:10:39.920
And http, localhost 800, 80 and greater.

00:10:39.920 --> 00:10:42.275
So good books by ID, right?

00:10:42.275 --> 00:10:45.800
So the idea that you're gonna tries to get book ID slash.

00:10:45.800 --> 00:10:51.905
The idea I'm going to try is to see they go to all the information.

00:10:51.905 --> 00:10:55.625
So what happen if you try one?

00:10:55.625 --> 00:10:59.630
You will not get any input because only the student ID

00:10:59.630 --> 00:11:03.410
two contains multiple books associated to eat.

00:11:03.410 --> 00:11:04.595
Right?

00:11:04.595 --> 00:11:11.300
So I think now you should be able to easily write a method to fetch all the books, right?

00:11:11.300 --> 00:11:13.985
That is pretty easy, right? Let's do that as well.

00:11:13.985 --> 00:11:18.845
I'm going to copy this entire thing, copy paste it,

00:11:18.845 --> 00:11:24.425
and get all books.

00:11:24.425 --> 00:11:30.935
And, and we don't need to pass any inputs, right?

00:11:30.935 --> 00:11:35.945
Because we're gonna get all the information audience not specific to any ID.

00:11:35.945 --> 00:11:37.730
Any ID, first of all.

00:11:37.730 --> 00:11:42.620
So it's going to be a list of students in here.

00:11:42.620 --> 00:11:45.990
What I'm gonna do, let's remove this, sorry.

00:11:46.920 --> 00:11:53.845
And we have the repo dot.

00:11:53.845 --> 00:11:57.355
Find all, so which will give all the list of students.

00:11:57.355 --> 00:11:58.810
Let's restart unknown Madame,

00:11:58.810 --> 00:12:02.560
and we'll try and postmen replication started anyway,

00:12:02.560 --> 00:12:07.375
I just store created all the details again in our database.

00:12:07.375 --> 00:12:14.080
So now let's go back to our postman and let's create ridiculous.

00:12:14.080 --> 00:12:16.000
It looks like I did.

00:12:16.000 --> 00:12:20.050
Okay. So ADB it all books.

00:12:20.050 --> 00:12:22.570
And now I'm going to pass only that guitar books.

00:12:22.570 --> 00:12:24.130
It's a directory, right?

00:12:24.130 --> 00:12:27.775
So I get all books. Let's click sent.

00:12:27.775 --> 00:12:31.945
See, now we've got all of them, right?

00:12:31.945 --> 00:12:34.645
So ID1 and the relevant information.

00:12:34.645 --> 00:12:39.130
And Id1, which is our own,

00:12:39.130 --> 00:12:40.900
he doesn't have any books in it.

00:12:40.900 --> 00:12:42.805
And id2, which is a Nancy,

00:12:42.805 --> 00:12:48.985
contains two different books on it because she got two inputs from the data.

00:12:48.985 --> 00:12:52.240
So we are able to pull all the books.

00:12:52.240 --> 00:12:53.470
Information is not the books.

00:12:53.470 --> 00:12:56.140
I think I just made it a name

00:12:56.140 --> 00:12:59.140
change because we are trying to pull all this door and it's right.

00:12:59.140 --> 00:13:02.710
So I could have kept as I get all students, but anyway, it's fine.

00:13:02.710 --> 00:13:04.780
So what do the one thing which is missing here.

00:13:04.780 --> 00:13:09.760
So what you can do is you can use the same controller and you're

00:13:09.760 --> 00:13:15.110
gonna create a new method where it will store the user,

00:13:15.110 --> 00:13:17.720
I mean, the employee or a student or whatever.

00:13:17.720 --> 00:13:20.030
So based on what example you are trying,

00:13:20.030 --> 00:13:21.440
if you're trying to insert an employee,

00:13:21.440 --> 00:13:23.210
you can create an employee at INSEAD,

00:13:23.210 --> 00:13:25.100
make sure you have another child table.

00:13:25.100 --> 00:13:26.900
So what you can do while you're inserting,

00:13:26.900 --> 00:13:29.600
you are inserting the parent table information at the same time.

00:13:29.600 --> 00:13:33.950
You're inserting the child level or while inserting get the parent information

00:13:33.950 --> 00:13:38.765
and then add the child table information and then perceive the data.

00:13:38.765 --> 00:13:41.360
Just write as an example or maybe a homo,

00:13:41.360 --> 00:13:43.130
it'll be helped you to understand that.

00:13:43.130 --> 00:13:47.010
So in the next video, we're going to work with a real database.
