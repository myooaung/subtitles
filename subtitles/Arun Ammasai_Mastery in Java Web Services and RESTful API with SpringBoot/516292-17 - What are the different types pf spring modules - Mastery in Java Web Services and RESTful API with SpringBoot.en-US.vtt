WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.275
Hello everyone.

00:00:01.275 --> 00:00:02.160
Welcome back.

00:00:02.160 --> 00:00:06.075
So let's talk about what are the modules available in spring.

00:00:06.075 --> 00:00:09.390
So let's go to the browser and as you open a tab here,

00:00:09.390 --> 00:00:12.060
so these are the modules and what is a model in

00:00:12.060 --> 00:00:14.760
the first place in Spring framework contains lot

00:00:14.760 --> 00:00:20.145
of futures and we are grouping each and every individual features into some container.

00:00:20.145 --> 00:00:25.710
For example, the web content has containing web technologies and data layer which

00:00:25.710 --> 00:00:28.260
contains see the database activity or how to retrieve

00:00:28.260 --> 00:00:31.585
the data and how to handling them or a mapping.

00:00:31.585 --> 00:00:36.260
Similar way, you can just have a look at this particular piece of a framework.

00:00:36.260 --> 00:00:37.490
Yeah, I'm in the diagram here.

00:00:37.490 --> 00:00:41.555
Everything grouped into has separate color.

00:00:41.555 --> 00:00:45.140
So each and every one of them on a different modules.

00:00:45.140 --> 00:00:48.800
So if you take a look at these particular core container, so far,

00:00:48.800 --> 00:00:53.270
whatever we try it, that is the core container because we did talked about the beans.

00:00:53.270 --> 00:00:56.180
And when it talked about that context and we did talk,

00:00:56.180 --> 00:00:57.395
don't know how to use the,

00:00:57.395 --> 00:00:59.450
the core functionalities that components,

00:00:59.450 --> 00:01:02.975
the auto or all of them are available in the code container.

00:01:02.975 --> 00:01:05.720
So we are using Spring starter project, right?

00:01:05.720 --> 00:01:07.985
So we're not using any web component I actually,

00:01:07.985 --> 00:01:11.030
so all of them are come center core container.

00:01:11.030 --> 00:01:14.750
Okay, so in case you're writing an application and you want to

00:01:14.750 --> 00:01:18.440
have some JUnit test cases needs to be written for that.

00:01:18.440 --> 00:01:19.865
So you don't have to read.

00:01:19.865 --> 00:01:22.775
You don't have to write any specific logic for that.

00:01:22.775 --> 00:01:26.510
All you need to do is all the supports available in the Spring framework

00:01:26.510 --> 00:01:31.790
itself because it has an amazing compatibility with the JUnit test cases.

00:01:31.790 --> 00:01:35.645
So that is where this particular piece comes into place, that distinct part.

00:01:35.645 --> 00:01:37.970
And then let's talk about these one,

00:01:37.970 --> 00:01:39.889
data access and the integration.

00:01:39.889 --> 00:01:42.260
So data access means how we can access

00:01:42.260 --> 00:01:45.860
the data from the database and how we can fetch the information.

00:01:45.860 --> 00:01:47.720
Now we can communicate to the database.

00:01:47.720 --> 00:01:49.985
So basically this is the data layer.

00:01:49.985 --> 00:01:54.170
In the data layer, not only retrieving the information from the database,

00:01:54.170 --> 00:01:57.965
are retrieving information from some location or some blaze.

00:01:57.965 --> 00:01:59.600
We'll talk about the integration itself.

00:01:59.600 --> 00:02:01.715
So what is in derivations?

00:02:01.715 --> 00:02:05.660
If spring, which when you're using this spring,

00:02:05.660 --> 00:02:08.000
you can integrate multiple frameworks into it,

00:02:08.000 --> 00:02:09.170
for example, or MSN.

00:02:09.170 --> 00:02:14.705
Different framework is an object relational mapping like hibernate.

00:02:14.705 --> 00:02:21.170
So the Hibernate is also a kind of kind of database activity.

00:02:21.170 --> 00:02:26.395
So you are, you can access the database using the object model that is very,

00:02:26.395 --> 00:02:28.640
that is called object relational mapping.

00:02:28.640 --> 00:02:32.690
And JDBC is a traditional database,

00:02:32.690 --> 00:02:34.910
so you don't have to write any boilerplate code.

00:02:34.910 --> 00:02:36.050
Everything will be handy.

00:02:36.050 --> 00:02:41.690
All you need to do is just pass the DB information's not other stuffs.

00:02:41.690 --> 00:02:44.840
And or an envoy XOM and we have a j EMS,

00:02:44.840 --> 00:02:46.685
which means the messaging queue,

00:02:46.685 --> 00:02:48.770
Java messaging service where you can post

00:02:48.770 --> 00:02:52.010
your questions some queue and process it in the later.

00:02:52.010 --> 00:02:53.510
And another important thing,

00:02:53.510 --> 00:02:56.015
what is a transaction in the first place?

00:02:56.015 --> 00:02:57.785
You are creating a session.

00:02:57.785 --> 00:03:02.165
For example, you are logged in and you're trying to add a customer in your database.

00:03:02.165 --> 00:03:04.205
So there are multiple steps into it.

00:03:04.205 --> 00:03:07.370
Step one, fetching the information from the user or

00:03:07.370 --> 00:03:11.225
feeding their information from the user.

00:03:11.225 --> 00:03:13.370
And once user a fade the information,

00:03:13.370 --> 00:03:17.870
you reduce inflammation and you're going to stored in the table.

00:03:17.870 --> 00:03:20.375
So first step, getting the inputs.

00:03:20.375 --> 00:03:25.145
Second tip, establishing connection to the database and third step,

00:03:25.145 --> 00:03:29.269
which will actually store the data in your tables.

00:03:29.269 --> 00:03:32.885
So when the steps to happening, you will try,

00:03:32.885 --> 00:03:36.500
your session might be expired are some internet kinda duty lost,

00:03:36.500 --> 00:03:38.030
so everything gone, lost.

00:03:38.030 --> 00:03:40.040
So in that particular situation, what will happen?

00:03:40.040 --> 00:03:41.360
Do I need to store the data?

00:03:41.360 --> 00:03:46.040
Are do I need to read through the entire session or I can cancel the entire transaction.

00:03:46.040 --> 00:03:47.570
So you are doing instead, for example,

00:03:47.570 --> 00:03:50.645
your ring insert update and delete, right?

00:03:50.645 --> 00:03:53.059
So insert update is completed successfully,

00:03:53.059 --> 00:03:57.725
but the moment it is moved onto some Delete, we got some issue.

00:03:57.725 --> 00:03:58.715
So what will happen?

00:03:58.715 --> 00:04:01.130
So how are we going to make the dish and do I need

00:04:01.130 --> 00:04:03.560
to revert back the insert and the update?

00:04:03.560 --> 00:04:06.125
Or I can keep the insert and update and

00:04:06.125 --> 00:04:12.710
the delete part so that particular dish and we can make using the transactions.

00:04:12.710 --> 00:04:15.815
And when it comes to the next lady, it's a bilayer.

00:04:15.815 --> 00:04:20.750
So web container can call this the content of each on a separate card or group.

00:04:20.750 --> 00:04:23.060
So the web group content,

00:04:23.060 --> 00:04:28.550
mostly the BC technologies like web components.

00:04:28.550 --> 00:04:29.630
So let's fold it.

00:04:29.630 --> 00:04:32.615
How to start a web application? What is a servlet?

00:04:32.615 --> 00:04:35.225
And how does our dispatcher is working so

00:04:35.225 --> 00:04:37.595
to creators are less displeasure, what do you need to do?

00:04:37.595 --> 00:04:39.995
How it is going to handle the request and response,

00:04:39.995 --> 00:04:41.435
so everything will be handled.

00:04:41.435 --> 00:04:45.470
And there are other monitoring and security implementation you

00:04:45.470 --> 00:04:49.895
can do using the Aspect Oriented Programming and instrumentation.

00:04:49.895 --> 00:04:52.295
So these are our uni,

00:04:52.295 --> 00:04:55.025
you must have some idea of what are all these things.

00:04:55.025 --> 00:04:59.165
So these are all the modules which is available in D, a spring.

00:04:59.165 --> 00:05:01.880
Then next video we'll talk about what are the different kinds of

00:05:01.880 --> 00:05:05.120
projects we can make use of it with the help of us, Rain.

00:05:05.120 --> 00:05:07.410
Let's start over in the next video.
