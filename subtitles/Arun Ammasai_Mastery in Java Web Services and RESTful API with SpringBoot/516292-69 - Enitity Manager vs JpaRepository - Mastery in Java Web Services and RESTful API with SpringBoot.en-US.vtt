WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.010
Hello everyone, Welcome back.

00:00:02.010 --> 00:00:04.800
So let's start implementing our database functionality.

00:00:04.800 --> 00:00:06.750
But before we need to know something,

00:00:06.750 --> 00:00:13.125
there are two ways we can use to communicate to the database.

00:00:13.125 --> 00:00:14.850
I mean, to perform the operation.

00:00:14.850 --> 00:00:22.580
The first one is entity manager indeterminate is the one responsible of storing the data,

00:00:22.580 --> 00:00:25.324
persisting, updating and all the information.

00:00:25.324 --> 00:00:30.470
And the second one is JPA repository.

00:00:30.470 --> 00:00:32.720
Okay, in the first way,

00:00:32.720 --> 00:00:39.035
we have to manually set up the entity manager.

00:00:39.035 --> 00:00:43.580
In second scenario, JPA repository internally communicates to

00:00:43.580 --> 00:00:52.760
the communicates to the entity manager.

00:00:52.760 --> 00:00:55.070
So all you need to do is just implement

00:00:55.070 --> 00:00:59.315
the JPA repository and provid what is the entity you are trying to perform?

00:00:59.315 --> 00:01:01.370
So we have all the handyman, that's inset,

00:01:01.370 --> 00:01:03.875
JPA repository but entity manager, everything.

00:01:03.875 --> 00:01:06.260
We have to do it for inserting the data,

00:01:06.260 --> 00:01:09.095
updating the datas are selecting some query.

00:01:09.095 --> 00:01:11.930
We have to use the entity Mandela Mandela.

00:01:11.930 --> 00:01:15.005
But even if you're using JPA repository also, we're going to use it,

00:01:15.005 --> 00:01:18.495
but it automatically internally use the entity manager.

00:01:18.495 --> 00:01:20.885
We don't have to explicitly specify the entity manager.

00:01:20.885 --> 00:01:22.715
So far now what we're gonna do,

00:01:22.715 --> 00:01:28.115
we're gonna create a simple controller to create a new student, right?

00:01:28.115 --> 00:01:31.340
So let's create a new class.

00:01:31.340 --> 00:01:35.270
Maybe first let's create a new package and it's going to call them as the controller.

00:01:35.270 --> 00:01:36.740
And the controller package.

00:01:36.740 --> 00:01:39.330
We're going to create a new class,

00:01:39.970 --> 00:01:43.650
so called as a student controller.

00:01:46.390 --> 00:01:48.170
Controller.

00:01:48.170 --> 00:01:52.220
Okay, so it's rest matter, right?

00:01:52.220 --> 00:01:56.059
I mean, we have to use the rest controller.

00:01:56.059 --> 00:01:57.965
That is the first thing we should always do.

00:01:57.965 --> 00:02:00.140
Any of you are going to pass some information, right?

00:02:00.140 --> 00:02:02.555
So of course it is going to be post method, right?

00:02:02.555 --> 00:02:05.310
So I'm going to create something like

00:02:05.950 --> 00:02:13.775
post mapping and a Val I'm going to use saves student.

00:02:13.775 --> 00:02:16.820
Then the next thing,

00:02:16.820 --> 00:02:22.620
Let's create a mother public void.

00:02:23.500 --> 00:02:25.820
Save student.

00:02:25.820 --> 00:02:27.695
And which will accept,

00:02:27.695 --> 00:02:30.840
sorry, steward and as I input.

00:02:33.760 --> 00:02:36.995
Okay, So how are we going to implement that?

00:02:36.995 --> 00:02:44.090
So we need to have a DAO which will control all the implementations, right?

00:02:44.090 --> 00:02:48.425
So what I'm gonna do, I'm going to create a d over here like

00:02:48.425 --> 00:02:54.750
a student DEA was finite student Diego.

00:02:55.240 --> 00:02:58.980
And I'm going to auto wire this.

00:03:00.850 --> 00:03:05.060
So we'll get an error because the DAO is not available yet.

00:03:05.060 --> 00:03:09.180
So I'm going to create the steward and Diego.

00:03:11.290 --> 00:03:19.050
So I don't want to create and i'm I can create another service.

00:03:19.060 --> 00:03:20.630
Surveys.

00:03:20.630 --> 00:03:22.640
It's all day existing. What is wrong?

00:03:22.640 --> 00:03:25.700
Okay, So another service I created,

00:03:25.700 --> 00:03:28.985
a student D over class.

00:03:28.985 --> 00:03:30.620
So first thing which we need to do,

00:03:30.620 --> 00:03:32.185
we want to perform the database operation.

00:03:32.185 --> 00:03:35.495
So which means this particular class is gonna provide some information.

00:03:35.495 --> 00:03:37.835
So it's going to communicate to the repository.

00:03:37.835 --> 00:03:42.090
So we need to annotate with the repository here.

00:03:47.380 --> 00:03:53.630
Repository. And then since it is communicating their database,

00:03:53.630 --> 00:03:56.540
we need to maintain the transactions as well, right?

00:03:56.540 --> 00:04:01.475
So transaction needs must how we're going to plot the transaction,

00:04:01.475 --> 00:04:02.780
how we're going to roll back.

00:04:02.780 --> 00:04:12.290
So it will automatically taken care the moment when you use the transactional annotation,

00:04:12.290 --> 00:04:13.580
it automatically taken care.

00:04:13.580 --> 00:04:15.905
So the first thing, as I mentioned earlier,

00:04:15.905 --> 00:04:18.050
first thing we're going to use the entity manager,

00:04:18.050 --> 00:04:21.005
so we're going to do it manually. So what I'm gonna do.

00:04:21.005 --> 00:04:24.410
So here we're going to use the create an entity manager.

00:04:24.410 --> 00:04:25.985
So entity manager am,

00:04:25.985 --> 00:04:29.375
and here we need to annotate this.

00:04:29.375 --> 00:04:34.130
So what kind of annotation do or do I need to use auto white here? No.

00:04:34.130 --> 00:04:38.345
The entity manager will works with the persistent contacts.

00:04:38.345 --> 00:04:40.800
What is the persistence context?

00:04:41.170 --> 00:04:44.915
Person contact is the one who's going to take it up,

00:04:44.915 --> 00:04:47.285
storing the input we're providing, right?

00:04:47.285 --> 00:04:49.850
That will store into their database something.

00:04:49.850 --> 00:04:51.215
If something goes wrong,

00:04:51.215 --> 00:04:52.970
it will roll back the data.

00:04:52.970 --> 00:04:58.460
So all the the transaction information and how to store the information in the table,

00:04:58.460 --> 00:04:59.990
the person isn't contact.

00:04:59.990 --> 00:05:02.510
Wendy is persistent contexts,

00:05:02.510 --> 00:05:06.305
the one which will taken care of all of them.

00:05:06.305 --> 00:05:09.195
Persistent context.

00:05:09.195 --> 00:05:14.170
Okay, so now let's monitor, create a method.

00:05:14.170 --> 00:05:18.080
So here what I'm gonna do is I'm going to create a method.

00:05:20.010 --> 00:05:24.250
Maybe add student or maybe we can try instead.

00:05:24.250 --> 00:05:34.674
So run in such student which will accept a student as the input student.

00:05:34.674 --> 00:05:40.930
So all we need to do just to use the entity manager dot persists,

00:05:40.930 --> 00:05:42.625
which will take an entity as an input.

00:05:42.625 --> 00:05:43.810
We have an entity in place,

00:05:43.810 --> 00:05:47.185
which is SD, you as a student.

00:05:47.185 --> 00:05:49.765
So now all we need to do is just start,

00:05:49.765 --> 00:05:54.270
stop your application and start again and we'll test out.

00:06:05.950 --> 00:06:10.205
Sometimes you wanted to know what is happening in the background.

00:06:10.205 --> 00:06:11.330
So if you want to know,

00:06:11.330 --> 00:06:15.395
you can enable the logging level spring,

00:06:15.395 --> 00:06:19.070
our spring from logging level as to debug it automatically taken care

00:06:19.070 --> 00:06:23.705
of the log so you can see what is happening a step-by-step.

00:06:23.705 --> 00:06:27.245
Right? So the next thing we need to do,

00:06:27.245 --> 00:06:30.455
we had to go to the Postman and then try the method.

00:06:30.455 --> 00:06:32.700
Let's do that in the next video.
