WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.950
Hi everyone, Welcome back.

00:00:01.950 --> 00:00:06.600
So we tried different functionalities over D. Our SDP is right,

00:00:06.600 --> 00:00:11.895
so we did tried the static filtering and the dynamic filtering as well.

00:00:11.895 --> 00:00:13.440
But think about this scenario.

00:00:13.440 --> 00:00:16.215
Anybody can access my web services, right?

00:00:16.215 --> 00:00:17.250
Let's go to the postman.

00:00:17.250 --> 00:00:22.050
It may hit the U or I can access it even if they share the same URL,

00:00:22.050 --> 00:00:24.340
you should be able to access my URL.

00:00:24.340 --> 00:00:26.000
There is no security in place,

00:00:26.000 --> 00:00:28.415
which means your API can be accessed by anyone.

00:00:28.415 --> 00:00:31.375
But it's not the preferred way when,

00:00:31.375 --> 00:00:34.145
when you're working on your real day project, that is not the preferred way.

00:00:34.145 --> 00:00:35.465
So what do we need to do?

00:00:35.465 --> 00:00:39.214
So we are going to enable this spring basic security level authentication.

00:00:39.214 --> 00:00:43.985
We're not going to use something advanced concept like a wart and died his password.

00:00:43.985 --> 00:00:46.610
We're not going to use that. We're going to simply try

00:00:46.610 --> 00:00:49.580
the basic authentication like a username and a password.

00:00:49.580 --> 00:00:53.045
So to enable the security in your Spring application,

00:00:53.045 --> 00:01:00.485
all you need to do just go to your POM file and you need to add one other core dependency

00:01:00.485 --> 00:01:09.350
and which is nothing but Spring Framework dot Spring frameworks Data Security.

00:01:09.350 --> 00:01:14.105
This will automatically enable the basic level authentication.

00:01:14.105 --> 00:01:16.865
And you might think where is the username and the password?

00:01:16.865 --> 00:01:19.340
By default, the username is user.

00:01:19.340 --> 00:01:20.764
And what are the password?

00:01:20.764 --> 00:01:26.185
Let's talk about the password a bit later and we just add the new dependency, right?

00:01:26.185 --> 00:01:27.515
So what do we need to do?

00:01:27.515 --> 00:01:30.605
We just need to update the project,

00:01:30.605 --> 00:01:33.500
which means we need to update their poem settings.

00:01:33.500 --> 00:01:35.810
And now the dependency has been downloaded.

00:01:35.810 --> 00:01:37.175
Now all we need to do is,

00:01:37.175 --> 00:01:41.210
so we're not going to make any code changes because the moment you add the dependency,

00:01:41.210 --> 00:01:45.650
it's automatically enables the basically allow authentication, right?

00:01:45.650 --> 00:01:48.180
So let's reset our application.

00:01:52.530 --> 00:01:56.420
Replication is getting started now.

00:01:56.820 --> 00:02:00.040
Okay, so we got application, I mean our das,

00:02:00.040 --> 00:02:02.875
I have a shot at that age range 0 to one port,

00:02:02.875 --> 00:02:04.870
but just have a look at it.

00:02:04.870 --> 00:02:09.159
In the console, you should see something like using generated security password.

00:02:09.159 --> 00:02:13.599
And this is the random generator and passed on by us bringing security.

00:02:13.599 --> 00:02:17.005
Just copy the password and let's go back to your postman.

00:02:17.005 --> 00:02:19.404
I'm not going to provide any authentication.

00:02:19.404 --> 00:02:21.385
I'm going to hit Send now,

00:02:21.385 --> 00:02:23.905
you know what happened for not one Unauthorized,

00:02:23.905 --> 00:02:25.450
you are not allowed to access

00:02:25.450 --> 00:02:27.940
the web service because you don't have the proper conditionals.

00:02:27.940 --> 00:02:30.325
So let's go back to authorization tab here,

00:02:30.325 --> 00:02:33.780
and let's add the basic authentication end.

00:02:33.780 --> 00:02:40.205
The default username is user and paste the password which you've copied from the console.

00:02:40.205 --> 00:02:44.720
Now, let's try to hit the same surveys. See what happened.

00:02:44.720 --> 00:02:47.630
Now, you've got the response back successfully because we

00:02:47.630 --> 00:02:51.050
just enabled the username and password authentication.

00:02:51.050 --> 00:02:54.080
But the password is not constant one every time

00:02:54.080 --> 00:02:57.650
I restart my obligation in the past or will keep on Change.

00:02:57.650 --> 00:02:58.835
Correct.

00:02:58.835 --> 00:03:00.515
So to make it permanent,

00:03:00.515 --> 00:03:03.710
we can provide the settings in the application that properties.

00:03:03.710 --> 00:03:04.715
So let's do that.

00:03:04.715 --> 00:03:08.960
Let's provide the username and the password inside your application that properties.

00:03:08.960 --> 00:03:16.025
So security dot user dot name is equal to admin

00:03:16.025 --> 00:03:23.660
and security dot user password.

00:03:23.660 --> 00:03:26.195
Let's make it a site admin 1, 2, 3.

00:03:26.195 --> 00:03:28.625
Okay, so username and the password,

00:03:28.625 --> 00:03:31.055
the username is admin password is I mean 123.

00:03:31.055 --> 00:03:34.565
So now all we need to do is just go back and restart your application.

00:03:34.565 --> 00:03:37.115
Like we always do.

00:03:37.115 --> 00:03:40.680
Your application is getting started.

00:03:41.410 --> 00:03:43.880
Okay, so our obligations charter,

00:03:43.880 --> 00:03:46.070
which is looked on the port number a iterate on,

00:03:46.070 --> 00:03:48.290
but still you should be able to see the password anyway,

00:03:48.290 --> 00:03:49.910
we're not going to use this one.

00:03:49.910 --> 00:03:53.240
It's go back to Postman here.

00:03:53.240 --> 00:03:59.720
Let's try with the same username and the password which we used previously is click cent.

00:03:59.720 --> 00:04:01.715
Okay, it still works,

00:04:01.715 --> 00:04:03.725
which means the password has been changed.

00:04:03.725 --> 00:04:05.660
So because the default username,

00:04:05.660 --> 00:04:08.150
and this is the default password that generated password,

00:04:08.150 --> 00:04:09.980
it doesn't change to this time.

00:04:09.980 --> 00:04:12.240
Okay, So now what do we need to do then?

00:04:12.240 --> 00:04:14.795
Try with the admin and admin 1, 2, 3.

00:04:14.795 --> 00:04:17.945
Let me try to use some different password for the user,

00:04:17.945 --> 00:04:20.540
type some random data. We'll see what happened.

00:04:20.540 --> 00:04:22.205
It still worked.

00:04:22.205 --> 00:04:25.790
So something is wrong. Let's go back and see what happened.

00:04:25.790 --> 00:04:28.625
Let's go back to our ID here.

00:04:28.625 --> 00:04:29.960
So what is wrong here?

00:04:29.960 --> 00:04:32.240
Security, that username and password,

00:04:32.240 --> 00:04:35.045
everything looks pretty clear.

00:04:35.045 --> 00:04:38.555
My dad, we had to provide the spring right.

00:04:38.555 --> 00:04:41.810
Spring Security to use an m sound or it's not required,

00:04:41.810 --> 00:04:45.245
but sometimes it does.

00:04:45.245 --> 00:04:48.800
Okay, so now we had just modified the spring that security using him.

00:04:48.800 --> 00:04:49.880
I think we made a mistake here,

00:04:49.880 --> 00:04:51.095
so I just modified it.

00:04:51.095 --> 00:04:55.415
So all we need to do just to rebuild and rerun your application again,

00:04:55.415 --> 00:04:57.540
it will resolve that issue.

00:04:58.000 --> 00:05:02.160
Replication is getting started now.

00:05:03.820 --> 00:05:06.095
Okay, so our application is rounder.

00:05:06.095 --> 00:05:07.205
The next thing which we need to do,

00:05:07.205 --> 00:05:11.490
go back to the postman and test the service.

00:05:12.490 --> 00:05:17.675
Let us go back to Postman and it's good to try again.

00:05:17.675 --> 00:05:21.260
See for not one unauthorized.

00:05:21.260 --> 00:05:23.760
Let me try with some different.

00:05:24.280 --> 00:05:26.494
So what are the password,

00:05:26.494 --> 00:05:31.235
the username and we tried it is admin and admin 1, 2, 3.

00:05:31.235 --> 00:05:32.765
Okay, let's try that as well.

00:05:32.765 --> 00:05:35.705
Admin, admin 1, 2, 3,

00:05:35.705 --> 00:05:38.090
and let say the password,

00:05:38.090 --> 00:05:39.275
it's unknown amino onto three.

00:05:39.275 --> 00:05:40.745
Let's hit it.

00:05:40.745 --> 00:05:44.105
See, now we've got the proper data.

00:05:44.105 --> 00:05:47.600
We can try the same in the browser as well.

00:05:47.600 --> 00:05:54.050
So let me open a browser and paste the same URL.

00:05:54.050 --> 00:05:56.600
See what I've been into asking 70,

00:05:56.600 --> 00:05:58.250
Let's try some random password.

00:05:58.250 --> 00:06:04.385
User, user, bad credential.

00:06:04.385 --> 00:06:05.300
It.

00:06:05.300 --> 00:06:06.365
Let's try proper password.

00:06:06.365 --> 00:06:08.435
Admin, admin 1, 2, 3.

00:06:08.435 --> 00:06:11.585
So now we've got all the proper response.

00:06:11.585 --> 00:06:16.355
So this is just a basic username password authentication.

00:06:16.355 --> 00:06:20.855
So when you're, when you're implementing to your own application,

00:06:20.855 --> 00:06:24.890
most, most scenarios will not go for the basic authentication.

00:06:24.890 --> 00:06:28.535
We'll go for something like O Auth or something else.

00:06:28.535 --> 00:06:30.590
Okay, So this is the simplest way to implement

00:06:30.590 --> 00:06:33.990
a username password for this small AT applications.
