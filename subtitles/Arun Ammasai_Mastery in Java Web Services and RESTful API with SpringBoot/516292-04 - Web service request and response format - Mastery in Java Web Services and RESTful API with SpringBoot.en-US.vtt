WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.730
Hello everyone, Welcome back.

00:00:02.730 --> 00:00:04.725
So now we're going to talk about

00:00:04.725 --> 00:00:09.900
some common or most usely types which are used in the Internet.

00:00:09.900 --> 00:00:12.285
The first one is XML.

00:00:12.285 --> 00:00:14.310
It's a traditional one.

00:00:14.310 --> 00:00:20.435
Xml. It is when used for a long period of time AND FAPE services.

00:00:20.435 --> 00:00:22.625
So it is still in use.

00:00:22.625 --> 00:00:23.285
Okay.

00:00:23.285 --> 00:00:27.320
So the web series which built along back.

00:00:27.320 --> 00:00:33.019
So those web series has been built using the the soap wisdom services.

00:00:33.019 --> 00:00:37.010
You might have seen something called some URL dot visited.

00:00:37.010 --> 00:00:39.785
So visually is a one type of web services,

00:00:39.785 --> 00:00:43.070
okay, those are wonderfully tightly coupled with the XML.

00:00:43.070 --> 00:00:47.405
So they will only communicate through the exam or when you're using XML,

00:00:47.405 --> 00:00:49.790
it needs to follow some certain criteria.

00:00:49.790 --> 00:00:52.490
We'll talk about that in a later point for now.

00:00:52.490 --> 00:00:57.095
So what are the other type which is commonly used in the web services?

00:00:57.095 --> 00:01:02.405
Jay Sean JSON is the lifesaver for everyone.

00:01:02.405 --> 00:01:04.370
So in at St. APS,

00:01:04.370 --> 00:01:06.500
JSON is the key factor.

00:01:06.500 --> 00:01:08.510
So when you have that response is a JSON.

00:01:08.510 --> 00:01:11.630
It is easy for you to convert into any type of a data.

00:01:11.630 --> 00:01:16.385
That is the advantage of using the spring boat and XML,

00:01:16.385 --> 00:01:20.165
which is acceptable by all the languages,

00:01:20.165 --> 00:01:21.605
our Java can accept.

00:01:21.605 --> 00:01:26.105
Xml, and PHP can accept XML.

00:01:26.105 --> 00:01:27.860
And Python also accept XML,

00:01:27.860 --> 00:01:30.260
which means you can simply call XML S. It didn't read,

00:01:30.260 --> 00:01:34.670
it will be accepted by all the language is pretty much JSON.

00:01:34.670 --> 00:01:35.705
It's the same.

00:01:35.705 --> 00:01:39.770
It can be accepted by all the programming languages.

00:01:39.770 --> 00:01:45.140
And the reason why a JSON is a lifesaver,

00:01:45.140 --> 00:01:49.205
because it's not tightly coupled with any specific format.

00:01:49.205 --> 00:01:53.990
Because the sun is mostly used in the rest API is in the rest API.

00:01:53.990 --> 00:01:56.765
It's not tightly coupled with any specific format.

00:01:56.765 --> 00:02:00.110
So we can use JSON and you're,

00:02:00.110 --> 00:02:01.445
if you're using traditional format,

00:02:01.445 --> 00:02:02.990
you can still use XML.

00:02:02.990 --> 00:02:08.660
Or you can use some plain text and you can use some different formats as well.

00:02:08.660 --> 00:02:12.755
There are a lot of opportunities available when it comes to a rest API,

00:02:12.755 --> 00:02:14.585
but if somebody is asking,

00:02:14.585 --> 00:02:19.325
so what are the most useful types over the Internet and the following way of format.

00:02:19.325 --> 00:02:21.500
The first one is the XML,

00:02:21.500 --> 00:02:26.360
and the second one is JSON. Okay?

00:02:26.360 --> 00:02:27.800
So in the Internet,

00:02:27.800 --> 00:02:30.620
we are trying to send a request and we're getting a response.

00:02:30.620 --> 00:02:32.360
So how the service is there,

00:02:32.360 --> 00:02:36.665
understand whether it is a request.

00:02:36.665 --> 00:02:41.795
So records needs to have some important elements.

00:02:41.795 --> 00:02:43.430
So if you're sending a request,

00:02:43.430 --> 00:02:46.160
which means you will request needs to have a structure.

00:02:46.160 --> 00:02:47.600
Of course, whatever you do,

00:02:47.600 --> 00:02:50.240
it needs to follow some basic structure.

00:02:50.240 --> 00:02:52.640
When you have the structure for requests,

00:02:52.640 --> 00:02:55.250
at the same time you are sending a response back to the client, right?

00:02:55.250 --> 00:02:59.375
So the client also expecting your response in a specific structure.

00:02:59.375 --> 00:03:03.829
So the first thing structures must whether it is a request or a response.

00:03:03.829 --> 00:03:05.450
And the next thing.

00:03:05.450 --> 00:03:10.519
So you need to mention what is the request and response format.

00:03:10.519 --> 00:03:14.720
I might request for XML or I might request for a JSON as well.

00:03:14.720 --> 00:03:18.275
So it's important to specify what kind of

00:03:18.275 --> 00:03:22.370
a trick question it is a spawn format is user is x but pink.

00:03:22.370 --> 00:03:24.845
So now I have a request and I have a response,

00:03:24.845 --> 00:03:29.630
and I have a which format the user is going to be triggering the user is expecting.

00:03:29.630 --> 00:03:30.950
But the next important thing,

00:03:30.950 --> 00:03:34.685
the endpoint with all those previous information, what do we do?

00:03:34.685 --> 00:03:36.785
We are going to call some services,

00:03:36.785 --> 00:03:40.490
and the service is praised in the somewhere in the server.

00:03:40.490 --> 00:03:42.440
To identify that particular service,

00:03:42.440 --> 00:03:44.165
we need to have the end point,

00:03:44.165 --> 00:03:47.030
or you can call them as the EU or less well.

00:03:47.030 --> 00:03:49.790
Okay, so in the next video we'll talk

00:03:49.790 --> 00:03:53.720
about some additional information about how to identify request,

00:03:53.720 --> 00:03:58.175
and we'll talk about the different types of services.

00:03:58.175 --> 00:04:00.590
So we'll talk about the scope and the rest in the next video.

00:04:00.590 --> 00:04:02.100
Thank you.
