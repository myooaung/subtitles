WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.175
Hello everyone. Welcome back.

00:00:02.175 --> 00:00:04.365
So we know what is a tight coupling issue.

00:00:04.365 --> 00:00:06.945
So now if I'm going to add a new provision,

00:00:06.945 --> 00:00:09.870
8 might end up with the existing code modification,

00:00:09.870 --> 00:00:11.400
which is not the right approach.

00:00:11.400 --> 00:00:12.720
For now what I'm gonna do,

00:00:12.720 --> 00:00:15.375
I'm gonna create a new class.

00:00:15.375 --> 00:00:19.180
So tight coupling solution.

00:00:22.640 --> 00:00:25.980
Okay, so here what I'm gonna do is I'm not gonna make

00:00:25.980 --> 00:00:29.085
any major modification in our existing classes.

00:00:29.085 --> 00:00:30.930
So this is a new class.

00:00:30.930 --> 00:00:32.370
And now what I'm gonna do,

00:00:32.370 --> 00:00:34.755
I'm gonna create a instance,

00:00:34.755 --> 00:00:37.965
but I'm not going to create a instance for my doctor or engineer.

00:00:37.965 --> 00:00:44.930
I'm gonna create a instance for my interface, right?

00:00:44.930 --> 00:00:48.420
And then I'm going to create a constructor.

00:00:48.790 --> 00:00:51.635
So now all I need to do,

00:00:51.635 --> 00:00:53.075
I'm going to grade one more method,

00:00:53.075 --> 00:01:00.935
just like before, public void and data.

00:01:00.935 --> 00:01:04.940
So here what I'm gonna do is I'm going to simply use

00:01:04.940 --> 00:01:08.900
the job reference Job dot display method.

00:01:08.900 --> 00:01:10.730
Now look at the existing code,

00:01:10.730 --> 00:01:13.130
Andy, current code. This is a problem.

00:01:13.130 --> 00:01:16.130
I created the instance for each and every profession and I'm

00:01:16.130 --> 00:01:19.520
creating using them in the constructor,

00:01:19.520 --> 00:01:21.110
which is not the preferred way.

00:01:21.110 --> 00:01:23.210
So now I create an instance,

00:01:23.210 --> 00:01:24.770
but it is not for the profession,

00:01:24.770 --> 00:01:27.245
it is for the interface itself.

00:01:27.245 --> 00:01:32.420
So you can pass any classes here which is implemented the job.

00:01:32.420 --> 00:01:35.390
So we have a doctor, an engineer which implements the job, right?

00:01:35.390 --> 00:01:37.519
So whenever you create a tight coupling solution,

00:01:37.519 --> 00:01:40.685
create an object, you can directly pass the DTO here.

00:01:40.685 --> 00:01:42.635
I mean the profession D20.

00:01:42.635 --> 00:01:45.365
So how are we going to test that out?

00:01:45.365 --> 00:01:48.380
So let's go back to our debt coupling application.

00:01:48.380 --> 00:01:51.680
I'm going to comment out these two lines.

00:01:51.680 --> 00:01:54.425
Okay, so now what I'm gonna do is I'm going to

00:01:54.425 --> 00:01:58.170
create an object for tight coupling solution.

00:01:59.110 --> 00:02:07.790
And I'm going to occur in numerical solution is equal to n new tight coupling solution.

00:02:07.790 --> 00:02:09.005
And here what I'm gonna do,

00:02:09.005 --> 00:02:13.850
I can pass any class which is implementor, the job interface.

00:02:13.850 --> 00:02:16.505
So I can simply pause the adopter.

00:02:16.505 --> 00:02:19.175
So just pretty easy, right?

00:02:19.175 --> 00:02:25.490
And then what I can do is I can use the reference to call the student.

00:02:25.490 --> 00:02:26.855
Am I done now what I'm gonna do,

00:02:26.855 --> 00:02:31.265
I'm gonna simply stop the server and I'm going to run it again.

00:02:31.265 --> 00:02:34.170
And we'll see what happens now.

00:02:36.130 --> 00:02:39.050
So this spring initialized,

00:02:39.050 --> 00:02:42.905
so it might upon an anus few seconds,

00:02:42.905 --> 00:02:45.240
okay, it started now.

00:02:47.350 --> 00:02:52.534
Okay, so now you see I got the output as I'm a doctor.

00:02:52.534 --> 00:02:56.270
Ok, so I can pass new engineering as well.

00:02:56.270 --> 00:02:59.240
It's not going to be a big issue, right?

00:02:59.240 --> 00:03:04.490
Because we are, we need to pass any class or such implementing the JOB industries, right?

00:03:04.490 --> 00:03:06.170
So it will still work.

00:03:06.170 --> 00:03:08.400
So I'm going to run it again.

00:03:20.970 --> 00:03:24.080
Let's keep going.

00:03:27.150 --> 00:03:30.940
Okay, see now, now we got I'm an engineer.

00:03:30.940 --> 00:03:38.275
So all I need to do is just pass the proper glass here. Okay?

00:03:38.275 --> 00:03:39.610
So you might ask,

00:03:39.610 --> 00:03:43.855
so how it is helping us in the loosely coupling.

00:03:43.855 --> 00:03:45.730
So we need to explore that, right?

00:03:45.730 --> 00:03:48.010
So let's go back to the implementation.

00:03:48.010 --> 00:03:50.995
Does the implementation, so what is a loose coupling?

00:03:50.995 --> 00:03:54.235
You would exist in quotes, should be closed for modification.

00:03:54.235 --> 00:03:58.709
So I wanted to create a new professional photographer.

00:03:58.709 --> 00:04:04.685
So Control N, and I'm going to create a new class here like a photographer.

00:04:04.685 --> 00:04:11.340
And which is going to be implementing the job interface.

00:04:14.260 --> 00:04:21.740
And then you need to override the display method and just simply do a print,

00:04:21.740 --> 00:04:28.190
something like AMA photograph or graph.

00:04:28.190 --> 00:04:30.215
Okay, so now this is a change.

00:04:30.215 --> 00:04:32.180
So I have some existing implemented in,

00:04:32.180 --> 00:04:33.680
I added something new now.

00:04:33.680 --> 00:04:36.260
So do I need to go back and check the main change,

00:04:36.260 --> 00:04:38.915
the existing modification, which means that this class,

00:04:38.915 --> 00:04:41.145
it is not required.

00:04:41.145 --> 00:04:44.305
Because the way how we designed the class,

00:04:44.305 --> 00:04:47.305
it will accept any class which is implementing the job.

00:04:47.305 --> 00:04:49.810
So the new profession, it's a guinea implementing the job, right?

00:04:49.810 --> 00:04:53.470
So I can directly go ahead and just instead of the new engineer,

00:04:53.470 --> 00:04:57.910
I can keep passing the photograph for so I can do that.

00:04:57.910 --> 00:05:03.560
So what I'm gonna do, I'm gonna run the code again and we'll show you what is happening.

00:05:05.490 --> 00:05:08.185
So the spring initialized.

00:05:08.185 --> 00:05:13.189
So it might take a few seconds. Quite starter.

00:05:15.840 --> 00:05:18.925
See, we've got our outcome.

00:05:18.925 --> 00:05:23.670
I'm a photograph or it doesn't matter how many new professions.

00:05:23.670 --> 00:05:25.130
And you're going to add.

00:05:25.130 --> 00:05:29.495
All you need to do is just pass the required instance here.

00:05:29.495 --> 00:05:33.050
But you might ask, so how this thing is going to work for my existing implementation,

00:05:33.050 --> 00:05:35.165
which means the world one tight coupling problem.

00:05:35.165 --> 00:05:36.830
So let's go back to my coupling problem.

00:05:36.830 --> 00:05:38.225
How are we going to implement that?

00:05:38.225 --> 00:05:39.455
This is the implementation, right?

00:05:39.455 --> 00:05:43.160
We should not modify the exiting implementation,

00:05:43.160 --> 00:05:46.445
but in this scenario we don't have a choice. What do we need to do?

00:05:46.445 --> 00:05:53.915
We have to go toward implementation and how to create objects for photographer.

00:05:53.915 --> 00:05:55.850
And then not only that,

00:05:55.850 --> 00:05:59.135
you have to pass the photograph in the constructor here.

00:05:59.135 --> 00:06:03.230
And which means what happens if you have a 45 different profession?

00:06:03.230 --> 00:06:06.350
It's, it doesn't, it's not going to be a look good when you are

00:06:06.350 --> 00:06:09.890
having so many parameters in your kind of struck tab.

00:06:09.890 --> 00:06:15.575
Right? So that is why that tight coupling end up with a problem here.

00:06:15.575 --> 00:06:19.835
So we know what is a tight coupling problem and we know how to fix it.

00:06:19.835 --> 00:06:22.160
So now what we're gonna do here,

00:06:22.160 --> 00:06:24.635
we are doing all the mapping manually, right?

00:06:24.635 --> 00:06:28.250
So in the next video we're going to use the auto wire and the component which is

00:06:28.250 --> 00:06:32.165
provided by this spring to make the mapping automatically.

00:06:32.165 --> 00:06:33.350
So here what is happening?

00:06:33.350 --> 00:06:35.930
So here I'm doing manual mapping, correct?

00:06:35.930 --> 00:06:37.655
So I had to create all of your atom,

00:06:37.655 --> 00:06:39.529
mapping it in through the constructor.

00:06:39.529 --> 00:06:43.415
And here, the solution here again,

00:06:43.415 --> 00:06:47.210
I'm creating an instance for my interface and I'm just

00:06:47.210 --> 00:06:52.370
wiring that manually using a concept that you can wire in a multiple ways.

00:06:52.370 --> 00:06:55.430
You can use constructor and you can use a setter Getter asked well,

00:06:55.430 --> 00:06:57.995
so in the next video we'll try to use

00:06:57.995 --> 00:07:04.740
the spring component and the auto wired logic to implement the same solution.
