WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.190
Hello everyone, welcome back.

00:00:02.190 --> 00:00:06.480
So we're going to create our first API.

00:00:06.480 --> 00:00:08.025
So what do we need to do?

00:00:08.025 --> 00:00:09.885
We need to have the control,

00:00:09.885 --> 00:00:11.760
which we can call them as a controller,

00:00:11.760 --> 00:00:15.330
which will taken care of the all the input and the output requests based

00:00:15.330 --> 00:00:19.200
on the methods which we do find inside a particular controller.

00:00:19.200 --> 00:00:22.125
So first thing, let's create a new Java file here.

00:00:22.125 --> 00:00:23.535
We can call them ASA.

00:00:23.535 --> 00:00:26.020
It says welcome controller.

00:00:26.960 --> 00:00:31.455
So I'm going to call them as I welcome controller here.

00:00:31.455 --> 00:00:34.120
Okay, so now we've got the welcome controller.

00:00:34.120 --> 00:00:38.449
There are three important nations still path when it comes to a controller.

00:00:38.449 --> 00:00:40.550
Controller remains, as I mentioned earlier,

00:00:40.550 --> 00:00:43.190
this is the one which will defend all the methods in it.

00:00:43.190 --> 00:00:46.310
So we need to tell to our,

00:00:46.310 --> 00:00:48.305
I mean, our application saying like this is

00:00:48.305 --> 00:00:50.555
this particular class, various risks controller.

00:00:50.555 --> 00:00:54.860
So the first thing controller, right?

00:00:54.860 --> 00:00:58.385
And then my thoughts.

00:00:58.385 --> 00:01:00.890
And why when you're providing a method,

00:01:00.890 --> 00:01:05.345
so you need to provide that type of a method by that in GET or post or something else.

00:01:05.345 --> 00:01:10.520
And then we had to provide the input and output that will take care of.

00:01:10.520 --> 00:01:11.615
And we are creating a method.

00:01:11.615 --> 00:01:13.835
For now, I'm going to create a simple Hello World, right?

00:01:13.835 --> 00:01:16.530
So first thing, let's create a method.

00:01:16.530 --> 00:01:18.415
Okay, so the signature is,

00:01:18.415 --> 00:01:22.630
I'm going to call him at all and it will give me some HelloWorld or welcome message.

00:01:22.630 --> 00:01:30.410
So public and h will return a string and welcome message.

00:01:32.160 --> 00:01:36.235
So welcome message.

00:01:36.235 --> 00:01:39.830
And this will simply, I sorry.

00:01:41.760 --> 00:01:46.400
This will simply go now returning something like return.

00:01:49.170 --> 00:01:54.950
Welcome to a rest web services.

00:01:56.490 --> 00:01:59.285
Okay, So now Hello,

00:01:59.285 --> 00:02:01.340
Math dot, but it doesn't know.

00:02:01.340 --> 00:02:04.220
I mean, our, our application doesn't know this is going to be

00:02:04.220 --> 00:02:08.750
a rich metadata because we haven't mentioned anything in the class.

00:02:08.750 --> 00:02:10.130
So first thing you need to do,

00:02:10.130 --> 00:02:12.950
you need to provide, this is going to be a rest controller.

00:02:12.950 --> 00:02:14.630
You have to provide the annotation.

00:02:14.630 --> 00:02:16.910
Okay, so now our obligation understand, Okay,

00:02:16.910 --> 00:02:20.645
this is a rest controller which contains all the methods in it.

00:02:20.645 --> 00:02:23.600
So whether this method is a method of normal matter,

00:02:23.600 --> 00:02:24.980
that it's just modern method.

00:02:24.980 --> 00:02:28.115
So all you need to do is you have to tell the application,

00:02:28.115 --> 00:02:33.050
and this method is going to be my rest method.

00:02:33.050 --> 00:02:35.990
So the method I'm going to use a good metadata.

00:02:35.990 --> 00:02:38.420
Okay, so first let's do,

00:02:38.420 --> 00:02:40.880
let's try to add the annotation.

00:02:40.880 --> 00:02:43.805
So I'm gonna do a request to mapping.

00:02:43.805 --> 00:02:45.920
So once you open the request mapping unit,

00:02:45.920 --> 00:02:48.770
I mentioned what is the method?

00:02:48.770 --> 00:02:50.150
So what is that type?

00:02:50.150 --> 00:02:54.185
So we had a probate requests dot get method.

00:02:54.185 --> 00:02:58.100
Right. And the next thing which we need to do, the part.

00:02:58.100 --> 00:03:01.430
So how I'm going to access this particular application?

00:03:01.430 --> 00:03:05.970
So glass and I'm going to save welcome.

00:03:06.040 --> 00:03:10.115
So when you're trying to hit this particular path,

00:03:10.115 --> 00:03:14.690
we get our method executed and we'll get d welcome to our HTTP service.

00:03:14.690 --> 00:03:17.810
So all we need to do is application is already up and running.

00:03:17.810 --> 00:03:20.510
So to reflect the new changes,

00:03:20.510 --> 00:03:24.080
stop this service and we're going to use the DevTools when you're doing

00:03:24.080 --> 00:03:28.385
a proper project because they will do it will automatically will do the projects.

00:03:28.385 --> 00:03:29.960
So now the application stops.

00:03:29.960 --> 00:03:33.515
So all I need to do is just run it again one more time.

00:03:33.515 --> 00:03:37.260
So we can see the output in the console here.

00:03:40.780 --> 00:03:45.830
So, okay, so our application starter in the port aids are aids there.

00:03:45.830 --> 00:03:49.235
So all we need to do, go to the browser and hit the URL.

00:03:49.235 --> 00:03:53.310
So I'm going to use Firefox.

00:03:59.050 --> 00:04:08.225
So the URL, we know that HTTP and local host and we know the port number,

00:04:08.225 --> 00:04:10.070
age range, which is a default one.

00:04:10.070 --> 00:04:13.670
And the URL that you're trying to hit is a welcome.

00:04:13.670 --> 00:04:16.700
Because that is a name which you provided in

00:04:16.700 --> 00:04:18.985
the rest controller will be so enrich controlled ones.

00:04:18.985 --> 00:04:22.220
So this is a miss. This is the path I'm trying to hit.

00:04:22.220 --> 00:04:26.360
So let's come back and just see now we

00:04:26.360 --> 00:04:31.520
got a welcome message from our first rest API method, right?

00:04:31.520 --> 00:04:33.230
So this is just a hard-coded right?

00:04:33.230 --> 00:04:35.165
So in the next example what we're gonna do.

00:04:35.165 --> 00:04:38.090
So instead of directly hard-coding something,

00:04:38.090 --> 00:04:41.600
how we can use some complex objects are as simple object or creating

00:04:41.600 --> 00:04:43.190
a simple bean and ridden a message from

00:04:43.190 --> 00:04:45.990
the particular pin will do that in the next video.
