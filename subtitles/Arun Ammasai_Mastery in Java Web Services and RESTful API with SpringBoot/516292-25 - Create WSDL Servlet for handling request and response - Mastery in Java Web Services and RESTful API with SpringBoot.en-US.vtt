WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.160
Hello everyone, Welcome back.

00:00:02.160 --> 00:00:06.630
So we created a endpoint configuration which contains what is the method.

00:00:06.630 --> 00:00:08.700
So in this particular endpoint concrete,

00:00:08.700 --> 00:00:10.020
you might have multiple methods.

00:00:10.020 --> 00:00:11.550
Each and every one of them belong to

00:00:11.550 --> 00:00:14.805
one particular process, our particular functionality.

00:00:14.805 --> 00:00:16.830
But the next thing, actually important thing.

00:00:16.830 --> 00:00:18.690
So to cause these methods,

00:00:18.690 --> 00:00:22.845
we need to have some the visitor configuration and we need to have

00:00:22.845 --> 00:00:27.185
someone else who can handle the requests and responses, right?

00:00:27.185 --> 00:00:31.880
So normally when, when it comes to our normal web technology in Java,

00:00:31.880 --> 00:00:34.895
so written all the requests dispatcher,

00:00:34.895 --> 00:00:38.300
so the solver tool taken care of that aqueous dispersion does or what will take care

00:00:38.300 --> 00:00:42.125
of receiving the request and sending the response back to the user.

00:00:42.125 --> 00:00:43.790
So the first thing would we need to

00:00:43.790 --> 00:00:47.480
do when it comes to soap service, we have an end point.

00:00:47.480 --> 00:00:50.495
The next thing we need to have them visible configuration.

00:00:50.495 --> 00:00:51.620
So now what I'm gonna do,

00:00:51.620 --> 00:00:53.115
I'm gonna create a new class here.

00:00:53.115 --> 00:00:56.130
I'm going to call this as a visitor upon week

00:00:56.320 --> 00:01:03.380
is maybe as always in here, okay?

00:01:03.380 --> 00:01:06.770
First of all, this is the original configuration file, right?

00:01:06.770 --> 00:01:09.350
So first thing you need to tell

00:01:09.350 --> 00:01:12.650
the configuration this particular class belongs to the services.

00:01:12.650 --> 00:01:16.580
So which means this has to be annotated with the Enable Web Services,

00:01:16.580 --> 00:01:19.250
which means you're telling the compiler saying like this,

00:01:19.250 --> 00:01:22.160
the loss is waive service class.

00:01:22.160 --> 00:01:24.410
So in order to identify that,

00:01:24.410 --> 00:01:28.220
I have I have to enable the web services.

00:01:28.220 --> 00:01:30.170
The moment you enable the web services,

00:01:30.170 --> 00:01:32.270
what happened when you start the application?

00:01:32.270 --> 00:01:36.680
This auto wiring automatically happen in the application context, right?

00:01:36.680 --> 00:01:40.895
So not only the enabled our web services and this is also a configuration file.

00:01:40.895 --> 00:01:43.820
So you have to mention the configurations asked,

00:01:43.820 --> 00:01:47.855
well, okay, there now the first step is bent, so unless they can step.

00:01:47.855 --> 00:01:51.770
So the first thing we need request handler.

00:01:52.050 --> 00:01:54.550
So who's the regular channel have sorrow,

00:01:54.550 --> 00:01:57.550
but we're not going to directly using the direct servlet.

00:01:57.550 --> 00:02:01.390
We are going to use the solid classes which is available in this ring.

00:02:01.390 --> 00:02:03.610
So in spring or the method we're going now,

00:02:03.610 --> 00:02:06.070
I'm in the class we want to use, right?

00:02:06.070 --> 00:02:14.170
That is, so let registration when alkanes,

00:02:14.170 --> 00:02:16.435
so in the lessor will registration when what we're gonna do,

00:02:16.435 --> 00:02:19.390
we're gonna create a message dispatch or the message this,

00:02:19.390 --> 00:02:20.980
whether you know what that will do,

00:02:20.980 --> 00:02:24.205
the message dispatcher which will identify the endpoints.

00:02:24.205 --> 00:02:27.850
That is why this class is marked by side configurations file.

00:02:27.850 --> 00:02:31.360
Okay, so here I'm going to use the message.

00:02:31.360 --> 00:02:35.030
So let, okay, so now we know all the steps.

00:02:35.030 --> 00:02:36.650
So now let's write a method.

00:02:36.650 --> 00:02:40.895
And this method, it's a configuration at we enable the web service and these con,

00:02:40.895 --> 00:02:43.430
this method we are going to write that

00:02:43.430 --> 00:02:46.205
is going to handle the request and response, correct?

00:02:46.205 --> 00:02:50.690
So I'm going to create public and what is us,

00:02:50.690 --> 00:02:54.875
our being here I want to create here it is going to be so literal distribution being.

00:02:54.875 --> 00:03:04.230
So let registration when and the method name is going to be a request for special.

00:03:05.020 --> 00:03:08.090
And it will have some DAY application context,

00:03:08.090 --> 00:03:10.130
meaning the obligation to conduct because in

00:03:10.130 --> 00:03:13.770
a context only we have all the bean information right to remember.

00:03:14.070 --> 00:03:18.700
Okay, the next thing. So now I have a servlet registration when,

00:03:18.700 --> 00:03:24.505
where we can register all the requests and responses to identify the endpoints.

00:03:24.505 --> 00:03:27.955
Two methods we need to have the message despite its all at.

00:03:27.955 --> 00:03:31.735
So I'm going to create a message dispatcher are here,

00:03:31.735 --> 00:03:37.030
especially I'll let VS code MDS.

00:03:37.030 --> 00:03:39.655
Okay, so now that is 10. So what is the next thing?

00:03:39.655 --> 00:03:44.785
The servlet decision-making, which will add subset message dispatcher servlet,

00:03:44.785 --> 00:03:48.520
correct, which means to identify the endpoints at the same time,

00:03:48.520 --> 00:03:50.875
we need to have one more thing called as a U or a,

00:03:50.875 --> 00:03:54.895
what is the pattern of you or so when you create a service,

00:03:54.895 --> 00:03:57.270
I mean, so let registration when you have to provide,

00:03:57.270 --> 00:04:01.535
they may say dispatcher servlet at the same time, Uniprot into pattern.

00:04:01.535 --> 00:04:03.319
So how your URL,

00:04:03.319 --> 00:04:05.810
it looks like, for example, you have a local who's 800, 800.

00:04:05.810 --> 00:04:07.715
After that, you need to maintain a pattern.

00:04:07.715 --> 00:04:11.240
So, and that particular patent common across all the methods.

00:04:11.240 --> 00:04:13.040
Okay, so for our example,

00:04:13.040 --> 00:04:15.665
I'm going to keep it as I like soap.

00:04:15.665 --> 00:04:16.820
So this is a pattern.

00:04:16.820 --> 00:04:19.580
So after the, after this baton,

00:04:19.580 --> 00:04:25.085
we might, we might have a multiple difference endpoint URLs or in point of methods.

00:04:25.085 --> 00:04:26.600
So based on this particular operation,

00:04:26.600 --> 00:04:28.205
we might call it different methods.

00:04:28.205 --> 00:04:31.340
And this is a common for all the methods.

00:04:31.340 --> 00:04:32.990
Okay, So now the next thing,

00:04:32.990 --> 00:04:35.195
now I have the message dispatch a solid.

00:04:35.195 --> 00:04:39.560
The next thing which we want to do at the application context into it.

00:04:39.560 --> 00:04:42.665
Since we have a contact in the method.

00:04:42.665 --> 00:04:44.870
So I'm going to add it on now another thing is,

00:04:44.870 --> 00:04:49.805
and we need to allow the messy dispersal lead to transform the visited locations.

00:04:49.805 --> 00:04:53.975
So by default it's a disabled as false,

00:04:53.975 --> 00:04:59.705
and now we need to enable it to set the flag as it should now.

00:04:59.705 --> 00:05:03.410
Okay, So that is then the final thing we need to return here.

00:05:03.410 --> 00:05:06.545
So what we needed we needed it under servlet registration when?

00:05:06.545 --> 00:05:07.130
Correct.

00:05:07.130 --> 00:05:09.395
Okay, so I did this all digitization beam,

00:05:09.395 --> 00:05:12.875
but in the new solar registration rate.

00:05:12.875 --> 00:05:15.440
So as I mentioned, we need to pass two parameters.

00:05:15.440 --> 00:05:17.225
First one is the message dispatcher.

00:05:17.225 --> 00:05:19.084
So let, which is a MDS,

00:05:19.084 --> 00:05:21.110
and second is the URL pattern.

00:05:21.110 --> 00:05:28.355
The URL pattern, I'm going to use the URL mapping slope, slash star.

00:05:28.355 --> 00:05:29.810
The star belongs to different methods.

00:05:29.810 --> 00:05:31.130
It might be anything.

00:05:31.130 --> 00:05:33.380
So based on the literal,

00:05:33.380 --> 00:05:34.535
whatever is coming here,

00:05:34.535 --> 00:05:37.040
we will read air to appropriate method.

00:05:37.040 --> 00:05:40.070
Okay, so now we handle the request, dispatch it.

00:05:40.070 --> 00:05:44.225
So the next thing which we need to do is we have to create a visitor.

00:05:44.225 --> 00:05:46.655
So this del, is there another important thing?

00:05:46.655 --> 00:05:52.310
So we still contains all the information your body location you are at its end,

00:05:52.310 --> 00:05:55.430
the target namespace and this schema information, everything.

00:05:55.430 --> 00:05:57.870
Let's do that in the next video.
