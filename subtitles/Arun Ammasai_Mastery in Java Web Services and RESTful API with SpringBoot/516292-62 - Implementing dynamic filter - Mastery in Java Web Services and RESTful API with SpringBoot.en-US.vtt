WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.130
Hello everyone, welcome back.

00:00:02.130 --> 00:00:05.655
We just implemented a simple filter, right?

00:00:05.655 --> 00:00:10.910
So which will only send the response with the user ID and the user name.

00:00:10.910 --> 00:00:14.280
The pan number is not available in the response because we

00:00:14.280 --> 00:00:18.750
used JSON ignore properties here.

00:00:18.750 --> 00:00:20.774
Okay, think about this scenario.

00:00:20.774 --> 00:00:23.580
So we have one method here.

00:00:23.580 --> 00:00:25.155
It doesn't matter how many mothers we're here.

00:00:25.155 --> 00:00:27.960
Let's say we have five different materials here and each,

00:00:27.960 --> 00:00:31.515
and every one of them out there using USDA details, DTO.

00:00:31.515 --> 00:00:33.105
So what will happen?

00:00:33.105 --> 00:00:35.360
So it doesn't matter which method is called.

00:00:35.360 --> 00:00:38.645
It always in the response without the pan number.

00:00:38.645 --> 00:00:41.420
Actually, that's not the right approach, right?

00:00:41.420 --> 00:00:42.650
It's kind of hard coding, right?

00:00:42.650 --> 00:00:45.140
So this is the hardcode filtering.

00:00:45.140 --> 00:00:48.380
So we can call them as a static filtering.

00:00:48.380 --> 00:00:50.855
So now think about this scenario.

00:00:50.855 --> 00:00:52.130
If I call this method,

00:00:52.130 --> 00:00:54.845
I have to get the user ID and the user name.

00:00:54.845 --> 00:00:57.320
But if I'm calling from the different method,

00:00:57.320 --> 00:01:01.055
I need to receive only the username and the pan number.

00:01:01.055 --> 00:01:02.255
How we can do that.

00:01:02.255 --> 00:01:03.980
But if you are doing in this way,

00:01:03.980 --> 00:01:06.470
JSON ignore properties that is not going to be possible.

00:01:06.470 --> 00:01:11.870
So we are going to write a static filter on our hurry,

00:01:11.870 --> 00:01:15.840
we are going to implement the dynamic filter now.

00:01:16.600 --> 00:01:21.290
Okay, So let's make us simple changes in the filter 1.

00:01:21.290 --> 00:01:24.470
So what I'm gonna do, I'm gonna keep this as a separate statement here.

00:01:24.470 --> 00:01:27.200
Three dot.

00:01:27.200 --> 00:01:29.390
Let's create a new variable for that.

00:01:29.390 --> 00:01:31.650
What's happening here?

00:01:34.570 --> 00:01:37.325
Okay, So now we have the details.

00:01:37.325 --> 00:01:39.920
Sla, this is a list of user sign.

00:01:39.920 --> 00:01:41.330
Turn off my dad calling interconnect one,

00:01:41.330 --> 00:01:43.025
I'm going to return us a list of details.

00:01:43.025 --> 00:01:44.915
Okay, so now what do we need to do?

00:01:44.915 --> 00:01:46.295
The first thing which we need to do,

00:01:46.295 --> 00:01:48.320
we have to create a filter which will

00:01:48.320 --> 00:01:52.925
only send the response with the user ID and the user name.

00:01:52.925 --> 00:01:56.165
And then we have to add that particular filter in Dover,

00:01:56.165 --> 00:02:01.880
freedom air-filled repro it is global filter handler,

00:02:01.880 --> 00:02:03.890
which means you can write multiple property,

00:02:03.890 --> 00:02:06.560
you can write multiple filters, add, add.

00:02:06.560 --> 00:02:08.120
After that, you have to add,

00:02:08.120 --> 00:02:10.160
you will filter into our filter provider.

00:02:10.160 --> 00:02:12.560
You can call them as a global problem and if something like that.

00:02:12.560 --> 00:02:13.925
So now what I'm gonna do,

00:02:13.925 --> 00:02:17.300
I'm gonna create a simple filter yet,

00:02:17.300 --> 00:02:20.735
so I'm going to use the simple bean property filter,

00:02:20.735 --> 00:02:23.150
and I'm going to call it as a filter.

00:02:23.150 --> 00:02:27.515
So simple main filter property dot

00:02:27.515 --> 00:02:31.294
the method which I'm going to use filter out all except,

00:02:31.294 --> 00:02:34.610
and we have to provide the attributes yet.

00:02:34.610 --> 00:02:38.300
So what are the elements you need to send in the response, the one and the elements.

00:02:38.300 --> 00:02:41.330
So I'm going to pass the user ID,

00:02:41.330 --> 00:02:44.600
and I'm going to pass the user name.

00:02:44.600 --> 00:02:47.180
So which means whenever this method called,

00:02:47.180 --> 00:02:50.120
we will only send the user ID, use an immune response.

00:02:50.120 --> 00:02:51.725
That is what we did before as well.

00:02:51.725 --> 00:02:54.500
But that was kind of a static filtering.

00:02:54.500 --> 00:02:55.820
So now we have the filter.

00:02:55.820 --> 00:02:57.200
The next thing we need to do,

00:02:57.200 --> 00:03:00.020
we have to add the filter into our filter provider.

00:03:00.020 --> 00:03:06.395
So we can now create filter provider.

00:03:06.395 --> 00:03:10.625
Maybe I can call it the filters is equal to.

00:03:10.625 --> 00:03:12.755
And now I'm going to use this simple,

00:03:12.755 --> 00:03:15.950
simple filter provider here because we're going

00:03:15.950 --> 00:03:19.310
to use this simple bean property field there.

00:03:19.310 --> 00:03:23.315
So what I'm gonna do, I'm gonna create a new symbol filter provider,

00:03:23.315 --> 00:03:27.200
simple provider and add filter.

00:03:27.200 --> 00:03:30.110
So here is the important thing which we need to do.

00:03:30.110 --> 00:03:32.945
So simple program that accepts two inputs.

00:03:32.945 --> 00:03:36.470
The first one is what is that?

00:03:36.470 --> 00:03:37.910
That is the filter name.

00:03:37.910 --> 00:03:40.715
And second on is what is the filter?

00:03:40.715 --> 00:03:43.385
So this is a filter which already added here,

00:03:43.385 --> 00:03:45.845
but here we need to provide the details.

00:03:45.845 --> 00:03:47.480
So what is it filters you want to use.

00:03:47.480 --> 00:03:50.570
So for each and every filter we can name it, right?

00:03:50.570 --> 00:03:53.600
So I'm going to use user details,

00:03:53.600 --> 00:03:55.160
but how it is referred.

00:03:55.160 --> 00:03:57.335
Okay, That's the, that's the most important thing.

00:03:57.335 --> 00:04:00.785
So we're going to remove this one because we are not going to use the JSON.

00:04:00.785 --> 00:04:02.990
Ignore properties here.

00:04:02.990 --> 00:04:08.109
So Insert I'm going to use at JSON,

00:04:08.109 --> 00:04:09.970
JSON and not that one.

00:04:09.970 --> 00:04:14.740
We're going to use the name JSON filter, right?

00:04:14.740 --> 00:04:17.095
So JSON filter.

00:04:17.095 --> 00:04:19.855
So instead the filter you have to provide a name,

00:04:19.855 --> 00:04:21.130
DC, the filter name.

00:04:21.130 --> 00:04:23.635
And this is a filter which we are referring here.

00:04:23.635 --> 00:04:28.285
Okay, so now we have a filter and that filter added into our global filters.

00:04:28.285 --> 00:04:30.565
The next thing, what do we need to do?

00:04:30.565 --> 00:04:34.180
We need to create a checksum value because

00:04:34.180 --> 00:04:37.735
the axon is the one that's taken care of the response spot, right?

00:04:37.735 --> 00:04:39.490
Getting the data and converting them.

00:04:39.490 --> 00:04:40.690
So now what we're gonna do,

00:04:40.690 --> 00:04:43.730
we're gonna use the new mapping Jackson value.

00:04:43.730 --> 00:04:47.140
So new map, sorry,

00:04:47.140 --> 00:04:57.905
mapping jack SON, value, tax on value.

00:04:57.905 --> 00:05:00.050
And here you need to pass.

00:05:00.050 --> 00:05:01.940
What is the data we have?

00:05:01.940 --> 00:05:05.240
So the data we have which is available in the details.

00:05:05.240 --> 00:05:06.890
So this is our data.

00:05:06.890 --> 00:05:09.840
And let's create a variable here.

00:05:09.850 --> 00:05:14.165
Okay, so I just created a mapping file which will map the data.

00:05:14.165 --> 00:05:19.910
Okay, so now we have the filter and we have added the filter into our global provider,

00:05:19.910 --> 00:05:21.230
which means a filter parameter.

00:05:21.230 --> 00:05:24.950
And then we have the mapping Jackson value,

00:05:24.950 --> 00:05:26.735
which will do the conversion part.

00:05:26.735 --> 00:05:27.425
Okay?

00:05:27.425 --> 00:05:31.025
But still we are returning the list of user details.

00:05:31.025 --> 00:05:32.420
You're attending live stuff, you use it,

00:05:32.420 --> 00:05:35.000
it is, the response still remains the same.

00:05:35.000 --> 00:05:38.480
But what do we need to do instead of list of user data,

00:05:38.480 --> 00:05:41.030
we need to send the mapping.

00:05:41.030 --> 00:05:43.010
So this is the mapping.

00:05:43.010 --> 00:05:44.675
So let's copy paste it here.

00:05:44.675 --> 00:05:51.095
At the same time, you need to modify your output signature aswell.

00:05:51.095 --> 00:05:55.565
So now this method takes as a dynamic filter here,

00:05:55.565 --> 00:05:58.295
which will access only username and the user ID.

00:05:58.295 --> 00:05:59.735
So now what do we need to do?

00:05:59.735 --> 00:06:02.130
Just read out your application.

00:06:02.470 --> 00:06:05.015
Might take a few seconds,

00:06:05.015 --> 00:06:07.040
or replication is getting started,

00:06:07.040 --> 00:06:08.600
it might take a few more seconds.

00:06:08.600 --> 00:06:10.290
A G9.

00:06:13.120 --> 00:06:18.049
Okay, so the server is up and our near the port number 81.

00:06:18.049 --> 00:06:19.835
Let's go back to the Postman.

00:06:19.835 --> 00:06:22.700
So this is a method which we call write C.

00:06:22.700 --> 00:06:25.530
Now what I'm gonna do, I'm gonna hit the same.

00:06:26.050 --> 00:06:32.105
The definition, simple type class, Jodie Foster, external.

00:06:32.105 --> 00:06:33.560
Okay, So what is wrong?

00:06:33.560 --> 00:06:37.730
Let's go back to our monitor and see what happened.

00:06:37.730 --> 00:06:44.015
Okay, So we are just passing the mapping Jetson value and filter.

00:06:44.015 --> 00:06:46.295
Okay, everything looks fine.

00:06:46.295 --> 00:06:47.900
Okay, That's a minor mistake.

00:06:47.900 --> 00:06:49.100
We just create a mapping read,

00:06:49.100 --> 00:06:51.500
but mapping has the value.

00:06:51.500 --> 00:06:55.085
But in the mapping unit add the filter as well, right?

00:06:55.085 --> 00:06:57.350
Or else that will not apply.

00:06:57.350 --> 00:07:00.320
So set filter.

00:07:00.320 --> 00:07:04.700
And we had a filter already in place so it save it and

00:07:04.700 --> 00:07:09.540
recompiled on wartime and reach either server again.

00:07:09.730 --> 00:07:12.755
Serous getting starter.

00:07:12.755 --> 00:07:14.810
Okay, so that was, that was shot down.

00:07:14.810 --> 00:07:18.305
Let's go back to our Postman and lists triggered that equals to.

00:07:18.305 --> 00:07:22.940
Again. See we've got the same output,

00:07:22.940 --> 00:07:25.295
but this time it's not a static filtering.

00:07:25.295 --> 00:07:27.200
We are using dynamic filtering.

00:07:27.200 --> 00:07:30.665
Let's go back and let's try to implement another method.

00:07:30.665 --> 00:07:33.545
Okay, so this mother will written the user identity, username,

00:07:33.545 --> 00:07:35.510
and I want to write a one more filter which will

00:07:35.510 --> 00:07:38.015
return only the username and the pan number.

00:07:38.015 --> 00:07:39.980
We just simply copy the method.

00:07:39.980 --> 00:07:41.915
We don't have to read it then that foot again,

00:07:41.915 --> 00:07:45.244
and let's modify the mapping MSL 52.

00:07:45.244 --> 00:07:47.570
And I'm going to modify the name S will filter two.

00:07:47.570 --> 00:07:49.415
And here.

00:07:49.415 --> 00:07:53.900
So let's modify the pan number and the username.

00:07:53.900 --> 00:07:56.690
So this will return the user ID username and

00:07:56.690 --> 00:08:00.170
this filled candy pan number and the user name.

00:08:00.170 --> 00:08:03.690
Call it save it literally sort of application again.

00:08:04.810 --> 00:08:08.100
Application is getting started.

00:08:08.500 --> 00:08:10.880
Okay, so our application is started.

00:08:10.880 --> 00:08:12.350
Now let's go back to Postman.

00:08:12.350 --> 00:08:15.815
All we need to do, just try the same API ones.

00:08:15.815 --> 00:08:16.695
Okay?

00:08:16.695 --> 00:08:19.010
It has the user ID and the username.

00:08:19.010 --> 00:08:21.950
Let's try the filter 2 here.

00:08:21.950 --> 00:08:23.795
So you want to happen.

00:08:23.795 --> 00:08:25.520
We got the username and the pan number.

00:08:25.520 --> 00:08:27.755
We don't see the user ID here.

00:08:27.755 --> 00:08:32.764
So this is how you need to implement the dynamic filter.

00:08:32.764 --> 00:08:35.580
Okay? Thank you.
