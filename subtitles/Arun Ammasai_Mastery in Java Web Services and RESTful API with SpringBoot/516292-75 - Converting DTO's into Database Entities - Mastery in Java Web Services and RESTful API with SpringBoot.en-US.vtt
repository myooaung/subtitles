WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.050
Hello everyone.

00:00:01.050 --> 00:00:01.995
Welcome back.

00:00:01.995 --> 00:00:04.740
So we're going to communicate to the real-time database,

00:00:04.740 --> 00:00:06.720
which is a MySQL database.

00:00:06.720 --> 00:00:08.835
So I'm going to use the MySQL database.

00:00:08.835 --> 00:00:11.100
First thing we need to add the dependencies.

00:00:11.100 --> 00:00:13.590
So go to Palm dot xml file.

00:00:13.590 --> 00:00:16.229
And you need to add these dependency,

00:00:16.229 --> 00:00:18.750
MySQL, MySQL connector, Java.

00:00:18.750 --> 00:00:20.790
So once you added the dependency,

00:00:20.790 --> 00:00:22.215
the next thing which we need to do,

00:00:22.215 --> 00:00:24.600
update the Maven dependencies here.

00:00:24.600 --> 00:00:26.235
That is must.

00:00:26.235 --> 00:00:28.420
Okay, what are the next thing which we need to do?

00:00:28.420 --> 00:00:32.940
Let's go back to our application dot properties file here.

00:00:33.580 --> 00:00:40.430
Okay, so here we have the the previous project information.

00:00:40.430 --> 00:00:45.740
Now what we need to do is we need to provide the database information,

00:00:45.740 --> 00:00:47.990
but not the highest database information we need to

00:00:47.990 --> 00:00:51.185
provide our original database information.

00:00:51.185 --> 00:00:57.560
So in obligation properties we have to provide the the MySQL database.

00:00:57.560 --> 00:01:00.950
So this is the information and this is my database.

00:01:00.950 --> 00:01:03.710
And this may you or you might think something

00:01:03.710 --> 00:01:07.190
different here because these are not local host databases,

00:01:07.190 --> 00:01:08.780
because this database server,

00:01:08.780 --> 00:01:13.150
which is located in my amazon workspace.

00:01:13.150 --> 00:01:13.705
Okay?

00:01:13.705 --> 00:01:16.405
So and this my username and my password,

00:01:16.405 --> 00:01:20.050
and don't worry about you can use the password just for testing purpose.

00:01:20.050 --> 00:01:23.590
And I will share this information in their pro in the resources section.

00:01:23.590 --> 00:01:25.915
You can use it for testing purpose.

00:01:25.915 --> 00:01:26.950
Okay.

00:01:26.950 --> 00:01:32.080
So I just added the application at properties and I just add a d permanent information.

00:01:32.080 --> 00:01:35.335
What are the next thing we need to add the department as well?

00:01:35.335 --> 00:01:39.130
Correct. So we have the employee and we have two tables, right?

00:01:39.130 --> 00:01:41.380
Employee has internal communication with a department.

00:01:41.380 --> 00:01:47.785
So I created a DTO here which contains the long ID and a name, right?

00:01:47.785 --> 00:01:49.540
So the first thing which we need to do,

00:01:49.540 --> 00:01:51.055
Let's go back, DO, DO, DO.

00:01:51.055 --> 00:01:53.625
These are all normally dues.

00:01:53.625 --> 00:01:56.030
We have to convert them into an entity.

00:01:56.030 --> 00:01:58.025
So let's remove this one.

00:01:58.025 --> 00:01:59.930
The first thing which we need to do,

00:01:59.930 --> 00:02:01.940
sorry, not this one.

00:02:01.940 --> 00:02:04.355
We had to go to the D2L employee.

00:02:04.355 --> 00:02:05.765
And here what we need to do,

00:02:05.765 --> 00:02:09.710
we need to provide the annotation because I'm going to work with the table.

00:02:09.710 --> 00:02:10.940
I'm in a real-time database,

00:02:10.940 --> 00:02:13.310
so we have to make this an entity.

00:02:13.310 --> 00:02:18.635
So in our database we have the A-team say same table name which is at an employee.

00:02:18.635 --> 00:02:21.800
So you don't have to explicitly provide a table name here.

00:02:21.800 --> 00:02:25.160
And then here employed,

00:02:25.160 --> 00:02:28.999
let's modify employee ID to ID for clear understanding.

00:02:28.999 --> 00:02:33.260
And the employee ID is going to be my primary key.

00:02:33.260 --> 00:02:38.900
So we need to annotate it with the generated value and add generated value.

00:02:38.900 --> 00:02:40.880
And here is a simple difference here.

00:02:40.880 --> 00:02:42.770
So I'm going to use generator is equal

00:02:42.770 --> 00:02:47.960
to the reason why I'm going to use a generator value here.

00:02:47.960 --> 00:02:51.590
Let's go back to our database here,

00:02:51.590 --> 00:02:54.830
let me show you our employee table.

00:02:54.830 --> 00:03:00.710
Alter table syntax here for our primary key,

00:03:00.710 --> 00:03:03.335
I used auto increment.

00:03:03.335 --> 00:03:05.540
So since I used auto increment,

00:03:05.540 --> 00:03:07.670
you don't need to pass any ID.

00:03:07.670 --> 00:03:12.889
Are any data for your primary key ID automatically created in the back-end.

00:03:12.889 --> 00:03:17.075
So I'm going to provide to generation type here.

00:03:17.075 --> 00:03:19.490
I'm not going to use auto,

00:03:19.490 --> 00:03:25.100
I'm going to use something called identity because it'll identify based on the database.

00:03:25.100 --> 00:03:29.960
Because database will provide the information for the primary key.

00:03:29.960 --> 00:03:33.905
Okay, so we get on to what is already a generation type, okay?

00:03:33.905 --> 00:03:34.940
So it's non-degenerate, right?

00:03:34.940 --> 00:03:37.325
It's the strategy.

00:03:37.325 --> 00:03:41.480
So the strategy, how I want to create my primary key value.

00:03:41.480 --> 00:03:44.240
And again, I'm going to keep everything is remains the same

00:03:44.240 --> 00:03:47.330
because the field names are same in the database as well.

00:03:47.330 --> 00:03:48.740
So the one living what I'm gonna do,

00:03:48.740 --> 00:03:49.940
I'm gonna remove all the getters and

00:03:49.940 --> 00:03:53.210
setters because I'm going to recreate them one more time.

00:03:53.210 --> 00:03:55.564
So first thing, let's create the contractor.

00:03:55.564 --> 00:04:00.650
Since it is a GP, we have to create our parameters constructor the same time we

00:04:00.650 --> 00:04:05.780
need to create the default construct that as well.

00:04:05.780 --> 00:04:07.220
And the next thing which we need to do,

00:04:07.220 --> 00:04:12.020
Let's create the getters and setters for all of them.

00:04:12.020 --> 00:04:17.180
Okay? So we have to do the same thing forever.

00:04:17.180 --> 00:04:19.100
Departments as well, right?

00:04:19.100 --> 00:04:20.990
That's the next thing which we need to do, right?

00:04:20.990 --> 00:04:21.620
Okay.

00:04:21.620 --> 00:04:24.395
Right. So let's go back to department and let's

00:04:24.395 --> 00:04:27.380
mark this as the entity. That's the first step.

00:04:27.380 --> 00:04:29.960
And then the second thing,

00:04:29.960 --> 00:04:34.340
mark your ID as a primary key rate.

00:04:34.340 --> 00:04:36.245
So this is going to be ID here.

00:04:36.245 --> 00:04:40.320
And at generated value.

00:04:40.390 --> 00:04:42.965
And I'm going to use a strategy here.

00:04:42.965 --> 00:04:49.730
J to j is equal to generation type identity.

00:04:49.730 --> 00:04:52.310
Okay? So next thing, book name.

00:04:52.310 --> 00:04:54.230
I don't think we have to modify anything

00:04:54.230 --> 00:04:57.110
because it's pretty much the same in the database as well.

00:04:57.110 --> 00:05:01.775
Right? So let's see here that's the same endeavors as well.

00:05:01.775 --> 00:05:07.520
So employee 100 to give it as a book name,

00:05:07.520 --> 00:05:09.710
it's just not a book nears the department M rate.

00:05:09.710 --> 00:05:11.900
So depart meant.

00:05:11.900 --> 00:05:16.325
Okay, so now all we need to do is just create the constructor.

00:05:16.325 --> 00:05:21.665
Again. We're going to create the default constructor and the parameterized constructor.

00:05:21.665 --> 00:05:24.095
So let's create a constructor.

00:05:24.095 --> 00:05:30.455
And let's create one more controller without anything,

00:05:30.455 --> 00:05:32.060
which means our default constructor.

00:05:32.060 --> 00:05:33.860
Okay, so the next thing,

00:05:33.860 --> 00:05:36.570
Let's create the getters and setters.

00:05:37.870 --> 00:05:40.670
Okay, so now we created an entity,

00:05:40.670 --> 00:05:43.310
but we did not create the relationship between

00:05:43.310 --> 00:05:46.850
the employee and the department that we need to

00:05:46.850 --> 00:05:50.000
create dense the most important thing or else you will not be able to

00:05:50.000 --> 00:05:53.465
retrieve the information based on the employee ID.

00:05:53.465 --> 00:05:55.115
So first thing, let's go to employee,

00:05:55.115 --> 00:05:56.855
and here we're going to create.

00:05:56.855 --> 00:06:01.010
So per employee, he might have multiple department responsibility.

00:06:01.010 --> 00:06:06.720
So I'm going to create a rate and it's going to be a list of departments.

00:06:08.860 --> 00:06:14.190
Department, and I'm gonna call that our departments.

00:06:15.880 --> 00:06:21.275
Okay. And this is going to be a one-to-many because one person,

00:06:21.275 --> 00:06:24.770
one employee might have multiple departments responsibility.

00:06:24.770 --> 00:06:32.990
So it is going to be one one-to-many and we need to provide the map in him.

00:06:32.990 --> 00:06:39.590
So how would this map with the department entity?

00:06:39.590 --> 00:06:43.085
So we haven't mentioned in our department, but before,

00:06:43.085 --> 00:06:49.520
let's create the getters and setters here for the newly creator departments.

00:06:49.520 --> 00:06:53.615
Okay, Done. So now let's go back to our department here.

00:06:53.615 --> 00:06:56.045
So you never employee.

00:06:56.045 --> 00:06:58.655
It is a one-to-many,

00:06:58.655 --> 00:07:00.590
but in book, it isn't.

00:07:00.590 --> 00:07:02.420
I mean, it's in our department.

00:07:02.420 --> 00:07:05.630
It's many-to-one because we have

00:07:05.630 --> 00:07:09.950
multiple departments which belongs to a single person, gray.

00:07:09.950 --> 00:07:11.900
So let's do that as well.

00:07:11.900 --> 00:07:15.710
So here I'm going to create something like private.

00:07:15.710 --> 00:07:21.695
And I'm going to mention as an employee, employee.

00:07:21.695 --> 00:07:25.895
And then I'm going to mark this ASA many-to-one.

00:07:25.895 --> 00:07:28.340
Many-to-one.

00:07:28.340 --> 00:07:29.285
Okay.

00:07:29.285 --> 00:07:31.670
So and I'm going to provide what is

00:07:31.670 --> 00:07:34.655
the type I'm going to fit the information is going to be lazy load.

00:07:34.655 --> 00:07:39.290
So whenever I want this information widely that time this data will be,

00:07:39.290 --> 00:07:42.215
I mean this database called the initiator.

00:07:42.215 --> 00:07:46.770
And then I'm going to use the JSON ignorant to avoid multiple results.

00:07:46.930 --> 00:07:52.910
Okay, so now able to think in place because we have added the mapping,

00:07:52.910 --> 00:07:59.510
so we need to provide the employee map naming our employee here.

00:07:59.510 --> 00:08:02.885
Okay, So now all set the next thing which we need to do.

00:08:02.885 --> 00:08:10.860
We need to write a method and execute data services to see how it is working.
