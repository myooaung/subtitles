WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.265
Hey everyone, welcome back.

00:00:02.265 --> 00:00:06.705
So now we're going to talk about how we can store our employee.

00:00:06.705 --> 00:00:08.070
So far storing an employee,

00:00:08.070 --> 00:00:10.710
which means we're going to try to insert something, right?

00:00:10.710 --> 00:00:12.825
So, so far we've tried they get mapping.

00:00:12.825 --> 00:00:15.015
Let's open the postman and show you.

00:00:15.015 --> 00:00:17.235
So whenever you try the gate mapping,

00:00:17.235 --> 00:00:19.635
you will get the status code 200.

00:00:19.635 --> 00:00:24.420
200 means the phage operation is completely sites of soil.

00:00:24.420 --> 00:00:26.295
And when you're doing insert operation,

00:00:26.295 --> 00:00:28.140
it has to give you success,

00:00:28.140 --> 00:00:30.269
but the state is going to be a different.

00:00:30.269 --> 00:00:32.320
So we have to handle it in a proper way.

00:00:32.320 --> 00:00:34.325
So let's go back door integer here.

00:00:34.325 --> 00:00:42.035
So now I'm going to write a method which will store an employee into a existing list for,

00:00:42.035 --> 00:00:44.990
for now, because we're going to use the database later point of time.

00:00:44.990 --> 00:00:47.045
So let's write a method.

00:00:47.045 --> 00:00:54.230
And this is going to be a bleak and which will return anyway, it's, it's a void, right?

00:00:54.230 --> 00:00:55.595
So white.

00:00:55.595 --> 00:00:59.735
And I'm going to name them with the rest to save employee.

00:00:59.735 --> 00:01:04.820
And the input is going to be employee AMP.

00:01:04.820 --> 00:01:07.100
So the next thing all we need to do,

00:01:07.100 --> 00:01:09.515
just do the same here.

00:01:09.515 --> 00:01:12.005
But instead of calling this method,

00:01:12.005 --> 00:01:14.555
we're going to call the save employee.

00:01:14.555 --> 00:01:16.070
Anyway, the metadata which will,

00:01:16.070 --> 00:01:21.230
may not available in our D0 because we haven't done the implementation so far.

00:01:21.230 --> 00:01:25.025
So let's go back and create a method in our employ d o.

00:01:25.025 --> 00:01:34.700
And all we need to do is list dot add because the list is available here.

00:01:34.700 --> 00:01:38.915
Basically we are, I'm trying to add an employee of an existing list.

00:01:38.915 --> 00:01:42.800
So list dot add here and we have the input employee.

00:01:42.800 --> 00:01:46.415
And we are starting into here, right?

00:01:46.415 --> 00:01:48.980
And then I'm going to return it.

00:01:48.980 --> 00:01:52.590
So do we need to return anything?

00:01:52.600 --> 00:01:55.100
Okay, for now, we don't need to return anything.

00:01:55.100 --> 00:01:59.700
So let's simply call us Award matter.

00:02:01.300 --> 00:02:04.880
So here I'm going to remove so wide.

00:02:04.880 --> 00:02:05.810
Okay?

00:02:05.810 --> 00:02:10.055
So list dot add method and we're adding the same,

00:02:10.055 --> 00:02:15.290
but how we can perform the employee ID,

00:02:15.290 --> 00:02:16.370
so we don't want that right.

00:02:16.370 --> 00:02:20.750
So for now what I'm gonna do employee dot set employed anyway,

00:02:20.750 --> 00:02:23.540
we are going to generate some random numbers.

00:02:23.540 --> 00:02:25.145
So instead, what I'm going to do,

00:02:25.145 --> 00:02:31.100
I'm going to take the size of the list and then adding plus 12 eight.

00:02:31.100 --> 00:02:32.750
So if you have for elemental,

00:02:32.750 --> 00:02:34.175
you're trying to insert one now,

00:02:34.175 --> 00:02:35.540
it will be inserted the fifth element,

00:02:35.540 --> 00:02:37.745
the employee ID becomes five.

00:02:37.745 --> 00:02:39.095
Right?

00:02:39.095 --> 00:02:43.460
Okay, let's save it and go back or controller and unimportant thing is here,

00:02:43.460 --> 00:02:46.670
we have to provide its supposed mapping.

00:02:46.670 --> 00:02:54.065
And the URL, it's pretty much is going to be the same employees.

00:02:54.065 --> 00:02:58.280
And I'm going to use another literal here as a user.

00:02:58.280 --> 00:03:00.545
So whenever this particular user hates,

00:03:00.545 --> 00:03:02.885
you know what happened, this method will be called.

00:03:02.885 --> 00:03:06.590
But do you think our rest application,

00:03:06.590 --> 00:03:07.970
you'll understand this input?

00:03:07.970 --> 00:03:11.210
No, it will not because it's normal Java Input IN0 to

00:03:11.210 --> 00:03:14.989
tell my application this is my request to Bodhi,

00:03:14.989 --> 00:03:18.005
this particular object condensed my request body.

00:03:18.005 --> 00:03:22.130
So all we need to do because when you're passing a single input,

00:03:22.130 --> 00:03:23.150
we use path variable,

00:03:23.150 --> 00:03:25.310
but here I'm passing the entire body.

00:03:25.310 --> 00:03:32.820
So I had to use a request body here.

00:03:33.190 --> 00:03:38.720
So now it's all done. Let's resize application and stop on.

00:03:38.720 --> 00:03:43.310
Rina. Might take a few seconds.

00:03:43.310 --> 00:03:48.665
So applications getting started or just give it a few more seconds.

00:03:48.665 --> 00:03:55.145
Okay. Okay.

00:03:55.145 --> 00:03:59.210
So our Tomcat stand up successfully on the port number eight or 81.

00:03:59.210 --> 00:04:00.890
Okay, so what is a control?

00:04:00.890 --> 00:04:03.995
So we need to hit this particular URL, correct?

00:04:03.995 --> 00:04:07.325
So let's go back and copy this.

00:04:07.325 --> 00:04:10.130
And it's not replace this same URL again,

00:04:10.130 --> 00:04:12.800
let's create a new one here and make sure,

00:04:12.800 --> 00:04:14.015
and this is going to be,

00:04:14.015 --> 00:04:15.380
this is what happened most of the time.

00:04:15.380 --> 00:04:20.000
See, I'm pasting the URL here and then I'm passing some inputs here.

00:04:20.000 --> 00:04:22.610
And you won't be able to find out this is

00:04:22.610 --> 00:04:26.615
a place value and to provide the input as a JSON.

00:04:26.615 --> 00:04:30.255
And then you might think how I need to pass, I suggest,

00:04:30.255 --> 00:04:33.334
I don't know how to generate a JSON simply,

00:04:33.334 --> 00:04:35.255
you can copy it from here.

00:04:35.255 --> 00:04:38.345
We have single employment again copied here.

00:04:38.345 --> 00:04:40.160
Or if you don't know how to do that,

00:04:40.160 --> 00:04:43.250
all you need to do just go back and body and to JSON,

00:04:43.250 --> 00:04:46.610
always start the open-end curly braces, right?

00:04:46.610 --> 00:04:49.265
So how do I mentioned the element,

00:04:49.265 --> 00:04:50.840
the proper key and a value,

00:04:50.840 --> 00:04:52.745
but that is how our JSON looks like.

00:04:52.745 --> 00:04:54.410
This is a key and this is a value.

00:04:54.410 --> 00:04:56.420
So how I'm going to manipulate that.

00:04:56.420 --> 00:05:01.490
So what, how they're defining this is the employee ID is coming from my employee DTO.

00:05:01.490 --> 00:05:04.670
For that, you need to go to your employee DTO.

00:05:04.670 --> 00:05:06.605
If you take a look at it, Employee ID,

00:05:06.605 --> 00:05:09.470
which matches with the employee ID and name,

00:05:09.470 --> 00:05:11.645
which matches with the name into JSON,

00:05:11.645 --> 00:05:15.470
an e-mail which is matches with the employee email here.

00:05:15.470 --> 00:05:21.305
So you can simply copy paste this structure and you can paste it in the new window here.

00:05:21.305 --> 00:05:25.520
All you need to do, you don't need to pass any employee ID, right?

00:05:25.520 --> 00:05:28.730
Because remember we generating the employee ID,

00:05:28.730 --> 00:05:32.450
we some random data based on the list size, right?

00:05:32.450 --> 00:05:35.600
And I'm going to provide something like Jack here.

00:05:35.600 --> 00:05:42.800
The name is track and the main area is going to be Jack dot gmail.com.

00:05:42.800 --> 00:05:46.220
But the problem and the moment I hit Send, see what happened,

00:05:46.220 --> 00:05:49.730
It's a bad request and it says four hundred and four hundred minutes,

00:05:49.730 --> 00:05:51.050
it's a bad request.

00:05:51.050 --> 00:05:53.775
There are two important things which you notify here.

00:05:53.775 --> 00:05:57.640
This is a post, not the right. And see what we're doing.

00:05:57.640 --> 00:06:00.010
We're hitting with the gate,

00:06:00.010 --> 00:06:01.090
which is the first thing,

00:06:01.090 --> 00:06:03.895
that is the first thing is wrong.

00:06:03.895 --> 00:06:08.860
So first we modify the post method and then we click hit C.

00:06:08.860 --> 00:06:09.580
What happened?

00:06:09.580 --> 00:06:11.545
You got two hundred,

00:06:11.545 --> 00:06:14.170
two hundred million fetching processes such as well,

00:06:14.170 --> 00:06:16.645
but for inserting all, so I'm getting to a 100.

00:06:16.645 --> 00:06:20.005
So we will try to change that later.

00:06:20.005 --> 00:06:21.415
But for now it is success.

00:06:21.415 --> 00:06:25.060
How do you validate whether the data has been inserted successfully?

00:06:25.060 --> 00:06:27.970
We can go back to our previous service and we can use

00:06:27.970 --> 00:06:31.420
the get all employees always see what happened.

00:06:31.420 --> 00:06:36.660
Now we've got a new employee here as employee is afforded the reason why it is four.

00:06:36.660 --> 00:06:39.110
One, 23, we already have a three employee,

00:06:39.110 --> 00:06:42.080
so we have the size of a list and add one.

00:06:42.080 --> 00:06:46.115
So four is my another employee.

00:06:46.115 --> 00:06:47.525
Right?

00:06:47.525 --> 00:06:50.600
Okay, so in the next example, what you're gonna do,

00:06:50.600 --> 00:06:55.400
what will happen if my employer is not exists when you're trying to fit some information,

00:06:55.400 --> 00:06:57.170
how we're going to have handled the exception.

00:06:57.170 --> 00:06:59.520
We'll talk about that in the next video.
