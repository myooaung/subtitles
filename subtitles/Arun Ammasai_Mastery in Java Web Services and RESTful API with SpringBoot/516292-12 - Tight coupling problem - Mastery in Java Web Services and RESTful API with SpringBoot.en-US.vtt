WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.130
Hello everyone, Welcome back.

00:00:02.130 --> 00:00:05.715
So in this example we're going to explore what is a tight coupling issue.

00:00:05.715 --> 00:00:10.275
So let's create a program to see what is a tight coupling issue.

00:00:10.275 --> 00:00:14.910
And then we'll create another program to resolve that tight coupling issues.

00:00:14.910 --> 00:00:16.650
So what I'm trying to do now,

00:00:16.650 --> 00:00:19.575
I'm going to create an interface which is called as a job.

00:00:19.575 --> 00:00:22.860
And I'm gonna implement the same interface into multiple profession.

00:00:22.860 --> 00:00:26.565
And using that, I'm going to create the aid coupling issue here.

00:00:26.565 --> 00:00:29.565
So the first thing I'm going to create an interface,

00:00:29.565 --> 00:00:31.200
so what I'm gonna do,

00:00:31.200 --> 00:00:38.610
just create a new package here and we can simply call them ASA coupling, right?

00:00:38.610 --> 00:00:41.750
So right plane.

00:00:41.750 --> 00:00:44.555
I'm going to create all the class files inside the tight coupling.

00:00:44.555 --> 00:00:46.835
So, um, the first thing,

00:00:46.835 --> 00:00:52.070
tight coupling problem I'm going to name the class is that I have coupling problem.

00:00:52.070 --> 00:00:57.680
This is the class value you're going to implement all about logics, L.

00:00:57.680 --> 00:00:58.130
Okay?

00:00:58.130 --> 00:01:02.615
So what are the next thing we need the intervene in an integrase, right?

00:01:02.615 --> 00:01:09.260
So what we can do, Let's create the interface and the presentation mode,

00:01:09.260 --> 00:01:11.480
so it should be easier to see.

00:01:11.480 --> 00:01:14.495
So let's create a new interface here.

00:01:14.495 --> 00:01:17.420
And the interface is going on called f and g o,

00:01:17.420 --> 00:01:24.990
and which contains only one method called Arthur void display.

00:01:27.010 --> 00:01:33.035
And then we'll have to create a multiple professions write like a doctor or engineer.

00:01:33.035 --> 00:01:35.179
So implement this particular interface.

00:01:35.179 --> 00:01:37.235
So I'm going to create a new classes here,

00:01:37.235 --> 00:01:38.810
and I'm going to call them ASA.

00:01:38.810 --> 00:01:40.580
First one is adopter and I'm going to

00:01:40.580 --> 00:01:45.980
create a first eyelid to implementing our interface here.

00:01:45.980 --> 00:01:51.090
So implements an interface which we have as a job.

00:01:51.730 --> 00:01:54.320
In then the moment do you do that,

00:01:54.320 --> 00:01:55.594
it will throw an exception.

00:01:55.594 --> 00:01:58.880
So eight, we are implementing the display method and I'm going to

00:01:58.880 --> 00:02:03.150
simply send a print a statement saying like I'm a doctor.

00:02:04.240 --> 00:02:09.620
So there's similar way I'm going to create a one more class here called as

00:02:09.620 --> 00:02:15.300
an engineer and which will implement the job.

00:02:16.150 --> 00:02:21.335
And let's unimplemented methods.

00:02:21.335 --> 00:02:26.130
And here I'm going to simply provide, I'm an engineer.

00:02:30.220 --> 00:02:33.050
Okay, so now we have everything and pasting

00:02:33.050 --> 00:02:35.870
our interface and we have the two professions.

00:02:35.870 --> 00:02:37.880
So now we'll create the problem.

00:02:37.880 --> 00:02:40.550
So we need to go to the tight coupling problem.

00:02:40.550 --> 00:02:44.310
And here what I'm gonna do, I'm gonna create an instance for my doctor.

00:02:45.790 --> 00:02:50.360
And I'm going to do the same thing for engineered SQL.

00:02:50.360 --> 00:02:56.180
Sorry, engineer.

00:02:56.180 --> 00:03:01.925
So the next thing, we're going to create the constructor using these two fields.

00:03:01.925 --> 00:03:05.820
And now I'm going to agree that one more method,

00:03:09.940 --> 00:03:14.675
public void, show data.

00:03:14.675 --> 00:03:18.830
So let's show the demo that basically you do.

00:03:18.830 --> 00:03:22.440
Print. What is sorry,

00:03:23.170 --> 00:03:28.670
dr dot display and less similar way engineer dot display.

00:03:28.670 --> 00:03:30.095
Now everything looks good.

00:03:30.095 --> 00:03:31.520
It's a perfect coding.

00:03:31.520 --> 00:03:33.110
We don't have any problem, right?

00:03:33.110 --> 00:03:34.535
We don't have any problem here.

00:03:34.535 --> 00:03:38.030
But let's try to render code and we'll see.

00:03:38.030 --> 00:03:40.520
So to run the code, what I'm gonna do,

00:03:40.520 --> 00:03:45.750
I'm going to open our coupling application here.

00:03:46.180 --> 00:03:49.400
And so here what I'm gonna do,

00:03:49.400 --> 00:03:52.760
we're gonna create the intense for our tight coupling.

00:03:52.760 --> 00:03:57.710
Okay? So I'm going to create the instance for tight coupling application,

00:03:57.710 --> 00:04:00.020
sorry, tight coupling problem, right?

00:04:00.020 --> 00:04:04.940
Like doubling problem, problem AC,

00:04:04.940 --> 00:04:10.790
new coupling problem which accepts two inputs as a doctor object.

00:04:10.790 --> 00:04:13.475
And the second one is the engineer object.

00:04:13.475 --> 00:04:15.170
So we're good.

00:04:15.170 --> 00:04:20.330
So all we need to do just using the object name called show data method.

00:04:20.330 --> 00:04:21.920
So now what I'm gonna do,

00:04:21.920 --> 00:04:25.290
just right-click any random at all.

00:04:25.480 --> 00:04:28.130
So it will earn it.

00:04:28.130 --> 00:04:29.690
We'll start with Spring application,

00:04:29.690 --> 00:04:32.360
then it will start executing these two lines.

00:04:32.360 --> 00:04:35.240
So let's explore this time.

00:04:35.240 --> 00:04:37.410
It might take a second.

00:04:38.350 --> 00:04:40.880
So the Spring starter,

00:04:40.880 --> 00:04:43.740
so it's going to execute our code here.

00:04:44.590 --> 00:04:47.190
Come on.

00:04:48.360 --> 00:04:50.905
Okay, so we've got our outcome.

00:04:50.905 --> 00:04:52.690
So I'm a doctor and I'm an engineer,

00:04:52.690 --> 00:04:54.714
which is we expected,

00:04:54.714 --> 00:04:57.670
but it'll everything looks clean.

00:04:57.670 --> 00:04:59.215
What would be the problem here?

00:04:59.215 --> 00:05:01.030
Okay, So let me tell you one thing.

00:05:01.030 --> 00:05:05.050
So we have tight coupling problem here and we have two professor here.

00:05:05.050 --> 00:05:06.580
But what will happen in the future?

00:05:06.580 --> 00:05:10.390
You might add one more professional like a photograph or a salesman.

00:05:10.390 --> 00:05:13.345
So basically what we'll do in that case,

00:05:13.345 --> 00:05:15.550
we have to modify the existing code,

00:05:15.550 --> 00:05:17.560
and that is not the right approach.

00:05:17.560 --> 00:05:23.890
So your code should be open for implementation and closed for modification.

00:05:23.890 --> 00:05:26.230
So that is called as the open closed principle in Java.

00:05:26.230 --> 00:05:30.060
I think they're in the design principles.

00:05:30.060 --> 00:05:32.405
So now we know the problem.

00:05:32.405 --> 00:05:34.115
So in the next video, what we're gonna do,

00:05:34.115 --> 00:05:39.110
we're going to resolve this issue using the loose coupling.

00:05:39.110 --> 00:05:42.360
Let's see. In the next video.
