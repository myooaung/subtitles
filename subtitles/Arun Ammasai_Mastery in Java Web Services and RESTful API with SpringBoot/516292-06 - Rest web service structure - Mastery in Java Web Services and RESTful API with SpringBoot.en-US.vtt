WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.295
Hello everyone, Welcome back.

00:00:02.295 --> 00:00:05.235
Let's talk about the rest API.

00:00:05.235 --> 00:00:11.130
So rest is nothing but it's at a representational state strength.

00:00:11.130 --> 00:00:15.945
We're, so that is the explanation for surveys.

00:00:15.945 --> 00:00:17.910
And how does it looks like?

00:00:17.910 --> 00:00:22.335
There is not much different when it comes to a service perspective.

00:00:22.335 --> 00:00:25.095
Again, just like a soap web services

00:00:25.095 --> 00:00:28.140
in rest also you have the obligation and we have web series,

00:00:28.140 --> 00:00:30.150
which means we have a client and our server.

00:00:30.150 --> 00:00:34.535
Your application will make a request and web services.

00:00:34.535 --> 00:00:36.560
You, what we have said, we said will consume

00:00:36.560 --> 00:00:39.650
the user information and it will process the data.

00:00:39.650 --> 00:00:45.065
And it will give the response back to the application or response back to the length.

00:00:45.065 --> 00:00:46.940
But one important thing,

00:00:46.940 --> 00:00:49.160
unlike our soap web services,

00:00:49.160 --> 00:00:55.520
rest APIs can accept a multiple types of input data.

00:00:55.520 --> 00:01:00.770
We know that slope will only accept the XML inputs and external outputs.

00:01:00.770 --> 00:01:03.130
But when it comes to a rest API,

00:01:03.130 --> 00:01:09.365
then we'll accept the XML data and JSON.

00:01:09.365 --> 00:01:11.825
Not only that, we have a much more into ALEKS up,

00:01:11.825 --> 00:01:17.600
up line text format and it will take file as an input.

00:01:17.600 --> 00:01:21.110
So we have a lot of different opportunity to use

00:01:21.110 --> 00:01:25.055
a different kind of data when it comes to a rest.

00:01:25.055 --> 00:01:29.300
So let's have a look at how the structure is looks like.

00:01:29.300 --> 00:01:35.750
So always we have a container which contains multiple rest APIs in it.

00:01:35.750 --> 00:01:39.680
So all the rest API is working over the Internet.

00:01:39.680 --> 00:01:42.530
And another important thing which we need to keep it in mind.

00:01:42.530 --> 00:01:47.150
There are multiple methods are available while creating this EPS.

00:01:47.150 --> 00:01:51.740
You're creating yet different methods for different purposes, right?

00:01:51.740 --> 00:01:57.275
So you're writing a method which will only fetch the information from the database.

00:01:57.275 --> 00:02:01.820
And that particular situation you can create an API method is GET method.

00:02:01.820 --> 00:02:06.575
So when do you want to use the post and PUT methods?

00:02:06.575 --> 00:02:11.630
So if you're doing some complex information you are doing, you're uploading, your,

00:02:11.630 --> 00:02:13.820
you're passing year complex input and you're getting

00:02:13.820 --> 00:02:16.910
a complex response and you're trying to update something,

00:02:16.910 --> 00:02:18.380
you are trying to add something,

00:02:18.380 --> 00:02:21.155
our store something in the database based on the inputs.

00:02:21.155 --> 00:02:22.370
And those kind of situation,

00:02:22.370 --> 00:02:26.960
you can use a post method or you're writing a method which will update some data,

00:02:26.960 --> 00:02:29.210
you can use the PUT method.

00:02:29.210 --> 00:02:32.195
It's not exactly my name's.

00:02:32.195 --> 00:02:35.270
You'll write a method which we will do some process and you can

00:02:35.270 --> 00:02:38.510
mark that met the Odessa PUT method because that is

00:02:38.510 --> 00:02:41.960
a signature where we're going to use it while you making

00:02:41.960 --> 00:02:45.605
a call to the rest API where there was a getMethod are a postmodern output method.

00:02:45.605 --> 00:02:47.000
And we have a much more,

00:02:47.000 --> 00:02:49.070
so not only these three, we have a delete method also.

00:02:49.070 --> 00:02:53.045
So when you're trying to remove some information or delete some information,

00:02:53.045 --> 00:02:55.865
you can use the delete method.

00:02:55.865 --> 00:02:57.695
Okay, What is the next thing?

00:02:57.695 --> 00:03:01.760
So I make a request and I got a response back,

00:03:01.760 --> 00:03:03.335
but something wrong with it.

00:03:03.335 --> 00:03:08.735
So we need to send a response back to the user in a appropriate format.

00:03:08.735 --> 00:03:09.980
Again, it's the farm,

00:03:09.980 --> 00:03:13.205
but it is going to be the user defined.

00:03:13.205 --> 00:03:17.000
So status message, which has two,

00:03:17.000 --> 00:03:18.890
holds, the essential information.

00:03:18.890 --> 00:03:20.555
So what is the error code?

00:03:20.555 --> 00:03:22.130
If it is a success?

00:03:22.130 --> 00:03:25.730
What is the, what is the code for success in JSON?

00:03:25.730 --> 00:03:28.910
If it is a 200, which means it's a successful response,

00:03:28.910 --> 00:03:31.250
that process has been completed successfully.

00:03:31.250 --> 00:03:34.280
And if they encounter any issues,

00:03:34.280 --> 00:03:39.305
that S Once message back to the user we send with some error codes.

00:03:39.305 --> 00:03:40.880
So based on the error code,

00:03:40.880 --> 00:03:44.150
we should be able to understand what is the message,

00:03:44.150 --> 00:03:47.330
whether it's a sort of a ratio or user input or form a tissue.

00:03:47.330 --> 00:03:48.830
We can understand that.

00:03:48.830 --> 00:03:52.475
And again, there is a structure.

00:03:52.475 --> 00:03:56.765
I mean, the rest APS works based on the W3 definitions.

00:03:56.765 --> 00:03:59.960
We know what is the W3 definitions right in there,

00:03:59.960 --> 00:04:01.640
which we discussed in the previous sections.

00:04:01.640 --> 00:04:03.800
Like if you're writing a survey,

00:04:03.800 --> 00:04:05.510
heat has to communicate to our mission,

00:04:05.510 --> 00:04:09.860
to mission or interoperable and communicating to each other and transforming information.

00:04:09.860 --> 00:04:13.160
All of those combined together called W3C at

00:04:13.160 --> 00:04:17.120
definition and how the data can be transmitted when

00:04:17.120 --> 00:04:19.100
you're using rest APIs only through

00:04:19.100 --> 00:04:24.650
the HTTP APIs or one it really has to do with which means you are internet protocol.

00:04:24.650 --> 00:04:26.180
But when it comes to a slope here,

00:04:26.180 --> 00:04:31.520
you can use HTTP and the same time you can post your request using the M cues as well,

00:04:31.520 --> 00:04:34.310
but that is not supported in this API.

00:04:34.310 --> 00:04:36.420
Thank you.
