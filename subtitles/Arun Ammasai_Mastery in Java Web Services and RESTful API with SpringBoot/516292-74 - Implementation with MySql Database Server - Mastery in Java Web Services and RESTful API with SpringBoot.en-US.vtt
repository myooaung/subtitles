WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.210
Hello everyone.

00:00:01.210 --> 00:00:02.215
Welcome back.

00:00:02.215 --> 00:00:06.070
So we tried with the hash two in-memory database.

00:00:06.070 --> 00:00:06.715
Correct.

00:00:06.715 --> 00:00:08.230
But when it comes to real world,

00:00:08.230 --> 00:00:11.455
we have to work with the real databases.

00:00:11.455 --> 00:00:12.130
Correct?

00:00:12.130 --> 00:00:16.615
So even though if you're using has two data with it's a kind of manipulated data.

00:00:16.615 --> 00:00:21.400
Okay, so because it automatically creates a table and it automatically

00:00:21.400 --> 00:00:23.590
creates a data based on the entities which we are

00:00:23.590 --> 00:00:26.125
having in our project or you know, an application.

00:00:26.125 --> 00:00:31.690
But when it comes to real, then database and tables which we have to create manually,

00:00:31.690 --> 00:00:36.115
and then we have to create entities according to the date table design.

00:00:36.115 --> 00:00:37.555
So now what we're gonna do,

00:00:37.555 --> 00:00:42.745
so now I just created my database server in Amazon Web Services.

00:00:42.745 --> 00:00:45.520
And what we're gonna do is we're going to connect

00:00:45.520 --> 00:00:48.250
this database because we have two tables here.

00:00:48.250 --> 00:00:49.600
First one is employee,

00:00:49.600 --> 00:00:52.330
so which has some information at the same time we have

00:00:52.330 --> 00:00:55.300
one more table called department for example.

00:00:55.300 --> 00:00:58.585
But employee, he might be responsible for multiple departments.

00:00:58.585 --> 00:01:00.790
So the departments we have,

00:01:00.790 --> 00:01:03.700
the department information, for example, employee ID two,

00:01:03.700 --> 00:01:09.280
he can take the responsibility of sales and finance and employ everyone.

00:01:09.280 --> 00:01:11.530
He can only take care of sales.

00:01:11.530 --> 00:01:16.585
In a similar way, we're going to work with these tables,

00:01:16.585 --> 00:01:18.790
the way how we trade in the hatch to rate their similarity,

00:01:18.790 --> 00:01:22.750
we're going to try the same for these real-time at tables.

00:01:22.750 --> 00:01:26.330
So let's go back to our project.

00:01:26.330 --> 00:01:31.205
And this is the one project which we created employee risk service.

00:01:31.205 --> 00:01:32.480
There is our existing project, right?

00:01:32.480 --> 00:01:36.694
And this existing project pretty much works with the, the hard-coded information.

00:01:36.694 --> 00:01:39.185
And we don't need hard-coded information anymore.

00:01:39.185 --> 00:01:44.149
We want real-time data or we want to communicate to the real databases.

00:01:44.149 --> 00:01:46.415
Now, we do have a real-time databases.

00:01:46.415 --> 00:01:50.929
All we need to do is we need to convert our DTUs into entity.

00:01:50.929 --> 00:01:52.100
And we have to provide

00:01:52.100 --> 00:01:56.375
the database information in our application at properties and establishes a connection.

00:01:56.375 --> 00:01:59.960
And we'll see whether they're able to retrieve the information and we are able to

00:01:59.960 --> 00:02:03.725
incent the information into our realtime database.

00:02:03.725 --> 00:02:05.550
Let's do that.
