WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.800
Hello everyone. Welcome back.

00:00:01.800 --> 00:00:04.905
Let's talk about a spring JDBC template.

00:00:04.905 --> 00:00:08.160
And why do we need to use the JDBC template?

00:00:08.160 --> 00:00:09.465
Okay?

00:00:09.465 --> 00:00:14.400
So our spring JDBC template is a powerful tool or you can call them

00:00:14.400 --> 00:00:19.485
as a mechanism to connect to the database and execute your SQL queries.

00:00:19.485 --> 00:00:21.555
But on an, another important thing,

00:00:21.555 --> 00:00:23.370
even though it is a JDBC template,

00:00:23.370 --> 00:00:26.535
it's still uses the our JDBC API,

00:00:26.535 --> 00:00:29.460
the one which we discussed previously, the same thing.

00:00:29.460 --> 00:00:32.190
It is used inside the JDBC template ASL,

00:00:32.190 --> 00:00:36.390
but it eliminates a lot of problems of JDBC API.

00:00:36.390 --> 00:00:39.195
Let's talk about what are the problems of AVI.

00:00:39.195 --> 00:00:42.380
Okay, the first thing, we need to write a lot of

00:00:42.380 --> 00:00:45.425
code before and after executing the query,

00:00:45.425 --> 00:00:48.590
such as creating connection and statement,

00:00:48.590 --> 00:00:51.065
closing results, it, and etc.

00:00:51.065 --> 00:00:51.725
Right?

00:00:51.725 --> 00:00:56.735
At the same time, we need to perform exception handling core on the database logic.

00:00:56.735 --> 00:00:58.025
Of course we had orals.

00:00:58.025 --> 00:01:00.380
We have no idea what went wrong.

00:01:00.380 --> 00:01:01.355
Right.

00:01:01.355 --> 00:01:03.545
And we need to handle the transaction.

00:01:03.545 --> 00:01:04.850
That's the headache.

00:01:04.850 --> 00:01:08.165
Whether how to roll back your transaction,

00:01:08.165 --> 00:01:11.615
that is a biggest days are unreachable error using the JDBC API.

00:01:11.615 --> 00:01:13.160
But when a recent data,

00:01:13.160 --> 00:01:15.560
which template we'll talk about the advantage later.

00:01:15.560 --> 00:01:17.045
And there is one more problem.

00:01:17.045 --> 00:01:20.000
Repetition of all the code from one to another.

00:01:20.000 --> 00:01:22.835
Database logic, it's a time-consuming task.

00:01:22.835 --> 00:01:27.755
Of course, these are other major problems when you're using JDBC template.

00:01:27.755 --> 00:01:29.240
Okay, so you might ask,

00:01:29.240 --> 00:01:33.230
so what is the advantage of using Spring JDBC template?

00:01:33.230 --> 00:01:37.625
Again, this spring JDBC template eliminates all the above-mentioned problems.

00:01:37.625 --> 00:01:40.130
We discussed about four different problems, right?

00:01:40.130 --> 00:01:42.620
But if you are go for JDBC template,

00:01:42.620 --> 00:01:44.750
this will handle all the problems,

00:01:44.750 --> 00:01:47.240
which means you don't have to write the bi-lipid courts,

00:01:47.240 --> 00:01:49.310
which means before and after executing the query.

00:01:49.310 --> 00:01:51.650
And again, you don't have to write

00:01:51.650 --> 00:01:55.070
any specific exception logic because JDBC template, it's a good plan,

00:01:55.070 --> 00:01:58.490
has its own exception handling functionality,

00:01:58.490 --> 00:02:02.480
and it provides methods to write the queries directly.

00:02:02.480 --> 00:02:04.730
So it says a lot of work on time.

00:02:04.730 --> 00:02:08.420
You don't have tried to propitiate manual on how to open the connection.

00:02:08.420 --> 00:02:11.255
Again, it doesn't matter all you need to use,

00:02:11.255 --> 00:02:16.070
just use the JDBC template and use the method called query and pass over input Cory,

00:02:16.070 --> 00:02:17.900
just select star from employee.

00:02:17.900 --> 00:02:20.750
Eventually it will give all the information.

00:02:20.750 --> 00:02:23.045
And not only that,

00:02:23.045 --> 00:02:30.680
our spring JDBC will providing us some different ways to access the database using JDBC.

00:02:30.680 --> 00:02:32.210
The first one is JDBC template,

00:02:32.210 --> 00:02:33.680
which we discussed now.

00:02:33.680 --> 00:02:35.690
And we have something like named parameter

00:02:35.690 --> 00:02:38.600
JDBC template asks Will and simple JDBC template,

00:02:38.600 --> 00:02:42.890
simple JDBC insert, and simple JDBC call.

00:02:42.890 --> 00:02:47.600
So we have a different for different types of approaches,

00:02:47.600 --> 00:02:49.850
but the familiar one is JDBC template.

00:02:49.850 --> 00:02:54.110
And let's talk about good template class, right?

00:02:54.110 --> 00:02:57.845
So it is a central class of a string JDBC support.

00:02:57.845 --> 00:03:01.310
It takes care of the creation and releasing their resources such

00:03:01.310 --> 00:03:04.775
as creating enclosing, connection and etc.

00:03:04.775 --> 00:03:06.395
That is what we talked about, right?

00:03:06.395 --> 00:03:12.725
It's avoids lot of boilerplate code which automatically taken care by JDBC template.

00:03:12.725 --> 00:03:17.855
And we can perform all the database operation by the help of their visit template class,

00:03:17.855 --> 00:03:20.330
such as insertion, update and delete,

00:03:20.330 --> 00:03:24.530
even retrieve pretty much everything we can do it with JDBC template.

00:03:24.530 --> 00:03:30.065
And it's much easier when it's comparing two JDBC.

00:03:30.065 --> 00:03:34.820
But even if it gives us an advantage, advantages as well.

00:03:34.820 --> 00:03:36.515
So whenever using JDBC template,

00:03:36.515 --> 00:03:39.290
you can pass your query at the same time,

00:03:39.290 --> 00:03:43.955
you can send as a map or actually the second parameter, the mapper, what it does.

00:03:43.955 --> 00:03:47.074
Basically, I want my employee DDoS response.

00:03:47.074 --> 00:03:52.805
So you can use the employee mapper and you can do the same annotation process here,

00:03:52.805 --> 00:03:57.410
retrieves information and create the employee and set it back and send back as a list.

00:03:57.410 --> 00:04:00.230
It's pretty much the same what we did in the JDBC aswell.

00:04:00.230 --> 00:04:04.625
Okay, the next thing, so what is the advantage of using J JP?

00:04:04.625 --> 00:04:06.080
Because we came from

00:04:06.080 --> 00:04:11.435
a JDBC Java JDBC to sprint JDBC from spring JDBC two, we are moving to JPA.

00:04:11.435 --> 00:04:15.960
Let's talk about what is the advantage and what are the benefits of using GBA.
