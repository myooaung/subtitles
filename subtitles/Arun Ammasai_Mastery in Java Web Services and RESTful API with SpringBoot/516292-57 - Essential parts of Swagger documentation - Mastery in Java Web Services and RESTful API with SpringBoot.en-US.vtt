WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.980
Hello everyone, Welcome back.

00:00:01.980 --> 00:00:03.810
So we discuss about a lot of things like

00:00:03.810 --> 00:00:06.720
exception handling and validation implementing headways.

00:00:06.720 --> 00:00:10.215
And we did, we did discuss about the content negotiation.

00:00:10.215 --> 00:00:11.655
Just think about this scenario.

00:00:11.655 --> 00:00:13.050
We have completed the project,

00:00:13.050 --> 00:00:15.435
but we need to handle the documentation to the user.

00:00:15.435 --> 00:00:17.895
So documentation for the purpose of documentation,

00:00:17.895 --> 00:00:21.120
the user can understand what are the methods and what are

00:00:21.120 --> 00:00:24.510
the input and output and other information.

00:00:24.510 --> 00:00:26.400
So which means the API informations.

00:00:26.400 --> 00:00:30.525
So everything has to be given to the end-user, right?

00:00:30.525 --> 00:00:32.160
So how we can do that?

00:00:32.160 --> 00:00:34.380
So far that in spring would we have

00:00:34.380 --> 00:00:38.385
an amazing dependency called SS swagger documentation.

00:00:38.385 --> 00:00:45.535
That's swagger documentation, which will help us understand what are the methods and the,

00:00:45.535 --> 00:00:48.280
I mean, what are the API methods and what are the inputs

00:00:48.280 --> 00:00:51.220
and output elements for the HTTP method?

00:00:51.220 --> 00:00:52.975
Just take an example with Dell.

00:00:52.975 --> 00:00:54.610
So we credit swaps are reasons.

00:00:54.610 --> 00:00:57.250
Write a soap services which will generate a visitor,

00:00:57.250 --> 00:00:59.740
which contains the input and output and

00:00:59.740 --> 00:01:02.755
the schema information and the interface and other information.

00:01:02.755 --> 00:01:07.480
The similar way for rest API also we have to create a documentation,

00:01:07.480 --> 00:01:09.880
but just unlike our soap, your ETL,

00:01:09.880 --> 00:01:13.435
not based on DNA x because it's not based on any specific type,

00:01:13.435 --> 00:01:17.380
because rest APIs or its architectural based,

00:01:17.380 --> 00:01:19.210
not based on some specific data type.

00:01:19.210 --> 00:01:21.925
So we're going to use the swagger documentation.

00:01:21.925 --> 00:01:24.400
It's very easy to implement this Swagger documentation.

00:01:24.400 --> 00:01:29.225
All you need to do is you need to add a new dependency called Spring folks.

00:01:29.225 --> 00:01:33.800
Okay, So let me go to browser and look for the around here.

00:01:33.800 --> 00:01:38.460
So spring Fox starter.

00:01:43.480 --> 00:01:46.560
Okay, let's keep that.

00:01:47.020 --> 00:01:53.660
Let's copy these dependencies and go back to your palm dot xml.

00:01:53.660 --> 00:01:54.800
And all we need to do,

00:01:54.800 --> 00:01:56.690
just add the new dependency.

00:01:56.690 --> 00:02:02.435
We all know what we need to do whenever you've got a new dependency added in your,

00:02:02.435 --> 00:02:04.880
in your permanent XML,

00:02:04.880 --> 00:02:06.950
make sure you build it once.

00:02:06.950 --> 00:02:12.035
So that's always a safer option or sometimes you will not see the reflections.

00:02:12.035 --> 00:02:15.830
I'm which means the impacts when you added some dependency,

00:02:15.830 --> 00:02:18.170
but you won't be able to access the classes in it.

00:02:18.170 --> 00:02:19.505
So the build is success.

00:02:19.505 --> 00:02:22.670
Now let's go back to or

00:02:22.670 --> 00:02:27.875
employer employee service application where we initiate the Spring Boot application.

00:02:27.875 --> 00:02:29.540
So all we need to do,

00:02:29.540 --> 00:02:31.865
just enable the swagger,

00:02:31.865 --> 00:02:33.980
enable the swagger to.

00:02:33.980 --> 00:02:35.315
That's all we need to do.

00:02:35.315 --> 00:02:37.820
And then so what are the two things which we have done here?

00:02:37.820 --> 00:02:41.720
We enable this Swagger two and we added the dependency in the palm read XML.

00:02:41.720 --> 00:02:45.710
Now all we need to do is just stop the application and started

00:02:45.710 --> 00:02:50.494
one more time so it can pick the latest changes.

00:02:50.494 --> 00:02:54.410
So Spring Boot is getting started now.

00:02:54.410 --> 00:02:57.905
And in the meanwhile, how we can access them.

00:02:57.905 --> 00:03:06.485
So normally the documentation will be available in this particular location like HTTP.

00:03:06.485 --> 00:03:08.360
And we have the local host for it.

00:03:08.360 --> 00:03:10.625
So localhost and the port number 800,

00:03:10.625 --> 00:03:14.480
eight V1 and V2, sorry,

00:03:14.480 --> 00:03:19.430
v2 slash slash API docs,

00:03:19.430 --> 00:03:23.670
this is the URL we going to access an API docs.

00:03:27.280 --> 00:03:30.245
Okay, So let's see.

00:03:30.245 --> 00:03:36.020
Okay, so okay, thoroughness up and running.

00:03:36.020 --> 00:03:40.145
Let's go back to Postman and we'll create a new request.

00:03:40.145 --> 00:03:46.800
And I'm going to paste it. Okay, so let's hit the send button.

00:03:46.800 --> 00:03:49.945
Cool. We got the response back.

00:03:49.945 --> 00:03:53.335
Okay, let's try to analyze what is their response here.

00:03:53.335 --> 00:03:56.770
It will give you a JSON response, okay?

00:03:56.770 --> 00:04:00.145
So it will give you what is the swagger version we are using

00:04:00.145 --> 00:04:03.729
and what are the basic information about your application?

00:04:03.729 --> 00:04:06.760
So I mean, your documentation information,

00:04:06.760 --> 00:04:10.165
what is the description for the document and the document version?

00:04:10.165 --> 00:04:12.295
You can add you can add anything.

00:04:12.295 --> 00:04:17.110
It's up to you and what the terms and depth and service and what is a contact detail.

00:04:17.110 --> 00:04:20.230
And do we have any license I get him and we need to agree

00:04:20.230 --> 00:04:23.545
to eat all the information available in the info section.

00:04:23.545 --> 00:04:27.265
But the most important thing is what is a host?

00:04:27.265 --> 00:04:29.925
We are using localhost 800 81.

00:04:29.925 --> 00:04:31.550
When you are using on a production,

00:04:31.550 --> 00:04:34.655
you might have a different IP address here.

00:04:34.655 --> 00:04:37.070
And then another thing that the base path,

00:04:37.070 --> 00:04:40.175
what the base but localhost age range or a slash.

00:04:40.175 --> 00:04:43.760
So that's the base bud. And then we have three different sections here,

00:04:43.760 --> 00:04:46.865
tax and baths and definition.

00:04:46.865 --> 00:04:48.830
Let's talk about each and every one of them.

00:04:48.830 --> 00:04:50.750
So what is a tax in the first place?

00:04:50.750 --> 00:04:53.015
Tax we haven't used much so far.

00:04:53.015 --> 00:04:57.604
Taxes, nothing but tax contained, all the controllers.

00:04:57.604 --> 00:04:59.780
So what we can do with the tax, for example,

00:04:59.780 --> 00:05:01.535
when you have a 10 different controllers,

00:05:01.535 --> 00:05:03.890
we can group them based on some tag names.

00:05:03.890 --> 00:05:05.720
So here we don't have any grouping names,

00:05:05.720 --> 00:05:09.140
so we have only the employee controller and basic error controller,

00:05:09.140 --> 00:05:11.945
which is the basic datacenter, which is the default one.

00:05:11.945 --> 00:05:14.930
The employer controller is the one which we created.

00:05:14.930 --> 00:05:18.785
So basically taxes for grouping your controllers.

00:05:18.785 --> 00:05:20.750
And the next thing, paths.

00:05:20.750 --> 00:05:21.965
So what is path?

00:05:21.965 --> 00:05:25.640
Actually? Basically path is give you the details.

00:05:25.640 --> 00:05:27.260
I would water them with.

00:05:27.260 --> 00:05:31.310
Apis are what are the API methods available, the newer application.

00:05:31.310 --> 00:05:33.305
So if you take a look at the paths,

00:05:33.305 --> 00:05:35.240
you can see a get all method.

00:05:35.240 --> 00:05:36.770
That is the first method which we call.

00:05:36.770 --> 00:05:39.155
Let's go back to the ID and let me openly

00:05:39.155 --> 00:05:42.725
controller and show you why so intelligent here.

00:05:42.725 --> 00:05:45.170
Okay, so let's go back to our controller.

00:05:45.170 --> 00:05:49.520
Where is it? Okay? So this is

00:05:49.520 --> 00:05:52.340
my first met that get all and second honest get

00:05:52.340 --> 00:05:55.775
employed by area and turn on Save employee end.

00:05:55.775 --> 00:05:57.740
We have a daily the employee as well.

00:05:57.740 --> 00:06:01.895
These all these information should be available in newer API documentation.

00:06:01.895 --> 00:06:03.650
That's the first method, get all,

00:06:03.650 --> 00:06:06.005
get alma that which will not take any inputs.

00:06:06.005 --> 00:06:08.645
So we're not pass any parameters.

00:06:08.645 --> 00:06:11.750
So that is a reason you won't see any patterns here.

00:06:11.750 --> 00:06:13.145
Just in case if it is,

00:06:13.145 --> 00:06:17.435
we need to pass any input will have a section here. Okay, Let's talk about it.

00:06:17.435 --> 00:06:18.860
So my method name is good LDL,

00:06:18.860 --> 00:06:21.650
which is comes in the DAG of summary.

00:06:21.650 --> 00:06:23.090
And what is the operation at operations?

00:06:23.090 --> 00:06:26.540
And I think MAD, what exactly type of method.

00:06:26.540 --> 00:06:31.520
So we are going to get all using gateway that get doll is nothing but my method name.

00:06:31.520 --> 00:06:33.860
And we're going to use the get method

00:06:33.860 --> 00:06:36.020
to retrieve the information because it's a GET mapping, right?

00:06:36.020 --> 00:06:39.980
So we are using the get method and which will produce the star slash ai,

00:06:39.980 --> 00:06:45.410
which means application.rb shall we can include the specific type, whatever you want to.

00:06:45.410 --> 00:06:49.040
Use, an application dot JSON or obligations less XML,

00:06:49.040 --> 00:06:54.080
it's up to you based on your project requirement and the response.

00:06:54.080 --> 00:06:57.725
So that 200 response is expected as a successful response here.

00:06:57.725 --> 00:06:59.420
And what is the schema?

00:06:59.420 --> 00:07:02.645
Schema means what, what is your response contains?

00:07:02.645 --> 00:07:04.475
The response contains an array,

00:07:04.475 --> 00:07:07.850
which means you are responsible have some list of information.

00:07:07.850 --> 00:07:11.000
What kind of a list? It's the employee list.

00:07:11.000 --> 00:07:13.715
Ok, now you might think so here I have a definition

00:07:13.715 --> 00:07:16.655
and I have employee. So what does that mean?

00:07:16.655 --> 00:07:20.030
Employees, the response for

00:07:20.030 --> 00:07:23.840
this particular method and want to know what are the inner elements.

00:07:23.840 --> 00:07:26.779
So what are the in detail about the employee?

00:07:26.779 --> 00:07:28.430
You need to go to the definition.

00:07:28.430 --> 00:07:30.215
So we are in the past section now,

00:07:30.215 --> 00:07:35.000
let's minimize the bath and let's expand the definition. Take a look at here.

00:07:35.000 --> 00:07:38.105
This is an employee which we are fitting in the Paths.

00:07:38.105 --> 00:07:40.145
So employees and object.

00:07:40.145 --> 00:07:42.215
And it asked three properties, email,

00:07:42.215 --> 00:07:43.640
employee ID and a name,

00:07:43.640 --> 00:07:46.804
email and name the dose or a strings.

00:07:46.804 --> 00:07:49.069
And employee ID is an integer.

00:07:49.069 --> 00:07:51.050
And not only that, if you take a look at it,

00:07:51.050 --> 00:07:52.340
it adds some additional information.

00:07:52.340 --> 00:07:58.940
Also. The name is a string type and it has a minimum and maximum length of 35.

00:07:58.940 --> 00:08:02.630
So all the information will be provided in the documentation.

00:08:02.630 --> 00:08:08.185
So let's go back to our paths and see the next month.

00:08:08.185 --> 00:08:09.920
We discussed about the getMethod.

00:08:09.920 --> 00:08:12.230
The second was the employee a delete method.

00:08:12.230 --> 00:08:14.465
So we have to pass an input, right?

00:08:14.465 --> 00:08:16.040
We have to pass the Employee ID.

00:08:16.040 --> 00:08:18.035
So which means we need to have the parameter here.

00:08:18.035 --> 00:08:21.530
So delete employee, That's the main method name and what is operational

00:08:21.530 --> 00:08:24.980
yet delete employee using a delete operation,

00:08:24.980 --> 00:08:27.515
which means that they lead Martha get delete.

00:08:27.515 --> 00:08:31.565
And then the parameters we have to pass an employee does the input, right?

00:08:31.565 --> 00:08:35.240
So we're, we're passing EMP ID as the input, right?

00:08:35.240 --> 00:08:39.305
So how would this coming to the request through the path?

00:08:39.305 --> 00:08:41.990
So we're providing, just, let me show you here.

00:08:41.990 --> 00:08:44.225
Here we are providing 12348.

00:08:44.225 --> 00:08:47.900
This is a path and we are sending the input through the path, right?

00:08:47.900 --> 00:08:49.490
So that's what we're talking about.

00:08:49.490 --> 00:08:52.175
And what are the next thing?

00:08:52.175 --> 00:08:53.300
And it's required true,

00:08:53.300 --> 00:08:55.910
which means it's a man or data element.

00:08:55.910 --> 00:08:57.935
And it said typeof an integer.

00:08:57.935 --> 00:09:00.005
Let's go back to the next method.

00:09:00.005 --> 00:09:03.050
And here, save employee,

00:09:03.050 --> 00:09:04.190
say the employee again,

00:09:04.190 --> 00:09:08.390
takes it here, the input passing through the path.

00:09:08.390 --> 00:09:10.910
But take a look at here.

00:09:10.910 --> 00:09:14.945
This is my save employee method and using post method,

00:09:14.945 --> 00:09:16.475
I'm in post operation.

00:09:16.475 --> 00:09:21.665
And then the input is passing through the body,

00:09:21.665 --> 00:09:28.220
the request body, which is nothing but this is a request to body, right?

00:09:28.220 --> 00:09:31.315
And description is AMP and required,

00:09:31.315 --> 00:09:34.040
true, you have to pass it as a monetary value.

00:09:34.040 --> 00:09:36.635
And here is a definition, the input.

00:09:36.635 --> 00:09:38.420
So input also is an employee.

00:09:38.420 --> 00:09:41.810
And if you want to know what employee contains, you know what to do, right?

00:09:41.810 --> 00:09:43.610
We have the definition below.

00:09:43.610 --> 00:09:47.315
You can go to the definition and you can look for the employee.

00:09:47.315 --> 00:09:52.205
And the response is 200 and discussions, okay?

00:09:52.205 --> 00:09:54.725
So which means that a successful response.

00:09:54.725 --> 00:09:59.315
And what does the other method which we are still reminds the good employee by ID.

00:09:59.315 --> 00:10:01.340
We all know that it's a getMethod,

00:10:01.340 --> 00:10:05.180
so we have the ghetto employee Bye ID using getMethod.

00:10:05.180 --> 00:10:09.260
And also we need to pass the input like how we did for the delete method rate.

00:10:09.260 --> 00:10:10.670
The same things are available here.

00:10:10.670 --> 00:10:14.780
Employee ID path and required is equal to true.

00:10:14.780 --> 00:10:17.810
Okay, So these are the three methods.

00:10:17.810 --> 00:10:24.635
Let's go back and shrink the tax here for you, shrink the paths.

00:10:24.635 --> 00:10:27.140
And let's take a look at the definition here.

00:10:27.140 --> 00:10:29.030
See employee.

00:10:29.030 --> 00:10:33.620
It's a object which contains a male employee ID and a name,

00:10:33.620 --> 00:10:35.630
and we have some additional information also.

00:10:35.630 --> 00:10:37.730
The similar way we have one MOOC,

00:10:37.730 --> 00:10:39.800
object days, we're SQL.

00:10:39.800 --> 00:10:43.894
Because when you are trying to look for a good, simple, single employee,

00:10:43.894 --> 00:10:48.050
it will give you another link as well to retrieve all the employee,

00:10:48.050 --> 00:10:50.060
that method will return our entity model, right?

00:10:50.060 --> 00:10:53.705
So let me show you that this is a method,

00:10:53.705 --> 00:10:55.160
not this one, okay?

00:10:55.160 --> 00:10:56.900
This is a method get employed by AD.

00:10:56.900 --> 00:11:00.020
So you're fetching employee ID at the same time in the response,

00:11:00.020 --> 00:11:02.885
you are giving the additional link to the user.

00:11:02.885 --> 00:11:04.280
If you want to get all the implies,

00:11:04.280 --> 00:11:06.395
you can use the, these particular link.

00:11:06.395 --> 00:11:08.765
We're trying that right? So that is also,

00:11:08.765 --> 00:11:14.570
we will comes under the definition here because that is also input and output, right?

00:11:14.570 --> 00:11:16.700
And it's an object which contains a string,

00:11:16.700 --> 00:11:19.040
integer and also employee,

00:11:19.040 --> 00:11:21.410
and this has the same elements.

00:11:21.410 --> 00:11:25.070
Only difference is it has some additional links in it.

00:11:25.070 --> 00:11:33.635
Okay, so this is how you need to understand about D, the documentation.

00:11:33.635 --> 00:11:40.400
So if you save this data as a JSON file and you can translate it to the clients

00:11:40.400 --> 00:11:42.950
and they should be able to understand each and every elements or

00:11:42.950 --> 00:11:47.720
fewer reached API documentation.

00:11:47.720 --> 00:11:51.065
So even if you send this JSON document to you,

00:11:51.065 --> 00:11:52.745
you should be able to understand because, okay,

00:11:52.745 --> 00:11:59.359
so taxes, group and paths is a method and definition is the input and output in details.

00:11:59.359 --> 00:12:00.440
That's all.

00:12:00.440 --> 00:12:04.115
Okay, This is just a normal view and we can

00:12:04.115 --> 00:12:09.360
see the same information using some visual editor that we can see in the next video.
