WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:01.320
Hello everyone.

00:00:01.320 --> 00:00:02.100
Welcome back.

00:00:02.100 --> 00:00:04.560
So we discussed the boat or is a tight coupling issue and

00:00:04.560 --> 00:00:07.200
how we can fix it using a loose coupling.

00:00:07.200 --> 00:00:11.505
And then we discuss about what is at a wiring and what is a component and all right?

00:00:11.505 --> 00:00:14.175
But the one thing which we need to understand,

00:00:14.175 --> 00:00:17.340
we're doing a manual mapping before and then we try to

00:00:17.340 --> 00:00:20.940
mapping using this spring auto wire and the competent,

00:00:20.940 --> 00:00:23.280
basically how it is happening in the barrier on.

00:00:23.280 --> 00:00:26.145
We need to see what is happening behind the screens, right?

00:00:26.145 --> 00:00:27.900
So to see that what I'm going to do,

00:00:27.900 --> 00:00:31.080
I'm going to enable the debugging mode in the spring,

00:00:31.080 --> 00:00:34.290
so which will give you a lot of information in the console so that we

00:00:34.290 --> 00:00:37.880
can see where the secreted at how the competence has been scanned,

00:00:37.880 --> 00:00:40.040
everything, we can have a look at it.

00:00:40.040 --> 00:00:42.350
So to do that, you know what to do,

00:00:42.350 --> 00:00:47.090
just go to Application and properties which is available in newer resource folder.

00:00:47.090 --> 00:00:51.125
All you need to do just enable logging level,

00:00:51.125 --> 00:00:53.555
actually fill login dot Level 4.

00:00:53.555 --> 00:00:56.390
We can enable it for a Spring framework entirely.

00:00:56.390 --> 00:01:04.310
So you dot two string Spring framework equal to,

00:01:04.310 --> 00:01:07.020
and I'm going to make it as a debug mode.

00:01:07.120 --> 00:01:12.995
So RG is Spring framework.

00:01:12.995 --> 00:01:14.045
So now good.

00:01:14.045 --> 00:01:15.560
So now we have everything in place.

00:01:15.560 --> 00:01:18.780
Now I just enable that debugging mode.

00:01:19.630 --> 00:01:21.770
So once we enable that,

00:01:21.770 --> 00:01:25.340
they were more than next thing which we need to do, start the application.

00:01:25.340 --> 00:01:27.845
The moment when we start the application, eventually,

00:01:27.845 --> 00:01:32.075
the console will give all the wiring information and the company information.

00:01:32.075 --> 00:01:34.685
So I'm going to run it now.

00:01:34.685 --> 00:01:38.255
Then I'm going to show you the logs.

00:01:38.255 --> 00:01:39.350
So there's a console.

00:01:39.350 --> 00:01:43.970
So all the things which we loaded in this particular console including a spring boat,

00:01:43.970 --> 00:01:46.790
I mean, the booting configuration and other supporting beans,

00:01:46.790 --> 00:01:48.575
everything will be created.

00:01:48.575 --> 00:01:50.210
So this Spring starter now,

00:01:50.210 --> 00:01:54.480
so let's wait for a minute until everything has started.

00:01:55.660 --> 00:01:56.900
Okay.

00:01:56.900 --> 00:01:58.190
It's just loading now.

00:01:58.190 --> 00:02:00.020
Okay, got it.

00:02:00.020 --> 00:02:01.910
Okay, so now everything is done.

00:02:01.910 --> 00:02:03.920
Now I got D, output,

00:02:03.920 --> 00:02:07.400
output assignment photograph here because we haven't motivating code changes, right?

00:02:07.400 --> 00:02:11.015
But you should be able to see a lot of other things here.

00:02:11.015 --> 00:02:13.385
So normally when we ran it before,

00:02:13.385 --> 00:02:15.140
it was not like that, It was just a symbol,

00:02:15.140 --> 00:02:16.475
one pair of message.

00:02:16.475 --> 00:02:18.905
But here there is tons of information here.

00:02:18.905 --> 00:02:21.185
So to understand that what we need to do,

00:02:21.185 --> 00:02:30.590
just go back to the top and we'll see each and every one relates in degrees as ice.

00:02:30.590 --> 00:02:33.830
Okay, Just have a look at it is the entire console.

00:02:33.830 --> 00:02:38.000
So here how the spring will load

00:02:38.000 --> 00:02:43.490
the package for our root files and how it is loading the component fails everything.

00:02:43.490 --> 00:02:45.215
Okay, so the first thing,

00:02:45.215 --> 00:02:47.210
just have a look at this particular line.

00:02:47.210 --> 00:02:50.090
Loading a source classes which is available

00:02:50.090 --> 00:02:53.000
in the calm that bytecode velocity and equitable plane.

00:02:53.000 --> 00:03:00.695
So this is a loading all the files which is available in my entire application.

00:03:00.695 --> 00:03:02.360
And then what will happen?

00:03:02.360 --> 00:03:05.420
So it will try to identify the beans,

00:03:05.420 --> 00:03:06.995
which means that components.

00:03:06.995 --> 00:03:10.055
So once we found out the components,

00:03:10.055 --> 00:03:13.595
it will create the mean for the components, right?

00:03:13.595 --> 00:03:16.520
Just have a look at these three lines.

00:03:16.520 --> 00:03:20.780
So identified candidate competent class and which

00:03:20.780 --> 00:03:24.335
is available under this location dot-dot-dot class.

00:03:24.335 --> 00:03:26.960
And there is one more competent engineers, S1 more competent.

00:03:26.960 --> 00:03:27.965
So photograph.

00:03:27.965 --> 00:03:29.900
So now we've got the components.

00:03:29.900 --> 00:03:31.625
So the next thing which we need to do.

00:03:31.625 --> 00:03:33.845
So once we got the component,

00:03:33.845 --> 00:03:35.990
the next thing, create the bean for it.

00:03:35.990 --> 00:03:38.510
Because when you create the beans would happen it

00:03:38.510 --> 00:03:41.795
automatically binding the auto wiring process.

00:03:41.795 --> 00:03:44.060
So let's try to find it out here.

00:03:44.060 --> 00:03:46.100
It's got down below.

00:03:46.100 --> 00:03:48.360
It must be here in somewhere.

00:03:48.970 --> 00:03:51.545
Okay, so these are other beans.

00:03:51.545 --> 00:03:52.970
A spring supportive means.

00:03:52.970 --> 00:03:54.830
So when you're running the spring application,

00:03:54.830 --> 00:03:56.570
not only our code that are

00:03:56.570 --> 00:03:59.390
some supportive beans is required for running this Spring Boot application.

00:03:59.390 --> 00:04:03.365
Everything will be initiator here.

00:04:03.365 --> 00:04:05.330
So the one which you're looking for,

00:04:05.330 --> 00:04:08.855
where is the bean creator for our own components?

00:04:08.855 --> 00:04:11.825
So that's the only thing which we want to look for.

00:04:11.825 --> 00:04:14.690
So it's going to be creating shared instance.

00:04:14.690 --> 00:04:16.535
Let's go down.

00:04:16.535 --> 00:04:19.410
Let's try to find out.

00:04:22.300 --> 00:04:26.075
Okay, So creating shared instance here.

00:04:26.075 --> 00:04:29.915
Okay, see I just have a look at these three lines.

00:04:29.915 --> 00:04:35.930
And here, creating a shadow instance of a singleton Bean.

00:04:35.930 --> 00:04:39.050
Doctor, doctor is a component which is already identified.

00:04:39.050 --> 00:04:40.880
So since it's identified as a competent,

00:04:40.880 --> 00:04:43.295
I can create a bean for it.

00:04:43.295 --> 00:04:50.465
So in all these bean information created and stored in the application contexts,

00:04:50.465 --> 00:04:53.240
that is the reason when we are

00:04:53.240 --> 00:04:56.030
trying to get the mean from the application contexts, it is working.

00:04:56.030 --> 00:04:59.900
So when you go to the application,

00:04:59.900 --> 00:05:03.185
once again, so when it go Here,

00:05:03.185 --> 00:05:06.500
you are just loading the application contexts from the application context.

00:05:06.500 --> 00:05:08.090
You are trying to look for the photograph,

00:05:08.090 --> 00:05:11.510
our main case and the photograph of opinions may initiated here.

00:05:11.510 --> 00:05:14.870
So that is the reason you're able to retrieve the information.

00:05:14.870 --> 00:05:16.730
Okay, so you might think,

00:05:16.730 --> 00:05:21.170
so it is loading all the components and just take a look at the project structure,

00:05:21.170 --> 00:05:24.905
all the files available under the same directory.

00:05:24.905 --> 00:05:28.550
But what will happen in case my package

00:05:28.550 --> 00:05:32.270
is our Dean and different location or in different packages.

00:05:32.270 --> 00:05:33.680
In those kind of scenarios,

00:05:33.680 --> 00:05:36.905
we may need to use something called components scan.

00:05:36.905 --> 00:05:41.060
For example. You need to use the component.

00:05:41.060 --> 00:05:47.270
So component component scan,

00:05:47.270 --> 00:05:50.285
which will takes a package as the input.

00:05:50.285 --> 00:05:56.310
So for example, if you have some package called com dot dot.

00:05:56.860 --> 00:06:01.160
So the moment the application started, you know what will happen?

00:06:01.160 --> 00:06:04.474
It will try to look for the components in this particular package.

00:06:04.474 --> 00:06:08.870
So this unit you do when you have the classmates in a different package.

00:06:08.870 --> 00:06:11.330
So these are all comes under single package

00:06:11.330 --> 00:06:14.630
so you don't have to provide the components scan here.

00:06:14.630 --> 00:06:17.900
For example, if it is in case if you have

00:06:17.900 --> 00:06:21.545
some other folder here and you have some components over there,

00:06:21.545 --> 00:06:22.760
in that particular situation,

00:06:22.760 --> 00:06:26.150
we may need to use the component a scan.

00:06:26.150 --> 00:06:28.805
So let's remove this for now.

00:06:28.805 --> 00:06:33.200
Okay, so in the next video we'll talk about what are the projects available

00:06:33.200 --> 00:06:34.850
in a spring and what are the models

00:06:34.850 --> 00:06:37.860
available in the spring we'll talk about in the next video.
