1
00:00:01,420 --> 00:00:06,830
Before we go ahead with the implementation, let's understand how Yeager will connect the different

2
00:00:06,830 --> 00:00:09,760
test information that is coming out of different components.

3
00:00:10,630 --> 00:00:16,210
So let's say we send a create order request and it goes through web application, Gateway Service Product

4
00:00:16,210 --> 00:00:18,400
Service Order Service Inventory Service.

5
00:00:19,000 --> 00:00:26,140
Then how is your connector going to connect these different traces, which will come out of these different

6
00:00:26,140 --> 00:00:26,740
machines?

7
00:00:28,750 --> 00:00:37,570
The way it happens is that Yeager keeps track of a request by maintaining certain IDs, and these are

8
00:00:37,570 --> 00:00:40,750
going to span eight years, which are passed along the day context.

9
00:00:41,080 --> 00:00:43,010
So let's first understand what means.

10
00:00:43,450 --> 00:00:49,000
And then we will understand the context, and that will make it very clear how Yeager is able to do

11
00:00:49,000 --> 00:00:52,240
distributed tracing across multiple components.

12
00:00:52,870 --> 00:00:59,170
So the way it works is that when a request enters into our system, so let's say component error is

13
00:00:59,170 --> 00:01:03,280
the first component, which is instrumented by Yeager Library.

14
00:01:03,790 --> 00:01:08,040
So this receives a request, so it will create a unique I.D..

15
00:01:08,560 --> 00:01:15,920
Now, this unique ID represents the timespan that this particular request will spend in componenti.

16
00:01:16,330 --> 00:01:18,010
So that said, this is the time spent.

17
00:01:18,370 --> 00:01:21,880
This request will spend in this component.

18
00:01:22,480 --> 00:01:30,010
So it will create an ID called Span 80, which will correspond to this time spent that this will request

19
00:01:30,010 --> 00:01:31,370
spend ID component.

20
00:01:32,170 --> 00:01:38,710
Now, during this time span, this request will spend some time doing processing within component day.

21
00:01:38,980 --> 00:01:42,880
But it can also make calls to its downstream services.

22
00:01:43,420 --> 00:01:44,680
So what can happen over here?

23
00:01:44,680 --> 00:01:51,220
It can make a call to, let's say, this component B. So now this request has come to Component B,

24
00:01:51,460 --> 00:01:59,800
and now it is going to spend some time in component B. So Yeager claimed libraries are going to record

25
00:01:59,800 --> 00:02:06,700
all these times whatever time requests are spending in these components, and these will be called Spann's

26
00:02:07,780 --> 00:02:08,880
and the Web.

27
00:02:08,890 --> 00:02:17,560
Yeager can connect these spans and do a trace is through these context information that it will pass

28
00:02:17,950 --> 00:02:19,120
along with the request.

29
00:02:19,840 --> 00:02:26,950
So the way it works is that this unique idea that we created spanned it is the context information when

30
00:02:26,950 --> 00:02:30,450
the request is in component a when.

31
00:02:31,030 --> 00:02:34,210
So this is the, let's say, this bad idea that was created.

32
00:02:34,210 --> 00:02:43,750
So then this request is sent to Component B and because it has originated from component component B,

33
00:02:44,140 --> 00:02:44,590
well.

34
00:02:45,770 --> 00:02:49,940
Create a new, unique ideas, new or unique idea of its own span.

35
00:02:50,360 --> 00:02:53,290
And it will append it to the parent spent.

36
00:02:53,930 --> 00:03:01,610
So this will become the new context of requests of this request when it is in component B, when this

37
00:03:01,610 --> 00:03:05,750
request is again sent to its downstream service or downstream component.

38
00:03:06,230 --> 00:03:15,380
This whole information of these two span it is linked in one string will be sent to the component C

39
00:03:15,650 --> 00:03:16,770
as the context.

40
00:03:16,770 --> 00:03:25,190
So this will be the new spend that will be created in Component C and this unique span, it will be

41
00:03:25,190 --> 00:03:26,000
added to this.

42
00:03:26,330 --> 00:03:35,090
So if we look at this complete context information within a component, then that context information

43
00:03:35,090 --> 00:03:42,650
gives us the complete lineage of request where it originated, where it went and from there that this

44
00:03:42,650 --> 00:03:50,570
request has come to this particular component, so a complete trace can be deduced from context information.

45
00:03:50,570 --> 00:03:54,590
In this context, information is in case of study Peter Greste.

46
00:03:55,070 --> 00:04:00,220
It can be passed along with a step ahead as so in case of Yeager.

47
00:04:00,230 --> 00:04:06,230
If you debug this, or if you look at this DHCP request, you will find that this is an implementation

48
00:04:06,230 --> 00:04:06,830
information.

49
00:04:06,830 --> 00:04:10,580
But I'm letting you know so that you know how this works.

50
00:04:10,880 --> 00:04:15,230
So there is a header name called Wilbert Trace ID under that name.

51
00:04:15,860 --> 00:04:18,920
This particular header value will be passed.

52
00:04:19,460 --> 00:04:26,150
So obviously, this information will be different than the this information is passed to different components,

53
00:04:26,390 --> 00:04:28,640
depending upon the lineage of the request.

54
00:04:29,180 --> 00:04:36,830
But this is how each span will be recorded, so each band will have the complete lineage along with

55
00:04:36,830 --> 00:04:45,320
it as to where this request originated from and where it flowed from, when it reached to a particular

56
00:04:45,320 --> 00:04:45,800
component.

57
00:04:45,800 --> 00:04:57,410
So when this request is in span than it is in E, then this span in EE knows that its parent is actually

58
00:04:57,770 --> 00:04:58,760
spend it.

59
00:04:59,150 --> 00:05:01,790
And because there is no parent of spend it.

60
00:05:02,090 --> 00:05:05,150
So that means this was the first component that received the request.

61
00:05:05,150 --> 00:05:09,410
So this is the way Jigar can connect.

62
00:05:09,410 --> 00:05:16,760
All these span of press information from these individual spans into a cohesive single trace.

63
00:05:17,840 --> 00:05:26,270
So let's go ahead and actually implement it and see how we can achieve this space by using Yaga in a

64
00:05:26,330 --> 00:05:27,530
distributed system.
