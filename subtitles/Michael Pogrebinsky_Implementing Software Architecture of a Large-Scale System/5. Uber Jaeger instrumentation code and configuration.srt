1
00:00:01,770 --> 00:00:08,100
The first part of distributor tracing requires us to do instrumentation of our Web application and services.

2
00:00:08,460 --> 00:00:11,730
So let's first see how we have done that instrumentation.

3
00:00:12,360 --> 00:00:14,100
So this is web application.

4
00:00:15,000 --> 00:00:19,500
What we have done over here is that it is setting start verifying where all the settings are there.

5
00:00:20,160 --> 00:00:28,950
At the bottom of this file, we have provided configuration for the tracer and disk configuration provides

6
00:00:28,950 --> 00:00:30,300
what kind of sampler we want.

7
00:00:30,330 --> 00:00:36,270
We can have different kind of sampler, we can a probabilistic sampler or we can have this kind of sampler,

8
00:00:36,840 --> 00:00:42,150
which is constant, which will always sample any request that is going on.

9
00:00:42,150 --> 00:00:48,300
But in a production system, it may not be feasible to sample every request so that we can do either

10
00:00:48,420 --> 00:00:54,480
random selection or certain percentage of requests, or we can use a sampler which is probabilistic

11
00:00:54,480 --> 00:00:55,050
in nature.

12
00:00:55,110 --> 00:00:57,300
There are adaptive samplers as well.

13
00:00:57,540 --> 00:00:58,890
A lot of smart stuff there.

14
00:00:59,370 --> 00:01:03,330
So that is something that we can choose while we are setting up the configuration.

15
00:01:03,900 --> 00:01:10,890
Then the next theoretical thing that we set over here is that we let this client library know where

16
00:01:10,890 --> 00:01:14,090
the agent is, right?

17
00:01:14,100 --> 00:01:17,370
So generally the agent will be localhost.

18
00:01:17,370 --> 00:01:23,940
In this case, we have particular agent because in our Docker setup, this is this will be the container

19
00:01:23,940 --> 00:01:24,360
host.

20
00:01:24,960 --> 00:01:27,540
So this can be set appropriately, whatever it is.

21
00:01:28,050 --> 00:01:33,420
The point is that this host and Port of the Yaga region needs to be specified.

22
00:01:34,170 --> 00:01:39,720
Then the other thing that we have provided over here is we have given the name of this application as

23
00:01:39,720 --> 00:01:40,080
web.

24
00:01:40,440 --> 00:01:43,020
So this will be reported in the press report.

25
00:01:43,170 --> 00:01:46,020
So that's one big part of this setting.

26
00:01:46,020 --> 00:01:50,370
And then the next part is that the functions that we have are APIs.

27
00:01:51,540 --> 00:01:54,050
So APIs, we have to instrument.

28
00:01:54,060 --> 00:02:00,210
We do not need to instrument each and everything, but those APIs, which we are interested in.

29
00:02:00,540 --> 00:02:01,620
So let me show you this.

30
00:02:01,920 --> 00:02:03,430
So this is a card API.

31
00:02:03,450 --> 00:02:05,340
This does not have any instrumentation.

32
00:02:05,340 --> 00:02:08,130
This starts with like a regular function.

33
00:02:08,550 --> 00:02:17,760
But if I look at this product API, this start with a special statement call with tracer start spun.

34
00:02:17,760 --> 00:02:19,260
Get product as fun.

35
00:02:19,800 --> 00:02:25,410
So this is all we need to do to instrument this particular API.

36
00:02:25,740 --> 00:02:34,290
We just need to begin this API with this particular statement, and this API will get instrumented.

37
00:02:35,340 --> 00:02:40,530
So similarly, whichever function we are interested in, so let's say we are interested in or does function,

38
00:02:40,980 --> 00:02:43,350
we have instrumented dysfunction as well.

39
00:02:43,830 --> 00:02:47,520
Likewise, we have instrumented certain other functions also.

40
00:02:47,520 --> 00:02:48,930
So let's say this create order.

41
00:02:49,350 --> 00:02:51,540
It's a long running API in our system.

42
00:02:51,780 --> 00:02:52,860
We have instrumented.

43
00:02:52,860 --> 00:02:55,200
This has been so two things we have done.

44
00:02:55,530 --> 00:03:01,980
One, we have instrumented these functions using these statements, three statements we have provided

45
00:03:01,980 --> 00:03:03,990
settings file to created to set.

46
00:03:04,680 --> 00:03:11,370
And the third thing that we have to do is when we create the Docker image for our web application,

47
00:03:11,370 --> 00:03:16,590
we'll have to install open tracing and Yeager client dependency.

48
00:03:16,590 --> 00:03:21,540
So that's all we need to do to get this thing going for our application.

49
00:03:22,080 --> 00:03:27,450
Now, let's see, what do we need to do at our services and to instrumental services?

50
00:03:28,380 --> 00:03:35,520
What we do over here is that first we include the dependency for that we have port dependency in Common

51
00:03:35,520 --> 00:03:38,070
Library because it is included in every service.

52
00:03:38,550 --> 00:03:42,570
So in bombed out example of Common Library if you go down.

53
00:03:46,050 --> 00:03:54,360
There we have put this dependency of open tracing that is open tracing Spring Yaga cloud start started.

54
00:03:54,370 --> 00:04:03,810
So this deep dependency that we have for this will include the Spring Cloud Yegor integration into our

55
00:04:03,810 --> 00:04:04,380
project.

56
00:04:04,380 --> 00:04:08,610
And what that means is every service will get instrumented.

57
00:04:08,610 --> 00:04:16,440
So any function that our service exposes that will get automatically exposed or that will automatically

58
00:04:16,440 --> 00:04:17,160
get raised.

59
00:04:17,910 --> 00:04:19,650
So now what do we need to worry about?

60
00:04:20,010 --> 00:04:24,330
We don't need to worry about Airbus, but wherever we are calling other functions.

61
00:04:24,690 --> 00:04:30,060
And if you want to create a trace over there, then those are the places where we have to manually add

62
00:04:30,210 --> 00:04:31,080
instrumentation.

63
00:04:31,080 --> 00:04:34,380
So let me give you an example, and that will make it more clear.

64
00:04:34,980 --> 00:04:39,520
So let's say this gateway is dead here.

65
00:04:39,990 --> 00:04:45,180
This particular library will be in red like it will be included in any other service.

66
00:04:45,570 --> 00:04:52,950
All we need to do over here is go to configured properties file, and we have to just say that tracing

67
00:04:52,950 --> 00:05:00,040
yaga anywhere we like to set it up and we'll have to tell through the configuration that we're younger

68
00:05:00,090 --> 00:05:02,850
age and dislocated its host and forward information.

69
00:05:02,850 --> 00:05:06,060
That's pretty much the same thing we did in web application as well.

70
00:05:07,590 --> 00:05:10,020
So there's something that we have done on gateway services.

71
00:05:10,320 --> 00:05:12,960
Data services only has EBAs.

72
00:05:12,960 --> 00:05:17,130
There is nothing fancy going on over there, so they will all get instrumented.

73
00:05:17,940 --> 00:05:20,790
So similarly, that's a ordered service.

74
00:05:21,330 --> 00:05:27,210
Now let let me before going to our service, let me show you products of its services again, a regular

75
00:05:27,210 --> 00:05:27,990
kind of service.

76
00:05:29,070 --> 00:05:34,040
In the sense that there are no asynchronous API, you were there, it's not calling any other service,

77
00:05:34,040 --> 00:05:35,520
so that way it is not special.

78
00:05:35,520 --> 00:05:42,570
So the only thing that we need to do over here is that we need to set these properties here, this property,

79
00:05:42,930 --> 00:05:44,380
you're going to enable us to follow.

80
00:05:44,880 --> 00:05:49,160
But we'll have to enable this to do to get this tracing going.

81
00:05:49,170 --> 00:05:51,450
So there's the switch for Hugo tracing.

82
00:05:52,450 --> 00:05:54,520
Now, this order service is special.

83
00:05:54,910 --> 00:05:58,510
This is special for a couple of reasons.

84
00:05:59,230 --> 00:06:03,730
And we noticed that this order service makes a call to inventory service.

85
00:06:04,220 --> 00:06:08,050
So this is where we want to add certain explanatory statements.

86
00:06:08,050 --> 00:06:12,550
We want to determine when did we actually call the duty service?

87
00:06:12,820 --> 00:06:18,760
The inventory service API will automatically get an instrumented because we have enabled to over there.

88
00:06:19,180 --> 00:06:25,600
But the point where we are calling in military service, we may like to add some extra statements over

89
00:06:25,600 --> 00:06:25,840
there.

90
00:06:26,470 --> 00:06:30,040
So that is one special point where we may have put out some port.

91
00:06:31,360 --> 00:06:38,290
Then other special thing that can happen is that if we make this create order where we reserve inventory,

92
00:06:38,290 --> 00:06:42,280
we make that part asynchronous and it no longer means synchronous.

93
00:06:42,940 --> 00:06:48,640
Then also, we'll have to do special arrangements to transfer the context.

94
00:06:49,060 --> 00:06:53,140
This context, we discussed that it is transferred to as typical.

95
00:06:53,800 --> 00:07:00,730
But when we make our service asynchronous, where we will be sending messages to a queue and after some

96
00:07:00,730 --> 00:07:07,120
time when service resumes by reading that message from the queue, then we would have lost the context

97
00:07:07,630 --> 00:07:14,980
unless in that message itself, we save that context or something like that will have to do for asynchronous

98
00:07:14,980 --> 00:07:15,430
services.

99
00:07:15,430 --> 00:07:19,510
And that's something that we have done in case of order service.

100
00:07:19,510 --> 00:07:23,290
So let's look at those two changes a little more closely.

101
00:07:24,310 --> 00:07:27,040
That's the only thing that we want to understand.

102
00:07:27,070 --> 00:07:32,950
If we do not have these special cases, we had actually good to go with this minimal configuration and

103
00:07:32,950 --> 00:07:35,460
we will get distributed trays.

104
00:07:35,830 --> 00:07:42,580
But we're doing certain special things over here just to know to what extent we can do this.

105
00:07:42,580 --> 00:07:46,180
Distributed tracing, especially asynchronous flows, are important.

106
00:07:46,400 --> 00:07:52,180
And I know we haven't discussed asynchronous flow in the context of this demonstration, but later on,

107
00:07:52,180 --> 00:07:56,470
when we actually enable asynchronous flow, this will become important.

108
00:07:56,470 --> 00:08:02,470
But because we are discussing distributed pacing right now, so we will discuss it anyway for asynchronous

109
00:08:02,470 --> 00:08:02,740
flow.

110
00:08:03,100 --> 00:08:05,740
So let's first look at our inventory client.

111
00:08:06,460 --> 00:08:12,790
So here is the line that's in process directly.

112
00:08:12,790 --> 00:08:14,230
There is inventory client.

113
00:08:14,230 --> 00:08:23,020
So this inventory client is the client for which we have written quotes and reserve inventory.

114
00:08:24,040 --> 00:08:27,970
There is an as strategic line if I show you that.

115
00:08:28,360 --> 00:08:33,390
So this has declined and it's making a call to inventory service.

116
00:08:33,580 --> 00:08:34,960
Right now, we had an order service.

117
00:08:35,380 --> 00:08:40,990
We are making a call to inventory service and there is decline that we have put over here.

118
00:08:41,570 --> 00:08:49,540
If we do not instrument this client, then what will happen is that the context information which was

119
00:08:49,540 --> 00:08:56,740
otherwise dead will not be propagated to the inventory inventory service.

120
00:08:57,070 --> 00:09:02,440
And the call that we will make to inventory service will not get connected with this particular request.

121
00:09:03,280 --> 00:09:16,060
So here what we have done is we have injected the context into this particular strategic line so that

122
00:09:16,060 --> 00:09:22,210
it can pass on this particular context to the inventory service.

123
00:09:22,750 --> 00:09:33,490
So here we will retrieve the context from the tracer object and we will then inject this into our client

124
00:09:33,490 --> 00:09:37,120
so that there is some implementation we need to do here.

125
00:09:37,390 --> 00:09:43,420
We can take any line and because tracer code does not know what client we are going to use.

126
00:09:43,870 --> 00:09:50,710
So we will have to create an adapter over here, which will do the job of taking those headers in a

127
00:09:50,710 --> 00:09:51,700
serialized form.

128
00:09:51,700 --> 00:09:56,920
And then it will add those items into the new client that we have created.

129
00:09:56,920 --> 00:09:58,400
So you can take a look at the code.

130
00:09:59,230 --> 00:10:00,820
Nothing very hard over here.

131
00:10:01,120 --> 00:10:10,060
We just need to understand that ultimately this is the serialized form of context and this is somehow

132
00:10:10,060 --> 00:10:12,760
we need to pass to the next service.

133
00:10:12,760 --> 00:10:13,890
So this is all we are doing.

134
00:10:13,900 --> 00:10:20,470
We are we have retrieved this from the current context that said from be, we are trying to call CE.

135
00:10:20,470 --> 00:10:21,930
So we are in B right now.

136
00:10:21,940 --> 00:10:28,720
We have retrieved this context and the claim that we have created in B for C, we are actually giving

137
00:10:28,720 --> 00:10:30,100
that claimed this information.

138
00:10:30,580 --> 00:10:33,250
That is the context that you need to pass.

139
00:10:35,140 --> 00:10:36,640
So that's what is happening over here.

140
00:10:37,130 --> 00:10:38,650
Rest all other places.

141
00:10:38,650 --> 00:10:47,500
We do not have this kind of chain unless it is our gateway service or gateway service knows how to pass

142
00:10:47,620 --> 00:10:50,930
these context because that's the job of gateway services.

143
00:10:51,050 --> 00:10:56,130
Said out a service, so that service has already provided that implementation.

144
00:10:56,520 --> 00:10:58,530
But let's it if this is a product service.

145
00:10:58,620 --> 00:11:01,650
There's not going to call any of the service or doesn't need to do anything.

146
00:11:02,070 --> 00:11:04,980
It will be instrumented and that's enough for it.

147
00:11:05,370 --> 00:11:10,890
But in case of ATA service, which one which is going to call inventory service here, we'll have to

148
00:11:10,890 --> 00:11:17,040
do something special for a client and that's what we are doing over here.

149
00:11:18,120 --> 00:11:22,740
So now we understand this particular case where we have an SDP client.

150
00:11:22,860 --> 00:11:27,030
What do we need to do to propagate trace context?

151
00:11:27,930 --> 00:11:30,570
Now let's see the case of a message queue.

152
00:11:31,140 --> 00:11:35,460
So when we are saving a message in a message queue, what do we do?

153
00:11:35,730 --> 00:11:39,690
And when we are retrieving that message from a message in What do we do?

154
00:11:40,350 --> 00:11:47,090
So here what we have done is this order consumer is the one which will consume the message and order

155
00:11:47,090 --> 00:11:49,740
to reduce is the one which will produce the message.

156
00:11:50,010 --> 00:11:58,080
So when we produce the message, what we have done is we are injecting this spam context, meaning the

157
00:11:58,080 --> 00:12:04,320
trace context, which is that in this application, this request right now we are injecting into an

158
00:12:04,330 --> 00:12:04,920
adapter.

159
00:12:05,190 --> 00:12:10,110
And from here, we will extract it and we will put it into our message.

160
00:12:10,770 --> 00:12:15,340
So this is where our messages basically queue order.

161
00:12:15,810 --> 00:12:19,290
And this is where we will set the context.

162
00:12:19,830 --> 00:12:26,640
So all we have to do is from the current trace object, retrieve the context and put that after realizing

163
00:12:26,640 --> 00:12:30,510
that context for that and to message, you object.

164
00:12:30,900 --> 00:12:36,990
And when we are retrieving this message at that time, what we can do is we can.

165
00:12:40,350 --> 00:12:49,470
Extract this context from the message, and once we have extracted it, then we can create a new span

166
00:12:49,800 --> 00:12:57,990
using that particular context so that where the new span that will be created in the consumer code will

167
00:12:57,990 --> 00:13:06,780
get instrumented and it will get linked to the original context for which this order is being processed

168
00:13:06,780 --> 00:13:09,650
or this consumer is doing processing.

169
00:13:09,660 --> 00:13:14,790
So that way we can even instrument asynchronous flows as well.

170
00:13:15,480 --> 00:13:17,610
So that's the core part of it.

171
00:13:18,000 --> 00:13:26,910
Now, the next thing that we need to do is we need to go to our work station and then we will see distributed

172
00:13:26,910 --> 00:13:28,190
tracing in action.

173
00:13:28,200 --> 00:13:29,430
So let's go ahead and do that.
