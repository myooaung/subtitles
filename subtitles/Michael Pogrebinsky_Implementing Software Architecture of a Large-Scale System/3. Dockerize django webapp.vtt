WEBVTT
1
00:00:02.060 --> 00:00:08.330
Now we will actually containerized our system, so we will start with that application.

2
00:00:08.870 --> 00:00:13.460
And then one by one with each component, we will containerized them.

3
00:00:14.090 --> 00:00:16.400
So let's first start with that application.

4
00:00:17.540 --> 00:00:23.330
Now, in order to containerised our web application, what we will have to do is we will have to take

5
00:00:23.870 --> 00:00:25.640
a Linux image.

6
00:00:25.640 --> 00:00:29.810
In this case, we will take Ubuntu Linux image Docker image.

7
00:00:30.410 --> 00:00:32.990
So that will form the base image.

8
00:00:33.470 --> 00:00:37.760
On that base image, we will install the required software.

9
00:00:37.760 --> 00:00:40.340
In this case, it is by 10 engine.

10
00:00:41.240 --> 00:00:49.140
Once we are done installing the required software, then we will deploy it by then build on that.

11
00:00:49.160 --> 00:00:53.450
So we will copy the Python archive that we have.

12
00:00:54.080 --> 00:00:54.980
We will deploy it.

13
00:00:55.670 --> 00:01:02.270
So once we do all that, that will create a Docker image, and that Docker image can be used to run

14
00:01:02.810 --> 00:01:04.640
as a double container.

15
00:01:04.940 --> 00:01:08.150
And this Docker container will be our web application.

16
00:01:08.160 --> 00:01:09.890
So that's how we are going to do it.

17
00:01:10.220 --> 00:01:14.210
So once we see how actually it works, it will become more clear.

18
00:01:14.780 --> 00:01:18.890
So let's go ahead and actually create this web application container.

19
00:01:20.310 --> 00:01:24.300
For that, we will go to the cloud machine where we have our big.

20
00:01:25.690 --> 00:01:26.980
We will connect to this machine.

21
00:01:31.090 --> 00:01:33.880
Now that we are connected to the very machine.

22
00:01:34.810 --> 00:01:41.530
Let's check out Variabilities, so let's first go to the project directly and there for web application,

23
00:01:41.530 --> 00:01:43.030
we will go into web directly.

24
00:01:43.690 --> 00:01:46.090
So let's list all the files that are there.

25
00:01:46.750 --> 00:01:49.990
So this is be evaluated or tarred or GZ.

26
00:01:50.380 --> 00:01:51.490
It's a gun zip file.

27
00:01:51.640 --> 00:01:56.890
So we have created a zip file of the entire python application.

28
00:01:56.890 --> 00:01:58.630
So this is what we are calling as Python.

29
00:01:58.870 --> 00:02:03.400
And this is what we need to deploy on a Docker container image.

30
00:02:05.350 --> 00:02:11.440
Now, one more thing that we need before we do that is whether the Docker is installed on this machine,

31
00:02:11.440 --> 00:02:12.700
so Docker is not installed.

32
00:02:12.710 --> 00:02:20.320
So if I do Docker, it says that the command not found, which pretty much means that Docker is not

33
00:02:20.320 --> 00:02:22.240
installed, so we need to install Docker.

34
00:02:22.450 --> 00:02:26.440
So for that, we will go into a project group directly there.

35
00:02:26.450 --> 00:02:33.900
We will go into Ben directly and then we have a script called Install Docker Datasets.

36
00:02:33.910 --> 00:02:36.670
We will make use of this script to install Docker.

37
00:02:36.700 --> 00:02:37.960
So let's go ahead and do that.

38
00:02:46.080 --> 00:02:50.580
So the installation has started, this installation will take some time.

39
00:02:51.090 --> 00:02:55.440
So in the meantime, we're going to positively do deal and come back once it is done.

40
00:03:01.260 --> 00:03:03.120
OK, so Dzhokhar is in store.

41
00:03:03.480 --> 00:03:04.530
Let's just check.

42
00:03:06.890 --> 00:03:09.760
OK, so Docker command is recognized now.

43
00:03:10.480 --> 00:03:15.290
Now what we can do is we can check what images are there on our system right now.

44
00:03:16.830 --> 00:03:24.210
So the only image that we have on our system is Hello World image and that God downloaded as part of

45
00:03:24.240 --> 00:03:25.830
Docker installation itself.

46
00:03:25.840 --> 00:03:31.810
So this is where this Hello World image was downloaded as part of the Docker installation, so I don't

47
00:03:31.810 --> 00:03:34.380
think that we don't have any images.

48
00:03:34.890 --> 00:03:37.350
So these images, they are very much like.

49
00:03:38.570 --> 00:03:41.450
What of machinery is just in case you haven't used before?

50
00:03:42.680 --> 00:03:46.490
The only difference is these are very lightweight images.

51
00:03:47.060 --> 00:03:49.010
So there are, of course, many differences.

52
00:03:49.020 --> 00:03:54.200
But David, the best way to imagine the difference is that this is a lightweight virtual machine image.

53
00:03:55.160 --> 00:04:04.100
OK, so now our doctor is installed and we are ready to create our replication image, which we will

54
00:04:04.130 --> 00:04:07.340
use to create the web application container.

55
00:04:08.000 --> 00:04:09.380
So let's go ahead and do that.

56
00:04:11.360 --> 00:04:17.390
For that, we will go to Docker directly in Project through directly there.

57
00:04:17.390 --> 00:04:24.440
Inside that, we will go to web directly where we have all the necessary configuration that is required

58
00:04:24.440 --> 00:04:29.660
to create a Docker image for that application.

59
00:04:29.690 --> 00:04:35.270
So the important file that we need over here is this Docker file.

60
00:04:36.140 --> 00:04:39.200
So let's open this and understand what is there in this Docker file.

61
00:04:43.020 --> 00:04:51.930
OK, so the first statement, the configuration statement over here it is from Ubuntu, which means

62
00:04:52.200 --> 00:04:57.960
start from the base Ubuntu Linux image because we have not specified any version over here.

63
00:04:58.500 --> 00:05:04.320
So this will actually download the latest Ubuntu image.

64
00:05:05.790 --> 00:05:07.950
So this is where we are right now.

65
00:05:08.220 --> 00:05:15.420
This statement will download this Docker Linux image of Ubuntu flavor and latest version.

66
00:05:16.350 --> 00:05:20.460
Then we can ignore these installation of utility tools.

67
00:05:21.180 --> 00:05:28.250
So here whatever you normally do on a machine to prepare it to run software.

68
00:05:28.260 --> 00:05:33.960
So let's say we have a machine and on which we want to run by then applications.

69
00:05:33.960 --> 00:05:40.860
So on that machine, we'll have to install certain software so we will run certain commands to execute,

70
00:05:41.220 --> 00:05:44.670
to install that software and same thing we are doing over here.

71
00:05:45.300 --> 00:05:52.830
We are running those Linux commands that will install this software so that these Linux command, I

72
00:05:52.830 --> 00:05:59.310
said we can ignore them because they are not installing anything that we really need to execute our

73
00:05:59.880 --> 00:06:00.450
application.

74
00:06:00.870 --> 00:06:08.040
These are general networking tools, sometimes useful in case you are debugging why you are not able

75
00:06:08.040 --> 00:06:13.560
to connect something, or let's say there is a steep incline to do some local testing.

76
00:06:14.430 --> 00:06:17.640
So for our current purpose, we can ignore them.

77
00:06:18.150 --> 00:06:26.460
Then the next statement is run and this will run the APT Get update and install Python three.

78
00:06:27.180 --> 00:06:31.860
So this is these are Linux commands to execute a software.

79
00:06:32.070 --> 00:06:39.480
In this case, we are installing Python and run is how you say in Docker file configuration that you

80
00:06:39.480 --> 00:06:41.250
are supposed to run this particular command.

81
00:06:41.880 --> 00:06:48.560
Similarly, we will install certain other Python packages that we need while we are running out of our

82
00:06:48.650 --> 00:06:49.260
application.

83
00:06:49.860 --> 00:06:56.640
Then other things that we are doing over here is that we have created a directory Meridia this BYU a

84
00:06:56.670 --> 00:06:57.180
directory.

85
00:06:57.690 --> 00:07:03.520
We have created this directory because here we are going to deploy our by 10 boot.

86
00:07:04.620 --> 00:07:10.050
The next important thing that we are doing over here to which we need to pay attention is this copy

87
00:07:10.050 --> 00:07:10.530
command.

88
00:07:11.130 --> 00:07:17.970
So copy command, what it will do is from the current directory where we are in right now, let's have.

89
00:07:17.970 --> 00:07:24.420
And while we are creating an image, we will give that command the context directly so that starting

90
00:07:24.420 --> 00:07:31.180
from that context directly, it will look for image directly and in that image directly.

91
00:07:31.200 --> 00:07:35.040
This command expects Python Archive to be dead.

92
00:07:35.430 --> 00:07:39.900
So this is where we will start by then archive from there.

93
00:07:39.930 --> 00:07:47.520
This command will copy this by it, and I go in to the directory that we just created over here.

94
00:07:48.510 --> 00:07:57.780
So that is how we copy any file from our local machine to Docker image so that that's how we do it.

95
00:07:58.230 --> 00:08:05.040
And if we are to run any command, then we can just use this run command of Docker file and then we

96
00:08:05.040 --> 00:08:07.830
can run Docker command in front of that.

97
00:08:08.730 --> 00:08:14.490
The next important thing that we are doing over here is this command that you see over here.

98
00:08:15.090 --> 00:08:20.970
Now, once an image just launched, it is supposed to run a software.

99
00:08:21.180 --> 00:08:22.750
So how do we run that software?

100
00:08:22.770 --> 00:08:24.030
There are two ways of doing it.

101
00:08:24.540 --> 00:08:28.170
One is using Docker and three point configuration.

102
00:08:28.200 --> 00:08:31.810
Docker entry point configuration will point to a script.

103
00:08:32.070 --> 00:08:34.530
You will see that in some other configuration.

104
00:08:34.980 --> 00:08:38.670
In this web application configuration, we do not have that, but that's fine.

105
00:08:39.600 --> 00:08:40.560
We will see it later.

106
00:08:40.980 --> 00:08:47.010
We just need to remember that that is one way of starting an application in a Docker container when

107
00:08:47.010 --> 00:08:49.620
we launch that image as a container.

108
00:08:50.340 --> 00:08:53.610
So the Docker entry point takes a script as an argument.

109
00:08:54.000 --> 00:09:01.710
So in that script as what Docker container will launch, the other way is that we can give it a barometer,

110
00:09:02.070 --> 00:09:06.240
a command that it can launch so that command.

111
00:09:06.240 --> 00:09:15.690
What we have given over here is that use Guinea gone to launch this Python application, bind it with

112
00:09:15.720 --> 00:09:20.040
certain ports and with three workers.

113
00:09:20.400 --> 00:09:23.010
So this is a standard way of.

114
00:09:24.120 --> 00:09:29.820
Launching a python application using Unicode, so we have used that because that is what we will need

115
00:09:29.820 --> 00:09:35.490
in the production bug when we launch our application for development purpose.

116
00:09:35.610 --> 00:09:41.490
So let's say right now we are going to do this later on, we will use this unicorn, but for now, we

117
00:09:41.490 --> 00:09:42.510
are not going to use it.

118
00:09:42.810 --> 00:09:48.900
So the way we are going, so what we are going to do is we will provide a configuration to override

119
00:09:48.900 --> 00:09:49.470
this command.

120
00:09:49.470 --> 00:09:57.120
So if we supply any parameters to Docker image while we are running it as a container, it will override

121
00:09:57.120 --> 00:09:57.750
this command.

122
00:09:58.290 --> 00:10:05.850
So this is something that you can look more by reading Docker documentation, or you can see various

123
00:10:06.210 --> 00:10:10.710
configurations that are there that we have done for various components.

124
00:10:10.710 --> 00:10:18.090
And that will give give you a very good idea of how Docker configuration is done and how images are

125
00:10:18.150 --> 00:10:20.220
launched to run a particular software.

126
00:10:20.520 --> 00:10:23.510
So you can take a look at that right now.

127
00:10:23.520 --> 00:10:24.480
We will just move on.

128
00:10:25.590 --> 00:10:28.890
So this is how our Docker configuration is.

129
00:10:28.890 --> 00:10:33.300
So this this has all the information to create a Docker image.

130
00:10:34.410 --> 00:10:41.250
Now, one dependency over here is that there'd be said that we are going to deploy the Python archive

131
00:10:41.520 --> 00:10:42.590
on this Docker image.

132
00:10:42.600 --> 00:10:44.070
So where are we going to pick it from?

133
00:10:44.760 --> 00:10:54.190
We saw that in the Docker file that it is expecting to pick it up from this image directly.

134
00:10:54.780 --> 00:10:57.420
So this image directly could have had any name.

135
00:10:57.990 --> 00:10:59.850
We have given it name of image.

136
00:10:59.880 --> 00:11:04.410
You can give it anything else, but we have to give it.

137
00:11:04.650 --> 00:11:08.630
Give the part of that file that we will copy.

138
00:11:08.640 --> 00:11:15.090
We have created directly because we can put many other files in just one directly just for the management

139
00:11:15.090 --> 00:11:15.570
purpose.

140
00:11:16.200 --> 00:11:20.490
So this is precisely the directory that we have created over here.

141
00:11:21.510 --> 00:11:26.310
Image we could have created any other directory or we could have just put this stuff in the current

142
00:11:26.310 --> 00:11:27.150
directly itself.

143
00:11:28.320 --> 00:11:32.460
So let's go ahead and create Docker image now.

144
00:11:34.510 --> 00:11:43.420
For that, we will use this particular command dock at bay minus F DocuSign minus D.

145
00:11:43.700 --> 00:11:45.540
Indeed, a blue web dot.

146
00:11:45.560 --> 00:11:52.840
Now let me explain you this object so docker built here, billed as the command and we are instructing

147
00:11:52.840 --> 00:11:56.710
it to pick up Docker file by default.

148
00:11:57.010 --> 00:12:02.950
This command will pick up a file configuration file with the name Docker file, but let's say you have

149
00:12:02.950 --> 00:12:06.280
given this file some other name, then you can use minus have option.

150
00:12:07.240 --> 00:12:13.840
And then we are saying that whatever image you create using this Docker file tagged with this particular

151
00:12:13.840 --> 00:12:14.080
name.

152
00:12:14.080 --> 00:12:20.380
So we have given some unique name to this component and the last bit, as we are saying that this has

153
00:12:20.380 --> 00:12:27.910
the context directly so that this context directly becomes important when we are copying any file from

154
00:12:27.910 --> 00:12:29.260
the localhost.

155
00:12:29.680 --> 00:12:38.260
So in this case, let's say it is the host, and from this image directory, we are going to copy Python

156
00:12:38.260 --> 00:12:41.080
Argo, which we haven't copied over here, so we are going to copy it now.

157
00:12:41.500 --> 00:12:45.610
So for that purpose, that DOD directory is given, that is the context directly.

158
00:12:46.060 --> 00:12:51.010
So let's first copy the Python archive over here.

159
00:12:51.010 --> 00:12:52.300
Otherwise this will give an error.

160
00:12:52.690 --> 00:12:55.240
So it is there in there directly.

161
00:12:56.260 --> 00:12:58.630
So now let's copy this to image.

162
00:12:59.530 --> 00:13:07.510
OK, so the file is copied now we are really ready to run this particular baby.

163
00:13:07.510 --> 00:13:07.930
Come on.

164
00:13:08.140 --> 00:13:09.400
So let's go ahead and do that.

165
00:13:11.710 --> 00:13:16.840
I have not specified minus have Docker file option because by default, it will pick up Docker file

166
00:13:16.840 --> 00:13:17.160
only.

167
00:13:17.170 --> 00:13:20.200
So let's go ahead and run this OK?

168
00:13:20.350 --> 00:13:24.280
The context out of two is missing, so here is the context directly.

169
00:13:26.010 --> 00:13:31.110
So this is the first time we're are running Docker on this particular machine, so first thing that

170
00:13:31.110 --> 00:13:41.340
it is going to do is it is going to download this Ubuntu image and then it will install the Python libraries

171
00:13:41.340 --> 00:13:43.680
that we have mentioned in our Docker file.

172
00:13:44.190 --> 00:13:46.080
So this is going to take some time.

173
00:13:46.110 --> 00:13:49.020
We are going to pause the video here and come back once it is done.

174
00:13:52.470 --> 00:13:54.870
OK, so Docker image is built.

175
00:13:55.140 --> 00:13:58.470
Let's verify that, let me clear this.

176
00:14:01.170 --> 00:14:03.420
Let's run this command called Docker Images.

177
00:14:05.340 --> 00:14:08.190
This will list all the images that are there to be downloaded.

178
00:14:08.580 --> 00:14:10.530
You want to image, right?

179
00:14:11.460 --> 00:14:18.150
Because that's the best image for our web application and this is the image that we wanted to build.

180
00:14:18.150 --> 00:14:19.770
This is our web application image.

181
00:14:20.850 --> 00:14:26.760
Now that image is ready, the next thing that we are going to do is we are going to run this as a container.

182
00:14:27.360 --> 00:14:31.770
So for running this as a container, we will use Docker run command.

183
00:14:33.660 --> 00:14:40.830
This command takes some parameters while explaining those parameters of minus details, ransacking detachment

184
00:14:41.580 --> 00:14:48.690
and the container that will run it will be given a name there, and you will see that this name is useful.

185
00:14:49.020 --> 00:14:52.920
Whenever you want to interact with our container, we will use this name.

186
00:14:54.060 --> 00:15:02.190
Then the other barometer that we have given is that it should use the host network now host network

187
00:15:02.190 --> 00:15:05.400
is not something that we are going to use going forward.

188
00:15:06.000 --> 00:15:12.330
But for now, for keeping it simple in the beginning, we are using this network more as host.

189
00:15:12.570 --> 00:15:14.790
So this will use the host machine network.

190
00:15:16.170 --> 00:15:23.580
The last parameter that is dead is the image name or the image tag.

191
00:15:24.000 --> 00:15:31.560
So once we supply all these parameters, this will run this particular image in this particular network

192
00:15:31.560 --> 00:15:36.640
and it will it will give this container a name as that.

193
00:15:37.080 --> 00:15:40.260
So let's go ahead and actually run this.

194
00:15:49.880 --> 00:15:54.470
OK, so it has started a candidate, and this is the container ID.

195
00:15:55.100 --> 00:16:01.970
So let's go ahead and check the logs that are generated for this particular container that we can do

196
00:16:01.970 --> 00:16:04.430
as Docker logs miners have.

197
00:16:04.880 --> 00:16:07.850
And we can give the name of the container, which is where.

198
00:16:09.510 --> 00:16:17.220
So these are the log statements on a study out of Argentina, and this densest, as are container is

199
00:16:17.220 --> 00:16:19.080
running, there is absolutely no problem.

200
00:16:19.080 --> 00:16:20.550
We are not seeing any error message.

201
00:16:21.240 --> 00:16:22.950
So our container is running.

202
00:16:23.000 --> 00:16:29.250
Other thing that we can do to make sure that the container is running, we can do Docker piece so it

203
00:16:29.250 --> 00:16:31.620
will list all the processes that are running.

204
00:16:31.980 --> 00:16:39.900
And it says that there's a container of so insularity with this image and this particular name is running,

205
00:16:39.900 --> 00:16:47.340
and that particular image used this particular command to start an application.

206
00:16:48.180 --> 00:16:53.610
OK, so that means our web application container is running.

207
00:16:54.030 --> 00:16:59.910
Now we will interact with this web application container as if we are interacting with our application.

208
00:17:01.290 --> 00:17:09.120
So let's go ahead and do a small test to make sure that this is this our web application is indeed running.

209
00:17:09.570 --> 00:17:12.630
So we will use this command line utility called.

210
00:17:13.530 --> 00:17:17.400
It's initially typically available on Line X maquilas.

211
00:17:17.790 --> 00:17:21.960
It's a pretty useful comment on Windows, if you might have used postmen.

212
00:17:22.380 --> 00:17:26.790
That said, Dubai-based as jetpack later, this is also something like that.

213
00:17:28.020 --> 00:17:33.780
Now we will use Google to send an initiative request to our web application.

214
00:17:33.780 --> 00:17:40.230
So our web application is located on this localhost because we are using hostname to it.

215
00:17:41.010 --> 00:17:46.080
Remember, we give this parameter minus minus networkers minus minus network as host.

216
00:17:46.440 --> 00:17:52.140
So there's a using host network so we can use localhost for communicating with that container.

217
00:17:53.220 --> 00:17:57.800
So then the I'm not sure what happened over here.

218
00:17:57.810 --> 00:17:59.520
I'll just type it all over again.

219
00:17:59.940 --> 00:18:00.450
Cool.

220
00:18:03.430 --> 00:18:04.960
Port Numbers year 2000.

221
00:18:05.650 --> 00:18:07.210
So let's run this.

222
00:18:07.720 --> 00:18:09.550
So this has given us.

223
00:18:10.680 --> 00:18:14.020
Some HTML file over here.

224
00:18:14.040 --> 00:18:16.800
So it has printed that Steve will file on the console.

225
00:18:17.190 --> 00:18:22.320
So which means that our web application is returning back and as HTML file, which means Iris Dement

226
00:18:22.320 --> 00:18:24.990
is our web application is indeed running.

227
00:18:25.320 --> 00:18:26.880
We can do a dunsmore test.

228
00:18:27.240 --> 00:18:28.890
We can check its heartbeat.

229
00:18:28.890 --> 00:18:33.120
So we have implemented a are oral status on our web application.

230
00:18:33.570 --> 00:18:35.720
This should give us some response.

231
00:18:35.720 --> 00:18:37.200
So it has given us some response.

232
00:18:37.680 --> 00:18:44.280
It does basically it saying that the responses coming from host instance one, which is basically this

233
00:18:44.280 --> 00:18:48.000
will be reversed and the time of response it is giving.

234
00:18:48.570 --> 00:18:53.310
So that means our web application is running perfectly fine.

235
00:18:54.240 --> 00:19:01.140
So are one component is already running fine.

236
00:19:01.170 --> 00:19:03.150
Similarly, we can launch other containers.

237
00:19:04.350 --> 00:19:12.540
But before we do that, we will solve one little problem that we have to remember all these commands

238
00:19:12.540 --> 00:19:16.890
and these commands can become even more complex when we use more options.

239
00:19:18.060 --> 00:19:22.830
So we are going to simplify this by using Docker compose.

240
00:19:22.830 --> 00:19:29.700
So very soon we are going to go to Docker compose and see how we can make this a little more easier

241
00:19:29.700 --> 00:19:30.210
for us.

242
00:19:30.810 --> 00:19:38.820
But before we go there, let me also show you a useful command, a useful command that you can Docker

243
00:19:38.820 --> 00:19:47.370
command that you can execute to understand what is going on in Docker container so you can actually

244
00:19:47.520 --> 00:19:49.440
connect to that Docker container.

245
00:19:49.440 --> 00:19:56.040
Go inside that and see what filesystem is there, what finds are there and what processes are running

246
00:19:56.040 --> 00:19:57.120
inside that container.

247
00:19:57.570 --> 00:20:01.260
And we can do that using this Docker exact command.

248
00:20:01.260 --> 00:20:08.280
So Docker exec commands takes the name of a candidate and it takes the name of a command that you want

249
00:20:08.280 --> 00:20:09.990
to execute on that container.

250
00:20:10.920 --> 00:20:15.570
So you can give it any command in case you give it a shell.

251
00:20:16.770 --> 00:20:22.740
Then it will execute that shell on that particular container and that shell can take more commands from

252
00:20:22.740 --> 00:20:22.980
us.

253
00:20:23.460 --> 00:20:31.860
So we are going to use this particular combination of exec and a shell command as parameter to inspect

254
00:20:32.550 --> 00:20:34.830
what is going on inside a container.

255
00:20:34.830 --> 00:20:39.720
And that will give you a very good feel of what a Docker container is.

256
00:20:40.290 --> 00:20:41.580
So let's go ahead and do that.

257
00:20:41.820 --> 00:20:42.900
Let me clear this.

258
00:20:43.890 --> 00:20:49.920
OK, so let's connect the container Docker exact mine as it.

259
00:20:50.040 --> 00:20:53.610
It is basically as a barometer to say that it is interactive.

260
00:20:54.280 --> 00:21:02.970
So Docker exec minus 80 and then we will give the name of the container that is running and then we

261
00:21:02.970 --> 00:21:06.210
will give the name of the command that we want to execute.

262
00:21:07.160 --> 00:21:13.760
Once we do that, it has connected to a container, and that container, it seems, has got the name

263
00:21:13.910 --> 00:21:22.040
in the stands, one because it is using the network mode as host, so it is using host networks or it

264
00:21:22.040 --> 00:21:28.520
is giving us the name of that machine only the host machine itself, but we are really connected to

265
00:21:28.970 --> 00:21:30.050
the Docker container.

266
00:21:30.800 --> 00:21:37.480
The other sign of that is that we are connected as a route user over here for certain images.

267
00:21:37.490 --> 00:21:40.550
We do not want to be rude, but for our purpose.

268
00:21:40.910 --> 00:21:43.130
Generally, it is fine to operate as good.

269
00:21:43.400 --> 00:21:47.180
It's a security risk, but we are doing this.

270
00:21:47.180 --> 00:21:48.140
We're learning right now.

271
00:21:48.500 --> 00:21:49.990
So we'll go ahead as a rule.

272
00:21:50.030 --> 00:21:53.240
There is absolutely no problem in that for learning purposes.

273
00:21:54.290 --> 00:21:57.770
So we are connected to our container.

274
00:21:57.770 --> 00:22:01.670
We can see what processes are running inside the container.

275
00:22:02.960 --> 00:22:06.470
We can execute any command inside this container.

276
00:22:06.470 --> 00:22:08.150
We can go to the Java directly.

277
00:22:08.150 --> 00:22:11.150
We like the this is very much like we have.

278
00:22:11.150 --> 00:22:14.000
We are connected to another machine.

279
00:22:14.510 --> 00:22:20.810
So we were as it is through this terminal, we were connected to our cloud machine.

280
00:22:21.290 --> 00:22:21.590
All right.

281
00:22:21.770 --> 00:22:25.850
So does the machine that we were connected to on this machine.

282
00:22:26.420 --> 00:22:29.090
We launched a container.

283
00:22:30.250 --> 00:22:35.770
And now we are connected to that container as if we are connected to a machine.

284
00:22:36.340 --> 00:22:42.790
So they said this is why I said that this is very much like a virtual machine in that sense.

285
00:22:43.390 --> 00:22:52.240
So now let's come out of this at any point in time, you'll want to know whether your software is installed

286
00:22:52.240 --> 00:22:52.990
perfectly.

287
00:22:53.650 --> 00:22:55.060
Things are fine on your image.

288
00:22:55.060 --> 00:22:57.820
You can actually launch an image as a container.

289
00:22:58.120 --> 00:23:02.430
You can connect to it and you can find out if things are fine.

290
00:23:02.440 --> 00:23:07.090
So let's say if I want to see a better Python three is available over here, which we installed.

291
00:23:07.520 --> 00:23:10.870
So Python three is available, you can even take commands from us.

292
00:23:11.500 --> 00:23:14.680
So that's the way you can debug an image.

293
00:23:14.950 --> 00:23:16.420
So we are going to come out of it.

294
00:23:16.420 --> 00:23:17.310
Let's exit.

295
00:23:18.910 --> 00:23:21.400
OK, so we are back to our host machine.

296
00:23:22.520 --> 00:23:30.290
And we are done with the creation of verb application as a container, and now we have even run the

297
00:23:30.350 --> 00:23:31.850
application as a container.

298
00:23:32.120 --> 00:23:38.300
Now the next thing that we are going to do is we are going to run this using Docker compose utility.
