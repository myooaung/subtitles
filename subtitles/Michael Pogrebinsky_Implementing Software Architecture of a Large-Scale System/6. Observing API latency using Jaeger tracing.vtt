WEBVTT
1
00:00:01.420 --> 00:00:05.770
Now, let's go to ofWork Station, where we will implement Yago tracing.

2
00:00:06.160 --> 00:00:07.210
Let's connect to that.

3
00:00:07.930 --> 00:00:09.370
Let's wait for it to get connected.

4
00:00:14.170 --> 00:00:15.490
OK, we are connected.

5
00:00:17.240 --> 00:00:22.040
Let's go to a project directly and then Dr Demonstration directly.

6
00:00:24.780 --> 00:00:30.440
So these are the demonstrations that we have, and then let's go to tracing directly.

7
00:00:30.470 --> 00:00:31.690
So let's go there

8
00:00:35.160 --> 00:00:36.140
addressing directly.

9
00:00:36.140 --> 00:00:36.680
We have

10
00:00:39.780 --> 00:00:45.050
and Wi-Fi in Docker compose and fluent document for Fluent.

11
00:00:45.110 --> 00:00:49.880
We haven't made any changes, so logging centralised logging will be enabled as it is.

12
00:00:50.450 --> 00:00:55.310
The changes are there only for tracing that maybe their environment.

13
00:00:56.120 --> 00:01:05.600
So environment file, what we have done is we have added these this configuration to enable Yeager tracing

14
00:01:05.600 --> 00:01:14.690
for our services and we have provided host input information for the good agent.

15
00:01:15.090 --> 00:01:22.070
Now another thing that we have done is that we have provided a switch over here to demonstrate is synchronous

16
00:01:22.070 --> 00:01:22.310
flow.

17
00:01:22.340 --> 00:01:31.190
So first, we will look at the press report with synchronous flows and then we will make one of the

18
00:01:31.190 --> 00:01:35.870
order flows as asynchronous and we will see what kind of results we get for that.

19
00:01:37.010 --> 00:01:38.720
So that's environment variables.

20
00:01:38.720 --> 00:01:44.330
Actually, that is one thing which is missing over here, which should have been configured as environment

21
00:01:44.330 --> 00:01:45.110
variable only.

22
00:01:45.380 --> 00:01:54.080
But it is right now not an environment variable, and that is when we discussed this, that configuration

23
00:01:54.080 --> 00:01:59.600
say here the jiggered agent, there's the hostname that we have given.

24
00:01:59.600 --> 00:02:03.110
It will work because that's what it is in our current setup.

25
00:02:03.500 --> 00:02:07.310
But I'm going to change this and I'll make this as an environment variable.

26
00:02:07.310 --> 00:02:10.230
So you may see that change very well.

27
00:02:10.670 --> 00:02:16.130
Let's go back to our demonstration so that that's one thing we do not have in environment variables

28
00:02:16.130 --> 00:02:16.310
of.

29
00:02:18.410 --> 00:02:26.430
Now, let's look at Docker Compose, find in Docker Compose file fluently.

30
00:02:26.450 --> 00:02:28.940
We already had ElasticSearch cube on our debt.

31
00:02:29.480 --> 00:02:35.390
Now we have added Yegor Agent Yeager Collector and Yegor Kwadee.

32
00:02:35.840 --> 00:02:37.250
So let's look at them one by one.

33
00:02:37.760 --> 00:02:39.830
So first one is Yeager agent.

34
00:02:40.520 --> 00:02:44.840
Here we are getting this image directly from Docker registry.

35
00:02:45.890 --> 00:02:55.130
Then we have exposed some ports over here, so your agent will be contacted by our client to UDP.

36
00:02:55.130 --> 00:02:59.720
So that's why this here on this board, we have to mention it that this isn't usually your.

37
00:03:00.950 --> 00:03:06.380
Then the next thing that we need to specify what kind of storage will be used for storing this trace

38
00:03:06.380 --> 00:03:09.950
information, which is in the form of trace bands.

39
00:03:10.580 --> 00:03:14.630
So we have mentioned over here that it will be stored in ElasticSearch.

40
00:03:14.630 --> 00:03:17.540
So yet it does not host port information of ElasticSearch.

41
00:03:17.960 --> 00:03:22.220
It only needs to know the format in which it is going to store the message.

42
00:03:22.220 --> 00:03:24.260
So that's what we have specified over here.

43
00:03:24.980 --> 00:03:31.130
And then it needs to know where you're collected is and through this.

44
00:03:33.070 --> 00:03:40.210
Command line parameter, we have specified the host and board information of Yeager collected rest,

45
00:03:40.210 --> 00:03:43.540
everything is usually there's nothing special going on over there.

46
00:03:44.110 --> 00:03:50.950
Then we have Yeager collected again the images coming from Docker registry and we have exposed some

47
00:03:50.950 --> 00:03:52.310
required boards over here.

48
00:03:52.870 --> 00:04:01.120
He has to this type is ElasticSearch, and we have also provided the ElasticSearch host input information.

49
00:04:02.230 --> 00:04:09.190
So here we have specified ElasticSearch host input information and the number of shards.

50
00:04:09.220 --> 00:04:11.830
These are scalability related parameters.

51
00:04:12.160 --> 00:04:14.980
So we have kept them to their default values.

52
00:04:15.430 --> 00:04:18.140
So that's about Yeager collected.

53
00:04:18.160 --> 00:04:20.380
Again, nothing special going on over there.

54
00:04:20.530 --> 00:04:22.540
Yeager query again, nothing special.

55
00:04:23.080 --> 00:04:25.140
You must be operating from Docker registry.

56
00:04:25.210 --> 00:04:30.070
We are exposed some boards and the storage type is ElasticSearch.

57
00:04:30.490 --> 00:04:38.110
We have provided ElasticSearch location and that's about it so that this is pretty much that we need

58
00:04:38.110 --> 00:04:45.880
to do in terms of configuration for younger components and all of the installation.

59
00:04:45.880 --> 00:04:51.490
And all those things, as we know, is already taken care by Docker containers and these containers

60
00:04:51.490 --> 00:04:54.010
we are getting from Docker registry itself.

61
00:04:54.010 --> 00:05:00.400
So there is there isn't much to be done over here, and that's one beautiful thing about Docker containers

62
00:05:00.400 --> 00:05:01.570
or any other container.

63
00:05:02.650 --> 00:05:07.210
OK, so that's the configuration part.

64
00:05:07.210 --> 00:05:15.370
So all our components are configured and we have all environment variables in place now that we are

65
00:05:15.370 --> 00:05:16.600
ready to run our system.

66
00:05:16.810 --> 00:05:20.230
The only check that I will do is that I'll check if anything is running.

67
00:05:20.780 --> 00:05:22.270
Nothing is running, so we are clean.

68
00:05:22.690 --> 00:05:23.410
We are good to go.

69
00:05:23.620 --> 00:05:28.570
So let's start our system with the usual command of Docker compose.

70
00:05:30.010 --> 00:05:33.940
I just make sure that everything runs over here, because last time I think.

71
00:05:35.070 --> 00:05:36.210
I got some error, so.

72
00:05:39.530 --> 00:05:46.310
Last time we got an error where we had to again restart, we have to issue this command again, restart

73
00:05:46.310 --> 00:05:50.450
these containers, and it would hopefully we won't face that problem again.

74
00:05:52.450 --> 00:05:59.290
So here right now, it is downloading all the images from Docker registry once that is done.

75
00:06:00.340 --> 00:06:04.630
It is one by one start the components in the dependency order.

76
00:06:04.660 --> 00:06:06.640
Remember, we have said that dependency.

77
00:06:07.600 --> 00:06:11.780
So it's like it has successfully created the Docker containers.

78
00:06:11.800 --> 00:06:13.120
They are running right now.

79
00:06:13.870 --> 00:06:15.550
They will have to run to completion.

80
00:06:21.560 --> 00:06:24.650
The other that you can use this instead of Docker compose.

81
00:06:24.790 --> 00:06:27.350
Come on, we can use Docker command.

82
00:06:29.760 --> 00:06:33.850
OK, so this Docker container has started.

83
00:06:33.900 --> 00:06:36.300
So there are quite a few containers on this machine.

84
00:06:36.810 --> 00:06:42.270
What we will do is once test gear to service comes up, that will be an indication that a majority of

85
00:06:42.270 --> 00:06:46.590
these services would have come up or they would be ready to come up.

86
00:06:46.800 --> 00:06:50.850
So once this is up, then we will resume our demonstration against.

87
00:06:50.850 --> 00:06:52.590
We're going to wait for this.

88
00:06:52.590 --> 00:06:53.400
I'm going to pause.

89
00:06:53.400 --> 00:06:54.090
Do we do all?

90
00:06:56.350 --> 00:06:58.630
OK, so Argueta service has come up.

91
00:06:58.870 --> 00:07:02.260
Let's check our system once again.

92
00:07:03.790 --> 00:07:06.000
OK, so hopefully our system should be up.

93
00:07:06.010 --> 00:07:10.140
We can check that by actually connecting to our system.

94
00:07:10.150 --> 00:07:19.920
So let's take the IP address and connect to the load balancer that's log in first anywhere monitoring

95
00:07:19.940 --> 00:07:24.040
that that can be accessed even if we're not logged in.

96
00:07:24.760 --> 00:07:30.210
Because that's the purpose of that tab that if you want to debug where the problem is with services

97
00:07:30.220 --> 00:07:34.060
up or not, that we can do with the help of this monitoring tab.

98
00:07:34.600 --> 00:07:40.690
So log in is not required, but for other types, let's say like data, in-home log in is required.

99
00:07:40.690 --> 00:07:46.000
So now I have clipping services and I have got back Respawn's for online services.

100
00:07:47.260 --> 00:07:48.850
Database is fine.

101
00:07:49.810 --> 00:07:55.390
So everything should be OK right now, so we are ready to connect to our yaga UI.

102
00:07:55.900 --> 00:07:57.100
So let's click this link.

103
00:07:57.430 --> 00:07:58.780
This will take us to.

104
00:08:00.220 --> 00:08:07.100
Yeager homepage, and here right now, there are some services which are listed over there, so let's

105
00:08:07.100 --> 00:08:09.370
just check what do they show?

106
00:08:10.840 --> 00:08:14.020
So authorization service, it seems, has got some call.

107
00:08:15.940 --> 00:08:18.220
Let's see what's there in order service.

108
00:08:19.960 --> 00:08:28.290
So order service, the only goal right now is get service status, so there isn't much that does happen

109
00:08:28.300 --> 00:08:29.320
for the service.

110
00:08:29.860 --> 00:08:32.680
There isn't much that has happened for.

111
00:08:33.800 --> 00:08:39.170
Product service, again, this is get so status, there's just had a check mark for authorization,

112
00:08:39.170 --> 00:08:44.270
so it's because we have logged in once, so there will be a trace to within.

113
00:08:44.480 --> 00:08:49.970
This post should be the one where this login was done.

114
00:08:50.810 --> 00:08:56.600
So if you want to actually filter on the kind of request, we should be able to do that over here.

115
00:08:57.080 --> 00:09:01.250
So get service status, get user credits of these on these operations.

116
00:09:01.250 --> 00:09:02.510
Also, we can do a filter.

117
00:09:03.620 --> 00:09:07.830
So there are quite a few features over here that we can take advantage of.

118
00:09:08.360 --> 00:09:15.530
But the one that we are interested in right now is that belongs to order service that will be along

119
00:09:15.530 --> 00:09:15.980
Trace.

120
00:09:16.370 --> 00:09:18.020
And that's why we're interested in that.

121
00:09:18.020 --> 00:09:24.200
But there we do not have anything other than get service status, so we can get these messages over

122
00:09:24.200 --> 00:09:30.240
here once we create some product, once we create some order for that, we will need some data.

123
00:09:30.290 --> 00:09:32.240
There should be some products in our system.

124
00:09:33.490 --> 00:09:39.400
And right now, products are empty, so let's create digital if we hit this clear data button.

125
00:09:40.300 --> 00:09:42.010
This should create some products.

126
00:09:43.910 --> 00:09:48.230
Let's wait for that, so products are created, it's not just product, the entire data.

127
00:09:48.740 --> 00:09:50.870
So let's check for the status of product data.

128
00:09:50.870 --> 00:09:55.610
Is there inventory data that's there so we can buy some products now?

129
00:09:55.940 --> 00:10:02.450
Let's go to product page and let's buy the C programming language book.

130
00:10:03.410 --> 00:10:09.410
It's about two minutes of this that this two part let's go to cart and now we can create order.

131
00:10:11.570 --> 00:10:18.860
So the order is created now, there should be some trade statements, more statements for this sort

132
00:10:18.860 --> 00:10:19.310
of service.

133
00:10:19.370 --> 00:10:21.140
Let me move, Wayne, this business.

134
00:10:22.070 --> 00:10:24.440
So now we have got more three statements.

135
00:10:25.160 --> 00:10:30.890
So this one is for create order and the other one is for there would be some for guard.

136
00:10:31.460 --> 00:10:38.780
This similarly so there will be lots of requests that would have come to order service because this

137
00:10:38.780 --> 00:10:40.880
also host guard service.

138
00:10:41.270 --> 00:10:49.940
But the one we're interested is in is this create order API and this is originating from web application

139
00:10:49.940 --> 00:10:52.820
that we have instrumented web application.

140
00:10:53.210 --> 00:10:59.930
So here, if you see this, only in your services are listed over here, but they are in no particular

141
00:10:59.930 --> 00:11:00.770
order over here.

142
00:11:01.160 --> 00:11:05.390
But once we go inside this, this will be in a perfect order.

143
00:11:05.870 --> 00:11:08.750
This is the time consumed by the replication service.

144
00:11:08.750 --> 00:11:10.220
Not that it was doing anything.

145
00:11:10.640 --> 00:11:17.710
It was busy calling Gateway Service Gateway Service for the entire duration was busy calling or the

146
00:11:17.720 --> 00:11:20.960
service or the service did some processing.

147
00:11:20.960 --> 00:11:27.800
It did some database calls over here and some processing over here, and it does make a call to inventory

148
00:11:27.800 --> 00:11:28.130
service.

149
00:11:28.130 --> 00:11:33.230
So this is the one that we did manually instrumentation we wrote support for.

150
00:11:33.860 --> 00:11:40.070
This is basically here called inventory service, and this is where inventory service actually got started.

151
00:11:40.070 --> 00:11:47.180
So this is the duration where inventories of service processing and this is in order service where we

152
00:11:47.810 --> 00:11:49.100
call inventory service.

153
00:11:49.100 --> 00:11:55.460
So there is some time lost between network request and over here in response.

154
00:11:55.970 --> 00:12:04.100
So this way we can analyze the completeness of our workflow, starting from our web application down

155
00:12:04.100 --> 00:12:06.230
to the most downstream service.

156
00:12:06.560 --> 00:12:10.580
And for these services also, we can look into these database calls.

157
00:12:11.150 --> 00:12:17.870
So these are queries we can look at that what queries were made to a database or let's say this was

158
00:12:17.870 --> 00:12:19.310
deleted from card line.

159
00:12:19.820 --> 00:12:23.630
So we can check how much time each query is consuming.

160
00:12:24.140 --> 00:12:26.210
And let's say this order service is too long.

161
00:12:26.690 --> 00:12:28.630
And we do not want single spam.

162
00:12:28.640 --> 00:12:32.210
We want to find spans four different functions.

163
00:12:32.210 --> 00:12:35.930
Then we can create spans manually.

164
00:12:36.200 --> 00:12:39.590
By the way, we created it for inventory service client.

165
00:12:39.600 --> 00:12:40.970
So we like to do it manually.

166
00:12:41.360 --> 00:12:47.240
We haven't done that, but we have not done it because we were interested in what all component times.

167
00:12:47.750 --> 00:12:52.940
So this is good enough for us this day where we can analyze performance of our APIs.

168
00:12:53.870 --> 00:13:00.800
So there is one last thing that we need to check over here, and that is that right now, this whole

169
00:13:00.800 --> 00:13:02.210
call was synchronous.

170
00:13:02.870 --> 00:13:09.410
So what if, if we want this create order to be asynchronous, it should happen, really.

171
00:13:09.410 --> 00:13:15.350
In two steps, First Order requests should be accepted in the message queue and then orders would be

172
00:13:15.350 --> 00:13:19.820
picked up and it should be really processed and in ready service processing should be done.

173
00:13:20.270 --> 00:13:22.970
And along with the rest of the processing.

174
00:13:23.450 --> 00:13:29.900
So it should really happen in two steps which are separated by message, queue, produce and consume.

175
00:13:30.410 --> 00:13:39.060
So let's go ahead and restart our system with a changed configuration to see how asynchronous calls

176
00:13:39.060 --> 00:13:39.560
will behave.

177
00:13:40.190 --> 00:13:44.480
So for that, let's go to our system once again.

178
00:13:44.990 --> 00:13:50.000
Over here, we will go to environment variables and environment variables.

179
00:13:50.000 --> 00:13:52.430
We will come to order processed using.

180
00:13:52.850 --> 00:13:55.130
It is set to false right now.

181
00:13:55.490 --> 00:14:00.320
We will center to true and now we will save this.

182
00:14:00.320 --> 00:14:07.010
So but before I exit this, let me explain you this here we will use a local queue.

183
00:14:07.430 --> 00:14:10.520
We are not using any full fledged message queue.

184
00:14:10.820 --> 00:14:13.730
This local queue just simulates a message queue.

185
00:14:14.420 --> 00:14:17.090
It will do the processing of our order.

186
00:14:17.420 --> 00:14:23.570
The second step processing in a separate third circle mimic a message queue, giving our API a feel

187
00:14:23.570 --> 00:14:25.400
of asynchronous workflow.

188
00:14:26.060 --> 00:14:30.910
So let's go ahead and execute this for this first.

189
00:14:30.920 --> 00:14:34.160
Let's stop our order service.

190
00:14:39.270 --> 00:14:44.340
Then once it is stopped, we have to clean the container.

191
00:14:46.180 --> 00:14:50.860
And there it is, done now, we can start the orders of this.

192
00:14:55.010 --> 00:14:57.260
While it is starting, let's check the logs.

193
00:15:06.300 --> 00:15:11.220
So it is starting right now, it is the only service which is starting, so it should not take long

194
00:15:11.220 --> 00:15:11.520
time.

195
00:15:12.790 --> 00:15:13.160
OK.

196
00:15:13.180 --> 00:15:17.680
It has started in 19 seconds, so this looks good to some bad.

197
00:15:19.490 --> 00:15:27.860
OK, I can see that environment variable process isn't so it started over, get ordered out process

198
00:15:28.520 --> 00:15:31.520
is Ithink that is set through right now.

199
00:15:31.790 --> 00:15:38.240
So at any point in time, if you have to check what are the actual environment variables, are services

200
00:15:38.240 --> 00:15:40.310
running, this is a place to check that.

201
00:15:41.000 --> 00:15:42.350
OK, let's close below.

202
00:15:42.980 --> 00:15:46.760
And now let's go to you.

203
00:15:47.480 --> 00:15:50.590
And here we will create one more order.

204
00:15:50.600 --> 00:15:56.960
So for that, we will go to products that select this go to great book this time.

205
00:15:58.290 --> 00:15:59.790
Two units to guard.

206
00:16:00.120 --> 00:16:03.810
Let's go to guard and now let's create the order.

207
00:16:04.560 --> 00:16:07.380
So the order is in process to right now.

208
00:16:07.830 --> 00:16:13.980
It is not created, so it will be created, so that will have to go to orders.

209
00:16:14.160 --> 00:16:18.330
And here we see now the order has been processed and it is in created state.

210
00:16:18.780 --> 00:16:21.090
So it got processed asynchronously.

211
00:16:21.780 --> 00:16:25.660
Now let's go to the order, the order service.

212
00:16:25.680 --> 00:16:27.520
We have already selected one out of you.

213
00:16:27.710 --> 00:16:30.090
You know, that's to find traces.

214
00:16:31.380 --> 00:16:35.010
So this is the most recent race that we have.

215
00:16:35.640 --> 00:16:37.500
So here we have create order.

216
00:16:38.250 --> 00:16:46.200
And this was a few seconds ago and then the other one get orders is also a few seconds ago.

217
00:16:47.370 --> 00:16:50.660
Let's check this one to create order one.

218
00:16:50.680 --> 00:16:51.660
We are interested in.

219
00:16:52.920 --> 00:16:53.370
Now.

220
00:16:54.760 --> 00:17:02.580
Here, if we see this, this has actually happened in two steps, because if you see this web where

221
00:17:02.590 --> 00:17:09.970
that span has got over here, it said in the previous case, if we can go to that.

222
00:17:10.510 --> 00:17:12.940
Let me just filter.

223
00:17:12.940 --> 00:17:15.070
This will create order.

224
00:17:17.650 --> 00:17:18.040
Yeah.

225
00:17:18.430 --> 00:17:18.960
Daughter from.

226
00:17:19.360 --> 00:17:23.180
Let me just fill 30 places, so this is the previous one.

227
00:17:23.200 --> 00:17:30.420
If we look at the span of this web applications been extended right up to the end, similarly for the

228
00:17:30.740 --> 00:17:31.150
service.

229
00:17:31.630 --> 00:17:35.260
But if we go back and if we look at the latest.

230
00:17:36.220 --> 00:17:41.650
Let us trace that view of what this web application gateway service in order service their debt data

231
00:17:41.650 --> 00:17:45.160
processing, they serve the message in the queue.

232
00:17:45.400 --> 00:17:54.040
And later on, or the service at some point in time picked up this particular processing of order from

233
00:17:54.040 --> 00:17:58.810
the dummy message queue that we had and it did the processing.

234
00:17:59.110 --> 00:18:03.940
And it is useful because if you see it as this processing has taken a really long time.

235
00:18:04.360 --> 00:18:11.770
But just to accept the order and providing response to the user that the order is in process, take

236
00:18:12.340 --> 00:18:13.830
that didn't take much time.

237
00:18:13.840 --> 00:18:20.530
So for these kind of flows, it makes sense to do them as asynchronous workflows.

238
00:18:21.190 --> 00:18:30.370
So this is how we can even press our entire workflows, whether they are asynchronous or they are asynchronous.

239
00:18:30.370 --> 00:18:37.240
So this is a pretty powerful thing that we have, and it is a must for any large scale distributed system

240
00:18:37.240 --> 00:18:44.020
because otherwise we have no clue which components of our system are creating problems for us in terms

241
00:18:44.020 --> 00:18:48.460
of performance and in the first place, whether even our system is performing or not.

242
00:18:48.760 --> 00:18:56.110
That also is something that we can find out to these statements, but there is more that we can do in

243
00:18:56.110 --> 00:19:00.760
terms of determining the overall system performance and that is done through metrics.

244
00:19:01.390 --> 00:19:05.560
So that is something that we will look at is our next topic.
