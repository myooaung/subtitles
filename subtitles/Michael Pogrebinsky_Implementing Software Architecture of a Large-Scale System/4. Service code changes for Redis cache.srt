1
00:00:01,690 --> 00:00:07,210
Now, let's take a look at the core of how we can implement the catch, so let's go to product service

2
00:00:07,210 --> 00:00:08,980
where the cash is implemented.

3
00:00:10,210 --> 00:00:16,060
So if we go to the court, the first thing that we need to look into is cash configuration.

4
00:00:16,060 --> 00:00:23,320
So it's a spin configuration file wherein what we are doing is we are we are doing two things.

5
00:00:23,320 --> 00:00:30,820
We are creating connection to this case and we are creating a release template.

6
00:00:30,820 --> 00:00:33,550
So this is a standard spring we like.

7
00:00:34,330 --> 00:00:35,660
We are JTBC templates.

8
00:00:35,660 --> 00:00:42,190
So similarly, this is this template to excess and it is and the connection is configured over here.

9
00:00:43,120 --> 00:00:49,870
Whatever hostname or name, that kind of information that is required, it will come from the configuration

10
00:00:49,870 --> 00:00:50,170
file.

11
00:00:50,800 --> 00:00:54,610
So this is where we can specify that configuration.

12
00:00:55,090 --> 00:01:01,240
In this, we have also specified a configuration called Radius Start Enable is equal to falls.

13
00:01:01,930 --> 00:01:07,600
This configuration is useful in case we do not want to use it in this case, and for all the previous

14
00:01:07,600 --> 00:01:10,560
demos that we have been using, this was enabled.

15
00:01:11,720 --> 00:01:16,190
So this is how you disable or enable it, rest, whatever parameters are required.

16
00:01:16,730 --> 00:01:25,520
They can be provided in configuration file and they can be ordered over here to provide it to the connection

17
00:01:25,520 --> 00:01:26,060
factory.

18
00:01:26,330 --> 00:01:29,240
So that is how we create connection to what it is.

19
00:01:29,600 --> 00:01:30,680
You can take a look at it.

20
00:01:31,640 --> 00:01:37,040
Then the next thing that we need to do is how do we access the cash?

21
00:01:38,230 --> 00:01:39,010
So this one.

22
00:01:40,700 --> 00:01:43,700
Is implemented in product service implementation.

23
00:01:44,800 --> 00:01:49,390
So if we look at the functions and product service implementation, let's look at.

24
00:01:50,730 --> 00:01:52,440
Get products by ideas.

25
00:01:53,660 --> 00:01:58,070
So here first, we are trying to get products for those ads from the cash.

26
00:01:59,180 --> 00:02:01,790
And then we are trying to determine.

27
00:02:03,970 --> 00:02:09,010
Which products we were able to get from the cash if there were missing products that we were not able

28
00:02:09,010 --> 00:02:10,090
to get from the cash?

29
00:02:10,860 --> 00:02:16,360
Then we are trying to get those products from the database.

30
00:02:16,750 --> 00:02:21,840
And once we fetch those products from database, we are adding them to the case.

31
00:02:22,680 --> 00:02:27,770
And similarly, if you look at more simple function, get product for a particular idea.

32
00:02:27,850 --> 00:02:30,820
First time to get it from the cash.

33
00:02:31,880 --> 00:02:35,570
And in gas, if we do not find it in the garage, we are.

34
00:02:36,710 --> 00:02:43,460
Fencing it from the database and then adding it to the garage so that next time NBA access to cash,

35
00:02:43,460 --> 00:02:45,470
we do find this particular product.

36
00:02:46,710 --> 00:02:53,940
That is how we are going to build our cash on this cash will get obliterated when we are creating data

37
00:02:54,360 --> 00:02:58,180
and when we are adding products that API of ad product.

38
00:02:58,210 --> 00:03:05,340
So if you see this ad product over here will also add those products to caps, so these products should

39
00:03:05,340 --> 00:03:06,900
always be available in the garage.

40
00:03:09,240 --> 00:03:16,170
So similarly, when we are modifying a product in the database, we will also have to modify any product

41
00:03:16,470 --> 00:03:17,260
in the cache.

42
00:03:17,850 --> 00:03:23,760
The things that we need to be careful about is that, let's say over here, if we modify the product

43
00:03:24,720 --> 00:03:35,400
and just after that, if over here are so process crashes, then we would not have fight the product

44
00:03:35,400 --> 00:03:36,090
in the cache.

45
00:03:37,180 --> 00:03:39,940
So these are the kind of challenges that are there.

46
00:03:39,970 --> 00:03:43,900
We can get stale data from the cache in that sense.

47
00:03:44,380 --> 00:03:47,800
So this is the time to layer values become important.

48
00:03:47,860 --> 00:03:55,390
So in case we were not able to modify the order, then these products, let's say we have set expiry

49
00:03:55,390 --> 00:03:56,320
time is five minutes.

50
00:03:56,320 --> 00:04:02,560
Then that will make sure that the product will not be stale for more than five minutes.

51
00:04:03,690 --> 00:04:09,900
OK, so similarly, when we are removing products, we'll have to make the corresponding changes in

52
00:04:09,900 --> 00:04:10,410
the cash.

53
00:04:11,250 --> 00:04:14,820
That is one function or way here, which is get products now.

54
00:04:14,820 --> 00:04:18,660
This is not directly implemented for the want of time.

55
00:04:19,560 --> 00:04:24,660
What is happening over here is that we are trying to get sort of dysfunction, tries to get all the

56
00:04:24,660 --> 00:04:28,270
products and we are getting all the products from cash.

57
00:04:28,270 --> 00:04:33,300
If we are not able to find them in cash, we are finally getting them from the database and then we

58
00:04:33,300 --> 00:04:35,120
are adding them to the cash.

59
00:04:35,520 --> 00:04:42,360
Now there is an obvious problem over here that if the number of products are huge in our database,

60
00:04:42,360 --> 00:04:45,750
that will not be able to hold them into our memory.

61
00:04:46,110 --> 00:04:52,940
So we will need some kind of pagination over here and some kind of product varieties so that we do not

62
00:04:52,940 --> 00:04:54,900
catch everything from the database.

63
00:04:55,620 --> 00:05:02,480
And consequently, we will add only those limited products to the cash.

64
00:05:02,480 --> 00:05:08,640
So there is something this is an area which needs an enhancement that is working right now because this

65
00:05:08,940 --> 00:05:13,320
we do not have huge amount of data, but it is something that should change in the future.

66
00:05:14,810 --> 00:05:18,170
So this is how a cache would be implemented.

67
00:05:18,770 --> 00:05:24,470
Now we have seen this, that it is pretty easy to implement the cash, so now we will go ahead and bring

68
00:05:24,470 --> 00:05:26,950
up our system with this great escapes.
