1
00:00:02,430 --> 00:00:10,050
So the two very popular open source messaging queue options that we have are Rabbit and Q and Kafka,

2
00:00:10,770 --> 00:00:13,860
both are very good for high scalability.

3
00:00:14,400 --> 00:00:20,100
But Kafka is particularly good when we are considering extremely high skilled.

4
00:00:20,550 --> 00:00:27,600
Kafka is used mainly in streaming scenarios where the Lord on the messaging queue is extremely high.

5
00:00:28,050 --> 00:00:35,160
That kind of or we do not see in Worldpay systems, there can be systems where there are queue loads

6
00:00:35,160 --> 00:00:36,300
which are extremely high.

7
00:00:36,570 --> 00:00:37,740
But that is rare.

8
00:00:38,460 --> 00:00:44,790
So we need to carefully consider over here whether we are going to use it every time queue or Kafka.

9
00:00:45,330 --> 00:00:50,010
The reason we need to be careful is that we can go for Kafka, for ultimate scalability.

10
00:00:50,640 --> 00:00:57,840
But we may not need it, and we may in turn actually make some design compromises over here.

11
00:00:58,380 --> 00:01:00,610
So let's talk about the first test.

12
00:01:00,630 --> 00:01:07,080
Kafka is able to actually perform to extreme scale because it can horizontally partition.

13
00:01:07,080 --> 00:01:07,590
It's cute.

14
00:01:08,070 --> 00:01:14,190
So that gives a lot of scalability to Kafka, which means that the message sequence is not guaranteed

15
00:01:14,190 --> 00:01:15,300
across partitions.

16
00:01:15,870 --> 00:01:18,480
It is only guaranteed within partition.

17
00:01:18,750 --> 00:01:22,140
So that's something that we need to take care of if we implement Kafka.

18
00:01:22,560 --> 00:01:24,750
But that's not a big challenge for us.

19
00:01:25,440 --> 00:01:29,070
The really the two problems that we need to consider over here.

20
00:01:29,160 --> 00:01:37,370
The first one is that because Kafka is a horizontally partition system, it needs zookeeper, for instance,

21
00:01:37,370 --> 00:01:38,970
instances to maintain their state.

22
00:01:39,270 --> 00:01:46,140
Their clusters ignore the data that they're storing, but the clusters for that they will need zookeeper.

23
00:01:46,500 --> 00:01:52,950
So that's just that's an additional system we need to maintain in our system if we go for Kafka.

24
00:01:54,390 --> 00:02:01,920
The next most important reason is that Kafka and Kafka, there is no push message delivery, so if a

25
00:02:01,920 --> 00:02:09,450
message comes took off, that remains in Kafka, tell the consumer by itself, doesn't Paul Kafka and

26
00:02:09,450 --> 00:02:10,710
pulls that message.

27
00:02:11,130 --> 00:02:12,950
So there is no push from Kafka.

28
00:02:14,160 --> 00:02:15,960
We can only pull from Kafka.

29
00:02:16,500 --> 00:02:17,430
Now that's good.

30
00:02:17,730 --> 00:02:23,610
This constant calling is good in case of streaming loads, when there is very high amount of load in

31
00:02:23,610 --> 00:02:24,450
the messaging queue.

32
00:02:25,080 --> 00:02:31,740
But for moderate amount of Lorde's, which is typical of transactional systems, there may not be so

33
00:02:31,740 --> 00:02:36,390
much law that bullying will be a desired thing to do.

34
00:02:36,570 --> 00:02:44,790
So in those cases, the push from the messaging queue works reasonably good enough so that those ads

35
00:02:44,820 --> 00:02:51,420
are design considerations one that we can avoid a zookeeper by using it every time queue and that we

36
00:02:51,420 --> 00:02:54,540
do not have to constantly pull the messaging queue.

37
00:02:55,020 --> 00:03:02,880
We can go for that every time queue, but we can always argue that if skills have to be extremely high

38
00:03:03,300 --> 00:03:09,330
and we expect that that skill will affect our messaging queue, then we can go for Kafka.

39
00:03:09,780 --> 00:03:15,900
For now, there is no real reason or compulsion for us to go for Kafka, so we are going to stick to

40
00:03:16,320 --> 00:03:17,280
it every time you.
