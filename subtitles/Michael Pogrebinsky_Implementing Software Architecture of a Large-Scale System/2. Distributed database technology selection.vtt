WEBVTT
1
00:00:02.200 --> 00:00:06.370
Now, let's look at the different open source, distributed data options that we have.

2
00:00:06.700 --> 00:00:11.370
The popular ones are MongoDB Cassandra Ibn Apache Edgeways DB.

3
00:00:12.660 --> 00:00:17.620
We've already discussed that we are going to use Cassandra, but now let's understand why we are going

4
00:00:17.620 --> 00:00:19.210
to choose Cassandra.

5
00:00:20.230 --> 00:00:26.350
In order to understand that, let's look at the architectural differences of these three databases.

6
00:00:27.520 --> 00:00:34.930
The first differences in terms of schema MongoDB stores JSON documents in binary JSON format, Cassandra

7
00:00:34.930 --> 00:00:43.400
stores data and column family format, but it provides an abstraction which is quite same as IBM's papers.

8
00:00:43.840 --> 00:00:51.940
So it also provides Cassandra query language, which is quite close to Sequent so that the Cassandra

9
00:00:52.150 --> 00:00:54.910
schema is quite close to IBM's schema.

10
00:00:55.480 --> 00:00:59.320
On the other end, Edgeways uses quantum firmly schema.

11
00:00:59.320 --> 00:01:06.220
The underlying schema in Cassandra is also called family, but they have abstract data to provide a

12
00:01:06.220 --> 00:01:11.350
structured schema like IBM's schema, and we will see that what I mean by that.

13
00:01:12.380 --> 00:01:19.840
Now, the second important difference is in terms of indexing in MongoDB, we have hash table like indexing

14
00:01:20.440 --> 00:01:25.290
and then Cassandra VM has to be like indexing in its base.

15
00:01:25.300 --> 00:01:32.800
We have B-3 like indexing, and this is where it becomes slightly different from MongoDB and Cassandra

16
00:01:32.800 --> 00:01:37.870
living here, the way indexes stored in a tree like format.

17
00:01:37.870 --> 00:01:46.210
So we can actually do range queries in Edge because we can do range queries in Cassandra or to a certain

18
00:01:46.210 --> 00:01:48.070
extent, within a partition.

19
00:01:48.520 --> 00:01:50.140
And we will talk about that.

20
00:01:50.500 --> 00:01:57.100
But if you really need to do analytics and you're not doing worldbeat, then in that case, AD is the

21
00:01:57.100 --> 00:02:01.870
right database because it is designed for long running analytical queries.

22
00:02:02.980 --> 00:02:03.760
Now retired.

23
00:02:04.090 --> 00:02:10.900
And the most challenging difference for us is in terms of the availability of these databases.

24
00:02:11.380 --> 00:02:14.410
Now the MongoDB has got master slave architecture.

25
00:02:15.240 --> 00:02:21.790
It's based on two master slave architecture, but Cassandra DB has got Master Master Architecture now

26
00:02:21.790 --> 00:02:23.830
for master slave architecture in MongoDB.

27
00:02:23.860 --> 00:02:27.730
What it means is that for a record, there will be only one master.

28
00:02:27.730 --> 00:02:34.510
So if that master is, don't tell a new master elected out of replicas, MongoDB becomes unavailable,

29
00:02:34.510 --> 00:02:37.150
at least with those records for which master is done.

30
00:02:38.320 --> 00:02:42.650
In case of Cassandra, we see this there is no concept of master.

31
00:02:43.030 --> 00:02:48.070
We can say that every node is a master in the Galactus handwriting.

32
00:02:48.310 --> 00:02:52.120
So what that means is that we can write on any node.

33
00:02:52.570 --> 00:02:58.030
And if a few nodes go down, then that doesn't affect Cassandra.

34
00:02:58.030 --> 00:03:05.650
Neither from reading Cassandra nor nor on writing Cassandra tell a definite number of nodes that correspond

35
00:03:05.650 --> 00:03:06.960
to current data available.

36
00:03:07.270 --> 00:03:10.030
Then we can continue to write on Cassandra.

37
00:03:10.510 --> 00:03:16.300
Another big benefit of this approach is that we can keep Cassandra nodes at a fairly large distances

38
00:03:16.300 --> 00:03:25.180
so we can have Cassandra nodes in different regions, and these regions can synchronize with each other

39
00:03:25.450 --> 00:03:27.040
whenever we modify another.

40
00:03:27.340 --> 00:03:33.130
It can propagate those changes to other nodes so that Cassandra is pretty good.

41
00:03:33.580 --> 00:03:41.500
We can actually use it in different locations, and it provides not only provides high availability,

42
00:03:41.500 --> 00:03:45.160
but high degree of locality because a region.

43
00:03:45.800 --> 00:03:52.000
Regional updates can go to that node, which corresponds to that particular region and whatever changes

44
00:03:52.000 --> 00:03:57.040
were made in that particular region are soon propagated to other regions as well.

45
00:03:57.970 --> 00:04:04.660
One thing to note over here is that in any database where there is a master master kind of configuration,

46
00:04:05.230 --> 00:04:13.900
there can be right conflicts when same set of reports or same regard is being modified simultaneously

47
00:04:13.900 --> 00:04:15.130
on different nodes.

48
00:04:15.550 --> 00:04:19.150
Then, when the merge takes place, there can be a real conflict.

49
00:04:19.690 --> 00:04:30.660
So in the very less likely event of those kind of occurrences, Cassandra has a WW rule which is last

50
00:04:30.700 --> 00:04:38.170
right when so whichever record has the latest timestamp that overrides the previous records.

51
00:04:38.830 --> 00:04:41.290
So that's good enough for our case.

52
00:04:41.380 --> 00:04:45.280
We anyway, we will have to handle eventual consistency.

53
00:04:45.580 --> 00:04:52.270
So this is something that again, we need to be aware of, although we are not going to get into that

54
00:04:52.270 --> 00:04:52.840
discussion.

55
00:04:53.350 --> 00:04:55.510
But this is something good to be aware of.

56
00:04:55.510 --> 00:05:03.730
When we are using any database, we must have must have configuration so that we are now ready to get

57
00:05:03.730 --> 00:05:04.420
into Cassandra.

58
00:05:04.420 --> 00:05:08.890
So let's first understand this schema changes that will have to do for Cassandra.

59
00:05:08.890 --> 00:05:13.600
So when we are moving from Postgres to Cassandra, what kind of schema changes will have to do?

60
00:05:13.600 --> 00:05:19.510
And we will look at the code and then we will actually run our system with a Cassandra cluster.
