1
00:00:01,670 --> 00:00:04,550
The next component that we are going to discuss is services.

2
00:00:05,000 --> 00:00:08,300
Services is where our business logic is going to site.

3
00:00:09,400 --> 00:00:14,410
From this component, we have a few architectural requirements that we we're going to discuss now.

4
00:00:15,160 --> 00:00:18,310
First is that our services should be interoperable.

5
00:00:18,970 --> 00:00:22,480
What that means is that our services has different kind of clients relative.

6
00:00:22,690 --> 00:00:28,690
We have an external client, single page app, which normally runs outside of our system.

7
00:00:29,690 --> 00:00:34,820
And we have very applications line, which runs inside our system, so it's an internal plan.

8
00:00:34,850 --> 00:00:40,970
Then there is a third kind of kind of let's say we have a communication between order and inventory.

9
00:00:40,970 --> 00:00:48,140
So this order service needs to determine that a particular item is available in the database or not.

10
00:00:48,150 --> 00:00:50,720
So for that, it will have to go through inventory service.

11
00:00:51,740 --> 00:00:56,570
So order, so this becomes a plan of inventory service in this case.

12
00:00:57,050 --> 00:00:59,480
So we need to support different kind of plans.

13
00:01:00,380 --> 00:01:05,390
And for that, our services should be interoperable for interoperability.

14
00:01:05,390 --> 00:01:09,080
We can use two different kind of mechanisms.

15
00:01:09,080 --> 00:01:16,250
So one is our busy mechanism and the other one is rest based mechanism, which is an architectural style.

16
00:01:17,780 --> 00:01:26,030
Now, our PC mechanism is that mechanism where a client and a server, they agree on it on an interface

17
00:01:26,780 --> 00:01:35,270
and stubs and skeletons are generated and stubs are used by clients to make a call to this service.

18
00:01:36,110 --> 00:01:40,490
So that kind of tightly captures a client and a service.

19
00:01:41,480 --> 00:01:50,300
So our PC is not a very suitable mechanism for communication between, let's say, a mobile device and

20
00:01:50,300 --> 00:01:51,110
a service.

21
00:01:52,520 --> 00:02:00,920
Because we will need to have those stubs on that mobile device or their application in that tightly

22
00:02:00,920 --> 00:02:03,800
couples these two client and so.

23
00:02:04,550 --> 00:02:08,150
So this is not something that we are going to use.

24
00:02:08,150 --> 00:02:14,870
What we are going to use is rest based communication, which is not tightly controlled.

25
00:02:15,200 --> 00:02:17,920
It does not use RBC pay steps.

26
00:02:17,930 --> 00:02:26,570
It is lightweight, so it is suitable for both application to application communication and also for

27
00:02:26,600 --> 00:02:27,740
browsers as well.

28
00:02:27,800 --> 00:02:29,210
So let's set the single page.

29
00:02:29,210 --> 00:02:37,550
Application is a browser based application so it can easily communicate with services using wrist based

30
00:02:37,550 --> 00:02:38,420
communication.

31
00:02:38,900 --> 00:02:42,950
So rest is something that we are going to go ahead with.

32
00:02:44,000 --> 00:02:50,480
Now, for internal communication between services, we could have used RBC also, because that is more

33
00:02:50,480 --> 00:02:54,130
efficient generally are PCs which which do not use soap.

34
00:02:54,140 --> 00:02:56,720
So our PCs like OPG are busy thrift.

35
00:02:57,200 --> 00:03:03,710
They are binary protocols and for internal communication, they work pretty well and for external communication.

36
00:03:03,710 --> 00:03:10,070
What we can do is we can host a service in between, let's say, some kind of routing service or gateway

37
00:03:10,070 --> 00:03:18,050
service, which can intercept call rest calls and it can convert them into these groups or drift.

38
00:03:18,380 --> 00:03:24,170
And it can thus act as a broker in between so we can have that kind of communication.

39
00:03:24,170 --> 00:03:32,480
But for now, let's keep things simple and we are going to use the rest protocol between our client

40
00:03:32,480 --> 00:03:33,830
and all our services.

41
00:03:34,340 --> 00:03:41,840
Later on, if we need more efficient communication, we can go towards IBC for internal communication.

42
00:03:43,010 --> 00:03:49,130
The next architectural requirement that we have from our services is that there should be independent.

43
00:03:49,400 --> 00:03:53,190
What that means is we should be able to develop them independently.

44
00:03:53,210 --> 00:04:01,520
We should be able to deploy them independently and that where we can scale both the development of services

45
00:04:02,060 --> 00:04:10,370
and also we should be able to scale them by deploying them independently, by taking care of their individual

46
00:04:10,760 --> 00:04:13,490
deployment needs related to scalability.

47
00:04:14,180 --> 00:04:15,360
So there should be independent.

48
00:04:15,440 --> 00:04:19,670
Now there are two choices that we have to make ourselves as independent.

49
00:04:19,670 --> 00:04:22,220
One is service oriented architecture.

50
00:04:22,760 --> 00:04:30,020
Now this does not give us full amount of independence because here so who says they get couple on two

51
00:04:30,020 --> 00:04:30,450
fronts?

52
00:04:30,500 --> 00:04:38,570
One is at the interface front because as part of this architecture, they used a common interface schema

53
00:04:38,570 --> 00:04:44,600
which compiles them and they use common database schema that also compiles them.

54
00:04:45,080 --> 00:04:48,980
Microservices architecture gets rid of this coupling here.

55
00:04:49,520 --> 00:04:55,130
The way we design our services is we do not use any common interface schema.

56
00:04:55,610 --> 00:04:58,850
And we also do not use common database schema.

57
00:04:59,570 --> 00:05:02,300
So then we are going to designer schema.

58
00:05:02,300 --> 00:05:09,650
We'll have to keep that in mind that ultimately each service should be able to work with its own schema,

59
00:05:10,280 --> 00:05:16,250
which means that we should be able to do distributed transactions or something like distributed transactions,

60
00:05:16,280 --> 00:05:20,600
and those can be eventually consistent transaction.

61
00:05:20,870 --> 00:05:27,140
So things like that, we'll have to think about right in the beginning when we are developing our services.

62
00:05:27,890 --> 00:05:35,960
The bottom line is that our database schema should be such that each service can have its own schema

63
00:05:36,260 --> 00:05:39,680
and that can be holistic on a separate database.

64
00:05:40,700 --> 00:05:45,680
The other requirement that we have from our services is scalability.

65
00:05:46,430 --> 00:05:53,300
Now, in order to make our services scalable part of it, we already discussed that microservices will

66
00:05:53,300 --> 00:05:54,350
promote scalability.

67
00:05:54,350 --> 00:06:00,290
But that is another thing that we need to do is to promote scalability is that we need to make our services

68
00:06:00,290 --> 00:06:01,070
stateless.

69
00:06:02,140 --> 00:06:08,650
Now, if we make our services stateless, what it does is that whenever we want to increase the number

70
00:06:08,650 --> 00:06:12,760
of instances of our services, we should be able to do that.

71
00:06:13,400 --> 00:06:14,260
Something like this.

72
00:06:14,620 --> 00:06:21,850
We should be able to add more number of instances to our services without worrying about this state.

73
00:06:22,540 --> 00:06:28,990
Now, in order to make our services stateless, what we have to make sure is that we are not maintaining

74
00:06:28,990 --> 00:06:33,100
any application state within our service instances.

75
00:06:34,000 --> 00:06:39,850
We are also not maintaining our claim state in our service instances.

76
00:06:40,210 --> 00:06:43,630
If we do not do that, our services will become stateless.

77
00:06:44,080 --> 00:06:51,340
And what that means is that anytime we want to increase the number of instances, we just need to start

78
00:06:51,970 --> 00:06:54,370
a new instance with the same code base.

79
00:06:54,730 --> 00:06:59,380
And that's pretty much is the requirement for starting new instances.

80
00:06:59,980 --> 00:07:02,080
So that will promote scalability.

81
00:07:02,710 --> 00:07:08,410
So these are the three main architectural requirements that we have from our services.
