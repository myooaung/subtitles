1
00:00:00,360 --> 00:00:05,550
Now, let's take a look at the programming languages and frameworks that we can use for building our

2
00:00:05,550 --> 00:00:06,120
services.

3
00:00:07,150 --> 00:00:11,940
The service is, like you said, they have business logic, so they will have a large code base.

4
00:00:12,510 --> 00:00:18,060
So here's how our code is structured and how it is organized becomes pretty important.

5
00:00:18,540 --> 00:00:26,550
So due to that reason and object oriented language will be better suited for handling of high large

6
00:00:26,550 --> 00:00:27,210
code base.

7
00:00:27,780 --> 00:00:33,290
Now, as business logic will involve a lot of algorithms, so they are going to consume high.

8
00:00:34,260 --> 00:00:39,780
We expect that our programming language and framework utilizes CPU efficiently.

9
00:00:40,260 --> 00:00:47,190
This is where compiler languages have edge over interpreted languages as they will offer better performance.

10
00:00:47,790 --> 00:00:53,640
The next feature that we expect from our programming language is garbage collection, so any objects

11
00:00:53,640 --> 00:00:59,850
that we are allocating there should be allocated by the language runtime itself.

12
00:01:00,510 --> 00:01:04,310
So we have a lot of choices for writing our services.

13
00:01:04,320 --> 00:01:07,530
We can write it in JavaScript, also on Node.js.

14
00:01:08,070 --> 00:01:13,410
But this is not something that is useful for CPU intensive work, so this is not our choice.

15
00:01:13,950 --> 00:01:20,940
We can use Python on Django Class Framework, but Python is an integrated language.

16
00:01:21,420 --> 00:01:27,990
It can work well for midsize applications, but for large sized applications, a lot of algorithmic

17
00:01:27,990 --> 00:01:28,260
work.

18
00:01:28,560 --> 00:01:30,990
We are not going to go ahead with Python.

19
00:01:31,530 --> 00:01:36,160
Then our choices are Java C-sharp and C++ C++.

20
00:01:36,200 --> 00:01:42,840
The issue will be that we will not have garbage collection, so that's in some ways it is good because

21
00:01:42,840 --> 00:01:46,530
garbage collection can slow down a programming language at times.

22
00:01:46,920 --> 00:01:55,920
But more often it is a problem because it slows down the development process and creates a lot of issues

23
00:01:56,400 --> 00:01:57,330
for maintenance.

24
00:01:58,020 --> 00:02:00,020
So this is not going to be our choice.

25
00:02:00,030 --> 00:02:03,510
Our choice is going to be Java, which springboard framework.

26
00:02:04,230 --> 00:02:06,270
Java is an object oriented language.

27
00:02:06,540 --> 00:02:14,100
It can do just in time compilation as well, so that makes it fast and it has automatic garbage collection

28
00:02:14,100 --> 00:02:14,580
as well.

29
00:02:15,000 --> 00:02:17,550
So the other choice could have been C-sharp.

30
00:02:17,550 --> 00:02:23,250
If we want to build our system using Microsoft Technologies, then C-sharp could have been a choice.

31
00:02:23,260 --> 00:02:25,290
But in our case, we'll stick to Java.

32
00:02:26,570 --> 00:02:32,450
Once we have decided to go ahead with Java programming language as the language for developing us,

33
00:02:32,450 --> 00:02:39,110
so this is our choice of framework as spring framework because it provides a lot of features that we

34
00:02:39,110 --> 00:02:40,460
are going to use in our services.

35
00:02:40,470 --> 00:02:41,030
So that's it.

36
00:02:41,330 --> 00:02:45,170
We are going to use spring rest for providing a rest interface.

37
00:02:45,770 --> 00:02:50,480
We are going to use spring data for accessing our database.

38
00:02:51,020 --> 00:02:54,950
So this will avoid a lot of boilerplate code that we will not have to write.

39
00:02:55,220 --> 00:03:01,460
The other thing important thing to note over here is that we are not using any Aughrim over here because

40
00:03:01,460 --> 00:03:04,930
the database that we have right now, it's not IBM's.

41
00:03:04,940 --> 00:03:08,090
But finally, we may not like to work with another dbus.

42
00:03:08,480 --> 00:03:13,760
We may like to replace it with our distributed database like Cassandra.

43
00:03:14,210 --> 00:03:17,540
So we are not fixing ourself, fit one database choice.

44
00:03:17,540 --> 00:03:19,730
So we are not going to use Aughrim.

45
00:03:20,360 --> 00:03:27,080
Another reason for not using an alarm is that we would like to take control of the queries that we are

46
00:03:27,080 --> 00:03:28,880
making to our database.

47
00:03:29,330 --> 00:03:34,750
So those are the reasons instead of using any quorum framework, we are using spring data framework.

48
00:03:35,910 --> 00:03:42,810
The next thing that we have over here is Spring Corps, which provides us dependency injection, so

49
00:03:42,810 --> 00:03:52,020
dependency injection is important for us because when we write unit tests, we can remove a lot of dependencies

50
00:03:52,020 --> 00:03:58,170
component at component level and we can substitute them by their stubs and we can do the testing.

51
00:03:58,170 --> 00:04:01,760
So that is a good strategy for building a large core base.

52
00:04:02,340 --> 00:04:08,580
I don't think that it can do is if we want to remove a component which doesn't happen very often, but

53
00:04:08,820 --> 00:04:12,000
the it gives us flexibility of doing that.

54
00:04:12,000 --> 00:04:18,570
So let's say we want to change our database, then the dependency injection will just make it easier

55
00:04:18,570 --> 00:04:18,900
for us.

56
00:04:18,900 --> 00:04:26,670
So it makes us easier for us to do component level changes because we cannot inject components into

57
00:04:26,670 --> 00:04:27,870
our system.

58
00:04:28,710 --> 00:04:35,340
The other thing that spring frameworks provides us is springboard, and we will use springboard to create

59
00:04:35,640 --> 00:04:36,840
sober processes.

60
00:04:37,320 --> 00:04:46,560
So this springboard provides us various options of hosting our services on embedded tomcat or Embedded

61
00:04:46,570 --> 00:04:47,050
Jedi.

62
00:04:47,550 --> 00:04:49,080
So we have those choices.

63
00:04:49,080 --> 00:04:54,780
So this is a very flexible and lightweight option, so we are going to go ahead with that.
