WEBVTT
1
00:00:02.030 --> 00:00:08.900
We will first look at the core support for our data service, is there in services directly along with

2
00:00:08.900 --> 00:00:09.890
all of the services?

3
00:00:10.350 --> 00:00:12.200
Yeah, there is a directory called Gateway.

4
00:00:12.770 --> 00:00:17.030
This is where all our Gateway service code is here.

5
00:00:17.720 --> 00:00:20.270
There is this maven bombed out exemplified.

6
00:00:20.720 --> 00:00:24.950
It will list the dependency for this Netflix will service.

7
00:00:25.520 --> 00:00:27.470
So here is their dependency.

8
00:00:28.250 --> 00:00:33.200
So this is the library that we are going to use for creating a gateway service.

9
00:00:33.830 --> 00:00:38.310
So pretty much all the capability that we need comes out of the box.

10
00:00:38.330 --> 00:00:41.000
All we have to do is very small configuration.

11
00:00:41.780 --> 00:00:50.560
So bulk of the configuration, or pretty much the whole configuration is dead in this particular config

12
00:00:50.600 --> 00:00:51.650
dot properties file.

13
00:00:52.430 --> 00:00:57.110
Here we can see that we have mapped certain routes.

14
00:00:57.230 --> 00:01:06.680
So let's say or transition any you are at a starting with or it has to be routed to autorizacion service.

15
00:01:06.680 --> 00:01:08.390
So this is an IED that we have given.

16
00:01:08.780 --> 00:01:09.770
It can be anything.

17
00:01:10.430 --> 00:01:14.220
You can see how this maps to a particular host and port.

18
00:01:14.570 --> 00:01:20.840
But right now, what we have done over here is we have you are we have taken a area and we have mapped

19
00:01:20.840 --> 00:01:22.640
to a particular service side.

20
00:01:23.270 --> 00:01:30.260
Similarly, for product service related, you added we have mapped to product service.

21
00:01:30.440 --> 00:01:31.280
So this IED.

22
00:01:32.250 --> 00:01:38.220
Now, later, what we have done is we have mapped these service.

23
00:01:38.490 --> 00:01:42.980
So let's say there's a service aid for transition service we have listed over here.

24
00:01:42.990 --> 00:01:46.860
What role are these solos for this authorization service?

25
00:01:47.100 --> 00:01:49.080
Similarly, for other services.

26
00:01:49.770 --> 00:01:56.340
Now this is a configuration that we're going to use temporarily because we do not have other components

27
00:01:56.340 --> 00:02:00.060
like discovery service in our demonstration right now.

28
00:02:00.360 --> 00:02:03.630
So we will use this static configuration later on.

29
00:02:03.630 --> 00:02:05.460
We will move to dynamic configuration.

30
00:02:05.850 --> 00:02:09.180
But let's say we just have a gateway service right now.

31
00:02:09.180 --> 00:02:14.220
We do not have any assistance of any other service, then this is the way to go.

32
00:02:14.670 --> 00:02:16.820
We met, you are told to a service side.

33
00:02:17.280 --> 00:02:24.660
And for each service, I'd list modularity, host and board where we need to roll those particular requests.

34
00:02:25.380 --> 00:02:27.060
So this is a simple configuration.

35
00:02:27.060 --> 00:02:30.600
This is all we have to do and this will do complete routing for us.

36
00:02:31.320 --> 00:02:37.440
There is some more stuff that we can do with gateway service and that is two filters.

37
00:02:38.040 --> 00:02:43.170
So that said, here we have created three filters that said this is authentication filter.

38
00:02:43.440 --> 00:02:45.180
It extends only filter.

39
00:02:45.960 --> 00:02:52.410
Here we can specify what kind of edge that it is, but this filter is pre-tape, meaning any routing

40
00:02:52.410 --> 00:02:55.150
request that zoals gateway service is going to call.

41
00:02:55.170 --> 00:02:57.660
Before that, it will execute this filter.

42
00:02:57.660 --> 00:03:04.350
So before calling any service like product, service or service, it will execute this filter and this

43
00:03:04.350 --> 00:03:07.920
very that is supposed to do the authentication.

44
00:03:08.310 --> 00:03:14.580
So you can take a look at this, how this is actually implemented, but this is exactly what is happening

45
00:03:14.580 --> 00:03:15.060
over here.

46
00:03:15.480 --> 00:03:22.410
We can provide the ordering of this product when this filter should be executed because we can actually

47
00:03:22.410 --> 00:03:23.800
provide multiple filters.

48
00:03:23.800 --> 00:03:29.020
So let's say we are provided a request filter over here for this or that is one.

49
00:03:29.040 --> 00:03:34.650
So this is the number one filter which will be executed and this is of Typekit type, meaning it will

50
00:03:34.650 --> 00:03:38.970
be executed before any request is rounded.

51
00:03:39.300 --> 00:03:45.420
So here we are, just logging the request in a log file, whatever request we are receiving.

52
00:03:45.420 --> 00:03:47.700
So this becomes a centralized logging.

53
00:03:48.150 --> 00:03:51.570
So similarly, we are logging four responses.

54
00:03:51.570 --> 00:03:57.230
Also, this is the last filter that we have and this is, of course, type.

55
00:03:57.240 --> 00:04:05.160
So this is executed when a request is related to a service and the response is returned back to gateway

56
00:04:05.160 --> 00:04:12.420
service to get the service will execute it after that and before returning the response to decline.

57
00:04:13.200 --> 00:04:19.890
So here we can track off what were the responses we got from individual services for each request.

58
00:04:20.460 --> 00:04:23.460
The last thing that is over here is local request handler.

59
00:04:23.730 --> 00:04:28.170
So let's say there is some request we want to send specifically to gateway service only.

60
00:04:29.010 --> 00:04:33.720
We do not want to root out this request, so that is handled in this local request handler.

61
00:04:34.500 --> 00:04:40.480
And one example of that is so let's say we want to check the heartbeat of our gateway service, whether

62
00:04:40.480 --> 00:04:42.180
our gateway service is alive or not.

63
00:04:42.570 --> 00:04:47.850
So you would have seen this throughout this what each service we have implemented, this status you

64
00:04:47.850 --> 00:04:55.860
are in, which gives us a response along with the time and the hostname so that that that's an indication

65
00:04:55.860 --> 00:04:58.620
for any claim that this service is alive.

66
00:04:59.220 --> 00:05:04.590
So these are the functionalities that we have implemented within this gateway service.

67
00:05:04.620 --> 00:05:10.680
You can take a look at the code of this Gateway service, but this is pretty much what is there.

68
00:05:10.680 --> 00:05:13.650
There is nothing more than what I have already told you.

69
00:05:14.220 --> 00:05:17.280
So that's about the Code of Gateway service.

70
00:05:17.670 --> 00:05:22.830
Now it's the time to actually incorporate this service into our overall system.
