WEBVTT
1
00:00:03.120 --> 00:00:09.900
In this session, we will look at routing issue, our first voting issue, which is basically our routing

2
00:00:09.900 --> 00:00:11.670
configuration in our planes.

3
00:00:12.030 --> 00:00:13.350
It is pretty complex.

4
00:00:14.040 --> 00:00:16.590
And if you look at this, it looks like this.

5
00:00:17.220 --> 00:00:24.810
So whether it is the application line for our services, it needs to know which service is running on

6
00:00:24.810 --> 00:00:26.130
which host and which port.

7
00:00:26.730 --> 00:00:32.910
And for that matter, even a single page application needs to know the similar information.

8
00:00:33.210 --> 00:00:38.820
The only difference between web application and not a single page application is single.

9
00:00:38.820 --> 00:00:46.020
Page application will actually need to know external IP addresses or the DNS names, which can be called

10
00:00:46.020 --> 00:00:46.740
externally.

11
00:00:46.740 --> 00:00:48.360
So there will be a difference over here.

12
00:00:48.720 --> 00:00:50.760
We can't use the same names.

13
00:00:51.090 --> 00:00:53.880
I just use the same names for convenience sake.

14
00:00:54.870 --> 00:01:01.560
Now the other problem is, let's say, if we decide to convert a single page application into a mobile

15
00:01:01.560 --> 00:01:08.790
application and that mobile application has a certain configuration for our services and later on,

16
00:01:08.790 --> 00:01:10.590
we change that configuration.

17
00:01:12.060 --> 00:01:18.760
Now that will mean that we'll have to change our better mobile application for all our clients.

18
00:01:19.110 --> 00:01:21.690
So there is something which is not good.

19
00:01:21.960 --> 00:01:29.340
So we should actually take away this configuration from clients to some other place where we can manage

20
00:01:29.340 --> 00:01:35.490
its complexity so our clients should not be exposed to service routing complexity.

21
00:01:36.240 --> 00:01:40.920
So the way we achieve that is by using a gateway service.

22
00:01:41.370 --> 00:01:47.610
So we use a gateway service in between, and this gateway service can rout all declined requests by

23
00:01:47.610 --> 00:01:48.720
looking at the URL.

24
00:01:49.320 --> 00:01:58.770
It can routing requests to the right service, then we can reduce the complexity of our clients in terms

25
00:01:58.770 --> 00:02:00.300
of service routing configuration.

26
00:02:00.300 --> 00:02:02.460
So the configuration will look like this.

27
00:02:02.460 --> 00:02:09.300
It will become very simple that the mobile application or the single page application needs to not only

28
00:02:09.300 --> 00:02:11.310
about the gateway service.

29
00:02:11.490 --> 00:02:17.400
And this is something that we will not change very frequently that what is the host and port information

30
00:02:17.400 --> 00:02:18.720
for our gateway service?

31
00:02:19.090 --> 00:02:22.500
The similar thing goes even for web application.

32
00:02:23.570 --> 00:02:28.770
OK, now let's see what are the different options or ways in which we can achieve this.

33
00:02:29.100 --> 00:02:36.420
So one way of achieving this is by using a reverse proxy like Engine X. What it can do is we can configure

34
00:02:36.420 --> 00:02:43.170
our engine service proxy, which are then you are on rules that let's say you are and says that the

35
00:02:43.170 --> 00:02:45.330
request needs to be related to product service.

36
00:02:45.330 --> 00:02:50.280
Then by looking at that, you are in Engine X can allow the request to product service.

37
00:02:50.550 --> 00:02:52.650
So similarly, for all of the services.

38
00:02:53.010 --> 00:02:59.370
So we can provide engine expert routing information and it can do the Gateway Service job.

39
00:03:01.180 --> 00:03:11.410
However, our choice over here will be get worse service from Netflix or Netflix has a stack for microservices,

40
00:03:11.650 --> 00:03:15.790
and it provides many other relevant products that will be useful for us.

41
00:03:15.790 --> 00:03:22.390
Later on, we will see that so we can combine this cable service with those other products and that

42
00:03:22.390 --> 00:03:22.600
way.

43
00:03:22.690 --> 00:03:25.120
This will be a much better choice for us.

44
00:03:25.720 --> 00:03:34.750
The other reasons for going for Netflix get the services that we have used is spring cloud framework

45
00:03:34.750 --> 00:03:36.310
for making our.

46
00:03:37.510 --> 00:03:42.790
RESTful services, so these services that are there, they are using Spring Cloud Stack, which was

47
00:03:42.790 --> 00:03:50.080
this being framework so we can easily create Netflix full service using Spring Cloud, so that that's

48
00:03:50.080 --> 00:03:50.680
another reason.

49
00:03:51.370 --> 00:03:56.950
Third reason would be that within this gateway service, Netflix rule will allow us to do more things.

50
00:03:56.950 --> 00:04:03.340
So let's say if you want to do authentication for all these services at a central point, we can do

51
00:04:03.340 --> 00:04:03.970
it over here.

52
00:04:04.690 --> 00:04:13.090
Let's say we want to log our request and response is to get a centralized log of what requests are coming

53
00:04:13.090 --> 00:04:13.840
to our services.

54
00:04:14.290 --> 00:04:21.760
We can do that stuff in the Gateway service, call Netflix all, but those are the kind of things that

55
00:04:21.760 --> 00:04:27.520
we will not be able to do in India next reverse proxy, because that will just to be routing job.

56
00:04:27.910 --> 00:04:33.640
So for those reasons, Netflix Zone will be our choice for the Gateway service.

57
00:04:34.450 --> 00:04:40.590
So the next thing that we will see is how we can implement this Netflix Zul service.

58
00:04:40.600 --> 00:04:44.520
We will look at the code and then we will also look at our system.

59
00:04:44.530 --> 00:04:45.430
How does it work?

60
00:04:45.820 --> 00:04:49.990
How does it look like when we implement Netflix Gateway Service?
