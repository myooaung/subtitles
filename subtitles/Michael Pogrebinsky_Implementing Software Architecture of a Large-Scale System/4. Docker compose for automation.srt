1
00:00:01,330 --> 00:00:07,000
Like I mentioned earlier, now we are going to run out of application using Docker compose.

2
00:00:07,840 --> 00:00:09,310
So let's go ahead and do that.

3
00:00:10,150 --> 00:00:13,150
For that, we are going to use some configuration.

4
00:00:13,720 --> 00:00:17,230
And this is the configuration that we are going to use.

5
00:00:17,830 --> 00:00:20,350
So let's copy this configuration.

6
00:00:21,820 --> 00:00:27,400
And before we use this configuration, let me explain you a bit what this configuration is.

7
00:00:28,060 --> 00:00:33,370
So using this configuration, we are going to create a Docker compose configuration file.

8
00:00:33,940 --> 00:00:38,650
We are seeing that we are going to use Docker compose version 3.5.

9
00:00:39,130 --> 00:00:42,730
And then we are listing all these services.

10
00:00:43,180 --> 00:00:45,240
These are Docker container services.

11
00:00:45,250 --> 00:00:48,080
These are not the services of our system here.

12
00:00:48,120 --> 00:00:51,910
Services is in the context of Docker containers.

13
00:00:52,570 --> 00:00:57,890
So here, as part of these Docker services, we are creating a service cloud.

14
00:00:58,300 --> 00:01:04,660
Then there's the name that we have given to our container, which is going to run our web application,

15
00:01:04,660 --> 00:01:11,560
which is what we just saw, just that now we are going to be run and stop our web application Docker

16
00:01:11,560 --> 00:01:14,860
container using this particular configuration.

17
00:01:15,280 --> 00:01:18,610
So that's why we are trying to understand this particular configuration.

18
00:01:18,610 --> 00:01:25,180
It is pretty useful because this is this will immensely help us in dealing with these Docker containers.

19
00:01:25,660 --> 00:01:33,370
So as part of this work we have done over here is that we have specified how we can build our Docker

20
00:01:33,370 --> 00:01:33,610
image.

21
00:01:33,610 --> 00:01:41,560
So this section precisely tells how we are going to build this Docker image to test that the context

22
00:01:41,560 --> 00:01:43,210
directly is Dot Web.

23
00:01:44,020 --> 00:01:52,210
Here, Dart is the directory where the Docker compose file will be there and inside that.

24
00:01:52,210 --> 00:01:55,720
So that is our Docker directory inside that there is a web directly.

25
00:01:56,140 --> 00:01:58,540
Here it is where we will file Docker file.

26
00:01:59,470 --> 00:02:00,850
So this is that configuration.

27
00:02:00,850 --> 00:02:07,330
What is the new motor Docker file and any software that we want to copy on that image will be located

28
00:02:07,330 --> 00:02:08,920
in this web directly.

29
00:02:09,820 --> 00:02:11,480
So this is how we are going to build this.

30
00:02:11,860 --> 00:02:19,270
And this will be the name after debate, and this will be the name of the Docker image that we will

31
00:02:19,270 --> 00:02:20,950
use for running the container.

32
00:02:21,400 --> 00:02:25,630
This will be the name of the container when we launch the container using this configuration.

33
00:02:26,110 --> 00:02:28,480
It will be given a host name as web.

34
00:02:30,540 --> 00:02:38,580
The network more is again hosted over here, and we are seeing over here that use this command Python

35
00:02:38,580 --> 00:02:46,380
three managed or violence over to start this particular web application in development mode, and we

36
00:02:46,380 --> 00:02:53,760
are actually starting this in development work so that we can get this data contained along with dynamic

37
00:02:53,760 --> 00:02:54,240
content.

38
00:02:54,300 --> 00:03:00,810
If you remember, we discussed this that in development work, we can host both of them on the same

39
00:03:00,810 --> 00:03:01,410
web server.

40
00:03:01,680 --> 00:03:06,240
Otherwise, we'll have to launch a separate web server for static content.

41
00:03:06,240 --> 00:03:08,910
So we do not want to get into that complexity right now.

42
00:03:09,270 --> 00:03:14,360
We will do it a little later when we get it to load balancers and reverse proxy.

43
00:03:14,370 --> 00:03:15,480
That's where we will do this.

44
00:03:15,900 --> 00:03:21,420
For now, we will use this particular development mode command to launch our web.

45
00:03:21,420 --> 00:03:28,800
Applications of this command is actually going to override the default command that we have specified

46
00:03:29,130 --> 00:03:31,410
in the Docker file configuration.

47
00:03:32,250 --> 00:03:34,380
So this is how Docker composes.

48
00:03:35,190 --> 00:03:40,920
Let's go ahead and use this configuration, so we will go to the parent directly.

49
00:03:41,940 --> 00:03:48,570
And here we already have a Docker compose dart via email file, where we have already configure all

50
00:03:48,570 --> 00:03:51,870
the components with whatever configuration we need.

51
00:03:51,880 --> 00:03:52,860
It is already there.

52
00:03:53,100 --> 00:03:59,880
But for our understanding perspective, what we will do is we will create a new file and let's call

53
00:03:59,880 --> 00:04:06,330
it as Docker compose treated Dart VM.

54
00:04:06,330 --> 00:04:10,350
And so this is a new file that we are creating.

55
00:04:11,400 --> 00:04:16,110
We'll have to copy the contents from here.

56
00:04:16,500 --> 00:04:17,910
So let's go ahead and do that.

57
00:04:19,640 --> 00:04:20,960
Hopefully, this is copy.

58
00:04:21,490 --> 00:04:22,820
So let's paste it over here.

59
00:04:23,600 --> 00:04:23,960
OK.

60
00:04:24,620 --> 00:04:27,860
Let's just save this one.

61
00:04:29,880 --> 00:04:32,800
Get this via email finance whenever you are dealing with that.

62
00:04:33,010 --> 00:04:39,370
Make sure that you do not have tabs in them and things like that can corrupt via email file, so you

63
00:04:39,370 --> 00:04:42,250
have to be really careful with these by email files.

64
00:04:43,180 --> 00:04:48,370
So best thing is to copy the configuration, which is which you have already tested.

65
00:04:49,030 --> 00:04:55,890
So now let's stop the Docker container, which is already running for that.

66
00:04:55,900 --> 00:04:59,670
What we will do is Docker, stop this container of it.

67
00:05:00,520 --> 00:05:05,380
Then the next thing that we are going to do is we are going to remove this container altogether because

68
00:05:05,380 --> 00:05:10,810
this will be present on our system as a dead container right now.

69
00:05:10,900 --> 00:05:14,170
So if I see Docker container rails, it won't list anything.

70
00:05:14,470 --> 00:05:22,690
But if I say Docker container rails minus here, it will list this dead container that was launched

71
00:05:22,690 --> 00:05:27,930
using this and data blue using this A.W. web image and this web new.

72
00:05:28,270 --> 00:05:32,650
So we will remove this container, otherwise we will not be able to recreate it.

73
00:05:33,190 --> 00:05:39,640
So let's go ahead and do that, and the command to do that is government minus F and the container name.

74
00:05:40,360 --> 00:05:41,260
So we removed it.

75
00:05:41,860 --> 00:05:48,070
Now we are starting from a clean slate over here from this container perspective.

76
00:05:48,400 --> 00:05:51,400
Let's first go ahead and build this container for that.

77
00:05:51,790 --> 00:05:59,050
What we will do is we will use this command called Docker Compose now.

78
00:05:59,050 --> 00:06:01,360
Docker compose is a pretty big name.

79
00:06:01,810 --> 00:06:06,460
So what I've done is I have created assembling all B.C., right?

80
00:06:06,460 --> 00:06:10,180
So this link was created during the installation of Docker.

81
00:06:10,180 --> 00:06:12,700
That script created that so we can verify that.

82
00:06:13,120 --> 00:06:23,380
So if I say let's minus in which DC, so it will tell us that this particular command DC, which is

83
00:06:23,380 --> 00:06:27,450
a link, it is actually a link to Docker compose command.

84
00:06:27,460 --> 00:06:34,330
So when I run DC Command, I'm actually running Docker compose, so it makes typing a little lesser.

85
00:06:34,700 --> 00:06:36,520
So that's why I'm using this.

86
00:06:37,060 --> 00:06:42,490
So if now we have to build a container image, then it is pretty simple.

87
00:06:42,490 --> 00:06:51,520
With Docker compose, what we'll have to do is we'll say Docker compose minus f docker compose this

88
00:06:51,520 --> 00:06:52,600
Docker compose file.

89
00:06:52,990 --> 00:07:00,790
So if we are not using a file other than Docker compose start Weinman, then we do not need this particular

90
00:07:00,790 --> 00:07:01,090
option.

91
00:07:01,090 --> 00:07:05,110
But in this case, we have created actually a different file.

92
00:07:05,590 --> 00:07:07,630
So we have to use this option.

93
00:07:08,130 --> 00:07:10,210
Now the building is pretty simple.

94
00:07:10,480 --> 00:07:16,570
What we will do is we will separate and if we say big, then it will build all the services that are

95
00:07:16,570 --> 00:07:19,810
there in the configuration file, right?

96
00:07:20,110 --> 00:07:25,360
Or if you just want to build one, we will give the name of that configuration and that the name of

97
00:07:25,360 --> 00:07:26,710
the configuration was web.

98
00:07:27,280 --> 00:07:28,330
So let's do that.

99
00:07:30,300 --> 00:07:35,670
So this is this has rebuilt the image, the installation, and all was already done.

100
00:07:36,120 --> 00:07:42,000
There was no change to that, so it will reuse the image that was already built.

101
00:07:42,360 --> 00:07:47,100
So it bears images in layers and it can reuse those layers.

102
00:07:47,110 --> 00:07:52,560
So that's why once you have already built atop that image next time, it is pretty fast.

103
00:07:52,950 --> 00:07:58,680
It basically starts from the place as in the Docker file, where we have made some changes before that

104
00:07:58,680 --> 00:08:02,310
it will reduce the layers that would already be OK.

105
00:08:02,610 --> 00:08:06,660
So that's how you build Docker image using Docker compose.

106
00:08:07,410 --> 00:08:08,430
Let's clear this.

107
00:08:10,080 --> 00:08:13,370
Now we are going to run this for running this part.

108
00:08:13,370 --> 00:08:14,220
We are going to do this.

109
00:08:14,850 --> 00:08:21,930
We will say Docker compose up minus d minus these for detached more.

110
00:08:22,500 --> 00:08:28,710
Otherwise, the application that will be that will run will run on this particular dominant.

111
00:08:28,920 --> 00:08:33,750
And if we kill that terminal, that particular application will die.

112
00:08:33,750 --> 00:08:36,550
Along with that, that particular Docker container will exit.

113
00:08:37,590 --> 00:08:39,780
So we run it in the Densmore.

114
00:08:40,080 --> 00:08:42,750
Right now, we want to run that container.

115
00:08:43,200 --> 00:08:44,910
So let's go ahead and do that.

116
00:08:46,260 --> 00:08:50,010
So it has started that we can check the processes that are running.

117
00:08:50,010 --> 00:08:51,630
So we will say DC, CBS.

118
00:08:52,950 --> 00:08:58,410
If you want to check the logs, games here are composed of our logs minus have web.

119
00:09:00,770 --> 00:09:06,320
So this particular Web application has been lodged, this Docker container has been launched.

120
00:09:07,070 --> 00:09:11,870
The logs are little different this time because we're used to different command this time.

121
00:09:12,950 --> 00:09:23,360
OK, so what should happen now is that if we send a request to our web application, it should give

122
00:09:23,360 --> 00:09:26,570
us a response, so we will send a response to start as you are it.

123
00:09:27,050 --> 00:09:28,640
And we got backup response.

124
00:09:28,640 --> 00:09:35,060
So that means our web application is running perfectly fine for that matter, if we want to connect

125
00:09:35,060 --> 00:09:38,660
from our system using browsers.

126
00:09:38,660 --> 00:09:41,660
So this is my workstation from where?

127
00:09:43,940 --> 00:09:45,680
I am trying to connect to leadership.

128
00:09:45,920 --> 00:09:47,290
I open a new depth.

129
00:09:48,350 --> 00:09:54,140
But before I go there, let me get the IP address of the host on which we are running this Docker container.

130
00:09:54,710 --> 00:09:59,150
So that's the IP address and port number is 8000.

131
00:09:59,660 --> 00:10:00,710
Let's go ahead and do that.

132
00:10:01,190 --> 00:10:03,760
So our web application is running, right?

133
00:10:03,800 --> 00:10:06,710
It won't do anything useful other than this.

134
00:10:08,000 --> 00:10:08,390
Correct.

135
00:10:08,840 --> 00:10:12,410
Because there are no services or database of anything over there.

136
00:10:13,400 --> 00:10:13,750
OK.

137
00:10:14,120 --> 00:10:16,190
So that's pretty good.

138
00:10:16,700 --> 00:10:23,030
We were able to connect to our web application from the workstation that we are working on.

139
00:10:23,720 --> 00:10:31,790
You'll have to make sure that the port is open on the firewall rule that covers this particular host.

140
00:10:32,270 --> 00:10:38,750
So there's the cloud machine on which are Docker containers, running rights, visiting machine.

141
00:10:39,200 --> 00:10:47,720
So there is a firewall rule that we had created for this particular machine, and that firewall rule

142
00:10:48,020 --> 00:10:52,910
should have eight thousand portals open if you're not able to connect to that port.

143
00:10:53,330 --> 00:10:58,610
You see that browser is trying to connect and is not able to correct them.

144
00:10:59,060 --> 00:11:01,640
You know that the port may not be open.

145
00:11:01,640 --> 00:11:05,270
That firewall port may not be open, so you will need to go ahead and do that.

146
00:11:08,360 --> 00:11:16,880
OK, so the next thing that we need to do now is that we need to start other components like our services,

147
00:11:16,880 --> 00:11:23,090
our database as Docker containers, so the next thing that we are going to do is we are going to start

148
00:11:23,090 --> 00:11:26,870
our services in other components as Docker containers.
