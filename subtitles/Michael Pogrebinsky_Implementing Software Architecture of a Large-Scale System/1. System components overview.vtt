WEBVTT
1
00:00:03.170 --> 00:00:05.870
So far, we have created a virtual machine on Google Cloud.

2
00:00:06.470 --> 00:00:11.570
We downloaded the source code of our system and we have done a build of our system.

3
00:00:12.530 --> 00:00:18.830
The next thing that we are going to do is that we will run our system and we will understand its current

4
00:00:18.830 --> 00:00:20.780
architecture and its functionality.

5
00:00:21.380 --> 00:00:28.070
It has very minimal functionality in terms of business logic, as our real goal is to focus on technical

6
00:00:28.070 --> 00:00:32.090
aspects and architecture of our system as we move along.

7
00:00:32.330 --> 00:00:37.160
We will enhance this architecture to meet large scale system requirements.

8
00:00:37.730 --> 00:00:43.970
So our system right now, it has got over that it has got a single page application which can be used

9
00:00:43.970 --> 00:00:50.240
as a mobile application and we have services, then we have a database.

10
00:00:51.350 --> 00:00:54.440
Now it is almost a three tiered architecture.

11
00:00:54.620 --> 00:01:03.110
The only element that we have added over here is that instead of one single monolithic service or business

12
00:01:03.110 --> 00:01:06.350
application, we have multiple services.

13
00:01:07.010 --> 00:01:12.980
If we expand our service part of our architecture diagram, then it will look like this.

14
00:01:14.310 --> 00:01:19.680
Now at this service layer, it begins to look like service oriented architecture, because now, instead

15
00:01:19.680 --> 00:01:22.830
of one single service, we have got multiple services.

16
00:01:23.220 --> 00:01:27.000
The other parts of our system, so let's say database is quite simple.

17
00:01:27.000 --> 00:01:34.500
It's still a single instance that every service needs to communicate with all our clients, be it their

18
00:01:34.500 --> 00:01:37.500
application or single page application.

19
00:01:37.530 --> 00:01:44.280
They both communicate with the individual services, so in that sense, they are simple that they are

20
00:01:44.280 --> 00:01:46.320
communicating with individual services.

21
00:01:46.860 --> 00:01:55.590
But the problem is that we have all these different board numbers that our clients need to remember.

22
00:01:56.190 --> 00:02:03.000
So we have all these different port numbers because we are running our services on the same virtual

23
00:02:03.000 --> 00:02:03.390
machine.

24
00:02:04.020 --> 00:02:06.750
If we run them on a different machine.

25
00:02:07.140 --> 00:02:12.420
So let's say if we put all these services on different, different machines, then we can run all of

26
00:02:12.420 --> 00:02:14.340
them on standard boards.

27
00:02:14.700 --> 00:02:17.730
But in that case, the IP addresses will change.

28
00:02:18.270 --> 00:02:22.440
So in either case, all our services will have a different origin.

29
00:02:22.980 --> 00:02:29.850
So that's a problem for all our clients and even for those services which make internal calls.

30
00:02:29.850 --> 00:02:35.040
So let's have this order service has to make an internal call to inventory service.

31
00:02:35.040 --> 00:02:36.870
So that's an internal flight.

32
00:02:37.320 --> 00:02:43.680
So he had also the order service needs to know on which host and port inventory service is running.

33
00:02:44.370 --> 00:02:46.380
So that is a problem for all airplanes.

34
00:02:47.100 --> 00:02:52.260
All such things make configuring individual components a very complex exercise.

35
00:02:52.860 --> 00:02:56.940
We will see this issue in a bit when we run our system.

36
00:02:58.830 --> 00:03:04.480
But before we run our system, let's understand what technologies we have used for building our system.

37
00:03:04.500 --> 00:03:10.520
It will help us in appreciating and understanding the system better for single page application.

38
00:03:10.530 --> 00:03:19.590
We have used reactors for the web application we have used by then Django framework for services.

39
00:03:19.860 --> 00:03:26.730
We have used Java along with spring framework and springboard for the database.

40
00:03:26.910 --> 00:03:29.490
We have used Postgres Haskell idioms.

41
00:03:30.750 --> 00:03:36.690
First, we will run our system to better appreciate its current architecture and to understand its functionality.

42
00:03:37.590 --> 00:03:43.230
Once we are done with that, we will look at these individual components in a little more detail.

43
00:03:43.650 --> 00:03:50.820
We will look at what technology choices we had for each of these components and why we have chosen what

44
00:03:50.820 --> 00:03:51.510
we have chosen.

45
00:03:52.410 --> 00:03:54.600
But before that, let's run our system.
