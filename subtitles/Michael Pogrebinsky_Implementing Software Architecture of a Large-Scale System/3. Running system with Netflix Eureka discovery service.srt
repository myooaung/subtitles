1
00:00:01,890 --> 00:00:04,230
I have just started the work station instance.

2
00:00:04,680 --> 00:00:06,240
Now I'm going to connect to it.

3
00:00:12,600 --> 00:00:14,520
OK, we have connected to the instance.

4
00:00:17,120 --> 00:00:19,400
Now, let's first see the configuration that we have.

5
00:00:23,190 --> 00:00:26,220
And here we will go to them was.

6
00:00:30,150 --> 00:00:33,360
Let's just find out if any Docker containers are running.

7
00:00:35,920 --> 00:00:38,490
So there are no Docker containers running, so we are going to go.

8
00:00:40,170 --> 00:00:44,730
So let's go into Discovery Service demo directly here.

9
00:00:44,760 --> 00:00:47,790
Let's take a look at the data and verify it.

10
00:00:48,480 --> 00:00:52,290
So here, if we look at this dart in, we file carefully.

11
00:00:53,100 --> 00:00:56,970
We have done some setting for our web app.

12
00:00:57,600 --> 00:01:00,540
We have given it a registry audit, which is our discovery service.

13
00:01:00,540 --> 00:01:05,220
You audit so so that now our web can connect to this discovery service.

14
00:01:05,220 --> 00:01:10,950
We have done this just to get the information out of our discovery service, and we should be able to

15
00:01:10,950 --> 00:01:12,030
see that in our web app.

16
00:01:12,030 --> 00:01:14,000
So it just a convenience thing.

17
00:01:14,010 --> 00:01:16,320
It is not playing any role in.

18
00:01:16,320 --> 00:01:23,130
The application is such the one that really matters to us is these settings where we have said Yureka

19
00:01:23,160 --> 00:01:31,380
Client registered with you guys Drew and Yureka Client Fetch Registry as to who this should be used

20
00:01:31,380 --> 00:01:34,270
by the clients, which needs registry information.

21
00:01:34,830 --> 00:01:40,920
And this is for every instance that needs to register itself at the registry.

22
00:01:41,310 --> 00:01:43,080
This should be used only bike lanes.

23
00:01:43,440 --> 00:01:48,840
So ideally we should have bought this only with client instances like Gateway Service or reservist.

24
00:01:49,590 --> 00:01:50,900
For other services.

25
00:01:50,910 --> 00:01:55,800
It's kind of redundant now the service you are.

26
00:01:56,370 --> 00:02:04,020
How does each instance know where you record service is located before registering itself?

27
00:02:04,530 --> 00:02:07,170
Or it is were facing registry information?

28
00:02:07,170 --> 00:02:15,000
So this is this heading which will tell the Yureka most important information and for the clients that

29
00:02:15,000 --> 00:02:18,540
we have used within gateway service and or service.

30
00:02:18,870 --> 00:02:23,380
This setting needs to be true and we will discuss this later on in the next section.

31
00:02:23,400 --> 00:02:24,810
What this really means.

32
00:02:25,770 --> 00:02:32,730
So these are the settings in the environment file that we have right now in the discovery service demo.

33
00:02:33,270 --> 00:02:41,820
But let's say, if we go back to our previous demo, we did not have the settings where we look at that.

34
00:02:42,600 --> 00:02:49,530
Here we had the actual routing information that we gave to a load balance area, but that where exactly

35
00:02:49,530 --> 00:02:55,410
each service is located, so this will give is obviously located, is where I had been services located.

36
00:02:55,410 --> 00:03:00,420
Similarly authorization user profile product or the inventory service.

37
00:03:00,780 --> 00:03:07,110
So what each service we had given these locations as to where they are located.

38
00:03:07,110 --> 00:03:13,980
But if we look at the current environment, find this information is not dead, it is absent.

39
00:03:14,640 --> 00:03:19,600
The information that is there is about the registry service.

40
00:03:19,600 --> 00:03:26,070
So all the clients need to fetch the routing information from Yureka service.

41
00:03:26,070 --> 00:03:28,890
So that's the difference over here.

42
00:03:29,280 --> 00:03:34,030
And that's the crucial difference that we have not provided any routing information.

43
00:03:34,050 --> 00:03:40,170
Now what we expect is even though we have not provided any routing information, our system should work.

44
00:03:41,130 --> 00:03:49,980
So now before we start this system, let's also look at our Docker compose file, where we have created

45
00:03:49,980 --> 00:03:52,040
a new service for Yurek.

46
00:03:52,090 --> 00:03:57,960
Also here does this service configuration that we have done for you recorded history?

47
00:03:58,440 --> 00:04:07,620
So this is pretty much the same as any other service and the overriding options that we have provided

48
00:04:07,620 --> 00:04:08,090
over here.

49
00:04:08,550 --> 00:04:10,830
This is a registry and it is not a cluster.

50
00:04:10,830 --> 00:04:17,820
So we have done this setting over here that do not need to register with Yureka and do not need to fetch

51
00:04:17,820 --> 00:04:19,020
registry information.

52
00:04:19,440 --> 00:04:25,380
And we have also given here the bullet information on which this unique registry should come up.

53
00:04:25,950 --> 00:04:32,370
So this will start like any other service and when we run it over Docker compose, if the image is not

54
00:04:32,370 --> 00:04:34,590
already built, it will also build the image.

55
00:04:35,130 --> 00:04:39,870
Debate is done as part of the comprehensive build that we have done.

56
00:04:40,260 --> 00:04:41,960
That will take care of that.

57
00:04:41,970 --> 00:04:44,160
The Eurico registry is also there.

58
00:04:44,670 --> 00:04:51,960
If we have not done this before, then what we can do is we can go to the main project directly.

59
00:04:52,530 --> 00:04:54,720
And here we can do this

60
00:04:57,630 --> 00:05:00,990
doorbell system and we can just ask for a big.

61
00:05:05,830 --> 00:05:08,890
I'll post the video now and wait for the bill to complete.

62
00:05:13,150 --> 00:05:14,650
OK, our bill is completed.

63
00:05:15,820 --> 00:05:21,790
So this has gone through, so now what we can do is we can go into Dr. Demo's directly.

64
00:05:25,420 --> 00:05:28,390
And we can do this, we build over here.

65
00:05:28,960 --> 00:05:35,050
So whatever images are not built, it will ensure that those images get built and if something has to

66
00:05:35,050 --> 00:05:36,670
be updated, it will get updated.

67
00:05:38,410 --> 00:05:41,230
So now we check the darker images.

68
00:05:42,460 --> 00:05:45,040
This would be you regret you stream it.

69
00:05:45,040 --> 00:05:46,030
So now we have that.

70
00:05:46,750 --> 00:05:48,820
Now we have all the images that we need.

71
00:05:49,150 --> 00:05:53,830
Only thing that we need to do now is we need to bring up our system, so.

72
00:05:54,920 --> 00:06:03,010
We do this Docker compose of minus D, this should bring all the services that are dead in the Docker

73
00:06:03,010 --> 00:06:03,850
compose file.

74
00:06:05,050 --> 00:06:06,940
So this will take some time.

75
00:06:06,940 --> 00:06:12,730
This has started all these services and digitized what we can build on.

76
00:06:12,730 --> 00:06:19,780
Probably, let's say, Yureka service or let's do that Docker container, or we can use Docker compose

77
00:06:19,780 --> 00:06:20,560
command itself.

78
00:06:28,830 --> 00:06:32,240
So this is also very much like a service, adult services that we had.

79
00:06:32,250 --> 00:06:33,930
It's also a Springwood service.

80
00:06:34,540 --> 00:06:36,810
It just that because that is it is.

81
00:06:37,410 --> 00:06:40,680
We have got it from Netflix, Utica.

82
00:06:42,870 --> 00:06:49,740
So this has started the job for now of direct service or it has started it teams, but it will wait

83
00:06:49,740 --> 00:06:55,080
for other services for them to register with this.

84
00:06:55,620 --> 00:07:00,070
So let's just check what other services are there.

85
00:07:00,090 --> 00:07:02,040
I can just do DCP s.

86
00:07:03,000 --> 00:07:05,340
So let's just check if gateway service is up.

87
00:07:16,550 --> 00:07:20,840
Gateway service is also coming up, so it's going to take time, there are a lot of other services,

88
00:07:20,840 --> 00:07:26,420
so this machine is going to share CBD with all of these services that we are trying to bring up.

89
00:07:26,420 --> 00:07:27,590
So it's going to take some time.

90
00:07:27,590 --> 00:07:31,910
So I'm going to pause the video and be able to come back once all these services are up.

91
00:07:34,380 --> 00:07:42,690
So our great service has come up to just check there is at least one more service which is up.

92
00:07:48,120 --> 00:07:54,810
So authorisation, so this is also up so we can begin checking so he can check two things, not one

93
00:07:55,380 --> 00:07:57,510
if our discovery service is up or not.

94
00:07:58,530 --> 00:08:05,510
The second thing that we can check is that if the system is working using this discovery service, so

95
00:08:05,520 --> 00:08:12,810
if our system is working, it is it will work only because discovery service is doing its job because

96
00:08:12,810 --> 00:08:15,930
we have not provided any routing information to the system.

97
00:08:16,560 --> 00:08:18,240
So let's do one thing first.

98
00:08:18,240 --> 00:08:22,860
Let's try to connect to our discovery service using the browser.

99
00:08:22,860 --> 00:08:31,680
So we copy this IP address and we noticed that our discovery service is actually running on board eight

100
00:08:31,680 --> 00:08:32,460
seven six one.

101
00:08:32,460 --> 00:08:34,140
So we should be able to connect to that.

102
00:08:34,680 --> 00:08:41,130
But because we are connecting outside of this Docker network, so we will use this IP address and the

103
00:08:41,130 --> 00:08:48,900
port will remain the same as we are exporting this port and we are connected to this Eureka registry

104
00:08:49,320 --> 00:08:55,050
and this Eureka registry has got information for all these services that we have registered.

105
00:08:55,680 --> 00:08:59,250
And these are the names host and port of.

106
00:09:00,530 --> 00:09:03,920
All these services that are registered with you recorded history.

107
00:09:04,410 --> 00:09:07,500
So the service is discovery service is up.

108
00:09:07,520 --> 00:09:11,120
Now we should be able to work with our system on.

109
00:09:11,330 --> 00:09:13,280
So let's try to access our system.

110
00:09:14,330 --> 00:09:17,120
That's connect to for 8000 right now.

111
00:09:17,420 --> 00:09:18,970
That is our web application book.

112
00:09:20,000 --> 00:09:25,820
So we are logged in into this because we may have to log in cookie if I sign up.

113
00:09:26,540 --> 00:09:30,810
Now, if I try to sign in, this should hit the authorization service.

114
00:09:31,610 --> 00:09:32,960
Why our gateway service?

115
00:09:33,230 --> 00:09:36,070
So this works, that means our system is functioning fine.

116
00:09:36,600 --> 00:09:37,910
OK, be able to log in.

117
00:09:38,330 --> 00:09:47,150
So that means at least Gateway Service and authorization service are working in gateway services aware

118
00:09:47,150 --> 00:09:50,240
of this authorization service by virtue of.

119
00:09:51,520 --> 00:09:56,560
Discovery service, so there is no routing information explicitly available to upgrade service.

120
00:09:57,070 --> 00:10:00,970
Now let's just check if all these services are up and running or not.

121
00:10:05,860 --> 00:10:14,290
So services are up now here, because now we have a new discovery service, so our registry status button

122
00:10:14,290 --> 00:10:15,310
will start working.

123
00:10:16,000 --> 00:10:22,420
This is what I told you earlier that we did an extra configuration in our application to make it aware

124
00:10:22,420 --> 00:10:24,350
of Yureka registries.

125
00:10:24,350 --> 00:10:30,880
So now if I click this, this will fetch the registry information as a JSON and this is what we have,

126
00:10:31,180 --> 00:10:39,490
and this is really convenient to see all the information that is stored in the discovery service in

127
00:10:39,490 --> 00:10:40,510
the Yureka registry.

128
00:10:40,720 --> 00:10:46,090
So let's say this product service, it is available on this particular IP address.

129
00:10:46,570 --> 00:10:52,600
And if you see the IP address of admin service, it is different here.

130
00:10:53,290 --> 00:11:00,640
There's the IP address, so this one is on two and the product service is on for.

131
00:11:01,240 --> 00:11:07,540
So this way we get even know the IP addresses, but here we are calling services.

132
00:11:07,540 --> 00:11:10,750
We are not using IP addresses, although that is an option.

133
00:11:11,470 --> 00:11:19,300
But what we are doing is we are calling them through their host name because Bulker Network provides

134
00:11:19,300 --> 00:11:26,920
us DNS service and here we call services within the Docker network using that name.

135
00:11:27,310 --> 00:11:32,920
Then the Docker network will resolve that name to this IP address so we can work with names.

136
00:11:32,920 --> 00:11:37,930
Names is generally convenient because names do not change.

137
00:11:38,650 --> 00:11:41,230
And behind that, we can change the IP address.

138
00:11:41,230 --> 00:11:47,710
But when we are working with our discovery service, we can even work with IP addresses because both

139
00:11:47,710 --> 00:11:49,630
information are available to us.

140
00:11:50,500 --> 00:11:50,860
OK.

141
00:11:51,160 --> 00:11:59,530
So that's discovery service, which is up and running right now, and that's our system which is able

142
00:11:59,530 --> 00:12:04,240
to work with discovery service so that inside demo of discovery service.

143
00:12:04,660 --> 00:12:08,620
With this, we have integrated discovery service into our system.
