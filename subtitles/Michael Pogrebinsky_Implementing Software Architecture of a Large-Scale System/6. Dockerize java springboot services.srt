1
00:00:02,120 --> 00:00:07,700
The next component that we are going to containerized is services, the services.

2
00:00:08,090 --> 00:00:09,770
This is the configuration file.

3
00:00:09,800 --> 00:00:13,940
What we are going to do is we're going to take a line Docker image.

4
00:00:13,940 --> 00:00:20,930
On top of that, we will install Java and we will copy Java B, which are basically raw files over here.

5
00:00:21,410 --> 00:00:28,040
So we will copy them and that will be our Docker image for services.

6
00:00:28,350 --> 00:00:31,520
Now we will be one single image for all services.

7
00:00:31,520 --> 00:00:36,230
So let's say we have authorization service, product service, order service and inventory service.

8
00:00:36,740 --> 00:00:38,570
We will not be separate images.

9
00:00:38,570 --> 00:00:43,100
What we will do is these separate water files, which are there for each module.

10
00:00:43,490 --> 00:00:46,070
We will copy all of them on a single image.

11
00:00:46,490 --> 00:00:50,510
So we will use this single image for all these services.

12
00:00:51,200 --> 00:00:59,000
And how do each service instruct that image to run the right component or right service?

13
00:00:59,480 --> 00:01:08,450
That will be to a parameter that we will pass when using command attribute over here and we will provide

14
00:01:08,720 --> 00:01:10,160
the service name to this.

15
00:01:10,160 --> 00:01:15,110
I just quickly show you how this works, but this is the configuration we have.

16
00:01:15,380 --> 00:01:23,570
We have separated the configuration over here, so one configuration we have done just to base the Docker

17
00:01:23,570 --> 00:01:23,930
image.

18
00:01:24,140 --> 00:01:27,170
So this configuration will help in building the Docker image.

19
00:01:27,500 --> 00:01:30,410
It's the same configuration that we have done earlier.

20
00:01:30,410 --> 00:01:37,220
Also just that we have separated it for just doing one common bay for all these services.

21
00:01:37,520 --> 00:01:41,480
And this is the configuration for running a service.

22
00:01:41,480 --> 00:01:43,820
In this case, it has authorization service.

23
00:01:44,180 --> 00:01:47,570
So similarly, we can configure other services as well.

24
00:01:48,020 --> 00:01:51,350
So what we will do is we will copy this configuration.

25
00:01:57,050 --> 00:02:03,110
One thing to note over here is that this services and these services above they are totally different.

26
00:02:03,470 --> 00:02:08,120
It's just a coincidence that these two names are same.

27
00:02:09,220 --> 00:02:13,820
If we would have named us, obviously there's something else, let's say microservices, then we would

28
00:02:13,820 --> 00:02:15,470
have put microservices over here.

29
00:02:15,770 --> 00:02:20,390
The services will remain as so, he says, because there does Docker compose services.

30
00:02:20,870 --> 00:02:23,420
So hopefully we have copied this stuff.

31
00:02:27,830 --> 00:02:29,840
So let me open the compose file.

32
00:02:33,050 --> 00:02:35,480
That's based what we have already copied.

33
00:02:38,000 --> 00:02:46,580
So this court copied and pasted over here, I'm going to save this, so we save the configuration information

34
00:02:47,090 --> 00:02:51,650
for services as well, let me just verify that.

35
00:02:52,400 --> 00:03:00,890
OK, so it has its authorization, so service has been configured so we can now do a bit.

36
00:03:01,250 --> 00:03:07,400
But before I do it, let me just show you how to how we have configured this particular container.

37
00:03:07,930 --> 00:03:09,140
So let's quickly do that.

38
00:03:10,730 --> 00:03:12,200
So we'll go to services.

39
00:03:13,130 --> 00:03:14,390
Here we have Docker file.

40
00:03:14,390 --> 00:03:15,680
Let's take a look at this.

41
00:03:17,540 --> 00:03:25,010
What we are doing over here is first, we are taking the Ubuntu image, then we have installed Java

42
00:03:25,040 --> 00:03:25,610
over again.

43
00:03:26,180 --> 00:03:32,480
And then if you see this, we have copied all the Iraq War files for all these services that we have.

44
00:03:33,170 --> 00:03:39,440
So in one chart, in one image, we are doing this and we are going to reuse this image for every individual.

45
00:03:39,440 --> 00:03:40,370
So this container?

46
00:03:41,130 --> 00:03:44,030
Then these are this is for debugging.

47
00:03:44,270 --> 00:03:44,960
We have copied.

48
00:03:44,960 --> 00:03:46,100
We are going to ignore it for now.

49
00:03:46,970 --> 00:03:56,060
And then we are copying Docker and 3.0 over here at a particular location on this Docker image.

50
00:03:56,690 --> 00:03:59,600
Then we have configured entry point over here.

51
00:03:59,690 --> 00:04:06,950
What this means is when we run this Docker container through this Docker image, then it will use this

52
00:04:06,950 --> 00:04:15,620
particular Docker and $3.00 edge file to launch whatever we are launching in this script.

53
00:04:16,430 --> 00:04:19,730
So now we can even take a look at this script.

54
00:04:21,350 --> 00:04:24,110
Let me first test process.

55
00:04:25,220 --> 00:04:25,580
OK.

56
00:04:26,120 --> 00:04:27,080
So we see this.

57
00:04:28,430 --> 00:04:30,770
We will have to go to image.

58
00:04:31,790 --> 00:04:34,280
Let's read our Docker entry point test.

59
00:04:34,520 --> 00:04:35,810
Let's take a look at that.

60
00:04:38,130 --> 00:04:42,930
So this file has to be copied to the image, that's why it is dead in this image directly.

61
00:04:43,830 --> 00:04:50,970
All it does is it looks for an argument if that argument is missing, it says that so this idea argument

62
00:04:50,970 --> 00:04:51,390
is missing.

63
00:04:51,390 --> 00:04:56,400
So basically, we need to provide an ID for the service that we need to not in this case, we are planning

64
00:04:56,400 --> 00:04:59,700
to launch Autorizacion Service or the IED for that is art.

65
00:05:00,210 --> 00:05:05,520
So we are going to post that for similarly for, let's say we are launching inventory, the Service

66
00:05:05,520 --> 00:05:07,890
84 inventory services inventory.

67
00:05:07,890 --> 00:05:09,630
So we'll have to pass that as an argument.

68
00:05:10,410 --> 00:05:13,830
There are a lot of script statements over here.

69
00:05:14,290 --> 00:05:15,690
We can ignore them for now.

70
00:05:15,720 --> 00:05:18,690
They are mainly there for debugging purpose.

71
00:05:18,930 --> 00:05:25,770
So let's say if you want to debug this container by attaching a debugger to this, then this will help

72
00:05:25,770 --> 00:05:26,590
us in doing this.

73
00:05:26,820 --> 00:05:32,730
That is Jim and DBA configuration for that, that are garbage collection options over here.

74
00:05:33,300 --> 00:05:34,920
So we will take all these options.

75
00:05:34,920 --> 00:05:41,070
And finally, the most important statement over here is we run Java application with these Java options.

76
00:05:41,550 --> 00:05:49,650
And the Java final word file that we are using over here will be based on this service IDE parameter,

77
00:05:49,650 --> 00:05:54,630
which is basically the parameter provided to this particular script.

78
00:05:56,070 --> 00:05:59,660
So that is what we have over here.

79
00:05:59,670 --> 00:06:05,790
So this first parameter, the first argument is basically the service ID that we want to run.

80
00:06:05,890 --> 00:06:08,310
So configuration file should provide that.

81
00:06:08,310 --> 00:06:10,530
So and it is indeed providing it.

82
00:06:10,530 --> 00:06:16,680
So when we write command port, this is that parameter that will be supplied to our Docker entry point.

83
00:06:17,130 --> 00:06:17,670
File.

84
00:06:18,060 --> 00:06:19,140
So let's close this.

85
00:06:19,680 --> 00:06:26,040
The last thing of interest over here is there should be a directory VAR over here, which is not there

86
00:06:26,040 --> 00:06:26,580
right now.

87
00:06:26,940 --> 00:06:28,130
Why am I saying that?

88
00:06:28,140 --> 00:06:29,700
Let me open Docker file.

89
00:06:30,840 --> 00:06:34,440
So if I open Docker, file this particular statement.

90
00:06:34,440 --> 00:06:42,360
If we look at this, is trying to copy all these war files from this image war directly and it will

91
00:06:42,360 --> 00:06:46,440
copy all these war files to us or directly on our image.

92
00:06:46,800 --> 00:06:47,940
So we need all these.

93
00:06:49,540 --> 00:06:55,030
Verifies that part of our service has been so we need to make sure that they are there in this image

94
00:06:55,030 --> 00:06:55,600
directly.

95
00:06:56,080 --> 00:07:00,880
So we need to copy that, but copy them, copying them will be painful.

96
00:07:01,540 --> 00:07:08,440
What we can do is we have a script over here in Dakar, directly itself in Dakar bin directory.

97
00:07:08,440 --> 00:07:17,430
If we go and we execute this script called Pull Our Defects, then it will pull all the artifacts for

98
00:07:17,440 --> 00:07:21,670
that application, for single page application, for pretty much everything.

99
00:07:21,670 --> 00:07:25,210
Wherever we are building a Dover container, we need a bailout defect.

100
00:07:25,510 --> 00:07:32,920
This script will copy that, but this script copies it from staging location and that staging location.

101
00:07:32,920 --> 00:07:39,850
I'll show you where that staging location is that is there in this road directly if we go to stage staging

102
00:07:39,850 --> 00:07:40,420
directly.

103
00:07:41,650 --> 00:07:45,340
This is where everything is supposed to be, but it isn't there right now.

104
00:07:45,640 --> 00:07:54,370
What we can do is we can either run this script, it just pull artifacts in staging bin directory.

105
00:07:54,370 --> 00:07:57,520
We can run that or that is a convenient way of doing this.

106
00:07:57,730 --> 00:08:06,070
If we are in the project who directly at the top level there, we can use this base system dataset because

107
00:08:06,070 --> 00:08:07,420
we have already done debate.

108
00:08:08,820 --> 00:08:10,300
Can I just show you?

109
00:08:10,720 --> 00:08:18,190
So this system data sets base is what we did earlier, which created all the artifacts.

110
00:08:18,490 --> 00:08:23,260
But these artifacts right now are located in individual components so scored directly.

111
00:08:23,860 --> 00:08:30,340
What we are going to do is we are going to collect all these artifacts and copy them and do staging

112
00:08:30,340 --> 00:08:30,970
directly.

113
00:08:31,540 --> 00:08:36,870
So once this build is over, then we can launch that other command.

114
00:08:37,180 --> 00:08:38,170
So we'll wait for this.

115
00:08:56,440 --> 00:09:00,940
So the bill is complete, and this is the command that we have used.

116
00:09:01,240 --> 00:09:06,340
Now what we will do is, again, we will use this command, but with a different parameter.

117
00:09:06,340 --> 00:09:07,750
Earlier, the perimeter was built.

118
00:09:08,020 --> 00:09:10,240
Now we will use stage perimeter.

119
00:09:11,730 --> 00:09:20,400
So this should copy all the artifacts to staging directly, so if we go to staging directly now and

120
00:09:20,400 --> 00:09:25,760
check there are all these directories over here which would have built artifacts.

121
00:09:25,760 --> 00:09:30,420
So let's say if I look at them directly, it has the web application artifact.

122
00:09:30,810 --> 00:09:36,390
If I look at services directly, it has all the board finds that we need.

123
00:09:36,960 --> 00:09:40,440
Now we need to copy these raw files to Docker container.

124
00:09:40,920 --> 00:09:44,070
So what we will do is we will go to.

125
00:09:45,310 --> 00:09:51,280
By the way, there is automation for all this in one chart with one command, we can do everything,

126
00:09:51,610 --> 00:09:56,650
but I'm just breaking it down for you so that you understand what exactly is happening over here.

127
00:09:57,100 --> 00:10:00,010
Even if you do not understand it fully, it's perfectly fine.

128
00:10:00,310 --> 00:10:05,260
You can always go back to the script in the code base and check out what exactly is happening.

129
00:10:05,800 --> 00:10:09,550
So let's go to the doctor directly now, Dr Bean.

130
00:10:10,240 --> 00:10:13,750
And here we will call this artifact stored as dosage.

131
00:10:14,440 --> 00:10:22,420
So now this would have copy the build defects in the services directory of Docker that just verify this

132
00:10:22,420 --> 00:10:24,310
image war.

133
00:10:24,940 --> 00:10:26,710
And all these word files are copy.

134
00:10:27,700 --> 00:10:28,390
So that's good.

135
00:10:29,230 --> 00:10:33,550
Now we are ready to build these services image.

136
00:10:33,550 --> 00:10:39,400
So let's go one level up in the Docker Directorate DC minus f Docker.

137
00:10:39,640 --> 00:10:44,500
This one is treated and the command is buried and we want to be.

138
00:10:44,850 --> 00:10:50,530
So this is this will build a container called services, where that container is not for launching.

139
00:10:50,920 --> 00:10:53,650
This is just for building our services.

140
00:10:55,400 --> 00:11:00,290
So this one is going to install Java and probably some of their software, so it is going to take some

141
00:11:00,290 --> 00:11:00,590
time.

142
00:11:00,620 --> 00:11:02,480
We are going to pause this video and come back.

143
00:11:05,110 --> 00:11:07,390
OK, so services image has got built.

144
00:11:07,780 --> 00:11:17,380
Now let's just verify that we will do Docker images, so if we see over here, over here, we see A.W.

145
00:11:17,380 --> 00:11:19,270
services to, the image has got big.

146
00:11:19,780 --> 00:11:23,440
So now we're ready to run services.

147
00:11:24,070 --> 00:11:26,200
So the command for that would be a game.

148
00:11:30,420 --> 00:11:37,230
Up minus deep, and in this case, it will be Autorizacion service, because that that's what we're

149
00:11:37,680 --> 00:11:38,160
running.

150
00:11:38,490 --> 00:11:44,190
One more thing over here is that how the service has not there is our database located for that.

151
00:11:44,190 --> 00:11:48,420
We have passed this information as an environment variable.

152
00:11:48,750 --> 00:11:56,620
So this environment variable says database podcast host is located at localhost and it will localhost

153
00:11:56,620 --> 00:12:01,890
host will work because right now we are using the network mode as host.

154
00:12:02,250 --> 00:12:08,610
So everything, all the containers that are running right now, they are not in an exclusive network.

155
00:12:08,610 --> 00:12:15,120
They are using the network that is present on this particular cloud machine on which we are working

156
00:12:15,120 --> 00:12:15,780
on right now.

157
00:12:16,050 --> 00:12:17,970
This is not something that we are going to use later.

158
00:12:17,970 --> 00:12:25,320
We are going to create our Docker network, a separate network so that we can address each component

159
00:12:25,500 --> 00:12:28,630
with some machine name, which is more realistic.

160
00:12:29,100 --> 00:12:30,350
And we will discuss about that.

161
00:12:30,360 --> 00:12:31,530
Why do we need to do that?

162
00:12:31,800 --> 00:12:37,530
But all I am mentioning over here is this that this network mode host is temporary over here.

163
00:12:38,040 --> 00:12:41,430
It works probably only on Linux.

164
00:12:41,550 --> 00:12:46,710
It won't work on Mac OS that I know because I've tried that it doesn't work.

165
00:12:46,710 --> 00:12:52,860
So there's not something which is recommended, but it makes it easier to learn to start work, to know

166
00:12:52,860 --> 00:12:53,700
what is going on.

167
00:12:54,090 --> 00:12:59,940
So now, once we are done with on this, then we will revisit this network and see how we can improve

168
00:12:59,940 --> 00:13:00,270
that.

169
00:13:01,230 --> 00:13:05,400
So that will be something quick, only nothing much in that, but it's still something that we need

170
00:13:05,400 --> 00:13:05,760
to do.

171
00:13:06,570 --> 00:13:06,990
OK.

172
00:13:07,260 --> 00:13:09,930
So let's go back to our services.

173
00:13:10,110 --> 00:13:10,620
Let's.

174
00:13:12,590 --> 00:13:15,500
Run this command, and it seems there is some problem.

175
00:13:17,120 --> 00:13:17,450
OK.

176
00:13:17,750 --> 00:13:20,450
I think the command that I have used is wrong.

177
00:13:21,080 --> 00:13:22,100
Well, let me clear this.

178
00:13:22,360 --> 00:13:28,670
This is the command that I used, so it's sort of a minus state needs to remind us, have profile.

179
00:13:29,210 --> 00:13:30,260
It's should work.

180
00:13:31,040 --> 00:13:34,280
So this has created Docker container.

181
00:13:34,940 --> 00:13:40,610
OK, let's list all the containers that are running right now to the Docker.

182
00:13:40,880 --> 00:13:43,040
So this one is up.

183
00:13:43,430 --> 00:13:45,830
If we see the logs, let's just check the log.

184
00:13:49,010 --> 00:13:50,060
Or service?

185
00:13:51,650 --> 00:13:53,240
So the service has come up.

186
00:13:54,440 --> 00:13:59,900
There is one exception over here, but if you see this, this is related to iiNet address.

187
00:14:00,290 --> 00:14:04,400
It is not able to find the address of this machine.

188
00:14:04,520 --> 00:14:09,650
So the hostname of this machine caused by a Java dot net unknown host exception.

189
00:14:10,160 --> 00:14:13,280
This is some problem because of Docker networking.

190
00:14:14,120 --> 00:14:18,140
So this issue is harmless over here, so we are going to ignore it.

191
00:14:18,530 --> 00:14:20,770
It was not worth finding a fix for this.

192
00:14:20,780 --> 00:14:20,990
Why?

193
00:14:20,990 --> 00:14:27,890
When done that, because there's not the network that we are going to use, but our service is running

194
00:14:27,890 --> 00:14:30,740
right now so we can also test it.

195
00:14:30,740 --> 00:14:35,390
But a better thing would be to bring up our single page application also.

196
00:14:35,390 --> 00:14:37,790
And then there's the whole system together.

197
00:14:39,110 --> 00:14:41,640
So that completes the launch of our services.

198
00:14:41,660 --> 00:14:43,340
Now let's move to the next computer.
