WEBVTT
1
00:00:01.530 --> 00:00:02.820
OK, let's get started.

2
00:00:03.270 --> 00:00:08.430
So the first thing that we will do is we will build Docker images pretty much the same way that we have

3
00:00:08.430 --> 00:00:09.840
been building so far.

4
00:00:10.380 --> 00:00:14.860
And then we will upload those images to Google Container Registry.

5
00:00:15.540 --> 00:00:18.270
So let's first go to our baby machine.

6
00:00:18.570 --> 00:00:19.920
I've already started that.

7
00:00:21.280 --> 00:00:28.030
Once we are connected, we will trigger a complete bill which will build the entire core base and it

8
00:00:28.030 --> 00:00:30.090
will create the darker images.

9
00:00:30.100 --> 00:00:34.720
So this is something that you will have to do every time you want to create Docker images.

10
00:00:34.720 --> 00:00:40.150
So let's first go to our project directly in the road directly.

11
00:00:40.150 --> 00:00:49.060
We have this script called Base System and we will run it without any arguments and you will say yes

12
00:00:49.060 --> 00:00:54.430
to it because we want to do a complete build, which is building the code base, stating them to us,

13
00:00:54.430 --> 00:01:01.120
stating directly, which is on this machine itself, and then building Docker images to that.

14
00:01:01.130 --> 00:01:04.780
So far, we have been doing it in multiple different steps.

15
00:01:05.140 --> 00:01:08.470
Now we will do it all together in just one step.

16
00:01:08.470 --> 00:01:15.400
So let's say yes to this and this will do everything that is needed to build Docker images, so you

17
00:01:15.400 --> 00:01:17.980
just need code base and trigger the script.

18
00:01:18.250 --> 00:01:24.550
All images will be built on the machine that we are running this on the code base.

19
00:01:25.090 --> 00:01:31.720
So while this is building code base and this will create the images, let's go and check our Google

20
00:01:31.720 --> 00:01:32.830
container registry.

21
00:01:33.640 --> 00:01:35.980
So for that, we will go to Google Cloud.

22
00:01:36.670 --> 00:01:40.420
And over here, I have safe container registry in my favorites.

23
00:01:40.900 --> 00:01:50.290
But if you haven't done so, then you can go down to CAC section and here you have a container that

24
00:01:50.290 --> 00:01:54.760
is to if you click this, you'll go to container registry.

25
00:01:54.760 --> 00:01:58.000
If you are coming here for the first time, it may ask you to enable the API.

26
00:01:58.540 --> 00:01:59.560
You can do so.

27
00:02:00.100 --> 00:02:07.960
And it may also ask you to try out Google Artifact Registry, which is an upgraded version of container

28
00:02:07.960 --> 00:02:08.480
registry.

29
00:02:08.500 --> 00:02:12.310
It's not actually an upgrade, it it's more generic.

30
00:02:12.490 --> 00:02:19.330
Not only artifact registry can store Docker containers, but it can store and be in packages million

31
00:02:19.330 --> 00:02:19.960
packages.

32
00:02:20.380 --> 00:02:26.230
So if you have a very generic requirement of storing artifacts, you can use artifact registry.

33
00:02:26.830 --> 00:02:29.650
But Google Cloud Registry is good enough for us.

34
00:02:30.520 --> 00:02:35.310
Now this Google Cloud Registry is there in two or three regions.

35
00:02:35.320 --> 00:02:39.820
I think it's there for Europe, for us and for Asia region.

36
00:02:40.360 --> 00:02:47.920
So depending upon you are in which region using Google Cloud, you can select one of those registry

37
00:02:47.920 --> 00:02:49.750
host and I'll tell you where it is needed.

38
00:02:50.170 --> 00:02:51.940
So right now, this is good enough.

39
00:02:52.210 --> 00:02:54.430
Let's just go back to our baby machine.

40
00:02:55.270 --> 00:02:57.190
So here the bill is in progress.

41
00:02:57.370 --> 00:03:02.200
Right now it is building Docker images, so we will allow it to be.

42
00:03:03.250 --> 00:03:06.610
Maybe we'll have to wait for half a minute more, so we will wait for it.

43
00:03:07.720 --> 00:03:14.650
Once this bill is done, then we will check all a little images that are there on this machine and then

44
00:03:14.650 --> 00:03:18.420
we will use certain scripts that are already available.

45
00:03:19.570 --> 00:03:22.840
To upload these images that we're generating.

46
00:03:23.110 --> 00:03:29.320
The first thing that we have to do is we have to authorize this machine with permissions to be able

47
00:03:29.320 --> 00:03:32.890
to upload oladokun images to Google Container Registry.

48
00:03:33.220 --> 00:03:38.770
So we'll have to authorize this machine for which already there are scripts available and we'll make

49
00:03:38.770 --> 00:03:39.730
use of those clips.

50
00:03:40.690 --> 00:03:43.930
So this bill isn't the last step, and it's already done.

51
00:03:44.980 --> 00:03:47.650
So now let's check Docker images.

52
00:03:50.050 --> 00:03:53.830
So these are the images that we have on this machine.

53
00:03:54.160 --> 00:04:01.870
So all the images that are starting with A.W. Slash, these are the images that we have prepared and

54
00:04:01.900 --> 00:04:04.270
all the other images which do not have that.

55
00:04:04.870 --> 00:04:07.990
We have downloaded them from Docker registry.

56
00:04:07.990 --> 00:04:14.680
So we do not need to upload those images to Google Container Registry because Kubernetes can download

57
00:04:14.680 --> 00:04:15.760
these images.

58
00:04:16.000 --> 00:04:19.870
Docker registry images directly from Docker registry itself.

59
00:04:20.260 --> 00:04:26.050
So we only need to upload those images that we have created and they start with A.W. Slash.

60
00:04:27.970 --> 00:04:35.500
But before our daughter can actually upload these images, we have to authorize our doctors.

61
00:04:35.500 --> 00:04:40.600
So this Docker command that we have on this machine will have to authorize it.

62
00:04:40.960 --> 00:04:42.610
So let's go to Ben directly

63
00:04:44.730 --> 00:04:45.970
here.

64
00:04:46.390 --> 00:04:50.200
We have this script called GCP Authorize Docker.

65
00:04:50.860 --> 00:04:52.270
We will use this script.

66
00:04:54.160 --> 00:04:57.010
These are the contents of this doesn't do anything fancy.

67
00:04:57.010 --> 00:05:04.900
It uses some Google scripts to authorize the host Docker on this machine to be able to upload the images.

68
00:05:06.100 --> 00:05:07.150
So let's run this.

69
00:05:12.080 --> 00:05:20.930
So once we run this, this will use Google or to for giving permissions to Google Container Registry,

70
00:05:20.930 --> 00:05:23.330
so it is asking for a verification code.

71
00:05:23.960 --> 00:05:26.880
So to get the verification code will have to click this link.

72
00:05:26.900 --> 00:05:30.050
Either you can copy paste it or you can click this.

73
00:05:30.590 --> 00:05:32.660
This will open another window.

74
00:05:32.930 --> 00:05:39.890
So here you can choose the I.D. that you are using to work with Google Cloud, and you can give the

75
00:05:39.890 --> 00:05:41.540
permissions once you say allow.

76
00:05:41.990 --> 00:05:43.160
It will give you a code.

77
00:05:43.520 --> 00:05:51.740
You can copy this code in this the code that is actually required at this place from where we got this

78
00:05:51.740 --> 00:05:52.130
link.

79
00:05:57.240 --> 00:06:04.470
So now our doctor is authorized to upload the images to Google Container Registry, and these are the

80
00:06:04.860 --> 00:06:07.140
registry hosts that are available to us.

81
00:06:07.560 --> 00:06:12.540
So our thought IPO is Google Container Registry data, that's what it is.

82
00:06:13.200 --> 00:06:20.340
So this should be used by people who are working from us, and there is one more registry for the same

83
00:06:20.340 --> 00:06:20.790
purpose.

84
00:06:21.210 --> 00:06:28.440
People who are closer to Europe region or are in Europe region, they can use EU dodges silvertail for

85
00:06:28.440 --> 00:06:36.210
people in Asia region they can use is shared or declared or to do so like that, they have these registry

86
00:06:36.210 --> 00:06:39.210
host, so will make will make use of them.

87
00:06:39.660 --> 00:06:47.160
In my case, I am in Asia region, so I'm going to make use of is shared or decode tailor so many of

88
00:06:47.160 --> 00:06:49.350
these groups that we are going to use.

89
00:06:50.160 --> 00:06:57.240
If you do not provide them environment variable of registry post, then it will default to is shared

90
00:06:57.240 --> 00:06:58.440
or desired audio.

91
00:06:58.800 --> 00:07:05.730
So you may want to change that whenever you are running a script which is dealing with Google Container

92
00:07:05.730 --> 00:07:06.330
Registry.

93
00:07:07.350 --> 00:07:13.380
So the first group that is going to deal with that is pushing this script.

94
00:07:13.590 --> 00:07:19.260
For that, we will go to whom there our project who directly and there we have Google in this.

95
00:07:19.770 --> 00:07:24.870
So we will go into Google and it is directly here we have this GCP push.

96
00:07:24.880 --> 00:07:27.460
You may just start as its file.

97
00:07:27.460 --> 00:07:28.650
Let's just open this.

98
00:07:33.190 --> 00:07:39.160
So this assumes that if you do not provide the revision I.D. version of the Docker images, then it

99
00:07:39.160 --> 00:07:46.150
will assume you test and if you do not provide a registry host environment variable, it will assume

100
00:07:46.570 --> 00:07:48.460
is shared or GCR or to you.

101
00:07:48.970 --> 00:07:51.820
If you do not want that, then you can edit that script.

102
00:07:51.820 --> 00:08:00.040
So let's say you want this the excess yield or decoder to you, then you can come in this first line

103
00:08:00.490 --> 00:08:08.230
and set it to EU or or tell you so let's say if you are in US vision, then you can change this to us

104
00:08:08.260 --> 00:08:16.030
or decoder to you because I'm in Asia region, so I'm going to use a shared GCR order.

105
00:08:17.140 --> 00:08:17.470
OK.

106
00:08:18.250 --> 00:08:19.360
So we are going to use that.

107
00:08:21.190 --> 00:08:26.470
So all the images that start with A.W., it will pick up all those images.

108
00:08:26.470 --> 00:08:29.110
It will tag them and then it will push the images.

109
00:08:29.110 --> 00:08:30.040
So let's run this.

110
00:08:34.620 --> 00:08:42.090
So it has stacked this anti WSB image with a shadow decoder deal, and then the project name and D.W.

111
00:08:42.090 --> 00:08:50.510
minutes is next and then the image name and WSB it and then it is uploaded to Google Container Registry.

112
00:08:50.520 --> 00:08:56.160
So now if we go to Google Container Registry, let me refresh this.

113
00:08:58.430 --> 00:09:05.480
So I see that there is indeed a blue directly created over here and there is a image.

114
00:09:06.520 --> 00:09:10.540
That is uploaded to this Docker image that is uploaded over here.

115
00:09:10.950 --> 00:09:12.880
So let's go to A.W. directly.

116
00:09:13.960 --> 00:09:19.510
And slowly, we will see that all of the remaining images will get uploaded.

117
00:09:20.770 --> 00:09:21.910
Let me close this down.

118
00:09:24.090 --> 00:09:28.230
So now this is trying to upload services.

119
00:09:29.510 --> 00:09:32.600
Looks like it is already uploaded, and all it is doing will be Web.

120
00:09:32.870 --> 00:09:37.110
So let's just go to the A.W. directly.

121
00:09:37.110 --> 00:09:38.390
Let's just differentiate.

122
00:09:39.940 --> 00:09:48.130
So it was uploaded this service services Docker image, so that is there, so one by one, it will upload

123
00:09:48.130 --> 00:09:48.610
everything.

124
00:09:49.060 --> 00:09:58.780
So this is the way we are going to upload all the images on our machine very machine to Google Container

125
00:09:58.780 --> 00:09:59.350
Registry.

126
00:10:00.160 --> 00:10:02.290
So once so I'm going to close this session now.

127
00:10:02.740 --> 00:10:08.200
Once all the images are uploaded, I'll come back and then we will create Kubernetes cluster.
