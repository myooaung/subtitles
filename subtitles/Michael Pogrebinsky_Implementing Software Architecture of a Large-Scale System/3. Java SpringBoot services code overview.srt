1
00:00:00,930 --> 00:00:07,080
Now we will quickly take a look at the structure of our services called for that I will burn the code

2
00:00:07,620 --> 00:00:11,920
repository in our code repository ministries.

3
00:00:11,940 --> 00:00:16,050
Next, we will have to go to services directly.

4
00:00:16,080 --> 00:00:17,880
This is where all our services are.

5
00:00:18,300 --> 00:00:25,650
So admin authorisation discovery, gateway inventory order product, these are different services.

6
00:00:26,280 --> 00:00:29,910
So let's open this code base in intelligencia.

7
00:00:31,210 --> 00:00:35,740
So here, let's take a quick look at the structure of our code base.

8
00:00:36,130 --> 00:00:43,210
So let's say if we go into any service, but before that, let me tell you that this is MAVEN project.

9
00:00:43,780 --> 00:00:51,460
So this is the top level bomb nerd exemplified, which is supposed to be the individual projects that

10
00:00:51,460 --> 00:00:51,820
are there.

11
00:00:51,830 --> 00:00:55,510
So under this, we have sub project selected product as one service.

12
00:00:56,320 --> 00:01:00,590
So we have this product also as a maven project.

13
00:01:02,500 --> 00:01:07,210
So that's about how to build this and how to assemble this.

14
00:01:07,210 --> 00:01:15,250
So this is all a maven project now going into a little more details about how the internal code is structured

15
00:01:15,250 --> 00:01:24,850
for each service so we can go into Java directly here and here you'll see various directories.

16
00:01:24,850 --> 00:01:28,930
So this service directly is where the frontend gold is.

17
00:01:29,320 --> 00:01:37,740
Meaning the it's the entry point for all our APIs, so product services where all our APIs are implemented.

18
00:01:37,750 --> 00:01:41,080
So let's say this is an API for getting product.

19
00:01:41,860 --> 00:01:44,830
This is an API for create product.

20
00:01:45,220 --> 00:01:48,800
So like that, we have these restful APIs over here.

21
00:01:49,420 --> 00:01:51,370
Then there is product service agent.

22
00:01:51,400 --> 00:01:54,310
This is an API for health.

23
00:01:54,310 --> 00:01:58,020
Check whether our product services are alive or not.

24
00:01:58,030 --> 00:02:02,320
So you will see this kind of patent implemented everywhere else.

25
00:02:02,330 --> 00:02:08,620
Also, then the actual implementation of a service is dead in product service implementation.

26
00:02:09,130 --> 00:02:14,920
So here we have decoupled this implementation from this restful interface.

27
00:02:15,850 --> 00:02:19,000
So here there is no rest logic over here.

28
00:02:19,570 --> 00:02:21,340
It's only pure business logic.

29
00:02:21,340 --> 00:02:26,530
So the implementation is dead end and bill is fair.

30
00:02:26,530 --> 00:02:31,590
Also, all entities are defined in entity directly.

31
00:02:31,600 --> 00:02:34,600
Here we have only one entity, so.

32
00:02:37,420 --> 00:02:43,900
It's a simple entity that we have defined then only core that is related to data exists that is dead

33
00:02:43,920 --> 00:02:44,680
in the water.

34
00:02:44,980 --> 00:02:53,950
In India, you will find two implementations implemented, one for Cassandra, one for Eskom, and we

35
00:02:53,950 --> 00:03:02,200
can choose either Cassandra Database or Eskom database by configuring it in conflict.

36
00:03:02,230 --> 00:03:08,710
Our Properties File, which is located in resources directly to this conflict or properties file, is

37
00:03:08,710 --> 00:03:09,040
bid.

38
00:03:09,430 --> 00:03:11,080
All the configuration is there.

39
00:03:11,080 --> 00:03:18,010
So be it related to PredPol, be it related to database configuration, discovery service configuration.

40
00:03:18,010 --> 00:03:21,370
All configurations are there in conflict or properties.

41
00:03:22,090 --> 00:03:26,350
One important thing to note over here is the way this code is designed.

42
00:03:26,770 --> 00:03:29,950
This is just a template conflict or properties.

43
00:03:30,580 --> 00:03:35,530
The real source of this configuration will be environment variables.

44
00:03:36,100 --> 00:03:42,490
If we have not defined any environment variable, then only our code is going to pick up the configuration

45
00:03:42,490 --> 00:03:44,080
from configured properties.

46
00:03:44,980 --> 00:03:51,340
But our main source of configuration will be environment variables, and we will see that why we have

47
00:03:51,340 --> 00:03:52,330
made that choice.

48
00:03:53,680 --> 00:03:57,310
So this is how all of the services are also structured.

49
00:03:57,640 --> 00:04:01,030
So this is briefly how our code is.

50
00:04:01,120 --> 00:04:06,910
We can use MAVEN to compile and build this entire code base.
