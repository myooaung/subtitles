WEBVTT
1
00:00:01.550 --> 00:00:06.980
So at a conceptual level, this is how architecture will look like our tracing architecture.

2
00:00:07.610 --> 00:00:12.770
The first thing that we'll have to do is we'll have to instrument the core of each and every component

3
00:00:13.160 --> 00:00:19.100
for which we need this, which means that we'll have to modify.

4
00:00:19.100 --> 00:00:24.620
The code will have to introduce client libraries, which will instrument decode and which will record

5
00:00:24.620 --> 00:00:26.060
the tracing information.

6
00:00:26.570 --> 00:00:35.210
And this instrument record will send this trace information to a component, a centralized component

7
00:00:35.690 --> 00:00:42.590
where all this trace will be collected and connected to create a meaningful trace information, which

8
00:00:42.590 --> 00:00:49.760
gives us distributed request tracing, which addresses our distributed request tracing requirement.

9
00:00:49.940 --> 00:00:54.320
Where we want to see a holistic trace of an API across the system.

10
00:00:54.650 --> 00:00:59.690
So this is what is going to happen in this particular component and is something that we should be able

11
00:00:59.690 --> 00:01:01.640
to see to the UI.

12
00:01:02.000 --> 00:01:05.750
So this has conceptual representation of the architecture that we need.

13
00:01:06.230 --> 00:01:13.400
Now we will discuss some products that will actually help us in building or implementing this architecture.

14
00:01:15.230 --> 00:01:22.010
To implement distributed tracing, we have two popular choices one is Zipkin, and the other one is

15
00:01:22.250 --> 00:01:22.840
Yego.

16
00:01:24.080 --> 00:01:27.470
Both of them conform to open tracing standards.

17
00:01:28.040 --> 00:01:33.410
We need this conformance because here we are going to modify the code of our system.

18
00:01:33.860 --> 00:01:38.540
And tomorrow, let's say we want to change the product on which we are relying for tracing.

19
00:01:39.050 --> 00:01:45.230
Then there should be some standard which multiple products follow, or at least the popular products

20
00:01:45.230 --> 00:01:45.680
follow.

21
00:01:46.250 --> 00:01:50.930
And we can choose among those products as one of our testing products.

22
00:01:50.930 --> 00:01:56.300
So that's the reason it is important that they should conform to some standards and open tracing is

23
00:01:56.300 --> 00:01:57.170
that standard.

24
00:01:57.980 --> 00:02:03.380
So what Yegor ends up can conform to those standards so we can choose any one of them.

25
00:02:03.980 --> 00:02:10.640
The reason we are going to go ahead with yogurt is it's more recent than Zipkin.

26
00:02:10.640 --> 00:02:17.360
So it has adopted more than two new architecture, new cloud architectures, and it has become more

27
00:02:17.360 --> 00:02:18.410
popular than Zipkin.

28
00:02:19.070 --> 00:02:23.440
And personally, I first tried Zipkin, which was actually which came from Twitter.

29
00:02:23.450 --> 00:02:26.480
Project Yeager came from Hilbre project.

30
00:02:26.900 --> 00:02:33.350
So I tried Zipkin, and after that, when I tried yogurt, I found it to be much more useful in terms

31
00:02:33.350 --> 00:02:35.960
of the capabilities it could show on the UI.

32
00:02:36.350 --> 00:02:43.280
Of course, architecturally it will be superior than Zipkin as it came later on and had architectural

33
00:02:43.280 --> 00:02:44.540
improvements over Zipkin.

34
00:02:44.960 --> 00:02:52.370
But even the representation wise, the information it provides that is provided on Yegor Way is much

35
00:02:52.370 --> 00:02:53.330
superior to them.

36
00:02:54.230 --> 00:03:00.530
They primarily do the same thing, but yogurt has marginal difference, and it has become much more

37
00:03:00.530 --> 00:03:03.500
popular than Zipkin, so we will go ahead with the yogurt.
