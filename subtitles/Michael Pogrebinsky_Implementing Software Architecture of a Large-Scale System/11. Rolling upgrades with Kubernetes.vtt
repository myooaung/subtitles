WEBVTT
1
00:00:02.560 --> 00:00:08.800
Now in this session, we will look at ruling out great, so if there is a defect in our application,

2
00:00:08.800 --> 00:00:15.370
which will often happen in real systems, so we'll have to upgrade our system during the production

3
00:00:15.370 --> 00:00:15.730
itself.

4
00:00:16.270 --> 00:00:18.070
So how do we handle that?

5
00:00:18.080 --> 00:00:21.250
And that is what we are going to see this as part of rolling upgrades.

6
00:00:22.300 --> 00:00:23.550
So let's go to our system.

7
00:00:25.610 --> 00:00:28.750
Okay, so here, let me refresh this.

8
00:00:30.840 --> 00:00:37.140
So we have about two gateway service parts and three authorizations of imports.

9
00:00:37.740 --> 00:00:40.650
And this is something that we got because of scaling.

10
00:00:40.650 --> 00:00:43.860
I ran some tests a few minutes back.

11
00:00:44.220 --> 00:00:49.260
So we will see at the end of this demonstration, although we'll be doing rolling upgrades demonstration.

12
00:00:49.620 --> 00:00:55.620
By the end of that demonstration, we will check if the number of authorization service boards and get

13
00:00:55.620 --> 00:01:03.510
reservist parts if they come down to one, because that is what we have said, that as their minimum

14
00:01:03.510 --> 00:01:03.870
value.

15
00:01:03.870 --> 00:01:08.970
And right now we are not running any law test, so these parts should scale down.

16
00:01:09.870 --> 00:01:10.260
OK.

17
00:01:10.560 --> 00:01:20.460
Going back to mean demonstration that we want to do right now, we want to find a defect in our system

18
00:01:20.460 --> 00:01:25.490
and we want to fix it and see how we can upgrade our system while it is in production.

19
00:01:25.500 --> 00:01:28.590
So for that, we will choose single page application.

20
00:01:29.400 --> 00:01:31.080
Let's connect to this application.

21
00:01:31.950 --> 00:01:37.620
And in this application, I have deliberately left a bug, which we will see right now.

22
00:01:39.250 --> 00:01:44.140
So let me just sign it to now if I try to sign in.

23
00:01:47.760 --> 00:01:56.910
Look at this particular unit, it is trying to connect to authorization service on local levels, and

24
00:01:56.910 --> 00:01:59.070
that is why this log is failing.

25
00:02:00.630 --> 00:02:08.090
So the fix to this particular problem will be that we go to our code base and there we actually set

26
00:02:08.700 --> 00:02:12.060
the IP address or Flight Gateway Service.

27
00:02:12.720 --> 00:02:14.810
Now there are two reasons why I haven't.

28
00:02:14.850 --> 00:02:16.080
I have left it like this.

29
00:02:16.500 --> 00:02:22.620
One reason is that if there is a bug, then we can do this demonstration on ruling about it.

30
00:02:22.620 --> 00:02:23.580
So that was one reason.

31
00:02:24.100 --> 00:02:30.030
The reason was this that this single page application runs on time machine.

32
00:02:30.630 --> 00:02:37.800
And upfront, we do not know what is the IP address of the backend that we have created.

33
00:02:37.800 --> 00:02:43.410
So only once this backend gets created and an IP address is allocated.

34
00:02:43.410 --> 00:02:47.580
So let's say this spear app has to connect to gateway service.

35
00:02:48.150 --> 00:02:50.700
So we have created an external load balancer for that.

36
00:02:51.630 --> 00:03:00.870
So now this IP address was dynamically allocated, so we had no way of updating our app before actually

37
00:03:01.050 --> 00:03:02.520
creating this load balancer.

38
00:03:02.970 --> 00:03:10.380
So the way we deal with this in production is that instead of using IP addresses, we use DNS names.

39
00:03:10.380 --> 00:03:14.100
But here we do not have any DNS names, so we have to use IP address.

40
00:03:14.610 --> 00:03:19.200
So we got this IP address only after creating this external load balancing.

41
00:03:19.800 --> 00:03:24.110
So what we are going to do is we're going to copy this IP address.

42
00:03:24.120 --> 00:03:25.350
Let's just take this.

43
00:03:27.500 --> 00:03:34.450
And does the IP address of our gateway service, if we bring this, we can even see that it is bringing

44
00:03:34.460 --> 00:03:37.210
out it is getting a response from our great resource.

45
00:03:37.630 --> 00:03:44.890
So this is the IP that we are going to copy and we are going to use in our single page application.

46
00:03:45.790 --> 00:03:46.750
So let's close this.

47
00:03:47.020 --> 00:03:51.550
Let's even lose this and then go to our code base

48
00:03:54.310 --> 00:03:59.170
and we're going to code base of our single page application that I'm going to edit of configuration

49
00:03:59.170 --> 00:03:59.530
file.

50
00:04:04.600 --> 00:04:07.120
And this is where we need to do this.

51
00:04:08.140 --> 00:04:14.410
Editing the entire IP address court configured.

52
00:04:14.410 --> 00:04:23.470
OK, let me just fix it over here itself so that we remove this and then copy this.

53
00:04:23.470 --> 00:04:26.080
I mean, OK, let's copy this.

54
00:04:46.370 --> 00:04:47.840
Similarly, I'll the report.

55
00:04:57.150 --> 00:04:58.860
Let me just verify this once again.

56
00:05:00.120 --> 00:05:01.350
Hopefully, this is all good.

57
00:05:02.540 --> 00:05:04.710
Look, we need to remove this line.

58
00:05:06.090 --> 00:05:07.170
So this looks all good.

59
00:05:07.800 --> 00:05:13.800
So let's save this fight and do a bit of single page application alone.

60
00:05:16.410 --> 00:05:22.080
Once this bill is done, then we will do staging of death certificate defect, and then we will create

61
00:05:22.080 --> 00:05:28.740
the image of a single page application and then we will push this image to Google Container Registry.

62
00:05:34.650 --> 00:05:36.510
So let's stage this.

63
00:05:39.840 --> 00:05:45.660
And then let's just build the image before I push the image, I'll create more instances of a single

64
00:05:45.660 --> 00:05:51.030
page application to build system and then images.

65
00:05:52.350 --> 00:05:59.550
And we have the single page application, so they say I'm trying to save time to build by building just

66
00:05:59.560 --> 00:06:00.870
single page application image.

67
00:06:01.830 --> 00:06:07.410
In case you have to build images, if you're building something, you're going just to build system

68
00:06:07.410 --> 00:06:11.070
dataset and it will take care of building pretty much everything.

69
00:06:11.070 --> 00:06:14.190
It will take a little more time, but it will build everything.

70
00:06:14.190 --> 00:06:22.470
So before I push images to Google Container Registry, let me increase the number of instances.

71
00:06:39.070 --> 00:06:43.000
So it says spare parts not found, let me just verify the new.

72
00:06:50.840 --> 00:06:54.200
We need to get the deployment name, actually, so that's my mistake.

73
00:06:57.080 --> 00:07:00.020
OK, so the name is SBA AirPods.

74
00:07:00.830 --> 00:07:06.000
So let's use that command for scaling SBA app boards.

75
00:07:06.350 --> 00:07:07.790
Now let's see this, OK?

76
00:07:08.330 --> 00:07:09.890
So this should scale out.

77
00:07:12.110 --> 00:07:13.680
Single page application workload.

78
00:07:15.320 --> 00:07:17.570
If I go down, I can see this.

79
00:07:17.600 --> 00:07:19.580
This is getting scale target is three.

80
00:07:24.460 --> 00:07:31.660
So if you look at this single page application, there will be three instances over here and they are

81
00:07:31.660 --> 00:07:32.380
all running.

82
00:07:33.480 --> 00:07:36.120
All division right now, division is one.

83
00:07:36.730 --> 00:07:42.780
So they are running and all of and this is what we want to upgrade in a ruling vision, so no single

84
00:07:42.780 --> 00:07:43.530
page application.

85
00:07:43.710 --> 00:07:45.560
So it is running.

86
00:07:46.560 --> 00:07:48.510
We are ready to upgrade this.

87
00:07:48.990 --> 00:07:50.580
So let's go ahead and do that.

88
00:07:50.970 --> 00:07:55.230
Well, that first, let's push the image that we have generated.

89
00:07:55.500 --> 00:07:59.340
So let's see the darker images if we go up.

90
00:08:01.930 --> 00:08:08.890
This single page application of its court generated two minutes of work, so let's push this.

91
00:08:13.230 --> 00:08:17.590
Which is the name of the script to keep pushing me this.

92
00:08:20.580 --> 00:08:24.390
So the first one, it is pushing a single page application, and it has pushed it.

93
00:08:27.020 --> 00:08:29.930
We can even check this in Google container registry.

94
00:08:32.790 --> 00:08:37.610
Hmm, hmm, hmm, hmm, hmm, hmm, hmm, hmm.

95
00:08:38.940 --> 00:08:40.710
So the latest has been pushed.

96
00:08:42.030 --> 00:08:49.290
Just now it's it's created three minutes, a woman and just not a good brush, so we have the latest

97
00:08:50.310 --> 00:08:53.130
container image over there in Google Container Registry.

98
00:08:53.800 --> 00:08:55.470
Let's go back to when it is engine.

99
00:08:58.630 --> 00:09:03.820
Let's go to the workloads and spare parts.

100
00:09:04.060 --> 00:09:05.680
That is what we are interested in.

101
00:09:06.950 --> 00:09:10.840
So these ports, we want to refresh them because they are not working for us.

102
00:09:14.570 --> 00:09:21.710
But before we can issue the command for ruling of Iraq, let me get the deployment me for which we need

103
00:09:21.710 --> 00:09:25.820
to do the ruling agreed.

104
00:09:30.090 --> 00:09:33.240
We need to do rolling update for SBA airports.

105
00:09:34.050 --> 00:09:35.970
So let's use that.

106
00:09:49.100 --> 00:09:49.280
OK.

107
00:09:49.840 --> 00:09:51.640
I think the command is in place.

108
00:09:52.210 --> 00:09:53.020
Let's run this.

109
00:09:54.760 --> 00:09:57.510
OK, so this short restart, our.

110
00:09:58.730 --> 00:09:59.510
Ruling agreed.

111
00:09:59.810 --> 00:10:01.990
Let's see what's happening over here.

112
00:10:05.740 --> 00:10:13.310
So it has added a new application instance bought over here, and the remaining three are running,

113
00:10:13.310 --> 00:10:17.360
so one by one, it will remove the old ones and will add the new one.

114
00:10:18.020 --> 00:10:25.450
So if you see this, this revision one is dominating and there is already one instance, one part of

115
00:10:25.460 --> 00:10:30.440
revision to running and the one with revision to contain it is getting created.

116
00:10:30.440 --> 00:10:31.460
Let's refresh this.

117
00:10:36.510 --> 00:10:41.760
Now there are right now to with the revision to I think we'll have to wait, let's refresh.

118
00:10:46.300 --> 00:10:52.030
OK, now we have three parts of Division two and two parts of Division one.

119
00:10:53.190 --> 00:10:55.110
There is in two parts still coming up.

120
00:10:56.750 --> 00:11:02.870
So this way, it will not remove all of the old parts in one shot.

121
00:11:03.320 --> 00:11:08.480
What it will do is one by one, it will replace instances with new instance.

122
00:11:08.480 --> 00:11:13.970
And if you see this, the total number of instances at any given point in time is running.

123
00:11:14.420 --> 00:11:16.250
They were maintained as three.

124
00:11:17.680 --> 00:11:24.040
So that is what ruling upgrade is, and that is what we generally need to do in production that our

125
00:11:24.580 --> 00:11:26.680
overall capacity should not go down.

126
00:11:27.130 --> 00:11:34.600
One thing we need to remember over here is that when we do rolling upgrade of our application, any

127
00:11:34.600 --> 00:11:39.070
component there can be two versions simultaneously present.

128
00:11:39.070 --> 00:11:45.910
So when we are architecting or writing our application, we need to remember that it is possible that

129
00:11:45.910 --> 00:11:51.970
at any given time, multiple versions of our application may be running, and in this case, there can

130
00:11:51.970 --> 00:11:56.170
be at least two versions of application component will be running.

131
00:11:56.830 --> 00:12:03.520
So our single page application is a great time to check whether it can solve that problem or not.

132
00:12:05.900 --> 00:12:13.490
For that, we will go to we have to be in services where we will get the IP address for our single page

133
00:12:13.490 --> 00:12:14.120
application.

134
00:12:15.270 --> 00:12:16.340
So let's connect to that.

135
00:12:16.940 --> 00:12:18.230
Now let's try to sign in.

136
00:12:23.420 --> 00:12:25.470
It says incorrect credentials.

137
00:12:26.030 --> 00:12:30.020
So at least it is connecting to the right you ordered.

138
00:12:30.140 --> 00:12:34.370
Let me try to put the admin password.

139
00:12:36.400 --> 00:12:39.040
And now it says the credentials are correct.

140
00:12:40.110 --> 00:12:43.200
We were able to log in, let's see if we can see products.

141
00:12:43.950 --> 00:12:50.610
OK, so we can see products, and probably we should be able to add something to cart as well if I go

142
00:12:50.610 --> 00:12:51.240
to cart.

143
00:12:51.750 --> 00:12:52.860
This is there in the cart.

144
00:12:53.520 --> 00:12:57.810
So that's the functionality of our web application and we are able to.

145
00:13:00.950 --> 00:13:06.800
Connect to our Web application, and this is how the interface should be for a mobile.

146
00:13:08.150 --> 00:13:08.540
OK.

147
00:13:08.660 --> 00:13:12.210
So are there that single page application?

148
00:13:12.470 --> 00:13:19.220
We were able to fix the issue within a single page application I lire earlier it was connecting to local

149
00:13:19.220 --> 00:13:19.610
host.

150
00:13:20.210 --> 00:13:25.880
It is connecting to this gateway service IP address.

151
00:13:28.780 --> 00:13:35.020
And Best Fear demonstrated that ruling upgrades are working absolutely fine in that system.
