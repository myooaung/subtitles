1
00:00:02,090 --> 00:00:07,870
So now let's go ahead and run the Cassandra cluster, let's run Cassandra cluster first.

2
00:00:08,600 --> 00:00:15,380
It will take some time for Cassandra Atlas to come up, so let's launch this first.

3
00:00:16,340 --> 00:00:22,510
So it's going to pull the Cassandra image from Docker registry, and then it will create a Cassandra

4
00:00:22,510 --> 00:00:22,880
image.

5
00:00:23,900 --> 00:00:25,490
So we will wait for that.

6
00:00:27,150 --> 00:00:33,690
Once this is done, then this will launch only three nodes which are going to form our Cassandra cluster.

7
00:00:34,650 --> 00:00:38,790
So once this image is created, then we will see the log files for.

8
00:00:40,400 --> 00:00:42,500
These Cassandra containers, they will come up.

9
00:00:45,080 --> 00:00:46,280
Let's wait for it.

10
00:00:52,510 --> 00:00:52,800
OK.

11
00:00:52,990 --> 00:00:53,560
It's done.

12
00:00:54,970 --> 00:00:57,490
Cassandra Containers are also launched.

13
00:00:57,760 --> 00:00:58,870
So let's just check

14
00:01:02,770 --> 00:01:03,610
Cassandra one.

15
00:01:03,670 --> 00:01:08,290
This is our signal, and this is where we are also going to create schema.

16
00:01:08,920 --> 00:01:09,820
So let's look at this.

17
00:01:10,420 --> 00:01:17,500
So if you see this here, a background process has been launched our script, which is trying to connect

18
00:01:17,500 --> 00:01:24,880
to Cassandra one instance, but because it is not up yet, so it is not able to connect it and it is

19
00:01:24,900 --> 00:01:27,190
retrying after every five seconds.

20
00:01:27,970 --> 00:01:36,730
So once this Cassandra one instance server is able to do all its bootstrapping and its it comes up,

21
00:01:37,060 --> 00:01:40,360
then this script will execute this script.

22
00:01:41,770 --> 00:01:45,040
It hasn't executed yet, so we're still waiting for it.

23
00:01:46,340 --> 00:01:47,810
This hour is still coming up.

24
00:01:48,740 --> 00:01:54,950
We are seeing these log messages, OK, so we have got this message schema created.

25
00:01:55,220 --> 00:01:56,720
This has come out of our group.

26
00:01:57,290 --> 00:02:04,550
So our Cassandra, for instance, one Cassandra, one is up and it has created this schema.

27
00:02:06,290 --> 00:02:12,170
Now let's see the log files for, let's say, Cassandra EC2 instance.

28
00:02:12,530 --> 00:02:19,310
So Cassandra, two instances not where we have executed any script, but this instance also has come

29
00:02:19,310 --> 00:02:22,010
up and it says joining.

30
00:02:22,010 --> 00:02:25,190
So I think it would have joined the Cassandra team.

31
00:02:27,230 --> 00:02:27,740
It will.

32
00:02:28,490 --> 00:02:34,490
There may be a few exceptions here and there, but we will not worry about them till we do not see any

33
00:02:34,490 --> 00:02:36,710
problems, so they try to communicate with each other.

34
00:02:36,710 --> 00:02:42,710
And during these start up, we may see a few exceptions here and there related to connection.

35
00:02:42,710 --> 00:02:49,430
So that should be fine unless we see that they are not able to talk to each other and we will see that

36
00:02:50,180 --> 00:02:51,470
they will talk to each other.

37
00:02:52,640 --> 00:02:54,680
So let's look at dialogue for Cassandra.

38
00:02:54,680 --> 00:02:55,010
Three.

39
00:02:55,670 --> 00:02:58,160
It seems Cassandra three is not up.

40
00:03:00,640 --> 00:03:02,210
Not sure, I still need to figure it out.

41
00:03:02,320 --> 00:03:05,740
Looks like Cassandra, three instances, not up.

42
00:03:05,740 --> 00:03:11,710
So if I look at what processes are up, I think Cassandra three has exited.

43
00:03:11,710 --> 00:03:15,130
So maybe did not see the seed, not by the time it came up.

44
00:03:15,340 --> 00:03:16,660
Looks like it came up first.

45
00:03:17,200 --> 00:03:18,880
So I'm going to restart this.

46
00:03:23,940 --> 00:03:27,020
Now, let's check the log for Cassandra three.

47
00:03:30,730 --> 00:03:40,180
So I think this is also up and probably has joined the ring, so no, no, that it is waiting for gossip

48
00:03:40,210 --> 00:03:40,750
to settle.

49
00:03:41,590 --> 00:03:45,940
So I think in just a bit it will join the cluster ring.

50
00:03:48,400 --> 00:03:50,490
OK, so now it is joining the cluster.

51
00:03:50,660 --> 00:03:52,690
So this should be just fine.

52
00:03:53,350 --> 00:03:59,590
Now we have all these three instances that are running up now.

53
00:03:59,610 --> 00:04:05,800
If you connect to any of those incidents, then we should be able to see that schema is created in all

54
00:04:05,800 --> 00:04:06,700
of the instances.

55
00:04:07,030 --> 00:04:12,400
Although we have created schema in only Cassandra one instance, so we will check that out.

56
00:04:12,400 --> 00:04:18,130
Before we do that, let's just launch our systems of remaining nodes that are there, that let's just

57
00:04:18,760 --> 00:04:19,450
launch them.

58
00:04:21,300 --> 00:04:24,990
And once containers are created, we will let these system come up.

59
00:04:25,530 --> 00:04:29,640
And in the meantime, we will look at the Cassandra cluster containers.

60
00:04:30,180 --> 00:04:33,670
OK, so this is coming up.

61
00:04:35,400 --> 00:04:36,870
We will let it run.

62
00:04:37,770 --> 00:04:43,680
In the meantime, let's look at if there is schema definition created in all of these nodes.

63
00:04:44,010 --> 00:04:49,170
OK, so let's first connect to Docker exec minus 80.

64
00:04:49,170 --> 00:04:55,390
So this command we will use to connect to Cassandra one batch.

65
00:04:55,550 --> 00:04:59,040
Let me just copy this command to execute at the top.

66
00:04:59,940 --> 00:05:01,890
Not sure if it has visibility, but.

67
00:05:05,280 --> 00:05:10,080
With this one copy pasting it here, don't get it.

68
00:05:11,470 --> 00:05:15,960
We have time to connect to Cassandra one, and we will investigate all of this, so we are connected

69
00:05:15,960 --> 00:05:17,580
to Cassandra one instance.

70
00:05:19,320 --> 00:05:26,530
And now let's use secure asset utility present on Cassandra one instance.

71
00:05:26,550 --> 00:05:31,860
So this is the Cassandra clan, which is their own Cassandra, one container itself, which we will

72
00:05:31,860 --> 00:05:37,050
use to connect to Cassandra process so you can use secure Lesage.

73
00:05:38,010 --> 00:05:43,800
And this has connected to Cassandra solo process on Cassandra, one instance.

74
00:05:44,460 --> 00:05:47,390
So here are schema is Williams.

75
00:05:47,910 --> 00:05:53,190
So we will use user base command to connect to that schema.

76
00:05:53,190 --> 00:05:54,660
So we're connected to that schema.

77
00:05:55,080 --> 00:05:57,480
We can see what our tables are there.

78
00:05:58,740 --> 00:06:03,330
So these are the tables which are present on Cassandra one instance.

79
00:06:03,810 --> 00:06:06,450
So they got created because we launched a script.

80
00:06:06,840 --> 00:06:13,410
If you want to see data and lets a user out because there will be one report over the admin report so

81
00:06:13,410 --> 00:06:19,170
that we can log in initially select star from the user.

82
00:06:20,160 --> 00:06:20,600
What?

83
00:06:21,420 --> 00:06:25,080
So this is very much like sequel user.

84
00:06:25,080 --> 00:06:26,160
I think I did it.

85
00:06:26,160 --> 00:06:27,150
A spelling mistake.

86
00:06:28,350 --> 00:06:28,670
OK.

87
00:06:29,490 --> 00:06:31,650
So there is right now one group over there.

88
00:06:32,250 --> 00:06:36,900
There is a midnight email ID and password, and it has.

89
00:06:37,260 --> 00:06:44,490
So this is one interesting thing over here that here we can specify a column as a set or, for that

90
00:06:44,490 --> 00:06:47,880
matter, any other collection like hash map or list.

91
00:06:48,570 --> 00:06:55,980
So this is something we have taken advantage of that so otherwise in in IBM's schema, we'll have to

92
00:06:55,980 --> 00:06:58,500
normalize this and create them as different tools.

93
00:06:58,500 --> 00:07:01,500
But over here we can create this has a sect.

94
00:07:02,010 --> 00:07:03,690
So this is a useful feature.

95
00:07:03,690 --> 00:07:09,870
We can take advantage of that over here because anyway, here our goal is not to normalize these schema.

96
00:07:10,860 --> 00:07:15,270
OK, so looks like the schema is created.

97
00:07:15,270 --> 00:07:19,230
If we want to see if there is anything in product, we can take that.

98
00:07:19,560 --> 00:07:21,330
Certainly schema is there right now.

99
00:07:21,570 --> 00:07:24,270
There is no data that's come out of this.

100
00:07:24,840 --> 00:07:29,040
Let's see if the same thing got created on Cassandra two.

101
00:07:29,730 --> 00:07:36,420
So we will use secure assets this time, but we will ask it to connect to other instance.

102
00:07:36,420 --> 00:07:37,980
Cassandra, to instance.

103
00:07:39,060 --> 00:07:39,420
OK.

104
00:07:39,690 --> 00:07:44,520
So this one is now connected to Cassandra to node.

105
00:07:45,660 --> 00:07:56,760
So let's use where MSI's came over here, and let's see if there is daytimes at our table.

106
00:07:57,000 --> 00:07:57,750
Yes, there is.

107
00:07:58,110 --> 00:08:04,260
And if we're to see tables over here, then we have same set of tables over here as well.

108
00:08:04,980 --> 00:08:08,460
So let's exit out of this schema has got created over here also.

109
00:08:08,460 --> 00:08:12,270
So let's get to to secure Lesage Cassandra Tree.

110
00:08:13,570 --> 00:08:14,430
We are connected.

111
00:08:17,250 --> 00:08:19,110
Now let's check what our tables are.

112
00:08:19,110 --> 00:08:19,350
They're

113
00:08:22,560 --> 00:08:23,670
all tables are there.

114
00:08:23,730 --> 00:08:27,150
Now, let's check the time table.

115
00:08:27,150 --> 00:08:36,090
So in product, there is no data right now in the user that should be data.

116
00:08:36,420 --> 00:08:38,520
OK, so one data.

117
00:08:38,790 --> 00:08:42,090
So we created schema only in Cassandra one instance.

118
00:08:42,510 --> 00:08:49,880
And that data propagated that not only data, but the schema itself got propagated to all the enought.

119
00:08:49,890 --> 00:08:51,930
So let's come out of this Cassandra one node.

120
00:08:53,220 --> 00:08:55,140
OK, so we're back to our workstation.

121
00:08:55,590 --> 00:08:58,740
Let's check what our processes are there right now.

122
00:08:59,520 --> 00:09:03,990
If they are running this service has it has exited, PostgreSQL has exited.

123
00:09:03,990 --> 00:09:05,490
We have an even order using it.

124
00:09:06,450 --> 00:09:08,850
So we haven't launched that actually.

125
00:09:09,750 --> 00:09:13,620
Now let's see where our system is right now.

126
00:09:13,620 --> 00:09:21,360
We can, in fact, directly try to connect by by this time, maybe it would have come up to copy the

127
00:09:21,360 --> 00:09:22,470
IP address over here.

128
00:09:23,880 --> 00:09:25,880
The replication would have definitely come up.

129
00:09:25,950 --> 00:09:30,120
So let's go to monitoring to see if other services are up.

130
00:09:32,290 --> 00:09:34,330
Looks like all services are up.

131
00:09:34,660 --> 00:09:36,430
Let's check our databases.

132
00:09:38,320 --> 00:09:41,110
So database connection is also working fine.

133
00:09:41,680 --> 00:09:42,610
So that's all good.

134
00:09:43,180 --> 00:09:47,800
If you want to check if the database is up through Prometheus, we can do that.

135
00:09:48,490 --> 00:09:49,540
You can go to.

136
00:09:50,540 --> 00:09:52,730
Targets and see if.

137
00:09:55,050 --> 00:10:00,990
Database metrics, Whatisit user database, Cassandra run Cassandra to this under a tree.

138
00:10:01,380 --> 00:10:06,960
All of them are up apart from all of these other instances that we are tracking.

139
00:10:07,620 --> 00:10:09,470
OK, so that's good.

140
00:10:09,480 --> 00:10:12,510
That's one failure unrelated over here.

141
00:10:12,520 --> 00:10:14,550
So that's related to Prometheus.

142
00:10:15,150 --> 00:10:20,300
So it looks like Prometheus is not able to work for Eureka.

143
00:10:20,310 --> 00:10:24,410
So our discovery so this we are not able to get Prometheus Matrix from.

144
00:10:24,420 --> 00:10:25,350
So that's OK.

145
00:10:25,540 --> 00:10:28,140
And that doesn't stop us from this.

146
00:10:28,170 --> 00:10:30,930
I'll see if I can fix this net error.

147
00:10:31,530 --> 00:10:37,210
But for other services, we are getting actually matrix.

148
00:10:37,230 --> 00:10:40,410
So that's more important than that's happening right now.

149
00:10:40,860 --> 00:10:44,550
OK, so our database is up, our system is up.

150
00:10:45,180 --> 00:10:47,610
If you look at the data right now.

151
00:10:48,720 --> 00:10:50,130
Let's look at product data.

152
00:10:50,280 --> 00:10:50,970
It isn't that.

153
00:10:51,450 --> 00:10:56,790
So what I'll do is I'll create data so this data will be created.

154
00:10:56,790 --> 00:10:57,150
Let's.

155
00:10:58,280 --> 00:11:01,850
Let's see if that's correct, too.

156
00:11:02,390 --> 00:11:08,660
Cassandra, one instance and see if this data is getting inserted or not, so

157
00:11:14,360 --> 00:11:14,660
OK.

158
00:11:15,020 --> 00:11:22,400
So productize inserted in Cassandra one note it's sure to have similarly, Gordon cited in Cassandra

159
00:11:22,430 --> 00:11:23,210
Blue Note as well.

160
00:11:23,930 --> 00:11:24,980
You can check that.

161
00:11:29,130 --> 00:11:31,140
OK, let's take us under.

162
00:11:37,230 --> 00:11:40,410
OK, so it is there in Cassandra du Nord as well.

163
00:11:40,860 --> 00:11:41,490
So that's good.

164
00:11:41,880 --> 00:11:43,890
Replication is working perfectly fine.

165
00:11:44,610 --> 00:11:52,170
Now let's do some transactions over here, so let's try to buy a product.

166
00:11:52,350 --> 00:11:53,670
Let's add this two-part.

167
00:11:53,670 --> 00:11:54,890
Let's go to cart.

168
00:11:54,960 --> 00:11:56,400
This this product number three.

169
00:11:56,910 --> 00:11:58,020
Let's create this order.

170
00:11:58,020 --> 00:11:59,160
So this order?

171
00:12:00,320 --> 00:12:01,160
Got created.

172
00:12:01,790 --> 00:12:11,600
Now let's just check if we see this in Cassandra, two instances, let's connect to Cassandra to use

173
00:12:11,600 --> 00:12:16,610
or miss select star from product.

174
00:12:18,600 --> 00:12:22,380
Not products we want to check or the this time.

175
00:12:26,320 --> 00:12:32,320
OK, so this borderline line is there, and Cassandra two similarly should be there in all other instances.

176
00:12:32,320 --> 00:12:33,990
Also, we will take a look at that.

177
00:12:34,000 --> 00:12:39,340
But before that, let's do a more important experiment right now.

178
00:12:39,340 --> 00:12:41,170
So I'm exiting out of this.

179
00:12:42,040 --> 00:12:47,830
So what I should do is out of these three Cassandra instances that we have.

180
00:12:48,040 --> 00:12:49,630
Let's bring down one of them.

181
00:12:49,630 --> 00:12:52,240
So what we can do is this is stop.

182
00:12:53,000 --> 00:12:54,840
Cassandra, we can stop anyone of them.

183
00:12:54,850 --> 00:12:56,200
Let's stop Cassandra one.

184
00:13:01,810 --> 00:13:06,100
So our Cassandra, one instance has stopped, we look at that.

185
00:13:08,390 --> 00:13:10,880
So, Cassandra, one instance has exited.

186
00:13:11,420 --> 00:13:14,200
Now let's try to see if there is any impact on our.

187
00:13:15,920 --> 00:13:24,980
Shopping cart, no, you can browse products, we can look at our orders, so everything is working

188
00:13:24,980 --> 00:13:25,640
as usual.

189
00:13:25,910 --> 00:13:31,790
In fact, if you want to buy something sort of this time, let's buy this product number four.

190
00:13:32,750 --> 00:13:36,920
Let's add this to cart, and let's buy this.

191
00:13:40,160 --> 00:13:44,370
So this order is also created, so now there should be new orders.

192
00:13:44,810 --> 00:13:54,600
Desperate three and desperate a cold and borderline people, let's connect to let's connect to Cassandra.

193
00:13:57,110 --> 00:13:59,090
Right now, we're inside Cassandra, two more.

194
00:13:59,270 --> 00:14:02,770
Here we will use Cassandra Klein to connect to.

195
00:14:02,780 --> 00:14:09,050
Let's first connect to Cassandra to itself, so we just as equal assets will connect to local hosted

196
00:14:09,060 --> 00:14:09,350
said.

197
00:14:10,100 --> 00:14:11,360
OK, so let's see.

198
00:14:18,680 --> 00:14:22,220
If we have ordered it over here, so but.

199
00:14:23,510 --> 00:14:27,990
What other data are over here, so these two different orders they got created?

200
00:14:28,010 --> 00:14:35,030
Both of them are over here, so they won't be there in Cassandra, one instance right now if I see this.

201
00:14:36,940 --> 00:14:39,150
Then that's come out of this.

202
00:14:40,710 --> 00:14:42,090
And let's start.

203
00:14:46,450 --> 00:14:47,920
Cassandra, one instance.

204
00:14:49,750 --> 00:14:57,550
Now our hope is that by the time this data comes up, the data should be there in this particular database

205
00:14:57,550 --> 00:14:57,850
as well.

206
00:14:57,860 --> 00:14:59,230
So let's look at Cassandra.

207
00:14:59,470 --> 00:15:00,910
Let's see what's going on over there.

208
00:15:02,710 --> 00:15:04,480
The data is there and Cassandra Tree.

209
00:15:12,750 --> 00:15:19,920
Because I have not used use awareness, use schema, so I'm going to directly quantify this.

210
00:15:20,340 --> 00:15:20,640
OK.

211
00:15:20,970 --> 00:15:23,930
So Cassandra three, also has got both orders.

212
00:15:24,750 --> 00:15:26,460
Let's accept all of this.

213
00:15:29,070 --> 00:15:33,510
Now, hopefully Cassandra one database has come up, so let's try to connect to that.

214
00:15:36,500 --> 00:15:41,990
OK, so we are connected to Cassandra one node.

215
00:15:42,980 --> 00:15:45,010
So this is connected to this cluster.

216
00:15:45,050 --> 00:15:47,990
So this is connected to local host, we are on Cassandra one.

217
00:15:48,680 --> 00:15:56,840
So that's good news or miss select star from Florida Line.

218
00:15:57,140 --> 00:16:06,590
So this second order was in there when because under one instance wasn't there when this second order

219
00:16:06,590 --> 00:16:07,460
was created.

220
00:16:08,090 --> 00:16:15,430
But because this data was there, in other two instances, it got propagated even to Cassandra one node

221
00:16:15,440 --> 00:16:17,720
which was absent when this transaction.

222
00:16:19,040 --> 00:16:21,830
So our replication is working perfectly fine.

223
00:16:22,280 --> 00:16:28,530
Even when a node is not available, our cluster is still able to work with the remaining two.

224
00:16:28,530 --> 00:16:29,630
Not so this way.

225
00:16:29,990 --> 00:16:32,270
This cluster remains highly available.

226
00:16:32,870 --> 00:16:38,510
We can, in fact, bring down any of the nodes Cassandra one Cassandra to Cassandra, 381 of them.

227
00:16:38,960 --> 00:16:43,520
And it doesn't matter which in order this, this cluster will remain available.

228
00:16:44,060 --> 00:16:47,540
So that gives us very high availability with Cassandra.

229
00:16:48,050 --> 00:16:55,550
And it gives us a very familiar interface like a school kind of interface to work with no sequel database.

230
00:16:55,550 --> 00:17:01,750
So those were the things that we were looking forward to from our NoSQL database, which is Cassandra,

231
00:17:01,750 --> 00:17:01,970
right?

232
00:17:01,970 --> 00:17:03,590
Not with that.

233
00:17:03,590 --> 00:17:08,630
We have incorporated Cassandra into our system and we are through with it now.
