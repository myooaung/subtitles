WEBVTT
1
00:00:02.810 --> 00:00:07.160
In the last session, we containerized all the components of our system.

2
00:00:07.850 --> 00:00:09.050
We did that one by one.

3
00:00:09.680 --> 00:00:14.750
And now what we're going to do is we're going to add a few more features to it, like we are going to

4
00:00:14.750 --> 00:00:19.010
add Docker network and then we are going to add Docker volumes.

5
00:00:19.760 --> 00:00:25.250
So first, I'm going to explain you why we are going to do this and then we will actually do this.

6
00:00:26.570 --> 00:00:29.360
So all our components that so far.

7
00:00:29.450 --> 00:00:35.210
They were running on a horse machine that we have on the cloud and they were using the host machine

8
00:00:35.210 --> 00:00:35.630
network.

9
00:00:35.630 --> 00:00:40.430
So if you have to make a call from web application to, let's say, some service, let's authorization

10
00:00:40.430 --> 00:00:40.850
service.

11
00:00:41.450 --> 00:00:49.790
Then we were making this call by calling this authorization service or as localhost, similarly from

12
00:00:49.790 --> 00:00:52.020
services when we were calling database.

13
00:00:52.100 --> 00:00:54.550
We were again using hostname as local.

14
00:00:55.670 --> 00:00:59.930
Now that's not a configuration of a real system in real system.

15
00:01:00.230 --> 00:01:04.070
We will have real machines or virtual machines, and they will have their host names.

16
00:01:04.820 --> 00:01:06.560
So we want to simulate that.

17
00:01:06.980 --> 00:01:14.060
Now we can simulate that by putting all these Docker containers in Docker created network.

18
00:01:14.780 --> 00:01:16.100
Let's call it Docker network.

19
00:01:16.100 --> 00:01:22.910
It's a bridge network that we can create on the host machine, and we can put all those containers in

20
00:01:22.910 --> 00:01:23.620
that network.

21
00:01:23.630 --> 00:01:29.870
So when we do that, we can call our services, let's say, authorization service, if you want to call

22
00:01:29.870 --> 00:01:30.000
it.

23
00:01:30.020 --> 00:01:37.100
We don't need to use localhost as the hostname we can use authorization service as the host me or whatever

24
00:01:37.580 --> 00:01:38.840
hostname we provide.

25
00:01:39.830 --> 00:01:41.550
So that's one thing we are going to do.

26
00:01:42.260 --> 00:01:47.780
Now the other thing that that's happening along with this is last time when we launched our system,

27
00:01:48.230 --> 00:01:52.040
we were we launched it using only authorization.

28
00:01:52.040 --> 00:01:58.220
So this now we're going to even launch product order inventory and admin service.

29
00:01:58.220 --> 00:02:02.480
So these are similar services configuration are absolutely similar.

30
00:02:02.510 --> 00:02:09.590
The functionality is different, but the way we have to do Docker configuration is absolutely same.

31
00:02:10.220 --> 00:02:15.230
Apart from these functional services, we are going to even add an admin service.

32
00:02:15.470 --> 00:02:20.690
It's so restful service which we can use for creating and deleting data.

33
00:02:20.690 --> 00:02:23.580
So things like that, we can even monitor our application for that.

34
00:02:23.600 --> 00:02:26.360
We will also start an admin service.

35
00:02:27.260 --> 00:02:32.600
So the first thing that we're going to do is we're going to create a Docker network, and this will

36
00:02:32.780 --> 00:02:36.830
simulate a distributed system on a single host machine.

37
00:02:36.830 --> 00:02:44.110
So only containers that you will see, they will be running as if they are running on their host machine.

38
00:02:44.120 --> 00:02:49.340
So in these diagrams and the diagrams that will follow from here, you will see these containers as

39
00:02:49.340 --> 00:02:49.910
machines.

40
00:02:50.450 --> 00:02:52.500
So these are actually not machines.

41
00:02:52.520 --> 00:02:54.080
They are containers only.

42
00:02:54.680 --> 00:03:03.680
But the way we will work them, we will get a feel of as if we are working with these multiple host

43
00:03:03.680 --> 00:03:04.040
machines.

44
00:03:04.040 --> 00:03:06.350
So we will keep our architecture diagrams like this.

45
00:03:07.040 --> 00:03:09.860
This is how we want to implement them in real life.

46
00:03:10.400 --> 00:03:10.790
Right.

47
00:03:11.000 --> 00:03:18.260
When we are using separate separate hose machines, but we can simulate that environment within Docker

48
00:03:18.260 --> 00:03:25.250
network on a single host machine that gives us convenience to work on our system, on a single machine

49
00:03:25.250 --> 00:03:26.450
so that that's a big gain.

50
00:03:26.990 --> 00:03:31.880
Now there is another thing that we are going to do as part of this exercise is that we are going to

51
00:03:31.880 --> 00:03:34.040
create Docker volumes.

52
00:03:34.610 --> 00:03:36.320
Now, why do we need Docker volumes?

53
00:03:36.980 --> 00:03:43.520
We need Docker volumes because the files that were getting created on different containers, so that's

54
00:03:43.520 --> 00:03:43.700
it.

55
00:03:44.480 --> 00:03:50.360
If we create some data on our database, that database will save their data on data files.

56
00:03:50.960 --> 00:03:52.770
Now there are these data files to get it.

57
00:03:52.790 --> 00:03:55.850
They are located within the container.

58
00:03:56.180 --> 00:04:02.630
For some reason, if, let's say, we delete this container, we will lose these data files in containers

59
00:04:02.630 --> 00:04:04.940
is something which are generally ephemeral.

60
00:04:04.950 --> 00:04:08.330
We bring them up, we stop them, we delete them.

61
00:04:08.750 --> 00:04:15.110
We do not want our data files to be stored inside a container because there is a risk of losing them.

62
00:04:16.190 --> 00:04:24.260
So what we are going to do is we are going to create Docker volumes on the host machine so we can create

63
00:04:24.260 --> 00:04:28.760
multiple volumes or we can create a single volume on which we can put all these weights.

64
00:04:29.270 --> 00:04:30.110
So we will see them.

65
00:04:30.620 --> 00:04:35.900
So let's say we have created a Docker volume on our host machine.

66
00:04:35.900 --> 00:04:41.930
Now we can use this Docker volume and we can associate this Docker volumes with the data files of this

67
00:04:41.930 --> 00:04:42.470
database.

68
00:04:42.800 --> 00:04:50.330
So whatever data is saved on this database is actually gets saved on the host volume itself, which

69
00:04:50.330 --> 00:04:51.410
is managed by Docker.

70
00:04:52.310 --> 00:04:57.920
In reality, there is nothing that this container will save on the low container local database.

71
00:04:57.920 --> 00:05:04.960
It will get saved on the hostwinds and how we maintain these files on the host.

72
00:05:04.970 --> 00:05:06.830
That is our responsibility.

73
00:05:07.400 --> 00:05:10.310
Similarly, these log files, so let's add these services.

74
00:05:10.310 --> 00:05:11.690
They are generating some log quest.

75
00:05:12.080 --> 00:05:14.290
They will also be mapped to our Docker volume.

76
00:05:14.300 --> 00:05:19.910
Similarly for web applications, so wherever we need to store data permanently, we will need to store

77
00:05:19.910 --> 00:05:22.610
that data file data on Docker volumes.

78
00:05:23.450 --> 00:05:29.600
So now we are going to go ahead and we are going to actually start our system on Docker containers using

79
00:05:29.810 --> 00:05:30.950
Docker volumes.
