WEBVTT
1
00:00:02.640 --> 00:00:04.380
Let's first connect to our workstation.

2
00:00:11.880 --> 00:00:22.680
Now that it is connected, let's go to our project directly inside this project, Belker directly.

3
00:00:23.640 --> 00:00:30.660
There is a new directory over here demos, so all the demonstrations that we'll be doing with Docker

4
00:00:30.660 --> 00:00:32.040
containers, they will be dead in.

5
00:00:32.040 --> 00:00:33.090
This was directly.

6
00:00:33.660 --> 00:00:37.830
If you go inside this, there are several directories in here.

7
00:00:38.370 --> 00:00:42.420
The previous demo that we did is dead in zero three territory.

8
00:00:42.990 --> 00:00:48.750
Now what we are going to do is we are going to go in two zero two three deer Docker net directly.

9
00:00:48.990 --> 00:00:50.640
This is where our current demo is.

10
00:00:51.090 --> 00:00:54.060
And likewise, there are more demonstrations there diverted over here.

11
00:00:54.420 --> 00:01:00.510
And as we move along, I'll keep on adding directories over here, which will have art demonstrations.

12
00:01:01.230 --> 00:01:08.940
So now let's first see before going into our current demo directory what's there in the first directory.

13
00:01:09.240 --> 00:01:12.420
So there is a file called Docker Compose Store requirement.

14
00:01:12.720 --> 00:01:20.970
I have moved that Docker compose created document file over here and renamed it to Docker compose store

15
00:01:20.980 --> 00:01:21.570
Diamond.

16
00:01:21.990 --> 00:01:28.230
I have done that so that we don't have to specify the name of the Docker compose file because the default

17
00:01:28.230 --> 00:01:30.300
name is Docker compose store requirement.

18
00:01:31.050 --> 00:01:34.440
So now let's go to our current demonstration directly.

19
00:01:34.620 --> 00:01:35.940
And what do we have over here?

20
00:01:36.630 --> 00:01:42.090
One Docker compose start by a minute and there is another file called Arteon File.

21
00:01:42.570 --> 00:01:49.530
This Dart N.V. file has got environment variable, so all the environment variables that are supposed

22
00:01:49.530 --> 00:01:53.910
to be there in the Docker compose start by email configuration.

23
00:01:54.300 --> 00:02:01.860
I have moved them over here so that are Docker compose file is not cluttered with these environment

24
00:02:01.860 --> 00:02:02.310
variables.

25
00:02:02.310 --> 00:02:05.520
So now let's open Docker compose start by a middle file.

26
00:02:06.180 --> 00:02:07.920
Let's go to the top first.

27
00:02:12.200 --> 00:02:20.680
OK, so if you see the first line over here, it is networks minute one and the name is minute one,

28
00:02:20.690 --> 00:02:25.520
so this is the network that we are creating over here.

29
00:02:25.850 --> 00:02:35.780
So if I just get this and if I check, what are the networks present over here on this machine and that

30
00:02:35.780 --> 00:02:38.000
command would be Doc Network less.

31
00:02:38.720 --> 00:02:41.890
So these are the current networks that are present on this machine.

32
00:02:41.900 --> 00:02:47.940
Similarly, I can't even list the volumes that are present on this machine.

33
00:02:49.340 --> 00:02:51.400
So there are no volumes on this machine.

34
00:02:51.410 --> 00:02:54.230
So now let's go back to our Docker compose file.

35
00:02:55.010 --> 00:03:01.130
So the first thing that this Docker compose file does is it provides configuration to create creator

36
00:03:01.430 --> 00:03:06.320
network named as my note one and does by default.

37
00:03:06.620 --> 00:03:08.280
This will be a bridge network.

38
00:03:08.300 --> 00:03:14.840
It will provide us a DNS as well, and that is the reason we will be able to address our services or

39
00:03:15.020 --> 00:03:16.730
the application through the name.

40
00:03:17.060 --> 00:03:19.460
This DNS will help us in doing that.

41
00:03:20.180 --> 00:03:23.150
The next configuration is our volumes here.

42
00:03:23.300 --> 00:03:28.970
We have given instructions to create three volumes on our local host machine.

43
00:03:29.980 --> 00:03:35.770
So we will have three volumes over here, so one volume is post-credit data, this is where we will

44
00:03:36.070 --> 00:03:40.210
store our database data files, then Postgres logs.

45
00:03:40.480 --> 00:03:46.330
This is then our database logs, files will be stored and then we have app logs volume.

46
00:03:46.870 --> 00:03:50.770
This is where are the application and services when stored their log files.

47
00:03:51.160 --> 00:03:56.500
We could have created separate volumes also for each service, but for convenience sake, I have just

48
00:03:56.500 --> 00:03:58.270
created one volume.

49
00:03:58.270 --> 00:04:01.060
So let's say if we look at this web application.

50
00:04:02.330 --> 00:04:12.980
It points to this volume app logs, and it maps their log or MMS directly to this volume, so any file

51
00:04:12.980 --> 00:04:19.910
that will be created in this container at this particular location will actually go to this particular

52
00:04:19.910 --> 00:04:20.330
volume.

53
00:04:20.900 --> 00:04:25.970
So if we see this, this is the case with every other service related authorization.

54
00:04:25.970 --> 00:04:32.030
So this we have this volume add blocks and that points to their log or statically.

55
00:04:32.030 --> 00:04:38.870
So similarly, we can see for our database database has got two volumes, one four logs and one for

56
00:04:38.870 --> 00:04:39.290
data.

57
00:04:40.850 --> 00:04:43.040
Now let's look at the network.

58
00:04:43.310 --> 00:04:50.930
So if you look at this database, it says that it is there in the minor one network using this network

59
00:04:50.990 --> 00:04:51.920
configuration.

60
00:04:52.820 --> 00:04:55.520
Along with this, we have specified hostname.

61
00:04:55.970 --> 00:05:02.120
There's the oldest name by which this particular container will be known in this particular network.

62
00:05:02.780 --> 00:05:05.270
And then there is a port mapping that we have done.

63
00:05:05.660 --> 00:05:13.430
So this port on the right side is the port within the container and the Docker network, and this is

64
00:05:13.430 --> 00:05:18.110
the port that Docker port will be mapped Buddhist host machine port.

65
00:05:18.410 --> 00:05:20.840
And I'll show you why this may be needed.

66
00:05:21.260 --> 00:05:27.890
This is actually needed only from your host machine or from any external network you want to connect

67
00:05:27.890 --> 00:05:28.760
to a container.

68
00:05:29.450 --> 00:05:35.030
Generally, we do not want to connect to our database from our host machine or outside the network.

69
00:05:35.780 --> 00:05:41.840
But sometimes, let's say if a container is not working and we want to debug, then these ports may

70
00:05:41.840 --> 00:05:42.350
be helpful.

71
00:05:42.350 --> 00:05:47.510
We can use these ports to actually connect to these particular containers.

72
00:05:47.820 --> 00:05:55.730
So similarly, we have this port mapping for every service, and I just show you once we launch our

73
00:05:55.730 --> 00:05:56.120
system.

74
00:05:56.130 --> 00:05:57.740
So now we are ready to launch our system.

75
00:05:58.610 --> 00:06:00.500
So let's first do DC.

76
00:06:01.280 --> 00:06:07.840
Right now, I do not need to specify the Docker compose file because by default, it takes Docker compose

77
00:06:07.850 --> 00:06:08.750
taught by a name.

78
00:06:09.140 --> 00:06:12.680
So the bill is already done, so all our images are built.

79
00:06:12.680 --> 00:06:16.100
So if we look at images, they are all there.

80
00:06:16.310 --> 00:06:23.030
Whatever we need, then the next thing that we need to do is we need to bring up the container.

81
00:06:23.030 --> 00:06:28.520
So I use this command DC up minus Docker compose up minus the.

82
00:06:33.040 --> 00:06:34.810
So like here we see that.

83
00:06:35.940 --> 00:06:44.850
This has created a network, and then it has also created a default network, which it will do just

84
00:06:44.850 --> 00:06:52.770
in case if you do not put a container in Docker network or we do not specify the network mode as host,

85
00:06:52.770 --> 00:06:54.480
in that case it will use this network.

86
00:06:55.230 --> 00:06:58.450
Then it has created those three volumes that we have requested.

87
00:06:58.890 --> 00:07:02.580
It is appended directory names to these volumes.

88
00:07:03.360 --> 00:07:10.470
The reason would be that if we are starting our Docker containers from different directories and we

89
00:07:10.470 --> 00:07:14.910
have these different Docker compose files, then they don't use the same volume.

90
00:07:14.910 --> 00:07:20.310
So it creates different volumes for different Docker compose files in different directories.

91
00:07:21.480 --> 00:07:23.190
So here it is.

92
00:07:23.190 --> 00:07:26.370
Starting are containers, but there is a problem over here.

93
00:07:26.400 --> 00:07:29.460
It hasn't started on PostgreSQL data.

94
00:07:30.510 --> 00:07:38.010
The reason is that there is a port conflict with the Postgres that we have installed on this machine.

95
00:07:38.010 --> 00:07:40.050
So let's have let us look at this.

96
00:07:40.470 --> 00:07:41.610
So I'm going to clear this.

97
00:07:42.820 --> 00:07:48.790
And now let's check what online services are running on this machine, because earlier we installed

98
00:07:48.790 --> 00:07:52.440
Postgres database on this machine as a service.

99
00:07:53.870 --> 00:07:55.490
I think there is a spelling mistake.

100
00:07:56.150 --> 00:07:56.480
OK.

101
00:07:56.930 --> 00:08:02.450
So these are these services running on this machine, and we see that there is a PostgreSQL database

102
00:08:03.110 --> 00:08:06.530
that is installed on this machine and it is running as a service.

103
00:08:06.920 --> 00:08:08.330
So let's stop this.

104
00:08:13.200 --> 00:08:19.230
If you want to see if we can check status like this and we can stop it by using stop command.

105
00:08:20.790 --> 00:08:27.270
And if you check this status now, it would have stopped even if we checked the global status of all

106
00:08:27.270 --> 00:08:33.930
services here, it will show us that this post Chris Askew service is shut down.

107
00:08:34.230 --> 00:08:38.700
So now we should be able to actually start to process containers.

108
00:08:38.740 --> 00:08:44.650
For that, we will do all of DC of minus D, and this time we will give a new post.

109
00:08:44.670 --> 00:08:45.090
Guess?

110
00:08:47.600 --> 00:08:54.920
So this would have started all these services, and some of them would be still starting up so we can

111
00:08:54.920 --> 00:08:57.530
just check that by checking the logs.

112
00:09:00.950 --> 00:09:02.660
Let's check Edmund service.

113
00:09:05.080 --> 00:09:06.640
So it is still coming up.

114
00:09:09.890 --> 00:09:12.110
Yeah, it has come up, it has started.

115
00:09:13.100 --> 00:09:16.670
Similarly, our web application and all whatever else was started.

116
00:09:17.210 --> 00:09:20.480
So we let our system come up fully.

117
00:09:20.480 --> 00:09:25.480
In the meantime, what I'll do is I'll show you the Docker network and volumes that were there were

118
00:09:25.490 --> 00:09:26.000
created.

119
00:09:26.000 --> 00:09:35.030
So let's do this Docker network and less so if you see over here.

120
00:09:35.660 --> 00:09:40.700
This has created this network net one, which we were interested in in terms of type bridge.

121
00:09:44.180 --> 00:09:46.130
Then let's check out the volumes.

122
00:09:49.210 --> 00:09:56.590
Now, there are several volumes over here, the ones which we are interested in is this app logs, Postgres

123
00:09:56.590 --> 00:09:59.170
data and Postgres logs.

124
00:10:01.590 --> 00:10:07.200
So we can even actually check the properties of these volumes.

125
00:10:07.770 --> 00:10:10.290
So let's say let's check the Postgres data.

126
00:10:16.060 --> 00:10:22.630
So does the volume that got created on this particular host machine, and this is where the data is

127
00:10:22.630 --> 00:10:23.170
is stored.

128
00:10:24.040 --> 00:10:31.450
So if you look at what's there in this category, I will need to use sudo root permission.

129
00:10:33.990 --> 00:10:42.330
And if you go to this territory when our host machine, this is where Postgres database, which is running

130
00:10:42.330 --> 00:10:51.840
inside our Docker container, this PostgreSQL data, it has stored its data files in this particular

131
00:10:51.840 --> 00:10:53.280
directory, which is dead or not.

132
00:10:53.310 --> 00:10:57.150
Most machines and these are the files that are stored.

133
00:10:57.720 --> 00:11:00.930
So this is our Docker volumes work.

134
00:11:01.380 --> 00:11:08.340
Now, if I have to give you a feel of how Docker network work, then what we will do is we will connect

135
00:11:08.340 --> 00:11:09.690
to one of the containers.

136
00:11:09.690 --> 00:11:12.690
So let us connect to, let's say, admin service container.

137
00:11:13.530 --> 00:11:23.940
For that, I will use this command Docker to accept my most I.D. and the container name and the command

138
00:11:23.940 --> 00:11:25.010
that we want to execute.

139
00:11:25.020 --> 00:11:27.720
So this will start to bash shell on our admin service.

140
00:11:28.320 --> 00:11:32.610
So the hostname of this container is admin service.

141
00:11:33.510 --> 00:11:38.420
And let's say if you are to ping are Postgres database over here.

142
00:11:38.430 --> 00:11:41.610
So what we can do is we can say Ping, PostgreSQL.

143
00:11:44.110 --> 00:11:53.520
So as you can see, it is going to this particular IP address and this is Vera Postgres databases here.

144
00:11:53.560 --> 00:12:01.030
We do not have to use localhost, like I said earlier, but let's see if I come outside of this container

145
00:12:01.480 --> 00:12:01.780
here.

146
00:12:01.780 --> 00:12:10.300
I can't say ping postgres because there is nothing like that in this particular host network took all

147
00:12:10.300 --> 00:12:13.330
those names like Postgres admin servers project this.

148
00:12:13.330 --> 00:12:19.510
They are valid only within the Docker network, and these containers are running in their Docker network.

149
00:12:19.510 --> 00:12:26.620
So when we go inside a container there, we can access all these containers with their network names.

150
00:12:27.220 --> 00:12:30.640
So outside of that, we cannot use those network names.

151
00:12:30.940 --> 00:12:38.020
But let's say if we want to, let's say, connect to our web application, I want to connect to an SDP

152
00:12:38.080 --> 00:12:44.800
line and I won't say that port number 8000.

153
00:12:46.090 --> 00:12:47.290
And that's his status.

154
00:12:47.710 --> 00:12:50.680
So this will not resolve the host to.

155
00:12:50.890 --> 00:12:58.220
What I have to do is, I'll have to say, localhost now on this localhost.

156
00:12:58.460 --> 00:13:01.510
Notice this that I'm giving the sport 8000.

157
00:13:01.900 --> 00:13:09.910
So I have not started any application on this host machine on Port eight thousand, but I have started

158
00:13:10.930 --> 00:13:19.600
their container in there, as we saw in our Docker compose file, that we had mapped every application

159
00:13:19.600 --> 00:13:21.700
sport to a host port.

160
00:13:21.700 --> 00:13:30.190
So in case of application, we have mapped the application Containers Sport 8000 to this host Machine

161
00:13:30.190 --> 00:13:31.390
Sport 8000.

162
00:13:32.530 --> 00:13:36.100
So this should allow me to connect to my web application.

163
00:13:36.400 --> 00:13:39.550
So as you can see this, I got a response from my web application.

164
00:13:39.940 --> 00:13:45.860
So in this way, if you want to connect to a Docker container, you can use the port mapping.

165
00:13:45.910 --> 00:13:48.220
I once again show you the port mapping.

166
00:13:50.050 --> 00:13:56.590
So this sport mapping is actually helping us in connecting to a web application.

167
00:13:58.330 --> 00:14:02.680
If we do not want to connect in this manner, let's say we want to.

168
00:14:03.160 --> 00:14:04.500
We have log into.

169
00:14:04.900 --> 00:14:08.280
I'll just show you, so let's let's go inside our web application.

170
00:14:11.890 --> 00:14:13.980
VEB and bash.

171
00:14:15.010 --> 00:14:17.740
So we are inside our container right now.

172
00:14:18.780 --> 00:14:27.690
Over here, let's say I want to connect to I want to ping or I want to get a webpage goal isn't a steep

173
00:14:27.690 --> 00:14:28.890
climb, so I'm going to use that.

174
00:14:28.890 --> 00:14:36.450
So let's it admin or let's say, product service and it is running on board.

175
00:14:36.450 --> 00:14:37.500
Exhilarated zero.

176
00:14:37.770 --> 00:14:39.390
I want to get this status.

177
00:14:41.990 --> 00:14:48.020
So if you can see that I have got a response from our product service.

178
00:14:48.560 --> 00:14:55.520
So over here to connect to our product service because I am inside web application container, so here

179
00:14:55.520 --> 00:14:57.480
I can use this new product service.

180
00:14:58.520 --> 00:15:00.410
So I think this should be amply here now.

181
00:15:00.980 --> 00:15:09.290
What this dog owner took is an exit out of this machine and our system should also be running by now.

182
00:15:09.710 --> 00:15:14.960
Not what we should do is we should try to connect to this system through a browser.

183
00:15:15.410 --> 00:15:23.150
So for that, I'll take the IP address of the machine and I'll open a browser tab and we will connect

184
00:15:23.150 --> 00:15:24.620
to this port eight thousand.

185
00:15:25.400 --> 00:15:30.200
And as we saw this spot, eight thousand is mapped to this post machines 40000.

186
00:15:30.200 --> 00:15:33.680
So we'll be able to connect to a container directly over yet.

187
00:15:34.040 --> 00:15:35.240
So let's go ahead and do that.

188
00:15:36.780 --> 00:15:38.850
So here we are able to connect.

189
00:15:39.030 --> 00:15:40.380
We will have to do a login.

190
00:15:41.100 --> 00:15:43.170
So it's that authorization service is running.

191
00:15:43.170 --> 00:15:44.850
We should be able to do a login.

192
00:15:48.660 --> 00:15:55.560
So we were able to log in into our system because our admin service is running so we can even go to

193
00:15:55.560 --> 00:15:58.020
this monitoring Deb and we can monitor.

194
00:15:59.130 --> 00:16:04.830
Let's have databases running, so click this big databases, so it's his processes running.

195
00:16:05.220 --> 00:16:10.020
Similarly, I can bring my services and let's see what response we get.

196
00:16:12.870 --> 00:16:19.320
OK, first time it's going to take time because services are warming up, so we got back response from

197
00:16:19.320 --> 00:16:19.960
services.

198
00:16:19.980 --> 00:16:22.890
There is a ping where also we can bring our web application.

199
00:16:23.910 --> 00:16:29.130
This is useful in case we have multiple Web application instances running, so we know exactly which

200
00:16:29.160 --> 00:16:31.440
instances they're turning back the response.

201
00:16:32.790 --> 00:16:41.760
So this is how we were able to actually start our application and we could run our application using

202
00:16:41.760 --> 00:16:45.360
Docker network, and we have use Docker volumes.

203
00:16:45.810 --> 00:16:54.720
Another thing that we did is that we of this time have set our environment variables in data and Wi-Fi.

204
00:16:55.590 --> 00:17:00.840
So all those environment variables that literally are in our Docker compose file, we have moved them

205
00:17:00.840 --> 00:17:01.290
over here.

206
00:17:01.830 --> 00:17:07.710
So if you look at this are web application right now is pointing to these holes.

207
00:17:07.710 --> 00:17:09.570
So these host configurations are here.

208
00:17:10.590 --> 00:17:12.510
Last time around, we used localhost.

209
00:17:12.810 --> 00:17:16.470
Here we have used different host for all these configurations.

210
00:17:16.890 --> 00:17:18.790
Now these configurations are complicated.

211
00:17:18.810 --> 00:17:22.740
We are going to discuss them in the next topic.

212
00:17:22.950 --> 00:17:27.900
But over here, this is how we have configured our web application to communicate with different services

213
00:17:27.900 --> 00:17:28.500
that we have.

214
00:17:29.280 --> 00:17:33.540
Our admin service also needs to know where are the different services listed.

215
00:17:33.570 --> 00:17:38.940
So this is the configuration to let admin service know where are the different services?

216
00:17:38.940 --> 00:17:40.770
Because the admin service?

217
00:17:41.250 --> 00:17:43.860
We did this Bing services.

218
00:17:44.160 --> 00:17:47.310
So for typing them, it needs to know where they are located.

219
00:17:47.730 --> 00:17:50.430
So that is how we have done our configuration.

220
00:17:50.910 --> 00:17:57.690
And with this, we are actually done with Docker volumes and Docker network.

221
00:17:58.380 --> 00:18:03.330
So we have a good system now which is running using Docker containers.

222
00:18:03.740 --> 00:18:09.150
Now next, we will see how we can enhance this system into a large-scale system.

223
00:18:09.150 --> 00:18:15.570
So slowly, gradually we will add more architectural elements to our application as we move along.
