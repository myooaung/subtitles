WEBVTT
1
00:00:01.380 --> 00:00:04.870
OK, so now we're ready to integrate Discovery service into our system.

2
00:00:05.400 --> 00:00:09.780
But before we do that, let's just take a look at the code that we need to try to integrate discovery

3
00:00:09.780 --> 00:00:10.980
service into a system.

4
00:00:13.050 --> 00:00:19.320
So in order to incorporate discovery service into our system, what we have done is we have created

5
00:00:19.320 --> 00:00:23.260
a service much the same way we have created other services.

6
00:00:24.120 --> 00:00:26.460
So this is also a similar service.

7
00:00:26.970 --> 00:00:34.620
But the difference being over here is that here we have included this library called Spring Cloud Starter

8
00:00:34.620 --> 00:00:40.680
Netflix you take us over, which is basically a million package for Netflix.

9
00:00:40.680 --> 00:00:42.990
You would encourage history or discovery service.

10
00:00:43.440 --> 00:00:47.940
That is the dependency that we need in order to create a discovery service.

11
00:00:48.540 --> 00:00:50.870
We have chosen this part because it is pretty simple.

12
00:00:50.880 --> 00:00:51.350
It is.

13
00:00:51.780 --> 00:00:57.630
We can very easily create this service much the same way we are creating other service, and there is

14
00:00:57.630 --> 00:01:03.300
really no code that we have to write for this other than the little customization that we need to do

15
00:01:03.300 --> 00:01:04.860
here and there, and we will just see this.

16
00:01:05.760 --> 00:01:13.980
So the core that is there for this particular service is really there in this one file where the only

17
00:01:13.980 --> 00:01:20.300
thing that we are doing is we are creating we are starting the main program.

18
00:01:20.310 --> 00:01:24.930
Basically, we're starting our discovery service over here.

19
00:01:25.170 --> 00:01:31.080
And the other thing that we have done over here is that we have bought this annotation enable you take

20
00:01:31.080 --> 00:01:35.370
us over on our main web application class.

21
00:01:36.180 --> 00:01:38.250
So that is all we need to do.

22
00:01:38.250 --> 00:01:41.360
In order to start the discovery service.

23
00:01:41.370 --> 00:01:47.280
We need to get that Discovery Service Library through Nordic Summit and in the main class.

24
00:01:47.280 --> 00:01:51.180
We need to start our application bid enable you take us through it.

25
00:01:51.180 --> 00:01:58.920
Annotation If you want to customize the discovery service a bit, then we can do that to configure properties

26
00:01:59.280 --> 00:02:03.330
that should be there in the class part and we can adjust here.

27
00:02:03.330 --> 00:02:09.960
Properties like Support Port on which our discovery service will run the name of the application, the

28
00:02:09.960 --> 00:02:11.430
discovery service that we are running.

29
00:02:11.730 --> 00:02:15.690
And then there are quite a few other properties that we will discuss.

30
00:02:15.700 --> 00:02:23.100
And then when we need them for just incorporating this discovery service into our system, we are going

31
00:02:23.100 --> 00:02:25.290
to go with the default options.

32
00:02:25.290 --> 00:02:32.220
We have just customized the port number and hostname over here, which we will override through Docker

33
00:02:32.220 --> 00:02:33.390
environment variables.

34
00:02:33.900 --> 00:02:39.570
So this is all we need to start a build up discovery service.

35
00:02:41.040 --> 00:02:42.780
So this is the first thing that we need to have.

36
00:02:42.780 --> 00:02:44.430
We need to have a discovery service.

37
00:02:45.500 --> 00:02:51.980
Then what we need is that all the other services that are there in our system should be able to register

38
00:02:52.190 --> 00:02:53.660
with this discovery service.

39
00:02:53.660 --> 00:03:02.840
So what we said over here was that all these services in our system there, as they come up, they will

40
00:03:02.840 --> 00:03:05.150
register with the discovery service.

41
00:03:05.150 --> 00:03:07.400
So that is what we are going to discuss now.

42
00:03:07.880 --> 00:03:12.680
We have already seen how to create discovery service.

43
00:03:12.680 --> 00:03:17.840
Yes, we have not packaged this into Docker, which we will see later, but we know code wise how to

44
00:03:17.840 --> 00:03:19.040
create this service.

45
00:03:21.160 --> 00:03:26.740
OK, so let's take one service as an example, so let's say product service as an example.

46
00:03:28.150 --> 00:03:36.700
What we need to do over here is in order to make this product service, register with Yurek, our service,

47
00:03:36.700 --> 00:03:41.870
we need a Yurek hotline so that dependency we have put in common libraries.

48
00:03:41.910 --> 00:03:44.710
If you see common libraries perform dot example.

49
00:03:46.230 --> 00:03:52.770
There you will see that there is this spring cloud starter, Netflix, Eureka plane.

50
00:03:54.330 --> 00:04:00.840
So this dependency is there in the Common Library in this common library goes into all the other services.

51
00:04:01.290 --> 00:04:06.480
So all the other services that we get access to the client library.

52
00:04:06.870 --> 00:04:13.500
So once we have claimed library within a particular service, then what we need to do over here is that

53
00:04:13.500 --> 00:04:23.400
we go to the main application file and then on the main application, plus we annotated with enable

54
00:04:23.400 --> 00:04:24.210
discovery like.

55
00:04:24.420 --> 00:04:32.310
By doing this now, this particular service knows that it has to do the registration as a discovery

56
00:04:32.310 --> 00:04:33.110
service client.

57
00:04:33.630 --> 00:04:39.540
So the next question after this is how does this particular service know that?

58
00:04:39.570 --> 00:04:41.740
Where is the discovery service?

59
00:04:41.740 --> 00:04:48.950
So that will come through the configuration, which we can put in ClassPass through conflict or property.

60
00:04:48.970 --> 00:04:57.840
So here, if you see this, this is the property you take, a client service you are in, which will

61
00:04:57.840 --> 00:05:02.910
tell this particular service where discovery service you record is located.

62
00:05:04.470 --> 00:05:06.330
There are certain other properties over here.

63
00:05:06.360 --> 00:05:07.890
That said, I just noted Eureka.

64
00:05:08.580 --> 00:05:11.970
When we're using this discovery service, we will set it to do.

65
00:05:12.540 --> 00:05:15.720
If we are not using this service, then we will set you to false.

66
00:05:16.730 --> 00:05:25.010
Fair to registry information is used by the clients which want to fetch information through discovery

67
00:05:25.020 --> 00:05:25.420
claim.

68
00:05:25.460 --> 00:05:30.770
This is not for registration, this is for vetting the routing information.

69
00:05:31.190 --> 00:05:36.890
So in whichever place, a little like Gateway Service or the service will have to set this to.

70
00:05:38.390 --> 00:05:41.900
OK, so now are.

71
00:05:43.410 --> 00:05:52.950
So this knows where our discovery service is located, and it has also been instructed to do the registration.

72
00:05:52.950 --> 00:06:00.150
So once this service comes up, it will do the registration, but it has to do registration against

73
00:06:00.150 --> 00:06:01.110
a service name.

74
00:06:02.010 --> 00:06:03.360
So how does this service know?

75
00:06:03.360 --> 00:06:03.900
What is it?

76
00:06:04.320 --> 00:06:06.630
What is this service name of this particular service?

77
00:06:07.170 --> 00:06:14.250
So that will come through another property and that is spring application name, product service.

78
00:06:14.640 --> 00:06:16.930
So for each service this this will be different.

79
00:06:16.930 --> 00:06:27.810
So let's hope if we are doing it in inventory service, then here the spring application name will be

80
00:06:27.810 --> 00:06:28.830
in winter service.

81
00:06:29.160 --> 00:06:35.850
So when a plane wants to put out a request to let say in military service, then it will have to use

82
00:06:35.850 --> 00:06:40.440
this as string name to get its information from Discovery Glenn.

83
00:06:40.450 --> 00:06:44.270
So that's the significance of this particular IED.

84
00:06:45.240 --> 00:06:51.900
Another property, useful property over here is that when we bring up this particular service, we are

85
00:06:51.900 --> 00:06:56.430
telling that this service is going to come up on this particular hostname.

86
00:06:56.940 --> 00:07:06.510
So the name that discovery service should register this service against, in this case, it is local

87
00:07:06.510 --> 00:07:06.780
host.

88
00:07:06.780 --> 00:07:12.750
But when we launched in the Docker environment, this will come through the environment variable.

89
00:07:12.750 --> 00:07:21.120
We will overwrite this property through environment variable so that each service has got complete information

90
00:07:21.540 --> 00:07:24.030
to do their registration so it will go ahead.

91
00:07:24.420 --> 00:07:31.110
And it will say that look, it will tell to the discovery service that I am in military service, that

92
00:07:31.110 --> 00:07:36.840
this has an I.D. I am located on so-and-so host and on so-and-so board.

93
00:07:38.010 --> 00:07:43.290
That information will be provided to discoveries of this debt, that there can be other information

94
00:07:43.290 --> 00:07:50.730
also that can be provided to discovery service a little like a health check you are and that there are

95
00:07:51.570 --> 00:07:55.950
quite a few other you errors if you want to save them, we can send them to.

96
00:07:56.490 --> 00:07:59.790
But for our purpose, for now, we are good enough fitness.

97
00:08:00.650 --> 00:08:07.010
OK, so we have learned two things over here how to bring up a discovery service.

98
00:08:07.020 --> 00:08:10.260
We will see actually how to do that once we run this.

99
00:08:10.740 --> 00:08:14.430
But for now, we know from cord standpoint what we need to do.

100
00:08:14.820 --> 00:08:21.900
The other thing that we have learned is how each individual service can register with discovery service.

101
00:08:22.470 --> 00:08:24.930
The last thing that we need to do over here is.

102
00:08:25.350 --> 00:08:30.420
So when we have clients like get service and order service.

103
00:08:30.690 --> 00:08:32.130
So let's go back to our data.

104
00:08:33.330 --> 00:08:40.020
So he said that gateway service need to roll out all the requests that are coming to it to the respective

105
00:08:40.020 --> 00:08:40.650
services.

106
00:08:41.670 --> 00:08:47.310
Now it needs to know where these services are located, and that information has already been provided

107
00:08:47.310 --> 00:08:49.080
to Eureka.

108
00:08:49.110 --> 00:08:51.030
So this discovery service.

109
00:08:51.270 --> 00:08:58.650
So now this gateway service should fetch that information from this discovery service as their discovery

110
00:08:58.650 --> 00:08:59.370
service claim.

111
00:09:00.180 --> 00:09:02.280
So similar thing will be done by order service.

112
00:09:02.280 --> 00:09:05.910
Also, then it has to make a portal to inventory service.

113
00:09:06.240 --> 00:09:12.120
It will first go to Discovery Service to know where inventory service is located.

114
00:09:13.020 --> 00:09:14.880
So let's see how that works.

115
00:09:16.590 --> 00:09:21.060
So the way it plays out in case of gateway service is that we have to.

116
00:09:22.480 --> 00:09:29.430
Provide this customization that you claimed fetch trade history, TV left to say this to.

117
00:09:30.250 --> 00:09:36.850
This will instruct this particular service to get that registry information from Discovery Service Registry

118
00:09:36.850 --> 00:09:44.290
Service Registry Information is basically routing information that each service has registered with

119
00:09:44.290 --> 00:09:45.010
the discovery.

120
00:09:45.010 --> 00:09:52.510
So this other thing that we will need to do is that we will need to set this ribbon eureka enabler to

121
00:09:52.870 --> 00:09:59.260
prove and we will talk about this ribbon load balancer a little later in the next section.

122
00:09:59.260 --> 00:10:05.290
But for now, I'll just let you know that this has the load balancer that are given so this will use

123
00:10:05.740 --> 00:10:09.160
to communicate with the other services.

124
00:10:09.160 --> 00:10:14.410
So we will discuss about debt load, balance it in a bit, but just notice that here we have this load

125
00:10:14.410 --> 00:10:15.130
balancer based.

126
00:10:15.130 --> 00:10:19.380
In fact, we have that in order service, this service also.

127
00:10:19.390 --> 00:10:25.860
So those are our clients and they need to connect to these particular services.

128
00:10:25.870 --> 00:10:30.460
So now this particular load balancer needs to know where these services are located.

129
00:10:30.730 --> 00:10:36.580
So in case of gateway service, because this is provided by Netflix.

130
00:10:37.090 --> 00:10:45.910
So Netflix will take care of setting that information from the registry itself because we have set this

131
00:10:46.030 --> 00:10:51.490
unique outline fetch registry to to which is what we are going to set, we're going to override this.

132
00:10:51.850 --> 00:10:57.250
Once we go into the demo, you will see that and this particular information is required.

133
00:10:57.460 --> 00:11:04.000
This routing information is required only if we are not using discovery service, so this will become

134
00:11:04.000 --> 00:11:04.510
redundant.

135
00:11:05.050 --> 00:11:07.690
We will not use it when we go in the demonstration.

136
00:11:07.720 --> 00:11:14.200
This is that in this particular configuration file so that all the properties that are useful for us,

137
00:11:14.470 --> 00:11:18.910
that we can set them in different scenarios, they are then all in one place.

138
00:11:19.360 --> 00:11:26.080
But the real properties that will be used during runtime, they will be picked up from environment variables.

139
00:11:26.380 --> 00:11:33.000
Basically, environment variable properties will override whatever properties value that we have given

140
00:11:33.010 --> 00:11:34.660
in configured properties.

141
00:11:35.650 --> 00:11:41.860
In case of order service, we can get a little more deeper look as to how this works.

142
00:11:42.310 --> 00:11:47.530
So we'll go to order processor and this has got inventory client.

143
00:11:47.530 --> 00:11:55.900
So this is the code that accesses inventory service for resolving inventory.

144
00:11:56.140 --> 00:12:02.530
So this is that in order service and this is a client for inventory service or what this plan does is

145
00:12:03.010 --> 00:12:09.970
it first locates it gets hold of a load balancer Rubin load balancer that I just mentioned and it will

146
00:12:09.970 --> 00:12:19.000
say choose a service with this service ad. So this is the service had with which inventory service would

147
00:12:19.000 --> 00:12:20.130
have registered itself.

148
00:12:20.140 --> 00:12:23.710
So we are providing that same service idea over here.

149
00:12:24.310 --> 00:12:30.940
So this will get the information about this particular service ad from the discovery service.

150
00:12:31.300 --> 00:12:38.320
And this information can be used for getting bored, forgetting host and any other information that

151
00:12:38.320 --> 00:12:43.270
is available with the discovery service related to this particular service.

152
00:12:43.960 --> 00:12:49.810
So that is how order line will come to know about the inventory service.

153
00:12:49.810 --> 00:12:57.580
Once it knows this most important provision of inventory service, it can make a call to the inventory

154
00:12:57.580 --> 00:13:01.690
service, so that's how it works with the help of discovery service.

155
00:13:02.050 --> 00:13:09.190
We will get rid of all the routing information that we had to set earlier, so this routing information

156
00:13:09.190 --> 00:13:11.710
will not be needed for all.

157
00:13:11.710 --> 00:13:16.000
Our claims will fetch this information from the discovery service.

158
00:13:16.390 --> 00:13:21.610
So now let's get into the demonstration and we will actually see how this will work and how we will

159
00:13:21.610 --> 00:13:25.060
integrate discovery service into our system.
