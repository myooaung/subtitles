WEBVTT
1
00:00:00.390 --> 00:00:03.870
We are ready to run our system, so let's launch that.

2
00:00:05.770 --> 00:00:09.040
So here it is, pulling this rabbit MQ image.

3
00:00:14.390 --> 00:00:19.640
The rest all of the images were there, so it is going to use that to create the container.

4
00:00:20.960 --> 00:00:23.120
OK, so all containers have been launched.

5
00:00:27.010 --> 00:00:30.490
Now, let's look at the log files of one of those containers.

6
00:00:35.740 --> 00:00:37.810
So Gateway service is starting.

7
00:00:39.880 --> 00:00:46.720
We can check what's happening for order service, which is what we are interested in most this time.

8
00:00:50.210 --> 00:00:51.470
So that has also started.

9
00:00:53.860 --> 00:00:55.330
Still, it's going to take some time.

10
00:00:56.350 --> 00:01:01.720
In the meantime, what we can do is, let's say for ElasticSearch would be up, so let's just check

11
00:01:01.720 --> 00:01:02.980
if ElasticSearch is up.

12
00:01:07.010 --> 00:01:13.030
So, yeah, so it looks like ElasticSearch is up, so let's at least connect to that to see what's going

13
00:01:13.030 --> 00:01:13.830
on right now.

14
00:01:13.870 --> 00:01:19.000
So the machine external APIs this.

15
00:01:22.270 --> 00:01:27.260
So this is a better way of monitoring, so if we can connect to our web application, we can get the

16
00:01:27.270 --> 00:01:31.330
URL for ElasticSearch so we can make use of that.

17
00:01:31.330 --> 00:01:33.160
Web application comes up pretty fast.

18
00:01:36.840 --> 00:01:37.990
You can always use that.

19
00:01:38.010 --> 00:01:38.580
Now let's.

20
00:01:41.560 --> 00:01:44.590
We'll have to create an index done so fluently is.

21
00:01:47.860 --> 00:01:52.450
What we will create, it is already irrelevant because we were even created.

22
00:01:52.480 --> 00:01:56.230
We have seen this, so I'm going to rush through this.

23
00:01:58.190 --> 00:02:05.090
And we will go back to discover after creating index programs, so these are the logs that are coming

24
00:02:05.660 --> 00:02:08.150
in order to make this log more clear.

25
00:02:08.180 --> 00:02:16.820
Let's select log over here and then we can select, let's say, container name.

26
00:02:18.380 --> 00:02:22.670
And we can select log level if it is there.

27
00:02:23.930 --> 00:02:25.970
Yeah, log level is dead, so OK.

28
00:02:26.630 --> 00:02:33.380
So this is a biased log that we are seeing over here, so it is much clearer.

29
00:02:33.710 --> 00:02:35.990
So this will tell us actually what's going on.

30
00:02:37.280 --> 00:02:38.420
So if you want to check.

31
00:02:39.560 --> 00:02:44.170
But service has started and with service has not started, so let's get started.

32
00:02:44.210 --> 00:02:47.210
Web application so you can search for this.

33
00:02:54.130 --> 00:03:00.190
And we can see this that order service two or service one product service, inventory service or provision

34
00:03:00.190 --> 00:03:03.870
service and admin service get the service they have started.

35
00:03:03.880 --> 00:03:06.820
So we monitor them, we will actually find them.

36
00:03:09.870 --> 00:03:17.400
OK, so they have all started, so this is a much better way of knowing if these services are started,

37
00:03:17.820 --> 00:03:28.080
still better is that we can go to our Matrix, Prometheus Matrix and there we can look for targets.

38
00:03:28.920 --> 00:03:32.010
So this is it shows that everything is up.

39
00:03:32.010 --> 00:03:36.570
So this is actually the best way of monitoring our system.

40
00:03:36.570 --> 00:03:38.250
This is how we will do it in production.

41
00:03:38.250 --> 00:03:45.110
But because we have over a period of time evolve these things, we added these things later on.

42
00:03:45.120 --> 00:03:53.070
So I have already added some monitoring so that in case if we do not have this full fledged monitoring,

43
00:03:53.070 --> 00:03:56.910
then we can monitor to these little utilities over here.

44
00:03:57.690 --> 00:04:03.210
OK, so let's add some data to our data alert system.

45
00:04:03.210 --> 00:04:07.590
Right now we see if you look at product data, there won't be any products.

46
00:04:07.590 --> 00:04:10.860
If we go to products, there is nothing.

47
00:04:10.860 --> 00:04:12.300
So let's add some data.

48
00:04:13.820 --> 00:04:15.290
Let's create data.

49
00:04:16.220 --> 00:04:19.970
And then after that, what we want to do is we want to create order.

50
00:04:20.660 --> 00:04:26.630
The data is created, so let's go and create order because that is where we are expecting asynchronous

51
00:04:26.630 --> 00:04:27.140
processing.

52
00:04:27.560 --> 00:04:28.860
There are no orders that are not.

53
00:04:28.870 --> 00:04:29.880
Let's go to products.

54
00:04:30.860 --> 00:04:33.500
OK, so let's select this book number two.

55
00:04:34.010 --> 00:04:36.920
It's add this to cart and let's go to cart.

56
00:04:37.550 --> 00:04:39.050
And let's create order.

57
00:04:40.340 --> 00:04:44.780
If you notice over here, the status right now is in process.

58
00:04:45.230 --> 00:04:52.430
That means the order has not been processed yet, and it is probably in the queue at the time when we

59
00:04:52.430 --> 00:04:53.430
fetch the order.

60
00:04:53.490 --> 00:04:56.720
So if we now go to orders window.

61
00:04:58.340 --> 00:05:04.130
It is it created state that means it has been pulled out of the messaging queue and it has been processed.

62
00:05:04.970 --> 00:05:10.010
So how do we know that that it was actually processed by the messaging queue?

63
00:05:10.850 --> 00:05:19.550
We can go to, we can actually connect to it every time you worked for that on board one five six seven

64
00:05:19.550 --> 00:05:19.700
two.

65
00:05:19.700 --> 00:05:21.980
But we will need this IPO for this.

66
00:05:23.160 --> 00:05:28.680
So let's replace global host with the every time queue.

67
00:05:28.830 --> 00:05:38.250
OK, so if you are logging in here for the first time, you can use guest guest as the default username

68
00:05:38.250 --> 00:05:40.950
and password that every time cue provides.

69
00:05:43.040 --> 00:05:49.070
OK, so this now, if you look at this message, read over here for the last 10 minutes.

70
00:05:50.290 --> 00:05:56.890
There is a spike over here, and this spike is for this because this is a green color, so we can we

71
00:05:56.890 --> 00:06:00.730
know this, that this is for the delivery of the message.

72
00:06:01.190 --> 00:06:08.020
Now that is where we can see, publish also but publish and deliver probably happen near vote at the

73
00:06:08.020 --> 00:06:08.710
same time.

74
00:06:09.250 --> 00:06:15.700
So that's why we see an overlap over here and we can remove that overlap if I can just filter out,

75
00:06:15.970 --> 00:06:16.540
deliver.

76
00:06:16.960 --> 00:06:20.500
Then we see these yellow publish the yellow population.

77
00:06:20.500 --> 00:06:23.050
This green acknowledgement happened at the same time.

78
00:06:23.410 --> 00:06:25.720
So we see this green spike on the top.

79
00:06:26.290 --> 00:06:29.590
But this is actually a combination of publish and deliver.

80
00:06:30.880 --> 00:06:31.990
So how do we?

81
00:06:32.380 --> 00:06:34.060
Is there any other way to see this?

82
00:06:34.090 --> 00:06:35.680
Yes, there is another way.

83
00:06:36.970 --> 00:06:40.360
Now let's look at our tracing Yeager tracing.

84
00:06:40.480 --> 00:06:41.500
What does it tell us?

85
00:06:42.580 --> 00:06:45.040
Let's look at auto service.

86
00:06:46.330 --> 00:06:47.260
Find places.

87
00:06:49.830 --> 00:06:52.120
This one is for create order.

88
00:06:52.140 --> 00:06:54.150
This is the most recent one.

89
00:06:54.930 --> 00:06:56.100
You know, if you look at this.

90
00:06:58.050 --> 00:07:02.430
These deaths, these spans up to this point.

91
00:07:03.120 --> 00:07:09.030
They are related to create order, so the pre-processing part that we are doing where we are killing

92
00:07:09.030 --> 00:07:09.510
the order.

93
00:07:10.140 --> 00:07:14.790
So this is the place where actually order got you.

94
00:07:15.030 --> 00:07:24.510
So this new order is where the order got you, and it has taken three point four two milliseconds to

95
00:07:24.510 --> 00:07:25.350
kill the order.

96
00:07:25.920 --> 00:07:33.300
And this particular create order actually got finished in 91 milliseconds.

97
00:07:33.660 --> 00:07:38.070
So once this cleared part of cleared order pre has finished.

98
00:07:38.070 --> 00:07:46.530
This order processing has started after the message from Robert MQ was pushed to the order process once

99
00:07:46.530 --> 00:07:46.840
again.

100
00:07:46.860 --> 00:07:49.560
So if you see this, this order processing.

101
00:07:51.220 --> 00:07:55.940
This order processing was done by instance, order service, too.

102
00:07:56.920 --> 00:08:04.870
So if I create another order, maybe that order will be created will be processed by order processing

103
00:08:04.870 --> 00:08:05.160
one.

104
00:08:05.170 --> 00:08:06.490
So let's create another order.

105
00:08:07.210 --> 00:08:08.920
It's going to create order.

106
00:08:10.300 --> 00:08:11.170
Let's go to orders.

107
00:08:11.170 --> 00:08:13.090
We know this isn't in process right now.

108
00:08:14.350 --> 00:08:16.150
So this is created.

109
00:08:16.180 --> 00:08:18.820
Now let's try to solve this one.

110
00:08:18.820 --> 00:08:22.540
This the first order was processed by orders of these two.

111
00:08:23.530 --> 00:08:25.420
Now let's search for the traces again.

112
00:08:26.260 --> 00:08:28.480
This is the most recent create order.

113
00:08:28.510 --> 00:08:29.500
Let's look at this.

114
00:08:30.250 --> 00:08:32.230
So now we look at order processing.

115
00:08:32.920 --> 00:08:36.010
This one was processed by orders of this one.

116
00:08:36.670 --> 00:08:42.220
So we notice that the orders are being processed asynchronously.

117
00:08:42.220 --> 00:08:47.620
We can again check that this is out of second order, which we created just now and.

118
00:08:50.110 --> 00:08:55.730
So we have two orders in our system, which got processed asynchronously, so these are the two orders

119
00:08:55.750 --> 00:08:58.420
who are asynchronous processes running perfectly fine.

120
00:08:58.990 --> 00:09:04.610
And we are able to process message with multiple consumers in this case.

121
00:09:04.630 --> 00:09:08.350
We have two consumers orders of this one and orders of two.

122
00:09:08.890 --> 00:09:12.550
There is another way we can check this what is being processed.

123
00:09:12.550 --> 00:09:22.810
So let's say we can search for order service one or leave messages and let's look at this one.

124
00:09:23.350 --> 00:09:25.870
So Order Service one or order service two?

125
00:09:26.110 --> 00:09:28.300
And the message should have processed orders.

126
00:09:28.300 --> 00:09:34.900
So if you look at this, these are two messages with processed order and one message is coming out from

127
00:09:34.900 --> 00:09:35.740
orders of this one.

128
00:09:36.130 --> 00:09:39.200
And other messages coming out from orders of IS two.

129
00:09:39.640 --> 00:09:43.780
So on, multiple consumers are working and are asynchronous.

130
00:09:43.780 --> 00:09:45.760
Processing is working perfectly fine.

131
00:09:45.760 --> 00:09:54.730
But rabbit and you so that finishes are item on it every time to what we have achieved over here is

132
00:09:55.420 --> 00:10:01.960
that if you look at this, we have divided this order processing into two parts.

133
00:10:02.440 --> 00:10:03.340
So one part.

134
00:10:05.770 --> 00:10:09.340
One part is let me just go back to that.

135
00:10:13.360 --> 00:10:16.660
So one part is pre-processing of the order.

136
00:10:16.720 --> 00:10:21.130
Very quickly queue the order in this big part that we see over here.

137
00:10:21.700 --> 00:10:24.940
This is basically order processing.

138
00:10:24.940 --> 00:10:26.940
Parts of these are happening separately.

139
00:10:26.950 --> 00:10:28.900
There is no connection between them.

140
00:10:29.230 --> 00:10:31.660
The only connection between them is that we have.

141
00:10:32.680 --> 00:10:38.200
Connected the trace so that we can get a unified trace of the entire process.

142
00:10:39.190 --> 00:10:47.560
So when there is a lot of load on the database, only this part can be finished quickly and this remaining

143
00:10:47.560 --> 00:10:57.130
part of order processing can be done or finished when the system has the capacity to process these orders

144
00:10:57.130 --> 00:10:58.450
because they are there in the queue.

145
00:10:58.750 --> 00:11:04.750
This system can pick up those orders from the queue when it is in a position to process them.

146
00:11:05.470 --> 00:11:12.250
So that's how we'll be able to reduce some load from our database by distributing it in time.

147
00:11:12.850 --> 00:11:15.010
Now let's go to the next item.
