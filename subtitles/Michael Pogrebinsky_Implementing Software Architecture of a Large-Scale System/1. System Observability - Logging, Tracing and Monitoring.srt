1
00:00:02,450 --> 00:00:08,840
Now, our system is beginning to look like a large scale system we have, and it acquired a few components

2
00:00:08,840 --> 00:00:09,620
to our system.

3
00:00:10,160 --> 00:00:15,230
And for each component, we can potentially have lots of instances.

4
00:00:15,560 --> 00:00:18,890
So it's like this gateway service we have, for instance, is in production.

5
00:00:18,890 --> 00:00:23,950
We can go up to 10 15 instances, depending upon the user load.

6
00:00:24,350 --> 00:00:30,440
Similarly, for web application and similarly for other services that we have, in fact, there are

7
00:00:30,440 --> 00:00:34,370
components like load balancing where we can keep primary secondary set up.

8
00:00:34,850 --> 00:00:39,830
And for database, it is also we can have primary secondary setup.

9
00:00:39,840 --> 00:00:47,510
So the point is we can have lots of components in our system and each component can have multiple instances.

10
00:00:48,320 --> 00:00:52,790
So we have a system over here which resembles a large scale system.

11
00:00:53,420 --> 00:00:57,800
And with that, we have some new problems now.

12
00:00:57,800 --> 00:01:02,090
Those problems that we are going to discuss right now are related to observability.

13
00:01:02,690 --> 00:01:09,260
So let's say there is something wrong going in our application and we don't know which component it

14
00:01:09,260 --> 00:01:10,220
is going wrong in.

15
00:01:10,520 --> 00:01:12,480
And users are seeing some errors.

16
00:01:12,500 --> 00:01:19,670
Now we have to find out where the error is, then our best bet is that we will be looking for the logs

17
00:01:20,060 --> 00:01:23,450
and whichever component just showing errors.

18
00:01:23,810 --> 00:01:26,050
We will start our investigation from there.

19
00:01:26,060 --> 00:01:34,490
So let's say our order service has some issue and that is one particular instance of that order service

20
00:01:35,000 --> 00:01:37,370
where logs have that issue.

21
00:01:37,640 --> 00:01:45,640
But we do not know that that order service has the issue or that particular instance is where the Schubert

22
00:01:45,680 --> 00:01:46,340
recorded.

23
00:01:47,430 --> 00:01:54,810
So now, if we have to debug this particular problem that a user has reported, then we'll have to look

24
00:01:54,810 --> 00:01:59,890
for logs of many more components, which ever makes sense.

25
00:01:59,910 --> 00:02:04,260
We are going to look over that and try to find out where that error is.

26
00:02:05,340 --> 00:02:09,750
And this is going to be a big problem if it is a large scale system.

27
00:02:09,900 --> 00:02:13,170
If it was a small scale system, it is something very trivial.

28
00:02:13,620 --> 00:02:16,160
And architects will not have to worry about it.

29
00:02:16,170 --> 00:02:22,050
But if it is a large scale system like this, then this is something that architects need to worry about.

30
00:02:23,090 --> 00:02:30,440
So what is needed over here is some mechanism through which we should be able to find areas within our

31
00:02:30,440 --> 00:02:30,950
system.

32
00:02:31,910 --> 00:02:34,100
We should be able to audit our system.

33
00:02:34,110 --> 00:02:41,270
So let's say a customer is claiming that some information was provided and we are claiming that information

34
00:02:41,270 --> 00:02:42,200
was never provided.

35
00:02:42,200 --> 00:02:44,090
Such a request never came to the system.

36
00:02:44,450 --> 00:02:47,030
Then the only way to prove that is through logs.

37
00:02:47,930 --> 00:02:53,070
So the logging becomes extremely important over here in case we have to audit.

38
00:02:53,120 --> 00:02:59,960
But we can meaningfully navigate through these logs only if they are easily accessible, so we will

39
00:02:59,960 --> 00:03:01,550
see what needs to be done over here.

40
00:03:01,560 --> 00:03:04,550
But the point is that there are challenges like that.

41
00:03:05,120 --> 00:03:12,080
And then if we have to analyze our logs to derive some information, which we call analytics.

42
00:03:12,080 --> 00:03:17,210
So let's say we want to find out for how long users have connecting and when they're disconnecting and

43
00:03:17,210 --> 00:03:17,960
things like that.

44
00:03:18,740 --> 00:03:21,290
Security breaches will have to have been analyzed logs.

45
00:03:21,290 --> 00:03:23,990
So things like that we have to do in a large-scale system.

46
00:03:24,860 --> 00:03:31,550
We may have to take care of the latency so users are getting less, if bad, performance for certain

47
00:03:31,550 --> 00:03:37,430
apps than we should be able to find out which component is responsible for poor performance of those

48
00:03:37,430 --> 00:03:38,000
apps.

49
00:03:38,870 --> 00:03:42,600
We should be able to find out quickly what is the health of our system?

50
00:03:42,620 --> 00:03:47,060
Are there any components which are not up or they are performing badly?

51
00:03:47,780 --> 00:03:52,520
We should be able to know what is the throughput of our system, what is the resource utilization of

52
00:03:52,520 --> 00:03:53,090
our system?

53
00:03:53,630 --> 00:03:59,270
Resource utilization will tell us if we need to add more resources or we are running with more resources.

54
00:03:59,270 --> 00:04:05,870
So these are certain operations related things which are extremely critical for a large scale system.

55
00:04:06,830 --> 00:04:12,770
So we have discussed certain things that we need to have in our system.

56
00:04:13,040 --> 00:04:15,620
Now let's just give some names to those things.

57
00:04:16,970 --> 00:04:21,530
So we will classify observability into three main items.

58
00:04:21,980 --> 00:04:27,560
One is logging, either one is tracing and the third one is matrix.

59
00:04:28,920 --> 00:04:33,330
So logging is about analyzing the logs that our application is generating.

60
00:04:34,560 --> 00:04:41,820
Dressing is about getting further logs from the system, all that information from our system, that

61
00:04:41,820 --> 00:04:46,680
how much time each API is consuming, and we want this information at function level.

62
00:04:47,580 --> 00:04:53,100
We may not be able to put this for everything in our system, but at least four critical transactions

63
00:04:53,100 --> 00:04:55,810
and a critical part we should have trace.

64
00:04:56,640 --> 00:05:02,160
And then the third thing is matrix, which is important if you want to know the current health of our

65
00:05:02,160 --> 00:05:06,960
system and how the future of our System Health looks like.

66
00:05:06,960 --> 00:05:08,790
So we need matrix for that.

67
00:05:09,300 --> 00:05:12,540
So these are the things that we are going to add into our system now.
