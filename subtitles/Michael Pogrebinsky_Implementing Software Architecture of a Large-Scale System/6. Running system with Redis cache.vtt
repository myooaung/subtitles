WEBVTT
1
00:00:00.540 --> 00:00:02.670
Now, let's just run our system with this.

2
00:00:03.930 --> 00:00:10.140
So for that, I'm going to do this C minus D, which would bring up our entire system.

3
00:00:11.040 --> 00:00:14.700
First, it will pull the latest sketch from Docker registry.

4
00:00:16.060 --> 00:00:18.100
So let's wait for that.

5
00:00:19.500 --> 00:00:20.660
Looks like it has bullet.

6
00:00:21.050 --> 00:00:24.330
No disputing that it is exporter that has done.

7
00:00:25.680 --> 00:00:27.540
There it is, starting all these components.

8
00:00:29.540 --> 00:00:32.640
So it has launched all these components.

9
00:00:32.660 --> 00:00:40.520
Now let's see the logo of one of those components if they are indeed starting properly or not, so we

10
00:00:40.520 --> 00:00:43.250
will look at litigator service.

11
00:00:46.250 --> 00:00:49.640
The normally look at good service because of gateway service is not up.

12
00:00:49.820 --> 00:00:53.500
Then we will not be able to connect to any other service from our web UI.

13
00:00:54.440 --> 00:01:01.040
OK, so this is coming up this time our focus will be on product service because that's where we have

14
00:01:01.040 --> 00:01:01.360
added.

15
00:01:02.760 --> 00:01:09.960
And it is cash, so product services coming up in the meantime, there's just one thing that I forgot

16
00:01:09.960 --> 00:01:18.060
to tell you, and that was that we'll of course have to add reduce dependency in this form, Nordics

17
00:01:18.060 --> 00:01:18.810
and also in this.

18
00:01:19.940 --> 00:01:24.200
Product service that is this bombed out exhibit in order to.

19
00:01:25.340 --> 00:01:29.110
Get the libraries for this client.

20
00:01:29.790 --> 00:01:31.210
Is the version that we're using.

21
00:01:32.100 --> 00:01:35.390
And somewhere down, we should have this.

22
00:01:36.910 --> 00:01:40.940
OK, so this is where we're using spring word starter data.

23
00:01:41.510 --> 00:01:44.330
So Spring Springwood provided Jedis for it.

24
00:01:44.330 --> 00:01:51.830
So because you're using this Jedis claim to access this, there is another line called Nadya's line,

25
00:01:52.340 --> 00:01:54.380
which is provided by spring by default.

26
00:01:54.380 --> 00:01:55.670
So we're excluded that.

27
00:01:56.150 --> 00:02:00.080
And we have included the Radius client, so that's what we have done.

28
00:02:00.080 --> 00:02:02.640
So this was the only thing which I missed telling you before.

29
00:02:02.660 --> 00:02:05.510
So that completes the code Bartlett.

30
00:02:05.810 --> 00:02:07.740
Let's go back to our client.

31
00:02:07.760 --> 00:02:10.550
OK, so our product service has come up.

32
00:02:11.900 --> 00:02:15.530
So let's just check if all processes are up.

33
00:02:16.340 --> 00:02:24.500
So all processes are up, except if you see this service as if it exists, that's perfectly fine because

34
00:02:24.500 --> 00:02:31.250
we created this container just to just to create the image of services, which will be used by other

35
00:02:31.250 --> 00:02:31.850
services.

36
00:02:32.150 --> 00:02:37.400
OK, so now let's try to connect to our system.

37
00:02:39.320 --> 00:02:40.610
This is the IP address.

38
00:02:47.350 --> 00:02:49.300
OK, so we are going to do review.

39
00:02:49.470 --> 00:02:50.200
Let's find him.

40
00:02:56.450 --> 00:03:00.550
OK, because we are able to sign into our translation services also.

41
00:03:00.710 --> 00:03:03.560
Let's just check if the entire system is up.

42
00:03:05.750 --> 00:03:09.500
OK, one services are up there, it looks good, so.

43
00:03:11.360 --> 00:03:11.870
No.

44
00:03:13.210 --> 00:03:18.700
Let's see if there is any data that I know there is no data, so let's create some data.

45
00:03:21.430 --> 00:03:26.470
OK, so this would have created data, so if I look at product data tables, there are products in that.

46
00:03:26.980 --> 00:03:33.610
So now if I go to products that are products in this and I can see you've got details as well.

47
00:03:34.030 --> 00:03:36.850
So now how do we know that this is coming from cash?

48
00:03:36.850 --> 00:03:40.870
Because it's not a system which is running with very high amounts of data.

49
00:03:40.870 --> 00:03:43.920
So our database itself is able to do caching.

50
00:03:43.930 --> 00:03:48.880
So we will not come to know much of the difference how we are getting these products.

51
00:03:48.890 --> 00:03:55.090
So in order to know that what we will do is we will look at our tracing.

52
00:03:55.090 --> 00:03:57.700
So this is where tracing can become very helpful.

53
00:03:58.240 --> 00:04:05.230
You whenever you want to understand how what is the core flow, how a particular API works, then we

54
00:04:05.230 --> 00:04:07.080
can make use of or trace.

55
00:04:08.080 --> 00:04:08.590
So.

56
00:04:09.890 --> 00:04:12.320
In this case, we are interested in product service.

57
00:04:14.900 --> 00:04:15.350
Let's.

58
00:04:18.480 --> 00:04:22.980
OK, so there is a great product that there is a good products request.

59
00:04:23.940 --> 00:04:26.160
So let's look at this great product request.

60
00:04:29.090 --> 00:04:35.420
Now, if we look at the quality end for this product and we look at this edge get, this is something

61
00:04:35.420 --> 00:04:37.610
that is coming from the it is.

62
00:04:38.120 --> 00:04:48.890
So you can see over here this is using Javaris components and it has taken 44 microseconds to fetch

63
00:04:48.890 --> 00:04:49.580
this data.

64
00:04:50.600 --> 00:04:51.950
Now that is pretty fast.

65
00:04:52.250 --> 00:04:56.720
And if you compare it with the total time taken, it's actually nothing.

66
00:04:57.530 --> 00:05:05.630
So this is how we can make sure that data is coming from cache and that is speeded up our system.

67
00:05:06.380 --> 00:05:09.860
So it was pretty easy to include in addition to our system.

68
00:05:09.860 --> 00:05:12.350
Now this will alleviate some load from our database.

69
00:05:12.900 --> 00:05:19.070
Well, let's move to our next item to further reduce the stress on our databases.
