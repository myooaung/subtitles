1
00:00:00,950 --> 00:00:07,310
Now we will discuss that system components in a little more detail so that we understand what we are

2
00:00:07,310 --> 00:00:07,940
playing with.

3
00:00:10,990 --> 00:00:14,020
Let's first look at our Web application deployment architecture.

4
00:00:14,320 --> 00:00:21,040
And we are interested in web applications, deployment architecture because that will decide the performance

5
00:00:21,040 --> 00:00:23,350
and scalability of a web application.

6
00:00:24,010 --> 00:00:27,490
So there are two ways in which we can deploy our web application.

7
00:00:28,000 --> 00:00:28,420
One.

8
00:00:28,420 --> 00:00:34,360
What we can do is we can host all these static and dynamic content on web server.

9
00:00:34,780 --> 00:00:36,070
So this will host both.

10
00:00:36,670 --> 00:00:45,250
The other way is that we separately host static content like HTML files, JavaScript files, image files,

11
00:00:45,250 --> 00:00:45,970
video files.

12
00:00:46,150 --> 00:00:55,180
So we hosted that on a reverse proxy or a web server and all the dynamic content this proxy to an application

13
00:00:55,180 --> 00:00:55,630
server.

14
00:00:56,440 --> 00:01:02,050
So these are the two ways in which we can host up that application.

15
00:01:02,530 --> 00:01:08,350
Now, a few things that we expect from our web application is that our web application should be able

16
00:01:08,350 --> 00:01:11,530
to manage both slow and fast connections.

17
00:01:11,530 --> 00:01:16,720
So if connections, data storage, anything from the internet, they can be extremely slow.

18
00:01:16,750 --> 00:01:21,880
We call them slogan actions and the connections that originate from the internet.

19
00:01:22,120 --> 00:01:23,590
They are fast connections.

20
00:01:23,860 --> 00:01:24,460
So that's it.

21
00:01:25,240 --> 00:01:31,870
The connection between this web server and this absolute that is a fast connection and the connection

22
00:01:31,870 --> 00:01:38,290
between this browser and this web server that is called as a slow connection because that connection,

23
00:01:38,290 --> 00:01:41,290
the communication happens over the internet.

24
00:01:42,310 --> 00:01:49,780
So we need special software to manage these slow connections, and the server has that capability,

25
00:01:49,780 --> 00:01:55,660
so we hosted web applications which are exposed to over internet through web servers.

26
00:01:56,560 --> 00:02:02,590
Then the next thing that we expect from a web server is serving static resources.

27
00:02:03,160 --> 00:02:08,770
So web servers can serve all this static data largely through their memory.

28
00:02:08,780 --> 00:02:13,620
They know how to cache static data and how to efficiently serve them.

29
00:02:13,630 --> 00:02:18,160
So these are two very fundamental things that we expect from our web server.

30
00:02:19,210 --> 00:02:26,140
Now, the other thing that we expect from our web server is serving dynamic content, and this is where

31
00:02:26,170 --> 00:02:30,400
these two deployment models are different in the first deployment model.

32
00:02:30,610 --> 00:02:36,720
Dynamic content and static content is both served by the web server and in the second model.

33
00:02:36,970 --> 00:02:44,320
Dynamic content is served by application, server and web server in between proxies on the request web

34
00:02:44,320 --> 00:02:44,740
server.

35
00:02:45,010 --> 00:02:47,920
So that's why it is also called less reverse proxy.

36
00:02:48,820 --> 00:02:56,680
There is a third capability that that is expected from web applications and that's not part of web servers

37
00:02:56,680 --> 00:02:57,550
or observers.

38
00:02:57,970 --> 00:03:05,290
There are generally separate process managers that are hosting along with with any web applications,

39
00:03:05,290 --> 00:03:13,570
and their job is to start, stop, monitor and scale the application as in when the load increases.

40
00:03:13,570 --> 00:03:19,090
So if an application stops for some reason, then it is supposed to restart it so that it will have

41
00:03:19,090 --> 00:03:20,620
to monitor it constantly.

42
00:03:21,490 --> 00:03:26,890
But this is not a capability that we are interested in right now because we are going to provide this

43
00:03:26,890 --> 00:03:31,000
capability to Docker and Kubernetes that we will learn later.

44
00:03:31,840 --> 00:03:38,710
But for now, what we need is the application should be able to serve static resources, it should be

45
00:03:38,710 --> 00:03:43,300
able to manage connections and it should be able to serve dynamic content.

46
00:03:43,960 --> 00:03:46,780
So for that, what technology options do we have?

47
00:03:47,050 --> 00:03:48,370
Let's take a look at that.

48
00:03:50,950 --> 00:03:56,050
Like, we already discussed that there are two deployment methods that are available and accordingly,

49
00:03:56,050 --> 00:03:57,400
we can choose our technology.

50
00:03:57,910 --> 00:04:04,480
So in the first option where we post both static content and dynamic content on a web server, then

51
00:04:04,480 --> 00:04:08,890
we can choose between Apache Web Server and Engine X web server.

52
00:04:09,520 --> 00:04:11,410
Now we're using Apache Web Server.

53
00:04:11,440 --> 00:04:15,640
Then we have native modules available on about web server.

54
00:04:15,640 --> 00:04:17,650
So let's say we want to run BHP.

55
00:04:17,980 --> 00:04:24,190
Then we have module BHP available for generating dynamic content through BHP scripts.

56
00:04:24,370 --> 00:04:28,120
Similarly, we can do the same thing for Ruby and Python.

57
00:04:28,360 --> 00:04:30,640
So these modules are available on Apache.

58
00:04:31,360 --> 00:04:37,630
The other popular web server is an X. There, we do not have these kind of native modules available,

59
00:04:38,020 --> 00:04:40,420
but we can make use of passenger tool.

60
00:04:41,110 --> 00:04:50,180
We can make use of this tool to run a ruby python or nor Nautilus could write on and inexpensive.

61
00:04:50,620 --> 00:04:53,650
In fact, passenger also supports Apache Web server.

62
00:04:53,650 --> 00:04:58,360
So if you want to run passenger on Apache Web Server, we can do that as well.

63
00:04:59,910 --> 00:05:07,590
Now, this is a good way of a simple way of running of an application, but this is not a preferred

64
00:05:07,590 --> 00:05:09,410
way of running a web application.

65
00:05:09,420 --> 00:05:18,540
The preferred way is the second way where we have a separate web server for hosting static content and

66
00:05:18,540 --> 00:05:24,090
a different server or an episode for hosting dynamic content.

67
00:05:24,720 --> 00:05:32,250
The reason is that if we have these two modules separately, we can use different kind of servers which

68
00:05:32,250 --> 00:05:38,550
are optimized for that particular purpose so we can use our web server, which is optimized as a proxy

69
00:05:38,550 --> 00:05:42,360
server and optimized for hosting static content.

70
00:05:42,370 --> 00:05:44,120
So let's end Enix's.

71
00:05:44,380 --> 00:05:49,830
One said server, which is a very good proxy server or a reverse proxy server, in fact.

72
00:05:50,880 --> 00:05:58,620
So here what we can do is all the static content can be solved by the engine index and all the dynamic

73
00:05:58,620 --> 00:06:01,260
content request can be proxy to nab server.

74
00:06:01,650 --> 00:06:03,630
And that's why it is called a reverse proxy.

75
00:06:04,020 --> 00:06:06,450
So here these episodes.

76
00:06:06,960 --> 00:06:11,970
We can use different languages on this episode to make our web application.

77
00:06:12,420 --> 00:06:20,760
These languages will typically use a web framework to provide regular stuff that is needed to make web

78
00:06:20,760 --> 00:06:21,330
applications.

79
00:06:21,330 --> 00:06:23,550
A little MVC architecture is one of them.

80
00:06:23,970 --> 00:06:27,300
And it is pretty important for that application these days.

81
00:06:27,780 --> 00:06:35,670
So these frameworks will provide all the boilerplate code and MVC framework to run these web applications.

82
00:06:36,060 --> 00:06:42,210
So we will generally see them in a combination that we will have a language combination with a web framework

83
00:06:43,140 --> 00:06:45,600
that will run on an observer.

84
00:06:46,050 --> 00:06:49,920
So we have various options that are available in terms of technology.

85
00:06:49,920 --> 00:06:54,860
Let's take a quick look at that so we can make our web application using BHP.

86
00:06:54,870 --> 00:06:56,730
It is a pretty popular option.

87
00:06:57,330 --> 00:07:01,620
It's very quick to develop and easy to learn for developers.

88
00:07:01,620 --> 00:07:06,180
So lots of web site that we see they are actually based on BHP.

89
00:07:06,570 --> 00:07:10,050
We can use here either la1 framework or co-ordinator.

90
00:07:10,080 --> 00:07:11,250
Both are pretty popular.

91
00:07:11,760 --> 00:07:15,090
So BHP is a very good option for making general websites.

92
00:07:15,690 --> 00:07:20,280
Then the other similar option is Ruby Options on Rails Framework.

93
00:07:20,670 --> 00:07:23,520
And this can use an observer like Puma Unicorn.

94
00:07:23,520 --> 00:07:28,140
Ultimate development is again very quick in Ruby.

95
00:07:28,200 --> 00:07:33,180
It is not as easy to learn as BHP, but the development is pretty good.

96
00:07:33,510 --> 00:07:37,860
So this is also something which is used heavily in making websites.

97
00:07:38,670 --> 00:07:45,840
That's the next best option as compared to BHP in terms of the number of implementations that we see

98
00:07:45,840 --> 00:07:46,680
over the internet.

99
00:07:48,160 --> 00:07:56,350
One of the recent options is JavaScript on notice, so you can use JavaScript for programming out of

100
00:07:56,350 --> 00:07:59,650
web application, it will run on expressed ideas framework.

101
00:08:00,400 --> 00:08:08,080
It is very popular where we have to deal with a large number of clients because it uses event model,

102
00:08:08,380 --> 00:08:15,610
asynchronous model for handling large number of clients, and it provides a very low latency response.

103
00:08:16,210 --> 00:08:24,880
The only downside of Nautilus is that we cannot use it for web applications that have CPU intensive

104
00:08:24,880 --> 00:08:25,300
work.

105
00:08:26,050 --> 00:08:30,460
Now that option and a very popular option is Python on Django framework.

106
00:08:31,120 --> 00:08:37,270
This is used for large sized web applications, and it provides very quick development.

107
00:08:37,630 --> 00:08:40,060
So this framework is also pretty popular.

108
00:08:40,780 --> 00:08:47,200
The that choices that we have is we can also use Java with spring framework to make a web application.

109
00:08:48,010 --> 00:08:51,990
Generally, it is used for large sized enterprise applications.

110
00:08:52,000 --> 00:09:00,400
The development is not as quick as if we compare it with Python or BHP or Ruby, but it provides it

111
00:09:00,400 --> 00:09:02,560
makes very robust web applications.

112
00:09:02,830 --> 00:09:11,320
But sometimes it can be an overkill because similar stuff we can do much more quickly with Python and

113
00:09:11,320 --> 00:09:15,070
we can make large sized applications with Python Django framework.

114
00:09:16,270 --> 00:09:24,250
The other option that we have is SB Darknet God, this is popular within Microsoft environment and is

115
00:09:24,250 --> 00:09:28,360
something that can be used even on Linux operating system.

116
00:09:29,530 --> 00:09:34,450
The framework that we have chosen for our application is by a tangential framework.

117
00:09:34,750 --> 00:09:39,640
The reason is that Python, Django, we can confidently make large sized applications.

118
00:09:39,640 --> 00:09:46,330
Lots of big implementations used Python, Django framework and the development is pretty quick.

119
00:09:46,780 --> 00:09:53,050
If we compare it with languages like Java, so does the framework of our choice.

120
00:09:53,680 --> 00:09:56,110
We could have used any other framework also.

121
00:09:56,350 --> 00:10:00,700
Generally, these frameworks are chosen based on the expertise that is available.

122
00:10:01,180 --> 00:10:07,090
But when you are dealing with very large sized web applications, then you may like to step out of your

123
00:10:07,090 --> 00:10:11,170
convenience of making web applications by BHP and Ruby.

124
00:10:11,680 --> 00:10:18,490
We will have to explore options like Biton and Java, and we have chosen by them because their development

125
00:10:18,490 --> 00:10:19,360
is much quicker.

126
00:10:21,420 --> 00:10:25,320
Now that we have chosen by jingo framework for our Web application.

127
00:10:25,680 --> 00:10:31,740
So let's take a look at the architecture of Python Django framework so that we can understand the code

128
00:10:31,740 --> 00:10:33,810
that we are dealing with now.

129
00:10:33,810 --> 00:10:36,740
Python Django framework is basically an MVC framework.

130
00:10:36,750 --> 00:10:38,010
MVC framework is nothing.

131
00:10:38,650 --> 00:10:45,300
My model view controller, it provides separation of concerns in case of Python Django framework.

132
00:10:45,300 --> 00:10:49,170
It is Gardiner's MTV framework, which is model, template and view.

133
00:10:49,800 --> 00:10:51,600
Let's take a look at how this works.

134
00:10:52,470 --> 00:10:57,070
When you're when we're using Python Django framework and as we discussed, we will host or our static

135
00:10:57,090 --> 00:11:02,910
content on a reverse proxy server, and that reverse proxy server will rout all the dynamic content

136
00:11:02,910 --> 00:11:06,210
requested by the engineers over Python Django.

137
00:11:06,210 --> 00:11:09,720
So that will look at the URL that has been requested.

138
00:11:10,260 --> 00:11:18,120
It will take that you are to where you are at a map and it will accordingly determine what view it is

139
00:11:18,120 --> 00:11:21,630
going to use to serve that as a request.

140
00:11:22,500 --> 00:11:26,220
Once it is decided, what view is going to solve this request?

141
00:11:26,220 --> 00:11:34,200
This view then fetch the model from either a database or from a service, depending upon the code of

142
00:11:34,200 --> 00:11:36,510
this view and then this view.

143
00:11:36,540 --> 00:11:42,660
Once it has passed the data, it will decide what template basically what its HTML CSS template it is

144
00:11:42,660 --> 00:11:45,210
going to use to show the results.

145
00:11:45,210 --> 00:11:51,180
It will populate that template with the data that it dispatched ends, and once it has created that

146
00:11:51,180 --> 00:11:56,910
its HTML dynamically, it will respawn back to the reverse proxy server.

147
00:11:57,540 --> 00:12:00,830
So that is how Django Python framework works.

148
00:12:00,840 --> 00:12:02,940
It's an MTV model here.

149
00:12:03,150 --> 00:12:05,190
Viewer decides what has to be shown.

150
00:12:05,610 --> 00:12:12,630
Model is basically data that has to be shown and template as basically the format in which the data

151
00:12:12,630 --> 00:12:13,320
will be shown.

152
00:12:13,830 --> 00:12:20,310
So this provides separation of concerns and is absolutely needed for a web application.

153
00:12:21,270 --> 00:12:27,420
Apart from this, Python Django framework also provides out-of-box crud operations.

154
00:12:27,840 --> 00:12:31,200
So let's say we are directly dealing with a database.

155
00:12:31,500 --> 00:12:38,130
This framework can actually help us performing trade operations, basically create, read, update and

156
00:12:38,160 --> 00:12:38,580
delete.

157
00:12:39,360 --> 00:12:45,810
And this can also provide a UI for directly doing operations on a database.

158
00:12:46,260 --> 00:12:51,870
Although we do not need this particular functionality because in the background, we are not going to

159
00:12:51,870 --> 00:12:54,690
deal with a database in case of our system.

160
00:12:55,320 --> 00:12:58,380
We will have services as a package.

161
00:12:58,380 --> 00:13:03,690
So our web application, Python, Django Web application will not talk to our database.

162
00:13:03,990 --> 00:13:07,440
It will actually talk to as database services.

163
00:13:08,420 --> 00:13:15,350
When we are working this Python Django framework in development mode, we do not need to host static

164
00:13:15,350 --> 00:13:24,050
content separately on a reverse proxy so we can host that static content on the Python Django Web itself.

165
00:13:24,440 --> 00:13:26,660
So that simplifies the development.

166
00:13:26,660 --> 00:13:33,290
We do not have to deal with multiple components to make a web application or to develop a web application.

167
00:13:33,290 --> 00:13:40,520
We can do that on a single web server and that helps in speeding up the development process.

168
00:13:40,730 --> 00:13:47,510
So when we are looking at our code that we are running in development mode, we will not see any reverse

169
00:13:47,510 --> 00:13:48,870
proxy running.

170
00:13:49,190 --> 00:13:56,390
But when we run this web application in production mode, which we will run, then we will run it on

171
00:13:56,390 --> 00:13:57,050
Kubernetes.

172
00:13:57,350 --> 00:14:00,950
We will also need a reverse proxy to host static content.

173
00:14:02,190 --> 00:14:05,400
So that is our Python Django framework is structured.

174
00:14:05,790 --> 00:14:10,020
Now let's see the code that we have used for their application.
