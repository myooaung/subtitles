1
00:00:02,270 --> 00:00:06,560
Now, let's look at the code for implementing asynchronous processing in message queue.

2
00:00:07,190 --> 00:00:10,820
For that, we will go to order service in order service.

3
00:00:12,110 --> 00:00:17,490
There is a dependency in bombed out example for messaging client.

4
00:00:17,840 --> 00:00:25,550
So this is the vision of the every time you claim that we are using and the exact dependency should

5
00:00:25,550 --> 00:00:26,660
be somewhere over here.

6
00:00:27,770 --> 00:00:32,210
This is the exact dependency for that.

7
00:00:32,210 --> 00:00:38,420
We don't, you know, after that, let's look at the configuration that we will need to implement.

8
00:00:38,420 --> 00:00:41,690
The message in Q4 that we will look at are considered properties.

9
00:00:42,780 --> 00:00:48,530
Now, if you look at this, there are two set of flags over here.

10
00:00:48,930 --> 00:00:51,910
So one is for asynchronous processing.

11
00:00:51,920 --> 00:00:59,660
If we turn on this flag, then the order service will do asynchronous processing of oil, create order

12
00:00:59,660 --> 00:01:00,200
requests.

13
00:01:00,740 --> 00:01:05,030
Right now, it is set to false and that's why there is no is in as processing.

14
00:01:05,750 --> 00:01:08,080
But going forward, we will set this to two.

15
00:01:08,750 --> 00:01:14,570
Now, once this is set to true, then we need to specify what kind of queue we are using.

16
00:01:14,990 --> 00:01:20,810
So there is one queue for testing within this code base, and that queue is called as local queue.

17
00:01:21,500 --> 00:01:24,170
So we can use that when we are not using it every time queue.

18
00:01:24,440 --> 00:01:30,650
But when we decide to use it every time queue, then we can replace this particular flag with it every

19
00:01:30,650 --> 00:01:31,220
time you.

20
00:01:31,940 --> 00:01:37,370
Once you provide data, every time you information, we can provide the host information over here.

21
00:01:37,370 --> 00:01:42,950
So wherever the host is looking to export, information also has to be provided or any other information

22
00:01:42,950 --> 00:01:44,840
that can also be provided over here.

23
00:01:45,880 --> 00:01:53,050
Because the cure will restore order, so we have named the queue that we will create in reduced order

24
00:01:53,050 --> 00:01:53,380
queue.

25
00:01:54,580 --> 00:01:58,900
So now let's look at the code that is going to do asynchronous processing.

26
00:01:59,320 --> 00:02:03,460
So for that, we will go to order service in service directly.

27
00:02:03,850 --> 00:02:10,390
There is order service which has all the IPAs, the root level APIs of the service, and this service

28
00:02:10,390 --> 00:02:13,260
calls the implementation service.

29
00:02:13,260 --> 00:02:15,190
So this does not have any business logic.

30
00:02:15,200 --> 00:02:20,920
It's just a wrapper for web service related code or restful service.

31
00:02:20,920 --> 00:02:21,510
Related Good.

32
00:02:21,550 --> 00:02:22,450
The implementation.

33
00:02:22,450 --> 00:02:24,520
Is there an order service implementation?

34
00:02:26,230 --> 00:02:29,140
Well, here we have to work to create order code.

35
00:02:29,920 --> 00:02:32,500
So this is create order code.

36
00:02:34,490 --> 00:02:40,550
Now in this create or record, what is happening over here is that it is looking at the guard and from

37
00:02:40,550 --> 00:02:47,990
that it has created an order in memory and this is where the actual order processing is going to happen.

38
00:02:48,590 --> 00:02:49,460
Here we are first.

39
00:02:49,460 --> 00:02:57,440
Taking off this flag is in order processing, which is nothing but this particular flag that we saw.

40
00:02:57,980 --> 00:02:59,210
So if this is said to to.

41
00:03:01,670 --> 00:03:10,180
Did the secretary then order preprocessor in Cuba, the order and this order will go to the messaging

42
00:03:10,180 --> 00:03:18,540
queue, if asynchronous order processing is not enabled, then we will directly send this order to order

43
00:03:18,540 --> 00:03:19,410
post processor.

44
00:03:19,950 --> 00:03:22,290
And that will directly process the order.

45
00:03:23,370 --> 00:03:28,020
If asynchronous processing is true, then it will go to three processor and three processor will send

46
00:03:28,020 --> 00:03:30,470
it to messaging, queue and messaging.

47
00:03:30,480 --> 00:03:34,710
You will send it back to this order post processor.

48
00:03:34,710 --> 00:03:36,900
So that is the loop over here.

49
00:03:37,470 --> 00:03:42,300
Now, in order to better understand how this is, structure that just hit the court.

50
00:03:42,330 --> 00:03:44,110
So this is for order published.

51
00:03:44,580 --> 00:03:47,640
So we have to publish the order, the order.

52
00:03:47,670 --> 00:03:53,160
So right now, we have that in order service implementation as we saw that for publishing in order for

53
00:03:53,160 --> 00:03:57,750
sending it to Cuba, even handed over to order preprocessor object.

54
00:03:58,790 --> 00:04:06,260
And this order pre-processed, Sarabjit, been handed over this order to or the producer or the producer's

55
00:04:06,260 --> 00:04:09,540
job is to put this order into messaging.

56
00:04:10,130 --> 00:04:12,210
But because we have two kinds of messaging.

57
00:04:12,890 --> 00:04:14,560
One is local messaging.

58
00:04:14,570 --> 00:04:18,050
You are text messaging you and the other one is that every time you.

59
00:04:18,050 --> 00:04:20,450
So we have added an abstraction in between.

60
00:04:21,170 --> 00:04:28,910
So this order produced that instead of putting this order into messaging queue, it will use this abstraction

61
00:04:28,910 --> 00:04:34,790
in between, which will actually do the job of putting the order into the message queue.

62
00:04:35,090 --> 00:04:41,150
But before we put this order to message queue, we will convert it into a serialized form into adjacent

63
00:04:41,150 --> 00:04:41,450
form.

64
00:04:41,870 --> 00:04:45,170
And in fact, the order and it itself will change that.

65
00:04:45,170 --> 00:04:46,550
We will discuss how to just show you.

66
00:04:47,000 --> 00:04:51,540
But this is the floor for publishing the order next.

67
00:04:52,400 --> 00:04:56,900
When the queue receives the order, it will notify its consumer.

68
00:04:57,740 --> 00:05:04,070
And again, we have added a consumer abstraction over here and you can do what it is not directly going

69
00:05:04,070 --> 00:05:07,970
to order consumer because we have two different kind of queues.

70
00:05:08,150 --> 00:05:10,430
So we are two different kind of consumers.

71
00:05:11,420 --> 00:05:14,500
So this will come to market consumer.

72
00:05:14,510 --> 00:05:20,870
So this is not a concrete glass, concrete glasses every time the consumer or local Q consumer.

73
00:05:21,320 --> 00:05:29,340
So it will go to either one of them, whichever it is any of it, and that will hand it over to that

74
00:05:29,360 --> 00:05:35,480
will end over the serialized order to order consumer or the consumer will convert the serialized order

75
00:05:35,480 --> 00:05:43,040
into another object, and then it will give it to order post-processing, which will actually do the

76
00:05:43,040 --> 00:05:46,510
job of creating the order and resolving the inventory.

77
00:05:47,420 --> 00:05:53,780
If asynchronous processing was not enabled, then we would have directly given order to order post processor.

78
00:05:54,790 --> 00:05:59,830
So this is how the code is structured, so he can see this over here.

79
00:06:00,160 --> 00:06:04,270
So this is also this implementation and all these processes.

80
00:06:04,810 --> 00:06:11,360
So this order preprocessor in order post-process, they are there in this processor package.

81
00:06:11,860 --> 00:06:20,290
These preprocessor in post processor will send or receive the order from Q and that all that code is

82
00:06:20,330 --> 00:06:20,950
regarded.

83
00:06:20,960 --> 00:06:24,160
It related to that is that it q package.

84
00:06:24,760 --> 00:06:30,310
So this Q package has two games of Q Local Q package and every time Q Q package.

85
00:06:31,700 --> 00:06:40,790
But the interface for dealing with it every time you had local AMCU is Amcu produce that Amcu consumer,

86
00:06:41,270 --> 00:06:43,260
which is what we saw here.

87
00:06:43,610 --> 00:06:48,530
So this Amcu consumer and Amcu produce it is.

88
00:06:48,950 --> 00:06:53,750
These are the interfaces and these interfaces are implemented either by an open bank or every time you.

89
00:06:54,910 --> 00:07:01,390
Now we have disorder consumer in order to producer, as we see over here, this auto producer deals

90
00:07:01,390 --> 00:07:03,240
with them to produce it.

91
00:07:03,850 --> 00:07:06,250
So this auto producer?

92
00:07:08,020 --> 00:07:16,740
Since the order, by transforming this order, so this order entity, it's sensitive to the messaging

93
00:07:16,990 --> 00:07:19,480
by converting into adjacent methods.

94
00:07:20,200 --> 00:07:28,420
And if we see this, this is not an order entity over here, we have converted this order into an MQ

95
00:07:28,420 --> 00:07:28,780
order.

96
00:07:29,410 --> 00:07:35,290
Now we have converted this order into an empty order that is, look at this and you order glass.

97
00:07:36,100 --> 00:07:38,530
So this is a rebuttal glass on top of order.

98
00:07:38,530 --> 00:07:44,290
So it has got an order inside this, which is what we really want to hold on to this glass.

99
00:07:45,320 --> 00:07:51,800
Then we have this authorization or headed this authorization, Hader will be used by it.

100
00:07:52,790 --> 00:07:55,700
Let's go back to consumer flow.

101
00:07:56,180 --> 00:08:03,950
So once this civilized order is DC released by our consumer, it will have to call inventory service.

102
00:08:03,970 --> 00:08:11,120
When this order goes to or the post processor, it will need to call inventory service and to call inventory

103
00:08:11,120 --> 00:08:11,530
service.

104
00:08:11,540 --> 00:08:13,070
It will need authorization.

105
00:08:13,820 --> 00:08:20,380
So everywhere, wherever we were making rest was we were passing authorization hairdo along with A.B..

106
00:08:20,750 --> 00:08:23,030
But here there is no HGTV protocol.

107
00:08:23,030 --> 00:08:25,060
We have received this message from messaging.

108
00:08:25,850 --> 00:08:32,150
So what we have done is that the authorization that will be required to call the Nest Full Inventory

109
00:08:32,150 --> 00:08:37,380
military service will be put in to order object to sell this MQ.

110
00:08:37,520 --> 00:08:43,260
That object so that we can use that authorization heard it to call messaging queue.

111
00:08:44,060 --> 00:08:47,920
So that is what we have stored in your head.

112
00:08:48,440 --> 00:08:53,400
This authorization, and the other thing is that we need to resume.

113
00:08:53,420 --> 00:08:55,160
We have already gone through tracing.

114
00:08:55,880 --> 00:09:01,330
So when we are tracing create order request, let's go to the publisher.

115
00:09:01,790 --> 00:09:07,100
So this is a part of creating a workflow to create our workflow is being placed.

116
00:09:07,430 --> 00:09:14,690
So when we publish this message to the messaging queue, then our press is lost.

117
00:09:15,110 --> 00:09:23,690
So when the execution resumes from message queue, sending the message back to the order service, which

118
00:09:23,690 --> 00:09:25,340
is actually a consumer also.

119
00:09:25,790 --> 00:09:34,130
So from here, we want to resume our trees and we can resume arteries only if we have the context.

120
00:09:34,520 --> 00:09:41,690
So all the press context related information that is required to resume the trace is stored in this

121
00:09:41,690 --> 00:09:42,530
particular map.

122
00:09:42,830 --> 00:09:48,110
And this is something that we also discussed when we discussed yaga tracing.

123
00:09:48,530 --> 00:09:55,820
So these two things, additional things we are putting into and order apart from the mean order object.

124
00:09:56,420 --> 00:10:02,990
So this is what is that important and that is why we have created this extra entity over here.

125
00:10:03,770 --> 00:10:10,040
So this is pretty much how the order code is structured and it does asynchronous processing.

126
00:10:10,520 --> 00:10:16,790
Before we finish this topic, that is one this last bit of how we are creating this producer and consumer

127
00:10:16,790 --> 00:10:17,380
objects.

128
00:10:17,390 --> 00:10:21,710
For that, we have to go to order new configuration file.

129
00:10:22,100 --> 00:10:23,830
So this has been a messaging queue.

130
00:10:23,840 --> 00:10:24,950
Configuration is dead.

131
00:10:25,610 --> 00:10:28,280
Here we are creating two kinds of objects.

132
00:10:28,880 --> 00:10:35,090
One is MQ producer kind of object and other one is MQ consumer kind of objects.

133
00:10:35,840 --> 00:10:42,230
The reason we are creating this in the configuration is because depending upon what is the queue type,

134
00:10:42,770 --> 00:10:45,110
we will create the type of producer.

135
00:10:45,110 --> 00:10:49,640
So if it turns off David, every time, kill our producer will be every time you produce it.

136
00:10:50,030 --> 00:10:52,700
Otherwise, it will be local and you produce it.

137
00:10:52,940 --> 00:10:56,120
So similar stuff is happening for Amcu consumer as well.

138
00:10:56,510 --> 00:11:02,210
So this object, depending upon what is the type of this environment variable, will be there every

139
00:11:02,210 --> 00:11:09,860
time consumer or local, and your consumer or consumer will have to do one more thing that will have

140
00:11:09,860 --> 00:11:17,240
to start a consumer trend which can actually listen to the rabbit and you so will have to go to it every

141
00:11:17,240 --> 00:11:18,410
time to implementation.

142
00:11:20,110 --> 00:11:24,850
OK, so this is that every time to consumer and here.

143
00:11:26,350 --> 00:11:34,060
We are calling this method start consumer, which will create a callback of callback of this glass is

144
00:11:34,060 --> 00:11:37,360
a wrapper class that every time to call back, which we have created over the.

145
00:11:38,500 --> 00:11:46,570
This class implements deliver call of Rabbit and you, and it implements a method called handle method.

146
00:11:46,840 --> 00:11:53,650
So this is actually the callback method handle is the is that method and this method, all it does is

147
00:11:54,190 --> 00:12:04,510
it takes this consumer object and hence over the order object or the message object to order consumer

148
00:12:04,510 --> 00:12:06,670
for processing the order.

149
00:12:07,120 --> 00:12:11,590
Now, when we call the start consumer, this will create that callback.

150
00:12:11,890 --> 00:12:18,010
It will put this order consumer to do that so that it can make use of this for the consumer, for order

151
00:12:18,010 --> 00:12:18,560
processing.

152
00:12:18,910 --> 00:12:24,490
And it will register this callback with the messaging queue channel.

153
00:12:24,910 --> 00:12:30,760
So whenever there is a message from Rabbit and you rabbit and you will call this particular callback

154
00:12:31,450 --> 00:12:37,150
and this callback will actually use disorder consumer object to process this order.

155
00:12:37,840 --> 00:12:43,210
So this is how the complete asynchronous workflow is working with Rabbit.

156
00:12:43,210 --> 00:12:48,790
And you know this, we are actually ready to run it every time queue in our system.

157
00:12:48,790 --> 00:12:50,170
So let's go ahead and do that.
