WEBVTT
1
00:00:01.410 --> 00:00:07.260
In order to implement Yeager in our system, the first thing that we will have to do is we'll have to

2
00:00:07.260 --> 00:00:10.500
instrument our components with planes library.

3
00:00:10.510 --> 00:00:13.950
So be it our web component or be it services.

4
00:00:14.640 --> 00:00:19.860
We'll have to modify the code so that we can collect trace information.

5
00:00:19.860 --> 00:00:25.170
These client libraries will be able to collect this information now.

6
00:00:25.170 --> 00:00:31.860
Along with this, we will have to install or host the race agents on the same machine.

7
00:00:31.860 --> 00:00:33.210
So let's say this is auto service.

8
00:00:33.570 --> 00:00:37.170
It's running on a machine and we have instrumented it.

9
00:00:37.410 --> 00:00:40.380
So this client library will send this information.

10
00:00:40.380 --> 00:00:46.440
Whatever it is collecting, this library will send it to a trace agent, which will have to be on the

11
00:00:46.440 --> 00:00:52.800
same machine so that we can avoid any delays of the remote code.

12
00:00:53.520 --> 00:00:58.740
So it is important that they are installed or hosted on the same machine because that's how they are

13
00:00:58.740 --> 00:00:59.700
being architected.

14
00:01:00.300 --> 00:01:02.430
These agents are pretty lightweight.

15
00:01:02.670 --> 00:01:11.220
Their job is just to collect the trace from their local components and their can buffer this log for

16
00:01:11.220 --> 00:01:11.850
a little while.

17
00:01:12.150 --> 00:01:17.400
And ultimately, they have to send this law to a collector.

18
00:01:17.400 --> 00:01:25.740
So all these service components, they will buffer these logs a little bit and they will send these

19
00:01:25.740 --> 00:01:35.970
logs to a collector, which is where we are going to connect all the pieces that we are getting from

20
00:01:36.150 --> 00:01:36.980
press agents.

21
00:01:37.560 --> 00:01:44.100
So presidents will send all the trace statements to collector, collector will index or will connect

22
00:01:44.100 --> 00:01:46.740
all this information to create a cohesive trace.

23
00:01:47.370 --> 00:01:51.960
And that information will be stored in a database.

24
00:01:51.960 --> 00:01:54.630
And that database can be ElasticSearch.

25
00:01:54.900 --> 00:01:55.530
It can be.

26
00:01:55.530 --> 00:01:58.320
Cassandra Yeager supports both of them.

27
00:01:58.680 --> 00:02:05.010
In our case, we are as it is working with ElasticSearch, so we have gone ahead with ElasticSearch

28
00:02:05.010 --> 00:02:06.600
for storing this information.

29
00:02:07.710 --> 00:02:14.550
Now, Yeager provides another component called Yegor Query, which can connect to ElasticSearch and

30
00:02:14.550 --> 00:02:21.420
which can look into this Yeager database that we would have created in ElasticSearch, and it can explore

31
00:02:21.420 --> 00:02:26.670
stack trace information to a browser interface.

32
00:02:27.150 --> 00:02:30.540
So that is what we are going to implement in our system.

33
00:02:30.990 --> 00:02:33.840
So these are the components that we will need to implement.

34
00:02:34.170 --> 00:02:38.010
We will first have two instruments are system components.

35
00:02:38.370 --> 00:02:40.140
We need a president.

36
00:02:40.590 --> 00:02:47.910
The only thing the way we will deviate from this architecture in our case is that here we have precedents

37
00:02:47.910 --> 00:02:55.470
shown for each component, but we will actually just have one test component because all these components,

38
00:02:55.770 --> 00:02:58.650
they are sitting on the same machine in our case right now.

39
00:02:59.010 --> 00:03:04.380
But when we take this to a production scale later, we will have these separate transitions when we

40
00:03:04.380 --> 00:03:05.430
do it and when it is.

41
00:03:05.430 --> 00:03:13.410
But for now, because we are doing it on a single machine, we will just have a single procedure and

42
00:03:13.410 --> 00:03:19.640
all these components, they will say and trace information to this particular precision.

43
00:03:20.160 --> 00:03:27.630
So once all this information is there and present, this information will be sent to Yegor Collector.

44
00:03:27.840 --> 00:03:30.510
So this is another component that we are going to implement.

45
00:03:30.840 --> 00:03:32.310
We already have ElasticSearch.

46
00:03:32.610 --> 00:03:39.460
We need to make this collector Yeager collector, aware of that ElasticSearch so that it can store database

47
00:03:39.480 --> 00:03:40.740
data in ElasticSearch.

48
00:03:41.130 --> 00:03:44.280
And then we will also configure Yegor query.

49
00:03:44.550 --> 00:03:51.210
That's another component, and we will make it aware of ElasticSearch, and thus we can expose this

50
00:03:51.780 --> 00:03:55.560
distributed trace information to a browser interface.
