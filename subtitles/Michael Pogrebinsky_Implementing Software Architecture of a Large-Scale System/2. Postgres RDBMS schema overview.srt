1
00:00:01,450 --> 00:00:06,400
So here is the schema that we will implement in our PostgreSQL database.

2
00:00:07,060 --> 00:00:14,560
So we have limited tables with a limited number of columns, which is just enough for implementing the

3
00:00:14,560 --> 00:00:16,330
basic functionality that we need.

4
00:00:16,900 --> 00:00:20,560
Remember, we do not want to create too much of business complexity.

5
00:00:20,560 --> 00:00:25,570
We just want enough complexity to simulate all the architectural problems.

6
00:00:26,260 --> 00:00:28,900
So let's take a quick look at the schema that we have.

7
00:00:29,410 --> 00:00:37,120
So our authorization service basically works with user or table wherein we have ID, username and password

8
00:00:37,300 --> 00:00:39,670
of a particular user primary.

9
00:00:39,670 --> 00:00:40,600
He's the IED.

10
00:00:40,870 --> 00:00:46,330
Then we have user all table here against an ID store also.

11
00:00:46,750 --> 00:00:56,020
One user can have multiple rules, so user all tables defines that, and these two tables are only touched

12
00:00:56,110 --> 00:00:58,000
by authorization service.

13
00:00:58,000 --> 00:01:03,400
So no other service they product inventory will ever go in to authorization tables.

14
00:01:03,520 --> 00:01:06,400
Now that brings clear card segregation for us.

15
00:01:06,910 --> 00:01:11,110
So later on, if you want to separate databases, that's going to help us.

16
00:01:11,440 --> 00:01:14,680
In any case, from design perspective.

17
00:01:14,680 --> 00:01:21,790
Also, it is not a good design if other services, other business services start going in to the tables

18
00:01:21,790 --> 00:01:23,860
that they have nothing to do with.

19
00:01:24,520 --> 00:01:29,620
So that's table for authorization service now for product service.

20
00:01:29,650 --> 00:01:34,420
We have product table wherein we have product I.D. product name in its price.

21
00:01:35,110 --> 00:01:40,270
Then there is an inventory table, which is accessed only by inventory service.

22
00:01:40,720 --> 00:01:45,130
So here we have product I.D. and how much quantity we have.

23
00:01:45,550 --> 00:01:52,840
If we sell some product, then we deduct the quantity in this table and that is done by the inventory

24
00:01:52,840 --> 00:01:53,410
service.

25
00:01:54,310 --> 00:01:57,310
Now the other two services that we have are card.

26
00:01:57,310 --> 00:02:04,240
So this is an artist service card service we have physically hosted in order service instance.

27
00:02:04,690 --> 00:02:10,150
But these are two separate services and we can easily host them separately also.

28
00:02:10,150 --> 00:02:18,040
But for convenience, we have put card service along with orders of is now in card service.

29
00:02:18,520 --> 00:02:26,230
We have a is and for each card I.D. we can have multiple card line.

30
00:02:26,230 --> 00:02:30,190
So basically we can store multiple products in that.

31
00:02:30,190 --> 00:02:36,640
So each card line represents our product I.D., product I.D. along with the quantity.

32
00:02:37,540 --> 00:02:42,080
So that's card service tables, then order service tables or a service.

33
00:02:42,100 --> 00:02:48,520
What it does is it takes card and card line tables and it converts them into order.

34
00:02:48,940 --> 00:02:56,830
So orders are structured as order table for header level information in case of PostgreSQL database

35
00:02:56,830 --> 00:03:00,130
or table is actually named as auto master.

36
00:03:00,730 --> 00:03:05,650
It is because order is a keyword in this school so we can't use.

37
00:03:06,100 --> 00:03:11,210
We can't name a table as order, so the name of the the actual name of the table is or the master.

38
00:03:12,040 --> 00:03:15,040
But it actually represents order entity.

39
00:03:15,610 --> 00:03:18,760
So here we have header level information.

40
00:03:19,210 --> 00:03:20,500
Who has pages, the order?

41
00:03:20,500 --> 00:03:23,740
What is the order in the date of purchase and the status of the order?

42
00:03:24,310 --> 00:03:29,740
The order line level details, meaning the product level details what products we have pages, what

43
00:03:29,740 --> 00:03:31,030
quantity we have, pages.

44
00:03:31,720 --> 00:03:35,230
Those details are there in order lined table.

45
00:03:36,190 --> 00:03:40,720
So these tables, they have foreign keys to related tables.

46
00:03:40,720 --> 00:03:48,760
So let's set this order table has got foreign key to the user ID, which is dead in use at our table.

47
00:03:49,390 --> 00:03:59,530
Now we see this if we bought this data or schema to another sequel database, these foreign key constraints,

48
00:03:59,830 --> 00:04:01,390
they will go away.

49
00:04:01,870 --> 00:04:08,740
So we'll have to make sure to the application itself that the integrity of the data is maintained.

50
00:04:09,800 --> 00:04:17,030
There are a few things which we will again lose if we go to nautical databases, and the most important

51
00:04:17,030 --> 00:04:20,600
thing that we lose is this kind of index.

52
00:04:21,500 --> 00:04:26,440
So there are two kinds of indexes over here, so there are lots of primary keys over here.

53
00:04:26,460 --> 00:04:28,160
Each table has got a primary key.

54
00:04:28,970 --> 00:04:35,870
When we declare a column as a column or multiple columns as part of primary key, that creates a unique

55
00:04:35,870 --> 00:04:43,790
index associated with that primary key when we have to search a table and that search is not based on

56
00:04:43,790 --> 00:04:44,610
primary key.

57
00:04:44,630 --> 00:04:47,390
We have to create secondary indexes.

58
00:04:48,020 --> 00:04:50,370
Now we go to nautical databases.

59
00:04:50,870 --> 00:04:53,060
That is a concept of primary key.

60
00:04:53,270 --> 00:04:55,160
It may not be called as primary keeper.

61
00:04:55,760 --> 00:05:02,690
Primary key concept is there, so each record has got a key in which we can call it is primary key.

62
00:05:03,740 --> 00:05:11,300
But they do not have a similar concept of a secondary index night secondary index in in an hour.

63
00:05:11,780 --> 00:05:13,340
We can create on any column.

64
00:05:13,850 --> 00:05:21,860
So if in our query we are doing, we are filtering our data or searching our data based on some column

65
00:05:21,860 --> 00:05:23,870
values which are not part of primary key.

66
00:05:24,230 --> 00:05:26,270
Then we can create indexes for them.

67
00:05:26,630 --> 00:05:29,300
Now that's possible in our devices.

68
00:05:29,750 --> 00:05:36,530
But if you want to do it in NoSQL databases, then there are features to do that.

69
00:05:36,530 --> 00:05:39,500
But that's a very limited functionality.

70
00:05:39,890 --> 00:05:41,480
It doesn't scale very well.

71
00:05:41,900 --> 00:05:50,270
You can create those indexes sometimes in the as local indexes and in certain instances, or you can

72
00:05:50,270 --> 00:05:50,620
do.

73
00:05:51,740 --> 00:05:58,490
You can create global index secondary indexes as well, but that will require you to scatter and gather

74
00:05:58,490 --> 00:05:59,620
all the data.

75
00:05:59,630 --> 00:06:05,210
So bottom line is they don't perform very well or they are not adequate.

76
00:06:05,780 --> 00:06:14,120
So the way they work in BMWs, we cannot do it in no secret databases so that we have to design our

77
00:06:14,120 --> 00:06:21,290
schema in such a way that most of these searches are done through primary key index itself.

78
00:06:21,590 --> 00:06:29,870
So our schema has to bear in mind that what is what will be our assessment and how our queries are going

79
00:06:29,870 --> 00:06:30,800
to look like?

80
00:06:32,070 --> 00:06:39,420
But if you do not want to get into their complexity and your data limitation in your data is not going

81
00:06:39,420 --> 00:06:41,390
to be extremely huge, then.

82
00:06:41,400 --> 00:06:43,110
Ari BMI's is the perfect choice.

83
00:06:43,380 --> 00:06:46,650
You can you have flexibility of creating schema.

84
00:06:46,920 --> 00:06:48,650
You can create lots of indexes.

85
00:06:48,660 --> 00:06:55,050
You can do analytics on this, although you won't do that on an old deep database, but it is still

86
00:06:55,050 --> 00:06:58,490
possible and you can do transactions on this.

87
00:06:58,490 --> 00:06:58,820
So.

88
00:06:59,130 --> 00:07:04,230
That's the reason we are going to start with IBM's database post-crisis current.

89
00:07:04,240 --> 00:07:11,910
And then later on, we will also plug in Cassandra just to understand the complexities and the features

90
00:07:11,910 --> 00:07:13,890
of no secret databases.
