1
00:00:01,360 --> 00:00:07,150
OK, with that, we have simplified the configuration of our clients if they have to communicate to

2
00:00:07,150 --> 00:00:07,720
our backend.

3
00:00:07,900 --> 00:00:14,740
They can directly communicate with gateway service and that's the only service that they need to know

4
00:00:14,740 --> 00:00:15,070
about.

5
00:00:15,910 --> 00:00:23,050
Now let's turn our attention to a gateway service, or let's help some other clients which wants to

6
00:00:23,050 --> 00:00:24,560
communicate with other services.

7
00:00:24,560 --> 00:00:29,470
So in this case, gaping service wants to communicate with other services that are there in the system.

8
00:00:29,770 --> 00:00:34,900
And then there will be some services in the system, which will also need to take help of other services.

9
00:00:34,900 --> 00:00:41,680
So let's say this order service, when it is creating in order for a certain product, it needs to know

10
00:00:41,680 --> 00:00:46,960
if inventory is available for that product, so it needs to communicate with inventory service.

11
00:00:47,680 --> 00:00:54,400
So for that, this also needs to know the configuration related to inventory service on which host and

12
00:00:54,400 --> 00:00:57,100
port inventory service is available.

13
00:00:57,850 --> 00:01:06,490
So these are the two lines that need some kind of configuration to know about the host and port information

14
00:01:06,490 --> 00:01:10,480
of all these services that they need to access.

15
00:01:11,080 --> 00:01:16,330
Now that configuration, if we do a static configuration, it will look like this.

16
00:01:16,340 --> 00:01:21,250
So here we'll have to tell gateway service to a static configuration.

17
00:01:21,250 --> 00:01:25,930
That authorization service is located excellence or host and port.

18
00:01:26,260 --> 00:01:29,650
Similarly, product service or service and inventory service.

19
00:01:30,460 --> 00:01:38,530
So this kind of static routing configuration will do if we have small number of services and they have

20
00:01:38,540 --> 00:01:42,070
small number of instances, so this will be perfectly fine.

21
00:01:42,700 --> 00:01:51,400
There won't be any issues, but if we have, let's say, lots of services and all of these services

22
00:01:51,400 --> 00:01:58,990
have lots of instances which will be the case with any large scale system, then there will be a lot

23
00:01:58,990 --> 00:02:02,610
of services and lot of service instances to reach out to.

24
00:02:02,620 --> 00:02:06,730
So in this case, that's a gateway service wants to reach out to product service.

25
00:02:07,030 --> 00:02:11,350
Here there are three instances two for it to know about.

26
00:02:11,740 --> 00:02:18,310
Now, if we look at this static configuration by just expanding each of the service to three instances,

27
00:02:18,730 --> 00:02:26,650
then this static routing configuration, which was earlier looking pretty simple like this, has expanded

28
00:02:26,650 --> 00:02:35,260
to pretty large configuration, and this can become extremely complex as new instances are added and

29
00:02:35,260 --> 00:02:35,800
removed.

30
00:02:36,460 --> 00:02:42,740
So this static routing configuration will not be suitable for a large scale system.

31
00:02:42,820 --> 00:02:48,430
This is going to be a global problem, and we will see that during the demonstration that how we can

32
00:02:48,850 --> 00:02:50,200
take care of this configuration.

33
00:02:50,200 --> 00:02:52,690
But for now, the we can take it.

34
00:02:52,900 --> 00:02:57,190
This has the configuration will become as complex as this.

35
00:02:58,270 --> 00:03:06,580
So in order to sell this configuration problems for our clients, in this case, our clients of this

36
00:03:06,580 --> 00:03:13,690
service and order service, if you want to simplify that, we make use of discovery service.

37
00:03:14,170 --> 00:03:19,270
So what we can do is we can add a new component to our system in this case.

38
00:03:19,300 --> 00:03:22,540
We have aided discovery service now.

39
00:03:22,540 --> 00:03:31,150
Our discovery service does is that it provides dynamic configuration for the host and board information

40
00:03:31,150 --> 00:03:33,400
of various services.

41
00:03:33,400 --> 00:03:35,890
So let's have our authorization service.

42
00:03:35,890 --> 00:03:42,580
When it comes up, we'll have to write a little amount of code and we will see that it's pretty easy.

43
00:03:42,580 --> 00:03:48,400
It's very trivial to write that book, but some code has to be written for each service.

44
00:03:49,030 --> 00:03:54,250
And by virtue of that code, with the help of that code, what will happen is later, when this authorization

45
00:03:54,250 --> 00:04:01,180
service in the stands is coming up, it will register itself with discovery service, so it will need

46
00:04:01,180 --> 00:04:04,150
to know about where discovery services are.

47
00:04:04,840 --> 00:04:11,530
So as soon as an instance comes up, it will let Discovery Service know that it has come up on so-and-so

48
00:04:11,530 --> 00:04:13,510
host and so and so forth.

49
00:04:14,080 --> 00:04:22,600
And periodically it will also update discovery service with its heartbeat, saying that I am alive so

50
00:04:22,600 --> 00:04:28,540
that their discovery service always knows what services are available on our coast and port.

51
00:04:28,750 --> 00:04:30,820
And if they are alive or not.

52
00:04:31,090 --> 00:04:39,160
So similarly, every service can do that and that their discovery service will have the complete information

53
00:04:39,160 --> 00:04:43,300
of all the services that are available on service instances and their health.

54
00:04:44,080 --> 00:04:48,700
Now this is something that get this service can take advantage of.

55
00:04:49,720 --> 00:04:53,500
There's something even broader service can also take advantage of.

56
00:04:53,500 --> 00:04:59,260
It can communicate with discovery service who know where inventory service is located.

57
00:05:00,010 --> 00:05:05,110
So this makes our configuration job extremely simple.

58
00:05:05,920 --> 00:05:14,950
Now, all we have to do is we have to add some code to our services and we have to bring up this discovery

59
00:05:14,950 --> 00:05:15,540
service.

60
00:05:15,550 --> 00:05:17,200
And this is all pretty simple.

61
00:05:17,740 --> 00:05:22,510
So let's see in this demo how we can make this happen.

62
00:05:22,870 --> 00:05:29,980
But before we go there, let's just also take a look at the different options that are available to

63
00:05:29,980 --> 00:05:32,620
us for discovery service.

64
00:05:33,760 --> 00:05:39,040
Now for Discovery service, there are a lot of out-of-the-box options available to us.

65
00:05:39,280 --> 00:05:43,720
Some options are so little we're going to have high ship jobs council discovery service.

66
00:05:43,720 --> 00:05:48,850
We can have Netflix, Eureka Discovery Service and there are some more.

67
00:05:50,020 --> 00:05:58,060
For us, it's very simple because we are using Netflix tech and it provides a lot of solutions that

68
00:05:58,060 --> 00:05:59,530
microservices will need.

69
00:05:59,950 --> 00:06:03,220
So we have gone ahead with Netflix.

70
00:06:03,610 --> 00:06:05,500
Eureka Discovery Service.

71
00:06:06,280 --> 00:06:14,380
And because this is built on top of Spring Cloud, that will make it very easy for us to integrate this

72
00:06:14,380 --> 00:06:16,840
discovery service into our system.

73
00:06:17,220 --> 00:06:23,590
Now, all our services are already using spring framework and because we are using spring framework

74
00:06:23,950 --> 00:06:29,710
and this Netflix Utica is based on spring framework, it makes this integration much easier.

75
00:06:30,100 --> 00:06:34,300
Otherwise, we could have also chosen any other discovery service.

76
00:06:34,320 --> 00:06:37,600
There is nothing fancy about Netflix Yureka service.

77
00:06:37,930 --> 00:06:44,620
There can be some availability differences between different services, as in Let's say, if you have

78
00:06:44,620 --> 00:06:49,480
a cluster of discovery, services in a few instances are not available.

79
00:06:49,900 --> 00:06:55,900
Then different services can choose different kind of availability so they can choose consistency over

80
00:06:55,900 --> 00:06:59,650
availability or they can choose availability or what consistency.

81
00:07:00,490 --> 00:07:07,870
But in our case, what we want is that for our services to be highly available, we do not want our

82
00:07:07,870 --> 00:07:10,150
discovery service to be a single point of failure.

83
00:07:10,780 --> 00:07:16,630
We want our discovery service to be highly available because if our discovery service is not available

84
00:07:16,630 --> 00:07:21,430
at great risk, others will not be able to download requests to our clients.

85
00:07:21,970 --> 00:07:28,060
So if adversaries is not able to do that, pretty much all our plans, like our mobile application or

86
00:07:28,060 --> 00:07:30,490
web application, will not be able to access our system.

87
00:07:30,940 --> 00:07:33,460
Our system will be unavailable.

88
00:07:33,460 --> 00:07:35,520
So this is a very critical component.

89
00:07:35,530 --> 00:07:42,550
So in that sense, also Netflix Yureka is a good choice because it prefers availability over consistency,

90
00:07:43,210 --> 00:07:44,560
so that's a very good choice.

91
00:07:44,920 --> 00:07:51,520
And now not see how we can very easily integrate this service into our system.
