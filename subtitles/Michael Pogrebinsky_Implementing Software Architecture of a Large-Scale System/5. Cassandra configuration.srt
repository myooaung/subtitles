1
00:00:01,170 --> 00:00:05,580
Let's connect to our workstation to run our system with Cassandra database.

2
00:00:10,980 --> 00:00:11,330
OK.

3
00:00:11,490 --> 00:00:12,300
We are connected.

4
00:00:13,110 --> 00:00:21,150
So let's first look at how we have created Cassandra image, so even going to Dr. Cassandra directly.

5
00:00:21,780 --> 00:00:23,370
These are the historical files.

6
00:00:23,370 --> 00:00:27,190
And then within that there is an image directly there.

7
00:00:27,190 --> 00:00:29,570
There there are quite a few fighters.

8
00:00:30,210 --> 00:00:33,990
I'll explain you the ones which are most important for us to understand.

9
00:00:34,020 --> 00:00:37,000
First, let's look at the darker side.

10
00:00:38,100 --> 00:00:41,130
Don't go to find what we are doing is we are.

11
00:00:42,970 --> 00:00:49,900
Getting Cassandra image from Docker Iris Docker registry, then we are installing side doors, which

12
00:00:49,900 --> 00:00:57,940
can help us for debugging, and then we are copying sardine files to Cassandra image from our local

13
00:00:57,940 --> 00:01:01,930
directory and these files will be helpful for us for creating schema.

14
00:01:01,930 --> 00:01:02,980
So this creates schema.

15
00:01:03,190 --> 00:01:12,010
Sequel File will create schema insert data will insert some data into the database with which we can

16
00:01:12,010 --> 00:01:19,540
start with in Docker, and three point second datasets will actually run just after the Kassandra container

17
00:01:19,540 --> 00:01:20,000
comes up.

18
00:01:20,020 --> 00:01:21,310
This file will be launched.

19
00:01:22,350 --> 00:01:29,520
Because we have specified this file is darker and deep learning, so this this this is this is our entry

20
00:01:29,520 --> 00:01:37,740
point and this will call this particular file in this particular file after running these schema creation

21
00:01:37,740 --> 00:01:38,250
scripts.

22
00:01:38,670 --> 00:01:45,370
It will called the normal at entry point or such file, which comes along with this ongoing image.

23
00:01:45,390 --> 00:01:52,020
So whatever default, Cassandra has to run little to bring up the database and all that stuff that will

24
00:01:52,020 --> 00:01:54,680
be done by this particular regular.

25
00:01:56,560 --> 00:02:02,380
OK, so we'll see how it does not guarantee point second order sketchbooks in a week.

26
00:02:03,340 --> 00:02:09,490
Then there are the jar file that we have copied for Prometheus to work.

27
00:02:09,880 --> 00:02:19,150
So these are Prometheus related files that we have copy, and that is pretty much what we have in this

28
00:02:19,480 --> 00:02:20,530
Cassandra image.

29
00:02:20,570 --> 00:02:23,560
So we have just copied certain files.

30
00:02:23,560 --> 00:02:31,120
And the main thing that we have cooperate and just tell you is this Docker entry point search and those

31
00:02:31,210 --> 00:02:33,310
schema and data in session scripts.

32
00:02:34,240 --> 00:02:43,300
So what this does is it looks for this environment variable replication factor if it is not set to anything

33
00:02:43,300 --> 00:02:44,470
that it was set to one.

34
00:02:45,340 --> 00:02:50,650
We would like to set this to trade because we are going to run Cassandra Cluster with three nodes.

35
00:02:50,650 --> 00:02:54,430
We want our data to be replicated, at least on three.

36
00:02:54,430 --> 00:03:03,130
Not so that if we lose one node, our data is still there on two nodes, and that's sure that is a quorum.

37
00:03:03,700 --> 00:03:05,710
So that will allow us to do transaction.

38
00:03:05,710 --> 00:03:12,850
And we will see that in a bit that even when we lose a node from Cassandra cluster, we'll still be

39
00:03:12,850 --> 00:03:15,730
able to read and write to Cassandra Cluster.

40
00:03:16,390 --> 00:03:19,570
OK, then we have Cassandra seed instance.

41
00:03:19,570 --> 00:03:22,600
We want only one instance to create schema.

42
00:03:23,170 --> 00:03:26,050
We do not want all instances to create schema.

43
00:03:26,380 --> 00:03:34,990
So this is an indication to the to a container, if it is, if it is supposed to create a schema or

44
00:03:34,990 --> 00:03:35,260
not.

45
00:03:35,260 --> 00:03:41,680
So when we define container definition, we will see that one of the container, so we will create three

46
00:03:41,680 --> 00:03:44,200
containers for three Cassandra nodes.

47
00:03:44,530 --> 00:03:50,950
So Cassandra, one, Cassandra, two, and Cassandra D, and one of them will be referred to as schema

48
00:03:50,950 --> 00:03:51,880
seed instance.

49
00:03:52,420 --> 00:03:58,420
In case we do not specify that, then the default name is Cassandra, and this is generally useful in

50
00:03:58,420 --> 00:03:59,380
the test systems.

51
00:03:59,380 --> 00:04:02,710
But this particular statement is not useful right now.

52
00:04:04,230 --> 00:04:12,390
Then there is a command for Cassandra Cline, who connect with Cassandra, so so that Cassandra Cline

53
00:04:12,390 --> 00:04:19,350
can run this script, create Schema Dirt sequel on Cassandra Server or one of the Cassandra nodes.

54
00:04:20,070 --> 00:04:30,390
So what this script will try to do is it will try to connect with Cassandra server process, and once

55
00:04:30,390 --> 00:04:33,690
it is connected, it will use this command.

56
00:04:34,440 --> 00:04:38,130
This particular command, which is defined over here.

57
00:04:39,380 --> 00:04:41,330
So that schema gets created.

58
00:04:42,460 --> 00:04:49,420
Now, the thing that we need to watch out over here is that while Cassandra database is coming up,

59
00:04:49,840 --> 00:04:55,090
this may not be able to connect till it doesn't come up fully, so it will run in a loop.

60
00:04:55,600 --> 00:05:04,030
And once the Cassandra database comes up, then this sequel sequel's edge line will be able to connect

61
00:05:04,030 --> 00:05:06,250
to that, and it will be able to create schema.

62
00:05:06,880 --> 00:05:12,040
So you can take a look at this, what exactly it does, and you can look at the demonstration, how

63
00:05:12,040 --> 00:05:12,640
this works.

64
00:05:12,640 --> 00:05:15,340
So this is how we'll be able to create schema.

65
00:05:15,340 --> 00:05:17,920
So this is an automation for creating schema.

66
00:05:18,400 --> 00:05:20,110
There's nothing specific to Cassandra.

67
00:05:20,740 --> 00:05:24,750
This has just the convenience of creating schema ones.

68
00:05:24,760 --> 00:05:26,650
Cassandra instances comes up.

69
00:05:28,750 --> 00:05:32,080
Then the last thing that is happening over here is.

70
00:05:33,640 --> 00:05:42,610
That we are launching docket entry point of the Cassandra image that we downloaded from Docker registry,

71
00:05:42,820 --> 00:05:46,840
so whatever it is supposed to do, we will let you do that.

72
00:05:46,840 --> 00:05:52,360
But before that, we will force her to run this particular function that we have defined over here.

73
00:05:52,360 --> 00:05:59,830
And this is where we are launching this function and we are calling this function only if the host name

74
00:05:59,830 --> 00:06:02,110
matches that schema seed instance.

75
00:06:02,620 --> 00:06:09,760
So in our case, Cassandra, one instance would be seed instance, and this is where we want to create

76
00:06:09,760 --> 00:06:10,480
this schema.

77
00:06:11,170 --> 00:06:14,770
So let's just go ahead and see that, and that will make it more clear.

78
00:06:15,520 --> 00:06:18,520
So once we go to container definitions, this will be more clear.

79
00:06:18,530 --> 00:06:20,350
So let's move from here.

80
00:06:20,680 --> 00:06:22,930
This was about Cassandra image.

81
00:06:23,560 --> 00:06:28,780
Now let's go to the container definition, which will be dead in demos directly.

82
00:06:30,190 --> 00:06:34,420
Right now, we are going into this demo 11 distributed DB.

83
00:06:35,290 --> 00:06:36,190
So let's go there.

84
00:06:38,350 --> 00:06:46,000
So apart from other files, what we need to pay attention over here is DOD Environment File here.

85
00:06:46,870 --> 00:06:48,580
Database type is equal.

86
00:06:48,790 --> 00:06:54,850
So this is an indication to our services that what kind of database we are using.

87
00:06:55,930 --> 00:06:59,320
Then the other environment variable is Cassandra Horse.

88
00:06:59,710 --> 00:07:04,780
So we have given prehistory here Cassandra one, Cassandra, two, and Cassandra, three.

89
00:07:05,170 --> 00:07:10,630
So these will be the horse and our services can connect to any of those.

90
00:07:11,110 --> 00:07:15,490
So let's say if Cassandra two goes down, they can work with Cassandra, one, and Cassandra, three

91
00:07:15,850 --> 00:07:18,670
in case three goes down, they can work with one and do so.

92
00:07:19,480 --> 00:07:26,230
Then we have specified port over here and the schema name will here, which is for MS.

93
00:07:27,320 --> 00:07:31,340
OK, so that's about environment variables.

94
00:07:31,370 --> 00:07:33,470
Now let's look at the container definition.

95
00:07:36,580 --> 00:07:43,180
We have created volumes for Cassandra DateTime Cassandra logs, and we have created them separately

96
00:07:43,180 --> 00:07:47,230
for each of the three instances that we are going to create.

97
00:07:47,410 --> 00:07:55,060
So let's look at those three instances that should be dead at the bottom of this script.

98
00:07:55,190 --> 00:07:55,540
OK.

99
00:07:57,930 --> 00:08:01,710
So this is the first one, so if you look at Kassandra one.

100
00:08:02,820 --> 00:08:07,340
The important thing to note over here is that, OK, so let's just talk about polls first.

101
00:08:07,350 --> 00:08:14,670
So this is Cassandra's standard to which any plan can connect and seven zero seven zero four for Prometheus

102
00:08:14,670 --> 00:08:15,270
Matrix.

103
00:08:16,200 --> 00:08:24,210
So Prometheus monitoring can connect to this particular port to script Cassandra meetings, and we have

104
00:08:24,210 --> 00:08:25,500
given JVM options.

105
00:08:25,500 --> 00:08:29,070
So Cassandra is a Java processor, JVM, which sends over here.

106
00:08:29,070 --> 00:08:31,650
We can tweak the memory over here.

107
00:08:31,650 --> 00:08:38,280
If your memory is not enough, you can always come and increase this schema seared instance.

108
00:08:38,760 --> 00:08:42,930
Like I said on one instance, we want to create schema.

109
00:08:43,840 --> 00:08:48,000
We will run that script in that environment variable.

110
00:08:48,000 --> 00:08:54,300
We have specified for Cassandra when we have not specified this environment variable for any other instance,

111
00:08:54,870 --> 00:08:59,160
then replication factor is three and Cassandra seeds.

112
00:08:59,790 --> 00:09:01,470
This is a Cassandra configuration.

113
00:09:01,470 --> 00:09:02,830
This is not automation.

114
00:09:03,390 --> 00:09:12,840
This is all nodes in Cassandra Cluster, which node they can initially connect to, who know about cluster.

115
00:09:13,230 --> 00:09:15,090
So what other members are there?

116
00:09:15,120 --> 00:09:22,290
If some node has to join a cluster, it needs to inform these Cassandra seed nodes, and they can also

117
00:09:22,290 --> 00:09:28,320
talk to these signals to know about other nodes in the cluster once they know about that.

118
00:09:28,800 --> 00:09:32,340
Then later on, they can directly communicate with those other nodes.

119
00:09:33,600 --> 00:09:38,370
So this is setting, which is required only during this startup Nest.

120
00:09:38,370 --> 00:09:43,410
All of the settings are pretty much these M, R and D point is not very different.

121
00:09:43,410 --> 00:09:48,660
Second, data sets, which is a script which we are using to create schema.

122
00:09:49,390 --> 00:09:51,560
So we look at Cassandra two definition.

123
00:09:51,570 --> 00:09:59,070
It is pretty much the same, except that we did not have to do things like Cassandra seed instance or

124
00:09:59,120 --> 00:10:05,640
replication factor over here because we are not creating schema over here, but we still need to let

125
00:10:05,640 --> 00:10:10,300
it know which Nord actually connect to to know about the cluster.

126
00:10:10,350 --> 00:10:12,690
So this is an initial setting that is required.

127
00:10:13,440 --> 00:10:16,380
Similarly, we have Cassandra Trino.

128
00:10:17,070 --> 00:10:22,680
So here also we have specified this Cassandra saves environment variable.

129
00:10:22,680 --> 00:10:26,610
So that is how we have this define three containers.

130
00:10:27,360 --> 00:10:32,400
Cassandra, one, Cassandra, two, and Cassandra, three, and they will form Cassandra Cluster.

131
00:10:33,420 --> 00:10:37,140
So let's go ahead and run our system bit Cassandra cluster.
