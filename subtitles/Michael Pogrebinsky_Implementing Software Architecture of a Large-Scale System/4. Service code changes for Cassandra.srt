1
00:00:02,620 --> 00:00:08,440
Now, let us understand the court changes that we need to make in order to incorporate Cassandra into

2
00:00:08,440 --> 00:00:08,980
our system.

3
00:00:09,700 --> 00:00:14,700
So all of our services, they can actually use either Cassandra or both.

4
00:00:15,400 --> 00:00:17,080
So we can use a mix of both.

5
00:00:17,380 --> 00:00:21,700
Or you can just use Cassandra for everything or PostgreSQL everything.

6
00:00:21,700 --> 00:00:25,030
So we have already seen usage of Postgres for all these services.

7
00:00:25,060 --> 00:00:27,510
Now let's see how we can use Cassandra.

8
00:00:27,520 --> 00:00:33,820
So let's go to order service and pretty much all other services they will use.

9
00:00:34,120 --> 00:00:39,580
Cassandra exists in dissimilar way, so there is nothing unique about the service.

10
00:00:40,810 --> 00:00:46,540
But when we look at our service, let's say we are going into the service, then we will need to go

11
00:00:46,540 --> 00:00:48,170
into this deal or directory.

12
00:00:48,190 --> 00:00:51,010
This is where our data accessibility record is there.

13
00:00:51,790 --> 00:00:55,000
So here there is an interface called order to you.

14
00:00:55,540 --> 00:01:03,520
This defines all the methods only database access methods for order entity.

15
00:01:04,000 --> 00:01:08,690
Now this is implemented by Sequent for Postgres database.

16
00:01:09,010 --> 00:01:10,660
And then this directly Cassandra.

17
00:01:11,110 --> 00:01:13,970
The code is implemented for Sequent for Cassandra.

18
00:01:14,800 --> 00:01:18,580
So both of them implement this same interface so we can use.

19
00:01:19,150 --> 00:01:25,600
We can just switch to any of the implementation, either Cassandra or Sequent, depending upon the configuration

20
00:01:25,600 --> 00:01:26,890
which we do over here.

21
00:01:27,340 --> 00:01:35,170
So order Debbie configuration, if you go over there, this is there is conditionality on the beans,

22
00:01:35,170 --> 00:01:39,040
depending upon what kind of database type it is.

23
00:01:39,550 --> 00:01:47,520
If it is equal, then these Cassandra related beans will be created or if it is sequel.

24
00:01:47,920 --> 00:01:49,660
So let's go a little down.

25
00:01:50,200 --> 00:01:51,490
So let's set these beans.

26
00:01:53,230 --> 00:02:01,150
This being it is required for Postgres database will be created only if database type is said to skew

27
00:02:01,150 --> 00:02:01,300
it.

28
00:02:01,840 --> 00:02:03,910
So this has only connection information.

29
00:02:03,910 --> 00:02:13,710
So here we will let these beings know what the whole sport and schema name related information is,

30
00:02:13,710 --> 00:02:16,570
so all their configuration will happen over here.

31
00:02:17,530 --> 00:02:23,470
All the beans will be created over here and whatever configuration, environment, variables or parameters

32
00:02:23,470 --> 00:02:29,630
they need that will be provided through this conflict or properties as usual.

33
00:02:29,660 --> 00:02:35,350
So if Cassandra needs to know what hosts are there or court is there, what's these key marquee space

34
00:02:35,350 --> 00:02:41,680
name in Cassandra schema name is called those actually key specs so that it will be configured over

35
00:02:41,680 --> 00:02:43,960
here in a very similar way.

36
00:02:43,960 --> 00:02:49,510
We did this for Postgres database so that state configuration bar.

37
00:02:49,540 --> 00:02:51,970
Now let's see the DOJ implementation.

38
00:02:52,390 --> 00:02:54,730
So this will be let's have this get out.

39
00:02:54,730 --> 00:02:56,740
It will be implemented by.

40
00:02:57,950 --> 00:03:03,980
DV order deal in sequel for both crass and borderline, do you focus on?

41
00:03:04,100 --> 00:03:05,840
So let's go to Orlando, you.

42
00:03:07,110 --> 00:03:12,960
It has Orlando, in case of Cassandra, because, like I said, we only have borderline people over

43
00:03:12,960 --> 00:03:16,220
here, we do not have any master table, we have a normalized table.

44
00:03:17,280 --> 00:03:19,290
So here the query looks like this.

45
00:03:19,860 --> 00:03:23,010
Select star for getting up, getting in order.

46
00:03:23,580 --> 00:03:31,200
Select Star from borderline, where user ID equals to this user I.D. So we are just building a string

47
00:03:31,200 --> 00:03:33,990
over here and it is equal to this.

48
00:03:33,990 --> 00:03:41,910
So it's very much like a sequence where we are fetching all the order lines, where user ID equals to

49
00:03:41,910 --> 00:03:47,520
some value and the ID of an order also equals to some value.

50
00:03:48,560 --> 00:03:51,110
So this is what we are doing over here.

51
00:03:52,130 --> 00:03:58,430
Similarly, if we have to, let's say, get orders, then we have a similar rescue in select star from

52
00:03:58,430 --> 00:04:03,770
Model Island, where user ideas could do this and we are not specified any authority over here.

53
00:04:04,100 --> 00:04:07,190
So we will get all the orders for a particular user.

54
00:04:08,950 --> 00:04:16,720
For use cases like this, we have set primary key, which includes user I.D. and Order I.D. So so that

55
00:04:16,720 --> 00:04:24,280
we can fetch this through the primary key index of that is by default, only one index, which is primary

56
00:04:24,340 --> 00:04:26,230
utility index in Cassandra.

57
00:04:26,650 --> 00:04:33,370
At least we can see it that if you're coming from sequel background as security background, OK, so

58
00:04:33,370 --> 00:04:34,930
this this is guitar it is now.

59
00:04:34,940 --> 00:04:37,780
The rest is this is same order.

60
00:04:38,020 --> 00:04:44,020
Basically, we are going to a bit lines over here, so each order will have multiple over the line.

61
00:04:44,020 --> 00:04:50,830
So we are looping them over here and one by one, we are inserting these order lines.

62
00:04:50,830 --> 00:04:55,810
So if these are the lines are already present, then they will be overwritten.

63
00:04:56,860 --> 00:05:01,870
One thing to note over here is that we are giving this query an object.

64
00:05:01,870 --> 00:05:07,270
So this is something that spring will take care of inserting this or creating insert query.

65
00:05:08,170 --> 00:05:11,470
So we are from a borderline object.

66
00:05:11,470 --> 00:05:14,050
We have created DB order or borderline.

67
00:05:14,530 --> 00:05:19,390
We have created to mimic Cassandra Borderline Table.

68
00:05:19,390 --> 00:05:27,250
So this DB borderline object actually represents the borderline entity in Cassandra database.

69
00:05:27,260 --> 00:05:34,810
So it has got these attributes and it has got a primary key, which is DB order giving you a different

70
00:05:34,810 --> 00:05:41,370
and it has got these three attributes User ID, then order, then borderline I.D..

71
00:05:42,480 --> 00:05:49,860
So this is how we defined our primary key, and similarly, we have to define corresponding primary

72
00:05:49,860 --> 00:05:50,940
key class over here.

73
00:05:51,420 --> 00:05:56,640
So this is our spring stuff, standard spring stuff of accessing a database.

74
00:05:57,450 --> 00:06:04,580
Now with that, the discovery will work that the object that we have created the borderline objects

75
00:06:04,590 --> 00:06:12,690
out of Borderlines Cassandra operations or the Spring Cassandra databases will be able to insert our

76
00:06:12,690 --> 00:06:16,650
data so that our insert is done now.

77
00:06:16,740 --> 00:06:17,430
Remove water.

78
00:06:17,430 --> 00:06:19,080
So there are different ways of doing this.

79
00:06:19,080 --> 00:06:19,920
There is no fixed.

80
00:06:19,920 --> 00:06:20,700
We are doing this.

81
00:06:20,910 --> 00:06:23,910
Spraying provides multiple ways of doing this.

82
00:06:24,300 --> 00:06:30,960
I have reliably followed of it, which I found easiest or which I found earliest.

83
00:06:31,680 --> 00:06:33,510
It could have been any of those.

84
00:06:33,510 --> 00:06:37,530
I didn't necessarily try to find the best way of doing it.

85
00:06:38,160 --> 00:06:41,850
So this is just any way of doing it.

86
00:06:42,870 --> 00:06:51,990
Similarly, you can remove orders from the database, you can truncate the all complete table and stuff

87
00:06:51,990 --> 00:06:52,470
like that.

88
00:06:52,590 --> 00:06:57,640
You can do what you will do in a normal year for an RDM.

89
00:06:57,810 --> 00:07:00,750
So things like that can be done for Cassandra as well.

90
00:07:01,330 --> 00:07:09,750
Now, one thing to which is distinctly different in case of Cassandra is that so let's say we are writing

91
00:07:09,750 --> 00:07:13,500
multiple order lines, so we are doing this in a loop.

92
00:07:14,220 --> 00:07:20,910
We can possibly run this as a batch operation, but the fact is that they will be inserted one by one.

93
00:07:21,360 --> 00:07:30,300
And if the system crashes in between, then we may have to take care of the partial updates or something

94
00:07:30,300 --> 00:07:31,710
which are not handed over again.

95
00:07:32,100 --> 00:07:34,560
But this is something I need to handle.

96
00:07:34,560 --> 00:07:40,260
So maybe in future versions, I'll try to see what's the best way to handle those kind of situations.

97
00:07:40,680 --> 00:07:49,440
So right now, we have just a dress code for birthday, but we may have to write code for those edge

98
00:07:49,440 --> 00:07:56,880
cases where the software process may crash in between, and that will result in partial of doing so,

99
00:07:56,880 --> 00:07:58,860
things like that we still need to take care of.

100
00:07:59,910 --> 00:08:03,270
OK, so that's the code for Cassandra in brief.

101
00:08:03,780 --> 00:08:06,630
Now let's go and see Cassandra in action.

102
00:08:06,870 --> 00:08:10,200
Let's run our system with Cassandra database.
