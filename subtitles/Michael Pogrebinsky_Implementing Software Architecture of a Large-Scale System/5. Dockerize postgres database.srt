1
00:00:01,940 --> 00:00:05,780
The next component that we are going to work on is PostgreSQL database.

2
00:00:06,620 --> 00:00:10,190
So this is the configuration Docker compose configuration we are going to use.

3
00:00:11,120 --> 00:00:16,370
So we will take a Docker file, which will use a Postgres image is slightly different.

4
00:00:16,370 --> 00:00:19,490
This is a there's an image built on Linux container.

5
00:00:19,910 --> 00:00:26,650
So like we have built our application, Postgres provides an image built on top of Linux, so we will

6
00:00:26,660 --> 00:00:27,500
take that image.

7
00:00:27,500 --> 00:00:31,010
On top of that, we will install PostgreSQL will.

8
00:00:31,010 --> 00:00:32,530
In fact, we don't have to install.

9
00:00:32,540 --> 00:00:37,520
This will come as a bundle if we take Docker Postgres image.

10
00:00:37,970 --> 00:00:42,290
So the only thing that we'll have to do is that we'll have to create schema on that.

11
00:00:43,250 --> 00:00:45,110
So let's quickly go ahead and do that.

12
00:00:46,940 --> 00:00:51,590
So for that, we will go to Docker Postgres directly.

13
00:00:51,860 --> 00:00:56,780
Here we have all the files that are needed on the image.

14
00:00:57,980 --> 00:01:00,770
We have two scripts over here for checking readiness.

15
00:01:00,780 --> 00:01:02,390
We will talk about this later.

16
00:01:02,960 --> 00:01:06,770
But the one that we need immediately is create schema daughter Stuart.

17
00:01:07,550 --> 00:01:12,920
So this is the file that we will use to create schema.

18
00:01:14,060 --> 00:01:21,830
OK, so now let's look at the Docker file Docker configuration file for Postgres database.

19
00:01:22,400 --> 00:01:28,850
So here, instead of just starting from Ubuntu, we are starting from Postgres image, which will get

20
00:01:28,850 --> 00:01:30,620
downloaded from Docker registry.

21
00:01:31,190 --> 00:01:34,220
So Postgres maintains these images over there.

22
00:01:34,880 --> 00:01:41,060
And then the other thing that over here again, we can ignore that these are some networking tools for

23
00:01:41,060 --> 00:01:41,600
debugging.

24
00:01:42,050 --> 00:01:42,980
We can ignore them.

25
00:01:43,400 --> 00:01:48,560
Then the important thing that is happening over here is we are copying create schema rescue and to are

26
00:01:48,560 --> 00:01:51,980
directly from their Postgres DB when it starts.

27
00:01:52,400 --> 00:01:56,030
It will apply this script so that schema will get created.

28
00:01:56,420 --> 00:02:02,390
And we have copying some other script over there for checking readiness, which we will use later on

29
00:02:02,390 --> 00:02:07,970
because in production, we may like to ping Postgres database to see if it is alive or not.

30
00:02:08,330 --> 00:02:11,990
And this script will actually help us in doing that.

31
00:02:12,490 --> 00:02:16,490
Yes, we are going to use it during Kubernetes, but it's there in this image right now.

32
00:02:17,150 --> 00:02:18,860
So two important things over here.

33
00:02:18,860 --> 00:02:24,680
We're starting with Postgres image and we are copying Create Schema Dot School in a direct way which

34
00:02:25,460 --> 00:02:28,610
Postgres database will itself pick up and create this schema.

35
00:02:29,180 --> 00:02:34,850
One thing that you may notice is that we are not given any command over here or and they point over

36
00:02:34,850 --> 00:02:37,580
here to launch Postgres database.

37
00:02:38,180 --> 00:02:44,210
The reason we have not done that because that instruction would have gone in the image of Postgres itself

38
00:02:44,630 --> 00:02:49,910
when they would have created their Docker file, they would have given either an entry point or deferred

39
00:02:49,910 --> 00:02:53,390
command that will start the Postgres database.

40
00:02:53,390 --> 00:02:54,470
So we don't need to do that.

41
00:02:54,890 --> 00:03:01,280
We can just do the customization that we need and are only customizations that we have to create schema

42
00:03:01,280 --> 00:03:01,700
with this.

43
00:03:01,970 --> 00:03:02,900
So pretty simple.

44
00:03:04,790 --> 00:03:10,640
All we have to do is we will take that YAML file that we created.

45
00:03:10,880 --> 00:03:16,370
It's one level above three, dear here.

46
00:03:16,730 --> 00:03:26,390
We will also add the configuration for Postgres database, so we don't need to copy services that is

47
00:03:26,390 --> 00:03:27,800
already there, that tag.

48
00:03:28,370 --> 00:03:29,990
So we'll just copy this section.

49
00:03:30,260 --> 00:03:31,640
Let's go and put it over here.

50
00:03:35,030 --> 00:03:35,380
OK.

51
00:03:35,900 --> 00:03:43,580
So we are done copying this, and this is the build information.

52
00:03:44,960 --> 00:03:47,510
This one how to build this particular image.

53
00:03:48,020 --> 00:03:54,080
And then there's the information which will be needed when we launch the container.

54
00:03:54,950 --> 00:03:59,170
We are added to one new thing over here that environment variable.

55
00:03:59,180 --> 00:04:08,000
This Docker Postgres image needs the user name and its password because it's going to start our database

56
00:04:08,210 --> 00:04:09,740
with this default user.

57
00:04:10,550 --> 00:04:16,070
And this is going to be the username and password so we can provide this as environment variables.

58
00:04:17,690 --> 00:04:29,150
So now let's save this file and bring up first, we will build this Docker image B C minus F and Docker

59
00:04:29,660 --> 00:04:32,120
treated very command.

60
00:04:32,720 --> 00:04:34,220
And we want to build both.

61
00:04:35,120 --> 00:04:36,050
So let's build this.

62
00:04:41,360 --> 00:04:44,480
Looks like it is going to complete pretty quickly, so we will wait.

63
00:04:47,460 --> 00:04:51,840
OK, so that's done, it's now doing other stuff.

64
00:04:54,150 --> 00:04:58,650
They should also and pretty quickly, because there isn't much to be done, I think they are installing

65
00:04:58,650 --> 00:05:02,370
those dance tools and calling and all those utilities.

66
00:05:02,850 --> 00:05:03,570
So it's done.

67
00:05:04,920 --> 00:05:07,560
So we did build using Docker compose.

68
00:05:08,010 --> 00:05:15,930
Now let's run this Postgres database using this command up minus D Postgres.

69
00:05:18,860 --> 00:05:25,790
So it seems it has created the container, let's just list the container, so we have two containers

70
00:05:25,790 --> 00:05:28,520
now VEB and post-crash Butera.

71
00:05:29,300 --> 00:05:33,440
So just to confirm what we can do is we can check the logs.

72
00:05:34,010 --> 00:05:36,920
You see logs minus f PostgreSQL.

73
00:05:39,690 --> 00:05:46,020
So if we check the log, then there's nothing wrong over here.

74
00:05:46,470 --> 00:05:51,330
In fact, this scheme also got created so we can see those trace statements on a studio.

75
00:05:51,960 --> 00:05:52,740
So it's done.

76
00:05:52,740 --> 00:05:58,110
Our Postgres database is running, container is up, so we are done with progress.

77
00:05:58,830 --> 00:06:00,750
Now let's move to the next component.
