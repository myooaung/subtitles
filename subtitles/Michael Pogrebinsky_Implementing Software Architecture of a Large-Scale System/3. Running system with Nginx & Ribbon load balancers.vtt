WEBVTT
1
00:00:01.120 --> 00:00:04.090
OK, now we have connected to a workstation machine.

2
00:00:05.050 --> 00:00:07.030
Let's go to our project directly.

3
00:00:08.540 --> 00:00:12.140
Let's go to Dr. directly where we will build the images.

4
00:00:12.800 --> 00:00:15.140
So right now, we the images.

5
00:00:16.760 --> 00:00:23.570
These are the images that we have for this service, for a single page application services web, our

6
00:00:23.570 --> 00:00:24.170
database.

7
00:00:25.190 --> 00:00:30.480
So what we are going to do is we are going to see how we're going to be images for and Gen-X.

8
00:00:31.580 --> 00:00:39.870
So we will go to L.B. Webb first or let's go to services for that's slightly simpler than that.

9
00:00:39.910 --> 00:00:43.310
So here we have two things.

10
00:00:43.340 --> 00:00:44.950
We have this darker fight.

11
00:00:44.960 --> 00:00:46.990
So let's first look at this Docker file.

12
00:00:48.140 --> 00:00:49.460
Send this Docker file.

13
00:00:49.490 --> 00:00:54.110
We are downloading and the next image and then some tools.

14
00:00:55.100 --> 00:00:55.490
OK.

15
00:00:55.640 --> 00:01:03.320
So then the useful thing that is happening over here is that we are copying an engine ex-con file from

16
00:01:03.320 --> 00:01:06.650
our local directly to this and your next image.

17
00:01:07.130 --> 00:01:09.860
This will provide all the engineers related configuration.

18
00:01:10.280 --> 00:01:14.120
Then we're copying a Docker entry point or assets to this image.

19
00:01:14.480 --> 00:01:19.520
There's no guarantee point their assets will be executed by the image.

20
00:01:19.670 --> 00:01:21.290
Once we are running it.

21
00:01:21.800 --> 00:01:26.600
So we will just see what we are doing in this Docker and deep datasets.

22
00:01:29.500 --> 00:01:32.140
So if you go going to image directly.

23
00:01:36.210 --> 00:01:38.610
There we have this engine start going.

24
00:01:39.030 --> 00:01:40.680
Let's just take a look at that first.

25
00:01:41.670 --> 00:01:49.560
So this and index dot com right now has all the configuration that we need from our India next load

26
00:01:49.560 --> 00:01:51.030
balancer for our services.

27
00:01:51.390 --> 00:01:56.880
There is one thing, however, which is not configured properly and that is this particular property.

28
00:01:57.330 --> 00:02:03.030
This particular property should be something like server and the actual horse.

29
00:02:03.040 --> 00:02:09.210
So let's say we are calling gateway service, and if this is the hostname, then it should look like

30
00:02:09.660 --> 00:02:10.560
something like this.

31
00:02:11.190 --> 00:02:17.940
And then we can have several new lanes containing this kind of information, so we can repeat this for

32
00:02:18.240 --> 00:02:19.560
multiple instances.

33
00:02:20.700 --> 00:02:27.720
But we have four guest host and port information over here so that by running a script, we can actually

34
00:02:27.720 --> 00:02:30.740
replace them by the actual configuration.

35
00:02:31.080 --> 00:02:33.090
And I'll show you where we are doing are.

36
00:02:33.090 --> 00:02:38.760
We are going to provide this host import information that will be there in our Docker environment variable.

37
00:02:38.770 --> 00:02:46.710
So the script next that we are going to see this Docker entry point picks up this horse to import information

38
00:02:46.710 --> 00:02:51.860
from that environment variable and it actually substitute that information over here.

39
00:02:51.900 --> 00:02:54.660
So this is the script Docker endpoint.

40
00:02:55.050 --> 00:03:01.020
So if no environment variable is mentioned, it will port global host and portrayed zero zero over here.

41
00:03:01.500 --> 00:03:10.500
But if those environment variable server hosts is available, then it will extract servers, host information

42
00:03:10.500 --> 00:03:16.770
from it, and then it will substitute that information and do this in the next Durcan file.

43
00:03:18.330 --> 00:03:19.520
So that is all there is.

44
00:03:19.540 --> 00:03:28.530
A script does that there isn't anything much happening over here other than substituting this in India

45
00:03:28.560 --> 00:03:35.540
next start on file, and then this is basically outputting that on file for as a matter of debugging.

46
00:03:35.550 --> 00:03:38.040
And this is pretty much this script is doing.

47
00:03:39.450 --> 00:03:41.150
So this makes configuration easier.

48
00:03:41.160 --> 00:03:48.930
Otherwise, every time we have the lets it change the name of our downstream service or we increase

49
00:03:48.930 --> 00:03:53.880
the number of instances we have to again and again update this engine ex-con file.

50
00:03:54.240 --> 00:04:00.720
While what we can do right now is that we can go to Docker file, provide an environment variable for

51
00:04:00.720 --> 00:04:06.120
configuration and accordingly, then and your next container is launched, it will adjust to this new

52
00:04:06.120 --> 00:04:06.750
configuration.

53
00:04:06.750 --> 00:04:09.840
So we will see this where this configuration is done.

54
00:04:10.080 --> 00:04:12.400
But this is a bit of automation for convenience.

55
00:04:12.420 --> 00:04:17.430
You can actually hardcoded this instance information over here.

56
00:04:17.430 --> 00:04:23.040
So let's say you can say, get this this one and bought eight zero eight zero, then added new lines

57
00:04:23.040 --> 00:04:25.990
over here to service two imported 080.

58
00:04:25.990 --> 00:04:27.540
So like that you're going to have several lines.

59
00:04:27.900 --> 00:04:30.780
So 10 lines if you are 10, this service instances.

60
00:04:31.620 --> 00:04:32.730
So that's how it works.

61
00:04:33.060 --> 00:04:35.010
We have just added some automation on this.

62
00:04:36.090 --> 00:04:43.680
OK, so that's the those other things that go into the image and we will soon build the image.

63
00:04:44.250 --> 00:04:49.890
But before we build the image, let's also look at what do we do for load?

64
00:04:49.890 --> 00:04:51.110
Balancer them.

65
00:04:52.470 --> 00:04:55.590
So load balancing web is pretty much the same.

66
00:04:56.160 --> 00:04:58.230
The Docker file is.

67
00:05:00.450 --> 00:05:04.050
Quite simply, we are copying and next hour confused as.

68
00:05:04.680 --> 00:05:09.720
We are also copying docket entry point orders, which does pretty much the same thing.

69
00:05:10.380 --> 00:05:17.880
But there is one more thing that we are copying over here is that we are copying the WebWise static

70
00:05:17.880 --> 00:05:23.450
content over here because the Indian X is going to host this static content for dynamic content.

71
00:05:23.460 --> 00:05:27.870
It will go to Python replication, but static content will be listed on Engine X.

72
00:05:27.870 --> 00:05:33.480
So we are copying that and the next static content to the engine executes.

73
00:05:33.990 --> 00:05:41.160
The rest of the image is pretty much similar to services load balance at image.

74
00:05:42.270 --> 00:05:44.790
Now let's go into image directly.

75
00:05:45.750 --> 00:05:46.890
What do we have over here?

76
00:05:47.190 --> 00:05:49.290
We have this Docker entry point.

77
00:05:49.290 --> 00:05:50.460
So let's just look at that.

78
00:05:51.060 --> 00:05:59.010
Docker entry point up to this point is exactly the same as the Docker entry point for services.

79
00:05:59.610 --> 00:06:00.840
Load Balancer services.

80
00:06:01.920 --> 00:06:07.050
Then the additional thing that is over here is in case, as I say, reconfiguration is true, then it

81
00:06:07.050 --> 00:06:13.260
generates a certificate and it puts that into engine configuration directly.

82
00:06:13.620 --> 00:06:16.050
So we are not using a system configuration over here.

83
00:06:16.410 --> 00:06:18.780
So this portion will not be executed.

84
00:06:18.780 --> 00:06:20.640
So right now, we are not going to discuss that.

85
00:06:20.970 --> 00:06:28.170
So the only thing that descriptor is going to do right now is that it is going to substitute began server

86
00:06:28.170 --> 00:06:36.150
information in this engine start going, OK, so the other thing that we need over here in this directory

87
00:06:36.150 --> 00:06:36.540
is.

88
00:06:37.870 --> 00:06:40.480
Web was static content for that.

89
00:06:41.020 --> 00:06:48.670
What we will do is and we have done this before also to get all the build artifacts into this directory.

90
00:06:49.030 --> 00:06:54.910
We will go to the brain directly of this dhokla and there we will execute this command, pull our defects

91
00:06:54.910 --> 00:06:55.660
towards its.

92
00:06:58.530 --> 00:07:03.660
So this should pull all the required funds into this Dulquer staging area.

93
00:07:04.440 --> 00:07:10.800
So now let's go to L.B. Web and image directly here we should have.

94
00:07:11.890 --> 00:07:15.540
This BYU eight or Tarter Desert, this has this static content.

95
00:07:15.850 --> 00:07:20.620
So when we build the image now, this will go along with the engine image.

96
00:07:21.100 --> 00:07:24.700
OK, so this is how we are going to build the image.

97
00:07:25.060 --> 00:07:26.470
This is what is there in the image.

98
00:07:26.470 --> 00:07:27.910
Of course, we are going to build it now.

99
00:07:28.690 --> 00:07:31.870
So let's start that process.

100
00:07:32.290 --> 00:07:36.520
So what we are going to do is let's go to Dr. Demo's directly.

101
00:07:42.700 --> 00:07:48.580
And the current demonstration is dead in lower balances directly, so you will go there.

102
00:07:53.350 --> 00:07:57.640
So here, if you do a DC this year, believe.

103
00:07:59.260 --> 00:08:04.660
Things that we need, so that's index it will this it will be.

104
00:08:05.800 --> 00:08:06.970
So we will wait for it.

105
00:08:15.850 --> 00:08:19.350
If it takes long time, then I'll pause it, but looks like it will get done.

106
00:08:22.350 --> 00:08:22.680
OK.

107
00:08:22.920 --> 00:08:24.390
So I don't need to positively deal.

108
00:08:24.960 --> 00:08:30.950
This is done, and so the images are very so if I look at Docker images now.

109
00:08:32.550 --> 00:08:39.930
So we do have A.W. LV Services this load balancer for services and it'll be web.

110
00:08:40.350 --> 00:08:44.760
This is not good image for load balancing for the application.

111
00:08:44.760 --> 00:08:47.520
So we have both the images with us now.

112
00:08:47.520 --> 00:08:49.170
We are ready to run this system.

113
00:08:49.170 --> 00:08:54.750
But before I run this system, let me check if any Docker processes are running.

114
00:08:55.560 --> 00:08:59.070
So there are no Docker processes running, so we are good to go.

115
00:09:00.270 --> 00:09:03.180
Otherwise, we'll have to kill those Docker processes and clean them.

116
00:09:03.570 --> 00:09:05.130
Otherwise it will create a conflict.

117
00:09:05.580 --> 00:09:08.220
So now let's start our system.

118
00:09:10.030 --> 00:09:15.700
So if this goes through fine and it looks like it has gone through fine now, this is going to take

119
00:09:15.700 --> 00:09:16.390
some time.

120
00:09:16.840 --> 00:09:24.030
So let's utilise that time for looking at what's happening on load balancer instances that we have launched.

121
00:09:24.030 --> 00:09:35.200
So let's look at Docker, or you can use composite logs minus F and this is LV.

122
00:09:35.200 --> 00:09:38.170
So this is this is a load balancing and another one, it'll be Webbs.

123
00:09:38.350 --> 00:09:40.060
Let's first look at LV services.

124
00:09:45.790 --> 00:09:51.910
So now, like I said that this will output the final configuration file, that's CryptoLocker entry

125
00:09:51.910 --> 00:09:52.810
point or does it?

126
00:09:53.020 --> 00:10:01.900
So it has done this substitution for Gateway Service one and get with Service two, and that will appear

127
00:10:01.900 --> 00:10:06.670
as upstream services over here to service one eight zero eight zero.

128
00:10:06.670 --> 00:10:07.150
Like that?

129
00:10:07.270 --> 00:10:09.460
How we discuss we have two instances.

130
00:10:09.970 --> 00:10:13.630
One thing which I haven't told you is when I have done this configuration.

131
00:10:14.140 --> 00:10:18.430
So while this whole thing is coming up, I'll show you the configuration.

132
00:10:19.180 --> 00:10:22.890
Let's also look at where the lock failed so far.

133
00:10:24.070 --> 00:10:26.020
Load balancer for our web application.

134
00:10:26.770 --> 00:10:29.050
So this is also pretty much the same here.

135
00:10:29.060 --> 00:10:33.070
So what is there one in there, two board members at eight thousand?

136
00:10:33.670 --> 00:10:35.110
So this is the configuration we need.

137
00:10:35.110 --> 00:10:37.780
So this is perfect.

138
00:10:38.770 --> 00:10:40.060
There's no problem over here.

139
00:10:40.990 --> 00:10:42.610
The other processes are still running.

140
00:10:42.610 --> 00:10:52.390
So let's say if I look at gateway service now, this time Gateway Service is Gateway Service one and

141
00:10:52.390 --> 00:10:53.170
I'll show you what.

142
00:10:54.770 --> 00:10:56.270
Because there are two instances.

143
00:10:56.660 --> 00:10:58.220
So they're still coming up.

144
00:10:59.000 --> 00:11:00.180
Now there is another one.

145
00:11:00.200 --> 00:11:01.220
It was obvious to.

146
00:11:03.050 --> 00:11:04.280
So this is also coming up.

147
00:11:04.700 --> 00:11:09.110
So let me tell you what's happening in the background, so there are a few changes that we have done

148
00:11:09.770 --> 00:11:12.200
to the Docker file over here.

149
00:11:12.500 --> 00:11:14.540
So there's Docker compose file that we have.

150
00:11:15.020 --> 00:11:16.250
Let's take a look at that.

151
00:11:16.910 --> 00:11:18.020
What are the changes here?

152
00:11:19.980 --> 00:11:28.410
One changes, of course, that we have this load balancer for them, there is nothing special over here.

153
00:11:28.440 --> 00:11:31.290
This pretty much the same stuff that we have done elsewhere.

154
00:11:31.830 --> 00:11:37.770
The only thing special that we have done over here is that as part of environment variables, we have

155
00:11:37.770 --> 00:11:39.180
provided this property.

156
00:11:39.180 --> 00:11:42.390
So our hosts, they have one and they have to.

157
00:11:42.870 --> 00:11:45.150
And this is the environment variable property.

158
00:11:45.630 --> 00:11:50.970
This plus this so port that our image has used.

159
00:11:51.130 --> 00:11:56.700
That image of this, Nordlund said, has used to configure engine Gen-X darken.

160
00:11:57.240 --> 00:12:02.390
So darker and reborn dot assets will actually look at this environment variable.

161
00:12:02.400 --> 00:12:10.890
It will extract these two host out of that in this sport, and it will accordingly configure and GeneXpert

162
00:12:10.920 --> 00:12:11.820
gone fine.

163
00:12:12.090 --> 00:12:16.110
So this is our load balancer for web application is configured.

164
00:12:18.090 --> 00:12:23.220
And this is how did not get image for a load, balancer services is configured here.

165
00:12:23.280 --> 00:12:24.960
We have done exactly the same thing.

166
00:12:25.470 --> 00:12:33.120
The port number is different and the other difference is that the hosts are obviously different because

167
00:12:33.120 --> 00:12:37.090
this particular load balancer is going to connect to gateway service.

168
00:12:37.090 --> 00:12:38.670
So let me just show you that.

169
00:12:39.720 --> 00:12:45.630
So here this L.B. web load balances back and is basically this web application, web one and Web two.

170
00:12:46.470 --> 00:12:53.010
And for this load balance of all services, the backend is gateway service one and get physical is to.

171
00:12:55.030 --> 00:13:02.500
So I think this this figure is more appropriate, so he had the gator's of his one individual always

172
00:13:02.500 --> 00:13:04.570
to, so I think these are not updated.

173
00:13:05.470 --> 00:13:06.100
That's fine.

174
00:13:06.850 --> 00:13:13.030
We know this that we have two instances of web now we have learned where to engage vis a vis one and

175
00:13:13.290 --> 00:13:13.920
service two.

176
00:13:14.320 --> 00:13:17.580
So that is the thing that we have configured over here.

177
00:13:17.590 --> 00:13:24.980
So we see this that next for them now, we actually have two containers that we have set.

178
00:13:25.020 --> 00:13:32.110
So instead of just one web now we have one the one and is running on in itself.

179
00:13:33.010 --> 00:13:36.310
And the name of this container in hostname is that one.

180
00:13:36.880 --> 00:13:40.510
Then we have this web two container.

181
00:13:40.540 --> 00:13:48.970
This is also a web application instance, just another instance running on in and its name is web,

182
00:13:48.970 --> 00:13:49.270
too.

183
00:13:49.630 --> 00:13:52.420
So there are two instances of our web application.

184
00:13:52.420 --> 00:13:52.690
So.

185
00:13:53.920 --> 00:13:58.060
So these two instances now we will look at the gateway service instances.

186
00:14:00.270 --> 00:14:06.750
So for Gateway service, what we have done is instead of just gateway hyphen service, we have Gateway

187
00:14:06.750 --> 00:14:08.110
Hyphen Service five one one.

188
00:14:08.670 --> 00:14:16.440
So that is one gateway service container over here and other gateway service containers over here because

189
00:14:16.440 --> 00:14:18.660
we are using Eureka registry over here.

190
00:14:19.050 --> 00:14:21.720
So we have provided this information to.

191
00:14:23.600 --> 00:14:30.500
You registry that the host name for this particular container is Gateway Service one.

192
00:14:31.160 --> 00:14:38.120
Actually, there is some issue with Yuriko registry the way tries to find who's name.

193
00:14:38.870 --> 00:14:44.990
The issue is where the Docker environment within Docker environment, it is not able to get the right

194
00:14:44.990 --> 00:14:47.780
horse name because it is running on a dolphin container.

195
00:14:48.440 --> 00:14:54.470
So the workaround over that is to provide the host name as an environment variable.

196
00:14:54.470 --> 00:15:01.730
So this hostname will be provided to Eureka Registry related court, which does the registration to

197
00:15:01.730 --> 00:15:02.840
the discovery service.

198
00:15:03.260 --> 00:15:07.490
It will look at this environment variable and it will do the registration.

199
00:15:07.850 --> 00:15:11.570
Similarly, forget is, do we have this?

200
00:15:12.050 --> 00:15:16.220
We have used the same environmental variable that the other value of good vessel is to.

201
00:15:16.820 --> 00:15:22.520
So like, there are two great vessels to administer this, we have kept one instance or tradition service.

202
00:15:22.520 --> 00:15:26.240
We have kept one instance and four product service.

203
00:15:26.960 --> 00:15:33.020
We have kept two instances, so we could have done multiple instances for every service.

204
00:15:33.530 --> 00:15:37.280
It's a small machine, so we have selectively randomly.

205
00:15:37.280 --> 00:15:44.900
We have chosen product service for two instances this one and then we have chosen inventory service

206
00:15:44.900 --> 00:15:50.140
for two instances in when 30 service we have chosen because order service is going to call inventory

207
00:15:50.150 --> 00:15:52.490
service and we want to see some load balancing that.

208
00:15:53.150 --> 00:15:58.340
OK, so that way we have this configuration for product service.

209
00:15:58.670 --> 00:16:05.190
We have product service one and product service to order service.

210
00:16:05.210 --> 00:16:08.750
We only have one instance like we always had.

211
00:16:09.440 --> 00:16:15.320
And for inventory service, we have two instances in which duty service one and in always do.

212
00:16:16.760 --> 00:16:21.290
So that's the Docker configuration that we have addressed.

213
00:16:21.290 --> 00:16:22.220
Everything is simple.

214
00:16:22.970 --> 00:16:25.780
We can now look at the environment variables.

215
00:16:26.600 --> 00:16:31.880
So if I look at this environment variable file.

216
00:16:32.930 --> 00:16:37.280
This file, the only change that we have done over here is for Web application.

217
00:16:37.610 --> 00:16:38.380
We have changed.

218
00:16:38.660 --> 00:16:46.400
So this is almost as a services and deport as it did so earlier.

219
00:16:46.400 --> 00:16:53.150
What was happening is that this probably nation was directly connecting to our gateway service.

220
00:16:53.720 --> 00:17:00.500
But now we have to change that configuration or we have done is we have changed this configuration for

221
00:17:00.500 --> 00:17:04.250
the obligation to connect to the load balancer services.

222
00:17:04.250 --> 00:17:09.680
So instead of connecting to the gateway vessel, this node will connect to the load balancer.

223
00:17:10.010 --> 00:17:15.650
So all these gateway services are now behind this load balancer so that that's what we have done.

224
00:17:15.650 --> 00:17:21.170
So that change we have done in the dark in environment variables.

225
00:17:21.380 --> 00:17:28.520
So we could have put this in web configuration itself in Docker compose store diamond or this is also

226
00:17:28.520 --> 00:17:34.140
one place where we put all the common configuration, although it is not a common configuration for

227
00:17:34.140 --> 00:17:39.290
this specific to web application, but it just ended up over here.

228
00:17:40.700 --> 00:17:46.970
Now then, whether we can put them anywhere in just a matter of convenience and structure that we provide

229
00:17:46.970 --> 00:17:47.540
to our code.

230
00:17:48.530 --> 00:17:55.560
OK, so now what we can do is we can check if our application is up.

231
00:17:55.580 --> 00:17:57.080
So let's just check.

232
00:17:57.470 --> 00:17:59.650
So this will be up only.

233
00:17:59.660 --> 00:18:02.570
So if it is not showing any exit, that means we are fine.

234
00:18:02.990 --> 00:18:09.230
Next thing we have to check is if our applications are really up and that we can find out by looking

235
00:18:09.230 --> 00:18:11.480
at the log files.

236
00:18:12.680 --> 00:18:16.840
So let's let me give the command and some of its maintenance.

237
00:18:17.660 --> 00:18:19.370
Let's first check the address service.

238
00:18:20.000 --> 00:18:24.050
That's the most important service because if that's not up, nothing will work.

239
00:18:25.080 --> 00:18:27.240
So get service one has come up.

240
00:18:28.710 --> 00:18:30.240
Let's check Target with service to.

241
00:18:31.830 --> 00:18:33.030
That has also come up.

242
00:18:34.140 --> 00:18:39.090
So let's connect to our discovery service.

243
00:18:41.670 --> 00:18:43.740
Just to see what all services are up now.

244
00:18:44.010 --> 00:18:47.790
All that information is the discovery service as well.

245
00:18:47.910 --> 00:18:49.950
It's seven six one, yet that's the.

246
00:18:51.870 --> 00:18:57.840
OK, so here we look at our discovery service, it seems our admin services up authorization service

247
00:18:57.840 --> 00:18:58.200
is up.

248
00:18:58.560 --> 00:19:03.630
Both of them have one instances, but for gateway service we have two instances.

249
00:19:04.440 --> 00:19:08.940
Similarly, for inventory service, we have two instances and four product service.

250
00:19:08.940 --> 00:19:11.670
We have two instances one order service.

251
00:19:11.820 --> 00:19:13.440
We have one instance.

252
00:19:14.130 --> 00:19:15.990
So this is a good setup for us.

253
00:19:16.380 --> 00:19:24.390
Now let's just see if our application is detecting that set up so that you will connect to our web application.

254
00:19:24.760 --> 00:19:30.630
Now, when we are connecting to our application, this time we will not connect to this port eight thousand.

255
00:19:31.140 --> 00:19:37.740
We will connect to this Port ID zero because this is where our load balancer for web application is

256
00:19:37.740 --> 00:19:38.010
running.

257
00:19:38.010 --> 00:19:40.470
So this time we will be connecting to a load balancer.

258
00:19:43.440 --> 00:19:48.840
So I would give this 48 zero, actually 48 zero is the default ports if you want to skip this.

259
00:19:48.990 --> 00:19:50.220
That is also possible.

260
00:19:51.000 --> 00:19:52.920
So now we have connected to unload billions.

261
00:19:52.920 --> 00:19:57.030
And so I just say, no, we let's try this again and again.

262
00:19:59.690 --> 00:20:01.970
OK, so we have signed it.

263
00:20:04.520 --> 00:20:10.400
Now, let's go to our Monitoring tab to know what different services are running.

264
00:20:10.830 --> 00:20:15.920
That's just being our web application for us because now we have two instances of our web application.

265
00:20:16.700 --> 00:20:21.290
So this response we got from web application host web too.

266
00:20:21.800 --> 00:20:22.970
Now let me bring this again.

267
00:20:24.290 --> 00:20:25.370
This time it is from.

268
00:20:25.920 --> 00:20:26.230
They've.

269
00:20:27.140 --> 00:20:34.850
So this way we can do this being to find out the different instances that are running for replication

270
00:20:34.850 --> 00:20:37.610
and if it is being load balanced or not.

271
00:20:37.610 --> 00:20:44.220
So right now, we can see this when we are sending requests to this load balancer each time we are getting

272
00:20:44.220 --> 00:20:46.940
a response from our different web application instance.

273
00:20:47.420 --> 00:20:52.610
That means there is load balancing happening for the better application.

274
00:20:53.030 --> 00:20:56.390
Now we can do a similar check for other services.

275
00:20:58.160 --> 00:21:00.770
So let's bring all our services.

276
00:21:02.390 --> 00:21:03.950
Let's wait for the response, OK?

277
00:21:04.340 --> 00:21:07.640
So for our transition service, we are getting a response from Autorizacion.

278
00:21:07.640 --> 00:21:12.950
So this instance and this is the only instance, but for product service, we have got response from

279
00:21:12.950 --> 00:21:14.300
product service one.

280
00:21:15.100 --> 00:21:15.380
Right.

281
00:21:15.620 --> 00:21:20.390
So now next time when we ping again, we should get it from a different instance.

282
00:21:22.340 --> 00:21:23.300
So I've been there in.

283
00:21:24.470 --> 00:21:31.670
And this time the response is from product service to the similarly it is happening for inventory service

284
00:21:31.670 --> 00:21:33.590
and get research service so we can check that.

285
00:21:36.190 --> 00:21:37.030
So I have been.

286
00:21:38.490 --> 00:21:40.950
It is still one, let me just spring once again.

287
00:21:41.810 --> 00:21:45.180
OK, it looks like this time it has been.

288
00:21:45.450 --> 00:21:49.260
So this is in military service to engage with others do so.

289
00:21:49.260 --> 00:21:53.430
Both instances are active and our law balances.

290
00:21:53.940 --> 00:21:58.140
They are indeed providing us load balancing.

291
00:21:58.140 --> 00:22:05.310
And for our plane load balancing, it will take advantage of this ribbon load balance that will take

292
00:22:05.310 --> 00:22:14.630
advantage of the fact that the registration is actually aware of these multiple instances for inventory

293
00:22:14.640 --> 00:22:16.080
service and product service.

294
00:22:16.080 --> 00:22:22.770
Wherever about order service is calling in duty service notice two instances to choose from.

295
00:22:23.910 --> 00:22:28.620
So this is how we can implement load balances into our system.

296
00:22:29.130 --> 00:22:36.900
So now our system has got load balances, and what that means is we can have any number of instances

297
00:22:37.320 --> 00:22:43.680
for all our services, including gateway service and also for our web application.

298
00:22:44.100 --> 00:22:49.850
We have not put multiple instances for you record, because that's something you regard takes care of.

299
00:22:49.860 --> 00:22:51.550
So we have to do cluster setup for you.

300
00:22:51.900 --> 00:22:58.590
That's not something that is that we are concerned as part of our application development.

301
00:22:59.220 --> 00:23:00.870
So that's part of your record.

302
00:23:00.870 --> 00:23:02.640
So that's Eureka's responsibility.

303
00:23:02.640 --> 00:23:08.400
We will need to go through that documentation to create a Eureka cluster setup.

304
00:23:08.580 --> 00:23:15.630
But when we set the multiple instances, we can provide that information to our gateway service and

305
00:23:15.630 --> 00:23:21.420
other services through a simple configuration that these are the different Yureka instances available.

306
00:23:21.870 --> 00:23:28.800
But we are responsible for having multiple instances for the application that we are creating.

307
00:23:28.800 --> 00:23:30.000
We are writing code for.

308
00:23:30.330 --> 00:23:36.450
So for that, we have added load balancers for our application, for all our services.

309
00:23:37.140 --> 00:23:39.090
So now our system is load balance.

310
00:23:39.490 --> 00:23:41.280
Now we're ready to move forward.
