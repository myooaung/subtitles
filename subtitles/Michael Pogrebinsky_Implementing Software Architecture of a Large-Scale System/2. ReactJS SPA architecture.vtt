WEBVTT
1
00:00:02.180 --> 00:00:08.750
Now, let's very briefly discuss React architecture, although from overall system architecture perspective,

2
00:00:08.750 --> 00:00:16.100
there isn't much interesting going on in the reactor architecture, it doesn't affect the overall architecture

3
00:00:16.100 --> 00:00:23.300
of our system, but because we are discussing reactor, so we will discuss one particular aspect of

4
00:00:23.300 --> 00:00:26.270
the architecture, which may be interesting to us.

5
00:00:27.380 --> 00:00:34.640
So as we discuss that in the act, we write JavaScript code and that code is redundant, Jess explains.

6
00:00:35.510 --> 00:00:37.880
So in GSX files, we write two things.

7
00:00:37.880 --> 00:00:47.840
One is the logic of how the UI is going to behave, and the other thing that we write is how the page

8
00:00:47.840 --> 00:00:48.770
will be displayed.

9
00:00:49.220 --> 00:00:53.090
So here we write HTML tags in those HD image tags.

10
00:00:53.480 --> 00:01:03.800
We embed G6 components or react components, and these react components they are converted into.

11
00:01:04.550 --> 00:01:09.140
They are written informal GSX index, which is very similar to HTML.

12
00:01:10.530 --> 00:01:17.910
At run time when the act is running, it takes these GSX file, which has got JavaScript code and GSX

13
00:01:17.910 --> 00:01:22.490
caught it transforms that into pure JavaScript code.

14
00:01:22.500 --> 00:01:32.130
So out of GSX file, we get pure jazz files, which basically is our application, which is run by LAOAG

15
00:01:32.570 --> 00:01:37.140
Library first and then the reactor runs.

16
00:01:37.680 --> 00:01:41.630
It will create a virtual dom and that's what turned.

17
00:01:41.630 --> 00:01:49.590
Dom will be used for creating the Dom browser system for creating the page that the browser is showing.

18
00:01:49.980 --> 00:01:58.530
So behind every HDMI --, there is a document object model in HDMI dom, so that is what a browser

19
00:01:58.710 --> 00:02:04.890
creates using the virtual Dom created by the Regius Library.

20
00:02:05.280 --> 00:02:12.960
Now any event that happens on the browser Dom, so let's say user clicks a button and that click means

21
00:02:12.960 --> 00:02:21.630
that the React application should download some data from the backend and then show the page again with

22
00:02:21.630 --> 00:02:22.160
that data.

23
00:02:22.170 --> 00:02:26.820
Then what will happen is these events will be provided to the religious library.

24
00:02:27.510 --> 00:02:30.400
It will take it out that it will have to make a beck and call.

25
00:02:30.420 --> 00:02:31.280
It will do that.

26
00:02:31.290 --> 00:02:36.300
It was big that data and it will look at what it needs to do with that data.

27
00:02:36.780 --> 00:02:44.190
With the help of JavaScript code that does that and it will update the DOM, which was created earlier.

28
00:02:44.190 --> 00:02:52.950
So let it are two nodes in this dom needs to be changed so it will make changes to those two dom nodes.

29
00:02:53.400 --> 00:02:58.650
The next thing that happens is is synchronization between what your Dom and browser Dom.

30
00:02:59.070 --> 00:03:07.080
So react is what it does is it compares the browser Dom with the virtual Dom, and it takes only those

31
00:03:07.080 --> 00:03:12.720
changes, which are actually which are signaling a difference between what sort of Dom and browser Dom.

32
00:03:13.260 --> 00:03:17.940
So those changes are a blight on the browser, Dom.

33
00:03:18.390 --> 00:03:27.450
So this will trigger a refresh of the pitch of only those nodes where there was actually a change.

34
00:03:28.140 --> 00:03:36.150
What this does is that we do not end up changing those nodes on the browser, Dom, which hasn't undergone

35
00:03:36.150 --> 00:03:37.290
any change at all.

36
00:03:37.830 --> 00:03:43.970
Here we can spot the difference between what was there earlier, what is supposed to be now and why

37
00:03:43.980 --> 00:03:48.420
exactly the React framework exactly figures out what needs to be changed.

38
00:03:48.750 --> 00:03:56.850
So this is an efficient way of changing browser Dom because it ending exercise can be extremely expensive,

39
00:03:56.860 --> 00:04:00.240
so this brings some efficiency to that process.

40
00:04:01.320 --> 00:04:04.770
So this is briefly react architecture.
