WEBVTT
1
00:00:01.140 --> 00:00:06.840
The last component that we need to discuss is single page application, the single page applications

2
00:00:06.840 --> 00:00:08.920
are basically JavaScript application.

3
00:00:08.940 --> 00:00:16.350
They run in a browser in that browser, can be on a desktop or that browser can be on a mobile.

4
00:00:17.700 --> 00:00:25.110
What makes them special is that they are highly interactive because they actually the entire application

5
00:00:25.110 --> 00:00:26.760
run on the browser itself.

6
00:00:26.790 --> 00:00:28.380
You can just see how that works.

7
00:00:29.190 --> 00:00:34.140
The other thing that we can do with single page application is that we can easily convert them into

8
00:00:34.380 --> 00:00:39.780
mobile apps, which are called this hybrid mobile labs now hybrid mobile apps.

9
00:00:40.290 --> 00:00:46.560
They have slightly different experience from the native mobile apps in terms of the refinement of UI

10
00:00:46.560 --> 00:00:53.460
because native apps, they use native components, but hybrid mobile apps, they are definitely run

11
00:00:53.460 --> 00:00:55.290
in a browser view.

12
00:00:55.830 --> 00:01:03.690
So there may be a slight difference in terms of the refinement of components, but it comes pretty close

13
00:01:03.690 --> 00:01:06.150
to native mobile app.

14
00:01:06.570 --> 00:01:14.160
So that's why single page application idea is pretty popular that you can make highly interactive web

15
00:01:14.160 --> 00:01:19.650
applications and you can even run them on mobile as mobile applications.

16
00:01:20.670 --> 00:01:26.400
Now, the very single page application work says that in order to start a single page application,

17
00:01:26.400 --> 00:01:30.300
we first make a browser go to a web server.

18
00:01:30.870 --> 00:01:38.970
In the response, the browser will download the entire code for running that single page application

19
00:01:38.970 --> 00:01:47.070
so that code will be JavaScript and the template adjustments that are required to run the single page

20
00:01:47.070 --> 00:01:55.260
application and the data that is required to show it to a user if that data is not a static data.

21
00:01:55.770 --> 00:02:05.580
That data is fetched from a banking, and those calls are usually ejects calls and they hit West interface

22
00:02:05.580 --> 00:02:06.330
on the backend.

23
00:02:06.810 --> 00:02:15.720
And this interface can easily provide adjacent response so that Jason Browser can easily use and use

24
00:02:15.720 --> 00:02:19.500
to use that data to show the pages.

25
00:02:19.770 --> 00:02:24.480
So only pages are downloaded on the application in one chart in the first step.

26
00:02:24.840 --> 00:02:32.100
And as per user interaction as in when some data is required, the data is fetched from the backend

27
00:02:32.400 --> 00:02:34.080
using rest interface.

28
00:02:34.500 --> 00:02:41.350
So that is how single page applications work now in order to make single page applications.

29
00:02:41.370 --> 00:02:48.330
We have three choices we can either use anchorages framework, we can use any Edge's library or we can

30
00:02:48.330 --> 00:02:50.400
use villager's framework.

31
00:02:50.850 --> 00:02:57.120
Out of these angular framework is the oldest one, and View JS framework is the most recent one.

32
00:02:57.510 --> 00:02:59.310
Angular is supported by Google.

33
00:02:59.640 --> 00:03:04.530
It came out of Facebook and villagers came from Alibaba in China.

34
00:03:05.550 --> 00:03:09.390
Angular changed quite a lot between version one and version to.

35
00:03:09.390 --> 00:03:16.400
In fact, version two is not backward compatible with version one, so it has seen a lot of change the

36
00:03:16.410 --> 00:03:17.220
edges.

37
00:03:17.700 --> 00:03:23.220
At the same time became pretty popular because it was easy to learn it was mostly JavaScript based.

38
00:03:23.910 --> 00:03:28.050
No extra learning like it was dead in angular JS.

39
00:03:28.470 --> 00:03:36.450
So ingrained yes is slightly more complicated to learn as compared to the edges library, so the libraries

40
00:03:36.450 --> 00:03:37.020
easier.

41
00:03:37.320 --> 00:03:44.040
It's purely based on JavaScript and GSX Code, which ultimately converts into JavaScript.

42
00:03:44.610 --> 00:03:55.410
So Regis became pretty popular, and the fact that Regis is very popular and it is easy to learn, especially

43
00:03:55.410 --> 00:03:57.240
for people who are good with JavaScript.

44
00:03:57.690 --> 00:04:03.870
This is the choice for our system, so we will go ahead with Regis Library.
