1
1

00:00:01,400  -->  00:00:03,500
<v Jonas>So we're almost finished with the basics</v>
2

2

00:00:03,500  -->  00:00:06,750
of JavaScript, but there is still one thing missing
3

3

00:00:06,750  -->  00:00:08,800
that's crucial to programming in general,
4

4

00:00:08,800  -->  00:00:10,403
and that is loops.
5

5

00:00:11,450  -->  00:00:13,520
So in the lecture where I first introduced
6

6

00:00:13,520  -->  00:00:15,520
you to the if else statement,
7

7

00:00:15,520  -->  00:00:19,380
I mentioned that it was just one of many control structures.
8

8

00:00:19,380  -->  00:00:22,980
And so here are some more control structures, loops.
9

9

00:00:22,980  -->  00:00:25,430
So loops are a very important aspect
10

10

00:00:25,430  -->  00:00:27,450
of any programming language.
11

11

00:00:27,450  -->  00:00:30,940
Just imagine that you have a very repetitive task.
12

12

00:00:30,940  -->  00:00:32,800
Instead of writing for example
13

13

00:00:32,800  -->  00:00:36,090
10 lines of the same code, you would just use a loop.
14

14

00:00:36,090  -->  00:00:38,670
So we can basically automate repetitive tasks
15

15

00:00:38,670  -->  00:00:40,680
using loops, okay?
16

16

00:00:40,680  -->  00:00:42,300
And there are different types of loops
17

17

00:00:42,300  -->  00:00:45,930
in JavaScript, and we will start with a simple for loop.
18

18

00:00:45,930  -->  00:00:48,710
So suppose we needed to print the numbers
19

19

00:00:48,710  -->  00:00:50,810
from zero to nine.
20

20

00:00:50,810  -->  00:00:55,810
Okay, so something like console.log and then one.
21

21

00:01:01,610  -->  00:01:03,740
And then two, three, four, five,
22

22

00:01:03,740  -->  00:01:05,350
and so on and so forth.
23

23

00:01:05,350  -->  00:01:07,440
So you would have to do this 10 times,
24

24

00:01:07,440  -->  00:01:10,040
but that's not a good idea at all.
25

25

00:01:10,040  -->  00:01:12,853
And so instead again, we use a loop.
26

26

00:01:13,750  -->  00:01:15,560
And I'm going to start with a for loop.
27

27

00:01:15,560  -->  00:01:18,606
So we write for, and then the for loop
28

28

00:01:18,606  -->  00:01:20,270
has three parts.
29

29

00:01:20,270  -->  00:01:22,747
It has the initial value of the counter,
30

30

00:01:22,747  -->  00:01:24,750
the condition that is evaluated
31

31

00:01:24,750  -->  00:01:26,750
before each loop iteration,
32

32

00:01:26,750  -->  00:01:31,050
and finally a counter update after each iteration, okay?
33

33

00:01:31,050  -->  00:01:33,120
So let's go through them one by one.
34

34

00:01:33,120  -->  00:01:36,330
So the first part is the initial value of a counter.
35

35

00:01:36,330  -->  00:01:39,980
So I imagine that we want to print from zero to nine.
36

36

00:01:39,980  -->  00:01:42,560
And so we start at zero.
37

37

00:01:42,560  -->  00:01:45,670
So we define a variable called I for example
38

38

00:01:45,670  -->  00:01:47,290
and set it to zero.
39

39

00:01:47,290  -->  00:01:50,440
And I use I here because I is kind of a standard
40

40

00:01:50,440  -->  00:01:53,020
in JavaScript for a counter variable.
41

41

00:01:53,020  -->  00:01:57,358
So this is a variable that will be updated in every loop.
42

42

00:01:57,358  -->  00:02:01,240
Then we use the semicolon and now the second part.
43

43

00:02:01,240  -->  00:02:03,380
So this is a condition that is evaluated
44

44

00:02:03,380  -->  00:02:06,430
before each loop iteration in order to see
45

45

00:02:06,430  -->  00:02:09,330
if the next loop should still be executed.
46

46

00:02:09,330  -->  00:02:12,230
So if we want to count from zero to nine,
47

47

00:02:12,230  -->  00:02:14,500
well then our condition will be that
48

48

00:02:14,500  -->  00:02:18,200
I should be less than 10, okay?
49

49

00:02:18,200  -->  00:02:20,760
So only if this turns out to be true,
50

50

00:02:20,760  -->  00:02:23,880
then the next loop will actually run, okay?
51

51

00:02:23,880  -->  00:02:25,907
So in the beginning we start with zero
52

52

00:02:25,907  -->  00:02:29,447
and so I will be zero and zero is less than 10
53

53

00:02:29,447  -->  00:02:34,110
and so it's true, and so the loop will start, alright?
54

54

00:02:34,110  -->  00:02:37,840
And then next up and finally we have the counter update
55

55

00:02:37,840  -->  00:02:39,290
after each iteration.
56

56

00:02:39,290  -->  00:02:40,970
So if we want to count from zero to nine
57

57

00:02:40,970  -->  00:02:43,270
like zero, one, two, three, four, five,
58

58

00:02:43,270  -->  00:02:45,410
all the numbers, then in each iteration
59

59

00:02:45,410  -->  00:02:48,100
we want to increase I by one.
60

60

00:02:48,100  -->  00:02:50,183
And remember, a special operator to do that,
61

61

00:02:50,183  -->  00:02:52,131
it is the plus plus.
62

62

00:02:52,131  -->  00:02:57,131
So this is the same as writing I equals I plus one,
63

63

00:02:57,290  -->  00:02:58,640
remember that?
64

64

00:02:58,640  -->  00:03:02,150
Okay, and then in here we have basically the loop block.
65

65

00:03:02,150  -->  00:03:04,810
So what should happen in each of the loops?
66

66

00:03:04,810  -->  00:03:06,550
And in the small example, all we want to do
67

67

00:03:06,550  -->  00:03:09,290
is to really log these numbers to the console.
68

68

00:03:09,290  -->  00:03:13,870
So console.log I, and so that's it,
69

69

00:03:13,870  -->  00:03:15,090
that's really it.
70

70

00:03:15,090  -->  00:03:16,790
Let's take a look
71

71

00:03:16,790  -->  00:03:19,960
and so now here you see all of these 10 numbers
72

72

00:03:19,960  -->  00:03:22,190
from zero to nine, alright?
73

73

00:03:22,190  -->  00:03:25,730
So let's go through it again and see why this works.
74

74

00:03:25,730  -->  00:03:28,350
So I'm adding a comment here and try to write out
75

75

00:03:28,350  -->  00:03:30,530
what happens in each iteration.
76

76

00:03:30,530  -->  00:03:34,650
So we start and I will be zero, right?
77

77

00:03:34,650  -->  00:03:36,270
Then the condition is evaluated,
78

78

00:03:36,270  -->  00:03:39,760
and so zero is of course less than 10
79

79

00:03:39,760  -->  00:03:41,460
and so that's true.
80

80

00:03:41,460  -->  00:03:43,550
So we will then log I to the console.
81

81

00:03:43,550  -->  00:03:44,983
So log I to console.
82

82

00:03:45,830  -->  00:03:49,660
And then finally at the end the counter is updated, okay?
83

83

00:03:49,660  -->  00:03:52,760
And so I plus plus, okay?
84

84

00:03:52,760  -->  00:03:54,480
Then in the next iteration,
85

85

00:03:54,480  -->  00:03:58,650
we will have I is already one at this point, right?
86

86

00:03:58,650  -->  00:04:02,330
And so the test is now I less then 10,
87

87

00:04:02,330  -->  00:04:05,500
which is still true, and so the next iteration will start.
88

88

00:04:05,500  -->  00:04:08,124
And so again we log I into the console
89

89

00:04:08,124  -->  00:04:11,350
and then I will be incremented by one.
90

90

00:04:11,350  -->  00:04:12,860
So we do that a couple of times
91

91

00:04:12,860  -->  00:04:15,580
until we reach the end, okay?
92

92

00:04:15,580  -->  00:04:17,660
So let's actually copy this here
93

93

00:04:17,660  -->  00:04:20,203
and again this is just to show you how this works.
94

94

00:04:22,040  -->  00:04:23,970
So this happens a couple of times
95

95

00:04:23,970  -->  00:04:26,890
until we're at a point where I is nine already,
96

96

00:04:26,890  -->  00:04:31,603
and so, and here I wanted actually the less symbol.
97

97

00:04:33,130  -->  00:04:35,000
And so at this point we are at nine
98

98

00:04:35,000  -->  00:04:36,820
and nine is still less than 10,
99

99

00:04:36,820  -->  00:04:37,980
and so it's true.
100

100

00:04:37,980  -->  00:04:39,390
Then we log the I to the console
101

101

00:04:39,390  -->  00:04:43,420
and I gets incremented just like before, okay?
102

102

00:04:43,420  -->  00:04:46,060
But then it means that at the next step
103

103

00:04:46,060  -->  00:04:47,433
we are at 10.
104

104

00:04:50,156  -->  00:04:54,790
And so 10, less than 10, is now false.
105

105

00:04:54,790  -->  00:04:57,550
And so we enter the loop.
106

106

00:04:57,550  -->  00:04:59,583
Actually we exit the loop,
107

107

00:05:00,660  -->  00:05:02,320
which means that the loop finishes
108

108

00:05:02,320  -->  00:05:04,990
and it no longer continues working.
109

109

00:05:04,990  -->  00:05:08,520
And so that's why we stop at nine, alright?
110

110

00:05:08,520  -->  00:05:09,980
Does that make sense?
111

111

00:05:09,980  -->  00:05:12,560
Now we could of course change some stuff here,
112

112

00:05:12,560  -->  00:05:15,990
so imagine that we wanted to count until 20.
113

113

00:05:15,990  -->  00:05:17,910
So we could put 20.
114

114

00:05:17,910  -->  00:05:19,390
Actually this will go until 19,
115

115

00:05:19,390  -->  00:05:23,070
but imagine if we wanted to really start from zero
116

116

00:05:23,070  -->  00:05:25,230
and include to 20.
117

117

00:05:25,230  -->  00:05:27,970
So we want to start from one not zero, sorry.
118

118

00:05:27,970  -->  00:05:31,510
So starting from one and we wanted to include to 20.
119

119

00:05:31,510  -->  00:05:35,215
So we can say less or equal.
120

120

00:05:35,215  -->  00:05:37,770
And so in this case this will only fail
121

121

00:05:37,770  -->  00:05:39,713
as soon as I is 21.
122

122

00:05:41,340  -->  00:05:45,810
And so we start at one and go all the way to 20.
123

123

00:05:45,810  -->  00:05:48,070
And we can also add a step here,
124

124

00:05:48,070  -->  00:05:51,320
so instead of simply adding one, we can add two
125

125

00:05:51,320  -->  00:05:54,030
in each iteration, so let's try that.
126

126

00:05:54,030  -->  00:05:55,920
So instead of doing I plus plus,
127

127

00:05:55,920  -->  00:05:59,367
we can do I plus equal two.
128

128

00:06:00,290  -->  00:06:02,090
And remember that's the same as writing
129

129

00:06:02,090  -->  00:06:03,803
I equals I plus two.
130

130

00:06:05,150  -->  00:06:06,760
Let's check it now.
131

131

00:06:06,760  -->  00:06:08,460
And so indeed it works.
132

132

00:06:08,460  -->  00:06:10,670
So we start with one, right?
133

133

00:06:10,670  -->  00:06:13,200
And then we increased the counter by two,
134

134

00:06:13,200  -->  00:06:16,030
and so the next one will be three, right?
135

135

00:06:16,030  -->  00:06:17,860
And then five and so on and so forth
136

136

00:06:17,860  -->  00:06:20,175
all the way until 19 and 20 is not included
137

137

00:06:20,175  -->  00:06:25,175
because 19 plus two is already 21 which is of course
138

138

00:06:25,280  -->  00:06:27,010
greater than 20.
139

139

00:06:27,010  -->  00:06:28,700
Alright, so that is the very basic
140

140

00:06:28,700  -->  00:06:31,460
functionality of the for loop.
141

141

00:06:31,460  -->  00:06:34,690
Now let's look a bit more practical example.
142

142

00:06:34,690  -->  00:06:37,070
So let's say that we have an array here
143

143

00:06:37,070  -->  00:06:40,889
and let's actually copy the array from
144

144

00:06:40,889  -->  00:06:44,300
the array lecture here and, where is it?
145

145

00:06:44,300  -->  00:06:46,730
So yeah, this one is the one that I mean.
146

146

00:06:46,730  -->  00:06:48,540
So the John array,
147

147

00:06:48,540  -->  00:06:50,751
instead of having to write it out all over again.
148

148

00:06:50,751  -->  00:06:54,330
So we have a couple of data here about John.
149

149

00:06:54,330  -->  00:06:55,660
So let's say that we have an app
150

150

00:06:55,660  -->  00:06:58,420
where we need to display these five values
151

151

00:06:58,420  -->  00:06:59,600
here to the console.
152

152

00:06:59,600  -->  00:07:02,340
Well maybe not to the console, but to the user interface,
153

153

00:07:02,340  -->  00:07:04,090
but we're just working with the console here.
154

154

00:07:04,090  -->  00:07:06,730
And so let's pretend that we need to lock
155

155

00:07:06,730  -->  00:07:09,070
these five values here to the console.
156

156

00:07:09,070  -->  00:07:11,680
And so of course, just like before,
157

157

00:07:11,680  -->  00:07:13,793
we could do it like this.
158

158

00:07:14,760  -->  00:07:15,763
So John,
159

159

00:07:17,310  -->  00:07:18,173
zero,
160

160

00:07:19,500  -->  00:07:23,880
and then like all the way to five,
161

161

00:07:23,880  -->  00:07:25,470
actually to four right?
162

162

00:07:25,470  -->  00:07:29,200
So we could do it like this, right?
163

163

00:07:29,200  -->  00:07:31,860
So that would solve the problem, but not in a good way.
164

164

00:07:31,860  -->  00:07:35,040
So imagine that we had actually 50 elements
165

165

00:07:35,040  -->  00:07:36,760
in this array and not just five,
166

166

00:07:36,760  -->  00:07:38,360
so what would you do then?
167

167

00:07:38,360  -->  00:07:41,460
You couldn't just create 50 lines of the same code.
168

168

00:07:41,460  -->  00:07:45,230
And so of course the solution here is to use a loop,
169

169

00:07:45,230  -->  00:07:46,870
so let's get rid of this here
170

170

00:07:46,870  -->  00:07:49,700
and instead write it as a loop.
171

171

00:07:49,700  -->  00:07:52,130
So again, a for loop.
172

172

00:07:52,130  -->  00:07:57,040
So var I equals zero, and why do we start at zero?
173

173

00:07:57,040  -->  00:08:00,320
Well we start at zero because the array is zero based,
174

174

00:08:00,320  -->  00:08:02,380
and what we want to use the counter here,
175

175

00:08:02,380  -->  00:08:05,390
is to read the element of the array at position zero,
176

176

00:08:05,390  -->  00:08:08,530
one, two, three, and four, alright?
177

177

00:08:08,530  -->  00:08:11,300
So we start at zero and you want the loop
178

178

00:08:11,300  -->  00:08:14,720
to run as long as I is less than
179

179

00:08:14,720  -->  00:08:17,000
the length of the array, okay?
180

180

00:08:17,000  -->  00:08:18,090
And why is that?
181

181

00:08:18,090  -->  00:08:20,859
Well that's because the length of this array is five
182

182

00:08:20,859  -->  00:08:24,130
and so as long as the counter is below five,
183

183

00:08:24,130  -->  00:08:26,630
so zero, one, two, three, or four,
184

184

00:08:26,630  -->  00:08:29,450
we can then read the data out of this array.
185

185

00:08:29,450  -->  00:08:31,890
But starting at five there's no more data in the array.
186

186

00:08:31,890  -->  00:08:35,060
So there's nothing at position five in the John array.
187

187

00:08:35,060  -->  00:08:38,520
And so at five we no longer want to read anything.
188

188

00:08:38,520  -->  00:08:41,730
So remember how we can read the length of an array,
189

189

00:08:41,730  -->  00:08:43,530
so the number of elements?
190

190

00:08:43,530  -->  00:08:48,530
Well all we have to do is to use the length property, okay?
191

191

00:08:49,030  -->  00:08:50,510
And then we want to read all of them,
192

192

00:08:50,510  -->  00:08:55,070
and so we do plus plus just like before, alright?
193

193

00:08:55,070  -->  00:08:59,040
So this year will maybe not make 100% sense to you,
194

194

00:08:59,040  -->  00:09:01,600
but it will after you see exactly what we're
195

195

00:09:01,600  -->  00:09:04,840
gonna do here here in the block of this loop, okay?
196

196

00:09:04,840  -->  00:09:09,840
So what we're going to do is to log to the console
197

197

00:09:10,090  -->  00:09:12,383
John at position I.
198

198

00:09:13,670  -->  00:09:15,690
Okay, so instead of writing out
199

199

00:09:15,690  -->  00:09:17,740
zero, one, two, three, and four,
200

200

00:09:17,740  -->  00:09:20,430
we let the loop take care of basically
201

201

00:09:20,430  -->  00:09:21,880
putting the numbers here.
202

202

00:09:21,880  -->  00:09:24,170
So in the first one it will be zero
203

203

00:09:24,170  -->  00:09:27,450
and then one and then two and then three and then four,
204

204

00:09:27,450  -->  00:09:30,970
but not five because John.length is five
205

205

00:09:30,970  -->  00:09:34,870
and this loop only runs as long as the counter
206

206

00:09:34,870  -->  00:09:38,320
is less than five in this case, okay?
207

207

00:09:38,320  -->  00:09:42,420
So let's test it out and yeah, here we go.
208

208

00:09:42,420  -->  00:09:46,160
So all of these five logs are not coming from line
209

209

00:09:46,160  -->  00:09:48,793
597, so this line here.
210

210

00:09:50,324  -->  00:09:51,950
So does this logic here make sense to you?
211

211

00:09:51,950  -->  00:09:53,960
Just to make sure, let's do it again.
212

212

00:09:53,960  -->  00:09:56,420
So we need this counter variable here I
213

213

00:09:56,420  -->  00:09:58,030
in order to log to the console
214

214

00:09:58,030  -->  00:10:01,250
John zero, one, two, three, and four.
215

215

00:10:01,250  -->  00:10:03,400
So we want all of these five elements
216

216

00:10:03,400  -->  00:10:04,700
to be logged to the console.
217

217

00:10:04,700  -->  00:10:07,020
And instead of having to write out John one,
218

218

00:10:07,020  -->  00:10:09,860
John two, John three, John four, and John five,
219

219

00:10:09,860  -->  00:10:11,087
we just use this loop.
220

220

00:10:11,087  -->  00:10:14,128
And so we start at zero because that's the first
221

221

00:10:14,128  -->  00:10:15,200
element in our array.
222

222

00:10:15,200  -->  00:10:16,960
After each iteration of the array
223

223

00:10:16,960  -->  00:10:19,100
we increase the counter value by one
224

224

00:10:19,100  -->  00:10:21,610
because we want to read all of the five values
225

225

00:10:21,610  -->  00:10:25,700
and finally we run this loop as long as the counter
226

226

00:10:25,700  -->  00:10:28,749
variable is still smaller than the total length
227

227

00:10:28,749  -->  00:10:30,860
of the array, which is five.
228

228

00:10:30,860  -->  00:10:34,130
So it will run for zero, for two, for three, for four,
229

229

00:10:34,130  -->  00:10:35,470
but no longer for five
230

230

00:10:35,470  -->  00:10:37,800
because there is nothing at position five.
231

231

00:10:37,800  -->  00:10:40,260
And we could of course manually have put it here
232

232

00:10:40,260  -->  00:10:42,020
with a five, but then imagine
233

233

00:10:42,020  -->  00:10:44,290
that we would add something here.
234

234

00:10:44,290  -->  00:10:47,030
So something like blue as a favorite color
235

235

00:10:47,030  -->  00:10:50,040
and well then it would not dynamically change the array.
236

236

00:10:50,040  -->  00:10:51,490
So if you now reload it,
237

237

00:10:51,490  -->  00:10:54,860
it will not display the blue here to the console.
238

238

00:10:54,860  -->  00:10:58,303
But instead if we go back and put it to John.length,
239

239

00:10:59,207  -->  00:11:01,369
well then it will automatically figure out the length
240

240

00:11:01,369  -->  00:11:04,440
and then loop through the entire array,
241

241

00:11:04,440  -->  00:11:07,380
because now John.length is six
242

242

00:11:07,380  -->  00:11:08,980
and so it will also loop the element
243

243

00:11:08,980  -->  00:11:10,230
number five to the array.
244

244

00:11:11,900  -->  00:11:15,530
So indeed now it appeared down here, the blue as well.
245

245

00:11:15,530  -->  00:11:18,390
Okay, so I hope that now it's crystal clear to you
246

246

00:11:18,390  -->  00:11:21,150
and looping through arrays is actually one of the biggest
247

247

00:11:21,150  -->  00:11:22,120
use case for loop,
248

248

00:11:22,120  -->  00:11:24,490
so this one is really important to understand.
249

249

00:11:24,490  -->  00:11:26,340
Now there are actually even better ways
250

250

00:11:26,340  -->  00:11:28,542
and also simpler ways of achieving it
251

251

00:11:28,542  -->  00:11:31,040
without using this specific for loop.
252

252

00:11:31,040  -->  00:11:33,560
But once more, let's talk about it a bit later
253

253

00:11:33,560  -->  00:11:36,210
because that's a bit more of a complex topic,
254

254

00:11:36,210  -->  00:11:38,970
and for now we're just really looking at the fundamentals.
255

255

00:11:38,970  -->  00:11:41,570
So that was the for loop but there's also another
256

256

00:11:41,570  -->  00:11:45,560
type of loop in JavaScript and that's the simple while loop.
257

257

00:11:45,560  -->  00:11:48,440
So let's try to replicate the same functionality here
258

258

00:11:48,440  -->  00:11:50,430
with the while loop.
259

259

00:11:50,430  -->  00:11:52,610
So the difference between the for and the while
260

260

00:11:52,610  -->  00:11:55,080
is that in while we only have the condition.
261

261

00:11:55,080  -->  00:11:57,440
So all we have to pass into the while loop
262

262

00:11:57,440  -->  00:11:58,693
is really this part.
263

263

00:12:01,000  -->  00:12:06,000
So we can say that while I is less than John.length,
264

264

00:12:07,930  -->  00:12:10,173
then it should keep executing this code.
265

265

00:12:11,750  -->  00:12:15,160
So basically this login functionality here.
266

266

00:12:15,160  -->  00:12:17,100
And so if you want to have the exact same
267

267

00:12:17,100  -->  00:12:18,980
functionality as with the for loop here,
268

268

00:12:18,980  -->  00:12:21,060
we first would have to start by defining
269

269

00:12:21,060  -->  00:12:22,203
the variable out here.
270

270

00:12:24,960  -->  00:12:28,810
So I equals zero and then at the end of each loop
271

271

00:12:28,810  -->  00:12:33,630
we will have to increment I, okay?
272

272

00:12:33,630  -->  00:12:34,750
And so that's actually it.
273

273

00:12:34,750  -->  00:12:37,277
And so this here is now the exact same thing as
274

274

00:12:37,277  -->  00:12:39,380
this for loop here.
275

275

00:12:39,380  -->  00:12:40,900
But of course it's much easier
276

276

00:12:40,900  -->  00:12:42,720
to just use the for loop here.
277

277

00:12:42,720  -->  00:12:45,300
I just wanted to let you know that there was also
278

278

00:12:45,300  -->  00:12:47,880
a way of doing it with the while loop,
279

279

00:12:47,880  -->  00:12:49,913
so that's add some comments here.
280

280

00:12:51,840  -->  00:12:53,410
So this is the while loop
281

281

00:12:53,410  -->  00:12:57,740
and while this here is the for loop, alright?
282

282

00:12:59,410  -->  00:13:01,940
And now I just want to show you the continue
283

283

00:13:01,940  -->  00:13:03,413
and the break statements.
284

284

00:13:08,570  -->  00:13:10,060
So we use the break statement
285

285

00:13:10,060  -->  00:13:11,707
in order to break out of a loop
286

286

00:13:11,707  -->  00:13:14,160
and we use continue in order to quit
287

287

00:13:14,160  -->  00:13:16,000
the current iteration of the loop
288

288

00:13:16,000  -->  00:13:17,942
and continue with the next one.
289

289

00:13:17,942  -->  00:13:21,680
So let's just take a look at a couple of quick examples.
290

290

00:13:21,680  -->  00:13:24,990
And I think I didn't even show you the results of this one.
291

291

00:13:24,990  -->  00:13:26,730
So just to make sure,
292

292

00:13:26,730  -->  00:13:29,297
and now it is, now we have all of these here
293

293

00:13:29,297  -->  00:13:31,150
and but you see that as just the same.
294

294

00:13:31,150  -->  00:13:34,130
So we have these six here coming from the for loop
295

295

00:13:34,130  -->  00:13:37,630
and we have these six here coming from the while loop
296

296

00:13:37,630  -->  00:13:40,420
at line 604, right?
297

297

00:13:40,420  -->  00:13:43,630
And so in fact it works just the same way.
298

298

00:13:43,630  -->  00:13:45,830
Now let's actually get rid of these here.
299

299

00:13:45,830  -->  00:13:48,210
Not really get rid, I'm just going to comment them out
300

300

00:13:48,210  -->  00:13:50,620
so that they're not getting in my way
301

301

00:13:50,620  -->  00:13:52,970
for the next part, alright?
302

302

00:13:52,970  -->  00:13:54,710
So let's copy this here
303

303

00:13:56,520  -->  00:13:59,430
so that I can now show you the continue
304

304

00:13:59,430  -->  00:14:00,920
and the break statements.
305

305

00:14:00,920  -->  00:14:02,710
And let's start with the continue.
306

306

00:14:02,710  -->  00:14:05,420
So again, the continue, we use it to quit
307

307

00:14:05,420  -->  00:14:07,280
just the current iteration of the loop
308

308

00:14:07,280  -->  00:14:10,298
and then continue right to the next one, okay?
309

309

00:14:10,298  -->  00:14:13,600
So let's say for example that we only wanted
310

310

00:14:13,600  -->  00:14:16,620
to lock elements that are strengths, okay?
311

311

00:14:16,620  -->  00:14:18,940
And so we can implement the logic that will do it
312

312

00:14:18,940  -->  00:14:21,510
so that if it's not a string it will quit
313

313

00:14:21,510  -->  00:14:23,400
the current iteration and then continue
314

314

00:14:23,400  -->  00:14:25,310
with the next one, alright?
315

315

00:14:25,310  -->  00:14:28,880
So how do we check if it is actually a string?
316

316

00:14:28,880  -->  00:14:31,260
Well remember the type of operator that we used
317

317

00:14:31,260  -->  00:14:33,810
right in the beginning of the section.
318

318

00:14:33,810  -->  00:14:36,730
So we can all say type of
319

319

00:14:36,730  -->  00:14:40,930
and I think I misspelled that, so type of John,
320

320

00:14:42,880  -->  00:14:45,910
add the current position, so this one
321

321

00:14:45,910  -->  00:14:47,360
is different from a string,
322

322

00:14:47,360  -->  00:14:50,260
and a thing we haven't used different up until this point.
323

323

00:14:50,260  -->  00:14:52,980
So we only ever used the equal
324

324

00:14:52,980  -->  00:14:55,050
but now I don't want equal, I want different.
325

325

00:14:55,050  -->  00:14:58,210
And different we used the exclamation mark like this.
326

326

00:14:58,210  -->  00:15:00,970
So this year is a strict different operator.
327

327

00:15:00,970  -->  00:15:03,310
And just like with the triple and the double equals,
328

328

00:15:03,310  -->  00:15:05,750
here we also have the normal different operator
329

329

00:15:05,750  -->  00:15:08,120
and then the strict different operator like this.
330

330

00:15:08,120  -->  00:15:09,500
And just like with the equality
331

331

00:15:09,500  -->  00:15:10,990
we should always use this one,
332

332

00:15:10,990  -->  00:15:13,850
here we always should use this one.
333

333

00:15:13,850  -->  00:15:16,747
So exclamation mark and then equal equal, okay?
334

334

00:15:16,747  -->  00:15:18,697
And so this means different.
335

335

00:15:18,697  -->  00:15:20,490
And so what we want to do here
336

336

00:15:20,490  -->  00:15:24,210
is that each time that the type of the current element
337

337

00:15:24,210  -->  00:15:26,660
is different from a string,
338

338

00:15:26,660  -->  00:15:29,540
well, we just want to continue, okay?
339

339

00:15:29,540  -->  00:15:31,270
And I think this is also something new.
340

340

00:15:31,270  -->  00:15:33,010
I think that up until this point
341

341

00:15:33,010  -->  00:15:36,083
we always did the if like this.
342

342

00:15:37,750  -->  00:15:42,490
So we had this block and then kind of the text in there
343

343

00:15:42,490  -->  00:15:43,760
just like this, okay?
344

344

00:15:43,760  -->  00:15:46,070
But if it's only like on one line
345

345

00:15:46,070  -->  00:15:49,440
and just a simple if statement like this,
346

346

00:15:49,440  -->  00:15:52,480
we can actually do it in one line without the curly braces
347

347

00:15:52,480  -->  00:15:54,670
and just write it like this.
348

348

00:15:54,670  -->  00:15:57,450
So if this, then continue.
349

349

00:15:57,450  -->  00:16:00,170
And so this will then break out of the loop
350

350

00:16:00,170  -->  00:16:02,060
and will continue to the next one.
351

351

00:16:02,060  -->  00:16:04,460
So for example when we hit Smith here,
352

352

00:16:04,460  -->  00:16:07,540
then the type of John I will be string,
353

353

00:16:07,540  -->  00:16:10,590
and string is not different form string, right?
354

354

00:16:10,590  -->  00:16:12,670
And so we will not continue.
355

355

00:16:12,670  -->  00:16:15,180
Instead we will go straight to this line.
356

356

00:16:15,180  -->  00:16:17,920
But in the next iteration when it's 1990,
357

357

00:16:17,920  -->  00:16:20,120
well that is then different from the string,
358

358

00:16:20,120  -->  00:16:23,610
and so therefore we will enter the if part here
359

359

00:16:23,610  -->  00:16:24,800
and we will then continue.
360

360

00:16:24,800  -->  00:16:29,590
And so this line here will not even get executed, alright?
361

361

00:16:29,590  -->  00:16:31,220
So let me show that to you.
362

362

00:16:31,220  -->  00:16:33,990
And indeed, we now only have John Smith,
363

363

00:16:33,990  -->  00:16:35,270
designer in blue.
364

364

00:16:35,270  -->  00:16:39,000
It skipped the 1990 and then also the false.
365

365

00:16:39,000  -->  00:16:41,100
And again that's because the type of these two
366

366

00:16:41,100  -->  00:16:43,620
is different than string, so different here,
367

367

00:16:43,620  -->  00:16:45,609
different than string.
368

368

00:16:45,609  -->  00:16:46,960
Alright?
369

369

00:16:46,960  -->  00:16:48,140
So let us continue.
370

370

00:16:48,140  -->  00:16:51,510
And now let's do something similar for break.
371

371

00:16:51,510  -->  00:16:54,180
But the difference with break is that it exits
372

372

00:16:54,180  -->  00:16:56,647
the current iteration and the entire loop as well.
373

373

00:16:56,647  -->  00:16:59,998
And so it doesn't continue to the next iteration, alright?
374

374

00:16:59,998  -->  00:17:02,353
And so now this time let's say that we only
375

375

00:17:02,353  -->  00:17:04,840
want to print until we encounter something
376

376

00:17:04,840  -->  00:17:06,409
that is different from a string.
377

377

00:17:06,409  -->  00:17:08,742
So as soon as we had something that is not a string,
378

378

00:17:08,742  -->  00:17:11,423
we will not print anything else, alright?
379

379

00:17:12,277  -->  00:17:15,040
I would simply replace this one here with break.
380

380

00:17:15,040  -->  00:17:18,490
Well I could have just done it up here, but yeah,
381

381

00:17:18,490  -->  00:17:21,930
so this way we have both versions, alright?
382

382

00:17:21,930  -->  00:17:25,210
I'm just going to, I'm gonna leave it like this.
383

383

00:17:25,210  -->  00:17:29,080
So let's now reload, and you'll see that these four here
384

384

00:17:29,080  -->  00:17:30,340
are from the outer loop,
385

385

00:17:30,340  -->  00:17:33,635
so from lines 615 and now from line 620,
386

386

00:17:33,635  -->  00:17:38,190
which is this one here, we only have John and Smith, okay?
387

387

00:17:38,190  -->  00:17:40,460
And so that's exactly what we were looking for.
388

388

00:17:40,460  -->  00:17:43,130
So it prints this string then this string,
389

389

00:17:43,130  -->  00:17:45,550
and then it encounters something that is not a string
390

390

00:17:45,550  -->  00:17:47,050
and so it breaks out of the loop
391

391

00:17:47,050  -->  00:17:49,930
and doesn't change anything else from there, okay?
392

392

00:17:49,930  -->  00:17:52,236
So let us now continue and break,
393

393

00:17:52,236  -->  00:17:55,380
I hope that makes sense to you, okay?
394

394

00:17:55,380  -->  00:17:56,710
Alright, and now just to finish
395

395

00:17:56,710  -->  00:17:58,820
I want to give you a small challenge.
396

396

00:17:58,820  -->  00:18:00,650
Imagine that we wanted to loop
397

397

00:18:00,650  -->  00:18:03,650
through the John array here, so this one here,
398

398

00:18:03,650  -->  00:18:04,970
the other way around.
399

399

00:18:04,970  -->  00:18:07,187
So starting from blue and false, designer,
400

400

00:18:07,187  -->  00:18:09,110
and then all the way to John.
401

401

00:18:09,110  -->  00:18:11,030
So how can we solve that,
402

402

00:18:11,030  -->  00:18:12,630
how can we loop through the array
403

403

00:18:12,630  -->  00:18:15,010
the other way around using a for loop?
404

404

00:18:15,010  -->  00:18:17,173
So do you think we can solve that?
405

405

00:18:18,020  -->  00:18:19,590
You can try to pause the video here
406

406

00:18:19,590  -->  00:18:23,193
and give it a second and try it out for yourself, okay?
407

407

00:18:26,160  -->  00:18:27,423
So did you figure it out?
408

408

00:18:28,612  -->  00:18:31,020
So let's add a comment here before we do it.
409

409

00:18:31,020  -->  00:18:33,373
Looping backward.
410

410

00:18:34,270  -->  00:18:36,830
And really, all we have to do here is to think
411

411

00:18:36,830  -->  00:18:39,810
where we want or counter to start
412

412

00:18:39,810  -->  00:18:42,080
what the condition should be and what we want
413

413

00:18:42,080  -->  00:18:44,570
to happen with the counter variable.
414

414

00:18:44,570  -->  00:18:48,870
So starting with I, what do we want I to be
415

415

00:18:48,870  -->  00:18:50,140
in the beginning?
416

416

00:18:50,140  -->  00:18:52,350
Well we have this John array
417

417

00:18:52,350  -->  00:18:53,540
let's get some space here
418

418

00:18:53,540  -->  00:18:55,870
and we have six elements in here.
419

419

00:18:55,870  -->  00:19:00,307
Zero, one, two, three, four, and five.
420

420

00:19:00,307  -->  00:19:03,474
And we want to start at element number five.
421

421

00:19:03,474  -->  00:19:05,890
And so what is this five?
422

422

00:19:05,890  -->  00:19:09,640
Well it's just a length of this entire array minus one.
423

423

00:19:09,640  -->  00:19:12,170
And so let's write exactly that.
424

424

00:19:12,170  -->  00:19:16,000
John.length minus one.
425

425

00:19:16,000  -->  00:19:18,790
Okay and that will be five in this case.
426

426

00:19:18,790  -->  00:19:22,040
Then how long do we want this array to run?
427

427

00:19:22,040  -->  00:19:23,980
Well, we want the array to run
428

428

00:19:23,980  -->  00:19:26,500
until I hits zero, right?
429

429

00:19:26,500  -->  00:19:28,320
So the last one that we want to print
430

430

00:19:28,320  -->  00:19:32,060
is the first element of the array which is zero, okay?
431

431

00:19:32,060  -->  00:19:36,398
And so I should always be greater or equal to zero.
432

432

00:19:36,398  -->  00:19:40,076
So greater or equal to zero, make sense?
433

433

00:19:40,076  -->  00:19:43,520
So remember that whenever this zero turns out
434

434

00:19:43,520  -->  00:19:46,850
to be true, then the next loop will be executed.
435

435

00:19:46,850  -->  00:19:49,100
And so what we want here is it to be executed
436

436

00:19:49,100  -->  00:19:53,120
whenever I is larger than zero, okay?
437

437

00:19:53,120  -->  00:19:56,610
Because now what people do here after each iteration
438

438

00:19:56,610  -->  00:19:59,726
is to actually decrease the counter, okay?
439

439

00:19:59,726  -->  00:20:01,150
Make sense?
440

440

00:20:01,150  -->  00:20:04,780
So we start at five and then after each iteration
441

441

00:20:04,780  -->  00:20:05,930
we decrease the counter.
442

442

00:20:05,930  -->  00:20:10,110
So five, four, three, two, one, zero.
443

443

00:20:10,110  -->  00:20:11,700
And at zero it will still work
444

444

00:20:11,700  -->  00:20:13,980
because I is greater than or equal to zero.
445

445

00:20:13,980  -->  00:20:16,233
But then after that it will hit minus one
446

446

00:20:16,233  -->  00:20:19,120
and then the condition will no longer be true
447

447

00:20:19,120  -->  00:20:20,873
and then it will stop working.
448

448

00:20:20,873  -->  00:20:23,080
Then all we have to do is of course log it
449

449

00:20:23,080  -->  00:20:25,460
and this is always the same part.
450

450

00:20:25,460  -->  00:20:27,033
So now let's give it a try,
451

451

00:20:28,200  -->  00:20:32,610
and so these here are our results starting here.
452

452

00:20:32,610  -->  00:20:36,490
So all these come from line 627, so this one.
453

453

00:20:36,490  -->  00:20:40,000
And so you see that in fact it is really looping
454

454

00:20:40,000  -->  00:20:41,060
it backwards.
455

455

00:20:41,060  -->  00:20:43,590
So it starts from blue, false, designer,
456

456

00:20:43,590  -->  00:20:48,370
1990, Smith, and John which is number zero, okay?
457

457

00:20:48,370  -->  00:20:50,200
So I hope that made sense to you.
458

458

00:20:50,200  -->  00:20:52,970
This was just a small exercise for you to think
459

459

00:20:52,970  -->  00:20:55,580
about these three parts here of the for loop
460

460

00:20:55,580  -->  00:20:58,530
and how we can achieve a different functionality
461

461

00:20:58,530  -->  00:21:02,120
than the simple one that I explained to you before, okay?
462

462

00:21:02,120  -->  00:21:04,970
And so now it's time for yet another challenge,
463

463

00:21:04,970  -->  00:21:07,340
and this will be the last one for this section
464

464

00:21:07,340  -->  00:21:10,040
using all of the stuff that we learned throughout
465

465

00:21:10,040  -->  00:21:11,230
all of these video.
466

466

00:21:11,230  -->  00:21:13,100
So you have come a long way up until this point,
467

467

00:21:13,100  -->  00:21:15,800
congratulations, and I hope to see you
468

468

00:21:15,800  -->  00:21:18,199
in the next challenge because I think it's
469

469

00:21:18,199  -->  00:21:21,099
really important to take these and try it out on your own.
