1
1

00:00:01,750  -->  00:00:04,361
<v Instructor>So, I hope that you took the time</v>
2

2

00:00:04,361  -->  00:00:07,946
and completed the coding challenge and made the quiz work.
3

3

00:00:07,946  -->  00:00:12,824
Now if you wanna see my solution, then, here it goes.
4

4

00:00:12,824  -->  00:00:14,778
So let's start with step number one
5

5

00:00:14,778  -->  00:00:18,571
and build our function constructor down here.
6

6

00:00:18,571  -->  00:00:22,321
So, function Question, and as we already saw,
7

7

00:00:24,316  -->  00:00:28,344
what we need as inputs here is the question,
8

8

00:00:28,344  -->  00:00:31,927
the answers, and the correct answer, right?
9

9

00:00:32,954  -->  00:00:35,559
So I'm simply giving it this name.
10

10

00:00:35,559  -->  00:00:38,809
So, question, answers, and the correct.
11

11

00:00:42,402  -->  00:00:44,386
Alright and now this is how
12

12

00:00:44,386  -->  00:00:46,721
the function constructor pattern works.
13

13

00:00:46,721  -->  00:00:50,831
So we set everything that we input into this constructor
14

14

00:00:50,831  -->  00:00:55,185
on the disvariable of this function, right?
15

15

00:00:55,185  -->  00:00:59,352
So this.question is question and we input this.answers
16

16

00:01:03,813  -->  00:01:06,646
the same and the same for correct.
17

17

00:01:14,629  -->  00:01:17,454
Alright and that's it, that's our function constructor.
18

18

00:01:17,454  -->  00:01:21,155
So let's now use it and create a couple of questions.
19

19

00:01:21,155  -->  00:01:25,238
So var question one is a new question and in here
20

20

00:01:28,063  -->  00:01:32,230
I'm going to ask first a question, so I'm going to go
21

21

00:01:33,216  -->  00:01:35,541
with the ones that I showed you in the demo.
22

22

00:01:35,541  -->  00:01:39,624
So Is JavaScript the coolest programming language
23

23

00:01:44,747  -->  00:01:45,830
in the world?
24

24

00:01:47,389  -->  00:01:50,379
So that's the first argument.
25

25

00:01:50,379  -->  00:01:53,676
Then the second argument are the possible answers.
26

26

00:01:53,676  -->  00:01:57,919
And I'm going to choose to use an array for this.
27

27

00:01:57,919  -->  00:02:00,021
Because that allows us very nicely to store all
28

28

00:02:00,021  -->  00:02:03,597
of the different options in one single variable.
29

29

00:02:03,597  -->  00:02:07,742
So in here we only have two different options which is yes
30

30

00:02:07,742  -->  00:02:08,575
and no.
31

31

00:02:12,464  -->  00:02:16,461
Okay and a third one is a correct answer and that is number
32

32

00:02:16,461  -->  00:02:20,753
zero, so remember an index is zero based and that's why
33

33

00:02:20,753  -->  00:02:24,897
I'm going with this zero based correct numbers here as well.
34

34

00:02:24,897  -->  00:02:27,510
So the first one is zero, and the second one is one,
35

35

00:02:27,510  -->  00:02:28,343
and so on.
36

36

00:02:29,963  -->  00:02:33,922
And with this, we created our first question.
37

37

00:02:33,922  -->  00:02:35,776
Now, remember why that works.
38

38

00:02:35,776  -->  00:02:38,531
It works because the new operator here creates a new
39

39

00:02:38,531  -->  00:02:42,176
empty object, then it calls the question function
40

40

00:02:42,176  -->  00:02:46,352
and sets the disvariable of this function to the new
41

41

00:02:46,352  -->  00:02:49,313
empty object that was just created.
42

42

00:02:49,313  -->  00:02:51,871
And therefore when we then set all of these properties
43

43

00:02:51,871  -->  00:02:54,843
off to this variable, these will be assigned
44

44

00:02:54,843  -->  00:02:57,537
to the disvariable of the new object.
45

45

00:02:57,537  -->  00:03:00,811
And that new object will then be stored here in the q1,
46

46

00:03:00,811  -->  00:03:03,760
the variable right, or as you already know actually
47

47

00:03:03,760  -->  00:03:07,927
that the q1 variable will hold a reference to the spot
48

48

00:03:08,855  -->  00:03:12,189
in memory where the object hits and then we can of course
49

49

00:03:12,189  -->  00:03:14,606
use our newly created object.
50

50

00:03:15,542  -->  00:03:17,768
So let's now create another one.
51

51

00:03:17,768  -->  00:03:21,935
So question two, so the second one was what's the name
52

52

00:03:29,685  -->  00:03:33,852
of this course's, and remember I have to do it like this,
53

53

00:03:36,291  -->  00:03:39,414
so I need to Escape this symbol so that JavaScript
54

54

00:03:39,414  -->  00:03:43,001
doesn't think that it's the end of the string,
55

55

00:03:43,001  -->  00:03:45,501
teacher and now the answer is.
56

56

00:03:49,526  -->  00:03:51,776
So John, Michael, or Jonas.
57

57

00:03:57,499  -->  00:03:59,360
And as you can see we can have different numbers of answers.
58

58

00:03:59,360  -->  00:04:02,780
So here we had two, here we have three, and in the next
59

59

00:04:02,780  -->  00:04:06,523
question, we're actually going to have four.
60

60

00:04:06,523  -->  00:04:09,597
Okay and in here, the correct answer will be number one
61

61

00:04:09,597  -->  00:04:11,014
obviously, right?
62

62

00:04:11,852  -->  00:04:15,276
Because the index is zero based and so this last one here
63

63

00:04:15,276  -->  00:04:16,776
is zero, one, two.
64

64

00:04:18,156  -->  00:04:21,547
Alright and let's create a third question.
65

65

00:04:21,547  -->  00:04:25,714
So var q3, and now what does best describe coding?
66

66

00:04:38,028  -->  00:04:42,195
So is it boring, or is it hard, or fun, or maybe tedious.
67

67

00:04:48,872  -->  00:04:52,681
And I would say that it's number two, so it's really fun.
68

68

00:04:52,681  -->  00:04:54,431
So zero, one and two.
69

69

00:04:57,410  -->  00:05:00,115
Alright so we just created three questions.
70

70

00:05:00,115  -->  00:05:03,432
And that should be enough for now of course you can add
71

71

00:05:03,432  -->  00:05:05,196
more to make it more interesting.
72

72

00:05:05,196  -->  00:05:08,424
But just to show it, it is enough.
73

73

00:05:08,424  -->  00:05:10,808
Now number three and four is to store them in array
74

74

00:05:10,808  -->  00:05:13,808
and then select one random question.
75

75

00:05:16,760  -->  00:05:20,927
So let's say questions is of course q1, q2, and q3.
76

76

00:05:28,846  -->  00:05:30,730
Alright and now we need to retrieve a random question
77

77

00:05:30,730  -->  00:05:32,063
from this array.
78

78

00:05:33,168  -->  00:05:35,353
And so the first thing is to create a random number
79

79

00:05:35,353  -->  00:05:38,086
which we can then use to take the question.
80

80

00:05:38,086  -->  00:05:40,796
So we want the number between zero and two right?
81

81

00:05:40,796  -->  00:05:45,180
So zero, one, or two should be the number of this random
82

82

00:05:45,180  -->  00:05:48,064
question, now in case that you have more questions,
83

83

00:05:48,064  -->  00:05:50,839
of course the number will be higher.
84

84

00:05:50,839  -->  00:05:53,934
And so we need to write code that gives us a random number
85

85

00:05:53,934  -->  00:05:58,756
between zero and the number of questions that we have.
86

86

00:05:58,756  -->  00:06:01,613
So let's do that and I'm going to call this number
87

87

00:06:01,613  -->  00:06:02,946
a simply n okay.
88

88

00:06:05,267  -->  00:06:09,434
And as we did before we're going to use the Math.random
89

89

00:06:10,541  -->  00:06:13,594
method which remember returns a number between zero
90

90

00:06:13,594  -->  00:06:14,427
and one.
91

91

00:06:15,323  -->  00:06:18,060
But we don't want between zero and one, but between zero
92

92

00:06:18,060  -->  00:06:20,432
and the length of our array.
93

93

00:06:20,432  -->  00:06:23,613
And so we need to multiply it to make it a bigger number.
94

94

00:06:23,613  -->  00:06:27,501
And we multiply it by the length of the questions array.
95

95

00:06:27,501  -->  00:06:28,334
So length.
96

96

00:06:31,404  -->  00:06:35,394
So now we just need to use the Math.floor method
97

97

00:06:35,394  -->  00:06:39,561
such as before to remove the decimals from this number
98

98

00:06:40,588  -->  00:06:44,988
because remember this will give us something like this.
99

99

00:06:44,988  -->  00:06:49,037
So that's it in a console, okay of course it doesn't work
100

100

00:06:49,037  -->  00:06:53,204
like this, so let's say we noted the length of three, right?
101

101

00:06:54,729  -->  00:06:56,735
So let's simply do it like this.
102

102

00:06:56,735  -->  00:07:00,334
So this is going to give us a number between zero and three.
103

103

00:07:00,334  -->  00:07:02,286
Like this, right?
104

104

00:07:02,286  -->  00:07:06,453
And so we want to simply cut out these decimal parts here.
105

105

00:07:07,291  -->  00:07:11,549
And that's exactly what the Math.floor method does.
106

106

00:07:11,549  -->  00:07:13,850
And this way our number will always be nicely
107

107

00:07:13,850  -->  00:07:15,600
between zero and two.
108

108

00:07:17,934  -->  00:07:21,601
Okay so now writing questions n will give us
109

109

00:07:22,463  -->  00:07:24,508
a random question.
110

110

00:07:24,508  -->  00:07:26,398
Now all we need is a way to display this question
111

111

00:07:26,398  -->  00:07:28,699
in a console, right?
112

112

00:07:28,699  -->  00:07:31,660
And so as I mentioned before I'm going to use a method
113

113

00:07:31,660  -->  00:07:32,493
for that.
114

114

00:07:33,994  -->  00:07:36,571
And so we're going to use the concepts of prototypes
115

115

00:07:36,571  -->  00:07:39,693
and prototype chain to write this method.
116

116

00:07:39,693  -->  00:07:42,633
Because I should not write this method right here
117

117

00:07:42,633  -->  00:07:44,254
into this object, right?
118

118

00:07:44,254  -->  00:07:47,503
Because then all of these three questions would have
119

119

00:07:47,503  -->  00:07:49,690
this method attached to them.
120

120

00:07:49,690  -->  00:07:52,140
And that would not be ideal.
121

121

00:07:52,140  -->  00:07:55,518
So remember what we discussed in lectures before.
122

122

00:07:55,518  -->  00:07:58,257
And so what we talked about in lectures before is to write
123

123

00:07:58,257  -->  00:08:01,080
the method into the questions prototype property,
124

124

00:08:01,080  -->  00:08:04,685
which is the prototype of all of the instances so if all
125

125

00:08:04,685  -->  00:08:07,674
of the objects created through it.
126

126

00:08:07,674  -->  00:08:09,424
So of q1, q2, and q3.
127

127

00:08:11,757  -->  00:08:15,546
And it worked like this, so question.prototype
128

128

00:08:15,546  -->  00:08:18,506
and now the name of the method and this one is going
129

129

00:08:18,506  -->  00:08:20,923
to be simply displayQuestion.
130

130

00:08:24,241  -->  00:08:27,353
And the first thing of course is to display the question,
131

131

00:08:27,353  -->  00:08:30,103
so console.log and this.question.
132

132

00:08:34,685  -->  00:08:38,368
So when this method will be called on q1, then the cue
133

133

00:08:38,368  -->  00:08:41,442
words here will of course point to q1.
134

134

00:08:41,442  -->  00:08:44,537
And then the question associated to q1 will be retrieved.
135

135

00:08:44,537  -->  00:08:48,704
If we call it on q2, then the cue words here points to q2.
136

136

00:08:50,975  -->  00:08:53,976
And of course the same thing with q3.
137

137

00:08:53,976  -->  00:08:56,842
So that's the cool thing about the prototype chain
138

138

00:08:56,842  -->  00:08:59,897
that this method is not actually attached to one of these
139

139

00:08:59,897  -->  00:09:02,365
questions, but it's in their prototype.
140

140

00:09:02,365  -->  00:09:04,923
And so all of these objects can access it
141

141

00:09:04,923  -->  00:09:07,646
through the prototype chain.
142

142

00:09:07,646  -->  00:09:10,669
Okay so this displays the question, now we need to display
143

143

00:09:10,669  -->  00:09:12,400
the answers.
144

144

00:09:12,400  -->  00:09:15,869
And since we have multiple answers and we also don't know
145

145

00:09:15,869  -->  00:09:18,734
how many these are, so in some cases we have two,
146

146

00:09:18,734  -->  00:09:21,897
and here three, and here even four, we need to loop
147

147

00:09:21,897  -->  00:09:26,634
through all of these answers and display each of them.
148

148

00:09:26,634  -->  00:09:29,199
So we're going to use a four loop for that.
149

149

00:09:29,199  -->  00:09:33,366
So var i equals zero, and then i will be incremented
150

150

00:09:37,510  -->  00:09:41,510
until we reach the length of the answers.length.
151

151

00:09:44,977  -->  00:09:49,144
Okay so we did this a lot of times before, and i++.
152

152

00:09:51,746  -->  00:09:54,625
So imagine that there are two answers, then the length
153

153

00:09:54,625  -->  00:09:58,515
will be two and so this will run when i is zero
154

154

00:09:58,515  -->  00:10:00,082
and when i is one.
155

155

00:10:00,082  -->  00:10:02,786
And then when it's two, this condition here no longer
156

156

00:10:02,786  -->  00:10:06,142
holds true and then the loop stops.
157

157

00:10:06,142  -->  00:10:08,787
And so in here what we're going to do is to console.log
158

158

00:10:08,787  -->  00:10:10,454
each of the answers.
159

159

00:10:11,715  -->  00:10:16,324
So this.answers and then we're going to retrieve
160

160

00:10:16,324  -->  00:10:19,907
in each iteration the corresponding answer.
161

161

00:10:21,045  -->  00:10:25,284
But actually we not only want the answer, but also
162

162

00:10:25,284  -->  00:10:28,084
the number and so for that we're going to use this i
163

163

00:10:28,084  -->  00:10:30,022
counter variable.
164

164

00:10:30,022  -->  00:10:32,760
So it's going to be zero and one in this case.
165

165

00:10:32,760  -->  00:10:36,927
So we want this then we want to add a colon and a space
166

166

00:10:41,843  -->  00:10:44,519
and then the actual answer, okay?
167

167

00:10:44,519  -->  00:10:48,686
So this should already work, so let's test this out.
168

168

00:10:51,486  -->  00:10:54,388
So with this here, we already retrieved the random question
169

169

00:10:54,388  -->  00:10:58,231
now all we need to do is to call the display method on it.
170

170

00:10:58,231  -->  00:11:02,148
To displayQuestion, actually I need to call it.
171

171

00:11:05,843  -->  00:11:08,676
And so now it's time to test this.
172

172

00:11:09,795  -->  00:11:12,930
And we have a (mumbles) in line 335.
173

173

00:11:12,930  -->  00:11:15,796
But it's no problem, let's see what it is.
174

174

00:11:15,796  -->  00:11:19,963
Yes of course, the assignment operator is missing.
175

175

00:11:21,748  -->  00:11:25,915
And another one, and yes of course that's because I'm still
176

176

00:11:27,172  -->  00:11:30,261
missing here the function keyword.
177

177

00:11:30,261  -->  00:11:33,235
Okay so this was totally missing of course.
178

178

00:11:33,235  -->  00:11:36,356
You probably saw it coming already.
179

179

00:11:36,356  -->  00:11:41,133
And again another error here, now it should work.
180

180

00:11:41,133  -->  00:11:44,922
So the question is already here, so is JavaScript
181

181

00:11:44,922  -->  00:11:47,418
the coolest programming language.
182

182

00:11:47,418  -->  00:11:49,483
But the answers are missing here.
183

183

00:11:49,483  -->  00:11:51,656
So something is wrong in here.
184

184

00:11:51,656  -->  00:11:53,915
And so the problem is here.
185

185

00:11:53,915  -->  00:11:55,748
I misspelled this one.
186

186

00:11:58,123  -->  00:11:59,626
And now here we are.
187

187

00:11:59,626  -->  00:12:00,793
So yes and no.
188

188

00:12:01,820  -->  00:12:04,269
So let's reload this and yeah it works
189

189

00:12:04,269  -->  00:12:06,660
for the other questions as well.
190

190

00:12:06,660  -->  00:12:10,586
So here are our three random questions.
191

191

00:12:10,586  -->  00:12:13,198
And let's check out the next step.
192

192

00:12:13,198  -->  00:12:15,517
So now we use the prompt function to ask the user
193

193

00:12:15,517  -->  00:12:17,434
for the correct answer.
194

194

00:12:18,620  -->  00:12:22,787
So we're simply going to do var answer and then remember
195

195

00:12:24,897  -->  00:12:27,183
this prompt, a function that I showed you right
196

196

00:12:27,183  -->  00:12:28,751
in the beginning.
197

197

00:12:28,751  -->  00:12:31,631
All it does is to open like a popup window where the user
198

198

00:12:31,631  -->  00:12:35,919
can input something and what they pass in here is simply
199

199

00:12:35,919  -->  00:12:38,333
the string that will be the question that we want
200

200

00:12:38,333  -->  00:12:40,203
the user to see.
201

201

00:12:40,203  -->  00:12:43,203
So please select the correct answer.
202

202

00:12:45,471  -->  00:12:47,054
So let's test this.
203

203

00:12:48,574  -->  00:12:49,907
And we say zero.
204

204

00:12:51,471  -->  00:12:53,855
So now of course nothing happens because we didn't get code
205

205

00:12:53,855  -->  00:12:57,355
the part that validates the answer, right?
206

206

00:12:58,477  -->  00:13:01,693
But before we do that let me show you something,
207

207

00:13:01,693  -->  00:13:04,767
so I will just log the answer here.
208

208

00:13:04,767  -->  00:13:08,636
So answer and what you see now is that this is actually
209

209

00:13:08,636  -->  00:13:10,575
a string right?
210

210

00:13:10,575  -->  00:13:13,930
If it would be a number it would look like this.
211

211

00:13:13,930  -->  00:13:16,682
So it's blue and it doesn't have of course these quotes.
212

212

00:13:16,682  -->  00:13:20,014
So this is really a string and not a number.
213

213

00:13:20,014  -->  00:13:24,333
But the correct answer that we have here in our questions
214

214

00:13:24,333  -->  00:13:27,662
are of course numbers and that's what we're going
215

215

00:13:27,662  -->  00:13:30,590
to compare the user's answer with and so therefore
216

216

00:13:30,590  -->  00:13:34,942
this also has to be a number and not a string.
217

217

00:13:34,942  -->  00:13:38,911
So what we can do is to use the JavaScript built-in function
218

218

00:13:38,911  -->  00:13:41,161
called parsInt, so parsInt.
219

219

00:13:44,496  -->  00:13:48,628
And this simply converts a string to a number,
220

220

00:13:48,628  -->  00:13:50,931
to an integer number.
221

221

00:13:50,931  -->  00:13:53,264
So parseInt actually with e.
222

222

00:13:54,286  -->  00:13:56,620
Now let's see this again.
223

223

00:13:56,620  -->  00:14:01,343
So number two, and let me check the answer here again.
224

224

00:14:01,343  -->  00:14:04,767
And now you see it's a number so it no longer has these
225

225

00:14:04,767  -->  00:14:07,603
quotes and it's displayed here in the blue color.
226

226

00:14:07,603  -->  00:14:10,143
And now to check the answer if it's correct we are going
227

227

00:14:10,143  -->  00:14:14,143
to write another method here into the prototype.
228

228

00:14:16,484  -->  00:14:19,317
So Question.prototype.checkAnswer.
229

229

00:14:29,058  -->  00:14:31,112
So what should we do here?
230

230

00:14:31,112  -->  00:14:33,818
It's actually very simple, all we need to do is to compare
231

231

00:14:33,818  -->  00:14:37,764
the answer that the user gives with our correct answer.
232

232

00:14:37,764  -->  00:14:41,907
And so we need to actually pass in this answer
233

233

00:14:41,907  -->  00:14:43,381
into this method.
234

234

00:14:43,381  -->  00:14:46,214
So let's simply call it ans, okay.
235

235

00:14:47,946  -->  00:14:50,548
And then in here we just need an if else statement.
236

236

00:14:50,548  -->  00:14:54,804
So if the answer from the user is the same,
237

237

00:14:54,804  -->  00:14:56,804
then our correct answer.
238

238

00:14:58,580  -->  00:15:01,580
There we console.log Correct answer.
239

239

00:15:09,445  -->  00:15:13,612
And if it's not, then we simply log Wrong answer, Try again.
240

240

00:15:20,778  -->  00:15:22,507
And that's it.
241

241

00:15:22,507  -->  00:15:26,987
So now all we need to do is to call this method down here.
242

242

00:15:26,987  -->  00:15:30,161
So again we use our question that we are working on
243

243

00:15:30,161  -->  00:15:34,328
and that is questions(n) and then we use checkAnswer
244

244

00:15:37,220  -->  00:15:40,436
and pass in the answer from our user which is stored
245

245

00:15:40,436  -->  00:15:42,899
in this answer variable.
246

246

00:15:42,899  -->  00:15:45,447
We could of course have stored this here in a separate
247

247

00:15:45,447  -->  00:15:48,354
variable because we're using it here and then again here,
248

248

00:15:48,354  -->  00:15:52,451
but let's just leave it this way right here for now.
249

249

00:15:52,451  -->  00:15:55,297
And now this is actually all we have to do to make this work
250

250

00:15:55,297  -->  00:15:57,047
so let's test it out.
251

251

00:15:58,229  -->  00:16:00,115
So is it the coolest programming language?
252

252

00:16:00,115  -->  00:16:01,683
Yes it is.
253

253

00:16:01,683  -->  00:16:05,073
And that's the correct answer, cool.
254

254

00:16:05,073  -->  00:16:08,852
And the same question and again the same question,
255

255

00:16:08,852  -->  00:16:10,602
what's going on here.
256

256

00:16:11,667  -->  00:16:13,838
And now we have a different one.
257

257

00:16:13,838  -->  00:16:16,483
So what does best describe coding?
258

258

00:16:16,483  -->  00:16:18,233
It's fun and correct.
259

259

00:16:20,405  -->  00:16:23,740
Just to try another answer here.
260

260

00:16:23,740  -->  00:16:24,909
Now it's wrong.
261

261

00:16:24,909  -->  00:16:28,992
Alright so let me see the tasks up here actually.
262

262

00:16:31,501  -->  00:16:35,680
So we completed all of them except number seven.
263

263

00:16:35,680  -->  00:16:38,850
And this one tells us that we should give our code
264

264

00:16:38,850  -->  00:16:41,054
a privacy so that it doesn't interfere
265

265

00:16:41,054  -->  00:16:43,726
with other programmer's code.
266

266

00:16:43,726  -->  00:16:47,695
So what did you learn in this section to do exactly that?
267

267

00:16:47,695  -->  00:16:51,214
That's correct, we're going to use an immediately invoked
268

268

00:16:51,214  -->  00:16:53,583
function expression.
269

269

00:16:53,583  -->  00:16:57,750
And it's really simply we just have to do, function
270

270

00:17:00,432  -->  00:17:01,905
just like this.
271

271

00:17:01,905  -->  00:17:04,759
And then invoke the function at the end.
272

272

00:17:04,759  -->  00:17:07,840
And this creates a new scope in which we define all
273

273

00:17:07,840  -->  00:17:09,923
of this that we did here.
274

274

00:17:12,101  -->  00:17:16,268
And then at the end the function is simply executed.
275

275

00:17:17,553  -->  00:17:20,483
And so if now someone else includes this code in his own
276

276

00:17:20,483  -->  00:17:24,400
project and also has a variable called question
277

277

00:17:26,497  -->  00:17:28,715
or a variable called n or answer, then that one
278

278

00:17:28,715  -->  00:17:31,310
will not interfere with our code.
279

279

00:17:31,310  -->  00:17:34,703
So our code is always safe because no other code is ever
280

280

00:17:34,703  -->  00:17:36,453
going to override it.
281

281

00:17:37,620  -->  00:17:42,110
And that's the main goal if using an (mumbles) like this.
282

282

00:17:42,110  -->  00:17:45,056
So this is really a great use case to show you how important
283

283

00:17:45,056  -->  00:17:46,056
this can be.
284

284

00:17:47,244  -->  00:17:49,613
Let's just test it again to see if it still works,
285

285

00:17:49,613  -->  00:17:51,863
and yeah of course it does.
286

286

00:17:53,618  -->  00:17:57,264
So that was the first basic level of our quiz,
287

287

00:17:57,264  -->  00:17:59,772
now in the next lecture I'm going to show you the solution
288

288

00:17:59,772  -->  00:18:02,068
for the expert level quiz.
289

289

00:18:02,068  -->  00:18:04,068
So stay tuned for that.
