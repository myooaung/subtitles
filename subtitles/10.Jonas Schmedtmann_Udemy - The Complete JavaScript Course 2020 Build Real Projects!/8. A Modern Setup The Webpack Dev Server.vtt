WEBVTT
1
1

00:00:01.270  -->  00:00:02.550
<v Instructor>Now in order to make our lives</v>
2

2

00:00:02.550  -->  00:00:05.260
a bit easier when writing JavaScript we're going to add
3

3

00:00:05.260  -->  00:00:07.580
the webpack dev server to our setup
4

4

00:00:07.580  -->  00:00:09.840
in order to automatically reload the page
5

5

00:00:09.840  -->  00:00:11.493
when we save our code.
6

6

00:00:12.660  -->  00:00:14.920
So besides all the amazing functionality
7

7

00:00:14.920  -->  00:00:17.700
including in webpack it also provides us
8

8

00:00:17.700  -->  00:00:19.420
with a development server.
9

9

00:00:19.420  -->  00:00:22.580
Which will automatically bundle all our JavaScript files,
10

10

00:00:22.580  -->  00:00:24.340
and then reload the app in a browser
11

11

00:00:24.340  -->  00:00:25.970
whenever we change a file.
12

12

00:00:25.970  -->  00:00:28.500
And this is of course a huge time saver
13

13

00:00:28.500  -->  00:00:30.790
and makes coding a lot more fun.
14

14

00:00:30.790  -->  00:00:33.089
Now let's start by actually installing it,
15

15

00:00:33.089  -->  00:00:36.980
because again webpack dev server is an npm package,
16

16

00:00:36.980  -->  00:00:38.580
and so let's install it.
17

17

00:00:38.580  -->  00:00:39.915
So npm
18

18

00:00:39.915  -->  00:00:41.140
install
19

19

00:00:42.100  -->  00:00:42.933
webpack
20

20

00:00:42.933  -->  00:00:44.363
dev server,
21

21

00:00:47.050  -->  00:00:50.400
and then again of course we're gonna save it as a dependency
22

22

00:00:50.400  -->  00:00:51.733
so a dev dependency.
23

23

00:00:53.550  -->  00:00:56.190
Alright, let's go back.
24

24

00:00:56.190  -->  00:00:58.809
Just to check out the package adjacent file,
25

25

00:00:58.809  -->  00:01:01.760
and confirming it of course it is now added here
26

26

00:01:01.760  -->  00:01:03.980
to our dev dependencies.
27

27

00:01:03.980  -->  00:01:06.420
Now in order to configure this dev server,
28

28

00:01:06.420  -->  00:01:08.460
let's go back to our config file here
29

29

00:01:08.460  -->  00:01:10.397
and add yet another field here.
30

30

00:01:10.397  -->  00:01:12.597
And this one is typically called dev server,
31

31

00:01:14.750  -->  00:01:16.700
and in here we pass an object
32

32

00:01:16.700  -->  00:01:19.410
in which can then specify a couple of things.
33

33

00:01:19.410  -->  00:01:21.650
Now the first one is the content base.
34

34

00:01:21.650  -->  00:01:22.520
So content
35

35

00:01:24.020  -->  00:01:24.853
base.
36

36

00:01:24.853  -->  00:01:26.600
And in here we will specify the folder
37

37

00:01:26.600  -->  00:01:29.250
from which webpack should serve our files.
38

38

00:01:29.250  -->  00:01:33.080
And in this case that is the distribution folder.
39

39

00:01:33.080  -->  00:01:35.280
So dist, so this folder here,
40

40

00:01:35.280  -->  00:01:37.550
and that is because basically this is here the code
41

41

00:01:37.550  -->  00:01:39.800
that we're going to ship to the client.
42

42

00:01:39.800  -->  00:01:42.760
So our app, all of the final code of that app,
43

43

00:01:42.760  -->  00:01:45.090
is here inside of this distribution folder,
44

44

00:01:45.090  -->  00:01:48.090
so we will always have an index file with the html,
45

45

00:01:48.090  -->  00:01:50.350
then the JavaScript, image, and CSS,
46

46

00:01:50.350  -->  00:01:51.710
and so as I explained in the beginning
47

47

00:01:51.710  -->  00:01:55.110
the source folder here is only for our development purposes,
48

48

00:01:55.110  -->  00:01:57.770
so all our source code basically goes here.
49

49

00:01:57.770  -->  00:02:00.370
Which then gets compiled or bundled
50

50

00:02:00.370  -->  00:02:04.150
into this distrubution folder as bundle.js
51

51

00:02:04.150  -->  00:02:05.920
and so what we really want to serve
52

52

00:02:05.920  -->  00:02:08.489
is only what's in this folder here, right?
53

53

00:02:08.489  -->  00:02:10.080
And this is actually only thing
54

54

00:02:10.080  -->  00:02:11.830
that we have to specify in this case.
55

55

00:02:11.830  -->  00:02:15.200
We can also specify the port, but a bit more on that later.
56

56

00:02:15.200  -->  00:02:17.270
So for now let's just leave it at this,
57

57

00:02:17.270  -->  00:02:18.360
and now to make it work,
58

58

00:02:18.360  -->  00:02:22.640
again lets just add a new npm script here, okay?
59

59

00:02:22.640  -->  00:02:23.870
And one of the standard names
60

60

00:02:23.870  -->  00:02:26.963
for this kind of stuff is called start.
61

61

00:02:28.910  -->  00:02:31.540
So a script start will always be a script
62

62

00:02:31.540  -->  00:02:33.580
that keeps running in the background
63

63

00:02:33.580  -->  00:02:37.310
and updates the browser as soon as we change our code.
64

64

00:02:37.310  -->  00:02:39.950
Okay so this is again, kind of a standard name
65

65

00:02:39.950  -->  00:02:41.360
just like dev and build.
66

66

00:02:41.360  -->  00:02:43.100
So these are all standard names
67

67

00:02:43.100  -->  00:02:45.930
that you will find in other projects as well.
68

68

00:02:45.930  -->  00:02:47.910
So start and what we want here to happen
69

69

00:02:47.910  -->  00:02:50.060
is to run webpack dev server
70

70

00:02:54.030  -->  00:02:55.920
with the mode of development
71

71

00:02:55.920  -->  00:03:00.920
so just like here we passed the development option
72

72

00:03:01.020  -->  00:03:03.380
and then we can also specify another option
73

73

00:03:03.380  -->  00:03:04.410
which is open.
74

74

00:03:04.410  -->  00:03:07.665
And all what that means is that it'll actually open up
75

75

00:03:07.665  -->  00:03:10.892
the page in the browser automatically, okay?
76

76

00:03:10.892  -->  00:03:12.683
So let's actually try this out.
77

77

00:03:13.517  -->  00:03:15.830
So this is already be enough here,
78

78

00:03:15.830  -->  00:03:19.040
So let's open up our console or terminal
79

79

00:03:19.040  -->  00:03:21.093
and write npm run start.
80

80

00:03:22.520  -->  00:03:24.240
Hit return and
81

81

00:03:24.240  -->  00:03:25.950
here we go.
82

82

00:03:25.950  -->  00:03:28.166
So this is again the same page that we had before,
83

83

00:03:28.166  -->  00:03:30.143
and let's open up the console again,
84

84

00:03:31.080  -->  00:03:33.060
and we see that it is actually working.
85

85

00:03:33.060  -->  00:03:34.640
While there's one thing missing here,
86

86

00:03:34.640  -->  00:03:38.610
but that's just a D5 icon, so that doesn't really matter.
87

87

00:03:38.610  -->  00:03:41.820
So you can just ignore this arrow if you get it as well.
88

88

00:03:41.820  -->  00:03:44.580
So you see that it is actually the exact some thing as here.
89

89

00:03:44.580  -->  00:03:47.010
But the difference is that this code here,
90

90

00:03:47.010  -->  00:03:49.870
is now running on a real webserver,
91

91

00:03:49.870  -->  00:03:51.520
it's a local webserver.
92

92

00:03:51.520  -->  00:03:54.160
So its local host on the port 8080,
93

93

00:03:54.160  -->  00:03:57.720
but it still, it's simulating a real http server,
94

94

00:03:57.720  -->  00:04:00.410
while this one here is just a regular file opening,
95

95

00:04:00.410  -->  00:04:02.810
so you see it here, it's like the file protocol
96

96

00:04:02.810  -->  00:04:06.540
and then the entire path that we have here, okay?
97

97

00:04:06.540  -->  00:04:07.910
So this here is much better
98

98

00:04:07.910  -->  00:04:10.410
because this simulates a real environment
99

99

00:04:10.410  -->  00:04:12.210
with a real http server.
100

100

00:04:12.210  -->  00:04:16.270
So let's close this one up here and leave this one open,
101

101

00:04:16.270  -->  00:04:18.260
and so we can now change some stuff here
102

102

00:04:18.260  -->  00:04:22.430
so instead of returning or exporting the 23 here
103

103

00:04:22.430  -->  00:04:25.680
let's export 99 or something like that
104

104

00:04:25.680  -->  00:04:28.010
and then we can also change this text here
105

105

00:04:28.010  -->  00:04:29.010
in the index.js
106

106

00:04:30.120  -->  00:04:31.470
called
107

107

00:04:31.470  -->  00:04:32.460
test
108

108

00:04:32.460  -->  00:04:33.420
dot js
109

109

00:04:33.420  -->  00:04:36.670
So let's save this too, go back, and you will see
110

110

00:04:36.670  -->  00:04:38.690
that this should now automatically reload,
111

111

00:04:38.690  -->  00:04:40.330
and actually it did not.
112

112

00:04:40.330  -->  00:04:43.340
So let's take a look at the terminal here.
113

113

00:04:43.340  -->  00:04:46.363
And actually says that it did recompile these two files here
114

114

00:04:46.363  -->  00:04:49.993
but still for some reason this is not really working here.
115

115

00:04:51.840  -->  00:04:54.540
And if we reload it ourself then it still says,
116

116

00:04:54.540  -->  00:04:56.540
here it is, just what we had before.
117

117

00:04:56.540  -->  00:04:59.660
So let me try to restart this server here,
118

118

00:04:59.660  -->  00:05:01.750
so in order to stop this process here,
119

119

00:05:01.750  -->  00:05:04.080
because as you see this process here is now running
120

120

00:05:04.080  -->  00:05:05.670
it's not giving us a new line,
121

121

00:05:05.670  -->  00:05:07.960
where we can continue writing commands,
122

122

00:05:07.960  -->  00:05:09.840
so it's still running and if you wanted
123

123

00:05:09.840  -->  00:05:12.686
to open a new one, we can simply open like a new tab
124

124

00:05:12.686  -->  00:05:15.940
by hitting command t and in windows you will have
125

125

00:05:15.940  -->  00:05:18.610
to open a new window, okay?
126

126

00:05:18.610  -->  00:05:22.790
So we can do this or we can also stop this process
127

127

00:05:22.790  -->  00:05:25.760
that's running by hitting control c on the mac,
128

128

00:05:25.760  -->  00:05:28.880
so not command c, but control c, okay?
129

129

00:05:28.880  -->  00:05:32.570
And so not it's stopped and so let's actually run it again,
130

130

00:05:32.570  -->  00:05:33.800
npm run start
131

131

00:05:36.190  -->  00:05:39.460
open a new one that's inspected
132

132

00:05:39.460  -->  00:05:41.910
and well something is not working,
133

133

00:05:41.910  -->  00:05:43.890
so let's go back here,
134

134

00:05:43.890  -->  00:05:45.660
see what's going on,
135

135

00:05:45.660  -->  00:05:48.530
and I think I actually know what is going on here,
136

136

00:05:48.530  -->  00:05:50.870
so when we're running the development server,
137

137

00:05:50.870  -->  00:05:53.260
webpack will bundle our modules together,
138

138

00:05:53.260  -->  00:05:56.410
but it will actually not write it to a file on disk,
139

139

00:05:56.410  -->  00:06:01.120
but instead it will automatically inject it into the html.
140

140

00:06:01.120  -->  00:06:01.953
Okay?
141

141

00:06:01.953  -->  00:06:03.060
And so we could actually go ahead
142

142

00:06:03.060  -->  00:06:05.160
and delete this bundle file here
143

143

00:06:05.160  -->  00:06:07.724
because right now it still looks the same here
144

144

00:06:07.724  -->  00:06:11.260
in this console because it's still simply reading
145

145

00:06:11.260  -->  00:06:13.600
the results from this bundle.js file
146

146

00:06:13.600  -->  00:06:16.860
and not from the one that we're generating on the fly,
147

147

00:06:16.860  -->  00:06:19.100
through the dev server because there's something
148

148

00:06:19.100  -->  00:06:20.330
that's wrong here.
149

149

00:06:20.330  -->  00:06:23.440
And the problem is that the outpost path here is this
150

150

00:06:23.440  -->  00:06:27.000
dist and then slash js and so it will basically try
151

151

00:06:27.000  -->  00:06:30.360
to inject this bundle into an html that is here
152

152

00:06:30.360  -->  00:06:33.280
in the same folder, so also in the JavaScript folder,
153

153

00:06:33.280  -->  00:06:36.640
which is not the case, so the index.html is outside,
154

154

00:06:36.640  -->  00:06:39.910
and so we want to get rid of this part here,
155

155

00:06:39.910  -->  00:06:43.910
so the real path of the output is now only dist,
156

156

00:06:43.910  -->  00:06:47.160
and then we can put the js here in this file name,
157

157

00:06:47.160  -->  00:06:50.620
okay so there's no problem this works just exact same way
158

158

00:06:50.620  -->  00:06:53.430
all we're saying is that really now the output folder
159

159

00:06:53.430  -->  00:06:56.060
is this entire dist folder here, okay?
160

160

00:06:56.060  -->  00:06:58.230
And no longer just a JavaScript folder,
161

161

00:06:58.230  -->  00:07:00.060
and this will be important for something else
162

162

00:07:00.060  -->  00:07:03.170
as I will show you in a minute, after we have this working.
163

163

00:07:03.170  -->  00:07:04.003
Okay?
164

164

00:07:04.003  -->  00:07:07.240
And so this dist folder here is now the exact same as here,
165

165

00:07:07.240  -->  00:07:09.363
and so now it should actually be working.
166

166

00:07:10.220  -->  00:07:12.473
Alright, so let's actually quit this here,
167

167

00:07:13.680  -->  00:07:17.483
clear the console, and run npm start again.
168

168

00:07:19.220  -->  00:07:22.750
Open up the console again and whoa here you see
169

169

00:07:22.750  -->  00:07:25.400
now it's finally working I imported 99
170

170

00:07:25.400  -->  00:07:27.047
from another module called test.js
171

171

00:07:27.047  -->  00:07:31.690
and so that's exactly the change that we did a second ago
172

172

00:07:31.690  -->  00:07:32.920
now let's change it again here,
173

173

00:07:32.920  -->  00:07:35.950
let's say to one, two, three, four, five,
174

174

00:07:35.950  -->  00:07:36.900
save it
175

175

00:07:36.900  -->  00:07:37.890
go back
176

176

00:07:37.890  -->  00:07:39.150
and here we go
177

177

00:07:39.150  -->  00:07:41.031
so now it says one, two, three, four, five
178

178

00:07:41.031  -->  00:07:43.000
awesome right, so without us having
179

179

00:07:43.000  -->  00:07:45.623
to reload anything it does it automatically
180

180

00:07:45.623  -->  00:07:49.640
injected into this file here, and it just works.
181

181

00:07:49.640  -->  00:07:52.090
And let me show you that we can actually even
182

182

00:07:52.090  -->  00:07:56.370
delete this bundle here and it will still keep working
183

183

00:07:56.370  -->  00:07:59.590
so let's now put even more here, eight, nine, ten
184

184

00:07:59.590  -->  00:08:00.980
or just eight, nine, okay
185

185

00:08:02.340  -->  00:08:04.300
And here you go.
186

186

00:08:04.300  -->  00:08:06.760
So the bundle.js file is actually gone,
187

187

00:08:06.760  -->  00:08:09.350
but this here still keeps working.
188

188

00:08:09.350  -->  00:08:11.060
So great right.
189

189

00:08:11.060  -->  00:08:13.330
Now one final thing that I want to do in this video here
190

190

00:08:13.330  -->  00:08:16.360
beside making this development server work for us,
191

191

00:08:16.360  -->  00:08:17.490
is to
192

192

00:08:17.490  -->  00:08:19.100
also copy
193

193

00:08:19.100  -->  00:08:21.080
this index.html file
194

194

00:08:21.080  -->  00:08:23.040
into our distribution folder.
195

195

00:08:23.040  -->  00:08:25.960
So this here is basically the html
196

196

00:08:25.960  -->  00:08:27.770
that holds the html for our app,
197

197

00:08:27.770  -->  00:08:31.380
at least the bare bone structure so to say,
198

198

00:08:31.380  -->  00:08:35.060
and we see that down here we also have this,
199

199

00:08:35.060  -->  00:08:36.850
well this outcome in the script here,
200

200

00:08:36.850  -->  00:08:40.500
I could even just delete it altogether okay?
201

201

00:08:40.500  -->  00:08:43.990
So no script tag in here and this is our source code,
202

202

00:08:43.990  -->  00:08:47.240
now what we want to do with is to automatically copy it
203

203

00:08:47.240  -->  00:08:49.580
inside of the distribution folder
204

204

00:08:49.580  -->  00:08:53.420
and then inject the script tag into it automatically
205

205

00:08:53.420  -->  00:08:57.040
and webpack allows us to do just that very easily.
206

206

00:08:57.040  -->  00:08:58.500
So let's do that.
207

207

00:08:58.500  -->  00:09:01.890
And in order to do that we use something called plug-ins.
208

208

00:09:01.890  -->  00:09:03.640
So remember in webpack we have
209

209

00:09:03.640  -->  00:09:07.070
entry points, output, loaders, and plug-ins.
210

210

00:09:07.070  -->  00:09:09.540
And so let's now talk about plug-ins.
211

211

00:09:09.540  -->  00:09:13.010
So basically plug-ins allow us to do complex processing
212

212

00:09:13.010  -->  00:09:18.010
of our input files, and in this case of our index.html file.
213

213

00:09:18.290  -->  00:09:21.960
So we want to use a plug-in called html webpack plug-in,
214

214

00:09:21.960  -->  00:09:24.050
and in order to use it, once again,
215

215

00:09:24.050  -->  00:09:25.440
you can probably guess it already,
216

216

00:09:25.440  -->  00:09:27.120
we have to install it.
217

217

00:09:27.120  -->  00:09:29.623
So we go back to our terminal here,
218

218

00:09:30.990  -->  00:09:34.460
and now we using this new tab here that I created earlier.
219

219

00:09:34.460  -->  00:09:36.480
So npm install
220

220

00:09:36.480  -->  00:09:37.320
html webpack
221

221

00:09:38.900  -->  00:09:39.733
plug-in,
222

222

00:09:42.260  -->  00:09:45.173
give it a save dev and then here we go.
223

223

00:09:46.370  -->  00:09:47.203
Okay?
224

224

00:09:47.203  -->  00:09:50.740
Now just like before we have to require this package
225

225

00:09:50.740  -->  00:09:52.800
and save it to a variable.
226

226

00:09:52.800  -->  00:09:56.090
So const, and the standard here is to simply call it
227

227

00:09:56.090  -->  00:09:58.400
html webpack plug-in
228

228

00:10:02.971  -->  00:10:04.550
and then use require,
229

229

00:10:04.550  -->  00:10:06.943
and then use the name of the package of course.
230

230

00:10:11.880  -->  00:10:12.713
Alright.
231

231

00:10:12.713  -->  00:10:16.130
So now we installed and required, so included basically,
232

232

00:10:16.130  -->  00:10:18.690
the html webpack plug-in.
233

233

00:10:18.690  -->  00:10:22.380
And so now, in here, we can specify our next property,
234

234

00:10:22.380  -->  00:10:23.980
and this one is called plug-ins.
235

235

00:10:25.030  -->  00:10:28.070
And plug-ins basically receives an array
236

236

00:10:28.070  -->  00:10:30.610
of all the plug-ins that we are using.
237

237

00:10:30.610  -->  00:10:32.490
And so the first, and actually only one,
238

238

00:10:32.490  -->  00:10:34.650
is of course our html webpack plug-in,
239

239

00:10:34.650  -->  00:10:38.530
and here we are missing a comma here, of course
240

240

00:10:38.530  -->  00:10:39.410
And alright.
241

241

00:10:39.410  -->  00:10:44.290
So in order to use it, we use new and a html webpack plug-in
242

242

00:10:44.290  -->  00:10:47.560
So this is the variable from up here,
243

243

00:10:47.560  -->  00:10:50.767
because basically this is here like a function constructor,
244

244

00:10:50.767  -->  00:10:51.910
so it's like a new class.
245

245

00:10:51.910  -->  00:10:54.080
And so that's is why we are using new here,
246

246

00:10:54.080  -->  00:10:56.080
as we already used to do, right?
247

247

00:10:56.080  -->  00:10:58.110
So new html webpack plug-in
248

248

00:10:59.020  -->  00:11:01.540
and then in here we pass a couple of options,
249

249

00:11:01.540  -->  00:11:04.470
again using an object,
250

250

00:11:04.470  -->  00:11:05.303
okay?
251

251

00:11:05.303  -->  00:11:07.190
So this is a very common pattern in modern JavaScript
252

252

00:11:07.190  -->  00:11:11.380
actually is to always pass options using an object like this
253

253

00:11:11.380  -->  00:11:13.520
so this entire configuration right her is an object
254

254

00:11:13.520  -->  00:11:18.060
and so is the options here for this plug-in, okay?
255

255

00:11:18.060  -->  00:11:19.490
So remember what we want to do.
256

256

00:11:19.490  -->  00:11:20.840
So we want to copy each time
257

257

00:11:20.840  -->  00:11:23.710
that we are bundling our JavaScript files,
258

258

00:11:23.710  -->  00:11:26.447
we also want to copy our source html
259

259

00:11:26.447  -->  00:11:28.450
into the distribution folder
260

260

00:11:28.450  -->  00:11:31.400
and include the script to our JavaScript bundle
261

261

00:11:31.400  -->  00:11:32.970
so basically again this is our source
262

262

00:11:32.970  -->  00:11:35.900
and this index here will then be our final
263

263

00:11:35.900  -->  00:11:39.490
and ready to go to production html file, okay?
264

264

00:11:39.490  -->  00:11:41.470
So we specify the file name,
265

265

00:11:44.292  -->  00:11:46.290
and then simply call it index.html,
266

266

00:11:48.360  -->  00:11:49.520
html
267

267

00:11:49.520  -->  00:11:51.810
and then we use the template
268

268

00:11:53.740  -->  00:11:54.573
property
269

269

00:11:54.573  -->  00:11:58.360
so template is basically our starting html file,
270

270

00:11:58.360  -->  00:12:02.100
and this one is located here at source,
271

271

00:12:02.100  -->  00:12:04.033
and then index, right?
272

272

00:12:05.580  -->  00:12:08.730
So again, current directory, then source,
273

273

00:12:08.730  -->  00:12:11.000
and then index.html
274

274

00:12:11.000  -->  00:12:12.560
Now we can also use this plug-in
275

275

00:12:12.560  -->  00:12:15.010
to actually create a new html file
276

276

00:12:15.010  -->  00:12:18.340
from scratch automatically without providing any template.
277

277

00:12:18.340  -->  00:12:21.540
But that's kind of outside the scope of this tutorial, okay?
278

278

00:12:21.540  -->  00:12:23.210
But you will see that' there are some apps
279

279

00:12:23.210  -->  00:12:25.870
that don't even have an index.html file
280

280

00:12:25.870  -->  00:12:26.970
in their source code
281

281

00:12:26.970  -->  00:12:28.690
but instead it's automatically generated
282

282

00:12:28.690  -->  00:12:31.170
on the fly by webpack.
283

283

00:12:31.170  -->  00:12:32.003
Alright
284

284

00:12:32.003  -->  00:12:34.240
So let's get rid of this one here.
285

285

00:12:34.240  -->  00:12:35.846
So delete.
286

286

00:12:35.846  -->  00:12:39.070
And let's actually check out if this is going to work.
287

287

00:12:39.070  -->  00:12:41.770
So I'm stopping this
288

288

00:12:41.770  -->  00:12:43.100
this process here,
289

289

00:12:43.100  -->  00:12:45.960
and now you actually see here in the background
290

290

00:12:45.960  -->  00:12:48.840
that it says disconnected, so it immediately noticed
291

291

00:12:48.840  -->  00:12:50.750
that we disconnected our server here.
292

292

00:12:50.750  -->  00:12:54.432
So let's now run it again and it will open in a new tab
293

293

00:12:54.432  -->  00:12:56.490
and whoa here we go.
294

294

00:12:56.490  -->  00:12:57.440
So you will see that right now
295

295

00:12:57.440  -->  00:12:59.180
we already have the forkify app
296

296

00:12:59.180  -->  00:13:01.453
and that's because webpack already copied,
297

297

00:13:02.390  -->  00:13:07.090
you see it copied this index with html file into this folder
298

298

00:13:07.090  -->  00:13:09.860
and as I mentioned it's not really visible right now,
299

299

00:13:09.860  -->  00:13:13.110
because it's not saving this data on the disk, okay?
300

300

00:13:13.110  -->  00:13:16.000
So when we're using the dev server it will not save
301

301

00:13:16.000  -->  00:13:20.510
the files on disk, it will simply stream them to the server
302

302

00:13:20.510  -->  00:13:24.120
Okay so if you go now and open up inspect,
303

303

00:13:24.120  -->  00:13:26.805
then here's, or course, the exact same code as we had before
304

304

00:13:26.805  -->  00:13:30.290
and that's because, if we inspect the elements here,
305

305

00:13:30.290  -->  00:13:34.620
you will see that it injected this script okay?
306

306

00:13:34.620  -->  00:13:38.230
So just like magic this worked, just fine.
307

307

00:13:38.230  -->  00:13:40.580
Now if you wanted to actually see these files here on disk
308

308

00:13:40.580  -->  00:13:43.530
we would have to run one of these commands,
309

309

00:13:43.530  -->  00:13:45.530
so for example here dev or build,
310

310

00:13:45.530  -->  00:13:48.100
and this one then will actually to the bundling
311

311

00:13:48.100  -->  00:13:49.330
and save it on disk.
312

312

00:13:49.330  -->  00:13:50.600
So let's do dev here
313

313

00:13:51.440  -->  00:13:53.573
here in this other tab that we have,
314

314

00:13:54.490  -->  00:13:55.630
so npm
315

315

00:13:57.050  -->  00:13:57.893
run dev.
316

316

00:13:59.670  -->  00:14:03.720
Then it does it work, and now you see index.html is here
317

317

00:14:03.720  -->  00:14:06.030
and bundle as well.
318

318

00:14:06.030  -->  00:14:07.200
And now you see down here,
319

319

00:14:07.200  -->  00:14:08.740
when we come here,
320

320

00:14:08.740  -->  00:14:11.550
here is the final js/bundle.js
321

321

00:14:11.550  -->  00:14:14.703
and this is the file name that we specified here
322

322

00:14:14.703  -->  00:14:16.480
in this config, right?
323

323

00:14:16.480  -->  00:14:18.110
So exactly this one here.
324

324

00:14:18.110  -->  00:14:21.320
So this seems like magic but that's just the work
325

325

00:14:21.320  -->  00:14:23.530
that webpack does here behind the scenes,
326

326

00:14:23.530  -->  00:14:26.037
and it is a fantastic tool, and very helpful,
327

327

00:14:26.037  -->  00:14:28.210
in our development workflow.
328

328

00:14:28.210  -->  00:14:30.410
I agree that it is a bit difficult to set up,
329

329

00:14:30.410  -->  00:14:32.070
there are easier options out there,
330

330

00:14:32.070  -->  00:14:34.060
but this is also the most powerful.
331

331

00:14:34.060  -->  00:14:36.240
And so once you have the setup you can then use it
332

332

00:14:36.240  -->  00:14:38.330
in the future for your own projects,
333

333

00:14:38.330  -->  00:14:41.850
and of course do some changes to make it even better,
334

334

00:14:41.850  -->  00:14:44.970
but for our project this is more than fine just like this.
335

335

00:14:44.970  -->  00:14:48.150
The only thing that is missing now is to include babel,
336

336

00:14:48.150  -->  00:14:50.800
so in order to convert ES6 down to ES5,
337

337

00:14:50.800  -->  00:14:52.000
and so that's what we are going to do next,
338

338

00:14:52.000  -->  00:14:53.163
in in the next lecture.
