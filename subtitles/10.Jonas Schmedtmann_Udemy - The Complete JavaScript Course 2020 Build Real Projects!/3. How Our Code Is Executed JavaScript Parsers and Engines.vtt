WEBVTT
1
1

00:00:01.389  -->  00:00:03.819
<v ->[Course Instructor] So, in this first theoretic lecture</v>
2

2

00:00:03.819  -->  00:00:07.209
we will just very quickly see how the JavaScript codes
3

3

00:00:07.209  -->  00:00:10.126
that we write is actually executed.
4

4

00:00:11.394  -->  00:00:15.565
So, JavaScript is always hosted in some environment.
5

5

00:00:15.565  -->  00:00:17.933
And that is most typically a browser
6

6

00:00:17.933  -->  00:00:22.508
such a Google Chrome, Firefox, Safari, et cetera.
7

7

00:00:22.508  -->  00:00:25.644
This is where JavaScript runs.
8

8

00:00:25.644  -->  00:00:30.038
There can also be other hosts such as the NoJS web server,
9

9

00:00:30.038  -->  00:00:34.887
or even some applications that accept JavaScript code input.
10

10

00:00:34.887  -->  00:00:37.495
We will, however, always just focus on the browser
11

11

00:00:37.495  -->  00:00:38.605
in this course.
12

12

00:00:38.605  -->  00:00:42.174
Which is exactly what we have been doing so far.
13

13

00:00:42.174  -->  00:00:44.347
So when we write our JavaScript code,
14

14

00:00:44.347  -->  00:00:46.738
and actually want to run it,
15

15

00:00:46.738  -->  00:00:50.139
there's a lot of stuff happening behind the scenes.
16

16

00:00:50.139  -->  00:00:54.370
So what happens is that the host where JavaScript is hosted,
17

17

00:00:54.370  -->  00:00:56.425
has some kind of JavaScript engine
18

18

00:00:56.425  -->  00:01:00.160
that takes our code and executes it.
19

19

00:01:00.160  -->  00:01:01.553
So in very simple terms,
20

20

00:01:01.553  -->  00:01:03.939
a JavaScript engine is a program
21

21

00:01:03.939  -->  00:01:06.439
that executes JavaScript code.
22

22

00:01:07.318  -->  00:01:10.722
There are many different engines out there,
23

23

00:01:10.722  -->  00:01:13.213
like Google's V8 engine, that is used in Google Chrome.
24

24

00:01:13.213  -->  00:01:14.728
But there are others.
25

25

00:01:14.728  -->  00:01:19.500
Like we know SpiderMonkey, JavaScript core, and many more.
26

26

00:01:19.500  -->  00:01:23.424
Now, the first thing that happens inside the engine,
27

27

00:01:23.424  -->  00:01:26.474
is that our code is parsed by a parser,
28

28

00:01:26.474  -->  00:01:29.902
which basically reads our code line by line,
29

29

00:01:29.902  -->  00:01:33.419
and checks if the syntax of the code that we gave it,
30

30

00:01:33.419  -->  00:01:34.781
is correct.
31

31

00:01:34.781  -->  00:01:38.173
So this means that the parser knows the JavaScript rules
32

32

00:01:38.173  -->  00:01:42.104
and how it has to be written in order to be correct,
33

33

00:01:42.104  -->  00:01:43.602
to be valid.
34

34

00:01:43.602  -->  00:01:45.221
And if you make some mistakes,
35

35

00:01:45.221  -->  00:01:49.388
it basically throws an error and stops the execution.
36

36

00:01:50.233  -->  00:01:51.748
If everything is correct though,
37

37

00:01:51.748  -->  00:01:54.791
then the parser produces a data structure
38

38

00:01:54.791  -->  00:01:57.416
known as the Abstract Syntax Tree,
39

39

00:01:57.416  -->  00:02:01.419
which is then translated into machine code.
40

40

00:02:01.419  -->  00:02:03.625
So this code is no longer JavaScript code,
41

41

00:02:03.625  -->  00:02:07.360
but a code, or let's say a set of instructions,
42

42

00:02:07.360  -->  00:02:12.297
that can be executed directly by the computer's processor.
43

43

00:02:12.297  -->  00:02:15.088
And it's only when our code already converted
44

44

00:02:15.088  -->  00:02:19.255
to a machine code, actually runs and does its work.
45

45

00:02:21.192  -->  00:02:24.431
So it's not really important that you really memorize
46

46

00:02:24.431  -->  00:02:25.661
all of this.
47

47

00:02:25.661  -->  00:02:27.492
I just want you to get the basic idea
48

48

00:02:27.492  -->  00:02:32.410
of what actually happens once we choose to run our code.
49

49

00:02:32.410  -->  00:02:35.768
And there is actually way more going on behind the scenes.
50

50

00:02:35.768  -->  00:02:38.829
And different engines do things in a slightly different way.
51

51

00:02:38.829  -->  00:02:41.067
But this is absolutely enough for us
52

52

00:02:41.067  -->  00:02:43.361
to understand at this point.
53

53

00:02:43.361  -->  00:02:46.778
So let's now move on to the next lecture.
