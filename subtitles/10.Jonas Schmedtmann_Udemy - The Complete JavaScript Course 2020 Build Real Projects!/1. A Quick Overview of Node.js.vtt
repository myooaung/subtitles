WEBVTT
1
1

00:00:01.210  -->  00:00:03.580
<v Jonas>Hey there, how are you doing today?</v>
2

2

00:00:03.580  -->  00:00:06.800
So I hope that you've been learning JavaScript like crazy
3

3

00:00:06.800  -->  00:00:08.838
and finish this course with a deep understanding
4

4

00:00:08.838  -->  00:00:10.570
of how the language works
5

5

00:00:10.570  -->  00:00:13.710
and everything we can do with it in a browser.
6

6

00:00:13.710  -->  00:00:15.443
Now maybe you are aware of the fact
7

7

00:00:15.443  -->  00:00:17.510
that we can actually also use JavaScript
8

8

00:00:17.510  -->  00:00:18.980
outside of the browser.
9

9

00:00:18.980  -->  00:00:21.340
And the most popular way of doing so
10

10

00:00:21.340  -->  00:00:24.260
is by using a technology called Node.js
11

11

00:00:24.260  -->  00:00:26.550
which we can use to create web servers
12

12

00:00:26.550  -->  00:00:29.820
and build the back ends of our web applications.
13

13

00:00:29.820  -->  00:00:32.070
So in this bonus section I wanna give you
14

14

00:00:32.070  -->  00:00:35.070
a very brief crash course into Node.js
15

15

00:00:35.070  -->  00:00:36.700
by building a simple project
16

16

00:00:36.700  -->  00:00:39.830
using this modern and quite popular technology,
17

17

00:00:39.830  -->  00:00:42.600
because in fact we will still be using JavaScript,
18

18

00:00:42.600  -->  00:00:44.640
and so I thought it made perfect sense
19

19

00:00:44.640  -->  00:00:46.580
to include this topic as a bonus
20

20

00:00:46.580  -->  00:00:49.140
to The Complete JavaScript Course.
21

21

00:00:49.140  -->  00:00:51.430
So this is a small project that we're gonna build
22

22

00:00:51.430  -->  00:00:54.310
with the terrible name, The Laptop Store.
23

23

00:00:54.310  -->  00:00:56.940
Okay and so we have these five laptops here.
24

24

00:00:56.940  -->  00:00:59.610
And this page is actually completely generated
25

25

00:00:59.610  -->  00:01:02.120
on a Node.js web server, okay.
26

26

00:01:02.120  -->  00:01:03.930
So when you click this button here,
27

27

00:01:03.930  -->  00:01:06.790
notice how the URL changes from products
28

28

00:01:06.790  -->  00:01:09.930
to laptop with the ID of zero.
29

29

00:01:09.930  -->  00:01:12.130
So this laptop here has the ID zero.
30

30

00:01:12.130  -->  00:01:14.460
We can go back and the Node.js again
31

31

00:01:14.460  -->  00:01:16.180
generates this page here.
32

32

00:01:16.180  -->  00:01:18.020
Then when you check out the second one,
33

33

00:01:18.020  -->  00:01:20.850
this one has the ID number one.
34

34

00:01:20.850  -->  00:01:21.710
And as you can guess,
35

35

00:01:21.710  -->  00:01:23.960
this one will have the ID number two,
36

36

00:01:23.960  -->  00:01:25.620
three and four, okay.
37

37

00:01:25.620  -->  00:01:26.760
So again all of these are
38

38

00:01:26.760  -->  00:01:29.090
automatically generated by Node.js,
39

39

00:01:29.090  -->  00:01:30.430
and so that is exactly
40

40

00:01:30.430  -->  00:01:31.530
what we're gonna build
41

41

00:01:31.530  -->  00:01:34.110
throughout this small crash course.
42

42

00:01:34.110  -->  00:01:35.960
So I hope that sounds and looks
43

43

00:01:35.960  -->  00:01:37.380
super exciting to you.
44

44

00:01:37.380  -->  00:01:39.430
And so let's now dive right in
45

45

00:01:39.430  -->  00:01:41.230
and start by getting a quick idea
46

46

00:01:41.230  -->  00:01:43.043
of what Node.js actually is.
47

47

00:01:44.710  -->  00:01:46.320
So the official definition
48

48

00:01:46.320  -->  00:01:48.870
is that Node.js is a JavaScript runtime
49

49

00:01:48.870  -->  00:01:51.570
built on the V8 JavaScript engine.
50

50

00:01:51.570  -->  00:01:53.370
Now that sounds a bit crazy,
51

51

00:01:53.370  -->  00:01:55.500
so what does it actually mean?
52

52

00:01:55.500  -->  00:01:57.370
Well, let's start by trying to understand
53

53

00:01:57.370  -->  00:02:00.433
what a JavaScript runtime and a V8 engine are.
54

54

00:02:01.580  -->  00:02:03.300
So as I mentioned in the beginning,
55

55

00:02:03.300  -->  00:02:05.050
if you have used JavaScript before,
56

56

00:02:05.050  -->  00:02:08.350
it was probably always just outside a browser, right?
57

57

00:02:08.350  -->  00:02:10.270
Because any browser natively understands
58

58

00:02:10.270  -->  00:02:12.910
HTML, CSS, and JavaScript.
59

59

00:02:12.910  -->  00:02:13.990
And no matter if you write
60

60

00:02:13.990  -->  00:02:15.130
Vanilla JavaScript
61

61

00:02:15.130  -->  00:02:17.030
or React or Angular,
62

62

00:02:17.030  -->  00:02:18.310
it's all just JavaScript
63

63

00:02:18.310  -->  00:02:19.380
that gets executed
64

64

00:02:19.380  -->  00:02:20.940
right in the browser.
65

65

00:02:20.940  -->  00:02:22.240
So in this case the browser
66

66

00:02:22.240  -->  00:02:24.080
is the JavaScript runtime.
67

67

00:02:24.080  -->  00:02:25.060
But what if we could take
68

68

00:02:25.060  -->  00:02:27.010
JavaScript out of the browser
69

69

00:02:27.010  -->  00:02:29.230
and simply execute our code somewhere else
70

70

00:02:29.230  -->  00:02:33.120
without all the restrictions that we have in the browser?
71

71

00:02:33.120  -->  00:02:35.570
Well, it turns out that we actually can,
72

72

00:02:35.570  -->  00:02:38.150
and the solution for this as you can guess by now
73

73

00:02:38.150  -->  00:02:40.350
is called Node.js.
74

74

00:02:40.350  -->  00:02:43.550
And so Node.js is just another JavaScript runtime.
75

75

00:02:43.550  -->  00:02:46.170
It's just like a container, like an environment
76

76

00:02:46.170  -->  00:02:49.580
in which a program written in JavaScript can be executed,
77

77

00:02:49.580  -->  00:02:53.510
but outside of any browser whatsoever, alright?
78

78

00:02:53.510  -->  00:02:56.000
It's actually a bit more complex than that of course,
79

79

00:02:56.000  -->  00:02:58.030
but for now this is enough.
80

80

00:02:58.030  -->  00:03:00.640
Now who actually does execute a code,
81

81

00:03:00.640  -->  00:03:01.960
if not the browser?
82

82

00:03:01.960  -->  00:03:03.630
And that's where the V8 engine,
83

83

00:03:03.630  -->  00:03:05.450
developed by Google, comes into play,
84

84

00:03:05.450  -->  00:03:07.750
because that is exactly where JavaScript code
85

85

00:03:07.750  -->  00:03:11.500
will be parsed and run in Node.js, okay?
86

86

00:03:11.500  -->  00:03:13.730
So I hope that the definition of Node.js
87

87

00:03:13.730  -->  00:03:17.230
being a JavaScript runtime built on the V8 engine
88

88

00:03:17.230  -->  00:03:18.900
makes a lot more sense to you now.
89

89

00:03:18.900  -->  00:03:20.800
And again remember that this is just
90

90

00:03:20.800  -->  00:03:22.330
a very high level overview
91

91

00:03:22.330  -->  00:03:24.650
of what Node is and how it works,
92

92

00:03:24.650  -->  00:03:26.450
but in this small crash course,
93

93

00:03:26.450  -->  00:03:29.350
all I want is to really just give you a quick idea
94

94

00:03:29.350  -->  00:03:32.673
of what Node is and what amazing things we can do with it.
95

95

00:03:33.910  -->  00:03:37.170
Anyway now that we have JavaScript outside of the browser
96

96

00:03:37.170  -->  00:03:40.230
in a kind of standalone environment which is Node.js,
97

97

00:03:40.230  -->  00:03:42.810
we can do so much more things with JavaScript
98

98

00:03:42.810  -->  00:03:44.790
that were completely impossible before,
99

99

00:03:44.790  -->  00:03:46.640
like accessing the file system
100

100

00:03:46.640  -->  00:03:48.640
or better networking capabilities
101

101

00:03:48.640  -->  00:03:50.840
are now possible with Node.js.
102

102

00:03:50.840  -->  00:03:52.690
And all these factors together
103

103

00:03:52.690  -->  00:03:54.290
give us the perfect conditions
104

104

00:03:54.290  -->  00:03:56.830
for using Node.js as a web server,
105

105

00:03:56.830  -->  00:03:59.150
meaning that now we can finally use JavaScript
106

106

00:03:59.150  -->  00:04:01.350
on the server side of web development
107

107

00:04:01.350  -->  00:04:04.800
in order to build fast highly scalable network applications
108

108

00:04:04.800  -->  00:04:08.870
for powering the back end for websites or applications.
109

109

00:04:08.870  -->  00:04:12.020
Okay and so let's do exactly that in the next video
110

110

00:04:12.020  -->  00:04:13.220
where we're gonna start building
111

111

00:04:13.220  -->  00:04:14.910
that project that I showed you.
112

112

00:04:14.910  -->  00:04:16.410
So I hope you are excited for that
113

113

00:04:16.410  -->  00:04:18.163
and see you in a second.
