1
1

00:00:01,196  -->  00:00:03,192
<v Instructor>In this lecture we will talk</v>
2

2

00:00:03,192  -->  00:00:06,580
about another way that we can create objects
3

3

00:00:06,580  -->  00:00:08,786
that inherit from a prototype,
4

4

00:00:08,786  -->  00:00:11,786
and that's the object.create method.
5

5

00:00:13,338  -->  00:00:16,694
We have seen the function constructor pattern
6

6

00:00:16,694  -->  00:00:20,808
to create objects from a blueprint in the last two lectures,
7

7

00:00:20,808  -->  00:00:25,108
but there are more ways to create objects and inheritance.
8

8

00:00:25,108  -->  00:00:29,205
Let's talk about the object.create method now.
9

9

00:00:29,205  -->  00:00:32,455
Let's first comment out this code here.
10

10

00:00:34,201  -->  00:00:35,034
Okay.
11

11

00:00:37,973  -->  00:00:40,056
So this is object.create.
12

12

00:00:46,673  -->  00:00:47,506
All right.
13

13

00:00:49,017  -->  00:00:53,592
With the object.create method things work a bit different.
14

14

00:00:53,592  -->  00:00:56,872
In this case, we first define an object
15

15

00:00:56,872  -->  00:01:01,282
that will act as the prototype and then create a new object
16

16

00:01:01,282  -->  00:01:04,329
based on that very prototype.
17

17

00:01:04,329  -->  00:01:06,120
Let's do that right now.
18

18

00:01:06,120  -->  00:01:08,725
We're gonna recreate the person example
19

19

00:01:08,725  -->  00:01:12,146
that we used for the function constructor lecture.
20

20

00:01:12,146  -->  00:01:16,628
First, we have to write the prototype as a simple object.
21

21

00:01:16,628  -->  00:01:20,461
I'm gonna call it personProto, so personProto,
22

22

00:01:21,976  -->  00:01:24,819
and now you see we no longer use the capital P
23

23

00:01:24,819  -->  00:01:28,986
in the beginning because it's not a function constructor.
24

24

00:01:30,535  -->  00:01:33,168
What I want in a prototype, such as before,
25

25

00:01:33,168  -->  00:01:36,821
is to calculate age method, so we already know the why
26

26

00:01:36,821  -->  00:01:38,731
and how inheritance work.
27

27

00:01:38,731  -->  00:01:41,107
Now we're just doing it in a different way.
28

28

00:01:41,107  -->  00:01:43,390
Instead of using function constructors,
29

29

00:01:43,390  -->  00:01:45,893
we will do it the object.create way,
30

30

00:01:45,893  -->  00:01:48,476
so it's simply a different way.
31

31

00:01:50,211  -->  00:01:53,461
All right so calculateAge and function,
32

32

00:01:57,573  -->  00:02:01,114
and again I'm gonna console.log it
33

33

00:02:01,114  -->  00:02:04,947
(2016 - this.yearOfBirth).
34

34

00:02:08,513  -->  00:02:10,853
Now there is no year of birth here anywhere,
35

35

00:02:10,853  -->  00:02:14,762
but we're going to take care of that later.
36

36

00:02:14,762  -->  00:02:17,929
Okay, and now let's create John again.
37

37

00:02:22,189  -->  00:02:24,772
So we simply say Object.create,
38

38

00:02:26,514  -->  00:02:29,069
and then we simply pass it the object
39

39

00:02:29,069  -->  00:02:31,932
that we define to be the prototype object
40

40

00:02:31,932  -->  00:02:34,099
which will be personProto.
41

41

00:02:36,300  -->  00:02:39,550
Okay, so let's see this in the console.
42

42

00:02:40,695  -->  00:02:43,034
All right, and I'm not gonna console.log this,
43

43

00:02:43,034  -->  00:02:45,055
so I will just do it the way we did before
44

44

00:02:45,055  -->  00:02:49,222
in the last lecture so John, and here is the object.
45

45

00:02:50,120  -->  00:02:52,713
Now it's empty, there's nothing here, right?
46

46

00:02:52,713  -->  00:02:55,060
But we still have to prototype,
47

47

00:02:55,060  -->  00:02:58,284
and this already has our calculate age function,
48

48

00:02:58,284  -->  00:03:01,525
so this looks a little bit like before, doesn't it?
49

49

00:03:01,525  -->  00:03:03,766
Now we just have to fill this John object here
50

50

00:03:03,766  -->  00:03:05,199
with our data.
51

51

00:03:05,199  -->  00:03:08,958
So we can simply do it the old way, right?
52

52

00:03:08,958  -->  00:03:10,708
So john.name is John.
53

53

00:03:14,473  -->  00:03:16,556
John.yearOfBirth is 1990.
54

54

00:03:21,974  -->  00:03:23,974
And john.job is teacher.
55

55

00:03:28,267  -->  00:03:31,350
And if I reload this now and say John
56

56

00:03:32,538  -->  00:03:34,473
then here we have our object,
57

57

00:03:34,473  -->  00:03:37,016
and it looks a lot like it did before
58

58

00:03:37,016  -->  00:03:39,435
with the function constructor, right?
59

59

00:03:39,435  -->  00:03:42,378
So we have our data here the job, name and year,
60

60

00:03:42,378  -->  00:03:44,441
and then the prototype which contains
61

61

00:03:44,441  -->  00:03:46,668
our calculate age function.
62

62

00:03:46,668  -->  00:03:49,466
However, it was not ideal the way
63

63

00:03:49,466  -->  00:03:52,320
that we had to fill this here, right?
64

64

00:03:52,320  -->  00:03:54,611
The object that we created was empty
65

65

00:03:54,611  -->  00:03:57,919
and then we had to fill it here with the data,
66

66

00:03:57,919  -->  00:03:59,968
so this time we're going to do it a different way
67

67

00:03:59,968  -->  00:04:03,598
because the object.create accepts a second parameter,
68

68

00:04:03,598  -->  00:04:07,535
so let's now do that for another person.
69

69

00:04:07,535  -->  00:04:09,702
Jane = Object.create.
70

70

00:04:14,620  -->  00:04:17,485
And of course the prototype is, again, personProto,
71

71

00:04:17,485  -->  00:04:20,404
but then we can pass a second argument.
72

72

00:04:20,404  -->  00:04:22,904
Which is an object specifying the data
73

73

00:04:22,904  -->  00:04:26,428
that we want to have in the object so name,
74

74

00:04:26,428  -->  00:04:29,103
and now we cannot simply put the name here,
75

75

00:04:29,103  -->  00:04:33,270
but we have to do it in this rather strange way like this.
76

76

00:04:35,266  -->  00:04:39,433
We have to say value and then we can say Jane, okay?
77

77

00:04:41,506  -->  00:04:44,189
This looks a bit strange, but it's actually how it works,
78

78

00:04:44,189  -->  00:04:48,356
so there's no way around doing it like this, so yearOfBirth
79

79

00:04:50,618  -->  00:04:53,035
and then again value and 1969
80

80

00:04:57,076  -->  00:04:58,493
and then the job.
81

81

00:05:01,563  -->  00:05:04,813
And once again value and then designer.
82

82

00:05:07,417  -->  00:05:10,084
Okay, and let's now reload this.
83

83

00:05:11,965  -->  00:05:13,632
John again and Jane,
84

84

00:05:19,026  -->  00:05:22,326
so both share the same prototype, as you can see here,
85

85

00:05:22,326  -->  00:05:25,290
because both have the calculate age method,
86

86

00:05:25,290  -->  00:05:29,333
and then they have both their own type of data in there.
87

87

00:05:29,333  -->  00:05:31,933
Okay, so let's think about this again.
88

88

00:05:31,933  -->  00:05:34,433
The difference between object.create
89

89

00:05:34,433  -->  00:05:36,734
and the function constructor pattern is
90

90

00:05:36,734  -->  00:05:40,901
that object.create builds an object that inherits directly
91

91

00:05:41,785  -->  00:05:45,626
from the one that we passed into the first argument.
92

92

00:05:45,626  -->  00:05:48,767
While, on the other hand, the function constructor
93

93

00:05:48,767  -->  00:05:50,955
the newly created object inherits
94

94

00:05:50,955  -->  00:05:54,195
from the constructor's prototype property, right,
95

95

00:05:54,195  -->  00:05:55,838
so that's the big difference,
96

96

00:05:55,838  -->  00:05:58,269
and I hope this makes sense to you.
97

97

00:05:58,269  -->  00:06:02,107
Actually, one of the biggest benefits of object.create is
98

98

00:06:02,107  -->  00:06:04,110
that it allows us to implement
99

99

00:06:04,110  -->  00:06:08,049
a really complex inheritant structures in an easier way
100

100

00:06:08,049  -->  00:06:10,953
than function constructors because it allows us
101

101

00:06:10,953  -->  00:06:15,120
to directly specify which object should be a prototype.
102

102

00:06:16,916  -->  00:06:20,552
All right, so function constructors and object.create will
103

103

00:06:20,552  -->  00:06:23,471
be the most common ways of creating objects
104

104

00:06:23,471  -->  00:06:26,976
that you will find the most when you're looking
105

105

00:06:26,976  -->  00:06:29,120
for tutorials on the web.
106

106

00:06:29,120  -->  00:06:32,518
That's why I showed you both in this course.
107

107

00:06:32,518  -->  00:06:36,203
The most popular, though, is still the function constructor,
108

108

00:06:36,203  -->  00:06:38,994
and so that's the one that I'm going to use mostly
109

109

00:06:38,994  -->  00:06:41,244
in the rest of this course.
