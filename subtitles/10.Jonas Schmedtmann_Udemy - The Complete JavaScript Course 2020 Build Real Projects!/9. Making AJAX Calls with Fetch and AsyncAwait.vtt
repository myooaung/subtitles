WEBVTT
1
1

00:00:01.081  -->  00:00:02.722
<v Narrator>After doing an AJAX call</v>
2

2

00:00:02.722  -->  00:00:05.373
with fetch and ES6 Promises in the last lecture,
3

3

00:00:05.373  -->  00:00:07.154
let's now use async/await
4

4

00:00:07.154  -->  00:00:10.497
to consume the Promises in an easier way.
5

5

00:00:10.497  -->  00:00:12.802
So what we're interested in here is to create
6

6

00:00:12.802  -->  00:00:15.509
an asynchronous version of this same function
7

7

00:00:15.509  -->  00:00:17.783
that we did in the last lecture.
8

8

00:00:17.783  -->  00:00:22.366
So, let's call this one here async function getWeather,
9

9

00:00:26.136  -->  00:00:29.057
then A-W for async/await
10

10

00:00:29.057  -->  00:00:31.724
and again the where-on-earth ID.
11

11

00:00:33.686  -->  00:00:36.519
Okay, and then let's also call it,
12

12

00:00:37.812  -->  00:00:41.145
just like we did here for the first one.
13

13

00:00:46.025  -->  00:00:49.918
Now how do we do the code here using async/await?
14

14

00:00:49.918  -->  00:00:52.994
Well, it's actually not hard at all.
15

15

00:00:52.994  -->  00:00:55.568
Let's first of all copy this line of code here,
16

16

00:00:55.568  -->  00:00:58.141
because it's going to be the same.
17

17

00:00:58.141  -->  00:01:01.452
And so this is the one that actually fetches the data.
18

18

00:01:01.452  -->  00:01:02.913
Now with async/await,
19

19

00:01:02.913  -->  00:01:05.328
remember we don't use then and catch,
20

20

00:01:05.328  -->  00:01:07.411
but instead we use await.
21

21

00:01:08.625  -->  00:01:12.125
So we create a new variable, const result,
22

22

00:01:14.123  -->  00:01:16.587
and then await the fetch.
23

23

00:01:16.587  -->  00:01:20.203
So the fetch then will get the data from the server,
24

24

00:01:20.203  -->  00:01:22.636
while the execution here in this function stops.
25

25

00:01:22.636  -->  00:01:24.268
And then once it's done,
26

26

00:01:24.268  -->  00:01:26.519
so once the Promise is fulfilled,
27

27

00:01:26.519  -->  00:01:29.916
it will then assign a result of this Promise here
28

28

00:01:29.916  -->  00:01:32.922
to this variable. Okay, and that's it.
29

29

00:01:32.922  -->  00:01:34.732
So the execution stops here,
30

30

00:01:34.732  -->  00:01:37.228
and then it goes to the next line.
31

31

00:01:37.228  -->  00:01:40.864
And so what we want to do now is just like we did before,
32

32

00:01:40.864  -->  00:01:45.614
is to then create this to json using the dot-json method.
33

33

00:01:46.757  -->  00:01:48.543
Okay, and that's also very simple,
34

34

00:01:48.543  -->  00:01:50.801
because it is also a Promise.
35

35

00:01:50.801  -->  00:01:53.231
And so we are simply going to await it.
36

36

00:01:53.231  -->  00:01:55.731
So again let me call data here
37

37

00:01:56.779  -->  00:01:59.279
and await the result dot-json.
38

38

00:02:02.353  -->  00:02:04.603
Okay, does that make sense?
39

39

00:02:07.098  -->  00:02:11.704
And finally we will just log it to the console.
40

40

00:02:11.704  -->  00:02:15.756
And let's actually remove this logging here from this one,
41

41

00:02:15.756  -->  00:02:19.089
so that we only end up with the strings.
42

42

00:02:22.886  -->  00:02:23.903
And here we go.
43

43

00:02:23.903  -->  00:02:26.109
So these are our two results
44

44

00:02:26.109  -->  00:02:28.967
for both London and San Francisco.
45

45

00:02:28.967  -->  00:02:31.193
Great, so once again, this is working
46

46

00:02:31.193  -->  00:02:33.598
this time with async/await.
47

47

00:02:33.598  -->  00:02:35.704
So a much easier way, I think,
48

48

00:02:35.704  -->  00:02:38.653
than what we had up here, okay?
49

49

00:02:38.653  -->  00:02:41.487
Once again, because it looks like asynchronous code,
50

50

00:02:41.487  -->  00:02:43.413
while in reality it's not.
51

51

00:02:43.413  -->  00:02:47.233
All that really happens is that the function is called
52

52

00:02:47.233  -->  00:02:50.093
and then in the background it runs all of this code
53

53

00:02:50.093  -->  00:02:51.057
that we have here.
54

54

00:02:51.057  -->  00:02:53.426
And so it's okay that the code stops here
55

55

00:02:53.426  -->  00:02:54.978
with the await expression,
56

56

00:02:54.978  -->  00:02:56.473
because this entire function here
57

57

00:02:56.473  -->  00:02:58.080
is running in the background anyway.
58

58

00:02:58.080  -->  00:03:00.424
And so it's not blocking the main thread
59

59

00:03:00.424  -->  00:03:02.354
that's running in the JavaScript engine.
60

60

00:03:02.354  -->  00:03:05.380
Okay, and so here we have two sequential Promises
61

61

00:03:05.380  -->  00:03:08.850
which are both awaited, first this one and then this one.
62

62

00:03:08.850  -->  00:03:11.581
And finally we log it to the console.
63

63

00:03:11.581  -->  00:03:14.746
Now let's do something similar to this one here
64

64

00:03:14.746  -->  00:03:18.746
so just that we end up with a similar structure.
65

65

00:03:20.257  -->  00:03:22.507
And so, yeah, let's log it.
66

66

00:03:24.738  -->  00:03:29.587
And so we are sure that everything works the same.
67

67

00:03:29.587  -->  00:03:31.302
And so you see that for London it's the same,
68

68

00:03:31.302  -->  00:03:32.911
for San Francisco it's the same.
69

69

00:03:32.911  -->  00:03:35.773
Now let's just change it a bit to,
70

70

00:03:35.773  -->  00:03:37.862
we actually want it to tomorrow,
71

71

00:03:37.862  -->  00:03:41.991
and so we need a second element of this weather array,
72

72

00:03:41.991  -->  00:03:45.241
so I've added here to do also tomorrow.
73

73

00:03:46.994  -->  00:03:50.911
And then up here we can say temperatures today.
74

74

00:03:52.374  -->  00:03:54.655
Take a look at it.
75

75

00:03:54.655  -->  00:03:57.221
And okay, here we have an error now.
76

76

00:03:57.221  -->  00:03:59.667
And actually that's a good time for showing you
77

77

00:03:59.667  -->  00:04:02.688
how to handle errors with async/await.
78

78

00:04:02.688  -->  00:04:04.302
So remember that I told you before
79

79

00:04:04.302  -->  00:04:07.097
That in order to handle errors with async/await,
80

80

00:04:07.097  -->  00:04:09.589
we cannot use, of course, this catch method.
81

81

00:04:09.589  -->  00:04:11.377
But instead we use something else,
82

82

00:04:11.377  -->  00:04:13.260
and I told you I'd show it to you later.
83

83

00:04:13.260  -->  00:04:15.583
So now let me do that.
84

84

00:04:15.583  -->  00:04:18.233
And so this has actually nothing to do with async/await,
85

85

00:04:18.233  -->  00:04:20.658
but it's just something that is available to us
86

86

00:04:20.658  -->  00:04:23.946
in JavaScript, which is called try/catch.
87

87

00:04:23.946  -->  00:04:25.605
So let me just show you how it works,
88

88

00:04:25.605  -->  00:04:28.491
and then I'll explain it to you afterwards.
89

89

00:04:28.491  -->  00:04:33.074
So we basically wrap all our code into a try statement.
90

90

00:04:35.749  -->  00:04:39.026
And so this code here will all get executed,
91

91

00:04:39.026  -->  00:04:43.221
but if there is an error, then it will be catched.
92

92

00:04:43.221  -->  00:04:46.554
And so we add this catch statement here.
93

93

00:04:48.504  -->  00:04:50.247
And then we say what we want to happen
94

94

00:04:50.247  -->  00:04:52.137
when there is an error.
95

95

00:04:52.137  -->  00:04:56.887
And so let's once more just log the error to the console.
96

96

00:04:59.415  -->  00:05:03.297
Okay, so this is called the try/catch statement, again,
97

97

00:05:03.297  -->  00:05:05.735
and so it tries to execute this code,
98

98

00:05:05.735  -->  00:05:07.190
but if there is an error,
99

99

00:05:07.190  -->  00:05:10.313
then it will jump here to this part.
100

100

00:05:10.313  -->  00:05:13.146
And so let's try what happens now.
101

101

00:05:16.968  -->  00:05:20.051
Okay, and so now it doesn't really throw these errors,
102

102

00:05:20.051  -->  00:05:22.731
so it's not red like it was before,
103

103

00:05:22.731  -->  00:05:25.895
but it simply logged these to the console like this.
104

104

00:05:25.895  -->  00:05:29.465
And we can also say alert instead of logging it,
105

105

00:05:29.465  -->  00:05:33.048
and so that will likely create this window.
106

106

00:05:35.024  -->  00:05:37.999
Okay, so now you see here that today is not defined.
107

107

00:05:37.999  -->  00:05:41.595
And you don't see the error here in the console at all.
108

108

00:05:41.595  -->  00:05:43.763
Okay, and so we catched that error here
109

109

00:05:43.763  -->  00:05:46.930
with this part of the catch statement.
110

110

00:05:48.038  -->  00:05:52.641
Okay, now let's actually fix this error that we had here.
111

111

00:05:52.641  -->  00:05:56.641
Because it's, of course, not today but tomorrow.
112

112

00:05:58.542  -->  00:06:00.942
And let's see what happens now.
113

113

00:06:00.942  -->  00:06:03.696
And all right, so we have the weather
114

114

00:06:03.696  -->  00:06:06.438
for San Francisco both today and tomorrow
115

115

00:06:06.438  -->  00:06:07.749
and the same for London.
116

116

00:06:07.749  -->  00:06:09.792
It doesn't really appear in the same order here.
117

117

00:06:09.792  -->  00:06:13.100
So we called San Francisco first and London second,
118

118

00:06:13.100  -->  00:06:16.466
but for some reason the data for London came back first,
119

119

00:06:16.466  -->  00:06:18.481
and only then San Francisco came back.
120

120

00:06:18.481  -->  00:06:20.915
So that's why it then happens here in this order.
121

121

00:06:20.915  -->  00:06:22.331
But that's not a problem at all.
122

122

00:06:22.331  -->  00:06:26.407
That's just a good proof that actually this function here
123

123

00:06:26.407  -->  00:06:28.087
runs in the background, okay?
124

124

00:06:28.087  -->  00:06:29.872
And so the results will not appear
125

125

00:06:29.872  -->  00:06:31.881
in the order that they were called,
126

126

00:06:31.881  -->  00:06:34.266
that they are here in the code.
127

127

00:06:34.266  -->  00:06:36.766
Okay, so this is working just fine.
128

128

00:06:36.766  -->  00:06:39.282
Now the final thing that I want to show you
129

129

00:06:39.282  -->  00:06:42.426
is that we want to return some data from this function.
130

130

00:06:42.426  -->  00:06:44.841
And you already know that an async function
131

131

00:06:44.841  -->  00:06:48.841
always returns a Promise, and so let's use that.
132

132

00:06:50.248  -->  00:06:53.729
So let's return the entire data here.
133

133

00:06:53.729  -->  00:06:55.127
And so you already know
134

134

00:06:55.127  -->  00:06:58.378
that what we return from an async function
135

135

00:06:58.378  -->  00:07:01.408
will be the result value of the Promise
136

136

00:07:01.408  -->  00:07:03.521
that this function here returns, right?
137

137

00:07:03.521  -->  00:07:04.953
So that's what we talked about
138

138

00:07:04.953  -->  00:07:07.170
in the last async/await lecture.
139

139

00:07:07.170  -->  00:07:10.812
And so let's pretend that we want to actually store
140

140

00:07:10.812  -->  00:07:12.979
this data for this London.
141

141

00:07:14.483  -->  00:07:18.400
And let me show you how it's not going to work.
142

142

00:07:20.937  -->  00:07:23.187
So dataLondon getWeatherAW.
143

143

00:07:28.189  -->  00:07:32.433
And then let's try to log it to the console,
144

144

00:07:32.433  -->  00:07:33.850
dataLondon, okay?
145

145

00:07:34.955  -->  00:07:36.623
And again, this is not going to work,
146

146

00:07:36.623  -->  00:07:40.677
and I want you to think why it doesn't work.
147

147

00:07:40.677  -->  00:07:42.562
And so you already see the result here.
148

148

00:07:42.562  -->  00:07:44.899
So again it says just the Promise here
149

149

00:07:44.899  -->  00:07:47.358
and not really the result that we wanted.
150

150

00:07:47.358  -->  00:07:50.298
And that's, again, because this console.log statement here
151

151

00:07:50.298  -->  00:07:53.642
happens way before this data actually comes back.
152

152

00:07:53.642  -->  00:07:55.856
And so we run this function at a time
153

153

00:07:55.856  -->  00:07:58.773
where we don't already have that data.
154

154

00:07:58.773  -->  00:08:01.186
Now if we want this to really work,
155

155

00:08:01.186  -->  00:08:03.905
then we need to use the then method
156

156

00:08:03.905  -->  00:08:08.699
in order to handle the result value of this Promise, right?
157

157

00:08:08.699  -->  00:08:12.449
So let's actually do it the other way around.
158

158

00:08:14.261  -->  00:08:17.464
So we need to declare this at a variable
159

159

00:08:17.464  -->  00:08:18.758
that is not constant.
160

160

00:08:18.758  -->  00:08:21.081
And so for that we use let, remember?
161

161

00:08:21.081  -->  00:08:23.125
And we can then very simply handle
162

162

00:08:23.125  -->  00:08:26.042
the result of the Promise. So data.
163

163

00:08:28.476  -->  00:08:31.353
And now we can say that we want dataLondon
164

164

00:08:31.353  -->  00:08:35.186
to be equal to the data that came back, right?
165

165

00:08:36.194  -->  00:08:39.777
So what will happen now? Let's take a look.
166

166

00:08:42.794  -->  00:08:45.034
And well, of course it still didn't work
167

167

00:08:45.034  -->  00:08:46.906
because it's not undefined
168

168

00:08:46.906  -->  00:08:49.385
because this here, of course, still happens
169

169

00:08:49.385  -->  00:08:53.475
only after this console.log here is finished running.
170

170

00:08:53.475  -->  00:08:55.205
So if we wanted to really log it,
171

171

00:08:55.205  -->  00:08:56.952
then I guess we would have to make
172

172

00:08:56.952  -->  00:08:58.869
a bigger function here.
173

173

00:09:04.432  -->  00:09:07.932
All right, and so now it is going to work.
174

174

00:09:11.602  -->  00:09:14.710
So that's the data for London here.
175

175

00:09:14.710  -->  00:09:16.358
So does it make sense?
176

176

00:09:16.358  -->  00:09:19.253
Again, this is because this async function here
177

177

00:09:19.253  -->  00:09:21.133
returns a Promise, right?
178

178

00:09:21.133  -->  00:09:23.859
And the data that we return from this async function
179

179

00:09:23.859  -->  00:09:26.206
will be the result value of that Promise.
180

180

00:09:26.206  -->  00:09:27.718
And so we can have access to it
181

181

00:09:27.718  -->  00:09:32.053
by using the then method on this Promise here, right?
182

182

00:09:32.053  -->  00:09:34.068
Then we can log it like we did here
183

183

00:09:34.068  -->  00:09:36.981
and then, of course, play around with the data as we wish.
184

184

00:09:36.981  -->  00:09:38.757
All right, so this is actually something
185

185

00:09:38.757  -->  00:09:40.479
that we're gonna use later in the project,
186

186

00:09:40.479  -->  00:09:42.915
and it's also important to know this here
187

187

00:09:42.915  -->  00:09:44.801
for your own projects in the future.
188

188

00:09:44.801  -->  00:09:46.852
And so, yeah, I wanted to really show you
189

189

00:09:46.852  -->  00:09:48.777
how this works once again.
190

190

00:09:48.777  -->  00:09:50.811
And so now we did AJAX calls
191

191

00:09:50.811  -->  00:09:53.628
using both Promises and async/await.
192

192

00:09:53.628  -->  00:09:56.067
And so you're now ready to start working
193

193

00:09:56.067  -->  00:09:57.918
on the big project that's coming up
194

194

00:09:57.918  -->  00:09:59.325
right in the next section.
195

195

00:09:59.325  -->  00:10:02.408
So I hope to see you there real soon.
