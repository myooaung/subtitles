1
1

00:00:00,308  -->  00:00:02,524
<v Jonas>Welcome back.</v>
2

2

00:00:02,524  -->  00:00:05,293
Now that the search functionality is fully implemented,
3

3

00:00:05,293  -->  00:00:08,834
let's start working on the model for a single recipe
4

4

00:00:08,834  -->  00:00:12,228
selected from the search results.
5

5

00:00:12,228  -->  00:00:14,424
And so let's start by creating a new file,
6

6

00:00:14,424  -->  00:00:17,007
in our models folder of course.
7

7

00:00:18,515  -->  00:00:19,598
So recipe.js.
8

8

00:00:20,568  -->  00:00:22,484
And this one will actually be a bit similar
9

9

00:00:22,484  -->  00:00:26,256
to the search model, okay, so let's open up this one here,
10

10

00:00:26,256  -->  00:00:29,142
side by side, I can close these files.
11

11

00:00:29,142  -->  00:00:31,301
For now I no longer need them.
12

12

00:00:31,301  -->  00:00:34,587
So again we're going to use axios here for
13

13

00:00:34,587  -->  00:00:36,642
our ajax call, and we will also create
14

14

00:00:36,642  -->  00:00:40,173
a class for this recipe to hold all the data
15

15

00:00:40,173  -->  00:00:42,006
for one recipe object.
16

16

00:00:43,244  -->  00:00:44,077
So import
17

17

00:00:45,900  -->  00:00:47,317
axios from axios,
18

18

00:00:50,946  -->  00:00:53,779
and we will export a default class
19

19

00:00:55,747  -->  00:00:56,914
called Recipe.
20

20

00:00:58,571  -->  00:01:01,001
We give ourselves a constructor, and this time
21

21

00:01:01,001  -->  00:01:05,464
what we're going to press in, will be the ID.
22

22

00:01:05,464  -->  00:01:10,251
And then we say this.id equals the ID that we press in.
23

23

00:01:10,251  -->  00:01:12,706
So each recipe is identified by an ID,
24

24

00:01:12,706  -->  00:01:15,205
and when we create a new recipe object,
25

25

00:01:15,205  -->  00:01:17,715
what we will press in is that exact ID.
26

26

00:01:17,715  -->  00:01:19,777
And based on that ID we can then later
27

27

00:01:19,777  -->  00:01:24,403
do the ajax call to get the rest of the data for the recipe.
28

28

00:01:24,403  -->  00:01:27,441
So that's actually the next method that we're going to code,
29

29

00:01:27,441  -->  00:01:30,108
which will be called get recipe.
30

30

00:01:33,065  -->  00:01:34,749
And we already know that we're going to use
31

31

00:01:34,749  -->  00:01:37,945
an async here, and so for now you're
32

32

00:01:37,945  -->  00:01:41,195
super familiar with this stuff already.
33

33

00:01:42,167  -->  00:01:45,667
Let's then use a try catch such as before.
34

34

00:01:51,558  -->  00:01:55,928
And here just console.log the error in case there is any.
35

35

00:01:55,928  -->  00:01:57,377
But what really matters is of course
36

36

00:01:57,377  -->  00:02:00,713
what happens here in the try block.
37

37

00:02:00,713  -->  00:02:02,630
So let's set the result
38

38

00:02:04,488  -->  00:02:06,425
to what we await
39

39

00:02:06,425  -->  00:02:09,840
from the ajax call using axios again.
40

40

00:02:09,840  -->  00:02:12,588
So that's again very similar to what we had here.
41

41

00:02:12,588  -->  00:02:16,312
Now we need again our key and our proxy,
42

42

00:02:16,312  -->  00:02:19,011
and so we could now go ahead and copy these here
43

43

00:02:19,011  -->  00:02:21,530
to the recipe model, but that's not ideal,
44

44

00:02:21,530  -->  00:02:24,456
because then imagine that we had a new key, or a new proxy,
45

45

00:02:24,456  -->  00:02:26,723
then we would have to change it in two places,
46

46

00:02:26,723  -->  00:02:28,064
and that's not ideal.
47

47

00:02:28,064  -->  00:02:29,729
So instead of doing that, let's create
48

48

00:02:29,729  -->  00:02:31,518
a configuration file where we can store
49

49

00:02:31,518  -->  00:02:33,750
these two variables, then import this file
50

50

00:02:33,750  -->  00:02:37,259
into these two files, so into these two models,
51

51

00:02:37,259  -->  00:02:40,931
so that we can then use these variables in there.
52

52

00:02:40,931  -->  00:02:43,395
So we're going to do that right in the home,
53

53

00:02:43,395  -->  00:02:47,312
and so in the home java script folder, in here,
54

54

00:02:48,336  -->  00:02:51,568
and so we're gonna call it config.js.
55

55

00:02:51,568  -->  00:02:55,151
And so I'm going to take these out of here,
56

56

00:02:57,210  -->  00:03:00,133
and put them right here, okay?
57

57

00:03:00,133  -->  00:03:01,970
Now it's not actually the best practice
58

58

00:03:01,970  -->  00:03:03,319
to have this kind of data here,
59

59

00:03:03,319  -->  00:03:07,080
stored on the client side, because everyone using
60

60

00:03:07,080  -->  00:03:10,536
your app can easily access this for example, your key.
61

61

00:03:10,536  -->  00:03:13,002
Now in this case, it's not really a big deal,
62

62

00:03:13,002  -->  00:03:15,296
but please remember to never store
63

63

00:03:15,296  -->  00:03:18,005
any real sensitive data like this,
64

64

00:03:18,005  -->  00:03:20,804
so on the JavaScript client side, okay?
65

65

00:03:20,804  -->  00:03:23,434
And ideally you would do maybe this ajax calls
66

66

00:03:23,434  -->  00:03:26,111
on your own server, and then have your own API
67

67

00:03:26,111  -->  00:03:28,530
from that server, from where you would then
68

68

00:03:28,530  -->  00:03:31,487
do the ajax call in the front end client.
69

69

00:03:31,487  -->  00:03:36,487
But for now, in this example, this is perfectly acceptable.
70

70

00:03:37,017  -->  00:03:38,919
Let's then go ahead and import it here,
71

71

00:03:38,919  -->  00:03:40,752
first into the search,
72

72

00:03:41,711  -->  00:03:46,128
and we're going to do a name export, so key and proxy
73

73

00:03:48,196  -->  00:03:50,088
from another path through the module,
74

74

00:03:50,088  -->  00:03:54,671
which is one folder above, so dot, dot and then config.
75

75

00:03:57,889  -->  00:04:00,624
Okay, and so with that our proxy and key variables
76

76

00:04:00,624  -->  00:04:02,874
are back here in this file.
77

77

00:04:04,339  -->  00:04:08,075
Just copy them to this other file, to the recipe.
78

78

00:04:08,075  -->  00:04:10,765
And so now we're good to go.
79

79

00:04:10,765  -->  00:04:15,364
Now let's go ahead and actually copy what we have here,
80

80

00:04:15,364  -->  00:04:18,889
then do some changes because URL is really the same,
81

81

00:04:18,889  -->  00:04:21,305
at least up until this point.
82

82

00:04:21,305  -->  00:04:24,757
Let's take out this part, and in order to figure out
83

83

00:04:24,757  -->  00:04:27,051
how we get the recipe, let's then go back
84

84

00:04:27,051  -->  00:04:28,801
to the documentation.
85

85

00:04:29,867  -->  00:04:33,270
We have to search, and we have to get recipe, remember.
86

86

00:04:33,270  -->  00:04:36,815
And the search request should be to api/search,
87

87

00:04:36,815  -->  00:04:38,946
the one that we used before,
88

88

00:04:38,946  -->  00:04:41,729
and in order to get the recipe we use api/get.
89

89

00:04:41,729  -->  00:04:44,029
And then the parameter is again the key,
90

90

00:04:44,029  -->  00:04:49,029
and then also the recipe ID, which is here called rId.
91

91

00:04:49,091  -->  00:04:53,424
So we use the get route, then we press the key into.
92

92

00:04:59,356  -->  00:05:02,280
Also the recipe ID, and that recipe ID
93

93

00:05:02,280  -->  00:05:05,195
will be the one stored in our object.
94

94

00:05:05,195  -->  00:05:07,945
So this.id, right? And that's it.
95

95

00:05:10,114  -->  00:05:13,122
So again, this axios call here will then return
96

96

00:05:13,122  -->  00:05:15,417
a premise, which we await, because we're
97

97

00:05:15,417  -->  00:05:18,224
in an async function, and so again we're using async await,
98

98

00:05:18,224  -->  00:05:20,590
which I believe is the best way of using async
99

99

00:05:20,590  -->  00:05:22,461
in this challenge script.
100

100

00:05:22,461  -->  00:05:25,450
And now just to test this out actually, so in order to see
101

101

00:05:25,450  -->  00:05:27,978
what kind of data we get back from the server,
102

102

00:05:27,978  -->  00:05:30,497
let's just log the result to the console,
103

103

00:05:30,497  -->  00:05:32,882
so that we can then figure out what exactly
104

104

00:05:32,882  -->  00:05:35,122
from the response we need to save.
105

105

00:05:35,122  -->  00:05:37,865
So this will work for now, let's go head into
106

106

00:05:37,865  -->  00:05:40,530
our main controller, import this recipe model,
107

107

00:05:40,530  -->  00:05:44,317
and then create a new recipe from it.
108

108

00:05:44,317  -->  00:05:45,150
So import
109

109

00:05:46,112  -->  00:05:47,029
recipe from
110

110

00:05:48,445  -->  00:05:50,028
same folder models,
111

111

00:05:53,170  -->  00:05:54,695
and that's it.
112

112

00:05:54,695  -->  00:05:57,612
Let's add some small comments here,
113

113

00:06:02,539  -->  00:06:05,978
So this was the search controller,
114

114

00:06:05,978  -->  00:06:09,978
and then let's also have the recipe controller.
115

115

00:06:11,564  -->  00:06:15,280
So we're not going to do the recipe controller just yet,
116

116

00:06:15,280  -->  00:06:18,233
but we already then have our code ready for that.
117

117

00:06:18,233  -->  00:06:21,146
So let's simply create a new variable here for now,
118

118

00:06:21,146  -->  00:06:25,835
just to have a new recipe, and let's press in an ID.
119

119

00:06:25,835  -->  00:06:28,823
Now what ID do we actually want to press in here?
120

120

00:06:28,823  -->  00:06:33,007
Well, let's try out one of the ones we already have,
121

121

00:06:33,007  -->  00:06:36,607
so let's try to get one from our search results
122

122

00:06:36,607  -->  00:06:41,418
So we use pizza again, and something did not work here,
123

123

00:06:41,418  -->  00:06:45,092
so we get this error here, and here we see that we have
124

124

00:06:45,092  -->  00:06:47,772
the proxy and the key both set to undefined.
125

125

00:06:47,772  -->  00:06:52,551
So there was probably something wrong with the config file.
126

126

00:06:52,551  -->  00:06:55,968
Yeah, in here we have to add two exports.
127

127

00:06:57,940  -->  00:07:01,387
In order to actually export these variables from the file.
128

128

00:07:01,387  -->  00:07:05,637
And now that should be working, so let's reload it,
129

129

00:07:08,106  -->  00:07:09,791
and now we should get back
130

130

00:07:09,791  -->  00:07:12,064
results very soon, and here we are.
131

131

00:07:12,064  -->  00:07:13,837
Now if we click on one of these,
132

132

00:07:13,837  -->  00:07:17,103
we will actually have the ID here, displayed in the URL bar,
133

133

00:07:17,103  -->  00:07:19,398
because we remember that back in the view,
134

134

00:07:19,398  -->  00:07:23,481
let's take a look at that, so in the search view,
135

135

00:07:24,483  -->  00:07:27,566
where we displayed the search result,
136

136

00:07:28,404  -->  00:07:30,052
so where is that?
137

137

00:07:30,052  -->  00:07:32,839
Here. So we put the recipe ID in the href.
138

138

00:07:32,839  -->  00:07:35,296
So this hash symbol, and then the recipe ID.
139

139

00:07:35,296  -->  00:07:39,796
That ID is exactly what we need to search for recipes.
140

140

00:07:40,764  -->  00:07:44,539
Let's go ahead and copy this number here,
141

141

00:07:44,539  -->  00:07:48,372
and then plug it in here into this new recipe.
142

142

00:07:50,039  -->  00:07:51,945
And so all we need to do now is to call
143

143

00:07:51,945  -->  00:07:55,024
the get recipe method on this newly created object.
144

144

00:07:55,024  -->  00:07:57,766
Because of course this object here inherits
145

145

00:07:57,766  -->  00:08:00,790
this get recipe method from its prototype.
146

146

00:08:00,790  -->  00:08:03,103
So that's basically how the ES6 class works
147

147

00:08:03,103  -->  00:08:05,541
behind the scenes with prototypal inheritance.
148

148

00:08:05,541  -->  00:08:08,161
So R.getrecipe, and that should then
149

149

00:08:08,161  -->  00:08:10,415
trigger this console log log here,
150

150

00:08:10,415  -->  00:08:12,511
right after we receive back the data from
151

151

00:08:12,511  -->  00:08:16,607
the recipe with the ID that we paste in here, this number.
152

152

00:08:16,607  -->  00:08:19,701
So let's give it a try, it should now reload.
153

153

00:08:19,701  -->  00:08:21,834
It actually already did it here, down here.
154

154

00:08:21,834  -->  00:08:23,806
So you already have the data here,
155

155

00:08:23,806  -->  00:08:25,965
and if you open up the data property,
156

156

00:08:25,965  -->  00:08:28,438
then we have our recipe in here.
157

157

00:08:28,438  -->  00:08:32,074
So we have data.recipe, and then in there we have
158

158

00:08:32,074  -->  00:08:35,238
all kinds of stuff, so we have the image URL,
159

159

00:08:35,238  -->  00:08:38,920
then we have an array of ingredients here.
160

160

00:08:38,920  -->  00:08:42,153
Then we have the publisher, the URL of the publisher,
161

161

00:08:42,153  -->  00:08:45,402
the recipe ID again, and the source, and the title.
162

162

00:08:45,402  -->  00:08:47,461
So the source is where the recipe actually comes from,
163

163

00:08:47,461  -->  00:08:49,234
and where the directions are.
164

164

00:08:49,234  -->  00:08:50,665
We're actually going to use most
165

165

00:08:50,665  -->  00:08:53,347
of the properties that we have in here.
166

166

00:08:53,347  -->  00:08:57,595
So we need the title, we need the publisher,
167

167

00:08:57,595  -->  00:08:59,914
so the author basically, we need the image,
168

168

00:08:59,914  -->  00:09:03,436
we need the URL itself, and we also need the ingredients.
169

169

00:09:03,436  -->  00:09:07,353
And all of this data here lives at data.recipe.
170

170

00:09:08,677  -->  00:09:13,510
So let's now go ahead and save all of these to our object.
171

171

00:09:15,413  -->  00:09:19,487
So we want to have the title so this.title will be remember
172

172

00:09:19,487  -->  00:09:21,320
res.data.recipe.title.
173

173

00:09:28,692  -->  00:09:31,877
So res is the actual result, and then remember that
174

174

00:09:31,877  -->  00:09:34,264
on the console we have data.recipe,
175

175

00:09:34,264  -->  00:09:38,104
where all of this data lives that we need now.
176

176

00:09:38,104  -->  00:09:41,902
So this.author, I'm going to call it author
177

177

00:09:41,902  -->  00:09:46,152
and not publisher, is at res.data.recipe.publisher.
178

178

00:09:50,055  -->  00:09:52,222
Next up we want the image,
179

179

00:09:59,666  -->  00:10:04,416
and let's actually just duplicate this a couple of times.
180

180

00:10:06,187  -->  00:10:07,020
So URL,
181

181

00:10:10,041  -->  00:10:12,696
which is called the source URL here in the data,
182

182

00:10:12,696  -->  00:10:16,113
and then finally we want the ingredients,
183

183

00:10:18,169  -->  00:10:20,776
and so that should be working now.
184

184

00:10:20,776  -->  00:10:23,220
So let's get rid of this console.log here
185

185

00:10:23,220  -->  00:10:28,137
and what I'm going to do instead here is to log our object.
186

186

00:10:31,703  -->  00:10:34,452
So again this is just for testing, of course.
187

187

00:10:34,452  -->  00:10:37,125
But now I want to actually see the entire recipe,
188

188

00:10:37,125  -->  00:10:40,438
and so here it goes, and indeed we have our
189

189

00:10:40,438  -->  00:10:43,580
author, the ID, the image, which for some reason
190

190

00:10:43,580  -->  00:10:45,630
is not really working, then we have
191

191

00:10:45,630  -->  00:10:47,917
the ingredients, and the title, and the URL.
192

192

00:10:47,917  -->  00:10:49,732
So that's all that we need in order to
193

193

00:10:49,732  -->  00:10:53,503
display the recipe on the UI here in one of the next steps.
194

194

00:10:53,503  -->  00:10:56,670
Now something wrong here with the img.
195

195

00:10:58,100  -->  00:11:01,267
So probably there was some typo there.
196

196

00:11:02,165  -->  00:11:05,165
And in here I guess it's just image.
197

197

00:11:07,331  -->  00:11:11,294
Okay, so let's wait for it again, and here you go.
198

198

00:11:11,294  -->  00:11:13,068
So now it's actually there.
199

199

00:11:13,068  -->  00:11:14,005
All right, so that's the data that
200

200

00:11:14,005  -->  00:11:15,595
comes back from the server.
201

201

00:11:15,595  -->  00:11:18,766
Now let's just add a couple more things to our data model.
202

202

00:11:18,766  -->  00:11:22,683
So let me show you how our EP works in the end.
203

203

00:11:24,819  -->  00:11:26,782
What we have here is not only the stuff
204

204

00:11:26,782  -->  00:11:29,364
that we got from the server, but we also have
205

205

00:11:29,364  -->  00:11:32,872
the cooking time, and we have the amount of servings.
206

206

00:11:32,872  -->  00:11:36,955
So let's now add some methods to calculate these.
207

207

00:11:39,665  -->  00:11:40,498
let's do
208

208

00:11:43,437  -->  00:11:44,670
calc time.
209

209

00:11:44,670  -->  00:11:46,864
Now of course we don't have an accurate way
210

210

00:11:46,864  -->  00:11:50,599
to estimate the time it takes to cook one of these recipes.
211

211

00:11:50,599  -->  00:11:53,532
So let's just do a very very rough estimate, and assume
212

212

00:11:53,532  -->  00:11:58,488
that for every three ingredients, we need 15 minutes.
213

213

00:11:58,488  -->  00:12:03,488
So let's start by saying that the number of ingredients
214

214

00:12:03,812  -->  00:12:06,062
is this.ingredients.length,
215

215

00:12:09,499  -->  00:12:13,638
because remember that this ingredients here will be an array
216

216

00:12:13,638  -->  00:12:15,834
of all of the ingredients, and so with lengths
217

217

00:12:15,834  -->  00:12:19,021
we get how many ingredients are in there.
218

218

00:12:19,021  -->  00:12:22,223
Then let's calculate how many 15 minutes periods we have,
219

219

00:12:22,223  -->  00:12:23,140
so periods,
220

220

00:12:25,644  -->  00:12:27,597
so we have the number of ingredients,
221

221

00:12:27,597  -->  00:12:30,996
divided by 3, and we want to round it up
222

222

00:12:30,996  -->  00:12:34,079
to the highest integer, so math.cell,
223

223

00:12:34,980  -->  00:12:38,197
and we already used this one before, right?
224

224

00:12:38,197  -->  00:12:41,530
And so finally we can calculate the time
225

225

00:12:42,555  -->  00:12:45,222
with this just periods times 15.
226

226

00:12:47,421  -->  00:12:48,970
Let's add that comment here in order
227

227

00:12:48,970  -->  00:12:51,220
to make sense of this code.
228

228

00:12:58,756  -->  00:13:00,511
Okay, so something very simple here.
229

229

00:13:00,511  -->  00:13:02,594
And now for the servings,
230

230

00:13:06,185  -->  00:13:08,414
we're actually not going to do any calculations at all,
231

231

00:13:08,414  -->  00:13:12,842
we're just gonna say that this.servings is four.
232

232

00:13:12,842  -->  00:13:16,000
So again we could have very complex algorithm here
233

233

00:13:16,000  -->  00:13:18,436
trying to figure out how many servings we are
234

234

00:13:18,436  -->  00:13:20,510
based on the amount of ingredients,
235

235

00:13:20,510  -->  00:13:22,388
but that's not necessary at all, we just say
236

236

00:13:22,388  -->  00:13:25,639
that we have four servings on each of the recipes.
237

237

00:13:25,639  -->  00:13:28,229
And okay, that's it for our data model.
238

238

00:13:28,229  -->  00:13:30,299
We're going to add some more stuff to it later,
239

239

00:13:30,299  -->  00:13:31,389
but for now this is enough to
240

240

00:13:31,389  -->  00:13:32,855
get us started with the recipes.
241

241

00:13:32,855  -->  00:13:34,438
Now to finish, let's just test out
242

242

00:13:34,438  -->  00:13:37,225
our error handling here as well.
243

243

00:13:37,225  -->  00:13:40,057
And let's add an alert here so the user
244

244

00:13:40,057  -->  00:13:43,474
can actually see the error, and let's say
245

245

00:13:44,814  -->  00:13:48,064
"Something went wrong," and a sad face.
246

246

00:13:52,259  -->  00:13:54,735
So let's assume that we put in the wrong key.
247

247

00:13:54,735  -->  00:13:57,659
Let's just add a couple of random numbers here,
248

248

00:13:57,659  -->  00:13:59,695
so this of course will be a wrong key,
249

249

00:13:59,695  -->  00:14:03,693
and we should then have an error message.
250

250

00:14:03,693  -->  00:14:08,085
So let's try it out, and indeed we get this error here,
251

251

00:14:08,085  -->  00:14:10,052
which says we have no access to this resource,
252

252

00:14:10,052  -->  00:14:12,016
which of course is because we have a wrong key.
253

253

00:14:12,016  -->  00:14:14,049
And the user also gets this message here,
254

254

00:14:14,049  -->  00:14:16,739
Something went wrong, okay?
255

255

00:14:16,739  -->  00:14:21,739
So this also works, the try catch here again, is working.
256

256

00:14:21,835  -->  00:14:24,885
And so let's now start working on the controller
257

257

00:14:24,885  -->  00:14:28,718
of this recipe part, right in the next video.
