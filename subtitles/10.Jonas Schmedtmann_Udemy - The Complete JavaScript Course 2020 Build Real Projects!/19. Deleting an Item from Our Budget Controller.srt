1
1

00:00:01,329  -->  00:00:02,189
<v Narrator>Let's now create</v>
2

2

00:00:02,189  -->  00:00:05,371
a new method in our budget controller
3

3

00:00:05,371  -->  00:00:09,538
so that we can delete an item from our data structure.
4

4

00:00:10,674  -->  00:00:12,191
And so in this lecture,
5

5

00:00:12,191  -->  00:00:14,457
you are gonna learn yet another method
6

6

00:00:14,457  -->  00:00:18,225
to loop over an array (which is called map),
7

7

00:00:18,225  -->  00:00:20,327
and you'll learn how to remove elements
8

8

00:00:20,327  -->  00:00:23,191
from an array using the splice method.
9

9

00:00:23,191  -->  00:00:24,608
So let's do that.
10

10

00:00:26,271  -->  00:00:28,526
So, here's our budget controller
11

11

00:00:28,526  -->  00:00:32,443
in which we will add yet another public method.
12

12

00:00:34,356  -->  00:00:38,892
So let's actually put it here after the at item
13

13

00:00:38,892  -->  00:00:42,071
we will have the method to delete an item.
14

14

00:00:42,071  -->  00:00:44,321
So, delete item a function,
15

15

00:00:52,819  -->  00:00:55,760
and to this is our method.
16

16

00:00:55,760  -->  00:00:58,239
Now, we know that this method is going to be called
17

17

00:00:58,239  -->  00:01:01,027
by the budget controller, right?
18

18

00:01:01,027  -->  00:01:04,173
So, what kind of information do we need to have
19

19

00:01:04,173  -->  00:01:06,184
in order to be able to delete
20

20

00:01:06,184  -->  00:01:07,961
an item from the data structure?
21

21

00:01:07,961  -->  00:01:10,573
So what parameters, what arguments,
22

22

00:01:10,573  -->  00:01:14,596
does the app controller have to pass into this method?
23

23

00:01:14,596  -->  00:01:16,875
So let's look at our data structure.
24

24

00:01:16,875  -->  00:01:20,593
So here it is, and we know that in these arrays
25

25

00:01:20,593  -->  00:01:23,687
we will have all of our expense objects
26

26

00:01:23,687  -->  00:01:26,785
and all of our income objects, okay?
27

27

00:01:26,785  -->  00:01:29,168
And both expense and income objects,
28

28

00:01:29,168  -->  00:01:33,376
they are both identified by their unique ID, right?
29

29

00:01:33,376  -->  00:01:35,304
So, what we need in order to
30

30

00:01:35,304  -->  00:01:38,519
delete one of the items from these arrays
31

31

00:01:38,519  -->  00:01:39,983
is we first need to know
32

32

00:01:39,983  -->  00:01:43,753
if we're talkin' about an expense or an income,
33

33

00:01:43,753  -->  00:01:46,732
and then we also need the unique ID.
34

34

00:01:46,732  -->  00:01:48,263
So this is what the controller
35

35

00:01:48,263  -->  00:01:50,832
will have to pass into this function.
36

36

00:01:50,832  -->  00:01:53,726
And so we need to set up the parameters here.
37

37

00:01:53,726  -->  00:01:57,893
So the type, which is the way we've been calling it, and ID.
38

38

00:01:59,851  -->  00:02:00,684
All right.
39

39

00:02:01,886  -->  00:02:03,928
Now, imagine that we pass an ID of,
40

40

00:02:03,928  -->  00:02:06,928
let's say, three into this function.
41

41

00:02:08,293  -->  00:02:09,126
So, three.
42

42

00:02:10,319  -->  00:02:11,684
We cannot simply select
43

43

00:02:11,684  -->  00:02:15,082
the element that we wanna delete, like this.
44

44

00:02:15,082  -->  00:02:16,999
So, data dot all items,
45

45

00:02:20,964  -->  00:02:22,336
type,
46

46

00:02:22,336  -->  00:02:25,974
and then just use the ID here, right?
47

47

00:02:25,974  -->  00:02:28,540
So we cannot do it like this.
48

48

00:02:28,540  -->  00:02:31,312
So this would select our array here, right?
49

49

00:02:31,312  -->  00:02:33,996
So, for example, the expense array,
50

50

00:02:33,996  -->  00:02:38,156
and then select the element number three using this, right?
51

51

00:02:38,156  -->  00:02:41,325
Now, this would work if we were certain
52

52

00:02:41,325  -->  00:02:43,802
that the IDs are all in order like
53

53

00:02:43,802  -->  00:02:46,315
zero, one, two, three, four, five.
54

54

00:02:46,315  -->  00:02:49,227
But we know that it's not the case
55

55

00:02:49,227  -->  00:02:51,040
and we already talked about that
56

56

00:02:51,040  -->  00:02:54,347
when we wrote this method here, right?
57

57

00:02:54,347  -->  00:02:55,999
So we had this example here,
58

58

00:02:55,999  -->  00:02:58,247
so imagine these are the IDs,
59

59

00:02:58,247  -->  00:03:01,580
and so let's actually copy this example.
60

60

00:03:04,744  -->  00:03:06,978
So imagine these were the IDs.
61

61

00:03:06,978  -->  00:03:09,727
If you would then select the element number three,
62

62

00:03:09,727  -->  00:03:11,727
so zero, one, two, three
63

63

00:03:13,425  -->  00:03:14,772
and would then delete it,
64

64

00:03:14,772  -->  00:03:16,799
you would not delete the element
65

65

00:03:16,799  -->  00:03:20,420
with the ID of three, but with the ID of six, right?
66

66

00:03:20,420  -->  00:03:22,705
So this is not what we want.
67

67

00:03:22,705  -->  00:03:25,257
And again, the reason for the fact
68

68

00:03:25,257  -->  00:03:26,581
that these are not all in order
69

69

00:03:26,581  -->  00:03:29,417
like one, two, three, four, five and so on and so forth
70

70

00:03:29,417  -->  00:03:32,305
is the fact that we can delete items.
71

71

00:03:32,305  -->  00:03:34,346
And so in this case, for example,
72

72

00:03:34,346  -->  00:03:36,389
the elements with the ID
73

73

00:03:36,389  -->  00:03:39,961
zero and three and five and seven were all deleted,
74

74

00:03:39,961  -->  00:03:42,689
and that's why they're not here anymore in this example.
75

75

00:03:42,689  -->  00:03:45,181
And so we need to take that into account
76

76

00:03:45,181  -->  00:03:47,306
when we write this method.
77

77

00:03:47,306  -->  00:03:49,927
So what can we do now?
78

78

00:03:49,927  -->  00:03:52,755
The solution here is to create an array
79

79

00:03:52,755  -->  00:03:55,474
with all of the ID numbers that we have
80

80

00:03:55,474  -->  00:03:59,817
and then find out what the index of our input ID is.
81

81

00:03:59,817  -->  00:04:02,475
So basically, the index of the element
82

82

00:04:02,475  -->  00:04:04,693
that we want to remove.
83

83

00:04:04,693  -->  00:04:07,627
So let's say that the ID that we want to remove is six,
84

84

00:04:07,627  -->  00:04:09,210
for example, right?
85

85

00:04:10,568  -->  00:04:13,235
Then the index is not simply six
86

86

00:04:14,240  -->  00:04:15,932
as we already discussed,
87

87

00:04:15,932  -->  00:04:19,182
but instead it's zero, one, two, three.
88

88

00:04:20,595  -->  00:04:22,865
So the index in this case would be three.
89

89

00:04:22,865  -->  00:04:25,669
So we need a way to find out why it's three,
90

90

00:04:25,669  -->  00:04:28,585
so why it's the number three that we need to delete.
91

91

00:04:28,585  -->  00:04:30,987
So again, the solution is to create an array
92

92

00:04:30,987  -->  00:04:34,894
with all the ID numbers that we have.
93

93

00:04:34,894  -->  00:04:38,194
So let's comment this part out, as well
94

94

00:04:38,194  -->  00:04:41,653
because none of that is what we're gonna do.
95

95

00:04:41,653  -->  00:04:43,565
Instead, what we're gonna do
96

96

00:04:43,565  -->  00:04:45,866
is to loop over all of the elements
97

97

00:04:45,866  -->  00:04:49,136
in an incomes or an expenses array.
98

98

00:04:49,136  -->  00:04:50,969
So, data dot all items
99

99

00:04:53,518  -->  00:04:56,056
and then the type that we pass in
100

100

00:04:56,056  -->  00:04:58,418
and now let's meet a new method, here.
101

101

00:04:58,418  -->  00:05:01,609
So before, we used the for each method, right?
102

102

00:05:01,609  -->  00:05:02,771
But there is another one
103

103

00:05:02,771  -->  00:05:05,866
which is very similar called map, okay?
104

104

00:05:05,866  -->  00:05:07,595
And map also receives a function,
105

105

00:05:07,595  -->  00:05:09,171
a callback function,
106

106

00:05:09,171  -->  00:05:12,547
which also has access to the current element,
107

107

00:05:12,547  -->  00:05:13,866
the current index,
108

108

00:05:13,866  -->  00:05:16,116
and the entire array, okay?
109

109

00:05:19,535  -->  00:05:23,031
But the difference between map and for each
110

110

00:05:23,031  -->  00:05:27,089
is that map actually returns a brand new array.
111

111

00:05:27,089  -->  00:05:30,047
So in here, so in this function, in this callback function
112

112

00:05:30,047  -->  00:05:31,854
that is called for each element
113

113

00:05:31,854  -->  00:05:34,352
we will always return something
114

114

00:05:34,352  -->  00:05:36,874
and this will then be stored in a new array.
115

115

00:05:36,874  -->  00:05:39,541
So let's say return two, simply.
116

116

00:05:41,939  -->  00:05:43,772
If we now say var IDs,
117

117

00:05:46,243  -->  00:05:48,765
then we would end up with a brand new array
118

118

00:05:48,765  -->  00:05:52,993
with the same length as the all items type array.
119

119

00:05:52,993  -->  00:05:56,305
But with the number two in all of the elements.
120

120

00:05:56,305  -->  00:05:58,220
So this, of course, wouldn't be so useful
121

121

00:05:58,220  -->  00:06:00,963
because what we want is not a two in all of them,
122

122

00:06:00,963  -->  00:06:03,880
but what we want is the current ID.
123

123

00:06:04,996  -->  00:06:05,829
Okay?
124

124

00:06:06,845  -->  00:06:08,792
So going back to our example before,
125

125

00:06:08,792  -->  00:06:11,122
imagine that in the all items type,
126

126

00:06:11,122  -->  00:06:14,953
we had five income objects which had these IDs.
127

127

00:06:14,953  -->  00:06:17,560
So, so one, two, four, six and eight.
128

128

00:06:17,560  -->  00:06:20,554
So after executing this map method,
129

129

00:06:20,554  -->  00:06:24,387
we would end up with exactly this array, okay?
130

130

00:06:25,728  -->  00:06:28,728
So let's actually call it IDs, okay?
131

131

00:06:30,299  -->  00:06:32,722
So that we keep this as an example.
132

132

00:06:32,722  -->  00:06:36,912
And now, all we need to do is to find that index.
133

133

00:06:36,912  -->  00:06:39,457
And we already know how to do that, right?
134

134

00:06:39,457  -->  00:06:40,707
So we say index
135

135

00:06:44,118  -->  00:06:45,535
is
136

136

00:06:45,535  -->  00:06:46,868
IDs dot index of
137

137

00:06:50,927  -->  00:06:54,258
the ID that we pass into the method.
138

138

00:06:54,258  -->  00:06:56,246
And it's really as simple as that.
139

139

00:06:56,246  -->  00:06:58,496
So let's now declare these,
140

140

00:06:59,549  -->  00:07:00,966
so IDs and index.
141

141

00:07:02,945  -->  00:07:03,778
All right.
142

142

00:07:06,328  -->  00:07:08,866
So remember, this index of method
143

143

00:07:08,866  -->  00:07:11,960
returns the index number of the element
144

144

00:07:11,960  -->  00:07:15,273
of the array that we input here.
145

145

00:07:15,273  -->  00:07:18,436
So again, imagine that the ID would be six
146

146

00:07:18,436  -->  00:07:21,932
then the index would be zero, one, two, three.
147

147

00:07:21,932  -->  00:07:24,987
Because this is the six that we're searching.
148

148

00:07:24,987  -->  00:07:28,752
And so, this index variable here would become three.
149

149

00:07:28,752  -->  00:07:30,669
So, index equals three.
150

150

00:07:31,943  -->  00:07:33,659
And now, all we need to do is to
151

151

00:07:33,659  -->  00:07:37,659
actually delete this item from the array, right?
152

152

00:07:38,570  -->  00:07:39,761
Okay.
153

153

00:07:39,761  -->  00:07:41,811
And remember that this index here
154

154

00:07:41,811  -->  00:07:45,255
can be minus one in case that this item here
155

155

00:07:45,255  -->  00:07:49,101
is not found in the array in which we're searching.
156

156

00:07:49,101  -->  00:07:51,402
So we only want to remove something
157

157

00:07:51,402  -->  00:07:54,124
if the index actually exists, right?
158

158

00:07:54,124  -->  00:07:56,888
So if the index is different from minus one
159

159

00:07:56,888  -->  00:08:00,903
because minus one is when it didn't find the element.
160

160

00:08:00,903  -->  00:08:02,153
So if the index
161

161

00:08:04,780  -->  00:08:07,030
is different from minus one
162

162

00:08:09,617  -->  00:08:11,171
then we want to delete.
163

163

00:08:11,171  -->  00:08:13,091
And now, in order to delete,
164

164

00:08:13,091  -->  00:08:16,650
we're going to need yet another method of the array.
165

165

00:08:16,650  -->  00:08:18,967
And this one is called splice.
166

166

00:08:18,967  -->  00:08:21,601
So don't confuse it with the slice method
167

167

00:08:21,601  -->  00:08:22,874
that we used before.
168

168

00:08:22,874  -->  00:08:24,855
This one is called splice.
169

169

00:08:24,855  -->  00:08:27,759
And this one is used to remove elements,
170

170

00:08:27,759  -->  00:08:31,956
while the slice element is only used to create a copy.
171

171

00:08:31,956  -->  00:08:34,875
And so, let's see how to use that.
172

172

00:08:34,875  -->  00:08:36,708
So data dot all items,
173

173

00:08:38,463  -->  00:08:39,499
type,
174

174

00:08:39,499  -->  00:08:42,142
and this is the array of our objects, right?
175

175

00:08:42,142  -->  00:08:46,668
So on this array, we now can use the splice method.
176

176

00:08:46,668  -->  00:08:47,880
And it works like this:
177

177

00:08:47,880  -->  00:08:50,706
so the first argument is to position number
178

178

00:08:50,706  -->  00:08:53,295
at which we want to start deleting.
179

179

00:08:53,295  -->  00:08:56,421
And this is of course the index.
180

180

00:08:56,421  -->  00:08:58,003
And then the second argument is
181

181

00:08:58,003  -->  00:09:00,897
the number of elements that we want to delete.
182

182

00:09:00,897  -->  00:09:04,495
And we, of course, only want to delete one.
183

183

00:09:04,495  -->  00:09:07,360
So again, this will start removing elements
184

184

00:09:07,360  -->  00:09:10,087
at the number index which,
185

185

00:09:10,087  -->  00:09:11,931
if we come back to our example,
186

186

00:09:11,931  -->  00:09:13,448
is number three.
187

187

00:09:13,448  -->  00:09:17,934
So at number three, it will remove exactly one.
188

188

00:09:17,934  -->  00:09:21,875
So in our case, it will be zero, one, two, three,
189

189

00:09:21,875  -->  00:09:26,584
and then this one would get removed like this, okay?
190

190

00:09:26,584  -->  00:09:28,951
Okay, so I hope that this small example here
191

191

00:09:28,951  -->  00:09:30,942
actually helped you understand
192

192

00:09:30,942  -->  00:09:33,152
why we needed to do it this way
193

193

00:09:33,152  -->  00:09:36,907
instead of just writing out this piece of code here.
194

194

00:09:36,907  -->  00:09:40,000
Instead, we had to create this entire array here,
195

195

00:09:40,000  -->  00:09:42,645
and then retrieve the index of the element
196

196

00:09:42,645  -->  00:09:44,541
that we want to remove.
197

197

00:09:44,541  -->  00:09:49,243
So this one was a bit tricky, but we still solved it, right?
198

198

00:09:49,243  -->  00:09:51,535
And you also learned yet another two methods
199

199

00:09:51,535  -->  00:09:54,470
for arrays by writing this method.
200

200

00:09:54,470  -->  00:09:56,869
So I hope that you somewhere keep track
201

201

00:09:56,869  -->  00:10:00,678
of all these methods that we have already used on arrays,
202

202

00:10:00,678  -->  00:10:02,568
so that you don't lose sight of all
203

203

00:10:02,568  -->  00:10:06,889
the amazing things that we can do with arrays.
204

204

00:10:06,889  -->  00:10:10,711
And now, the last step is to just use this method
205

205

00:10:10,711  -->  00:10:12,969
in the controller.
206

206

00:10:12,969  -->  00:10:15,355
So, where is our method for that-
207

207

00:10:15,355  -->  00:10:18,012
or function, actually, for that...
208

208

00:10:18,012  -->  00:10:18,865
It's here.
209

209

00:10:18,865  -->  00:10:21,990
So the control the lead item function.
210

210

00:10:21,990  -->  00:10:23,073
And so we say
211

211

00:10:24,833  -->  00:10:27,416
budget controller, delete item.
212

212

00:10:28,405  -->  00:10:30,644
And now is the time where we can finally
213

213

00:10:30,644  -->  00:10:32,787
use this type and this ID
214

214

00:10:32,787  -->  00:10:34,644
that we created in the last lecture.
215

215

00:10:34,644  -->  00:10:36,070
Remember that?
216

216

00:10:36,070  -->  00:10:39,361
So we can now simply pass in the type
217

217

00:10:39,361  -->  00:10:41,769
which is what our method expects,
218

218

00:10:41,769  -->  00:10:43,352
and the ID as well.
219

219

00:10:44,718  -->  00:10:46,188
And like this, the element,
220

220

00:10:46,188  -->  00:10:49,510
with the specified ID and the specified type
221

221

00:10:49,510  -->  00:10:52,366
will be deleted from our data structure.
222

222

00:10:52,366  -->  00:10:55,217
So let's now see this in action, okay?
223

223

00:10:55,217  -->  00:10:56,134
So, reload.
224

224

00:10:57,518  -->  00:10:59,774
All right, we have a back here somewhere,
225

225

00:10:59,774  -->  00:11:02,691
so in line 82, let's take that out.
226

226

00:11:04,397  -->  00:11:07,353
Line 82, all the way up here.
227

227

00:11:07,353  -->  00:11:10,603
Okay, we have one equal too much, okay?
228

228

00:11:11,659  -->  00:11:14,356
So the equal operator is with three equals
229

229

00:11:14,356  -->  00:11:18,181
and the difference operator is with this exclamation mark
230

230

00:11:18,181  -->  00:11:20,229
and the two equal signs.
231

231

00:11:20,229  -->  00:11:23,911
Okay, so again, and now the application has started.
232

232

00:11:23,911  -->  00:11:26,598
So let's add something to here.
233

233

00:11:26,598  -->  00:11:28,181
Let's say test one,
234

234

00:11:29,707  -->  00:11:30,540
$10.
235

235

00:11:31,841  -->  00:11:33,758
Test two, let's say 20.
236

236

00:11:35,385  -->  00:11:36,635
And test three,
237

237

00:11:38,454  -->  00:11:39,621
30.
238

238

00:11:39,621  -->  00:11:41,234
All right.
239

239

00:11:41,234  -->  00:11:44,480
Now remember, if we click here to delete this
240

240

00:11:44,480  -->  00:11:46,703
nothing will happen on the user interface.
241

241

00:11:46,703  -->  00:11:49,553
So we actually need to see our data structure,
242

242

00:11:49,553  -->  00:11:52,463
and we have our nice, handy testing method
243

243

00:11:52,463  -->  00:11:54,759
here for that, right?
244

244

00:11:54,759  -->  00:11:59,444
So here's the object that we created with all the items
245

245

00:11:59,444  -->  00:12:01,302
which are these three incomes.
246

246

00:12:01,302  -->  00:12:03,396
So, three income objects
247

247

00:12:03,396  -->  00:12:05,646
with 10, 20 and 30 dollars.
248

248

00:12:07,465  -->  00:12:10,382
So let's now remove the second one.
249

249

00:12:11,860  -->  00:12:13,186
All right?
250

250

00:12:13,186  -->  00:12:14,389
And, we have a back.
251

251

00:12:14,389  -->  00:12:16,059
So yet another one.
252

252

00:12:16,059  -->  00:12:18,059
So let's go to line 282.
253

253

00:12:22,403  -->  00:12:24,153
And 282 is down here.
254

254

00:12:26,397  -->  00:12:28,896
Okay, so this was a stupid mistake.
255

255

00:12:28,896  -->  00:12:32,736
It's of course ID with the capital letters
256

256

00:12:32,736  -->  00:12:34,763
and not like it was before.
257

257

00:12:34,763  -->  00:12:37,263
So I hope now it's gonna work.
258

258

00:12:39,160  -->  00:12:40,160
So test one,
259

259

00:12:42,488  -->  00:12:43,321
test two,
260

260

00:12:46,709  -->  00:12:47,959
and test three.
261

261

00:12:49,696  -->  00:12:51,884
And now, let's delete this.
262

262

00:12:51,884  -->  00:12:53,292
All right, so I clicked the button
263

263

00:12:53,292  -->  00:12:55,699
and again, it wasn't removed from here,
264

264

00:12:55,699  -->  00:12:58,792
but let's take a look at our data structure.
265

265

00:12:58,792  -->  00:13:01,506
So our testing method...
266

266

00:13:01,506  -->  00:13:04,294
And now, if you look at here,
267

267

00:13:04,294  -->  00:13:06,891
oh, we still have three.
268

268

00:13:06,891  -->  00:13:10,724
So there's clearly still something wrong here.
269

269

00:13:12,142  -->  00:13:14,113
And since there's nothing happening here,
270

270

00:13:14,113  -->  00:13:17,809
so nothing happens when we hit these buttons here,
271

271

00:13:17,809  -->  00:13:19,427
so there's not even a back,
272

272

00:13:19,427  -->  00:13:20,799
nothing happens, really.
273

273

00:13:20,799  -->  00:13:23,054
So I suspect that there's something wrong
274

274

00:13:23,054  -->  00:13:26,742
with the if statement that we have.
275

275

00:13:26,742  -->  00:13:28,159
So let's go back.
276

276

00:13:29,750  -->  00:13:33,917
So this if here, remember that this gets only executed
277

277

00:13:34,955  -->  00:13:39,472
when the ID that we pass into is actually in the array.
278

278

00:13:39,472  -->  00:13:43,419
So when it's not minus one here, okay?
279

279

00:13:43,419  -->  00:13:46,528
And since this here is simply not executing,
280

280

00:13:46,528  -->  00:13:50,535
it means that probably this here always returns minus one,
281

281

00:13:50,535  -->  00:13:53,226
and therefore, this here is always false.
282

282

00:13:53,226  -->  00:13:55,427
So there must be some problem in here.
283

283

00:13:55,427  -->  00:13:57,636
And so, let's check the ID,
284

284

00:13:57,636  -->  00:14:01,136
maybe there's something wrong with the ID.
285

285

00:14:02,207  -->  00:14:03,957
So let's go down here
286

286

00:14:06,533  -->  00:14:07,732
and so, yeah.
287

287

00:14:07,732  -->  00:14:10,809
Here's where we define the ID.
288

288

00:14:10,809  -->  00:14:12,242
So let's see how we did that.
289

289

00:14:12,242  -->  00:14:15,458
So we split this string here in two
290

290

00:14:15,458  -->  00:14:17,332
and then this created a new array
291

291

00:14:17,332  -->  00:14:18,862
which is split ID,
292

292

00:14:18,862  -->  00:14:20,935
which had the two strings in it.
293

293

00:14:20,935  -->  00:14:22,594
So the type string,
294

294

00:14:22,594  -->  00:14:24,632
which is the first element of the array,
295

295

00:14:24,632  -->  00:14:25,994
and the ID string,
296

296

00:14:25,994  -->  00:14:28,304
which is the second element of the array.
297

297

00:14:28,304  -->  00:14:31,184
So the one with the index number one.
298

298

00:14:31,184  -->  00:14:33,866
And maybe now, you're starting to see the problem
299

299

00:14:33,866  -->  00:14:35,244
and the problem is this:
300

300

00:14:35,244  -->  00:14:39,632
so we passed this ID into our delete item method,
301

301

00:14:39,632  -->  00:14:42,323
but remember that this is a string
302

302

00:14:42,323  -->  00:14:45,915
because it came from this item ID string
303

303

00:14:45,915  -->  00:14:49,378
and therefore, up there in our delete item method
304

304

00:14:49,378  -->  00:14:52,152
we are comparing a string to a number.
305

305

00:14:52,152  -->  00:14:54,537
So that's something that we cannot do.
306

306

00:14:54,537  -->  00:14:55,824
I mean, we can,
307

307

00:14:55,824  -->  00:14:58,926
but it's not gonna give us the results that we want.
308

308

00:14:58,926  -->  00:15:01,889
So if we ask that the string one
309

309

00:15:01,889  -->  00:15:04,554
is in an array of zero, one and two,
310

310

00:15:04,554  -->  00:15:06,088
which are all numbers,
311

311

00:15:06,088  -->  00:15:07,740
then the string one is not in there
312

312

00:15:07,740  -->  00:15:10,544
because what's in there is the number one, okay?
313

313

00:15:10,544  -->  00:15:12,259
So you want this ID,
314

314

00:15:12,259  -->  00:15:14,329
this one here to be a number,
315

315

00:15:14,329  -->  00:15:17,446
so that we can then ask if the number is in the array
316

316

00:15:17,446  -->  00:15:20,089
with the index of method.
317

317

00:15:20,089  -->  00:15:23,578
So remember, we used the parse float function before
318

318

00:15:23,578  -->  00:15:26,376
which was to convert a string to a float number,
319

319

00:15:26,376  -->  00:15:28,257
so a number with decimals.
320

320

00:15:28,257  -->  00:15:30,909
Now these IDs are integers, right?
321

321

00:15:30,909  -->  00:15:32,493
So, no decimals.
322

322

00:15:32,493  -->  00:15:33,680
And so, there's another function
323

323

00:15:33,680  -->  00:15:36,430
which is simply called parse int.
324

324

00:15:38,985  -->  00:15:40,798
So we're gonna use that one here,
325

325

00:15:40,798  -->  00:15:41,881
so parse int.
326

326

00:15:45,866  -->  00:15:47,054
And just like this,
327

327

00:15:47,054  -->  00:15:49,667
we convert the string here to an integer,
328

328

00:15:49,667  -->  00:15:50,840
so to a number,
329

329

00:15:50,840  -->  00:15:53,622
which is then stored in ID.
330

330

00:15:53,622  -->  00:15:57,622
And so, let's now check out if this works, okay?
331

331

00:15:59,008  -->  00:16:01,247
So reload, and then
332

332

00:16:01,247  -->  00:16:02,414
test one: ten,
333

333

00:16:04,546  -->  00:16:05,963
test two: twenty,
334

334

00:16:07,197  -->  00:16:09,114
and test three: thirty.
335

335

00:16:16,645  -->  00:16:20,850
And in here are our three income objects.
336

336

00:16:20,850  -->  00:16:23,746
And now I'm gonna delete this one.
337

337

00:16:23,746  -->  00:16:26,488
So again, we have no back
338

338

00:16:26,488  -->  00:16:29,071
so let's see our structure now.
339

339

00:16:33,132  -->  00:16:35,113
And yes, so now it's working.
340

340

00:16:35,113  -->  00:16:39,280
Now we have only two elements in our array, so great.
341

341

00:16:40,401  -->  00:16:43,235
So let's see the first one, it's test one,
342

342

00:16:43,235  -->  00:16:45,772
and the second one should be test three.
343

343

00:16:45,772  -->  00:16:48,022
Sorry, so test three, yeah.
344

344

00:16:49,095  -->  00:16:51,183
Because I deleted test two, remember?
345

345

00:16:51,183  -->  00:16:54,298
I clicked here, and that deleted it.
346

346

00:16:54,298  -->  00:16:56,035
So now it's finally working,
347

347

00:16:56,035  -->  00:16:58,390
and what we need to do next is to actually
348

348

00:16:58,390  -->  00:17:02,374
also delete the item here from the user interface, right?
349

349

00:17:02,374  -->  00:17:04,172
And then update the budget here,
350

350

00:17:04,172  -->  00:17:06,565
because this still stays the same.
351

351

00:17:06,565  -->  00:17:10,450
So I can delete all of this and nothing happens
352

352

00:17:10,450  -->  00:17:12,560
in the budget, right?
353

353

00:17:12,560  -->  00:17:15,570
So let's just check our data structure,
354

354

00:17:15,570  -->  00:17:18,153
now that I deleted all of them.
355

355

00:17:19,023  -->  00:17:21,964
And so yeah, so we no longer have any income here
356

356

00:17:21,964  -->  00:17:24,134
because I deleted all of them.
357

357

00:17:24,134  -->  00:17:25,612
Okay, so this really works
358

358

00:17:25,612  -->  00:17:29,029
and now we're ready for the next lecture.
