WEBVTT
1
1

00:00:01.298  -->  00:00:02.944
<v INSTRUCTOR>In this lecture we're gonna start</v>
2

2

00:00:02.944  -->  00:00:05.477
working on updating the budget
3

3

00:00:05.477  -->  00:00:09.385
and the first step is to look at our controller module.
4

4

00:00:09.385  -->  00:00:11.818
We'll also fix some minor problems
5

5

00:00:11.818  -->  00:00:14.985
that our app still has at this point.
6

6

00:00:16.109  -->  00:00:20.455
And so you'll learn how to convert field inputs to numbers
7

7

00:00:20.455  -->  00:00:24.622
and you'll also learn how to prevent false inputs.
8

8

00:00:26.236  -->  00:00:29.059
Alright. So here in our controller module
9

9

00:00:29.059  -->  00:00:33.084
and more specifically here in the ctrlAddItem function
10

10

00:00:33.084  -->  00:00:37.407
we already have these spots here to call the methods
11

11

00:00:37.407  -->  00:00:40.430
that are gonna handle the budget update.
12

12

00:00:40.430  -->  00:00:43.591
Now, I wanna move this to a separate function.
13

13

00:00:43.591  -->  00:00:47.827
and that's because first these steps kind of belong
14

14

00:00:47.827  -->  00:00:50.725
together, and second because we're gonna do
15

15

00:00:50.725  -->  00:00:54.719
all of this again later when we want to delete an item.
16

16

00:00:54.719  -->  00:00:56.795
So instead of repeating this code by then
17

17

00:00:56.795  -->  00:00:58.720
we can simply write a new function
18

18

00:00:58.720  -->  00:01:00.358
to keep the DRY principle,
19

19

00:01:00.358  -->  00:01:03.389
so the don't repeat yourself principle,
20

20

00:01:03.389  -->  00:01:06.105
and so I'm gonna do that right now.
21

21

00:01:06.105  -->  00:01:08.403
And I'm going to call it update budget.
22

22

00:01:08.403  -->  00:01:10.469
So very simple.
23

23

00:01:10.469  -->  00:01:12.136
So var updateBudget.
24

24

00:01:15.831  -->  00:01:18.581
And we don't need any parameters.
25

25

00:01:20.936  -->  00:01:24.078
So all of this will actually
26

26

00:01:24.078  -->  00:01:24.995
go in here.
27

27

00:01:26.496  -->  00:01:29.718
So first we calculate the budget
28

28

00:01:29.718  -->  00:01:30.995
which we're gonna do in the next lecture
29

29

00:01:30.995  -->  00:01:33.459
in the budget controller.
30

30

00:01:33.459  -->  00:01:37.115
And then we're also gonna have a method
31

31

00:01:37.115  -->  00:01:39.865
that will then return the budget.
32

32

00:01:42.425  -->  00:01:45.800
Okay? And I'm doing two separate functions here.
33

33

00:01:45.800  -->  00:01:48.309
So one that calculates the budget
34

34

00:01:48.309  -->  00:01:51.198
and one that simply returns the budget
35

35

00:01:51.198  -->  00:01:52.940
and does nothing else.
36

36

00:01:52.940  -->  00:01:55.850
And that's because I want you to get used to this
37

37

00:01:55.850  -->  00:01:58.388
kind of philosophy that each function has
38

38

00:01:58.388  -->  00:02:00.091
a specific task.
39

39

00:02:00.091  -->  00:02:02.295
And that simply getting some information
40

40

00:02:02.295  -->  00:02:03.533
from a module
41

41

00:02:03.533  -->  00:02:06.335
is a good task for a simple function.
42

42

00:02:06.335  -->  00:02:09.013
And we actually have already done some of these
43

43

00:02:09.013  -->  00:02:12.799
get functions, like get input or get dump strings
44

44

00:02:12.799  -->  00:02:16.168
and so we're gonna continue with that here.
45

45

00:02:16.168  -->  00:02:18.589
So we will have another function in the budget controller
46

46

00:02:18.589  -->  00:02:21.821
that will simply return the budget.
47

47

00:02:21.821  -->  00:02:25.006
And then of course we need to display the budget
48

48

00:02:25.006  -->  00:02:27.938
on the user interface, and that will be a method
49

49

00:02:27.938  -->  00:02:29.448
on the UI controller
50

50

00:02:29.448  -->  00:02:32.007
that we're also gonna code not in the next lecture
51

51

00:02:32.007  -->  00:02:33.840
but in one after that.
52

52

00:02:34.685  -->  00:02:38.337
Okay. So then we have to, of course, call this function
53

53

00:02:38.337  -->  00:02:39.587
in here, right?
54

54

00:02:41.056  -->  00:02:42.556
So let me just say
55

55

00:02:44.689  -->  00:02:47.022
Calculate and update budget.
56

56

00:02:49.297  -->  00:02:51.797
And then we call updateBudget.
57

57

00:02:54.208  -->  00:02:56.541
Alright so in here we set the stage.
58

58

00:02:56.541  -->  00:02:58.908
Now we just need to code all of these methods
59

59

00:02:58.908  -->  00:03:01.909
over the next lectures and I will then call them
60

60

00:03:01.909  -->  00:03:04.492
from the updateBudget function.
61

61

00:03:05.734  -->  00:03:08.736
Now before we can move on to actually do all of these
62

62

00:03:08.736  -->  00:03:12.373
calculations, there are still two things left
63

63

00:03:12.373  -->  00:03:14.059
that we have to take care of.
64

64

00:03:14.059  -->  00:03:17.484
And in order to see them, let's look again
65

65

00:03:17.484  -->  00:03:19.151
at our project here.
66

66

00:03:20.604  -->  00:03:23.162
And the first one is this, so let's suppose
67

67

00:03:23.162  -->  00:03:24.754
we add something here.
68

68

00:03:24.754  -->  00:03:27.921
Let's say salary again, and then 1200.
69

69

00:03:30.587  -->  00:03:32.994
Okay, so everything nice here.
70

70

00:03:32.994  -->  00:03:36.256
So let's use the test method that we did
71

71

00:03:36.256  -->  00:03:39.897
for the budget controller. Remember that?
72

72

00:03:39.897  -->  00:03:44.026
So we add budget controller and then a testing method
73

73

00:03:44.026  -->  00:03:47.205
which was only to display the internal data structure
74

74

00:03:47.205  -->  00:03:51.055
where all the incomes and expenses are stored.
75

75

00:03:51.055  -->  00:03:53.405
So here is the object,
76

76

00:03:53.405  -->  00:03:55.672
if I remember it's called data,
77

77

00:03:55.672  -->  00:03:58.589
and it has these two objects in it.
78

78

00:03:59.460  -->  00:04:03.697
So here we have the income that we just added, right?
79

79

00:04:03.697  -->  00:04:07.227
So this array, actually this object.
80

80

00:04:07.227  -->  00:04:11.232
So description of salary and the value is 1200
81

81

00:04:11.232  -->  00:04:12.977
and the ID is zero.
82

82

00:04:12.977  -->  00:04:15.049
Now here is the problem.
83

83

00:04:15.049  -->  00:04:18.026
We see here that this value is not really a number.
84

84

00:04:18.026  -->  00:04:19.767
It's actually a string, right?
85

85

00:04:19.767  -->  00:04:22.055
And that is a problem.
86

86

00:04:22.055  -->  00:04:25.482
So the ID here is a number, so everything's fine here.
87

87

00:04:25.482  -->  00:04:26.551
But this is a string
88

88

00:04:26.551  -->  00:04:29.297
and we cannot do calculations with strings.
89

89

00:04:29.297  -->  00:04:32.018
So we need to change this.
90

90

00:04:32.018  -->  00:04:34.068
So remember where we actually read
91

91

00:04:34.068  -->  00:04:36.978
this data from the interface?
92

92

00:04:36.978  -->  00:04:39.610
There is a method up here
93

93

00:04:39.610  -->  00:04:42.298
and here it is, it's the getInput method, right?
94

94

00:04:42.298  -->  00:04:46.599
So here in this line of code we read this value.
95

95

00:04:46.599  -->  00:04:49.241
And what we read is a string as we just saw
96

96

00:04:49.241  -->  00:04:51.094
and not a number.
97

97

00:04:51.094  -->  00:04:53.483
But fortunately, there is a very handy
98

98

00:04:53.483  -->  00:04:57.650
function in JavaScript which is simply called parseFloat.
99

99

00:04:58.519  -->  00:05:01.686
So parseFloat, which converts a string
100

100

00:05:03.935  -->  00:05:04.768
to a floating number.
101

101

00:05:04.768  -->  00:05:08.932
So basically a decimal number, a number with decimals.
102

102

00:05:08.932  -->  00:05:12.493
And so we can have a numbers with decimals.
103

103

00:05:12.493  -->  00:05:14.228
So instead of having ten dollars we can have
104

104

00:05:14.228  -->  00:05:17.174
ten dollars and fifty cents, for example.
105

105

00:05:17.174  -->  00:05:18.905
Alright, so again, this function
106

106

00:05:18.905  -->  00:05:22.119
is going to take this string here that this returns
107

107

00:05:22.119  -->  00:05:24.247
and convert it to a number
108

108

00:05:24.247  -->  00:05:27.291
which is then assigned to this value property.
109

109

00:05:27.291  -->  00:05:31.458
So let's now reload this and check if that actually worked.
110

110

00:05:32.720  -->  00:05:34.470
So salary once again,
111

111

00:05:36.095  -->  00:05:36.928
1200
112

112

00:05:38.094  -->  00:05:41.885
and then we need to use our testing method again.
113

113

00:05:41.885  -->  00:05:43.944
And now you see why it's so useful
114

114

00:05:43.944  -->  00:05:46.754
to simply write a testing method like this
115

115

00:05:46.754  -->  00:05:48.090
not to use in production,
116

116

00:05:48.090  -->  00:05:50.188
so not to use in the final application,
117

117

00:05:50.188  -->  00:05:53.500
but here during development it's really useful
118

118

00:05:53.500  -->  00:05:56.160
to have a public method like this
119

119

00:05:56.160  -->  00:05:58.577
to expose some internal data.
120

120

00:06:01.099  -->  00:06:03.382
So all items again.
121

121

00:06:03.382  -->  00:06:04.299
The income,
122

122

00:06:06.054  -->  00:06:07.966
and alright, here we go.
123

123

00:06:07.966  -->  00:06:09.463
You see now it's a number.
124

124

00:06:09.463  -->  00:06:11.334
So it no longer has the quotes
125

125

00:06:11.334  -->  00:06:14.811
and it's also here printed blue like the zero, right?
126

126

00:06:14.811  -->  00:06:17.185
So now it's a number, and now we can use it
127

127

00:06:17.185  -->  00:06:19.094
to make calculations.
128

128

00:06:19.094  -->  00:06:21.317
And so we solved one of the two problems.
129

129

00:06:21.317  -->  00:06:22.490
So let's see the second problem.
130

130

00:06:22.490  -->  00:06:25.421
And to show it to you, all I have to do
131

131

00:06:25.421  -->  00:06:28.326
is to keep clicking on this button.
132

132

00:06:28.326  -->  00:06:30.668
So, do you see what's happening here?
133

133

00:06:30.668  -->  00:06:33.335
We are simply adding empty lines
134

134

00:06:34.724  -->  00:06:36.649
without anything in them.
135

135

00:06:36.649  -->  00:06:38.435
And that's because we don't have any test.
136

136

00:06:38.435  -->  00:06:41.884
We don't have anything in our code that says
137

137

00:06:41.884  -->  00:06:43.880
that we actually need to have some data here
138

138

00:06:43.880  -->  00:06:46.250
and some values here, right?
139

139

00:06:46.250  -->  00:06:48.583
And so this is another thing that we really
140

140

00:06:48.583  -->  00:06:51.277
need to take care of before we can move on.
141

141

00:06:51.277  -->  00:06:52.990
So let's do that now.
142

142

00:06:52.990  -->  00:06:54.716
And the best place to do this
143

143

00:06:54.716  -->  00:06:58.279
is in the function in our controller where we say
144

144

00:06:58.279  -->  00:07:02.132
what to do when a user hits the button.
145

145

00:07:02.132  -->  00:07:05.043
Okay? So let's come back down here
146

146

00:07:05.043  -->  00:07:08.361
and this is a ctrlAddItem function, right?
147

147

00:07:08.361  -->  00:07:11.387
So what we can do here is to say
148

148

00:07:11.387  -->  00:07:14.621
that we only want all of this here to happen
149

149

00:07:14.621  -->  00:07:18.937
if there actually is some data that we can use.
150

150

00:07:18.937  -->  00:07:22.439
So we can of course use an if statement for that, right?
151

151

00:07:22.439  -->  00:07:24.364
So let's put it right here.
152

152

00:07:24.364  -->  00:07:26.947
Okay. And what do we want here?
153

153

00:07:29.173  -->  00:07:32.388
First we want the description to not be empty, right?
154

154

00:07:32.388  -->  00:07:34.888
So let's say input.description
155

155

00:07:36.975  -->  00:07:40.475
should be different from the empty string.
156

156

00:07:41.353  -->  00:07:45.385
Okay? So this will prevent that there are some inputs
157

157

00:07:45.385  -->  00:07:47.698
where there is no description at all.
158

158

00:07:47.698  -->  00:07:51.728
Now we also want the same thing with numbers, right?
159

159

00:07:51.728  -->  00:07:54.436
So there is a function in JavaScript which tests
160

160

00:07:54.436  -->  00:07:57.409
if a number is not a number.
161

161

00:07:57.409  -->  00:07:59.092
So this sounds a bit confusing.
162

162

00:07:59.092  -->  00:08:02.249
So let's go back here to the interface, okay?
163

163

00:08:02.249  -->  00:08:04.519
So in JavaScript there is something, this Nan
164

164

00:08:04.519  -->  00:08:07.623
and this means not a number.
165

165

00:08:07.623  -->  00:08:09.999
And so as we hit this input button here
166

166

00:08:09.999  -->  00:08:11.998
without any number here
167

167

00:08:11.998  -->  00:08:15.165
this then returned not a number. Okay?
168

168

00:08:17.078  -->  00:08:21.271
And so what we want is that this is not, not a number.
169

169

00:08:21.271  -->  00:08:22.866
Make sense?
170

170

00:08:22.866  -->  00:08:24.850
So right now it's not a number.
171

171

00:08:24.850  -->  00:08:26.682
So what we want is the other thing.
172

172

00:08:26.682  -->  00:08:30.004
So we want it not to be not a number,
173

173

00:08:30.004  -->  00:08:31.655
so that it's a number.
174

174

00:08:31.655  -->  00:08:35.822
So what we can do is to test if it's not a number like this
175

175

00:08:37.460  -->  00:08:38.710
is not a number
176

176

00:08:40.043  -->  00:08:42.793
and then we pass the input.value.
177

177

00:08:44.953  -->  00:08:49.120
Okay? Now if this is not a number, it will return true.
178

178

00:08:50.528  -->  00:08:53.889
And when it is a number, it will return false.
179

179

00:08:53.889  -->  00:08:56.370
But we want the exact opposite, right?
180

180

00:08:56.370  -->  00:08:59.689
So we can simply use the not operator here.
181

181

00:08:59.689  -->  00:09:03.119
And this way it will be true if it is a number
182

182

00:09:03.119  -->  00:09:06.486
and it will be false if it's not a number.
183

183

00:09:06.486  -->  00:09:09.465
And now all we need is the and operator here.
184

184

00:09:09.465  -->  00:09:11.974
So we want this to happen at the same time.
185

185

00:09:11.974  -->  00:09:14.302
The input description should not be empty
186

186

00:09:14.302  -->  00:09:17.289
and the number should actually be a number.
187

187

00:09:17.289  -->  00:09:20.510
So it should not be not a number.
188

188

00:09:20.510  -->  00:09:22.270
So this is already pretty good
189

189

00:09:22.270  -->  00:09:24.328
but we can do even better
190

190

00:09:24.328  -->  00:09:29.124
because imagine the case that the input value is zero.
191

191

00:09:29.124  -->  00:09:33.369
That is also not really an expense or an income, right?
192

192

00:09:33.369  -->  00:09:34.412
But it's still a number
193

193

00:09:34.412  -->  00:09:38.060
so it will pass this test here, right?
194

194

00:09:38.060  -->  00:09:41.146
So what we can do is to simply add
195

195

00:09:41.146  -->  00:09:44.479
input.value should be greater than zero.
196

196

00:09:46.463  -->  00:09:47.796
So, makes sense?
197

197

00:09:49.858  -->  00:09:53.532
And now all of this only happens in the case that
198

198

00:09:53.532  -->  00:09:56.844
these three conditions are all true at the same time.
199

199

00:09:56.844  -->  00:10:00.499
And that's why we use the and operator.
200

200

00:10:00.499  -->  00:10:02.972
So this is what we want always to happen
201

201

00:10:02.972  -->  00:10:05.139
because without this we don't have any data
202

202

00:10:05.139  -->  00:10:06.718
at all to test.
203

203

00:10:06.718  -->  00:10:08.188
But all of the other stuff
204

204

00:10:08.188  -->  00:10:12.091
so adding the new item to the budget controller
205

205

00:10:12.091  -->  00:10:13.760
and to the UI clear the fields
206

206

00:10:13.760  -->  00:10:15.450
and all of this should only happen
207

207

00:10:15.450  -->  00:10:17.615
if there is actually some significant data
208

208

00:10:17.615  -->  00:10:19.445
that we can use.
209

209

00:10:19.445  -->  00:10:21.362
So let's now test this.
210

210

00:10:23.322  -->  00:10:27.417
Okay, so if we now hit this here, nothing happens.
211

211

00:10:27.417  -->  00:10:30.584
If we add something just like this
212

212

00:10:30.584  -->  00:10:34.056
but without a number, also nothing happens.
213

213

00:10:34.056  -->  00:10:37.806
And now let's put 12, okay, so now it worked.
214

214

00:10:38.671  -->  00:10:41.918
Now let's test only with a number
215

215

00:10:41.918  -->  00:10:44.048
and it does not work.
216

216

00:10:44.048  -->  00:10:46.477
So test 2 and now it should work.
217

217

00:10:46.477  -->  00:10:49.011
So I hit return. Alright.
218

218

00:10:49.011  -->  00:10:51.577
And now let's add another test.
219

219

00:10:51.577  -->  00:10:55.744
Test 3 with zero. So it should also not work, right?
220

220

00:10:57.071  -->  00:10:59.562
And it doesn't. So, great.
221

221

00:10:59.562  -->  00:11:03.229
But 01 works. So we have 1 here. So perfect.
222

222

00:11:04.467  -->  00:11:08.153
So all of the problems are solved now
223

223

00:11:08.153  -->  00:11:10.908
and so we're ready to move on to actually
224

224

00:11:10.908  -->  00:11:12.991
do the real calculations.
