WEBVTT
1
1

00:00:01.287  -->  00:00:03.346
<v Instructor>In this lecture we will expand</v>
2

2

00:00:03.346  -->  00:00:05.950
our JavaScript toolbox even more with
3

3

00:00:05.950  -->  00:00:08.700
the bind, call and apply methods.
4

4

00:00:10.851  -->  00:00:13.690
So we know that functions are a special kind
5

5

00:00:13.690  -->  00:00:18.083
of object, right, and such as the array objects
6

6

00:00:18.083  -->  00:00:20.934
for example, functions also get a couple
7

7

00:00:20.934  -->  00:00:23.194
of special methods which they inherit from
8

8

00:00:23.194  -->  00:00:26.706
the function constructor object, right?
9

9

00:00:26.706  -->  00:00:28.970
So in this lecture we will talk about
10

10

00:00:28.970  -->  00:00:32.665
the powerful call, apply and bind methods,
11

11

00:00:32.665  -->  00:00:35.483
and in a nutshell, these methods allow us
12

12

00:00:35.483  -->  00:00:39.270
to call a function and set the this variable manually.
13

13

00:00:39.270  -->  00:00:41.886
So let's see a small example here,
14

14

00:00:41.886  -->  00:00:44.470
and for that I'm gonna create an object,
15

15

00:00:44.470  -->  00:00:47.388
and in this case it's just a very simple object,
16

16

00:00:47.388  -->  00:00:50.207
so no fancy function constructors
17

17

00:00:50.207  -->  00:00:52.754
or inheritance, none of that stuff,
18

18

00:00:52.754  -->  00:00:56.754
so just john and then the object literal syntax.
19

19

00:01:01.477  -->  00:01:04.242
So his name is John of course,
20

20

00:01:04.242  -->  00:01:07.406
and we've done this a lot of times by now.
21

21

00:01:07.406  -->  00:01:11.156
His age and then his job, which is a teacher,
22

22

00:01:14.912  -->  00:01:17.936
and now what we also want here is a method,
23

23

00:01:17.936  -->  00:01:21.865
and that's a method basically for John to present himself,
24

24

00:01:21.865  -->  00:01:24.651
and we are going to have two styles here.
25

25

00:01:24.651  -->  00:01:28.842
First a formal style, and then also a friendly style.
26

26

00:01:28.842  -->  00:01:32.075
So John is basically going to say a sentence
27

27

00:01:32.075  -->  00:01:34.639
in which he presents himself, and we will also
28

28

00:01:34.639  -->  00:01:37.826
make this dependent on the time of the day.
29

29

00:01:37.826  -->  00:01:41.409
So presentation is a function which accepts
30

30

00:01:43.479  -->  00:01:45.812
the style and the timeOfDay.
31

31

00:01:47.952  -->  00:01:52.385
Okay, so depending on the style that we chose,
32

32

00:01:52.385  -->  00:01:54.637
we will have two different sentences.
33

33

00:01:54.637  -->  00:01:58.804
So if the style is formal, then we console.log something,
34

34

00:02:08.771  -->  00:02:12.938
and if the style is friendly then we say something else.
35

35

00:02:22.022  -->  00:02:24.397
So console.log something else.
36

36

00:02:24.397  -->  00:02:26.663
Okay, in the formal part we are going to say something
37

37

00:02:26.663  -->  00:02:29.216
like "Good morning ladies and gentlemen,"
38

38

00:02:29.216  -->  00:02:31.716
so "Good," then the timeOfDay,
39

39

00:02:38.337  -->  00:02:40.254
"Ladies and gentlemen!"
40

40

00:02:42.511  -->  00:02:47.413
And now remember, if we want to have this symbol here,
41

41

00:02:47.413  -->  00:02:50.028
then we need to actually escape it,
42

42

00:02:50.028  -->  00:02:53.495
so that JavaScript thinks that it's not closing the string,
43

43

00:02:53.495  -->  00:02:55.941
but that it's really part of the text.
44

44

00:02:55.941  -->  00:03:00.108
So "I\'m," so and then his name, so I'm John in this case,
45

45

00:03:05.587  -->  00:03:09.587
then we wanna say how old, so "I\'m,"
46

46

00:03:10.953  -->  00:03:14.189
or let's actually first say his job,
47

47

00:03:14.189  -->  00:03:18.356
so "I\'m a" this.job, so I'm a teacher in this case,
48

48

00:03:21.988  -->  00:03:26.155
"and I\'m," and now the age, "years old."
49

49

00:03:35.513  -->  00:03:38.765
So a bit confusing, but it makes sense.
50

50

00:03:38.765  -->  00:03:41.789
So now if the friendly style is chosen,
51

51

00:03:41.789  -->  00:03:43.543
then we want to start our sentence
52

52

00:03:43.543  -->  00:03:46.626
with something like "Hey! What's up?"
53

53

00:03:52.689  -->  00:03:56.856
And then again, "I\'m," and now we can actually copy this,
54

54

00:03:59.733  -->  00:04:03.047
and I see I'm missing a plus sign here,
55

55

00:04:03.047  -->  00:04:06.130
so let's copy this, so then close it,
56

56

00:04:07.313  -->  00:04:09.939
and I also need to use the timeOfDay,
57

57

00:04:09.939  -->  00:04:12.689
so "Have a nice " plus timeOfDay.
58

58

00:04:19.441  -->  00:04:23.011
Okay, so first of all let's test this.
59

59

00:04:23.011  -->  00:04:26.594
So john.presentation with the formal style,
60

60

00:04:30.896  -->  00:04:33.479
and let's say in the "morning."
61

61

00:04:36.700  -->  00:04:39.616
Okay, so it looks good, right?
62

62

00:04:39.616  -->  00:04:42.160
Actually there's only one space here missing,
63

63

00:04:42.160  -->  00:04:45.493
but the rest is good, so it's just here,
64

64

00:04:46.686  -->  00:04:49.436
a space, right, and so also here.
65

65

00:04:50.594  -->  00:04:54.761
Now let's add another object here for someone called Emily.
66

66

00:04:58.623  -->  00:05:02.373
So the name is Emily, she's 30 years old, 35,
67

67

00:05:06.340  -->  00:05:08.673
and she is a designer, okay.
68

68

00:05:14.923  -->  00:05:18.940
Now suppose that we want to use the presentation method
69

69

00:05:18.940  -->  00:05:22.196
for the Emily object, which does not have
70

70

00:05:22.196  -->  00:05:24.729
this presentation method, right?
71

71

00:05:24.729  -->  00:05:27.884
We can use the call method to do this.
72

72

00:05:27.884  -->  00:05:29.762
So how does this work?
73

73

00:05:29.762  -->  00:05:32.140
The first argument of the call method
74

74

00:05:32.140  -->  00:05:36.307
is always to set the this variable, so let's see this.
75

75

00:05:38.209  -->  00:05:41.835
So we can say, again, john.presentation,
76

76

00:05:41.835  -->  00:05:45.012
and now we use the call method on this function,
77

77

00:05:45.012  -->  00:05:46.755
on this method here.
78

78

00:05:46.755  -->  00:05:50.443
So call, and now as I said, the first argument here
79

79

00:05:50.443  -->  00:05:54.649
is the this variable, so if we set the this variable
80

80

00:05:54.649  -->  00:05:58.732
to emily here, right, then the this variable here
81

81

00:06:00.088  -->  00:06:02.671
and here, and so on, so on, then this will
82

82

00:06:02.671  -->  00:06:06.338
no longer be John, but it will Emily, right?
83

83

00:06:09.190  -->  00:06:12.021
And now we can set the other arguments,
84

84

00:06:12.021  -->  00:06:16.201
so let's this time use the friendly style,
85

85

00:06:16.201  -->  00:06:18.368
and it's in the afternoon.
86

86

00:06:20.020  -->  00:06:23.600
So let's check this, and this works!
87

87

00:06:23.600  -->  00:06:27.512
So now it's Emily and it still works.
88

88

00:06:27.512  -->  00:06:30.879
So we have the job and her age,
89

89

00:06:30.879  -->  00:06:33.026
and this is called method borrowing
90

90

00:06:33.026  -->  00:06:36.498
because we actually borrowed the method from John,
91

91

00:06:36.498  -->  00:06:39.377
to use it here on the Emily object.
92

92

00:06:39.377  -->  00:06:41.659
So again, the call method allows us
93

93

00:06:41.659  -->  00:06:45.635
to set the this variable here in the first argument,
94

94

00:06:45.635  -->  00:06:47.794
and we set it to "emily" because we wanted
95

95

00:06:47.794  -->  00:06:50.734
to use John's presentation method,
96

96

00:06:50.734  -->  00:06:53.051
but setting the this variable to "emily,"
97

97

00:06:53.051  -->  00:06:57.789
so that we could use John's method on Emily, right?
98

98

00:06:57.789  -->  00:06:59.955
So that is the call method.
99

99

00:06:59.955  -->  00:07:02.488
There is a very similar method which is called
100

100

00:07:02.488  -->  00:07:05.572
the apply method, and the only difference is
101

101

00:07:05.572  -->  00:07:09.397
that this one accepts the arguments as an array,
102

102

00:07:09.397  -->  00:07:12.188
so that's only two arguments, first this variable,
103

103

00:07:12.188  -->  00:07:16.439
and then an array where all the other arguments go.
104

104

00:07:16.439  -->  00:07:18.982
So it would be something like this,
105

105

00:07:18.982  -->  00:07:22.732
so john.presentation, and apply in this case,
106

106

00:07:25.062  -->  00:07:28.395
and emily, and now as I said, the array.
107

107

00:07:29.862  -->  00:07:33.412
And then in here we would set the other arguments,
108

108

00:07:33.412  -->  00:07:35.329
friendly and afternoon.
109

109

00:07:38.444  -->  00:07:41.317
Now this is not gonna work because our method
110

110

00:07:41.317  -->  00:07:45.416
does not expect to receive an array as the input, right?
111

111

00:07:45.416  -->  00:07:49.850
So the presentation wants two normal arguments here,
112

112

00:07:49.850  -->  00:07:52.386
it doesn't expect to receive an array, so this
113

113

00:07:52.386  -->  00:07:55.441
is not gonna work, but I just wanted to show it to you
114

114

00:07:55.441  -->  00:07:59.210
because we will actually use this later in our project.
115

115

00:07:59.210  -->  00:08:01.441
So let's just comment this out here.
116

116

00:08:01.441  -->  00:08:04.408
All right, and let's now see the bind method.
117

117

00:08:04.408  -->  00:08:06.901
So we used the call and the apply,
118

118

00:08:06.901  -->  00:08:10.392
so the bind method is the one that's missing here.
119

119

00:08:10.392  -->  00:08:14.735
So the bind is very similar to the call method as well,
120

120

00:08:14.735  -->  00:08:19.066
so it also allows us to set the this variable explicitly.
121

121

00:08:19.066  -->  00:08:20.900
However, the difference here is
122

122

00:08:20.900  -->  00:08:24.370
that bind doesn't immediately call the function,
123

123

00:08:24.370  -->  00:08:27.723
but instead it generates a copy of the function
124

124

00:08:27.723  -->  00:08:30.240
so that we can store it somewhere.
125

125

00:08:30.240  -->  00:08:32.495
And that can actually be extremely useful
126

126

00:08:32.495  -->  00:08:35.746
to create functions with preset arguments.
127

127

00:08:35.746  -->  00:08:39.849
So let's see how, so let's create a variable
128

128

00:08:39.849  -->  00:08:43.199
because as I said, the bind method will return a function,
129

129

00:08:43.199  -->  00:08:46.061
so we have to store it at function somewhere.
130

130

00:08:46.061  -->  00:08:48.039
So we're gonna use the bind method
131

131

00:08:48.039  -->  00:08:51.242
to create a function with preset arguments,
132

132

00:08:51.242  -->  00:08:53.345
because bind allows us to do that.
133

133

00:08:53.345  -->  00:08:56.334
So we're gonna preset the friendly argument
134

134

00:08:56.334  -->  00:08:59.112
so that we don't have to input it again and again.
135

135

00:08:59.112  -->  00:09:03.029
So let's call this function johnFriendly, okay?
136

136

00:09:06.549  -->  00:09:10.632
John.presentation, and now I'm going to use bind.
137

137

00:09:11.812  -->  00:09:14.440
And again, the first argument here is to set
138

138

00:09:14.440  -->  00:09:18.210
the this variable, which in this case doesn't really matter,
139

139

00:09:18.210  -->  00:09:20.757
so I'm just going to go with john,
140

140

00:09:20.757  -->  00:09:23.340
okay, and now I say "friendly."
141

141

00:09:24.878  -->  00:09:26.786
So this is the first argument of the function,
142

142

00:09:26.786  -->  00:09:29.761
of the presentation function.
143

143

00:09:29.761  -->  00:09:33.567
So the style, but I will not set the timeOfDay, okay?
144

144

00:09:33.567  -->  00:09:36.324
This will not be set here at this point,
145

145

00:09:36.324  -->  00:09:38.427
I will just leave it like this.
146

146

00:09:38.427  -->  00:09:41.096
So let's now use the johnFriendly function,
147

147

00:09:41.096  -->  00:09:45.469
because again this method here returns a function,
148

148

00:09:45.469  -->  00:09:47.189
so the function will get stored
149

149

00:09:47.189  -->  00:09:50.333
here in the johnFriendly variable.
150

150

00:09:50.333  -->  00:09:53.416
So johnFriendly, and now there's only
151

151

00:09:55.113  -->  00:09:57.905
one argument left to be set, right?
152

152

00:09:57.905  -->  00:10:00.810
Because I already set the other one as friendly,
153

153

00:10:00.810  -->  00:10:04.393
so I can now say like "morning" here again,
154

154

00:10:05.359  -->  00:10:09.526
and this is just gonna work as it did before, so let's see.
155

155

00:10:10.919  -->  00:10:13.711
All right, so "I'm John, a teacher, 26,
156

156

00:10:13.711  -->  00:10:16.145
"Have a nice morning."
157

157

00:10:16.145  -->  00:10:18.249
So you see how useful this is right?
158

158

00:10:18.249  -->  00:10:21.751
So we have a function now which is always for
159

159

00:10:21.751  -->  00:10:25.034
the friendly version of the presentation method.
160

160

00:10:25.034  -->  00:10:28.410
So we can now use it for another time of the day,
161

161

00:10:28.410  -->  00:10:32.577
so johnFriendly again, now let's say in the "night,"
162

162

00:10:34.305  -->  00:10:38.472
and again everything that changes here now is "night."
163

163

00:10:39.695  -->  00:10:43.721
So again, bind allows us to preset some arguments here,
164

164

00:10:43.721  -->  00:10:46.229
and this, what we just did here,
165

165

00:10:46.229  -->  00:10:49.401
actually has a name, and it's called carrying.
166

166

00:10:49.401  -->  00:10:52.645
So carrying is just a technique in which we create
167

167

00:10:52.645  -->  00:10:55.545
a function based on another function,
168

168

00:10:55.545  -->  00:10:57.969
but with some preset parameters,
169

169

00:10:57.969  -->  00:10:59.895
so exactly what we did here.
170

170

00:10:59.895  -->  00:11:03.330
And bind is extremely useful for that.
171

171

00:11:03.330  -->  00:11:06.552
And we can of course do the same for Emily.
172

172

00:11:06.552  -->  00:11:09.885
Okay, so let's say var emily and Formal,
173

173

00:11:12.938  -->  00:11:15.855
so john.presentation and then bind,
174

174

00:11:18.328  -->  00:11:21.025
and this time the this variable matters again
175

175

00:11:21.025  -->  00:11:24.731
because we need to use the presentation method on Emily,
176

176

00:11:24.731  -->  00:11:27.706
so the this variable will become emily,
177

177

00:11:27.706  -->  00:11:31.873
and now I'm going to preset this argument to formal.
178

178

00:11:33.961  -->  00:11:36.961
And I can now use it so emilyFormal,
179

179

00:11:39.893  -->  00:11:42.643
and then "afternoon" for example.
180

180

00:11:45.508  -->  00:11:48.485
And here we go, "Good afternoon, Emily,
181

181

00:11:48.485  -->  00:11:50.944
"designer, and 30 years old."
182

182

00:11:50.944  -->  00:11:53.382
All right, so now we saw some examples
183

183

00:11:53.382  -->  00:11:55.578
for call, apply and bind.
184

184

00:11:55.578  -->  00:11:59.176
Once again, these are more like small, toy examples,
185

185

00:11:59.176  -->  00:12:01.548
but they really help you to understand
186

186

00:12:01.548  -->  00:12:04.736
what we can do with call, apply and bind,
187

187

00:12:04.736  -->  00:12:05.971
and we will actually use them in
188

188

00:12:05.971  -->  00:12:09.288
a real situation in our next project.
189

189

00:12:09.288  -->  00:12:12.027
But before doing that, I wanna just very quickly
190

190

00:12:12.027  -->  00:12:15.021
show you a cool real-world example right here.
191

191

00:12:15.021  -->  00:12:17.277
So let's bring back some of the code that we wrote
192

192

00:12:17.277  -->  00:12:21.444
in a lecture about passing functions as arguments.
193

193

00:12:22.800  -->  00:12:26.050
So I have the code up here, let me see,
194

194

00:12:27.466  -->  00:12:30.481
oh yeah, this is the one that I want,
195

195

00:12:30.481  -->  00:12:33.148
and this one here as well, okay.
196

196

00:12:34.862  -->  00:12:38.075
So let's create some space here, and all right.
197

197

00:12:38.075  -->  00:12:40.079
Okay, and do you remember this one?
198

198

00:12:40.079  -->  00:12:42.513
So this was the function that we created here
199

199

00:12:42.513  -->  00:12:45.153
where we then passed a callback function,
200

200

00:12:45.153  -->  00:12:47.600
which was to calculateAge and calculate
201

201

00:12:47.600  -->  00:12:50.388
if someone was of full age.
202

202

00:12:50.388  -->  00:12:52.633
So imagine this like a machine
203

203

00:12:52.633  -->  00:12:56.117
which accepts a function, and then applies that function
204

204

00:12:56.117  -->  00:12:59.989
to all of the elements of an array, right?
205

205

00:12:59.989  -->  00:13:03.755
So back then we had this FullAge function here,
206

206

00:13:03.755  -->  00:13:07.133
but actually the FullAge varies from country to country,
207

207

00:13:07.133  -->  00:13:10.701
so it's not always 18 years like we have here.
208

208

00:13:10.701  -->  00:13:13.178
For example, in Japan, you have to be 20
209

209

00:13:13.178  -->  00:13:15.632
to be of full age, and in other countries
210

210

00:13:15.632  -->  00:13:18.948
it's actually something like 16 or 17.
211

211

00:13:18.948  -->  00:13:22.675
So what we can do is to pass in a second argument
212

212

00:13:22.675  -->  00:13:26.175
for the age limit, so something like this.
213

213

00:13:27.683  -->  00:13:31.399
So we pass in a limit, and then instead of having 18 here,
214

214

00:13:31.399  -->  00:13:35.007
we say that the element in the array
215

215

00:13:35.007  -->  00:13:39.016
has to be greater or equal to the limit that we defined.
216

216

00:13:39.016  -->  00:13:43.223
All right, so let's again start by calculating the ages,
217

217

00:13:43.223  -->  00:13:47.140
so var ages is arrayCalc, then the years array,
218

218

00:13:50.744  -->  00:13:54.411
and then our callback function calculateAge.
219

219

00:13:55.289  -->  00:13:58.509
Now the problem with our FullAge function
220

220

00:13:58.509  -->  00:14:01.129
is that it accepts two arguments,
221

221

00:14:01.129  -->  00:14:03.844
but our arrayCalc function here
222

222

00:14:03.844  -->  00:14:06.316
can only use it with one argument.
223

223

00:14:06.316  -->  00:14:11.013
So here, right, the fn function is always called with only
224

224

00:14:11.013  -->  00:14:15.180
one argument, which is this element of the array, right?
225

225

00:14:16.048  -->  00:14:18.041
So what can we do here?
226

226

00:14:18.041  -->  00:14:20.001
I would say that the best solution
227

227

00:14:20.001  -->  00:14:23.527
is to pass in our isFullAge function,
228

228

00:14:23.527  -->  00:14:27.452
but with the limit already preset, right?
229

229

00:14:27.452  -->  00:14:29.168
And that's what we're gonna do.
230

230

00:14:29.168  -->  00:14:31.264
Do you remember how to do that?
231

231

00:14:31.264  -->  00:14:33.983
Exactly, we use the bind method
232

232

00:14:33.983  -->  00:14:37.869
because bind allows us to create a copy of a function
233

233

00:14:37.869  -->  00:14:42.569
with a preset argument, which is exactly what we need here.
234

234

00:14:42.569  -->  00:14:46.516
And we did that before, and so now we're gonna do it again.
235

235

00:14:46.516  -->  00:14:50.412
So let's create a variable again called "full,"
236

236

00:14:50.412  -->  00:14:53.109
but this time it's called fullJapan,
237

237

00:14:53.109  -->  00:14:55.075
because I'm gonna do it for Japan,
238

238

00:14:55.075  -->  00:14:59.117
because they have this limit of 20 years.
239

239

00:14:59.117  -->  00:15:01.582
So this is what we did before also,
240

240

00:15:01.582  -->  00:15:05.235
so arrayCalc, and now we pass in the ages
241

241

00:15:05.235  -->  00:15:09.576
that we calculated before, and now we cannot simply pass in
242

242

00:15:09.576  -->  00:15:13.613
the isFullAge, as I explained before, right?
243

243

00:15:13.613  -->  00:15:16.647
So isFullAge, so we will not just pass
244

244

00:15:16.647  -->  00:15:19.761
this function like this, but we will use
245

245

00:15:19.761  -->  00:15:22.838
the bind method on it before passing it,
246

246

00:15:22.838  -->  00:15:25.476
so now we can preset the argument.
247

247

00:15:25.476  -->  00:15:27.874
So first the this keyword, don't forget this,
248

248

00:15:27.874  -->  00:15:30.442
the first thing always has to be the this keyword,
249

249

00:15:30.442  -->  00:15:32.953
and in this case we don't really care about it,
250

250

00:15:32.953  -->  00:15:37.120
so we just say this, and then our preset limit which is 20.
251

251

00:15:40.130  -->  00:15:44.799
Okay and now what will be passed into the arrayCalc function
252

252

00:15:44.799  -->  00:15:47.901
is not simply going to be the FullAge function,
253

253

00:15:47.901  -->  00:15:50.627
but a copy of the isFull function
254

254

00:15:50.627  -->  00:15:54.377
with 20 as the preset argument for the limit.
255

255

00:15:55.373  -->  00:15:58.606
So let's see if this actually works,
256

256

00:15:58.606  -->  00:16:01.523
so let's console.log the fullJapan,
257

257

00:16:05.615  -->  00:16:09.706
and also let's show the ages so that we can see
258

258

00:16:09.706  -->  00:16:12.789
if this is actually correct, so ages.
259

259

00:16:17.308  -->  00:16:20.558
Okay, so yes it seems like it's working
260

260

00:16:21.736  -->  00:16:26.149
because here we have someone which is 18, right,
261

261

00:16:26.149  -->  00:16:29.223
but our isFullAge function tells us
262

262

00:16:29.223  -->  00:16:32.360
that this person is not of full age here, right,
263

263

00:16:32.360  -->  00:16:35.137
and that makes sense because in Japan, you're only
264

264

00:16:35.137  -->  00:16:39.386
of full age when you're 20, as we specified here.
265

265

00:16:39.386  -->  00:16:42.999
So this is working, and this is another very useful way
266

266

00:16:42.999  -->  00:16:44.831
in which we use the bind method,
267

267

00:16:44.831  -->  00:16:47.779
and this is really a real-world example.
268

268

00:16:47.779  -->  00:16:51.419
Cool, so now you have yet another tool in your toolbox,
269

269

00:16:51.419  -->  00:16:55.282
and that toolbox is getting really, really full right?
270

270

00:16:55.282  -->  00:16:59.208
We are now almost ready to start our big project,
271

271

00:16:59.208  -->  00:17:01.344
so let's very quickly move on,
272

272

00:17:01.344  -->  00:17:04.011
and see you in the next lecture.
