1
1

00:00:01,225  -->  00:00:04,400
<v Instructor>Before moving on from the topic of objects</v>
2

2

00:00:04,400  -->  00:00:06,429
to the topic of functions
3

3

00:00:06,429  -->  00:00:10,746
I just want to very quickly compare primitives and objects.
4

4

00:00:10,746  -->  00:00:13,042
We actually talked about this very briefly
5

5

00:00:13,042  -->  00:00:15,018
at the beginning of this section,
6

6

00:00:15,018  -->  00:00:18,628
but then we were too busy talking about the prototype chain
7

7

00:00:18,628  -->  00:00:20,545
and those important things.
8

8

00:00:20,545  -->  00:00:22,962
But let's get back to it now.
9

9

00:00:24,036  -->  00:00:27,453
So let's get first rid of this code here.
10

10

00:00:33,173  -->  00:00:34,590
All right.
11

11

00:00:35,580  -->  00:00:40,493
So, primitives versus objects,
12

12

00:00:40,493  -->  00:00:43,326
and we basically know that only numbers,
13

13

00:00:43,326  -->  00:00:46,744
strings, booleans, undefined, and null
14

14

00:00:46,744  -->  00:00:50,919
are primitives and that everything else are objects.
15

15

00:00:50,919  -->  00:00:54,557
Now we already know a lot of differences between the two,
16

16

00:00:54,557  -->  00:00:57,557
so let's now compare them even more.
17

17

00:00:58,552  -->  00:01:01,937
So a big difference between primitives and objects
18

18

00:01:01,937  -->  00:01:04,568
is that variables containing primitives
19

19

00:01:04,568  -->  00:01:09,271
actually hold that data inside of the variable itself.
20

20

00:01:09,271  -->  00:01:12,304
On objects it's very different.
21

21

00:01:12,304  -->  00:01:14,766
Variables associated with objects
22

22

00:01:14,766  -->  00:01:17,896
do not actually contain the object,
23

23

00:01:17,896  -->  00:01:22,215
but instead they contain a reference to the place in memory
24

24

00:01:22,215  -->  00:01:26,262
where the object sits, so where the object is stored.
25

25

00:01:26,262  -->  00:01:29,781
So again a variable declared as an object
26

26

00:01:29,781  -->  00:01:32,777
does not have a real copy of the object
27

27

00:01:32,777  -->  00:01:34,723
it just points to that object.
28

28

00:01:34,723  -->  00:01:36,986
So let's see this in practice.
29

29

00:01:36,986  -->  00:01:39,948
And I'm going to start with primitives.
30

30

00:01:39,948  -->  00:01:42,888
So let's define a couple of variables.
31

31

00:01:42,888  -->  00:01:47,665
So let's simply call it A and set it to a random number
32

32

00:01:47,665  -->  00:01:49,861
and then let's create variable B
33

33

00:01:49,861  -->  00:01:54,138
and say it should be equal to A, okay.
34

34

00:01:54,138  -->  00:01:56,721
So B is now also 23, right.
35

35

00:01:57,728  -->  00:02:00,483
And now I'm going to mutate A,
36

36

00:02:00,483  -->  00:02:02,854
which means to change it value
37

37

00:02:02,854  -->  00:02:05,460
and I'll change it to 46,
38

38

00:02:05,460  -->  00:02:09,617
and that's now simply console log A and B.
39

39

00:02:09,617  -->  00:02:10,450
A
40

40

00:02:14,284  -->  00:02:15,117
and B.
41

41

00:02:17,534  -->  00:02:21,893
So 46 and 23, that's what you expected, right.
42

42

00:02:21,893  -->  00:02:23,739
So A is 46,
43

43

00:02:23,739  -->  00:02:28,305
because we changed it from 23 to 46 here in this line
44

44

00:02:28,305  -->  00:02:30,039
and B is 23,
45

45

00:02:30,039  -->  00:02:34,206
because up here we said that B should be equal to A, right.
46

46

00:02:35,493  -->  00:02:36,666
So what we did here
47

47

00:02:36,666  -->  00:02:40,812
was to simply copy the value of A to B,
48

48

00:02:40,812  -->  00:02:44,009
and when we then changed A to 46
49

49

00:02:44,009  -->  00:02:47,468
this did not affect the value of variable B,
50

50

00:02:47,468  -->  00:02:49,553
which still is 23.
51

51

00:02:49,553  -->  00:02:53,088
And this means that each of the variables actually hold
52

52

00:02:53,088  -->  00:02:55,060
their own copy of the data.
53

53

00:02:55,060  -->  00:02:57,602
They do not reference anything.
54

54

00:02:57,602  -->  00:02:59,730
So two variables holding primitives
55

55

00:02:59,730  -->  00:03:02,449
are really two different things.
56

56

00:03:02,449  -->  00:03:06,329
So let's do something similar with objects this time.
57

57

00:03:06,329  -->  00:03:08,412
So obj one.
58

58

00:03:10,092  -->  00:03:12,342
So this is our first object
59

59

00:03:15,911  -->  00:03:19,911
name John and then just set the age to 26, okay.
60

60

00:03:21,383  -->  00:03:24,184
And now something very similar,
61

61

00:03:24,184  -->  00:03:26,351
I just say object two
62

62

00:03:27,711  -->  00:03:30,760
equals object one, okay.
63

63

00:03:30,760  -->  00:03:34,162
Such as we did before with B equals A.
64

64

00:03:34,162  -->  00:03:38,616
And now I'm going to mutate the age on object one.
65

65

00:03:38,616  -->  00:03:42,366
So the age, and I'm going to change it to 30.
66

66

00:03:44,972  -->  00:03:48,972
And then let's console log the age on object one
67

67

00:03:52,036  -->  00:03:56,418
and duplicate this line in object two.
68

68

00:03:56,418  -->  00:03:57,751
All right.
69

69

00:03:59,488  -->  00:04:02,554
So we have a small bug here, all right.
70

70

00:04:02,554  -->  00:04:06,018
So because this would be object one of course, right.
71

71

00:04:06,018  -->  00:04:07,685
So what happens now?
72

72

00:04:08,577  -->  00:04:10,776
Okay, they are both 30,
73

73

00:04:10,776  -->  00:04:14,166
so object1.age and object2.age
74

74

00:04:14,166  -->  00:04:18,206
are both 30 and that's really strange, right.
75

75

00:04:18,206  -->  00:04:20,476
Well not really actually
76

76

00:04:20,476  -->  00:04:22,846
and that's because when we said object one
77

77

00:04:22,846  -->  00:04:25,253
should be equal to object two
78

78

00:04:25,253  -->  00:04:28,177
we did not actually create a new object.
79

79

00:04:28,177  -->  00:04:30,127
No copy was created here,
80

80

00:04:30,127  -->  00:04:33,215
all that we did was to create a new reference
81

81

00:04:33,215  -->  00:04:36,008
which points to the first object,
82

82

00:04:36,008  -->  00:04:39,031
so the object one and object two variables
83

83

00:04:39,031  -->  00:04:40,801
both hold a reference
84

84

00:04:40,801  -->  00:04:44,524
that point to the exact same object in the memory,
85

85

00:04:44,524  -->  00:04:48,027
and that's why when we change the age in object one
86

86

00:04:48,027  -->  00:04:51,123
this change is also reflected on object two,
87

87

00:04:51,123  -->  00:04:55,477
because in fact it's the exact same object.
88

88

00:04:55,477  -->  00:04:58,615
So this is some really interesting stuff, right.
89

89

00:04:58,615  -->  00:05:02,314
It took me some time to actually understand this.
90

90

00:05:02,314  -->  00:05:05,640
Now with functions it works in the exact same way.
91

91

00:05:05,640  -->  00:05:08,776
So let's see what happens when we pass a primitive
92

92

00:05:08,776  -->  00:05:11,276
and an object into a function.
93

93

00:05:12,262  -->  00:05:15,091
So let's create some space here.
94

94

00:05:15,091  -->  00:05:18,424
Objects, these were the primitives,
95

95

00:05:21,299  -->  00:05:22,799
and now functions.
96

96

00:05:25,382  -->  00:05:28,882
So I'll start by creating an age variable.
97

97

00:05:29,860  -->  00:05:32,360
Okay, and then another object,
98

98

00:05:34,541  -->  00:05:37,253
and this time it's not going to be John.
99

99

00:05:37,253  -->  00:05:39,670
This time it's me, so, Jonas.
100

100

00:05:42,494  -->  00:05:46,446
And I will say the city, and that's Lisbon.
101

101

00:05:46,446  -->  00:05:49,779
So the city where I'm currently located.
102

102

00:05:50,867  -->  00:05:53,232
And now we write a simple function,
103

103

00:05:53,232  -->  00:05:56,384
which I'm just going to call change
104

104

00:05:56,384  -->  00:05:59,717
and it receives two parameters, A and B.
105

105

00:06:00,777  -->  00:06:04,386
And all this does is to mutate the data.
106

106

00:06:04,386  -->  00:06:07,803
So you want A to be 30
107

107

00:06:08,799  -->  00:06:12,178
and we want B.city
108

108

00:06:12,178  -->  00:06:14,928
to be San Francisco, for example,
109

109

00:06:16,162  -->  00:06:19,369
because it's a really nice city, you know.
110

110

00:06:19,369  -->  00:06:22,638
So now we're going to call this function
111

111

00:06:22,638  -->  00:06:24,462
and as you can guess
112

112

00:06:24,462  -->  00:06:28,259
we are going to pass age as the A variable,
113

113

00:06:28,259  -->  00:06:30,118
so as the A argument
114

114

00:06:30,118  -->  00:06:33,285
and the object as the B argument.
115

115

00:06:34,179  -->  00:06:35,012
Okay.
116

116

00:06:35,944  -->  00:06:39,317
And now once again we will simple console that log
117

117

00:06:39,317  -->  00:06:42,045
the result to the console.
118

118

00:06:42,045  -->  00:06:46,212
So the age and then console that log
119

119

00:06:48,080  -->  00:06:51,247
obj.city.
120

120

00:06:52,592  -->  00:06:56,497
So what do you expect is going to happen now?
121

121

00:06:56,497  -->  00:06:57,959
And let's see.
122

122

00:06:57,959  -->  00:07:02,529
Okay, so 27 is age and this object city,
123

123

00:07:02,529  -->  00:07:06,815
so the city attached to object variable is San Francisco.
124

124

00:07:06,815  -->  00:07:09,149
So we have the same thing here.
125

125

00:07:09,149  -->  00:07:12,191
We pass the age variable holding a primitive
126

126

00:07:12,191  -->  00:07:15,938
and the object variable holding a reference to an object
127

127

00:07:15,938  -->  00:07:17,391
into our function.
128

128

00:07:17,391  -->  00:07:20,251
This function then as it was invoked
129

129

00:07:20,251  -->  00:07:23,702
attempted to change the arguments that we passed into it.
130

130

00:07:23,702  -->  00:07:26,587
So when we then console log the values
131

131

00:07:26,587  -->  00:07:28,966
we see the same thing as before,
132

132

00:07:28,966  -->  00:07:32,030
and that is that the primitive has remained unchanged,
133

133

00:07:32,030  -->  00:07:34,334
but the city and the object
134

134

00:07:34,334  -->  00:07:37,041
has changed from Lisbon to San Francisco
135

135

00:07:37,041  -->  00:07:39,958
with this line of code here, right.
136

136

00:07:40,954  -->  00:07:42,469
So this shows us
137

137

00:07:42,469  -->  00:07:45,617
that when we pass a primitive into the function
138

138

00:07:45,617  -->  00:07:47,769
a simple copy is created,
139

139

00:07:47,769  -->  00:07:50,930
so we can change A as much as we want,
140

140

00:07:50,930  -->  00:07:54,170
it will never affect the variable on the outside
141

141

00:07:54,170  -->  00:07:56,256
because it is a primitive.
142

142

00:07:56,256  -->  00:07:58,086
But when we pass the object
143

143

00:07:58,086  -->  00:08:00,583
it's not really the object that we pass,
144

144

00:08:00,583  -->  00:08:03,083
but the reference to the object, okay.
145

145

00:08:03,083  -->  00:08:06,509
So again we do not pass an object into a function,
146

146

00:08:06,509  -->  00:08:10,130
but only the reference that points to the object.
147

147

00:08:10,130  -->  00:08:13,538
So when we then change the object inside of the function
148

148

00:08:13,538  -->  00:08:17,315
it is still reflected outside of the function.
149

149

00:08:17,315  -->  00:08:19,090
So I hope that this shows you
150

150

00:08:19,090  -->  00:08:21,377
that it's really something very important
151

151

00:08:21,377  -->  00:08:24,570
that we should really be careful about, right,
152

152

00:08:24,570  -->  00:08:28,107
because this can lead to some unexpected results
153

153

00:08:28,107  -->  00:08:30,170
and some strange bugs.
154

154

00:08:30,170  -->  00:08:31,905
And that's why it's super important
155

155

00:08:31,905  -->  00:08:34,231
that we have this information now.
156

156

00:08:34,231  -->  00:08:38,398
Cool, so let's now go to the next lecture right now.
