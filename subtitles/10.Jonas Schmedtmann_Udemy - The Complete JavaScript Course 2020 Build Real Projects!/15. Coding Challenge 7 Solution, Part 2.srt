1
1

00:00:00,956  -->  00:00:03,657
<v Instructor>Alright, so here goes my solution</v>
2

2

00:00:03,657  -->  00:00:07,074
to an expert level of our small quiz app.
3

3

00:00:09,598  -->  00:00:13,237
So at first take the code that we just wrote
4

4

00:00:13,237  -->  00:00:15,154
and copy it down there.
5

5

00:00:17,159  -->  00:00:20,742
So I'm going to comment it out and copy it.
6

6

00:00:26,088  -->  00:00:27,595
And paste it down here.
7

7

00:00:27,595  -->  00:00:30,122
So this is the starting point to now code
8

8

00:00:30,122  -->  00:00:33,146
the expert level of the quiz.
9

9

00:00:33,146  -->  00:00:36,750
So let's take a look at our first task here.
10

10

00:00:36,750  -->  00:00:38,673
So after we display the result,
11

11

00:00:38,673  -->  00:00:42,084
we then want to display the next random question.
12

12

00:00:42,084  -->  00:00:45,791
So let's do that and simply write a function.
13

13

00:00:45,791  -->  00:00:47,600
And what this function is going to do,
14

14

00:00:47,600  -->  00:00:50,254
it's going to do all of this game logic here
15

15

00:00:50,254  -->  00:00:53,745
so that we can call it over and over again.
16

16

00:00:53,745  -->  00:00:57,107
So let's call this function nextQuestion.
17

17

00:00:57,107  -->  00:00:59,190
So function nextQuestion,
18

18

00:01:01,395  -->  00:01:05,145
and of course it doesn't need any parameters.
19

19

00:01:06,537  -->  00:01:09,287
And now let's put into the inside
20

20

00:01:12,276  -->  00:01:16,443
and then of course we need to call it nextQuestion.
21

21

00:01:19,787  -->  00:01:22,930
Okay, so right no this is actually exactly the same thing
22

22

00:01:22,930  -->  00:01:26,544
that we had before, so nothing different is going to happen.
23

23

00:01:26,544  -->  00:01:28,685
Because now we need to also call
24

24

00:01:28,685  -->  00:01:31,684
this function here in the end.
25

25

00:01:31,684  -->  00:01:34,015
So imagine we execute this function here
26

26

00:01:34,015  -->  00:01:35,944
and then after all of this is done,
27

27

00:01:35,944  -->  00:01:38,079
so after we selected our question,
28

28

00:01:38,079  -->  00:01:40,354
displayed it, and checked the answer,
29

29

00:01:40,354  -->  00:01:43,166
we simply want to call this again.
30

30

00:01:43,166  -->  00:01:44,805
So very simple.
31

31

00:01:44,805  -->  00:01:47,722
We simply write nextQuestion again.
32

32

00:01:49,153  -->  00:01:53,312
Actually, this part here we only need to do once
33

33

00:01:53,312  -->  00:01:57,048
so the array for questions is always going to be the same.
34

34

00:01:57,048  -->  00:01:59,131
So nothing changes there.
35

35

00:02:00,734  -->  00:02:03,062
Now remember the problem that I described
36

36

00:02:03,062  -->  00:02:07,537
which is that right now, if we would call this app like this
37

37

00:02:07,537  -->  00:02:11,274
then we would have no way to actually ever stop this quiz.
38

38

00:02:11,274  -->  00:02:14,383
Because each time that we hit the cancel button
39

39

00:02:14,383  -->  00:02:17,721
on our prompt window, it simply opens a new window
40

40

00:02:17,721  -->  00:02:19,871
and then there's no way to really stop this.
41

41

00:02:19,871  -->  00:02:23,017
So we have to have a way to stop the game
42

42

00:02:23,017  -->  00:02:26,784
and that is by writing exit into the prompt window
43

43

00:02:26,784  -->  00:02:31,114
instead of writing the number for the correct answer.
44

44

00:02:31,114  -->  00:02:34,884
So let's say that we only want to call this next question
45

45

00:02:34,884  -->  00:02:38,134
if the input from the user is not exit.
46

46

00:02:41,061  -->  00:02:44,978
So we say if the answer is different from exit,
47

47

00:02:49,992  -->  00:02:54,159
only then we want to call the next question again.
48

48

00:02:55,679  -->  00:02:57,687
So this makes sense, right?
49

49

00:02:57,687  -->  00:03:01,437
And actually we also want to only do this one
50

50

00:03:02,954  -->  00:03:07,141
if the user doesn't choose to exit the game.
51

51

00:03:07,141  -->  00:03:10,847
So we only need to check if the answer is correct
52

52

00:03:10,847  -->  00:03:12,144
if the game continues.
53

53

00:03:12,144  -->  00:03:14,061
So if it's not an exit.
54

54

00:03:15,241  -->  00:03:18,264
Alright, now before we can actually try this out
55

55

00:03:18,264  -->  00:03:21,377
in the browser, there's still one issue with this
56

56

00:03:21,377  -->  00:03:25,460
and that is that up here, we converted the answer
57

57

00:03:26,665  -->  00:03:30,238
to a number, but here, down here we want to check
58

58

00:03:30,238  -->  00:03:33,924
if the answer is exit, so if it's this string.
59

59

00:03:33,924  -->  00:03:36,983
And that means that we actually do not want to convert
60

60

00:03:36,983  -->  00:03:39,520
the answer to a number here at this point
61

61

00:03:39,520  -->  00:03:43,873
because then we can no longer perform this check here
62

62

00:03:43,873  -->  00:03:46,786
because at this point the answer will no longer be
63

63

00:03:46,786  -->  00:03:48,620
an exit string, never.
64

64

00:03:48,620  -->  00:03:52,787
Okay, so we need to take this out from here and move it
65

65

00:03:54,998  -->  00:03:57,324
so we are going to move it to here.
66

66

00:03:57,324  -->  00:03:59,324
So parseInt this answer.
67

67

00:04:05,514  -->  00:04:08,835
So we're simply moving the parseInt function down here
68

68

00:04:08,835  -->  00:04:11,573
which is where we actually want a number.
69

69

00:04:11,573  -->  00:04:15,971
So we want to pass a number into the check answer method.
70

70

00:04:15,971  -->  00:04:17,875
And so now, everything should be set
71

71

00:04:17,875  -->  00:04:20,577
for this to work correctly.
72

72

00:04:20,577  -->  00:04:22,410
So let's try this out.
73

73

00:04:23,760  -->  00:04:26,862
So the name is Jonas, and alright.
74

74

00:04:26,862  -->  00:04:28,744
So you see we have a next question
75

75

00:04:28,744  -->  00:04:31,486
and we have a new prompt window here.
76

76

00:04:31,486  -->  00:04:35,586
So what does best describe coding, it's fun.
77

77

00:04:35,586  -->  00:04:38,636
Correct answer and the next question.
78

78

00:04:38,636  -->  00:04:40,298
So great, it's working just fine.
79

79

00:04:40,298  -->  00:04:43,067
So the first step, or the first two steps actually,
80

80

00:04:43,067  -->  00:04:45,067
are completed with this.
81

81

00:04:47,521  -->  00:04:49,664
Now remember we need to write exit
82

82

00:04:49,664  -->  00:04:52,806
if we want to exit from this game.
83

83

00:04:52,806  -->  00:04:56,055
So let's try this out so to see if this also works.
84

84

00:04:56,055  -->  00:04:57,638
And yes, it worked.
85

85

00:04:58,958  -->  00:05:01,802
So our code is complete at this point.
86

86

00:05:01,802  -->  00:05:04,723
Remember all of the stuff we wanted to do again,
87

87

00:05:04,723  -->  00:05:08,443
each time after the user gave an input,
88

88

00:05:08,443  -->  00:05:12,044
we simply wrote it in a function, called it at the beginning
89

89

00:05:12,044  -->  00:05:14,019
and then called it each time
90

90

00:05:14,019  -->  00:05:16,769
that we want to continue the game.
91

91

00:05:16,769  -->  00:05:18,600
So each time that the user didn't write,
92

92

00:05:18,600  -->  00:05:21,235
exit into the prompt window.
93

93

00:05:21,235  -->  00:05:24,863
So this was the easier part of this challenge,
94

94

00:05:24,863  -->  00:05:29,132
so let's now talk about keeping the score of the user.
95

95

00:05:29,132  -->  00:05:30,571
And as I mentioned before,
96

96

00:05:30,571  -->  00:05:34,056
I am going to use the power of closures here in this case.
97

97

00:05:34,056  -->  00:05:35,473
So let's see how.
98

98

00:05:36,825  -->  00:05:39,730
My solution is to write a function here
99

99

00:05:39,730  -->  00:05:43,194
which is going to keep the score and to update it
100

100

00:05:43,194  -->  00:05:46,382
when the answer that the user gave is correct.
101

101

00:05:46,382  -->  00:05:49,556
This is going to be like a nice container
102

102

00:05:49,556  -->  00:05:52,487
where I can keep everything that is related to the score.
103

103

00:05:52,487  -->  00:05:55,399
So the score itself and the function to update it
104

104

00:05:55,399  -->  00:05:59,566
instead of having global variables and variable mutations
105

105

00:06:00,567  -->  00:06:03,334
all over the place in our code.
106

106

00:06:03,334  -->  00:06:05,840
So let's just see how it's going to work.
107

107

00:06:05,840  -->  00:06:08,757
So functions and very simply score.
108

108

00:06:13,677  -->  00:06:17,913
And in here I'm going to create a variable called score.
109

109

00:06:17,913  -->  00:06:21,496
Let's say sc for the short version of score
110

110

00:06:23,795  -->  00:06:26,759
and zero, just because I don't want to repeat
111

111

00:06:26,759  -->  00:06:28,927
the same name here.
112

112

00:06:28,927  -->  00:06:33,094
And this function here is going to return another function
113

113

00:06:34,227  -->  00:06:38,348
and what this function does is to increase the score
114

114

00:06:38,348  -->  00:06:41,438
if the answer is correct and then return it.
115

115

00:06:41,438  -->  00:06:43,631
So we actually need a parameter here
116

116

00:06:43,631  -->  00:06:46,282
which says if it's correct.
117

117

00:06:46,282  -->  00:06:49,877
So it's going to be a true or false value.
118

118

00:06:49,877  -->  00:06:54,044
And then if the answer was correct, then update the score.
119

119

00:06:56,396  -->  00:06:58,623
And we know there's a nice operator for that
120

120

00:06:58,623  -->  00:07:01,300
and it's this one, so it's the same one we always use
121

121

00:07:01,300  -->  00:07:02,383
in for loops.
122

122

00:07:03,308  -->  00:07:06,085
So this simply adds one to the score.
123

123

00:07:06,085  -->  00:07:10,404
And then either way, if it's either correct or true,
124

124

00:07:10,404  -->  00:07:13,571
it's going to always return the score.
125

125

00:07:16,845  -->  00:07:19,749
And so this way, everything that I need about the scores
126

126

00:07:19,749  -->  00:07:23,790
is here in this function that this closure returns.
127

127

00:07:23,790  -->  00:07:27,304
Now all I have to do is to call this function
128

128

00:07:27,304  -->  00:07:31,302
and store it because it returns another function
129

129

00:07:31,302  -->  00:07:33,888
and so I want to keep that function in this variable.
130

130

00:07:33,888  -->  00:07:37,638
And I'm going to call it keepScore, so score,
131

131

00:07:40,297  -->  00:07:42,420
and call it, and that's it.
132

132

00:07:42,420  -->  00:07:44,156
So what's going to happen?
133

133

00:07:44,156  -->  00:07:46,288
Remember what closures are.
134

134

00:07:46,288  -->  00:07:49,975
So we call the score function, it defines as variable,
135

135

00:07:49,975  -->  00:07:52,610
and then we return this function here
136

136

00:07:52,610  -->  00:07:55,280
and it's going to be attached to this variable.
137

137

00:07:55,280  -->  00:07:57,271
Now thanks to closures,
138

138

00:07:57,271  -->  00:08:00,002
we always keep access to the variables
139

139

00:08:00,002  -->  00:08:01,961
that the other function defines.
140

140

00:08:01,961  -->  00:08:05,467
So this means that this score variable here
141

141

00:08:05,467  -->  00:08:09,810
will always be accessible by this keep score function here.
142

142

00:08:09,810  -->  00:08:13,245
So this is exactly what we did in the other exercises
143

143

00:08:13,245  -->  00:08:15,970
in the closure lecture.
144

144

00:08:15,970  -->  00:08:18,874
So the exact same thing, but now it's applied
145

145

00:08:18,874  -->  00:08:21,957
to this problem, to this application.
146

146

00:08:23,052  -->  00:08:24,624
At this particular point,
147

147

00:08:24,624  -->  00:08:26,841
maybe this doesn't make so much sense to you
148

148

00:08:26,841  -->  00:08:31,301
so why I used it this way, so let's now see it in action
149

149

00:08:31,301  -->  00:08:33,468
and it's going to work like this.
150

150

00:08:33,468  -->  00:08:37,346
So we check our answer here, so here actually,
151

151

00:08:37,346  -->  00:08:39,097
so we check our answer
152

152

00:08:39,097  -->  00:08:41,572
and in here we can then call this function
153

153

00:08:41,572  -->  00:08:44,418
that I just defined to update the score
154

154

00:08:44,418  -->  00:08:46,501
if the answer is correct.
155

155

00:08:48,002  -->  00:08:50,375
In order to be able to do that,
156

156

00:08:50,375  -->  00:08:52,241
we need to actually pass this function
157

157

00:08:52,241  -->  00:08:54,074
into this method here.
158

158

00:08:54,997  -->  00:08:57,267
So we're going to make use of the concept
159

159

00:08:57,267  -->  00:08:59,600
that we can pass functions around,
160

160

00:08:59,600  -->  00:09:02,762
because they're first class objects in JavaScript,
161

161

00:09:02,762  -->  00:09:04,947
so first class functions.
162

162

00:09:04,947  -->  00:09:08,740
So the checkAnswer, the method is going to be called here,
163

163

00:09:08,740  -->  00:09:13,157
so checkAnswer, so we're not only going to be passing
164

164

00:09:13,157  -->  00:09:17,324
the answer in here, but also the keepScore variable.
165

165

00:09:18,640  -->  00:09:20,916
So keepScore, which is the variable
166

166

00:09:20,916  -->  00:09:22,762
that contains the function
167

167

00:09:22,762  -->  00:09:26,929
and the closure which keeps track of the score, remember.
168

168

00:09:28,654  -->  00:09:33,176
And so now in here we also need to set the parameter
169

169

00:09:33,176  -->  00:09:35,918
so answer and call back.
170

170

00:09:35,918  -->  00:09:37,918
Let's call it like this.
171

171

00:09:39,229  -->  00:09:43,095
Okay, and now in here we can simply call our function
172

172

00:09:43,095  -->  00:09:45,440
so it's going to be called back here.
173

173

00:09:45,440  -->  00:09:48,215
But remember, that is just a keepScore function
174

174

00:09:48,215  -->  00:09:50,215
and now we pass in true.
175

175

00:09:52,091  -->  00:09:54,857
Because we know that here, when the answer is equal
176

176

00:09:54,857  -->  00:09:57,814
to the correct answer, the answer will be correct.
177

177

00:09:57,814  -->  00:10:00,827
And remember that this function here
178

178

00:10:00,827  -->  00:10:04,662
which is effectively stored in the keepScore variable here
179

179

00:10:04,662  -->  00:10:06,824
accepts a correct parameter.
180

180

00:10:06,824  -->  00:10:08,911
So if it's correct, it's going to update the score
181

181

00:10:08,911  -->  00:10:12,530
and return it, and if it's not correct, if it's incorrect,
182

182

00:10:12,530  -->  00:10:14,921
it's going to only return the score
183

183

00:10:14,921  -->  00:10:16,888
and not make any updates.
184

184

00:10:16,888  -->  00:10:21,031
So in here we always have to pass true or false.
185

185

00:10:21,031  -->  00:10:22,912
And since this returned something,
186

186

00:10:22,912  -->  00:10:26,207
we need to store the score somewhere.
187

187

00:10:26,207  -->  00:10:30,207
So let's say sc again, which is short for score,
188

188

00:10:31,530  -->  00:10:33,863
and then declare it up here.
189

189

00:10:34,922  -->  00:10:38,018
So var score, and that's because I'm going to call
190

190

00:10:38,018  -->  00:10:40,185
the function here as well.
191

191

00:10:41,365  -->  00:10:45,032
So score call back and this time with false.
192

192

00:10:47,190  -->  00:10:50,592
And therefor the score is not going to be updated.
193

193

00:10:50,592  -->  00:10:54,185
All this does is to return the current score.
194

194

00:10:54,185  -->  00:10:56,778
And that's because we want to display the score
195

195

00:10:56,778  -->  00:10:59,736
in the console either if the answer was correct
196

196

00:10:59,736  -->  00:11:01,609
or if it was false.
197

197

00:11:01,609  -->  00:11:04,301
So we always need to retrieve the score value
198

198

00:11:04,301  -->  00:11:07,034
from the function, which again has access to it
199

199

00:11:07,034  -->  00:11:09,713
because of the closure.
200

200

00:11:09,713  -->  00:11:12,748
Let's now write a method for that.
201

201

00:11:12,748  -->  00:11:14,592
So a method which is going to display
202

202

00:11:14,592  -->  00:11:16,675
the score in the console.
203

203

00:11:18,033  -->  00:11:20,950
So question.prototype.displayScore.
204

204

00:11:29,911  -->  00:11:32,399
Okay, and actually we need a parameter here
205

205

00:11:32,399  -->  00:11:34,456
which is the score.
206

206

00:11:34,456  -->  00:11:38,623
So all we do in here is to simply console.log the score
207

207

00:11:41,597  -->  00:11:45,430
so "your current score is" and then the score.
208

208

00:11:50,880  -->  00:11:54,601
And then simply like a separator line,
209

209

00:11:54,601  -->  00:11:58,771
so that we have our questions nicely separated.
210

210

00:11:58,771  -->  00:12:00,688
So something like this.
211

211

00:12:02,678  -->  00:12:06,524
And now all we have to do is to call it here.
212

212

00:12:06,524  -->  00:12:10,691
So this.displayQuestion and then pass the score into it.
213

213

00:12:14,651  -->  00:12:17,987
And once again, we have access to this method here
214

214

00:12:17,987  -->  00:12:19,698
because of the prototype chain.
215

215

00:12:19,698  -->  00:12:23,171
Because this variable here will point to the object
216

216

00:12:23,171  -->  00:12:26,088
on which this method here was called.
217

217

00:12:26,088  -->  00:12:28,174
So let's check answer method was called
218

218

00:12:28,174  -->  00:12:29,910
and then of course it has access
219

219

00:12:29,910  -->  00:12:32,898
to the displayScore method as well and so it's called
220

220

00:12:32,898  -->  00:12:37,784
and then prints our current score to the console.
221

221

00:12:37,784  -->  00:12:39,840
So does all of that make sense to you?
222

222

00:12:39,840  -->  00:12:42,496
Let's now check it out if it works.
223

223

00:12:42,496  -->  00:12:45,842
So we know all of the answers by now, right?
224

224

00:12:45,842  -->  00:12:49,036
Well something's not really working here
225

225

00:12:49,036  -->  00:12:52,410
because it printed two questions here now.
226

226

00:12:52,410  -->  00:12:55,641
So let's now check out what's going on here.
227

227

00:12:55,641  -->  00:12:58,784
So I'm going to exit the game
228

228

00:12:58,784  -->  00:13:02,617
so that we can check out what's going on here.
229

229

00:13:04,287  -->  00:13:07,370
Everything looks good here, actually.
230

230

00:13:09,020  -->  00:13:13,187
Well, what I see here, oh, so here we return a score
231

231

00:13:14,038  -->  00:13:17,774
and not sc, so we were currently returning
232

232

00:13:17,774  -->  00:13:21,783
this function here instead of returning sc.
233

233

00:13:21,783  -->  00:13:23,645
So this was something really wrong,
234

234

00:13:23,645  -->  00:13:25,466
so maybe that was the reason
235

235

00:13:25,466  -->  00:13:27,436
why this wasn't breaking properly.
236

236

00:13:27,436  -->  00:13:30,449
So let's check it out again.
237

237

00:13:30,449  -->  00:13:31,866
So coding is fun.
238

238

00:13:32,990  -->  00:13:36,595
So you see that this is still not working fine
239

239

00:13:36,595  -->  00:13:39,729
because we have still two questions here
240

240

00:13:39,729  -->  00:13:43,661
so this kind of means that the displayQuestion here
241

241

00:13:43,661  -->  00:13:44,994
is called twice.
242

242

00:13:46,113  -->  00:13:50,280
So this is really wrong, let's check it out again.
243

243

00:13:58,001  -->  00:14:01,494
I see that here is probably the problem.
244

244

00:14:01,494  -->  00:14:03,389
So here we have displayQuestion,
245

245

00:14:03,389  -->  00:14:05,121
which is this method up here
246

246

00:14:05,121  -->  00:14:07,263
which displays a random question
247

247

00:14:07,263  -->  00:14:11,430
but instead of course it should be displaying the score.
248

248

00:14:13,647  -->  00:14:15,440
So in here, we of course don't want to display
249

249

00:14:15,440  -->  00:14:18,103
the question again, but the score.
250

250

00:14:18,103  -->  00:14:20,446
And it's completely normal that these kind of bugs
251

251

00:14:20,446  -->  00:14:23,382
happen in programming, so this is just a matter
252

252

00:14:23,382  -->  00:14:26,282
of a small distraction and then you can cause
253

253

00:14:26,282  -->  00:14:28,420
these kind of bugs.
254

254

00:14:28,420  -->  00:14:30,721
And then all you have to do is think about
255

255

00:14:30,721  -->  00:14:34,578
why is this happening and try to hunt these bugs down.
256

256

00:14:34,578  -->  00:14:37,495
Basically to find where you did a mistake.
257

257

00:14:37,495  -->  00:14:41,352
And I'm pretty sure that this one here was the mistake.
258

258

00:14:41,352  -->  00:14:43,701
Also because the score was never appearing
259

259

00:14:43,701  -->  00:14:45,816
and also this line here was never appearing.
260

260

00:14:45,816  -->  00:14:48,200
So this means that we were not really
261

261

00:14:48,200  -->  00:14:49,955
calling this method anywhere.
262

262

00:14:49,955  -->  00:14:53,564
And so this is here the place where the bug has to be.
263

263

00:14:53,564  -->  00:14:56,446
And now I'm pretty confident that it's going to work.
264

264

00:14:56,446  -->  00:15:00,613
So fun, and now the current score is one, so great.
265

265

00:15:01,796  -->  00:15:05,896
Then the same question, and it was updated to two
266

266

00:15:05,896  -->  00:15:09,037
so it's working, so the closure and this mechanism
267

267

00:15:09,037  -->  00:15:11,102
that we coded is working.
268

268

00:15:11,102  -->  00:15:15,269
So one now, so a wrong one, and the score stays at two.
269

269

00:15:18,826  -->  00:15:23,807
Now it's three, now let's put a wrong answer again
270

270

00:15:23,807  -->  00:15:26,189
and yeah, the score stays at three
271

271

00:15:26,189  -->  00:15:28,451
and so everything is working properly.
272

272

00:15:28,451  -->  00:15:30,750
Exit and that's it.
273

273

00:15:30,750  -->  00:15:33,685
So take a look at this code again
274

274

00:15:33,685  -->  00:15:37,895
and try to really understand why this score function here
275

275

00:15:37,895  -->  00:15:39,910
works the way it does.
276

276

00:15:39,910  -->  00:15:43,405
We learned everything about this throughout the section,
277

277

00:15:43,405  -->  00:15:45,185
but it can be a little difficult
278

278

00:15:45,185  -->  00:15:47,036
when you actually see it in practice.
279

279

00:15:47,036  -->  00:15:48,811
So make sure that you really understand
280

280

00:15:48,811  -->  00:15:51,235
how and why all of this works.
281

281

00:15:51,235  -->  00:15:54,433
Alright, I would say challenge completed.
282

282

00:15:54,433  -->  00:15:57,016
So see you in the next lecture.
