1
1

00:00:01,240  -->  00:00:02,968
<v Instructor>Let's now finally write some code</v>
2

2

00:00:02,968  -->  00:00:05,059
to use the concepts that we talked about
3

3

00:00:05,059  -->  00:00:06,726
in the last lecture.
4

4

00:00:08,398  -->  00:00:11,174
And I will start by opening up the starter project
5

5

00:00:11,174  -->  00:00:14,869
that you can download for this section.
6

6

00:00:14,869  -->  00:00:18,352
And once again it's on our desktop already.
7

7

00:00:18,352  -->  00:00:21,015
So I just need to open it.
8

8

00:00:21,015  -->  00:00:23,103
And here we have the XML file
9

9

00:00:23,103  -->  00:00:25,917
which connects with our script.
10

10

00:00:25,917  -->  00:00:28,539
And here is just the empty file.
11

11

00:00:28,539  -->  00:00:30,490
Alright so this lecture will be about
12

12

00:00:30,490  -->  00:00:34,490
creating objects using the function constructor.
13

13

00:00:35,925  -->  00:00:40,092
So I'm just writing it here to structure our code better.
14

14

00:00:41,065  -->  00:00:42,925
So I'm gonna start by writing
15

15

00:00:42,925  -->  00:00:45,758
our well-known john object, right?
16

16

00:00:46,957  -->  00:00:50,457
So john with the name of 'John' of course.
17

17

00:00:53,759  -->  00:00:55,342
And the yearOfBirth
18

18

00:01:00,375  -->  00:01:01,792
and then our job.
19

19

00:01:05,392  -->  00:01:07,624
So this is the way that we have been writing objects
20

20

00:01:07,624  -->  00:01:10,291
using the object literal, right?
21

21

00:01:11,388  -->  00:01:13,264
And now imagine that we wanted to create
22

22

00:01:13,264  -->  00:01:17,856
a lot of objects with different names and ages and jobs.
23

23

00:01:17,856  -->  00:01:19,850
So as we learned in the last lecture,
24

24

00:01:19,850  -->  00:01:23,385
we can use some kind of blueprint for this, right?
25

25

00:01:23,385  -->  00:01:25,987
So in JavaScript there are a couple of different
26

26

00:01:25,987  -->  00:01:27,904
ways to create objects.
27

27

00:01:28,761  -->  00:01:30,341
But probably the most popular way
28

28

00:01:30,341  -->  00:01:34,484
is using something called a function constructor.
29

29

00:01:34,484  -->  00:01:37,993
And this is a very common JavaScript pattern.
30

30

00:01:37,993  -->  00:01:40,617
And the pattern is something like a standard way
31

31

00:01:40,617  -->  00:01:42,905
that we have to solve a problem
32

32

00:01:42,905  -->  00:01:44,656
always in the same way.
33

33

00:01:44,656  -->  00:01:47,232
So the function constructor is a pattern
34

34

00:01:47,232  -->  00:01:50,100
for like writing a blueprint, such as
35

35

00:01:50,100  -->  00:01:52,673
we have been talking before.
36

36

00:01:52,673  -->  00:01:55,794
So the name function constructor implies
37

37

00:01:55,794  -->  00:01:59,400
that we're going to use a function here, right?
38

38

00:01:59,400  -->  00:02:03,268
And we want this constructor to be called Person.
39

39

00:02:03,268  -->  00:02:06,915
So we create a function called Person.
40

40

00:02:06,915  -->  00:02:09,801
And the usual convention in JavaScript is that
41

41

00:02:09,801  -->  00:02:12,608
we always write function constructors with a
42

42

00:02:12,608  -->  00:02:14,763
capital letter here, right?
43

43

00:02:14,763  -->  00:02:17,581
So Person is with a capital P, okay?
44

44

00:02:17,581  -->  00:02:21,384
And we always do this for function constructors.
45

45

00:02:21,384  -->  00:02:25,122
Alright, so function and the parameters for
46

46

00:02:25,122  -->  00:02:26,834
these function constructors, will be the variables
47

47

00:02:26,834  -->  00:02:29,939
that we want to set in our object.
48

48

00:02:29,939  -->  00:02:32,939
So in this case, it's gonna be name,
49

49

00:02:35,247  -->  00:02:36,247
yearOfBirth,
50

50

00:02:37,338  -->  00:02:38,338
and the job.
51

51

00:02:40,324  -->  00:02:42,965
And now I'm just going to show you how this is done
52

52

00:02:42,965  -->  00:02:45,523
and I will explain to you why this works
53

53

00:02:45,523  -->  00:02:47,275
just in a second, okay?
54

54

00:02:47,275  -->  00:02:49,828
So what we do is to attach these variables
55

55

00:02:49,828  -->  00:02:52,565
so these argument's to the this variable
56

56

00:02:52,565  -->  00:02:55,769
of this function's execution context.
57

57

00:02:55,769  -->  00:02:57,613
So just like this.
58

58

00:02:57,613  -->  00:03:01,350
So this.name and remember that the this variable
59

59

00:03:01,350  -->  00:03:03,708
is simply an object as well.
60

60

00:03:03,708  -->  00:03:05,343
So we can do it like this.
61

61

00:03:05,343  -->  00:03:08,972
So this name will be name which means
62

62

00:03:08,972  -->  00:03:12,723
the one that we get here as an input for the function.
63

63

00:03:12,723  -->  00:03:16,369
So this.name will be equal to name
64

64

00:03:16,369  -->  00:03:19,748
which is the parameter of the function.
65

65

00:03:19,748  -->  00:03:22,155
And then the same thing for the other two.
66

66

00:03:22,155  -->  00:03:23,738
So this.yearOfBirth
67

67

00:03:27,282  -->  00:03:29,699
will be equal to yearOfBirth.
68

68

00:03:30,814  -->  00:03:32,231
And then this.job
69

69

00:03:35,717  -->  00:03:37,558
will be the job
70

70

00:03:37,558  -->  00:03:39,634
that we pass into the function.
71

71

00:03:39,634  -->  00:03:41,530
And that's it.
72

72

00:03:41,530  -->  00:03:43,347
This is the function constructor.
73

73

00:03:43,347  -->  00:03:45,755
And again I will explain to you why this works
74

74

00:03:45,755  -->  00:03:46,755
in a second.
75

75

00:03:48,100  -->  00:03:51,042
Alright now that we have this function constructor in place
76

76

00:03:51,042  -->  00:03:54,625
we can then use it to create a john object.
77

77

00:03:55,816  -->  00:03:57,082
So let's create some space here
78

78

00:03:57,082  -->  00:03:58,499
and then var john
79

79

00:04:01,715  -->  00:04:03,222
equal new,
80

80

00:04:03,222  -->  00:04:05,361
and this is a new operator
81

81

00:04:05,361  -->  00:04:06,278
new Person.
82

82

00:04:08,140  -->  00:04:12,663
And then we pass our arguments into the function.
83

83

00:04:12,663  -->  00:04:16,578
So we already know our arguments are 1990,
84

84

00:04:16,578  -->  00:04:18,661
and then the job teacher.
85

85

00:04:20,158  -->  00:04:22,178
So this is how we create new objects
86

86

00:04:22,178  -->  00:04:24,516
using the constructor function.
87

87

00:04:24,516  -->  00:04:27,604
And this is called instantiation because
88

88

00:04:27,604  -->  00:04:31,748
these objects here are instances of the person object
89

89

00:04:31,748  -->  00:04:35,098
as we learned in the last lecture.
90

90

00:04:35,098  -->  00:04:37,339
Alright, and as promised I am now gonna explain
91

91

00:04:37,339  -->  00:04:40,100
you how all of this works.
92

92

00:04:40,100  -->  00:04:43,055
So first, in order to understand how this works,
93

93

00:04:43,055  -->  00:04:46,564
we need to first understand what the new operator does.
94

94

00:04:46,564  -->  00:04:48,578
So when we use the new operator
95

95

00:04:48,578  -->  00:04:52,147
first a brand new empty object is created.
96

96

00:04:52,147  -->  00:04:55,022
Alright? So an empty object, this is important.
97

97

00:04:55,022  -->  00:04:57,854
Then after that the constructor function
98

98

00:04:57,854  -->  00:05:02,340
which in this case is Person, right, is called
99

99

00:05:02,340  -->  00:05:04,909
with the arguments that we specified.
100

100

00:05:04,909  -->  00:05:07,613
Okay, so first and empty object is created
101

101

00:05:07,613  -->  00:05:09,434
and then function is called.
102

102

00:05:09,434  -->  00:05:11,141
So as we already know, calling a function
103

103

00:05:11,141  -->  00:05:14,136
creates a new execution context
104

104

00:05:14,136  -->  00:05:16,973
that also has a this variable, right?
105

105

00:05:16,973  -->  00:05:19,790
Now we know that in a regular function call
106

106

00:05:19,790  -->  00:05:23,714
the this variable points to the global object, right?
107

107

00:05:23,714  -->  00:05:27,849
But if we now look at our function constructor here
108

108

00:05:27,849  -->  00:05:29,891
then having the this variable
109

109

00:05:29,891  -->  00:05:33,687
pointing at the global object wouldn't be so useful, right?
110

110

00:05:33,687  -->  00:05:36,901
Because like this, that we would simply set
111

111

00:05:36,901  -->  00:05:39,785
all these properties on the global object.
112

112

00:05:39,785  -->  00:05:42,005
And that's of course not what we want.
113

113

00:05:42,005  -->  00:05:45,210
And that's why the new operator takes care of this.
114

114

00:05:45,210  -->  00:05:48,954
And it makes it so that the this variable of the function
115

115

00:05:48,954  -->  00:05:51,945
points to the empty object that was created
116

116

00:05:51,945  -->  00:05:54,360
in the beginning by the new operator.
117

117

00:05:54,360  -->  00:05:55,765
Remember that?
118

118

00:05:55,765  -->  00:05:58,169
So again, what the new operator does
119

119

00:05:58,169  -->  00:06:02,595
is to point the this variable not to the global object
120

120

00:06:02,595  -->  00:06:04,932
but to this new empty object
121

121

00:06:04,932  -->  00:06:06,904
that was created in the beginning
122

122

00:06:06,904  -->  00:06:09,007
when we used this operator.
123

123

00:06:09,007  -->  00:06:11,731
So then after that when we set the name,
124

124

00:06:11,731  -->  00:06:15,192
year and job properties to this, then
125

125

00:06:15,192  -->  00:06:17,691
that's the same as setting them right on our
126

126

00:06:17,691  -->  00:06:19,458
new empty object.
127

127

00:06:19,458  -->  00:06:22,088
Okay, and finally if the constructor function
128

128

00:06:22,088  -->  00:06:24,410
does not return anything,
129

129

00:06:24,410  -->  00:06:27,092
and as you can see here that is clearly the case,
130

130

00:06:27,092  -->  00:06:30,465
then the result is simply the object that was created
131

131

00:06:30,465  -->  00:06:31,822
in the first step.
132

132

00:06:31,822  -->  00:06:34,077
So this new empty object here.
133

133

00:06:34,077  -->  00:06:37,231
And this empty object which was created here
134

134

00:06:37,231  -->  00:06:39,963
now has the properties that we defined.
135

135

00:06:39,963  -->  00:06:43,765
So the name, yearOfBirth, and job in this case.
136

136

00:06:43,765  -->  00:06:46,515
Okay? And then finally all of this is
137

137

00:06:46,515  -->  00:06:49,365
simply assigned to the john variable.
138

138

00:06:49,365  -->  00:06:51,928
And just like this, we created an object
139

139

00:06:51,928  -->  00:06:55,977
called john simply by called a function constructor.
140

140

00:06:55,977  -->  00:06:58,483
So again our new operator here
141

141

00:06:58,483  -->  00:07:00,840
first creates an empty object,
142

142

00:07:00,840  -->  00:07:03,869
then it calls our function with the this variable
143

143

00:07:03,869  -->  00:07:05,644
not pointing to the global object
144

144

00:07:05,644  -->  00:07:08,387
but to the new object that was created here.
145

145

00:07:08,387  -->  00:07:10,270
And then when this code here runs
146

146

00:07:10,270  -->  00:07:12,816
the this variable is no longer the global variable.
147

147

00:07:12,816  -->  00:07:16,107
And so these are all set on the new object
148

148

00:07:16,107  -->  00:07:19,825
which is then in the end assigned to this variable.
149

149

00:07:19,825  -->  00:07:22,117
So I hope that makes sense.
150

150

00:07:22,117  -->  00:07:24,883
So let's now add inheritance to the game.
151

151

00:07:24,883  -->  00:07:27,102
And for that we are gonna bring back
152

152

00:07:27,102  -->  00:07:29,158
our calculate age function.
153

153

00:07:29,158  -->  00:07:31,500
So let's now suppose that we wanted to add
154

154

00:07:31,500  -->  00:07:33,392
a method to our objects.
155

155

00:07:33,392  -->  00:07:35,186
And that sounds easy, right?
156

156

00:07:35,186  -->  00:07:37,645
We could just add it to our function constructor
157

157

00:07:37,645  -->  00:07:40,036
like we would do with a normal object.
158

158

00:07:40,036  -->  00:07:41,536
So just like this.
159

159

00:07:42,661  -->  00:07:44,328
So this.calculateAge
160

160

00:07:48,786  -->  00:07:50,453
is simply a function
161

161

00:07:53,374  -->  00:07:55,571
which logs to the console the age.
162

162

00:07:55,571  -->  00:07:58,659
So 2016, we already know this by now,
163

163

00:07:58,659  -->  00:08:01,159
minus this.yearOfBirth, right?
164

164

00:08:04,888  -->  00:08:06,642
And now we can actually use this
165

165

00:08:06,642  -->  00:08:09,214
and it should, of course, work.
166

166

00:08:09,214  -->  00:08:10,881
So john.calculateAge
167

167

00:08:12,931  -->  00:08:14,931
and let's now open this.
168

168

00:08:17,259  -->  00:08:20,846
And that's not what I wanted, so...
169

169

00:08:20,846  -->  00:08:22,096
So here we are.
170

170

00:08:24,518  -->  00:08:26,101
And in the console.
171

171

00:08:27,013  -->  00:08:28,691
And what's this here?
172

172

00:08:28,691  -->  00:08:30,691
Now it's nothing special
173

173

00:08:31,791  -->  00:08:34,053
so now it's alright.
174

174

00:08:34,053  -->  00:08:37,037
So 26 is our expected outcome here.
175

175

00:08:37,037  -->  00:08:39,118
So everything works just fine.
176

176

00:08:39,118  -->  00:08:41,756
So let's now create a couple of more objects here
177

177

00:08:41,756  -->  00:08:43,585
for more people.
178

178

00:08:43,585  -->  00:08:46,252
So var jane is also a new person
179

179

00:08:48,501  -->  00:08:49,804
and it is going to work
180

180

00:08:49,804  -->  00:08:51,974
the exact same way, right?
181

181

00:08:51,974  -->  00:08:55,891
So now I say 'Jane' was born in 1969 let's say,
182

182

00:08:57,955  -->  00:08:59,705
and she's a designer.
183

183

00:09:01,848  -->  00:09:04,098
And we'll also create mark.
184

184

00:09:06,016  -->  00:09:07,266
So a new person
185

185

00:09:10,741  -->  00:09:12,784
called Mark, obviously.
186

186

00:09:12,784  -->  00:09:15,867
He was born in 1948 and he's retired.
187

187

00:09:20,597  -->  00:09:24,752
So if I now run this then each of the objects
188

188

00:09:24,752  -->  00:09:27,945
that is now created has the calculateAge method
189

189

00:09:27,945  -->  00:09:29,360
attached to them, right?
190

190

00:09:29,360  -->  00:09:32,634
Because it's right here in the constructor function
191

191

00:09:32,634  -->  00:09:34,428
or the function constructor
192

192

00:09:34,428  -->  00:09:37,888
of all of these three objects, right?
193

193

00:09:37,888  -->  00:09:41,040
So again each of these objects now has the method.
194

194

00:09:41,040  -->  00:09:43,507
Now in this case it's just one function
195

195

00:09:43,507  -->  00:09:46,607
with one line of code, so this is no big deal.
196

196

00:09:46,607  -->  00:09:50,673
But now imagine that we had 20 functions in each object
197

197

00:09:50,673  -->  00:09:54,317
and that each of them would like have 100 lines of code.
198

198

00:09:54,317  -->  00:09:56,809
Now that would not be very efficient
199

199

00:09:56,809  -->  00:09:58,465
because then we would have three copies
200

200

00:09:58,465  -->  00:10:01,134
of the exact same thing, right?
201

201

00:10:01,134  -->  00:10:03,595
And that is exactly why we use inheritance
202

202

00:10:03,595  -->  00:10:05,896
in the exact same way that we have learned
203

203

00:10:05,896  -->  00:10:08,128
in the last lecture.
204

204

00:10:08,128  -->  00:10:10,991
So what exactly did we learn in the last lecture?
205

205

00:10:10,991  -->  00:10:14,325
So we've learned that we have to add all the methods
206

206

00:10:14,325  -->  00:10:16,685
and properties that we want to be inherited
207

207

00:10:16,685  -->  00:10:19,749
into the constructor's prototype property.
208

208

00:10:19,749  -->  00:10:22,776
And it sounds difficult, but it's really not.
209

209

00:10:22,776  -->  00:10:24,609
So let's just do this.
210

210

00:10:25,570  -->  00:10:27,694
Just creating some space here.
211

211

00:10:27,694  -->  00:10:30,122
And I will actually do it here.
212

212

00:10:30,122  -->  00:10:34,039
So all we have to do is to say Person.prototype
213

213

00:10:36,401  -->  00:10:39,099
because as I was saying it's simply a property
214

214

00:10:39,099  -->  00:10:42,477
so all we have to do is to use the dot and then prototype
215

215

00:10:42,477  -->  00:10:45,761
and then we can add our function there.
216

216

00:10:45,761  -->  00:10:49,522
So calculateAge and then our function.
217

217

00:10:49,522  -->  00:10:51,520
And I can actually copy it from here
218

218

00:10:51,520  -->  00:10:54,270
because it's the exact same code.
219

219

00:10:55,619  -->  00:10:56,589
Okay?
220

220

00:10:56,589  -->  00:11:00,153
And now I'm going to remove it from here.
221

221

00:11:00,153  -->  00:11:02,447
So right now if I reload this,
222

222

00:11:02,447  -->  00:11:06,095
effectively none of the objects have the calculateAge
223

223

00:11:06,095  -->  00:11:08,642
method really attached to them.
224

224

00:11:08,642  -->  00:11:11,692
But still, they are going to be able to use it.
225

225

00:11:11,692  -->  00:11:13,361
They will have access to it
226

226

00:11:13,361  -->  00:11:15,530
because it's in their prototype, right?
227

227

00:11:15,530  -->  00:11:17,197
So let's prove that.
228

228

00:11:19,388  -->  00:11:22,766
So I'm going to put all of these together
229

229

00:11:22,766  -->  00:11:26,934
and then call these methods on all of them.
230

230

00:11:26,934  -->  00:11:29,312
So calculateAge on jane
231

231

00:11:29,312  -->  00:11:30,812
and also for mark,
232

232

00:11:32,778  -->  00:11:33,861
calculateAge.
233

233

00:11:35,284  -->  00:11:37,450
And if I now reload this,
234

234

00:11:37,450  -->  00:11:39,033
here is the result.
235

235

00:11:40,056  -->  00:11:44,125
So all the three ages for all the three people.
236

236

00:11:44,125  -->  00:11:47,216
So again, the method is not any more
237

237

00:11:47,216  -->  00:11:48,908
in the constructor, right?
238

238

00:11:48,908  -->  00:11:51,993
But we can still use it and that's because
239

239

00:11:51,993  -->  00:11:56,318
it's in the prototype property of our function constructor.
240

240

00:11:56,318  -->  00:11:58,352
So inheritance actually works.
241

241

00:11:58,352  -->  00:12:00,608
And this is inheritance in practice.
242

242

00:12:00,608  -->  00:12:02,994
So this is really great, right?
243

243

00:12:02,994  -->  00:12:04,803
This is so powerful.
244

244

00:12:04,803  -->  00:12:06,954
You just really understood how this works
245

245

00:12:06,954  -->  00:12:08,582
and how it works behind the scenes.
246

246

00:12:08,582  -->  00:12:11,002
So you cannot just use it, you can also
247

247

00:12:11,002  -->  00:12:12,998
understand why this works.
248

248

00:12:12,998  -->  00:12:15,438
And this is really extremely powerful.
249

249

00:12:15,438  -->  00:12:17,839
And it's really great for you.
250

250

00:12:17,839  -->  00:12:20,351
So attaching methods to the constructor function's
251

251

00:12:20,351  -->  00:12:22,566
prototype property is something that is
252

252

00:12:22,566  -->  00:12:24,783
really really common to use.
253

253

00:12:24,783  -->  00:12:28,467
We can of course also add properties instead of methods
254

254

00:12:28,467  -->  00:12:30,403
but that's not really common.
255

255

00:12:30,403  -->  00:12:33,651
But I still want to show it to you, okay?
256

256

00:12:33,651  -->  00:12:36,551
So such as we did with the method here,
257

257

00:12:36,551  -->  00:12:39,642
we can do the same with properties.
258

258

00:12:39,642  -->  00:12:42,225
So once again Person.prototype.
259

259

00:12:43,930  -->  00:12:47,201
And now we can say, for example,
260

260

00:12:47,201  -->  00:12:48,868
a lastname property.
261

261

00:12:50,362  -->  00:12:54,141
And we can say that they should all be called Smith, right?
262

262

00:12:54,141  -->  00:12:58,707
Because as we know, this will be inherited for all of them.
263

263

00:12:58,707  -->  00:13:01,287
And once again I wanna prove that to you.
264

264

00:13:01,287  -->  00:13:04,204
So let's console log this property.
265

265

00:13:06,504  -->  00:13:08,671
So first for john.lastname
266

266

00:13:14,112  -->  00:13:15,872
and then for the other two.
267

267

00:13:15,872  -->  00:13:18,205
So console.log jane.lastname
268

268

00:13:20,540  -->  00:13:22,457
and then mark.lastname.
269

269

00:13:26,733  -->  00:13:28,900
So let's see what happens.
270

270

00:13:30,193  -->  00:13:33,123
Okay, so all of them are called Smith.
271

271

00:13:33,123  -->  00:13:36,706
So once again this property is not directly
272

272

00:13:37,805  -->  00:13:39,534
in the object, right?
273

273

00:13:39,534  -->  00:13:41,253
But we have access to it
274

274

00:13:41,253  -->  00:13:43,084
because it's in the prototype property
275

275

00:13:43,084  -->  00:13:44,915
of the function constructor.
276

276

00:13:44,915  -->  00:13:49,068
So all John, Jane and Mark inherit this property.
277

277

00:13:49,068  -->  00:13:52,919
So once more we proved that inheritance really works.
278

278

00:13:52,919  -->  00:13:54,698
And this is a really big deal.
279

279

00:13:54,698  -->  00:13:58,406
So if you understood this lecture and the last one,
280

280

00:13:58,406  -->  00:14:01,790
then you are well on your way to become a really great
281

281

00:14:01,790  -->  00:14:03,827
JavaScript developer.
282

282

00:14:03,827  -->  00:14:05,592
What I want you to do now is to create
283

283

00:14:05,592  -->  00:14:07,522
your own type of objects to play around
284

284

00:14:07,522  -->  00:14:11,042
with constructors and prototypes a bit.
285

285

00:14:11,042  -->  00:14:14,519
And this way you can consolidate what you just learned here.
286

286

00:14:14,519  -->  00:14:17,429
So I hope that sounds like a great idea for you.
287

287

00:14:17,429  -->  00:14:19,330
And then after that, let's go
288

288

00:14:19,330  -->  00:14:21,830
straight to the next lecture.
