1
1

00:00:01,693  -->  00:00:03,570
<v Narrator>Let's now start to implement modules</v>
2

2

00:00:03,570  -->  00:00:06,836
that we talked about in the last lecture.
3

3

00:00:06,836  -->  00:00:08,430
And for that, we're going to use the
4

4

00:00:08,430  -->  00:00:10,796
extremely popular module pattern,
5

5

00:00:10,796  -->  00:00:14,828
which is one of the most popular patterns in JavaScript.
6

6

00:00:14,828  -->  00:00:17,956
And since we're now back to a big project,
7

7

00:00:17,956  -->  00:00:20,675
you'll have these what you will learn topics
8

8

00:00:20,675  -->  00:00:22,871
in the beginning of each video again
9

9

00:00:22,871  -->  00:00:26,693
where I will list all the new things that you will learn
10

10

00:00:26,693  -->  00:00:30,537
so you can reference these lectures later on.
11

11

00:00:30,537  -->  00:00:32,508
So in this lecture, you're going to learn
12

12

00:00:32,508  -->  00:00:34,937
what the module pattern is in JavaScript
13

13

00:00:34,937  -->  00:00:38,717
and how to implement it and you will learn more about
14

14

00:00:38,717  -->  00:00:41,629
private and public data, exposing methods,
15

15

00:00:41,629  -->  00:00:45,275
encapsulation, and separation of concerns,
16

16

00:00:45,275  -->  00:00:49,442
and how all data is related to the module pattern.
17

17

00:00:50,316  -->  00:00:55,001
So this is going to be a really important lecture.
18

18

00:00:55,001  -->  00:00:57,207
But let's first remember why we're gonna
19

19

00:00:57,207  -->  00:00:59,991
use modules for a project.
20

20

00:00:59,991  -->  00:01:02,318
And do you remember why?
21

21

00:01:02,318  -->  00:01:05,124
The answer is that we create modules because
22

22

00:01:05,124  -->  00:01:07,357
we want to keep pieces of code that are
23

23

00:01:07,357  -->  00:01:09,564
related to one another together
24

24

00:01:09,564  -->  00:01:13,731
inside of separate, independent, and organized units.
25

25

00:01:14,684  -->  00:01:17,657
And in each of these modules, we'll have variables
26

26

00:01:17,657  -->  00:01:21,041
and functions that are private, which means that
27

27

00:01:21,041  -->  00:01:24,787
they are only accessible inside of the module.
28

28

00:01:24,787  -->  00:01:28,954
We want it so that no other code can override our data.
29

29

00:01:29,897  -->  00:01:32,531
So our data or code is going to be safe
30

30

00:01:32,531  -->  00:01:35,504
and this is really important.
31

31

00:01:35,504  -->  00:01:37,907
And beside private variables and methods, we're
32

32

00:01:37,907  -->  00:01:41,216
also gonna have public methods, which means that
33

33

00:01:41,216  -->  00:01:45,317
we expose them to the public so that other functions
34

34

00:01:45,317  -->  00:01:48,234
or modules can access and use them.
35

35

00:01:49,120  -->  00:01:51,981
And this is called data encapsulation.
36

36

00:01:51,981  -->  00:01:54,582
So data encapsulation allows us to hide the
37

37

00:01:54,582  -->  00:01:57,668
implementation details of a specific module
38

38

00:01:57,668  -->  00:02:01,636
from the outside scope so that we only expose
39

39

00:02:01,636  -->  00:02:05,803
a public interface which is sometimes called an API.
40

40

00:02:06,649  -->  00:02:09,844
It is extremely important to have all of this in mind
41

41

00:02:09,844  -->  00:02:13,489
when building complex applications.
42

42

00:02:13,489  -->  00:02:17,261
So how do we actually create modules in JavaScript?
43

43

00:02:17,261  -->  00:02:20,051
We use the module pattern, which is incredibly
44

44

00:02:20,051  -->  00:02:22,934
powerful but at the same time incredibly
45

45

00:02:22,934  -->  00:02:24,601
simple to implement.
46

46

00:02:25,485  -->  00:02:29,755
All we need to know are the concepts of closures and IIFEs.
47

47

00:02:29,755  -->  00:02:31,480
But we already know that, right?
48

48

00:02:31,480  -->  00:02:35,778
So let's start with the module that handles our budget data.
49

49

00:02:35,778  -->  00:02:38,211
And I'm going to call it budgetController.
50

50

00:02:38,211  -->  00:02:39,961
So, budgetController.
51

51

00:02:44,578  -->  00:02:48,269
And here is how we write the module with the module pattern.
52

52

00:02:48,269  -->  00:02:51,193
This variable is going to be an immediately-invoked
53

53

00:02:51,193  -->  00:02:54,927
function expression that will return an object.
54

54

00:02:54,927  -->  00:02:56,978
So let's write that out.
55

55

00:02:56,978  -->  00:02:59,715
So remember, an immediately-invoked function expression,
56

56

00:02:59,715  -->  00:03:02,844
or IIFE, is simply an anonymous function
57

57

00:03:02,844  -->  00:03:05,425
wrapped in parenthesis.
58

58

00:03:05,425  -->  00:03:06,925
So just like this.
59

59

00:03:08,421  -->  00:03:09,504
So, function.
60

60

00:03:12,313  -->  00:03:14,442
And this is the function body, right?
61

61

00:03:14,442  -->  00:03:17,387
And then we just invoke the function at the end
62

62

00:03:17,387  -->  00:03:19,989
like this, and that's it.
63

63

00:03:19,989  -->  00:03:22,930
And in here goes our code.
64

64

00:03:22,930  -->  00:03:25,962
So let's simply put a variable here for now.
65

65

00:03:25,962  -->  00:03:27,712
Let's say x is 23.
66

66

00:03:30,794  -->  00:03:32,908
And just some simple function, let's say
67

67

00:03:32,908  -->  00:03:35,515
you want the function to add two numbers.
68

68

00:03:35,515  -->  00:03:38,515
So I'm going to call it add, simply.
69

69

00:03:41,608  -->  00:03:44,608
And our parameter is just a.
70

70

00:03:44,608  -->  00:03:46,941
And we return x + a.
71

71

00:03:50,767  -->  00:03:53,095
So this is just a variable and a function
72

72

00:03:53,095  -->  00:03:56,377
to show you how the module pattern works.
73

73

00:03:56,377  -->  00:03:59,266
So you already know that an IIFE allows us to have
74

74

00:03:59,266  -->  00:04:02,784
data privacy because it creates a new scope
75

75

00:04:02,784  -->  00:04:05,283
that is not visible from the outside scope.
76

76

00:04:05,283  -->  00:04:06,116
Right?
77

77

00:04:07,022  -->  00:04:10,299
So our variable and our function, they are safe in here.
78

78

00:04:10,299  -->  00:04:13,569
They cannot be accessed from the outside.
79

79

00:04:13,569  -->  00:04:15,722
Now, the secret of the module pattern
80

80

00:04:15,722  -->  00:04:20,147
is that it returns an object containing all of the functions
81

81

00:04:20,147  -->  00:04:22,173
that we want to be public.
82

82

00:04:22,173  -->  00:04:24,773
So the functions that we want to give
83

83

00:04:24,773  -->  00:04:27,106
the outside scope access to.
84

84

00:04:28,247  -->  00:04:31,243
So let's now test this out and return an object
85

85

00:04:31,243  -->  00:04:33,326
containing a method here.
86

86

00:04:35,401  -->  00:04:36,901
So, return, right?
87

87

00:04:38,727  -->  00:04:41,005
And then an empty object, and all we need to do now
88

88

00:04:41,005  -->  00:04:42,435
is to add a method.
89

89

00:04:42,435  -->  00:04:45,435
And I'm going to call it publicTest.
90

90

00:04:47,673  -->  00:04:50,136
And it will simply be a function that uses
91

91

00:04:50,136  -->  00:04:52,530
our other function add so that
92

92

00:04:52,530  -->  00:04:55,661
we can use it in the outside scope.
93

93

00:04:55,661  -->  00:04:58,078
So we accept the parameter b.
94

94

00:04:59,899  -->  00:05:02,732
But then we console.log the result
95

95

00:05:04,092  -->  00:05:07,009
of calling the add function with b.
96

96

00:05:08,340  -->  00:05:09,173
Okay?
97

97

00:05:10,669  -->  00:05:13,751
Let's now quickly test this in the console, alright.
98

98

00:05:13,751  -->  00:05:17,039
So this time I left the browser here on the other side
99

99

00:05:17,039  -->  00:05:19,389
in full screen because we're going to need that
100

100

00:05:19,389  -->  00:05:21,466
for this application.
101

101

00:05:21,466  -->  00:05:25,633
So let's open up the console here, give it some space.
102

102

00:05:26,491  -->  00:05:29,105
And let's start by testing that we can in fact
103

103

00:05:29,105  -->  00:05:32,165
not access the x variable.
104

104

00:05:32,165  -->  00:05:35,748
So we first need to reload this, of course.
105

105

00:05:37,238  -->  00:05:40,655
So our budget controller, alright, so .x.
106

106

00:05:41,647  -->  00:05:43,458
And it's undefined of course.
107

107

00:05:43,458  -->  00:05:45,381
Because, as we know, from the outside
108

108

00:05:45,381  -->  00:05:48,973
we do not have access to the inner scope.
109

109

00:05:48,973  -->  00:05:53,849
And also using our add function does also not work.
110

110

00:05:53,849  -->  00:05:57,501
So remember, this is our private add function.
111

111

00:05:57,501  -->  00:06:01,174
So let's now prove that we cannot use it from the outside.
112

112

00:06:01,174  -->  00:06:04,841
So let's say budgetController.add with five.
113

113

00:06:08,858  -->  00:06:10,108
So five plus x.
114

114

00:06:12,214  -->  00:06:15,029
And it doesn't work because it's not a function.
115

115

00:06:15,029  -->  00:06:16,792
So this is what we expected.
116

116

00:06:16,792  -->  00:06:21,462
And if we now go ahead and use our public test method,
117

117

00:06:21,462  -->  00:06:24,129
so publicTest, and now use five,
118

118

00:06:26,045  -->  00:06:28,718
then we have a result of 28.
119

119

00:06:28,718  -->  00:06:30,801
So let's see why that is.
120

120

00:06:32,219  -->  00:06:34,818
So we passed five here into the function
121

121

00:06:34,818  -->  00:06:38,148
and then this five value is passed into the add function
122

122

00:06:38,148  -->  00:06:41,815
and therefore the result will be five plus x
123

123

00:06:43,306  -->  00:06:45,723
which is 23 which is then 28.
124

124

00:06:46,635  -->  00:06:48,866
So using the public test method,
125

125

00:06:48,866  -->  00:06:51,772
which is the one that we exposed to the public,
126

126

00:06:51,772  -->  00:06:54,779
actually works while using the add methods,
127

127

00:06:54,779  -->  00:06:58,946
or the x variable, does not because they are private.
128

128

00:07:00,123  -->  00:07:02,292
Okay, so how does this work actually?
129

129

00:07:02,292  -->  00:07:04,855
Let's analyze what happens here.
130

130

00:07:04,855  -->  00:07:08,775
So when the JavaScript run time hits this line here
131

131

00:07:08,775  -->  00:07:12,395
it gets executed and this anonymous function
132

132

00:07:12,395  -->  00:07:16,392
is declared and immediately called or invoked
133

133

00:07:16,392  -->  00:07:19,071
because of this operator here.
134

134

00:07:19,071  -->  00:07:23,543
Then these variables here and functions are declared,
135

135

00:07:23,543  -->  00:07:27,043
right, and we return an object right here.
136

136

00:07:27,899  -->  00:07:30,349
And this object contains the method
137

137

00:07:30,349  -->  00:07:32,523
that we called publicTest.
138

138

00:07:32,523  -->  00:07:34,605
But it could of course be lots of methods,
139

139

00:07:34,605  -->  00:07:36,550
not just this one.
140

140

00:07:36,550  -->  00:07:39,722
So this object is what gets assigned to the
141

141

00:07:39,722  -->  00:07:43,366
budget variable after this function returns.
142

142

00:07:43,366  -->  00:07:46,469
So again, after all of this runs,
143

143

00:07:46,469  -->  00:07:49,273
the budgetController variable is simply
144

144

00:07:49,273  -->  00:07:53,677
an object containing the method called publicTest, right?
145

145

00:07:53,677  -->  00:07:57,474
Because that's what we returned from this function here.
146

146

00:07:57,474  -->  00:08:02,170
Okay? Now we saw in our example that this publicTest
147

147

00:08:02,170  -->  00:08:06,598
method here then uses this add and this x variable
148

148

00:08:06,598  -->  00:08:10,474
even after this function has already executed.
149

149

00:08:10,474  -->  00:08:14,354
So why does this work and why is it so powerful?
150

150

00:08:14,354  -->  00:08:17,404
And I'm sure that you already can guess why this works.
151

151

00:08:17,404  -->  00:08:22,245
And so this works thanks to the power of closures.
152

152

00:08:22,245  -->  00:08:25,850
So remember, because of closures, any other function
153

153

00:08:25,850  -->  00:08:29,407
has always access to the variables and parameters
154

154

00:08:29,407  -->  00:08:31,957
of its outer function even after
155

155

00:08:31,957  -->  00:08:34,533
the outer function has returned.
156

156

00:08:34,533  -->  00:08:36,720
And that's what happens here.
157

157

00:08:36,720  -->  00:08:40,648
So the IIFE, the immediately-invoked function expression,
158

158

00:08:40,648  -->  00:08:44,865
returns immediately and so it's effectively gone.
159

159

00:08:44,865  -->  00:08:48,473
But the publicTest function that we return here
160

160

00:08:48,473  -->  00:08:51,954
will always have access to the x variable and
161

161

00:08:51,954  -->  00:08:55,652
the add function because a closure was created here.
162

162

00:08:55,652  -->  00:08:59,161
That's why we say that the publicTest method is
163

163

00:08:59,161  -->  00:09:03,104
public because it was returned and now we can use it.
164

164

00:09:03,104  -->  00:09:06,612
But the x and add variables are private because
165

165

00:09:06,612  -->  00:09:09,633
they are in the closure and therefore only
166

166

00:09:09,633  -->  00:09:12,839
the publicTest method can access them.
167

167

00:09:12,839  -->  00:09:16,078
So again, all of this works because of closures
168

168

00:09:16,078  -->  00:09:20,650
to these functions and this x variable are in the closure.
169

169

00:09:20,650  -->  00:09:23,900
Even after this IIFE here has returned.
170

170

00:09:24,890  -->  00:09:27,697
So if you truly understood all the basics that
171

171

00:09:27,697  -->  00:09:30,700
we talked about before, then this pattern is actually
172

172

00:09:30,700  -->  00:09:35,407
quite simple but still very powerful at the same time.
173

173

00:09:35,407  -->  00:09:37,558
And if you're not 100% sure that you
174

174

00:09:37,558  -->  00:09:40,668
fully understand this concept, then you can always
175

175

00:09:40,668  -->  00:09:43,501
review the lecture about closures.
176

176

00:09:44,404  -->  00:09:46,166
Alright, so the first module is created
177

177

00:09:46,166  -->  00:09:50,352
and we now understand how the module pattern works.
178

178

00:09:50,352  -->  00:09:52,809
So let's create another module with just the
179

179

00:09:52,809  -->  00:09:56,795
one that's gonna take care of our user interface.
180

180

00:09:56,795  -->  00:09:59,279
And let's call that one the UIcontroller.
181

181

00:09:59,279  -->  00:10:02,820
So we talked about this module in the last lecture, right?
182

182

00:10:02,820  -->  00:10:04,810
So let's now create it.
183

183

00:10:04,810  -->  00:10:07,310
So, User Interface Controller.
184

184

00:10:09,245  -->  00:10:12,647
So again, we write an IIFE here, right?
185

185

00:10:12,647  -->  00:10:16,835
So an anonymous function wrapped in parenthesis
186

186

00:10:16,835  -->  00:10:20,668
which is then immediately executed or invoked.
187

187

00:10:22,029  -->  00:10:25,196
So here we will write some code later,
188

188

00:10:28,156  -->  00:10:30,531
and now we need our last module.
189

189

00:10:30,531  -->  00:10:32,513
Now the two modules that we created
190

190

00:10:32,513  -->  00:10:36,389
and by now are completely independent modules.
191

191

00:10:36,389  -->  00:10:38,375
So there will not be any interaction
192

192

00:10:38,375  -->  00:10:40,303
between these two ever.
193

193

00:10:40,303  -->  00:10:42,546
Because I want them to be as stand alone,
194

194

00:10:42,546  -->  00:10:45,163
as independent as possible.
195

195

00:10:45,163  -->  00:10:48,025
So for example imagine that if you ever wanted
196

196

00:10:48,025  -->  00:10:50,435
to create a more complex budget app
197

197

00:10:50,435  -->  00:10:53,240
but a completely different User Interface,
198

198

00:10:53,240  -->  00:10:55,481
you can take the budget controller module
199

199

00:10:55,481  -->  00:10:58,155
and then expand it and not think about the
200

200

00:10:58,155  -->  00:11:00,612
User Interface at all.
201

201

00:11:00,612  -->  00:11:04,039
Because the User Interface is separated from the data,
202

202

00:11:04,039  -->  00:11:06,161
they don't communicate at all.
203

203

00:11:06,161  -->  00:11:09,249
And that is called separation of concerns.
204

204

00:11:09,249  -->  00:11:11,921
And separation of concerns basically means
205

205

00:11:11,921  -->  00:11:14,792
that each part of the application should only
206

206

00:11:14,792  -->  00:11:18,746
be interested in doing one thing independently.
207

207

00:11:18,746  -->  00:11:23,015
So again, these two controllers don't know about each other.
208

208

00:11:23,015  -->  00:11:25,327
They are stand alone, they don't even know that
209

209

00:11:25,327  -->  00:11:26,766
the other one exists.
210

210

00:11:26,766  -->  00:11:31,030
Now we need some way to have these two connected, right?
211

211

00:11:31,030  -->  00:11:33,958
For example, we need a way to read data
212

212

00:11:33,958  -->  00:11:36,476
from the User Interface and then add
213

213

00:11:36,476  -->  00:11:41,239
that data as a new expanse in the budgetController.
214

214

00:11:41,239  -->  00:11:43,655
And that's why we create a third module
215

215

00:11:43,655  -->  00:11:46,049
which is the app controller, and we also
216

216

00:11:46,049  -->  00:11:48,169
saw that one in the last lecture.
217

217

00:11:48,169  -->  00:11:50,919
So let's create that one as well.
218

218

00:11:52,279  -->  00:11:54,758
So controller, simply, and now we already know
219

219

00:11:54,758  -->  00:11:56,591
how this works, right?
220

220

00:12:00,824  -->  00:12:04,991
Some space here, invoke the function, and that's it.
221

221

00:12:06,643  -->  00:12:09,767
Now of course, modules can also receive arguments
222

222

00:12:09,767  -->  00:12:14,113
because, remember, they are just function expressions.
223

223

00:12:14,113  -->  00:12:17,243
And so we can pass arguments into them.
224

224

00:12:17,243  -->  00:12:20,211
And that's what we're gonna do with this module.
225

225

00:12:20,211  -->  00:12:23,090
We'll pass the other two modules as arguments
226

226

00:12:23,090  -->  00:12:25,611
to the controller so that this controller knows
227

227

00:12:25,611  -->  00:12:28,409
about the other two and can connect them.
228

228

00:12:28,409  -->  00:12:31,576
So I will specify two parameters here.
229

229

00:12:32,827  -->  00:12:35,122
Budget.Controller, and I'm going to write it
230

230

00:12:35,122  -->  00:12:37,978
in a slightly different way.
231

231

00:12:37,978  -->  00:12:41,205
And I will explain here in a second.
232

232

00:12:41,205  -->  00:12:44,921
And a UICtrl. So these are the parameters.
233

233

00:12:44,921  -->  00:12:48,262
And so now, when we call this function, we can pass
234

234

00:12:48,262  -->  00:12:50,995
our arguments into the function.
235

235

00:12:50,995  -->  00:12:54,117
And we want our created budget.Ctrl.
236

236

00:12:54,117  -->  00:12:58,888
So this one here, we assigned to the budget.Ctrl,
237

237

00:12:58,888  -->  00:13:00,513
which is this one here.
238

238

00:13:00,513  -->  00:13:02,775
So inside of our function here of our
239

239

00:13:02,775  -->  00:13:06,538
controller module it will have a different name.
240

240

00:13:06,538  -->  00:13:09,775
And the same thing with the other controller.
241

241

00:13:09,775  -->  00:13:11,692
So, UIController, okay?
242

242

00:13:12,892  -->  00:13:15,594
So I could of course simply have used the
243

243

00:13:15,594  -->  00:13:19,708
original controllers name inside of the add controller.
244

244

00:13:19,708  -->  00:13:22,486
Or I could have even not passed anything into the
245

245

00:13:22,486  -->  00:13:25,590
module and simply have used the other controls
246

246

00:13:25,590  -->  00:13:28,612
in here in our function because of course we have
247

247

00:13:28,612  -->  00:13:31,979
access to them because they are in the outer scope.
248

248

00:13:31,979  -->  00:13:34,679
Right, so I could simply use the, let's say the
249

249

00:13:34,679  -->  00:13:37,762
budgetController, like this, in here.
250

250

00:13:43,242  -->  00:13:46,786
But that is not a good practice because this would make the
251

251

00:13:46,786  -->  00:13:50,188
controller a little bit less independent.
252

252

00:13:50,188  -->  00:13:53,340
Because imagine that we would change the name of the module
253

253

00:13:53,340  -->  00:13:56,506
then we would have to do this all over our code.
254

254

00:13:56,506  -->  00:13:59,852
We would have to change the name everywhere in here, right?
255

255

00:13:59,852  -->  00:14:01,220
But we don't want that.
256

256

00:14:01,220  -->  00:14:04,054
So this way, we don't have to do it.
257

257

00:14:04,054  -->  00:14:06,214
So in case you want to change the name of
258

258

00:14:06,214  -->  00:14:09,875
the budgetController to something else, we would
259

259

00:14:09,875  -->  00:14:13,394
just have to change it down here.
260

260

00:14:13,394  -->  00:14:15,356
And then set up the module so it will
261

261

00:14:15,356  -->  00:14:18,273
always be called simply budgetCtrl.
262

262

00:14:19,807  -->  00:14:23,084
So this controller now knows about the other two modules
263

263

00:14:23,084  -->  00:14:25,650
and it can use their code.
264

264

00:14:25,650  -->  00:14:28,797
So let's now actually try this out.
265

265

00:14:28,797  -->  00:14:31,839
So we use our budgetCtrl and let's test the
266

266

00:14:31,839  -->  00:14:35,109
publicTest method and pass again
267

267

00:14:35,109  -->  00:14:37,776
the value of five into it, okay?
268

268

00:14:39,563  -->  00:14:42,270
So let's now test this.
269

269

00:14:42,270  -->  00:14:46,437
Then we store it in a variable, let's say z this time,
270

270

00:14:48,196  -->  00:14:50,885
and now as you know we don't have x from the outside
271

271

00:14:50,885  -->  00:14:55,338
to this variable so we have to create another method
272

272

00:14:55,338  -->  00:14:59,791
simply to print this variable to the console.
273

273

00:14:59,791  -->  00:15:02,123
So we need to return an object once again
274

274

00:15:02,123  -->  00:15:04,974
and I'm going to create another public method.
275

275

00:15:04,974  -->  00:15:08,728
So I'm just going to call it anotherPublic.
276

276

00:15:08,728  -->  00:15:11,566
So these names don't really matter because all of this is
277

277

00:15:11,566  -->  00:15:13,672
just to show you how these modules work,
278

278

00:15:13,672  -->  00:15:16,706
and how they interact with one another.
279

279

00:15:16,706  -->  00:15:20,123
So this is not gonna receive any argument
280

280

00:15:21,526  -->  00:15:25,693
and now all we do is to console.log the z variable, okay?
281

281

00:15:27,318  -->  00:15:30,358
Because again, doing it like this is the only way
282

282

00:15:30,358  -->  00:15:34,399
that from the outside we can have access to z.
283

283

00:15:34,399  -->  00:15:36,316
So let's now test this.
284

284

00:15:38,576  -->  00:15:42,743
So, controller, and now we use another public method.
285

285

00:15:45,706  -->  00:15:48,289
We call it and nothing happens.
286

286

00:15:49,508  -->  00:15:52,622
And alright, I actually know why this happened.
287

287

00:15:52,622  -->  00:15:55,194
Okay, and it's because in here we don't return
288

288

00:15:55,194  -->  00:15:57,524
this value but we console log it.
289

289

00:15:57,524  -->  00:15:59,691
And that's also the reason why this 28
290

290

00:15:59,691  -->  00:16:02,431
appeared here in a console
291

291

00:16:02,431  -->  00:16:06,513
and because, again, we did console.log right here
292

292

00:16:06,513  -->  00:16:08,121
instead of returning it.
293

293

00:16:08,121  -->  00:16:10,189
Okay so you will actually want to return
294

294

00:16:10,189  -->  00:16:12,603
this result of the add function so that it
295

295

00:16:12,603  -->  00:16:15,270
can get saved in the z variable.
296

296

00:16:16,283  -->  00:16:19,138
So let's now test this again.
297

297

00:16:19,138  -->  00:16:21,706
Alright, so this time we have nothing in the console
298

298

00:16:21,706  -->  00:16:25,039
so far and now controller.anotherPublic.
299

299

00:16:30,229  -->  00:16:32,809
And here we go. So, 28.
300

300

00:16:32,809  -->  00:16:35,599
So we have already done a lot of stuff here.
301

301

00:16:35,599  -->  00:16:38,258
We wrote different modules
302

302

00:16:38,258  -->  00:16:42,946
both with private and public methods and variables.
303

303

00:16:42,946  -->  00:16:46,152
And we also made them interact with one another.
304

304

00:16:46,152  -->  00:16:48,670
So really cool stuff and really really important
305

305

00:16:48,670  -->  00:16:52,003
concept that we learned in this lecture.
306

306

00:16:52,838  -->  00:16:55,428
So what we just created is the bare bones
307

307

00:16:55,428  -->  00:16:59,595
structure, or let's say architecture, over application.
308

308

00:17:00,686  -->  00:17:03,202
And it's a simple one actually but it's perfectly
309

309

00:17:03,202  -->  00:17:07,667
enough for this relatively small application.
310

310

00:17:07,667  -->  00:17:10,025
And I hope that you see how important it is to follow
311

311

00:17:10,025  -->  00:17:12,824
good architecture and I'm sure that you will see it
312

312

00:17:12,824  -->  00:17:16,448
even more as you progress with the course.
313

313

00:17:16,448  -->  00:17:18,858
A lot of courses will only teach you the coding part
314

314

00:17:18,858  -->  00:17:21,017
but not the structuring and architecture
315

315

00:17:21,017  -->  00:17:25,100
that are so fundamental for this kind of project.
316

316

00:17:26,267  -->  00:17:28,720
Alright, so let's now start filling our newly created
317

317

00:17:28,720  -->  00:17:32,887
modules with some actual code right in the next lecture.
