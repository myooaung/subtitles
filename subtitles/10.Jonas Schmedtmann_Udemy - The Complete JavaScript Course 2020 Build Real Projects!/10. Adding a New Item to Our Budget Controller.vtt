WEBVTT
ve the ID like this, okay.
213
1

00:10:24.795  -->  00:10:27.363
So this is basically the last ID.
214

2

00:10:27.363  -->  00:10:30.397
So, if the arr array would be this one,
215

3

00:10:30.397  -->  00:10:33.139
then our last ID would now be eight.
216

4

00:10:33.139  -->  00:10:35.603
And, remember, the ID that we want is nine,
217

5

00:10:35.603  -->  00:10:37.353
so, last ID plus one.
218

6

00:10:38.519  -->  00:10:41.186
So this is the last ID plus one.
219

7

00:10:42.632  -->  00:10:46.621
And here we have the ID for a new item.
220

8

00:10:46.621  -->  00:10:49.204
So this is actually already it.
221

9

00:10:50.342  -->  00:10:52.292
So let's just comment this.
222

10

00:10:52.292  -->  00:10:53.792
So, create new ID,
223

11

00:10:56.879  -->  00:10:59.046
then recreate the new item
224

12

00:11:01.180  -->  00:11:02.180
based on inc
225

13

00:11:04.766  -->  00:11:05.599
or exp
226

14

00:11:06.869  -->  00:11:07.702
type,
227

15

00:11:09.963  -->  00:11:13.046
then push it into our data structure,
228

16

00:11:14.613  -->  00:11:17.613
and finally, return the new element.
229

17

00:11:21.463  -->  00:11:23.924
And I actually highly encourage you
230

18

00:11:23.924  -->  00:11:26.862
to do these kind of comments whenever you can,
231

19

00:11:26.862  -->  00:11:29.169
so that later your code becomes
232

20

00:11:29.169  -->  00:11:30.902
more easily for you to understand
233

21

00:11:30.902  -->  00:11:33.639
when you didn't look at it for some time.
234

22

00:11:33.639  -->  00:11:37.305
All right, so now this method is ready to be used.
235

23

00:11:37.305  -->  00:11:40.054
So, let's do that, in newController, of course.
236

24

00:11:40.054  -->  00:11:42.509
Where else could it be, right?
237

25

00:11:42.509  -->  00:11:44.907
And we're going to do that right here,
238

26

00:11:44.907  -->  00:11:47.276
in the ctrlAdd function
239

27

00:11:47.276  -->  00:11:49.417
So, we already have our input.
240

28

00:11:49.417  -->  00:11:53.193
So we can now use that input to add the new item.
241

29

00:11:53.193  -->  00:11:56.197
And for that, we call the addItem method
242

30

00:11:56.197  -->  00:11:58.280
on the budget controller.
243

31

00:11:59.419  -->  00:12:02.002
So, budget controller, addItem.
244

32

00:12:03.547  -->  00:12:07.291
And now, let's remember the data structure that we returned
245

33

00:12:07.291  -->  00:12:09.195
from the getInput method here.
246

34

00:12:09.195  -->  00:12:13.128
So it was type, description, and value.
247

35

00:12:13.128  -->  00:12:16.545
So an object with these three properties.
248

36

00:12:17.838  -->  00:12:21.739
So this input variable here right now has that object,
249

37

00:12:21.739  -->  00:12:22.822
so we now say
250

38

00:12:23.788  -->  00:12:24.705
input.type,
251

39

00:12:28.601  -->  00:12:30.518
then input.description,
252

40

00:12:34.084  -->  00:12:35.417
and input.value.
253

41

00:12:37.561  -->  00:12:39.186
Make sense?
254

42

00:12:39.186  -->  00:12:42.866
So our addItem method accepts three parameters,
255

43

00:12:42.866  -->  00:12:45.302
so, three arguments, which are the type,
256

44

00:12:45.302  -->  00:12:47.925
description, and value, and so, in here,
257

45

00:12:47.925  -->  00:12:52.091
we pass the three, which come right from our input
258

46

00:12:52.091  -->  00:12:56.474
that we get from our user interface here with this method.
259

47

00:12:56.474  -->  00:12:59.493
And now, remember that this addItem method
260

48

00:12:59.493  -->  00:13:03.281
returns an object, so we have to save it here,
261

49

00:13:03.281  -->  00:13:05.855
so let's call it newItem here as well.
262

50

00:13:05.855  -->  00:13:06.688
So, var
263

51

00:13:08.121  -->  00:13:08.954
newItem,
264

52

00:13:11.614  -->  00:13:13.623
and let's actually also declare
265

53

00:13:13.623  -->  00:13:15.773
all the variables here at the top.
266

54

00:13:15.773  -->  00:13:18.023
So, var input, and newItem.
267

55

00:13:21.082  -->  00:13:21.915
All right.
268

56

00:13:25.672  -->  00:13:28.152
So this would now be working just fine.
269

57

00:13:28.152  -->  00:13:31.052
And remember that this will not be yet displayed
270

58

00:13:31.052  -->  00:13:33.127
on the user interface, of course,
271

59

00:13:33.127  -->  00:13:36.631
but it should appear in our data structure.
272

60

00:13:36.631  -->  00:13:40.099
Now, the data structure is a private variable
273

61

00:13:40.099  -->  00:13:41.849
in our module, right?
274

62

00:13:42.846  -->  00:13:45.109
So this data structure here is not visible.
275

63

00:13:45.109  -->  00:13:47.085
So when we add now something,
276

64

00:13:47.085  -->  00:13:49.299
then it will be here in our data structure,
277

65

00:13:49.299  -->  00:13:51.959
but it will not be accessible from the outside.
278

66

00:13:51.959  -->  00:13:55.375
So let's just quickly add a new method here,
279

67

00:13:55.375  -->  00:13:58.765
just so we can see it in the console, okay?
280

68

00:13:58.765  -->  00:14:02.001
So this method is gonna be testing.
281

69

00:14:02.001  -->  00:14:05.268
Again, this is not for us to use in the application,
282

70

00:14:05.268  -->  00:14:09.193
but just to test this in the console, okay?
283

71

00:14:09.193  -->  00:14:10.276
So, function.
284

72

00:14:11.220  -->  00:14:14.137
And all this does is to console.log
285

73

00:14:16.314  -->  00:14:18.750
our data structure, okay?
286

74

00:14:18.750  -->  00:14:21.583
And now, we're ready to test this.
287

75

00:14:24.318  -->  00:14:29.090
All right, so let's add an income, or, sorry, an expense,
288

76

00:14:29.090  -->  00:14:30.090
like new car
289

77

00:14:31.714  -->  00:14:32.631
for $1,500.
290

78

00:14:35.098  -->  00:14:36.640
And hit OK.
291

79

00:14:36.640  -->  00:14:39.913
And, all right, so we have a bug here on line 37,
292

80

00:14:39.913  -->  00:14:42.144
so let's check that one out.
293

81

00:14:42.144  -->  00:14:45.125
So, line 37, again, and it's here,
294

82

00:14:45.125  -->  00:14:47.855
in this line, where we create the new ID.
295

83

00:14:47.855  -->  00:14:49.370
And, let's go back.
296

84

00:14:49.370  -->  00:14:54.013
It says that it cannot read a property ID of undefined.
297

85

00:14:54.013  -->  00:14:56.114
Okay, and that makes all the sense,
298

86

00:14:56.114  -->  00:14:59.482
because right now, we don't have any item
299

87

00:14:59.482  -->  00:15:02.648
here in our data structure here, okay?
300

88

00:15:02.648  -->  00:15:06.474
So, of course, here, this length will be zero,
301

89

00:15:06.474  -->  00:15:08.867
and then zero minus one is minus one,
302

90

00:15:08.867  -->  00:15:12.255
and there's obviously no minus one in this array.
303

91

00:15:12.255  -->  00:15:14.888
And so, this ID cannot exist,
304

92

00:15:14.888  -->  00:15:18.886
because there is no item in the array for that.
305

93

00:15:18.886  -->  00:15:21.532
So what we have to do here is that,
306

94

00:15:21.532  -->  00:15:25.050
when the array is empty, then the new ID should be zero.
307

95

00:15:25.050  -->  00:15:27.279
Okay, so let's do that.
308

96

00:15:27.279  -->  00:15:28.112
So, if
309

97

00:15:31.617  -->  00:15:32.784
data.allItems,
310

98

00:15:34.575  -->  00:15:37.992
and then the array, with our type, again,
311

99

00:15:39.072  -->  00:15:40.822
so the length of this
312

100

00:15:43.039  -->  00:15:45.976
should be greater than zero.
313

101

00:15:45.976  -->  00:15:47.726
And only in this case
314

102

00:15:48.954  -->  00:15:50.871
this will happen, okay?
315

103

00:15:53.040  -->  00:15:53.957
And if not,
316

104

00:15:56.521  -->  00:15:59.271
then the ID should be zero, okay?
317

105

00:16:00.681  -->  00:16:01.812
So this is for the beginning.
318

106

00:16:01.812  -->  00:16:05.979
So right now, the allItems array of both income and expense
319

107

00:16:06.976  -->  00:16:09.098
both have a length of zero,
320

108

00:16:09.098  -->  00:16:11.724
so the ID will always be zero now.
321

109

00:16:11.724  -->  00:16:13.814
But then, as soon as we have some element,
322

110

00:16:13.814  -->  00:16:17.765
then the new ID will be defined based on this.
323

111

00:16:17.765  -->  00:16:20.516
So, let's see if it works now.
324

112

00:16:20.516  -->  00:16:23.599
And, again, an expense for a new car,
325

113

00:16:24.765  -->  00:16:25.598
for 1,500.
326

114

00:16:27.032  -->  00:16:27.865
And,
327

115

00:16:29.005  -->  00:16:30.544
all right.
328

116

00:16:30.544  -->  00:16:33.673
So, nothing happened, because we didn't write a method yet
329

117

00:16:33.673  -->  00:16:36.425
for displaying this in the user interface,
330

118

00:16:36.425  -->  00:16:39.508
but let's now use our testing method.
331

119

00:16:40.698  -->  00:16:41.698
So, testing,
332

120

00:16:43.510  -->  00:16:44.604
and, okay.
333

121

00:16:44.604  -->  00:16:46.821
So this is our data structure.
334

122

00:16:46.821  -->  00:16:50.432
And it has, of course, the allItems object,
335

123

00:16:50.432  -->  00:16:52.252
and the totals object.
336

124

00:16:52.252  -->  00:16:55.932
So, exactly what we put in the data structure
337

125

00:16:55.932  -->  00:16:58.074
in the budget controller.
338

126

00:16:58.074  -->  00:17:00.231
All right, and here's the expense array,
339

127

00:17:00.231  -->  00:17:02.001
and there are actually already two,
340

128

00:17:02.001  -->  00:17:05.444
so I clicked twice on this button here,
341

129

00:17:05.444  -->  00:17:08.373
and here's our expense, the one that we created
342

130

00:17:08.373  -->  00:17:11.504
with the expense function constructor.
343

131

00:17:11.504  -->  00:17:14.921
So, a new car, 1,500, and the ID is zero.
344

132

00:17:16.061  -->  00:17:18.235
And let's see the other expense,
345

133

00:17:18.235  -->  00:17:21.318
is also a new car, 1,500, but the ID is one.
346

134

00:17:21.318  -->  00:17:23.898
Okay, so, this was because I clicked twice
347

135

00:17:23.898  -->  00:17:27.824
here on the button, so we created two expenses.
348

136

00:17:27.824  -->  00:17:31.727
But what this shows us is that this is really working.
349

137

00:17:31.727  -->  00:17:34.727
So let's just add an income as well.
350

138

00:17:36.268  -->  00:17:40.101
So, project, doesn't really matter, for 2,000.
351

139

00:17:42.622  -->  00:17:43.455
Hit enter.
352

140

00:17:45.922  -->  00:17:48.505
And then, let's see uses again.
353

141

00:17:50.667  -->  00:17:52.803
So the totals there are, of course, still zero,
354

142

00:17:52.803  -->  00:17:56.417
because we don't have any code for this yet just.
355

143

00:17:56.417  -->  00:18:00.237
But now, the income also has one element,
356

144

00:18:00.237  -->  00:18:01.778
and it's this income that we just added.
357

145

00:18:01.778  -->  00:18:06.511
So, project, with a value of 2,000, and an ID of zero.
358

146

00:18:06.511  -->  00:18:09.949
And, of course, our two expenses are also still here.
359

147

00:18:09.949  -->  00:18:11.942
So this is really working now.
360

148

00:18:11.942  -->  00:18:15.393
So all we need to do now is to actually add this new element
361

149

00:18:15.393  -->  00:18:16.963
into the user interface.
362

150

00:18:16.963  -->  00:18:20.380
So let's now do that in the next lecture.

151

00:00:01.236  -->  00:00:02.781
<v Jonas>Let's now finally</v>
2

152

00:00:02.781  -->  00:00:06.533
use the user input data to create a new item
3

153

00:00:06.533  -->  00:00:09.866
in our budget controller data structure.
4

154

00:00:10.939  -->  00:00:14.419
And by doing that, we will learn how to avoid conflicts
5

155

00:00:14.419  -->  00:00:17.995
in our data structure, and also how and why
6

156

00:00:17.995  -->  00:00:21.119
to pass data from one module to another.
7

157

00:00:21.119  -->  00:00:22.882
And we actually already did that,
8

158

00:00:22.882  -->  00:00:27.049
but in this lecture, it will make even more sense.
9

159

00:00:28.095  -->  00:00:30.397
So let's now create a public method
10

160

00:00:30.397  -->  00:00:32.591
right here in the budget controller
11

161

00:00:32.591  -->  00:00:35.331
that's gonna allow other modules
12

162

00:00:35.331  -->  00:00:38.831
to add a new item into our data structure.
13

163

00:00:39.828  -->  00:00:43.554
So, we return an object once again,
14

164

00:00:43.554  -->  00:00:46.178
which is gonna contain all of our public methods,
15

165

00:00:46.178  -->  00:00:49.678
which, for now, is only this one, addItem.
16

166

00:00:51.884  -->  00:00:54.634
So a function with some arguments
17

167

00:00:56.679  -->  00:00:59.451
that I'm gonna specify right now,
18

168

00:00:59.451  -->  00:01:02.000
and then our function body.
19

169

00:01:02.000  -->  00:01:04.830
So, if someone calls this method,
20

170

00:01:04.830  -->  00:01:06.907
what do they have to tell us
21

171

00:01:06.907  -->  00:01:10.246
in order that we can create a new item?
22

172

00:01:10.246  -->  00:01:12.505
First, we would have to know the type,
23

173

00:01:12.505  -->  00:01:16.152
so if it's an income or an expense.
24

174

00:01:16.152  -->  00:01:20.645
So, type, and we also need the description, right?
25

175

00:01:20.645  -->  00:01:24.686
And, of course, the value of the income or of the expense.
26

176

00:01:24.686  -->  00:01:26.828
And, I'm using different names here
27

177

00:01:26.828  -->  00:01:28.581
so that we have less confusion.
28

178

00:01:28.581  -->  00:01:30.975
So, in this method, they have their own names.
29

179

00:01:30.975  -->  00:01:32.892
So, type, des, and val.
30

180

00:01:33.730  -->  00:01:37.951
All right, so how would we add, for example, a new expense?
31

181

00:01:37.951  -->  00:01:40.156
We would simply do it like this:
32

182

00:01:40.156  -->  00:01:41.156
new Expense,
33

183

00:01:43.268  -->  00:01:45.125
and then we need an ID.
34

184

00:01:45.125  -->  00:01:47.542
We would pass the designation
35

185

00:01:48.591  -->  00:01:49.856
and the value.
36

186

00:01:49.856  -->  00:01:51.514
Right?
37

187

00:01:51.514  -->  00:01:53.833
And then we would also store this,
38

188

00:01:53.833  -->  00:01:55.405
of course, in a new variable.
39

189

00:01:55.405  -->  00:01:57.988
So let's call that one newItem,
40

190

00:01:59.242  -->  00:02:01.100
and I'm gonna declare it up here
41

191

00:02:01.100  -->  00:02:03.108
in the beginning of the method.
42

192

00:02:03.108  -->  00:02:03.941
So, var
43

193

00:02:04.940  -->  00:02:05.773
newItem.
44

194

00:02:07.509  -->  00:02:08.883
Okay.
45

195

00:02:08.883  -->  00:02:10.129
So, this is in the case
46

196

00:02:10.129  -->  00:02:13.377
that we are talking about an expense.
47

197

00:02:13.377  -->  00:02:17.373
So the input here can be an expense or an income.
48

198

00:02:17.373  -->  00:02:20.090
But what exactly are we going to receive
49

199

00:02:20.090  -->  00:02:22.667
here in this type argument?
50

200

00:02:22.667  -->  00:02:26.834
For that, let's take a look at the controller again, okay.
51

201

00:02:27.718  -->  00:02:29.961
So the input that we're going to receive
52

202

00:02:29.961  -->  00:02:31.305
in your this input variable,
53

203

00:02:31.305  -->  00:02:33.819
which will come from the UI controller,
54

204

00:02:33.819  -->  00:02:37.374
will actually contain this type, right?
55

205

00:02:37.374  -->  00:02:40.796
So let's go check out this method.
56

206

00:02:40.796  -->  00:02:42.329
So,
57

207

00:02:42.329  -->  00:02:43.937
it's here, right?
58

208

00:02:43.937  -->  00:02:46.822
So one of them will be the type.
59

209

00:02:46.822  -->  00:02:48.555
And this is the type that we're later
60

210

00:02:48.555  -->  00:02:51.861
gonna pass into our addItem method.
61

211

00:02:51.861  -->  00:02:54.688
And, remember, we wrote down here
62

212

00:02:54.688  -->  00:02:57.198
that it will be either inc, for income,
63

213

00:02:57.198  -->  00:02:58.865
or exp, for expense.
64

214

00:03:01.085  -->  00:03:03.750
Okay, and since we know that this is the data
65

215

00:03:03.750  -->  00:03:07.067
that will be passed into the addItem method,
66

216

00:03:07.067  -->  00:03:10.817
we know that we can expect either inc or exp,
67

217

00:03:11.903  -->  00:03:16.055
so we can now use this knowledge here in this function.
68

218

00:03:16.055  -->  00:03:17.805
So we can say that if
69

219

00:03:19.752  -->  00:03:20.585
the type
70

220

00:03:22.444  -->  00:03:24.527
is an exp, so an expense,
71

221

00:03:26.125  -->  00:03:28.069
then this is what we're gonna do.
72

222

00:03:28.069  -->  00:03:31.152
So the newItem will be a new expense.
73

223

00:03:34.739  -->  00:03:39.155
So I was missing the equal operator here, right.
74

224

00:03:39.155  -->  00:03:41.155
But, if it's not an exp,
75

225

00:03:42.091  -->  00:03:42.924
so if it's
76

226

00:03:44.789  -->  00:03:45.622
an income,
77

227

00:03:46.629  -->  00:03:47.546
so, an inc,
78

228

00:03:49.928  -->  00:03:51.345
then what we want
79

229

00:03:52.742  -->  00:03:56.075
is of course to create an income object.
80

230

00:03:58.029  -->  00:04:01.956
Okay, so, again, if we receive this string here
81

231

00:04:01.956  -->  00:04:05.892
as a type argument, then we want to create a new expense
82

232

00:04:05.892  -->  00:04:09.391
using the designation and the value that we pass in,
83

233

00:04:09.391  -->  00:04:11.793
or, if the type is an income,
84

234

00:04:11.793  -->  00:04:14.033
then we want to create a new income object
85

235

00:04:14.033  -->  00:04:16.971
based on the income function constructor
86

236

00:04:16.971  -->  00:04:19.245
that we have, remember, up here,
87

237

00:04:19.245  -->  00:04:22.412
also in this budget controller, right?
88

238

00:04:23.408  -->  00:04:26.438
And so this is how we create our new items.
89

239

00:04:26.438  -->  00:04:28.861
Now, there's, of course, one missing piece,
90

240

00:04:28.861  -->  00:04:33.152
which is this ID, but let's leave this one for later.
91

241

00:04:33.152  -->  00:04:34.985
So for now let me just
92

242

00:04:36.873  -->  00:04:38.540
say that ID is zero.
93

243

00:04:41.775  -->  00:04:44.964
And I'm gonna change that later, again.
94

244

00:04:44.964  -->  00:04:47.399
But for now, let's leave it like this.
95

245

00:04:47.399  -->  00:04:49.223
And so after we have the new item,
96

246

00:04:49.223  -->  00:04:52.540
we can then add it to our data structure.
97

247

00:04:52.540  -->  00:04:55.434
So, remember, all of these new items
98

248

00:04:55.434  -->  00:04:57.767
will be stored in this data object,
99

249

00:04:57.767  -->  00:05:02.066
and inside this data object in the allItems object.
100

250

00:05:02.066  -->  00:05:05.450
And in there, we have two arrays, called exp and inc.
101

251

00:05:05.450  -->  00:05:09.870
And now, see that these names are the exact same names
102

252

00:05:09.870  -->  00:05:12.182
that we have here, so, exp and inc,
103

253

00:05:12.182  -->  00:05:15.184
which is what we receive here from the type.
104

254

00:05:15.184  -->  00:05:18.100
So this is very, very useful, because now,
105

255

00:05:18.100  -->  00:05:20.600
we can simply do it like this.
106

256

00:05:22.466  -->  00:05:23.966
So, data.allItems,
107

257

00:05:26.232  -->  00:05:28.806
and now, we don't need any if or else statement
108

258

00:05:28.806  -->  00:05:32.128
to determine in which of the arrays we want to store data.
109

259

00:05:32.128  -->  00:05:35.966
No, we can just do it like this, type.
110

260

00:05:35.966  -->  00:05:37.524
Right?
111

261

00:05:37.524  -->  00:05:39.830
And if we now say push,
112

262

00:05:39.830  -->  00:05:42.430
and I'm sure that you remember this method,
113

263

00:05:42.430  -->  00:05:46.353
we can add our newItem at the end of the array.
114

264

00:05:46.353  -->  00:05:47.943
And that's it.
115

265

00:05:47.943  -->  00:05:49.671
So let's think about this again.
116

266

00:05:49.671  -->  00:05:53.259
So we have the type, that is exp or inc,
117

267

00:05:53.259  -->  00:05:57.072
which comes from here, and these two designations
118

268

00:05:57.072  -->  00:06:01.050
are the exact same that we have here in our data structure.
119

269

00:06:01.050  -->  00:06:05.078
And, therefore, we can use these brackets here
120

270

00:06:05.078  -->  00:06:07.134
to select the array that we want here
121

271

00:06:07.134  -->  00:06:09.351
from our allItems object.
122

272

00:06:09.351  -->  00:06:12.097
So if it's exp, for an expense,
123

273

00:06:12.097  -->  00:06:14.213
then this array here will be selected
124

274

00:06:14.213  -->  00:06:17.296
from the allItems object, and if it's inc,
125

275

00:06:17.296  -->  00:06:20.880
then, of course, this array here will be selected.
126

276

00:06:20.880  -->  00:06:23.513
And then, we can use the push method on it.
127

277

00:06:23.513  -->  00:06:25.431
And the push method, remember,
128

278

00:06:25.431  -->  00:06:29.345
simply adds a new element at the end of the array.
129

279

00:06:29.345  -->  00:06:31.553
Okay, so this is very simple.
130

280

00:06:31.553  -->  00:06:34.580
And now, all we need to do is to return
131

281

00:06:34.580  -->  00:06:36.330
that newItem as well.
132

282

00:06:37.216  -->  00:06:40.655
Because, then, the other module, or the other function,
133

283

00:06:40.655  -->  00:06:44.881
that's going to call this one, can have direct access
134

284

00:06:44.881  -->  00:06:47.143
to the item that we just create.
135

285

00:06:47.143  -->  00:06:50.492
And this will be useful, as you will see in a second.
136

286

00:06:50.492  -->  00:06:53.231
Now, just one thing that we left for the end,
137

287

00:06:53.231  -->  00:06:56.045
remember, and that's this ID part here.
138

288

00:06:56.045  -->  00:06:58.550
And this ID is a little bit tricky.
139

289

00:06:58.550  -->  00:07:01.967
So, remember, the ID is a unique number
140

290

00:07:01.967  -->  00:07:04.328
that we want to assign to each new item
141

291

00:07:04.328  -->  00:07:06.526
that we put either in the expense
142

292

00:07:06.526  -->  00:07:10.609
or in the income arrays for the allItems, right?
143

293

00:07:10.609  -->  00:07:11.880
So, how can we determine,
144

294

00:07:11.880  -->  00:07:15.360
how can we specify this ID for each new item?
145

295

00:07:15.360  -->  00:07:17.679
The first thing that comes in mind
146

296

00:07:17.679  -->  00:07:20.062
would be to simply use the length
147

297

00:07:20.062  -->  00:07:23.873
of the already-existing array, and then add one, right?
148

298

00:07:23.873  -->  00:07:27.333
So imagine that we had an array with five elements.
149

299

00:07:27.333  -->  00:07:31.286
So let's say, one, two, three, four, five.
150

300

00:07:31.286  -->  00:07:34.870
Then it would sound logical to say, okay, the next one
151

301

00:07:34.870  -->  00:07:37.387
should have an ID of six, right?
152

302

00:07:37.387  -->  00:07:38.554
So the next ID
153

303

00:07:39.817  -->  00:07:40.734
equals six.
154

304

00:07:42.141  -->  00:07:45.285
So this is just a comment, just to show it to you.
155

305

00:07:45.285  -->  00:07:47.293
So this would be the simple solution.
156

306

00:07:47.293  -->  00:07:49.688
Now, there is a big problem with this,
157

307

00:07:49.688  -->  00:07:51.357
and that's because, later on,
158

308

00:07:51.357  -->  00:07:54.334
we're going to delete items from this.
159

309

00:07:54.334  -->  00:07:55.872
And so, imagine that instead
160

310

00:07:55.872  -->  00:07:58.341
of this nicely sorted array here,
161

311

00:07:58.341  -->  00:08:00.889
we would have IDs like this.
162

312

00:08:00.889  -->  00:08:03.597
So, for example, one, two,
163

313

00:08:03.597  -->  00:08:04.430
four, six,
164

314

00:08:05.615  -->  00:08:06.697
and eight,
165

315

00:08:06.697  -->  00:08:08.276
something like this.
166

316

00:08:08.276  -->  00:08:10.244
If we would now go ahead and say
167

317

00:08:10.244  -->  00:08:14.377
that the next ID should be six, then the problem would be
168

318

00:08:14.377  -->  00:08:17.366
that we would have two elements with ID of six.
169

319

00:08:17.366  -->  00:08:20.142
So this is not ideal at all, right?
170

320

00:08:20.142  -->  00:08:23.511
Because each ID should only exist once.
171

321

00:08:23.511  -->  00:08:26.567
So, in this case, what should the next ID be?
172

322

00:08:26.567  -->  00:08:28.650
It should be nine, right?
173

323

00:08:29.934  -->  00:08:34.043
So next ID should be nine, because that's the number
174

324

00:08:34.043  -->  00:08:36.572
that comes after the last one.
175

325

00:08:36.572  -->  00:08:39.726
So let's describe what we want, and then code it.
176

326

00:08:39.726  -->  00:08:42.143
So we want the ID to be equal
177

327

00:08:43.553  -->  00:08:44.386
last ID
178

328

00:08:46.196  -->  00:08:47.740
plus one.
179

329

00:08:47.740  -->  00:08:50.399
And how do we determine the last ID?
180

330

00:08:50.399  -->  00:08:52.343
In this case here, the last ID
181

331

00:08:52.343  -->  00:08:55.536
would be the position number four, right?
182

332

00:08:55.536  -->  00:08:58.897
Because, zero, one, two, three, four.
183

333

00:08:58.897  -->  00:09:00.439
And why is it four?
184

334

00:09:00.439  -->  00:09:02.647
It's four because the length is five,
185

335

00:09:02.647  -->  00:09:04.775
and since the array is zero-based,
186

336

00:09:04.775  -->  00:09:07.442
the last one is five minus one.
187

337

00:09:07.442  -->  00:09:10.192
So, based on that, let's do this.
188

338

00:09:13.587  -->  00:09:17.462
So, we want to first select the last element,
189

339

00:09:17.462  -->  00:09:18.962
so, data.allItems,
190

340

00:09:20.583  -->  00:09:24.161
and then of the type that we're currently using, right?
191

341

00:09:24.161  -->  00:09:26.289
And I already explained that down here,
192

342

00:09:26.289  -->  00:09:28.503
why this works this way, right?
193

343

00:09:28.503  -->  00:09:30.544
And now, we want the last one.
194

344

00:09:30.544  -->  00:09:33.841
And the last one is simply the length minus one.
195

345

00:09:33.841  -->  00:09:35.924
So, again, data.allItems,
196

346

00:09:38.215  -->  00:09:39.048
type,
197

347

00:09:40.523  -->  00:09:41.356
length,
198

348

00:09:43.478  -->  00:09:44.311
minus one.
199

349

00:09:45.231  -->  00:09:47.494
Okay, so, this looks a bit strange, right?
200

350

00:09:47.494  -->  00:09:50.359
So imagine that the type would inc.
201

351

00:09:50.359  -->  00:09:53.742
So, in this case, this would be data.allItems[inc].
202

352

00:09:53.742  -->  00:09:55.589
So, this one here.
203

353

00:09:55.589  -->  00:09:57.902
So you want to now select the last item.
204

354

00:09:57.902  -->  00:10:01.003
So we need this here, the brackets with the number in it
205

355

00:10:01.003  -->  00:10:04.114
so that we can select the last element.
206

356

00:10:04.114  -->  00:10:06.678
And the number is, as I explained before,
207

357

00:10:06.678  -->  00:10:09.103
the length of the array minus one.
208

358

00:10:09.103  -->  00:10:11.488
And so, we need to type all of this again,
209

359

00:10:11.488  -->  00:10:15.271
and then retrieve the length, and then, minus one.
210

360

00:10:15.271  -->  00:10:18.106
Okay, so now we have the very last item,
211

361

00:10:18.106  -->  00:10:20.950
but we only want the ID, right?
212

362

00:10:20.950  -->  00:10:23.950
So, retrie
