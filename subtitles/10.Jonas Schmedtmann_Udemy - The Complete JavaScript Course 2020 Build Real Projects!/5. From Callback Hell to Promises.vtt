WEBVTT
1
1

00:00:01.370  -->  00:00:04.210
<v Narrator>In order to escape the so called call back hell</v>
2

2

00:00:04.210  -->  00:00:06.970
that I showed you in the last lecture let's now learn about
3

3

00:00:06.970  -->  00:00:10.950
promises, which is an ES six feature designed specifically
4

4

00:00:10.950  -->  00:00:13.053
to deal with asynchronous JavaScript.
5

5

00:00:13.924  -->  00:00:17.600
Now, before we start, what is a promise actually?
6

6

00:00:17.600  -->  00:00:20.530
Well, it's a complex topic and it's easier to understand
7

7

00:00:20.530  -->  00:00:24.820
in practice, but in simple terms a promise is an object
8

8

00:00:24.820  -->  00:00:27.227
that keeps track about whether a certain event
9

9

00:00:27.227  -->  00:00:30.933
has happened already or not, and if it did happen,
10

10

00:00:30.933  -->  00:00:34.490
then the promise determines what happens next.
11

11

00:00:34.490  -->  00:00:37.550
And with events here I mean an asynchronous event
12

12

00:00:37.550  -->  00:00:40.082
like a timer finishing or data coming back from
13

13

00:00:40.082  -->  00:00:41.975
an ajax call, okay?
14

14

00:00:41.975  -->  00:00:45.600
So, a promise kind of implements the concept
15

15

00:00:45.600  -->  00:00:48.430
of a future value that we're expecting.
16

16

00:00:48.430  -->  00:00:52.010
It's like us saying, hey, get me some data from the server
17

17

00:00:52.010  -->  00:00:55.670
in the background and the promise then promises us
18

18

00:00:55.670  -->  00:00:59.550
to get that data, so we can handle it in the future, okay?
19

19

00:00:59.550  -->  00:01:01.370
Does that make sense?
20

20

00:01:01.370  -->  00:01:04.560
Now, since we're dealing with time sensitive code now
21

21

00:01:04.560  -->  00:01:07.110
a promise can have different states.
22

22

00:01:07.110  -->  00:01:11.220
So, before the event has happened the promise is pending.
23

23

00:01:11.220  -->  00:01:14.830
Then after the event has happened the promise is called
24

24

00:01:14.830  -->  00:01:18.833
settled or resolved which is the same thing, okay?
25

25

00:01:18.833  -->  00:01:22.060
Now, when the promise was actually successful,
26

26

00:01:22.060  -->  00:01:24.900
which means that a result is available,
27

27

00:01:24.900  -->  00:01:28.820
then the promise is fulfilled, but if there was an error
28

28

00:01:28.820  -->  00:01:32.390
then the promise is rejected, simple as that,
29

29

00:01:32.390  -->  00:01:34.920
and this is actually important to know because we will
30

30

00:01:34.920  -->  00:01:38.180
then be able to handle these two different situations
31

31

00:01:38.180  -->  00:01:39.600
in our code.
32

32

00:01:39.600  -->  00:01:41.510
Now in more practical terms we can
33

33

00:01:41.510  -->  00:01:44.270
produce and consume promises.
34

34

00:01:44.270  -->  00:01:47.580
So when we produce a promise we create a new promise
35

35

00:01:47.580  -->  00:01:50.200
and send a result using that promise.
36

36

00:01:50.200  -->  00:01:52.980
Then when we consume it we can use call back functions
37

37

00:01:52.980  -->  00:01:57.360
for fulfillment and for rejection of our promise.
38

38

00:01:57.360  -->  00:02:00.280
So let's now produce promises in order to recreate
39

39

00:02:00.280  -->  00:02:02.650
the example that we built in the last lecture
40

40

00:02:02.650  -->  00:02:05.390
and then consume those promises.
41

41

00:02:05.390  -->  00:02:08.990
And again let's start by cleaning up here our code
42

42

00:02:08.990  -->  00:02:12.750
from the last lecture by simply commenting it out.
43

43

00:02:12.750  -->  00:02:16.100
So, with promises just like every other object type
44

44

00:02:16.100  -->  00:02:17.673
we use the new keyword.
45

45

00:02:20.540  -->  00:02:22.293
So we say new promise.
46

46

00:02:23.960  -->  00:02:26.530
And then into that promise we pass in a function
47

47

00:02:26.530  -->  00:02:29.060
called the executor which is a function that will
48

48

00:02:29.060  -->  00:02:32.230
be immediately called once the promise is created.
49

49

00:02:32.230  -->  00:02:34.620
Okay, so let's just add that here as well
50

50

00:02:34.620  -->  00:02:36.903
without actually for now adding any code.
51

51

00:02:38.010  -->  00:02:43.010
So again an arrow function and so that's our promise,
52

52

00:02:43.040  -->  00:02:45.410
and of course let's also assign this promise here
53

53

00:02:45.410  -->  00:02:46.613
to a variable.
54

54

00:02:50.030  -->  00:02:54.300
So const get IDs, okay, and that's because we're recreating
55

55

00:02:54.300  -->  00:02:56.920
the example that we had up here, okay?
56

56

00:02:56.920  -->  00:02:59.390
And so basically this first promise here will be
57

57

00:02:59.390  -->  00:03:02.350
responsible for doing that first part here,
58

58

00:03:02.350  -->  00:03:03.690
with the first timer.
59

59

00:03:03.690  -->  00:03:07.930
So basically where we get these four IDs here
60

60

00:03:07.930  -->  00:03:12.320
from the server with this fake ajax call here, okay?
61

61

00:03:12.320  -->  00:03:14.240
But now getting back to our promise here
62

62

00:03:14.240  -->  00:03:17.201
and this call back function that we passed into
63

63

00:03:17.201  -->  00:03:20.283
the promise, remember that this one here is called
64

64

00:03:20.283  -->  00:03:23.210
the executor function, and this function here itself
65

65

00:03:23.210  -->  00:03:25.279
actually takes in two arguments which are
66

66

00:03:25.279  -->  00:03:28.193
the call back function's resolve and reject.
67

67

00:03:30.500  -->  00:03:34.490
So resolve and reject, and that's because this executor
68

68

00:03:34.490  -->  00:03:36.812
function here is used to inform the promise
69

69

00:03:36.812  -->  00:03:40.930
whether the event it is handling was successful or not.
70

70

00:03:40.930  -->  00:03:43.360
And if it was successful we're gonna call the resolve
71

71

00:03:43.360  -->  00:03:46.700
function and if not we call the reject function.
72

72

00:03:46.700  -->  00:03:49.060
So remember that we had these two states here,
73

73

00:03:49.060  -->  00:03:51.520
resolve if the promise was successful,
74

74

00:03:51.520  -->  00:03:54.760
and reject if the promise was not successful.
75

75

00:03:54.760  -->  00:03:56.300
So if you don't have any result,
76

76

00:03:56.300  -->  00:03:59.410
and in that case we can call the reject function,
77

77

00:03:59.410  -->  00:04:01.470
and I'm gonna show you how we use these functions
78

78

00:04:01.470  -->  00:04:03.980
here inside our promise in a second.
79

79

00:04:03.980  -->  00:04:06.600
But for now let's put some asynchronous task here
80

80

00:04:06.600  -->  00:04:09.210
in the executor function because that is usually
81

81

00:04:09.210  -->  00:04:10.630
what happens in a promise.
82

82

00:04:10.630  -->  00:04:13.680
So something like an ajax call or in this case
83

83

00:04:13.680  -->  00:04:14.930
a set time out function.
84

84

00:04:14.930  -->  00:04:18.269
So again to fake the ajax call so basically the call
85

85

00:04:18.269  -->  00:04:21.180
to a server to get some data, okay?
86

86

00:04:21.180  -->  00:04:23.230
So again, we're going to use set time out
87

87

00:04:30.230  -->  00:04:35.230
with a call back function after one second, okay?
88

88

00:04:35.900  -->  00:04:37.300
Or after one and a half seconds.
89

89

00:04:37.300  -->  00:04:40.014
That gives us a bit more time to see the result.
90

90

00:04:40.014  -->  00:04:42.510
Now, when this timer finishes here after one
91

91

00:04:42.510  -->  00:04:45.180
and a half seconds we want to return the data
92

92

00:04:45.180  -->  00:04:48.570
with some of the fake IDs just like we did before,
93

93

00:04:48.570  -->  00:04:52.570
and so now it's actually time to call that resolve function
94

94

00:04:52.570  -->  00:04:55.930
and remember that we call resolve in case that event
95

95

00:04:55.930  -->  00:04:57.190
was successful.
96

96

00:04:57.190  -->  00:05:00.020
So calling the resolve function here will basically mark
97

97

00:05:00.020  -->  00:05:01.890
the promise as fulfilled.
98

98

00:05:01.890  -->  00:05:03.787
So, as successful, right?
99

99

00:05:03.787  -->  00:05:06.690
And that is exactly what we want here, okay?
100

100

00:05:06.690  -->  00:05:09.323
So let's call the resolve function here.
101

101

00:05:12.330  -->  00:05:15.660
Resolve, now that function actually takes an argument here
102

102

00:05:15.660  -->  00:05:18.250
which is for the result of the promise,
103

103

00:05:18.250  -->  00:05:21.300
and so this is basically how we return our result
104

104

00:05:21.300  -->  00:05:23.458
from the promise if it was successful
105

105

00:05:23.458  -->  00:05:25.450
and what do we want to return here?
106

106

00:05:25.450  -->  00:05:29.400
That's right, that's just this array of these IDs.
107

107

00:05:29.400  -->  00:05:33.573
So let me just copy it from up here and put it down here.
108

108

00:05:34.450  -->  00:05:38.010
All right, so again, what we do here is that after
109

109

00:05:38.010  -->  00:05:40.550
this timer finishes after one and a half second
110

110

00:05:40.550  -->  00:05:43.940
we say that the promise is successful and that we want
111

111

00:05:43.940  -->  00:05:46.610
to return this data here and that's why we used
112

112

00:05:46.610  -->  00:05:50.410
the resolve function and since set time out is impossible
113

113

00:05:50.410  -->  00:05:53.150
to fail, so, this timer will always finish.
114

114

00:05:53.150  -->  00:05:55.590
There's no way it is not going to finish
115

115

00:05:55.590  -->  00:05:57.930
and so we don't need to call the reject function
116

116

00:05:57.930  -->  00:06:01.500
in this case, but we would need it in some other cases,
117

117

00:06:01.500  -->  00:06:03.610
like when we were dealing with data coming back
118

118

00:06:03.610  -->  00:06:06.680
from a server where there can happen all kinds of errors.
119

119

00:06:06.680  -->  00:06:09.000
But in this case we don't need to call the reject
120

120

00:06:09.000  -->  00:06:09.833
function ever.
121

121

00:06:09.833  -->  00:06:12.086
All we do here is to call the resolve function
122

122

00:06:12.086  -->  00:06:14.620
which marks the promise as fulfilled
123

123

00:06:14.620  -->  00:06:17.290
and returns this data here.
124

124

00:06:17.290  -->  00:06:20.950
All right, and so we produced our very first very simple
125

125

00:06:20.950  -->  00:06:25.290
promise here which is stored now in this get IDs variable.
126

126

00:06:25.290  -->  00:06:29.000
Okay, and so now it is actually time that we consume
127

127

00:06:29.000  -->  00:06:32.690
this promise, and in order to do that we can use two methods
128

128

00:06:32.690  -->  00:06:36.120
on all of the promise objects and these methods are
129

129

00:06:36.120  -->  00:06:39.010
the then and the catch methods, okay?
130

130

00:06:39.010  -->  00:06:42.860
So all of the promise objects here inherit these two methods
131

131

00:06:42.860  -->  00:06:45.223
and so we can now go ahead and use them.
132

132

00:06:47.960  -->  00:06:52.960
So get IDs dot then and this then method allows us
133

133

00:06:53.810  -->  00:06:56.830
to add an event handler for the case that the promise
134

134

00:06:56.830  -->  00:06:57.820
is fulfilled.
135

135

00:06:57.820  -->  00:07:00.530
So which means that there is a result.
136

136

00:07:00.530  -->  00:07:03.260
So now all we have to do here is to pass in a call back
137

137

00:07:03.260  -->  00:07:06.680
function which will handle what we do in case the promise
138

138

00:07:06.680  -->  00:07:09.166
was successful which will actually always be the case
139

139

00:07:09.166  -->  00:07:11.410
here in this promise, right?
140

140

00:07:11.410  -->  00:07:13.350
So as I mentioned before, this cannot fail
141

141

00:07:13.350  -->  00:07:15.530
and so it will always be successful
142

142

00:07:15.530  -->  00:07:20.260
and so we can always call the then method on our promise.
143

143

00:07:20.260  -->  00:07:22.150
So, let's add a call back function here
144

144

00:07:22.150  -->  00:07:24.850
and this call back here actually can take an argument.
145

145

00:07:24.850  -->  00:07:27.450
I'm gonna explain to you in a second how this works.
146

146

00:07:28.670  -->  00:07:31.320
Okay, so I'm simply calling this one here IDs
147

147

00:07:31.320  -->  00:07:36.150
and then an arrow function again and then just like this.
148

148

00:07:36.150  -->  00:07:38.110
So here's the function body.
149

149

00:07:38.110  -->  00:07:41.130
Now, this argument here that we pass into
150

150

00:07:41.130  -->  00:07:44.010
our call back function which is this entire thing here,
151

151

00:07:44.010  -->  00:07:47.350
right, so this argument here will be the result
152

152

00:07:47.350  -->  00:07:48.810
of the successful promise.
153

153

00:07:48.810  -->  00:07:52.350
So in this case it will be this entire array, okay?
154

154

00:07:52.350  -->  00:07:56.113
And so let's now log this one to the console.
155

155

00:07:56.113  -->  00:08:01.113
So console dot log IDs and that's actually it already.
156

156

00:08:02.540  -->  00:08:07.540
So let's check it out and wait for it here and here we go.
157

157

00:08:08.050  -->  00:08:11.480
So after one and a half second again it then printed
158

158

00:08:11.480  -->  00:08:15.070
these four IDs in this array here to our console.
159

159

00:08:15.070  -->  00:08:17.180
So let's recap what happened here.
160

160

00:08:17.180  -->  00:08:20.790
So we created this promise here with this executor
161

161

00:08:20.790  -->  00:08:24.380
function in it and inside that function we usually have
162

162

00:08:24.380  -->  00:08:26.850
some asynchronous code which is in this case here
163

163

00:08:26.850  -->  00:08:29.586
our set time out which after one and a half seconds
164

164

00:08:29.586  -->  00:08:33.570
returns this data here in case it is successful
165

165

00:08:33.570  -->  00:08:36.090
and that's why we use the resolve function
166

166

00:08:36.090  -->  00:08:39.220
and the set time out function will always be successful
167

167

00:08:39.220  -->  00:08:41.870
and so all we need to do is to simply always use
168

168

00:08:41.870  -->  00:08:44.650
the resolve function here and then pass in the data
169

169

00:08:44.650  -->  00:08:47.500
that we want to return from the successful promise,
170

170

00:08:47.500  -->  00:08:50.770
so from the fulfilled promise and we can then handle
171

171

00:08:50.770  -->  00:08:54.390
that successful, so that fulfilled, state down here
172

172

00:08:54.390  -->  00:08:57.170
with the then methods that is available on all
173

173

00:08:57.170  -->  00:08:59.910
our promise objects, all right?
174

174

00:08:59.910  -->  00:09:03.160
So we have our promise object and then on it we use
175

175

00:09:03.160  -->  00:09:06.040
the then methods which is used to handle the fulfilled
176

176

00:09:06.040  -->  00:09:09.690
promise and into this then method we pass in a call back
177

177

00:09:09.690  -->  00:09:13.040
function which will always have as an argument the result
178

178

00:09:13.040  -->  00:09:16.110
of the successful promise and that's why if we use console
179

179

00:09:16.110  -->  00:09:19.250
log of the IDs we will basically console log
180

180

00:09:19.250  -->  00:09:21.650
this array here, okay?
181

181

00:09:21.650  -->  00:09:23.120
Does that make sense?
182

182

00:09:23.120  -->  00:09:26.470
Now, as I mentioned, we also have access to another method
183

183

00:09:26.470  -->  00:09:28.820
which is the catch method which allows us to add
184

184

00:09:28.820  -->  00:09:31.620
a handler for the case that a promise gets rejected.
185

185

00:09:31.620  -->  00:09:33.670
So then an error happened.
186

186

00:09:33.670  -->  00:09:35.860
So let's try that one as well.
187

187

00:09:35.860  -->  00:09:39.430
And so, I'm going to change these here in different lines.
188

188

00:09:39.430  -->  00:09:40.503
So just like this.
189

189

00:09:43.363  -->  00:09:45.773
And finally a catch.
190

190

00:09:47.320  -->  00:09:48.740
And here we usually call the argument
191

191

00:09:48.740  -->  00:09:51.090
of the call back function the error
192

192

00:09:56.320  -->  00:09:59.763
and then we can log this error to the console.
193

193

00:10:01.310  -->  00:10:04.670
Okay, so again right now it's impossible that this catch
194

194

00:10:04.670  -->  00:10:07.100
here is actually called because this promise here
195

195

00:10:07.100  -->  00:10:08.290
is impossible to fail.
196

196

00:10:08.290  -->  00:10:11.630
So we never called this reject call back function in here.
197

197

00:10:11.630  -->  00:10:15.190
But just to try it let me actually use reject here
198

198

00:10:15.190  -->  00:10:16.253
instead of resolve.
199

199

00:10:18.770  -->  00:10:20.623
Just so you see what happens here.
200

200

00:10:23.720  -->  00:10:25.920
And so you see the result is actually the same
201

201

00:10:25.920  -->  00:10:28.240
because we still return this data here
202

202

00:10:28.240  -->  00:10:30.432
but this time as an error basically.
203

203

00:10:30.432  -->  00:10:33.180
So let's say we didn't have this catch here
204

204

00:10:33.180  -->  00:10:36.940
and so now it shouldn't have any result.
205

205

00:10:36.940  -->  00:10:39.663
Okay, and so now we actually get this error here.
206

206

00:10:40.560  -->  00:10:42.850
Okay, but right now since we're actually catching
207

207

00:10:42.850  -->  00:10:46.360
this error here and we can also instead say something
208

208

00:10:46.360  -->  00:10:49.120
else here, just say error
209

209

00:10:52.107  -->  00:10:53.920
and then let's try it out again.
210

210

00:10:53.920  -->  00:10:55.590
And so now it says we have an error
211

211

00:10:55.590  -->  00:10:57.870
and again we have an error because by using
212

212

00:10:57.870  -->  00:11:01.340
this reject function here we basically mark this promise
213

213

00:11:01.340  -->  00:11:03.950
as rejected and so therefore JavaScript assumes
214

214

00:11:03.950  -->  00:11:06.945
that there was an error and so this part here
215

215

00:11:06.945  -->  00:11:10.940
is the method that gets called, okay?
216

216

00:11:10.940  -->  00:11:13.890
But now let's put it back of course to resolve
217

217

00:11:16.000  -->  00:11:18.680
because our promise is always successful.
218

218

00:11:18.680  -->  00:11:21.800
Okay, so now we translated this first part here
219

219

00:11:21.800  -->  00:11:24.490
of our previous example and now let's write the two
220

220

00:11:24.490  -->  00:11:28.480
promises to handle the part where we get a recipe
221

221

00:11:28.480  -->  00:11:31.940
based on an ID and then where we get another recipe
222

222

00:11:31.940  -->  00:11:36.430
based on the same publisher like we did here in this part.
223

223

00:11:36.430  -->  00:11:38.940
Okay, so let's now add these two promises
224

224

00:11:38.940  -->  00:11:42.050
and then we can put it all together down here
225

225

00:11:42.050  -->  00:11:43.593
when we consume our promises.
226

226

00:11:45.340  -->  00:11:48.770
Okay, so let's remember how this worked up here.
227

227

00:11:48.770  -->  00:11:51.420
So we passed in an ID into the call back function
228

228

00:11:51.420  -->  00:11:54.400
of this timer which came from the recipe IDs
229

229

00:11:54.400  -->  00:11:57.070
that we got from the first step and so let's do something
230

230

00:11:57.070  -->  00:11:58.393
similar here.
231

231

00:11:59.720  -->  00:12:02.360
Okay, and so what we're gonna do is to actually create
232

232

00:12:02.360  -->  00:12:05.270
a function which receives this ID
233

233

00:12:05.270  -->  00:12:07.830
and which will then return a promise.
234

234

00:12:07.830  -->  00:12:12.830
So let's say const get recipe which will be a function
235

235

00:12:15.860  -->  00:12:18.260
that receives the recipe ID
236

236

00:12:22.370  -->  00:12:24.390
and with this function body here.
237

237

00:12:24.390  -->  00:12:26.800
So again an arrow function expression here
238

238

00:12:26.800  -->  00:12:29.040
with the new ES six syntax.
239

239

00:12:29.040  -->  00:12:32.280
Then in here we can return our new promise.
240

240

00:12:32.280  -->  00:12:34.250
So we return and we say new promise
241

241

00:12:35.960  -->  00:12:38.462
just like we did up here, right?
242

242

00:12:38.462  -->  00:12:41.583
And now we need to do our executor function.
243

243

00:12:44.250  -->  00:12:46.040
And this part here is always the same.
244

244

00:12:46.040  -->  00:12:47.830
We always say resolve, reject
245

245

00:12:51.250  -->  00:12:53.000
and then pass in the function body.
246

246

00:12:54.710  -->  00:12:57.950
Okay, and now what happens inside of this promise is
247

247

00:12:57.950  -->  00:13:00.910
actually pretty similar to what we have in here.
248

248

00:13:00.910  -->  00:13:03.163
So let's just get it from this part.
249

249

00:13:05.970  -->  00:13:09.910
Okay, but instead here of course of the console log
250

250

00:13:09.910  -->  00:13:13.083
we will resolve this value that we have here.
251

251

00:13:14.710  -->  00:13:17.300
Okay, so just like in our other promise we actually
252

252

00:13:17.300  -->  00:13:19.870
want to resolve the value and actually I'm seeing
253

253

00:13:19.870  -->  00:13:22.320
that this is not quite correct because we're still missing
254

254

00:13:22.320  -->  00:13:24.230
our set time out here of course.
255

255

00:13:24.230  -->  00:13:25.780
So let's add that very quickly.
256

256

00:13:27.310  -->  00:13:32.310
So set time out, then in here we want to pass in an ID
257

257

00:13:35.640  -->  00:13:38.423
and then this code of course.
258

258

00:13:43.120  -->  00:13:48.120
Then 1500 seconds and then we pass in rec ID.
259

259

00:13:49.440  -->  00:13:50.900
So, does that make sense?
260

260

00:13:50.900  -->  00:13:54.040
So, into this get recipe function we pass in rec ID,
261

261

00:13:54.040  -->  00:13:57.870
so the recipe ID, which we then pass in into the set time
262

262

00:13:57.870  -->  00:14:01.297
out and so then it will become ID and then inside
263

263

00:14:01.297  -->  00:14:04.530
the call back function we use ID here.
264

264

00:14:04.530  -->  00:14:07.373
So this need to be ID in uppercase.
265

265

00:14:08.410  -->  00:14:12.833
Okay, now how do we actually consume this promise here?
266

266

00:14:13.801  -->  00:14:15.780
So let me show it to you.
267

267

00:14:15.780  -->  00:14:18.401
So what we could do here of course is to simply call
268

268

00:14:18.401  -->  00:14:22.810
the get recipe function here and then add a then to it.
269

269

00:14:22.810  -->  00:14:26.953
So, just like this, like get recipe,
270

270

00:14:28.270  -->  00:14:32.420
with IDs two, just like we did before,
271

271

00:14:32.420  -->  00:14:35.780
and then this would return a promise, right?
272

272

00:14:35.780  -->  00:14:40.270
And then we could add the then and so on and so forth.
273

273

00:14:40.270  -->  00:14:42.500
But this would not really solve the problem
274

274

00:14:42.500  -->  00:14:43.970
of the call back hell, right?
275

275

00:14:43.970  -->  00:14:46.340
Because then again we would have this call back here
276

276

00:14:46.340  -->  00:14:49.720
just then inside of another then and that's not ideal
277

277

00:14:49.720  -->  00:14:53.110
at all, and so there's another way of doing this,
278

278

00:14:53.110  -->  00:14:55.150
and that's actually the beauty of promises
279

279

00:14:55.150  -->  00:14:57.180
which is something called chaining.
280

280

00:14:57.180  -->  00:15:01.210
So we can return a promise from this then method here
281

281

00:15:01.210  -->  00:15:04.800
and then simply add the next then method after it.
282

282

00:15:04.800  -->  00:15:07.550
So let me show that to you so that it makes more sense.
283

283

00:15:09.708  -->  00:15:14.190
So I do it like this, return, get recipe IDs two
284

284

00:15:15.440  -->  00:15:18.560
and then I can add the next then after this.
285

285

00:15:18.560  -->  00:15:22.670
This get recipe here will return a promise, okay?
286

286

00:15:22.670  -->  00:15:25.740
So after this here runs we will have a promise here
287

287

00:15:25.740  -->  00:15:28.470
and what we do then is to return that promise
288

288

00:15:28.470  -->  00:15:31.270
and therefore we can then add the next then
289

289

00:15:31.270  -->  00:15:35.100
to handle the result of that resolved promise okay?
290

290

00:15:35.100  -->  00:15:37.810
So we now have this promise here and now want to
291

291

00:15:37.810  -->  00:15:41.760
handle the fulfillment of this new promise, okay?
292

292

00:15:41.760  -->  00:15:44.023
And what will happen when this promise is fulfilled
293

293

00:15:44.023  -->  00:15:47.910
is that it will basically return this data here, okay?
294

294

00:15:47.910  -->  00:15:49.920
And that is our recipe.
295

295

00:15:49.920  -->  00:15:51.640
So let's call this parameter of this
296

296

00:15:51.640  -->  00:15:53.670
call back function here the recipe
297

297

00:15:58.337  -->  00:16:01.504
and then simply log it to the console.
298

298

00:16:06.550  -->  00:16:07.850
And let's try it out here.
299

299

00:16:08.720  -->  00:16:12.790
So the IDs and then finally the recipe.
300

300

00:16:12.790  -->  00:16:16.513
So it's working just fine without any of the call back
301

301

00:16:16.513  -->  00:16:18.970
hell that we had up here, right?
302

302

00:16:18.970  -->  00:16:21.070
So now our code is all nicely separated here
303

303

00:16:21.070  -->  00:16:23.920
into these different functions and then down here
304

304

00:16:23.920  -->  00:16:25.800
we consume this promises.
305

305

00:16:25.800  -->  00:16:28.330
We could of course put this one here into a function
306

306

00:16:28.330  -->  00:16:30.080
as well but that's not really necessary
307

307

00:16:30.080  -->  00:16:33.160
because we don't need to pass any data into this.
308

308

00:16:33.160  -->  00:16:36.100
So, here this get recipe we did it as a function
309

309

00:16:36.100  -->  00:16:39.490
because we needed to pass in this recipe ID
310

310

00:16:39.490  -->  00:16:41.720
into this promise here, okay?
311

311

00:16:41.720  -->  00:16:46.370
And so that's the second one and now finally let's work
312

312

00:16:46.370  -->  00:16:47.483
on the last one.
313

313

00:16:49.010  -->  00:16:52.453
So let's add another function here called get related.
314

314

00:17:00.430  -->  00:17:02.950
And remember that this one here is basically to fetch
315

315

00:17:02.950  -->  00:17:07.437
a recipe which is related to the author of the first recipe
316

316

00:17:07.437  -->  00:17:10.240
and so of course this needs to happen in a sequence
317

317

00:17:10.240  -->  00:17:13.130
because we can only load a related recipe if we already
318

318

00:17:13.130  -->  00:17:15.770
know the publisher that we're looking for
319

319

00:17:15.770  -->  00:17:19.090
and so we need to do this in these three steps
320

320

00:17:19.090  -->  00:17:20.293
just like we did before.
321

321

00:17:21.930  -->  00:17:23.993
So again return a new promise.
322

322

00:17:28.467  -->  00:17:31.122
Then resolve and reject and again this is always
323

323

00:17:31.122  -->  00:17:36.122
the same here and oh I forgot to put the parentheses here
324

324

00:17:36.830  -->  00:17:38.473
for the arrow function.
325

325

00:17:45.756  -->  00:17:48.839
And then again here the set time out.
326

326

00:17:49.780  -->  00:17:51.733
Let's just say pub here.
327

327

00:17:55.650  -->  00:17:59.930
After 1.5 seconds, so 1500 milliseconds
328

328

00:17:59.930  -->  00:18:01.080
and then the publisher.
329

329

00:18:02.880  -->  00:18:04.660
So, just the same logic as before.
330

330

00:18:04.660  -->  00:18:06.380
So this publisher is the one that we get here
331

331

00:18:06.380  -->  00:18:09.140
as an input to this function which will then be passed
332

332

00:18:09.140  -->  00:18:11.540
into the call back function of the set time out
333

333

00:18:11.540  -->  00:18:14.370
and will then be called pub, okay?
334

334

00:18:14.370  -->  00:18:16.890
And now I'm just going to copy the code that we have
335

335

00:18:16.890  -->  00:18:17.983
up here again.
336

336

00:18:22.020  -->  00:18:23.523
And simply paste it here.
337

337

00:18:27.040  -->  00:18:28.970
And again, we don't want to log it to the console
338

338

00:18:28.970  -->  00:18:31.850
but we want to resolve this promise
339

339

00:18:31.850  -->  00:18:34.130
and return this recipe here.
340

340

00:18:34.130  -->  00:18:38.690
So recipe and let's call the recipe here as well
341

341

00:18:38.690  -->  00:18:41.690
and let's actually also use this pub argument.
342

342

00:18:41.690  -->  00:18:44.940
I think up there we didn't actually use it
343

343

00:18:44.940  -->  00:18:46.770
but let's do that down here.
344

344

00:18:46.770  -->  00:18:49.743
So let's use a template literal here again.
345

345

00:18:56.140  -->  00:19:01.140
And say pub and then show the recipe here.
346

346

00:19:02.530  -->  00:19:04.200
So the Italian pizza.
347

347

00:19:04.200  -->  00:19:07.560
Okay, and so that should get the job done,
348

348

00:19:07.560  -->  00:19:10.420
and so now in order to consume this promise
349

349

00:19:10.420  -->  00:19:13.360
I'm going to do it in the exact same way as before.
350

350

00:19:13.360  -->  00:19:17.476
So we receive our recipe here and now I will return
351

351

00:19:17.476  -->  00:19:20.713
the result of calling get related.
352

352

00:19:22.440  -->  00:19:26.336
So get related and what we pass in here then is
353

353

00:19:26.336  -->  00:19:30.970
the recipe dot publisher, right?
354

354

00:19:30.970  -->  00:19:35.270
So recipe dot publisher because that's
355

355

00:19:35.270  -->  00:19:38.460
in this case here Jonas, right?
356

356

00:19:38.460  -->  00:19:42.290
So we get Jonas from our recipe and then pass it into
357

357

00:19:42.290  -->  00:19:45.300
the get related function and so all of this here will
358

358

00:19:45.300  -->  00:19:48.500
return a new promise and so just like before
359

359

00:19:48.500  -->  00:19:51.293
we can then use the then method on it.
360

360

00:19:53.530  -->  00:19:56.480
And again, we receive a recipe and so I can call it
361

361

00:19:56.480  -->  00:19:59.880
recipe again because it's a different function
362

362

00:19:59.880  -->  00:20:03.833
than this one here and so I can simply reuse this name.
363

363

00:20:06.040  -->  00:20:09.433
And so let's again log this recipe to the console.
364

364

00:20:11.670  -->  00:20:14.053
Give it a save and let's try it out.
365

365

00:20:15.010  -->  00:20:16.140
So after one and a half second this one
366

366

00:20:16.140  -->  00:20:20.680
then the first recipe and then the related recipe
367

367

00:20:20.680  -->  00:20:24.100
and now we get an error here saying undefined
368

368

00:20:24.100  -->  00:20:26.300
and then this weird object object
369

369

00:20:26.300  -->  00:20:28.400
and I think I know why this is happening
370

370

00:20:28.400  -->  00:20:30.060
and that's because our recipe here
371

371

00:20:30.060  -->  00:20:33.920
actually returns a string, okay?
372

372

00:20:33.920  -->  00:20:37.080
So you see here that we actually resolve this entire
373

373

00:20:37.080  -->  00:20:39.880
string here and not just the recipe object
374

374

00:20:39.880  -->  00:20:42.270
and so therefore we can then not read
375

375

00:20:42.270  -->  00:20:44.640
a recipe dot publisher, okay?
376

376

00:20:44.640  -->  00:20:47.483
And so instead I'm simply going to add Jonas here.
377

377

00:20:48.770  -->  00:20:50.970
Okay, so in this case it doesn't really matter
378

378

00:20:50.970  -->  00:20:53.020
and so that solves this first part here.
379

379

00:20:53.020  -->  00:20:55.050
Then after that I have object object
380

380

00:20:55.050  -->  00:20:58.160
and that's because here I put this entire object here
381

381

00:20:58.160  -->  00:21:01.921
into a string but instead I just want recipe dot title
382

382

00:21:01.921  -->  00:21:06.921
just like we have here in this line of code as well.
383

383

00:21:07.627  -->  00:21:11.700
Okay, and if I do this now then it should work
384

384

00:21:12.550  -->  00:21:16.820
and now finally, yeah, so Jonas, Italian pizza.
385

385

00:21:16.820  -->  00:21:18.840
I could of course pass something else here
386

386

00:21:18.840  -->  00:21:20.623
just like my entire name.
387

387

00:21:25.410  -->  00:21:27.700
And so one and a half and one and a half
388

388

00:21:27.700  -->  00:21:29.950
and finally another one and a half later
389

389

00:21:29.950  -->  00:21:32.940
we get this entire result, okay?
390

390

00:21:32.940  -->  00:21:35.520
So this is how we do the same thing that we did before
391

391

00:21:35.520  -->  00:21:38.200
with the call back hell with promises.
392

392

00:21:38.200  -->  00:21:40.720
So instead of having this really messy
393

393

00:21:40.720  -->  00:21:44.250
and unmanageable code which is actually a lot less code
394

394

00:21:44.250  -->  00:21:47.870
here but it still is really unmanageable especially
395

395

00:21:47.870  -->  00:21:50.720
if we had more code and deeper nested call backs.
396

396

00:21:50.720  -->  00:21:54.060
Then it would become really like a nightmare to maintain
397

397

00:21:54.060  -->  00:21:56.820
and instead we have very nicely separated code here
398

398

00:21:56.820  -->  00:21:59.790
like this where we produced all of our promises
399

399

00:21:59.790  -->  00:22:03.230
and then in the end we simply consume them here
400

400

00:22:03.230  -->  00:22:07.255
with this chain of thens and finally then a catch
401

401

00:22:07.255  -->  00:22:10.340
to catch if there is any error.
402

402

00:22:10.340  -->  00:22:12.454
And that's it about promises.
403

403

00:22:12.454  -->  00:22:16.920
Woo, this was a lot to take in and I actually I find
404

404

00:22:16.920  -->  00:22:20.310
promises to be one of the hardest if not the hardest
405

405

00:22:20.310  -->  00:22:22.660
concept to grasp in JavaScript.
406

406

00:22:22.660  -->  00:22:25.200
And so, please don't worry if you didn't really understand
407

407

00:22:25.200  -->  00:22:28.350
it 100% on this point, okay?
408

408

00:22:28.350  -->  00:22:31.440
Because what really matters is actually how we consume
409

409

00:22:31.440  -->  00:22:33.810
promises and not so much how we produce,
410

410

00:22:33.810  -->  00:22:36.160
because that is oftentimes already included in some
411

411

00:22:36.160  -->  00:22:39.423
kind of libraries that we're gonna use later in the course.
