
1

00:00:01,170  -->  00:00:02,805
<v Jonas>Welcome back.</v>
2

2

00:00:02,805  -->  00:00:06,196
I hope you're still following along just fine.
3

3

00:00:06,196  -->  00:00:08,401
In this lecture, we're gonna talk about
4

4

00:00:08,401  -->  00:00:11,227
an extremely common pattern in JavaScript,
5

5

00:00:11,227  -->  00:00:14,975
and that is Immediately Invoked Functions Expressions,
6

6

00:00:14,975  -->  00:00:16,392
also called IIFE.
7

7

00:00:19,147  -->  00:00:22,415
Imagine that we wanted to build a little game,
8

8

00:00:22,415  -->  00:00:26,124
where we win the game if a random score from zero to nine
9

9

00:00:26,124  -->  00:00:30,513
is greater or equal to five, and lose if it's smaller,
10

10

00:00:30,513  -->  00:00:33,742
so just a small and silly game really.
11

11

00:00:33,742  -->  00:00:37,819
But, we want to keep the score hidden in this game, OK,
12

12

00:00:37,819  -->  00:00:40,767
so the score should not be visible.
13

13

00:00:40,767  -->  00:00:42,603
Now, I'm sure that you can think
14

14

00:00:42,603  -->  00:00:45,003
of a way of doing this, right?
15

15

00:00:45,003  -->  00:00:47,990
And the answer is to write a simple function,
16

16

00:00:47,990  -->  00:00:50,305
because we already know that variables
17

17

00:00:50,305  -->  00:00:52,636
defined inside of a function,
18

18

00:00:52,636  -->  00:00:56,462
cannot be accessed from the outside scope, right,
19

19

00:00:56,462  -->  00:01:00,820
because the scoping chain only works the other way around.
20

20

00:01:00,820  -->  00:01:04,315
So we could simply write something like this,
21

21

00:01:04,315  -->  00:01:05,732
so function game,
22

22

00:01:08,321  -->  00:01:10,990
without any parameters,
23

23

00:01:10,990  -->  00:01:14,924
and then calculate a random score, right,
24

24

00:01:14,924  -->  00:01:16,924
so Math.random times 10,
25

25

00:01:19,256  -->  00:01:21,992
so, between zero and nine,
26

26

00:01:21,992  -->  00:01:25,307
and then simply log to the console,
27

27

00:01:25,307  -->  00:01:28,395
if the score is greater or equal to five.
28

28

00:01:28,395  -->  00:01:31,312
So just a really silly game, right?
29

29

00:01:32,811  -->  00:01:37,065
Then call it, and then, let's see, OK, so false.
30

30

00:01:37,065  -->  00:01:38,953
So this doesn't really matter here,
31

31

00:01:38,953  -->  00:01:40,836
because what I want to show you,
32

32

00:01:40,836  -->  00:01:43,207
is that we can do this in a different way,
33

33

00:01:43,207  -->  00:01:46,994
because, there are a few problems with this.
34

34

00:01:46,994  -->  00:01:50,294
If the only purpose is to hide the score variable
35

35

00:01:50,294  -->  00:01:51,616
from the outside,
36

36

00:01:51,616  -->  00:01:54,301
so which means creating a private variable,
37

37

00:01:54,301  -->  00:01:56,711
then we don't need to declare a whole function
38

38

00:01:56,711  -->  00:01:58,982
with a name and then call it.
39

39

00:01:58,982  -->  00:02:01,613
We can do this in a better way, and that is to use
40

40

00:02:01,613  -->  00:02:04,410
an Immediately Invoked Function Expression,
41

41

00:02:04,410  -->  00:02:07,582
which is usually abbreviated as IIFE.
42

42

00:02:07,582  -->  00:02:10,717
So let me first write out how an IIFE looks like,
43

43

00:02:10,717  -->  00:02:13,980
and then I explain you, how and why this works.
44

44

00:02:13,980  -->  00:02:15,880
So we start with parentheses,
45

45

00:02:15,880  -->  00:02:19,713
and then in here we simply write our function,
46

46

00:02:20,561  -->  00:02:25,435
and actually our anonymous function so without the name, OK,
47

47

00:02:25,435  -->  00:02:28,487
and then let me just actually copy this,
48

48

00:02:28,487  -->  00:02:32,147
there is no need to write it again, OK,
49

49

00:02:32,147  -->  00:02:35,313
and then we just invoke this function like this,
50

50

00:02:35,313  -->  00:02:38,428
and this is it, this is an IIFE.
51

51

00:02:38,428  -->  00:02:40,822
So, how does this actually work?
52

52

00:02:40,822  -->  00:02:42,677
Let's start at the beginning.
53

53

00:02:42,677  -->  00:02:46,257
So if you just wrote something like this,
54

54

00:02:46,257  -->  00:02:50,364
so function, so just something like this,
55

55

00:02:50,364  -->  00:02:53,843
so without the name, but also without the parentheses,
56

56

00:02:53,843  -->  00:02:56,591
then the JavaScript parser would think
57

57

00:02:56,591  -->  00:02:58,810
that this is a function declaration,
58

58

00:02:58,810  -->  00:03:00,443
but since we don't have any name
59

59

00:03:00,443  -->  00:03:04,142
for the function declaration, then it will throw an error,
60

60

00:03:04,142  -->  00:03:06,831
so we basically need to trick the parser,
61

61

00:03:06,831  -->  00:03:08,931
and make it believe that what we have here
62

62

00:03:08,931  -->  00:03:11,804
is an expression, and not a declaration.
63

63

00:03:11,804  -->  00:03:14,664
And the solution, is to wrap the entire thing
64

64

00:03:14,664  -->  00:03:17,290
into parenthesis, because in JavaScript,
65

65

00:03:17,290  -->  00:03:20,883
what's inside of parenthesis cannot be a statement,
66

66

00:03:20,883  -->  00:03:22,934
and like this, JavaScript will know
67

67

00:03:22,934  -->  00:03:25,341
that it should treat this as an expression,
68

68

00:03:25,341  -->  00:03:28,096
and not as a declaration.
69

69

00:03:28,096  -->  00:03:31,560
And then after that, we only have to invoke the function,
70

70

00:03:31,560  -->  00:03:33,856
because, if we didn't do this,
71

71

00:03:33,856  -->  00:03:37,212
so, if it would be like this without the parenthesis,
72

72

00:03:37,212  -->  00:03:40,118
then it would never be called and never do anything,
73

73

00:03:40,118  -->  00:03:42,410
and since we don't attach this to a variable,
74

74

00:03:42,410  -->  00:03:44,353
then nothing would ever happened.
75

75

00:03:44,353  -->  00:03:46,554
So, does that make sense?
76

76

00:03:46,554  -->  00:03:50,084
This is just how the IIFE works, and just like this,
77

77

00:03:50,084  -->  00:03:53,885
we can no longer access the score variable from the outside,
78

78

00:03:53,885  -->  00:03:56,294
so we created data privacy here,
79

79

00:03:56,294  -->  00:03:59,271
and let's confirm that actually.
80

80

00:03:59,271  -->  00:04:01,104
So let me remove this,
81

81

00:04:02,938  -->  00:04:06,195
let's try to console.log the score,
82

82

00:04:06,195  -->  00:04:10,991
but we already know that this is not going to work, right?
83

83

00:04:10,991  -->  00:04:13,658
So let's take this out here, OK.
84

84

00:04:15,243  -->  00:04:19,789
Alright, so we have true, which is the result of this IIFE,
85

85

00:04:19,789  -->  00:04:22,389
and then score is not defined, of course.
86

86

00:04:22,389  -->  00:04:23,609
So outside here in the code,
87

87

00:04:23,609  -->  00:04:26,115
we cannot see the score variable.
88

88

00:04:26,115  -->  00:04:29,722
We can of course, also pass arguments into the IIFE.
89

89

00:04:29,722  -->  00:04:31,938
So we could extend our function,
90

90

00:04:31,938  -->  00:04:35,422
by adding a parameter called goodLuck to the game,
91

91

00:04:35,422  -->  00:04:37,773
and the more goodLuck we add to the game,
92

92

00:04:37,773  -->  00:04:40,531
then the higher the chance that we win the game.
93

93

00:04:40,531  -->  00:04:43,698
So, very simple, let's just copy this,
94

94

00:04:44,645  -->  00:04:48,576
just to show you that we can use a parameter here,
95

95

00:04:48,576  -->  00:04:50,808
so let's call this goodLuck,
96

96

00:04:50,808  -->  00:04:54,735
and then we subtract the goodLuck here,
97

97

00:04:54,735  -->  00:04:56,535
OK, so, makes sense?
98

98

00:04:56,535  -->  00:05:00,047
So the more goodLuck we add here, imagine we had five,
99

99

00:05:00,047  -->  00:05:02,279
then five minus five would be zero,
100

100

00:05:02,279  -->  00:05:05,304
and then the score would always be bigger than zero,
101

101

00:05:05,304  -->  00:05:08,076
and therefore we would always win, right?
102

102

00:05:08,076  -->  00:05:11,800
And how do we now pass the argument into the function,
103

103

00:05:11,800  -->  00:05:14,844
right, we just need to add it here, so,
104

104

00:05:14,844  -->  00:05:18,011
let's use the example of five, that I just gave you here.
105

105

00:05:18,011  -->  00:05:20,511
OK, so let's just reload this,
106

106

00:05:21,461  -->  00:05:24,472
and now this didn't work, because we have the error here,
107

107

00:05:24,472  -->  00:05:27,476
so we first need to take out this part,
108

108

00:05:27,476  -->  00:05:31,103
and then true, and true, and of course,
109

109

00:05:31,103  -->  00:05:33,965
the second one will always be true.
110

110

00:05:33,965  -->  00:05:35,770
So as you see, we can of course,
111

111

00:05:35,770  -->  00:05:38,861
only call an IIFE once, right,
112

112

00:05:38,861  -->  00:05:42,475
because this function is not assigned to any variable.
113

113

00:05:42,475  -->  00:05:44,246
But that's no problem at all,
114

114

00:05:44,246  -->  00:05:46,700
because in this case we are not using the function
115

115

00:05:46,700  -->  00:05:49,815
to create a piece of reusable code,
116

116

00:05:49,815  -->  00:05:52,677
all we want here, is to create a new scope,
117

117

00:05:52,677  -->  00:05:54,734
that is hidden from the outside scope,
118

118

00:05:54,734  -->  00:05:57,840
so where we can safely put variables.
119

119

00:05:57,840  -->  00:06:00,735
And with this, we obtain data privacy,
120

120

00:06:00,735  -->  00:06:03,910
and also don't interfere with other variables
121

121

00:06:03,910  -->  00:06:06,567
in our global execution context.
122

122

00:06:06,567  -->  00:06:10,149
So if this is to go, so if this is exactly what we want,
123

123

00:06:10,149  -->  00:06:12,472
then IIFE is the perfect solution.
124

124

00:06:12,472  -->  00:06:15,021
So again, this is not to create a piece of code
125

125

00:06:15,021  -->  00:06:18,686
that we will reuse, this is just for data privacy.
126

126

00:06:18,686  -->  00:06:21,277
Alright, so this is going to be yet another
127

127

00:06:21,277  -->  00:06:24,906
very useful tool in your JavaScript toolbox.
128

128

00:06:24,906  -->  00:06:28,096
This was, of course, just a toy example,
129

129

00:06:28,096  -->  00:06:30,713
but later in our project, you will see how important
130

130

00:06:30,713  -->  00:06:33,886
this IIFE pattern is in real-life applications,
131

131

00:06:33,886  -->  00:06:35,678
in order to structure our code,
132

132

00:06:35,678  -->  00:06:39,886
and obtain data privacy and code modularity.
133

133

00:06:39,886  -->  00:06:41,636
So let's now move on.
