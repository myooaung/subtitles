WEBVTT
1
1

00:00:01.389  -->  00:00:04.324
<v Instructor>Before we can start implementing our code</v>
2

2

00:00:04.324  -->  00:00:07.007
to delete items from our application, we need
3

3

00:00:07.007  -->  00:00:10.438
to talk about something called event delegation.
4

4

00:00:10.438  -->  00:00:13.385
Which is a very important and much used concept
5

5

00:00:13.385  -->  00:00:17.552
in JavaScript programming when we interact with a DOM.
6

6

00:00:18.488  -->  00:00:21.978
All right, so in order to talk about event delegation,
7

7

00:00:21.978  -->  00:00:24.888
the first concept that we actually need to talk about
8

8

00:00:24.888  -->  00:00:27.061
is event bubbling.
9

9

00:00:27.061  -->  00:00:30.787
Event bubbling means that when an event is fired
10

10

00:00:30.787  -->  00:00:34.727
or triggered on some DOM element, for example
11

11

00:00:34.727  -->  00:00:38.305
by clicking on our button here on the right side,
12

12

00:00:38.305  -->  00:00:41.097
then the exact same event is also triggered
13

13

00:00:41.097  -->  00:00:43.843
on all of the parent elements.
14

14

00:00:43.843  -->  00:00:47.575
Again, the event is first fired on the button,
15

15

00:00:47.575  -->  00:00:51.414
but then it will also be fired on all the parent elements
16

16

00:00:51.414  -->  00:00:56.189
one at a time, so it will also fire on the paragraph
17

17

00:00:56.189  -->  00:01:00.658
to the section the main element and actually all the way up
18

18

00:01:00.658  -->  00:01:05.409
in a DOM tree until the HTML element which is the root.
19

19

00:01:05.409  -->  00:01:09.278
So we say that the event bubbles up inside the DOM tree,
20

20

00:01:09.278  -->  00:01:11.641
and that's why it's called bubbling.
21

21

00:01:11.641  -->  00:01:16.004
Now the element on which the event was actually first fired,
22

22

00:01:16.004  -->  00:01:18.960
so the element that caused the event to happen,
23

23

00:01:18.960  -->  00:01:21.429
is called the target element.
24

24

00:01:21.429  -->  00:01:24.411
In our example here it's, of course, the button
25

25

00:01:24.411  -->  00:01:26.351
that was clicked.
26

26

00:01:26.351  -->  00:01:30.500
The important part is that this target element is stored
27

27

00:01:30.500  -->  00:01:33.833
as a property in the event object, and we already talked
28

28

00:01:33.833  -->  00:01:35.921
about that one, right?
29

29

00:01:35.921  -->  00:01:38.882
This means that all the parent elements
30

30

00:01:38.882  -->  00:01:41.362
on which the event will also fire
31

31

00:01:41.362  -->  00:01:44.691
will know the target element of the event,
32

32

00:01:44.691  -->  00:01:48.371
so where the event was first fired.
33

33

00:01:48.371  -->  00:01:51.162
That brings us to event delegation
34

34

00:01:51.162  -->  00:01:54.341
because if the event bubbles up in the DOM tree,
35

35

00:01:54.341  -->  00:01:57.402
and if we know where the event was fired
36

36

00:01:57.402  -->  00:01:59.815
then we can simply attach an event handler
37

37

00:01:59.815  -->  00:02:04.038
to a parent element and wait for the event to bubble up,
38

38

00:02:04.038  -->  00:02:06.719
and we can then do whatever we intended to do
39

39

00:02:06.719  -->  00:02:08.751
with our target element.
40

40

00:02:08.751  -->  00:02:12.544
This technique is called event delegation.
41

41

00:02:12.544  -->  00:02:16.188
In this example here, we could simply add the event handler
42

42

00:02:16.188  -->  00:02:18.332
to the main element.
43

43

00:02:18.332  -->  00:02:21.290
All right, so again, event delegation is
44

44

00:02:21.290  -->  00:02:23.498
to not set up the event handler
45

45

00:02:23.498  -->  00:02:26.581
on the original element that we're interested in,
46

46

00:02:26.581  -->  00:02:29.914
but to attach it to a parent element and, basically,
47

47

00:02:29.914  -->  00:02:33.530
catch the event there because it bubbles up.
48

48

00:02:33.530  -->  00:02:37.131
We can then act on the element that we're interested in
49

49

00:02:37.131  -->  00:02:40.018
using the target element property.
50

50

00:02:40.018  -->  00:02:42.432
Why would we actually want to do this?
51

51

00:02:42.432  -->  00:02:47.010
Let's see, there are basically two big use cases
52

52

00:02:47.010  -->  00:02:49.373
for event delegation.
53

53

00:02:49.373  -->  00:02:52.365
The first case is when we have an element
54

54

00:02:52.365  -->  00:02:55.851
with lots of child elements that we are interested in.
55

55

00:02:55.851  -->  00:02:58.739
In this case, instead of adding an event handler
56

56

00:02:58.739  -->  00:03:01.835
to all of these child elements, we simply add it
57

57

00:03:01.835  -->  00:03:04.317
to the parent element, and then determine
58

58

00:03:04.317  -->  00:03:07.900
on which child element the event was fired.
59

59

00:03:08.766  -->  00:03:11.903
The second use case for event delegation is
60

60

00:03:11.903  -->  00:03:15.055
when we want an event handler attached to an element
61

61

00:03:15.055  -->  00:03:18.994
that is not yet in the DOM when our page is loaded.
62

62

00:03:18.994  -->  00:03:22.940
That's, of course, because we cannot add an event handler
63

63

00:03:22.940  -->  00:03:26.446
to something that's not on our page, so in a case
64

64

00:03:26.446  -->  00:03:28.603
of deprecation that we're coding,
65

65

00:03:28.603  -->  00:03:31.030
it's actually both cases, right?
66

66

00:03:31.030  -->  00:03:34.615
So we have a lot of expense or income items that are not
67

67

00:03:34.615  -->  00:03:37.503
in the DOM when we load our page, so there is no way
68

68

00:03:37.503  -->  00:03:41.661
to attach an event handler to them, and also
69

69

00:03:41.661  -->  00:03:45.357
there may be a lot of items, so it wouldn't be useful
70

70

00:03:45.357  -->  00:03:49.184
to have one event handler attached to each of them.
71

71

00:03:49.184  -->  00:03:52.072
That's why we're gonna use event delegation.
72

72

00:03:52.072  -->  00:03:55.822
Let's see it in practice in the next lecture.
