WEBVTT
1
1

00:00:01.249  -->  00:00:03.160
<v Instructor>All right, now that we know about</v>
2

2

00:00:03.160  -->  00:00:06.960
event delegation, we're finally gonna start implementing
3

3

00:00:06.960  -->  00:00:11.127
the code to delete income or expense items from the app.
4

4

00:00:12.231  -->  00:00:14.470
And so in this lecture, you're gonna learn how
5

5

00:00:14.470  -->  00:00:16.826
to use event delegation in practice,
6

6

00:00:16.826  -->  00:00:20.496
using the concepts of event bubbling and target element,
7

7

00:00:20.496  -->  00:00:23.642
and you're also gonna learn how to use unique IDs
8

8

00:00:23.642  -->  00:00:27.899
in HTML to connect user interface with the data model,
9

9

00:00:27.899  -->  00:00:32.066
and how to use the parent node property for DOM traversing.
10

10

00:00:33.818  -->  00:00:36.368
All right, so we're gonna start by adding
11

11

00:00:36.368  -->  00:00:39.382
an event handler here, and we do that
12

12

00:00:39.382  -->  00:00:43.001
here in our setupEventListeners function, right?
13

13

00:00:43.001  -->  00:00:46.127
And remember that we're gonna do event delegation,
14

14

00:00:46.127  -->  00:00:50.311
so we're going to setup the event on a parent element
15

15

00:00:50.311  -->  00:00:53.528
of the elements that we're actually interested in.
16

16

00:00:53.528  -->  00:00:56.405
So let's first check out our HTML file
17

17

00:00:56.405  -->  00:00:59.053
so that we can decide where to add,
18

18

00:00:59.053  -->  00:01:01.951
or to attach our EventListener.
19

19

00:01:01.951  -->  00:01:05.746
So first of all we want our items to be deleted
20

20

00:01:05.746  -->  00:01:09.496
when the user hits on this button here, okay?
21

21

00:01:10.376  -->  00:01:13.085
So this button called "item__delete--btn"
22

22

00:01:13.085  -->  00:01:17.439
and there's one of these buttons in each and every income,
23

23

00:01:17.439  -->  00:01:20.426
and also expense elements here.
24

24

00:01:20.426  -->  00:01:23.318
But again, we don't want to attach our event handler
25

25

00:01:23.318  -->  00:01:27.421
to these, because we wanna do event delegation.
26

26

00:01:27.421  -->  00:01:29.587
So we wanna find an element that is
27

27

00:01:29.587  -->  00:01:32.413
the parent of all of these items,
28

28

00:01:32.413  -->  00:01:35.830
both the incomes and all of the expenses.
29

29

00:01:36.871  -->  00:01:41.401
And if we look closely at our HTML document structure here,
30

30

00:01:41.401  -->  00:01:45.558
we see that the first element that satisfies this condition
31

31

00:01:45.558  -->  00:01:48.681
is this one here, so this one called "container,"
32

32

00:01:48.681  -->  00:01:51.077
so it has the container class, and that's because
33

33

00:01:51.077  -->  00:01:55.324
all the incomes are inside of this income container here,
34

34

00:01:55.324  -->  00:01:58.621
and all of the expenses are in this expense container,
35

35

00:01:58.621  -->  00:02:01.276
so we cannot attach the event handler to these,
36

36

00:02:01.276  -->  00:02:03.056
because then we would need two,
37

37

00:02:03.056  -->  00:02:05.856
but we only want one of them.
38

38

00:02:05.856  -->  00:02:08.881
So we find the element that is common to all of them,
39

39

00:02:08.881  -->  00:02:10.903
and that's, again, this one here,
40

40

00:02:10.903  -->  00:02:13.295
so with the class of container.
41

41

00:02:13.295  -->  00:02:17.462
So this is where we're gonna put our event handler, okay?
42

42

00:02:20.874  -->  00:02:25.041
So we say document.querySelector to select that element,
43

43

00:02:29.309  -->  00:02:34.189
and now we need to add this element to our DOMstrings object
44

44

00:02:34.189  -->  00:02:37.189
up here, right, so as we always did,
45

45

00:02:40.191  -->  00:02:43.982
and I'm just gonna call the container here as well.
46

46

00:02:43.982  -->  00:02:47.724
Okay, and for the class, container.
47

47

00:02:47.724  -->  00:02:50.057
All right, so let's go back.
48

48

00:02:51.724  -->  00:02:55.609
So what we want is DOM, 'cause remember, in here,
49

49

00:02:55.609  -->  00:02:59.066
in this function it's not called DOMstrings, but DOM,
50

50

00:02:59.066  -->  00:03:01.672
which is this variable here where we get
51

51

00:03:01.672  -->  00:03:05.839
this DOMstrings object from the UI controller, right?
52

52

00:03:06.865  -->  00:03:10.365
So DOM.container, and this is where we add
53

53

00:03:11.400  -->  00:03:15.567
our EventListener, and it will be on the click event,
54

54

00:03:17.463  -->  00:03:19.215
and the function that we wanna call,
55

55

00:03:19.215  -->  00:03:21.800
I'm gonna call it ctrlDeleteItem,
56

56

00:03:21.800  -->  00:03:23.800
so ctrlDeleteItem, okay?
57

57

00:03:27.325  -->  00:03:30.555
So it's a name similar to ctrlAddItem,
58

58

00:03:30.555  -->  00:03:34.039
so this one will be ctrlDeleteItem.
59

59

00:03:34.039  -->  00:03:36.371
And so now we need to create this function
60

60

00:03:36.371  -->  00:03:39.310
which is gonna be called each time someone clicks
61

61

00:03:39.310  -->  00:03:42.143
somewhere on this container, okay?
62

62

00:03:43.166  -->  00:03:47.333
So let's do it down here, actually after this ctrlAddItem,
63

63

00:03:51.285  -->  00:03:55.452
so var ctrlDeleteItem, so a function, and here we go.
64

64

00:04:08.816  -->  00:04:12.881
And actually, we need to pass something into this function,
65

65

00:04:12.881  -->  00:04:15.680
which is the event, and I'm sure
66

66

00:04:15.680  -->  00:04:18.690
that you remember what the event object is,
67

67

00:04:18.690  -->  00:04:21.972
so let's check out the other event handler.
68

68

00:04:21.972  -->  00:04:24.274
So in this event handler here, we also used
69

69

00:04:24.274  -->  00:04:27.951
the event object, so remember that the callback function
70

70

00:04:27.951  -->  00:04:31.634
of the addEventListener method has always access
71

71

00:04:31.634  -->  00:04:35.710
to this event object, and we can call it whatever we want.
72

72

00:04:35.710  -->  00:04:39.190
We just call it event so that we always know what it is.
73

73

00:04:39.190  -->  00:04:41.531
And so it works, see in this anonymous function
74

74

00:04:41.531  -->  00:04:43.765
that we wrote here in this case,
75

75

00:04:43.765  -->  00:04:48.241
but it also works if we pass another function in it,
76

76

00:04:48.241  -->  00:04:50.324
so in this case ctrlDeleteItem,
77

77

00:04:50.324  -->  00:04:53.310
and then we can also say that we want access to
78

78

00:04:53.310  -->  00:04:58.141
the event object simply by putting this parameter in here.
79

79

00:04:58.141  -->  00:05:00.209
And the reason why we need this event here
80

80

00:05:00.209  -->  00:05:03.591
is because we wanna know what the target element is,
81

81

00:05:03.591  -->  00:05:07.503
so remember, that's what we talked about before.
82

82

00:05:07.503  -->  00:05:10.959
So in event delegation, an event bubbles up,
83

83

00:05:10.959  -->  00:05:13.167
and then we can know where it came from,
84

84

00:05:13.167  -->  00:05:15.635
so where it was first fired, by looking at
85

85

00:05:15.635  -->  00:05:18.431
the target property of the event.
86

86

00:05:18.431  -->  00:05:23.089
So let's simply start by console logging this property okay,
87

87

00:05:23.089  -->  00:05:26.922
so console.log(event.target).
88

88

00:05:31.007  -->  00:05:33.948
All right, so let's now test this.
89

89

00:05:33.948  -->  00:05:38.115
I'm just reloading this file, then let's hit somewhere here.
90

90

00:05:39.214  -->  00:05:43.700
So now the target of this click was this h2 element here,
91

91

00:05:43.700  -->  00:05:46.319
which actually even gets highlighted here.
92

92

00:05:46.319  -->  00:05:49.329
So if I now click somewhere here let's say,
93

93

00:05:49.329  -->  00:05:51.497
then this one is the target element,
94

94

00:05:51.497  -->  00:05:54.575
so the element where the event was fired.
95

95

00:05:54.575  -->  00:05:56.381
So in this case, where I clicked.
96

96

00:05:56.381  -->  00:06:00.548
If I click here it's the container, so this element here.
97

97

00:06:01.929  -->  00:06:05.512
Now let me add something here, say Project.
98

98

00:06:09.002  -->  00:06:12.162
Okay, so if I now click here on this button,
99

99

00:06:12.162  -->  00:06:13.573
let's see what we get.
100

100

00:06:13.573  -->  00:06:18.321
All right, so we clicked here on this "i" element,
101

101

00:06:18.321  -->  00:06:21.282
so this icon, and what this means now
102

102

00:06:21.282  -->  00:06:24.374
is that each time that we hit this button here,
103

103

00:06:24.374  -->  00:06:26.099
actually we don't hit the button,
104

104

00:06:26.099  -->  00:06:28.266
but we hit the icon, okay?
105

105

00:06:29.573  -->  00:06:31.551
So let's get back at our HTML
106

106

00:06:31.551  -->  00:06:34.384
and take a look at this i element.
107

107

00:06:36.155  -->  00:06:37.721
Okay, so this one here.
108

108

00:06:37.721  -->  00:06:39.712
So when we click on the button,
109

109

00:06:39.712  -->  00:06:42.712
we actually click on this i element.
110

110

00:06:44.144  -->  00:06:47.486
Now when we hit the button, it is not just a button
111

111

00:06:47.486  -->  00:06:49.518
that we want to delete, right,
112

112

00:06:49.518  -->  00:06:52.721
so we actually want to delete all of this here, right,
113

113

00:06:52.721  -->  00:06:56.952
because all of this is the item on the user interface,
114

114

00:06:56.952  -->  00:07:00.040
and each of these items is identified
115

115

00:07:00.040  -->  00:07:03.479
by their unique ID name, which is this one here,
116

116

00:07:03.479  -->  00:07:07.503
so actually we are not interested just in this element here,
117

117

00:07:07.503  -->  00:07:10.898
which is the target one, but we're actually interested
118

118

00:07:10.898  -->  00:07:14.524
in this element here, so in this parent element.
119

119

00:07:14.524  -->  00:07:17.630
So again, this element here that we click
120

120

00:07:17.630  -->  00:07:20.393
is not actually the one that we're interested in,
121

121

00:07:20.393  -->  00:07:24.400
but it's this parent element, so this entire div element
122

122

00:07:24.400  -->  00:07:26.397
that we're actually interested in,
123

123

00:07:26.397  -->  00:07:29.173
and that we wanna have access to.
124

124

00:07:29.173  -->  00:07:32.050
So we need to move up in the DOM from here,
125

125

00:07:32.050  -->  00:07:35.414
and that is something called DOM traversing.
126

126

00:07:35.414  -->  00:07:38.750
So we're gonna traverse the DOM.
127

127

00:07:38.750  -->  00:07:40.787
So let's see how we can do that.
128

128

00:07:40.787  -->  00:07:44.037
So back in our app file, we can now say
129

129

00:07:45.338  -->  00:07:49.115
that we want the parent node of this target.
130

130

00:07:49.115  -->  00:07:51.718
So this target property here, what it returns
131

131

00:07:51.718  -->  00:07:54.689
is an HTML node in the DOM.
132

132

00:07:54.689  -->  00:07:56.783
So when we wanna move up from that,
133

133

00:07:56.783  -->  00:07:59.700
we can simply say parentNode, okay?
134

134

00:08:02.845  -->  00:08:07.083
So let's see what happens if we now hit the button.
135

135

00:08:07.083  -->  00:08:10.583
So reload, and now I need to add it again,
136

136

00:08:11.927  -->  00:08:14.449
and just something random here, okay,
137

137

00:08:14.449  -->  00:08:18.937
and now I'm hitting it and now we see button,
138

138

00:08:18.937  -->  00:08:22.747
so it's no longer the i element, but the button.
139

139

00:08:22.747  -->  00:08:26.224
So let's go back, and what this means is that
140

140

00:08:26.224  -->  00:08:30.313
we actually moved up to the parent element, right?
141

141

00:08:30.313  -->  00:08:33.480
So let's make this more visible, okay.
142

142

00:08:35.184  -->  00:08:38.420
So you see the button element here is
143

143

00:08:38.420  -->  00:08:42.062
the parent element of the i, right?
144

144

00:08:42.062  -->  00:08:44.606
Now we don't wanna just move up to the button,
145

145

00:08:44.606  -->  00:08:48.073
but in fact we wanna move up all the way to the income,
146

146

00:08:48.073  -->  00:08:50.576
so we don't need one parent node,
147

147

00:08:50.576  -->  00:08:53.243
but we need two, three and four.
148

148

00:08:54.902  -->  00:08:56.877
So if you wanna move all the way up here,
149

149

00:08:56.877  -->  00:09:00.837
we need to use the parent node property for times,
150

150

00:09:00.837  -->  00:09:03.170
and we can actually do that.
151

151

00:09:04.061  -->  00:09:07.978
So like this, parentNode.parentNode.parentNode.
152

152

00:09:15.333  -->  00:09:17.507
So this actually looks a bit strange,
153

153

00:09:17.507  -->  00:09:20.840
but it's gonna work, I hope so at least!
154

154

00:09:22.162  -->  00:09:25.540
So test, something, and now I'm hitting
155

155

00:09:25.540  -->  00:09:29.126
the button again, and here we are.
156

156

00:09:29.126  -->  00:09:32.113
So this is now the div element that we're actually
157

157

00:09:32.113  -->  00:09:35.931
interested in, and in fact, what we're interested in
158

158

00:09:35.931  -->  00:09:37.881
is the id here, because again,
159

159

00:09:37.881  -->  00:09:42.048
this is the unique identifier let's say, of this item.
160

160

00:09:43.254  -->  00:09:46.442
So we can simply use the id property here,
161

161

00:09:46.442  -->  00:09:49.692
so that's it, with this we have the id.
162

162

00:09:50.806  -->  00:09:54.973
So just to prove it to you, here it is, so income-0.
163

163

00:10:00.106  -->  00:10:04.273
If we put another one, then it's gonna be income-1, okay?
164

164

00:10:08.077  -->  00:10:10.180
So each one has this unique id,
165

165

00:10:10.180  -->  00:10:12.146
and this is gonna be very important,
166

166

00:10:12.146  -->  00:10:15.421
and we're gonna talk about that in a second.
167

167

00:10:15.421  -->  00:10:18.161
So now instead of logging it, let's save it
168

168

00:10:18.161  -->  00:10:20.994
to a variable called itemID, okay?
169

169

00:10:24.418  -->  00:10:26.897
Let's remove this one here, and then also
170

170

00:10:26.897  -->  00:10:29.897
declare it as a variable, so itemID.
171

171

00:10:32.821  -->  00:10:35.508
Now this is probably not the cleanest solution here,
172

172

00:10:35.508  -->  00:10:38.605
using all of these parentNodes, because with this
173

173

00:10:38.605  -->  00:10:42.193
we are heavily relying on the DOM structure, right,
174

174

00:10:42.193  -->  00:10:46.300
so basically we hard-coded the DOM structure here,
175

175

00:10:46.300  -->  00:10:47.980
but let's just leave it like this
176

176

00:10:47.980  -->  00:10:52.147
because we in fact also hard-coded the HTML in here, right,
177

177

00:10:52.999  -->  00:10:56.398
so the HTML that generates all of these items,
178

178

00:10:56.398  -->  00:10:59.432
so it's not a big deal, it's not a big problem
179

179

00:10:59.432  -->  00:11:02.450
if we also hard-code the traversing of
180

180

00:11:02.450  -->  00:11:06.243
that very DOM structure here as well.
181

181

00:11:06.243  -->  00:11:10.726
Now what happens if we click somewhere else on the page?
182

182

00:11:10.726  -->  00:11:14.513
For example, if we click here, then there is no ID, right?
183

183

00:11:14.513  -->  00:11:17.358
Or here, or here, or whatever,
184

184

00:11:17.358  -->  00:11:20.701
anywhere we click there's no id,
185

185

00:11:20.701  -->  00:11:23.148
and that's because there are no other ids
186

186

00:11:23.148  -->  00:11:27.253
in the whole HTML document, and so we can now use this fact
187

187

00:11:27.253  -->  00:11:30.358
to say that we only want stuff to happen later
188

188

00:11:30.358  -->  00:11:33.783
if the id is actually defined, okay?
189

189

00:11:33.783  -->  00:11:37.616
So now we can say if(itemID),
190

190

00:11:40.663  -->  00:11:44.137
then we want something to happen, okay?
191

191

00:11:44.137  -->  00:11:46.870
And we already did this before, but again,
192

192

00:11:46.870  -->  00:11:50.183
this will work basically because this isn't going
193

193

00:11:50.183  -->  00:11:54.546
to be coerced or converted to true if this exists,
194

194

00:11:54.546  -->  00:11:58.208
and if it doesn't, then it will be coerced to false.
195

195

00:11:58.208  -->  00:12:02.375
All right, now what are we actually gonna do with that ID?
196

196

00:12:03.322  -->  00:12:06.850
So again, let's take a look at how it is.
197

197

00:12:06.850  -->  00:12:09.675
So it basically contains both the type,
198

198

00:12:09.675  -->  00:12:13.692
so income or expense, and the unique ID of this item
199

199

00:12:13.692  -->  00:12:16.297
in our data structure, right, so 0, 1,
200

200

00:12:16.297  -->  00:12:19.191
and so on and so forth, and that is because
201

201

00:12:19.191  -->  00:12:22.148
this is exactly the way that we coded it.
202

202

00:12:22.148  -->  00:12:25.706
So let's see it back here, so in this method here
203

203

00:12:25.706  -->  00:12:28.070
where we actually add the list items,
204

204

00:12:28.070  -->  00:12:31.557
we retrieve the ID from the new object, right,
205

205

00:12:31.557  -->  00:12:33.975
and then print it to our webpage.
206

206

00:12:33.975  -->  00:12:37.514
So in case of an income, it's income and then the ID,
207

207

00:12:37.514  -->  00:12:40.367
and if it's an expense, it's expense ID,
208

208

00:12:40.367  -->  00:12:44.534
and actually let me change it here from income to inc,
209

209

00:12:45.613  -->  00:12:49.611
and here to exp, so that we have always
210

210

00:12:49.611  -->  00:12:52.688
the same type designation throughout our app,
211

211

00:12:52.688  -->  00:12:56.621
and not sometimes inc and sometimes income, right,
212

212

00:12:56.621  -->  00:12:59.052
so that wouldn't be so consistent,
213

213

00:12:59.052  -->  00:13:01.778
and this way it's much better.
214

214

00:13:01.778  -->  00:13:04.831
So right now this ID here encodes both
215

215

00:13:04.831  -->  00:13:08.449
the item type and the item ID, right?
216

216

00:13:08.449  -->  00:13:10.589
So this will be extremely useful
217

217

00:13:10.589  -->  00:13:13.614
because later we can then use this data to tell
218

218

00:13:13.614  -->  00:13:16.874
the budget controller which item it should delete
219

219

00:13:16.874  -->  00:13:19.306
when we hit the button, and also which item
220

220

00:13:19.306  -->  00:13:22.266
should be deleted from the user interface.
221

221

00:13:22.266  -->  00:13:24.933
So let's use this ID here, okay?
222

222

00:13:27.154  -->  00:13:29.904
So back here, we now use this ID.
223

223

00:13:30.930  -->  00:13:33.234
Now the format of the ID, as we saw,
224

224

00:13:33.234  -->  00:13:36.901
is something like inc-1, or whatever number,
225

225

00:13:38.085  -->  00:13:41.195
so we now need a way to split this up,
226

226

00:13:41.195  -->  00:13:43.909
and thankfully there is a very handy method
227

227

00:13:43.909  -->  00:13:47.524
in JavaScript that all strings have access to,
228

228

00:13:47.524  -->  00:13:49.574
and that's called "split."
229

229

00:13:49.574  -->  00:13:52.264
Now you may be wondering why I said
230

230

00:13:52.264  -->  00:13:55.016
that all the strings have access to this method,
231

231

00:13:55.016  -->  00:13:57.538
because we always said that a string is a primitive,
232

232

00:13:57.538  -->  00:14:00.096
and not an object, right?
233

233

00:14:00.096  -->  00:14:02.823
Now the thing is that as soon as we call
234

234

00:14:02.823  -->  00:14:05.209
one of these methods on a string,
235

235

00:14:05.209  -->  00:14:08.572
then JavaScript automatically puts a wrapper around
236

236

00:14:08.572  -->  00:14:12.342
the string and converts it from a primitive to an object,
237

237

00:14:12.342  -->  00:14:16.836
and then this object has access to a lot of string methods,
238

238

00:14:16.836  -->  00:14:19.143
and the same thing actually happens to numbers.
239

239

00:14:19.143  -->  00:14:22.775
So numbers also have methods because JavaScript simply
240

240

00:14:22.775  -->  00:14:25.410
transforms them from a primitive to an object,
241

241

00:14:25.410  -->  00:14:28.387
so that we can use methods on them.
242

242

00:14:28.387  -->  00:14:31.306
So we will now use the "split" method.
243

243

00:14:31.306  -->  00:14:35.389
So let's say splitID, should be the itemID.split,
244

244

00:14:40.487  -->  00:14:43.132
so it's the usual method, and then we say
245

245

00:14:43.132  -->  00:14:47.049
that the split string should be the dash, okay,
246

246

00:14:49.247  -->  00:14:50.884
and I will show you this in a second.
247

247

00:14:50.884  -->  00:14:54.717
Let me just declare it here, so splitID, okay,
248

248

00:14:56.505  -->  00:14:58.518
so let's actually test this out in the console
249

249

00:14:58.518  -->  00:15:01.255
to see what the result will be.
250

250

00:15:01.255  -->  00:15:03.920
So imagine that we use this string,
251

251

00:15:03.920  -->  00:15:08.087
var s is inc-1, and then we say s.split like we did before,
252

252

00:15:19.812  -->  00:15:22.817
and so what this returns is an array
253

253

00:15:22.817  -->  00:15:25.720
where in the first element is inc, so this part
254

254

00:15:25.720  -->  00:15:28.988
that comes before our split string here,
255

255

00:15:28.988  -->  00:15:33.952
and then the second element is what comes after that, okay?
256

256

00:15:33.952  -->  00:15:36.920
And s could even be bigger than that,
257

257

00:15:36.920  -->  00:15:40.087
so I imagine it would be inc-1-type-3,
258

258

00:15:41.235  -->  00:15:42.938
whatever, it doesn't really matter,
259

259

00:15:42.938  -->  00:15:47.024
just to show it to you, and then it would return an array
260

260

00:15:47.024  -->  00:15:49.768
of all of these elements that come after
261

261

00:15:49.768  -->  00:15:52.031
and before these split strings.
262

262

00:15:52.031  -->  00:15:55.440
So basically this allows us to break up a string
263

263

00:15:55.440  -->  00:16:00.342
into different parts, and removing then the split string.
264

264

00:16:00.342  -->  00:16:04.509
So now we can simply say that the type is splitID[0] right,
265

265

00:16:12.446  -->  00:16:15.415
because remember, this is the array that we just saw,
266

266

00:16:15.415  -->  00:16:18.545
and the first element is the type, right,
267

267

00:16:18.545  -->  00:16:20.677
because it's this inc.
268

268

00:16:20.677  -->  00:16:23.680
So income or expense are the types,
269

269

00:16:23.680  -->  00:16:26.485
and I also need to declare this of course,
270

270

00:16:26.485  -->  00:16:30.068
so type, and then we're also gonna have ID.
271

271

00:16:31.132  -->  00:16:34.799
So that's the next one, so ID is the splitID
272

272

00:16:36.489  -->  00:16:40.656
and element number 1, so the second element in fact.
273

273

00:16:41.897  -->  00:16:44.240
All right, and now we have all the ingredients
274

274

00:16:44.240  -->  00:16:47.120
to be able to delete the item from both
275

275

00:16:47.120  -->  00:16:49.802
the user interface and our data model,
276

276

00:16:49.802  -->  00:16:52.417
so the budget controller.
277

277

00:16:52.417  -->  00:16:55.546
And so let's look what we had on our to-do list
278

278

00:16:55.546  -->  00:16:58.296
for this part of the application.
279

279

00:16:59.579  -->  00:17:02.662
So first we wanted to delete the item
280

280

00:17:06.571  -->  00:17:09.821
from the data structure, then we delete
281

281

00:17:13.936  -->  00:17:16.686
the item from the user interface,
282

282

00:17:21.089  -->  00:17:24.672
and then we update and show the new totals,
283

283

00:17:27.183  -->  00:17:30.391
or the new budget actually, because that's
284

284

00:17:30.391  -->  00:17:32.612
the way we've been calling it, right?
285

285

00:17:32.612  -->  00:17:36.092
Because of course as soon as we remove an item from
286

286

00:17:36.092  -->  00:17:38.152
the expense or from the incomes,
287

287

00:17:38.152  -->  00:17:41.818
then all of the budget has to be updated.
288

288

00:17:41.818  -->  00:17:43.942
So in the next lectures, we're going to create
289

289

00:17:43.942  -->  00:17:47.653
a function in the budget controller for this one,
290

290

00:17:47.653  -->  00:17:49.926
so for deleting from the data structure,
291

291

00:17:49.926  -->  00:17:51.720
and then a method for deleting
292

292

00:17:51.720  -->  00:17:54.001
the item from the user interface.
293

293

00:17:54.001  -->  00:17:58.013
And then finally we wanna update and show the new budget.
294

294

00:17:58.013  -->  00:18:01.469
So just to recap, what we did in this lecture,
295

295

00:18:01.469  -->  00:18:05.182
we first added an EventListener here to the container,
296

296

00:18:05.182  -->  00:18:07.233
which is the first element that all of
297

297

00:18:07.233  -->  00:18:10.417
the income and expense items have in common,
298

298

00:18:10.417  -->  00:18:13.480
so this is where we set our EventListener,
299

299

00:18:13.480  -->  00:18:17.211
and we did it so because we want to do event delegation,
300

300

00:18:17.211  -->  00:18:20.721
which means that instead of adding one EventListener
301

301

00:18:20.721  -->  00:18:23.514
to all of the elements that we're interested in,
302

302

00:18:23.514  -->  00:18:26.711
like all the incomes and all the expense items,
303

303

00:18:26.711  -->  00:18:28.727
we add them to the container, and then let
304

304

00:18:28.727  -->  00:18:31.145
the event bubbling up.
305

305

00:18:31.145  -->  00:18:32.873
So the function that we then attached to
306

306

00:18:32.873  -->  00:18:36.303
the container is the ctrlDeleteItem,
307

307

00:18:36.303  -->  00:18:38.874
which is this one here, okay?
308

308

00:18:38.874  -->  00:18:42.763
And then from here we were at the target element, okay,
309

309

00:18:42.763  -->  00:18:45.186
so using the event.target property,
310

310

00:18:45.186  -->  00:18:48.162
which is exactly the element where the click happened,
311

311

00:18:48.162  -->  00:18:50.506
so where the event was fired.
312

312

00:18:50.506  -->  00:18:52.478
And we then moved up in the DOM,
313

313

00:18:52.478  -->  00:18:54.592
so we traversed the DOM all the way up
314

314

00:18:54.592  -->  00:18:57.669
to the element that we're actually interested in,
315

315

00:18:57.669  -->  00:19:00.785
and then, in here we retrieved the ID from it,
316

316

00:19:00.785  -->  00:19:03.419
and stored it here in this variable,
317

317

00:19:03.419  -->  00:19:05.986
and this variable is gonna be very useful for us
318

318

00:19:05.986  -->  00:19:09.835
because we know that in here is encoded the item type,
319

319

00:19:09.835  -->  00:19:14.044
so if it's an expense or an income, and also the unique ID.
320

320

00:19:14.044  -->  00:19:18.098
So we then isolated each of these into a different variable
321

321

00:19:18.098  -->  00:19:21.504
using the split method for this string.
322

322

00:19:21.504  -->  00:19:24.316
And so now the stage is set so that we can delete
323

323

00:19:24.316  -->  00:19:26.309
the item from the data structure,
324

324

00:19:26.309  -->  00:19:30.476
and from the user interface over the next lectures.
