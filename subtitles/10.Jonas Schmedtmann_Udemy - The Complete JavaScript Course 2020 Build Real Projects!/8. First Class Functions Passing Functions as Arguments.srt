1
1

00:00:01,481  -->  00:00:03,410
<v ->Now that we have learned a lot of new stuff</v>
2

2

00:00:03,410  -->  00:00:07,019
about objects, let's switch to another topic.
3

3

00:00:07,019  -->  00:00:08,000
Functions.
4

4

00:00:08,000  -->  00:00:11,050
Actually, it's not a completely unrelated topic,
5

5

00:00:11,050  -->  00:00:15,217
because we already know that functions are also objects.
6

6

00:00:17,270  -->  00:00:20,149
That being said, it makes sense that with functions
7

7

00:00:20,149  -->  00:00:24,669
we can do the same things that we can do with objects.
8

8

00:00:24,669  -->  00:00:28,210
So let's see some facts about functions.
9

9

00:00:28,210  -->  00:00:30,649
First, as we already know,
10

10

00:00:30,649  -->  00:00:31,919
a function is an instance
11

11

00:00:31,919  -->  00:00:33,502
of the object type,
12

12

00:00:34,499  -->  00:00:36,816
and because of that, a function behaves
13

13

00:00:36,816  -->  00:00:39,249
like any other object.
14

14

00:00:39,249  -->  00:00:41,590
We can store functions in a variable,
15

15

00:00:41,590  -->  00:00:43,419
and we already know that
16

16

00:00:43,419  -->  00:00:45,900
we can pass a function
17

17

00:00:45,900  -->  00:00:49,589
as an argument to another function.
18

18

00:00:49,589  -->  00:00:53,670
We can also return a function from a function.
19

19

00:00:53,670  -->  00:00:56,398
Because of all that, we say that in JavaScript
20

20

00:00:56,398  -->  00:00:58,898
we have first class functions.
21

21

00:01:03,469  -->  00:01:05,058
So let's see a real-world example
22

22

00:01:05,058  -->  00:01:07,559
of how functions can accept other functions
23

23

00:01:07,559  -->  00:01:09,309
as arguments.
24

24

00:01:09,309  -->  00:01:12,348
Actually, we already did this.
25

25

00:01:12,348  -->  00:01:14,269
Do you remember the picking project
26

26

00:01:14,269  -->  00:01:16,667
that we coded before?
27

27

00:01:16,667  -->  00:01:20,457
We set up some event listeners back then, right?
28

28

00:01:20,457  -->  00:01:23,029
We passed a function into each one of them,
29

29

00:01:23,029  -->  00:01:25,868
in order to handle each event.
30

30

00:01:25,868  -->  00:01:29,897
Back then we already used first-class functions,
31

31

00:01:29,897  -->  00:01:32,619
but we didn't just know it.
32

32

00:01:32,619  -->  00:01:34,535
All right, so let's now imagine
33

33

00:01:34,535  -->  00:01:36,288
that we have a couple of arrays
34

34

00:01:36,288  -->  00:01:38,528
filled with values and that we wanted
35

35

00:01:38,528  -->  00:01:41,289
to do some calculations with them,
36

36

00:01:41,289  -->  00:01:42,937
and a birth year array
37

37

00:01:42,937  -->  00:01:45,158
could be a good example of this.
38

38

00:01:45,158  -->  00:01:48,741
Let's write an array with some years in it.
39

39

00:01:51,521  -->  00:01:52,354
So, 1990,
40

40

00:01:53,204  -->  00:01:54,037
1965,
41

41

00:01:56,236  -->  00:01:57,069
1937.
42

42

00:01:58,355  -->  00:02:00,157
I'm just going to write five numbers here,
43

43

00:02:00,157  -->  00:02:01,986
so five years.
44

44

00:02:01,986  -->  00:02:03,236
2005, and 1998.
45

45

00:02:04,766  -->  00:02:06,849
All right, so five years.
46

46

00:02:07,846  -->  00:02:10,116
Remember we want to do some calculations
47

47

00:02:10,116  -->  00:02:13,225
with these values, or based on these values.
48

48

00:02:13,225  -->  00:02:15,704
Now, we could do a huge function
49

49

00:02:15,704  -->  00:02:17,967
which does all of these calculations
50

50

00:02:17,967  -->  00:02:20,223
that we want to perform at the same time,
51

51

00:02:20,223  -->  00:02:23,383
it then resolves all the result arrays
52

52

00:02:23,383  -->  00:02:24,875
at the same time,
53

53

00:02:24,875  -->  00:02:26,463
but that would not be
54

54

00:02:26,463  -->  00:02:28,715
really good practice because instead,
55

55

00:02:28,715  -->  00:02:32,137
we can write a function that will receive an array
56

56

00:02:32,137  -->  00:02:34,456
and return a new result array,
57

57

00:02:34,456  -->  00:02:36,433
and do the calculations based
58

58

00:02:36,433  -->  00:02:39,245
on a function that we pass into
59

59

00:02:39,245  -->  00:02:41,245
the calculation function.
60

60

00:02:41,245  -->  00:02:44,205
So, let's write that calculation function
61

61

00:02:44,205  -->  00:02:46,765
and call it arrayCalc.
62

62

00:02:46,765  -->  00:02:48,682
So, function arrayCalc,
63

63

00:02:50,215  -->  00:02:52,227
and what we're gonna pass
64

64

00:02:52,227  -->  00:02:55,983
in here is the array, which will be, for example,
65

65

00:02:55,983  -->  00:02:58,848
the years array, and then we will pass a function
66

66

00:02:58,848  -->  00:03:02,537
which does the actual calculations.
67

67

00:03:02,537  -->  00:03:05,956
So, let's see what this function does.
68

68

00:03:05,956  -->  00:03:09,067
In here, we will simply loop over the array,
69

69

00:03:09,067  -->  00:03:10,734
and return a result.
70

70

00:03:11,767  -->  00:03:14,776
The first thing is to create a new, empty array
71

71

00:03:14,776  -->  00:03:17,386
which will be the one that we're gonna fill
72

72

00:03:17,386  -->  00:03:19,155
and then return,
73

73

00:03:19,155  -->  00:03:21,322
so var arr for the result,
74

74

00:03:22,847  -->  00:03:26,188
so I'm just going to say Res here,
75

75

00:03:26,188  -->  00:03:28,815
and it's an empty array.
76

76

00:03:28,815  -->  00:03:30,367
All right, and do you remember
77

77

00:03:30,367  -->  00:03:32,496
how we loop over arrays?
78

78

00:03:32,496  -->  00:03:34,298
We've always been doing it
79

79

00:03:34,298  -->  00:03:36,329
using the "for" loop, right?
80

80

00:03:36,329  -->  00:03:38,736
So, let's continue doing it this way.
81

81

00:03:38,736  -->  00:03:43,278
We set up a new variable, i, which is our counter.
82

82

00:03:43,278  -->  00:03:45,726
Set it to zero and then loop,
83

83

00:03:45,726  -->  00:03:47,643
as long as i is smaller
84

84

00:03:48,778  -->  00:03:53,228
than the length of the array that we input, right?
85

85

00:03:53,228  -->  00:03:55,408
By now you already know
86

86

00:03:55,408  -->  00:03:58,519
how this length property works, right?
87

87

00:03:58,519  -->  00:04:00,368
Then after each loop,
88

88

00:04:00,368  -->  00:04:02,868
we increment our counter by 1.
89

89

00:04:04,967  -->  00:04:07,848
Okay, down here, inside of the loop,
90

90

00:04:07,848  -->  00:04:09,848
we will then use the function
91

91

00:04:09,848  -->  00:04:12,027
that we can pass into this function.
92

92

00:04:12,027  -->  00:04:16,194
We will push something into our result array here,
93

93

00:04:17,968  -->  00:04:19,814
we can do it like this,
94

94

00:04:19,814  -->  00:04:22,214
we use the push function,
95

95

00:04:22,214  -->  00:04:25,414
or the push method, to be correct,
96

96

00:04:25,414  -->  00:04:28,772
which, as you remember, inserts an element
97

97

00:04:28,772  -->  00:04:30,689
at the end of an array.
98

98

00:04:32,177  -->  00:04:34,377
So the big question here is,
99

99

00:04:34,377  -->  00:04:37,378
"What are we actually going to push into the array?"
100

100

00:04:37,378  -->  00:04:39,877
The answer is that it will be the result
101

101

00:04:39,877  -->  00:04:42,044
of calling or fn function,
102

102

00:04:43,046  -->  00:04:44,526
so fn,
103

103

00:04:44,526  -->  00:04:47,086
and then we pass the current element of
104

104

00:04:47,086  -->  00:04:50,003
our input array into this function.
105

105

00:04:50,976  -->  00:04:52,413
Array i,
106

106

00:04:52,413  -->  00:04:53,246
okay?
107

107

00:04:54,246  -->  00:04:57,452
This will make a lot more sense after you see
108

108

00:04:57,452  -->  00:05:00,483
one of the functions that we're going to program next,
109

109

00:05:00,483  -->  00:05:04,503
so I will explain it a little bit better by then.
110

110

00:05:04,503  -->  00:05:07,213
Now, all we have to is to actually return
111

111

00:05:07,213  -->  00:05:08,934
this result array.
112

112

00:05:08,934  -->  00:05:11,434
So, return, of course, arrRes.
113

113

00:05:14,235  -->  00:05:16,603
Let's now quickly write one of the functions
114

114

00:05:16,603  -->  00:05:18,332
that we can then later use
115

115

00:05:18,332  -->  00:05:20,731
here as our fn function.
116

116

00:05:20,731  -->  00:05:23,215
We will write a couple of simple functions
117

117

00:05:23,215  -->  00:05:25,603
that do only one single task,
118

118

00:05:25,603  -->  00:05:28,045
and these functions will actually be called
119

119

00:05:28,045  -->  00:05:30,074
"callback" functions,
120

120

00:05:30,074  -->  00:05:32,013
because they are functions that we pass
121

121

00:05:32,013  -->  00:05:34,563
into functions that will then call them later.
122

122

00:05:34,563  -->  00:05:37,173
In this case, our callback function, fn,
123

123

00:05:37,173  -->  00:05:40,595
will be called here when we want to push
124

124

00:05:40,595  -->  00:05:43,333
a new element into our array.
125

125

00:05:43,333  -->  00:05:45,764
Let's now write one of these functions,
126

126

00:05:45,764  -->  00:05:50,453
and it will be our well-known calculate age function.
127

127

00:05:50,453  -->  00:05:54,203
Let's do it like this, function calculateAge.
128

128

00:05:58,304  -->  00:06:01,685
At this time I'm simply gonna call it "el",
129

129

00:06:01,685  -->  00:06:05,685
which stands for element, and we're gonna return
130

130

00:06:07,374  -->  00:06:09,291
2016 minus the element.
131

131

00:06:11,594  -->  00:06:15,003
This was usually called our year-of-birth parameter,
132

132

00:06:15,003  -->  00:06:19,463
but this time we're simply gonna call it "el".
133

133

00:06:19,463  -->  00:06:21,254
This is one of these simple functions.
134

134

00:06:21,254  -->  00:06:23,603
You see, it only has one task.
135

135

00:06:23,603  -->  00:06:26,423
It receives this "el" argument,
136

136

00:06:26,423  -->  00:06:29,283
and then returns the age based on that argument.
137

137

00:06:29,283  -->  00:06:31,042
So, really simple.
138

138

00:06:31,042  -->  00:06:35,604
Now, our arrayCalc function can make a lot more sense.
139

139

00:06:35,604  -->  00:06:38,762
Let's see what happens here.
140

140

00:06:38,762  -->  00:06:41,441
Again, we have our empty array here,
141

141

00:06:41,441  -->  00:06:44,123
and then we start looping through the array
142

142

00:06:44,123  -->  00:06:46,453
that we input, which is, for example,
143

143

00:06:46,453  -->  00:06:49,184
this array here with all of these birth years.
144

144

00:06:49,184  -->  00:06:52,064
When we're done, hit this line in code here,
145

145

00:06:52,064  -->  00:06:55,094
what's going to happen is that our callback function,
146

146

00:06:55,094  -->  00:06:57,445
fn, will be called with the i element
147

147

00:06:57,445  -->  00:06:59,323
of the input array.
148

148

00:06:59,323  -->  00:07:01,845
Imagine in the first loop i is zero.
149

149

00:07:01,845  -->  00:07:04,524
So with this arr[i], we're going to retrieve
150

150

00:07:04,524  -->  00:07:08,535
the first value of the years array, so 1990,
151

151

00:07:08,535  -->  00:07:13,144
and then we'll push this 1990 into the fn function,
152

152

00:07:13,144  -->  00:07:15,977
which will be calculateAge, right?
153

153

00:07:17,083  -->  00:07:20,525
Then this function does it's work and it returns
154

154

00:07:20,525  -->  00:07:22,942
2016 minus 1990 in this case,
155

155

00:07:24,512  -->  00:07:26,583
and then the result will simply get pushed
156

156

00:07:26,583  -->  00:07:29,163
into the array, and after this is completed
157

157

00:07:29,163  -->  00:07:32,966
five times, then the result will be returned.
158

158

00:07:32,966  -->  00:07:35,134
Let's do some practice and actually call
159

159

00:07:35,134  -->  00:07:37,824
the arrayCalc function.
160

160

00:07:37,824  -->  00:07:38,907
So, arrayCalc
161

161

00:07:39,846  -->  00:07:41,013
with our years
162

162

00:07:44,246  -->  00:07:46,254
and calculateAge
163

163

00:07:46,254  -->  00:07:48,266
as the callback function.
164

164

00:07:48,266  -->  00:07:51,311
Again, I'm not going to call the function right here,
165

165

00:07:51,311  -->  00:07:54,921
because this way I would need the parentheses,
166

166

00:07:54,921  -->  00:07:58,555
like this, but that's not what we want.
167

167

00:07:58,555  -->  00:08:00,625
We don't want to call a function here,
168

168

00:08:00,625  -->  00:08:04,422
we want it to be called later by the arrayCalc function.
169

169

00:08:04,422  -->  00:08:06,685
That's why it's called a callback function,
170

170

00:08:06,685  -->  00:08:08,815
because it's called later.
171

171

00:08:08,815  -->  00:08:12,235
We simply pass this variable which is this function
172

172

00:08:12,235  -->  00:08:15,355
right into this other function.
173

173

00:08:15,355  -->  00:08:18,862
Now we just have to store this into a variable,
174

174

00:08:18,862  -->  00:08:22,045
because the other way we cannot really see it.
175

175

00:08:22,045  -->  00:08:24,184
I'm going to call it "ages",
176

176

00:08:24,184  -->  00:08:28,101
then we just need to put the correct name here,
177

177

00:08:29,574  -->  00:08:32,741
and then let's console.log this array.
178

178

00:08:34,685  -->  00:08:35,518
Ages.
179

179

00:08:36,923  -->  00:08:38,923
Let's see if this works.
180

180

00:08:39,903  -->  00:08:43,070
We have a small bug here, in line 109.
181

181

00:08:44,461  -->  00:08:45,665
You see?
182

182

00:08:45,665  -->  00:08:48,498
Line 109 and here I see the error,
183

183

00:08:49,633  -->  00:08:53,113
it's not a comma, it's a semi-colon.
184

184

00:08:53,113  -->  00:08:55,203
Let's try it again.
185

185

00:08:55,203  -->  00:08:59,484
Now we have our ages, so this actually worked.
186

186

00:08:59,484  -->  00:09:03,925
Our arrayCalc function looped through the years array
187

187

00:09:03,925  -->  00:09:08,822
five times, and five times the calculateAge function here
188

188

00:09:08,822  -->  00:09:12,905
was called and then pushed the result right into the array
189

189

00:09:12,905  -->  00:09:14,644
that we then returned.
190

190

00:09:14,644  -->  00:09:19,103
Again, we can imagine this function as a generic machine
191

191

00:09:19,103  -->  00:09:20,934
that loops through an array
192

192

00:09:20,934  -->  00:09:23,113
and we can tell that machine what to do
193

193

00:09:23,113  -->  00:09:25,186
with each element in the array.
194

194

00:09:25,186  -->  00:09:27,755
That's what we do with our fn parameter,
195

195

00:09:27,755  -->  00:09:29,714
which is to callback.
196

196

00:09:29,714  -->  00:09:32,493
Let's now write another callback function,
197

197

00:09:32,493  -->  00:09:35,075
so that you can really see how powerful
198

198

00:09:35,075  -->  00:09:36,742
this pattern can be.
199

199

00:09:37,876  -->  00:09:40,414
Let's now write a function which can determine
200

200

00:09:40,414  -->  00:09:42,833
if someone is of full age.
201

201

00:09:42,833  -->  00:09:43,916
So, function,
202

202

00:09:46,277  -->  00:09:47,110
isfullAge,
203

203

00:09:49,516  -->  00:09:50,837
and again,
204

204

00:09:50,837  -->  00:09:53,183
we're going to receive an element simply here.
205

205

00:09:53,183  -->  00:09:56,904
We just use a very generic parameter name here.
206

206

00:09:56,904  -->  00:09:59,547
This time we're simply going to return
207

207

00:09:59,547  -->  00:10:03,547
if the element is greater or equal to 18, right?
208

208

00:10:04,435  -->  00:10:08,107
We simply want to return a true or false value,
209

209

00:10:08,107  -->  00:10:12,217
and that's what this comparison operator here returns.
210

210

00:10:12,217  -->  00:10:15,295
So if the element is greater or equal to 18,
211

211

00:10:15,295  -->  00:10:18,666
it will be true, otherwise it will be false.
212

212

00:10:18,666  -->  00:10:21,946
Let's test this one as well, down here,
213

213

00:10:21,946  -->  00:10:25,279
and this one I'm going to call fullAges.
214

214

00:10:29,368  -->  00:10:32,654
Then again we use our generic function,
215

215

00:10:32,654  -->  00:10:34,856
which I like to think of as a machine,
216

216

00:10:34,856  -->  00:10:38,453
that then we can use as an input the ages array,
217

217

00:10:38,453  -->  00:10:40,046
that we calculated before.
218

218

00:10:40,046  -->  00:10:44,606
Then this time we pass the isFullAge function
219

219

00:10:44,606  -->  00:10:47,276
into our generic calculation function.
220

220

00:10:47,276  -->  00:10:51,206
Now I want to log the fullAges as well.
221

221

00:10:51,206  -->  00:10:53,039
Console.log, fullAges.
222

222

00:10:56,068  -->  00:10:57,318
Let's see this.
223

223

00:10:58,535  -->  00:11:00,134
All right!
224

224

00:11:00,134  -->  00:11:01,133
This makes sense.
225

225

00:11:01,133  -->  00:11:03,645
The only one here that's actually younger than 18
226

226

00:11:03,645  -->  00:11:06,737
is this one, and so this one is the only one
227

227

00:11:06,737  -->  00:11:07,654
with false.
228

228

00:11:08,847  -->  00:11:10,093
Right?
229

229

00:11:10,093  -->  00:11:12,215
Everything is working just fine.
230

230

00:11:12,215  -->  00:11:14,777
As a third example, I have a really cool one,
231

231

00:11:14,777  -->  00:11:17,575
which is the maximum heart rate,
232

232

00:11:17,575  -->  00:11:20,515
and that is the highest rate measured in beats per minute
233

233

00:11:20,515  -->  00:11:23,636
that a person can reach when exercising.
234

234

00:11:23,636  -->  00:11:26,236
It's calculated based on the age of the person,
235

235

00:11:26,236  -->  00:11:28,714
so it's a great fit for this example here.
236

236

00:11:28,714  -->  00:11:31,507
I thought this would be a really cool use case
237

237

00:11:31,507  -->  00:11:33,847
for people who like to work out.
238

238

00:11:33,847  -->  00:11:38,287
Let's see this formula and let's see how to use this.
239

239

00:11:38,287  -->  00:11:40,787
So, function and maxHeartRate.
240

240

00:11:43,663  -->  00:11:47,361
Again, we're using simply an element as the input
241

241

00:11:47,361  -->  00:11:50,445
and the formula is actually really simple,
242

242

00:11:50,445  -->  00:11:53,778
so return 206.9 minus 0.67 x the age.
243

243

00:12:02,932  -->  00:12:07,212
The age will be the element, so we will always call
244

244

00:12:07,212  -->  00:12:11,379
our arrayCalc function here with the age as the input,
245

245

00:12:12,924  -->  00:12:15,673
so not with the years, but with the age.
246

246

00:12:15,673  -->  00:12:18,413
Now we also want this to be an integer,
247

247

00:12:18,413  -->  00:12:21,850
so we want to return a value here that is not a decimal.
248

248

00:12:21,850  -->  00:12:23,802
Let's do that.
249

249

00:12:23,802  -->  00:12:26,244
I'm sure that you remember the math object,
250

250

00:12:26,244  -->  00:12:28,862
and we used the ceiling method before,
251

251

00:12:28,862  -->  00:12:31,170
or the floor method, I don't remember,
252

252

00:12:31,170  -->  00:12:34,153
but now we're going to use the round.
253

253

00:12:34,153  -->  00:12:37,372
What round does is very simple,
254

254

00:12:37,372  -->  00:12:42,344
it simply rounds the number to the closest integer.
255

255

00:12:42,344  -->  00:12:43,964
So, very simple.
256

256

00:12:43,964  -->  00:12:46,682
Now, only one thing left in this function here,
257

257

00:12:46,682  -->  00:12:49,052
is that this formula is actually only valid
258

258

00:12:49,052  -->  00:12:52,135
for people between 18 and 81 in ages.
259

259

00:12:53,761  -->  00:12:56,494
So, you already know how to do that, right?
260

260

00:12:56,494  -->  00:12:58,923
We use an if el statement,
261

261

00:12:58,923  -->  00:13:00,590
so if the element is
262

262

00:13:02,154  -->  00:13:04,522
greater or equal to 18, and,
263

263

00:13:04,522  -->  00:13:06,722
at the same time,
264

264

00:13:06,722  -->  00:13:10,055
less than or even equal or less than 81.
265

265

00:13:12,504  -->  00:13:15,504
In this case we want to return this,
266

266

00:13:18,442  -->  00:13:21,312
and if the person's all of these ranges,
267

267

00:13:21,312  -->  00:13:23,812
then we simply return minus 1.
268

268

00:13:25,942  -->  00:13:27,484
That's it.
269

269

00:13:27,484  -->  00:13:30,901
That's our function for the maxHeartRate.
270

270

00:13:32,112  -->  00:13:34,695
Once again, let's now use this.
271

271

00:13:36,194  -->  00:13:40,027
Let's just call this rates and then arrayCalc.
272

272

00:13:41,424  -->  00:13:44,684
Again, we're using the ages as an input,
273

273

00:13:44,684  -->  00:13:48,851
and then our callback function is the maxHeartRate.
274

274

00:13:50,592  -->  00:13:54,759
Now instead of the fullAges, I want to log the rates.
275

275

00:13:57,594  -->  00:13:58,771
Okay.
276

276

00:13:58,771  -->  00:14:01,331
So here are the calculated heart rate,
277

277

00:14:01,331  -->  00:14:04,342
maximum heart rate, which is only minus 1
278

278

00:14:04,342  -->  00:14:07,614
for this person here and that's because it's clearly
279

279

00:14:07,614  -->  00:14:09,584
a younger than 18.
280

280

00:14:09,584  -->  00:14:12,403
Let's think again about what we did here.
281

281

00:14:12,403  -->  00:14:16,053
So, we created a generic function which loops
282

282

00:14:16,053  -->  00:14:17,511
over an input array.
283

283

00:14:17,511  -->  00:14:20,236
Then we gave it a function as input
284

284

00:14:20,236  -->  00:14:22,540
which is used to calculate something
285

285

00:14:22,540  -->  00:14:25,356
based on each element of the array.
286

286

00:14:25,356  -->  00:14:27,189
We have created a bunch
287

287

00:14:27,189  -->  00:14:29,157
of different callback functions for this
288

288

00:14:29,157  -->  00:14:30,580
and we could create even more.
289

289

00:14:30,580  -->  00:14:33,279
This is way better than having one big function
290

290

00:14:33,279  -->  00:14:36,037
calculating all of this stuff at the same time,
291

291

00:14:36,037  -->  00:14:39,728
because it creates more modular and readable code.
292

292

00:14:39,728  -->  00:14:43,278
Each function here, of these three that we coded here,
293

293

00:14:43,278  -->  00:14:46,149
each one has a simple and single task.
294

294

00:14:46,149  -->  00:14:49,438
So, this is a really good practice.
295

295

00:14:49,438  -->  00:14:50,369
Okay.
296

296

00:14:50,369  -->  00:14:52,075
This was an excellent use case
297

297

00:14:52,075  -->  00:14:54,268
of why and how we should make use
298

298

00:14:54,268  -->  00:14:56,307
of the fact that we can pass functions around
299

299

00:14:56,307  -->  00:14:58,560
just like variables.
300

300

00:14:58,560  -->  00:15:00,316
With this simple technique,
301

301

00:15:00,316  -->  00:15:01,868
we wrote cleaner code,
302

302

00:15:01,868  -->  00:15:04,617
and this code is more reusable and readable,
303

303

00:15:04,617  -->  00:15:06,388
which is really cool.
304

304

00:15:06,388  -->  00:15:07,386
All right.
305

305

00:15:07,386  -->  00:15:09,719
See you in the next lecture.
