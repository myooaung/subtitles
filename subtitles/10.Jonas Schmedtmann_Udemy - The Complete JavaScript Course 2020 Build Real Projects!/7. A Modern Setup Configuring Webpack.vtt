WEBVTT
1
1

00:00:01.310  -->  00:00:02.780
<v Narrator>In this lecture you will learn</v>
2

2

00:00:02.780  -->  00:00:05.483
how to create a basic webpack configuration.
3

3

00:00:06.440  -->  00:00:10.220
So webpack is the most commonly used asset bundler.
4

4

00:00:10.220  -->  00:00:12.010
So it doesn't actually not only bundle
5

5

00:00:12.010  -->  00:00:15.540
JavaScript files or modules, but bundles all kinds of assets
6

6

00:00:15.540  -->  00:00:18.280
like JavaScript, CSS, and images.
7

7

00:00:18.280  -->  00:00:19.130
Okay?
8

8

00:00:19.130  -->  00:00:22.580
So we see here on this left side all of these dependencies,
9

9

00:00:22.580  -->  00:00:26.590
all of these files, like depending on each other.
10

10

00:00:26.590  -->  00:00:28.830
And webpack then bundles these together
11

11

00:00:28.830  -->  00:00:30.883
into just one JavaScript, one CSS file,
12

12

00:00:32.119  -->  00:00:34.120
and then these images here.
13

13

00:00:34.120  -->  00:00:34.980
Okay?
14

14

00:00:34.980  -->  00:00:38.520
Now in our case we're not interested in CSS or the images.
15

15

00:00:38.520  -->  00:00:40.990
We just want to bundle all of our JavaScipt files
16

16

00:00:40.990  -->  00:00:43.790
into one big bundle, okay.
17

17

00:00:43.790  -->  00:00:45.540
So I'm gonna use webpack four here,
18

18

00:00:45.540  -->  00:00:46.860
which by the time of recording
19

19

00:00:46.860  -->  00:00:49.610
is the most current version available, okay.
20

20

00:00:49.610  -->  00:00:52.120
And this version actually now supports
21

21

00:00:52.120  -->  00:00:54.380
something called zero configuration
22

22

00:00:54.380  -->  00:00:57.600
where you don't even need to write a configuration file.
23

23

00:00:57.600  -->  00:00:59.210
So if you want to do that you just
24

24

00:00:59.210  -->  00:01:01.650
need to have one source folder in the root
25

25

00:01:01.650  -->  00:01:04.220
and then in there one index.js file.
26

26

00:01:04.220  -->  00:01:06.030
And webpack then will automatically create
27

27

00:01:06.030  -->  00:01:09.560
a distribution folder and put the bundled file in there.
28

28

00:01:09.560  -->  00:01:11.830
But that's just for really small apps
29

29

00:01:11.830  -->  00:01:14.440
and so that's not really what we're interested in.
30

30

00:01:14.440  -->  00:01:17.600
Okay and so we will write some configuration.
31

31

00:01:17.600  -->  00:01:20.370
And in order to do that let's go back to our text editor
32

32

00:01:20.370  -->  00:01:25.283
and add a file here called webpack.config.js.
33

33

00:01:28.730  -->  00:01:31.350
So this is just a regular JavaScript file.
34

34

00:01:31.350  -->  00:01:35.020
You can see it here, but actually Visual Studio code
35

35

00:01:35.020  -->  00:01:39.090
identifies this file here as a webpack configuration file
36

36

00:01:39.090  -->  00:01:41.060
with this icon here, okay.
37

37

00:01:41.060  -->  00:01:43.280
Now in here we have one object
38

38

00:01:43.280  -->  00:01:46.850
in which we can specify our settings or configuration.
39

39

00:01:46.850  -->  00:01:51.611
So adjust one object and then we want to basically export
40

40

00:01:51.611  -->  00:01:56.300
this object from this file using the node js syntax.
41

41

00:01:56.300  -->  00:01:59.220
And that works like this: so module.export
42

42

00:02:00.700  -->  00:02:04.230
and then we export here this object.
43

43

00:02:04.230  -->  00:02:05.063
Okay?
44

44

00:02:05.063  -->  00:02:07.130
So don't worry about understanding this part here.
45

45

00:02:07.130  -->  00:02:07.963
This doesn't really matter.
46

46

00:02:07.963  -->  00:02:11.490
This is just again to export this configuration object
47

47

00:02:11.490  -->  00:02:12.840
that we're about to write here,
48

48

00:02:12.840  -->  00:02:16.713
so that webpack then can take this object and work with it.
49

49

00:02:17.860  -->  00:02:20.210
Now to create this configuration we need to know
50

50

00:02:20.210  -->  00:02:23.000
that in webpack there are four core concepts:
51

51

00:02:23.000  -->  00:02:27.200
it's the entry point, the output, loaders, and plugins.
52

52

00:02:27.200  -->  00:02:29.570
And we will just do a very simple config here
53

53

00:02:29.570  -->  00:02:32.720
because again our app is fairly simple.
54

54

00:02:32.720  -->  00:02:34.743
So starting with the entry point,
55

55

00:02:36.090  -->  00:02:37.690
all we need to do is to specify
56

56

00:02:37.690  -->  00:02:40.290
the entry property here in this object.
57

57

00:02:40.290  -->  00:02:41.880
And the entry point is where
58

58

00:02:41.880  -->  00:02:44.230
webpack will start the bundling.
59

59

00:02:44.230  -->  00:02:47.230
So basically, this is the file where it will start looking
60

60

00:02:47.230  -->  00:02:49.270
for all the dependencies which it
61

61

00:02:49.270  -->  00:02:51.530
should then bundle together, okay.
62

62

00:02:51.530  -->  00:02:54.150
So we're gonna start seeing how this really works
63

63

00:02:54.150  -->  00:02:56.470
once we start experimenting with this.
64

64

00:02:56.470  -->  00:02:57.303
Right?
65

65

00:02:57.303  -->  00:03:00.700
Now in here we can specify one or more entry files,
66

66

00:03:00.700  -->  00:03:03.120
but for now we just want one entry file
67

67

00:03:03.120  -->  00:03:06.350
and that is this index.js file, okay.
68

68

00:03:06.350  -->  00:03:09.290
So let's now simply specify the path to that
69

69

00:03:09.290  -->  00:03:13.730
and it is dot and what dot means here is the current folder.
70

70

00:03:13.730  -->  00:03:14.563
Okay?
71

71

00:03:14.563  -->  00:03:17.670
So just like in the command line when we have dot dot,
72

72

00:03:17.670  -->  00:03:18.970
so something like this,
73

73

00:03:18.970  -->  00:03:21.470
this means go up to the parent folder.
74

74

00:03:21.470  -->  00:03:24.050
But just one dot is the current folder.
75

75

00:03:24.050  -->  00:03:28.200
So current folder, which is the product folder,
76

76

00:03:28.200  -->  00:03:30.063
then go into the source folder,
77

77

00:03:32.760  -->  00:03:37.050
then js and here it's index.js.
78

78

00:03:37.050  -->  00:03:39.830
And that's it. That is our entry point.
79

79

00:03:39.830  -->  00:03:42.633
So that's the first property in this object here.
80

80

00:03:43.970  -->  00:03:46.780
Next up we need to define the output property,
81

81

00:03:46.780  -->  00:03:48.580
which will tell webpack exactly
82

82

00:03:48.580  -->  00:03:51.080
where to save our bundle file.
83

83

00:03:51.080  -->  00:03:53.050
So we specify the output property
84

84

00:03:53.050  -->  00:03:56.290
and now in here we actually pass an object.
85

85

00:03:56.290  -->  00:03:58.570
And then in this object we put the path.
86

86

00:03:58.570  -->  00:04:02.020
So the path to the folder and then the file name.
87

87

00:04:02.020  -->  00:04:06.520
So path and I'm going to leave it empty for now
88

88

00:04:06.520  -->  00:04:07.703
and then the file name.
89

89

00:04:10.690  -->  00:04:13.403
And as the file name we simply want bundle.js.
90

90

00:04:14.630  -->  00:04:18.700
So that's kind of a standard name for a webpack output.
91

91

00:04:18.700  -->  00:04:20.840
Now about this path here this actually
92

92

00:04:20.840  -->  00:04:22.947
needs to be an absolute path here.
93

93

00:04:22.947  -->  00:04:26.140
And in order to have access to that absolute path,
94

94

00:04:26.140  -->  00:04:28.973
we need to use a built in node package.
95

95

00:04:30.080  -->  00:04:32.473
So let's include that node package here.
96

96

00:04:34.410  -->  00:04:36.680
And it works like this...
97

97

00:04:36.680  -->  00:04:41.680
Require path, okay?
98

98

00:04:41.850  -->  00:04:43.770
So again don't worry about the syntax here.
99

99

00:04:43.770  -->  00:04:47.290
This is just to include a built in node module,
100

100

00:04:47.290  -->  00:04:51.203
again called path, and then put it in the path variable.
101

101

00:04:51.203  -->  00:04:54.930
Now in here, what we want to do then is to use
102

102

00:04:54.930  -->  00:04:59.263
a method which is in the path package, so path.resolve.
103

103

00:05:00.670  -->  00:05:02.510
And then we use the dirname variable
104

104

00:05:02.510  -->  00:05:05.007
that node gives us access to.
105

105

00:05:05.007  -->  00:05:09.160
So this variable here, this is the current absolute path.
106

106

00:05:09.160  -->  00:05:12.660
And so we use path revolve to now join this current path
107

107

00:05:12.660  -->  00:05:16.230
so that the working directory, the Forkify directory,
108

108

00:05:16.230  -->  00:05:19.200
with the one that we want our bundle to be in,
109

109

00:05:19.200  -->  00:05:20.683
which is dist.
110

110

00:05:21.930  -->  00:05:25.363
Right? And then in there js.
111

111

00:05:27.280  -->  00:05:28.680
Okay, does it make sense?
112

112

00:05:28.680  -->  00:05:32.100
So again, this path resolve, which is a method
113

113

00:05:32.100  -->  00:05:35.220
which is available to us through this path package
114

114

00:05:35.220  -->  00:05:36.970
that we included up here on this line,
115

115

00:05:36.970  -->  00:05:39.560
we will then join the current absolute path
116

116

00:05:39.560  -->  00:05:41.830
with the one that we want our bundle to be in.
117

117

00:05:41.830  -->  00:05:46.077
So dist/js. So basically this folder here.
118

118

00:05:46.077  -->  00:05:49.530
And so now webpack will output our file
119

119

00:05:49.530  -->  00:05:52.570
to this directory with this bundle.js file name.
120

120

00:05:52.570  -->  00:05:54.690
And that is now actually all that we need
121

121

00:05:54.690  -->  00:05:56.010
in order to get started.
122

122

00:05:56.010  -->  00:05:57.940
Now we can just make this a little bit better
123

123

00:05:57.940  -->  00:06:00.640
because in webpack four we now have something called
124

124

00:06:00.640  -->  00:06:03.060
the production and the development mode.
125

125

00:06:03.060  -->  00:06:04.750
So the development mode simply builds
126

126

00:06:04.750  -->  00:06:07.140
our bundler without minifying our code
127

127

00:06:07.140  -->  00:06:09.250
in order to be as fast as possible.
128

128

00:06:09.250  -->  00:06:11.480
But the production mode will automatically
129

129

00:06:11.480  -->  00:06:13.310
enable all kinds of optimization,
130

130

00:06:13.310  -->  00:06:15.180
like minification and tree shaking
131

131

00:06:15.180  -->  00:06:17.940
in order to reduce the final bundle size.
132

132

00:06:17.940  -->  00:06:18.960
Okay?
133

133

00:06:18.960  -->  00:06:21.513
So that is another property that we can set.
134

134

00:06:23.070  -->  00:06:26.423
For example, by saying mode development.
135

135

00:06:27.870  -->  00:06:28.950
Okay?
136

136

00:06:28.950  -->  00:06:30.950
And so now it will be as fast as possible
137

137

00:06:30.950  -->  00:06:32.630
and not compress or cut because
138

138

00:06:32.630  -->  00:06:35.170
that's not necessary during development.
139

139

00:06:35.170  -->  00:06:37.860
Okay, so for now that's our very simple configuration.
140

140

00:06:37.860  -->  00:06:40.280
Later on we are going to look at loaders
141

141

00:06:40.280  -->  00:06:42.270
and plugins as well, but for now
142

142

00:06:42.270  -->  00:06:44.950
we just want specify the entry and the output
143

143

00:06:44.950  -->  00:06:46.490
and also the mode here.
144

144

00:06:46.490  -->  00:06:48.440
Now in order to actually test this out,
145

145

00:06:48.440  -->  00:06:51.070
we need to create a new JavaScript file.
146

146

00:06:51.070  -->  00:06:53.770
So right now we have the index.js,
147

147

00:06:53.770  -->  00:06:55.730
which is our entry point, remember.
148

148

00:06:55.730  -->  00:06:57.140
So now let's say that we want
149

149

00:06:57.140  -->  00:06:59.300
to include a new module in here,
150

150

00:06:59.300  -->  00:07:00.420
so that we can actually test
151

151

00:07:00.420  -->  00:07:02.610
if the other module is included,
152

152

00:07:02.610  -->  00:07:04.540
so if they are bundled together.
153

153

00:07:04.540  -->  00:07:05.930
So just for testing purposes,
154

154

00:07:05.930  -->  00:07:08.593
let's add a new file here called test.js.
155

155

00:07:10.790  -->  00:07:15.757
And in here let's say console.log imported module.
156

156

00:07:20.070  -->  00:07:20.903
Okay?
157

157

00:07:20.903  -->  00:07:23.520
And then we can also export something from here.
158

158

00:07:23.520  -->  00:07:27.570
So we say export default
159

159

00:07:27.570  -->  00:07:29.850
and now let's just export some number here.
160

160

00:07:29.850  -->  00:07:32.397
So let's say just 23. Okay?
161

161

00:07:32.397  -->  00:07:35.890
And so this is the official ES six module syntax,
162

162

00:07:35.890  -->  00:07:37.000
that we're using here.
163

163

00:07:37.000  -->  00:07:40.560
So if you want to export something we used export keyword
164

164

00:07:40.560  -->  00:07:44.400
and then we can have a default export or a named export.
165

165

00:07:44.400  -->  00:07:45.790
And I'm going to explain all of this
166

166

00:07:45.790  -->  00:07:47.230
in one of the later lectures
167

167

00:07:47.230  -->  00:07:48.500
when we're gonna start implementing
168

168

00:07:48.500  -->  00:07:51.140
our apps architecture using ES six modules.
169

169

00:07:51.140  -->  00:07:53.780
But for now just keep in mind that this is the easiest
170

170

00:07:53.780  -->  00:07:57.980
and standard way of exporting something from a module.
171

171

00:07:57.980  -->  00:07:58.813
Okay?
172

172

00:07:58.813  -->  00:07:59.970
So we have a console log and
173

173

00:07:59.970  -->  00:08:02.200
then we export something from this module.
174

174

00:08:02.200  -->  00:08:06.530
And now here in the index.js file, which is our entry point,
175

175

00:08:06.530  -->  00:08:09.770
we can then go ahead and import something.
176

176

00:08:09.770  -->  00:08:12.120
So we have to give it a name, a variable name.
177

177

00:08:12.120  -->  00:08:17.120
So import x from and then the name of the module,
178

178

00:08:17.150  -->  00:08:18.790
which in this case is test.
179

179

00:08:18.790  -->  00:08:21.930
So the current folder slash and then test.
180

180

00:08:21.930  -->  00:08:23.970
And now when we import from a module
181

181

00:08:23.970  -->  00:08:26.550
we don't even have to specify the dot js.
182

182

00:08:26.550  -->  00:08:28.350
So all we need to do is write test,
183

183

00:08:28.350  -->  00:08:30.730
which is the name of the module,
184

184

00:08:30.730  -->  00:08:32.898
and what we exported.
185

185

00:08:32.898  -->  00:08:35.870
So remember we exported this 23 here.
186

186

00:08:35.870  -->  00:08:39.090
This will then be saved into the x variable.
187

187

00:08:39.090  -->  00:08:40.860
Okay, because we called it x.
188

188

00:08:40.860  -->  00:08:44.660
We could call it also number or num, for example,
189

189

00:08:44.660  -->  00:08:45.890
so that doesn't really matter.
190

190

00:08:45.890  -->  00:08:48.610
But right now we have access to what we exported
191

191

00:08:48.610  -->  00:08:52.093
from this module here into this num variable.
192

192

00:08:53.680  -->  00:08:56.330
So let's now log that to the console.
193

193

00:08:56.330  -->  00:08:59.493
So console.log and let's say,
194

194

00:09:00.337  -->  00:09:05.337
"I imported num from another module."
195

195

00:09:12.150  -->  00:09:14.310
And now right now this wouldn't actually work
196

196

00:09:14.310  -->  00:09:17.210
in the browser if we weren't to use webpack.
197

197

00:09:17.210  -->  00:09:18.810
So we really need webpack now
198

198

00:09:18.810  -->  00:09:21.360
in order to bundle these together.
199

199

00:09:21.360  -->  00:09:23.510
Okay, so again this is only going to work
200

200

00:09:23.510  -->  00:09:25.880
with webpack or some other bundler.
201

201

00:09:25.880  -->  00:09:29.140
And that is exactly why we're actually using it.
202

202

00:09:29.140  -->  00:09:30.730
So we have our example set up,
203

203

00:09:30.730  -->  00:09:33.070
now there's just one last thing that we have to do,
204

204

00:09:33.070  -->  00:09:38.070
which is to go to our package.json and add an npm script.
205

205

00:09:38.120  -->  00:09:39.950
So let me know do that and then I'm going to explain
206

206

00:09:39.950  -->  00:09:42.500
you what an npm script actually is.
207

207

00:09:42.500  -->  00:09:45.400
So let's call this one dev, which stands for development.
208

208

00:09:45.400  -->  00:09:47.691
And then we don't want any of this.
209

209

00:09:47.691  -->  00:09:50.530
So what we want here is to call webpack
210

210

00:09:52.320  -->  00:09:54.060
and actually that's it.
211

211

00:09:54.060  -->  00:09:58.240
So all we need to do here is to actually call webpack.
212

212

00:09:58.240  -->  00:10:01.210
So as soon as we start the npm script called dev
213

213

00:10:01.210  -->  00:10:03.080
it will then open up webpack,
214

214

00:10:03.080  -->  00:10:05.140
look up our configuration here,
215

215

00:10:05.140  -->  00:10:08.170
and then do the work that we specified here.
216

216

00:10:08.170  -->  00:10:10.807
So it will read our entry file, do it's work,
217

217

00:10:10.807  -->  00:10:14.660
and output it exactly here, as we specified.
218

218

00:10:14.660  -->  00:10:17.210
And why do we have to use an npm script for this?
219

219

00:10:17.210  -->  00:10:19.003
Well because that's just the only way
220

220

00:10:19.003  -->  00:10:20.896
or at least the best way to launch
221

221

00:10:20.896  -->  00:10:25.490
our locally installed dev dependency, just like webpack is.
222

222

00:10:25.490  -->  00:10:26.323
Okay?
223

223

00:10:26.323  -->  00:10:27.560
Now actually in order for this to work
224

224

00:10:27.560  -->  00:10:29.020
we need to do one more thing,
225

225

00:10:29.020  -->  00:10:31.660
which is to install the webpack command line interface.
226

226

00:10:31.660  -->  00:10:33.890
So right now we only have webpack,
227

227

00:10:33.890  -->  00:10:36.570
but we need something to be able to access it
228

228

00:10:36.570  -->  00:10:38.100
through the command line interface.
229

229

00:10:38.100  -->  00:10:40.880
And so there's another package for that one. Okay?
230

230

00:10:40.880  -->  00:10:43.190
So webpack they could have done it all in one package,
231

231

00:10:43.190  -->  00:10:46.818
but they decided to put that functionality of accessing it
232

232

00:10:46.818  -->  00:10:49.680
via that command line in a separate package.
233

233

00:10:49.680  -->  00:10:52.400
So let's install that very quickly as well.
234

234

00:10:52.400  -->  00:10:54.380
So we already know how to do that.
235

235

00:10:54.380  -->  00:10:59.223
So npm install and this one is called webpack cli.
236

236

00:11:01.950  -->  00:11:04.220
So it's also an official webpack package
237

237

00:11:04.220  -->  00:11:06.510
from the same authors, it's just to get access
238

238

00:11:06.510  -->  00:11:09.550
to webpack through the command line interface.
239

239

00:11:09.550  -->  00:11:12.480
And again we want to save it in our dev dependencies.
240

240

00:11:12.480  -->  00:11:14.593
Hit return and wait for it to install.
241

241

00:11:15.530  -->  00:11:17.570
So here we go, let's check it out.
242

242

00:11:17.570  -->  00:11:19.700
And here you go, it's now actually
243

243

00:11:19.700  -->  00:11:21.760
in our dev dependencies, here as well.
244

244

00:11:21.760  -->  00:11:25.130
So right now we're ready to launch this npm script.
245

245

00:11:25.130  -->  00:11:26.240
And it's actually very easy.
246

246

00:11:26.240  -->  00:11:28.730
All we have to do is to go back to our terminal,
247

247

00:11:28.730  -->  00:11:31.840
say npm, and then run.
248

248

00:11:31.840  -->  00:11:34.400
So run is the keyword if you want to start
249

249

00:11:34.400  -->  00:11:37.290
one of our npm scripts and this one is called dev.
250

250

00:11:37.290  -->  00:11:40.710
And so let's hit return and see webpack doing it's work.
251

251

00:11:40.710  -->  00:11:43.120
And that's it. So it's already finished.
252

252

00:11:43.120  -->  00:11:47.350
You see bundle.js with a size of 3.59 kilobytes
253

253

00:11:47.350  -->  00:11:49.110
and so let's check it out.
254

254

00:11:49.110  -->  00:11:52.030
And here you see it's actually right here.
255

255

00:11:52.030  -->  00:11:54.810
Let's open it up and you see it looks really weird.
256

256

00:11:54.810  -->  00:11:57.604
So it has all of this code and down here,
257

257

00:11:57.604  -->  00:11:59.320
like really inside of this,
258

258

00:11:59.320  -->  00:12:01.270
you see some of the code that we wrote.
259

259

00:12:01.270  -->  00:12:03.873
So something like this here, I imported
260

260

00:12:03.873  -->  00:12:05.930
and then all of this weird code.
261

261

00:12:05.930  -->  00:12:07.190
So it's really hard to understand
262

262

00:12:07.190  -->  00:12:09.480
what webpack does behind the scene
263

263

00:12:09.480  -->  00:12:10.950
and it doesn't really matter to us.
264

264

00:12:10.950  -->  00:12:14.150
All we want is for this to actually work. Right?
265

265

00:12:14.150  -->  00:12:15.750
And now one final thing that we need to do
266

266

00:12:15.750  -->  00:12:19.290
in order to test this, is just to create a quick HTML file
267

267

00:12:19.290  -->  00:12:22.130
here inside of this dist folder.
268

268

00:12:22.130  -->  00:12:23.570
Just to include the bundle file
269

269

00:12:23.570  -->  00:12:26.380
and to see in the console if everything's working fine.
270

270

00:12:26.380  -->  00:12:28.960
I could just use this one that we already have here,
271

271

00:12:28.960  -->  00:12:31.240
but I can just create a new one as well.
272

272

00:12:31.240  -->  00:12:35.280
So index.html, then I use emitter
273

273

00:12:35.280  -->  00:12:37.790
and I'm not sure if you're aware of this tool,
274

274

00:12:37.790  -->  00:12:40.680
but in VS Code at least, emit already comes pre-installed.
275

275

00:12:40.680  -->  00:12:41.940
And so all you have to do is to
276

276

00:12:41.940  -->  00:12:43.800
write this exclamation point,
277

277

00:12:43.800  -->  00:12:46.655
hit the tab, and then it will write this
278

278

00:12:46.655  -->  00:12:49.710
pre-formatted HTML skeleton for you.
279

279

00:12:49.710  -->  00:12:50.543
Okay?
280

280

00:12:50.543  -->  00:12:52.040
So let's just include a script here.
281

281

00:12:55.830  -->  00:12:59.763
Js bundle.js, okay?
282

282

00:13:01.210  -->  00:13:02.810
So I'm gonna call this one test.
283

283

00:13:02.810  -->  00:13:04.460
And so let's open it up.
284

284

00:13:04.460  -->  00:13:07.220
And let's actually do that from the console, okay?
285

285

00:13:07.220  -->  00:13:12.220
So open dist index.html. Hit return and here we go.
286

286

00:13:12.580  -->  00:13:15.389
So that opens that HTML document,
287

287

00:13:15.389  -->  00:13:17.810
hit inspect to open the console,
288

288

00:13:17.810  -->  00:13:19.820
and here we see the result.
289

289

00:13:19.820  -->  00:13:21.542
So you see imported module
290

290

00:13:21.542  -->  00:13:24.320
and then "I imported 23 from another module!"
291

291

00:13:24.320  -->  00:13:26.140
So that's perfect, right?
292

292

00:13:26.140  -->  00:13:30.700
So this imported module here comes from the test.js,
293

293

00:13:30.700  -->  00:13:35.630
so this one here, then we export 23 back into index.js,
294

294

00:13:35.630  -->  00:13:39.200
where it's saved as num, put into the string,
295

295

00:13:39.200  -->  00:13:40.500
and logged to console.
296

296

00:13:40.500  -->  00:13:42.830
And you see that 23 is exactly the number
297

297

00:13:42.830  -->  00:13:44.950
that we exported from test js.
298

298

00:13:44.950  -->  00:13:48.420
Right? And you see now that it's perfectly working.
299

299

00:13:48.420  -->  00:13:49.682
So that's amazing, right?
300

300

00:13:49.682  -->  00:13:51.806
Webpack is already configured,
301

301

00:13:51.806  -->  00:13:54.300
everything's working just fine.
302

302

00:13:54.300  -->  00:13:57.120
And so yeah, that's fantastic!
303

303

00:13:57.120  -->  00:13:59.900
Now one last thing here regarding this node
304

304

00:13:59.900  -->  00:14:02.170
that we have here, so we set it to development,
305

305

00:14:02.170  -->  00:14:03.590
but once we're ready we then want to
306

306

00:14:03.590  -->  00:14:05.460
set it back to production.
307

307

00:14:05.460  -->  00:14:06.610
But that's not really perfect,
308

308

00:14:06.610  -->  00:14:09.020
having to come back to this configuration file here,
309

309

00:14:09.020  -->  00:14:10.140
in order to change this.
310

310

00:14:10.140  -->  00:14:11.350
And so we can actually move it here,
311

311

00:14:11.350  -->  00:14:14.710
out of the config and into our npm script.
312

312

00:14:14.710  -->  00:14:16.090
So let me show that to you.
313

313

00:14:16.090  -->  00:14:20.400
So we delete it from here, come to the npm script here,
314

314

00:14:20.400  -->  00:14:22.180
the dev one, and then we can actually
315

315

00:14:22.180  -->  00:14:24.550
set that mode right here.
316

316

00:14:24.550  -->  00:14:27.283
So mode and then development.
317

317

00:14:29.370  -->  00:14:32.990
Okay? And then what we can do next is to add
318

318

00:14:32.990  -->  00:14:37.990
a new script called build, which is also for webpack,
319

319

00:14:39.120  -->  00:14:42.693
but with a new mode, which is then finally, production.
320

320

00:14:44.640  -->  00:14:47.890
And so let's use this one now.
321

321

00:14:47.890  -->  00:14:49.780
So the dev one is now for development
322

322

00:14:49.780  -->  00:14:52.560
and build is once we're ready we build it
323

323

00:14:52.560  -->  00:14:53.730
then with the production mode,
324

324

00:14:53.730  -->  00:14:55.750
so that it will then compress our code.
325

325

00:14:55.750  -->  00:14:58.303
So let's test that here back in the terminal.
326

326

00:14:58.303  -->  00:15:00.750
Let's clear this here and I can actually
327

327

00:15:00.750  -->  00:15:02.910
use command k, at least on a Mac.
328

328

00:15:02.910  -->  00:15:04.990
I'm not sure how it works on Windows.
329

329

00:15:04.990  -->  00:15:08.803
And then let's say npm run build.
330

330

00:15:09.720  -->  00:15:11.470
Then it will do it's work and you see
331

331

00:15:11.470  -->  00:15:13.750
that right now it's much smaller.
332

332

00:15:13.750  -->  00:15:16.160
Remember that is was like three point something before
333

333

00:15:16.160  -->  00:15:18.400
and now it's only 647 bytes.
334

334

00:15:18.400  -->  00:15:21.640
So it's much smaller and we can see
335

335

00:15:21.640  -->  00:15:23.067
that here as well when we open it.
336

336

00:15:23.067  -->  00:15:28.067
And so whoa! Now it's just this small piece of code.
337

337

00:15:28.250  -->  00:15:30.470
All right, so all of this was compressed
338

338

00:15:30.470  -->  00:15:32.940
to just this piece of code.
339

339

00:15:32.940  -->  00:15:34.110
Right?
340

340

00:15:34.110  -->  00:15:35.930
Now running these command series,
341

341

00:15:35.930  -->  00:15:38.630
these npms, over and over again,
342

342

00:15:38.630  -->  00:15:41.300
whenever we want to see the results
343

343

00:15:41.300  -->  00:15:44.670
of the code we just wrote is of course not perfect.
344

344

00:15:44.670  -->  00:15:45.960
And so in the next lecture,
345

345

00:15:45.960  -->  00:15:47.570
we will make our lives a bit easier
346

346

00:15:47.570  -->  00:15:51.210
by installing something called the webpack dev server.
347

347

00:15:51.210  -->  00:15:53.860
But that one I'm gonna leave for the next lecture
348

348

00:15:53.860  -->  00:15:55.080
because right now I this already
349

349

00:15:55.080  -->  00:15:57.390
more than enough for just one video.
350

350

00:15:57.390  -->  00:15:58.973
So see you then in a second.
