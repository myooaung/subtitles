WEBVTT
1
1

00:00:01.198  -->  00:00:03.375
<v ->[Jonas Schmedtmann] We talked about how execution contexts</v>
2

2

00:00:03.375  -->  00:00:06.793
are created and how that is related to variable
3

3

00:00:06.793  -->  00:00:09.303
and function hoisting.
4

4

00:00:09.303  -->  00:00:12.739
That was the first step of the creation phase.
5

5

00:00:12.739  -->  00:00:15.101
So let's now talk about the second step,
6

6

00:00:15.101  -->  00:00:18.497
the creation of the scoping chain.
7

7

00:00:18.497  -->  00:00:21.080
So what does scoping even mean?
8

8

00:00:22.749  -->  00:00:25.454
Scoping basically answers the question,
9

9

00:00:25.454  -->  00:00:29.591
"Where can we access a certain variable or function?"
10

10

00:00:29.591  -->  00:00:33.258
In Javascript each function creates a scope,
11

11

00:00:34.299  -->  00:00:37.390
which is a space or an environment in which
12

12

00:00:37.390  -->  00:00:41.140
the variables that it defines are accessible.
13

13

00:00:42.009  -->  00:00:44.534
In many other programming languages a scope
14

14

00:00:44.534  -->  00:00:49.201
is also created by if blocks, for blocks, or why blocks,
15

15

00:00:49.201  -->  00:00:51.827
but not in Javascript.
16

16

00:00:51.827  -->  00:00:55.087
So here in Javascript the only way that we have
17

17

00:00:55.087  -->  00:00:58.989
to create a new scope is to write a new function
18

18

00:00:58.989  -->  00:01:03.448
and this is something very very important in Javascript.
19

19

00:01:03.448  -->  00:01:07.249
Also, in Javascript we have lexical scoping,
20

20

00:01:07.249  -->  00:01:09.379
and lexical just means where
21

21

00:01:09.379  -->  00:01:11.818
something is written in the code.
22

22

00:01:11.818  -->  00:01:16.337
So it's about the position of somthing within our code.
23

23

00:01:16.337  -->  00:01:19.765
Lexical scoping means that a function that is lexically
24

24

00:01:19.765  -->  00:01:22.490
within and out of function,
25

25

00:01:22.490  -->  00:01:24.911
which means that it's written inside of another function
26

26

00:01:24.911  -->  00:01:29.443
and gets access to a scope of the outer function,
27

27

00:01:29.443  -->  00:01:32.110
also called the parent function,
28

28

00:01:32.944  -->  00:01:36.097
and with that it also gets access to the variables
29

29

00:01:36.097  -->  00:01:39.984
and functions that the parent function defines.
30

30

00:01:39.984  -->  00:01:44.826
Let's look at an example to get a better idea of this.
31

31

00:01:44.826  -->  00:01:47.176
So here we have some more demo code.
32

32

00:01:47.176  -->  00:01:50.265
In blue we have the global scope, which is a scope
33

33

00:01:50.265  -->  00:01:54.568
that is accessible from everywhere, from all functions.
34

34

00:01:54.568  -->  00:01:56.519
Like the global execution context,
35

35

00:01:56.519  -->  00:02:00.686
you can think of the global scope as the default scope.
36

36

00:02:01.589  -->  00:02:04.857
So in this scope we have access to the variable a,
37

37

00:02:04.857  -->  00:02:07.440
and also to the first function.
38

38

00:02:08.823  -->  00:02:12.506
In orange we have the scope of the first function,
39

39

00:02:12.506  -->  00:02:16.343
which defines the variable b and the second function,
40

40

00:02:16.343  -->  00:02:20.304
and this is a local scope, not a global scope.
41

41

00:02:20.304  -->  00:02:23.060
And do you remember what I said about lexical scoping
42

42

00:02:23.060  -->  00:02:24.635
in the last slide?
43

43

00:02:24.635  -->  00:02:28.932
Thanks to lexical scope, this scope has also access
44

44

00:02:28.932  -->  00:02:31.228
to it's parent scope and all the variables
45

45

00:02:31.228  -->  00:02:33.395
functions that it defines.
46

46

00:02:34.472  -->  00:02:37.724
In this case, that's the global scope.
47

47

00:02:37.724  -->  00:02:42.033
Finally, in green, the scope of the second function.
48

48

00:02:42.033  -->  00:02:45.198
In there we have a console.log statement,
49

49

00:02:45.198  -->  00:02:49.926
which attempts to print values of variables a, b, and c.
50

50

00:02:49.926  -->  00:02:53.945
Now, these variables are not defined in that function,
51

51

00:02:53.945  -->  00:02:58.396
only c, but as we already know, a scope has access
52

52

00:02:58.396  -->  00:03:03.143
to the scope of the function in which is sits lexically,
53

53

00:03:03.143  -->  00:03:06.525
so when running this code, the Javascript engine
54

54

00:03:06.525  -->  00:03:10.469
will not find variable b in the current scope, right.
55

55

00:03:10.469  -->  00:03:13.243
So it just goes up and looks in the scope
56

56

00:03:13.243  -->  00:03:17.014
of it's parent function and says, oh, here is b,
57

57

00:03:17.014  -->  00:03:18.514
so let's use that.
58

58

00:03:19.551  -->  00:03:22.155
The same happens for variable a.
59

59

00:03:22.155  -->  00:03:25.047
It does not find it in the current scope
60

60

00:03:25.047  -->  00:03:27.218
and also not in the parent scope,
61

61

00:03:27.218  -->  00:03:31.344
so it goes even more up all the way to the global scope
62

62

00:03:31.344  -->  00:03:34.927
and this is exactly called the scope chain.
63

63

00:03:36.246  -->  00:03:39.425
Only if the Javascript engine does not find a variable
64

64

00:03:39.425  -->  00:03:43.425
anywhere it throws an error and stops execution.
65

65

00:03:44.393  -->  00:03:47.351
Now, it's very important to note that
66

66

00:03:47.351  -->  00:03:50.480
this does not work backwards.
67

67

00:03:50.480  -->  00:03:54.119
For example, the global scope will never ever have access
68

68

00:03:54.119  -->  00:03:56.475
to the variables b or c unless we return
69

69

00:03:56.475  -->  00:03:58.975
the values from the functions.
70

70

00:04:00.162  -->  00:04:02.822
So locally scoped variables are not visible
71

71

00:04:02.822  -->  00:04:04.739
to their parent scopes.
72

72

00:04:06.298  -->  00:04:09.573
This is why I put that red arrow pointing upwards,
73

73

00:04:09.573  -->  00:04:13.950
because that's the only direction the scope chain works.
74

74

00:04:13.950  -->  00:04:17.788
Now how does this actually work behind the scenes?
75

75

00:04:17.788  -->  00:04:21.328
Remember the execution context object
76

76

00:04:21.328  -->  00:04:23.971
that we had been talking about before?
77

77

00:04:23.971  -->  00:04:28.136
In the creation phase, each execution context object
78

78

00:04:28.136  -->  00:04:31.184
will get exact scope chain,
79

79

00:04:31.184  -->  00:04:33.852
which is basically all the variable objects
80

80

00:04:33.852  -->  00:04:37.430
that an execution context has access to,
81

81

00:04:37.430  -->  00:04:41.536
because, remember the variable object is what stores
82

82

00:04:41.536  -->  00:04:45.098
all the defined variables and functions.
83

83

00:04:45.098  -->  00:04:47.881
So in this example, in the second scope,
84

84

00:04:47.881  -->  00:04:50.585
we have access to the variable object,
85

85

00:04:50.585  -->  00:04:53.018
of the second functions, of the first function,
86

86

00:04:53.018  -->  00:04:55.518
and to global variable object.
87

87

00:04:56.443  -->  00:05:00.468
So what do you think will happen with this code in practice?
88

88

00:05:00.468  -->  00:05:04.301
Let's go back to our text editor and find out.
89

89

00:05:05.827  -->  00:05:09.447
So I have this code already here in my starter code,
90

90

00:05:09.447  -->  00:05:13.731
which is the one that you will have available for download.
91

91

00:05:13.731  -->  00:05:16.106
So here's the exact same code that
92

92

00:05:16.106  -->  00:05:18.683
we had in the slide before.
93

93

00:05:18.683  -->  00:05:22.001
So how exactly do you think this is gonna work?
94

94

00:05:22.001  -->  00:05:25.418
I'll give you a minute to think about it.
95

95

00:05:27.019  -->  00:05:29.552
Alright, so let's see the solution.
96

96

00:05:29.552  -->  00:05:33.052
Great, so the console log actually printed
97

97

00:05:34.146  -->  00:05:38.313
variable a, b, and c, so hey, hi, and hello, right?
98

98

00:05:39.677  -->  00:05:41.260
Hey, hi, and hello.
99

99

00:05:42.310  -->  00:05:44.491
So why does this work?
100

100

00:05:44.491  -->  00:05:48.457
This works because, of course, the scoping chain
101

101

00:05:48.457  -->  00:05:51.731
and in this case thanks to the scoping chain,
102

102

00:05:51.731  -->  00:05:55.317
the second function has access to the variables
103

103

00:05:55.317  -->  00:05:59.383
of the first function and of the global scope.
104

104

00:05:59.383  -->  00:06:01.917
That's because the second function
105

105

00:06:01.917  -->  00:06:04.694
is written inside of the first,
106

106

00:06:04.694  -->  00:06:09.105
which in turn, is written inside of the global scope.
107

107

00:06:09.105  -->  00:06:12.809
That's why we call it lexical scoping.
108

108

00:06:12.809  -->  00:06:15.393
So another extremely important concept
109

109

00:06:15.393  -->  00:06:19.303
and very much used in practice as well.
110

110

00:06:19.303  -->  00:06:23.479
Alright, so we have seen that the concepts
111

111

00:06:23.479  -->  00:06:26.426
of execution context, scope,
112

112

00:06:26.426  -->  00:06:29.567
and scope chain are very related.
113

113

00:06:29.567  -->  00:06:32.225
Now before moving on, I just want to make sure
114

114

00:06:32.225  -->  00:06:34.929
that you really understand how these are related
115

115

00:06:34.929  -->  00:06:37.454
and where the differences are.
116

116

00:06:37.454  -->  00:06:41.183
So we saw it at the scope chain for each execution context
117

117

00:06:41.183  -->  00:06:44.069
is stored in the execution context object,
118

118

00:06:44.069  -->  00:06:45.511
but I just wanted to make very clear
119

119

00:06:45.511  -->  00:06:49.678
that the execution stack is different from the scope chain.
120

120

00:06:50.804  -->  00:06:54.668
So here we see another simple code example,
121

121

00:06:54.668  -->  00:06:56.222
and we are already know
122

122

00:06:56.222  -->  00:06:59.028
how the execution stack works, right?
123

123

00:06:59.028  -->  00:07:02.882
So the first function gets called, which then calls
124

124

00:07:02.882  -->  00:07:05.896
the second function, which in turn calls the third
125

125

00:07:05.896  -->  00:07:08.587
function and for each of these calls,
126

126

00:07:08.587  -->  00:07:11.393
a new execution context is put on top
127

127

00:07:11.393  -->  00:07:13.310
of the execution stack.
128

128

00:07:15.450  -->  00:07:19.229
Now, for the scope chain, things are a bit different.
129

129

00:07:19.229  -->  00:07:22.646
We see that the global scope contains the a variable,
130

130

00:07:22.646  -->  00:07:26.729
as well as the first and third functions.
131

131

00:07:26.729  -->  00:07:29.667
Then the scope of the first function contains
132

132

00:07:29.667  -->  00:07:34.528
the second function, and this is how I like to represent it.
133

133

00:07:34.528  -->  00:07:37.276
Now let's remember that the execution stack
134

134

00:07:37.276  -->  00:07:39.605
is the order in which functions are called,
135

135

00:07:39.605  -->  00:07:42.173
but the scope chain is the order in which functions
136

136

00:07:42.173  -->  00:07:44.244
are written in the code,
137

137

00:07:44.244  -->  00:07:47.156
where they are lexically in our code.
138

138

00:07:47.156  -->  00:07:49.606
So the order in which functions are called
139

139

00:07:49.606  -->  00:07:52.845
does not determine the scope of the variables
140

140

00:07:52.845  -->  00:07:54.762
within these functions.
141

141

00:07:55.684  -->  00:07:57.940
What determines the scope of variables
142

142

00:07:57.940  -->  00:08:01.021
is where the functions are written.
143

143

00:08:01.021  -->  00:08:03.858
Since the third function is not in the scope
144

144

00:08:03.858  -->  00:08:06.792
of the second function, of course it cannot access
145

145

00:08:06.792  -->  00:08:10.959
variables b and c defined in the second and first functions.
146

146

00:08:12.188  -->  00:08:14.731
It can only access the global variable a,
147

147

00:08:14.731  -->  00:08:18.898
because the function is written in the global scope.
148

148

00:08:20.243  -->  00:08:23.319
So, it's execution contexts that store the scope chain
149

149

00:08:23.319  -->  00:08:26.391
of each function in the variable object,
150

150

00:08:26.391  -->  00:08:31.242
but they do not have an effect on the scope chain itself.
151

151

00:08:31.242  -->  00:08:33.822
This is important to understand.
152

152

00:08:33.822  -->  00:08:36.710
So what do you think will happen in this case?
153

153

00:08:36.710  -->  00:08:38.210
Let's go find out.
154

154

00:08:39.401  -->  00:08:43.242
Let's first analyze the code that we have here.
155

155

00:08:43.242  -->  00:08:47.465
So we have, in the global scope, the var a,
156

156

00:08:47.465  -->  00:08:49.110
which is defined as hello,
157

157

00:08:49.110  -->  00:08:52.475
we have the first function here and we have
158

158

00:08:52.475  -->  00:08:55.558
the third function all in the global scope,
159

159

00:08:55.558  -->  00:08:57.704
or in the global execution context.
160

160

00:08:57.704  -->  00:09:00.162
Then, inside of the first function,
161

161

00:09:00.162  -->  00:09:05.032
we have the b variable, we have the second function call,
162

162

00:09:05.032  -->  00:09:07.460
and the function declaration.
163

163

00:09:07.460  -->  00:09:09.595
We already know that because of hoisting we can
164

164

00:09:09.595  -->  00:09:13.411
call the function before it's written here, right.
165

165

00:09:13.411  -->  00:09:16.255
Okay and then in the third function,
166

166

00:09:16.255  -->  00:09:18.815
we just define variable d and attempt
167

167

00:09:18.815  -->  00:09:21.533
to console log variable c.
168

168

00:09:21.533  -->  00:09:24.530
Alright so I'll give you a minute to think about
169

169

00:09:24.530  -->  00:09:29.502
what's going to happen once I hit the refresh button here
170

170

00:09:29.502  -->  00:09:31.835
in order to run this script.
171

171

00:09:35.236  -->  00:09:37.096
Okay, so I'm going to do it.
172

172

00:09:37.096  -->  00:09:39.694
I'm going to push the button.
173

173

00:09:39.694  -->  00:09:42.361
Alright and so we have an error,
174

174

00:09:43.637  -->  00:09:46.741
which tell us that c is not defined.
175

175

00:09:46.741  -->  00:09:48.860
So two things here,
176

176

00:09:48.860  -->  00:09:52.323
the first thing is why can the second function
177

177

00:09:52.323  -->  00:09:54.865
even call the third function?
178

178

00:09:54.865  -->  00:09:58.198
This buck here came from line 73, right,
179

179

00:10:00.320  -->  00:10:03.487
which means that someone or somewhere,
180

180

00:10:04.402  -->  00:10:06.362
this function was called,
181

181

00:10:06.362  -->  00:10:08.602
which of course, was here.
182

182

00:10:08.602  -->  00:10:13.021
So the third function was called from the second function
183

183

00:10:13.021  -->  00:10:17.415
and this, once again, is possible because of scoping.
184

184

00:10:17.415  -->  00:10:20.100
The second function has access to the third function
185

185

00:10:20.100  -->  00:10:23.197
because of the scope chain, right?
186

186

00:10:23.197  -->  00:10:27.364
So, the second function has access to the global scape
187

187

00:10:28.206  -->  00:10:32.440
out here, in which the third function also sits lexically.
188

188

00:10:32.440  -->  00:10:36.273
So the second function has the ability to call
189

189

00:10:37.751  -->  00:10:41.639
the third function because of the scope chain
190

190

00:10:41.639  -->  00:10:43.869
and there's nothing new here, right?
191

191

00:10:43.869  -->  00:10:47.692
Now the second thing is why do we actually get
192

192

00:10:47.692  -->  00:10:50.571
this error saying that c is not defined,
193

193

00:10:50.571  -->  00:10:53.272
even though it was the second function
194

194

00:10:53.272  -->  00:10:55.974
who called the third function?
195

195

00:10:55.974  -->  00:10:59.686
The second function is the function that defined
196

196

00:10:59.686  -->  00:11:03.238
the c variable and then called the third function,
197

197

00:11:03.238  -->  00:11:07.666
but still the third function cannot access variable c,
198

198

00:11:07.666  -->  00:11:10.416
which it is trying to print here,
199

199

00:11:12.337  -->  00:11:14.822
which as we see resulted in this error.
200

200

00:11:14.822  -->  00:11:18.051
So by now, I'm sure, that it's obvious to you that
201

201

00:11:18.051  -->  00:11:21.983
the third function cannot access variable c because
202

202

00:11:21.983  -->  00:11:26.150
the execution stack is different from the scope chain.
203

203

00:11:27.076  -->  00:11:30.559
To answer the question, who can access the c variable,
204

204

00:11:30.559  -->  00:11:33.368
the order in which the functions
205

205

00:11:33.368  -->  00:11:35.929
were called does not matter.
206

206

00:11:35.929  -->  00:11:38.212
All that matters is that the third function
207

207

00:11:38.212  -->  00:11:42.134
is in a different scope than the second function
208

208

00:11:42.134  -->  00:11:45.577
and so it cannot access variable c.
209

209

00:11:45.577  -->  00:11:49.119
So which variables can the third function actually access?
210

210

00:11:49.119  -->  00:11:51.869
Try to figure it out by yourself.
211

211

00:11:59.251  -->  00:12:00.617
Did you get it?
212

212

00:12:00.617  -->  00:12:02.973
Okay, so it's variable a and d.
213

213

00:12:02.973  -->  00:12:04.723
Let's just test that.
214

214

00:12:06.279  -->  00:12:08.146
I'm going to console log this one here
215

215

00:12:08.146  -->  00:12:10.896
and then do console.log a plus d.
216

216

00:12:18.654  -->  00:12:21.859
If I run this now, then I have hello John,
217

217

00:12:21.859  -->  00:12:24.276
and hello is a and John is d.
218

218

00:12:25.537  -->  00:12:27.790
So these are the only variables that we have access to
219

219

00:12:27.790  -->  00:12:31.957
because they are in the scope chain for the third function.
220

220

00:12:33.063  -->  00:12:35.756
Great, this is really cool, right?
221

221

00:12:35.756  -->  00:12:39.020
You are already familiar which a lot of super important
222

222

00:12:39.020  -->  00:12:43.550
and advanced Javascript concepts here and a lot of
223

223

00:12:43.550  -->  00:12:46.866
important theory and I can absolutely guarantee you
224

224

00:12:46.866  -->  00:12:48.807
that you already know a lot more
225

225

00:12:48.807  -->  00:12:52.345
than a lot of Javascript beginners.
226

226

00:12:52.345  -->  00:12:54.282
So this is amazing, right?
227

227

00:12:54.282  -->  00:12:57.876
There's only one thing that we have left in this section,
228

228

00:12:57.876  -->  00:13:00.570
and that is the "this" key word.
229

229

00:13:00.570  -->  00:13:02.530
So let's go right to the next lecture
230

230

00:13:02.530  -->  00:13:05.477
where we are going to talk about that.
231

231

00:13:05.477  -->  00:13:06.727
See you there.
