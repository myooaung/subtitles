WEBVTT
1
1

00:00:01.412  -->  00:00:02.800
<v Commentator>After learning exactly how</v>
2

2

00:00:02.800  -->  00:00:05.783
asynchronous JavaScript works behind the scenes,
3

3

00:00:05.783  -->  00:00:07.806
over the next couple of lectures, we're gonna learn
4

4

00:00:07.806  -->  00:00:10.715
how it can be used in practice in our code.
5

5

00:00:10.715  -->  00:00:13.577
So in this lecture, we're gonna take a close look
6

6

00:00:13.577  -->  00:00:16.003
at asynchronous JavaScript with call backs,
7

7

00:00:16.003  -->  00:00:17.955
which is the more traditional way
8

8

00:00:17.955  -->  00:00:20.791
of dealing with asynchronous code.
9

9

00:00:20.791  -->  00:00:23.082
So let's get rid of this code here, but instead of
10

10

00:00:23.082  -->  00:00:26.349
deleting it, I will simply comment it out.
11

11

00:00:26.349  -->  00:00:27.182
Okay?
12

12

00:00:27.182  -->  00:00:30.794
So let me keep it here, for future reference.
13

13

00:00:30.794  -->  00:00:31.627
Okay?
14

14

00:00:31.627  -->  00:00:33.198
And you can do the same, or you can delete it.
15

15

00:00:33.198  -->  00:00:35.388
You can do it however you feel like.
16

16

00:00:35.388  -->  00:00:36.221
Okay?
17

17

00:00:36.221  -->  00:00:39.323
Now, in order to learn about asynchronous JavaScript
18

18

00:00:39.323  -->  00:00:41.117
with call backs, we're gonna build a
19

19

00:00:41.117  -->  00:00:44.064
very very small fake recipe reader.
20

20

00:00:44.064  -->  00:00:44.897
Okay?
21

21

00:00:44.897  -->  00:00:47.965
And here, we're gonna simulate ajex calls to get some
22

22

00:00:47.965  -->  00:00:50.622
fake recipes using set timeouts.
23

23

00:00:50.622  -->  00:00:53.604
So basically, we're gonna simulate loading a data
24

24

00:00:53.604  -->  00:00:55.210
from a remote web server.
25

25

00:00:55.210  -->  00:00:59.127
Which of course would be asynchronous, using some timers.
26

26

00:00:59.127  -->  00:01:00.520
Like we did in the last lecture.
27

27

00:01:00.520  -->  00:01:01.353
Okay?
28

28

00:01:01.353  -->  00:01:05.686
So let's create a function here called "get recipe".
29

29

00:01:09.671  -->  00:01:13.171
And then down here, we call that function.
30

30

00:01:15.141  -->  00:01:17.569
Now the way this is gonna work is that we simulate
31

31

00:01:17.569  -->  00:01:21.212
first that we get a bunch of recipe IDs from a server.
32

32

00:01:21.212  -->  00:01:23.973
And then based on that, we select a recipe and then
33

33

00:01:23.973  -->  00:01:27.318
get that recipe from a server after that.
34

34

00:01:27.318  -->  00:01:28.151
Okay?
35

35

00:01:28.151  -->  00:01:31.564
So first, we get a couple of IDs, and then we get a recipe.
36

36

00:01:31.564  -->  00:01:34.534
So again we're gonna use the set timeout function here, as I
37

37

00:01:34.534  -->  00:01:38.290
mentioned before, basically to simulate the ajex call.
38

38

00:01:38.290  -->  00:01:41.957
So the call to get the data from the server.
39

39

00:01:43.500  -->  00:01:46.083
So our call back function here.
40

40

00:01:47.245  -->  00:01:52.012
And then let's say this is going to take 1500 milliseconds.
41

41

00:01:52.012  -->  00:01:53.262
So 1.5 seconds.
42

42

00:01:55.915  -->  00:02:00.665
Then in here, let's simply create an array of recipe IDs.
43

43

00:02:03.481  -->  00:02:04.428
And then some numbers.
44

44

00:02:04.428  -->  00:02:06.928
It doesn't really matter here.
45

45

00:02:09.442  -->  00:02:10.275
Okay?
46

46

00:02:10.275  -->  00:02:13.442
And then let's just console log these.
47

47

00:02:17.824  -->  00:02:20.387
And just to see if everything is working,
48

48

00:02:20.387  -->  00:02:22.845
we are reloading it here.
49

49

00:02:22.845  -->  00:02:23.678
And yeah.
50

50

00:02:23.678  -->  00:02:25.876
So after one and a half second, then this code here
51

51

00:02:25.876  -->  00:02:27.118
appears on the screen.
52

52

00:02:27.118  -->  00:02:27.951
Okay?
53

53

00:02:27.951  -->  00:02:29.978
And again the set timeout here is just to
54

54

00:02:29.978  -->  00:02:33.294
simulate that this data here comes back from a server.
55

55

00:02:33.294  -->  00:02:35.775
Now once the data comes back from the server,
56

56

00:02:35.775  -->  00:02:39.854
we then want to get the recipe for one of these IDs.
57

57

00:02:39.854  -->  00:02:40.687
Okay?
58

58

00:02:40.687  -->  00:02:44.687
And so, in here we now need another set timeout.
59

59

00:02:47.460  -->  00:02:48.293
Right?
60

60

00:02:52.083  -->  00:02:52.916
Okay?
61

61

00:02:52.916  -->  00:02:54.540
So basically after we receive this data here
62

62

00:02:54.540  -->  00:02:57.271
from the server, then we need a new set timeout
63

63

00:02:57.271  -->  00:03:01.637
where then the data comes from the server for the recipe.
64

64

00:03:01.637  -->  00:03:02.494
Okay?
65

65

00:03:02.494  -->  00:03:04.071
And once more, this doesn't really come
66

66

00:03:04.071  -->  00:03:05.376
from the server of course.
67

67

00:03:05.376  -->  00:03:08.146
All of this is just to simulate the asynchronous behavior.
68

68

00:03:08.146  -->  00:03:10.658
And don't worry, in one of the future lectures, of course,
69

69

00:03:10.658  -->  00:03:14.115
we're going to use a real API and real ajex calls.
70

70

00:03:14.115  -->  00:03:16.348
But for now, we don't want to mess with all that, and so
71

71

00:03:16.348  -->  00:03:21.333
we just use the set timeouts to simulate that behavior.
72

72

00:03:21.333  -->  00:03:22.166
Okay?
73

73

00:03:22.166  -->  00:03:23.507
Here let's just put one second.
74

74

00:03:23.507  -->  00:03:26.388
And actually into the set timeout function,
75

75

00:03:26.388  -->  00:03:28.336
we can pass a third argument.
76

76

00:03:28.336  -->  00:03:31.142
Which can be an argument to the call back function.
77

77

00:03:31.142  -->  00:03:33.828
So let's say we want an ID argument
78

78

00:03:33.828  -->  00:03:36.386
in this call back function here.
79

79

00:03:36.386  -->  00:03:37.414
So ID.
80

80

00:03:37.414  -->  00:03:41.108
And then we can pass a value here as the third argument.
81

81

00:03:41.108  -->  00:03:44.600
And that will then be passed into the call back function.
82

82

00:03:44.600  -->  00:03:45.433
Okay?
83

83

00:03:45.433  -->  00:03:48.739
So let's then use the recipe IDs that we got from
84

84

00:03:48.739  -->  00:03:51.072
the server in the beginning.
85

85

00:03:52.035  -->  00:03:52.868
Okay?
86

86

00:03:52.868  -->  00:03:55.310
And so now, basically, this recipe ID too,
87

87

00:03:55.310  -->  00:03:59.535
which will be 432, which will then be passed into
88

88

00:03:59.535  -->  00:04:01.947
this call back function here as ID.
89

89

00:04:01.947  -->  00:04:03.084
Alright?
90

90

00:04:03.084  -->  00:04:05.241
So let's create a fake recipe here
91

91

00:04:05.241  -->  00:04:07.491
in this call back function.
92

92

00:04:09.924  -->  00:04:12.674
And we're going to use an object.
93

93

00:04:13.620  -->  00:04:17.120
So this recipe will be fresh tomato pasta.
94

94

00:04:20.705  -->  00:04:23.705
And then let's also add a publisher.
95

95

00:04:25.415  -->  00:04:27.412
And that will be Jonas.
96

96

00:04:27.412  -->  00:04:28.245
Okay.
97

97

00:04:28.245  -->  00:04:29.544
So that's a fake recipe.
98

98

00:04:29.544  -->  00:04:32.627
Now let's just log it to the console.
99

99

00:04:34.525  -->  00:04:35.966
Console dot log.
100

100

00:04:35.966  -->  00:04:39.223
And now in here I actually also want to use this ID.
101

101

00:04:39.223  -->  00:04:41.712
So just to know that everything's working.
102

102

00:04:41.712  -->  00:04:43.989
And so let's use a template string here.
103

103

00:04:43.989  -->  00:04:46.526
So one of the new ES6 features here as well.
104

104

00:04:46.526  -->  00:04:49.045
And remember, if you want to use one of the variables,
105

105

00:04:49.045  -->  00:04:53.581
then we use the dollar sign and curly brackets, ID,
106

106

00:04:53.581  -->  00:04:54.948
and close the curly brackets.
107

107

00:04:54.948  -->  00:04:58.265
And then we can just write our code.
108

108

00:04:58.265  -->  00:05:01.779
So we say the ID, and then there's the title of the recipe.
109

109

00:05:01.779  -->  00:05:03.446
So recipe dot title.
110

110

00:05:06.090  -->  00:05:07.302
And that's it.
111

111

00:05:07.302  -->  00:05:09.220
And now let's check out if it works.
112

112

00:05:09.220  -->  00:05:11.504
So after one and a half second, this one here comes,
113

113

00:05:11.504  -->  00:05:15.225
and then after one seconds, we get the recipe.
114

114

00:05:15.225  -->  00:05:17.764
And so basically we chained these two timers,
115

115

00:05:17.764  -->  00:05:20.127
one after another, by putting this one here
116

116

00:05:20.127  -->  00:05:22.082
inside of the first one.
117

117

00:05:22.082  -->  00:05:24.151
So we have the first set timeout and then in there,
118

118

00:05:24.151  -->  00:05:26.712
we have a new set timeout.
119

119

00:05:26.712  -->  00:05:29.772
And like this, the first one runs, and then after
120

120

00:05:29.772  -->  00:05:32.263
1.5 second we get this data.
121

121

00:05:32.263  -->  00:05:34.171
And then after yet another second,
122

122

00:05:34.171  -->  00:05:36.879
we then get this fake recipe.
123

123

00:05:36.879  -->  00:05:39.674
And you also see that the 432 here is actually being
124

124

00:05:39.674  -->  00:05:41.934
passed in, into this call back function here,
125

125

00:05:41.934  -->  00:05:43.206
just like I said.
126

126

00:05:43.206  -->  00:05:45.571
Because we passed it here as a third argument
127

127

00:05:45.571  -->  00:05:47.445
into the set timeout function.
128

128

00:05:47.445  -->  00:05:48.283
Okay?
129

129

00:05:48.283  -->  00:05:49.989
Just to see again if this works, here.
130

130

00:05:49.989  -->  00:05:51.514
Maybe you didn't get the timing here.
131

131

00:05:51.514  -->  00:05:54.257
Let's take a look at this here again.
132

132

00:05:54.257  -->  00:05:57.840
So 1.5, and now one second, and here we go.
133

133

00:05:58.728  -->  00:06:01.174
And now, just to make things a little bit more complex,
134

134

00:06:01.174  -->  00:06:03.024
let's just add a third level.
135

135

00:06:03.024  -->  00:06:05.554
And let's suppose that we want to get another recipe
136

136

00:06:05.554  -->  00:06:07.209
from the same publisher.
137

137

00:06:07.209  -->  00:06:08.769
So in this case here it's Jonas.
138

138

00:06:08.769  -->  00:06:12.024
And so let's pretend that we want to get another recipe
139

139

00:06:12.024  -->  00:06:14.912
which is also from the same publisher, automatically.
140

140

00:06:14.912  -->  00:06:17.256
And so now we use another set timeout with
141

141

00:06:17.256  -->  00:06:19.631
yet another call back function.
142

142

00:06:19.631  -->  00:06:20.464
Okay?
143

143

00:06:20.464  -->  00:06:24.112
So set timeout again, and now we also
144

144

00:06:24.112  -->  00:06:26.136
want an argument here again.
145

145

00:06:26.136  -->  00:06:28.485
And actually we don't even need these parentheses here.
146

146

00:06:28.485  -->  00:06:29.318
Right?
147

147

00:06:29.318  -->  00:06:31.229
Remember that with the arrow functions if we have
148

148

00:06:31.229  -->  00:06:33.658
only one argument, then we don't need to use
149

149

00:06:33.658  -->  00:06:34.974
the parentheses at all.
150

150

00:06:34.974  -->  00:06:35.807
Okay?
151

151

00:06:35.807  -->  00:06:39.557
So publisher and then just the function body.
152

152

00:06:40.551  -->  00:06:44.440
And this one here maybe after 1500 again.
153

153

00:06:44.440  -->  00:06:45.948
Maybe this one here as well.
154

154

00:06:45.948  -->  00:06:47.721
I thought this was a bit too fast.
155

155

00:06:47.721  -->  00:06:50.985
Let's get rid of the parentheses here as well.
156

156

00:06:50.985  -->  00:06:52.086
So just ID.
157

157

00:06:52.086  -->  00:06:53.311
Okay?
158

158

00:06:53.311  -->  00:06:55.691
And then of course we also have to pass the publisher
159

159

00:06:55.691  -->  00:06:57.255
into this call back function.
160

160

00:06:57.255  -->  00:06:59.902
And just like before, we do it like this.
161

161

00:06:59.902  -->  00:07:04.653
And this one is stored here in the recipe object.
162

162

00:07:04.653  -->  00:07:05.486
Right?
163

163

00:07:05.486  -->  00:07:08.015
So recipe dot publisher.
164

164

00:07:08.015  -->  00:07:08.949
Okay?
165

165

00:07:08.949  -->  00:07:12.616
And so let's now create here another recipe.
166

166

00:07:19.578  -->  00:07:21.231
And this one is Italian pizza.
167

167

00:07:21.231  -->  00:07:24.564
And of course the publisher is the same.
168

168

00:07:28.178  -->  00:07:29.429
Alright.
169

169

00:07:29.429  -->  00:07:32.429
Let's call this one here recipe two.
170

170

00:07:39.157  -->  00:07:39.990
Okay.
171

171

00:07:41.435  -->  00:07:45.471
So now we have three call backs nested inside one another.
172

172

00:07:45.471  -->  00:07:48.560
Let's just check if this works.
173

173

00:07:48.560  -->  00:07:51.005
So the IDs, then the first recipe,
174

174

00:07:51.005  -->  00:07:54.015
and now the related recipe from the same publisher.
175

175

00:07:54.015  -->  00:07:55.381
And here we go.
176

176

00:07:55.381  -->  00:07:57.056
And so basically this now is like having
177

177

00:07:57.056  -->  00:08:00.762
three chained ajex calls to get some data from the server.
178

178

00:08:00.762  -->  00:08:03.352
But you see that this is getting here a bit out of hand.
179

179

00:08:03.352  -->  00:08:06.154
Imagine that we had more and more and more chaining here,
180

180

00:08:06.154  -->  00:08:07.676
like 10 levels.
181

181

00:08:07.676  -->  00:08:09.505
Then we would have all of these call backs here
182

182

00:08:09.505  -->  00:08:11.689
inside of one another.
183

183

00:08:11.689  -->  00:08:14.750
And that is the so-called "call back hell" in JavaScript.
184

184

00:08:14.750  -->  00:08:17.287
So this triangular shape here that you have here,
185

185

00:08:17.287  -->  00:08:18.907
so this shape here, what I mean here,
186

186

00:08:18.907  -->  00:08:21.171
this triangular shape that we have here,
187

187

00:08:21.171  -->  00:08:23.840
that is a sign of the call back hell.
188

188

00:08:23.840  -->  00:08:25.577
Which simply means that we have call back inside of
189

189

00:08:25.577  -->  00:08:28.567
call back inside of call back, which after some time
190

190

00:08:28.567  -->  00:08:30.573
gets really unmanageable.
191

191

00:08:30.573  -->  00:08:31.406
Okay?
192

192

00:08:31.406  -->  00:08:32.337
It gets really messy.
193

193

00:08:32.337  -->  00:08:34.411
And so that's why in ES6,
194

194

00:08:34.411  -->  00:08:37.051
something called "promises" were introduced.
195

195

00:08:37.051  -->  00:08:39.211
And with promises, we can avoid all of this
196

196

00:08:39.211  -->  00:08:42.873
call back hell here, and have a nicer and cleaner syntax
197

197

00:08:42.873  -->  00:08:44.625
when using asynchronous JavaScript
198

198

00:08:44.625  -->  00:08:46.457
like we have here in this example.
199

199

00:08:46.457  -->  00:08:47.290
Okay?
200

200

00:08:47.290  -->  00:08:48.444
And so in the next lecture, we are actually
201

201

00:08:48.444  -->  00:08:50.067
going to look at promises.
202

202

00:08:50.067  -->  00:08:52.441
Which is one of the ES6 features that we didn't really
203

203

00:08:52.441  -->  00:08:54.699
talk about in the last section
204

204

00:08:54.699  -->  00:08:57.701
where we talked about ES6 or ES2015.
205

205

00:08:57.701  -->  00:08:58.534
Okay?
206

206

00:08:58.534  -->  00:09:01.839
So make sure that you understand the logic behind this here,
207

207

00:09:01.839  -->  00:09:03.392
and that you really understand what the
208

208

00:09:03.392  -->  00:09:05.931
call back hell really means, because that's a term that
209

209

00:09:05.931  -->  00:09:08.426
you're gonna find frequently when you're reading
210

210

00:09:08.426  -->  00:09:10.176
about JavaScript on the web.
211

211

00:09:10.176  -->  00:09:11.009
Okay?
212

212

00:09:11.009  -->  00:09:13.194
So I had to show you what call back hell here is,
213

213

00:09:13.194  -->  00:09:15.019
so that after that, it makes sense to you
214

214

00:09:15.019  -->  00:09:16.769
why we use promises.
