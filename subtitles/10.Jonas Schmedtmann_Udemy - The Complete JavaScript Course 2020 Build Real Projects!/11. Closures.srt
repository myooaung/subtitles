1
1

00:00:01,466  -->  00:00:02,354
<v Instructor>We have learned a lot</v>
2

2

00:00:02,354  -->  00:00:05,762
of theory up until this point, but now,
3

3

00:00:05,762  -->  00:00:07,622
you are ready to understand one
4

4

00:00:07,622  -->  00:00:10,068
of the most crucial and advanced things
5

5

00:00:10,068  -->  00:00:12,318
about JavaScript: closures,
6

6

00:00:13,208  -->  00:00:14,397
and this is probably one
7

7

00:00:14,397  -->  00:00:18,815
of the most difficult-to-understand topics for beginners,
8

8

00:00:18,815  -->  00:00:21,932
but you already know everything that you need
9

9

00:00:21,932  -->  00:00:25,121
in order to understand and use closures.
10

10

00:00:25,121  -->  00:00:28,288
So let's dive right into this lecture.
11

11

00:00:29,905  -->  00:00:32,517
So as our example for this lecture,
12

12

00:00:32,517  -->  00:00:34,233
we want to write a small function
13

13

00:00:34,233  -->  00:00:35,930
that returns a function
14

14

00:00:35,930  -->  00:00:39,840
which calculates how many years we have until retirement.
15

15

00:00:39,840  -->  00:00:41,923
So let's quickly do that.
16

16

00:00:43,070  -->  00:00:47,153
So function, and let's simply call it retirement,
17

17

00:00:49,288  -->  00:00:52,620
and we pass into it the retirementAge,
18

18

00:00:52,620  -->  00:00:56,787
so the age at which someone can officially retire.
19

19

00:00:58,277  -->  00:01:00,034
So for example, here in Europe,
20

20

00:01:00,034  -->  00:01:02,534
it's mainly 65 years, usually.
21

21

00:01:03,518  -->  00:01:06,607
Okay, and this function will then return another function
22

22

00:01:06,607  -->  00:01:08,882
which will actually calculate the years
23

23

00:01:08,882  -->  00:01:10,609
that someone has left.
24

24

00:01:10,609  -->  00:01:13,689
So we already did this in the last lectures,
25

25

00:01:13,689  -->  00:01:15,109
so let's not do it again.
26

26

00:01:15,109  -->  00:01:19,276
So we simply return an anonymous function here.
27

27

00:01:19,276  -->  00:01:22,637
So we don't have a name, all we have is a parameter,
28

28

00:01:22,637  -->  00:01:25,470
and this is the yearOfBirth again.
29

29

00:01:27,220  -->  00:01:30,767
So we start by calculating the age in here,
30

30

00:01:30,767  -->  00:01:33,267
so 2016 minus the yearOfBirth,
31

31

00:01:37,099  -->  00:01:39,682
and then we log to the console,
32

32

00:01:42,382  -->  00:01:44,616
the retirementAge
33

33

00:01:44,616  -->  00:01:48,057
that we passed into the first function, right?
34

34

00:01:48,057  -->  00:01:51,031
Minus the age that we just created,
35

35

00:01:51,031  -->  00:01:53,565
and then let's add something else,
36

36

00:01:53,565  -->  00:01:56,892
like a string to make a sentence out of this,
37

37

00:01:56,892  -->  00:01:58,956
and I'm calling this one, a,
38

38

00:01:58,956  -->  00:02:00,695
which I didn't declare yet,
39

39

00:02:00,695  -->  00:02:03,295
so I'm going to declare it here.
40

40

00:02:03,295  -->  00:02:04,128
So var a,
41

41

00:02:07,845  -->  00:02:10,178
years left until retirement.
42

42

00:02:14,479  -->  00:02:15,971
So I will explain you in a second
43

43

00:02:15,971  -->  00:02:19,692
why we actually wrote this function like this.
44

44

00:02:19,692  -->  00:02:21,865
It's because we want to use closures here,
45

45

00:02:21,865  -->  00:02:23,511
so I will explain you in a second
46

46

00:02:23,511  -->  00:02:25,999
what closures are and how they work in here,
47

47

00:02:25,999  -->  00:02:27,758
but for now, let's just write this function,
48

48

00:02:27,758  -->  00:02:28,841
so, as it is.
49

49

00:02:30,561  -->  00:02:33,273
And now, let's try to use this function,
50

50

00:02:33,273  -->  00:02:36,087
and, as you know, this returns a function,
51

51

00:02:36,087  -->  00:02:37,451
so we can store the result
52

52

00:02:37,451  -->  00:02:40,221
of calling this function in a variable,
53

53

00:02:40,221  -->  00:02:43,951
and then this variable will be a function as well.
54

54

00:02:43,951  -->  00:02:45,860
So as you noticed, we passed the age
55

55

00:02:45,860  -->  00:02:49,934
that someone has to have in order to be able to retire.
56

56

00:02:49,934  -->  00:02:53,021
So this is an age that changes from country to country,
57

57

00:02:53,021  -->  00:02:56,304
and so we can basically create one function
58

58

00:02:56,304  -->  00:02:57,632
for each country.
59

59

00:02:57,632  -->  00:03:00,631
So this is similar to creating the interview questions
60

60

00:03:00,631  -->  00:03:04,793
for different jobs, like we did before, right?
61

61

00:03:04,793  -->  00:03:08,376
So let's create a function here for the US,
62

62

00:03:10,134  -->  00:03:11,254
and I know that in the US,
63

63

00:03:11,254  -->  00:03:14,820
the retirement age is actually 66,
64

64

00:03:14,820  -->  00:03:17,678
so we call our retirement function
65

65

00:03:17,678  -->  00:03:20,328
and then we pass 66 into it,
66

66

00:03:20,328  -->  00:03:22,827
and this will return a function
67

67

00:03:22,827  -->  00:03:26,660
where the retirement age, so this year, is 66.
68

68

00:03:28,269  -->  00:03:31,676
So if we now call our newly created function,
69

69

00:03:31,676  -->  00:03:34,176
which is this one here, right?
70

70

00:03:35,406  -->  00:03:36,739
So retirementUS,
71

71

00:03:39,324  -->  00:03:40,524
and, of course, we need
72

72

00:03:40,524  -->  00:03:43,003
to pass the year of birth, right?
73

73

00:03:43,003  -->  00:03:46,721
So let's use our well-known 1990, okay?
74

74

00:03:46,721  -->  00:03:49,355
And then, let's check it out.
75

75

00:03:49,355  -->  00:03:53,021
Alright, so 40 years left until retirement,
76

76

00:03:53,021  -->  00:03:55,114
or we could also write it like this,
77

77

00:03:55,114  -->  00:03:56,333
like we did before,
78

78

00:03:56,333  -->  00:03:58,666
so, for example, retirement,
79

79

00:03:59,979  -->  00:04:03,319
then pass an age like 66 again,
80

80

00:04:03,319  -->  00:04:05,493
so this will return a function,
81

81

00:04:05,493  -->  00:04:09,577
and then we can simply call this new function
82

82

00:04:09,577  -->  00:04:12,514
with the yearOfBirth again.
83

83

00:04:12,514  -->  00:04:15,217
So this should give us the same result,
84

84

00:04:15,217  -->  00:04:17,217
okay, so 40 years again.
85

85

00:04:18,813  -->  00:04:19,939
So this works,
86

86

00:04:19,939  -->  00:04:23,169
and let's take a look at what just happened here.
87

87

00:04:23,169  -->  00:04:25,599
So let's examine this together.
88

88

00:04:25,599  -->  00:04:28,675
So we started by calling the retirement function
89

89

00:04:28,675  -->  00:04:32,188
and passed the value of 66 here, right?
90

90

00:04:32,188  -->  00:04:36,306
The function then declares this a variable here
91

91

00:04:36,306  -->  00:04:38,473
and returns this function.
92

92

00:04:39,515  -->  00:04:41,150
Then the function finishes,
93

93

00:04:41,150  -->  00:04:45,185
and its execution context gets popped off the stack,
94

94

00:04:45,185  -->  00:04:48,018
and you remember that part, right?
95

95

00:04:48,018  -->  00:04:50,840
Okay, so we stored the returned function here
96

96

00:04:50,840  -->  00:04:53,727
in the retirementUS variable, right?
97

97

00:04:53,727  -->  00:04:55,750
So here we call it.
98

98

00:04:55,750  -->  00:04:57,741
And now comes the cool part.
99

99

00:04:57,741  -->  00:05:00,432
So in here, in this function,
100

100

00:05:00,432  -->  00:05:03,450
we use the retirementAge parameter
101

101

00:05:03,450  -->  00:05:05,328
of this outer function here,
102

102

00:05:05,328  -->  00:05:08,620
and also the a variable that is also declared
103

103

00:05:08,620  -->  00:05:12,453
outside of this anonymous function, and still,
104

104

00:05:13,536  -->  00:05:17,405
when we run this, this works, so somehow,
105

105

00:05:17,405  -->  00:05:19,957
we are able to still use these variables even
106

106

00:05:19,957  -->  00:05:22,322
after the retirement function,
107

107

00:05:22,322  -->  00:05:24,219
which declares these variables,
108

108

00:05:24,219  -->  00:05:27,402
already stopped its execution.
109

109

00:05:27,402  -->  00:05:28,978
So think about that again.
110

110

00:05:28,978  -->  00:05:31,454
Our inner function here is able
111

111

00:05:31,454  -->  00:05:35,000
to use the retirement variable and a variable
112

112

00:05:35,000  -->  00:05:38,652
of this function here that is already gone.
113

113

00:05:38,652  -->  00:05:40,346
It has already returned.
114

114

00:05:40,346  -->  00:05:43,140
But somehow the variables are still there,
115

115

00:05:43,140  -->  00:05:45,691
and this is the closure.
116

116

00:05:45,691  -->  00:05:47,967
This is really fascinating, right?
117

117

00:05:47,967  -->  00:05:52,200
This really blows my mind each time that I use it, really.
118

118

00:05:52,200  -->  00:05:55,351
So now that we know what a closure is,
119

119

00:05:55,351  -->  00:05:58,085
let's see how and why this actually works
120

120

00:05:58,085  -->  00:05:59,585
behind the scenes.
121

121

00:06:01,019  -->  00:06:05,826
So again, we can summarize how a closure works like this:
122

122

00:06:05,826  -->  00:06:08,081
An inner function has always access
123

123

00:06:08,081  -->  00:06:11,636
to the variables and parameters of its outer function,
124

124

00:06:11,636  -->  00:06:15,929
even after the outer function has returned.
125

125

00:06:15,929  -->  00:06:17,793
So let's see what happens
126

126

00:06:17,793  -->  00:06:20,788
when we call our retirement function.
127

127

00:06:20,788  -->  00:06:22,332
As we already know,
128

128

00:06:22,332  -->  00:06:25,829
the new function gets a new execution context
129

129

00:06:25,829  -->  00:06:29,861
that is put on top of the execution stack.
130

130

00:06:29,861  -->  00:06:32,624
That execution context has an object,
131

131

00:06:32,624  -->  00:06:34,309
which stores the variables.
132

132

00:06:34,309  -->  00:06:37,545
The scope chain ended this variable.
133

133

00:06:37,545  -->  00:06:41,058
So let's see the scope chain for the retirement function,
134

134

00:06:41,058  -->  00:06:45,577
which means the variables that the function has access to.
135

135

00:06:45,577  -->  00:06:48,697
And remember, the scope chain is like a pointer
136

136

00:06:48,697  -->  00:06:53,460
to all the variable objects that the function has access to.
137

137

00:06:53,460  -->  00:06:56,628
Alright, so of course, the function has access
138

138

00:06:56,628  -->  00:07:00,644
to the retirementAge argument, set to 66,
139

139

00:07:00,644  -->  00:07:04,430
and a variable, that holds our string.
140

140

00:07:04,430  -->  00:07:08,028
Okay, and then the function returns.
141

141

00:07:08,028  -->  00:07:09,826
So, after the function returns,
142

142

00:07:09,826  -->  00:07:11,798
now the execution context
143

143

00:07:11,798  -->  00:07:15,272
of the retirement function is effectively gone,
144

144

00:07:15,272  -->  00:07:17,800
and with it, the variable object
145

145

00:07:17,800  -->  00:07:21,397
and the entire scope chain should be gone, right?
146

146

00:07:21,397  -->  00:07:23,245
Actually, no.
147

147

00:07:23,245  -->  00:07:25,602
The secret to closures is that,
148

148

00:07:25,602  -->  00:07:27,898
even after a function returns,
149

149

00:07:27,898  -->  00:07:30,194
and execution context is gone,
150

150

00:07:30,194  -->  00:07:32,582
the variable object is still there.
151

151

00:07:32,582  -->  00:07:34,176
It's not gone.
152

152

00:07:34,176  -->  00:07:38,637
It still sits here in memory and it can be accessed,
153

153

00:07:38,637  -->  00:07:40,982
and that's why we still it there
154

154

00:07:40,982  -->  00:07:43,814
in the execution stack on the left side,
155

155

00:07:43,814  -->  00:07:46,274
and also in the scope chain on the right side,
156

156

00:07:46,274  -->  00:07:49,498
because, and I'm sure that you remember this,
157

157

00:07:49,498  -->  00:07:54,127
the scope chain is in fact a pointer to variable objects,
158

158

00:07:54,127  -->  00:07:56,626
and in this case, the variable object
159

159

00:07:56,626  -->  00:07:59,682
that we have here on the stack.
160

160

00:07:59,682  -->  00:08:01,512
So let's see this in action.
161

161

00:08:01,512  -->  00:08:03,503
Let's call the inner function,
162

162

00:08:03,503  -->  00:08:06,427
that we effectively called retirementUS,
163

163

00:08:06,427  -->  00:08:08,898
with the argument of 1990,
164

164

00:08:08,898  -->  00:08:13,065
which puts, of course, a new execution context on the stack.
165

165

00:08:14,495  -->  00:08:17,095
Let's now look at the scope chain.
166

166

00:08:17,095  -->  00:08:20,549
So since this inner function is written lexically
167

167

00:08:20,549  -->  00:08:24,928
in the retirement function, it has access to its scope,
168

168

00:08:24,928  -->  00:08:28,371
and you already know and use that.
169

169

00:08:28,371  -->  00:08:31,289
And now here comes the magic.
170

170

00:08:31,289  -->  00:08:32,547
Since the variable object
171

171

00:08:32,547  -->  00:08:35,503
of the retirement function is still there,
172

172

00:08:35,503  -->  00:08:37,614
the scope chain stays intact.
173

173

00:08:37,614  -->  00:08:39,111
It keeps working.
174

174

00:08:39,111  -->  00:08:41,486
And so, we can access the variables
175

175

00:08:41,486  -->  00:08:45,397
that were created in the retirement function long
176

176

00:08:45,397  -->  00:08:48,619
after the function has completed execution,
177

177

00:08:48,619  -->  00:08:53,159
and after its execution context is, of course, gone.
178

178

00:08:53,159  -->  00:08:56,884
The current execution context has closed in
179

179

00:08:56,884  -->  00:08:59,000
on the outer variable object,
180

180

00:08:59,000  -->  00:09:00,534
so that it can use it,
181

181

00:09:00,534  -->  00:09:03,988
and that's why it's called a closure.
182

182

00:09:03,988  -->  00:09:07,238
So the scope chain always stays intact.
183

183

00:09:08,072  -->  00:09:10,013
This is the most important thing
184

184

00:09:10,013  -->  00:09:14,065
that you have to understand and remember.
185

185

00:09:14,065  -->  00:09:16,210
Okay, and just to finish this,
186

186

00:09:16,210  -->  00:09:18,181
the function simply returns,
187

187

00:09:18,181  -->  00:09:22,904
and the context is popped off the stack, as usual.
188

188

00:09:22,904  -->  00:09:26,304
So now you not only know what closures are,
189

189

00:09:26,304  -->  00:09:30,827
but you also know how and why they actually work.
190

190

00:09:30,827  -->  00:09:34,781
And note that we don't create closures manually.
191

191

00:09:34,781  -->  00:09:38,424
This is something that's really built into JavaScript.
192

192

00:09:38,424  -->  00:09:40,824
We don't have to worry about anything.
193

193

00:09:40,824  -->  00:09:43,891
We don't have to say that we want the closure.
194

194

00:09:43,891  -->  00:09:48,778
JavaScript will always do this work for us automatically.
195

195

00:09:48,778  -->  00:09:52,892
And now, the summary makes even more sense to you, right?
196

196

00:09:52,892  -->  00:09:55,307
So an inner function has always access
197

197

00:09:55,307  -->  00:09:59,899
to the variables and parameters of its outer function,
198

198

00:09:59,899  -->  00:10:03,482
even after the outer function has returned.
199

199

00:10:05,120  -->  00:10:07,245
So let's now see how this function
200

200

00:10:07,245  -->  00:10:09,913
that we created can be useful for us.
201

201

00:10:09,913  -->  00:10:12,353
So we can create three different functions
202

202

00:10:12,353  -->  00:10:15,440
for countries with different retirement ages,
203

203

00:10:15,440  -->  00:10:18,437
and use these functions over and over again.
204

204

00:10:18,437  -->  00:10:22,077
So this is similar with something that we did before, right?
205

205

00:10:22,077  -->  00:10:25,156
So we have a more generic function up here,
206

206

00:10:25,156  -->  00:10:27,066
the retirement function,
207

207

00:10:27,066  -->  00:10:30,805
which we can then use to create more-specific functions.
208

208

00:10:30,805  -->  00:10:34,389
And this is only one of the many application cases
209

209

00:10:34,389  -->  00:10:38,075
of closures, and we will see more of these later on
210

210

00:10:38,075  -->  00:10:39,561
in the course.
211

211

00:10:39,561  -->  00:10:42,894
So let's now create some more functions.
212

212

00:10:43,869  -->  00:10:46,356
We just get rid of this here.
213

213

00:10:46,356  -->  00:10:49,939
Okay, so let's create a retirement function
214

214

00:10:51,148  -->  00:10:52,148
for Germany,
215

215

00:10:53,325  -->  00:10:57,534
because in Germany, the retirement age is,
216

216

00:10:57,534  -->  00:10:58,784
not 66, but 65.
217

217

00:11:01,718  -->  00:11:02,551
Okay?
218

218

00:11:03,536  -->  00:11:05,514
And we can also create one
219

219

00:11:05,514  -->  00:11:08,137
for another country here in Europe,
220

220

00:11:08,137  -->  00:11:11,554
which is Iceland, which has an age of 67.
221

221

00:11:12,782  -->  00:11:13,699
So Iceland,
222

222

00:11:15,823  -->  00:11:18,115
we will call the retirement function
223

223

00:11:18,115  -->  00:11:20,032
with an argument of 67.
224

224

00:11:21,691  -->  00:11:23,865
And now we can go ahead and use these functions
225

225

00:11:23,865  -->  00:11:26,718
for different people in these different countries,
226

226

00:11:26,718  -->  00:11:30,082
for example, and see how many years they have left.
227

227

00:11:30,082  -->  00:11:32,378
So let's use these three for the same people,
228

228

00:11:32,378  -->  00:11:35,461
imagining that they lived in Germany,
229

229

00:11:36,847  -->  00:11:39,680
so the retirementGermany function,
230

230

00:11:42,241  -->  00:11:44,824
and that they lived in Iceland,
231

231

00:11:47,359  -->  00:11:50,776
so retirementIceland, and then also 1990,
232

232

00:11:52,765  -->  00:11:56,097
and if I now run this, we have three different ages,
233

233

00:11:56,097  -->  00:11:58,283
actually, three different years,
234

234

00:11:58,283  -->  00:12:00,150
that the person has left until retirement.
235

235

00:12:00,150  -->  00:12:04,317
So 39 in Germany, 40 in the US, and 41 in Iceland.
236

236

00:12:05,942  -->  00:12:10,109
And all of this is possible thanks to the power of closures.
237

237

00:12:11,946  -->  00:12:15,004
Okay, now, just to finish this,
238

238

00:12:15,004  -->  00:12:18,429
I have a very small challenge for you, and this challenge is
239

239

00:12:18,429  -->  00:12:22,289
that you should rewrite the interviewqQuestion function
240

240

00:12:22,289  -->  00:12:24,350
that we wrote in another lecture,
241

241

00:12:24,350  -->  00:12:27,032
but this time using the power of closures.
242

242

00:12:27,032  -->  00:12:31,522
And the function that I'm talking about is, let's see,
243

243

00:12:31,522  -->  00:12:33,522
yep, it's this one here.
244

244

00:12:35,387  -->  00:12:36,887
So let me copy it,
245

245

00:12:37,887  -->  00:12:39,054
paste it here,
246

246

00:12:40,825  -->  00:12:44,242
okay, and I'm gonna comment it out, okay?
247

247

00:12:45,692  -->  00:12:48,381
So again, I now want you to write this,
248

248

00:12:48,381  -->  00:12:50,264
using the power of closures.
249

249

00:12:50,264  -->  00:12:54,347
So please pause the video now, and do that, okay?
250

250

00:12:57,761  -->  00:13:00,715
Okay, so I hope that you managed to do it.
251

251

00:13:00,715  -->  00:13:03,162
So let's now see the solution.
252

252

00:13:03,162  -->  00:13:06,542
So of course, we again write the function,
253

253

00:13:06,542  -->  00:13:09,875
and it's again called interviewQuestion.
254

254

00:13:12,059  -->  00:13:14,392
And we still accept the job,
255

255

00:13:15,342  -->  00:13:16,368
but now the difference is
256

256

00:13:16,368  -->  00:13:19,117
that we will always return the same function,
257

257

00:13:19,117  -->  00:13:23,465
so there's only one return keyword in here, okay?
258

258

00:13:23,465  -->  00:13:26,798
So one function, which accepts the name,
259

259

00:13:28,291  -->  00:13:32,273
and then we do our if/else statement right in here,
260

260

00:13:32,273  -->  00:13:34,977
and that is possible because of closures,
261

261

00:13:34,977  -->  00:13:38,582
because we will be able to use the job argument,
262

262

00:13:38,582  -->  00:13:40,004
this one, right?
263

263

00:13:40,004  -->  00:13:41,783
Right here into this function,
264

264

00:13:41,783  -->  00:13:45,641
even after the interviewQuestion function has returned.
265

265

00:13:45,641  -->  00:13:47,005
Right?
266

266

00:13:47,005  -->  00:13:50,100
So let's now write our if/else statement in here.
267

267

00:13:50,100  -->  00:13:50,933
So job,
268

268

00:13:53,150  -->  00:13:53,983
designer,
269

269

00:13:57,048  -->  00:14:00,278
and I will then copy the code from up there,
270

270

00:14:00,278  -->  00:14:02,861
so then else if job is teacher,
271

271

00:14:12,802  -->  00:14:14,719
and then the else part.
272

272

00:14:16,847  -->  00:14:20,514
Okay, so if it's a designer, it's this code.
273

273

00:14:22,618  -->  00:14:26,451
There's of course no need to write this again.
274

274

00:14:27,657  -->  00:14:28,874
And this is for the teacher
275

275

00:14:28,874  -->  00:14:32,707
and this is for all the other jobs, basically.
276

276

00:14:34,004  -->  00:14:38,171
Okay, so let's now use this function for a teacher.
277

277

00:14:39,319  -->  00:14:41,152
So, interviewQuestion,
278

278

00:14:42,678  -->  00:14:44,906
let's say, teacher,
279

279

00:14:44,906  -->  00:14:47,252
and then we can call it right here.
280

280

00:14:47,252  -->  00:14:50,073
There's no need to save it in another variable,
281

281

00:14:50,073  -->  00:14:53,448
as I already showed you, right?
282

282

00:14:53,448  -->  00:14:55,602
And let's now run this,
283

283

00:14:55,602  -->  00:14:56,506
and it works.
284

284

00:14:56,506  -->  00:14:58,833
So what subject do you teach, John?
285

285

00:14:58,833  -->  00:15:00,832
So we see that this clearly a question
286

286

00:15:00,832  -->  00:15:03,140
for the teacher, right?
287

287

00:15:03,140  -->  00:15:06,024
So again, the difference between the two functions is
288

288

00:15:06,024  -->  00:15:09,274
that now, the decision is taken right inside
289

289

00:15:09,274  -->  00:15:12,660
of the function that we return, and that's possible
290

290

00:15:12,660  -->  00:15:15,127
because we can use the job variable
291

291

00:15:15,127  -->  00:15:17,353
to take this decision here, even
292

292

00:15:17,353  -->  00:15:21,701
after the interviewQuestion function has already returned.
293

293

00:15:21,701  -->  00:15:23,549
So when we first wrote this function,
294

294

00:15:23,549  -->  00:15:25,598
we didn't know about closures,
295

295

00:15:25,598  -->  00:15:29,512
so we wrote it this first original way here, right?
296

296

00:15:29,512  -->  00:15:31,442
But now, we don't need this anymore,
297

297

00:15:31,442  -->  00:15:35,302
because now we know about the power of closures, right?
298

298

00:15:35,302  -->  00:15:39,395
And so we can harness that power and effectively use them,
299

299

00:15:39,395  -->  00:15:41,073
because this is a better way of doing it.
300

300

00:15:41,073  -->  00:15:42,689
This is cleaner code.
301

301

00:15:42,689  -->  00:15:44,619
So we have only one function,
302

302

00:15:44,619  -->  00:15:47,768
and then the if inside of here.
303

303

00:15:47,768  -->  00:15:50,541
So let me explain it one last time, okay?
304

304

00:15:50,541  -->  00:15:55,415
So this function call here will return this function here,
305

305

00:15:55,415  -->  00:15:56,322
okay?
306

306

00:15:56,322  -->  00:15:58,393
And then, we call this function
307

307

00:15:58,393  -->  00:16:01,999
with the John parameter, the John argument,
308

308

00:16:01,999  -->  00:16:05,860
and then this execution context will close in
309

309

00:16:05,860  -->  00:16:09,486
over the variable object of the function that we had before,
310

310

00:16:09,486  -->  00:16:11,242
that we called before.
311

311

00:16:11,242  -->  00:16:14,434
So it will close in on the variables that we defined
312

312

00:16:14,434  -->  00:16:17,513
in the old function, which was the job variable,
313

313

00:16:17,513  -->  00:16:20,407
and so we can use this variable right
314

314

00:16:20,407  -->  00:16:23,954
into this function as well, and we do that in here.
315

315

00:16:23,954  -->  00:16:27,717
So here, in our if/else statement, we use the job variable
316

316

00:16:27,717  -->  00:16:31,708
of the interviewQuestion function that has already returned
317

317

00:16:31,708  -->  00:16:36,174
by the point that we use this inner function here, right?
318

318

00:16:36,174  -->  00:16:39,538
So now, I hope that this is crystal-clear to you.
319

319

00:16:39,538  -->  00:16:41,964
Alright, and this was closures.
320

320

00:16:41,964  -->  00:16:43,711
And as you have seen, they allow us
321

321

00:16:43,711  -->  00:16:45,793
to do really powerful things,
322

322

00:16:45,793  -->  00:16:48,741
and you will see that in our project later.
323

323

00:16:48,741  -->  00:16:51,782
So make sure that you really understand closures.
324

324

00:16:51,782  -->  00:16:55,313
And I hope that you can see now why it was so important
325

325

00:16:55,313  -->  00:16:59,274
to learn all the JavaScript theory that I showed you before,
326

326

00:16:59,274  -->  00:17:02,830
because without that, you would not be able to understand
327

327

00:17:02,830  -->  00:17:04,799
what I just showed you in this lecture,
328

328

00:17:04,799  -->  00:17:07,889
because this was really, really advanced stuff.
329

329

00:17:07,889  -->  00:17:10,706
So if you understood this lecture,
330

330

00:17:10,706  -->  00:17:13,375
then nothing can stop you anymore on your path
331

331

00:17:13,375  -->  00:17:16,827
to become a really amazing JavaScript developer.
332

332

00:17:16,827  -->  00:17:19,160
So how cool is that, right?
