1
1

00:00:01,130  -->  00:00:04,371
<v ->After checking out an example of Asynchronous JavaScript,</v>
2

2

00:00:04,371  -->  00:00:06,321
let's now dive in a bit deeper
3

3

00:00:06,321  -->  00:00:08,214
and learn everything you need to know
4

4

00:00:08,214  -->  00:00:11,055
about Synchronous and Asynchronous JavaScript code,
5

5

00:00:11,055  -->  00:00:13,873
as well as the Event Loop.
6

6

00:00:13,873  -->  00:00:16,062
All the code we've been writing in this course
7

7

00:00:16,062  -->  00:00:19,432
up until this point has always been Synchronous code.
8

8

00:00:19,432  -->  00:00:21,535
Which simply means that one statement
9

9

00:00:21,535  -->  00:00:24,100
is processed after the other, line by line,
10

10

00:00:24,100  -->  00:00:26,977
in a single thread in the JavaScript engine.
11

11

00:00:26,977  -->  00:00:30,834
Something like this is an example of Synchronous JavaScript,
12

12

00:00:30,834  -->  00:00:32,657
where the first function is executed,
13

13

00:00:32,657  -->  00:00:34,671
logs "Hey There!" to the console,
14

14

00:00:34,671  -->  00:00:36,487
calls the second function,
15

15

00:00:36,487  -->  00:00:39,262
which then prints "How are you doing?" to the console,
16

16

00:00:39,262  -->  00:00:43,090
nd then finally "The end" is logged to the console
17

17

00:00:43,090  -->  00:00:46,676
One instruction after the other in a Synchronous way.
18

18

00:00:46,676  -->  00:00:50,406
This here is an example from our previous lecture.
19

19

00:00:50,406  -->  00:00:51,505
And as we learned,
20

20

00:00:51,505  -->  00:00:54,361
this one involves some Asynchronous JavaScript.
21

21

00:00:54,361  -->  00:00:56,336
Again the first function gets called,
22

22

00:00:56,336  -->  00:00:58,370
logs "Hey There!" to the console,
23

23

00:00:58,370  -->  00:01:00,828
and then calls the second function.
24

24

00:01:00,828  -->  00:01:03,939
Now this function calls the Set Timeout function,
25

25

00:01:03,939  -->  00:01:06,807
which is basically like a timer that will execute
26

26

00:01:06,807  -->  00:01:09,100
the callback function that we passed into it,
27

27

00:01:09,100  -->  00:01:11,179
after 2 000 milliseconds.
28

28

00:01:11,179  -->  00:01:15,026
However this will not make the code stop for two seconds,
29

29

00:01:15,026  -->  00:01:17,059
but instead the function returns,
30

30

00:01:17,059  -->  00:01:20,718
goes back to the first function and logs "The end".
31

31

00:01:20,718  -->  00:01:23,328
Then after the two seconds actually have passed,
32

32

00:01:23,328  -->  00:01:26,714
Async "Hey There!" is logged to the console.
33

33

00:01:26,714  -->  00:01:28,361
Now, why does the code move on,
34

34

00:01:28,361  -->  00:01:31,453
instead of waiting for the timer to finish?
35

35

00:01:31,453  -->  00:01:33,625
Well, before I show you how and why
36

36

00:01:33,625  -->  00:01:35,798
this actually works behind the scenes,
37

37

00:01:35,798  -->  00:01:38,913
let me quickly show you another example.
38

38

00:01:38,913  -->  00:01:41,562
Suppose we select an image from our DOM
39

39

00:01:41,562  -->  00:01:44,509
and pass it into a Process Large Image function,
40

40

00:01:44,509  -->  00:01:46,077
that we created.
41

41

00:01:46,077  -->  00:01:48,685
We know that this function is gonna take some time
42

42

00:01:48,685  -->  00:01:50,383
to process the image.
43

43

00:01:50,383  -->  00:01:54,094
And just like before we don't want the code to have to wait.
44

44

00:01:54,094  -->  00:01:57,150
So we don't want it to stop while the image is processing,
45

45

00:01:57,150  -->  00:02:00,318
because that would be terrible in some situations.
46

46

00:02:00,318  -->  00:02:04,415
What we do here is to also pass in a Callback function,
47

47

00:02:04,415  -->  00:02:06,035
that we want to be called
48

48

00:02:06,035  -->  00:02:09,237
as soon as the function is done processing.
49

49

00:02:09,237  -->  00:02:13,104
And just like that we have created Asynchronous code.
50

50

00:02:13,104  -->  00:02:16,754
That is the whole philosophy behind Asynchronous JavaScript.
51

51

00:02:16,754  -->  00:02:19,520
We do not wait for a function to finish its work,
52

52

00:02:19,520  -->  00:02:21,723
and then do something with the result.
53

53

00:02:21,723  -->  00:02:24,843
Instead we let that function do its job in the background,
54

54

00:02:24,843  -->  00:02:27,897
so that we can move on with the code execution.
55

55

00:02:27,897  -->  00:02:29,993
We then also pass in a callback function,
56

56

00:02:29,993  -->  00:02:32,448
that will be called as soon as the main function
57

57

00:02:32,448  -->  00:02:34,759
has done whatever it had to do.
58

58

00:02:34,759  -->  00:02:36,442
We then move on immediately,
59

59

00:02:36,442  -->  00:02:38,462
so that the code is never blocked.
60

60

00:02:38,462  -->  00:02:40,555
Which means that it can keep processing the code
61

61

00:02:40,555  -->  00:02:42,946
in a Synchronous way, line by line.
62

62

00:02:42,946  -->  00:02:45,036
Because if the code is actually blocked,
63

63

00:02:45,036  -->  00:02:48,211
then nothing really works on the page during that time.
64

64

00:02:48,211  -->  00:02:50,044
For example you can't click any buttons,
65

65

00:02:50,044  -->  00:02:51,878
or anything like that.
66

66

00:02:51,878  -->  00:02:55,011
So, in summary, we can use callback functions
67

67

00:02:55,011  -->  00:02:57,673
to defer actions into the future.
68

68

00:02:57,673  -->  00:03:00,549
In order to make our code non-blocking.
69

69

00:03:00,549  -->  00:03:02,093
But how does that actually work
70

70

00:03:02,093  -->  00:03:04,245
behind the scenes of JavaScript?
71

71

00:03:04,245  -->  00:03:07,828
Well, that's where the Event Loop comes in.
72

72

00:03:08,769  -->  00:03:10,756
The Event Loop is part of the bigger picture
73

73

00:03:10,756  -->  00:03:13,002
of what happens behind the scenes of JavaScript,
74

74

00:03:13,002  -->  00:03:17,311
when we call functions and handle events like DOM events.
75

75

00:03:17,311  -->  00:03:19,669
We already talked about the Execution Stack
76

76

00:03:19,669  -->  00:03:21,448
and also about the Message Queue,
77

77

00:03:21,448  -->  00:03:23,445
when we first talked about events.
78

78

00:03:23,445  -->  00:03:26,572
So this should be nothing new to you at this point.
79

79

00:03:26,572  -->  00:03:29,038
What is new here is the Event Loop,
80

80

00:03:29,038  -->  00:03:31,092
as well as the Web APIs,
81

81

00:03:31,092  -->  00:03:33,331
which together with the Execution Stack
82

82

00:03:33,331  -->  00:03:36,945
and the Message Queue make up our JavaScript runtime.
83

83

00:03:36,945  -->  00:03:40,250
This runtime is responsible for how JavaScript works
84

84

00:03:40,250  -->  00:03:43,479
behind the scenes as it executes our code.
85

85

00:03:43,479  -->  00:03:46,387
It's extremely important to understand how all these pieces
86

86

00:03:46,387  -->  00:03:50,381
fit together in order to execute Asynchronous JavaScript.
87

87

00:03:50,381  -->  00:03:53,338
Let's now take a look at how the code from the last lecture
88

88

00:03:53,338  -->  00:03:56,924
is executed inside our JavaScript engine, line by line.
89

89

00:03:56,924  -->  00:03:59,352
It starts by calling the first function,
90

90

00:03:59,352  -->  00:04:00,716
and as we already know,
91

91

00:04:00,716  -->  00:04:03,119
an Execution Context for that function
92

92

00:04:03,119  -->  00:04:05,475
is put on top of the Execution Stack,
93

93

00:04:05,475  -->  00:04:08,046
which can also be called the Call Stack.
94

94

00:04:08,046  -->  00:04:09,804
In the next line of code,
95

95

00:04:09,804  -->  00:04:11,587
the console dot log function is called
96

96

00:04:11,587  -->  00:04:13,973
and a new Execution Context is created
97

97

00:04:13,973  -->  00:04:16,385
and the text is logged to the console.
98

98

00:04:16,385  -->  00:04:17,558
Then the function returns
99

99

00:04:17,558  -->  00:04:20,889
and the Execution Context pops off the stack.
100

100

00:04:20,889  -->  00:04:22,959
Moving on to the second function,
101

101

00:04:22,959  -->  00:04:25,293
a new Execution Context is created
102

102

00:04:25,293  -->  00:04:29,511
and in the next line the Set Timeout function is called.
103

103

00:04:29,511  -->  00:04:33,172
Which causes yet another Execution Context to be created.
104

104

00:04:33,172  -->  00:04:34,330
Now, before we move on,
105

105

00:04:34,330  -->  00:04:37,922
where does this Set Timeout function actually come from?
106

106

00:04:37,922  -->  00:04:40,864
It's part of something called the Web APIs.
107

107

00:04:40,864  -->  00:04:44,444
Which actually live outside the JavaScript engine itself.
108

108

00:04:44,444  -->  00:04:46,395
Stuff like DOM manipulation methods,
109

109

00:04:46,395  -->  00:04:49,657
Set Timeout, HTTP requests for AJAX,
110

110

00:04:49,657  -->  00:04:53,489
geolocation, local storage and tons of other things,
111

111

00:04:53,489  -->  00:04:56,727
actually live outside of the JavaScript engine.
112

112

00:04:56,727  -->  00:04:58,112
We just have access to them
113

113

00:04:58,112  -->  00:05:01,261
because they are also in a JavaScript runtime.
114

114

00:05:01,261  -->  00:05:03,250
This is exactly where the timer
115

115

00:05:03,250  -->  00:05:06,707
will keep running for two seconds, asynchronously of course,
116

116

00:05:06,707  -->  00:05:10,459
so that our code can keep running without being blocked.
117

117

00:05:10,459  -->  00:05:12,321
When we call the Set Timeout function,
118

118

00:05:12,321  -->  00:05:15,011
the timer is created, together of course,
119

119

00:05:15,011  -->  00:05:16,640
with our callback function.
120

120

00:05:16,640  -->  00:05:19,620
Right inside the Web APIs environment.
121

121

00:05:19,620  -->  00:05:21,445
And there it keeps sitting until
122

122

00:05:21,445  -->  00:05:25,067
it finishes its work all in an Asynchronous way.
123

123

00:05:25,067  -->  00:05:28,107
Again, the callback function is not called right now,
124

124

00:05:28,107  -->  00:05:30,929
but instead it stays attached to the timer
125

125

00:05:30,929  -->  00:05:32,429
until it finishes.
126

126

00:05:33,358  -->  00:05:35,863
And since the timer keeps working,
127

127

00:05:35,863  -->  00:05:38,951
basically in the background, we don't have to wait,
128

128

00:05:38,951  -->  00:05:41,665
and can keep executing our code.
129

129

00:05:41,665  -->  00:05:43,278
So let's do that.
130

130

00:05:43,278  -->  00:05:46,258
Next up, the Set Timeout function returns,
131

131

00:05:46,258  -->  00:05:48,372
pops off the stack and so does
132

132

00:05:48,372  -->  00:05:51,311
the Execution Context of the second function.
133

133

00:05:51,311  -->  00:05:52,722
Which now returns as well,
134

134

00:05:52,722  -->  00:05:56,122
and we are back to the initial first function.
135

135

00:05:56,122  -->  00:05:58,583
Now we just log the end to the console
136

136

00:05:58,583  -->  00:06:01,512
and we give ourselves a new Execution Context,
137

137

00:06:01,512  -->  00:06:06,033
print the text to the console and pop the text off again.
138

138

00:06:06,033  -->  00:06:08,147
Next the function returns and so
139

139

00:06:08,147  -->  00:06:10,519
we are back to our original state.
140

140

00:06:10,519  -->  00:06:13,010
Right now we have executed all our code
141

141

00:06:13,010  -->  00:06:14,529
in a Synchronous way,
142

142

00:06:14,529  -->  00:06:18,167
and have the timer run Asynchronously in the background.
143

143

00:06:18,167  -->  00:06:21,029
Let's suppose that our two seconds have passed
144

144

00:06:21,029  -->  00:06:23,106
and the timer disappears.
145

145

00:06:23,106  -->  00:06:25,971
But what happens to our callback function now?
146

146

00:06:25,971  -->  00:06:29,022
Well, it simply moves to the Message Queue,
147

147

00:06:29,022  -->  00:06:30,837
where it waits to be executed
148

148

00:06:30,837  -->  00:06:33,706
as soon as the Execution Stack is empty.
149

149

00:06:33,706  -->  00:06:36,831
This is exactly what happens with DOM events as well.
150

150

00:06:36,831  -->  00:06:37,664
Remember that?
151

151

00:06:37,664  -->  00:06:41,041
And that's because it actually works the exact same way.
152

152

00:06:41,041  -->  00:06:43,943
In the case of DOM events our event listeners
153

153

00:06:43,943  -->  00:06:46,021
sit in the Web APIs environment,
154

154

00:06:46,021  -->  00:06:48,502
waiting for a certain event to happen.
155

155

00:06:48,502  -->  00:06:50,562
And as soon as that event then happens,
156

156

00:06:50,562  -->  00:06:53,422
then the callback function is placed on a Message Queue,
157

157

00:06:53,422  -->  00:06:55,441
ready to be executed.
158

158

00:06:55,441  -->  00:06:57,745
Alright, so how are these callback functions
159

159

00:06:57,745  -->  00:06:59,721
in the Message Queue executed?
160

160

00:06:59,721  -->  00:07:03,111
And that's where, finally, the Event Loop comes in.
161

161

00:07:03,111  -->  00:07:06,217
The job of the Event Loop is to constantly monitor
162

162

00:07:06,217  -->  00:07:08,702
the Message Queue and the Execution Stack,
163

163

00:07:08,702  -->  00:07:11,262
and to push the first callback function in line
164

164

00:07:11,262  -->  00:07:15,754
onto the Execution Stack, as soon as the stack is empty.
165

165

00:07:15,754  -->  00:07:19,633
In our example here, right now the stack is empty, right?
166

166

00:07:19,633  -->  00:07:22,767
And we have one callback waiting to be executed.
167

167

00:07:22,767  -->  00:07:25,036
And the event loop takes the callback
168

168

00:07:25,036  -->  00:07:27,771
and pushes it onto the stack,
169

169

00:07:27,771  -->  00:07:32,069
where a new Execution Context is created for that function.
170

170

00:07:32,069  -->  00:07:33,031
And that's it.
171

171

00:07:33,031  -->  00:07:35,113
That's what the event loop does.
172

172

00:07:35,113  -->  00:07:37,436
Inside that callback function now,
173

173

00:07:37,436  -->  00:07:39,511
we simply run the log function,
174

174

00:07:39,511  -->  00:07:42,701
which logs Async "Hey There!" to the console.
175

175

00:07:42,701  -->  00:07:47,701
Then the context pops off the stack and we're done!
176

176

00:07:47,729  -->  00:07:50,528
Now if there were some callbacks waiting right now,
177

177

00:07:50,528  -->  00:07:52,826
like data coming back from an AJAX request,
178

178

00:07:52,826  -->  00:07:55,101
or the handler of a DOM event,
179

179

00:07:55,101  -->  00:07:57,521
then the Event Loop would continue pushing them
180

180

00:07:57,521  -->  00:08:00,692
onto the stack until all of them were processed.
181

181

00:08:00,692  -->  00:08:02,794
And that's how the event loop works.
182

182

00:08:02,794  -->  00:08:05,271
It's actually quite straight forward, right?
183

183

00:08:05,271  -->  00:08:06,104
But still,
184

184

00:08:06,104  -->  00:08:09,355
if you ask 95% of the JavaScript developers out there,
185

185

00:08:09,355  -->  00:08:12,390
they will not really be able to explain this stuff.
186

186

00:08:12,390  -->  00:08:15,710
And you just gained a huge competitive advantage over them.
187

187

00:08:15,710  -->  00:08:18,608
Now please just note, that the Set Timeout function,
188

188

00:08:18,608  -->  00:08:19,952
that we used here as an example,
189

189

00:08:19,952  -->  00:08:21,346
is really more to simulate
190

190

00:08:21,346  -->  00:08:24,014
a more real-world Asynchronous function,
191

191

00:08:24,014  -->  00:08:27,019
like doing an AJAX request to fetch some data
192

192

00:08:27,019  -->  00:08:30,010
from an external API, just like we're gonna do
193

193

00:08:30,010  -->  00:08:32,562
in one of the next lectures, okay?
194

194

00:08:32,562  -->  00:08:34,777
I hope this made sense to you,
195

195

00:08:34,777  -->  00:08:36,647
so that you're now ready to move on,
196

196

00:08:36,647  -->  00:08:39,897
in order to use this stuff in practice.
