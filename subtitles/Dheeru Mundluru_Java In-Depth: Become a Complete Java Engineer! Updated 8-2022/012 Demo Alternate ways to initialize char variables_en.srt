1
00:00:02,070 --> 00:00:02,950
Hello there.

2
00:00:02,969 --> 00:00:04,110
This is the De La Rue.

3
00:00:04,110 --> 00:00:05,100
And welcome back.

4
00:00:05,550 --> 00:00:09,900
In the last lecture, we have seen how a car variable can be declared.

5
00:00:10,170 --> 00:00:14,820
And we have seen that a car variable can be initialized using a calculator.

6
00:00:15,330 --> 00:00:18,750
So that's the typical way of initializing a car variable.

7
00:00:19,050 --> 00:00:25,260
We have also seen that a car variable can be initialized using an Unicode escape sequence, although

8
00:00:25,260 --> 00:00:26,550
that is not very common.

9
00:00:27,150 --> 00:00:31,740
Now a car variable can also be initialized using an integer.

10
00:00:32,490 --> 00:00:39,090
We know that a car variable value is internally represented using unsigned integer scheme.

11
00:00:39,630 --> 00:00:45,360
Now Java also allows us to assign an unsigned integer to a car variable.

12
00:00:45,720 --> 00:00:46,980
So that's also possible.

13
00:00:47,160 --> 00:00:53,730
But we know that unsigned integer has the range 0 to 65000 535.

14
00:00:54,210 --> 00:00:58,380
So we can assign any value in that range to a car variable.

15
00:00:58,410 --> 00:01:00,060
So we can do that.

16
00:01:00,060 --> 00:01:01,620
But that is very uncommon.

17
00:01:01,860 --> 00:01:04,650
So let's go ahead and see what happens if we do that.

18
00:01:04,680 --> 00:01:10,230
So let's head over to our Basics Demo class, and we already have this primitives method.

19
00:01:10,440 --> 00:01:12,810
So let's write a few statements here.

20
00:01:13,020 --> 00:01:14,880
So let's define a few variables here.

21
00:01:14,880 --> 00:01:22,170
We already have these different variables where we initialized eight variables using some integrators

22
00:01:22,170 --> 00:01:24,990
but of different formats.

23
00:01:25,260 --> 00:01:27,780
Here is the hexadecimal, binary, and the octal.

24
00:01:27,930 --> 00:01:29,730
So let's just do the same thing.

25
00:01:29,730 --> 00:01:35,670
Let's declare a variable called car and let's call it as car end.

26
00:01:36,300 --> 00:01:38,650
Here, this value corresponds to 65.

27
00:01:38,670 --> 00:01:42,390
So here what we will do is let's use the same value, 65.

28
00:01:44,420 --> 00:01:51,020
Let me also declare a few more variations, because the literal 65 can also be represented using these

29
00:01:51,020 --> 00:01:52,220
different variations.

30
00:01:53,180 --> 00:01:56,150
So let's call it us car hex here.

31
00:01:56,150 --> 00:02:02,630
We call it US and Hex and here let's call it as car hex and let's use the same number here.

32
00:02:03,580 --> 00:02:06,100
So we know that this translates to 65.

33
00:02:06,130 --> 00:02:08,229
And let's also show for.

34
00:02:09,550 --> 00:02:11,800
The binary for the binary version.

35
00:02:11,800 --> 00:02:17,170
Let's call it a car binary and let's use the same value here.

36
00:02:17,320 --> 00:02:21,130
And this also we know maps to 65.

37
00:02:22,120 --> 00:02:22,600
Right.

38
00:02:22,750 --> 00:02:24,220
And let's print them.

39
00:02:34,150 --> 00:02:34,500
Okay.

40
00:02:34,570 --> 00:02:36,190
Let's copy these names.

41
00:02:44,940 --> 00:02:45,040
Okay.

42
00:02:45,120 --> 00:02:47,850
So the primitives method is invoked from the main method.

43
00:02:47,880 --> 00:02:51,240
So let's go ahead and just compile and execute it.

44
00:02:52,020 --> 00:02:56,100
So we need to be in the basics directory because that's where the basics demo class is.

45
00:03:02,650 --> 00:03:08,440
Here we are printing the eight variables, which is from the last demo, previous demo, one of the

46
00:03:08,440 --> 00:03:09,250
previous demos.

47
00:03:09,250 --> 00:03:13,150
And here we are displaying the car variables which we just declared.

48
00:03:13,480 --> 00:03:20,650
So as you can see in all of these statements, it is printing the value a the character A because in

49
00:03:20,650 --> 00:03:26,620
UTF 16, the decimal 65 corresponds to the uppercase a uppercase letter.

50
00:03:26,620 --> 00:03:33,060
A So in the last lecture we have used the character B which maps to 66 but 65.

51
00:03:33,070 --> 00:03:36,820
The previous one maps to the character a uppercase a.

52
00:03:36,850 --> 00:03:40,660
And same goes with this one hexadecimal number 41.

53
00:03:40,750 --> 00:03:47,350
Here it maps to 65 and 65 corresponds to character a n of 16.

54
00:03:47,770 --> 00:03:54,730
So that's why all of these three values here are printing the the character A and that's just because

55
00:03:54,730 --> 00:03:56,710
that data type is car here.

56
00:03:57,730 --> 00:04:01,480
Now, let me also make this minus one.

57
00:04:02,020 --> 00:04:03,730
So what would it do?

58
00:04:06,640 --> 00:04:13,060
It gives us a compilation error, says incompatible types because we are trying to assign this end to

59
00:04:13,060 --> 00:04:18,910
car and this range is outside of 0 to 65000 535.

60
00:04:19,360 --> 00:04:20,410
So that's the thing.

61
00:04:20,410 --> 00:04:26,710
Now if you assign 65,000 536, once again, you would get the same compilation error.

62
00:04:27,960 --> 00:04:30,600
Because of this, an out of range assignment.

63
00:04:31,720 --> 00:04:32,980
So that's what it is.

64
00:04:33,220 --> 00:04:38,890
And if you assign zero, it means it's a null character and it will not print anything.

65
00:04:39,770 --> 00:04:40,780
So that's what it is.

66
00:04:40,790 --> 00:04:48,680
And let me here, let me also assign let's do the reverse, which is let's call it as in car and let's

67
00:04:48,680 --> 00:04:51,020
assign a car value here.

68
00:04:51,090 --> 00:04:54,020
E So what do you think it would print here?

69
00:04:54,970 --> 00:04:58,090
Because the type is not on the left side.

70
00:04:58,090 --> 00:05:01,300
Because the type is ENT, it's got to print.

71
00:05:02,750 --> 00:05:05,450
The corresponding decimal value, right?

72
00:05:05,480 --> 00:05:07,230
So we are calling it as a car.

73
00:05:07,460 --> 00:05:10,790
It's an end data type and it should print the decimal 65.

74
00:05:15,000 --> 00:05:15,600
Here.

75
00:05:16,090 --> 00:05:17,010
65.

76
00:05:17,520 --> 00:05:22,140
So if you're assigning a car literal, it is to an end.

77
00:05:22,170 --> 00:05:27,380
It presents the corresponding end value of 16.

78
00:05:27,390 --> 00:05:34,980
And if you assign an intellectual to a car data type to a car variable, then it prints the corresponding

79
00:05:34,980 --> 00:05:37,140
UTF 16 character value.

80
00:05:38,140 --> 00:05:47,440
So an integer we know can be assigned to bite short and long, so it can also be assigned to care.

81
00:05:47,650 --> 00:05:49,400
But this is very uncommon.

82
00:05:49,420 --> 00:05:51,640
But we need to be aware of this.

83
00:05:52,000 --> 00:05:59,080
So we have seen that a car variable can be initialized with an character which is the most common case.

84
00:05:59,110 --> 00:06:06,370
It can also be initialized with a Unicode escape sequence, or it can also be initialized using an integer.

85
00:06:07,000 --> 00:06:08,080
So that's the thing.

86
00:06:08,080 --> 00:06:15,430
And internally it is stored as an unsigned integer whose range is 0 to 65000 535.

87
00:06:15,430 --> 00:06:16,840
And you need to memorize that.

88
00:06:17,750 --> 00:06:20,630
So that's all there is to car data type.

89
00:06:20,660 --> 00:06:23,840
Thank you and I will see you in the next lecture.

90
00:06:23,870 --> 00:06:24,830
Happy coding.

