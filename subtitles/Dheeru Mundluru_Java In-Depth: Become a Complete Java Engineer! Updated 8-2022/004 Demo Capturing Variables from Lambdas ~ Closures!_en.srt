1
00:00:02,150 --> 00:00:03,000
Hi there.

2
00:00:03,020 --> 00:00:04,190
This is Lou.

3
00:00:04,190 --> 00:00:05,120
And welcome back.

4
00:00:05,570 --> 00:00:11,960
Often when working with Lambda expressions from within our lambda expressions, we would like to access

5
00:00:11,960 --> 00:00:14,300
variables from the and close scope.

6
00:00:14,750 --> 00:00:17,630
That is the scope in which the lambda expression has been defined.

7
00:00:17,960 --> 00:00:23,570
Sometimes the scope can be a local method in which the lambda expression has been defined, or it can

8
00:00:23,570 --> 00:00:26,420
also be the class in which we have the lambda expression.

9
00:00:26,750 --> 00:00:32,540
So from from the lambda expression, we would like to access variables from the and scope so it can

10
00:00:32,540 --> 00:00:36,290
be a local variable that is defined in the and closed local method.

11
00:00:36,500 --> 00:00:42,800
Or it can also be an instance variable or a static variable defined in the same class.

12
00:00:42,830 --> 00:00:49,970
Right now, if it is a local variable defined in the enclosed method, then the rule is that then there

13
00:00:49,970 --> 00:00:56,030
is a constraint that the variable has to be effectively final, which means that the value should not

14
00:00:56,030 --> 00:00:56,540
change.

15
00:00:56,900 --> 00:01:04,280
Now if you recall, we discussed this in our nested classes chapter when discussing anonymous classes,

16
00:01:04,730 --> 00:01:07,940
and the same constraint also applies here.

17
00:01:08,360 --> 00:01:14,630
But I think it's better to discuss it one more time because it is very important and it will also kind

18
00:01:14,630 --> 00:01:16,040
of refresh our memory.

19
00:01:16,700 --> 00:01:21,000
So let's go ahead and implement that and see that in action.

20
00:01:21,020 --> 00:01:23,540
So this is the same class from the previous lecture.

21
00:01:23,540 --> 00:01:25,070
So we had this go method.

22
00:01:25,310 --> 00:01:30,920
So here, let's go ahead and declare a variable called count.

23
00:01:31,340 --> 00:01:32,840
So this is a local variable.

24
00:01:34,260 --> 00:01:40,290
Now let's create five threads over here and we will try to access this variable.

25
00:01:49,130 --> 00:01:52,300
So this is a threat and we need to pass the work.

26
00:01:52,310 --> 00:01:54,500
So we need to pass an instance of renewal.

27
00:01:54,530 --> 00:02:01,790
And we know that Learnable is an is a functional interface and we need to pass an instance of that.

28
00:02:01,790 --> 00:02:08,300
And so here we can define a lambda expression, which would be an implementation of the run method.

29
00:02:08,720 --> 00:02:11,030
So the run method does not accept any parameter.

30
00:02:11,039 --> 00:02:15,050
So you can have an empty parenthesis, then the arrow symbol.

31
00:02:15,320 --> 00:02:17,930
Now let's just print the value here.

32
00:02:19,690 --> 00:02:21,270
The value of coal.

33
00:02:21,610 --> 00:02:23,400
So this is just an expression here.

34
00:02:23,410 --> 00:02:25,900
So that's the body of the lambda expression.

35
00:02:26,140 --> 00:02:32,890
So here we are accessing the variable count, which is a local variable and the enclosed scope.

36
00:02:33,160 --> 00:02:36,250
Now this is called as capturing of the variables.

37
00:02:36,520 --> 00:02:37,810
That's what they call it as.

38
00:02:37,810 --> 00:02:40,930
So that's the terminology they use, capturing off variables.

39
00:02:41,170 --> 00:02:47,710
And in doing so, we refer to a lambda that is doing this, or even an anonymous class which is doing

40
00:02:47,710 --> 00:02:48,760
something like this.

41
00:02:49,150 --> 00:02:50,890
We refer to it as a closure.

42
00:02:51,010 --> 00:02:57,700
Now, if you dig deep into into lambda expressions or anonymous classes, if you read more about it,

43
00:02:57,730 --> 00:03:00,370
you will definitely run into this term called S closure.

44
00:03:00,820 --> 00:03:05,470
So just wanted to highlight that term also, which is commonly used in books.

45
00:03:05,800 --> 00:03:10,870
And so this is what it is, but you cannot do something like this.

46
00:03:11,950 --> 00:03:18,280
So as you can see, we are getting a compilation error because this has to be a final.

47
00:03:18,580 --> 00:03:20,350
This has to be effectively final.

48
00:03:20,860 --> 00:03:23,140
And so that's the thing.

49
00:03:23,920 --> 00:03:30,520
Now, we also demonstrated this and when discussing about anonymous classes, but with anonymous classes,

50
00:03:30,700 --> 00:03:36,160
the Java version that you might be using can be even Java seven or even before that.

51
00:03:36,280 --> 00:03:42,760
So in that case, if you want to access if it is a Java seven or anything before that, then the variable

52
00:03:42,760 --> 00:03:45,760
has to be declared with the modifier final.

53
00:03:46,330 --> 00:03:51,880
But if it is Java eight, it is fine and the anonymous class can directly use the variable without the

54
00:03:51,910 --> 00:03:55,840
modifier final, but it's got to be effectively final.

55
00:03:55,840 --> 00:04:02,170
So the value of count should not be incremented anywhere, whether it is in the anonymous class or whether

56
00:04:02,170 --> 00:04:03,820
it is even here.

57
00:04:04,210 --> 00:04:05,650
You cannot even do this.

58
00:04:06,800 --> 00:04:08,090
So that's the anonymous class.

59
00:04:08,120 --> 00:04:11,540
We have seen that in the Anonymous Class lecture, too.

60
00:04:11,570 --> 00:04:13,790
So this is kind of a refresher.

61
00:04:14,750 --> 00:04:21,120
And so one good use case, why it is done that way is through this example itself.

62
00:04:21,140 --> 00:04:26,810
So here we are having count and we are launching five different threads and the count variable is being

63
00:04:26,810 --> 00:04:27,470
passed.

64
00:04:27,890 --> 00:04:32,720
So the developer thinks that this count variable is being shared right now.

65
00:04:32,960 --> 00:04:35,650
Now, because these are all five different threads.

66
00:04:35,660 --> 00:04:43,760
So it may it may also happen that the go method might finish its execution before these threads run

67
00:04:43,760 --> 00:04:44,660
to completion.

68
00:04:44,870 --> 00:04:49,640
So in that case, GO would be popped off the stack and there will not be any count variable.

69
00:04:49,670 --> 00:04:56,150
Now, if that rule does not hold where the where it need not be effectively final, then it can happen

70
00:04:56,150 --> 00:04:57,890
that the count is incremented here.

71
00:04:58,190 --> 00:05:01,780
Then in that sense, this count also should be incremented.

72
00:05:01,790 --> 00:05:04,940
But then the method is popped off the stack and there is no count variable.

73
00:05:04,940 --> 00:05:05,510
Right.

74
00:05:05,660 --> 00:05:09,350
So the intention is not clear over there.

75
00:05:09,350 --> 00:05:09,770
So that.

76
00:05:10,060 --> 00:05:10,370
So.

77
00:05:10,400 --> 00:05:11,720
So because of that.

78
00:05:11,720 --> 00:05:18,110
So the language designers wanted to keep it simple and so they ensured that this has to be effectively

79
00:05:18,110 --> 00:05:18,720
final.

80
00:05:18,740 --> 00:05:24,800
So that's way that's one way of looking at it, where within this thread the count is incremented.

81
00:05:24,830 --> 00:05:30,980
But the another way is, let's say, for example, if we increment count here, then we also have to

82
00:05:31,250 --> 00:05:34,070
find all of these threads and increment the count.

83
00:05:34,340 --> 00:05:35,900
So it's all complicated.

84
00:05:35,900 --> 00:05:41,960
So to keep it simple, they wanted the the variable, the local variable to be effectively final.

85
00:05:42,440 --> 00:05:43,580
So that's the thing.

86
00:05:44,120 --> 00:05:46,550
And we call it as capturing of variables now.

87
00:05:46,550 --> 00:05:49,010
But let's take another example.

88
00:05:49,790 --> 00:05:55,520
The insert discount variable here can be an instance or a static variable to.

89
00:05:55,550 --> 00:05:59,150
So let's define another variable called global.

90
00:06:00,180 --> 00:06:01,320
Let's make it static.

91
00:06:01,500 --> 00:06:04,770
Static here, because this method is static.

92
00:06:06,740 --> 00:06:07,790
It's just call it.

93
00:06:09,540 --> 00:06:11,490
Let's just make a copy of this.

94
00:06:15,670 --> 00:06:16,900
And this is fine.

95
00:06:17,380 --> 00:06:18,450
So this is fine.

96
00:06:18,460 --> 00:06:20,390
So in this case, it's a static variable.

97
00:06:20,410 --> 00:06:25,630
But had this been an instance method, then we can also access an instance variable.

98
00:06:25,870 --> 00:06:29,170
But it's just that from the static method we cannot access instance variables.

99
00:06:29,320 --> 00:06:36,010
So this is fine, but still this is not good to do because the reason for that is because it's not safe.

100
00:06:36,400 --> 00:06:43,150
We have different threats and the different threats are sharing some data or sharing some mutable data.

101
00:06:43,150 --> 00:06:45,790
And because of that, it is not threat safe.

102
00:06:45,910 --> 00:06:47,560
So you should not be doing that.

103
00:06:48,340 --> 00:06:55,690
Now, with regards to this one, we are saying that it cannot be modified, but we can do a small trick

104
00:06:55,690 --> 00:06:59,130
here and we can cheat the system.

105
00:06:59,140 --> 00:07:01,330
And one way of doing it is.

106
00:07:02,280 --> 00:07:05,230
Let's create a variable and object here.

107
00:07:05,250 --> 00:07:06,900
So for it, let's call it list.

108
00:07:07,830 --> 00:07:08,510
Integer.

109
00:07:08,520 --> 00:07:10,110
So this will hold integers.

110
00:07:10,470 --> 00:07:11,860
Let's call it a trick.

111
00:07:16,020 --> 00:07:16,440
Okay.

112
00:07:16,920 --> 00:07:17,760
Now.

113
00:07:25,310 --> 00:07:26,660
Let's put a body here.

114
00:07:28,320 --> 00:07:32,250
Now let's say we'll set trick dot add.

115
00:07:35,100 --> 00:07:38,520
It's declared a variable temp and it's a trick.

116
00:07:38,630 --> 00:07:40,140
Dot get.

117
00:07:41,450 --> 00:07:44,810
So this is essentially our current value.

118
00:07:45,110 --> 00:07:48,260
Now let's set track set.

119
00:07:51,970 --> 00:07:56,410
So as you can see, we are just incrementing the count value in an indirect way.

120
00:07:56,590 --> 00:07:58,270
But you should not be doing that.

121
00:07:58,270 --> 00:07:59,170
It's not right.

122
00:07:59,620 --> 00:08:05,230
But so that's one that's a trick that you can play in order to increment something like count.

123
00:08:05,230 --> 00:08:06,760
But you shouldn't be doing that.

124
00:08:07,030 --> 00:08:14,740
And the second thing I want to say is now, as you can see, here we are, we are able to pass a list

125
00:08:14,740 --> 00:08:15,760
here, an object.

126
00:08:15,880 --> 00:08:23,800
And we are we are able to do something like this, but we cannot reassign trick to some other some other

127
00:08:23,800 --> 00:08:27,220
ArrayList because it has to be effectively final.

128
00:08:27,940 --> 00:08:32,679
Since it is effectively final with regards to an object, it just cannot be reassigned.

129
00:08:32,679 --> 00:08:37,390
But you can invoke other methods like ADD and things like that, and you can mutate the state.

130
00:08:37,390 --> 00:08:40,630
But once again, it's not threat safe, so you shouldn't be doing that.

131
00:08:41,169 --> 00:08:44,650
So it's just that in terms here, also it is effectively final.

132
00:08:44,680 --> 00:08:45,580
Just keep that in mind.

133
00:08:45,580 --> 00:08:49,330
It does not mean that it's only with primitives, but it is.

134
00:08:49,330 --> 00:08:52,380
It also holds good for object references.

135
00:08:52,390 --> 00:08:57,340
But with regards to object references, it just means that we cannot re assign to a different object.

136
00:08:57,340 --> 00:08:58,270
That's about it.

137
00:08:58,270 --> 00:09:03,780
But you can still mutate the state within the within the object, but it's not safe.

138
00:09:03,790 --> 00:09:08,080
So you need to take certain measures to avoid any unpredictable outcome.

139
00:09:08,990 --> 00:09:09,980
So that's the thing.

140
00:09:10,160 --> 00:09:12,350
And so that's about that.

141
00:09:12,350 --> 00:09:16,850
And we also discussed all of this when discussing local anonymous classes.

142
00:09:17,060 --> 00:09:22,260
Now, one other thing is about about a variable scope itself.

143
00:09:22,280 --> 00:09:28,810
So if you recall, we know that local variables cannot be shadowed, shadowed in a nested block.

144
00:09:28,820 --> 00:09:34,460
So, for example, if you have a loop here inside the loop, you cannot really clear.

145
00:09:34,460 --> 00:09:36,050
For example, you cannot do this.

146
00:09:37,530 --> 00:09:37,800
Right.

147
00:09:37,800 --> 00:09:40,830
You cannot do this because count is already declared.

148
00:09:40,830 --> 00:09:42,980
So we cannot shadow a local variable.

149
00:09:42,990 --> 00:09:46,590
This was discussed and that also applies to.

150
00:09:47,540 --> 00:09:50,930
That also applies to low to lambda expressions too.

151
00:09:51,260 --> 00:09:58,340
So for example, let's say there is a functional interface called consumer and we will discuss it later.

152
00:09:59,330 --> 00:10:01,670
But consumers like this.

153
00:10:03,850 --> 00:10:05,860
So this needs to be assigned a lambda.

154
00:10:06,160 --> 00:10:10,340
So consumer just has a single method called accept.

155
00:10:10,360 --> 00:10:12,130
So it takes a single parameter.

156
00:10:12,130 --> 00:10:17,410
So this would be the method parameter count and we can have an empty body here.

157
00:10:17,410 --> 00:10:24,160
But the thing is, it's giving us a compilation error because we are essentially re declaring the variable

158
00:10:24,160 --> 00:10:27,430
because it's a parameter, it's a method lambda parameter.

159
00:10:27,430 --> 00:10:29,530
So we are really clearing the variables.

160
00:10:29,530 --> 00:10:34,630
So we are trying to shadow this variable and as we know it cannot be shadowed, local variable cannot

161
00:10:34,630 --> 00:10:36,730
be shadowed, so it need not be.

162
00:10:36,730 --> 00:10:41,740
This rule applies to nested blocks and also lambda expressions now.

163
00:10:42,600 --> 00:10:43,800
Instead of that.

164
00:10:46,240 --> 00:10:48,130
So we can have something like this.

165
00:10:48,930 --> 00:10:52,980
But here we can also we cannot even do that.

166
00:10:54,020 --> 00:10:54,120
Okay.

167
00:10:54,380 --> 00:10:58,490
So I think this is pretty straightforward, but the important thing is you cannot even do this.

168
00:10:58,520 --> 00:11:04,160
So that's the main, main important thing to keep it, to keep in mind, because this is pretty straightforward.

169
00:11:04,730 --> 00:11:11,480
Now, if you recall from our anonymous classes, we said that no, not anonymous classes, but in the

170
00:11:11,480 --> 00:11:18,860
nested classes chapter, we had a lecture on variable scope and we said that a variable with ten nested

171
00:11:18,860 --> 00:11:24,650
class, like an anonymous class or a local class there you can shadow a local variable.

172
00:11:24,800 --> 00:11:32,780
So the shadowing of local variable is not possible in in methods except for nested classes like anonymous

173
00:11:32,780 --> 00:11:35,720
classes or local classes that are declared within the method.

174
00:11:35,720 --> 00:11:37,610
So for them it is an exception.

175
00:11:37,850 --> 00:11:41,240
So just to refresh our memory, let's also do that.

176
00:11:41,240 --> 00:11:44,210
So let's say new thread.

177
00:11:45,350 --> 00:11:45,670
Okay.

178
00:11:46,480 --> 00:11:47,060
And.

179
00:11:49,420 --> 00:11:50,170
Start.

180
00:11:51,770 --> 00:11:54,370
Let's implement a renewable.

181
00:12:01,490 --> 00:12:03,710
So here you can.

182
00:12:05,050 --> 00:12:05,860
Do this.

183
00:12:06,370 --> 00:12:08,530
And so there is no compilation error here.

184
00:12:12,310 --> 00:12:14,320
So just some syntax error.

185
00:12:14,710 --> 00:12:16,060
So that's the thing.

186
00:12:17,190 --> 00:12:24,270
And just to refresh our memory, while we cannot do this right, it's got to be effectively final.

187
00:12:25,460 --> 00:12:26,630
So that's the thing.

188
00:12:26,630 --> 00:12:33,080
So within the lambda, within an anonymous class or a local class, you can shadow a local variable.

189
00:12:33,200 --> 00:12:37,700
Now, one last thing I want to say is now within this.

190
00:12:39,430 --> 00:12:41,080
So let's just take this.

191
00:12:44,690 --> 00:12:46,730
Within a lambda you can use.

192
00:12:47,810 --> 00:12:48,920
This reference.

193
00:12:51,200 --> 00:12:55,980
And if you do that, you can it means that we are using the this reference of the enclosed method.

194
00:12:56,000 --> 00:13:01,570
So in this case, we are getting a compilation error because this thing here is a static.

195
00:13:01,580 --> 00:13:03,380
So we just need to make it an instance.

196
00:13:03,380 --> 00:13:06,980
So only then we can use a this reference and now we are good.

197
00:13:06,980 --> 00:13:08,960
So we are accessing the global variable.

198
00:13:09,080 --> 00:13:10,700
We are at this reference.

199
00:13:10,700 --> 00:13:16,910
So here this inside this lambda expression, it just means that we are using the this reference of the

200
00:13:16,910 --> 00:13:18,050
and closed method.

201
00:13:18,740 --> 00:13:26,720
So that's all there is about this variable scoping and capturing off variables and that's about it.

202
00:13:26,750 --> 00:13:28,580
Thank you and happy coding.

