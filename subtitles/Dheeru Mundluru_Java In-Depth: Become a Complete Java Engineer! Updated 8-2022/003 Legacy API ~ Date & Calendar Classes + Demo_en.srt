1
00:00:02,090 --> 00:00:02,880
Hi there.

2
00:00:02,900 --> 00:00:04,170
This is the remote Uluru.

3
00:00:04,370 --> 00:00:10,070
Let's get started by exploring the date and time classes that were used prior to Java eight.

4
00:00:10,520 --> 00:00:16,490
And earlier we said that we are going to refer to them as legacy date and Time API and they are still

5
00:00:16,490 --> 00:00:17,510
widely used.

6
00:00:17,540 --> 00:00:23,630
And we will discuss a bit about the core classes and then we will see them action in the demo at the

7
00:00:23,630 --> 00:00:24,650
end of this lecture.

8
00:00:26,460 --> 00:00:31,620
And here are the commonly used classes, the date class, the calendar class, Gregorian calendar and

9
00:00:31,620 --> 00:00:32,790
the time zone class.

10
00:00:33,090 --> 00:00:40,210
And all of these are part of the Java util package and the date class was there from the very beginning.

11
00:00:40,230 --> 00:00:46,260
That is from Java one onwards and it also encapsulates time information in addition to date.

12
00:00:46,800 --> 00:00:52,830
And the date class is considered to be having several issues and one of them is to do with usability.

13
00:00:53,810 --> 00:00:59,660
For instance, here we have the date June eight, 2016, and we can also see how a date instance is

14
00:00:59,660 --> 00:01:00,290
created.

15
00:01:00,620 --> 00:01:07,370
The first argument here is the year, and as we can see, instead of passing 2016, we are passing the

16
00:01:07,370 --> 00:01:08,990
value 116.

17
00:01:09,290 --> 00:01:14,600
That's because Date Class uses 1900 as the starting point for years.

18
00:01:14,720 --> 00:01:19,940
So 116 would get added to 1900 to get the correct year 2016.

19
00:01:20,750 --> 00:01:29,330
Now, if we pass 2016, then 2016 would be added to 1900 and we would end up with the year 3916.

20
00:01:29,960 --> 00:01:34,230
I guess by then most of the human population would have shifted to Mars.

21
00:01:34,250 --> 00:01:39,740
Right now we can also pass negative values to represent years before 1900.

22
00:01:40,340 --> 00:01:44,570
So to represent 1899, we would pass a value of minus one.

23
00:01:45,320 --> 00:01:50,670
And the second argument corresponds to month, and its range is in between zero and 11.

24
00:01:50,690 --> 00:01:53,030
So it's not between one and 12.

25
00:01:53,060 --> 00:01:54,170
It starts with zero.

26
00:01:54,350 --> 00:01:56,930
So here for June, we are passing the value file.

27
00:01:57,500 --> 00:02:01,070
The last argument is the day and it's changes in between one and 31.

28
00:02:01,670 --> 00:02:06,560
So as we can see, it's kind of confusing with the way years and months are handled.

29
00:02:08,280 --> 00:02:13,830
So to address the issues with the data class, the language designers introduced calendar and its subclass

30
00:02:13,830 --> 00:02:17,940
Gregorian calendar in Java 1.1, which is the next version.

31
00:02:18,420 --> 00:02:24,180
Calendar class is an abstract class and date class is still there for the sake of backward compatibility.

32
00:02:24,180 --> 00:02:30,660
But most of its methods and constructors have been deprecated and its specification recommends using

33
00:02:30,660 --> 00:02:32,850
similar methods from the calendar class.

34
00:02:34,350 --> 00:02:38,560
No calendar class also has some issues like the date class.

35
00:02:38,580 --> 00:02:41,910
It still uses a range of zero and for the month field.

36
00:02:42,360 --> 00:02:48,540
But the problem with the year has been fixed, so we would pass 2016 and not 116 anymore.

37
00:02:50,140 --> 00:02:55,870
Also calendar classes and the date class are mutable, which means that they are not threats if.

38
00:02:57,740 --> 00:03:01,550
Moreover, we now have two classes doing similar kinds of things.

39
00:03:01,760 --> 00:03:08,270
So it was confusing for developers and because of such issues with these classes, some developers would

40
00:03:08,270 --> 00:03:11,180
use third party libraries like time.

41
00:03:11,570 --> 00:03:17,570
So time is a third party library and with Java eight we have the new data time API that would address

42
00:03:17,570 --> 00:03:21,920
these issues and is considered far superior as we will look at it later.

43
00:03:22,880 --> 00:03:23,300
Here.

44
00:03:23,300 --> 00:03:28,910
We also have the time zone class which was also introduced in Java 1.1 and we will look at it in the

45
00:03:28,910 --> 00:03:29,360
demo.

46
00:03:29,720 --> 00:03:33,530
So let's actually go ahead and look at all of these classes in action.

47
00:03:35,890 --> 00:03:36,050
Okay.

48
00:03:36,100 --> 00:03:42,910
So for this demo, I have created this new class called a date time demo in a new package called Semantic

49
00:03:42,910 --> 00:03:44,290
Square DateTime.

50
00:03:44,590 --> 00:03:47,830
Here it is calm, semantics, clear date time, and it's a new class.

51
00:03:47,830 --> 00:03:53,120
And I created this new method here, called US Test Legacy Date API.

52
00:03:53,140 --> 00:03:55,900
Since we are testing the Legacy Data API.

53
00:03:56,170 --> 00:03:59,200
So here it's being invoked here from the main method.

54
00:03:59,870 --> 00:04:02,540
And here we are going to demonstrate a few things.

55
00:04:02,540 --> 00:04:07,490
Few of the classes, the date class, the calendar class and some of the code has already been written

56
00:04:07,490 --> 00:04:09,230
to demonstrate the time zone.

57
00:04:09,290 --> 00:04:14,210
So we are just going to look at this code in the interest of time and some code we are going to write.

58
00:04:14,240 --> 00:04:17,029
So let's just go ahead and start with the date class.

59
00:04:17,730 --> 00:04:22,200
So for the data class, which is from the Java package, we will simply do date.

60
00:04:23,560 --> 00:04:24,460
Current date.

61
00:04:27,040 --> 00:04:28,450
And it's just printed.

62
00:04:33,120 --> 00:04:37,700
So they're classes inside Java and it's also there in Java SQL.

63
00:04:37,710 --> 00:04:39,660
So this is what we are going to use for now.

64
00:04:39,960 --> 00:04:41,370
So that's it.

65
00:04:42,440 --> 00:04:43,490
In an apprentice.

66
00:04:46,410 --> 00:04:50,010
And there's also a method called get time within the date class.

67
00:04:50,010 --> 00:04:51,210
Let's also invoke that.

68
00:04:51,600 --> 00:04:53,520
So let me just copy this.

69
00:04:57,040 --> 00:05:03,000
And this word returned the current instance of time, so it would return the time in milliseconds.

70
00:05:03,010 --> 00:05:09,340
So this would create an instance on the an instance of time, a timestamp on the timeline, which we

71
00:05:09,340 --> 00:05:17,260
know that is a time that is that is relative to APIC time, which is it starts on January 1st of 1970.

72
00:05:17,650 --> 00:05:22,990
So that would and the milliseconds since then would be printed here with this particular invocation

73
00:05:22,990 --> 00:05:23,920
called Get Time.

74
00:05:24,190 --> 00:05:26,710
So let me just go ahead and run this.

75
00:05:29,210 --> 00:05:30,450
So here it is.

76
00:05:30,470 --> 00:05:34,940
So when we just print current debt, it is going to print in this format.

77
00:05:35,270 --> 00:05:41,060
And since this program is running in India, so it prints the ISD, which is nothing but the Indian

78
00:05:41,060 --> 00:05:41,660
standard time.

79
00:05:41,660 --> 00:05:42,980
So that's the time zone.

80
00:05:42,980 --> 00:05:48,230
And this is the month day and the time and the year.

81
00:05:49,010 --> 00:05:52,010
And this is the day, the week, the day of the week.

82
00:05:52,310 --> 00:05:58,160
And it's also printing in milliseconds the same value in milliseconds since the APIC time.

83
00:05:58,980 --> 00:06:05,370
So basically that represents a specific instant in time with millisecond precision.

84
00:06:06,030 --> 00:06:08,160
Now, so this is deprecated.

85
00:06:08,160 --> 00:06:10,390
So let me just show you the API.

86
00:06:10,410 --> 00:06:13,830
So this is the API from the Java package.

87
00:06:14,130 --> 00:06:16,800
And like you said, it is from Java 1.0.

88
00:06:17,840 --> 00:06:19,130
So it's there from the beginning.

89
00:06:19,130 --> 00:06:24,710
As you can see, most of the constructors have been deprecated and this is the default is there and

90
00:06:24,710 --> 00:06:32,210
this one is there where you can pass as a specific time in milliseconds here and it would create the

91
00:06:32,210 --> 00:06:33,080
date instance.

92
00:06:33,290 --> 00:06:37,340
And as you can see, most of these methods here are deprecated.

93
00:06:37,340 --> 00:06:41,090
There are few in the beginning, but like the after and before.

94
00:06:41,090 --> 00:06:47,780
But all others have been deprecated and it is suggested to use the methods in calendar class, which

95
00:06:47,780 --> 00:06:49,670
we are also going to test next.

96
00:06:50,680 --> 00:06:55,510
So as you can see, almost all of the methods have been deprecated in this particular class, but the

97
00:06:55,510 --> 00:06:57,130
class itself is still used.

98
00:06:57,160 --> 00:07:01,120
So let me show you the code in one of my projects here.

99
00:07:01,210 --> 00:07:03,220
It's called as a user class.

100
00:07:03,460 --> 00:07:05,200
So this represents an entity.

101
00:07:05,200 --> 00:07:07,990
It's actually the code from the trivial project.

102
00:07:08,230 --> 00:07:12,610
Now, this is an entity which maps to a database record.

103
00:07:12,850 --> 00:07:15,370
And here in this user class.

104
00:07:16,210 --> 00:07:19,150
You know, when the user registers, the user is.

105
00:07:20,200 --> 00:07:26,590
Represented by this particular by an instance of this class and the time when the user has has registered

106
00:07:26,590 --> 00:07:27,400
in the website.

107
00:07:27,400 --> 00:07:30,640
So that is captured using this field called created date.

108
00:07:31,180 --> 00:07:34,900
And the data type for that is this Java date.

109
00:07:35,080 --> 00:07:40,000
Similarly, the last update date, which means that the date when the user has updated his profile.

110
00:07:40,000 --> 00:07:45,250
So that's also captured using this field and it also has the date field here and in the database.

111
00:07:45,250 --> 00:07:47,640
Let me show you the schema database schema.

112
00:07:47,650 --> 00:07:54,460
So this is the schema for that and for the created date field, the data type that is used in the database

113
00:07:54,460 --> 00:07:55,390
is date time.

114
00:07:55,840 --> 00:07:59,590
So in the code, in the Java code, it is date Java to date.

115
00:07:59,590 --> 00:08:04,870
But here that is that's going to get mapped to this particular date time or data type.

116
00:08:04,870 --> 00:08:07,960
And the database last updated date also has date time.

117
00:08:08,080 --> 00:08:12,100
And these are some values, some sample values for that particular field.

118
00:08:12,520 --> 00:08:14,230
So that is just for your information.

119
00:08:14,230 --> 00:08:20,380
So even though date is deprecated, it is still in use and it can be used in this kind of a context.

120
00:08:21,520 --> 00:08:24,760
So let me let's go back to our demo.

121
00:08:24,850 --> 00:08:27,880
So that's what the date class, there is nothing much beyond that.

122
00:08:27,880 --> 00:08:30,130
So now let's look at calendar class.

123
00:08:30,920 --> 00:08:36,250
Well, the calendar class is also like date class because we saw that in the date class, the methods

124
00:08:36,250 --> 00:08:41,860
have been deprecated and we were asked to use this class, but this class will also help us to manipulate

125
00:08:41,860 --> 00:08:42,820
the date class.

126
00:08:43,000 --> 00:08:47,890
So it has methods which were there in date class which were also doing the similar kind of stuff.

127
00:08:47,890 --> 00:08:52,810
But we also have those kinds of methods in the calendar class and they help us to manipulate the dates.

128
00:08:52,930 --> 00:08:56,290
So let's consider a real use case.

129
00:08:56,290 --> 00:09:03,220
Let's say that we have a certain software and it has some expiry date and we want to increase the expiry

130
00:09:03,220 --> 00:09:03,490
date.

131
00:09:03,820 --> 00:09:11,650
So let's say that expiration date is set to some value and then the user decides to extend the subscription.

132
00:09:11,650 --> 00:09:17,740
And so we need to be able to extend the subscription and so we can manipulate the calendar instance

133
00:09:17,740 --> 00:09:18,310
for that.

134
00:09:18,430 --> 00:09:18,610
Okay.

135
00:09:18,730 --> 00:09:21,670
So let's go ahead and create a calendar instance.

136
00:09:21,670 --> 00:09:28,390
Let's say calendar calendar is also from Java Digital and it's an abstract class and let's just call

137
00:09:28,390 --> 00:09:35,410
it as the expiry date, which means that the date when the software is being expired or the subscription

138
00:09:35,410 --> 00:09:39,040
is being expired and we can invoke.

139
00:09:39,980 --> 00:09:42,830
This subclass called Gregorian Calendar.

140
00:09:44,400 --> 00:09:46,320
And we can instantiate it.

141
00:09:46,860 --> 00:09:49,350
We can instantiate it with the air.

142
00:09:50,510 --> 00:09:51,590
Let's say June.

143
00:09:52,670 --> 00:09:53,180
30.

144
00:09:57,900 --> 00:09:58,140
Okay.

145
00:09:58,140 --> 00:10:02,460
So this is the Gregorian calendar and it's being instantiated to this particular date.

146
00:10:02,610 --> 00:10:04,830
So zero five here corresponds to June.

147
00:10:04,830 --> 00:10:10,130
So it's June 30, 2017, because the month starts from zero zero.

148
00:10:10,140 --> 00:10:14,520
So that's why for June, even though it is zero six, it's the sixth month it is zero five.

149
00:10:14,670 --> 00:10:16,620
So that's the expiry date.

150
00:10:16,680 --> 00:10:19,610
And now let's say we want to extend this by a month.

151
00:10:19,620 --> 00:10:24,900
So then there is a method called let's add within the calendar class and we can invoke that.

152
00:10:28,140 --> 00:10:31,800
And let's say we want to extend it by nine months.

153
00:10:31,920 --> 00:10:35,880
So let's put the amount as nine and field here.

154
00:10:36,330 --> 00:10:37,470
It has to be month.

155
00:10:37,470 --> 00:10:40,950
So there is a field called month within this calendar class.

156
00:10:42,000 --> 00:10:45,210
And we can just say calendar dot.

157
00:10:46,790 --> 00:10:47,180
Month.

158
00:10:47,180 --> 00:10:48,100
Here it is.

159
00:10:48,110 --> 00:10:53,120
So which means that we want to extend this particular date by nine months.

160
00:10:53,600 --> 00:10:55,700
So let's just go ahead and print it.

161
00:10:57,560 --> 00:10:58,760
Just copy this.

162
00:11:01,060 --> 00:11:03,100
Must let's print expiry date.

163
00:11:09,750 --> 00:11:13,920
Let's also print it as it is without invoking the get time.

164
00:11:13,920 --> 00:11:19,200
There is a method called get time there within the calendar class and let's also print the new expiry

165
00:11:19,200 --> 00:11:19,680
date.

166
00:11:22,810 --> 00:11:24,880
Which is called a new expiry date.

167
00:11:25,180 --> 00:11:27,460
So let me just go ahead and.

168
00:11:29,200 --> 00:11:29,980
And this.

169
00:11:30,310 --> 00:11:31,420
So here it is.

170
00:11:31,420 --> 00:11:33,280
So the two string is printing something.

171
00:11:33,280 --> 00:11:34,960
Let's, let's not worry about it.

172
00:11:34,960 --> 00:11:38,110
But for the expiry date, as you can see, it prints.

173
00:11:38,440 --> 00:11:40,840
It opens June 30, 2017.

174
00:11:41,710 --> 00:11:43,540
So the time we did not mention any time.

175
00:11:43,540 --> 00:11:50,890
So it's it's like the midnight and we have added nine now and nine is added to the month.

176
00:11:51,160 --> 00:11:57,550
So there is an overflow of the month and it and the next larger field is the year.

177
00:11:57,550 --> 00:12:00,490
So to year one is added here.

178
00:12:00,490 --> 00:12:02,650
So that's what the add method is going to do.

179
00:12:02,680 --> 00:12:08,380
So the so the final date that we have is this one March 30 of 2018.

180
00:12:08,800 --> 00:12:11,260
So it has been increased by nine months.

181
00:12:11,500 --> 00:12:17,800
So to the ADD method, if the month is going to overflow because the range for month is from 0 to 11,

182
00:12:17,800 --> 00:12:24,310
if it's going to overflow, then then it's going to add to the next larger field, which is the which

183
00:12:24,310 --> 00:12:25,330
is the air field.

184
00:12:25,900 --> 00:12:29,380
Now let's make this actually eight.

185
00:12:29,380 --> 00:12:30,790
So it is March, right?

186
00:12:30,790 --> 00:12:32,650
So let's make it eight now.

187
00:12:33,850 --> 00:12:38,020
It should be February, but February does not have 30 days.

188
00:12:38,020 --> 00:12:38,350
Right?

189
00:12:38,350 --> 00:12:39,790
So let's see what happens.

190
00:12:41,640 --> 00:12:46,320
So as you can see, it is making the date as February 28.

191
00:12:47,220 --> 00:12:48,510
So that's what is happening.

192
00:12:48,510 --> 00:12:53,550
So that day field here has been adjusted to 28 to the nearest valid value.

193
00:12:53,970 --> 00:12:55,830
So that's what is happening here.

194
00:12:56,890 --> 00:12:59,400
Now there is another method called Let's Roll.

195
00:12:59,410 --> 00:13:01,780
Let's also try that and let's see what happens.

196
00:13:07,560 --> 00:13:10,020
Let's increase it by 11.

197
00:13:10,020 --> 00:13:13,110
But instead of add, it has to be rural.

198
00:13:15,230 --> 00:13:16,550
You may copy this.

199
00:13:24,060 --> 00:13:32,100
Now here we have added 11 months, but with the role we can see that it is the year is still 2018 and

200
00:13:32,100 --> 00:13:34,410
the month is January, which is fine.

201
00:13:34,410 --> 00:13:38,820
It has been increased by 11 months, but the year is still at 2018.

202
00:13:38,820 --> 00:13:41,340
So that's the main difference between role and AD.

203
00:13:41,340 --> 00:13:43,350
So that's what is going to happen.

204
00:13:43,350 --> 00:13:49,530
But so for the larger value, for the next larger field, which is the year, so nothing is going to

205
00:13:49,530 --> 00:13:50,070
change.

206
00:13:50,310 --> 00:13:57,510
But how do we used role here for the month then it would have given us the same kind of the same kind

207
00:13:57,510 --> 00:13:59,370
of result that we had for ad.

208
00:13:59,370 --> 00:14:05,010
So we the date was adjusted from 30 to 28 and that would happen here also.

209
00:14:05,010 --> 00:14:07,320
So let me just do that here role.

210
00:14:10,260 --> 00:14:11,130
Here it is.

211
00:14:11,400 --> 00:14:16,810
So for the year it remained as 2017, but for date it it changed to 28.

212
00:14:16,830 --> 00:14:22,890
So for the lower field, it is working fine with the roll, but for the next larger field there is no

213
00:14:22,890 --> 00:14:26,310
change in the larger field even though there is an overflow in the month.

214
00:14:27,030 --> 00:14:27,900
So.

215
00:14:28,740 --> 00:14:30,810
So that's about Roland ADD.

216
00:14:31,910 --> 00:14:33,920
Now let's look at the time zone.

217
00:14:34,370 --> 00:14:37,250
So these are the different classes that we have.

218
00:14:37,250 --> 00:14:40,250
So there is the time zone class, which is from the Java package.

219
00:14:40,610 --> 00:14:47,510
So there is each time zone has some kind of an ID, the London area has certain time, India has certain

220
00:14:47,510 --> 00:14:48,950
has certain zone ID.

221
00:14:48,980 --> 00:14:50,720
So all of them have some zone IDs.

222
00:14:50,720 --> 00:14:56,870
So let's just go on this method called get available IDs will return all the zone IDs and you can use

223
00:14:56,870 --> 00:15:04,190
a zone ID to set the time for that particular zone ID so we can do that as we will see next.

224
00:15:04,310 --> 00:15:08,150
But let's just go ahead and print all of the time zones that we have.

225
00:15:09,230 --> 00:15:10,680
So here it is.

226
00:15:10,700 --> 00:15:17,840
So some of them are have only three characters, but some of them have this.

227
00:15:17,870 --> 00:15:20,900
Like, for example, these are all the different places in Europe.

228
00:15:21,230 --> 00:15:25,940
And you can see all of them here, Canada, Australia and Asia.

229
00:15:26,540 --> 00:15:30,590
So these are the these are nothing but the zone IDs and you can use them.

230
00:15:33,440 --> 00:15:41,510
So earlier we looked at the software expiry date and we have seen how we can how it can be extended

231
00:15:41,510 --> 00:15:43,340
by using the ad methods.

232
00:15:43,370 --> 00:15:45,410
Now, let's consider a different use case.

233
00:15:45,440 --> 00:15:50,810
Let's say we have a game game like tennis, and let's say there is some grand slam happening.

234
00:15:51,050 --> 00:15:58,670
And, you know, when you want to see when the when when a particular when you want to see the TV schedule

235
00:15:58,670 --> 00:16:06,380
of a particular day on which the games are being played, then, you know, if the user is from, let's

236
00:16:06,380 --> 00:16:11,810
say from London, then we want to see we want to show him only the London Times.

237
00:16:11,810 --> 00:16:12,230
Right.

238
00:16:12,230 --> 00:16:15,830
We don't want to show him us specific or Indian Times.

239
00:16:15,830 --> 00:16:18,170
So we want to show him The London Times.

240
00:16:18,170 --> 00:16:25,160
And let's say, for example, here we have this calendar and let's say that game start time is Gregorian

241
00:16:25,160 --> 00:16:30,080
calendar here, and we want to use this time zone of Europe on London.

242
00:16:30,890 --> 00:16:33,890
So and this is how we are initializing it.

243
00:16:33,890 --> 00:16:41,870
We are saying the grand slam starts in 2017, the tennis tournament, and it's in January and the day

244
00:16:41,870 --> 00:16:44,150
is three and it starts at 9 a.m..

245
00:16:44,420 --> 00:16:46,370
So this is how we are initializing.

246
00:16:46,370 --> 00:16:52,910
And for that we are using the set method of calendar and here.

247
00:16:54,300 --> 00:16:54,940
Here it is.

248
00:16:54,960 --> 00:16:57,900
So let me just go ahead and run this.

249
00:16:59,360 --> 00:16:59,690
Here.

250
00:16:59,690 --> 00:17:01,070
The calendar class.

251
00:17:02,220 --> 00:17:02,420
Okay.

252
00:17:02,490 --> 00:17:04,740
Here it is, the game start time.

253
00:17:05,010 --> 00:17:06,420
This is what we are looking at.

254
00:17:06,750 --> 00:17:14,130
So it starts on Jan three at this particular time and it still shows this particular method called Get

255
00:17:14,130 --> 00:17:14,430
Time.

256
00:17:14,430 --> 00:17:19,829
Here it is from the calendar class and it returns an instance of date.

257
00:17:19,829 --> 00:17:26,190
And this one, if we just printed this way, it's still going to print the default time zone, which

258
00:17:26,190 --> 00:17:28,680
is the Indian standard time in my case.

259
00:17:28,680 --> 00:17:31,230
So it's not picking this particular time zone.

260
00:17:31,230 --> 00:17:36,960
And if you want to look at this particular the exact times, then we have to we shouldn't invoke that

261
00:17:36,960 --> 00:17:39,270
time, but we have to invoke other methods.

262
00:17:39,270 --> 00:17:41,970
So there is a method called get in calendar.

263
00:17:41,970 --> 00:17:47,130
So we have already seen the set method here which we have used to initialize the date.

264
00:17:47,310 --> 00:17:52,080
So we have the get methods and we are getting the months here.

265
00:17:52,080 --> 00:17:58,710
So we are saying this get method will accept an event field and we are passing the calendar month.

266
00:17:58,860 --> 00:18:05,370
So game start time has the actual state, which is the state information, which is the date and the

267
00:18:05,370 --> 00:18:05,820
time.

268
00:18:05,820 --> 00:18:12,210
And we are trying to extract just the month from this particular date which with which we have initialized.

269
00:18:12,480 --> 00:18:14,730
So the month is January.

270
00:18:14,730 --> 00:18:20,280
So we are saying Jan and we are adding a one because the four month is going to start from zero zero.

271
00:18:20,280 --> 00:18:25,650
So we're adding a one there and we are also printing the day of the month.

272
00:18:25,650 --> 00:18:30,150
So on which day and we are also printing the hour.

273
00:18:31,200 --> 00:18:36,930
And for all of these we are simply using the get method and we are just passing the appropriate field

274
00:18:36,960 --> 00:18:37,350
here.

275
00:18:37,350 --> 00:18:39,990
In this case, we want to print the hour here.

276
00:18:39,990 --> 00:18:44,580
We want to print a minute and we also want to print the a m and PM information.

277
00:18:44,580 --> 00:18:51,120
So there is a field called a m underscore PM and if it is equal to zero, we are printing am here otherwise

278
00:18:51,150 --> 00:18:51,690
pm.

279
00:18:52,320 --> 00:18:54,090
So that's all there is to that.

280
00:18:54,090 --> 00:18:56,370
So that's why it's going to print this.

281
00:18:56,940 --> 00:19:03,990
Here one is month January and date is three and the game starts at 9:00.

282
00:19:03,990 --> 00:19:05,310
So that's the TV schedule.

283
00:19:05,340 --> 00:19:11,700
Now let's say, for example, we want to now the user, let's say we have this particular instance game

284
00:19:11,700 --> 00:19:14,820
start time, but the user is actually from India.

285
00:19:14,820 --> 00:19:18,900
So in which case we want to adjust the time zone.

286
00:19:18,900 --> 00:19:21,330
So we are passing this time zone.

287
00:19:21,330 --> 00:19:23,220
In this way we are saying set time zone.

288
00:19:23,220 --> 00:19:28,260
So there's a method called set time zone and we are passing the time zone corresponding to India.

289
00:19:28,260 --> 00:19:31,530
And for India this is a zone ID, Asia, Calcutta.

290
00:19:31,620 --> 00:19:35,070
So we are passing that and we are also printing the information here.

291
00:19:35,070 --> 00:19:36,900
So let me rerun this.

292
00:19:39,580 --> 00:19:41,620
So here it is for the Indian time.

293
00:19:41,650 --> 00:19:48,970
Now it corresponds to 2:30 p.m. here for London time it is nine, but for Indian time it is 230 and

294
00:19:48,970 --> 00:19:50,860
that's exactly what is getting printed.

295
00:19:51,160 --> 00:19:58,510
Now you can also, if you do not have this particular zone ID, if you do not know about the zone ID,

296
00:19:58,540 --> 00:20:04,210
then you can also use build a custom ID so you can say GMT.

297
00:20:04,810 --> 00:20:06,820
GMT is the standard time, right?

298
00:20:06,820 --> 00:20:10,890
It's like the origin and we want to specify the offset from that.

299
00:20:10,900 --> 00:20:16,420
For India it would be plus five and a half hours, so it would be zero five and 30.

300
00:20:17,350 --> 00:20:19,360
But let's say we want to print this.

301
00:20:19,390 --> 00:20:22,300
Let's say the user is from the United States from Pacific Time.

302
00:20:22,600 --> 00:20:27,880
So in which case, we need to do a minus here after GMT and we'll say 830.

303
00:20:27,880 --> 00:20:32,650
So eight and a half hours behind the behind the GMT.

304
00:20:32,680 --> 00:20:34,870
So let's run this again.

305
00:20:35,290 --> 00:20:37,990
Now, as you can see, this says zero 30.

306
00:20:38,940 --> 00:20:42,150
And so it is one three 0:30 a.m..

307
00:20:42,390 --> 00:20:47,760
So that's what the user and united states in pacific time, pacific time zone will see.

308
00:20:48,000 --> 00:20:49,560
So it's just the same time.

309
00:20:49,560 --> 00:20:51,600
But when different users are.

310
00:20:52,650 --> 00:20:59,250
Are logging in, they get to see different times and we are using just the setter methods here to set

311
00:20:59,250 --> 00:21:06,150
the time zones and so that the same date is the date and time is being viewed in different time zones

312
00:21:06,150 --> 00:21:10,320
and they get to see in different times, the local times in their location.

313
00:21:10,940 --> 00:21:12,830
Okay, now let me do one thing here.

314
00:21:12,870 --> 00:21:15,030
Show you that daylight saving time, too.

315
00:21:15,060 --> 00:21:20,400
So Daylight Saving Time, in order to show that, let me change this to July.

316
00:21:22,750 --> 00:21:22,900
Okay.

317
00:21:23,140 --> 00:21:28,960
Because in July even in green, which in the GMT time.

318
00:21:29,260 --> 00:21:31,300
So both GMT will be there.

319
00:21:31,300 --> 00:21:35,500
But London also has GMT time but in around this month.

320
00:21:35,780 --> 00:21:39,330
London London observes Daylight Saving Time.

321
00:21:39,340 --> 00:21:47,290
So it would be a one hour ahead of GMT, even though in other times they both fall on the same time

322
00:21:47,290 --> 00:21:49,360
zone, both Greenwich and London.

323
00:21:49,360 --> 00:21:56,170
But during certain times of the year, London does follow Daylight Saving Time and green, which does

324
00:21:56,170 --> 00:21:58,900
not follow because and because of that, there is a difference.

325
00:21:58,900 --> 00:22:01,000
And in the hours, in the time.

326
00:22:01,300 --> 00:22:03,340
So London is one hour ahead.

327
00:22:03,340 --> 00:22:05,260
So let me just run this one more time.

328
00:22:06,510 --> 00:22:08,580
Now, as you can see here it is nine.

329
00:22:08,910 --> 00:22:11,130
But it is actually GMT plus one.

330
00:22:11,130 --> 00:22:14,450
So GMT would be a GMT, it would be eight.

331
00:22:14,460 --> 00:22:17,280
But in London it is nine now in July.

332
00:22:18,120 --> 00:22:20,260
The month also has been different.

333
00:22:20,280 --> 00:22:21,540
Now it is seven now.

334
00:22:21,720 --> 00:22:23,710
And in India it is 130.

335
00:22:23,730 --> 00:22:27,980
It is four and a half hours ahead of London and five and a half hours ahead of GMT.

336
00:22:27,990 --> 00:22:30,420
That's why you have 130 instead of 230.

337
00:22:30,780 --> 00:22:35,490
And here this is eight and a half hours behind behind 8 a.m..

338
00:22:35,490 --> 00:22:42,150
Right now it is 9 a.m. in London, in in G in green, which it is going to be 8 a.m. GMT.

339
00:22:42,510 --> 00:22:46,230
So if you subtract eight and a half hours, it would be 1130.

340
00:22:46,230 --> 00:22:51,090
And because of that, the day has been changed to to two rather than three.

341
00:22:51,390 --> 00:22:54,900
So it's the previous day at at 1130 in the night.

342
00:22:55,050 --> 00:22:58,020
So that's all happening because of Daylight Saving Time.

343
00:22:58,020 --> 00:23:03,720
And so you need to be aware of that so you can observe the DST from March to October.

344
00:23:03,720 --> 00:23:05,160
So some information about that.

345
00:23:05,160 --> 00:23:07,800
And during that time it's called US British Summertime.

346
00:23:09,420 --> 00:23:11,940
Now, finally, let me also demonstrate.

347
00:23:13,120 --> 00:23:15,610
This final thing after and before.

348
00:23:15,970 --> 00:23:19,930
So we already have this game start time.

349
00:23:20,440 --> 00:23:24,630
So that's let's say that's the first round of the of the tournament.

350
00:23:24,640 --> 00:23:27,370
And let's say that game final is also there.

351
00:23:27,370 --> 00:23:34,780
And it is let's say it is happening on 16th, in July on 16th, and the game start time was start day

352
00:23:34,780 --> 00:23:35,560
was third.

353
00:23:35,950 --> 00:23:43,780
So when we invoke this method called after on the game, start time means that we are just checking

354
00:23:43,780 --> 00:23:45,370
if this is happening after this.

355
00:23:45,370 --> 00:23:47,920
So it's pretty straightforward as the method name suggests.

356
00:23:48,280 --> 00:23:53,370
So game start time, we are asking if it is happening after the game final, which is not true.

357
00:23:53,380 --> 00:23:56,800
So that's why we get false when we invoke the method after.

358
00:23:57,130 --> 00:24:02,440
But when we invoke the method before, we are getting a true value because game start time is before

359
00:24:02,440 --> 00:24:03,340
the game final.

360
00:24:03,850 --> 00:24:04,770
So that's it.

361
00:24:04,780 --> 00:24:08,260
The two dates were third and 16th, so that's about it.

362
00:24:08,260 --> 00:24:16,720
So those are the few main classes in the old date and time API, the calendar date, time zone and the

363
00:24:16,720 --> 00:24:17,890
Gregorian calendar.

364
00:24:19,060 --> 00:24:25,900
So those are the few important methods and important classes and this code will be available in the

365
00:24:25,900 --> 00:24:28,030
resources section and that's about it.

366
00:24:28,030 --> 00:24:29,530
Thank you and happy coding.

