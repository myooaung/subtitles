1
00:00:02,130 --> 00:00:02,960
Hi there.

2
00:00:02,969 --> 00:00:04,200
This is Lou.

3
00:00:04,200 --> 00:00:05,310
And welcome back.

4
00:00:05,340 --> 00:00:07,710
So let's now get started with lambdas.

5
00:00:08,189 --> 00:00:13,050
Here you can see the Greek letter Lambda, which is used as a representation for this topic.

6
00:00:13,470 --> 00:00:19,350
In the introductory lecture, we looked at an example where a lambda was passed as an argument to a

7
00:00:19,560 --> 00:00:23,250
set constructor which was expecting a competitor instance.

8
00:00:23,670 --> 00:00:27,630
So the lambda there encapsulated the logic for sorting.

9
00:00:28,080 --> 00:00:31,980
So behavior was getting passed around via lambda expression.

10
00:00:32,590 --> 00:00:36,870
And Lambda is essentially a function which can be passed around.

11
00:00:37,420 --> 00:00:44,530
It is not associated with any class and it is simply a function by itself that is, in our familiar

12
00:00:44,530 --> 00:00:46,570
terminology, a method by itself.

13
00:00:47,080 --> 00:00:52,720
And lambdas are considered as one of the most important features which got added in Java eight.

14
00:00:52,990 --> 00:00:59,290
And with that, Java now has some elements of functional programming to and lambdas, as we discussed

15
00:00:59,290 --> 00:01:04,180
earlier, enable in writing faster, more compact and cleaner code.

16
00:01:04,690 --> 00:01:10,630
And before lambdas, anonymous classes were used to perform similar tasks of passing your own functionality.

17
00:01:11,320 --> 00:01:17,380
And in this lecture, we will learn about the Lambda syntax, and we will also discuss how it is different

18
00:01:17,380 --> 00:01:19,060
from anonymous classes.

19
00:01:19,750 --> 00:01:24,640
Demo will be part of the follow up lecture, as this lecture itself is quite long.

20
00:01:25,060 --> 00:01:27,370
So just be patient and enjoy the lecture.

21
00:01:29,380 --> 00:01:32,230
First, a brief look at the history concerning lambdas.

22
00:01:32,620 --> 00:01:38,860
Lambdas come from lambda calculus, which is a mathematical notation for functions.

23
00:01:40,090 --> 00:01:47,590
And it was introduced in 1930s by the famous mathematician Alonzo Church, who was also a PhD advisor

24
00:01:47,590 --> 00:01:52,690
to Alan Turing, who we know is considered as the father of computer science.

25
00:01:54,190 --> 00:01:58,240
And all functions in lambda calculus are anonymous.

26
00:01:58,450 --> 00:02:00,100
That is, they are nameless.

27
00:02:01,340 --> 00:02:04,550
And here is an example lambda calculus expression.

28
00:02:05,730 --> 00:02:11,340
Here X is the argument to the anonymous function which is represented by Lambda.

29
00:02:12,330 --> 00:02:16,050
And the body follows the dot here.

30
00:02:16,050 --> 00:02:19,110
The square of the input argument is being computed.

31
00:02:20,710 --> 00:02:28,420
On the 1950s, famous computer scientist John McCarthy invented Lisp while he was at MIT.

32
00:02:28,960 --> 00:02:33,040
Unless the second oldest high level programming language.

33
00:02:33,640 --> 00:02:39,490
In case you haven't heard of McCarthy, he is considered as one of the founders of Artificial Intelligence

34
00:02:39,490 --> 00:02:45,340
Field and is credited with coining the term artificial intelligence, which we know is very hot right

35
00:02:45,340 --> 00:02:45,700
now.

36
00:02:46,270 --> 00:02:49,930
And if you're interested, you can read more about him on Wikipedia.

37
00:02:50,470 --> 00:02:57,790
So he developed less and less post designed to model mathematical problems and was heavily influenced

38
00:02:57,790 --> 00:02:59,260
by lambda calculus.

39
00:03:00,960 --> 00:03:02,260
And here is an example.

40
00:03:02,280 --> 00:03:09,300
Lambda function in lisp the term lambda here is used as an operator to define an anonymous function

41
00:03:09,540 --> 00:03:13,860
and the example itself is similar to the lambda function which we saw earlier.

42
00:03:15,770 --> 00:03:21,800
So let's another functional programming languages had their roots in lambda calculus and they're all

43
00:03:21,800 --> 00:03:27,680
about programming using functions I'm not sure about these days, but when I was a graduate student

44
00:03:27,680 --> 00:03:34,130
back in 2002, we were taught both LISP and scheme as part of the programming language course.

45
00:03:34,610 --> 00:03:39,920
I still can recollect implementing a game called Tic TAC tOe and five different programming languages,

46
00:03:39,920 --> 00:03:47,330
and the languages used were less scheme, Java, Python and Perl, and implementing in scheme was the

47
00:03:47,330 --> 00:03:53,690
toughest as its syntax was very different from other programming languages and scheme was also a functional

48
00:03:53,690 --> 00:03:54,740
programming language.

49
00:03:55,220 --> 00:03:57,080
So just thought I would share that with you.

50
00:03:58,360 --> 00:04:00,550
So what exactly is a lambda?

51
00:04:01,740 --> 00:04:03,660
It is an anonymous function.

52
00:04:04,020 --> 00:04:08,190
So it is not an anonymous class, but an anonymous function.

53
00:04:09,240 --> 00:04:14,550
And it is a compact way of defining a function which can be passed around.

54
00:04:15,330 --> 00:04:22,320
So it is useful when we want to pass it on some functionality and it helps in doing it in a very compact

55
00:04:22,320 --> 00:04:22,680
way.

56
00:04:23,490 --> 00:04:24,900
Since it can be passed around.

57
00:04:24,900 --> 00:04:28,950
It is basically an expression, a lambda expression.

58
00:04:29,980 --> 00:04:33,820
And these are some of the languages that support Lambda expressions.

59
00:04:35,440 --> 00:04:38,290
And here is the syntax for the lambda expression in Java.

60
00:04:38,530 --> 00:04:43,390
So the expression begins with the function parameters inside parenthesis.

61
00:04:43,930 --> 00:04:46,660
So these are the parameters of the anonymous function.

62
00:04:47,020 --> 00:04:52,240
Next, the parameter list is followed by the arrow symbol, which is then followed by the functions

63
00:04:52,240 --> 00:04:52,720
body.

64
00:04:53,450 --> 00:04:59,330
So just like any method, the body can have multiple statements and the last statement would be the

65
00:04:59,330 --> 00:05:04,430
written statement unless the function is not expected to return anything.

66
00:05:05,130 --> 00:05:10,770
And in certain cases it would also be possible to further simplify the syntax, and we will soon look

67
00:05:10,770 --> 00:05:12,120
at how that can be done.

68
00:05:13,910 --> 00:05:19,610
And the lambda expression is assigned to a variable whose type is a functional interface.

69
00:05:19,910 --> 00:05:23,390
So the target type for lambda expression is a functional interface.

70
00:05:23,750 --> 00:05:30,110
Typically the variable would be a method parameter, and we know that a functional interface is an interface

71
00:05:30,110 --> 00:05:33,110
that exposes a single abstract method.

72
00:05:34,960 --> 00:05:40,210
When discussing anonymous sources, we said that such a functional interface can be used to define a

73
00:05:40,210 --> 00:05:46,740
strategy interface and the different anonymous classes implementing that interface would serve as the

74
00:05:46,750 --> 00:05:47,890
different strategies.

75
00:05:48,370 --> 00:05:53,440
So similarly, we can now have different lambda expressions acting as different strategies.

76
00:05:53,860 --> 00:05:57,370
So that's a normal use case for Lambda Expressions.

77
00:05:58,900 --> 00:06:04,780
Since a functional interface has a single abstract method, it is also referred to as a single abstract

78
00:06:04,780 --> 00:06:05,320
method.

79
00:06:05,320 --> 00:06:07,020
Interface as an.

80
00:06:08,810 --> 00:06:14,600
And this is an example from our discussion of anonymous classes, and we have also seen it in the introductory

81
00:06:14,600 --> 00:06:15,950
lecture here.

82
00:06:15,950 --> 00:06:20,980
An instance of an anonymous class is being passed as a competitor to the constructor of three set.

83
00:06:21,590 --> 00:06:26,240
Now let's see how we can replace the anonymous class with the lambda expression.

84
00:06:27,670 --> 00:06:32,550
So first we have this block of code and we need to fill it with our lambda expression.

85
00:06:32,560 --> 00:06:37,210
And due to space constraint only the relevant part of the expression is being shown here.

86
00:06:37,780 --> 00:06:43,870
The goal of our lambda expression is to provide the logic for the compare method, and we know that

87
00:06:43,870 --> 00:06:47,050
lambda expression starts with function parameters.

88
00:06:48,200 --> 00:06:52,490
So we have this the two method parameters of the compare method.

89
00:06:53,800 --> 00:06:55,240
Next we have the arrow symbol.

90
00:06:56,520 --> 00:07:02,160
And after that we simply have the body which is identical to the body in the compare method.

91
00:07:02,670 --> 00:07:06,600
So we are simply passing the functionality of the compare method.

92
00:07:07,520 --> 00:07:13,070
As we can see, it is much more compact than the anonymous class version without the new keyword and

93
00:07:13,070 --> 00:07:14,570
the following type name.

94
00:07:14,900 --> 00:07:19,160
And it is also very efficient as we are not creating an object here.

95
00:07:19,760 --> 00:07:23,210
Now, this lambda expression can be further simplified to.

96
00:07:24,570 --> 00:07:26,670
And here is the first simplification.

97
00:07:27,000 --> 00:07:32,700
The parameter type string for the two parameters are omitted here as they can be automatically inferred

98
00:07:32,700 --> 00:07:33,750
by the compiler.

99
00:07:34,230 --> 00:07:39,810
The compiler infers the type from the type argument that is also specified in the instance.

100
00:07:39,810 --> 00:07:45,330
Creation, expression and such type inferring may not be possible for all lambda expressions.

101
00:07:47,380 --> 00:07:50,220
Next off the body involves a single statement.

102
00:07:50,230 --> 00:07:56,560
Then we can have something like this where the brain says the written keyword and the ending semicolon

103
00:07:56,560 --> 00:07:57,610
can be omitted.

104
00:07:58,060 --> 00:08:00,880
And this is essentially an expression.

105
00:08:02,310 --> 00:08:05,340
So in this case, the generic syntax would be like this.

106
00:08:06,120 --> 00:08:11,730
And this would be the generic syntax for the first two examples where we have one or more statements.

107
00:08:12,120 --> 00:08:15,090
So we have the basis and within that the statements.

108
00:08:15,690 --> 00:08:21,630
So those are a couple of simplifications that can be performed to make lambda expression even more compact.

109
00:08:22,320 --> 00:08:26,100
Note that here we know that comparator is a functional interface.

110
00:08:26,550 --> 00:08:30,350
If it is not a functional interface, then we will get a compilation error.

111
00:08:30,360 --> 00:08:36,630
If we try to pass a lambda expression that is a lambda expression cannot be assigned to a method parameter

112
00:08:36,630 --> 00:08:40,650
or any variable whose type is not a functional interface.

113
00:08:41,070 --> 00:08:45,240
So lambda expression can only be an implementation of the functional interface.

114
00:08:45,840 --> 00:08:48,750
Now if you think about it, it also makes sense.

115
00:08:49,170 --> 00:08:56,520
For instance, if we consider an interface which has two methods with different names and same parameter

116
00:08:56,520 --> 00:09:03,960
less, then if we pass a lambda expression compiler will not know which of the two methods the lambda

117
00:09:03,960 --> 00:09:08,580
function should correspond to as the lambda function does not have a name.

118
00:09:08,880 --> 00:09:15,420
So here we are saying that the interface has two methods with different names, but with the same parameter

119
00:09:15,420 --> 00:09:15,990
less.

120
00:09:16,050 --> 00:09:21,750
And the compiler will not know to which of these two functions the lambda expression would correspond

121
00:09:21,750 --> 00:09:22,050
to.

122
00:09:22,590 --> 00:09:26,760
So it's got to be a functional interface, and this will also be demonstrated shortly.

123
00:09:28,290 --> 00:09:30,270
Now let's look at a few lambda examples.

124
00:09:30,390 --> 00:09:31,680
Here is the first one.

125
00:09:31,710 --> 00:09:36,570
It simply represents a method that takes no parameters and returns a wide.

126
00:09:38,650 --> 00:09:45,100
This one represents a method in a functional interface that takes a book instance and just prints the

127
00:09:45,130 --> 00:09:46,270
title of the book.

128
00:09:46,540 --> 00:09:48,970
So the written type here is also wide.

129
00:09:50,960 --> 00:09:51,260
Here.

130
00:09:51,260 --> 00:09:54,650
A book serves as an input and a boolean value is written.

131
00:09:55,130 --> 00:09:59,420
If the book's rating is greater than or equal to 4.5, a true would be written.

132
00:10:01,370 --> 00:10:04,400
Here is a simplified representation of the same example.

133
00:10:04,430 --> 00:10:07,010
The methods body is just an expression.

134
00:10:07,220 --> 00:10:11,360
So no braces or the written keyword or the ending semicolon.

135
00:10:13,100 --> 00:10:14,930
Here is further simplification.

136
00:10:15,050 --> 00:10:21,470
Assuming the type of the method parameter can be inferred by the compiler and this would be the simplest

137
00:10:21,470 --> 00:10:22,340
form possible.

138
00:10:22,760 --> 00:10:27,620
Note that there is no parentheses here as there is only a single parameter.

139
00:10:27,980 --> 00:10:34,270
So parentheses is not required if we have just a single parameter and parentheses is mandatory.

140
00:10:34,280 --> 00:10:38,270
If we have more than one parameter are no parameters at all.

141
00:10:40,170 --> 00:10:42,700
And in this example, a string is being written.

142
00:10:42,720 --> 00:10:45,180
So we have an expression as body.

143
00:10:46,670 --> 00:10:48,680
However, we cannot do this.

144
00:10:49,640 --> 00:10:52,910
And that's because it is not a valid statement.

145
00:10:54,070 --> 00:10:55,600
And this is how it should be.

146
00:10:55,630 --> 00:10:57,490
You need to have the written keyword.

147
00:10:58,950 --> 00:11:03,720
And finally, you cannot do this as a test, not an expression.

148
00:11:03,990 --> 00:11:05,070
It is a statement.

149
00:11:05,610 --> 00:11:09,090
So if you do not have braces, then it should be an expression.

150
00:11:09,510 --> 00:11:15,300
And if you have braces, you can have one or more statements or no statements at all, as in the first

151
00:11:15,300 --> 00:11:15,930
example.

152
00:11:16,780 --> 00:11:18,580
So those are a few examples.

153
00:11:18,760 --> 00:11:24,130
In case if it is confusing, just watch the lecture once again and it should be really helpful.

154
00:11:24,160 --> 00:11:27,190
And the demo in the follow up lecture should also be helpful.

155
00:11:28,770 --> 00:11:33,810
Now, as we mentioned earlier, before Java eight anonymous classes played the role of lambdas.

156
00:11:34,200 --> 00:11:37,950
So now the question is, what are the differences between the two of them?

157
00:11:39,380 --> 00:11:40,730
With an anonymous class.

158
00:11:40,730 --> 00:11:43,250
We have an associated object.

159
00:11:43,580 --> 00:11:50,690
And so there is the overhead of loading the class and it is also verbose as we have to use the new keyword

160
00:11:50,690 --> 00:11:55,340
followed by the super type name and also the method names when defining them.

161
00:11:57,050 --> 00:12:04,070
But with Lambda there is no associated object as it is implemented differently and it is based on the

162
00:12:04,070 --> 00:12:07,310
bytecode instruction called invoke dynamic.

163
00:12:07,850 --> 00:12:11,750
So it is more efficient as we don't have to create an object.

164
00:12:12,440 --> 00:12:18,620
In fact, Brian Gewirtz, who is the Java language designer, also mentioned about this in one of his

165
00:12:18,620 --> 00:12:19,250
talks.

166
00:12:19,250 --> 00:12:26,030
And he specifies about some performance benchmarks too, about how lambdas are more efficient than using

167
00:12:26,030 --> 00:12:27,140
anonymous objects.

168
00:12:27,920 --> 00:12:33,890
And moreover, we know that lambdas have more compact representation without the new keyword or the

169
00:12:33,890 --> 00:12:35,750
type name or the method name.

170
00:12:37,900 --> 00:12:45,280
And we know that anonymous objects are created on every use unless they are declared as singletons using

171
00:12:45,280 --> 00:12:47,110
static final fields.

172
00:12:47,360 --> 00:12:48,880
Hope you recall that.

173
00:12:49,930 --> 00:12:54,250
And with lambdas, memory is allocated only once for the method.

174
00:12:54,640 --> 00:12:56,980
Hence very little memory footprint is used.

175
00:12:58,700 --> 00:12:59,900
With an anonymous class.

176
00:12:59,900 --> 00:13:06,020
The target type can have multiple methods, and the target type is nothing but a class or an interface

177
00:13:06,020 --> 00:13:08,740
that the anonymous class is inheriting from.

178
00:13:09,080 --> 00:13:11,150
That is anonymous classes implementing.

179
00:13:12,570 --> 00:13:15,450
But with Lambda, it's got to be a functional interface.

180
00:13:15,480 --> 00:13:19,770
It cannot even be an abstract class with a single abstract method.

181
00:13:20,340 --> 00:13:22,800
This will also be demonstrated in the next lecture.

182
00:13:23,580 --> 00:13:27,300
So those are the differences between anonymous classes and lambdas.

183
00:13:27,630 --> 00:13:33,570
Lambdas are more efficient and are more compact and work with only functional interfaces.

184
00:13:34,020 --> 00:13:35,200
So that's about it.

185
00:13:35,220 --> 00:13:38,710
And in the next lecture, we will do a demo of Lambda Expressions.

186
00:13:38,730 --> 00:13:39,450
Thank you.

