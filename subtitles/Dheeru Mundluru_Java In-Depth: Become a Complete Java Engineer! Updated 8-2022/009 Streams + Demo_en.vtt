WEBVTT
1
00:00:02.350 --> 00:00:03.270
Hi there.

2
00:00:03.280 --> 00:00:03.850
This is Dana.

3
00:00:04.450 --> 00:00:05.410
And welcome back.

4
00:00:05.590 --> 00:00:10.840
Let's now look at this very interesting feature called Streams, which was introduced in Java eight,

5
00:00:10.840 --> 00:00:15.820
along with other features like lambdas method references and standard functional interfaces.

6
00:00:16.510 --> 00:00:22.600
In fact, Streams is considered as one of the best use cases of lambdas, method references and standard

7
00:00:22.600 --> 00:00:23.680
functional interfaces.

8
00:00:24.100 --> 00:00:30.380
Streams is an API and it is introduced as part of a new package called Java dot dot.

9
00:00:30.470 --> 00:00:37.750
Stream on stream is an interface and it has many methods and many of its methods use standard function

10
00:00:37.750 --> 00:00:40.390
interfaces as method parameter types.

11
00:00:40.990 --> 00:00:47.740
So when we are dealing with streams, we also have lambdas method references and standard function interfaces

12
00:00:47.740 --> 00:00:48.670
coming into play.

13
00:00:49.240 --> 00:00:56.150
So we have all of these major Java eight features coming into action when we are dealing with streams.

14
00:00:56.470 --> 00:01:01.960
So these are all tightly bound and this is all you need to remember about streams.

15
00:01:02.020 --> 00:01:06.430
It's all about performing SQL like operations on collections.

16
00:01:06.820 --> 00:01:14.020
So we can perform some complex operations on collections which were not possible earlier before Java

17
00:01:14.050 --> 00:01:14.500
eight.

18
00:01:15.190 --> 00:01:16.900
So that's all you need to remember.

19
00:01:17.050 --> 00:01:21.530
And it also offers the advantage of writing code in a declarative style.

20
00:01:21.550 --> 00:01:23.130
And we will discuss that in a bit.

21
00:01:23.140 --> 00:01:25.420
And it was also discussed in the intro lecture.

22
00:01:25.780 --> 00:01:28.240
But here it need not be just collections.

23
00:01:28.240 --> 00:01:35.110
It can also be arrays or comma separated list of values or even files when we are doing input output.

24
00:01:35.140 --> 00:01:37.270
Or it can also be other kinds of sources.

25
00:01:37.270 --> 00:01:41.860
But typically it would be collection implementations like URLs.

26
00:01:43.310 --> 00:01:45.970
So we have this in our database world.

27
00:01:45.980 --> 00:01:52.460
So we have a database and we have SQL queries which help us to manipulate data in the databases.

28
00:01:52.580 --> 00:01:58.750
And we perform all kinds of complex operations like filtering using the where clause, the conditions

29
00:01:58.760 --> 00:02:04.970
in the where clause are grouping data or sorting some data via the order by clause.

30
00:02:05.150 --> 00:02:12.860
Or we can also perform summary operations like count, sum and average, so we can do all of these using

31
00:02:12.860 --> 00:02:13.580
SQL.

32
00:02:14.000 --> 00:02:19.670
But when it comes to collections in the pre Java eight world, we could of course add something into

33
00:02:19.670 --> 00:02:25.280
the collection or we can get something from the collection or we can even search and we can also perform

34
00:02:25.280 --> 00:02:29.120
other kinds of operations that are supported using various methods.

35
00:02:29.480 --> 00:02:31.960
But we couldn't do any of this.

36
00:02:31.970 --> 00:02:37.610
There were not any methods which were supporting these kinds of operations that were possible in the

37
00:02:37.670 --> 00:02:41.780
SQL world, like filtering, grouping, sorting and some an average.

38
00:02:41.780 --> 00:02:47.900
In case of sorting we can do external sorting using the collections class, using the source method,

39
00:02:47.900 --> 00:02:53.810
but within the collection interface itself or the interface itself, there was no method like sort.

40
00:02:54.320 --> 00:03:01.010
And when it comes to summarization, we could of course do count using the size method size method in

41
00:03:01.010 --> 00:03:04.160
the collection, but we couldn't do some or average.

42
00:03:04.580 --> 00:03:09.890
So in order to do such kinds of operations, we had to write our own code, we had to write some custom

43
00:03:09.890 --> 00:03:10.220
code.

44
00:03:10.220 --> 00:03:12.620
So that's one of the limitations on writing.

45
00:03:12.620 --> 00:03:16.060
Such custom code is not readable, the code is not readable.

46
00:03:16.070 --> 00:03:19.130
And the second issue is it's not easily realizable.

47
00:03:19.550 --> 00:03:24.830
So we have to rewrite code in order to make it parallel able and that's very tedious.

48
00:03:26.450 --> 00:03:32.360
So to address that, Java eight has introduced the Stream's API, which is part of this new package

49
00:03:32.360 --> 00:03:34.020
called Java Stream.

50
00:03:34.040 --> 00:03:40.220
And with that, we can do all of these operations like filtering, grouping and sorting and also the

51
00:03:40.220 --> 00:03:41.300
summary operations.

52
00:03:41.300 --> 00:03:44.330
So the Streams API provides methods in order to do this.

53
00:03:44.720 --> 00:03:49.220
So with that, all the limitations are now benefits are turned into benefits.

54
00:03:49.220 --> 00:03:56.570
So the developers need not write that custom code so they can just express what they want by invoking

55
00:03:56.570 --> 00:03:57.620
the different methods.

56
00:03:58.100 --> 00:04:03.140
There is a method for filtering and there's a method for grouping and sorting and those kinds of things,

57
00:04:03.140 --> 00:04:05.960
and you can change those methods by doing so.

58
00:04:05.990 --> 00:04:11.840
We are writing declarative code and developer is simply expressing what he or she wants.

59
00:04:12.320 --> 00:04:18.730
So the result of this is we have much cleaner code and the code is also very easily realizable.

60
00:04:19.790 --> 00:04:26.240
Now we have seen this example in the intro lecture in order to motivate ourselves for studying streams.

61
00:04:26.510 --> 00:04:29.720
So here the goal is to categorize books.

62
00:04:29.720 --> 00:04:35.240
So we have a list of books in the for each statement, and we want to categorize them by the category.

63
00:04:35.300 --> 00:04:41.450
And we also want to categorize only those books which made this criteria with the rating of the book

64
00:04:41.450 --> 00:04:48.230
is at least 4.5, and the final output of this will be stored in this hash map called books by category,

65
00:04:48.230 --> 00:04:53.090
where the key is category and the value is list of books falling under that category.

66
00:04:53.600 --> 00:04:59.330
So this we call as imperative programming, and this is what we have been doing throughout this course.

67
00:04:59.630 --> 00:05:02.690
Now, like I just mentioned, it is easy to write this code.

68
00:05:02.690 --> 00:05:06.610
It's not that difficult, but reading it is a bit difficult.

69
00:05:06.620 --> 00:05:08.000
It's kind of unreadable.

70
00:05:08.420 --> 00:05:15.410
And as I just mentioned, this code is committed to work in a sequential way in a single threaded environment.

71
00:05:15.410 --> 00:05:18.560
So if we want to paralyze this, we need to rewrite it.

72
00:05:18.560 --> 00:05:20.150
And that's very painful.

73
00:05:21.220 --> 00:05:27.010
So in the intro lecture, we also said that the same logic can be expressed in a much cleaner way in

74
00:05:27.010 --> 00:05:29.350
this way using the Stream's API.

75
00:05:29.710 --> 00:05:36.310
So once again, here we have the books list or a linked list and we are invoking a method called stream.

76
00:05:36.580 --> 00:05:40.630
And stream is essentially a method in the collection interface itself.

77
00:05:40.630 --> 00:05:48.160
So it has been introduced in collection interface in the Java eight and it returns an instance of the

78
00:05:48.160 --> 00:05:49.480
stream interface.

79
00:05:50.140 --> 00:05:53.200
And the stream interface has these methods like filter and collect.

80
00:05:53.200 --> 00:05:59.080
So we are invoking the filter method and to the filter method we are passing the lambda, which is nothing

81
00:05:59.080 --> 00:06:02.350
but the rating of the book which needs to be greater than 4.5.

82
00:06:02.350 --> 00:06:03.640
So that's our predicate.

83
00:06:04.330 --> 00:06:09.730
And the filter also returns another instance of the stream interface.

84
00:06:10.120 --> 00:06:13.150
So with that we are able to invoke the collect method.

85
00:06:13.150 --> 00:06:19.810
So filter and collect are two methods within the stream interface and we also have the grouping by method

86
00:06:19.810 --> 00:06:21.550
and we will discuss that later.

87
00:06:21.550 --> 00:06:26.350
But as you can see, the filter and the grouping buy and collect together.

88
00:06:26.350 --> 00:06:32.050
They are performing the same operation that we are performing with the imperative programming code.

89
00:06:32.800 --> 00:06:38.680
So this is declarative programming and as you can see, it's very clean and it's also very efficient.

90
00:06:39.770 --> 00:06:43.280
And what is happening here is we are doing internal iteration.

91
00:06:43.580 --> 00:06:50.060
So the developer is simply specifying what he or she wants, that they want to filter something and

92
00:06:50.060 --> 00:06:51.170
they want to grow by.

93
00:06:51.200 --> 00:06:57.170
But the actual iteration and the grouping by is done internally within these methods.

94
00:06:57.350 --> 00:07:00.020
So this is what is happening in sequel also.

95
00:07:00.350 --> 00:07:03.710
So in sequel we have these queries for filtering.

96
00:07:03.710 --> 00:07:07.450
We have the where clause and for grouping, we have the group by clause.

97
00:07:07.460 --> 00:07:13.740
But how exactly the iteration and the grouping happens is taken care of internally by the database.

98
00:07:13.760 --> 00:07:19.100
Similarly here also the iteration is taken care of internally by the stream API.

99
00:07:19.400 --> 00:07:23.080
So what we get here is better abstraction, right?

100
00:07:23.090 --> 00:07:24.530
So we get the better abstraction.

101
00:07:24.530 --> 00:07:30.320
We just specify what we need and how it needs to be done is an implementation detail which is pushed

102
00:07:30.320 --> 00:07:31.310
into those methods.

103
00:07:32.670 --> 00:07:37.830
Now, if you replace a stream with parallel stream, the entire competition is paralyzed.

104
00:07:38.040 --> 00:07:44.400
So GM would be able to leverage the different course in the system and it will be able to paralyze the

105
00:07:44.400 --> 00:07:46.920
computation and make it much more efficient.

106
00:07:47.370 --> 00:07:50.490
So that's what we get here using declarative programming.

107
00:07:51.210 --> 00:07:57.900
Some Java engineers, senior Java engineers, they actually say that in future the code will be written

108
00:07:57.900 --> 00:07:58.380
in this way.

109
00:07:58.390 --> 00:08:03.630
So they say that it will be a mix of object oriented programming and also declarative programming,

110
00:08:03.630 --> 00:08:06.140
which is nothing but here, functional programming.

111
00:08:06.150 --> 00:08:09.630
So it would be a mix of both object oriented and functional programming.

112
00:08:10.080 --> 00:08:13.020
So what we are getting here is more elegant code.

113
00:08:13.680 --> 00:08:19.410
So the main advantage, just to summarize which streams we are able to perform more complex operations

114
00:08:19.410 --> 00:08:21.990
on collections which were not possible earlier.

115
00:08:21.990 --> 00:08:24.330
So we are able to perform SQL like operations.

116
00:08:24.540 --> 00:08:28.920
But in doing so, we are actually writing declarative style code.

117
00:08:28.920 --> 00:08:35.159
And with declarative style code we have these advantages of clean code, efficient code, and it's also

118
00:08:35.159 --> 00:08:35.640
parallelism.

119
00:08:36.270 --> 00:08:43.919
Now one last thing is so here we have lambdas and method reference, and these are what are enabling

120
00:08:43.919 --> 00:08:45.450
us to embrace streams.

121
00:08:45.450 --> 00:08:49.740
So these features are enabling developers to embrace streams.

122
00:08:49.740 --> 00:08:56.370
So streams could also have been introduced before Java eight, but before Java eight there were no lambdas

123
00:08:56.370 --> 00:08:57.540
or method references.

124
00:08:57.540 --> 00:09:04.680
So we would have used anonymous objects and we know that anonymous objects are kind of verbose and they

125
00:09:04.680 --> 00:09:08.180
wouldn't have made streams appealing to use, right?

126
00:09:08.250 --> 00:09:10.470
So developers wouldn't have embraced streams.

127
00:09:10.830 --> 00:09:17.760
So in order to use streams, we need something like lambdas and method references which are much more

128
00:09:17.760 --> 00:09:24.600
concise to express, and that is what is enabling us to use streams and also develop other powerful

129
00:09:24.600 --> 00:09:25.350
libraries.

130
00:09:25.860 --> 00:09:27.540
So this is a good example.

131
00:09:27.540 --> 00:09:33.080
But now let's head over to my editor and actually implement our demo program.

132
00:09:33.090 --> 00:09:37.560
So we earlier we wrote the indexing program, which was about processing web pages.

133
00:09:37.560 --> 00:09:39.750
So it was written in an imperative way.

134
00:09:39.780 --> 00:09:45.200
Now let's convert that into declarative style and see everything in action.

135
00:09:45.480 --> 00:09:49.470
So let's see some real functional style programming in action.

136
00:09:49.800 --> 00:09:51.600
So let's head over to my editor for that.

137
00:09:53.850 --> 00:09:53.980
Okay.

138
00:09:54.090 --> 00:10:00.270
So for this demo, I have created this new class called Stream's Demo, and I have moved all of this

139
00:10:00.270 --> 00:10:06.240
code from the Functional Interface Demo, which we have seen earlier into this new class, and it has

140
00:10:06.240 --> 00:10:07.260
been cleaned up a bit.

141
00:10:07.440 --> 00:10:09.690
So the main functionality has been moved here.

142
00:10:09.720 --> 00:10:15.780
Now one change I have done is the functional interface demo earlier was in a package called Lambdas

143
00:10:15.780 --> 00:10:17.630
under Common Underscore Semantics Square.

144
00:10:17.640 --> 00:10:23.970
So I have renamed the package as semantic squared functional and that's about it.

145
00:10:23.970 --> 00:10:29.940
So we have those three classes that we had earlier and for streams, this new class streams demo has

146
00:10:29.940 --> 00:10:34.560
been created under this new sub package under functional called streams.

147
00:10:34.860 --> 00:10:38.730
So any streams related class classes will go under this new package.

148
00:10:39.270 --> 00:10:41.130
So this is what we have streams demo.

149
00:10:42.000 --> 00:10:47.480
And we already have the imperative code and we are going to write a declarative code.

150
00:10:47.490 --> 00:10:49.470
So that's how we are going to test it.

151
00:10:49.620 --> 00:10:56.130
So here we have the four documents, and the four documents are accumulated into this list called documents.

152
00:10:56.490 --> 00:11:01.620
And then we have this imperative method which is being invoked from the main method.

153
00:11:01.620 --> 00:11:03.750
And we of course have the indexer class.

154
00:11:03.750 --> 00:11:09.840
And within the imperative method, all we are doing is we are processing the documents and then we have

155
00:11:09.840 --> 00:11:14.880
this predicate where we are checking if the document is about this word called stream.

156
00:11:14.880 --> 00:11:18.660
And if it is, then we are performing two transformations.

157
00:11:18.660 --> 00:11:20.700
So we have the transformation code here.

158
00:11:20.700 --> 00:11:26.250
So we are invoking the HTML tags method and the indexer to do the first transformation.

159
00:11:26.520 --> 00:11:32.940
And for the second transformation we are removing the stop words and it is being assigned to the function

160
00:11:32.940 --> 00:11:34.140
standard interface.

161
00:11:34.410 --> 00:11:36.590
So that's the imperative code.

162
00:11:36.600 --> 00:11:39.740
Now let's see how we can write the declarative code.

163
00:11:39.750 --> 00:11:43.560
So I have some comments here and I'm going to build on this.

164
00:11:43.890 --> 00:11:49.980
So in order to implement stream, so we construct something called as a stream pipeline.

165
00:11:50.520 --> 00:11:54.390
That's a common structure that we have when we are dealing with streams.

166
00:11:54.870 --> 00:11:57.530
And here there are three things that we do.

167
00:11:57.540 --> 00:11:59.490
One is we need to set up a source.

168
00:11:59.520 --> 00:12:06.330
A source can be something like a collection implementation or another list or an array or other sources.

169
00:12:06.330 --> 00:12:07.590
There can be other sources to.

170
00:12:07.860 --> 00:12:13.560
Then once we set up the stream source, we just invoke the in case of collection, we invoke the stream

171
00:12:13.560 --> 00:12:14.100
method.

172
00:12:14.310 --> 00:12:21.480
Then we have zero or more intermediate operations and we have one final terminal operation which essentially

173
00:12:21.480 --> 00:12:22.470
terminates the stream.

174
00:12:23.400 --> 00:12:24.360
So that's what we have.

175
00:12:24.660 --> 00:12:31.770
And here the setting up the stream source is analogous to the tables in the SQL world.

176
00:12:31.800 --> 00:12:36.390
In the SQL world we have we select star from some tables.

177
00:12:36.390 --> 00:12:38.790
So those tables are the source, right?

178
00:12:38.790 --> 00:12:45.030
So similarly we have a source here and these intermediate operations could be something like filtering

179
00:12:45.030 --> 00:12:48.090
or transformation or grouping, so.

180
00:12:48.090 --> 00:12:55.470
So they are like the rare conditions or the group by clauses and each of the intermediate operations

181
00:12:55.470 --> 00:12:56.970
they're written as stream.

182
00:12:57.360 --> 00:13:01.740
So in our slide earlier we looked at the filter and collect filter.

183
00:13:01.740 --> 00:13:05.580
Essentially filter filter would return a stream, an instance of stream.

184
00:13:05.580 --> 00:13:08.220
And so that's an intermediate operation.

185
00:13:08.310 --> 00:13:11.550
Similarly, there is a we also can have a terminal operation.

186
00:13:12.270 --> 00:13:15.600
Now here, let me just run this.

187
00:13:17.790 --> 00:13:18.690
So.

188
00:13:20.340 --> 00:13:21.480
This is what we have.

189
00:13:24.200 --> 00:13:25.370
This is what we have here.

190
00:13:25.370 --> 00:13:30.020
So two of the documents are getting printed out of the four because there are because they are two of

191
00:13:30.020 --> 00:13:31.310
the documents of the word stream.

192
00:13:31.580 --> 00:13:34.510
So now this is what we have here.

193
00:13:34.520 --> 00:13:36.590
The intermediate operations are called as lazy.

194
00:13:36.590 --> 00:13:41.720
And I'm going to explain why it is called so and the terminal operation is called as IGR.

195
00:13:41.840 --> 00:13:44.520
So we will look at that as we are writing the code.

196
00:13:44.540 --> 00:13:48.590
So let's go ahead and let's say we have the documents.

197
00:13:48.650 --> 00:13:54.290
So that's the ArrayList, and we just invoke the Stream method, which was introduced in the collection

198
00:13:54.290 --> 00:13:55.850
interface, as I said earlier.

199
00:13:56.760 --> 00:14:01.050
So this is what is introduced here now on the stream.

200
00:14:01.050 --> 00:14:04.460
So it returns an instance of stream interface.

201
00:14:04.470 --> 00:14:08.250
So let's go ahead and invoke the filter method.

202
00:14:08.760 --> 00:14:10.680
So with this, we are getting a stream.

203
00:14:10.680 --> 00:14:16.740
So you can think of stream as just a stream of something, a stream of all the documents.

204
00:14:17.040 --> 00:14:19.320
And we will be processing each of those documents.

205
00:14:19.320 --> 00:14:23.370
So let's invoke the filter method, because that's what we need to do the first thing.

206
00:14:25.410 --> 00:14:26.640
And that's right, our Lambda.

207
00:14:30.320 --> 00:14:32.040
So this is our predicate.

208
00:14:32.060 --> 00:14:37.090
So if you look at stream here, so this is the filter method, so it accepts a predicate.

209
00:14:37.100 --> 00:14:39.200
So this is essentially what we are doing here.

210
00:14:39.200 --> 00:14:44.870
Also, we are assigning it to a predicate, but here we are making use of the streams API.

211
00:14:45.230 --> 00:14:50.030
So once the filtering is done, we need to we need to transform.

212
00:14:50.030 --> 00:14:56.570
So for transformation the stream because the filter is going to return another stream, another stream

213
00:14:56.570 --> 00:14:59.900
instance we can invoke a method called map.

214
00:15:00.410 --> 00:15:05.540
So the stream has a method called map and within the first map we will perform.

215
00:15:06.980 --> 00:15:12.560
The transformation, the first transformation and the second map will perform the second transformation.

216
00:15:12.560 --> 00:15:17.300
So the first transformation is simply invoking this strip HTML tags.

217
00:15:17.300 --> 00:15:18.650
So we can just copy that.

218
00:15:21.460 --> 00:15:25.600
So that would perform the first transformation.

219
00:15:25.600 --> 00:15:29.470
And let's also put the second transformation, which is removing the stop words.

220
00:15:36.860 --> 00:15:43.280
Finally we are just printing here so for that so map would also so both of these all three of these

221
00:15:43.280 --> 00:15:46.100
are intermediate operations and all of them are returning.

222
00:15:46.100 --> 00:15:50.000
A stream map is returning a stream and filter is also returning a stream.

223
00:15:50.150 --> 00:15:55.580
So which means that finally we can invoke another method called for each here.

224
00:15:58.650 --> 00:16:00.690
So far, each takes in consumer.

225
00:16:02.160 --> 00:16:03.660
And it's a terminal operation.

226
00:16:03.660 --> 00:16:05.970
So with that, we are going to terminate the stream.

227
00:16:06.150 --> 00:16:08.850
So let me just go ahead and print this.

228
00:16:12.050 --> 00:16:13.610
So here, let me also comment this.

229
00:16:13.670 --> 00:16:21.830
Within this strip, we have this statement and I commented later, so let's just go ahead and run this.

230
00:16:22.340 --> 00:16:29.210
So as you can see, we have the exact same output right over here imperative and this is declarative

231
00:16:29.240 --> 00:16:33.110
and we can see that it's so nicely written.

232
00:16:33.110 --> 00:16:34.190
It's very elegant.

233
00:16:34.610 --> 00:16:35.900
So that's what we have.

234
00:16:36.080 --> 00:16:40.850
And the next thing I want to talk about is about the lazy operations.

235
00:16:40.850 --> 00:16:47.270
We said that these intermediate operations are lazy operations, which means that they will not be executed

236
00:16:47.270 --> 00:16:48.920
with the invocation here.

237
00:16:48.920 --> 00:16:53.210
So they're not going to be executed until the for each method is invoked.

238
00:16:53.720 --> 00:16:56.270
So the for each method is an eager operation.

239
00:16:56.270 --> 00:17:03.470
So only when Gvm is going to execute this, at that instance, it's going to execute these different

240
00:17:03.680 --> 00:17:05.319
these different intermediate operations.

241
00:17:05.329 --> 00:17:08.550
Until then, these operations are not going to execute.

242
00:17:08.569 --> 00:17:10.339
So let's actually look at that.

243
00:17:10.940 --> 00:17:12.280
Let me demonstrate that.

244
00:17:12.290 --> 00:17:17.180
So let's put it semicolon here and let me come on this.

245
00:17:17.920 --> 00:17:21.040
So here, this is a map and it's going to return a stream.

246
00:17:22.240 --> 00:17:23.920
Of string.

247
00:17:26.250 --> 00:17:27.390
Let's call it Stream.

248
00:17:28.620 --> 00:17:29.850
So this is what we have.

249
00:17:29.880 --> 00:17:31.170
And let me run this.

250
00:17:33.190 --> 00:17:35.320
So as you can see, there is no output.

251
00:17:35.320 --> 00:17:36.700
That is no for each statement.

252
00:17:37.510 --> 00:17:39.520
Let me also put this thing back.

253
00:17:39.560 --> 00:17:40.300
The stream.

254
00:17:44.220 --> 00:17:47.850
Now you can see that in the imperative code it is printing.

255
00:17:49.220 --> 00:17:52.510
The Sprint statement, which is inside the HTML tags.

256
00:17:52.520 --> 00:17:57.650
But over here we don't have in the declarative code.

257
00:17:57.740 --> 00:18:00.290
None of this is getting executed, so we are not.

258
00:18:00.290 --> 00:18:06.040
The HTML tags method has not been invoked, so we just have these and these are lazy operations.

259
00:18:06.050 --> 00:18:09.200
Now let me just put an advantage of this.

260
00:18:09.200 --> 00:18:10.820
As we can invoke.

261
00:18:10.820 --> 00:18:13.730
Let's say we can we can pass this stream to another method.

262
00:18:19.470 --> 00:18:23.580
So I'm going to create that method and I'll just say.

263
00:18:30.580 --> 00:18:30.780
Okay.

264
00:18:30.850 --> 00:18:34.210
So we have this parameter as a stream of string.

265
00:18:34.750 --> 00:18:36.040
So this is what we have.

266
00:18:36.040 --> 00:18:40.390
And if we run this now, we can see that we get the output.

267
00:18:40.540 --> 00:18:42.040
So if I comment this.

268
00:18:45.080 --> 00:18:48.950
None of this none of it is getting executed because these are lazy operations.

269
00:18:49.280 --> 00:18:50.990
But if I uncomment.

270
00:18:52.000 --> 00:18:56.290
And if I run it, we see the output because we have that terminal operation over here.

271
00:18:56.740 --> 00:18:57.800
So that's the thing.

272
00:18:57.820 --> 00:19:00.740
Now, so here the source is this.

273
00:19:00.760 --> 00:19:07.120
So you can see that the output is exactly identical, which means that we are iterating through the

274
00:19:07.120 --> 00:19:08.320
documents in the stream.

275
00:19:08.320 --> 00:19:13.780
Then we are applying this filter on the first, the filter on the on the first document.

276
00:19:14.020 --> 00:19:19.900
And then if it has the word stream, then that document is being transformed here.

277
00:19:19.900 --> 00:19:23.110
So that's why we have in strip HTML tags.

278
00:19:24.220 --> 00:19:30.850
And then after that we are doing one more transformation and then we are printing here.

279
00:19:31.240 --> 00:19:38.140
So, so it's not like we are doing the transformations first on all of the documents and then we are

280
00:19:38.140 --> 00:19:38.590
printing.

281
00:19:38.590 --> 00:19:40.090
So that's not happening here.

282
00:19:40.360 --> 00:19:41.560
So it's happening.

283
00:19:41.560 --> 00:19:46.000
The operations is exactly identical to the way it is happening and the imperative code.

284
00:19:46.630 --> 00:19:52.540
So it is we are processing one document at a time and if it passes the predicate then we are applying

285
00:19:52.540 --> 00:19:54.910
the two transformations and then we are printing it.

286
00:19:54.910 --> 00:19:56.830
So that's exactly how it is happening.

287
00:19:56.830 --> 00:20:00.100
So the entire functionality is just identical.

288
00:20:00.100 --> 00:20:01.810
It's just much more elegant code.

289
00:20:02.820 --> 00:20:06.560
Now, as I said earlier here, the sauce can be something else too.

290
00:20:06.570 --> 00:20:08.120
It need not be just stream.

291
00:20:08.130 --> 00:20:12.990
So let me just comment this out and let me say race class.

292
00:20:12.990 --> 00:20:14.160
Let me use the race class.

293
00:20:14.160 --> 00:20:16.530
And it has this new method called stream.

294
00:20:17.780 --> 00:20:20.230
And we can pass an area here.

295
00:20:20.240 --> 00:20:25.640
So here we want to use an array as, as the source for the stream.

296
00:20:25.640 --> 00:20:27.620
So we will just say new.

297
00:20:37.860 --> 00:20:41.390
So we are passing a stream, an area.

298
00:20:41.550 --> 00:20:43.880
We have the area as the source this time.

299
00:20:43.890 --> 00:20:46.890
So if you run it once again, it's going to be the same output.

300
00:20:47.100 --> 00:20:51.930
Or we can also say we can also have a comma separated list for this.

301
00:20:51.930 --> 00:20:55.710
There is a method called off here in the stream interface.

302
00:20:55.710 --> 00:21:02.250
So we can just invoke that and we can pass all of these documents as comma separated list of values.

303
00:21:05.400 --> 00:21:06.630
To the off method.

304
00:21:07.080 --> 00:21:09.470
So it takes a water parameter.

305
00:21:09.480 --> 00:21:11.190
So if I run this.

306
00:21:12.970 --> 00:21:15.070
Once again we have the same output.

307
00:21:15.610 --> 00:21:22.870
So in summary, the Streams API is allowing us to perform some complex queries on collections and in

308
00:21:22.870 --> 00:21:27.330
a declarative way, which is helping us to have this kind of cleaner code.

309
00:21:27.340 --> 00:21:30.880
And as I mentioned earlier, it can also be paralyzing easily.

310
00:21:31.420 --> 00:21:33.000
And so that's about it.

311
00:21:33.010 --> 00:21:37.300
And you can also check out this book called as Java eight in Action.

312
00:21:37.300 --> 00:21:43.080
It's a very good book written by Raul Irma, Mario Fusco and Alan Mycroft.

313
00:21:43.090 --> 00:21:45.820
So you can also read that book.

314
00:21:45.820 --> 00:21:52.030
So it describes everything, the philosophy behind many of these Java eight features in a very nice

315
00:21:52.030 --> 00:21:52.330
way.

316
00:21:52.330 --> 00:21:54.160
So that's the thing I like about that book.

317
00:21:54.160 --> 00:21:56.350
So it's a very good book whenever possible.

318
00:21:56.350 --> 00:21:58.570
You can buy that if you want to.

319
00:21:59.260 --> 00:22:02.950
Now let me also just quickly pull up the stream API.

320
00:22:02.950 --> 00:22:08.470
So this is the Steam API, it's Java eight, but you can also use look at Java nine and this is the

321
00:22:08.470 --> 00:22:11.170
stream interface and this is the Java Stream package.

322
00:22:11.170 --> 00:22:16.660
So this is essentially the Stream API and there are some interfaces here and this is the stream interface.

323
00:22:16.660 --> 00:22:18.010
So this is what we have.

324
00:22:19.620 --> 00:22:20.190
Here.

325
00:22:24.230 --> 00:22:25.730
So these are the different methods.

326
00:22:25.740 --> 00:22:28.400
So we already looked at the.

327
00:22:29.900 --> 00:22:34.050
The method filter here, which is taking a predicate.

328
00:22:34.070 --> 00:22:36.950
Then we also looked at the mapping method.

329
00:22:38.430 --> 00:22:39.960
And we will also look at other methods.

330
00:22:39.960 --> 00:22:42.240
But this is the map method which takes function.

331
00:22:44.890 --> 00:22:46.690
And these are all the different methods.

332
00:22:46.690 --> 00:22:49.000
And we also looked at the off method, the.

333
00:22:50.780 --> 00:22:53.810
There are also other methods like red use and sorted.

334
00:22:53.960 --> 00:22:57.770
So these are all some methods in this particular interface.

335
00:23:02.490 --> 00:23:05.160
Now, one thing is, once you do this.

336
00:23:08.610 --> 00:23:12.180
So we cannot execute the terminal operation one more time.

337
00:23:12.180 --> 00:23:18.150
So with this, the stream has been closed and we cannot execute the terminal operation for the second

338
00:23:18.150 --> 00:23:18.480
time.

339
00:23:18.480 --> 00:23:20.430
We would have to rebuild the team again.

340
00:23:20.430 --> 00:23:23.580
So because of that, we are getting this illegal state exception.

341
00:23:23.730 --> 00:23:24.960
So that's about it.

342
00:23:24.960 --> 00:23:30.720
So that's a good introduction to streams and we will explore furthermore in subsequent lectures.

343
00:23:30.720 --> 00:23:32.250
But this is what we have for now.

344
00:23:32.460 --> 00:23:38.790
So I hope you enjoyed learning about it and thank you and happy coding and this code will be available

345
00:23:38.790 --> 00:23:39.930
in the resources section.

346
00:23:40.140 --> 00:23:40.710
Thank you.

