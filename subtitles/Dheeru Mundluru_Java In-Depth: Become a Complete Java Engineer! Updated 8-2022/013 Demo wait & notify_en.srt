1
00:00:02,120 --> 00:00:02,790
Hi there.

2
00:00:02,810 --> 00:00:03,920
This is the rule.

3
00:00:04,310 --> 00:00:11,150
In the last lecture, we have seen the knife indexer program where the indexing thread was wasting CPU

4
00:00:11,150 --> 00:00:14,660
cycles while the corresponding web page was being downloaded.

5
00:00:15,020 --> 00:00:15,890
And that's not good.

6
00:00:15,920 --> 00:00:19,550
So in this lecture, we will see how that can be avoided.

7
00:00:20,450 --> 00:00:22,850
How we can avoid wasting CPU cycles.

8
00:00:23,330 --> 00:00:26,440
So for this demo I created this new class called us.

9
00:00:26,450 --> 00:00:33,230
Wait, notify indexer in the same sub package indexer and it's called as wait notify indexer and we

10
00:00:33,230 --> 00:00:39,530
have the same classes, the nested classes, weblink downloader and indexer, and we'll be having those

11
00:00:39,830 --> 00:00:41,660
nested classes in all of the demos.

12
00:00:42,140 --> 00:00:47,090
So the class is pretty much identical to the native indexer and within web link.

13
00:00:47,120 --> 00:00:50,260
So one change is that the HTML page?

14
00:00:50,270 --> 00:00:51,610
Earlier it was volatile.

15
00:00:51,620 --> 00:00:57,920
Now it's not volatile and we don't need that because within the wait notify indexer we use two methods

16
00:00:57,920 --> 00:01:04,430
called us wait and notify and they have a happens happens before relationship and so we don't need volatile

17
00:01:04,459 --> 00:01:12,320
keyword here so that's the volatile modifier has been removed and so here is the downloader and we just

18
00:01:12,320 --> 00:01:19,700
need to fill in this run method here and within the indexer also we need to fill in the run method and

19
00:01:19,700 --> 00:01:24,740
everything else is the same like the go method add and the create web blend.

20
00:01:24,770 --> 00:01:26,750
Only difference is in the main method.

21
00:01:26,750 --> 00:01:31,820
We are now instantiating wait notify indexer and we are still creating the same web links.

22
00:01:32,120 --> 00:01:34,010
So we are passing the same information.

23
00:01:35,300 --> 00:01:37,220
And the method is also the same.

24
00:01:37,220 --> 00:01:43,820
So we are creating two threads corresponding to downloader and indexer and we are starting them here

25
00:01:44,120 --> 00:01:46,580
and we are iterating over all the web links.

26
00:01:47,030 --> 00:01:52,430
So the first thing is let's go ahead and fill the indexer method here.

27
00:01:55,370 --> 00:01:56,540
So here.

28
00:01:58,540 --> 00:01:58,680
Okay.

29
00:01:58,750 --> 00:01:59,730
Let's go here.

30
00:01:59,740 --> 00:02:00,220
Indexer.

31
00:02:00,220 --> 00:02:02,770
This is an indexer method in the Indexer program.

32
00:02:03,100 --> 00:02:07,690
So first thing that we can do is let's just go ahead and copy this.

33
00:02:11,110 --> 00:02:14,530
So we are downloading the HTML page.

34
00:02:15,400 --> 00:02:16,060
And.

35
00:02:17,670 --> 00:02:19,680
Let's put a wild condition here.

36
00:02:19,920 --> 00:02:22,290
I will explain why we need a wild condition here.

37
00:02:26,680 --> 00:02:29,230
So we have this wild condition.

38
00:02:29,230 --> 00:02:32,250
So it's the condition is that HTML page is equal to null.

39
00:02:32,260 --> 00:02:35,290
So when this is the case, we would have to wait.

40
00:02:35,290 --> 00:02:37,000
So this thread indexer.

41
00:02:37,000 --> 00:02:39,100
It means that the page is not yet downloaded.

42
00:02:39,310 --> 00:02:41,370
So earlier we had an infinite loop.

43
00:02:41,380 --> 00:02:47,260
Now we will say wait and wait is a method in the object class.

44
00:02:47,260 --> 00:02:50,890
So it's not in the threat class, but it is an object class.

45
00:02:50,890 --> 00:02:57,130
And what it will do is it will suspend the thread, the indexer thread, and it will move that thread

46
00:02:57,130 --> 00:03:00,670
from running state into a new state called Waiting.

47
00:03:01,000 --> 00:03:04,090
So that's a new state which we have, which we haven't seen so far.

48
00:03:04,360 --> 00:03:07,720
And later at the end of this lecture, we will also discuss more about it.

49
00:03:08,020 --> 00:03:11,020
So it will go into this state called waiting.

50
00:03:11,020 --> 00:03:13,840
So this thread will be will be suspended.

51
00:03:14,050 --> 00:03:15,550
Now there is a compilation here.

52
00:03:15,550 --> 00:03:16,990
It's just around with try catch.

53
00:03:16,990 --> 00:03:18,010
So let's do that.

54
00:03:18,370 --> 00:03:20,290
So that's what is needed.

55
00:03:21,740 --> 00:03:24,110
And so this is what we have here.

56
00:03:25,020 --> 00:03:27,820
So which means that the threat is waiting for the other threat.

57
00:03:27,840 --> 00:03:30,030
So let's go ahead and fill this.

58
00:03:31,050 --> 00:03:33,720
The run method inside the downloader class.

59
00:03:33,720 --> 00:03:40,020
And once again, let's just go back here into the naive indexer class and let's just copy these two

60
00:03:40,050 --> 00:03:40,590
here.

61
00:03:44,660 --> 00:03:44,760
Okay.

62
00:03:44,900 --> 00:03:46,400
Let's have the same statements.

63
00:03:46,850 --> 00:03:48,500
And here.

64
00:03:50,690 --> 00:03:52,250
We also need to try catch here.

65
00:03:52,250 --> 00:03:56,120
So let's do that and let's actually move this into.

66
00:04:07,080 --> 00:04:07,890
So let's do that.

67
00:04:07,890 --> 00:04:09,540
And so.

68
00:04:09,780 --> 00:04:12,930
So this thread is there and this thread has to go.

69
00:04:13,380 --> 00:04:16,829
So once it is done downloading it should notify the other thread.

70
00:04:16,829 --> 00:04:18,990
So the other thread has suspended itself.

71
00:04:18,990 --> 00:04:20,010
The indexer thread.

72
00:04:20,040 --> 00:04:26,310
So we need to, we need to take that wrap that thread because it went into waiting state and in order

73
00:04:26,310 --> 00:04:29,100
to wake that thread we use this method called us notify.

74
00:04:31,380 --> 00:04:33,360
I know if I would wake that.

75
00:04:33,360 --> 00:04:34,320
The other thread.

76
00:04:34,620 --> 00:04:38,130
Now, here, let's just go ahead and.

77
00:04:43,420 --> 00:04:45,560
And it's also invoke the index method.

78
00:04:46,070 --> 00:04:51,920
So if you are outside the loop, it means that this condition has failed and the web page has been downloaded.

79
00:04:51,950 --> 00:04:56,090
So let's go ahead and let's say HTML page.

80
00:04:57,890 --> 00:05:06,470
But here we have to say HTML page equal to this one because once it is once it has come back from the

81
00:05:06,470 --> 00:05:11,090
waiting stage waiting state, it needs to once again fetch the page.

82
00:05:11,090 --> 00:05:13,070
So the page has already been downloaded.

83
00:05:13,070 --> 00:05:15,380
So we are invoking the HTML page.

84
00:05:15,380 --> 00:05:21,260
And, and so in the next iteration, HTML page would be equal to not now, which would be not null.

85
00:05:21,440 --> 00:05:26,180
And so we would exit the loop and we would this statement would get executed.

86
00:05:26,210 --> 00:05:26,620
Right.

87
00:05:27,080 --> 00:05:29,600
But so let's go ahead and run this first.

88
00:05:31,270 --> 00:05:36,640
As you can see, we get this exception called illegal monitor state exception.

89
00:05:36,700 --> 00:05:42,260
And that's because we need to have a synchronised block when we are using when we are using this weight

90
00:05:42,280 --> 00:05:42,790
method.

91
00:05:43,030 --> 00:05:44,650
So we need a synchronized block.

92
00:05:44,680 --> 00:05:51,610
And the reason we need a synchronized block is because let's assume that the thread scheduler has picked

93
00:05:51,820 --> 00:05:55,420
the indexer thread to run and the indexer thread will come here.

94
00:05:55,420 --> 00:05:56,200
It will.

95
00:05:56,680 --> 00:05:57,910
It will access this method.

96
00:05:57,910 --> 00:06:01,870
Get HTML page and html page would be null initially.

97
00:06:02,020 --> 00:06:04,510
So this statement will get executed.

98
00:06:04,540 --> 00:06:08,770
But before it gets, it executes the weight statement.

99
00:06:09,130 --> 00:06:15,040
You know, the thread scheduler could run, the other thread could bring the other thread into running

100
00:06:15,040 --> 00:06:15,610
state.

101
00:06:15,880 --> 00:06:22,210
The downloaded thread and the downloaded thread can download the web page, will set the HTML page and

102
00:06:22,210 --> 00:06:24,220
can invoke the notify method.

103
00:06:25,270 --> 00:06:32,950
And after that, after the notify method is invoked, then this particular thread might execute the

104
00:06:32,950 --> 00:06:35,710
weight method and it will go into waiting state.

105
00:06:36,070 --> 00:06:43,150
So in that case, it will always be in waiting state because this particular notify method, the statement

106
00:06:43,150 --> 00:06:44,620
has already been executed.

107
00:06:44,950 --> 00:06:46,150
So that's not right.

108
00:06:46,180 --> 00:06:52,600
And so we need a synchronize block, which means that these steps have to be executed.

109
00:06:52,690 --> 00:06:54,820
Have to be executed atomically.

110
00:06:55,100 --> 00:06:55,450
Right.

111
00:06:55,450 --> 00:06:58,270
So that's why we need a synchronized statement here.

112
00:07:02,020 --> 00:07:04,930
And the object here we can use web link.

113
00:07:10,800 --> 00:07:13,260
It's more this entire code.

114
00:07:14,820 --> 00:07:16,770
Into the synchronized block.

115
00:07:17,010 --> 00:07:18,660
So this is what we are doing here.

116
00:07:20,120 --> 00:07:23,440
So now one thing is so we have the synchronized block.

117
00:07:23,450 --> 00:07:29,420
So if the indexer threat is here and if once it gets into this wild loop here.

118
00:07:29,540 --> 00:07:33,800
So it's going to execute the weight statement and the weight statement.

119
00:07:33,800 --> 00:07:39,860
We said that it will suspend this thread and it will move, move that move the indexer thread into waiting

120
00:07:39,860 --> 00:07:40,420
state.

121
00:07:40,430 --> 00:07:44,660
But at the same time it will also release the log that it has.

122
00:07:45,080 --> 00:07:49,190
So now the log is the log of this particular object web link.

123
00:07:49,340 --> 00:07:51,380
So that needs to be released.

124
00:07:52,220 --> 00:07:57,530
And when it is released, it needs to be acquired by the other thread, which means that we will also

125
00:07:57,530 --> 00:07:59,900
have a synchronized block here.

126
00:08:03,370 --> 00:08:06,610
And let's move this here to this.

127
00:08:07,340 --> 00:08:11,060
And this will also use the same lock.

128
00:08:12,580 --> 00:08:23,140
And here we need to invoke weblink dot notify because notify method and the weight method are actually

129
00:08:23,140 --> 00:08:25,120
part of object class.

130
00:08:25,420 --> 00:08:26,770
So keep that in mind.

131
00:08:26,800 --> 00:08:28,150
Weight notify.

132
00:08:28,150 --> 00:08:33,250
And there is one more method called notify all which we can also use here instead of notify.

133
00:08:33,250 --> 00:08:36,730
All three belong to object class not thread.

134
00:08:37,450 --> 00:08:41,590
Since they are object class we can we have to invoke it this way.

135
00:08:43,230 --> 00:08:44,610
So now we are good.

136
00:08:44,970 --> 00:08:49,110
So here the threat is going into Wayne State and.

137
00:08:50,880 --> 00:08:53,100
Which and it is also releasing the lock.

138
00:08:53,310 --> 00:08:59,430
So when it releases the lock, the other thread will acquire the lock here, the downloader thread and

139
00:08:59,430 --> 00:09:02,520
it will download the web page and it will set the HTML page.

140
00:09:02,550 --> 00:09:08,610
After it does that, it will invoke the notify method and the notify method will wake.

141
00:09:08,610 --> 00:09:11,160
The other thread will wake the indexer thread.

142
00:09:11,580 --> 00:09:16,530
So with that the indexer thread will move from waiting to block state.

143
00:09:16,920 --> 00:09:23,220
So it's not getting into the state in order to for it to get into the vulnerable state.

144
00:09:23,220 --> 00:09:28,410
For the indexer thread, to get into the state, it needs to acquire the lock and the lock is not yet

145
00:09:28,410 --> 00:09:28,770
released.

146
00:09:28,770 --> 00:09:31,980
At this instance, lock is actually released here.

147
00:09:32,580 --> 00:09:38,250
Lock is released once we are out of the synchronized block here.

148
00:09:38,250 --> 00:09:42,900
At this point, we are still in the synchronized block and so the lock is not yet released.

149
00:09:42,900 --> 00:09:48,480
All it does is it moves the other thread, the cooperating thread, which is the indexer thread.

150
00:09:48,480 --> 00:09:53,880
It moves that particular thread from the waiting state straight into block state.

151
00:09:54,360 --> 00:10:00,540
And once we are out of this block or if we invoke another rate method here, then the block, then the

152
00:10:00,540 --> 00:10:01,590
lock will be released.

153
00:10:01,590 --> 00:10:03,210
But that's not needed here.

154
00:10:03,210 --> 00:10:05,820
So we will just exit the synchronized method.

155
00:10:05,820 --> 00:10:08,850
And with that the lock are, in other words, monitor.

156
00:10:08,850 --> 00:10:13,980
Sometimes the lock is also called as monitor would be released by this particular thread and it will

157
00:10:13,980 --> 00:10:16,110
then be acquired by the other thread.

158
00:10:16,710 --> 00:10:23,370
Now, if there are multiple threads that are waiting on this particular are waiting on this particular

159
00:10:23,370 --> 00:10:29,610
link or object, then in that case, so which means that multiple threads have executed.

160
00:10:29,610 --> 00:10:34,350
Wait, then it will still wake up a single thread and that will be chosen arbitrarily.

161
00:10:35,070 --> 00:10:36,420
So that's one thing.

162
00:10:36,420 --> 00:10:37,050
And we can.

163
00:10:37,050 --> 00:10:43,350
And there is also another method called notify all generally that is preferred to be used and notify

164
00:10:43,350 --> 00:10:45,480
all will actually wake up.

165
00:10:45,480 --> 00:10:52,020
All the threats that are waiting on this particular that are in the that have executed the weight method

166
00:10:52,020 --> 00:10:54,030
on this object on the same object.

167
00:10:54,540 --> 00:11:02,010
So the notify will only will only wake up one of the threads that is waiting if there are multiple threads

168
00:11:02,010 --> 00:11:07,770
but notify all well wake up all the threads and we can use either of them and it is preferable to use

169
00:11:07,770 --> 00:11:13,050
notify all because today we are using notify because only one thread is waiting.

170
00:11:13,380 --> 00:11:18,270
But in the future, if there are other threats that are also going to wait, that are going to invoke

171
00:11:18,270 --> 00:11:24,960
the wait on this particular object, then notify all would be useful so we can do that.

172
00:11:25,910 --> 00:11:26,600
Also.

173
00:11:27,370 --> 00:11:30,130
So it can be either notify or notify all.

174
00:11:30,160 --> 00:11:33,740
And that would bring the threat from a waiting state.

175
00:11:33,760 --> 00:11:38,380
The other threat from waiting state into into block state.

176
00:11:38,410 --> 00:11:44,440
And once it exits, once the once the synchronize block exits, this thread will release the lock.

177
00:11:44,440 --> 00:11:48,190
And the other thread, which is in the block state, will acquire the lock on.

178
00:11:48,190 --> 00:11:50,110
Well, going to run the state.

179
00:11:50,860 --> 00:11:56,680
But if there are some other threads which are also waiting on this particular object which did not invoke

180
00:11:56,680 --> 00:12:01,000
rate method but are still, for whatever reason, are waiting on this particular object.

181
00:12:01,000 --> 00:12:06,160
Maybe there are some other synchronized methods on this object, and if they are waiting on that, then

182
00:12:06,160 --> 00:12:11,080
they may also get instead of these the indexer thread.

183
00:12:11,110 --> 00:12:14,590
Those other threads might also acquire the lock.

184
00:12:14,890 --> 00:12:16,300
So just keep that in mind.

185
00:12:17,050 --> 00:12:18,970
So this is what we have here.

186
00:12:20,240 --> 00:12:22,940
And let's put a bunch of print statements.

187
00:12:23,840 --> 00:12:28,730
Now, one of the things I want to tell us, like the rate method here is releasing the lock here.

188
00:12:29,030 --> 00:12:37,670
But had we used like the other methods, like the sleep method or the method, so those those method

189
00:12:37,670 --> 00:12:42,020
calls will also suspend the thread, but they will not release the lock.

190
00:12:42,320 --> 00:12:46,640
So that's one difference between weight and other methods like sleep and yield.

191
00:12:46,940 --> 00:12:49,160
So just keep that in to keep that in mind.

192
00:12:49,580 --> 00:12:53,360
And let's put a bunch of print statements here.

193
00:13:04,890 --> 00:13:07,140
And this is not your downloaded.

194
00:13:15,050 --> 00:13:16,420
So that should be good.

195
00:13:16,430 --> 00:13:20,300
So let's go ahead and run this.

196
00:13:34,080 --> 00:13:34,970
Some Internet issue.

197
00:13:34,980 --> 00:13:36,480
Let me just run it one more time.

198
00:13:37,910 --> 00:13:38,690
Here you go.

199
00:13:41,070 --> 00:13:44,010
I think one of the links is having some issue, but that's fine.

200
00:13:44,010 --> 00:13:45,540
At least the others got downloaded.

201
00:13:45,540 --> 00:13:47,010
So let me just stop it there.

202
00:13:47,250 --> 00:13:48,690
So here we are saying.

203
00:13:48,690 --> 00:13:51,060
So these are the three pages.

204
00:13:52,630 --> 00:13:55,140
And here it says not yet downloaded.

205
00:13:55,150 --> 00:14:00,250
So we were in the indexer thread and it says not yet downloaded.

206
00:14:00,670 --> 00:14:08,140
And then it was downloading the downloaded thread was executing this, and then the indexer thread once

207
00:14:08,140 --> 00:14:12,430
again it says to other for two other web pages, it says not yet downloaded.

208
00:14:12,640 --> 00:14:21,010
And here the the web link with the ID 2004 it is awake and here it went into wait state.

209
00:14:21,250 --> 00:14:23,140
Then it got downloaded right?

210
00:14:23,140 --> 00:14:24,040
It got downloaded.

211
00:14:24,040 --> 00:14:29,980
It went to wait state and the the other thread, the download thread has downloaded it and then it invoked

212
00:14:29,980 --> 00:14:30,940
the notify method.

213
00:14:30,940 --> 00:14:37,570
And so this got awakened and after it got awaken we it is also getting indexed OC.

214
00:14:38,450 --> 00:14:39,050
So that's it.

215
00:14:39,290 --> 00:14:43,670
I actually stopped the program in between because one of I think some of the links were not getting

216
00:14:43,670 --> 00:14:49,370
downloaded properly, maybe some web server issues on their end so that least we could see the flow

217
00:14:49,370 --> 00:14:49,910
here.

218
00:14:49,910 --> 00:14:51,470
So that's important.

219
00:14:51,560 --> 00:14:56,390
So as you can see now, we are not we are not wasting the CPU cycles here.

220
00:14:56,420 --> 00:14:59,390
The indexer thread is go is suspending itself.

221
00:14:59,390 --> 00:15:03,170
So with that we are saving the CPU, CPU cycles.

222
00:15:03,170 --> 00:15:07,460
So that's an improvement over the previous approach, the knife indexer approach.

223
00:15:08,400 --> 00:15:11,130
Now, one thing is this is the standard idiom.

224
00:15:11,880 --> 00:15:13,410
So this is the standard idiom.

225
00:15:13,410 --> 00:15:20,190
So the weight method should always be used with this kind of a wild condition, not an F, but a wild

226
00:15:20,190 --> 00:15:20,640
condition.

227
00:15:20,640 --> 00:15:22,170
And that's the standard idiom.

228
00:15:22,620 --> 00:15:29,700
That's because sometimes what happens is there is also something called as curious wake up spurious

229
00:15:29,700 --> 00:15:36,750
vapour, in which case a weighting thread can actually move from the weight state into the block state

230
00:15:37,140 --> 00:15:42,660
so it can wake up even though there was no notify, call, notify, signal from the other cooperating

231
00:15:42,660 --> 00:15:43,040
thread.

232
00:15:43,050 --> 00:15:44,660
And that can happen rarely.

233
00:15:44,670 --> 00:15:49,290
So if that happens, what would happen is the HTML page would still be null.

234
00:15:49,290 --> 00:15:56,670
And where you know this thread is being woken, woken up and because of that, so we it's not good state.

235
00:15:56,670 --> 00:16:00,750
So we should always have this this wild condition here.

236
00:16:00,750 --> 00:16:02,460
So that's the standard idiom.

237
00:16:03,090 --> 00:16:09,540
And another reason could be another reason can also be that the other the cooperating thread invokes

238
00:16:09,540 --> 00:16:10,700
the notify method.

239
00:16:10,710 --> 00:16:17,850
So this will wake up, but this thread might not get the lock and some other thread might acquire the

240
00:16:17,850 --> 00:16:21,660
lock and it might set HTML page to null once again.

241
00:16:21,930 --> 00:16:28,200
So I mean, it doesn't make sense in this particular example, but in some other example where we have

242
00:16:28,230 --> 00:16:34,410
a shared state on which these threats are working on, so that shared state can be changed by some other

243
00:16:34,410 --> 00:16:34,980
thread.

244
00:16:35,610 --> 00:16:43,980
So that's why it is always important to have this weight method along with some condition, and that

245
00:16:43,980 --> 00:16:45,990
condition should be within the while.

246
00:16:46,140 --> 00:16:48,960
We should use a wild statement in this way.

247
00:16:49,800 --> 00:16:54,930
So that's why we need a while, a wild statement here, and that's the standard idiom.

248
00:16:55,110 --> 00:16:58,440
So this is also explained in the effective Java item.

249
00:16:59,620 --> 00:17:01,270
One of the effective items.

250
00:17:01,690 --> 00:17:08,319
And now I have some text also here, just like the previous example, previous demo.

251
00:17:08,560 --> 00:17:16,300
So we are having better coordination now and the lock is relinquished upon invoking the weight method.

252
00:17:16,660 --> 00:17:21,839
And the one difference is that each HTML page is not yet declared, it's not declared volatile and web

253
00:17:21,849 --> 00:17:22,300
link.

254
00:17:22,420 --> 00:17:28,150
And that's because there is an unlock there is an unlock happening in the downloaded thread, right?

255
00:17:28,150 --> 00:17:34,630
Once it exits the synchronized method, here it is unlocking it is it is relinquishing the lock.

256
00:17:34,990 --> 00:17:41,530
And after that the other thread, the indexer thread is acquiring the lock and there is a happens before

257
00:17:41,560 --> 00:17:43,600
relationship between those two actions.

258
00:17:43,870 --> 00:17:46,390
So here we are unlocking and there we are locking.

259
00:17:46,390 --> 00:17:51,430
And because of that happens before relationship, we have the memory visibility also.

260
00:17:51,430 --> 00:17:53,770
And so we do not need a volatile variable.

261
00:17:53,980 --> 00:17:55,660
So that's what is being written here.

262
00:17:55,990 --> 00:18:01,900
So it is, but the limitation here is we are solving the task cooperation in a low level fashion.

263
00:18:02,620 --> 00:18:08,290
And so because we are using all those synchronized blocks and we are using the wild loops, so it's

264
00:18:08,290 --> 00:18:09,340
pretty low level.

265
00:18:09,370 --> 00:18:15,790
And in Java five, we have some concurrency utilities which will make this whole process a lot cleaner.

266
00:18:16,300 --> 00:18:24,310
So this was this approach was used before Java five and so after Java five, since we have since we

267
00:18:24,310 --> 00:18:30,070
have the concurrency utilities, you should be using that OC only you would be looking at this kind

268
00:18:30,070 --> 00:18:32,770
of a code only if you are looking at some legacy code.

269
00:18:33,550 --> 00:18:35,290
So that's about it.

270
00:18:35,620 --> 00:18:38,200
So now let's head back to the slides.

271
00:18:38,200 --> 00:18:39,760
Let's look at the slides.

272
00:18:39,760 --> 00:18:45,760
And in the slides we are actually we will actually look at the thread states because there are two new

273
00:18:45,760 --> 00:18:46,120
states.

274
00:18:46,390 --> 00:18:50,230
One of the states is waiting and there is also another state.

275
00:18:50,290 --> 00:18:54,790
And we will look at it in the slides and we can discuss a little bit more about the thread states.

276
00:18:55,300 --> 00:18:57,220
So let's go ahead and look at that.

277
00:18:59,490 --> 00:18:59,630
Okay.

278
00:18:59,830 --> 00:19:03,910
You may recall this illustration of the different states that a threat can be in.

279
00:19:04,270 --> 00:19:06,870
So you're going to now introduce a couple of new states.

280
00:19:06,880 --> 00:19:09,340
We already looked at one of them, the waiting state.

281
00:19:10,680 --> 00:19:16,230
So on invoking the Veidt method, a thread would move from running state into waiting state.

282
00:19:16,260 --> 00:19:16,590
Right.

283
00:19:16,590 --> 00:19:17,820
So we discussed that.

284
00:19:18,830 --> 00:19:27,170
And when a cooperating threat invokes either notify or notify all on the common lock, then all threats

285
00:19:27,170 --> 00:19:30,530
waiting on that lock would move into block state.

286
00:19:30,860 --> 00:19:31,190
Right.

287
00:19:31,190 --> 00:19:32,210
We also discussed that.

288
00:19:32,210 --> 00:19:35,630
So they would move from waiting state into block state.

289
00:19:37,410 --> 00:19:42,120
Finally the thread that acquires the log would actually move into readable state.

290
00:19:42,570 --> 00:19:46,950
So from waiting state we are not directly moving into renewable state.

291
00:19:47,970 --> 00:19:50,840
Now there is also a time devotion of weight method.

292
00:19:50,850 --> 00:19:53,820
We only looked at the weight method, but there is also a time to auction.

293
00:19:55,080 --> 00:20:01,770
And on invoking this method, the thread would go into another state called timed underscore weighting.

294
00:20:02,490 --> 00:20:09,060
Note that invoking either the timed version of join or even the sleep method would move the thread into

295
00:20:09,060 --> 00:20:11,280
this timed underscore waiting state.

296
00:20:12,090 --> 00:20:15,780
On the long method parameter here would be time in milliseconds.

297
00:20:16,110 --> 00:20:17,790
So we have these two new states.

298
00:20:19,350 --> 00:20:26,130
And when a cooperating threat invokes either notify or notify all, then any threat that is a timed

299
00:20:26,130 --> 00:20:27,510
underscore waiting state.

300
00:20:27,540 --> 00:20:32,760
Due to the invocation of time, Wade would be moved into blocked state.

301
00:20:33,450 --> 00:20:39,060
Keep in mind that we are only talking about threat that got into this state due to time raid and not

302
00:20:39,060 --> 00:20:40,800
either sleep or joint.

303
00:20:42,760 --> 00:20:47,620
But if that is what happens, then any thread and time to underscore waiting state would be moved into

304
00:20:47,800 --> 00:20:49,150
a state directly.

305
00:20:49,540 --> 00:20:55,240
It doesn't matter whether the thread got into time to underscore weighting due to weight or join or

306
00:20:55,240 --> 00:20:55,840
sleep.

307
00:20:56,440 --> 00:20:58,750
So those are the different thread states.

308
00:20:59,080 --> 00:21:06,400
Just note that new and dead states are not shown here and that state is more formally referred to as

309
00:21:06,400 --> 00:21:07,710
dominated state.

310
00:21:07,720 --> 00:21:13,150
So many books refer to it as Terminator State, which is a state that the thread gets into once it has

311
00:21:13,150 --> 00:21:14,320
run to completion.

312
00:21:14,830 --> 00:21:15,940
So that's about it.

313
00:21:15,970 --> 00:21:20,440
That's thread cooperation via wait and notify communication.

314
00:21:20,440 --> 00:21:27,280
Using Wait and notify was common before Java five introduced higher level concurrency utilities, which

315
00:21:27,280 --> 00:21:28,720
we are going to discuss pretty soon.

316
00:21:29,050 --> 00:21:34,480
As mentioned earlier, you would probably deal with wait and notify only when dealing with some legacy

317
00:21:34,480 --> 00:21:34,900
code.

318
00:21:35,230 --> 00:21:41,620
Way to notify represents pretty low level handshaking, as we have seen, and Joshua BLOCK refers to

319
00:21:41,620 --> 00:21:46,060
using them as programming and concurrency assembly language.

320
00:21:46,630 --> 00:21:47,770
So that's about it.

321
00:21:47,770 --> 00:21:52,960
And the code that we have seen earlier is also available in Resources section, and that's about it.

322
00:21:52,960 --> 00:21:53,860
And thank you.

