WEBVTT
1
00:00:02.090 --> 00:00:02.969
Hi there.

2
00:00:02.990 --> 00:00:04.090
This is the De La Rue.

3
00:00:04.100 --> 00:00:04.970
And welcome back.

4
00:00:05.240 --> 00:00:11.060
In the last lecture, we started exploring the collectors class and we looked at two of its methods

5
00:00:11.060 --> 00:00:12.830
to list and to set.

6
00:00:12.980 --> 00:00:18.020
And both these methods were returning instances of collector, which was an interface.

7
00:00:18.380 --> 00:00:24.680
And the collect method uses those instances of collector in order to collect the stream elements into

8
00:00:24.710 --> 00:00:26.330
a list or a set.

9
00:00:26.870 --> 00:00:31.430
So we learned about how to collect the stream elements into a list or a set.

10
00:00:31.580 --> 00:00:37.430
And in this lecture we will learn about how to collect the stream elements into a map, and map has

11
00:00:37.430 --> 00:00:38.480
key value pairs.

12
00:00:38.810 --> 00:00:44.600
So if you're talking about how to group the stream elements because map has key and value pairs, so

13
00:00:44.600 --> 00:00:48.140
it is about grouping the stream elements around certain keys.

14
00:00:48.830 --> 00:00:53.470
And we are going to look at two new methods to map and grouping by.

15
00:00:53.480 --> 00:01:00.290
And both of these are from the same collectors class and both of these also generate a collector instance

16
00:01:00.500 --> 00:01:04.670
and the collect method uses them in order to collect the stream elements into a map.

17
00:01:05.269 --> 00:01:10.790
So in the database world we have the group by class and here we are doing something similar.

18
00:01:10.790 --> 00:01:14.420
So we are applying the group by class on collection.

19
00:01:14.420 --> 00:01:20.000
So that's what we are doing and we discussed it at the very beginning and we are also going to do it

20
00:01:20.000 --> 00:01:24.740
in a very elegant way and that's because we are using streams without streams.

21
00:01:24.740 --> 00:01:28.610
We would have to write imperative code and that is cumbersome.

22
00:01:29.000 --> 00:01:32.210
So by writing declarative code it's going to be very elegant.

23
00:01:32.870 --> 00:01:39.590
So we are going to look at these two methods to map and grouping by to map would allow us to group the

24
00:01:39.590 --> 00:01:44.060
elements into map and the value of the key would be a single value.

25
00:01:44.060 --> 00:01:51.080
But using group BI, we can have the value to be much more complicated, like a list of items and we

26
00:01:51.080 --> 00:01:52.100
can also do the same.

27
00:01:52.100 --> 00:01:54.140
Using to map, but using to map.

28
00:01:54.140 --> 00:01:55.880
It would be a bit more complicated.

29
00:01:55.880 --> 00:02:01.490
We would have to write more code and so we can write it in a more elegant way using grouping by.

30
00:02:01.790 --> 00:02:03.830
So we are going to look at both the versions.

31
00:02:04.190 --> 00:02:09.470
Let's start off with looking at the two map method and at the very end we will look at the grouping

32
00:02:09.470 --> 00:02:10.039
by method.

33
00:02:10.880 --> 00:02:17.420
So here I introduce this new method called collect to map within stream operations class.

34
00:02:17.750 --> 00:02:23.030
And we have the list of books and we know that the books are coming from two sources Barnes Noble and

35
00:02:23.030 --> 00:02:23.720
Amazon.

36
00:02:23.870 --> 00:02:25.610
So let's get started.

37
00:02:27.540 --> 00:02:28.350
Books.

38
00:02:30.150 --> 00:02:32.700
So the pipeline is what we are building.

39
00:02:34.610 --> 00:02:38.210
And the collect method which takes a collector.

40
00:02:40.290 --> 00:02:49.860
But the culture, we get it from the collectors class and we have the two map method and we have three

41
00:02:49.860 --> 00:02:51.480
methods here for the two maps.

42
00:02:51.480 --> 00:02:56.970
So we have overloaded methods and let's pick the first one and we are going to try the other methods

43
00:02:56.970 --> 00:02:57.540
also.

44
00:02:58.790 --> 00:02:59.720
Here it is.

45
00:03:00.020 --> 00:03:04.730
So the parameter names are key mapper and value mapper.

46
00:03:05.180 --> 00:03:07.730
The reason they are named in this way is because.

47
00:03:07.850 --> 00:03:10.490
So the input is a book.

48
00:03:10.520 --> 00:03:17.600
We have a stream of books, so we are going to iterate through each of the books and we need to get

49
00:03:17.600 --> 00:03:18.500
the key here.

50
00:03:18.770 --> 00:03:21.830
Since we are generating a map, we need a key and a value.

51
00:03:21.980 --> 00:03:24.830
So we are going to get the key from the book.

52
00:03:25.580 --> 00:03:27.860
So we are going to map the book into a key.

53
00:03:27.860 --> 00:03:32.690
And we also need to do the same thing for the for generating the value also.

54
00:03:32.960 --> 00:03:39.170
Now, if we highlight it here, so this is the method signature and the two map method, it has two

55
00:03:39.170 --> 00:03:44.900
parameters like the first one is a function for the key mapper and the second one is also a function

56
00:03:44.900 --> 00:03:46.070
for the value mapper.

57
00:03:46.460 --> 00:03:49.680
And we know that the function is a functional interface.

58
00:03:49.700 --> 00:03:55.400
We looked at it earlier and it is used for transforming one object into another.

59
00:03:55.610 --> 00:04:02.390
So in this case, the input element would be three would be a book and we want to get the key out of

60
00:04:02.390 --> 00:04:02.780
it.

61
00:04:02.960 --> 00:04:04.730
So we need a function here.

62
00:04:04.730 --> 00:04:10.610
So we have these two functions and we need to pass lambdas for that so that we can get the key and the

63
00:04:10.610 --> 00:04:11.300
values.

64
00:04:11.690 --> 00:04:16.700
So for key, let's use the ISBN of the book, which uniquely identifies the book.

65
00:04:17.800 --> 00:04:18.910
So the input is book.

66
00:04:18.910 --> 00:04:19.990
So before book.

67
00:04:23.570 --> 00:04:25.990
So we are getting the ISBN and the value.

68
00:04:26.000 --> 00:04:27.530
Let's keep it as book itself.

69
00:04:28.040 --> 00:04:33.260
So the function would take a book and would also written the book.

70
00:04:33.560 --> 00:04:35.750
So the input is going to be the same thing book.

71
00:04:36.170 --> 00:04:37.850
Only thing is for the key.

72
00:04:37.850 --> 00:04:42.770
We are getting the ISBN and for the value we are retaining it as book itself.

73
00:04:45.410 --> 00:04:51.860
Now let's assign it to a map because map is what we are going to generate.

74
00:04:52.280 --> 00:04:57.500
So the key is ISBN, which is a long and the value is book.

75
00:04:59.840 --> 00:05:00.950
Let's call it map.

76
00:05:01.980 --> 00:05:03.480
It's an important map here.

77
00:05:04.430 --> 00:05:05.600
And so that's what it is.

78
00:05:05.600 --> 00:05:06.980
So let's go ahead and run it.

79
00:05:07.460 --> 00:05:13.790
Now we can see that there is an error and the reason is because we have duplicate keys, so it says

80
00:05:13.790 --> 00:05:16.460
illegal state exception and duplicate key.

81
00:05:16.730 --> 00:05:22.730
Now these books are coming from two sources and if you recall, there are certain books which are which

82
00:05:22.760 --> 00:05:24.800
appear in both of the sources.

83
00:05:24.800 --> 00:05:30.350
So there are duplicates and the ISBN values will be same for those duplicate books.

84
00:05:30.350 --> 00:05:33.430
And that's why we have this we have this error.

85
00:05:33.440 --> 00:05:38.330
So there is a collision here with the keys and we need to provide a collision resolution strategy.

86
00:05:38.510 --> 00:05:45.200
So for that we have the overloaded to map method which uses a third parameter, and the third parameter

87
00:05:45.200 --> 00:05:49.610
will say what we need to do when we encounter such kind of duplicate.

88
00:05:49.910 --> 00:05:56.180
So what we can do is when we come across a duplicate, then we can pick the book with the lowest price.

89
00:05:56.450 --> 00:05:57.320
So let's do that.

90
00:05:57.320 --> 00:05:58.670
So let me comment this.

91
00:06:03.150 --> 00:06:07.350
So we can use the first two parameters are just the same, the key and the value pairs.

92
00:06:07.620 --> 00:06:16.770
And here for the third parameter, when there is a collision, we have to box B1 B2.

93
00:06:18.990 --> 00:06:21.260
We need to use the price.

94
00:06:23.970 --> 00:06:25.980
So we are going to say get price.

95
00:06:27.980 --> 00:06:30.020
It is less than or equal to.

96
00:06:38.960 --> 00:06:39.500
Be to.

97
00:06:41.230 --> 00:06:42.310
So now it's.

98
00:06:43.180 --> 00:06:43.480
Right.

99
00:06:43.480 --> 00:06:45.370
So if you look at the map here.

100
00:06:45.520 --> 00:06:50.830
So it has the key mapper, the value mapper and a search function.

101
00:06:50.830 --> 00:06:56.530
And the search function is a binary operator because we are taking two books which are of the same type

102
00:06:56.530 --> 00:07:01.750
and the output will also be an ebook which is of the same type as the input.

103
00:07:01.870 --> 00:07:03.910
So that's why we need a binary operator here.

104
00:07:03.910 --> 00:07:04.990
So let me run it.

105
00:07:06.460 --> 00:07:06.850
Here.

106
00:07:06.850 --> 00:07:07.930
Everything is fine.

107
00:07:07.930 --> 00:07:09.820
So let's go ahead and print this.

108
00:07:11.260 --> 00:07:16.870
Let's use a four each and let's print each of the mappings now so we can say map.

109
00:07:17.660 --> 00:07:18.290
Dot.

110
00:07:19.440 --> 00:07:20.700
Entry set.

111
00:07:22.020 --> 00:07:25.980
And this will give a mapping and the mapping is entry.

112
00:07:27.810 --> 00:07:33.120
Long value as book, let's call it entry colon.

113
00:07:44.190 --> 00:07:45.810
Let's import the entry to.

114
00:07:49.890 --> 00:07:51.210
Value as a book.

115
00:07:55.310 --> 00:07:56.900
So that value.

116
00:07:57.800 --> 00:08:01.280
That's a book and book has a two string method.

117
00:08:01.490 --> 00:08:03.950
We have defined it earlier, so let's not worry.

118
00:08:03.950 --> 00:08:09.350
So it's going to print the books, The Osbournes and the corresponding books.

119
00:08:09.980 --> 00:08:13.900
Now here, this two map method returns a hash map.

120
00:08:13.910 --> 00:08:15.320
So let's also test that.

121
00:08:22.850 --> 00:08:27.850
It's important they run it again and it returns it true here.

122
00:08:27.860 --> 00:08:29.170
So that's the hash map.

123
00:08:29.180 --> 00:08:36.320
Now, let's say if we want the map to be a tree map, then we can use the third overloaded method here

124
00:08:36.650 --> 00:08:38.539
and that will generate a tree map.

125
00:08:38.539 --> 00:08:42.320
So let's also do that because right now it is returning a hash map.

126
00:08:42.320 --> 00:08:44.840
And let's say if we want to sort the keys by.

127
00:08:45.720 --> 00:08:49.260
In ascending order, then we would have we would need a tree map.

128
00:08:49.350 --> 00:08:50.760
And let's call this tree map.

129
00:08:51.700 --> 00:08:54.460
And I said, we need a third parameter here.

130
00:08:55.720 --> 00:08:59.230
And the fourth parameter, and it takes a supplier.

131
00:08:59.590 --> 00:09:01.630
So we need to supply a tree map.

132
00:09:06.720 --> 00:09:09.450
And this is this has to be tree map.

133
00:09:10.990 --> 00:09:12.290
All right, let me run this.

134
00:09:12.300 --> 00:09:12.850
So that's it.

135
00:09:12.870 --> 00:09:14.190
Now we have a tree map.

136
00:09:17.150 --> 00:09:24.470
So as you can see, the key values over here, they are not in ascending order, but here the key values

137
00:09:24.470 --> 00:09:26.090
are an ascending order.

138
00:09:26.870 --> 00:09:31.790
So we can pass the data structure that we want here.

139
00:09:32.030 --> 00:09:33.260
So that's it.

140
00:09:33.290 --> 00:09:36.470
And the next thing is here instead of Lambda.

141
00:09:37.400 --> 00:09:42.050
Keep in mind that we can also use a method reference.

142
00:09:43.070 --> 00:09:47.210
Bit of a rough refresher and here we are passing a lambda.

143
00:09:47.210 --> 00:09:49.400
So the input and the output is the same.

144
00:09:49.790 --> 00:09:53.300
Whenever you have something like this you can also do this.

145
00:09:53.300 --> 00:09:57.830
So we have the function functional interface and there is a method.

146
00:09:59.410 --> 00:10:00.400
Identity.

147
00:10:00.950 --> 00:10:02.200
May import function.

148
00:10:03.160 --> 00:10:08.950
So there is this static method called identity within this functional interface function.

149
00:10:08.950 --> 00:10:11.710
So let me click on that and let's look at the source code.

150
00:10:11.860 --> 00:10:19.270
So as you can see, this is identity and it returns a function and the instance of that function is

151
00:10:19.270 --> 00:10:20.560
the lambda.

152
00:10:20.680 --> 00:10:26.620
Earlier we had this particular lambda expression, which we defined here explicitly.

153
00:10:26.620 --> 00:10:29.620
Now instead of doing that, we can actually invoke this method.

154
00:10:30.250 --> 00:10:35.800
So this is the function functional interface itself, and it also returns a instance of function.

155
00:10:36.250 --> 00:10:37.480
And that's what we need.

156
00:10:37.480 --> 00:10:43.630
We need an instance of function here because to map if you're over here, we showed that the two map

157
00:10:43.840 --> 00:10:47.260
takes two functions here for the key and the value.

158
00:10:47.560 --> 00:10:48.310
So.

159
00:10:49.270 --> 00:10:53.960
Instead of explicitly specifying, we can also just invoke the identity method.

160
00:10:53.980 --> 00:10:57.310
That's what normally we do if we need something like this.

161
00:10:59.390 --> 00:10:59.470
Okay.

162
00:10:59.550 --> 00:11:01.920
So this is what we have the function.

163
00:11:02.700 --> 00:11:04.050
So we have the same output.

164
00:11:04.290 --> 00:11:10.050
So we are the function is being used here for these two parameters because we are we need to perform

165
00:11:10.050 --> 00:11:13.440
a transformation from the book object to key and value.

166
00:11:14.430 --> 00:11:16.190
So that's that.

167
00:11:16.230 --> 00:11:17.100
Now.

168
00:11:18.590 --> 00:11:21.740
So here the value is a single value.

169
00:11:21.860 --> 00:11:26.350
Now, sometimes we might want to have a list of items as values.

170
00:11:26.360 --> 00:11:33.680
For instance, if we have these books and if we want to group those books by rating, then the key would

171
00:11:33.680 --> 00:11:37.580
be rating and the value would be list of books falling under that rating.

172
00:11:37.760 --> 00:11:38.120
Right?

173
00:11:38.120 --> 00:11:39.260
So we can have that.

174
00:11:39.290 --> 00:11:41.000
So let's also implement that.

175
00:11:41.000 --> 00:11:43.370
We will be using the similar to map method.

176
00:11:43.370 --> 00:11:45.770
The second the second version can be used for that.

177
00:11:46.160 --> 00:11:47.420
So that's the thing.

178
00:11:47.420 --> 00:11:53.780
But let's use tree map values and let's build a tree stream out of it.

179
00:11:53.810 --> 00:12:01.370
The reason is if we are going to use this book's data structure and if we try to group them by ratings,

180
00:12:01.610 --> 00:12:08.720
then what can happen is when we come across those duplicate books, then one of them might have one

181
00:12:08.720 --> 00:12:11.420
particular rating and the other might have a different rating.

182
00:12:11.420 --> 00:12:15.770
So those duplicate books might appear under two different ratings.

183
00:12:15.770 --> 00:12:17.180
So let's avoid that.

184
00:12:17.180 --> 00:12:24.650
So since we already have this tree map and the values of the tree map are unique books because we are

185
00:12:24.650 --> 00:12:29.840
actually using this merge function where we are selecting only unique books.

186
00:12:30.770 --> 00:12:33.890
If there are duplicates, we are picking the one with the lowest price.

187
00:12:34.010 --> 00:12:37.370
So that's the reason we can just use the values of that.

188
00:12:37.370 --> 00:12:39.680
And that way we get only unique books.

189
00:12:39.680 --> 00:12:41.360
So let's do that.

190
00:12:44.200 --> 00:12:49.090
While usage returns a collection of books and let's say stream.

191
00:12:49.090 --> 00:12:51.760
Now we are building a stream on unique books.

192
00:13:08.380 --> 00:13:11.260
So here we can you we can use get rating.

193
00:13:13.060 --> 00:13:17.230
And for the value, it has to be a list.

194
00:13:17.620 --> 00:13:22.210
So we will have a book as input and we can use this.

195
00:13:22.960 --> 00:13:26.920
Collections Dot Singleton list.

196
00:13:28.310 --> 00:13:29.900
And B will be output.

197
00:13:29.900 --> 00:13:34.160
So it would produce a list, but it would have only one element.

198
00:13:34.640 --> 00:13:35.420
So that's it.

199
00:13:35.840 --> 00:13:42.470
But when we come across the second rating where a book with the similar rating, then we need to generate

200
00:13:42.470 --> 00:13:48.440
a new list and the new list will have the item in the old list, plus also the new book.

201
00:13:48.650 --> 00:13:50.900
So for that, we need to provide a lambda.

202
00:13:51.260 --> 00:13:56.900
So here for that, what will happen is the merge function will take the list.

203
00:13:56.900 --> 00:14:03.800
So the output of this one will be input to this one because when there is a collision, so that will

204
00:14:03.800 --> 00:14:04.760
be one list.

205
00:14:05.580 --> 00:14:10.330
And the duplicate element will also be part of the second list here.

206
00:14:10.350 --> 00:14:15.420
So let's say this and let's put this one.

207
00:14:16.270 --> 00:14:23.920
Now what we can do is instead of just saying L-1 dot add all of L to that would actually if you run

208
00:14:23.920 --> 00:14:28.780
it that will give you an error because it is returning a collection and abstract collection.

209
00:14:29.020 --> 00:14:34.210
And there one of the methods would return an unsupported exception.

210
00:14:34.210 --> 00:14:35.960
Unsupported operation exception.

211
00:14:35.980 --> 00:14:39.640
So we need to use we can define a new ArrayList here.

212
00:14:48.630 --> 00:14:50.070
And let's add the first.

213
00:14:50.990 --> 00:14:51.710
List.

214
00:14:56.580 --> 00:14:56.680
Ah.

215
00:14:56.800 --> 00:15:00.040
Now to L, let's say add all.

216
00:15:01.320 --> 00:15:02.780
Let's add l two.

217
00:15:02.790 --> 00:15:10.680
So with this we have a single list which has both the items, items from both the less and.

218
00:15:24.870 --> 00:15:29.040
So this one returns a double because rating is double.

219
00:15:29.550 --> 00:15:32.430
And it says list of book.

220
00:15:32.430 --> 00:15:34.230
So values will be list of books.

221
00:15:35.990 --> 00:15:38.240
Let's call it a ratings map.

222
00:15:39.680 --> 00:15:42.500
So this is what we have and that's print output also.

223
00:15:53.070 --> 00:15:57.690
So dot and reset and this will return an entry.

224
00:16:08.290 --> 00:16:10.660
First, let's print the rating.

225
00:16:19.100 --> 00:16:21.170
Now let's print all the values.

226
00:16:21.170 --> 00:16:22.070
Since it's a list.

227
00:16:22.070 --> 00:16:23.690
We need another envelope here.

228
00:16:32.650 --> 00:16:36.180
And each entry is a book, so let's just print it and that's it.

229
00:16:36.190 --> 00:16:40.090
So if we execute it, so this is what we have.

230
00:16:40.090 --> 00:16:43.930
So we have we are printing all the books grouped by ratings.

231
00:16:44.530 --> 00:16:50.500
Now this is instead of doing this, we can actually use the grouping by method.

232
00:16:50.980 --> 00:16:52.660
So let me just do that.

233
00:16:54.080 --> 00:16:54.470
For that.

234
00:16:54.470 --> 00:16:59.180
We just need this part because it's much more elegant to express it that way.

235
00:16:59.780 --> 00:17:01.400
So let's say.

236
00:17:03.570 --> 00:17:05.400
This has to be grouping by.

237
00:17:13.000 --> 00:17:14.900
Let's say ratings map one.

238
00:17:15.190 --> 00:17:16.180
Let's copy this.

239
00:17:27.460 --> 00:17:29.020
We actually common this out?

240
00:17:38.230 --> 00:17:44.320
So once again we have the same output but using grouping by and as you can see using grouping by, it's

241
00:17:44.320 --> 00:17:45.250
much more simplified.

242
00:17:45.250 --> 00:17:51.580
We don't need so many different expressions this especially this complicated expression that we have

243
00:17:51.580 --> 00:17:52.240
here.

244
00:17:53.170 --> 00:17:57.820
Here it is, we have we need three parameters and this one is really complicated.

245
00:17:57.940 --> 00:18:05.380
So grouping by by design, it will generate a key and value where the value would be a list.

246
00:18:05.740 --> 00:18:08.830
So that's the advantage of using grouping by.

247
00:18:08.830 --> 00:18:15.160
So it is used when you want to have the value with as a list of something, then you can use grouping

248
00:18:15.160 --> 00:18:15.550
by.

249
00:18:15.820 --> 00:18:18.910
If it is just going to be a single value, then you can use to map.

250
00:18:19.270 --> 00:18:22.060
So grouping by is making it much more elegant.

251
00:18:22.060 --> 00:18:23.410
So that's about it.

252
00:18:23.440 --> 00:18:29.650
Thank you and hope you enjoyed learning about how to group the stream elements into a map.

253
00:18:30.070 --> 00:18:31.630
Thank you and happy coding.

