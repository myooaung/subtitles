1
00:00:01,040 --> 00:00:01,819
Hello there.

2
00:00:01,850 --> 00:00:03,230
This is the De La Rue.

3
00:00:03,320 --> 00:00:05,780
Now, let's go ahead and do a demo of lambdas.

4
00:00:06,140 --> 00:00:09,770
So here I created a new package called Calm Semantics.

5
00:00:10,190 --> 00:00:10,960
Lambdas.

6
00:00:10,970 --> 00:00:17,240
And we have these two classes, cache and bookmark, you may recall from our nested classes chapter

7
00:00:17,240 --> 00:00:18,660
about these two classes.

8
00:00:18,680 --> 00:00:25,220
So there we started with basic version and we went about improving those two classes with each newly

9
00:00:25,220 --> 00:00:26,930
introduced nested class.

10
00:00:26,960 --> 00:00:27,410
All right.

11
00:00:27,920 --> 00:00:33,020
So let's just go ahead and refresh our memory to or in case you have skipped that particular chapter.

12
00:00:33,020 --> 00:00:34,190
So this should help you.

13
00:00:34,460 --> 00:00:36,020
So we have these two classes.

14
00:00:36,020 --> 00:00:41,810
Bookmark is a simple class which has ID title and rating and the corresponding getters and setters for

15
00:00:41,810 --> 00:00:42,920
these fields.

16
00:00:43,900 --> 00:00:51,610
On cash, Java simply maintains a cache of bookmark objects, so bookmark objects can be added to cash

17
00:00:51,640 --> 00:00:53,650
and cash internally stores them.

18
00:00:53,650 --> 00:00:56,620
And this bookmark, it's called items.

19
00:00:57,040 --> 00:01:02,710
So the constructor basically takes the size, which means the number of items that will be stored in

20
00:01:02,710 --> 00:01:03,370
the cache.

21
00:01:03,700 --> 00:01:07,690
So that would be the that would be the size of the bookmarks bookmark.

22
00:01:08,740 --> 00:01:13,030
And in order to add an item, add a bookmark to the cache.

23
00:01:13,210 --> 00:01:16,480
We have this method called ADD and we are passing the bookmark.

24
00:01:17,290 --> 00:01:21,490
Now, that's how we are going to populate the cache.

25
00:01:21,790 --> 00:01:27,880
And there is also this iterator method which would return an iterator for iterating through the items

26
00:01:27,880 --> 00:01:34,450
in the cache and it will return an instance of this class called my cache iterator, which is basically

27
00:01:34,450 --> 00:01:38,380
a non static member class within the cache class.

28
00:01:38,710 --> 00:01:44,500
And it implements this interface called cache iterator, which is also defined here and it has two methods

29
00:01:44,500 --> 00:01:45,670
has next and next.

30
00:01:46,090 --> 00:01:52,540
So it is the cache iterator and it is implemented that way and that's about it and it has the main method.

31
00:01:52,540 --> 00:01:58,210
We are instantiating the cache here and we are passing the value file, which means that it can store

32
00:01:58,210 --> 00:02:05,050
up to five items and here we are creating the bookmark objects, five bookmark objects and we are adding

33
00:02:05,050 --> 00:02:06,760
them to the cache.

34
00:02:07,030 --> 00:02:12,580
The cache is named as recommended items, so there's the variable and here we are iterating through

35
00:02:12,580 --> 00:02:20,110
the added items and we are simply printing the title and we also have this sort method.

36
00:02:20,110 --> 00:02:23,110
So we are trying to sort the items in the cache.

37
00:02:23,110 --> 00:02:28,870
So we are using the arrays dot sort method and here we have an anonymous class.

38
00:02:28,870 --> 00:02:35,110
So that's just taken from from the nested class chapter, from anonymous classes lecture.

39
00:02:35,470 --> 00:02:41,530
So we have this anonymous class which is implementing this compare method and it is going to start by

40
00:02:41,530 --> 00:02:42,190
writing.

41
00:02:42,970 --> 00:02:48,790
So this is an anonymous class now since we are doing, we are learning about Lambda, so we are going

42
00:02:48,790 --> 00:02:51,460
to implement a lambda here.

43
00:02:51,730 --> 00:02:57,460
So right beneath this code we are also printing the items that are sorted by by rating using the anonymous

44
00:02:57,460 --> 00:02:58,060
class.

45
00:02:58,270 --> 00:03:03,550
And after that we have this template code where we are once again invoking the source method and we

46
00:03:03,550 --> 00:03:07,810
have the items which which are sorted by rating.

47
00:03:07,810 --> 00:03:09,970
Now we want to sort them by length.

48
00:03:09,970 --> 00:03:17,620
So, so let's go ahead and write our lambda function so we know that the lambda function starts with

49
00:03:17,620 --> 00:03:20,140
this, the method parameters.

50
00:03:20,140 --> 00:03:22,870
So let's just go ahead and copy that.

51
00:03:24,350 --> 00:03:27,430
And we need to pass it here as an argument.

52
00:03:27,440 --> 00:03:28,610
So let's do that.

53
00:03:29,830 --> 00:03:31,180
And we have the arrow.

54
00:03:32,350 --> 00:03:35,260
We have this braces, the body of the lambda.

55
00:03:35,950 --> 00:03:37,510
And we need to give.

56
00:03:37,840 --> 00:03:39,540
We need to write our logic here.

57
00:03:39,550 --> 00:03:41,260
So let's just say written.

58
00:03:43,520 --> 00:03:45,110
One is a parameter here.

59
00:03:46,950 --> 00:03:47,850
Let's say.

60
00:03:49,240 --> 00:03:50,050
Title.

61
00:03:50,530 --> 00:03:51,760
So title is a string.

62
00:03:51,760 --> 00:03:54,580
So let's invoke the length method.

63
00:03:55,710 --> 00:03:56,220
Okay.

64
00:03:56,640 --> 00:04:02,460
And let's use the comparator function of integer.

65
00:04:02,460 --> 00:04:05,340
So length is going to return an int, which is a parameter.

66
00:04:05,580 --> 00:04:07,050
So let's convert it.

67
00:04:08,060 --> 00:04:09,290
Into Integer.

68
00:04:13,670 --> 00:04:17,600
So compared to is from the comparable interface.

69
00:04:17,990 --> 00:04:20,149
So let me just copy this thing.

70
00:04:24,850 --> 00:04:25,380
Compared to.

71
00:04:25,390 --> 00:04:27,130
So that would be the natural ordering.

72
00:04:27,550 --> 00:04:30,010
And let's just change it to oh two here.

73
00:04:31,160 --> 00:04:31,670
That's it.

74
00:04:34,270 --> 00:04:35,410
And let's put.

75
00:04:36,450 --> 00:04:38,070
And ending semicolon here.

76
00:04:38,430 --> 00:04:39,610
So that's it.

77
00:04:39,630 --> 00:04:41,000
And we are printing this.

78
00:04:41,010 --> 00:04:43,050
So let me go ahead and run this.

79
00:04:43,970 --> 00:04:44,960
Here we are.

80
00:04:45,410 --> 00:04:53,090
So initially we are sorting by rating and this is sorted by length using the lambda.

81
00:04:54,720 --> 00:04:55,730
So that's all it is.

82
00:04:55,740 --> 00:05:02,670
So as you can see, it is much more simpler, much more compact than the anonymous class, as we don't

83
00:05:02,670 --> 00:05:06,360
have any of this stuff here, the new or the competitor or even the compare name.

84
00:05:06,810 --> 00:05:09,120
And we also know that we can further simplify this.

85
00:05:09,120 --> 00:05:13,020
So let me go ahead and remove that type.

86
00:05:13,020 --> 00:05:14,970
So that's the first simplification.

87
00:05:15,820 --> 00:05:22,720
Now the compiler is going to infer that it is bookmark because it is going to infer from.

88
00:05:24,510 --> 00:05:28,200
This particular argument also are from this particular argument.

89
00:05:28,200 --> 00:05:37,830
So if I hover over it, it says sort bookmark array and this is the so the so it's going to infer automatically.

90
00:05:38,220 --> 00:05:44,250
So the compiler is going to do that because this is an array of bookmarks bookmark.

91
00:05:44,430 --> 00:05:49,440
So it's going to automatically infer that this is a bookmark type and this is also a bookmark type.

92
00:05:49,860 --> 00:05:54,810
So it's so as you can see, there is no compilation error and we are once again able to.

93
00:05:55,670 --> 00:05:58,150
Sort the items by by land.

94
00:05:58,310 --> 00:06:03,400
Now, we also said that if there is only a single statement, then we can remove this.

95
00:06:03,410 --> 00:06:04,490
We don't need the braces.

96
00:06:04,490 --> 00:06:06,080
We don't need the written statement.

97
00:06:07,030 --> 00:06:12,040
And we don't need this to the ending brace and also the semicolon.

98
00:06:12,970 --> 00:06:16,270
So that's further simplification.

99
00:06:16,270 --> 00:06:18,610
And once again, we have the same output.

100
00:06:19,540 --> 00:06:21,280
So that's the lambda function.

101
00:06:21,760 --> 00:06:27,130
Now let's we also said that the lambda function works with only functional interfaces.

102
00:06:27,130 --> 00:06:32,800
So let's also test that in fact, the competitor the the competitor is a functional interface.

103
00:06:33,310 --> 00:06:37,000
But let's also test it using our own interface here.

104
00:06:37,120 --> 00:06:44,230
So we have this interface called test at the top of the class outside of the class, and it has a single

105
00:06:44,230 --> 00:06:45,220
method apply.

106
00:06:46,060 --> 00:06:51,200
And there is also within the cash class, within the class itself.

107
00:06:51,220 --> 00:06:57,520
So we have this method called go and it takes this parameter test which is off type test.

108
00:06:57,520 --> 00:07:02,410
So this test is a functional interface and we are invoking the apply method.

109
00:07:02,920 --> 00:07:07,240
So let's go ahead and invoke this method and pass a lambda.

110
00:07:10,550 --> 00:07:13,400
So that's an instance of cash and it's a go.

111
00:07:14,120 --> 00:07:14,630
Okay.

112
00:07:14,990 --> 00:07:16,750
And apply method.

113
00:07:16,760 --> 00:07:18,670
We need to pass a lambda here.

114
00:07:18,680 --> 00:07:22,010
So since it doesn't have any parameters, we can just do this.

115
00:07:24,500 --> 00:07:28,010
We can have empty parentheses and we can have this arrow.

116
00:07:28,430 --> 00:07:30,950
And let's say we want to just.

117
00:07:32,040 --> 00:07:32,580
Brenda.

118
00:07:34,180 --> 00:07:36,090
That's what the apply method should do.

119
00:07:36,100 --> 00:07:36,940
So.

120
00:07:38,390 --> 00:07:40,190
Let's print this lambda here.

121
00:07:41,150 --> 00:07:42,130
And that's it.

122
00:07:42,140 --> 00:07:45,530
So if we run it, so it prints lambda.

123
00:07:46,340 --> 00:07:48,050
So this is the body here.

124
00:07:48,810 --> 00:07:51,300
And this is over, Lambda.

125
00:07:51,780 --> 00:07:56,040
Now let's go ahead and add a method.

126
00:07:59,450 --> 00:08:00,470
I applied one.

127
00:08:02,130 --> 00:08:02,500
Okay.

128
00:08:02,670 --> 00:08:10,230
But you can see that there here we have this compilation error because the interface is no longer functional

129
00:08:10,230 --> 00:08:11,010
interface.

130
00:08:11,610 --> 00:08:19,260
So the compiler is saying that you're passing your lambda to a non functional interface to a non functional

131
00:08:19,260 --> 00:08:19,980
interface.

132
00:08:19,980 --> 00:08:22,260
So that's why we are getting the error here.

133
00:08:22,590 --> 00:08:30,000
But this can be a default method, in which case once again the test and the test interface would be

134
00:08:30,000 --> 00:08:33,539
a functional interface and we don't have the error anymore.

135
00:08:33,809 --> 00:08:36,059
So test would now be a functional interface.

136
00:08:36,860 --> 00:08:40,429
Similarly, we can have a two string method also.

137
00:08:43,490 --> 00:08:49,490
And it would still qualify as a functional interface because although there are two abstract methods

138
00:08:49,490 --> 00:08:54,430
here, the two string method is actually part of the object class.

139
00:08:54,440 --> 00:08:57,050
We know that the string method also belongs to object class.

140
00:08:57,260 --> 00:09:02,480
So every class we know implicitly inherits from from the object class.

141
00:09:02,600 --> 00:09:05,630
So that implementation is already there.

142
00:09:05,630 --> 00:09:11,810
So because of that, even though there are two abstract methods, test would still qualify as an functional

143
00:09:11,810 --> 00:09:12,530
interface.

144
00:09:13,340 --> 00:09:14,870
So that's one thing.

145
00:09:14,870 --> 00:09:16,820
And so let me remove this.

146
00:09:18,190 --> 00:09:19,540
We also removed this.

147
00:09:20,340 --> 00:09:21,210
Now.

148
00:09:22,020 --> 00:09:23,190
We said that.

149
00:09:24,380 --> 00:09:25,520
So we do this.

150
00:09:27,630 --> 00:09:28,650
Abstract.

151
00:09:28,980 --> 00:09:31,170
And this is abstract.

152
00:09:32,400 --> 00:09:34,830
Now, this is also not going to work.

153
00:09:35,780 --> 00:09:36,620
Because.

154
00:09:37,960 --> 00:09:41,200
It clearly now it says that it has to be a functional interface.

155
00:09:42,040 --> 00:09:43,090
So that's the thing.

156
00:09:43,090 --> 00:09:48,910
So we saw that it needs to be a functional interface and it needs to have only a functional interface

157
00:09:48,910 --> 00:09:50,800
as only a single abstract method.

158
00:09:51,130 --> 00:09:56,170
And if we have more than one abstract method, then it would not be a functional interface and we would

159
00:09:56,170 --> 00:09:57,430
get a compilation error.

160
00:09:58,180 --> 00:10:04,300
So it needs to be only one single abstract method and we can have other default methods or even methods

161
00:10:04,300 --> 00:10:06,980
from the object class as abstract methods.

162
00:10:07,000 --> 00:10:11,350
Even in that case, we wouldn't get a compilation error and it would be fine.

163
00:10:11,950 --> 00:10:13,780
It would qualify as a functional interface.

164
00:10:13,960 --> 00:10:14,830
So that's about it.

165
00:10:14,830 --> 00:10:20,170
So just wanted to demonstrate that and this code is available in the resources section.

166
00:10:20,350 --> 00:10:22,510
And thank you and happy coding.

