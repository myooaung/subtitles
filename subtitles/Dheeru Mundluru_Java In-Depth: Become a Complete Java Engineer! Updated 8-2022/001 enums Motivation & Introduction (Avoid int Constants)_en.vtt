WEBVTT
1
00:00:07.200 --> 00:00:08.020
Hi there.

2
00:00:08.039 --> 00:00:09.280
This is Lou.

3
00:00:09.300 --> 00:00:10.260
And welcome back.

4
00:00:10.560 --> 00:00:14.010
Now it's time to learn about enemies which were introduced in Java file.

5
00:00:14.520 --> 00:00:19.950
You may recall the constant exporting classes which we created in our project, and these classes were

6
00:00:19.950 --> 00:00:21.900
exporting compile time constants.

7
00:00:22.230 --> 00:00:29.100
For instance, there was the book genre class which exported genres such as biography, fiction and

8
00:00:29.100 --> 00:00:30.690
so on as constants.

9
00:00:31.110 --> 00:00:36.540
Similarly, we also had other classes like movie genre, gender, user type and so on.

10
00:00:36.990 --> 00:00:43.650
So these constant exporting classes were created in order to group together a set of constants like

11
00:00:43.650 --> 00:00:46.770
genre specific to books and genre specific to movies.

12
00:00:47.370 --> 00:00:52.710
But there are some severe deficiencies in creating such classes, and that's where idioms come into

13
00:00:52.710 --> 00:00:53.070
play.

14
00:00:53.520 --> 00:00:55.650
So let's see what those deficiencies are.

15
00:00:55.860 --> 00:01:02.010
And then we will wear the language designers hat and we will see how we can address those deficiencies.

16
00:01:02.430 --> 00:01:04.920
So we are going to think like a language designer.

17
00:01:05.940 --> 00:01:09.420
We will also introduce idioms and get into some of its details.

18
00:01:09.450 --> 00:01:12.210
All the demo will be part of the following lecture.

19
00:01:13.880 --> 00:01:19.160
Let's consider this classical genre, which is a constant exporting class, and it is defining two groups

20
00:01:19.160 --> 00:01:20.000
of constants.

21
00:01:20.360 --> 00:01:23.930
First group is about movie genre, while second is about book genre.

22
00:01:24.560 --> 00:01:29.150
We don't have to instantiate such a constant exporting class, which has only constants.

23
00:01:29.300 --> 00:01:32.480
So we have a private constructor to prevent instantiation.

24
00:01:33.030 --> 00:01:39.050
Now this kind of a pattern that exports only INT constants is referred to as int in a pattern.

25
00:01:39.800 --> 00:01:44.330
And prior to Java PHI, this was the standard pattern for exporting constants.

26
00:01:44.330 --> 00:01:47.150
And we also followed this pattern in our project.

27
00:01:47.510 --> 00:01:50.930
And as mentioned earlier, it has several deficiencies.

28
00:01:52.420 --> 00:01:55.270
First efficiency is about lack of type safety.

29
00:01:55.630 --> 00:02:02.170
For instance, let's consider this class itself and let's say that there is also a method which is expecting

30
00:02:02.170 --> 00:02:05.170
movie underscore genre, underscore horror as input.

31
00:02:05.800 --> 00:02:12.160
So the method would have a variable of type end and it would be expecting that the client code would

32
00:02:12.160 --> 00:02:17.890
pass a value of zero as zero is the value for movie underscore genre underscore horror.

33
00:02:18.460 --> 00:02:24.070
However, the client code by mistake might pass a book, underscore genre, underscore horror.

34
00:02:24.580 --> 00:02:29.530
So instead of movie, underscore genre, underscore horror, book, underscore genre, underscore horror

35
00:02:29.530 --> 00:02:33.310
is getting passed, which has a value of 11 and not zero.

36
00:02:33.670 --> 00:02:37.480
So type safety is lost and it may result in some serious error.

37
00:02:39.040 --> 00:02:41.770
Next deficiency is that core is brittle.

38
00:02:42.040 --> 00:02:44.890
Here these constants are compile time constants.

39
00:02:45.310 --> 00:02:49.720
So wherever they are used in the client code, their values get copied.

40
00:02:49.720 --> 00:02:50.050
Right?

41
00:02:50.050 --> 00:02:56.230
We know that the values get hardwired, but if any of these values get changed here, then they will

42
00:02:56.230 --> 00:03:00.610
not be reflected in the client code unless the client code is recompiled.

43
00:03:00.970 --> 00:03:05.980
So if the client code is not recompiled, then it would be using outdated values.

44
00:03:06.310 --> 00:03:07.330
And that's not good.

45
00:03:09.100 --> 00:03:12.010
Third deficiency is that there is no namespace protection.

46
00:03:12.280 --> 00:03:17.950
For instance, here, in order to distinguish horror genre in movie and book, we are using prefixes

47
00:03:17.950 --> 00:03:22.630
such as movie underscore genre and book underscore genre, which is kind of clumsy.

48
00:03:24.410 --> 00:03:29.270
Next, if you want to print the name of a particular content like, say, a movie, underscore genre,

49
00:03:29.330 --> 00:03:32.240
underscore horror, then that would not be easy to do.

50
00:03:33.550 --> 00:03:39.280
Similarly, if we want to iterate over the constants in a particular group or obtain a particular group

51
00:03:39.280 --> 00:03:45.250
size like the number of genres within the movie domain, then it may not be easily possible.

52
00:03:45.550 --> 00:03:48.460
We would have to write some ugly reflection code.

53
00:03:49.870 --> 00:03:55.990
So to fix the deficiencies we just saw, let's wear a language designer's hat and think hard.

54
00:03:57.670 --> 00:04:04.210
So instead of having all constants in one class genre, we can maintain separate, constant exporting

55
00:04:04.210 --> 00:04:08.740
classes movie genre and book genre, which is what we did in our project.

56
00:04:09.190 --> 00:04:12.610
With that, we can have nicer variable names like horror.

57
00:04:13.270 --> 00:04:18.640
While this takes care of the namespace problem, it does not address the type safety issue.

58
00:04:19.620 --> 00:04:26.400
For instance, book genre or horror might still be past very movie genre or horror is expected.

59
00:04:26.820 --> 00:04:28.530
So we need something better.

60
00:04:29.980 --> 00:04:35.170
Now one observation we can make is that each constant is simply a type of genre.

61
00:04:35.590 --> 00:04:40.480
For instance, horror in book genre is simply a type of book genre.

62
00:04:40.960 --> 00:04:43.840
That is, it can be an instance of book genre.

63
00:04:43.870 --> 00:04:44.440
Right.

64
00:04:44.440 --> 00:04:48.880
But with horror, as its state and state is represented by some variable.

65
00:04:49.830 --> 00:04:53.880
Similarly, biography is also a type of book genre.

66
00:04:54.510 --> 00:05:00.750
So instead of representing these constants as primitives, we can represent them as instances of book

67
00:05:00.750 --> 00:05:01.380
genre.

68
00:05:03.220 --> 00:05:04.600
And here is how it is done.

69
00:05:04.960 --> 00:05:11.800
We still have the donor class, but the constants, biography and horror are no longer end constants

70
00:05:12.010 --> 00:05:18.460
but are object references of type, book genre and their status captured through the variables.

71
00:05:18.460 --> 00:05:25.270
Name and ordinal name is the name of the genre, while Ordinal is the position of that constant within

72
00:05:25.270 --> 00:05:28.090
the group of constants defined in the class.

73
00:05:28.600 --> 00:05:33.100
So for biography, name is biography, while the ordinal is zero.

74
00:05:33.400 --> 00:05:37.240
For horror, name is horror while ordinal is one.

75
00:05:38.820 --> 00:05:44.070
With this kind of a design, we can no longer assign a book genre to a movie genre.

76
00:05:44.730 --> 00:05:47.520
So no issue of type safety anymore.

77
00:05:48.280 --> 00:05:52.570
Core is also not brittle as we don't have compile time constants anymore.

78
00:05:54.380 --> 00:06:00.380
Now, the only problem with this design is that writing such a constant exporting class is cumbersome.

79
00:06:00.540 --> 00:06:01.030
All right.

80
00:06:01.160 --> 00:06:02.750
It looks complicated.

81
00:06:02.840 --> 00:06:06.200
So language designers wanted to make it simpler.

82
00:06:07.830 --> 00:06:13.470
So in Java five they came up with enemas which have a simpler representation.

83
00:06:13.770 --> 00:06:20.400
So we can represent our book ray class as an enum in this way, which as you can see, is much more

84
00:06:20.400 --> 00:06:21.090
readable.

85
00:06:21.420 --> 00:06:27.540
It has a reserved keyword enum followed by enum name, which is then followed by the body of enum,

86
00:06:27.540 --> 00:06:32.790
which starts and ends with curly braces, just like in the case of a class or an interface.

87
00:06:33.270 --> 00:06:37.530
And within the body we have the constants which are comma separated.

88
00:06:38.850 --> 00:06:44.250
The constants are constants and book genre is the enum type.

89
00:06:44.760 --> 00:06:52.320
So the language designers made it simple, but upon completion, this enum would be translated into

90
00:06:52.320 --> 00:06:53.370
a regular class.

91
00:06:53.610 --> 00:06:59.700
So in the byte code we just have this, which is almost identical to the book genre class, which we

92
00:06:59.700 --> 00:07:01.080
saw in the previous slide.

93
00:07:01.650 --> 00:07:10.560
The class is final, implying that an enum is not extendable, so we cannot add any new enum constants

94
00:07:10.560 --> 00:07:12.390
by subclass in the enum.

95
00:07:13.620 --> 00:07:18.750
The constructor is also private as before and so enum is non intangible.

96
00:07:19.650 --> 00:07:25.830
And the important thing here is that this translator class extends a class called Enum, which is from

97
00:07:25.830 --> 00:07:27.270
Java Lang package.

98
00:07:27.420 --> 00:07:32.760
And the class enum includes methods which can be invoked on an enum constant.

99
00:07:33.060 --> 00:07:37.740
In the next lecture, we will explore the enum class and its methods through a demo.

100
00:07:38.620 --> 00:07:42.790
You can also notice the two static methods that the compiler has inserted.

101
00:07:43.420 --> 00:07:46.960
These were not there in our class definition from the previous slide.

102
00:07:47.500 --> 00:07:53.620
The values method returns an array of enum constants in the order in which they are declared.

103
00:07:54.070 --> 00:08:00.580
And this would be helpful in iterating over the constants or finding the number of constants declared

104
00:08:01.150 --> 00:08:03.160
as mentioned at the beginning of this lecture.

105
00:08:03.190 --> 00:08:09.160
It would not be very easy to iterate over the constants if we use the enum pattern.

106
00:08:09.930 --> 00:08:15.660
And the value of method here would return a particular enum constant given its name.

107
00:08:16.200 --> 00:08:19.800
So we can see that the return type here is the enum type.

108
00:08:20.590 --> 00:08:27.910
So as we can see, an enum has a very simple representation and it is also powerful as it addresses

109
00:08:27.910 --> 00:08:30.970
the deficiencies in the INT enum pattern.

110
00:08:31.750 --> 00:08:38.020
And an enum can also be more sophisticated as we will see later, which will make it even more powerful.

111
00:08:39.929 --> 00:08:47.550
And here is an example of a method where the variable John Ray is off book, John Ray type, and here

112
00:08:47.550 --> 00:08:49.230
is how this method can be invoked.

113
00:08:49.470 --> 00:08:53.150
The argument for John Ray is the enum constant book.

114
00:08:53.160 --> 00:08:54.330
John Ray Hodder.

115
00:08:55.190 --> 00:09:01.790
Once again, this gives us the benefit of compile time type safety as only constants that are defined

116
00:09:01.790 --> 00:09:04.910
within book genre can be passed as arguments here.

117
00:09:06.660 --> 00:09:12.660
So it is essentially a class which defines a fixed set of constants.

118
00:09:12.960 --> 00:09:14.180
So just keep that in mind.

119
00:09:14.190 --> 00:09:15.570
It is simply a class.

120
00:09:16.390 --> 00:09:19.510
And the constants are full blown objects.

121
00:09:19.510 --> 00:09:22.270
That is, there are instances of enum type.

122
00:09:23.300 --> 00:09:25.940
And since they are constants, they are static and final.

123
00:09:26.480 --> 00:09:30.530
And so we have the same naming conventions as regular constants.

124
00:09:30.560 --> 00:09:32.660
That is all caps with underscores.

125
00:09:33.940 --> 00:09:39.910
Item confidence are also referred to as elements of the type or members of the type are enumerators

126
00:09:39.910 --> 00:09:40.660
of the type.

127
00:09:42.350 --> 00:09:46.460
Note that JVM loads an enum when it is used for the very first time.

128
00:09:47.860 --> 00:09:52.150
Finally, here is a very comprehensive, effective item on enemies.

129
00:09:52.540 --> 00:09:58.150
It says Use enemies instead of end constants, which is what we discussed in this lecture.

130
00:09:58.480 --> 00:10:04.480
The deficiencies of the enum pattern and how enemies address them are also discussed in this item.

131
00:10:04.810 --> 00:10:09.160
It also discusses several other details and we will look at some of them in this chapter.

132
00:10:09.870 --> 00:10:17.490
So just to summarize, enum type or enumerated type is simply a class that defines a fixed set of constants.

133
00:10:18.090 --> 00:10:23.550
It has a simple representation and it addresses the deficiencies in int enum pattern.

134
00:10:23.730 --> 00:10:24.420
Thank you.

