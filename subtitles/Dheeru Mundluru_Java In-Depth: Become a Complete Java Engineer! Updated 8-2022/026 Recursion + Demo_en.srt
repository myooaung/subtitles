1
00:00:02,080 --> 00:00:03,080
Hi there.

2
00:00:03,100 --> 00:00:05,380
This is Jayaraman and welcome back.

3
00:00:05,440 --> 00:00:11,770
So far, we looked at a method invoking another method for accomplishing something.

4
00:00:12,130 --> 00:00:17,260
Now let's look at a method invoking itself in order to accomplish something.

5
00:00:17,740 --> 00:00:24,940
And we refer to this as recursion, which is an interesting as well as an important programming technique.

6
00:00:25,450 --> 00:00:31,840
So the method that invokes itself is also referred to as a recursive method, and we refer to such an

7
00:00:31,840 --> 00:00:34,420
invocation call as a recursive call.

8
00:00:35,020 --> 00:00:42,160
So when a method invokes itself, it essentially means that the method is actually executing again.

9
00:00:42,550 --> 00:00:46,840
And during that execution, it may make another recursive call.

10
00:00:46,870 --> 00:00:49,600
And so the method would execute once again.

11
00:00:49,990 --> 00:00:56,650
So this process of re invoking itself and the method executing again can happen for a certain number

12
00:00:56,650 --> 00:01:03,790
of times until a condition is met in one of the executions, one of the executions of the method.

13
00:01:04,030 --> 00:01:06,340
And with that, recursion would stop.

14
00:01:07,860 --> 00:01:12,630
And with such recursion, what we get is a compact and elegant code.

15
00:01:13,020 --> 00:01:15,930
That is, the code is very easy to understand.

16
00:01:16,320 --> 00:01:23,670
Now, only certain kinds of problems can be implemented using recursion, and those kinds of problems

17
00:01:23,670 --> 00:01:31,980
can also be implemented using a non recursive way where loops such as while and far can be used.

18
00:01:32,400 --> 00:01:38,700
That's because with recursion we have this repetitive invocation of the method so that repetitiveness

19
00:01:38,700 --> 00:01:42,720
can also be simulated using loops such as while or firm.

20
00:01:43,200 --> 00:01:48,630
But when implemented in a non recursive way, what we get is a complex code.

21
00:01:49,380 --> 00:01:57,090
So what recursion is buying us is clearly expressed code and we will see this shortly in a demo.

22
00:01:58,450 --> 00:02:02,830
Now we know that a method call would address some problem.

23
00:02:03,010 --> 00:02:10,180
But with recursion, when a method invokes itself, it would be to address a sub problem.

24
00:02:10,810 --> 00:02:17,440
That is, the problem would still remain the same, but the input data for that particular instance

25
00:02:17,440 --> 00:02:21,940
of method execution would typically be a smaller subset.

26
00:02:22,570 --> 00:02:29,860
So with each recursive invocation, the problem gets smaller and smaller until it cannot be made any

27
00:02:29,860 --> 00:02:30,670
more smaller.

28
00:02:30,970 --> 00:02:35,200
At which point we say that we reached a base case.

29
00:02:35,560 --> 00:02:41,830
So this is the condition that would satisfy in one of the method invocations.

30
00:02:41,830 --> 00:02:43,960
That's what I was mentioning earlier.

31
00:02:44,170 --> 00:02:47,110
So when the base case is reached, recursion stops.

32
00:02:48,690 --> 00:02:52,920
And Factorial is a typical example that is used when introducing recursion.

33
00:02:53,010 --> 00:02:57,870
Here we have four factorial, which we know is four times, three times two times one.

34
00:02:58,410 --> 00:03:02,550
And more generally we would have this for n factorial.

35
00:03:02,550 --> 00:03:09,270
It would be n times and minus one times and minus two and so on until we get to one.

36
00:03:10,350 --> 00:03:14,460
And this can be expressed as end times and minus one factorial.

37
00:03:15,250 --> 00:03:18,490
As you can see, we have a recursive representation here.

38
00:03:19,750 --> 00:03:26,710
That is when NW is replaced with NW minus one, we would get NW minus one times and minus two factorial

39
00:03:27,370 --> 00:03:34,600
and next with NW minus two factorial we would get NW minus two times and minus three factorial and this

40
00:03:34,600 --> 00:03:39,130
would continue until we get to one times zero factorial.

41
00:03:39,880 --> 00:03:45,370
Now let's go ahead and actually implement this factorial functionality using recursion.

42
00:03:47,910 --> 00:03:48,780
For this demo.

43
00:03:48,780 --> 00:03:54,930
A new class called Recursion has been created within the basics directory, so you can also go ahead

44
00:03:54,930 --> 00:03:58,500
and create this class called recursion within your basic directory.

45
00:03:58,770 --> 00:04:02,520
For this demo, I'm going to show this in my Eclipse editor.

46
00:04:02,520 --> 00:04:05,860
So I'll be executing this program from within Eclipse.

47
00:04:05,880 --> 00:04:11,820
And if you're using the regular text editor, you can compile and execute it from the command prompt.

48
00:04:12,630 --> 00:04:18,750
So we are going to implement factorial using both non recursive as well as recursive approach.

49
00:04:18,779 --> 00:04:24,440
That way we can see how the code looks more readable using the recursive approach.

50
00:04:24,450 --> 00:04:27,420
So for both of them we'll have two different methods.

51
00:04:27,450 --> 00:04:34,200
First, let's look at the non recursive approach and the method has been named as factorial and R where

52
00:04:34,200 --> 00:04:38,010
an R stands for non recursive and the method is implemented.

53
00:04:38,010 --> 00:04:39,660
So we are just going to look at that.

54
00:04:39,660 --> 00:04:45,690
But after that we are going to implement the recursive approach using this method called factorial.

55
00:04:46,760 --> 00:04:53,180
Now here the input is end, which means that we need to compute and factorial.

56
00:04:53,540 --> 00:04:58,730
So this non recursive approach uses a while loop for implementing it.

57
00:04:59,450 --> 00:05:05,870
Here the first thing that we are doing is we are checking if the input MN is either zero or one.

58
00:05:05,990 --> 00:05:12,590
If it is either zero or one, we would return the value one because zero factorial or one factorial

59
00:05:12,590 --> 00:05:13,340
is one.

60
00:05:14,030 --> 00:05:18,740
Now if it is something other than that, then this condition would fail.

61
00:05:18,890 --> 00:05:24,170
Now, the assumption here is that we are only going to pass a positive value.

62
00:05:24,500 --> 00:05:28,610
So the value has to be either zero or greater than zero.

63
00:05:28,790 --> 00:05:29,810
It cannot be negative.

64
00:05:30,140 --> 00:05:37,070
So if it is something other than zero and one, then we are coming here and we are assigning MN to this

65
00:05:37,070 --> 00:05:42,260
temporary variable called factorial and the factorial is computed here.

66
00:05:42,260 --> 00:05:47,060
So we are using a while loop and the condition is and greater than or equal to two.

67
00:05:47,390 --> 00:05:55,010
And we do this iteration and with each iteration we are also incrementing and so we do that until and

68
00:05:55,010 --> 00:05:55,910
reaches two.

69
00:05:56,210 --> 00:06:01,970
If an is four, then we would we would iterate this until and becomes two.

70
00:06:02,210 --> 00:06:05,100
And in each iteration we are computing the factorial.

71
00:06:05,120 --> 00:06:08,780
Here we are saying factorial times and minus one.

72
00:06:09,260 --> 00:06:12,290
So that's how factorial is going to be computed.

73
00:06:12,290 --> 00:06:16,970
So if it is four, it would be four times, three times two times one, right?

74
00:06:17,030 --> 00:06:21,440
So initially, let's just take an example and let's look at it.

75
00:06:21,440 --> 00:06:25,580
So initially, let's assume the value that is passed is four.

76
00:06:25,850 --> 00:06:28,550
So we need to compute four factorial, which is 24.

77
00:06:28,790 --> 00:06:31,490
So here again would be four.

78
00:06:31,490 --> 00:06:33,560
So factorial would be four here.

79
00:06:33,890 --> 00:06:38,240
And within the loop here, because the condition is true for greater than or equal to two.

80
00:06:38,240 --> 00:06:41,450
So this would be four times and minus one.

81
00:06:41,870 --> 00:06:47,960
So it would be four times three, which is equal to 12, and we are incrementing an to three.

82
00:06:48,320 --> 00:06:53,960
So next in the next iteration, three would be greater than or equal to two, which is true.

83
00:06:54,050 --> 00:06:57,440
And here the current value of factorial is 12.

84
00:06:57,740 --> 00:07:05,510
So now it would be 12 times three minus one, which is two and here and would be limited to two and

85
00:07:05,510 --> 00:07:06,920
this would be 24 here.

86
00:07:06,920 --> 00:07:08,920
So factorial is 24.

87
00:07:08,930 --> 00:07:13,630
The current value of factorial and two is greater than or equal to two, which is also true.

88
00:07:13,640 --> 00:07:18,680
So in the next iteration it would be 24 times two minus one, which is one.

89
00:07:18,770 --> 00:07:23,060
So this would be 24 and would become one.

90
00:07:23,300 --> 00:07:29,000
After that the condition would fail and we would exit the loop and we would return the current value

91
00:07:29,000 --> 00:07:30,620
of factorial, which is 24.

92
00:07:31,480 --> 00:07:33,040
So that's factorial.

93
00:07:33,040 --> 00:07:33,310
And.

94
00:07:33,730 --> 00:07:38,380
Now let's look at the recursive version.

95
00:07:39,620 --> 00:07:44,870
So we know that it has to be and times factorial.

96
00:07:44,870 --> 00:07:51,380
So this is a recursive call and minus one and let's just say written.

97
00:07:52,580 --> 00:07:55,370
And let's run it and see what happens.

98
00:07:55,400 --> 00:07:58,120
Now, both of these methods are invoked from the main.

99
00:07:58,130 --> 00:08:05,600
First, let me run that factorial and ah so this factorial and are of four is being invoked from within

100
00:08:05,600 --> 00:08:07,460
the println statement here.

101
00:08:07,760 --> 00:08:08,990
So let me run it.

102
00:08:09,780 --> 00:08:13,920
So it returns 24 for one and is equal to four.

103
00:08:14,250 --> 00:08:18,450
Now, let's see what happens if we invoke the recursive version.

104
00:08:20,080 --> 00:08:24,430
As you can see, we are getting an error called Stack Overflow Error.

105
00:08:24,430 --> 00:08:28,210
So this is what we are getting when we are invoking the recursive version.

106
00:08:28,240 --> 00:08:32,590
This 24 here is for the non recursive version, the value returned by that.

107
00:08:32,950 --> 00:08:35,080
So Stack Overflow error.

108
00:08:35,110 --> 00:08:41,830
Now let me just explain this concept called a stack and stack frame, but we will be looking at it in

109
00:08:41,830 --> 00:08:44,830
detail in the JVM internal section.

110
00:08:44,830 --> 00:08:50,080
So here we are just going to discuss it very briefly just to give you an idea.

111
00:08:50,380 --> 00:08:57,400
So when JVM starts up, it gets a chunk of memory from the operating system, and part of that memory

112
00:08:57,400 --> 00:09:00,010
is called as stack stack space.

113
00:09:00,190 --> 00:09:04,270
Now the stack space, it has some limited amount.

114
00:09:04,420 --> 00:09:10,780
Now, when a method is invoked like this, let's say a factorial of four, then something called a stack

115
00:09:10,780 --> 00:09:11,170
frame.

116
00:09:11,180 --> 00:09:12,880
Stack frame is different from stack.

117
00:09:13,450 --> 00:09:17,350
So a stack frame would be created and it would be stored in stack.

118
00:09:17,830 --> 00:09:19,630
Stack frame goes into stack.

119
00:09:19,810 --> 00:09:24,910
So for factorial or for a stack frame would be created and it would go on the stack.

120
00:09:25,030 --> 00:09:27,340
Now here factorial.

121
00:09:28,280 --> 00:09:28,480
Okay.

122
00:09:28,520 --> 00:09:30,140
We are to be factorial of four.

123
00:09:30,140 --> 00:09:37,040
And that in turn is making this invocation factorial of three and four that a new stack frame would

124
00:09:37,040 --> 00:09:42,610
be created and that would be stored on top of the previous stack frame, which was created for factorial

125
00:09:42,610 --> 00:09:43,190
of four.

126
00:09:43,580 --> 00:09:45,710
So factorial of three is there.

127
00:09:45,710 --> 00:09:51,770
So we it gets a new stack frame and when factorial three gets executed in the next iteration, it would

128
00:09:51,770 --> 00:09:58,700
be factorial of two and that would result in creation of yet another stack frame on the stack.

129
00:09:59,450 --> 00:10:01,280
So there are three stack frames now.

130
00:10:01,280 --> 00:10:11,030
So factorial of two will would be invoked again and that will result in a call of factorial of one.

131
00:10:11,330 --> 00:10:15,860
And then we will have factorial of zero, factorial of minus one, and that's never stopping here.

132
00:10:16,370 --> 00:10:20,810
So it's like an infinite invocation at some point.

133
00:10:20,810 --> 00:10:28,310
So all these stack frames are getting stacked on the stack and the stack has limited memory, and we

134
00:10:28,310 --> 00:10:35,060
would run out of space and ultimately we would get this error called Stack Overflow error because the

135
00:10:35,060 --> 00:10:36,620
stack is getting overflow.

136
00:10:37,010 --> 00:10:39,950
So the problem here is there is no base condition.

137
00:10:40,580 --> 00:10:44,510
So we need to put a base condition so that recursion would stop.

138
00:10:44,570 --> 00:10:49,010
And in our case, the base condition would be and is equal to zero.

139
00:10:49,040 --> 00:10:53,660
At that point it would be zero factorial and we would return one.

140
00:10:53,990 --> 00:10:55,250
So this is what it is.

141
00:10:55,250 --> 00:10:57,530
And now it would.

142
00:10:58,800 --> 00:11:00,060
There is a closure to it.

143
00:11:00,060 --> 00:11:02,520
And so if we run it, so we get 24.

144
00:11:03,180 --> 00:11:04,940
So let's actually look at this.

145
00:11:04,950 --> 00:11:08,400
So initially, let's say an is equal to four.

146
00:11:08,400 --> 00:11:10,680
So it would be N times.

147
00:11:12,590 --> 00:11:15,350
Factorial off and minus one, right?

148
00:11:15,350 --> 00:11:21,680
It would be three times three, four times factorial of four minus one, which is three and factorial

149
00:11:21,680 --> 00:11:23,600
of three, gets invoked at this point.

150
00:11:24,830 --> 00:11:27,650
So nothing is being returned here.

151
00:11:27,650 --> 00:11:34,430
It's just that return is there, but it is n times factorial of three, so in which case the control.

152
00:11:34,460 --> 00:11:41,770
So there is this recursive call and the method would be executed once again with this value three.

153
00:11:41,780 --> 00:11:44,270
So with that the method executes again.

154
00:11:44,270 --> 00:11:51,560
And so we would come here and it would be three times factorial of two.

155
00:11:52,560 --> 00:11:53,000
Okay.

156
00:11:53,010 --> 00:11:55,260
And this would correspond to.

157
00:11:57,270 --> 00:12:01,350
Two times factorial of one.

158
00:12:01,950 --> 00:12:04,860
And in the next loop it would be.

159
00:12:06,940 --> 00:12:16,360
One time factorial of zero, and when factorial of zero is invoked and would be zero and the base case

160
00:12:16,360 --> 00:12:18,580
would be true and a one would be written.

161
00:12:19,300 --> 00:12:23,200
So when one is written this that one.

162
00:12:24,530 --> 00:12:26,270
The factorial of zero is returning one.

163
00:12:26,270 --> 00:12:28,300
So we would have one here.

164
00:12:28,310 --> 00:12:32,360
And so this is one and this is getting returned here, right?

165
00:12:32,900 --> 00:12:36,050
So it essentially means factorial of one.

166
00:12:36,200 --> 00:12:38,360
So that is nothing but factorial of one.

167
00:12:38,360 --> 00:12:39,920
So that is what is happening.

168
00:12:40,100 --> 00:12:42,920
So we are saying in the next statement we will have returned.

169
00:12:43,850 --> 00:12:44,900
Two into one.

170
00:12:45,020 --> 00:12:50,720
So when this is returned, it would replace factorial of two with the value that is written with this

171
00:12:50,720 --> 00:12:58,100
two, and this would correspond to six now and six would be returned, which means that factorial of

172
00:12:58,100 --> 00:13:00,710
three would be would be replaced with six.

173
00:13:00,950 --> 00:13:08,480
And now we are in the first invocation and that would be 24 and finally 24 would be written.

174
00:13:08,840 --> 00:13:12,940
So with each invocation, the method is getting invoked.

175
00:13:12,950 --> 00:13:19,370
And finally, when the base is reached, when the base case is reached, you know, the entire process

176
00:13:19,370 --> 00:13:25,940
would go backwards until we reach the first invocation and then we would return that value.

177
00:13:25,940 --> 00:13:30,710
And the method stops and the method completes its execution.

178
00:13:31,530 --> 00:13:31,740
Okay.

179
00:13:31,740 --> 00:13:34,260
So that's the recursive call.

180
00:13:34,410 --> 00:13:39,930
And as you can see, the code is the code is much more cleaner.

181
00:13:39,930 --> 00:13:46,230
So if you look at both of these implementations, the recursive version is much more cleaner as we can

182
00:13:46,230 --> 00:13:50,400
clearly see, whereas the non recursive version has all of this.

183
00:13:50,520 --> 00:13:57,060
So with recursion, what we get is a cleaner code, we get a cleaner code, but it would be slightly

184
00:13:57,060 --> 00:14:04,470
slower because we have all of these with each call where a stack is being created.

185
00:14:04,470 --> 00:14:08,850
And so that would take up some time and it would also take up some space.

186
00:14:08,850 --> 00:14:15,150
Also for each invocation, a new stack frame is being created so that that involves both time as well

187
00:14:15,150 --> 00:14:15,870
as space.

188
00:14:15,870 --> 00:14:22,710
And so it is a little bit inefficient, but the code is much more cleaner now and much more clearer

189
00:14:22,710 --> 00:14:25,410
now, and that is what we need.

190
00:14:25,410 --> 00:14:32,730
Sometimes we can compromise efficiency if we if the code is much more readable and that's what we get

191
00:14:32,730 --> 00:14:33,660
from recursion.

192
00:14:34,560 --> 00:14:36,150
So that's about that.

193
00:14:36,150 --> 00:14:39,420
So the next question is when do we use recursion?

194
00:14:39,420 --> 00:14:42,630
Recursion cannot be used for all kinds of problems.

195
00:14:42,900 --> 00:14:46,500
It comes into play only if the problem can be addressed.

196
00:14:46,500 --> 00:14:54,210
We are similar sub problems like in this case where each invocation, where there is this problem where

197
00:14:54,210 --> 00:15:02,550
we have to find factorial of and but that can be addressed via factorial off and minus one, which is

198
00:15:02,550 --> 00:15:07,800
a sub problem and that can be in turn address using factorial of and minus two.

199
00:15:07,830 --> 00:15:12,780
So if that's the kind of problem that we are dealing with, then we can use recursion.

200
00:15:12,780 --> 00:15:18,120
And here are a few example problems that require recursion and there are many more.

201
00:15:18,120 --> 00:15:21,840
But these are some simple examples that you may be aware of.

202
00:15:21,840 --> 00:15:28,500
One is the binary search, which is about searching for an element in a list of elements, and the next

203
00:15:28,500 --> 00:15:30,090
is Towers of Hanoi.

204
00:15:30,120 --> 00:15:34,790
So if you have a computer science background, you might have come across this in your data structures

205
00:15:34,800 --> 00:15:40,290
class, which can also be solved using recursion, and the next one is word frequency count.

206
00:15:40,290 --> 00:15:47,250
So if you have a document and if you want to search for a particular word and also you want to search

207
00:15:47,250 --> 00:15:53,040
how many times that word is appearing in the document, then it can be implemented in a recursive way.

208
00:15:53,430 --> 00:15:55,530
So we have looked at factorial.

209
00:15:55,560 --> 00:16:02,520
Now let's also look at binary search quickly because binary search is a basic interview problem.

210
00:16:02,520 --> 00:16:09,480
And moreover, if we also look at this, it will give you a better understanding about recursion.

211
00:16:10,050 --> 00:16:14,340
So with binary search, we are searching for an element among a list of elements.

212
00:16:14,340 --> 00:16:19,980
Let's say we have these set of elements here and they are all for binary search.

213
00:16:19,980 --> 00:16:25,650
The requirement is that the elements have to be sorted first, so which means that they need to be in

214
00:16:25,650 --> 00:16:26,520
ascending order.

215
00:16:26,520 --> 00:16:28,650
In this case, they are all in ascending order.

216
00:16:29,010 --> 00:16:30,360
So that's the requirement.

217
00:16:30,360 --> 00:16:38,250
Now, if you do not use binary search, the way to implement it is using a linear search, which means

218
00:16:38,250 --> 00:16:44,880
that you would search each of these elements and check if the element that you are searching for appears

219
00:16:44,880 --> 00:16:45,780
anywhere in the list.

220
00:16:45,780 --> 00:16:48,060
So you will scan the entire list.

221
00:16:48,060 --> 00:16:52,140
Now, if you have million elements, you will scan the million elements.

222
00:16:52,140 --> 00:16:57,720
In the worst case in the in the worst case, you would scan all of the million elements and you wouldn't

223
00:16:57,720 --> 00:16:58,830
find your element.

224
00:16:59,070 --> 00:17:06,599
So that we call it as a linear search and the algorithm efficiency for that would be off.

225
00:17:06,599 --> 00:17:08,700
And we say that it is linear.

226
00:17:09,000 --> 00:17:14,460
Now with binary search, it's going to be much more efficient because of the algorithm itself.

227
00:17:14,460 --> 00:17:20,310
And there the efficiency, the algorithm efficiency, we say that it is logarithmic so it will be big

228
00:17:20,310 --> 00:17:28,890
or off log n so binary search is more efficient than linear search and let's see how it works.

229
00:17:28,890 --> 00:17:31,020
So here we have eight elements.

230
00:17:31,020 --> 00:17:38,460
Let's say the first invocation is this binary search of a a is nothing but the array and zero is nothing

231
00:17:38,460 --> 00:17:43,260
but the zero index and eight is the last index.

232
00:17:43,260 --> 00:17:44,340
So there are nine elements.

233
00:17:44,340 --> 00:17:50,850
We are passing eight and this is the element that needs to be searched and the binary search would return

234
00:17:50,850 --> 00:17:57,750
if the element is present anywhere here in this case it is present here, then it would return the index

235
00:17:57,750 --> 00:17:59,430
position of that element.

236
00:17:59,430 --> 00:18:02,970
So that would be 501, two, three, four and five.

237
00:18:03,030 --> 00:18:06,390
But if the element is not found, then it would return a minus one.

238
00:18:06,900 --> 00:18:09,180
So it's going to return the index value here.

239
00:18:09,570 --> 00:18:18,420
And essentially what binary search does is it does not scan the entire the entire array, so it only

240
00:18:18,420 --> 00:18:20,430
scans certain areas of the array.

241
00:18:20,520 --> 00:18:23,130
And that's why it is much more efficient.

242
00:18:23,160 --> 00:18:30,870
And the way it does is once you invoke this, the first thing it does is it computes the middle.

243
00:18:31,170 --> 00:18:38,190
The area, which is nothing but zero plus eight by two, which is nothing but four.

244
00:18:38,190 --> 00:18:41,130
So it computes the the value four.

245
00:18:41,130 --> 00:18:46,260
So zero is the lower element, lower index and eight is the higher index.

246
00:18:46,260 --> 00:18:48,960
So now later we are going to fill this method.

247
00:18:48,960 --> 00:18:51,060
So the method signature is also here.

248
00:18:51,090 --> 00:18:56,520
The first element is a, the second is lower index, higher index and the key to search.

249
00:18:57,300 --> 00:19:02,880
So it will be eight plus two by a zero plus eight by two, which is four at that.

250
00:19:02,880 --> 00:19:10,140
Next, we will check if this if the element at this index, whether it is the which is whether it is

251
00:19:10,140 --> 00:19:10,770
the key.

252
00:19:11,130 --> 00:19:16,770
So the element at four position four is 55, which is not equal to 65.

253
00:19:17,160 --> 00:19:24,510
Had it been the same element, if if this was 65, then the method would have retained this particular

254
00:19:24,510 --> 00:19:26,340
index as the output.

255
00:19:26,940 --> 00:19:34,920
But since it is not the case next it will check whether whether the key is greater than or less than

256
00:19:34,920 --> 00:19:35,760
55.

257
00:19:36,150 --> 00:19:37,920
In this case, 65.

258
00:19:37,920 --> 00:19:44,460
Our key that we are searching is greater than 55, which means that it has to appear only in this part

259
00:19:44,460 --> 00:19:50,310
of the array so we can ignore all of the elements that appear before 55.

260
00:19:50,580 --> 00:19:53,190
And that's what gives us the efficiency.

261
00:19:53,190 --> 00:19:56,310
That's what that's what makes the binary search faster.

262
00:19:56,310 --> 00:20:01,080
So we are skipping all of these elements and we are focusing only on this part.

263
00:20:01,080 --> 00:20:02,430
So which means that.

264
00:20:03,370 --> 00:20:08,230
We can make a recursive call now and we'll just say binary search.

265
00:20:10,290 --> 00:20:17,320
And we need to pass the era and we need to pass the indexes.

266
00:20:17,340 --> 00:20:20,430
So the mid was for here this was the Met.

267
00:20:20,460 --> 00:20:25,140
But since the element is greater than this, it's got to be from here.

268
00:20:25,140 --> 00:20:33,150
So for lower we will pass mid plus one and for higher we would just pass whatever we have here, which

269
00:20:33,150 --> 00:20:37,110
is eight and the element will be passed again.

270
00:20:37,260 --> 00:20:39,990
So this plus one is nothing but fine.

271
00:20:40,290 --> 00:20:46,200
So this is the next recursive call and for this we would once again compute med.

272
00:20:46,200 --> 00:20:54,150
So it would be five plus 813 by two, which would be six, it would be 6.5, but truncate it to six.

273
00:20:54,150 --> 00:21:02,580
So next we are going to look at a of six, which is nothing but this 171 and we are comparing it with

274
00:21:02,580 --> 00:21:05,970
65 and 65 is less than that.

275
00:21:05,970 --> 00:21:10,320
So which means that we need to look at only this area.

276
00:21:10,890 --> 00:21:15,390
So in the earlier we constrained ourself to this part.

277
00:21:15,390 --> 00:21:22,350
But now with this invocation, since 65 is less than 71, it cannot be part of this.

278
00:21:22,740 --> 00:21:29,940
So it has to be only in this area, which means that our next call would be something like this.

279
00:21:30,820 --> 00:21:33,820
Binary search of a.

280
00:21:34,800 --> 00:21:38,520
And it has to be the leftmost part.

281
00:21:38,550 --> 00:21:41,670
So in this case, lower would be same.

282
00:21:41,670 --> 00:21:43,410
So we will still have five.

283
00:21:43,560 --> 00:21:46,020
And the upper part would be mid minus one.

284
00:21:46,020 --> 00:21:47,820
So earlier mid was here.

285
00:21:47,820 --> 00:21:49,740
So it would be mid minus one.

286
00:21:50,460 --> 00:21:51,690
So mid was six.

287
00:21:51,690 --> 00:21:56,280
So mid minus one will be five and we will also pass 65.

288
00:21:56,280 --> 00:21:57,750
Now once again.

289
00:21:57,900 --> 00:22:01,800
So this is what we have now with this invocation.

290
00:22:01,800 --> 00:22:07,410
Both lower and higher are equal and that would be our base case.

291
00:22:07,410 --> 00:22:14,580
If lower and higher are same, then we have to stop our recursion and we will check if the element at

292
00:22:14,580 --> 00:22:22,590
this position five whether it is 65 OC and in our case at the elementary 60 at the position file is

293
00:22:22,590 --> 00:22:23,700
indeed 65.

294
00:22:23,700 --> 00:22:25,980
So we would return that particular value.

295
00:22:26,430 --> 00:22:27,990
So that's what is happening.

296
00:22:27,990 --> 00:22:31,830
And when we return the so we would return the value five.

297
00:22:32,280 --> 00:22:36,690
So but if it was not 65, then it would have returned minus one.

298
00:22:37,080 --> 00:22:39,780
So that's how the algorithm would work.

299
00:22:39,780 --> 00:22:42,630
Now let's just go ahead and quickly code up this one.

300
00:22:43,020 --> 00:22:44,670
So it should be interesting.

301
00:22:45,030 --> 00:22:47,250
So we have the method here.

302
00:22:47,610 --> 00:22:50,370
I just need to fill this.

303
00:22:51,280 --> 00:22:54,340
So this one would have a logarithmic efficiency.

304
00:22:54,880 --> 00:22:57,850
And so first thing is, let's write the base case.

305
00:22:57,850 --> 00:23:00,350
So we have L and our indices.

306
00:23:00,370 --> 00:23:03,550
So we'll check if L is equal to H.

307
00:23:03,790 --> 00:23:13,540
If that's the case, then we need to check if our key is equal to A of L.

308
00:23:13,570 --> 00:23:14,710
That's how l.

309
00:23:15,730 --> 00:23:22,140
Or it doesn't matter if it is same, then we need to return the index.

310
00:23:22,150 --> 00:23:27,490
L Right, because we found our element as we would return minus one.

311
00:23:28,620 --> 00:23:29,070
Okay.

312
00:23:29,130 --> 00:23:34,620
Now, if that's not the case, it means that we are supposed to make a recursive call.

313
00:23:34,890 --> 00:23:42,210
First, we need to compute the middle element, which would be L plus H by to make sure the parentheses

314
00:23:42,210 --> 00:23:42,930
is there.

315
00:23:42,930 --> 00:23:46,860
Because otherwise, without the parentheses, this would get higher precedence.

316
00:23:46,860 --> 00:23:49,890
It would be H by two and then it will be added to L.

317
00:23:50,250 --> 00:23:52,080
So we need the parentheses here.

318
00:23:52,260 --> 00:23:55,410
Now we are going to check if a.

319
00:23:57,560 --> 00:24:01,730
If our key is equals to a off med.

320
00:24:02,860 --> 00:24:06,040
Then we return met.

321
00:24:08,080 --> 00:24:12,070
And if key is greater than.

322
00:24:13,320 --> 00:24:20,160
A med, then we can skip the left part of the array and we can.

323
00:24:20,430 --> 00:24:25,890
We can only search for the upper part of the area which is from med plus one.

324
00:24:25,890 --> 00:24:28,500
So we would say binary search.

325
00:24:30,240 --> 00:24:34,770
So in the new invocation, lower element has to be made plus one.

326
00:24:34,770 --> 00:24:38,730
So we need to pass plus one and the higher would be the same one.

327
00:24:38,730 --> 00:24:46,500
So whatever we have higher, higher index, we just pass the same one and we also pass the key.

328
00:24:49,860 --> 00:24:52,360
Now, the final one is if.

329
00:24:52,370 --> 00:24:56,190
If this also fails, which means that key is less than a mid.

330
00:24:56,400 --> 00:25:00,530
Then we we have to scan only the lower part of the array.

331
00:25:01,050 --> 00:25:02,640
So we would say return.

332
00:25:05,270 --> 00:25:07,610
A lower part of the area.

333
00:25:07,610 --> 00:25:13,130
For the lower part, the lower index would be the same index that we have.

334
00:25:13,580 --> 00:25:21,080
L and the higher index in the next iteration it would be mid minus one and it would be key.

335
00:25:21,440 --> 00:25:22,760
So this is what we have.

336
00:25:23,360 --> 00:25:24,790
So this is the default.

337
00:25:24,800 --> 00:25:30,740
So if both of these fails, then we get to the default one where key is less than a off.

338
00:25:31,670 --> 00:25:33,080
So this is what we have.

339
00:25:33,080 --> 00:25:35,100
Let's go ahead and execute it.

340
00:25:35,120 --> 00:25:39,080
So let me just copy all of this into the main method.

341
00:25:41,110 --> 00:25:43,030
And this one returns the index.

342
00:25:43,030 --> 00:25:45,790
So let me say index equals this.

343
00:25:49,750 --> 00:25:51,580
So let me just run this.

344
00:25:51,730 --> 00:25:54,910
So it has to print the index value as fine.

345
00:25:55,150 --> 00:25:58,870
Now, if you pass, let's say 34 here.

346
00:25:59,710 --> 00:26:04,330
It would print three because 34 is appearing at the third position.

347
00:26:04,630 --> 00:26:09,580
Similarly, if you pass 100, which is not there, it has to return minus one.

348
00:26:09,820 --> 00:26:11,380
So minus one is being written.

349
00:26:11,680 --> 00:26:14,290
So that's all there is to binary search.

350
00:26:14,560 --> 00:26:18,250
So it's much more efficient and compared to factorial.

351
00:26:18,280 --> 00:26:23,910
Here we have having two invocations, but only in a given execution of the method.

352
00:26:23,920 --> 00:26:25,600
Only one of them would be invoked.

353
00:26:25,900 --> 00:26:28,030
So it is slightly different here.

354
00:26:28,300 --> 00:26:34,960
But in for example, for towards of NOI, we would also make two invocations something similar to this.

355
00:26:35,050 --> 00:26:38,650
But there we wouldn't have such kind of an F condition.

356
00:26:38,860 --> 00:26:44,710
So both of the invocations would be executed and it, it would work in a slightly different way.

357
00:26:45,820 --> 00:26:46,810
So that's it.

358
00:26:48,680 --> 00:26:55,580
And so we now have a good idea about how recursion would work, and that's about it.

359
00:26:55,580 --> 00:26:58,430
And this code will be available in the resources section.

360
00:26:58,610 --> 00:27:00,650
Thank you and happy coding.

