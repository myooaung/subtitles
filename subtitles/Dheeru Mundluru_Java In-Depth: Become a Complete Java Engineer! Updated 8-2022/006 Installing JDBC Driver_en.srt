1
00:00:02,140 --> 00:00:03,080
Hi there.

2
00:00:03,100 --> 00:00:04,310
This is 010.

3
00:00:04,360 --> 00:00:05,320
And welcome back.

4
00:00:05,770 --> 00:00:11,290
So we looked at how we can interact with the database directly from the command line.

5
00:00:11,740 --> 00:00:15,290
Now let's see how we can do it from our Java programs.

6
00:00:15,310 --> 00:00:19,900
And for that, we will be using the GBK API and GBK.

7
00:00:19,930 --> 00:00:26,530
As you may know, stands for Java database connectivity, which means that it has something to do with

8
00:00:26,530 --> 00:00:28,090
connecting to the database.

9
00:00:28,570 --> 00:00:34,750
And Jtbc relies on something called a Jtbc driver for interacting with the database.

10
00:00:35,350 --> 00:00:41,950
In this lecture we will install a gypsy driver and in the next lecture we will see how we can make our

11
00:00:41,950 --> 00:00:46,810
project load the data from the database which we created earlier.

12
00:00:48,650 --> 00:00:53,870
Now JBC API is a standard database independent interface.

13
00:00:54,780 --> 00:01:01,740
Which means that it can be used to interact with different data sources like the different databases

14
00:01:01,740 --> 00:01:07,590
or even other tabular data sources like Excel spreadsheets and flat files.

15
00:01:07,980 --> 00:01:15,390
But typically we use it to interact with databases rather than these other types of files like Excel

16
00:01:15,390 --> 00:01:17,040
spreadsheets and FLAC files.

17
00:01:17,340 --> 00:01:24,900
And personally, also, I have never had to use G.P.S. API to interact with anything other than a database.

18
00:01:26,450 --> 00:01:32,000
On database API mainly comprises of these two packages Java, SQL and Java.

19
00:01:32,510 --> 00:01:33,170
SQL.

20
00:01:33,590 --> 00:01:44,210
Java SQL is regarded as the core GBC API and Java SQL extends the functionality in Java SQL and is mainly

21
00:01:44,210 --> 00:01:50,900
used in Java applications where things like database connection pooling come into play.

22
00:01:52,740 --> 00:01:59,460
But to interact with a specific data source, a GDB driver that is specific to that source would be

23
00:01:59,460 --> 00:02:00,060
needed.

24
00:02:00,450 --> 00:02:04,230
And the GDP driver is simply a collection of classes.

25
00:02:04,650 --> 00:02:11,370
For instance, to interact with my SQL, we need a key driver that is specific to my SQL.

26
00:02:12,000 --> 00:02:18,180
Now there are four types of GVC drivers and they are type one driver, type two driver, type three

27
00:02:18,180 --> 00:02:19,530
and type four driver.

28
00:02:19,740 --> 00:02:21,300
So very easy to remember.

29
00:02:23,120 --> 00:02:26,600
And here they are shown from left to right in red boxes.

30
00:02:27,170 --> 00:02:31,310
So type one is the leftmost one and type four is the rightmost one.

31
00:02:31,700 --> 00:02:35,360
As you may notice, they are also referred to by alternate names.

32
00:02:35,810 --> 00:02:43,880
Type one, for instance, is also referred to as GBC or EBC bridge driver, where OTB stands for open

33
00:02:43,880 --> 00:02:45,410
database connectivity.

34
00:02:46,210 --> 00:02:49,970
Bipolar is actually referred to as gypsy driver itself.

35
00:02:50,440 --> 00:02:54,310
So the gypsy driver is called as jtbc driver itself.

36
00:02:56,030 --> 00:03:02,480
Of these four, we will be using the type four driver, which is written purely in Java and we will

37
00:03:02,480 --> 00:03:07,970
soon download the one that is specific to my SQL as we are using my SQL database.

38
00:03:08,540 --> 00:03:15,470
Type four is also one of the most commonly used drivers, and according to one Java performance book,

39
00:03:15,590 --> 00:03:22,760
its author Scott Ochs mentions that apart from type for Driver, Type two driver is also widely used

40
00:03:23,180 --> 00:03:29,030
and he recommends avoiding the type one driver as its performance, it seems, is bad.

41
00:03:29,420 --> 00:03:32,960
And he also says that type three is not that widely adopted.

42
00:03:33,860 --> 00:03:40,280
Also, as we can see here, type for driver interacts directly with the database while others have an

43
00:03:40,280 --> 00:03:44,390
additional layer which does the actual communication with the database.

44
00:03:44,960 --> 00:03:51,560
And in case of type one and type two, we need to actually install additional software specific to the

45
00:03:51,560 --> 00:03:53,660
database with which we are interacting.

46
00:03:54,200 --> 00:04:00,560
While Type three uses some middleware for interacting with the database and that middleware will take

47
00:04:00,560 --> 00:04:05,960
care of interacting with any of the databases, now let's not get into the details anymore.

48
00:04:05,960 --> 00:04:09,950
And if you're interested, you can Google for them and learn more about them.

49
00:04:10,340 --> 00:04:16,130
But it would suffice to know that type two and type four are the most commonly used ones, and we will

50
00:04:16,130 --> 00:04:17,339
be using type four.

51
00:04:17,360 --> 00:04:21,529
So let's go ahead and download the type for Driver for my SQL.

52
00:04:23,930 --> 00:04:24,070
Okay.

53
00:04:24,110 --> 00:04:28,190
Let's go ahead and search for my SQL.

54
00:04:30,110 --> 00:04:32,450
Community server download.

55
00:04:33,670 --> 00:04:39,190
Which is what we have searched for earlier when installing my SQL Community Server.

56
00:04:39,190 --> 00:04:44,110
So it's going to be the same search query and same length that we are clicking on.

57
00:04:44,320 --> 00:04:50,590
But since we have already downloaded community server, all we need to do is just click here, which

58
00:04:50,590 --> 00:04:52,990
is the MySQL connectors.

59
00:04:54,510 --> 00:04:58,740
And these are links to the different drivers.

60
00:04:58,740 --> 00:05:03,930
And for Java, the GBC driver for that we have to click here.

61
00:05:03,930 --> 00:05:11,220
This is for Java and you can also see that they have drivers for dot net, Node.js, Python and so on.

62
00:05:11,430 --> 00:05:13,080
But this is what we are interested in.

63
00:05:13,080 --> 00:05:14,790
You have to just click on that.

64
00:05:15,860 --> 00:05:20,290
Once you do that, just go ahead and download one of these.

65
00:05:20,950 --> 00:05:25,200
Maybe you can download the zip version here and just unzip it.

66
00:05:25,210 --> 00:05:31,150
And once you unzip it, you will see a folder and within that folder you will find a jar file.

67
00:05:31,150 --> 00:05:34,180
And that's the GBC driver, which we need.

68
00:05:34,540 --> 00:05:36,260
So just go ahead and do that.

69
00:05:36,280 --> 00:05:37,690
I have already done that.

70
00:05:37,840 --> 00:05:39,520
And let me open my.

71
00:05:40,400 --> 00:05:41,900
ED So this is the.

72
00:05:41,900 --> 00:05:49,190
ED So the first thing is to install the GBC driver and there is some code written here.

73
00:05:49,730 --> 00:05:55,550
So as we said that as we said, GDC API is going to use the GBC driver.

74
00:05:55,910 --> 00:06:00,710
So for that, what needs to happen is we need to load the GBC driver.

75
00:06:00,860 --> 00:06:06,950
So in order to load the driver, so this is the class that is needed from the jar file.

76
00:06:07,220 --> 00:06:09,610
So we are going to load this class.

77
00:06:09,620 --> 00:06:15,620
And what this class does is it is going to register itself when we load it, it's going to register

78
00:06:15,620 --> 00:06:23,510
itself with another class within the GBC API which is called US Driver Manager and it is in the Java

79
00:06:23,780 --> 00:06:26,150
SQL package, it's called Driver Manager.

80
00:06:26,360 --> 00:06:27,620
So that's how it is done.

81
00:06:27,620 --> 00:06:35,000
So this is one way of loading it or we can simply even do this, just create an instance of that class.

82
00:06:35,210 --> 00:06:41,640
But since we still did not add the Java file to our build path, we have this compilation error.

83
00:06:41,660 --> 00:06:48,230
Now, if you are not using this ID eclipse, then you have to put the Java file in the class path.

84
00:06:48,290 --> 00:06:53,600
But since we are using it, let's go ahead and add it to our build path.

85
00:06:53,600 --> 00:06:55,840
So here is the demo and the trillium.

86
00:06:56,150 --> 00:07:01,370
Since we are going to refactor Trello, let's go ahead and click on properties here.

87
00:07:02,480 --> 00:07:04,730
And within the jour belt path.

88
00:07:04,730 --> 00:07:13,160
So we go into libraries and here we say add external jars and I have a list of jars here.

89
00:07:13,310 --> 00:07:19,520
So this is the 15.1.44 slash bin here hyphen bin.

90
00:07:19,520 --> 00:07:24,260
So this is an older version that I had, but this is the one that I have downloaded recently.

91
00:07:24,260 --> 00:07:26,060
So and it is the latest version.

92
00:07:26,060 --> 00:07:28,640
Just click on that say apply.

93
00:07:29,270 --> 00:07:35,180
And now you can see that there is no more compilation error because it has been added.

94
00:07:36,260 --> 00:07:42,170
So let me comment that because one of the approaches is good enough, so so we can do this.

95
00:07:42,680 --> 00:07:48,020
And so this code has been written within the data store class.

96
00:07:48,020 --> 00:07:49,790
In our, in our project.

97
00:07:49,790 --> 00:07:52,510
We know that data store is from where we load the data.

98
00:07:52,520 --> 00:07:54,530
It was being used as the database.

99
00:07:54,680 --> 00:07:57,800
But since now we are going to use a real database.

100
00:07:58,730 --> 00:08:05,870
So we will be loading the data from the database from within this file, so we will change some code.

101
00:08:06,200 --> 00:08:09,860
So here is one way of doing it, and this is the second way of doing it.

102
00:08:09,890 --> 00:08:20,060
A third way of loading the driver is via system dot set property and you will set this key drivers and

103
00:08:20,060 --> 00:08:24,620
you will say that we need to load this as the driver.

104
00:08:24,890 --> 00:08:27,350
So we are just using the same name here also.

105
00:08:27,740 --> 00:08:29,480
So that's one way of doing it.

106
00:08:29,570 --> 00:08:35,150
Or the third way is to use the driver manager class itself directly and you will invoke this method

107
00:08:35,150 --> 00:08:41,809
called registered driver and you will pass an instance of this driver class, which is from the Jar

108
00:08:41,809 --> 00:08:43,580
file, which we just downloaded.

109
00:08:44,300 --> 00:08:48,830
So you can see that the Jar file has been added here once we have imported it.

110
00:08:49,310 --> 00:08:50,090
So that's it.

111
00:08:50,090 --> 00:08:51,530
So let me stop here.

112
00:08:51,530 --> 00:08:58,220
So this is the first step, which is to install the GBK driver and it helps in connecting to the database

113
00:08:58,220 --> 00:09:00,230
and interacting with the database.

114
00:09:00,380 --> 00:09:06,170
And in the next lecture we will actually load the data and we will see that in the next lecture.

115
00:09:06,740 --> 00:09:08,330
So see you in the next lecture.

116
00:09:08,510 --> 00:09:09,260
Thank you.

