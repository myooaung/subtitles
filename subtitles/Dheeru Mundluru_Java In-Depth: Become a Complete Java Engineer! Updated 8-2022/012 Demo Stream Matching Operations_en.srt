1
00:00:02,150 --> 00:00:03,120
Hi there.

2
00:00:03,140 --> 00:00:03,740
This is Dana.

3
00:00:04,370 --> 00:00:05,240
And welcome back.

4
00:00:05,540 --> 00:00:07,730
Let's now look at matching operations.

5
00:00:08,090 --> 00:00:11,240
In the subsequent lecture, we will look at finding operations.

6
00:00:11,630 --> 00:00:16,370
And we know that both matching and finding operations are terminal operations.

7
00:00:16,970 --> 00:00:22,610
Earlier, we looked at slicing operations, which were intermediate operations, and we know that intermediate

8
00:00:22,610 --> 00:00:29,750
operations, return stream objects and terminal operations do not return stream objects, but they can

9
00:00:29,750 --> 00:00:31,640
return other types of values.

10
00:00:32,430 --> 00:00:38,700
So matching operations are about matching stream elements to some criteria.

11
00:00:39,560 --> 00:00:42,740
And if it matches the criteria, then a boolean value will be returned.

12
00:00:43,640 --> 00:00:49,910
So under matching we are going to look at three operations called any match, all match and none match.

13
00:00:50,460 --> 00:00:53,390
And next, we will look at finding operations in the subsequent lecture.

14
00:00:53,390 --> 00:01:00,530
And it has two operations and all matching and finding operations plus the limit operation are short

15
00:01:00,530 --> 00:01:07,400
circuit operations, which means that if certain condition is met, then all of the subsequent stream

16
00:01:07,400 --> 00:01:09,080
elements will not be processed.

17
00:01:09,440 --> 00:01:15,980
For instance, with limit if it is limit of three, we know that only the three elements, only three

18
00:01:15,980 --> 00:01:20,870
elements will be processed from the stream and the rest of the elements will not be processed.

19
00:01:21,320 --> 00:01:24,020
Same happens with matching on finding operations to.

20
00:01:24,260 --> 00:01:30,350
So if certain condition is met, then all of the stream elements that come after the condition is met

21
00:01:30,350 --> 00:01:31,490
will not be processed.

22
00:01:31,490 --> 00:01:33,980
Only the elements until then will be processed.

23
00:01:34,760 --> 00:01:41,300
And we also know that in core Java we have and and or operations which are short circuit operations

24
00:01:41,630 --> 00:01:42,020
with.

25
00:01:42,020 --> 00:01:47,750
And if the left condition is false, then the right condition will not be evaluated.

26
00:01:48,140 --> 00:01:55,310
Similarly with R, we know that if the left condition is true, then the right condition will not be

27
00:01:55,310 --> 00:01:56,270
evaluated.

28
00:01:56,420 --> 00:01:56,840
Right?

29
00:01:57,110 --> 00:01:59,210
So that's the short circuit operations.

30
00:01:59,780 --> 00:02:03,320
So let's go ahead and look at match operations.

31
00:02:03,530 --> 00:02:09,710
So a template method has been written here and we have this we know that all of the we have this books

32
00:02:09,710 --> 00:02:16,280
array list and the books from both Amazon and Barnes and Noble are accumulated into this books list.

33
00:02:16,280 --> 00:02:21,950
So we are just going to pass the same books array list to the match function to the match method.

34
00:02:22,190 --> 00:02:24,350
So earlier we passed it to the slice method.

35
00:02:24,350 --> 00:02:26,240
So let's look at the match method.

36
00:02:26,840 --> 00:02:32,360
And as I mentioned, there are three methods within match which we are going to implement and we are

37
00:02:32,360 --> 00:02:38,780
going to use three examples scenarios to implement those methods so that we can better understand them.

38
00:02:39,050 --> 00:02:44,960
So let's look at the three queries, example queries that we have and each of the operations that we

39
00:02:44,960 --> 00:02:48,260
are going to implement will implement one of these queries.

40
00:02:48,980 --> 00:02:56,510
So the first query is, is there at least one highly rated book among the list of input books, which

41
00:02:56,510 --> 00:03:02,510
is inexpensive and highly rated, implies the rating has to be at least 4.8.

42
00:03:02,990 --> 00:03:07,760
And when we say inexpensive, it should be less than or equal to 50 bucks.

43
00:03:08,960 --> 00:03:12,740
So we are looking for inexpensive but highly rated book.

44
00:03:13,010 --> 00:03:18,620
And if at least one of the stream elements matches this criteria, then we have to return it.

45
00:03:18,620 --> 00:03:19,160
True.

46
00:03:19,610 --> 00:03:21,350
So that's the thing we have.

47
00:03:21,350 --> 00:03:23,480
So for that, we need any match.

48
00:03:23,480 --> 00:03:26,450
So what we are going to do is we have the books list.

49
00:03:27,590 --> 00:03:29,510
So we need to invoke the Street method.

50
00:03:30,710 --> 00:03:32,000
To start our pipeline.

51
00:03:34,490 --> 00:03:40,490
Then we are going to invoke this any match method which takes a predicate.

52
00:03:40,490 --> 00:03:43,580
And to the predicate we are going to pass our criteria.

53
00:03:47,190 --> 00:03:48,780
So let's give our lambda.

54
00:03:49,930 --> 00:03:52,660
First, the rating has to be greater than or equal to 4.8.

55
00:03:59,050 --> 00:04:02,500
And the price has to be less than or equal to 50.

56
00:04:09,610 --> 00:04:11,650
Let's assign it to a boolean value.

57
00:04:14,560 --> 00:04:15,970
Let's go ahead and print this.

58
00:04:23,360 --> 00:04:23,780
Okay.

59
00:04:23,780 --> 00:04:25,820
So let's go ahead and run this.

60
00:04:26,240 --> 00:04:31,180
And it returns a true value because there is at least one of them which is matching that.

61
00:04:31,190 --> 00:04:36,740
So as soon as that condition is met, as soon as that stream element matches this particular condition,

62
00:04:37,040 --> 00:04:41,360
then it returns a true and none of the subsequent elements are processed.

63
00:04:41,360 --> 00:04:43,510
So that's the short circuit ness.

64
00:04:44,060 --> 00:04:45,230
Now, let's look at the second one.

65
00:04:45,230 --> 00:04:50,180
It says, Do all the books have a rating greater than or equal to 4.8?

66
00:04:50,210 --> 00:04:56,750
So we have this list of books and we're asking if all of the books are highly rated books, and for

67
00:04:56,750 --> 00:04:58,280
that we can use all match.

68
00:04:59,210 --> 00:05:00,890
So let's just take this.

69
00:05:02,780 --> 00:05:03,530
Take this.

70
00:05:09,630 --> 00:05:12,720
And let's assign to a new variable called All Match.

71
00:05:22,230 --> 00:05:23,910
So let's print this.

72
00:05:31,630 --> 00:05:31,790
Okay.

73
00:05:31,980 --> 00:05:33,570
So let's go ahead and run it.

74
00:05:34,680 --> 00:05:41,390
So it returns a false because there are certain books which have different rating, lower rating.

75
00:05:41,400 --> 00:05:42,150
Here we are.

76
00:05:42,150 --> 00:05:44,490
So there are certain books which have lower rating.

77
00:05:44,760 --> 00:05:46,710
So this condition would fail.

78
00:05:47,250 --> 00:05:54,330
So we are saying if all of the books the condition is if all of the books meets this particular criteria,

79
00:05:54,330 --> 00:05:55,470
then we have to return it.

80
00:05:55,470 --> 00:05:55,920
True.

81
00:05:56,700 --> 00:05:57,750
So that's not the case.

82
00:05:57,780 --> 00:06:03,720
Now here there's a third one is check if none of the books have bad rating.

83
00:06:04,470 --> 00:06:04,950
Okay.

84
00:06:04,980 --> 00:06:11,010
So we have this list of books and what we want to know as if none of the books have bad rating.

85
00:06:11,010 --> 00:06:14,790
So all of the books should have a rating greater than or equal to 2.0.

86
00:06:15,210 --> 00:06:18,930
So for that, we can use another method called non match.

87
00:06:19,440 --> 00:06:21,150
So let me just take this.

88
00:06:52,590 --> 00:06:58,310
So if none of the books match this criteria, then it would be written.

89
00:06:58,320 --> 00:06:59,820
That's what this method does.

90
00:06:59,910 --> 00:07:07,650
But if at least one of the books has has a rating less than or equal to 2.0, then it would return a

91
00:07:07,650 --> 00:07:08,160
false.

92
00:07:09,590 --> 00:07:12,500
So none of the books should have this rating.

93
00:07:12,710 --> 00:07:14,930
All of them should be greater than 2.0.

94
00:07:15,200 --> 00:07:16,760
So that's what this condition is.

95
00:07:16,760 --> 00:07:20,030
So let's execute this and it returns it.

96
00:07:20,030 --> 00:07:20,440
True.

97
00:07:20,450 --> 00:07:26,570
And that's because all of the ratings that we have here are greater than 2.0.

98
00:07:28,160 --> 00:07:32,550
So that is about the three different methods that we have.

99
00:07:32,570 --> 00:07:33,890
So they are very simple.

100
00:07:34,130 --> 00:07:38,780
Now, just note that we can also express this in a different way.

101
00:07:39,020 --> 00:07:42,410
So instead of all match, we can also say.

102
00:07:49,050 --> 00:07:50,250
None match.

103
00:07:55,130 --> 00:07:56,650
You can also have it this way.

104
00:07:56,660 --> 00:08:05,720
So we are saying none of the input elements should have a rating less than 44.8, which means all of

105
00:08:05,720 --> 00:08:08,640
them should have a rating greater than or equal to 4.8.

106
00:08:08,660 --> 00:08:11,630
So it's just a different way of expressing it.

107
00:08:11,960 --> 00:08:16,700
But I think this is a little bit more clear when we say all match.

108
00:08:17,770 --> 00:08:23,370
Because here we are saying that do all the books have a rating greater than or equal to 4.8?

109
00:08:23,380 --> 00:08:27,760
And this is it translates it translates to this one.

110
00:08:27,900 --> 00:08:31,060
So it is much more simpler.

111
00:08:31,060 --> 00:08:34,750
This kind of expression is much more simpler, and you have greater clarity.

112
00:08:34,929 --> 00:08:37,000
So you can also express it this way.

113
00:08:37,240 --> 00:08:43,750
But whichever makes makes sense makes sense, whichever is clear, you can choose that function.

114
00:08:43,750 --> 00:08:44,860
Choose that method.

115
00:08:45,250 --> 00:08:47,050
Similarly, even here.

116
00:08:48,510 --> 00:08:49,860
We could do the same thing.

117
00:08:50,340 --> 00:08:52,770
We could say none of them should this.

118
00:08:52,770 --> 00:08:55,410
So we can also write it in this way.

119
00:09:02,420 --> 00:09:06,440
Does, the condition has to be greater than 2.0.

120
00:09:06,590 --> 00:09:12,590
So if all of them have a rating greater than 2.0, then it means that.

121
00:09:14,410 --> 00:09:16,480
None of the books have bad rating.

122
00:09:16,720 --> 00:09:20,380
So all of the books have a rating greater than or equal to 2.0.

123
00:09:20,410 --> 00:09:26,410
So once again, I think the first one is more it makes more sense, it's more clear.

124
00:09:26,740 --> 00:09:32,020
Or you can also say any match also can be used here with the same condition.

125
00:09:37,790 --> 00:09:45,470
So if you have any match, so if at least one of them has a value less than or equal to 2.0, then a

126
00:09:45,500 --> 00:09:47,030
true would be written.

127
00:09:47,690 --> 00:09:55,640
So even you can express it this way and in your if condition somewhere below you can write if not true

128
00:09:55,640 --> 00:09:56,960
or something like that.

129
00:09:58,170 --> 00:10:05,250
So if it does not match, it means that if all of them are not satisfying this condition, then a true

130
00:10:05,250 --> 00:10:06,060
would be written.

131
00:10:06,480 --> 00:10:13,230
So it is just you can express your query in any way, but you would want to express it in the clearest

132
00:10:13,230 --> 00:10:14,100
possible way.

133
00:10:14,220 --> 00:10:16,470
So you would pick a method.

134
00:10:17,680 --> 00:10:18,790
That is most clear.

135
00:10:18,790 --> 00:10:20,710
So that's that's what you should be doing.

136
00:10:21,100 --> 00:10:22,320
So that's about it.

137
00:10:22,330 --> 00:10:25,000
So those are the three matching operations.

138
00:10:25,000 --> 00:10:30,130
And in the subsequent lecture, we are going to look at finding operations and this code will be available

139
00:10:30,130 --> 00:10:31,510
in the resources section.

140
00:10:31,540 --> 00:10:33,070
Thank you and happy coding.

