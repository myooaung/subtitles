1
00:00:01,140 --> 00:00:01,900
Hi there.

2
00:00:01,920 --> 00:00:03,150
This is the De La Rue.

3
00:00:03,480 --> 00:00:06,720
We now have a good understanding of what an enemy is.

4
00:00:07,050 --> 00:00:13,860
The enemy we have seen so far is very basic and it just exports a few constants and in them may not

5
00:00:13,860 --> 00:00:19,320
be any more complex than that, but sometimes it can start its life that way as a simple collection

6
00:00:19,320 --> 00:00:22,140
of constants, and then it may evolve over time.

7
00:00:22,470 --> 00:00:27,900
In this lecture, we will see that an enum can also be associated with state and behavior.

8
00:00:29,890 --> 00:00:35,050
So in addition to constants, enemies can have instance variables for representing state.

9
00:00:36,020 --> 00:00:38,720
And they can also have methods to represent behavior.

10
00:00:40,250 --> 00:00:46,190
Enemies can also have a private constructor in order to associate state with enum constants.

11
00:00:47,560 --> 00:00:54,760
Note that the enum constructor cannot have public or protected access modifiers cannot be public as

12
00:00:54,760 --> 00:01:01,420
enum is non interchangeable and it cannot be protected because enum cannot be extended.

13
00:01:02,080 --> 00:01:07,690
You may recall that the class that the compiler generates for an enum is a final class.

14
00:01:09,440 --> 00:01:16,340
Now, if access modifier is left out, then by default it would be private and so it is not going to

15
00:01:16,340 --> 00:01:18,140
be default access level.

16
00:01:18,170 --> 00:01:21,320
Like in the case of a constructor in a regular class.

17
00:01:21,890 --> 00:01:28,250
Once again, the reason is Enum is not instantiate, even from a class within the same package.

18
00:01:28,760 --> 00:01:36,080
It must be private as it can be instantiated from only within the enum, and that would be for the enum

19
00:01:36,080 --> 00:01:36,920
constants.

20
00:01:37,280 --> 00:01:38,720
So keep that in mind.

21
00:01:40,570 --> 00:01:41,530
Here is our breakdown.

22
00:01:42,370 --> 00:01:46,080
It is now associated with state and behavior for state.

23
00:01:46,120 --> 00:01:54,010
We have this variable called min h to read and it represents the minimum age to read any book in a particular

24
00:01:54,010 --> 00:01:54,580
genre.

25
00:01:55,180 --> 00:01:56,980
So it is genre specific.

26
00:01:57,130 --> 00:02:03,070
So each genre, which is nothing but an enum constant, will have its own value for this variable.

27
00:02:03,280 --> 00:02:09,850
And for that reason we have a constructor for initializing the variable and each enum constant passes

28
00:02:09,850 --> 00:02:12,910
the corresponding value for initializing the variable.

29
00:02:13,620 --> 00:02:19,440
So the values to be passed are included in the parenthesis following each enum constant.

30
00:02:19,980 --> 00:02:26,430
To read a biography, you need to be at least 12 years and for horror, the minimum age is 15.

31
00:02:27,180 --> 00:02:32,910
We can see that this enum also has a method for returning the value of Min H to read.

32
00:02:33,360 --> 00:02:38,910
So if we invoke this method on the enum constant biography, it will return the value all.

33
00:02:39,850 --> 00:02:46,240
Now notice how we are using the private access modifier for the instance variable min h to read and

34
00:02:46,240 --> 00:02:48,310
public access modifier for the method.

35
00:02:48,790 --> 00:02:54,340
So just like in the case of regular classes, we are trying to minimize the accessibility to members

36
00:02:54,340 --> 00:02:55,360
of enemies.

37
00:02:57,580 --> 00:03:03,520
Another important thing to note here is that the enum constants must be the first things to be defined

38
00:03:03,520 --> 00:03:04,270
in the enum.

39
00:03:04,780 --> 00:03:07,540
Everything else in the enum must follow the constants.

40
00:03:08,080 --> 00:03:14,380
Also note that the sequence of enum constants are ending with the semicolon and this is not required

41
00:03:14,380 --> 00:03:16,600
if the enum has only constants.

42
00:03:17,050 --> 00:03:19,510
This was also mentioned in the previous demo.

43
00:03:20,200 --> 00:03:27,070
Note that typically in practice an enum may not be any more complex than this where we have enum with

44
00:03:27,070 --> 00:03:28,360
state end behavior.

45
00:03:30,380 --> 00:03:33,980
Not that enemies can define static numbers explicitly.

46
00:03:34,490 --> 00:03:41,510
In the previous demo, we already saw that it could include main method, which is static, and in addition

47
00:03:41,510 --> 00:03:45,950
to instance variables, items can also define static variables explicitly.

48
00:03:46,670 --> 00:03:53,210
So in addition to addressing the deficiencies in Enum pattern, this lecture highlights the fact that

49
00:03:53,240 --> 00:04:00,890
unlike simple compile time constants, enemies can also associate state and behavior with each constant,

50
00:04:01,700 --> 00:04:04,640
so that tells that idioms are more powerful.

51
00:04:05,240 --> 00:04:11,570
Let's now quickly head over to our editor and see book genre enum associated with state and behavior.

52
00:04:13,850 --> 00:04:14,690
Look, here we are.

53
00:04:14,720 --> 00:04:21,350
This is the book genre, and it has been extended in order to associate with state and behavior.

54
00:04:21,680 --> 00:04:25,880
So it's just the exact same code which we have seen, which we have seen in the slides.

55
00:04:26,210 --> 00:04:32,140
So here we have the state here and we are using this variable in order to capture the state.

56
00:04:32,150 --> 00:04:35,790
So its main is to read that is the minimum age to read.

57
00:04:35,810 --> 00:04:37,760
And this is a behavior.

58
00:04:37,760 --> 00:04:38,580
So it's a method.

59
00:04:38,600 --> 00:04:43,170
Get min h to read, which would just return this part to the value of this variable.

60
00:04:43,190 --> 00:04:48,950
And we also have a private constructor which is initializing the main H to read variable.

61
00:04:49,310 --> 00:04:54,290
And the values are being passed here so they are specific to each genre.

62
00:04:54,320 --> 00:04:58,610
So for biography, we are passing 12, and for horror we are passing 15.

63
00:04:59,090 --> 00:05:02,570
So the exact same code that we have seen in the slides.

64
00:05:03,020 --> 00:05:10,130
So we are associating state and behavior for each of the constants and within the main method it's just

65
00:05:10,130 --> 00:05:16,220
the same code that we have seen in the previous slide where we were iterating through the two enum constants

66
00:05:16,220 --> 00:05:20,240
and we were invoking different methods in the enum class.

67
00:05:20,270 --> 00:05:27,530
The only thing I added as this particular print statement where we are invoking the get min h to read.

68
00:05:27,800 --> 00:05:30,320
So this is the new method which we have added here.

69
00:05:30,320 --> 00:05:31,680
So we're just accessing that.

70
00:05:31,700 --> 00:05:33,920
So let me just go ahead and run this.

71
00:05:35,000 --> 00:05:37,970
And we don't have to go through this once again.

72
00:05:38,540 --> 00:05:40,760
And this is the minimum age to read.

73
00:05:41,030 --> 00:05:47,060
So when biography was the enum constant in the first iteration, it was printing 12, because that's

74
00:05:47,060 --> 00:05:48,650
what has been passed here.

75
00:05:48,880 --> 00:05:53,960
Well, and in the second iteration for harder, it is printing 15.

76
00:05:54,920 --> 00:05:55,810
So that's it.

77
00:05:55,820 --> 00:06:00,530
So an enum can also have state and behavior.

78
00:06:01,340 --> 00:06:02,600
And that's about it.

79
00:06:02,600 --> 00:06:07,280
And this code is also available in the resources section and thank you and happy coding.

