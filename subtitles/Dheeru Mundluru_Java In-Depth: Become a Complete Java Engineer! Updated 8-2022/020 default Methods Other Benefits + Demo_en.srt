1
00:00:02,120 --> 00:00:02,940
Hi there.

2
00:00:02,960 --> 00:00:04,220
This is the room on Uluru.

3
00:00:04,550 --> 00:00:09,410
Before moving on, let's look at a couple of other important benefits of default methods.

4
00:00:11,340 --> 00:00:15,990
We already to discuss the two that we see here, which are kind of the fundamental benefits.

5
00:00:16,260 --> 00:00:20,460
We know that the main purpose of default methods is interface evaluation.

6
00:00:21,240 --> 00:00:24,240
Just note that it has to be methods with implementation.

7
00:00:24,570 --> 00:00:27,720
That is, default methods cannot be abstract methods.

8
00:00:27,990 --> 00:00:32,520
And if they were abstract, then it means that subclasses must implement them.

9
00:00:33,030 --> 00:00:39,150
So that's the reason default methods have a method body and default methods are something that are really

10
00:00:39,150 --> 00:00:46,590
useful for API designers whose code is used outside of their immediate organization so they can use

11
00:00:46,590 --> 00:00:49,440
default methods to evolve their interfaces.

12
00:00:50,160 --> 00:00:55,890
We also know that default methods basically provide a default implementation of the interface method

13
00:00:55,980 --> 00:01:00,270
and subtypes can either use it for free or they can override it.

14
00:01:01,850 --> 00:01:05,090
Now third benefit says eliminate utility classes.

15
00:01:05,390 --> 00:01:10,280
And an example utility class is the collections class in the Java package.

16
00:01:11,060 --> 00:01:17,480
It includes very generic utility methods that operate on data structures, which are implementations

17
00:01:17,480 --> 00:01:20,630
of few interfaces from Java package.

18
00:01:21,370 --> 00:01:27,580
Most of the methods in this class have an interface as the method parameter type as recommended in item

19
00:01:27,580 --> 00:01:31,300
52 from affective Java, which we studied earlier.

20
00:01:31,960 --> 00:01:38,920
For example, there is a sort method which has list as a parameter, and list is an interface in Java

21
00:01:39,400 --> 00:01:40,000
package.

22
00:01:40,720 --> 00:01:46,930
So this method sort can accept list implementations like array list and what sort the elements of the

23
00:01:46,930 --> 00:01:48,550
list in ascending order.

24
00:01:49,150 --> 00:01:52,990
For example, if the elements are integers, then they are sorted in ascending order.

25
00:01:53,560 --> 00:01:59,230
Now, with the introduction of default methods, instead of having this sort method in a separate utility

26
00:01:59,230 --> 00:02:05,650
class like the collections class, it can be included as a default method in the list interface itself.

27
00:02:06,310 --> 00:02:11,920
This way we can simply invoke the source method on the list object itself as shown here.

28
00:02:12,310 --> 00:02:15,130
That would be a much more elegant implementation.

29
00:02:15,820 --> 00:02:22,720
In fact, with Java eight list interface actually includes a default sort method and the source method

30
00:02:22,720 --> 00:02:28,000
in the collections class simply delegates to the default version in the list interface.

31
00:02:28,510 --> 00:02:32,590
Let's actually look at the source code of the source method in the collections class.

32
00:02:35,240 --> 00:02:40,250
Here we are in the Grip Code website and we are looking at the source code of the collections class,

33
00:02:40,250 --> 00:02:41,660
which is the utility class.

34
00:02:42,020 --> 00:02:46,280
And we are specifically looking at the source code in the Java eight package.

35
00:02:46,670 --> 00:02:48,950
And here is the method sought.

36
00:02:49,220 --> 00:02:56,390
It has a single parameter list and the parameter type is list, which is basically an interface in the

37
00:02:56,390 --> 00:02:57,770
Java package.

38
00:02:58,130 --> 00:03:05,210
So this method can be invoked with any of the list implementations like an array list or a link list.

39
00:03:05,420 --> 00:03:09,990
And you can just ignore all this greater than symbols on the less than symbols.

40
00:03:10,010 --> 00:03:14,750
They are related to generics, which will be discussed later and within the method body.

41
00:03:14,840 --> 00:03:21,830
We are simply delegating to this method called sort, which is the default method defined in the list

42
00:03:21,830 --> 00:03:22,700
interface.

43
00:03:23,030 --> 00:03:25,010
You can also ignore this null argument.

44
00:03:25,010 --> 00:03:26,480
It's not relevant here.

45
00:03:26,990 --> 00:03:30,110
So from Java eight onwards this delegation is happening.

46
00:03:30,500 --> 00:03:39,110
So even we can use this method directly, or we can also invoke this utility method in order to sort.

47
00:03:39,470 --> 00:03:42,980
But it would be much more elegant to directly invoke this.

48
00:03:43,550 --> 00:03:44,750
So that's about it.

49
00:03:44,750 --> 00:03:45,980
Just wanted to show that.

50
00:03:45,980 --> 00:03:47,240
And back to the slide.

51
00:03:49,420 --> 00:03:56,590
So basically by defining such default methods in the interface itself, we can eliminate the need for

52
00:03:56,590 --> 00:03:59,470
having such methods in a separate utility class.

53
00:03:59,860 --> 00:04:01,390
So that's the third benefit.

54
00:04:02,930 --> 00:04:05,930
Fourth benefit is related to functional interface.

55
00:04:06,410 --> 00:04:11,930
A functional interface is simply an interface with exactly one abstract method.

56
00:04:12,470 --> 00:04:14,510
So it's another type of interface.

57
00:04:14,540 --> 00:04:19,700
And we already looked at marker interfaces which do not declare any methods at all.

58
00:04:20,149 --> 00:04:26,390
And we also have the regular interfaces that can declare one or more methods and functional interfaces

59
00:04:26,390 --> 00:04:28,310
have exactly one abstract method.

60
00:04:29,150 --> 00:04:34,490
We will look at functional interfaces and nested classes as well as when discussing lambda expressions,

61
00:04:34,490 --> 00:04:36,620
which are also introduced in Java eight.

62
00:04:36,980 --> 00:04:42,800
But let's look at a simple demo involving a functional interface and a lambda expression, and we will

63
00:04:42,800 --> 00:04:48,590
see how a functional interface remains as a functional interface, even after adding a default method.

64
00:04:51,000 --> 00:04:51,190
Okay.

65
00:04:51,240 --> 00:04:56,640
Here we have a functional interface and it has also been named as functional interface itself.

66
00:04:57,540 --> 00:05:03,930
So it has only one abstract method called test and this one is commented out and we will look at that

67
00:05:03,930 --> 00:05:04,500
later.

68
00:05:04,710 --> 00:05:11,070
Now let's assume that I work for a company and I have designed an API and this interface is part of

69
00:05:11,070 --> 00:05:12,180
my API.

70
00:05:12,720 --> 00:05:14,820
So I'm going to first compile this.

71
00:05:18,490 --> 00:05:20,320
So it got compiled.

72
00:05:20,530 --> 00:05:27,250
And let's say I give this particular API, which includes this particular functional interface to a

73
00:05:27,250 --> 00:05:29,710
client, and let's say this is the client here.

74
00:05:30,340 --> 00:05:32,380
So the client is a different entity.

75
00:05:32,770 --> 00:05:39,820
So this is the client, and the client will actually write this kind of method, let's call it as Lambda

76
00:05:39,820 --> 00:05:43,210
Test, because we are going to use lambda here, lambda expression.

77
00:05:43,960 --> 00:05:50,380
So the client is has this method and the input parameter is F is the functional interface.

78
00:05:50,710 --> 00:05:53,950
It's the same type here, it's the functional interface.

79
00:05:53,950 --> 00:05:59,740
So the data type of this particular parameter method parameter is the functional interface.

80
00:05:59,920 --> 00:06:04,040
And the functional interface has this method abstract method test.

81
00:06:04,060 --> 00:06:08,020
So this particular method is actually invoking test.

82
00:06:08,320 --> 00:06:14,110
So this method has to be passed an instance of functional interface.

83
00:06:14,440 --> 00:06:19,420
And the way this client is doing it is he's creating an instance of this class.

84
00:06:19,420 --> 00:06:25,360
The name of the class is Test Client and is invoking the method lambda test and this passing lambda

85
00:06:25,360 --> 00:06:25,870
expression.

86
00:06:25,870 --> 00:06:30,370
So this is a lambda expression and we will look at lambda expressions later.

87
00:06:30,790 --> 00:06:38,650
But essentially this is an implementation for the test method within the functional interface.

88
00:06:38,980 --> 00:06:41,530
So this is considered as the implementation for that.

89
00:06:42,160 --> 00:06:48,430
And all it is doing is it is simply printing the text Java in-depth, which means that the test method

90
00:06:48,430 --> 00:06:50,650
is actually printing this message.

91
00:06:51,250 --> 00:06:57,040
So this lambda expression is basically an implementation of the test method.

92
00:06:57,310 --> 00:07:01,660
So let's go ahead and let's also compile and run this.

93
00:07:05,440 --> 00:07:07,510
So at Prince Java, Indep.

94
00:07:08,170 --> 00:07:13,450
So it is nice and good and the owner of this particular class is also happy.

95
00:07:13,960 --> 00:07:18,180
But now, let's say after an year or so, I want to introduce a new method.

96
00:07:18,190 --> 00:07:19,720
So I create this.

97
00:07:21,180 --> 00:07:22,770
It's another abstract method.

98
00:07:23,190 --> 00:07:25,680
Now the test client is this.

99
00:07:26,990 --> 00:07:32,000
So the test client, also the owner of this class, also will download the latest version of the API

100
00:07:32,090 --> 00:07:37,280
and he or she wants to compile this, compile the class once again.

101
00:07:39,450 --> 00:07:41,970
When they compile it, it's not going to work.

102
00:07:42,120 --> 00:07:47,040
And the reason for this, it says incompatible types at line 29.

103
00:07:47,310 --> 00:07:55,060
So here Lambda Expression would work with only a functional interface because this is some this is a

104
00:07:55,080 --> 00:08:00,180
this is the methods body the body of a particular method that needs to be invoked.

105
00:08:00,180 --> 00:08:02,760
But now the interface has two methods.

106
00:08:02,760 --> 00:08:05,280
It's no longer a functional interface.

107
00:08:05,610 --> 00:08:14,250
And so the compiler is, it is not sure which of the two methods this particular function, this particular

108
00:08:14,250 --> 00:08:21,090
function that is represented by a lambda expression, which of the two functions this lambda expression

109
00:08:21,090 --> 00:08:24,150
would represent earlier when we had only the test method.

110
00:08:24,330 --> 00:08:30,060
This would act as the implementation for the test method, but now it has two methods and the compiler

111
00:08:30,060 --> 00:08:31,440
is confused.

112
00:08:32,309 --> 00:08:39,000
Confused as to which of the two methods this this particular lambda expression would represent as an

113
00:08:39,000 --> 00:08:39,960
implementation.

114
00:08:40,710 --> 00:08:41,850
So that's the reason.

115
00:08:42,990 --> 00:08:44,169
This is not going to work.

116
00:08:44,190 --> 00:08:49,960
So what we can do is with Java eight, we can use a default method, right?

117
00:08:49,980 --> 00:08:58,470
So if I make this a default and we know the default method has a body, it has some body empty body

118
00:08:58,470 --> 00:08:59,220
in this case.

119
00:08:59,820 --> 00:09:02,610
So with Java eight, this will not be an issue.

120
00:09:02,880 --> 00:09:08,310
But before Java eight, the client would definitely be furious that it has been changed, that the that

121
00:09:08,310 --> 00:09:09,990
the API has been changed.

122
00:09:10,260 --> 00:09:14,090
But and it was, it was a pain process before Java eight.

123
00:09:14,100 --> 00:09:17,330
But now as an API designer, I'm much more relieved.

124
00:09:17,340 --> 00:09:20,490
I would be much more relieved because of the default methods.

125
00:09:20,520 --> 00:09:25,230
So now if I add this default method, let me just recompile it.

126
00:09:25,860 --> 00:09:27,870
Recompile just the functional interface.

127
00:09:29,220 --> 00:09:30,190
It compiles fine.

128
00:09:30,220 --> 00:09:35,730
And now let's say the client has downloaded the latest version of the API, which has this interface.

129
00:09:36,900 --> 00:09:38,460
No, it compiles fine.

130
00:09:38,970 --> 00:09:42,170
So that's the interface interface evolution.

131
00:09:42,180 --> 00:09:47,490
And in this case, the functional interface remains as a functional interface, even after adding a

132
00:09:47,490 --> 00:09:49,830
new method, which is a default method.

133
00:09:50,040 --> 00:09:55,980
So a default method is allowing us to retain the functional interface capability.

134
00:09:56,370 --> 00:09:58,800
So the functional interface will remain as functional interface.

135
00:09:59,370 --> 00:10:00,440
So that's about it.

136
00:10:00,450 --> 00:10:06,360
So we looked at a couple of more interesting benefits of default methods.

137
00:10:06,780 --> 00:10:07,920
And that's about it.

138
00:10:07,920 --> 00:10:08,700
And thank you.

