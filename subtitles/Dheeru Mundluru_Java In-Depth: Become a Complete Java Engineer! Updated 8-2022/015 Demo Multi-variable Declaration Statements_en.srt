1
00:00:02,060 --> 00:00:03,020
Hello there.

2
00:00:03,050 --> 00:00:04,130
This is the Rue.

3
00:00:04,160 --> 00:00:04,970
And welcome back.

4
00:00:05,360 --> 00:00:11,840
So far, we have seen that each of our declaration statements were declaring a single variable.

5
00:00:12,500 --> 00:00:19,490
Now, in Java, it's also perfectly valid to have a declaration statement declaring multiple variables.

6
00:00:19,880 --> 00:00:23,030
Given that all of those variables are of the same type.

7
00:00:23,240 --> 00:00:27,650
So you can declare and you can also initialize the variables in the same statement.

8
00:00:28,100 --> 00:00:30,200
So let's go ahead and see how that's possible.

9
00:00:30,230 --> 00:00:35,180
So here is the student class, and we have these two instance variables, tuition fees and international

10
00:00:35,180 --> 00:00:35,720
fees.

11
00:00:35,990 --> 00:00:40,850
So tuition fees is $12,000 and international fees is $5,000.

12
00:00:41,330 --> 00:00:43,640
So those are two declaration statements.

13
00:00:43,670 --> 00:00:46,970
Now let's just declare them using a single statement.

14
00:00:46,970 --> 00:00:48,500
So I have removed that.

15
00:00:49,260 --> 00:00:51,900
So let's just move it here.

16
00:00:51,900 --> 00:00:57,780
So you'll just have a comma here and the new variable, another variable.

17
00:00:58,260 --> 00:00:59,100
So that's it.

18
00:00:59,100 --> 00:01:01,410
So let's just compile this.

19
00:01:01,830 --> 00:01:04,080
So I'm here in the basics directory.

20
00:01:07,500 --> 00:01:08,700
So compiles fine.

21
00:01:08,880 --> 00:01:10,770
And it is printing the values.

22
00:01:11,130 --> 00:01:15,780
So the student is a local student, so his fees is 12,000.

23
00:01:15,810 --> 00:01:20,820
The final fees, whereas the last two students we know our international students.

24
00:01:21,150 --> 00:01:23,400
So the tuition fees is 17,000.

25
00:01:23,640 --> 00:01:27,600
So the logic is here and the compute method of the student is international.

26
00:01:27,630 --> 00:01:33,780
We are updating the tuition fees, which would be the tuition fees for the local student, plus the

27
00:01:33,810 --> 00:01:35,490
additional international fees.

28
00:01:36,330 --> 00:01:39,780
So this is fine, but you cannot do this.

29
00:01:40,350 --> 00:01:42,030
So let's compile and see.

30
00:01:46,160 --> 00:01:47,960
So it gives a compilation error.

31
00:01:47,960 --> 00:01:49,700
So this is not possible.

32
00:01:49,850 --> 00:01:56,060
So you can specify the data type only once it needs to be specified here.

33
00:01:56,060 --> 00:01:59,720
So you cannot have you cannot specify it multiple times.

34
00:01:59,720 --> 00:02:04,730
Like for each variable, it means that you can also you cannot also do this.

35
00:02:05,330 --> 00:02:06,920
So this is also not possible.

36
00:02:07,220 --> 00:02:12,590
So all the variables will be of the same type and you can only specify the type once.

37
00:02:13,710 --> 00:02:15,840
Now, let me just remove this.

38
00:02:18,180 --> 00:02:20,910
So keep in mind that these are instance variables.

39
00:02:21,300 --> 00:02:23,820
So can you guess what?

40
00:02:24,000 --> 00:02:25,650
What would be the tuition fees?

41
00:02:27,420 --> 00:02:28,380
Compiles fine.

42
00:02:29,920 --> 00:02:33,940
So the tuition fees will be initialized to zero.

43
00:02:34,090 --> 00:02:34,480
Right.

44
00:02:34,510 --> 00:02:36,300
Because we are not initializing it.

45
00:02:36,310 --> 00:02:40,930
And we know that, for instance, variables are four or four static variables.

46
00:02:41,140 --> 00:02:44,740
They would get the default value of the data type.

47
00:02:45,070 --> 00:02:48,930
The data type is double here, so they would get a value of zero.

48
00:02:48,940 --> 00:02:56,170
So if we see the output, tuition fees is zero for John, who is a local student and it is 5000 for

49
00:02:56,170 --> 00:02:59,080
Raj and Anita, who are international students.

50
00:02:59,440 --> 00:02:59,920
Right.

51
00:03:00,310 --> 00:03:04,090
So the tuition fees is computed here if they are international.

52
00:03:04,510 --> 00:03:06,130
Now, let's move these.

53
00:03:08,350 --> 00:03:12,580
The exact statement into the compute method.

54
00:03:12,850 --> 00:03:16,000
So they are now local variables and.

55
00:03:16,910 --> 00:03:18,130
Let's see what happens.

56
00:03:18,140 --> 00:03:20,180
I think you can guess it.

57
00:03:22,460 --> 00:03:26,750
So it says variable tuition fees might not have been initialized.

58
00:03:27,230 --> 00:03:31,790
So here we have this statement where we are computing the tuition fees.

59
00:03:31,820 --> 00:03:36,980
It says that the variable tuition fees might not have been initialized and that's because we did not

60
00:03:36,980 --> 00:03:38,330
initialize it here.

61
00:03:38,330 --> 00:03:40,100
And it's a local variable.

62
00:03:40,100 --> 00:03:43,700
And we know that local variables do not get default values.

63
00:03:43,940 --> 00:03:47,630
So before they are used, they need to be initialized.

64
00:03:47,630 --> 00:03:47,960
Right.

65
00:03:47,960 --> 00:03:50,660
So we need to do something like this.

66
00:03:52,380 --> 00:03:52,680
Right.

67
00:03:52,680 --> 00:03:54,000
So we can do this.

68
00:03:54,270 --> 00:03:56,070
So let me compile it.

69
00:03:56,980 --> 00:04:00,400
So we have already seen that it compiles fine.

70
00:04:03,390 --> 00:04:09,030
So essentially, if you have this and if it if there are local variables, then they will not get default

71
00:04:09,030 --> 00:04:09,770
values.

72
00:04:09,780 --> 00:04:15,990
So we either have to initialize it or we need to re initialize before they are used for the first time.

73
00:04:16,410 --> 00:04:23,370
But if they are instance or static variables, they do get the default value of the data type.

74
00:04:24,120 --> 00:04:25,230
So that's with that.

75
00:04:25,260 --> 00:04:27,950
Now, let me show you one thing here.

76
00:04:27,960 --> 00:04:29,820
So this is tuition fees.

77
00:04:30,000 --> 00:04:31,920
Let's initialize it to 100.

78
00:04:33,070 --> 00:04:35,800
And here, this doesn't make sense.

79
00:04:35,800 --> 00:04:37,030
But let me just show it to you.

80
00:04:37,060 --> 00:04:40,690
Here we are saying tuition fees plus 5000.

81
00:04:41,430 --> 00:04:48,420
So here what happens is the tuition fees is initialized to 100 and here in the international fees.

82
00:04:48,420 --> 00:04:52,130
So that 100 is here, it's assigned here.

83
00:04:52,140 --> 00:04:57,630
So international fees will be initialized, will be initialized as $5,100.

84
00:04:59,190 --> 00:05:03,240
And of course, the tuition fees will be re computed here if it's an international student.

85
00:05:03,450 --> 00:05:11,790
So essentially here, once we initialize it, the scope of this variable starts from here and it also

86
00:05:11,790 --> 00:05:12,780
applies here.

87
00:05:13,500 --> 00:05:19,170
So if there are any other variables which are using that variable, then it is valid.

88
00:05:19,170 --> 00:05:25,740
And those variables will get the the value, the current value or the value of that variable.

89
00:05:26,580 --> 00:05:34,410
So the scope starts here and it extends to any declarations towards the right of this variable and it

90
00:05:34,410 --> 00:05:38,640
also extends to the end of the class because it's an instance variable.

91
00:05:39,180 --> 00:05:42,000
So let me just compile and execute it.

92
00:05:45,820 --> 00:05:49,680
So as you can see, the tuition fees is 100 for John because that's what it is.

93
00:05:49,690 --> 00:05:54,570
We are initializing it to 100 and the international fees will be 5100.

94
00:05:54,580 --> 00:05:55,090
Right.

95
00:05:55,390 --> 00:06:02,020
So for both, John, for both Raj and Anita, it's going to be 5200.

96
00:06:02,050 --> 00:06:06,100
So the international fees is 5100 as we are competing here.

97
00:06:06,670 --> 00:06:12,490
And since they both are international students, we are adding the tuition fees once again here, the

98
00:06:12,490 --> 00:06:22,360
100 and the final value of tuition fees is going to be 5200 here and 5200 for the last student also.

99
00:06:24,410 --> 00:06:29,350
So that is how you can re-use the value of the tuition fees.

100
00:06:29,360 --> 00:06:30,650
And finally.

101
00:06:32,290 --> 00:06:34,510
Let's say this is $100.

102
00:06:34,930 --> 00:06:37,100
This is the final thing that I'm demonstrating.

103
00:06:37,120 --> 00:06:40,270
And then let's say we have it like this double.

104
00:06:45,500 --> 00:06:49,640
So here we have tuition fees here, I'm saying.

105
00:06:50,600 --> 00:06:51,680
So we have it like this.

106
00:06:51,680 --> 00:06:56,840
So we have double international fees is equal to tuition fees is equal to 5000.

107
00:06:57,290 --> 00:07:03,150
So here what is happening is tuition fees is initially $100.

108
00:07:03,170 --> 00:07:11,120
Then it is getting re initialized to 5000 here and that 5000 is getting assigned to international fees.

109
00:07:11,780 --> 00:07:13,430
So international fees will be 5000.

110
00:07:13,430 --> 00:07:15,380
Tuition fees will also be 5000.

111
00:07:17,070 --> 00:07:20,610
So let's compile and look at the output.

112
00:07:24,690 --> 00:07:28,830
So the tuition fees is 5000, which is what we have here.

113
00:07:29,190 --> 00:07:29,490
So.

114
00:07:29,700 --> 00:07:31,830
So that's for John, who is the local student.

115
00:07:32,310 --> 00:07:39,180
But the international fees is also 5000 because we are assigning the value of tuition fees to international

116
00:07:39,180 --> 00:07:39,580
fees.

117
00:07:39,600 --> 00:07:41,490
So both of these are 5000.

118
00:07:41,670 --> 00:07:44,730
So the final tuition fees will be 10,000 for.

119
00:07:44,760 --> 00:07:46,290
If it's an international student.

120
00:07:46,290 --> 00:07:48,900
And that's what we see here for the last two students.

121
00:07:49,800 --> 00:07:52,800
So essentially, we are re initializing tuition fees.

122
00:07:52,830 --> 00:08:00,120
Now, you may recall that at the class level right here, both static as well as instance, variables

123
00:08:00,120 --> 00:08:01,560
cannot be initialized.

124
00:08:01,560 --> 00:08:04,350
For instance, we cannot have something like this.

125
00:08:04,890 --> 00:08:05,360
Right.

126
00:08:05,370 --> 00:08:06,150
We know that.

127
00:08:06,150 --> 00:08:07,320
We have seen that.

128
00:08:07,650 --> 00:08:09,540
But this is possible.

129
00:08:09,540 --> 00:08:14,010
If you have it as part of a declaration statement, then you can re initialize it.

130
00:08:14,040 --> 00:08:21,540
It's just that you cannot do this, so you cannot have an assignment statement by itself at the class

131
00:08:21,540 --> 00:08:27,930
level, but you can still re initialize the variable in this particular way.

132
00:08:28,290 --> 00:08:32,070
Perhaps that is possible because this is still a declaration statement.

133
00:08:33,340 --> 00:08:36,760
So that's one sort of an edge case.

134
00:08:36,789 --> 00:08:40,299
Now, if we remove this, then it's not going to compile.

135
00:08:44,020 --> 00:08:50,700
You see, it says cannot find symbol tuition fees, which means that it should have been declared earlier.

136
00:08:50,710 --> 00:08:57,250
And so we need to have this statement and then we can re initialize it.

137
00:08:58,000 --> 00:08:59,730
So that's one thing.

138
00:08:59,740 --> 00:09:00,670
So that's the thing.

139
00:09:00,670 --> 00:09:07,990
So we have seen that we can have multiple variables declared within the same declaration statement given

140
00:09:07,990 --> 00:09:12,760
that they are of the same type and you can only specify that type only once.

141
00:09:13,150 --> 00:09:14,770
So this is what you will have.

142
00:09:15,160 --> 00:09:16,030
Finally.

143
00:09:22,340 --> 00:09:24,350
So this is perfectly fine.

144
00:09:25,040 --> 00:09:28,190
So that's all there is to this lecture.

145
00:09:28,340 --> 00:09:28,910
Thank you.

146
00:09:28,910 --> 00:09:30,320
And I will see you in the next lecture.

