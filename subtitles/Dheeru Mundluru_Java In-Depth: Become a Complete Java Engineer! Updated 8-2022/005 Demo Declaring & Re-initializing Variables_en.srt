1
00:00:02,090 --> 00:00:03,000
Hello there.

2
00:00:03,020 --> 00:00:05,090
This is De La Rue and welcome back.

3
00:00:05,420 --> 00:00:10,940
So in this lecture, let's go ahead and create a new class and then we will declare a few variables

4
00:00:10,940 --> 00:00:13,730
and we will also re initialize those variables.

5
00:00:14,210 --> 00:00:20,390
So we will declare the variables with both literals as well as expressions, and we will also re initialize

6
00:00:20,390 --> 00:00:21,320
those variables.

7
00:00:21,530 --> 00:00:23,750
So that's what we have seen in the previous lecture.

8
00:00:23,750 --> 00:00:25,760
And in this lecture we are going to test them out.

9
00:00:26,120 --> 00:00:29,450
So in this lecture we will create a new class called Student.

10
00:00:29,930 --> 00:00:35,150
And as we progress through this section, as we learn new things like the primitive variables and so

11
00:00:35,150 --> 00:00:38,600
on, we will also extend this particular class.

12
00:00:39,080 --> 00:00:42,500
So let's go ahead and create our student class.

13
00:00:43,070 --> 00:00:49,730
So we will have the keyword class followed by the class name, which is student, and the body of the

14
00:00:50,060 --> 00:00:51,410
student class.

15
00:00:51,740 --> 00:00:54,410
It starts and ends with a brace.

16
00:00:54,800 --> 00:00:56,870
Here's the opening brace and the ending brace.

17
00:00:56,900 --> 00:01:03,200
Now, the normal programming convention is to have the brace right after the the class name.

18
00:01:04,670 --> 00:01:07,160
That's what most of the developers do.

19
00:01:07,370 --> 00:01:12,920
Now, some developers might have the opening brace here, but that's not very common.

20
00:01:13,190 --> 00:01:16,580
So it's better to follow what most programmers are doing.

21
00:01:16,580 --> 00:01:18,110
So let's have it here.

22
00:01:18,320 --> 00:01:20,630
Thus, let's also save it.

23
00:01:21,670 --> 00:01:27,910
So we have our directory structure, Java, in-depth and some directories within there.

24
00:01:27,910 --> 00:01:32,420
So let's go ahead and create here it is, Java In-Depth s RC.

25
00:01:32,440 --> 00:01:37,570
Com Semantic Square Basics and we already have a couple of classes here.

26
00:01:37,570 --> 00:01:40,810
Let's create our student dot java here.

27
00:01:41,800 --> 00:01:45,820
So that's the student class and let's create a new variable called ID.

28
00:01:46,030 --> 00:01:48,790
So let's have four spaces here.

29
00:01:48,790 --> 00:01:49,930
Two, three, four.

30
00:01:50,410 --> 00:01:53,320
So that's the indentation it's called as an indentation.

31
00:01:53,770 --> 00:02:01,450
So later we will also talk about coding conventions and there we will also discuss about indentation.

32
00:02:01,630 --> 00:02:06,490
So when we are writing our statements, they would have certain indentation like in this case.

33
00:02:06,490 --> 00:02:08,500
So here we will have our variable.

34
00:02:08,770 --> 00:02:14,590
So we say that they are indented by four spaces and they help in readability of the code.

35
00:02:14,590 --> 00:02:19,300
So four spaces is also a normal coding convention.

36
00:02:19,300 --> 00:02:25,840
Mostly developers use either either four spaces or one tab, whichever you prefer.

37
00:02:26,230 --> 00:02:31,120
So just wanted to highlight that, although we will discuss about the indentation later on.

38
00:02:31,120 --> 00:02:37,920
So just wanted to introduce right here itself so that you can also start using you can also start intending

39
00:02:37,990 --> 00:02:39,610
with four spaces or one tab.

40
00:02:40,180 --> 00:02:43,930
So let's create our variable called ID, which is of type end.

41
00:02:44,290 --> 00:02:47,590
And first let's look at literal initialization.

42
00:02:47,890 --> 00:02:50,410
So let's initialize it with 1000.

43
00:02:50,980 --> 00:02:54,100
And let's also write a simple method called compute.

44
00:02:54,100 --> 00:02:55,170
So avoid.

45
00:02:55,180 --> 00:02:59,830
The name of the method is compute and all it does is it prints the variable.

46
00:03:00,010 --> 00:03:04,690
So the compute method also has a body and then opening based on the closing base.

47
00:03:04,690 --> 00:03:07,720
And let's also give four spaces here.

48
00:03:08,980 --> 00:03:10,240
One, two, three, four.

49
00:03:10,360 --> 00:03:11,320
And let's spread.

50
00:03:13,660 --> 00:03:15,520
And let's write our main method.

51
00:03:17,050 --> 00:03:18,460
Otherwise we cannot run this.

52
00:03:20,620 --> 00:03:22,780
And the main also has its own body.

53
00:03:22,930 --> 00:03:30,910
And first thing that we'll do is we'll create an object of the student class to three four student as

54
00:03:30,910 --> 00:03:32,320
that's the name of the variable.

55
00:03:32,860 --> 00:03:35,470
New student That's it.

56
00:03:35,590 --> 00:03:39,820
So let's go ahead and compile and run it.

57
00:03:42,580 --> 00:03:43,750
So we compile it.

58
00:03:45,010 --> 00:03:45,160
Okay.

59
00:03:45,280 --> 00:03:46,930
Java and student.

60
00:03:47,260 --> 00:03:48,760
This is what have.

61
00:03:49,640 --> 00:03:51,650
So when we run it, it's not printing this.

62
00:03:51,650 --> 00:03:54,830
And that's because a student object is created.

63
00:03:54,830 --> 00:03:58,910
But we still did not invoke this method called compute.

64
00:03:59,300 --> 00:04:00,950
It's called a method invocation.

65
00:04:00,950 --> 00:04:03,110
And we need to invoke it or call it.

66
00:04:03,230 --> 00:04:10,730
And we have seen that when discussing the class an object for invoking a method, we will say the variable

67
00:04:10,730 --> 00:04:15,350
as dot, dot, dot operator and we will invoke the compute method.

68
00:04:16,010 --> 00:04:17,450
Now it's going to print.

69
00:04:18,320 --> 00:04:21,740
So since we added a new statement, we need to recompile it.

70
00:04:22,780 --> 00:04:26,740
And when we run it, Java space student, it's going to print.

71
00:04:28,600 --> 00:04:30,250
So that's the literal.

72
00:04:30,280 --> 00:04:37,450
Now let's, let's create a variable and it's initialized with an expression which gets evaluated to

73
00:04:37,450 --> 00:04:38,440
a single value.

74
00:04:38,560 --> 00:04:46,120
So let's create a new variable called next ID and let's say ID plus one.

75
00:04:46,420 --> 00:04:49,180
So it will be one more than the ID value.

76
00:04:50,080 --> 00:04:51,310
And let's also print it.

77
00:04:51,310 --> 00:04:52,780
So let's copy this.

78
00:04:55,020 --> 00:04:56,190
And the sprint.

79
00:04:58,170 --> 00:04:58,530
Next.

80
00:04:59,370 --> 00:05:00,840
So this is an expression.

81
00:05:00,840 --> 00:05:07,530
So when the program is executing and when the control comes here to the statement, it will have the

82
00:05:07,530 --> 00:05:08,550
value chosen.

83
00:05:08,760 --> 00:05:11,070
So next it would become thousand and one.

84
00:05:11,940 --> 00:05:17,910
So let's recompile because we added a few statements and let's run it.

85
00:05:18,840 --> 00:05:21,480
So it prints 2000 and 2001.

86
00:05:21,810 --> 00:05:29,580
So when this object student object has been created at that instance, these two statements get executed.

87
00:05:29,580 --> 00:05:35,460
First ID will be initialized, 1000 and next ID will be computed as 2001.

88
00:05:36,030 --> 00:05:40,470
So ID will be replaced with the value 1000 and we get the value 2001.

89
00:05:40,650 --> 00:05:45,150
And when compute is executed, when this statement is is executed.

90
00:05:45,150 --> 00:05:51,300
So control goes into this method and prints the ID and then the last statement also executes our next

91
00:05:51,300 --> 00:05:52,260
ID gets printed.

92
00:05:53,970 --> 00:05:57,390
So that's how we get the values 2000 and 1001.

93
00:05:57,900 --> 00:06:02,460
Now, this here cannot be declared here.

94
00:06:03,500 --> 00:06:04,030
Okay.

95
00:06:04,100 --> 00:06:06,410
So let's see what the error message will be.

96
00:06:06,650 --> 00:06:10,410
So let's recompile Java two linked Java.

97
00:06:10,430 --> 00:06:12,800
It says illegal for word reference.

98
00:06:13,160 --> 00:06:17,540
So when we have this declaration statement, it is not yet declared.

99
00:06:18,170 --> 00:06:19,670
So which means that.

100
00:06:20,870 --> 00:06:24,230
The scope of ID, it's called, as the scope of variable.

101
00:06:24,260 --> 00:06:28,010
It starts here and it is for the entire class.

102
00:06:28,850 --> 00:06:29,720
So that's how it is.

103
00:06:29,720 --> 00:06:33,350
But we will be discussing the scope of the variables later on.

104
00:06:33,380 --> 00:06:39,590
So its scope will be starting from here to the end of the class and next it will be from here, from

105
00:06:39,590 --> 00:06:44,150
this point to the rest of the class, which means that they can be used anywhere in the class.

106
00:06:44,820 --> 00:06:47,370
So we said that the declaration statement.

107
00:06:48,150 --> 00:06:54,030
Can appear anywhere in the class, so let's just move them to compute method.

108
00:06:58,570 --> 00:07:00,760
So let's recompile it.

109
00:07:03,620 --> 00:07:04,540
And let's execute.

110
00:07:04,550 --> 00:07:07,250
So it is punting the 2000 and 2001.

111
00:07:07,490 --> 00:07:12,830
So when the object student is created at this instance, only ID value has been initialized.

112
00:07:13,070 --> 00:07:20,990
But when we invoke the method compute, then control comes here and next ID will be initialized with

113
00:07:20,990 --> 00:07:24,350
thousand one and then subsequently those values will be printed.

114
00:07:24,800 --> 00:07:28,850
Now we also said that in the declaration of the variable.

115
00:07:30,500 --> 00:07:32,690
The initialization is optional.

116
00:07:32,960 --> 00:07:35,420
You may recall that from the slides.

117
00:07:35,720 --> 00:07:38,330
So let's see what happens if that's the case.

118
00:07:38,810 --> 00:07:40,430
Let me clear up the screen.

119
00:07:41,090 --> 00:07:42,590
And here it is.

120
00:07:43,370 --> 00:07:44,360
Let me run it.

121
00:07:44,660 --> 00:07:49,040
It prints the value zero for ID and one for next ID.

122
00:07:49,370 --> 00:07:55,040
So if we are not initializing, then it is getting a default value of zero.

123
00:07:55,370 --> 00:07:59,150
And that's the case if the variable is off type end.

124
00:08:00,110 --> 00:08:07,010
So if the variable is off type end, it gets a default value and variables of other types might get

125
00:08:07,010 --> 00:08:08,540
some other value.

126
00:08:09,050 --> 00:08:12,650
So like we said that there are eight primitive types which we will discuss later.

127
00:08:12,830 --> 00:08:13,940
So that's the thing.

128
00:08:13,940 --> 00:08:15,770
It gets a default value of zero.

129
00:08:15,800 --> 00:08:19,340
Now let's see what happens if we have the variable here.

130
00:08:19,760 --> 00:08:22,130
It should also give us the same thing.

131
00:08:22,550 --> 00:08:24,110
So let's recompile.

132
00:08:25,610 --> 00:08:32,659
And it says variable ID might not have been initialized, but when we had it here, that was not an

133
00:08:32,659 --> 00:08:32,990
issue.

134
00:08:32,990 --> 00:08:39,710
But when once we moved it into the method, then it is given a compilation error and it says that in

135
00:08:39,710 --> 00:08:45,620
this statement next to it, that is the second statement ID might not have been initialized.

136
00:08:45,620 --> 00:08:47,210
So that's where it is complaining.

137
00:08:47,570 --> 00:08:54,500
So the thing is here, these variables that we declare within the method are called as local variables,

138
00:08:54,500 --> 00:08:58,190
and they do not get any default values.

139
00:08:58,460 --> 00:08:59,690
So just keep that in mind.

140
00:08:59,930 --> 00:09:05,870
So when we declared it here, it's called as an instance variable, but when we declare it in the method,

141
00:09:05,870 --> 00:09:12,710
it is called as local variable and we will discuss both of them once again later in one of the subsequent

142
00:09:12,710 --> 00:09:13,300
lectures.

143
00:09:13,310 --> 00:09:18,440
And there is also another type of variable called static variable, which is also declared here at the

144
00:09:18,440 --> 00:09:19,430
class level.

145
00:09:20,060 --> 00:09:24,500
And so like an instance variable, it will also get a default value.

146
00:09:24,500 --> 00:09:29,480
So both static and instance variables will be declared here at the class level, and they will get default

147
00:09:29,480 --> 00:09:33,150
values, but local variables will not get default values.

148
00:09:33,170 --> 00:09:34,760
And more on that later.

149
00:09:35,330 --> 00:09:42,890
So here, either we need to initialize it in the declaration statement or we can re initialize or we

150
00:09:42,890 --> 00:09:43,700
can do this.

151
00:09:43,700 --> 00:09:47,090
We can have an assignment statement and then it will be fine.

152
00:09:47,090 --> 00:09:48,770
So let's just recompile.

153
00:09:50,330 --> 00:09:51,470
And if you run it.

154
00:09:53,670 --> 00:09:54,570
It prints the value.

155
00:09:55,410 --> 00:09:56,700
That is fine.

156
00:09:57,520 --> 00:10:04,090
So before we use it, it needs to be initialized and it can be initialized in the declaration statement

157
00:10:04,090 --> 00:10:07,600
itself or it can also be initialized here.

158
00:10:09,040 --> 00:10:12,370
Now let's move this here.

159
00:10:13,390 --> 00:10:19,150
So the ID is zero and it is being re initialized on this method.

160
00:10:19,390 --> 00:10:24,210
Now it prints 2000 and 1001 because ID is initially zero.

161
00:10:24,220 --> 00:10:26,770
So when this statement is executing.

162
00:10:26,770 --> 00:10:31,270
So let's just recompile and re execute it here.

163
00:10:32,050 --> 00:10:36,000
So initially, even when the student object is created, it will be zero.

164
00:10:36,010 --> 00:10:42,530
But when we are invoking the compute method, the control comes here and ID will be re initialized to

165
00:10:42,530 --> 00:10:48,100
1000 and in the next statement, next ID is computed as 2001.

166
00:10:49,060 --> 00:10:52,390
So this is how we re initialize variables.

167
00:10:52,750 --> 00:10:59,710
Now you might also recall from the previous lecture that if we have it here, it's not going to work

168
00:10:59,800 --> 00:11:04,420
because assignment statements cannot appear at class level.

169
00:11:04,840 --> 00:11:09,760
They can only appear at methods or in other places called constructors, which we will discuss later.

170
00:11:09,760 --> 00:11:15,460
But here at the class level you can only have declaration statements, so you cannot have such assignment

171
00:11:15,460 --> 00:11:16,150
statements.

172
00:11:17,080 --> 00:11:18,580
So that's how it is in Java.

173
00:11:18,580 --> 00:11:22,510
So if we compile it, it says it gives an error.

174
00:11:22,870 --> 00:11:25,150
So essentially we cannot have them here.

175
00:11:26,240 --> 00:11:29,300
So let's move it back to here.

176
00:11:31,910 --> 00:11:35,300
Now let's initialize this to 2000.

177
00:11:35,660 --> 00:11:40,000
And how about we re initialize this to say D2?

178
00:11:40,640 --> 00:11:43,160
Now it should give us.

179
00:11:43,190 --> 00:11:45,290
Let's clear up the screen on.

180
00:11:46,700 --> 00:11:48,570
So it says incompatible types.

181
00:11:48,590 --> 00:11:53,470
String cannot be converted to and so ID is off type end.

182
00:11:53,480 --> 00:11:59,060
But then we are trying to initialize it with the string literal data and that's not going to work because

183
00:11:59,090 --> 00:12:01,640
Java is a statically type language.

184
00:12:01,880 --> 00:12:05,210
So you cannot do this and you cannot do that.

185
00:12:07,260 --> 00:12:08,190
Even here.

186
00:12:08,430 --> 00:12:10,440
So let's just try it.

187
00:12:15,370 --> 00:12:15,630
Okay.

188
00:12:15,670 --> 00:12:17,050
We get the same error.

189
00:12:17,050 --> 00:12:18,590
It says incompatible types.

190
00:12:18,610 --> 00:12:21,940
So it's got to be of the same type.

191
00:12:21,970 --> 00:12:26,410
So that's the static type checking that the compiler is performing on.

192
00:12:26,410 --> 00:12:30,510
Hence always keep in mind Java is a statically type language.

193
00:12:30,520 --> 00:12:35,350
So if somebody is going to ask you about that, you should say that it's a statically type language.

194
00:12:35,830 --> 00:12:37,420
Now, so that's what we have.

195
00:12:38,020 --> 00:12:42,700
And finally, let's just make this print statement a bit more meaningful.

196
00:12:43,000 --> 00:12:46,230
Let's put some text here so that we know that it is ID.

197
00:12:46,240 --> 00:12:49,240
So we'll do this in double quotes and we have this.

198
00:12:49,240 --> 00:12:51,250
Plus, let's do the same thing here.

199
00:12:53,140 --> 00:12:56,380
Now it should be more meaningful.

200
00:12:56,410 --> 00:12:57,460
Our output.

201
00:13:00,170 --> 00:13:00,680
Okay.

202
00:13:00,980 --> 00:13:05,780
So it prints ID 1000 and next ID thousand and one.

203
00:13:06,260 --> 00:13:08,120
So also put a call on here.

204
00:13:09,290 --> 00:13:15,770
So the thing is, we know that plus as for addition, right, we discussed it earlier and we will also

205
00:13:15,770 --> 00:13:17,930
discuss arithmetic operations later on.

206
00:13:17,930 --> 00:13:20,180
And then we'll we'll talk about this plus symbol.

207
00:13:20,510 --> 00:13:24,620
But when it is used with strings here, this is a string literal.

208
00:13:25,190 --> 00:13:27,710
A string later will be in double quotes.

209
00:13:27,710 --> 00:13:34,610
So whenever this plus is used with such a string literal, then it works as a concatenation operator.

210
00:13:34,670 --> 00:13:37,970
And a concatenation operator is something which concatenate.

211
00:13:38,150 --> 00:13:44,720
So it would append the thing on its right to the on its left, the thing on its right is the variable

212
00:13:44,750 --> 00:13:48,670
ID and the variable ID has a value thousand.

213
00:13:48,710 --> 00:13:56,000
So that value will be appended to this piece of text, which is a string literal and that is what is

214
00:13:56,000 --> 00:13:57,080
getting printed here.

215
00:13:57,900 --> 00:14:05,640
So whenever plus is used with strings, it acts as a concatenation operator, but otherwise it would

216
00:14:05,640 --> 00:14:10,020
act as a plus symbol, which means that you only have numeric options.

217
00:14:10,020 --> 00:14:16,710
So both of them would be something like integers or some other type, but definitely not strings.

218
00:14:16,740 --> 00:14:21,840
So the same thing over here to so just wanted to show that also.

219
00:14:22,680 --> 00:14:27,960
So that's the concatenation operator, but we will discuss concatenation operator when we discuss strings

220
00:14:27,960 --> 00:14:30,090
and one of the subsequent sections.

221
00:14:30,300 --> 00:14:31,410
So that's about it.

222
00:14:31,410 --> 00:14:38,370
So we looked at the variable declarations and variable re initialization and we have looked at the variable

223
00:14:38,370 --> 00:14:43,500
declarations with literals expressions and when it also gets a default value.

224
00:14:43,500 --> 00:14:49,200
And we also said that local variables will not get default values, but more on that later.

225
00:14:49,290 --> 00:14:53,640
But just keep in mind that local variables will not get any default values.

226
00:14:54,540 --> 00:14:59,760
Thank you and I hope you enjoyed this lecture and happy coding and see you in the next lecture.

