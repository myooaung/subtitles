WEBVTT
1
00:00:01.130 --> 00:00:01.920
Hi there.

2
00:00:01.940 --> 00:00:03.300
This is true.

3
00:00:03.380 --> 00:00:07.790
In the last lesson we have seen how interfaces are typically used.

4
00:00:08.150 --> 00:00:11.000
So we pretty much understand when to use interfaces.

5
00:00:11.450 --> 00:00:17.660
But the question is why interfaces were used and why are abstract classes not used instead?

6
00:00:18.170 --> 00:00:22.970
So we are going to follow the advice from an effective Java item which addresses this question.

7
00:00:24.410 --> 00:00:30.710
Here is item 18 from effective Java, which recommends that we should prefer interfaces over abstract

8
00:00:30.710 --> 00:00:31.400
classes.

9
00:00:32.060 --> 00:00:35.690
We will also look at the scenarios when we should use abstract classes.

10
00:00:37.370 --> 00:00:40.190
Let's see when we should prefer interfaces.

11
00:00:40.220 --> 00:00:44.810
The item says that interfaces are ideal for defining mixes.

12
00:00:45.080 --> 00:00:46.520
Let's see why that's the case.

13
00:00:46.970 --> 00:00:50.150
We know that makes sense are additional capabilities.

14
00:00:50.240 --> 00:00:52.100
That is, they are like add ons.

15
00:00:52.190 --> 00:00:58.640
Which classes might want to support since make sense are additional capabilities a class might want

16
00:00:58.640 --> 00:01:00.410
to support multiple of them.

17
00:01:01.040 --> 00:01:08.060
Now, if we use an abstract class to define a mixing, then it cannot be used by all those classes that

18
00:01:08.060 --> 00:01:13.250
already extend some other class and that some other class could as well be a mixing.

19
00:01:13.880 --> 00:01:19.790
So with abstract classes as makes sense, a class can at max support only one mixing.

20
00:01:20.000 --> 00:01:24.140
But if interface is used, then we wouldn't have any such limitations.

21
00:01:24.620 --> 00:01:30.590
All we need to do is just add implements class to the class declaration and implement the methods in

22
00:01:30.590 --> 00:01:31.640
the new interface.

23
00:01:32.210 --> 00:01:37.370
So it is easy to modify an existing class that's already extending some other class.

24
00:01:39.400 --> 00:01:46.090
Now, if the type is defining representative behavior but with no state involved, then go for interface.

25
00:01:46.780 --> 00:01:51.550
Just recall that interfaces are stateless and hence is preferred in this case.

26
00:01:52.120 --> 00:01:57.760
But ensure that even in future you wouldn't need any state to be part of this super type.

27
00:01:58.420 --> 00:02:03.700
You can, of course, create an abstract class with only abstract methods, but again, it cannot be

28
00:02:03.700 --> 00:02:07.330
used by classes that are already extending some other class.

29
00:02:07.750 --> 00:02:13.360
So the key reason to go for Interface is Java not supporting multiple inheritance.

30
00:02:15.300 --> 00:02:18.960
So the question is when should we prefer abstract classes?

31
00:02:20.070 --> 00:02:25.950
If the type is defining core identity of its subclasses, then you should go with abstract class or

32
00:02:25.950 --> 00:02:27.690
even a regular concrete class.

33
00:02:27.990 --> 00:02:32.490
When we say core identity, it would be representative behavior with state.

34
00:02:32.940 --> 00:02:36.630
You cannot use an interface here as interface we know as stateless.

35
00:02:38.010 --> 00:02:43.590
We know that our bookmark class is defined as an abstract class as it represents the core identity of

36
00:02:43.590 --> 00:02:44.610
its subclasses.

37
00:02:45.000 --> 00:02:52.500
Specifically, it defines state using protected variables such as ID title description and profile URL.

38
00:02:54.360 --> 00:03:01.020
Item also says that abstract classes can be used to provide a skeletal implementation of the interface.

39
00:03:01.590 --> 00:03:06.660
That is, they would implement the interface and would provide some form of basic implementation.

40
00:03:07.140 --> 00:03:11.520
Skeleton implementations provide implementation assistance to programmers.

41
00:03:12.000 --> 00:03:17.970
That is, programmers can extend the skeletal implementation and make use of some of the implementation.

42
00:03:18.360 --> 00:03:24.510
That is, programmers would not have to reinvent the logic, thus saving them some time and also any

43
00:03:24.510 --> 00:03:26.700
potential bugs that they may introduce.

44
00:03:27.330 --> 00:03:32.490
Of course, programmers are also free to ignore skeletal implementation and implement the interface

45
00:03:32.490 --> 00:03:33.210
themselves.

46
00:03:34.960 --> 00:03:40.600
Here is an example from the Java library where the class array list from the Java utility package is

47
00:03:40.600 --> 00:03:46.690
implementing four interfaces and is also extending abstract lists, which is a skeletal implementation

48
00:03:46.690 --> 00:03:48.100
of the list interface.

49
00:03:48.520 --> 00:03:53.950
So ArrayList is taking advantage of some of the functionality that comes with abstract lists.

50
00:03:54.520 --> 00:04:01.510
Java API provides such skeletal implementations for several interfaces, especially if you look at Java

51
00:04:01.750 --> 00:04:06.520
util package, you will find several interfaces with skeletal implementations.

52
00:04:07.430 --> 00:04:14.000
Looking at this hierarchy, you may wonder why ArrayList has to specifically implement a list interface

53
00:04:14.000 --> 00:04:16.579
as abstract list is already doing it.

54
00:04:17.000 --> 00:04:23.030
It is definitely not required to explicitly implement list in this case, but I would assume it is done

55
00:04:23.030 --> 00:04:28.130
for the sake of code clarity to just show that ArrayList is indeed a list.

56
00:04:28.340 --> 00:04:33.680
This way you don't have to browse through the inheritance tree to learn about this fact.

57
00:04:35.870 --> 00:04:42.020
As for the naming convention goes, skeletal implementations start with the keyword abstract followed

58
00:04:42.020 --> 00:04:45.950
by the interface name like in the case of abstract list.

59
00:04:46.610 --> 00:04:53.210
You may want to recall that in our interfaces demo we had an interface named A which had an abstract

60
00:04:53.210 --> 00:05:00.710
subclass named Abstract A, which is basically a skeletal implementation and it also provided implementation

61
00:05:00.710 --> 00:05:03.290
for one of the inherited abstract methods.

62
00:05:03.740 --> 00:05:08.540
And there was also the concrete Class X which extended this abstract skeletal class.

63
00:05:09.020 --> 00:05:14.810
So we already implemented a skeletal implementation, and abstract classes are great candidates for

64
00:05:14.810 --> 00:05:16.070
such implementations.

65
00:05:17.990 --> 00:05:23.750
Finally, the item says that we need to use utmost care while designing our interfaces.

66
00:05:24.440 --> 00:05:29.420
If the code you write is used only within your organisation, then most likely you are fine.

67
00:05:29.630 --> 00:05:35.570
But if you are designing a public API, then you should brainstorm quite a bit on the method signatures.

68
00:05:36.020 --> 00:05:41.870
Once the API is released and widely used, it would be extremely difficult to make any changes.

69
00:05:42.380 --> 00:05:48.260
That is, if you add any new methods in one of your interfaces in a subsequent release, then any client

70
00:05:48.260 --> 00:05:54.350
code that implements this interface will not compile anymore unless it implements the new methods.

71
00:05:55.070 --> 00:06:00.830
But if clients do not recompile their code, then they are fine and their code still works with your

72
00:06:00.830 --> 00:06:01.760
new code.

73
00:06:01.970 --> 00:06:08.360
Assuming that you have used the same version of the compiler as before, that is, you did not use a

74
00:06:08.360 --> 00:06:11.990
different version of the compiler to compile your new code.

75
00:06:12.560 --> 00:06:17.300
But if the clients do try to recompile, then they will see compilation errors.

76
00:06:18.890 --> 00:06:24.890
You may recall this illustration from the previous lesson where list interface in standard Java API

77
00:06:24.920 --> 00:06:27.560
is implemented by other popular APIs.

78
00:06:27.860 --> 00:06:33.950
Now if this interface is modified, then it could break the code in both these APIs and that would be

79
00:06:33.950 --> 00:06:35.330
a very serious issue.

80
00:06:35.840 --> 00:06:42.170
In this context, the item says that if your type would evolve over time, then you should go for abstract

81
00:06:42.170 --> 00:06:42.890
classes.

82
00:06:43.220 --> 00:06:49.490
That's because with abstract classes, if we add new concrete methods, they are automatically inherited

83
00:06:49.490 --> 00:06:50.570
by subclasses.

84
00:06:51.080 --> 00:06:57.740
However, this recommendation is valid only up until Java seven, as from Java eight onwards.

85
00:06:57.770 --> 00:07:03.830
Even interfaces permit adding of new concrete methods which get automatically inherited.

86
00:07:04.280 --> 00:07:08.750
So ease of evolving is not much of an issue from Java eight onwards.

87
00:07:09.440 --> 00:07:16.100
However, adding abstract methods or changing method signatures of existing abstract methods would still

88
00:07:16.100 --> 00:07:18.410
break the code of all implementers.

89
00:07:18.710 --> 00:07:23.480
So even with Java eight, you should still be careful while designing your interfaces.

90
00:07:24.420 --> 00:07:25.530
So that's about it.

91
00:07:25.530 --> 00:07:32.490
Just to summarize, use interfaces if you want to define make sense or if you want to define representative

92
00:07:32.490 --> 00:07:36.120
behavior of subclasses but with no state involved.

93
00:07:36.600 --> 00:07:42.030
The core reason for this is Java not supporting multiple inheritance of classes.

94
00:07:42.880 --> 00:07:48.070
If representative behavior with state is what is needed, then abstract crosses should be used.

95
00:07:48.490 --> 00:07:52.600
Also, abstract classes are great for providing skeletal implementations.

96
00:07:53.140 --> 00:07:54.100
That's about it.

97
00:07:54.100 --> 00:07:55.240
And thank you.

