WEBVTT
1
00:00:02.110 --> 00:00:02.900
Hi there.

2
00:00:02.920 --> 00:00:04.200
This is the model group.

3
00:00:04.570 --> 00:00:09.160
Now it's time to look at tasks that need to be executed within a certain time limit.

4
00:00:09.460 --> 00:00:15.520
Sometimes the task may not have any time limits at all, but certain applications might have strict

5
00:00:15.520 --> 00:00:17.890
time limits on execution of the task.

6
00:00:18.100 --> 00:00:21.130
And so the task should not take more than the specified time.

7
00:00:21.730 --> 00:00:27.280
For instance, it's common to have web applications displaying advertisements from different partners.

8
00:00:27.610 --> 00:00:34.090
In this case, it's typical to fetch those advertisements concurrently, and these advertisements need

9
00:00:34.090 --> 00:00:38.140
to be displayed within a second or two for best user experience.

10
00:00:38.620 --> 00:00:44.110
And if a task is taking more than the specified time in fetching an advertisement from a partner, then

11
00:00:44.110 --> 00:00:45.490
we need to suspend that task.

12
00:00:46.000 --> 00:00:50.770
So placing time limits on tasks is very important and more than web applications.

13
00:00:52.820 --> 00:00:59.120
Earlier we looked at this definition of future, and we also discussed briefly about the time method,

14
00:00:59.120 --> 00:01:00.770
which is the last method here.

15
00:01:01.400 --> 00:01:08.030
This method waits for at most the specified amount of time for the task to complete, and it will throw

16
00:01:08.030 --> 00:01:13.070
a timeout exception if specified time elapses and the task is not yet completed.

17
00:01:13.800 --> 00:01:15.630
In the catch bloc of climate exception.

18
00:01:15.630 --> 00:01:21.360
We can invoke the cancel method that we see here on the same future instance so that the underlying

19
00:01:21.390 --> 00:01:24.930
task would be cancelled, thus saving some resources.

20
00:01:27.180 --> 00:01:30.480
Similar to time get alternatively executed.

21
00:01:30.480 --> 00:01:38.010
Service also has a method called Invoke which takes a collection of callable tasks along with the timeout

22
00:01:38.010 --> 00:01:42.600
information and returns a collection of corresponding future objects.

23
00:01:43.230 --> 00:01:48.930
So it takes a collection of callable tasks and returns a collection of corresponding future objects.

24
00:01:49.170 --> 00:01:52.230
So for each task there will be a corresponding future object.

25
00:01:52.560 --> 00:01:59.970
And this method, like the get method in the future instance, also blocks until either all submitted

26
00:01:59.970 --> 00:02:03.510
tasks complete or timeout expires, whichever happens first.

27
00:02:03.960 --> 00:02:10.470
But if timeout expires, then any incomplete task will be cancelled and that's taken care of implicitly

28
00:02:10.470 --> 00:02:12.360
by the invoke all method itself.

29
00:02:12.810 --> 00:02:19.890
So for a returned future instance, you can invoke get method after checking that it was not cancelled

30
00:02:19.920 --> 00:02:23.400
via the IS cancelled method in the future instance.

31
00:02:23.970 --> 00:02:30.450
So while submit method an execute or service returns a single future instance invoke all can return

32
00:02:30.450 --> 00:02:34.740
more than one future instance depending on the number of tasks submitted.

33
00:02:35.560 --> 00:02:41.740
Now let's go ahead and do a quick demo and we will look at both time get as well as time to invoke all

34
00:02:41.740 --> 00:02:43.330
from execute or service.

35
00:02:45.660 --> 00:02:45.770
Okay.

36
00:02:45.880 --> 00:02:50.890
First, let's look at the time to get approach and later we can look at the in work all approach from

37
00:02:50.890 --> 00:02:51.880
executed service.

38
00:02:52.120 --> 00:02:59.290
So for time get I have created this new class called as future time get indexer and and this has been

39
00:02:59.290 --> 00:03:03.040
added in the indexer sub package concurrent index or sub package.

40
00:03:03.280 --> 00:03:08.590
And it's just an improvement over future indexer, which we have seen in the last demo.

41
00:03:09.190 --> 00:03:14.290
So in the last demo we looked at future indexer with the task, did not have any time limits, but now

42
00:03:14.290 --> 00:03:15.970
the task will have time limits.

43
00:03:16.060 --> 00:03:18.550
And so this is a future indexer.

44
00:03:18.640 --> 00:03:20.500
So everything is same.

45
00:03:20.500 --> 00:03:27.580
The downloader task will still implement callable and the indexer thread is still there.

46
00:03:27.580 --> 00:03:28.960
So index to task is there.

47
00:03:29.260 --> 00:03:34.870
The only difference is here in the last demo I mentioned about this.

48
00:03:35.020 --> 00:03:42.610
So once the downloader tasks are submitted to the downloader executor via the submit method, each invocation

49
00:03:42.610 --> 00:03:46.690
will return a future instance which is added to an array list of features.

50
00:03:46.690 --> 00:03:53.590
And then we are iterating through the list of futures and executing the indexers, the indexer executor.

51
00:03:53.830 --> 00:03:57.220
And here we are invoking the get method.

52
00:03:57.220 --> 00:04:05.470
And I mentioned that if we do this, then a future in a particular iteration can block because the method

53
00:04:05.470 --> 00:04:06.190
can block.

54
00:04:06.190 --> 00:04:09.430
And because of that, subsequent iterations have to wait.

55
00:04:09.430 --> 00:04:11.500
They will not happen, so they have to wait.

56
00:04:11.500 --> 00:04:17.860
So I suggested that instead of invoking the get here, we would just pass the future instance to the

57
00:04:17.860 --> 00:04:19.180
Indexer constructor.

58
00:04:19.959 --> 00:04:26.320
And that way in this iterations will complete and all of these tasks will be in the queue of this particular

59
00:04:26.320 --> 00:04:31.120
executor, and they will be picked up by the threads and the thread pull of this executor.

60
00:04:31.510 --> 00:04:34.210
And those threads will work concurrently.

61
00:04:34.210 --> 00:04:41.020
So the even if the get method blocks, then it will not have any impact on the other threads on the

62
00:04:41.020 --> 00:04:41.980
other indexer.

63
00:04:41.980 --> 00:04:43.090
So that's what I suggested.

64
00:04:43.090 --> 00:04:45.340
So that's an improvement that we are making here.

65
00:04:45.580 --> 00:04:46.840
So let's go here.

66
00:04:46.840 --> 00:04:48.370
Future time get indexer.

67
00:04:48.370 --> 00:04:51.250
So everything else is same here.

68
00:04:51.550 --> 00:04:53.200
So in the go method.

69
00:04:53.230 --> 00:04:57.730
Now instead of invoking the future dot get we are passing future.

70
00:04:58.060 --> 00:05:01.240
But then we are also passing some time information here.

71
00:05:01.660 --> 00:05:03.190
So here is the time.

72
00:05:03.190 --> 00:05:04.930
We are calling it as end time.

73
00:05:05.290 --> 00:05:11.050
So right before we are invoking the we are starting the downloading process itself.

74
00:05:11.380 --> 00:05:13.090
So we are measuring the time here.

75
00:05:13.090 --> 00:05:19.270
So it's we are getting the current time in nanoseconds and we are adding a time frame.

76
00:05:19.570 --> 00:05:21.310
So this is the time budget.

77
00:05:21.310 --> 00:05:25.230
It's the time frame and it's 2 seconds in this case.

78
00:05:25.230 --> 00:05:27.340
So we're here, it's 2 seconds.

79
00:05:27.460 --> 00:05:29.200
It's also expressed in nanoseconds.

80
00:05:29.560 --> 00:05:32.950
So within 2 seconds, the downloading has to complete.

81
00:05:32.980 --> 00:05:35.200
All of the web links have to be downloaded.

82
00:05:35.200 --> 00:05:36.640
So we are adding this.

83
00:05:36.640 --> 00:05:43.300
So end time is the end time, the current time plus plus 2 seconds and it everything has to finish before

84
00:05:43.330 --> 00:05:43.750
that.

85
00:05:43.960 --> 00:05:46.690
So we are passing the end time to the indexer here.

86
00:05:46.690 --> 00:05:49.840
So that's the Indexer constructor has been changed now.

87
00:05:50.140 --> 00:05:52.060
Earlier it was taking only web link.

88
00:05:52.690 --> 00:05:55.690
Now it takes time as well as this future instance.

89
00:05:56.020 --> 00:05:57.250
And in the run method.

90
00:05:57.250 --> 00:06:06.070
Here we are first computing the time left because the time left is what we are going to pass to the

91
00:06:06.100 --> 00:06:07.090
get method here.

92
00:06:07.090 --> 00:06:15.550
So this is the time get and we will be passing the time left and within that time period the task in

93
00:06:15.640 --> 00:06:19.060
this future corresponds to some task and that particular task.

94
00:06:19.060 --> 00:06:23.380
The download task has to finish, its task has to finish its computation.

95
00:06:23.410 --> 00:06:26.110
If not a timeout exception will be generated.

96
00:06:26.860 --> 00:06:29.650
So that's why we have an additional catch block here.

97
00:06:29.980 --> 00:06:37.270
So the the time left is nothing but end time and time, which is past minus the current time.

98
00:06:38.170 --> 00:06:41.200
So whatever time is that so minus the current time.

99
00:06:41.200 --> 00:06:46.810
So the left over time is what is being passed here and the time unit is nanoseconds.

100
00:06:47.170 --> 00:06:53.170
And within that, if it finishes, then we get the web link right, because the column method will return

101
00:06:53.170 --> 00:06:57.910
a web link, the call method that the downloader task has implemented.

102
00:06:58.170 --> 00:07:03.700
Download task is a callable and then from the web link we are getting the we are invoking the HTML page

103
00:07:03.700 --> 00:07:05.020
and we get the HTML page.

104
00:07:05.020 --> 00:07:12.280
But if a timeout exception is generated, then we are coming here and we are canceling that particular

105
00:07:12.280 --> 00:07:12.670
task.

106
00:07:12.670 --> 00:07:18.280
So we are invoking the cancel method on the on the future itself and we are passing it through, which

107
00:07:18.280 --> 00:07:23.050
means that it can if if the task is still executing, it can try to interrupt it.

108
00:07:23.860 --> 00:07:29.080
It doesn't mean that it's going to definitely work out, but at least it's trying to invoke it because

109
00:07:29.080 --> 00:07:30.340
there needs to be the logic.

110
00:07:30.340 --> 00:07:34.570
The logic should be there to respond to the interrupt, but at least we are making an attempt to do

111
00:07:34.570 --> 00:07:34.990
that.

112
00:07:35.140 --> 00:07:35.860
So that's it.

113
00:07:35.860 --> 00:07:37.990
So let me just go ahead and run this.

114
00:07:42.910 --> 00:07:43.780
Here it is.

115
00:07:44.810 --> 00:07:44.990
Okay.

116
00:07:45.080 --> 00:07:50.990
As you can see, only one task could finish within 2 seconds and it has been indexed, but the other

117
00:07:50.990 --> 00:07:55.100
three tasks have could not finish and the timeout exception was generated.

118
00:07:55.100 --> 00:07:57.530
And here we are saying that task is canceled.

119
00:07:58.340 --> 00:07:59.480
So that's the time get.

120
00:07:59.510 --> 00:08:02.890
Now let's look at the invoke all method approach.

121
00:08:02.900 --> 00:08:09.410
So for this, I created this new class called timed invoke all indexer in the same indexer sub package

122
00:08:09.830 --> 00:08:12.110
and we are still using the time frame here.

123
00:08:14.320 --> 00:08:17.060
So the download task is still the same.

124
00:08:17.080 --> 00:08:18.490
It implements callable.

125
00:08:19.380 --> 00:08:24.360
An indexer is going to be the old indexer, not the one which we saw here in the future.

126
00:08:24.360 --> 00:08:24.770
Timed.

127
00:08:24.810 --> 00:08:25.740
Get indexer.

128
00:08:26.370 --> 00:08:27.120
We don't need that.

129
00:08:27.120 --> 00:08:33.390
So we are still using the old indexer and it implements a table and the changes made in the go method

130
00:08:33.390 --> 00:08:34.020
here.

131
00:08:34.260 --> 00:08:40.049
So once again, we have the end time and we are adding the time frame to the nano time to the current

132
00:08:40.049 --> 00:08:40.409
time.

133
00:08:40.409 --> 00:08:46.890
So it will be 2 seconds will be added to the current time and invoke all is here to the invoke all method.

134
00:08:46.890 --> 00:08:53.010
We submit a list of collection of downloader tasks and it will return a collection of features.

135
00:08:53.670 --> 00:09:02.040
So this features is here list of features and list of downloader tasks as here and the way we are populating

136
00:09:02.040 --> 00:09:05.280
it, as we are simply iterating through the list of web links here.

137
00:09:05.460 --> 00:09:12.210
And we are we are passing that web link to the downloader to the downloader instance and downloader

138
00:09:12.210 --> 00:09:16.200
is a callable, so this task is nothing but a list of colobus.

139
00:09:16.260 --> 00:09:16.710
Right.

140
00:09:16.710 --> 00:09:18.780
We already mentioned discuss that earlier.

141
00:09:19.440 --> 00:09:26.340
And that said we are passing this and it's returning a list of features and these features each feature

142
00:09:27.660 --> 00:09:30.930
it must have completed or it must have been canceled.

143
00:09:30.930 --> 00:09:31.470
Right.

144
00:09:31.680 --> 00:09:38.400
So if it is if it is not canceled, so we are invoking is canceled method here, then we are passing

145
00:09:38.400 --> 00:09:40.650
the we are invoking the get method here.

146
00:09:40.650 --> 00:09:45.240
And this will not block because it's completed and it would return a web link.

147
00:09:46.020 --> 00:09:49.020
But if it is canceled, then we are simply printing the message.

148
00:09:49.020 --> 00:09:50.250
The task is canceled.

149
00:09:50.880 --> 00:09:53.700
So let me just go ahead and run this also.

150
00:09:58.590 --> 00:10:05.550
So here are two tasks have been cancelled and two of them have been have completed successfully and

151
00:10:05.850 --> 00:10:07.020
we have indexed them.

152
00:10:07.590 --> 00:10:08.900
So that's about it.

153
00:10:08.910 --> 00:10:15.570
So this one, I think this approach is more cleaner in work all because it is very explicit here.

154
00:10:15.570 --> 00:10:17.400
We are explicitly saying here.

155
00:10:17.640 --> 00:10:24.450
And the second thing is, if we use the time to get, there is a chance that the programmer can make

156
00:10:24.450 --> 00:10:31.380
a mistake, like in the sense the programmer can actually implement a time to get in this way, right

157
00:10:31.380 --> 00:10:35.220
in this way, where the future don't get you know, this is a future indexed program.

158
00:10:35.220 --> 00:10:36.330
We already discussed that.

159
00:10:36.330 --> 00:10:42.450
So the get would block and then it would block and the subsequent iterations cannot cannot execute until

160
00:10:42.450 --> 00:10:45.360
this until this block, until the get method returns.

161
00:10:45.360 --> 00:10:51.090
So that would be one one issue, one programming error that can happen if we use a timed gate.

162
00:10:51.270 --> 00:10:56.490
And the second thing is with the timed get and timeout, exception can be generated.

163
00:10:57.090 --> 00:11:00.450
And if it is generated, then we might want to cancel it.

164
00:11:00.450 --> 00:11:04.560
And this we have to do it explicitly but with time to invoke all.

165
00:11:04.560 --> 00:11:10.320
So there is no such timeout exception and that invoke all method automatically cancels it.

166
00:11:10.320 --> 00:11:13.110
So in this case we might actually forget to invoke this method to.

167
00:11:13.110 --> 00:11:14.430
It's where it can happen.

168
00:11:14.430 --> 00:11:15.900
Definitely it might happen.

169
00:11:16.140 --> 00:11:20.880
But with this we don't have to deal with it because invoke call is taking care of that.

170
00:11:21.000 --> 00:11:25.650
So for me I think I personally prefer this approach using the invoke all.

171
00:11:26.510 --> 00:11:27.710
So that's about it.

172
00:11:28.100 --> 00:11:33.560
Although we are invoking the cancel method, but I think it's still better than having a catch block.

173
00:11:34.100 --> 00:11:34.880
So that's it.

174
00:11:34.880 --> 00:11:41.030
And both the classes are available in the resources section and thank you and happy coding.

