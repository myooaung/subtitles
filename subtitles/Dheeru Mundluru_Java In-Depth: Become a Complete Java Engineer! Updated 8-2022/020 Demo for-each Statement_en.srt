1
00:00:02,110 --> 00:00:03,130
Hi there.

2
00:00:03,160 --> 00:00:03,960
This is the day.

3
00:00:04,330 --> 00:00:05,320
And welcome back.

4
00:00:05,350 --> 00:00:08,740
Let's now continue our discussion on the first statement.

5
00:00:08,740 --> 00:00:14,380
And in this lecture, let's learn about a type of first statement called for each statement.

6
00:00:14,770 --> 00:00:21,670
For each statement was introduced in Java five, and it mainly helps with conveniently iterating over

7
00:00:21,670 --> 00:00:27,370
arrays and other data structures, which we will see later in Collections Framework Chapter.

8
00:00:27,640 --> 00:00:33,730
Now we are saying that it allows for convenient iteration, and that's because for each statement has

9
00:00:33,730 --> 00:00:36,790
a much simpler and a cleaner syntax.

10
00:00:37,180 --> 00:00:43,600
Now in the last lecture we looked at the first statement and we can refer to it as traditional first

11
00:00:43,600 --> 00:00:47,350
statement as it was there right from the beginning of Java.

12
00:00:47,920 --> 00:00:51,460
But for each statement cannot be used in certain scenarios.

13
00:00:51,460 --> 00:00:55,570
And for those scenarios we have to use the traditional first statement.

14
00:00:55,690 --> 00:00:58,960
And at the end of this lecture we will look at those scenarios.

15
00:00:59,530 --> 00:01:06,310
Now in the last lecture we looked at this particular array declaration where we have an array with ten

16
00:01:06,310 --> 00:01:11,410
elements, 0 to 9, and we were iterating through the array and printing the array elements.

17
00:01:11,800 --> 00:01:17,740
And we also said that this is the most common way in which a first statement can be represented.

18
00:01:17,770 --> 00:01:23,770
We also looked at different representations, but we specifically said that this is the most common

19
00:01:23,770 --> 00:01:27,910
way in which first statement is used at least until Java five was released.

20
00:01:28,240 --> 00:01:35,500
And the reason for that is because normally in this common representation we will have an initialization

21
00:01:35,500 --> 00:01:41,710
statement such as this one, where we will declare a single variable and then we have the condition

22
00:01:41,710 --> 00:01:42,520
statement.

23
00:01:42,670 --> 00:01:46,990
And the condition statement mostly would look something like this.

24
00:01:47,140 --> 00:01:53,470
If it is an array, we would just ensure that we are iterating until the size of the array is reached.

25
00:01:53,980 --> 00:02:01,240
And regarding the expression list here, we would simply have a single post increment operator.

26
00:02:01,270 --> 00:02:03,820
That is, we would always increment by one.

27
00:02:04,330 --> 00:02:08,740
So this is the most common template, most common representation.

28
00:02:08,740 --> 00:02:15,730
And we can think that 95% of the time we would be using such kind of representation at least until Java

29
00:02:15,730 --> 00:02:16,150
file.

30
00:02:17,030 --> 00:02:25,430
So since it is being so commonly used, I think Java, the Java designers wanted to come up with something

31
00:02:25,430 --> 00:02:32,360
which would be much more simpler to represent but will also accomplish the same thing.

32
00:02:33,110 --> 00:02:35,810
And that's because it is so commonly used.

33
00:02:36,650 --> 00:02:44,000
So in that regards the Java designers have come up with for each statement and let's see how the statement

34
00:02:44,000 --> 00:02:44,680
looks like.

35
00:02:44,690 --> 00:02:46,280
It is very straightforward.

36
00:02:46,700 --> 00:02:54,130
So it would have the same for keyword and parentheses and the body and closed end braces.

37
00:02:54,950 --> 00:03:03,830
Now let's go ahead and print the same array so it will also have int i then a colon and it would be

38
00:03:03,830 --> 00:03:06,050
followed by I array.

39
00:03:07,550 --> 00:03:17,330
So but here I actually represents the elements of the array, whereas here I represents the index of

40
00:03:17,330 --> 00:03:17,990
the array.

41
00:03:18,020 --> 00:03:18,650
Right?

42
00:03:18,650 --> 00:03:20,690
I here is the index of the array.

43
00:03:20,690 --> 00:03:27,770
And in order to access the element we had to do something like this array of I only then we would get

44
00:03:27,770 --> 00:03:29,000
the array element.

45
00:03:29,390 --> 00:03:34,160
But here I is not the index and I is the actual element itself.

46
00:03:34,160 --> 00:03:36,890
So if we print it, we would do something like this.

47
00:03:38,280 --> 00:03:43,230
So we don't need this because I itself is the other element.

48
00:03:43,980 --> 00:03:45,210
So this is what we have.

49
00:03:45,330 --> 00:03:48,570
And as you can see, it is much more simple, much more simpler.

50
00:03:48,660 --> 00:03:57,090
So the index variable is still there, but it is implicit in this for each statement it is hidden and

51
00:03:57,090 --> 00:04:01,020
the condition statement is also there, but it is also implicit.

52
00:04:01,050 --> 00:04:07,140
Similarly, the increment, the post increment operation is also happening, but that is also hidden.

53
00:04:07,950 --> 00:04:13,050
So the index variable is hidden and we don't have any of these expressions here.

54
00:04:13,350 --> 00:04:15,960
So that makes it really cleaner.

55
00:04:16,620 --> 00:04:20,100
So this is array, but it can also be other data structures too.

56
00:04:20,399 --> 00:04:21,870
Now in English we can read it.

57
00:04:21,870 --> 00:04:25,140
As for each element.

58
00:04:25,170 --> 00:04:27,900
I n I agree.

59
00:04:27,930 --> 00:04:30,750
So this is how we can read it as in English.

60
00:04:30,960 --> 00:04:33,720
And here for each element i.

61
00:04:33,750 --> 00:04:36,090
So this is AI and in.

62
00:04:36,240 --> 00:04:38,820
And we can think that colon is n.

63
00:04:39,300 --> 00:04:41,640
And then we have the we have the array.

64
00:04:42,300 --> 00:04:43,650
So that's what it is.

65
00:04:44,340 --> 00:04:48,090
So now let's let me just go ahead and compile and run this.

66
00:04:48,090 --> 00:04:52,410
So this is still the basics demo class and this isn't the main method.

67
00:04:52,410 --> 00:04:54,900
So let me just compile and run it.

68
00:04:58,180 --> 00:04:58,910
Here it is.

69
00:04:58,930 --> 00:05:02,890
So it prints all of the elements 0 to 9.

70
00:05:03,400 --> 00:05:11,290
But traditional fa fa statement is not restricted to just arrays or other data structures, and it can

71
00:05:11,290 --> 00:05:14,320
also be used for representing other kinds of logic.

72
00:05:14,320 --> 00:05:21,880
And we already we already looked at one kind of problem in the last lecture where we looked at counting

73
00:05:21,880 --> 00:05:22,720
devices.

74
00:05:22,990 --> 00:05:28,060
So we were trying to count the number of divisors of a particular value, right?

75
00:05:28,060 --> 00:05:34,090
So there we used a traditional first statement and traditional first statement has to be used for such

76
00:05:34,090 --> 00:05:35,080
kinds of problems.

77
00:05:35,080 --> 00:05:40,150
And we will also look at few other scenarios where we have to use a traditional first statement.

78
00:05:40,420 --> 00:05:42,910
So this is all we have for for each.

79
00:05:42,940 --> 00:05:46,150
Now there is an item in effective Java.

80
00:05:46,150 --> 00:05:50,710
It is item 46, at least in version two of the book.

81
00:05:50,830 --> 00:05:54,010
And the item number could be something else in a different version.

82
00:05:54,100 --> 00:06:01,210
So that particular item, it says prefer for each loops to traditional furloughs.

83
00:06:03,490 --> 00:06:05,230
So let me just copy it here.

84
00:06:05,770 --> 00:06:06,570
So that's what it says.

85
00:06:06,580 --> 00:06:12,010
It says that you need to prefer for each loop whenever possible to traditional far loops.

86
00:06:12,010 --> 00:06:13,750
And here are the reasons.

87
00:06:13,750 --> 00:06:19,450
One is the cleaner syntax which we have already see, which we have already seen, and there is also

88
00:06:19,450 --> 00:06:22,430
no performance penalty in using for each.

89
00:06:22,450 --> 00:06:28,990
In fact, it seems that it can be slightly better if we are dealing with arrays because with traditional

90
00:06:28,990 --> 00:06:34,960
for loop here with each iteration we are computing the length and that is taken care of implicitly.

91
00:06:35,230 --> 00:06:36,850
That is in for each statement.

92
00:06:36,850 --> 00:06:41,830
It will be done only once and that value will be reused for each of the iterations.

93
00:06:42,490 --> 00:06:49,870
So that could give a slight performance benefit with regards to arrays, but there is definitely no

94
00:06:49,870 --> 00:06:56,170
performance penalty when we are using a for each statement and it will also eliminate any opportunities

95
00:06:56,170 --> 00:06:57,040
for error.

96
00:06:57,760 --> 00:07:04,660
Now so this is a newer lecture, but earlier I had a different version of the lecture, and when I was

97
00:07:04,660 --> 00:07:11,350
preparing that lecture, I was trying to make up an example for demonstration, and I actually ran into

98
00:07:11,350 --> 00:07:15,340
an issue when I was trying to use the traditional first statement.

99
00:07:15,940 --> 00:07:18,390
So let me just show what the issue is.

100
00:07:18,400 --> 00:07:23,910
So the problem is to display all the different combinations.

101
00:07:23,920 --> 00:07:32,320
When we roll a pair of dice, Dice has a single, dice has six, six values, and if we want to roll

102
00:07:32,320 --> 00:07:38,530
a pair of them, and if we want to display all of the different combinations, we want to print those

103
00:07:38,530 --> 00:07:41,320
combinations so we can use a nested first statement.

104
00:07:41,320 --> 00:07:47,110
So let me just go ahead and write an straight for statement for doing something like that.

105
00:07:47,110 --> 00:07:48,700
So we need to dice.

106
00:07:49,330 --> 00:07:53,710
So let me declare the first one as and let's call it dice.

107
00:07:53,710 --> 00:07:55,810
One equals to.

108
00:07:56,020 --> 00:07:57,400
One to.

109
00:08:00,660 --> 00:08:01,800
Just copy this.

110
00:08:04,400 --> 00:08:05,220
Is true.

111
00:08:05,250 --> 00:08:08,490
Now, let me put the nested first statement.

112
00:08:14,560 --> 00:08:17,890
Now generally what we do is we just copy this.

113
00:08:18,830 --> 00:08:19,880
And we paced it.

114
00:08:19,880 --> 00:08:22,310
That's what we tend to do as programmers.

115
00:08:22,610 --> 00:08:30,380
And this one, let's make it J and J less than dies to dot length.

116
00:08:30,620 --> 00:08:33,799
And let's go ahead and print the other elements.

117
00:08:42,950 --> 00:08:44,930
Dies two of J.

118
00:08:45,620 --> 00:08:48,350
Now let me go ahead and compile and run this.

119
00:08:53,590 --> 00:08:54,730
You let me do this?

120
00:09:01,590 --> 00:09:02,070
Here it is.

121
00:09:02,070 --> 00:09:07,960
We are putting the roll of the dice and after printing a few rows we are getting this exception error

122
00:09:07,980 --> 00:09:15,390
called our index out of bounds exception because we are trying to access an array element that is outside

123
00:09:15,390 --> 00:09:17,040
of the array.

124
00:09:17,250 --> 00:09:21,150
So we are trying to reach out to an index that is outside the boundary of array.

125
00:09:21,150 --> 00:09:25,680
And that is happening here because we made a copy and paste error.

126
00:09:25,680 --> 00:09:30,840
This was supposed to be plus plus, but we had it as a plus plus.

127
00:09:30,840 --> 00:09:37,170
In this case, I did it deliberately, but like I said earlier last time when I was trying it, it did

128
00:09:37,170 --> 00:09:39,150
happen that I did make that mistake.

129
00:09:39,180 --> 00:09:42,090
So when it was A-plus plus plus here.

130
00:09:42,690 --> 00:09:44,370
So this is what we have here.

131
00:09:44,370 --> 00:09:46,860
Let me just show you why we are getting this error.

132
00:09:47,040 --> 00:09:51,930
So in the first iteration, it would be this one of zero and this would be dice two of zero, which

133
00:09:51,930 --> 00:09:54,900
means that it would print one and one, as we can see here.

134
00:09:55,050 --> 00:10:01,140
Then in the second iteration of the inner loop, it would be dice one of two, right?

135
00:10:01,140 --> 00:10:05,070
Because we had it as it would be dice one of one sorry.

136
00:10:05,100 --> 00:10:07,830
Dice one of one which is here two.

137
00:10:07,830 --> 00:10:14,820
And then this would still remain as dice two of zero because we are not incrementing anywhere.

138
00:10:14,820 --> 00:10:16,830
It would be dice two of zero, which is one.

139
00:10:16,950 --> 00:10:19,380
So it is printing two and one.

140
00:10:19,680 --> 00:10:22,710
And then in the third iteration I get incremented once again.

141
00:10:22,710 --> 00:10:28,860
So it would be dice one of two and dice one of two as this one, three and dice two, it would still

142
00:10:28,860 --> 00:10:29,880
be zero.

143
00:10:29,880 --> 00:10:35,970
So it is printing three and one one because the first element is one here.

144
00:10:36,360 --> 00:10:42,690
So similarly we will have dice, one of four dice, two of zero dice, one of five dice, two of zero

145
00:10:42,690 --> 00:10:44,310
dice, one of six.

146
00:10:44,310 --> 00:10:50,100
And that's when we get the error and DBM throws this error.

147
00:10:50,100 --> 00:10:57,470
It says Arrays array index out of bounds exception because we are trying to access index six, index

148
00:10:57,480 --> 00:11:00,720
six and we only have six elements.

149
00:11:01,290 --> 00:11:05,850
So but we are trying to access the seventh element by doing an index dice one of six.

150
00:11:06,270 --> 00:11:08,670
So that's why we are getting this error.

151
00:11:08,670 --> 00:11:11,760
Now, if we change this to J.

152
00:11:16,460 --> 00:11:19,430
As you can see, prints, all of the different combinations.

153
00:11:19,430 --> 00:11:23,810
One, one, one, two, one, three, two, one, two, two, six, three, one, two, three, six.

154
00:11:23,810 --> 00:11:26,930
And so on till six one, two, six, six.

155
00:11:27,740 --> 00:11:29,500
So that is what it is.

156
00:11:29,510 --> 00:11:34,520
But if we use a nested first statement, we will not have this problem.

157
00:11:34,520 --> 00:11:37,970
And with the nested four, we simply do this.

158
00:11:41,000 --> 00:11:45,530
Let's say we just copied, just like in the case of traditional fare.

159
00:11:45,530 --> 00:11:48,500
And we did this and let's, for instance, let's.

160
00:11:49,630 --> 00:11:52,480
That's even forgot to change this to.

161
00:11:53,670 --> 00:11:54,190
Jay.

162
00:11:55,200 --> 00:11:59,940
So in this case, if I compile it, we just get a compilation error.

163
00:12:02,080 --> 00:12:07,060
It says what variable AI is already defined and method mean.

164
00:12:07,600 --> 00:12:11,980
So even if we made a copy and paste error, we would get this error.

165
00:12:11,980 --> 00:12:14,110
And this error is because.

166
00:12:14,500 --> 00:12:19,420
So we are inside the main method and this is one local variable and this is one local variable.

167
00:12:19,450 --> 00:12:24,250
So one local variable cannot shadow or hide another local variable.

168
00:12:24,700 --> 00:12:25,780
So that is there.

169
00:12:26,550 --> 00:12:31,860
And we will also look at that in one of the follow up lectures when we are discussing about variable

170
00:12:31,860 --> 00:12:32,430
scope.

171
00:12:32,580 --> 00:12:38,140
But we know that a local variable can hide or shadow an instance variable.

172
00:12:38,160 --> 00:12:38,550
Right.

173
00:12:38,550 --> 00:12:39,660
We have seen that.

174
00:12:39,660 --> 00:12:45,330
In which case we would have to use this this reference in order to access the instance variable.

175
00:12:45,810 --> 00:12:52,110
So a local variable hiding an instance variable is perfectly fine, but a local variable cannot hide

176
00:12:52,110 --> 00:12:54,270
another local variable within the same method.

177
00:12:54,270 --> 00:12:55,920
And that is what is happening here.

178
00:12:55,920 --> 00:13:00,630
This we are trying to hide this with this one and we get a compilation error.

179
00:13:00,630 --> 00:13:02,730
So it is very easy to fix now.

180
00:13:02,730 --> 00:13:07,170
So we will just say that and we just take this thing.

181
00:13:09,360 --> 00:13:11,610
And we don't need any of that.

182
00:13:12,850 --> 00:13:16,240
You just need to let me comment this out.

183
00:13:23,870 --> 00:13:24,330
There you go.

184
00:13:24,350 --> 00:13:26,000
So we have the same output.

185
00:13:27,220 --> 00:13:32,470
So it is this for each statement is especially preferred for nested iterations.

186
00:13:33,160 --> 00:13:39,370
So that said, so the last thing that we want to look at is so we looked at for each statement and it

187
00:13:39,370 --> 00:13:43,930
is allowing us to conveniently iterate through through arrays and other data structures.

188
00:13:43,930 --> 00:13:46,060
So when we prefer.

189
00:13:47,520 --> 00:13:49,350
When would we prefer?

190
00:13:51,130 --> 00:13:54,250
Traditional first, we would want to do that.

191
00:13:54,250 --> 00:14:03,760
If we need if we need access to index, that's when we would have to use a traditional furlough because

192
00:14:03,760 --> 00:14:06,340
for each does not give access to index.

193
00:14:06,850 --> 00:14:10,270
Now there are certain scenarios where we would need that.

194
00:14:10,270 --> 00:14:17,800
For example, you want to transform the array, so you have the array and you want to do you want to

195
00:14:17,800 --> 00:14:20,040
say shuffle the elements of the array?

196
00:14:20,050 --> 00:14:27,100
Or if you recall in the last lecture, we looked at this particular example where we had this array,

197
00:14:27,100 --> 00:14:31,120
but we did and reverse all of the elements of the array.

198
00:14:31,420 --> 00:14:35,290
So we did a reverse of array and we wrote this logic for that.

199
00:14:35,290 --> 00:14:40,270
And by the end if a print it was printing the array elements in reverse order, right?

200
00:14:40,270 --> 00:14:43,840
So the elements were being swapped here in each iteration.

201
00:14:43,840 --> 00:14:51,340
So if you want to do that, then we have to go for the traditional third because we need to in each

202
00:14:51,340 --> 00:14:55,240
iteration, we need to swap the elements and so we need access to the index.

203
00:14:55,240 --> 00:14:57,580
So there we were transforming the array.

204
00:14:57,850 --> 00:15:00,010
So that's when we would need that.

205
00:15:00,010 --> 00:15:08,410
And the second thing is, if we want to do a parallel iteration, we parallel iteration is in each iteration

206
00:15:08,410 --> 00:15:13,630
of our loop, we have multiple arrays that we need to iterate over.

207
00:15:14,020 --> 00:15:17,620
We need to iterate through multiple arrays in the same iteration.

208
00:15:17,620 --> 00:15:22,450
Then we call it as parallel iteration, and for each would not support that.

209
00:15:22,450 --> 00:15:24,790
So let's just take this one, for instance.

210
00:15:26,810 --> 00:15:27,800
Actually this one.

211
00:15:28,610 --> 00:15:30,680
But we don't need a nested fir.

212
00:15:33,980 --> 00:15:36,590
We can take this here x.

213
00:15:38,570 --> 00:15:39,290
And.

214
00:15:40,060 --> 00:15:41,140
Stick it here.

215
00:15:41,230 --> 00:15:45,280
And we can initialize j equals zero over here.

216
00:15:45,580 --> 00:15:46,900
And we would say.

217
00:15:48,010 --> 00:15:49,540
G plus plus.

218
00:15:49,540 --> 00:15:51,520
And we can remove this whole thing.

219
00:15:53,240 --> 00:15:56,770
So it's just a single iteration single for loop.

220
00:15:56,780 --> 00:16:00,170
So it would print dice one of zero, dice two of zero and so on.

221
00:16:00,410 --> 00:16:01,880
So let me just.

222
00:16:07,190 --> 00:16:07,430
Okay.

223
00:16:07,430 --> 00:16:10,400
Let me just put an empty line there.

224
00:16:15,130 --> 00:16:16,030
So here it is.

225
00:16:16,030 --> 00:16:17,200
This is the last one.

226
00:16:17,560 --> 00:16:21,330
So this is a parallel iteration of two arrays.

227
00:16:21,340 --> 00:16:27,250
So if we want to do that, we have to go for traditional four, because with for each statement, we

228
00:16:27,250 --> 00:16:30,220
can have only a single array.

229
00:16:30,520 --> 00:16:33,790
We cannot have multiple because that's the syntax of for each.

230
00:16:34,030 --> 00:16:35,560
So that's the parallel iteration.

231
00:16:35,560 --> 00:16:37,360
And third one is.

232
00:16:38,760 --> 00:16:40,320
Backward iteration.

233
00:16:40,650 --> 00:16:48,270
So if you have to do it back, if you have to iterate backwards, then you have to go for traditional

234
00:16:48,360 --> 00:16:49,530
first statement.

235
00:16:49,530 --> 00:16:56,400
And if you recall in the previous lecture also before we implemented this, before we did the reversal,

236
00:16:56,430 --> 00:17:03,060
we actually had a first statement where we were displaying the elements from the backward direction,

237
00:17:03,060 --> 00:17:06,359
and so the index variable had to be documented.

238
00:17:06,660 --> 00:17:13,440
So if ever we have to do something like that, we have to use traditional fur and with for each, it

239
00:17:13,440 --> 00:17:16,920
is always going to be only forward iteration.

240
00:17:17,310 --> 00:17:25,050
So that said and the item, the item 46 in the effective Java book also talks about one more scenario

241
00:17:25,050 --> 00:17:26,520
called us filtering.

242
00:17:26,700 --> 00:17:32,160
So filtering comes into play when we are looking at other data structures from Collections Framework

243
00:17:32,160 --> 00:17:38,280
chapter, where as we are iterating in a given iteration, we would have an element and if we want to

244
00:17:38,280 --> 00:17:43,740
remove it, that's a scenario where we would need something like a traditional first statement.

245
00:17:43,740 --> 00:17:46,290
And this for each will not work for that.

246
00:17:46,590 --> 00:17:47,850
So that's one example.

247
00:17:47,850 --> 00:17:54,690
But since we are not dealing with those data structures here, we do not have that example here.

248
00:17:54,990 --> 00:17:57,060
So we are not going to discuss it any further.

249
00:17:57,060 --> 00:18:00,480
But something like that will be discussed in the Collections Framework chapter.

250
00:18:00,630 --> 00:18:01,670
So that's about it.

251
00:18:01,680 --> 00:18:03,400
So that's the for each statement.

252
00:18:03,420 --> 00:18:09,870
It is mainly useful for conveniently iterating through arrays and other data structures.

253
00:18:10,320 --> 00:18:12,450
So it is it is used as an alternative.

254
00:18:12,450 --> 00:18:20,040
So to this common template that we used to have with traditional FA and it has a much simpler syntax

255
00:18:20,040 --> 00:18:27,660
and it doesn't have any performance penalty and it also eliminates any opportunities for error.

256
00:18:28,290 --> 00:18:29,490
So that's the for each.

257
00:18:29,490 --> 00:18:34,590
So whenever it is possible, you have to use for each loops as this item recommends.

258
00:18:34,590 --> 00:18:37,050
Prefer for each loops to traditional for loops.

259
00:18:37,410 --> 00:18:38,130
That's it.

260
00:18:38,160 --> 00:18:41,700
Thank you and happy coding and see you in the next lecture.

