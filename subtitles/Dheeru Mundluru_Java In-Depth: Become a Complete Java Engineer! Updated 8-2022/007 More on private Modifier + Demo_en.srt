1
00:00:02,090 --> 00:00:02,910
Hello there.

2
00:00:02,930 --> 00:00:04,090
This is De La Rue.

3
00:00:04,130 --> 00:00:10,250
And welcome back and this short lecture, I just want to highlight an interesting point about private

4
00:00:10,250 --> 00:00:13,490
modifier, something that we need to be aware of.

5
00:00:14,750 --> 00:00:20,090
We know that a member declared with private modifier is private to the class.

6
00:00:20,360 --> 00:00:23,960
However, that member is not private.

7
00:00:23,990 --> 00:00:26,420
Among the objects of its class.

8
00:00:26,870 --> 00:00:35,420
In other words, an object of a class can access private members of another object of the same class.

9
00:00:35,990 --> 00:00:37,310
Let's look at an example.

10
00:00:38,590 --> 00:00:41,530
This is a stripped down version of our student class.

11
00:00:41,770 --> 00:00:48,310
Here we have the student class with variable ID declared as private, and this class has two objects

12
00:00:48,310 --> 00:00:51,790
referenced by the variables S1 and S2.

13
00:00:52,180 --> 00:00:57,880
And there is also the class course with its own object referenced by the variable C one.

14
00:00:58,750 --> 00:01:07,570
Now object as one can access ID field of object as to even though ID is private to S2.

15
00:01:08,170 --> 00:01:15,010
That's because, as I mentioned earlier, objects of a class can access each other's private stuff.

16
00:01:15,730 --> 00:01:21,910
However, this is not possible as these are objects of different classes.

17
00:01:22,240 --> 00:01:27,160
So course object cannot access private members of student object.

18
00:01:28,090 --> 00:01:35,890
So once again, if something is declared private, it means it is private to its class, but not among

19
00:01:35,890 --> 00:01:37,570
the objects of its class.

20
00:01:38,890 --> 00:01:42,700
Next question that we should have is why is it so?

21
00:01:43,270 --> 00:01:47,000
That is, why is it variable, not private?

22
00:01:47,020 --> 00:01:49,180
Among the objects of its class.

23
00:01:50,190 --> 00:01:56,970
And that's because a private member is being accessed in the same class in which it is declared.

24
00:01:57,480 --> 00:02:06,810
And in our example, the expression as to ID is within the student class, which is also declaring the

25
00:02:06,810 --> 00:02:08,639
ID variable as private.

26
00:02:09,240 --> 00:02:16,950
So because we are accessing a variable declared in the same class and not some other class, such an

27
00:02:16,950 --> 00:02:18,510
access is being permitted.

28
00:02:19,110 --> 00:02:25,680
So since both variable declaration and variable access is happening within the same class definition

29
00:02:25,800 --> 00:02:29,550
that is under the same ownership, it is being permitted.

30
00:02:30,530 --> 00:02:37,520
Now here in this example, we are using a variable, but this applies to other class members too, like

31
00:02:37,520 --> 00:02:38,540
private methods.

32
00:02:39,080 --> 00:02:41,750
Now let's go ahead and see this in action.

33
00:02:44,220 --> 00:02:44,370
Okay.

34
00:02:44,490 --> 00:02:48,630
As part of this demonstration, let's consider a realistic use case.

35
00:02:49,200 --> 00:02:53,490
Typically, as a software is executing, we have many objects getting created.

36
00:02:54,000 --> 00:02:59,010
For instance, if we run this program, the student test class, you know, we are having these three

37
00:02:59,010 --> 00:03:00,900
different objects getting created.

38
00:03:01,500 --> 00:03:08,250
And sometimes we may have a new student object and we would have to check if that student object is

39
00:03:08,250 --> 00:03:11,760
a duplicate of any of these three student objects.

40
00:03:12,420 --> 00:03:20,910
So there is this data structure called hash set, which we will discuss later when we get to collections

41
00:03:20,910 --> 00:03:21,780
framework.

42
00:03:21,840 --> 00:03:28,920
But Hazard is a data structure which stores elements, and those elements have to be unique elements.

43
00:03:29,160 --> 00:03:37,320
So for instance, if this particular has set if a has set has three elements let's say A, C, S, C

44
00:03:37,350 --> 00:03:38,220
and F.

45
00:03:38,640 --> 00:03:46,560
Now, if you try to add a new element, c, c is already there, then has set will not add that element

46
00:03:46,560 --> 00:03:52,170
because it is considered as a duplicate and has said keeps only unique elements.

47
00:03:52,650 --> 00:03:55,440
So it does not allow any duplicate elements.

48
00:03:56,070 --> 00:03:58,870
Similarly, if we add these three elements.

49
00:03:58,870 --> 00:03:59,490
Student one.

50
00:03:59,490 --> 00:04:02,040
Student two, one, two and three into the hash set.

51
00:04:02,520 --> 00:04:11,160
And now let's say there is a new student called Student four and let's assume that it has the same state

52
00:04:11,160 --> 00:04:12,510
as Student three.

53
00:04:12,810 --> 00:04:16,680
So this is student four and it has the same state as student three.

54
00:04:16,680 --> 00:04:19,980
So it will have all of these variable values.

55
00:04:20,079 --> 00:04:21,450
OC Just like here.

56
00:04:21,690 --> 00:04:29,040
So in this case, if the hash set has these three elements and if we try to add the student four, then

57
00:04:29,040 --> 00:04:29,940
it shouldn't add.

58
00:04:30,680 --> 00:04:31,340
Now.

59
00:04:31,340 --> 00:04:35,540
The thing is for that, Hassett uses a method called us equals.

60
00:04:36,230 --> 00:04:40,550
Now, we also know that we have this equality operator.

61
00:04:40,580 --> 00:04:50,360
Now, if you do, let's say student three is equals to student four then this will not work because

62
00:04:50,360 --> 00:04:53,600
they are referencing to different objects.

63
00:04:53,600 --> 00:04:54,200
Right.

64
00:04:54,200 --> 00:05:00,740
And equality operator compares the identities of these objects, which is a memory addresses and they

65
00:05:00,740 --> 00:05:03,920
are going to be different because they are different objects.

66
00:05:03,920 --> 00:05:10,280
So asset set users and equals method and let's also use a similar equals method here.

67
00:05:10,520 --> 00:05:17,540
And an equals method can just compare, let's say, for instance, the ID values because the ID is unique

68
00:05:17,540 --> 00:05:18,520
to each object.

69
00:05:18,530 --> 00:05:22,700
It compares the ID values of this object versus this object.

70
00:05:22,700 --> 00:05:26,690
And if they are equal, then we can say that Student four is a duplicate of.

71
00:05:26,690 --> 00:05:27,470
Student three.

72
00:05:28,310 --> 00:05:33,980
So let us write such an ID, such a method.

73
00:05:34,190 --> 00:05:38,870
And let's go here, because this is a static method.

74
00:05:38,870 --> 00:05:41,810
Let's write a static method.

75
00:05:43,030 --> 00:05:43,870
Static.

76
00:05:44,260 --> 00:05:49,840
Let's say it returns boolean equals and it takes two objects.

77
00:05:51,040 --> 00:05:55,750
Student as one and student as two.

78
00:05:57,550 --> 00:05:58,300
And.

79
00:05:59,400 --> 00:06:01,620
Let's say it has to return boolean.

80
00:06:01,620 --> 00:06:10,770
So it takes the ID in the first parameter and it compares with the ID of the second object.

81
00:06:10,950 --> 00:06:16,440
So if they are equal, it means that S2 is a duplicate of S1.

82
00:06:16,740 --> 00:06:19,650
Otherwise it returns a false right.

83
00:06:19,680 --> 00:06:21,690
Now here let's declare.

84
00:06:21,690 --> 00:06:24,100
Now, one thing is in the student class.

85
00:06:24,120 --> 00:06:27,630
Let's make this private, because that's what we are testing here.

86
00:06:28,080 --> 00:06:28,830
This is private.

87
00:06:28,830 --> 00:06:31,080
So this is student and this is student test.

88
00:06:31,350 --> 00:06:34,050
And both are and the basics package here.

89
00:06:34,590 --> 00:06:35,340
Now here.

90
00:06:35,340 --> 00:06:37,890
Let's define a variable called Boolean.

91
00:06:37,920 --> 00:06:40,710
Let's call it ease duplicate.

92
00:06:41,600 --> 00:06:46,070
And we are invoking this equal method and let's pass.

93
00:06:46,070 --> 00:06:47,770
STUDENT three Comma.

94
00:06:47,780 --> 00:06:51,200
Student four So it needs to return a true here.

95
00:06:51,560 --> 00:06:53,060
Let's also print this.

96
00:06:57,040 --> 00:06:59,020
Let me also comment this out.

97
00:06:59,290 --> 00:07:00,310
We don't need this.

98
00:07:01,490 --> 00:07:02,990
Extra parent statements for now.

99
00:07:02,990 --> 00:07:07,250
Let's comment it and let's just print this one is duplicate.

100
00:07:08,400 --> 00:07:11,310
Now let's head over to our command prompt.

101
00:07:12,550 --> 00:07:14,260
And let's compile this.

102
00:07:15,830 --> 00:07:18,500
See it says to it gives to errors.

103
00:07:18,500 --> 00:07:25,460
It says it has private access and student write ID is in student class and it is private to the class,

104
00:07:25,460 --> 00:07:27,920
so you cannot access it from here.

105
00:07:28,280 --> 00:07:32,700
This we have seen in the last lecture to write with the fool method.

106
00:07:32,720 --> 00:07:35,390
So what we need to do is we need to move this.

107
00:07:37,270 --> 00:07:39,610
Into the student class.

108
00:07:41,380 --> 00:07:41,520
Okay.

109
00:07:41,720 --> 00:07:44,690
So let's just add it here at the very end.

110
00:07:45,670 --> 00:07:48,240
Och still anaesthetic method.

111
00:07:48,250 --> 00:07:55,480
So here let's just say student dot equals because it is a static method.

112
00:07:55,480 --> 00:07:56,800
We use the class name.

113
00:08:02,090 --> 00:08:04,070
I'll sign now.

114
00:08:05,000 --> 00:08:05,960
To execute.

115
00:08:05,960 --> 00:08:09,080
This is the command because we are using packages.

116
00:08:09,080 --> 00:08:14,510
So we have to say complete semantics, square dot basics, dot student test, right?

117
00:08:14,510 --> 00:08:16,490
We cannot just say Java student test.

118
00:08:16,490 --> 00:08:19,400
So this is what we have learned in our packages lectures.

119
00:08:19,820 --> 00:08:24,310
So if you execute it, it is printing through here, right?

120
00:08:24,320 --> 00:08:25,610
So that is what it is.

121
00:08:25,820 --> 00:08:31,280
But typically this equals method will be an instance method.

122
00:08:31,280 --> 00:08:36,200
So you would access it something like this instead of having it as.

123
00:08:37,830 --> 00:08:41,190
A static method you will invoke it on, let's say.

124
00:08:41,200 --> 00:08:43,409
Student three And you are passing.

125
00:08:43,409 --> 00:08:47,400
Student four So this is how it would typically be.

126
00:08:49,090 --> 00:08:49,200
Okay.

127
00:08:49,320 --> 00:08:51,480
So let me remove the static here.

128
00:08:51,780 --> 00:08:53,320
And this is equals.

129
00:08:53,340 --> 00:08:55,650
So this will be just student.

130
00:08:58,070 --> 00:08:58,850
Like this.

131
00:08:59,030 --> 00:09:06,290
So since this is being accessed on Student three So we will say ID, so this would be STUDENT three

132
00:09:06,320 --> 00:09:13,070
ID, which is the instance variable, and we are comparing with the student objects that that is getting

133
00:09:13,070 --> 00:09:13,370
passed.

134
00:09:13,370 --> 00:09:16,550
In our example it is student four And this is what is happening.

135
00:09:17,270 --> 00:09:21,680
So this is how it is typical typically implemented.

136
00:09:22,670 --> 00:09:25,730
Once again, let me pile this.

137
00:09:29,030 --> 00:09:30,090
So it's still true.

138
00:09:30,110 --> 00:09:38,300
So this is how it is and it is working fine because this is ID like I said earlier, the student object

139
00:09:38,570 --> 00:09:42,890
is declared in the same class as student.

140
00:09:43,220 --> 00:09:49,970
It is being used in the same class as student and the ID is also declared in the same class.

141
00:09:50,120 --> 00:09:56,960
So since it is all under the same class definition, it is being permitted even earlier when it is static,

142
00:09:57,140 --> 00:10:01,460
both as one point ID and as two point ID who are part of the same class.

143
00:10:01,460 --> 00:10:04,340
An ID is also declared in the same class.

144
00:10:04,970 --> 00:10:07,790
So that's just an interesting thing to be aware of.

145
00:10:08,000 --> 00:10:15,050
So when we say private, it is private to the class, but not private to the objects of its class.

146
00:10:15,770 --> 00:10:22,280
So an object of a class can access private stuff of other objects of the same class.

147
00:10:23,150 --> 00:10:23,960
That's about it.

148
00:10:23,990 --> 00:10:24,680
Thank you.

149
00:10:24,680 --> 00:10:26,390
And I will see you in the next lecture.

