WEBVTT
1
00:00:02.080 --> 00:00:03.160
Hi there.

2
00:00:03.190 --> 00:00:04.420
This is Lulu.

3
00:00:04.420 --> 00:00:05.500
And welcome back.

4
00:00:05.620 --> 00:00:08.109
Let's now look at control flow statements.

5
00:00:08.680 --> 00:00:15.310
A control flow statement, as the name implies, is a statement that affects the flow of control in

6
00:00:15.310 --> 00:00:16.090
your program.

7
00:00:16.540 --> 00:00:19.870
And it does that by using one or more Boolean conditions.

8
00:00:20.350 --> 00:00:25.870
If a particular Boolean condition is true, then it may execute a particular set of statements, and

9
00:00:25.870 --> 00:00:30.460
if the condition is false, then it may execute a different set of statements.

10
00:00:30.940 --> 00:00:36.910
For instance, if we consider a home loan approval program, then the statements that get executed for

11
00:00:36.910 --> 00:00:41.800
one user could be different from the statements that get executed for a different user.

12
00:00:42.010 --> 00:00:44.860
And it all depends upon Boolean conditions.

13
00:00:45.460 --> 00:00:53.140
For example, if we consider a user who is 30 years old and who draws a salary of 50,000, then it may

14
00:00:53.140 --> 00:00:55.180
satisfy one particular condition.

15
00:00:55.180 --> 00:00:59.200
And based on that, a particular set of statements would get executed.

16
00:00:59.470 --> 00:01:05.560
Similarly, for someone who is older and who draws a different amount of salary, then a different condition

17
00:01:05.560 --> 00:01:09.790
would get satisfied and a different set of statements would get executed.

18
00:01:10.420 --> 00:01:16.870
So let's get started with the if statement and control flow statements also involves other statements

19
00:01:16.870 --> 00:01:22.150
like the switch statement for statement and so on, which we will look at in subsequent lectures.

20
00:01:22.510 --> 00:01:28.270
For now, let's get started with if statement and you are already familiar with the basic syntax of

21
00:01:28.270 --> 00:01:33.970
the if statement, but there is more to it and we are going to learn about it in this particular lecture.

22
00:01:34.690 --> 00:01:42.160
So here we are in the Basics Demo class and we have a new method here called F statement in order to

23
00:01:42.160 --> 00:01:45.910
learn about if statement this will be invoked from the main method.

24
00:01:46.210 --> 00:01:50.020
So let's just consider the home loan approval example.

25
00:01:50.020 --> 00:01:56.290
And these are the variables that we have h salary and has bad credit and they represent the state of

26
00:01:56.290 --> 00:01:57.730
one particular user.

27
00:01:58.000 --> 00:02:04.840
So age is 27, salary is 50,000 and let's just say that has bad credit as false and we will write a

28
00:02:04.840 --> 00:02:06.490
bunch of conditions.

29
00:02:06.490 --> 00:02:12.910
And if this state satisfies one of those conditions, then the loan would be approved and the true would

30
00:02:12.910 --> 00:02:13.510
be written.

31
00:02:14.020 --> 00:02:17.890
So loan approval is represented by this variable called approved.

32
00:02:17.920 --> 00:02:19.480
Initially, it is false.

33
00:02:19.630 --> 00:02:25.480
And if the condition satisfies, if the state satisfies one of the conditions, then the approved would

34
00:02:25.480 --> 00:02:29.050
be set to true, which means the loan is approved.

35
00:02:29.650 --> 00:02:30.850
So let's get started.

36
00:02:30.850 --> 00:02:35.200
So here an F statement starts off like this.

37
00:02:35.200 --> 00:02:40.480
It has parentheses and it can also have a body, it will have a body.

38
00:02:40.990 --> 00:02:43.030
And these braces are optional.

39
00:02:43.150 --> 00:02:45.790
But this parentheses here is mandatory.

40
00:02:45.790 --> 00:02:50.050
And in between the parentheses you need to have a boolean expression.

41
00:02:51.660 --> 00:02:56.040
Now, if you have something other than a Boolean expression, then you would get a compilation error.

42
00:02:56.310 --> 00:02:58.410
So it's got to be a Boolean expression.

43
00:02:58.410 --> 00:03:03.450
For instance, let's make it H, ages N and let's just compile here.

44
00:03:03.450 --> 00:03:05.070
So I'm in the basics directory.

45
00:03:07.460 --> 00:03:12.950
So it says incompatible types and cannot be converted to boolean.

46
00:03:12.950 --> 00:03:18.320
So a boolean is is expected here, but we have an end which cannot be converted to boolean.

47
00:03:18.500 --> 00:03:20.510
So that's what the compiler errors is.

48
00:03:20.510 --> 00:03:23.510
So it has to be something like this.

49
00:03:24.590 --> 00:03:29.080
Now, like I said earlier, you also need these parentheses.

50
00:03:29.090 --> 00:03:31.520
So let's look at the output here.

51
00:03:31.650 --> 00:03:32.630
So recompile.

52
00:03:33.650 --> 00:03:39.200
So it's it gives us to compilation errors and it tells us about the left and the right parentheses.

53
00:03:39.200 --> 00:03:41.750
So the parentheses is expected.

54
00:03:41.750 --> 00:03:43.580
So let's put that back.

55
00:03:44.720 --> 00:03:53.480
And let's write our condition here, let's say, and age less than or equal to 35 and.

56
00:03:54.750 --> 00:03:55.800
Salary.

57
00:03:59.920 --> 00:04:00.220
Here.

58
00:04:00.220 --> 00:04:01.690
Let's make this 60,000.

59
00:04:02.320 --> 00:04:04.600
And this is greater than or equal to 50,000.

60
00:04:04.930 --> 00:04:05.650
Then.

61
00:04:06.950 --> 00:04:09.080
We need to set a proved to true.

62
00:04:11.440 --> 00:04:11.950
Okay.

63
00:04:11.980 --> 00:04:15.220
Now, let's also put a print statement.

64
00:04:20.790 --> 00:04:27.430
Let's put one here on one outside the F so we can clearly see the flow of control.

65
00:04:28.280 --> 00:04:28.940
Here.

66
00:04:28.940 --> 00:04:32.510
Let's just copy the statement and let's print it here.

67
00:04:33.660 --> 00:04:39.990
And if it gets printed, it means that this condition was true and we were inside this if block.

68
00:04:41.280 --> 00:04:42.030
Now.

69
00:04:42.980 --> 00:04:44.180
Let's see outside.

70
00:04:45.550 --> 00:04:45.710
Okay.

71
00:04:45.730 --> 00:04:47.290
So this is all we have.

72
00:04:47.650 --> 00:04:51.370
And a control flow statement is also a statement.

73
00:04:51.370 --> 00:04:57.550
So it can also end with semicolon, but it is not required for other statements like declaration and

74
00:04:57.550 --> 00:04:58.810
expression statements.

75
00:04:58.810 --> 00:05:04.090
It is mandatory to have a semicolon, but for control statements it is not mandatory.

76
00:05:04.090 --> 00:05:11.440
It is optional, but it is probably optional because these braces actually signify the end of this ending.

77
00:05:11.440 --> 00:05:17.170
Gray signifies the end of the end of the if statement or end of any control for statement.

78
00:05:17.170 --> 00:05:21.490
So that's probably one reason why a semicolon is not required.

79
00:05:21.760 --> 00:05:27.190
So this here age is 27, which is greater than or equal to 25, and it's also less than or equal to

80
00:05:27.190 --> 00:05:27.790
35.

81
00:05:27.790 --> 00:05:31.000
And the salary is also greater than or equal to 50,000.

82
00:05:31.000 --> 00:05:32.590
So the condition is true.

83
00:05:32.590 --> 00:05:39.190
And we get into this, this blog gets executed, the body of F and this statement will also be executed.

84
00:05:39.190 --> 00:05:40.450
So let's just compile.

85
00:05:43.580 --> 00:05:48.980
So as you can see, the condition is getting printed and outside F is also getting printed.

86
00:05:49.490 --> 00:05:53.500
So once the condition is true, the F block will get executed.

87
00:05:53.510 --> 00:06:00.410
And after that, the control moves to the next statement after the f f statement, and that gets executed.

88
00:06:00.830 --> 00:06:03.170
Now, if this happens to be false.

89
00:06:04.020 --> 00:06:09.150
Then this condition would fail and the control would simply come here.

90
00:06:09.480 --> 00:06:11.520
It would execute after the statement.

91
00:06:11.700 --> 00:06:18.540
So anything after the if statement would get would get executed, regardless of this condition being

92
00:06:18.570 --> 00:06:19.590
true or false.

93
00:06:20.820 --> 00:06:21.960
So that's that.

94
00:06:22.110 --> 00:06:30.030
And next thing is, if the body of the if statement has only a single statement, then we don't need

95
00:06:30.570 --> 00:06:31.560
the basis.

96
00:06:31.980 --> 00:06:33.300
Let's say this is the body.

97
00:06:33.300 --> 00:06:35.820
We have only a single statement in this case.

98
00:06:36.200 --> 00:06:39.060
We do not need the braces, the braces as optional.

99
00:06:39.420 --> 00:06:43.530
But it is recommended not to have it like this.

100
00:06:43.530 --> 00:06:46.060
So it is recommended to have the basis.

101
00:06:46.080 --> 00:06:51.870
That's because you might have written this logic, but in future you might want to add a couple of more

102
00:06:51.870 --> 00:06:53.970
statements into the body of the F.

103
00:06:54.270 --> 00:06:57.600
And by mistake, you might just add it here.

104
00:06:58.980 --> 00:07:06.750
And you might say, for instance, if there is a variable called interest and if it is 99% interest

105
00:07:06.750 --> 00:07:12.570
for the home loan, then you might be assuming that this would be part of of the if body.

106
00:07:12.720 --> 00:07:18.480
And but that's not true because still the if body includes only this particular statement.

107
00:07:18.480 --> 00:07:23.940
So this would get executed regardless of whether the statement is true or false.

108
00:07:24.210 --> 00:07:26.820
So even if it is false, this gets executed.

109
00:07:26.820 --> 00:07:28.740
But that's not the intention.

110
00:07:28.980 --> 00:07:30.310
That's not our intention.

111
00:07:30.330 --> 00:07:34.260
We would want to execute this only if this condition is true.

112
00:07:34.620 --> 00:07:38.580
So that's why it is always recommended to use braces.

113
00:07:38.610 --> 00:07:39.390
Now.

114
00:07:41.370 --> 00:07:45.400
Another thing to note is if it if the statements were like this.

115
00:07:45.420 --> 00:07:51.420
In this case, the compiler would just ignore this line and would consider this as the only statement

116
00:07:51.420 --> 00:07:52.860
in the body.

117
00:07:53.790 --> 00:07:56.430
So just don't think that this is also a statement.

118
00:07:56.430 --> 00:07:58.390
So that would be ignored by the compiler.

119
00:07:58.410 --> 00:08:00.540
So let me just put the braces back.

120
00:08:03.220 --> 00:08:06.370
And in one of the earlier lectures, we already looked at the block.

121
00:08:06.580 --> 00:08:10.750
So if the condition is false, then else block would be executed.

122
00:08:11.500 --> 00:08:13.540
Let's also put a print statement here.

123
00:08:16.090 --> 00:08:21.140
So if the condition is false, then the control comes here and it would print this one else.

124
00:08:21.160 --> 00:08:24.190
BLOCK And after that, outside would be printed.

125
00:08:24.640 --> 00:08:25.380
Now, else.

126
00:08:25.390 --> 00:08:26.920
BLOCK can also have.

127
00:08:28.520 --> 00:08:29.590
It can also be like this.

128
00:08:29.610 --> 00:08:34.020
It doesn't need to have the braces because it has only a single statement.

129
00:08:34.020 --> 00:08:38.360
But if it has more than one statement, then braces as mandatory.

130
00:08:38.360 --> 00:08:38.590
You.

131
00:08:39.370 --> 00:08:42.580
So that's one thing and block is completely optional.

132
00:08:43.000 --> 00:08:50.260
Now, if you have a series of conditions to test, then you can add something called as L's F blocks.

133
00:08:50.650 --> 00:08:52.630
And that's what we are going to do now.

134
00:08:52.840 --> 00:08:54.010
So let's say.

135
00:08:55.050 --> 00:08:57.030
We have a couple of more conditions.

136
00:08:58.390 --> 00:09:00.850
For users of different age group.

137
00:09:02.480 --> 00:09:03.590
Okay, that's enough.

138
00:09:03.620 --> 00:09:09.830
Now, let's say here, here we have h greater than or equal to 25 on h less than or equal to 35.

139
00:09:09.890 --> 00:09:15.830
Now, let's put the conditions for someone who is in between 36 and 45.

140
00:09:16.220 --> 00:09:22.610
So we will say h greater than 36 because 35 is already here.

141
00:09:22.640 --> 00:09:33.320
So if any if somebody is 36, then they need to get into this particular block and we'll say and h less

142
00:09:33.320 --> 00:09:34.970
than or equal to 45.

143
00:09:35.210 --> 00:09:43.250
Let's keep increasing by ten years and salary is greater than or equal to 70,000.

144
00:09:43.610 --> 00:09:50.810
And next here, let's say H is greater than 46.

145
00:09:51.710 --> 00:09:53.450
Actually, let's give this 35.

146
00:09:53.630 --> 00:09:54.350
I'm sorry.

147
00:09:54.350 --> 00:09:56.150
And this should be 45.

148
00:09:57.720 --> 00:10:01.710
So if somebody is 45 years old, then the control has to go here.

149
00:10:02.070 --> 00:10:09.660
But if it is between 45, that is if it is 46 and less than 55.

150
00:10:10.820 --> 00:10:13.310
OC and salary.

151
00:10:15.700 --> 00:10:16.480
90,000.

152
00:10:16.490 --> 00:10:21.190
Then we get into this block and let's put a similar statements here.

153
00:10:24.800 --> 00:10:26.930
Just the conditions would be different now.

154
00:10:31.360 --> 00:10:32.950
Let's bring this condition.

155
00:10:32.950 --> 00:10:34.390
So this is just to.

156
00:10:35.610 --> 00:10:38.310
Track the block that is getting executed.

157
00:10:39.570 --> 00:10:40.020
Okay.

158
00:10:40.170 --> 00:10:44.550
Now, let's also make this let's make it 37.

159
00:10:51.850 --> 00:11:00.070
OC so it executed the L block and that's because only one condition was to so age is 37 so this was

160
00:11:00.070 --> 00:11:05.320
fine and this was also fine, but salary was less than this.

161
00:11:05.680 --> 00:11:12.640
So in this case, what happens is it first test this condition, and if this is false, then it would

162
00:11:12.640 --> 00:11:13.660
look at this condition.

163
00:11:13.660 --> 00:11:19.660
So it's going to look at each of the conditions sequentially and then it would look at this condition.

164
00:11:19.660 --> 00:11:25.430
And if this is also wrong, then by default it goes into the block and that's the reason you have LS

165
00:11:25.450 --> 00:11:25.840
BLOCK.

166
00:11:26.380 --> 00:11:30.100
So let me make this 70,000.

167
00:11:30.370 --> 00:11:32.760
And in this case we are good.

168
00:11:32.770 --> 00:11:38.020
So the control goes into this block and after that it will exit the F statement.

169
00:11:38.020 --> 00:11:40.330
So it will never go into the block.

170
00:11:40.360 --> 00:11:46.090
It gets into the block if all of the conditions fail and there is no condition for ls.

171
00:11:46.240 --> 00:11:48.250
So now we change that.

172
00:11:48.250 --> 00:11:51.430
So let's go ahead and recompile and execute it.

173
00:11:55.650 --> 00:12:02.160
As you can see, it got into that second half block and after that, it exited the statement and the

174
00:12:02.160 --> 00:12:04.920
statement after that outside f got printed.

175
00:12:05.520 --> 00:12:08.160
So only one of them is going to get executed.

176
00:12:08.370 --> 00:12:09.690
So you should keep that in mind.

177
00:12:09.870 --> 00:12:16.140
And the next thing is this else block is optional and else has to be if it is there, it's got to be

178
00:12:16.140 --> 00:12:17.340
the last block.

179
00:12:17.490 --> 00:12:21.480
So else cannot be followed by another elseif block.

180
00:12:21.750 --> 00:12:23.130
So that's that.

181
00:12:23.670 --> 00:12:27.270
Now let's add another F here.

182
00:12:27.270 --> 00:12:35.460
So basically what we are trying to show is an F can have another F with an ID and that F can have another

183
00:12:35.460 --> 00:12:40.200
F two, and this nested ness can get to any depth also.

184
00:12:40.620 --> 00:12:45.960
So you can have nested F blocks and those nested blocks can have more nested F blocks.

185
00:12:46.260 --> 00:12:49.770
So let's just put another condition so it gets here.

186
00:12:49.770 --> 00:12:59.700
If the age is, for instance, greater than 55, so let's say age greater than 55, and instead of salary,

187
00:12:59.880 --> 00:13:04.620
if somebody is over 55, let's just use the credit for other users.

188
00:13:04.620 --> 00:13:06.450
We are not using the credit.

189
00:13:21.850 --> 00:13:23.830
So it just changed to 57.

190
00:13:23.830 --> 00:13:29.500
So it has to go into this loop and has bad credit would be false and not false is true.

191
00:13:29.650 --> 00:13:31.480
So let's execute this.

192
00:13:35.730 --> 00:13:36.470
There it is.

193
00:13:36.480 --> 00:13:41.250
So the control came into this block and this if condition was true.

194
00:13:41.490 --> 00:13:45.840
And so the statement got printed and after that there was the block.

195
00:13:46.140 --> 00:13:49.620
So that got printed and finally outside have got printed.

196
00:13:50.460 --> 00:13:57.660
So here this condition could have been here also as an LCF, but just wanted to show that we can also

197
00:13:57.660 --> 00:13:58.620
have nested FS.

198
00:13:58.620 --> 00:14:02.280
So any of these blocks can have nested F blocks if necessary.

199
00:14:02.280 --> 00:14:07.890
If statements and those if statements can also have more illustrative statements and they can also have

200
00:14:08.010 --> 00:14:10.050
more embedded if statements.

201
00:14:10.320 --> 00:14:12.570
So it can go to any depth.

202
00:14:14.770 --> 00:14:22.270
Now one other thing is, instead of having a single variable and returning it and setting that variable

203
00:14:22.270 --> 00:14:29.650
in these conditions and finally returning them here, you can actually return them right from within

204
00:14:29.650 --> 00:14:30.760
the blocks also.

205
00:14:31.240 --> 00:14:33.520
So, for example, we can have.

206
00:14:34.700 --> 00:14:38.270
Instead of this, you can directly return.

207
00:14:39.770 --> 00:14:40.370
From here.

208
00:14:40.370 --> 00:14:42.100
So it would be a true.

209
00:14:42.560 --> 00:14:43.610
And you copy this.

210
00:14:56.490 --> 00:14:57.030
In this case.

211
00:14:57.030 --> 00:14:58.740
Let's return a false here.

212
00:14:59.040 --> 00:15:01.080
So if this condition is not.

213
00:15:01.850 --> 00:15:07.670
Should we return a false even that was happening earlier too because a proved would be false and all

214
00:15:07.670 --> 00:15:08.930
of these conditions are failing.

215
00:15:08.930 --> 00:15:10.610
And finally, we were returning a false.

216
00:15:10.790 --> 00:15:13.160
Now let's compile and execute this.

217
00:15:16.580 --> 00:15:19.490
So it says unreachable statement.

218
00:15:20.300 --> 00:15:22.910
It says that one of the statements is unreachable.

219
00:15:22.910 --> 00:15:27.200
So if you see here in the first block, we are returning it.

220
00:15:27.200 --> 00:15:27.800
True.

221
00:15:27.890 --> 00:15:31.430
After that, we have this statement and we cannot have that.

222
00:15:31.700 --> 00:15:39.410
So after the return, if the control comes here, so we have this written statement and after that we

223
00:15:39.410 --> 00:15:42.230
have the statement which will never get executed.

224
00:15:42.230 --> 00:15:43.970
And compiler does not like that.

225
00:15:43.970 --> 00:15:44.750
So.

226
00:15:45.760 --> 00:15:49.840
To fix this, the written statement has to go like this.

227
00:15:49.960 --> 00:15:55.540
So that's why we have written statement after the pen statements in all of the other blogs.

228
00:15:56.080 --> 00:15:56.820
Now we are good.

229
00:15:56.830 --> 00:16:02.110
So it's also called as an unreachable statement because the control will never reach that statement.

230
00:16:02.140 --> 00:16:04.120
Now, let me change this.

231
00:16:04.870 --> 00:16:06.100
Uncommon this.

232
00:16:09.920 --> 00:16:14.120
Now, once again, it says that it is an unreachable statement.

233
00:16:14.120 --> 00:16:20.090
It says that this particular statement, which is pending outside F is not reachable.

234
00:16:20.480 --> 00:16:26.450
That's because at runtime control will definitely get into one of these blocks.

235
00:16:26.810 --> 00:16:30.070
If all of these conditions fail, then it will get into this block.

236
00:16:30.080 --> 00:16:35.300
And if this condition also fails, then this will for sure it will get executed.

237
00:16:35.660 --> 00:16:42.940
So all of the blocks have at least a written statement, and so this will never be reached.

238
00:16:42.950 --> 00:16:47.000
So that's the reason why it is giving that compilation error.

239
00:16:47.000 --> 00:16:49.700
So we need to comment that out or delete it.

240
00:16:50.540 --> 00:16:52.780
And one other thing is, let me.

241
00:16:53.210 --> 00:16:55.220
The last and final thing is this one.

242
00:16:55.220 --> 00:16:56.720
Let me comment this out.

243
00:16:57.020 --> 00:16:58.040
Now, let's see.

244
00:17:01.160 --> 00:17:03.810
So it says missing written statement.

245
00:17:03.830 --> 00:17:07.460
It means the method is missing a written statement.

246
00:17:07.640 --> 00:17:10.020
That's because we commented this out.

247
00:17:10.040 --> 00:17:17.540
So the compiler is going to look at all the possible paths that can be taken at runtime.

248
00:17:17.810 --> 00:17:23.480
So if this condition is true, the control would go here and runtime and there is a written statement.

249
00:17:23.720 --> 00:17:26.770
And the same goes with the second and the third.

250
00:17:26.780 --> 00:17:28.310
They also have written statements.

251
00:17:28.339 --> 00:17:34.670
Now, if you get into the third one, and if this one fails, then control comes here and there is no

252
00:17:34.670 --> 00:17:35.660
written statement.

253
00:17:35.900 --> 00:17:41.300
So every particular path should have a written statement.

254
00:17:41.600 --> 00:17:45.790
Otherwise you would get a compilation error, and when you see it, you can fix it.

255
00:17:45.800 --> 00:17:51.620
It's not a big issue, but just wanted to let you know that a written statement would be needed in all

256
00:17:51.620 --> 00:17:53.330
of the possible paths.

257
00:17:54.140 --> 00:18:02.030
So that's all there is to if statement there is nothing more to it and that's it and thank you and see

258
00:18:02.030 --> 00:18:04.100
you in the next lecture and happy coding.

