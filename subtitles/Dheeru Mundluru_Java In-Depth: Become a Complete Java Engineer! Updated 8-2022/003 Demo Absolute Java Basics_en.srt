1
00:00:02,080 --> 00:00:03,030
Hi there.

2
00:00:03,040 --> 00:00:04,140
This is Lou.

3
00:00:04,210 --> 00:00:05,140
And welcome back.

4
00:00:05,410 --> 00:00:11,710
Before we start looking at features such as variables and methods in this lecture, let's look at some

5
00:00:11,710 --> 00:00:15,190
really absolute basics of Java language.

6
00:00:15,520 --> 00:00:18,580
So here is what we are going to look at in this particular lecture.

7
00:00:18,700 --> 00:00:24,130
So we will look at the naming rules for classes, methods and variables.

8
00:00:24,250 --> 00:00:29,620
So there are some basic rules for naming classes, methods and variables, and we will start off by

9
00:00:29,620 --> 00:00:30,460
looking at that.

10
00:00:30,760 --> 00:00:35,140
Then Java is case sensitive and we will also see a few examples for that.

11
00:00:35,530 --> 00:00:40,500
And it's a very common activity to print some text onto the console.

12
00:00:40,510 --> 00:00:42,550
So we will see how that can be done.

13
00:00:42,580 --> 00:00:47,530
In fact, we have already done that in the previous section when we wrote the Hello World Program where

14
00:00:47,530 --> 00:00:48,760
we have printed the text.

15
00:00:49,810 --> 00:00:53,320
But we will see a little bit more on printing text to the console.

16
00:00:54,190 --> 00:00:58,420
Then it's also a common activity to write comments or disable code.

17
00:00:58,660 --> 00:01:05,200
So we will also look at the syntax that we have to do that and we will also look at the core arithmetic

18
00:01:05,200 --> 00:01:09,340
operations which are very commonly used like addition, subtraction and so on.

19
00:01:10,060 --> 00:01:16,330
So I have written this class called US Basics Demo, and it has been written in the basics directory.

20
00:01:16,570 --> 00:01:18,950
If you recall, we created this directory structure.

21
00:01:18,970 --> 00:01:20,730
Java In-Depth Source.

22
00:01:20,740 --> 00:01:22,710
Com Semantic Square Basics.

23
00:01:22,720 --> 00:01:24,910
So this class has been written there.

24
00:01:24,920 --> 00:01:31,480
So you should also go ahead and create this class and you can type in everything that I'm going to demonstrate

25
00:01:31,480 --> 00:01:31,990
here.

26
00:01:31,990 --> 00:01:35,320
And this class will also be uploaded onto the resources section.

27
00:01:36,540 --> 00:01:42,300
So the first thing is that naming rules for classes, methods and variables, it's going to be the same

28
00:01:42,300 --> 00:01:43,650
rules for all of these.

29
00:01:44,160 --> 00:01:53,270
So what it says is the first character of the name has to be either a letter or underscore or dolor.

30
00:01:53,670 --> 00:01:57,210
And if you have something else, then we would get a compilation error.

31
00:01:57,660 --> 00:01:59,070
So that's the first character.

32
00:01:59,070 --> 00:02:05,940
And the subsequent characters will once again be either letter, underscore or dolor, or in addition,

33
00:02:05,940 --> 00:02:07,470
we can also have numbers.

34
00:02:07,950 --> 00:02:09,990
So let's go ahead and test that first.

35
00:02:09,990 --> 00:02:10,800
Let's do this.

36
00:02:10,800 --> 00:02:12,330
Let's put a one here.

37
00:02:12,960 --> 00:02:15,310
So the first letter cannot be a number, right?

38
00:02:15,330 --> 00:02:17,460
It has to be either letter underscore or dolor.

39
00:02:17,460 --> 00:02:20,880
So in this case it's one, so it should give us a compilation error.

40
00:02:21,210 --> 00:02:22,380
So let's go ahead.

41
00:02:24,200 --> 00:02:25,640
So I'm compiling it.

42
00:02:26,750 --> 00:02:27,410
Here it is.

43
00:02:27,410 --> 00:02:29,450
It says that this is not right.

44
00:02:29,570 --> 00:02:32,330
So it's got to be basics.

45
00:02:33,350 --> 00:02:36,260
Similarly, let's also create some variables here.

46
00:02:36,530 --> 00:02:41,900
Let's say one ID is equal to zero.

47
00:02:43,440 --> 00:02:44,850
Let me recompile this.

48
00:02:46,220 --> 00:02:47,360
So it shows.

49
00:02:47,390 --> 00:02:49,460
It tells us that this is not right.

50
00:02:50,000 --> 00:02:52,360
So it's got to be one of those characters.

51
00:02:52,370 --> 00:02:54,080
Let's put an underscore here.

52
00:02:56,460 --> 00:02:57,720
And let's recompile.

53
00:02:59,100 --> 00:03:00,020
So it compiles fine.

54
00:03:00,030 --> 00:03:01,040
So underscore is fine.

55
00:03:01,050 --> 00:03:02,880
Similarly, dollar is also fine.

56
00:03:02,880 --> 00:03:06,360
Or you can also put a one here instead of one here.

57
00:03:06,360 --> 00:03:07,800
So this is also right.

58
00:03:11,540 --> 00:03:12,530
So that's what it is.

59
00:03:12,530 --> 00:03:13,460
So this is that.

60
00:03:13,700 --> 00:03:18,190
And the second thing is we cannot use any reserved keywords.

61
00:03:18,230 --> 00:03:19,550
So reserved keywords.

62
00:03:19,550 --> 00:03:23,720
Java has around 50 reserved keywords, including things like class.

63
00:03:23,720 --> 00:03:26,180
And so these are all reserved keywords.

64
00:03:26,180 --> 00:03:28,160
And let me show you all of the reserved keywords.

65
00:03:28,160 --> 00:03:30,620
So these are all of the resort keywords.

66
00:03:30,800 --> 00:03:35,210
And as we have newer Java versions, more keywords might be added to this.

67
00:03:35,480 --> 00:03:41,780
So these are around 50 keywords, so we cannot use any of them and you don't have to by heart any of

68
00:03:41,780 --> 00:03:42,170
these.

69
00:03:42,170 --> 00:03:45,620
So as we progress through the course, we'll be using all of these.

70
00:03:45,620 --> 00:03:51,860
And so by the end of the course, naturally you will avoid using these for any of our things, like

71
00:03:51,860 --> 00:03:54,260
variables or method names or class names.

72
00:03:54,260 --> 00:03:56,810
So let me just put a class name here.

73
00:03:59,730 --> 00:04:01,380
A variable called class.

74
00:04:02,070 --> 00:04:04,260
So let me compile this.

75
00:04:06,080 --> 00:04:08,670
So it says that we cannot use this.

76
00:04:08,960 --> 00:04:12,320
It's a reserved keyword, so let me delete it.

77
00:04:13,480 --> 00:04:16,360
So here the every this is a statement.

78
00:04:16,360 --> 00:04:20,470
So this is a declaration statement and every statement in Java ends with a semicolon.

79
00:04:20,470 --> 00:04:23,680
So if I remove that and if I recompile it.

80
00:04:25,690 --> 00:04:30,790
So it says that it's an error because a semicolon is expected at the end of the statement.

81
00:04:30,910 --> 00:04:36,820
So when you compile, so the compiler might report some errors and based on what it reports, you have

82
00:04:36,820 --> 00:04:41,590
to fix your program and then you have to recompile and run your program.

83
00:04:42,370 --> 00:04:43,720
So that is the result.

84
00:04:43,750 --> 00:04:45,100
Keywords and the naming rules.

85
00:04:45,100 --> 00:04:48,040
And you cannot also have duplicate names.

86
00:04:48,970 --> 00:04:52,600
For instance, we cannot create another variable called ID one.

87
00:04:55,900 --> 00:04:57,340
Let me clear the screen.

88
00:05:00,340 --> 00:05:09,010
So here it says variable ID one is already defined in the class basics demo, so we cannot do this.

89
00:05:09,010 --> 00:05:12,790
Similarly, we cannot also have duplicate methods.

90
00:05:12,790 --> 00:05:16,060
Let me create a simple method called void foo.

91
00:05:16,090 --> 00:05:19,840
Foo is the name of the method and opening on the closing brace.

92
00:05:19,840 --> 00:05:22,030
Let me create one more method with the same name.

93
00:05:22,830 --> 00:05:25,500
So this would also give us an error.

94
00:05:27,510 --> 00:05:31,060
You see it says method foo is already defined in the class.

95
00:05:31,080 --> 00:05:33,840
Here it says variable ID one is already defined.

96
00:05:33,840 --> 00:05:36,000
So we cannot have duplicates like this.

97
00:05:36,030 --> 00:05:38,280
So let me remove this.

98
00:05:40,270 --> 00:05:43,360
So next one is Java SE case sensitive?

99
00:05:43,630 --> 00:05:46,540
So in Java, everything is case sensitive.

100
00:05:46,570 --> 00:05:49,600
So let's define a few variables.

101
00:05:49,600 --> 00:05:53,440
Let's say ID and equals zero.

102
00:05:54,400 --> 00:05:58,540
Now let's create another variable with the same name i.

103
00:05:58,570 --> 00:06:00,070
But I is caps now.

104
00:06:01,930 --> 00:06:05,560
Now let's also create one more variable ID zero.

105
00:06:05,830 --> 00:06:08,800
So it's all three different variables having the same name.

106
00:06:08,950 --> 00:06:11,860
It's just that the case is waiting here.

107
00:06:11,860 --> 00:06:13,270
So let me compile.

108
00:06:13,280 --> 00:06:14,260
Recompile it.

109
00:06:15,680 --> 00:06:17,210
You see, it's perfectly valid.

110
00:06:17,240 --> 00:06:20,360
Similarly, you can also have methods.

111
00:06:26,690 --> 00:06:28,370
And that's perfectly valid, too.

112
00:06:29,000 --> 00:06:29,990
So that's that.

113
00:06:30,200 --> 00:06:34,700
Next, it is very important to print something to the console.

114
00:06:34,730 --> 00:06:37,730
So that's a very common activity in any programming language.

115
00:06:37,730 --> 00:06:39,150
So let's look at that.

116
00:06:39,170 --> 00:06:43,100
So for this, I'm going to take this piece of code.

117
00:06:44,800 --> 00:06:45,040
Okay.

118
00:06:45,040 --> 00:06:47,740
So this is this has been adapted from this resource.

119
00:06:47,950 --> 00:06:49,990
So let me copy it.

120
00:06:53,170 --> 00:06:56,740
I'm just doing it in the interest of time because there are a lot of statements here.

121
00:06:57,160 --> 00:07:03,310
So in order to print something, we use this print length statement here, print.

122
00:07:04,150 --> 00:07:12,310
So it's going to print this particular text onto the console and it will also advance the cursor to

123
00:07:12,310 --> 00:07:13,360
the next line.

124
00:07:13,660 --> 00:07:18,430
So that's what this little comment here says, advanced cursor to the beginning of next line.

125
00:07:18,430 --> 00:07:20,410
So that's what print line does.

126
00:07:20,470 --> 00:07:22,450
Then there is a method called print.

127
00:07:22,810 --> 00:07:29,830
It doesn't have Allen, so it prints the text, but the cursor would be would be advanced to the end

128
00:07:29,830 --> 00:07:30,560
of the string.

129
00:07:30,580 --> 00:07:34,000
In the earlier case, it would be advanced to the beginning of next line.

130
00:07:34,000 --> 00:07:36,310
So that's the difference between between them.

131
00:07:36,310 --> 00:07:38,160
So we will look at all of this.

132
00:07:38,170 --> 00:07:40,780
So let's go ahead and compile this thing.

133
00:07:43,630 --> 00:07:44,750
Compiles fine.

134
00:07:44,770 --> 00:07:45,760
Let me run it.

135
00:07:49,040 --> 00:07:50,300
And it doesn't run.

136
00:07:50,310 --> 00:07:54,200
That's because main method is not found in class basics.

137
00:07:55,490 --> 00:07:57,830
So we need to have the main method.

138
00:07:57,830 --> 00:08:02,180
So recall that the program execution starts from the main method.

139
00:08:02,180 --> 00:08:09,320
So if you execute this, so JVM would look for the main method and it starts executing from the main

140
00:08:09,320 --> 00:08:09,730
method.

141
00:08:09,740 --> 00:08:13,880
So since we don't have this particular method cannot be executed.

142
00:08:13,880 --> 00:08:16,070
So we need to have a main method here.

143
00:08:16,070 --> 00:08:17,480
So let's go ahead and write that.

144
00:08:27,160 --> 00:08:31,600
And we need to invoke the print method from the main method.

145
00:08:32,289 --> 00:08:35,110
So now we clean this up.

146
00:08:40,370 --> 00:08:42,110
So that's the output that we have.

147
00:08:42,350 --> 00:08:46,940
So GM is invoking the main method and the main method is invoking the print method.

148
00:08:46,940 --> 00:08:52,070
And in the print method, the first thing is this statement called inside print.

149
00:08:52,070 --> 00:08:53,540
So that's getting printed.

150
00:08:53,690 --> 00:08:57,360
But before that, two empty lines are getting printed.

151
00:08:57,380 --> 00:09:01,220
And the reason for that is because we have these notations here.

152
00:09:01,220 --> 00:09:03,100
It's called as a new line sequence.

153
00:09:03,110 --> 00:09:06,050
A new line sequence is the backslash, followed by DN.

154
00:09:06,200 --> 00:09:11,710
And since we have two of them, so each one, each new line sequence represents an empty line.

155
00:09:11,720 --> 00:09:16,010
And since we have two lines, two new line sequences, two empty lines are printed.

156
00:09:16,040 --> 00:09:21,860
So if ever you want to print an empty an empty line, so this is what you can do within the within this

157
00:09:21,860 --> 00:09:23,120
particular string.

158
00:09:23,450 --> 00:09:25,400
And then it's printing inside print.

159
00:09:25,700 --> 00:09:30,770
Now print like, as, like I said earlier, it advances the cursor to the next line.

160
00:09:30,770 --> 00:09:34,700
So it prints this and the cursor would be moved to the next line.

161
00:09:34,940 --> 00:09:36,950
And the next statement is Hello World.

162
00:09:36,950 --> 00:09:39,560
So Hello World also gets printed here in the next line.

163
00:09:39,770 --> 00:09:47,120
And since it's also an print line statement, so the cursor would be advanced to the next line and the

164
00:09:47,120 --> 00:09:50,030
third statement is the print alone without any text.

165
00:09:50,030 --> 00:09:53,900
In this case, it would print an empty line.

166
00:09:54,110 --> 00:09:59,990
So these are all the print line is just a method in some class and it's just that these are two different

167
00:09:59,990 --> 00:10:00,500
methods.

168
00:10:00,500 --> 00:10:06,500
This one is accepting a string and this one is not accepting any any input, but it would also print

169
00:10:06,500 --> 00:10:07,400
an empty line.

170
00:10:08,180 --> 00:10:09,890
So these are two different methods.

171
00:10:09,890 --> 00:10:14,330
And then because it is a print line, the cursor would be advanced to the next line.

172
00:10:14,330 --> 00:10:16,430
And in the next line we are printing hello world.

173
00:10:16,430 --> 00:10:19,910
So Hello World is getting printed but it is a print statement.

174
00:10:19,910 --> 00:10:22,580
So the cursor is advanced to the end of the text.

175
00:10:22,580 --> 00:10:24,980
So the cursor would be around here.

176
00:10:25,250 --> 00:10:26,150
Around here.

177
00:10:26,150 --> 00:10:28,070
And the next statement is hello.

178
00:10:28,070 --> 00:10:35,030
So hello is getting printed here but it is a print line so the cursor would print that and onward advance

179
00:10:35,030 --> 00:10:36,380
the cursor to the next line.

180
00:10:36,650 --> 00:10:40,580
And in the next line an empty space, a white space is being printed here.

181
00:10:40,820 --> 00:10:46,550
So white space would be printed and the cursor is advanced to the, to this position after the white

182
00:10:46,550 --> 00:10:47,060
space.

183
00:10:47,360 --> 00:10:50,570
And then finally the print statement is printing world.

184
00:10:50,570 --> 00:10:58,250
So we are printing well here and the cursor is advanced to this position to the end of the exclamation.

185
00:10:58,640 --> 00:11:01,790
So that's with the print statement.

186
00:11:01,820 --> 00:11:03,920
Now print statements.

187
00:11:03,920 --> 00:11:06,920
Now there are also these, these comments.

188
00:11:06,920 --> 00:11:10,250
So the next one is the comments or disabling code.

189
00:11:10,250 --> 00:11:13,100
So the there are two ways in which you can do that.

190
00:11:13,100 --> 00:11:15,620
So one is you will use this double slash.

191
00:11:15,710 --> 00:11:22,340
So double slash means ignore everything after that, which means ignore the rest of the line.

192
00:11:22,490 --> 00:11:29,750
And it is mainly useful for writing a single line comment like in this case, printing to console or

193
00:11:29,750 --> 00:11:33,350
printing a space or to disable the entire line.

194
00:11:33,350 --> 00:11:39,530
So if you want to disable this particular line, you can also say this and you will see that.

195
00:11:43,790 --> 00:11:45,020
You say you can see the difference.

196
00:11:45,020 --> 00:11:47,190
The word world is not printed here.

197
00:11:47,210 --> 00:11:49,590
That's because we commented this statement.

198
00:11:49,610 --> 00:11:53,720
So if you want to comment your code, then you can do that.

199
00:11:53,720 --> 00:11:57,200
Or if you want to write a comment, then you would use this.

200
00:11:57,410 --> 00:12:00,980
But this double slash is used for single line comments.

201
00:12:00,980 --> 00:12:05,670
Or if you can, you can have some statement and the statement can be followed after that.

202
00:12:05,690 --> 00:12:08,050
After that, you can follow it with this kind of a comment.

203
00:12:08,060 --> 00:12:13,850
So for single line comments or commenting, a single line of code, you can use this double slash.

204
00:12:14,090 --> 00:12:18,400
And the second way of doing it is called as block codes.

205
00:12:18,410 --> 00:12:20,990
So block codes would be something like this.

206
00:12:20,990 --> 00:12:22,400
So let me put a block code here.

207
00:12:22,400 --> 00:12:29,810
It starts with a slash and asterisk and then you will also have it also ends with asterisk and a slash.

208
00:12:29,810 --> 00:12:34,880
So it starts with slash and asterisks and ends with asterisk and a slash.

209
00:12:35,540 --> 00:12:38,510
So with this, this whole code is disabled.

210
00:12:44,460 --> 00:12:48,210
And you can see that none of this text is being printed here.

211
00:12:48,240 --> 00:12:50,700
Hello world with double exclamations.

212
00:12:51,960 --> 00:12:53,910
So this all of this code has been disabled.

213
00:12:54,150 --> 00:13:02,310
So if you want to disable large areas of code or if you want to write some detailed description about

214
00:13:02,310 --> 00:13:06,150
a piece of complex logic, then you would use block codes.

215
00:13:06,690 --> 00:13:09,120
So everything in between is omitted.

216
00:13:09,120 --> 00:13:16,200
So the compiler will just ignore all of that will ignore this piece of text, will also ignore anything

217
00:13:16,200 --> 00:13:17,700
in between the block codes.

218
00:13:17,880 --> 00:13:21,750
So that's how you would comment or comment or code.

219
00:13:21,780 --> 00:13:28,380
Now, in a few sections from now, and I think in section six, we look at coding conventions and they

220
00:13:28,380 --> 00:13:33,150
will and there we will explore a little bit more about how we need to write comments.

221
00:13:33,150 --> 00:13:35,790
So we will look at some conventions for writing comments.

222
00:13:36,390 --> 00:13:37,440
So that's what that.

223
00:13:38,390 --> 00:13:38,620
Okay.

224
00:13:38,630 --> 00:13:41,660
So next, finally, let's also look at some arithmetic operations.

225
00:13:41,660 --> 00:13:47,510
So we are all very familiar with addition subtraction and division and those core arithmetic operations.

226
00:13:47,900 --> 00:13:51,200
So you would let's just define two variables.

227
00:13:51,320 --> 00:13:53,330
I said six.

228
00:13:59,690 --> 00:14:01,460
That's an A-plus, Jay.

229
00:14:02,950 --> 00:14:04,450
So we are adding that.

230
00:14:14,170 --> 00:14:15,250
Minus.

231
00:14:16,160 --> 00:14:22,130
Multiplication division and let's also do modulus, which gives us the remainder.

232
00:14:22,520 --> 00:14:25,340
So this is what we have so saved.

233
00:14:30,980 --> 00:14:33,380
Recompile and then execute it.

234
00:14:33,980 --> 00:14:35,210
So here it is.

235
00:14:35,220 --> 00:14:39,360
So it is being printed here because we are adding six and two.

236
00:14:39,380 --> 00:14:42,830
So as you can see here, so the print statement got executed.

237
00:14:42,830 --> 00:14:45,380
So all of these statements got executed first.

238
00:14:45,500 --> 00:14:49,640
And the last statement in the print here is a print statement.

239
00:14:49,640 --> 00:14:54,320
Here is also a print statement which would advance the cursor to the end of the string.

240
00:14:54,320 --> 00:14:55,430
So that's what happened.

241
00:14:55,580 --> 00:15:00,140
And then after that, the print line statement here is where we are doing an addition.

242
00:15:00,140 --> 00:15:06,350
So eight is getting printed here and the cursor is moved to the next line and here we have subtraction,

243
00:15:06,350 --> 00:15:12,650
six minus two is four, then multiplication six into two is 12, then six by two is three.

244
00:15:12,650 --> 00:15:13,640
That's the division.

245
00:15:13,790 --> 00:15:16,880
And finally we are doing the modulus here.

246
00:15:16,880 --> 00:15:19,610
So Modulus operation gives the remainder of the division.

247
00:15:19,610 --> 00:15:24,080
So we get a six more two would be zero, the remainder is zero.

248
00:15:24,350 --> 00:15:26,390
So those are the core arithmetic operations.

249
00:15:26,390 --> 00:15:33,110
And in the next chapter we will also in the next chapter we will also explore more about arithmetic

250
00:15:33,110 --> 00:15:33,890
operations.

251
00:15:34,460 --> 00:15:36,470
So those are the absolute basics.

252
00:15:36,500 --> 00:15:38,540
Now here there are two dots here.

253
00:15:38,540 --> 00:15:45,860
So essentially system is just a class name in the Java library and system has this variable called out.

254
00:15:45,860 --> 00:15:50,660
So we are saying system out and that's how we are accessing this variable.

255
00:15:50,690 --> 00:15:57,320
And this variable corresponds to an object and that object has these methods print, print, length.

256
00:15:57,410 --> 00:15:59,150
So that's how we are printing it.

257
00:16:00,470 --> 00:16:02,390
Just let me just show it to you in my eclipse.

258
00:16:02,390 --> 00:16:03,770
So this is one statement.

259
00:16:03,770 --> 00:16:10,220
So this is system and if I click on this thing f three, it shows.

260
00:16:10,220 --> 00:16:15,500
So this is the system class and within that there is this variable called out and it is of type print

261
00:16:15,500 --> 00:16:15,980
stream.

262
00:16:15,980 --> 00:16:21,380
So print stream is another class and the class print stream actually has those print methods, print

263
00:16:21,380 --> 00:16:22,550
and print align methods.

264
00:16:24,080 --> 00:16:25,400
So that's all there is.

265
00:16:25,400 --> 00:16:27,620
So this is the basic demo class.

266
00:16:27,620 --> 00:16:32,030
And so the first method that we have written is print.

267
00:16:32,120 --> 00:16:37,280
And going forward we will be writing more methods into this particular class.

268
00:16:38,090 --> 00:16:42,860
So for, you know, for the, for the first few sections, we have the basic language series.

269
00:16:42,860 --> 00:16:46,700
So for all of that, we will be using this class basics demo.

270
00:16:46,910 --> 00:16:53,150
And as we learn new topics and as we are doing new demos, the topic is associated with the demo.

271
00:16:53,150 --> 00:16:59,030
So we will write a method and we will learn the topic by by writing some code in that method.

272
00:16:59,030 --> 00:17:01,040
So we will be extending this class.

273
00:17:01,040 --> 00:17:06,280
And like I said earlier, this class will be available in the resources section and that's about it

274
00:17:06,290 --> 00:17:10,849
to type in everything that has been demonstrated in this particular lecture.

275
00:17:11,089 --> 00:17:13,099
Thank you and happy coding.

