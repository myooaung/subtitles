WEBVTT
1
00:00:02.080 --> 00:00:03.020
Hi there.

2
00:00:03.040 --> 00:00:04.260
This is the model room.

3
00:00:04.630 --> 00:00:06.370
So we are not done with the chapter.

4
00:00:06.460 --> 00:00:12.880
And I would believe that it's a pretty solid coverage of the core object oriented design concepts.

5
00:00:14.080 --> 00:00:17.350
And these are some of the object oriented features which we discussed.

6
00:00:17.680 --> 00:00:24.340
I think the most important thing we did was that to understand the why part, the part where most engineers

7
00:00:24.340 --> 00:00:29.710
get confused is when to use an abstract class versus when to use an interface.

8
00:00:30.250 --> 00:00:33.160
There is always some fuzziness around these concepts.

9
00:00:33.790 --> 00:00:38.110
I think we addressed this quite effectively by using our case study as a background.

10
00:00:39.060 --> 00:00:44.670
Additionally, we also looked at how interfaces can be classified into mixed sense and representative

11
00:00:44.670 --> 00:00:48.840
interfaces, and I think that's pretty important as most books are.

12
00:00:48.840 --> 00:00:52.560
Courses generally do not discuss in the way we have done it.

13
00:00:53.190 --> 00:00:59.400
Finally, we also discussed the motivation behind introducing default on static methods and interfaces

14
00:00:59.400 --> 00:01:00.300
in Java eight.

15
00:01:00.690 --> 00:01:06.180
So the motivation part is very important and we looked at them by using some realistic scenarios as

16
00:01:06.180 --> 00:01:09.540
examples so that we could feel the need for those features.

17
00:01:10.050 --> 00:01:15.540
So I think overall we have set a solid foundation and if you are still not feeling comfortable, then

18
00:01:15.540 --> 00:01:20.320
I would suggest reviewing the lectures once again, since this is more to do with the design.

19
00:01:20.430 --> 00:01:25.980
It is normal that it would require more effort for these concepts to really sink in.

20
00:01:26.910 --> 00:01:31.350
It might require a little bit of experience to to be really comfortable with these concepts.

21
00:01:32.080 --> 00:01:37.630
So now let's go ahead and do a quick recap of the important stuff which we have learned in this chapter.

22
00:01:39.620 --> 00:01:45.470
We began this chapter by introducing a new object oriented feature called Abstract Classes, which can

23
00:01:45.470 --> 00:01:47.060
have abstract methods.

24
00:01:47.980 --> 00:01:50.380
The term abstract speaks for itself.

25
00:01:50.590 --> 00:01:53.470
That is, there is something abstract about the class.

26
00:01:53.800 --> 00:01:55.300
It is not concrete.

27
00:01:55.930 --> 00:02:02.950
Basically, abstract implies that the classes abstract enough or generic enough that at least one of

28
00:02:02.950 --> 00:02:05.500
its methods cannot have an implementation.

29
00:02:06.040 --> 00:02:08.979
That is, implementation must be provided by subclasses.

30
00:02:09.430 --> 00:02:13.270
Such a method without an implementation is called as an abstract method.

31
00:02:15.060 --> 00:02:19.440
So since their abstract are not concrete, abstract classes are not intangible.

32
00:02:19.980 --> 00:02:25.890
It just doesn't make sense to instantiate them and invoke an abstract method which simply doesn't have

33
00:02:25.890 --> 00:02:27.120
any implementation.

34
00:02:28.450 --> 00:02:36.070
But nice thing is abstract classes also define a contract or common protocol, which is useful in defining

35
00:02:36.070 --> 00:02:42.160
the core behavior of its subclasses and also in providing the advantage of polymorphism.

36
00:02:43.620 --> 00:02:44.610
This is important.

37
00:02:44.640 --> 00:02:49.620
Not that abstract classes can also include state which subclasses can inherit.

38
00:02:51.550 --> 00:02:54.490
And all this came up due to this new requirement.

39
00:02:54.520 --> 00:02:56.980
We wanted to extend relief for kids.

40
00:02:57.220 --> 00:03:03.820
That is, we wanted to tag certain bookmarks as kid friendly and they would show up under a new kid's

41
00:03:03.820 --> 00:03:04.180
tab.

42
00:03:05.030 --> 00:03:11.840
Here that is kid friendly eligible method is abstract as bookmark class is too abstract to provide any

43
00:03:11.840 --> 00:03:15.770
implementation for it and so subclasses would override it.

44
00:03:17.720 --> 00:03:24.080
And with regards to specifics, we know that both abstract classes and abstract methods must have abstract

45
00:03:24.080 --> 00:03:25.820
modifier in their declaration.

46
00:03:27.190 --> 00:03:30.490
An abstract class can have both abstract and concrete methods.

47
00:03:31.750 --> 00:03:35.650
And here are some specifics with regards to only abstract methods.

48
00:03:36.190 --> 00:03:41.860
Abstract methods have no body, and they end with a semicolon and they must be overridden.

49
00:03:41.980 --> 00:03:45.640
And this also means that abstract methods cannot be static.

50
00:03:45.940 --> 00:03:48.790
That's because static methods cannot be overridden.

51
00:03:49.780 --> 00:03:54.820
And if there is even one abstract method, then the class must be an abstract class.

52
00:03:56.620 --> 00:04:03.460
Finally, if the subclass of an abstract class is also abstract, then it need not implement any unimplemented

53
00:04:03.460 --> 00:04:04.540
abstract methods.

54
00:04:04.960 --> 00:04:11.200
They can be implemented by one or more concrete subclasses of this abstract subclass.

55
00:04:13.090 --> 00:04:19.060
Next, we look at another very important object oriented feature called Interfaces, and we used our

56
00:04:19.060 --> 00:04:21.279
case study to introduce interfaces.

57
00:04:21.760 --> 00:04:27.910
We had a new requirement to share kid friendly bookmarks with a partner website, and we wanted to do

58
00:04:27.910 --> 00:04:31.150
this only for books and web links, but not movies.

59
00:04:31.720 --> 00:04:38.920
So the requirement was that we wanted this sharing related functionality only in book and weblink classes,

60
00:04:38.920 --> 00:04:40.570
but not in movie class.

61
00:04:41.050 --> 00:04:46.930
Moreover, we wanted a common protocol in place, and we initially played with the idea of book and

62
00:04:46.930 --> 00:04:50.800
web link classes extending a new super class called Shareable.

63
00:04:51.130 --> 00:04:56.830
But we soon had to abandon this idea as book and web link were already extending bookmark class.

64
00:04:56.830 --> 00:04:59.740
And we know that Java does not support multiple inheritance.

65
00:05:00.010 --> 00:05:02.890
So the solution was to use interfaces as shown here.

66
00:05:04.620 --> 00:05:11.220
So at least from our case study, it may appear that the fact that multiple inheritance is not possible

67
00:05:11.220 --> 00:05:14.780
in Java is what was forcing us to use interfaces.

68
00:05:14.790 --> 00:05:15.870
And that is wrong.

69
00:05:16.140 --> 00:05:19.380
It was simply used as a reason to introduce interfaces.

70
00:05:19.740 --> 00:05:23.640
The key is that interfaces are appropriate for certain things.

71
00:05:24.760 --> 00:05:30.130
Some interfaces are appropriate to allow a class to define additional capability.

72
00:05:30.760 --> 00:05:35.680
In our case, that additional capability was the ability to share bookmarks.

73
00:05:36.340 --> 00:05:39.970
Such interfaces are loosely referred to as mixes.

74
00:05:40.540 --> 00:05:46.810
So even if there was no bookmark class, you must implement shareable as an interface rather than as

75
00:05:46.810 --> 00:05:47.470
a class.

76
00:05:49.440 --> 00:05:50.710
Apart from makes sense.

77
00:05:50.730 --> 00:05:54.990
Interface can also define the core functionality of its subclasses.

78
00:05:55.620 --> 00:05:58.860
We refer to such an interface as a representative interface.

79
00:05:59.550 --> 00:06:03.540
Just note that representative interface is not an official term.

80
00:06:03.630 --> 00:06:05.730
It was just introduced in this course.

81
00:06:06.180 --> 00:06:09.840
It was just something I came up with based on how they are being used.

82
00:06:12.270 --> 00:06:17.160
We also looked at a third kind of interface called Marker Interface, which is simply an interface with

83
00:06:17.160 --> 00:06:23.520
no methods by implementing such an interface, a class specifying that it has certain properties.

84
00:06:24.060 --> 00:06:27.750
And one example we briefly discussed was about realizable interface.

85
00:06:27.870 --> 00:06:33.030
By implementing realizable, a class is announcing that it has realizable property.

86
00:06:33.510 --> 00:06:38.760
That is, it is announcing that it is giving permission for its objects to be serialized.

87
00:06:39.300 --> 00:06:44.670
So if a class does not implement realizable, then it means that its objects cannot be serialized.

88
00:06:46.330 --> 00:06:47.460
Coming to specifics.

89
00:06:47.470 --> 00:06:51.100
The modifier interface must be used in interface declaration.

90
00:06:52.680 --> 00:06:53.460
A subclass.

91
00:06:53.460 --> 00:06:59.820
Implementing an interface would use the keyword implements while a sub interface extending an interface

92
00:06:59.820 --> 00:07:07.620
would use the keyword extents and note that a class can implement multiple interfaces and similarly

93
00:07:07.620 --> 00:07:10.920
an interface can extend multiple interfaces to.

94
00:07:12.780 --> 00:07:14.280
Like an abstract class.

95
00:07:14.280 --> 00:07:21.090
An interface is not interchangeable too, so it can only be used as a reference type and not object

96
00:07:21.090 --> 00:07:21.540
type.

97
00:07:22.110 --> 00:07:24.720
Basically, interfaces are stateless.

98
00:07:26.440 --> 00:07:32.920
Not that like classes interfaces can have only public or default access levels.

99
00:07:32.950 --> 00:07:33.940
Keep that in mind.

100
00:07:35.970 --> 00:07:38.820
And here are all the members that an interface can have.

101
00:07:39.030 --> 00:07:46.350
Interface is primarily an abstract specification, and so mostly you will see only abstract methods

102
00:07:46.350 --> 00:07:47.310
and interfaces.

103
00:07:48.190 --> 00:07:52.090
And interfaces can also have static final variables.

104
00:07:53.070 --> 00:07:57.050
From Java eight onwards, interfaces can have default and static methods.

105
00:07:57.060 --> 00:08:03.300
And finally, interfaces can also include nested types which can be nested classes or nested interfaces.

106
00:08:04.100 --> 00:08:09.260
I know that all these members that we are seeing here are public by default.

107
00:08:09.710 --> 00:08:13.430
They cannot have private or protected access levels.

108
00:08:13.880 --> 00:08:20.750
They can have default access level only if the interface itself has default access level.

109
00:08:21.050 --> 00:08:21.560
Right.

110
00:08:21.980 --> 00:08:27.800
And as a matter of style, it is recommended not to explicitly specify the default modifier.

111
00:08:29.640 --> 00:08:34.860
And here are the benefits of default methods which can be part of interfaces from Java eight onwards.

112
00:08:35.130 --> 00:08:39.510
The main reason for introducing default methods was interface evolution.

113
00:08:39.870 --> 00:08:45.390
That is, there can be added to an interface without breaking the code that is implementing the interface.

114
00:08:46.080 --> 00:08:52.410
It is not required to even recompile the implementing code and clients of the implementing code can

115
00:08:52.410 --> 00:08:54.630
invoke the newly added default methods.

116
00:08:55.720 --> 00:08:57.750
It's not just about interface evolution.

117
00:08:57.760 --> 00:09:02.920
Default methods can also be added right when the interface is designed for the very first time.

118
00:09:03.430 --> 00:09:10.660
And in that sense, it's an interface method with the default implementation and the subclass can provide

119
00:09:10.660 --> 00:09:12.620
a more specific implementation.

120
00:09:12.640 --> 00:09:15.130
Or it can simply use the default implementation.

121
00:09:16.130 --> 00:09:21.320
Default methods can be used instead of providing those methods in a separate companion class.

122
00:09:21.440 --> 00:09:21.990
Right.

123
00:09:22.010 --> 00:09:28.370
We looked at the collections class in the Java package and we also saw how the source method can be

124
00:09:28.370 --> 00:09:30.770
moved into the interface list.

125
00:09:31.760 --> 00:09:36.800
Finally, default methods allow functional interfaces to stay as functional interfaces.

126
00:09:37.430 --> 00:09:42.830
Functional interfaces are those interfaces that have only one single abstract method, and we looked

127
00:09:42.830 --> 00:09:49.250
at functional interfaces and also a lambda expression, and we said that a lambda expression can be

128
00:09:49.250 --> 00:09:54.830
passed as an argument to a method which has a functional interface as the method parameter.

129
00:09:55.040 --> 00:09:56.960
Otherwise we would get a compilation error.

130
00:09:58.870 --> 00:10:04.300
Finally we saw that interfaces can also define static methods from Java eight onwards.

131
00:10:04.780 --> 00:10:11.290
The main benefit of static methods is that they are also useful in eliminating companion classes, so

132
00:10:11.290 --> 00:10:13.750
they share one of the benefits of default methods.

133
00:10:14.080 --> 00:10:20.830
However, static methods are good candidates to replace factory methods which are responsible for creating

134
00:10:20.830 --> 00:10:21.520
objects.

135
00:10:22.180 --> 00:10:28.480
Default methods, on the other hand, are good candidates to replace methods which manipulate input

136
00:10:28.480 --> 00:10:34.180
objects and usually mutate their state like the sought method and collections class.

137
00:10:36.110 --> 00:10:40.280
Finally, here are some effective Java items which we discussed in this chapter.

138
00:10:40.700 --> 00:10:48.110
First one recommends to prefer interfaces over abstract classes, and this makes even more sense with

139
00:10:48.110 --> 00:10:52.970
Java eight onwards as interfaces can also have concrete methods now.

140
00:10:53.510 --> 00:10:56.420
So interface evolution is no longer an issue.

141
00:10:56.750 --> 00:11:03.410
Before Java eight, if the developer felt that interface might evolve, then he or she would consider

142
00:11:03.410 --> 00:11:05.090
using abstract classes.

143
00:11:05.990 --> 00:11:11.990
But upstart classes are still needed when we need to define representative behavior of subclasses but

144
00:11:11.990 --> 00:11:13.340
with state involved.

145
00:11:13.580 --> 00:11:14.060
Right.

146
00:11:14.420 --> 00:11:20.960
And let's also remember that abstract classes are used for providing skeletal implementations of interfaces.

147
00:11:21.760 --> 00:11:29.110
Second item says whenever possible, try to use an interface as a reference type in all kinds of variable

148
00:11:29.110 --> 00:11:33.160
declarations and also use them as method return types.

149
00:11:33.760 --> 00:11:37.240
That's an important item and also an easy one to follow.

150
00:11:38.090 --> 00:11:44.120
Third one says that we need to use class hierarchies like the way we did in our case study instead of

151
00:11:44.120 --> 00:11:45.680
using it to class.

152
00:11:46.040 --> 00:11:51.110
And that would lead to much cleaner design, cleaner code and also flexible code.

153
00:11:51.800 --> 00:11:52.820
So that's about it.

154
00:11:52.820 --> 00:11:54.970
And that's the end of part two of the course.

155
00:11:54.980 --> 00:12:01.340
And as mentioned earlier, it is a pretty solid coverage of the core object oriented design concepts,

156
00:12:01.550 --> 00:12:06.530
especially as we took time to understand the concepts from a conceptual standpoint.

157
00:12:06.980 --> 00:12:12.350
And we are now left with implementing the project where we will put pretty much everything we have learned

158
00:12:12.350 --> 00:12:13.310
into practice.

159
00:12:14.260 --> 00:12:20.650
We cannot say that we pretty much completed all the fundamental concepts which were include both language

160
00:12:20.650 --> 00:12:25.600
basic series in part one as well as the object oriented concepts from part two.

161
00:12:26.230 --> 00:12:31.360
Next, we will look at how we can use Eclipse IDE and then we will get started with the project.

162
00:12:31.780 --> 00:12:34.980
So thanks for listening and I will see you in the next chapter.

163
00:12:34.990 --> 00:12:36.850
And until then, happy coding.

