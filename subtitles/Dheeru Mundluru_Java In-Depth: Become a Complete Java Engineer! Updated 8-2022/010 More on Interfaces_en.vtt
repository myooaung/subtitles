WEBVTT
1
00:00:02.060 --> 00:00:02.950
Hi there.

2
00:00:02.960 --> 00:00:04.100
This is De La Rue.

3
00:00:04.100 --> 00:00:04.970
And welcome back.

4
00:00:05.150 --> 00:00:10.550
Let's now continue our discussion on interfaces as there are few more important details which we need

5
00:00:10.550 --> 00:00:11.360
to discuss.

6
00:00:12.860 --> 00:00:17.330
Like a class, an interface can also extend another interface.

7
00:00:17.870 --> 00:00:24.590
We know that by extending a class we are creating a specialized class and the specialized class typically

8
00:00:24.590 --> 00:00:29.000
adds new variables and methods on top of what it inherits.

9
00:00:29.510 --> 00:00:34.730
Similarly, a sub interface also adds some specialized abstract methods.

10
00:00:35.060 --> 00:00:39.500
And of course, they can also add one or more static final variables to.

11
00:00:40.310 --> 00:00:46.940
The example shown here is from the Java API where the interface list extends the interface collection.

12
00:00:47.450 --> 00:00:53.870
Both these interfaces are part of the Java package and we will discuss them in detail and Collections

13
00:00:53.870 --> 00:00:54.830
Framework chapter.

14
00:00:55.920 --> 00:01:04.379
Note that a class implementing the sub interface has to implement all abstract methods declared in both

15
00:01:04.379 --> 00:01:07.050
the sub as well as the super interfaces.

16
00:01:07.440 --> 00:01:13.470
There is a class called ArrayList and it implements the list interface that we see here.

17
00:01:13.980 --> 00:01:19.620
So it implements abstract methods from both list as well as the collection interfaces.

18
00:01:20.300 --> 00:01:25.470
ArrayList, which is very important, will also be discussed later in Collections Framework Chapter.

19
00:01:27.430 --> 00:01:32.170
One other thing to note is that a class can only implement an interface.

20
00:01:32.320 --> 00:01:34.570
It cannot extend an interface.

21
00:01:35.020 --> 00:01:37.240
It can only extend another class.

22
00:01:37.570 --> 00:01:44.110
So a class can extend another class and an interface can extend another interface, thus creating more

23
00:01:44.110 --> 00:01:45.460
specialized versions.

24
00:01:47.670 --> 00:01:53.010
However, unlike classes, an interface can extend multiple interfaces.

25
00:01:53.460 --> 00:02:00.300
Here is another example from the Java API where an interface is extending to interfaces and this helps

26
00:02:00.300 --> 00:02:04.620
in adding new methods that are appropriate to the combination.

27
00:02:05.280 --> 00:02:12.300
What that means is each of the super interfaces specify their own unique capabilities, but the sub

28
00:02:12.300 --> 00:02:18.630
interface would provide methods that represent capabilities of both the super interfaces.

29
00:02:19.370 --> 00:02:21.340
And this is not commonly encountered.

30
00:02:21.350 --> 00:02:25.580
But when such a flexibility is needed, interfaces serve the purpose.

31
00:02:27.590 --> 00:02:33.920
Now when discussing abstract classes, we said that an abstract subclass need not override abstract

32
00:02:33.920 --> 00:02:35.870
methods defined in a superclass.

33
00:02:36.260 --> 00:02:42.650
And the same applies if an abstract subclass implements an interface, it need not implement any abstract

34
00:02:42.650 --> 00:02:44.600
methods declared in the interface.

35
00:02:44.900 --> 00:02:48.530
They can be done by subclasses of the Abstract Subclass.

36
00:02:48.800 --> 00:02:54.350
So just keep in mind that an abstract class can also implement an interface.

37
00:02:54.350 --> 00:02:58.790
It need not be just a normal concrete class can be an abstract class to.

38
00:03:00.230 --> 00:03:06.980
And here is an example where we have two interfaces A and B, both declaring an identical abstract method

39
00:03:06.980 --> 00:03:13.910
named for Class X, which implements both these interfaces, provides an implementation for the method.

40
00:03:13.910 --> 00:03:20.660
For now, recall that earlier, when we have something similar, we had the issue of diamond problem.

41
00:03:22.200 --> 00:03:28.860
However, there it was due to multiple inheritance of identical method implementations.

42
00:03:29.550 --> 00:03:36.960
But here it is multiple inheritance of only identical method declarations which do not include method

43
00:03:36.960 --> 00:03:43.050
implementations and the subclass is forced to provide the method implementation.

44
00:03:43.680 --> 00:03:47.640
So we will not have the issue of diamond problem in this case.

45
00:03:49.560 --> 00:03:51.570
And here is an interesting scenario.

46
00:03:51.600 --> 00:03:56.550
As in the previous example, interface A declares the abstract method full.

47
00:03:56.880 --> 00:04:02.760
Now let's assume B is a completely independent class that provides a method definition for foo.

48
00:04:03.120 --> 00:04:06.120
That is, foo is a concrete method in class B.

49
00:04:06.720 --> 00:04:15.480
In that case, the subclass X, which implements the interface A and extends the Class B does not have

50
00:04:15.480 --> 00:04:20.550
to provide an implementation for the abstract method foo in the interface.

51
00:04:21.690 --> 00:04:28.710
The method foo defined and B would be sufficient unless class x wants to override it.

52
00:04:30.690 --> 00:04:33.510
Now let's discuss a bit on interface variables.

53
00:04:33.690 --> 00:04:38.190
Let's first see why variables and interfaces must be static and final.

54
00:04:39.140 --> 00:04:44.570
They have to be static because as mentioned earlier, interfaces are non interchangeable.

55
00:04:44.600 --> 00:04:46.160
That is, they are stateless.

56
00:04:46.550 --> 00:04:52.910
So the variables would have to be accessed by qualifying the variable names with the interface name.

57
00:04:53.360 --> 00:04:57.890
That is the interface name followed by the dot, which is followed by the variable name.

58
00:04:59.430 --> 00:05:03.930
And they have to be final as interfaces are pure contracts.

59
00:05:04.290 --> 00:05:11.340
And with that, they are making a hard statement that what we see defined inside them will remain so

60
00:05:11.340 --> 00:05:12.090
forever.

61
00:05:13.000 --> 00:05:17.710
So it is like an agreement that is set in stone and hence will not change.

62
00:05:18.190 --> 00:05:23.410
So if there is a variable with a certain value, then that value will not change.

63
00:05:23.770 --> 00:05:29.710
And so other classes can access that variable, assuming that it will always remain the same.

64
00:05:31.420 --> 00:05:37.750
For instance, let's assume that we have such an interface named connection that declares a variable

65
00:05:37.750 --> 00:05:41.350
named success, which is initialized to the value 25.

66
00:05:42.670 --> 00:05:49.120
Then let's say we have a class named client, and let's assume that there is some logic where the client

67
00:05:49.120 --> 00:05:56.350
connects to some remote server, and if it connects successfully, it returns a status code of success.

68
00:05:57.070 --> 00:06:01.870
So for that, it may use the success variable in the interface connection.

69
00:06:02.520 --> 00:06:10.380
So this class client would be expecting that the value of success will always remain as 25 as there

70
00:06:10.380 --> 00:06:15.540
may be some other code that would use this value that the class client is returning.

71
00:06:16.350 --> 00:06:21.330
Now, if the value of success variable is changed, then it would be a breach of contract.

72
00:06:21.780 --> 00:06:27.660
So with success being declared as final, we have that assurance that it will never change.

73
00:06:28.440 --> 00:06:35.880
Moreover, note that here, since success is a constant value, we know that the value 25 that success

74
00:06:35.880 --> 00:06:41.130
is initialized with will be copied into the return statement in the class client.

75
00:06:41.760 --> 00:06:46.590
That is, the compiler will copy that value into the bytecode of the class client.

76
00:06:48.740 --> 00:06:55.160
Finally, let's look at accessing identically named variables from two different super types.

77
00:06:55.370 --> 00:07:01.760
So here we have two interfaces A and B, both of which define a variable called well.

78
00:07:02.490 --> 00:07:05.340
No Class X implements both A and B.

79
00:07:05.730 --> 00:07:13.440
And as you can see, if Class X accesses variable vowel with its simple name, we get a compiler error

80
00:07:13.590 --> 00:07:18.240
as compiler obviously does not know which version of value to use.

81
00:07:18.600 --> 00:07:24.780
So there is a variable naming class here and as shown in the next statement, we need to qualify the

82
00:07:24.780 --> 00:07:27.390
constant well to fix the ambiguity.

83
00:07:27.840 --> 00:07:30.780
In this case, we are accessing the version in B.

84
00:07:31.640 --> 00:07:38.210
But only if one of these interfaces is declaring the variable, well then x can access it directly.

85
00:07:38.870 --> 00:07:47.420
Also notice that the variable VAL is an all caps as we know that by convention static final variables

86
00:07:47.420 --> 00:07:50.880
are all caps separated by underscores.

87
00:07:51.410 --> 00:07:53.330
So don't forget the naming convention.

88
00:07:53.840 --> 00:07:55.130
So that's about it.

89
00:07:55.160 --> 00:08:02.180
Next, we will do a demo of interfaces, after which we will discuss interfaces more conceptually so

90
00:08:02.180 --> 00:08:03.950
that we know when to use them.

91
00:08:04.460 --> 00:08:06.410
And that's the most important part.

92
00:08:06.740 --> 00:08:07.460
Thank you.

