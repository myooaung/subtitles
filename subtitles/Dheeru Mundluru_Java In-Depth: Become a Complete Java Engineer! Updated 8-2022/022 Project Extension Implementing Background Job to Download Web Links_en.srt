1
00:00:02,130 --> 00:00:02,700
Hi there.

2
00:00:02,730 --> 00:00:04,620
This is LA and we'll come back.

3
00:00:04,650 --> 00:00:07,440
Now let's go ahead and implement the background job.

4
00:00:08,350 --> 00:00:15,070
Now here for this particular extension, I created a new package within the year project and it's called

5
00:00:15,070 --> 00:00:19,190
as complete semantics 30. BG Jobs.

6
00:00:19,540 --> 00:00:21,190
It means background jobs.

7
00:00:21,370 --> 00:00:23,890
So we will write our background job here.

8
00:00:24,220 --> 00:00:28,870
So the background job at template, the template code has already been written and we are going to fill

9
00:00:28,870 --> 00:00:30,620
the rest of the class here.

10
00:00:30,640 --> 00:00:33,460
And it's called US Web Page Downloader Task.

11
00:00:34,390 --> 00:00:37,620
Now here we have this class called us launch dot Java.

12
00:00:37,630 --> 00:00:38,860
You may recall this.

13
00:00:39,850 --> 00:00:43,180
And this was used for launching the application itself.

14
00:00:43,840 --> 00:00:50,650
So you may recall that within the main method we were invoking load data which will basically load the

15
00:00:50,650 --> 00:00:56,200
data into the datastore right, which is our database, and then it invokes the start method.

16
00:00:56,200 --> 00:01:02,590
And within the start method the we are simulating the users browsing the bookmarks.

17
00:01:02,610 --> 00:01:03,000
Right?

18
00:01:03,010 --> 00:01:08,410
We are iterating through each of the users and we are we are simulating the browsing pattern here by

19
00:01:08,410 --> 00:01:09,460
invoking the Browse method.

20
00:01:09,490 --> 00:01:16,330
We also looked at the Browse method earlier and after doing that we are going to invoke this new method

21
00:01:16,330 --> 00:01:18,400
called as run downloader job.

22
00:01:19,240 --> 00:01:20,920
So here it is, the run downloader job.

23
00:01:20,920 --> 00:01:28,480
It's a private method and here we are instantiating this new class called web page downloader task and

24
00:01:28,480 --> 00:01:29,920
we are passing a value.

25
00:01:29,920 --> 00:01:31,420
True here it's a boolean flag.

26
00:01:31,450 --> 00:01:37,870
If we pass for true, it means that we also want to download all of the web links that are there in

27
00:01:37,870 --> 00:01:38,560
the system.

28
00:01:39,700 --> 00:01:42,730
Now, so this will be run as a separate thread.

29
00:01:42,730 --> 00:01:48,820
So we are passing this task to this new thread and we are invoking the START method, which means that

30
00:01:48,820 --> 00:01:51,730
web page downloader task is actually a run.

31
00:01:52,240 --> 00:01:57,580
And here it is, iterable and we have some variables here.

32
00:01:58,390 --> 00:02:01,480
Here is the constructor and the flag.

33
00:02:01,480 --> 00:02:04,510
Here is download all if it is true.

34
00:02:04,630 --> 00:02:10,000
If a true is passed here, which means that we are going to download all of the web links and we have

35
00:02:10,000 --> 00:02:12,760
the bookmark down in the last lecture we have.

36
00:02:12,760 --> 00:02:16,930
We have enhanced this class in order to fetch all the web links.

37
00:02:16,930 --> 00:02:22,660
And also we wrote another method to fetch only Web links with a particular status value.

38
00:02:22,660 --> 00:02:23,260
Right.

39
00:02:24,320 --> 00:02:25,790
And here is the timeframe.

40
00:02:25,790 --> 00:02:29,930
So we want to place a time limit on that on the downloading process.

41
00:02:30,320 --> 00:02:35,210
So a particular Web page should be downloaded within 3 seconds, and we already know how to do that.

42
00:02:35,210 --> 00:02:40,250
And I also mentioned that we'll be using the code from the Invoke all demo program.

43
00:02:40,910 --> 00:02:41,100
Okay.

44
00:02:41,150 --> 00:02:47,330
So this is some template code and this implements run table here, which means that we need to override

45
00:02:47,330 --> 00:02:48,410
the run method.

46
00:02:49,760 --> 00:02:55,250
And within the run method, we also want to have this respond to any interruption.

47
00:02:55,730 --> 00:03:02,840
So if we are if you send an interrupt signal to this particular task from anywhere we want to interrupt.

48
00:03:02,840 --> 00:03:05,120
So we also have this vital loop.

49
00:03:05,120 --> 00:03:09,560
And since it's a background job, the the job keeps waiting here.

50
00:03:10,610 --> 00:03:12,410
So we also have the rate method.

51
00:03:12,410 --> 00:03:17,750
So once the job is done, it waits for certain seconds and then it continues with the new set of web

52
00:03:17,750 --> 00:03:18,170
links.

53
00:03:18,470 --> 00:03:19,700
That was one of the goals.

54
00:03:19,700 --> 00:03:21,410
So we need to fill this up.

55
00:03:21,710 --> 00:03:24,500
So there are basically three things that we need to fill.

56
00:03:24,530 --> 00:03:26,480
We need to get the web links for that.

57
00:03:26,480 --> 00:03:28,780
We will use the methods in the bookmark down.

58
00:03:29,150 --> 00:03:34,280
Then we need to download the web pages concurrently and we already know how to do that.

59
00:03:34,280 --> 00:03:39,930
So we will use some of the code from the from our demos and then we'll finally wait for like 15 or 20

60
00:03:39,930 --> 00:03:40,760
seconds here.

61
00:03:42,030 --> 00:03:45,540
So let's go ahead and fill this up.

62
00:03:46,050 --> 00:03:49,890
So initially we need to have the static variables, then the instance variables.

63
00:03:50,040 --> 00:03:55,950
Now let me open the time to invoke all index program.

64
00:03:56,520 --> 00:03:57,570
Here it is.

65
00:03:58,520 --> 00:04:01,340
So if we go here.

66
00:04:01,340 --> 00:04:03,680
So we need this particular statement.

67
00:04:08,530 --> 00:04:09,070
Okay.

68
00:04:09,670 --> 00:04:15,340
Now next we need the download or thread, so let's also get that.

69
00:04:16,260 --> 00:04:19,880
The downloader task which is here it is.

70
00:04:19,890 --> 00:04:21,060
It is a callable.

71
00:04:21,360 --> 00:04:23,220
So we need to get this.

72
00:04:26,900 --> 00:04:33,350
Let me also make this file so we can have fighter jets in our threat pool.

73
00:04:33,710 --> 00:04:33,930
It's.

74
00:04:33,950 --> 00:04:34,940
Copy this.

75
00:04:38,750 --> 00:04:46,410
No, let me make this in that particular code, we have it as web length in lowercase, which was a

76
00:04:46,430 --> 00:04:47,720
static nested class.

77
00:04:48,170 --> 00:04:53,810
Let's do this because the entity that we are using is actually it has L in uppercase.

78
00:04:53,810 --> 00:04:55,280
So let me import that.

79
00:04:56,660 --> 00:04:58,400
Now http connect.

80
00:05:00,680 --> 00:05:02,160
It is here in the util.

81
00:05:11,340 --> 00:05:11,880
Okay.

82
00:05:12,510 --> 00:05:17,240
So it was just importing the HTTP connect from our demo.

83
00:05:17,250 --> 00:05:18,360
We don't need that.

84
00:05:18,630 --> 00:05:20,430
So that's the downloader class.

85
00:05:20,430 --> 00:05:26,400
So we have some code already here and you can notice that we are also following the coding conventions.

86
00:05:26,400 --> 00:05:30,600
First we have the static variables, then the instance variables, then the static nested class.

87
00:05:30,600 --> 00:05:35,220
So first we have the variables here with the static variables following the instance variables.

88
00:05:35,220 --> 00:05:37,350
Then the static nested class.

89
00:05:37,350 --> 00:05:43,170
If you recall from our coding conventions class, that's a lecture which we have done a long time ago.

90
00:05:43,170 --> 00:05:48,570
So we have these structure, class structure rules, then comes the constructor.

91
00:05:49,080 --> 00:05:50,340
So that's what we had.

92
00:05:51,180 --> 00:05:55,440
Now, next, we also have to.

93
00:06:01,520 --> 00:06:02,310
Shut down.

94
00:06:02,750 --> 00:06:05,330
Once we are done, we can do that also.

95
00:06:06,370 --> 00:06:08,500
So here after the while loop.

96
00:06:10,610 --> 00:06:12,260
You can have this.

97
00:06:15,530 --> 00:06:18,170
Now here, we need to make a few changes.

98
00:06:19,550 --> 00:06:19,690
Okay.

99
00:06:19,820 --> 00:06:25,740
We want to download only those links which do not end with pdf dot pdf.

100
00:06:25,760 --> 00:06:29,330
Now that code is actually here in the bookmark manager.

101
00:06:30,950 --> 00:06:33,380
So we can have this code here.

102
00:06:33,560 --> 00:06:35,120
I can have this if statement.

103
00:06:49,400 --> 00:06:54,590
So if the weblink does not end with PDF only, then we want to download it.

104
00:06:54,920 --> 00:06:57,920
But first, let's set the status here.

105
00:06:59,570 --> 00:07:02,470
Initially let us set it to failure.

106
00:07:02,480 --> 00:07:05,510
And once the Web page is downloaded, we will set it to true.

107
00:07:18,330 --> 00:07:19,230
It will be failed.

108
00:07:19,860 --> 00:07:24,000
And later, we will set it to success once it's downloaded.

109
00:07:24,180 --> 00:07:25,500
Now, here.

110
00:07:26,010 --> 00:07:27,720
Let's also have the slope.

111
00:07:33,460 --> 00:07:37,060
And it means that in the loop it's a PDF document.

112
00:07:37,480 --> 00:07:41,020
It means it's not eligible for downloading.

113
00:07:41,020 --> 00:07:42,640
So we had a state for that.

114
00:07:44,160 --> 00:07:45,030
Here it is.

115
00:07:46,890 --> 00:07:47,520
And that's it.

116
00:07:47,530 --> 00:07:49,290
And the call method returns the web link.

117
00:07:49,290 --> 00:07:52,550
So that's with the download Downloader task.

118
00:07:52,560 --> 00:07:54,870
Now it's time to fill this up.

119
00:07:55,950 --> 00:07:58,350
So the first thing is we need to get the Web links.

120
00:07:58,350 --> 00:08:01,800
So let's go ahead and write a simple method here.

121
00:08:02,220 --> 00:08:03,780
Let's just call it get.

122
00:08:05,580 --> 00:08:06,540
Web links.

123
00:08:08,170 --> 00:08:10,690
And it should return a list of web lengths.

124
00:08:15,690 --> 00:08:17,970
Let's just write some template code here.

125
00:08:19,180 --> 00:08:20,470
Me imported.

126
00:08:37,679 --> 00:08:44,850
So if you have at least one weblink, then we want to invoke the download method, which is a method

127
00:08:44,850 --> 00:08:52,440
that we are going to write next and we will pass the web links and it will download all the pages concurrently.

128
00:08:53,800 --> 00:08:54,520
Else.

129
00:08:56,060 --> 00:08:56,190
Okay.

130
00:08:56,330 --> 00:08:58,280
Let's just put this out.

131
00:08:59,810 --> 00:09:01,220
And say no new.

132
00:09:04,560 --> 00:09:08,640
So this is just the template code which we are writing and we are going to fill up these two methods

133
00:09:08,640 --> 00:09:09,210
next.

134
00:09:09,600 --> 00:09:13,020
And here let's put it now wait statement, let's say.

135
00:09:14,610 --> 00:09:15,810
I'm unit.

136
00:09:18,730 --> 00:09:20,080
Let's wait for 15 seconds.

137
00:09:20,080 --> 00:09:25,240
So the background job well will try to download once every 15 seconds.

138
00:09:25,240 --> 00:09:28,540
We'll look for new web lengths and time unit.

139
00:09:28,570 --> 00:09:29,200
Here it is.

140
00:09:29,200 --> 00:09:30,460
Import this.

141
00:09:33,820 --> 00:09:34,260
Okay.

142
00:09:35,360 --> 00:09:35,480
Okay.

143
00:09:35,510 --> 00:09:37,070
Let's go ahead and fill up this.

144
00:09:57,770 --> 00:10:03,380
So we had the field called Download all which was initialized in the constructor.

145
00:10:03,380 --> 00:10:06,710
So if it is true, it means that we need to download all the links.

146
00:10:07,160 --> 00:10:12,380
And we also had the variable, the Dow here, the Dow variable.

147
00:10:12,470 --> 00:10:16,790
So we are going to invoke the method which we have implemented in the last lecture.

148
00:10:18,230 --> 00:10:24,440
It's called get all web links because we want download all and web links.

149
00:10:26,880 --> 00:10:28,440
They'll be initialized with this.

150
00:10:30,550 --> 00:10:34,660
And once we are done with that, we can say.

151
00:10:37,320 --> 00:10:45,090
This way, you know, once the background job finishes downloading and then it waits for 15 seconds

152
00:10:45,090 --> 00:10:46,290
and then it repeats.

153
00:10:46,290 --> 00:10:52,950
So when it repeats, it's not going to after 15 seconds, it's not going to download all the Web links.

154
00:10:52,950 --> 00:10:57,480
Again, we don't want to do that, and that's why we are setting the download all flat to false here.

155
00:10:57,810 --> 00:11:02,130
So it will only look for any new any new web links that got added.

156
00:11:06,400 --> 00:11:11,800
So now let's invoke this one with the download Status of Not Attempted.

157
00:11:25,240 --> 00:11:25,870
And.

158
00:11:33,740 --> 00:11:34,340
That's it.

159
00:11:34,580 --> 00:11:35,990
So we are done with that.

160
00:11:36,020 --> 00:11:40,980
We are getting the Web links and we are passing the Web links to this new method called Download.

161
00:11:41,000 --> 00:11:43,160
So let's go ahead and implement that also.

162
00:11:45,450 --> 00:11:45,930
Okay.

163
00:11:46,880 --> 00:11:52,850
So for this we can in order to download we said that we are going to use the invoke all method.

164
00:11:53,240 --> 00:11:56,000
So let's go here in the invoke all method.

165
00:11:56,360 --> 00:12:00,320
We were invoking the timed executed here.

166
00:12:03,430 --> 00:12:04,480
So we need.

167
00:12:07,250 --> 00:12:08,630
You can copy this code.

168
00:12:10,890 --> 00:12:12,450
And we can make some changes.

169
00:12:13,820 --> 00:12:16,040
So we need a bunch of tasks here.

170
00:12:16,040 --> 00:12:17,690
So we only have web links.

171
00:12:18,500 --> 00:12:21,320
So we need to convert from the Web links.

172
00:12:21,470 --> 00:12:28,670
We need to get the downloader tasks right because task is what we are going to submit here to the invoke

173
00:12:28,670 --> 00:12:32,840
all method and we don't need this time left.

174
00:12:34,280 --> 00:12:36,560
What we need is just the time frame.

175
00:12:39,850 --> 00:12:41,080
So we already had.

176
00:12:42,860 --> 00:12:47,280
The variable declared time frame at the top, which is 3 seconds.

177
00:12:47,300 --> 00:12:51,950
And these are the tasks and we don't have the cue here.

178
00:12:51,950 --> 00:12:54,020
We just have the tasks.

179
00:12:54,590 --> 00:12:57,110
So we can remove this code.

180
00:12:58,110 --> 00:12:59,340
This is just for the demo.

181
00:12:59,370 --> 00:12:59,880
There.

182
00:13:01,150 --> 00:13:03,100
So we need to get the tasks here.

183
00:13:03,100 --> 00:13:04,240
And this needs to be.

184
00:13:05,630 --> 00:13:06,460
Weblink.

185
00:13:08,140 --> 00:13:08,770
Blink.

186
00:13:10,050 --> 00:13:10,740
Now.

187
00:13:12,640 --> 00:13:14,890
We need to get the download our tasks here.

188
00:13:14,890 --> 00:13:18,160
We need to submit the task to the download executor.

189
00:13:18,160 --> 00:13:19,900
So we already have that downloaded here.

190
00:13:19,900 --> 00:13:21,730
The task here.

191
00:13:23,380 --> 00:13:27,580
So for that, let's write this method called get tests.

192
00:13:30,510 --> 00:13:32,220
Let's pass the Web links.

193
00:13:36,480 --> 00:13:37,050
Me.

194
00:13:39,150 --> 00:13:41,100
Create another private method here.

195
00:13:44,780 --> 00:13:44,960
Okay.

196
00:13:45,020 --> 00:13:48,500
So we need to return a list of downloader types.

197
00:13:49,190 --> 00:13:50,060
So.

198
00:13:51,870 --> 00:13:52,920
Just copy this.

199
00:14:18,640 --> 00:14:20,260
Another is gentrified.

200
00:14:20,290 --> 00:14:21,100
We know that.

201
00:14:21,910 --> 00:14:24,910
And we just need to add the blank.

202
00:14:31,990 --> 00:14:35,620
So we are writing this small method here called Get.

203
00:14:37,060 --> 00:14:43,240
So now we have the TASS and we just need to submit the TASS to the invoke all method and invoke all

204
00:14:43,240 --> 00:14:43,570
we know.

205
00:14:43,570 --> 00:14:45,520
Returns a list of features.

206
00:14:46,030 --> 00:14:53,350
So we need to to iterate through all of the futures now so we can use this.

207
00:14:55,020 --> 00:14:56,010
Code here.

208
00:14:57,320 --> 00:14:58,730
Some of this code.

209
00:15:03,180 --> 00:15:04,650
So future.

210
00:15:05,930 --> 00:15:08,960
And once again, this needs to be a blank.

211
00:15:10,080 --> 00:15:17,040
And if it is not canceled, we know that the invoke all method will download all of the web links and

212
00:15:17,040 --> 00:15:23,790
if it if any particular downloader could not download a page, then it would be canceled.

213
00:15:24,030 --> 00:15:25,440
The downloader task will be cancelled.

214
00:15:25,440 --> 00:15:26,520
You may recall that.

215
00:15:27,270 --> 00:15:30,500
Now, we don't need this here, right?

216
00:15:30,600 --> 00:15:31,100
We don't.

217
00:15:31,110 --> 00:15:34,680
We are not indexing anything, so let's remove that.

218
00:15:37,190 --> 00:15:37,970
Now.

219
00:15:40,520 --> 00:15:42,950
Future target will return a web.

220
00:15:43,640 --> 00:15:44,170
Right.

221
00:15:44,410 --> 00:15:45,070
Which will.

222
00:15:45,380 --> 00:15:46,640
Will return a web link.

223
00:15:47,270 --> 00:15:48,110
And.

224
00:15:49,420 --> 00:15:50,710
It's called weblink.

225
00:15:53,740 --> 00:15:57,850
And from the weblink, we can get the web page once it is downloaded.

226
00:15:59,970 --> 00:16:01,890
So get hatch HTML page.

227
00:16:04,970 --> 00:16:06,740
We can say if the page.

228
00:16:09,080 --> 00:16:10,760
Not equal to null.

229
00:16:11,750 --> 00:16:19,880
It means that it has been downloaded successfully, in which case we can write it to the disk and the

230
00:16:19,880 --> 00:16:21,890
code to write to the disk is here.

231
00:16:22,340 --> 00:16:23,240
Here it is.

232
00:16:27,890 --> 00:16:29,370
The thing is this.

233
00:16:29,600 --> 00:16:31,700
This needs to be caps.

234
00:16:33,450 --> 00:16:34,290
And.

235
00:16:40,010 --> 00:16:42,860
How will you tell is a class here in the util package?

236
00:16:42,860 --> 00:16:44,900
You may also recall that.

237
00:16:45,530 --> 00:16:48,860
So we wrote that when we were dealing with the IO chapter.

238
00:16:50,270 --> 00:16:55,580
Next, we need to set the status to success because we downloaded the page successfully.

239
00:16:56,000 --> 00:16:58,040
So let's just take this here.

240
00:17:08,329 --> 00:17:11,089
Let's also put a simple statement here.

241
00:17:15,310 --> 00:17:16,540
And let's print.

242
00:17:20,369 --> 00:17:21,900
The URL of the web page.

243
00:17:22,260 --> 00:17:23,280
So this is just.

244
00:17:24,380 --> 00:17:27,560
The system called statement and.

245
00:17:36,680 --> 00:17:41,000
Let's call it the page download, not download.

246
00:17:41,000 --> 00:17:43,130
Let's just say not downloaded.

247
00:17:44,120 --> 00:17:47,450
Because the reason could be that it's a PDF to.

248
00:17:48,250 --> 00:17:48,880
All right.

249
00:17:49,060 --> 00:17:52,030
So let's just say Web page not downloaded here.

250
00:17:55,860 --> 00:17:56,030
Okay.

251
00:17:56,100 --> 00:17:59,040
So we are printing that and Trask is canceled.

252
00:18:02,410 --> 00:18:02,940
Okay.

253
00:18:03,040 --> 00:18:06,160
And this method I will tell, right?

254
00:18:06,160 --> 00:18:12,220
Actually, if the page is downloaded successfully, it will write it to this folder called Pages.

255
00:18:12,670 --> 00:18:20,380
So if you go back to that lecture and in the Evo chapter where we had made an enhancement to the project,

256
00:18:20,470 --> 00:18:25,180
you will you will see that we were actually writing to this directory called Pages.

257
00:18:26,080 --> 00:18:27,370
Right now it is empty.

258
00:18:27,550 --> 00:18:28,810
So we will do that.

259
00:18:28,810 --> 00:18:30,370
And let's go ahead and.

260
00:18:32,170 --> 00:18:32,760
This.

261
00:18:34,140 --> 00:18:40,200
I think because of all the copying that we are doing, we are also importing these statements.

262
00:18:40,800 --> 00:18:46,740
So the only other exception is this one needs to surround with trite catch.

263
00:18:47,510 --> 00:18:48,290
So.

264
00:18:49,720 --> 00:18:54,250
I guess we are done with all the enhancements now, so let's go ahead and run this.

265
00:18:57,780 --> 00:18:58,910
From the launch.

266
00:19:00,100 --> 00:19:00,850
Program.

267
00:19:04,840 --> 00:19:05,670
Here we are.

268
00:19:05,680 --> 00:19:09,730
Some of this webpage could not be downloaded and here it is.

269
00:19:09,730 --> 00:19:10,810
Download Success.

270
00:19:10,840 --> 00:19:13,480
Now you see that no new web links to download.

271
00:19:13,600 --> 00:19:21,250
So I downloaded a few pages and then it says it waited for 15 seconds because it's a background job.

272
00:19:21,280 --> 00:19:25,920
After 15 seconds, it tried to download new pages and there are no web links.

273
00:19:25,930 --> 00:19:28,190
So once again, we can see another statement.

274
00:19:28,210 --> 00:19:33,760
So after the 15 seconds has passed, it tried to see if it could download any new web links.

275
00:19:33,760 --> 00:19:34,390
But there are.

276
00:19:34,390 --> 00:19:39,340
But since we are not adding any new web links, there were no web pages to add and to download new pages

277
00:19:39,340 --> 00:19:40,090
to download.

278
00:19:40,390 --> 00:19:43,510
And this continues with every 15 seconds.

279
00:19:43,840 --> 00:19:45,940
So that's how the background jobs work.

280
00:19:46,150 --> 00:19:47,320
Let me refresh this.

281
00:19:47,710 --> 00:19:48,460
Here it is.

282
00:19:48,460 --> 00:19:55,060
Four pages have been downloaded that are actually five pages, but one of them is here is a web link.

283
00:19:55,390 --> 00:19:59,230
One of them ends with a dot PDF which we are not downloading.

284
00:19:59,650 --> 00:20:00,760
So that's it.

285
00:20:00,760 --> 00:20:02,380
So this is what we have.

286
00:20:03,070 --> 00:20:04,990
So I think that's it.

287
00:20:04,990 --> 00:20:09,370
So now you have some understanding of how background jobs will work.

288
00:20:10,240 --> 00:20:11,920
This is how the background job will work.

289
00:20:11,950 --> 00:20:16,780
If it was a spring framework, we would just we would still have this class.

290
00:20:16,780 --> 00:20:23,350
But this rescheduling part will be will be declared in the XML file itself, like the way I have shown

291
00:20:23,350 --> 00:20:24,550
in the previous lecture.

292
00:20:24,970 --> 00:20:26,920
And that's about it.

293
00:20:26,920 --> 00:20:31,300
I hope you like this nice extension.

294
00:20:31,300 --> 00:20:38,680
It was easy for us because we already had an idea of how to download web pages concurrently based on

295
00:20:38,680 --> 00:20:39,460
what we learned.

296
00:20:39,640 --> 00:20:42,280
So this is some really good stuff that we are looking at.

297
00:20:42,280 --> 00:20:45,370
So we are using the executed service.

298
00:20:45,370 --> 00:20:50,080
So we are using the concurrency utilities and we are also placing time, time limits.

299
00:20:50,080 --> 00:20:51,790
So it's some really good stuff.

300
00:20:51,790 --> 00:20:58,300
And then in your professional life, if you have to do something with this so you already know how to

301
00:20:58,390 --> 00:20:59,680
how to implement it.

302
00:21:00,340 --> 00:21:00,970
Thank you.

303
00:21:00,970 --> 00:21:02,230
And that's about it.

304
00:21:02,230 --> 00:21:03,310
And happy coding.

