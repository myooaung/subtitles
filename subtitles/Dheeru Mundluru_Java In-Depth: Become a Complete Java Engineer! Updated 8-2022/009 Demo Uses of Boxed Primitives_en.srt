1
00:00:02,100 --> 00:00:02,930
Hello there.

2
00:00:02,940 --> 00:00:04,019
This is the LA Uluru.

3
00:00:04,019 --> 00:00:04,950
And welcome back.

4
00:00:04,980 --> 00:00:07,410
So let's go ahead and continue our demo.

5
00:00:07,530 --> 00:00:12,750
So in the last lecture, we have seen how we can create box perimeters and we have also seen how they

6
00:00:12,750 --> 00:00:13,710
can be unwrapped.

7
00:00:13,830 --> 00:00:18,730
Now let's go ahead and see how box primitives can be really used.

8
00:00:18,750 --> 00:00:22,740
So we will look at some typical use cases, very interesting use cases.

9
00:00:22,950 --> 00:00:28,170
And in the process we will also learn about some important methods that box primitives have.

10
00:00:28,770 --> 00:00:33,840
So the first thing that we are going to look at is how we can parse strings.

11
00:00:33,960 --> 00:00:40,410
Okay, so there are certain methods that we can use in order to parse strings and extract some data

12
00:00:40,410 --> 00:00:42,330
and store it and primitives.

13
00:00:42,540 --> 00:00:47,880
So these methods will help us convert a string into primitive values.

14
00:00:48,300 --> 00:00:54,510
Now, this is very useful when we are reading some data from the files or we are processing some data

15
00:00:54,510 --> 00:00:57,840
that we get from some remote server, like a web service.

16
00:00:58,140 --> 00:01:04,200
So let's just consider that we are we are working on some book related website and it has this file

17
00:01:04,200 --> 00:01:06,120
and we need to read this data.

18
00:01:06,570 --> 00:01:08,730
So each row here corresponds to some book.

19
00:01:08,730 --> 00:01:12,990
So we need to read this data and extract the individual items.

20
00:01:12,990 --> 00:01:15,930
For instance, this is the ID, this is the title of the book.

21
00:01:16,050 --> 00:01:19,380
This is a publication here and here we have the rating.

22
00:01:19,380 --> 00:01:21,960
So we need to extract all of this data.

23
00:01:21,960 --> 00:01:27,270
So when we extract it, there would be in the form of strings and we need to convert them into each

24
00:01:27,270 --> 00:01:30,330
of these items into the corresponding primitive values.

25
00:01:30,330 --> 00:01:33,840
For instance, this needs to be converted into a double value.

26
00:01:34,470 --> 00:01:42,750
So let's just take this last row here and let's assume that we have already read this into a string.

27
00:01:42,750 --> 00:01:44,250
Let's call it as data.

28
00:01:46,000 --> 00:01:47,240
So this is what we have.

29
00:01:47,260 --> 00:01:49,370
But we don't need all of this.

30
00:01:49,390 --> 00:01:55,090
Now, here, each of these data items are separated by a tab, for instance, here.

31
00:01:55,090 --> 00:01:56,680
So they are tab delimited.

32
00:01:57,040 --> 00:02:04,090
So sometimes we may also have CSV files, data and CSV files or XML files and you need to process them.

33
00:02:04,450 --> 00:02:05,980
So we don't need all of this.

34
00:02:05,980 --> 00:02:07,450
So let me remove some of them.

35
00:02:07,450 --> 00:02:09,550
Let's remove this and.

36
00:02:11,310 --> 00:02:13,770
And here let's just have it as.

37
00:02:14,070 --> 00:02:16,620
So that's the genre and this is the rating.

38
00:02:16,620 --> 00:02:18,960
And we don't need this because it's unknown.

39
00:02:19,710 --> 00:02:21,210
So this is what we have.

40
00:02:21,210 --> 00:02:24,660
So we have five items one, two, three, four and five.

41
00:02:25,350 --> 00:02:31,380
Now let's go ahead and store this and a string area here.

42
00:02:31,830 --> 00:02:33,420
So let's say string array.

43
00:02:34,210 --> 00:02:35,880
So what do we have to do?

44
00:02:35,890 --> 00:02:44,080
So we need to use the split method and we are splitting on what we are splitting on top because they

45
00:02:44,080 --> 00:02:45,400
are tab delimited.

46
00:02:46,930 --> 00:02:50,110
So the items will have five items here.

47
00:02:50,260 --> 00:02:52,090
So the first one is ID.

48
00:02:52,120 --> 00:02:56,770
ID is typically a log if the system is really huge.

49
00:02:56,980 --> 00:03:04,900
So let's say long ID equals to will sell long box, primitive class dot.

50
00:03:05,230 --> 00:03:10,410
There is this method called pass or here pass long.

51
00:03:10,420 --> 00:03:12,040
So just use that method.

52
00:03:12,520 --> 00:03:17,140
And what do we want to pass the first item in the array?

53
00:03:17,680 --> 00:03:19,150
It is items of zero.

54
00:03:20,050 --> 00:03:21,900
So that's how you would pass it.

55
00:03:21,910 --> 00:03:24,740
And other classes also have similar methods.

56
00:03:24,760 --> 00:03:26,110
So next one is the title.

57
00:03:26,110 --> 00:03:28,450
So for title, we don't have to do anything.

58
00:03:28,480 --> 00:03:29,380
So.

59
00:03:30,730 --> 00:03:32,020
So it is the first item.

60
00:03:32,350 --> 00:03:34,920
Next is the publication here.

61
00:03:34,930 --> 00:03:36,490
So that is an end.

62
00:03:36,730 --> 00:03:39,850
So let's call it as pub here.

63
00:03:41,860 --> 00:03:43,530
So this is an eight.

64
00:03:43,540 --> 00:03:48,010
So within the integer class we have a pass method.

65
00:03:48,220 --> 00:03:53,920
So any time when we are dealing with strings and we want to parse, so the methods will be named in

66
00:03:53,920 --> 00:03:54,560
this way.

67
00:03:54,580 --> 00:04:00,250
So now it will be parsed end because we want to extract an end from the string.

68
00:04:00,970 --> 00:04:03,160
So this is items of two.

69
00:04:04,560 --> 00:04:06,300
Next is a car.

70
00:04:06,570 --> 00:04:10,980
But for car we don't have such a pass method.

71
00:04:11,160 --> 00:04:15,060
So what we will do is we will say items of three.

72
00:04:15,390 --> 00:04:21,779
And if you recall, there is a method called car eight and we need to pass the index so it would be

73
00:04:21,779 --> 00:04:22,530
zero.

74
00:04:22,890 --> 00:04:29,550
So this is the method from the string class and these are all pass methods are the static methods.

75
00:04:30,480 --> 00:04:31,740
So next is the rating.

76
00:04:31,740 --> 00:04:32,790
So double.

77
00:04:33,680 --> 00:04:36,440
So here the D stands for technical.

78
00:04:36,740 --> 00:04:39,650
So here once again the double box.

79
00:04:39,650 --> 00:04:42,860
Remember to class dot pass double.

80
00:04:45,990 --> 00:04:49,300
So all of these methods are very similar to each other.

81
00:04:49,310 --> 00:04:50,630
They are saying pass something.

82
00:04:50,630 --> 00:04:51,950
So it's like pass type.

83
00:04:51,950 --> 00:04:53,960
So that's the general syntax that we have.

84
00:04:54,110 --> 00:04:59,990
So let's go ahead and print this out, control space and we'll print the ID here.

85
00:05:05,770 --> 00:05:07,030
Application here.

86
00:05:12,310 --> 00:05:12,970
So that's it.

87
00:05:12,970 --> 00:05:14,680
And let's go ahead and print them here.

88
00:05:14,680 --> 00:05:15,940
We have some print statements.

89
00:05:15,940 --> 00:05:17,200
Let me just comment them out.

90
00:05:17,200 --> 00:05:22,930
So select all of them and say control forward slash and they're all commented out.

91
00:05:23,470 --> 00:05:27,190
So let's go back here and let's just print them here.

92
00:05:28,650 --> 00:05:32,250
I see they are printing the primitive values now.

93
00:05:32,520 --> 00:05:36,750
So that's how you would parse strings and they are very useful methods.

94
00:05:36,750 --> 00:05:39,390
So it's a very important use case here.

95
00:05:39,660 --> 00:05:45,510
So whenever you think of usability of box parameters, you can think of this example.

96
00:05:45,900 --> 00:05:49,980
Now here we are extracting an end here.

97
00:05:50,520 --> 00:05:57,630
Now, if you want to extract if you want to convert the string into, let's say, a boxed parameter,

98
00:05:57,750 --> 00:06:00,300
then can you guess what we have to do?

99
00:06:00,960 --> 00:06:10,830
So for instance, for this publication here, let's say integer boxed pub here, it is not an end.

100
00:06:11,250 --> 00:06:13,500
So can you guess what we need to do for this?

101
00:06:14,040 --> 00:06:22,050
If you recall in the previous lecture we said we can use value of a string, value of is an overloaded

102
00:06:22,050 --> 00:06:23,700
method and it would take a string.

103
00:06:23,700 --> 00:06:30,270
So you would just pass this items off to and you will get an integer instance.

104
00:06:30,480 --> 00:06:36,420
So this is value of, like I said, is a static factory method and it's an overloaded method and it

105
00:06:36,420 --> 00:06:38,070
will help us create objects.

106
00:06:38,070 --> 00:06:42,060
So this is an integer object and this one is an int primitive.

107
00:06:42,480 --> 00:06:47,550
That's why we'll say parse int and it returns an int value of a return an object.

108
00:06:47,880 --> 00:06:48,840
So that's that.

109
00:06:48,840 --> 00:06:54,720
And we already know about this max and min value that we have an integer classes, right.

110
00:06:54,720 --> 00:06:56,580
So we have already used them.

111
00:06:56,580 --> 00:06:58,710
So I'm not going to discuss them.

112
00:06:58,770 --> 00:07:01,530
So we use them in the int class max value.

113
00:07:01,530 --> 00:07:05,760
We would return the max value that an end variable can hold and this is a main value.

114
00:07:05,970 --> 00:07:08,340
So we are not going to discuss that anymore.

115
00:07:08,940 --> 00:07:15,900
Now there are several other utility methods and let's look at few utility methods from the character

116
00:07:15,900 --> 00:07:16,530
class.

117
00:07:17,820 --> 00:07:20,430
So we have character here, right?

118
00:07:20,430 --> 00:07:23,430
We extracted this genre here.

119
00:07:23,550 --> 00:07:28,140
Now, we might want to know whether it is a letter or a digit.

120
00:07:28,350 --> 00:07:34,560
So there are some boolean condition methods which will test whether an input character is a letter or

121
00:07:34,560 --> 00:07:38,170
an easy digit or whether it is an uppercase or lowercase.

122
00:07:38,190 --> 00:07:41,300
So there are certain methods for that and let's just try them out.

123
00:07:41,310 --> 00:07:45,150
So they all start with this ease keyword.

124
00:07:45,360 --> 00:07:47,970
And more on that later in naming conventions.

125
00:07:47,970 --> 00:07:51,570
So we will say, for instance, ease letter.

126
00:07:51,900 --> 00:07:53,670
So this will return a true F.

127
00:07:53,670 --> 00:07:56,850
The input character is a letter.

128
00:07:57,180 --> 00:07:58,080
Similarly.

129
00:07:59,030 --> 00:08:01,160
You can have ease digit.

130
00:08:01,160 --> 00:08:04,760
So the genre is actually P here in our case.

131
00:08:04,760 --> 00:08:06,020
So it will be a false.

132
00:08:06,200 --> 00:08:07,880
So let's use the same one.

133
00:08:10,460 --> 00:08:15,770
There is a method which will say whether it is letter or digit over here and you can see many other

134
00:08:15,770 --> 00:08:16,610
methods here.

135
00:08:19,280 --> 00:08:19,500
Okay.

136
00:08:19,520 --> 00:08:23,540
Now, let's say we want to test whether it is an uppercase or lowercase.

137
00:08:23,540 --> 00:08:25,370
So there is a method for that also.

138
00:08:26,420 --> 00:08:32,809
So, for instance, if you are writing, if you are creating some sort of an editor and after the full

139
00:08:32,809 --> 00:08:40,190
stop, if the user enters a character and you want to auto convert it into an uppercase, then you perhaps

140
00:08:40,190 --> 00:08:42,559
can use some method such as this one.

141
00:08:42,559 --> 00:08:47,270
So it is uppercase and you will just say, John, right here.

142
00:08:48,140 --> 00:08:54,620
So let's go ahead and assign this to a boolean, because a boolean is what they are returning.

143
00:08:54,620 --> 00:08:57,020
So let's just call them as is letter.

144
00:09:06,940 --> 00:09:08,680
So let's go and print them.

145
00:09:10,110 --> 00:09:12,300
Solid control space is.

146
00:09:24,740 --> 00:09:26,340
So let's just execute them.

147
00:09:27,260 --> 00:09:33,290
And it returns true for because it's a letter, then it returns false for each digit because it's not

148
00:09:33,290 --> 00:09:33,830
a digit.

149
00:09:33,830 --> 00:09:40,370
And for each letter or digit it returns a true because it is a letter and for is uppercase it returns

150
00:09:40,370 --> 00:09:44,750
a true because here we have it as uppercase right here.

151
00:09:45,290 --> 00:09:45,710
Right.

152
00:09:46,010 --> 00:09:48,950
So those are some common utility methods.

153
00:09:48,950 --> 00:09:59,840
Now double also has a method called is none which will check if an input number is a non or not a number.

154
00:09:59,840 --> 00:10:02,210
So now we know as not a number.

155
00:10:03,380 --> 00:10:06,740
For instance, we can have 0.0 and this operation.

156
00:10:07,310 --> 00:10:08,990
Right, 0.0.

157
00:10:08,990 --> 00:10:12,410
So this well, this is not a number so it will return a true.

158
00:10:12,440 --> 00:10:15,080
So once again boolean.

159
00:10:20,960 --> 00:10:21,390
There you go.

160
00:10:21,410 --> 00:10:25,730
So it returns a true because it is not an it is not a number.

161
00:10:26,420 --> 00:10:30,650
Now the end integer like there are some interesting methods.

162
00:10:30,650 --> 00:10:39,380
So if at all you're curious to know what the binary representation is of a particular int value.

163
00:10:39,380 --> 00:10:44,090
So let us say eight then you can use this method called to binary string.

164
00:10:44,690 --> 00:10:47,240
So here it will return a string.

165
00:10:47,240 --> 00:10:50,180
So is a string that cinema does binary.

166
00:10:53,060 --> 00:10:54,770
And it will return 1000.

167
00:10:54,920 --> 00:10:57,020
So that's the binary representation of this thing.

168
00:10:57,020 --> 00:11:01,910
So if you're curious and if you want to know the binary format of a particular string, then you can

169
00:11:01,910 --> 00:11:03,620
do that now.

170
00:11:04,690 --> 00:11:11,020
We have seen how we can convert a string into a primitive like the past method parsing method.

171
00:11:11,050 --> 00:11:18,280
Similarly, if you want to convert an primitive into a string so you can use this method called dot

172
00:11:18,310 --> 00:11:20,020
to string, it's a static method.

173
00:11:20,170 --> 00:11:21,820
So this is what you would do.

174
00:11:22,240 --> 00:11:24,250
This will return a string.

175
00:11:24,490 --> 00:11:25,630
So that's it.

176
00:11:25,660 --> 00:11:27,430
Let's say some string or whatever.

177
00:11:27,950 --> 00:11:29,820
Or we had that publication here.

178
00:11:29,830 --> 00:11:32,380
So let's say pub here.

179
00:11:32,470 --> 00:11:36,130
And we can name it as pub here as a string.

180
00:11:38,320 --> 00:11:39,250
Something like this.

181
00:11:39,340 --> 00:11:43,540
So it would convert that into a string, a primitive into a string.

182
00:11:44,580 --> 00:11:45,510
So that's that.

183
00:11:45,900 --> 00:11:50,430
So we looked at some the parse method, the max value.

184
00:11:50,940 --> 00:11:54,540
So for that box parameters are used and there are some utility methods here.

185
00:11:54,570 --> 00:12:00,840
Now, the last thing is we have these data structures like ArrayList.

186
00:12:00,840 --> 00:12:07,260
So if you want to populate those data structures, you should always store an object reference.

187
00:12:07,530 --> 00:12:08,820
You cannot store primitives.

188
00:12:08,820 --> 00:12:16,350
For instance, ArrayList is a data structure and let's say we want to store all our IDs, book IDs in

189
00:12:16,350 --> 00:12:16,850
this.

190
00:12:16,860 --> 00:12:28,140
So you will say array list and you will say ID list, dot add and you can say something like long dot

191
00:12:28,140 --> 00:12:29,370
value of.

192
00:12:30,030 --> 00:12:32,220
ID is one that we extracted.

193
00:12:32,220 --> 00:12:37,820
But you don't have to do this so you can just do this ID.

194
00:12:38,190 --> 00:12:45,570
It works, but it works only from Java five onwards, but before Java five.

195
00:12:45,600 --> 00:12:46,740
So this wouldn't work.

196
00:12:46,740 --> 00:12:50,040
This statement wouldn't work before Java five.

197
00:12:50,040 --> 00:12:58,410
So it works only from Java five onwards, but still underneath it is going to store a long instance,

198
00:12:58,410 --> 00:12:59,280
a box primitive.

199
00:12:59,280 --> 00:13:04,710
So it's going to convert this ID value, which is a primitive into a box primitive and is going to store

200
00:13:04,710 --> 00:13:09,450
that and that is called as auto boxing, which is a subject of next lecture.

201
00:13:09,720 --> 00:13:13,830
So any of these objects will always store only object references.

202
00:13:14,190 --> 00:13:19,660
So this is there, but behind the scenes it is going to store an object reference and that would be

203
00:13:19,740 --> 00:13:22,590
subject of next lecture.

204
00:13:22,590 --> 00:13:24,030
It's called auto boxing.

205
00:13:24,840 --> 00:13:33,660
Finally, one other thing as about it's also useful in generics when creating something called a parameterized

206
00:13:33,690 --> 00:13:39,330
type, but we still did not discuss generic, so you don't have to worry about it.

207
00:13:39,330 --> 00:13:41,430
But I'll just give you a simple example.

208
00:13:41,460 --> 00:13:43,440
Let's say we are creating this.

209
00:13:43,770 --> 00:13:51,960
We want to store all of the ratings and another list and rating we know is double, right?

210
00:13:51,960 --> 00:13:55,950
So we don't want to store anything else other than double.

211
00:13:55,950 --> 00:13:59,370
So that's where the generics comes into play and this is the syntax for that.

212
00:13:59,370 --> 00:14:06,660
So we are saying that create an array list, but you have to store only double values here, but here

213
00:14:06,660 --> 00:14:08,340
it needs to be a box parameter.

214
00:14:08,370 --> 00:14:11,130
Now if you say double, we get a compilation error.

215
00:14:11,460 --> 00:14:15,090
So it requires this to be a box primitive.

216
00:14:15,630 --> 00:14:16,620
So that's what it is.

217
00:14:16,630 --> 00:14:25,440
Now if you add rating list, dot, add some, let's say some int value, then it will give us a compilation

218
00:14:25,440 --> 00:14:27,630
error because we require a double header.

219
00:14:27,630 --> 00:14:29,370
So that's parameter is type.

220
00:14:29,580 --> 00:14:32,160
This is called as a parameter time, but let's not worry about it.

221
00:14:32,160 --> 00:14:37,860
But at least this one here cannot be a primitive, so that's all there is.

222
00:14:37,860 --> 00:14:44,430
So we looked at how we can create box primitives using the value of method, then how we can unwrap

223
00:14:44,430 --> 00:14:47,820
using end to value sort of method here.

224
00:14:48,540 --> 00:14:49,920
Right int value.

225
00:14:51,120 --> 00:14:52,210
Here on rap.

226
00:14:52,290 --> 00:14:56,100
Then we looked at the parsing methods to parse.

227
00:14:56,100 --> 00:15:01,020
So this is very commonly used if you want to convert strings into primitives.

228
00:15:02,700 --> 00:15:06,330
And Maxwell and there are some utility methods here which you can always use.

229
00:15:06,360 --> 00:15:12,210
And finally, if you want to store in data structures, it needs to be in the form of a box primitives.

230
00:15:12,210 --> 00:15:15,630
But the Java compiler will take care of that.

231
00:15:15,960 --> 00:15:17,610
And it's also used here in generics.

232
00:15:17,910 --> 00:15:18,390
Thank you.

233
00:15:18,390 --> 00:15:22,380
And I hope you enjoyed learning about this and I'll see you in the next lecture.

