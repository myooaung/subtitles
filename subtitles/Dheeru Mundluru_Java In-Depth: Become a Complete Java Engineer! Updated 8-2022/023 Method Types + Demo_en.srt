1
00:00:02,090 --> 00:00:03,060
Hi there.

2
00:00:03,080 --> 00:00:05,120
This is De La Rue and welcome back.

3
00:00:05,330 --> 00:00:10,700
So we now understand what methods are and a method can be of two types.

4
00:00:10,880 --> 00:00:14,090
It can be an instance method or it can be a static method.

5
00:00:14,600 --> 00:00:21,140
And the class can have only instance methods or only static methods, or it can have both instance as

6
00:00:21,140 --> 00:00:22,340
well as static methods.

7
00:00:24,030 --> 00:00:25,750
Let's just look at instance methods.

8
00:00:25,770 --> 00:00:32,880
As the name implies, instance methods are methods of instances of a class that is the objects of a

9
00:00:32,880 --> 00:00:36,480
class, that is the represent behavior of objects.

10
00:00:36,600 --> 00:00:39,690
And they can be accessed via object references.

11
00:00:41,120 --> 00:00:47,150
We use a dart operator on an object reference in order to access instance methods of the object.

12
00:00:47,510 --> 00:00:52,700
And we discuss this at the beginning of the section while introducing class and objects.

13
00:00:54,500 --> 00:01:00,860
And the methods of an object are invoked in order to perform some action on behalf of the object.

14
00:01:01,370 --> 00:01:05,180
And in doing so, they usually affect the object state.

15
00:01:05,420 --> 00:01:07,010
That is, the state is changed.

16
00:01:08,150 --> 00:01:14,750
And instance methods do this by directly manipulating instance variables which we know represent object

17
00:01:14,750 --> 00:01:15,230
state.

18
00:01:15,890 --> 00:01:22,610
And when we say manipulate instance variables, we mean that values of one or more instance variables

19
00:01:22,610 --> 00:01:23,720
are updated.

20
00:01:25,540 --> 00:01:27,910
And objects that can also be affected.

21
00:01:27,910 --> 00:01:34,420
When instance methods invoke other instance methods within the same class as those other instance,

22
00:01:34,420 --> 00:01:37,180
methods may also manipulate instance variables.

23
00:01:37,970 --> 00:01:44,210
And shortly we will do a demo where we will extend the currency converter class from our assignment

24
00:01:44,360 --> 00:01:48,980
and we will see how instance methods can be used in order to manipulate object state.

25
00:01:50,650 --> 00:01:52,660
Next, we have static methods.

26
00:01:52,930 --> 00:01:55,750
Here we will just look at what static methods are.

27
00:01:56,020 --> 00:02:02,260
And later we will revisit them in a different section and we will get into a few more additional details.

28
00:02:03,850 --> 00:02:10,690
Static methods have the keyword static in the method declaration and absence of static keyword implies

29
00:02:10,690 --> 00:02:12,280
that it's an instance method.

30
00:02:13,850 --> 00:02:16,790
Static methods are class level methods.

31
00:02:18,250 --> 00:02:22,510
That is unlike instance methods they do not deal with object state.

32
00:02:23,170 --> 00:02:29,860
This implies that they do not have access to either instance variables or instance methods within the

33
00:02:29,860 --> 00:02:30,700
same class.

34
00:02:31,240 --> 00:02:32,760
That is from a static method.

35
00:02:32,770 --> 00:02:39,160
If you directly try to access an instance variable declared within the same class, then you get a compiler

36
00:02:39,160 --> 00:02:39,610
error.

37
00:02:40,090 --> 00:02:44,680
Similarly, you cannot even invoke an instance method within the same class.

38
00:02:45,250 --> 00:02:50,740
So if we are unable to manipulate state, then the question is what purpose do the so?

39
00:02:52,260 --> 00:02:54,210
This of US utility methods.

40
00:02:54,600 --> 00:03:01,050
Utility methods are methods which typically take some input and perform some action based on that input

41
00:03:01,050 --> 00:03:02,580
and generate some output.

42
00:03:03,390 --> 00:03:09,150
An example is the sum method, which we saw in an earlier lecture where the sum method accepted two

43
00:03:09,150 --> 00:03:13,350
numeric values as input and returned the sum of those two numbers.

44
00:03:13,770 --> 00:03:16,950
The sum method used only the method parameters.

45
00:03:17,580 --> 00:03:23,940
So static methods are typically dependent on just the input parameters, and they cannot access any

46
00:03:23,940 --> 00:03:26,970
instance variables which are object specific.

47
00:03:28,680 --> 00:03:31,500
However they can access static variables.

48
00:03:32,040 --> 00:03:35,850
If you recall, static variables are class level variables.

49
00:03:36,150 --> 00:03:42,030
That is, they are also not object specific and so can be accessed from static methods.

50
00:03:42,690 --> 00:03:47,820
Static variables are variables which are shared across different objects of the same class.

51
00:03:48,660 --> 00:03:54,180
Static variables will also be revisited in a later section where they will be discussed at a greater

52
00:03:54,180 --> 00:03:54,720
detail.

53
00:03:56,420 --> 00:04:00,920
A static method can directly access other static methods in the same class.

54
00:04:02,930 --> 00:04:08,960
Since there are class level methods, they are invoked using a dot operator on the class name.

55
00:04:10,870 --> 00:04:13,630
Main method is an example of a static method.

56
00:04:14,110 --> 00:04:18,610
So static methods have nothing to do with the object state within the same class.

57
00:04:18,970 --> 00:04:25,000
In fact, the methods which we wrote in our demo are also static methods and they are accessed directly

58
00:04:25,000 --> 00:04:28,630
from the main method where main method is also a static method.

59
00:04:29,260 --> 00:04:35,710
We could have defined instance methods instead of static methods, but to access those instance methods

60
00:04:35,710 --> 00:04:40,900
from the main method, we would have to first create an object of the basics.

61
00:04:40,900 --> 00:04:48,100
Demo class as main method is a static method and we cannot directly access static methods from the same

62
00:04:48,100 --> 00:04:48,580
class.

63
00:04:49,180 --> 00:04:55,450
So we would have to create an object of basics demo and using it we would have accessed those instance

64
00:04:55,450 --> 00:04:55,990
methods.

65
00:04:56,500 --> 00:05:02,560
But creating an object of basics demo is just some extra bit of code, and we are keeping it simple

66
00:05:02,560 --> 00:05:04,540
with just using static methods.

67
00:05:05,200 --> 00:05:09,700
Now let's go ahead and extend our currency converter class from the assignment.

68
00:05:12,340 --> 00:05:15,940
Here we are in the currency converter class from our assignment.

69
00:05:16,090 --> 00:05:18,280
Some of you might have skipped the assignment.

70
00:05:18,280 --> 00:05:22,180
So let me just explain what we have in this class and in this demo.

71
00:05:22,180 --> 00:05:23,590
We are going to extend this class.

72
00:05:23,830 --> 00:05:29,340
So in this class we are first declaring a variable called US exchange rates, which is a double array.

73
00:05:29,350 --> 00:05:34,810
And we also have this method called print currencies where we are printing the values in this array

74
00:05:35,320 --> 00:05:39,970
and then we have the main method where we are instantiating this class and we are invoking this method.

75
00:05:40,510 --> 00:05:47,980
So in this particular array, what we have is the exchange rates of different currencies relative to

76
00:05:47,980 --> 00:05:50,550
1 USD, for instance.

77
00:05:50,560 --> 00:05:54,040
The first one here corresponds to Indian rupee.

78
00:05:54,340 --> 00:05:59,680
So what it means is 1 USD is equivalent to â‚¹63.

79
00:06:00,700 --> 00:06:04,990
Similarly, for instance, here 107 is the Japanese yen.

80
00:06:04,990 --> 00:06:08,460
So 1 USD equals 107?

81
00:06:08,470 --> 00:06:09,010
Yes.

82
00:06:09,610 --> 00:06:14,500
So here we have different currency exchange rates of different countries.

83
00:06:14,740 --> 00:06:19,660
And within the print currencies method, we are simply printing these values.

84
00:06:19,900 --> 00:06:23,950
So for instance, for rupee, we are printing the value at index zero.

85
00:06:24,070 --> 00:06:26,230
And for dirham this is for our hum.

86
00:06:26,230 --> 00:06:27,910
So we are printing the value at one.

87
00:06:28,090 --> 00:06:31,870
Similarly for Australian we are printing the last value.

88
00:06:31,870 --> 00:06:32,680
This is the one.

89
00:06:32,680 --> 00:06:39,340
But instead of using six, we are using the length field and we are subtracting one here in order to

90
00:06:39,340 --> 00:06:40,840
print this particular value.

91
00:06:41,140 --> 00:06:43,050
So we just wanted to use the landfill.

92
00:06:43,060 --> 00:06:49,420
So in the demo we are simply creating a double array and we are printing the individual values.

93
00:06:49,420 --> 00:06:52,750
So that's what we wanted to test and that's what this class does.

94
00:06:53,080 --> 00:07:00,010
So this class is still incomplete and it can be extended mainly such kind of a class will be useful

95
00:07:00,010 --> 00:07:05,380
in money transfer services like PayPal, for instance.

96
00:07:05,380 --> 00:07:11,950
Let's say if you are in the United States and if you want to transfer some money, like $1,000 to say

97
00:07:11,950 --> 00:07:16,360
some local bank in India, then you would use a service like PayPal.

98
00:07:16,390 --> 00:07:23,440
And PayPal would use this kind of a class in order to convert those $1,000 into Indian rupees.

99
00:07:23,890 --> 00:07:30,190
So it would use this exchange rate and it would multiply it with 1000 in order to get the converted

100
00:07:30,190 --> 00:07:31,880
value and Indian rupees.

101
00:07:32,380 --> 00:07:34,300
So that's the background.

102
00:07:34,660 --> 00:07:39,490
One of the things that we have said is the instance methods can manipulate state.

103
00:07:39,490 --> 00:07:45,250
So here we have this instance method and let's go ahead and write a couple of more instance methods.

104
00:07:45,400 --> 00:07:48,220
So first let me run this program here.

105
00:07:48,880 --> 00:07:50,980
So I'm in the basics directory.

106
00:07:51,490 --> 00:07:53,620
So this class is in the basics directory.

107
00:07:55,580 --> 00:07:58,010
So here it prints the values.

108
00:07:58,970 --> 00:08:03,620
Now, just note that here we are instantiating currency converter.

109
00:08:03,620 --> 00:08:09,290
And we said that in order to access an instance method, we need to use the object reference.

110
00:08:09,290 --> 00:08:12,290
So that's why we have the object reference followed by a dot.

111
00:08:13,090 --> 00:08:14,770
Now if you do not use it.

112
00:08:15,780 --> 00:08:17,730
Ed gives us a compilation error.

113
00:08:21,570 --> 00:08:25,020
Because Maine is a non is a static method.

114
00:08:25,050 --> 00:08:29,810
And from static method we cannot access any state related stuff.

115
00:08:29,820 --> 00:08:35,850
So print currency is an instance method and we cannot reference it from from a static method.

116
00:08:35,850 --> 00:08:37,409
So we need to have the.

117
00:08:39,059 --> 00:08:42,780
Object reference in order to access the instance method.

118
00:08:42,809 --> 00:08:44,370
Now here.

119
00:08:45,230 --> 00:08:47,840
We have these values now.

120
00:08:49,080 --> 00:08:50,990
Let's say initially it's null.

121
00:08:51,000 --> 00:08:52,140
Let's say it is null.

122
00:08:52,230 --> 00:08:57,120
If we are not initializing it, it's null and we will try to set those values from here.

123
00:08:57,570 --> 00:09:05,310
So let me copy it here and let me write a new method called set exchange rates.

124
00:09:05,310 --> 00:09:09,150
And using that we will initialize the exchange rates variable.

125
00:09:11,460 --> 00:09:15,630
And let's define this variable called rates here.

126
00:09:16,980 --> 00:09:18,690
It has to be an array.

127
00:09:26,500 --> 00:09:28,210
So this is a matter of definition.

128
00:09:28,660 --> 00:09:33,160
So to this set exchange rates, we are going to pass this.

129
00:09:33,490 --> 00:09:35,260
So let's call this as.

130
00:09:38,870 --> 00:09:39,730
Rates itself.

131
00:09:39,740 --> 00:09:40,760
It can be any name.

132
00:09:42,030 --> 00:09:44,640
And that's a c c dot.

133
00:09:50,300 --> 00:09:54,080
Pastor Rich now with this.

134
00:09:54,590 --> 00:10:01,370
So when control comes here, set exchange rates would be involved and these rates will be passed and

135
00:10:01,370 --> 00:10:05,240
the rates here will be assigned to exchange rates.

136
00:10:05,240 --> 00:10:08,000
So that's how we are going to initialize exchange rates.

137
00:10:08,000 --> 00:10:09,740
So let me just compile this.

138
00:10:16,760 --> 00:10:18,830
So it prints all the values and we are good.

139
00:10:19,280 --> 00:10:27,050
So initially this was null, but using this instance method, we are manipulating the state and we are

140
00:10:27,050 --> 00:10:29,810
changing it from null to these values.

141
00:10:30,260 --> 00:10:33,590
So let's go ahead and change it one more time.

142
00:10:33,590 --> 00:10:40,560
Let's say this is on January 1st, so exchange rates would be computed once every day.

143
00:10:40,580 --> 00:10:44,000
So let's say that was on Jan first and.

144
00:10:45,350 --> 00:10:50,090
Let's say on June 2nd, we have a different set of values.

145
00:10:51,410 --> 00:10:53,930
So we have the same rates here.

146
00:10:55,390 --> 00:11:00,070
So let's just change this to 65 and maybe this to 500.

147
00:11:00,130 --> 00:11:02,560
The rest of them are same, or they might change.

148
00:11:02,560 --> 00:11:04,000
But let's leave it like that.

149
00:11:06,800 --> 00:11:09,520
Now here it's giving some error.

150
00:11:09,530 --> 00:11:11,720
And can you guess what the reason is?

151
00:11:12,080 --> 00:11:18,440
The reason is because this is an assignment statement and in an assignment statement you cannot initialize

152
00:11:18,440 --> 00:11:21,140
the array in this way we have to use.

153
00:11:23,120 --> 00:11:29,840
This notation, because this kind of the simplest way applies only in a declaration statement.

154
00:11:29,930 --> 00:11:32,150
And you may recall it from an earlier lecture.

155
00:11:32,330 --> 00:11:34,100
So it needs to be like this.

156
00:11:40,650 --> 00:11:41,250
Here you go.

157
00:11:41,550 --> 00:11:47,100
So when it was invoked for the first time, these were the values on the second time, on the second

158
00:11:47,100 --> 00:11:52,740
day, the values of Ruby and Ram got updated to 65 and the RAM from 3 to 5.

159
00:11:52,980 --> 00:11:55,790
And we are printing the the updated values.

160
00:11:55,800 --> 00:12:01,020
So as you can see, the state of the object has been updated.

161
00:12:01,020 --> 00:12:08,550
So initially the state was null, then we updated it to the first set of values and then on the second

162
00:12:08,550 --> 00:12:16,320
day we are updating once again with new set of values, but we are using the same object reference.

163
00:12:16,320 --> 00:12:23,640
So the state in the object reference has been changed from null to these values and from these values

164
00:12:23,640 --> 00:12:28,230
it has been changed once again using the set exchange rates method.

165
00:12:28,500 --> 00:12:32,970
So that's how we can manipulate the state from the instance methods.

166
00:12:34,220 --> 00:12:38,330
Now let's try another method to update just a single value.

167
00:12:38,660 --> 00:12:40,340
So let's call it an update.

168
00:12:47,010 --> 00:12:52,290
Update exchange rate and let's update only a single element.

169
00:12:54,810 --> 00:13:02,430
So let's declare a variable called index and let's update it with a new one.

170
00:13:04,510 --> 00:13:08,980
Let's say some mistake happened and it was not set correctly.

171
00:13:08,980 --> 00:13:13,240
So we want to update that particular element.

172
00:13:14,350 --> 00:13:18,190
So here it is, exchange rates off our index.

173
00:13:18,610 --> 00:13:23,890
So this would be the specific element and we are updating with the new value.

174
00:13:24,760 --> 00:13:28,210
Now let's go ahead and invoke this method.

175
00:13:33,370 --> 00:13:34,120
It's.

176
00:13:39,750 --> 00:13:42,540
Let's call it a date exchange rate singular.

177
00:13:46,490 --> 00:13:54,620
Let's say we want to update the value of rupee, which is an index zero, and we want to say update

178
00:13:54,620 --> 00:13:56,210
it to 66.

179
00:13:56,660 --> 00:13:57,520
That's what we have.

180
00:13:57,530 --> 00:14:00,530
So let's go ahead and print these values.

181
00:14:03,420 --> 00:14:03,550
Okay.

182
00:14:03,630 --> 00:14:05,520
So we are passing the values zero.

183
00:14:06,320 --> 00:14:08,510
Which corresponds to rupee.

184
00:14:08,540 --> 00:14:13,550
So that gets assigned to our index and the new value is 66.

185
00:14:13,550 --> 00:14:15,170
So that gets assigned to here.

186
00:14:15,290 --> 00:14:20,390
And so we are updating the value at zero position with the new value.

187
00:14:20,690 --> 00:14:22,010
So that must be clear.

188
00:14:28,250 --> 00:14:29,270
Clear the screen.

189
00:14:31,510 --> 00:14:32,380
And there you go.

190
00:14:32,470 --> 00:14:35,110
So it is 6 to 6 now from 65.

191
00:14:35,110 --> 00:14:36,730
It got incremental to 66.

192
00:14:36,730 --> 00:14:39,820
So that's the only thing that we incremented.

193
00:14:40,180 --> 00:14:42,400
Now, let's also write a couple of methods.

194
00:14:42,730 --> 00:14:43,690
More methods.

195
00:14:43,690 --> 00:14:45,340
So one of them.

196
00:14:46,170 --> 00:14:47,430
So here we are updating.

197
00:14:47,430 --> 00:14:50,070
Now let's fetch a value, let's say.

198
00:14:51,340 --> 00:14:52,150
Let's call it.

199
00:14:53,330 --> 00:14:56,780
That's double and let's get an exchange rate.

200
00:14:58,720 --> 00:15:00,340
For a particular.

201
00:15:01,340 --> 00:15:02,090
Country.

202
00:15:02,390 --> 00:15:03,890
So here.

203
00:15:08,590 --> 00:15:11,680
It would be exchange rates of this array index.

204
00:15:12,130 --> 00:15:16,510
So if you pass zero, it would return the value at index position zero.

205
00:15:16,720 --> 00:15:18,220
Now let's also declare.

206
00:15:19,480 --> 00:15:21,550
Let's make it a little bit more realistic.

207
00:15:21,580 --> 00:15:25,870
Let's assume that a money transfer service like PayPal would be using it.

208
00:15:25,900 --> 00:15:30,070
So let's say we want to transfer a certain amount of US dollars.

209
00:15:30,460 --> 00:15:34,900
So for that, we can declare this variable called compute.

210
00:15:36,530 --> 00:15:37,880
Transfer amount.

211
00:15:39,180 --> 00:15:42,240
And let's have this other index.

212
00:15:43,060 --> 00:15:45,860
And let's define a variable called amount.

213
00:15:45,880 --> 00:15:47,890
So this is like the US dollars.

214
00:15:48,370 --> 00:15:54,620
And here we want to compute, let's say if 1000 is passed here, which is thousand.

215
00:15:55,360 --> 00:16:01,390
So we want to let's say if zero is passed here, which is for Indian currency, then we want to compute

216
00:16:01,390 --> 00:16:03,220
the the transfer amount.

217
00:16:03,610 --> 00:16:06,250
So we need this amount thousand.

218
00:16:06,670 --> 00:16:11,020
It needs to be multiplied with the exchange rates of this index.

219
00:16:11,020 --> 00:16:15,400
But instead of using this, let's use this method called get exchange rate.

220
00:16:18,880 --> 00:16:19,480
Okay.

221
00:16:19,750 --> 00:16:23,560
Now, so this is for computing transfer amount.

222
00:16:50,770 --> 00:16:56,500
So we are invoking the compute transfer amount, which is an instance method, and that method is in

223
00:16:56,500 --> 00:16:59,330
turn invoking the get exchange rate.

224
00:16:59,350 --> 00:17:05,859
So if we are passing zero on 1000, so we want to convert 1,000 USD into rupees.

225
00:17:06,220 --> 00:17:13,630
So 1000 is multiplied here, so thousand gets assigned to amount and that we are multiplying with get

226
00:17:13,630 --> 00:17:14,290
exchange rate.

227
00:17:14,290 --> 00:17:18,790
So we are invoking the get exchange rate method and passing this array index as this.

228
00:17:19,210 --> 00:17:25,930
And that would return the exchange rate corresponding to this index, the value at that particular index,

229
00:17:25,930 --> 00:17:27,579
which would be like 66.

230
00:17:27,970 --> 00:17:30,490
And then we are multiplying it and then we are returning it.

231
00:17:30,700 --> 00:17:35,410
So here, in order to access this method, we can access it directly.

232
00:17:36,190 --> 00:17:40,570
But to access the first time, we have to use the object reference.

233
00:17:40,570 --> 00:17:44,800
But from within this instance method, we can invoke other instance methods directly.

234
00:17:52,950 --> 00:17:55,470
It's got to be close this amount.

235
00:18:01,510 --> 00:18:01,890
Here you go.

236
00:18:02,050 --> 00:18:09,550
So we get 6 to 6000 because we are passing $1,000 and it's â‚¹4 and rupee is 66 and we get that final

237
00:18:09,550 --> 00:18:10,000
amount.

238
00:18:10,180 --> 00:18:12,070
So that's with the instance methods.

239
00:18:12,070 --> 00:18:17,940
And for static methods, we have already seen static methods in the last in the previous demo.

240
00:18:17,950 --> 00:18:23,440
So where we declared this method called a sum which computes the sum of two numbers.

241
00:18:23,440 --> 00:18:24,780
So it's a static variable.

242
00:18:24,790 --> 00:18:25,600
Here it is.

243
00:18:25,750 --> 00:18:29,830
Now, as we mentioned, it only works on the method parameters.

244
00:18:29,830 --> 00:18:31,900
It doesn't access any instance variables.

245
00:18:32,170 --> 00:18:37,120
So it is just taking these parameters and completing the sum and returning the sum.

246
00:18:37,540 --> 00:18:40,060
So that's how static methods work.

247
00:18:40,060 --> 00:18:44,470
So they are mainly for utility methods, they service utility methods.

248
00:18:44,470 --> 00:18:48,640
And here also this method average is is invoking this sum method.

249
00:18:49,800 --> 00:18:51,960
So that's about static methods.

250
00:18:51,960 --> 00:18:56,130
And static methods will be discussed later also along with static variables.

251
00:18:56,160 --> 00:19:04,410
Now just for example here, let's say if I make this static, static void print currency is static and

252
00:19:04,410 --> 00:19:08,610
it is accessing instance variables here and that should not be possible.

253
00:19:08,760 --> 00:19:11,430
So let me just compile and show it to you.

254
00:19:14,110 --> 00:19:20,560
So it says that non static variable exchange rates cannot be referenced from a static context.

255
00:19:21,860 --> 00:19:27,440
So we cannot access an instance variable from a static method.

256
00:19:28,860 --> 00:19:31,110
Now if we make this static.

257
00:19:34,240 --> 00:19:36,520
Then it would be fine.

258
00:19:41,330 --> 00:19:42,740
So it compiles fine.

259
00:19:44,400 --> 00:19:46,230
And in fact, it runs fine too.

260
00:19:46,590 --> 00:19:52,080
So both the method as well as the variable is static.

261
00:19:52,090 --> 00:19:52,920
So that's good.

262
00:19:52,950 --> 00:19:56,640
Now next question you might ask is from here.

263
00:19:56,640 --> 00:20:00,030
This is a static method and we are accessing a static variable, which is good.

264
00:20:00,240 --> 00:20:06,480
But here we have instance methods and these instance methods are accessing the static variables.

265
00:20:07,350 --> 00:20:16,350
So that is possible because static stuff, any static stuff is global, which is accessible across all

266
00:20:16,350 --> 00:20:17,420
of the objects.

267
00:20:17,430 --> 00:20:23,850
So here this is an instance method and it belongs to a particular object and it can access any static

268
00:20:23,850 --> 00:20:24,300
stuff.

269
00:20:24,300 --> 00:20:29,050
So from this instance method, you can access static variables or static methods.

270
00:20:29,070 --> 00:20:34,290
It's just that from a static method you cannot access instance stuff.

271
00:20:34,290 --> 00:20:40,110
That's because instance stuff is specific to objects from an instance method.

272
00:20:40,110 --> 00:20:45,570
Once again, from an instance method, you can access static stuff because static stuff is global and

273
00:20:45,570 --> 00:20:47,250
is shared across all objects.

274
00:20:47,520 --> 00:20:55,710
But from an static method you cannot access instance stuff because instances, instance stuff is specific

275
00:20:55,710 --> 00:20:57,660
to a particular objects.

276
00:20:58,720 --> 00:20:59,680
So that should be clear.

277
00:20:59,680 --> 00:21:05,440
But we will get back to both static methods and static variables in a subsequent section.

278
00:21:06,070 --> 00:21:07,300
So that's about it.

279
00:21:07,720 --> 00:21:10,870
And this code will also be available in the resources section.

280
00:21:10,990 --> 00:21:13,750
But I would advise you to type in everything.

281
00:21:14,020 --> 00:21:20,950
But for this particular file, if it is saved as dot text and the resource section, just convert it

282
00:21:20,950 --> 00:21:24,700
to dot java extension and you should be able to compile and run it.

283
00:21:25,300 --> 00:21:27,040
Thank you and see you in the next lecture.

