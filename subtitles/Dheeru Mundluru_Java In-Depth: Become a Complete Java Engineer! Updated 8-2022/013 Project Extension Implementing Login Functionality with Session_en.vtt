WEBVTT
1
00:00:02.100 --> 00:00:02.950
Hi there.

2
00:00:02.969 --> 00:00:04.070
This is the De La Rue.

3
00:00:04.080 --> 00:00:05.130
And welcome back.

4
00:00:05.550 --> 00:00:10.950
Now, let's go ahead and implement the final piece, which is the login functionality.

5
00:00:11.340 --> 00:00:13.920
So here we will have a login screen.

6
00:00:13.920 --> 00:00:18.810
So we'll have a form where we have to enter our email and password.

7
00:00:19.110 --> 00:00:26.070
And once we submit those details, they will be passed on to the back end where we need to authenticate

8
00:00:26.070 --> 00:00:27.360
those credentials.

9
00:00:27.630 --> 00:00:33.450
And if the authentication succeeds, which means that the user has entered the right password and the

10
00:00:33.450 --> 00:00:41.010
right email, then we forward the user to the my books page so that he or she can view the books that

11
00:00:41.010 --> 00:00:42.720
the user has saved.

12
00:00:43.200 --> 00:00:49.980
But if the authentication fails, then we take the user back to the login screen so that he or she can

13
00:00:49.980 --> 00:00:53.760
enter re enter the username, the email and the password.

14
00:00:53.970 --> 00:00:56.940
So that's the functionality that we are going to implement.

15
00:00:57.180 --> 00:01:01.200
So the main thing that we are going to implement is from submission.

16
00:01:01.710 --> 00:01:07.650
So far we haven't looked at form submission, so all we looked at was displaying a bunch of items in

17
00:01:07.650 --> 00:01:14.160
a page, but we really did not do any form submission that is taking information from the user and passing

18
00:01:14.160 --> 00:01:15.600
it to the to the back end.

19
00:01:15.780 --> 00:01:19.800
So that is something that we will explore in this particular lecture.

20
00:01:20.160 --> 00:01:26.610
So far, all the requests that are being sent from the browser are get requests, but you also know

21
00:01:26.610 --> 00:01:29.330
that there is a post request we discussed about it.

22
00:01:29.340 --> 00:01:33.900
So in this case we will generate a post request via a form submission.

23
00:01:33.900 --> 00:01:39.270
So we will look at that and we will also look at something called less sessions, HTTP session, and

24
00:01:39.270 --> 00:01:40.620
that's a very important concept.

25
00:01:40.620 --> 00:01:43.140
So I'll explain what that is when we get there.

26
00:01:43.830 --> 00:01:51.630
Now the first thing I want to do is so this is what we see here is all the rows from the user table

27
00:01:51.780 --> 00:01:59.130
and all of the users that are five users and all of them had the password as test and we are storing

28
00:01:59.130 --> 00:02:00.690
it in clear format.

29
00:02:01.080 --> 00:02:06.990
All the characters are visible here and that is not good because if somebody hacks into your system

30
00:02:06.990 --> 00:02:14.100
then they can grab all the passwords and hacking and using the passwords is pretty common activity on

31
00:02:14.100 --> 00:02:14.430
the web.

32
00:02:14.430 --> 00:02:16.770
And we hear that all the time in the news.

33
00:02:16.770 --> 00:02:18.570
So we should not do this.

34
00:02:18.570 --> 00:02:22.560
In fact, we should store an encrypted form of these passwords.

35
00:02:23.490 --> 00:02:30.540
So for that, we use something called as a hash function, a cryptographic hash function that will take

36
00:02:30.540 --> 00:02:35.910
the you the password that the user enters, let's say, during the registration time.

37
00:02:36.090 --> 00:02:42.750
And that password will be encrypted using the hash function, cryptographic hash function, and that

38
00:02:42.750 --> 00:02:44.100
will be stored in the password.

39
00:02:44.100 --> 00:02:49.620
So you will never store a password like this, but you will always store an encrypted format.

40
00:02:49.650 --> 00:02:56.130
So it's not just about hacking, but the employees of the company which is building this kind of a product,

41
00:02:56.130 --> 00:03:01.410
they can look at the database and they can look at your password and they may able to misuse too.

42
00:03:01.500 --> 00:03:07.710
So if you are developing a product, you should ensure that the passwords are all are always are in

43
00:03:07.720 --> 00:03:08.760
encrypted format.

44
00:03:09.510 --> 00:03:12.120
So let's go ahead and run a query.

45
00:03:12.120 --> 00:03:17.250
So the cryptographic hash function that I'm going to use, I will show it to you later.

46
00:03:17.250 --> 00:03:18.300
That's not important.

47
00:03:18.300 --> 00:03:21.570
But I have already created the password and I have a query.

48
00:03:22.710 --> 00:03:25.030
Let me copy that skill query.

49
00:03:25.050 --> 00:03:27.630
So this is the encrypted form for test.

50
00:03:27.720 --> 00:03:31.560
So for all of them, it's just the same encrypted password.

51
00:03:31.650 --> 00:03:39.270
So the function, the hash function will generate the same code and make it so.

52
00:03:44.440 --> 00:03:47.950
So as you can see, all of them have been updated from test to this one.

53
00:03:48.430 --> 00:03:54.220
So good thing is they are encrypted and they are also irreversible, which means that somebody cannot

54
00:03:54.220 --> 00:03:59.500
take this password encrypted form and cannot regenerate the original form.

55
00:03:59.890 --> 00:04:04.240
It's always one way only, so you cannot regenerate the original password.

56
00:04:04.360 --> 00:04:11.440
So now when we log in into the system, so we are entering the username and the password and that password

57
00:04:11.440 --> 00:04:15.370
in the back end when it is sent to the back end to the subnet container.

58
00:04:15.370 --> 00:04:22.990
So our servlet well servlet or the back end logic will once again encrypt that password which is in

59
00:04:22.990 --> 00:04:28.900
clear format and it will compare that encrypted password with the one that is stored in the database.

60
00:04:28.930 --> 00:04:31.030
That's how authentication happens.

61
00:04:31.870 --> 00:04:33.280
So that's one thing.

62
00:04:33.280 --> 00:04:34.540
So that's taken care of.

63
00:04:34.990 --> 00:04:42.610
Now, one other thing in this particular demo that we are going to do is to have the logout link just

64
00:04:42.610 --> 00:04:43.950
like the way we are logging in.

65
00:04:43.960 --> 00:04:46.660
Once the user logs in, we need to also log out.

66
00:04:46.660 --> 00:04:52.360
So to both our page's browser and my books, we need to add a new menu item.

67
00:04:52.360 --> 00:04:53.770
So that's.

68
00:04:55.010 --> 00:04:55.960
Here.

69
00:04:55.970 --> 00:04:57.920
So this is the logout link.

70
00:04:58.490 --> 00:05:02.840
So let me go into browse dot jsp.

71
00:05:04.380 --> 00:05:06.900
And we have the navigation bar at the top.

72
00:05:07.230 --> 00:05:14.820
So browse dot JSP was displaying a link my box so right beneath that let me hear it is that link is

73
00:05:14.820 --> 00:05:16.380
here let me copy this here.

74
00:05:16.380 --> 00:05:21.180
So we now have two links my books on logout similarly.

75
00:05:22.680 --> 00:05:24.090
In my bookstore.

76
00:05:24.090 --> 00:05:27.630
JSP We will have browse and the new logout link.

77
00:05:27.630 --> 00:05:29.280
So this is a browse here.

78
00:05:31.260 --> 00:05:33.660
And right adjacent to that we have log out.

79
00:05:33.660 --> 00:05:38.270
So browse and log out in my books and in browse it is my books and log out.

80
00:05:38.280 --> 00:05:39.950
So those are the two things.

81
00:05:39.960 --> 00:05:41.610
Next we need to add.

82
00:05:42.500 --> 00:05:44.150
A log in JSP file.

83
00:05:44.150 --> 00:05:46.790
So let's hear the Trillian Web project.

84
00:05:47.300 --> 00:05:48.830
So we are going to add that.

85
00:05:48.830 --> 00:05:54.860
Now one thing I want to show here in the logout link is so it is also a link.

86
00:05:54.860 --> 00:05:57.680
So it has an it's an anchor tag.

87
00:05:57.680 --> 00:06:04.460
So once again, we are calling the get context path so that the context which is Trillian Web will be

88
00:06:04.460 --> 00:06:08.210
added here and we are going to call a new URL.

89
00:06:08.660 --> 00:06:13.400
Earlier we had slash bookmark, so this time it is called a slash art.

90
00:06:13.640 --> 00:06:19.970
What it means is we are going to write a new controller this time just for handling all the login related

91
00:06:19.970 --> 00:06:26.750
functionality, whether it is log in or registration or forgot password, which we see in websites.

92
00:06:26.750 --> 00:06:32.390
So for all of those kind of functionality, we can have one separate controller and for bookmarking

93
00:06:32.390 --> 00:06:33.830
we have a different controller.

94
00:06:33.980 --> 00:06:37.490
So we are not implementing forgot password or registration.

95
00:06:37.490 --> 00:06:38.900
We just have the login.

96
00:06:39.970 --> 00:06:41.080
Or even the logout.

97
00:06:41.110 --> 00:06:47.430
So for those things, you know, it can be implemented later, you can implement it if you're interested,

98
00:06:47.440 --> 00:06:50.290
but we are only interested in log in and log out.

99
00:06:50.290 --> 00:06:54.510
So this is the path log slash or slash log out.

100
00:06:54.940 --> 00:06:58.960
And so just wanted to show you that and we will use those URL patterns.

101
00:06:58.960 --> 00:07:03.370
So let's go ahead and create the log in JSP page.

102
00:07:03.370 --> 00:07:10.000
So on your web and right clicking and say new and a GSP.

103
00:07:12.160 --> 00:07:14.680
Log into GSP next.

104
00:07:15.860 --> 00:07:22.610
The default template is good, but as you expected, I'm going to replace that with the login code that

105
00:07:22.610 --> 00:07:23.210
I have.

106
00:07:23.870 --> 00:07:25.280
Control, see.

107
00:07:27.450 --> 00:07:27.930
Said.

108
00:07:29.130 --> 00:07:30.120
Let me save it.

109
00:07:30.420 --> 00:07:32.340
So everything else is same.

110
00:07:32.730 --> 00:07:38.370
So this title log in here that you see here in the head is actually displayed here.

111
00:07:38.550 --> 00:07:39.870
It gets displayed here.

112
00:07:42.750 --> 00:07:47.370
Just wanted to show you that because I've been talking about this, but I was never showing it to you

113
00:07:47.370 --> 00:07:49.470
in the in the web page.

114
00:07:49.710 --> 00:07:51.810
And everything else is the same.

115
00:07:51.810 --> 00:07:57.450
We have the the navigation, not the navigation, the header which displays the name.

116
00:07:58.470 --> 00:08:00.510
And here is the within the body.

117
00:08:00.510 --> 00:08:02.090
Here we have the form.

118
00:08:02.100 --> 00:08:04.440
So this is how it is, the form tag.

119
00:08:04.500 --> 00:08:06.710
And the form tag ends here.

120
00:08:07.410 --> 00:08:08.640
It ends here.

121
00:08:08.970 --> 00:08:12.290
And within the form tag we have a table.

122
00:08:12.300 --> 00:08:17.160
But the main thing is we are we have the form itself, the email.

123
00:08:17.460 --> 00:08:22.770
This is the text email, but this is the HTML tag for the text box.

124
00:08:22.770 --> 00:08:25.230
It's called us type equal to text.

125
00:08:25.230 --> 00:08:27.770
A name of this text box is email.

126
00:08:27.780 --> 00:08:29.010
So this is what we have.

127
00:08:29.010 --> 00:08:34.010
But the actual text is actually displayed outside here, right here for email.

128
00:08:34.020 --> 00:08:41.309
Similarly, we have password and here the HTML tag is input, but the type will be password.

129
00:08:41.940 --> 00:08:42.929
It's not text.

130
00:08:42.929 --> 00:08:48.300
And with that, when we enter the password, the characters will not be visible.

131
00:08:48.300 --> 00:08:50.250
So that's for security purposes.

132
00:08:50.250 --> 00:08:55.010
So this type equal to password will give us that security and name is password.

133
00:08:55.020 --> 00:09:02.220
So the value of these names is what we will get by invoking the request dot get parameter method.

134
00:09:02.820 --> 00:09:05.160
And finally we have the submit button.

135
00:09:05.160 --> 00:09:07.110
So once again it will be input.

136
00:09:07.110 --> 00:09:11.190
So for all three HTML tracks it is input only input tag.

137
00:09:11.220 --> 00:09:12.780
It says the type is varying.

138
00:09:12.780 --> 00:09:18.540
It is either either type is password or type is submit and that's it.

139
00:09:18.690 --> 00:09:22.980
And on the submit button, this is the label that goes on the submit button.

140
00:09:22.980 --> 00:09:24.660
It says value equal to login.

141
00:09:25.020 --> 00:09:27.030
And now let's look at the form tag.

142
00:09:27.030 --> 00:09:29.220
So method is what we have.

143
00:09:29.220 --> 00:09:31.410
We are saying it is post OC.

144
00:09:31.440 --> 00:09:33.690
That's how we specify the HTTP method.

145
00:09:33.690 --> 00:09:40.770
And if you remove this by default, it will be method equal to get and action is the destination.

146
00:09:40.770 --> 00:09:43.470
Where do you want to send this data?

147
00:09:43.470 --> 00:09:49.380
So request dot get context path as as usual we have it here and slash auth.

148
00:09:49.650 --> 00:09:50.760
So we have this auth.

149
00:09:50.760 --> 00:09:52.170
That's the URL pattern.

150
00:09:52.290 --> 00:09:57.660
So we are going to define this auth in a new controller called auth controller, which we are going

151
00:09:57.660 --> 00:09:58.650
to create next.

152
00:09:58.920 --> 00:10:06.030
And it's going there and even for the log log out here, if you'll see here, we had auth slash logout,

153
00:10:06.060 --> 00:10:08.700
whereas here it is only slash auth.

154
00:10:09.060 --> 00:10:11.490
So that's the destination and this is the post.

155
00:10:11.520 --> 00:10:17.100
Now if how I use get here, what happens is this email and password.

156
00:10:17.550 --> 00:10:25.620
So these parameters will be appended to the to the URL just like this even this was a get request when

157
00:10:25.620 --> 00:10:28.560
we were sending this information for save.

158
00:10:28.650 --> 00:10:34.230
Similarly, it will be appended here like email equal to something and password equal to something.

159
00:10:34.230 --> 00:10:42.330
But with post that data will not be shown in the in the address bar, but it will be sent as part of

160
00:10:42.330 --> 00:10:45.840
the HTTP request itself in the message body.

161
00:10:46.100 --> 00:10:48.630
I think we discussed that in the beginning lecture.

162
00:10:49.170 --> 00:10:52.320
So it will be it will not be shown in the in the browser.

163
00:10:52.320 --> 00:10:57.690
And that is that's good because we are sending the form details and especially if you are sending a

164
00:10:57.690 --> 00:11:03.960
lot of details, if there are a lot of form parameters, then you have to use post or if you are using

165
00:11:03.960 --> 00:11:09.240
some login information, if you're passing some login credentials, then you have to use post for sure.

166
00:11:10.110 --> 00:11:10.800
So.

167
00:11:10.890 --> 00:11:11.780
So that's about it.

168
00:11:11.790 --> 00:11:14.430
So that's the log in JSP file.

169
00:11:14.430 --> 00:11:20.270
And when we create that, it's always any JSP will be created under this web content folder.

170
00:11:20.280 --> 00:11:22.710
Browse, dot, JSP log and my box.

171
00:11:23.340 --> 00:11:28.290
Now let's go ahead and create a new controller called Auth Controller.

172
00:11:28.290 --> 00:11:32.100
So let's say new this time it's going to be a servlet.

173
00:11:34.290 --> 00:11:36.520
I think we can create it directly here.

174
00:11:38.810 --> 00:11:39.510
Yes.

175
00:11:39.530 --> 00:11:42.890
You can click on the package and we can create it there.

176
00:11:43.940 --> 00:11:45.890
It stands for authentication.

177
00:11:45.950 --> 00:11:48.350
So it's just some simple convention.

178
00:11:48.350 --> 00:11:50.870
Some teams use that next.

179
00:11:52.150 --> 00:11:52.810
Next.

180
00:11:52.810 --> 00:11:55.750
So just create, do get and do post and that's it.

181
00:11:55.750 --> 00:12:00.640
It's created here we will say your URL patents.

182
00:12:01.470 --> 00:12:03.990
Bookmark controller can go back.

183
00:12:05.080 --> 00:12:06.920
We had this, if you recall.

184
00:12:06.940 --> 00:12:08.110
So we are just.

185
00:12:09.810 --> 00:12:11.100
You just use that?

186
00:12:22.060 --> 00:12:24.070
Time that and that's it.

187
00:12:24.190 --> 00:12:27.010
So that's with this and.

188
00:12:31.260 --> 00:12:34.020
So this is the do get method which we need to override.

189
00:12:34.200 --> 00:12:36.420
So we'll have an F statement.

190
00:12:37.600 --> 00:12:42.280
And this is for the login and this is for logout.

191
00:12:42.430 --> 00:12:44.290
Let's fill out the logout later.

192
00:12:44.410 --> 00:12:46.360
So we will say request.

193
00:12:47.940 --> 00:12:49.710
If you go back here in.

194
00:12:51.440 --> 00:12:52.490
We had this.

195
00:12:54.260 --> 00:12:55.820
Because don't get sublet part.

196
00:12:55.850 --> 00:12:57.230
Dot contains.

197
00:13:00.140 --> 00:13:01.430
That's a log out.

198
00:13:03.350 --> 00:13:04.400
And let's see.

199
00:13:07.380 --> 00:13:08.640
Not contains.

200
00:13:09.030 --> 00:13:10.470
Let me also save this.

201
00:13:10.470 --> 00:13:15.330
I think I did not show you this one last time, if I remember, I.

202
00:13:16.590 --> 00:13:19.020
I'll try to show this, but it's not that important.

203
00:13:19.050 --> 00:13:24.300
It will just whatever we print here will be shown in the console of the container.

204
00:13:25.140 --> 00:13:25.800
That's it.

205
00:13:26.310 --> 00:13:27.260
And this is for that.

206
00:13:27.270 --> 00:13:29.070
So now we need to get.

207
00:13:31.000 --> 00:13:32.410
Email and password.

208
00:13:32.440 --> 00:13:33.940
So request.

209
00:13:36.960 --> 00:13:39.090
So this was the name of the textbox.

210
00:13:47.970 --> 00:13:56.040
Now let's call a method called let's write a new method user manager because we are dealing with users,

211
00:13:56.070 --> 00:13:57.140
not bookmarks.

212
00:13:57.150 --> 00:13:58.590
So get instance.

213
00:14:00.030 --> 00:14:02.010
Let's create a method called authenticate.

214
00:14:04.430 --> 00:14:05.750
Express email.

215
00:14:08.930 --> 00:14:09.830
Password.

216
00:14:09.950 --> 00:14:11.420
Let's create that method.

217
00:14:11.420 --> 00:14:12.500
Or to create.

218
00:14:13.280 --> 00:14:13.850
Okay.

219
00:14:14.240 --> 00:14:15.350
And let's.

220
00:14:16.010 --> 00:14:17.570
This method written a long.

221
00:14:18.840 --> 00:14:22.800
The user ID is what has to be returned if it is a valid one.

222
00:14:23.070 --> 00:14:25.530
And here, let's say, written.

223
00:14:26.570 --> 00:14:26.820
LOL.

224
00:14:26.960 --> 00:14:27.860
So this will be user.

225
00:14:29.430 --> 00:14:30.360
To indicate.

226
00:14:32.300 --> 00:14:36.020
Now, we said that we need to convert this password.

227
00:14:36.960 --> 00:14:39.270
Into an encrypted form.

228
00:14:39.270 --> 00:14:42.210
So there is this method which I have already written.

229
00:14:42.240 --> 00:14:44.460
It's called encode password.

230
00:14:44.760 --> 00:14:46.320
So this is something I have.

231
00:14:47.440 --> 00:14:48.880
That is written offline.

232
00:14:49.870 --> 00:14:52.810
I created this class called String Util.

233
00:14:52.840 --> 00:15:00.460
Now we have this package called Common Semantic Squared Util, which has all utility classes, and we

234
00:15:00.460 --> 00:15:05.140
had classes like HTTP Connect Ivo Util from all the previous versions.

235
00:15:05.170 --> 00:15:07.510
Added this new class called String Util.

236
00:15:07.840 --> 00:15:12.580
Now in string util we will have all string related methods.

237
00:15:12.580 --> 00:15:16.340
And one of the methods I added was encode your code password.

238
00:15:16.360 --> 00:15:17.910
That's the only method we have.

239
00:15:17.920 --> 00:15:23.650
And this encode password will take the password and will return an encoded version.

240
00:15:23.800 --> 00:15:27.040
So it uses a cryptographic hash function for that.

241
00:15:27.310 --> 00:15:28.570
It's called a SHA.

242
00:15:28.600 --> 00:15:30.310
That's the algorithm that is used.

243
00:15:30.430 --> 00:15:32.350
And you can also use other algorithms.

244
00:15:32.350 --> 00:15:38.140
But let's not get into this as this is totally irrelevant to this for us here.

245
00:15:38.320 --> 00:15:40.120
So I'm just calling that method.

246
00:15:42.160 --> 00:15:42.740
Here it is.

247
00:15:42.760 --> 00:15:43.840
User manager.

248
00:15:45.740 --> 00:15:46.370
Here.

249
00:15:46.670 --> 00:15:54.020
So email and within the second argument, I'm first calling this encode password and the encrypted password

250
00:15:54.020 --> 00:15:56.660
is what will be passed to the authenticate method.

251
00:15:56.870 --> 00:16:01.700
To the authenticate method we are passing email as well as an encrypted password.

252
00:16:01.700 --> 00:16:07.330
So let's go ahead and create a method and the user double.

253
00:16:08.000 --> 00:16:09.980
And I think I have that method here.

254
00:16:12.120 --> 00:16:13.050
Here it is.

255
00:16:13.080 --> 00:16:17.430
So this code will also be provided to you in the resources section.

256
00:16:17.850 --> 00:16:20.880
So let me replace this with this.

257
00:16:21.480 --> 00:16:22.960
And it's a very simple code.

258
00:16:22.980 --> 00:16:27.900
Once again, we have the driver loading the connection and statement creation and we are saying select

259
00:16:27.900 --> 00:16:33.240
ID from user where email is equal to email and password is equal to password.

260
00:16:33.240 --> 00:16:37.320
And this is a single code because these are strings and that's it.

261
00:16:37.320 --> 00:16:41.580
We are getting the statement and we are invoking this method called Execute Query.

262
00:16:43.490 --> 00:16:48.170
And while we are iterating and we are just we just need the ID.

263
00:16:48.200 --> 00:16:55.310
So if this returns any, any rules, which means that the email and password are correct, are there

264
00:16:55.310 --> 00:16:58.550
in the database, then we are returning the corresponding ID.

265
00:16:58.910 --> 00:17:05.329
Now if one of those or both of them are not there, which means that the user there is no user with

266
00:17:05.329 --> 00:17:10.520
this email and password, then we will never get into this loop and we will return a minus one.

267
00:17:10.520 --> 00:17:18.530
So minus one means authentication failed and any value other than that implies that the user has.

268
00:17:19.619 --> 00:17:21.300
Been successfully authenticated.

269
00:17:22.200 --> 00:17:23.250
So that's it.

270
00:17:23.250 --> 00:17:30.060
And let's say f let's assign this to something called user ID.

271
00:17:32.430 --> 00:17:39.360
And if this user ID is not equal to minus one.

272
00:17:40.180 --> 00:17:44.620
Then you should forward the control to my box.

273
00:17:44.860 --> 00:17:48.520
Otherwise, you should send the user back to.

274
00:17:50.570 --> 00:17:52.780
You should go to the login page.

275
00:18:04.870 --> 00:18:08.380
Now, if the user clicks on logout, the same thing must happen.

276
00:18:08.590 --> 00:18:15.070
But if the user clicks on user ID, then we must forward it to my books.

277
00:18:15.070 --> 00:18:15.570
Right?

278
00:18:15.580 --> 00:18:21.960
So for that we will say bookmark slash my books.

279
00:18:22.330 --> 00:18:25.600
Now here we are forwarding it to a servlet.

280
00:18:25.600 --> 00:18:28.570
But here and here we are following it to JSP.

281
00:18:28.600 --> 00:18:32.410
So with JSP you have to include the slash at the beginning.

282
00:18:32.950 --> 00:18:34.540
For servlet, we don't need that.

283
00:18:34.540 --> 00:18:36.240
So just keep that in mind.

284
00:18:36.250 --> 00:18:41.100
So when you're implementing, you might make some mistake there and it might be difficult to figure

285
00:18:41.110 --> 00:18:41.550
out.

286
00:18:41.560 --> 00:18:42.500
So that's that.

287
00:18:42.520 --> 00:18:45.040
Now, one thing is about session.

288
00:18:45.610 --> 00:18:46.840
Now, here.

289
00:18:47.700 --> 00:18:48.870
If you look at this.

290
00:18:48.870 --> 00:18:52.950
So let's say the user has logged in, the user is viewing this page.

291
00:18:52.950 --> 00:18:56.120
So he you know, the user has bookmarked this item.

292
00:18:56.130 --> 00:18:57.540
That's what we can see here.

293
00:18:58.020 --> 00:19:05.580
The servlet container has associated this item with the with the user and this has generated this response.

294
00:19:05.610 --> 00:19:11.220
Now, if the user clicks on Browse, we need to show all the items that are not yet bookmarked right

295
00:19:11.400 --> 00:19:11.850
now.

296
00:19:11.850 --> 00:19:17.370
But how does the server know that the new request is coming from the same client?

297
00:19:17.550 --> 00:19:18.120
Right.

298
00:19:18.270 --> 00:19:19.800
So it does not know.

299
00:19:19.800 --> 00:19:23.100
And that's because HTTP protocol is stateless.

300
00:19:23.280 --> 00:19:30.270
So once the container generates this response, if it gets a new request, it does not know that the

301
00:19:30.270 --> 00:19:32.010
request is coming from the same client.

302
00:19:32.010 --> 00:19:37.500
So as soon as it generates this response, it completely forgets about the response about the client.

303
00:19:37.500 --> 00:19:41.160
So the second request, it will never know that it's coming from the response.

304
00:19:41.160 --> 00:19:47.490
So we need to have a way to persist that information and for that we use a HTTP session.

305
00:19:47.910 --> 00:19:50.490
So in the session we will store the user ID.

306
00:19:51.000 --> 00:19:55.560
So the session would be common to multiple requests coming from the same client.

307
00:19:56.730 --> 00:20:03.660
And this is the same feature that is also used in e-commerce sites for let's say when you are trying

308
00:20:03.660 --> 00:20:07.950
to save some items in an in an e-commerce site, let's say books.

309
00:20:07.950 --> 00:20:12.990
So those books will be added to a shopping cart and finally you will be able to checkout.

310
00:20:13.110 --> 00:20:14.340
So that's one example.

311
00:20:14.340 --> 00:20:21.660
Or when you are accessing your email sites like Gmail or or any other sites like Amazon, they will

312
00:20:21.660 --> 00:20:25.050
always keep track of of your actions.

313
00:20:25.050 --> 00:20:28.140
And for that, they make use of HTTP session.

314
00:20:28.410 --> 00:20:32.100
So that's what history session does and we need that.

315
00:20:32.100 --> 00:20:39.000
So for that we will use another method from request object called get session.

316
00:20:40.780 --> 00:20:42.730
And this would return something called.

317
00:20:44.140 --> 00:20:45.930
HTTP session.

318
00:20:47.410 --> 00:20:51.700
So this is unique to this particular request object.

319
00:20:53.950 --> 00:20:54.970
So just keep that in mind.

320
00:20:54.970 --> 00:21:03.670
I just imported the HTTP session history http session as from this package Xbox dot servlet dot http.

321
00:21:03.820 --> 00:21:05.230
So that's all it is.

322
00:21:05.860 --> 00:21:07.360
So that's the session object.

323
00:21:07.360 --> 00:21:10.990
So it is a kind of object that is specific to this request.

324
00:21:11.290 --> 00:21:15.250
And within that object we can store any data.

325
00:21:16.060 --> 00:21:19.090
So we will say set attribute.

326
00:21:19.120 --> 00:21:21.970
Here it is and we want to store.

327
00:21:22.970 --> 00:21:31.550
The user ID that we just got from the database and we will store it here user ID.

328
00:21:32.000 --> 00:21:36.920
So what the session object does is it creates a new session object.

329
00:21:37.340 --> 00:21:45.830
It's just an object session and it associates that session object with something called a session ID.

330
00:21:46.970 --> 00:21:55.580
And when this response is sent to the client, to the browser, it will get the session ID and the second

331
00:21:55.580 --> 00:21:57.140
time it makes a new request.

332
00:21:57.140 --> 00:22:03.170
Whether it is for this page or some other page, it will also pass the session ID and when the container

333
00:22:03.170 --> 00:22:08.240
gets the session ID it will take the session ID and it will locate the session object.

334
00:22:08.450 --> 00:22:09.950
So think of that.

335
00:22:09.950 --> 00:22:15.200
The thing that the container is maintained, maintaining some kind of a hash map, but where the key

336
00:22:15.200 --> 00:22:17.310
is session ID and the value is the session object.

337
00:22:17.330 --> 00:22:23.450
So in the second request, when the client passes the session ID, it looks if the if there is that

338
00:22:23.450 --> 00:22:29.990
session ID, if it is there, then it will grab the session object and the user can make use of that,

339
00:22:30.410 --> 00:22:35.810
make use of that session object and get whatever data that the user is storing in that session object.

340
00:22:35.810 --> 00:22:41.100
In this case, it is we are storing a user ID, so that's how the sessions work.

341
00:22:41.120 --> 00:22:45.980
So initially, for the first time, it will create a session object and it will associate it with the

342
00:22:45.980 --> 00:22:49.010
session ID and this is for a single client.

343
00:22:49.220 --> 00:22:55.040
And the second and that session ID will be passed to the browser when the response is generated and

344
00:22:55.040 --> 00:23:01.160
the browser in turn for any subsequent requests, the client will pass the session ID and all of that

345
00:23:01.160 --> 00:23:02.540
will happen implicitly.

346
00:23:02.720 --> 00:23:06.020
We don't do anything, so it happens implicitly.

347
00:23:06.020 --> 00:23:09.770
And how it happens is kind of beyond explanation.

348
00:23:09.770 --> 00:23:10.910
We cannot explain it here.

349
00:23:10.910 --> 00:23:13.970
You would have to study separately.

350
00:23:13.970 --> 00:23:19.430
It's a simple thing, but that's what it is and it uses some cookie technologies for that.

351
00:23:19.430 --> 00:23:22.100
So cookies needs to be enabled for this to work.

352
00:23:22.100 --> 00:23:27.470
And so generally cookies are enabled, but if they are disabled and this will not work, then but we

353
00:23:27.470 --> 00:23:29.120
need to use another technique.

354
00:23:29.510 --> 00:23:33.200
But generally cookies are enabled and it should be fine.

355
00:23:33.560 --> 00:23:35.450
So everything is done implicitly.

356
00:23:35.450 --> 00:23:37.670
We seamlessly we don't have to do anything.

357
00:23:37.700 --> 00:23:42.620
The client will generate, the object will generate the session, ID will pass it to the client and

358
00:23:42.620 --> 00:23:49.910
the client will in turn pass it back to the to the browser or to the server on subsequent requests.

359
00:23:50.570 --> 00:23:55.700
And this session will be valid by default for 30 minutes at least on Tomcat.

360
00:23:55.700 --> 00:24:03.050
So for 30 minutes, if as a client, if we are not doing any any actions, then this particular session

361
00:24:03.050 --> 00:24:08.270
will expire automatically and typically you will be taken back to the login page.

362
00:24:09.590 --> 00:24:10.550
Now that's it.

363
00:24:10.550 --> 00:24:17.720
But we can also increase that session timeout by invoking a method called set max time interval.

364
00:24:17.720 --> 00:24:23.450
It can be invoked on this method, on the session object and if you pass a minus one it means that it

365
00:24:23.450 --> 00:24:24.380
is forever.

366
00:24:24.410 --> 00:24:31.400
Or if you can pass other time limits instead of 30 minutes, you can set it for like few days or a few

367
00:24:31.400 --> 00:24:31.970
months.

368
00:24:31.970 --> 00:24:35.270
You just need to pass the value that you are interested in.

369
00:24:35.450 --> 00:24:41.510
But if you pass minus one, it would be set for error and that is for this session object.

370
00:24:41.510 --> 00:24:47.150
But you can also set for all of the users by doing it in the web XML.

371
00:24:47.360 --> 00:24:50.570
But that's outside the scope of this discussion.

372
00:24:50.570 --> 00:24:51.680
Let's not worry about it.

373
00:24:51.710 --> 00:24:53.900
Now, another thing here is.

374
00:24:55.190 --> 00:25:02.210
Let's just when we click on this log out, we need to also invalidate the session.

375
00:25:02.210 --> 00:25:06.410
For that we'll say request dot get session.

376
00:25:07.320 --> 00:25:14.580
That way, if the user clicks on the back button, so user will not be able to get back into the login

377
00:25:14.580 --> 00:25:15.090
mode.

378
00:25:15.390 --> 00:25:16.840
So you will say sorry.

379
00:25:16.860 --> 00:25:18.360
It would be invalidated.

380
00:25:20.070 --> 00:25:20.880
Here it is.

381
00:25:22.490 --> 00:25:24.440
We are just training with a method here.

382
00:25:24.440 --> 00:25:30.230
Also I could have said request dot get session dot set attribute, but I just wanted to show this object

383
00:25:30.230 --> 00:25:31.100
separately.

384
00:25:31.100 --> 00:25:33.170
So that's why we have it as two statements.

385
00:25:33.170 --> 00:25:37.910
So there is no chaining there and here we are passing it to my books.

386
00:25:37.950 --> 00:25:43.280
Okay, so now we need to do something in my books, which is the bookmark controller.

387
00:25:43.280 --> 00:25:44.210
Here it is.

388
00:25:45.290 --> 00:25:47.300
So first thing is this is.

389
00:25:49.230 --> 00:25:55.760
Okay this is a it's I mean we have written it and do get but the control actually comes here to the

390
00:25:55.770 --> 00:26:03.480
to post because in log into JSP that's what we are doing method is post so with this when the control

391
00:26:03.480 --> 00:26:12.750
goes back to the to the container so container is going to look at slash auth this slash auth here and

392
00:26:12.750 --> 00:26:13.500
it will.

393
00:26:14.560 --> 00:26:19.930
You know, it will get this particular servlet because it also has slash auth and it will invoke the

394
00:26:19.930 --> 00:26:24.640
service method which is inside this HTTP servlet and it will pass.

395
00:26:26.740 --> 00:26:32.710
A request object and response object, and the service method will see that the request is for post,

396
00:26:32.710 --> 00:26:38.260
for it's a post request, so it will invoke the due post and the do post internally it is invoking to

397
00:26:38.260 --> 00:26:38.740
get.

398
00:26:38.740 --> 00:26:45.490
So the control comes here and we have all of this logic and from here we are passing it to this servlet

399
00:26:45.490 --> 00:26:46.630
right my box.

400
00:26:46.630 --> 00:26:49.840
And once again there needs to be a post method.

401
00:26:50.230 --> 00:26:55.660
It will be forwarded to the service method of this new of the bookmark controller and bookmark controller

402
00:26:55.660 --> 00:26:57.700
will in turn pass it to the do post method.

403
00:26:57.700 --> 00:27:01.750
But if you see we did not write the do post method here, we just have the do get.

404
00:27:01.870 --> 00:27:03.400
It's just that we did not write it.

405
00:27:03.400 --> 00:27:06.670
So let's go ahead and copy this whole code due post.

406
00:27:07.750 --> 00:27:11.500
You can have this entire time and the bookmark controller.

407
00:27:12.480 --> 00:27:13.470
You can add it here.

408
00:27:14.510 --> 00:27:15.110
And that's it.

409
00:27:15.110 --> 00:27:16.430
And the post is calling do get.

410
00:27:16.460 --> 00:27:17.840
So this is an important thing.

411
00:27:17.870 --> 00:27:19.670
Otherwise it will not work.

412
00:27:20.120 --> 00:27:27.800
And here we we also need to check if the user ID, user ID is stored in the session.

413
00:27:27.800 --> 00:27:28.260
Right.

414
00:27:28.280 --> 00:27:32.070
We need to ensure that the session is still valid.

415
00:27:32.090 --> 00:27:36.740
So what we can do for that is we will write a new F block here.

416
00:27:36.860 --> 00:27:37.990
We'll say F.

417
00:27:38.000 --> 00:27:40.130
So that's the first thing that we do here.

418
00:27:40.550 --> 00:27:41.780
Will say request.

419
00:27:44.510 --> 00:27:52.660
Dot session and within the session we had get we have this method called get attribute.

420
00:27:52.670 --> 00:27:53.960
So we call that.

421
00:27:54.080 --> 00:27:59.360
So if you go into controller, we were setting the attribute here, right?

422
00:27:59.360 --> 00:28:01.430
We have set the attribute called user ID.

423
00:28:01.430 --> 00:28:04.730
We are just getting the same attribute user ID.

424
00:28:05.900 --> 00:28:11.870
And if it is not equal to null, it implies that the session is still valid.

425
00:28:13.910 --> 00:28:14.510
That's it.

426
00:28:14.900 --> 00:28:23.090
And we need to grab this user ID because so far we were assuming that the user is the is the user with

427
00:28:23.090 --> 00:28:24.340
the value ID.

428
00:28:24.350 --> 00:28:28.120
So we hardcoded certain things in our code.

429
00:28:28.130 --> 00:28:29.840
So we will put this.

430
00:28:32.820 --> 00:28:41.010
And get attribute actually returns an object so we need to typecast this too long so get attribute will

431
00:28:41.010 --> 00:28:46.170
always return an object get parameter will return a string get attribute will return an object.

432
00:28:46.290 --> 00:28:51.090
So the user is still there and we need to copy this code here.

433
00:28:51.090 --> 00:28:53.010
All of that we wrote in the previous.

434
00:28:55.620 --> 00:28:56.250
Demo.

435
00:29:00.660 --> 00:29:01.290
That's it.

436
00:29:01.740 --> 00:29:03.390
And we have.

437
00:29:05.990 --> 00:29:10.100
Instead of this, we will pass user ID.

438
00:29:17.540 --> 00:29:18.950
Here for the save.

439
00:29:18.980 --> 00:29:20.870
We need to pass the user ID.

440
00:29:22.930 --> 00:29:23.200
Okay.

441
00:29:23.710 --> 00:29:29.500
Then here in my books we need to pass the user ID, which we have already done here.

442
00:29:29.500 --> 00:29:30.790
Also, we need to pass.

443
00:29:32.710 --> 00:29:35.620
User ID and finally for browse.

444
00:29:35.620 --> 00:29:37.180
Also we need to pass user ID.

445
00:29:37.180 --> 00:29:38.710
So now it is generic.

446
00:29:39.010 --> 00:29:43.630
So earlier it was only for the user with the id five.

447
00:29:52.810 --> 00:29:53.500
So that's it.

448
00:29:53.500 --> 00:29:54.820
So we did that.

449
00:29:55.720 --> 00:30:00.850
And here we need an LS block, which means that the session has expired.

450
00:30:01.680 --> 00:30:05.610
In which we in which case we need to forward to the login page.

451
00:30:06.030 --> 00:30:07.560
So say.

452
00:30:11.280 --> 00:30:12.400
So that's about it.

453
00:30:12.420 --> 00:30:14.610
So if the user is still there.

454
00:30:14.790 --> 00:30:22.020
We are going to have this logic and we know that in what controller, if it is successful, if the user

455
00:30:22.020 --> 00:30:28.500
is successfully authenticated, we were forwarding it to my books, which means that we will get into

456
00:30:28.500 --> 00:30:34.650
this loop and we will forward the controller to my bookstore, JSP And we will forward the list of items

457
00:30:34.650 --> 00:30:38.130
that the user has bookmarked, which we are getting from the model, right.

458
00:30:39.330 --> 00:30:39.870
That's it.

459
00:30:40.140 --> 00:30:42.750
And this is slash login here.

460
00:30:43.900 --> 00:30:46.240
The log in and we are finally forwarding it.

461
00:30:48.140 --> 00:30:48.710
Here.

462
00:30:49.480 --> 00:30:50.380
So that's about it.

463
00:30:50.380 --> 00:30:51.340
So let me just.

464
00:30:51.970 --> 00:30:53.670
I think we got everything right.

465
00:30:53.680 --> 00:30:55.690
Let's hope that it is right.

466
00:30:55.840 --> 00:30:59.620
Export var file browse.

467
00:31:00.160 --> 00:31:05.950
So I removed the earlier versions of the application, so I deleted them.

468
00:31:06.250 --> 00:31:08.500
So this is going to be a new var file.

469
00:31:09.520 --> 00:31:10.300
See you.

470
00:31:11.380 --> 00:31:13.420
It is creating the Web apps folder.

471
00:31:14.500 --> 00:31:17.250
I looked like I need to re restart the server.

472
00:31:17.260 --> 00:31:18.580
It's not yet started.

473
00:31:21.010 --> 00:31:22.420
So start up.

474
00:31:25.550 --> 00:31:26.000
Okay.

475
00:31:26.660 --> 00:31:28.070
Now let's.

476
00:31:29.440 --> 00:31:31.360
Go ahead, drill your book.

477
00:31:32.360 --> 00:31:33.140
There is the login.

478
00:31:33.350 --> 00:31:35.390
Just be here.

479
00:31:37.950 --> 00:31:42.630
This is our login page and user four.

480
00:31:42.840 --> 00:31:45.870
There are four or five users we can create any of them.

481
00:31:45.870 --> 00:31:50.160
Password is test and as you can see, the characters are invisible.

482
00:31:50.580 --> 00:31:53.070
Click on login.

483
00:31:54.010 --> 00:31:56.560
And one item has been saved here.

484
00:31:56.560 --> 00:31:58.810
So going to browse now.

485
00:32:00.030 --> 00:32:02.400
And we can.

486
00:32:03.300 --> 00:32:05.520
Create a save a new item.

487
00:32:05.520 --> 00:32:07.310
So you are taken back here.

488
00:32:07.740 --> 00:32:08.880
Browse again.

489
00:32:09.210 --> 00:32:10.500
Let's say this book.

490
00:32:10.530 --> 00:32:11.250
Nice book.

491
00:32:11.790 --> 00:32:12.800
And that's it.

492
00:32:12.810 --> 00:32:16.740
So three items have been saved and two items are not yet saved.

493
00:32:16.950 --> 00:32:23.880
So you can also save this book Effective Java and it gets added at the bottom here.

494
00:32:24.720 --> 00:32:25.680
So that's about it.

495
00:32:25.680 --> 00:32:32.070
And if you click on logout here, you're taken back to the login page.

496
00:32:32.610 --> 00:32:34.170
So that's it.

497
00:32:34.170 --> 00:32:39.330
So that's the project and I hope you enjoyed learning about this.

498
00:32:39.360 --> 00:32:43.290
All of those were kind of lengthy lectures, but.

499
00:32:44.320 --> 00:32:46.000
We have all of them here.

500
00:32:46.000 --> 00:32:53.980
So this is a nice application that we have developed and you can go ahead and implement movies and web

501
00:32:53.980 --> 00:32:55.330
links and whatnot.

502
00:32:55.540 --> 00:33:02.980
And this is a simple application, but you can convert it into a very complex application to which can

503
00:33:03.100 --> 00:33:08.100
have an entire company working on it and venture capitalists can also fund it.

504
00:33:08.110 --> 00:33:13.930
There are not many products such as this one, so you can make it as sophisticated as you want and you

505
00:33:13.930 --> 00:33:15.730
can also display some related items.

506
00:33:15.730 --> 00:33:17.650
For example, you have saved these items.

507
00:33:17.650 --> 00:33:24.070
You can show some related items here, similar kind of books with the similar kind of ratings.

508
00:33:24.310 --> 00:33:27.760
So and you can also have the registration form.

509
00:33:28.060 --> 00:33:32.530
So you can do a lot of good things if you want to extend this.

510
00:33:32.560 --> 00:33:34.600
But this is a basic functionality.

511
00:33:34.600 --> 00:33:37.930
It looks very simple, but a lot of learning went into this.

512
00:33:37.930 --> 00:33:46.060
We learned about the Java technologies and before that we learned about the databases and we started

513
00:33:46.060 --> 00:33:50.560
off with just object oriented concepts and we built our first version.

514
00:33:50.590 --> 00:33:57.820
Then we have incorporated in terms initially we had only arrays, but then we once we have learned about

515
00:33:58.210 --> 00:34:03.940
generics and collections, we incorporated, we changed those arrays into, into those collection data

516
00:34:03.940 --> 00:34:04.810
structures.

517
00:34:04.840 --> 00:34:09.489
Then we used input output to read the data from the files.

518
00:34:09.520 --> 00:34:13.330
After that we have learned about databases and we made use of the database.

519
00:34:13.540 --> 00:34:19.960
And finally, we have also learned about Java technologies and this is what we have seen.

520
00:34:19.960 --> 00:34:25.690
So it looks easy, but a lot of learning went into it and we can take that VAR file and you can deploy

521
00:34:25.690 --> 00:34:30.880
it on a real web server too, like an on Amazon cloud or somewhere.

522
00:34:30.880 --> 00:34:38.260
And you can, you can host it on a real server also and buy a domain, domain name and you can access

523
00:34:38.260 --> 00:34:39.730
that particular application.

524
00:34:39.730 --> 00:34:40.570
So that's about it.

525
00:34:40.570 --> 00:34:41.110
Thank you.

526
00:34:41.110 --> 00:34:48.070
And I hope you enjoyed this and this should set you up and you can learn more about these technologies

527
00:34:48.070 --> 00:34:55.600
and use other technologies like Spring and Hibernate, and you can use more recent technologies and

528
00:34:55.600 --> 00:35:02.200
you can also incorporate JavaScript and other client side technologies and you can really expand it.

529
00:35:02.530 --> 00:35:05.980
Thank you and happy coding and goodbye.

