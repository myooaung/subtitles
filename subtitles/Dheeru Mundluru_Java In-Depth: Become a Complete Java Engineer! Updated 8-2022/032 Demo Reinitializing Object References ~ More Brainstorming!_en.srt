1
00:00:02,080 --> 00:00:02,930
Hello there.

2
00:00:02,950 --> 00:00:04,090
This is the Domaine de la Rue.

3
00:00:04,090 --> 00:00:05,080
And welcome back.

4
00:00:05,470 --> 00:00:12,820
Now, I would like to spend a few more minutes on ensuring that we really have a firm understanding

5
00:00:12,820 --> 00:00:20,290
on how object references behave when they are reassigned with other object references or with entirely

6
00:00:20,290 --> 00:00:21,220
new objects.

7
00:00:22,000 --> 00:00:27,220
Essentially, we want to study the memory state when such reassignments happen.

8
00:00:27,760 --> 00:00:31,840
And this is related to pass by value mechanism, which we discussed earlier.

9
00:00:32,140 --> 00:00:37,150
We know that in Java data is passed to methods via pass by value mechanism.

10
00:00:37,600 --> 00:00:43,950
And we also said that it would be the same with assignment statements, but with assignment statements

11
00:00:43,960 --> 00:00:50,740
we may get into situations where the same object reference is reassigned multiple times with different

12
00:00:50,740 --> 00:00:51,950
object references.

13
00:00:51,970 --> 00:00:55,960
And we need to be clear about how that affects the memory state.

14
00:00:56,560 --> 00:01:03,100
So I think it will be really good if we spend a few more minutes on this particular topic as it is really

15
00:01:03,100 --> 00:01:09,280
fundamental and there is no point moving ahead without a firm grasp on this particular topic.

16
00:01:09,940 --> 00:01:11,610
So let's go ahead and do that.

17
00:01:11,620 --> 00:01:15,700
So this is the student class and we are creating the student objects here.

18
00:01:16,090 --> 00:01:23,350
Right now, if you recall our first lecture of this section, we discussed about having two classes.

19
00:01:23,350 --> 00:01:27,710
One is the student class and also another class called Student Test.

20
00:01:27,730 --> 00:01:31,480
And from the student test, we would create the student objects.

21
00:01:31,660 --> 00:01:33,760
So let's just do the same thing now.

22
00:01:34,090 --> 00:01:36,760
So we are at the very end of doing that.

23
00:01:36,910 --> 00:01:39,280
So so far we had only student class.

24
00:01:39,310 --> 00:01:44,770
So let's create a new class called Student Test in the same directory called basics.

25
00:01:45,310 --> 00:01:46,480
I already did that.

26
00:01:46,480 --> 00:01:52,300
So I have this class called student test and all we will do is we will move this entire code.

27
00:01:53,660 --> 00:01:54,980
Look the main method.

28
00:01:57,120 --> 00:01:59,970
Into the student test.

29
00:02:00,330 --> 00:02:03,120
So this is what we have and this is what we are going to run now.

30
00:02:03,390 --> 00:02:05,550
And it should all work in the same way.

31
00:02:05,910 --> 00:02:11,910
Now, one thing I want to tell is I have deleted the dot class file of student, so there is no student

32
00:02:12,150 --> 00:02:12,780
class.

33
00:02:13,110 --> 00:02:20,160
But when we compile this particular class, so the compiler will see if student class exists because

34
00:02:20,160 --> 00:02:23,970
we have this statement where we are accessing the student class.

35
00:02:24,180 --> 00:02:29,640
Now, if class does not exist, then it will automatically compile student cluster.

36
00:02:29,940 --> 00:02:34,380
So it's going to compile student class and then it will compile student test.

37
00:02:35,310 --> 00:02:39,870
But if the dot class file exists, then it's not going to do.

38
00:02:40,050 --> 00:02:41,970
It's not going to compile it.

39
00:02:42,270 --> 00:02:45,570
But it would compile a student class once again.

40
00:02:45,600 --> 00:02:50,070
Only if some change has been made in the student source code.

41
00:02:50,520 --> 00:02:58,050
So even if you have a class file, but after the class file has been generated, if you make any changes

42
00:02:58,050 --> 00:03:03,420
in the student class in the source code, then it would still recompile that class.

43
00:03:04,230 --> 00:03:06,090
So it depends on that time stamp.

44
00:03:06,330 --> 00:03:10,560
So now at this point, the student class class is not there.

45
00:03:10,560 --> 00:03:16,350
So let's just compile the student test and it will all and it will also compile student Java.

46
00:03:16,650 --> 00:03:18,750
So I'm here in the basics directory.

47
00:03:22,740 --> 00:03:30,240
So it compile let me just show you the basics directory so it compiles student test OC and we can see

48
00:03:30,240 --> 00:03:32,460
that it also compiled student plus.

49
00:03:33,590 --> 00:03:35,270
So that's the thing.

50
00:03:35,270 --> 00:03:42,290
And this can be student test or it can also be named as something like student admissions.

51
00:03:42,980 --> 00:03:46,490
So that's a class that would create student accounts.

52
00:03:46,820 --> 00:03:53,060
I think that it is part of some admissions office or admissions software, and it is responsible for

53
00:03:53,060 --> 00:03:55,700
creating student objects or student accounts.

54
00:03:56,540 --> 00:03:58,250
So that's the thing now.

55
00:03:58,250 --> 00:03:59,630
So this is what we have.

56
00:03:59,750 --> 00:04:03,170
So for this demo, I'm going to copy some code here.

57
00:04:03,180 --> 00:04:04,210
I have some code.

58
00:04:04,220 --> 00:04:09,530
So in the interest of time, we are just going to look at this code and analyze the code.

59
00:04:10,430 --> 00:04:12,260
And discuss it and.

60
00:04:13,430 --> 00:04:15,280
And said so let me just copy it here.

61
00:04:18,070 --> 00:04:20,410
Let me just indent it properly.

62
00:04:25,220 --> 00:04:26,300
So this is what we have.

63
00:04:26,690 --> 00:04:27,830
And.

64
00:04:29,200 --> 00:04:33,970
So here we are creating the three student objects and we are printing their names.

65
00:04:34,150 --> 00:04:37,920
And here John was initially misspelled as Joanne.

66
00:04:37,930 --> 00:04:43,570
So we are updating the profile of the student object and we are updating it to John here.

67
00:04:43,690 --> 00:04:49,420
So let me make it caps and we are printing the name and here is the new code.

68
00:04:49,420 --> 00:04:54,160
So let's go ahead and look at what we have now for this demo you can ignore.

69
00:04:54,160 --> 00:04:58,990
For now you can ignore the student object, the third student object, and we will just use the student

70
00:04:58,990 --> 00:05:00,280
objects one and two.

71
00:05:00,520 --> 00:05:03,340
And we have a new student object called Student four.

72
00:05:03,340 --> 00:05:05,260
So this is the first statement here.

73
00:05:05,260 --> 00:05:08,200
So let me just do this.

74
00:05:12,080 --> 00:05:16,730
Let me just comment this and let me also comment.

75
00:05:18,210 --> 00:05:20,040
Discord here because.

76
00:05:21,080 --> 00:05:29,690
This is a lot of statements and in the output we would have to scroll a lot in order to see this new

77
00:05:29,690 --> 00:05:31,670
text that we are printing.

78
00:05:32,630 --> 00:05:36,530
So that's why I'm just commenting it out so that it is easy to follow.

79
00:05:37,070 --> 00:05:44,090
So here the first thing that we are doing is we are assigning student one to this new variable called

80
00:05:44,090 --> 00:05:44,930
student four.

81
00:05:45,470 --> 00:05:50,630
So student one is holding a reference to student object.

82
00:05:50,630 --> 00:05:57,020
So it's not holding student object, but it is holding the memory address of the student object.

83
00:05:57,560 --> 00:06:05,000
And now when we assign in this way, it's going to make a copy of the memory address that student one

84
00:06:05,000 --> 00:06:08,450
is holding, and that address will be assigned to.

85
00:06:08,450 --> 00:06:10,160
Student four Right.

86
00:06:10,160 --> 00:06:16,820
So at this point, both Student four and Student one will point to the first student object whose name

87
00:06:16,820 --> 00:06:17,630
is John.

88
00:06:18,410 --> 00:06:25,400
So in the next statement, we are printing the name using student four and it should print John because

89
00:06:25,400 --> 00:06:26,600
that's the student object.

90
00:06:27,020 --> 00:06:28,310
So let's do that.

91
00:06:28,310 --> 00:06:30,230
Lets me recompile this.

92
00:06:34,530 --> 00:06:35,080
Here it is.

93
00:06:35,100 --> 00:06:37,780
So this is the new statement and it is printing, John.

94
00:06:38,790 --> 00:06:39,570
So that's the thing.

95
00:06:39,570 --> 00:06:44,220
So now we have to object to Francis pointing to the same object.

96
00:06:45,150 --> 00:06:46,020
Now.

97
00:06:46,980 --> 00:06:54,600
Since two four is also pointing to the same object as student one If we make any change, we are.

98
00:06:54,600 --> 00:07:01,020
Student four That change will be reflected if we access that particular state using.

99
00:07:01,020 --> 00:07:09,180
Student one So here we are invoking the update profile method on student four and we are updating the

100
00:07:09,180 --> 00:07:11,700
name of the student from John to Mike.

101
00:07:12,210 --> 00:07:17,910
And in the next statement here we are printing the name of the student, but we are printing it.

102
00:07:17,910 --> 00:07:18,180
We are.

103
00:07:18,180 --> 00:07:23,430
Student one So if we do that, the name would be printed as my right.

104
00:07:29,370 --> 00:07:30,810
As you can see it is Mike.

105
00:07:31,440 --> 00:07:37,530
In the previous statement it was John but using the student for we updated the name of the student to

106
00:07:37,530 --> 00:07:39,570
Mike but we are printing it.

107
00:07:39,570 --> 00:07:39,930
We are.

108
00:07:39,930 --> 00:07:42,150
Student one And it is printing.

109
00:07:42,150 --> 00:07:44,910
Mike So that is as expected.

110
00:07:45,180 --> 00:07:51,900
Now in the next statement we are re assigning student for vet student to.

111
00:07:53,600 --> 00:07:55,520
So earlier, both student.

112
00:07:55,520 --> 00:07:58,370
Student four was initialized with student one.

113
00:07:58,730 --> 00:08:02,180
Now student four is re initialized with student two.

114
00:08:02,810 --> 00:08:10,160
So which means that the first object is referenced by only student one which is Mike with the updated

115
00:08:10,160 --> 00:08:10,640
name.

116
00:08:11,120 --> 00:08:16,010
Now Student four and student two would now reference the second object.

117
00:08:16,130 --> 00:08:22,040
So what we are doing is student two is referencing the second object here, which is Raj.

118
00:08:22,460 --> 00:08:28,820
So the memory address that Student two is holding, which is of this object, a copy of that is made

119
00:08:28,820 --> 00:08:30,800
and is assigned to Student four.

120
00:08:31,310 --> 00:08:36,440
So at this point, the first object is referenced by only student one, whereas the second object is

121
00:08:36,440 --> 00:08:37,640
now referenced by both.

122
00:08:37,640 --> 00:08:42,830
Student four and student two When we print the name using student four, it should print.

123
00:08:43,809 --> 00:08:44,420
Raj.

124
00:08:48,860 --> 00:08:50,600
As you can see, it is Printing Ranch.

125
00:08:51,470 --> 00:08:57,290
So that's the reassignment of student for which student two.

126
00:08:57,710 --> 00:09:04,880
Now here what we are doing is student two is now being reassigned with student one.

127
00:09:06,050 --> 00:09:13,880
So at this instance, both student two and Student one are pointing to Mike, which is the first object

128
00:09:13,880 --> 00:09:18,530
and student for, well, 10.2, Rach.

129
00:09:18,980 --> 00:09:27,530
So because of this reassignment, don't assume that student four will also point to, to the first object,

130
00:09:27,530 --> 00:09:28,240
which is Mike.

131
00:09:28,250 --> 00:09:30,230
So that is not going to happen.

132
00:09:30,410 --> 00:09:34,350
So at this instance, Student two was assigned to two.

133
00:09:34,400 --> 00:09:35,300
Student four.

134
00:09:35,570 --> 00:09:39,170
So the memory address that student two was holding is assigned to.

135
00:09:39,170 --> 00:09:41,560
Student four a copy of that.

136
00:09:41,570 --> 00:09:46,430
So both Student four and Student two were referencing the second object, right?

137
00:09:46,460 --> 00:09:54,860
But here, Student two is reassigned with student one the copy of the memory address that student one

138
00:09:54,860 --> 00:09:55,640
is holding.

139
00:09:55,640 --> 00:10:01,430
So both student two and student one will now reference the first object, which is Mike.

140
00:10:01,430 --> 00:10:07,100
But Student four Will is still holding the same memory address that was assigned here.

141
00:10:07,100 --> 00:10:11,390
So and that is referencing the second student object, which is Ruch.

142
00:10:11,570 --> 00:10:14,000
So this first statement here will print, right?

143
00:10:14,030 --> 00:10:17,790
Because we are saying student four name and the next one will print.

144
00:10:17,810 --> 00:10:18,530
Mike.

145
00:10:21,310 --> 00:10:22,960
Let me just clear the screen.

146
00:10:27,310 --> 00:10:27,800
There you go.

147
00:10:27,820 --> 00:10:28,000
So.

148
00:10:28,000 --> 00:10:33,790
Student four Still pointing to Raj and STUDENT two As pointing to Mike.

149
00:10:34,330 --> 00:10:34,660
So both.

150
00:10:34,660 --> 00:10:36,810
Student one STUDENT one Are pointing to Mike.

151
00:10:39,850 --> 00:10:47,080
Now, finally, what I want to do is let's reassign student four to a brand new object.

152
00:10:47,710 --> 00:10:49,240
So we are invoking this one.

153
00:10:49,240 --> 00:10:51,400
No constructor in student class.

154
00:10:51,400 --> 00:10:57,250
There is a new ARX constructor here, so we manually provided that, which means that all of the instance

155
00:10:57,250 --> 00:10:59,530
variables will get their default values.

156
00:11:00,070 --> 00:11:07,150
But what we are doing is we are invoking the update profile method so that the name will be reassigned

157
00:11:07,150 --> 00:11:09,910
with whatever value we are passing here.

158
00:11:09,910 --> 00:11:11,400
So we are passing Alex.

159
00:11:11,830 --> 00:11:17,890
So Alex will be assigned to name and the rest of the fields will have default values.

160
00:11:18,520 --> 00:11:24,040
So Student four is now referencing the new object called Alex.

161
00:11:24,160 --> 00:11:25,510
So that's the thing.

162
00:11:25,720 --> 00:11:30,550
And so that's so when we print student four dot name, it should print Alex.

163
00:11:30,760 --> 00:11:36,190
Student two And student one are still referencing the first object, which is Mike.

164
00:11:36,490 --> 00:11:43,180
And we will see what will happen to the the object that Student four was earlier referencing which is

165
00:11:43,180 --> 00:11:47,140
off ranch so that we will discuss after looking at the output.

166
00:11:51,630 --> 00:11:57,300
So as you can see here, STUDENT four is now referencing the new object, Alex and STUDENT one and Student

167
00:11:57,300 --> 00:11:59,310
two are referencing Mike.

168
00:12:00,250 --> 00:12:09,460
And the object that stood out that Raj was being referenced by, which was Student four.

169
00:12:09,490 --> 00:12:14,110
So the Raj object does not have any references anymore.

170
00:12:14,680 --> 00:12:18,580
So now we say that the object Raj is abandoned.

171
00:12:18,610 --> 00:12:19,930
It is still on the heap.

172
00:12:19,930 --> 00:12:26,020
It is still on the memory, but it is not being referenced by any of the object references.

173
00:12:26,410 --> 00:12:29,410
So it is essentially a useless object.

174
00:12:29,920 --> 00:12:31,660
It is just taking up space.

175
00:12:31,690 --> 00:12:38,080
So we say that the object is abandoned or orphaned and we need to reclaim the memory.

176
00:12:38,110 --> 00:12:40,330
Otherwise that memory will be wasted.

177
00:12:40,630 --> 00:12:46,450
So that's where our beautiful garbage collector will come into play, GM's garbage collector.

178
00:12:46,450 --> 00:12:52,750
And it will reclaim the space so that that particular space can be used by some other object.

179
00:12:53,200 --> 00:12:55,410
So that's the automatic memory management.

180
00:12:55,420 --> 00:13:01,120
And we will discuss all the details about garbage collection and the JVM internal section.

181
00:13:01,780 --> 00:13:04,930
So Raj Object is abandoned here.

182
00:13:04,960 --> 00:13:06,170
So that's about it.

183
00:13:06,190 --> 00:13:10,510
So that's what I wanted to talk in this particular lecture.

184
00:13:10,780 --> 00:13:17,680
So I hope the memory state was clear when all of these object visualizations were happening.

185
00:13:17,710 --> 00:13:20,620
Now, I would like to give a small assignment here.

186
00:13:21,470 --> 00:13:26,020
Let me just comment this entire code that we just discussed.

187
00:13:26,030 --> 00:13:27,770
So it started from here.

188
00:13:28,250 --> 00:13:31,730
So let's go back to where we started.

189
00:13:32,000 --> 00:13:33,360
So this is what we had.

190
00:13:33,380 --> 00:13:35,390
So we have three student objects.

191
00:13:35,540 --> 00:13:38,420
Now, let me just create a simple array.

192
00:13:40,850 --> 00:13:44,240
A student, R.A. And let's call it a students.

193
00:13:44,660 --> 00:13:49,520
And let's initialize it with the three student objects, John.

194
00:13:51,230 --> 00:13:52,070
Raj.

195
00:13:52,370 --> 00:13:54,260
And the third one was Anita.

196
00:13:54,740 --> 00:13:56,180
So this is what we have.

197
00:13:56,660 --> 00:14:04,580
Now, what I want you to do is I want you to write the code, the code to swap these two elements.

198
00:14:04,730 --> 00:14:11,810
So I want you to write the logic so that student three would come in, would be stored here in the,

199
00:14:12,080 --> 00:14:17,450
in the zero eight index and student one will be stored in this index.

200
00:14:18,020 --> 00:14:19,160
So I want you to do that.

201
00:14:19,160 --> 00:14:23,600
So just pause the video and just try to spend a little bit of time on this.

202
00:14:23,870 --> 00:14:27,560
And then you can come back and look at how the logic looks like.

203
00:14:29,710 --> 00:14:30,770
I hope you have done it.

204
00:14:30,790 --> 00:14:34,010
So let me show you how that can be done.

205
00:14:34,030 --> 00:14:41,560
So the first thing is we will create a new student object called tem, an object reference.

206
00:14:41,920 --> 00:14:48,850
What we will do is we will see student saw is 2/10 of zero here.

207
00:14:50,040 --> 00:14:55,850
So at this point both temp as well as students of zero are referencing.

208
00:14:55,860 --> 00:14:57,120
John Right.

209
00:14:58,380 --> 00:15:02,220
Now what we will do is we will update this.

210
00:15:02,520 --> 00:15:09,030
So the memory address of John is stored and temp and it is also in students of zero.

211
00:15:09,150 --> 00:15:15,510
But since it is stored in temp, so we have like a backup so we can update it.

212
00:15:16,470 --> 00:15:20,340
I mean, students of zero can be reassigned, right?

213
00:15:20,370 --> 00:15:23,940
Can be reassigned with students off to.

214
00:15:25,070 --> 00:15:28,370
So at this instance, both zero and two.

215
00:15:28,400 --> 00:15:29,660
So which is this one?

216
00:15:29,660 --> 00:15:36,890
And this one are referencing the last object, which is of Anita, which is referenced by students of

217
00:15:36,890 --> 00:15:37,250
two.

218
00:15:39,410 --> 00:15:43,440
And now we will say students of two.

219
00:15:43,790 --> 00:15:47,560
So students of zero as student of zero.

220
00:15:47,570 --> 00:15:51,380
Here, students of zero is now referencing Anita.

221
00:15:51,860 --> 00:15:53,570
So as students of two.

222
00:15:54,020 --> 00:15:55,430
So one thing is done.

223
00:15:55,430 --> 00:15:56,810
So this is stored here.

224
00:15:57,020 --> 00:15:58,880
Now we need to update students of two.

225
00:15:58,880 --> 00:16:02,150
And for that we just say we have the memory address.

226
00:16:02,570 --> 00:16:04,520
You know, the backup was taken.

227
00:16:04,850 --> 00:16:06,830
So that's the temporary variable.

228
00:16:06,980 --> 00:16:10,430
So that memory address is being assigned to students of two.

229
00:16:11,030 --> 00:16:12,470
So at this point.

230
00:16:14,120 --> 00:16:15,170
Let me print them.

231
00:16:24,080 --> 00:16:27,440
So this would be students.

232
00:16:38,290 --> 00:16:39,340
I hope it's clear now.

233
00:16:39,340 --> 00:16:41,260
So let's just recompile here.

234
00:16:47,070 --> 00:16:49,950
We need to see students of name here.

235
00:16:50,930 --> 00:16:51,920
Dot name.

236
00:16:59,340 --> 00:17:05,579
As you can see, Anita is in the zero eight position, is a student now and third student is John.

237
00:17:05,819 --> 00:17:07,829
So we just swabbed them.

238
00:17:08,579 --> 00:17:10,490
So that's how it is.

239
00:17:10,500 --> 00:17:11,880
I hope it is clear now.

240
00:17:12,119 --> 00:17:18,030
Now, one last thing that we can do is let's move this into a new method called swab.

241
00:17:18,540 --> 00:17:23,869
Here we have done it in this way, but it would be just the same if we also write a method.

242
00:17:23,880 --> 00:17:26,069
So let's write a static method for that.

243
00:17:26,069 --> 00:17:27,750
Let's say static void.

244
00:17:27,839 --> 00:17:29,370
Let's call it a swab.

245
00:17:30,580 --> 00:17:34,940
And this method to this method, we will pass.

246
00:17:34,960 --> 00:17:37,690
It will take a single parameter called students.

247
00:17:38,290 --> 00:17:41,560
And instead of this, we will just say.

248
00:17:42,540 --> 00:17:45,690
Slap of students.

249
00:17:45,690 --> 00:17:47,280
It's just the exact same thing.

250
00:17:47,280 --> 00:17:52,620
So it is demonstrating that we are able to demonstrate that it just works in the same way, whether

251
00:17:52,620 --> 00:17:58,080
it is whether we are passing to a method or whether we are reassigning.

252
00:17:58,770 --> 00:18:00,510
So here we will.

253
00:18:00,870 --> 00:18:01,550
One sec.

254
00:18:03,510 --> 00:18:06,150
So let me copy all of this here.

255
00:18:13,660 --> 00:18:14,440
Students.

256
00:18:14,590 --> 00:18:18,730
And let's pass the index numbers as zero and two.

257
00:18:19,270 --> 00:18:19,840
Right.

258
00:18:20,710 --> 00:18:26,350
But here, let's call them -- and let's say first.

259
00:18:27,290 --> 00:18:29,300
Index and.

260
00:18:30,110 --> 00:18:32,360
Second index.

261
00:18:33,440 --> 00:18:36,950
So this first index will be this one zero at one.

262
00:18:37,850 --> 00:18:40,100
And this is.

263
00:18:41,890 --> 00:18:43,720
The second index will go here.

264
00:18:46,970 --> 00:18:48,560
This is a sign with the temper.

265
00:18:49,100 --> 00:18:51,890
So that's how we can write a generic method.

266
00:18:52,690 --> 00:18:53,320
Okay.

267
00:18:53,500 --> 00:18:54,540
So that's it.

268
00:18:54,550 --> 00:18:59,320
So when we pass students here, it's an object reference, right?

269
00:18:59,320 --> 00:19:00,790
Students is an object reference.

270
00:19:00,820 --> 00:19:08,680
A copy of that memory address will be made and will be assigned to the students here and zero and two

271
00:19:08,680 --> 00:19:16,660
will be passed and the swap happens and that will be reflected here because this variable here and this

272
00:19:16,660 --> 00:19:19,360
parameter will reference the same student object.

273
00:19:19,660 --> 00:19:21,610
So we don't have to return anything.

274
00:19:21,610 --> 00:19:28,270
So so it's so we are just passing the memory address of the, of the object itself.

275
00:19:28,270 --> 00:19:30,400
So we should still get the same result.

276
00:19:35,320 --> 00:19:37,630
As you can see, Anita and John have been swapped.

277
00:19:38,080 --> 00:19:39,360
So that's about it.

278
00:19:39,370 --> 00:19:47,410
And I hope you now understand very clearly about how object reference reassignment will affect the memory

279
00:19:47,410 --> 00:19:47,920
state.

280
00:19:47,950 --> 00:19:53,380
If it is not clear, just spend a little bit more time on this particular program or on this lecture

281
00:19:53,380 --> 00:19:54,550
and it should be clear.

282
00:19:54,580 --> 00:19:55,450
Thank you.

283
00:19:55,450 --> 00:19:57,850
And I hope you enjoyed learning about it.

284
00:19:57,850 --> 00:19:59,560
And I will see you in the next lecture.

285
00:19:59,560 --> 00:20:00,430
Happy coding.

