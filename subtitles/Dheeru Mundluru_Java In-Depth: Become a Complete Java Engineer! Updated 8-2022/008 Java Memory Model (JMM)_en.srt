1
00:00:01,470 --> 00:00:02,240
Hi there.

2
00:00:02,250 --> 00:00:03,510
This is Diamond de la Rue.

3
00:00:03,780 --> 00:00:05,490
We have seen that in certain scenarios.

4
00:00:05,490 --> 00:00:11,490
In a multithreaded environment, things can work in an unpredictable way as it is a thread scheduler

5
00:00:11,490 --> 00:00:12,900
which manages everything.

6
00:00:13,530 --> 00:00:18,990
As a result, we discussed about the race condition, which may happen when two threads share some mutable

7
00:00:18,990 --> 00:00:22,920
data, and we have seen how synchronization can help with that.

8
00:00:23,340 --> 00:00:27,960
By using synchronization, we could make things operate in a more ordered way.

9
00:00:28,170 --> 00:00:28,710
Right.

10
00:00:29,070 --> 00:00:32,700
And in Java, we have something called the Java memory model.

11
00:00:32,930 --> 00:00:33,720
J Mm.

12
00:00:33,960 --> 00:00:35,670
Which defines such ordering.

13
00:00:36,300 --> 00:00:41,130
Java memory model is part of the Java language specification and it is related to multithreading.

14
00:00:41,550 --> 00:00:47,070
It's critical to be aware of it when we are doing multithreaded programming and especially when we are

15
00:00:47,070 --> 00:00:49,020
dealing with shared mutable data.

16
00:00:49,530 --> 00:00:50,950
It's not complicated stuff.

17
00:00:50,970 --> 00:00:53,910
It's just a bunch of rules which we need to be aware of.

18
00:00:54,390 --> 00:00:59,910
In this lecture, we will look at what those gem rules are, and even in the follow up lecture, we

19
00:00:59,910 --> 00:01:01,860
will explore some of the relevant stuff.

20
00:01:03,800 --> 00:01:06,150
You may recall the slide from our previous lecture.

21
00:01:06,170 --> 00:01:09,380
This is the bank account example of John and Anita.

22
00:01:09,470 --> 00:01:15,170
We said that John and Anita are represented by two threads, both of which are active at the same time.

23
00:01:15,650 --> 00:01:21,230
So John said might invoke the make withdrawal method and update the balance to the new amount.

24
00:01:21,260 --> 00:01:27,650
And at the same time, Anita's threat might also access the get balance method on the same bank account

25
00:01:27,650 --> 00:01:30,830
object, but might still see the old balance amount.

26
00:01:31,340 --> 00:01:35,570
So there is no guarantee that Anita Straight would see the latest value.

27
00:01:35,840 --> 00:01:41,930
And if it doesn't see the latest value, it may result in the system going into some incorrect state.

28
00:01:42,560 --> 00:01:45,170
Essentially, we have a risk condition here.

29
00:01:46,740 --> 00:01:52,380
One reason for Anita's threat seeing old value could be due to out-of-order actions.

30
00:01:53,550 --> 00:01:58,800
For instance, it could be that John's thread is inside the make withdrawal method and also does the

31
00:01:58,800 --> 00:02:03,780
balance check, but then it goes into reasonable right before updating balance.

32
00:02:04,560 --> 00:02:10,440
And animal threat would become active, which means that it would be in the running state and then would

33
00:02:10,440 --> 00:02:17,460
see the old value of balance as it is not yet updated, but programmer might have not wanted the sequence

34
00:02:17,460 --> 00:02:21,480
of actions to be in this way where there is an interleaving of actions.

35
00:02:22,300 --> 00:02:26,740
The reason is, of course, one is the synchronized method while the other is synchronized.

36
00:02:27,070 --> 00:02:31,180
And we never know how thread scheduler is going to execute the statements.

37
00:02:31,330 --> 00:02:31,840
Right.

38
00:02:32,910 --> 00:02:38,970
And another reason can be when we are dealing with a multiprocessor system which shared memory, which

39
00:02:38,970 --> 00:02:40,950
is what most modern systems are.

40
00:02:41,680 --> 00:02:42,040
Here.

41
00:02:42,040 --> 00:02:47,890
Each processor has its own local cache, which is periodically reconciled with the shared memory.

42
00:02:49,760 --> 00:02:55,820
So John Street might be on one processor and might execute the make withdrawal method to completion.

43
00:02:55,820 --> 00:03:01,820
So it fully executes the make withdrawal method and the new balance amount could be flushed to the local

44
00:03:01,820 --> 00:03:04,280
cache and then also to main memory.

45
00:03:05,200 --> 00:03:10,900
However, Anita's threat might be on another processor and might read the balance value only from its

46
00:03:10,900 --> 00:03:14,590
local cash, which has all value that is not yet updated.

47
00:03:15,160 --> 00:03:21,400
So factors such as this and the out of order actions which we saw earlier can prevent a threat from

48
00:03:21,400 --> 00:03:23,110
seeing the updated values.

49
00:03:24,480 --> 00:03:27,240
So basically there is lack of thread coordination.

50
00:03:27,240 --> 00:03:32,730
And if you recall in the previous lecture we said that it has got something to do with performance.

51
00:03:34,320 --> 00:03:39,900
Most of the time, threats deal with only their own stuff, and it's not required to communicate with

52
00:03:39,900 --> 00:03:40,770
other threats.

53
00:03:41,800 --> 00:03:47,560
Communicating with other threads on every right operation can be expensive and it could be really bad

54
00:03:47,560 --> 00:03:53,530
in a multiprocessor system with shared memory due to the need for frequent updates that need to happen

55
00:03:53,530 --> 00:03:57,430
between the local cache and the memory and the shared memory.

56
00:03:58,790 --> 00:04:05,600
Coordination is required only when mutable status shared across the threads, like in our John and Anita's

57
00:04:05,600 --> 00:04:09,440
example, where the mutable state is the balance variable.

58
00:04:10,040 --> 00:04:15,770
So if there is no sharing of notable state, then there is no reason to coordinate between threads despite

59
00:04:15,770 --> 00:04:17,120
any right operations.

60
00:04:17,660 --> 00:04:23,360
Similarly, if there are dealing with completely different objects of the same class, then once again

61
00:04:23,360 --> 00:04:26,270
thread coordination may not be required at all.

62
00:04:27,450 --> 00:04:33,700
But if there is a shared state that is mutable, then it is the program's responsibility, not JBS,

63
00:04:33,720 --> 00:04:37,830
to ensure that threats coordinate about such shared state.

64
00:04:38,670 --> 00:04:41,400
So all of this is for the sake of performance.

65
00:04:43,230 --> 00:04:46,830
One way to ensure thread coordination is via synchronization.

66
00:04:47,370 --> 00:04:49,440
So it's the programmer's job to do that.

67
00:04:49,680 --> 00:04:54,630
And we saw this in the previous lecture to where get balance is also synchronized.

68
00:04:54,990 --> 00:05:01,170
Now, if John's thread first accesses the make the doll method, then unattached thread cannot enter

69
00:05:01,170 --> 00:05:05,070
that balance method until Johns thread exits make withdrawal.

70
00:05:05,460 --> 00:05:11,430
As we know that at any given instance of time, only one thread can enter a synchronized method of a

71
00:05:11,430 --> 00:05:12,450
shared object.

72
00:05:12,600 --> 00:05:13,080
Right.

73
00:05:14,400 --> 00:05:19,920
Here we say that the two actions Jones thread entering the make withdrawal method and Anita's thread

74
00:05:19,920 --> 00:05:25,980
entering get balance however happens before relationship that is the john thread entering make withdrawal

75
00:05:26,010 --> 00:05:29,430
happens before Anita's thread entering get balance.

76
00:05:30,380 --> 00:05:37,640
And this happens before relationship also requires that Anita Street sees only the latest value of balance.

77
00:05:39,470 --> 00:05:44,180
So that happens before relationship, which we just saw is achieved through synchronization.

78
00:05:44,180 --> 00:05:51,110
And this notion of happens before is part of the Java's memory model and the JVM implements Java's memory

79
00:05:51,110 --> 00:05:51,680
model.

80
00:05:51,890 --> 00:05:58,340
And so when it sees the synchronized keyword, then it knows that there is a need for inter thread coordination.

81
00:05:58,700 --> 00:06:04,910
And for this it inserts special instructions called memory barriers, which would instruct the underlying

82
00:06:04,940 --> 00:06:08,540
architecture to do any necessary memory coordination.

83
00:06:08,540 --> 00:06:11,420
Coordination between the cache and the shared memory.

84
00:06:12,410 --> 00:06:18,850
Not that in our bank account example, Julia might place the memory barrier right after John's thread

85
00:06:18,860 --> 00:06:21,860
exits, make withdrawal method and releases the lock.

86
00:06:21,890 --> 00:06:27,680
Or it may do it when Anita's thread acquires the lock in order to enter get balance method.

87
00:06:28,220 --> 00:06:34,790
So the exact timing of when JVM inserts memory barrier is dependent on specific JVM implementation,

88
00:06:35,180 --> 00:06:40,490
and it is not specified in the Java memory model, which, as we said earlier, is part of the Java

89
00:06:40,490 --> 00:06:41,690
language specification.

90
00:06:43,430 --> 00:06:45,440
So what happens before ordering?

91
00:06:45,470 --> 00:06:52,790
We can be sure that the results of a right action by one thread are guaranteed to be visible to a reaction

92
00:06:52,790 --> 00:06:54,080
by another thread.

93
00:06:54,110 --> 00:06:57,920
Only if the right operation happens before the operation.

94
00:06:58,750 --> 00:07:05,800
Note that Java memory model specifies few scenarios or rules, then happens before ordering happens

95
00:07:06,160 --> 00:07:08,260
and synchronization is only one of them.

96
00:07:08,500 --> 00:07:10,540
So let's look at the different scenarios.

97
00:07:11,710 --> 00:07:13,690
First one is based on program order.

98
00:07:13,750 --> 00:07:20,680
This rule says that each action in a given threat happens before every other action that comes later

99
00:07:20,680 --> 00:07:21,340
in the thread.

100
00:07:22,620 --> 00:07:27,510
Second one is based on LOC, which is what we discussed with our synchronization example.

101
00:07:27,900 --> 00:07:33,720
Releasing a log happens before every subsequent acquisition of that same log.

102
00:07:34,260 --> 00:07:40,500
In our example, if make withdrawal is invoked first, then when John thread exits the method, it releases

103
00:07:40,500 --> 00:07:45,480
the log, which is then acquired by another thread in order to enter get balance.

104
00:07:46,340 --> 00:07:51,590
Note that if the right and redactions use different locks, then there is no happens before relation

105
00:07:51,590 --> 00:07:52,970
between the two actions.

106
00:07:53,300 --> 00:07:54,630
So keep that in mind.

107
00:07:54,650 --> 00:07:56,660
It's got to be the same lock.

108
00:07:58,220 --> 00:08:02,180
Next is based on volatile variable, which is the subject of next lecture.

109
00:08:02,600 --> 00:08:08,480
Basically, volatile is a key word that can be used when declaring a variable and a right to such a

110
00:08:08,480 --> 00:08:13,280
variable happens before every subsequent read of that variable.

111
00:08:13,310 --> 00:08:15,710
Regardless of the thread doing the reading.

112
00:08:17,790 --> 00:08:19,440
Next is the third start rule.

113
00:08:19,590 --> 00:08:27,300
What it means is a call to a start method on a given thread happens before every other action that happens

114
00:08:27,300 --> 00:08:28,590
within that thread.

115
00:08:30,170 --> 00:08:32,390
Next rule is based on the joint operation.

116
00:08:32,419 --> 00:08:39,590
What it means is all actions in a particular thread happens before the thread that successfully returns

117
00:08:39,590 --> 00:08:41,659
from a joint on that thread.

118
00:08:43,400 --> 00:08:45,020
Next is the interruption rule.

119
00:08:45,050 --> 00:08:50,810
Interrupt is a method and it can be invoked on a thread to tell the thread that it should stop what

120
00:08:50,810 --> 00:08:52,820
it is doing and do something else.

121
00:08:53,300 --> 00:08:57,260
Generally, it is invoked on a thread as a means to terminate the thread.

122
00:08:57,860 --> 00:09:03,980
With regards to happens before ordering the act of one thread calling interrupt method on another thread

123
00:09:03,980 --> 00:09:08,720
happens before the interrupted thread detects the interrupt itself.

124
00:09:09,380 --> 00:09:11,060
We may look at interrupt later.

125
00:09:12,390 --> 00:09:18,660
Our next one is the final rule, which is about the finalized method and the object class finalize method

126
00:09:18,660 --> 00:09:24,450
will be invoked by the garbage collector when it detects that there are no more references to the object.

127
00:09:25,050 --> 00:09:31,740
Subclasses of Object can override finalize method to perform any cleanup operations before the object

128
00:09:31,740 --> 00:09:38,430
is garbage collected and with regards to happens before ordering the rule is that the end of the constructor

129
00:09:38,430 --> 00:09:43,320
of an object happens before the start of the final for that object.

130
00:09:43,590 --> 00:09:43,910
Right?

131
00:09:43,950 --> 00:09:45,900
Obviously that is what is going to happen.

132
00:09:47,880 --> 00:09:50,670
Next one is the familiar transitivity rule.

133
00:09:51,030 --> 00:09:57,570
According to it, if action happens before action B and if action B happens before action C, then action

134
00:09:57,600 --> 00:09:59,170
A happens before action.

135
00:09:59,190 --> 00:09:59,580
C.

136
00:10:00,360 --> 00:10:02,760
So those are the happens before ordering rules.

137
00:10:02,760 --> 00:10:08,790
And I believe that second and third rules, which are about locks and volatile variables, are probably

138
00:10:08,790 --> 00:10:12,810
the ones that really matter for us as we use them deliberately.

139
00:10:13,800 --> 00:10:20,610
Just to summarize, these GM rules ensure that different threads can have a consistent view of the shared

140
00:10:20,610 --> 00:10:21,150
state.

141
00:10:21,600 --> 00:10:28,140
That is the result of a right action by one thread are guaranteed to be visible to a reduction by another

142
00:10:28,140 --> 00:10:28,620
thread.

143
00:10:29,010 --> 00:10:32,220
Only if the right happens before the real operation.

144
00:10:32,880 --> 00:10:36,780
Whether such a happens before ordering, we would have a risk condition.

145
00:10:37,540 --> 00:10:41,920
And a correctly synchronized program is won without any race conditions.

146
00:10:42,370 --> 00:10:43,270
That's about it.

147
00:10:43,270 --> 00:10:44,380
And thank you.

