1
00:00:01,110 --> 00:00:01,780
Hello there.

2
00:00:01,800 --> 00:00:02,430
This is the room.

3
00:00:03,420 --> 00:00:06,540
Let's not get started with non static member classes.

4
00:00:07,700 --> 00:00:14,720
A non static member class is used when the inner class object needs access to the enclosing object so

5
00:00:14,720 --> 00:00:16,910
that it can access instance members.

6
00:00:17,360 --> 00:00:21,140
So it has something to do with the instance of enclosing class.

7
00:00:22,300 --> 00:00:28,540
And the inert class object cannot even be created unless the enclosing object is already created.

8
00:00:28,900 --> 00:00:34,630
So enclosing object is created first, and then it is used to create the inner class object.

9
00:00:35,200 --> 00:00:38,170
And soon we will see how that is done in our demo.

10
00:00:39,150 --> 00:00:46,230
In the class object is simply an instance member of the enclosed object, just like any instance member

11
00:00:46,800 --> 00:00:51,330
and hence we refer to the inner class as non static member class.

12
00:00:51,750 --> 00:00:54,600
That is, it is an instance member class.

13
00:00:56,220 --> 00:01:02,430
Since intercourse object needs access to enclosing object, the inner class object would maintain a

14
00:01:02,430 --> 00:01:05,099
hidden reference to and closing object.

15
00:01:06,040 --> 00:01:09,850
And building such a hidden reference takes up space and time.

16
00:01:11,200 --> 00:01:18,010
Note that due to the hidden reference author class object will not be garbage collected until a class

17
00:01:18,010 --> 00:01:19,330
object is alive.

18
00:01:21,180 --> 00:01:25,740
One common use of such non static member class is to define an adapter.

19
00:01:26,610 --> 00:01:31,110
Adapters are used to produce different views of the class object.

20
00:01:32,320 --> 00:01:39,130
One example is the collection view methods in the map interface such as key set values and entry set.

21
00:01:39,910 --> 00:01:45,700
The key set method we know returns a set object that contains all the keys in the map.

22
00:01:46,210 --> 00:01:53,710
And the set object is basically an instance of a non static member class which implements a set interface.

23
00:01:54,250 --> 00:02:01,480
So the set object is basically using the state of the enclosed object that is state would be the keys.

24
00:02:02,080 --> 00:02:06,160
Due to this, it requires a hidden reference to the enclosing object.

25
00:02:07,730 --> 00:02:13,970
Another example is the iterator methods that we encounter in collection interfaces such as set and list.

26
00:02:14,660 --> 00:02:21,590
The iterator method returns an iterator object, which basically is an instance of a non static member

27
00:02:21,590 --> 00:02:24,500
class that implements the iterator interface.

28
00:02:25,310 --> 00:02:28,910
Let's now go ahead and actually implement a simple adapter.

29
00:02:31,360 --> 00:02:31,550
Okay.

30
00:02:31,630 --> 00:02:33,580
Here we are in my Eclipse editor.

31
00:02:33,580 --> 00:02:41,200
And a new package called Semantic Squared dot nested classes has been created and there are two classes

32
00:02:41,200 --> 00:02:43,660
here, cache and bookmark.

33
00:02:43,840 --> 00:02:48,950
So basically we are implementing a cache and we are going to demonstrate adapter.

34
00:02:49,660 --> 00:02:52,620
So it will give a different view of the cash.

35
00:02:52,630 --> 00:02:56,890
So cash is basically going to hold the bookmark objects.

36
00:02:57,190 --> 00:03:04,330
And here is a bookmark class and all it has is ID and title and the getters and setters that go with

37
00:03:04,330 --> 00:03:09,160
these two variables gets, get, etc. get title, set, title.

38
00:03:09,490 --> 00:03:13,840
And here is the cash class and cash class.

39
00:03:13,990 --> 00:03:15,340
It's just a regular cash.

40
00:03:15,340 --> 00:03:20,020
If you don't if you do not want to hit the database for faster access, we can store it in the cash.

41
00:03:20,320 --> 00:03:21,040
We know that.

42
00:03:21,430 --> 00:03:28,240
So Cash has this constructor and it's going to store bookmarks and the bookmarks will be stored in this

43
00:03:28,240 --> 00:03:29,680
array called items.

44
00:03:30,820 --> 00:03:38,290
And the size of this items are a bookmark array will be provided as an input to the cache constructor

45
00:03:38,290 --> 00:03:38,770
here.

46
00:03:39,210 --> 00:03:41,080
OC input is size.

47
00:03:41,650 --> 00:03:48,580
Now there is this method called ADD, which will be invoked with a bookmark and that bookmark will be

48
00:03:48,580 --> 00:03:51,230
added to the array to the bookmark array.

49
00:03:52,190 --> 00:04:00,140
And there is also this variable called Next, which will keep track of the next item that is being added.

50
00:04:00,440 --> 00:04:06,830
Initially it is zero and here we are simply checking if it is less than the size of the array.

51
00:04:07,280 --> 00:04:14,150
If it is less only then we are going to insert the bookmark item and we will also increment its count.

52
00:04:14,600 --> 00:04:19,820
We are saying next plus plus, which means that it will first get added and then the counter will be

53
00:04:19,820 --> 00:04:20,720
incremented.

54
00:04:21,290 --> 00:04:21,740
That's it.

55
00:04:21,740 --> 00:04:23,270
Only there are two methods.

56
00:04:23,690 --> 00:04:26,450
So we are going to implement adaptor.

57
00:04:26,450 --> 00:04:29,950
So just like list unset has iterator.

58
00:04:29,960 --> 00:04:34,130
We also want to implement an iterator which would be an asset class.

59
00:04:34,370 --> 00:04:40,700
So for that, just like the iterator interface, we are also defining this interface called cache.

60
00:04:40,730 --> 00:04:44,360
Iterator has next returns a boolean value.

61
00:04:44,390 --> 00:04:52,010
It just tells whether there is another item to iterate and if so, only then we can invoke the next

62
00:04:52,010 --> 00:04:52,520
method.

63
00:04:53,210 --> 00:04:57,860
So we are supposed to implement it and we have this main method here.

64
00:04:58,340 --> 00:05:02,060
We will look at that later because we are going to populate the data.

65
00:05:02,450 --> 00:05:09,170
But first, let's go ahead and implement our our nested class, non static member class.

66
00:05:09,890 --> 00:05:18,020
Let's say private and it's a class and let's call it as my cache iterator.

67
00:05:21,080 --> 00:05:22,430
And it implements.

68
00:05:24,430 --> 00:05:26,140
Cash iterator interface.

69
00:05:29,700 --> 00:05:29,940
Okay.

70
00:05:30,000 --> 00:05:35,190
So let's just go ahead and add the unimplemented methods next and Haas next.

71
00:05:36,900 --> 00:05:42,450
So this let's just say let's actually put a variable here.

72
00:05:45,350 --> 00:05:47,030
So it's a private variable.

73
00:05:50,480 --> 00:05:54,720
So if there are more items to iterate, then it would return a true.

74
00:05:54,740 --> 00:05:56,810
Otherwise it would return false.

75
00:05:58,380 --> 00:06:01,290
And the high value index value.

76
00:06:01,290 --> 00:06:06,120
So this is an index into the array and it will be incremented here.

77
00:06:07,490 --> 00:06:09,230
So let's just say items.

78
00:06:10,320 --> 00:06:11,430
I plus plus.

79
00:06:11,430 --> 00:06:15,810
So it's going to return the bookmark and it's going to increment the index.

80
00:06:16,040 --> 00:06:16,560
Okay.

81
00:06:16,590 --> 00:06:22,920
So once all of the items are in are activated, when we invoke the next method, it will return a false

82
00:06:22,920 --> 00:06:26,190
and we cannot invoke the next method after that.

83
00:06:26,910 --> 00:06:30,360
So let's go into our so that's the my cache iterator.

84
00:06:30,360 --> 00:06:34,260
So it's a nested class, it's a non static member class.

85
00:06:34,410 --> 00:06:35,940
So let's go here.

86
00:06:37,360 --> 00:06:40,240
And let's go ahead and this is the code.

87
00:06:40,240 --> 00:06:48,670
So we are instantiating cache and we are just calling it as recommended items and the size is five and

88
00:06:48,670 --> 00:06:54,430
we are creating these instances five instances item one and we are setting the ID and title.

89
00:06:55,380 --> 00:06:55,580
Okay.

90
00:06:55,740 --> 00:06:57,640
So let's not worry about what those titles are.

91
00:06:57,660 --> 00:06:58,920
So same here.

92
00:06:58,920 --> 00:07:04,480
Five bookmarks are being created and finally we are adding them right now.

93
00:07:04,500 --> 00:07:07,560
Next thing to do would be to iterate through them.

94
00:07:07,860 --> 00:07:14,940
So for that, one other thing is we need to create an instance of this mic cache iterator so that we

95
00:07:14,940 --> 00:07:17,940
can invoke, you know, we can iterate the elements.

96
00:07:18,730 --> 00:07:21,990
You know, just like the set and list has iterated methods.

97
00:07:22,070 --> 00:07:25,730
So let's go ahead and create a iterator method here.

98
00:07:36,040 --> 00:07:43,570
So that's the iterator method and we can invoke the iterator method on the recommended items and that

99
00:07:43,570 --> 00:07:45,100
is actually creating.

100
00:07:46,000 --> 00:07:49,180
Creating the instance of the inner class object.

101
00:07:49,180 --> 00:07:54,910
So we first need to have this outer class object, as we described earlier in the lecture.

102
00:07:55,150 --> 00:08:01,120
So using that, we will invoke this iterator method, just like the way we do an array list and other

103
00:08:01,120 --> 00:08:01,840
classes.

104
00:08:01,930 --> 00:08:04,690
And that would actually create a return.

105
00:08:04,690 --> 00:08:07,330
An instance of this my cache iterator.

106
00:08:08,060 --> 00:08:12,380
The reference type will not be this, it will be cache iterator because this is private.

107
00:08:13,310 --> 00:08:14,240
So let's go ahead.

108
00:08:14,240 --> 00:08:17,210
And so we have already added the items.

109
00:08:17,390 --> 00:08:19,370
So what we need to do here is.

110
00:08:20,570 --> 00:08:23,830
Let's have the reference type as cash iterator.

111
00:08:27,610 --> 00:08:31,390
So that's the outer class object and we are invoking.

112
00:08:32,909 --> 00:08:33,600
Iterator.

113
00:08:33,840 --> 00:08:37,409
So we will get the, the an instance of the inner cross object.

114
00:08:43,630 --> 00:08:45,790
So it has next if it returns true.

115
00:08:47,200 --> 00:08:48,610
Then we will say.

116
00:08:54,990 --> 00:08:56,340
Just print the title.

117
00:08:57,090 --> 00:08:58,390
So this is how it is.

118
00:08:58,410 --> 00:09:00,270
Let's just go ahead and execute it.

119
00:09:00,690 --> 00:09:03,030
And you can see it prints all the titles.

120
00:09:03,630 --> 00:09:06,080
So that is how you are going to create an instance.

121
00:09:06,090 --> 00:09:12,660
We are invoking the iterator method and the iterator is actually returning an instance of the inner

122
00:09:12,660 --> 00:09:16,110
class and that inner class actually represents the state.

123
00:09:16,140 --> 00:09:19,440
It's a different view of the state of.

124
00:09:21,060 --> 00:09:22,830
This particular instance, cash.

125
00:09:23,250 --> 00:09:24,990
So that's an adapter.

126
00:09:25,440 --> 00:09:28,410
Now, there is also a second way to invoke it.

127
00:09:28,440 --> 00:09:33,050
Now, one thing to note is here we are using an interface now instead of interface.

128
00:09:33,060 --> 00:09:40,170
Had this been a public class and let's like my question iterator is public and cash iterator interface

129
00:09:40,170 --> 00:09:41,750
is also is just not there.

130
00:09:41,760 --> 00:09:48,810
So in that scenario we can directly access we we would have the reference type here as cache dot my

131
00:09:48,810 --> 00:09:49,830
cache iterator.

132
00:09:50,370 --> 00:09:54,620
But this is a better design because we are writing to an interface.

133
00:09:54,630 --> 00:09:58,260
So tomorrow if we want, we can also change the implementation.

134
00:09:58,260 --> 00:10:03,830
We can use a different name here so we are not bounded to the name here.

135
00:10:03,840 --> 00:10:08,910
So this is a better design, but there is also a different way to create an instance here.

136
00:10:09,270 --> 00:10:10,710
So we can just say.

137
00:10:12,860 --> 00:10:13,580
Here.

138
00:10:14,030 --> 00:10:22,610
And this is a kind of weird way of instantiating and it is very rarely used and it is also discussed.

139
00:10:22,610 --> 00:10:28,490
And an item in Joshua in Joshua Block's book, it's item 22.

140
00:10:28,940 --> 00:10:34,310
And here instead of just new, we are saying dot new and.

141
00:10:39,610 --> 00:10:40,750
This is how it is done.

142
00:10:40,750 --> 00:10:45,520
But here the assumption is that we know what the instance is, what the inner classes.

143
00:10:45,520 --> 00:10:51,760
So we are directly using the class name here, which means that the assumption is there is no there

144
00:10:51,760 --> 00:10:57,580
is no interface here, in which case it would be my cash, my cash iterator.

145
00:10:58,270 --> 00:11:04,630
So this is an another way of implementing it where we actually know the name of the inner class.

146
00:11:04,840 --> 00:11:06,130
But this is very rarely used.

147
00:11:06,130 --> 00:11:11,350
Normally you would define some kind of a method like this and we will call the method on that method

148
00:11:11,350 --> 00:11:15,250
word return an instance of the inner class.

149
00:11:15,820 --> 00:11:17,470
So that's the normal way to do it.

150
00:11:17,470 --> 00:11:21,520
And this is non static member classes and it's a simple adapter.

151
00:11:22,680 --> 00:11:29,430
As it is giving a different view of the state of the art across object and in map.

152
00:11:29,700 --> 00:11:33,000
We have things like key set, key value of values and so on.

153
00:11:33,360 --> 00:11:36,750
Now let me show pull up my here.

154
00:11:36,780 --> 00:11:40,890
This is my local directory file on the disk.

155
00:11:40,890 --> 00:11:44,070
And here you can see that there is this.

156
00:11:44,100 --> 00:11:45,540
It shows the class files.

157
00:11:45,540 --> 00:11:46,680
So here we are.

158
00:11:46,680 --> 00:11:51,240
And the Eclipse Guide is actually the work place.

159
00:11:51,840 --> 00:11:56,610
And within that we have been and within column semantics, we are nested classes.

160
00:11:56,610 --> 00:12:01,830
We have all these class files and we can say we can see that there is this cache and there is bookmark

161
00:12:01,830 --> 00:12:04,020
and there is cache iterator interface.

162
00:12:04,020 --> 00:12:08,430
But for the nested class, a new class is created cache dollar.

163
00:12:08,460 --> 00:12:12,210
My cache iterator as I mentioned earlier.

164
00:12:12,360 --> 00:12:17,670
So for the nested class, it is actually implemented as this separate top level class.

165
00:12:18,960 --> 00:12:24,930
Now if we go back internally the way it would have been implemented as.

166
00:12:26,300 --> 00:12:30,230
So my cash iterator becomes there is no nested class.

167
00:12:30,560 --> 00:12:37,630
It will be written as cash dollar my cash iterator and it will be a separate class on the hard disk.

168
00:12:37,640 --> 00:12:43,740
So here this would be replaced with return new something like this.

169
00:12:43,760 --> 00:12:47,430
Internally, this is how it would be cash dollar.

170
00:12:47,450 --> 00:12:48,590
Something like this.

171
00:12:49,220 --> 00:12:49,910
And this.

172
00:12:49,910 --> 00:12:56,200
My cash iterator would have a constructor and that constructor would take this.

173
00:12:56,210 --> 00:12:57,950
So we are passing cash here.

174
00:12:58,220 --> 00:12:59,210
So it would.

175
00:13:00,010 --> 00:13:03,190
So we are passing the instance of the hourglass.

176
00:13:03,190 --> 00:13:11,050
So that way my cash iterator, you know, it can invoke items, it can invoke items, not it would be

177
00:13:11,050 --> 00:13:17,290
so my cash iterator is here, my cash iterator would have a constructor in the byte code and that will

178
00:13:17,290 --> 00:13:24,460
take cash as the parameter so that it can access this instance variables like items.

179
00:13:25,210 --> 00:13:29,080
So, so that's the, that's how it works under the hood.

180
00:13:29,710 --> 00:13:31,270
So it would pass a reference.

181
00:13:31,720 --> 00:13:38,170
Only thing is building that reference here in this way we would take some space and time and that's

182
00:13:38,170 --> 00:13:39,460
one of the limitations.

183
00:13:39,580 --> 00:13:44,620
And later we will look at static number classes which do not have that limitation.

184
00:13:45,310 --> 00:13:47,710
So it's better to use that when needed.

185
00:13:47,980 --> 00:13:50,620
It has its own place, but this also has its own place.

186
00:13:50,620 --> 00:13:53,020
So this is mainly used for adapters.

187
00:13:53,920 --> 00:14:00,160
So just wanted to just show about, talk about that, also about how it is implemented internally.

188
00:14:00,160 --> 00:14:07,000
So it would be a separate class and it would have its own constructor and we would pass this reference,

189
00:14:07,060 --> 00:14:08,050
reference of this.

190
00:14:08,500 --> 00:14:11,200
So there will not be any master class.

191
00:14:11,200 --> 00:14:15,790
Master class will just be, we'll just be we'll just be a separate class.

192
00:14:15,790 --> 00:14:22,750
And it would use the the object of the outer class to invoke the to access the outer class objects members.

193
00:14:23,470 --> 00:14:25,540
So that's about it.

194
00:14:25,540 --> 00:14:31,780
Let's head back to the slides now and this code is also available in the resources section.

195
00:14:34,040 --> 00:14:35,570
Now here is a restriction.

196
00:14:35,570 --> 00:14:39,560
A non static member class cannot have static members.

197
00:14:39,890 --> 00:14:43,730
You can try it out and you will see that it would give us a compiler error.

198
00:14:44,180 --> 00:14:46,130
The reason for this is static.

199
00:14:46,130 --> 00:14:49,190
Members should be accessible without an object.

200
00:14:49,310 --> 00:14:49,850
Right.

201
00:14:50,210 --> 00:14:55,670
But we know that to create a class object, we first need to create a class object.

202
00:14:56,560 --> 00:15:02,080
That is, once we say that we are creating an outer class object, then we are talking about instance

203
00:15:02,080 --> 00:15:02,650
stuff.

204
00:15:02,950 --> 00:15:08,170
So it is not legal to have static members within a non static member class.

205
00:15:08,770 --> 00:15:14,410
Another way to look at it is a non static in our class is like an instance variable.

206
00:15:15,120 --> 00:15:18,400
That is it has something to do with the state of the other object.

207
00:15:19,000 --> 00:15:25,510
So if there are two outer objects, then they will also have two different inner class objects representing

208
00:15:25,510 --> 00:15:28,080
different states with static stuff.

209
00:15:28,090 --> 00:15:34,390
We know we are independent of objects, so non static member classes are basically instance related

210
00:15:34,390 --> 00:15:34,990
stuff.

211
00:15:36,780 --> 00:15:44,280
Coming to access from the enclosed class, we can access the inner cross method using the inner object

212
00:15:44,280 --> 00:15:45,000
reference.

213
00:15:46,770 --> 00:15:50,610
Now let's see how a nerd class can access orders members.

214
00:15:51,150 --> 00:15:52,860
Here go method is accessed.

215
00:15:53,130 --> 00:15:59,040
If God does not exist in the inner class, then it will invoke the go method in the outer class.

216
00:16:01,000 --> 00:16:04,240
In this example, we have this dot go.

217
00:16:04,840 --> 00:16:08,830
This would always refer to the go method in the inner class.

218
00:16:09,460 --> 00:16:15,550
Now, if go method is present only in the outer class, and if we still use this go, then we get a

219
00:16:15,550 --> 00:16:16,510
compiler error.

220
00:16:17,200 --> 00:16:23,500
So this reference when used inside inner class implies that we want to access something in the inner

221
00:16:23,500 --> 00:16:24,310
class itself.

222
00:16:25,940 --> 00:16:32,550
And if we want to explicitly access go method in the outer class, then we can say outer dot this dot

223
00:16:32,570 --> 00:16:33,260
go where?

224
00:16:33,260 --> 00:16:35,510
Outer is the outer class name.

225
00:16:35,900 --> 00:16:37,160
Outer crosses class name.

226
00:16:37,370 --> 00:16:41,630
You would want to do this if both inner and outer classes have the go method.

227
00:16:42,200 --> 00:16:47,210
If only outer has the Go method, we can directly access it as shown in the first example.

228
00:16:47,900 --> 00:16:54,230
I would just go ahead and try this out by placing a go method in both outer and inner classes in our

229
00:16:54,230 --> 00:16:55,070
demo program.

230
00:16:56,030 --> 00:16:57,070
So that's about it.

231
00:16:57,080 --> 00:17:04,579
A non static member class is simply an instance member of the outer class and it is useful for implementing

232
00:17:04,579 --> 00:17:05,540
adapters.

233
00:17:05,569 --> 00:17:07,160
That's how it is commonly used.

234
00:17:07,460 --> 00:17:08,150
Thank you.

