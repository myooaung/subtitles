WEBVTT
1
00:00:01.110 --> 00:00:01.920
Hello there.

2
00:00:02.400 --> 00:00:08.730
In professional projects, one inevitable thing across all projects is constant additions of new features.

3
00:00:09.090 --> 00:00:14.880
Product managers always try to come up with new features in order to give their customers the best experience.

4
00:00:15.150 --> 00:00:19.320
We already looked at one such feature for displaying only kid friendly bookmarks.

5
00:00:19.710 --> 00:00:25.050
Let's now extend Trello so that we can share such kid friendly bookmarks with partner websites.

6
00:00:25.290 --> 00:00:30.450
And to implement this, we will learn yet another of some object oriented feature of Java.

7
00:00:32.180 --> 00:00:38.990
The new requirement is to provide the ability to share kid friendly books and web links with a fictitious

8
00:00:38.990 --> 00:00:41.060
partner website called Good Snips.

9
00:00:41.390 --> 00:00:47.540
So this imaginary partner website is a bookmarking website, but built specifically for kids, and not

10
00:00:47.540 --> 00:00:53.960
that we should be able to share only those kid friendly bookmarks that are either web links or books,

11
00:00:53.960 --> 00:00:55.310
but not movies.

12
00:00:55.640 --> 00:00:57.080
So that's the requirement.

13
00:00:58.760 --> 00:01:02.840
This is a snapshot taken from the three geo system and it displays two blocks.

14
00:01:02.960 --> 00:01:06.500
A new link called shared with good snips has been added here.

15
00:01:07.040 --> 00:01:12.470
Note that this link is not there in the existing trio system and it is added here only to introduce

16
00:01:12.470 --> 00:01:14.480
the next feature that we are going to learn.

17
00:01:15.140 --> 00:01:20.870
This link will also be shown only for books and web links, but not movies as per the requirement.

18
00:01:21.290 --> 00:01:25.190
Moreover, this link will be shown only for editorial staff.

19
00:01:25.400 --> 00:01:29.510
That is, regular users or email admin will not be shown this link.

20
00:01:30.050 --> 00:01:36.680
So editorial staff are the only folks who can mark a bookmark as kid friendly as well as share a kid

21
00:01:36.680 --> 00:01:39.110
friendly bookmark with partner websites.

22
00:01:40.620 --> 00:01:45.660
Now let's say an editor clicks the link associated with the first book, which is The Adventures of

23
00:01:45.660 --> 00:01:46.560
Huckleberry Finn.

24
00:01:47.100 --> 00:01:53.010
That action would invoke a method called Share with book object passed as a method of argument.

25
00:01:53.670 --> 00:01:56.430
Notice that the method parameter is off type bookmark.

26
00:01:56.940 --> 00:02:00.960
So bookmark is being used as a polymorphic reference type.

27
00:02:01.380 --> 00:02:07.410
And due to this, we know that the same method can be passed a weblink or even a movie object.

28
00:02:07.510 --> 00:02:08.009
Right.

29
00:02:09.120 --> 00:02:15.810
The method share would first invoke a method called get item data, which would return the data specific

30
00:02:15.810 --> 00:02:16.500
to the book.

31
00:02:16.530 --> 00:02:19.680
Adventures of Huckleberry Finn in XML format.

32
00:02:21.400 --> 00:02:26.050
Next, the method would share this XML data with the partner website snips.

33
00:02:26.320 --> 00:02:31.690
For this, we can expect good snips to be exposing a web service and Trillion would programmatically

34
00:02:31.690 --> 00:02:33.850
pass this data to that web service.

35
00:02:34.270 --> 00:02:37.570
Good snips would take that data and add it to its own database.

36
00:02:38.140 --> 00:02:44.170
We can also assume that once the bookmark data is shared, the link shared with good snips will not

37
00:02:44.170 --> 00:02:46.060
be shown with that bookmark anymore.

38
00:02:47.790 --> 00:02:49.200
To implement this new feature.

39
00:02:49.200 --> 00:02:56.160
One thing we need to decide on is how to implement get item data method, which is responsible for generating

40
00:02:56.160 --> 00:02:57.450
the XML content.

41
00:02:57.720 --> 00:02:59.680
Generating XML data is trivial.

42
00:02:59.700 --> 00:03:02.760
But the question is where would you write this method?

43
00:03:03.330 --> 00:03:05.850
And let's review two design alternatives for this.

44
00:03:07.450 --> 00:03:14.080
First alternative is to have get item data method as an abstract method within the bookmark class and

45
00:03:14.080 --> 00:03:16.120
then overwrite it in subclasses.

46
00:03:16.600 --> 00:03:20.170
From a design standpoint, there are a couple of issues with this implementation.

47
00:03:21.610 --> 00:03:27.760
First we need to add empty gate item data method in the movie class and also any future subclasses of

48
00:03:27.760 --> 00:03:28.420
bookmark.

49
00:03:28.960 --> 00:03:32.290
So we are adding some dummy code and that's not elegant.

50
00:03:33.600 --> 00:03:33.960
Next.

51
00:03:33.960 --> 00:03:39.570
By doing so, we are also announcing that the movie class also has get item data method.

52
00:03:40.080 --> 00:03:42.540
So these are a couple of design issues.

53
00:03:42.540 --> 00:03:44.520
And let's look at the second alternative.

54
00:03:46.330 --> 00:03:52.180
And the second alternate, the get item data method is added only in book and weblink classes.

55
00:03:52.630 --> 00:03:54.940
Again, there are two issues with this implementation.

56
00:03:55.850 --> 00:03:57.590
First, there is no common protocol.

57
00:03:57.980 --> 00:04:03.440
That is, programmers of book and web blink classes and all future programmers should be aware of this

58
00:04:03.440 --> 00:04:04.040
method.

59
00:04:04.640 --> 00:04:11.600
That's because if in future any new type of kid friendly bookmark has to be shared, then programmers

60
00:04:11.600 --> 00:04:18.709
should ensure that a similar get item data method is also added in the corresponding class of that bookmark

61
00:04:18.709 --> 00:04:19.100
type.

62
00:04:20.760 --> 00:04:27.690
Second issue is we cannot take advantage of polymorphism, which is a consequence of not having a common

63
00:04:27.690 --> 00:04:28.500
protocol.

64
00:04:29.380 --> 00:04:35.410
This particular alternative actually seems worse than the first one, as the first one at least defines

65
00:04:35.410 --> 00:04:39.820
a common protocol, which I believe is very important from a design standpoint.

66
00:04:41.520 --> 00:04:45.660
The issues from the two design alternatives highlight a very important requirement.

67
00:04:45.990 --> 00:04:50.820
What we need is a common protocol for defining optional capability.

68
00:04:51.670 --> 00:04:58.720
By optional capability we mean define get item data method only in web blank and book classes like in

69
00:04:58.720 --> 00:05:00.190
the case of second alternative.

70
00:05:01.060 --> 00:05:06.820
But at the same time, we also want a common protocol representing this optional capability so that

71
00:05:06.820 --> 00:05:11.110
we can take advantage of polymorphism, like in the case of first alternative.

72
00:05:12.330 --> 00:05:15.780
And one way to achieve this is via multiple inheritance.

73
00:05:16.320 --> 00:05:19.770
So next, let's see what multiple inheritance is.

74
00:05:19.800 --> 00:05:20.490
Thank you.

