WEBVTT
1
00:00:07.150 --> 00:00:08.060
Hi there.

2
00:00:08.080 --> 00:00:08.830
This is the Romans.

3
00:00:09.310 --> 00:00:10.270
And welcome back.

4
00:00:10.780 --> 00:00:18.460
Finally, we are ready to dabble with databases and see how we can make our Java programs interact with

5
00:00:18.460 --> 00:00:19.390
databases.

6
00:00:20.080 --> 00:00:22.690
We all know how ubiquitous databases are.

7
00:00:23.660 --> 00:00:29.430
Except for small websites which sell some static HTML content like the blogging websites.

8
00:00:29.450 --> 00:00:36.350
Almost all businesses and websites, both small and large, make use of databases and some of the other

9
00:00:36.350 --> 00:00:38.360
form in order to store their data.

10
00:00:39.190 --> 00:00:45.340
Now in our project, we were using text files to store our data and that is not good as we will soon

11
00:00:45.340 --> 00:00:46.360
learn in this lecture.

12
00:00:46.840 --> 00:00:52.300
So we'll be moving everything into our database and we will be using my SQL database.

13
00:00:52.840 --> 00:00:57.790
And in the process, we will also learn about database design, which is very important.

14
00:00:57.970 --> 00:01:04.090
And we will look at several SQL queries, and we will also look at the GBK API, which is part of the

15
00:01:04.090 --> 00:01:07.930
Java API, and it helps then interacting with the database.

16
00:01:08.080 --> 00:01:11.980
That is, it will help our Java programs to interact with databases.

17
00:01:12.460 --> 00:01:18.340
So we will refactor our project code in order to read data from the database and also to write data

18
00:01:18.340 --> 00:01:19.570
back into database.

19
00:01:20.020 --> 00:01:22.450
So it's going to be a very interesting chapter.

20
00:01:22.450 --> 00:01:28.750
And for all practical reasons, it brings you a step closer to being a professional Java engineer.

21
00:01:29.020 --> 00:01:35.890
Because every company out there uses a database in some or the other form, and in this lecture we'll

22
00:01:35.890 --> 00:01:41.530
mainly look at how stating Java objects would be represented within a database.

23
00:01:42.550 --> 00:01:45.040
And we will also explore the agenda for the chapter.

24
00:01:46.900 --> 00:01:54.010
Now when we talk about database, we essentially mean a DB CMS, which is short for database management

25
00:01:54.010 --> 00:01:54.520
system.

26
00:01:55.180 --> 00:02:01.720
And the DB CMS is simply a software which is an storing and retrieval of data.

27
00:02:02.460 --> 00:02:04.680
On my SQL is a DMS.

28
00:02:05.500 --> 00:02:07.750
Now there are different types of PBMs.

29
00:02:08.440 --> 00:02:14.790
And one of the most commonly used types is a relational database management system, or PBMs and short

30
00:02:15.310 --> 00:02:18.160
databases like my SQL Oracle database.

31
00:02:18.160 --> 00:02:21.850
Microsoft SQL Server are some examples of PBMs.

32
00:02:23.450 --> 00:02:30.590
And more recently, another type of VMs called NoSQL databases have become very popular, and I'm sure

33
00:02:30.590 --> 00:02:31.820
you must have heard of them.

34
00:02:32.270 --> 00:02:38.150
And they are especially useful when we are dealing with massive amounts of data, which is also growing

35
00:02:38.150 --> 00:02:39.170
very rapidly.

36
00:02:39.530 --> 00:02:43.070
In other words, scalability is the key goal here.

37
00:02:43.490 --> 00:02:47.960
That is, we need to be able to scale as more and more data is getting added.

38
00:02:48.710 --> 00:02:53.630
MongoDB, Cassandra and Redis are a few examples of NoSQL databases.

39
00:02:54.320 --> 00:03:01.070
Not that IBM's are also proven to handle large amounts of data and they also serve as backend for some

40
00:03:01.070 --> 00:03:02.660
really fast websites.

41
00:03:02.930 --> 00:03:08.150
But for certain types of scalability requirements, no obscure databases are preferable.

42
00:03:09.470 --> 00:03:12.520
And in this section we are going to deal with PBMs.

43
00:03:12.590 --> 00:03:15.590
And like I mentioned earlier, it would be my SQL database.

44
00:03:16.250 --> 00:03:23.510
And there are also other types of specialized VMs for handling data such as time series data, but things

45
00:03:23.510 --> 00:03:29.570
like weather and stock prices are tracked at different time instances, and there are also databases

46
00:03:29.570 --> 00:03:31.490
to handle only XML documents.

47
00:03:31.970 --> 00:03:36.710
However, these two types of VMs are definitely the most widely used.

48
00:03:38.500 --> 00:03:39.970
Now coming to albums.

49
00:03:39.970 --> 00:03:46.750
They have been popular since the 1970s and the database management systems is also a very active research

50
00:03:46.750 --> 00:03:48.550
area within computer science.

51
00:03:49.340 --> 00:03:56.180
Edgar Cord is an English computer scientist from IBM who invented the relational data model, which

52
00:03:56.180 --> 00:04:01.580
is the underlying data model on which relational database management systems are based on.

53
00:04:02.330 --> 00:04:05.210
So this serves as the underlying theoretical framework.

54
00:04:05.630 --> 00:04:09.620
And for this seminal work, he was given the ACM Turing Award in 1981.

55
00:04:10.070 --> 00:04:15.650
In case you're not familiar with what Turing Award is, it is considered equivalent to a Nobel Prize

56
00:04:15.650 --> 00:04:17.390
within the field of computer science.

57
00:04:18.079 --> 00:04:23.510
Now, before Codd invented relational model, there were also other models like hierarchical and network

58
00:04:23.510 --> 00:04:24.080
model.

59
00:04:24.290 --> 00:04:30.740
But relational data model is what has made database systems to be widely adopted in the industry.

60
00:04:31.190 --> 00:04:35.720
So basically it revolutionized the database field itself.

61
00:04:37.100 --> 00:04:40.040
And here are a few important benefits of using an BMS.

62
00:04:40.370 --> 00:04:46.220
First, we have a language for interacting with the database, and it is a very widely known SQL which

63
00:04:46.220 --> 00:04:48.410
stands for Structured Query Language.

64
00:04:48.590 --> 00:04:55.300
And it is also often pronounced as SQL and it is a standard from ISO in a relational database.

65
00:04:55.310 --> 00:05:02.990
Data is stored in something called tables, and SQL is used for creating tables, inserting data into

66
00:05:02.990 --> 00:05:07.520
tables, deleting data, retrieving and also updating data in the tables.

67
00:05:08.060 --> 00:05:12.680
So there are some specific queries for that and we will look at many of those queries.

68
00:05:13.460 --> 00:05:20.840
A second benefit is that database supports certain data structures for accessing data in a very efficient

69
00:05:20.840 --> 00:05:21.200
way.

70
00:05:21.680 --> 00:05:23.270
So there are some data sources for that.

71
00:05:23.540 --> 00:05:28.220
And third is integrity constraints, which are essential for storing only good data.

72
00:05:28.550 --> 00:05:35.120
For instance, we might want to avoid storing duplicate data, and for that we can enforce certain integrity

73
00:05:35.120 --> 00:05:35.750
constraints.

74
00:05:36.080 --> 00:05:41.600
So if we try to insert duplicate data, then the database would reject that particular instance of data.

75
00:05:42.430 --> 00:05:44.470
Another important benefit is concurrency.

76
00:05:44.500 --> 00:05:50.980
Just like in the case of Java, we can also have same data being accessed via multiple threads and we

77
00:05:50.980 --> 00:05:53.260
need to ensure that data is not corrupted.

78
00:05:53.770 --> 00:05:59.230
Databases also use locking mechanisms, just like in the case of programming languages in order to protect

79
00:05:59.230 --> 00:05:59.710
data.

80
00:06:00.580 --> 00:06:03.500
So these are some of the important benefits.

81
00:06:03.520 --> 00:06:06.820
And there are also many more benefits in using a database.

82
00:06:07.330 --> 00:06:12.700
Now, if you use only files like the way we did in our project, then we will not have any of these

83
00:06:12.700 --> 00:06:13.360
benefits.

84
00:06:13.660 --> 00:06:17.260
So soon we will refactor our project in order to use a database.

85
00:06:19.010 --> 00:06:24.590
Now we know that Java is an object oriented programming language and it is all about objects and objects

86
00:06:24.590 --> 00:06:28.610
have state and this state has to be persisted to a database.

87
00:06:29.090 --> 00:06:31.520
So let's see how that mapping looks like.

88
00:06:32.260 --> 00:06:39.070
In our three year project, we had users and each user is an instance such as this one, which has some

89
00:06:39.070 --> 00:06:40.450
state here.

90
00:06:40.450 --> 00:06:43.570
One is the ID, John is the name and gender is male.

91
00:06:45.250 --> 00:06:49.240
Now within the database, this will get stored in a corresponding table.

92
00:06:49.540 --> 00:06:56.740
We can have the same name user for the table and we would have a row of data representing state of a

93
00:06:56.740 --> 00:06:57.820
particular object.

94
00:06:58.450 --> 00:07:04.960
So information about John is stored in this way and we have ID stored in the first column name in the

95
00:07:04.960 --> 00:07:07.450
second column and gender in the third column.

96
00:07:08.770 --> 00:07:15.280
Next we can have another user object and estate would be stored as a separate row in the user table.

97
00:07:16.380 --> 00:07:23.580
Now here the ID column should by convention hold only unique values, so they help in uniquely identifying

98
00:07:23.580 --> 00:07:24.990
the content they represent.

99
00:07:25.380 --> 00:07:32.220
So they help in uniquely identifying a particular row, in this case, a user role by convention.

100
00:07:32.220 --> 00:07:38.580
Such a column is also named as ID and by convention it would also be the first column in the table.

101
00:07:39.410 --> 00:07:44.540
And that is an example of an integrity constraint that was mentioned earlier.

102
00:07:46.260 --> 00:07:47.730
And an SQL terminology.

103
00:07:47.730 --> 00:07:51.150
Such an ID field is referred to as primary key.

104
00:07:51.850 --> 00:07:58.480
So it is the key that identifies some data, just like the keys that we have in hash tables.

105
00:07:59.840 --> 00:08:03.140
Similarly, we can have a book object such as this one.

106
00:08:03.620 --> 00:08:09.770
And this book object would correspond to a row in a different table called book in our database.

107
00:08:10.460 --> 00:08:16.820
Not that the ID values are identical in both user and book tables, and that is perfectly fine as these

108
00:08:16.820 --> 00:08:19.310
both tables are independent from each other.

109
00:08:20.300 --> 00:08:20.430
Ah.

110
00:08:20.510 --> 00:08:27.680
Now I need to hear my bookmark this particular book item and we can have a user book class representing

111
00:08:27.680 --> 00:08:28.550
this relation.

112
00:08:30.240 --> 00:08:32.520
And hence we have another object.

113
00:08:33.289 --> 00:08:38.960
And in our database, this would be represented by another table and it would look something like this

114
00:08:39.380 --> 00:08:39.770
here.

115
00:08:39.770 --> 00:08:47.870
The second and third column is what identifies the relationship between user and book that the user

116
00:08:47.870 --> 00:08:49.640
has bookmarked a particular book.

117
00:08:50.000 --> 00:08:56.360
Second column is named as user underscore ID and it corresponds to the ID and the user table.

118
00:08:56.960 --> 00:09:02.510
That's the reason we have ID of Anita, which is to under user underscore ID column.

119
00:09:02.960 --> 00:09:07.430
Similarly, third column book underscore ID corresponds to the ID field in the book table.

120
00:09:07.430 --> 00:09:09.770
So book underscore ID has the value one.

121
00:09:10.370 --> 00:09:14.690
So that is how Anita Bookmarking a book is represented in the database.

122
00:09:16.000 --> 00:09:23.620
On here user underscore ID and underscore ID are referred to as foreign keys as they can identify rows

123
00:09:23.620 --> 00:09:25.780
and user and book tables.

124
00:09:26.230 --> 00:09:33.640
That is a user underscore ID value can identify a related row in the user table and same applies to

125
00:09:33.670 --> 00:09:34.630
book underscore ID.

126
00:09:35.910 --> 00:09:42.210
Since a key is referencing the ID field in another table, it would always be a valid value.

127
00:09:43.080 --> 00:09:48.870
For instance, if we assume that the user table has only these two rows with the ID values one and two,

128
00:09:49.290 --> 00:09:55.350
then the user underscore ID in user underscore book table can also have only one of these two values.

129
00:09:55.590 --> 00:09:59.370
So it cannot have a value like three which is not present in the user table.

130
00:10:00.270 --> 00:10:05.580
I know that the ID field in the table user underscore book would be the primary key.

131
00:10:06.460 --> 00:10:13.210
And finally, just note that you can also have a foreign key in a table referencing a primary key in

132
00:10:13.210 --> 00:10:14.380
the same table to.

133
00:10:14.860 --> 00:10:20.920
So it need not be a separate table like in this case, although the scenario is not that common, but

134
00:10:20.920 --> 00:10:23.500
it is definitely not a rare thing to encounter.

135
00:10:25.520 --> 00:10:27.710
Now let's look at what database schema is.

136
00:10:27.950 --> 00:10:31.010
So we have these two user objects from the previous slide.

137
00:10:31.820 --> 00:10:34.400
And we know that a user class defines them.

138
00:10:34.820 --> 00:10:36.920
That is, a user class is like a blueprint.

139
00:10:38.530 --> 00:10:44.110
Now similarly in the database, we would have the user table itself that corresponds to the user class

140
00:10:44.470 --> 00:10:51.190
and sometimes more formally, they refer to such a table as a relation schema or sometimes entity two

141
00:10:51.880 --> 00:10:55.630
and a bunch of relation schemas together form a database schema.

142
00:10:56.710 --> 00:11:03.100
On this user table would have similar fields like ID name and gender, and they also have data types

143
00:11:03.100 --> 00:11:06.640
associated with them, just like in the case of our Java class.

144
00:11:07.370 --> 00:11:13.850
So you can notice that in the Java class type of ID is long while in the database we are using big end.

145
00:11:14.510 --> 00:11:19.820
Similarly for name, it is string in the class while it is worker in the database.

146
00:11:20.330 --> 00:11:22.850
Worker means variable length strings.

147
00:11:23.150 --> 00:11:26.390
So you can store variable length strings in such a field.

148
00:11:26.960 --> 00:11:32.390
And big end and worker are data types that are specific to my SQL database.

149
00:11:32.660 --> 00:11:38.990
And we would have similar, if not the same names in other databases like Oracle and SQL Server.

150
00:11:39.920 --> 00:11:40.430
So well.

151
00:11:40.430 --> 00:11:42.200
A school is a standard.

152
00:11:42.410 --> 00:11:49.010
These different vendors like my school and Oracle might implement it slightly differently so they can

153
00:11:49.010 --> 00:11:51.110
be seen as slightly different dialects.

154
00:11:52.090 --> 00:11:57.820
Also like in the case of data types in Java, data types and databases also have a range of values that

155
00:11:57.820 --> 00:11:58.630
they support.

156
00:11:58.900 --> 00:12:00.160
So that's very obvious.

157
00:12:01.910 --> 00:12:09.410
So just like a class has instances, a relation schema also has instances in the form of records or

158
00:12:09.410 --> 00:12:09.980
rules.

159
00:12:10.670 --> 00:12:15.950
In more formal terms, we can refer to such a table with data as a relation.

160
00:12:16.910 --> 00:12:24.320
And we can also have columns or files on each row in the table is also sometimes formally referred to

161
00:12:24.320 --> 00:12:28.910
as a table, although record or row is more commonly used.

162
00:12:29.750 --> 00:12:33.080
So just wanted you to take a note of those formal terms.

163
00:12:33.200 --> 00:12:39.260
But I think we can simply stick to terms like table, column or field and rows or records.

164
00:12:40.940 --> 00:12:47.030
So they don't have a high level understanding of how data is represented within an VMs.

165
00:12:47.280 --> 00:12:50.210
And now let's take a quick look at the agenda for this chapter.

166
00:12:50.360 --> 00:12:53.660
Next, I will briefly give instructions on installing my SQL.

167
00:12:54.200 --> 00:12:57.280
And after that, we will briefly look at database design.

168
00:12:57.290 --> 00:13:01.400
And for that, we will look at something called database normalization.

169
00:13:01.790 --> 00:13:02.810
It's very important.

170
00:13:02.990 --> 00:13:06.560
And we'll also see how the database for our project would look like.

171
00:13:06.800 --> 00:13:10.400
And we will do that in a tool called My SQL Workbench.

172
00:13:12.190 --> 00:13:18.700
Next we will create a database for our project within our MySQL instance and we will create some tables

173
00:13:18.700 --> 00:13:21.100
and also populate those tables with some data.

174
00:13:22.220 --> 00:13:28.190
Then we will look at the GPC API briefly and we will see how we can interact with that database from

175
00:13:28.190 --> 00:13:29.660
our Java programs.

176
00:13:30.080 --> 00:13:35.750
And here we be refactoring our project code in order to read data from database and write data back

177
00:13:35.750 --> 00:13:36.650
into database.

178
00:13:36.920 --> 00:13:39.380
So we will not be using text files anymore.

179
00:13:41.220 --> 00:13:46.020
And we will also focus a bit on performance, which is where we will look at something called connection

180
00:13:46.020 --> 00:13:46.590
polling.

181
00:13:47.510 --> 00:13:53.420
And the last thing I would call it as a rest of the stuff as we will be gradually adding the remaining

182
00:13:53.420 --> 00:13:54.050
content.

183
00:13:54.840 --> 00:14:00.540
And we will be looking at things like database indexing and other important types of SQL queries that

184
00:14:00.540 --> 00:14:01.800
we commonly encounter.

185
00:14:02.760 --> 00:14:09.300
But please note that our focus is mainly on learning about how to interact with the database in a clean

186
00:14:09.300 --> 00:14:10.200
and efficient way.

187
00:14:10.590 --> 00:14:12.990
And of course, we will also look at database design.

188
00:14:13.290 --> 00:14:19.920
However, we will not be exploring SQL or MySQL at an in-depth level as they are outside the scope of

189
00:14:19.920 --> 00:14:20.730
this course.

190
00:14:20.760 --> 00:14:22.740
And you would have to work on it separately.

191
00:14:23.250 --> 00:14:28.800
But this section will give you the foundations that you'll need in order to explore further and dig

192
00:14:28.800 --> 00:14:30.060
deeper in those areas.

193
00:14:30.930 --> 00:14:32.970
And for that, I would also recommend these books.

194
00:14:33.000 --> 00:14:37.890
On the left is the database management systems by Ramakrishnan and Johannes Gerlach.

195
00:14:38.490 --> 00:14:44.220
I read most parts of this book while I was a student long time back, and it is one of the best books

196
00:14:44.220 --> 00:14:50.880
that I have ever read and it will give you a very good understanding of IBM's and the algorithms that

197
00:14:51.150 --> 00:14:52.560
IBM's would employ.

198
00:14:53.220 --> 00:14:58.920
Second book is dedicated to my school and it also seems to be good and you can take a look at it.

199
00:14:59.400 --> 00:15:04.620
And if I come across any other good resources, I will definitely add them in the resources section

200
00:15:04.620 --> 00:15:06.000
of this particular lecture.

201
00:15:06.810 --> 00:15:08.170
So that's about it.

202
00:15:08.190 --> 00:15:10.860
And this is the on signing off for now.

203
00:15:10.890 --> 00:15:11.580
Thank you.

