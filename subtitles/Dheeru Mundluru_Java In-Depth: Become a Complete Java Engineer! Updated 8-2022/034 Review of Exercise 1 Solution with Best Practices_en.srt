1
00:00:02,100 --> 00:00:03,090
Hi there.

2
00:00:03,120 --> 00:00:04,320
This is the Domaine de la Rue.

3
00:00:04,320 --> 00:00:05,310
And welcome back.

4
00:00:05,460 --> 00:00:11,970
In this video, we are going to look at the solution for the exercise, along with at least one best

5
00:00:11,970 --> 00:00:14,010
practice in implementing the solution.

6
00:00:14,430 --> 00:00:20,250
So even if you have completed the solution correctly, it may still be useful for you to watch this

7
00:00:20,250 --> 00:00:23,460
video because we are going to discuss that best practice.

8
00:00:24,000 --> 00:00:26,940
I hope you were able to implement the solution correctly.

9
00:00:26,970 --> 00:00:34,470
If not, this video should be really very helpful and it would surely reinforce the concepts that have

10
00:00:34,470 --> 00:00:35,490
been learned so far.

11
00:00:36,350 --> 00:00:39,500
In case you could not get started, then just don't worry.

12
00:00:39,590 --> 00:00:41,690
You don't have to be disheartened by it.

13
00:00:41,720 --> 00:00:47,570
And this discussion should be very helpful, since we are still at the very beginning stages of the

14
00:00:47,570 --> 00:00:48,140
course.

15
00:00:48,170 --> 00:00:52,370
It may take a few exercises for you to get comfortable with programming.

16
00:00:52,940 --> 00:00:56,360
That can happen if you are entirely new to programming.

17
00:00:56,810 --> 00:01:04,160
However, I'm hoping that you did try your best to implement the exercise as these exercises have been

18
00:01:04,160 --> 00:01:07,460
designed to test what you have learned so far.

19
00:01:08,060 --> 00:01:11,900
If you could not complete the exercise, then do implement it.

20
00:01:11,930 --> 00:01:13,820
As we discussed the solution here.

21
00:01:14,120 --> 00:01:17,750
The more you code, the more you will be comfortable with programming.

22
00:01:18,590 --> 00:01:24,710
And for those of you who are able to complete the solution, like I said earlier, I would still recommend

23
00:01:24,710 --> 00:01:31,970
to view the video as we will also discuss at least one best practice, especially in terms of implementing

24
00:01:31,970 --> 00:01:34,460
constructors and that can be helpful.

25
00:01:34,970 --> 00:01:37,790
So three things we are going to discuss here.

26
00:01:37,820 --> 00:01:39,740
First is the correct solution.

27
00:01:39,890 --> 00:01:45,470
Then we will also look at the best practice suggestion in terms of implementation, and we will also

28
00:01:45,470 --> 00:01:48,980
look at common mistakes that students were making.

29
00:01:49,650 --> 00:01:56,730
I must have looked at at least a few hundred solutions so far, and I could see some common mistakes

30
00:01:56,730 --> 00:02:03,210
that were being made, and we can discuss them and that can help, help in avoiding such mistakes in

31
00:02:03,210 --> 00:02:03,780
future.

32
00:02:04,050 --> 00:02:07,180
So let's go ahead and look at what we have here.

33
00:02:07,200 --> 00:02:09,750
So this is my Eclipse editor.

34
00:02:09,750 --> 00:02:11,400
I'm showing it in my Eclipse editor.

35
00:02:11,400 --> 00:02:13,140
And this is an instructor class.

36
00:02:13,140 --> 00:02:18,390
So a template of this has been given to you and this is the book class.

37
00:02:18,390 --> 00:02:20,970
So the book class was also provided to you.

38
00:02:21,420 --> 00:02:24,150
So let's go ahead and look at the instructor class.

39
00:02:24,150 --> 00:02:27,510
So these are the different fields here of the instructor.

40
00:02:27,510 --> 00:02:29,190
So this is the idea of the instructor.

41
00:02:29,190 --> 00:02:34,290
This will hold the name title department and the books that the instructor has written.

42
00:02:34,680 --> 00:02:38,310
So the title here is the title of the instructor.

43
00:02:38,580 --> 00:02:41,010
A few students were getting confused with this.

44
00:02:41,010 --> 00:02:45,870
They were thinking that this is somehow related to the title of the book, and that's not the case.

45
00:02:45,870 --> 00:02:51,240
This is the title of the instructor, which could be something like assistant professor or professor

46
00:02:51,420 --> 00:02:52,950
or associate professor.

47
00:02:53,700 --> 00:02:56,250
Now let's go ahead and look at the constructors.

48
00:02:56,250 --> 00:02:58,710
So these are the four constructors we have.

49
00:02:59,460 --> 00:03:04,290
So these are overloaded constructors and this is the one of the constructors.

50
00:03:04,290 --> 00:03:11,730
And if you invoke this constructor it is going to invoke this constructor using the this invocation

51
00:03:11,730 --> 00:03:12,480
statement.

52
00:03:12,480 --> 00:03:18,750
So this particular the second constructor has four parameters and it is being invoked from this one.

53
00:03:18,960 --> 00:03:25,500
And this in this particular constructor is invoked from here, and the final one is invoked from the

54
00:03:25,500 --> 00:03:26,130
third one.

55
00:03:26,960 --> 00:03:32,810
And in each of the constructors we are initializing one of the instance variables.

56
00:03:32,810 --> 00:03:38,040
So constructors are used for initializing variables, the initializing the state.

57
00:03:38,060 --> 00:03:44,240
But the way we are doing it is we are invoking the overloaded constructors in order to do that.

58
00:03:44,240 --> 00:03:49,790
And in each of the overloaded constructors we are initializing one of the instance variables.

59
00:03:50,240 --> 00:03:51,920
So that's what is happening here.

60
00:03:51,920 --> 00:03:58,310
And this invocation statement, we call that it has to be the first statement in the constructor, if

61
00:03:58,310 --> 00:03:58,580
at all.

62
00:03:58,580 --> 00:04:01,100
We have this invocation statement in the constructor.

63
00:04:01,100 --> 00:04:02,330
It needs to be the first one.

64
00:04:02,780 --> 00:04:08,600
And in order to access the instance variables here we are using this reference.

65
00:04:09,020 --> 00:04:15,770
Few students have got confused between this invocation and this reference and they are completely different.

66
00:04:15,770 --> 00:04:21,200
This invocation is just to invoke an overloaded constructor and this reference is used for accessing

67
00:04:21,200 --> 00:04:28,430
an instance variable and we would need it only if there is a local variable in the constructor which

68
00:04:28,430 --> 00:04:30,830
is hiding the instance variable.

69
00:04:30,980 --> 00:04:36,920
For instance, here we have books, so this is the constructor parameter and it is a local variable

70
00:04:36,920 --> 00:04:43,610
and it is hiding or shadowing the books instance variable which is defined here.

71
00:04:43,820 --> 00:04:45,350
It is an array of books.

72
00:04:47,130 --> 00:04:54,300
So here, if you directly access books, it's going to refer to this particular local variable because

73
00:04:54,300 --> 00:04:56,610
it is hiding the instance variable.

74
00:04:56,610 --> 00:05:02,190
So it would offer this and if you want to access the instance variable, then you would have to use

75
00:05:02,190 --> 00:05:03,390
the this reference.

76
00:05:04,150 --> 00:05:10,510
So that's what we have here with the constructors and we will get back to constructors at the end when

77
00:05:10,510 --> 00:05:12,160
we are discussing about the best practice.

78
00:05:12,520 --> 00:05:14,900
Now here let's look at the methods now.

79
00:05:14,920 --> 00:05:16,580
So this is the first method.

80
00:05:16,600 --> 00:05:20,560
Get most recent book title and it returns a string.

81
00:05:20,560 --> 00:05:26,590
So it is supposed to return the title of the last book stored in the books.

82
00:05:27,670 --> 00:05:28,660
So here.

83
00:05:29,790 --> 00:05:35,280
The code is going, the client code, the code that is invoking this class would create an instructor

84
00:05:35,280 --> 00:05:38,600
object and is passing all of the state here.

85
00:05:38,610 --> 00:05:45,120
And one of them is books and the books array has a bunch of books and we are supposed to return the

86
00:05:45,120 --> 00:05:51,840
last element, which is considered as the most recent book that has been added into that particular

87
00:05:51,840 --> 00:05:52,170
books.

88
00:05:52,170 --> 00:05:54,780
Are it in order to return the last book?

89
00:05:54,780 --> 00:06:02,460
We would say books dot length minus one and we need minus one because indexing an array starts from

90
00:06:02,460 --> 00:06:03,120
zero.

91
00:06:03,480 --> 00:06:04,740
So that's why we need to do that.

92
00:06:04,770 --> 00:06:09,930
Had it started from one, we would have said books dot length, but since it starts from zero, we need

93
00:06:09,930 --> 00:06:11,010
to say minus one.

94
00:06:11,010 --> 00:06:16,680
If you just say bookstore length, then it would be outside the boundary of an array and it would return

95
00:06:16,680 --> 00:06:17,670
a error.

96
00:06:18,360 --> 00:06:26,040
So this one, this expression here essentially is returning the last book stored in the books.

97
00:06:26,430 --> 00:06:27,930
So it is a book object.

98
00:06:27,930 --> 00:06:33,930
And since we are supposed to return the title of the book, we are just invoking the get title method,

99
00:06:33,930 --> 00:06:35,520
which would return a string.

100
00:06:35,820 --> 00:06:42,030
So if you look at the book Java class, so this is the book class and this is the constructor and there

101
00:06:42,030 --> 00:06:48,780
is only a single instance variable called title and we can set the title here and we can get the title

102
00:06:48,810 --> 00:06:52,500
here, we can say get title and it would return the title of the book.

103
00:06:53,230 --> 00:06:57,240
So you can do that or you can also directly access title feel.

104
00:06:57,250 --> 00:07:01,360
You can say dot title here instead of accessing the get title method.

105
00:07:01,780 --> 00:07:05,020
So you can also do that, but you shouldn't be doing it.

106
00:07:05,020 --> 00:07:11,020
As we will learn later in one of the subsequent sections when we are dealing with information hiding.

107
00:07:11,080 --> 00:07:17,740
So there we will see that we should always access the values, the values of the fields.

108
00:07:17,770 --> 00:07:19,570
We are such kinds of methods.

109
00:07:19,570 --> 00:07:24,730
These are called less access methods because we are going to access something, but we shouldn't be

110
00:07:24,730 --> 00:07:26,740
accessing the fields directly.

111
00:07:26,980 --> 00:07:30,970
And in order to prevent doing that, we use the private keyword.

112
00:07:31,000 --> 00:07:36,160
But since we are at the beginning of the course, we are not going to get into private public on all

113
00:07:36,160 --> 00:07:38,920
of those things which are called US access modifiers.

114
00:07:39,310 --> 00:07:45,850
So this is just for your information that when we are accessing the state of a particular object, we

115
00:07:45,850 --> 00:07:50,440
need to use access or methods like this instead of accessing the fields directly.

116
00:07:50,950 --> 00:07:52,810
So that's just for your information.

117
00:07:52,810 --> 00:07:59,110
So it's not a good practice to access the title field directly, and the title field should ideally

118
00:07:59,110 --> 00:08:00,550
be declared as private.

119
00:08:00,580 --> 00:08:05,770
Similarly, all of these fields should also be declared as private, but that is something that we will

120
00:08:05,770 --> 00:08:06,640
study later.

121
00:08:07,120 --> 00:08:07,990
So that's it.

122
00:08:08,020 --> 00:08:12,370
Now, few students, many students actually did something like this.

123
00:08:12,370 --> 00:08:20,650
They set books off to get title because they assumed that the books would always have only three books.

124
00:08:20,770 --> 00:08:27,010
That's because in the problem description, I gave an example where the books that was getting passed

125
00:08:27,010 --> 00:08:32,860
here was having three books, and they for some reason thought that it will it will always be like that.

126
00:08:32,860 --> 00:08:33,820
So that's not the case.

127
00:08:33,820 --> 00:08:37,990
That was just an example and it was also mentioned in the problem description.

128
00:08:38,260 --> 00:08:43,690
So the books are read that gets passed, can have three books, can have 50 books or can have 100 books.

129
00:08:43,900 --> 00:08:45,880
So you cannot do like this.

130
00:08:45,880 --> 00:08:49,900
You cannot hardcoded the, the index value like this.

131
00:08:49,900 --> 00:08:51,550
It's called as hard coding.

132
00:08:51,910 --> 00:08:54,560
In programming terms, you shouldn't be doing that.

133
00:08:54,580 --> 00:08:56,710
It has to be generic in this way.

134
00:08:57,220 --> 00:09:00,310
So that's one of the common mistakes that few students made.

135
00:09:00,820 --> 00:09:03,430
Now, let's look at the second method, the update book method.

136
00:09:03,700 --> 00:09:10,090
So the update book method is taking these two parameters, index and title, and it needs to update

137
00:09:10,090 --> 00:09:14,110
the title of the book at this particular index in the books.

138
00:09:14,530 --> 00:09:17,080
So that's what the second statement is doing.

139
00:09:17,080 --> 00:09:21,190
So we are saying books of index and we want to update the title.

140
00:09:21,190 --> 00:09:25,150
So we are invoking the set title method and we are passing the new title.

141
00:09:25,990 --> 00:09:27,430
So that's what Update book does.

142
00:09:27,430 --> 00:09:34,150
But it has to return the title that was pre that was there before this update has been done.

143
00:09:34,150 --> 00:09:36,730
And we need to return a book instance here.

144
00:09:36,820 --> 00:09:37,250
Okay.

145
00:09:37,450 --> 00:09:43,270
So what we are doing is we are creating a temporary variable and we are calling it as old book.

146
00:09:43,270 --> 00:09:51,220
So the data type is book and we are creating a brand new object here and we are assigning the title

147
00:09:51,220 --> 00:09:54,460
of the book at this particular index.

148
00:09:54,790 --> 00:10:01,210
So we are saying books of index don't get title and the title is being assigned here it be it's being

149
00:10:01,210 --> 00:10:02,650
stored in the book object.

150
00:10:03,590 --> 00:10:11,060
And then after doing that, we are then updating the title of this book or in the second statement and

151
00:10:11,060 --> 00:10:12,660
we are returning the old book.

152
00:10:12,680 --> 00:10:20,210
So the old book essentially has the title of the book at this particular index before it got updated.

153
00:10:20,210 --> 00:10:21,980
So that's all we are doing.

154
00:10:21,980 --> 00:10:25,670
And we are using we are using a temporary variable.

155
00:10:25,710 --> 00:10:32,780
Few students just had this these two statements and they were retaining the books index here.

156
00:10:33,020 --> 00:10:38,660
But that would be incorrect because in that case, the object that is being written will have the new

157
00:10:38,660 --> 00:10:39,200
title.

158
00:10:39,440 --> 00:10:41,870
So that's not what we are expecting here.

159
00:10:42,170 --> 00:10:43,490
So that is wrong.

160
00:10:44,200 --> 00:10:51,460
So you need to use temporary variables in such scenarios if you want to store a value before it gets

161
00:10:51,460 --> 00:10:52,090
updated.

162
00:10:52,090 --> 00:10:53,470
So that's what you would do.

163
00:10:53,650 --> 00:10:58,330
And the second thing was few students actually implemented it in this way.

164
00:10:58,900 --> 00:11:01,990
So it's just a way in which they implemented, which is incorrect.

165
00:11:02,200 --> 00:11:07,990
So the last two statements were right and they used a temporary variable back to the temporary variable.

166
00:11:07,990 --> 00:11:13,780
Instead of creating a new object, they just assigned books of index.

167
00:11:14,020 --> 00:11:23,050
So once you do that, we know that both books of index as well as old book will reference the same book

168
00:11:23,050 --> 00:11:23,800
instance.

169
00:11:24,070 --> 00:11:31,390
So when you update the the title here using books of index, it would also give you the same title.

170
00:11:31,390 --> 00:11:37,330
If you say all books get title, which is what my test cases are doing because we are returning this

171
00:11:37,330 --> 00:11:44,410
old book and when I do old book dot get title, it returns the title that got updated here.

172
00:11:44,850 --> 00:11:51,850
Okay, so here we are having the same book object that is being referenced by two different variables.

173
00:11:51,850 --> 00:11:54,120
One is books of index and one is all book.

174
00:11:54,130 --> 00:12:01,240
And this is what we discussed during a pass by value mechanism when we in that particular lecture and

175
00:12:01,240 --> 00:12:04,660
also in the lecture prior to the exercise.

176
00:12:05,290 --> 00:12:10,300
So if you are still confused, just go back and look at those two lectures and it should be clear to

177
00:12:10,300 --> 00:12:10,660
you.

178
00:12:11,260 --> 00:12:13,570
So this is not what we need to do.

179
00:12:13,600 --> 00:12:18,160
We need to create a brand new object, and then we need to set the title.

180
00:12:19,110 --> 00:12:19,230
Okay.

181
00:12:19,410 --> 00:12:20,330
So that's the thing.

182
00:12:20,340 --> 00:12:23,490
And here is a second version of the same method.

183
00:12:24,600 --> 00:12:28,980
So here what we are doing is the last two statements are the same.

184
00:12:29,100 --> 00:12:37,110
But instead of invoking this particular constructor, which takes title as an argument, we are invoking

185
00:12:37,110 --> 00:12:39,180
in No Ark constructor here.

186
00:12:39,360 --> 00:12:45,510
So if you recall, I said that there might be some change that you need to make in the book class,

187
00:12:45,900 --> 00:12:50,310
but it is not really required as shown by this particular method.

188
00:12:50,520 --> 00:12:59,160
But the change that you can make is to introduce a new constructor here, and if you do that, you can

189
00:12:59,160 --> 00:13:01,060
use this kind of logic.

190
00:13:01,080 --> 00:13:07,380
So we are creating an empty book object and we are setting the title with the title of the book at this

191
00:13:07,380 --> 00:13:08,550
particular index.

192
00:13:08,820 --> 00:13:10,650
It's just a different way of implementing.

193
00:13:10,740 --> 00:13:13,380
But for that, we do need to add the.

194
00:13:14,260 --> 00:13:19,300
No R constructor here because the compiler is not going to add this.

195
00:13:19,450 --> 00:13:26,170
We know that if there is no constructor within a class, then the compiler automatically inserts a no

196
00:13:26,320 --> 00:13:29,470
constructor and that would be added into the byte code.

197
00:13:29,500 --> 00:13:34,660
But if the class already has a constructor, then it's not going to do this.

198
00:13:34,780 --> 00:13:41,530
So if at all, you need a new constructor in such a case, you need to add the constructor manually,

199
00:13:41,530 --> 00:13:44,680
or you have to just invoke this particular constructor.

200
00:13:45,540 --> 00:13:48,850
So that's the change, but it was not really required.

201
00:13:48,870 --> 00:13:52,380
And finally, here is the third update book method.

202
00:13:52,380 --> 00:13:58,320
The second update book method, which also returns the book, which has the old title.

203
00:13:58,320 --> 00:14:00,180
So it takes an index and book.

204
00:14:00,180 --> 00:14:07,710
And in this case we are creating a temporary variable, but we are assigning books of index, the book

205
00:14:07,710 --> 00:14:09,000
that is at this index.

206
00:14:09,150 --> 00:14:15,800
And then to that books of index, we are assigning the book that was that is passed into the method.

207
00:14:15,810 --> 00:14:23,400
So at this instance, at this end, after the first statement, both old book as well as books of index

208
00:14:23,400 --> 00:14:25,380
are referencing the same object.

209
00:14:25,770 --> 00:14:33,330
But after this statement, Books of Index is referencing a new object which is referenced by book,

210
00:14:33,360 --> 00:14:41,190
whereas the old book still references the old book object which was assigned to it through this statement.

211
00:14:42,050 --> 00:14:45,870
So here we have two different book objects after this.

212
00:14:45,890 --> 00:14:51,830
One of them is referenced by old book and the other one is referenced by books of index.

213
00:14:52,070 --> 00:14:54,650
And we are returning the old book here.

214
00:14:54,860 --> 00:14:59,310
So that said, that's what that I hope this is also clear.

215
00:14:59,330 --> 00:15:06,140
So both the updated book methods are updating the books at this particular index, but the method methods

216
00:15:06,140 --> 00:15:13,610
themselves, the written book instances that have the title before updating the title of the book at

217
00:15:13,610 --> 00:15:15,800
this index before it got updated.

218
00:15:16,070 --> 00:15:20,840
Now, few students have done this, like, for example, instead of books of index, they had it as

219
00:15:20,840 --> 00:15:23,750
this book of index, which is really not required.

220
00:15:23,750 --> 00:15:25,820
It's not wrong, but it's not required.

221
00:15:25,850 --> 00:15:33,050
You would say this dot books when there is a local variable within this method which had the name,

222
00:15:33,080 --> 00:15:34,400
which has the name books.

223
00:15:35,210 --> 00:15:40,130
If that was the case, then that would hide the instance variable.

224
00:15:40,250 --> 00:15:43,160
And in that case we can use the this reference.

225
00:15:43,160 --> 00:15:48,950
But here, since there is no local variable called books, we can directly access the instance variable.

226
00:15:49,700 --> 00:15:50,870
So that's one thing.

227
00:15:50,900 --> 00:15:54,110
And finally, main method is also not needed.

228
00:15:54,380 --> 00:15:56,420
But let me get to that later.

229
00:15:56,450 --> 00:16:00,770
First, let me talk about the best practice, also one of the best practice.

230
00:16:01,310 --> 00:16:08,810
So instead of declaring like this, we can actually do it in a slightly different way, which is the

231
00:16:08,810 --> 00:16:10,270
normal convention.

232
00:16:10,280 --> 00:16:11,960
So let me just copy this.

233
00:16:13,980 --> 00:16:14,180
Okay.

234
00:16:14,310 --> 00:16:17,520
So now what we are going to do is we have this box.

235
00:16:17,670 --> 00:16:20,490
Let's also say copy this here.

236
00:16:24,180 --> 00:16:29,700
I'd name all of the fields will be instantiated, will be initialized here.

237
00:16:30,000 --> 00:16:32,670
And then we have this title.

238
00:16:35,980 --> 00:16:37,690
And this dot department.

239
00:16:40,170 --> 00:16:42,090
So all fields are initialized here.

240
00:16:42,090 --> 00:16:46,230
And so this is like the primary constructor.

241
00:16:48,070 --> 00:16:50,800
And we can still have these other constructors.

242
00:16:50,800 --> 00:16:54,340
For instance, we can have this constructor here.

243
00:16:58,270 --> 00:17:01,090
But this will invoke.

244
00:17:02,010 --> 00:17:03,540
The first constructor.

245
00:17:03,630 --> 00:17:08,280
And for department, it will it will also pass department.

246
00:17:08,880 --> 00:17:14,040
But for books, it doesn't have books here because only four of the parameters are here.

247
00:17:14,520 --> 00:17:17,130
It would pass some default value.

248
00:17:17,130 --> 00:17:22,890
In this case we can pass null, so the same thing can be done for all of the constructors.

249
00:17:22,890 --> 00:17:25,760
So for instance, we can also have both of these.

250
00:17:25,780 --> 00:17:26,880
Let me just copy them.

251
00:17:31,410 --> 00:17:34,260
This and this would be.

252
00:17:37,040 --> 00:17:45,010
Title and it can either invoke this constructor or it can directly invoke the primary constructor to.

253
00:17:45,020 --> 00:17:49,710
But if it invokes the primary constructor, it needs to pass values for department and books.

254
00:17:49,730 --> 00:17:55,370
Once again, it can pass some default values like this and we can remove this.

255
00:17:56,030 --> 00:17:58,340
And the same thing here.

256
00:18:00,320 --> 00:18:03,410
You can test this out and it will give you the same result.

257
00:18:03,440 --> 00:18:12,050
It's just a different way of initializing state so that set strings can be assigned null and that's

258
00:18:12,050 --> 00:18:13,250
why we are passing now.

259
00:18:13,280 --> 00:18:19,460
So all of these three constructors are just invoking this particular instructor constructor, which

260
00:18:19,460 --> 00:18:21,590
is doing all of the initialization.

261
00:18:21,590 --> 00:18:25,690
So all initialization is happening in one single constructor.

262
00:18:25,700 --> 00:18:28,280
But here that was not the case.

263
00:18:28,550 --> 00:18:34,850
So this in this particular constructor was initializing two fields and each of the other constructors

264
00:18:34,850 --> 00:18:40,910
were invoking the an overloaded constructor, but were initializing only one of the fields.

265
00:18:40,910 --> 00:18:42,680
So this one is initializing blocks.

266
00:18:42,680 --> 00:18:44,390
This is department and this is title.

267
00:18:44,750 --> 00:18:48,920
So the nice thing about this is all of them are done at one place.

268
00:18:49,340 --> 00:18:54,380
So we will have all of the logic here and all the other constructors are invoking that.

269
00:18:54,500 --> 00:18:58,950
So even in Java Library, many classes are written in this way.

270
00:18:58,970 --> 00:19:04,370
So this is you can think of it as a convention, but strictly you don't have to follow this.

271
00:19:04,370 --> 00:19:07,610
You can still do this, but this is the normal convention.

272
00:19:08,210 --> 00:19:13,120
And so all of these different constructors will invoke this, but it need not be like that.

273
00:19:13,130 --> 00:19:17,780
This can also invoke this and this can invoke that, invoke the primary constructor even.

274
00:19:17,780 --> 00:19:18,620
That's possible.

275
00:19:18,800 --> 00:19:24,620
And one other thing to note is just because we have overloaded constructors in this way, don't assume

276
00:19:24,620 --> 00:19:31,760
that an overloaded constructor would invoke another constructor using this invocation that need not

277
00:19:31,760 --> 00:19:32,540
be the case.

278
00:19:32,540 --> 00:19:34,690
It's just that it is like this.

279
00:19:34,700 --> 00:19:41,120
In this case, sometimes you may have overloaded constructors, but there wouldn't be any this invocation

280
00:19:41,120 --> 00:19:42,200
statements between them.

281
00:19:42,200 --> 00:19:46,750
So they will not invoke each other and they will be entirely independent of each other.

282
00:19:46,760 --> 00:19:49,250
So you can also encounter such cases.

283
00:19:49,850 --> 00:19:57,200
So that's one best practice convention to have a primary constructor and all other constructors invoking

284
00:19:57,200 --> 00:19:59,450
it, and that's it.

285
00:19:59,660 --> 00:20:02,980
And one other thing is you can see that there is no main method here.

286
00:20:02,990 --> 00:20:08,090
So for the solution, if you are going to submit it, we don't need a main method.

287
00:20:08,090 --> 00:20:12,200
Main method is needed only if you want to run, run it from the command line.

288
00:20:12,530 --> 00:20:14,630
So that's mainly for testing purpose.

289
00:20:14,630 --> 00:20:21,670
But in order to submit it into the platform as your solution, you really do not need main method.

290
00:20:21,680 --> 00:20:28,460
So think of this class as being used as part of a larger program, things that think that there is some

291
00:20:28,460 --> 00:20:34,790
university management system and that university management system has some kind of user interface where

292
00:20:34,790 --> 00:20:40,340
you instructors will be registering into the site and when they register we will create an instance,

293
00:20:40,340 --> 00:20:45,410
we will create an object of a particular instructor and we will further process it and store it in the

294
00:20:45,410 --> 00:20:47,060
database or something like that.

295
00:20:47,270 --> 00:20:52,490
Similarly, I have a test case that I have installed for testing this program.

296
00:20:52,490 --> 00:20:58,160
You can also think of that the test case program, the unit test case program has that larger program

297
00:20:58,160 --> 00:20:58,390
too.

298
00:20:58,400 --> 00:21:04,640
So it is also going to create instances of these instructors and pass different values to these methods.

299
00:21:04,640 --> 00:21:11,780
And if the expected output, if the output returned is same as the expected output, then it means that

300
00:21:11,780 --> 00:21:13,940
the method has worked correctly.

301
00:21:13,940 --> 00:21:16,940
Otherwise it will say that the method is incorrect.

302
00:21:17,300 --> 00:21:20,000
So that's with that.

303
00:21:20,690 --> 00:21:26,660
And if you have the main method also, you can think of it as the main method being that larger program

304
00:21:26,660 --> 00:21:31,280
from which we are creating these instances of the instructor class.

305
00:21:31,640 --> 00:21:32,870
So that's about it.

306
00:21:32,870 --> 00:21:40,850
I hope you found this solution helpful and hopefully it will be helpful and solving the future exercises

307
00:21:40,850 --> 00:21:41,240
too.

308
00:21:41,360 --> 00:21:43,040
Thank you and happy coding.

