1
00:00:02,120 --> 00:00:02,969
Hello there.

2
00:00:02,990 --> 00:00:04,160
This is the Manila Room.

3
00:00:04,190 --> 00:00:05,180
And welcome back.

4
00:00:05,570 --> 00:00:12,470
So far, we looked at seven primitive types of it's six of them represent numbers while one represents

5
00:00:12,470 --> 00:00:13,190
characters.

6
00:00:13,580 --> 00:00:20,000
Now, let's look at the final primitive data type that represents logical values like true or false.

7
00:00:20,540 --> 00:00:26,570
So we have primitive types representing numbers, a primitive type for characters and one for logical

8
00:00:26,570 --> 00:00:27,380
values.

9
00:00:27,590 --> 00:00:35,090
And that final one is the Boolean primitive type, and it can take either a true or false value.

10
00:00:35,510 --> 00:00:42,980
So true or false are Boolean Literals and Boolean is a binary data type as it can take only one of the

11
00:00:42,980 --> 00:00:44,810
two values true or false?

12
00:00:45,610 --> 00:00:50,090
By default, a boolean variable is initialized with false.

13
00:00:50,110 --> 00:00:51,480
So keep that in mind.

14
00:00:51,490 --> 00:00:56,830
So if you're not initializing a boolean variable, it gets a false as the value.

15
00:00:57,730 --> 00:00:58,930
Coming to bed depth.

16
00:00:58,960 --> 00:01:06,910
It is not precisely defined and it is specific to particular JVM implementation, so it can vary from

17
00:01:06,910 --> 00:01:08,950
one team to another.

18
00:01:09,070 --> 00:01:11,020
And so we need not worry about that.

19
00:01:11,050 --> 00:01:15,370
It could be one byte or four bytes or whatever the JVM chooses.

20
00:01:16,300 --> 00:01:22,570
Now Boolean variables are mostly used in control flow statements and control flow statements are something

21
00:01:22,570 --> 00:01:24,220
which we will see in the next section.

22
00:01:24,820 --> 00:01:31,480
But as the name suggests, control flow statements are simply the statements that control the flow of

23
00:01:31,480 --> 00:01:34,660
your logic depending upon certain conditions.

24
00:01:35,260 --> 00:01:40,810
And these conditions are boolean conditions and they can be based on boolean variables.

25
00:01:41,350 --> 00:01:47,200
One example is an F statement and we will also look at F statement in the subsequent section.

26
00:01:47,410 --> 00:01:53,200
But in this lecture we will use a simple F statement so that we can see how a boolean variable can be

27
00:01:53,200 --> 00:01:53,710
used.

28
00:01:54,100 --> 00:02:00,790
So the F statement will use the boolean variable and it will see if the condition is true or false.

29
00:02:00,820 --> 00:02:05,560
If it is true, then it will execute certain piece of code, otherwise it will not.

30
00:02:05,830 --> 00:02:09,940
So that's how the control will flow, depending upon the condition.

31
00:02:10,639 --> 00:02:18,260
So let's go ahead and extend our student class by implementing a very simple logic for computing the

32
00:02:18,260 --> 00:02:21,620
tuition fees that the student has to pay in a semester.

33
00:02:22,390 --> 00:02:26,380
If the student is a local student, then student would pay a certain fees.

34
00:02:26,650 --> 00:02:32,710
But if the student is an international student, then he or she would have to pay a higher fee.

35
00:02:33,600 --> 00:02:38,100
So let's go ahead and declare a boolean variable called international.

36
00:02:38,550 --> 00:02:40,590
So the type is boolean.

37
00:02:41,910 --> 00:02:43,530
And let's initialize it to.

38
00:02:43,530 --> 00:02:44,030
True.

39
00:02:44,040 --> 00:02:45,870
So that's the boolean literal.

40
00:02:46,380 --> 00:02:50,880
Now let's define a variable called tution fees.

41
00:02:52,530 --> 00:02:57,000
And let's initialize it to $12,000.

42
00:02:57,000 --> 00:02:58,260
So it's off type double.

43
00:02:58,980 --> 00:03:01,100
Let's declare one more variable.

44
00:03:01,110 --> 00:03:02,670
So this is fees.

45
00:03:03,930 --> 00:03:06,180
Let's call it international fees.

46
00:03:07,360 --> 00:03:11,800
And this would be an additional amount of the student is an international student.

47
00:03:12,660 --> 00:03:17,250
Now here between the compute method, let's compute the tuition fees.

48
00:03:17,250 --> 00:03:21,060
So we will say F, so we're going to use an F statement.

49
00:03:21,060 --> 00:03:27,270
So it starts with the reserved keyword F and it is followed by this parenthesis and it has a body here

50
00:03:28,170 --> 00:03:31,050
which will have the braces opening in the closing place.

51
00:03:31,500 --> 00:03:33,360
Now here the condition.

52
00:03:33,360 --> 00:03:34,680
Let's have it as.

53
00:03:37,180 --> 00:03:37,870
True.

54
00:03:38,830 --> 00:03:44,140
So if it is equal to true, we want to re compute the tuition fees.

55
00:03:44,410 --> 00:03:45,820
And that would be.

56
00:03:47,300 --> 00:03:52,970
Tuition fees are equal to tuition fees plus international fees.

57
00:03:54,630 --> 00:03:55,150
Okay.

58
00:03:55,500 --> 00:03:58,290
So if it is true, then it would be 17,000.

59
00:03:58,290 --> 00:04:02,070
So tuition fees will be 12,000 and international fees will be 5000.

60
00:04:02,220 --> 00:04:05,490
And the sum of that will be assigned to the tuition fees.

61
00:04:06,210 --> 00:04:08,520
Remember the four indentation spaces.

62
00:04:09,180 --> 00:04:10,710
So let's go ahead and.

63
00:04:19,010 --> 00:04:19,519
Alright.

64
00:04:19,519 --> 00:04:21,860
Time to compile and execute.

65
00:04:28,940 --> 00:04:29,490
There you go.

66
00:04:29,510 --> 00:04:31,130
It prints 17,000.

67
00:04:32,630 --> 00:04:34,300
Now, here I am.

68
00:04:34,460 --> 00:04:38,540
This is called as an equality operator, but we don't have to do this.

69
00:04:38,540 --> 00:04:43,430
So here, if the student is international, then this piece of logic is getting executed.

70
00:04:43,700 --> 00:04:45,680
But we don't have to do this.

71
00:04:45,710 --> 00:04:49,190
As long as this expression evaluates to true, then we are good.

72
00:04:49,220 --> 00:04:51,550
Now, here it is international, right?

73
00:04:51,560 --> 00:04:52,910
It evaluates to true.

74
00:04:52,970 --> 00:04:55,010
So this statement will get executed.

75
00:04:55,010 --> 00:04:58,640
So we don't have to explicitly say equals to true.

76
00:04:58,820 --> 00:04:59,900
We don't have to do that.

77
00:05:00,760 --> 00:05:03,220
A lot of new students actually do that.

78
00:05:03,430 --> 00:05:08,350
So they put that equality sign and then they compare it with true or false.

79
00:05:08,860 --> 00:05:10,550
So this is what it is.

80
00:05:10,570 --> 00:05:13,140
Now, the default value, I said is false.

81
00:05:13,150 --> 00:05:15,100
So let's do this.

82
00:05:15,220 --> 00:05:15,940
Let's remove that.

83
00:05:15,940 --> 00:05:17,140
So it will be false.

84
00:05:17,290 --> 00:05:19,940
So if it is false, then it will skip the statement.

85
00:05:19,940 --> 00:05:24,820
Then the body will not be executed and the tuition fees will be printed as 12,000.

86
00:05:25,180 --> 00:05:26,620
So let's recompile.

87
00:05:29,680 --> 00:05:30,190
There you go.

88
00:05:30,220 --> 00:05:32,110
This time it is 12,000.

89
00:05:32,970 --> 00:05:35,880
So that's all there is to boolean or variable.

90
00:05:36,450 --> 00:05:39,120
It can take either a true or false.

91
00:05:39,510 --> 00:05:44,680
So we are done with looking at all of the primitive data types and there were eight primitive types.

92
00:05:44,700 --> 00:05:49,140
They are in-built into the Java language, so they come with the Java language.

93
00:05:49,590 --> 00:05:50,820
So that's about it.

94
00:05:50,850 --> 00:05:51,540
Thank you.

95
00:05:51,540 --> 00:05:56,700
And I hope you have enjoyed learning about the primitive types and I'll see you in the next lecture.

