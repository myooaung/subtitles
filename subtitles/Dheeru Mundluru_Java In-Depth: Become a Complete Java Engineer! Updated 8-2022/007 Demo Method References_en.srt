1
00:00:02,100 --> 00:00:02,890
Hi there.

2
00:00:02,910 --> 00:00:03,990
This is De La Rue.

3
00:00:03,990 --> 00:00:04,920
And welcome back.

4
00:00:04,950 --> 00:00:10,890
Let's now look at method references, which is a very simple concept, and it is also used for passing

5
00:00:10,890 --> 00:00:12,210
your own functionality.

6
00:00:12,240 --> 00:00:18,800
Just like in the case of lambdas and the target type for method, references are also functional interfaces,

7
00:00:18,810 --> 00:00:20,360
just like in the case of lambdas.

8
00:00:20,370 --> 00:00:22,580
And if not, we will get a compilation errors.

9
00:00:22,920 --> 00:00:27,930
So it has to be functional interface for both lambdas as well as method references.

10
00:00:28,410 --> 00:00:33,570
And we very briefly looked at method references in the collections framework chapter in the iterator

11
00:00:33,570 --> 00:00:41,040
lecture and we used it for invoking the forage method where we passed a method reference as an argument

12
00:00:41,040 --> 00:00:45,840
and we very briefly discussed it and we did not get into any of the details, but now we are going to

13
00:00:45,840 --> 00:00:48,570
get into all of the details regarding method references.

14
00:00:48,720 --> 00:00:54,540
So a method reference, as the name implies, is simply a reference to a method, just like the way

15
00:00:54,540 --> 00:01:00,660
we have object references where we have references to objects and we know that object references can

16
00:01:00,660 --> 00:01:07,620
be passed as method arguments and since Java eight onwards we can also pass method references, so we

17
00:01:07,620 --> 00:01:11,400
can pass references to methods as arguments to methods.

18
00:01:11,910 --> 00:01:16,680
And that way, as we mentioned earlier, methods are also first class citizens.

19
00:01:16,680 --> 00:01:19,860
So we are we are able to pass behavior.

20
00:01:20,250 --> 00:01:24,960
And we have also seen earlier that lambdas can also be used for that.

21
00:01:25,260 --> 00:01:31,230
But in case of lambdas, we were defining the behavior as part of the lambda body itself.

22
00:01:31,680 --> 00:01:37,110
Now if you have that same logic encapsulated in a method, you can as well use a method reference.

23
00:01:37,320 --> 00:01:44,460
So it's an alternative like an alternative, and it may be more readable to now in certain cases, as

24
00:01:44,460 --> 00:01:51,120
we have seen in the demo earlier in the previous lecture, we were invoking another method from the

25
00:01:51,120 --> 00:01:53,120
lambda body itself, right?

26
00:01:53,160 --> 00:02:00,360
For example, here we were invoking the stat, the strip HTML tax method inside the body of the lambda.

27
00:02:00,360 --> 00:02:03,630
And in this case also we can make use of a method reference.

28
00:02:04,350 --> 00:02:08,009
And there are three kinds of method references and we are going to look at all of them.

29
00:02:08,550 --> 00:02:14,340
So we are going to just work on our functional interfaces, demo class, functional interface, demo

30
00:02:14,340 --> 00:02:21,570
class, and we will convert some of the lambda expressions into method references and we are going to

31
00:02:21,570 --> 00:02:23,520
look at all three kinds of method references.

32
00:02:23,520 --> 00:02:28,560
So here we are, we are processing the documents and we are applying a filter and then we are doing

33
00:02:28,590 --> 00:02:29,730
two transformations.

34
00:02:29,730 --> 00:02:35,190
So here during the transformation, we are going to look at our first method reference and then we are

35
00:02:35,190 --> 00:02:40,200
printing the documents that are documents and here we will replace using the second method reference

36
00:02:40,320 --> 00:02:43,020
and the third one will be used at the top.

37
00:02:43,200 --> 00:02:50,580
So a method reference essentially has this kind of a syntax where you will have some target reference

38
00:02:51,360 --> 00:02:55,860
and you will have a delimiter, which is two columns and then the method.

39
00:02:56,610 --> 00:03:01,440
So that's how you will have and in the first case, let's look at the first case here.

40
00:03:01,440 --> 00:03:07,620
So here we are applying two transformations as you know, the two transformations to convert the HTML

41
00:03:07,620 --> 00:03:08,370
document.

42
00:03:08,370 --> 00:03:12,360
In the first case, we are removing the HTML tags and then we are among the stop words.

43
00:03:12,570 --> 00:03:17,520
Now here all we are doing is we are invoking another method inside the body.

44
00:03:17,880 --> 00:03:21,780
For example, here we are calling this method called remove stop words.

45
00:03:22,080 --> 00:03:22,410
Right?

46
00:03:22,410 --> 00:03:28,020
It's a static method inside this class and this class is also defined in the same file.

47
00:03:28,110 --> 00:03:29,940
So we are invoking this method.

48
00:03:29,940 --> 00:03:35,280
So instead of using this lambda, we can actually use a method reference.

49
00:03:35,580 --> 00:03:40,800
So target type, like I said, will still be functional interface.

50
00:03:43,130 --> 00:03:46,010
Now all we will do is we will take this class name.

51
00:03:47,430 --> 00:03:50,130
And we'll have the two columns.

52
00:03:50,130 --> 00:03:55,180
So that's the delimiter and we will invoke the remove stop words method.

53
00:03:55,200 --> 00:03:55,650
That's it.

54
00:03:55,650 --> 00:03:57,690
So that's the reference to this method.

55
00:03:57,990 --> 00:04:01,770
And we don't have to use any parameters here.

56
00:04:01,770 --> 00:04:06,780
There is no parameters because parameters is implicit in the method name itself.

57
00:04:07,380 --> 00:04:11,850
And I may also comment this here we are invoking the apply method.

58
00:04:14,190 --> 00:04:14,810
So that's it.

59
00:04:14,860 --> 00:04:19,079
And so so basically we are assigning it to this function.

60
00:04:19,079 --> 00:04:20,519
So this is a functional interface.

61
00:04:20,519 --> 00:04:26,640
So that's the target type just like in the case of Lambda and we are invoking the apply method on this.

62
00:04:26,640 --> 00:04:33,390
So the remote stopwatch, you can think of it this way that it will be part of the apply method so that

63
00:04:33,390 --> 00:04:38,670
it will be the only statement inside the applied method and to the apply method we are passing doc and

64
00:04:38,670 --> 00:04:45,720
remove stop words also has only a single text, only a single parameter and that doc will be will be

65
00:04:45,720 --> 00:04:48,360
relayed to the remote stopwatch method.

66
00:04:48,360 --> 00:04:52,410
So that doc will be just passed to the remote password, the most obvious method.

67
00:04:52,980 --> 00:04:59,970
So essentially so both the apply method, remote stopwatch method just corresponds to the applied method.

68
00:04:59,970 --> 00:05:03,570
So whatever you pass to apply method will also be passed to this one.

69
00:05:05,510 --> 00:05:12,260
So the, the method that we are passing should be appropriate for the abstract method and the functional

70
00:05:12,260 --> 00:05:12,790
interface.

71
00:05:12,800 --> 00:05:14,810
Otherwise we will get a compilation error.

72
00:05:15,530 --> 00:05:16,700
So that's the first one.

73
00:05:16,710 --> 00:05:17,990
Let me just run this.

74
00:05:18,980 --> 00:05:20,970
So we get the same output.

75
00:05:20,990 --> 00:05:26,750
So it's the simplest case where we have a class name followed by the the static method.

76
00:05:27,230 --> 00:05:32,180
Now let's look at the second method reference where instead of class name, we use an object reference.

77
00:05:32,360 --> 00:05:33,730
So let's go here.

78
00:05:33,740 --> 00:05:37,910
So here we are printing the we are printing the target documents.

79
00:05:37,910 --> 00:05:41,990
So out of the four documents, we have two documents which met our requirement.

80
00:05:41,990 --> 00:05:45,530
So we are printing them and we are using this lambda expression.

81
00:05:45,740 --> 00:05:49,280
Now here we are invoking a method called println, right?

82
00:05:49,280 --> 00:05:55,310
And the println method we know is being invoked here on this variable call out, right.

83
00:05:55,310 --> 00:05:59,270
So it is out is actually an object reference within the system class.

84
00:05:59,720 --> 00:06:03,530
So for the second method reference, this is the syntax.

85
00:06:03,530 --> 00:06:08,420
You have an object reference and you will invoke the instance method.

86
00:06:08,420 --> 00:06:11,870
So in the first case it was class name followed by static method.

87
00:06:11,870 --> 00:06:17,450
In this case, since we are invoking a method on object reference, it's an instance method.

88
00:06:18,110 --> 00:06:21,080
Now this is let's go ahead and common this.

89
00:06:24,170 --> 00:06:25,310
So here.

90
00:06:27,720 --> 00:06:34,440
This is a variable, so this is object reference and we'll just do that and we don't need this because

91
00:06:34,830 --> 00:06:41,610
the input parameter is implicit and the println method and we know that for each method accepts a consumer.

92
00:06:42,450 --> 00:06:47,610
So we are passing this method reference as an instance of the consumer.

93
00:06:47,610 --> 00:06:51,480
And in the consumer we know there is this method called accept.

94
00:06:51,840 --> 00:06:58,950
So you can think that the println method, System.out.println method will be will be the body of the

95
00:06:58,950 --> 00:07:06,510
accept method and to the accept method, the for each method will pass each of its elements one at a

96
00:07:06,510 --> 00:07:06,960
time.

97
00:07:06,960 --> 00:07:08,910
So initially it will pass one document.

98
00:07:08,910 --> 00:07:14,310
And that document the the accept method will pass it to the parental end method and that's how it's

99
00:07:14,310 --> 00:07:15,840
going to be printed.

100
00:07:15,840 --> 00:07:23,250
So once again, we have to pass the this has to this method reference has to correspond to the abstract

101
00:07:23,250 --> 00:07:25,170
method in the functional interface.

102
00:07:25,530 --> 00:07:28,500
If the target type is not right, then you get a compilation error.

103
00:07:28,500 --> 00:07:29,790
So let me run this.

104
00:07:30,920 --> 00:07:32,060
You get the same output.

105
00:07:32,270 --> 00:07:32,990
So it's good.

106
00:07:33,080 --> 00:07:39,740
So in the second one, the syntax is object reference followed by the delimiter and then the instance

107
00:07:39,740 --> 00:07:40,250
method.

108
00:07:40,820 --> 00:07:45,500
Now here we had the class name followed by the static method.

109
00:07:45,530 --> 00:07:50,840
Now if you try to use an object reference here and then a static method, we will get a compilation

110
00:07:50,840 --> 00:07:51,290
error.

111
00:07:52,160 --> 00:07:53,400
So that's the second one.

112
00:07:53,420 --> 00:07:55,270
Now let's look at the third one here.

113
00:07:55,280 --> 00:07:58,790
So the third one is has a syntax like this.

114
00:07:58,910 --> 00:08:01,720
So it is also like an instance method.

115
00:08:01,730 --> 00:08:04,760
You're invoking an instance method, but we are saying class name.

116
00:08:05,840 --> 00:08:09,350
But then here we have an object reference.

117
00:08:09,710 --> 00:08:13,790
So you might say, why not just here?

118
00:08:13,790 --> 00:08:15,470
In this case its d is nothing.

119
00:08:15,470 --> 00:08:24,320
But doc, why not just say this doc contains right contents is from the string from the string class.

120
00:08:24,590 --> 00:08:32,990
But if we do that then the problem is contains method has a single parameter, but this is a by function

121
00:08:32,990 --> 00:08:36,530
and the apply method in the by function takes two parameters.

122
00:08:37,100 --> 00:08:40,880
So that's why we cannot we cannot use this.

123
00:08:41,720 --> 00:08:46,850
So we would have to use this kind of notation here.

124
00:08:47,600 --> 00:08:56,990
And if we use this, then JVM will automatically invoke the instance the contains method, the instance

125
00:08:56,990 --> 00:09:00,560
method on the first parameter on the first parameter.

126
00:09:00,560 --> 00:09:02,120
So let me just write it down.

127
00:09:02,300 --> 00:09:03,290
I think it'll be clear.

128
00:09:03,410 --> 00:09:05,270
So we have this.

129
00:09:07,770 --> 00:09:12,510
So we have to use the container method is actually part of.

130
00:09:12,810 --> 00:09:15,120
So we are saying dot contains.

131
00:09:15,270 --> 00:09:24,510
So we have to take the type of D type of D is string in this case because because we are you can see

132
00:09:24,510 --> 00:09:26,460
that it is string here the first parameter.

133
00:09:27,440 --> 00:09:30,290
And the syntax also says that class name.

134
00:09:30,290 --> 00:09:32,000
So that's the class name, Colon.

135
00:09:32,030 --> 00:09:33,890
This is the instance method.

136
00:09:35,350 --> 00:09:35,500
Okay.

137
00:09:35,600 --> 00:09:38,700
Now, this can be assigned to this functional interface.

138
00:09:38,710 --> 00:09:40,390
Let me do that.

139
00:09:41,600 --> 00:09:41,810
Okay.

140
00:09:41,960 --> 00:09:42,650
Now.

141
00:09:42,870 --> 00:09:49,490
And so this is going inside the apply method and in the apply method to the apply method, we are passing

142
00:09:49,490 --> 00:09:50,000
this.

143
00:09:50,420 --> 00:09:58,880
But in this case the Java would know that it has to invoke because we are passing this kind of a method

144
00:09:58,880 --> 00:09:59,570
reference.

145
00:09:59,690 --> 00:10:06,980
It knows that it would invoke the contains method on this on this particular parameter, just like in

146
00:10:06,980 --> 00:10:13,220
the case of Lambda and it will pass the stream as an argument to the contents method.

147
00:10:13,490 --> 00:10:15,710
So that will be taken care of internally.

148
00:10:15,710 --> 00:10:20,900
So it's a little bit confusing in this case because contains still has one parameter, but apply has

149
00:10:20,900 --> 00:10:22,220
to two parameters.

150
00:10:22,220 --> 00:10:30,590
But in this when it sees the this kind of a method reference, then it knows that it has to invoke the

151
00:10:30,590 --> 00:10:37,460
contents method on this parameter on the first parameter, and then it will just pass the all the remaining.

152
00:10:37,530 --> 00:10:39,170
It may need not be just one parameter.

153
00:10:39,170 --> 00:10:43,970
In this case it is only one parameter, but if contains accepts more than one parameter, then you would

154
00:10:43,970 --> 00:10:46,370
also have to pass more parameters.

155
00:10:46,370 --> 00:10:50,930
So all of the rest of the parameters will be parsed as input to the to this method.

156
00:10:52,100 --> 00:10:52,940
That's how it is.

157
00:10:53,150 --> 00:10:59,900
So but we can also implement this in the different way, which in the like in the case of the second

158
00:10:59,900 --> 00:11:00,800
method reference.

159
00:11:00,800 --> 00:11:03,500
But for that we would have to change this to function.

160
00:11:03,500 --> 00:11:05,240
So let's also do that.

161
00:11:06,090 --> 00:11:07,560
We will have function.

162
00:11:08,730 --> 00:11:13,560
It will just take string and it will return a boolean.

163
00:11:13,560 --> 00:11:14,760
So let's call it.

164
00:11:15,700 --> 00:11:16,660
Function.

165
00:11:17,320 --> 00:11:18,730
In this case, it will be.

166
00:11:19,300 --> 00:11:19,870
Dock.

167
00:11:19,870 --> 00:11:21,400
Dock is already here.

168
00:11:21,850 --> 00:11:24,040
So that's the object reference.

169
00:11:24,040 --> 00:11:27,550
And we are saying invoke contains on dock.

170
00:11:28,270 --> 00:11:30,490
Now this can be assigned to this one.

171
00:11:31,380 --> 00:11:32,010
Okay.

172
00:11:32,340 --> 00:11:33,480
Now let's write.

173
00:11:34,350 --> 00:11:35,700
It's also correct, this one.

174
00:11:38,780 --> 00:11:43,640
So it will be function, not apply.

175
00:11:44,950 --> 00:11:45,520
Stream.

176
00:11:47,830 --> 00:11:49,250
So we get the same output.

177
00:11:49,270 --> 00:11:54,460
So in this case, we are able to use a second type of method reference where we are having an object

178
00:11:54,460 --> 00:11:58,200
reference and we are invoking the contents method.

179
00:11:58,210 --> 00:12:03,780
But it but that has to fit this particular interface and it fits this interface.

180
00:12:03,790 --> 00:12:07,060
It's just that it is not going to fit the BI function interface.

181
00:12:08,200 --> 00:12:14,320
So when you do that then this contains method will be part of apply and apply gets a single parameter

182
00:12:14,320 --> 00:12:19,270
stream and that stream will be relayed to the contents method will be passed to the contents method.

183
00:12:19,930 --> 00:12:26,260
It's just that if you are using a bi function then we will have to in this particular case, then we

184
00:12:26,260 --> 00:12:28,960
will have to pass this string.

185
00:12:29,140 --> 00:12:34,690
We will have to pass this in the third kind of method reference, and then it will internally it will

186
00:12:34,690 --> 00:12:35,820
be taken care of.

187
00:12:35,830 --> 00:12:42,100
So the contents method will be invoked on the first parameter in this case, and all of the remaining

188
00:12:42,100 --> 00:12:45,640
arguments to that method will be passed as an input to the contents.

189
00:12:45,640 --> 00:12:48,820
In which case, in this case, it is only a single argument.

190
00:12:49,300 --> 00:12:50,990
So that's what it is.

191
00:12:51,010 --> 00:12:55,330
So those are the three kinds of method references and I hope they are clear enough.

192
00:12:55,780 --> 00:12:59,110
So that's it and thank you and happy coding.

