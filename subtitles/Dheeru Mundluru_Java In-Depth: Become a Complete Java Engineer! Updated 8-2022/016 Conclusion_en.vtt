WEBVTT
1
00:00:01.050 --> 00:00:03.240
We are not done with the language basic series.

2
00:00:03.810 --> 00:00:08.189
And with that, we have set a solid foundation towards mastering Java.

3
00:00:09.080 --> 00:00:12.440
We mastered all the bare essentials in the process.

4
00:00:12.470 --> 00:00:15.410
We also learned about ten or so effective job items.

5
00:00:16.129 --> 00:00:19.310
Next, we will learn more serious object oriented programming.

6
00:00:19.880 --> 00:00:25.220
We will learn concepts like inheritance, polymorphism, abstract classes and interfaces.

7
00:00:26.180 --> 00:00:30.740
With that, we will have all the tools to write some awesome object oriented programs.

8
00:00:31.520 --> 00:00:34.280
Let's now look at some of the topics we covered in this chapter.

9
00:00:35.550 --> 00:00:36.990
Discuss final variables.

10
00:00:37.350 --> 00:00:41.610
The term final simply implies that something cannot be changed.

11
00:00:41.640 --> 00:00:42.900
That is, it is final.

12
00:00:43.810 --> 00:00:48.750
So if a variables value should be final, that is, it shouldn't change once initialized.

13
00:00:48.760 --> 00:00:50.800
Then it needs to be marked as final.

14
00:00:52.850 --> 00:00:55.550
So final variable basically implies constant.

15
00:00:56.180 --> 00:00:59.990
If it is used with a primitive variable, then the value can never be changed.

16
00:01:00.960 --> 00:01:05.430
But recall that if it is used with a reference variable, then the reference is constant.

17
00:01:05.850 --> 00:01:11.970
That is, the reference always points to the object initialized with and cannot be reassigned.

18
00:01:11.970 --> 00:01:12.930
Another object.

19
00:01:13.800 --> 00:01:16.350
However, contents of that object can be changed.

20
00:01:16.650 --> 00:01:18.150
So you should keep that in mind.

21
00:01:19.200 --> 00:01:21.630
Final variables do not get a default value.

22
00:01:21.990 --> 00:01:28.830
And the reason for that is a final variable gets a default value and is initialized once again, let's

23
00:01:28.830 --> 00:01:30.030
say in a constructor.

24
00:01:30.390 --> 00:01:32.760
Then we are violating its core definition.

25
00:01:34.040 --> 00:01:41.060
And final keyword can be used with any of the three kinds of variables that is instance local or static.

26
00:01:42.990 --> 00:01:44.580
As part of final variables.

27
00:01:44.580 --> 00:01:50.850
We also discussed about constant variables, which are a kind of final variables whose values are known

28
00:01:50.850 --> 00:01:52.410
at compile time itself.

29
00:01:53.640 --> 00:01:57.930
For this reason, they're usually also referred to as compile time constants.

30
00:01:58.260 --> 00:02:02.220
And here is an example, which is variable pi from the math class.

31
00:02:03.260 --> 00:02:07.460
Compile time constants will allow compilers to perform some optimization.

32
00:02:08.180 --> 00:02:15.890
For example, here we have variable x which is assigned marked by but marked by is a compile time constant

33
00:02:15.890 --> 00:02:18.050
and the compiler knows the corresponding value.

34
00:02:18.080 --> 00:02:19.250
3.1 for.

35
00:02:20.080 --> 00:02:27.010
Citizens 3.14 directly to the variable X and stores it in the class file as part of the byte code.

36
00:02:27.960 --> 00:02:34.020
So this eliminates some overhead at runtime as JVM doesn't have to look into math class to make this

37
00:02:34.020 --> 00:02:34.740
assignment.

38
00:02:35.340 --> 00:02:38.490
So compiler is able to perform such an optimization.

39
00:02:40.240 --> 00:02:45.610
And here are some restrictions for a final variable to be qualified as a constant variable.

40
00:02:46.490 --> 00:02:50.330
First is obviously it needs to be declared with the modifier final.

41
00:02:51.320 --> 00:02:51.680
Next.

42
00:02:51.680 --> 00:02:55.550
The data type of variable should be either a parameter or a string.

43
00:02:56.030 --> 00:03:00.200
If you have any other data type, then it will not be a constant variable.

44
00:03:00.470 --> 00:03:02.810
So that's a very important point to remember.

45
00:03:03.880 --> 00:03:07.330
Next variable must be initialized in the declaration statement itself.

46
00:03:07.810 --> 00:03:13.630
That is, it cannot be initialized somewhere else, like in a constructor or in some initialize block.

47
00:03:14.830 --> 00:03:18.880
Finally, the initialization expression itself must be a constant expression.

48
00:03:19.900 --> 00:03:25.420
A constant expression is something whose value is known at compile time itself, and hence it is also

49
00:03:25.420 --> 00:03:28.240
referred to as compile time constant expression.

50
00:03:29.250 --> 00:03:35.160
There are some rules on what expressions qualify as constant expressions, but typically you will see

51
00:03:35.160 --> 00:03:40.860
either primitive literals or string literals as constant expressions like in the case of Mad Dot by.

52
00:03:43.160 --> 00:03:47.360
Next we looked at box primitives and then a related topic called auto boxing.

53
00:03:48.260 --> 00:03:53.390
Auto Boxing, which was introduced in Java five, blurred the distinction between primitive types and

54
00:03:53.390 --> 00:03:54.380
box primitives.

55
00:03:54.980 --> 00:04:00.680
For example, box primitives could be directly assigned primitives, and similarly, primitives could

56
00:04:00.680 --> 00:04:02.810
be directly assigned box primitives.

57
00:04:03.690 --> 00:04:10.410
Also due to auto boxing promoters could be directly added to data structures like URLs, and this helped

58
00:04:10.410 --> 00:04:11.910
in reducing verbosity.

59
00:04:12.950 --> 00:04:19.640
However, one of the effective job items cautions us about some issues that we may run into if box primitives

60
00:04:19.640 --> 00:04:20.959
are used carelessly.

61
00:04:21.709 --> 00:04:25.310
We discuss the issues and have also tried them out in code.

62
00:04:27.140 --> 00:04:32.150
Finally we looked at coding conventions, which are critical for writing clean and professional code.

63
00:04:32.690 --> 00:04:38.330
We first looked at naming conventions and we discussed pretty much all the recommendations that were

64
00:04:38.330 --> 00:04:44.720
suggested by item 56, which stresses on sticking to generally accepted naming conventions.

65
00:04:45.290 --> 00:04:50.720
We discussed both typographical and grammatical naming recommendations, and we should try to follow

66
00:04:50.720 --> 00:04:52.220
them as much as we can.

67
00:04:53.880 --> 00:04:57.450
Next, we looked at conventions for how to structure our programs.

68
00:04:58.560 --> 00:05:04.380
We said when designing our classes, we should follow the single responsibility principle, which simply

69
00:05:04.380 --> 00:05:07.680
means that the class should have only one responsibility.

70
00:05:08.530 --> 00:05:14.290
This would also limit the class size and more importantly, would help us create better abstractions.

71
00:05:14.680 --> 00:05:17.140
That is, we will have loosely coupled classes.

72
00:05:18.390 --> 00:05:23.370
Next with regards to methods, we should try to keep them very small and focused.

73
00:05:23.790 --> 00:05:26.100
They should do only one thing and no more.

74
00:05:27.250 --> 00:05:32.800
We also looked at one recommendation from effective Java, who suggestion was to minimize the scope

75
00:05:32.800 --> 00:05:34.030
of local variables.

76
00:05:34.870 --> 00:05:38.740
The item recommends to declare a local variable where it is first used.

77
00:05:39.900 --> 00:05:46.410
It also recommends to use fun loops instead of loops, as four loops are better at minimizing the scope

78
00:05:46.410 --> 00:05:48.960
of variables and help in preventing box.

79
00:05:50.740 --> 00:05:53.800
Finally we looked at some conventions for writing comments.

80
00:05:54.430 --> 00:05:57.130
Generally, comments should provide overviews of quote.

81
00:05:58.140 --> 00:06:02.400
It is perfectly fine to describe any non-obvious design decisions.

82
00:06:03.430 --> 00:06:05.830
But to avoid writing frequent comments.

83
00:06:05.950 --> 00:06:11.680
And if you are being compelled to write frequent comments, then it means you may want to consider refactoring

84
00:06:11.680 --> 00:06:12.640
some of the stuff.

85
00:06:13.450 --> 00:06:18.550
Usually choose good descriptive method and variable names, and that should serve as documentation.

86
00:06:19.430 --> 00:06:20.630
And that's about it.

87
00:06:20.870 --> 00:06:26.520
We have set all the necessary foundations that we need and we can now move on to more advanced stuff.

88
00:06:27.270 --> 00:06:30.300
Thanks for listening and I will see you in the next chapter.

