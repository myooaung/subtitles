WEBVTT
1
00:00:02.180 --> 00:00:03.070
Hi there.

2
00:00:03.080 --> 00:00:03.680
This is Dana.

3
00:00:04.280 --> 00:00:05.210
And welcome back.

4
00:00:05.240 --> 00:00:07.790
Let's now look at the slicing operations.

5
00:00:08.240 --> 00:00:12.380
The slicing operations are intermediate operations, as we mentioned earlier.

6
00:00:12.410 --> 00:00:17.960
And we are going to look at three operations that fall under the slicing operations and they are distinct

7
00:00:17.960 --> 00:00:19.610
limit and skip.

8
00:00:20.210 --> 00:00:28.010
So slicing operations, as the name implies, are used to slice the string, just like the way we slice

9
00:00:28.010 --> 00:00:28.670
a pizza.

10
00:00:29.360 --> 00:00:33.920
This way we are able to focus on only a particular part of the string.

11
00:00:34.610 --> 00:00:38.150
So slicing operations are mainly for slicing the stream.

12
00:00:38.540 --> 00:00:46.970
So here for this demo I have created two new classes called Stream Operations and Data Extractor within

13
00:00:46.970 --> 00:00:50.000
the package comp semantics, clear functional streams.

14
00:00:50.180 --> 00:00:52.880
So earlier we had this class called Streams Demo.

15
00:00:52.880 --> 00:01:00.110
So these are two new classes and we are going to use a very interesting use case and we will be using

16
00:01:00.110 --> 00:01:03.830
the same use case for the subsequent lectures to OC.

17
00:01:04.040 --> 00:01:06.980
And it's a very good use case for using streams.

18
00:01:07.130 --> 00:01:13.580
So the use case is that we want to extract data from two different web services.

19
00:01:13.820 --> 00:01:20.900
So let's say the two web services are Amazon and Barnes and Noble, and both of them have books and

20
00:01:20.900 --> 00:01:27.290
given a keyword, they have to return the books matching the particular keyword, the titles that match

21
00:01:27.290 --> 00:01:28.610
the particular keyword.

22
00:01:28.790 --> 00:01:31.760
So we are not going to invoke any web services.

23
00:01:31.760 --> 00:01:36.680
So we cannot do that, but we will just mimic that kind of a use case.

24
00:01:37.190 --> 00:01:43.940
And I think in reality also, if we are going to use such kind of web services, we get back some data

25
00:01:43.940 --> 00:01:49.910
in the form of XML or JSON and then we convert them into Java objects.

26
00:01:49.910 --> 00:01:52.610
And we have to we may have to show it to the user.

27
00:01:53.030 --> 00:01:59.300
So we may not store this data in the database, but we may just grab this data from these different

28
00:01:59.300 --> 00:02:02.150
Web services and merge them and show it to the user.

29
00:02:02.150 --> 00:02:05.270
So that can be one kind of a use case.

30
00:02:05.840 --> 00:02:08.000
Sometimes we may have to do something like that.

31
00:02:08.000 --> 00:02:14.360
So in that kind of a scenario, since we are not using the database, so we may have to put everything

32
00:02:14.360 --> 00:02:19.100
in a collection store, everything in a collection, and we may have to manipulate the collection,

33
00:02:19.100 --> 00:02:21.020
and that's where streams come into play.

34
00:02:21.020 --> 00:02:24.500
So it's a very interesting use case for using streams.

35
00:02:25.100 --> 00:02:31.910
So the data extractor here is a class that we have and the data extractor we just have two methods,

36
00:02:32.090 --> 00:02:33.830
one representing Amazon.

37
00:02:33.830 --> 00:02:37.130
So we call it as get from Amazon and we are passing a string.

38
00:02:37.130 --> 00:02:42.350
And the other one is a similar method called Get from Barnes and Noble.

39
00:02:42.440 --> 00:02:49.130
And once again we are passing a string, string, a keyword and then return a list of books here.

40
00:02:49.940 --> 00:02:56.060
And the books book is actually an nested class within this new class called Stream Operations.

41
00:02:56.060 --> 00:02:57.290
So here it is.

42
00:02:57.560 --> 00:02:59.240
It's a static nested class.

43
00:02:59.510 --> 00:03:07.100
And the fields that we have here are ISBN which is along, which is of long type ISBN is a unique identifier

44
00:03:07.100 --> 00:03:07.880
of a book.

45
00:03:07.880 --> 00:03:16.190
It's a 13 digit number and we have title rating of the book, the price of the book, and also the source

46
00:03:16.490 --> 00:03:20.630
source can be either Amazon or Barnes Noble.

47
00:03:20.630 --> 00:03:26.960
And we have the constructor for Initializing the Values, and we have a bunch of getters here for the

48
00:03:26.960 --> 00:03:28.040
different fields.

49
00:03:28.820 --> 00:03:30.110
So that's what we have.

50
00:03:30.230 --> 00:03:34.130
And the actual invocation is performed here from the main method.

51
00:03:34.160 --> 00:03:41.240
So we are invoking here it is, we are invoking Amazon first and we are passing this keyword Java and

52
00:03:41.240 --> 00:03:44.510
the same thing we are doing it we are doing for Barnes and Noble too.

53
00:03:44.540 --> 00:03:47.240
We are invoking the method and passing the same string.

54
00:03:47.570 --> 00:03:54.320
So each of these methods return a list of books and we are accumulating those books into this array

55
00:03:54.320 --> 00:03:55.820
list called books.

56
00:03:56.150 --> 00:04:02.120
So first we are adding the Amazon books into it, and then we are adding the books from Barnes and Noble.

57
00:04:02.120 --> 00:04:07.670
So within these methods we are simply returning the list of books.

58
00:04:07.670 --> 00:04:10.250
In fact, the keyword is also not used here.

59
00:04:10.340 --> 00:04:15.320
So we just we are just creating ten instances of books in the Amazon method.

60
00:04:15.470 --> 00:04:18.560
And we, you can see that we are passing the data here.

61
00:04:18.560 --> 00:04:27.020
So the first one is the ISBN and it's a long so we are passing along and for the title, I'm just to

62
00:04:27.020 --> 00:04:31.310
keep it simple, I'm just using the simple names like Java one, two, three and so on.

63
00:04:31.400 --> 00:04:39.200
And then we have the rating here and we also have the price and the source name, which is Amazon.

64
00:04:39.500 --> 00:04:43.970
So all of these are collected into a list here.

65
00:04:43.970 --> 00:04:48.530
So we are using our resort as a list and we are retaining the list of books.

66
00:04:48.860 --> 00:04:51.320
So the next static method is the Barnes and Noble.

67
00:04:51.320 --> 00:04:57.380
And just like the Amazon method, we have seven elements that we are retaining and the first four are

68
00:04:57.380 --> 00:04:58.670
identical books.

69
00:04:59.030 --> 00:05:01.430
But since it's from Barnes and Noble, we will pass.

70
00:05:01.980 --> 00:05:08.430
And for the source name and it has its own price because the price need not be same for the same book

71
00:05:08.430 --> 00:05:11.600
into different sources, and it can have its own rating too.

72
00:05:11.610 --> 00:05:18.600
So for the Java one, it has a rating of 3.9 in this source and the price of 20, but here it has four

73
00:05:18.600 --> 00:05:23.910
and a price of 25 and ESPN is also kept similar in both for both the books.

74
00:05:23.910 --> 00:05:28.680
If the books are identical because it has been, as I said earlier, uniquely identifies a book.

75
00:05:28.680 --> 00:05:35.130
So the first four books are also present in Amazon and the last three books are unique to or unique

76
00:05:35.130 --> 00:05:36.030
to Barnes and Noble.

77
00:05:36.030 --> 00:05:38.100
So once again, we are returning a list here.

78
00:05:38.100 --> 00:05:41.370
So that's the use case that we are going to use.

79
00:05:42.060 --> 00:05:47.130
And the first thing that we are going to do is we are invoking this method called slice and passing

80
00:05:47.130 --> 00:05:48.120
the books.

81
00:05:48.120 --> 00:05:51.330
So we have got the books from both the sources and we are passing it.

82
00:05:51.780 --> 00:05:56.490
And here is the slice method, a template method, and we just have the print statement here.

83
00:05:56.700 --> 00:05:58.260
So it takes the list of books.

84
00:05:58.260 --> 00:06:06.390
And what it means to do is it needs to print at most five distinct books with a rating greater than

85
00:06:06.390 --> 00:06:07.740
or equal to 4.5.

86
00:06:08.370 --> 00:06:10.140
So that's what we need to do here.

87
00:06:10.380 --> 00:06:14.910
So we want distinct because there are some books that are common to both the sources.

88
00:06:15.180 --> 00:06:22.350
Now in the database world, you would use a query like this, you would say select distinct of ISBN,

89
00:06:22.350 --> 00:06:28.110
for instance, from book where rating is greater than or equal to 4.5.

90
00:06:28.110 --> 00:06:33.330
And we would use this function called limit, we would use this function called limit.

91
00:06:33.330 --> 00:06:36.240
And we will say because we need only the five books.

92
00:06:36.240 --> 00:06:39.570
So we are saying we only need the five books.

93
00:06:39.570 --> 00:06:42.270
So that's how we specify in database.

94
00:06:42.270 --> 00:06:47.610
We will use this clause called limit and to get the distinct books, we will use the distinct function.

95
00:06:48.060 --> 00:06:56.190
So even in in streams we have a method called distinct in order to remove the duplicates to get only

96
00:06:56.190 --> 00:06:57.270
the unique values.

97
00:06:57.540 --> 00:07:02.310
And we also have a method called limit in order to get only five items.

98
00:07:02.520 --> 00:07:05.670
So the terminology is also kept similar here.

99
00:07:05.820 --> 00:07:07.290
So that's very nice.

100
00:07:07.290 --> 00:07:10.980
So let's go ahead and implement the operations.

101
00:07:10.980 --> 00:07:14.130
So the collection is books, so let's just say books.

102
00:07:14.990 --> 00:07:17.810
And let's invoke the stream method.

103
00:07:18.750 --> 00:07:25.220
So this is a pipeline that we are going to bear and the rating has to be greater than or equal to 4.5.

104
00:07:25.230 --> 00:07:26.520
So let's filter.

105
00:07:28.440 --> 00:07:30.360
Let's define our lambda.

106
00:07:31.270 --> 00:07:33.060
So each element is a book.

107
00:07:33.070 --> 00:07:35.890
So we have a method called Rating.

108
00:07:36.910 --> 00:07:39.460
In the book class, master class.

109
00:07:39.460 --> 00:07:41.650
So we'll just say greater than.

110
00:07:43.240 --> 00:07:43.530
Okay.

111
00:07:44.050 --> 00:07:45.670
Now, let's gradually build this.

112
00:07:45.670 --> 00:07:47.560
So first, let's put a map here.

113
00:07:47.830 --> 00:07:55.450
So we have the filter method where we are applying this predicate so that only if the book is greater

114
00:07:55.450 --> 00:07:58.540
than or equal to 4.5, then it will be passed to the map method.

115
00:07:58.540 --> 00:08:03.010
And in the map method let's transform the book into a string.

116
00:08:03.190 --> 00:08:04.600
Let's just get the title.

117
00:08:04.720 --> 00:08:07.420
So let's define a function.

118
00:08:07.420 --> 00:08:15.850
We know that the map takes a function, so it will take a book as an input and it will return the title.

119
00:08:17.830 --> 00:08:18.810
And we need to print.

120
00:08:18.820 --> 00:08:28.390
So let's use a for each this method here and the action is system not out.

121
00:08:31.510 --> 00:08:36.970
So we can use a method reference here and instead of using a lambda we can use a method reference because

122
00:08:36.970 --> 00:08:38.289
there is already a method.

123
00:08:38.289 --> 00:08:43.570
So for each is the terminal operation and these two are intermediate operations.

124
00:08:44.049 --> 00:08:47.110
So let's return an instance upstream.

125
00:08:47.110 --> 00:08:47.860
We know that.

126
00:08:48.310 --> 00:08:49.540
So if you print it.

127
00:08:49.540 --> 00:08:53.260
So we have all of these here.

128
00:08:56.030 --> 00:08:58.310
But as you can see, there are some duplicates here.

129
00:08:58.340 --> 00:09:04.810
Java three, Java three here, Java four, because they are common to both the sources.

130
00:09:04.820 --> 00:09:08.720
So now we need to add a method called distinct.

131
00:09:09.170 --> 00:09:15.040
So there is a method called distinct in the stream interface and you can look up later.

132
00:09:15.050 --> 00:09:20.840
So this is a stream method, but the distinct method is going to remove the duplicates and in order

133
00:09:20.840 --> 00:09:25.010
to remove the duplicates, it is going to use equals method.

134
00:09:25.310 --> 00:09:32.300
It's going to it's going to use the equals method and it's going to invoke it on each of the books.

135
00:09:32.870 --> 00:09:36.910
So equals method, we can define an equals method.

136
00:09:36.920 --> 00:09:42.570
So the criteria can be that we can use the ISBN to filter out the duplicates.

137
00:09:42.590 --> 00:09:47.480
So let's go ahead and add the equals method in the book class here.

138
00:09:48.200 --> 00:09:49.400
So let's say.

139
00:09:50.480 --> 00:09:58.310
Going to source, let's say, generate hash code and equals recall from effective Java that if you are

140
00:09:58.310 --> 00:10:01.940
going to override equals, we also need to override hashCode method.

141
00:10:01.940 --> 00:10:03.080
So let's do that.

142
00:10:03.560 --> 00:10:08.930
But let's just use only ISBN, ISBN because ISBN in uniquely identifies the box.

143
00:10:08.930 --> 00:10:10.310
So let's do that.

144
00:10:10.310 --> 00:10:13.400
So now we have hash code and equals.

145
00:10:13.430 --> 00:10:19.640
Let's also add the to override the two strings method which will come in handy later as we will see.

146
00:10:20.300 --> 00:10:27.590
So let's just source once again right click source and generate two string and for two string.

147
00:10:27.590 --> 00:10:29.270
Let's use all of the fields.

148
00:10:30.620 --> 00:10:31.420
So that's all we have.

149
00:10:31.430 --> 00:10:38.570
So the distinct method would use this equals and it would filter out those books that are duplicates

150
00:10:38.570 --> 00:10:40.430
and it's going to use ISBN for that.

151
00:10:41.210 --> 00:10:43.880
So let's go ahead and run it again.

152
00:10:45.460 --> 00:10:46.040
There you go.

153
00:10:46.060 --> 00:10:49.240
So we have only unique elements now.

154
00:10:49.370 --> 00:10:54.490
Now the goal is and all of them have a rating of greater than or equal to 4.5.

155
00:10:54.520 --> 00:10:58.390
You can check later once you download the file.

156
00:10:59.270 --> 00:11:00.200
So let's go ahead.

157
00:11:00.200 --> 00:11:03.110
And we also need the top five elements.

158
00:11:03.110 --> 00:11:06.080
So let's say limit and limit.

159
00:11:06.080 --> 00:11:07.670
Well, take the size.

160
00:11:08.030 --> 00:11:08.780
So.

161
00:11:09.700 --> 00:11:13.810
Now if you run it, we will see that we have only five elements here.

162
00:11:14.680 --> 00:11:15.850
This is the output.

163
00:11:15.850 --> 00:11:20.560
So it's we are printing the five distinct books with the rating greater than or equal to 4.5.

164
00:11:21.010 --> 00:11:25.990
Now, after the five books are retrieved, we are printing them.

165
00:11:26.020 --> 00:11:32.620
The sixth book is not going to be printed, so limit is called as a short circuit operation.

166
00:11:32.650 --> 00:11:38.410
So it's what it's going to do is it's going to abort the pipeline after passing five elements.

167
00:11:38.650 --> 00:11:40.320
So it passes the five items.

168
00:11:40.330 --> 00:11:43.630
And after that, it's not going to pull any more elements.

169
00:11:43.630 --> 00:11:46.630
So it's not going to even process any more elements.

170
00:11:46.630 --> 00:11:51.400
It's not going to for the first five elements, it's going to seek the elements from the stream.

171
00:11:51.400 --> 00:11:52.930
So it's going to pull the elements.

172
00:11:52.930 --> 00:11:56.350
But after five elements, it's not going to do that anymore.

173
00:11:56.740 --> 00:11:57.860
So that's the limit.

174
00:11:57.880 --> 00:12:00.550
There is also another operation called Skip.

175
00:12:00.550 --> 00:12:03.280
So which does the exact opposite of?

176
00:12:04.310 --> 00:12:05.130
Off limit.

177
00:12:05.150 --> 00:12:08.540
Which means that it's going to skip the first five elements.

178
00:12:08.990 --> 00:12:16.550
And after that, from the sixth element onwards, it's going to pass it to the downstream methods,

179
00:12:16.550 --> 00:12:18.260
to the downstream operations.

180
00:12:18.260 --> 00:12:19.970
So let's do that.

181
00:12:20.910 --> 00:12:23.280
So it's going to skip the first file here.

182
00:12:25.990 --> 00:12:26.410
There you go.

183
00:12:26.410 --> 00:12:28.200
So you have the other elements.

184
00:12:28.210 --> 00:12:30.550
It's not going to print the first fall.

185
00:12:31.150 --> 00:12:32.590
So that's the exact opposite.

186
00:12:32.590 --> 00:12:34.000
Sometimes we might want that.

187
00:12:34.000 --> 00:12:36.750
We might want to skip certain number of elements.

188
00:12:36.760 --> 00:12:42.760
For instance, if you're getting some data from a source and the first three elements or the first three

189
00:12:42.760 --> 00:12:44.350
items could be some advertised events.

190
00:12:44.350 --> 00:12:46.120
So you might want to skip them.

191
00:12:46.270 --> 00:12:48.940
So that's when it will come in handy.

192
00:12:48.940 --> 00:12:51.100
But Skip is not.

193
00:12:51.130 --> 00:12:57.250
It's still going to look at the first five elements, but it's just that it's not going to pass them

194
00:12:57.250 --> 00:13:02.710
to the downstream operations, so it's not going to randomly jump to the fifth item.

195
00:13:02.710 --> 00:13:05.290
It is still going to pull each of the elements.

196
00:13:05.710 --> 00:13:07.180
Let's actually look at that.

197
00:13:07.180 --> 00:13:15.010
So there is a method called peak which can be used to peek into the stream so you can actually see what

198
00:13:15.010 --> 00:13:16.510
the current stream element is.

199
00:13:16.510 --> 00:13:17.560
So let's do that.

200
00:13:18.300 --> 00:13:21.900
So of course, the input element is the book.

201
00:13:25.320 --> 00:13:26.850
Let's print the title.

202
00:13:29.970 --> 00:13:31.140
Let's just run this.

203
00:13:32.460 --> 00:13:33.270
So.

204
00:13:33.780 --> 00:13:34.830
So here it is.

205
00:13:34.830 --> 00:13:37.790
So you can look at the items here.

206
00:13:37.800 --> 00:13:44.400
So we have the the peak, but it's going to pass after it skips the first five elements.

207
00:13:44.400 --> 00:13:49.230
Only then it's going to pass it to the downstream to the downstream operations.

208
00:13:49.440 --> 00:13:56.550
So you can see that it's not doing any random access, but it is still accessing all of the elements.

209
00:13:56.940 --> 00:13:59.910
So that's what that's what the Skip Skip is doing.

210
00:13:59.910 --> 00:14:03.720
And after Skip also, you can still use limit or limit operation.

211
00:14:03.720 --> 00:14:05.940
So you can have another limit after skip.

212
00:14:05.940 --> 00:14:07.080
You can also do that.

213
00:14:07.680 --> 00:14:14.820
So that's those are the three operations distinct skip and limit list in case more of like a filter.

214
00:14:15.000 --> 00:14:22.050
But skip and limit actually makes sense when we say when we call them as slice operations.

215
00:14:22.200 --> 00:14:24.660
So that's that's what we have.

216
00:14:24.660 --> 00:14:27.090
And we can also peek here.

217
00:14:27.090 --> 00:14:31.050
Let's also do let's let me comment this and let's look at the output here.

218
00:14:31.650 --> 00:14:32.280
We.

219
00:14:33.910 --> 00:14:36.070
It's just rating here.

220
00:14:47.230 --> 00:14:48.240
So here it is.

221
00:14:48.250 --> 00:14:55.810
So this is what is being printed by the peak, and then the element is being passed to the downstream

222
00:14:55.810 --> 00:14:56.620
operation.

223
00:14:56.770 --> 00:14:59.020
So we are only processing the first five.

224
00:14:59.020 --> 00:15:00.310
That's what we can see.

225
00:15:00.310 --> 00:15:05.020
And then the downstream operation will just print only the title, not the rating.

226
00:15:06.290 --> 00:15:11.420
So next thing is I just want to show the current operations we will be looking at correct.

227
00:15:11.450 --> 00:15:12.130
Later.

228
00:15:12.140 --> 00:15:18.140
But just I just want to show at least one of the functions because collect is an important method,

229
00:15:18.140 --> 00:15:20.030
although it's not related to slicing.

230
00:15:20.090 --> 00:15:24.590
So let's just say we want to collect this data into a list.

231
00:15:25.070 --> 00:15:28.820
Collect is a terminal operation, so we need to remove the current one.

232
00:15:32.210 --> 00:15:33.170
And that is.

233
00:15:34.820 --> 00:15:44.090
A factory class called collectors and we will set to list so the for each method it returns a void but

234
00:15:44.090 --> 00:15:46.430
this one actually returns a list.

235
00:15:46.460 --> 00:15:48.280
This is how this is how you would do.

236
00:15:48.290 --> 00:15:51.950
So you're going to collect the stream into a list.

237
00:15:53.130 --> 00:15:55.530
So this would be less of a strain.

238
00:15:56.390 --> 00:16:00.440
Because we have transformed the map has transformed the book into.

239
00:16:01.010 --> 00:16:01.930
Interesting.

240
00:16:01.940 --> 00:16:07.880
So the input was a stream of book which is which got converted into a stream of string.

241
00:16:11.890 --> 00:16:13.030
Any tempo of this.

242
00:16:14.700 --> 00:16:15.720
Kosciuszko.

243
00:16:31.570 --> 00:16:31.990
That's it.

244
00:16:31.990 --> 00:16:34.000
So we are printing the books here.

245
00:16:34.480 --> 00:16:36.130
So that's how we are collecting.

246
00:16:36.130 --> 00:16:38.380
So we are returning a result here.

247
00:16:38.380 --> 00:16:40.540
We are getting a list of string and we are doing that.

248
00:16:40.840 --> 00:16:42.460
So that's the collect method.

249
00:16:42.460 --> 00:16:45.010
So we will look at it later again.

250
00:16:46.520 --> 00:16:52.250
Only thing I want to say is filter actually takes an input and it produces a same type of input.

251
00:16:52.280 --> 00:16:57.590
Whereas a map can take an input like a stream and it will produce a stream.

252
00:16:57.620 --> 00:17:01.210
It can produce a stream of another type, just like the way we have seen.

253
00:17:01.220 --> 00:17:06.940
So let me just also make it a little bit more clear by doing this.

254
00:17:06.950 --> 00:17:08.390
So let's just take.

255
00:17:10.260 --> 00:17:11.520
This part here.

256
00:17:14.940 --> 00:17:17.430
So this is going to limit.

257
00:17:17.430 --> 00:17:19.920
So this is the limit is also an intermediate operation.

258
00:17:19.920 --> 00:17:24.089
So it's going to return a stream of books.

259
00:17:28.870 --> 00:17:29.090
Okay.

260
00:17:29.110 --> 00:17:30.040
Now we can.

261
00:17:32.280 --> 00:17:35.010
Invoke the map method on this.

262
00:17:46.950 --> 00:17:48.870
And this would return a stream of string.

263
00:17:48.870 --> 00:17:53.400
So it takes a stream of book under it and it returns a stream of string.

264
00:17:54.150 --> 00:17:55.710
So let's call it as.

265
00:17:57.420 --> 00:17:58.290
I go straight.

266
00:18:02.140 --> 00:18:04.110
And we can invoke the each on this.

267
00:18:04.120 --> 00:18:05.680
So for each is here.

268
00:18:06.930 --> 00:18:08.040
She's got to this.

269
00:18:08.990 --> 00:18:14.700
So we are just breaking it into individual components instead of chaining them all together.

270
00:18:14.720 --> 00:18:17.270
So it just gives you a better clarity.

271
00:18:18.410 --> 00:18:20.840
So this is the declarative style programming.

272
00:18:20.840 --> 00:18:23.900
So let me just comment the entire thing here.

273
00:18:30.870 --> 00:18:31.370
There you go.

274
00:18:31.380 --> 00:18:32.610
So we have the output.

275
00:18:33.360 --> 00:18:39.570
So the map method here essentially takes a stream of book and it returns a stream of string.

276
00:18:39.570 --> 00:18:41.100
So it need not be of the same type.

277
00:18:41.670 --> 00:18:42.800
So that's about it.

278
00:18:42.810 --> 00:18:46.860
So that's the slicing operations and that's it.

279
00:18:46.860 --> 00:18:49.140
And thank you and happy coding.

