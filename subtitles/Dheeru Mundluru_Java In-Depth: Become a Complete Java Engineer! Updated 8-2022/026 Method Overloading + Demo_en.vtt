WEBVTT
1
00:00:02.130 --> 00:00:02.980
Hi there.

2
00:00:03.000 --> 00:00:04.200
This is De La Rue.

3
00:00:04.200 --> 00:00:05.160
And welcome back.

4
00:00:05.310 --> 00:00:08.460
Let's now look at something called method overloading.

5
00:00:09.000 --> 00:00:16.110
Sometimes it makes sense to maintain multiple versions of the same method within the same class.

6
00:00:16.440 --> 00:00:22.770
And by multiple versions we mean that the methods will have the same name but would take different input

7
00:00:22.770 --> 00:00:23.280
data.

8
00:00:23.790 --> 00:00:25.380
That is only the method.

9
00:00:25.380 --> 00:00:27.030
Parameters would differ.

10
00:00:27.630 --> 00:00:31.050
And this feature is referred to as method overloading.

11
00:00:31.780 --> 00:00:38.230
In some scenarios, providing overloaded methods could be an important requirement of the software,

12
00:00:38.500 --> 00:00:45.130
while in some other scenarios they may simply serve as convenience to the clients clients being the

13
00:00:45.130 --> 00:00:46.450
method in workers.

14
00:00:48.320 --> 00:00:55.430
So that method overloading multiple methods within the same class have same name, but they have different

15
00:00:55.430 --> 00:00:56.540
parameter lists.

16
00:00:57.390 --> 00:01:01.740
So to overload a method, you must change the parameter list.

17
00:01:02.640 --> 00:01:08.820
And changing the parameter list would imply that the number of the parameters or the parameter types

18
00:01:08.820 --> 00:01:10.980
are both would be different.

19
00:01:12.560 --> 00:01:13.070
Changing.

20
00:01:13.070 --> 00:01:15.350
Only the return type does not work.

21
00:01:16.760 --> 00:01:20.810
On both instance and static methods can be overloaded.

22
00:01:22.740 --> 00:01:28.980
And here are some valid method overloading examples where the methods have the same name but different

23
00:01:28.980 --> 00:01:30.000
parameter lists.

24
00:01:30.660 --> 00:01:37.260
Note that in the second and third example, the order of the method parameter types has changed, and

25
00:01:37.260 --> 00:01:41.070
that's good enough to make it a valid method overloading example.

26
00:01:41.640 --> 00:01:47.610
In the second example we have int followed by car, whereas in the third we have car followed by the

27
00:01:47.610 --> 00:01:48.180
end.

28
00:01:49.360 --> 00:01:52.960
Now, for example, is interesting and you need to keep it in mind.

29
00:01:53.350 --> 00:01:59.740
It has short as a parameter type, while the first example has it as parameter type.

30
00:02:00.400 --> 00:02:08.289
That is, both are integer data types, but the two methods still qualify as valid examples of method

31
00:02:08.289 --> 00:02:09.070
overloading.

32
00:02:09.759 --> 00:02:11.840
So the number of parameters is same.

33
00:02:11.860 --> 00:02:17.920
It's just that the parameter type has changed, but they are still compatible method parameter types,

34
00:02:17.950 --> 00:02:21.190
but still it would qualify as a valid example.

35
00:02:21.550 --> 00:02:26.620
So it would be valid as long as the parameters are not exactly identical.

36
00:02:27.540 --> 00:02:32.490
Now let's look at a few method invocation statements for this particular example.

37
00:02:34.000 --> 00:02:40.660
Now, if this is a method invocation statement, then it would invoke the second overloaded method as

38
00:02:40.660 --> 00:02:43.570
first argument is and while second is can.

39
00:02:45.160 --> 00:02:48.910
And if we have this, then this will invoke the first method.

40
00:02:49.150 --> 00:02:52.570
And that's because 2000 is an intellectual.

41
00:02:52.810 --> 00:02:56.440
And the first method also accepts an INT data type.

42
00:02:56.980 --> 00:03:03.910
So even though fourth method has short as data type and 1000 can be assigned to short but still fast

43
00:03:03.910 --> 00:03:06.760
one is picked as it is an exact match.

44
00:03:07.270 --> 00:03:13.300
So the compiler tries to find a method having parameters with the exact same data type.

45
00:03:15.340 --> 00:03:21.850
But if we have something like this where the variable B is a byte and B is the argument in the method

46
00:03:21.850 --> 00:03:22.600
invocation.

47
00:03:23.570 --> 00:03:29.210
Then in this case, the last method which shot as the method parameter type would be invoked.

48
00:03:29.810 --> 00:03:34.820
In this case, compiler would first try to find a method with the same parameter.

49
00:03:35.060 --> 00:03:39.320
That is, if there is an update profile method with bypass as parameter type.

50
00:03:39.680 --> 00:03:46.310
And since it's not there, then it would see if there is a method that has the next larger data type,

51
00:03:46.310 --> 00:03:47.870
which would be the last method.

52
00:03:48.440 --> 00:03:54.740
So since there is no exact match, the compiler is picking a method that has a compatible data type,

53
00:03:55.070 --> 00:03:58.940
but the compatible data type should be most specific to.

54
00:03:59.680 --> 00:04:06.040
So even though both first and last versions have compatible data types, the compiler picks the last

55
00:04:06.040 --> 00:04:09.610
one as short as more specific than end.

56
00:04:10.000 --> 00:04:13.810
That is, it is the next larger data type after byte.

57
00:04:15.100 --> 00:04:19.740
Notice that I'm saying compiler picks what method needs to be invoked.

58
00:04:20.250 --> 00:04:27.450
And that's because during compilation process, compiler writes into the byte code about the method

59
00:04:27.450 --> 00:04:31.170
that needs to be invoked at runtime by JVM.

60
00:04:31.710 --> 00:04:37.890
And this process of compiler picking the method to be invoked and subsequently JVM using that information

61
00:04:37.890 --> 00:04:45.090
at runtime is called method binding and that is something we will discuss later in a different section

62
00:04:45.090 --> 00:04:47.190
as it involves more discussion.

63
00:04:48.250 --> 00:04:53.920
Notice that variable B here is initialized with a smaller value 50 rather than 1000.

64
00:04:53.950 --> 00:04:57.880
And that's because 1000 does not fit into bytes range.

65
00:05:00.000 --> 00:05:05.910
Now let's look at a few invalid overloading examples to let's say we have this method definition.

66
00:05:07.830 --> 00:05:14.520
Now, if we add this new method within the same class, it would not be a valid method overload.

67
00:05:15.090 --> 00:05:18.630
And that's because only the return type is different.

68
00:05:19.020 --> 00:05:23.700
So this is illegal and the compiler would report that we have a duplicate method.

69
00:05:24.060 --> 00:05:25.950
So we are going to have a compilation error.

70
00:05:27.640 --> 00:05:30.160
And here is an obvious invalid example.

71
00:05:30.160 --> 00:05:34.120
Simply changing only parameter name will not work here.

72
00:05:34.120 --> 00:05:35.650
The parameter name is ID.

73
00:05:35.680 --> 00:05:38.470
Well, the first method had it as new ID.

74
00:05:39.970 --> 00:05:44.290
Adding a static method with the same method signature will also not work.

75
00:05:44.890 --> 00:05:48.190
That is the first method in this case is an instance method.

76
00:05:48.220 --> 00:05:50.350
While this is a static method.

77
00:05:51.260 --> 00:05:57.290
So in all of the examples, we get a compiler error saying that a duplicate method is added.

78
00:05:57.920 --> 00:06:05.990
So to have valid overloaded methods, the only requirement is parameter list must be different and the

79
00:06:05.990 --> 00:06:07.160
method name should be same.

80
00:06:07.700 --> 00:06:09.890
So that's about method overloading.

81
00:06:10.010 --> 00:06:13.070
Now let's go ahead and do a quick demo of it.

82
00:06:15.550 --> 00:06:15.810
Okay.

83
00:06:15.850 --> 00:06:21.340
Here we are in the Basics Demo class, and in one of the earlier lectures we wrote this method called

84
00:06:21.340 --> 00:06:27.790
Go, and that was when demonstrating pass by value mechanism for object references.

85
00:06:28.120 --> 00:06:32.260
So let's go ahead and use this method in this demo also.

86
00:06:32.260 --> 00:06:35.110
So let's go ahead and overload this method.

87
00:06:35.290 --> 00:06:38.320
So here the parameter type is int array.

88
00:06:38.560 --> 00:06:40.420
Let's write two more methods.

89
00:06:41.080 --> 00:06:47.230
One will take an int as method parameter type, while the other a shot.

90
00:06:47.230 --> 00:06:50.360
So let me just change this to end.

91
00:06:50.470 --> 00:06:55.660
Let me call it AI and let me change this to shot.

92
00:06:56.320 --> 00:07:00.730
So it is the similar example that we have seen in the slide.

93
00:07:01.270 --> 00:07:02.470
Let me call it S.

94
00:07:04.390 --> 00:07:06.670
And let me just copy this here.

95
00:07:19.300 --> 00:07:19.810
Okay.

96
00:07:19.810 --> 00:07:22.720
So two new overloaded methods have been added.

97
00:07:22.720 --> 00:07:25.510
So we have three methods, three overloaded methods now.

98
00:07:25.690 --> 00:07:32.260
So here we are already invoking this particular the first method here using an array.

99
00:07:33.130 --> 00:07:36.460
Now let's say go of 1000.

100
00:07:36.460 --> 00:07:39.400
We have seen this in the slide there.

101
00:07:39.400 --> 00:07:41.290
The method name was update profile.

102
00:07:41.290 --> 00:07:42.490
But here it is.

103
00:07:42.490 --> 00:07:43.090
Go.

104
00:07:43.600 --> 00:07:51.130
And let's also define this variable called B, which is of type byte.

105
00:07:52.600 --> 00:07:54.340
I'm let's say, go off be.

106
00:07:54.820 --> 00:07:58.750
So in this case, it would be the first method that gets invoked here.

107
00:07:58.750 --> 00:08:02.320
The second go method gets invoked because thousand is an intellectual.

108
00:08:02.770 --> 00:08:04.600
And the compiler would pick this one.

109
00:08:04.750 --> 00:08:06.730
And the third one is byte.

110
00:08:06.910 --> 00:08:08.680
So but byte doesn't go off.

111
00:08:08.680 --> 00:08:09.670
Byte is not there.

112
00:08:09.670 --> 00:08:14.110
So it's going to pick the the last method, which is the most specific one.

113
00:08:14.590 --> 00:08:18.970
It's a compatible type and it has the next larger data type.

114
00:08:18.970 --> 00:08:21.460
So let's just go ahead and compile and run this.

115
00:08:25.340 --> 00:08:26.240
Here it is.

116
00:08:26.600 --> 00:08:33.140
So when we invoked for the first time, it invoked the method that has the array as the parameter type.

117
00:08:33.230 --> 00:08:40.580
Then when we passed 1000, it invoked the second one here go off and I and for the last one it invoked

118
00:08:40.610 --> 00:08:42.350
go off shot as.

119
00:08:42.799 --> 00:08:43.789
So that's it.

120
00:08:43.880 --> 00:08:50.480
I would suggest just go ahead and type all of these methods and try it out and also try the invalid

121
00:08:50.480 --> 00:08:52.910
examples which we have seen in the slide.

122
00:08:53.690 --> 00:08:58.250
Now let me also show you a couple of examples in the Java library itself.

123
00:08:58.580 --> 00:09:00.970
So this is the print stream class.

124
00:09:00.980 --> 00:09:04.850
And print stream class is what is being used.

125
00:09:04.850 --> 00:09:10.520
When we invoke system dot dot println, the println is part of the print stream class.

126
00:09:10.880 --> 00:09:15.050
And let me show you the different println methods.

127
00:09:15.050 --> 00:09:19.520
As you can see, there are different println methods and these are all overloaded methods.

128
00:09:19.850 --> 00:09:25.400
So if you invoke println with a car as argument, then this method gets invoked.

129
00:09:25.430 --> 00:09:27.950
If you pass a double, then this gets invoked.

130
00:09:28.340 --> 00:09:30.300
And if you pass a string, then this gets invoked.

131
00:09:30.320 --> 00:09:35.600
So that's where the print stream and another class here is called as arrays, which we will see in the

132
00:09:35.600 --> 00:09:37.370
collections framework section.

133
00:09:37.610 --> 00:09:38.420
So.

134
00:09:39.660 --> 00:09:40.080
Here.

135
00:09:40.080 --> 00:09:41.970
Also, it has a lot of methods.

136
00:09:44.590 --> 00:09:48.900
And here you can see a bunch of sort methods which are all overloaded.

137
00:09:48.910 --> 00:09:53.650
So this one takes a float array and this one takes float array along with two other end.

138
00:09:53.740 --> 00:09:55.210
This one takes an end array.

139
00:09:55.210 --> 00:10:02.110
So this method is responsible for sorting the elements of the array, whether it's in ascending order

140
00:10:02.110 --> 00:10:03.310
or in certain order.

141
00:10:03.520 --> 00:10:11.020
So all of these are also overloaded methods and they are needed for the for our programs.

142
00:10:11.020 --> 00:10:14.470
And so the designers have exposed all of these methods.

143
00:10:14.770 --> 00:10:18.400
So that's with the Java Library and that's what method overloading.

144
00:10:18.430 --> 00:10:19.210
Thank you.

145
00:10:19.210 --> 00:10:20.650
I'll see you in the next lecture.

