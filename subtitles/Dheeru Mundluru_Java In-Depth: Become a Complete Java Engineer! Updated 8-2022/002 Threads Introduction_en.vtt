WEBVTT
1
00:00:00.870 --> 00:00:06.840
So let's get started by learning about what threats are and how they can be created in Java.

2
00:00:07.650 --> 00:00:09.780
Demo will be done in the follow up lesson.

3
00:00:11.190 --> 00:00:14.970
When there were no operating systems, computers ran a single program.

4
00:00:15.770 --> 00:00:19.370
With just all the expensive, scarce system resources.

5
00:00:19.370 --> 00:00:21.470
And that was very inefficient.

6
00:00:22.770 --> 00:00:27.750
Operating systems then evolved to allow multiple processes to run concurrently.

7
00:00:28.320 --> 00:00:30.930
And the process is nothing but a running program.

8
00:00:31.560 --> 00:00:33.450
That is a program instance.

9
00:00:34.420 --> 00:00:39.580
And each process gets its own resources, such as memory file handles and so on, just like the way

10
00:00:39.580 --> 00:00:43.510
our VM gets its own memory from the underlying operating system.

11
00:00:44.600 --> 00:00:47.450
And concurrency is achieved through multitasking.

12
00:00:48.370 --> 00:00:52.810
Which is nothing but simply switching the CPU from one process to another.

13
00:00:53.700 --> 00:00:56.850
So multitasking does not imply parallelism.

14
00:00:57.240 --> 00:01:03.690
As CPU is being switched from one process to another, that is at any given instance of time.

15
00:01:03.720 --> 00:01:07.920
CPU is still executing instructions from a single process.

16
00:01:08.970 --> 00:01:15.420
However, the switching happens so fast that it gives us an illusion of parallelism, which is possible

17
00:01:15.420 --> 00:01:17.550
only on a multiprocessor system.

18
00:01:18.940 --> 00:01:23.680
And such scheduling is done for better resource utilization, as we discussed earlier.

19
00:01:24.500 --> 00:01:28.940
Some concerns, such as resource utilization, also led to the development of threats.

20
00:01:30.540 --> 00:01:36.330
And the thread is essentially a single sequential flow of control within a process.

21
00:01:36.840 --> 00:01:43.110
That is, the statements within a thread are executed sequentially and a thread is part of a process.

22
00:01:44.200 --> 00:01:47.440
And each thread is basically a lightweight process.

23
00:01:48.410 --> 00:01:50.710
The process can have multiple threads.

24
00:01:51.810 --> 00:01:58.140
And those threats share the resources that a process is allocated, like the memory and file handles.

25
00:01:58.740 --> 00:02:03.720
But each thread has its own PC, own stack and local variables.

26
00:02:06.140 --> 00:02:10.160
And benefits of threats include exploiting multiple processors.

27
00:02:10.580 --> 00:02:17.210
That is, the threats you create can run on multiple processors and thus achieving parallelism and threats

28
00:02:17.210 --> 00:02:20.240
also enable creation of loosely coupled designs.

29
00:02:21.150 --> 00:02:26.730
And they also give better throughput even in single CPU machines when blocking tasks are involved.

30
00:02:28.390 --> 00:02:29.800
And there are two types of threats.

31
00:02:29.830 --> 00:02:33.460
One is demon threats, while the other is non demon threats.

32
00:02:34.460 --> 00:02:39.290
Demon threats are background threads which are useful for tasks such as garbage collection.

33
00:02:39.890 --> 00:02:41.870
So these threads run in the background.

34
00:02:43.120 --> 00:02:46.660
Well, not even threats are created from within the application.

35
00:02:47.140 --> 00:02:50.200
That is, these are the threads which our programs create.

36
00:02:51.760 --> 00:02:58.090
Also when we start our program, Gvm also creates a thread to run the main method and it is referred

37
00:02:58.090 --> 00:02:59.260
to as main thread.

38
00:02:59.800 --> 00:03:02.290
So main thread is a non demon thread.

39
00:03:02.980 --> 00:03:06.910
And so in a Java program there is always at least one thread.

40
00:03:07.090 --> 00:03:10.900
So if we are not creating any threads then there is at least the main thread.

41
00:03:12.020 --> 00:03:17.000
And G.M. will not terminate if there is at least one non demon threat which is running.

42
00:03:18.550 --> 00:03:22.090
Now to understand threads, let's consider a simple analogy.

43
00:03:22.630 --> 00:03:27.850
Let's just think that this box is a construction site where we have these workers.

44
00:03:28.450 --> 00:03:34.390
Now we can think of this construction site as a process and these workers as threats in the process.

45
00:03:34.960 --> 00:03:39.040
Now we know that these workers are useless unless we give them some work.

46
00:03:39.640 --> 00:03:41.440
So we need to have some work for them.

47
00:03:42.250 --> 00:03:45.790
In Java, threat terminology work is nothing but task.

48
00:03:46.330 --> 00:03:51.190
So thread needs a task to execute, just like workers need work to work on.

49
00:03:52.000 --> 00:03:55.030
So once we give them the work, the workers start working.

50
00:03:55.210 --> 00:03:56.720
That is in our Java world.

51
00:03:56.740 --> 00:03:59.140
Threads would start executing their tasks.

52
00:04:00.770 --> 00:04:06.890
And in Java a thread is simply an instance of this class called thread or one of its subclasses.

53
00:04:07.430 --> 00:04:09.770
And thread is from the package java dot line.

54
00:04:11.030 --> 00:04:17.200
And the task that is the work is defined by a class which would implement this interface called reasonable,

55
00:04:17.360 --> 00:04:19.790
which is also from the Java Lang package.

56
00:04:20.720 --> 00:04:27.770
So there is a class while learnable is an interface and represents the worker, while reasonable represents

57
00:04:27.770 --> 00:04:28.400
the work.

58
00:04:29.280 --> 00:04:34.620
Now let's see how we can create a task, how we can create a thread and make the thread execute the

59
00:04:34.620 --> 00:04:35.070
task.

60
00:04:36.890 --> 00:04:37.060
Cross.

61
00:04:37.160 --> 00:04:38.930
Let's see how we can create a task.

62
00:04:39.050 --> 00:04:41.810
We just need to create a reasonable object.

63
00:04:43.060 --> 00:04:44.260
And this is how you do it.

64
00:04:44.620 --> 00:04:50.980
Basically, here Mineable is a class that implements a renewable interface and we simply instantiate

65
00:04:50.980 --> 00:04:51.280
it.

66
00:04:52.340 --> 00:04:55.640
Honorable interface has exactly one method called run.

67
00:04:56.320 --> 00:05:01.930
So my class would define the task within the run method which it implements.

68
00:05:03.830 --> 00:05:07.310
And the next step is to create the thread and give it its task.

69
00:05:07.700 --> 00:05:08.960
And this is how you do it.

70
00:05:09.170 --> 00:05:14.060
We simply instantiate the thread class and we initialize it with the task we created.

71
00:05:15.290 --> 00:05:21.170
And we now see that the threat is in a state called New Threat would also go through a few different

72
00:05:21.170 --> 00:05:22.610
states, as we will see now.

73
00:05:24.090 --> 00:05:26.340
And the next step is to start the thread.

74
00:05:26.490 --> 00:05:32.880
And for that we simply invoke the start method on the thread instance and nothing happens until we do

75
00:05:32.880 --> 00:05:33.360
this.

76
00:05:34.550 --> 00:05:40.340
And with this, a new call stack will be created for this thread and the run method will be pushed onto

77
00:05:40.340 --> 00:05:40.940
the stack.

78
00:05:41.720 --> 00:05:45.290
Just recall that every thread gets its own call stack.

79
00:05:46.540 --> 00:05:49.990
And now the thread is said to be in a state called reasonable.

80
00:05:50.880 --> 00:05:57.750
Reasonable does not imply that the run method is being executed and for that thread needs to get into

81
00:05:57.750 --> 00:06:00.330
a state called running run.

82
00:06:00.630 --> 00:06:04.380
As the word implies, the thread is just ready to run.

83
00:06:05.980 --> 00:06:11.380
Now there is something called Threat Scheduler, which is responsible for moving the thread from state

84
00:06:11.380 --> 00:06:12.370
to running state.

85
00:06:12.910 --> 00:06:18.010
And once the threat is in running state, it's called stack would be active and the method on top of

86
00:06:18.010 --> 00:06:19.660
the stack will be executed.

87
00:06:19.960 --> 00:06:22.900
If it is the run method, then the run method would be executed.

88
00:06:23.670 --> 00:06:28.950
And that scheduler is responsible for moving the thread back to vulnerable state to from the running

89
00:06:28.950 --> 00:06:34.050
state so that it can move some other thread into running state from vulnerable state.

90
00:06:34.590 --> 00:06:38.580
So thread scheduler is the component doing the switching between the threads.

91
00:06:39.560 --> 00:06:44.840
Now we can see that there is also another state called Blocked, and there are a few reasons why a threat

92
00:06:44.840 --> 00:06:46.070
can get into this state.

93
00:06:46.730 --> 00:06:52.700
And one of them, as you may guess, is due to blocking during an input-output operation like read.

94
00:06:53.480 --> 00:06:59.780
And just noticed that a thread can get into block state from only a running state and from the block

95
00:06:59.780 --> 00:07:02.390
state it can get into a vulnerable state.

96
00:07:03.180 --> 00:07:09.780
So from BLOCK State, it cannot directly get into running state and also it cannot get into block state

97
00:07:09.780 --> 00:07:11.140
from the state.

98
00:07:11.730 --> 00:07:13.560
So just keep that sequence in mind.

99
00:07:14.870 --> 00:07:21.020
So that scheduler makes all the decisions about who runs, who doesn't run, and how long they run.

100
00:07:21.990 --> 00:07:25.110
There is no guarantee on how the threat scheduler behaves.

101
00:07:25.470 --> 00:07:31.290
Sometimes it may run a thread to completion, while some other time it may run a thread halfway, and

102
00:07:31.290 --> 00:07:33.390
then it might do a switch to another thread.

103
00:07:34.370 --> 00:07:38.900
So you should never, ever base your program's correctness on schedulers behavior.

104
00:07:39.800 --> 00:07:45.560
In the next lesson, we will do a demo of creating threads and there we will also see how thread scheduler

105
00:07:45.560 --> 00:07:48.890
behaves and we will see that we should not rely on it.

106
00:07:49.340 --> 00:07:50.810
So that's about it for now.

107
00:07:50.840 --> 00:07:51.500
Thank you.

