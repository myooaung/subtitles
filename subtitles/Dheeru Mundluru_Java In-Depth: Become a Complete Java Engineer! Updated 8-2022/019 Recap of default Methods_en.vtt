WEBVTT
1
00:00:01.020 --> 00:00:01.810
Hi there.

2
00:00:01.830 --> 00:00:05.160
This is in our demo of default methods.

3
00:00:05.190 --> 00:00:10.380
We covered quite a few details and let's now do a quick recap of what was demonstrated.

4
00:00:10.800 --> 00:00:14.250
Some of the points are better group here and so it might be helpful.

5
00:00:15.850 --> 00:00:22.870
Plus this, we need to use default modifier and note that default methods can be used only in interfaces

6
00:00:22.870 --> 00:00:24.850
and we cannot use them in classes.

7
00:00:26.170 --> 00:00:31.450
Keep in mind that they are incidence methods so they cannot be accessed via the interface name.

8
00:00:32.020 --> 00:00:37.570
In one of the follow up lessons, we will take a look at static methods which can be defined in an interface

9
00:00:37.900 --> 00:00:42.220
which means that those static methods can be accessed via the interface name.

10
00:00:44.120 --> 00:00:49.700
With the introduction of default methods, we can have identical method definitions from two different

11
00:00:49.700 --> 00:00:53.750
super types and we know that this could lead to the diamond problem.

12
00:00:54.200 --> 00:00:59.600
But the language designers have some conflict resolution rules in place in order to take care of this.

13
00:01:01.300 --> 00:01:04.330
First one is that classes win over interfaces.

14
00:01:04.420 --> 00:01:10.900
That is, the definition in a superclass has higher precedence over the default method in a super interface.

15
00:01:11.620 --> 00:01:17.980
And due to the same rule, default methods can never override object class methods.

16
00:01:19.610 --> 00:01:25.550
Now, if you have a default method in super interface and if it is overridden in a sub interface and

17
00:01:25.550 --> 00:01:30.350
if your class is implementing the sub interface, then the version in the sub interface is picked.

18
00:01:30.590 --> 00:01:32.690
So the more specific version is picked.

19
00:01:32.990 --> 00:01:39.350
This is straightforward as it is no different from how an overriding method is picked in a regular class

20
00:01:39.350 --> 00:01:40.040
hierarchy.

21
00:01:40.640 --> 00:01:43.010
So both these rules apply at runtime.

22
00:01:44.550 --> 00:01:50.280
Rule three is basically manually fixing the issue as a scenario and context is different from the first

23
00:01:50.280 --> 00:01:51.090
two cases.

24
00:01:51.540 --> 00:01:57.030
You may recall that it may happen if one interface provides a default method, and then there is a second

25
00:01:57.030 --> 00:02:02.850
independent interface that provides either an abstract method or a default method with the same name.

26
00:02:03.360 --> 00:02:09.419
In this case, the concrete class, which is implementing these two interfaces, must provide an implementation

27
00:02:09.419 --> 00:02:10.289
for that method.

28
00:02:10.500 --> 00:02:12.270
Otherwise we get a compiler error.

29
00:02:12.870 --> 00:02:18.180
I believe it would not be an issue for the programmer to resolve this the very first time when both

30
00:02:18.180 --> 00:02:20.190
the interfaces are being implemented.

31
00:02:20.670 --> 00:02:23.010
However, sometimes this may not be the case.

32
00:02:23.250 --> 00:02:29.760
For example, let's consider a class X, implementing interfaces A and B, and let's also assume that

33
00:02:29.760 --> 00:02:33.660
Interface A is providing a default method named go.

34
00:02:34.320 --> 00:02:41.190
However, let's say in future, if Interface B also decides to add a default method named go, then

35
00:02:41.190 --> 00:02:47.250
if it tried to recompile class x, then there will be a compiler error and it would require a manual

36
00:02:47.250 --> 00:02:47.820
fix.

37
00:02:48.390 --> 00:02:52.020
However, I would assume that this would be a very rare situation.

38
00:02:52.500 --> 00:02:55.230
So that's about the conflict resolution strategies.

39
00:02:56.790 --> 00:03:01.350
Next is about explicit invocation of a default method in a super interface.

40
00:03:01.800 --> 00:03:06.990
For this we use super keyword and it must be parent type dot super.

41
00:03:07.710 --> 00:03:14.970
We cannot do either grandparent super or we cannot use only super keyword, which is reserved for invoking

42
00:03:14.970 --> 00:03:16.710
a method in the super class.

43
00:03:17.460 --> 00:03:22.020
Note that only super keyword cannot also be used in a default method.

44
00:03:23.760 --> 00:03:29.610
A default method can be re obstructed in a sub interface or in an abstract subclass.

45
00:03:30.210 --> 00:03:37.200
This is done if a subtype thinks that the default implementation is not good enough and requires its

46
00:03:37.200 --> 00:03:40.170
own subtypes to provide a better implementation.

47
00:03:42.020 --> 00:03:48.270
Finally, we cannot use final or synchronised keywords with default methods by virtue of its definition.

48
00:03:48.290 --> 00:03:53.330
A default method is basically a default implementation of an interface method.

49
00:03:53.600 --> 00:03:56.750
So if needed, a subtype should be able to override it.

50
00:03:56.930 --> 00:03:59.780
And so a default method cannot be final.

51
00:03:59.810 --> 00:04:02.810
So the subtype might provide a better implementation.

52
00:04:03.260 --> 00:04:06.320
Synchronized keyword will be introduced in concurrency chapter.

53
00:04:06.320 --> 00:04:10.730
And so let's not worry about it for now, but just note that it cannot be used.

54
00:04:11.470 --> 00:04:13.260
So that's about default methods.

55
00:04:13.270 --> 00:04:15.890
And we covered all the details from our demo.

56
00:04:15.910 --> 00:04:16.600
Thank you.

