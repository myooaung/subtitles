WEBVTT
1
00:00:02.080 --> 00:00:03.080
Hi there.

2
00:00:03.100 --> 00:00:05.290
This is De La Rue and welcome back.

3
00:00:05.470 --> 00:00:09.280
So we looked at how to access classes in packages.

4
00:00:09.430 --> 00:00:13.360
Now let's see how we can create our own packages.

5
00:00:14.820 --> 00:00:17.820
Now in the previous lesson, we have seen this import statement.

6
00:00:17.850 --> 00:00:19.480
The package name is Java.

7
00:00:20.220 --> 00:00:22.530
And this belongs to the Java API.

8
00:00:23.220 --> 00:00:28.920
But since we now want to see how we can create our own packages, let's pick a different example.

9
00:00:29.280 --> 00:00:36.180
Since my company's name is Semantic Square, I might want to create my classes in packages that include

10
00:00:36.180 --> 00:00:37.650
the name Semantic Square.

11
00:00:39.240 --> 00:00:42.480
So I might want all my package names to start with.

12
00:00:42.480 --> 00:00:44.880
The text column dot semantics where.

13
00:00:45.890 --> 00:00:51.230
Typically package names have at least two or three components that are separated by dots.

14
00:00:51.830 --> 00:00:55.040
Components here are calm and semantic squared.

15
00:00:55.790 --> 00:00:59.690
Let's still not bother ourselves about the structure of the package name.

16
00:00:59.900 --> 00:01:04.190
That is why it has multiple components or what those components signify.

17
00:01:04.459 --> 00:01:05.990
We will discuss that later.

18
00:01:06.810 --> 00:01:12.900
Now, if you recall, it was mentioned at the beginning of the chapter that packages are nothing but

19
00:01:12.900 --> 00:01:14.970
directories on the file system.

20
00:01:15.760 --> 00:01:21.310
So it means that we need to create some directories corresponding to the package name.

21
00:01:23.240 --> 00:01:30.470
Now, if a package name involves a single component, then the package is basically a single directory

22
00:01:30.950 --> 00:01:34.220
and the directory name would be the package name itself.

23
00:01:34.670 --> 00:01:39.260
So if the package name is basics, then you would create a directory called basics.

24
00:01:40.910 --> 00:01:47.270
But if the package name involves multiple components, then the package would correspond to a nested

25
00:01:47.270 --> 00:01:49.280
directory structure as shown here.

26
00:01:49.850 --> 00:01:56.300
That is, if the package name is complete semantic squared basics, then each component in this package

27
00:01:56.300 --> 00:02:00.050
name corresponds to a directory in the nested directory structure.

28
00:02:01.670 --> 00:02:07.790
Now, if our basics Democrats were to be in this kind of a package, then we need to create such a directory

29
00:02:07.790 --> 00:02:12.500
structure and place basics demo in the last directory as shown here.

30
00:02:13.070 --> 00:02:15.560
So that's one thing that we need to do.

31
00:02:15.590 --> 00:02:17.630
Creating the directory structure.

32
00:02:18.320 --> 00:02:22.880
And another thing to do is to have a package statement in the class.

33
00:02:24.490 --> 00:02:29.860
On the package statement involves the keyword package followed by the package name.

34
00:02:31.160 --> 00:02:34.250
And here is the package statement for our example.

35
00:02:36.060 --> 00:02:39.720
And the package statement must be the first statement in the class.

36
00:02:39.780 --> 00:02:41.820
If not, we get a compiler error.

37
00:02:42.360 --> 00:02:45.600
Even import statements should follow the packet statement.

38
00:02:47.260 --> 00:02:51.970
And here is an example of how our basic demo class would look like.

39
00:02:52.240 --> 00:02:58.900
So packet statement is followed by any import statements which are then followed by the class definition.

40
00:02:59.910 --> 00:03:04.710
Also note that a sauce file can have only one package statement.

41
00:03:06.610 --> 00:03:13.930
So basically to put our class in a package, we need to ensure that there is a matching directory structure

42
00:03:14.200 --> 00:03:16.990
and then place the class in the last directory.

43
00:03:17.290 --> 00:03:21.340
And we need to also put a package statement at the top of the class.

44
00:03:23.060 --> 00:03:29.780
Now, an important effect of placing a class in a package is that once the class is compiled, the package

45
00:03:29.780 --> 00:03:32.450
name becomes part of the class name.

46
00:03:33.990 --> 00:03:38.850
And due to this, you can no longer execute the class using its simple name.

47
00:03:39.390 --> 00:03:45.660
You need to use the fully qualified name of the class, which will include the package name as shown

48
00:03:45.660 --> 00:03:46.140
here.

49
00:03:46.470 --> 00:03:50.040
So it would be package name followed by DOT, followed by the class name.

50
00:03:50.460 --> 00:03:54.180
Now let's go ahead and see what we just discussed in action.

51
00:03:56.680 --> 00:03:56.800
Okay.

52
00:03:56.920 --> 00:04:04.270
This demo is going to be a bit lengthy demo because we are going to discuss lot of details like setting

53
00:04:04.270 --> 00:04:05.260
up class parts.

54
00:04:05.830 --> 00:04:12.060
So do pay a lot of attention, but I'll make sure that everything is explained in a very clear and a

55
00:04:12.070 --> 00:04:13.540
very systematic way.

56
00:04:14.270 --> 00:04:16.519
So here we have basic demo.

57
00:04:16.700 --> 00:04:23.150
And for this particular demo, let's make it part of a package and let's call the package name as calm

58
00:04:23.150 --> 00:04:25.490
semantics squared dot six.

59
00:04:25.880 --> 00:04:32.390
So we know that the package statement has to be there and it has to be the first statement, and so

60
00:04:32.390 --> 00:04:34.100
it needs to be at the top of the class.

61
00:04:37.830 --> 00:04:37.940
Okay.

62
00:04:38.080 --> 00:04:39.640
That's the package statement.

63
00:04:39.910 --> 00:04:46.180
Now, we also know that we need to have a matching directory structure on the file system, and then

64
00:04:46.180 --> 00:04:49.840
we need to place this particular class within that directory structure.

65
00:04:50.650 --> 00:04:58.180
Now, you may have noticed that we already created this particular directory structure in our course,

66
00:04:58.570 --> 00:04:58.900
right?

67
00:04:58.900 --> 00:05:03.760
When we started our writing, our programs, we created this directory structure.

68
00:05:04.120 --> 00:05:10.210
So we just need to go into the directory structure and we need to compile this particular class.

69
00:05:11.280 --> 00:05:13.080
So this is the directory structure.

70
00:05:13.080 --> 00:05:18.120
We had the Java in-depth and within that we had the source directory as RC.

71
00:05:18.300 --> 00:05:24.420
And within that we have this directory structure, the nested directory structure which matches the

72
00:05:24.420 --> 00:05:25.290
package name.

73
00:05:25.620 --> 00:05:27.240
So we already did that.

74
00:05:27.420 --> 00:05:31.190
Now, if this was not there, we would have created this directory structure.

75
00:05:31.200 --> 00:05:36.000
So this particular class, we know that it is already here, so let's just compile it.

76
00:05:39.930 --> 00:05:40.350
Compiles.

77
00:05:40.350 --> 00:05:40.850
Fine.

78
00:05:40.860 --> 00:05:41.760
Let's run it.

79
00:05:44.190 --> 00:05:48.780
So it says could not find or load main class basics demo.

80
00:05:49.110 --> 00:05:55.260
That's because, as we discussed earlier in the slides, when we compile this file which has such a

81
00:05:55.260 --> 00:06:00.690
package statement, the package name would become part of the class name.

82
00:06:01.020 --> 00:06:04.770
So we cannot directly execute the simple class name.

83
00:06:04.770 --> 00:06:06.500
This is called as the simple class name.

84
00:06:06.510 --> 00:06:13.320
So we said that we need to give the fully qualified name, which includes the package name followed

85
00:06:13.320 --> 00:06:15.330
by DOT, followed by the class name.

86
00:06:15.330 --> 00:06:16.350
So let's do that.

87
00:06:22.300 --> 00:06:25.540
Now, it still says that it could not find the class.

88
00:06:26.020 --> 00:06:34.900
The reason for that is the Java interpreter is looking for this directory structure right within the

89
00:06:34.900 --> 00:06:36.550
base six directory.

90
00:06:36.910 --> 00:06:43.990
So it is expecting that there would be a directory called com here and within that semantic square and

91
00:06:43.990 --> 00:06:47.260
within that base six and within the basics demo class.

92
00:06:47.740 --> 00:06:49.350
But that's not the case.

93
00:06:49.360 --> 00:06:52.030
This directory structure is right here.

94
00:06:52.420 --> 00:06:54.010
It is in the IRC directory.

95
00:06:54.490 --> 00:06:59.800
So Java interpreter is trying to is looking for this directory structure.

96
00:07:00.040 --> 00:07:03.390
So for that, we need to move down here to Z.

97
00:07:03.400 --> 00:07:04.360
So let's do that.

98
00:07:08.060 --> 00:07:12.830
And now if we execute it, it's going to execute one of the methods.

99
00:07:12.830 --> 00:07:17.270
So this is one of the methods in the file labeled Continue.

100
00:07:17.540 --> 00:07:23.750
So it works fine, but here there is something happening implicitly under the hoods.

101
00:07:24.080 --> 00:07:27.770
So what the Java interpreter is doing here is.

102
00:07:28.040 --> 00:07:35.120
So the first thing that it does is it checks if the environment variable class path has been set or

103
00:07:35.120 --> 00:07:35.540
not.

104
00:07:36.020 --> 00:07:41.510
So in the second chapter we have looked at the class path environment variable.

105
00:07:42.080 --> 00:07:49.700
And if you recall we said that a class path environment variable is specific to Java and as the name

106
00:07:49.700 --> 00:07:51.170
implies, class path.

107
00:07:51.350 --> 00:07:59.420
It is used for locating class files like the DOT class files and it is used by both the Java compiler

108
00:07:59.420 --> 00:08:03.530
as well as the Java interpreter that is the JVM.

109
00:08:04.040 --> 00:08:08.690
So that's the first thing that it is going to do, whether there is a class path or not.

110
00:08:08.990 --> 00:08:13.370
Now just keep in mind class path and path are different.

111
00:08:13.370 --> 00:08:15.470
Path is a generic thing.

112
00:08:15.470 --> 00:08:22.100
Path is also an environment variable and path is useful for running this executables itself.

113
00:08:22.100 --> 00:08:22.640
Right.

114
00:08:22.670 --> 00:08:24.350
We discussed it very well.

115
00:08:24.560 --> 00:08:31.850
So if you want to execute this Java command or the Java Command, then those executables should be in

116
00:08:31.850 --> 00:08:37.490
the path they should be located from one of the paths in the path environment variable.

117
00:08:37.700 --> 00:08:44.900
But cross path is just specific to Java and it is for locating class files by both the compiler as well

118
00:08:44.900 --> 00:08:46.550
as the Java interpreter.

119
00:08:46.940 --> 00:08:53.780
In this particular example, the Java interpreter is trying to locate this particular class file basics

120
00:08:53.780 --> 00:08:55.220
demo dot class.

121
00:08:55.880 --> 00:09:01.880
Now if you want to, you can actually refer to that particular lecture because it has some details about

122
00:09:01.880 --> 00:09:02.720
class path.

123
00:09:03.620 --> 00:09:09.130
So the first thing that happens is it checks if the class path is there or not and if it is not there,

124
00:09:09.140 --> 00:09:16.220
let's say if the class path has not been set, then what it does is the Java interpreter well so the

125
00:09:16.220 --> 00:09:23.210
command is being executed in the search directory, so it will check if within this directory the RC

126
00:09:23.210 --> 00:09:28.460
where the command is being executed, if it has this directory structure.

127
00:09:29.090 --> 00:09:35.870
So by default it is going to check if RC directory has this particular directory structure which would

128
00:09:35.870 --> 00:09:38.000
have the class basics demo.

129
00:09:38.390 --> 00:09:43.940
So it would do that in the current directory where the Java command is being executed.

130
00:09:44.540 --> 00:09:46.430
That is when the class path is not there.

131
00:09:46.430 --> 00:09:49.460
But in my case, the class path has been set.

132
00:09:49.550 --> 00:09:51.710
So let me show you my class path.

133
00:09:51.740 --> 00:09:56.750
So all I would do is execute this command called set class path.

134
00:09:57.610 --> 00:10:03.370
This is my class part and class part includes different parts here.

135
00:10:03.820 --> 00:10:04.960
So this is the command.

136
00:10:04.990 --> 00:10:06.850
Now, this is on my windows machine.

137
00:10:06.880 --> 00:10:16.090
Now, if you are using a unique space machine like Ubuntu or Mac OS, then the command would be here.

138
00:10:16.090 --> 00:10:16.630
It is.

139
00:10:16.900 --> 00:10:21.850
It would be a core space dollar and within braces you would have class path.

140
00:10:22.330 --> 00:10:24.820
Now you can look at the resources section.

141
00:10:24.820 --> 00:10:30.100
I have a document which would include these commands and perhaps some other instructions to.

142
00:10:32.450 --> 00:10:35.640
So here in my case, the class part is there.

143
00:10:35.660 --> 00:10:41.540
So what the Java interpreter is going to do is it's going to look at each of these parts.

144
00:10:41.570 --> 00:10:42.770
Now, here are windows.

145
00:10:42.770 --> 00:10:44.840
The parts are separated by semicolons.

146
00:10:44.840 --> 00:10:47.440
Like in this case there is a dot followed by semicolon.

147
00:10:47.450 --> 00:10:50.050
But on Unix based systems it would be a column.

148
00:10:50.060 --> 00:10:55.220
So it will look at it will scan this class path value, which is this whole thing.

149
00:10:56.250 --> 00:11:05.340
And it will check it will check each of these paths and it will see if it can locate this class in any

150
00:11:05.340 --> 00:11:06.210
of those paths.

151
00:11:06.540 --> 00:11:12.540
So it will look for this directory structure in each of these paths until it finds it.

152
00:11:12.900 --> 00:11:19.310
Now here dot implies current path, which means that the location where we are executing the command,

153
00:11:19.320 --> 00:11:21.330
so it has the dot here.

154
00:11:21.480 --> 00:11:28.890
So in my particular case, so it will look at this and it will see a dot and it is going to check if

155
00:11:28.890 --> 00:11:31.890
within this current directory where we are executing the command.

156
00:11:31.920 --> 00:11:36.840
If this directory structure is present and if basic demo is part of that directory structure.

157
00:11:37.140 --> 00:11:38.760
So that's how it is going to locate.

158
00:11:39.540 --> 00:11:45.030
Now, if you are not using class path, if class path has not been set, then also it looks in the current

159
00:11:45.030 --> 00:11:45.690
directory.

160
00:11:46.380 --> 00:11:50.630
In my case, it's because of the class path having this dot.

161
00:11:50.640 --> 00:11:53.100
That's the reason why it is able to execute it.

162
00:11:53.280 --> 00:11:56.830
Now, let me just show it to you by removing this class path.

163
00:11:56.850 --> 00:12:00.900
So one way we can do that is we'll just set.

164
00:12:02.120 --> 00:12:03.980
Glass path equal to.

165
00:12:04.010 --> 00:12:09.290
So if you do that, the class path is cleared, which means that the class path is not there.

166
00:12:09.290 --> 00:12:13.370
And this works only for this particular session of the terminal.

167
00:12:13.970 --> 00:12:21.560
And on Windows or on UNIX systems, you would say export class path equal to you know, it would just

168
00:12:21.560 --> 00:12:23.660
be like this, something like this.

169
00:12:25.760 --> 00:12:28.640
So let me just say set class path now.

170
00:12:29.240 --> 00:12:35.240
So it says that environment, variable class path not defined because we have set we have set it to

171
00:12:35.240 --> 00:12:35.780
empty.

172
00:12:37.470 --> 00:12:39.120
So now let me run it.

173
00:12:39.150 --> 00:12:41.670
So now we do not have the class part.

174
00:12:42.150 --> 00:12:43.410
And that's only for this session.

175
00:12:43.410 --> 00:12:47.130
If if I open a new terminal, then we can still see the session.

176
00:12:47.280 --> 00:12:48.890
So let me execute it.

177
00:12:48.900 --> 00:12:50.550
And as you can see, it works fine.

178
00:12:51.480 --> 00:12:55.230
So first, it's going to see if the class path is there or not.

179
00:12:55.230 --> 00:12:57.750
If it's not there, it works just like in this case.

180
00:12:57.750 --> 00:13:04.950
But if the class path is there, then it checks, if any of the paths within that class path would have

181
00:13:04.950 --> 00:13:06.330
this directory structure.

182
00:13:06.780 --> 00:13:14.760
So with DOT, we have seen now that DOT is going to work only if I am executing this command from here,

183
00:13:14.760 --> 00:13:18.030
from RC because RC has this directory structure.

184
00:13:18.240 --> 00:13:24.600
Now let's say if I want to execute this particular command successfully from anywhere on my machine,

185
00:13:24.600 --> 00:13:27.270
then I have to set the class path.

186
00:13:27.390 --> 00:13:28.680
Tell a RC.

187
00:13:29.310 --> 00:13:31.800
So let me let's also do that.

188
00:13:32.780 --> 00:13:33.980
So let me open.

189
00:13:34.750 --> 00:13:35.950
A new terminal.

190
00:13:35.980 --> 00:13:36.940
Here it is.

191
00:13:37.750 --> 00:13:39.010
So let me just.

192
00:13:39.880 --> 00:13:41.530
Copy and paste this thing.

193
00:13:46.750 --> 00:13:48.990
So as you can see, it says not found.

194
00:13:49.000 --> 00:13:50.440
The class file is not found.

195
00:13:50.650 --> 00:13:52.240
So now we need to set.

196
00:13:53.180 --> 00:13:56.500
The class part and it should have that particular directory.

197
00:13:56.510 --> 00:13:59.900
So instead of using said class path, let me just show it to you.

198
00:14:00.590 --> 00:14:02.120
Let us set it permanently.

199
00:14:02.300 --> 00:14:09.140
So I have also shown that in that lecture, in the in the second chapter set, how we can set the class

200
00:14:09.140 --> 00:14:13.310
part or even part that was also shown in one of the lectures.

201
00:14:13.310 --> 00:14:15.980
So we just going on windows, we just go into.

202
00:14:17.420 --> 00:14:20.840
The control panel and you can go into system.

203
00:14:21.840 --> 00:14:24.530
It opens the system properties here.

204
00:14:24.540 --> 00:14:32.040
Click on advanced system settings and under advanced tab, click on environment variables and here we

205
00:14:32.040 --> 00:14:34.740
have class path so we can.

206
00:14:34.740 --> 00:14:37.950
If it is not there, you would create new and you would add it.

207
00:14:38.280 --> 00:14:45.570
But if it is there you will just say edit so this is a variable name and at the very end let me add

208
00:14:45.660 --> 00:14:46.830
the new path.

209
00:14:49.180 --> 00:14:49.320
Okay.

210
00:14:49.480 --> 00:15:00.550
So that's the one say och, och and och, and let me create this in a new directory so you can also

211
00:15:00.550 --> 00:15:01.930
copy this one more time.

212
00:15:04.320 --> 00:15:10.020
So they let me open a new terminal because the change that we just made will not be reflected in that

213
00:15:10.020 --> 00:15:11.160
particular terminal.

214
00:15:11.760 --> 00:15:15.360
So now let me execute this and you can see it works.

215
00:15:15.600 --> 00:15:20.580
So I'm in my home directory here and it works from here and it would work from anywhere now.

216
00:15:21.060 --> 00:15:26.580
So let me just say set class path and you can see that it is added at the end.

217
00:15:26.850 --> 00:15:33.870
So that's what you would do if you want to set it permanently so that it would be it would work across

218
00:15:33.870 --> 00:15:36.740
all sessions, so you would have to set it there.

219
00:15:36.750 --> 00:15:42.450
And that particular lecture also shows how it can in the second chapter, also shows how it can be done

220
00:15:42.450 --> 00:15:43.590
on a mac.

221
00:15:43.600 --> 00:15:46.260
And the process would be very similar on Linux to.

222
00:15:47.100 --> 00:15:47.840
So that's that.

223
00:15:47.850 --> 00:15:49.980
So we created a package.

224
00:15:50.100 --> 00:15:53.310
The basic demo was part is made part of a package now.

225
00:15:53.310 --> 00:15:57.400
Now let's go ahead and create another class and let's import that.

226
00:15:57.900 --> 00:16:00.000
So let me show you that.

227
00:16:01.130 --> 00:16:04.670
So I have this a bit of code here.

228
00:16:05.720 --> 00:16:07.430
Now let's create.

229
00:16:07.430 --> 00:16:12.260
So we have calm, semantic square and basics, and that's where the basics demo is.

230
00:16:12.290 --> 00:16:17.930
Now let's create a new package, which would be calm, Semantic Square and basics test.

231
00:16:18.230 --> 00:16:23.810
So in Semantic Square Directory we will add a new directory called Basics Test, and within that we

232
00:16:23.810 --> 00:16:24.960
will add a new class.

233
00:16:24.980 --> 00:16:28.730
And from that class, we are going to use this basic demo class.

234
00:16:29.030 --> 00:16:34.930
And also in the basics demo class I added this new method called Foo here.

235
00:16:34.940 --> 00:16:41.900
So we will just invoke this particular method from that new class and this is the new class here.

236
00:16:41.900 --> 00:16:47.900
So it would be part of this package called Basics Test and we are importing one ArrayList.

237
00:16:47.900 --> 00:16:54.020
So this is from the Java Library, a class from the Java library, and we are importing the basics demo

238
00:16:54.020 --> 00:16:55.790
class which is in the basics.

239
00:16:55.790 --> 00:16:57.470
So we are saying import of this.

240
00:16:57.950 --> 00:17:01.220
So package name comes first, then the import, then the class definition.

241
00:17:01.220 --> 00:17:07.339
And here we are saying we are creating an instance of basics demo and we are invoking the method foo.

242
00:17:07.550 --> 00:17:11.300
So first thing is I need to create that directory.

243
00:17:11.300 --> 00:17:16.700
So let me go here into Semantic Square here it would be basic test.

244
00:17:18.109 --> 00:17:20.150
All right, so now let's.

245
00:17:21.079 --> 00:17:24.770
Save this candy to move into basic test.

246
00:17:26.119 --> 00:17:28.610
And it's called basics demo test.

247
00:17:33.770 --> 00:17:35.630
Now, let me show you something here.

248
00:17:35.630 --> 00:17:37.380
We are going to demonstrate something else.

249
00:17:37.400 --> 00:17:38.960
Now we have this class part.

250
00:17:38.990 --> 00:17:41.240
Let me set this class path.

251
00:17:42.120 --> 00:17:46.590
Too empty, which means that we are removing the class path.

252
00:17:47.100 --> 00:17:51.060
Now let me try to compile this particular class.

253
00:17:51.060 --> 00:17:53.100
So this basics demo test.

254
00:17:53.990 --> 00:17:55.550
Let me copy the directory.

255
00:17:56.900 --> 00:17:57.070
Here.

256
00:17:57.170 --> 00:17:58.910
Let me go into that directory.

257
00:18:00.760 --> 00:18:04.510
So I'm inside basics test and now I want to compile that class.

258
00:18:05.050 --> 00:18:07.780
And the class part has also been removed.

259
00:18:09.070 --> 00:18:10.430
I'll say, Jack.

260
00:18:13.650 --> 00:18:17.230
You know, when I am saying basics demo test java.

261
00:18:17.340 --> 00:18:19.030
It is giving to errors.

262
00:18:19.050 --> 00:18:22.290
It says that it cannot import basics demo.

263
00:18:22.770 --> 00:18:23.550
So on here.

264
00:18:23.550 --> 00:18:25.030
Also we are instantiating it.

265
00:18:25.050 --> 00:18:30.300
So at both of these places it's saying that it cannot locate this class files.

266
00:18:30.540 --> 00:18:34.780
That's because we have removed this directory structure, this particular path.

267
00:18:34.800 --> 00:18:39.130
In fact, we removed the entire class path so it is unable to.

268
00:18:39.150 --> 00:18:46.230
So when we when it encounters this import statement, so it is trying to compile this Java file, but

269
00:18:46.230 --> 00:18:52.770
when it is trying to compile, it encounters this statement called import of this and it is unable to

270
00:18:52.770 --> 00:18:54.810
locate it in the class path.

271
00:18:54.960 --> 00:18:57.150
So in our case, there is no class path.

272
00:18:57.670 --> 00:18:57.960
Right.

273
00:18:57.960 --> 00:18:59.430
We did not have the class path.

274
00:18:59.430 --> 00:19:06.270
So it will look in the current directory whether this directory structure is in the current directory,

275
00:19:06.450 --> 00:19:10.050
current directory being basics test and it's not there.

276
00:19:10.140 --> 00:19:15.960
Now let's also even if we have a class path, let's say set class path.

277
00:19:16.960 --> 00:19:18.730
Equal to something.

278
00:19:18.730 --> 00:19:21.430
Let's say there is this folder called D2.

279
00:19:21.520 --> 00:19:29.630
Even if I have this, it is not going to work because D2 does not have this particular directory structure.

280
00:19:29.650 --> 00:19:33.250
It is only inside Java, in-depth and RC.

281
00:19:34.030 --> 00:19:40.810
So if that is there then it would work because it will be able to find this class file the basics demo

282
00:19:40.810 --> 00:19:45.880
class within that directory within RC because it has the directory structure.

283
00:19:46.480 --> 00:19:50.650
So but you can see that it does not happen for the ArrayList.

284
00:19:50.980 --> 00:19:54.340
That's because our list belongs to the Java Library.

285
00:19:54.760 --> 00:20:01.480
So for the to locate the classes in the Java Library, it does not make use of the class path.

286
00:20:01.510 --> 00:20:08.260
But for anything else, like the user defined classes, like the one which we wrote, or sometimes we

287
00:20:08.260 --> 00:20:15.010
may download some third party libraries, Java libraries, and we may use it some open source libraries.

288
00:20:15.010 --> 00:20:17.980
So those have to go into the class path.

289
00:20:18.400 --> 00:20:24.940
So class path is essentially for locating class files, and those class files are user defined class

290
00:20:24.940 --> 00:20:25.480
files.

291
00:20:25.870 --> 00:20:28.270
If it is Java library, then there is no problem.

292
00:20:28.900 --> 00:20:29.620
It does not.

293
00:20:29.770 --> 00:20:31.930
The class path does not come into play.

294
00:20:32.750 --> 00:20:34.620
So we need to set this.

295
00:20:34.640 --> 00:20:37.150
So let me just set it like this.

296
00:20:37.160 --> 00:20:38.450
Let me just say set.

297
00:20:39.770 --> 00:20:42.140
Last part, actually.

298
00:20:42.380 --> 00:20:43.490
So we have seen.

299
00:20:44.270 --> 00:20:45.920
Two ways to set class path, right?

300
00:20:45.920 --> 00:20:50.060
One is using the class path and the other one from the system properties.

301
00:20:50.060 --> 00:20:51.830
Right, to set it permanently.

302
00:20:51.860 --> 00:20:59.390
Now there is one other way to do it and let's take this opportunity to do that so you can actually do

303
00:20:59.390 --> 00:21:09.260
this Java and I'll say hyphen c, p, c, p stands for class path or you can have class path two and

304
00:21:09.260 --> 00:21:09.830
then space.

305
00:21:09.830 --> 00:21:13.010
So it could be hyphen C, P or hyphen class path.

306
00:21:13.010 --> 00:21:16.790
Any of them is fine and we will have our path.

307
00:21:16.790 --> 00:21:17.990
So it will be.

308
00:21:20.110 --> 00:21:27.070
In depth slash CRC and this particular file which is basics demo test.

309
00:21:32.160 --> 00:21:32.290
Okay.

310
00:21:32.440 --> 00:21:34.890
It says basics demo is not public.

311
00:21:34.900 --> 00:21:37.360
So let me just go into basics demo.

312
00:21:37.600 --> 00:21:42.820
So the basics demo class does not have the public access modifier.

313
00:21:43.000 --> 00:21:49.480
So if you want to access something in a different package that it needs to have, the public access

314
00:21:49.480 --> 00:21:52.270
modifier and access modifiers will be discussed later.

315
00:21:52.540 --> 00:21:55.030
So this is all that is needed.

316
00:21:57.710 --> 00:21:59.480
But I might have to compile that.

317
00:21:59.480 --> 00:22:01.550
So let me just compile that.

318
00:22:01.910 --> 00:22:07.700
So instead of going into that directory now, let me just say com we can also compile from here in this

319
00:22:07.700 --> 00:22:08.210
way.

320
00:22:08.780 --> 00:22:11.060
So this is my other command prompt.

321
00:22:11.090 --> 00:22:12.080
The first one.

322
00:22:15.550 --> 00:22:20.290
So we can also compile from here, but we need to give the correct path like this.

323
00:22:21.050 --> 00:22:22.070
Here it is now.

324
00:22:22.100 --> 00:22:25.580
Now it is compiled and it has the public modifier here.

325
00:22:26.430 --> 00:22:26.810
It said.

326
00:22:31.310 --> 00:22:33.910
Now I'm going to compile my basics.

327
00:22:33.920 --> 00:22:34.790
Demo test.

328
00:22:34.820 --> 00:22:35.840
Demo test.

329
00:22:36.060 --> 00:22:36.830
Let's do it.

330
00:22:37.040 --> 00:22:40.640
Now it compiles fine because we are specifying the class path.

331
00:22:40.880 --> 00:22:46.850
So this doing it this way, it means that it only works for the particular command.

332
00:22:47.420 --> 00:22:51.390
So if you use that class path, it would work for the entire session in the terminal.

333
00:22:51.410 --> 00:22:56.590
But if you set it this way, it will only work for this particular command itself.

334
00:22:56.600 --> 00:23:01.010
So as soon as the command is executed, the class path will not apply anymore.

335
00:23:02.210 --> 00:23:04.820
And if you want to set it permanently, we already know that.

336
00:23:04.820 --> 00:23:07.100
So you would do it in the system properties.

337
00:23:07.490 --> 00:23:08.470
So that's it.

338
00:23:08.480 --> 00:23:11.360
So that's what I wanted to demonstrate here.

339
00:23:12.260 --> 00:23:20.350
So now we have we are able to see that the class path is used by both compiler as well as the Java interpreter.

340
00:23:20.360 --> 00:23:24.240
So we started off looking at how it is used by Java interpreter.

341
00:23:24.260 --> 00:23:30.800
Now in the Java Sea, when we are using the compiler, it will not have a problem locating this because

342
00:23:30.800 --> 00:23:33.670
this is being specified here like the Dart Java file.

343
00:23:33.680 --> 00:23:42.140
But if this Java file uses another class and that particular class has to be part of class path, so

344
00:23:42.140 --> 00:23:47.900
it was using a class from the another package, the basics package.

345
00:23:47.990 --> 00:23:52.940
So that's why that particular class has to be in the in the class path.

346
00:23:53.210 --> 00:23:59.360
Similarly, if we are using any other classes from a third party library, then all of those classes

347
00:23:59.360 --> 00:24:00.950
have to be on the class path.

348
00:24:01.910 --> 00:24:03.320
So that's that.

349
00:24:03.920 --> 00:24:07.670
Now let's also look at something called as sub packages.

350
00:24:07.670 --> 00:24:08.770
It's a very simple concept.

351
00:24:08.780 --> 00:24:10.280
Let me quickly go over that.

352
00:24:11.190 --> 00:24:12.320
So here it is.

353
00:24:12.330 --> 00:24:16.440
So this is the Java API and here we have the packages.

354
00:24:16.770 --> 00:24:23.430
Now here if I scroll down, I have this java tutorial and java dot dot com current.

355
00:24:24.750 --> 00:24:25.410
Here.

356
00:24:25.770 --> 00:24:31.240
So some so we know that a package is used for meaningfully organizing classes.

357
00:24:31.260 --> 00:24:31.620
Right.

358
00:24:31.620 --> 00:24:35.300
Because we have a lot of classes now within a single package.

359
00:24:35.310 --> 00:24:43.350
Also, sometimes we may have too many classes and some of the classes might be might be useful for performing

360
00:24:43.350 --> 00:24:45.030
some specialized functions.

361
00:24:45.090 --> 00:24:46.170
Groups of classes.

362
00:24:46.290 --> 00:24:51.880
In that case, you can you can further group those classes into sub packages.

363
00:24:51.900 --> 00:24:58.320
For instance, here, Java is a package in the Java library which has all utility classes.

364
00:24:58.680 --> 00:25:04.740
So if I click on that, we can see them here, all utility classes that are specific, that represent

365
00:25:04.740 --> 00:25:07.350
data structures, and we will look at them later.

366
00:25:08.190 --> 00:25:15.600
Then there is this package called Java Concurrent, which also has utility classes, but which are specific

367
00:25:15.600 --> 00:25:18.810
to concurrency, which is nothing but multithreading.

368
00:25:18.840 --> 00:25:22.380
Similarly, we have all of these different kinds of sub packages.

369
00:25:22.710 --> 00:25:28.500
Now when we say sub package, sub package, it just means that there is this directory structure for

370
00:25:28.500 --> 00:25:29.070
Java.

371
00:25:30.000 --> 00:25:35.790
And within that, when we say concurrent is a sub package, there would be a directory called concurrent

372
00:25:35.790 --> 00:25:43.260
and within that it would be that particular sub package will have all of the classes specific to Java

373
00:25:43.920 --> 00:25:44.490
concurrent.

374
00:25:44.820 --> 00:25:50.730
Just don't think that this Java dot concurrent is another directory structure within the util package,

375
00:25:50.730 --> 00:25:52.260
within the util directory.

376
00:25:52.470 --> 00:25:53.310
It's not like that.

377
00:25:53.760 --> 00:25:59.940
And when we are importing, if we want to import something from Java util a class from just from Java

378
00:25:59.960 --> 00:26:03.870
or not from java concurrent we would say import Java.

379
00:26:04.950 --> 00:26:10.950
Now if you want to import something from Java utility concurrent a class from that, you would have

380
00:26:10.950 --> 00:26:12.450
to have that separately.

381
00:26:12.480 --> 00:26:19.980
You would say Java concurrent dot computable future because Computable Future is a class in this particular

382
00:26:20.010 --> 00:26:20.850
package.

383
00:26:21.480 --> 00:26:22.650
So that's how it is.

384
00:26:22.680 --> 00:26:29.700
Just don't don't think that if you want to access all these classes in the concurrent, just don't think

385
00:26:29.700 --> 00:26:32.790
that you can do something like Java dot.

386
00:26:34.060 --> 00:26:39.580
Import java dot util dot all, dot all.

387
00:26:39.580 --> 00:26:41.600
And don't assume that this is going to work.

388
00:26:41.620 --> 00:26:42.910
It's not going to work.

389
00:26:43.180 --> 00:26:46.860
Just don't assume that it would import all the classes in all of the packages.

390
00:26:46.870 --> 00:26:47.820
That's not going to work.

391
00:26:47.830 --> 00:26:50.170
So this would import all classes in util.

392
00:26:50.200 --> 00:26:57.220
Now if you want to import something from concurrent java concurrent, you would have to have.

393
00:26:58.050 --> 00:26:58.770
Explicitly.

394
00:26:58.770 --> 00:27:05.580
You need to specify the class name or you need to say star to import all of the classes in this package.

395
00:27:06.510 --> 00:27:07.470
So that's how it is.

396
00:27:07.470 --> 00:27:12.820
And the util directory here will have a directory called concurrent and it will have this.

397
00:27:12.840 --> 00:27:17.010
Similarly in our basic demo, we have the basics here folder.

398
00:27:17.130 --> 00:27:23.430
Now let's say if we want to create a subdirectory here, a sub package called sub, then you would create

399
00:27:23.430 --> 00:27:25.230
something like this as sub.

400
00:27:25.860 --> 00:27:31.620
Let's say it is a sub package and you would put any classes into this sub package, into this particular

401
00:27:31.620 --> 00:27:32.490
sub package.

402
00:27:32.490 --> 00:27:35.880
So it will be common semantic square .6. sub.

403
00:27:35.880 --> 00:27:37.290
That's the package statement.

404
00:27:37.500 --> 00:27:43.560
And if you want to use any of those classes, then you would say import com some dot semantics .6. sub

405
00:27:43.800 --> 00:27:47.430
dot the class name or dot star for importing everything.

406
00:27:48.360 --> 00:27:49.380
So that's with that.

407
00:27:49.710 --> 00:27:56.670
And one last thing I want to show here is so we have this thing called basics.

408
00:27:56.820 --> 00:28:03.150
Now we have all of these classes, if you want to compile all of these classes like the student student

409
00:28:03.150 --> 00:28:07.350
test and all all at once, then you can simply do this.

410
00:28:07.350 --> 00:28:12.240
You will have this and you can just say star dot java.

411
00:28:12.240 --> 00:28:13.110
So it's.

412
00:28:14.280 --> 00:28:15.260
Something like this.

413
00:28:15.270 --> 00:28:19.650
So, for instance, let me just do it one more time by going into that directory.

414
00:28:24.280 --> 00:28:25.310
So that's it.

415
00:28:25.330 --> 00:28:27.370
And it would compile all of them.

416
00:28:27.370 --> 00:28:32.140
So far we were only compiling one class at a time, so as you can see, it has created all the class

417
00:28:32.140 --> 00:28:32.740
files.

418
00:28:33.250 --> 00:28:34.240
So that's the thing.

419
00:28:34.240 --> 00:28:40.270
And I will also add a short note about this Java Star Java.

420
00:28:40.510 --> 00:28:42.100
So you can also look at that.

421
00:28:42.100 --> 00:28:45.730
It's not important, but I'm just going to add something in the resources section.

422
00:28:46.000 --> 00:28:47.380
So that's the class path.

423
00:28:47.380 --> 00:28:53.440
And just keep in mind that this whole thing that we discussed, the class path and all, so it is really

424
00:28:53.440 --> 00:28:58.090
useful when you're dealing with packages and when we are doing it this way on the command prompt.

425
00:28:58.090 --> 00:29:03.670
But when we switch over to ID like eclipse, the ID will not make use of the class path.

426
00:29:03.670 --> 00:29:07.900
It will take care of all of these things that we discussed internally.

427
00:29:08.350 --> 00:29:10.050
So that's when we switch over to ID.

428
00:29:10.270 --> 00:29:17.110
But now since we are not doing using an ID, so this is how it would work and ID would also do something

429
00:29:17.110 --> 00:29:17.800
similar.

430
00:29:18.280 --> 00:29:25.900
But it's just that we don't have to explicitly set the class path in order to access classes from other

431
00:29:25.900 --> 00:29:26.710
packages.

432
00:29:26.890 --> 00:29:28.390
So that's about it.

433
00:29:28.390 --> 00:29:36.820
And I hope that you have enjoyed learning about creating packages and I hope it is very clear also and

434
00:29:36.820 --> 00:29:37.590
that's about it.

435
00:29:37.600 --> 00:29:39.010
Thank you and happy coding.

