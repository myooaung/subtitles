1
00:00:02,110 --> 00:00:03,040
Hi there.

2
00:00:03,040 --> 00:00:03,640
This is Gerry.

3
00:00:04,240 --> 00:00:05,170
And welcome back.

4
00:00:05,590 --> 00:00:09,550
We know that Java is an object oriented programming language.

5
00:00:10,000 --> 00:00:15,370
And if you recollect from the previous section, we also said that an object oriented programming language

6
00:00:15,370 --> 00:00:19,450
helps model real world scenarios in a more natural way.

7
00:00:20,080 --> 00:00:27,460
And it does so with the help of objects and classes and object oriented programming, as its name suggests,

8
00:00:27,460 --> 00:00:29,500
is all about objects.

9
00:00:29,980 --> 00:00:32,259
And an object is created from a class.

10
00:00:32,740 --> 00:00:36,430
And in the last section we looked at the Hello World class.

11
00:00:37,060 --> 00:00:43,630
Both classes and objects are the most fundamental units in an object oriented programming language.

12
00:00:44,490 --> 00:00:49,320
In this lecture, we will first understand class and objects at a conceptual level.

13
00:00:49,740 --> 00:00:52,620
That is how they represent real world scenarios.

14
00:00:52,830 --> 00:00:56,220
And then we will see how they are represented in a Java program.

15
00:00:58,190 --> 00:01:05,030
Object oriented programming, which in short is often referred to as OUP or P, traces its roots back

16
00:01:05,030 --> 00:01:06,110
to 1960s.

17
00:01:06,470 --> 00:01:08,780
So it's a very old programming paradigm.

18
00:01:09,650 --> 00:01:14,750
And it was conceived to implement large, complex projects in a simple way.

19
00:01:15,900 --> 00:01:21,690
And by that we mean the help model real world scenarios in a more natural way.

20
00:01:22,110 --> 00:01:25,770
So that's the main benefit of object oriented programming.

21
00:01:26,280 --> 00:01:28,620
Let's take a look at a few real world examples.

22
00:01:29,490 --> 00:01:36,030
One example is a student registering in a particular course which is offered by a particular department.

23
00:01:37,080 --> 00:01:40,590
Another example would be a customer buying a product.

24
00:01:41,310 --> 00:01:49,440
Similarly, we can have a doctor treating a patient and all these examples can be more naturally modeled

25
00:01:49,440 --> 00:01:52,770
or represented in an object oriented environment.

26
00:01:53,310 --> 00:01:57,120
So let's see how that is possible and let's pick the first example here.

27
00:01:58,720 --> 00:02:04,240
So here we have three entities, student cores and department here.

28
00:02:04,270 --> 00:02:10,300
A student would have some data associated with him or her and can also have some behavior.

29
00:02:10,300 --> 00:02:18,370
Associated data would be things like student name, student age, gender address and so on, and behavior

30
00:02:18,370 --> 00:02:24,280
would be actions like registering for a course or updating one's profile information.

31
00:02:24,580 --> 00:02:30,550
Similarly, course on department would also be associated with some data and some behavior.

32
00:02:32,220 --> 00:02:39,780
And here is an instance where we have a student named John and we have four courses and two departments,

33
00:02:39,780 --> 00:02:41,370
computer science and civil.

34
00:02:41,940 --> 00:02:49,650
So here we have some instances with data being just the name like John or Java or computer science.

35
00:02:51,180 --> 00:02:55,020
And we can have these four courses offered by the US Department.

36
00:02:56,100 --> 00:02:58,710
And John can register in these three courses.

37
00:02:59,250 --> 00:03:03,750
So that's some behavior or actions happening between these instances.

38
00:03:04,230 --> 00:03:10,020
So this is a realistic scenario where the student, John, has registered in three courses which are

39
00:03:10,020 --> 00:03:11,820
offered by the CS Department.

40
00:03:13,540 --> 00:03:20,440
So an instance like John can be visualized in this way where data apart from name would also include

41
00:03:20,440 --> 00:03:25,570
other things like student ID, gender and courses that John has registered in.

42
00:03:26,170 --> 00:03:32,770
Similarly, John can also perform the two actions registering for a course and updating his profile

43
00:03:32,770 --> 00:03:33,520
information.

44
00:03:35,190 --> 00:03:36,960
In an object oriented environment.

45
00:03:36,990 --> 00:03:42,990
This data that Jones instance can have is generally referred to as state of the instance.

46
00:03:43,750 --> 00:03:50,830
While these actions as just behavior and this whole instance of John is referred to as an object.

47
00:03:51,430 --> 00:03:54,610
So the student John is represented by this object.

48
00:03:54,640 --> 00:04:01,000
And similarly, we can have other students represented by other objects which are unique to those students.

49
00:04:01,510 --> 00:04:07,990
So an object has both state and behavior, and these objects cannot exist by themselves.

50
00:04:08,410 --> 00:04:15,250
There should be some sort of a specification that tells the data that objects can have, like ID name,

51
00:04:15,250 --> 00:04:20,709
gender and so on, and also behavior like course registration and update profile.

52
00:04:21,459 --> 00:04:23,200
That specification is the class.

53
00:04:23,530 --> 00:04:28,870
So class is like a blueprint and objects are actual instances of the class.

54
00:04:29,470 --> 00:04:34,270
In fact, often the term instance is also used to refer to object.

55
00:04:36,040 --> 00:04:40,030
Here is an illustration of relation between a class and its objects.

56
00:04:40,660 --> 00:04:46,720
At the top we have the student class defining the state and behavior that its objects can have.

57
00:04:47,380 --> 00:04:54,310
State includes student information such as ID, name and gender, and there is only one behavior defined

58
00:04:54,310 --> 00:04:58,420
which allows the student objects to update their profile information.

59
00:04:59,170 --> 00:05:05,110
Now, for the sake of simplicity, course related stuff like the courses registered by a student has

60
00:05:05,110 --> 00:05:07,090
been omitted from this illustration.

61
00:05:07,970 --> 00:05:11,090
And we can also see the three student objects in ellipticals.

62
00:05:11,150 --> 00:05:13,940
And these are created from the student class.

63
00:05:14,660 --> 00:05:17,120
Each student object has its own state.

64
00:05:17,420 --> 00:05:23,720
For example, for students name is John, who is a male and has a student ID of 1000.

65
00:05:24,350 --> 00:05:29,930
Similarly, second student's name is Raj, who is also a male and has an ID of 1001.

66
00:05:30,560 --> 00:05:35,450
Third student's name is Anitha, who is a female and has an ID of 1002.

67
00:05:36,140 --> 00:05:41,030
And the behavior update profile would be associated with all three objects.

68
00:05:41,240 --> 00:05:43,940
That is, it is common to all three of them.

69
00:05:45,740 --> 00:05:47,060
Now in the student class.

70
00:05:47,090 --> 00:05:49,520
Update profile would be a method.

71
00:05:49,940 --> 00:05:52,220
So methods define the behavior.

72
00:05:52,580 --> 00:05:57,800
And in the last section we have seen the main method in the hello world class.

73
00:05:59,410 --> 00:06:02,350
An object state is defined by variables.

74
00:06:02,980 --> 00:06:09,280
Variables and methods in a class are considered as members of the class, and later in the section we

75
00:06:09,280 --> 00:06:12,100
will learn about both variables as well as methods.

76
00:06:13,030 --> 00:06:19,540
Now, apart from variables and methods, a class can also have other less commonly used members, such

77
00:06:19,540 --> 00:06:25,750
as nested classes and nested interfaces, which will be discussed much later in the second half of the

78
00:06:25,750 --> 00:06:26,260
course.

79
00:06:26,800 --> 00:06:34,210
So when someone refers to class members, they are normally referring to either variables or methods.

80
00:06:34,870 --> 00:06:36,080
So that's about it.

81
00:06:36,100 --> 00:06:39,820
Conceptually, that's all there is to class and it's objects.

82
00:06:40,550 --> 00:06:46,550
Now let's look at how they are represented in code and we are going to use the same student class example.

83
00:06:46,760 --> 00:06:50,120
But for now, let's not worry about writing the code.

84
00:06:50,600 --> 00:06:58,340
Our goal for now is to just get a feel for how to create an object from a class in Java and that we

85
00:06:58,340 --> 00:06:59,720
will see in the next slide.

86
00:07:01,550 --> 00:07:04,370
So here is the definition of student class.

87
00:07:04,670 --> 00:07:11,150
It is first declaring the variables which would represent the state that student objects can have.

88
00:07:11,600 --> 00:07:14,600
So we have ID name and gender.

89
00:07:15,020 --> 00:07:19,190
And variables are like containers as they hold some data.

90
00:07:20,020 --> 00:07:27,280
And each variable is also associated with something called a data type, which tells what type of data

91
00:07:27,280 --> 00:07:28,600
the variable can hold.

92
00:07:29,140 --> 00:07:37,570
For instance, ID is declared as an end and int means integer, which means that id can hold integers

93
00:07:37,570 --> 00:07:40,060
like 1000, 1001, and so on.

94
00:07:40,750 --> 00:07:44,440
Similarly, name and gender are declared with the data type.

95
00:07:44,440 --> 00:07:52,210
String and string implies that the variables can hold textual data like Anita for name and female for

96
00:07:52,210 --> 00:07:52,780
gender.

97
00:07:53,650 --> 00:07:59,290
In data pipe will be discussed later in the section, while string will be discussed in one of the subsequent

98
00:07:59,290 --> 00:07:59,980
sections.

99
00:08:00,950 --> 00:08:01,310
Next.

100
00:08:01,310 --> 00:08:08,090
The student class also defines the method of grade profile, which simply updates the existing name

101
00:08:08,090 --> 00:08:12,770
with a new name, and the new name is passed as input to the method.

102
00:08:13,570 --> 00:08:16,300
A method parameter represents the input.

103
00:08:16,720 --> 00:08:21,490
In this case, it has the name, new name and as of type string.

104
00:08:22,120 --> 00:08:26,380
Method parameter is also a variable, just like ID or name.

105
00:08:27,190 --> 00:08:33,570
And in the body of the method, the variable name is assigned with the value of the method parameter.

106
00:08:33,580 --> 00:08:40,809
New name equal to is assignment operator and it just assigns the value on the right to the variable

107
00:08:40,809 --> 00:08:41,530
on the left.

108
00:08:42,100 --> 00:08:44,860
Methods will also be discussed later in the section.

109
00:08:45,340 --> 00:08:47,380
So that's the student class.

110
00:08:47,410 --> 00:08:52,990
Next, let's see how we can create a student object and then initialize it state.

111
00:08:53,020 --> 00:08:58,510
And we will also see how the student's only method update profile can be executed.

112
00:09:00,060 --> 00:09:03,680
And for that we will use a new class called Student Test.

113
00:09:03,690 --> 00:09:08,340
And let's assume that the code is written in this main method of the class.

114
00:09:09,880 --> 00:09:14,080
So first step is to create a student object and this is how it is done.

115
00:09:14,170 --> 00:09:20,920
You would use the keyword new, which would be followed by the keyword student as we want to create

116
00:09:20,920 --> 00:09:24,910
an object of the student, which is in turn followed by parentheses.

117
00:09:25,540 --> 00:09:32,230
So new, followed by student, followed by parentheses, would create a student object which is then

118
00:09:32,230 --> 00:09:40,780
assigned to a variable called S whose data type is student, which indicates that S would hold a student

119
00:09:40,780 --> 00:09:41,320
object.

120
00:09:42,000 --> 00:09:48,750
So it is similar to the way we declared the variable ID in the student class with ID, the data type

121
00:09:48,750 --> 00:09:52,380
was end, indicating that it would store an integer value.

122
00:09:54,260 --> 00:09:57,470
So we created a student object named as next.

123
00:09:57,470 --> 00:09:59,570
We need to initialize its state.

124
00:10:00,110 --> 00:10:06,680
That is, we need to set the values for the variables ID, name and gender that the student class has

125
00:10:06,680 --> 00:10:07,310
declared.

126
00:10:07,670 --> 00:10:09,620
And for that we use the dot operator.

127
00:10:10,380 --> 00:10:16,680
That is, we would have the object name as followed by dot, followed by variable name, which here

128
00:10:16,680 --> 00:10:21,690
is ID and then we assign it with a value which is 1000 in this case.

129
00:10:22,510 --> 00:10:29,170
To set name we have as followed by DOT, followed by the variable name and it is assigned with a value.

130
00:10:29,200 --> 00:10:33,490
Joanne Similarly, gender is assigned with male.

131
00:10:34,400 --> 00:10:40,600
Here we have double quotes and closing Joanne and mail, but not for the ID value thousand.

132
00:10:40,850 --> 00:10:44,030
And that's because Joanne and mail are strings.

133
00:10:44,210 --> 00:10:47,810
And in Java for strings we need to use and double codes.

134
00:10:48,380 --> 00:10:51,260
So the student object as now has a state.

135
00:10:51,980 --> 00:10:58,670
However, here, let's assume that the name was misspelled as Joanne instead of John.

136
00:10:59,150 --> 00:11:00,650
And so we need to fix it.

137
00:11:02,300 --> 00:11:09,980
And for that we need to execute the update profile method and pass it the correct name John as input.

138
00:11:10,640 --> 00:11:15,020
And the method would then update the name variable with the new name John.

139
00:11:15,780 --> 00:11:22,830
So to execute update profile method, we once again use the dot operator that is object name as is followed

140
00:11:22,830 --> 00:11:28,740
by Dart, which is followed by update profile and we are passing John as input to the method.

141
00:11:29,690 --> 00:11:36,500
Here we say that we are invoking or calling the object profile method on the object as.

142
00:11:37,330 --> 00:11:43,060
So that's how we create an object, initialize it with State and invoke its methods.

143
00:11:43,860 --> 00:11:46,110
Actually to initialize object state.

144
00:11:46,110 --> 00:11:52,230
It is normally done using something called constructors, but they will be discussed later in the section.

145
00:11:52,680 --> 00:11:58,830
So doing it the way we see here is not done in professional projects, but this is just for us to get

146
00:11:58,830 --> 00:12:01,110
started for initializing the state.

147
00:12:01,590 --> 00:12:07,920
Also note that in a real object oriented software you will have tons of objects communicating with each

148
00:12:07,920 --> 00:12:08,400
other.

149
00:12:08,790 --> 00:12:15,270
And the way one object communicates with other is by invoking a method of the object and passing any

150
00:12:15,270 --> 00:12:17,280
necessary data as input.

151
00:12:17,790 --> 00:12:19,170
So that's about it.

152
00:12:19,200 --> 00:12:26,430
I hope you now understand what a Class An object is, how they represent real world entities like student,

153
00:12:26,520 --> 00:12:28,920
and how they can be created in Java.

154
00:12:29,460 --> 00:12:31,680
Thank you and see you in the next lecture.

