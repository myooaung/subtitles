WEBVTT
1
00:00:02.100 --> 00:00:03.050
Hi there.

2
00:00:03.060 --> 00:00:04.230
This is Lulu.

3
00:00:04.230 --> 00:00:05.190
And welcome back.

4
00:00:05.310 --> 00:00:10.380
Let's now look at the collection operations which are represented by the collect methods.

5
00:00:10.710 --> 00:00:12.570
And these are overloaded methods.

6
00:00:12.570 --> 00:00:19.560
And as the name implies, the collect methods are used to collect a stream of elements into a container.

7
00:00:19.950 --> 00:00:25.350
Container can be something like a list or a set or a map or any regular object.

8
00:00:25.350 --> 00:00:27.960
It need not be a data structure like a list or a set.

9
00:00:27.960 --> 00:00:31.500
It can be any regular object, and so it has to be a container.

10
00:00:31.980 --> 00:00:35.730
And the collect methods are very important and are also very interesting.

11
00:00:35.970 --> 00:00:41.850
They are very important because it is very common to collect a stream of elements into something like

12
00:00:41.850 --> 00:00:42.360
a list.

13
00:00:42.780 --> 00:00:48.870
And they are also very interesting because we can also group the stream of elements into something like

14
00:00:48.870 --> 00:00:54.390
a map so we can do grouping and we can also do some complex grouping like within a map.

15
00:00:54.390 --> 00:00:56.730
The value need not be a single value.

16
00:00:56.730 --> 00:00:59.370
It can also be another data structure like a list.

17
00:00:59.400 --> 00:01:05.850
So we can do some interesting stuff and we can do all of this in a very elegant way because we are using

18
00:01:05.850 --> 00:01:07.440
declarative style of programming.

19
00:01:07.770 --> 00:01:13.800
So it's going to be very interesting and it's a very important lecture on this concept called mutable

20
00:01:13.800 --> 00:01:18.450
reduction is also associated with the collect method, and it's also very important.

21
00:01:18.450 --> 00:01:21.840
So let's go ahead and look at what the collection operations are.

22
00:01:22.050 --> 00:01:25.890
And we have a series of lectures dedicated to just the collect method.

23
00:01:25.890 --> 00:01:31.500
So we are going to explore the collect method in a very detailed way because it's a very important method.

24
00:01:33.400 --> 00:01:38.380
And from the earlier lecture, we know that reduction operations can be of two types and one of them

25
00:01:38.380 --> 00:01:42.580
is represented by the reduced methods and the other by the collect methods.

26
00:01:42.730 --> 00:01:46.210
So the collection operations are also a type of reduction operations.

27
00:01:46.970 --> 00:01:51.710
But the reduction that the collect method does is referred to as mutable reduction.

28
00:01:52.310 --> 00:01:56.090
And the one that the reduced method does is immutable reduction.

29
00:01:56.450 --> 00:02:02.300
So what we have seen earlier with the reduction operations with the reduced method was immutable reduction.

30
00:02:02.600 --> 00:02:09.919
So by design, reduce method would perform immutable reduction, whereas by design collect methods would

31
00:02:09.919 --> 00:02:12.230
do something called mutable reduction.

32
00:02:12.590 --> 00:02:17.510
And this distinction between reduce and collect is very important.

33
00:02:17.540 --> 00:02:22.160
And a lot of sources do not explain this distinction in a clear way.

34
00:02:22.190 --> 00:02:29.240
And because of that, developers can be confused about the reduced method, and they might misuse the

35
00:02:29.240 --> 00:02:32.510
reduced method by using mutable reduction.

36
00:02:32.510 --> 00:02:35.300
So they might use reduce with the mutable reduction.

37
00:02:35.330 --> 00:02:40.610
In fact, in the last lecture when we were dealing with the third version of the reduced method, which

38
00:02:40.610 --> 00:02:46.970
had the three parameters like the identity, the Combiner and the accumulator, we actually misused

39
00:02:46.970 --> 00:02:48.020
the reduced method.

40
00:02:48.050 --> 00:02:50.950
We used a mutable reduction and that's not right.

41
00:02:50.960 --> 00:02:55.320
And if we do that, we can end up with incorrect result or inefficient results.

42
00:02:55.340 --> 00:03:01.010
So we are going to look at this distinction between the reduced methods and the collect methods.

43
00:03:01.010 --> 00:03:03.560
And so it is a very important lecture.

44
00:03:05.220 --> 00:03:09.780
And we know that the reduced method reduces the stream into a single value.

45
00:03:10.630 --> 00:03:14.020
And it can be used to do things like summing the stream.

46
00:03:14.020 --> 00:03:17.290
Elements are finding a maximum or the minimum.

47
00:03:18.310 --> 00:03:24.340
And the current method is used to reduce the stream into a single container, and the container can

48
00:03:24.340 --> 00:03:31.060
be a collection like a list or a set or a map, or it can also be an object like string builder, or

49
00:03:31.060 --> 00:03:33.880
it can also be something called as a summary object.

50
00:03:33.970 --> 00:03:39.550
And a summary object essentially summarizes the stream through different summary values.

51
00:03:39.550 --> 00:03:41.590
So it is a container object.

52
00:03:41.620 --> 00:03:47.770
Now, for instance, if the stream is a stream of numbers, then the summary object can have a list

53
00:03:47.770 --> 00:03:52.390
of summary values like a sum or average or a maxima or minima.

54
00:03:52.630 --> 00:03:56.890
And all of that would be encapsulated in this thing called as a summary object.

55
00:03:57.630 --> 00:04:02.970
And as we mentioned earlier, the reduction performed by the collect method is the notable reduction.

56
00:04:04.330 --> 00:04:06.940
And this is a slide from the earlier lecture.

57
00:04:07.030 --> 00:04:09.160
This is how the Reduce method works.

58
00:04:09.400 --> 00:04:14.000
So we are reducing a stream of elements into a single value, which is 15.

59
00:04:14.020 --> 00:04:16.680
So the plus operation is being applied here.

60
00:04:16.690 --> 00:04:20.200
So that's the reduction operation and that's the accumulator function.

61
00:04:20.350 --> 00:04:24.280
And that is being repetitively applied on the stream elements.

62
00:04:24.640 --> 00:04:26.740
And this is an immutable reduction.

63
00:04:27.070 --> 00:04:29.530
And finally, we are getting the value of 15.

64
00:04:30.890 --> 00:04:33.420
And this is how the collect method works.

65
00:04:33.440 --> 00:04:37.610
So the collect method reduces the stream into a container.

66
00:04:37.790 --> 00:04:40.820
So at the top we have the stream elements five, one and three.

67
00:04:40.940 --> 00:04:46.040
And at the bottom we have the container, which has the elements five, one and three.

68
00:04:46.460 --> 00:04:50.840
So we start off with the container, which we can see at the top.

69
00:04:50.990 --> 00:04:54.170
And a is nothing but the accumulator function.

70
00:04:54.320 --> 00:04:59.810
And just like in the case of the reduced method, the accumulator function is also applied repetitively

71
00:04:59.810 --> 00:05:00.920
in different steps.

72
00:05:01.070 --> 00:05:07.160
So in the first step, it takes an empty container on the first element five, and then it mutates the

73
00:05:07.160 --> 00:05:08.270
empty container.

74
00:05:08.390 --> 00:05:11.120
And with that, we have the container with the value file.

75
00:05:11.840 --> 00:05:17.390
And in the second iteration, which is the second step of the accumulation process, the container with

76
00:05:17.390 --> 00:05:22.340
the value five will be combined with the value one, which is an extreme element.

77
00:05:22.430 --> 00:05:27.830
And hence the container is once again mutated to get the value five and one.

78
00:05:27.830 --> 00:05:34.700
So it has the value 511 and that same container will be used once again in the third step and it will

79
00:05:34.700 --> 00:05:36.710
be accumulated with the value three.

80
00:05:36.920 --> 00:05:42.020
And so the final mutated container will have the values five, one and three.

81
00:05:42.470 --> 00:05:48.830
So the same container is being used here and it is being repetitively mutated with each step of the

82
00:05:48.830 --> 00:05:49.670
accumulation.

83
00:05:49.670 --> 00:05:51.350
So that's what is happening here.

84
00:05:52.720 --> 00:05:57.780
And so we need a supplier here because we have to create this container.

85
00:05:57.790 --> 00:06:01.420
So the beginning of the accumulation process, we need to create the container.

86
00:06:01.420 --> 00:06:07.600
And for that we use a supplier and supplier we know is a functional interface which can be used to create

87
00:06:07.600 --> 00:06:08.770
new objects.

88
00:06:08.970 --> 00:06:09.550
Right.

89
00:06:09.550 --> 00:06:15.280
And the accumulator is another function which does the accumulation process.

90
00:06:15.850 --> 00:06:22.870
And finally, if we are dealing with a parallel stream, we also need a combiner because we can consider

91
00:06:22.870 --> 00:06:29.020
this whole process of accumulation as being done in one segment when we are dealing with the parallel

92
00:06:29.020 --> 00:06:33.550
stream, because parallel stream is going to partition the elements into different segments.

93
00:06:33.580 --> 00:06:39.250
So in this case, we will have one container, one accumulated value, which is a container.

94
00:06:39.250 --> 00:06:41.800
In this case it has a values five, one and three.

95
00:06:42.040 --> 00:06:48.820
And we will also have other segments, and those segments will also have similar containers and we would

96
00:06:48.820 --> 00:06:49.780
have to combine them.

97
00:06:49.780 --> 00:06:52.630
And for that we need the combined function.

98
00:06:52.990 --> 00:06:58.990
So the container function is going to combine the accumulated containers from each of the segments.

99
00:06:58.990 --> 00:07:02.380
So each of the segments will have their own containers.

100
00:07:03.220 --> 00:07:09.490
So now let's head over to my editor to look at the mutable redaction process and the correct method.

101
00:07:11.960 --> 00:07:16.760
Here we are in the stream operations class, in the overloaded reductions method, which we have seen

102
00:07:16.760 --> 00:07:17.390
earlier.

103
00:07:17.540 --> 00:07:22.970
In this method, we had the two methods, the two versions of the reduced methods, the second version

104
00:07:22.970 --> 00:07:23.990
and the third version.

105
00:07:23.990 --> 00:07:27.230
And here is the second version and here is the third version.

106
00:07:27.560 --> 00:07:32.540
And earlier we said that the third version in the third version, we have used mutable reduction and

107
00:07:32.540 --> 00:07:33.830
we shouldn't have done that.

108
00:07:33.830 --> 00:07:35.780
So you're going to focus on that method.

109
00:07:35.930 --> 00:07:41.090
And so these are all the things that we are going to do in this particular demo.

110
00:07:41.270 --> 00:07:46.280
So I want to begin with reiterating on the two overloaded reduced methods.

111
00:07:46.280 --> 00:07:51.890
So I just want to bring a little bit more clarity on the two versions when we have to use one of them.

112
00:07:51.890 --> 00:07:53.570
So we are going to look at that.

113
00:07:53.600 --> 00:07:59.330
And I'm also going to focus more on the reduce method on the third version of the reduced method.

114
00:07:59.330 --> 00:08:02.960
And we will also look at something called the Stream API design principle.

115
00:08:02.960 --> 00:08:08.570
And finally we will look at the reduce with the mutable reduction and the issues that we have with that.

116
00:08:08.570 --> 00:08:12.890
So we are going to look at that and from there we are going to look at the collect methods.

117
00:08:13.310 --> 00:08:15.920
So these are some of the things that we are going to look at.

118
00:08:15.920 --> 00:08:18.410
So it's going to be an in-depth demonstration.

119
00:08:19.300 --> 00:08:23.290
So here we had the grades and we were reducing these grades.

120
00:08:23.290 --> 00:08:25.440
Here we were simply concatenating.

121
00:08:25.450 --> 00:08:28.240
So this is the second version of the reduced method.

122
00:08:28.240 --> 00:08:29.170
Here it is.

123
00:08:29.170 --> 00:08:32.980
So it takes an identity and it takes a binary operator.

124
00:08:32.980 --> 00:08:37.150
In this case, the binary operator is simply performing the concatenation.

125
00:08:37.419 --> 00:08:41.470
So here as the stream source, we are just the stream source is an array.

126
00:08:41.710 --> 00:08:48.610
So the binary operator takes two parameters of the same type and produces an output of the same type.

127
00:08:48.610 --> 00:08:53.380
So here we are concatenating two strings and the output is also another string.

128
00:08:53.650 --> 00:09:02.560
Now with regards to the third reduced method, so it takes an identity and an accumulator like in the

129
00:09:02.560 --> 00:09:06.310
case of the second version, but it also takes a combiner.

130
00:09:06.340 --> 00:09:12.130
Now the real difference between the second and the third version is that the accumulator here is a bi

131
00:09:12.130 --> 00:09:12.790
function.

132
00:09:12.790 --> 00:09:19.000
So earlier in the second version about it's a it's a byte, it's a binary operator, but here it is

133
00:09:19.000 --> 00:09:25.510
a bi function which takes two parameters of two different types and produces an output of one of the

134
00:09:25.510 --> 00:09:25.930
types.

135
00:09:25.930 --> 00:09:28.390
So binary with binary operator, it's of the same type.

136
00:09:28.390 --> 00:09:30.190
The two parameters are of the same times.

137
00:09:30.190 --> 00:09:37.750
So here in the third version, it is taking a string builder and a string and it is generating a string

138
00:09:37.750 --> 00:09:38.320
builder.

139
00:09:38.590 --> 00:09:41.710
So it's taking two elements of two different types.

140
00:09:41.920 --> 00:09:43.870
So that's the main difference.

141
00:09:43.870 --> 00:09:50.860
So if you are facing a scenario where you have the parameters with two different types, then you would

142
00:09:50.860 --> 00:09:52.990
have to go with this reduced version.

143
00:09:53.530 --> 00:09:59.140
But if the parameters will have the same type, then you can use the second version here and both of

144
00:09:59.140 --> 00:10:01.000
them will work with parallel streams.

145
00:10:01.180 --> 00:10:06.730
But in case of this one, when we are dealing with the parallel streams, then we would have to use

146
00:10:06.730 --> 00:10:12.760
a combiner function because in the parallel stream we are going to have different segments and each

147
00:10:12.760 --> 00:10:19.000
of these segments will produce a single string builder in this case, and we need to combine them.

148
00:10:19.000 --> 00:10:23.950
And the accumulator cannot be used here because the types are different with this accumulator.

149
00:10:23.950 --> 00:10:30.850
But in case of a parallel stream, each of the segments will produce an accumulated value of the type

150
00:10:30.850 --> 00:10:31.660
string builder.

151
00:10:31.660 --> 00:10:36.490
So we need to combine the two accumulator values which are of the same type.

152
00:10:36.490 --> 00:10:38.710
And so we have to use this combiner.

153
00:10:38.920 --> 00:10:39.210
Right.

154
00:10:39.220 --> 00:10:40.450
So that's the main thing.

155
00:10:40.630 --> 00:10:45.940
So the main difference between the two functions is the accumulator function and one of them it has

156
00:10:45.940 --> 00:10:49.210
the same type and but in the other one we have different types.

157
00:10:49.210 --> 00:10:55.090
And if you have to use an accumulator which needs two different types, then you have to go with this

158
00:10:55.090 --> 00:10:55.510
one.

159
00:10:56.510 --> 00:11:02.690
Now, the second thing is, if you think about it, we actually do not need this combiner if we are

160
00:11:02.690 --> 00:11:08.630
dealing with a sequential stream rather than a parallel stream now with a sequential stream, what happens

161
00:11:08.630 --> 00:11:13.670
is we have a single segment right where we are creating the string builder and then we are appending

162
00:11:13.670 --> 00:11:19.010
a string and that is done repetitively until we process all of the stream elements.

163
00:11:19.010 --> 00:11:20.870
And finally a string builder is written.

164
00:11:20.900 --> 00:11:28.040
So we do not need this particular combiner function which combines two different string builders, so

165
00:11:28.040 --> 00:11:28.980
we don't need that.

166
00:11:29.000 --> 00:11:37.520
So you might ask why not have two different versions of the reduced method, one for sequential stream

167
00:11:37.520 --> 00:11:39.230
and one for parallel stream?

168
00:11:39.800 --> 00:11:42.310
It's a normal question and we can ask that.

169
00:11:42.320 --> 00:11:50.420
But the thing is, the language designers wanted to have the stream API to be agnostic to the underlying

170
00:11:50.450 --> 00:11:51.380
type of stream.

171
00:11:51.560 --> 00:11:53.180
So they wanted.

172
00:11:54.270 --> 00:11:58.180
The API to not differentiate between sequential and parallel streams.

173
00:11:58.200 --> 00:12:04.410
So that's the design principle that the stream API offers and that's what they wanted.

174
00:12:04.650 --> 00:12:07.920
And the benefit of that is let's take an example.

175
00:12:07.920 --> 00:12:11.130
Let's say that we are having the stream and installed.

176
00:12:11.220 --> 00:12:14.400
So we are just having a variable which takes the stream.

177
00:12:14.580 --> 00:12:20.070
And let's say we have another method which actually does the reduction in that method.

178
00:12:20.070 --> 00:12:21.160
We are doing the reduce.

179
00:12:21.180 --> 00:12:23.160
And that method will accept the stream.

180
00:12:23.250 --> 00:12:28.770
So within that method, let's assume that we have that other fictitious reduced method, which has only

181
00:12:28.770 --> 00:12:31.260
two parameters and it does the reduction.

182
00:12:31.530 --> 00:12:36.150
Now later, after some time, if the developer changes the stream into a parallel stream because it's

183
00:12:36.150 --> 00:12:38.400
very easy to change the stream into a parallel stream.

184
00:12:38.670 --> 00:12:45.510
And once you do that, then it's not going to work if the parallel stream is going to be passed to that

185
00:12:45.510 --> 00:12:49.440
method, which uses the reduced method, which works with only sequential stream, then it's going to

186
00:12:49.440 --> 00:12:49.830
fail.

187
00:12:50.250 --> 00:12:57.840
So the language designers wanted to avoid that by making sure that the API is not does not differentiate

188
00:12:57.840 --> 00:12:59.990
between sequential and parallel streams.

189
00:13:00.000 --> 00:13:05.610
So even if we change it to a stream, if we change it to a parallel stream, then the rest of the pipeline

190
00:13:05.610 --> 00:13:08.940
should, should not change and everything should work perfectly.

191
00:13:09.270 --> 00:13:10.380
So that's the thing.

192
00:13:10.650 --> 00:13:17.550
And but another thing is, although the Combiner function is not being used here for a sequential stream,

193
00:13:17.760 --> 00:13:23.450
but in a future version, the COMBINER could also be used for even for a sequential stream.

194
00:13:23.460 --> 00:13:29.340
So because that is an implementation detail and the language designers might decide that the reduced

195
00:13:29.340 --> 00:13:34.190
method can also use the Combiner function in order to improve the performance.

196
00:13:34.200 --> 00:13:40.620
But that's an implementation detail and implementations can change with any version of of the JDK.

197
00:13:40.740 --> 00:13:41.880
So we never know.

198
00:13:42.710 --> 00:13:45.330
Now one other thing is here.

199
00:13:45.480 --> 00:13:52.680
This combiner cannot be null OC So let's just test that even for a sequential since this is a sequential

200
00:13:52.680 --> 00:13:53.190
stream.

201
00:13:53.220 --> 00:13:57.140
Now if we run it, as we can see, we are getting an Al Pointer exception.

202
00:13:57.150 --> 00:13:58.460
So it cannot be null.

203
00:13:58.470 --> 00:14:00.660
So just keep that in mind.

204
00:14:01.020 --> 00:14:04.910
Now let's also test the design principle itself.

205
00:14:04.920 --> 00:14:07.590
So let's just change this into a parallel stream.

206
00:14:08.990 --> 00:14:14.360
So this is a method from the from the stream interface which it inherits from the parallel stream,

207
00:14:14.360 --> 00:14:17.360
from the base stream stream extents based stream.

208
00:14:17.360 --> 00:14:18.650
So it's coming from there.

209
00:14:18.650 --> 00:14:20.690
So let's just change this.

210
00:14:21.750 --> 00:14:24.960
And as we can see, the output is still A, A and B.

211
00:14:24.960 --> 00:14:26.130
So this is cat one.

212
00:14:26.190 --> 00:14:27.330
This is the concrete one.

213
00:14:27.570 --> 00:14:34.770
So let's do the same thing with also the third version of the reduced method.

214
00:14:37.450 --> 00:14:44.940
And now you can see that here contact to has a different output so it doesn't have the same output.

215
00:14:44.950 --> 00:14:46.210
Let me run it one more time.

216
00:14:46.540 --> 00:14:52.450
Once again, you can see a different output and we are not getting A and B, so as soon as we have changed

217
00:14:52.450 --> 00:14:56.050
it to parallel, so the output has blown up.

218
00:14:56.050 --> 00:14:57.820
So we are not getting the same output.

219
00:14:58.210 --> 00:15:04.960
So that tip that I want to suggest is whenever you are working with streams, always test your output

220
00:15:04.960 --> 00:15:06.100
with a parallel stream.

221
00:15:06.100 --> 00:15:11.800
So in order to test for correctness, you should also make it parallel and you should test that you

222
00:15:11.800 --> 00:15:18.010
have the same output, otherwise you might end up having an incorrect result like the way we are seeing

223
00:15:18.010 --> 00:15:18.580
here.

224
00:15:19.270 --> 00:15:22.720
So always try to test with a parallel stream.

225
00:15:23.110 --> 00:15:23.830
It might work.

226
00:15:23.830 --> 00:15:28.510
It might give you the correct result with a sequential stream, but it might give a wrong result with

227
00:15:28.510 --> 00:15:29.500
the parallel stream.

228
00:15:30.340 --> 00:15:34.840
And in future you might actually convert it into a parallel stream to so make sure it also works with

229
00:15:34.840 --> 00:15:35.890
the parallel stream.

230
00:15:35.890 --> 00:15:38.860
So that's the design principle is clear here.

231
00:15:38.860 --> 00:15:47.320
But in this case, the reason we have this error is because read use method here is use is doing a mutable

232
00:15:47.320 --> 00:15:48.010
reduction.

233
00:15:48.370 --> 00:15:55.840
So here what is happening is this is a container, the string builder is a container and here we are

234
00:15:55.840 --> 00:15:59.350
making it parallel, which means that we have multiple segments.

235
00:15:59.380 --> 00:16:03.220
The the method is going to partition the.

236
00:16:04.380 --> 00:16:11.160
Elements into two groups and it's our three groups, so it's going to use the different course.

237
00:16:11.160 --> 00:16:15.630
And for all these course, we'll share the same container.

238
00:16:15.960 --> 00:16:18.390
So the same container will be used for all of them.

239
00:16:18.690 --> 00:16:23.670
And so there needs to be a coordination between the threads and here the string builder is not thread

240
00:16:23.710 --> 00:16:29.610
safe, there's going to be a race condition and because of that we can see incorrect results.

241
00:16:29.880 --> 00:16:31.560
So that's one of the main things.

242
00:16:32.490 --> 00:16:40.260
And another thing is, once the accumulation is done, the combining function has to combine the containers.

243
00:16:40.260 --> 00:16:45.120
And in this case we have a single container and we are going to combine the same container.

244
00:16:45.120 --> 00:16:47.760
So we are going to combine the same container with itself.

245
00:16:48.030 --> 00:16:53.000
So because of that, we also have this problem of incorrect result.

246
00:16:53.010 --> 00:16:54.360
So it's just the two cases.

247
00:16:54.360 --> 00:16:57.570
One is the string builder is not safe.

248
00:16:57.570 --> 00:17:00.780
And the second issue is also the combiner function itself.

249
00:17:01.230 --> 00:17:02.250
So that's the thing.

250
00:17:02.250 --> 00:17:07.770
So we are mutating the same container and it's not safe.

251
00:17:07.770 --> 00:17:12.510
So that's the main problem and we should not be using a reduced method for this.

252
00:17:12.510 --> 00:17:16.349
Reduce method is only for for doing immutable detection.

253
00:17:16.349 --> 00:17:20.700
So if you look at the reduced method, it says it uses a bi function.

254
00:17:20.970 --> 00:17:23.490
But next we are going to look at the collect method.

255
00:17:23.490 --> 00:17:25.470
It uses a by consumer.

256
00:17:25.560 --> 00:17:29.400
And when we say consumer, consumer does not return anything.

257
00:17:29.400 --> 00:17:33.780
And so it is naturally designed for mutating the container.

258
00:17:34.170 --> 00:17:35.760
So let's go ahead and look at that.

259
00:17:35.760 --> 00:17:39.210
Also, let me just copy this whole thing.

260
00:17:41.980 --> 00:17:45.280
Here we have this method called as mutable reduction.

261
00:17:45.880 --> 00:17:49.150
So here I'm going to demonstrate the collect method.

262
00:17:49.420 --> 00:17:50.890
So it's just the same thing.

263
00:17:50.890 --> 00:17:53.260
So let me just change this to collect.

264
00:17:55.030 --> 00:17:58.510
Now with colored, we said that we need a supplier.

265
00:17:58.540 --> 00:18:03.280
Earlier in the lecture, we said we need a supplier here because that's the first parameter.

266
00:18:03.280 --> 00:18:10.270
So if I hover here, it says we need a supplier and we need an accumulator and we also need a combiner,

267
00:18:10.270 --> 00:18:13.030
but it is a supplier, so it's a functional interface.

268
00:18:13.030 --> 00:18:19.180
So we cannot just create an object, but we need to pass either an method reference or a lambda.

269
00:18:19.180 --> 00:18:21.670
So let's since it's a supplier, let's pass.

270
00:18:21.670 --> 00:18:28.750
This supplier has a method called get and all the supplier does is create a new instance of string builder.

271
00:18:29.980 --> 00:18:32.620
And so this is also a parallel stream.

272
00:18:32.620 --> 00:18:37.810
So here within each segment, a container is going to be created.

273
00:18:37.810 --> 00:18:42.520
So each segment will have its own container and the rest of the things is just the same.

274
00:18:42.520 --> 00:18:45.880
So let me just copy the print statement to here.

275
00:18:59.060 --> 00:19:00.230
Let me just uncomment this.

276
00:19:00.230 --> 00:19:03.080
So we are invoking the mutable reduction from the main method.

277
00:19:03.920 --> 00:19:04.700
Let's go back.

278
00:19:05.430 --> 00:19:06.550
And we're on this.

279
00:19:07.770 --> 00:19:12.540
So as you can see, it prints A, A and B, this one is printing wrong.

280
00:19:12.540 --> 00:19:18.420
So let me also change this back to just a normal sequential stream and let's just test the output here.

281
00:19:20.100 --> 00:19:22.530
So once again, it's just the same output.

282
00:19:22.530 --> 00:19:28.200
So we're getting the same output, whether it is a sequential stream or whether it is a parallel stream.

283
00:19:29.070 --> 00:19:34.560
So so we need to use the colored method and the colored method like we see here.

284
00:19:34.950 --> 00:19:38.670
It also has an accumulator, it also has a combiner, but it takes a supplier.

285
00:19:38.820 --> 00:19:43.320
And but more importantly, the accumulator here is a bike consumer.

286
00:19:43.530 --> 00:19:50.430
Whether I use it was a by function, a buy function returns a value, whereas a by consumer does not

287
00:19:50.430 --> 00:19:51.480
return anything.

288
00:19:51.810 --> 00:19:56.880
It just has the method accept which which does not return anything.

289
00:19:56.880 --> 00:19:57.840
It has a void.

290
00:19:57.960 --> 00:20:03.300
So one of the parameters has to be a container which is being accumulated.

291
00:20:04.650 --> 00:20:06.310
Which is which is being mutated.

292
00:20:06.330 --> 00:20:07.450
So that's the thing.

293
00:20:07.470 --> 00:20:09.840
Now, there is also a version here.

294
00:20:11.340 --> 00:20:16.710
We can make this mutable reduction work with a reduce by doing this.

295
00:20:17.040 --> 00:20:21.080
So here what we are doing is this is almost the same.

296
00:20:21.090 --> 00:20:21.930
Everything is same.

297
00:20:21.930 --> 00:20:28.380
It's just that here, instead of just saying as a pen, so instead of just working on this particular

298
00:20:28.590 --> 00:20:34.110
parameter, which is the container, we are creating a new container.

299
00:20:34.440 --> 00:20:35.100
Here it is.

300
00:20:35.130 --> 00:20:37.740
And then we are appending the string builder.

301
00:20:37.740 --> 00:20:41.910
This one, because there are two open methods, overloaded methods.

302
00:20:41.910 --> 00:20:45.210
One of them can take a string builder and the other can take a string.

303
00:20:45.210 --> 00:20:50.340
So in this case, we are using both of the overloaded methods, one, to append a string builder and

304
00:20:50.340 --> 00:20:53.100
the other two append the string itself.

305
00:20:53.280 --> 00:20:55.020
So but the issue with this.

306
00:20:55.020 --> 00:20:56.520
So this will generate the correct output.

307
00:20:56.520 --> 00:20:57.360
Let me run it.

308
00:20:58.640 --> 00:20:58.910
Here.

309
00:20:58.910 --> 00:21:00.150
This one also has parallel.

310
00:21:00.170 --> 00:21:00.890
Here it is.

311
00:21:00.890 --> 00:21:02.990
And it is still producing a B.

312
00:21:03.020 --> 00:21:03.500
Here it is.

313
00:21:03.710 --> 00:21:04.520
Cat three.

314
00:21:04.550 --> 00:21:05.540
It's called cat three.

315
00:21:05.540 --> 00:21:07.280
And we are printing cat three here.

316
00:21:07.730 --> 00:21:13.970
But the problem with this is we have these different accumulation steps and each of them is creating

317
00:21:13.970 --> 00:21:15.350
a new string builder.

318
00:21:15.980 --> 00:21:18.370
So that's an inefficient thing.

319
00:21:18.380 --> 00:21:24.230
So we are not mutating the same string builder, but we are creating a new string builder with each

320
00:21:24.230 --> 00:21:24.530
step.

321
00:21:24.540 --> 00:21:27.200
So that's the difference with the collect method.

322
00:21:27.440 --> 00:21:33.020
So this method is, although it gives the correct result, it is still inefficient.

323
00:21:33.980 --> 00:21:35.520
So that's that's about it.

324
00:21:35.540 --> 00:21:39.290
So this is the first version of the correct method, and it has all of this.

325
00:21:39.440 --> 00:21:44.050
There is also a simplified version which is the overloaded collect method.

326
00:21:44.060 --> 00:21:44.810
Let's.

327
00:21:45.080 --> 00:21:47.540
And that will be discussed in the next lecture.

328
00:21:47.540 --> 00:21:50.210
But let's just use it here.

329
00:21:50.420 --> 00:21:57.770
So instead of having all of these three parameters functions, we can just say collectors.

330
00:21:57.770 --> 00:22:01.460
Collectors is a class in the Java utility stream.

331
00:22:01.460 --> 00:22:08.330
It's, it's a helper class and it provides some pre-defined types called as collectors.

332
00:22:08.510 --> 00:22:13.250
And those collectors can help us achieve this kind of a functionality.

333
00:22:13.250 --> 00:22:20.420
So there is a collector for doing this kind of a job and it's called as joining call joining and.

334
00:22:21.710 --> 00:22:23.410
So joining on collectors.

335
00:22:23.420 --> 00:22:24.530
Let me import that.

336
00:22:27.580 --> 00:22:29.740
This actually returns a string.

337
00:22:29.740 --> 00:22:30.970
So that's what it is.

338
00:22:43.220 --> 00:22:46.520
So this joining does pretty much what we are doing here.

339
00:22:46.730 --> 00:22:49.100
And there are also collectors for other purposes.

340
00:22:49.100 --> 00:22:54.560
And like, for example, if you want to generate collect the stream into into a list, then we have

341
00:22:54.560 --> 00:22:55.340
something for that.

342
00:22:55.340 --> 00:23:00.200
And if you want to group the stream elements, we have another method for that, another static factory

343
00:23:00.200 --> 00:23:03.560
method for that called grouping by and we can use that.

344
00:23:03.560 --> 00:23:05.300
So let me just run this now.

345
00:23:07.160 --> 00:23:07.870
Here it is.

346
00:23:07.880 --> 00:23:13.550
So once again here, contact with joining is also giving us the same result, even though it's a parallel

347
00:23:13.550 --> 00:23:14.000
stream.

348
00:23:14.420 --> 00:23:15.830
So that's the thing.

349
00:23:15.830 --> 00:23:21.100
So these are the two collect methods and we will explore more about these collectors in the next lecture.

350
00:23:21.110 --> 00:23:23.870
But we have an idea now about how to use it.

351
00:23:24.230 --> 00:23:25.550
So that's about it.

352
00:23:25.580 --> 00:23:30.770
Thank you and hope you enjoyed learning about the collect method and the mutable reduction.

353
00:23:31.250 --> 00:23:32.360
And that's about it.

354
00:23:32.450 --> 00:23:33.920
Thank you and happy coding.

