WEBVTT
1
00:00:02.070 --> 00:00:02.990
Hello there.

2
00:00:03.000 --> 00:00:04.110
This is Lou.

3
00:00:04.140 --> 00:00:05.100
And welcome back.

4
00:00:05.220 --> 00:00:10.650
Let's now go ahead and look at the information hiding design principle in action.

5
00:00:11.160 --> 00:00:17.340
So you're going to enhance our student class by incorporating the information hiding design principle,

6
00:00:17.730 --> 00:00:24.810
which tells that in public classes we should not be having public fields, but instead we need to have

7
00:00:24.840 --> 00:00:27.450
private fields with access or methods.

8
00:00:28.210 --> 00:00:34.060
So we are going to walk through the entire scenario, which we discussed in the previous example.

9
00:00:34.600 --> 00:00:40.420
So you start off with a tightly coupled system, and then we will adopt the information hiring design

10
00:00:40.420 --> 00:00:45.100
principle, which will help us in having a loosely coupled system.

11
00:00:45.760 --> 00:00:49.870
Now here in this student example, I just made one change.

12
00:00:49.870 --> 00:00:56.800
I added this public modifier in the class declaration as well as for all of the fields here and also

13
00:00:56.800 --> 00:01:00.190
for the different constructors and the update profile method.

14
00:01:00.670 --> 00:01:08.110
But the key is, I did add it here, so we made these fields public and the class itself is a public

15
00:01:08.110 --> 00:01:15.130
class, which means that it is part of the API and so the users of this particular API will be able

16
00:01:15.130 --> 00:01:20.590
to access these fields directly because these are public and that's it by design.

17
00:01:21.250 --> 00:01:28.630
Now let's assume that this particular class is part of a larger library, which is developed by my company,

18
00:01:28.630 --> 00:01:29.770
Semantic Square.

19
00:01:29.800 --> 00:01:37.540
And let's say we have partnerships with many universities, and those universities use this library,

20
00:01:37.540 --> 00:01:38.680
which has this class.

21
00:01:39.370 --> 00:01:44.050
Let's say there is one university and it is using this library.

22
00:01:44.050 --> 00:01:49.960
So the class is student test, which we already have, and it could have been named in a more appropriate

23
00:01:49.960 --> 00:01:53.170
way, like a university admission or something like that.

24
00:01:53.170 --> 00:01:54.040
But that's fine.

25
00:01:54.370 --> 00:02:02.380
Now let's assume that this particular university has a website where students can register, and once

26
00:02:02.380 --> 00:02:08.350
they submit their information, they will be sent to the web server where such student records will

27
00:02:08.350 --> 00:02:13.030
be created, and then subsequently this data will be added to the database.

28
00:02:13.480 --> 00:02:21.070
Now, let's say Anita is one such student and by mistake she has selected male for gender.

29
00:02:21.550 --> 00:02:28.750
So that information got passed to the web server and the record got created, a student object got created,

30
00:02:28.750 --> 00:02:30.940
and the information is written to the database.

31
00:02:30.970 --> 00:02:34.480
Now later, she realizes that she has selected a wrong gender.

32
00:02:34.480 --> 00:02:40.690
So she goes back to the website and she goes into the update profile web page, and then she selects

33
00:02:40.690 --> 00:02:42.160
the right gender this time.

34
00:02:42.580 --> 00:02:49.450
But somehow, let's say there is a there is a bug and the female over there has a typo.

35
00:02:49.660 --> 00:02:55.570
So that information gets passed to the web server and that will be stored in the system, which is wrong.

36
00:02:56.440 --> 00:03:03.250
So let's assume that she has selected female and she has submitted her information and that data is

37
00:03:03.250 --> 00:03:06.850
sent to the web server where a student object is created.

38
00:03:06.880 --> 00:03:11.110
So let's just say that that student object is student three.

39
00:03:12.060 --> 00:03:19.710
Maybe let's just assume that here it has all of this state, but let's assume that this no constructor

40
00:03:19.710 --> 00:03:26.100
was invoked here at the end and we are invoking the public field here.

41
00:03:26.100 --> 00:03:29.760
So this is how it has been coded by the developer.

42
00:03:29.760 --> 00:03:38.220
So the developer has selected the gender field and is going to update the value which has been selected

43
00:03:38.550 --> 00:03:41.050
in the update profile page.

44
00:03:41.070 --> 00:03:44.310
In this case we are saying there is a typo.

45
00:03:44.310 --> 00:03:47.550
So let's say the character A is missing.

46
00:03:47.550 --> 00:03:48.990
So it is something like this.

47
00:03:49.810 --> 00:03:54.960
So now there is an issue because we are setting gender with this wrong value.

48
00:03:54.970 --> 00:03:59.200
So gender should be only male, female and transgender.

49
00:03:59.680 --> 00:04:06.190
But since we are able to access this gender field directly, any value can be set right.

50
00:04:06.370 --> 00:04:10.030
So we are unable to restrict to those three values.

51
00:04:10.240 --> 00:04:12.270
And so we can set any value.

52
00:04:12.280 --> 00:04:15.580
So that's the problem with having public fields.

53
00:04:16.089 --> 00:04:17.730
So that's the problem.

54
00:04:17.740 --> 00:04:24.970
So this is because there is a tight coupling here because of having the fields as public.

55
00:04:25.000 --> 00:04:31.720
The client, which is this particular university, they are the client is able to access those fields

56
00:04:31.720 --> 00:04:34.230
directly and is able to set any value.

57
00:04:34.240 --> 00:04:35.830
In this case, it is a typo.

58
00:04:35.830 --> 00:04:41.350
In some other case it could be any value too, which is not good and which will because of which we

59
00:04:41.350 --> 00:04:44.200
will be having inconsistent state in the system.

60
00:04:44.590 --> 00:04:51.010
So to avoid this, we are going to adopt the information hiding design principle, which says that for

61
00:04:51.010 --> 00:04:58.000
public fields in public classes, for fields in public classes, we need to have private fields.

62
00:04:58.270 --> 00:05:00.550
We need to have the private modifier.

63
00:05:10.840 --> 00:05:15.790
And we need to allow access to them using getters and setters.

64
00:05:15.970 --> 00:05:18.970
So we have already seen this in the previous lecture.

65
00:05:18.970 --> 00:05:19.930
So let's go here.

66
00:05:19.930 --> 00:05:22.660
Source Generate getters and setters.

67
00:05:22.900 --> 00:05:28.570
For now, let's just select only two fields, gender and name because name is being used in the student

68
00:05:28.570 --> 00:05:29.350
test class.

69
00:05:29.590 --> 00:05:38.860
Let's just hit, generate and then we will see the getter here for name, setter for name and get run

70
00:05:38.860 --> 00:05:40.420
setter for gender here.

71
00:05:42.060 --> 00:05:49.530
So now this is giving a compilation error because we cannot access gender as it is private.

72
00:05:49.980 --> 00:05:55.080
So this is how it needs to be, and let's assume that this is how it has been designed.

73
00:05:55.260 --> 00:06:07.500
So now the developer here has to say set gender and let's assume that still this typo is there and there

74
00:06:07.500 --> 00:06:08.860
is no change with that.

75
00:06:08.880 --> 00:06:10.830
So this is how it is being passed.

76
00:06:11.370 --> 00:06:14.030
And there are also this name here.

77
00:06:14.040 --> 00:06:17.400
So let's just say dot get name.

78
00:06:17.400 --> 00:06:19.500
So we are just printing the values here.

79
00:06:28.390 --> 00:06:29.950
And there is one here to.

80
00:06:33.320 --> 00:06:33.770
Okay.

81
00:06:33.980 --> 00:06:35.900
So that's the thing.

82
00:06:35.900 --> 00:06:37.160
And here.

83
00:06:37.160 --> 00:06:38.150
Now let's.

84
00:06:39.140 --> 00:06:41.560
Put some validation logic here.

85
00:06:41.570 --> 00:06:47.380
Because of this design, we can ensure that the gender that is passed is the right gender.

86
00:06:47.390 --> 00:06:49.700
So here we will say if.

87
00:06:50.570 --> 00:06:54.590
Gender does not equal or equals.

88
00:06:55.950 --> 00:06:58.170
Male or.

89
00:06:59.800 --> 00:07:01.150
Let's just copy this.

90
00:07:15.220 --> 00:07:22.290
So if it is one of these values, then the gender the gender field will be set with the gender here,

91
00:07:22.300 --> 00:07:23.830
whatever has been passed.

92
00:07:23.860 --> 00:07:27.190
Else if an incorrect value has been passed.

93
00:07:27.490 --> 00:07:29.320
Then we are going to report it.

94
00:07:29.320 --> 00:07:31.000
So we are going to throw an error.

95
00:07:31.240 --> 00:07:35.980
So let's not worry about exceptions because exceptions has not been discussed yet.

96
00:07:35.980 --> 00:07:41.500
But later we have a wonderful chapter which explains this in a very detailed way.

97
00:07:41.740 --> 00:07:49.630
So this illegal argument exception because the argument is illegal here.

98
00:07:49.810 --> 00:07:55.870
And let's also put a message here that it is an invalid gender.

99
00:07:56.960 --> 00:07:57.560
All right.

100
00:07:58.990 --> 00:08:01.240
So there needs to be a new keyword here.

101
00:08:01.240 --> 00:08:02.050
So that's it.

102
00:08:03.030 --> 00:08:06.760
Now going back here, we have this agenda.

103
00:08:06.870 --> 00:08:10.650
Let's now just run this and we can see that.

104
00:08:11.590 --> 00:08:18.310
Here when the gender is accessed, this value, incorrect value is being passed.

105
00:08:18.310 --> 00:08:21.010
And so it is not going to match.

106
00:08:21.010 --> 00:08:23.140
All of these conditions will fail.

107
00:08:23.410 --> 00:08:28.840
And because of that, this exception is thrown and the program execution stops right away.

108
00:08:28.960 --> 00:08:36.070
And with that, the developer can see what the issue is, and perhaps they can go into the user interface

109
00:08:36.070 --> 00:08:37.990
and fix the typo that they have.

110
00:08:38.559 --> 00:08:41.530
So that's the advantage that we have.

111
00:08:41.530 --> 00:08:48.880
So now that the system is clean because it will accept only the correct values for the gender.

112
00:08:49.450 --> 00:08:56.170
So that's the benefit, one benefit that we have that following the information hiding design principle.

113
00:08:57.080 --> 00:08:57.270
Okay.

114
00:08:57.490 --> 00:09:04.870
So we can ensure that the values of a particular field has that is within a certain range like in this

115
00:09:04.870 --> 00:09:05.320
case.

116
00:09:05.770 --> 00:09:11.660
Now another benefit we discussed is that we can also change the implementation.

117
00:09:11.680 --> 00:09:19.420
So let us let us say after six months, the developers in the company, they feel that the string having

118
00:09:19.420 --> 00:09:22.810
gender string is affecting the performance.

119
00:09:22.810 --> 00:09:26.540
So they want to use they want to introduce a new field.

120
00:09:26.800 --> 00:09:28.680
So this is after six months.

121
00:09:28.690 --> 00:09:35.590
So they will define a new variable ie gender and the default value is zero.

122
00:09:36.010 --> 00:09:41.770
So we have seen this in the previous lecture, so we need to change the implementation here.

123
00:09:42.640 --> 00:09:43.690
So let's do that.

124
00:09:44.460 --> 00:09:47.460
So for the first condition as this one.

125
00:09:50.150 --> 00:09:50.280
Okay.

126
00:09:50.430 --> 00:09:55.470
In this case, I gender will be one.

127
00:09:57.300 --> 00:09:57.780
As.

128
00:10:03.610 --> 00:10:04.510
Then I.

129
00:10:04.510 --> 00:10:05.950
Gender will be to.

130
00:10:11.130 --> 00:10:15.780
Finally, if it is the third condition I gender will be three.

131
00:10:25.740 --> 00:10:28.440
So here if I gender.

132
00:10:29.810 --> 00:10:33.260
Is equal to, let's say, zero.

133
00:10:34.040 --> 00:10:35.510
In that case, we need to throw this.

134
00:10:35.510 --> 00:10:37.610
So let me just put this here.

135
00:10:39.860 --> 00:10:41.120
Through this error.

136
00:10:41.390 --> 00:10:46.820
Otherwise, we will set this gender field here so that.

137
00:10:48.120 --> 00:10:52.470
If the client accesses get gender, the right gender will be passed.

138
00:10:52.800 --> 00:11:00.780
So here, if the gender is one of these, then the gender value will be one of these three values.

139
00:11:00.990 --> 00:11:07.860
But if I gender is still zero, it means that the user has passed an incorrect value.

140
00:11:08.100 --> 00:11:10.620
So the value passed for gender is not right.

141
00:11:10.620 --> 00:11:12.240
So we throw this error.

142
00:11:12.450 --> 00:11:17.880
But if that's not the case, then the gender value will be set to the correct gender which has been

143
00:11:17.880 --> 00:11:18.330
passed.

144
00:11:19.140 --> 00:11:22.920
So let's say this modification has been done after six months.

145
00:11:23.100 --> 00:11:29.310
So this new class and the new library will be given to the student test class and they will start using

146
00:11:29.310 --> 00:11:29.700
that.

147
00:11:29.970 --> 00:11:32.860
But on their end, nothing is changing.

148
00:11:32.880 --> 00:11:39.990
They are still passing this female because they are just unaware of this implementation.

149
00:11:40.530 --> 00:11:46.460
This implementation change has happened internally, but they are completely oblivious to that.

150
00:11:46.470 --> 00:11:51.110
So they are just invoking the same method and that's it.

151
00:11:51.120 --> 00:11:53.380
So there is no change on their end.

152
00:11:53.400 --> 00:11:55.830
So if we run it again, we will see that.

153
00:11:57.260 --> 00:11:58.820
You know, we will have the same error.

154
00:11:59.270 --> 00:12:04.500
So they are going to fix this issue that they have this type of issue and that's it.

155
00:12:04.520 --> 00:12:06.660
But on their end, nothing has changed.

156
00:12:06.680 --> 00:12:13.400
So this information hiding design principle has allowed us to make this implementation change.

157
00:12:13.730 --> 00:12:16.880
So we call such changes as an implementation change.

158
00:12:17.180 --> 00:12:21.980
And now we are assuming that this change will give us better performance.

159
00:12:22.280 --> 00:12:23.480
It's just an assumption.

160
00:12:23.570 --> 00:12:31.040
But the thing is, such having such a good design principle is allowing us to optimise this particular

161
00:12:31.040 --> 00:12:31.400
class.

162
00:12:31.400 --> 00:12:38.960
So we were able to optimise this class by changing from string to end without affecting the client.

163
00:12:39.560 --> 00:12:43.370
So that is the benefit of having information design.

164
00:12:43.760 --> 00:12:51.680
So going forward, you should be using only private fields and you would allow access to them via getters

165
00:12:51.680 --> 00:12:52.490
and setters.

166
00:12:52.700 --> 00:12:57.170
So that's one of the important design principles.

167
00:12:57.500 --> 00:13:00.170
So that's the information hiding design principle.

168
00:13:00.650 --> 00:13:02.840
So that's what you should be using going forward.

169
00:13:02.840 --> 00:13:08.930
Even in your professional life, you should always use private fields and public getters and setters.

170
00:13:09.290 --> 00:13:11.750
Thank you, and I will see you in the next lecture.

