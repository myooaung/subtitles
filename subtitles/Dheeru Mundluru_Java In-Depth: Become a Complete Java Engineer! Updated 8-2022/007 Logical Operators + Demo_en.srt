1
00:00:02,090 --> 00:00:03,110
Hi there.

2
00:00:03,140 --> 00:00:04,320
This is De La Rue.

3
00:00:04,340 --> 00:00:05,330
And welcome back.

4
00:00:05,630 --> 00:00:10,310
Let's now look at the next type of operators called logical operators.

5
00:00:10,310 --> 00:00:11,900
And there are three of them.

6
00:00:12,380 --> 00:00:16,340
And they have something to do with creating logic, as we will soon see.

7
00:00:16,820 --> 00:00:23,060
And we encounter these operations very frequently in real life, especially in the business world.

8
00:00:23,300 --> 00:00:26,630
Marketing is one area where they are heavily used.

9
00:00:28,170 --> 00:00:33,630
For example, we often see this in shopping malls where they have such marketing strategies.

10
00:00:33,930 --> 00:00:37,020
If you buy two t shirts, you get the third one free.

11
00:00:37,470 --> 00:00:42,420
And if you buy only one of them, then this deal will not be applicable for you.

12
00:00:42,930 --> 00:00:47,310
That's why we have and here making this strategy possible.

13
00:00:47,910 --> 00:00:55,290
That is, if you have bought the first t shirt and you have also bought the second t shirt, then you

14
00:00:55,290 --> 00:00:56,670
get the third free.

15
00:00:57,460 --> 00:00:58,300
In Java.

16
00:00:58,300 --> 00:01:05,680
This notion of and is represented by a logical operator called and operator and it is represented by

17
00:01:05,710 --> 00:01:07,390
2% symbols.

18
00:01:09,370 --> 00:01:14,290
And here is another marketing strategy that we commonly see in electronic stores.

19
00:01:14,620 --> 00:01:22,810
If you buy a particular television or a particular refrigerator by December 31st, you get a 10% discount

20
00:01:22,810 --> 00:01:24,040
on the final price.

21
00:01:24,400 --> 00:01:28,660
So it has to be one of the two products or both of them.

22
00:01:28,810 --> 00:01:32,170
And all here defines the marketing strategy.

23
00:01:32,680 --> 00:01:40,000
And in Java, such an order is represented by a logical operator called or operator, and it is represented

24
00:01:40,000 --> 00:01:41,860
by two pipe symbols.

25
00:01:43,700 --> 00:01:46,420
And here is a different example not marketing.

26
00:01:46,430 --> 00:01:47,870
We see this in banks.

27
00:01:48,050 --> 00:01:53,360
If we apply for a home loan, certain banks look at our past credit history.

28
00:01:53,870 --> 00:02:00,950
That is, they check whether we have a good credit history or not, which means that whether we repaid

29
00:02:00,950 --> 00:02:08,690
all our past loans or not, if the credit history is not good as we see it here, then the home loan

30
00:02:08,690 --> 00:02:10,009
will not be approved.

31
00:02:10,789 --> 00:02:17,990
And in Java, such kind of check is typically represented using a not operator, which is the final

32
00:02:17,990 --> 00:02:22,910
logical operation, and it is represented by an exclamation symbol.

33
00:02:23,210 --> 00:02:25,400
So that's the node operator.

34
00:02:25,880 --> 00:02:31,370
Now, without using logical operators, we may end up writing complex looking code.

35
00:02:32,860 --> 00:02:36,640
For instance, we have already learned about comparison operators.

36
00:02:36,790 --> 00:02:44,290
With comparison operators, we are always testing a single condition, like in this example where the

37
00:02:44,290 --> 00:02:49,600
code inside braces is executed only if age is greater than 35.

38
00:02:51,760 --> 00:02:57,100
But how about if we want to execute some code only when multiple conditions are true?

39
00:02:57,520 --> 00:03:04,180
For example, we may want to execute some code if age is greater than 35 and also salary is greater

40
00:03:04,180 --> 00:03:05,410
than 90,000.

41
00:03:07,260 --> 00:03:09,090
And using comparison operators.

42
00:03:09,090 --> 00:03:16,220
We can do it this way where we have a nested if statement that is an if statement inside another if

43
00:03:16,230 --> 00:03:16,920
statement.

44
00:03:17,430 --> 00:03:24,630
So the first if statement checks whether age is greater than 35 and if it is true only then the inner

45
00:03:24,630 --> 00:03:26,430
if statement would be executed.

46
00:03:26,430 --> 00:03:33,360
That is the inner if statement checks if salary is greater than 90,000 and if that is also true, then

47
00:03:33,360 --> 00:03:36,780
loan is a pro and using and operator.

48
00:03:36,780 --> 00:03:39,090
This can be done much more elegantly.

49
00:03:40,530 --> 00:03:41,680
And here it is.

50
00:03:41,700 --> 00:03:49,020
And this would ensure that the code inside races is executed only if both operations of and operator

51
00:03:49,020 --> 00:03:49,620
are true.

52
00:03:49,890 --> 00:03:55,050
That is, if age is greater than 35 and salary is greater than 90,000.

53
00:03:55,680 --> 00:04:01,470
So even if one of the condition fails, then the body of if statement will not be executed.

54
00:04:02,040 --> 00:04:04,710
As you can see, this is much more cleaner looking code.

55
00:04:06,710 --> 00:04:11,330
Now let's look at the three operators using the same age and salary example.

56
00:04:11,540 --> 00:04:17,839
Let's assume that age of the customer is 37 and salary is 80,000.

57
00:04:19,519 --> 00:04:23,840
And here is the same condition which we saw in the earlier slide with an operator.

58
00:04:23,900 --> 00:04:29,540
The first condition is age greater than 35 and second is salary greater than 90,000.

59
00:04:29,840 --> 00:04:34,580
And and operator returns true only if both operations are true.

60
00:04:34,910 --> 00:04:36,590
Otherwise it returns a false.

61
00:04:37,160 --> 00:04:45,470
In our example, the first condition h greater than 35 is true as H has the value 37 for our customer.

62
00:04:45,740 --> 00:04:51,260
But the second condition fails as the salary we have is not greater than 90,000.

63
00:04:52,550 --> 00:04:58,610
And hence the expression evaluates to false had salary been greater than 90,000?

64
00:04:58,640 --> 00:05:01,190
Then the expression would evaluate to true.

65
00:05:03,210 --> 00:05:09,810
And here is the condition that our operator, we have the same appearance as in the first example or

66
00:05:09,810 --> 00:05:14,220
operator returns a true if at least one of the two options is true.

67
00:05:14,490 --> 00:05:18,480
Otherwise it returns a false since our first condition is true.

68
00:05:18,570 --> 00:05:23,700
This expression evaluates to true, even though the second condition is false.

69
00:05:24,330 --> 00:05:31,800
But if age was not greater than 35, then both conditions would be false and the expression would evaluate

70
00:05:31,800 --> 00:05:32,580
to false.

71
00:05:34,600 --> 00:05:38,030
And here is not operator, which is a unitary operator.

72
00:05:38,050 --> 00:05:44,770
The other two are binary operators and not operator simply returns the inverse of its operator.

73
00:05:45,280 --> 00:05:48,010
That is, if operand is true, it returns a false.

74
00:05:48,010 --> 00:05:51,040
And if operand is false, then it returns a true.

75
00:05:51,760 --> 00:05:58,660
Here, since the expression age is greater than 35 is true, applying not on this expression will return

76
00:05:58,660 --> 00:05:59,620
a false.

77
00:06:00,010 --> 00:06:08,290
So it basically inverts the value of its operand and it is also referred to as logical complement operator.

78
00:06:10,440 --> 00:06:16,800
Essentially what we have here with these logical operations is Boolean algebra and you may have come

79
00:06:16,800 --> 00:06:22,980
across Boolean Algebra in one of your math classes in Boolean Algebra and operation is referred to as

80
00:06:22,980 --> 00:06:27,480
conjunction or as disjunction and not as negation.

81
00:06:28,470 --> 00:06:34,680
We can refer to all these expressions with logical operations as just Boolean expressions.

82
00:06:34,980 --> 00:06:37,620
So these are all Boolean expressions that we are seeing here.

83
00:06:39,720 --> 00:06:45,570
And just for the sake of completeness, let's look at the output of the logical operations for the different

84
00:06:45,570 --> 00:06:46,860
values of its opponents.

85
00:06:47,370 --> 00:06:50,550
If X and Y are the appearance with these values.

86
00:06:52,090 --> 00:06:55,150
Then with X and Y we have a true.

87
00:06:55,180 --> 00:06:57,970
Only when both x and y are true.

88
00:06:58,510 --> 00:07:01,540
And for the rest of the combinations, we have a false.

89
00:07:03,310 --> 00:07:08,920
With X or Y, we have a true when one or both of the options are true.

90
00:07:09,160 --> 00:07:15,820
So we have a true for the first three combinations and a false for the last one, as both X and Y are

91
00:07:15,850 --> 00:07:16,480
false.

92
00:07:17,950 --> 00:07:20,770
Finally for naught, we are just considering x.

93
00:07:21,040 --> 00:07:25,690
So when x is true, as in the first two cases, the output is false.

94
00:07:25,690 --> 00:07:28,540
And when x is false, the output is true.

95
00:07:29,280 --> 00:07:35,640
Now in Boolean Algebras, such a table is referred to as Truth Table, and you may recall it too.

96
00:07:36,270 --> 00:07:42,690
So logical operators take boolean operations and evaluate to a boolean value.

97
00:07:43,350 --> 00:07:49,110
If the operator is something other than boolean, we get a compiler error and control for all statements

98
00:07:49,110 --> 00:07:52,650
are where we see logical operations being commonly used.

99
00:07:54,640 --> 00:07:55,510
Well, we know that.

100
00:07:55,510 --> 00:08:00,160
And and our operators work on their operations and produce a Boolean value.

101
00:08:00,190 --> 00:08:06,490
There is also something very important we need to know about the evaluation of those two options.

102
00:08:08,040 --> 00:08:09,870
With regards to an operator.

103
00:08:09,900 --> 00:08:17,070
If its left operand is false, then the right operand is not even evaluated and the entire expression

104
00:08:17,070 --> 00:08:19,020
simply evaluates to false.

105
00:08:19,440 --> 00:08:25,920
And this makes sense as even if the right operand is evaluated and it happens to be true, the entire

106
00:08:25,920 --> 00:08:27,870
expression still evaluates to false.

107
00:08:28,780 --> 00:08:32,380
Since only left operand is being evaluated in the scenario.

108
00:08:32,650 --> 00:08:36,549
We are referring to an operator as a short circuit operator.

109
00:08:37,120 --> 00:08:42,010
So right operand is evaluated only if left operand is true.

110
00:08:42,640 --> 00:08:43,419
That is right.

111
00:08:43,419 --> 00:08:47,860
Operand is conditionally evaluated rather than always.

112
00:08:49,140 --> 00:08:54,390
And for this reason and operator is also referred to as conditional and operator.

113
00:08:54,870 --> 00:09:01,350
That is evaluation of right of parent is conditionally dependent on evaluation of left operator.

114
00:09:01,950 --> 00:09:04,410
So it's called as conditional and operator.

115
00:09:05,880 --> 00:09:12,360
And with regards to our operation, if left operand is true, then right operant is not evaluated and

116
00:09:12,360 --> 00:09:13,350
it is written.

117
00:09:13,920 --> 00:09:16,860
So our is also a short circuit operator.

118
00:09:17,370 --> 00:09:17,760
Right.

119
00:09:17,770 --> 00:09:21,720
Operated is evaluated only if left operand is false.

120
00:09:22,610 --> 00:09:28,640
And for this reason our operator is also referred to as conditional or as evaluation of write.

121
00:09:28,640 --> 00:09:33,560
Operand is conditionally dependent on the evaluation of left operand.

122
00:09:34,360 --> 00:09:41,620
So that's some optimization there, as sometimes only one opponent is evaluated and that improves performance.

123
00:09:43,610 --> 00:09:50,780
And among the two short circuit operators, the short circuit nature of and operator is also extremely

124
00:09:50,780 --> 00:09:53,930
useful in preventing the null pointer exception.

125
00:09:54,440 --> 00:10:01,340
We know a pointer exception is generated at runtime when an object reference is null and we try to access

126
00:10:01,340 --> 00:10:06,620
one of its members using the dot operator like methods or variables.

127
00:10:08,470 --> 00:10:14,170
For example, let's consider this if statement where the condition is greater than 21.

128
00:10:14,470 --> 00:10:18,550
So as is an object reference referencing some object such as a student.

129
00:10:18,880 --> 00:10:25,150
Now if TSS happens to be null, then we know that we get a null pointer exception at runtime and our

130
00:10:25,150 --> 00:10:26,890
program execution could stop.

131
00:10:27,400 --> 00:10:30,490
So to prevent this, we can add a null check.

132
00:10:31,750 --> 00:10:33,610
That is, we would have something like this.

133
00:10:33,790 --> 00:10:37,270
So we first check if S is not equal to none.

134
00:10:37,720 --> 00:10:44,500
And if that is true, only then our condition as a greater than 21 would be evaluated.

135
00:10:45,160 --> 00:10:51,520
Now, if SE is null, then the first condition would be false and due to short circuit nature of an

136
00:10:51,550 --> 00:10:57,730
operator, it will not evaluate the second condition, thus preventing the null pointer exception.

137
00:10:58,600 --> 00:11:04,930
If you recall in an earlier lecture on comparison operators, even there we used a similar null check

138
00:11:04,930 --> 00:11:06,820
to prevent null pointer exception.

139
00:11:07,270 --> 00:11:15,070
There the null check was helping with methods parameter validation and here it is part of an and operation.

140
00:11:15,900 --> 00:11:22,230
Now let's head over to my editor and test everything out and some additional important things will also

141
00:11:22,230 --> 00:11:23,490
be discussed in the demo.

142
00:11:25,760 --> 00:11:31,460
All right, here we are in the basics class, and we have a new method called logical operators, which

143
00:11:31,460 --> 00:11:33,290
is invoked from the main method.

144
00:11:33,680 --> 00:11:35,720
So let's look at the agenda for the demo.

145
00:11:35,840 --> 00:11:39,950
So the first thing is we will test the basic stuff like the and or not.

146
00:11:40,250 --> 00:11:46,970
And then we will look at this thing called associated with T which is a property of both and, and ah.

147
00:11:47,060 --> 00:11:48,890
So let's not worry about all of this text.

148
00:11:48,890 --> 00:11:49,700
We will get there.

149
00:11:49,940 --> 00:11:54,350
And the third thing is we will look at the operator precedence of logical operators.

150
00:11:54,350 --> 00:11:59,060
So just like arithmetic operators, we also have operator operator precedence over here.

151
00:11:59,240 --> 00:12:05,090
So we will look at that and we will also look at operator precedence across logical comparison and arithmetic.

152
00:12:05,420 --> 00:12:10,400
And finally, we will look at the and operator and how it avoids null pointer exception.

153
00:12:10,400 --> 00:12:11,750
We have already seen that.

154
00:12:12,050 --> 00:12:13,520
We will also just test it out.

155
00:12:13,730 --> 00:12:16,070
So let's go ahead and get started.

156
00:12:17,250 --> 00:12:21,750
So let's just take the simple example that we had of approving loan.

157
00:12:22,110 --> 00:12:30,150
So here, let's consider that the age and salary are age and salary of some particular user, and we

158
00:12:30,150 --> 00:12:34,110
are going to test whether the user should be approved the loan or not.

159
00:12:34,650 --> 00:12:40,050
So we have age and salary which are initialized to 37 and 95,000.

160
00:12:40,050 --> 00:12:46,380
And we also have a boolean variable here has bad credit and it is initialized to false.

161
00:12:47,010 --> 00:12:49,020
And this is the condition that we have.

162
00:12:49,020 --> 00:12:50,250
This is the if statement.

163
00:12:50,250 --> 00:12:56,100
So if age is greater than 35 and salary is greater than 90,000, then the loan is approved.

164
00:12:56,490 --> 00:13:00,480
Otherwise, if this condition fails, then we have the condition.

165
00:13:00,510 --> 00:13:06,990
So for if statement we have only looked at the f block, but there is also something called LS block

166
00:13:06,990 --> 00:13:09,960
which gets executed if the condition is false.

167
00:13:10,410 --> 00:13:14,130
But we are going to look at if statement in one of the subsequent lectures.

168
00:13:14,130 --> 00:13:15,540
So let's not worry about it.

169
00:13:15,540 --> 00:13:17,760
But it's good enough if you just know this.

170
00:13:18,720 --> 00:13:20,960
So let's go ahead and compile and run this.

171
00:13:20,970 --> 00:13:22,230
It's already compiled.

172
00:13:22,470 --> 00:13:23,850
So let me just run it.

173
00:13:24,480 --> 00:13:25,160
Here it is.

174
00:13:25,170 --> 00:13:30,900
So lone is approved here because age is greater than 35 and the age of the user is 37.

175
00:13:30,900 --> 00:13:32,640
So 37 is greater than 35.

176
00:13:32,640 --> 00:13:36,600
And here the salary is 95,000, which is also greater than 90,000.

177
00:13:36,900 --> 00:13:39,210
And so this condition is true.

178
00:13:39,210 --> 00:13:43,680
This Boolean expression is true, and this particular statement is getting printed.

179
00:13:44,540 --> 00:13:47,210
Now let's just make this 90,000.

180
00:13:47,660 --> 00:13:51,230
So which means that it is equal to 90,000.

181
00:13:51,230 --> 00:13:53,270
So it is this condition should fail.

182
00:13:57,910 --> 00:14:00,820
Here now it says loan not approved.

183
00:14:00,970 --> 00:14:04,090
Right now if we make this are.

184
00:14:05,230 --> 00:14:05,590
Okay.

185
00:14:05,680 --> 00:14:06,970
So let me.

186
00:14:11,300 --> 00:14:15,980
Now the loan is approved because the first condition is true.

187
00:14:16,370 --> 00:14:21,710
So with that, the the short circuit nature of our operator is coming into play and the second condition

188
00:14:21,710 --> 00:14:27,230
will not even be evaluated, although it doesn't make this rule greater than 35.

189
00:14:27,230 --> 00:14:33,380
Our salary doesn't make sense because we are approving the loan just based on age.

190
00:14:34,130 --> 00:14:36,050
So that's with the our operator.

191
00:14:36,590 --> 00:14:39,530
And let me just change this back to 95,000.

192
00:14:40,560 --> 00:14:49,380
And let me also put this back to and now here, let me just remove this thing here and let's just compile

193
00:14:49,380 --> 00:14:49,860
it.

194
00:14:52,830 --> 00:15:01,620
And it says bad operand type for binary operator and because here salary is an end rather than boolean.

195
00:15:02,190 --> 00:15:03,720
So just keep this in mind.

196
00:15:03,720 --> 00:15:11,040
All of the logical operators require a boolean operator and they evaluate to a boolean value and they

197
00:15:11,040 --> 00:15:13,440
are typically used in such control flow statements.

198
00:15:13,440 --> 00:15:16,200
So it's got to be a Boolean expression.

199
00:15:16,920 --> 00:15:20,690
Now let's go ahead and look at the note operator also.

200
00:15:20,700 --> 00:15:25,110
So let's introduce one more operator here.

201
00:15:26,570 --> 00:15:27,160
Okay.

202
00:15:27,500 --> 00:15:31,490
So here we are having a chain of operators.

203
00:15:31,880 --> 00:15:37,310
So the boolean expression need not be constrained to just one logical operator.

204
00:15:37,550 --> 00:15:42,470
We can have more than one and we can still have more logical operators.

205
00:15:42,470 --> 00:15:42,820
Two.

206
00:15:43,340 --> 00:15:45,050
So this is what we have.

207
00:15:45,050 --> 00:15:46,730
And this should also.

208
00:15:47,730 --> 00:15:48,670
You clean this up?

209
00:15:51,450 --> 00:15:58,920
So long as abroad, because all three of the conditions are true here has credit, but credit is false,

210
00:15:58,920 --> 00:16:00,950
so not false would be true.

211
00:16:00,960 --> 00:16:03,190
And these two conditions are also true.

212
00:16:03,210 --> 00:16:05,300
So the loan is approved.

213
00:16:05,310 --> 00:16:07,560
So it is true and true and true.

214
00:16:08,940 --> 00:16:14,760
Now, here, this can also be it says age greater than 35.

215
00:16:14,790 --> 00:16:20,010
Another way to represent it is age less than or equal to 35.

216
00:16:20,040 --> 00:16:23,010
And put the knot operator here.

217
00:16:24,180 --> 00:16:26,510
So this is also correct.

218
00:16:26,520 --> 00:16:28,230
It can also be in this way.

219
00:16:28,590 --> 00:16:31,500
But the thing is, if we do this.

220
00:16:34,270 --> 00:16:36,430
Then we get a compiler error.

221
00:16:36,700 --> 00:16:38,620
So I just removed the parenthesis.

222
00:16:40,070 --> 00:16:43,760
So it's this bad operand type for unity operator.

223
00:16:43,910 --> 00:16:48,740
Thus that's because age is considered as an upper end for not.

224
00:16:49,010 --> 00:16:52,630
And we know that for naught we need to have boolean operand.

225
00:16:52,640 --> 00:17:00,200
So this boolean expression has to be in parentheses and then it gets evaluated to a boolean value and

226
00:17:00,200 --> 00:17:01,040
then it is fine.

227
00:17:01,670 --> 00:17:07,339
But then here we are not using any parentheses for the and operation.

228
00:17:07,640 --> 00:17:10,040
So that has to do with operator precedence.

229
00:17:10,040 --> 00:17:12,079
So we will get back to that later.

230
00:17:16,359 --> 00:17:18,940
So that's with the note operator.

231
00:17:18,940 --> 00:17:20,829
So we are done with the core stuff now.

232
00:17:21,130 --> 00:17:26,440
Now, the next question is which of the two operators are applied?

233
00:17:26,560 --> 00:17:30,210
Or in other words, how would the grouping be done?

234
00:17:30,220 --> 00:17:36,430
Will it be this condition and this condition and the result of this of that would be ended with this

235
00:17:36,430 --> 00:17:40,120
or would it be this and this and ended together.

236
00:17:40,120 --> 00:17:44,380
And then again, age greater than 35 will be added to that.

237
00:17:44,710 --> 00:17:52,540
So here in Java, this by default, this is what is going to happen internally.

238
00:17:52,540 --> 00:17:57,940
This is what will happen and this is referred to as a left associative property.

239
00:17:58,030 --> 00:18:02,980
So this is how both and and our operator would do the grouping.

240
00:18:03,250 --> 00:18:04,540
It's just about the grouping.

241
00:18:04,540 --> 00:18:09,550
So they do it from left to right and it applies to both and, and our operators.

242
00:18:10,030 --> 00:18:14,170
Now we know that we can also change this to something like this.

243
00:18:14,170 --> 00:18:18,520
We can manually make it change the rule to this.

244
00:18:20,690 --> 00:18:21,410
Also.

245
00:18:21,410 --> 00:18:25,320
So the question is, is there any difference in the output?

246
00:18:25,340 --> 00:18:29,990
If it is this way or if it is the other way, the default way, the left associative way?

247
00:18:30,380 --> 00:18:32,000
And the answer is no.

248
00:18:32,270 --> 00:18:38,710
So it is going to produce the same result, and that is the associative property.

249
00:18:38,720 --> 00:18:43,070
So that's what we are saying here, A and B group together.

250
00:18:43,070 --> 00:18:48,080
And then ending it with C is same as this expression A and B and C.

251
00:18:48,290 --> 00:18:52,550
And once again, that applies to both and as well as our operators.

252
00:18:53,870 --> 00:18:55,800
So we can just test it out, too.

253
00:18:55,820 --> 00:18:57,290
So let's just make this.

254
00:18:58,560 --> 00:19:00,030
85,000.

255
00:19:05,760 --> 00:19:07,230
So alone is not approved.

256
00:19:07,230 --> 00:19:09,600
And if you do it the other way also.

257
00:19:10,420 --> 00:19:10,960
Okay.

258
00:19:11,050 --> 00:19:18,790
So this whole condition will be false because salary is greater than 90,000 is wrong is false.

259
00:19:18,790 --> 00:19:23,770
So this would be false and this would be true, but that wouldn't make any difference.

260
00:19:24,010 --> 00:19:27,250
So once again, you will end up with the same result.

261
00:19:32,130 --> 00:19:33,630
So loan is not approved.

262
00:19:34,350 --> 00:19:36,870
So that's with the associative property.

263
00:19:38,290 --> 00:19:42,190
And next, let's look at the operator precedents.

264
00:19:42,280 --> 00:19:43,630
So let's do this.

265
00:19:43,630 --> 00:19:45,670
Let's make this hour here.

266
00:19:47,200 --> 00:19:51,700
So the next question is, how would this be evaluated?

267
00:19:52,410 --> 00:19:54,810
So internally this is what will happen.

268
00:19:54,810 --> 00:19:58,140
So this will be grouped first.

269
00:19:58,140 --> 00:20:00,390
It will be considered as one thing.

270
00:20:01,650 --> 00:20:05,130
That's because and has the highest precedence.

271
00:20:05,730 --> 00:20:08,990
Sorry, not has the highest preference after that.

272
00:20:09,000 --> 00:20:12,210
The next higher preference is for an operator.

273
00:20:12,210 --> 00:20:14,490
So the grouping will be.

274
00:20:15,440 --> 00:20:16,220
Like this.

275
00:20:16,610 --> 00:20:20,150
And then finally the operator will be used.

276
00:20:20,900 --> 00:20:22,490
So in this in this case.

277
00:20:22,490 --> 00:20:24,230
So we have the operator.

278
00:20:24,380 --> 00:20:25,310
So.

279
00:20:25,460 --> 00:20:32,900
So this condition will be evaluated because it is to the left of R and within this OC, this condition

280
00:20:32,900 --> 00:20:33,840
will be executed.

281
00:20:33,860 --> 00:20:39,110
In this case, it would be it would be false because 85,000 is not greater than 90,000.

282
00:20:39,110 --> 00:20:40,400
So this would be false.

283
00:20:40,900 --> 00:20:45,320
And then this would be evaluated and then the loan would be approved.

284
00:20:45,650 --> 00:20:46,160
Right.

285
00:20:46,880 --> 00:20:52,340
So but this is what is going to happen internally because of the operator precedence.

286
00:20:52,340 --> 00:20:54,170
And that's what we are seeing here.

287
00:20:54,560 --> 00:21:02,690
So it is about this, so or not, has higher precedence then and which has higher precedence than or

288
00:21:04,010 --> 00:21:04,790
so.

289
00:21:04,790 --> 00:21:10,850
So that's just for your information, if you do not have anything, this is how it gets grouped internally.

290
00:21:10,850 --> 00:21:19,400
But in terms of evaluation still OC, we have the operator and so the evaluation starts with this and

291
00:21:19,400 --> 00:21:26,300
if it is true, then due to short circuit nature, the this entire expression would be true and this

292
00:21:26,300 --> 00:21:27,440
would be executed.

293
00:21:27,470 --> 00:21:31,850
But if it is false, only then this condition would be evaluated.

294
00:21:32,510 --> 00:21:35,300
And here also a couple of other examples here.

295
00:21:35,300 --> 00:21:41,120
So if you have the expression in this way and has the higher precedence, right.

296
00:21:41,120 --> 00:21:44,360
So that's why the A and B are grouped together.

297
00:21:44,360 --> 00:21:49,990
And then we have R and then we have and here to so C and D would be grouped together.

298
00:21:50,000 --> 00:21:57,470
And here is another example, A and B and C or D, so and has the higher precedence here.

299
00:21:57,830 --> 00:22:01,660
But then we have the left associative property too.

300
00:22:01,670 --> 00:22:09,290
So first A and B would be grouped within this particular expression and then C would be added to that.

301
00:22:09,530 --> 00:22:14,210
And to all of that we would order the last operand.

302
00:22:14,480 --> 00:22:18,410
So we apply the odd operand or operation on the last operand.

303
00:22:18,980 --> 00:22:21,050
So that's what operator precedence.

304
00:22:22,210 --> 00:22:28,220
Now let's look at the operator precedents across logical comparison and arithmetic operators.

305
00:22:28,240 --> 00:22:30,370
So let's go back to this one.

306
00:22:30,610 --> 00:22:34,210
So here now earlier I said.

307
00:22:35,300 --> 00:22:35,960
That.

308
00:22:36,700 --> 00:22:44,770
You know, I showed this particular example here and I said that we get a compiler error here because

309
00:22:44,770 --> 00:22:48,010
here it would be treated as the upper end for not.

310
00:22:48,400 --> 00:22:49,130
Which is wrong.

311
00:22:49,150 --> 00:22:50,530
It has to be a boolean.

312
00:22:50,770 --> 00:22:57,070
And that has got to do with operator precedence because not has the highest operator precedence.

313
00:22:57,070 --> 00:22:58,750
So it would do something like this.

314
00:22:59,410 --> 00:23:01,600
So it has to do with that.

315
00:23:01,900 --> 00:23:04,030
Now, so let me just put this back.

316
00:23:06,610 --> 00:23:08,320
But then I said that.

317
00:23:09,800 --> 00:23:11,960
This did not give us any problem.

318
00:23:12,200 --> 00:23:16,730
So salary was not treated as an upper end for AD.

319
00:23:17,060 --> 00:23:23,720
And that's because this is a comparison operator and comparison operator has higher precedence than

320
00:23:23,720 --> 00:23:29,840
and and also or so internally this is what will happen.

321
00:23:31,600 --> 00:23:33,340
And it would be like this.

322
00:23:36,420 --> 00:23:39,840
So this is the grouping that that would happen.

323
00:23:39,960 --> 00:23:48,150
And because and is there we will also have this so not has the highest precedence then we have these

324
00:23:48,150 --> 00:23:52,170
comparison operators and after then and and outcomes.

325
00:23:52,530 --> 00:23:56,490
Now let's also change this if we change this to say.

326
00:23:57,710 --> 00:23:59,450
9000 into.

327
00:24:00,710 --> 00:24:01,220
Ten.

328
00:24:01,280 --> 00:24:02,960
Okay, so let's do this.

329
00:24:02,960 --> 00:24:05,570
And it will not give us a compilation error.

330
00:24:07,460 --> 00:24:13,430
As you can see, it will not give us any compensation error because in this case, this is what will

331
00:24:13,430 --> 00:24:14,390
happen internally.

332
00:24:14,390 --> 00:24:16,280
It will be represented as this.

333
00:24:17,030 --> 00:24:21,010
What it means is not still has the highest precedence.

334
00:24:21,020 --> 00:24:22,160
After that.

335
00:24:22,160 --> 00:24:26,270
We have the arithmetic operators which get the next higher precedence.

336
00:24:26,270 --> 00:24:33,920
And after arithmetic operators we have the comparison operators and finally we have and and our operator.

337
00:24:34,670 --> 00:24:42,050
So our not gets the highest precedence and not and and or has the lowest precedence.

338
00:24:42,050 --> 00:24:46,160
And in between we have arithmetic followed by comparison operators.

339
00:24:46,430 --> 00:24:46,620
Okay.

340
00:24:46,700 --> 00:24:49,730
So this is the grouping, this is how it would be grouped.

341
00:24:50,700 --> 00:24:52,730
And just look at the resources section.

342
00:24:52,740 --> 00:24:59,760
I will try to include a link or an article which includes all the precedence rules in Java for all the

343
00:24:59,760 --> 00:25:00,870
different operators.

344
00:25:00,960 --> 00:25:04,620
So some of them, we still did not cover some of the operators, but it is still fine.

345
00:25:04,620 --> 00:25:05,040
If you want.

346
00:25:05,040 --> 00:25:07,590
You can take a look at it for the sake of completeness.

347
00:25:07,770 --> 00:25:15,950
So these are how the grouping happens if you do not include any any of the parentheses.

348
00:25:15,960 --> 00:25:19,110
But in reality you have to.

349
00:25:20,330 --> 00:25:24,500
Include the parenthesis to make the logic clear.

350
00:25:24,770 --> 00:25:30,050
So this all represents some logic, and you need to put the parentheses.

351
00:25:30,050 --> 00:25:37,430
For instance, you might you might want either h to be greater than 35 and salary to be greater than

352
00:25:37,430 --> 00:25:39,230
this, or you might.

353
00:25:39,890 --> 00:25:43,430
So you might want something like this, the rule to be something like this.

354
00:25:44,180 --> 00:25:45,910
Or it has to be good credit.

355
00:25:45,920 --> 00:25:53,000
So if you use these parameters, then it would be very clear to both you as well as any other programmer.

356
00:25:53,000 --> 00:25:55,730
So the code readability improves.

357
00:25:55,730 --> 00:26:02,480
Without this it's very difficult because it is difficult for you to keep these operator precedence rules

358
00:26:02,480 --> 00:26:03,050
in mind.

359
00:26:03,080 --> 00:26:08,810
It is very difficult and many of them do not even know about such operator precedence rules, especially

360
00:26:08,810 --> 00:26:10,340
for logical operators.

361
00:26:11,060 --> 00:26:14,480
That's because many of the books are online or offline.

362
00:26:14,480 --> 00:26:15,890
Courses do not cover this.

363
00:26:15,890 --> 00:26:17,480
Many of them are not covering this.

364
00:26:17,480 --> 00:26:20,180
So many programmers may not even be aware of it.

365
00:26:20,180 --> 00:26:26,360
So you should always use your logic like this and try to keep your code very readable.

366
00:26:26,600 --> 00:26:27,980
So just keep that in mind.

367
00:26:28,130 --> 00:26:35,230
And finally, let's also look at the and operator use to avoid short circuit witness.

368
00:26:35,270 --> 00:26:40,610
So here we have this student object that is being created and we already know that student class looks

369
00:26:40,610 --> 00:26:42,050
like this, right?

370
00:26:42,320 --> 00:26:48,050
So we are creating a student object and passing the idea of thousand and one and the name as Swatch.

371
00:26:48,050 --> 00:26:54,650
And we are invoking the update method which we have implemented in one of the previous demos for comparison

372
00:26:54,650 --> 00:26:55,160
operators.

373
00:26:55,160 --> 00:27:01,610
And we are passing both student as well as a new name the row here and if you look at the update operation

374
00:27:01,610 --> 00:27:05,840
was like this and we had this parameter validation here.

375
00:27:05,840 --> 00:27:08,660
So what we can do here is we can just.

376
00:27:09,790 --> 00:27:12,340
How a rule is like.

377
00:27:13,240 --> 00:27:15,640
Not equal to null.

378
00:27:15,970 --> 00:27:18,160
Then we want to have a second condition.

379
00:27:18,160 --> 00:27:23,500
Let's say as dot ID has to be greater than 1000.

380
00:27:23,890 --> 00:27:25,570
What we passed was 2001.

381
00:27:25,570 --> 00:27:33,820
Only in that scenario we want to update the name to something else so we may have something like this.

382
00:27:33,820 --> 00:27:40,330
So this null check is coming handy here and it ensures that a null pointer exception is not generated

383
00:27:40,330 --> 00:27:41,380
without this.

384
00:27:41,380 --> 00:27:46,900
If you have this and if we pass a null here, then we end up with a null pointer exception.

385
00:27:47,260 --> 00:27:50,890
So that's what I was we were looking at earlier in the demo.

386
00:27:51,720 --> 00:27:53,070
So that's all there is.

387
00:27:53,160 --> 00:27:56,160
And let me just go ahead and compile and run this.

388
00:27:58,430 --> 00:28:03,650
And even if you pass a null, then it would still does it does not give any error here.

389
00:28:03,920 --> 00:28:04,960
So that's it.

390
00:28:04,970 --> 00:28:11,760
And I hope you enjoyed learning about logical operators and I will see you in the next lecture.

391
00:28:11,780 --> 00:28:13,370
Thank you and happy coding.

