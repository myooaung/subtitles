1
00:00:00,910 --> 00:00:07,240
Earlier we briefly discussed about method tables and we see the method table is basically an array of

2
00:00:07,240 --> 00:00:09,340
references to instance methods.

3
00:00:10,060 --> 00:00:13,240
We said it will be used during invocation of instance methods.

4
00:00:14,120 --> 00:00:20,030
Let's look at an example involving method tables and in the process we will also learn something very

5
00:00:20,030 --> 00:00:22,280
interesting with regards to interfaces.

6
00:00:23,900 --> 00:00:28,760
Let's consider this class structure where A is a class and is an interface.

7
00:00:29,210 --> 00:00:31,070
B is a subclass of A while.

8
00:00:31,070 --> 00:00:33,470
C is a subclass of both A and I.

9
00:00:34,580 --> 00:00:36,030
It defines two methods.

10
00:00:36,050 --> 00:00:40,250
One static method call static method and one instance method called fu.

11
00:00:41,230 --> 00:00:43,450
Interface, I declares method bar.

12
00:00:44,080 --> 00:00:48,910
Class B also defines another static method with the same name as in the superclass.

13
00:00:49,180 --> 00:00:52,180
And it also defines one instance method called North.

14
00:00:52,870 --> 00:00:54,210
Classy has two methods.

15
00:00:54,220 --> 00:00:56,880
One is FU, which overrides the in class.

16
00:00:56,890 --> 00:01:02,080
A second method is bar, which is simply an implementation of the interface method.

17
00:01:03,800 --> 00:01:04,069
No.

18
00:01:04,069 --> 00:01:10,160
Let's assume we have this class x with the method go, which has just one parameter which is of reference

19
00:01:10,160 --> 00:01:10,880
type a.

20
00:01:12,000 --> 00:01:16,440
Now in the first statement, the method for is invoked on the reference variable a.

21
00:01:17,320 --> 00:01:23,530
But we know that the actual object, that variable references is not known until runtime as the method

22
00:01:23,680 --> 00:01:27,490
can be invoked with an instance of A or B or C.

23
00:01:28,310 --> 00:01:33,050
So until runtime we really do not know which version of method food would be invoked.

24
00:01:33,770 --> 00:01:39,650
So obviously method table is needed for this as it will be consulted during runtime to determine the

25
00:01:39,650 --> 00:01:41,390
target method to be executed.

26
00:01:43,280 --> 00:01:45,200
So here are the three method tables.

27
00:01:46,010 --> 00:01:48,450
At the top, we have the method table for Class A.

28
00:01:49,250 --> 00:01:55,250
Since we said method table can be implemented as an array, we can see the index numbers displayed besides

29
00:01:55,250 --> 00:01:56,120
the method table.

30
00:01:57,080 --> 00:02:00,830
The element is basically a pointer to the actual method bytecode.

31
00:02:01,460 --> 00:02:07,430
So in method table for a, the element is referencing the method code corresponding to method foo in

32
00:02:07,430 --> 00:02:08,150
class a.

33
00:02:09,169 --> 00:02:16,280
Let's assume that within the method table of a class JVM always stores references to superclass methods

34
00:02:16,310 --> 00:02:19,340
before references to methods in its own class.

35
00:02:20,250 --> 00:02:22,380
Moreover, four methods within the same class.

36
00:02:22,590 --> 00:02:27,150
Let's also assume they are stored based on the order in which they appear in the class.

37
00:02:27,980 --> 00:02:33,740
So if you look at Class B's method table, first element is referencing the inherited method for frame

38
00:02:33,740 --> 00:02:34,060
class.

39
00:02:34,070 --> 00:02:36,890
A second element is a method north.

40
00:02:37,430 --> 00:02:44,480
Now for Class C, method four is the first element as it is still overriding the method for in superclass.

41
00:02:45,380 --> 00:02:50,930
So this version of Method four would occupy the position of Ace method four in the method table.

42
00:02:51,790 --> 00:02:56,680
So it still gets the presidents, even though Barr appears before full in the class.

43
00:02:57,130 --> 00:02:59,050
Second element is the Barr method.

44
00:02:59,500 --> 00:03:01,900
Going back to our first statement and method go.

45
00:03:02,170 --> 00:03:09,880
If object in context is an instance of class C, then GM would look at C's method table and invoke C's

46
00:03:09,880 --> 00:03:13,450
method foo, which is referenced from the index position zero.

47
00:03:14,280 --> 00:03:20,460
Now, the interesting thing here is GM doesn't have to perform any search in the method table to perform

48
00:03:20,460 --> 00:03:21,450
this invocation.

49
00:03:22,400 --> 00:03:24,230
Four eight on full statement.

50
00:03:24,530 --> 00:03:31,310
The runtime constant pool of Class X will have a direct reference to index number zero in the method

51
00:03:31,310 --> 00:03:31,850
table.

52
00:03:32,540 --> 00:03:35,480
Now, it doesn't matter what the target method table is.

53
00:03:35,630 --> 00:03:38,720
It could belong to object A or B or C.

54
00:03:39,410 --> 00:03:45,020
The reference to method four is always stored as index zero, irrespective of method tables.

55
00:03:46,130 --> 00:03:50,560
That's because of the reference type is a class like Class A in this example.

56
00:03:50,830 --> 00:03:56,590
Then the reference to method that is being invoked will always be stored in the same slot in the method

57
00:03:56,590 --> 00:04:01,240
table, whether it is the method table of Class A or any of its subclasses.

58
00:04:02,240 --> 00:04:08,870
In other words, it's because of the rule we discussed earlier where for a given class, JVM always

59
00:04:08,870 --> 00:04:14,600
stores references to superclass methods before references to methods in its own class.

60
00:04:15,480 --> 00:04:20,820
Due to this reference to foo is an index zero in both subclasses b and c.

61
00:04:21,730 --> 00:04:26,080
Not the same does not apply if the reference type is an interface rather than a class.

62
00:04:26,500 --> 00:04:27,730
So let's look at that.

63
00:04:27,970 --> 00:04:32,080
Let's consider the scenario when Class A is actually an interface.

64
00:04:34,450 --> 00:04:35,680
Then here is what we have.

65
00:04:36,340 --> 00:04:42,130
Class B now implements Method Fool, which appears before method nor in the class file, and the same

66
00:04:42,130 --> 00:04:47,100
is reflected in the method table of class B with foo appearing before north.

67
00:04:48,010 --> 00:04:51,760
Nothing changed with C, but the method table did change.

68
00:04:52,330 --> 00:04:58,540
We now have a bar appearing at zero position and that's because Method Barr appears before method four

69
00:04:58,570 --> 00:04:59,530
in the class file.

70
00:05:00,410 --> 00:05:05,810
Note that both methods in Class C are implementation methods declared in two different interfaces.

71
00:05:06,560 --> 00:05:12,740
Now, when we consider method go, which now has interface as a reference type for the method parameter,

72
00:05:13,070 --> 00:05:18,440
then the first statement can no longer have a reference to a fixed slot in the method table.

73
00:05:19,310 --> 00:05:25,400
And Best Method table food reference is at index zero while in CS method table it is an index one.

74
00:05:25,910 --> 00:05:32,300
So that's mainly because the reference type is an interface and the invoke method may appear anywhere

75
00:05:32,300 --> 00:05:34,070
in the subclass of the interface.

76
00:05:34,700 --> 00:05:40,580
So JVM now has to actually search the method table of the object to find the target method to invoke.

77
00:05:41,570 --> 00:05:47,030
Due to this, invoking a method through an interface as a reference can be slightly slower than if the

78
00:05:47,030 --> 00:05:48,230
reference is a class.

79
00:05:48,800 --> 00:05:50,360
So that's an interesting fact.

80
00:05:50,940 --> 00:05:55,320
But I think the slowness would be very minimal and is not something to be concerned of.

81
00:05:55,950 --> 00:06:01,500
So we should still stick to what we learned from effective Java, where one of the items recommends

82
00:06:01,500 --> 00:06:03,990
referring to objects by their interfaces.

83
00:06:04,710 --> 00:06:08,970
No, the second statement in the method go is referencing the static method.

84
00:06:09,570 --> 00:06:13,410
For this we do not need a method table as static methods are static.

85
00:06:14,370 --> 00:06:16,170
That is a compile time itself.

86
00:06:16,260 --> 00:06:22,260
We know where the method is and so the runtime constant pool would have a direct reference to static

87
00:06:22,260 --> 00:06:23,610
method in class A.

88
00:06:24,060 --> 00:06:27,000
So it doesn't matter what object is passed to method go.

89
00:06:27,480 --> 00:06:31,530
Basically, method tables include only references to instance methods.

90
00:06:32,440 --> 00:06:35,260
Also only concrete classes have method tables.

91
00:06:35,440 --> 00:06:40,300
Even abstract classes do not have method tables as they cannot be instantiated.

92
00:06:41,230 --> 00:06:46,510
So through this simple example, we have seen how method tables are structured, and we have seen how

93
00:06:46,510 --> 00:06:52,060
method invocation happens when the type of the reference variable is a class or an interface.

94
00:06:52,360 --> 00:06:53,670
And that's about it.

95
00:06:53,680 --> 00:06:54,370
Thank you.

