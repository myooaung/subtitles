1
00:00:02,140 --> 00:00:03,040
Hi there.

2
00:00:03,070 --> 00:00:03,640
This is Dana.

3
00:00:04,210 --> 00:00:05,200
And welcome back.

4
00:00:05,230 --> 00:00:10,030
Let's now look at the reduction operations, which are also terminal operations.

5
00:00:11,290 --> 00:00:13,850
Production operations can be classified into two types.

6
00:00:13,870 --> 00:00:20,080
One of them is represented by the reduced method, while the other by the collect method will look at

7
00:00:20,080 --> 00:00:20,950
the collect method.

8
00:00:20,950 --> 00:00:27,070
In one of the earlier demos where we collected a stream of elements into a list, and the stream of

9
00:00:27,070 --> 00:00:31,870
elements can also be collected into other types, like the set or the map.

10
00:00:32,110 --> 00:00:35,170
And we will look at the collect method in a subsequent lecture.

11
00:00:35,200 --> 00:00:38,620
In this particular lecture, let's just focus on the reduced method.

12
00:00:39,010 --> 00:00:41,530
And both of these are overloaded methods.

13
00:00:41,530 --> 00:00:46,630
And within reduce, we have three overloaded methods and we will take a look at all three of them.

14
00:00:47,110 --> 00:00:49,030
So let's focus only on the reduce method.

15
00:00:49,780 --> 00:00:55,570
Reduce method, as the name implies, is used to reduce the stream of elements into a single value.

16
00:00:55,900 --> 00:00:59,620
So we have the stream of elements and the output would be a single value.

17
00:01:00,330 --> 00:01:06,390
On some would be one of the examples say if you have a stream of numbers and if we want to compute the

18
00:01:06,390 --> 00:01:11,550
sum of the stream of elements, the stream of numbers, then we can use the reduced method.

19
00:01:11,760 --> 00:01:16,040
And the reduced method accepts an operation called reduction operation.

20
00:01:16,050 --> 00:01:19,140
And in this case, the reduction operation would be the sum operation.

21
00:01:20,010 --> 00:01:25,410
Similarly, we might want to find the maxima or the minima of the stream of elements.

22
00:01:26,830 --> 00:01:32,740
For example, in our list of books example, which was used as a use case in our demos, where we were

23
00:01:32,740 --> 00:01:36,910
aggregating the list of books from two sources Amazon and Barnes and Noble.

24
00:01:37,210 --> 00:01:43,000
We might want to find the book with the lowest price, and for that we can use the reduced method.

25
00:01:43,210 --> 00:01:45,550
And very soon we will do a demo of this one.

26
00:01:47,220 --> 00:01:49,590
Now here is how the reduction happens.

27
00:01:49,590 --> 00:01:50,910
The reduced method works.

28
00:01:51,180 --> 00:01:55,710
So as I mentioned earlier, the reduced method takes a reduction operation.

29
00:01:55,740 --> 00:01:57,900
In this case, we are doing a sum.

30
00:01:57,900 --> 00:02:03,180
So the reduction operation would be some and the reduction operation would be applied repetitively on

31
00:02:03,180 --> 00:02:04,650
the stream of elements.

32
00:02:04,860 --> 00:02:10,020
So here at the top we have the stream of elements, four elements five, one, three and six.

33
00:02:10,380 --> 00:02:14,490
And the reduced value, which is the output is the 15 which is shown at the bottom.

34
00:02:14,940 --> 00:02:17,760
So the reduction operation will be applied repetitively.

35
00:02:17,760 --> 00:02:24,270
So initially it will take the first two elements, 511, and it will add them to get the value six.

36
00:02:24,810 --> 00:02:30,390
Then the sum operation will be applied on the result value six and the next element which is three.

37
00:02:30,390 --> 00:02:31,740
To get the value nine.

38
00:02:32,160 --> 00:02:37,200
And once again the plus operation will be applied on the new result, value nine and the next element

39
00:02:37,200 --> 00:02:39,960
six to get the final value 15.

40
00:02:40,410 --> 00:02:44,340
So this is how the reduced method works, and this is the syntax.

41
00:02:44,430 --> 00:02:50,880
So it takes the reduction operation, which is a binary operator, and it produces an optional and the

42
00:02:50,880 --> 00:02:54,690
reduced value, the output value will be stored within the optional.

43
00:02:55,200 --> 00:02:59,520
Now if the stream itself is empty, then the optional will not have any value.

44
00:03:00,120 --> 00:03:06,120
So here the input is binary operator and it is called as the parameter name is accumulator because we

45
00:03:06,120 --> 00:03:12,540
are accumulating the value and the binary operator because it is going to work on two stream elements

46
00:03:12,540 --> 00:03:13,230
at a time.

47
00:03:13,620 --> 00:03:17,460
So that's why it is a binary operator, which is a functional interface.

48
00:03:17,460 --> 00:03:21,150
So we would have to provide an implementation of the binary operator.

49
00:03:21,750 --> 00:03:23,370
And here is an example.

50
00:03:23,400 --> 00:03:30,240
Here we are computing the sum, so we have the same elements five, one, three and six, and we are

51
00:03:30,240 --> 00:03:32,970
having an array here, an integer array.

52
00:03:33,210 --> 00:03:36,450
So we are invoking the stream method of the arrays class.

53
00:03:36,450 --> 00:03:42,690
So we have an array as a stream source and we are chaining it with the reduce method and to the Reduce

54
00:03:42,690 --> 00:03:45,030
method which accepts a binary operator.

55
00:03:45,030 --> 00:03:50,460
We are passing this method called sum, which is a static method in the integer class.

56
00:03:51,150 --> 00:03:52,700
So that's being passed here.

57
00:03:52,710 --> 00:03:59,400
So that is the reduction operation and the sum method will be invoked repetitively for these stream

58
00:03:59,400 --> 00:04:00,000
elements.

59
00:04:00,180 --> 00:04:04,770
And the output is an optional which would have the reduced value which is 15.

60
00:04:05,550 --> 00:04:06,720
So this is how it works.

61
00:04:07,910 --> 00:04:13,190
Now, if the same thing is done in an imperative way, in the traditional way, we would have to use

62
00:04:13,190 --> 00:04:13,970
a far loop.

63
00:04:14,000 --> 00:04:20,300
So here we are having the variable called sum, and the sum will hold the final value.

64
00:04:20,300 --> 00:04:25,340
So within the far loop we are iterating through the list of numbers, which is the stream of numbers,

65
00:04:25,340 --> 00:04:31,580
and we are repetitively applying the sum operator on the numbers and we are accumulating the the value

66
00:04:31,580 --> 00:04:33,200
into the sum variable.

67
00:04:33,470 --> 00:04:36,260
So the sum variable will have the final accumulated value.

68
00:04:36,620 --> 00:04:41,840
Now we know that the problem with this kind of a code is first thing is it is cumbersome.

69
00:04:42,080 --> 00:04:46,070
So it will take a little bit of time to comprehend this particular code.

70
00:04:46,430 --> 00:04:50,600
And the second thing is, if we want to paralyse this thing, then it is going to be painful.

71
00:04:50,600 --> 00:04:50,930
Right.

72
00:04:50,930 --> 00:04:52,580
We very well know about that.

73
00:04:53,090 --> 00:04:58,730
And the third thing is, if you have a shared mutable variable and we are going to paralyse, which

74
00:04:58,730 --> 00:05:04,310
means that we are going to use multithreading, then we have to synchronize the shared mutable variable.

75
00:05:04,340 --> 00:05:07,370
So in this case, the shared mutable variable will be sum.

76
00:05:07,670 --> 00:05:14,000
And if we are paralyzing this thing, which means that the loop is somehow going to be paralyzed, so

77
00:05:14,240 --> 00:05:17,330
multiple threads will be used in order to compute the sum.

78
00:05:17,330 --> 00:05:20,300
So these different threads will have to coordinate with each other.

79
00:05:20,330 --> 00:05:22,330
Otherwise, we will have a race condition.

80
00:05:22,340 --> 00:05:25,890
So we will have to synchronize the sum variable.

81
00:05:25,910 --> 00:05:28,580
And because of that, it's going to be expensive.

82
00:05:28,850 --> 00:05:35,270
So whatever we are going to gain due to the realization the speed is what we are going to gain due to

83
00:05:35,270 --> 00:05:36,290
polarization.

84
00:05:36,290 --> 00:05:40,550
So that is going to be compromised because synchronization is expensive.

85
00:05:40,730 --> 00:05:43,620
So that's the problem we have with the imperative code.

86
00:05:43,640 --> 00:05:46,910
But if we use reduce, then we will not have this problem.

87
00:05:47,300 --> 00:05:49,610
So with the reduce, it's just the same code.

88
00:05:49,610 --> 00:05:53,360
But the stream method is now chained with another method called parallel.

89
00:05:53,600 --> 00:05:58,100
So the parallel method is being sandwiched between the stream and the reduced method, and the rest

90
00:05:58,100 --> 00:05:59,390
of the code is just the same.

91
00:05:59,840 --> 00:06:05,120
With this, the reduced method will be able to paralyze in a graceful way without synchronization.

92
00:06:05,720 --> 00:06:07,850
So that's going to make it very efficient.

93
00:06:07,850 --> 00:06:12,120
So that's the benefit that we have with the reduced method, and this is how it works.

94
00:06:12,140 --> 00:06:17,180
So once again, we have the four elements five, one, three and six, but in this case, the reduced

95
00:06:17,180 --> 00:06:22,670
method, because we are using a parallel stream, it's going to partition the stream of elements into

96
00:06:22,670 --> 00:06:23,630
two segments.

97
00:06:23,860 --> 00:06:25,410
Okay, segment one and segment two.

98
00:06:25,430 --> 00:06:31,280
Let's assume that there are only two threats to cause, and within each core, the reduction operation

99
00:06:31,280 --> 00:06:37,190
will be applied repetitively, just like the way it happens in a sequential approach.

100
00:06:37,760 --> 00:06:42,460
So earlier we looked at the sequential approach where the sum operation was being applied repetitively.

101
00:06:42,470 --> 00:06:45,380
So that's what will happen in each of these segments.

102
00:06:45,440 --> 00:06:49,060
And each of these segments is producing an accumulated value.

103
00:06:49,070 --> 00:06:55,400
In this case, it would be six and nine, and then finally the reduced method will apply the plus operator

104
00:06:55,400 --> 00:06:58,640
on these two accumulated values to get the final value.

105
00:06:58,640 --> 00:06:59,210
15.

106
00:07:00,950 --> 00:07:07,640
But one thing to note is in order for the reduced method to work correctly, the reduction operation

107
00:07:07,640 --> 00:07:09,140
must be associated.

108
00:07:09,930 --> 00:07:13,640
And we know from high school that this is how society property looks like.

109
00:07:13,650 --> 00:07:15,630
Here we are using the plus operator.

110
00:07:15,930 --> 00:07:18,600
So the reduction operation is a plus operation here.

111
00:07:18,870 --> 00:07:22,140
So both of these expressions will result in the same value.

112
00:07:22,140 --> 00:07:24,270
And we know that that is the associated property.

113
00:07:24,540 --> 00:07:31,140
So if we partition the elements, as in the left expression, where A and B will be in one segment to

114
00:07:31,140 --> 00:07:37,080
produce one accumulated value and C will be in the second segment, although it is just a single value

115
00:07:37,290 --> 00:07:42,840
still that value, when it is added, it will be equal to the right side expression if the partition

116
00:07:42,840 --> 00:07:45,240
was done the way it is shown on the right side.

117
00:07:45,540 --> 00:07:47,370
So that's the associative property.

118
00:07:47,400 --> 00:07:51,160
Now if we extend it to four elements, then this is how it looks.

119
00:07:51,180 --> 00:07:57,420
So all of these are different expressions which satisfy the associative property, and all of these

120
00:07:57,420 --> 00:07:58,990
will produce the same value.

121
00:07:59,010 --> 00:08:05,700
But typically, you can expect the second expression to be the expression that would be used in N in

122
00:08:05,700 --> 00:08:06,480
a parallel setup.

123
00:08:06,480 --> 00:08:12,740
So the reduced method would divide the four elements into two segments and A and B will be in one segment,

124
00:08:12,750 --> 00:08:17,880
C and D will be in second segment, and the accumulated values will be added once again to get the final

125
00:08:17,880 --> 00:08:18,420
value.

126
00:08:18,780 --> 00:08:24,270
But the thing to note is the order is important here for plus, it doesn't matter if the order of the

127
00:08:24,270 --> 00:08:30,300
stream elements are different, but if we are considering something like string concatenation, then

128
00:08:30,300 --> 00:08:32,820
obviously the order has to be maintained.

129
00:08:33,299 --> 00:08:38,100
So the order is important and we need this associated property in order for parallelism to work.

130
00:08:38,549 --> 00:08:45,330
But if the reduction operation does not support a sensitivity, then we can have incorrect result.

131
00:08:45,360 --> 00:08:47,560
Most likely we will have an incorrect result.

132
00:08:47,580 --> 00:08:52,620
And moreover, we can also have inconsistent results across multiple runs.

133
00:08:53,190 --> 00:08:58,410
And average is an example of a reduction operation which is not associated.

134
00:08:58,770 --> 00:09:03,510
You can take a pen and a paper and you can work it out and you will see that average is not an associative

135
00:09:03,780 --> 00:09:06,420
but does not satisfy the associative property.

136
00:09:08,160 --> 00:09:09,980
Now this is the second syntax.

137
00:09:09,990 --> 00:09:13,770
The reduced method is taking two parameters here like earlier.

138
00:09:13,770 --> 00:09:20,700
It is also taking the binary operator, but the first parameter is called as an identity and the output,

139
00:09:20,730 --> 00:09:26,760
the return value is a T, so it is returning a value rather than it is returning.

140
00:09:26,760 --> 00:09:30,960
An optional earlier version was returning an optional, but this one returns the value.

141
00:09:31,260 --> 00:09:37,740
Now here, if the stream is empty, then this particular method reduce will return identity.

142
00:09:38,280 --> 00:09:41,250
So the identity is like a default value and that will be returned.

143
00:09:41,520 --> 00:09:48,870
So here we have an example where we are doing string concatenation and the identity is an empty string.

144
00:09:49,380 --> 00:09:57,420
And the way this method works is that initially when the reduce starts working, it takes the identity

145
00:09:57,420 --> 00:10:00,660
and then it appends to the first element.

146
00:10:00,660 --> 00:10:06,090
So earlier when we looked at the previous example with the sum operation, it took the first two elements

147
00:10:06,090 --> 00:10:08,250
and then it added the first two elements.

148
00:10:08,580 --> 00:10:14,250
Now if we consider the same sum operation for this reduce method and let's say we also have an identity

149
00:10:14,250 --> 00:10:20,190
of zero, then the identity will be added to the first element and that result will be added to the

150
00:10:20,190 --> 00:10:21,090
second element.

151
00:10:21,480 --> 00:10:26,100
So that's how this particular use method works, and that's how the next version will also work.

152
00:10:27,430 --> 00:10:29,590
Now here we are calling it as identity.

153
00:10:29,710 --> 00:10:31,690
Identity is just a property here.

154
00:10:31,690 --> 00:10:33,880
So the empty string is identity.

155
00:10:34,000 --> 00:10:41,860
And if we append it with Java, that would be same as Java being appended with an empty string and the

156
00:10:41,860 --> 00:10:43,120
result is Java.

157
00:10:43,120 --> 00:10:46,270
Because of that it is called as an identity property.

158
00:10:46,420 --> 00:10:47,740
So let's let's look at that.

159
00:10:47,740 --> 00:10:49,090
Let's look at an example here.

160
00:10:49,090 --> 00:10:55,390
So here we want to concatenate these three strings called A and B, let's assume that these are grades

161
00:10:55,390 --> 00:10:57,730
of A student and we just want to concatenate them.

162
00:10:57,730 --> 00:11:02,620
And we are using the plus operation, the concatenation operation in a parallel setup.

163
00:11:02,620 --> 00:11:06,280
So the reduced method will first partition them into two segments.

164
00:11:06,280 --> 00:11:11,230
One of them is A and the second one is the the last two strings, A and B.

165
00:11:12,830 --> 00:11:17,230
And this is what is happening in each of the segments, in each of the threads.

166
00:11:17,240 --> 00:11:23,000
So we have the identity which is empty string and that is concatenated with a to get the value.

167
00:11:23,030 --> 00:11:25,040
A So that's the left left hand side.

168
00:11:25,040 --> 00:11:31,790
And on the right side we first take the identity concatenated with A to get A and that resulting value

169
00:11:31,790 --> 00:11:35,570
will be concatenated with B to get the final value a.

170
00:11:35,600 --> 00:11:36,020
B.

171
00:11:37,470 --> 00:11:45,360
So we have these two segments and the accumulated values are A and a B, and then we apply the concatenation

172
00:11:45,360 --> 00:11:49,710
operation one more time because the concatenation is going to be applied repetitively.

173
00:11:49,920 --> 00:11:54,660
So it is applied one more time and we get this final value, A and B.

174
00:11:56,050 --> 00:11:59,260
And this is a simplified representation of the reduced method.

175
00:11:59,500 --> 00:12:05,950
So the first parameter is AI, which is actually off type T and the reduction operation we are calling

176
00:12:05,950 --> 00:12:06,670
it as a accumulator.

177
00:12:06,670 --> 00:12:12,580
And it takes two values of type T in our string example, it would be two strings and it produces a

178
00:12:12,580 --> 00:12:13,030
string.

179
00:12:13,900 --> 00:12:18,870
But we know that the concatenation operation is expensive, the plus operator is expensive.

180
00:12:18,880 --> 00:12:22,420
So we might want to use a string builder and let's look at an example.

181
00:12:22,420 --> 00:12:25,690
And with that we are going to introduce the third reduce method.

182
00:12:26,530 --> 00:12:31,060
So we are going to concatenate a B with the append method in the string builder.

183
00:12:31,060 --> 00:12:36,670
So once again, we have the partitions and this is what happens in the two partitions.

184
00:12:36,910 --> 00:12:39,370
So we have the string builder first.

185
00:12:39,730 --> 00:12:39,930
Okay?

186
00:12:40,000 --> 00:12:46,090
So the string builder will be the identity here and it takes an empty string and we are appending a

187
00:12:46,090 --> 00:12:47,080
string to it.

188
00:12:47,440 --> 00:12:53,320
So we are we have a string builder and it is being appended with a with a string called A.

189
00:12:53,530 --> 00:12:55,180
So those are of two different types.

190
00:12:55,180 --> 00:13:01,060
So we have string builder and we have in the earlier reduced version we had two strings.

191
00:13:01,600 --> 00:13:04,600
Both of them were of the same type and were producing a string.

192
00:13:04,600 --> 00:13:10,600
But here we have two different types a string builder and a string, and we are producing a string builder.

193
00:13:10,840 --> 00:13:16,300
And on the right side once again we are taking the empty string builder, appending it with a we get

194
00:13:16,300 --> 00:13:23,290
a string builder of a, then that result will be appended with B to get string builder off a b.

195
00:13:24,810 --> 00:13:26,160
And this is how it looks.

196
00:13:26,430 --> 00:13:27,930
So it is an accumulator.

197
00:13:27,930 --> 00:13:32,510
So we have the reduced method and we have a which in this case is a string builder.

198
00:13:32,520 --> 00:13:39,810
And the type of I is you, you in this case would be string builder and the accumulator function is

199
00:13:39,810 --> 00:13:43,140
taking a you and under T and is producing a you.

200
00:13:43,410 --> 00:13:48,750
So in this case it would be a string builder and TT would correspond to the string.

201
00:13:48,750 --> 00:13:55,290
So if you take the left expression here string builder of empty string and of a so that is where we

202
00:13:55,290 --> 00:14:00,750
have you and you would correspond to string builder and HT would correspond to string and it is generating

203
00:14:00,750 --> 00:14:01,470
a string builder.

204
00:14:01,470 --> 00:14:05,250
That's why we have string builder of a as the output on the left side.

205
00:14:06,200 --> 00:14:12,800
Now the question is so we have two string builders now and we need to concatenate them to produce another

206
00:14:12,800 --> 00:14:13,600
string builder.

207
00:14:13,610 --> 00:14:19,280
But the accumulator function, as you can see, is taking two different types until it's not taking

208
00:14:19,280 --> 00:14:24,470
you and you like in the case of the previous reduced method, it's taking to different types.

209
00:14:24,560 --> 00:14:27,920
But here we have as B of A and B of a B.

210
00:14:28,130 --> 00:14:34,190
So what it means is we need one more function and that is called as a combiner function and it takes

211
00:14:34,190 --> 00:14:37,250
two elements of the same type and produces another type.

212
00:14:37,280 --> 00:14:42,830
And that final produced value is what is being returned is it is of type U.

213
00:14:42,920 --> 00:14:45,260
So that would be another string builder.

214
00:14:45,410 --> 00:14:47,510
So that's what is happening here.

215
00:14:47,810 --> 00:14:50,660
So the compiler is nothing but the append method.

216
00:14:50,660 --> 00:14:54,350
So in the string builder we have overloaded append methods.

217
00:14:54,350 --> 00:15:01,130
So one of them we have seen within the accumulator where the method was taking a string as an input.

218
00:15:01,310 --> 00:15:07,520
But this append method that we see at the bottom is taking a string builder as a parameter.

219
00:15:07,880 --> 00:15:11,210
So we have string builder dot append off another string builder.

220
00:15:11,480 --> 00:15:18,590
So it's taking string builder off a dot dot string builder of a B to produce a string builder of a a

221
00:15:18,620 --> 00:15:21,290
B so it's not producing a string, but a string builder.

222
00:15:22,700 --> 00:15:25,220
So here is the syntax and here is an example.

223
00:15:25,220 --> 00:15:31,100
The syntax is just the same red use and it takes an identity and it takes an accumulator, which is

224
00:15:31,100 --> 00:15:35,690
a bi function, so it takes a U and a D and produces a U.

225
00:15:36,230 --> 00:15:41,600
And then the Combiner is a binary operator and it takes to use and produces a u.

226
00:15:41,870 --> 00:15:44,060
So the example is the previous example.

227
00:15:44,060 --> 00:15:45,860
So the identity is a string builder.

228
00:15:45,860 --> 00:15:51,920
Then the accumulator is taking a string builder and a string as input and as appending the string to

229
00:15:51,920 --> 00:15:53,060
the string builder.

230
00:15:53,090 --> 00:15:58,400
And finally, the Combiner is taking two string builders and is appending the second string builder

231
00:15:58,400 --> 00:16:02,270
to the first string builder to produce the final string builder.

232
00:16:02,270 --> 00:16:04,130
So that's the combiner function.

233
00:16:04,160 --> 00:16:07,700
Now let's go ahead and look at everything in code.

234
00:16:09,980 --> 00:16:10,250
Okay.

235
00:16:10,250 --> 00:16:16,430
Here we are in the stream operations class in the package, calm, semantic squared, functional streams.

236
00:16:16,520 --> 00:16:18,320
And here we are in the main method.

237
00:16:18,590 --> 00:16:22,270
So from the main method, we are going to invoke different methods.

238
00:16:22,280 --> 00:16:28,010
So one of them is the reduced method and we are going to pass the books which we are aggregating from

239
00:16:28,010 --> 00:16:29,180
the different sources.

240
00:16:29,390 --> 00:16:35,630
And the reduced method will actually reduce the stream of elements to find the book with the lowest

241
00:16:35,630 --> 00:16:40,880
price, and it will use the first version of the reduce the simplest version, and most likely you will

242
00:16:40,880 --> 00:16:43,550
be using that particular method most of the time.

243
00:16:43,760 --> 00:16:47,810
And we will also look at the same logic, but done in an imperative way.

244
00:16:48,140 --> 00:16:50,960
And then finally we will look at the overloaded reductions.

245
00:16:50,960 --> 00:16:53,000
So let's look at the reduced method here.

246
00:16:54,000 --> 00:16:58,590
So the goal is to find the lowest priced book with a rating greater than or equal to 4.5, which means

247
00:16:58,590 --> 00:17:00,170
that we are using a filter.

248
00:17:00,180 --> 00:17:02,760
So let's go ahead and take books.

249
00:17:04,490 --> 00:17:06,800
The typical pipeline construction.

250
00:17:09,609 --> 00:17:10,869
Be for book.

251
00:17:14,119 --> 00:17:21,109
And if rating is greater than or equal to 4.5 only, then we are going to process the stream element.

252
00:17:23,250 --> 00:17:25,050
So it would be the reduced method.

253
00:17:26,020 --> 00:17:29,470
And we need to pass the accumulator, which is the reduction operation.

254
00:17:29,860 --> 00:17:32,050
So we will have to box.

255
00:17:33,030 --> 00:17:39,360
Be one for the first book, be two for the second book, and let's use a ternary operator here.

256
00:17:39,750 --> 00:17:42,540
So price is what we need.

257
00:17:42,540 --> 00:17:45,480
So we'll say get price.

258
00:17:47,100 --> 00:17:48,630
If it is less than or equal to.

259
00:17:49,480 --> 00:17:50,830
B do not get price.

260
00:17:54,130 --> 00:17:55,930
Then return B one.

261
00:17:56,840 --> 00:17:58,460
Or return B two.

262
00:17:58,820 --> 00:18:05,890
Now we know that the first reduce method returns an optional right and that would have the reduced value.

263
00:18:05,900 --> 00:18:13,880
And from our earlier lecture we know that we can make use of if present here it is and if present takes

264
00:18:13,880 --> 00:18:14,690
a consumer.

265
00:18:14,690 --> 00:18:19,040
So if the reduced value is found, then we want to print it.

266
00:18:19,070 --> 00:18:23,600
So we will say the consumer takes only a single parameter.

267
00:18:24,650 --> 00:18:25,600
Six out.

268
00:18:31,300 --> 00:18:31,770
Brooke.

269
00:18:32,260 --> 00:18:33,610
And let's just Brent be.

270
00:18:34,390 --> 00:18:35,530
So this is what we have.

271
00:18:35,740 --> 00:18:39,040
And before running, let's also look at the imperative code.

272
00:18:39,070 --> 00:18:40,530
So this is the imperative code.

273
00:18:40,540 --> 00:18:45,430
We have the list of books and we are iterating through the books using a far loop.

274
00:18:45,730 --> 00:18:49,930
So the accumulated value, the book with the lowest price will be stored in this variable.

275
00:18:49,960 --> 00:18:54,910
Just like the sum variable in our example, some examples that we have seen in the slides.

276
00:18:55,180 --> 00:18:57,370
So initially the result would be null.

277
00:18:57,370 --> 00:19:02,880
So we will go here into this loop and we want to make sure the book has a rating of at least 4.5.

278
00:19:02,890 --> 00:19:04,060
That's what we are doing here.

279
00:19:04,330 --> 00:19:09,070
And the first book that has a rating greater than or equal to 4.5 will be stored in this variable result.

280
00:19:09,070 --> 00:19:12,970
And then we would hit the statement continue and we would continue with the rest of the books.

281
00:19:12,970 --> 00:19:16,420
But in the next iteration, the result would not be equal to null.

282
00:19:16,420 --> 00:19:19,000
So we would come down here and that book.

283
00:19:19,000 --> 00:19:23,050
We want to ensure that it also has a rating greater than or equal to 4.5.

284
00:19:23,230 --> 00:19:27,370
And if it does, then we compare its price with the price.

285
00:19:27,400 --> 00:19:30,850
Here it is with the price of the the current result.

286
00:19:31,300 --> 00:19:36,430
And if it is lower than the current result, then we would update the result variable with the new book.

287
00:19:36,460 --> 00:19:37,320
That's what we do.

288
00:19:37,330 --> 00:19:38,840
So it's very simple.

289
00:19:38,860 --> 00:19:40,690
So let's go ahead and run it.

290
00:19:42,260 --> 00:19:47,570
So as you can see, this is the red use method here, the first version and it is printing this, the

291
00:19:47,570 --> 00:19:52,490
title Java three and it has a price of 20 and a rating of 4.6.

292
00:19:52,490 --> 00:19:53,780
You can verify it later.

293
00:19:53,780 --> 00:19:58,670
The data is inside the data extractor class and we can see that we have the same value here.

294
00:19:58,760 --> 00:20:02,000
But we know that the imperative code has these disadvantages.

295
00:20:02,000 --> 00:20:03,140
Like it's cumbersome.

296
00:20:03,290 --> 00:20:05,300
As we can see, it's much more complicated here.

297
00:20:05,330 --> 00:20:10,130
Paralyzing is painful and synchronization would slow things down, synchronizing the result variable

298
00:20:10,130 --> 00:20:15,410
in this case, which is a shared mutable variable in case the for loop is paralyzed.

299
00:20:15,560 --> 00:20:16,550
So that's with that.

300
00:20:16,550 --> 00:20:20,840
Now let's look at the the last one, which is the overloaded reductions.

301
00:20:20,840 --> 00:20:22,970
So let me just uncomment this thing here.

302
00:20:25,650 --> 00:20:29,130
So here we are going to look at the two reduction methods.

303
00:20:29,130 --> 00:20:32,460
There are two other versions, so we are going to look at the same examples.

304
00:20:33,480 --> 00:20:36,330
So we have the grapes here as the area of strength.

305
00:20:36,330 --> 00:20:38,220
So we'll say stream.

306
00:20:41,740 --> 00:20:42,580
Dot reduce.

307
00:20:42,580 --> 00:20:46,180
So let's look at the second version which takes an identity which is empty string.

308
00:20:47,830 --> 00:20:50,170
Two parameters for the accumulator.

309
00:20:53,500 --> 00:20:55,120
So that's the concatenation.

310
00:20:59,690 --> 00:21:02,390
Undeterred, another string, let's call it, conquered one.

311
00:21:10,950 --> 00:21:11,960
So that's the first version.

312
00:21:12,080 --> 00:21:13,770
Let's do the second version also.

313
00:21:15,540 --> 00:21:17,040
So this part would be same.

314
00:21:17,890 --> 00:21:19,840
In fact, this would be string builder.

315
00:21:24,780 --> 00:21:26,700
So that's the identity in this case.

316
00:21:27,090 --> 00:21:28,800
Then we have the accumulator.

317
00:21:28,800 --> 00:21:32,550
Accumulator will take a string builder and a string.

318
00:21:33,780 --> 00:21:35,490
And it will say as we dot.

319
00:21:37,050 --> 00:21:40,780
Happened off as so that's the accumulator.

320
00:21:40,800 --> 00:21:47,310
Now we need the Combiner Combiner, as we said, takes to string builders.

321
00:21:48,690 --> 00:21:51,000
It's called SB one, SB two.

322
00:21:55,210 --> 00:21:58,840
And it takes the second pen, overloaded a pen.

323
00:21:58,870 --> 00:22:00,520
So it will be as this one.

324
00:22:01,560 --> 00:22:02,590
And that's it.

325
00:22:02,610 --> 00:22:04,080
And this one would return.

326
00:22:05,580 --> 00:22:06,720
A string builder.

327
00:22:08,860 --> 00:22:10,150
Let's call it to.

328
00:22:12,260 --> 00:22:13,850
And it's also print this one.

329
00:22:20,100 --> 00:22:23,220
So this one will invoke the two string method.

330
00:22:23,220 --> 00:22:26,490
The println method will invoke the two string method of the string builder.

331
00:22:26,580 --> 00:22:27,300
So that's it.

332
00:22:27,300 --> 00:22:29,790
So let me just go ahead and run this.

333
00:22:31,950 --> 00:22:38,280
So as you can see, both of them are returning the same concatenated value, a, B, so that's what

334
00:22:38,280 --> 00:22:38,790
it is.

335
00:22:38,790 --> 00:22:45,720
So these are the two overloaded methods, and these overloaded methods return a value rather than optional.

336
00:22:45,720 --> 00:22:47,130
So that's the only difference.

337
00:22:47,550 --> 00:22:50,640
But the third one actually uses a combiner function also.

338
00:22:50,700 --> 00:22:56,070
And the second one, if the empty of the string is empty, then it would return this identity.

339
00:22:56,250 --> 00:22:57,870
And the same goes with this.

340
00:22:57,870 --> 00:23:01,230
It would return a string builder here, in this case, an empty string builder.

341
00:23:01,320 --> 00:23:02,420
So that's about it.

342
00:23:02,430 --> 00:23:02,880
Thank you.

343
00:23:02,880 --> 00:23:07,440
And I hope you enjoyed learning about the reduction operations and this code will be available in the

344
00:23:07,440 --> 00:23:08,460
resources section.

345
00:23:08,730 --> 00:23:10,080
Thank you and happy coding.

