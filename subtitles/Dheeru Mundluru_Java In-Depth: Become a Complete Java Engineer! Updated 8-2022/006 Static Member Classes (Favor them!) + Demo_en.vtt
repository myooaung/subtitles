WEBVTT
1
00:00:01.140 --> 00:00:01.980
Hi there.

2
00:00:02.009 --> 00:00:02.880
This is the model.

3
00:00:03.510 --> 00:00:07.320
Now let's look at static classes, which are also very useful.

4
00:00:07.560 --> 00:00:10.900
Syntactically they are similar to non static member classes.

5
00:00:11.130 --> 00:00:15.540
Only difference would be the addition of the modifier static in the class declaration.

6
00:00:16.020 --> 00:00:18.870
However, they both are very different from each other.

7
00:00:18.870 --> 00:00:24.270
As we will learn shortly, we will look at different use cases of static member classes and we will

8
00:00:24.270 --> 00:00:26.730
also extend our demo further in this lecture.

9
00:00:28.450 --> 00:00:34.600
Here is item 22 from affective java which says favor static classes over non static.

10
00:00:35.170 --> 00:00:39.670
Now let's not get into the assumption that non static classes are less important.

11
00:00:40.060 --> 00:00:43.330
As we saw earlier, they are useful for defining adapters.

12
00:00:44.020 --> 00:00:50.020
It is just that when non static member classes are not required, we need to prefer static classes.

13
00:00:51.410 --> 00:00:54.260
And here is the reason which is related to performance.

14
00:00:54.620 --> 00:01:00.620
If we do not need access to the members of enclosing class object, then we should go with static member

15
00:01:00.650 --> 00:01:01.280
classes.

16
00:01:02.520 --> 00:01:08.910
That would mean we don't have to build a hidden reference to the enclosing object, which would obviously

17
00:01:08.910 --> 00:01:12.180
save us time and space with non static motion.

18
00:01:12.180 --> 00:01:17.670
We need to build a hidden reference to the enclosing object which would take up space and time and that

19
00:01:17.670 --> 00:01:20.910
would allow us to access the members of the enclosing object.

20
00:01:23.010 --> 00:01:28.080
A static middle class is simply a static member of the enclosing class.

21
00:01:29.110 --> 00:01:35.590
And it means that it can be accessed without having an instance of the enclosing class, just like in

22
00:01:35.590 --> 00:01:38.320
the case of a static field or a static method.

23
00:01:39.780 --> 00:01:45.790
For instance, here is how a static field in a static member class can be accessed here.

24
00:01:45.810 --> 00:01:47.760
Outer is the outer class name.

25
00:01:48.090 --> 00:01:52.530
Static nested is name of the static member class within the outer.

26
00:01:53.010 --> 00:01:57.210
And we are accessing some static field defined within the class, static nested.

27
00:01:57.990 --> 00:02:04.230
So we access a static member class just like the way we access a static variable or a static method

28
00:02:04.230 --> 00:02:05.490
via the class name.

29
00:02:07.450 --> 00:02:10.360
And here is how you can create an instance of static.

30
00:02:10.360 --> 00:02:11.200
Mr. Class.

31
00:02:11.650 --> 00:02:16.960
We do not need an instance of the outer class to create an instance of the static member class.

32
00:02:17.530 --> 00:02:23.260
If you recall, to create an instance of non static member class, we do need an object of its enclosing

33
00:02:23.260 --> 00:02:23.800
class.

34
00:02:25.930 --> 00:02:32.050
And from within the static member class, we can only access static members of the closing class.

35
00:02:32.440 --> 00:02:39.460
And that's because it is a static member like a static method and hence cannot access any instance related

36
00:02:39.460 --> 00:02:41.020
stuff in the outer class.

37
00:02:42.750 --> 00:02:48.720
You can think of a static member class as just an ordinary class, but declared inside another class.

38
00:02:49.700 --> 00:02:54.230
So like a regular class, it can include both static as well as instance members.

39
00:02:54.830 --> 00:03:01.130
It can have instance members too as it can be instantiated without the help of the enclosing class object.

40
00:03:01.700 --> 00:03:07.940
But keep in mind that though it can have instance members, it cannot access instance members of the

41
00:03:07.950 --> 00:03:09.110
enclosing class.

42
00:03:09.500 --> 00:03:09.950
Right.

43
00:03:09.950 --> 00:03:11.600
Because it is a static member.

44
00:03:13.280 --> 00:03:14.320
Like a regular class.

45
00:03:14.330 --> 00:03:18.650
We can also make it non intangible by using it private constructor.

46
00:03:20.510 --> 00:03:27.290
Another interesting part the use cases first is to represent private components of enclosing objects.

47
00:03:28.410 --> 00:03:31.410
Second use case would be to represent strategies.

48
00:03:32.400 --> 00:03:35.190
And third would be as public helper class.

49
00:03:35.520 --> 00:03:36.990
And let's look at each of them.

50
00:03:38.930 --> 00:03:42.800
You may recall the slide from our introduction lecture on nested classes.

51
00:03:43.100 --> 00:03:49.790
This is about invoking the entry set method on a hash map instance and reset method would return the

52
00:03:49.790 --> 00:03:57.260
set of all the key value pair mappings as entry instances, and each entry instance is represented by

53
00:03:57.260 --> 00:03:58.970
the node nested class.

54
00:03:59.420 --> 00:04:03.230
That is, each key value pair is stored in a node instance.

55
00:04:03.920 --> 00:04:10.340
So the enclose object is using node instances to store its most basic data.

56
00:04:10.970 --> 00:04:16.370
But a node instance by itself does not need access to any of the data in the enclosed object.

57
00:04:16.850 --> 00:04:19.550
So it is defined as a static member class.

58
00:04:20.269 --> 00:04:26.330
If it is defined as a non static member class, then there would be the additional cost of building

59
00:04:26.330 --> 00:04:29.060
a hidden reference to the enclosing class object.

60
00:04:29.300 --> 00:04:35.090
Although we are not using any of its members so we can avoid that by using a static member class.

61
00:04:35.850 --> 00:04:41.700
So that's the first use case where a static member class is used to store the private members of an

62
00:04:41.700 --> 00:04:42.810
enclosed object.

63
00:04:43.750 --> 00:04:48.730
Now for the remaining two use cases, let's head over to our editor and see them in action.

64
00:04:51.350 --> 00:04:55.370
Before we look at the last two use cases, I just wanted to show this once again.

65
00:04:55.400 --> 00:04:56.990
So this is the hash map class.

66
00:04:56.990 --> 00:05:04.010
And within the hash map class, we have the node class which implements the entry interface within map

67
00:05:04.010 --> 00:05:04.730
interface.

68
00:05:04.880 --> 00:05:10.340
And it stores the most basic data that is the key value pairs and it is declared as static.

69
00:05:11.000 --> 00:05:16.970
Now had this been declared as non static, which means that we remove this keyword static, in which

70
00:05:16.970 --> 00:05:22.790
case it would be a non static member class and it would unnecessarily include a hidden reference to

71
00:05:22.790 --> 00:05:25.970
the enclosed object, which is the hash map instance.

72
00:05:26.480 --> 00:05:32.480
So that is not needed at all because we don't need any access to the members of the hash map instance.

73
00:05:32.480 --> 00:05:32.980
Right.

74
00:05:32.990 --> 00:05:39.050
So this just stores the most basic data, which is the key and value of every entry instance.

75
00:05:39.260 --> 00:05:45.770
So this is this should be declared as a static member class as mentioned in the effective item.

76
00:05:46.070 --> 00:05:47.780
So that was the first use case.

77
00:05:47.930 --> 00:05:54.380
Now let's go back to our cache class and bookmark and let's look at the second use case, which was

78
00:05:54.380 --> 00:05:57.380
about using a static number class as a strategy.

79
00:05:57.680 --> 00:06:06.380
Now in the demo of anonymous classes, we have invoked this sort method of arrays in order to sort the

80
00:06:06.410 --> 00:06:09.920
sort the cache items, write the items in the cache and value.

81
00:06:09.920 --> 00:06:12.350
And we defined an anonymous class here.

82
00:06:12.350 --> 00:06:19.030
So we implemented a competitor and we had this compare method and we sorted by using grading.

83
00:06:19.370 --> 00:06:19.930
Right?

84
00:06:19.940 --> 00:06:26.780
Now we also said that if this is going to if this statement is going to be executed repeated repetitively,

85
00:06:26.780 --> 00:06:35.480
then we can define this particular anonymous object in a static final field, like as like a singleton.

86
00:06:35.480 --> 00:06:36.560
As a singleton.

87
00:06:36.560 --> 00:06:39.920
And we said that it can be a private, static, final field.

88
00:06:39.920 --> 00:06:41.330
And that was one of the things.

89
00:06:41.480 --> 00:06:47.750
But sometimes we might want to implement multiple classes, multiple types.

90
00:06:48.050 --> 00:06:52.940
In this case, using an anonymous class, we can only implement only this competitor interface.

91
00:06:53.330 --> 00:07:00.410
But if we want to implement multiple, multiple types using using a nested class, then we can make

92
00:07:00.410 --> 00:07:04.220
use of a static member class instead of an anonymous class.

93
00:07:04.550 --> 00:07:11.300
Now, for example, this particular logic, this fun, this functionality, now it is inside cache,

94
00:07:11.300 --> 00:07:18.350
but the bookmark, it can also be provided here in the bookmark class itself as a service to edge clients.

95
00:07:18.710 --> 00:07:25.520
So bookmark is a class and and the owner of the bookmark class can include it as a service.

96
00:07:25.520 --> 00:07:30.170
So this whole thing can be defined as a singleton within bookmark.

97
00:07:30.350 --> 00:07:37.010
But if we want to, if we want to serialize bookmark, for example, a bookmark instance, then any

98
00:07:37.010 --> 00:07:41.630
objects that are created here should also implement well.

99
00:07:41.720 --> 00:07:43.990
So bookmark would be implementing serialize able.

100
00:07:44.240 --> 00:07:51.680
But any objects that bookmark defines within within each class, they should also be realizable, otherwise

101
00:07:51.680 --> 00:07:53.840
the realisable property would fail.

102
00:07:53.890 --> 00:07:54.100
Right?

103
00:07:54.200 --> 00:07:56.360
You may recall that from our chapter.

104
00:07:56.720 --> 00:08:03.250
So we need an asset class which can implement both comparator as well as realizable.

105
00:08:03.560 --> 00:08:09.170
And we cannot do that using an anonymous class because it can only implement one particular type.

106
00:08:09.350 --> 00:08:14.090
So let's go ahead and define this as a service within bookmark.

107
00:08:14.090 --> 00:08:19.520
So the bookmark bookmark class is providing an implementation of competitor as a service, but it will

108
00:08:19.520 --> 00:08:26.090
also implement a realizable interface so we can make use of a static member class for that.

109
00:08:26.480 --> 00:08:30.110
So we will define a public static final field there.

110
00:08:30.320 --> 00:08:31.850
So let's go ahead and do that.

111
00:08:34.580 --> 00:08:36.799
So it would return a competitor.

112
00:08:39.350 --> 00:08:40.760
Now let's call it as.

113
00:08:44.840 --> 00:08:46.610
Rating underscore competitor.

114
00:08:47.390 --> 00:08:52.970
And let's define a private, static class, private, static asset class.

115
00:08:57.040 --> 00:08:58.810
Its qualities rating competitor.

116
00:09:02.090 --> 00:09:05.120
Now this would imply to implement competitor.

117
00:09:06.610 --> 00:09:08.290
And also see realizable.

118
00:09:11.120 --> 00:09:11.330
Okay.

119
00:09:11.330 --> 00:09:18.740
So this is a static master class and all we can do is we can simply copy this logic here from this anonymous

120
00:09:18.740 --> 00:09:19.430
class.

121
00:09:21.380 --> 00:09:21.920
Okay.

122
00:09:21.980 --> 00:09:28.100
So this static number class implements competitor and hence it also provides the definition for compare

123
00:09:28.100 --> 00:09:31.190
method and it is also realisable now.

124
00:09:31.430 --> 00:09:39.080
So the bookmark class can also be can also be realizable because if this is not realizable then then

125
00:09:39.080 --> 00:09:41.150
a bookmark object cannot be serialized.

126
00:09:41.780 --> 00:09:48.650
The entire object graph has to be any object in the object graph of bookmark has to implement realizable.

127
00:09:48.650 --> 00:09:52.190
Every instance used within bookmark has to implement realizable.

128
00:09:52.790 --> 00:10:00.140
So now all we do is so this is a private static class and we can expose it as a public static final

129
00:10:00.140 --> 00:10:00.560
field.

130
00:10:04.520 --> 00:10:11.540
So the static glass is hidden within within the bookmark class and it is exposed via this field reading

131
00:10:11.540 --> 00:10:12.240
competitor.

132
00:10:12.260 --> 00:10:15.290
So let's go back here and.

133
00:10:25.130 --> 00:10:25.710
Sit.

134
00:10:26.860 --> 00:10:29.770
Let's print the output one more time.

135
00:10:35.080 --> 00:10:37.030
So let's go ahead and run this.

136
00:10:38.520 --> 00:10:41.080
So it prints this output.

137
00:10:41.100 --> 00:10:44.350
So it's just the same as the output of the anonymous class.

138
00:10:45.180 --> 00:10:46.190
So that's how it is.

139
00:10:46.200 --> 00:10:49.110
And this pattern is also used.

140
00:10:50.110 --> 00:10:51.310
Within the string class.

141
00:10:51.310 --> 00:10:58.120
String class also provides a static member class here called case insensitive competitor.

142
00:10:58.210 --> 00:11:03.940
And as you can see, it implements competitor of string and the realizable interface.

143
00:11:04.600 --> 00:11:10.060
And it is it's a private class, but it is exposing it using public static final field.

144
00:11:10.420 --> 00:11:12.730
So it's exactly what we have just done.

145
00:11:13.450 --> 00:11:16.330
And this is for case insensitive order within the string class.

146
00:11:16.330 --> 00:11:17.890
You can take a look at it later.

147
00:11:17.980 --> 00:11:19.930
So that's the pattern that they use.

148
00:11:19.930 --> 00:11:23.260
So it is a strategy, but it is exposed in this way as a service.

149
00:11:23.590 --> 00:11:26.590
Now, sometimes we might also have more.

150
00:11:26.590 --> 00:11:30.820
We might want to expose more than one such competitors as a service, right?

151
00:11:30.820 --> 00:11:32.440
In this case, it's just one of them.

152
00:11:32.740 --> 00:11:39.640
Now, let's say we want to to also provide a competitor which sorts based on string length, length

153
00:11:39.640 --> 00:11:40.420
of the string.

154
00:11:40.630 --> 00:11:43.060
Then we have the second competitor.

155
00:11:43.060 --> 00:11:50.260
So we can group them to group these two competitors using using in a static nested class.

156
00:11:50.620 --> 00:11:57.700
So we can do that and provide it as a service so we can define a public static nested class for this

157
00:11:57.700 --> 00:12:01.300
one is a private, so we can define a public static nested class.

158
00:12:01.390 --> 00:12:03.250
And let's also do that.

159
00:12:05.070 --> 00:12:06.990
So let me comment this cord here.

160
00:12:07.650 --> 00:12:12.720
So that would be the third use case, which is as then public helper class.

161
00:12:12.720 --> 00:12:19.650
So would provide these competitors as a service, as a helper to the client code.

162
00:12:27.010 --> 00:12:31.300
It's called a competitor list because we are providing a list of competitors here.

163
00:12:32.110 --> 00:12:34.990
So this is a public static master class.

164
00:12:36.300 --> 00:12:38.880
And let's copy this code here.

165
00:12:39.450 --> 00:12:43.050
So it would be yet another nested class here.

166
00:12:43.530 --> 00:12:45.750
And let's make this public.

167
00:12:56.730 --> 00:12:58.230
And let me copy this.

168
00:12:58.230 --> 00:13:00.510
I have the second competitor here.

169
00:13:02.190 --> 00:13:03.750
Because based on string lines.

170
00:13:09.400 --> 00:13:10.930
Here it is, string length.

171
00:13:17.300 --> 00:13:18.410
You don't have to.

172
00:13:20.060 --> 00:13:21.650
Go this you can keep this also.

173
00:13:21.650 --> 00:13:22.790
So this is.

174
00:13:27.750 --> 00:13:28.230
Okay.

175
00:13:28.380 --> 00:13:29.730
Now let's.

176
00:13:31.350 --> 00:13:32.540
The scope of this.

177
00:13:39.540 --> 00:13:41.700
We can just say new.

178
00:13:43.480 --> 00:13:46.720
So this is sort of strange land, but it's also a static member class.

179
00:13:47.050 --> 00:13:50.860
Let's access the competitor list.

180
00:13:55.410 --> 00:14:01.140
And of the two let's make use of the string length competitor we are just using saying comparator list

181
00:14:01.140 --> 00:14:01.920
got this.

182
00:14:02.310 --> 00:14:06.300
So as you can see, we are not creating an instance of the enclosed object.

183
00:14:06.300 --> 00:14:06.630
Right.

184
00:14:06.660 --> 00:14:09.480
We said that that's possible with static class.

185
00:14:09.480 --> 00:14:12.390
You don't need an instance of outward class.

186
00:14:13.050 --> 00:14:14.450
So this is what we did.

187
00:14:14.460 --> 00:14:18.210
And let me just go ahead and run it and here you go.

188
00:14:18.210 --> 00:14:21.930
So this is the final comparator sorting by final comparator.

189
00:14:22.110 --> 00:14:24.780
As you can see, this is an ascending order of the string.

190
00:14:24.900 --> 00:14:29.490
And the previous one also was also static class, but it was by rating.

191
00:14:29.610 --> 00:14:33.090
And we used the static final field for that.

192
00:14:33.180 --> 00:14:40.320
Whereas here we have it as an as a public helper class and client clients can make use of this and we

193
00:14:40.320 --> 00:14:45.490
can define more than one comparator here, so we can go ahead and define more competitors, too.

194
00:14:45.810 --> 00:14:47.670
So that is one of the third use case.

195
00:14:47.820 --> 00:14:49.080
So that's about it.

196
00:14:49.080 --> 00:14:53.220
And this code is available in the static in the resources section.

197
00:14:53.430 --> 00:14:55.590
And so this is static class.

198
00:14:55.590 --> 00:15:01.530
And if we do not need non access to the enclosing object, then we should use a static number class.

199
00:15:01.530 --> 00:15:07.740
So it would it would be more efficient as we do not have to create a hidden reference to the enclosed

200
00:15:07.740 --> 00:15:10.470
object and it will save us time and space.

201
00:15:11.010 --> 00:15:12.930
Thank you and happy coding.

