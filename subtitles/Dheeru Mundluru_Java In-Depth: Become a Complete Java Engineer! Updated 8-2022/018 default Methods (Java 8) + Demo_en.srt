1
00:00:00,900 --> 00:00:07,020
Let's now look at default methods which can be part of interfaces beginning with Java eight onwards.

2
00:00:08,109 --> 00:00:14,950
As discussed earlier in item 18 prior to Java eight, one big issue with interfaces was that it was

3
00:00:14,950 --> 00:00:16,960
difficult for them to evolve over time.

4
00:00:17,890 --> 00:00:23,410
It may not be an issue for proprietary software, but when it comes to public APIs, it is absolutely

5
00:00:23,410 --> 00:00:29,260
critical to get it right the very first time, because once the API is released and widely used, it's

6
00:00:29,260 --> 00:00:36,160
very difficult to change the API and expect the client that is the implementers to also make those changes.

7
00:00:36,550 --> 00:00:38,230
It can easily break their code.

8
00:00:39,010 --> 00:00:40,990
This will soon be demonstrated in our demo.

9
00:00:42,210 --> 00:00:47,910
We cannot blindly use abstract classes just because they will allow functionality to evolve without

10
00:00:47,910 --> 00:00:48,990
breaking client code.

11
00:00:49,910 --> 00:00:54,410
The limitation with them, we know, is that Java does not allow multiple inheritance.

12
00:00:54,800 --> 00:01:00,050
And if a potential client is extending some other class, then they cannot directly extend our abstract

13
00:01:00,050 --> 00:01:00,590
class.

14
00:01:02,220 --> 00:01:03,020
Nova Java.

15
00:01:03,440 --> 00:01:09,020
Interfaces can include something called default methods, and the main goal of introducing default methods

16
00:01:09,020 --> 00:01:10,970
was interface evolution.

17
00:01:11,420 --> 00:01:16,400
That is, we should be able to add default methods after the interface has been released and it should

18
00:01:16,400 --> 00:01:17,720
not break the client code.

19
00:01:18,610 --> 00:01:18,940
Here.

20
00:01:18,940 --> 00:01:25,300
The phrase binary compatibility implies that the fact that default methods are added to an interface

21
00:01:25,390 --> 00:01:28,390
should not require re compilation of implementation code.

22
00:01:28,870 --> 00:01:31,000
So everything must work as before.

23
00:01:31,600 --> 00:01:36,910
That is, clients of the implementers should be able to use the old methods as well as the new default

24
00:01:36,910 --> 00:01:37,540
methods.

25
00:01:37,870 --> 00:01:39,850
This will also be demonstrated in our demo.

26
00:01:40,420 --> 00:01:46,420
So keep in mind the most important reason for introducing default methods is interface evolution.

27
00:01:47,950 --> 00:01:53,230
You can also include default methods, right, when you design your interface the very first time.

28
00:01:54,210 --> 00:01:59,580
In that sense it's an interface method with the default implementation and the subclass can provide

29
00:01:59,580 --> 00:02:01,500
a more specific implementation.

30
00:02:02,240 --> 00:02:05,180
Which means that default methods can never be final.

31
00:02:06,210 --> 00:02:07,890
These are the two main benefits.

32
00:02:08,430 --> 00:02:12,690
There are a couple of other benefits and we will discuss them after doing our demo.

33
00:02:14,350 --> 00:02:20,410
Just note that default methods are also less commonly referred to as defender methods or virtual extension

34
00:02:20,410 --> 00:02:21,040
methods.

35
00:02:21,960 --> 00:02:26,640
Now let's just jump into the court and take a pretty in-depth look at default methods.

36
00:02:28,290 --> 00:02:28,510
Okay.

37
00:02:28,560 --> 00:02:30,120
Let's get started with the demo.

38
00:02:30,300 --> 00:02:35,970
And first thing that you need to do is make sure that your path is pointing to Java eight.

39
00:02:36,000 --> 00:02:41,220
That's because we are testing default methods which are introduced in Java eight.

40
00:02:41,610 --> 00:02:44,610
In case you have been using Java seven and you don't have Java eight.

41
00:02:44,730 --> 00:02:50,550
Please go ahead and download the Java, the latest version of Java eight from the Oracle website and

42
00:02:50,550 --> 00:02:52,290
set your bar to Java eight.

43
00:02:52,380 --> 00:02:58,590
So if you have both Java seven and Java eight, you can also use the command Java C hyphen version at

44
00:02:58,590 --> 00:03:02,580
the command prompt to see which version of Java that you are using currently.

45
00:03:03,480 --> 00:03:06,440
Let's just do a recap of the of our code.

46
00:03:06,450 --> 00:03:10,740
So we are going to extend the code that we have written for Interface Demo.

47
00:03:11,400 --> 00:03:17,190
So we have these three interfaces, a one of us, one is A with two abstract methods for one bar.

48
00:03:17,430 --> 00:03:18,900
Second one is the interface.

49
00:03:18,930 --> 00:03:21,540
B Third is another interface.

50
00:03:21,570 --> 00:03:23,100
C Which actually extends.

51
00:03:23,130 --> 00:03:27,310
A And then we have the skeletal implementation abstract.

52
00:03:27,330 --> 00:03:29,310
A Which means that it implements.

53
00:03:29,340 --> 00:03:35,040
A and it is providing implementation for one of the abstract methods bar.

54
00:03:35,310 --> 00:03:40,530
And we also have a concrete method called X, which is extending abstract A and is implementing A,

55
00:03:40,560 --> 00:03:43,530
B, C and learnable, which is from the previous demo.

56
00:03:44,040 --> 00:03:49,680
And we have test client, which is the test class which simply tests the code.

57
00:03:50,490 --> 00:03:52,980
And so let's just take a realistic look.

58
00:03:52,980 --> 00:04:00,330
Now in our first let's just interface evolution the problem that we had before Java eight where interface

59
00:04:00,330 --> 00:04:01,320
evolution is a problem.

60
00:04:01,320 --> 00:04:02,880
So let's just look at that.

61
00:04:03,150 --> 00:04:06,990
So let's just consider a more realistic situation.

62
00:04:07,350 --> 00:04:12,390
Let's just assume that this interface C was written by a programmer at this company called ABC.

63
00:04:12,840 --> 00:04:18,480
And let's assume that the concrete X, which is actually implementing C is written by a different company

64
00:04:18,480 --> 00:04:21,160
called X, Y, Z, a developer at X, Y, Z.

65
00:04:21,180 --> 00:04:22,560
So there are two companies now.

66
00:04:23,010 --> 00:04:29,070
And let's also assume that this test client is the Y is another company called client who is using this

67
00:04:29,100 --> 00:04:34,650
class X and he's using the reference as C and Instantiating class X.

68
00:04:34,650 --> 00:04:39,660
So it's a different whole different company who is making use of the Class X?

69
00:04:39,690 --> 00:04:45,810
Now let's just assume that the existing code that we have has been written some one year back and now

70
00:04:45,810 --> 00:04:51,030
see this guy at ABC wants to introduce a new method go, abstract method go.

71
00:04:51,690 --> 00:04:55,590
So he writes that OC and he compiles it.

72
00:04:57,090 --> 00:04:57,630
Fine.

73
00:04:58,260 --> 00:04:59,010
Next.

74
00:04:59,940 --> 00:05:04,020
Let's say this guy at a client, he looks at the new package.

75
00:05:04,020 --> 00:05:06,600
So it's like a new release, right, because of this new method.

76
00:05:06,870 --> 00:05:11,850
And he, the programmer, wants to invoke that new method called go.

77
00:05:11,970 --> 00:05:15,330
Assuming that he assumes that X has already implemented it.

78
00:05:15,330 --> 00:05:18,120
So he just wants to use the new method.

79
00:05:19,280 --> 00:05:20,150
Compiles that.

80
00:05:20,150 --> 00:05:28,190
So he has the new method, compiles it and tries to use the new method and it says abstract method error,

81
00:05:28,190 --> 00:05:30,890
which means that you are trying to invoke an abstract method.

82
00:05:30,890 --> 00:05:37,190
So what that means is X has not yet provided a definition for go, has not overridden the method go.

83
00:05:37,190 --> 00:05:38,450
So that's the issue.

84
00:05:39,110 --> 00:05:46,460
So that's not a big problem because usually in such cases the developer would detect this problem during

85
00:05:46,460 --> 00:05:50,090
development time and would take some action.

86
00:05:50,330 --> 00:05:55,820
But the real problem would be with X itself, the guy working at the XYZ company.

87
00:05:56,000 --> 00:05:58,070
So he also looks at the new code.

88
00:05:58,070 --> 00:06:04,910
I mean the new library which has the the interface C and he downloads it and then he wants to use a

89
00:06:04,910 --> 00:06:05,590
new library, right?

90
00:06:05,600 --> 00:06:09,830
Normally you have better implementations, better you get newer code.

91
00:06:09,840 --> 00:06:11,090
So he wants to use new code.

92
00:06:11,090 --> 00:06:18,560
So he goes ahead and tries to compile it and it says you have not overridden abstract method, which

93
00:06:18,560 --> 00:06:22,550
means that it's going he cannot use it and it's going to break his code.

94
00:06:22,550 --> 00:06:24,620
He needs to use only his old version.

95
00:06:25,280 --> 00:06:28,160
And so he definitely would be furious about this.

96
00:06:29,180 --> 00:06:33,500
So he can he can no longer use the new version of the interface.

97
00:06:33,500 --> 00:06:34,970
So that's a problem.

98
00:06:34,970 --> 00:06:38,240
So it's an unprofessional way of writing code.

99
00:06:38,240 --> 00:06:44,840
So, so the thing is, the guy working for ABC, they should have included this method long time back.

100
00:06:44,840 --> 00:06:47,750
So they did not design it properly and that was the issue.

101
00:06:48,080 --> 00:06:54,380
So to fix the problem, at least from Java eight onwards, this is no longer an issue because you can

102
00:06:54,380 --> 00:06:55,730
create default methods.

103
00:06:55,730 --> 00:07:00,950
So you just convert that into a concrete method to make it default.

104
00:07:00,950 --> 00:07:02,720
You just add this keyword default.

105
00:07:03,350 --> 00:07:07,460
Let's just have the statement saying that it's method, go and see.

106
00:07:08,060 --> 00:07:13,310
Now you just compile this re compile compiling fine.

107
00:07:13,490 --> 00:07:20,390
Now all you need to do is just execute this client that you want it's accessing.

108
00:07:20,720 --> 00:07:22,910
So we haven't changed anything, right?

109
00:07:22,910 --> 00:07:28,190
We haven't compiled recompiled exe after adding the new method in C.

110
00:07:28,580 --> 00:07:34,610
So default method is helping us to evolve the interface without breaking the client code.

111
00:07:34,910 --> 00:07:36,860
So that's the beauty of it.

112
00:07:38,000 --> 00:07:43,400
So that's called us binary compatibility, which means that you don't have to recompile the implementation

113
00:07:43,400 --> 00:07:44,030
code.

114
00:07:44,990 --> 00:07:50,780
Now let's say if we recompile exe then it would still be fine.

115
00:07:51,260 --> 00:07:53,240
And that's called a source compatibility.

116
00:07:53,420 --> 00:07:58,490
So if you recompile and if your code works still works, then it's source compatibility.

117
00:07:58,760 --> 00:08:02,420
But without really compiling if it works, that's called as binary compatibility.

118
00:08:02,420 --> 00:08:05,600
So just two new terms that you can keep in mind.

119
00:08:06,490 --> 00:08:13,690
And just note that default methods are instance methods so you cannot hear you cannot access them using

120
00:08:13,690 --> 00:08:15,040
the interface name itself.

121
00:08:15,040 --> 00:08:17,980
So that would give a compilation error.

122
00:08:17,980 --> 00:08:21,100
And for that we have static methods which we will see later.

123
00:08:21,520 --> 00:08:27,040
So if you do that, it will give you an error saying that non static method cannot be referenced from

124
00:08:27,040 --> 00:08:30,560
a static context in back.

125
00:08:31,180 --> 00:08:36,010
And so we are done with the default method, the core demonstration.

126
00:08:36,909 --> 00:08:39,450
Let's say that we have this video.

127
00:08:39,460 --> 00:08:41,289
Let's say this is from a different company.

128
00:08:41,950 --> 00:08:49,390
And this guy also wants to add a method like this, wants to introduce the method with the same name.

129
00:08:49,510 --> 00:08:56,800
So he calls it this and he calls this be don't go now let's compile.

130
00:08:59,320 --> 00:09:00,010
It's fine.

131
00:09:01,760 --> 00:09:09,230
Try to compile X, it says Class X inherits unrelated defaults for go from types B and C.

132
00:09:09,230 --> 00:09:10,640
So we are trying to.

133
00:09:11,450 --> 00:09:16,720
So Class X is implementing both A, B and C, and both of them have the same methods.

134
00:09:16,730 --> 00:09:20,600
Go and there are method definitions right there, not just method declarations.

135
00:09:20,630 --> 00:09:23,420
And so we have the classic diamond problem now.

136
00:09:24,170 --> 00:09:25,880
So for this, the solution.

137
00:09:25,880 --> 00:09:28,100
Only solution is you need to provide.

138
00:09:29,380 --> 00:09:31,840
An implementation here.

139
00:09:34,170 --> 00:09:36,780
But the thing is, you know, it cannot be default.

140
00:09:36,780 --> 00:09:39,900
So you cannot use default keywords in classes.

141
00:09:39,900 --> 00:09:42,900
There can be default methods can only be used in interfaces.

142
00:09:42,900 --> 00:09:44,700
So we need to remove this here.

143
00:09:44,910 --> 00:09:52,440
You can test it out later, what kind of message it gives so that and also this needs to be public,

144
00:09:53,010 --> 00:09:53,350
right?

145
00:09:53,400 --> 00:10:00,780
Otherwise it would say that this method cannot override because you are because in the in the interface

146
00:10:00,780 --> 00:10:03,000
it was public and here it was default access.

147
00:10:03,000 --> 00:10:05,820
So so it's against the overriding rule.

148
00:10:05,820 --> 00:10:09,900
So you need to make it public and let's just make this X.

149
00:10:10,410 --> 00:10:13,350
Now, this method X should get invoked.

150
00:10:13,770 --> 00:10:16,260
So let's just go ahead and compile.

151
00:10:17,350 --> 00:10:19,840
Desk client and let's run.

152
00:10:22,010 --> 00:10:23,300
So it prints x go.

153
00:10:25,540 --> 00:10:32,920
So basically we had multiple inheritance, the diamond issue, but it's being resolved right here at

154
00:10:32,920 --> 00:10:33,870
compile time itself.

155
00:10:33,910 --> 00:10:36,400
So it's not dragged to the runtime.

156
00:10:36,400 --> 00:10:37,600
So in that sense, it's good.

157
00:10:38,430 --> 00:10:41,340
Because we are able to resolve it at compile time itself.

158
00:10:42,250 --> 00:10:49,360
Now also just want to let you know that we the issue we had was because we had we introduced this default

159
00:10:49,360 --> 00:10:54,730
method and B had that same problem we would have even if this was abstract method.

160
00:10:54,730 --> 00:11:02,620
So, so we have this method definition here, but if this was abstract, even then we would have ended

161
00:11:02,620 --> 00:11:08,050
up with the compilation error so that also you can test it out later.

162
00:11:08,650 --> 00:11:10,180
Now let's do something.

163
00:11:10,180 --> 00:11:11,200
Let's me.

164
00:11:12,790 --> 00:11:13,990
Comment this out.

165
00:11:14,450 --> 00:11:15,430
You copy this?

166
00:11:17,490 --> 00:11:20,480
And let me add this method here in abstract.

167
00:11:21,740 --> 00:11:23,180
Let me make it public.

168
00:11:25,510 --> 00:11:31,090
Now in test client we have this let me also comment it out here.

169
00:11:32,810 --> 00:11:33,410
Okay.

170
00:11:33,410 --> 00:11:38,600
So let me just go ahead and compile first X.

171
00:11:40,030 --> 00:11:41,850
Let me compile this, although it's not required.

172
00:11:41,860 --> 00:11:43,390
So let me just.

173
00:11:43,780 --> 00:11:51,550
So all I did was I added a method, the same method go in abstract a and we also have, we also have

174
00:11:51,550 --> 00:11:58,660
the default method go and see in B, I just commented it out and x also I just commented out the go

175
00:11:58,660 --> 00:12:00,460
method, the overriding go method.

176
00:12:00,460 --> 00:12:02,020
So we have only in two places.

177
00:12:02,020 --> 00:12:07,570
One is in the in abstract A which X is extending and also in C.

178
00:12:07,570 --> 00:12:12,310
So we have one implementation in a superclass and one in a super interface.

179
00:12:12,310 --> 00:12:14,380
So let's see what happens in this case.

180
00:12:15,530 --> 00:12:16,700
So it's.

181
00:12:16,820 --> 00:12:17,180
Sorry.

182
00:12:17,180 --> 00:12:18,050
1/2 here.

183
00:12:18,050 --> 00:12:22,850
This was supposed to be abstract a but anyway.

184
00:12:22,850 --> 00:12:24,020
So the one in the.

185
00:12:24,930 --> 00:12:27,330
The version in the class is getting.

186
00:12:29,570 --> 00:12:32,210
The version end the class is getting printed, right?

187
00:12:32,210 --> 00:12:39,650
So what that means is the method in the in the superclass gets higher precedence over the the default

188
00:12:39,650 --> 00:12:40,850
method in interface.

189
00:12:40,850 --> 00:12:44,150
So that's a rule that the designers have placed.

190
00:12:44,450 --> 00:12:47,570
So that's a conflict resolution rule.

191
00:12:48,520 --> 00:12:51,700
So we know that the topmost superclass is object.

192
00:12:51,790 --> 00:12:55,000
So which means that an object has some methods.

193
00:12:55,270 --> 00:12:59,830
So this class C cannot override any of those methods.

194
00:12:59,830 --> 00:13:00,220
Right.

195
00:13:00,220 --> 00:13:06,490
Because of this, the the class winds rule that we just saw where the class has the higher precedence

196
00:13:06,670 --> 00:13:09,260
because of that of that rule.

197
00:13:09,280 --> 00:13:14,290
Any interface can never override a method from object.

198
00:13:14,300 --> 00:13:14,460
Right.

199
00:13:14,530 --> 00:13:15,520
Because of that rule.

200
00:13:15,790 --> 00:13:23,980
But semantically also it makes sense because let's say, for example, you have this class X and you

201
00:13:23,980 --> 00:13:29,910
are going to are going to make use of the equals method defined in object.

202
00:13:29,920 --> 00:13:30,510
Right?

203
00:13:30,520 --> 00:13:31,890
And then you have that code.

204
00:13:31,900 --> 00:13:38,590
And let's say in future if somebody like in C, somebody introduces a new method called equals.

205
00:13:38,590 --> 00:13:45,940
And that's and if the rule is that if it can override the the equals in object, then your semantics

206
00:13:45,940 --> 00:13:46,660
are broken.

207
00:13:47,020 --> 00:13:49,450
So semantically also it makes sense.

208
00:13:49,450 --> 00:13:57,100
But from an syntax point also this rule is making sure that default methods cannot override methods

209
00:13:57,100 --> 00:13:58,090
in object class.

210
00:13:58,330 --> 00:13:59,050
So that's good.

211
00:13:59,290 --> 00:14:03,970
And there is a link that I'm including in this supplementary notes.

212
00:14:03,970 --> 00:14:04,810
Please check it out.

213
00:14:05,020 --> 00:14:06,850
And it's from Brian.

214
00:14:06,850 --> 00:14:13,240
It's a stackoverflow link from Brian Goats, who is a language language Java language architect.

215
00:14:13,240 --> 00:14:15,280
And he also explains this problem.

216
00:14:15,460 --> 00:14:16,660
So you can read that.

217
00:14:17,200 --> 00:14:18,130
You can read his comments.

218
00:14:18,130 --> 00:14:22,510
So he's one of the designers of the default of all these features.

219
00:14:23,370 --> 00:14:31,050
Now, the next thing is how can is there a way for us to force X Java to actually use the version in

220
00:14:31,770 --> 00:14:32,790
the version in C?

221
00:14:32,790 --> 00:14:35,760
So let's see if that can be done.

222
00:14:35,760 --> 00:14:38,760
And yes, that can be done, obviously.

223
00:14:41,710 --> 00:14:46,780
The way you need to do it is you would say, see, dot, super dot.

224
00:14:46,810 --> 00:14:47,440
Go.

225
00:14:48,350 --> 00:14:55,340
Normally, you know we if to invoke a superclass method you would use supercool but if you want to invoke

226
00:14:55,340 --> 00:14:58,010
a method, the default method, you have to do this.

227
00:14:59,260 --> 00:15:03,010
So let's just go ahead recompile test client.

228
00:15:03,610 --> 00:15:10,600
Let me run this and it is invoking the version and see so how we are forcing it to do that.

229
00:15:10,990 --> 00:15:17,860
And another thing is you cannot do this, you can never do this, which means that you can only access

230
00:15:17,860 --> 00:15:24,910
a super interfaces method, default method, but not the one from the from the parent of the super interface.

231
00:15:24,910 --> 00:15:28,990
So you cannot do access the grandparents default methods.

232
00:15:30,890 --> 00:15:36,830
And one more thing is you cannot have a supermarket go over here, so.

233
00:15:37,670 --> 00:15:38,570
So this is interface.

234
00:15:38,600 --> 00:15:41,540
See, you cannot have supermarket go here.

235
00:15:42,020 --> 00:15:44,460
Only thing you can have as a supermarket.

236
00:15:44,840 --> 00:15:49,090
So you cannot use just a super keyword and a default method.

237
00:15:49,100 --> 00:15:51,260
So just wanted to point that out.

238
00:15:51,290 --> 00:15:53,030
So two things I just mentioned.

239
00:15:53,030 --> 00:15:57,950
One was you cannot use you cannot access a grandparent's method from here.

240
00:15:58,280 --> 00:16:03,460
It should always go via the parent itself and you cannot use just the super keyword.

241
00:16:03,470 --> 00:16:06,710
You have to qualify it with the interface name.

242
00:16:06,710 --> 00:16:10,250
And also the same applies with the default method.

243
00:16:10,250 --> 00:16:12,650
You have to do the same in the default method.

244
00:16:12,650 --> 00:16:18,080
So it doesn't matter whether it's a concrete class or whether it is a default method in an interface.

245
00:16:18,080 --> 00:16:19,580
So you need to keep that in mind.

246
00:16:20,830 --> 00:16:23,750
Now let's look at another conflict resolution strategy.

247
00:16:23,770 --> 00:16:25,810
Let me quickly comment this out.

248
00:16:28,900 --> 00:16:31,900
So let me introduce this default method.

249
00:16:32,870 --> 00:16:33,590
Here.

250
00:16:34,050 --> 00:16:36,210
And let me call it a.

251
00:16:37,070 --> 00:16:39,920
So let me recompile.

252
00:16:41,440 --> 00:16:43,090
This is supposed to be default.

253
00:16:49,790 --> 00:16:51,590
You know, it's so common, this sort.

254
00:16:52,530 --> 00:16:55,360
So at this point we have only two implementations of go.

255
00:16:55,380 --> 00:16:59,790
One is in C and another one is in A, which sees extending.

256
00:16:59,940 --> 00:17:02,790
So in this case, it's pretty.

257
00:17:04,190 --> 00:17:05,119
Obvious.

258
00:17:06,730 --> 00:17:08,859
So it's accessing the ocean and sea.

259
00:17:09,010 --> 00:17:11,890
So what that means is sub interface.

260
00:17:11,890 --> 00:17:13,650
The version in sub interface wins.

261
00:17:14,170 --> 00:17:16,630
It has higher precedence over super interface.

262
00:17:16,960 --> 00:17:20,220
Earlier we saw that the class wins class wins over interface.

263
00:17:20,230 --> 00:17:23,619
So class has the version in class has higher precedence now.

264
00:17:23,800 --> 00:17:30,130
The second rule is that the version in sub interface has higher precedence over the version and super

265
00:17:30,130 --> 00:17:30,670
interface.

266
00:17:30,910 --> 00:17:31,840
So that's the thing.

267
00:17:32,320 --> 00:17:34,880
So that's the conflict resolution strategy.

268
00:17:34,910 --> 00:17:42,310
The second strategy and another thing is you can never use final keyword here and because these methods

269
00:17:42,310 --> 00:17:48,070
should be over readable and you can also you cannot also use synchronized keyword synchronized.

270
00:17:48,160 --> 00:17:54,220
We did not cover synchronized, but it is a modifier that we will see in Multi-threading chapter.

271
00:17:54,220 --> 00:17:56,650
So you cannot use either of the keywords here.

272
00:17:57,590 --> 00:18:06,560
One other thing is you can actually so interface a as defining this method go and if let's say interface

273
00:18:06,590 --> 00:18:12,850
see you can actually make it abstract see which is extending it can actually make it abstract.

274
00:18:12,860 --> 00:18:15,350
And why would you want to do that?

275
00:18:15,380 --> 00:18:21,230
Let's say for example, the guy who is implementing interface see things that the default implementation

276
00:18:21,230 --> 00:18:28,040
is bad and he wants to force his clients to provide an implementation so you can actually take a default

277
00:18:28,040 --> 00:18:30,860
method and override it with an abstract version.

278
00:18:30,860 --> 00:18:34,010
You can do that and that applies to abstract classes.

279
00:18:34,010 --> 00:18:40,520
Also, you can have an abstract class which has a concrete method and it's subclass which is also an

280
00:18:40,520 --> 00:18:45,770
abstract class, can actually make that concrete, turn that concrete into an abstract method.

281
00:18:45,770 --> 00:18:47,570
So that's possible over there also.

282
00:18:48,170 --> 00:18:50,900
So that's about it with the demo.

