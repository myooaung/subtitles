WEBVTT
1
00:00:01.120 --> 00:00:01.980
Hi there.

2
00:00:01.990 --> 00:00:03.340
This is Dino de la Rue.

3
00:00:03.580 --> 00:00:08.200
We now understand how interfaces can be used from a syntax standpoint.

4
00:00:08.290 --> 00:00:09.430
That's straightforward.

5
00:00:09.730 --> 00:00:13.420
More important thing to understand is when to use an interface.

6
00:00:13.960 --> 00:00:20.290
It's pretty common to see engineers facing a dilemma on whether they need to code something as an interface

7
00:00:20.290 --> 00:00:21.880
or as an abstract class.

8
00:00:22.210 --> 00:00:28.540
And that's because if an abstract class has only abstract methods, then it's no different from an interface.

9
00:00:28.930 --> 00:00:35.470
Similarly, with Java, eight interfaces can include concrete methods and so they don't seem to be different

10
00:00:35.470 --> 00:00:36.850
from abstract classes.

11
00:00:37.450 --> 00:00:43.360
So through this, on the next lesson, we will try to address this by learning about how interfaces

12
00:00:43.360 --> 00:00:44.740
are typically used.

13
00:00:46.570 --> 00:00:49.600
In general, interfaces can be classified into two types.

14
00:00:49.630 --> 00:00:55.000
First type can be referred to as representative interfaces, while the second type as makes sense.

15
00:00:55.240 --> 00:00:56.740
And let's look at each of them.

16
00:00:58.170 --> 00:01:00.510
Let's first look at representative interfaces.

17
00:01:00.900 --> 00:01:06.740
A representative interface defines behavior that is representative of a subclasses.

18
00:01:06.930 --> 00:01:08.430
That is interface methods.

19
00:01:08.430 --> 00:01:11.220
Define the core functionality of subclasses.

20
00:01:12.200 --> 00:01:16.400
Such interfaces typically come with one or more implementations.

21
00:01:17.430 --> 00:01:23.220
If you're talking about a public API like the Java library, then it is not common for implementations

22
00:01:23.220 --> 00:01:24.870
to come from outside API.

23
00:01:25.200 --> 00:01:30.930
So the API designers would provide one or more implementations along with the interface itself.

24
00:01:32.950 --> 00:01:34.810
Here is an example from the Java Library.

25
00:01:34.840 --> 00:01:37.060
The name of the interface is List.

26
00:01:37.360 --> 00:01:40.780
It has several implementations and the important ones are shown here.

27
00:01:40.930 --> 00:01:46.990
Both the interface and its implementations are from Java package and we will study them in the Collections

28
00:01:46.990 --> 00:01:47.920
Framework chapter.

29
00:01:48.740 --> 00:01:54.650
The list interface represents a data structure that stores ordered collection of elements.

30
00:01:55.160 --> 00:02:00.200
The key here is the term ordered, so the elements are ordered in some way.

31
00:02:00.800 --> 00:02:04.760
That is the position of elements in the list has some significance here.

32
00:02:05.420 --> 00:02:12.320
So the interface includes methods that allow elements to be stored, retrieved and deleted from specific

33
00:02:12.320 --> 00:02:13.610
positions in the list.

34
00:02:13.700 --> 00:02:19.910
And that kind of positional access is the representative behavior defined by the list interface.

35
00:02:20.120 --> 00:02:24.740
So all the list implementations will also have this positional access behavior.

36
00:02:26.420 --> 00:02:32.570
As mentioned earlier, it is not common for subclasses of representative interfaces to come from outside

37
00:02:32.570 --> 00:02:40.370
the API, but when they do come it is usually from some other popular API that provides better implementation.

38
00:02:40.970 --> 00:02:47.360
For example, you can see here that the list interface from the Standard Java Library has implementations

39
00:02:47.360 --> 00:02:51.350
from other APIs like Google, Scuba and Apache comments.

40
00:02:52.070 --> 00:02:58.790
Apache commits API Doc for tree list claims that it is a better alternative to link list, which is

41
00:02:58.790 --> 00:03:02.480
part of standard Java API and also implements the list interface.

42
00:03:02.900 --> 00:03:09.260
So normal developers developing some proprietary software generally do not implement such representative

43
00:03:09.260 --> 00:03:10.220
interfaces.

44
00:03:12.280 --> 00:03:16.600
Representative interfaces are not something that are restricted to public APIs.

45
00:03:16.900 --> 00:03:19.330
They can also be declared in proprietary software.

46
00:03:19.930 --> 00:03:25.510
Here is an example of a data integration component that aggregates data related to books from different

47
00:03:25.510 --> 00:03:26.170
sources.

48
00:03:26.800 --> 00:03:32.980
The representative interface book data integrator defines a common protocol by declaring methods such

49
00:03:32.980 --> 00:03:35.170
as Get details and get reviews.

50
00:03:35.590 --> 00:03:41.890
Get details would be responsible to fetch book details like title authors, description and so on,

51
00:03:42.010 --> 00:03:43.600
given the ISBN of a.

52
00:03:44.530 --> 00:03:50.830
Similarly, get reviews would be responsible to fetch the reviews for a given book, and implementations

53
00:03:50.830 --> 00:03:56.980
are specific to each data source, and they encapsulate information about how to query the data sources

54
00:03:57.010 --> 00:03:59.380
and also parse the results written by them.

55
00:04:00.190 --> 00:04:07.060
Nice thing is if in future a new source is to be added, and if it is added by a new programmer, then

56
00:04:07.060 --> 00:04:10.240
he or she will have to support both these methods.

57
00:04:10.780 --> 00:04:14.590
And that's the advantage we get by having a common protocol.

58
00:04:15.010 --> 00:04:19.510
That is, common protocol is forcing the programmer to provide an implementation.

59
00:04:20.370 --> 00:04:24.930
Uncommon protocol also prevents the programmer from mis typing a method name.

60
00:04:25.260 --> 00:04:32.460
For example, if the programmer types get reviews as the singular get review, then compiler would report

61
00:04:32.460 --> 00:04:36.090
that the abstract method get reviews is not implemented.

62
00:04:36.600 --> 00:04:39.660
So that would allow the programmer to fix the typo.

63
00:04:41.700 --> 00:04:47.520
Now let's see what makes sense are mix ins are the second type of interfaces and these are interfaces

64
00:04:47.520 --> 00:04:51.240
that define certain capability that subclasses can have.

65
00:04:51.630 --> 00:04:54.030
So subclasses have their own core identity.

66
00:04:54.030 --> 00:04:59.760
But in addition, when they implement a mixed scene, they are also announcing that that they additionally

67
00:04:59.760 --> 00:05:03.630
support the capability that the mixing interface is defining.

68
00:05:04.200 --> 00:05:10.710
Note that we are referring to this interface as a mix as it allows the functionality it is defining

69
00:05:10.710 --> 00:05:15.840
to be mixed into the primary functionality of the class that is implementing the mix in.

70
00:05:17.660 --> 00:05:23.480
API defines several mics and interfaces and makes sense are very generic meaning.

71
00:05:23.480 --> 00:05:30.500
Unlike in the case of representative interfaces, users of the API typically write classes that implement

72
00:05:30.500 --> 00:05:31.700
such interfaces.

73
00:05:34.150 --> 00:05:35.950
In fact, make sense are not new to us.

74
00:05:35.980 --> 00:05:39.510
We actually use the mix in in our latest class diagram.

75
00:05:39.520 --> 00:05:41.560
The interface shareable is a mix.

76
00:05:42.370 --> 00:05:44.080
Let's consider the book class here.

77
00:05:44.110 --> 00:05:45.870
It has its core identity.

78
00:05:45.880 --> 00:05:51.610
That is, it is a bookmark and is identified by features such as ID, title, description, authors

79
00:05:51.610 --> 00:05:52.300
and so on.

80
00:05:52.750 --> 00:05:59.530
In addition to having its core identity by implementing shareable interface, class book is also declaring

81
00:05:59.530 --> 00:06:02.320
that it has the capability to be shared.

82
00:06:02.860 --> 00:06:09.370
So shareable interface is a mix in and it allows the shareable functionality to be mixed into the primary

83
00:06:09.370 --> 00:06:11.050
functionality of the class.

84
00:06:11.710 --> 00:06:17.320
Recall that since movie class does not implement shareable, it does not have the additional shareable

85
00:06:17.320 --> 00:06:18.130
capability.

86
00:06:19.090 --> 00:06:25.060
Typically when people talk about interfaces, they usually associated with capability, like in the

87
00:06:25.060 --> 00:06:26.260
case of makes sense.

88
00:06:26.650 --> 00:06:32.890
But as we have seen, interfaces may also represent core functionality of its subclasses.

89
00:06:34.780 --> 00:06:35.080
Here.

90
00:06:35.080 --> 00:06:41.590
This example demonstrates the ebook class supporting multiple capabilities by implementing shareable,

91
00:06:41.590 --> 00:06:48.670
comparable and learnable interfaces comparable and learnable from the standard Java Library by implementing

92
00:06:48.670 --> 00:06:55.120
comparable book classes, declaring that its objects have the capability to be compared with each other

93
00:06:55.630 --> 00:07:02.140
and by implementing enable, it is declaring that its objects have the capability to return their own

94
00:07:02.140 --> 00:07:02.890
copies.

95
00:07:03.950 --> 00:07:09.920
Strictly speaking, Cleanable is a different type of interface called marker interface, which we will

96
00:07:09.920 --> 00:07:14.120
discuss later, and the global interface will also be discussed later.

97
00:07:15.010 --> 00:07:21.940
Note that from a naming convention standpoint makes sense typically and with the suffix able like we

98
00:07:21.940 --> 00:07:28.720
see here in the case of sharable or comparable, which kind of emphasize their capability.

99
00:07:29.890 --> 00:07:31.210
So that's about it.

100
00:07:31.270 --> 00:07:37.510
And we looked at the two types of interfaces that we can define conceptually that's very important to

101
00:07:37.510 --> 00:07:38.080
know.

102
00:07:38.110 --> 00:07:39.850
And it's nice that we did that.

103
00:07:40.390 --> 00:07:46.000
Next, we will look at an effective Java item, which talks about when interfaces should be preferred

104
00:07:46.000 --> 00:07:48.970
over abstract classes and also vice versa.

105
00:07:49.480 --> 00:07:50.200
Thank you.

