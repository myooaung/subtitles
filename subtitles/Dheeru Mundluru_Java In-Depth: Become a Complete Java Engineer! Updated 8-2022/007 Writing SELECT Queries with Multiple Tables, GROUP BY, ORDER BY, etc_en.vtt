WEBVTT
1
00:00:02.130 --> 00:00:02.700
Hi there.

2
00:00:02.790 --> 00:00:04.620
This is the Uluru and we'll come back.

3
00:00:04.800 --> 00:00:11.460
So in the last lecture we have installed the GBK driver and we have started making some changes in the

4
00:00:11.460 --> 00:00:11.970
code.

5
00:00:12.270 --> 00:00:18.450
So we are loading the driver here and now we are ready to refactor the rest of the code.

6
00:00:18.570 --> 00:00:24.000
So let's go into this class called Launch Java, which is where we are launching the application.

7
00:00:24.390 --> 00:00:24.930
Right.

8
00:00:25.110 --> 00:00:31.290
And in the main method here, we are invoking this particular method called load data.

9
00:00:32.009 --> 00:00:36.750
And load data is essentially responsible for loading the data from the text files.

10
00:00:36.750 --> 00:00:42.150
So so far we have been reading from the text files and now we are going to change that and we will change

11
00:00:42.150 --> 00:00:44.640
that in order to read from the database.

12
00:00:44.640 --> 00:00:45.210
Right.

13
00:00:45.570 --> 00:00:49.230
And start as the start of the bookmarking process itself.

14
00:00:49.560 --> 00:00:54.750
So for now, I'm commenting this code out and in the next lecture I will uncomment it.

15
00:00:54.780 --> 00:01:00.480
So in this particular lecture, the goal is to refactor the code so that we can load the data from the

16
00:01:00.480 --> 00:01:01.080
database.

17
00:01:01.380 --> 00:01:04.830
And for loading the data, we will be using search queries.

18
00:01:05.040 --> 00:01:10.410
So in this lecture we will look at select queries and in the subsequent lecture, when we uncomment

19
00:01:10.410 --> 00:01:14.220
this and when we when we run this, the bookmarking process will start.

20
00:01:14.220 --> 00:01:16.650
And you may recall that it's a randomized process.

21
00:01:16.650 --> 00:01:20.850
So we are not collecting the input from the user, but we are doing it in a random way.

22
00:01:21.060 --> 00:01:27.210
And as the bookmarks are getting are getting bookmarked, the data has to be returned to the database.

23
00:01:27.210 --> 00:01:32.130
So we will insert some we will use the insert queries for that, for loading the data.

24
00:01:32.130 --> 00:01:35.940
It's going to be select queries for inserting the data into the database.

25
00:01:35.940 --> 00:01:37.320
It will be insert queries.

26
00:01:37.650 --> 00:01:44.430
And in a subsequent lecture we will also look at update queries because you may recall that we also

27
00:01:44.430 --> 00:01:48.510
have this setting the kid friendly status of bookmarks.

28
00:01:48.540 --> 00:01:55.470
Now if an editor is going to set the set a particular bookmark as kid friendly, then that particular

29
00:01:55.470 --> 00:02:01.140
information needs to be captured with the with the bookmark saying that that particular bookmark has

30
00:02:01.140 --> 00:02:02.790
been set as kid friendly.

31
00:02:03.120 --> 00:02:08.400
Similarly, there was also another feature where we share certain bookmarks with a partner website.

32
00:02:08.910 --> 00:02:15.240
So for all of that, we need to update the existing data and for that we will be using update queries.

33
00:02:15.720 --> 00:02:22.290
So in each lecture, we are going to refactor some part of the code and we are also going to learn about

34
00:02:22.290 --> 00:02:24.750
certain SQL queries in doing so.

35
00:02:25.230 --> 00:02:31.020
So in this particular lecture, we will be we will change the entire code from reading from the text

36
00:02:31.020 --> 00:02:33.210
files to reading from the database.

37
00:02:33.210 --> 00:02:35.610
And for that we need to use a select queries.

38
00:02:35.880 --> 00:02:43.440
So we will begin by looking at setup query and we will look at a very basic form of select query.

39
00:02:43.440 --> 00:02:50.160
And then we will, we will gradually improve it to try to make it more complex and we will try to get

40
00:02:50.160 --> 00:02:52.650
a better understanding of the select queries.

41
00:02:52.890 --> 00:02:59.490
Now some of the code, actually most of the code has been refactored, and the only code that we are

42
00:02:59.490 --> 00:03:06.240
going to write in this particular lecture is to read data for the books, for movies, web links and

43
00:03:06.240 --> 00:03:07.170
users.

44
00:03:07.410 --> 00:03:09.930
The code has already been written in the interest of time.

45
00:03:10.350 --> 00:03:13.620
So so only the books data has to be read.

46
00:03:13.620 --> 00:03:18.510
And we will look at we will write some code for that, but we will still discuss the code that has been

47
00:03:18.510 --> 00:03:24.390
written for the other three types of data, and it is very similar to what has been written.

48
00:03:24.600 --> 00:03:28.230
So let's go ahead and first, let's look at the select query itself.

49
00:03:28.230 --> 00:03:34.380
And for that, let's just log into database and use some simple queries and we will progressively build

50
00:03:34.380 --> 00:03:38.760
that query and try to get a better understanding of the select query itself.

51
00:03:38.790 --> 00:03:41.850
After that, we can come back and we can make our code changes here.

52
00:03:43.160 --> 00:03:44.600
So here I am.

53
00:03:44.780 --> 00:03:46.100
So my command prompt.

54
00:03:46.940 --> 00:03:51.050
So I'm just logging into my SQL as a root user.

55
00:03:51.380 --> 00:03:53.240
So I have to use.

56
00:03:55.140 --> 00:03:58.200
Jerry underscore now.

57
00:04:00.230 --> 00:04:01.340
Sure tables.

58
00:04:01.340 --> 00:04:03.500
So these are the different tables that we have.

59
00:04:03.530 --> 00:04:11.840
First, let's consider book and publisher and let's try to print the the the title of the book along

60
00:04:11.840 --> 00:04:14.780
with the publisher, the publisher who has published that book.

61
00:04:15.110 --> 00:04:20.690
But before doing that, let's just print all the titles in the book, as well as all the names of the

62
00:04:20.690 --> 00:04:21.500
publishers.

63
00:04:23.020 --> 00:04:24.990
So for that, we use a simple select query.

64
00:04:25.000 --> 00:04:28.420
We say select title from.

65
00:04:29.590 --> 00:04:30.310
Book.

66
00:04:33.860 --> 00:04:35.480
So these are the five different books.

67
00:04:36.680 --> 00:04:38.450
Now let's say select.

68
00:04:39.860 --> 00:04:40.700
Name.

69
00:04:45.760 --> 00:04:47.290
Frem publisher.

70
00:04:49.240 --> 00:04:51.910
So we have five publishers here.

71
00:04:52.480 --> 00:04:56.530
So each book is associated with one of these publishers.

72
00:04:56.530 --> 00:05:00.430
So Value then, for example, is published by Wilder Publications.

73
00:05:00.580 --> 00:05:03.070
The second book is by the second publisher.

74
00:05:03.070 --> 00:05:05.560
So there is a 1 to 1 correspondence here.

75
00:05:06.670 --> 00:05:09.790
Now, so here this is the select query.

76
00:05:09.790 --> 00:05:16.360
Select is the reserved keyword, and it is followed by immediately followed by the column names which

77
00:05:16.360 --> 00:05:18.430
we want to view, whose data we want to view.

78
00:05:18.700 --> 00:05:23.800
And then the frame, class and frame is followed by the tables.

79
00:05:24.010 --> 00:05:29.880
So we are saying that we want to view the data and this in these tables it can be more than one table.

80
00:05:29.890 --> 00:05:36.430
So now the next query has to be displaying both the title and the name in the same query.

81
00:05:36.970 --> 00:05:40.300
And for that we need to make use of both the tables, book and publisher.

82
00:05:41.170 --> 00:05:42.070
And that's called us.

83
00:05:42.550 --> 00:05:44.800
That's called us joining the tables.

84
00:05:44.920 --> 00:05:47.290
And that is very commonly done.

85
00:05:47.890 --> 00:05:52.990
So we have using in our database design, we have normalized the tables.

86
00:05:52.990 --> 00:05:55.090
We have split them into multiple tables.

87
00:05:55.300 --> 00:05:58.510
Now we want to view the data from these different tables.

88
00:05:58.510 --> 00:06:00.820
And for that we need to join the tables.

89
00:06:01.610 --> 00:06:05.990
So let's just say select title comma name.

90
00:06:09.550 --> 00:06:10.180
My publisher.

91
00:06:10.180 --> 00:06:11.170
This is all we do.

92
00:06:11.470 --> 00:06:12.310
And.

93
00:06:13.290 --> 00:06:15.300
And this is the data that we are getting.

94
00:06:18.480 --> 00:06:21.210
Now here there is a lot of unwanted data.

95
00:06:21.330 --> 00:06:27.630
Now Walden is published by Wilder Publications, which is fine, but you can see that WILDER Walden

96
00:06:27.840 --> 00:06:32.580
Over here we have a rule which says that it is published by double publications, which is not true.

97
00:06:32.610 --> 00:06:35.970
It is published by only one publisher, which is Wilder Publications.

98
00:06:36.180 --> 00:06:41.310
And then it says that Walden is also published by Touchstone and these different things.

99
00:06:41.310 --> 00:06:42.240
And the same.

100
00:06:42.270 --> 00:06:44.820
The same is happening with every other book.

101
00:06:44.820 --> 00:06:51.390
Also, the second book is published by Dover Publications, which is correct, but it is not published

102
00:06:51.390 --> 00:06:58.310
by the Wilder Publications or Touchstone here, or media or Prentice Hall.

103
00:06:58.530 --> 00:07:01.620
So the reason why this is happening is because.

104
00:07:02.970 --> 00:07:09.090
When we do a joint like this, it's going to do a cross product of both these tables.

105
00:07:09.420 --> 00:07:13.340
So it's going to associate them with all five of them.

106
00:07:13.350 --> 00:07:18.450
Then it's going to associate the second book with all five of them and the third book with all five

107
00:07:18.450 --> 00:07:18.920
of them.

108
00:07:18.930 --> 00:07:20.580
So that's not what we want.

109
00:07:20.670 --> 00:07:24.990
So what we what we need is we need to filter this data.

110
00:07:25.020 --> 00:07:29.160
And for that, we need to apply certain conditions in our query.

111
00:07:29.970 --> 00:07:31.280
So let's do this.

112
00:07:31.290 --> 00:07:37.650
The way we do it is first, let's put an alias here so we can put an alias for the book table.

113
00:07:38.710 --> 00:07:40.420
So that we can use the alias.

114
00:07:40.450 --> 00:07:45.010
Now we have to say where be dot?

115
00:07:45.040 --> 00:07:51.040
Now, if you recall, the book table has this field called Publisher Underscore ID, which is a foreign

116
00:07:51.040 --> 00:07:56.080
foreign key, which is a foreign reference to the ID field in the publisher.

117
00:07:56.740 --> 00:08:01.090
So every row, every particular book has a certain publisher.

118
00:08:01.300 --> 00:08:08.800
So that publisher ID is there in the book table within that row, and that is referencing a particular

119
00:08:08.800 --> 00:08:10.670
publisher in the publisher table.

120
00:08:10.690 --> 00:08:13.480
So we would say B dot publisher underscore ID.

121
00:08:16.590 --> 00:08:20.250
So publisher underscore ID is a field is a column and the book table.

122
00:08:21.240 --> 00:08:24.500
And we say equals to be dot 80.

123
00:08:25.360 --> 00:08:26.950
So now if we do this.

124
00:08:28.440 --> 00:08:31.260
So you can see that we have the correct associations.

125
00:08:31.920 --> 00:08:38.400
So Walden is now associated with other publications because the row within the Walden had a publisher

126
00:08:38.400 --> 00:08:43.559
ID, which is matching with the ID and the publisher table.

127
00:08:43.559 --> 00:08:49.440
So this is coming from the publisher table and all other IDs in the publisher table will not match that

128
00:08:49.740 --> 00:08:52.530
particular publisher ID and that's how we get this.

129
00:08:52.830 --> 00:08:53.880
We get this data.

130
00:08:54.210 --> 00:08:59.910
So in case if you're getting confused, just pause this video and just think about it and it should

131
00:08:59.910 --> 00:09:00.600
be clear.

132
00:09:01.360 --> 00:09:07.660
So that's what the that's how you join the tables and you use the conditions in this way.

133
00:09:08.650 --> 00:09:14.230
So this is the way of course, this is also a keyword and you can use such kind of aliases.

134
00:09:14.440 --> 00:09:17.420
Now, I have a bunch of queries here.

135
00:09:17.440 --> 00:09:21.460
So so this is a simple query, still a simple search query.

136
00:09:21.460 --> 00:09:25.740
And we will try to learn a little bit about more, more about the SQL queries.

137
00:09:25.750 --> 00:09:28.540
So we will just use more tables here.

138
00:09:29.200 --> 00:09:30.910
So here we have an e-book and publisher.

139
00:09:30.910 --> 00:09:33.550
Let's also add author related information.

140
00:09:34.180 --> 00:09:40.600
And this is almost identical to the query that we will be using later to load the to load the book data.

141
00:09:40.990 --> 00:09:43.990
So this is the first query, so let me just execute it.

142
00:09:43.990 --> 00:09:50.170
So this here we are using book publisher like in the previous query and author and also book underscore

143
00:09:50.170 --> 00:09:50.740
author.

144
00:09:51.040 --> 00:09:59.590
And these are the types of data that we want to print the ID title and the publisher name, publisher

145
00:09:59.590 --> 00:10:01.240
name, title and publisher name.

146
00:10:01.240 --> 00:10:08.290
We were also printing earlier and we also want to print the author's name and the Amazon rating of the

147
00:10:08.290 --> 00:10:14.320
book and the conditions are broad publisher underscore ID equal to priority, which is from the previous

148
00:10:14.320 --> 00:10:14.860
query.

149
00:10:15.220 --> 00:10:21.130
But for the book we know that book underscore author is the connecting table between book and author,

150
00:10:21.430 --> 00:10:21.940
right?

151
00:10:21.940 --> 00:10:26.350
Because a book can be published by multiple authors and a single author can publish multiple books.

152
00:10:26.350 --> 00:10:28.870
So the condition is B ID.

153
00:10:28.870 --> 00:10:37.000
So it is the primary key in the book B is for book P publish P stands for publisher, here is for author

154
00:10:37.000 --> 00:10:43.150
and the alias we are using for book underscore author is B where b b is for the first word book an E

155
00:10:43.150 --> 00:10:44.050
for the author.

156
00:10:44.290 --> 00:10:50.650
So we here the condition is b dot id is equal to be a book underscore ID.

157
00:10:50.860 --> 00:10:56.590
You may recall that within the book underscore author table we had book underscore ID and author underscore

158
00:10:56.590 --> 00:11:02.560
ID and they are foreign keys to the ID field in the book and to the ID field in the author.

159
00:11:02.560 --> 00:11:07.900
So the condition here is ID equal to be a dot book underscore ID.

160
00:11:08.620 --> 00:11:10.450
So that's what we are doing here.

161
00:11:10.450 --> 00:11:17.200
So that's connecting a book to a book, underscore ID in the book, underscore author.

162
00:11:17.410 --> 00:11:20.920
And from within that row we also have author ID.

163
00:11:20.920 --> 00:11:26.440
So we will say be a dot author underscore ID equal to a dot ID.

164
00:11:27.340 --> 00:11:30.940
So this is how we are going to merge the four tables.

165
00:11:30.940 --> 00:11:32.860
So let me click here.

166
00:11:38.360 --> 00:11:39.320
So here we are.

167
00:11:39.320 --> 00:11:41.750
So we have all the data here that we need.

168
00:11:41.990 --> 00:11:48.770
The only thing is this fourth book, Headfirst Design Patterns, has been written by four different

169
00:11:48.770 --> 00:11:49.430
authors.

170
00:11:49.460 --> 00:11:51.770
Eric Freeman And these are the four different authors.

171
00:11:51.770 --> 00:11:57.770
The rest of the books were written by a single author, and because of that, because it's being written

172
00:11:57.770 --> 00:12:06.860
by four different authors, we have four different rows here, but it would be nice if we have a single

173
00:12:06.860 --> 00:12:14.000
row here and if we list all of these authors within the within this particular row instead of having

174
00:12:14.000 --> 00:12:17.120
four rows, it would be nice to have a single row.

175
00:12:17.300 --> 00:12:20.570
And for that we can use something called group by.

176
00:12:21.620 --> 00:12:22.520
Here is a query.

177
00:12:22.520 --> 00:12:23.770
It's just the same query.

178
00:12:23.780 --> 00:12:28.910
Only this last line has been added and this query is still incomplete.

179
00:12:30.200 --> 00:12:38.420
So what group buyer is going to do is it's going to group this data that we see here by the data that

180
00:12:38.420 --> 00:12:39.950
we see here by ID.

181
00:12:40.610 --> 00:12:43.970
So we are just saying group by B dot ID.

182
00:12:43.970 --> 00:12:45.200
So that's what we are doing.

183
00:12:45.650 --> 00:12:49.130
So let me just also copy this.

184
00:12:53.850 --> 00:12:54.840
Here it is.

185
00:12:55.870 --> 00:13:02.080
But the problem here is for this head first design patents, it's printing only one author.

186
00:13:02.710 --> 00:13:07.900
So what is happening is it is grouping all of this data by brand ID.

187
00:13:07.930 --> 00:13:15.220
So it's also grouping this particular these four rows by B ID ID is just the for the value for here,

188
00:13:15.520 --> 00:13:17.770
but it is printing only one of them.

189
00:13:18.130 --> 00:13:23.440
But if we want all of those, all of the three values, the rest of the three to be printed as less,

190
00:13:23.440 --> 00:13:29.350
then we need to apply the next query, which is almost identical to the previous query.

191
00:13:29.530 --> 00:13:40.690
But here for a dot name we are saying group underscore copycat and we are saying a dot name separator.

192
00:13:41.690 --> 00:13:43.120
And the separator is this.

193
00:13:43.130 --> 00:13:50.900
So essentially what we are doing is within this particular group, within each group, we are concatenating

194
00:13:50.900 --> 00:13:52.220
the author names.

195
00:13:52.550 --> 00:13:59.780
So if it is just when we are grouping for certain rows, they have only a single row.

196
00:13:59.780 --> 00:14:07.130
But for this one, for where the ID is, for there are four different rows and we are saying concatenate

197
00:14:07.130 --> 00:14:11.690
all of the authors and separate the names by bi comma.

198
00:14:11.690 --> 00:14:13.270
And that's what we are doing here.

199
00:14:13.280 --> 00:14:15.470
So we are saying group underscore cat.

200
00:14:15.860 --> 00:14:22.370
So group underscore cat is an inbuilt function which is going to contact and we are saying a name has

201
00:14:22.370 --> 00:14:27.680
to be concatenated using the separator comma, so let's just execute that.

202
00:14:27.680 --> 00:14:31.040
So this is the only change from the previous query.

203
00:14:36.000 --> 00:14:39.960
Now, as you can see here, the values have been concatenated.

204
00:14:40.500 --> 00:14:48.180
So that's what the group by now, group by also can be associated with a having class having class,

205
00:14:48.180 --> 00:14:49.320
which is an optional.

206
00:14:49.380 --> 00:14:53.880
So here we are saying that it's just we are just adding this having class here.

207
00:14:53.880 --> 00:14:56.560
So as you can see, we are progressively building the query.

208
00:14:56.580 --> 00:15:04.470
So here we have the having class and here we are saying within the group, show me only this data.

209
00:15:04.710 --> 00:15:08.700
If within a group the group size is more than one.

210
00:15:09.240 --> 00:15:13.440
So we are saying count off ID should be greater than one.

211
00:15:13.440 --> 00:15:16.770
Where count is n is called as an aggregated function.

212
00:15:16.800 --> 00:15:21.960
And there are also other aggregated functions like sum, average, min, max and so on.

213
00:15:22.410 --> 00:15:28.860
But here the count is for counting the number of rows within a particular group, and we are saying

214
00:15:28.860 --> 00:15:34.950
that the number of rows has to be greater than one, and there is only one such row, which is one such

215
00:15:34.950 --> 00:15:38.760
group, which is the group which had the ID value of four.

216
00:15:43.550 --> 00:15:49.790
So now, instead of four of these, it's painting only the eye, only the row which had died for because

217
00:15:49.790 --> 00:15:55.550
the rest of the groups like the first group, second group and all of them, they had only a single

218
00:15:55.550 --> 00:15:57.200
row in each of the groups.

219
00:15:57.240 --> 00:15:57.710
Right.

220
00:15:57.740 --> 00:15:59.870
Only this one had four authors.

221
00:16:00.260 --> 00:16:01.610
So that's what that.

222
00:16:01.640 --> 00:16:03.930
Now, next one is order by.

223
00:16:03.980 --> 00:16:05.690
So this is about sorting.

224
00:16:06.110 --> 00:16:07.760
So it's just a previous query.

225
00:16:07.760 --> 00:16:10.280
But I remove this having class.

226
00:16:10.670 --> 00:16:15.890
We don't need that because without that, I think it would be much more easier to understand this query

227
00:16:16.100 --> 00:16:17.690
as it displays more rows.

228
00:16:17.840 --> 00:16:20.060
So it is the query before that.

229
00:16:20.060 --> 00:16:27.050
But we are saying order by here or by Amazon rating and we are saying display all of the results and

230
00:16:27.050 --> 00:16:31.740
descending order of the in descending order of of rating.

231
00:16:31.970 --> 00:16:35.450
So it's like the sort by but in descending order of the rating.

232
00:16:35.450 --> 00:16:37.850
So let me just copy this.

233
00:16:40.510 --> 00:16:42.900
Now, as you can see, it is displaying all of that.

234
00:16:42.910 --> 00:16:49.960
But as you can see, it is they are all ordered in descending order of the rating information of the

235
00:16:49.960 --> 00:16:50.710
book rating.

236
00:16:50.710 --> 00:16:53.140
And the IDs have also been changed here.

237
00:16:53.470 --> 00:16:58.600
So they are no longer an increment or an incremental order of the IDs.

238
00:16:58.600 --> 00:17:01.390
So they got changed.

239
00:17:01.870 --> 00:17:03.910
Now, here is another condition.

240
00:17:03.910 --> 00:17:07.780
We are saying just we are applying this condition, the same query.

241
00:17:07.780 --> 00:17:11.530
We are saying that Amazon rating has to be greater than or equal to 4.5.

242
00:17:11.560 --> 00:17:13.030
So let's just run that also.

243
00:17:13.030 --> 00:17:14.380
It's very straightforward.

244
00:17:22.319 --> 00:17:22.950
So that's it.

245
00:17:22.980 --> 00:17:31.050
Now it's just the previous results set, but we are displaying only those that have a rating of 4.5

246
00:17:31.050 --> 00:17:31.970
or more than that.

247
00:17:31.980 --> 00:17:34.010
So the final one had 4.3.

248
00:17:34.020 --> 00:17:35.760
So it got filtered out.

249
00:17:36.890 --> 00:17:41.390
And let's look at one more query, which with another condition.

250
00:17:41.390 --> 00:17:43.340
So we are just adding one more condition.

251
00:17:43.490 --> 00:17:47.600
So all of these conditions here are joined by and here.

252
00:17:47.900 --> 00:17:54.410
So this one is about we are saying that the author name should be something like this.

253
00:17:54.590 --> 00:18:01.610
A percentage block percentage is a placeholder and we are saying block so it will display the book that

254
00:18:01.610 --> 00:18:03.470
has been written by Joshua BLOCK.

255
00:18:04.100 --> 00:18:05.600
So it's just the same.

256
00:18:06.610 --> 00:18:12.340
It's going to be the same output as previous, but only the book that has been written by Joshua Bloch

257
00:18:12.340 --> 00:18:12.580
here.

258
00:18:12.580 --> 00:18:14.170
The second book will be printed.

259
00:18:16.960 --> 00:18:17.750
There you go.

260
00:18:17.770 --> 00:18:23.800
So you have only effective Java book, which is also one of the main books that we are following in

261
00:18:23.800 --> 00:18:24.490
this course.

262
00:18:24.850 --> 00:18:25.570
So that's it.

263
00:18:25.570 --> 00:18:26.990
So this is what it is.

264
00:18:27.010 --> 00:18:29.170
So this is what we have here.

265
00:18:29.740 --> 00:18:32.830
And so we are using four tables.

266
00:18:32.830 --> 00:18:38.590
But when you're working on professional projects, it would be very common for you to write really complex

267
00:18:38.590 --> 00:18:43.200
queries where you join maybe 15, 20 tables or even more than that.

268
00:18:43.210 --> 00:18:47.500
And you are you will have lots and lots of conditions here.

269
00:18:47.770 --> 00:18:53.800
So with experience, when you're working on some real projects, you will you will learn about writing

270
00:18:53.800 --> 00:18:54.920
such big queries.

271
00:18:54.940 --> 00:18:57.670
It's just quite easy, actually.

272
00:18:57.700 --> 00:19:02.280
It's just you just need some practice or a little bit of practice.

273
00:19:02.290 --> 00:19:07.660
And with that you'll be able to write some really complex queries and do some amazing stuff by using

274
00:19:07.660 --> 00:19:09.010
a skill set of queries.

275
00:19:09.310 --> 00:19:14.620
Now, I think we have taken a lot of time in going through in discussing these search queries.

276
00:19:14.620 --> 00:19:18.580
So let me stop here and in the next lecture we will actually refactor the code.

277
00:19:19.000 --> 00:19:19.630
Thank you.

278
00:19:20.200 --> 00:19:24.370
And these queries will also be available in the resources section.

279
00:19:24.700 --> 00:19:26.230
So you can take a look at that.

