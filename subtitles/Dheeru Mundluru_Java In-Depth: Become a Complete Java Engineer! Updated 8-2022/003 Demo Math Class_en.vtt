WEBVTT
1
00:00:02.050 --> 00:00:03.020
Hello there.

2
00:00:03.040 --> 00:00:04.270
This is the La Rue.

3
00:00:04.270 --> 00:00:05.320
And welcome back.

4
00:00:05.560 --> 00:00:11.560
Now, let's look at another fundamental class in the Java Lang package, which is the math class.

5
00:00:12.070 --> 00:00:19.000
Math class is a utility class, which means that it offers many utility methods.

6
00:00:19.120 --> 00:00:21.070
That is very useful methods.

7
00:00:21.070 --> 00:00:23.290
And these methods are static methods.

8
00:00:23.470 --> 00:00:27.040
And these methods help in performing numeric operations.

9
00:00:27.640 --> 00:00:32.020
For instance, there is a method for generating random numbers.

10
00:00:32.350 --> 00:00:38.950
Similarly, there are methods for computing maximum or minimum of two values, and there are also methods

11
00:00:38.950 --> 00:00:42.760
for performing logarithmic as well as trigonometric functions.

12
00:00:43.240 --> 00:00:49.540
So these are very useful methods, and all the methods in the math class are static methods, which

13
00:00:49.540 --> 00:00:54.760
means that there is no point in creating an instance of the math class.

14
00:00:55.420 --> 00:01:03.520
In fact, math class is non intangible, which means that you cannot create an object of the math class.

15
00:01:04.120 --> 00:01:09.010
And how that is possible is something that we will look at at the end of the lecture.

16
00:01:09.860 --> 00:01:14.450
So let's go ahead and look at very commonly used methods within the math class.

17
00:01:14.870 --> 00:01:23.060
Now, since this is about math class, let's name our method as math demo within our basics demo class

18
00:01:23.360 --> 00:01:27.350
and let's allow Eclipse to auto generate the method for us.

19
00:01:28.650 --> 00:01:32.150
Just hover over it and we have the method here.

20
00:01:32.690 --> 00:01:37.940
So first, let's just consider a simple lottery game.

21
00:01:38.660 --> 00:01:42.620
We know that in lottery, one of the customers will be picked as a winner.

22
00:01:42.890 --> 00:01:49.280
So let's say there are 100 customers and each of them have been assigned a unique number from 1 to 100.

23
00:01:49.610 --> 00:01:51.330
And we need to draw the lottery.

24
00:01:51.350 --> 00:01:54.080
So one of them will be picked as the winner.

25
00:01:54.080 --> 00:01:57.830
So the lottery would be one of the numbers that would be picked up.

26
00:01:58.010 --> 00:02:04.760
So for that, we can use a method called as random because we need to randomly pick one of the winners.

27
00:02:05.240 --> 00:02:08.690
So we will say math, not random.

28
00:02:09.590 --> 00:02:11.470
So random is a static method.

29
00:02:11.480 --> 00:02:18.470
So like I said, every method is static here and it returns a double and it returns a double in between

30
00:02:18.470 --> 00:02:19.820
zero and one.

31
00:02:20.240 --> 00:02:27.260
So the value that is returned will be greater than or equal to zero and less than one, which means

32
00:02:27.260 --> 00:02:30.890
that zero is inclusive, but one is exclusive.

33
00:02:31.640 --> 00:02:33.590
So let's just double click here.

34
00:02:33.590 --> 00:02:37.390
So it returns a double value notation wise.

35
00:02:37.400 --> 00:02:41.450
If it is inclusive, we will say zero or we will use a square bracket.

36
00:02:41.480 --> 00:02:46.880
And since we are saying one is exclusive, we will use a parentheses.

37
00:02:46.880 --> 00:02:49.130
So that's the generic notation.

38
00:02:49.430 --> 00:02:53.280
So it's going to return a value between zero and one, right?

39
00:02:53.300 --> 00:02:54.800
So we'll set double.

40
00:02:54.890 --> 00:02:56.870
Random is equal to this.

41
00:02:57.080 --> 00:02:58.370
So that's a variable name.

42
00:02:59.120 --> 00:03:01.490
But we want a value between one and 100.

43
00:03:01.760 --> 00:03:09.560
So since we want a value between one and 100, what we can do is we will just multiply this random with

44
00:03:09.560 --> 00:03:15.070
100 and we want an end value so we don't need a double.

45
00:03:15.080 --> 00:03:17.150
So we will apply a cast here.

46
00:03:17.330 --> 00:03:20.510
And when we apply a cast, the number will be truncated.

47
00:03:20.510 --> 00:03:21.290
We know that.

48
00:03:21.800 --> 00:03:28.190
But if this random number that is generated is, let's say, zero, in which case this expression will

49
00:03:28.190 --> 00:03:28.910
be zero.

50
00:03:29.150 --> 00:03:33.920
But our number starts from one, which means that we need to add a one here.

51
00:03:34.190 --> 00:03:38.750
And this will give us our lucky winner.

52
00:03:39.470 --> 00:03:49.850
So if it returns a value like C .999, so that would be 0.999 times 100, which would be 99.9.

53
00:03:50.090 --> 00:03:53.720
And when it is when we apply the cast, it will become 99.

54
00:03:53.990 --> 00:03:56.410
And when we add one, that will be 100.

55
00:03:56.420 --> 00:04:00.020
So that's how 100 would be generated.

56
00:04:00.050 --> 00:04:03.980
So let's go ahead and print these values first.

57
00:04:03.980 --> 00:04:05.660
Let's print random here.

58
00:04:06.590 --> 00:04:11.510
Then just type in this out and control space.

59
00:04:11.690 --> 00:04:14.090
And our lucky winner.

60
00:04:14.830 --> 00:04:17.019
So let me just go ahead and run this.

61
00:04:18.010 --> 00:04:21.600
So here the random number that is returned as this.

62
00:04:21.610 --> 00:04:25.120
And the winner is the one with the number 34.

63
00:04:25.150 --> 00:04:26.470
Let me run it one more time.

64
00:04:28.130 --> 00:04:30.800
So this time it is .41 and four two.

65
00:04:31.400 --> 00:04:36.140
So that's how you would use a random method to generate random numbers.

66
00:04:36.170 --> 00:04:40.340
In fact, there is a class called random and it has many methods.

67
00:04:40.490 --> 00:04:47.330
This random method also internally uses that class, but it is generally preferable to use that random

68
00:04:47.330 --> 00:04:49.800
class in order to generate random numbers.

69
00:04:49.820 --> 00:04:54.920
But here, since we are dealing with math class, we are not going to discuss about random class.

70
00:04:54.920 --> 00:04:57.170
So you can explore a random class later on.

71
00:04:57.410 --> 00:05:00.080
So but that's just for your information.

72
00:05:01.330 --> 00:05:07.470
And random number generator generation is also useful in many other applications like cryptography.

73
00:05:07.480 --> 00:05:12.280
Or if you want to generate passwords, automatically generate passwords, then it's very useful.

74
00:05:12.580 --> 00:05:14.530
So this is one application.

75
00:05:14.860 --> 00:05:17.500
Next, let's look at rounding methods.

76
00:05:17.740 --> 00:05:23.440
So let's say if there is a distance between two points, between two places like Los Angeles and San

77
00:05:23.440 --> 00:05:28.090
Francisco, and let's say the distances, let's say 24.5.

78
00:05:28.450 --> 00:05:35.230
But in our application, we would want to show that number as an integer rather than a float.

79
00:05:35.650 --> 00:05:39.430
So 24.45 could be the actual distance between the two points.

80
00:05:39.730 --> 00:05:44.020
But to the user, we might want to show it as 24 or 25.

81
00:05:44.080 --> 00:05:46.090
So for that, you would use.

82
00:05:47.010 --> 00:05:54.390
Rounding methods and rounding methods, as the name suggests, will help in rounding a floating point

83
00:05:54.390 --> 00:05:55.290
value.

84
00:05:56.260 --> 00:06:00.250
To the nearest integer and there are a bunch of methods for that.

85
00:06:00.250 --> 00:06:05.710
And first one, let's look at this method called math dot round.

86
00:06:06.850 --> 00:06:10.180
And as you can see, they are overloaded methods.

87
00:06:10.570 --> 00:06:13.870
One is taking a double and the other one is taking a float.

88
00:06:13.900 --> 00:06:17.650
So both of them will return the nearest integer value.

89
00:06:17.830 --> 00:06:23.620
But this one, the first one will return a long it takes it double and returns along.

90
00:06:23.650 --> 00:06:26.950
The second one takes a float and it returns an end.

91
00:06:27.790 --> 00:06:34.600
Maybe that is because this is 64 bit and this is also 64 bit and this is 32 and INT is also 32.

92
00:06:35.170 --> 00:06:37.570
So let's go ahead and try both of these.

93
00:06:37.570 --> 00:06:41.530
So let's say 24.45.

94
00:06:41.530 --> 00:06:42.930
So that's a double.

95
00:06:42.940 --> 00:06:45.640
So it has to return a long.

96
00:06:45.640 --> 00:06:51.280
So if you assign it to, let's say, an end, it will give us a compilation error, right?

97
00:06:51.280 --> 00:06:53.970
Because it is returning a long.

98
00:06:53.980 --> 00:06:57.970
So we need to either cast or change this too long.

99
00:06:58.360 --> 00:06:59.530
Similarly.

100
00:07:00.480 --> 00:07:02.060
Let's use this next one.

101
00:07:02.070 --> 00:07:05.790
The other overloaded method which takes.

102
00:07:06.830 --> 00:07:08.430
That's at 24.5.

103
00:07:08.450 --> 00:07:10.640
And in this case, let's give you a float literal.

104
00:07:10.940 --> 00:07:15.320
So if it is float, then it returns an end.

105
00:07:15.410 --> 00:07:18.290
So let's go ahead and print these two values now.

106
00:07:22.830 --> 00:07:24.420
The second one is distance to.

107
00:07:27.080 --> 00:07:35.120
So as you can see, the first one is returning 24 because 24 is the nearest integer value to 24.45.

108
00:07:35.270 --> 00:07:40.820
But if it is 24.5, that is it is halfway, then it is returning 25.

109
00:07:41.600 --> 00:07:43.610
So that's the wrong methods.

110
00:07:43.610 --> 00:07:48.930
But in this case, it is either returning the lowest, the nearest integer value.

111
00:07:48.950 --> 00:07:56.180
But if you always want to return an integer value that is always greater than or equal to this input

112
00:07:56.180 --> 00:08:00.410
argument, which means that you want to do a round up always.

113
00:08:00.920 --> 00:08:05.150
In this case, it could be round up or round down, depending upon the argument.

114
00:08:05.450 --> 00:08:10.490
But if you always want to round up, then you would use a method called seal.

115
00:08:10.760 --> 00:08:12.620
So there is a method called SEAL.

116
00:08:13.700 --> 00:08:18.050
As the name implies, it does a round up like a sealing.

117
00:08:18.250 --> 00:08:24.340
All right, so let's take math, dot seal.

118
00:08:24.350 --> 00:08:27.320
So it takes a double and it returns a double.

119
00:08:27.770 --> 00:08:34.039
The round method is returning a longer end, but SEAL is returning a double value.

120
00:08:34.610 --> 00:08:38.659
So let's just take the same example 24.45.

121
00:08:39.140 --> 00:08:40.400
And it would return.

122
00:08:40.820 --> 00:08:42.169
It would return 25.

123
00:08:43.169 --> 00:08:44.600
So here.

124
00:08:47.020 --> 00:08:49.480
Let's just call it a seal one to keep it simple.

125
00:08:49.900 --> 00:08:52.990
Next, let's take another example and.

126
00:08:54.150 --> 00:08:56.880
Let's say 25 point.

127
00:08:57.700 --> 00:08:58.180
Fine.

128
00:08:58.210 --> 00:09:02.470
Let's just keep it as 1 to 5 itself, which is also an integer value.

129
00:09:03.880 --> 00:09:04.780
And.

130
00:09:10.670 --> 00:09:10.800
Okay.

131
00:09:10.880 --> 00:09:12.170
So let me just run this.

132
00:09:13.410 --> 00:09:19.850
So in the first case, it is written in 25 or 24.45 because it has been rounded up.

133
00:09:19.860 --> 00:09:22.980
And in the second case also it returns 25.

134
00:09:23.520 --> 00:09:31.470
The input is 25 and the output is also 25 because SEAL is going to return the smallest double value

135
00:09:31.470 --> 00:09:34.920
that is greater than or equal to the argument.

136
00:09:34.920 --> 00:09:41.100
So since it says equal to also so it is going to return the smallest integer value that is greater than

137
00:09:41.100 --> 00:09:42.330
or equal to.

138
00:09:42.420 --> 00:09:46.800
In this case it is equal to and hence it has written 25.

139
00:09:47.280 --> 00:09:50.910
So this is the smallest value that is equal to 25.

140
00:09:51.510 --> 00:09:53.880
So that's what the description says.

141
00:09:54.690 --> 00:09:55.170
That's it.

142
00:09:55.260 --> 00:09:56.970
So here we are doing a round up.

143
00:09:56.970 --> 00:09:58.920
It's already always doing a round up.

144
00:09:58.920 --> 00:10:04.440
So even if it is 24.01, it would return a 25.

145
00:10:04.470 --> 00:10:05.430
Here it is.

146
00:10:06.000 --> 00:10:13.530
Now, if you want to do the opposite, which is to do a round down, then we will use a method called

147
00:10:13.530 --> 00:10:14.290
flow.

148
00:10:14.640 --> 00:10:16.470
So it's also very appropriately named.

149
00:10:16.470 --> 00:10:20.090
This is seal and that is flow for round on seal.

150
00:10:20.130 --> 00:10:22.470
It is round up for Florida's round.

151
00:10:22.950 --> 00:10:25.830
So let's go ahead and test that also.

152
00:10:26.220 --> 00:10:27.780
This would be round done.

153
00:10:28.560 --> 00:10:30.870
Let me just copy all of these here.

154
00:10:41.290 --> 00:10:42.920
Let's call it as floor one.

155
00:10:44.320 --> 00:10:45.220
Floor to.

156
00:10:49.610 --> 00:10:49.870
Okay.

157
00:10:49.880 --> 00:10:51.140
So let's run it.

158
00:10:52.660 --> 00:10:54.850
So as you can see in this case.

159
00:10:55.360 --> 00:10:57.160
Sorry, this needs to be floor.

160
00:10:57.490 --> 00:10:58.420
Sorry for that.

161
00:11:01.360 --> 00:11:03.710
So as you can see, it is returning 24.

162
00:11:03.730 --> 00:11:06.490
And the input argument is 24.45.

163
00:11:06.520 --> 00:11:14.950
For 25, it is still returning 25 because just like in the case of seal here, it says returns the largest

164
00:11:14.950 --> 00:11:20.290
double value that is less than or equal to the argument.

165
00:11:20.650 --> 00:11:23.060
So for 25, it is also returning 25.

166
00:11:24.370 --> 00:11:28.840
So those are round up and round down very useful methods.

167
00:11:29.260 --> 00:11:35.380
Now next, let's say we want to compute minimum and max of two numbers.

168
00:11:35.830 --> 00:11:41.890
If you want Max, there is a method called Max here and it is also an overloaded method and you can

169
00:11:41.890 --> 00:11:44.170
see the different parameters that it has.

170
00:11:44.200 --> 00:11:47.740
So let's just pick this one and it should be very easy.

171
00:11:47.740 --> 00:11:53.980
24.4, five and 2520 4.5, let's say.

172
00:12:04.430 --> 00:12:04.760
Okay.

173
00:12:04.820 --> 00:12:10.460
So it returns 24.5 because that is greater than 24.45.

174
00:12:10.610 --> 00:12:12.500
So that's how you would compute, Max.

175
00:12:12.500 --> 00:12:14.300
And similarly, there is also men.

176
00:12:14.330 --> 00:12:21.680
Now, if you want to compute, let's say absolute value, absolute value would be the positive value

177
00:12:21.680 --> 00:12:23.080
of the given number.

178
00:12:23.090 --> 00:12:28.320
Even if the given number is negative, it would return a positive value of that number.

179
00:12:28.340 --> 00:12:32.900
So for that, there is this method called ABS, which stands for Absolute.

180
00:12:33.470 --> 00:12:40.240
Let's just give it a double 24.45 and it would return a positive value.

181
00:12:40.250 --> 00:12:42.710
So let's assign it to double.

182
00:12:43.220 --> 00:12:44.600
Let's call it as abs.

183
00:12:50.750 --> 00:12:57.650
Search Results 24 positive 24.45 Even if it is positive, then it will still be 24.45.

184
00:12:57.770 --> 00:12:58.910
Even if you give it like this.

185
00:12:59.270 --> 00:13:01.610
Plus it would still be 24.45.

186
00:13:04.190 --> 00:13:06.410
Next, let's look at the power function.

187
00:13:06.410 --> 00:13:08.810
So there is a method called power.

188
00:13:09.440 --> 00:13:15.260
It takes two doubles and it says returns the value of the first argument raised to the power of the

189
00:13:15.260 --> 00:13:16.370
second argument.

190
00:13:16.520 --> 00:13:21.110
So let's say we want to compute two raised to the power of four.

191
00:13:21.560 --> 00:13:24.350
Then you can use this method.

192
00:13:31.440 --> 00:13:31.630
Okay.

193
00:13:31.710 --> 00:13:34.140
So does it return returns 16.

194
00:13:34.710 --> 00:13:35.950
So that's the power.

195
00:13:35.970 --> 00:13:38.790
Now there is also square root.

196
00:13:39.120 --> 00:13:40.830
So it will square root.

197
00:13:41.080 --> 00:13:44.660
It will be as q, r t and it takes a double.

198
00:13:44.670 --> 00:13:48.810
So let's just give our power value, which we just computed the power value.

199
00:13:49.230 --> 00:13:52.110
So square root of 16 will be four.

200
00:13:53.650 --> 00:13:54.690
Similarly, there is also.

201
00:13:54.700 --> 00:13:55.510
Q Broad.

202
00:13:55.900 --> 00:13:57.820
Let's just call it as square root.

203
00:14:02.210 --> 00:14:05.030
So squared off 16 is four.

204
00:14:05.870 --> 00:14:07.400
So there is also cube root.

205
00:14:07.430 --> 00:14:12.800
Now the square root, if you give a negative number, then it would be an invalid operation.

206
00:14:12.950 --> 00:14:16.730
So in that case, it returns something called Nan.

207
00:14:16.760 --> 00:14:23.480
Nan stands for not a number, since this would be an meaningless operation.

208
00:14:23.480 --> 00:14:30.230
So this method would return the special value, double value called NAN, which stands for not a number.

209
00:14:30.470 --> 00:14:33.050
So that's also meaningfully named here.

210
00:14:33.410 --> 00:14:36.210
So if you do this, it will be Nan.

211
00:14:36.230 --> 00:14:39.490
So here, if we hover on this, it gives the description.

212
00:14:39.500 --> 00:14:42.740
So if you go down here, it says the it returns.

213
00:14:42.740 --> 00:14:46.370
The positive square root of a a is the parameter.

214
00:14:46.580 --> 00:14:50.690
But if the argument is Nan, in this case it is Nan.

215
00:14:50.690 --> 00:14:52.940
Then in that case it returns in Nan.

216
00:14:53.420 --> 00:14:56.360
For example, if it is less than zero, sorry.

217
00:14:56.360 --> 00:14:58.250
If it is less than zero, it would return an n.

218
00:14:58.250 --> 00:15:02.420
But if the argument is also a nan, then it will also return nan.

219
00:15:02.720 --> 00:15:07.100
For instance, here, another example of Nan would be.

220
00:15:08.210 --> 00:15:12.740
A 00.0 divided by 0.0.

221
00:15:13.070 --> 00:15:20.210
So any floating point operation which results in an undefined value, then we get a none.

222
00:15:21.030 --> 00:15:24.240
So here, this output of this is none.

223
00:15:25.230 --> 00:15:27.210
So once again, it returns none.

224
00:15:28.080 --> 00:15:31.200
So none as undefined value.

225
00:15:31.440 --> 00:15:32.430
It's not a number.

226
00:15:32.430 --> 00:15:33.630
So just keep that in mind.

227
00:15:33.630 --> 00:15:38.870
So if you do 0.0 divided by 0.0.

228
00:15:38.880 --> 00:15:40.840
So that is a none.

229
00:15:40.860 --> 00:15:43.440
So let me just let's do it this way.

230
00:15:45.170 --> 00:15:48.470
So our double zero divided by 800.

231
00:15:48.980 --> 00:15:54.080
And let's just copy it here and let's actually print this nine here.

232
00:15:55.550 --> 00:15:57.830
It will also print now.

233
00:15:58.580 --> 00:16:00.410
So this is a not a number.

234
00:16:00.650 --> 00:16:01.760
So that's that.

235
00:16:03.050 --> 00:16:05.780
Similarly, there are also logarithmic functions.

236
00:16:06.020 --> 00:16:06.120
Okay.

237
00:16:06.170 --> 00:16:09.050
So let me just say math dot log.

238
00:16:10.270 --> 00:16:15.190
So this is the natural logarithm and log ten is has the base ten here.

239
00:16:15.460 --> 00:16:18.640
So if at all you are interested in finding logarithmic.

240
00:16:19.090 --> 00:16:21.940
If you want to use logarithmic functions, then you can use this.

241
00:16:22.210 --> 00:16:25.190
So I'll just give you a nice, simple, interesting example.

242
00:16:25.210 --> 00:16:29.470
Let's say there is a technology website and it has 100 documents.

243
00:16:29.980 --> 00:16:37.420
Documents could be about any technology, but let's say there is an article here which is about, say,

244
00:16:37.420 --> 00:16:39.280
introduction to machine learning.

245
00:16:39.670 --> 00:16:42.340
Machine learning is a very hot topic now.

246
00:16:42.520 --> 00:16:49.780
So and let's say this document or the Web page, it has this word called deep learning, which is a

247
00:16:49.780 --> 00:16:52.000
very popular machine learning algorithm.

248
00:16:52.180 --> 00:16:58.360
So if this phrase appears in this document, potentially, this is a very important document, very

249
00:16:58.360 --> 00:17:00.370
important keyword for this.

250
00:17:00.430 --> 00:17:07.000
But in order to measure the importance of this keyword within this particular web page, so we can do

251
00:17:07.000 --> 00:17:13.180
this, so 100 would be the total number of Web pages and maybe deep learning.

252
00:17:13.180 --> 00:17:16.750
This keyword appears in only, let's say, eight documents.

253
00:17:17.170 --> 00:17:24.339
So in order to measure the importance of this word within this particular document, so this is a measure

254
00:17:24.339 --> 00:17:34.060
that is used and it's very popular and in search engines and other areas, it's very popularly used

255
00:17:34.060 --> 00:17:37.450
and it's only one metric and it's called as inverse document frequency.

256
00:17:37.630 --> 00:17:43.570
So because my background is in data mining and search, so I have used this many times.

257
00:17:43.570 --> 00:17:46.900
So just, just to inspire you, I'm just giving you this example.

258
00:17:46.900 --> 00:17:53.320
So this is called as IDF, it is typically used in combination with another metric called term frequency.

259
00:17:53.710 --> 00:17:55.420
So this is what it is.

260
00:17:55.420 --> 00:17:58.630
So let me just say this out idea.

261
00:17:59.170 --> 00:18:02.920
So if we run this, so it returns certain value.

262
00:18:02.920 --> 00:18:04.660
So that's the idea of value.

263
00:18:04.930 --> 00:18:10.540
So if at all, we want to extract all the important keywords that a particular document represents.

264
00:18:10.540 --> 00:18:13.330
So this is one metric that can be used for that.

265
00:18:13.720 --> 00:18:15.340
So that's how you would use Logarithmic.

266
00:18:15.340 --> 00:18:17.260
And there are also trigonometric functions.

267
00:18:17.260 --> 00:18:22.020
And I would like you to just explore the math class in the Java API.

268
00:18:22.030 --> 00:18:29.710
So just Google for math and just plug in the latest Java version like Java 14 or whatever is the latest

269
00:18:29.710 --> 00:18:33.040
and you will see the API and you can explore more methods.

270
00:18:33.220 --> 00:18:42.370
Now earlier I said that math class has only static methods and hence there is no point in instantiating

271
00:18:42.370 --> 00:18:42.760
it.

272
00:18:42.940 --> 00:18:46.180
So indeed math class is not intangible here.

273
00:18:46.180 --> 00:18:51.730
So here it gives a compilation error and it says the constructor math is not visible.

274
00:18:51.730 --> 00:18:57.940
So if you go into the math class, so let me just click f three here so we can see that the constructor

275
00:18:57.940 --> 00:19:00.160
has the private access modifier.

276
00:19:00.400 --> 00:19:04.510
So even X constructors can have such access modifiers.

277
00:19:04.510 --> 00:19:09.940
And if you say private, then it would make this particular class non instantiate.

278
00:19:09.940 --> 00:19:15.910
Well in fact there is an item in effective Java, it is an item number four.

279
00:19:15.940 --> 00:19:20.800
It says enforce non instantiate ability with a private constructor.

280
00:19:20.800 --> 00:19:26.440
So that is what this particular class is doing because it is meaningless to create an object of this

281
00:19:26.440 --> 00:19:29.350
because all of the methods are static methods.

282
00:19:29.350 --> 00:19:36.970
So if you are providing such kind of utility class, you can create such kind of private constructor.

283
00:19:37.180 --> 00:19:44.830
For instance, even here in this class, maybe we can say basics for our basics demo class, we can

284
00:19:44.830 --> 00:19:50.380
just say basic demo, and we can have our constructor here and it can be a.

285
00:19:51.420 --> 00:19:52.650
Private constructor.

286
00:19:52.650 --> 00:19:58.050
And if you do that, then the the basics demo class will not be instantiate.

287
00:19:59.070 --> 00:20:01.620
So that's just for your information here.

288
00:20:02.040 --> 00:20:04.890
So that's the private constructor.

289
00:20:05.490 --> 00:20:06.450
So that's about it.

290
00:20:06.450 --> 00:20:08.040
So that's the math class.

291
00:20:08.040 --> 00:20:13.770
And we looked at some very useful methods here and thank you and I will see you in the next lecture.

