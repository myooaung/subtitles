WEBVTT
1
00:00:02.160 --> 00:00:02.920
Hi there.

2
00:00:02.940 --> 00:00:04.200
This is the De La Rue.

3
00:00:04.290 --> 00:00:06.060
Now back to something fundamental.

4
00:00:06.270 --> 00:00:10.410
I just want to add a new comment to local variables coping.

5
00:00:10.800 --> 00:00:16.530
We discuss variable scope in the language basic series in the introductory part of the course and the

6
00:00:16.530 --> 00:00:19.410
lecture there also had the same title variable scope.

7
00:00:19.770 --> 00:00:26.370
There we mentioned that a local variable cannot be shadowed and there is an exception to that statement.

8
00:00:26.400 --> 00:00:33.720
Local variables can be shadowed by variables in a nested class, which can be either an anonymous class

9
00:00:33.720 --> 00:00:34.980
or a local class.

10
00:00:35.010 --> 00:00:37.800
As both of these classes can be declared within a method.

11
00:00:38.400 --> 00:00:43.860
However, the shadow local variables cannot be accessed from within the nested class.

12
00:00:44.400 --> 00:00:45.450
Just keep that in mind.

13
00:00:45.450 --> 00:00:49.050
The shadow local variables cannot be accessed from within the nested class.

14
00:00:49.170 --> 00:00:54.750
Now, this was not mentioned in that introductory lecture series as nested classes were not discussed

15
00:00:54.750 --> 00:00:55.830
at that point of time.

16
00:00:57.560 --> 00:01:00.920
Now, just to recap, let's look at some of the slides from that lecture.

17
00:01:01.370 --> 00:01:07.940
A local variable is accessible from the point of declaration to the end of its block, where a block

18
00:01:07.940 --> 00:01:12.110
can be a method or a constructor or a control flow statement.

19
00:01:13.410 --> 00:01:15.990
Now, here is an example from that same lecture.

20
00:01:16.200 --> 00:01:21.780
Here we have the method fu and the method parameter is P and we can see the scope of P.

21
00:01:22.610 --> 00:01:26.810
And similarly we have the statement and x is equal to zero.

22
00:01:27.020 --> 00:01:30.590
Here X is a local variable and we also can see its scope.

23
00:01:31.100 --> 00:01:33.500
It can also be used in the declaration.

24
00:01:33.530 --> 00:01:34.610
Right next to it.

25
00:01:35.000 --> 00:01:35.360
Right.

26
00:01:35.360 --> 00:01:36.980
And Z is equal to X.

27
00:01:37.700 --> 00:01:44.240
Now within the F block there we can see that we are trying to re declare the variable x and that's not

28
00:01:44.240 --> 00:01:48.220
possible because a local variable cannot be shadowed.

29
00:01:48.560 --> 00:01:53.720
There is already a local variable and that cannot be shadowed by re declaring it in this way.

30
00:01:54.140 --> 00:01:54.350
Right.

31
00:01:54.350 --> 00:01:55.430
So that's the point.

32
00:01:57.200 --> 00:02:02.870
And here is another example where we are trying to shadow a local variable.

33
00:02:02.870 --> 00:02:09.610
So we are trying to re declare it in the first loop in the initialization statement instead of the far

34
00:02:09.620 --> 00:02:09.940
loop.

35
00:02:09.949 --> 00:02:16.220
If we had a nested class then it is possible to re declare x so we can shadow it.

36
00:02:17.690 --> 00:02:23.540
Now this is the example about shadowing a class level variable and we know that here index is equal

37
00:02:23.540 --> 00:02:29.900
to ten is an instance variable and within the method foo we are shadowing it and in order to access

38
00:02:29.900 --> 00:02:35.510
the instance variable within the method, we have to use this reference like in the last statement.

39
00:02:36.140 --> 00:02:42.410
Now if X was instead of an instance variable, if it was a static variable, then we would use the class

40
00:02:42.410 --> 00:02:42.830
name.

41
00:02:43.070 --> 00:02:46.160
Right, and we would use the class name to access X.

42
00:02:46.700 --> 00:02:48.290
So that's about it.

43
00:02:48.290 --> 00:02:55.160
But let's just head over to my editor and we will look at the example that we have seen earlier in an

44
00:02:55.160 --> 00:02:56.960
earlier lecture on local class.

45
00:02:57.350 --> 00:03:01.790
And there we already shadowed we were already shadowing a local variable.

46
00:03:02.270 --> 00:03:03.530
So let's look at that.

47
00:03:05.690 --> 00:03:08.670
So this was the same class data translator.

48
00:03:08.690 --> 00:03:12.000
You may recall it from the local class demo.

49
00:03:12.020 --> 00:03:19.550
So there we had the static method get book as XML and it had these method parameters and here is the

50
00:03:19.550 --> 00:03:20.420
local class.

51
00:03:20.420 --> 00:03:25.070
And within the local class, as you can see, we were using the same variable names.

52
00:03:25.070 --> 00:03:27.680
So we are shadowing these variables.

53
00:03:27.980 --> 00:03:30.500
We are really clearing it here and we are shadowing it.

54
00:03:30.650 --> 00:03:36.530
And these variables cannot be used anymore within the within the nested class, there is no way to access

55
00:03:36.530 --> 00:03:36.920
them.

56
00:03:37.280 --> 00:03:40.070
But if they were not shadowed, then we can use it.

57
00:03:40.070 --> 00:03:41.540
And we already know that.

58
00:03:42.390 --> 00:03:51.270
Now, similarly in Kashgar, we have this particular statement here where we are declaring an anonymous

59
00:03:51.270 --> 00:03:51.690
cluster.

60
00:03:51.720 --> 00:03:53.880
Now, let's go ahead and.

61
00:03:55.070 --> 00:03:59.000
Declare a local variable count equal to zero.

62
00:04:03.340 --> 00:04:05.480
So that's perfectly legal.

63
00:04:05.500 --> 00:04:07.540
We can shadow a local variable.

64
00:04:07.990 --> 00:04:12.010
Now, if it had been some other block, then this is not possible.

65
00:04:12.190 --> 00:04:15.190
Even with lambda expressions, this would not be possible.

66
00:04:15.190 --> 00:04:19.570
Instead of an anonymous class, we would have lambda expressions and lambda expressions will be discussed

67
00:04:19.570 --> 00:04:20.170
later.

68
00:04:20.200 --> 00:04:26.770
Even if it was a lambda expression, then we cannot shadow a local variable from within the lambda expression,

69
00:04:26.770 --> 00:04:29.110
but that will be that we will look at later.

70
00:04:29.140 --> 00:04:34.020
So just wanted to highlight that since it's very fundamental and that's about it.

71
00:04:34.030 --> 00:04:35.440
Thank you and happy coding.

