1
00:00:01,090 --> 00:00:04,570
Now let's focus on another runtime data area which is stuck.

2
00:00:05,230 --> 00:00:08,890
But before doing that, let's review some of the stuff we covered so far.

3
00:00:09,850 --> 00:00:15,070
We started the chapter by looking at loading a class when it is access for the very first time.

4
00:00:15,460 --> 00:00:17,290
Unstudied about the lifetime of a type.

5
00:00:18,280 --> 00:00:20,860
Output of this entire process is a class object.

6
00:00:21,930 --> 00:00:27,000
We learned that class object, as well as any objects created out of it, are stored on the heap.

7
00:00:27,960 --> 00:00:33,120
We also learn that the class data itself, which includes the meta information about the class plus

8
00:00:33,120 --> 00:00:35,610
any method code, will go in the method area.

9
00:00:36,420 --> 00:00:39,870
So we have objects on heap and class data in the method area.

10
00:00:40,720 --> 00:00:46,360
Now as methods of an object or a class that is a static methods are being executed.

11
00:00:46,750 --> 00:00:49,810
Then JVM somehow needs to keep track of those methods.

12
00:00:50,630 --> 00:00:54,230
For example, GM needs to know what the currently executing method is.

13
00:00:55,090 --> 00:00:59,920
Now, if this method invokes another method, then it needs to keep track of that method too.

14
00:01:00,490 --> 00:01:06,250
And when that method finishes its execution, then GM should resume execution of the first method.

15
00:01:07,190 --> 00:01:12,650
All of this information about the methods that are getting invoked and executed will be stored on stack.

16
00:01:13,860 --> 00:01:18,600
Stock will also store the information about local variables in each of the executing methods.

17
00:01:19,730 --> 00:01:24,620
Note that we are only talking about methods that are currently being executed and not the ones that

18
00:01:24,620 --> 00:01:28,670
have either finished execution or the ones that have not yet been invoked.

19
00:01:29,820 --> 00:01:32,010
So let's go ahead and learn about Stack.

20
00:01:32,040 --> 00:01:35,580
It's a very important concept and you must know how Stacks work.

21
00:01:37,140 --> 00:01:42,390
Stock is basically a leaf or data structure that is the last in first out data structure.

22
00:01:42,990 --> 00:01:48,900
In the last lesson, we briefly discussed about what a stock is and it is one of the most fundamental

23
00:01:48,900 --> 00:01:49,890
data structures.

24
00:01:51,430 --> 00:01:57,010
Unlike Heap and Method Area, JVM creates a stack for each newly created thread.

25
00:01:58,070 --> 00:02:02,990
For example, if you consider a web application and if you have two users accessing the application

26
00:02:02,990 --> 00:02:09,889
simultaneously, then each of the users will be served by separate threads and each thread will be given

27
00:02:09,889 --> 00:02:16,040
a separate stack, and the methods that get executed within the thread are trapped inside that stack.

28
00:02:16,990 --> 00:02:20,590
There is no way for one thread to access another thread stack.

29
00:02:21,660 --> 00:02:28,440
Not when a method is invoked, an entity called stack frame or simply just frame representing that method

30
00:02:28,440 --> 00:02:31,740
is created and pushed down to the top of the stack.

31
00:02:31,770 --> 00:02:32,910
As you can see here.

32
00:02:33,960 --> 00:02:39,720
Now, if this method invokes another method, then a new stack frame will be created for that new method,

33
00:02:39,960 --> 00:02:43,830
and that stack frame will also be pushed onto the top of the stack.

34
00:02:44,610 --> 00:02:50,100
Frame holds a method state by holding information such as the local variable values.

35
00:02:50,880 --> 00:02:57,900
Now a frame is popped off the stack when the method invocation completes either normally or abruptly

36
00:02:57,900 --> 00:02:59,520
through some kind of an error.

37
00:03:01,330 --> 00:03:08,530
Let's actually look at an example here we have three methods go foo and bar method go is invoking the

38
00:03:08,530 --> 00:03:11,440
method foo which is in turn invoking the method bar.

39
00:03:12,280 --> 00:03:12,420
No.

40
00:03:12,560 --> 00:03:18,980
Let's have we first invoke the method go so off frame corresponding to method go gets created and will

41
00:03:18,980 --> 00:03:20,060
be pushed onto stack.

42
00:03:20,940 --> 00:03:25,290
Method CO has a local variable x and its value is also maintained on the stack.

43
00:03:26,140 --> 00:03:32,290
Now we say that variable X is in scope and is alive as its method is currently executing.

44
00:03:33,960 --> 00:03:36,210
Next method go is invoking method foo.

45
00:03:36,240 --> 00:03:40,290
And so a new frame for foo is created and pushed on the top of the stack.

46
00:03:41,040 --> 00:03:46,980
Foo has one method parameter y and also another local variable z, and both of them are stored on the

47
00:03:46,980 --> 00:03:47,490
stack.

48
00:03:48,120 --> 00:03:55,410
Now we say that both variables Y and Z are in scope and also allow, while variable X in method go is

49
00:03:55,410 --> 00:03:58,110
still alive but not in scope anymore.

50
00:03:58,740 --> 00:04:01,440
As method go is not the currently executing method.

51
00:04:01,710 --> 00:04:03,120
That is it is not in scope.

52
00:04:04,560 --> 00:04:10,170
Next method bar gets invoked and so a frame corresponding to it will be pushed onto the top of the stack.

53
00:04:10,860 --> 00:04:14,730
Bar has one local variable called edge which is referencing an object.

54
00:04:14,730 --> 00:04:15,290
Hello.

55
00:04:15,930 --> 00:04:23,460
So Variable Edge is alive and in scope now while X, Y and z are alive but not in scope anymore.

56
00:04:24,300 --> 00:04:25,800
Now here is the interesting thing.

57
00:04:26,460 --> 00:04:31,680
Variable Edge is referencing an object, and we know that objects are stored on the heap.

58
00:04:32,460 --> 00:04:37,890
So while Edge is on stack, the object it is referencing will actually be on heap.

59
00:04:38,670 --> 00:04:44,790
So if a local variable is an object reference, then that variable is stored in its own stack frame

60
00:04:44,790 --> 00:04:47,910
while the object it is referencing will be stored on the heap.

61
00:04:48,990 --> 00:04:55,200
Now at some point, method bar finishes its execution and with that its corresponding stock frame will

62
00:04:55,200 --> 00:04:56,280
be popped off the stock.

63
00:04:57,000 --> 00:05:02,970
With that, its local variable edge is considered dead and the object it is referencing to is now considered

64
00:05:02,970 --> 00:05:06,390
abandoned and so will be eligible for garbage collection.

65
00:05:07,240 --> 00:05:14,050
No matter who is on top of Stack and its variables, Y and Z are both in scope once again, while variable

66
00:05:14,050 --> 00:05:16,450
X is still alive but not in scope anymore.

67
00:05:17,580 --> 00:05:23,470
Our next few finishes this execution and it's frame is also popped off the stack and with that both

68
00:05:23,470 --> 00:05:25,750
its variables Y and Z are also gone.

69
00:05:26,730 --> 00:05:31,560
At this point, method goes on top of stack and variable x is again in scope.

70
00:05:32,460 --> 00:05:37,380
Finally method go also finishes and its tack frame is also popped off the stack.

71
00:05:38,460 --> 00:05:40,590
So that's how stacks get populated.

72
00:05:41,250 --> 00:05:47,250
Next, we will delve a little deeper and we will look at some of the data structures is dark frame holes.

