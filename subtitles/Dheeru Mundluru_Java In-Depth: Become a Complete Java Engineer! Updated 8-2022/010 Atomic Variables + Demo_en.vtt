WEBVTT
1
00:00:02.620 --> 00:00:03.469
Hi there.

2
00:00:03.490 --> 00:00:04.720
This is the Toledo.

3
00:00:05.170 --> 00:00:09.040
Now, let's take a look at atomic variables, which were introduced in Java five.

4
00:00:09.640 --> 00:00:16.390
The Java concurrency in practice refers to them as better volatile variables as they offer the same

5
00:00:16.390 --> 00:00:16.720
memory.

6
00:00:16.720 --> 00:00:22.630
Visibility guarantees as volatile variables, but at the same time they also support Atomic City like

7
00:00:22.630 --> 00:00:23.200
locks.

8
00:00:23.800 --> 00:00:28.390
However, with regards to Atomic City, they are constrained to only single variables.

9
00:00:28.720 --> 00:00:33.280
That is, they cannot guard a block of code like the way synchronization does.

10
00:00:33.790 --> 00:00:39.010
Since we are still discussing about memory visibility, this lecture is also related to Java memory

11
00:00:39.010 --> 00:00:39.520
model.

12
00:00:40.000 --> 00:00:42.910
So let's go ahead and see what atomic variables are.

13
00:00:42.940 --> 00:00:45.580
And at the end, we will also do a short demo.

14
00:00:47.330 --> 00:00:53.660
You may recall this example quote from our discussion on race condition here get new ID method is supposed

15
00:00:53.660 --> 00:00:57.050
to return the next ID value, which should be unique.

16
00:00:57.680 --> 00:01:03.560
Recall that ID here is a shared variable between threads, but there's the race condition here as the

17
00:01:03.560 --> 00:01:06.020
increment operation is not atomic.

18
00:01:06.380 --> 00:01:09.320
It involves three sub instructions as we can see here.

19
00:01:09.770 --> 00:01:15.260
So here are two threads can be inside the get new ID method at the same time, and both may read the

20
00:01:15.260 --> 00:01:18.710
same value and thus incrementing the value only once.

21
00:01:19.460 --> 00:01:24.200
Terminology wise, such kind of a failure is referred to as safety failure.

22
00:01:25.000 --> 00:01:29.550
Now here, declaring it as volatile is not going to help with a city.

23
00:01:29.770 --> 00:01:30.350
Right.

24
00:01:30.370 --> 00:01:34.240
We know that volatile can only guarantee memory, visibility.

25
00:01:36.190 --> 00:01:42.700
We know that we can get at it by making get new ID method as synchronized method as we see here.

26
00:01:43.180 --> 00:01:47.500
But the intention here is to perform a simple increment operation.

27
00:01:48.210 --> 00:01:51.960
And synchronisation can be expensive just for doing that.

28
00:01:53.110 --> 00:02:00.100
The main factor for being expensive is the cost incurred in suspension and resumption process when the

29
00:02:00.100 --> 00:02:03.850
lock for the synchronised method is already acquired by some other thread.

30
00:02:04.680 --> 00:02:10.259
So when lock is not available, Threat Scheduler would suspend the thread in context, which would mean

31
00:02:10.259 --> 00:02:16.620
that the thread will be moved into BLOCK State and later it should be brought back into vulnerable state

32
00:02:16.620 --> 00:02:19.080
before moving it back into running state.

33
00:02:19.650 --> 00:02:24.960
So that's a pretty serious overhead just for doing a simple operation such as increment.

34
00:02:25.380 --> 00:02:29.580
And it could be worse if there are several threads contending for the lock.

35
00:02:30.240 --> 00:02:34.680
So it is the thread suspension and rescheduling that is proving to be costly.

36
00:02:35.720 --> 00:02:38.960
Just acquiring and releasing a lock is not much of an issue.

37
00:02:40.540 --> 00:02:43.180
So the solution is to use atomic variables.

38
00:02:43.570 --> 00:02:50.000
The term atomic in atomic variable tells us that the variable has something to do with Atomic City.

39
00:02:50.890 --> 00:02:57.430
Atomic variables are represented by atomic variable classes which are from the package Java dot dot,

40
00:02:57.430 --> 00:03:03.580
concurrent dot atomic and the class of support atomic operations on single variables.

41
00:03:04.690 --> 00:03:11.410
So here we replaced long with atomic long class, which is one of the several atomic classes and get

42
00:03:11.410 --> 00:03:18.310
new ID method now invokes a method called increment and get on the ID variable, which is the increment

43
00:03:18.310 --> 00:03:23.050
operation which involved three sub instructions is performed atomically.

44
00:03:23.500 --> 00:03:25.270
So there is no race condition here.

45
00:03:25.270 --> 00:03:31.330
So when multiple threads access the get new ID method, the increment and get method will ensure that

46
00:03:31.330 --> 00:03:33.490
a unique value is always written.

47
00:03:35.250 --> 00:03:40.680
Good thing about an atomic variable is that it has the same memory semantics as volatile variable and

48
00:03:40.680 --> 00:03:47.040
at the same time it also has the Atomic City benefit of synchronization but without using locks.

49
00:03:47.310 --> 00:03:51.090
That is, there is no overhead of threat, suspension and resumption.

50
00:03:51.780 --> 00:03:55.680
So the atomic variable is safe internally.

51
00:03:55.710 --> 00:04:02.340
Atomic long uses a volatile variable and hence it has the same memory visibility as volatile variable.

52
00:04:02.850 --> 00:04:09.540
In fact, as mentioned earlier, atomic variables are regarded as better volatiles, as they also additionally

53
00:04:09.540 --> 00:04:10.460
support atomic.

54
00:04:12.240 --> 00:04:18.779
Compared to synchronization, atomic variables are fine grained and limit the scope to a single variable

55
00:04:18.779 --> 00:04:20.730
like the ID in this example.

56
00:04:21.209 --> 00:04:25.920
Synchronization, on the other hand, can make a block of code to work atomically.

57
00:04:26.820 --> 00:04:29.130
Due to the way atomic variables are implemented.

58
00:04:29.130 --> 00:04:30.900
They do not involve locks.

59
00:04:31.940 --> 00:04:36.970
So atomic variables do not use locks and hence there is no threat, suspension and resumption.

60
00:04:36.980 --> 00:04:40.910
And they do this by using an approach called compare and swap.

61
00:04:42.570 --> 00:04:48.930
To understand it, let's just consider the actual source code of the increment and method itself, which

62
00:04:48.930 --> 00:04:50.760
is invoked on the atomic variable.

63
00:04:51.610 --> 00:04:58.270
Here we have an infinite loop and within the loop we are first switching the current value of the atomic

64
00:04:58.270 --> 00:05:01.780
variable and we are storing it in the variable current.

65
00:05:02.530 --> 00:05:07.720
We simply use that method for this, which is another method in the atomic long class.

66
00:05:08.510 --> 00:05:14.870
We are done setting the variable next to current plus one and then we are invoking another method compare

67
00:05:15.050 --> 00:05:17.120
set in the atomic long class.

68
00:05:17.510 --> 00:05:24.140
And this method invokes a native method that works atomically and implements an instruction called Compare

69
00:05:24.140 --> 00:05:24.950
and Swap.

70
00:05:24.950 --> 00:05:32.990
See as Compare and Swap first compares the current value which we are passing here to the current value

71
00:05:32.990 --> 00:05:35.990
and the atomic variable at that instance of time.

72
00:05:36.470 --> 00:05:43.070
And if the values match, then it implies that the current value has not been updated by any other thread

73
00:05:43.070 --> 00:05:45.500
since it was read by the current thread.

74
00:05:45.530 --> 00:05:51.500
And so the current atomic variable value will be swapped with the value in the next variable.

75
00:05:52.390 --> 00:05:58.360
So compare and set invocation here returns a true and the next value is returned by the method.

76
00:05:59.270 --> 00:06:05.510
But if the current value passed here was different from the current value in the atomic variable, that

77
00:06:05.510 --> 00:06:11.480
would imply that the current value in atomic variable was updated by some other threat since the time

78
00:06:11.480 --> 00:06:17.720
it was read by this particular threat and due to that swap will not happen and compare and set would

79
00:06:17.720 --> 00:06:18.890
return a false.

80
00:06:19.930 --> 00:06:25.330
With that, the thread would loop again to see if the value can be updated in the next iteration.

81
00:06:26.220 --> 00:06:30.690
So this way, let's keep trying until they're able to increment the value.

82
00:06:31.260 --> 00:06:37.680
And this approach of retrying is much more efficient than the expensive threat, suspension and resumption

83
00:06:37.680 --> 00:06:39.480
that we have with synchronization.

84
00:06:39.960 --> 00:06:45.720
With synchronization, the thread is basically blocked and here there is no blocking.

85
00:06:46.050 --> 00:06:52.740
And hence this kind of an algorithm is referred to as a non blocking algorithm, it's called as a non

86
00:06:52.740 --> 00:06:59.610
blocking algorithm and the technique used here is also referred to as optimistic locking as here.

87
00:06:59.610 --> 00:07:06.720
The value of next variable is computed first based on the optimistic assumption that no other thread

88
00:07:06.720 --> 00:07:09.120
would have already set the same value.

89
00:07:10.070 --> 00:07:11.770
Then the optimistic assumption is true.

90
00:07:11.780 --> 00:07:15.470
The shared memory is updated with next value without locking.

91
00:07:16.160 --> 00:07:20.810
If the assumption is false, the work is lost, but still there is no locking involved.

92
00:07:21.260 --> 00:07:27.110
The traditional locking with synchronization is sometimes referred to as pessimistic locking, since

93
00:07:27.110 --> 00:07:29.510
it is opposite to optimistic locking.

94
00:07:30.170 --> 00:07:35.990
Atomic variables are specifically good for doing things like in this example where we generate unique

95
00:07:35.990 --> 00:07:36.710
numbers.

96
00:07:37.680 --> 00:07:44.010
So as we see the scope of atomic, it is a single variable and that is as fine grained as it can get.

97
00:07:44.490 --> 00:07:48.360
And it also has the memory visibility semantics as volatile variables.

98
00:07:50.440 --> 00:07:56.050
There are 12 atomic variable classes which are divided into four groups scalar arrays, field operators

99
00:07:56.050 --> 00:07:57.580
and compound variables.

100
00:07:59.410 --> 00:08:01.630
Here are the classes that fall under scalar.

101
00:08:01.810 --> 00:08:05.170
We already discussed atomic long and other than atomic long.

102
00:08:05.200 --> 00:08:08.980
We also have atomic integer, atomic boolean and atomic reference.

103
00:08:09.610 --> 00:08:12.040
If at all we use any atomic variable classes.

104
00:08:12.130 --> 00:08:15.760
Probably these scalar classes are the ones we may likely use.

105
00:08:16.390 --> 00:08:21.550
Classes that fall under other groups are not commonly used and hence we will not be discussing it here.

106
00:08:21.550 --> 00:08:25.690
But supplementary notes in the resources section will discuss them briefly.

107
00:08:27.240 --> 00:08:33.270
Under arrays, we have atomic long array, atomic integer array and atomic reference array.

108
00:08:34.020 --> 00:08:39.720
These classes wrap a corresponding array and help in updating array elements atomically.

109
00:08:41.380 --> 00:08:48.070
Under field operators, we have atomic long field operator, atomic integer, field Updater and Atomic

110
00:08:48.070 --> 00:08:49.660
Reference Field Updater.

111
00:08:50.320 --> 00:08:57.400
And these are reflection based utility classes that wrap around corresponding volatile variables and

112
00:08:57.400 --> 00:08:59.710
can perform atomic operations on them.

113
00:09:00.550 --> 00:09:02.680
So they work on volatile variables.

114
00:09:02.980 --> 00:09:08.950
One use case is that for a given shade variable, you would like it to be mostly used as a simple,

115
00:09:08.950 --> 00:09:14.770
volatile variable, but occasionally you would want to perform some atomic operations on them.

116
00:09:15.650 --> 00:09:19.130
For this using scalar atomic classes could be unnecessary.

117
00:09:19.910 --> 00:09:26.000
So you can use this field updated classes only when atomic is required and for the rest of the time

118
00:09:26.000 --> 00:09:28.760
the volatile field would be used as is.

119
00:09:29.420 --> 00:09:33.860
Once again, check out the supplementary notes in the resources section for more details on this.

120
00:09:34.930 --> 00:09:40.780
Finally, under compound variables, we have atomic marker reference and atomic stamp reference.

121
00:09:41.320 --> 00:09:47.620
These classes are used if we want to couple together an object reference with either a boolean flag

122
00:09:47.620 --> 00:09:48.970
or with an integer.

123
00:09:49.360 --> 00:09:52.720
If it is a boolean flag, it would be atomic marker reference.

124
00:09:52.960 --> 00:09:57.010
Otherwise it would be atomic stamp reference in case of integer.

125
00:09:57.160 --> 00:09:59.860
Once again, please refer to the supplementary notes.

126
00:10:00.950 --> 00:10:07.310
Note that both atomic long and Atomic Integer are subclasses of the class number, while the rest are

127
00:10:07.310 --> 00:10:09.410
subclasses of object class.

128
00:10:10.170 --> 00:10:16.260
So that's about atomic variable courses when appropriate, they give you the best of both volatile variables

129
00:10:16.260 --> 00:10:17.970
and locking mechanism.

130
00:10:18.390 --> 00:10:25.980
So the support lock free thread safe programming on single variables with the memory semantics of volatile

131
00:10:25.980 --> 00:10:28.290
variables or synchronization.

132
00:10:29.120 --> 00:10:33.320
Now let's head over to Eclipse to do a short demo of Atomic Integer.

133
00:10:36.370 --> 00:10:36.500
Okay.

134
00:10:36.580 --> 00:10:42.810
For this demo, I created this new class called Meetup Event Simulator in our concurrency package.

135
00:10:42.820 --> 00:10:48.700
And here basically we are going to simulate a meetup event and meetup.com.

136
00:10:49.150 --> 00:10:51.160
So you must have heard of meetup.com.

137
00:10:51.400 --> 00:10:59.080
If not, it's a very popular social networking site and it helps in organizing local group meetings.

138
00:10:59.410 --> 00:11:05.860
And there are such group meetings happening in lots and lots of towns and villages across across the

139
00:11:05.860 --> 00:11:06.400
world.

140
00:11:06.400 --> 00:11:13.540
And these meetups can be in different categories like technology, art, yoga, or any category that

141
00:11:13.540 --> 00:11:14.500
you can think of.

142
00:11:15.070 --> 00:11:18.460
So here we are going to just simulate a single meetup event.

143
00:11:18.460 --> 00:11:24.940
And a meetup event normally has a name, the name of the meetup event and also the number of also the

144
00:11:24.940 --> 00:11:27.910
attendees who are attending the meetup event.

145
00:11:28.480 --> 00:11:33.460
And the attendees, the count of the attendees is captured by this variable count.

146
00:11:33.490 --> 00:11:39.010
So this meetup event is basically a static nested class, a static member class, and here the name

147
00:11:39.010 --> 00:11:41.080
variable captures the name of the meetup event.

148
00:11:41.110 --> 00:11:46.060
And count is for capturing the number of people who are attending the event.

149
00:11:46.450 --> 00:11:52.930
So we are using an atomic integer here and we are initializing it with one because the event itself

150
00:11:52.930 --> 00:11:56.800
has an organizer and we would assume that he or she would be attending it.

151
00:11:57.160 --> 00:12:02.650
So there is a constructor here to initialize the name and we have three methods.

152
00:12:02.650 --> 00:12:06.340
One is attending, the other one is non attending, not attending.

153
00:12:06.340 --> 00:12:12.100
And the third one is something called get count, which gives the the count of the number of attendees.

154
00:12:12.610 --> 00:12:18.550
So in the attending method, if a particular user is going to attend, he or she would invoke this method

155
00:12:18.550 --> 00:12:24.550
attending and the other user can bring along some number of guests.

156
00:12:24.910 --> 00:12:30.490
So we have this parameter guest code, but if the parameter guest count is equal to one, it means that

157
00:12:30.490 --> 00:12:33.700
only the user is going to attend and there are no other guests.

158
00:12:34.330 --> 00:12:40.810
So if guest count is one, we are simply using invoking the increment and get on the count variable

159
00:12:40.810 --> 00:12:41.970
and count variable.

160
00:12:41.980 --> 00:12:46.470
As I said earlier, it is an atomic integer and increment and get.

161
00:12:46.480 --> 00:12:48.520
We already discussed it in the lecture.

162
00:12:49.480 --> 00:12:56.970
In the slides and if guest count is greater than one, then we are invoking another method called add

163
00:12:56.970 --> 00:12:57.900
and get.

164
00:12:58.560 --> 00:13:00.960
So the name is very obvious here.

165
00:13:01.020 --> 00:13:06.550
It's going to add this guest count to the current value in count and would return that value.

166
00:13:06.570 --> 00:13:11.970
So both of them would return an int value here because it is an atomic integer.

167
00:13:12.270 --> 00:13:15.600
And now coming to not attending it does the exact opposite.

168
00:13:15.630 --> 00:13:22.680
So if the user chooses to not attend, so initially he or she might have this to attend, but then later

169
00:13:22.680 --> 00:13:28.260
they may want to withdraw their attendance, in which case they would invoke this method and pass the

170
00:13:28.290 --> 00:13:28.810
guest count.

171
00:13:28.830 --> 00:13:34.620
Also, initially, they must have they must have said that they are going to come with some number of

172
00:13:34.620 --> 00:13:35.010
guests.

173
00:13:35.010 --> 00:13:41.050
So when they are withdrawing, they also have to specify the same count, the guest count.

174
00:13:41.070 --> 00:13:45.780
So if guest count is equal to one, we are invoking decrement on get here.

175
00:13:45.780 --> 00:13:51.780
When in attending we were invoking increment and get and here it is decrement and get and f count guess

176
00:13:51.840 --> 00:13:53.310
count is greater than one.

177
00:13:53.610 --> 00:13:56.640
Then we are simply using this logic here.

178
00:13:56.640 --> 00:14:00.790
So we have the updated field here and we are getting the current value count.

179
00:14:00.800 --> 00:14:06.780
Don't get we already discussed this when in the in the lecture slides when we were discussing about

180
00:14:06.780 --> 00:14:08.040
increment and get.

181
00:14:08.040 --> 00:14:09.960
So we looked at the source code.

182
00:14:09.960 --> 00:14:14.190
So this one is also pretty similar to that to the source code of increment.

183
00:14:14.190 --> 00:14:21.780
And so here we are getting the current count and the new count which would be current count minus guest

184
00:14:21.780 --> 00:14:22.710
count, right?

185
00:14:22.740 --> 00:14:29.100
So current count is the current count of the number of attendees and we and here the user is invoking,

186
00:14:29.100 --> 00:14:29.940
not attending.

187
00:14:29.940 --> 00:14:32.130
So we need to subtract guest count.

188
00:14:32.130 --> 00:14:33.390
So that's what we are doing here.

189
00:14:33.390 --> 00:14:39.000
So that would be the new count and we are invoking the compare and set method and we are passing both

190
00:14:39.000 --> 00:14:41.550
current count and the new count.

191
00:14:41.760 --> 00:14:48.930
And we know that it uses the compare and swap approach to update the value and we know that it is also

192
00:14:48.930 --> 00:14:49.620
lock free.

193
00:14:50.650 --> 00:14:54.850
And get corn simply returns a current value of the count.

194
00:14:55.600 --> 00:15:01.390
Now we have the main method here and we are instantiating meetup event and we are just naming it as

195
00:15:01.390 --> 00:15:03.280
the Boston Java User Group.

196
00:15:03.310 --> 00:15:09.260
Java user groups are very popular user groups, meetup groups across across the world.

197
00:15:09.280 --> 00:15:14.260
So even your city might be having one Java user group and you should definitely join it.

198
00:15:14.410 --> 00:15:21.070
So this is for Boston and we are calling this variable as Jack Jack Boston jog for Java User Group and

199
00:15:21.070 --> 00:15:25.720
we are creating three threads user one, user two and user three.

200
00:15:25.990 --> 00:15:28.900
And here we are instantiating rentable.

201
00:15:28.900 --> 00:15:36.340
So this is the task and here we are saying this particular user is going to attend with three guests

202
00:15:36.340 --> 00:15:42.130
for Guess it says four, but one of them is the user itself and here we are printing the name of the

203
00:15:42.130 --> 00:15:45.790
thread and also the end, the current count value.

204
00:15:45.790 --> 00:15:50.200
So we are invoking the get count method and we are doing the same thing for user two.

205
00:15:50.200 --> 00:15:54.520
But here initially we are attending and then the user is withdrawing here.

206
00:15:54.520 --> 00:15:57.850
So he's invoking the not attending and passing the same value.

207
00:15:57.850 --> 00:15:58.330
Three.

208
00:15:59.310 --> 00:16:03.630
And finally, the third user is simply attending passing the one, the value one.

209
00:16:03.630 --> 00:16:09.710
So it would invoke the increment and get method and the not attending.

210
00:16:09.720 --> 00:16:12.030
When we pass three, it's going to.

211
00:16:13.410 --> 00:16:16.620
Invoke this logic here in not attending.

212
00:16:17.570 --> 00:16:18.170
And.

213
00:16:20.720 --> 00:16:25.640
And in this case, when we are in working, attending and we are passing the value three, it would

214
00:16:26.000 --> 00:16:29.270
it would invoke the ad and get method, right.

215
00:16:29.510 --> 00:16:35.060
So for user three, we are only passing one, in which case it would it would invoke increment and get.

216
00:16:35.450 --> 00:16:41.660
So those are the three users and then we are also naming them and then we are starting user one and

217
00:16:41.660 --> 00:16:43.750
then we are sleeping for 1/2.

218
00:16:43.760 --> 00:16:50.330
Then in working, start on user to sleeping for 2 seconds and invoking user three and sleeping for another

219
00:16:50.330 --> 00:16:50.990
2 seconds.

220
00:16:50.990 --> 00:16:53.480
And finally, we are getting the final count.

221
00:16:53.690 --> 00:16:56.990
So let me just go ahead and run this here.

222
00:16:56.990 --> 00:17:02.480
The sleep method is here and within the sleep method we are actually sleeping that we are making the

223
00:17:02.480 --> 00:17:04.420
threat to sleep set.

224
00:17:07.270 --> 00:17:08.829
This is the output and we are done.

225
00:17:08.829 --> 00:17:15.520
So initially there was one user for the organiser and then user one is adding four users, so it became

226
00:17:15.520 --> 00:17:19.119
five, then user two is adding three, so it became eight.

227
00:17:19.270 --> 00:17:22.720
But then user two is also withdrawing so it doesn't want to attend.

228
00:17:22.720 --> 00:17:29.470
So it came back to five, so it added three and then it subtracted three and user three is not bringing

229
00:17:29.470 --> 00:17:32.680
any gas, so we are just incrementing by one.

230
00:17:32.920 --> 00:17:35.920
So the final attendance is six, so that's about it.

231
00:17:35.920 --> 00:17:37.570
So that's the atomic integer.

232
00:17:37.570 --> 00:17:43.750
Atomic Long is also very similar to that and you can also check out the other classes in the package

233
00:17:43.750 --> 00:17:46.330
java dot dot com current atomic.

234
00:17:46.510 --> 00:17:50.620
And you can also check out the supplementary nodes and this code will be available in the resources

235
00:17:50.620 --> 00:17:51.370
section too.

236
00:17:51.640 --> 00:17:53.650
Thank you and happy coding.

