WEBVTT
1
00:00:01.180 --> 00:00:01.990
Hi there.

2
00:00:02.020 --> 00:00:03.280
This is the model room.

3
00:00:03.490 --> 00:00:10.540
In the last lecture, we learn that every enum is essentially a class which extends the class linked

4
00:00:10.570 --> 00:00:11.080
enum.

5
00:00:11.470 --> 00:00:16.450
In this lecture, we will learn about this enum class and we will also do a demo where we will invoke

6
00:00:16.450 --> 00:00:17.650
some of its methods.

7
00:00:19.530 --> 00:00:21.900
You may recall the slide from the previous lecture.

8
00:00:22.200 --> 00:00:29.420
We have the book genre and upon completion it gets translated to a regular class which extends Java

9
00:00:29.790 --> 00:00:30.440
language.

10
00:00:31.470 --> 00:00:37.560
We also discuss the two static methods, values and value of which are inserted by the compiler to learn

11
00:00:37.560 --> 00:00:39.510
about enum class and its methods.

12
00:00:39.540 --> 00:00:43.140
Let's actually head over to the Java Dock of enum class.

13
00:00:45.760 --> 00:00:48.820
Here we are in the API dog of the enum class.

14
00:00:48.820 --> 00:00:57.340
So enum class is here in the Java Lang package and it implements two interfaces compatible and realizable.

15
00:00:58.210 --> 00:00:59.890
So let's just.

16
00:01:00.950 --> 00:01:01.790
Scroll down.

17
00:01:02.540 --> 00:01:08.630
And here is the constructor in a constructor which takes in, which takes a name and ordinal.

18
00:01:09.080 --> 00:01:11.320
And here are some of these methods.

19
00:01:11.330 --> 00:01:18.200
And we know that these methods can be invoked on an enum constant in constants as part of enum type.

20
00:01:18.200 --> 00:01:21.650
And on each enum constant, we can invoke these methods.

21
00:01:22.690 --> 00:01:29.580
And it scroll down so since it implements compatible so we it also overwrites the compared to method.

22
00:01:29.590 --> 00:01:35.140
So this will be useful for comparing one enum constant with another enum constant.

23
00:01:35.530 --> 00:01:37.870
So we will we will look at that in our demo two.

24
00:01:38.230 --> 00:01:40.840
And first, let's click on this method called Ordinal.

25
00:01:41.530 --> 00:01:48.580
So it's ordinal is a final method, which means that it should not be overridden in a subclass, and

26
00:01:48.580 --> 00:01:51.280
subclass would be an enum type itself.

27
00:01:51.370 --> 00:01:58.100
So what that means is enum type can also have methods, it can have behavior and it can have state.

28
00:01:58.120 --> 00:02:01.690
And that is something we will look at in one of the follow up lessons.

29
00:02:01.990 --> 00:02:04.540
But this particular method should not be overridden.

30
00:02:04.540 --> 00:02:07.240
And hence it is a final method.

31
00:02:07.510 --> 00:02:12.070
And it says it returns the ordinal of this enumeration constant.

32
00:02:12.310 --> 00:02:16.980
So this particular method, as we know, will be invoked on an enum constant.

33
00:02:16.990 --> 00:02:23.200
So it would return the ordinal of this enum constant, which is nothing but the position in its enum

34
00:02:23.200 --> 00:02:29.500
declaration, where the initial constant is assigned an ordinal of zero.

35
00:02:29.920 --> 00:02:33.550
So the first declared enum constant will have an ordinal of zero.

36
00:02:34.030 --> 00:02:35.050
So it is zero based.

37
00:02:35.560 --> 00:02:38.770
And it says most programmers will have no use for this method.

38
00:02:38.770 --> 00:02:40.330
So you may never use this.

39
00:02:40.420 --> 00:02:46.940
It is designed for use for use by sophisticated enum based data structures such as enum set and in a

40
00:02:46.960 --> 00:02:47.500
map.

41
00:02:47.800 --> 00:02:50.200
So these are two data structures that are enum based.

42
00:02:50.590 --> 00:02:53.410
We may cover these data sectors or we may not.

43
00:02:53.440 --> 00:02:56.020
So that is something I will decide on.

44
00:02:56.530 --> 00:02:58.270
But there are these two data structures.

45
00:02:58.620 --> 00:03:01.230
And normally you would not invoke this method.

46
00:03:01.240 --> 00:03:03.070
So that's the ordinal method.

47
00:03:03.460 --> 00:03:06.150
Then there is the name method.

48
00:03:06.160 --> 00:03:07.210
Let's click on that.

49
00:03:07.240 --> 00:03:12.970
Name method is also final and it returns the name of this enum constant.

50
00:03:13.270 --> 00:03:17.500
And it is exactly as declared in its enum declaration.

51
00:03:17.530 --> 00:03:20.050
If it is harder, it will be just harder.

52
00:03:20.350 --> 00:03:24.610
So that would be the name of the name of the enum Constant.

53
00:03:25.660 --> 00:03:31.150
And it also says most programmers should use the two string method in preference to this, as the two

54
00:03:31.150 --> 00:03:34.570
string method may return a more user friendly name.

55
00:03:35.110 --> 00:03:36.870
So let's look at what two string is.

56
00:03:36.880 --> 00:03:38.450
Here it is two string method.

57
00:03:38.470 --> 00:03:41.320
So we know that object class has the two string method.

58
00:03:41.320 --> 00:03:43.030
So it is being overridden here.

59
00:03:43.390 --> 00:03:48.730
So it says returns the name of this enum constant as contained in the declaration.

60
00:03:48.730 --> 00:03:53.950
So by default, if you look at the source code, it would this method actually invokes the name method,

61
00:03:54.490 --> 00:04:01.420
but then you might want to display a more customized name for the enum constant, in which case you

62
00:04:01.420 --> 00:04:03.760
can override it and you can return that.

63
00:04:03.760 --> 00:04:05.620
You can return the customized name.

64
00:04:06.490 --> 00:04:10.690
So this method may be overridden, though it typically isn't necessary or desirable.

65
00:04:10.690 --> 00:04:15.820
So typically you would just access to string method, in which case it just accesses the name method

66
00:04:15.820 --> 00:04:19.570
and you get the name of the constant or you can directly access the name method to.

67
00:04:19.870 --> 00:04:27.100
But if you have to if you want to have the name in a more customized way, then you can probably override

68
00:04:27.100 --> 00:04:29.620
this method and you can return that customized name.

69
00:04:30.310 --> 00:04:36.610
So it says an enum type should override this method when a more programmer friendly string string exists.

70
00:04:37.480 --> 00:04:39.310
So that's the two string method.

71
00:04:40.120 --> 00:04:43.120
Then there is the get declaring class.

72
00:04:43.120 --> 00:04:49.900
So this since this is being invoked on an enum constant and the declaring class would be the enum type

73
00:04:49.900 --> 00:04:53.770
itself, the enum type inside which the in a constant is declared.

74
00:04:53.770 --> 00:04:56.860
So it would return that and we will also look at that in the demo.

75
00:04:57.400 --> 00:05:01.180
And other than that, there is this value of method.

76
00:05:01.780 --> 00:05:05.890
So value of method is basically taking enum type.

77
00:05:05.890 --> 00:05:13.390
So the class object corresponding to enum type and the enum constants name as a string and it would

78
00:05:13.390 --> 00:05:16.540
return the enum constant itself.

79
00:05:16.780 --> 00:05:19.180
And so that's what this method says.

80
00:05:19.180 --> 00:05:22.930
It returns the enum constant of the specified enum type.

81
00:05:22.930 --> 00:05:29.980
So when it says specified it means that it would be this enum type with the specified name and the name

82
00:05:29.980 --> 00:05:31.480
would be the name of the constant.

83
00:05:31.780 --> 00:05:33.700
Here it is, the name of the constant return.

84
00:05:34.120 --> 00:05:40.270
So the name must match exactly an identifier used to declare an enum constant in this in this type.

85
00:05:41.230 --> 00:05:48.940
Now here it is suggested that instead of this you can actually use the static method value of which

86
00:05:48.940 --> 00:05:50.740
is inside the enum type.

87
00:05:50.980 --> 00:05:53.530
We looked at the value of method and the values method.

88
00:05:53.530 --> 00:05:54.460
We discussed them.

89
00:05:54.850 --> 00:05:57.700
So it says that we can instead invoke that method.

90
00:05:57.700 --> 00:06:02.620
So value of will take the name of the enum constant and it would return the enum constant.

91
00:06:02.620 --> 00:06:10.360
And since it's a static method, you can invoke it directly on the enum type itself and values method.

92
00:06:10.360 --> 00:06:16.480
We already know it returns an array of the enum constants and we will also look at that in our demo.

93
00:06:16.960 --> 00:06:17.770
So that's it.

94
00:06:17.770 --> 00:06:23.260
And there are a bunch of methods that are overridden here, like the equals method.

95
00:06:23.290 --> 00:06:29.470
Then there is the hashCode method and the two string method and the clone method.

96
00:06:29.470 --> 00:06:31.090
So let's look at the clone method.

97
00:06:31.090 --> 00:06:34.060
It says it throws clone, not supported exception.

98
00:06:34.750 --> 00:06:40.870
And this is because this is an enum constant and enum constant is a singleton.

99
00:06:41.260 --> 00:06:48.550
So it is declared a static final and each enum constant is a singleton and whenever the enum is access

100
00:06:48.550 --> 00:06:49.660
for the very first time.

101
00:06:49.660 --> 00:06:57.670
So those enum constants will also be initialized and they have a singleton status and we do not want

102
00:06:57.670 --> 00:06:58.750
a clone of it.

103
00:06:58.810 --> 00:07:04.960
So that's why it throws this exception if this particular method is invoked clone as a method and object

104
00:07:04.960 --> 00:07:05.500
class.

105
00:07:05.500 --> 00:07:10.180
So this guarantees that enum are never cloned, which is necessary, which is necessary to preserve

106
00:07:10.180 --> 00:07:11.530
their singleton status.

107
00:07:11.740 --> 00:07:12.940
That's the clone method.

108
00:07:13.180 --> 00:07:20.140
And the other methods are also there, like the equals method, which overrides the equals PN in the

109
00:07:20.140 --> 00:07:25.540
object class, and there is the hashCode method and all of these methods.

110
00:07:25.540 --> 00:07:31.870
So there if you click on hashCode, it would just be a final method, which means that it is preventing

111
00:07:31.870 --> 00:07:37.750
the subtype to override this method, and it simply accesses the hashCode version in the object class.

112
00:07:37.750 --> 00:07:43.990
So it would say super dot hashCode, but it does not want this particular method to be overridden in

113
00:07:43.990 --> 00:07:47.740
a subclass and hence it is explicitly declared as final.

114
00:07:48.070 --> 00:07:53.800
It is overriding the hash code in the object class, but it doesn't want its subtypes to override it

115
00:07:53.800 --> 00:07:55.510
and hence it is declared as final.

116
00:07:55.930 --> 00:07:57.010
So that's about it.

117
00:07:57.010 --> 00:08:02.500
Let's actually head over to our editor and let's invoke some of these methods.

118
00:08:04.840 --> 00:08:04.990
Okay.

119
00:08:05.110 --> 00:08:07.000
Here we are in the demo project.

120
00:08:07.000 --> 00:08:10.300
And within this project a new package has been created.

121
00:08:10.300 --> 00:08:12.280
It's called Semantic Squared.

122
00:08:13.210 --> 00:08:19.080
And within this package let's create our first enum and let's just create the genre enum.

123
00:08:19.360 --> 00:08:26.680
So under new we have this option called enum so we can just click this or we can also click on class,

124
00:08:26.680 --> 00:08:32.650
which would create a class, but then we would have to replace the keyword class with the keyword enum.

125
00:08:32.890 --> 00:08:36.549
But since we have this option enum, so let's just click on this.

126
00:08:37.090 --> 00:08:37.750
And.

127
00:08:38.850 --> 00:08:39.450
Let's see a book.

128
00:08:39.600 --> 00:08:40.140
Andre.

129
00:08:41.360 --> 00:08:41.950
Okay.

130
00:08:41.960 --> 00:08:46.810
So it is Public Enemy book genre and it is saved as book genre or Java.

131
00:08:46.970 --> 00:08:48.500
So that's the enum type.

132
00:08:48.500 --> 00:08:55.670
So let's go ahead and add our enum constants and let's add those two enum constants, biography and

133
00:08:55.670 --> 00:08:56.120
horror.

134
00:08:56.120 --> 00:08:57.080
And that should do.

135
00:08:58.740 --> 00:08:59.340
Coma.

136
00:09:01.370 --> 00:09:01.970
Carter.

137
00:09:02.540 --> 00:09:05.330
So this would be the most basic enum.

138
00:09:05.900 --> 00:09:10.260
But for this demo, we wanted to test the methods in Enum.

139
00:09:10.280 --> 00:09:10.730
Right.

140
00:09:10.730 --> 00:09:14.880
And those methods will be invoked on these enum constants.

141
00:09:15.470 --> 00:09:19.280
And in order to do that, we can add a main method.

142
00:09:19.280 --> 00:09:21.890
So an enum can have a main method.

143
00:09:21.890 --> 00:09:26.720
So enum can have methods, so it can have static methods and it can also have instance methods.

144
00:09:27.020 --> 00:09:28.430
And we will look at that later.

145
00:09:28.430 --> 00:09:30.680
But for now, let's add a main method.

146
00:09:31.570 --> 00:09:37.630
So if you want to add anything else other than the constants, then we need to end these constants with

147
00:09:37.630 --> 00:09:38.830
an semicolon.

148
00:09:39.370 --> 00:09:45.280
But if there is nothing else, if the enum has only the constants, then we don't need this.

149
00:09:45.910 --> 00:09:46.970
Let's do this.

150
00:09:46.990 --> 00:09:50.770
And let me go ahead and paste some code here.

151
00:09:50.770 --> 00:09:52.000
So this is the code.

152
00:09:52.930 --> 00:09:54.250
So this is the main method.

153
00:09:54.250 --> 00:09:56.920
The regular main method, like in the regular class.

154
00:09:57.460 --> 00:10:00.260
And here we are iterating.

155
00:10:00.280 --> 00:10:03.250
So we have this first statement and here we are saying book genre.

156
00:10:03.280 --> 00:10:04.720
Book genre is this type.

157
00:10:04.720 --> 00:10:11.290
And we are invoking the values method and the values method we know returns an array of these two constants.

158
00:10:11.590 --> 00:10:12.180
Right.

159
00:10:12.190 --> 00:10:13.870
And the type would be book genre.

160
00:10:13.900 --> 00:10:21.490
So this is what we have and we are invoking the different methods in the in the enum class on each of

161
00:10:21.490 --> 00:10:26.680
the constants in the first iteration, it would, it would be biography and in the second iteration

162
00:10:26.680 --> 00:10:27.610
it would be harder.

163
00:10:27.910 --> 00:10:32.320
And here we are saying the name and this is a print statement.

164
00:10:32.320 --> 00:10:34.330
So it would invoke the two string method.

165
00:10:34.480 --> 00:10:38.350
So it would invoke the two string method in the enum class.

166
00:10:38.350 --> 00:10:45.160
And here we are invoking name and here we are invoking ordinal and the get declaring class.

167
00:10:45.160 --> 00:10:46.780
So which would be book genre?

168
00:10:47.140 --> 00:10:53.260
And we are comparing the current constant with book genre horror.

169
00:10:53.950 --> 00:10:56.230
And here is an equals comparison.

170
00:10:56.560 --> 00:10:57.850
So that's all it is.

171
00:10:57.850 --> 00:11:00.400
And let me just go ahead and run this.

172
00:11:01.130 --> 00:11:03.650
Here we are both the constants.

173
00:11:03.800 --> 00:11:08.870
So the first one is biography and we get that by invoking the two string method.

174
00:11:09.260 --> 00:11:15.680
Then when we invoke the name, it was once again biography because the two string method name name is

175
00:11:15.680 --> 00:11:16.780
actually biography.

176
00:11:16.790 --> 00:11:23.150
And the two string method also internally uses the name method unless we overwrite it within this particular

177
00:11:23.180 --> 00:11:31.100
enum type so we can override the E and the two string method in the in the enum class by writing a method

178
00:11:31.100 --> 00:11:34.760
here called two string somewhere here or here.

179
00:11:34.880 --> 00:11:41.420
So and the ordinal value is zero during the first iteration because biography has a ordinal zero and

180
00:11:41.420 --> 00:11:43.360
the get declaring class is basically book.

181
00:11:43.400 --> 00:11:49.220
John Ray So the fully qualified name is displayed and compared to method, we are doing a comparison

182
00:11:49.220 --> 00:11:51.470
between biography and horror.

183
00:11:51.770 --> 00:11:54.920
So a minus one is returned by the compared to method.

184
00:11:54.920 --> 00:11:55.670
We know that.

185
00:11:56.420 --> 00:12:00.110
And when it does an equals it would be false.

186
00:12:00.380 --> 00:12:03.830
And during the second iteration it's just the same thing.

187
00:12:03.830 --> 00:12:04.310
Horror.

188
00:12:04.310 --> 00:12:08.270
Horror for name ordinal would be one and the declaring class would be the same.

189
00:12:08.270 --> 00:12:12.590
Declaring class and the compared to method would return a zero.

190
00:12:12.590 --> 00:12:18.380
Because we are comparing horror with horror itself and the equals method would return a true.

191
00:12:19.430 --> 00:12:23.780
So those are the methods and that's about it.

192
00:12:24.680 --> 00:12:25.940
For this demo.

193
00:12:26.090 --> 00:12:27.340
So that's about it.

194
00:12:27.350 --> 00:12:31.660
And this particular code is available in the resources section.

195
00:12:31.670 --> 00:12:33.050
And thank you.

