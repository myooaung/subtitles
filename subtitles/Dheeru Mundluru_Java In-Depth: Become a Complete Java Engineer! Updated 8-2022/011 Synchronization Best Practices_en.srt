1
00:00:02,040 --> 00:00:02,940
Hi there.

2
00:00:02,969 --> 00:00:04,210
This is the Rue.

3
00:00:04,560 --> 00:00:09,450
Now, let's take a look at some best practice rules when it comes to using synchronization.

4
00:00:09,840 --> 00:00:12,870
Many of the suggestions come from the effective Java book.

5
00:00:14,630 --> 00:00:17,650
We already discussed this role, but it's very important.

6
00:00:17,660 --> 00:00:19,400
And so let's discuss it one more time.

7
00:00:20,060 --> 00:00:24,140
The rule is we need to use synchronization everywhere.

8
00:00:24,140 --> 00:00:26,210
The shared mutable variable is used.

9
00:00:27,320 --> 00:00:33,290
And we also looked at this bank account example involving John and Anita, whose threads share a single

10
00:00:33,290 --> 00:00:34,490
bank account object.

11
00:00:35,370 --> 00:00:41,370
We discuss the consequences when only make the doll method is synchronized but not the get balanced

12
00:00:41,370 --> 00:00:41,910
method.

13
00:00:42,760 --> 00:00:48,280
They said that John Thread may execute meg withdrawal method due to which there would be a new balance

14
00:00:48,280 --> 00:00:48,790
amount.

15
00:00:49,450 --> 00:00:55,570
However, Anita's thread, which subsequently accesses the get balance method, might still see the

16
00:00:55,570 --> 00:00:59,350
old balance value as get balance was not synchronised.

17
00:01:00,220 --> 00:01:02,320
So there is a lack of threat coordination.

18
00:01:02,320 --> 00:01:09,010
And to avoid this scenario, we need to ensure that we are synchronizing every where the balance variable

19
00:01:09,010 --> 00:01:09,580
is used.

20
00:01:10,150 --> 00:01:14,980
So due to that, the get balance method has to be synchronized as we see here.

21
00:01:16,750 --> 00:01:22,210
And here is another related rule that was already discussed but is included here just for the sake of

22
00:01:22,210 --> 00:01:23,050
completeness.

23
00:01:23,440 --> 00:01:28,750
The rule says use same lock when guarding the same shade mutable variable.

24
00:01:29,320 --> 00:01:34,630
That is, do not guard a variable using one lock at one place and using some other lock at some other

25
00:01:34,630 --> 00:01:35,200
place.

26
00:01:36,830 --> 00:01:39,830
And here is the example that we used when discussing this rule.

27
00:01:40,340 --> 00:01:45,650
So once again, it is the bank account example and we have the synchronized make withdrawal method.

28
00:01:45,650 --> 00:01:52,310
And we also have another method called deposit, which uses a synchronized block and is guarding the

29
00:01:52,310 --> 00:01:55,610
same balance variable as some deposit is being made.

30
00:01:56,150 --> 00:02:01,700
Now the synchronized method make withdrawal, as we know, uses bank account objects lock.

31
00:02:02,180 --> 00:02:05,750
That is the lock of the object on which the method has been invoked.

32
00:02:06,410 --> 00:02:12,290
However, the deposit method is using a string object reference as the lock and that should not be done.

33
00:02:12,920 --> 00:02:18,080
So two different locks are being used to guard the same variable which is being shared between the two

34
00:02:18,080 --> 00:02:18,620
threads.

35
00:02:19,070 --> 00:02:21,350
So the effect of synchronization is lost.

36
00:02:21,800 --> 00:02:27,860
That is John and Anita Stretch can be using synchronized stuff concurrently and the outcome may not

37
00:02:27,860 --> 00:02:28,970
be as desired.

38
00:02:29,570 --> 00:02:35,240
Now, when we discuss this example earlier, we did not discuss memory visibility at that point of time.

39
00:02:36,230 --> 00:02:42,260
At least the happens before relationship will not exist between the two actions that are using different

40
00:02:42,260 --> 00:02:49,880
locks and the actions being invocation of make withdrawal and deposit by two different threats concurrently.

41
00:02:50,970 --> 00:02:54,930
Due to this, it is likely to encounter the memory visibility issue.

42
00:02:56,800 --> 00:03:03,730
Here is another rule which says If a method modifies a static field, you must synchronize access to

43
00:03:03,730 --> 00:03:08,500
this field, even if method is typically used only by a single thread.

44
00:03:09,440 --> 00:03:14,840
The thing to note here is your code may be accessing the static field from a single thread.

45
00:03:15,670 --> 00:03:21,460
However, this is a static field and there will only be a single version per JVM.

46
00:03:21,910 --> 00:03:28,090
And in a web application like environment, we may have tons of users accessing the system at the same

47
00:03:28,090 --> 00:03:34,600
time, and the threads representing those users should have a consistent view of that static field.

48
00:03:35,350 --> 00:03:42,190
So the static field is going to be accessible by all those different threads of the same static filter.

49
00:03:42,430 --> 00:03:48,820
So even though the static field is being accessed from a single thread as per your design, the underlying

50
00:03:48,820 --> 00:03:54,760
framework which is the web application environment, could still be multithreaded and hence we need

51
00:03:54,760 --> 00:03:56,410
to be aware of that fact.

52
00:03:56,830 --> 00:03:58,480
And so we should follow this rule.

53
00:04:00,210 --> 00:04:03,720
And the next rule says synchronise only what is needed.

54
00:04:04,410 --> 00:04:07,350
So it recommends keeping the synchronize blocks small.

55
00:04:08,010 --> 00:04:14,490
That way we minimize the waiting time for other threats that are suspended due to the unavailability

56
00:04:14,490 --> 00:04:15,210
of the lock.

57
00:04:15,840 --> 00:04:21,089
Also, if there are any time consuming activities in your synchronize blocks, then you should see if

58
00:04:21,089 --> 00:04:26,160
they can be moved out of the synchronized blocks, but without affecting their safety.

59
00:04:26,430 --> 00:04:27,540
That's important.

60
00:04:29,290 --> 00:04:35,140
Next rule is item 67 from affective Java, which says avoid excessive synchronization.

61
00:04:36,430 --> 00:04:41,590
The reason is there are some costs associated with synchronization and let's review some of them.

62
00:04:41,890 --> 00:04:47,320
First reason is threat suspension and resumption process, which is expensive, and we already know

63
00:04:47,320 --> 00:04:48,070
about that.

64
00:04:49,320 --> 00:04:55,770
And there is also some cost associated with lock acquisition and release too, although it is less expensive

65
00:04:55,770 --> 00:04:57,810
than suspension and resumption.

66
00:04:59,550 --> 00:05:05,520
Now with multiple threads sharing multiple data, we need to ensure that there is proper inter thread

67
00:05:05,520 --> 00:05:08,730
coordination for consistent memory visibility.

68
00:05:09,300 --> 00:05:11,490
So that would affect the performance to.

69
00:05:13,420 --> 00:05:19,480
Over synchronization also limits GM's ability to perform code optimization.

70
00:05:20,200 --> 00:05:25,030
We know that Git compiler plays a part in improving the performance at runtime.

71
00:05:26,060 --> 00:05:29,330
And one of the things it does is refer to as hoisting.

72
00:05:31,240 --> 00:05:37,090
For instance, you may recall this piece of code from the stop thread example during our discussion

73
00:05:37,090 --> 00:05:38,680
on volatile variables.

74
00:05:39,310 --> 00:05:44,980
The example was about the main thread stopping a second thread which had this wild loop, and the main

75
00:05:44,980 --> 00:05:51,760
thread would try to stop the second thread by setting the stop variable to to stop as a mutable variable

76
00:05:51,760 --> 00:05:53,290
shared between the two threads.

77
00:05:53,650 --> 00:06:00,820
Now, in the absence of synchronization or the stop variable not being declared as volatile, this code

78
00:06:01,060 --> 00:06:07,660
could be optimized in this way by the compiler, and this process is known as hoisting.

79
00:06:08,440 --> 00:06:12,790
Here the variable stop is set to be hoisted out of the while loop.

80
00:06:12,970 --> 00:06:19,750
A stop is not modified within the loop and moreover, due to lack of synchronization or since the variable

81
00:06:19,750 --> 00:06:26,860
is not volatile, git compiler would simply assume that no other thread will also change its value,

82
00:06:27,490 --> 00:06:33,820
so it would safely move the variable out of the loop and the resulting code will loop faster as there

83
00:06:33,820 --> 00:06:35,200
is less work to be done.

84
00:06:35,590 --> 00:06:42,730
So because we just have the literal true instead of the variable stop because of this, the second thread

85
00:06:42,730 --> 00:06:47,410
would run forever, even if stop was set to true by the main thread.

86
00:06:48,760 --> 00:06:56,560
And this kind of a situation is referred to as liveness failure, as the program is unable to make progress.

87
00:06:57,400 --> 00:07:05,110
Note that such hoisting is almost certainly done on server farms that are typically installed on submissions

88
00:07:05,680 --> 00:07:08,470
on client machines that we developers use.

89
00:07:08,620 --> 00:07:15,310
We would install client JVM, that is the JDK, and they don't perform such kind of optimizations.

90
00:07:16,030 --> 00:07:24,100
If you want client JVM to also perform such optimization, you can specify hyphen server option on the

91
00:07:24,100 --> 00:07:26,050
command line when running JVM.

92
00:07:28,140 --> 00:07:35,610
Finally, synchronization means civil access and hence we lose opportunities for parallelism in multicore

93
00:07:35,610 --> 00:07:36,300
systems.

94
00:07:37,060 --> 00:07:40,420
So not that we should be careful not to over synchronize.

95
00:07:42,370 --> 00:07:49,120
Final tip is that if you're not sure whether to synchronize or not, then don't synchronize, but document

96
00:07:49,120 --> 00:07:50,970
that the class is not that safe.

97
00:07:51,490 --> 00:07:54,880
This way, if needed, clients can synchronize externally.

98
00:07:56,540 --> 00:07:58,520
String buffer violated this guideline.

99
00:07:58,640 --> 00:08:04,400
It was found that string buffer instances were mostly used by single threads.

100
00:08:04,970 --> 00:08:07,460
That is, they are not shared across different threads.

101
00:08:08,120 --> 00:08:14,810
However, the class uses synchronization internally wherever it is needed, and that affected the performance.

102
00:08:16,300 --> 00:08:17,650
And this was the reason.

103
00:08:17,650 --> 00:08:23,260
In Java five, string builder was introduced as a drop in replacement for string buffer.

104
00:08:24,140 --> 00:08:28,100
String builder does not use any synchronization and hence is faster.

105
00:08:28,610 --> 00:08:32,659
But if synchronization is needed, then you can go for string buffer.

106
00:08:33,390 --> 00:08:34,690
So that's about it.

107
00:08:34,710 --> 00:08:38,820
And we looked at some very important guidelines on using synchronization.

108
00:08:39,330 --> 00:08:39,960
Thank you.

