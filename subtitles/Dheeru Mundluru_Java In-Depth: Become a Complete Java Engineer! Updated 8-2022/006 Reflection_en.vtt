WEBVTT
1
00:00:01.900 --> 00:00:02.800
Hi there.

2
00:00:02.830 --> 00:00:04.050
This is the Domaine de la Rue.

3
00:00:04.059 --> 00:00:05.140
And welcome back.

4
00:00:05.530 --> 00:00:11.500
Let's not sidestep a bit and let's look at what this topic reflection is about, and we'll also look

5
00:00:11.500 --> 00:00:13.630
at where it is typically used.

6
00:00:15.190 --> 00:00:18.100
Reflection allows programs to do two things.

7
00:00:19.320 --> 00:00:24.060
One is it allows programs to introspect, known or unknown code.

8
00:00:24.660 --> 00:00:31.020
For example, it allows us to view what methods, fields and constructors are defined in a particular

9
00:00:31.020 --> 00:00:35.760
class or an object without even knowing their names at compile time.

10
00:00:36.390 --> 00:00:40.590
That is, you can get all this meta information directly at runtime itself.

11
00:00:41.160 --> 00:00:47.390
All you need is a class name as a string or an object reference or even the name of an interface.

12
00:00:47.400 --> 00:00:51.270
And you can get all the meta information about that particular entity.

13
00:00:53.170 --> 00:00:57.010
Such introspection would allow us to affect the runtime behavior to.

14
00:00:57.550 --> 00:01:03.520
For example, if you just know the class name at runtime, you will be able to load that class, create

15
00:01:03.520 --> 00:01:10.990
an instance of that class, and even invoke certain methods on that instance and even set or get values

16
00:01:10.990 --> 00:01:12.880
of fields of that instance.

17
00:01:13.740 --> 00:01:20.610
So basically reflection allows you to see what a class or an interface or an object has and even effect

18
00:01:20.610 --> 00:01:26.280
their runtime behavior by doing stuff like creating instances and invoking their methods.

19
00:01:26.970 --> 00:01:32.280
And we will see all of it in a demo, which we will soon be doing in a couple of lectures from now.

20
00:01:34.090 --> 00:01:36.640
Let's now look at some common use cases of reflection.

21
00:01:37.360 --> 00:01:38.810
It is like eclipse.

22
00:01:38.830 --> 00:01:42.670
Use reflection to offer the class browsing capability.

23
00:01:43.240 --> 00:01:45.520
For instance, in our source code.

24
00:01:45.550 --> 00:01:52.270
As soon as we type an object reference followed by a dot operator eclipse would automatically display

25
00:01:52.270 --> 00:01:55.300
all the methods which can be invoked on that object.

26
00:01:55.960 --> 00:01:58.120
So that's possible due to reflection.

27
00:01:58.240 --> 00:02:05.500
As a reflection is allowing eclipse to introspect the class of the object and context and show us all

28
00:02:05.500 --> 00:02:08.050
the methods that can be invoked on that object.

29
00:02:09.830 --> 00:02:12.980
Another use case of reflection is processing annotations.

30
00:02:13.370 --> 00:02:16.760
Annotations are nothing but metadata added to source code.

31
00:02:17.150 --> 00:02:19.820
That is the basically annotate source code.

32
00:02:20.480 --> 00:02:26.480
For instance, when we write unit test cases, we annotate methods with add test annotation.

33
00:02:27.170 --> 00:02:29.930
Let me pull up my editor and we can look at a test case.

34
00:02:32.700 --> 00:02:37.650
Here is a unit test case and here we are testing a couple of methods.

35
00:02:37.650 --> 00:02:39.630
So there are two test cases here.

36
00:02:39.660 --> 00:02:42.030
This is one and there is one other here.

37
00:02:42.240 --> 00:02:47.070
So the test case is annotated with this annotation called ET test.

38
00:02:47.700 --> 00:02:54.750
So this is the unit test framework and unit would use something called as an annotation processor which

39
00:02:54.750 --> 00:03:02.850
would basically process this class and it would look for methods that are annotated with this annotation.

40
00:03:03.600 --> 00:03:07.020
So as we said, it will look for this meta information.

41
00:03:07.020 --> 00:03:11.850
So this would be the matter information and then it would also affect the runtime behavior.

42
00:03:11.850 --> 00:03:17.970
And the way it would do is it would it will load this class called student util test and it would create

43
00:03:17.970 --> 00:03:23.790
an instance of it and then it would identify these methods which are annotated with this particular

44
00:03:23.790 --> 00:03:29.340
annotation and would execute these methods, methods on the created instance.

45
00:03:29.670 --> 00:03:32.670
So that's how it would work, the annotation processor.

46
00:03:33.000 --> 00:03:38.820
And at the end of this chapter we have a coding exercise and in the coding exercise we will actually

47
00:03:38.820 --> 00:03:44.910
build a very simple unit testing framework, but instead of processing.

48
00:03:44.910 --> 00:03:47.310
So we will be processing this kind of a class.

49
00:03:47.310 --> 00:03:54.910
But instead of looking for such an annotation, we will actually look for methods which start with a

50
00:03:54.930 --> 00:03:57.360
certain way, with a certain keyword.

51
00:03:57.360 --> 00:04:02.550
So in exercise we will look for methods which start with this keyword called test.

52
00:04:03.150 --> 00:04:07.740
So we look for certain pattern in the, in the names of the method.

53
00:04:07.740 --> 00:04:08.870
So that's how we will do it.

54
00:04:08.880 --> 00:04:10.260
That's how it's going to be different.

55
00:04:10.410 --> 00:04:12.480
So we will look at that when we get there.

56
00:04:12.480 --> 00:04:15.180
So that's the annotation processor.

57
00:04:15.270 --> 00:04:18.450
And for the class browsing, we already know.

58
00:04:18.450 --> 00:04:25.860
So let's say we use this class called arrays, which is from the Java package and if we hit a dot here,

59
00:04:25.860 --> 00:04:29.520
so it's going to show all the methods that are in this class.

60
00:04:29.880 --> 00:04:35.460
So that's the class browsing facility feature that ID provides us.

61
00:04:35.730 --> 00:04:38.730
So ID are the annotation processor.

62
00:04:38.730 --> 00:04:41.880
So these are tools which make use of reflection.

63
00:04:41.880 --> 00:04:45.530
And when we are building such kind of tools, it is common to use reflection.

64
00:04:45.810 --> 00:04:51.510
OC So those are the two examples and let's just head back to slides now.

65
00:04:53.860 --> 00:04:55.540
So those are two good examples.

66
00:04:55.720 --> 00:05:00.070
Now Hibernate, which is an Aurum framework, also uses annotations.

67
00:05:00.400 --> 00:05:06.340
And so Hibernate also uses reflection to identify members of a class that are annotated.

68
00:05:08.060 --> 00:05:13.670
Another interesting use of reflection is when we create dynamic proxies and let's see what it is through

69
00:05:13.670 --> 00:05:14.780
a simple example.

70
00:05:16.110 --> 00:05:19.470
Let's say we have the student class with the method update profile.

71
00:05:20.400 --> 00:05:26.220
Now let's say we want to measure the time it takes to execute this method, and maybe we also want to

72
00:05:26.220 --> 00:05:28.410
do the same for many of our classes.

73
00:05:30.090 --> 00:05:37.020
In such a case, we can drop an instance of student class in a dynamic proxy, and that proxy provides

74
00:05:37.020 --> 00:05:40.860
the additional logic to measure the method execution time.

75
00:05:41.520 --> 00:05:47.940
A client can invoke the same update profile method on the dynamic proxy, and the proxy would in turn

76
00:05:47.940 --> 00:05:51.480
invoke the update profile method in the student class.

77
00:05:51.840 --> 00:05:56.130
But additionally, it would also measure the time it takes for the method to execute.

78
00:05:56.980 --> 00:06:02.560
Despite the code that measures the execution, time is kept separate from the update profile method,

79
00:06:02.560 --> 00:06:04.570
which has the actual business logic.

80
00:06:05.050 --> 00:06:11.680
So that's the key benefit of this dynamic proxy would be a very generic class and so can be used to

81
00:06:11.680 --> 00:06:13.480
wrap any of our classes.

82
00:06:14.310 --> 00:06:17.010
The implementation is a bit tricky and interesting.

83
00:06:17.460 --> 00:06:22.950
I will include a link to a simple tutorial on this topic and you can probably check it out after you

84
00:06:22.950 --> 00:06:24.150
are done with reflection.

85
00:06:24.950 --> 00:06:29.570
But the main thing to note is that dynamic proxy is created via reflection.

86
00:06:31.310 --> 00:06:37.730
So we now understand that reflection is about meta information, about classes and objects and interfaces

87
00:06:37.730 --> 00:06:38.060
too.

88
00:06:38.630 --> 00:06:44.480
But we also know from class during lecture that class object is all about this meta information.

89
00:06:45.080 --> 00:06:47.720
And we briefly looked at a few of its methods to.

90
00:06:48.550 --> 00:06:51.850
So the question is, are we going to use a class object here?

91
00:06:52.210 --> 00:06:53.440
And the answer is yes.

92
00:06:53.770 --> 00:06:59.740
So it's not just jobs class order that makes use of class object, but even we developers can make use

93
00:06:59.740 --> 00:07:02.080
of class object while using reflection.

94
00:07:02.960 --> 00:07:08.420
In fact, as this diagram shows, entry point for reflection is by getting a reference to the class

95
00:07:08.420 --> 00:07:09.020
object.

96
00:07:09.770 --> 00:07:13.340
So reflection is not possible without access to a class object.

97
00:07:14.230 --> 00:07:20.800
And reflection is not constrained to just this class called class, but the class is from Java.

98
00:07:21.070 --> 00:07:24.310
Lambda to reflect package are also part of the reflection.

99
00:07:25.040 --> 00:07:27.620
But the entry point would still be the class object.

100
00:07:28.570 --> 00:07:35.740
So the class, class and Java reflect package can be together considered as the reflection API.

101
00:07:36.460 --> 00:07:43.570
In the next lecture we will see how we can get hold of a class object and after that we will do a demo.

102
00:07:43.660 --> 00:07:48.970
And then we will also look at some of the classes from Java like Dot Reflect Package.

103
00:07:49.540 --> 00:07:51.490
So that's about it and thank you.

104
00:07:51.490 --> 00:07:54.670
And next we will look at how to access a class object.

