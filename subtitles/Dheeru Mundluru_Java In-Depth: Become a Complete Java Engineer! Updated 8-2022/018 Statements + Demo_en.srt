1
00:00:02,060 --> 00:00:02,850
Hello there.

2
00:00:02,870 --> 00:00:04,140
This is the motel room.

3
00:00:04,550 --> 00:00:08,060
Let's now have a brief formal discussion on statements.

4
00:00:08,480 --> 00:00:12,200
We already wrote several statements as part of our demo programs.

5
00:00:12,770 --> 00:00:16,219
In fact, we know that statements are what constitute a program.

6
00:00:18,080 --> 00:00:25,310
We know that every statement in Java ends with a semicolon and it is basically a command to be executed.

7
00:00:26,770 --> 00:00:29,380
Declaring a variable is one kind of a command.

8
00:00:30,650 --> 00:00:33,710
And the command could be to change the value of a variable.

9
00:00:35,130 --> 00:00:41,430
Another command could be to invoke a particular method, which is nothing but to call a particular method.

10
00:00:42,810 --> 00:00:46,140
So the statement basically changes program state.

11
00:00:46,950 --> 00:00:51,810
That is as a statement is executed the state of the program also gets affected.

12
00:00:53,510 --> 00:00:57,110
And the statement is made up of one or more expressions.

13
00:00:58,180 --> 00:01:00,100
And we already know what an expression is.

14
00:01:00,250 --> 00:01:06,400
We briefly discussed it while introducing variables where we mentioned that a variable can be assigned

15
00:01:06,400 --> 00:01:08,590
a literal or an expression.

16
00:01:09,100 --> 00:01:13,930
You can recall that expression is something which gets evaluated to a single value.

17
00:01:14,410 --> 00:01:17,590
And note that this evaluation happens at runtime.

18
00:01:19,380 --> 00:01:25,890
And an expression can be built using literals variables operators like addition or subtraction and even

19
00:01:25,890 --> 00:01:26,730
method calls.

20
00:01:28,140 --> 00:01:30,180
And here is an example of a statement.

21
00:01:30,600 --> 00:01:37,290
Here get count is the method invocation and the value that it returns is multiplied with x, and the

22
00:01:37,290 --> 00:01:41,100
result of this multiplication is then assigned to the variable count.

23
00:01:42,670 --> 00:01:50,080
Now this statement includes four expressions, as we can see here, both x and get count are expressions.

24
00:01:50,740 --> 00:01:57,040
Now, when x is multiplied with get count, we get one more expression and it is referred to as a compound

25
00:01:57,040 --> 00:01:57,670
expression.

26
00:01:58,620 --> 00:02:04,380
Finally, the value generated by this component expression is assigned to the variable count to form

27
00:02:04,380 --> 00:02:05,790
another compound expression.

28
00:02:06,360 --> 00:02:12,420
So compound expressions are constructed from smaller expressions and every expression, regardless of

29
00:02:12,420 --> 00:02:17,880
whether it is compound or not, gets evaluated to a single value at runtime.

30
00:02:19,510 --> 00:02:22,090
Formally speaking statements can be of three kinds.

31
00:02:23,090 --> 00:02:25,250
First one is declaration statements.

32
00:02:25,610 --> 00:02:30,290
They were discussed while introducing variables and they basically declare variables.

33
00:02:31,950 --> 00:02:32,090
Not.

34
00:02:32,160 --> 00:02:37,830
If expressions appear separately with a semicolon, then they are referred to as expression statements.

35
00:02:39,370 --> 00:02:40,930
And here are a few examples.

36
00:02:41,290 --> 00:02:43,060
First is an assignment statement.

37
00:02:43,330 --> 00:02:46,030
Second one is a method invocation statement.

38
00:02:46,330 --> 00:02:48,010
That is, we are invoking a method.

39
00:02:48,820 --> 00:02:53,650
And the final one is an increment statement, which increments count by one.

40
00:02:54,460 --> 00:03:00,550
This kind of annotation with two plus signs after the variable name is referred to as a post increment

41
00:03:00,550 --> 00:03:02,950
operation and it will be discussed later.

42
00:03:04,740 --> 00:03:10,950
The third type of statement is referred to as control, flow statement and control flow statements regulate

43
00:03:10,950 --> 00:03:13,500
the order in which statements get executed.

44
00:03:14,130 --> 00:03:16,350
Control flow statements will be discussed later.

45
00:03:16,350 --> 00:03:22,110
But here is one example, and it is referred to as an if statement which you will use extensively.

46
00:03:22,800 --> 00:03:27,390
Probably you are already familiar with it if you already have some programming experience.

47
00:03:28,310 --> 00:03:33,590
It basically lets you execute a block of code if the condition in parenthesis is true.

48
00:03:34,280 --> 00:03:40,820
So if the value of count here is less than 100 only, then the code inside the curly braces will be

49
00:03:40,820 --> 00:03:41,570
executed.

50
00:03:42,380 --> 00:03:47,990
Now, one important thing to note here is that among these three types of statements, only declaration

51
00:03:47,990 --> 00:03:53,650
statements can be defined at class level that is directly within the body of a class.

52
00:03:53,660 --> 00:03:58,070
In between the two curly braces, you can have only declaration statements.

53
00:03:58,920 --> 00:04:03,450
But not expression or control, flow statements, expression or control.

54
00:04:03,450 --> 00:04:09,660
Flow statements can be part of methods or other similar class level declarations which we will discuss

55
00:04:09,660 --> 00:04:15,990
later, such as constructors, nested classes or interfaces or initialize blocks, all of which will

56
00:04:15,990 --> 00:04:16,920
be discussed later.

57
00:04:17,430 --> 00:04:23,220
And we will get a compiler error if we try to declare expression or control flow statements directly

58
00:04:23,220 --> 00:04:24,660
within the body of a class.

59
00:04:25,080 --> 00:04:27,210
Let's quickly look at this in our editor.

60
00:04:29,460 --> 00:04:29,600
Okay.

61
00:04:29,850 --> 00:04:36,240
This is our basic demo class and we have these methods, print primitives and type casting, which we

62
00:04:36,240 --> 00:04:38,750
have written earlier, and we have the main method.

63
00:04:38,760 --> 00:04:43,860
So let's just go ahead and create a field called count.

64
00:04:44,700 --> 00:04:46,500
So it is static and.

65
00:04:47,590 --> 00:04:51,220
Count that's initialize it to 25.

66
00:04:51,520 --> 00:04:58,570
So this is a declaration statement and we can have declaration statements right within the class at

67
00:04:58,570 --> 00:05:04,570
the class level, or we can also have it in other places like in methods or constructors, which we

68
00:05:04,570 --> 00:05:05,410
will see later.

69
00:05:05,710 --> 00:05:08,710
So this is fine and if we compile it, we will.

70
00:05:10,870 --> 00:05:17,620
Not have any issue here, but we said that we cannot have expression statements here, so let's just

71
00:05:17,620 --> 00:05:19,780
reassign this to something else.

72
00:05:23,120 --> 00:05:24,800
Let's say 34.

73
00:05:25,860 --> 00:05:28,260
Now this will give us a compilation error.

74
00:05:29,530 --> 00:05:30,250
As you can see.

75
00:05:30,250 --> 00:05:33,190
So you cannot have expression statements right here.

76
00:05:33,400 --> 00:05:39,540
So this is an assignment statement and you cannot have it here directly within the class classes body.

77
00:05:39,550 --> 00:05:42,490
But you can have it here in a method.

78
00:05:44,200 --> 00:05:48,400
Or you can also have it in other places like constructors, which will which we will see later.

79
00:05:48,430 --> 00:05:50,320
So now there is no compilation error.

80
00:05:50,320 --> 00:05:52,120
So that's an expression statement.

81
00:05:52,330 --> 00:05:57,220
Now you cannot also have a control flow statement as mentioned in the slides.

82
00:05:57,430 --> 00:05:58,420
So.

83
00:06:02,030 --> 00:06:03,650
Let's just have an empty body here.

84
00:06:03,950 --> 00:06:08,330
So basically you cannot have this kind of a control flow statement.

85
00:06:08,330 --> 00:06:09,650
So if you compile it.

86
00:06:11,650 --> 00:06:13,270
So we get some compiler error.

87
00:06:13,630 --> 00:06:14,860
So let me just.

88
00:06:18,450 --> 00:06:19,590
Here now.

89
00:06:19,590 --> 00:06:20,580
This should be fine.

90
00:06:22,940 --> 00:06:23,200
Okay.

91
00:06:23,480 --> 00:06:25,290
So no more compiler error.

92
00:06:25,310 --> 00:06:31,820
So both expression statements as well as the control flow statements cannot be declared directly within

93
00:06:31,850 --> 00:06:37,880
a class at the class level, but they can be declared in other places like methods or constructors or

94
00:06:37,880 --> 00:06:41,030
in other declarations that we will see later.

95
00:06:41,060 --> 00:06:47,240
So within the class you can have directly, within the class you can have field declarations like count

96
00:06:47,240 --> 00:06:52,430
here, so you can declare fields or you can have method declarations like these methods.

97
00:06:52,430 --> 00:06:56,840
So these are method declarations or you can have constructor declarations and constructors are something

98
00:06:56,840 --> 00:06:59,300
we'll see later in the in the section.

99
00:06:59,600 --> 00:07:05,660
Or you can also have nested classes or nested interfaces and they will be covered later.

100
00:07:06,260 --> 00:07:11,600
Or you can also have instance and static initializes, so which will also be covered later.

101
00:07:11,600 --> 00:07:12,940
This will be initialized.

102
00:07:13,070 --> 00:07:18,260
So will be covered in a couple of sections, whereas nested classes and interfaces will be covered much

103
00:07:18,260 --> 00:07:18,800
later.

104
00:07:18,980 --> 00:07:25,730
So only declarations can be can be defined here right within the class at the class level.

105
00:07:26,330 --> 00:07:32,270
So just keep that in mind that we cannot have expression statements or, or control flow statements

106
00:07:32,270 --> 00:07:34,280
right within the, at the class level.

107
00:07:34,730 --> 00:07:35,920
So that's about it.

108
00:07:35,930 --> 00:07:39,320
So we looked at statements in a formal way.

109
00:07:39,500 --> 00:07:40,160
Thank you.

