1
00:00:02,070 --> 00:00:02,980
Hello there.

2
00:00:03,000 --> 00:00:04,250
This is the De La Rue.

3
00:00:04,260 --> 00:00:05,160
And welcome back.

4
00:00:05,400 --> 00:00:13,200
So we have learned about packages and we know that packages help in meaningfully organizing our classes

5
00:00:13,350 --> 00:00:15,630
and they also help with name scoping.

6
00:00:15,990 --> 00:00:22,230
That is, we can have classes with identical names and different packages like the date class.

7
00:00:22,980 --> 00:00:30,240
Now when introducing packages, we also said that packages help with security and this is achieved via

8
00:00:30,240 --> 00:00:36,750
access levels, which is a subject of this lecture and it's a very important topic and it is very easy

9
00:00:36,750 --> 00:00:44,910
to know by security we mean which classes in a package are accessible outside of the package, that

10
00:00:44,910 --> 00:00:50,250
is to classes outside the package on which classes are not accessible outside the package.

11
00:00:51,810 --> 00:00:58,020
For instance, let's assume our project contains these two packages where the green and red squares

12
00:00:58,020 --> 00:00:59,370
represent classes.

13
00:01:00,230 --> 00:01:07,040
And we want the red ones to be used only by classes within the same package, but not by classes outside

14
00:01:07,040 --> 00:01:07,820
the package.

15
00:01:08,600 --> 00:01:13,880
Maybe they represent some sensitive functionality and should not be used outside of the package.

16
00:01:14,530 --> 00:01:17,680
But the green ones can be used outside the package too.

17
00:01:18,400 --> 00:01:25,360
So we do not want something like this where a class in package two can access this class in package

18
00:01:25,360 --> 00:01:27,970
one, which is considered to be sensitive.

19
00:01:28,820 --> 00:01:36,560
Similarly, if this project is some sort of a library, then we may have developers outside our organization

20
00:01:36,560 --> 00:01:37,670
using this library.

21
00:01:38,440 --> 00:01:43,720
However, we do not want them to use these sensitive classes which are shown in red.

22
00:01:44,920 --> 00:01:51,700
Even if they are not sensitive, they may be completely irrelevant to such developers using the library,

23
00:01:52,180 --> 00:01:58,300
so there is no point exposing such irrelevant classes which only serve as noise to them.

24
00:01:58,960 --> 00:02:01,030
So they are totally irrelevant to them.

25
00:02:01,480 --> 00:02:05,650
They should access only the green ones which are considered relevant.

26
00:02:07,300 --> 00:02:13,180
And defining access levels help with providing such restrictions on accessing classes.

27
00:02:13,540 --> 00:02:17,140
And they can also be used with interfaces which will be discussed later.

28
00:02:17,900 --> 00:02:24,590
I know that access levels are not for just classes and interfaces, but they are also very important

29
00:02:24,590 --> 00:02:32,270
for members of classes such as variables, methods and even nested classes and nested interfaces, which

30
00:02:32,270 --> 00:02:39,680
will be discussed later and they can also be used with constructors and access levels are critical and

31
00:02:39,680 --> 00:02:41,810
building well design software.

32
00:02:42,860 --> 00:02:49,640
Later, we will discuss about a fundamental design principle called Information Hiding, which is based

33
00:02:49,640 --> 00:02:54,560
on access levels, and it helps towards building well-designed software.

34
00:02:55,360 --> 00:03:00,880
Now first let's look at accessibility for classes and it is the same for interfaces too.

35
00:03:01,330 --> 00:03:05,950
We said that certain classes should not be visible outside of the package.

36
00:03:06,370 --> 00:03:10,060
That is, they're used only by classes within the same package.

37
00:03:11,020 --> 00:03:16,480
Similarly, we also said that we would have classes that are accessible to any class.

38
00:03:16,930 --> 00:03:23,110
That is, they are accessible to classes within the package and also those classes that are outside

39
00:03:23,110 --> 00:03:23,950
of the package.

40
00:03:24,130 --> 00:03:25,780
And this is the common case.

41
00:03:26,110 --> 00:03:32,710
And for this to happen, we use a keyword called public in the class declaration, and we have been

42
00:03:32,710 --> 00:03:36,250
seeing its usage at various places during our demos.

43
00:03:36,790 --> 00:03:42,250
And here is how it would be when used with our basic demo class.

44
00:03:42,790 --> 00:03:50,680
Here, public is referred to as an access modifier and it should come before the keyword class.

45
00:03:51,190 --> 00:03:56,080
If you place it in between the keyword class and the class name, then you get a compiler error.

46
00:03:56,590 --> 00:04:01,300
In fact, you cannot have anything in between the keyword class and the class name.

47
00:04:02,190 --> 00:04:04,560
So we use public modifier F.

48
00:04:04,560 --> 00:04:07,380
The accessibility of the class is public.

49
00:04:08,290 --> 00:04:15,040
But for the first case where accessibility is only within the package, we do not specify any modifier.

50
00:04:15,400 --> 00:04:17,380
So that's the default case.

51
00:04:17,560 --> 00:04:24,550
If you do not specify any access modifier, then it implies that the class is accessible only to other

52
00:04:24,550 --> 00:04:26,590
classes within the same package.

53
00:04:28,310 --> 00:04:32,450
So we just looked at accessibility for classes and interfaces.

54
00:04:32,480 --> 00:04:37,850
Now let's look at accessibility for class members like variables and methods.

55
00:04:39,300 --> 00:04:46,500
One restriction is for a member of a class to be accessible only within the class in which it is defined

56
00:04:46,980 --> 00:04:48,510
in which the member is defined.

57
00:04:48,990 --> 00:04:50,790
That is, outside of that class.

58
00:04:50,790 --> 00:04:52,890
That member should not be accessible.

59
00:04:53,740 --> 00:05:00,610
For example, you may want a variable or a method to be accessible only within the class, like in its

60
00:05:00,610 --> 00:05:05,080
methods or constructors, but not to any code outside of the class.

61
00:05:06,270 --> 00:05:13,050
And for this you would use an access modifier called private when declaring the variable and it suggest

62
00:05:13,050 --> 00:05:15,810
that the member is private to the class.

63
00:05:16,800 --> 00:05:21,600
And here is an example where the variable ID is declared as private.

64
00:05:23,630 --> 00:05:29,990
And sometimes we may want a particular member to be accessible not only within its class, but also

65
00:05:29,990 --> 00:05:32,480
to other classes within the same package.

66
00:05:32,900 --> 00:05:37,040
And the member should also not be accessible outside of the package.

67
00:05:37,950 --> 00:05:38,490
For this.

68
00:05:38,490 --> 00:05:40,880
We do not use any access modifier.

69
00:05:40,890 --> 00:05:43,020
And here is an example.

70
00:05:43,560 --> 00:05:50,940
Sometimes this access level is also referred to as package private, as the access is private to the

71
00:05:50,940 --> 00:05:51,690
package.

72
00:05:52,410 --> 00:05:57,510
So with this access level, the member will not be accessible outside the package.

73
00:05:59,540 --> 00:06:06,050
And we may also want a member to be accessible to all classes in the same package like in the previous

74
00:06:06,050 --> 00:06:06,650
case.

75
00:06:07,040 --> 00:06:14,000
However, in addition, we may want that member to be accessible to something called Subclasses of the

76
00:06:14,000 --> 00:06:16,070
class in which the member is defined.

77
00:06:16,760 --> 00:06:20,090
And those subclasses may be outside the package to.

78
00:06:21,010 --> 00:06:26,800
Subclasses are not yet discussed and they will be introduced when discussing inheritance, which is

79
00:06:26,800 --> 00:06:28,480
an object oriented concept.

80
00:06:29,050 --> 00:06:32,290
So we will deal with inheritance after few sections from here.

81
00:06:32,680 --> 00:06:38,500
So let's not worry about subclasses for now, but note that for this access level, you would have to

82
00:06:38,500 --> 00:06:43,090
use an access modifier called protected when declaring the member.

83
00:06:43,270 --> 00:06:44,980
And here is an example.

84
00:06:45,910 --> 00:06:54,130
And finally, we may also want certain members of a class to be accessible to any code, regardless

85
00:06:54,130 --> 00:06:55,630
of where the code is.

86
00:06:56,080 --> 00:07:00,310
That is, the code may be inside the package or outside the package, too.

87
00:07:00,880 --> 00:07:02,800
That's the public access level.

88
00:07:02,800 --> 00:07:07,510
And you would use the access modifier public when declaring the member.

89
00:07:07,720 --> 00:07:10,840
And here is the obvious example.

90
00:07:11,590 --> 00:07:19,960
Not that if we are creating a library like the Java API, then anything declared as public within our

91
00:07:19,960 --> 00:07:23,560
library can be used by users of the library.

92
00:07:24,450 --> 00:07:31,410
When we say anything, it can be a class or an interface or even their members like variables and methods.

93
00:07:32,300 --> 00:07:39,860
So we say that anything declared as public would be part of the API, and we know that API stands for

94
00:07:39,860 --> 00:07:44,810
application programming interface and it is simply another term for library.

95
00:07:45,610 --> 00:07:50,770
Not that these access levels are ordered from most to least restrictive.

96
00:07:51,340 --> 00:07:57,850
So the first one, private, is most restrictive as visibility of the class member is only within that

97
00:07:57,850 --> 00:07:58,420
class.

98
00:07:59,170 --> 00:08:05,140
Similarly, last one is least restrictive as the class member is accessible to any code.

99
00:08:06,020 --> 00:08:10,490
Also of all the modifiers, private and public are used most of the time.

100
00:08:10,910 --> 00:08:17,150
And we will also see how private and public enable information hiding the design principles that we

101
00:08:17,150 --> 00:08:18,290
will discuss later.

102
00:08:19,040 --> 00:08:27,530
Protected is used relatively rarely, and default or packaged private access is also common, but maybe

103
00:08:27,530 --> 00:08:29,990
not as much as private and public.

104
00:08:30,950 --> 00:08:36,890
So when compared to classes and interfaces, we can see that members of the class have two additional

105
00:08:36,890 --> 00:08:41,030
access level restrictions, which are private and protected restrictions.

106
00:08:41,820 --> 00:08:47,370
Public on default access levels apply to both classes and interfaces as well as their members.

107
00:08:48,240 --> 00:08:53,580
Now let's go ahead and test the different access levels with the exception of protected, which will

108
00:08:53,580 --> 00:08:57,000
be discussed later after introducing inheritance.

109
00:08:59,400 --> 00:09:05,940
In this demo, we will first look at accessibility of classes and then we will look at accessibility

110
00:09:05,940 --> 00:09:09,610
of class members with regards to class members.

111
00:09:09,630 --> 00:09:16,140
We will only look at accessibility of methods and it would be the same for variables to it would also

112
00:09:16,140 --> 00:09:22,380
be same for other members like nested classes and nested interfaces, which we will discuss much later.

113
00:09:22,830 --> 00:09:25,950
So let's go ahead and look at accessibility of classes.

114
00:09:26,130 --> 00:09:31,860
We already looked at accessibility of classes when discussing packages earlier on.

115
00:09:32,250 --> 00:09:36,930
When discussing packages, we looked at creating packages.

116
00:09:36,930 --> 00:09:38,970
So there was a lecture on creating packages.

117
00:09:38,970 --> 00:09:46,830
And in that lecture, in the demo, at some point we did look at accessibility of classes, but let's

118
00:09:46,830 --> 00:09:48,090
look at it one more time.

119
00:09:48,480 --> 00:09:53,330
So we have this Standard Class Basics demo, which is part of this package.

120
00:09:53,430 --> 00:09:55,560
Com semantics for basics, right?

121
00:09:55,890 --> 00:10:04,110
And in that demo, at one point we created this class called as basics demo test, but it was in a different

122
00:10:04,110 --> 00:10:08,220
package called comp semantics queer basics test.

123
00:10:08,490 --> 00:10:11,250
So this is basics test and this is basics.

124
00:10:11,670 --> 00:10:18,030
So in this class we were using the basics demo class, so we imported this class.

125
00:10:18,210 --> 00:10:25,590
And here in the main method we created an instance of basics demo and we were invoking this method called

126
00:10:25,590 --> 00:10:30,180
Foo, which is just a dummy method, and it just prints a message.

127
00:10:30,180 --> 00:10:32,280
So let me just show you that method.

128
00:10:34,560 --> 00:10:35,520
Here it is.

129
00:10:35,940 --> 00:10:40,200
So it is just a dummy method, which is just printing this message called inside.

130
00:10:41,850 --> 00:10:49,470
So here, if you recall, when we compile this class for the very first time, it gave us a compilation

131
00:10:49,470 --> 00:10:50,060
error.

132
00:10:50,070 --> 00:10:54,030
And the reason was basic demo was not public.

133
00:10:54,390 --> 00:11:00,870
So here later we added this keyword called public, but initially it was not there and it gave us a

134
00:11:00,870 --> 00:11:04,710
compilation error and then we added public and then it was fine.

135
00:11:05,160 --> 00:11:08,070
So that's essentially class accessibility.

136
00:11:08,160 --> 00:11:10,080
But let's look at it one more time.

137
00:11:10,110 --> 00:11:13,350
So let me just go ahead and remove this.

138
00:11:14,380 --> 00:11:16,200
Now a couple of things.

139
00:11:16,210 --> 00:11:22,600
So we also have student Java on student test Java within the same package basics.

140
00:11:22,750 --> 00:11:28,330
Just make sure that you also add these package statements in both the classes.

141
00:11:28,330 --> 00:11:30,850
Student as well as student test package.

142
00:11:31,090 --> 00:11:34,510
Semantics, squared, basics and both these classes.

143
00:11:34,510 --> 00:11:36,340
Otherwise you will get a compilation error.

144
00:11:36,730 --> 00:11:41,020
Now this is the basic demo class and basics demo test is using it.

145
00:11:41,560 --> 00:11:43,600
So I have two command prompts here.

146
00:11:43,610 --> 00:11:47,890
One is in basics and the other one is basics test.

147
00:11:48,280 --> 00:11:51,190
So let me just compile basics demo class.

148
00:11:52,340 --> 00:11:52,730
Compliance.

149
00:11:52,730 --> 00:11:53,270
Fine.

150
00:11:53,840 --> 00:11:56,150
Now basics test.

151
00:12:00,560 --> 00:12:03,350
As you can see, it is giving us two compiler errors.

152
00:12:03,830 --> 00:12:12,020
It says that basic demo is not public in this package and it cannot be accessed from outside the package

153
00:12:12,620 --> 00:12:15,620
because it had a default access level.

154
00:12:16,010 --> 00:12:22,220
So it is giving us two compilation errors, one at the import statement and the other when we were trying

155
00:12:22,220 --> 00:12:24,950
to create an instance of basic demo.

156
00:12:25,580 --> 00:12:32,030
So for both of them, it just says that basic demo is not public, so let's go here.

157
00:12:32,780 --> 00:12:38,900
So this is the default access level, which means that there is no keyword here and it is also referred

158
00:12:38,900 --> 00:12:46,610
to as package private, but other classes within the same package basics can access this class.

159
00:12:47,000 --> 00:12:53,960
So let's go ahead and copy this particular statement and let's paste it in student test.

160
00:12:54,530 --> 00:12:57,710
So in student test, let's go to the main method.

161
00:12:57,710 --> 00:13:00,740
And at the very end, let me add.

162
00:13:01,570 --> 00:13:03,070
The statement here.

163
00:13:04,420 --> 00:13:07,960
And let's go ahead and compile this.

164
00:13:12,390 --> 00:13:13,440
It compiles fine.

165
00:13:14,570 --> 00:13:18,470
That's because both of these are in the same class, in the same package.

166
00:13:18,560 --> 00:13:26,480
And hence even the basics demo has a default access level student test can access it because anything

167
00:13:26,480 --> 00:13:29,030
default can be accessed within the same package.

168
00:13:29,990 --> 00:13:30,890
So that's that.

169
00:13:30,920 --> 00:13:34,400
Now let's go ahead and make it public.

170
00:13:36,090 --> 00:13:38,250
Which means that we need to recompile it.

171
00:13:38,850 --> 00:13:49,830
So basics demo I'm re compiling and now if we compile basics demo test, we will not see that compilation

172
00:13:49,830 --> 00:13:50,760
error anymore.

173
00:13:51,360 --> 00:13:57,330
So it is public now, which means that it is part of the API, as I mentioned earlier.

174
00:13:57,420 --> 00:14:01,950
And it will be accessible to any code which is outside the package.

175
00:14:02,520 --> 00:14:09,540
Just assume that basics demo test basics demo or this entire package is some sort of a library like

176
00:14:09,540 --> 00:14:16,350
the com semantics where basics and let's say basics demo test is something that I'm writing and I'm

177
00:14:16,350 --> 00:14:24,090
using this library so I'm able to access basics demo because it is part of the API.

178
00:14:24,120 --> 00:14:30,930
It is part of the library as it has been declared as public and basic demo can use other classes like

179
00:14:30,930 --> 00:14:32,280
student or student test.

180
00:14:32,280 --> 00:14:39,300
In fact, one of the methods called arrays is using student class and student can be a has a default

181
00:14:39,300 --> 00:14:40,020
access level.

182
00:14:40,440 --> 00:14:49,920
So for me as a library user, I can only access basic demo, but basic demo can internally use other

183
00:14:49,920 --> 00:14:52,230
classes which have default access level.

184
00:14:52,230 --> 00:14:57,150
But I cannot directly use student because it does not have the public access modifier.

185
00:14:58,070 --> 00:15:06,770
So that's where you can see how access level is helping us to access only certain relevant classes and

186
00:15:06,770 --> 00:15:11,720
the ones that are not relevant can be hidden from the outside world.

187
00:15:12,710 --> 00:15:14,340
So that's class accessibility.

188
00:15:14,360 --> 00:15:17,560
Now let's look at accessibility of members.

189
00:15:17,570 --> 00:15:21,110
So let's go ahead and pick the same example, the Foo method.

190
00:15:21,110 --> 00:15:24,740
So Foo method is at the very end and it has.

191
00:15:26,030 --> 00:15:26,510
Public.

192
00:15:26,510 --> 00:15:28,400
So let me make it private.

193
00:15:28,400 --> 00:15:30,410
So we are going to look at private.

194
00:15:31,210 --> 00:15:38,920
Default and protector and public protector will be will be seen later when we discuss inheritance,

195
00:15:38,920 --> 00:15:40,000
as I mentioned earlier.

196
00:15:40,270 --> 00:15:45,000
So if it is private, it is only accessible within this particular class.

197
00:15:45,010 --> 00:15:50,290
It cannot be accessed by any other class outside of this class.

198
00:15:50,290 --> 00:15:54,530
So even student test, which is in the same package, cannot access it.

199
00:15:54,550 --> 00:15:56,170
So let's go ahead and do that.

200
00:15:56,170 --> 00:15:57,790
So student test.

201
00:15:59,040 --> 00:16:01,470
Has the statement which we inserted earlier.

202
00:16:01,710 --> 00:16:04,980
So let's go ahead and compile student test now.

203
00:16:05,240 --> 00:16:08,040
So first, let me compile basics demo.

204
00:16:09,820 --> 00:16:10,840
That's good.

205
00:16:11,830 --> 00:16:13,330
Next is student test.

206
00:16:14,320 --> 00:16:18,550
You see, it says that who has private access and basics demo.

207
00:16:18,670 --> 00:16:21,400
So we cannot access the foo method.

208
00:16:21,910 --> 00:16:28,330
Although basic demo can be accessed, who cannot be accessed because foo has private access so it cannot

209
00:16:28,330 --> 00:16:31,360
also be accessed from the other class.

210
00:16:31,360 --> 00:16:35,140
The basics demo test obviously because it is outside of the package.

211
00:16:35,230 --> 00:16:40,330
So if student tests cannot access it, basic demo test obviously cannot access it to.

212
00:16:41,270 --> 00:16:42,620
You see, it says the same thing.

213
00:16:43,070 --> 00:16:44,630
So that's because it is private.

214
00:16:44,660 --> 00:16:45,620
However.

215
00:16:46,530 --> 00:16:51,260
Let's just copy this into our basic demo class.

216
00:16:51,270 --> 00:16:53,520
So let's go into the main method.

217
00:16:53,760 --> 00:16:56,040
Let's just insert it here.

218
00:16:56,700 --> 00:17:00,570
So this should be fine because we are in the same class.

219
00:17:03,330 --> 00:17:04,770
So that compiles fine.

220
00:17:04,890 --> 00:17:08,700
So that's because foo is in the same class.

221
00:17:08,940 --> 00:17:09,619
This is fine.

222
00:17:09,630 --> 00:17:12,240
Even even we can access it directly.

223
00:17:12,240 --> 00:17:17,040
But this is a static method, so we would have to make this static in order to access it.

224
00:17:17,849 --> 00:17:20,619
So that's the private access modifier.

225
00:17:20,640 --> 00:17:27,990
And private and public, as I mentioned earlier, will be very useful for the information hiding principle,

226
00:17:28,319 --> 00:17:29,760
which we will discuss later.

227
00:17:30,720 --> 00:17:32,400
It enables information hiding.

228
00:17:32,670 --> 00:17:34,350
Now, next thing is.

229
00:17:35,350 --> 00:17:40,330
The default access level, which just implies that we will not have this modifier.

230
00:17:41,170 --> 00:17:45,120
So if we do not have that modifier, it means that it is packaged private.

231
00:17:45,130 --> 00:17:49,060
That is, it is private to the package and that's the default access level.

232
00:17:49,270 --> 00:17:53,210
So now student test can access it because it is in the same package.

233
00:17:53,230 --> 00:17:55,180
So let's go ahead and.

234
00:17:58,040 --> 00:17:59,000
Compile this.

235
00:17:59,840 --> 00:18:01,430
So now it compiles fine.

236
00:18:02,060 --> 00:18:08,330
But basics demo test can still not access it because it's a different package.

237
00:18:09,590 --> 00:18:14,900
So it says that foo is not public in basic demo and cannot be accessed from outside package.

238
00:18:15,650 --> 00:18:16,220
So let's.

239
00:18:16,220 --> 00:18:17,420
Next, let's make it.

240
00:18:19,260 --> 00:18:20,370
Let's make it public.

241
00:18:20,400 --> 00:18:22,350
Even if you make it protected.

242
00:18:25,460 --> 00:18:26,610
It is still fine.

243
00:18:26,630 --> 00:18:27,950
Let's let me just show it.

244
00:18:27,950 --> 00:18:36,140
Protected is similar to default access, but it can also be accessed in subclasses and those subclasses

245
00:18:36,140 --> 00:18:40,070
can be in the same package or in or outside of the package.

246
00:18:42,680 --> 00:18:44,300
You see from student test.

247
00:18:44,300 --> 00:18:46,910
We can still access it, but.

248
00:18:47,660 --> 00:18:50,390
From here it is still not accessible.

249
00:18:50,930 --> 00:18:57,040
From basics demo test because basic demo test is not a subclass of basics demo.

250
00:18:57,050 --> 00:19:02,360
But like I said earlier, basics subclasses will be dealt later, so let's not worry about it.

251
00:19:02,360 --> 00:19:04,700
So let's just make it public now.

252
00:19:05,240 --> 00:19:06,290
That's the last one.

253
00:19:07,070 --> 00:19:11,690
So let's go ahead and recompile our basics demo class.

254
00:19:12,380 --> 00:19:19,550
And obviously it will be accessible from Student Test two and now it will be accessible from basic demo

255
00:19:19,550 --> 00:19:24,130
test because it is part of the API now.

256
00:19:24,920 --> 00:19:26,180
So it compiled fine.

257
00:19:26,750 --> 00:19:29,720
So that's with the public modifier.

258
00:19:29,720 --> 00:19:36,950
So if you make it public, it means that any code can access it, any code outside of this package.

259
00:19:36,950 --> 00:19:39,380
And we say that it is part of the API.

260
00:19:40,010 --> 00:19:46,220
Now this one can use other other private classes to other private methods, but those methods will not

261
00:19:46,220 --> 00:19:48,830
be accessible outside of the package.

262
00:19:49,370 --> 00:19:56,210
So as you can see this public, private and all, so they are allowing us to define certain restrictions

263
00:19:56,210 --> 00:19:59,540
on what is accessible outside of the package and what is not.

264
00:20:00,050 --> 00:20:03,260
Now let's quickly look at Java API itself.

265
00:20:03,260 --> 00:20:09,320
So in Java we have this class code as ArrayList, which will be discussed later, which is a data structure

266
00:20:09,320 --> 00:20:13,130
and it is part of the Java package and it is very widely used.

267
00:20:13,460 --> 00:20:17,360
So within the ArrayList, let me show you the API.

268
00:20:17,360 --> 00:20:18,980
So this is the API.

269
00:20:19,430 --> 00:20:22,580
So I'm accessing it from the from the browser.

270
00:20:22,580 --> 00:20:27,260
So this is the ArrayList class and it has all of these methods.

271
00:20:27,260 --> 00:20:34,010
And the first method here is add method which is adding an element at certain position, at certain

272
00:20:34,010 --> 00:20:35,120
index position.

273
00:20:35,420 --> 00:20:37,490
So let me just show you the source code.

274
00:20:37,640 --> 00:20:41,660
So the method is here, this one.

275
00:20:41,660 --> 00:20:42,950
So this is the method.

276
00:20:42,950 --> 00:20:50,300
So it is public and hence it is visible here as part of the API and anybody can use it.

277
00:20:50,300 --> 00:20:52,040
We will also be using it later.

278
00:20:52,460 --> 00:20:57,260
But this method internally, as you can see it is using few other methods.

279
00:20:57,260 --> 00:21:01,820
Now you see this method, let me go into this method.

280
00:21:01,820 --> 00:21:06,380
So this method called range check for add is then private method.

281
00:21:06,800 --> 00:21:11,330
So it is only accessible from within this class.

282
00:21:11,930 --> 00:21:16,070
So if you look at here, there is no range check method.

283
00:21:16,070 --> 00:21:22,610
So if you go here, scroll down, you won't see that because it is private though it is still part of

284
00:21:22,620 --> 00:21:23,240
our list.

285
00:21:23,240 --> 00:21:25,790
It is only used internally within that.

286
00:21:26,360 --> 00:21:31,250
So we will only be using the methods that are relevant to us.

287
00:21:31,250 --> 00:21:34,720
Only those methods are exposed as public methods.

288
00:21:34,910 --> 00:21:39,920
Rest of them will be used internally and those are irrelevant for us.

289
00:21:39,920 --> 00:21:43,970
Who are the users of this class and so should not be displayed to us.

290
00:21:44,180 --> 00:21:47,360
Otherwise they are just irrelevant and we will not be using.

291
00:21:47,360 --> 00:21:50,960
And it's just that we will have to deal with all of those methods.

292
00:21:50,960 --> 00:21:56,540
So we will have another 20 or 30 methods here and they just act as noise.

293
00:21:57,170 --> 00:21:58,340
So that's what it is.

294
00:21:58,340 --> 00:22:01,130
So that's the benefit of access levels.

295
00:22:01,130 --> 00:22:09,080
So we have learned about packages and we have learned how access levels help in accessing only certain

296
00:22:09,080 --> 00:22:14,210
parts of those packages and the remaining will be hidden from the outside world.

297
00:22:15,080 --> 00:22:16,610
So this is what it is.

298
00:22:16,610 --> 00:22:21,170
And there is also another method that this method is that this particular method is accessing called

299
00:22:21,170 --> 00:22:23,210
ensure capacity internal.

300
00:22:23,510 --> 00:22:26,450
So if I click on that, it is also a private method.

301
00:22:27,190 --> 00:22:28,180
So that's about it.

302
00:22:28,210 --> 00:22:33,700
I hope you enjoyed learning about access levels and I will see you in the next lecture.

303
00:22:34,150 --> 00:22:35,770
Thank you and happy coding.

