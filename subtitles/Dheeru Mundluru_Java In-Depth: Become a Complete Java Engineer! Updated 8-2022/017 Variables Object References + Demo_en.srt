1
00:00:02,040 --> 00:00:02,960
Hello there.

2
00:00:02,969 --> 00:00:04,140
This is Lou.

3
00:00:04,140 --> 00:00:05,070
And welcome back.

4
00:00:05,490 --> 00:00:12,720
We have seen that variables of primitive types can hold raw data such as integers or characters or Boolean

5
00:00:12,720 --> 00:00:13,320
literals.

6
00:00:13,860 --> 00:00:17,970
Now, let's look at the second type of variables which can hold object references.

7
00:00:19,630 --> 00:00:26,140
We know that this statement creates a student object and variable, as is an object reference here.

8
00:00:26,140 --> 00:00:31,570
The type of the variable is referred to as reference type with primitive variables.

9
00:00:31,570 --> 00:00:37,990
The type was primitive type and in this case it is a reference type and reference type can be either

10
00:00:37,990 --> 00:00:39,850
a class or an interface.

11
00:00:40,450 --> 00:00:46,360
In this case it is a class student and interfaces will be discussed later after a few sections.

12
00:00:46,870 --> 00:00:53,410
Now this notion of reference type, we will revisit it later after a few sections when discussing about

13
00:00:53,410 --> 00:00:54,460
inheritance.

14
00:00:54,880 --> 00:01:02,110
It's a concept in object oriented programming here, as is a variable and it is an object reference

15
00:01:02,110 --> 00:01:07,540
and not an object that is it holds a reference to a student object.

16
00:01:08,050 --> 00:01:13,240
In other words, it holds bits that reference a student object in memory.

17
00:01:14,070 --> 00:01:19,260
The statement has three parts in it, and each of them informs GM to do something.

18
00:01:19,260 --> 00:01:21,390
And let's see what those three parts are.

19
00:01:22,340 --> 00:01:23,180
The first part.

20
00:01:23,180 --> 00:01:29,660
Student SE tells JVM to allocate space in the memory for a reference variable.

21
00:01:31,440 --> 00:01:38,280
Then the part new student tells JVM to allocate space for a new student object in the memory.

22
00:01:39,040 --> 00:01:45,130
So at this point we have space in memory for a reference variable and also a student object.

23
00:01:46,360 --> 00:01:53,020
And finally the assignment operator assigns the memory address of the student object to the variable

24
00:01:53,020 --> 00:01:53,530
se.

25
00:01:54,100 --> 00:01:58,330
So variable se now holds the memory address of the student object.

26
00:01:59,930 --> 00:02:05,420
So objects get stored in memory, but they get stored in a special area of memory which is assigned

27
00:02:05,420 --> 00:02:06,200
to JVM.

28
00:02:06,590 --> 00:02:13,760
So when JVM starts up, like any process, it gets a chunk of memory from the underlying operating system

29
00:02:13,760 --> 00:02:15,410
in order to run its programs.

30
00:02:15,680 --> 00:02:22,850
On one area of this memory is referred to as heap and all objects are stored on the heap.

31
00:02:23,780 --> 00:02:31,820
This diagram shows the heap with all the objects and in our example the variable as references one student

32
00:02:31,820 --> 00:02:33,140
object on the heap.

33
00:02:34,440 --> 00:02:41,460
Internal section covers the heap concept and detail, but for now just note that we have heap and that

34
00:02:41,460 --> 00:02:43,770
objects are stored on the heap.

35
00:02:45,780 --> 00:02:53,430
We looked at depth of all primitives for object references bit depth is beam specific that is bit depth

36
00:02:53,430 --> 00:03:00,780
of an object reference on one gvm may be smaller or larger than bit depth of an object reference on

37
00:03:00,780 --> 00:03:08,340
another JVM, but on a given JVM, all object references will have the same bit depth regardless of

38
00:03:08,340 --> 00:03:09,870
objects that they reference.

39
00:03:10,200 --> 00:03:12,750
So the size of the object does not matter.

40
00:03:13,050 --> 00:03:19,530
One object may have 20 instance variables, while another might have just one instance variable, but

41
00:03:19,530 --> 00:03:24,210
the object references that are referencing them will have the same bit depth.

42
00:03:26,170 --> 00:03:29,410
Default value for an object reference is null.

43
00:03:29,740 --> 00:03:36,960
So if you do not initialize an object reference, it gets a default value of null and it is called as

44
00:03:36,970 --> 00:03:42,790
a null reference and it implies object reference is not pointing to anything.

45
00:03:43,620 --> 00:03:46,080
Just think of NULL as a special literal.

46
00:03:46,440 --> 00:03:50,640
So you can also explicitly initialize an object reference with NULL.

47
00:03:51,780 --> 00:03:55,410
So in this statement as will be assigned the default null.

48
00:03:57,280 --> 00:04:04,480
And using a dot operator on SE which has null as a value will lead to an exception called null pointer

49
00:04:04,480 --> 00:04:11,050
exception exceptions will be covered later in a separate section, and null pointer exception is simply

50
00:04:11,050 --> 00:04:13,480
an error that occurs at runtime.

51
00:04:14,370 --> 00:04:14,640
Now.

52
00:04:14,640 --> 00:04:17,700
We already created objects and initialized their state to.

53
00:04:17,970 --> 00:04:21,060
Now, let's quickly test what we see in this slide.

54
00:04:23,800 --> 00:04:30,460
Here is our student class and in the main method we have created three student objects and we have initialized

55
00:04:30,460 --> 00:04:31,120
their state.

56
00:04:31,540 --> 00:04:36,910
Now let's take this third student and let's comment this statement.

57
00:04:38,660 --> 00:04:40,610
And let's take this part.

58
00:04:40,970 --> 00:04:41,450
Student.

59
00:04:41,450 --> 00:04:45,650
Student three And let's move it to outside of the method.

60
00:04:47,440 --> 00:04:47,730
Okay.

61
00:04:47,890 --> 00:04:49,240
Let's make it static here.

62
00:04:51,420 --> 00:04:53,250
And let's close the statement.

63
00:04:53,940 --> 00:04:54,600
So.

64
00:04:54,600 --> 00:04:56,910
Student three should get a default off.

65
00:04:56,910 --> 00:04:57,420
None.

66
00:04:57,580 --> 00:04:58,170
Right.

67
00:04:59,480 --> 00:05:04,730
And it will give us an error at runtime, the null pointer exception because we are accessing the field

68
00:05:04,730 --> 00:05:07,070
here and student three is null.

69
00:05:07,490 --> 00:05:12,500
It's not referencing an object anymore, so it should give us an Al Pointer exception.

70
00:05:12,980 --> 00:05:15,350
So here I am in the basics directory.

71
00:05:15,350 --> 00:05:16,790
So let me just compile it.

72
00:05:16,970 --> 00:05:17,930
Student.

73
00:05:23,790 --> 00:05:26,910
So it gives us this exceptional point of exception.

74
00:05:27,150 --> 00:05:32,670
So it has created the first student object and it has initialized the state and the compute method is

75
00:05:32,670 --> 00:05:33,810
printing the state.

76
00:05:33,930 --> 00:05:39,270
Similarly, for the second student object, also the state is being printed, but when it came to the

77
00:05:39,270 --> 00:05:46,370
third student object here at line 66, it is giving us this exception or error at runtime.

78
00:05:46,380 --> 00:05:48,660
So it is the null pointer exception.

79
00:05:48,660 --> 00:05:51,060
So line 66 is right here.

80
00:05:51,630 --> 00:05:57,300
So when we are trying to execute the statement, we get that particular error because Student three

81
00:05:57,300 --> 00:06:04,050
is null and we cannot, we cannot access any field or a method on a null reference.

82
00:06:04,830 --> 00:06:12,720
It needs to have a proper object so it can be a field or it can be a method, but we would end up with

83
00:06:12,810 --> 00:06:14,340
a null pointer exception.

84
00:06:14,940 --> 00:06:16,260
So that's about it.

85
00:06:16,290 --> 00:06:17,190
Thank you.

86
00:06:17,190 --> 00:06:19,050
And I will see you in the next lecture.

