1
00:00:02,050 --> 00:00:03,020
Hello there.

2
00:00:03,040 --> 00:00:04,240
This is the Motley Crew.

3
00:00:04,240 --> 00:00:05,230
And welcome back.

4
00:00:05,680 --> 00:00:10,720
We now know that platform independence is one of the key benefits of Java.

5
00:00:11,320 --> 00:00:17,530
But before understanding how Java achieves platform independence, we need to first understand what

6
00:00:17,530 --> 00:00:24,580
platform dependency is and to understand platform dependency, we also need to know what compilation

7
00:00:24,580 --> 00:00:25,000
is.

8
00:00:25,600 --> 00:00:29,620
Compilation is a very fundamental concept in computer science.

9
00:00:29,800 --> 00:00:36,130
And if you are new to programming and not completely sure about what compilation is, then this short

10
00:00:36,130 --> 00:00:38,950
discussion on compilation should be very helpful.

11
00:00:39,430 --> 00:00:46,000
But if you are already familiar with programming and clearly understand what compilation is, then feel

12
00:00:46,000 --> 00:00:47,350
free to skip this lecture.

13
00:00:48,980 --> 00:00:53,090
Let's start with absolute basic concepts of a computer.

14
00:00:54,720 --> 00:01:02,370
Every computer has a fixed set of instructions that it understands, and collectively they are referred

15
00:01:02,370 --> 00:01:05,760
to as the instruction set of a computer.

16
00:01:06,390 --> 00:01:14,250
So the CPU would understand these instructions, and a computer program is made up of some of these

17
00:01:14,250 --> 00:01:15,150
instructions.

18
00:01:15,480 --> 00:01:20,940
That is, the instructions help a computer program to perform something meaningful.

19
00:01:21,480 --> 00:01:29,280
Each instruction tells the CPU to perform certain action, and each instruction is basically a sequence

20
00:01:29,280 --> 00:01:30,750
of zeros and ones.

21
00:01:31,350 --> 00:01:34,290
That is an instruction has a binary format.

22
00:01:36,100 --> 00:01:40,930
Such instructions that computer understands is called as machine language.

23
00:01:41,200 --> 00:01:48,430
That is the language which a machine understands, just like the way we humans understand our languages.

24
00:01:49,120 --> 00:01:55,720
Machine language is also referred to as machine code and is sometimes also referred to as native code.

25
00:01:56,470 --> 00:02:00,850
And here is an example machine instruction which performs additional operation.

26
00:02:01,730 --> 00:02:06,110
The six digits on the right specify that it is an ADD operation.

27
00:02:07,140 --> 00:02:11,400
Now a computer program would involve many such instructions.

28
00:02:12,250 --> 00:02:20,320
And obviously it would be very frustrating for someone to write and also read such instructions which

29
00:02:20,320 --> 00:02:22,270
have only zeros and ones.

30
00:02:22,510 --> 00:02:26,470
So it's very cumbersome and it's got to be simpler than this.

31
00:02:27,010 --> 00:02:33,340
So computer scientists came up with another language called assembly language, which was much more

32
00:02:33,340 --> 00:02:35,050
easier to read and write.

33
00:02:36,080 --> 00:02:41,540
And here is an example to add to numbers, which is much more expressive than the machine code.

34
00:02:42,140 --> 00:02:49,310
So assembly language provides certain higher level notations for writing instructions like AD in this

35
00:02:49,310 --> 00:02:49,820
case.

36
00:02:50,390 --> 00:02:53,690
But computers understand only machine language.

37
00:02:53,720 --> 00:02:56,060
They do not understand assembly language.

38
00:02:56,740 --> 00:03:03,460
So there's a program called assembler that translates assembly language instructions into machine language

39
00:03:03,460 --> 00:03:06,010
instructions, which a computer can understand.

40
00:03:07,340 --> 00:03:14,330
Both machine language and assembly language are referred to as low level languages, and that's because

41
00:03:14,330 --> 00:03:17,510
they use low level details of a computer.

42
00:03:18,080 --> 00:03:23,780
One example would be specifying the memory location where we are storing data.

43
00:03:24,600 --> 00:03:28,650
But writing programs, even in assembly language, is still tedious.

44
00:03:29,160 --> 00:03:34,290
So programmers wanted programs to be expressed in a more easier way.

45
00:03:34,860 --> 00:03:37,890
And they also wanted to hide low level details.

46
00:03:38,830 --> 00:03:47,050
So in time they came up with high level languages and some example high level languages include Fortran,

47
00:03:47,080 --> 00:03:55,960
C, C++, Java and C sharp, and they use English like words like public, private and so on.

48
00:03:56,020 --> 00:04:01,960
Mathematical notations like plus and minus and punctuations to write programs.

49
00:04:02,530 --> 00:04:06,640
So they are much more easier to write and read, as we will see in this course.

50
00:04:07,150 --> 00:04:09,430
And here is an example Java program.

51
00:04:10,000 --> 00:04:18,040
As you can see, it uses English words like public and addition operation here, using the symbol plus

52
00:04:18,370 --> 00:04:21,730
and a punctuation here in the form of semicolon.

53
00:04:23,470 --> 00:04:27,280
And of course, they also hide low level details of the computer.

54
00:04:27,910 --> 00:04:32,620
So today we mostly use only high level programming languages.

55
00:04:33,030 --> 00:04:38,860
Assembly language is not used very much and is used only where performance is critical, like in the

56
00:04:38,860 --> 00:04:42,430
case of operating systems of electronic devices.

57
00:04:43,980 --> 00:04:51,220
And in terms of terminology, source code is the term that is used to refer to any code expressed in

58
00:04:51,220 --> 00:04:52,560
a programming language.

59
00:04:53,100 --> 00:04:59,280
So source code is nothing but the programs that we write, like the Java program that we see here.

60
00:04:59,820 --> 00:05:03,630
And many times in this course, I would be using that term source code.

61
00:05:04,350 --> 00:05:10,480
Now, like in the case of SM, the language source code cannot also be understood by a computer.

62
00:05:10,500 --> 00:05:13,590
So we need to translate source code into machine language.

63
00:05:14,660 --> 00:05:16,850
And that's where compiler comes in.

64
00:05:17,150 --> 00:05:23,570
So the translation from source code to machine code is done by this program called Compiler Machine

65
00:05:23,570 --> 00:05:29,990
Code, which is the executable program is then executed directly by the CPU in a separate step.

66
00:05:30,530 --> 00:05:34,910
So compilation and execution are two different steps.

67
00:05:35,300 --> 00:05:42,950
First compilation is performed in order to translate source code into machine code, and then separately

68
00:05:43,100 --> 00:05:45,290
the machine code will be executed.

69
00:05:46,040 --> 00:05:51,740
Now note that in this illustration we are calling the translated language as target language and not

70
00:05:51,740 --> 00:05:52,790
machine language.

71
00:05:53,270 --> 00:05:56,570
That's because in some cases it may be something else too.

72
00:05:57,780 --> 00:06:02,460
For example, in the case of C or C++, target language would be machine code.

73
00:06:02,700 --> 00:06:08,250
However, in Java case it is Java bytecode, which will be discussed later.

74
00:06:08,610 --> 00:06:13,230
Sometimes target language can also be another programming language.

75
00:06:13,800 --> 00:06:21,090
For example, closure script is a language and it comes with a compiler which compiles closure script

76
00:06:21,090 --> 00:06:25,290
programs into JavaScript, which is a different language.

77
00:06:25,680 --> 00:06:32,580
Such compilers are also referred to as source to source compilers or trans compilers.

78
00:06:32,820 --> 00:06:36,900
Source to source because it is converting one source code into another.

79
00:06:36,900 --> 00:06:37,590
Source code.

80
00:06:39,010 --> 00:06:43,030
And there are some core operations that a compiler performs.

81
00:06:43,060 --> 00:06:44,800
And let's see what those are.

82
00:06:45,780 --> 00:06:52,710
Verifying syntax and semantics of the source code is one of them, and this ensures that the source

83
00:06:52,710 --> 00:06:56,670
code complies with the rules of the programming language.

84
00:06:57,120 --> 00:07:04,470
For example, a program is made up of statements, and in the case of Java, every statement must end

85
00:07:04,470 --> 00:07:05,670
with this semicolon.

86
00:07:06,150 --> 00:07:08,940
So that's a rule of Java programming language.

87
00:07:09,270 --> 00:07:16,170
And if a statement doesn't end with a semicolon, then the compiler detects it as a syntactic error

88
00:07:16,200 --> 00:07:17,880
and reports it to the developer.

89
00:07:18,900 --> 00:07:22,130
For example, here is a statement in Java that prints the text.

90
00:07:22,140 --> 00:07:22,710
Hello.

91
00:07:22,860 --> 00:07:26,130
And as you can see, the statement ends in semicolon.

92
00:07:26,160 --> 00:07:31,320
And if we omit the semicolon, then the compiler reports it as a syntax error.

93
00:07:32,090 --> 00:07:34,340
Semantics is about meaning.

94
00:07:35,110 --> 00:07:42,790
For example, in Java we write our programs as classes and the class can also have something called

95
00:07:42,790 --> 00:07:48,940
a subclass, which is just another class, but a specialized version of the original class.

96
00:07:49,740 --> 00:07:58,050
But if it declare the class with a keyword called final, then the compiler ensures that the class cannot

97
00:07:58,050 --> 00:07:59,430
have a subclass.

98
00:07:59,760 --> 00:08:05,520
So if we happen to define a subclass, then the compiler reports it as an error.

99
00:08:06,350 --> 00:08:13,730
So that's how the compiler is ensuring that the semantics associated with the final keyword is being

100
00:08:13,730 --> 00:08:14,630
respected.

101
00:08:14,990 --> 00:08:16,580
It's not being violated.

102
00:08:18,060 --> 00:08:24,870
Compilers also perform certain code optimizations for faster execution of the program.

103
00:08:25,380 --> 00:08:27,120
Certain compilers do that.

104
00:08:28,310 --> 00:08:33,230
And finally it generates machine code from the intermediate optimized code.

105
00:08:33,679 --> 00:08:37,580
So the optimization is done and then the machine code is generated from that.

106
00:08:38,330 --> 00:08:44,900
A compiler is a very complex program and these code operations are basic operations that any compiler

107
00:08:44,900 --> 00:08:45,560
supports.

108
00:08:46,310 --> 00:08:53,060
And as you will see in this course, a Java compiler performs tons of additional operations to ease

109
00:08:53,060 --> 00:08:54,380
the programmers task.

110
00:08:55,220 --> 00:08:59,780
So the compilation process can be slow due to the complexity in translation.

111
00:09:00,110 --> 00:09:07,970
However, once compiled, machine code execution will be very fast and the machine code can be executed

112
00:09:07,970 --> 00:09:10,610
any time and any number of times.

113
00:09:11,090 --> 00:09:15,560
But any change to the source code requires complete recomposition.

114
00:09:16,430 --> 00:09:23,270
Next we will look at platform dependency, which will also give you an idea on how a C program is compiled

115
00:09:23,270 --> 00:09:25,280
on Windows and Linux machines.

116
00:09:25,580 --> 00:09:30,800
We're not going to write any code for the discussion, but towards the end of the chapter we will write,

117
00:09:30,800 --> 00:09:34,130
compile and execute our first Java program.

118
00:09:34,730 --> 00:09:39,020
So in this chapter we will write only one program.

119
00:09:39,020 --> 00:09:45,110
But as the course progresses, starting from the next section, they will write lots of programs.

120
00:09:45,650 --> 00:09:46,860
So that's about it.

121
00:09:46,880 --> 00:09:47,610
Thank you.

122
00:09:47,630 --> 00:09:50,240
And next, we will look at platform dependency.

