WEBVTT
1
00:00:02.050 --> 00:00:03.070
Hi there.

2
00:00:03.100 --> 00:00:04.320
This is the De La Rue.

3
00:00:04.330 --> 00:00:05.290
And welcome back.

4
00:00:05.440 --> 00:00:11.710
Let's now quickly look at a related construct called constructor references, which are similar to method

5
00:00:11.710 --> 00:00:12.520
references.

6
00:00:12.880 --> 00:00:18.730
Method references we know are references to methods and are assigned to functional interfaces.

7
00:00:18.940 --> 00:00:26.110
Similarly, constructor references, as the name implies, are references to constructors and they are

8
00:00:26.110 --> 00:00:28.510
also assigned to functional interfaces.

9
00:00:29.380 --> 00:00:29.830
Constructor.

10
00:00:29.830 --> 00:00:35.680
References are used for constructing objects because they are references to constructors and that's

11
00:00:35.680 --> 00:00:36.850
what constructors do.

12
00:00:37.660 --> 00:00:38.650
Syntax wise.

13
00:00:38.650 --> 00:00:43.090
Both method references and constructor references are very similar to each other.

14
00:00:43.420 --> 00:00:49.270
With method references, we have the target reference type, which is then followed by the delimiter,

15
00:00:49.270 --> 00:00:52.150
the two columns which is then followed by the method name.

16
00:00:52.960 --> 00:00:58.510
And with constructor references we have the class name followed by the same delimiter, the two columns

17
00:00:58.510 --> 00:01:00.670
which is then followed by the new keyword.

18
00:01:01.450 --> 00:01:07.960
And we know that new keyword is what is used to invoke constructor code and so the same new keyword

19
00:01:07.960 --> 00:01:10.990
has been retained for constructor references.

20
00:01:11.800 --> 00:01:19.090
So this is going to be a short demo and some of the subsequent lectures on stream API, we will be looking

21
00:01:19.090 --> 00:01:24.100
at constructive references to at certain points, we will be using constructor references.

22
00:01:24.610 --> 00:01:28.450
So let's just go ahead and look at constructor references in action.

23
00:01:28.720 --> 00:01:31.600
So this is the Functional Interface demo.

24
00:01:31.990 --> 00:01:35.650
So I have commented out most of the code in the main method.

25
00:01:35.770 --> 00:01:41.620
So here we have a few statements where we are going to use constructor references.

26
00:01:41.710 --> 00:01:46.240
And initially here we are constructing some objects and we are using lambdas.

27
00:01:46.540 --> 00:01:50.290
Now we are going to change this lambdas into constructor references.

28
00:01:50.800 --> 00:01:58.420
So in the first statement here we are constructing an empty string and it is being assigned to a supplier

29
00:01:58.810 --> 00:02:02.680
and supplier we know is used for constructing objects.

30
00:02:02.680 --> 00:02:04.480
That is, it supplies objects.

31
00:02:04.930 --> 00:02:07.600
And here in this case it is going to supply a string.

32
00:02:08.050 --> 00:02:14.350
So in the print statement we are invoking the get method on the supplier and the get method would return

33
00:02:14.380 --> 00:02:15.850
a string object.

34
00:02:16.030 --> 00:02:17.350
So this is a lambda.

35
00:02:17.350 --> 00:02:21.730
So let's just go ahead and change it to a constructor reference.

36
00:02:23.070 --> 00:02:23.820
So that's it.

37
00:02:23.830 --> 00:02:29.190
So we have the class name followed by the two columns, which is then followed by the new keyword.

38
00:02:29.820 --> 00:02:33.290
So the syntax is very similar to method references.

39
00:02:33.300 --> 00:02:39.720
In fact, it is more similar to static method references, references to static methods because we are

40
00:02:39.720 --> 00:02:42.750
using the class name and static method references.

41
00:02:42.750 --> 00:02:46.350
Also use class name as a prefix to the delimiter.

42
00:02:47.290 --> 00:02:47.680
Okay.

43
00:02:47.710 --> 00:02:49.330
So this is how it is done.

44
00:02:49.360 --> 00:02:56.170
Now, here, in the second example, we are once again constructing a string object, but here we are

45
00:02:56.170 --> 00:02:59.980
invoking the overloaded version of the string constructor.

46
00:03:00.160 --> 00:03:05.200
So we are passing a string and this is returning a string instance.

47
00:03:05.650 --> 00:03:13.840
So here we are assigning it to a function because function is going to take a string in this case and

48
00:03:13.840 --> 00:03:16.420
is going to return another string instance.

49
00:03:16.540 --> 00:03:18.280
So that is what is happening here.

50
00:03:18.310 --> 00:03:22.270
The input is string and the output is also a string.

51
00:03:22.270 --> 00:03:24.220
So this is what is going to be written.

52
00:03:24.520 --> 00:03:26.230
So this is the string here.

53
00:03:26.230 --> 00:03:28.430
This is the input and this is the output.

54
00:03:28.450 --> 00:03:30.580
And we know that that's what function does.

55
00:03:30.580 --> 00:03:34.390
It takes an input and transforms it into another object.

56
00:03:34.690 --> 00:03:36.280
So that's what is happening here.

57
00:03:36.280 --> 00:03:41.710
And so here in the print statement, we are invoking the apply method and we are passing Java as an

58
00:03:41.710 --> 00:03:45.610
input and the output would be a string object with Java.

59
00:03:46.580 --> 00:03:48.820
And here in the third example.

60
00:03:48.830 --> 00:03:50.870
So let me just go ahead and change this.

61
00:03:51.570 --> 00:03:56.790
So even here, it's going to be the same syntax for constructor reference.

62
00:03:57.720 --> 00:04:04.200
It's going to be the same as the previous one, even though it is going to invoke the overloaded constructor.

63
00:04:04.470 --> 00:04:10.650
So the decision onto which constructor to invoke is based on the context.

64
00:04:10.680 --> 00:04:14.550
In this case, the context is here a supplier.

65
00:04:14.880 --> 00:04:20.940
So supplier does not take any parameters and it just produces an object.

66
00:04:21.300 --> 00:04:24.530
So it's going to invoke a no constructor.

67
00:04:24.540 --> 00:04:30.780
So in this case, it's going to invoke the no ARG String constructor, whereas in this case, it's going

68
00:04:30.780 --> 00:04:36.690
to invoke the constructor, which takes a single parameter which is off type string and it is going

69
00:04:36.690 --> 00:04:37.760
to return a string.

70
00:04:37.770 --> 00:04:42.300
So in this case, the context helps us in choosing the right constructor.

71
00:04:42.690 --> 00:04:47.340
Now in the third case, we are constructing a hash map here.

72
00:04:47.580 --> 00:04:53.820
And for this, this version of the hash map constructor is invoked, which is taking an initial capacity

73
00:04:53.820 --> 00:04:55.470
and a load factor.

74
00:04:55.980 --> 00:05:02.430
So typically we invoke the hash map method, which does not take any arguments in our constructor,

75
00:05:02.430 --> 00:05:04.440
but in this case, this is what we are doing.

76
00:05:04.560 --> 00:05:06.000
So the input is.

77
00:05:07.010 --> 00:05:12.200
The capacity, which is of type integer and the load factor, which is of type float.

78
00:05:12.230 --> 00:05:14.000
And this is the return value.

79
00:05:14.030 --> 00:05:21.470
Since there are two inputs, we are using a bi function, so it's taking two parameters to arguments

80
00:05:21.470 --> 00:05:24.920
and this constructing a new object which is of type hash map.

81
00:05:25.010 --> 00:05:26.890
So that is what is being done here.

82
00:05:26.900 --> 00:05:28.070
So for this.

83
00:05:30.180 --> 00:05:31.470
This is the syntax.

84
00:05:31.620 --> 00:05:39.150
So we do not pass any arguments here, whether it is constructor references or method references, and

85
00:05:39.150 --> 00:05:45.270
the arguments are actually passed when we are invoking the concerned method on the functional interface.

86
00:05:45.360 --> 00:05:45.930
Right.

87
00:05:46.530 --> 00:05:48.240
So this is what we have here.

88
00:05:49.690 --> 00:05:55.180
But typically you will see such constructive references assigned to supplier.

89
00:05:55.480 --> 00:05:56.680
That's what we will see.

90
00:05:56.890 --> 00:06:00.660
And later also when we are looking at the demos for Stream API.

91
00:06:00.670 --> 00:06:06.820
So there are instances where we are using constructor references and they are all assigned to supplier

92
00:06:06.820 --> 00:06:08.260
supplier functional interface.

93
00:06:09.130 --> 00:06:15.820
Now here what we are doing is we are constructing a string, but it is being assigned to a consumer.

94
00:06:16.030 --> 00:06:22.570
And consumer we know has this method called accept, which takes a single parameter, but the return

95
00:06:22.570 --> 00:06:25.750
type of accept is void, so it's not going to return anything.

96
00:06:26.110 --> 00:06:33.490
So which means that the string object that is going to be created within the accept method will not

97
00:06:33.490 --> 00:06:34.690
return anything.

98
00:06:34.690 --> 00:06:35.110
Right?

99
00:06:35.110 --> 00:06:35.590
It will.

100
00:06:35.590 --> 00:06:41.320
The string object is constructed, but the accept method does not return anything which makes it pointless.

101
00:06:41.320 --> 00:06:49.600
So it is really of no use to assign a string constructor reference to a consumer because the consumer

102
00:06:49.600 --> 00:06:50.860
does not return anything.

103
00:06:51.250 --> 00:06:56.590
So if it was returning some things, an object, just like in the case of supplier or function or by

104
00:06:56.590 --> 00:07:00.310
function, then it makes sense to assign a constructor reference.

105
00:07:00.310 --> 00:07:05.890
But in this case, since the consumer is not going to return anything, it does not make sense to assign

106
00:07:05.890 --> 00:07:06.190
it.

107
00:07:06.190 --> 00:07:10.690
But still it compiles fine and the object will also get created.

108
00:07:10.720 --> 00:07:16.540
It's just that the exit method does not return anything, so making it useless.

109
00:07:17.230 --> 00:07:18.310
So that's the thing.

110
00:07:18.700 --> 00:07:21.750
So here we are using supplier function by function.

111
00:07:21.760 --> 00:07:25.720
Now let's say the object that we need to construct.

112
00:07:25.870 --> 00:07:32.050
Let's say if the constructor takes more than two parameters, let's say it takes four or five parameters

113
00:07:32.050 --> 00:07:33.370
and returns an object.

114
00:07:33.550 --> 00:07:39.610
And if we do not have any standard functional interface representing that kind of a constructor, then

115
00:07:39.610 --> 00:07:45.160
we would have to create our own functional interface and then we would have to assign our constructor

116
00:07:45.160 --> 00:07:47.200
reference to that function interface.

117
00:07:47.530 --> 00:07:53.650
So that's what this comment here says create own interface if existing functional interfaces are not

118
00:07:53.650 --> 00:07:54.220
useful.

119
00:07:54.790 --> 00:07:55.690
So that's about it.

120
00:07:55.690 --> 00:07:57.790
So let me just go ahead and run this.

121
00:07:59.240 --> 00:08:00.080
Here it is.

122
00:08:00.260 --> 00:08:02.240
So the suppliers get here.

123
00:08:02.330 --> 00:08:03.980
It prints an empty string.

124
00:08:03.980 --> 00:08:06.830
So because we are constructing an empty string here.

125
00:08:06.830 --> 00:08:07.610
Empty string.

126
00:08:07.910 --> 00:08:11.090
And it has it just does not have any value.

127
00:08:11.090 --> 00:08:12.560
So it would print an empty string.

128
00:08:12.770 --> 00:08:15.890
So thus in the second example, we are passing Java.

129
00:08:16.100 --> 00:08:22.160
So the string object has the string java and that is what is getting printed here when the function

130
00:08:22.670 --> 00:08:24.320
method is invoked.

131
00:08:24.320 --> 00:08:29.780
So a string object is returned and that string object has the keyword java and that's being printed

132
00:08:29.990 --> 00:08:30.920
in the second.

133
00:08:30.920 --> 00:08:35.510
In the third example, a hash map is being created, but it's an empty hash map.

134
00:08:35.510 --> 00:08:38.510
So we just have these braces here, empty braces.

135
00:08:38.870 --> 00:08:40.220
So that's what it is.

136
00:08:40.370 --> 00:08:47.240
So that's about constructor references and we will see few instances of using constructor references

137
00:08:47.240 --> 00:08:51.890
and some of the subsequent demos that said thank you and happy coding.

