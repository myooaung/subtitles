1
00:00:07,140 --> 00:00:08,189
Hi there.

2
00:00:08,220 --> 00:00:09,520
This is the middle row.

3
00:00:09,540 --> 00:00:10,560
And welcome back.

4
00:00:10,890 --> 00:00:18,030
So far, all our class declarations have been top level classes, but Java also permits nested classes,

5
00:00:18,390 --> 00:00:23,550
that is, classes defined within other classes, classes nested within other classes.

6
00:00:23,970 --> 00:00:30,420
Typically, most courses do not give priority to this topic, and even if they cover, they just explain

7
00:00:30,420 --> 00:00:34,860
the syntax and do not explain where they are commonly used in practice.

8
00:00:35,520 --> 00:00:41,670
Nested classes definitely have a certain place on some of the collections framework classes use them

9
00:00:41,670 --> 00:00:42,960
quite extensively.

10
00:00:43,680 --> 00:00:48,240
As always, we will look at where they are typically used and nested classes.

11
00:00:48,240 --> 00:00:51,870
One needed to improve the design of your classes.

12
00:00:52,440 --> 00:00:56,730
So let's go ahead and look at this important feature and why they are needed.

13
00:00:58,520 --> 00:01:02,420
You may recall this particular slide from our very first introductory chapter.

14
00:01:02,570 --> 00:01:06,590
It shows a different members of a class, and nested classes are one of them.

15
00:01:07,190 --> 00:01:13,190
In fact, we can have nested interfaces too, which can be part of both classes as well as interfaces.

16
00:01:14,140 --> 00:01:16,060
Here is one example of an asset class.

17
00:01:16,090 --> 00:01:22,180
The top level class is named as outer and it has a nested class within it, which is named as inner.

18
00:01:23,680 --> 00:01:27,100
To understand the need for nested classes, let's consider a hash map.

19
00:01:27,430 --> 00:01:31,690
We know that in hash map, each key value pair is called as a mapping.

20
00:01:32,200 --> 00:01:37,660
And if you recall in the hash map implementation, a mapping is referred to as an entry.

21
00:01:39,290 --> 00:01:44,330
An entry is actually a nested interface within the MAP interface.

22
00:01:44,690 --> 00:01:47,930
As mentioned earlier, we can also have nested interfaces.

23
00:01:48,470 --> 00:01:54,740
So in this class diagram we have a square within map to represent the nested type entry.

24
00:01:55,460 --> 00:01:59,900
You may recall that entry interface has methods such as get key and get value.

25
00:02:01,620 --> 00:02:03,720
Now we also have the hash map class.

26
00:02:04,460 --> 00:02:11,390
And if we invoke the entry set method on a hash map instance, it would return a set of all the mappings

27
00:02:11,540 --> 00:02:17,690
that is set off all entries and each entry is an implementation of entry interface.

28
00:02:18,460 --> 00:02:25,030
Now the set is actually a nested class called entry set, which implements the set interface.

29
00:02:25,860 --> 00:02:32,010
Now if we invoke the iterator method on the return set, then it returns an implementation of iterator.

30
00:02:33,170 --> 00:02:39,350
And that implementation is another nested class within hash map and it is named as entry iterator.

31
00:02:39,680 --> 00:02:42,080
So we have entry set and entry iterator.

32
00:02:42,500 --> 00:02:45,860
So entry iterator implements the iterator interface.

33
00:02:47,360 --> 00:02:54,380
Morphine work the next method on the entry iterator, it would return an entry instance, which is the

34
00:02:54,380 --> 00:02:56,210
next mapping in the hash map.

35
00:02:56,570 --> 00:03:03,080
And this entry instance is represented by the class called Node, which is yet another nested class

36
00:03:03,080 --> 00:03:04,130
within hash map.

37
00:03:04,790 --> 00:03:10,460
So this node nested class implements the entry nested interface within the map interface.

38
00:03:10,940 --> 00:03:15,110
So it has methods like get key, get values, set key, set value and so on.

39
00:03:15,950 --> 00:03:22,580
So there are three nested classes within hash map and as of today, it also has five other nested classes.

40
00:03:23,890 --> 00:03:30,340
So the next question is, why cannot we have all these nested classes as separate top level classes

41
00:03:30,340 --> 00:03:32,410
within the same package as hash map?

42
00:03:33,070 --> 00:03:39,700
If we do that, we will have eight additional classes in that package and all eight are used only by

43
00:03:39,730 --> 00:03:40,330
hash map.

44
00:03:40,750 --> 00:03:43,300
That is, no other classes are going to use them.

45
00:03:44,510 --> 00:03:46,700
So it would lead to class pollution.

46
00:03:48,050 --> 00:03:54,710
Also having these classes defined as part of a map tells us clearly that these classes have something

47
00:03:54,710 --> 00:03:56,360
to do with only hash map.

48
00:03:56,780 --> 00:04:00,170
So the functionality is kept closer to the original class.

49
00:04:01,640 --> 00:04:03,380
It would also lead to better design.

50
00:04:03,770 --> 00:04:06,290
We can see that within the hash map class.

51
00:04:06,290 --> 00:04:12,620
These nested classes are modular using the functionality that is without the nested classes, the methods

52
00:04:12,620 --> 00:04:18,380
contained in them would be part of the end cross class and that could lead to method pollution.

53
00:04:19,040 --> 00:04:21,290
So nested classes provide cleaner design.

54
00:04:22,690 --> 00:04:28,780
All in all, an asset class basically serves its end closing class and at the same time leads to better

55
00:04:28,780 --> 00:04:29,560
design to.

56
00:04:30,430 --> 00:04:34,900
We will also see in this chapter some interesting ways in which they are used in the real world.

57
00:04:36,570 --> 00:04:38,610
Here are the different types of mustard classes.

58
00:04:38,790 --> 00:04:40,950
They are classified into two categories.

59
00:04:41,040 --> 00:04:45,930
One is inner classes and the other is referred to as static member classes.

60
00:04:46,260 --> 00:04:51,120
In the classes include non static member classes, anonymous classes and local classes.

61
00:04:51,630 --> 00:04:55,890
We are going to discuss all of these and how they are typically used in the real world.

62
00:04:56,580 --> 00:05:01,020
Local classes are very rarely used, so we will discuss them very briefly.

63
00:05:01,710 --> 00:05:07,620
One main distinction between inert classes and static member classes is that static member classes,

64
00:05:07,620 --> 00:05:11,520
as the name implies, can never access the instance.

65
00:05:11,520 --> 00:05:13,440
Members of the enclosing class.

66
00:05:14,270 --> 00:05:19,700
In Narcosis, on the other hand, can access the instance members of the enclosing class.

67
00:05:19,940 --> 00:05:26,720
Only exception is when anonymous classes and local classes are part of static context, like a static

68
00:05:26,720 --> 00:05:30,560
method, in which case they cannot access instance members.

69
00:05:31,330 --> 00:05:36,520
Non static member classes can always access instance members of the enclosing class.

70
00:05:38,480 --> 00:05:42,470
In the follow up lessons, we'll be looking at the different nested classes.

71
00:05:42,710 --> 00:05:46,670
However, there are certain properties common to all the nested classes.

72
00:05:46,670 --> 00:05:47,930
And let's look at them now.

73
00:05:48,470 --> 00:05:50,330
This one is about access levels.

74
00:05:50,480 --> 00:05:56,990
Nested classes can be declared with all the four access levels, private, default, protected and public,

75
00:05:57,020 --> 00:05:58,880
just like any class member.

76
00:05:59,880 --> 00:06:03,960
Recall that top level classes can only be either public or default.

77
00:06:05,760 --> 00:06:12,310
Next property is that there is mutual accessibility of members, including private members.

78
00:06:12,330 --> 00:06:16,230
So a nested class can access any member of outer class.

79
00:06:16,230 --> 00:06:21,990
And similarly, an outer class can also access any member of the nested class.

80
00:06:22,680 --> 00:06:25,020
Outer can access any member of nested.

81
00:06:25,020 --> 00:06:31,320
Because if nested class was not there, then all that functionality would have been part of the outer

82
00:06:31,320 --> 00:06:31,920
class.

83
00:06:33,930 --> 00:06:40,260
Finally note that when we have a class nested within another class, then the Java compiler will produce

84
00:06:40,260 --> 00:06:44,880
two class files one for our class, and the other would be for nested class.

85
00:06:45,150 --> 00:06:52,410
Outer would be just outer class, while nested would be generated with the name outer nested class.

86
00:06:52,680 --> 00:06:57,840
Where outer are nested here are just class names of outer class and nested class.

87
00:06:59,040 --> 00:07:05,550
However, in case of anonymous classes, outer would still be outer class, while an anonymous class

88
00:07:05,550 --> 00:07:08,640
would be outer dollar one class.

89
00:07:09,120 --> 00:07:15,060
If there are multiple anonymous classes, then there would be outer one class, outer two class and

90
00:07:15,060 --> 00:07:15,600
so on.

91
00:07:16,170 --> 00:07:21,510
But for the other three nested classes, it would be outer class name or nested class name.

92
00:07:22,170 --> 00:07:28,080
It is just that, as we will see later, anonymous classes do not have names and so numeric values are

93
00:07:28,080 --> 00:07:28,590
used.

94
00:07:29,390 --> 00:07:30,560
So that's about it.

95
00:07:30,800 --> 00:07:36,800
And we will be discussing all the foreign asset classes and most importantly, where they are most commonly

96
00:07:36,800 --> 00:07:37,190
used.

97
00:07:37,850 --> 00:07:40,970
We will also discuss a couple of important effective Java items.

98
00:07:41,540 --> 00:07:46,790
Let me also quickly pull up a hash map class so that we can look at some of the nested classes that

99
00:07:46,790 --> 00:07:48,170
were highlighted earlier.

100
00:07:50,570 --> 00:07:50,810
Okay.

101
00:07:50,840 --> 00:07:58,580
Here we are in the hash map class and within the hash map class, if we invoke the entry set, it would

102
00:07:59,030 --> 00:07:59,930
call this.

103
00:08:01,030 --> 00:08:01,500
Here it is.

104
00:08:01,510 --> 00:08:08,080
Here is the entry set method and it is creating an instance of this entry set which is simply a nested

105
00:08:08,080 --> 00:08:10,120
class with ten hash map.

106
00:08:10,990 --> 00:08:20,080
An entry set here has all these methods, and if you invoke the iterator method on the set, then it

107
00:08:20,080 --> 00:08:27,760
would create an instance of entry iterator and entry iterator is also another nested class within hash

108
00:08:27,760 --> 00:08:28,180
map.

109
00:08:28,180 --> 00:08:31,750
So it says hash map and tree iterator.

110
00:08:33,190 --> 00:08:40,240
And within the entry iterator method we have these methods and if we invoke the next method, it is

111
00:08:40,240 --> 00:08:45,070
invoking something called next node, which actually returns the node.

112
00:08:46,930 --> 00:08:53,410
Are not is actually a static member class and hence this it has the keyword static and it is an asset

113
00:08:53,410 --> 00:08:55,750
class once again within hash map.

114
00:08:56,440 --> 00:08:59,970
So the other classes did not have the static keyword.

115
00:08:59,980 --> 00:09:06,460
So they are non static member classes and static member classes have this keyword static and we will

116
00:09:06,460 --> 00:09:07,960
look at all of that later.

117
00:09:08,560 --> 00:09:10,090
So just wanted to show that.

118
00:09:10,090 --> 00:09:16,420
So that's about nested classes and let's get started with the chapter and learn all about nested classes.

119
00:09:16,660 --> 00:09:17,290
Thank you.

