1
00:00:02,190 --> 00:00:02,990
Hi there.

2
00:00:03,000 --> 00:00:04,230
This is Lulu.

3
00:00:04,230 --> 00:00:05,190
And welcome back.

4
00:00:05,640 --> 00:00:10,140
Let's now look at the new data API, which was introduced in Java eight.

5
00:00:10,680 --> 00:00:14,810
This new API is represented by a package called Java Time.

6
00:00:15,770 --> 00:00:21,770
We will first discuss a bit about the core classes and then later in the subsequent lecture we will

7
00:00:21,770 --> 00:00:23,510
see them in action in the demo.

8
00:00:25,350 --> 00:00:29,310
First, let's do a quick recap of the limitations of the Legacy API.

9
00:00:29,580 --> 00:00:34,560
Many of the things that can be done with the new API are also possible with the legacy API.

10
00:00:35,230 --> 00:00:41,610
And so it is important for us to be very clear about the limitations of the old API and how the new

11
00:00:41,610 --> 00:00:43,500
API is going to address them.

12
00:00:44,160 --> 00:00:50,460
Since we are going to learn about the new API which is going to replace an old API, it is important

13
00:00:50,460 --> 00:00:53,970
for us to know what the limitations of the old API are.

14
00:00:54,450 --> 00:00:59,940
All right, we need to know what old API is bad at and how the new API is going to address it.

15
00:01:01,380 --> 00:01:08,730
One of the limitations is that a date in the old API would include both date as well as time components.

16
00:01:09,510 --> 00:01:14,340
So if we just need only time without the date, then it would not be possible.

17
00:01:14,610 --> 00:01:19,320
Similarly, if we need only date without time, then that is also not possible.

18
00:01:19,980 --> 00:01:27,690
Now, even if you create a date instance by specifying only the date components like year, month and

19
00:01:27,690 --> 00:01:35,280
date the date instance which is the Java date instance, would still include time by default.

20
00:01:35,700 --> 00:01:42,240
It is just that the time components would be initialized to zero, so it would be zero, 4 hours, minutes

21
00:01:42,240 --> 00:01:43,320
and seconds.

22
00:01:45,000 --> 00:01:45,330
Next.

23
00:01:45,330 --> 00:01:50,880
We know that that year component in the date class has the confusing offset of 1900.

24
00:01:51,030 --> 00:01:51,570
Right.

25
00:01:52,530 --> 00:01:55,700
And we also know that the range of month is 0 to 11.

26
00:01:55,710 --> 00:02:01,200
And this is also confusing and it applies to both date as well as calendar classes.

27
00:02:02,980 --> 00:02:06,430
Next, the confusion is around which of the two classes to use.

28
00:02:06,910 --> 00:02:10,120
That class is still retained for backward compatibility.

29
00:02:10,880 --> 00:02:16,910
So if the developer is not very familiar with the legacy API, then he or she might be confused about

30
00:02:16,910 --> 00:02:18,500
which of the two classes to use.

31
00:02:19,850 --> 00:02:24,460
And the classes in the old API are mutable and so they are not threats if.

32
00:02:26,380 --> 00:02:33,760
So Java eight introduced the new data API and it is in the new package called Java dot time and it was

33
00:02:33,760 --> 00:02:39,490
inspired by the third party library called JIRA Time, which we briefly discussed earlier.

34
00:02:39,790 --> 00:02:44,350
And many of the features from our time are actually integrated into the new API.

35
00:02:44,920 --> 00:02:50,320
In fact, the Time website itself suggests us to migrate to the new data and time API.

36
00:02:51,130 --> 00:02:58,120
Performance wise, it seems that the new API is faster than the time API in many areas and also the

37
00:02:58,120 --> 00:03:01,510
new API should also be faster than legacy API.

38
00:03:02,290 --> 00:03:08,590
Note that time was mainly used by programmers who are not happy with the old legacy API.

39
00:03:09,280 --> 00:03:16,630
It was also discussed earlier that the new API is based on the ISO 80 601 calendar system, which is

40
00:03:16,630 --> 00:03:18,490
what the civil world uses today.

41
00:03:19,060 --> 00:03:25,900
And it is same as the prolific Gregorian calendar in which the current rules for LEAP years are applied

42
00:03:25,900 --> 00:03:27,160
for all dates.

43
00:03:27,900 --> 00:03:34,410
But if you need accurate historic dates, which predate the year 1582, which is when the Gregorian

44
00:03:34,410 --> 00:03:38,220
calendar was introduced, then this calendar would not be suitable.

45
00:03:39,500 --> 00:03:39,800
Next.

46
00:03:39,800 --> 00:03:43,940
Most of the classes are also immutable, so they are safe.

47
00:03:44,840 --> 00:03:47,480
Finally, there are no public constructors.

48
00:03:47,780 --> 00:03:51,920
Static factory methods are used to construct date and time objects.

49
00:03:52,490 --> 00:03:58,400
One example is a static factory method named off and we will look at it in our demo.

50
00:03:59,830 --> 00:04:06,340
In fact, the very first item in the effective Java book recommends us to consider using static factory

51
00:04:06,340 --> 00:04:09,220
methods before considering constructors.

52
00:04:10,060 --> 00:04:10,900
If possible.

53
00:04:10,900 --> 00:04:15,610
Later, we will briefly look at the advantages of using static factory methods.

54
00:04:17,450 --> 00:04:24,080
And here are the most commonly used classes and you can find all of them in the Java package and very

55
00:04:24,080 --> 00:04:27,140
soon we will do a demo in which we will use all of these.

56
00:04:27,800 --> 00:04:35,360
Now first one here is the local date and it represents a date in the ISO 8601 calendar system.

57
00:04:35,990 --> 00:04:40,400
It doesn't have either the time component or the time zone information.

58
00:04:41,440 --> 00:04:48,250
Second is local time, and it represents only time in the ISO 8601 calendar system.

59
00:04:48,760 --> 00:04:53,020
So it doesn't have either the date component or the time zone information.

60
00:04:53,960 --> 00:04:55,760
Next is local datetime.

61
00:04:55,760 --> 00:05:01,880
And as you may guess, it includes both date and time, but not the time zone information.

62
00:05:02,480 --> 00:05:05,720
So it is a composition of both date and time.

63
00:05:06,640 --> 00:05:09,040
Fourth is zone datetime.

64
00:05:09,040 --> 00:05:14,050
And this includes everything that is daytime and also time zone.

65
00:05:14,940 --> 00:05:18,750
Under is similar to the Gregorian calendar class in the old API.

66
00:05:19,530 --> 00:05:27,270
First, this instant class and it represents a single instantaneous point on that timeline and it can

67
00:05:27,270 --> 00:05:31,110
be used for recording things like event timestamps.

68
00:05:31,740 --> 00:05:39,270
This class is analogous to the date class in the old API, so even that class represents a point on

69
00:05:39,270 --> 00:05:40,230
the timeline.

70
00:05:40,650 --> 00:05:42,090
So it doesn't appear so.

71
00:05:42,090 --> 00:05:45,420
But date class actually represents a point on the timeline.

72
00:05:45,510 --> 00:05:52,770
And using that point on the timeline, date class returns the different components like year, month,

73
00:05:52,770 --> 00:05:54,060
hour and so on.

74
00:05:54,780 --> 00:06:00,510
That is, there is a conversion from the point on the timeline to date and time components that are

75
00:06:00,510 --> 00:06:02,430
understandable to humans.

76
00:06:04,250 --> 00:06:10,680
And all these classes implement an interface called Temporal, which is part of the package Java dot,

77
00:06:11,090 --> 00:06:12,050
dot, temporal.

78
00:06:12,590 --> 00:06:16,040
So these classes are inside the Java Time package.

79
00:06:16,160 --> 00:06:21,230
Well, the interface that they're implementing is part of a sub package called temporal.

80
00:06:21,920 --> 00:06:27,590
And the interface is named as temporal as all these classes are actually temporal objects.

81
00:06:27,590 --> 00:06:28,220
Right.

82
00:06:28,250 --> 00:06:32,510
In other words, temporal means there is the concept of time involved.

83
00:06:33,490 --> 00:06:36,970
Later you can check out the common methods that this interface defines.

84
00:06:37,120 --> 00:06:43,270
It has some methods such as plus, minus and so on, in order to adjust the temporal objects.

85
00:06:45,020 --> 00:06:49,940
Now, this temporal interface also extends another interface called temporal access.

86
00:06:50,750 --> 00:06:57,800
And this interface includes only read methods as the term access and temporal access suggests.

87
00:06:59,400 --> 00:07:03,900
And there are also two other commonly used classes called Duration and Period.

88
00:07:04,600 --> 00:07:08,920
As the names imply, these classes represent an amount of time.

89
00:07:09,460 --> 00:07:14,710
For example, duration represents duration between two points of time.

90
00:07:14,980 --> 00:07:16,780
Write to events on the timeline.

91
00:07:17,350 --> 00:07:24,060
So it would be duration between two instances of the instant class period.

92
00:07:24,070 --> 00:07:27,310
On the other hand, represents interval between two dates.

93
00:07:27,880 --> 00:07:31,210
So period is something which is associated with date.

94
00:07:31,360 --> 00:07:37,240
For instance, if you want to compute age of a person, you would consider the interval between the

95
00:07:37,240 --> 00:07:39,730
current date and the person's birthday.

96
00:07:40,400 --> 00:07:44,810
So period is associated with date while duration is associated with time.

97
00:07:46,450 --> 00:07:53,470
Now as these classes represent the amount of time both of them implement an interface called temporal

98
00:07:53,470 --> 00:07:57,610
amount, which is also from the Java time dot temporal package.

99
00:07:59,310 --> 00:08:03,360
And here is the date time format in ISO 8601.

100
00:08:03,900 --> 00:08:10,260
So we have date followed by the character T, which is then followed by time, which is in turn followed

101
00:08:10,260 --> 00:08:11,760
by zone offset.

102
00:08:12,970 --> 00:08:14,920
And here is an example here.

103
00:08:14,920 --> 00:08:23,200
The date is July 3rd, 2017, and the individual elements of the date component are separated by hyphen.

104
00:08:24,290 --> 00:08:33,169
Time is 1 a.m. and the offset from GMT or UTC is minus 7 hours, which corresponds to Los Angeles area

105
00:08:33,169 --> 00:08:36,919
in the United States, which is also referred to as Pacific Time.

106
00:08:37,820 --> 00:08:41,630
We can see that the elements of the time component are separated by columns.

107
00:08:42,200 --> 00:08:47,180
So the separator is hyphen incase of date while it is colon in case of time.

108
00:08:48,870 --> 00:08:54,540
Now, if you print an instance of the zoned date time class, then we get such an output with all the

109
00:08:54,540 --> 00:08:57,990
information and we will look at this later in the demo.

110
00:08:59,470 --> 00:09:04,450
If it print an instance of local debt, then we get only the debt part of the string.

111
00:09:05,390 --> 00:09:09,920
And if you print an instance of local time, then we get only the time part of the string.

112
00:09:11,350 --> 00:09:15,520
And if you print a local date time, then both date and time are included.

113
00:09:17,150 --> 00:09:22,160
Finally, here is another example and this represents the UTC time itself.

114
00:09:22,810 --> 00:09:27,490
In this case, instead of an offset, we have the character Z at the end.

115
00:09:27,880 --> 00:09:31,060
So Z implies UTC or GMT.

116
00:09:31,690 --> 00:09:38,080
So that's the ISO 86014, Matt and Java eight, and we need to be aware of it.

117
00:09:38,380 --> 00:09:42,610
Otherwise it could be a bit confusing looking at such kind of a string.

118
00:09:43,270 --> 00:09:44,410
So that's about it.

119
00:09:44,440 --> 00:09:46,960
And we looked at the code classes in the new API.

120
00:09:46,990 --> 00:09:50,680
Next we will do a demo and we will look at all of them in action.

121
00:09:50,890 --> 00:09:51,580
Thank you.

