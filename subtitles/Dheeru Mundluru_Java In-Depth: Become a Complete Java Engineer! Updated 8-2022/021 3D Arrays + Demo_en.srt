1
00:00:00,950 --> 00:00:06,810
Women from the dimensions higher than two dimensions are pretty rare in practice but you'll get a really

2
00:00:06,810 --> 00:00:11,120
firm grasp of how adding new dimensions would impact the syntax.

3
00:00:11,430 --> 00:00:14,030
Let's take a quick look at a 3D art.

4
00:00:15,270 --> 00:00:20,240
Let's take an example of an electronic store who says that is represented by it data.

5
00:00:20,850 --> 00:00:27,940
So what you see here is a data you usually data warehousing software store data and such debacles.

6
00:00:28,200 --> 00:00:31,020
And this group has three dimensions Sleepy's.

7
00:00:31,170 --> 00:00:33,100
I mean months on products.

8
00:00:33,600 --> 00:00:40,050
So the store sells what products under how franchises and force it is and this only shows that for four

9
00:00:40,050 --> 00:00:48,180
months from John to April it actually dies matter if the units sort in this diagram 850 implies that

10
00:00:48,390 --> 00:00:56,070
850 iPads were sold in the month of April in New York stood alone all that 11 dimensions are highlighted

11
00:00:56,070 --> 00:00:57,040
in green.

12
00:00:57,120 --> 00:01:02,550
Such a Data Group which has three images can be implemented using it truly array.

13
00:01:03,840 --> 00:01:10,200
If we call this as Miami and if cities are present first dimension I'm leapers in second dimension on

14
00:01:10,200 --> 00:01:12,000
products represent third dimension.

15
00:01:12,240 --> 00:01:19,260
Then my aread in index 0 3 and Bruhn would read and the value 858 shown in their diagram.

16
00:01:19,260 --> 00:01:24,420
So zero in the first bucket corresponds to New York three in the second bracket got a sponsor to April

17
00:01:24,500 --> 00:01:30,940
on one in the third bracket got to Spawn's do I buy like in the case of one dimensional.

18
00:01:30,960 --> 00:01:37,320
Or is there are three ways to create 3-D arrays and they also use a similar syntax.

19
00:01:38,110 --> 00:01:39,690
And this is a fun way to do it.

20
00:01:39,840 --> 00:01:44,100
And by now we should be very familiar with the first dimension that was in cities.

21
00:01:44,130 --> 00:01:51,050
Second time on products and we can initialize it this way.

22
00:01:51,050 --> 00:01:54,190
And here is an illustration of a lot through the area here.

23
00:01:54,270 --> 00:02:00,780
The second layer represents the first dimension which is cities and the first rectangle in the CPC corresponds

24
00:02:00,780 --> 00:02:08,580
to New York New York references next dimension richest time in months and each in a triangle represents

25
00:02:08,580 --> 00:02:15,460
a month on each slot in the rectangle can be viewed as a third dimension which is part X the value in

26
00:02:15,460 --> 00:02:19,370
the slot is the number of units of that product sold.

27
00:02:19,410 --> 00:02:23,330
The diagram also illustrates the example D-W which is a trophy.

28
00:02:23,360 --> 00:02:28,570
A trophy is a number of i-Pad sold in the month of April in New York City alone.

29
00:02:29,190 --> 00:02:34,550
The index numbers to look at this data are shown in blue zero corresponds to a New York trigona wants

30
00:02:34,550 --> 00:02:38,580
to appear on one corresponds to IPART.

31
00:02:38,580 --> 00:02:43,280
Now if you recall a discussion on bullier is we had a slide with similar illustration.

32
00:02:43,380 --> 00:02:50,040
Even then the second layer represented the first dimension which is Rowse on the element in each rectangle

33
00:02:50,110 --> 00:02:52,620
was basically the second dimension.

34
00:02:52,620 --> 00:02:54,640
That is the actual data arge then.

35
00:02:55,200 --> 00:02:58,310
So then we had only Boully years because it was two dimensional.

36
00:02:58,380 --> 00:03:06,270
And here we have three layers to a very quick demo in the demo we will look at the other two ways of

37
00:03:06,270 --> 00:03:07,900
creating 3-D areas.

38
00:03:07,980 --> 00:03:13,230
That is the second and third approach a new method called three dimensional artist has been added to

39
00:03:13,230 --> 00:03:17,450
the basic demo class that you can download from the resources section.

40
00:03:17,460 --> 00:03:20,100
So let's hop onto the program.

41
00:03:21,340 --> 00:03:21,680
OK.

42
00:03:21,690 --> 00:03:24,500
Here is a numerator two dimensional arrays.

43
00:03:24,840 --> 00:03:29,650
And here we are creating a three dimensional array using the second approach.

44
00:03:29,760 --> 00:03:37,100
OK so you have the pipe followed by the empty square brackets and you are initialising right here.

45
00:03:37,230 --> 00:03:38,590
OK so that's the second approach.

46
00:03:38,590 --> 00:03:39,450
We know that.

47
00:03:39,750 --> 00:03:44,760
And so it's a lot of data here and here is the first dimension.

48
00:03:44,760 --> 00:03:48,040
So this is the second layer which is four cities.

49
00:03:48,150 --> 00:03:51,260
And here is the time and months.

50
00:03:51,270 --> 00:03:53,520
So that's the second dimension.

51
00:03:53,520 --> 00:03:55,050
So this is the first dimension.

52
00:03:55,050 --> 00:04:00,900
So this was the first dimension and time in months was the second dimension on that data that it has

53
00:04:00,990 --> 00:04:03,740
is the third dimension which is the products.

54
00:04:03,750 --> 00:04:06,630
So basically the data represents the units.

55
00:04:07,050 --> 00:04:11,950
So since it is this is and be initialized it to zero all of them zero except this one.

56
00:04:11,970 --> 00:04:16,310
So it's just the exact same example that we have seen in the slide.

57
00:04:16,670 --> 00:04:16,950
OK.

58
00:04:16,950 --> 00:04:22,350
So this is for New York and this is for January 1st March on April.

59
00:04:22,780 --> 00:04:29,410
And this is the date for us for San Francisco and so on for four cities.

60
00:04:29,730 --> 00:04:37,140
And here we are providing the value 850 So which corresponds to 0 3 and one so those are the next numbers

61
00:04:37,710 --> 00:04:39,230
within different dimensions.

62
00:04:39,250 --> 00:04:41,820
So just go ahead and compile and run this.

63
00:04:41,850 --> 00:04:44,030
So it's already combining some images from this.

64
00:04:44,040 --> 00:04:46,370
So as you can see it prints a 50.

65
00:04:46,410 --> 00:04:49,860
So that's the using the second approach.

66
00:04:50,000 --> 00:04:51,330
The that approach is very simple.

67
00:04:51,330 --> 00:04:54,310
We know that all we need to do is just remove this.

68
00:04:54,680 --> 00:04:56,530
It's the simplest form.

69
00:04:56,970 --> 00:05:01,860
And let me just compile and run this once again.

70
00:05:01,860 --> 00:05:03,210
So that's it.

71
00:05:03,210 --> 00:05:07,880
So that's the three dimensional arrays and they're very rarely used.

72
00:05:07,940 --> 00:05:08,910
And that's about it.

73
00:05:08,910 --> 00:05:13,320
And we're not going to discuss any more dimensions so that's not enough for discussion on our test.

74
00:05:13,410 --> 00:05:13,860
OK.

75
00:05:13,980 --> 00:05:17,310
So go ahead on the program and you can play with that.

76
00:05:17,460 --> 00:05:17,900
OK.

77
00:05:18,060 --> 00:05:18,620
Thank you.

78
00:05:18,680 --> 00:05:19,830
And happy coding

