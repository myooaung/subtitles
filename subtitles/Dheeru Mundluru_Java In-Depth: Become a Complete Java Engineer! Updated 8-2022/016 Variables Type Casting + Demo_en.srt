1
00:00:02,070 --> 00:00:02,860
Hi there.

2
00:00:02,880 --> 00:00:05,420
This is the model group so far.

3
00:00:05,430 --> 00:00:11,580
We looked at the different data types and we also know that Java is a statically type language that

4
00:00:11,580 --> 00:00:14,370
is once a variable is declared with a particular type.

5
00:00:14,400 --> 00:00:17,190
It can only be assigned values of that type.

6
00:00:17,850 --> 00:00:23,880
But sometimes we may have to assign the variable with a value which is of some other data type, and

7
00:00:23,880 --> 00:00:29,940
in that case that value must be casted or in other words, converted to the data type of the variable.

8
00:00:30,180 --> 00:00:32,250
And that's where typecasting comes into play.

9
00:00:33,780 --> 00:00:40,740
So typecasting is necessary when we want to assign a variable or a literal of one data type to a variable

10
00:00:40,740 --> 00:00:41,790
of another type.

11
00:00:43,250 --> 00:00:50,480
For example, you might want to assign a variable or a letter of type long or a type byte to an end

12
00:00:50,480 --> 00:00:51,080
variable.

13
00:00:51,710 --> 00:00:54,260
And to do such assignments, type casting is required.

14
00:00:56,060 --> 00:00:59,660
And typecasting is possible only between numeric primitive types.

15
00:00:59,990 --> 00:01:04,760
And we know that a numeric primitive type can be any primitive type other than boolean.

16
00:01:05,680 --> 00:01:11,620
Recall that even the data type car falls under numeric as it is represented by an unsigned integer.

17
00:01:13,190 --> 00:01:16,250
So we cannot cost anything to bullion or vice versa.

18
00:01:17,080 --> 00:01:21,430
That is, we cannot assign anything other than bullion to a bullion variable.

19
00:01:21,820 --> 00:01:27,100
Similarly, we cannot assign a bullion literal or a bullion variable to a variable of some other type.

20
00:01:28,630 --> 00:01:31,960
And typecasting can be either implicit or explicit.

21
00:01:33,650 --> 00:01:35,420
First, let's look at implicit casting.

22
00:01:36,640 --> 00:01:43,090
Implicit casting is required if we want to assign a variable or a literal of smaller type to a variable

23
00:01:43,090 --> 00:01:44,200
of larger type.

24
00:01:44,960 --> 00:01:50,120
In this case, we say that a widening conversion is being performed as the type of the value on the

25
00:01:50,120 --> 00:01:51,770
right is being widened.

26
00:01:52,980 --> 00:01:57,810
The notion of smaller and larger types is based on the range of values they support.

27
00:01:59,770 --> 00:02:06,010
Here is an example where a variable x of type end is assigned to a variable Y of type long.

28
00:02:07,850 --> 00:02:13,280
And for this an implicit casting is performed and it is done by the compiler automatically, so the

29
00:02:13,280 --> 00:02:19,590
value assigned to the variable y will be casted so that it will have 64 bits as a bit.

30
00:02:19,610 --> 00:02:21,380
Depth of long is 64.

31
00:02:22,310 --> 00:02:26,000
Not that X will still have the value 65 with a depth of 32.

32
00:02:27,960 --> 00:02:32,100
And this diagram shows the order of implicit casting performed by compiler.

33
00:02:32,670 --> 00:02:39,870
As an example, you can see here that assigning byte to shot or to any other data type except car as

34
00:02:39,870 --> 00:02:44,640
implicit as standing by to car would be explicit, which we will see next.

35
00:02:46,290 --> 00:02:52,500
We can also see that assigning an integer to a floating point variable would fall under implicit casting.

36
00:02:53,210 --> 00:03:01,760
For instance, even assigning 64 bit long to 32 bit float is implicit as a range of values for float

37
00:03:01,790 --> 00:03:04,490
is larger than the range of values for long.

38
00:03:05,150 --> 00:03:08,420
So range of values is what is dictating this order.

39
00:03:09,050 --> 00:03:15,740
We can also see that assigning car to end is also implicit as the range of car is well within the range

40
00:03:15,740 --> 00:03:16,970
of in data type.

41
00:03:17,690 --> 00:03:21,950
We know that car is internally represented by a 16 bit unsigned integer.

42
00:03:23,090 --> 00:03:30,080
Likewise assigning car to other larger data types like Long Float or double would also be implicit.

43
00:03:30,930 --> 00:03:32,670
So that's implicit casting.

44
00:03:33,150 --> 00:03:38,640
Now, if we reverse the direction of these arrows, then we would get the order for explicit casting.

45
00:03:40,170 --> 00:03:43,740
And here it is where the direction of arrows has been reversed.

46
00:03:44,340 --> 00:03:47,070
So that's the ordering for explicit casting.

47
00:03:47,100 --> 00:03:55,200
And we need it if we want to assign a variable or a literal of larger type to a variable of smaller

48
00:03:55,200 --> 00:03:55,650
type.

49
00:03:56,250 --> 00:04:01,650
And in this case, we say that a narrowing conversion is being performed as we are narrowing down the

50
00:04:01,650 --> 00:04:02,070
type.

51
00:04:03,200 --> 00:04:09,050
Now in this diagram, apart from reversing the direction of arrows, two new bi directional arrows have

52
00:04:09,050 --> 00:04:16,310
been added, connecting current bite and current shot, implying that any assignments between themselves

53
00:04:16,310 --> 00:04:18,290
would require an explicit cast.

54
00:04:18,950 --> 00:04:25,760
For instance, assigning car to either byte or shot would be explicit, as car is not within the range

55
00:04:25,760 --> 00:04:28,070
of values of these two data types.

56
00:04:28,700 --> 00:04:34,940
Note that even though current shot have a bit depth of 16, assigning car to shot would still require

57
00:04:34,940 --> 00:04:36,200
an explicit cast.

58
00:04:36,710 --> 00:04:42,590
That's because for car the range is 0 to 2 to the power of 16 minus one.

59
00:04:42,740 --> 00:04:43,280
Right.

60
00:04:43,640 --> 00:04:47,060
But for shot two is race to the power of 15.

61
00:04:47,540 --> 00:04:52,880
That's because the range is minus two to the power of 15 to 2 to the power of 15 minus one.

62
00:04:53,240 --> 00:04:55,760
And so car can fall outside this range.

63
00:04:56,630 --> 00:05:00,530
Just note that casting to car is always explicit.

64
00:05:00,560 --> 00:05:07,310
And the reason for this is all these other numeric data types can have negative values while CAR is

65
00:05:07,310 --> 00:05:12,680
represented by an unsigned integer, which can be only zero or positive but not negative.

66
00:05:14,460 --> 00:05:16,500
Here is an example of explicit casting.

67
00:05:16,530 --> 00:05:23,970
Here we are assigning a long variable with a value 42 to NW variable since long is larger than eight.

68
00:05:24,000 --> 00:05:29,610
We have an explicit cast, so the INT in parentheses is the explicit cast.

69
00:05:30,520 --> 00:05:35,020
Also the applied cast should be compatible with the data type of the variable.

70
00:05:35,020 --> 00:05:42,550
On the left side, that is the type specified with the cast has to be same or of a lower type but not

71
00:05:42,550 --> 00:05:43,420
larger type.

72
00:05:44,270 --> 00:05:51,650
So in this case it has to be ENT or any type smaller than end, including car as car as unsigned integer.

73
00:05:52,430 --> 00:05:57,560
Now without the cast, we would get a compiler error, even though 42 is a valid int.

74
00:05:58,380 --> 00:05:59,250
That's because.

75
00:05:59,250 --> 00:05:59,710
Why?

76
00:05:59,730 --> 00:06:05,760
On the right hand side is an expression which will get evaluated to 42 only at runtime.

77
00:06:06,450 --> 00:06:08,250
Compiler just does not know that.

78
00:06:08,250 --> 00:06:15,330
And all it knows is that y is of type long and it wants us that we may be doing something wrong here

79
00:06:15,330 --> 00:06:18,360
by assigning a larger variable to a smaller one.

80
00:06:18,900 --> 00:06:24,720
So we need to inform the compiler that we are fine with the assignment by inserting an explicit cast.

81
00:06:25,990 --> 00:06:31,420
Just note that with regards to implicit casting, although it is taken care of by the compiler, if

82
00:06:31,420 --> 00:06:35,470
you wish to, you can still apply a superfluous cast.

83
00:06:37,080 --> 00:06:39,660
In this example, a bite is custard to carp.

84
00:06:40,480 --> 00:06:47,080
Since the byte value is 65, the corresponding UTF 16 value uppercase A is assigned to the variable

85
00:06:47,080 --> 00:06:47,500
C.

86
00:06:48,940 --> 00:06:53,410
Now here, both widening and narrowing conversion is being applied.

87
00:06:53,890 --> 00:06:59,530
First bite is converted to end through a widening conversion and then the resulting end is converted

88
00:06:59,530 --> 00:07:01,600
to car through a narrowing conversion.

89
00:07:03,530 --> 00:07:12,170
Here car variable is assigned an integral 65 and in this case we do not need an explicit cast as 65

90
00:07:12,170 --> 00:07:13,850
is within the range of cap.

91
00:07:14,990 --> 00:07:21,350
However, if the lateral is outside the range of car, then we would need to insert an explicit cast

92
00:07:21,350 --> 00:07:23,090
to avoid a compilation error.

93
00:07:24,700 --> 00:07:31,570
Here a short variable is assigned a character literal here variable as gets assigned a decimal equivalent

94
00:07:31,570 --> 00:07:32,260
65.

95
00:07:32,800 --> 00:07:37,660
Once again, no explicit cast is required as 65 is within the range of shot.

96
00:07:38,530 --> 00:07:43,150
The cast would be needed if the assigned literal was outside shots range.

97
00:07:44,050 --> 00:07:48,330
But out of range assignments would also lead to information loss.

98
00:07:48,340 --> 00:07:49,510
And let's look at that.

99
00:07:51,260 --> 00:07:55,940
And here is one scenario where there is information loss due to out of range assignment.

100
00:07:56,570 --> 00:07:57,280
Here the value.

101
00:07:57,290 --> 00:08:02,450
One, two, three, four, five, six is outside the range of byte and there is an explicit cast here

102
00:08:02,510 --> 00:08:09,860
and the variable gets assigned a weird number, which in this case is 64 and 64 is assigned because

103
00:08:09,890 --> 00:08:17,270
JVM discards all but the lower eight bits of the binary equivalent of this number one, two, three,

104
00:08:17,270 --> 00:08:18,200
four, five, six.

105
00:08:18,230 --> 00:08:23,870
And those lower eight bits which appear on the right side of the bit pattern corresponds to that decimal

106
00:08:23,870 --> 00:08:27,920
64 and that's how we get the number 64 here.

107
00:08:27,920 --> 00:08:30,470
Only lower eight bits are considered as the variable.

108
00:08:30,470 --> 00:08:33,440
Here is a byte which has only eight bits.

109
00:08:33,860 --> 00:08:35,929
So there is an information loss here.

110
00:08:36,530 --> 00:08:42,470
Essentially what is happening here is that the variable is a small container as it is a byte and we

111
00:08:42,470 --> 00:08:47,090
are trying to fill it with something that is not going to fit inside that container.

112
00:08:48,250 --> 00:08:52,690
So some of the stuff that we are trying to fill is going to spill from the container.

113
00:08:52,930 --> 00:08:55,060
And so there is an information loss.

114
00:08:57,150 --> 00:09:03,210
Second scenario of information loss is when we try to cast a floating point littoral or a floating point

115
00:09:03,210 --> 00:09:06,540
variable to an integer or a car variable.

116
00:09:07,050 --> 00:09:09,540
In this case, it will always truncate the number.

117
00:09:10,410 --> 00:09:16,920
Recall that when we say Integer, it could mean any of the four data types by short end or long.

118
00:09:17,870 --> 00:09:21,800
And we know that floating point would include float and double.

119
00:09:23,420 --> 00:09:30,800
For example, when we try to assign a floor 3.14 to an end variable, then the value 3.14 gets truncated

120
00:09:30,800 --> 00:09:31,580
to three.

121
00:09:33,000 --> 00:09:39,660
Similarly, when a 00.9 is assigned to an end variable due to truncation, the variable is assigned

122
00:09:39,660 --> 00:09:40,950
the values zero.

123
00:09:42,940 --> 00:09:43,270
Here.

124
00:09:43,270 --> 00:09:47,860
A double is casted to cap since the value is 65.5.

125
00:09:47,950 --> 00:09:53,320
It would first be converted to end, which would be 65 after truncation.

126
00:09:54,060 --> 00:09:58,380
And then it's corresponding UTF 16 value is assigned to the variable.

127
00:09:59,070 --> 00:10:05,280
So the examples in this slide show that explicit casting could be needed even if we are dealing with

128
00:10:05,280 --> 00:10:06,030
letters.

129
00:10:06,940 --> 00:10:14,200
Just keep in mind that the main reason for explicit casting is because the value assigned could be outside

130
00:10:14,200 --> 00:10:16,960
the range of the variable on the left hand side.

131
00:10:18,910 --> 00:10:22,360
Now coming to information laws with regards to implicit casting.

132
00:10:22,750 --> 00:10:27,250
Generally, you will not encounter information laws with implicit casting.

133
00:10:27,880 --> 00:10:33,400
A lot of books and instructors do say that there is no information laws with implicit casting.

134
00:10:33,610 --> 00:10:39,340
But to be precise, for few assignments, there is a possibility of some information loss.

135
00:10:39,940 --> 00:10:44,230
For example, let's consider the depiction of implicit casting order once again.

136
00:10:45,630 --> 00:10:49,580
This is the implicit casting order we have seen earlier here.

137
00:10:49,590 --> 00:10:57,240
Assigning an end to flawed or along to flawed could lead to loss of precision as the resulting value

138
00:10:57,270 --> 00:11:02,040
may lose some of the least significant bits of the value that is being assigned.

139
00:11:03,540 --> 00:11:07,710
And this loss of precision may also happen when a long is assigned to a double.

140
00:11:08,590 --> 00:11:09,910
But not that end.

141
00:11:09,910 --> 00:11:11,410
To double is fine.

142
00:11:13,180 --> 00:11:15,730
Let's look at this through a simple example here.

143
00:11:15,730 --> 00:11:19,750
An ENT variable called Old Val is assigned to a float.

144
00:11:20,410 --> 00:11:23,140
In this case, there would be a loss of precision.

145
00:11:23,440 --> 00:11:27,700
And in the next statement we are casting that float back to it.

146
00:11:27,730 --> 00:11:34,510
Variable new well and when we print new well, we will see that at a slightly larger than old Val.

147
00:11:35,360 --> 00:11:41,990
So when all well was assigned to float, it was rounded to a larger number and hence there is slight

148
00:11:41,990 --> 00:11:43,160
loss of precision.

149
00:11:43,850 --> 00:11:48,110
So there can be some loss of information even with implicit casting.

150
00:11:48,350 --> 00:11:50,390
But that's a pretty uncommon case.

151
00:11:51,980 --> 00:11:54,230
So we're not clearly understand casting.

152
00:11:54,350 --> 00:11:57,980
Now, let's look at a couple of common use cases where casting is applied.

153
00:11:59,370 --> 00:12:01,690
First, let's look at an example for implicit casting.

154
00:12:01,710 --> 00:12:04,210
Let's assume that we have these two variables.

155
00:12:04,230 --> 00:12:05,310
F one and F two.

156
00:12:06,060 --> 00:12:12,120
And let's also assume we have this method named CO, which takes two parameters as input, which are

157
00:12:12,120 --> 00:12:13,290
of type double.

158
00:12:13,830 --> 00:12:19,710
So here D1 and D2 are referred to as parameters and we will discuss methods very soon.

159
00:12:20,530 --> 00:12:24,430
What the method go does here is irrelevant for this discussion.

160
00:12:26,100 --> 00:12:32,040
Next we can call the method go by passing the to float variables as input so the two float variable

161
00:12:32,040 --> 00:12:37,200
values will be assigned to the two double parameters that the method defines.

162
00:12:37,710 --> 00:12:43,350
So the value of variable f one will be assigned to variable D one and value of variable F two will be

163
00:12:43,350 --> 00:12:44,820
assigned to variable data.

164
00:12:44,910 --> 00:12:49,290
And for this an implicit cast will be performed from float to double.

165
00:12:49,860 --> 00:12:53,700
So this kind of implicit casting is pretty common when dealing with methods.

166
00:12:56,080 --> 00:12:56,350
Next.

167
00:12:56,350 --> 00:13:01,540
With regards to explicit casting, let's consider this example where we want to compute an average of

168
00:13:01,570 --> 00:13:04,140
two numbers two and three in Java.

169
00:13:04,150 --> 00:13:08,370
This would result in two rather than 2.5, as both two and three.

170
00:13:08,380 --> 00:13:10,240
Here are letters.

171
00:13:10,750 --> 00:13:16,750
Though we have a double on the left side, we still end up with the value two, and we will discuss

172
00:13:16,750 --> 00:13:19,810
the reason for this later when discussing arithmetic operators.

173
00:13:21,290 --> 00:13:27,020
So to get the right value 2.5, we would have to apply an explicit cast in this way.

174
00:13:27,890 --> 00:13:33,320
So if you are performing such kind of arithmetic operations involving division operator, there is a

175
00:13:33,320 --> 00:13:36,170
chance you may have to insert explicit cast.

176
00:13:37,090 --> 00:13:40,210
So those are some common scenarios of using casting.

177
00:13:40,960 --> 00:13:46,510
Casting is mainly needed when we want to assign a variable or a literal of one type to a variable of

178
00:13:46,510 --> 00:13:47,320
another type.

179
00:13:47,890 --> 00:13:52,720
And an explicit task comes into play when there is an issue with the range of values.

180
00:13:53,350 --> 00:13:56,800
Now let's do a quick demo of some of the examples we already discussed.

181
00:13:56,980 --> 00:14:02,050
A new method called type casting has been added to basic demo program, and you can find the updated

182
00:14:02,050 --> 00:14:03,730
program in the resources section.

183
00:14:04,150 --> 00:14:06,190
So let's just go ahead and look at the program.

184
00:14:08,500 --> 00:14:10,830
Look, here is the new method typecasting.

185
00:14:10,840 --> 00:14:14,950
So it has been appropriately named as typecasting as we are dealing with typecasting.

186
00:14:15,430 --> 00:14:20,620
And in the main method we have commented on the previous two method invocations, print and primitives

187
00:14:20,620 --> 00:14:21,910
as we are done with them.

188
00:14:21,940 --> 00:14:25,930
And so there is a new method in location statement called typecasting.

189
00:14:27,050 --> 00:14:33,590
So let's just go ahead and look at the type casting method and we are printing the statement saying

190
00:14:33,590 --> 00:14:38,960
that we are inside typecasting and we have some of the interesting examples which we have seen earlier.

191
00:14:39,200 --> 00:14:42,410
So let's just go ahead and look at each of the examples.

192
00:14:42,590 --> 00:14:47,120
So the first example here demonstrates this, an explicit casting example.

193
00:14:47,300 --> 00:14:53,600
So here we have the variable Y, which is of type long and it's being assigned to variable X of type.

194
00:14:53,600 --> 00:15:01,430
And so this should give a compilation error because Y is of larger type and X is of smaller type.

195
00:15:01,430 --> 00:15:03,650
So there needs to be an explicit cast.

196
00:15:05,250 --> 00:15:11,310
So as you can see, it says incompatible types, possible lossy conversion from long to end.

197
00:15:11,850 --> 00:15:18,720
So why here is an expression and it gets evaluated to 42 only at runtime.

198
00:15:19,110 --> 00:15:20,780
So it compile time compiler.

199
00:15:20,790 --> 00:15:28,170
All it knows is the type of y which is long and it knows that it cannot be assigned because there can

200
00:15:28,170 --> 00:15:29,400
be a lossy conversion.

201
00:15:29,400 --> 00:15:33,810
So we need to tell the compiler that it's fine by inserting a cast.

202
00:15:33,810 --> 00:15:35,820
So that's what we are going to do now.

203
00:15:38,780 --> 00:15:40,250
So now it's fine.

204
00:15:41,120 --> 00:15:42,140
So that's the first example.

205
00:15:42,140 --> 00:15:44,360
And in the second example, we have already seen this.

206
00:15:44,390 --> 00:15:50,930
So this number literally is being assigned to bite and this demonstrates information loss.

207
00:15:50,930 --> 00:15:53,210
But let me actually remove this here.

208
00:15:53,450 --> 00:15:55,820
So this should also give a compilation error.

209
00:15:55,820 --> 00:16:02,930
So this is a literal and in this case, the compiler knows that this value is being assigned to byte,

210
00:16:02,960 --> 00:16:07,340
whose range is between -128 to positive 127.

211
00:16:07,610 --> 00:16:13,370
So when you do this, it says it gives the same compiler error because in this case it knows that this

212
00:16:13,370 --> 00:16:15,620
value itself, there is no expression here.

213
00:16:15,620 --> 00:16:19,130
This is a literal, there is no expression like in the previous example.

214
00:16:19,280 --> 00:16:24,140
But here it knows that clearly knows that this is false outside the range of byte.

215
00:16:24,470 --> 00:16:26,570
So we need to insert.

216
00:16:27,290 --> 00:16:28,340
A cast here.

217
00:16:28,550 --> 00:16:32,240
So now if you compile it, it's compiles fine.

218
00:16:32,240 --> 00:16:33,410
And if you run it.

219
00:16:35,220 --> 00:16:41,040
It assigns 64 because there is an informal loss of information and some weird number gets assigned to

220
00:16:41,130 --> 00:16:43,080
this variable called narrowed byte.

221
00:16:43,380 --> 00:16:45,060
Now let's just change this.

222
00:16:46,690 --> 00:16:49,990
Just to be a little bit more clear to 128.

223
00:16:50,020 --> 00:16:57,250
This should also give a compilation error because 128 is outside the range of byte it's bytes ranges

224
00:16:57,250 --> 00:16:59,830
-128 to positive 127.

225
00:16:59,830 --> 00:17:01,180
So it gives the same error.

226
00:17:02,340 --> 00:17:08,220
Either you need to insert a cast here, in which case there will be an information loss or it's got

227
00:17:08,220 --> 00:17:10,560
to be some some number within the range.

228
00:17:10,560 --> 00:17:12,450
So if you insert 127.

229
00:17:13,510 --> 00:17:14,589
Then it is fine.

230
00:17:16,119 --> 00:17:17,740
See no error there.

231
00:17:18,190 --> 00:17:19,780
So let me just change this.

232
00:17:20,960 --> 00:17:21,589
Mac.

233
00:17:21,980 --> 00:17:24,440
So the third example here is about truncation.

234
00:17:24,440 --> 00:17:30,050
So here we are assigning the value, the double value .99 and we are inserting a cast here.

235
00:17:30,050 --> 00:17:31,370
So it's an explicit cast.

236
00:17:31,370 --> 00:17:36,110
So this gets assigned, this variable I truncated will get assigned zero.

237
00:17:36,110 --> 00:17:38,060
So let's just compile this.

238
00:17:40,190 --> 00:17:41,750
So as you can see, it says zero.

239
00:17:41,750 --> 00:17:45,260
So there is the 0.9 and got truncated to zero.

240
00:17:45,770 --> 00:17:51,800
Now here in this example, it's an implicit cast X is of type eight, Y is of type long, so it's just

241
00:17:51,800 --> 00:17:52,970
an implicit cast.

242
00:17:53,000 --> 00:17:55,340
And so no compilation error two.

243
00:17:56,000 --> 00:18:04,400
Now the next example is an implicit cast, but from car to end so carries a here and enters of a larger

244
00:18:04,400 --> 00:18:04,760
type.

245
00:18:04,760 --> 00:18:12,350
So it's going to be an implicit cast, but a value 65 will get assigned because for character A in UTF

246
00:18:12,590 --> 00:18:16,820
16 for that the corresponding decimal value is 65.

247
00:18:16,820 --> 00:18:22,070
And that decimal value gets assigned here because because of that data type end.

248
00:18:22,160 --> 00:18:31,880
So if you go back here for I and it says 65, now here is something that's being cast to car and we

249
00:18:31,880 --> 00:18:35,660
know that if anything is being cast to car, it's got to be an explicit cast.

250
00:18:35,870 --> 00:18:37,310
So here we have byte here.

251
00:18:37,310 --> 00:18:38,840
So it's being casted to car.

252
00:18:38,990 --> 00:18:44,600
So the way it works is the byte first gets promoted to end and then from end there will be a conversion

253
00:18:44,600 --> 00:18:45,320
to car.

254
00:18:46,460 --> 00:18:48,500
So this value is 65.

255
00:18:49,100 --> 00:18:54,860
So the corresponding UTF 16 value value is character A in uppercase.

256
00:18:54,860 --> 00:18:56,150
We know that very well.

257
00:18:56,240 --> 00:18:59,230
So it gets assigned here, over here.

258
00:18:59,240 --> 00:19:03,900
So it's just we are calling it as a special conversion because initially there is a widening from byte

259
00:19:03,920 --> 00:19:09,680
to end, which is then followed by narrowing from eight to car through the explicit casting.

260
00:19:10,550 --> 00:19:11,920
So that's about it.

261
00:19:11,930 --> 00:19:14,300
So those are the few of the interesting examples.

262
00:19:14,300 --> 00:19:20,930
So just go ahead and download it from the resources and you can also type in the entire code and you

263
00:19:20,930 --> 00:19:21,830
can play with it.

264
00:19:22,270 --> 00:19:24,470
Okay then happy coding and thank you.

