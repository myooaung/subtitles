1
00:00:02,140 --> 00:00:03,010
Hi there.

2
00:00:03,040 --> 00:00:04,070
This is the De La Rue.

3
00:00:04,090 --> 00:00:05,080
And welcome back.

4
00:00:05,110 --> 00:00:11,230
Let's not get started with the collectors class and let's begin by looking at the two lists and the

5
00:00:11,230 --> 00:00:15,490
two set methods, which we mentioned about earlier in the previous lecture.

6
00:00:15,760 --> 00:00:21,250
And they're used to collect the stream of elements into a list and into a set.

7
00:00:21,760 --> 00:00:28,240
So we have introduced this new method called collect to collection within the Stream Operations class,

8
00:00:28,240 --> 00:00:29,920
and it's invoked from the main method.

9
00:00:30,370 --> 00:00:37,420
So we are essentially collecting the stream elements into a collection implementation, which would

10
00:00:37,420 --> 00:00:41,050
be a list or a set in our case.

11
00:00:41,260 --> 00:00:43,840
So let's go ahead and look at the two methods.

12
00:00:43,840 --> 00:00:50,110
So the input is the list of books which we know come from two different sources, the fictitious sources

13
00:00:50,110 --> 00:00:53,320
in our example, Amazon and Book and Barnes and Nobles.

14
00:00:53,740 --> 00:00:57,040
So we are going to work on this particular list.

15
00:00:57,520 --> 00:00:59,590
So let's begin by looking at the two list method.

16
00:01:01,100 --> 00:01:05,209
So let's build our pipeline sales stream.

17
00:01:06,760 --> 00:01:08,080
Let's pick on the good books.

18
00:01:08,080 --> 00:01:09,700
So we need a filter.

19
00:01:12,410 --> 00:01:13,640
Be for books.

20
00:01:14,950 --> 00:01:16,540
B don't get rating.

21
00:01:17,640 --> 00:01:23,190
A good book would be a book which has a rating of at least 4.5.

22
00:01:24,270 --> 00:01:26,190
And let's use a distinct.

23
00:01:27,180 --> 00:01:31,130
Because we have the books from the different sources and we can have duplicates too.

24
00:01:31,140 --> 00:01:32,940
So let's use distinct.

25
00:01:33,930 --> 00:01:36,330
And let's use the collect method.

26
00:01:38,270 --> 00:01:39,560
So here it is.

27
00:01:39,650 --> 00:01:41,720
And it takes a collector.

28
00:01:41,720 --> 00:01:45,560
So we need to use the two list method.

29
00:01:46,950 --> 00:01:49,050
From the collectors class.

30
00:01:52,140 --> 00:01:53,700
And this word written.

31
00:01:54,600 --> 00:02:00,870
A list of book, let's call it list one.

32
00:02:01,630 --> 00:02:02,110
Okay.

33
00:02:02,680 --> 00:02:04,600
And let's go ahead and print it.

34
00:02:08,110 --> 00:02:08,860
Let's say.

35
00:02:10,530 --> 00:02:10,919
List.

36
00:02:10,919 --> 00:02:14,310
One size thing that should be good enough.

37
00:02:19,420 --> 00:02:20,920
Let's go ahead and run it.

38
00:02:22,330 --> 00:02:24,700
So it has a size of nine.

39
00:02:25,150 --> 00:02:27,640
So this is the second version of the collect method.

40
00:02:27,670 --> 00:02:31,720
Now let's look at the first version of the collect method.

41
00:02:32,290 --> 00:02:33,730
Just for the sake of it.

42
00:02:37,770 --> 00:02:39,150
First is a supplier.

43
00:02:41,140 --> 00:02:44,560
So let's create our container.

44
00:02:45,960 --> 00:02:46,360
Okay.

45
00:02:46,890 --> 00:02:48,900
Next is an accumulator.

46
00:02:49,350 --> 00:02:51,660
So the accumulator is a by consumer.

47
00:02:51,660 --> 00:02:54,510
So let's take a.

48
00:02:55,400 --> 00:03:00,350
And I would stand for the container in this case the ArrayList.

49
00:03:00,350 --> 00:03:03,170
So a would be the accumulator here.

50
00:03:04,020 --> 00:03:09,420
And let's say a dot ad of t.

51
00:03:10,320 --> 00:03:12,750
Tabulating the input stream element into this.

52
00:03:14,790 --> 00:03:25,080
And finally, the combiner, which takes two, two containers, so let's say a one and a to a one dot

53
00:03:25,080 --> 00:03:25,940
at all.

54
00:03:25,950 --> 00:03:28,650
So if you remember, we had this kind of a method.

55
00:03:29,830 --> 00:03:30,760
The list.

56
00:03:31,840 --> 00:03:34,690
So here it would be a two.

57
00:03:36,160 --> 00:03:37,740
So this is what we have.

58
00:03:37,750 --> 00:03:39,790
So let me compile it.

59
00:03:41,670 --> 00:03:42,410
So that's it.

60
00:03:42,580 --> 00:03:43,890
Let's say this nine.

61
00:03:44,640 --> 00:03:48,390
So this is how we can do it using the first collect method.

62
00:03:48,840 --> 00:03:50,970
This is just to illustrate how it can be done.

63
00:03:50,970 --> 00:03:52,730
But we do not want to do it this way.

64
00:03:52,740 --> 00:03:58,230
We want to do it in the simplified way because there is already a predefined reduction for that.

65
00:03:58,230 --> 00:04:03,150
So we would obviously want to use this one rather than this.

66
00:04:03,150 --> 00:04:08,640
Instead of defining all of these, we would want to use this because there is already a predefined character

67
00:04:08,640 --> 00:04:09,270
for that.

68
00:04:10,100 --> 00:04:14,240
Now let's look at the second one, which is set.

69
00:04:14,720 --> 00:04:17,390
So let me just copy this.

70
00:04:21,630 --> 00:04:24,060
Let me just make it set here.

71
00:04:25,160 --> 00:04:28,520
And let's call it set one.

72
00:04:30,300 --> 00:04:32,490
And the filter is the same filter.

73
00:04:33,780 --> 00:04:39,330
But we do not need distinct because we know that settlements elements are already distinct.

74
00:04:39,780 --> 00:04:41,640
So let's say collect.

75
00:04:45,760 --> 00:04:52,000
And collectors dot to set.

76
00:04:55,320 --> 00:04:55,710
Okay.

77
00:04:55,980 --> 00:04:57,060
Let's print it.

78
00:05:08,630 --> 00:05:10,430
So it's just the same size.

79
00:05:11,270 --> 00:05:21,140
So here we are doing this and we are able to do it because here we have already defined the equals and

80
00:05:21,140 --> 00:05:22,910
the hashCode methods here.

81
00:05:23,390 --> 00:05:31,190
So set actually to set returns A has set so internally in order to ensure that we have only unique elements,

82
00:05:31,190 --> 00:05:33,980
the hash code and the equals method are used.

83
00:05:34,830 --> 00:05:37,380
By this particular collector.

84
00:05:37,950 --> 00:05:39,280
So that's there.

85
00:05:39,300 --> 00:05:41,770
So those methods we have already defined.

86
00:05:41,790 --> 00:05:43,290
So this is a hash set.

87
00:05:43,320 --> 00:05:44,940
Now, let's say if we want to.

88
00:05:46,090 --> 00:05:47,230
Just to test it out.

89
00:05:47,240 --> 00:05:57,370
If we do this three set, then we get an error class cast exception because collect is returning a has

90
00:05:57,400 --> 00:06:01,180
set and we are trying to cast it to tree set, which is not possible.

91
00:06:01,600 --> 00:06:03,160
So that's why we have this.

92
00:06:03,160 --> 00:06:07,840
But if we need this, then what we can do is we can.

93
00:06:08,410 --> 00:06:09,400
Let's take this.

94
00:06:10,270 --> 00:06:11,110
Use the.

95
00:06:16,110 --> 00:06:16,710
To.

96
00:06:17,810 --> 00:06:28,490
Collection method and let's say it returns set to and let's say we want a tree set to be returned.

97
00:06:29,400 --> 00:06:30,090
Okay.

98
00:06:32,220 --> 00:06:34,350
And we need to pass a supplier.

99
00:06:34,350 --> 00:06:43,560
So supplier does not take any parameters because supplier has a method which does not take any parameters.

100
00:06:43,560 --> 00:06:46,740
And we need to supply here a.

101
00:06:48,550 --> 00:06:49,480
She said.

102
00:06:51,630 --> 00:06:53,100
And that's it.

103
00:06:53,730 --> 00:07:00,960
Now, in order to ensure the uniqueness, we know that we need this also the comparable method also

104
00:07:00,960 --> 00:07:03,980
here it needs to implement comparable.

105
00:07:03,990 --> 00:07:06,470
So book is implementing comparable here.

106
00:07:06,480 --> 00:07:09,240
Here it is and it is.

107
00:07:10,700 --> 00:07:19,340
It has the method compared to and it is ensuring that the elements are sorted using the ISBN.

108
00:07:21,070 --> 00:07:23,120
And it also ensures a uniqueness.

109
00:07:23,140 --> 00:07:25,540
So that's what we have here.

110
00:07:26,580 --> 00:07:26,890
Okay.

111
00:07:26,970 --> 00:07:28,500
So let me just print it.

112
00:07:40,120 --> 00:07:41,230
So here it is.

113
00:07:41,230 --> 00:07:44,980
So we are getting the size of the set, which is nine.

114
00:07:44,980 --> 00:07:46,450
So it's just the same size.

115
00:07:46,630 --> 00:07:48,790
So this is how we can do it.

116
00:07:48,790 --> 00:07:56,230
We can just implement, invoke this two collection if we want some other implementation of a collection

117
00:07:56,230 --> 00:07:57,490
so we can do this.

118
00:07:58,760 --> 00:08:00,810
So that's these methods.

119
00:08:00,830 --> 00:08:06,530
Now, here, in this version, we can also make use of.

120
00:08:09,070 --> 00:08:14,470
Constructor references so we can say array list.

121
00:08:16,040 --> 00:08:16,580
No.

122
00:08:16,580 --> 00:08:19,910
So that would create a new construct, new ArrayList.

123
00:08:20,450 --> 00:08:25,040
Then here we can use the add method and ArrayList.

124
00:08:26,060 --> 00:08:27,380
So this is more.

125
00:08:30,400 --> 00:08:32,340
Could be readable for some of us.

126
00:08:32,350 --> 00:08:36,940
Some of them might prefer the earlier approach itself where we are using lambdas.

127
00:08:40,870 --> 00:08:41,799
So that's it.

128
00:08:43,450 --> 00:08:45,190
So we can also do this.

129
00:08:45,190 --> 00:08:48,460
And if you run it once again, we have the same results.

130
00:08:50,260 --> 00:08:52,900
So we can use method references in this way.

131
00:08:52,900 --> 00:08:55,240
And here this is a constructor reference.

132
00:08:55,690 --> 00:09:03,760
Similarly, even in here in the mutable reduction, let me comment this out and let's use.

133
00:09:09,640 --> 00:09:10,720
The references.

134
00:09:11,820 --> 00:09:14,190
So this is the first version of the collect method.

135
00:09:14,220 --> 00:09:16,710
So here we need a string builder.

136
00:09:17,600 --> 00:09:19,760
We need to construct a string builder so it's a supplier.

137
00:09:19,760 --> 00:09:21,620
So we will say new.

138
00:09:21,620 --> 00:09:23,300
So that's a constructor reference.

139
00:09:23,600 --> 00:09:25,430
Then we need to use append.

140
00:09:25,790 --> 00:09:28,850
So we'll say string builder.

141
00:09:35,420 --> 00:09:37,580
So it takes a string as an input.

142
00:09:37,970 --> 00:09:41,630
Now here we are appending a string builder with another append.

143
00:09:41,630 --> 00:09:43,790
So it's an overloaded append method.

144
00:09:43,790 --> 00:09:46,850
So this one is append, which takes the string as an argument.

145
00:09:47,390 --> 00:09:53,510
And this, this append method takes a string builder as an option, but they are just overloaded methods.

146
00:09:53,510 --> 00:09:55,130
So we can simply say.

147
00:09:56,700 --> 00:09:57,420
String builder.

148
00:09:57,420 --> 00:10:00,210
So we will once again use the same method.

149
00:10:03,670 --> 00:10:06,460
So both of them are append methods.

150
00:10:06,460 --> 00:10:10,280
But this one takes a string and this one takes a string builder.

151
00:10:10,300 --> 00:10:11,080
So that's it.

152
00:10:11,090 --> 00:10:13,360
But let's invoke the mutable redaction.

153
00:10:17,610 --> 00:10:18,290
Here.

154
00:10:18,300 --> 00:10:20,640
So let's just test the output once again.

155
00:10:23,020 --> 00:10:23,590
Here it is.

156
00:10:23,590 --> 00:10:29,680
This is the mutable reduction method and we have conquered too as a B, so it works, right?

157
00:10:30,850 --> 00:10:31,660
Correctly.

158
00:10:31,810 --> 00:10:38,020
So that's just to show you that we can convert this into method references.

159
00:10:38,050 --> 00:10:39,460
Just wanted to show you that.

160
00:10:39,670 --> 00:10:43,420
So we have all of these collectors methods.

161
00:10:44,050 --> 00:10:47,470
So we can also make use of a static import.

162
00:10:47,500 --> 00:10:52,810
So let me just go into the top and let's just say static.

163
00:10:54,000 --> 00:10:57,270
Collectors dot all here.

164
00:10:58,140 --> 00:11:05,490
And instead of using collectors, we can just set to set now to collection.

165
00:11:06,840 --> 00:11:12,120
And even for the joining which we used in the earlier lecture, we can just do this.

166
00:11:12,270 --> 00:11:13,330
So that's it.

167
00:11:13,350 --> 00:11:16,230
So everything should work fine again.

168
00:11:16,740 --> 00:11:17,310
That's it.

169
00:11:17,700 --> 00:11:18,960
So that's the.

170
00:11:20,090 --> 00:11:28,070
Collection methods, which would help stream elements to be collected into a list, into a set and even

171
00:11:28,070 --> 00:11:29,660
a generic collection here.

172
00:11:30,350 --> 00:11:31,640
So those are the methods.

173
00:11:31,640 --> 00:11:37,550
And in the next subsequent lecture, we will look at other static methods that the collectors class

174
00:11:37,550 --> 00:11:37,940
has.

175
00:11:37,940 --> 00:11:43,610
So these are certain static methods and they are helping us to perform predefined collections.

176
00:11:43,820 --> 00:11:48,710
And just to summarize, these methods would return an instance of a collector.

177
00:11:48,950 --> 00:11:52,970
Collector is the interface and we discussed it in the earlier lecture.

178
00:11:53,660 --> 00:11:54,230
Here it is.

179
00:11:54,230 --> 00:11:58,160
If you say collect, it returns and collector.

180
00:11:58,490 --> 00:11:59,120
So that's it.

181
00:11:59,120 --> 00:12:00,890
Thank you and happy coding.

