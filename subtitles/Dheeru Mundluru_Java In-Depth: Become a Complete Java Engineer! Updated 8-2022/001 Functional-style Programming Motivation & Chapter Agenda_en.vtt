WEBVTT
1
00:00:08.130 --> 00:00:09.030
Hi there.

2
00:00:09.060 --> 00:00:09.630
This is Dana.

3
00:00:10.230 --> 00:00:11.220
And welcome back.

4
00:00:11.670 --> 00:00:18.030
We know that Java is an object oriented programming language and we very well know how object oriented

5
00:00:18.030 --> 00:00:22.710
programming helps model real world scenarios in a more natural way.

6
00:00:22.890 --> 00:00:23.430
Right.

7
00:00:23.730 --> 00:00:27.510
But there is also another programming paradigm called functional programming.

8
00:00:27.900 --> 00:00:31.350
And languages like Lisp fall under functional programming.

9
00:00:31.980 --> 00:00:39.630
And functional programming is all about programming using functions that is methods in our Java terminology.

10
00:00:40.170 --> 00:00:46.560
Functional programming is often in short referred to as PHP, just like object oriented programming

11
00:00:46.560 --> 00:00:55.140
is referred to as OOP, and PHP helps in writing compact code, more bug free code and code that is

12
00:00:55.140 --> 00:01:02.130
easily parallel usable, but they may not be as good as an OOP language and implementing real world

13
00:01:02.130 --> 00:01:08.640
scenarios, but they have their own advantages as I just stated, like being able to write compact bug

14
00:01:08.640 --> 00:01:13.830
free and parallel code and it seems they are very good at writing compilers.

15
00:01:14.520 --> 00:01:17.340
So both paradigms have their own advantages.

16
00:01:17.580 --> 00:01:25.290
And so we now have languages like Scala that are multi paradigm where you can leverage the best of both

17
00:01:25.290 --> 00:01:28.110
object oriented as well as functional programming.

18
00:01:28.840 --> 00:01:36.310
So Java designers also realized this and they made this possible in Java eight by introducing functional

19
00:01:36.310 --> 00:01:38.710
programming constructs like lambdas.

20
00:01:39.280 --> 00:01:43.810
So far we were only passing primitives and object references to methods.

21
00:01:44.020 --> 00:01:49.330
But with Java eight, you can also pass functions as arguments to methods.

22
00:01:50.150 --> 00:01:52.790
And within those methods you can use those functions.

23
00:01:53.630 --> 00:01:59.090
Functional programming constructs that we are going to learn in this chapter enable us to write more

24
00:01:59.120 --> 00:02:01.070
compact and efficient.

25
00:02:01.070 --> 00:02:09.410
Code on such code can also help us to very easily exploit parallelism in a multi core system.

26
00:02:09.979 --> 00:02:14.900
So in this chapter we will learn about the new functional programming language features.

27
00:02:15.080 --> 00:02:21.410
And in this particular lecture, we will set the scene by looking at some of the functional programming

28
00:02:21.410 --> 00:02:25.430
constructs that enable us to write more elegant code.

29
00:02:25.790 --> 00:02:27.680
So it's all about elegant code.

30
00:02:28.130 --> 00:02:34.160
So we are going to understand the motivation behind learning about the new features instead of just

31
00:02:34.160 --> 00:02:37.700
learning the syntax without understanding their real purpose.

32
00:02:38.510 --> 00:02:41.360
So let's just go ahead and get started with the chapter.

33
00:02:43.180 --> 00:02:49.480
As I just mentioned, prior to Java eight, we know that only primitives and object references could

34
00:02:49.480 --> 00:02:51.310
be passed as arguments to methods.

35
00:02:52.390 --> 00:02:57.250
But from Java eight onwards, even behavior could be parsed as argument.

36
00:02:57.640 --> 00:03:02.440
That is, we can pass around method functionality and this is possible.

37
00:03:02.440 --> 00:03:06.250
We are lambdas and also something called method references.

38
00:03:07.040 --> 00:03:07.730
In that sense.

39
00:03:07.730 --> 00:03:12.830
From Java eight onwards, methods are also considered as first class citizens.

40
00:03:13.310 --> 00:03:18.500
Earlier, only primitives and object references were considered as first class citizens.

41
00:03:19.220 --> 00:03:24.950
Note that although here we are talking about functions as method arguments, we can also have methods

42
00:03:24.950 --> 00:03:26.360
returning functions.

43
00:03:27.350 --> 00:03:33.680
Now, even before Java eight functionality could be passed, but we know that it was via objects and

44
00:03:33.680 --> 00:03:36.440
especially anonymous class instances.

45
00:03:36.860 --> 00:03:39.680
But anonymous classes are kind of verbose.

46
00:03:40.940 --> 00:03:46.220
For instance, let's consider this example, which was taken from our discussion of anonymous sources.

47
00:03:46.760 --> 00:03:53.960
Here, an anonymous object is being passed as a competitor to the constructor of preset so that it can

48
00:03:53.960 --> 00:03:54.950
perform sorting.

49
00:03:56.550 --> 00:03:57.570
Now the Java eight.

50
00:03:57.600 --> 00:04:03.510
We can have this kind of a code where a lambda expression is used instead of the anonymous object.

51
00:04:04.200 --> 00:04:06.300
Let's not worry about the syntax for now.

52
00:04:06.330 --> 00:04:10.620
But we are essentially passing the body of the computer method.

53
00:04:11.130 --> 00:04:17.850
So we don't have the new keyword or the comparator of string or the compare method signature itself.

54
00:04:18.480 --> 00:04:23.640
As you can see, it is much more compact and cleaner and it is also efficient.

55
00:04:24.240 --> 00:04:29.190
So compactness and efficiency is one benefit of using lambdas.

56
00:04:31.580 --> 00:04:37.700
Now let's look at another beautiful and a more convincing example about the need for functional style

57
00:04:37.700 --> 00:04:38.360
programming.

58
00:04:39.080 --> 00:04:45.920
Let's say we have a list of books and we want to first filter them by ratings and then group them by

59
00:04:45.920 --> 00:04:46.700
category.

60
00:04:47.060 --> 00:04:48.620
So we want to group them by category.

61
00:04:48.860 --> 00:04:54.620
And the result can be stored in a map such as this one, where the key is category and values would

62
00:04:54.620 --> 00:04:57.320
be a list of books that fall under that category.

63
00:04:59.860 --> 00:05:02.770
And this is a typical pattern that is used here.

64
00:05:02.770 --> 00:05:07.520
We are iterating through all the books and we are first applying the filter.

65
00:05:07.540 --> 00:05:11.620
In this case, it is rating greater than or equal to 4.5.

66
00:05:12.420 --> 00:05:18.180
And if the rating is greater than or equal to 4.5, then we are getting the category of the book and

67
00:05:18.180 --> 00:05:23.010
we are checking if we already added any books with that category into the map.

68
00:05:23.950 --> 00:05:27.580
If not yet added, then books list here will be null.

69
00:05:27.880 --> 00:05:34.870
And so we initialize it with an empty list and then we add it to the map as a value for the category.

70
00:05:35.470 --> 00:05:39.010
And finally we add the book into the newly created books list.

71
00:05:39.610 --> 00:05:45.220
But if there are already one or more books added for that category, then the if condition would fail

72
00:05:45.220 --> 00:05:48.580
and the book is simply added into the existing list.

73
00:05:49.330 --> 00:05:53.260
Now this is the typical pattern when we are grouping things by some key.

74
00:05:53.380 --> 00:05:57.220
And now let's see how Java eight features would simplify this code.

75
00:05:58.660 --> 00:06:04.660
So here is the same code rewritten using Java eight features and here we are using streams.

76
00:06:05.490 --> 00:06:12.060
Here we are first invoking a method called stream on the books ArrayList, and next we are chaining

77
00:06:12.060 --> 00:06:18.990
it with another method invocation called Filter, which basically filters out books with the rating

78
00:06:18.990 --> 00:06:20.370
less than 4.5.

79
00:06:21.180 --> 00:06:26.520
And the final line of code returns a map with books being grouped by category.

80
00:06:27.300 --> 00:06:34.170
So here the filtering criteria is a lambda expression, and the expression used for grouping is a matter

81
00:06:34.200 --> 00:06:34.890
reference.

82
00:06:36.700 --> 00:06:43.060
As you can see, the code is once again compact and cleaner and efficient to both lambda expression

83
00:06:43.060 --> 00:06:45.520
and reference are helping in that aspect.

84
00:06:46.240 --> 00:06:50.530
The code would have been clumsy and slow had we used an anonymous class instead.

85
00:06:52.170 --> 00:06:58.080
Now this style of programming where we are neatly chaining things is called less declarative programming.

86
00:06:58.770 --> 00:07:02.970
And here we don't care about how things are managed underneath.

87
00:07:03.420 --> 00:07:10.620
All we do is we specify the what part of the SQL queries that we write when dealing with databases also

88
00:07:10.620 --> 00:07:12.480
follow such declarative style.

89
00:07:14.080 --> 00:07:18.580
On the traditional code that we have here is referred to as imperative programming.

90
00:07:19.210 --> 00:07:23.410
So that's some terminology for you which you will often encounter.

91
00:07:24.540 --> 00:07:32.160
Now the cool thing here is if we replace stream with parallel stream method, then we will be paralysing

92
00:07:32.160 --> 00:07:35.730
the whole computation by utilizing multiple cores.

93
00:07:35.790 --> 00:07:37.890
And so we would have faster computation.

94
00:07:38.160 --> 00:07:41.010
So that is how easy it is to make it parallelism.

95
00:07:41.730 --> 00:07:48.150
And this exploitation of parallelism in such an easy way is a really great advantage to using off streams.

96
00:07:48.720 --> 00:07:54.570
So we can see from this example how we can write more elegant code using Java eight features.

97
00:07:55.260 --> 00:07:58.560
And let's now see what we are going to learn in this particular chapter.

98
00:08:00.390 --> 00:08:02.850
So these are the main topics we are going to discuss.

99
00:08:02.880 --> 00:08:05.520
We will start off by learning about lambdas.

100
00:08:05.820 --> 00:08:12.450
Next, we will learn about functional interfaces as lambdas work with only functional interfaces and

101
00:08:12.450 --> 00:08:19.290
as part of that we will look at some new interfaces like predicate function, consumer and supplier.

102
00:08:20.300 --> 00:08:22.490
Then we will learn about method references.

103
00:08:22.790 --> 00:08:25.400
And finally we will learn about streams.

104
00:08:26.120 --> 00:08:31.340
And over time, I may be adding some new stuff to like best practices and stuff like that.

105
00:08:31.880 --> 00:08:33.020
So that's about it.

106
00:08:33.049 --> 00:08:37.520
I hope the motivation for writing functional code is fairly clear.

107
00:08:37.549 --> 00:08:40.909
And now we can jump in and learn the specifics.

108
00:08:41.270 --> 00:08:41.860
Okay then.

109
00:08:41.870 --> 00:08:43.760
Thank you and see you in the next lecture.

