1
00:00:02,110 --> 00:00:06,220
Hi there, this is Lulu and welcome back from Java.

2
00:00:06,250 --> 00:00:12,700
Eight onwards we can have static methods and interfaces and we have already seen how interfaces can

3
00:00:12,700 --> 00:00:14,050
have default methods.

4
00:00:14,560 --> 00:00:19,000
Let's see what benefits we get by making static methods part of interfaces.

5
00:00:20,270 --> 00:00:25,850
Well, first, let's look at why interfaces did not have static methods before Java eight, as both

6
00:00:25,850 --> 00:00:28,850
interfaces and static methods are stateless.

7
00:00:29,420 --> 00:00:31,850
That's an important question which we need to ask.

8
00:00:33,080 --> 00:00:38,870
One very good reason for this could be that interfaces are abstract specifications.

9
00:00:39,140 --> 00:00:41,330
That is the define only contracts.

10
00:00:41,780 --> 00:00:48,410
So including static methods seem to be against the spirit of interfaces, as static methods would include

11
00:00:48,410 --> 00:00:52,850
implementation and a contract means no implementation.

12
00:00:54,610 --> 00:00:58,210
But interfaces can be associated with utility methods.

13
00:00:58,210 --> 00:01:01,600
And we know that static methods so as utility methods.

14
00:01:02,780 --> 00:01:08,260
For instance, we may want to have a method called MN copies, which will take two parameters.

15
00:01:08,270 --> 00:01:13,610
One is MN, which is an integer, and the other is element, which is some kind of an object.

16
00:01:13,610 --> 00:01:15,950
And we don't have to worry about the object's type.

17
00:01:16,160 --> 00:01:17,840
And this method would return a list.

18
00:01:17,840 --> 00:01:24,710
Implementation analyst, as mentioned in an earlier lecture, is an interface from the Java package.

19
00:01:26,210 --> 00:01:30,690
And the return list would include and copies of the given element.

20
00:01:30,710 --> 00:01:32,450
As the method name suggests.

21
00:01:33,380 --> 00:01:38,480
So if end was three, the written list would include three copies of the given element.

22
00:01:38,960 --> 00:01:46,490
So this is a utility method and is associated with an interface list as it is returning one of its implementations.

23
00:01:48,190 --> 00:01:50,350
And to accommodate such utility methods.

24
00:01:50,350 --> 00:01:56,800
The convention or the pattern is to provide a companion utility class with the interface.

25
00:01:58,020 --> 00:02:03,360
An collections class from the Java package is an example of such a companion class.

26
00:02:04,050 --> 00:02:09,840
Collections class was also briefly discussed earlier when discussing default methods and the PN copy

27
00:02:09,930 --> 00:02:14,670
method which we just discussed, is actually a static method in the collections class.

28
00:02:15,330 --> 00:02:22,290
This collections class is a companion class for an interface named collection, which is singular singular

29
00:02:22,290 --> 00:02:26,820
collection, which is one of the main interfaces in Java util package.

30
00:02:27,090 --> 00:02:31,740
And the list interface is actually a sub interface of the collection interface.

31
00:02:33,210 --> 00:02:36,360
And the collections class includes two kinds of methods.

32
00:02:37,220 --> 00:02:40,280
The first one are algorithmic type of methods.

33
00:02:40,460 --> 00:02:47,480
And these methods have some interface as a method, parameter type, and they apply some algorithm on

34
00:02:47,480 --> 00:02:50,330
the objects that get passed into that parameter.

35
00:02:51,140 --> 00:02:56,990
Here are some examples and we already looked at the source method which has list interface as a method

36
00:02:56,990 --> 00:03:01,340
parameter type and it sorts the elements in the input list object.

37
00:03:01,940 --> 00:03:07,520
Second method would shuffle the elements of the list, and we discussed it briefly in an earlier lecture,

38
00:03:08,000 --> 00:03:11,750
and the third one would simply reverse the elements in the input list.

39
00:03:13,530 --> 00:03:20,580
These methods would work well as default methods if they are moved into the appropriate interface corresponding

40
00:03:20,580 --> 00:03:27,400
to the input parameter type, like moving the source method as a default method into the list interface.

41
00:03:27,420 --> 00:03:33,570
As we have seen in the previous lecture, that way those default methods can directly be invoked on

42
00:03:33,570 --> 00:03:35,010
the object itself.

43
00:03:35,400 --> 00:03:40,590
So in case of the source method, it can be invoked on the list object itself.

44
00:03:42,600 --> 00:03:49,110
The second kind of methods in the collections class represent factory methods which construct objects

45
00:03:49,110 --> 00:03:54,030
of a certain interface type which is indicated by the methods written type.

46
00:03:55,000 --> 00:03:59,260
We already discussed the first example here, and let's not worry about the other two.

47
00:03:59,590 --> 00:04:06,040
And these methods cannot be used as default methods as there is no object on which they can be invoked.

48
00:04:06,220 --> 00:04:07,990
They are simply factory methods.

49
00:04:09,460 --> 00:04:15,160
And they would work very well as static methods if they are moved into the interface corresponding to

50
00:04:15,160 --> 00:04:16,690
the methods written type.

51
00:04:17,170 --> 00:04:22,630
In this case and copy, this method can be moved into the list interface, which is the method written

52
00:04:22,630 --> 00:04:22,990
type.

53
00:04:23,870 --> 00:04:24,560
This way.

54
00:04:24,590 --> 00:04:31,340
Utility methods specific to the interface would live with the interface itself rather than in a separate

55
00:04:31,340 --> 00:04:33,770
companion class like the collections class.

56
00:04:34,310 --> 00:04:41,000
So language designers seem to have realized this and were fine with interfaces having static methods.

57
00:04:41,860 --> 00:04:44,710
Due to this, we can now have static methods and interfaces.

58
00:04:45,280 --> 00:04:51,700
So it is like the integer class, which includes static methods that are very specific to integer class.

59
00:04:52,520 --> 00:04:58,460
So I think going forward we may not encounter companion classes very much, as at least most of the

60
00:04:58,460 --> 00:05:03,740
utility methods can now be part of interfaces as either default or static methods.

61
00:05:04,570 --> 00:05:10,360
And also note that default methods in an interface can invoke static methods in the same interface.

62
00:05:12,370 --> 00:05:18,760
Not that like in the case of default methods, interface evaluation will still hold if we add only static

63
00:05:18,760 --> 00:05:20,860
methods to an existing interface.

64
00:05:21,460 --> 00:05:26,950
For instance, a functional interface will remain as a functional interface, even if static methods

65
00:05:26,950 --> 00:05:27,790
are added to it.

66
00:05:28,580 --> 00:05:34,070
In an earlier lecture, we have seen how a functional interface remained as a functional interface after

67
00:05:34,070 --> 00:05:35,360
adding a default method.

68
00:05:35,990 --> 00:05:40,610
So that would work if instead of default method, we defined a static method.

69
00:05:41,500 --> 00:05:47,080
But the main advantage of having static methods in interfaces seems to be the one which we have seen

70
00:05:47,080 --> 00:05:53,560
earlier, where static utility methods can live with the interface itself instead of in a separate companion

71
00:05:53,560 --> 00:05:54,070
class.

72
00:05:54,310 --> 00:05:56,230
That seems to be the main advantage.

73
00:05:57,840 --> 00:06:03,180
Finally, let's look at some specific properties associated with static methods defined in interfaces.

74
00:06:03,930 --> 00:06:05,060
First one is obvious.

75
00:06:05,070 --> 00:06:08,640
We need to use a static modifier in the method declaration.

76
00:06:10,200 --> 00:06:17,190
Second property is that unlike static methods in classes, static methods and interfaces are not inherited.

77
00:06:17,970 --> 00:06:21,570
According to Brian, who is one of the Java language designers.

78
00:06:21,840 --> 00:06:28,740
It seems that the inheritance of static methods and classes is itself a design bug, and after careful

79
00:06:28,740 --> 00:06:35,160
consideration it seems they did not want to extend it to interfaces, especially considering that two

80
00:06:35,160 --> 00:06:38,310
super interfaces can have identical static methods.

81
00:06:38,730 --> 00:06:41,190
So static methods are not inherited.

82
00:06:42,850 --> 00:06:47,770
Finally, static methods and interfaces can be invoked only via interface name.

83
00:06:48,100 --> 00:06:51,010
That is, they cannot be invoked using an object reference.

84
00:06:51,250 --> 00:06:54,070
And we know that interfaces cannot be instantiated to.

85
00:06:55,160 --> 00:07:01,310
Also, since static methods and interfaces cannot be inherited, we cannot even use an instance of a

86
00:07:01,310 --> 00:07:04,550
subtype of the interface to invoke that method.

87
00:07:05,030 --> 00:07:07,250
So it's got to be via the interface name.

88
00:07:08,290 --> 00:07:12,460
And recall that starting methods which are part of classes can be invoked.

89
00:07:12,460 --> 00:07:17,560
We are instances of those classes even though it is not recommended way to do it.

90
00:07:18,430 --> 00:07:24,130
So as you can see, there are some unique properties associated with static methods defined in interfaces.

91
00:07:24,940 --> 00:07:28,390
Let's now go ahead and look at a quick demo of static methods.

92
00:07:30,790 --> 00:07:34,720
In this demo, we are going to extend the quote from the previous demo.

93
00:07:34,930 --> 00:07:42,070
So here we are looking at the Interface C, which we know extends Interface A and I just introduced

94
00:07:42,070 --> 00:07:45,880
one static method which is also named as static method.

95
00:07:46,630 --> 00:07:53,890
And as you can see, we have the static modifier here and the usual print message saying that we are

96
00:07:53,890 --> 00:07:57,790
inside the interface C and inside the static method.

97
00:07:58,680 --> 00:07:59,910
Now let's go to test.

98
00:07:59,910 --> 00:08:00,960
Client to test.

99
00:08:01,350 --> 00:08:04,710
So here we are creating an instance of x.

100
00:08:04,770 --> 00:08:05,900
X is the concrete class.

101
00:08:05,910 --> 00:08:13,650
We know that and C is the reference type and we are invoking the static method via the reference type.

102
00:08:13,650 --> 00:08:16,890
And this is not possible, as mentioned earlier.

103
00:08:17,130 --> 00:08:19,530
So let's just go ahead and compile this.

104
00:08:22,150 --> 00:08:28,180
See it says illegal static interface method called so the receiver expression should be replaced with

105
00:08:28,180 --> 00:08:29,640
the type qualifier.

106
00:08:29,650 --> 00:08:30,130
See.

107
00:08:30,310 --> 00:08:34,419
So we need to qualify it with the interface name.

108
00:08:34,929 --> 00:08:37,659
So let's just do this and this should work.

109
00:08:39,480 --> 00:08:40,380
We run this.

110
00:08:40,890 --> 00:08:42,690
So it's printing the message.

111
00:08:44,970 --> 00:08:48,540
And we also said that static methods cannot be inherited.

112
00:08:48,930 --> 00:08:49,440
So.

113
00:08:49,710 --> 00:08:55,290
So I added this method called inheritance test in the concrete class x.

114
00:08:56,190 --> 00:08:59,880
Here is the inheritance test and here is the static method.

115
00:08:59,880 --> 00:09:02,880
So we are just trying to invoke the static method.

116
00:09:03,150 --> 00:09:07,770
And this should not work either because static methods cannot be inherited.

117
00:09:08,400 --> 00:09:09,840
So let me compile this.

118
00:09:10,690 --> 00:09:15,580
And it says cannot find symbol static method, which means it is invisible here.

119
00:09:15,730 --> 00:09:17,080
So let's just close it.

120
00:09:18,040 --> 00:09:19,570
But go is.

121
00:09:20,370 --> 00:09:24,840
It is a default method and it can be accessed directly.

122
00:09:24,960 --> 00:09:28,530
It's defined in the interface.

123
00:09:28,560 --> 00:09:30,630
See in the last demo itself.

124
00:09:31,140 --> 00:09:33,260
But here I just added one statement.

125
00:09:33,270 --> 00:09:35,100
It is invoking the static method.

126
00:09:35,100 --> 00:09:39,090
So from the default method we are we are calling the static method.

127
00:09:39,090 --> 00:09:41,220
So static method is like a helper method.

128
00:09:41,790 --> 00:09:48,180
So let's just assume that the method go is using the utility method, which is the static method.

129
00:09:48,600 --> 00:09:50,850
So let's just simply compile and run this.

130
00:09:53,950 --> 00:09:55,320
So here it is.

131
00:09:55,330 --> 00:10:00,190
First, the method go is getting invoked from here.

132
00:10:00,220 --> 00:10:06,940
So because method go, which is a default method is inherited and it's getting invoked and it in turn

133
00:10:06,940 --> 00:10:08,650
is invoking the static method.

134
00:10:08,650 --> 00:10:12,550
And so we are seeing the two messages and that's about it.

135
00:10:12,550 --> 00:10:13,660
That's about the demo.

136
00:10:13,780 --> 00:10:19,360
Let me quickly also open up the Java doc and show you one of the interfaces it's called.

137
00:10:21,260 --> 00:10:27,290
Competitor interface, which is from the Java package and we are inside the Java eight dock.

138
00:10:27,770 --> 00:10:33,550
So this competitor interface, we will look at that in the Collections Framework chapter.

139
00:10:33,560 --> 00:10:34,850
But here it is.

140
00:10:34,850 --> 00:10:37,270
As you can see, the Java dock looks slightly different.

141
00:10:37,280 --> 00:10:42,200
It is it has tabs and it has some static methods.

142
00:10:42,200 --> 00:10:48,020
Here you can see the static modifier and as usual it also has some abstract methods.

143
00:10:49,110 --> 00:10:55,890
So static methods were added recently with Java eight and this tab shows only default methods.

144
00:10:56,520 --> 00:11:02,280
The default methods tab shows only default methods that were added into this interface and instance

145
00:11:02,280 --> 00:11:08,220
methods is basically a union of both abstract as well as default methods.

146
00:11:08,220 --> 00:11:10,410
So it does not include static methods.

147
00:11:10,410 --> 00:11:16,170
So it includes both abstract as well as default methods, whereas abstract methods include only abstract

148
00:11:16,170 --> 00:11:18,780
methods and default in only default methods.

149
00:11:19,110 --> 00:11:26,100
So just wanted to show this difference in the Java doc and if you just replace this eight with seven.

150
00:11:27,680 --> 00:11:31,220
Then we see the old UI or the docks.

151
00:11:31,310 --> 00:11:32,990
So this is from the Java seven docks.

152
00:11:32,990 --> 00:11:35,240
And as you can see, there are only two abstract methods.

153
00:11:35,420 --> 00:11:40,740
So with Java eight, both default and static methods were added.

154
00:11:40,760 --> 00:11:43,520
And so the API dock also looks different.

155
00:11:43,880 --> 00:11:45,080
So that's about it.

156
00:11:45,080 --> 00:11:46,790
That's about static methods.

157
00:11:46,940 --> 00:11:47,540
That's it.

