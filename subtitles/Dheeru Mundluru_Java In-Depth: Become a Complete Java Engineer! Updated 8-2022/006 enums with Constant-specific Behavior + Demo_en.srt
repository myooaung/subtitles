1
00:00:02,160 --> 00:00:02,880
Hello there.

2
00:00:02,910 --> 00:00:04,019
This is the Domaine de la Rue.

3
00:00:04,019 --> 00:00:04,950
And welcome back.

4
00:00:05,340 --> 00:00:12,960
We already saw how a basic enum with just a simple collection of constants can evolve over time to include

5
00:00:12,960 --> 00:00:14,220
state and behavior.

6
00:00:14,510 --> 00:00:20,970
Right now, let's take this process a step further by actually associating behavior that is specific

7
00:00:20,970 --> 00:00:22,380
to each enum constant.

8
00:00:22,980 --> 00:00:26,160
Earlier, the behavior was identical across all constants.

9
00:00:26,190 --> 00:00:30,360
Now we are talking about behavior that is specific to each enum constant.

10
00:00:30,750 --> 00:00:35,640
And that's what the title here says enum but constant, specific behavior.

11
00:00:35,970 --> 00:00:37,800
So let's see how that can be done.

12
00:00:39,290 --> 00:00:40,520
It can be done in two ways.

13
00:00:40,550 --> 00:00:45,170
One is via a switch statement, while the other is using constant specific methods.

14
00:00:45,260 --> 00:00:50,360
Both the methods are discussed in item 30 in effective Java, which we mentioned earlier.

15
00:00:50,630 --> 00:00:55,610
It's a comprehensive item and it recommends using enum instead of int enum pattern.

16
00:00:56,960 --> 00:00:59,050
Here is how it is done using a switch statement.

17
00:00:59,060 --> 00:01:02,810
And this is our familiar book class with the nested enum book genre.

18
00:01:03,440 --> 00:01:09,980
Only the method in the red box is new here and it is named as is kid friendly and it has a single parameter

19
00:01:09,980 --> 00:01:10,490
h.

20
00:01:11,300 --> 00:01:17,120
We can assume that the input h could be of a particular user and this method would be invoked on the

21
00:01:17,120 --> 00:01:19,040
genre of a particular book.

22
00:01:19,430 --> 00:01:23,780
That is a book has a genre which would be an enum constant like biography.

23
00:01:23,780 --> 00:01:29,930
And if we need to know whether this book can be shown to a particular user, we can invoke this method

24
00:01:29,960 --> 00:01:34,700
is kid friendly on the books genre and we can pass that user's age.

25
00:01:35,640 --> 00:01:40,710
Now in the method we have a switch statement, the switch expression, which is nothing but the expression

26
00:01:40,710 --> 00:01:41,880
in the parentheses.

27
00:01:41,880 --> 00:01:45,090
Following the switch key word is the dis reference.

28
00:01:46,030 --> 00:01:51,490
This reference would be the enum constant on which this method is kid friendly is invoked.

29
00:01:52,360 --> 00:01:57,310
And this reference would be matched with the case labels, which are the enum constants.

30
00:01:58,260 --> 00:02:03,780
The keys block corresponding to each enum constant has the behavior that is specific to that particular

31
00:02:03,780 --> 00:02:04,470
constant.

32
00:02:05,100 --> 00:02:10,770
For instance, here for the constant biography, the logic is the condition age greater than or equal

33
00:02:10,770 --> 00:02:18,120
to min age to read, manage to read for biography is well and so a true would be retained only if the

34
00:02:18,120 --> 00:02:21,200
input age is greater than or equal to 12.

35
00:02:22,180 --> 00:02:28,240
You may recall from our switch statement lecture from section four, that speech expression can be of

36
00:02:28,280 --> 00:02:29,200
enum type two.

37
00:02:29,890 --> 00:02:35,410
You may recall that a speech expression can be of three types, integer string or an enum.

38
00:02:36,070 --> 00:02:39,340
And now we know how we can use them in a switch statement.

39
00:02:40,820 --> 00:02:47,030
Now a limitation with using such a switch block is that if we add a new enum constant, then we may

40
00:02:47,030 --> 00:02:53,780
also have to remember to add a new case block in our switch statement, as that enum constant might

41
00:02:53,780 --> 00:02:59,030
have its own logic to determine whether a user can be shown the books that it represents.

42
00:02:59,860 --> 00:03:04,960
So the developer has to be alert in adding the behavior that is specific to the new constant.

43
00:03:05,740 --> 00:03:11,440
Otherwise, by default, defaults would be returned at runtime, and it may result in displaying books

44
00:03:11,440 --> 00:03:13,990
that should not be shown to certain users.

45
00:03:14,740 --> 00:03:20,260
Now this limitation can be avoided using the second approach for providing constant, specific behavior.

46
00:03:21,990 --> 00:03:23,730
And here is the second approach.

47
00:03:23,760 --> 00:03:26,970
The new code is once again highlighted in the red box.

48
00:03:27,510 --> 00:03:33,960
This approach is interesting, as you can see that each constant is associated with a body that starts

49
00:03:33,960 --> 00:03:35,760
on ends with curly braces.

50
00:03:36,610 --> 00:03:40,900
And this body is referred to as constant, specific class body.

51
00:03:42,190 --> 00:03:44,650
And it can have both variables as well as methods.

52
00:03:44,830 --> 00:03:49,630
And the methods are referred to as constant specific method implementations.

53
00:03:50,560 --> 00:03:56,290
And in this example, we don't have any variables, but you can certainly define them outside of the

54
00:03:56,290 --> 00:03:59,050
constant specific methods, just like any class.

55
00:03:59,890 --> 00:04:06,670
So essentially the constant specific behavior that was part of case blocks in the switch based design

56
00:04:06,700 --> 00:04:09,760
are now moved into constant specific bodies.

57
00:04:10,000 --> 00:04:13,780
And the method name in both the bodies is still is quite friendly.

58
00:04:14,800 --> 00:04:20,529
Another limitation with the switch based design about forcing the developer to add a constant specific

59
00:04:20,529 --> 00:04:28,510
behavior is addressed here as this design requires adding an abstract friendly method in the enum type.

60
00:04:28,930 --> 00:04:30,010
As we can see here.

61
00:04:30,520 --> 00:04:36,580
Now, this would force the developer to also add an implementation of this method with every newly added

62
00:04:36,580 --> 00:04:37,660
enum constant.

63
00:04:38,230 --> 00:04:41,380
And I'm sure you would agree that it's a pretty cool design.

64
00:04:43,130 --> 00:04:44,330
Now under the hood.

65
00:04:44,330 --> 00:04:49,010
This is what is happening for each constant specific class body definition.

66
00:04:49,010 --> 00:04:54,730
The compiler creates an anonymous class that extends the enum type book genre.

67
00:04:56,580 --> 00:05:01,080
Recall that internally book genre will be translated into a final class.

68
00:05:01,410 --> 00:05:07,380
But now in this case, since we have anonymous classes extending it, it is no longer final.

69
00:05:08,290 --> 00:05:14,440
So if we have enough constants with constant specific class bodies, then the enum type will no longer

70
00:05:14,440 --> 00:05:15,190
be final.

71
00:05:16,760 --> 00:05:22,790
Also, when we say we will have anonymous classes, it means that we have classes created with names

72
00:05:22,790 --> 00:05:26,570
such as book dollar, book, genre, dollar sum number.

73
00:05:27,260 --> 00:05:30,100
In our example, we will have two anonymous classes.

74
00:05:30,110 --> 00:05:31,760
So it will be book dollar.

75
00:05:31,790 --> 00:05:33,660
Book genre dollar one.

76
00:05:34,040 --> 00:05:34,760
Dollar two.

77
00:05:36,570 --> 00:05:42,600
So in the class that corresponds to book genre, each constant will be an instance of the corresponding

78
00:05:42,600 --> 00:05:45,210
anonymous class, which extends book genre.

79
00:05:45,930 --> 00:05:49,860
Previously, each constant was an instance of book genre itself.

80
00:05:51,300 --> 00:05:57,570
Now any variable declared in the enum and is accessed within a constant specific body should have an

81
00:05:57,570 --> 00:05:59,880
access level of at least default.

82
00:06:00,630 --> 00:06:02,160
You may guess the reason for that.

83
00:06:02,370 --> 00:06:08,550
Since variable is part of enum type and if it is declared as private, then it will not be accessible

84
00:06:08,550 --> 00:06:14,460
in any of the constant, specific anonymous classes that are subtypes of the enum type.

85
00:06:14,910 --> 00:06:17,850
So it's got to be at least default access level.

86
00:06:18,330 --> 00:06:21,150
You can see here that it is declared as protected.

87
00:06:22,750 --> 00:06:29,200
And finally, the anonymous class will not maintain a hidden reference to the enclosing class, which

88
00:06:29,200 --> 00:06:34,300
is the book class, as the anonymous class is created in a static context.

89
00:06:34,780 --> 00:06:41,800
Static context is the enum book genre, which we know is implicitly static as it is a nested enum.

90
00:06:42,490 --> 00:06:47,740
You may recall from our discussion on inner classes that they maintain hidden references to enclosing

91
00:06:47,740 --> 00:06:50,740
classes for accessing their instance members.

92
00:06:51,740 --> 00:06:55,790
So those are the two ways of associating constant specific behavior.

93
00:06:56,540 --> 00:07:02,720
Generally, I think such constant, specific behavior is more of an exotic feature and may not be commonly

94
00:07:02,720 --> 00:07:03,480
encountered.

95
00:07:03,500 --> 00:07:06,470
But if we need it, we know how to do it.

96
00:07:07,100 --> 00:07:11,210
Now let's head over to our editor to do a quick demo of both the methods.

97
00:07:13,600 --> 00:07:13,870
OC.

98
00:07:13,900 --> 00:07:16,870
Here is the ebook class with the nested enum book genre.

99
00:07:17,470 --> 00:07:21,350
So first let's go ahead and locate the switch based design.

100
00:07:21,370 --> 00:07:24,750
So in the switch based design, we have added this new method.

101
00:07:24,760 --> 00:07:27,470
So everything is same as we have seen in the slides.

102
00:07:27,490 --> 00:07:32,710
So this is the new method is kid friendly and it has the switch statement, switch off this.

103
00:07:32,950 --> 00:07:36,040
And here are the case labels, which are the enum constants.

104
00:07:36,430 --> 00:07:38,500
And everything else is just same.

105
00:07:40,110 --> 00:07:45,030
Now here in the main method, we are iterating both the enum constants.

106
00:07:45,180 --> 00:07:50,370
And the only thing I have added is this one let's call it is kid friendly.

107
00:07:53,200 --> 00:07:55,750
And we are passing a value of 25 here.

108
00:07:57,380 --> 00:07:59,450
And these are the two constants.

109
00:07:59,810 --> 00:08:04,640
So the main method is outside of the nested book genre.

110
00:08:04,680 --> 00:08:05,110
Right.

111
00:08:05,120 --> 00:08:07,490
So let's just go ahead and run this first.

112
00:08:10,310 --> 00:08:16,460
So the in the first iteration we are having the enum constant biography.

113
00:08:18,130 --> 00:08:22,450
And we were passing the value 25, which is greater than or equal to 12.

114
00:08:23,280 --> 00:08:24,600
So if you go here.

115
00:08:24,750 --> 00:08:25,380
Here it is.

116
00:08:25,380 --> 00:08:26,150
This is the logic.

117
00:08:26,160 --> 00:08:30,330
It should be greater than or equal to manage to read and manage to read.

118
00:08:30,330 --> 00:08:33,059
Worst of all and age will be 25.

119
00:08:34,080 --> 00:08:35,400
So it is invoked.

120
00:08:35,400 --> 00:08:43,530
This method is invoked on an enum constant and as you can see, it returns a true because a R 25 is

121
00:08:43,530 --> 00:08:47,490
greater than or equal to 12 and which means that it is kid friendly.

122
00:08:47,790 --> 00:08:54,660
Now in the second iteration it is harder and for horror it is returning false because by default the

123
00:08:54,660 --> 00:08:56,400
logic returns a false.

124
00:08:56,640 --> 00:08:59,460
So there is no really specific logic here like this.

125
00:08:59,460 --> 00:09:03,930
So it simply returns false, which means that any horror book is not kid friendly.

126
00:09:04,530 --> 00:09:06,210
So that's the switch based design.

127
00:09:07,100 --> 00:09:07,400
Okay.

128
00:09:07,460 --> 00:09:12,280
And let's go ahead and look at the second one, the limitation with the switch based design.

129
00:09:12,290 --> 00:09:20,120
We know that if we add a new constant here, then we should also remember that we need to add any corresponding

130
00:09:20,600 --> 00:09:22,370
specific behavior here.

131
00:09:22,910 --> 00:09:23,990
We need to introduce a new case.

132
00:09:23,990 --> 00:09:26,210
BLOCK Now, let's go ahead and.

133
00:09:27,200 --> 00:09:27,860
It's just.

134
00:09:27,860 --> 00:09:28,790
Copy this.

135
00:09:36,650 --> 00:09:38,960
Let's put our constant, specific class body.

136
00:09:40,270 --> 00:09:43,340
Here is is kid friendly content.

137
00:09:43,360 --> 00:09:45,250
So let's just certain.

138
00:09:46,370 --> 00:09:47,030
Thus.

139
00:09:50,690 --> 00:09:51,180
That's it.

140
00:09:51,860 --> 00:09:54,080
Now for the second one.

141
00:09:55,210 --> 00:09:56,380
We'll still be same.

142
00:10:04,390 --> 00:10:04,820
Okay.

143
00:10:05,020 --> 00:10:10,330
Now here we have a compilation error because this has to be at least default.

144
00:10:10,330 --> 00:10:12,210
It needs to have at least a default access level.

145
00:10:12,220 --> 00:10:13,360
Here it is private.

146
00:10:15,400 --> 00:10:15,860
Okay.

147
00:10:16,090 --> 00:10:18,130
Now there is one more compilation error.

148
00:10:18,670 --> 00:10:28,630
It says is kid friendly should be defined in book genre because book genre does not have is kid friendly

149
00:10:28,630 --> 00:10:29,080
yet.

150
00:10:29,350 --> 00:10:32,970
So we need to add our abstract method, right?

151
00:10:34,170 --> 00:10:34,980
So.

152
00:10:36,020 --> 00:10:36,920
Just take this.

153
00:10:40,000 --> 00:10:44,530
And this is what addresses the limitation in the first approach.

154
00:10:46,450 --> 00:10:47,380
So that's it.

155
00:10:47,560 --> 00:10:49,810
So let's go ahead and run it.

156
00:10:54,100 --> 00:10:56,710
So once again is kid friendly is true.

157
00:10:57,040 --> 00:11:03,220
When the book genre it was was a biography and it is false when it is horror.

158
00:11:03,760 --> 00:11:05,050
So that's about it.

159
00:11:05,050 --> 00:11:10,090
And this code will be available in the resources section and thank you and happy coding.

