WEBVTT
1
00:00:02.060 --> 00:00:03.060
Hello there.

2
00:00:03.080 --> 00:00:04.250
This is the De La Rue.

3
00:00:04.250 --> 00:00:05.300
And welcome back.

4
00:00:05.600 --> 00:00:12.200
So in the last lecture, we looked at flawed and double data types and you can use float or double if

5
00:00:12.200 --> 00:00:16.850
you are fine with computations that could lead to approximate results.

6
00:00:17.330 --> 00:00:24.020
For instance, if you want to measure distance between two points and let's say the actual distances,

7
00:00:24.140 --> 00:00:35.120
515.8 miles, and if your program computes it as, say, 515.1 miles, then it is still fine, it is

8
00:00:35.120 --> 00:00:38.930
tolerable, it is acceptable, and life is still good.

9
00:00:39.170 --> 00:00:46.160
But if your application needs exact results, then you should avoid float or double data types.

10
00:00:46.820 --> 00:00:52.820
For example, let's say if you have an E commerce website, then you would want all the sales to be

11
00:00:52.820 --> 00:00:54.140
exactly represented.

12
00:00:54.830 --> 00:00:57.560
If you charge less, you may run into losses.

13
00:00:58.190 --> 00:01:05.600
That's because float and double are associated with certain pitfalls and many engineers are not aware

14
00:01:05.600 --> 00:01:06.350
of this.

15
00:01:06.590 --> 00:01:09.320
And things could be fine most of the time.

16
00:01:09.740 --> 00:01:15.620
But if they run into this limitation that we are going to see, then they would see some surprising

17
00:01:15.620 --> 00:01:16.250
results.

18
00:01:16.490 --> 00:01:18.290
And that could be disastrous to.

19
00:01:19.050 --> 00:01:20.940
So let's go ahead and check it out.

20
00:01:20.940 --> 00:01:23.370
And it's very important to be aware of this.

21
00:01:25.910 --> 00:01:26.130
Och.

22
00:01:26.300 --> 00:01:28.490
Here we are in the basics demo class.

23
00:01:28.490 --> 00:01:30.320
So this is not the student class.

24
00:01:30.680 --> 00:01:35.900
Now, let me just here I have commented out the previous method primitives.

25
00:01:36.440 --> 00:01:40.190
So I'm going to show the demo here in the main method itself.

26
00:01:40.400 --> 00:01:45.660
So let's say we want to subtract 0.9 from one, right?

27
00:01:45.680 --> 00:01:47.570
So let's just print that value.

28
00:01:47.570 --> 00:01:50.180
So it should be point one, right?

29
00:01:50.870 --> 00:01:52.280
You're saying one minus.

30
00:01:53.430 --> 00:01:53.940
Nine.

31
00:01:55.290 --> 00:01:59.250
So let's go into the basics directory here and compile.

32
00:02:05.460 --> 00:02:07.260
So it brings this value.

33
00:02:07.260 --> 00:02:10.530
It's not 0.1, but almost 0.1.

34
00:02:10.740 --> 00:02:11.130
Right.

35
00:02:11.130 --> 00:02:13.110
Slightly lower than 0.1.

36
00:02:13.560 --> 00:02:14.850
So that's the thing.

37
00:02:15.300 --> 00:02:17.340
Now, let's take one more example.

38
00:02:17.340 --> 00:02:20.940
Let's say we want to add point one and point two.

39
00:02:21.950 --> 00:02:23.510
And what should it be?

40
00:02:23.900 --> 00:02:25.580
It should be point three.

41
00:02:27.510 --> 00:02:30.060
Recompile and rerun.

42
00:02:30.890 --> 00:02:33.620
Once again, it does not give us the exact number.

43
00:02:33.980 --> 00:02:40.520
It's supposed to be 0.3, but it gives a slightly larger number, which is almost 0.3, but 0.3.

44
00:02:41.150 --> 00:02:48.770
So the reason for this is numbers like point one, point two and so on cannot be accurately represented

45
00:02:48.770 --> 00:02:53.510
within computers, and that's due to the format that computers use.

46
00:02:53.870 --> 00:03:00.980
So they follow a777 54 format and specifically they follow the binary floating point format.

47
00:03:01.250 --> 00:03:02.240
That's the format.

48
00:03:02.630 --> 00:03:06.620
And in that format, such numbers cannot be accurately represented.

49
00:03:07.280 --> 00:03:09.740
Now it's an issue with all languages.

50
00:03:09.740 --> 00:03:11.390
It's not just with Java.

51
00:03:11.780 --> 00:03:17.570
And if you Google for this, you will see that with other languages like JavaScript and Python, they

52
00:03:17.570 --> 00:03:19.310
also have the same issue.

53
00:03:19.820 --> 00:03:23.810
So let me just show you how point one would be represented.

54
00:03:24.470 --> 00:03:34.940
So point one would be something like 0.00011 and this 0011 would.

55
00:03:38.050 --> 00:03:39.520
Be repeated.

56
00:03:40.090 --> 00:03:44.080
It keeps repeating and you would have a finite number of digits.

57
00:03:45.350 --> 00:03:50.060
It's because of the format, but both float and double have a limited number of bets.

58
00:03:50.060 --> 00:03:57.470
So this huge value has to be truncated to whatever float or double would have would need.

59
00:03:58.010 --> 00:04:00.830
So there is an approximation right there.

60
00:04:01.750 --> 00:04:07.000
So, but it is not exactly 0.1 and it would also involve certain rounding.

61
00:04:07.000 --> 00:04:08.710
Rounding will be done at the end.

62
00:04:08.710 --> 00:04:11.110
So there will be some rounding error also.

63
00:04:11.800 --> 00:04:18.820
Now the issue is because the denominator of these numbers are not a power of two.

64
00:04:19.029 --> 00:04:23.050
For instance, if you pick 0.1, it is nothing but one by ten, right?

65
00:04:23.050 --> 00:04:25.690
And ten in the denominator is not a power of two.

66
00:04:26.080 --> 00:04:31.570
If you pick 0.2, it is two by ten, which is one by five, and five is not a power of two.

67
00:04:31.930 --> 00:04:40.030
Now, if you pick 0.5.5 is five by ten, and if you reduce it to its lowest terms, it would be one

68
00:04:40.030 --> 00:04:40.460
by two.

69
00:04:40.480 --> 00:04:42.170
Five by ten is nothing but one by two.

70
00:04:42.190 --> 00:04:45.340
So in the denominator you have to two to the power of one.

71
00:04:45.670 --> 00:04:51.190
So point five can be accurately represented now, but most of the numbers cannot be.

72
00:04:51.550 --> 00:04:57.040
This is especially an issue if we are dealing with money, like the way I mentioned earlier.

73
00:04:57.370 --> 00:05:02.050
Now, in fact, in one of the exercises, one of the students actually ran into this.

74
00:05:02.140 --> 00:05:04.420
Let me just give you a quick example.

75
00:05:04.690 --> 00:05:10.810
It's not the exact code, but something similar, but you get a feel for it if you use float or double

76
00:05:10.810 --> 00:05:11.860
to represent money.

77
00:05:12.520 --> 00:05:21.250
So let's say double is the data type and let's have price as, let's say $1,000 or whatever currency

78
00:05:21.250 --> 00:05:23.370
that you would like to think about.

79
00:05:23.380 --> 00:05:28.090
So next, let's say we want to apply some discount percentage.

80
00:05:28.510 --> 00:05:30.250
Let's give some discount percentage.

81
00:05:30.250 --> 00:05:35.980
Let's say the price of the product is thousand, but there is a discount of 90%.

82
00:05:35.980 --> 00:05:40.300
So let's call it a discount percent.

83
00:05:40.330 --> 00:05:43.420
90% would be point nine.

84
00:05:43.420 --> 00:05:45.250
We can represent it as 0.9.

85
00:05:46.150 --> 00:05:46.930
And.

86
00:05:47.870 --> 00:05:48.800
So double.

87
00:05:48.800 --> 00:05:50.600
So the discount amount.

88
00:05:52.350 --> 00:05:54.870
It would be 900, which is nothing but 1000.

89
00:05:56.090 --> 00:05:58.490
Price times.

90
00:06:00.520 --> 00:06:01.630
Discount percent.

91
00:06:02.260 --> 00:06:02.860
Right.

92
00:06:02.860 --> 00:06:05.470
So that's the discount amount.

93
00:06:07.120 --> 00:06:08.510
You should be se here.

94
00:06:08.530 --> 00:06:09.970
So let's just print this.

95
00:06:13.140 --> 00:06:18.110
So the final price would be price minus discount amount.

96
00:06:18.120 --> 00:06:20.130
So it would be $100.

97
00:06:22.640 --> 00:06:25.700
All right, so let's just recompile this.

98
00:06:27.950 --> 00:06:28.240
Okay.

99
00:06:28.250 --> 00:06:32.220
It prints 100, but one of the students did something different.

100
00:06:32.240 --> 00:06:33.470
What he did was.

101
00:06:35.000 --> 00:06:38.870
Instead of doing this, he multiplied price.

102
00:06:40.300 --> 00:06:48.270
Directly with one minus .91 -0.9, which is nothing but the discount percent.

103
00:06:48.280 --> 00:06:50.240
So let me just get this.

104
00:06:50.320 --> 00:06:52.450
1% is 0.9.

105
00:06:52.870 --> 00:06:57.580
So he directly multiplied this so that he can get 100.

106
00:06:58.770 --> 00:07:01.350
So there's just an alternate way of doing it.

107
00:07:02.340 --> 00:07:05.010
Because the student was not aware of this issue.

108
00:07:07.090 --> 00:07:09.460
So it does not print hundred.

109
00:07:09.490 --> 00:07:12.520
It was printing 99.99.

110
00:07:13.270 --> 00:07:16.120
So there is a minor error here.

111
00:07:17.170 --> 00:07:25.400
There is some approximation because this value is 0.1 and 0.1 cannot be accurately represented.

112
00:07:25.420 --> 00:07:27.940
So because of that, we had that issue.

113
00:07:28.360 --> 00:07:34.000
So when you are dealing with money, you should not be using double and float.

114
00:07:34.030 --> 00:07:36.500
It would be disastrous if you use it.

115
00:07:36.520 --> 00:07:41.650
So what is recommended is to use a class in Java called Big Decimal.

116
00:07:42.070 --> 00:07:47.890
So Big Decimal can be it comes with the Java library and you can use it, especially when you're dealing

117
00:07:47.890 --> 00:07:50.870
with things like money where you need exact results.

118
00:07:50.890 --> 00:07:53.770
So let me quickly show you how it would work.

119
00:07:54.190 --> 00:07:56.560
So just so that you would get a feel for it.

120
00:07:56.980 --> 00:07:59.740
So let's do this point one plus point two here.

121
00:08:00.820 --> 00:08:04.960
So we big decimal is a class, so we are creating an object of that.

122
00:08:05.860 --> 00:08:11.590
We know that it would be like this, but instead of empty parentheses, let's pass something.

123
00:08:11.590 --> 00:08:13.590
Don't worry what this means.

124
00:08:13.600 --> 00:08:17.680
But just think that it represents point one and.

125
00:08:20.510 --> 00:08:22.550
And this represents point two.

126
00:08:24.630 --> 00:08:26.340
And let me just print this.

127
00:08:28.830 --> 00:08:30.180
Now the second object.

128
00:08:30.180 --> 00:08:31.680
Let's call it a second.

129
00:08:33.110 --> 00:08:36.169
And here so fast is an object, right?

130
00:08:36.169 --> 00:08:37.820
It's an object of big decimal.

131
00:08:37.820 --> 00:08:47.180
So I'll say first and big decimal class has a method called add so fast represents 0.1 and we want to

132
00:08:47.180 --> 00:08:51.560
add 0.1 to 0.2, which is represented by this object called second.

133
00:08:51.710 --> 00:08:56.540
So to this method add, we pass this second object as an input.

134
00:08:56.570 --> 00:09:00.350
So don't worry about this because we did not formally discuss methods.

135
00:09:00.350 --> 00:09:05.840
So I just want to show you how this works, how it prints the exact value.

136
00:09:05.840 --> 00:09:14.840
But Big Decimal is a class in Java library and it is part of something called Java dot math package.

137
00:09:14.840 --> 00:09:17.570
So packages will also be discussed later.

138
00:09:17.570 --> 00:09:21.110
So Java Library is split into packages.

139
00:09:22.030 --> 00:09:27.640
But so it will at least give you some feel for how we can use our library.

140
00:09:27.850 --> 00:09:29.100
So that's all there is.

141
00:09:29.110 --> 00:09:31.750
So it should print as point three.

142
00:09:31.750 --> 00:09:33.370
So let me recompile this.

143
00:09:35.500 --> 00:09:39.850
So at Prince Point three, it's no longer this approximate number.

144
00:09:40.180 --> 00:09:41.500
So you need to use big decimal.

145
00:09:41.530 --> 00:09:46.780
Big decimal is slow, but if your application needs it, you have to use it.

146
00:09:47.110 --> 00:09:49.900
So in ecommerce applications, that's what they use.

147
00:09:50.740 --> 00:09:54.550
Now there is an item from effective Java.

148
00:09:55.240 --> 00:09:58.270
It's item 48 in second version.

149
00:09:58.270 --> 00:10:00.150
And in the third version it is item 60.

150
00:10:00.160 --> 00:10:02.050
So it's just a recommended rule.

151
00:10:02.050 --> 00:10:04.760
Items are rules or best practices.

152
00:10:04.780 --> 00:10:11.620
So that item it says avoid, float and double if exact answers are required.

153
00:10:12.280 --> 00:10:16.630
That's what we mentioned in this particular lecture, and that's what this item says.

154
00:10:16.660 --> 00:10:22.540
It also talks about some of these examples and it recommends using big decimal, but it has some more

155
00:10:22.540 --> 00:10:25.540
information beyond what we discussed in this lecture.

156
00:10:25.660 --> 00:10:31.210
So later, once you are through this course or once you're comfortable with Java, you can go ahead

157
00:10:31.210 --> 00:10:36.400
and read that that particular article just so that you will have a little bit more information than

158
00:10:36.400 --> 00:10:37.390
what we discussed.

159
00:10:38.020 --> 00:10:39.430
So it's that's all there is.

160
00:10:39.430 --> 00:10:45.340
So you need to be aware of this pitfalls of float and double, and you would want to use it only if

161
00:10:45.340 --> 00:10:47.470
you are fine with approximate results.

162
00:10:47.470 --> 00:10:50.410
But if you need exact results, you shouldn't be using it.

163
00:10:51.130 --> 00:10:54.610
Thank you and see you in the next lecture and happy coding.

