WEBVTT
1
00:00:02.080 --> 00:00:03.080
Hi there.

2
00:00:03.100 --> 00:00:04.290
This is the model guru.

3
00:00:04.300 --> 00:00:10.930
And welcome back to the demos that we have done so far and the section we are now to some extent already

4
00:00:10.930 --> 00:00:12.160
familiar with methods.

5
00:00:12.490 --> 00:00:15.340
Let's now take a look at methods in a more formal way.

6
00:00:17.300 --> 00:00:23.360
We know that an object has state and behavior and behavior is defined by methods.

7
00:00:23.540 --> 00:00:26.390
And we know that state is defined by variables.

8
00:00:28.170 --> 00:00:32.910
Methods represent some logic which can be used any number of times.

9
00:00:33.690 --> 00:00:40.650
A software business logic or algorithms are coded into methods, and nothing worthwhile can be achieved

10
00:00:40.650 --> 00:00:41.970
without methods.

11
00:00:43.530 --> 00:00:46.270
Methods typically receive data as input.

12
00:00:46.290 --> 00:00:50.880
Then they do some processing and finally can generate some output.

13
00:00:51.450 --> 00:00:54.240
Let's look at a simple depiction of method invocation.

14
00:00:55.640 --> 00:00:58.310
We will have a method which needs to be invoked.

15
00:00:59.710 --> 00:01:05.500
And we will also have a caller who invokes the method caller is just another piece of code.

16
00:01:05.560 --> 00:01:11.590
And if method needs some input data, then the caller has to pass the input data.

17
00:01:12.950 --> 00:01:20.180
The method then performs its actions and can return some data back to the colour colour then further

18
00:01:20.180 --> 00:01:21.800
uses the data returned.

19
00:01:23.590 --> 00:01:25.480
And here is the syntax for a method.

20
00:01:25.990 --> 00:01:33.730
It has a method name, which is followed by an optional list of something called parameters which indicate

21
00:01:33.730 --> 00:01:35.590
the input data for the method.

22
00:01:36.500 --> 00:01:42.770
A method can have one or more parameters, and if there are no parameters, then it means that the method

23
00:01:42.770 --> 00:01:51.500
does not take any input and a parameter is simply a variable and hence has a data type and a variable

24
00:01:51.500 --> 00:01:51.860
name.

25
00:01:52.670 --> 00:01:58.190
Since a parameter is a variable, it can be either a primitive or an object reference.

26
00:01:58.730 --> 00:02:05.120
And as we mentioned earlier, method will perform some action and may return a value which is the output

27
00:02:05.120 --> 00:02:05.840
of the method.

28
00:02:06.260 --> 00:02:09.500
And value is returned using the return statement.

29
00:02:09.889 --> 00:02:14.960
And here the keyword return in the return statement is a reserved keyword in Java.

30
00:02:15.620 --> 00:02:22.790
Now like method parameters, the value retained can also be either a parameter or an object reference,

31
00:02:23.090 --> 00:02:26.450
and it can also be a variable or a literal to.

32
00:02:27.210 --> 00:02:35.100
And the type of the value returned which we call as methods return type is indicated in the method declaration

33
00:02:35.100 --> 00:02:37.140
right before the method name.

34
00:02:37.710 --> 00:02:44.130
Stating the return type in the declaration is mandatory and it also has to appear right before the method

35
00:02:44.130 --> 00:02:44.550
name.

36
00:02:44.850 --> 00:02:51.120
Otherwise we get a compilation error so you cannot have anything in between the methods return type

37
00:02:51.120 --> 00:02:52.410
under the methods name.

38
00:02:54.430 --> 00:02:55.360
In Java.

39
00:02:55.360 --> 00:03:01.300
The method name and the method parameter list together are referred to as method signature.

40
00:03:01.900 --> 00:03:05.080
So method return type is not part of the signature.

41
00:03:05.380 --> 00:03:11.710
Sometimes developers incorrectly assume that the methods return type is also part of the signature.

42
00:03:12.190 --> 00:03:13.660
So just stick this in your mind.

43
00:03:13.690 --> 00:03:19.390
Method signature includes only method name and parameter list and not the methods return type.

44
00:03:20.080 --> 00:03:23.680
Now, once the method is defined, it needs to be invoked.

45
00:03:24.070 --> 00:03:28.180
Methods logic will never be executed if it is not invoked.

46
00:03:28.720 --> 00:03:31.630
So you would have some code invoking the method.

47
00:03:31.660 --> 00:03:34.570
And let's look at the syntax on the invocation side.

48
00:03:36.530 --> 00:03:43.100
The syntax involves the method name followed by any input data that needs to be passed to the method.

49
00:03:43.790 --> 00:03:49.700
The input data in the parentheses is referred to as method arguments or simply arguments.

50
00:03:50.090 --> 00:03:55.370
The arguments passed must have a 1 to 1 match with the method parameters.

51
00:03:55.910 --> 00:04:03.620
That is, they must be of compatible type and in the same order, and the number of arguments must match

52
00:04:03.620 --> 00:04:05.750
the number of method parameters.

53
00:04:06.410 --> 00:04:12.440
So for example, if the first parameter in the method declaration is an int and second is a boolean,

54
00:04:12.650 --> 00:04:20.420
then on the invocation end for the first argument, the caller should pass an int or a smaller compatible

55
00:04:20.420 --> 00:04:25.970
type like byte or a shot, and a boolean should be passed as the second argument.

56
00:04:26.270 --> 00:04:28.430
Otherwise we get a compilation error.

57
00:04:29.250 --> 00:04:35.040
Also, if the method does not take any input, then we just have an empty parenthesis on the invocation

58
00:04:35.040 --> 00:04:35.460
side.

59
00:04:36.310 --> 00:04:39.640
Now here I want to emphasize a bit on terminology.

60
00:04:40.300 --> 00:04:46.900
You can see that when we are talking about method definition, we would refer to the method input variables

61
00:04:46.900 --> 00:04:48.310
as parameters.

62
00:04:48.730 --> 00:04:52.360
Sometimes they are also referred to as formal parameters.

63
00:04:52.900 --> 00:05:00.280
However, when we are referring to method invocation, we would call them as arguments and some refer

64
00:05:00.280 --> 00:05:02.590
to it as actual parameters.

65
00:05:03.250 --> 00:05:06.610
So we have formal parameters and actual parameters.

66
00:05:06.880 --> 00:05:11.830
And in this course, let's try to stick with the terms, parameters and arguments.

67
00:05:12.430 --> 00:05:18.430
Often we tend to intermix these terms, but strictly speaking, parameter is the right term when we

68
00:05:18.430 --> 00:05:24.190
are talking about method definition while argument is the right term, when we are talking about method

69
00:05:24.190 --> 00:05:25.060
invocation.

70
00:05:26.110 --> 00:05:32.950
Finally, if the method is returning a value, the value is typically assigned to some variable on the

71
00:05:32.950 --> 00:05:36.820
invocation end, and the caller further uses it in some way.

72
00:05:37.060 --> 00:05:43.510
However, nothing stops the caller from ignoring the return value, although that is very uncommon.

73
00:05:44.320 --> 00:05:50.650
Also, just the way arguments and parameters have to match the return type and the method declaration

74
00:05:50.650 --> 00:05:54.670
and the type of the variable on the caller's end must also match.

75
00:05:55.030 --> 00:05:57.550
That is, there must be of compatible types.

76
00:05:57.880 --> 00:05:59.710
Otherwise we get a compilation error.

77
00:06:00.540 --> 00:06:08.040
So if it is the method's return type, then the variable on the caller's end must be off type end or

78
00:06:08.040 --> 00:06:09.240
a smaller data type.

79
00:06:10.060 --> 00:06:15.880
Similarly, the value returned by the method and the return type in the method declaration should also

80
00:06:15.880 --> 00:06:16.750
be compatible.

81
00:06:18.530 --> 00:06:22.040
Next, let's look at few more details on the methods return type.

82
00:06:22.490 --> 00:06:25.340
There is a special type of return type called void.

83
00:06:26.900 --> 00:06:33.980
If the method has void as written type, then it implies that the method does not return anything and

84
00:06:33.980 --> 00:06:36.740
hence there need not be any written statement.

85
00:06:37.220 --> 00:06:44.180
You may want to recall that all of the methods which we wrote in the basic demo class had void as written

86
00:06:44.180 --> 00:06:47.660
type, and so we did not have any written statements.

87
00:06:49.390 --> 00:06:56.530
However, you can still optionally have written keyword followed by semicolon as the methods last statement.

88
00:06:56.950 --> 00:07:01.030
So it is just a way of saying that the method is not returning anything.

89
00:07:01.150 --> 00:07:04.870
But typically developers do not include such a written statement.

90
00:07:06.260 --> 00:07:08.900
And here is an example with void return type.

91
00:07:11.140 --> 00:07:18.580
So return type is mandatory in the method declaration and it can be a primitive type or an array or

92
00:07:18.580 --> 00:07:24.970
a class name or something called interface, which we will see later a few sections down the line or

93
00:07:24.970 --> 00:07:26.410
it can be void to.

94
00:07:28.350 --> 00:07:34.590
Finally, a method must return a value if return type is something other than void.

95
00:07:34.840 --> 00:07:36.900
Otherwise we get a compiler error.

96
00:07:37.530 --> 00:07:41.010
Now let's go ahead and test everything we just discussed.

97
00:07:43.480 --> 00:07:43.620
Okay.

98
00:07:43.750 --> 00:07:45.970
Here we are in the Basics Demo class.

99
00:07:46.240 --> 00:07:52.930
So for this demo, let's go ahead and write a simple method called Sum, which, as the name suggests,

100
00:07:52.930 --> 00:07:55.120
computes the sum of two numbers.

101
00:07:55.480 --> 00:07:59.320
So it takes two parameters double, and it computes the sum.

102
00:07:59.770 --> 00:08:01.420
So let's go ahead and write that.

103
00:08:02.210 --> 00:08:09.650
So the return type of the method would be double and the method name is some and it takes two parameters.

104
00:08:09.830 --> 00:08:11.120
The first one is double.

105
00:08:11.960 --> 00:08:14.420
And parameter name is X.

106
00:08:16.260 --> 00:08:17.580
Second one is double.

107
00:08:19.340 --> 00:08:21.410
And it would return a value.

108
00:08:22.600 --> 00:08:25.600
We would just say X plus Y.

109
00:08:26.530 --> 00:08:32.860
Or we could also have had a statement here, like, for example, double Z is equal to X plus Y, and

110
00:08:32.860 --> 00:08:39.640
we could have written Z, but we can also have this kind of an expression, or we can also return literals

111
00:08:39.640 --> 00:08:40.159
also.

112
00:08:40.179 --> 00:08:42.970
But here we want to compute the sum of X and Y.

113
00:08:43.090 --> 00:08:44.710
So this is what we have.

114
00:08:45.430 --> 00:08:49.360
But first thing I want to show is this double.

115
00:08:49.780 --> 00:08:54.910
I mentioned that it has to be before it has to come before the method name.

116
00:08:54.910 --> 00:09:01.180
So if we have it here, so we have the static keyword in between double and sum, then we would get

117
00:09:01.180 --> 00:09:02.350
a compilation error.

118
00:09:04.620 --> 00:09:09.140
You see here, it says invalid method, declaration written type required.

119
00:09:09.150 --> 00:09:11.520
So it says that we need a return type.

120
00:09:11.610 --> 00:09:15.270
So it's got to be before the method name.

121
00:09:16.660 --> 00:09:19.390
This is how it should be now.

122
00:09:19.390 --> 00:09:21.370
So that's the method definition.

123
00:09:21.400 --> 00:09:23.740
Now let's go ahead and invoke it.

124
00:09:23.770 --> 00:09:27.130
So let's define the variable as double.

125
00:09:27.550 --> 00:09:40.330
Let's call it DX and let's invoke the method sum and let's pass 3.02.0, and let's print the value.

126
00:09:44.870 --> 00:09:50.510
So the value that some returns will be assigned to this variable DX and that gets printed.

127
00:09:52.730 --> 00:09:54.110
So let me run it.

128
00:09:55.670 --> 00:09:58.100
As you can see, it is printing the value file.

129
00:09:59.750 --> 00:10:01.360
So we said that.

130
00:10:01.370 --> 00:10:06.380
So these are the arguments and we said that the arguments should have 1 to 1 match with this.

131
00:10:06.380 --> 00:10:10.050
So we have two arguments and two doubles here.

132
00:10:10.070 --> 00:10:12.020
So the type is also matching.

133
00:10:12.020 --> 00:10:17.180
The order should match and the number of arguments should also match here with the parameters.

134
00:10:17.480 --> 00:10:19.310
There should be a 1 to 1 correspondence.

135
00:10:19.460 --> 00:10:25.640
Now we also said that type should be compatible, which means that we can either pass three point or

136
00:10:25.670 --> 00:10:32.330
a double value, a double letter, or we can also pass a smaller data type so we can pass a float also,

137
00:10:32.360 --> 00:10:34.040
as float is smaller than double.

138
00:10:34.280 --> 00:10:39.620
So let's go ahead and compile recompile and rerun it.

139
00:10:39.890 --> 00:10:43.610
So we see the value file so we can also do that.

140
00:10:44.450 --> 00:10:48.410
Next, let's change this to float here.

141
00:10:52.150 --> 00:10:55.510
So both the types we're making it as float.

142
00:10:56.140 --> 00:10:58.330
So let's recompile this.

143
00:10:59.380 --> 00:11:00.430
You clear the screen?

144
00:11:03.350 --> 00:11:08.960
So in this case, the second argument is giving an issue because there is an incompatible type here,

145
00:11:09.350 --> 00:11:15.650
because the second argument that we are passing is double, but the second parameter is flawed.

146
00:11:16.190 --> 00:11:18.320
So double we is a larger data type.

147
00:11:18.320 --> 00:11:26.480
So we have to pass either a float here flawed later, or we can also apply a cast.

148
00:11:26.690 --> 00:11:28.910
So we can say float.

149
00:11:29.300 --> 00:11:30.410
So we can also do this.

150
00:11:30.410 --> 00:11:33.320
So we can put a we can insert a cast here.

151
00:11:33.320 --> 00:11:38.930
So now both of them are floats and we have the match matching parameters.

152
00:11:40.610 --> 00:11:41.840
So that's good.

153
00:11:43.810 --> 00:11:45.830
Now here.

154
00:11:45.850 --> 00:11:49.770
X plus y would be a float, but the return type is double.

155
00:11:49.780 --> 00:11:53.620
So we say that the return value must be compatible with this.

156
00:11:53.620 --> 00:11:58.270
And so we can see that here we are returning a float, but then here we have double.

157
00:11:58.270 --> 00:12:01.090
So it's compatible and so there are no issues with that.

158
00:12:01.090 --> 00:12:07.390
Now let's say if this is flawed, so let's change this to float and let's make this.

159
00:12:08.670 --> 00:12:09.450
Double.

160
00:12:11.760 --> 00:12:13.230
This double.

161
00:12:13.590 --> 00:12:20.820
So we are summing up two doubles, but the return type is flawed and so that should give a compilation

162
00:12:20.820 --> 00:12:21.420
error.

163
00:12:24.760 --> 00:12:28.330
Because there is incompatibility here, it's got to be compatible.

164
00:12:28.360 --> 00:12:34.500
So we have to apply a cast now here when we apply the cast.

165
00:12:34.510 --> 00:12:39.490
So if we just do this, the cast would be applied to only X but not white.

166
00:12:40.030 --> 00:12:43.840
So what we have to do is we can put a parentheses here.

167
00:12:44.320 --> 00:12:49.700
Now the cast is applied to to x plus Y, so x plus Y would be double.

168
00:12:49.720 --> 00:12:51.140
Then a cast is applied.

169
00:12:51.160 --> 00:12:52.510
And then we are good.

170
00:12:56.540 --> 00:12:56.960
Okay.

171
00:12:56.960 --> 00:13:01.820
So it compiles fine and it still prints the value file.

172
00:13:03.060 --> 00:13:04.020
So that's what we have.

173
00:13:04.230 --> 00:13:07.530
And here the type is flawed.

174
00:13:07.620 --> 00:13:15.360
And on this end, the type is double, which is totally fine because float is a smaller type and can

175
00:13:15.360 --> 00:13:16.760
be assigned to a double.

176
00:13:16.770 --> 00:13:18.760
So there is going to be an implicit cast.

177
00:13:19.860 --> 00:13:21.240
So that's that.

178
00:13:21.840 --> 00:13:26.970
Now let's change it back to the original form, which says X plus Y.

179
00:13:28.060 --> 00:13:29.220
This is X plus five.

180
00:13:30.170 --> 00:13:30.830
This is.

181
00:13:32.100 --> 00:13:32.820
Double.

182
00:13:33.000 --> 00:13:35.040
Now, let's just make this float.

183
00:13:36.510 --> 00:13:42.810
So the return type is double and on the colors and the variable is flood.

184
00:13:43.140 --> 00:13:47.580
So a double is being assigned to flood and obviously it should give us a compilation error.

185
00:13:48.630 --> 00:13:50.130
So incompatible type.

186
00:13:50.430 --> 00:13:51.780
So what should we do?

187
00:13:51.810 --> 00:13:55.350
So we should just insert a cast here.

188
00:14:00.390 --> 00:14:01.230
Then it returns.

189
00:14:01.230 --> 00:14:01.860
Five.

190
00:14:03.410 --> 00:14:04.730
So that's that.

191
00:14:04.850 --> 00:14:07.160
So we can apply a cast in this way.

192
00:14:07.160 --> 00:14:12.560
So we can apply a cast here, we can apply a cast here, or we can even apply a cast in the written

193
00:14:12.560 --> 00:14:13.640
statement itself.

194
00:14:14.590 --> 00:14:15.700
So next.

195
00:14:15.700 --> 00:14:16.450
Let's.

196
00:14:17.080 --> 00:14:17.450
Right.

197
00:14:17.650 --> 00:14:19.540
Define a method called average.

198
00:14:22.340 --> 00:14:23.010
C.

199
00:14:23.330 --> 00:14:23.800
A.

200
00:14:23.840 --> 00:14:24.200
V.

201
00:14:24.200 --> 00:14:24.830
G.

202
00:14:25.770 --> 00:14:26.140
Okay.

203
00:14:26.160 --> 00:14:30.630
So average we have to compute for an average of these two numbers.

204
00:14:30.750 --> 00:14:36.660
So what we can do is let's define a variable called sum here.

205
00:14:36.840 --> 00:14:42.450
So let's say double and say some equals two.

206
00:14:42.480 --> 00:14:47.790
Let's make use of this method sum and pass x.

207
00:14:48.180 --> 00:14:53.820
So if average is invoked with some input, so x and y will have some values.

208
00:14:53.820 --> 00:14:57.420
So we will just pass those values to sum.

209
00:14:57.720 --> 00:15:00.780
So from the average method, we are invoking the sum.

210
00:15:00.780 --> 00:15:03.690
So we are reusing the functionality of this.

211
00:15:03.780 --> 00:15:06.210
And here we need to compute the sum.

212
00:15:06.510 --> 00:15:09.510
So let's just say sum divided by two.

213
00:15:10.270 --> 00:15:11.680
And here.

214
00:15:26.910 --> 00:15:28.050
This is day to.

215
00:15:29.860 --> 00:15:31.840
So let me just recompile.

216
00:15:37.130 --> 00:15:40.760
As you can see, initially we are printing five because we were invoking some.

217
00:15:40.940 --> 00:15:44.450
And then when we invoke average, it prints 2.5.

218
00:15:44.990 --> 00:15:46.110
So that's what it is.

219
00:15:46.130 --> 00:15:52.730
So from the main method, we are invoking the average method and from average we are invoking the sum.

220
00:15:53.030 --> 00:15:58.250
So one method is accessing another method and that another method is accessing another method.

221
00:15:58.520 --> 00:16:03.990
So what we are seeing here is the benefit of divide and conquer.

222
00:16:04.010 --> 00:16:12.110
So instead of having X plus Y here, we have a separate method just for doing that and we are reusing

223
00:16:12.110 --> 00:16:12.500
that.

224
00:16:12.800 --> 00:16:15.980
So that's software reusability in action.

225
00:16:15.980 --> 00:16:21.170
So this some method can now be used not just by average, but some other code.

226
00:16:21.170 --> 00:16:26.120
Also, for instance, here we are using some and there can be some other program which can reuse that

227
00:16:26.120 --> 00:16:30.530
particular sum and that code can be in an entirely different project to.

228
00:16:31.820 --> 00:16:34.250
So you get the benefit of reusability.

229
00:16:34.280 --> 00:16:38.030
Now this particular method is very small, very small method.

230
00:16:38.030 --> 00:16:45.110
But let's say if the method is really huge, if if the logic here is huge, and if we are not making

231
00:16:45.110 --> 00:16:52.010
use of methods, then we would probably end up use writing that entire logic here in this method.

232
00:16:52.130 --> 00:16:56.930
And wherever we need that logic, we would be writing that logic.

233
00:16:57.530 --> 00:17:05.569
So the benefit is by having all of that logic in one method, the benefit that we get is we are avoiding

234
00:17:05.569 --> 00:17:06.410
duplication.

235
00:17:06.890 --> 00:17:14.569
Had that logic been is duplicated in this method and also in all other methods, and if we have to make

236
00:17:14.569 --> 00:17:18.980
a small change, then we have to make that change in all of those places.

237
00:17:19.130 --> 00:17:26.540
But by having all of that logic in one single method, then if the change has to be made, then it would

238
00:17:26.540 --> 00:17:29.480
be made only in that particular method.

239
00:17:29.570 --> 00:17:33.650
And we can invoke that method from all of the different places.

240
00:17:34.100 --> 00:17:37.680
So that's the benefit of having methods.

241
00:17:37.700 --> 00:17:44.450
So you have your avoiding duplication, and then you also get the benefit of reusability.

242
00:17:44.630 --> 00:17:46.970
And the court also looks very clean.

243
00:17:47.390 --> 00:17:52.460
So that's the benefit that you get of defining logic in in methods.

244
00:17:53.210 --> 00:17:55.130
Now for the void keyword.

245
00:17:55.130 --> 00:17:59.120
We already know this, so we have written some methods in our demos.

246
00:17:59.120 --> 00:18:02.690
So all of these have void, so they do not return anything.

247
00:18:02.690 --> 00:18:05.750
So we don't have any written statements like we have in this case.

248
00:18:05.990 --> 00:18:10.190
Now, the final thing I want to demonstrate is about passing arrays.

249
00:18:10.400 --> 00:18:13.820
So let's say we have a method called search.

250
00:18:13.820 --> 00:18:15.860
So let's just say it returns boolean.

251
00:18:17.110 --> 00:18:23.650
And let's call it a search and let's define an entry and let's call it list.

252
00:18:25.150 --> 00:18:31.960
And let's say we want to search for an element in the list, and the element is this key.

253
00:18:33.040 --> 00:18:35.110
So that's just the method definition.

254
00:18:35.110 --> 00:18:36.790
And let's just return true here.

255
00:18:36.790 --> 00:18:37.840
It doesn't matter.

256
00:18:39.180 --> 00:18:43.860
So what I want to demonstrate is how can we invoke search now here?

257
00:18:45.440 --> 00:18:46.580
So such.

258
00:18:48.370 --> 00:18:50.140
List to.

259
00:18:51.730 --> 00:18:53.740
And let me define list here.

260
00:18:56.400 --> 00:18:56.940
And.

261
00:19:00.150 --> 00:19:02.460
So this is the list and we want to pass it.

262
00:19:02.460 --> 00:19:04.620
And this compiles perfectly fine.

263
00:19:07.680 --> 00:19:08.160
Okay.

264
00:19:08.400 --> 00:19:15.870
Now, let's say if we want to pass it here, if you want to do this, then it's not going to work.

265
00:19:18.660 --> 00:19:21.460
You see, it gives us some compilation errors.

266
00:19:21.480 --> 00:19:28.650
That's because this kind of simplest notation which we have for creating a arrays, is valid only in

267
00:19:28.650 --> 00:19:33.750
declaration statements, but we cannot use it when invoking a particular method.

268
00:19:34.290 --> 00:19:39.540
So when we are invoking a particular method, either we have to pass a variable or we have to use the

269
00:19:39.540 --> 00:19:42.420
second way of declaring variables.

270
00:19:42.450 --> 00:19:47.040
If you recall, we had this so you can also do this and pass an array.

271
00:19:47.040 --> 00:19:50.460
So array is created here and is passed to the method.

272
00:19:50.940 --> 00:19:54.480
So the only thing is we cannot do this notation here.

273
00:19:54.480 --> 00:19:59.610
This way of declaring an area is valid only in the declaration statements.

274
00:19:59.910 --> 00:20:03.270
So it will it will not work if we want to pass here.

275
00:20:03.750 --> 00:20:05.040
So that's it.

276
00:20:05.040 --> 00:20:06.570
And let me just compile this.

277
00:20:10.460 --> 00:20:10.970
Here it is.

278
00:20:10.970 --> 00:20:12.050
So it compiles fine.

279
00:20:12.380 --> 00:20:13.760
So that's it.

280
00:20:14.150 --> 00:20:20.720
And so this notation works only in declaration statements, and it will not work in method invocations,

281
00:20:20.720 --> 00:20:22.880
or it will also not work here.

282
00:20:22.880 --> 00:20:26.600
You can also you cannot also do this even in re assignments.

283
00:20:26.600 --> 00:20:27.740
It's not going to work.

284
00:20:33.700 --> 00:20:41.020
As you can see, it gives us some compilation errors so it can be possible only within a declaration.

285
00:20:41.020 --> 00:20:41.830
Statements.

286
00:20:42.190 --> 00:20:43.420
Statements such as this one.

287
00:20:43.990 --> 00:20:45.640
So that's about it.

288
00:20:45.640 --> 00:20:48.520
So that's an introduction to methods.

289
00:20:48.670 --> 00:20:49.330
Thank you.

290
00:20:49.330 --> 00:20:50.710
And see you in the next lecture.

