1
00:00:02,140 --> 00:00:02,880
Hi there.

2
00:00:02,890 --> 00:00:04,019
This is Lou.

3
00:00:04,030 --> 00:00:05,020
And welcome back.

4
00:00:05,110 --> 00:00:08,020
Now let's do the demo of the new data and time API.

5
00:00:08,050 --> 00:00:13,930
In the last lecture, we looked at the core classes in this API and now let's see them in action.

6
00:00:14,290 --> 00:00:20,350
So here we have the date time demo from the previous from the previous demo and this class was introduced

7
00:00:20,350 --> 00:00:23,470
in the package comp semantics squared date time.

8
00:00:23,860 --> 00:00:28,390
So now we are going to add this new method called test date time API.

9
00:00:28,720 --> 00:00:30,280
So this is for the new API.

10
00:00:30,280 --> 00:00:38,080
And here this was the last method that was added in the previous demo test legacy data API because we

11
00:00:38,080 --> 00:00:39,550
were looking at the Legacy API.

12
00:00:39,820 --> 00:00:45,820
So this is going to be the new API and we are going to explore all the classes that we have discussed

13
00:00:45,850 --> 00:00:48,880
using for use cases which are very realistic.

14
00:00:48,880 --> 00:00:51,370
And the four use cases are here.

15
00:00:51,370 --> 00:00:53,440
Like the first use case is software renewal.

16
00:00:53,470 --> 00:00:57,070
And this was also used in the previous in the previous demo.

17
00:00:57,100 --> 00:01:04,090
So here we are going to set an expiry date of the software and we will see how the expiry date can be

18
00:01:04,090 --> 00:01:04,870
extended.

19
00:01:05,140 --> 00:01:10,120
So we are going to look at the local date class for that and we will see what methods we can use.

20
00:01:10,420 --> 00:01:16,420
And here, some of the code is already written because there is a lot of code to show and it would be

21
00:01:16,420 --> 00:01:17,630
very time consuming.

22
00:01:17,650 --> 00:01:23,290
So in the interest of the time some of the code is there and on some code we will be writing in the

23
00:01:23,290 --> 00:01:23,710
demo.

24
00:01:24,610 --> 00:01:28,770
And the second use case is the game start time localize to time zone.

25
00:01:28,780 --> 00:01:34,690
So this particular use case was also was also demonstrated in the previous demo.

26
00:01:34,780 --> 00:01:39,310
So here we have some kind of a game and it has a start time.

27
00:01:39,340 --> 00:01:42,800
So this is related to the TV schedule.

28
00:01:42,820 --> 00:01:50,050
So if a user is going to look at wants to know the start time, then we need to show him or her the

29
00:01:50,050 --> 00:01:54,340
start time as per his or her local time zone.

30
00:01:54,640 --> 00:01:55,840
So that's what we are going to do.

31
00:01:55,840 --> 00:01:59,410
And we already we already know about this particular use case.

32
00:01:59,440 --> 00:02:01,450
Third is the age calculation.

33
00:02:01,840 --> 00:02:06,370
So we want to calculate the age based on his birthday, his or her birthday.

34
00:02:06,610 --> 00:02:13,630
And the fourth one is interval timing, which is about measuring the interval between two events.

35
00:02:13,990 --> 00:02:19,300
So for that, we are going to use instant class and duration and for each calculation we are going to

36
00:02:19,300 --> 00:02:21,610
use period and also the local date.

37
00:02:21,850 --> 00:02:26,980
So let's go ahead and start with the first use case for the software renewal.

38
00:02:26,980 --> 00:02:29,860
So we are going to use the same example that we have seen earlier.

39
00:02:29,950 --> 00:02:32,470
So we want to use local date here.

40
00:02:34,920 --> 00:02:38,680
Now we know that these new classes do not have constructors.

41
00:02:38,700 --> 00:02:45,240
So we said that there are static factory methods that we need to use and one of them was the off method.

42
00:02:45,810 --> 00:02:48,480
So we will say off and it's an overloaded method.

43
00:02:48,480 --> 00:02:50,670
So we're going to use this one.

44
00:02:51,970 --> 00:02:54,550
2017 and the month was June.

45
00:02:54,940 --> 00:03:01,390
So there is this enum called Month within the Java Time package and we are going to use that and we

46
00:03:01,390 --> 00:03:07,780
are going to select June here and the date, let's say 38, which was the same date we have used earlier.

47
00:03:08,020 --> 00:03:10,150
So let's see that and.

48
00:03:11,630 --> 00:03:12,620
Sprint this.

49
00:03:19,640 --> 00:03:20,510
I'm here on this.

50
00:03:21,400 --> 00:03:21,730
So.

51
00:03:21,970 --> 00:03:24,400
So it prints the date here.

52
00:03:24,760 --> 00:03:28,240
So the date and the ISO 8601 calendar system.

53
00:03:28,480 --> 00:03:29,290
So that's the date.

54
00:03:29,320 --> 00:03:32,110
Now, let's go ahead and extend this.

55
00:03:35,180 --> 00:03:37,590
And now let's add eight months to this.

56
00:03:38,410 --> 00:03:40,690
So there is this method called plus months.

57
00:03:40,690 --> 00:03:41,830
We can use that.

58
00:03:43,860 --> 00:03:44,340
All right.

59
00:03:45,600 --> 00:03:49,530
Now, this one is going to return an instance of local data.

60
00:03:49,560 --> 00:03:54,450
We know that all of most of these classes are immutable classes and hence are safe.

61
00:03:54,570 --> 00:03:59,190
So we are the expiry date is not going to be adjusted.

62
00:03:59,460 --> 00:04:02,370
So that instance is not going to be updated.

63
00:04:02,370 --> 00:04:09,150
But it would return a new local date with the new time, with the time, which is eight months after

64
00:04:09,150 --> 00:04:10,310
this particular date.

65
00:04:10,320 --> 00:04:13,320
So it's going to return another local date.

66
00:04:15,670 --> 00:04:17,560
It's called a new expiry date.

67
00:04:18,649 --> 00:04:19,459
So.

68
00:04:20,029 --> 00:04:24,460
So we get the benefit of threat safety with such immutable classes.

69
00:04:24,470 --> 00:04:30,460
But it would also help us to change classes because it's retaining a local date instance.

70
00:04:30,470 --> 00:04:35,900
We can invoke another method probably if you want to do another minus, you can also do minus, so you

71
00:04:35,900 --> 00:04:37,880
can invoke other methods also.

72
00:04:37,880 --> 00:04:42,770
So we also have methods such as minus days, minus methods, just like plus methods.

73
00:04:43,520 --> 00:04:45,230
So that's another benefit.

74
00:04:45,230 --> 00:04:48,620
You can chain such kind of method invocations.

75
00:04:48,620 --> 00:04:50,210
Now let's print this.

76
00:04:58,980 --> 00:05:05,940
So the new date has been extended by eight months and it's now year two 2018 and the month is February.

77
00:05:06,120 --> 00:05:11,520
But the date has been adjusted to 28 because it does not have 30 days.

78
00:05:11,700 --> 00:05:18,750
So this we have also seen in the earlier demo with the ad and the roll methods the same behaviour.

79
00:05:18,750 --> 00:05:20,160
So it's just the same.

80
00:05:20,430 --> 00:05:22,950
So this is how you would extend the date.

81
00:05:23,310 --> 00:05:28,170
So there are methods like plus months, minus months and so on, and you can use them.

82
00:05:28,320 --> 00:05:34,200
There are also other methods like ease before and ease after in the local date class and you can also

83
00:05:34,200 --> 00:05:35,340
try them out later.

84
00:05:35,760 --> 00:05:42,300
So that's about how we can extend and there are a few other methods that we can check out in the local

85
00:05:42,300 --> 00:05:43,410
date class.

86
00:05:43,890 --> 00:05:49,050
So let's just run all of them and let's look at the output.

87
00:05:51,420 --> 00:05:51,660
Okay.

88
00:05:51,660 --> 00:05:59,280
So the first one here is so we have the new expiry date now, which is in 2018 and we are getting just

89
00:05:59,280 --> 00:06:01,080
the ear component from the date.

90
00:06:01,080 --> 00:06:02,770
So it's printing 2018.

91
00:06:02,790 --> 00:06:08,610
Then there is this month component for which we are using the get month method and it shows February.

92
00:06:08,730 --> 00:06:12,660
So the get month is actually returning the month enum.

93
00:06:13,680 --> 00:06:15,120
So it's going to print that.

94
00:06:15,920 --> 00:06:19,850
Then there is this get day off month, which is 28.

95
00:06:20,210 --> 00:06:21,320
That's another method.

96
00:06:21,620 --> 00:06:26,520
Then there is this method called get day of week and it's printing Wednesday.

97
00:06:26,540 --> 00:06:31,040
So day off week is going to return another enum called Day of week.

98
00:06:31,340 --> 00:06:35,330
So day of week and month are to enemies and.

99
00:06:36,520 --> 00:06:37,300
Here.

100
00:06:39,000 --> 00:06:40,470
This one is printing.

101
00:06:41,320 --> 00:06:43,930
Is invoking this method called easily peer.

102
00:06:44,140 --> 00:06:48,520
And it's just checking whether it's a leap year or not, whether 2018 is a leap year or not.

103
00:06:48,520 --> 00:06:49,510
And it is false.

104
00:06:49,810 --> 00:06:52,750
And we are also checking the length of the current month.

105
00:06:52,750 --> 00:06:54,480
Since the month is February.

106
00:06:54,490 --> 00:06:56,060
There are 28 days.

107
00:06:56,060 --> 00:07:01,420
So that said and here there are three other methods which are which are going to do the same, like

108
00:07:01,420 --> 00:07:03,640
get the year, month on day.

109
00:07:03,640 --> 00:07:07,180
But we are here, we are using a different method called get earlier.

110
00:07:07,180 --> 00:07:12,100
It was get here, now it is get and it does get for a month also.

111
00:07:12,100 --> 00:07:16,570
But we need to specify the component that we want to extract.

112
00:07:16,570 --> 00:07:22,120
In this case, we are saying we want easier and in the second example we are saying we want the month

113
00:07:22,120 --> 00:07:22,870
of the year.

114
00:07:22,870 --> 00:07:28,360
So the output is going to be the same, but it's just a different way of extracting those components.

115
00:07:28,540 --> 00:07:30,820
And here for the component we are using.

116
00:07:31,920 --> 00:07:38,080
An enum called Chrono Field and we are using that and we are passing this value here.

117
00:07:38,640 --> 00:07:47,520
So all of these are also printing the same values like year again, 2018, month again two and day of

118
00:07:47,520 --> 00:07:49,350
month again is 28.

119
00:07:50,340 --> 00:07:54,730
And here we are showing how to parse a string.

120
00:07:54,750 --> 00:07:57,930
Sometimes we have strings and we need to parse them.

121
00:07:57,930 --> 00:08:03,510
So the parse method is going to return this and here this is the apex here.

122
00:08:03,630 --> 00:08:09,900
So we are passing 1970 0101 and we are also showing the ear.

123
00:08:09,900 --> 00:08:14,370
So we are just invoking the get here component here and we are printing it here.

124
00:08:14,760 --> 00:08:15,960
So that's with that.

125
00:08:17,890 --> 00:08:19,280
So that's what the first use case.

126
00:08:19,300 --> 00:08:23,190
Now the second use case is about the game start time.

127
00:08:23,200 --> 00:08:28,390
So here we are creating an instance of local time and we are once again invoking the off method.

128
00:08:28,630 --> 00:08:35,049
So the off method we have seen earlier, it was where we create when we created the instance of local

129
00:08:35,049 --> 00:08:35,419
date.

130
00:08:35,440 --> 00:08:43,270
So local time also has the off method and we are just passing hours, minutes and seconds and.

131
00:08:44,650 --> 00:08:48,440
We are creating one more instance of local date for the game start date.

132
00:08:48,460 --> 00:08:53,560
So we are saying local date off and it's 2017, July 3rd.

133
00:08:54,100 --> 00:08:57,760
So this was the date that we have seen in the previous Demo two.

134
00:08:58,240 --> 00:09:02,230
And next is we need to create a local date time.

135
00:09:02,680 --> 00:09:04,600
So we have the local time, local date.

136
00:09:04,630 --> 00:09:06,580
We need to create a local date time.

137
00:09:06,880 --> 00:09:08,590
And here is how we will do it.

138
00:09:09,010 --> 00:09:11,290
So it will be local date.

139
00:09:12,370 --> 00:09:12,620
I.

140
00:09:14,190 --> 00:09:17,010
It's called game start time.

141
00:09:20,450 --> 00:09:21,380
Once again.

142
00:09:22,530 --> 00:09:29,250
The typical auth method and here let's pass local date which is this.

143
00:09:32,940 --> 00:09:38,170
So we are passing local date and local time in order to construct the local datetime.

144
00:09:38,940 --> 00:09:41,160
So now let's go ahead and print this.

145
00:09:56,490 --> 00:09:57,030
Right.

146
00:09:58,970 --> 00:09:59,750
So here it is.

147
00:09:59,750 --> 00:10:02,690
So the time is nine and the local start time is this one.

148
00:10:03,620 --> 00:10:08,590
So okay, so it's going to print the, the entire thing, the date followed by the character.

149
00:10:08,600 --> 00:10:12,020
T We have seen this format earlier in the lecture and that time.

150
00:10:12,320 --> 00:10:13,400
So that's where the local time.

151
00:10:13,400 --> 00:10:15,140
But we need the time zone, right?

152
00:10:15,230 --> 00:10:18,740
Time zone is what we need is important in this use case.

153
00:10:18,740 --> 00:10:21,470
So let's say we have this.

154
00:10:21,770 --> 00:10:28,790
So we are creating an instance of zoned date time because it has the entire information, it includes

155
00:10:28,790 --> 00:10:33,710
the local date time as well as the time information of the zone offset.

156
00:10:33,710 --> 00:10:40,400
So once again, we are invoking the method and it is taking we are passing this instance of local date

157
00:10:40,400 --> 00:10:41,210
time here.

158
00:10:41,510 --> 00:10:43,760
And we also need to pass the.

159
00:10:46,640 --> 00:10:47,990
We also have to pass the.

160
00:10:49,050 --> 00:10:49,920
The time zone.

161
00:10:49,920 --> 00:10:55,350
In this case, there is this class called a zone ID and we are calling the off method and we are passing

162
00:10:55,350 --> 00:10:57,600
the time zone and four time zone.

163
00:10:57,600 --> 00:10:59,730
Let's actually pass a different time zone.

164
00:11:00,850 --> 00:11:01,780
So Europe.

165
00:11:03,930 --> 00:11:05,700
So let's initialize with this.

166
00:11:12,440 --> 00:11:13,460
And this is what we have.

167
00:11:13,460 --> 00:11:14,450
Let's print this.

168
00:11:22,110 --> 00:11:27,040
So this is the time zone and we have already seen this in the earlier lecture.

169
00:11:27,060 --> 00:11:28,470
So it depends everything.

170
00:11:28,470 --> 00:11:38,820
So the time is nine and it is one hour ahead of the UTC time and the time is Europe slash London.

171
00:11:39,060 --> 00:11:47,070
Now let's go ahead and let's say the user is from India and we want to show him or her the time according

172
00:11:47,070 --> 00:11:48,810
to that particular time zone.

173
00:11:49,050 --> 00:11:50,580
So let's go ahead and do that.

174
00:12:03,840 --> 00:12:10,830
Now there is this method called width zone, same instant it's called zone, same instant.

175
00:12:10,860 --> 00:12:13,950
There are also other methods, but we need to use this.

176
00:12:14,220 --> 00:12:16,830
So it's going to be same instant.

177
00:12:18,610 --> 00:12:24,700
So it's going to use the same time, but it's going to adjust the time, the local time with the new

178
00:12:24,700 --> 00:12:25,500
time zone.

179
00:12:25,510 --> 00:12:29,740
So we need to use this zone ID of.

180
00:12:33,540 --> 00:12:33,810
Okay.

181
00:12:33,810 --> 00:12:41,160
So zone ID is in in the previous demo or API, we had this time zone, so it's a replacement for that.

182
00:12:41,580 --> 00:12:50,250
And let's say it's India so let's the value we need to pass as Asia slash.

183
00:12:51,370 --> 00:12:52,240
Calcutta.

184
00:13:05,890 --> 00:13:06,990
So here it is.

185
00:13:07,000 --> 00:13:11,830
So it's the date here and the time is 130 in the afternoon.

186
00:13:11,920 --> 00:13:16,930
So five and one half hours has been added to the UTC time.

187
00:13:16,930 --> 00:13:22,990
UTC time is actually eight and although here we have nine because there is some daylight saving time

188
00:13:22,990 --> 00:13:25,930
around and around that time in July.

189
00:13:26,290 --> 00:13:32,680
So that's the reason we have nine when we have the time zone as Europe and London, but the time at

190
00:13:32,680 --> 00:13:35,620
the UTC at GMT, the GMT time is eight.

191
00:13:35,620 --> 00:13:37,450
So five and a half hours here.

192
00:13:37,450 --> 00:13:43,510
This is the offset that has been added which resulted in this time and this is just the time zone information

193
00:13:43,510 --> 00:13:44,680
that is getting printed.

194
00:13:44,860 --> 00:13:46,300
So that's with that.

195
00:13:46,300 --> 00:13:53,800
So that's how we can adjust the time now if we change it to Pacific Time, let's do that also.

196
00:14:02,230 --> 00:14:04,840
So Pacific Standard Time and here.

197
00:14:10,770 --> 00:14:12,030
Needs to be underscore.

198
00:14:22,820 --> 00:14:23,840
So here it is.

199
00:14:23,840 --> 00:14:26,830
So minus the offset is minus 7 hours.

200
00:14:26,840 --> 00:14:34,130
So if you remove that from eight here at GMT, then we get 1:01 a.m. and that's what is being printed

201
00:14:34,130 --> 00:14:34,580
here.

202
00:14:35,210 --> 00:14:38,840
Now, one small thing I want to change is if I change this.

203
00:14:40,510 --> 00:14:41,770
Two GMT.

204
00:14:42,730 --> 00:14:43,180
Here.

205
00:14:43,180 --> 00:14:51,700
The string is like this offset is there and we have this now it's being changed to GMT and as discussed

206
00:14:51,700 --> 00:14:52,600
in the lecture.

207
00:14:52,600 --> 00:14:58,870
So we have if you say GMT, we will have this Z that gets printed instead of the offset.

208
00:14:59,500 --> 00:15:00,370
So that's.

209
00:15:01,820 --> 00:15:03,830
One thing now.

210
00:15:04,920 --> 00:15:05,860
So that's that.

211
00:15:05,880 --> 00:15:07,500
So we are done with the second use case.

212
00:15:07,500 --> 00:15:10,290
And the third use case is about each calculation.

213
00:15:10,440 --> 00:15:13,450
So here once again, we are creating local date.

214
00:15:13,470 --> 00:15:16,370
So we are instantiating these values.

215
00:15:16,390 --> 00:15:21,960
January 1st, 1978, which is the birthday of one of my close friends.

216
00:15:22,260 --> 00:15:26,240
And we are also invoking this method called now.

217
00:15:26,250 --> 00:15:33,570
And this would return the current date from the system clock of the computer of this computer.

218
00:15:33,930 --> 00:15:38,640
So we are invoking this method called now and this is the variable is today.

219
00:15:38,970 --> 00:15:48,690
So next here we are invoking this method called until on this instance of birthday and we are passing

220
00:15:48,690 --> 00:15:54,330
this that today instance to this particular method and it will return a period.

221
00:15:55,860 --> 00:16:02,970
And all we need to do is we can just print this period here and we can also get years and it would return

222
00:16:02,970 --> 00:16:05,460
the age of this particular person.

223
00:16:05,490 --> 00:16:11,140
So if you do this, as you can see, when we print the string, it is printing in this format.

224
00:16:11,160 --> 00:16:13,890
So I guess P would stand for period.

225
00:16:13,890 --> 00:16:18,810
And this is 39 years, six months and 25 days.

226
00:16:19,080 --> 00:16:22,730
So you have characters for following those numbers.

227
00:16:22,740 --> 00:16:28,440
And if you need only the age here, we can just invoke this method called get years.

228
00:16:29,190 --> 00:16:31,620
So that's how you would compute age.

229
00:16:31,710 --> 00:16:38,700
So if in your website, if you are going to capture the user's birthday so that birthday can be stored

230
00:16:38,700 --> 00:16:45,330
in the database and if in the UI, if we want to show the age of that person, we would extract all

231
00:16:45,330 --> 00:16:52,200
these individual components like the year, month and the day, and we would build an instance of birthday

232
00:16:52,200 --> 00:16:59,190
and then we would also get the current date and we can show the age in this way, in the, in the browser,

233
00:16:59,190 --> 00:17:00,030
in the UI.

234
00:17:01,550 --> 00:17:06,050
And next is the final use case, which is integral timing.

235
00:17:06,810 --> 00:17:07,890
So here.

236
00:17:16,030 --> 00:17:20,960
So here we are first getting using this class called Instant.

237
00:17:20,980 --> 00:17:26,319
We discuss this class in the lecture and we are once again invoking this method called now, which would

238
00:17:26,319 --> 00:17:30,940
return the current instant instance of a current instant of time.

239
00:17:30,940 --> 00:17:33,280
So it would be a time on the timeline.

240
00:17:33,430 --> 00:17:35,740
So it is it is the time.

241
00:17:35,740 --> 00:17:37,030
So it would return that.

242
00:17:37,060 --> 00:17:37,750
Here it is.

243
00:17:37,780 --> 00:17:41,440
Obtains the current instant from the system clock.

244
00:17:42,370 --> 00:17:44,860
Now so that's the start time then.

245
00:17:44,860 --> 00:17:52,570
Test Legacy Date API is the method which we have written in the previous demo, so we want to see how

246
00:17:52,570 --> 00:17:55,210
long that method will take to execute.

247
00:17:55,720 --> 00:18:00,580
So here we are getting the end time and end time would be instant.

248
00:18:00,940 --> 00:18:01,630
Now.

249
00:18:02,470 --> 00:18:07,840
Once again, and we need to get the duration of this so we can do.

250
00:18:08,940 --> 00:18:09,960
Something like this.

251
00:18:09,960 --> 00:18:11,550
So we are going to use the.

252
00:18:12,630 --> 00:18:15,040
So off, this formatting has been messed up.

253
00:18:16,450 --> 00:18:18,310
So here we have the start time.

254
00:18:18,340 --> 00:18:21,420
We are doing instant and now then we are invoking the method.

255
00:18:21,430 --> 00:18:23,260
Then we are getting the end time.

256
00:18:23,290 --> 00:18:28,750
Then we are invoking this class of this method called between in the duration class.

257
00:18:28,780 --> 00:18:34,210
Earlier we looked at the period class which is associated with dates, and this one is associated with

258
00:18:34,210 --> 00:18:34,760
times.

259
00:18:34,790 --> 00:18:40,810
So when we are passing the start time and the end time and we are getting the duration and we are invoking

260
00:18:40,810 --> 00:18:46,320
this method called two millis, so which returns the during the duration and milliseconds.

261
00:18:46,330 --> 00:18:47,530
So let's run it.

262
00:18:47,920 --> 00:18:52,780
So it's going to take only ten milliseconds to execute that method.

263
00:18:53,380 --> 00:18:55,940
So that's how you can time the interval.

264
00:18:55,960 --> 00:19:00,500
But the recommended approach for this is to use system dot.

265
00:19:00,910 --> 00:19:02,920
So in the system class.

266
00:19:05,410 --> 00:19:06,040
Nano time.

267
00:19:06,040 --> 00:19:07,410
So there is this nano time.

268
00:19:07,420 --> 00:19:10,120
It's recommended to use this approach.

269
00:19:10,120 --> 00:19:16,720
If you want to capture such kind of if you want to measure the the time that a method, a method takes

270
00:19:16,720 --> 00:19:20,080
to execute, then it's recommended to use something like this.

271
00:19:20,080 --> 00:19:24,280
The start time you would do the same thing with the end time also.

272
00:19:24,280 --> 00:19:31,240
So that's what is recommended because it's much more accurate and it has been it has been defined just

273
00:19:31,240 --> 00:19:34,120
for that purpose to capture the elapsed time.

274
00:19:34,840 --> 00:19:41,920
So if you want to do that, you are recommended to use the nano time and there are also some partial

275
00:19:41,920 --> 00:19:42,790
classes.

276
00:19:43,090 --> 00:19:44,560
These are two examples.

277
00:19:47,430 --> 00:19:55,110
So here this class called Month Day, which is also from the time package, it represents only month

278
00:19:55,110 --> 00:19:56,160
on day information.

279
00:19:56,160 --> 00:19:59,630
It models a date which has only month on date.

280
00:19:59,640 --> 00:20:05,280
For example, if you want to capture this information like Christmas, then you could do something like

281
00:20:05,280 --> 00:20:11,280
this and once again you would use the same method and you would pass the method, the month and the

282
00:20:11,280 --> 00:20:11,880
date.

283
00:20:11,880 --> 00:20:18,660
And this is how you would capture the month on day, month and day in this way.

284
00:20:18,900 --> 00:20:23,430
So you would use this class and the next one is another class called your month.

285
00:20:23,430 --> 00:20:25,860
So this was month day and this is your month.

286
00:20:25,890 --> 00:20:31,290
And this particular class is useful to capture information such as credit card expiry date.

287
00:20:31,380 --> 00:20:37,620
Now if you look at credit card expiry dates on your credit card or debit card, you have only one month.

288
00:20:37,650 --> 00:20:40,350
They don't specify the date, that date.

289
00:20:40,770 --> 00:20:44,460
So for that, you can make use of something like this, this kind of a class.

290
00:20:44,460 --> 00:20:46,500
So this is just for your information.

291
00:20:46,500 --> 00:20:49,890
So these are some partial classes because they have only partial information.

292
00:20:50,460 --> 00:20:51,600
So that's about it.

293
00:20:51,600 --> 00:20:57,150
So those are the main classes and you should also check out the API for other classes.

294
00:20:57,150 --> 00:21:00,510
But these are the core classes which you would be using most often.

295
00:21:00,510 --> 00:21:03,090
So let me just show you the API also.

296
00:21:03,090 --> 00:21:04,290
So here it is.

297
00:21:04,500 --> 00:21:10,770
So this is the API, the eight Java eight API, and these are five different packages, Java time,

298
00:21:10,770 --> 00:21:15,300
Java time, chrono dot format, dot temporal and dot zone.

299
00:21:15,930 --> 00:21:18,000
And we looked at some of these classes.

300
00:21:18,090 --> 00:21:23,280
This is the Java Time package and these are some of the classes local date, local date time, local

301
00:21:23,280 --> 00:21:29,180
time zone date, time zone ID period here and state.

302
00:21:29,190 --> 00:21:32,280
So these are some of the classes which are which we have already seen.

303
00:21:32,280 --> 00:21:40,500
And we also looked at this month enum and day of week enum and if something goes wrong then these classes

304
00:21:40,500 --> 00:21:43,470
would be normally throwing this exception called as.

305
00:21:45,690 --> 00:21:48,180
Date time, date, time exception.

306
00:21:48,180 --> 00:21:50,040
So this is what you will see.

307
00:21:50,610 --> 00:21:54,450
So you can go ahead and explore this.

308
00:21:55,680 --> 00:21:57,830
Explore this and the instant class.

309
00:21:57,840 --> 00:22:01,800
If I click on instant, it has a lot of information.

310
00:22:02,040 --> 00:22:03,960
Much of it was already discussed.

311
00:22:03,960 --> 00:22:06,360
So some theoretical information is here.

312
00:22:06,360 --> 00:22:13,020
So if you want to, you can click on instant class and read about it carefully to get more in-depth

313
00:22:13,020 --> 00:22:16,980
information, some of which has already been discussed in the earlier lecture.

314
00:22:17,220 --> 00:22:23,130
So instant class has this information because it is a point on the timeline.

315
00:22:23,130 --> 00:22:25,940
So I guess that's why they have a lot of information here.

316
00:22:25,950 --> 00:22:27,950
So you can take a look at this class also.

317
00:22:27,960 --> 00:22:30,840
So that's the API and that's about it.

318
00:22:30,840 --> 00:22:33,090
That's the new date and time API.

319
00:22:33,090 --> 00:22:35,880
And those are all the core classes which you'll be using.

320
00:22:35,880 --> 00:22:40,700
So and all of the, the demo program will be available in the resources section.

321
00:22:40,710 --> 00:22:42,450
Thank you and happy coding.

