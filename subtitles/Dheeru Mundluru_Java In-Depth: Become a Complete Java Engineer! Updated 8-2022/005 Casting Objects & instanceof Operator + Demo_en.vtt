WEBVTT
1
00:00:00.950 --> 00:00:03.350
Now let's look at casting of objects.

2
00:00:03.469 --> 00:00:08.540
And after discussing casting, we will also look at a new operator called Instance of.

3
00:00:10.460 --> 00:00:14.420
We look at typecasting during our discussion on primitive variables.

4
00:00:14.900 --> 00:00:20.780
It allowed us to assign primitive variables or literals of one type to variables of another type.

5
00:00:21.170 --> 00:00:23.990
And we discussed both implicit as well as explicit casting.

6
00:00:24.740 --> 00:00:29.060
Implicit casting is done when something smaller is assigned to a larger variable.

7
00:00:29.120 --> 00:00:33.950
An explicit casting is needed when something larger is assigned to a smaller variable.

8
00:00:34.840 --> 00:00:40.630
Just recall that typecasting was applicable only if both data types or of numeric types.

9
00:00:40.720 --> 00:00:43.090
That is any data type other than boolean.

10
00:00:44.080 --> 00:00:49.450
So typecasting was needed as one primitive variable or literal could be assigned to another primitive

11
00:00:49.450 --> 00:00:50.050
variable.

12
00:00:50.860 --> 00:00:56.830
And we saw that with polymorphism, we can now assign variables of one class to variables of another

13
00:00:56.830 --> 00:00:57.400
class.

14
00:00:57.400 --> 00:00:59.350
And we also need casting here.

15
00:01:00.820 --> 00:01:03.820
Now we looked at this example when introducing polymorphism.

16
00:01:04.209 --> 00:01:06.820
In fact, it is a very definition of polymorphism.

17
00:01:07.270 --> 00:01:13.930
Due to polymorphism, we are able to pass a subclass object as argument to the method parameter which

18
00:01:13.930 --> 00:01:15.310
is of type superclass.

19
00:01:15.880 --> 00:01:20.080
So basically what we are seeing here is implicit casting in action.

20
00:01:20.620 --> 00:01:24.790
That is a subclass object is implicitly casted to a superclass variable.

21
00:01:26.800 --> 00:01:33.040
But once implicit casting is done, we can only invoke those subclass methods which are also defined

22
00:01:33.040 --> 00:01:34.060
in the superclass.

23
00:01:34.540 --> 00:01:38.470
That is, we cannot invoke any methods that are specific to subclass.

24
00:01:39.070 --> 00:01:42.760
We discussed it when introducing polymorphism and here is an example.

25
00:01:43.240 --> 00:01:48.640
First, implicit cast is done to assign a data object to a variable of type stuff.

26
00:01:49.210 --> 00:01:52.360
We know that Ed is a subtype of stuff.

27
00:01:52.810 --> 00:01:58.240
Once this is done, we can no longer invoke any methods that are specific to Ed.

28
00:01:58.870 --> 00:02:05.620
And we know that this is because compiler uses reference type to decide on whether a method can be invoked

29
00:02:05.620 --> 00:02:06.160
or not.

30
00:02:06.700 --> 00:02:12.130
So here we get compiler error as the reference type staff does not have a pro review method.

31
00:02:13.380 --> 00:02:18.630
And to address this, we need to insert ed as an explicit cast as shown here.

32
00:02:19.290 --> 00:02:26.370
Now we are promising compiler that at runtime the variable s will be referencing an ed object or one

33
00:02:26.370 --> 00:02:27.540
of its subclasses.

34
00:02:28.170 --> 00:02:34.230
Also note that to invoke the method we need two pairs of parentheses, one with the cast itself and

35
00:02:34.230 --> 00:02:36.570
the other around the cast and the variable.

36
00:02:38.320 --> 00:02:43.720
Now this example is same as the previous one, but it is expressed in a more realistic way.

37
00:02:44.290 --> 00:02:50.140
Here the method approved review has staff as input parameter and it in turn invokes the approval review

38
00:02:50.140 --> 00:02:54.250
method on the input staff object, which we know gives a compiler error.

39
00:02:55.410 --> 00:02:59.460
And to avoid this, we insert ed as an explicit cast.

40
00:02:59.640 --> 00:03:05.670
So as mentioned earlier, by inserting this cast, we are promising the compiler that at runtime the

41
00:03:05.670 --> 00:03:08.880
variable s will be referencing an ED object.

42
00:03:10.510 --> 00:03:13.480
No say if this method is invoked with a staff object.

43
00:03:13.750 --> 00:03:16.600
That is, we are breaking the promise we made to the compiler.

44
00:03:16.960 --> 00:03:22.330
Now with this, we get an error at runtime and this error is called as class cast exception.

45
00:03:22.990 --> 00:03:27.100
That is, the input object cannot be casted to the specified class.

46
00:03:27.520 --> 00:03:31.170
That is, in this case, the staff object cannot be casted to editor.

47
00:03:31.930 --> 00:03:37.060
This is because staff can be an editor, but it can be something else too.

48
00:03:37.360 --> 00:03:40.170
For instance, it can be an email admin too.

49
00:03:40.870 --> 00:03:44.440
So while editor is a staff, a staff need not be editor.

50
00:03:45.190 --> 00:03:47.200
And so we get this error at runtime.

51
00:03:48.950 --> 00:03:54.950
Now, one thing we can do to avoid this runtime error is to do a logical test before doing the cast.

52
00:03:54.980 --> 00:03:58.460
And for that, we could use something called an instance of operator.

53
00:03:59.230 --> 00:04:00.490
And here is the syntax.

54
00:04:00.520 --> 00:04:03.110
On the left, you have an object reference.

55
00:04:03.130 --> 00:04:09.910
And on the right, we have the name of the class instance of operator would return a true if the object

56
00:04:09.910 --> 00:04:16.029
referenced by the object reference on the left is indeed an instance of the class on the right.

57
00:04:17.540 --> 00:04:23.870
Not that it is the object references object type, not the reference type is what matters.

58
00:04:24.230 --> 00:04:25.610
So just take that in mind.

59
00:04:27.040 --> 00:04:33.250
Also the object referenced by the variable can be a subclass of the class specified on the right side,

60
00:04:33.760 --> 00:04:36.580
so it doesn't have to be a direct instance.

61
00:04:38.500 --> 00:04:40.630
Now let's look at some instance of examples.

62
00:04:40.720 --> 00:04:42.700
Let's consider these three declarations.

63
00:04:42.910 --> 00:04:48.970
First, on second, instantiate user and staff classes, while the third one creates an instance of

64
00:04:48.970 --> 00:04:49.480
staff.

65
00:04:49.480 --> 00:04:51.550
But the reference type is user.

66
00:04:53.320 --> 00:04:59.540
And this example is related to the first declaration since the variable use object type is user.

67
00:04:59.560 --> 00:05:03.490
It is an instance of user and hence it true is returned in this case.

68
00:05:05.220 --> 00:05:10.590
This expression returns a false as use object type is a user, which is not an instance of staff.

69
00:05:10.890 --> 00:05:13.380
And we know that staff is a subtype of user.

70
00:05:14.900 --> 00:05:19.910
And this is related to the second declaration here, object type of variable as a staff.

71
00:05:19.910 --> 00:05:21.710
And so this evaluates to true.

72
00:05:24.030 --> 00:05:30.360
And this would also evaluate to true as SS referencing a staff object and staff is a subtype of user.

73
00:05:31.250 --> 00:05:36.800
So as we mentioned earlier, the object reference can be a subclass of the class on the right side of

74
00:05:36.800 --> 00:05:38.210
the instance of operator.

75
00:05:40.000 --> 00:05:41.290
Like in the previous example.

76
00:05:41.290 --> 00:05:43.810
This also evaluates to true as the variable.

77
00:05:43.810 --> 00:05:49.600
US in the third declaration is referencing staff object type, which is a subclass of user.

78
00:05:51.290 --> 00:05:56.180
And the final example also evaluates to true as it is, the object type that matters.

79
00:05:57.810 --> 00:06:04.170
And here is a new approved review method which prevents the potential runtime error a test of the input

80
00:06:04.170 --> 00:06:09.080
variable as is an instance of ed, and only if the test succeeds.

81
00:06:09.090 --> 00:06:12.270
It applies the cast and invokes the approve review method.

82
00:06:13.650 --> 00:06:16.650
So we cannot use these kinds of invocation statements.

83
00:06:16.920 --> 00:06:22.020
The test fails for the first invocation where a staff object is being passed as argument.

84
00:06:22.350 --> 00:06:24.120
And so the runtime error is prevented.

85
00:06:24.600 --> 00:06:30.060
But the test succeeds for both the second and even the third invocation, where chief editor object

86
00:06:30.060 --> 00:06:30.810
is passed.

87
00:06:31.520 --> 00:06:34.280
And we know that Chief Ed is a subtype of Ed.

88
00:06:35.260 --> 00:06:38.700
Now let's go ahead and look at all of the stuff we learned in code.

89
00:06:40.700 --> 00:06:47.180
This is the approved review method and it has been added to the user test class which has been created

90
00:06:47.180 --> 00:06:48.260
in the previous demo.

91
00:06:49.300 --> 00:06:53.530
And here is the final logic that we have seen in the slide.

92
00:06:54.160 --> 00:06:59.800
But I'm going to start with demonstrating from the beginning the concepts that we have started learning

93
00:06:59.800 --> 00:07:01.390
from the beginning of the lesson.

94
00:07:01.900 --> 00:07:06.610
So initially we were invoking the approve review method.

95
00:07:06.670 --> 00:07:09.370
So the input variable to this method is staff.

96
00:07:09.610 --> 00:07:16.630
And we were invoking approve review and it gave us a compilation error because the compiler knows that

97
00:07:16.630 --> 00:07:20.320
approved review method is not in the staff class.

98
00:07:20.440 --> 00:07:26.740
So we said that compiler looks at the reference variable, not the object type, but the reference variable.

99
00:07:26.740 --> 00:07:31.240
And in this case the reference variable is staff and it doesn't have the approve review method.

100
00:07:31.240 --> 00:07:32.770
So we get a compiler error.

101
00:07:33.900 --> 00:07:38.130
When I hover over here, it says the method of review is undefined.

102
00:07:38.820 --> 00:07:40.680
So let me just comment this out.

103
00:07:40.680 --> 00:07:44.370
And the solution was to insert a cast.

104
00:07:44.370 --> 00:07:46.770
And so here we are applying this cast.

105
00:07:46.800 --> 00:07:50.490
We are inserting this editor as a cast and now it works.

106
00:07:50.490 --> 00:07:52.500
So we don't see the compilation error.

107
00:07:52.770 --> 00:07:54.210
So let's just run this.

108
00:07:54.210 --> 00:08:00.290
So we are invoking we have created an instance of the user test class and we are invoking the approve

109
00:08:00.360 --> 00:08:06.300
review method, but we are invoking with by passing staff object as an method argument.

110
00:08:06.780 --> 00:08:08.670
So this would give us a runtime error.

111
00:08:08.670 --> 00:08:14.880
So when I run this as we discussed, it is throwing a class cast exception.

112
00:08:14.880 --> 00:08:17.400
So that's the runtime error that we are getting here.

113
00:08:17.400 --> 00:08:24.300
So it's no longer it's not a compilation error, but it's a runtime error and it says that the error

114
00:08:24.300 --> 00:08:26.610
is happening at line 11.

115
00:08:26.790 --> 00:08:29.610
So this is where the cast is being applied.

116
00:08:29.850 --> 00:08:39.000
And we were passing a staff object instead of passing an editor object or one of its subtypes, we promised

117
00:08:39.000 --> 00:08:43.710
the compiler that we would be passing either an editor object or one of its subtypes, and we did not

118
00:08:43.710 --> 00:08:44.280
do that.

119
00:08:44.550 --> 00:08:46.680
And so we are getting this runtime error.

120
00:08:46.830 --> 00:08:53.700
So now to avoid this, we said we can use instance of operator and we did that and this is the logic.

121
00:08:53.700 --> 00:08:55.830
So let me just uncomment this code.

122
00:08:57.110 --> 00:09:04.490
So here we are applying the instance of operator and if it is really an instance of Ed or one of its

123
00:09:04.490 --> 00:09:07.310
subclasses, then we would invoke this method.

124
00:09:07.310 --> 00:09:09.110
We would apply the cast and invoke this.

125
00:09:09.230 --> 00:09:12.530
Otherwise we would simply print this statement.

126
00:09:12.530 --> 00:09:14.120
Invalid object passed.

127
00:09:14.270 --> 00:09:21.380
So now if we invoke this, it says Invalid object passed when we are passing staff.

128
00:09:21.380 --> 00:09:25.820
So let me comment this and let me pass an ED object.

129
00:09:25.820 --> 00:09:30.470
So when I run this, it says Ed approve review.

130
00:09:30.470 --> 00:09:34.700
So it's actually invoking the approve review method in ED class.

131
00:09:34.700 --> 00:09:35.690
So.

132
00:09:36.760 --> 00:09:42.250
So it is going here and it is invoking the approved review method and the editor class.

133
00:09:42.370 --> 00:09:46.240
So approve review and it is going to print this text.

134
00:09:46.810 --> 00:09:48.190
So that's about it.

