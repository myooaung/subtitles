WEBVTT
1
00:00:02.120 --> 00:00:03.040
Hi there.

2
00:00:03.050 --> 00:00:04.200
This is De La Rue.

3
00:00:04.220 --> 00:00:05.150
And welcome back.

4
00:00:05.240 --> 00:00:07.550
Now let's look at stream operations.

5
00:00:07.820 --> 00:00:13.070
So in this particular lecture, we will look at a broad classification of the stream operations.

6
00:00:13.100 --> 00:00:18.230
In the subsequent lectures, we will actually explore the stream operations in detail.

7
00:00:18.560 --> 00:00:21.200
So we'll get into the specifics in the subsequent lectures.

8
00:00:22.760 --> 00:00:28.820
So earlier we looked at the stream pipeline, which is nothing but a pipeline of operations.

9
00:00:29.120 --> 00:00:34.520
And these operations can be either intermediate operations or terminal operation.

10
00:00:34.970 --> 00:00:40.580
So it can be either zero or more intermediate operations or a terminal operation.

11
00:00:41.000 --> 00:00:44.240
So here we have a nice illustration of a stream pipeline.

12
00:00:44.240 --> 00:00:49.490
So we have a collection at the top, which is the stream source, and the stream source is connected

13
00:00:49.490 --> 00:00:50.660
to a faucet.

14
00:00:50.690 --> 00:00:54.890
And you can regard this faucet as the stream method itself.

15
00:00:55.430 --> 00:01:01.490
So just recall that we were invoking the stream method on a collection instance, and that stream method

16
00:01:01.490 --> 00:01:05.330
would be chained to other operations in order to form a stream pipeline.

17
00:01:05.690 --> 00:01:10.190
So here we have a collection, but in general, we can also have other types of stream sources.

18
00:01:10.190 --> 00:01:13.760
But a collection instance is the typical stream source.

19
00:01:14.270 --> 00:01:20.630
Now here we have the intermediate operation, and an intermediate operation is simply an intermediate

20
00:01:20.630 --> 00:01:27.590
operation, which means that it can be changed with another operation which can be yet another intermediate

21
00:01:27.590 --> 00:01:32.240
operation or a terminal operation, since an intermediate operation can be changed.

22
00:01:32.270 --> 00:01:36.770
It has to produce an object on which another operation can be invoked.

23
00:01:37.280 --> 00:01:42.260
And the object that intermediate operation produces, we know, is the instance of stream.

24
00:01:42.530 --> 00:01:43.790
So it's a stream object.

25
00:01:44.300 --> 00:01:50.750
And a terminal operation, as the name implies, is a terminal operation, which means that it terminates

26
00:01:50.750 --> 00:01:52.040
the stream pipeline.

27
00:01:52.670 --> 00:01:59.240
A terminal operation, unlike an intermediate operation, does not return a stream instance, but it

28
00:01:59.240 --> 00:02:00.920
can return other types of data.

29
00:02:00.950 --> 00:02:07.160
And some of them are shown here like Boolean optional and so on, and we'll be looking at them in subsequent

30
00:02:07.160 --> 00:02:07.790
lectures.

31
00:02:08.639 --> 00:02:15.390
And we also know that terminal operation triggers the execution of the pipeline, as we know that intermediate

32
00:02:15.390 --> 00:02:22.170
operations are lazy operations, while the terminal operation is the eager operation that initiates

33
00:02:22.170 --> 00:02:22.980
the action.

34
00:02:23.660 --> 00:02:29.900
So what it means is once the terminal operation is invoked, only then the elements will be fetched

35
00:02:29.900 --> 00:02:31.550
from the stream source.

36
00:02:31.790 --> 00:02:36.530
The elements will be fetched one at a time in order to be processed by the different operations.

37
00:02:37.070 --> 00:02:44.510
So the invocation of the terminal operation can be regarded as turning the faucet on so that the elements

38
00:02:44.510 --> 00:02:49.610
in the collection would start dripping through the stream pipeline for processing.

39
00:02:50.270 --> 00:02:56.630
And we also know that we cannot invoke another intermediate or another terminal operation on a terminal

40
00:02:56.630 --> 00:02:57.290
operation.

41
00:02:57.590 --> 00:03:04.400
So terminal operation is the last operation, and that is what initiates the processing of the stream.

42
00:03:04.880 --> 00:03:09.560
Until then, the stream pipeline can be considered to be in a dormant state.

43
00:03:10.910 --> 00:03:16.430
Now keep in mind that a stream is not a data structure like a collection.

44
00:03:16.850 --> 00:03:25.100
It is just a bunch of computations applied on each element of a source, which typically is a collection

45
00:03:25.100 --> 00:03:26.180
like we see here.

46
00:03:26.780 --> 00:03:28.160
So just keep that in mind.

47
00:03:28.160 --> 00:03:30.670
It is not a data structure like a collection.

48
00:03:30.680 --> 00:03:32.690
It's just a bunch of computations.

49
00:03:34.290 --> 00:03:36.900
Also streams cannot mutate data.

50
00:03:37.410 --> 00:03:41.490
What this means is the original data structure is unaffected.

51
00:03:41.970 --> 00:03:47.940
However, if the elements in the source data structure are mutable objects, then the state of those

52
00:03:47.940 --> 00:03:49.530
objects can be changed.

53
00:03:50.040 --> 00:03:56.070
But we cannot replace those elements with something else, like a new object or a null value.

54
00:03:57.610 --> 00:04:00.050
And here are the stream operations.

55
00:04:00.070 --> 00:04:04.450
So this is a broad classification of the stream operation types.

56
00:04:04.810 --> 00:04:10.330
In subsequent lectures, we will look at specific operations that fall under these different operation

57
00:04:10.330 --> 00:04:10.870
types.

58
00:04:11.290 --> 00:04:16.300
Here are the first three operation types represent intermediate operations and hence the written stream

59
00:04:16.300 --> 00:04:23.500
instance, while the last three represent terminal operations and they are shown with red symbols indicating

60
00:04:23.500 --> 00:04:25.150
that they terminate the stream.

61
00:04:25.510 --> 00:04:29.290
Just like the stop traffic signals that we see on the streets.

62
00:04:30.080 --> 00:04:36.230
Now here we looked at the first two types in the earlier lecture, the specific operations we saw were

63
00:04:36.230 --> 00:04:38.240
filter and map filter.

64
00:04:38.240 --> 00:04:44.630
We note take a predicate and apply it on the stream element, while MAP applies a function on the stream

65
00:04:44.630 --> 00:04:48.620
element so that it can perform some kind of transformation.

66
00:04:49.310 --> 00:04:54.380
I think the discussion that we had on these two operations in the previous lecture should suffice.

67
00:04:54.560 --> 00:05:00.830
And there is one more method called Flat Map, which falls under the mapping operation type, and at

68
00:05:00.830 --> 00:05:02.810
some point I'll add a lecture on that.

69
00:05:02.810 --> 00:05:09.380
But for now I think just the filter and map should do, and hence we will not be discussing them explicitly,

70
00:05:09.500 --> 00:05:15.830
but we will use them pretty much in every example demonstration in the follow up lectures because they

71
00:05:15.830 --> 00:05:20.080
are very commonly used, so we're not going to discuss them explicitly.

72
00:05:20.120 --> 00:05:27.200
Next one is slicing and slicing can be considered as a special type of filtering operations, as they

73
00:05:27.200 --> 00:05:31.310
also allow only certain elements of the stream to be processed.

74
00:05:32.000 --> 00:05:36.890
It is just that they do not take a predicate as an input, like a filtering operation.

75
00:05:37.400 --> 00:05:40.430
Next we have matching and finding operations.

76
00:05:40.730 --> 00:05:47.870
Match operations will just check if the stream elements match a given predicate so they return a boolean

77
00:05:47.870 --> 00:05:48.410
value.

78
00:05:48.860 --> 00:05:54.950
So they are like filter operations to as they are taking predicate as input, but matching operations

79
00:05:54.950 --> 00:06:00.920
are terminal operations, while filter is an intermediate operation which returns a stream instance

80
00:06:01.550 --> 00:06:08.750
and find operations are like search operations and hence they actually return an element matching certain

81
00:06:08.750 --> 00:06:09.410
criteria.

82
00:06:10.620 --> 00:06:12.480
Next is reduction operations.

83
00:06:12.570 --> 00:06:18.450
UN reduction operations are used to reduce the stream elements into a single value.

84
00:06:18.750 --> 00:06:25.350
So we have a bunch of stream elements and if we want to reduce them into a single value, then we would

85
00:06:25.350 --> 00:06:30.000
use reduce operations and reduce operations repetitively.

86
00:06:30.000 --> 00:06:33.360
Apply a binary operation on the stream elements.

87
00:06:33.720 --> 00:06:38.250
So a binary operation would be used and that would be applied repetitively on the elements.

88
00:06:38.790 --> 00:06:45.240
Finally, collect operations are used to produce an output like a list or a set or a map.

89
00:06:45.630 --> 00:06:51.450
So the input would be a stream of elements, but the output would be something like a list or a set

90
00:06:51.450 --> 00:06:52.140
or a map.

91
00:06:52.620 --> 00:06:58.260
So that's a broad classification of stream operations and we will explore them in detail and subsequent

92
00:06:58.260 --> 00:06:58.950
lectures.

93
00:06:59.340 --> 00:07:02.700
So that's it for now and thank you and see you in the next lecture.

