WEBVTT
1
00:00:02.090 --> 00:00:03.030
Hi there.

2
00:00:03.050 --> 00:00:04.120
This is the De La Rue.

3
00:00:04.130 --> 00:00:05.060
And welcome back.

4
00:00:05.090 --> 00:00:09.350
So in the last lecture, we looked at the sublet, we wrote the sublet.

5
00:00:09.650 --> 00:00:16.370
And now I want to talk a little bit about the servlet, about the lifecycle of a servlet in a container,

6
00:00:16.790 --> 00:00:23.870
how the sublet gets started and how it is how it is used to service the clients, which means to service

7
00:00:23.870 --> 00:00:26.000
the requests that we get from the clients.

8
00:00:26.510 --> 00:00:31.940
So we are going to discuss about this sublet and also some of its super types.

9
00:00:32.240 --> 00:00:38.480
So a sublet here, we are calling it as a sublet and it does not have any main method.

10
00:00:38.840 --> 00:00:40.070
So that's the thing.

11
00:00:40.070 --> 00:00:46.040
It doesn't have main method and a sublet is deployed within a sublet container.

12
00:00:46.040 --> 00:00:53.690
We have seen that and we mentioned that it can be done either this way or in web dot XML and the container

13
00:00:53.690 --> 00:00:55.910
would know that it is a sublet.

14
00:00:56.420 --> 00:01:04.550
So the thing is, whenever the Tomcat container, the sublet container is started, it, for instance,

15
00:01:04.550 --> 00:01:12.200
it will look at this web XML file and it will try to find all the subnets, all the sublets that are

16
00:01:12.260 --> 00:01:14.810
within this particular web application.

17
00:01:14.810 --> 00:01:18.320
And it does that for all the web applications that are deployed.

18
00:01:18.590 --> 00:01:22.100
So but let's just assume that there is only a single Web application.

19
00:01:22.980 --> 00:01:28.230
Typically what happens is we can also have this tag called Load on startup.

20
00:01:28.500 --> 00:01:37.170
And what it means is as soon as the Tomcat server is started, it needs to load all of the servers.

21
00:01:37.590 --> 00:01:45.030
And by loading, what we mean is it has to create an instance of this servlet in this case.

22
00:01:45.480 --> 00:01:49.080
So which means it would it would invoke the default constructor.

23
00:01:49.080 --> 00:01:51.420
So that's how you would create an instance.

24
00:01:51.540 --> 00:01:54.150
So that's how the container would create an instance.

25
00:01:54.150 --> 00:02:01.800
And this is being done at the server startup time whenever you had startup batch and it would also invoke

26
00:02:01.830 --> 00:02:03.300
a method called in it.

27
00:02:03.720 --> 00:02:07.980
Now the method in it is in one of the super types.

28
00:02:08.160 --> 00:02:12.180
So here we have this particular expression.

29
00:02:12.450 --> 00:02:19.710
We are saying it's extents has to be sorted and init method is part of one of the super types and it

30
00:02:19.710 --> 00:02:22.080
essentially initializes the servlet.

31
00:02:22.080 --> 00:02:23.970
But let's not get into all of that.

32
00:02:23.970 --> 00:02:33.210
So this HTTP servlet is a abstract class and it is part of the Java E Library, the servlet library.

33
00:02:33.210 --> 00:02:34.470
So here it is.

34
00:02:34.470 --> 00:02:39.270
So this is the package name Java dot servlet dot http.

35
00:02:39.810 --> 00:02:40.710
That's the package name.

36
00:02:40.710 --> 00:02:47.580
And within that package we have the history type servlet and it is an abstract class and this type servlet

37
00:02:47.580 --> 00:02:52.170
extends another abstract class which is in a parent package.

38
00:02:52.170 --> 00:02:59.190
It is Java X dot servlet since this one is specific to HTTP, it is in specific packets, a package

39
00:02:59.190 --> 00:03:02.100
called HTTP and this one is more generic.

40
00:03:02.100 --> 00:03:04.200
So it's called as a generic servlet.

41
00:03:04.350 --> 00:03:06.210
And let me click on that.

42
00:03:06.750 --> 00:03:12.660
And generic servlet in turn implements another interface called servlet.

43
00:03:13.710 --> 00:03:19.440
So at the root we have the servlet and a subtype of that is generic servlet.

44
00:03:19.560 --> 00:03:23.280
And another subtype of that is the HTTP servlet.

45
00:03:23.640 --> 00:03:29.610
And both generic servlet and type servlet are abstract classes, whereas solid is an interface.

46
00:03:29.730 --> 00:03:33.030
And let's also look at some of the methods that it has.

47
00:03:33.030 --> 00:03:35.160
So these are the lifecycle methods.

48
00:03:35.160 --> 00:03:38.580
So one of them is init method here then.

49
00:03:39.270 --> 00:03:41.700
So that is used to initialize the servlet.

50
00:03:41.730 --> 00:03:44.250
Then this can be used to destroy the servlet.

51
00:03:44.520 --> 00:03:47.520
And there is also the main method called US service.

52
00:03:47.520 --> 00:03:53.970
So this is the one service method and so in generic servlet.

53
00:03:53.970 --> 00:03:55.800
So this is actually the generic servlet.

54
00:03:55.800 --> 00:03:58.710
I'm sorry, I thought I was showing you the servlet.

55
00:03:58.890 --> 00:04:00.360
Let me click on servlet interface.

56
00:04:00.360 --> 00:04:05.070
It has all of those methods in it, service and destroy.

57
00:04:05.280 --> 00:04:07.060
And there are a couple of other methods.

58
00:04:07.080 --> 00:04:08.820
Let's not worry about that.

59
00:04:09.540 --> 00:04:12.930
So a generic servlet is is implementing it.

60
00:04:12.930 --> 00:04:17.220
So it's going to have some implementation for some of those methods.

61
00:04:17.910 --> 00:04:21.990
And it's an abstract class, so it's going to implement init method.

62
00:04:22.260 --> 00:04:29.220
So at the server start up time, at the time when we start the server Tomcat server, it's going to

63
00:04:29.220 --> 00:04:36.150
create an instance of our servlet, which is my box and it's going to invoke the init method and it's

64
00:04:36.150 --> 00:04:39.150
also going to pass something called a servlet config.

65
00:04:39.300 --> 00:04:45.630
And when that happens, this particular init method within the generic servlet will be invoked because

66
00:04:45.630 --> 00:04:47.070
it has the implementation.

67
00:04:47.520 --> 00:04:51.360
And with that we say that the servlet is initialized.

68
00:04:51.570 --> 00:04:56.910
Now once it is initialized, it is ready to serve any client requests.

69
00:04:57.450 --> 00:04:59.790
So it will it will be there in the memory.

70
00:04:59.790 --> 00:05:05.640
So the servlet, which we have written, has been loaded and it has been initialized by invoking this

71
00:05:05.640 --> 00:05:06.270
method.

72
00:05:06.300 --> 00:05:08.070
Now it's already there in the memory.

73
00:05:08.400 --> 00:05:15.390
And from there onwards, if the server, if the servlet container receives any request from the browser

74
00:05:15.570 --> 00:05:22.350
for this particular servlet, then it is going to use the servlet and it would invoke.

75
00:05:23.350 --> 00:05:31.930
A method called service on that particular servlet and the service method which is here, it will invoke

76
00:05:31.930 --> 00:05:35.830
this method called service, which is inside the HTTP servlet.

77
00:05:36.570 --> 00:05:37.800
And it will pass.

78
00:05:38.100 --> 00:05:43.080
The servlet container would pass instances off these two interfaces.

79
00:05:43.080 --> 00:05:44.550
These are also two interfaces.

80
00:05:44.550 --> 00:05:48.540
One is representing the request, another, the other one is representing the response.

81
00:05:48.570 --> 00:05:57.630
So the servlet container will invoke the service method and it will create two objects, one of them

82
00:05:57.630 --> 00:05:59.490
for request and one of them for response.

83
00:05:59.490 --> 00:06:06.870
And it will pass those objects and the service method will then use this HTTP servlet request object

84
00:06:06.900 --> 00:06:13.800
and it will check if the request was was a get request or was a post request or if it was put or anything

85
00:06:13.800 --> 00:06:14.250
else.

86
00:06:14.280 --> 00:06:21.630
Now, if it is a get request, then it would invoke the method called do get, do get and do get is

87
00:06:21.630 --> 00:06:24.030
actually overridden in our servlet.

88
00:06:24.030 --> 00:06:27.450
So we have overridden the do get method in our case.

89
00:06:27.930 --> 00:06:33.870
Now if the request was for post, if it was a post request, then we would have overridden the post

90
00:06:33.870 --> 00:06:34.200
method.

91
00:06:34.200 --> 00:06:40.160
So we strictly do not have to have this method because our request was for only do for it was a get

92
00:06:40.170 --> 00:06:40.830
request.

93
00:06:40.950 --> 00:06:47.370
So in the browser for instance, so we saw this, so it was actually a get request.

94
00:06:47.370 --> 00:06:53.220
It would be a get request in this case because we are just getting some information from the server.

95
00:06:53.490 --> 00:06:57.270
So in this case, the do get method would have to be invoked.

96
00:06:57.570 --> 00:07:02.130
But the thing is that do get method would be invoked from.

97
00:07:03.510 --> 00:07:07.050
Thus service method OC from the service method.

98
00:07:07.900 --> 00:07:13.090
So this method, the class, this method would detect that the request is forget and it would invoke

99
00:07:13.090 --> 00:07:18.430
the do get method and do get method is overridden in the subclass which we have written.

100
00:07:19.240 --> 00:07:20.710
So that's how it would work.

101
00:07:20.740 --> 00:07:27.370
Now the main thing to remember is so we said that at the server startup time, an instance of our servlet

102
00:07:27.370 --> 00:07:31.030
will be created and it will be initialized by invoking the init method.

103
00:07:31.150 --> 00:07:40.090
But after that, the same request, the same servlet would be used to service any number of requests

104
00:07:40.090 --> 00:07:42.940
that are coming for that particular servlet.

105
00:07:43.150 --> 00:07:48.070
So let's say at a given instance of time, there are ten requests for that servlet.

106
00:07:48.100 --> 00:07:56.830
Then the same servlet instance which we wrote the my box here, the servlet, the same object would

107
00:07:56.830 --> 00:08:00.460
be used to serve all of those ten requests.

108
00:08:01.090 --> 00:08:07.480
So for each request that the container is going to receive, it's going to create a thread, it's going

109
00:08:07.480 --> 00:08:12.250
to create a thread, or there would be a pool of threads and it would use one of them.

110
00:08:12.250 --> 00:08:17.620
And to that thread it would give the object, it would give this servlet object.

111
00:08:17.650 --> 00:08:20.530
Now, if there are ten requests, there would be ten.

112
00:08:21.040 --> 00:08:22.930
It would create ten different threads.

113
00:08:22.930 --> 00:08:29.530
But for all of those threads, it's going to it's going to pass the same servlet instance.

114
00:08:29.710 --> 00:08:33.669
It's not going to create ten different instances of my box.

115
00:08:33.940 --> 00:08:35.240
So just keep that in mind.

116
00:08:35.260 --> 00:08:40.159
So a single servlet is going to be used for all of the requests.

117
00:08:40.179 --> 00:08:46.630
That's the main thing which you need to keep in mind and to serve each of those requests.

118
00:08:46.660 --> 00:08:49.180
It is going to invoke the service method.

119
00:08:49.210 --> 00:08:56.770
And before invoking as it is going to invoke the service method for each of those invocations, it would

120
00:08:56.770 --> 00:09:04.090
create an instance of HTTP servlet request and HTTP servlet response, and it would pass to the service

121
00:09:04.090 --> 00:09:06.550
method, which I have shown here.

122
00:09:06.580 --> 00:09:13.180
And the service method would invoke, depending on the HTTP method, it would invoke either do, get

123
00:09:13.180 --> 00:09:20.380
or post or even do port or any of those methods corresponding to the different HTTP methods.

124
00:09:20.380 --> 00:09:26.290
But usually it will be either do post or do get and or in some cases it would be do put.

125
00:09:27.160 --> 00:09:30.310
So that's how it would work for all of the instances.

126
00:09:30.310 --> 00:09:35.710
It would it would use the same server instance and once the service is.

127
00:09:36.750 --> 00:09:41.250
Once the response is generated, the container will take all of this.

128
00:09:41.490 --> 00:09:46.090
The response that this method generates and it will relate back to the server.

129
00:09:46.110 --> 00:09:53.750
And once it does that, you know, this is the HTTP request and the HTTP response objects, you know,

130
00:09:53.820 --> 00:09:57.240
they would go out of scope and they would be garbage collected.

131
00:09:58.240 --> 00:10:01.040
So that's how a servlet works.

132
00:10:01.060 --> 00:10:07.120
So at the start of the Tomcat, when we are starting the Tomcat server, it's going to create look at

133
00:10:07.120 --> 00:10:13.510
the Web XML file or it would look at the scan, all of these annotations, and it would load all of

134
00:10:13.510 --> 00:10:17.170
the servlet and it would invoke the initial init method.

135
00:10:17.380 --> 00:10:19.930
And that's how it's going to initialize the servlet.

136
00:10:19.960 --> 00:10:26.710
And once it is initialized, the servlet is ready to service any clients and the same servlet would

137
00:10:26.710 --> 00:10:33.790
be used to service all of the requests that are being that the servlet container is going to receive.

138
00:10:34.330 --> 00:10:36.130
So that's the thing.

139
00:10:38.450 --> 00:10:39.040
And that's it.

140
00:10:39.050 --> 00:10:46.070
And like I said in the earlier demo, at the very end, instead of having it in web dot XML, we can

141
00:10:46.070 --> 00:10:52.990
remove this whole thing and we can just simply have it here and it would be recognized as a servlet.

142
00:10:53.000 --> 00:11:01.400
So if you right click and if you create a var file and if you redeploy it and you will notice that you

143
00:11:01.400 --> 00:11:04.220
can still access the web application.

144
00:11:04.890 --> 00:11:06.060
So that's about it.

145
00:11:06.060 --> 00:11:14.310
But the main problem with this design is you can see that all of the HTML is embedded within the servlet.

146
00:11:14.340 --> 00:11:22.680
That's not a good design because in a professional company you would have UI, specialized UI developers

147
00:11:22.710 --> 00:11:26.970
or frontend developers who work only on the HTML part.

148
00:11:26.970 --> 00:11:33.330
And then you will have the regular software engineers who write, you know, the Java code.

149
00:11:33.540 --> 00:11:38.670
Now here the HTML is embedded within the servlet.

150
00:11:39.120 --> 00:11:45.420
So what it means is you need to give this Java file to a frontend developer who is not familiar with

151
00:11:45.420 --> 00:11:47.020
programming language like Java.

152
00:11:47.040 --> 00:11:54.090
So it would be a very unpleasant experience for frontend developers to look at this file which looks

153
00:11:54.090 --> 00:11:57.160
very clumsy and to play with this HTML.

154
00:11:57.180 --> 00:12:01.050
So that would be very, very one unpleasant experience.

155
00:12:01.050 --> 00:12:08.670
So because of that we have the modal view controller pattern where we push this HTML into something

156
00:12:08.670 --> 00:12:16.980
like a JSP file and the JSP file would have only this HTML content and that JSP file will be given to

157
00:12:16.980 --> 00:12:18.270
the frontend developer.

158
00:12:18.270 --> 00:12:21.900
So that way his or her life would be much more easier.

159
00:12:22.620 --> 00:12:28.770
So that would be the view and this would be the servlet would act as the controller and the model would

160
00:12:28.770 --> 00:12:30.990
actually get all of this data.

161
00:12:30.990 --> 00:12:37.610
For instance, here we have the name of the author and we have the name of the the rating of the book.

162
00:12:37.620 --> 00:12:43.740
So all of that information would be part of the manager classes, and manager classes will access the

163
00:12:43.740 --> 00:12:44.550
database.

164
00:12:44.670 --> 00:12:51.030
So all of that information will be fetched from the database and it would forward all of the data to

165
00:12:51.030 --> 00:12:52.230
the JSP file.

166
00:12:52.230 --> 00:12:59.070
And the JSP file will have this HTML, but it will fill all of these details with the data that it gets

167
00:12:59.070 --> 00:13:00.200
from the controller.

168
00:13:00.210 --> 00:13:06.360
So that would be the model view controller and that helps in separating our concerns here.

169
00:13:06.360 --> 00:13:11.520
So separating the HTML tag, the HTML into the JSP.

170
00:13:12.180 --> 00:13:14.250
I'll try to include a lecture on that.

171
00:13:14.250 --> 00:13:20.340
If time permits, I will try to include a lecture on further extending this particular this particular

172
00:13:20.340 --> 00:13:20.880
code.

173
00:13:21.300 --> 00:13:22.350
So that's about it.

174
00:13:22.350 --> 00:13:30.360
So we looked at the lifecycle of a servlet and I hope it gave you some good background on how sublets

175
00:13:30.360 --> 00:13:31.200
would work.

176
00:13:31.650 --> 00:13:32.340
Thank you.

177
00:13:32.340 --> 00:13:34.050
And that's it for now.

178
00:13:34.230 --> 00:13:34.620
Thank you.

179
00:13:34.620 --> 00:13:35.550
And happy coding.

