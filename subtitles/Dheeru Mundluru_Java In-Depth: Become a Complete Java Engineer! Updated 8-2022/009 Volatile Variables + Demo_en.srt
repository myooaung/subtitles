1
00:00:01,940 --> 00:00:02,750
Hi there.

2
00:00:02,780 --> 00:00:03,220
This is day.

3
00:00:03,390 --> 00:00:03,480
Day.

4
00:00:04,220 --> 00:00:08,450
Now, let's take a look at a volatile modifier that can be used with variables.

5
00:00:08,870 --> 00:00:14,420
In the previous lecture, we saw that one of the happens before ordering rules was based on volatile

6
00:00:14,420 --> 00:00:15,170
variables.

7
00:00:16,530 --> 00:00:22,890
Volatile is simply a modifier that is used with variables and it helps ensure memory visibility.

8
00:00:23,310 --> 00:00:29,130
That is, once a particular thread writes a value to a volatile variable, it is guaranteed that that

9
00:00:29,130 --> 00:00:35,430
particular value would be visible to all subsequent rates of that variable from all threats.

10
00:00:35,850 --> 00:00:38,250
This is what was mentioned in the previous lecture.

11
00:00:38,550 --> 00:00:45,120
Any right to a volatile variable establishes a happens before ordering with subsequent reads of the

12
00:00:45,120 --> 00:00:46,290
same variable.

13
00:00:46,320 --> 00:00:49,590
Regardless of the thread that is performing the read.

14
00:00:50,280 --> 00:00:54,750
So the volatile variable value will be propagated to all other threats.

15
00:00:55,290 --> 00:00:58,110
It's an alternative way to achieve memory visibility.

16
00:00:58,140 --> 00:01:01,080
As synchronization would also help in doing that.

17
00:01:01,260 --> 00:01:01,680
Right.

18
00:01:01,680 --> 00:01:02,820
We already saw that.

19
00:01:03,420 --> 00:01:09,420
And if you look at the dictionary, the meaning of volatile is something that changes very rapidly and

20
00:01:09,420 --> 00:01:10,500
unpredictably.

21
00:01:12,300 --> 00:01:18,180
Volatile variable values are always stored in main memory, so they are not cached in registers or in

22
00:01:18,180 --> 00:01:20,100
local cache of processors.

23
00:01:20,610 --> 00:01:25,590
So I believe it simplifies the memory visibility criteria as we are only dealing with main memory.

24
00:01:25,980 --> 00:01:31,590
That is, any processor will always write a volatile variable value to main memory and will also read

25
00:01:31,590 --> 00:01:33,090
from only main memory.

26
00:01:34,600 --> 00:01:38,500
One little key word can be used with shared mutable variables.

27
00:01:39,040 --> 00:01:44,980
Not that volatile keyword cannot be used with local variables as the scope of local variables ends with

28
00:01:44,980 --> 00:01:46,750
the block in which they are defined.

29
00:01:46,990 --> 00:01:48,910
So it just doesn't make sense.

30
00:01:50,870 --> 00:01:57,290
And here is a typical use case of a volatile variable and the code is adapted from item 66 in effective

31
00:01:57,290 --> 00:01:57,830
Java.

32
00:01:58,280 --> 00:02:00,440
Here the goal is to stop a thread.

33
00:02:00,830 --> 00:02:02,890
And in this code there are two threads.

34
00:02:02,900 --> 00:02:08,720
One is the main thread and the other is shown in the grey box where we are using an anonymous class

35
00:02:08,720 --> 00:02:10,160
to implement the task.

36
00:02:10,729 --> 00:02:13,640
You can also notice the invocation of the START method.

37
00:02:14,360 --> 00:02:18,030
This example shows thread coordination from the main thread.

38
00:02:18,050 --> 00:02:24,980
We want to stop the second thread and for this we are using a shared mutable variable called stop and

39
00:02:24,980 --> 00:02:28,730
it is declared as volatile and it has a default value of false.

40
00:02:29,390 --> 00:02:31,370
Now the second thread has a loop.

41
00:02:31,700 --> 00:02:36,500
And within the loop we are printing some text until stop is set to true.

42
00:02:37,370 --> 00:02:42,260
After about a second the main thread set stop to true with this.

43
00:02:42,260 --> 00:02:47,930
Whenever the second thread gets back into running state, the vile condition would fail and the thread

44
00:02:47,930 --> 00:02:48,770
would terminate.

45
00:02:49,540 --> 00:02:54,580
Now, if the stock variable is not declared as volatile, then there is no guarantee that the second

46
00:02:54,580 --> 00:02:58,090
thread will ever get to see the updated value of stop.

47
00:02:58,510 --> 00:03:00,160
And it may infinitely loop.

48
00:03:00,610 --> 00:03:07,630
So volatile keyword is establishing a happens before ordering and is allowing the two threads to coordinate

49
00:03:07,630 --> 00:03:08,560
effectively.

50
00:03:10,110 --> 00:03:13,260
And here is the same example, but using synchronization.

51
00:03:13,650 --> 00:03:17,730
We know that synchronization also establishes happens before ordering.

52
00:03:18,330 --> 00:03:24,540
So here stop is set to true inside the synchronized method called request stop, which is invoked from

53
00:03:24,540 --> 00:03:25,320
the main method.

54
00:03:25,890 --> 00:03:32,070
Similarly, there is also the synchronize method stop, which simply returns the latest value of stop.

55
00:03:32,400 --> 00:03:35,010
And this method is accessed from the second thread.

56
00:03:35,800 --> 00:03:41,950
So once the request OP is invoked by Main, a later stop method is invoked by the second thread.

57
00:03:41,950 --> 00:03:45,400
The second thread while condition will fail and will terminate.

58
00:03:46,030 --> 00:03:50,200
So synchronization also does what volatile does.

59
00:03:50,650 --> 00:03:56,320
However, according to Joshua BLOCK, it seems performance wise volatile version could be better.

60
00:03:56,470 --> 00:04:00,880
And of course it is also much more readable without the two additional methods.

61
00:04:02,740 --> 00:04:09,100
Now, even in our bank account example, we have seen the advantage of memory visibility due to synchronization.

62
00:04:09,610 --> 00:04:13,870
We know that Anita's thread gets to see the latest value of balance.

63
00:04:13,900 --> 00:04:20,579
If her thread accesses, get balanced method after jahns thread updates balance in the make withdrawal

64
00:04:20,589 --> 00:04:21,040
method.

65
00:04:21,920 --> 00:04:27,860
But in addition to memory, visibility, synchronization also ensures mutual exclusion that is at any

66
00:04:27,860 --> 00:04:29,180
given point of time.

67
00:04:29,210 --> 00:04:34,310
Only one thread can access the synchronized methods, get balanced, and make withdrawal.

68
00:04:34,790 --> 00:04:38,480
And the thread would release the lock only upon exiting the methods.

69
00:04:38,990 --> 00:04:40,990
And this is needed as we want.

70
00:04:41,010 --> 00:04:43,890
Make withdrawal method to work atomically.

71
00:04:43,910 --> 00:04:44,480
Right.

72
00:04:44,930 --> 00:04:46,960
And if we do not use synchronize here.

73
00:04:46,970 --> 00:04:52,460
But if we simply make the balance variable volatile, then we do get memory visibility.

74
00:04:52,460 --> 00:04:59,060
But we would still have the race condition when both Anita's and John thread are inside make withdrawal

75
00:04:59,060 --> 00:05:00,110
at the same time.

76
00:05:00,620 --> 00:05:02,600
So we do need locking here.

77
00:05:04,010 --> 00:05:11,350
So basically locking that in synchronization can guarantee both memory, visibility and mutual exclusion,

78
00:05:11,360 --> 00:05:15,140
while volatile variable can only guarantee memory visibility.

79
00:05:16,950 --> 00:05:22,950
If there is a single thread that is writing to a shared variable and other threads, read the value

80
00:05:22,950 --> 00:05:23,910
of that variable.

81
00:05:24,120 --> 00:05:30,630
Then there is no question of race condition and we can use volatile variable in our stop thread example,

82
00:05:30,630 --> 00:05:36,750
we had the main thread setting the shade variables top to true and the second thread was reading that

83
00:05:36,750 --> 00:05:37,500
value.

84
00:05:37,500 --> 00:05:40,380
And so volatile is a perfect candidate for that.

85
00:05:41,230 --> 00:05:47,050
In that particular example, even if there were multiple threads setting the shared variables top to

86
00:05:47,050 --> 00:05:53,590
true, then we can still use volatile as all threats are setting the top variable to the same value.

87
00:05:53,590 --> 00:05:54,070
True.

88
00:05:54,490 --> 00:05:55,780
And so it shouldn't matter.

89
00:05:57,320 --> 00:06:03,590
But if there can be a race condition, then we cannot use volatile and we need to use synchronised our

90
00:06:03,590 --> 00:06:10,400
bank account example with Anita and John has a check then at race condition and we need to use synchronization

91
00:06:10,400 --> 00:06:10,880
there.

92
00:06:11,360 --> 00:06:14,600
Of course, we also get the benefit of memory visibility.

93
00:06:16,450 --> 00:06:18,550
Here is something more on memory semantics.

94
00:06:18,760 --> 00:06:27,430
It says All actions that precede a right to a volatile field or a release of a lock are visible to all

95
00:06:27,430 --> 00:06:34,000
actions that follow a subsequent read of the same volatile variable or acquisition of the same lock.

96
00:06:34,690 --> 00:06:37,990
If it's not clear, then the next illustration should be helpful.

97
00:06:39,410 --> 00:06:41,240
Let's say we have read a.

98
00:06:42,150 --> 00:06:45,000
And within today we have some actions.

99
00:06:45,000 --> 00:06:50,850
And those actions precede a the right to a volatile field or release of a lock.

100
00:06:52,340 --> 00:06:53,450
Now let's say it later.

101
00:06:53,450 --> 00:07:00,740
Timestamp, we have thread B which either reads from the same volatile field or acquires the same lock

102
00:07:00,740 --> 00:07:02,210
that was released earlier.

103
00:07:03,550 --> 00:07:03,970
With that.

104
00:07:03,970 --> 00:07:08,590
All the earlier actions that we saw in the cloud will be visible to threat.

105
00:07:08,650 --> 00:07:09,460
Be also.

106
00:07:11,940 --> 00:07:17,070
Let's take a look at an example now, and we will look at it in the context of a volatile variable.

107
00:07:17,640 --> 00:07:23,880
Let's say we have thread A which is launched that some time instance t one and it sets two variables

108
00:07:23,880 --> 00:07:27,000
X and V to ten and 15 respectively.

109
00:07:27,480 --> 00:07:30,990
Here V is a volatile variable and X is a regular variable.

110
00:07:32,740 --> 00:07:32,990
Next.

111
00:07:33,010 --> 00:07:36,940
At a subsequent time instance PT two thread b is launched.

112
00:07:38,160 --> 00:07:39,000
Next time.

113
00:07:39,000 --> 00:07:40,170
Instance three three.

114
00:07:40,200 --> 00:07:42,480
Thread a re assigns x to 11.

115
00:07:43,780 --> 00:07:50,080
Next time instant three four thread breeds x, but it still sees the value as ten.

116
00:07:50,590 --> 00:07:52,870
So it's not seeing the new value.

117
00:07:54,030 --> 00:07:58,650
A time 85 thread a updates the volatile variable V to 16.

118
00:07:59,790 --> 00:08:06,930
And finally, a time instance de six threat B first reads the volatile variable and it then reads X

119
00:08:07,620 --> 00:08:08,640
with that thread.

120
00:08:08,670 --> 00:08:13,500
B gets to see the most recent values of both V and X.

121
00:08:14,100 --> 00:08:20,910
So as you can see by reading volatile variable thread, B is also able to see the most recent value

122
00:08:20,910 --> 00:08:21,660
of X.

123
00:08:22,500 --> 00:08:23,730
So that's about it.

124
00:08:23,760 --> 00:08:26,340
We now understand what volatile variable is.

125
00:08:26,370 --> 00:08:28,440
It guarantees memory, visibility.

126
00:08:28,860 --> 00:08:34,710
Synchronization, on the other hand, guarantees both memory visibility as well as atomic automaticity.

127
00:08:35,440 --> 00:08:40,179
Now in less than 30 seconds, let's do a quick demo of the stop thread program.

128
00:08:42,880 --> 00:08:48,790
Here is the new class stop thread and it has been added to the concurrency package and we can see the

129
00:08:48,820 --> 00:08:53,200
stop variable here and it is declared as volatile and everything else is the same.

130
00:08:53,200 --> 00:08:58,390
We have two threads, the main thread and the second thread and we have the anonymous class here.

131
00:08:58,630 --> 00:09:02,320
So the main thread after about 1/2 it is setting stop to true.

132
00:09:02,590 --> 00:09:04,630
And then here the second thread.

133
00:09:04,930 --> 00:09:08,380
As soon as it sees stop as true, it is going to terminate.

134
00:09:08,530 --> 00:09:11,140
So let me go ahead and run this.

135
00:09:12,090 --> 00:09:13,830
It's running or now it's done.

136
00:09:14,220 --> 00:09:15,370
So that's about it.

137
00:09:15,390 --> 00:09:21,090
You can go ahead and you can also download this program from resources section and you can remove the

138
00:09:21,090 --> 00:09:24,900
volatile keyword here and you can try playing with the program.

139
00:09:25,320 --> 00:09:26,430
So that's about it.

140
00:09:26,460 --> 00:09:28,470
Thank you and happy coding.

