WEBVTT
1
00:00:02.110 --> 00:00:02.940
Hello there.

2
00:00:02.950 --> 00:00:04.019
This is the new Le Roux.

3
00:00:04.030 --> 00:00:04.840
And welcome back.

4
00:00:05.140 --> 00:00:11.920
So in the last lecture, we looked at constructor overloading and we had these two overloaded constructors

5
00:00:12.130 --> 00:00:18.640
and this particular constructor was delegating the control to the second constructor to initialize the

6
00:00:18.640 --> 00:00:19.360
variables.

7
00:00:19.900 --> 00:00:27.370
Now here the delegation was happening from the constructor, which had fewer number of constructor parameters.

8
00:00:28.060 --> 00:00:35.290
This one has only three, four, five, six and seven parameters, and this one has eight four, five,

9
00:00:35.290 --> 00:00:36.400
six, seven, eight.

10
00:00:36.910 --> 00:00:43.120
So the delegation was happening from the constructor having fewer number of constructor parameters,

11
00:00:43.540 --> 00:00:47.010
but the delegation can also happen in the reverse order.

12
00:00:47.020 --> 00:00:53.890
So we can also delegate from this constructor to this constructor in order to initialize the variables.

13
00:00:54.370 --> 00:01:00.610
But typically, the convention seems to be that you would always delegate from the constructor having

14
00:01:00.610 --> 00:01:03.100
fewer number of constructor parameters.

15
00:01:03.730 --> 00:01:05.530
But we can also do it the other way.

16
00:01:05.530 --> 00:01:08.860
But this seems to be the normal convention.

17
00:01:09.220 --> 00:01:17.560
And when this happens, we would refer to this as the primary constructor, because it is initializing

18
00:01:17.560 --> 00:01:20.170
the most number of instance variables.

19
00:01:20.590 --> 00:01:25.480
So when the delegation happens in this way, we are considering this as the primary constructor.

20
00:01:25.840 --> 00:01:32.560
So here in this lecture, I just wanted to show the other scenario also where we can delegate from this

21
00:01:32.560 --> 00:01:37.570
constructor to this particular constructor, and the result would be just the same.

22
00:01:37.570 --> 00:01:39.100
So let's just do that.

23
00:01:39.700 --> 00:01:41.110
So let me comment this one.

24
00:01:42.130 --> 00:01:45.160
And let's move all of these variables.

25
00:01:47.480 --> 00:01:48.030
Okay.

26
00:01:48.500 --> 00:01:50.720
And let's take this.

27
00:01:54.090 --> 00:01:57.990
And all we need to do is we just need to remove this one.

28
00:01:59.000 --> 00:01:59.450
Right.

29
00:02:00.480 --> 00:02:00.990
So that's it.

30
00:02:00.990 --> 00:02:03.960
And the rest of the logic is just the same.

31
00:02:05.540 --> 00:02:08.389
So let's go ahead and compile and execute this.

32
00:02:08.930 --> 00:02:10.789
I'm here in the basics directory.

33
00:02:13.980 --> 00:02:19.390
So it is printing the output for only the last two students who are international students.

34
00:02:19.410 --> 00:02:21.720
So let's look at the statements once again.

35
00:02:21.990 --> 00:02:28.890
So for the first student who is John, we are invoking the first constructor and the state is getting

36
00:02:28.890 --> 00:02:34.350
initialized, but we are not printing the state because there are no print statements here.

37
00:02:34.830 --> 00:02:40.260
Now, for the second and the third, we are invoking the second constructor.

38
00:02:40.950 --> 00:02:45.840
And the first thing that happens is we are delegating the control to this particular constructor and

39
00:02:45.840 --> 00:02:50.720
all of these variables get initialized, then the rest of the logic will execute.

40
00:02:50.730 --> 00:02:53.220
And finally, we have the print statements.

41
00:02:53.580 --> 00:02:57.450
So after the delegation happens, these variables are getting initialized.

42
00:02:57.450 --> 00:03:02.610
Then the control comes back to this constructor and the execution starts from here.

43
00:03:03.240 --> 00:03:10.320
So we can see the output for the second and the third student objects, which are Raje and Anita.

44
00:03:10.800 --> 00:03:17.790
So just wanted to show this that this is also possible, although typically you would have it this way.

45
00:03:17.820 --> 00:03:19.350
So let me just.

46
00:03:21.200 --> 00:03:22.190
Copy it back.

47
00:03:25.260 --> 00:03:26.870
So this is how it would be.

48
00:03:26.880 --> 00:03:34.080
I normally you would have you can have three or four overloaded constructors and all of them might invoke

49
00:03:34.080 --> 00:03:36.570
this particular primary constructor.

50
00:03:36.780 --> 00:03:41.520
And since they have fewer number of parameters, they would pass some default.

51
00:03:41.520 --> 00:03:45.690
Like in this case, this particular constructor is passing is false.

52
00:03:46.530 --> 00:03:52.860
So just wanted to show that this scenario is also possible where we are going to invoke from this constructor

53
00:03:52.860 --> 00:03:55.110
to this particular constructor.

54
00:03:55.530 --> 00:03:56.240
So that's it.

55
00:03:56.250 --> 00:03:56.730
Thank you.

56
00:03:56.730 --> 00:03:58.230
And I will see you in the next lecture.

