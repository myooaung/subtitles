1
00:00:01,850 --> 00:00:02,600
Hi there.

2
00:00:02,630 --> 00:00:03,790
This is the row.

3
00:00:04,160 --> 00:00:10,100
In the last lecture, we saw that we could not interrupt indexer threats that were waiting on intrinsic

4
00:00:10,100 --> 00:00:10,580
locks.

5
00:00:10,880 --> 00:00:14,540
That is the locks that come with synchronized methods and synchronized statements.

6
00:00:14,990 --> 00:00:20,840
In this lecture, we will see how that can be addressed by using explicit locks that were introduced

7
00:00:20,840 --> 00:00:21,760
in Java five.

8
00:00:22,460 --> 00:00:26,870
It's an advanced topic and translating on such locks are interoperable.

9
00:00:28,560 --> 00:00:33,190
Let's begin by looking at a common way of using explicit locks like synchronised.

10
00:00:33,210 --> 00:00:38,730
They are also used for controlling access to shared resources by multiple threats.

11
00:00:39,680 --> 00:00:46,310
Here we have the raw interface from the package java dot dot com current dot locks and re-enter and

12
00:00:46,310 --> 00:00:50,780
lock is a class from the same package which implements the lock interface.

13
00:00:51,680 --> 00:00:54,740
Next lock is acquired by invoking the lock method.

14
00:00:55,310 --> 00:01:01,640
Then we have some critical section guarded by the lock, and at the end we release the lock in a final

15
00:01:01,640 --> 00:01:04,430
block by invoking the unlock method.

16
00:01:04,910 --> 00:01:10,130
Now, if unlock is not done in a final block, then lock will never be released.

17
00:01:10,160 --> 00:01:12,860
If an exception is thrown in the critical section.

18
00:01:13,220 --> 00:01:18,560
And that would be dangerous as there can be other threads waiting for the lock to be released.

19
00:01:18,920 --> 00:01:22,250
So it is critical to release the lock in a final block.

20
00:01:23,140 --> 00:01:28,510
Not that with intensive clocks they are automatically released when we exit the synchronize clocks.

21
00:01:28,960 --> 00:01:34,090
So we need to be careful not to forget unlocking when it comes to explicit clocks.

22
00:01:35,760 --> 00:01:37,320
And here is the lock interface.

23
00:01:37,740 --> 00:01:44,640
The lock method, as we saw in previous slide, is used for acquiring a lock lock interrupt really is

24
00:01:44,640 --> 00:01:51,180
what we need to fix the issue in the previous demo and by invoking it a thread would acquire the lock

25
00:01:51,210 --> 00:01:56,100
unless the thread is interrupted or if the lock is not available.

26
00:01:57,100 --> 00:02:02,980
Basically, if a thread is waiting for a lock by invoking this method, then it can be interrupted by

27
00:02:02,980 --> 00:02:05,470
another thread by invoking the interrupt method.

28
00:02:05,980 --> 00:02:09,070
With that, interrupted exception is thrown on the current threads.

29
00:02:09,070 --> 00:02:11,020
Interrupted status is cleared.

30
00:02:11,930 --> 00:02:18,410
Not that destroying of interrupted reception and resetting interrupted status will also happen if interrupt

31
00:02:18,410 --> 00:02:25,700
method has already been invoked on this thread and then subsequently this method lock interrupt is invoked.

32
00:02:26,680 --> 00:02:28,300
Next is Troy Locke method.

33
00:02:28,420 --> 00:02:31,750
Here the Locke is acquired only if it is available.

34
00:02:32,110 --> 00:02:35,200
If available, Locke is acquired and the truth is returned.

35
00:02:35,500 --> 00:02:39,640
Otherwise, if false is returned and the method returns immediately.

36
00:02:40,370 --> 00:02:44,240
Next is the timed version of trilogue, as you may have guessed.

37
00:02:44,270 --> 00:02:51,200
Lock is acquired if it is free within a given waiting time, and the current threat has also not been

38
00:02:51,200 --> 00:02:51,920
interrupted.

39
00:02:52,220 --> 00:02:58,040
So the waiting time is specified as the first parameter and the unit of waiting time is the second parameter.

40
00:02:58,460 --> 00:03:03,460
If the waiting time elapses and lock cannot be acquired, then this method returns.

41
00:03:03,470 --> 00:03:07,250
A false and false is also returned if the lock is not available.

42
00:03:08,130 --> 00:03:11,130
Not that like Locke interrupted method.

43
00:03:11,130 --> 00:03:14,190
This method is also responsive to interruption.

44
00:03:15,010 --> 00:03:18,370
Next is the unlock method, which, as we know, releases the lock.

45
00:03:19,000 --> 00:03:26,020
Now one thing to note is that there is this concept of acquisition count or hold count associated with

46
00:03:26,020 --> 00:03:31,180
each lock, regardless of whether the lock is intrinsic or re entrant explicit lock.

47
00:03:31,900 --> 00:03:38,410
If a thread acquires the lock by invoking the lock method or entering a synchronised block, then the

48
00:03:38,410 --> 00:03:40,420
whole count would be set to one.

49
00:03:41,420 --> 00:03:46,760
Now, if the same thread holding the lock invokes the lock method once again, or if it enters another

50
00:03:46,760 --> 00:03:51,890
synchronized method in case of intrinsic locks, then the whole code would be incremented by one.

51
00:03:52,670 --> 00:03:58,100
Similarly, if the thread invokes the unlock method or exerts a synchronised block, then hold count

52
00:03:58,100 --> 00:03:59,660
would be prevented by one.

53
00:04:00,020 --> 00:04:03,920
And when our whole count reaches zero, then the lock would be released.

54
00:04:04,790 --> 00:04:07,460
The thought is entrenched logic in place.

55
00:04:07,490 --> 00:04:13,760
A thread having a lock cannot enter another synchronized block that uses the same lock.

56
00:04:14,570 --> 00:04:22,070
Finally invoking the method new condition on the lock object will return an instance of condition which

57
00:04:22,070 --> 00:04:29,180
is also another interface and jabber dot dot concurrent dot locks package like the weight method.

58
00:04:29,210 --> 00:04:35,660
A condition object allows one thread to suspend execution until notified by another thread.

59
00:04:36,400 --> 00:04:42,610
So a condition is a replacement for object methods such as weight notify and notify all.

60
00:04:42,760 --> 00:04:47,410
And it includes methods such as a weight signal and signal all.

61
00:04:48,580 --> 00:04:51,490
Later in the demo we will see how we can use condition object.

62
00:04:53,350 --> 00:05:00,670
Note that clauses implementing lock interface must provide the same memory visibility semantics as intrinsic

63
00:05:00,670 --> 00:05:01,270
locks.

64
00:05:01,810 --> 00:05:04,450
So that's a requirement from the specification.

65
00:05:06,300 --> 00:05:11,490
In the first slide, we instantiated three entrant lock and it has these two constructors.

66
00:05:11,910 --> 00:05:16,050
The second constructor includes a boolean parameter called Fair.

67
00:05:17,760 --> 00:05:23,940
And if we pass it through for this parameter, it means that threats get access to the lock in the order

68
00:05:23,940 --> 00:05:25,320
in which they requested it.

69
00:05:26,860 --> 00:05:32,590
And if we pass a false, then it means that threats may not get access to the lock in the order in which

70
00:05:32,590 --> 00:05:33,430
they are requested.

71
00:05:34,060 --> 00:05:40,210
That is, if a threat requests a lock and if at that instance of time the lock is available, then the

72
00:05:40,210 --> 00:05:41,290
threat gets the lock.

73
00:05:41,320 --> 00:05:44,860
Even if there are other threats already waiting for that lock.

74
00:05:45,830 --> 00:05:50,930
However, if the rock is already taken, then the thread has to join the queue behind other waiting

75
00:05:50,930 --> 00:05:51,470
threads.

76
00:05:51,920 --> 00:05:54,620
By default, fairness option is false.

77
00:05:55,040 --> 00:06:00,920
So invoking the first constructor, which does not have any parameters, is equivalent to invoking the

78
00:06:00,920 --> 00:06:03,560
second constructor with false argument.

79
00:06:05,090 --> 00:06:10,610
Now naturally having unfair option as the default option sounds kind of unethical.

80
00:06:11,610 --> 00:06:15,750
But practically due to performance reasons, it is perfectly fine.

81
00:06:16,320 --> 00:06:21,090
Creating fair locks comes with the overhead of threat, suspension and resumption.

82
00:06:21,690 --> 00:06:27,030
That is, if a threat requests a lock and if lock is available, then suspending that threat just so

83
00:06:27,030 --> 00:06:32,550
that some other waiting threat gets that lock upon resumption affects the performance.

84
00:06:33,410 --> 00:06:39,980
Practically speaking, it seems that it is good enough as long as a blocking thread gets its lock at

85
00:06:39,980 --> 00:06:41,300
some point of time.

86
00:06:42,110 --> 00:06:47,940
On the exception when fairness option could be good is when the locks are held for a relatively long

87
00:06:47,940 --> 00:06:48,390
time.

88
00:06:50,010 --> 00:06:54,900
Finally note that intrinsic locks also do not make any fairness guarantees.

89
00:06:55,410 --> 00:06:57,990
So unfairness seems to be fine here.

90
00:06:59,800 --> 00:07:01,900
Next is the time to address this question.

91
00:07:01,900 --> 00:07:05,140
Should we prefer re entrant or intrinsic loss?

92
00:07:06,140 --> 00:07:10,550
It is recommended to use intrinsic as they are familiar and are widely used.

93
00:07:12,080 --> 00:07:16,300
Also intrinsic locks are automatically released with explicit locks.

94
00:07:16,310 --> 00:07:21,740
You may forget to release the lock and that would be dangerous, as we may have other threads waiting

95
00:07:21,740 --> 00:07:24,260
for it and they would be waiting forever.

96
00:07:26,070 --> 00:07:32,040
Next performance wise to intrinsic locks seem to be almost as good as re entrant locks.

97
00:07:33,400 --> 00:07:39,130
However, in Java five, performance wise re intent blocks are much better than intrinsic locks.

98
00:07:39,820 --> 00:07:46,030
In Java six, the algorithm for managing intrinsic clocks has been improved due to which there is not

99
00:07:46,030 --> 00:07:47,470
much difference between the two.

100
00:07:48,370 --> 00:07:51,310
Now here I'm only specifying the Java six.

101
00:07:51,310 --> 00:07:57,690
And that's because this material, this fact comes from the Java Concurrency in practice book.

102
00:07:57,910 --> 00:08:02,200
And that book was released at around the time that Java six was released.

103
00:08:02,380 --> 00:08:08,470
So that's why I specify only Java six, but I'm pretty sure this also holds for other Java versions.

104
00:08:09,970 --> 00:08:15,670
Finally you can go for re entrant locks if you need additional features like threat interruption while

105
00:08:15,670 --> 00:08:19,090
waiting for a lock, which is what we'll be seeing in our demo.

106
00:08:20,910 --> 00:08:27,900
Also note that with a re entrant lock, just like in the case of intrinsic logs, what we get is a standard

107
00:08:27,900 --> 00:08:32,010
mutual exclusion log that is only one thread at a time.

108
00:08:32,010 --> 00:08:33,240
Gets to hold the log.

109
00:08:34,650 --> 00:08:40,919
But this logging strategy is conservative when we consider certain safe scenarios where it is okay for

110
00:08:40,919 --> 00:08:43,799
multiple threads to hold the lock at the same time.

111
00:08:45,430 --> 00:08:51,070
For instance, we can have a shared resource that can be accessed by either multiple reader threads

112
00:08:51,100 --> 00:08:53,750
or a single writer thread, but not both.

113
00:08:54,370 --> 00:09:00,250
For this case, where multiple threads can read at the same time, the mutual exclusion locking strategy

114
00:09:00,250 --> 00:09:02,500
of re-enter and lock will not work.

115
00:09:03,130 --> 00:09:05,170
So we need better concurrency here.

116
00:09:06,860 --> 00:09:13,540
And that can be achieved via a read write log which is also from Java dot dot com current dot locks

117
00:09:13,550 --> 00:09:14,270
package.

118
00:09:14,930 --> 00:09:19,850
To read critical data, you would first acquire a read lock by invoking the block method.

119
00:09:20,270 --> 00:09:25,100
Similarly, to modify data, you would acquire a write log by invoking the right block method.

120
00:09:27,110 --> 00:09:27,500
The class.

121
00:09:27,500 --> 00:09:31,220
Implementing this interface is free and current read write lock.

122
00:09:31,790 --> 00:09:34,460
So you would create an instance of this lock.

123
00:09:34,880 --> 00:09:41,000
So the earlier lock class that we have seen was just re entrant lock and this is re entrant read, right

124
00:09:41,000 --> 00:09:41,420
lock.

125
00:09:41,990 --> 00:09:46,760
I think if you're interested, you can read more about it from this class API specification.

126
00:09:47,550 --> 00:09:48,860
Now, that's about the theory part.

127
00:09:48,890 --> 00:09:51,800
Let's go ahead and look at what we have learned in action.

128
00:09:54,310 --> 00:09:57,510
This is the way notify with incomplete interruption.

129
00:09:57,520 --> 00:10:00,700
So this was the class that we have seen in the previous demo.

130
00:10:01,450 --> 00:10:07,960
So we said that one limitation of this particular class is if a thread is waiting here in the indexer.

131
00:10:09,420 --> 00:10:12,900
If the threads are waiting here for an intrinsic lock.

132
00:10:13,050 --> 00:10:14,950
So in that case, we cannot interrupt.

133
00:10:15,060 --> 00:10:15,270
Right.

134
00:10:15,270 --> 00:10:18,270
So that was the reason why we are in this lecture.

135
00:10:18,270 --> 00:10:19,940
So we are looking at explicit locks.

136
00:10:19,950 --> 00:10:25,590
So what I have done is I have copied this entire code into this new class, called us explicit locks

137
00:10:25,590 --> 00:10:28,500
with interruption because we are dealing with explicit locks.

138
00:10:28,590 --> 00:10:34,650
And I already extended this class to some extent, and we will also write some code to fix the issue.

139
00:10:34,800 --> 00:10:40,830
So this is the new class and we are just instantiating it here in the main method, explicit locks with

140
00:10:40,830 --> 00:10:41,610
interruption.

141
00:10:41,940 --> 00:10:45,900
So let's just go ahead and look at some changes that I have already made.

142
00:10:46,380 --> 00:10:52,320
So here in the go method, in the Go method, we are iterating through each of the web lengths.

143
00:10:52,320 --> 00:10:55,230
So what we need is a lock, right?

144
00:10:55,230 --> 00:10:59,910
So we are creating this lock instance here, new entrant lock.

145
00:11:00,150 --> 00:11:06,810
And if you recall in the lecture I mentioned that if we invoke new condition, then that would return

146
00:11:06,810 --> 00:11:12,120
a condition condition object so that I'm calling it as page condition.

147
00:11:12,510 --> 00:11:14,850
So these are the two things that I have added.

148
00:11:14,880 --> 00:11:19,320
And in the constructor earlier we were only passing Weblink.

149
00:11:19,320 --> 00:11:22,350
Now we will actually pass lock and page condition.

150
00:11:22,680 --> 00:11:28,920
Just notice here that this page condition is actually coming from from the lock itself.

151
00:11:29,220 --> 00:11:35,490
So using the lock object we are generating this page condition and we will look a little bit more about

152
00:11:35,490 --> 00:11:36,930
this condition in the demo tool.

153
00:11:37,290 --> 00:11:43,740
So we are passing these to new objects, lock and page condition to both downloader as well as indexer.

154
00:11:44,610 --> 00:11:47,610
And the rest of the code here is just the same one.

155
00:11:47,610 --> 00:11:53,670
We are just adding the the two threads to this two array lists one for downloader threads, the other

156
00:11:53,670 --> 00:11:54,600
for indexer threads.

157
00:11:54,600 --> 00:11:59,790
And we are just starting them here and we are waiting for 500 milliseconds.

158
00:12:00,390 --> 00:12:06,030
Earlier I think it was 1/2, so I reduced it to find it milliseconds half a second.

159
00:12:06,240 --> 00:12:08,640
And we are also doing the same thing.

160
00:12:08,730 --> 00:12:15,030
If the time is up we then we want to interrupt the downloader threads, right?

161
00:12:15,030 --> 00:12:20,370
So we are using this as a live method and for interruption we are just invoking the interrupt only on

162
00:12:20,370 --> 00:12:21,660
the indexer thread.

163
00:12:22,110 --> 00:12:28,920
So we are iterating iterating through both the thread list through both the URLs, but we are invoking

164
00:12:28,920 --> 00:12:36,510
only interrupt on the indexer thread and that using that interrupt, we are indirectly going to interrupt

165
00:12:36,510 --> 00:12:37,380
the download thread.

166
00:12:37,380 --> 00:12:39,450
So that was all in the previous demo.

167
00:12:40,920 --> 00:12:42,900
Now here in the constructors.

168
00:12:43,720 --> 00:12:47,410
So since we are passing lock on page condition, so we need to initialize them.

169
00:12:47,410 --> 00:12:52,960
So we have two variables here and we are initializing them and the same thing happens here also in the

170
00:12:53,530 --> 00:12:54,550
downloader thread.

171
00:12:54,550 --> 00:12:56,470
So okay, so it's just the exact same thing.

172
00:12:56,470 --> 00:13:00,640
Lock on page condition being invoked here in the in the in the constructor.

173
00:13:00,970 --> 00:13:03,880
Now let's go back to the indexer thread.

174
00:13:04,090 --> 00:13:09,550
So previously we just have this code, say a synchronized or web link.

175
00:13:10,300 --> 00:13:14,980
So the web link has a single lock and that is the intrinsic lock.

176
00:13:14,980 --> 00:13:20,080
So any thread that is coming here has to acquire that lock in order to enter the synchronized block.

177
00:13:20,410 --> 00:13:24,880
And if HTML page is equal to null, then we need to relinquish the lock.

178
00:13:25,210 --> 00:13:30,700
So that is achieved by invoking the wait method on the same web link object because we are supposed

179
00:13:30,700 --> 00:13:38,170
to release that same lock and that would be possible only if we invoke wait method on this particular

180
00:13:38,260 --> 00:13:43,390
web link object, which is the object that is used here in the synchronized.

181
00:13:44,290 --> 00:13:45,460
So that's one thing.

182
00:13:45,490 --> 00:13:51,880
So web link object is the common thing between synchronized between here or here when acquiring as well

183
00:13:51,880 --> 00:14:00,880
as when releasing as well as in the downloader thread here to enter the synchronize block and also for

184
00:14:00,880 --> 00:14:03,460
notifying ET once the downloader.

185
00:14:03,490 --> 00:14:07,180
Once the download process is complete, even here we are using the web link.

186
00:14:07,330 --> 00:14:13,510
So because that's the common lock and we should do the same thing for for the explicit lock too.

187
00:14:13,810 --> 00:14:21,160
So we would, we would enter the explicit lock, then we would invoke the, the await method in the

188
00:14:21,160 --> 00:14:22,000
condition.

189
00:14:22,330 --> 00:14:26,710
And the condition is already generated from the lock use by invoking the new condition.

190
00:14:27,160 --> 00:14:32,170
And we need to instead of notify there is a method called signal and we need to use that.

191
00:14:32,440 --> 00:14:37,510
So it has to be tied to the same lock, regardless of whether it is intrinsic lock or whether it is

192
00:14:37,510 --> 00:14:38,440
explicit lock.

193
00:14:39,040 --> 00:14:40,270
So I think that's good enough.

194
00:14:40,270 --> 00:14:42,640
Now let's go ahead and make the changes that we need to make.

195
00:14:43,240 --> 00:14:45,760
So let's go ahead and begin with the index thread here.

196
00:14:45,760 --> 00:14:47,890
So we don't need this synchronized anymore.

197
00:14:47,890 --> 00:14:49,090
So let's.

198
00:14:50,150 --> 00:14:50,990
Do that.

199
00:14:52,610 --> 00:14:58,010
So let's comment that out and let's so we already have the lock variable.

200
00:14:58,920 --> 00:15:04,560
So the earlier the disadvantage was that we were not able to interrupt this particular any threats waiting

201
00:15:04,560 --> 00:15:09,380
here we say lock lock uninterruptedly.

202
00:15:09,390 --> 00:15:11,040
Right, because lock interrupted.

203
00:15:11,430 --> 00:15:14,730
So that is what will help us to interrupt this threat.

204
00:15:14,910 --> 00:15:15,660
Now.

205
00:15:16,630 --> 00:15:23,540
Let's put it finally here, because the most important thing is to unlock it, right?

206
00:15:23,560 --> 00:15:27,160
If you're not unlocking, then that's going to be dangerous because.

207
00:15:28,140 --> 00:15:29,760
Other threads waiting for this.

208
00:15:30,700 --> 00:15:31,960
We'll be waiting forever.

209
00:15:32,860 --> 00:15:33,610
So that's one thing.

210
00:15:33,610 --> 00:15:34,810
So that's taken care of.

211
00:15:35,380 --> 00:15:39,670
Now, here, let me comment this.

212
00:15:41,060 --> 00:15:44,720
And let's invoke the condition.

213
00:15:45,050 --> 00:15:47,300
Condition was named as page condition.

214
00:15:47,570 --> 00:15:49,340
It's the variable that we have used.

215
00:15:49,820 --> 00:15:52,010
And let's say a weight.

216
00:15:52,670 --> 00:15:58,370
So just the weight method is replaced with a weight method and we are doing it on page condition.

217
00:15:58,600 --> 00:15:58,970
Okay.

218
00:15:59,060 --> 00:16:00,650
So that's what we need to do.

219
00:16:00,680 --> 00:16:01,880
So very simple.

220
00:16:02,540 --> 00:16:09,770
Now, one other thing that we need to do here is if an interrupted exception is generated because let's

221
00:16:09,770 --> 00:16:11,270
say a thread is waiting here.

222
00:16:12,380 --> 00:16:14,120
If we invoke the interrupt method.

223
00:16:14,270 --> 00:16:19,790
So it would generate an interrupted exception, in which case the thread does not have the lock.

224
00:16:20,300 --> 00:16:20,870
So this.

225
00:16:20,870 --> 00:16:27,200
And if you invoke unlock in that case, then we will get an exception called illegal monitor exception.

226
00:16:27,290 --> 00:16:28,370
Let's look at it here.

227
00:16:28,370 --> 00:16:29,980
I think it's not showing it here.

228
00:16:29,990 --> 00:16:31,970
So that word exception will be generated.

229
00:16:31,970 --> 00:16:38,840
So you would invoke this method only if you have if you're in possession of the lock, but if an exception

230
00:16:38,840 --> 00:16:41,390
is generated, then you it means that you do not have the lock.

231
00:16:42,080 --> 00:16:48,350
So we need to one thing we need to do is if an interrupted exception is generated, if you recall,

232
00:16:48,350 --> 00:16:54,380
what is happening is the interrupted status is cleared, which means it is made false.

233
00:16:54,710 --> 00:16:57,710
So what we need to do is we need to make it true once again.

234
00:16:57,860 --> 00:17:01,520
And if it is true, we need not unlock, right?

235
00:17:01,520 --> 00:17:02,750
Because there is no lock.

236
00:17:03,200 --> 00:17:05,690
So we need to set the interrupter status to true.

237
00:17:05,810 --> 00:17:11,660
And the way we would do it is by invoking the interrupt method once again.

238
00:17:16,960 --> 00:17:17,230
Okay.

239
00:17:17,230 --> 00:17:17,440
So.

240
00:17:17,760 --> 00:17:21,369
So if you are coming here, it means that interrupted an interruption has happened.

241
00:17:21,970 --> 00:17:25,089
But then the interpreter status is also reset.

242
00:17:25,089 --> 00:17:26,740
So we need to set it again.

243
00:17:26,740 --> 00:17:32,080
And if we set it again in the final block, we will have this condition.

244
00:17:35,820 --> 00:17:37,650
So is interrupted would be true.

245
00:17:38,040 --> 00:17:42,730
And if it is true, it means that we should not invoke this method only if it is false.

246
00:17:42,750 --> 00:17:45,120
We would invoke this only if it is false.

247
00:17:45,120 --> 00:17:51,450
It means that we executed the critical section successfully and so we have the log and we are supposed

248
00:17:51,450 --> 00:17:52,470
to unlock it.

249
00:17:52,800 --> 00:17:55,360
So that's one thing that we have to do here.

250
00:17:55,380 --> 00:17:57,170
So that's about it on this end.

251
00:17:57,180 --> 00:17:59,490
Now let's head over to the download thread.

252
00:17:59,760 --> 00:18:00,720
In the download thread.

253
00:18:00,720 --> 00:18:01,830
Also we have this.

254
00:18:05,660 --> 00:18:05,930
Okay.

255
00:18:06,020 --> 00:18:07,790
So synchronized is closed.

256
00:18:08,390 --> 00:18:11,480
Now the lock statement can be here.

257
00:18:11,480 --> 00:18:13,270
It need not be within the block.

258
00:18:13,310 --> 00:18:18,590
In the other thread we had within the tree block because there we were, we were invoking lock interrupt

259
00:18:18,800 --> 00:18:21,140
method which could throw an interrupted exception.

260
00:18:22,030 --> 00:18:23,530
So here, we don't need that.

261
00:18:23,530 --> 00:18:26,710
So we can just invoke this lock method.

262
00:18:27,280 --> 00:18:30,220
We don't have to interrupt this one and.

263
00:18:32,130 --> 00:18:38,580
So this is the background thread and we are using it to indirectly close this stop this thread by closing

264
00:18:38,580 --> 00:18:39,270
the stream.

265
00:18:39,570 --> 00:18:40,890
So here is a web link.

266
00:18:40,890 --> 00:18:43,290
So we don't need this anymore.

267
00:18:47,000 --> 00:18:47,930
Signal.

268
00:18:48,200 --> 00:18:50,600
So this is the method that we are going to invoke.

269
00:18:50,600 --> 00:18:52,760
So instead of notify, it's going to be signal.

270
00:18:53,600 --> 00:18:55,850
So that's that's all there is here.

271
00:18:56,330 --> 00:18:58,970
And now the interrupted is interruptible.

272
00:18:58,970 --> 00:19:00,320
So let's go ahead and run this.

273
00:19:02,070 --> 00:19:03,450
So it's done here.

274
00:19:04,810 --> 00:19:06,880
So here we are.

275
00:19:06,880 --> 00:19:10,030
The downloaded threats have kicked in and they're trying to download.

276
00:19:10,030 --> 00:19:12,340
In the meanwhile, since we have set it only for half.

277
00:19:12,340 --> 00:19:14,080
Second, the time is up.

278
00:19:14,080 --> 00:19:16,600
And so we need to we need to close them.

279
00:19:16,600 --> 00:19:17,800
We need to stop the threads.

280
00:19:17,980 --> 00:19:22,660
So here we are saying the downloaded thread with with the ID 2000 is still active.

281
00:19:22,660 --> 00:19:27,700
So we are stopping it and the way we are stopping yet as we are just invoking the interrupt method on

282
00:19:27,700 --> 00:19:33,070
the indexer thread and that is going to throw an end that's going to throw an exception, interrupted

283
00:19:33,070 --> 00:19:35,680
exception, because we are waiting here.

284
00:19:37,480 --> 00:19:42,550
Because we are waiting here on the LOC and an exception is being generated.

285
00:19:42,550 --> 00:19:49,360
And so we come here and we first stop the downloader thread in an indirect way by setting the stop status

286
00:19:49,360 --> 00:19:55,450
here and the background thread that we are spawning in the downloader thread is going to close the stream

287
00:19:55,450 --> 00:20:01,120
and that would trigger the stopping of the downloader thread that we have seen in the last thing.

288
00:20:01,120 --> 00:20:04,330
And this is the code that we have just added and we are just unlocking it.

289
00:20:04,330 --> 00:20:08,650
So that's what is happening here and we are doing the same thing for 2001, 2002.

290
00:20:08,650 --> 00:20:14,110
Also we are also interrupted and here for 2003 it's interrupted.

291
00:20:14,110 --> 00:20:19,120
But still the download process has was continuing and it has completed.

292
00:20:19,750 --> 00:20:25,450
So at the instance when we were trying to interrupt it at that same time itself, the download has completed

293
00:20:25,450 --> 00:20:26,470
but it is fine.

294
00:20:26,590 --> 00:20:30,310
So here it clearly says that we are closing the stream.

295
00:20:30,310 --> 00:20:33,370
So in the cleanup code we are invoking the set stop here.

296
00:20:33,490 --> 00:20:37,990
By doing that we are closing the stream in the background thread in the downloader thread.

297
00:20:38,230 --> 00:20:44,260
So we are closing the stream and because of that here we are saying it could not be downloaded because

298
00:20:44,260 --> 00:20:50,120
the stream has been closed and the same thing is happening for the other web links also between one

299
00:20:50,140 --> 00:20:50,980
and 2002.

300
00:20:51,130 --> 00:20:52,870
So that's how it is done.

301
00:20:52,870 --> 00:20:55,630
So Explicit Locks is helping us to interrupt.

302
00:20:55,660 --> 00:21:03,580
Now, the one thing I want to say is when we are invoking this synchronized Web link, so basically

303
00:21:04,180 --> 00:21:10,540
for this intrinsic lock, we just have one queue and all the threads that are trying to enter this block

304
00:21:10,540 --> 00:21:13,930
will be waiting in that queue, but with explicit locks.

305
00:21:13,930 --> 00:21:20,020
So we are generating the condition by invoking the new condition and essentially we can have more than

306
00:21:20,020 --> 00:21:21,400
one condition.

307
00:21:21,400 --> 00:21:28,480
So what that means is if we have more than one condition, each condition would correspond to one queue,

308
00:21:28,600 --> 00:21:31,600
which means that multiple threads can be waiting in those queues.

309
00:21:32,050 --> 00:21:37,540
So it need not be just one queue, as in the case of intrinsic lock, but it can be multiple queues

310
00:21:37,540 --> 00:21:42,580
and that let's just head over to the API dock of the condition class interface.

311
00:21:43,030 --> 00:21:48,730
Now a few seconds ago I mentioned that if a thread tries to enter a synchronised block and if the lock

312
00:21:48,730 --> 00:21:53,530
is not available, then it would wait in the queue corresponding to the intrinsic lock.

313
00:21:53,530 --> 00:21:57,040
So in our case we had synchronized off weblink.

314
00:21:57,040 --> 00:22:01,360
So weblink is an object and it has an intrinsic lock which is associated with its own queue.

315
00:22:01,360 --> 00:22:02,470
So that is right.

316
00:22:02,470 --> 00:22:06,310
But the queue that I was I wanted to refer was another queue.

317
00:22:06,340 --> 00:22:08,440
So it was a slight mistake from my end.

318
00:22:08,650 --> 00:22:14,200
Basically the weblink object also has the weight method which it inherits from the object class.

319
00:22:14,200 --> 00:22:14,770
Right.

320
00:22:14,770 --> 00:22:20,350
And the weight method is also associated with the queue and this queue is called as a condition queue

321
00:22:20,350 --> 00:22:25,900
because a thread would enter that particular queue because of some condition being true.

322
00:22:25,900 --> 00:22:30,550
So in our case the condition is while HTML page is equal to null.

323
00:22:30,640 --> 00:22:38,140
So in that situation the indexer thread will invoke the weight method and will wait in the queue corresponding

324
00:22:38,140 --> 00:22:38,980
condition queue.

325
00:22:39,160 --> 00:22:44,920
So because the page is not yet downloaded and it cannot index it so the condition has HTML pages equal

326
00:22:44,920 --> 00:22:50,830
to null is called as condition predicate and the queue in which it is waiting the thread is waiting

327
00:22:50,830 --> 00:22:57,160
is called as a condition queue and a different thread has to invoke the notify method in order for this

328
00:22:57,160 --> 00:23:01,060
thread to wake up and acquire the lock and do any subsequent actions.

329
00:23:01,870 --> 00:23:06,460
So there we had only a single condition queue and a single condition predicate.

330
00:23:06,490 --> 00:23:11,980
Now here let's look at an example here in this interface where we have multiple condition predicates

331
00:23:11,980 --> 00:23:14,110
and multiple condition objects.

332
00:23:14,560 --> 00:23:16,390
So here it's a bounded buffer.

333
00:23:16,390 --> 00:23:21,010
So it's basically a buffer which stores elements, but it is bounded, which means that we cannot have

334
00:23:21,010 --> 00:23:25,720
more we cannot add more elements than the specified bond, which is 100 in this case.

335
00:23:25,870 --> 00:23:30,850
And we have two methods put and take put is for inserting elements and take is for removing elements.

336
00:23:31,030 --> 00:23:34,450
And here there are two condition predicates.

337
00:23:34,450 --> 00:23:40,420
So if, if a thread tries to, wants to add an element so it gets into this method and if it sees this

338
00:23:40,420 --> 00:23:45,490
condition, it says that the buffer is full, in which case it cannot add.

339
00:23:45,490 --> 00:23:48,310
It has to wait until some space is available.

340
00:23:48,340 --> 00:23:53,860
So there is so this is a condition predicate and there is a condition object corresponding to it here

341
00:23:54,640 --> 00:23:57,070
and it would wait in the condition.

342
00:23:57,070 --> 00:24:02,680
Q Corresponding to this particular condition object when it says await the same thing happens here.

343
00:24:02,680 --> 00:24:07,990
If a thread enters the take method and if it finds that the buffer is empty, in that case it would

344
00:24:07,990 --> 00:24:14,950
enter the condition q of a different condition object and both the condition objects are are generated

345
00:24:14,950 --> 00:24:16,150
from the same block.

346
00:24:16,210 --> 00:24:18,400
So that's what, that's what we have here.

347
00:24:18,640 --> 00:24:25,660
And if a thread is waiting here because the buffer is empty now here, if an, if another thread is

348
00:24:25,660 --> 00:24:31,750
able to add an element, then it would invoke the signal method which would wake up this particular

349
00:24:31,750 --> 00:24:32,170
thread.

350
00:24:32,560 --> 00:24:36,460
We can also have multiple, multiple condition predicates, but a single.

351
00:24:36,830 --> 00:24:38,450
An object that's also possible.

352
00:24:38,480 --> 00:24:44,870
Now, the disadvantage with that kind of a setup is that because of unfair ordering, there is a chance

353
00:24:44,870 --> 00:24:51,380
that we can have trucks waiting on multiple condition predicates at the same time in the queue.

354
00:24:51,950 --> 00:24:58,370
And if we invoke and notify all or a signal all method, then one of the threads will be woken up and

355
00:24:58,370 --> 00:24:59,330
it will acquire the lock.

356
00:24:59,330 --> 00:25:03,520
But its condition predicate might not be false, it might still be true.

357
00:25:03,530 --> 00:25:05,870
And so it would once again go back into the state.

358
00:25:06,350 --> 00:25:07,940
So that's the disadvantage.

359
00:25:08,450 --> 00:25:14,420
But here we are invoking only the threats, waiting on a particular condition predicate.

360
00:25:14,420 --> 00:25:21,800
So that condition predicate will be false and it can do other actions and other subsequent actions.

361
00:25:22,010 --> 00:25:25,390
So we are going to invoke the wake of the right kind of threats.

362
00:25:25,400 --> 00:25:26,510
So that's one advantage.

363
00:25:26,510 --> 00:25:32,750
And the second advantage is we can invoke only the signal method rather than signal all if we have a

364
00:25:32,750 --> 00:25:35,400
condition object associated with each condition predicate.

365
00:25:35,420 --> 00:25:37,960
So we can invoke only a signal instead of signal.

366
00:25:37,970 --> 00:25:40,160
And signal is considered to be more efficient.

367
00:25:40,520 --> 00:25:41,360
So that's about it.

368
00:25:41,360 --> 00:25:44,770
So just wanted to explain that you can also read from here.

369
00:25:44,780 --> 00:25:47,540
So explosive locks are more advanced features.

370
00:25:47,540 --> 00:25:51,260
And one way that we have seen is it helps with interrupting.

371
00:25:51,260 --> 00:25:56,140
If you want to interrupt a waiting thread on a lock, then it is possible.

372
00:25:56,150 --> 00:25:57,350
So that's about it.

373
00:25:57,380 --> 00:25:58,970
Thank you and happy coding.

