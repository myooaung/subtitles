WEBVTT
1
00:00:02.050 --> 00:00:02.900
Hi there.

2
00:00:02.920 --> 00:00:04.059
This is the Ramona La Rue.

3
00:00:04.059 --> 00:00:04.990
And welcome back.

4
00:00:05.020 --> 00:00:11.260
Let's now look at the second version of the method, which we briefly discussed at the very end of the

5
00:00:11.260 --> 00:00:12.100
last lecture.

6
00:00:13.240 --> 00:00:18.280
This is the first version of the collect method and it takes three parameters and performs a mutable

7
00:00:18.280 --> 00:00:18.970
reduction.

8
00:00:19.270 --> 00:00:23.800
And the three parameters are supplier accumulator under combiner.

9
00:00:24.430 --> 00:00:27.580
And in this particular example, we are concatenating strings.

10
00:00:28.560 --> 00:00:29.700
Under the very end.

11
00:00:29.700 --> 00:00:34.410
We also looked at the second version of the collect method, which is a simplified version that takes

12
00:00:34.410 --> 00:00:39.420
a single parameter and also performs a similar operation of string concatenation.

13
00:00:39.750 --> 00:00:44.250
The second version returns a string, whereas the first version returns a string builder.

14
00:00:44.250 --> 00:00:49.080
So to get a string, we just need to invoke the two string method on the returned string builder.

15
00:00:49.500 --> 00:00:55.320
So the second version is taking a single parameter and it is called as a collector.

16
00:00:55.620 --> 00:00:59.130
So collectors are joining is going to return this collector.

17
00:00:59.160 --> 00:01:05.550
Collector is an interface in the Java string package which we know represents the stream API.

18
00:01:06.180 --> 00:01:12.240
So collectors are joining would return an instance of the collector interface and collector interface

19
00:01:12.240 --> 00:01:17.820
has a bunch of methods and the collect method would invoke those different methods in the collector

20
00:01:17.820 --> 00:01:21.480
instance in order to perform the mutable reduction.

21
00:01:22.170 --> 00:01:28.650
And those methods would return expressions that are similar to the method arguments which we see here

22
00:01:28.650 --> 00:01:30.090
in the first collect method.

23
00:01:30.800 --> 00:01:35.030
So in the first collect method we see a supplier, accumulator and a combiner.

24
00:01:35.270 --> 00:01:42.470
Similarly, the collector also has certain methods which would return a supplier, accumulator and a

25
00:01:42.470 --> 00:01:43.220
combiner.

26
00:01:43.790 --> 00:01:46.370
And collector also has a couple of more methods.

27
00:01:46.700 --> 00:01:55.970
And here the collectors class is essentially a helper class and it is helping in performing some predefined

28
00:01:55.970 --> 00:01:56.750
reductions.

29
00:01:56.990 --> 00:02:03.320
So joining is a predefined reduction, which is essentially about concatenating strings.

30
00:02:03.330 --> 00:02:05.540
So that's a predefined reduction.

31
00:02:05.780 --> 00:02:12.590
So joining would return an instance of collector which would perform that particular predefined reduction,

32
00:02:12.590 --> 00:02:14.180
which is string concatenation.

33
00:02:14.540 --> 00:02:19.670
Similarly, there is a method called tools which we have seen in one of the earlier lectures.

34
00:02:19.940 --> 00:02:25.550
And it returns a collector instance that would help in collecting the stream elements into a list.

35
00:02:26.060 --> 00:02:29.540
And in the next lecture, we will actually see it in action.

36
00:02:30.110 --> 00:02:33.110
So although we have seen it earlier, we are going to look at it one more time.

37
00:02:33.560 --> 00:02:37.010
And there are also other methods in the collectors class.

38
00:02:37.010 --> 00:02:43.580
So those are all static factory methods which would return different collector instances for performing

39
00:02:43.580 --> 00:02:45.110
different reductions.

40
00:02:46.740 --> 00:02:48.950
And here is the syntax for the two methods.

41
00:02:48.960 --> 00:02:50.970
The first one is taking three parameters.

42
00:02:50.970 --> 00:02:53.520
The second one is taking a single parameter collector.

43
00:02:53.730 --> 00:02:56.460
And now let's look at these type arguments here.

44
00:02:56.490 --> 00:02:59.490
T, A and r r is the container.

45
00:02:59.490 --> 00:03:01.140
So that's what is being retained.

46
00:03:02.600 --> 00:03:05.990
He is the type of the input stream element.

47
00:03:07.840 --> 00:03:10.570
On a here is the accumulator type.

48
00:03:10.930 --> 00:03:17.920
So in our string concatenation example, a would be string builder because that's the container into

49
00:03:17.920 --> 00:03:23.590
which we are accumulating and A is not present in the signature of the first method.

50
00:03:23.620 --> 00:03:28.540
And that's because Accumulator itself is part of the method signature itself.

51
00:03:28.540 --> 00:03:30.510
So it is a second parameter.

52
00:03:30.520 --> 00:03:37.570
And so we do not explicitly have the type argument a anywhere within the signature of the first method.

53
00:03:39.470 --> 00:03:46.100
And now let's look at the collector interface itself and collector as we just saw, as the method parameter

54
00:03:46.100 --> 00:03:48.500
of the second version of the collector method.

55
00:03:49.330 --> 00:03:57.070
And Collector is essentially a reduction operator and it helps in performing mutable accumulation of

56
00:03:57.070 --> 00:03:58.870
stream into a container.

57
00:03:59.050 --> 00:04:03.160
That's what the collect method does and collect is using the collector in order to do that.

58
00:04:03.430 --> 00:04:06.070
And like I said earlier, it has a bunch of methods.

59
00:04:06.400 --> 00:04:12.940
And one of them is a supplier method, which would help in creating the container which we are supposed

60
00:04:12.940 --> 00:04:13.540
to retain.

61
00:04:13.550 --> 00:04:16.180
So the supplier supplies the container.

62
00:04:16.180 --> 00:04:22.540
So there is the method for this and it returns an instance of a supplier functional interface.

63
00:04:23.230 --> 00:04:25.210
We will look at the return types shortly.

64
00:04:26.570 --> 00:04:31.730
And we also need an accumulator which accumulates the stream elements into the container.

65
00:04:32.240 --> 00:04:37.370
So this particular method would be invoked repetitively in order to perform the accumulation.

66
00:04:38.220 --> 00:04:44.250
Then there is a combiner which would combine to resolve containers, which would be the output of two

67
00:04:44.250 --> 00:04:45.420
different segments.

68
00:04:45.570 --> 00:04:49.500
And this, we know, comes into play when we are dealing with parallel streams.

69
00:04:50.650 --> 00:04:56.770
Finally there is something called Finisher, which, as the name implies, finishes the reduction and

70
00:04:56.770 --> 00:05:01.060
it can optionally transform the container object into something else.

71
00:05:01.420 --> 00:05:06.540
So we have the container, but sometimes we might want to transform that into something else.

72
00:05:06.550 --> 00:05:12.250
Like for instance, the container could be a string builder, but we would want to output a string.

73
00:05:12.250 --> 00:05:17.460
So in that case, that particular transformation logic would go into this particular method.

74
00:05:17.470 --> 00:05:20.380
So this method will allow us to do that transformation.

75
00:05:20.830 --> 00:05:27.760
And in many cases there may not be any such transformation, in which case the container itself will

76
00:05:27.760 --> 00:05:28.710
be returned.

77
00:05:30.360 --> 00:05:35.460
And these are the type parameters which we have seen earlier, D, E and r d is the type of the stream

78
00:05:35.460 --> 00:05:38.400
element and A is the accumulator type.

79
00:05:38.430 --> 00:05:42.990
In our example, it would be String Builder and R is the return type.

80
00:05:44.700 --> 00:05:47.250
And this is what the supplier method returns.

81
00:05:47.280 --> 00:05:53.850
It returns an instance of the supplier functional interface and the correct method would use the supplier

82
00:05:53.850 --> 00:05:56.280
in order to create a new container.

83
00:05:56.400 --> 00:06:04.380
And here it is, a supplier of a because we are going to create a container which is of type A like

84
00:06:04.380 --> 00:06:05.370
the string builder.

85
00:06:06.660 --> 00:06:08.370
Our next is Accumulator.

86
00:06:08.790 --> 00:06:12.990
Accumulator is a by consumer and it takes two parameters.

87
00:06:12.990 --> 00:06:20.010
One is the result container itself and the other is the stream element P so p would be accumulated into

88
00:06:20.010 --> 00:06:20.790
the container.

89
00:06:20.790 --> 00:06:27.390
So we have the consumer here and we know that consumer by consumer has a single method called accept,

90
00:06:27.390 --> 00:06:28.710
which returns a void.

91
00:06:28.920 --> 00:06:36.510
And that is fine here because we are going to simply mutate the input container by accumulating the

92
00:06:36.510 --> 00:06:38.490
stream element into the container.

93
00:06:40.060 --> 00:06:44.800
The Combiner window combines to resolve containers, so we need a binary operator.

94
00:06:44.800 --> 00:06:50.260
So the combined method would return a binary operator and the correct method would use the binary operator

95
00:06:50.260 --> 00:06:53.380
in order to combine the two result containers.

96
00:06:53.530 --> 00:06:57.010
So it is going to combine two A's and generate another A.

97
00:06:58.560 --> 00:07:04.770
Unfinished year, as we said earlier, is used to transform the container into something else.

98
00:07:04.980 --> 00:07:09.840
So it would transform the container, which is of type A into R.

99
00:07:10.230 --> 00:07:11.790
R would be the final output.

100
00:07:12.030 --> 00:07:16.230
And as we said earlier, sometimes we need to transform the container object into something else.

101
00:07:16.530 --> 00:07:23.160
And in some other cases we do not need any such transformation, in which case R and A would be same.

102
00:07:23.880 --> 00:07:25.800
So that's the character.

103
00:07:25.800 --> 00:07:32.160
And all of these methods are part of the collector interface and the collect method would invoke them

104
00:07:32.310 --> 00:07:38.250
and that's how it's going to perform something similar to the first version of the collect method.

105
00:07:38.250 --> 00:07:43.830
In the first version, we are explicitly specifying the different objects that we need in order to perform

106
00:07:43.830 --> 00:07:45.120
the mutable reduction.

107
00:07:46.990 --> 00:07:53.470
Now we spoke about the collectors class and we said that the collectors class would help in performing

108
00:07:53.470 --> 00:07:56.060
some typical predefined reductions.

109
00:07:56.080 --> 00:07:58.890
So these are the typical collections that can happen.

110
00:07:58.900 --> 00:08:03.610
So we have the collection, which means that we would like to collect the stream elements into something

111
00:08:03.610 --> 00:08:05.110
like a list or a set.

112
00:08:05.110 --> 00:08:07.380
And so there are some dedicated methods for that.

113
00:08:07.390 --> 00:08:12.760
Similarly, we might want to group the stream elements into a map so we have methods for that, and

114
00:08:12.760 --> 00:08:16.360
we might want to reduce or summarize the stream elements.

115
00:08:16.360 --> 00:08:21.850
So we might want to reduce the stream elements into a single value, or we might want to summarize the

116
00:08:21.850 --> 00:08:22.990
entire stream elements.

117
00:08:22.990 --> 00:08:24.880
And there are some dedicated methods for that.

118
00:08:26.420 --> 00:08:31.910
For instance, here, in order to perform the collection kind of operations, we have these methods

119
00:08:31.910 --> 00:08:34.460
to list, to set and to collection.

120
00:08:34.850 --> 00:08:37.730
So these methods we are going to look at in the next lecture.

121
00:08:38.030 --> 00:08:40.340
And so we are going to have a bunch of lectures.

122
00:08:40.340 --> 00:08:45.440
And in each of those lectures we are going to explore the different methods that fall under these different

123
00:08:45.440 --> 00:08:46.280
categories.

124
00:08:48.170 --> 00:08:54.050
If we want to group the stream elements into a map, then we can use these methods like to map grouping

125
00:08:54.050 --> 00:09:00.260
by and partitioning by, grouping by can be used to perform more complex level groupings.

126
00:09:00.260 --> 00:09:06.560
So for instance, to map can be used to generate a key and a value pair with grouping by the value can

127
00:09:06.560 --> 00:09:13.520
be more complicated so we can have something like a list or a set as a value and partitioning by is

128
00:09:13.520 --> 00:09:16.520
used to group the stream of elements into two groups.

129
00:09:17.960 --> 00:09:23.930
And these are the methods that fall under reducing and summarizing and they are self explanatory Macs

130
00:09:23.930 --> 00:09:27.380
by is used to find the max element among the stream elements.

131
00:09:27.470 --> 00:09:31.430
Summing end would be used to sum the elements of the stream.

132
00:09:31.760 --> 00:09:37.940
So for instance, if the stream elements, if they have some numeric field and if we want to add those

133
00:09:37.940 --> 00:09:43.880
numeric values across all of the stream elements, then we can make use of summing, end and averaging.

134
00:09:43.880 --> 00:09:50.990
It is similar to summing, but it would perform an average on summarizing and would generate a summary

135
00:09:50.990 --> 00:09:51.650
object.

136
00:09:51.860 --> 00:09:58.820
And that summary object will have a bunch of summary fields which would summarize the stream elements.

137
00:09:58.820 --> 00:10:03.650
And the summary fields can be something like some average maxima or minima.

138
00:10:04.160 --> 00:10:10.130
And joining we have already seen it is used for performing string concatenation and it's an overloaded

139
00:10:10.130 --> 00:10:10.520
method.

140
00:10:10.520 --> 00:10:12.650
So there are also other joining methods.

141
00:10:13.070 --> 00:10:16.880
So these methods help in performing predefined reductions.

142
00:10:17.090 --> 00:10:23.180
And so we do not have to use the first version of the method in order to perform such kinds of operations

143
00:10:23.180 --> 00:10:24.590
so they are all predefined.

144
00:10:24.920 --> 00:10:32.780
And in case F these methods do not satisfy your requirement, then you can implement a collector by

145
00:10:32.780 --> 00:10:33.320
yourself.

146
00:10:33.320 --> 00:10:38.600
So we can implement the collector interface and we can implement our own collector.

147
00:10:39.170 --> 00:10:40.340
So that's about it.

148
00:10:40.370 --> 00:10:41.030
Thank you.

149
00:10:41.030 --> 00:10:45.320
And in the subsequent lecture, we are going to explore some of these methods.

150
00:10:45.320 --> 00:10:49.130
And in fact in a series of lectures, we are going to explore most of these methods.

151
00:10:49.790 --> 00:10:51.560
Thank you and see you in the next lecture.

