1
00:00:02,160 --> 00:00:03,010
Hi there.

2
00:00:03,030 --> 00:00:09,870
This is the model group we briefly discussed string pull when introducing strings and we said that it

3
00:00:09,870 --> 00:00:16,350
was one of the features that made string special and that's because of the way String Literals get stored

4
00:00:16,350 --> 00:00:17,070
internally.

5
00:00:17,760 --> 00:00:19,650
Let's now look at string in detail.

6
00:00:19,890 --> 00:00:24,030
And so we will be looking at how JVM handles strings internally.

7
00:00:24,780 --> 00:00:30,240
At the end, we will also test the concepts using a simple demo, and it's an important lecture and

8
00:00:30,240 --> 00:00:31,530
an interesting one too.

9
00:00:31,710 --> 00:00:37,740
And many developers do not know about string pull, or even if they do, the understanding is generally

10
00:00:37,740 --> 00:00:38,640
not that clear.

11
00:00:40,270 --> 00:00:46,360
Let's begin by understanding how strings are stored internally by GM when created using string letters

12
00:00:46,360 --> 00:00:49,180
versus when created using the new keyword.

13
00:00:50,620 --> 00:00:54,280
First, let's look at the case when strings are created using string letters.

14
00:00:55,940 --> 00:01:01,820
If you recall, we said that all string literals are stored in a special area of memory called String

15
00:01:01,820 --> 00:01:02,240
Pool.

16
00:01:02,690 --> 00:01:05,750
In fact, within memory, string pool is actually part of heap.

17
00:01:06,080 --> 00:01:09,320
And we know that heap is where all objects reside.

18
00:01:09,830 --> 00:01:16,340
So string pool also includes objects, but only string objects that are created using string literals.

19
00:01:17,840 --> 00:01:22,280
And the string literals have the same content, then they share same storage in the string pool.

20
00:01:22,670 --> 00:01:27,170
This was also discussed earlier, but in the next slide we will look at it through an example.

21
00:01:28,780 --> 00:01:31,540
Next coming to strings created using the new keyword.

22
00:01:32,200 --> 00:01:36,550
These string objects are no different from regular java objects.

23
00:01:36,700 --> 00:01:39,760
That is the one heap but outside of string pull.

24
00:01:41,380 --> 00:01:44,890
And they get their own storage and do not share storage.

25
00:01:44,950 --> 00:01:51,400
Even if two string objects have the same content, let's look at an example to understand these differences.

26
00:01:53,160 --> 00:01:57,570
So here we have the heap and within heap we have string pool.

27
00:01:59,020 --> 00:02:02,940
Now later we have the statement where variable as one is assigned a string literal.

28
00:02:02,950 --> 00:02:03,430
Hello.

29
00:02:05,000 --> 00:02:08,210
Since we have a string Littrell as mentioned earlier.

30
00:02:08,210 --> 00:02:15,140
JB on what started it in the string pool by creating a string object and as one would reference it.

31
00:02:15,680 --> 00:02:20,900
So even though it's a literal internally, it is stored as a regular string object, but within the

32
00:02:20,900 --> 00:02:21,590
string pool.

33
00:02:22,880 --> 00:02:27,770
Next, let's say we have a variable as to which is also assigned with the same lateral flow.

34
00:02:28,340 --> 00:02:33,920
And we also know that if string letters have same content, they share same storage in the string pool.

35
00:02:35,240 --> 00:02:39,680
And so as two will reference the same string object that S1 is referencing.

36
00:02:40,550 --> 00:02:46,790
Now, important thing to note here is that these two statements can appear anywhere in the application.

37
00:02:47,270 --> 00:02:53,180
There may be a completely different classes or even in completely different packages altogether.

38
00:02:53,970 --> 00:03:01,290
As long as both statements are executed as part of the same JVM process, only a single string object

39
00:03:01,290 --> 00:03:06,150
will be created for the literal hello and as one and S2 will reference it.

40
00:03:08,000 --> 00:03:14,330
Next, if a variable as three is assigned with SW one, then SW three will also obviously reference

41
00:03:14,330 --> 00:03:16,550
the same string object in string pull.

42
00:03:18,270 --> 00:03:23,980
Next, let's say we have this statement where variable as four is created using the new keyword and

43
00:03:23,980 --> 00:03:25,610
this also initialize with the text.

44
00:03:25,620 --> 00:03:26,100
Hello.

45
00:03:27,910 --> 00:03:33,400
And we know that this would create a string object outside of the string pool, just like in the case

46
00:03:33,400 --> 00:03:35,290
of any regular Java object.

47
00:03:35,740 --> 00:03:41,770
And as for word reference, however, the argument to the constructor is a string literal.

48
00:03:41,980 --> 00:03:47,110
So JVM would still try to create a string object for that literal in the string pool.

49
00:03:47,590 --> 00:03:52,870
But since we already have a string object for the little hello in the string pool, a reference to it

50
00:03:52,870 --> 00:03:54,670
is passed to the constructor.

51
00:03:55,300 --> 00:04:00,910
But if a string object corresponding to literal hello was not there in the string pool, then JVM would

52
00:04:00,910 --> 00:04:07,060
have created a new string object in the string pool and would have passed a reference to that new string

53
00:04:07,060 --> 00:04:08,590
object to the constructor.

54
00:04:09,510 --> 00:04:13,330
So to go on the string poll, all we need is a string letter.

55
00:04:13,650 --> 00:04:16,110
And it doesn't matter where that letter appears.

56
00:04:16,410 --> 00:04:20,910
The letter can also be part of a system or println statement.

57
00:04:22,500 --> 00:04:22,830
Next.

58
00:04:22,830 --> 00:04:24,270
Let's say we have this statement.

59
00:04:25,180 --> 00:04:29,970
And we know that this will also create a new string object outside of the string pool.

60
00:04:30,460 --> 00:04:36,220
So both as four and five are referencing two different string objects, even though they are initialized

61
00:04:36,220 --> 00:04:37,330
with the same content.

62
00:04:37,660 --> 00:04:41,680
So there is no sharing of storage, as in the case of S1 as to an S3.

63
00:04:43,400 --> 00:04:49,160
And because of this kind of implementation, when we do an object reference comparison on S1 and S2,

64
00:04:49,190 --> 00:04:50,990
it would result in a true value.

65
00:04:52,070 --> 00:04:57,290
But when we do an object reference comparison on S4 and S5, it will result in a false value.

66
00:04:58,360 --> 00:05:04,180
So as you can see, the main advantage of using string literals is that it would save us memory when

67
00:05:04,180 --> 00:05:05,890
the letters have the same content.

68
00:05:07,750 --> 00:05:10,590
Not just to be 100% clear on what we just learned.

69
00:05:10,860 --> 00:05:16,110
If we have only this statement that is JVM and counters string neutral.

70
00:05:16,140 --> 00:05:17,880
Hello for the very first time.

71
00:05:19,250 --> 00:05:23,690
Then first a string object corresponding to the literal hello is created in the string pull.

72
00:05:24,710 --> 00:05:31,340
And a reference to it is passed to the constructor to construct a new string object outside of string

73
00:05:31,340 --> 00:05:31,690
pull.

74
00:05:32,700 --> 00:05:36,330
Essentially in this case, toasting objects are being created.

75
00:05:36,840 --> 00:05:38,370
So just keep that in mind.

76
00:05:38,730 --> 00:05:41,400
It can sometimes be asked in an interview too.

77
00:05:41,970 --> 00:05:46,680
But if Hello Literal was already there in the string pool, then it would have created just one string

78
00:05:46,680 --> 00:05:48,540
object outside of the string pool.

79
00:05:50,330 --> 00:05:52,930
Now let's look at a few more specifics related to spring poll.

80
00:05:53,330 --> 00:06:00,320
We now know that a string pool basically stores a single copy of each string letter in the form of string

81
00:06:00,320 --> 00:06:00,860
object.

82
00:06:01,040 --> 00:06:02,420
So just keep that in mind.

83
00:06:02,420 --> 00:06:04,850
That string pool holds string objects.

84
00:06:06,100 --> 00:06:11,650
We also know that spring pool is part of he and not that there is only one copy of Stempel.

85
00:06:12,980 --> 00:06:15,410
Swimming pool is also referred to as string table.

86
00:06:15,530 --> 00:06:17,630
So that's another name for string pool.

87
00:06:19,430 --> 00:06:23,840
And this whole process of building upstream pool is referred to as spring interning.

88
00:06:25,270 --> 00:06:28,240
On each letter in the string Paul is called as an intern.

89
00:06:29,800 --> 00:06:30,340
On singing.

90
00:06:30,340 --> 00:06:37,060
Dancing is also supported in other languages like Python, Ruby, C Sharp and even in scripting languages

91
00:06:37,060 --> 00:06:38,230
like JavaScript.

92
00:06:39,950 --> 00:06:44,120
So we now understand how string and turning works at a conceptual level.

93
00:06:44,630 --> 00:06:48,220
Let's now see how it is actually done behind the scenes by JVM.

94
00:06:49,960 --> 00:06:55,030
Now, when GM encounters a string literal for the very first time, it does two things.

95
00:06:56,900 --> 00:07:01,790
First it creates a new string object with same content as the string return.

96
00:07:03,570 --> 00:07:07,350
Next, it invokes a method called intern on the created string object.

97
00:07:07,680 --> 00:07:10,450
So there is a method called intern in the string class.

98
00:07:10,470 --> 00:07:12,750
And this is what intern method is doing.

99
00:07:13,380 --> 00:07:18,840
The intern method first checks if there is already a string object in the string pool with the same

100
00:07:18,840 --> 00:07:19,470
content.

101
00:07:20,070 --> 00:07:24,900
If there is, then it simply returns a reference of that existing string object.

102
00:07:25,660 --> 00:07:29,800
The string object it created is simply abandoned and will be garbage collected.

103
00:07:30,280 --> 00:07:33,700
Garbage collection will be discussed later in the internal chapter.

104
00:07:34,570 --> 00:07:38,620
But a string pool does not contain a string object with the same content.

105
00:07:38,770 --> 00:07:45,070
Then in turn, method adds the new string object it created into the string pool and returns its reference.

106
00:07:45,880 --> 00:07:49,930
So in that method, as the name indicates, deals with interning.

107
00:07:51,000 --> 00:07:53,700
Now the same literal is uncounted once again.

108
00:07:53,730 --> 00:08:00,750
Then Gvm checks if the intent method was previously invoked on a string object that was initialized

109
00:08:00,750 --> 00:08:04,140
with this literal and would return a reference to that instance.

110
00:08:04,830 --> 00:08:11,340
In fact, that's the first thing JVM always does whenever a literal is encountered and if any method

111
00:08:11,340 --> 00:08:16,290
was not previously invoked, only then it does the two steps that we see here.

112
00:08:18,180 --> 00:08:20,100
Now let's look at a couple of examples.

113
00:08:20,400 --> 00:08:22,740
Here we are concatenating two literals.

114
00:08:22,980 --> 00:08:29,640
And in this case the result of concatenation will also be interned, as it would also be a literal whose

115
00:08:29,640 --> 00:08:32,250
value is known at compile time itself.

116
00:08:34,340 --> 00:08:41,780
Now in this example, we have variable as one which is assigned a little, but variable as to is a concatenation

117
00:08:41,780 --> 00:08:48,260
of a literal and the variable as one here variable as one would be evaluated at runtime.

118
00:08:48,410 --> 00:08:51,320
And so we don't have a literal at compile time.

119
00:08:51,860 --> 00:08:57,980
So this would not lead to creation of an intern and the resulting string object would be created outside

120
00:08:57,980 --> 00:08:58,760
of string pool.

121
00:09:00,560 --> 00:09:07,190
But if we explicitly invoke and turn method in this way on the variables too, then an intern would

122
00:09:07,190 --> 00:09:14,870
be created in this case variable as to would finally reference the intern in the string pool as on the

123
00:09:14,870 --> 00:09:21,830
left side of the assignment we have the variable S2 so we can explicitly invoke in turn method to just

124
00:09:21,830 --> 00:09:23,330
like the way JVM does.

125
00:09:24,190 --> 00:09:30,400
Under all string object that S2 was referencing will still be on the heap and will be eligible for garbage

126
00:09:30,400 --> 00:09:31,030
collection.

127
00:09:32,840 --> 00:09:37,280
So the question is, will such an explicit internal bias anything?

128
00:09:38,580 --> 00:09:39,840
Most likely not.

129
00:09:39,990 --> 00:09:43,220
It seems to be better off to be used only by GM.

130
00:09:44,850 --> 00:09:51,180
But in certain applications like natural language processing, where we may process lots and lots of

131
00:09:51,180 --> 00:09:58,080
text and do a lot of string manipulations, we may think of explicit, intending if we think a lot of

132
00:09:58,080 --> 00:10:00,300
identical strings would be created.

133
00:10:00,840 --> 00:10:06,090
However, it depends on the particular application and you would have to experiment and make your decision.

134
00:10:07,110 --> 00:10:09,720
So that's about string pool and interning.

135
00:10:10,020 --> 00:10:13,050
Let's notice some of the stuff we have learned through a short demo.

136
00:10:13,530 --> 00:10:17,460
A new method called String Pull has been added to the Basics Demo class.

137
00:10:17,640 --> 00:10:20,010
And let's go ahead and look at the new method.

138
00:10:22,570 --> 00:10:26,200
Here is the new string pool method which has been added to the basics demo class.

139
00:10:26,590 --> 00:10:31,480
So here we have a bunch of declaration statements creating some strings, and we also have some parent

140
00:10:31,480 --> 00:10:32,980
statements doing some tests.

141
00:10:33,370 --> 00:10:39,100
So here in the declaration statements, we are creating a couple of strings on the string pull and at

142
00:10:39,100 --> 00:10:40,990
least one string outside of the string pool.

143
00:10:40,990 --> 00:10:46,420
And we are basically doing a comparison of the object references and we are also explicitly invoking

144
00:10:46,420 --> 00:10:49,570
in turn method a couple of places and we will look at that.

145
00:10:49,870 --> 00:10:53,650
So let's just go ahead and look at what we have here in the declaration statements.

146
00:10:53,860 --> 00:10:58,480
So initially, we are creating this variable as one which is an object reference and it is initialized

147
00:10:58,480 --> 00:10:59,080
with the text.

148
00:10:59,080 --> 00:10:59,500
Hello.

149
00:10:59,500 --> 00:11:00,820
So it's a string literal.

150
00:11:00,940 --> 00:11:03,910
And so we know that this string gets created in the string pool.

151
00:11:03,940 --> 00:11:07,780
Similarly, we have as to here it is also initialized with the same string literal.

152
00:11:07,810 --> 00:11:08,370
Hello.

153
00:11:08,380 --> 00:11:11,740
So it would also point to the same string object in the string literal.

154
00:11:11,770 --> 00:11:18,070
So we know we also know that and here in SE three, so we are invoking an internal method on the string

155
00:11:18,070 --> 00:11:18,630
later.

156
00:11:18,880 --> 00:11:20,200
So we can also do that.

157
00:11:20,560 --> 00:11:26,350
So this is like a double turning here because this itself is an intern and then we are once again invoking

158
00:11:26,350 --> 00:11:31,840
the intern method whose main objective is to is to create interns in the string pool.

159
00:11:31,970 --> 00:11:32,260
Right.

160
00:11:32,260 --> 00:11:34,120
We know that intern method does that.

161
00:11:34,150 --> 00:11:35,470
It creates interns.

162
00:11:35,860 --> 00:11:41,080
So it's like a double interning here now as four is created using the new keyword.

163
00:11:41,080 --> 00:11:42,640
So here a string.

164
00:11:42,640 --> 00:11:47,860
String is created outside of the string pool and it is also initialized with the same with the same

165
00:11:47,860 --> 00:11:52,000
string literal and as far as initialized with another string literal.

166
00:11:52,390 --> 00:11:58,600
So, so those are the different declarations and we just have some comparisons being some tests here

167
00:11:58,600 --> 00:12:03,040
and we are using the equals two operator to compare the different object references.

168
00:12:03,130 --> 00:12:05,200
So let's just go ahead and run this program.

169
00:12:05,200 --> 00:12:09,280
It's already compiled and then we can look at the we can analyze the results.

170
00:12:10,630 --> 00:12:11,830
So this is what we have.

171
00:12:11,860 --> 00:12:18,190
So in the first statement we are comparing object references, S1 and S2 and since both of them are

172
00:12:18,190 --> 00:12:23,410
initialized with the same string literal, so they both point to the same string object in the string

173
00:12:23,410 --> 00:12:23,660
pool.

174
00:12:24,010 --> 00:12:25,180
So we have.

175
00:12:25,270 --> 00:12:27,040
So the expression evaluates to true.

176
00:12:27,550 --> 00:12:31,060
And next is a comparison between S1 and S3.

177
00:12:31,720 --> 00:12:37,780
And S3 is also pointing to a string object in the string pool so we we can see it here.

178
00:12:37,870 --> 00:12:40,330
So once again, it would evaluate to true.

179
00:12:40,840 --> 00:12:44,290
And in the next statement, we are comparing S1 with S4.

180
00:12:44,290 --> 00:12:48,620
So S1 is a string in the string pool as four is a string outside the string pool.

181
00:12:48,660 --> 00:12:49,060
Right.

182
00:12:49,270 --> 00:12:50,770
So that would be false.

183
00:12:51,100 --> 00:12:56,970
And in the fourth line, we are invoking an internal method on S4 right over here.

184
00:12:56,980 --> 00:13:05,960
So this basically creates an intern in the string pool, but S4 is initialized with the keyword, with

185
00:13:05,960 --> 00:13:06,970
the literal hallow.

186
00:13:07,270 --> 00:13:13,540
But we know that that intern is already there in the string pool because of these declarations here.

187
00:13:13,720 --> 00:13:17,800
So basically, it's not going to create a new intern.

188
00:13:17,800 --> 00:13:21,130
It's just going to reference it would be a reference.

189
00:13:21,130 --> 00:13:26,560
This whole expression would be a reference to that string object which is already there in the string

190
00:13:26,560 --> 00:13:27,040
pool.

191
00:13:27,430 --> 00:13:33,310
So due to this, both S1 and this, this expression would point to the same string object in the string

192
00:13:33,310 --> 00:13:33,850
pool.

193
00:13:33,850 --> 00:13:35,350
And we get it true here.

194
00:13:35,830 --> 00:13:41,470
Now, here, in the first statement, it's a concatenation between two string literals.

195
00:13:41,470 --> 00:13:47,800
So this thing is so it would the after concatenation is it will still be a string literal.

196
00:13:47,830 --> 00:13:49,930
So this will also be stored on the heap.

197
00:13:49,930 --> 00:13:52,150
I mean, I'm sorry, on the on the string pool.

198
00:13:52,480 --> 00:13:58,210
And it is since it is hallow, the concatenation is hallow and there is already a string object with

199
00:13:58,210 --> 00:14:00,160
the same content in the string pool.

200
00:14:00,460 --> 00:14:02,530
This expression would also evaluate to true.

201
00:14:02,980 --> 00:14:10,810
And the final one is a concatenation between this text held here and this variable as file.

202
00:14:10,870 --> 00:14:14,140
So if they're concatenated, definitely it's just the same text.

203
00:14:14,140 --> 00:14:14,650
Hello.

204
00:14:14,860 --> 00:14:22,690
But since this is a variable, it doesn't get evaluated until runtime and it would not be considered

205
00:14:22,690 --> 00:14:23,770
as a literal.

206
00:14:23,770 --> 00:14:26,740
Returns are created only yet are known at compile time.

207
00:14:27,460 --> 00:14:31,120
So that's the reason when we execute it, it returns false.

208
00:14:31,750 --> 00:14:40,630
But if you recall from our lesson on switch expressions, we said that if we make the variable a final,

209
00:14:40,630 --> 00:14:42,460
this is called as a constant variable.

210
00:14:42,640 --> 00:14:51,130
In that case, the compiler would simply take this text and it would hardwire it in place of this variable

211
00:14:51,130 --> 00:14:52,860
at compile time itself into.

212
00:14:52,870 --> 00:14:54,360
So it writes it into the byte code.

213
00:14:54,370 --> 00:14:56,950
So if you make it a constant variable then.

214
00:14:58,320 --> 00:15:05,790
Then it would you know, it would be it would be considered as a string literal and it would be the

215
00:15:05,790 --> 00:15:08,490
expression would evaluate to true as one equals.

216
00:15:08,490 --> 00:15:09,430
This would be true.

217
00:15:09,450 --> 00:15:11,520
So that is if we add this keyword final.

218
00:15:11,970 --> 00:15:13,160
So that's about it.

219
00:15:13,170 --> 00:15:19,410
So just to summarize, all string literals will be stored in the string pool and the ones created using

220
00:15:19,410 --> 00:15:22,290
new keyword will be will be stored outside the string pool.

221
00:15:22,560 --> 00:15:28,920
And the main benefit of string pool is you get to save memory with the strings created in the string

222
00:15:28,920 --> 00:15:31,020
pool if they have the same content.

223
00:15:31,680 --> 00:15:37,590
So the recommended approach is to create strings using string literals and not using the new keyword.

224
00:15:38,040 --> 00:15:38,910
So that's about it.

225
00:15:38,910 --> 00:15:44,820
And this new method is there in the basics demo and it's already uploaded to the you can see it in the

226
00:15:44,820 --> 00:15:50,520
resources section, so you can download it and play with it and that's about it and a happy coding.

227
00:15:50,520 --> 00:15:51,090
Thank you.

