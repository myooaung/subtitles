1
00:00:02,060 --> 00:00:02,960
Hello there.

2
00:00:02,990 --> 00:00:04,180
This is the De La Rue.

3
00:00:04,190 --> 00:00:05,150
And welcome back.

4
00:00:05,390 --> 00:00:11,120
So we looked at primitive variables which have primitive types as the variable types.

5
00:00:11,540 --> 00:00:15,470
And we looked at the primitive types and they come with the Java language.

6
00:00:15,470 --> 00:00:18,050
So they are inbuilt into the language.

7
00:00:18,500 --> 00:00:23,930
So variables can be primitive variables, or they can also be object references.

8
00:00:23,930 --> 00:00:31,130
And with object references, the type of the variable will be a class or an interface, and interfaces

9
00:00:31,130 --> 00:00:33,260
are something that we will discuss later.

10
00:00:33,530 --> 00:00:38,270
But in our student class we created one object reference here in the main method.

11
00:00:38,570 --> 00:00:44,720
Here we are creating a student object and this variable as is an object reference and it's type as the

12
00:00:44,720 --> 00:00:45,620
student class.

13
00:00:46,370 --> 00:00:49,170
So essentially variables can be of two types.

14
00:00:49,190 --> 00:00:52,310
They can be primitive variables or object references.

15
00:00:53,000 --> 00:00:59,690
Now, regardless of whether a variable is primitive or object reference, the variable will play a certain

16
00:00:59,690 --> 00:01:02,990
role depending upon where it is declared.

17
00:01:03,380 --> 00:01:07,850
So it will play a certain role if it is declared here at the class level.

18
00:01:08,820 --> 00:01:13,380
Directly within the class and it will have a different role if it is declared here.

19
00:01:14,040 --> 00:01:18,990
So there are different kinds of variables, three kinds of variables, and we are going to study that

20
00:01:18,990 --> 00:01:20,400
in this particular lecture.

21
00:01:20,940 --> 00:01:24,600
The first kind of variable is called as the instance variables.

22
00:01:24,720 --> 00:01:32,010
So so far we have been saying that variables hold state and those variables are nothing but the instance

23
00:01:32,010 --> 00:01:38,400
variables and they hold the state and they are called as instance variables because they are related

24
00:01:38,400 --> 00:01:45,480
to instances of a class that is nothing but the objects of a class, because instance is a different

25
00:01:45,510 --> 00:01:46,920
term for object.

26
00:01:46,920 --> 00:01:50,670
And in this case the object is the student object.

27
00:01:50,670 --> 00:01:56,760
And these variables, the instance variables, hold the state of that particular student object.

28
00:01:57,630 --> 00:01:59,220
So that's instance variables.

29
00:01:59,220 --> 00:02:05,430
And then another kind of variables are local variables which are declared within the method, and such

30
00:02:05,430 --> 00:02:11,130
local variables help in performing certain computations within the method, and they're called as local

31
00:02:11,130 --> 00:02:17,340
variables because they are local to the method and they cannot be accessed outside of the method, so

32
00:02:17,340 --> 00:02:19,110
they can only be used within the method.

33
00:02:19,800 --> 00:02:21,750
So that's local variables.

34
00:02:21,960 --> 00:02:29,040
And there is also a third kind of variable called static variables, and static variables are also referred

35
00:02:29,040 --> 00:02:32,910
to as class variables because they are specific to the class.

36
00:02:33,240 --> 00:02:40,020
That is, the values that they hold are specific to the class, whereas the values that instance variables

37
00:02:40,020 --> 00:02:44,880
hold are specific to the instances of the class, that is the objects of the class.

38
00:02:45,240 --> 00:02:50,310
So those values are unique to the object, but when it comes to class variables, they are specific

39
00:02:50,310 --> 00:02:54,060
to the class and it will be clear as we are doing the demo.

40
00:02:54,060 --> 00:03:00,930
So it will get clear and the suggestion I have is as I'm going to demo this program, I would also like

41
00:03:00,930 --> 00:03:08,190
you to type in the program because here we are going to create multiple objects and we are also going

42
00:03:08,190 --> 00:03:09,690
to initialize their state.

43
00:03:09,900 --> 00:03:15,270
So it will also give you a good feel of creating objects and initializing their state.

44
00:03:15,360 --> 00:03:20,550
And that's a very important step when we are learning about object oriented programming.

45
00:03:20,760 --> 00:03:24,240
So that's the first step and you will get a good feel for that.

46
00:03:24,480 --> 00:03:29,130
So if possible, do try to implement as I am demonstrating this program.

47
00:03:29,790 --> 00:03:33,900
So let's get started and let's get started off with the instance variables.

48
00:03:33,900 --> 00:03:36,930
First thing is, let me change this age to eight.

49
00:03:37,620 --> 00:03:43,530
So this is our student class and we have all we have the state here and the student object is created

50
00:03:43,530 --> 00:03:48,630
in the main method and we just have one method called compute where we are displaying all of the values

51
00:03:48,810 --> 00:03:54,270
and here we are just computing the tuition fees depending upon whether the student is an international

52
00:03:54,270 --> 00:03:55,050
student or not.

53
00:03:55,410 --> 00:03:58,200
So that's just a quick recap of the student class.

54
00:03:58,800 --> 00:04:05,430
So the reason I'm changing it to end is because we said that one of the suggestions is to stick to only

55
00:04:05,430 --> 00:04:06,450
eight and double.

56
00:04:06,450 --> 00:04:12,420
Right now long is needed because form can have a value that is outside the range of eight.

57
00:04:12,450 --> 00:04:14,580
And so we are using the long type.

58
00:04:15,060 --> 00:04:20,730
So this is what we have and thus here the student does not have a name, so he's an anonymous student.

59
00:04:20,730 --> 00:04:22,590
So let's give the student a name.

60
00:04:22,950 --> 00:04:27,180
So let's declare a variable called name whose type is string.

61
00:04:27,180 --> 00:04:32,490
And as I mentioned earlier, strings will be discussed later, but they are initialized in this way.

62
00:04:32,760 --> 00:04:35,100
So we are initializing using a string literal.

63
00:04:35,100 --> 00:04:36,360
So the name is John.

64
00:04:36,450 --> 00:04:40,290
Next, let's also create another variable called gender.

65
00:04:41,640 --> 00:04:43,740
And let's initialize it to mail.

66
00:04:45,080 --> 00:04:49,280
So this is the student object, and the student object is created here.

67
00:04:49,550 --> 00:04:54,650
Now, let's say I want to create another student object who will have a different state.

68
00:04:54,950 --> 00:04:56,660
Now, how would that be possible?

69
00:04:56,660 --> 00:04:59,930
Because the student state is already defined here.

70
00:05:00,230 --> 00:05:05,300
So how can we create a second object and give that student a different state?

71
00:05:05,810 --> 00:05:09,630
So for that, we need to initialize it in a different way.

72
00:05:09,650 --> 00:05:13,540
We need to use the DOT operator and we have to do it from the main method.

73
00:05:13,550 --> 00:05:17,480
So here we are hardcoded in the state and we shouldn't be doing that.

74
00:05:18,080 --> 00:05:21,080
So let me just take all of these things here.

75
00:05:21,080 --> 00:05:25,490
Let me just copy them so that we can initialize the state here.

76
00:05:26,970 --> 00:05:32,760
Now here, let's call it a student one because we are going to create multiple students.

77
00:05:34,210 --> 00:05:35,360
This and dot.

78
00:05:37,410 --> 00:05:38,910
Object reference on DOT.

79
00:05:50,650 --> 00:05:53,410
And here, let's initialize it to false.

80
00:05:54,140 --> 00:05:56,990
So, John, as not an international student.

81
00:05:57,890 --> 00:06:03,080
So let me just indent this and then align it so that it looks clean and neat.

82
00:06:09,870 --> 00:06:13,230
And here this is for the compute method.

83
00:06:13,530 --> 00:06:17,080
So that's what you would do if you want to initialize the state.

84
00:06:17,100 --> 00:06:23,250
So you would say object reference dot the variable name and you would assign a value to it.

85
00:06:23,700 --> 00:06:27,360
So this is not the normal convention to initialize the state.

86
00:06:27,780 --> 00:06:30,990
Typically you would initialize the state using constructors.

87
00:06:30,990 --> 00:06:35,490
And constructors are something that we will look at towards the end of this section.

88
00:06:35,760 --> 00:06:38,570
So but this this way is also fine.

89
00:06:38,580 --> 00:06:40,680
It's just not the normal convention.

90
00:06:40,950 --> 00:06:46,440
So this is how the variable can be accessed and this is how the method is invoked using the object reference

91
00:06:46,440 --> 00:06:51,840
followed by a dot followed by either the name of the variable or the method name.

92
00:06:53,130 --> 00:07:01,080
And here, let's also remove all of these because we are initializing the state using the object reference.

93
00:07:01,320 --> 00:07:04,460
So here they will all get default values for ID.

94
00:07:04,470 --> 00:07:10,560
We know it gets a zero value string is an object and it gets a value of null.

95
00:07:11,850 --> 00:07:13,290
And we will look at that later.

96
00:07:13,320 --> 00:07:14,710
Phone will be zero.

97
00:07:14,730 --> 00:07:16,170
GPA will be initialized.

98
00:07:16,200 --> 00:07:20,430
Will get a default of zero and international as boolean.

99
00:07:20,430 --> 00:07:21,950
So it gets a value of false.

100
00:07:21,960 --> 00:07:22,680
We know that.

101
00:07:22,950 --> 00:07:28,260
And these two, let's leave it like this with this initial values because they would be common for all

102
00:07:28,260 --> 00:07:29,160
of the students.

103
00:07:29,490 --> 00:07:30,750
So let's leave it like that.

104
00:07:31,980 --> 00:07:37,860
So for instance, variables will get default values and they need to be declared directly within the

105
00:07:37,860 --> 00:07:40,230
class here and here.

106
00:07:40,230 --> 00:07:40,830
Let me.

107
00:07:42,150 --> 00:07:48,810
Add something first, let's add an empty line here so that when we are creating multiple objects and

108
00:07:48,810 --> 00:07:54,870
printing their data, there will be at least one empty line separating the different data that we have

109
00:07:54,900 --> 00:07:56,100
that we are displaying.

110
00:07:56,190 --> 00:07:57,570
And let's also print.

111
00:08:01,850 --> 00:08:06,650
The new variables called name and gender.

112
00:08:09,470 --> 00:08:11,510
So we have everything set up now.

113
00:08:11,570 --> 00:08:15,080
And let's go ahead and compile and run it.

114
00:08:22,060 --> 00:08:22,480
If you go.

115
00:08:22,490 --> 00:08:25,050
So it prints all of the values here.

116
00:08:25,060 --> 00:08:27,130
John Mill 18 and so on.

117
00:08:28,080 --> 00:08:30,090
So that's how you do it.

118
00:08:31,170 --> 00:08:32,789
So that's the first to object.

119
00:08:32,789 --> 00:08:35,549
Let's go ahead and create the second student object.

120
00:08:35,549 --> 00:08:38,970
So that's how you would create an object and initialize the state.

121
00:08:38,970 --> 00:08:40,760
And this is the second student.

122
00:08:40,770 --> 00:08:45,480
So let's, let's call it a student to.

123
00:08:46,220 --> 00:08:46,400
Okay.

124
00:08:46,460 --> 00:08:47,900
It's a new student object.

125
00:08:54,260 --> 00:08:57,890
And it will we will invoke the compute method on the student object.

126
00:08:57,890 --> 00:08:59,260
So let's change the data.

127
00:08:59,270 --> 00:09:01,940
Let's say the ID is 1001 name.

128
00:09:01,940 --> 00:09:03,350
Let's change it to Raj.

129
00:09:03,620 --> 00:09:07,430
Male as a gender, it's age is 21.

130
00:09:08,000 --> 00:09:14,270
Let's make this 9999 GPA, let's say 3.4 and degree.

131
00:09:14,270 --> 00:09:17,360
Let's say he is a master student international.

132
00:09:17,360 --> 00:09:18,590
Let's make it true.

133
00:09:18,980 --> 00:09:20,000
And that's it.

134
00:09:25,120 --> 00:09:30,550
So this is the first student object and the information of that particular student.

135
00:09:30,550 --> 00:09:34,750
And then we are creating a new student here and we are initializing the state.

136
00:09:34,750 --> 00:09:40,780
And then when we invoke the compute method, it prints all of this data about the second student.

137
00:09:41,020 --> 00:09:43,150
So now I would want you to do something.

138
00:09:43,420 --> 00:09:47,080
So here are how some sample data for you.

139
00:09:47,080 --> 00:09:54,490
So I want you to create a third student object, call the variable student three and just initialize

140
00:09:54,490 --> 00:09:55,480
the state in this way.

141
00:09:55,480 --> 00:09:57,010
But using this data.

142
00:09:57,010 --> 00:10:02,910
So the name is Anita, gender is female, it's her age for Gpps 4.0.

143
00:10:02,920 --> 00:10:05,020
It's a perfect 4.0.

144
00:10:05,020 --> 00:10:11,110
So Anita is a good student, so just pause the video and create these different statements.

145
00:10:13,000 --> 00:10:14,290
So I have the code here.

146
00:10:14,290 --> 00:10:16,420
So let me just copy it and.

147
00:10:19,010 --> 00:10:20,660
I mean, replace this with this.

148
00:10:20,660 --> 00:10:25,310
And I hope you have already created these statements.

149
00:10:28,510 --> 00:10:29,020
That's it.

150
00:10:35,030 --> 00:10:36,680
So we have the new student.

151
00:10:36,690 --> 00:10:41,010
So that's how you would create objects and initialize the state.

152
00:10:41,010 --> 00:10:43,800
And each object has its own unique state.

153
00:10:45,300 --> 00:10:47,850
So that's done using the instance variables.

154
00:10:48,240 --> 00:10:51,090
Now let's look at the second kind of variable.

155
00:10:51,210 --> 00:10:53,280
So you're invoking this compute method.

156
00:10:53,310 --> 00:10:57,930
Let's say we want to keep track of the number of times this method is invoked.

157
00:10:58,110 --> 00:11:02,820
And it doesn't matter whether we are invoking it via student one or student two or student three.

158
00:11:03,060 --> 00:11:07,590
So for instance, here, if we invoke the count, should be one.

159
00:11:07,830 --> 00:11:10,260
And here the count should be incremented to two.

160
00:11:10,260 --> 00:11:15,240
And we are invoking when we are invoking it for the third time, it needs to be incremented to three.

161
00:11:15,600 --> 00:11:20,250
So we want to monitor that the number of times the compute method is being invoked.

162
00:11:20,370 --> 00:11:24,150
So for that, let's introduce a new variable called.

163
00:11:25,450 --> 00:11:29,140
Compute count, let's call it as compute count.

164
00:11:29,500 --> 00:11:32,530
And it also gets a default of zero.

165
00:11:32,830 --> 00:11:38,170
And since we want to increase the count value when compute method is accessed.

166
00:11:38,320 --> 00:11:39,580
So we will.

167
00:11:40,820 --> 00:11:42,230
Incremented here.

168
00:11:45,160 --> 00:11:46,390
Plus one.

169
00:11:47,050 --> 00:11:48,860
So that's how we would increment.

170
00:11:48,910 --> 00:11:51,340
And let's also print the output here.

171
00:11:57,540 --> 00:12:00,660
So let's go ahead and see what we get.

172
00:12:02,620 --> 00:12:04,300
Recompile run it.

173
00:12:04,540 --> 00:12:06,460
So the compute count is one.

174
00:12:06,460 --> 00:12:08,410
It's one here and it's one here.

175
00:12:08,800 --> 00:12:11,380
It should have been two here and it should have been three here.

176
00:12:11,770 --> 00:12:17,950
And the reason I think you might have guessed, because compute count is an instance variable and it

177
00:12:17,950 --> 00:12:19,930
is specific to the object only.

178
00:12:20,170 --> 00:12:20,790
Right.

179
00:12:20,800 --> 00:12:28,410
So when here when we are invoking compute count because it is 2.1, the compute count would be zero.

180
00:12:28,420 --> 00:12:32,080
And when we invoke compute here, it gets incremented to one.

181
00:12:32,470 --> 00:12:37,480
Now when we create second student object once again for the second student object, compute count would

182
00:12:37,480 --> 00:12:43,630
be zero and it gets incremented to one in the compute method and same goes with the third student object

183
00:12:43,630 --> 00:12:44,270
also.

184
00:12:44,290 --> 00:12:47,380
So it would be zero initially and it's incremented to one.

185
00:12:47,410 --> 00:12:49,090
So that's not what we want.

186
00:12:49,120 --> 00:12:55,960
We want the value of compute to be incremented each time compute method is invoked.

187
00:12:56,290 --> 00:12:58,680
So it needs to be a global value.

188
00:12:58,690 --> 00:13:01,930
And for that we will use a class variable.

189
00:13:01,930 --> 00:13:04,000
So it has got nothing to do with object.

190
00:13:04,000 --> 00:13:07,870
It needs to be a class variable, which is nothing but the static variable.

191
00:13:08,770 --> 00:13:15,580
So we need to add this keyword called static, and with that it's going to be a static variable and

192
00:13:15,580 --> 00:13:20,320
static variable will hold values that are unique to the class itself.

193
00:13:20,680 --> 00:13:24,070
And we know that objects are created from the class.

194
00:13:24,070 --> 00:13:26,320
So now if we recompile.

195
00:13:29,490 --> 00:13:33,510
As you can see, it is one here, two here and three here.

196
00:13:33,900 --> 00:13:37,040
So a compute is always going to increment.

197
00:13:37,050 --> 00:13:38,850
So let me just copy this.

198
00:13:42,910 --> 00:13:44,770
Thus three more times.

199
00:13:44,770 --> 00:13:45,100
So.

200
00:13:45,100 --> 00:13:46,300
And you will see that.

201
00:13:47,080 --> 00:13:51,880
It would have got finally it would have got incremented to six.

202
00:13:52,910 --> 00:13:54,180
Here it is complete control.

203
00:13:54,200 --> 00:13:56,960
Incremented to six, five, four, five, six.

204
00:13:57,110 --> 00:14:00,680
So that's because of these three statements that we are adding.

205
00:14:01,010 --> 00:14:02,960
So that's how it works.

206
00:14:02,960 --> 00:14:05,360
So that's the static variable.

207
00:14:05,630 --> 00:14:08,840
It maintains a single copy of the variable.

208
00:14:08,840 --> 00:14:16,160
So the variables value will be like a global value and each time it is incremented, or if we change

209
00:14:16,160 --> 00:14:24,170
that, the same value will be accessible to all of the objects or even to some other class that is accessing

210
00:14:24,170 --> 00:14:24,860
the student.

211
00:14:24,890 --> 00:14:31,670
So what I mean is so here we are directly accessing the compute count here and we are displaying it.

212
00:14:31,730 --> 00:14:37,990
But let's say if there is an external class, another class which wants to access the compute count

213
00:14:38,060 --> 00:14:40,370
value, then it can also do that.

214
00:14:40,380 --> 00:14:47,150
And all it needs to do is it needs to say the class name, which is student dot, the variable name,

215
00:14:47,150 --> 00:14:48,290
which is compute code.

216
00:14:48,320 --> 00:14:50,030
So that's how it can access it.

217
00:14:50,270 --> 00:14:52,760
Let's assume let's also do that.

218
00:14:52,760 --> 00:14:53,840
So let's print.

219
00:14:56,740 --> 00:14:58,990
That value using the class name.

220
00:14:58,990 --> 00:15:01,840
So just assume that here.

221
00:15:04,570 --> 00:15:10,570
Let's call it student dot compute code because it is a class variable.

222
00:15:10,570 --> 00:15:12,610
We are using the class name to access it.

223
00:15:12,880 --> 00:15:17,230
So just assume that this particular statement is in some other class.

224
00:15:17,410 --> 00:15:18,880
And from that some other class.

225
00:15:18,880 --> 00:15:25,120
If you want to access this variable, we need to qualify that variable using the name of the class student.

226
00:15:25,360 --> 00:15:26,880
So that's what we are doing here.

227
00:15:26,890 --> 00:15:27,880
So.

228
00:15:29,600 --> 00:15:30,890
Her recompile.

229
00:15:32,690 --> 00:15:35,300
You could hear it as printing the value three.

230
00:15:35,930 --> 00:15:39,620
So this is the last value at this instance of time.

231
00:15:40,820 --> 00:15:43,460
Now you can also do this.

232
00:15:43,460 --> 00:15:48,530
You can, instead of the name of the class, you can still use an object reference.

233
00:15:48,560 --> 00:15:51,770
If we have an object reference here, so that's also fine.

234
00:15:56,440 --> 00:15:58,070
It still shows the value of three.

235
00:15:58,090 --> 00:16:01,610
Although we have used the student to the object reference.

236
00:16:01,630 --> 00:16:03,970
That is fine, but it is still valid.

237
00:16:04,270 --> 00:16:09,520
But it is not the recommended way to do it because it is an a static variable.

238
00:16:09,520 --> 00:16:13,660
It needs to be accessed using the name of the class.

239
00:16:13,870 --> 00:16:14,950
It is a class variable.

240
00:16:14,950 --> 00:16:21,310
As I said, class variable is another name for student for static variable, and the proper way to access

241
00:16:21,310 --> 00:16:25,660
it is using the class of the variable, which is student.

242
00:16:25,690 --> 00:16:30,910
Otherwise it leads to unreadable code if you are using the student object references.

243
00:16:31,570 --> 00:16:32,770
So that's the thing.

244
00:16:32,770 --> 00:16:34,950
And here, also here you cannot.

245
00:16:34,960 --> 00:16:37,780
So this is, for instance, for your international.

246
00:16:38,050 --> 00:16:44,380
We are using an object reference, but for to access instance variables, we cannot use the class name.

247
00:16:44,380 --> 00:16:52,600
So if you do this, then that will lead to a compilation error because these are instance variables

248
00:16:52,600 --> 00:16:57,190
and instance variables have to be accessed using object references.

249
00:16:57,190 --> 00:16:59,560
You cannot use the class variables.

250
00:17:00,520 --> 00:17:01,450
The class name.

251
00:17:01,480 --> 00:17:09,670
Class name is only for class variables and to access state you need to use the object reference OC the

252
00:17:09,670 --> 00:17:13,750
particular object reference so that you get the state of that particular object.

253
00:17:14,650 --> 00:17:16,109
So that's one thing.

254
00:17:16,119 --> 00:17:21,670
So those are instances and static variables and here is some notes about them.

255
00:17:21,790 --> 00:17:25,210
So both of them have to be declared at the class level.

256
00:17:25,210 --> 00:17:31,630
So they need to be declared here in the class level and they will be visible in the entire class.

257
00:17:32,050 --> 00:17:34,420
So you cannot declare them within a method.

258
00:17:34,420 --> 00:17:38,500
So if you do that, then they are no longer instance or static variables.

259
00:17:39,250 --> 00:17:41,800
So in the method you will only have local variables.

260
00:17:41,800 --> 00:17:46,570
So they have to be declared here and they call it as the scope of the variable.

261
00:17:46,570 --> 00:17:50,470
So if you declare them here, the scope will be the entire class.

262
00:17:50,680 --> 00:17:56,080
We will discuss the scope later on in a more formal way, scope of the variables, which is nothing

263
00:17:56,080 --> 00:17:58,600
but where the variable is accessible.

264
00:17:59,080 --> 00:18:03,880
But we will discuss that later in a more formal way, in a different lecture, but at least you need

265
00:18:03,880 --> 00:18:04,720
to be aware of that.

266
00:18:04,720 --> 00:18:08,320
So the scope is entire class and they all get default values.

267
00:18:08,320 --> 00:18:14,080
So here also this has got a default value of zero because the type is end and for this instance variable

268
00:18:14,080 --> 00:18:20,530
also it gets a default of zero and they cannot be initialized directly but within the class and we already

269
00:18:20,530 --> 00:18:24,010
know about this, so you cannot so here the default value is zero.

270
00:18:24,010 --> 00:18:25,300
Now you cannot do this.

271
00:18:25,300 --> 00:18:30,310
So this was demonstrated in the lecture on variables introduction.

272
00:18:30,310 --> 00:18:33,340
So you cannot do like this because that would be wrong.

273
00:18:33,340 --> 00:18:35,440
So this is an assignment statement.

274
00:18:35,440 --> 00:18:42,370
An assignment statements can appear only in methods or constructors or places like that, but within

275
00:18:42,370 --> 00:18:43,060
the class.

276
00:18:43,060 --> 00:18:49,990
So I'm calling this as the class level because here we are directly within the class classes body.

277
00:18:50,020 --> 00:18:52,120
You can only have declaration statements.

278
00:18:53,390 --> 00:18:54,530
So that's what this says.

279
00:18:54,530 --> 00:18:56,390
And we have already seen that earlier.

280
00:18:56,600 --> 00:19:00,560
So that's those three are common to both instance and static variables.

281
00:19:00,560 --> 00:19:04,850
They're declared at class level, their scope is entire class and they get a default value, both of

282
00:19:04,850 --> 00:19:08,900
them, and they cannot be initialized directly within the class.

283
00:19:09,110 --> 00:19:14,990
Now instance represents the state of the represents object state instance variables.

284
00:19:15,170 --> 00:19:18,710
So the values are unique to the object as we have seen.

285
00:19:19,040 --> 00:19:24,710
And if you want to access from outside the class, you can do it via object reference like the way we

286
00:19:24,710 --> 00:19:25,640
are doing it here.

287
00:19:25,640 --> 00:19:32,030
Typically all of this code would be in some other class OC main method is just for testing, but it

288
00:19:32,030 --> 00:19:32,990
would be in some other class.

289
00:19:32,990 --> 00:19:35,810
And this is how you would access the variables of the methods.

290
00:19:35,810 --> 00:19:40,790
We are the object reference, but within the class itself, within the method, you can access them

291
00:19:40,790 --> 00:19:43,100
directly, like the way we are doing here.

292
00:19:44,090 --> 00:19:51,350
But outside of the class you would have to you can use an object reference and for static values are

293
00:19:51,350 --> 00:19:57,950
unique to the class so only one copy is maintained per class and that value will be shared across all

294
00:19:57,950 --> 00:19:59,960
the objects and even classes.

295
00:20:00,380 --> 00:20:07,430
Other classes can access it using the class name and both instance and static variables are also referred

296
00:20:07,430 --> 00:20:09,740
to as fields or attributes.

297
00:20:10,070 --> 00:20:14,360
Typically when somebody says fields, they would be referring to instance variables.

298
00:20:14,720 --> 00:20:15,920
So just keep that in mind.

299
00:20:16,070 --> 00:20:21,800
Attributes is also probably more commonly associated with instance variables, but typically among the

300
00:20:21,800 --> 00:20:24,470
two, mostly you will hear the term fields.

301
00:20:24,590 --> 00:20:29,930
So if you hear me using the word field, generally think that it would be an instance variable.

302
00:20:30,260 --> 00:20:31,370
So that's the second one.

303
00:20:31,370 --> 00:20:38,360
Now let's look at the third variable kind of variable called local variables, and local variables are

304
00:20:38,360 --> 00:20:40,550
declared within a method.

305
00:20:41,810 --> 00:20:48,500
Here is a local variable next ID and they help in performing certain computations and they are local

306
00:20:48,500 --> 00:20:52,130
to the method and they cannot be accessed outside of the method.

307
00:20:52,760 --> 00:20:59,540
And local variables are declared here, but they can also include method parameters which are declared

308
00:20:59,540 --> 00:21:01,790
here in between the parentheses.

309
00:21:01,820 --> 00:21:08,480
So when we declare, when we discuss methods formally, we will also discuss method parameters and true

310
00:21:08,480 --> 00:21:09,680
method parameters.

311
00:21:09,680 --> 00:21:12,020
Some data can be passed to the methods.

312
00:21:12,290 --> 00:21:17,900
So here in the main method we do have this variable called ARX.

313
00:21:18,320 --> 00:21:21,260
So this is a string array and array will be discussed later.

314
00:21:21,260 --> 00:21:26,570
But this is a, this is a method parameter and this would also be considered as a local variable.

315
00:21:26,600 --> 00:21:33,620
So in the main method we have for local variables, one is ARX and we have three object references.

316
00:21:33,620 --> 00:21:34,100
Student one.

317
00:21:34,100 --> 00:21:34,640
Student one.

318
00:21:34,640 --> 00:21:37,640
Student three All of those are local variables.

319
00:21:37,850 --> 00:21:42,740
So totally we have four local variables in the main method and here we have one.

320
00:21:43,340 --> 00:21:49,910
So and local variables are not accessible outside of the method, which means that their scope ends

321
00:21:49,910 --> 00:21:51,320
only with the method.

322
00:21:51,320 --> 00:21:58,820
So they start here at the point of declaration and their scope ends at the end of the method, so you

323
00:21:58,820 --> 00:21:59,600
cannot access it.

324
00:21:59,600 --> 00:22:04,010
So let me just have a print statement here, for instance.

325
00:22:04,900 --> 00:22:06,100
Or Let's make it.

326
00:22:06,520 --> 00:22:13,810
Student three dot next ID and let's compile and see.

327
00:22:16,720 --> 00:22:22,780
You know, it says next ID cannot find the symbol next ID, so the variable next ID is something that

328
00:22:22,810 --> 00:22:27,850
the compiler is unable to find because it is not declared in this method.

329
00:22:30,590 --> 00:22:33,110
So it's only visible here.

330
00:22:33,290 --> 00:22:34,310
So it exists.

331
00:22:34,310 --> 00:22:37,340
It is alive only as long as this method is executing.

332
00:22:37,340 --> 00:22:42,670
When you invoke the compute method, then next it will be there and its scope.

333
00:22:42,680 --> 00:22:45,770
Well, it starts here and ends here.

334
00:22:46,130 --> 00:22:48,050
That's the scope of the local variable.

335
00:22:48,230 --> 00:22:54,350
And here we have seen that the scope of static and instance variable variables will be for the entire

336
00:22:54,350 --> 00:22:54,980
class.

337
00:22:55,980 --> 00:22:57,600
Now local variables.

338
00:22:57,600 --> 00:23:02,160
One thing I mentioned earlier is that local variables do not get a default value.

339
00:23:02,370 --> 00:23:06,120
So we also saw this earlier, but let me just show it to you one more time.

340
00:23:06,120 --> 00:23:07,500
So let me remove that.

341
00:23:08,160 --> 00:23:11,280
So that's the fees, international fees.

342
00:23:11,520 --> 00:23:18,210
So here it will not get an default value, but we are trying to use it here.

343
00:23:18,210 --> 00:23:20,010
So when we compile it.

344
00:23:21,090 --> 00:23:25,530
So it says variable internal international feeds might not have been initialized.

345
00:23:25,770 --> 00:23:34,860
So it needs to be initialized here or it needs to be initialized right before or somewhere before it

346
00:23:34,860 --> 00:23:36,180
is accessed for the first time.

347
00:23:36,180 --> 00:23:38,550
It is being accessed here somewhere.

348
00:23:38,550 --> 00:23:40,260
It needs to be initialized.

349
00:23:40,260 --> 00:23:43,500
So this is also good and we know about that.

350
00:23:44,980 --> 00:23:48,700
So it compiles fine and if you execute it, you will see the output.

351
00:23:48,940 --> 00:23:54,250
So default variables do not get a sorry, local variables do not get any default values.

352
00:23:54,340 --> 00:23:58,750
But these variables static an instance do get a default values.

353
00:23:58,780 --> 00:24:02,290
So let's quickly also address why that's the case.

354
00:24:02,320 --> 00:24:08,230
Now, let's say, for instance, here they get a default value, but let's assume that they do not get

355
00:24:08,230 --> 00:24:09,250
a default value.

356
00:24:09,550 --> 00:24:12,010
So let's say it does not get a default value.

357
00:24:12,010 --> 00:24:13,600
So it is kind of undefined.

358
00:24:13,630 --> 00:24:19,680
Now, if we invoke the compute method here in the main method, when we invoke the compute method,

359
00:24:19,690 --> 00:24:23,620
so control comes here and what would ID value be right?

360
00:24:23,620 --> 00:24:25,810
Because it has not been initialized.

361
00:24:26,230 --> 00:24:27,400
It has not been initialized.

362
00:24:27,400 --> 00:24:29,680
And it is also not getting any default value.

363
00:24:29,830 --> 00:24:33,550
So it will be undefined and we may get some unexpected output.

364
00:24:35,390 --> 00:24:40,340
So for that reason, these variables, both of these variables get a different value.

365
00:24:40,520 --> 00:24:43,730
But when it comes to local variables here.

366
00:24:44,710 --> 00:24:45,370
Here.

367
00:24:45,850 --> 00:24:53,740
Here the developer is using this variable and the intention of the developer is to use this variable

368
00:24:53,740 --> 00:24:55,870
to perform some computation.

369
00:24:56,320 --> 00:25:02,290
So here, when, when he or she is declaring a variable, the scope is restricted to this method.

370
00:25:02,290 --> 00:25:04,790
And we know that methods are used for computation.

371
00:25:04,810 --> 00:25:12,670
And if they are declaring a variable, then they also it also implies that they want to use it for certain

372
00:25:12,670 --> 00:25:16,000
computation and they must be having certain value in mind.

373
00:25:16,360 --> 00:25:24,940
If by chance, if they did not, if they forgot to initialize it, and if the compiler gives some some

374
00:25:25,300 --> 00:25:31,870
initializes initialize a set with the default value, then the output when we execute it can be some

375
00:25:31,870 --> 00:25:33,000
unexpected value.

376
00:25:33,430 --> 00:25:36,490
So that might not be what the programmer is intending.

377
00:25:36,670 --> 00:25:41,410
So the compiler is forcing the programmer to initialize it with certain value.

378
00:25:41,500 --> 00:25:42,940
Now this is not documented.

379
00:25:42,940 --> 00:25:45,250
So this is just a very good guess.

380
00:25:45,250 --> 00:25:50,140
And it has I think it's a reasonable, reasonably very good guess.

381
00:25:50,470 --> 00:25:51,820
So that's the thing.

382
00:25:51,820 --> 00:25:55,540
So methods are helping performing some computation.

383
00:25:55,810 --> 00:26:02,170
And so if a developer is using a local variable, he or she must have some value in mind.

384
00:26:02,740 --> 00:26:09,340
And so they are being forced to give a value initialize with some value if they are not initializing

385
00:26:09,340 --> 00:26:09,730
it.

386
00:26:10,510 --> 00:26:11,710
So that's about it.

387
00:26:12,040 --> 00:26:12,730
Thank you.

388
00:26:12,730 --> 00:26:15,610
And I hope you have also typed this program.

389
00:26:16,240 --> 00:26:22,120
So we looked at the three different kinds of variables, and we have seen how variables can be declared

390
00:26:22,330 --> 00:26:28,330
and authority objects can be created and their state can be created and the state can be initialized.

391
00:26:28,720 --> 00:26:32,650
And we have also looked at the static variables and the local variables.

392
00:26:32,920 --> 00:26:34,120
So that's about it.

393
00:26:34,150 --> 00:26:37,930
Thank you and happy coding and I'll see you in the next lecture.

