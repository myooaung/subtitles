1
00:00:02,070 --> 00:00:02,880
Hi there.

2
00:00:02,880 --> 00:00:04,140
This is Lou.

3
00:00:04,140 --> 00:00:05,220
And welcome back.

4
00:00:05,640 --> 00:00:08,130
Now it's time to extend our project.

5
00:00:08,730 --> 00:00:15,300
We have learned a lot about concurrency, including some cool, advanced stuff that can be used in large

6
00:00:15,300 --> 00:00:16,410
production systems.

7
00:00:16,980 --> 00:00:22,020
Now let's go ahead and incorporate some of the Multithreading stuff, which we have learned in this

8
00:00:22,020 --> 00:00:23,640
chapter into our project.

9
00:00:24,270 --> 00:00:29,640
It's going to be a very simple extension related to downloading Web pages, and I hope you will like

10
00:00:29,640 --> 00:00:30,030
it.

11
00:00:30,090 --> 00:00:34,560
And we are very well aware of how to download Web pages concurrently.

12
00:00:34,770 --> 00:00:41,160
Right now, let me first switch over to my editor to show you what parts of the project we are going

13
00:00:41,160 --> 00:00:41,880
to change.

14
00:00:44,640 --> 00:00:46,920
Look, here we are in the Thriller Project.

15
00:00:46,920 --> 00:00:51,330
And you may recall this class called us view, which basically represents a UI.

16
00:00:51,540 --> 00:00:57,570
And here there is this method called Browse, which simulates the user's browsing pattern.

17
00:00:57,570 --> 00:01:03,420
So the input to this method is user and a bunch of bookmarks, and it simulates the user browsing through

18
00:01:03,420 --> 00:01:05,850
this bookmarks via this far loop.

19
00:01:06,840 --> 00:01:11,220
And here in the third loop, we are iterating through each of the bookmarks.

20
00:01:11,490 --> 00:01:18,270
Now, if the user wants to bookmark a particular item for that, we are using a randomized function.

21
00:01:18,270 --> 00:01:21,600
This particular method called get bookmark decision.

22
00:01:21,630 --> 00:01:23,070
It uses a randomized function.

23
00:01:23,070 --> 00:01:29,370
You may recall that and it decides whether this bookmark should be bookmarked by this particular user

24
00:01:29,370 --> 00:01:29,910
or not.

25
00:01:30,420 --> 00:01:33,240
If it returns a true, it means that the user has to bookmark it.

26
00:01:33,240 --> 00:01:40,110
And we are invoking the method save user bookmark, which takes two parameters user and bookmark and

27
00:01:40,110 --> 00:01:44,310
it will save the bookmark for this particular user.

28
00:01:44,580 --> 00:01:47,820
It establishes a relationship and it is inside the controller.

29
00:01:48,120 --> 00:01:53,310
It means that from the view we are invoking the controller, which is how the MVC pattern works and

30
00:01:53,310 --> 00:01:54,120
let's go here.

31
00:01:54,720 --> 00:01:57,060
So here we are in the bookmark controller.

32
00:01:57,070 --> 00:02:03,210
From the bookmark controller, we are invoking a similarly named method called save user bookmark.

33
00:02:03,210 --> 00:02:08,759
Inside the manager manager has the business logic and here is a business logic.

34
00:02:09,150 --> 00:02:15,480
Here there is this entity called user bookmark, which maintains the relationship between the user and

35
00:02:15,480 --> 00:02:18,030
the bookmark that he or she is interested in.

36
00:02:18,450 --> 00:02:23,130
So we have the user bookmark and we are setting the user and we are setting the bookmark and we are

37
00:02:23,130 --> 00:02:24,420
checking here.

38
00:02:24,450 --> 00:02:31,200
If the bookmark is an instance of web link bookmark, we know that can be a web link or a movie or a

39
00:02:31,200 --> 00:02:31,680
book.

40
00:02:31,830 --> 00:02:37,290
Now if it is a web link, in that case, we are actually downloading the web page.

41
00:02:37,740 --> 00:02:39,780
So this is the interesting part for us.

42
00:02:40,500 --> 00:02:43,740
And at the very end, we are also saving the user bookmark.

43
00:02:44,160 --> 00:02:46,110
So that's not relevant here.

44
00:02:46,230 --> 00:02:53,850
But we are downloading the web page and this is happening for all of the bookmarks that the user is

45
00:02:53,850 --> 00:02:54,690
interested in.

46
00:02:54,720 --> 00:03:00,690
So now what we want to do is now that we know how to download Web pages concurrently.

47
00:03:00,930 --> 00:03:07,950
So let's go ahead and make that change so that we can download all of the bookmarks in a concurrent

48
00:03:07,950 --> 00:03:08,400
way.

49
00:03:08,520 --> 00:03:10,800
But let's not do it here.

50
00:03:10,980 --> 00:03:14,760
This downloading process will be done as a separate job.

51
00:03:14,760 --> 00:03:17,880
We will do it independently of this particular code.

52
00:03:19,380 --> 00:03:21,600
So we will write a background job for that.

53
00:03:21,600 --> 00:03:27,270
And that would be the extension and the background background job where we will actually download these

54
00:03:27,270 --> 00:03:28,950
bookmarks in a concurrent page.

55
00:03:29,760 --> 00:03:31,770
Now here we are downloading the web page.

56
00:03:32,220 --> 00:03:32,820
Here it is.

57
00:03:32,820 --> 00:03:34,110
We are downloading the web page.

58
00:03:34,110 --> 00:03:41,010
And if the web page is not equal to null, then we are writing it to disk and we are going to make only

59
00:03:41,010 --> 00:03:43,890
the downloading pass part to work concurrently.

60
00:03:44,130 --> 00:03:47,880
So if there are multiple web links, then we are going to download them concurrently.

61
00:03:48,090 --> 00:03:51,630
But the writing to the disk part will be done sequentially.

62
00:03:51,780 --> 00:03:54,030
So we are going to change that here.

63
00:03:54,030 --> 00:03:55,740
So let me just comment this out.

64
00:03:57,580 --> 00:04:04,660
And now let's head back to the slides to look at the specific goals for this extension.

65
00:04:07,160 --> 00:04:07,460
Okay.

66
00:04:07,520 --> 00:04:13,970
Now, the goal for this extension is to implement a background job that would download Web pages concurrently.

67
00:04:15,290 --> 00:04:21,680
Specifically the background job should be able to download all the web links in the system and we can

68
00:04:21,680 --> 00:04:23,360
use a boolean flag for that.

69
00:04:23,660 --> 00:04:28,280
And if the Boolean flag is true, then it will download all the web links in the system.

70
00:04:28,850 --> 00:04:35,630
Now, when we are starting the system for the very first time, so we have some web links and we are

71
00:04:35,630 --> 00:04:38,450
starting the system, the server for the very first time.

72
00:04:38,480 --> 00:04:44,300
In that case, we might want to download all the web links because the software itself is being launched

73
00:04:44,300 --> 00:04:45,530
for the very first time.

74
00:04:46,460 --> 00:04:50,810
So we need this particular task of downloading all the web links.

75
00:04:52,640 --> 00:04:53,840
On the background job.

76
00:04:53,840 --> 00:04:58,370
We'll also periodically download any new web links added into the system.

77
00:04:58,940 --> 00:05:05,660
Now it's natural to expect that in a very heavily trafficked Web site, it's common for new bookmarks

78
00:05:05,660 --> 00:05:07,730
to be saved every few seconds.

79
00:05:07,730 --> 00:05:08,330
Right.

80
00:05:08,540 --> 00:05:14,630
So the background job would periodically check if any new Web links were added since the last time it

81
00:05:14,630 --> 00:05:16,430
performed a download operation.

82
00:05:18,020 --> 00:05:21,570
And finally, we want to place time limits on the downloading process.

83
00:05:21,590 --> 00:05:23,570
And we very well know how to do that.

84
00:05:23,990 --> 00:05:28,340
And we will be using the time to invoke all approach that we have seen earlier.

85
00:05:28,850 --> 00:05:31,910
So we are going to use a lot of code from that particular demo.

86
00:05:32,650 --> 00:05:39,020
Now note that in professional environments, background jobs are used to do things like sending out

87
00:05:39,020 --> 00:05:46,070
marketing emails or performing analytics on the data that is generated by the website or even download

88
00:05:46,070 --> 00:05:48,410
web pages as we are attempting to do here.

89
00:05:49,260 --> 00:05:56,880
Now in a framework like Spring, we can use a library called Quad Scheduler, which is basically a background

90
00:05:56,880 --> 00:06:01,710
job scheduling library, and it can run our Java programs periodically.

91
00:06:02,280 --> 00:06:06,660
Let me actually show you the setup just so that you can get an idea.

92
00:06:07,230 --> 00:06:13,080
But we are not going to implement the quad scheduler here because we are not implementing spring framework.

93
00:06:13,350 --> 00:06:13,700
Right.

94
00:06:13,710 --> 00:06:15,260
We are not using the spring framework.

95
00:06:15,270 --> 00:06:18,660
So we will write our background job in a manual way.

96
00:06:18,660 --> 00:06:19,930
It works in a manual way.

97
00:06:19,950 --> 00:06:25,230
But I just wanted to show you how the quad scheduler looks like within the spring environment.

98
00:06:27,640 --> 00:06:32,860
Look, this is the code base for the real trivial project, not the one which we are implementing now,

99
00:06:32,860 --> 00:06:34,630
which is a simulation of this.

100
00:06:34,660 --> 00:06:38,890
Now here in the Real Project, we are actually using the spring framework.

101
00:06:38,950 --> 00:06:43,750
And within that framework we have this file called us schedulers dot XML.

102
00:06:44,230 --> 00:06:49,180
So it's an XML file and we can see that there is some XML content here.

103
00:06:49,630 --> 00:06:53,140
Now here, these are the things that you can look at.

104
00:06:53,170 --> 00:06:57,400
Now here there is this class called this movie index delta scheduler.

105
00:06:57,670 --> 00:07:03,970
Let's not worry what that does, but it's basically a background job and we want this background job

106
00:07:03,970 --> 00:07:05,650
to start at some point.

107
00:07:05,680 --> 00:07:12,280
Now, whenever the web server is going to be started after it starts, we want to start this.

108
00:07:12,280 --> 00:07:18,430
We want to launch this particular background job and we want to run it once every 2 minutes.

109
00:07:18,550 --> 00:07:20,920
And for that, the spring framework.

110
00:07:20,920 --> 00:07:26,800
Within the spring framework, we are using this job scheduling library called squad scheduler.

111
00:07:26,830 --> 00:07:31,900
So here this is one of the classes from that from that particular library.

112
00:07:31,900 --> 00:07:33,520
It's called a simple trigger bean.

113
00:07:34,090 --> 00:07:37,900
But the actual Java program, which we have written, is actually this one.

114
00:07:37,900 --> 00:07:42,550
So this is the background job and this is just some class from the third party library.

115
00:07:43,030 --> 00:07:49,840
And we want this particular background job to run once every once every 2 minutes.

116
00:07:50,290 --> 00:07:55,990
So we are we are specifying all that information in this particular XML file.

117
00:07:57,010 --> 00:08:01,920
Now, so this is the job scheduling class class that we are using.

118
00:08:01,930 --> 00:08:08,260
And we are also saying that we want to invoke this particular method called process within this job

119
00:08:08,260 --> 00:08:08,950
scheduler.

120
00:08:09,580 --> 00:08:12,440
So this particular class has a method.

121
00:08:12,490 --> 00:08:13,960
Let me just open that.

122
00:08:15,870 --> 00:08:16,830
Here it is.

123
00:08:19,030 --> 00:08:23,050
It just has a simple method called process and it is doing something here.

124
00:08:23,290 --> 00:08:27,280
So, so we just want to invoke that particular method.

125
00:08:27,280 --> 00:08:30,190
So we are also specifying the method name also.

126
00:08:30,820 --> 00:08:33,789
And we want to run it once every 2 minutes.

127
00:08:34,000 --> 00:08:38,760
So that's the that's how it is implemented within the spring framework.

128
00:08:38,770 --> 00:08:44,030
So whenever you learn about spring spring framework, you might also learn about scheduler.

129
00:08:44,770 --> 00:08:44,900
Okay?

130
00:08:45,070 --> 00:08:51,730
But now for our project we are going to implement this job scheduler and we are going to we are also

131
00:08:51,730 --> 00:08:58,270
going to make it run once every some specified time, but we will do it manually since we are not using

132
00:08:58,300 --> 00:09:01,450
either the spring framework or the scheduler.

133
00:09:01,690 --> 00:09:04,300
So we'll just we are just going to simulate this.

134
00:09:04,300 --> 00:09:08,980
So but that will give you a pretty good idea about how background jobs work.

135
00:09:09,790 --> 00:09:12,850
So let me switch over to our project.

136
00:09:12,850 --> 00:09:13,810
Here it is.

137
00:09:14,200 --> 00:09:18,340
So the first thing is let's look at this class called us web link.

138
00:09:18,370 --> 00:09:25,720
You may recall that web link is from this particular package called com dot semantics .3. entities.

139
00:09:25,720 --> 00:09:31,180
So it is an entity and it extends bookmark and it also implements shareable.

140
00:09:31,180 --> 00:09:33,100
You may recall this particular interface.

141
00:09:33,580 --> 00:09:37,640
So Web link is basically a bookmark, right?

142
00:09:37,660 --> 00:09:40,660
And other entities are book and movie.

143
00:09:40,870 --> 00:09:43,300
And we also have some other entities like user.

144
00:09:44,020 --> 00:09:46,690
Now previously there were only two fields.

145
00:09:46,690 --> 00:09:51,670
Here you are and host and a new field called the HTML page has been added.

146
00:09:51,880 --> 00:09:59,530
Now you may recall from our demo that within our demos in the Downloader Indexer programs, we also

147
00:09:59,530 --> 00:10:02,770
had a static nested class called as Web Link, right?

148
00:10:02,800 --> 00:10:04,330
An asset class called Web Link.

149
00:10:04,600 --> 00:10:08,260
And we and it also had a field called HTML page.

150
00:10:08,260 --> 00:10:15,820
So when the downloader thread or the task has downloaded a web page corresponding to a particular URL,

151
00:10:15,970 --> 00:10:22,690
we were storing that particular downloaded web page and this variable HTML page by invoking said HTML

152
00:10:22,690 --> 00:10:23,200
page.

153
00:10:24,040 --> 00:10:25,840
So we also need that.

154
00:10:25,840 --> 00:10:29,740
So that's why I introduced this particular field called HTML page.

155
00:10:30,430 --> 00:10:33,910
I will also provide this class in the resources section.

156
00:10:34,180 --> 00:10:40,660
Now, apart from that HTML page, I also introduced this particular enum called this download status

157
00:10:40,660 --> 00:10:44,800
and it has for fields not attempted success failed and not eligible.

158
00:10:45,850 --> 00:10:52,270
And there is this field called a download status and its type is this enum type download status.

159
00:10:52,540 --> 00:11:00,070
By default it is not attempted, which means that a particular web link instance by default it it will

160
00:11:00,070 --> 00:11:03,520
be in this state, which means that it has not been downloaded yet.

161
00:11:03,520 --> 00:11:09,940
An attempt has not been made to download it, but once an attempt has been made so and if the page is

162
00:11:09,940 --> 00:11:13,630
downloaded successfully, then the state will be changed to success.

163
00:11:14,140 --> 00:11:18,940
Or if the webpage could not be downloaded, then it would be changed to fail.

164
00:11:20,170 --> 00:11:26,950
Now, sometimes the web page may not be downloaded, cannot be downloaded in the sense if it is a PDF

165
00:11:26,950 --> 00:11:31,780
document, we may not want to download it, which is actually the case in our project, in which case

166
00:11:31,780 --> 00:11:35,170
we will just say that the download status is not eligible.

167
00:11:36,400 --> 00:11:38,500
So those are the different states here.

168
00:11:40,300 --> 00:11:41,230
And.

169
00:11:42,760 --> 00:11:43,150
Yeah.

170
00:11:43,150 --> 00:11:49,270
Here, for example, earlier I commented this out and here we were saying that we want to download the

171
00:11:49,270 --> 00:11:52,930
page only if it does not end with the pdf.

172
00:11:53,140 --> 00:11:55,300
So we want to download only HTML pages.

173
00:11:55,600 --> 00:12:02,110
So I already commented that commented on that code because we want to change that now.

174
00:12:02,110 --> 00:12:04,300
So this is what we have in the web link.

175
00:12:05,620 --> 00:12:14,020
So the goal is for the we have looked at the specific goals for the downloader job and the background

176
00:12:14,020 --> 00:12:15,610
job and the background job itself.

177
00:12:15,610 --> 00:12:19,240
We will see it in the next next lecture because there is a lot of code to write for that.

178
00:12:19,540 --> 00:12:26,530
So in this particular lecture we are going to make some changes in this particular class called us bookmark.

179
00:12:27,250 --> 00:12:34,310
So Bookmark now is basically a dove class and it interacts with the database, right?

180
00:12:34,330 --> 00:12:39,310
All the classes interacts with the database and in our case the database is nothing but that data store

181
00:12:39,310 --> 00:12:39,760
class.

182
00:12:39,760 --> 00:12:40,840
You may recall that.

183
00:12:40,840 --> 00:12:44,680
So the data store class has all the data that we need, right?

184
00:12:44,980 --> 00:12:49,360
And so the classes interact with the, with the data store.

185
00:12:49,840 --> 00:12:53,290
It means that they will fetch data from the database.

186
00:12:53,530 --> 00:12:56,710
That's what they are going to simulate in an ideal real world.

187
00:12:56,710 --> 00:12:58,660
We will have a SQL queries here.

188
00:12:59,020 --> 00:13:03,130
Now, the background job, if you recall, there are two tasks.

189
00:13:03,130 --> 00:13:06,610
One is that we need to download all the web links.

190
00:13:06,940 --> 00:13:09,490
So that was one of the, one of the requirements.

191
00:13:09,490 --> 00:13:11,380
So we need to provide a method for that.

192
00:13:11,560 --> 00:13:16,720
And another requirement is it needs to periodically download any new web links.

193
00:13:17,050 --> 00:13:26,180
So what that means is we need to download only those web links which were added since the time we we

194
00:13:26,200 --> 00:13:28,840
downloaded the last set of Web pages.

195
00:13:29,380 --> 00:13:37,000
So all those new Web links will have the status of not attempted and all the downloaded ones where an

196
00:13:37,000 --> 00:13:41,590
attempt has been made, they would have a status of success failed or not eligible.

197
00:13:41,590 --> 00:13:44,140
But for the new ones it would be not attempted.

198
00:13:44,140 --> 00:13:47,050
And we want to download only those web links.

199
00:13:47,110 --> 00:13:53,380
So we need a method to get all the web links which have this status of not attempted.

200
00:13:54,370 --> 00:13:59,860
So when the background job is going to periodically run, it's going to look for only those web links

201
00:13:59,860 --> 00:14:01,120
which have the status.

202
00:14:01,450 --> 00:14:07,360
So basically we need to methods here and the template that the steps are already provided here in the

203
00:14:07,360 --> 00:14:08,620
bookmark class.

204
00:14:08,620 --> 00:14:17,710
So one of them is get all web links and in reality we will actually have an SQL query here, but or

205
00:14:17,820 --> 00:14:19,330
or a hibernate query.

206
00:14:19,360 --> 00:14:25,510
Hibernate Hibernate is also a library which can also be used for fetching data from the database.

207
00:14:26,050 --> 00:14:32,600
So for now, since we are using the data store, so we are going to fetch the data from our data store.

208
00:14:33,190 --> 00:14:39,010
Okay, so get all web links is one method and the second method is get web links on both.

209
00:14:39,010 --> 00:14:46,120
These methods will be invoked from the background job, so both of them will return a list of web links.

210
00:14:46,300 --> 00:14:50,920
So that list will be stored in this data structure list of web links.

211
00:14:50,920 --> 00:14:52,210
So it is called as a result.

212
00:14:52,780 --> 00:14:53,740
So let's go ahead.

213
00:14:53,740 --> 00:14:59,020
And now within the data store class, you open the data store.

214
00:15:03,850 --> 00:15:08,980
So the DataStore class has all the bookmarks stored within this.

215
00:15:09,400 --> 00:15:14,770
And this in this data structure, which is a list of list of bookmarks.

216
00:15:14,920 --> 00:15:15,670
It's called bookmarks.

217
00:15:15,670 --> 00:15:16,420
Here it is.

218
00:15:16,780 --> 00:15:19,930
So it is a list of list of bookmarks.

219
00:15:20,830 --> 00:15:27,520
And so each element is a list of bookmarks and the zero element is basically web links.

220
00:15:29,650 --> 00:15:34,270
Because those are getting populated here, then we are invoking this method load data.

221
00:15:34,270 --> 00:15:40,090
We are initially loading the users, then we are loading web lengths, then the movies and the books.

222
00:15:40,510 --> 00:15:47,290
So the list of web links are actually being stored at the in the zero position, the list of web web

223
00:15:47,290 --> 00:15:48,790
links in the zero eight position.

224
00:15:48,790 --> 00:15:57,760
And this in this list and in the first position, it will be storing a list of movies which are also

225
00:15:57,760 --> 00:15:58,510
bookmarks.

226
00:15:58,720 --> 00:16:03,970
And finally, in the second position, list of books will be stored, but we are interested only in

227
00:16:03,970 --> 00:16:05,170
the list of web links.

228
00:16:05,170 --> 00:16:10,810
So we need to get the we need to invoke this method and we need to get the zeroth element.

229
00:16:11,230 --> 00:16:14,020
So that's what we need to do here in the bookmarks dot.

230
00:16:14,050 --> 00:16:17,350
So let's go ahead and invoke that particular method here.

231
00:16:27,720 --> 00:16:27,950
Okay.

232
00:16:27,990 --> 00:16:29,070
So this is a method.

233
00:16:29,700 --> 00:16:32,880
It returns a list of list of bookmarks.

234
00:16:34,170 --> 00:16:36,540
And we just need the zero element.

235
00:16:36,540 --> 00:16:37,680
So let's copy this.

236
00:16:40,030 --> 00:16:41,530
Let's call it us all.

237
00:16:42,610 --> 00:16:43,480
Web links.

238
00:16:48,740 --> 00:16:51,080
Now we need to return a list of weblink.

239
00:16:51,080 --> 00:16:51,860
But here it is.

240
00:16:51,860 --> 00:16:52,970
A list of bookmark.

241
00:16:53,390 --> 00:16:54,200
So.

242
00:16:56,870 --> 00:16:58,130
We need to Doncaster.

243
00:17:08,710 --> 00:17:10,250
And it goes into result.

244
00:17:19,329 --> 00:17:19,869
So that's it.

245
00:17:19,869 --> 00:17:21,369
That's about that method.

246
00:17:21,819 --> 00:17:23,430
Actually, this needs to go here.

247
00:17:23,440 --> 00:17:24,250
I'm sorry.

248
00:17:27,980 --> 00:17:29,540
This needs to go here.

249
00:17:35,350 --> 00:17:35,610
Okay.

250
00:17:35,680 --> 00:17:41,560
So next we need to get all the Web links, given the status.

251
00:17:42,280 --> 00:17:50,380
So what we can do is we can invoke this method, get all Web links, and we can and then we can filter

252
00:17:50,380 --> 00:17:50,960
them out.

253
00:17:50,980 --> 00:17:57,640
We can get only those web links which have this download status, which would be this one.

254
00:17:57,650 --> 00:17:58,210
What is it?

255
00:17:58,720 --> 00:17:59,680
Which would be this one?

256
00:17:59,680 --> 00:18:00,490
Not a template.

257
00:18:00,490 --> 00:18:02,470
So that would be passed as an argument.

258
00:18:02,890 --> 00:18:04,540
So let's go ahead and do that.

259
00:18:29,240 --> 00:18:30,860
So let's just say if.

260
00:18:32,460 --> 00:18:34,590
Web link dot.

261
00:18:36,690 --> 00:18:38,060
Get download status.

262
00:18:38,460 --> 00:18:39,630
It equals.

263
00:18:42,360 --> 00:18:44,310
The input download status.

264
00:18:46,470 --> 00:18:49,020
Then we need to add it here.

265
00:18:52,630 --> 00:18:52,860
Okay.

266
00:18:52,930 --> 00:18:53,640
So that's it.

267
00:18:53,650 --> 00:19:01,090
And reality, this would translate into a very simple SQL query, but now we have to write this.

268
00:19:01,930 --> 00:19:05,200
So I guess that's about it for this particular lecture.

269
00:19:05,500 --> 00:19:14,950
And in the next lecture we will actually go ahead and we will implement the the background job and we

270
00:19:14,950 --> 00:19:16,390
will do that in the next lecture.

271
00:19:16,390 --> 00:19:17,530
So that's about it.

272
00:19:17,530 --> 00:19:19,270
I'll see you in the next lecture.

