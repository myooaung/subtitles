WEBVTT
1
00:00:02.110 --> 00:00:03.020
Hi there.

2
00:00:03.040 --> 00:00:04.180
This is De La Rue.

3
00:00:04.180 --> 00:00:05.110
And welcome back.

4
00:00:05.350 --> 00:00:11.860
Let's now extend our demo from the previous lecture where we were grouping a stream of elements and

5
00:00:11.860 --> 00:00:16.570
we looked at the two methods to map on grouping by from the collectors class.

6
00:00:16.570 --> 00:00:22.690
And both these methods were returning an instance of the collector interface which the collect method

7
00:00:22.690 --> 00:00:25.390
was using in order to group the stream elements.

8
00:00:25.900 --> 00:00:31.600
These methods were really interesting because they were helping us to group the elements of the collection

9
00:00:31.600 --> 00:00:34.510
and we were doing it in a declarative way.

10
00:00:34.840 --> 00:00:40.900
So before Java eight, we had to do it with imperative style of coding, which we know is cumbersome.

11
00:00:41.500 --> 00:00:45.790
So these methods were helping us to do it in a very elegant way, in a declarative style.

12
00:00:46.120 --> 00:00:51.550
So we looked at those two methods, and in this particular lecture we are just going to look at the

13
00:00:51.580 --> 00:00:52.910
grouping by method.

14
00:00:52.930 --> 00:00:55.940
So we are done with looking at the two map method.

15
00:00:55.960 --> 00:01:01.630
So now the focus will be only on the grouping by and we are going to look at its overloaded version.

16
00:01:01.810 --> 00:01:04.250
So we looked at the first version in the last lecture.

17
00:01:04.269 --> 00:01:10.780
Now we are going to look at the second version and it will help us to generate more sophisticated maps.

18
00:01:11.080 --> 00:01:18.640
So one of the things that we can do is we can generate multi level maps, so we can do multi level grouping,

19
00:01:18.640 --> 00:01:21.850
which means that we can have map off maps.

20
00:01:22.000 --> 00:01:24.810
So generally we have map with key value pairs.

21
00:01:24.820 --> 00:01:28.660
Now with multi level grouping, the value can be another map.

22
00:01:29.080 --> 00:01:30.660
So that's one thing that we will see.

23
00:01:30.670 --> 00:01:37.240
But more importantly, we will also see that we can generate summaries of the values so we have the

24
00:01:37.240 --> 00:01:38.260
key value pairs.

25
00:01:38.260 --> 00:01:44.920
And for the value, if we want to summarize the list of values associated with the particular key,

26
00:01:45.250 --> 00:01:48.190
then we can use the second version of the grouping by.

27
00:01:48.190 --> 00:01:50.010
And so we are going to look at that also.

28
00:01:50.020 --> 00:01:51.610
So that's the interesting part.

29
00:01:52.240 --> 00:01:55.300
Let's look at what we had in the previous lecture.

30
00:01:56.460 --> 00:02:03.900
So at the very end we looked at this, so we were grouping the stream of elements by ratings and we

31
00:02:03.900 --> 00:02:10.949
have looked at the grouping by method and it was generating a map of double and a list of books.

32
00:02:10.949 --> 00:02:18.030
Double is the rating and list of books are the list of books that fall under each of those ratings.

33
00:02:18.030 --> 00:02:18.540
Right.

34
00:02:18.540 --> 00:02:22.770
So this is what we have looked at and the grouping bias here.

35
00:02:23.860 --> 00:02:31.570
So the thing is, if a particular rating has only a single book, then the value would be a list with

36
00:02:31.570 --> 00:02:32.980
that single book.

37
00:02:33.430 --> 00:02:39.790
Now, if there are multiple books that have the same rating, then those books will be accumulated into

38
00:02:39.790 --> 00:02:40.390
that list.

39
00:02:40.750 --> 00:02:46.930
So what it means is if we have multiple books with the same rating, then there is going to be a collision

40
00:02:46.930 --> 00:02:47.770
of the keys.

41
00:02:48.190 --> 00:02:53.560
And the collision resolution strategy in this case is to accumulate them into a list.

42
00:02:53.680 --> 00:02:56.800
And that is being done in an implicit way.

43
00:02:57.340 --> 00:03:02.260
Now, we also looked at the same logic using to map here.

44
00:03:02.260 --> 00:03:04.750
So we accomplish the same thing using two map.

45
00:03:05.020 --> 00:03:10.900
But with two map, we had to explicitly specify the collision resolution strategy.

46
00:03:11.290 --> 00:03:18.190
If you recall, we had all of these expressions and this was cumbersome but with grouping by we did

47
00:03:18.190 --> 00:03:19.450
not have to do that.

48
00:03:19.450 --> 00:03:21.760
So it was taken care of implicitly.

49
00:03:21.910 --> 00:03:26.680
And the default collision resolution strategy is to accumulate into a list.

50
00:03:27.790 --> 00:03:32.340
So the thing is so that's the main difference with to map.

51
00:03:32.350 --> 00:03:35.830
We do not have a default collision resolution strategy.

52
00:03:35.830 --> 00:03:39.520
We have to explicitly specify it in this way.

53
00:03:39.550 --> 00:03:41.290
We call it as a merger function.

54
00:03:41.290 --> 00:03:42.760
It's called as a merger function.

55
00:03:42.760 --> 00:03:44.680
And we have done it here.

56
00:03:45.630 --> 00:03:46.440
Here it is.

57
00:03:46.620 --> 00:03:52.110
Now, if you do not provide this kind of a collision resolution strategy and if there is a collision,

58
00:03:52.110 --> 00:03:57.100
we have also seen that it would generate a one time exception called illegal state exception.

59
00:03:57.120 --> 00:04:02.970
So if we are using to map and if we are expecting some kind of a collision to happen, then we need

60
00:04:02.970 --> 00:04:03.780
to provide this.

61
00:04:04.020 --> 00:04:05.430
Otherwise we will end up with an error.

62
00:04:05.730 --> 00:04:11.580
So to map is good if we are generating simple key value pairs and you are not expecting any collisions,

63
00:04:12.000 --> 00:04:17.070
but if you think there are going to be some collisions, then it is better to go with grouping by and

64
00:04:17.070 --> 00:04:19.200
it is very simple implementation.

65
00:04:20.399 --> 00:04:27.630
Now there are also overloaded versions of grouping by and if you want to change the default collision

66
00:04:27.630 --> 00:04:33.360
resolution strategy, let's say if you want to accumulate into a set, then we can use the an overloaded

67
00:04:33.360 --> 00:04:34.530
version of the grouping by.

68
00:04:34.560 --> 00:04:36.870
So let's look at the overloaded versions here.

69
00:04:36.870 --> 00:04:41.640
So this is the API of the collectors class and we can see the grouping by methods here.

70
00:04:41.640 --> 00:04:44.460
So this is the first version which we have already seen.

71
00:04:45.090 --> 00:04:50.940
It just takes a function here and they are calling it as classifier, but it is for identifying the

72
00:04:50.940 --> 00:04:51.930
keys here.

73
00:04:52.110 --> 00:04:57.720
So it will help us to classify the group of elements based on some key.

74
00:04:58.500 --> 00:05:02.490
So that key is what is being identified via this function.

75
00:05:02.910 --> 00:05:07.740
Then there are these two overloaded versions and this is what we are going to look at and we will also

76
00:05:07.740 --> 00:05:08.370
look at this one.

77
00:05:08.370 --> 00:05:12.840
Also, it's just a simple extension, but this one takes only two parameters.

78
00:05:12.840 --> 00:05:14.460
This one is taking three parameters.

79
00:05:14.460 --> 00:05:17.850
So in addition to the function here, the classifier.

80
00:05:18.770 --> 00:05:19.370
Here.

81
00:05:19.370 --> 00:05:20.780
There is another collector.

82
00:05:20.810 --> 00:05:26.570
Just recall that grouping by here is returning a collector and the first parameter is a off type function

83
00:05:26.570 --> 00:05:28.070
which identifies the key.

84
00:05:28.070 --> 00:05:36.320
And the second parameter is another collector, and it is going to essentially collect the values that

85
00:05:36.320 --> 00:05:38.000
are associated with the key.

86
00:05:38.630 --> 00:05:43.400
So it's going to perform another round of collection on the stream elements.

87
00:05:43.430 --> 00:05:48.830
Now here you can specify something like to set recall that other than to list.

88
00:05:48.830 --> 00:05:50.720
We also have the two set method.

89
00:05:51.170 --> 00:05:57.370
If you are going to pass to set here, then values will be accumulated into a set.

90
00:05:57.380 --> 00:05:59.240
So that's something that we will look at.

91
00:06:00.090 --> 00:06:05.100
Now similarly you have the key value pairs and we are saying that this collector will be applied on

92
00:06:05.100 --> 00:06:05.910
the values.

93
00:06:06.120 --> 00:06:11.250
So if you want to summarize those values, then you can use a certain collector for that.

94
00:06:11.610 --> 00:06:15.840
Say, for example, we were grouping the stream of books by rating.

95
00:06:15.930 --> 00:06:19.050
So for a particular rating, we will have certain books.

96
00:06:19.050 --> 00:06:25.800
And if we want to get the average price of all of those books, then we can summarize it using a method

97
00:06:25.800 --> 00:06:27.450
here called averaging.

98
00:06:28.260 --> 00:06:31.460
If the sense the price is double, we can use averaging double.

99
00:06:31.470 --> 00:06:35.000
But there are also other variants like averaging and averaging long.

100
00:06:35.010 --> 00:06:39.640
So that's how you can summarize the list of values associated with the keys.

101
00:06:39.660 --> 00:06:44.010
And there are also other methods like summing end, just like averaging.

102
00:06:44.010 --> 00:06:48.860
We also have summing long and summing end and summing double to.

103
00:06:49.020 --> 00:06:54.750
Then there is max by min by which can be used to find the maximum or the minima of the values.

104
00:06:55.050 --> 00:06:56.340
Then there is also counting.

105
00:06:56.340 --> 00:06:57.660
We will also look at counting.

106
00:06:57.660 --> 00:07:05.760
So it will tell us the size of the list of values associated with the keys so we can use we can generate

107
00:07:05.760 --> 00:07:12.030
those kinds of summaries for the values using this second version of the grouping by so they call it

108
00:07:12.030 --> 00:07:14.540
as the downstream collector assets.

109
00:07:14.700 --> 00:07:18.000
And these are all the different methods and you should take a look at them.

110
00:07:18.120 --> 00:07:23.400
And in this demo we will also look at another method called this partitioning by partitioning by also

111
00:07:23.400 --> 00:07:27.750
generates a map, but it only generates two mappings.

112
00:07:27.750 --> 00:07:32.550
So it takes a predicate and based on the predicate, it generates two mappings.

113
00:07:32.550 --> 00:07:39.210
And one of them, one of the mapping will have a key as the value true and all the values, all the

114
00:07:39.210 --> 00:07:43.440
list of all the items associated with that particular boolean value.

115
00:07:43.740 --> 00:07:49.110
So it can be the keys will be only true or false and it will be associated with certain values.

116
00:07:49.110 --> 00:07:51.570
Those keys will be associated with certain values.

117
00:07:51.750 --> 00:07:53.110
So that's the partitioning by.

118
00:07:53.130 --> 00:07:56.640
So we are also going to look at partitioning by now.

119
00:07:56.640 --> 00:07:58.200
So let's go ahead here.

120
00:07:58.770 --> 00:08:02.910
And first thing is, let's go ahead and change this.

121
00:08:04.850 --> 00:08:06.320
It's actually take the whole thing.

122
00:08:08.910 --> 00:08:10.920
Now, let's call it.

123
00:08:11.770 --> 00:08:12.150
Two.

124
00:08:12.220 --> 00:08:18.820
So the first thing is let's change the default collision resolution strategy and let's collect it into

125
00:08:18.820 --> 00:08:19.590
a set.

126
00:08:19.600 --> 00:08:23.260
And we said that we need to use the overloaded version of this.

127
00:08:23.500 --> 00:08:28.390
So here we will say to set.

128
00:08:29.280 --> 00:08:32.330
And this would be a set.

129
00:08:33.659 --> 00:08:36.000
So this is coming from the collectors class.

130
00:08:36.539 --> 00:08:38.549
So there is a static import of this.

131
00:08:39.090 --> 00:08:41.039
And here this would be two.

132
00:08:41.760 --> 00:08:44.070
And this would be set.

133
00:08:44.810 --> 00:08:45.320
Okay.

134
00:08:45.920 --> 00:08:48.260
And we are simply printing the values here.

135
00:08:48.620 --> 00:08:55.100
Now, just note that internally the first version of the grouping by uses this particular version,

136
00:08:55.100 --> 00:08:57.410
but implicitly it would pass to list.

137
00:08:57.740 --> 00:08:58.970
So that's the reason.

138
00:08:58.970 --> 00:09:02.570
By default, it's going to get a list of books here.

139
00:09:02.810 --> 00:09:04.610
So let me just run this.

140
00:09:06.670 --> 00:09:07.380
Here it is.

141
00:09:07.390 --> 00:09:10.810
So it's just printing the values and everything is fine here.

142
00:09:11.110 --> 00:09:14.620
Now, let's say this one actually returns a hash map.

143
00:09:14.650 --> 00:09:20.710
Now, let's say if we want a tree map, then the third version of the grouping by will be used.

144
00:09:20.860 --> 00:09:22.780
Here is the third version.

145
00:09:24.430 --> 00:09:27.580
This one and this third version just takes a supplier.

146
00:09:27.580 --> 00:09:30.670
So we need to supply a tree map.

147
00:09:30.970 --> 00:09:34.030
So we would say tree map new.

148
00:09:34.030 --> 00:09:36.520
So that's the constructor reference.

149
00:09:36.970 --> 00:09:43.120
So now if you see the values will be sorted by rating, here it is.

150
00:09:43.120 --> 00:09:47.860
Now you can see that the different ratings are already in ascending order because we are using tree

151
00:09:47.860 --> 00:09:48.310
map.

152
00:09:48.970 --> 00:09:49.600
3.9.

153
00:09:49.600 --> 00:09:50.590
4.1.

154
00:09:51.580 --> 00:09:53.350
And so on, 4.3 and so on.

155
00:09:53.920 --> 00:09:58.210
So that's how you would use a different collision resolution strategy.

156
00:09:58.300 --> 00:10:05.560
Now let's focus on the summary part, on summarizing the values associated with keys, and let's say

157
00:10:05.560 --> 00:10:10.300
we want to get the counts associated with each of the ratings.

158
00:10:10.300 --> 00:10:12.160
So we are grouping by ratings.

159
00:10:12.160 --> 00:10:16.930
And those ratings, each of those ratings have certain books that fall under that rating.

160
00:10:16.930 --> 00:10:20.290
And we want to get a count of each of those books, list of books.

161
00:10:21.170 --> 00:10:22.790
So let's take this.

162
00:10:26.980 --> 00:10:29.320
Now, let's call it as a ratings.

163
00:10:30.510 --> 00:10:31.500
Count map.

164
00:10:32.640 --> 00:10:34.170
This part is just the same.

165
00:10:35.150 --> 00:10:41.000
Now here, let's say collectors not counting.

166
00:10:42.450 --> 00:10:46.840
And here counting would return a long.

167
00:10:46.890 --> 00:10:48.600
So this is what we have.

168
00:10:50.120 --> 00:10:54.110
And let's just print the map directly.

169
00:10:54.470 --> 00:10:57.340
So the two string method on the map will be invoked.

170
00:10:57.350 --> 00:10:58.850
So let's just say this.

171
00:11:00.900 --> 00:11:03.810
It's just a random variable as it is.

172
00:11:05.770 --> 00:11:06.210
Okay.

173
00:11:06.340 --> 00:11:08.800
So let me just execute it.

174
00:11:09.280 --> 00:11:10.270
And here it is.

175
00:11:10.270 --> 00:11:12.850
And you can see that the count values.

176
00:11:12.850 --> 00:11:18.490
So for the rating 4.5, there are two books for the rating, 4.9 there are four for books.

177
00:11:20.380 --> 00:11:22.330
So that's how you would you do it?

178
00:11:22.420 --> 00:11:28.570
And the counting returns a collector, which means that it can also be used directly with the collect

179
00:11:28.570 --> 00:11:29.470
method itself.

180
00:11:29.860 --> 00:11:30.220
Right.

181
00:11:30.220 --> 00:11:32.400
Because the collect method also takes a collector.

182
00:11:32.410 --> 00:11:34.280
And in fact, that's what is happening here.

183
00:11:34.300 --> 00:11:36.520
The grouping by is returning a collector.

184
00:11:37.510 --> 00:11:41.470
So this can be used outside of grouping by method also.

185
00:11:41.500 --> 00:11:43.630
So let me just show you that.

186
00:11:43.930 --> 00:11:45.400
So let's take this.

187
00:11:45.940 --> 00:11:47.230
Let's say counting.

188
00:11:49.700 --> 00:11:50.480
It's.

189
00:11:52.400 --> 00:11:53.240
This, but.

190
00:12:06.510 --> 00:12:12.090
So there are 13 books in the stream, so it can also be used outside of that.

191
00:12:12.090 --> 00:12:13.200
So this is count.

192
00:12:13.230 --> 00:12:17.550
Now let's summarize the values by using average.

193
00:12:17.550 --> 00:12:23.430
So let's get the average of the price of all the books that are associated with a particular key.

194
00:12:24.000 --> 00:12:26.370
So once again, let's take this part.

195
00:12:31.540 --> 00:12:33.760
So we have to use averaging double.

196
00:12:34.940 --> 00:12:35.660
And.

197
00:12:38.440 --> 00:12:40.480
It would be based on price.

198
00:12:40.660 --> 00:12:45.250
So we are using double because price is double get price method.

199
00:12:45.610 --> 00:12:46.840
And here.

200
00:12:48.940 --> 00:12:49.870
Would be double.

201
00:12:51.890 --> 00:12:53.060
Let's call it as.

202
00:12:55.200 --> 00:12:56.270
Price map.

203
00:13:04.650 --> 00:13:05.250
What's it?

204
00:13:09.380 --> 00:13:10.310
So here it is.

205
00:13:10.310 --> 00:13:12.710
So you have the average for 4.9.

206
00:13:12.710 --> 00:13:13.700
We had four bucks.

207
00:13:13.700 --> 00:13:16.790
So this is the average of the price of those four books.

208
00:13:17.240 --> 00:13:20.030
Now, similarly, there is also something double.

209
00:13:20.630 --> 00:13:21.920
You can also do that.

210
00:13:22.010 --> 00:13:27.020
And like I said, there are also other variants average into an averaging long also.

211
00:13:27.350 --> 00:13:30.740
Next let's say we want to get the minimum price of all the books.

212
00:13:31.190 --> 00:13:33.200
So let's take this once again.

213
00:13:34.950 --> 00:13:43.140
This is slightly different in that it would return an optional so would be optional off book with the

214
00:13:43.140 --> 00:13:44.310
lowest price.

215
00:13:46.680 --> 00:13:49.170
Let's call it Men Price.

216
00:13:49.650 --> 00:13:50.760
Let we copy this.

217
00:14:02.290 --> 00:14:03.700
Here it is made by.

218
00:14:05.910 --> 00:14:07.890
But obviously it needs a comparator.

219
00:14:08.370 --> 00:14:16.230
So for that we can use a static method in the competitor interface called comparing.

220
00:14:16.890 --> 00:14:23.130
It can we can use this comparing double and mint by would actually use that.

221
00:14:23.610 --> 00:14:28.800
So comparing double key extractor is once again we get price.

222
00:14:39.750 --> 00:14:43.320
Sid so like men by there is also a max by.

223
00:14:45.010 --> 00:14:45.750
Here it is.

224
00:14:45.760 --> 00:14:49.630
So this is a 4.8 and an optional.

225
00:14:49.630 --> 00:14:52.930
So the book is embedded with an optional object.

226
00:14:53.290 --> 00:14:57.460
And this is what and this is the book which has the lowest price.

227
00:14:57.460 --> 00:14:59.320
And similarly for 4.9.

228
00:14:59.800 --> 00:15:05.650
For 4.5, there are two books and for 4.9, there are four books and it would pick the one with the

229
00:15:05.650 --> 00:15:06.520
lowest price.

230
00:15:06.790 --> 00:15:14.170
So these are all the different summary methods that can be used counting averaging double or something,

231
00:15:14.170 --> 00:15:18.190
double or min by or max by now.

232
00:15:18.190 --> 00:15:22.450
There is also another method which can encapsulate all of these values.

233
00:15:22.450 --> 00:15:26.410
So there is a single object that can be generated using one of the methods.

234
00:15:26.410 --> 00:15:28.000
And let's also do that.

235
00:15:28.360 --> 00:15:30.190
So let me just copy this.

236
00:15:31.240 --> 00:15:32.500
Until this part.

237
00:15:35.380 --> 00:15:42.760
It's called summarizing double because price is what we want to take and we want to generate the different

238
00:15:42.850 --> 00:15:45.040
kinds of summaries on the price.

239
00:16:01.010 --> 00:16:06.680
Summarizing double will generate this thing called summary double summary statistics.

240
00:16:07.790 --> 00:16:13.490
Had it been summarizing and it would be end summary statistics or long summary statistics.

241
00:16:30.180 --> 00:16:31.620
This needs to be removed here.

242
00:16:32.430 --> 00:16:33.510
It's not generic.

243
00:16:33.840 --> 00:16:35.490
So let's print it.

244
00:16:53.480 --> 00:16:54.730
So here it is.

245
00:16:54.740 --> 00:17:01.780
So for 4.8, it says double summary statistics and it is printing all the different summary values like

246
00:17:01.790 --> 00:17:04.430
the sum men, average and Max.

247
00:17:04.849 --> 00:17:07.250
Let's look at 44.9 here.

248
00:17:09.250 --> 00:17:11.020
Here it is for 4.9.

249
00:17:11.020 --> 00:17:13.450
The count is for some is 195.

250
00:17:13.569 --> 00:17:20.950
So that's the sum of all the four books that fall under this rating, 4.9 men, average and max.

251
00:17:21.220 --> 00:17:22.900
So Max price is 60.

252
00:17:23.079 --> 00:17:25.150
Average is 48.75.

253
00:17:25.450 --> 00:17:27.130
So that's how you would do it.

254
00:17:27.490 --> 00:17:30.550
So this is the grouping by now.

255
00:17:30.550 --> 00:17:32.770
Let's look at partitioning by.

256
00:17:33.630 --> 00:17:36.180
So partitioning by let's take this.

257
00:17:39.840 --> 00:17:41.500
Would still generate a map.

258
00:17:42.240 --> 00:17:47.100
But it will take instead of grouping by here, we will have.

259
00:17:48.660 --> 00:17:49.800
Partitioning by.

260
00:17:52.480 --> 00:17:53.140
And.

261
00:17:57.120 --> 00:17:58.920
Let's say it takes a predicate.

262
00:17:58.920 --> 00:18:05.100
So let's say we want to partition the stream of elements into two groups, one which have a rating greater

263
00:18:05.100 --> 00:18:10.110
than or equal to 4.5, and the other group has less than 4.5.

264
00:18:19.570 --> 00:18:20.530
Return a boolean.

265
00:18:20.530 --> 00:18:23.080
So the key value would be either true or false.

266
00:18:23.170 --> 00:18:24.970
And here it will be.

267
00:18:42.340 --> 00:18:42.990
Here it is.

268
00:18:43.000 --> 00:18:50.860
So you have false here and the books list of books under false and you also have list of books for true

269
00:18:50.860 --> 00:18:51.310
also.

270
00:18:55.510 --> 00:18:56.080
Here it is.

271
00:18:56.080 --> 00:18:56.910
It starts with true.

272
00:18:56.920 --> 00:19:01.270
So you have only two mappings, one with true and one with false.

273
00:19:01.660 --> 00:19:08.110
Now this is one version of partitioning by and there is also an overloaded version of partitioning by,

274
00:19:08.110 --> 00:19:14.230
which takes a downstream collector in order to collect the values into something else, producing a

275
00:19:14.230 --> 00:19:18.160
summary or generating a set or something like that.

276
00:19:18.430 --> 00:19:23.410
So just like grouping by we also have an overloaded versioning version for partitioning by.

277
00:19:23.920 --> 00:19:29.380
So that's with that and we can also accomplish the same thing using grouping by.

278
00:19:29.410 --> 00:19:35.020
So you can have a method which would have a predicate which will use a predicate and would generate

279
00:19:35.020 --> 00:19:36.100
true or false.

280
00:19:36.550 --> 00:19:43.570
But it is said that this partitioning BI is slightly more efficient when it comes to generating such

281
00:19:43.570 --> 00:19:46.090
kind of such kind of a mapping.

282
00:19:47.290 --> 00:19:53.890
And another difference would be, let's say, if we increase this to 14.5.

283
00:19:54.340 --> 00:20:01.630
So in this case, the true will have a value of empty because there are no books with that kind of a

284
00:20:01.630 --> 00:20:01.930
rating.

285
00:20:01.930 --> 00:20:07.300
So for false, we have all of the books in the stream because all of them are less than 14.5.

286
00:20:07.690 --> 00:20:10.990
But we still have an mapping for true.

287
00:20:11.530 --> 00:20:17.410
Now if you do that grouping by, you wouldn't have this kind of a mapping, you would have only one

288
00:20:17.410 --> 00:20:18.010
mapping.

289
00:20:18.520 --> 00:20:20.140
So that's another difference between them.

290
00:20:20.140 --> 00:20:25.510
But partitioning by for this kind of a mapping is considered slightly more efficient.

291
00:20:27.130 --> 00:20:28.540
So let me change it back.

292
00:20:28.660 --> 00:20:33.910
Now, one final thing that I want to show is that here we are always having.

293
00:20:34.800 --> 00:20:38.490
A list of book now if we want.

294
00:20:40.830 --> 00:20:47.010
If we want a list of, let's say, for example, only the titles, we have a books list of books for

295
00:20:47.010 --> 00:20:51.120
a particular rating, but instead of having it as a list of books.

296
00:20:51.450 --> 00:20:55.640
What if we want a list of titles which are strings?

297
00:20:55.650 --> 00:21:03.300
So for that, we can use another method called mapping, which would map those books into a into a string

298
00:21:03.600 --> 00:21:06.390
and will accumulate into a list.

299
00:21:06.660 --> 00:21:07.620
So let's do that.

300
00:21:07.620 --> 00:21:09.840
So let me just copy this whole thing.

301
00:21:10.560 --> 00:21:13.560
So this is the final one, which we are going to test here.

302
00:21:16.770 --> 00:21:20.850
Grouping by buy rating, but we are using the overloaded version.

303
00:21:20.850 --> 00:21:24.240
So there is this collectors dot.

304
00:21:25.370 --> 00:21:26.350
Mapping.

305
00:21:26.360 --> 00:21:27.530
This is what it is.

306
00:21:28.190 --> 00:21:29.990
And the mapping would.

307
00:21:31.240 --> 00:21:36.790
We would use the source so the book would be converted into.

308
00:21:37.560 --> 00:21:39.660
Source for those books.

309
00:21:39.660 --> 00:21:41.510
Let's actually get the title itself.

310
00:21:41.520 --> 00:21:42.390
So.

311
00:21:43.580 --> 00:21:44.810
We have the title.

312
00:21:47.180 --> 00:21:48.440
We can use to list.

313
00:21:48.440 --> 00:21:51.920
So after the mapping, there will be connected into a list.

314
00:21:52.790 --> 00:21:52.990
Okay.

315
00:21:53.120 --> 00:21:56.540
So this would be string here because title is a string.

316
00:21:58.790 --> 00:22:01.340
And let's call it ratings.

317
00:22:02.460 --> 00:22:03.450
Title map.

318
00:22:05.240 --> 00:22:09.290
You name this and let's use a single.

319
00:22:10.570 --> 00:22:11.290
Print.

320
00:22:18.750 --> 00:22:19.320
That's it.

321
00:22:19.350 --> 00:22:24.690
So now you have 4.8 and the title Java six for 4.9.

322
00:22:24.690 --> 00:22:26.340
There are four titles here.

323
00:22:26.370 --> 00:22:27.660
That's what we have.

324
00:22:28.050 --> 00:22:28.770
So that's it.

325
00:22:28.770 --> 00:22:34.050
That's how you would convert from the stream type into some other type.

326
00:22:34.500 --> 00:22:39.210
So for that, you would use a mapping method which also returns a collector, which is what is needed

327
00:22:39.210 --> 00:22:42.900
for the grouping by method for the second version of the grouping by method.

328
00:22:43.970 --> 00:22:44.570
That's it.

329
00:22:46.400 --> 00:22:46.640
Yeah.

330
00:22:46.650 --> 00:22:53.090
And one final thing that I still did not show as the multi level grouping, which I mentioned earlier.

331
00:22:53.090 --> 00:22:55.430
So let me just show you that also.

332
00:22:56.660 --> 00:22:57.110
Okay.

333
00:22:58.150 --> 00:23:04.630
So we have this groupings buy rating now within a particular rating let's say we want to group by the

334
00:23:04.630 --> 00:23:07.540
source source can be either Amazon or Barnes and Noble.

335
00:23:07.570 --> 00:23:10.150
So let's say if we want to do that, then we can.

336
00:23:11.190 --> 00:23:12.660
Do a multilevel grouping.

337
00:23:12.930 --> 00:23:13.770
Copy that.

338
00:23:26.510 --> 00:23:29.270
Source like Amazon is stirring.

339
00:23:31.700 --> 00:23:35.640
And within that group we have this so grouping by.

340
00:23:35.660 --> 00:23:37.340
So let me just copy this.

341
00:23:39.450 --> 00:23:44.970
So within this grouping by method, the second parameter would be something like this.

342
00:23:45.820 --> 00:23:46.900
Grouping by.

343
00:23:47.790 --> 00:23:48.450
And.

344
00:23:52.090 --> 00:23:55.810
So this here we are grouping by source.

345
00:23:57.480 --> 00:23:59.910
So it's going to be Amazon or Barnes and Noble.

346
00:24:00.090 --> 00:24:02.070
And we want to group them into.

347
00:24:03.210 --> 00:24:03.960
Most.

348
00:24:06.030 --> 00:24:06.540
He said.

349
00:24:06.960 --> 00:24:09.120
And let's just go ahead and print it.

350
00:24:23.050 --> 00:24:26.470
Here it is, multilevel mapping 4.8 and Amazon.

351
00:24:26.840 --> 00:24:28.840
Then let's look at 4.9.

352
00:24:30.040 --> 00:24:30.990
For 4.5.

353
00:24:31.000 --> 00:24:31.540
Here it is.

354
00:24:31.540 --> 00:24:35.530
We have two books, one from Barnes and Noble, another from Amazon.

355
00:24:35.890 --> 00:24:39.790
So this is a map with first, first level classification.

356
00:24:39.790 --> 00:24:42.790
And within that we are having another map.

357
00:24:43.360 --> 00:24:47.170
So that's how you would generate a multilevel map.

358
00:24:47.200 --> 00:24:49.420
A multilevel grouping is done in that way.

359
00:24:49.660 --> 00:24:50.920
So that's about it.

360
00:24:51.160 --> 00:24:56.230
And so that's about the grouping by and we have looked at summary methods, how we can summarize the

361
00:24:56.230 --> 00:24:56.800
values.

362
00:24:56.800 --> 00:25:01.840
And we have also finally looked at how we can generate a multilevel map.

363
00:25:02.350 --> 00:25:03.970
So that's a multilevel grouping.

364
00:25:03.970 --> 00:25:06.130
And we also looked at the partitioning by method.

365
00:25:06.730 --> 00:25:12.310
And to map is mainly useful if we want to generate a simple key value pairs where we are not expecting

366
00:25:12.310 --> 00:25:13.600
any collision with the keys.

367
00:25:14.440 --> 00:25:15.130
So that's it.

368
00:25:15.160 --> 00:25:16.630
Thank you and happy coding.

