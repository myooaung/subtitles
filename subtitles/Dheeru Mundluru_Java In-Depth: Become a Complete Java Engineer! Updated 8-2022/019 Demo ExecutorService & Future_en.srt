1
00:00:01,270 --> 00:00:02,110
Hi there.

2
00:00:02,140 --> 00:00:03,400
This is the De La Rue.

3
00:00:03,520 --> 00:00:08,800
Now, let's go ahead and implement some of the stuff that we have learned in the previous lecture about

4
00:00:08,800 --> 00:00:11,050
executive service and future.

5
00:00:11,290 --> 00:00:11,800
Right.

6
00:00:12,100 --> 00:00:19,780
So here for this demo, I created this new class called as Future Indexer, and this would be an improvement

7
00:00:19,780 --> 00:00:24,070
over now executed indexer, which had two limitations, as we know.

8
00:00:24,220 --> 00:00:31,090
One of them was that the indexer task was wasting CPU cycles and we are going to address that using

9
00:00:31,090 --> 00:00:32,950
future and execute service.

10
00:00:33,310 --> 00:00:39,790
And the second limitation was that GM was not shutting down even after all the tasks ran to completion.

11
00:00:40,090 --> 00:00:40,480
Right.

12
00:00:40,480 --> 00:00:45,760
And we know that execute a service has some termination methods which will help us with that.

13
00:00:46,360 --> 00:00:49,300
So this is a future executable, future indexer.

14
00:00:50,210 --> 00:00:52,220
So I already made some changes here.

15
00:00:52,220 --> 00:00:55,460
It's an improvement over the now executed indexer.

16
00:00:56,450 --> 00:00:59,390
So some changes have been made and some we need to fix.

17
00:00:59,690 --> 00:01:03,380
So the downloader task is something that we need to change.

18
00:01:03,560 --> 00:01:06,920
So earlier the downloader task was implementing error.

19
00:01:07,820 --> 00:01:10,630
Now we need to change this to callable.

20
00:01:11,000 --> 00:01:12,920
And the second thing is.

21
00:01:14,830 --> 00:01:16,900
Indexer will remain as it is.

22
00:01:17,470 --> 00:01:20,510
So it is implementing run double because we don't have to.

23
00:01:20,530 --> 00:01:25,930
The indexer does not have to return anything, whereas the downloader has to return a web link.

24
00:01:27,050 --> 00:01:30,080
And then the go method is where we are making some changes.

25
00:01:30,590 --> 00:01:32,240
The changes have already been made.

26
00:01:32,300 --> 00:01:36,800
There are some compilation errors here because some of the code has been changed and some of them,

27
00:01:36,800 --> 00:01:40,310
some of the code needs to be updated, which is what we are going to do here.

28
00:01:40,640 --> 00:01:46,670
So this is the main method and we are instantiating future indexer and adding the for web links as usual

29
00:01:46,670 --> 00:01:48,440
and we are invoking the go method.

30
00:01:49,130 --> 00:01:54,530
And in the go method here it is now at the top.

31
00:01:54,530 --> 00:01:56,780
Here we are creating the executables.

32
00:01:57,020 --> 00:02:01,420
So as you can see now the executor is executed service.

33
00:02:01,430 --> 00:02:02,960
Earlier it was executed.

34
00:02:02,990 --> 00:02:06,440
So executed service is more extensive as we already know.

35
00:02:06,440 --> 00:02:07,760
So that's one change.

36
00:02:08,780 --> 00:02:15,890
And here in the go method, when we are iterating through the web links, we are getting a web link

37
00:02:16,130 --> 00:02:23,000
and we are we we have to submit the web link to the download executor, which is now an executor service

38
00:02:23,210 --> 00:02:25,070
and that word return.

39
00:02:25,220 --> 00:02:31,640
Since the task now will be a callable, it would return a future and that feature will be added to an

40
00:02:31,640 --> 00:02:34,310
array list which stores some features.

41
00:02:34,970 --> 00:02:41,330
So we are going to add the return future into this list of ArrayList, which which we are creating here.

42
00:02:41,870 --> 00:02:49,190
So it needs to be added here and then we are going to process it further so that the indexer executor

43
00:02:49,190 --> 00:02:53,300
will do the execution off of the web page.

44
00:02:53,600 --> 00:02:54,860
So this is the code.

45
00:02:54,860 --> 00:02:55,850
We'll get back to this.

46
00:02:55,850 --> 00:03:00,170
But first let's go ahead and modify the downloader task.

47
00:03:00,170 --> 00:03:02,650
Here it is implementing learnable.

48
00:03:02,690 --> 00:03:06,320
So let's go ahead and change it to callable.

49
00:03:10,400 --> 00:03:12,290
And this one needs to be.

50
00:03:13,070 --> 00:03:14,750
Change to call.

51
00:03:16,270 --> 00:03:18,750
And call would return a value.

52
00:03:18,760 --> 00:03:23,740
We know that the result that is computed and the result is actually the web link.

53
00:03:24,250 --> 00:03:26,920
So let's gentrify this particular class.

54
00:03:26,920 --> 00:03:30,010
Let's say V here or let's call it T.

55
00:03:31,300 --> 00:03:32,650
Now here.

56
00:03:33,660 --> 00:03:36,720
Let's say DH extends.

57
00:03:37,740 --> 00:03:38,550
Web link.

58
00:03:39,390 --> 00:03:42,000
And it's also change this to to.

59
00:03:43,570 --> 00:03:46,630
So it's a bounded parameter here type parameter.

60
00:03:51,600 --> 00:03:52,200
That's it.

61
00:03:52,890 --> 00:03:58,770
So all we did was change callable and it's see.

62
00:04:01,460 --> 00:04:07,910
Change change run double to callable and the run instead of run method we are implementing call method

63
00:04:07,910 --> 00:04:13,070
and call method can return a value and the value that we want to return is the weblink.

64
00:04:13,100 --> 00:04:14,060
After.

65
00:04:14,570 --> 00:04:20,360
After we download the HTML page, we set the HTML page and then we want to return the web link.

66
00:04:22,620 --> 00:04:23,400
And.

67
00:04:26,010 --> 00:04:27,390
We're going to move this.

68
00:04:31,890 --> 00:04:36,040
So that's the change that that we had to make and we made that.

69
00:04:36,060 --> 00:04:38,130
So the indexer remains just the same.

70
00:04:38,130 --> 00:04:39,480
It implements reasonable.

71
00:04:39,750 --> 00:04:43,620
So it's going to get the HTML page and index it.

72
00:04:44,010 --> 00:04:50,130
Now here, as we mentioned earlier, so we are submitting the web link.

73
00:04:50,130 --> 00:04:56,010
We are getting the web link from the queue and we are passing the web link which has the URL to be downloaded

74
00:04:56,790 --> 00:04:59,070
and we are passing it to the downloader task.

75
00:04:59,070 --> 00:05:00,450
So the task is a callable.

76
00:05:00,450 --> 00:05:06,840
Now downloader is is a callable and we are submitting it and the submit method we know returns a future

77
00:05:06,840 --> 00:05:12,300
and that future is being added to to this list which is named as futures.

78
00:05:12,840 --> 00:05:18,330
So it has a list of futures because we are iterating here and in each iteration we are going to add

79
00:05:18,330 --> 00:05:24,720
a future and then here we are going to process each of the futures and we are invoking the execute method,

80
00:05:24,840 --> 00:05:26,970
right execute method here.

81
00:05:26,970 --> 00:05:33,990
We don't need submit, execute and we are passing the index task here which is a reasonable and to the

82
00:05:33,990 --> 00:05:34,860
indexer task.

83
00:05:34,860 --> 00:05:41,030
We're passing the web link and the way we are passing it is we are invoking the get method and the get

84
00:05:41,040 --> 00:05:44,280
method would return a web link, right?

85
00:05:44,280 --> 00:05:45,930
So that's what we are doing here.

86
00:05:46,620 --> 00:05:49,140
So let me just go ahead and run this.

87
00:05:49,140 --> 00:05:55,230
And here, as you can see, we have this interrupted execution and execution exception.

88
00:05:57,330 --> 00:06:05,190
Because future GATT can be blocked and we can have any of these two exceptions because it can be blocked,

89
00:06:05,190 --> 00:06:11,010
it can through an interrupted exception and because the the task itself, the callable can throw an

90
00:06:11,010 --> 00:06:11,720
exception.

91
00:06:11,730 --> 00:06:14,160
We are also having this execution exception.

92
00:06:15,540 --> 00:06:18,150
So let me just go ahead and run this.

93
00:06:21,130 --> 00:06:23,290
So all the pages have been indexed.

94
00:06:23,590 --> 00:06:25,320
But we have an exception here.

95
00:06:25,330 --> 00:06:27,100
It's a runtime exception.

96
00:06:27,130 --> 00:06:32,380
The reason for that is because after shutting down here, so we also have these two statements.

97
00:06:32,380 --> 00:06:34,000
We are shutting down both executables.

98
00:06:34,210 --> 00:06:39,190
And we know that once we shut down, the executor cannot accept any new tasks.

99
00:06:39,250 --> 00:06:45,160
But then here I have added this statement called Submit, and I'm trying to submit a new task just to

100
00:06:45,160 --> 00:06:50,590
show you that no new tasks will be accepted and a runtime exception will be generated.

101
00:06:50,590 --> 00:06:52,990
So it's called a rejected execution exception.

102
00:06:53,200 --> 00:06:55,120
So that's the exception that is generated.

103
00:06:55,120 --> 00:07:00,190
So we cannot add any new tasks once we invoke shut down or shut down now.

104
00:07:00,700 --> 00:07:04,900
So that's just for demonstration, but all of them have been downloaded.

105
00:07:04,930 --> 00:07:11,800
Now, one limitation here is that in this particular code is here we are iterating through.

106
00:07:11,800 --> 00:07:18,820
This is the main method, still the main method, and we are iterating through the list of features.

107
00:07:19,000 --> 00:07:22,750
And in each iteration we are invoking the future.

108
00:07:23,770 --> 00:07:29,000
So when we are in the first iteration future dot get can block here, right?

109
00:07:29,080 --> 00:07:34,560
Because the web page is not yet downloaded because that's how the the get method works.

110
00:07:34,570 --> 00:07:36,160
So the get method would block.

111
00:07:36,160 --> 00:07:42,520
So if it is blocking, it means that the main thread is not going to proceed until this method returns.

112
00:07:43,150 --> 00:07:45,070
So that's a limitation here.

113
00:07:45,070 --> 00:07:50,080
So the way we need to code it is we need to actually pass only future here.

114
00:07:50,080 --> 00:07:52,630
That's one way to code this particular logic.

115
00:07:52,630 --> 00:08:00,430
So you don't invoke the get method, but you actually pass a future to the indexer task and then execute

116
00:08:00,430 --> 00:08:02,440
method is executed.

117
00:08:02,530 --> 00:08:09,460
It creates a tadpole so the executor method will invoke the run method and within that run method you

118
00:08:09,460 --> 00:08:11,290
can invoke the get method.

119
00:08:11,350 --> 00:08:18,580
So if you do that, then you know, then this whole thing can work in parallel concurrently.

120
00:08:18,610 --> 00:08:24,360
Otherwise, this get method can block here and we can have issues like we can amend it.

121
00:08:24,760 --> 00:08:27,260
The program will not proceed, may not proceed.

122
00:08:27,280 --> 00:08:34,000
So the better way to implement is just to pass the future object and so that the threads within this

123
00:08:34,000 --> 00:08:40,539
thread pool will execute concurrently and within each of those executions in the run method, we can

124
00:08:40,539 --> 00:08:42,460
invoke the get method here, get.

125
00:08:42,460 --> 00:08:48,940
So since there will be working concurrently, then we will not have this issue of at least one thread

126
00:08:48,940 --> 00:08:50,440
blocking another thread.

127
00:08:51,490 --> 00:08:57,460
So that's some change that we can make and we will do it in the next demo where we will actually place

128
00:08:57,460 --> 00:09:04,390
some time limits on the tasks that we do not want to, to wait for the page downloading to take to too

129
00:09:04,390 --> 00:09:06,790
much of time so we can place a time limit on that.

130
00:09:06,790 --> 00:09:09,490
And we know that we can use time to get for that.

131
00:09:09,490 --> 00:09:11,260
And there is also another way to do it.

132
00:09:11,260 --> 00:09:13,270
So we will look at both of the approaches.

133
00:09:13,270 --> 00:09:15,280
So that's an interesting demo.

134
00:09:15,280 --> 00:09:17,710
So we will look at that in the next lecture.

135
00:09:17,710 --> 00:09:22,650
And at the top we have some text also having included some text.

136
00:09:22,660 --> 00:09:30,880
One of them is about memory visibility here and it says that actions in a thread prior to the submission

137
00:09:30,880 --> 00:09:38,650
of a readable or callable task to an executor service happens before any action taken by the task.

138
00:09:38,920 --> 00:09:44,470
So actions in a thread prior to the submission of a task to an execute or service happens before any

139
00:09:44,470 --> 00:09:51,520
actions that might happen within the task, which in turn happened before the result is retrieved via

140
00:09:51,520 --> 00:09:52,700
future dot get.

141
00:09:53,810 --> 00:09:54,190
Okay.

142
00:09:54,200 --> 00:09:57,260
So that's the memory visibility guarantee that we get here.

143
00:09:57,260 --> 00:10:00,080
So just, just want to highlight that.

144
00:10:00,740 --> 00:10:01,820
So that's about it.

145
00:10:01,820 --> 00:10:08,030
And you can also go ahead and look at executable service API and also the future API and because they

146
00:10:08,030 --> 00:10:12,470
have a few more methods, but we will explore a couple of more methods in the next lecture.

147
00:10:12,620 --> 00:10:13,550
That's about it.

148
00:10:13,550 --> 00:10:15,200
Thank you and happy coding.

149
00:10:15,200 --> 00:10:18,470
And this and this program will be available in the resources section.

