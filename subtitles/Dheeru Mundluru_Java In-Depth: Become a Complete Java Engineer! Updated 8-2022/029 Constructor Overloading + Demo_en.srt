1
00:00:02,020 --> 00:00:02,940
Hello there.

2
00:00:02,950 --> 00:00:04,930
This is Lulu and welcome back.

3
00:00:05,110 --> 00:00:12,040
So we know that a constructor helps in constructing objects and it can also help in initializing state

4
00:00:12,040 --> 00:00:13,090
of those objects.

5
00:00:13,720 --> 00:00:20,650
In the last lecture, we refactored our student class to define a parameter constructor which helped

6
00:00:20,650 --> 00:00:24,490
with creating student objects and also initializing their state.

7
00:00:25,400 --> 00:00:31,730
In student class, we defined a single constructor, but a class can also have multiple constructors

8
00:00:32,240 --> 00:00:38,510
and if there are multiple constructors they will all have the same constructor name as a constructor

9
00:00:38,510 --> 00:00:41,000
has the same name as the class name.

10
00:00:41,810 --> 00:00:49,490
So what we have is one or more constructors with same name but different parameters and that's nothing

11
00:00:49,490 --> 00:00:51,530
but constructor overloading.

12
00:00:51,950 --> 00:00:59,120
So we have overloaded constructors and it is similar to method overloading where we have multiple methods

13
00:00:59,120 --> 00:01:03,860
in the same class having same method name but different parameter lists.

14
00:01:04,940 --> 00:01:11,120
Providing such overloaded constructors makes it convenient for clients to construct objects.

15
00:01:11,480 --> 00:01:13,340
And soon we will look at an example.

16
00:01:13,460 --> 00:01:17,150
So let's go ahead and learn about constructor overloading.

17
00:01:18,940 --> 00:01:23,020
Constructor overloading, as I just mentioned, a similar to method overloading.

18
00:01:23,020 --> 00:01:26,050
So we have the same overloading rules as methods.

19
00:01:26,200 --> 00:01:29,860
That is, the constructors must have different parameter lists.

20
00:01:30,190 --> 00:01:34,570
Otherwise we would have duplicate constructors and would get a compilation error.

21
00:01:35,460 --> 00:01:40,410
And objects can be created using any of the overloaded constructors.

22
00:01:41,420 --> 00:01:44,270
And why do we need overloaded constructors?

23
00:01:44,720 --> 00:01:48,110
As I mentioned earlier, the reason is convenience.

24
00:01:48,350 --> 00:01:52,370
They make it convenient for clients to construct objects.

25
00:01:53,110 --> 00:01:57,940
That is the help in having simpler object creation statements.

26
00:01:58,480 --> 00:02:01,150
Let's look at an example from the Java Library.

27
00:02:02,580 --> 00:02:07,800
So this is from a class called as file output stream, which we will discuss later.

28
00:02:08,039 --> 00:02:13,920
And this class is helpful if you want to write some data to a particular file on the disk.

29
00:02:14,750 --> 00:02:21,080
And as we can see, this class has five overloaded constructors and they have different parameters.

30
00:02:21,800 --> 00:02:28,310
Now let's consider the fourth constructor, which has two parameters file here as simply another class

31
00:02:28,310 --> 00:02:29,390
in the Java library.

32
00:02:29,390 --> 00:02:31,970
And let's not worry about it and we will look at it later.

33
00:02:32,090 --> 00:02:36,890
But it simply represents the file into which we want to write our data.

34
00:02:37,400 --> 00:02:44,240
And second parameter is to indicate whether we want to append data to the file or overwrite the file.

35
00:02:44,840 --> 00:02:50,780
So if the file already exists on the desk and you simply want to open data to it, that is, you want

36
00:02:50,780 --> 00:02:56,060
to write some data at the end of the file, then you would pass it true for the second parameter.

37
00:02:56,750 --> 00:03:01,250
But if you want to overwrite the contents of the file, then you would pass a false.

38
00:03:02,140 --> 00:03:08,020
Note that if the file does not exist on the desk, then this constructor would create a new file.

39
00:03:09,900 --> 00:03:17,010
So if there is a file called blood or TCD and you want to simply overwrite its contents, then you would

40
00:03:17,010 --> 00:03:19,800
create a file output stream object in this way.

41
00:03:20,400 --> 00:03:27,510
As we can see in the first argument, we are creating a file object corresponding to blood or text and

42
00:03:27,510 --> 00:03:30,630
then we are passing a false for the second argument.

43
00:03:31,440 --> 00:03:38,280
Now, instead of doing this, we can actually use the second constructor, which is provided only for

44
00:03:38,280 --> 00:03:39,030
overwriting.

45
00:03:39,660 --> 00:03:45,060
So if we use this constructor, we would create our file output stream object in this way.

46
00:03:45,360 --> 00:03:51,180
And as we can see, it is much more simpler and we just pass the file name so we don't have to create

47
00:03:51,180 --> 00:03:52,380
the file object.

48
00:03:52,440 --> 00:03:55,560
And there is no boolean argument that we need to pass.

49
00:03:56,190 --> 00:04:03,300
However, this constructor internally invokes the fourth constructor and passes the file object for

50
00:04:03,300 --> 00:04:06,840
the file and passes a false for the append parameter.

51
00:04:07,610 --> 00:04:11,690
So this constructor is simply delegating to the fourth constructor.

52
00:04:12,450 --> 00:04:19,170
So the library designers have provided the second constructor so that we can easily create our objects.

53
00:04:19,470 --> 00:04:26,160
Similarly, if we want to append data, we can invoke the first constructor and pass it through for

54
00:04:26,160 --> 00:04:27,450
the second parameter.

55
00:04:28,490 --> 00:04:35,000
First parameter is for file name and using this constructor is convenient than using the fourth one

56
00:04:35,000 --> 00:04:37,430
as we don't have to create a file object.

57
00:04:38,060 --> 00:04:41,600
And this constructor also internally delegates to the fourth one.

58
00:04:42,330 --> 00:04:48,540
So sometimes we can have this sort of overloaded constructor where there is a primary constructor like

59
00:04:48,540 --> 00:04:51,990
the fourth one and others simply delegate to it.

60
00:04:52,820 --> 00:04:58,850
However, we can also have overloaded constructors where there is no such delegation and the constructors

61
00:04:58,850 --> 00:05:01,280
are completely independent of each other.

62
00:05:01,790 --> 00:05:07,430
And there is a class called tree map in the Java library which has such overloaded constructors that

63
00:05:07,430 --> 00:05:09,050
are independent from each other.

64
00:05:09,590 --> 00:05:16,520
However, even in tree maps case, the constructors still provide the convenience factor that is, without

65
00:05:16,520 --> 00:05:21,560
them, extra code would have to be written to construct tree map objects.

66
00:05:22,130 --> 00:05:27,920
Tree map will be discussed later in the Collections Framework section and it is a class in the Java

67
00:05:27,920 --> 00:05:28,580
library.

68
00:05:29,300 --> 00:05:35,240
Now as we can see here, the constructors also are associated with certain capability.

69
00:05:35,540 --> 00:05:39,350
That is the help in constructing objects, having certain capability.

70
00:05:39,590 --> 00:05:46,640
For instance, the second constructor helps in creating objects that can help in overwriting file contents.

71
00:05:47,060 --> 00:05:53,270
Similarly, first constructor can be used to construct objects that can help with appending data to

72
00:05:53,270 --> 00:05:55,280
the end of the files.

73
00:05:55,730 --> 00:06:01,730
So each constructor is helping in constructing objects with certain capability or property.

74
00:06:02,420 --> 00:06:07,640
For the second constructor, the capability is overriding, and for the first constructor, the capability

75
00:06:07,640 --> 00:06:08,720
is appending.

76
00:06:09,110 --> 00:06:11,660
But that need not be the case all the time.

77
00:06:11,900 --> 00:06:17,930
That is, objects created from the different overloaded constructors can have the same capability to.

78
00:06:18,350 --> 00:06:19,640
But that's not very common.

79
00:06:19,640 --> 00:06:20,840
But that's possible.

80
00:06:21,480 --> 00:06:25,590
For instance, let's say the program has only partial data available.

81
00:06:25,740 --> 00:06:29,700
That is, it has only values for some of the instance variables.

82
00:06:29,850 --> 00:06:36,210
In which case we may have a constructor only for those variables and for the remaining variables we

83
00:06:36,210 --> 00:06:37,620
get default values.

84
00:06:38,160 --> 00:06:44,640
But if we have all of the data, then we can have a constructor that takes all of the values, and that

85
00:06:44,640 --> 00:06:46,590
would be the primary constructor.

86
00:06:47,370 --> 00:06:53,910
Now, let's go ahead and fire up our editor and add an overloaded constructor in our student class.

87
00:06:56,710 --> 00:06:58,420
Here we are in the student class.

88
00:06:58,660 --> 00:07:04,480
And if you recall from the previous lecture, we already have overloaded constructors in this class.

89
00:07:04,810 --> 00:07:10,360
So we defined our parameterized constructor here, which was initializing the object state.

90
00:07:10,690 --> 00:07:14,920
And at one point we also created a new ARX constructor.

91
00:07:15,250 --> 00:07:23,290
So this was added to just show that the compiler does not add a default constructor if there is already

92
00:07:23,290 --> 00:07:24,490
a constructor in the class.

93
00:07:24,520 --> 00:07:28,230
So we had this constructor and we did not have this.

94
00:07:28,240 --> 00:07:34,330
So what we did was for to the third student object, we removed all of these arguments.

95
00:07:34,750 --> 00:07:39,460
So it was invoking a no ARX constructor, which was not there in the class.

96
00:07:39,460 --> 00:07:43,150
So when we compiled it, the compiler gave us an error.

97
00:07:43,270 --> 00:07:47,560
And so to fix it, we added this new constructor, right?

98
00:07:47,950 --> 00:07:49,660
And then we added the state back.

99
00:07:49,660 --> 00:07:53,290
So all of the three student objects are using the first constructor.

100
00:07:53,650 --> 00:07:57,960
So we already have overloaded constructors and this is not being used anywhere.

101
00:07:57,970 --> 00:08:00,040
But let's just leave it as it is.

102
00:08:00,370 --> 00:08:04,430
It is harmless now for all three students.

103
00:08:04,450 --> 00:08:06,120
We are using the same constructor.

104
00:08:06,130 --> 00:08:11,320
The first student is non international and the second and third are international students.

105
00:08:11,680 --> 00:08:13,030
Now let's do this.

106
00:08:13,030 --> 00:08:19,600
Let's create a new constructor just for non international students and we will use that for non international

107
00:08:19,600 --> 00:08:23,260
students and for international students we will use this constructor.

108
00:08:23,410 --> 00:08:30,070
The only difference is we will not have this particular constructor parameter for the new constructor,

109
00:08:30,070 --> 00:08:31,960
for the new overloaded constructor.

110
00:08:32,230 --> 00:08:34,179
So let's go ahead and do that.

111
00:08:34,510 --> 00:08:35,919
Let's just copy this.

112
00:08:39,570 --> 00:08:41,580
So let's make it the first constructor.

113
00:08:43,580 --> 00:08:46,640
So at this time we have two constructors.

114
00:08:47,370 --> 00:08:49,440
And they have the same parameters.

115
00:08:49,680 --> 00:08:50,220
All right.

116
00:08:50,490 --> 00:08:53,270
So let's also remove this one here.

117
00:08:53,280 --> 00:08:59,010
This is not needed for the first constructor because it is for non international students and we don't

118
00:08:59,010 --> 00:09:01,350
have to recalculate the tuition fees for them.

119
00:09:02,280 --> 00:09:06,870
So at this point, both constructors still have the same parameter list and it should give us a compilation

120
00:09:06,870 --> 00:09:07,260
error.

121
00:09:07,260 --> 00:09:10,350
So because they are duplicate constructors.

122
00:09:12,670 --> 00:09:19,120
See it says constructor student is already defined in class student This is at line 43.

123
00:09:19,270 --> 00:09:26,050
So at line 43 is where the second constructor is starting and it says that this is going to be a duplicate

124
00:09:26,050 --> 00:09:29,800
because there is already a constructor with the same parameter list.

125
00:09:30,340 --> 00:09:32,220
So we cannot have it this way.

126
00:09:32,230 --> 00:09:33,940
So we need to remove this.

127
00:09:36,930 --> 00:09:41,820
And let's also remove this statement here, because that variable has just been deleted.

128
00:09:45,110 --> 00:09:46,280
And this is good.

129
00:09:47,060 --> 00:09:54,710
And here for John, who is a non international student, a local student, we will use the first constructor.

130
00:09:55,160 --> 00:09:55,700
All right.

131
00:09:56,680 --> 00:10:00,160
And for the second and third, they use the second constructor.

132
00:10:03,850 --> 00:10:04,600
Here you go.

133
00:10:05,110 --> 00:10:10,730
So for the first constructor, the tuition fee is for a local student, the tuition fee is 12,000.

134
00:10:10,750 --> 00:10:13,900
For the international students, it is 17,000.

135
00:10:14,620 --> 00:10:20,860
And that's what it is, because we are recalculating here and adding an additional fee for international

136
00:10:20,860 --> 00:10:21,460
students.

137
00:10:21,850 --> 00:10:25,000
So that's overloaded constructors for us.

138
00:10:25,510 --> 00:10:34,180
Now here, just think that this particular software is being used as part of a some university web application.

139
00:10:34,540 --> 00:10:41,140
And let's assume that there are two different screens, web pages, one for two, create accounts for

140
00:10:41,140 --> 00:10:45,130
international student and another for non international students.

141
00:10:45,430 --> 00:10:52,090
So if for a non international student, if an account is being created so there would be some form and

142
00:10:52,090 --> 00:10:54,910
once the form is filled for the student, let's say it is John.

143
00:10:54,910 --> 00:11:01,180
When we hit submit, all of that information will be sent to the web server because it's a web application.

144
00:11:01,390 --> 00:11:06,640
And on the web server there would be some sort of a Java program which would take all of that information

145
00:11:06,640 --> 00:11:11,500
and it will create a student object by invoking this particular constructor.

146
00:11:11,500 --> 00:11:15,760
And then subsequently the data could be added into the database or whatever.

147
00:11:16,060 --> 00:11:17,200
So that's one thing.

148
00:11:17,200 --> 00:11:23,260
Similarly, there would be another form for international students and for a given student.

149
00:11:23,260 --> 00:11:29,710
If once the information is added or is entered and submitted, the data will be sent to the web server

150
00:11:29,950 --> 00:11:36,700
and the program would construct an object using this constructor so you can visualize it in that way.

151
00:11:37,240 --> 00:11:46,120
Now here you can see that all of this code is also in the second here in the second constructor.

152
00:11:46,480 --> 00:11:48,520
So there is code duplication.

153
00:11:48,700 --> 00:11:53,290
Now, this is not good because it can give us maintenance issues.

154
00:11:53,290 --> 00:12:00,070
Say if there is some change that needs to be made, then we need to make the change and both the constructors

155
00:12:00,340 --> 00:12:02,860
and if we forget, then we can have issues.

156
00:12:03,310 --> 00:12:05,170
Let me give you a couple of examples.

157
00:12:05,170 --> 00:12:06,400
Example scenarios.

158
00:12:06,400 --> 00:12:13,420
Let's say we want to there is a requirement to convert the names of the students to uppercase.

159
00:12:13,750 --> 00:12:15,850
All of the characters have to be in uppercase.

160
00:12:16,030 --> 00:12:21,790
So for that, there is a method called to uppercase in the string class and let's say the developer

161
00:12:21,790 --> 00:12:26,200
does this later we will look at this method when we are dealing with strings.

162
00:12:26,710 --> 00:12:28,330
So here it is.

163
00:12:28,360 --> 00:12:34,390
And let's say the student has done it here, but he or she has forgotten to make that same change.

164
00:12:34,390 --> 00:12:36,460
And this constructor.

165
00:12:37,170 --> 00:12:37,980
So.

166
00:12:39,920 --> 00:12:42,410
That will lead to some inconsistency.

167
00:12:45,310 --> 00:12:47,080
So as you can see for.

168
00:12:48,120 --> 00:12:49,980
Oh, sorry, I said lowercase.

169
00:12:49,980 --> 00:12:51,690
Right, so let's make it uppercase.

170
00:12:51,690 --> 00:12:53,910
So there is a method called uppercase for that.

171
00:12:54,340 --> 00:12:56,340
And lowercase is for.

172
00:12:57,940 --> 00:12:58,960
Four lowercase.

173
00:13:01,010 --> 00:13:07,190
So for John it is in capitalized, but for Raj and Anita, it has been converted into uppercase.

174
00:13:07,520 --> 00:13:08,930
So that's an issue.

175
00:13:09,290 --> 00:13:13,110
So if we make any change, we need to make it at all of the places.

176
00:13:13,130 --> 00:13:13,680
Right.

177
00:13:13,700 --> 00:13:17,900
Now, let's also let me also show you another example.

178
00:13:17,930 --> 00:13:25,190
Let's say if the GPA is greater than, let's say 3.5, then we want to give a discount of $1,000.

179
00:13:25,400 --> 00:13:26,840
So let's do that.

180
00:13:28,070 --> 00:13:40,610
For that, we will use another if statement and we will say if this GPA here is greater than 3.5.

181
00:13:41,950 --> 00:13:43,150
Then we will say.

182
00:13:46,840 --> 00:13:49,630
Tuition fees -1000.

183
00:13:50,050 --> 00:13:53,170
So this greater than symbol is a relational operator.

184
00:13:53,350 --> 00:13:57,370
And we will look at that in the in the next section.

185
00:13:58,060 --> 00:14:04,030
So let's say the developer has added this over here and has forgotten end to add it in the in the first

186
00:14:04,030 --> 00:14:04,900
constructor.

187
00:14:05,320 --> 00:14:07,600
So naturally when we compile.

188
00:14:12,330 --> 00:14:13,800
So we can see that.

189
00:14:14,460 --> 00:14:20,730
Let me just show you the objects here so we can see that for John, the GPA is greater than 3.5.

190
00:14:20,760 --> 00:14:23,070
For Raj, it is 3.4.

191
00:14:23,190 --> 00:14:26,160
So for any tie it is perfect 4.0.

192
00:14:26,190 --> 00:14:32,000
So for both John and Anita, there should be a discount of 1000 and not for Raj.

193
00:14:32,010 --> 00:14:38,610
But if you look at the output for John, he's not getting any discount because the developer has forgotten

194
00:14:38,610 --> 00:14:42,030
to add that logic in the corresponding constructor.

195
00:14:42,420 --> 00:14:44,160
But Raj, there is no discount.

196
00:14:44,160 --> 00:14:47,570
So it is 17,000, but for Anita it is 16,000.

197
00:14:47,580 --> 00:14:49,620
So she gets a discount, but not John.

198
00:14:50,010 --> 00:14:54,780
So those are the sort of issues that we can have if we have duplicate code.

199
00:14:55,170 --> 00:14:56,550
So let me just remove this also.

200
00:14:56,550 --> 00:14:57,350
We don't need this.

201
00:14:57,360 --> 00:15:02,400
So what we need to do is we need to invoke because everything is same in both the constructors.

202
00:15:02,400 --> 00:15:08,400
We need to invoke the second constructor from the first constructor and this is what we did, this is

203
00:15:08,400 --> 00:15:09,540
what happened.

204
00:15:09,540 --> 00:15:15,570
And with the file output stream class, so we discuss that that the control is delegated to from one

205
00:15:15,570 --> 00:15:16,890
constructor to another.

206
00:15:17,250 --> 00:15:19,290
So let's go ahead and do that.

207
00:15:19,530 --> 00:15:25,770
So for that, all we will do is we will say this this indicates the same object.

208
00:15:26,130 --> 00:15:30,180
And because it's a constructor, we will have an invocation.

209
00:15:30,180 --> 00:15:35,340
So we use something called this invocation statement to invoke an overloaded constructor.

210
00:15:35,340 --> 00:15:41,640
So you're not going to say we're not going to use the class name here, but we will use this keyword

211
00:15:41,640 --> 00:15:42,030
here.

212
00:15:42,030 --> 00:15:44,340
So this is called us at this invocation statement.

213
00:15:44,580 --> 00:15:46,920
So if you use student, that would be invalid.

214
00:15:46,920 --> 00:15:53,430
So it has to be this invocation statement and then we will just pass whatever is being passed here.

215
00:15:53,580 --> 00:15:55,890
So we will just add all of these.

216
00:15:56,890 --> 00:15:57,670
Parameters.

217
00:15:57,670 --> 00:15:59,020
So let me just copy that.

218
00:16:00,150 --> 00:16:00,240
Okay.

219
00:16:00,330 --> 00:16:02,370
We just need to remove the types here.

220
00:16:03,300 --> 00:16:09,510
So in an invocation statement, you will never have types, so we need to remove that.

221
00:16:10,500 --> 00:16:14,490
So we are just relaying whatever we are receiving.

222
00:16:15,610 --> 00:16:16,170
Right.

223
00:16:16,890 --> 00:16:19,320
But this one accepts bullion.

224
00:16:19,320 --> 00:16:20,550
So that's the last one.

225
00:16:20,550 --> 00:16:23,460
So we will just pass false, right?

226
00:16:23,460 --> 00:16:28,860
Because this constructor is for non international students and for non international students it is

227
00:16:28,860 --> 00:16:29,610
a false.

228
00:16:36,440 --> 00:16:37,940
So this is what we are doing.

229
00:16:38,240 --> 00:16:40,580
So we removed that logic of discount.

230
00:16:40,590 --> 00:16:44,420
So that's why we don't see that that discount anymore.

231
00:16:45,330 --> 00:16:47,490
So this is what we need to do.

232
00:16:48,450 --> 00:16:52,200
So this here, this acts like a primary constructor.

233
00:16:52,200 --> 00:16:55,970
So we have seen that with the file output stream also.

234
00:16:55,980 --> 00:17:01,050
Now, there are certain rules that we need to remember when it comes to this invocation statement.

235
00:17:01,050 --> 00:17:04,410
So keep them in mind and probably make a note of them.

236
00:17:04,619 --> 00:17:10,500
So within a constructor, this invocation statement has to be the first statement.

237
00:17:10,680 --> 00:17:14,490
So, for instance, we cannot have another statement here.

238
00:17:14,490 --> 00:17:19,740
Let's say, for instance, cannot have something like ain't I is equal to any statement, it doesn't

239
00:17:19,740 --> 00:17:20,339
matter.

240
00:17:20,730 --> 00:17:25,920
So if we have this as the first one, then we get a compilation error.

241
00:17:26,069 --> 00:17:26,579
All right.

242
00:17:31,560 --> 00:17:35,430
See, it's this call to this must be first statement and constructor.

243
00:17:35,820 --> 00:17:37,680
So that's not possible.

244
00:17:38,340 --> 00:17:39,570
So that's the first one.

245
00:17:39,570 --> 00:17:41,640
It's got to be the first statement.

246
00:17:41,640 --> 00:17:46,950
And you cannot also have more than one this invocation within a constructor.

247
00:17:46,950 --> 00:17:49,470
So once again, we will get a compilation error here.

248
00:17:51,990 --> 00:17:54,750
Call to this must be the first statement in constructor.

249
00:17:54,750 --> 00:17:57,360
So it shows at line 22, which is where it is.

250
00:17:58,050 --> 00:17:59,790
So you cannot this is not possible.

251
00:18:00,650 --> 00:18:02,000
So let's remove that.

252
00:18:02,240 --> 00:18:05,040
Now, the next thing is so two of them.

253
00:18:05,060 --> 00:18:06,950
One is it needs to be the first one.

254
00:18:06,950 --> 00:18:10,310
And the second one, you can have only one within a constructor.

255
00:18:11,680 --> 00:18:14,800
So the second one is actually a byproduct of the first one.

256
00:18:15,220 --> 00:18:19,120
Now, here, we cannot invoke the same constructor.

257
00:18:19,390 --> 00:18:24,040
There cannot be a recursive invocation, they call it as a recursive invocation.

258
00:18:24,250 --> 00:18:29,800
So, for instance, if we remove this, it's essentially a call to the same constructor.

259
00:18:29,800 --> 00:18:31,690
So that would be meaningless, right?

260
00:18:31,690 --> 00:18:32,740
Because you call it.

261
00:18:32,740 --> 00:18:36,310
And then once again, the control comes here and then it gets called again.

262
00:18:36,400 --> 00:18:38,170
So the loop never ends.

263
00:18:38,170 --> 00:18:39,070
So that is wrong.

264
00:18:39,070 --> 00:18:44,710
So that's called as a recursive invocation, and that's not feasible and that's not allowed.

265
00:18:45,490 --> 00:18:48,340
So it says recursive constructor invocation.

266
00:18:48,340 --> 00:18:49,480
So that's not possible.

267
00:18:49,690 --> 00:18:53,020
So that's one way of having a recursive invocation.

268
00:18:53,050 --> 00:18:59,560
A second way would be for this constructor to invoke this one and for this to invoke this one.

269
00:18:59,800 --> 00:19:04,600
So that's an indirect recursive invocation, and that's also not possible.

270
00:19:04,600 --> 00:19:05,830
Let's also test that one.

271
00:19:07,220 --> 00:19:13,100
And this is this has to invoke the first one and it does not how this parameter.

272
00:19:17,370 --> 00:19:21,240
You say it says recursive constructor invocation at line 17.

273
00:19:21,240 --> 00:19:21,900
So.

274
00:19:22,260 --> 00:19:23,670
So that's not possible.

275
00:19:23,670 --> 00:19:24,960
So we need to remove that.

276
00:19:25,870 --> 00:19:28,450
And the final one, which I want to show is.

277
00:19:29,470 --> 00:19:30,260
Here.

278
00:19:30,280 --> 00:19:34,060
So we are passing all the method parameters that we are receiving.

279
00:19:34,060 --> 00:19:38,500
But you cannot include an instance variable here.

280
00:19:38,500 --> 00:19:40,840
Let's say it is an instance variable.

281
00:19:40,840 --> 00:19:43,150
It's not a local variable, it's defined here.

282
00:19:43,480 --> 00:19:48,580
So you cannot have an instance variable in this invocation statement.

283
00:19:48,610 --> 00:19:54,370
The reason for that is this variable is not yet initialized at this instance.

284
00:19:54,910 --> 00:20:01,390
So at this instance, what is happening is the control is getting passed here, right?

285
00:20:01,390 --> 00:20:08,140
We are calling this and from here before this statement gets executed, what happens is there is something

286
00:20:08,140 --> 00:20:14,620
called a superclass and the superclass also has a constructor and that constructor gets invoked.

287
00:20:15,070 --> 00:20:21,670
So this superclass is something that we will discuss when we are discussing about this concept called

288
00:20:21,670 --> 00:20:23,170
us inheritance.

289
00:20:23,320 --> 00:20:26,890
So which will which we will discuss later, a few sections from here.

290
00:20:26,890 --> 00:20:29,800
So it's a very important object oriented concept.

291
00:20:30,130 --> 00:20:35,890
So when we are dealing with inheritance, we have this notion of superclass and subclass.

292
00:20:35,890 --> 00:20:39,700
So this is like a subclass and then there is a superclass.

293
00:20:39,700 --> 00:20:41,260
It's like a parent class.

294
00:20:41,680 --> 00:20:49,930
So what happens is when control comes here, the parent class also has a constructor just as this particular

295
00:20:49,930 --> 00:20:50,800
subclass.

296
00:20:51,280 --> 00:20:57,460
And once the control comes here, the control moves into the superclass constructor.

297
00:20:57,940 --> 00:21:04,630
And at that instance, all of the instance variables in the superclass and all of the entire superclass

298
00:21:04,630 --> 00:21:06,460
constructor will be executed.

299
00:21:06,490 --> 00:21:12,100
And then the control comes to the subclass, which is this one, and all of these variables get initialized

300
00:21:12,100 --> 00:21:15,190
to their defaults and then the control comes here.

301
00:21:15,460 --> 00:21:21,040
So there is an implicit call to the superclass constructor, but you may ask, where is the superclass

302
00:21:21,040 --> 00:21:21,490
here?

303
00:21:21,940 --> 00:21:25,480
The thing is there is a superclass and it is implicit.

304
00:21:25,480 --> 00:21:27,490
So first thing is let me just compile this.

305
00:21:27,490 --> 00:21:29,560
Let me just show you the error itself.

306
00:21:31,210 --> 00:21:36,790
You see it says cannot reference ID before super type constructor has been called.

307
00:21:37,780 --> 00:21:41,350
So super type constructor has not yet been called at this point.

308
00:21:41,350 --> 00:21:43,150
It is it will be called here.

309
00:21:43,150 --> 00:21:47,200
So once the control comes here, the super type constructor will be invoked.

310
00:21:47,740 --> 00:21:51,160
Super type is nothing but the superclass or the parent class.

311
00:21:51,400 --> 00:21:57,430
So there is a parent, there is a superclass involved here and it is being used implicitly.

312
00:21:57,430 --> 00:21:58,990
And that class is called us.

313
00:21:58,990 --> 00:22:00,400
The object class.

314
00:22:00,400 --> 00:22:02,830
The name of the class itself is object.

315
00:22:03,010 --> 00:22:07,390
And we will look at the object class later after discussing inheritance.

316
00:22:07,420 --> 00:22:09,970
So that's something related to inheritance.

317
00:22:09,970 --> 00:22:15,730
So I just wanted to highlight the fact that we cannot pass an instance variable.

318
00:22:15,730 --> 00:22:21,940
So it's got to be these constructor parameters or it can be a literal like this.

319
00:22:21,940 --> 00:22:27,790
Or if you have something like String or any other object, any other class, then you can create an

320
00:22:27,790 --> 00:22:32,740
object here and pass an object here, an instance of that class.

321
00:22:32,740 --> 00:22:37,540
So that is possible, just like the way we are passing this particular literal.

322
00:22:37,780 --> 00:22:40,450
So the only thing is you cannot pass a.

323
00:22:41,880 --> 00:22:42,810
Instance variable.

324
00:22:43,260 --> 00:22:49,350
So if you if if it is confusing when we are talking about the superclass and subclass, just don't worry.

325
00:22:49,650 --> 00:22:52,410
It's just to let you know that we cannot pass this.

326
00:22:52,410 --> 00:22:57,930
But it should be clear when we get to the concept of superclass and subclass will be clear when we get

327
00:22:57,930 --> 00:22:59,940
to the inheritance concept.

328
00:23:00,360 --> 00:23:05,340
So what that means is this is not the end of our discussion on constructors.

329
00:23:05,340 --> 00:23:12,180
So when we get to inheritance we will revisit this topic and we are going to talk about that.

330
00:23:12,180 --> 00:23:16,110
Invoke invoking of super superclass constructor from subclass.

331
00:23:16,110 --> 00:23:17,940
It's called as constructor chaining.

332
00:23:18,030 --> 00:23:21,840
So at that point we will get back to this constructors once again.

333
00:23:22,590 --> 00:23:23,770
So that's that.

334
00:23:23,790 --> 00:23:27,900
And finally, I just want to show the file output stream class.

335
00:23:27,900 --> 00:23:31,620
So this is the file output stream class and this is my eclipse ID.

336
00:23:32,520 --> 00:23:34,530
So this is from the Java library.

337
00:23:34,740 --> 00:23:41,820
And let me just click here and here we can see all of the overloaded constructors that we have seen

338
00:23:41,820 --> 00:23:42,660
in the slide.

339
00:23:43,140 --> 00:23:44,970
So we discussed about this one.

340
00:23:45,860 --> 00:23:47,720
This was also we discussed.

341
00:23:47,720 --> 00:23:49,100
So let's look at this.

342
00:23:49,160 --> 00:23:50,570
This is for overwriting.

343
00:23:50,870 --> 00:23:57,680
So as you can see here, also, it is using this invocation statement and there are two arguments.

344
00:23:57,680 --> 00:23:59,990
So you can ignore this syntax here.

345
00:24:00,200 --> 00:24:02,030
So but this is for the first argument.

346
00:24:02,030 --> 00:24:08,720
And for the second argument, we are passing a false implying that we want to just override the contents.

347
00:24:08,720 --> 00:24:12,200
And let's look at the other constructor, which this one is invoking.

348
00:24:12,410 --> 00:24:14,330
So we just hit F three for that.

349
00:24:14,330 --> 00:24:16,100
And this is the constructor.

350
00:24:16,100 --> 00:24:18,320
This was the fourth constructor in the slide.

351
00:24:18,350 --> 00:24:20,540
So this is the primary constructor.

352
00:24:20,690 --> 00:24:22,880
And that constructor is invoking this.

353
00:24:22,880 --> 00:24:28,040
Similarly, there is also another constructor, this one which is also invoking this one, and that's

354
00:24:28,040 --> 00:24:28,880
for appending.

355
00:24:29,270 --> 00:24:30,330
So we discussed this.

356
00:24:30,640 --> 00:24:37,100
So but I still wanted to show that even these classes are invoking the constructor, using this invocation

357
00:24:37,100 --> 00:24:37,820
statement.

358
00:24:38,600 --> 00:24:40,070
So that's about it.

359
00:24:40,190 --> 00:24:40,880
Thank you.

360
00:24:40,880 --> 00:24:46,640
And I hope you enjoyed learning about overloaded constructors and I will see you in the next lecture.

