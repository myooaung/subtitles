1
00:00:02,120 --> 00:00:03,000
Hello there.

2
00:00:03,020 --> 00:00:04,140
This is the remote Uluru.

3
00:00:04,160 --> 00:00:05,090
And welcome back.

4
00:00:05,360 --> 00:00:08,600
So let's begin by looking at the integer data types.

5
00:00:10,070 --> 00:00:16,040
We all know that integers are whole numbers or fixed point numbers and would include both positive as

6
00:00:16,040 --> 00:00:17,480
well as negative numbers.

7
00:00:17,720 --> 00:00:25,280
And in Java they can be represented by these four primitive data types byte short, int or long.

8
00:00:25,820 --> 00:00:30,500
And this table gives more information on these integer data types.

9
00:00:31,040 --> 00:00:34,030
First column shows the different integer data types.

10
00:00:34,040 --> 00:00:41,720
Second column indicates their bid, which is nothing but the number of bits needed to internally represent

11
00:00:41,720 --> 00:00:42,290
the data.

12
00:00:42,290 --> 00:00:49,100
Type's variable value bit depth basically indicates the container size that is the storage space needed

13
00:00:49,100 --> 00:00:50,840
for a variable value.

14
00:00:51,620 --> 00:00:57,740
Third column indicates the range of values a variable of a particular type can take.

15
00:00:58,510 --> 00:01:02,860
Note that range is dependent on the depth that is higher.

16
00:01:02,860 --> 00:01:04,959
The depth larger is the range.

17
00:01:05,660 --> 00:01:11,240
Finally, fourth column indicates the default value of each of the data types.

18
00:01:11,570 --> 00:01:18,950
All four data types have zero as a default value and we have already seen that for the data type in

19
00:01:18,950 --> 00:01:26,060
one of the previous demos and also recall that variables declared in a method that is the local variables

20
00:01:26,060 --> 00:01:28,430
will not get any default value.

21
00:01:29,380 --> 00:01:33,160
So let's look at what we have here for each of the data types.

22
00:01:33,400 --> 00:01:37,180
First is byte, which is represented in eight bits.

23
00:01:37,750 --> 00:01:42,100
That is a byte variables value will be represented in eight bits.

24
00:01:42,700 --> 00:01:49,660
Due to this, a byte variable can hold any value between minus two to the power of 7 to 2 to the power

25
00:01:49,660 --> 00:01:54,550
of seven minus one that is -128 to 127.

26
00:01:55,150 --> 00:02:01,390
That is a byte can hold a number only in between -128 to positive 127.

27
00:02:01,600 --> 00:02:08,320
And if you try to assign it a value outside of this range, then you get a compilation error and soon

28
00:02:08,320 --> 00:02:10,000
we will see this in our demo.

29
00:02:10,850 --> 00:02:17,570
Now, in case you are not sure why a base tool is used here, it's only because computers use binary

30
00:02:17,570 --> 00:02:21,050
system which deals with only zeros and ones.

31
00:02:21,470 --> 00:02:28,250
We know that decimal system uses base ten as decimal system uses the digits 0 to 9 to represent numbers.

32
00:02:29,070 --> 00:02:35,880
Also, if you're wondering why the range is -128 to positive 127, it's only because the bed depth is

33
00:02:35,880 --> 00:02:43,020
eight, which can be used to represent a total of two to the power of eight numbers, that is to 56

34
00:02:43,020 --> 00:02:43,770
numbers.

35
00:02:43,860 --> 00:02:50,820
And these 256 numbers fall in the range -128 to positive 1.7, including zero.

36
00:02:51,860 --> 00:02:58,610
Now among the eight bets, the leftmost bit which is called us, the sign bit tells whether a number

37
00:02:58,610 --> 00:03:00,410
is positive or negative.

38
00:03:01,130 --> 00:03:04,130
If the sign is zero, it means it's a positive number.

39
00:03:04,130 --> 00:03:07,460
And if it is one, it means it's a negative number.

40
00:03:08,090 --> 00:03:15,020
Generally, leftmost bet is also referred to as the most significant bet, and the remaining seven bits

41
00:03:15,020 --> 00:03:19,130
indicate the magnitude of the number like 127.

42
00:03:19,580 --> 00:03:25,250
So that's the reason the range says minus two to the power of 7 to 2 to the power of seven minus one.

43
00:03:25,550 --> 00:03:27,530
One of them is used as the sign that.

44
00:03:28,460 --> 00:03:36,230
Next chart is represented in 16 bits, so its depth is higher than the depth of byte and so can store

45
00:03:36,230 --> 00:03:37,310
larger values.

46
00:03:37,520 --> 00:03:42,740
That is a range of values it can hold is in between minus two to the power of 15 to 2 to the power of

47
00:03:42,740 --> 00:03:48,320
15 minus one, which is nothing but -32,000 768 to positive.

48
00:03:48,320 --> 00:03:49,670
32,007.

49
00:03:49,670 --> 00:03:50,750
67.

50
00:03:51,530 --> 00:03:58,850
Next ENT is represented in 32 bits and can take any value between minus two to the power of 31 to 2

51
00:03:58,850 --> 00:04:00,440
to the power of 31 minus one.

52
00:04:01,040 --> 00:04:03,320
So it can hold very large numbers.

53
00:04:04,100 --> 00:04:10,100
Finally, long is represented in 64 bits and so it can take any value between minus two to the power

54
00:04:10,100 --> 00:04:17,209
of 63 to 2 to the power of 63 minus one, so long as its name implies, is really long.

55
00:04:17,480 --> 00:04:20,870
That is, it can hold very, very large numbers.

56
00:04:21,779 --> 00:04:27,750
Now as good software engineers, we do need to have a clear idea of the different data types that are

57
00:04:27,750 --> 00:04:30,840
supported and how much memory they consume.

58
00:04:31,590 --> 00:04:37,410
So I request you to firmly memorize what we see here and this table about the different data types,

59
00:04:37,410 --> 00:04:41,610
their bid depth, and the corresponding range of values that they support.

60
00:04:42,460 --> 00:04:46,180
You can expect a couple of questions from this table in the upcoming quest.

61
00:04:48,120 --> 00:04:54,000
Now internally java users something called signed to complement scheme to represent integers.

62
00:04:54,270 --> 00:04:57,570
That's what computers also use to represent integers.

63
00:04:58,110 --> 00:05:02,910
Now, if you're not familiar with sign two's complement scheme, you can check out the supplementary

64
00:05:02,910 --> 00:05:08,610
notes in the resources section, and it includes a link to an excellent article that discusses sign

65
00:05:08,610 --> 00:05:14,790
to complement scheme as well as other schemes for representing floating point and characters, which

66
00:05:14,790 --> 00:05:16,020
we will discuss later.

67
00:05:16,710 --> 00:05:18,810
You don't have to read that article right away.

68
00:05:18,840 --> 00:05:22,080
You can do it later once you're comfortable with Java.

69
00:05:22,110 --> 00:05:26,430
So I don't want you to get distracted from that, but it's just your call.

70
00:05:26,820 --> 00:05:32,340
Now let's go ahead and extend our student class by declaring some new integer variables.

71
00:05:34,940 --> 00:05:41,750
Here is our student class and we declared this variable called ID, which is of data type eight and

72
00:05:41,750 --> 00:05:43,010
as initialized 1000.

73
00:05:43,310 --> 00:05:50,330
So we already use the INT data type and we also had this method called us compute where we are declaring

74
00:05:50,330 --> 00:05:55,520
another variable called next ID, which is also off type end and it would be ID plus one.

75
00:05:55,520 --> 00:06:01,550
And we are printing both the values here and we are creating an object of this particular class from

76
00:06:01,550 --> 00:06:06,110
the main method and we are invoking the compute method and that would print both the values.

77
00:06:06,470 --> 00:06:09,200
So let's go ahead and create more variables.

78
00:06:09,890 --> 00:06:19,550
So let's create a variable called H and let's have the type as byte and let's initialize it to 18.

79
00:06:19,670 --> 00:06:22,280
So the student's age is 18.

80
00:06:22,730 --> 00:06:25,250
So let's go ahead and compile Java.

81
00:06:25,790 --> 00:06:28,010
Student dot Java.

82
00:06:29,100 --> 00:06:31,110
Compiles fun, so let's just run it.

83
00:06:33,220 --> 00:06:33,760
Next slide.

84
00:06:33,790 --> 00:06:36,100
So let's actually print this value.

85
00:06:44,630 --> 00:06:44,780
Okay.

86
00:06:44,950 --> 00:06:48,910
So, Prince 18 Now let's introduce another variable.

87
00:06:48,940 --> 00:06:51,290
Let's call it as rank.

88
00:06:51,310 --> 00:06:55,780
And let's also have the data type as byte.

89
00:06:56,680 --> 00:07:03,460
So let's assume that there is some entrance test to get an admission in the university, and so there

90
00:07:03,460 --> 00:07:06,330
would be a rank associated with the entrance test.

91
00:07:06,340 --> 00:07:14,200
So let's say the student has got a rank of 165 in the entrance test in order to gain an admission into

92
00:07:14,200 --> 00:07:15,160
the university.

93
00:07:15,670 --> 00:07:18,850
So let's go ahead and compile this.

94
00:07:21,130 --> 00:07:22,630
So it gives us an error.

95
00:07:22,630 --> 00:07:27,940
It says incompatible types, possible lossy conversion from INT to byte.

96
00:07:28,480 --> 00:07:35,560
So essentially what it is saying is this value 165 falls outside the range of byte.

97
00:07:36,040 --> 00:07:42,640
We know that bytes range is -128 to 127.

98
00:07:43,600 --> 00:07:46,450
So 165 volts outside this range.

99
00:07:46,570 --> 00:07:49,240
And so we are getting a compilation error.

100
00:07:50,110 --> 00:07:52,210
Now let's look at this message here.

101
00:07:52,540 --> 00:07:56,830
It says, incompatible types, possible lossy conversion.

102
00:07:56,830 --> 00:07:59,260
So just ignore this particular message for now.

103
00:07:59,290 --> 00:08:01,390
Maybe we can look at it later.

104
00:08:01,390 --> 00:08:08,170
But it says possible lossy conversion from int to byte byte is fine because we have byte here on the

105
00:08:08,170 --> 00:08:08,950
left side.

106
00:08:09,100 --> 00:08:11,110
But why does it say int?

107
00:08:11,980 --> 00:08:20,670
The thing is, we know that this is a literal and in Java this is a literal of type of data type.

108
00:08:20,690 --> 00:08:29,290
And in Java you do not have a bit later you have only an end literal or a long literal, which we will

109
00:08:29,290 --> 00:08:30,370
discuss next.

110
00:08:30,700 --> 00:08:38,240
But we do not have literals of type byte or literals of type shot, so no byte or short literals.

111
00:08:38,260 --> 00:08:43,400
We only have a literal or long literal, which we will see later.

112
00:08:43,419 --> 00:08:48,880
So if you see some number like this, just a whole number like this, then it is an literal.

113
00:08:49,900 --> 00:08:57,310
So in order to make this to make this work, we can assign it to a long or a short or an end, a larger

114
00:08:57,310 --> 00:08:57,970
data type.

115
00:08:58,790 --> 00:09:03,890
So that's the reason why it says possible lossy conversion from INT to bite.

116
00:09:04,160 --> 00:09:12,620
Now let's go ahead and assign some values here -129, which is also outside the range.

117
00:09:13,690 --> 00:09:18,640
So once again it says possible lossy conversion from INT to byte.

118
00:09:18,940 --> 00:09:20,200
It's just the same message.

119
00:09:20,290 --> 00:09:25,330
Now, if we say 128, we should be good because.

120
00:09:26,420 --> 00:09:29,720
Because 120 -128 falls within the range.

121
00:09:30,080 --> 00:09:31,370
The same goes with.

122
00:09:32,240 --> 00:09:37,160
Positive 128 positive 128 will also give us a compilation error.

123
00:09:39,470 --> 00:09:40,400
It's the same error.

124
00:09:40,700 --> 00:09:44,960
And if we assign 127, we are once again.

125
00:09:45,050 --> 00:09:45,590
Good.

126
00:09:45,620 --> 00:09:47,210
Let me just clear up the screen.

127
00:09:49,750 --> 00:09:55,300
So we are good because it is 127 and 127 is the maximum value for byte.

128
00:09:55,810 --> 00:10:00,970
But we wanted to assign 165, so let's just change it to short here.

129
00:10:02,050 --> 00:10:02,770
And.

130
00:10:04,920 --> 00:10:06,450
Your good, sir.

131
00:10:06,480 --> 00:10:11,130
Correct assignment, because Short has a larger range of values.

132
00:10:11,990 --> 00:10:13,100
So that's short.

133
00:10:13,130 --> 00:10:14,780
Now let's introduce.

134
00:10:15,520 --> 00:10:19,480
Phone number and let's call it as let's have the data type as end.

135
00:10:20,410 --> 00:10:23,860
1234567890.

136
00:10:24,040 --> 00:10:28,390
Let's keep it simple and let's compile this.

137
00:10:31,420 --> 00:10:32,350
Compiles fine.

138
00:10:32,830 --> 00:10:35,650
So let's change this number to two.

139
00:10:39,840 --> 00:10:43,890
Now it says integer number to large.

140
00:10:44,610 --> 00:10:50,130
So this number falls outside the range of end, which is fine.

141
00:10:50,280 --> 00:10:55,020
But you may notice that the error message is different from what we had earlier.

142
00:10:55,650 --> 00:11:01,860
Earlier it said that there is incompatible types from int to byte, but here it does not say that.

143
00:11:01,860 --> 00:11:03,210
Here it says something else.

144
00:11:03,210 --> 00:11:06,090
It says integer number too large.

145
00:11:06,090 --> 00:11:09,510
The reason is it is complaining about this letter itself.

146
00:11:10,230 --> 00:11:13,660
So it is an invalid end literal.

147
00:11:13,920 --> 00:11:19,830
We know that its range is minus two to the power of 31 to 2 to the power of 31 minus one.

148
00:11:19,830 --> 00:11:22,590
And this falls outside that range.

149
00:11:23,070 --> 00:11:26,580
So it is complaining about the literal itself.

150
00:11:26,910 --> 00:11:28,110
It's a larger number.

151
00:11:28,110 --> 00:11:30,930
So we need to make it a long literal.

152
00:11:30,930 --> 00:11:36,690
And the way you do it is just add this a trailing L and it would be a long literal.

153
00:11:36,720 --> 00:11:43,830
You can use an uppercase L or a lowercase, but it is recommended to use uppercase because the lowercase

154
00:11:43,830 --> 00:11:49,770
l is very similar to one and it can be it's very difficult to distinguish from one.

155
00:11:49,800 --> 00:11:53,220
So it is suggested to use the uppercase L.

156
00:11:53,430 --> 00:11:55,620
So this is the long literal.

157
00:11:55,620 --> 00:12:00,000
So what we have here is the end literal and this is the long literal.

158
00:12:00,150 --> 00:12:01,860
Now let's compile this.

159
00:12:04,710 --> 00:12:10,230
Now it gives the the other type of error which we have seen earlier, incompatible types and it says

160
00:12:10,230 --> 00:12:17,310
from long to end, which is fine because this is long and this is eight and this is not within the range

161
00:12:17,310 --> 00:12:18,060
of long.

162
00:12:18,330 --> 00:12:24,960
But the important thing is it's not just that, it's also that the long literal cannot be assigned to

163
00:12:24,960 --> 00:12:28,770
end, even if the number is within the range of.

164
00:12:28,770 --> 00:12:33,360
And for instance, here we have thousand, so let's make it 1000.

165
00:12:33,360 --> 00:12:36,090
L And we can see the error.

166
00:12:37,520 --> 00:12:38,990
It gives two compilation errors.

167
00:12:39,350 --> 00:12:41,810
Here is one error and here is another error.

168
00:12:41,990 --> 00:12:47,180
It says that incompatible types possible lossy conversion from long to int.

169
00:12:47,510 --> 00:12:49,940
So for here it is fine.

170
00:12:49,940 --> 00:12:50,120
Right.

171
00:12:50,120 --> 00:12:55,870
If we used a literal and we were assigning to byte, it is working fine because this is within the range.

172
00:12:55,880 --> 00:12:59,330
So complain compiler is not complaining about it.

173
00:12:59,600 --> 00:13:04,580
But if we change it to long literal so the compiler does not like it.

174
00:13:06,780 --> 00:13:08,160
So this time it gives three errors.

175
00:13:08,160 --> 00:13:12,810
One for this because it is an invalid assignment, then one for the byte.

176
00:13:12,810 --> 00:13:14,400
It's an invalid assignment.

177
00:13:14,610 --> 00:13:20,850
So the thing is int byte and short can be assigned only in letters.

178
00:13:21,210 --> 00:13:23,820
That's how the language designers have designed it.

179
00:13:24,150 --> 00:13:28,470
And this long, literal cannot be assigned to any of these three.

180
00:13:28,500 --> 00:13:31,830
If you do it, we get a compilation error, as we have just seen.

181
00:13:32,100 --> 00:13:36,180
So a long letter can be assigned to only long.

182
00:13:36,840 --> 00:13:38,430
So that's the thing.

183
00:13:38,700 --> 00:13:44,070
It can be assigned only to long or of other data types which are of which are larger than long, but

184
00:13:44,070 --> 00:13:45,300
that we will see later.

185
00:13:45,300 --> 00:13:52,560
But among the integer literals, this long literal can be assigned to only long and for eight byte and

186
00:13:52,560 --> 00:13:54,960
short, it's got to be integer.

187
00:13:55,320 --> 00:14:02,310
So always keep in mind that integer literals there are only two integer literals.

188
00:14:02,670 --> 00:14:08,610
One is a literal and the other is long literal.

189
00:14:09,860 --> 00:14:11,120
And that's it.

190
00:14:11,660 --> 00:14:14,900
I hope you're also typing all of this code.

191
00:14:14,930 --> 00:14:21,740
As I'm demonstrating, I think that will be very useful for you to compile and see the output for yourself.

192
00:14:22,400 --> 00:14:26,180
So if possible, do try to type in everything as I'm demonstrating.

193
00:14:26,600 --> 00:14:28,700
And here it's a very large number.

194
00:14:28,700 --> 00:14:30,710
Maybe it's not very readable.

195
00:14:30,890 --> 00:14:36,350
Sometimes this is the area code and we might want to when you're using a user interface, sometimes

196
00:14:36,350 --> 00:14:39,560
the area code is taken separately, right?

197
00:14:39,560 --> 00:14:43,250
So it might be good to make it more readable.

198
00:14:43,370 --> 00:14:47,000
For instance, we can have an underscore here and an underscore here.

199
00:14:47,120 --> 00:14:54,170
So in Java, from the Java seven version on words, you can actually use underscores here to make it

200
00:14:54,170 --> 00:14:55,460
more readable.

201
00:14:56,000 --> 00:15:01,180
So it helps with readability, underscores HAL help with readability.

202
00:15:01,190 --> 00:15:06,140
So we also do that in real life when we are writing our checks in the bank.

203
00:15:06,140 --> 00:15:15,050
So we also use commas to indicate the amount that we are depositing in a similar way Java has introduced,

204
00:15:15,050 --> 00:15:20,900
the designers have introduced this underscores and this underscores have to appear somewhere in between.

205
00:15:20,900 --> 00:15:28,010
It cannot appear at the beginning or at the end, but if you print it, it will print without the underscore.

206
00:15:28,060 --> 00:15:30,890
So let's just go ahead and print that.

207
00:15:36,200 --> 00:15:36,470
Okay.

208
00:15:36,470 --> 00:15:37,970
Let's also put one here.

209
00:15:38,270 --> 00:15:43,370
Underscore doesn't make sense but just for testing that's what the bite.

210
00:15:45,590 --> 00:15:46,850
And let's run it.

211
00:15:47,210 --> 00:15:52,660
So as you can see, it prints 18 and here it prints the number without the underscores.

212
00:15:53,540 --> 00:15:58,790
So it applies for both literal as well as the long literal.

213
00:15:59,090 --> 00:16:03,440
The only thing is you cannot have it here or at the end.

214
00:16:04,130 --> 00:16:08,540
So if you recompile it, it gives you a compilation error.

215
00:16:08,840 --> 00:16:10,460
So it gives some error.

216
00:16:10,700 --> 00:16:11,660
So that's the thing.

217
00:16:11,660 --> 00:16:13,280
You cannot do that.

218
00:16:13,550 --> 00:16:17,060
So this applies only from Java seven onwards.

219
00:16:17,330 --> 00:16:18,710
So just keep that in mind.

220
00:16:19,730 --> 00:16:22,540
Now, finally, I just want to show you something.

221
00:16:22,550 --> 00:16:23,810
Let's say eight.

222
00:16:36,490 --> 00:16:43,960
So we know that the main value for end is minus two to the power of 31, and the max value is two to

223
00:16:43,960 --> 00:16:45,380
the power of 31 minus one.

224
00:16:45,400 --> 00:16:50,500
So if at all, you want to see what those numbers are, you can do this.

225
00:16:50,500 --> 00:16:57,160
You know, you can print integer min, underscore value and integer dot max underscore value to get

226
00:16:57,160 --> 00:16:58,990
the max value of int.

227
00:16:59,290 --> 00:17:03,220
So integer is a class that comes with the Java library.

228
00:17:03,490 --> 00:17:07,420
It's called as a boxed primitive or a wrapper type.

229
00:17:07,690 --> 00:17:11,980
And every primitive type has an associated boxed primitive.

230
00:17:12,250 --> 00:17:17,230
So this is a boxed primitive class and we will discuss these box primitive classes later in a subsequent

231
00:17:17,230 --> 00:17:17,859
section.

232
00:17:18,069 --> 00:17:20,240
So it has a boxed primitive type.

233
00:17:20,260 --> 00:17:25,609
Similarly, all other types like byte also has a box, primitive type shot also has it.

234
00:17:25,630 --> 00:17:32,920
So all of the eight primitive data types have associated box primitive types and for byte also we can

235
00:17:32,920 --> 00:17:37,360
get its min and max value like -128 and 127 in the same way.

236
00:17:37,480 --> 00:17:39,850
So let's go ahead and print these values.

237
00:17:56,240 --> 00:17:59,090
So it prints the minimum value and the max value.

238
00:17:59,090 --> 00:18:00,080
So this is what it is.

239
00:18:00,080 --> 00:18:04,550
And if you want to see it for byte, just change it to byte.

240
00:18:04,550 --> 00:18:11,480
And here the class name is byte and byte.

241
00:18:12,380 --> 00:18:14,930
So it should show us what it should.

242
00:18:15,140 --> 00:18:20,120
It should show us -128 to positive 127.

243
00:18:20,540 --> 00:18:21,620
That's what it is.

244
00:18:21,620 --> 00:18:29,750
But you need to memorize this so that's that you can print that and more on box primitives later on.

245
00:18:30,820 --> 00:18:32,510
So this is the end.

246
00:18:32,530 --> 00:18:34,300
Primitive and long.

247
00:18:34,300 --> 00:18:34,790
Primitive.

248
00:18:34,810 --> 00:18:36,580
So this is in decimal format.

249
00:18:36,580 --> 00:18:42,460
But let me also show you this integer class which had the min value and max value.

250
00:18:42,460 --> 00:18:44,050
Let me show it in my editor.

251
00:18:44,320 --> 00:18:48,340
So this is the integer class and here it is integer class.

252
00:18:48,340 --> 00:18:51,700
And as you can see, it has the mean value and max value.

253
00:18:51,940 --> 00:18:58,180
But you can see here that it has a different type of assignment, a different format.

254
00:18:58,510 --> 00:19:01,180
It is being initialized with zero X.

255
00:19:01,390 --> 00:19:07,030
So this is a different format, its hexadecimal format, but it is still an integer.

256
00:19:07,060 --> 00:19:13,420
So eight and long literals can also be represented in other less commonly used formats.

257
00:19:13,420 --> 00:19:21,700
So what we have seen right here is the decimal format, but it also has other less commonly used format

258
00:19:21,700 --> 00:19:26,260
and that would be the subject of next lecture and we will see it there.

259
00:19:26,950 --> 00:19:28,390
So that's about it.

260
00:19:28,390 --> 00:19:34,690
So just keep in mind that Integer Literals would be only integer or long lecture and you can also use

261
00:19:34,690 --> 00:19:40,090
underscores for readability and that's especially useful when you have large numbers.

262
00:19:40,910 --> 00:19:41,590
So that's it.

263
00:19:41,600 --> 00:19:42,170
Thank you.

264
00:19:42,170 --> 00:19:47,210
And I hope you enjoyed learning about the integer data types and see you in the next lecture.

