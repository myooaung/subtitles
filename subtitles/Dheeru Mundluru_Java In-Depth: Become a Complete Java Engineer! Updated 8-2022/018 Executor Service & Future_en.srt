1
00:00:02,140 --> 00:00:02,920
Hi there.

2
00:00:02,950 --> 00:00:04,270
This is the Ramona La Rue.

3
00:00:04,630 --> 00:00:08,470
In the last lecture, we saw how we could use a fixed apple.

4
00:00:09,100 --> 00:00:14,590
We also saw that the demo program had the limitation of wasting CPU cycles.

5
00:00:15,160 --> 00:00:20,710
Another limitation was that GM could not be shut down, even though tasks ran to completion.

6
00:00:21,220 --> 00:00:26,620
In this lecture, we will see how this limitations can be fixed, but the demo will be part of the next

7
00:00:26,620 --> 00:00:27,220
lecture.

8
00:00:29,210 --> 00:00:32,390
Execute a service is what we are going to use to fix the issues.

9
00:00:32,810 --> 00:00:40,070
As mentioned in the previous lecture, it's an interface that extends executor invoking new fixed method,

10
00:00:40,070 --> 00:00:42,080
returns an executor service.

11
00:00:42,710 --> 00:00:45,110
Since executed, the service extends executor.

12
00:00:45,110 --> 00:00:51,830
In the last lecture, we had the reference type as executor when new fixed thread method was invoked.

13
00:00:53,390 --> 00:00:55,520
Executed had only a single method.

14
00:00:55,520 --> 00:01:03,470
Execute and execute a service is much more extensive and provides methods for submitting tasks as well

15
00:01:03,470 --> 00:01:05,450
as managing termination.

16
00:01:07,160 --> 00:01:10,850
First, let's look at methods for submission in executed service.

17
00:01:11,420 --> 00:01:17,880
It provides a method called submit, which is a better submission method compared to execute in the

18
00:01:17,900 --> 00:01:19,160
executed interface.

19
00:01:20,940 --> 00:01:27,090
Just like execute, we invoke submit method on the executor which is not an execute or service.

20
00:01:27,510 --> 00:01:34,650
Submit method takes a task as input and returns an instance of future, which is another interface in

21
00:01:34,650 --> 00:01:37,140
the Java concurrent package.

22
00:01:37,620 --> 00:01:39,300
We will discuss future in a bit.

23
00:01:40,810 --> 00:01:41,710
Not here.

24
00:01:41,740 --> 00:01:50,410
Tusk can be a rumble as before, or it can be a callable, which is another interface in Java concurrent

25
00:01:50,410 --> 00:01:50,980
package.

26
00:01:51,760 --> 00:01:55,420
Keep in mind that double is from Java LAN package and Java.

27
00:01:56,020 --> 00:02:00,940
Concurrent was introduced in Java PHI and all the concurrency utilities fall under it.

28
00:02:01,630 --> 00:02:04,720
So a task can be either learnable or callable.

29
00:02:05,320 --> 00:02:09,160
What that means is we have overloaded submit methods.

30
00:02:11,070 --> 00:02:17,190
Now callable is a better representation of the task when executing the task to completion can take some

31
00:02:17,190 --> 00:02:20,850
time and we would also need the result of the computation.

32
00:02:21,560 --> 00:02:26,750
For instance, in our download downloader an indexer example we can make download a task, implement

33
00:02:26,750 --> 00:02:32,330
a callable instead of a vulnerable as we have been doing so far as it could take a while to download

34
00:02:32,330 --> 00:02:36,650
the web page and once downloaded, the web page is needed by indexer.

35
00:02:38,610 --> 00:02:45,570
So submit method returns a future instance and future has a method called get which blocks until a task

36
00:02:45,570 --> 00:02:46,380
is completed.

37
00:02:46,920 --> 00:02:50,910
The method returns immediately if the task has already been completed.

38
00:02:51,860 --> 00:02:53,180
In our demo examples.

39
00:02:53,180 --> 00:03:00,520
If we pass downloader task to submit method then in working get on the return future instance would

40
00:03:00,530 --> 00:03:02,780
block until web pages downloaded.

41
00:03:03,350 --> 00:03:07,130
So future docket is kind of similar to the weight method.

42
00:03:07,580 --> 00:03:12,830
That is, it does not waste CPU cycles and it blocks until the result is computed.

43
00:03:13,460 --> 00:03:18,800
So this is how we are going to address the limitation in the previous demo where CPU cycles were being

44
00:03:18,800 --> 00:03:19,400
wasted.

45
00:03:21,450 --> 00:03:27,450
If the task is callable, then future target would actually return the result computed by the task.

46
00:03:29,350 --> 00:03:34,990
If the task is a reasonable, then future target would return a null value rather than the completed

47
00:03:34,990 --> 00:03:35,530
result.

48
00:03:36,220 --> 00:03:41,910
Not that method would block regardless of whether the task is callable or readable.

49
00:03:42,400 --> 00:03:46,810
It is just that with callable get can return the result that was completed.

50
00:03:48,640 --> 00:03:50,890
And here is how the colorful interface looks like.

51
00:03:50,920 --> 00:03:53,080
It has a single method called call.

52
00:03:53,680 --> 00:03:56,050
So a task would implement this interface.

53
00:03:56,530 --> 00:03:59,620
Now recall that run double has a single method run.

54
00:04:00,590 --> 00:04:07,700
As you can see called method unlike run and run a ball returns a result and may also throw an exception.

55
00:04:08,510 --> 00:04:12,170
Not that one method invulnerable does not throw an exception.

56
00:04:12,680 --> 00:04:14,470
And by exception I mean it.

57
00:04:14,480 --> 00:04:15,650
Check the exception.

58
00:04:16,160 --> 00:04:21,310
However, run method can throw an unchecked exception that is within the run method.

59
00:04:21,320 --> 00:04:27,410
You can catch a checked exception and in its place you can throw an unchecked exception.

60
00:04:28,300 --> 00:04:30,650
The data thread would be terminated with this.

61
00:04:32,170 --> 00:04:36,570
So that's something that was not specified earlier during our discussion on reasonable.

62
00:04:37,270 --> 00:04:41,470
So a callable can return a result and can also throw an exception.

63
00:04:42,190 --> 00:04:47,170
In fact, the value returned by future target is the value returned by the call method.

64
00:04:47,830 --> 00:04:53,350
Later in our demo we will see how download our task implements this interface to return the downloaded

65
00:04:53,350 --> 00:04:54,070
web page.

66
00:04:54,700 --> 00:05:00,580
Note that if the task does not have to return a value, then you can implement it as a reasonable.

67
00:05:01,460 --> 00:05:08,090
In our demo indexer tasks can implement this roundabout instead of callable as it does not have to return

68
00:05:08,090 --> 00:05:09,020
any value.

69
00:05:10,790 --> 00:05:13,970
We looked at the submission process of executive service.

70
00:05:14,090 --> 00:05:20,810
Now let's look at how Executor Service manages termination process, which addresses the second limitation

71
00:05:20,810 --> 00:05:26,930
in the previous demo, where Gvm continued to run despite all tasks run to completion.

72
00:05:28,630 --> 00:05:34,180
Executive service life cycle has three states running, shutting down and terminated.

73
00:05:34,840 --> 00:05:37,750
Initially execute service will be in the running state.

74
00:05:37,930 --> 00:05:41,470
And in this state it accepts tasks and executes them.

75
00:05:43,160 --> 00:05:43,940
Next execute.

76
00:05:43,940 --> 00:05:52,790
A service can be moved into shutting down state by invoking its shut down method or shut down no method.

77
00:05:54,130 --> 00:05:59,830
Once one of these methods are invoked, no new tasks will be accepted by execute or service.

78
00:06:00,340 --> 00:06:03,790
Trying to submit new tasks will result in a runtime exception.

79
00:06:05,870 --> 00:06:10,160
If Chandan method is invoked, then executed will shut down in a graceful way.

80
00:06:10,670 --> 00:06:14,450
That is, all the tasks that have been submitted so far will be executed.

81
00:06:16,340 --> 00:06:22,010
If Saddam now is invoked, then, as the name suggests, executor will be shut down abruptly.

82
00:06:22,580 --> 00:06:29,990
What that means is all currently executing tasks will be interrupted via interrupt calls, and all tasks

83
00:06:29,990 --> 00:06:34,880
that are waiting in the queue to be picked up will not be processed on these tasks.

84
00:06:34,880 --> 00:06:40,220
Waiting in the queue will be returned by the method so that they can be saved for later processing.

85
00:06:41,010 --> 00:06:46,080
So shutdown now can be viewed as threat interruption in non executed context.

86
00:06:47,090 --> 00:06:53,600
Once again, note that once any of these methods are executed, the executor will not accept any new

87
00:06:53,600 --> 00:06:54,200
tasks.

88
00:06:56,040 --> 00:07:01,500
Finally, once all tasks have been completed following the invocation of shut down or shut down, now

89
00:07:01,770 --> 00:07:04,020
executed moves into terminated state.

90
00:07:05,760 --> 00:07:11,610
There is also a method called is terminated an executed service which tells whether executed reached

91
00:07:11,610 --> 00:07:13,290
terminated state or not.

92
00:07:15,320 --> 00:07:20,930
One question we can have is why do we have to care about whether executed, terminates or not?

93
00:07:22,470 --> 00:07:25,620
One use case is for the purpose of monitoring.

94
00:07:26,410 --> 00:07:32,260
For example, in a large scale application where we might have hundreds of tasks, we might want to

95
00:07:32,260 --> 00:07:38,410
reuse the same executable, and at some point we might want to shut down the application, in which

96
00:07:38,410 --> 00:07:45,160
case we can invoke the shutdown method, which will let all existing tasks to complete and will not

97
00:07:45,160 --> 00:07:46,710
accept any new tests.

98
00:07:46,720 --> 00:07:47,230
Right.

99
00:07:47,560 --> 00:07:53,200
But if the tasks are taking too long to complete, then we might want to expedite the process.

100
00:07:54,110 --> 00:08:00,830
So we can wait for a certain period of time by invoking a termination method and execute the service

101
00:08:01,430 --> 00:08:04,340
which returns a true if all tasks are completed.

102
00:08:05,080 --> 00:08:07,450
And it returns false if time what happens?

103
00:08:08,220 --> 00:08:13,590
In which case shut down now can be invoked, which we know ignores the tasks that are waiting in the

104
00:08:13,590 --> 00:08:17,100
queue and interrupts the ones that are being currently executed.

105
00:08:18,110 --> 00:08:23,510
Please note that there is no guarantee that interrupt would really interrupt an active task.

106
00:08:24,200 --> 00:08:28,610
The task might need to have the logic to respond to the interrupt call.

107
00:08:30,740 --> 00:08:37,429
So we can invoke a termination one more time and if executed still does not reach terminated state.

108
00:08:37,460 --> 00:08:41,030
Then we can print the statement that executed could not terminate.

109
00:08:41,600 --> 00:08:46,340
So that's how we can monitor the state of the application when we are trying to shut down.

110
00:08:48,300 --> 00:08:50,910
Finally, let's discuss a bit about future.

111
00:08:51,120 --> 00:08:57,180
We saw that a future instance would be retained on invoking the submit method on the executor, and

112
00:08:57,180 --> 00:09:00,780
a future instance represents the lifecycle of a task.

113
00:09:01,380 --> 00:09:06,120
In other words, it can be used to track the progress of a submitted task.

114
00:09:07,230 --> 00:09:08,670
From the way it has been named.

115
00:09:08,700 --> 00:09:15,690
You can think of future as an object that has been pushed into future, but with some incomplete computation

116
00:09:15,990 --> 00:09:18,600
which is needed by some other parts of the program.

117
00:09:19,470 --> 00:09:25,980
So a future object can help in looking back to know whether the incomplete computation has been completed

118
00:09:25,980 --> 00:09:26,490
or not.

119
00:09:27,120 --> 00:09:32,430
We already discussed about get method which blocks if task is not yet completed.

120
00:09:33,060 --> 00:09:36,690
And once the task is completed, it returns the completed result.

121
00:09:36,900 --> 00:09:42,480
If the task is callable, but if task is unable, then it returns a null value.

122
00:09:44,570 --> 00:09:51,110
And here is our interface definition of future and its methods do represent the lifecycle of a submitted

123
00:09:51,110 --> 00:09:51,530
task.

124
00:09:52,480 --> 00:09:55,750
The Council method here can be invoked to cancel the task.

125
00:09:56,440 --> 00:09:59,440
It would return a false if task cannot be cancelled.

126
00:09:59,980 --> 00:10:06,700
And that could be because task has already run to completion or it has already been cancelled.

127
00:10:07,500 --> 00:10:13,230
But if task is not yet started, when the cancel method is invoked, then it too would be written and

128
00:10:13,230 --> 00:10:15,060
the task will not be started.

129
00:10:16,010 --> 00:10:22,100
But if the task is currently being executed, then it would be returned regardless of what is passed

130
00:10:22,100 --> 00:10:22,910
for the method.

131
00:10:22,910 --> 00:10:25,820
Parameter may interrupt if running.

132
00:10:26,740 --> 00:10:31,360
If a true is passed for this parameter, then the running task may be interrupted.

133
00:10:32,450 --> 00:10:38,700
Next is his cancer method, and it would return a true if the task was successfully canceled earlier.

134
00:10:38,720 --> 00:10:40,790
We are invoking cancel method.

135
00:10:41,660 --> 00:10:48,710
Next is is done method which returns it true if the task was completed due to normal termination or

136
00:10:48,710 --> 00:10:51,110
an exception or due to cancellation.

137
00:10:51,910 --> 00:10:54,190
Next is get method which we already know.

138
00:10:54,850 --> 00:11:02,260
Final Method is a timer version of gat, which waits for at most the specified amount of time for computation

139
00:11:02,260 --> 00:11:09,400
to complete, and it would throw a timeout exception if specified time elapses and the task is not completed.

140
00:11:10,120 --> 00:11:16,630
In our webpage downloading use case, if we do not want to wait on the download or task to finish downloading

141
00:11:16,630 --> 00:11:21,130
for more than one or 2 seconds, then we can use this time get method.

142
00:11:21,960 --> 00:11:27,270
One of the follow up lectures will focus on placing time limits on our tests.

143
00:11:28,210 --> 00:11:33,910
Not that among get on time get except for timeout exception for the time get method.

144
00:11:34,240 --> 00:11:37,300
Both methods can throw to check the exceptions.

145
00:11:37,750 --> 00:11:39,310
One is interrupted exception.

146
00:11:39,310 --> 00:11:41,410
Another is execution exception.

147
00:11:42,340 --> 00:11:47,800
Since these methods block their respond to interrupt calls by throwing interrupted exception.

148
00:11:48,790 --> 00:11:55,030
Execution exception would be thrown if the underlying task itself through some exception and the actual

149
00:11:55,030 --> 00:12:00,610
cause of the execution exception, can be inspected by invoking the get cost method.

150
00:12:01,640 --> 00:12:08,750
Also, both methods can throw an unchecked exception or cancellation exception if the task was cancelled.

151
00:12:09,490 --> 00:12:12,790
So those are the different methods in future interface.

152
00:12:13,600 --> 00:12:20,320
The actual future instance written by the executable submit method is an instance of a class called

153
00:12:20,320 --> 00:12:23,260
Future Task, which implements future.

154
00:12:25,330 --> 00:12:27,730
Now finally, let's summarize what we have learned.

155
00:12:28,060 --> 00:12:31,030
Although it was a long lecture, it's actually pretty simple.

156
00:12:31,780 --> 00:12:38,920
First step was to get an executed reference type would be the more extensive executed service instead

157
00:12:38,920 --> 00:12:40,420
of executed interface.

158
00:12:42,100 --> 00:12:48,400
Next is to submit the task to the executor via the Submit method which returns a future object.

159
00:12:49,120 --> 00:12:52,160
Task here can be either returnable or callable.

160
00:12:52,870 --> 00:12:57,100
Callable can return a result and can also throw a checked exception.

161
00:12:58,710 --> 00:13:03,210
Next step would be to invoke the get method on the returned future instance.

162
00:13:03,510 --> 00:13:06,330
And this method would block until the task is completed.

163
00:13:06,990 --> 00:13:11,340
Get would return the result of the computation if the submitted task was callable.

164
00:13:11,460 --> 00:13:13,680
Otherwise it would return a null value.

165
00:13:15,050 --> 00:13:20,990
Finally, we need to shut down the executor and we need not shut down immediately after processing few

166
00:13:20,990 --> 00:13:27,020
tests for applications where we may have large number of threads, we may want to keep the executor

167
00:13:27,020 --> 00:13:31,730
alive for a long time so that it can be used to run different tasks.

168
00:13:32,590 --> 00:13:33,790
So that's about it.

169
00:13:33,820 --> 00:13:38,110
In the next lecture, we will do a demo of what we have learned in this lecture.

170
00:13:38,290 --> 00:13:39,010
Thank you.

