1
00:00:02,040 --> 00:00:03,010
Hello there.

2
00:00:03,030 --> 00:00:03,870
This is the LA.

3
00:00:04,230 --> 00:00:05,220
And welcome back.

4
00:00:05,580 --> 00:00:12,390
So we looked at the primitive data types that represent numbers that is both whole as well as real numbers

5
00:00:12,570 --> 00:00:13,680
for whole numbers.

6
00:00:13,680 --> 00:00:20,490
We had the integer data types byte short and and long while for real numbers we had float and double.

7
00:00:21,090 --> 00:00:23,910
So we looked at six primitive types so far.

8
00:00:24,090 --> 00:00:28,650
And now let's look at the primitive data type that represents characters.

9
00:00:30,670 --> 00:00:37,330
Sometimes we would like our variables to hold single letter characters like an alphabet or a digit,

10
00:00:37,330 --> 00:00:40,360
like zero or a special symbol like dollar.

11
00:00:40,960 --> 00:00:45,610
Note that we are talking about single letter characters and not multiple characters.

12
00:00:45,940 --> 00:00:48,640
For multiple characters you would use a string.

13
00:00:48,760 --> 00:00:54,820
But string is not a primitive data type and is a class that comes with the Java library, as I mentioned

14
00:00:54,820 --> 00:00:57,550
earlier, and we will look at strings later.

15
00:00:57,970 --> 00:01:05,260
So if you want your variable to hold a single character, then in Java you would declare such a variable

16
00:01:05,260 --> 00:01:06,990
with a card data type.

17
00:01:07,000 --> 00:01:08,980
And here is an example.

18
00:01:09,340 --> 00:01:17,770
Here we are declaring a car variable named degree and we are initializing it with a car literal b b

19
00:01:17,770 --> 00:01:19,480
can be for bachelor's degree.

20
00:01:20,370 --> 00:01:26,730
It cultural includes single codes and we would get a compiler error if we omit the codes or if we have

21
00:01:26,730 --> 00:01:28,890
multiple characters within the codes.

22
00:01:29,490 --> 00:01:34,440
So this is how you declare a car variable and it is as simple as this.

23
00:01:34,770 --> 00:01:41,250
But there is a lot more to car data type and let's get a good solid understanding of the car data type.

24
00:01:43,010 --> 00:01:51,440
So though we are dealing with characters internally, Java users 16 bit unsigned integer scheme to represent

25
00:01:51,440 --> 00:01:52,370
characters.

26
00:01:53,130 --> 00:01:58,980
And unsigned integers represent zero on positive integers, but not negative integers.

27
00:01:59,810 --> 00:02:03,800
So essentially characters are integers internally.

28
00:02:04,160 --> 00:02:09,919
For instance, the car will be here, will be stored as the integer 66.

29
00:02:10,039 --> 00:02:12,770
And soon we will see how this mapping happens.

30
00:02:13,220 --> 00:02:15,430
And here is more information.

31
00:02:15,440 --> 00:02:18,140
So bit depth is 16 bits.

32
00:02:18,350 --> 00:02:22,130
That is a car value will be represented in 16 bits.

33
00:02:22,730 --> 00:02:31,580
And because car is internally a 16 bit unsigned integer, the range will be 0 to 2 to the power of 16

34
00:02:31,580 --> 00:02:36,350
minus one that is 0 to 65000 535.

35
00:02:36,440 --> 00:02:40,220
You need to memorize that at is 65,000 535.

36
00:02:40,760 --> 00:02:48,650
Note that here two is raised to the power of 16 and not 15, like in the case of integer data types.

37
00:02:49,130 --> 00:02:54,320
As here we are dealing with unsigned integers which do not include negative numbers.

38
00:02:55,010 --> 00:02:58,490
In other words, we do not need any special sign.

39
00:02:58,500 --> 00:03:05,240
But as with the integer data types, with integer data types, we need a sign bit to distinguish positive

40
00:03:05,240 --> 00:03:06,440
and negative numbers.

41
00:03:07,130 --> 00:03:11,480
So here, since we do not have negative numbers, we do not need a sign.

42
00:03:12,410 --> 00:03:17,300
So with unsigned integers, all of the bits together represent the magnitude.

43
00:03:17,900 --> 00:03:23,540
Recall that with signed integers, the bits following the sign that represent the magnitude.

44
00:03:24,270 --> 00:03:30,420
So it means that we can represent as many as two to the power of 16 characters in Java.

45
00:03:30,570 --> 00:03:34,350
That is 65,536 characters.

46
00:03:34,800 --> 00:03:42,180
So a car variable can take any of those 65,000, five, 36 characters and the corresponding integer

47
00:03:42,180 --> 00:03:45,210
value will be stored internally like in the memory.

48
00:03:45,810 --> 00:03:48,300
Like 6 to 6 for the character b.

49
00:03:49,400 --> 00:03:56,360
And if you're wondering what makes up all those 65,000, five, 36 characters, because in English,

50
00:03:56,360 --> 00:03:59,360
all we have is the characters A to Z.

51
00:03:59,450 --> 00:04:03,470
And of course, they can be represented in uppercase as well as lowercase.

52
00:04:03,500 --> 00:04:06,920
And we have the digits 029 and few special symbols.

53
00:04:07,430 --> 00:04:11,900
So what makes up all of these 65,000, five, 36 characters?

54
00:04:12,470 --> 00:04:20,060
We need to remember that we have many languages in this world and each of those languages has many characters.

55
00:04:20,329 --> 00:04:20,670
Right?

56
00:04:20,720 --> 00:04:22,700
Each of those languages has an alphabet.

57
00:04:23,520 --> 00:04:25,950
So B how many characters to represent?

58
00:04:26,400 --> 00:04:31,980
For instance, we should be able to represent a character such as this one, which is from one of the

59
00:04:31,980 --> 00:04:37,100
Indian languages, or even an emoji symbol like Tears of Joy.

60
00:04:37,110 --> 00:04:39,960
And we know that we have many such symbols.

61
00:04:40,470 --> 00:04:44,340
So we need to be able to represent such kind of characters to.

62
00:04:45,270 --> 00:04:51,720
And so there is a mapping between characters and the corresponding integer values that gets stored internally.

63
00:04:52,410 --> 00:04:56,730
And this mapping is defined by the Unicode character set.

64
00:04:57,540 --> 00:05:05,580
So Unicode is a standard character set like ASCII, but can represent all characters in all languages

65
00:05:05,580 --> 00:05:06,540
across the world.

66
00:05:06,930 --> 00:05:10,500
And it can represent all those exotic symbols too.

67
00:05:11,010 --> 00:05:18,180
And it does so by associating every character with a hexadecimal number called code point.

68
00:05:18,690 --> 00:05:19,890
It's called a code point.

69
00:05:19,890 --> 00:05:25,770
And that hexadecimal number maps to some integer value, which is what is stored internally in binary

70
00:05:25,770 --> 00:05:26,310
format.

71
00:05:27,170 --> 00:05:32,750
But Unicode is a standard specification and it can have different implementations.

72
00:05:32,990 --> 00:05:42,140
And Java uses one such implementation called UTF 16, and such an implementation is referred to as an

73
00:05:42,140 --> 00:05:43,130
encoding scheme.

74
00:05:44,270 --> 00:05:51,050
Languages like C Sharp and Python also use of 16 four string characters and there are other encoding

75
00:05:51,050 --> 00:05:54,590
schemes to like UTF eight and UTF 32.

76
00:05:54,950 --> 00:05:58,460
And these schemes vary in the storage space they use.

77
00:05:58,490 --> 00:06:05,450
For instance, UTF 16 might use 16 bits for a particular character, while UTF eight might use only

78
00:06:05,480 --> 00:06:07,340
eight bits for the same character.

79
00:06:08,330 --> 00:06:16,400
So Unicode is a character set and YouTube 16 is the encoding scheme that Java uses and 16 also defines

80
00:06:16,400 --> 00:06:24,050
hexadecimal numbers like Unicode, and for most characters it uses the same hexadecimal numbers as Unicode.

81
00:06:25,050 --> 00:06:32,070
So in Java, every valid collateral is encoded as a UTF 16 hexadecimal number.

82
00:06:32,610 --> 00:06:42,750
For instance, the collateral B would be encoded as UTF 16 hexadecimal number 0042 and its corresponding

83
00:06:42,750 --> 00:06:46,620
16 bit unsigned integer is what gets stored internally.

84
00:06:47,400 --> 00:06:56,130
So here we can see the binary format of the unsigned integer and here the letter four in the hexadecimal

85
00:06:56,130 --> 00:07:03,660
number corresponds to 0100 in the binary format and two corresponds to 0010.

86
00:07:04,230 --> 00:07:07,190
So that's the benefit of hexadecimal numbers.

87
00:07:07,200 --> 00:07:10,560
It can be easily mapped to the binary format.

88
00:07:11,390 --> 00:07:17,060
And this 16 bit unsigned integer corresponds to the decimal value 66.

89
00:07:17,480 --> 00:07:22,190
So that's how the character letter B is mapped to 66, as I mentioned earlier.

90
00:07:23,090 --> 00:07:27,440
So for every character you can imagine such a tuple.

91
00:07:27,830 --> 00:07:36,500
Here we have the character Uppercase B and it is associated with UTF 16 hexadecimal number 0042 and

92
00:07:36,500 --> 00:07:38,150
also decimal 6 to 6.

93
00:07:38,750 --> 00:07:42,200
The binary equivalent of 66 is what is stored internally.

94
00:07:42,860 --> 00:07:49,670
But note that both hexadecimal numbers 004, two and 66 correspond to the same binary number.

95
00:07:50,410 --> 00:07:56,890
In fact, the car variable degree can also be directly assigned such a hexadecimal number.

96
00:07:57,900 --> 00:08:05,760
That is, we can assign a literal such as this one, and this is called as Unicode escape sequence where

97
00:08:05,760 --> 00:08:13,470
we have a backslash followed by U, followed by the hexadecimal number 42 U here stands for Unicode

98
00:08:13,500 --> 00:08:16,020
and it needs to be in lowercase.

99
00:08:16,050 --> 00:08:17,760
Otherwise we get a compiler error.

100
00:08:18,680 --> 00:08:23,030
So this is same as assigning the cultural uppercase.

101
00:08:23,030 --> 00:08:30,770
B Typically you would use characters for variable initialization, but sometimes if you have to represent

102
00:08:30,770 --> 00:08:37,340
certain special characters and if your editor does not support them, then you can use such a Unicode

103
00:08:37,340 --> 00:08:39,710
escape sequence for initialization.

104
00:08:40,620 --> 00:08:48,420
Now here in our table, the default value for cash is Unicode number zero, which represents a non character.

105
00:08:48,960 --> 00:08:56,550
And here also we can see the escape sequence and another character is a control character, meaning

106
00:08:56,550 --> 00:08:58,320
it is not something that you can print.

107
00:08:59,350 --> 00:09:00,970
Now in input output.

108
00:09:00,970 --> 00:09:07,360
Chapter one of the first lectures gives a very detailed introduction to character encoding.

109
00:09:07,390 --> 00:09:10,450
In fact, it's a prerequisite lecture for that section.

110
00:09:10,570 --> 00:09:14,770
So if you are not familiar with encoding, you can learn about it when you get there.

111
00:09:14,860 --> 00:09:20,350
And you can also check out the article I mentioned about in one of the previous lectures, and the link

112
00:09:20,350 --> 00:09:22,060
was given in the resources section.

113
00:09:22,060 --> 00:09:27,790
And that article discusses about the internal data representation schemes like sign to complement and

114
00:09:28,000 --> 00:09:32,920
replace 754 format and it also discusses about the character encoding.

115
00:09:33,850 --> 00:09:37,840
Now let's go ahead and extend our student class with a variable.

116
00:09:40,340 --> 00:09:40,470
Okay.

117
00:09:40,580 --> 00:09:44,390
Here is our student class and we already have these different variables.

118
00:09:44,690 --> 00:09:51,350
So let's go ahead and introduce a new variable called degree, which would be of type car.

119
00:09:51,350 --> 00:10:00,920
So car degree and let's initialize it with the car literal B where we can be for bachelors.

120
00:10:00,920 --> 00:10:04,520
So the student is a bachelor student.

121
00:10:07,090 --> 00:10:09,310
So let's also print the degree here.

122
00:10:11,000 --> 00:10:13,080
And let's compile and execute it.

123
00:10:13,100 --> 00:10:17,030
So we need to be in our basics directory, which has this file.

124
00:10:24,070 --> 00:10:26,680
So it prints the degree b.

125
00:10:26,770 --> 00:10:31,110
Now let's go ahead and try certain invalid initialization.

126
00:10:31,120 --> 00:10:32,920
So first thing, let's remove this.

127
00:10:33,580 --> 00:10:38,110
Now the compiler will think that this is a variable, but a variable B is not there.

128
00:10:38,110 --> 00:10:40,380
So it will give us a compilation error.

129
00:10:40,390 --> 00:10:41,860
So let's recompile it.

130
00:10:43,550 --> 00:10:46,430
As you can see, it says it cannot find the symbol.

131
00:10:46,550 --> 00:10:46,840
Right.

132
00:10:46,910 --> 00:10:51,350
Because B is not a variable that is declared anywhere here.

133
00:10:51,800 --> 00:10:55,190
So we need to have single codes here.

134
00:10:55,460 --> 00:10:56,960
That's a requirement.

135
00:10:56,960 --> 00:10:59,210
And we cannot also have multiple characters.

136
00:10:59,210 --> 00:11:00,770
So this is also invalid.

137
00:11:03,010 --> 00:11:03,350
Okay.

138
00:11:03,460 --> 00:11:05,440
So a complaints about that.

139
00:11:05,770 --> 00:11:08,710
Also, it cannot be empty like this.

140
00:11:11,960 --> 00:11:13,960
It's just empty character, literal.

141
00:11:14,300 --> 00:11:18,650
So that's not allowed, although you can have an empty space here.

142
00:11:19,520 --> 00:11:20,600
So let me.

143
00:11:21,820 --> 00:11:22,930
Clear up the screen.

144
00:11:24,500 --> 00:11:25,310
That is good.

145
00:11:26,030 --> 00:11:28,160
If you run it, it just prints empty here.

146
00:11:29,030 --> 00:11:30,200
So this is good.

147
00:11:31,190 --> 00:11:31,640
Now.

148
00:11:31,640 --> 00:11:37,410
So that's the LATRELL And we also discussed about the unique chord escape sequence.

149
00:11:37,430 --> 00:11:42,910
We said that the car literal Uppercase B can also be represented in this way.

150
00:11:42,920 --> 00:11:45,080
0042.

151
00:11:46,830 --> 00:11:48,510
And this will also print.

152
00:11:50,020 --> 00:11:51,100
The car be.

153
00:11:52,630 --> 00:12:02,680
As you can see, because this Unicode number corresponds to the uppercase character B and UTF 16.

154
00:12:03,010 --> 00:12:04,240
So we are printing this.

155
00:12:04,240 --> 00:12:07,900
And we also said that this needs to be in lowercase.

156
00:12:07,900 --> 00:12:12,400
So if you have uppercase, then it we get a compiler error.

157
00:12:14,270 --> 00:12:18,890
Similarly, this needs to be a valid hexadecimal number.

158
00:12:19,340 --> 00:12:26,840
So this is called as a code point, it's called as a code point in Unicode specification and UTF 16.

159
00:12:26,840 --> 00:12:29,510
We just call it as a code unit.

160
00:12:29,840 --> 00:12:31,850
That's just for your information.

161
00:12:31,850 --> 00:12:35,270
So if we compile, so it gives us an error.

162
00:12:35,600 --> 00:12:38,060
So it needs to be a valid number here.

163
00:12:38,960 --> 00:12:42,110
Now the default value is a null character.

164
00:12:42,380 --> 00:12:42,800
Right.

165
00:12:42,800 --> 00:12:45,320
Default value for care is null.

166
00:12:45,950 --> 00:12:48,610
So unless something that we cannot print.

167
00:12:48,620 --> 00:12:50,330
So let's also.

168
00:12:52,040 --> 00:12:52,640
Do that.

169
00:12:53,240 --> 00:12:57,200
If we run it, you can see it just doesn't print anything.

170
00:12:57,200 --> 00:13:01,550
So that's the null character, which is the Unicode number zero.

171
00:13:02,210 --> 00:13:07,430
It is same as this, as initializing in this way.

172
00:13:07,550 --> 00:13:10,610
But generally we have a car variable.

173
00:13:10,610 --> 00:13:14,780
Generally we would initialize it for INT and other variables.

174
00:13:14,780 --> 00:13:21,950
We may have default initialization, but generally I haven't seen car variables getting a default value.

175
00:13:22,520 --> 00:13:25,340
Generally we will assign some value to it.

176
00:13:26,000 --> 00:13:29,600
So that's how it is in practice, at least from what I have seen.

177
00:13:29,630 --> 00:13:36,470
Now the next thing is, you may recall that we talked about boxed primitives when discussing integer

178
00:13:36,470 --> 00:13:37,190
data types.

179
00:13:37,190 --> 00:13:42,920
I said that every primitive type also has an associated box primitive for it.

180
00:13:42,950 --> 00:13:44,990
We looked at the integer class.

181
00:13:44,990 --> 00:13:49,340
It's also called as a wrapper class and box parameters will be discussed later.

182
00:13:49,460 --> 00:13:55,640
But we saw that for four int we had the integer class and integer class defined both main value as well

183
00:13:55,640 --> 00:13:56,540
as max value.

184
00:13:56,900 --> 00:14:04,400
Similarly for car there is this class called character, so it is the boxed primitive class or the wrapper

185
00:14:04,400 --> 00:14:05,000
class.

186
00:14:05,000 --> 00:14:08,150
So let me also show you that particular class here.

187
00:14:08,150 --> 00:14:08,990
So here it is.

188
00:14:08,990 --> 00:14:10,280
This is my Eclipse editor.

189
00:14:10,400 --> 00:14:16,550
So here this is a character class and it is defining the main value and it is defining as this the Unicode

190
00:14:16,550 --> 00:14:17,240
number zero.

191
00:14:17,240 --> 00:14:21,350
So this is the Unicode escape sequence and it is the Unicode number zero.

192
00:14:21,470 --> 00:14:27,440
And for max value it is displaying this we have this value for EPS.

193
00:14:27,830 --> 00:14:29,990
And so that's just for your information.

194
00:14:29,990 --> 00:14:35,150
But we will discuss the boxed primitive classes later on in a different section.

195
00:14:35,450 --> 00:14:42,970
Now, finally, I just want to show you one site called as Unicode hyphen Babble.com.

196
00:14:43,790 --> 00:14:48,980
So it's a table of all the Unicode mappings, it has all of those mappings.

197
00:14:48,980 --> 00:14:53,420
So this is just for your information, so you can also explore it.

198
00:14:53,420 --> 00:14:58,010
So if we scroll down here, we can see all of these different characters.

199
00:14:58,010 --> 00:15:00,770
For example, here we have the null character.

200
00:15:00,770 --> 00:15:05,300
So when I hover over it, it says that this is the null character.

201
00:15:05,840 --> 00:15:08,300
U plus here indicates Unicode.

202
00:15:08,630 --> 00:15:11,870
So it's an uppercase U and this is Unicode.

203
00:15:11,870 --> 00:15:18,620
And in the in the lecture we have seen that it is backward slash followed by U that's for the up 16.

204
00:15:18,620 --> 00:15:25,760
But in Unicode this is the notation that they use U plus and it has a number zero and the decimal also

205
00:15:25,760 --> 00:15:27,860
is being shown there that the decimal is zero.

206
00:15:27,890 --> 00:15:33,860
Now for B here it says zero zero for two and the decimal 66.

207
00:15:34,310 --> 00:15:34,460
Right.

208
00:15:34,520 --> 00:15:35,660
That's what we have seen.

209
00:15:35,660 --> 00:15:42,410
And for a it will be one less which is zero zero for one and the symbol 65 and for C, it's going to

210
00:15:42,410 --> 00:15:44,840
be the hexadecimal number 43.

211
00:15:44,840 --> 00:15:48,260
So that's called as the code point and the decimal is 67.

212
00:15:48,800 --> 00:15:55,340
So these are all the uppercase alphabets and we can also see the lowercase versions here and each of

213
00:15:55,340 --> 00:16:01,670
them has the tuple, right, the character, the Unicode as well as the decimal equivalent.

214
00:16:02,420 --> 00:16:05,780
Now if you scroll down, you can also see all other.

215
00:16:07,040 --> 00:16:09,170
Characters from other languages too.

216
00:16:10,250 --> 00:16:12,070
So you can see it here.

217
00:16:12,080 --> 00:16:12,980
Also, it's changing.

218
00:16:12,980 --> 00:16:15,970
It says what we are looking at at that instance.

219
00:16:15,980 --> 00:16:21,950
So if you click on that, if you click on this, it shows all of the different.

220
00:16:24,080 --> 00:16:27,260
Languages, for example, Bengali, Gujarati.

221
00:16:27,560 --> 00:16:31,070
So these are all the Indian languages, so you can scroll down.

222
00:16:31,310 --> 00:16:36,980
So all you have to do is just scroll down and you can see the different characters and the associated

223
00:16:36,980 --> 00:16:39,770
hexadecimal numbers as well as the decimal numbers.

224
00:16:39,980 --> 00:16:41,660
So that's just for your information.

225
00:16:41,660 --> 00:16:44,560
So and that is at Unicode hyphen table dot com.

226
00:16:44,600 --> 00:16:46,340
And you can also explore it.

227
00:16:46,940 --> 00:16:52,820
And in the next lecture, we will see how a cat variable can be assigned in a letter to.

228
00:16:53,060 --> 00:16:54,080
So that's also possible.

229
00:16:54,080 --> 00:16:56,900
That's very uncommon, but we will also check that out.

230
00:16:57,320 --> 00:16:58,670
So that's about it for now.

231
00:16:58,700 --> 00:17:00,740
Thank you and see you in the next lecture.

