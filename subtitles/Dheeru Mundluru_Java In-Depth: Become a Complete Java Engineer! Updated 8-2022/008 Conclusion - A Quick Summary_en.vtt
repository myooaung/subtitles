WEBVTT
1
00:00:00.970 --> 00:00:01.930
Hello there.

2
00:00:01.960 --> 00:00:03.760
We are not done with the state classes.

3
00:00:03.790 --> 00:00:09.160
Let's go ahead and do a quick recap of all the important features we looked at in this chapter.

4
00:00:10.430 --> 00:00:14.180
The main benefit of master class is to serve it and close in class.

5
00:00:14.570 --> 00:00:18.050
And so the functionality is kept close to the original class.

6
00:00:18.470 --> 00:00:21.140
It also helps in avoiding class pollution.

7
00:00:21.620 --> 00:00:28.160
And finally, they also lead to better design as nested classes helping modular using the functionality.

8
00:00:29.730 --> 00:00:35.820
Nestor Classes are classified into two categories inner classes and static number classes in the classes

9
00:00:35.820 --> 00:00:41.970
include non static member classes, anonymous classes and local classes and we looked at all four of

10
00:00:41.970 --> 00:00:42.420
them.

11
00:00:42.690 --> 00:00:45.990
Of these local classes are least frequently used.

12
00:00:47.690 --> 00:00:54.470
While top level classes can have only public and default access modifiers, nested classes can be declared

13
00:00:54.470 --> 00:00:56.420
with all four access levels.

14
00:00:57.670 --> 00:01:00.760
Next property is about accessibility of members.

15
00:01:01.390 --> 00:01:08.200
Nested class can access any member of the class and similarly another class can also access any member

16
00:01:08.200 --> 00:01:09.380
of the nested class.

17
00:01:09.400 --> 00:01:16.090
This would include private members to note that static member classes, however, cannot access instance

18
00:01:16.090 --> 00:01:18.070
members of the enclosing class.

19
00:01:18.220 --> 00:01:20.740
They can only access static members.

20
00:01:22.700 --> 00:01:27.560
We also know that at the bytecode level there is no concept of nested class.

21
00:01:27.980 --> 00:01:33.980
Every nested class is translated into a top level class and they are named as shown here.

22
00:01:34.190 --> 00:01:40.370
Anonymous classes are named as author, class, name, or some number, while all other nested class

23
00:01:40.370 --> 00:01:45.570
names have the name, order, class name dollar in our class name and compiler.

24
00:01:45.590 --> 00:01:46.760
Does this for us?

25
00:01:48.530 --> 00:01:52.400
The first nested class we discussed was non static member class.

26
00:01:52.820 --> 00:01:59.450
It is used when the class object needs access to the enclosing object so that it can access instance

27
00:01:59.450 --> 00:02:01.430
members of the enclosing object.

28
00:02:03.220 --> 00:02:08.800
In that class object cannot even be created unless the enclosing object is already created.

29
00:02:09.220 --> 00:02:14.200
So enclosing object is created first and then it is used to create the inner class object.

30
00:02:15.180 --> 00:02:21.930
That object is simply an instance member of the enclosed object, just like any instance member, and

31
00:02:21.930 --> 00:02:25.590
hence we refer to the inner class as non static member class.

32
00:02:25.860 --> 00:02:28.140
That is, it is an instance member class.

33
00:02:28.920 --> 00:02:34.590
Since an aircraft object needs access to the enclosing object, the inert class object would maintain

34
00:02:34.590 --> 00:02:41.070
a hidden reference to the enclosing object and building such a hidden reference takes up space and time

35
00:02:41.730 --> 00:02:42.980
due to the hidden reference.

36
00:02:42.990 --> 00:02:48.750
Outer class object will not be garbage collected until another class object is alive.

37
00:02:50.620 --> 00:02:56.260
If ever you have the need to implement an adapter, then go for nonstrategic member class.

38
00:02:56.860 --> 00:03:04.090
All these methods return instances of non static member classes which produce different views of the

39
00:03:04.390 --> 00:03:05.170
class object.

40
00:03:07.080 --> 00:03:12.840
And here is a restriction and non static member class cannot have static members.

41
00:03:13.020 --> 00:03:19.800
The reason is static members should be accessible without an object and that's not possible with a non

42
00:03:19.800 --> 00:03:21.000
static member class.

43
00:03:21.390 --> 00:03:28.890
As members of a non static member class are accessible only by creating an object of it, which is possible

44
00:03:28.890 --> 00:03:31.920
only by creating an instance of the outer class.

45
00:03:32.280 --> 00:03:34.380
So we are creating two objects here.

46
00:03:36.130 --> 00:03:39.850
Next, we discussed anonymous classes, which were very interesting.

47
00:03:39.880 --> 00:03:45.160
They are nameless and they are declared and instantiated at the point of use.

48
00:03:45.730 --> 00:03:52.690
One common use case was to use them as function objects, which, according to an effective item, should

49
00:03:52.690 --> 00:03:56.590
be used to define strategies as in the strategy pattern.

50
00:03:57.410 --> 00:03:59.600
Not that a function object is stateless.

51
00:03:59.870 --> 00:04:06.590
That is the only abstract method it exports operates on other objects that are passed as input.

52
00:04:07.410 --> 00:04:12.450
Now such anonymous objects which act as function objects are frequently created.

53
00:04:12.480 --> 00:04:16.589
Then the advice is to declare them using static final fields.

54
00:04:16.950 --> 00:04:20.040
That is, we are essentially creating a singleton.

55
00:04:22.040 --> 00:04:28.040
Finally we looked at static member classes and we should use them when we do not need access to the

56
00:04:28.040 --> 00:04:29.510
end closing class instance.

57
00:04:29.930 --> 00:04:36.170
We know that if we do not use the modifier static in the class declaration then it would become a non

58
00:04:36.170 --> 00:04:41.660
static member class and a hidden reference will be created to the enclosing object which will take up

59
00:04:41.660 --> 00:04:42.620
space and time.

60
00:04:44.390 --> 00:04:51.320
A static numbered class is simply a static member of the enclosing class, and it means that it can

61
00:04:51.320 --> 00:04:56.990
be accessed without having an instance of the enclosing class, just like in the case of a static field

62
00:04:56.990 --> 00:04:58.130
or a static method.

63
00:04:58.760 --> 00:05:04.580
And from within the static member class, we can only access static members of the enclosing class.

64
00:05:05.030 --> 00:05:11.930
That's because it is a static member like a static method and hence cannot access any instance related

65
00:05:11.930 --> 00:05:13.460
stuff in the outer class.

66
00:05:14.090 --> 00:05:18.470
However, a static member class is like any other ordinary class.

67
00:05:18.830 --> 00:05:21.920
It is just that it is declared inside another class.

68
00:05:22.190 --> 00:05:27.500
So like a regular class, it can include both static as well as instance members.

69
00:05:28.340 --> 00:05:35.060
It can have instance members too as it can be instantiated without the help of the enclosing class object.

70
00:05:36.680 --> 00:05:40.430
Finally, these are the common use cases of static member classes.

71
00:05:40.790 --> 00:05:45.420
First is to represent private components of enclosing objects.

72
00:05:45.580 --> 00:05:45.940
Right.

73
00:05:45.950 --> 00:05:52.280
They can be used to represent the components of enclosing objects, like in the case of node class in

74
00:05:52.310 --> 00:05:53.030
hash map.

75
00:05:53.570 --> 00:05:56.240
Second use case would be to represent strategies.

76
00:05:56.270 --> 00:06:00.140
And third use case would be as a public helper class.

77
00:06:00.990 --> 00:06:02.880
So that's the end of this chapter.

78
00:06:02.910 --> 00:06:09.240
A nice thing is we not only looked at the syntax of nested classes, but we learned about why they are

79
00:06:09.240 --> 00:06:09.780
needed.

80
00:06:10.200 --> 00:06:13.560
And we also looked at how they are commonly used in practice.

81
00:06:14.220 --> 00:06:19.680
I hope you enjoyed learning about nested classes and will be using them whenever you see a need for

82
00:06:19.680 --> 00:06:20.040
them.

83
00:06:20.520 --> 00:06:21.840
This is the rule.

84
00:06:21.870 --> 00:06:23.730
Thank you and good bye for now.

