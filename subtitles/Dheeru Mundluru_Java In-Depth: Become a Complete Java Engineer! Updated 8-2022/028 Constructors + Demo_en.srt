1
00:00:02,090 --> 00:00:03,000
Hello there.

2
00:00:03,020 --> 00:00:04,150
This is the De La Rue.

3
00:00:04,160 --> 00:00:05,030
And welcome back.

4
00:00:05,270 --> 00:00:10,550
Now let's learn about another fundamental construct of a class called US constructor.

5
00:00:11,270 --> 00:00:17,690
As the name suggests, it has something to do with constructing something and that something is an object.

6
00:00:18,140 --> 00:00:22,910
So constructors are all about constructing or creating objects.

7
00:00:24,030 --> 00:00:27,300
But we have already been doing that with our student class.

8
00:00:27,450 --> 00:00:30,900
We have been creating our constructing objects.

9
00:00:31,410 --> 00:00:35,310
So there is this thing called constructor within the student class.

10
00:00:35,670 --> 00:00:39,360
The thing is, we were dealing with constructors implicitly.

11
00:00:40,620 --> 00:00:45,900
That is a compiler was creating the constructor for us and we were using it implicitly.

12
00:00:46,350 --> 00:00:48,660
So everything was happening implicitly.

13
00:00:48,840 --> 00:00:55,710
So when we compile our class, the compiler was automatically inserting a constructor into the bytecode

14
00:00:55,950 --> 00:00:57,720
and we were using it to.

15
00:00:58,570 --> 00:01:05,740
Now generally the main purpose of a constructor is to initialize the state of the object, that is to

16
00:01:05,740 --> 00:01:08,260
initialize the instance variables of the class.

17
00:01:08,560 --> 00:01:13,510
It can also do other things, but the main purpose is to initialize the state.

18
00:01:13,540 --> 00:01:15,640
That is what constructors normally do.

19
00:01:16,240 --> 00:01:19,510
Now in our student example, we were initializing state.

20
00:01:19,510 --> 00:01:21,070
We are the object reference.

21
00:01:21,370 --> 00:01:21,700
Right.

22
00:01:21,700 --> 00:01:26,680
So we are saying object reference dot and the field name to initialize the field.

23
00:01:27,190 --> 00:01:29,140
But this is not the right way to do it.

24
00:01:29,170 --> 00:01:33,190
And the right way would be to initialize state via constructor.

25
00:01:33,700 --> 00:01:40,030
So for that, we need to define a constructor in our class and that would help with both object creation

26
00:01:40,030 --> 00:01:41,710
and initializing state.

27
00:01:42,190 --> 00:01:45,670
So the initialization statements will be part of that constructor.

28
00:01:46,490 --> 00:01:52,210
Now a constructor is just a block of code, like a method, but with some differences, as we will soon

29
00:01:52,210 --> 00:01:52,660
see.

30
00:01:52,960 --> 00:01:56,560
So in this lecture we are going to learn about constructors.

31
00:01:58,010 --> 00:02:03,800
Now, before looking at the syntax of a constructor, let's consider our student object creation statement

32
00:02:03,830 --> 00:02:06,160
as we are using a constructor here.

33
00:02:06,170 --> 00:02:07,730
So we are going to look at that.

34
00:02:07,850 --> 00:02:11,360
Now we know that this particular statement has three parts in it.

35
00:02:11,360 --> 00:02:16,520
We discussed about that and each of those parts tell JVM to do something.

36
00:02:16,910 --> 00:02:18,680
Let's look at the three parts once again.

37
00:02:19,740 --> 00:02:24,660
So this part tells GM to allocate space for a reference variable.

38
00:02:26,000 --> 00:02:31,420
And this part tells GM to allocate space for a new student object.

39
00:02:31,430 --> 00:02:37,700
And finally, the assignment operator assigns the memory address of the student object to the variable

40
00:02:37,700 --> 00:02:40,490
s and this particular fragment.

41
00:02:40,490 --> 00:02:44,930
And the second step is actually an invocation of the constructor.

42
00:02:45,850 --> 00:02:51,550
Notice that we are using the term invocation, just like in the case of methods as constructors are

43
00:02:51,550 --> 00:02:56,530
similar to methods and hence we can see the parentheses following the class name.

44
00:02:57,490 --> 00:03:01,180
This fragment essentially executes the constructor code.

45
00:03:01,840 --> 00:03:03,880
The second step here does three things.

46
00:03:04,150 --> 00:03:06,610
First is it creates an object in memory.

47
00:03:06,820 --> 00:03:09,520
Then it invokes the object's constructor.

48
00:03:09,820 --> 00:03:13,990
And finally it returns the memory address of the created object.

49
00:03:15,180 --> 00:03:17,220
And here is the syntax of a constructor.

50
00:03:17,490 --> 00:03:21,030
It has the same name as the class syntax.

51
00:03:21,250 --> 00:03:24,400
It looks very similar to a method like methods.

52
00:03:24,420 --> 00:03:27,240
It can optionally have parameters.

53
00:03:27,750 --> 00:03:32,010
And the main difference is that constructor doesn't have a written type.

54
00:03:32,990 --> 00:03:37,910
And like methods, a constructor can also have a var parameter.

55
00:03:39,650 --> 00:03:45,140
And here's an example class definition with a constructor that has a single parameter.

56
00:03:45,710 --> 00:03:48,950
As you can see, the constructor has the same name as the class.

57
00:03:49,840 --> 00:03:56,290
The class has a single instance variable ID which is initialized to its default zero and the constructor

58
00:03:56,290 --> 00:04:03,430
has a single statement which is re initializing the ID field to a new value and the new value is passed

59
00:04:03,430 --> 00:04:05,440
as an argument to the constructor.

60
00:04:06,040 --> 00:04:10,510
So basically the object state is being initialized in the constructor.

61
00:04:12,210 --> 00:04:19,350
And here's the new student object creation statement with a value of 1001 is passed as an argument to

62
00:04:19,350 --> 00:04:20,339
the constructor.

63
00:04:20,850 --> 00:04:24,660
So the ID field will be re initialized to 2001.

64
00:04:25,510 --> 00:04:32,440
So instead of doing this to initialize state, we are now using a constructor and this is how it needs

65
00:04:32,440 --> 00:04:33,070
to be done.

66
00:04:34,910 --> 00:04:42,380
Now if we do not provide a constructor in our class, then on compilation the compiler automatically

67
00:04:42,380 --> 00:04:44,450
inserts a default constructor.

68
00:04:45,080 --> 00:04:48,770
So this is what was happening all this time with our student class.

69
00:04:48,920 --> 00:04:52,070
And the default constructor doesn't have any parameters.

70
00:04:52,460 --> 00:04:59,140
Now, since it doesn't have any parameters, the default constructor is also referred to as a new ARX

71
00:04:59,210 --> 00:04:59,990
constructor.

72
00:05:00,590 --> 00:05:05,390
So this is a term that you will be frequently using or you will be frequently encountering.

73
00:05:05,870 --> 00:05:11,420
Note that this would happen only if the class definition does not include a constructor.

74
00:05:11,780 --> 00:05:19,160
But if the class includes a constructor and that constructor can be a constructor, or it can also have

75
00:05:19,160 --> 00:05:20,030
parameters.

76
00:05:20,240 --> 00:05:24,980
But in that case, the compiler will not insert the default constructor.

77
00:05:25,340 --> 00:05:29,150
So keep that in mind as this is something that you may forget.

78
00:05:30,650 --> 00:05:34,410
And here's an example where the class definition does not have a constructor.

79
00:05:34,430 --> 00:05:40,280
So when we compile the class, the compiler inserts say No, our constructor into the bytecode.

80
00:05:41,080 --> 00:05:47,530
And this allows us to create an object by invoking the No Arks constructor, which is what happened

81
00:05:47,530 --> 00:05:50,020
with the student objects that we created.

82
00:05:51,700 --> 00:05:53,950
And here is an example with the constructor.

83
00:05:54,340 --> 00:05:59,680
So in this case, as mentioned earlier, the compiler will not insert a default constructor.

84
00:06:00,070 --> 00:06:04,890
So here we can create an object by invoking the given constructor.

85
00:06:04,900 --> 00:06:10,120
But we cannot create an object by invoking a no ARX constructor.

86
00:06:10,570 --> 00:06:15,430
Now, if you want to do that, then you would have to manually add a NOx constructor.

87
00:06:16,000 --> 00:06:21,850
So basically the compiler will not auto insert a default constructor for us.

88
00:06:23,710 --> 00:06:30,160
And since constructors do not have a return type, they can not return any value, just like methods

89
00:06:30,160 --> 00:06:32,020
with avoid return type.

90
00:06:32,350 --> 00:06:37,900
However, like we see here, they can still have an empty return statement.

91
00:06:37,930 --> 00:06:40,780
That is the return keyword followed by a semicolon.

92
00:06:41,440 --> 00:06:47,020
Now, when this statement gets executed, the control immediately returns from the constructor.

93
00:06:47,500 --> 00:06:49,270
So the control returns from the constructor.

94
00:06:49,630 --> 00:06:55,360
Now, if we have any code immediately following the return statement, then it is unreachable and we

95
00:06:55,360 --> 00:06:58,150
will get a compilation error and we would have to fix that.

96
00:06:58,540 --> 00:07:03,790
I think in practice it would be pretty rare to have such a return statement in a constructor.

97
00:07:04,810 --> 00:07:08,680
And here is an example where a written statement makes sense.

98
00:07:09,190 --> 00:07:15,970
Now the code in the if statement executes if the condition is true and at the end we return the control

99
00:07:15,970 --> 00:07:17,320
using a written statement.

100
00:07:18,080 --> 00:07:22,160
In this case, the code following the if statement will not be executed.

101
00:07:22,160 --> 00:07:28,280
But it is still reachable and valid and it would be executed when the condition in the if statement

102
00:07:28,280 --> 00:07:28,910
is false.

103
00:07:29,270 --> 00:07:35,720
So when condition is false, the body of F will not be executed and only the code following the if statement

104
00:07:35,720 --> 00:07:36,710
will execute.

105
00:07:37,310 --> 00:07:43,550
Note that we can also have such empty return statements in a method which have void as written type,

106
00:07:43,880 --> 00:07:50,210
and it is perhaps more common to see such statements in a method rather than in constructors.

107
00:07:50,600 --> 00:07:52,670
So that's an introduction to constructors.

108
00:07:52,790 --> 00:08:00,290
A constructor is used in the context of creating an object and is almost always used to initialize object

109
00:08:00,290 --> 00:08:03,230
state, although it might also do other things.

110
00:08:03,590 --> 00:08:09,680
Now let's go ahead and extend our student class by adding a constructor and initializing the state.

111
00:08:09,680 --> 00:08:11,060
We are that constructor.

112
00:08:13,780 --> 00:08:20,080
Here we are in the student class and before we define our new constructor, that takes parameters and

113
00:08:20,080 --> 00:08:21,640
initializes the object state.

114
00:08:22,000 --> 00:08:28,120
Let's add a new constructor and let's make sure that it doesn't make any difference in the output.

115
00:08:28,330 --> 00:08:35,049
So currently we do not have any constructor and we know that the compiler adds a default, no constructor.

116
00:08:35,530 --> 00:08:40,360
And so by adding a new constructor, it shouldn't make any difference in the output.

117
00:08:41,080 --> 00:08:44,650
First, let's go ahead and run our program the way it is.

118
00:08:44,980 --> 00:08:47,050
So let's just look at the output once again.

119
00:08:48,220 --> 00:08:54,580
So here I am in the basics directory and it's already compiled and the compiler must have added a default.

120
00:08:54,580 --> 00:08:55,870
No constructor.

121
00:08:56,020 --> 00:08:57,970
So let's just execute this.

122
00:09:00,070 --> 00:09:00,880
And here it is.

123
00:09:00,880 --> 00:09:05,720
So we have the three student objects that got created and their state is being printed.

124
00:09:05,740 --> 00:09:09,160
So let's go ahead and add a new ARX constructor.

125
00:09:10,010 --> 00:09:14,330
Let's add it here right after the instance variables.

126
00:09:15,290 --> 00:09:23,030
So the constructor name is the class name, which is student, and there is no return type as we know.

127
00:09:23,300 --> 00:09:31,100
And no ARX constructor does not have any parameters and it's an empty body that's about it.

128
00:09:31,400 --> 00:09:35,780
So the compiler would add something similar in the bytecode.

129
00:09:36,940 --> 00:09:39,370
Now let's go ahead and compile this.

130
00:09:44,220 --> 00:09:46,230
So it's just the same output.

131
00:09:46,530 --> 00:09:49,080
So this is a no constructor.

132
00:09:49,440 --> 00:09:55,440
Now let's go ahead and extend this constructor and make it into a parameterized constructor.

133
00:09:55,440 --> 00:09:58,350
And this constructor will help us initialize the state.

134
00:09:59,220 --> 00:10:00,180
So let's do that.

135
00:10:00,180 --> 00:10:05,250
So we are calling it as a parameter based constructor because it has parameters.

136
00:10:05,610 --> 00:10:12,630
So let's go ahead and add all of these parameters and let's call it a new ID.

137
00:10:13,580 --> 00:10:15,410
Let's add them in the same order.

138
00:10:15,680 --> 00:10:16,940
New name.

139
00:10:19,690 --> 00:10:21,220
New Age.

140
00:10:22,410 --> 00:10:25,940
I'm just calling them as new age, new gender and so on.

141
00:10:25,950 --> 00:10:31,620
But later, we'll come back and change this names in a different lecture when we are going to learn

142
00:10:31,620 --> 00:10:32,790
about a new concept.

143
00:10:33,270 --> 00:10:40,200
Next is long new phone, double new GPA.

144
00:10:43,130 --> 00:10:45,230
And the final one is international.

145
00:10:45,230 --> 00:10:46,460
And let's call it as.

146
00:10:47,300 --> 00:10:48,500
Ease International.

147
00:10:49,270 --> 00:10:51,910
It doesn't matter later we are going to change this anyway.

148
00:10:54,550 --> 00:10:56,260
So let's indent it.

149
00:11:01,540 --> 00:11:04,240
And here we are going to initialize.

150
00:11:05,300 --> 00:11:06,680
One, two, three, four.

151
00:11:06,710 --> 00:11:10,970
Our variables are ID equal to new ID.

152
00:11:11,760 --> 00:11:15,930
Name will get the value of a new name.

153
00:11:19,250 --> 00:11:20,240
New gender.

154
00:11:21,250 --> 00:11:24,340
And I hope you are also typing this along with me.

155
00:11:24,520 --> 00:11:26,470
If not, please do so.

156
00:11:27,250 --> 00:11:28,030
H.

157
00:11:30,080 --> 00:11:32,270
Which phone?

158
00:11:40,680 --> 00:11:45,030
Finally, international is equal to is international.

159
00:11:45,750 --> 00:11:48,780
So all of the variables have been initialized now.

160
00:11:48,780 --> 00:11:54,390
So they got their defaults and now we are initializing them with the values that are getting passed

161
00:11:54,390 --> 00:11:55,380
into the constructor.

162
00:11:55,380 --> 00:11:58,620
So that's our parameter constructor.

163
00:11:59,850 --> 00:12:03,930
Now the next thing to do is to invoke this constructor.

164
00:12:04,590 --> 00:12:08,820
So here and we are just going to pass in the same order thousand.

165
00:12:18,580 --> 00:12:23,920
Be for bachelors and false as John is not an international student.

166
00:12:24,340 --> 00:12:26,920
So let me just delete all of this.

167
00:12:26,920 --> 00:12:33,760
So we don't need this because we are using the constructor to initialize the state and I would like

168
00:12:33,760 --> 00:12:37,480
you to do the same thing for the second and the third object two.

169
00:12:37,480 --> 00:12:40,300
So just pause the video and do it.

170
00:12:40,300 --> 00:12:43,630
And I will come back and I will show you the.

171
00:12:44,510 --> 00:12:45,890
The completed statements.

172
00:12:48,270 --> 00:12:50,190
Here are the completed statements.

173
00:12:50,460 --> 00:12:53,370
So we have the second student object and the third one.

174
00:12:53,370 --> 00:12:55,950
So let's just go ahead and compile and execute it.

175
00:13:01,750 --> 00:13:02,320
There you go.

176
00:13:02,320 --> 00:13:03,970
So we have the same output.

177
00:13:04,000 --> 00:13:09,310
And now the the object state is initialized via the new constructor.

178
00:13:10,180 --> 00:13:14,350
So we don't have all of those initialization statements anymore.

179
00:13:14,770 --> 00:13:18,460
So that's something new and interesting.

180
00:13:20,500 --> 00:13:20,780
Okay.

181
00:13:20,890 --> 00:13:21,760
So that's good.

182
00:13:21,760 --> 00:13:26,980
So we have our first constructor and it is helping us to initialize the state.

183
00:13:27,250 --> 00:13:29,080
So it's a parameter constructor.

184
00:13:29,500 --> 00:13:36,760
Now we said that if we have a constructor, then the compiler is not going to add a default constructor,

185
00:13:37,150 --> 00:13:37,630
right?

186
00:13:37,960 --> 00:13:40,900
So the next thing is let's go ahead and test that.

187
00:13:40,930 --> 00:13:47,770
And to test that, what we are going to do is so we will remove the state information from here and

188
00:13:47,770 --> 00:13:55,120
we will make an invocation of a no ARX constructor, which is not there because the compiler is not

189
00:13:55,120 --> 00:13:56,020
going to add.

190
00:13:56,440 --> 00:13:58,480
So it should give us a compilation error.

191
00:13:58,720 --> 00:14:01,090
So let's see what the error says.

192
00:14:04,570 --> 00:14:09,670
It says constructor student and class student cannot be applied to different types.

193
00:14:10,270 --> 00:14:11,630
So this is what we have.

194
00:14:11,650 --> 00:14:16,030
And it says that the constructor is having these parameters.

195
00:14:16,990 --> 00:14:18,400
That's the required.

196
00:14:18,670 --> 00:14:22,330
But what you are doing is you are not passing any arguments.

197
00:14:22,990 --> 00:14:27,130
So the actual and formal argument lists differ in length.

198
00:14:27,160 --> 00:14:30,880
So you may remember this terminology from our methods lecture.

199
00:14:30,910 --> 00:14:37,660
So formal argument list is nothing but the constructor parameters and actual is what we are passing.

200
00:14:37,900 --> 00:14:41,520
So the differ in length because here we have empty.

201
00:14:41,530 --> 00:14:45,160
Whereas in the constructor we have some number of parameters.

202
00:14:45,610 --> 00:14:46,450
So that's the thing.

203
00:14:46,450 --> 00:14:47,830
So we cannot do that.

204
00:14:47,830 --> 00:14:56,650
So what we need to do is we either have to pass this state or the fixes to add a new constructor.

205
00:14:56,830 --> 00:14:58,060
So let's do that.

206
00:15:04,110 --> 00:15:05,410
So compile fine.

207
00:15:05,430 --> 00:15:08,430
And if we execute it, so it executes fine.

208
00:15:08,820 --> 00:15:13,860
So for the first and the second object, we are invoking the first constructor.

209
00:15:13,890 --> 00:15:19,020
But for Anita, we are invoking the second one, the No Arcs constructor.

210
00:15:19,020 --> 00:15:25,650
And we can see that only the default values are getting printed because there is no re initializing

211
00:15:25,650 --> 00:15:27,300
that is happening for Anita.

212
00:15:27,300 --> 00:15:32,370
There is no re initializing that is happening for Anita because we are not invoking this particular

213
00:15:32,370 --> 00:15:33,660
constructor for her.

214
00:15:34,020 --> 00:15:38,730
So that's why for name it's the default null, gender, null, id zero.

215
00:15:39,360 --> 00:15:41,670
And for everything we have the default zero.

216
00:15:42,790 --> 00:15:43,180
So.

217
00:15:43,180 --> 00:15:44,590
But that's not what we want.

218
00:15:44,620 --> 00:15:47,200
We do want to pass the state.

219
00:15:47,800 --> 00:15:50,830
So let's add it back.

220
00:15:53,910 --> 00:15:55,400
But let's leave it like this.

221
00:15:55,410 --> 00:16:01,470
Let's also have the new constructor and we can see that we have two constructors now and that's nothing

222
00:16:01,470 --> 00:16:06,510
but constructor overloading and that's the subject of the next lecture.

223
00:16:07,020 --> 00:16:09,150
But we are not yet done with this lecture.

224
00:16:09,270 --> 00:16:13,080
So we still have something more to look at.

225
00:16:13,290 --> 00:16:15,490
So we have the two constructors.

226
00:16:15,510 --> 00:16:22,380
Now the thing, next thing that we are going to do is we will actually invoke the compute method from

227
00:16:22,380 --> 00:16:22,980
here.

228
00:16:23,250 --> 00:16:28,020
So from a constructor, we can also invoke a method.

229
00:16:30,030 --> 00:16:35,610
And let's remove these statements here because we don't need them anymore.

230
00:16:35,850 --> 00:16:39,330
So the compute method is computing the fees.

231
00:16:39,450 --> 00:16:43,500
The final fees and the final fees can be adjusted.

232
00:16:43,920 --> 00:16:46,530
It can be modified if it is an international student.

233
00:16:47,890 --> 00:16:48,390
That's it.

234
00:16:48,400 --> 00:16:49,800
So let's go ahead.

235
00:16:49,810 --> 00:16:52,180
So we're invoking the compute method from here.

236
00:16:53,950 --> 00:16:56,590
Here is where the tuition fees is getting recalculated.

237
00:16:59,380 --> 00:17:00,460
Recompile.

238
00:17:02,150 --> 00:17:03,140
We execute.

239
00:17:04,069 --> 00:17:07,430
So everything works fine for the student.

240
00:17:07,460 --> 00:17:13,550
Non international student is 12,000 for the last two students it is 17,000 because they are international

241
00:17:13,550 --> 00:17:14,180
students.

242
00:17:15,140 --> 00:17:17,839
So we can invoke methods from constructors.

243
00:17:18,079 --> 00:17:18,829
That's one thing.

244
00:17:19,369 --> 00:17:25,490
And the final thing that I want to show is the constructors cannot return any value, but they can have

245
00:17:25,490 --> 00:17:26,780
empty written statements.

246
00:17:27,109 --> 00:17:29,980
The same goes with methods with void, return type.

247
00:17:29,990 --> 00:17:32,960
So we have this this method which has void return type.

248
00:17:33,050 --> 00:17:34,730
So let me just show it here.

249
00:17:34,730 --> 00:17:37,640
So here, let's add a written statement here.

250
00:17:39,110 --> 00:17:39,680
That's it.

251
00:17:40,220 --> 00:17:41,870
And what should happen?

252
00:17:45,840 --> 00:17:51,630
We get a compilation error at line 42 because line 42 is here.

253
00:17:52,140 --> 00:17:56,940
So this is the statement after this, the compute method the control would return from.

254
00:17:56,940 --> 00:17:59,520
Compute method should return from compute method.

255
00:17:59,670 --> 00:18:04,050
But then there is no point in having these statements because they are unreachable.

256
00:18:04,320 --> 00:18:07,050
So that's what the compilation statement says.

257
00:18:07,050 --> 00:18:11,940
That line number 42, the statement at line 42 here is unreachable.

258
00:18:12,750 --> 00:18:14,580
So we discussed this earlier.

259
00:18:15,900 --> 00:18:19,200
So that doesn't make sense now, but we can have it here.

260
00:18:19,920 --> 00:18:26,070
Now, this means that if the student is non international, which is John.

261
00:18:26,280 --> 00:18:33,630
So for him this block will we know will not execute this entire F block and only these statements will

262
00:18:33,630 --> 00:18:35,370
execute and it will be printed.

263
00:18:35,520 --> 00:18:39,270
But for Raj and Anita, international is true.

264
00:18:39,660 --> 00:18:46,320
So the fees will get recalculated and when it comes here, the control would return and for them the

265
00:18:46,320 --> 00:18:47,910
state will not be printed.

266
00:18:47,910 --> 00:18:48,510
Right?

267
00:18:48,960 --> 00:18:50,520
So this is perfectly fine.

268
00:18:50,520 --> 00:18:52,740
So let's go ahead and look at the output.

269
00:18:57,060 --> 00:19:03,030
So as you can see, only the state information for John is getting printed for Roger Anita.

270
00:19:03,060 --> 00:19:04,320
The state is there.

271
00:19:04,320 --> 00:19:10,500
It's just that it's not getting printed because the control is being returned from this empty written

272
00:19:10,500 --> 00:19:11,100
statement.

273
00:19:12,530 --> 00:19:15,020
So you would see such a return statement.

274
00:19:15,020 --> 00:19:22,040
It is more common to see here in a void method, but in constructors it is relatively, I should say

275
00:19:22,040 --> 00:19:29,150
it should be very rare because generally we have only object state initialization within the constructors,

276
00:19:29,150 --> 00:19:36,260
but methods we can have a lot of business logic so we can encounter such written statements in a method,

277
00:19:36,290 --> 00:19:38,590
but it's not that common in constructors.

278
00:19:38,600 --> 00:19:43,430
Now let's go ahead and remove this whole thing, move everything into the constructor.

279
00:19:47,520 --> 00:19:48,210
Here.

280
00:19:48,210 --> 00:19:49,860
Let's just keep it like this.

281
00:19:51,320 --> 00:19:53,630
Instead of having a compute method.

282
00:19:55,490 --> 00:19:58,670
So all it does is just recalculating the fees.

283
00:19:58,670 --> 00:19:59,690
That's all it does.

284
00:20:01,040 --> 00:20:03,920
Now, only thing is the compute count is here.

285
00:20:03,920 --> 00:20:07,310
So the compute count is a static variable.

286
00:20:07,640 --> 00:20:13,850
And we, we were using it to track the number of times the compute method was being invoked.

287
00:20:14,330 --> 00:20:21,110
Now, since the compute method is not there, we do not need it, but we can use it to track the number

288
00:20:21,110 --> 00:20:26,420
of times a constructor is being invoked, which is nothing but the number of objects that are getting

289
00:20:26,420 --> 00:20:29,450
created since we are creating three objects.

290
00:20:29,450 --> 00:20:35,420
Finally, this has to be three, but the name is Compute Count, so let's change it to student count.

291
00:20:35,720 --> 00:20:38,150
More makes more sense.

292
00:20:39,760 --> 00:20:41,380
So it's student count.

293
00:20:42,040 --> 00:20:43,180
Let me just copy it.

294
00:20:46,040 --> 00:20:51,230
So every time a constructor is invoked, the student count also gets incremented.

295
00:20:51,890 --> 00:20:54,200
And we are also printing it here.

296
00:20:57,730 --> 00:21:03,160
And finally, we are also printing it here once because it is a static variable.

297
00:21:03,160 --> 00:21:08,770
We are using the class name to access it, so it should print three.

298
00:21:14,460 --> 00:21:16,530
I think we still have the written statement.

299
00:21:16,530 --> 00:21:18,450
So let me just comment this out here.

300
00:21:20,720 --> 00:21:22,160
Now it will print.

301
00:21:26,890 --> 00:21:27,550
There you go.

302
00:21:27,700 --> 00:21:31,690
So we have all three objects and their state is getting printed.

303
00:21:34,240 --> 00:21:36,880
And the student count.

304
00:21:37,450 --> 00:21:38,170
Here it is.

305
00:21:38,170 --> 00:21:40,480
One, two and three.

306
00:21:44,310 --> 00:21:47,610
And the student dot student count is also printing three.

307
00:21:48,420 --> 00:21:49,610
So that's all there is.

308
00:21:49,620 --> 00:21:53,630
So we define our student constructor here.

309
00:21:53,640 --> 00:21:59,880
So this is a parameter constructor, our first constructor, and we are now initializing our state using

310
00:21:59,880 --> 00:22:00,990
a constructor.

311
00:22:01,710 --> 00:22:02,280
Thank you.

312
00:22:02,280 --> 00:22:07,140
And I hope you have enjoyed learning about constructors and I will see you in the next lecture.

