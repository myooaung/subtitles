WEBVTT
1
00:00:00.970 --> 00:00:01.930
Hello there.

2
00:00:01.960 --> 00:00:02.710
This is the room.

3
00:00:03.760 --> 00:00:05.860
Now let's look at anonymous classes.

4
00:00:06.340 --> 00:00:12.490
We will also look at how it is typically used in practice, and we will also extend our previous demo

5
00:00:12.490 --> 00:00:13.690
further in this lecture.

6
00:00:15.250 --> 00:00:19.390
An anonymous class, as the name suggests, is basically anonymous.

7
00:00:19.540 --> 00:00:21.460
That is, it does not have a name.

8
00:00:22.890 --> 00:00:27.750
To understand anonymous class, let's consider this three set constructor, which takes a competitor

9
00:00:27.750 --> 00:00:28.530
as input.

10
00:00:28.920 --> 00:00:34.950
And we know that competitor is an interface which has the abstract method compare, which we know compares

11
00:00:34.950 --> 00:00:39.720
two arguments and it helps in maintaining the sorting order in that reset.

12
00:00:40.590 --> 00:00:45.300
We know that we can define concrete courses that would implement the comparator interface.

13
00:00:45.660 --> 00:00:50.730
However, we can also use anonymous classes to implement the comparator interface.

14
00:00:52.280 --> 00:00:53.600
And here is how it is done.

15
00:00:54.140 --> 00:01:00.320
We are creating an instance of reset and the argument to the reset constructor is an instance of an

16
00:01:00.320 --> 00:01:03.980
anonymous class that is implementing the competitor interface.

17
00:01:04.340 --> 00:01:09.740
Since we are creating an instance, the argument includes the new keyword, which is followed by the

18
00:01:09.740 --> 00:01:16.300
anonymous class declaration, which starts with the name competitor, and this followed by empty parentheses.

19
00:01:16.310 --> 00:01:22.310
As we are creating an instance and the empty parenthesis is followed by the actual body of the anonymous

20
00:01:22.310 --> 00:01:25.650
class, which starts and ends with curly braces.

21
00:01:25.670 --> 00:01:28.040
Just like a regular class or interface.

22
00:01:28.640 --> 00:01:34.820
And within the body, the implementation for compare method is provided, which is using the length

23
00:01:34.820 --> 00:01:38.150
of the input strings as the sorting criteria.

24
00:01:39.270 --> 00:01:41.790
As you can see, there is no separate class name here.

25
00:01:42.180 --> 00:01:48.810
We are using the interface name comparator itself and that would by itself imply that we are implementing

26
00:01:48.810 --> 00:01:50.280
the comparator interface.

27
00:01:50.880 --> 00:01:57.540
So anonymous class is different from our regular interface implementation where we would have some class

28
00:01:57.540 --> 00:02:02.850
name followed by the implements keyword, which would in turn be followed by the interface name.

29
00:02:04.740 --> 00:02:11.670
So we can see that with an anonymous class we are both declaring and instantiating it at the point of

30
00:02:11.670 --> 00:02:14.430
use and we can do this anywhere.

31
00:02:14.430 --> 00:02:19.770
An expression is legal, but usually it is used as a method argument as we see here.

32
00:02:20.460 --> 00:02:25.050
Note that here comparator is an interface, but it can as well be a class two.

33
00:02:25.740 --> 00:02:31.230
And if that class includes a constructor with some parameter, then the anonymous class declaration

34
00:02:31.230 --> 00:02:38.010
can invoke that constructor, bypassing the necessary arguments which would be specified in that parentheses.

35
00:02:39.540 --> 00:02:47.250
So this whole expression that we have here can be read as create an object of an anonymous class that's

36
00:02:47.250 --> 00:02:49.020
inherited from competitor.

37
00:02:49.730 --> 00:02:50.780
And under the hood.

38
00:02:50.780 --> 00:02:52.790
This is what is exactly happening.

39
00:02:53.390 --> 00:02:58.820
That is compiler will create a separate top level class corresponding to the anonymous class.

40
00:02:59.030 --> 00:03:02.300
And that class would implement the competitor interface.

41
00:03:02.840 --> 00:03:06.050
So in bytecode there is no anonymous nested class.

42
00:03:06.260 --> 00:03:08.600
It is represented by a top level class.

43
00:03:10.020 --> 00:03:15.930
As mentioned earlier, such anonymous classes that get created as top level classes would have class

44
00:03:15.930 --> 00:03:19.230
names such as dollar one, dollar two and so on.

45
00:03:19.710 --> 00:03:22.080
Where order is the name of the enclosing class?

46
00:03:22.860 --> 00:03:29.370
And the class name would be followed by the keyword implements or extends depending on whether the anonymous

47
00:03:29.370 --> 00:03:33.060
class is inheriting from an interface or a class.

48
00:03:33.630 --> 00:03:35.720
So in reality, there is no inner class.

49
00:03:35.730 --> 00:03:42.300
It would be implicitly represented by a top level class, and that class would be instantiated in the

50
00:03:42.300 --> 00:03:43.290
outer class.

51
00:03:43.860 --> 00:03:47.580
This applies to all nested classes and not just anonymous classes.

52
00:03:48.150 --> 00:03:54.750
It is just that with other nested classes, the name of the nested class would be our class name.

53
00:03:55.320 --> 00:03:56.280
In our class name.

54
00:03:56.670 --> 00:03:59.610
But with anonymous class it would be our class name.

55
00:04:00.090 --> 00:04:00.960
Some number.

56
00:04:02.660 --> 00:04:07.160
One common use of anonymous classes is for creating functional objects.

57
00:04:07.520 --> 00:04:13.400
The competitor implementation we just saw was an example of a function object, and a function object

58
00:04:13.430 --> 00:04:15.620
has two properties associated with it.

59
00:04:17.100 --> 00:04:21.329
One is that its methods operate on other objects.

60
00:04:21.779 --> 00:04:23.760
So that would be a function object.

61
00:04:24.210 --> 00:04:24.900
That is a method.

62
00:04:24.900 --> 00:04:29.220
Parameters are other objects in our competitive implementation.

63
00:04:29.220 --> 00:04:35.160
In the previous slide, the compare method also operated on two input string objects.

64
00:04:36.590 --> 00:04:37.520
On second property.

65
00:04:37.520 --> 00:04:39.230
Is that a function object?

66
00:04:39.230 --> 00:04:41.210
Exports only one method.

67
00:04:41.840 --> 00:04:47.480
So a function object is basically an instance of a type with these two properties.

68
00:04:47.630 --> 00:04:50.450
And type can be a class or an interface.

69
00:04:51.050 --> 00:04:55.400
If it is an interface, we refer to the interface as a functional interface.

70
00:04:56.090 --> 00:05:01.520
We briefly discussed functional interface in Oops chapter when discussing default methods.

71
00:05:02.270 --> 00:05:05.150
So a competitive interface is also a functional interface.

72
00:05:05.660 --> 00:05:08.450
However, it does have more than one method.

73
00:05:09.050 --> 00:05:14.840
You can see that in the API spec of competitor, but it still qualifies as functional interface as it

74
00:05:14.840 --> 00:05:17.180
has only one abstract method compare.

75
00:05:17.660 --> 00:05:20.210
It also has another abstract method equals.

76
00:05:20.450 --> 00:05:27.380
But since subclasses would inherit the equals method from the object class, the competitive interface

77
00:05:27.380 --> 00:05:30.530
would still be considered as a functional interface.

78
00:05:31.340 --> 00:05:35.210
So function objects can be implemented as anonymous classes.

79
00:05:35.910 --> 00:05:40.200
They can also be implemented via Lambda Expressions, which we will discuss later.

80
00:05:42.230 --> 00:05:48.260
This use case of using anonymous class for function objects is also recommended in this item from effective

81
00:05:48.260 --> 00:05:55.190
Java, which says use function objects to represent strategies as in the strategy pattern.

82
00:05:55.850 --> 00:06:02.030
In our example, in the previous slide, the compare method has defined a strategy of comparing.

83
00:06:02.030 --> 00:06:06.920
We are length of the input strings in order to sort the elements of three set.

84
00:06:07.610 --> 00:06:08.840
So that was the strategy.

85
00:06:09.720 --> 00:06:13.410
And we can use other anonymous classes to declare other strategies.

86
00:06:14.070 --> 00:06:20.100
The competitor interface itself would be referred to as strategy interface and the anonymous classes

87
00:06:20.100 --> 00:06:23.580
implementing it would be the concrete strategy classes.

88
00:06:24.370 --> 00:06:30.730
So anonymous classes are good for defining function objects while non static member classes which we

89
00:06:30.730 --> 00:06:33.820
saw earlier are good for defining adapters.

90
00:06:34.710 --> 00:06:36.630
In the demo that we'll be doing shortly.

91
00:06:36.720 --> 00:06:39.930
We will implement a function object using an anonymous class.

92
00:06:41.650 --> 00:06:45.100
Let's now look at a few best practices when working with anonymous classes.

93
00:06:45.460 --> 00:06:50.230
First one is that anonymous class definitions should be shot with ten lines or fewer.

94
00:06:50.710 --> 00:06:52.660
Otherwise, it will affect readability.

95
00:06:53.140 --> 00:06:58.960
This one is actually recommended in item 22 in effective Java, and previous one about function objects

96
00:06:58.960 --> 00:07:00.580
was from item 21.

97
00:07:01.440 --> 00:07:03.900
Item 21 also recommends one other thing.

98
00:07:04.290 --> 00:07:09.390
We know that anonymous classes are declared and instantiated at the point of use.

99
00:07:10.110 --> 00:07:16.590
So an anonymous object is being created every time that anonymous class expression is being executed.

100
00:07:16.950 --> 00:07:22.890
And if the expression is going to be executed frequently, then we are also repetitively creating anonymous

101
00:07:22.890 --> 00:07:23.610
objects.

102
00:07:23.760 --> 00:07:26.190
And that could be very expensive.

103
00:07:27.450 --> 00:07:35.040
In such cases, we can use a private, static, final field to declare and instantiate the anonymous

104
00:07:35.040 --> 00:07:36.690
class as we see here.

105
00:07:37.230 --> 00:07:44.070
With this, only one anonymous object will be created and we can reuse it by just using the field name.

106
00:07:44.870 --> 00:07:47.450
In this case we can pass the filename.

107
00:07:47.660 --> 00:07:53.360
SDR underscore length underscore comparator as argument to the preset constructor.

108
00:07:54.310 --> 00:07:55.030
Not that here.

109
00:07:55.030 --> 00:08:02.650
The type argument on the right is emphasized in red font and that's because it cannot be auto inferred

110
00:08:02.650 --> 00:08:04.660
in the case of anonymous classes.

111
00:08:05.020 --> 00:08:08.530
That is, the diamond notation will not work with anonymous classes.

112
00:08:09.590 --> 00:08:15.050
It does not work in both Java seven and Java eight, and it may be supported in future versions.

113
00:08:16.070 --> 00:08:20.870
Also noted the ending race of the anonymous class in this case is followed by a semicolon.

114
00:08:21.180 --> 00:08:24.830
And that's because here we have a full blown statement.

115
00:08:25.010 --> 00:08:26.480
So semicolon is required.

116
00:08:28.020 --> 00:08:34.530
Another advantage of this approach is that we can also have a nice descriptive name for the field indicating

117
00:08:34.530 --> 00:08:37.860
what the anonymous class actually does here.

118
00:08:37.890 --> 00:08:43.980
STR Underscore length underscore comparator tells us that the comparison is based on the length of input

119
00:08:43.980 --> 00:08:44.580
strings.

120
00:08:45.120 --> 00:08:48.150
Other strategies can be represented with other descriptive names.

121
00:08:49.910 --> 00:08:57.260
Note that an anonymous class will have access to the enclosing class if and only if the anonymous class

122
00:08:57.260 --> 00:08:59.600
occurs in a non static context.

123
00:09:00.320 --> 00:09:06.920
What it means is if the anonymous class is declared inside a static method, then it would not be possible

124
00:09:06.920 --> 00:09:11.630
for the anonymous class to access an instance member of the enclosing class.

125
00:09:12.200 --> 00:09:15.950
That is, it will not have access to the enclosing class object.

126
00:09:16.520 --> 00:09:18.890
That's because it is declared inside a static method.

127
00:09:19.730 --> 00:09:23.840
But if it is declared in an instance method, then it would not be an issue.

128
00:09:24.320 --> 00:09:30.200
That is, an anonymous class object would have access to the enclosing object by maintaining a hidden

129
00:09:30.200 --> 00:09:35.990
reference ID, just like in the case of non static member class and hence it will be able to access

130
00:09:36.200 --> 00:09:38.690
the outer objects instance members to.

131
00:09:40.320 --> 00:09:42.120
As Anonymous closes nameless.

132
00:09:42.150 --> 00:09:45.000
It cannot have a named constructor.

133
00:09:46.520 --> 00:09:51.710
However it can have an instance initial user for initializing any variables.

134
00:09:52.620 --> 00:09:58.110
Now let's go ahead and do a short demo of Anonymous Glass, and then we will come back and we will look

135
00:09:58.110 --> 00:10:00.750
at a few limitations of anonymous classes.

136
00:10:03.370 --> 00:10:08.320
In this demo, we are going to extend the cash program, which we wrote in the previous demo.

137
00:10:08.980 --> 00:10:13.780
So we had cash and we also had bookmark in order to maintain the cash off lockbox.

138
00:10:14.080 --> 00:10:19.660
Now one thing I added here in the bookmark is I added this new instance variable called rating.

139
00:10:19.690 --> 00:10:26.830
Earlier we had only ID and title, so we are introducing rating and it also has getter on certain methods

140
00:10:27.190 --> 00:10:34.570
and in cash Java, you may recall that we were creating all this bookmarks and adding it to the cache

141
00:10:35.050 --> 00:10:37.280
which was storing it in a bookmark array.

142
00:10:37.840 --> 00:10:38.860
So this is the cache.

143
00:10:39.040 --> 00:10:40.780
So here we are setting the rating.

144
00:10:40.780 --> 00:10:43.900
So it's just for the first item.

145
00:10:43.900 --> 00:10:47.620
It is one for the second, two, three, four and five.

146
00:10:48.160 --> 00:10:53.790
So in the previous demo we implemented an adapter using a non static member class.

147
00:10:53.800 --> 00:10:58.580
So here we are going to use anonymous class to implement a function object.

148
00:10:58.600 --> 00:11:05.920
In this case, the function object would would actually sort these items, these five items in the bookmark

149
00:11:05.920 --> 00:11:07.870
area will be sorted by rating.

150
00:11:08.380 --> 00:11:10.180
So that would be the function object.

151
00:11:10.180 --> 00:11:14.650
And we are going to use anonymous class and the sorting will be in the remaining order.

152
00:11:15.460 --> 00:11:18.420
So that's the user function of anonymous classes.

153
00:11:18.430 --> 00:11:19.960
So here we are adding them.

154
00:11:20.800 --> 00:11:26.680
So in order to start, we are just going to use arrays dot sort method.

155
00:11:30.230 --> 00:11:32.780
And we need to pass the items.

156
00:11:35.730 --> 00:11:38.500
Oct items and to sort it.

157
00:11:38.640 --> 00:11:40.020
Let's implement.

158
00:11:41.190 --> 00:11:43.920
Competitor and it is gentrified.

159
00:11:45.190 --> 00:11:47.140
So let's pass bookmark.

160
00:11:48.170 --> 00:11:50.450
And we need empty parentheses.

161
00:11:52.240 --> 00:11:54.670
And opening and closing race.

162
00:11:55.060 --> 00:11:59.080
And we need to implement the unimplemented method which is compare.

163
00:12:00.040 --> 00:12:04.340
Here is compare and it is taking two parameters bookmark one and bookmark two.

164
00:12:04.360 --> 00:12:06.970
So it would be an function object.

165
00:12:07.000 --> 00:12:09.850
So let me just copy the logical habit here.

166
00:12:10.930 --> 00:12:16.350
So we are just taking the rating and we are comparing with the rating of the second parameter.

167
00:12:16.360 --> 00:12:21.850
And since we need to sort in descending order, it will return a one, otherwise it would return a minus

168
00:12:21.850 --> 00:12:22.270
one.

169
00:12:22.600 --> 00:12:28.000
In case you don't remember, you can just look up the API spec to see how compare has to be implemented.

170
00:12:28.510 --> 00:12:29.380
So that's about it.

171
00:12:29.380 --> 00:12:33.100
And other than that, here we are simply printing the rating.

172
00:12:33.640 --> 00:12:34.360
And.

173
00:12:36.510 --> 00:12:39.300
Before this, we were just iterating all the items.

174
00:12:39.420 --> 00:12:45.210
Now, since it will be in descending order of the rating, the items will be printed in in the reverse

175
00:12:45.210 --> 00:12:45.780
order.

176
00:12:46.560 --> 00:12:47.640
So let me just run it.

177
00:12:47.790 --> 00:12:48.720
It will be clear.

178
00:12:50.080 --> 00:12:51.400
So here it is.

179
00:12:52.030 --> 00:12:55.750
So here we have the output from the previous demo.

180
00:12:55.780 --> 00:13:00.390
Simply, we are simply printing all the items in the cache, the titles.

181
00:13:00.400 --> 00:13:06.730
So now we are printing in the reverse order in the decreasing order of the rating.

182
00:13:07.030 --> 00:13:13.090
So that's why you'll see that virtual hosting and and Tomcat, which was the last one earlier, is first

183
00:13:13.090 --> 00:13:13.540
here.

184
00:13:13.810 --> 00:13:17.260
So they're all displayed in the reverse order of the rating.

185
00:13:17.710 --> 00:13:25.270
Now, we also said that if this piece of functionality here is being repetitively used instead of creating

186
00:13:25.270 --> 00:13:34.630
an object, every single time, we can define this in the anonymous class in a private, static, final

187
00:13:34.630 --> 00:13:34.990
field.

188
00:13:35.020 --> 00:13:36.400
So that's what we are doing here.

189
00:13:36.400 --> 00:13:41.740
So the reference type is competitor of bookmark and we are using a descriptive name rating underscore

190
00:13:41.740 --> 00:13:45.760
competitor and the rest of the code is just similar.

191
00:13:47.410 --> 00:13:53.980
It's like this only thing is just to show you guys I'm also have included this instance initialize our

192
00:13:53.980 --> 00:14:03.100
block and just remember that there is this semicolon here because this is a normal declaration statement.

193
00:14:03.970 --> 00:14:07.690
So let me comment this out here.

194
00:14:09.550 --> 00:14:11.380
And here I have.

195
00:14:12.350 --> 00:14:18.440
This invoking the sword method using the rating underscore competitor field and the output would still

196
00:14:18.440 --> 00:14:19.220
be same.

197
00:14:19.970 --> 00:14:25.010
It's just that here we have the instance user displayed because I have a print statement here.

198
00:14:25.880 --> 00:14:27.410
So here it is.

199
00:14:27.410 --> 00:14:30.500
So it cannot we cannot have a constructor here named constructor.

200
00:14:30.500 --> 00:14:35.090
We can only have instance initialize for initializing some variables.

201
00:14:35.630 --> 00:14:39.080
Now other than that, the third one I want to show is.

202
00:14:42.660 --> 00:14:43.050
Here.

203
00:14:43.050 --> 00:14:45.000
I created a class called FUBAR.

204
00:14:45.030 --> 00:14:48.000
It has a protected variable instance, variable y.

205
00:14:48.240 --> 00:14:57.030
And FUBAR is a class and it has a constructor and it takes an int value x and simply re assigns y with

206
00:14:57.030 --> 00:14:57.630
x.

207
00:14:58.080 --> 00:15:08.550
So this is to just show that we can also inherit an anonymous class can be used to implement a class.

208
00:15:08.550 --> 00:15:10.230
So this is what we are doing here.

209
00:15:11.400 --> 00:15:13.700
Full bar and we are passing five.

210
00:15:13.710 --> 00:15:22.050
So we are invoking a constructor of four with the value five and and we have this method called go and

211
00:15:22.050 --> 00:15:24.390
here we are simply printing the value of y.

212
00:15:24.420 --> 00:15:28.560
So Y is a protected instance variable in full bar class.

213
00:15:29.190 --> 00:15:31.260
Let me take you back here.

214
00:15:31.620 --> 00:15:32.550
Here it is.

215
00:15:32.820 --> 00:15:35.820
And this is the constructor and this is the variable.

216
00:15:36.000 --> 00:15:40.890
So let's go back and you can see that an instance is being created.

217
00:15:41.670 --> 00:15:44.130
At this point, the go method is not yet invoked.

218
00:15:44.130 --> 00:15:47.970
So we are putting a dot operator here and we are invoking the go method.

219
00:15:48.240 --> 00:15:54.660
So it might look a bit strange this statement, but we are simply creating an object of Foo Bar and

220
00:15:54.660 --> 00:15:56.670
we are invoking the go method.

221
00:15:57.630 --> 00:16:00.570
So let me also run this.

222
00:16:00.810 --> 00:16:03.750
And as you can see, it is printing the value, right.

223
00:16:04.830 --> 00:16:08.670
So that's about inheriting from a class.

224
00:16:08.940 --> 00:16:16.920
Now, in the earlier demo we had as the static member class, which was my cash iterator, it was implementing

225
00:16:16.920 --> 00:16:19.170
the interface cache iterator.

226
00:16:20.820 --> 00:16:22.140
Now within this.

227
00:16:22.140 --> 00:16:28.260
So what I have done is I have commented or commented this out and I have moved this whole thing into

228
00:16:28.260 --> 00:16:29.190
the iterator method.

229
00:16:29.190 --> 00:16:34.740
Earlier in the iterator method, we were making an instance of this particular class and we were returning

230
00:16:34.740 --> 00:16:35.190
it.

231
00:16:35.190 --> 00:16:41.610
But now I just wanted to show that we can also implement it as an anonymous class.

232
00:16:41.610 --> 00:16:49.680
So within the iterator method you can see that I'm directly creating an instance of the interface cache

233
00:16:49.680 --> 00:16:56.640
iterator because this is an anonymous class and we have the same body here and we are assigning it to

234
00:16:56.970 --> 00:16:58.230
cache iterator.

235
00:16:58.500 --> 00:17:02.040
This is the reference type, so there is no longer my cache iterator.

236
00:17:02.040 --> 00:17:03.270
It is replaced with this.

237
00:17:04.200 --> 00:17:05.490
And this is what we have.

238
00:17:05.700 --> 00:17:10.349
So it's already there and we have already run it.

239
00:17:10.349 --> 00:17:11.670
So it's working fine.

240
00:17:11.700 --> 00:17:14.970
Now here items is the bookmark.

241
00:17:15.480 --> 00:17:22.829
So we can see that we can access instance variables off the enclosing class items is part of cache.

242
00:17:23.339 --> 00:17:30.060
And in order to do that under the hood, what is happening is it is going to create a separate class

243
00:17:30.060 --> 00:17:30.780
for this.

244
00:17:30.780 --> 00:17:36.870
The compiler is going to create a separate top level class for this with a constructor and it will pass

245
00:17:37.380 --> 00:17:44.070
a reference to the off the cache object reference to cache object to the newly created anonymous class,

246
00:17:44.580 --> 00:17:46.350
which is created as a top level class.

247
00:17:46.650 --> 00:17:54.480
So at this this reference will be passed and using that it will access the items bookmark so if we see

248
00:17:54.480 --> 00:17:55.050
here.

249
00:17:56.200 --> 00:18:03.100
Here it is on the hard disk so we can see that it has created all these classes representing the anonymous

250
00:18:03.100 --> 00:18:03.590
class.

251
00:18:03.610 --> 00:18:03.970
Cash.

252
00:18:03.970 --> 00:18:04.420
Dollar one.

253
00:18:04.420 --> 00:18:06.220
Cash dollar two in cash dollar three.

254
00:18:06.970 --> 00:18:13.220
So just wanted to show that so we can access and within that class it will use this reference.

255
00:18:13.240 --> 00:18:16.030
It will use the hidden reference to access items.

256
00:18:16.510 --> 00:18:17.320
So that's one thing.

257
00:18:17.320 --> 00:18:19.480
And one final thing I want to show is.

258
00:18:19.930 --> 00:18:21.340
So this is a method.

259
00:18:21.340 --> 00:18:23.710
And within this method we are having anonymous class.

260
00:18:23.740 --> 00:18:28.960
Now, if we want to access any local variable, for example, there is this local variable count.

261
00:18:29.230 --> 00:18:36.490
And if we simply want to access it here in this way, let's say, then this variable has to be declared

262
00:18:36.490 --> 00:18:37.330
final.

263
00:18:38.480 --> 00:18:42.060
It has to be final, at least prior to July eight.

264
00:18:42.080 --> 00:18:44.840
It has to have this key word final.

265
00:18:44.960 --> 00:18:46.940
Otherwise, it will give a compilation error.

266
00:18:47.300 --> 00:18:52.610
Now, in Java eight, it need not be final, but it should not be.

267
00:18:52.640 --> 00:18:57.350
It should not be changed anywhere within the within the scope of this method.

268
00:18:57.800 --> 00:19:02.570
And it is called as effectively final, which is which means that it is it is final.

269
00:19:02.910 --> 00:19:05.410
And so with Java eight, we don't need the keyword.

270
00:19:05.420 --> 00:19:08.330
But let's say if I increment it here.

271
00:19:09.020 --> 00:19:10.940
So it gives a compilation error here.

272
00:19:10.940 --> 00:19:16.250
It says local variable count defined in an enclosing scope must be final or effectively final.

273
00:19:16.520 --> 00:19:17.810
So we cannot do that.

274
00:19:18.230 --> 00:19:26.030
And the reason for that seems like it is just for simplicity, because sometimes this cache iterator

275
00:19:26.030 --> 00:19:32.180
instance, this iterator can be passed to some other method or some other thread in case of multithreading.

276
00:19:32.510 --> 00:19:36.530
And that will be executing in a different in a different stack.

277
00:19:36.740 --> 00:19:40.670
But here we might increment the count value like this.

278
00:19:40.880 --> 00:19:48.980
In which case there may be a need to increment the count in that and within the anonymous class object.

279
00:19:49.190 --> 00:19:50.680
So that could be the scenario.

280
00:19:50.690 --> 00:19:54.400
And probably just for simplicity, they don't want to do that.

281
00:19:54.410 --> 00:19:58.190
So they made it final and.

282
00:19:59.200 --> 00:20:03.670
But one thing is this iterator can be returned here in the like in this case.

283
00:20:04.060 --> 00:20:10.690
So it has this if it is an instance variable, if it is a variable like items, which is an instance

284
00:20:10.690 --> 00:20:17.410
variable in the enclosing class, then it is fine because this items will be accessed using the hidden

285
00:20:17.410 --> 00:20:18.070
reference.

286
00:20:18.070 --> 00:20:23.890
But since this is a local method here, it's a method and this is a local variable and the scope of

287
00:20:23.890 --> 00:20:25.870
this variable ends with the method.

288
00:20:25.960 --> 00:20:33.670
But the iterator object itself is surviving the scope and so we cannot use the hidden reference to access

289
00:20:33.670 --> 00:20:34.720
this variable.

290
00:20:34.750 --> 00:20:38.380
So for that reason it is going to make a copy of it.

291
00:20:38.380 --> 00:20:45.160
The compiler will make a copy of this count and it will internally in the new top level class that it

292
00:20:45.160 --> 00:20:45.910
creates.

293
00:20:45.910 --> 00:20:52.360
It creates a separate variable for count and it assigns the value to that, the count value to that.

294
00:20:52.360 --> 00:20:54.700
That's how it is internally implemented.

295
00:20:54.880 --> 00:20:56.830
So that's just for your information.

296
00:20:57.340 --> 00:20:58.360
So that's about it.

297
00:20:58.360 --> 00:21:01.810
Now let's head back to the slides to look at the limitations.

298
00:21:03.840 --> 00:21:06.660
Now let's look at few limitations of anonymous classes.

299
00:21:06.930 --> 00:21:11.220
First one is we obviously cannot inherit from multiple types.

300
00:21:11.670 --> 00:21:14.160
That is, we cannot implement multiple interfaces.

301
00:21:14.190 --> 00:21:19.530
Similarly, we cannot extend one class and at the same time implement an interface.

302
00:21:20.870 --> 00:21:27.830
Next limitation is that clients using an anonymous object can only invoke members that are inherited

303
00:21:27.830 --> 00:21:28.910
from a super type.

304
00:21:29.360 --> 00:21:35.300
That is, it is impossible to invoke any members that are defined only in the anonymous class.

305
00:21:36.620 --> 00:21:36.980
Next.

306
00:21:36.980 --> 00:21:39.980
It can be instantiated only at the point of declaration.

307
00:21:40.100 --> 00:21:40.610
Right.

308
00:21:41.970 --> 00:21:48.840
Finally, anonymous class cannot be used with instance of tests or any where a class name is required.

309
00:21:49.680 --> 00:21:50.880
So that's about it.

310
00:21:50.910 --> 00:21:55.530
An anonymous class is typically used to implement function objects.

311
00:21:55.680 --> 00:21:56.370
Thank you.

