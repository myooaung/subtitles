WEBVTT
1
00:00:02.060 --> 00:00:02.980
Hello there.

2
00:00:02.990 --> 00:00:04.250
This is Lou.

3
00:00:04.250 --> 00:00:05.300
And welcome back.

4
00:00:05.450 --> 00:00:12.440
Now, let's see how Georgia achieves platform independence, but without affecting execution speed.

5
00:00:14.350 --> 00:00:21.040
We discussed about compilation and interpretation, which offer contrasting benefits and limitations.

6
00:00:21.460 --> 00:00:28.390
We have seen that with compensation we get fast execution speed but without the benefit of platform

7
00:00:28.390 --> 00:00:29.230
independence.

8
00:00:29.560 --> 00:00:32.350
And we have also seen that with interpretation.

9
00:00:32.350 --> 00:00:40.720
We get the benefit of platform independence, but with much slower execution speed and with Java we

10
00:00:40.720 --> 00:00:42.820
get the best of both worlds.

11
00:00:43.090 --> 00:00:51.400
That is, Java uses compilation to achieve fast execution speed and it also uses interpretation to achieve

12
00:00:51.400 --> 00:00:52.720
platform independence.

13
00:00:53.140 --> 00:00:55.990
So let's see how that is accomplished in Java.

14
00:00:57.120 --> 00:01:04.379
So we have Java source code which is first compiled by the Java compiler into something called Java

15
00:01:04.379 --> 00:01:04.950
Bytecode.

16
00:01:05.610 --> 00:01:12.780
So it is not the machine code that typical compilers generate, but it is an intermediate format called

17
00:01:12.930 --> 00:01:14.370
the Java bytecode.

18
00:01:14.730 --> 00:01:24.510
And then the compiled Java bytecode can be interpreted on any platform that has a Java interpreter installed.

19
00:01:25.200 --> 00:01:30.270
Earlier we have seen this where an interpreter interprets source code directly.

20
00:01:30.660 --> 00:01:37.800
But here in the Java world, the interpreter is interpreting the Java bytecode rather than source code.

21
00:01:38.160 --> 00:01:43.590
So Java bytecode is an intermediate format generated from the source code.

22
00:01:43.980 --> 00:01:51.240
And interpreting this compiled Java bytecode as opposed to interpreting source code directly is what

23
00:01:51.240 --> 00:01:54.600
makes executing Java programs much faster.

24
00:01:54.990 --> 00:01:58.920
So executing Java bytecode is much faster.

25
00:01:59.250 --> 00:02:02.160
And let's discuss that in a couple of slides from here.

26
00:02:02.880 --> 00:02:10.169
Now, this Java interpreter is nothing but the JVM, which stands for Java Virtual Machine.

27
00:02:10.380 --> 00:02:17.130
That is it is a virtual machine that can execute Java programs, which include the Java bytecode.

28
00:02:17.910 --> 00:02:27.150
So as GPM is interpreting Java bytecode, we can think of Java as an interpreter language also just

29
00:02:27.150 --> 00:02:30.900
like any interpreter VMS platform specific.

30
00:02:31.140 --> 00:02:34.650
And that helps in achieving platform independence.

31
00:02:36.040 --> 00:02:43.300
So we have seen this earlier where platform dependent interpreters help achieve platform independence.

32
00:02:44.320 --> 00:02:50.770
And similarly with Java, platform dependent JVM would help achieve platform independence.

33
00:02:51.340 --> 00:02:57.740
It is just that Java would interpret Java bytecode rather than source code directly.

34
00:02:57.760 --> 00:02:59.260
That's the main difference.

35
00:02:59.590 --> 00:03:05.710
So Java Bytecode is platform independent, while JVM is platform dependent.

36
00:03:05.980 --> 00:03:10.010
Just like source code is platform independent.

37
00:03:10.030 --> 00:03:13.030
Whereas an interpreter is platform dependent.

38
00:03:13.570 --> 00:03:15.940
So you can see the similarity there.

39
00:03:17.590 --> 00:03:22.930
Now let's also look at the commands used for compilation and execution in Java.

40
00:03:23.140 --> 00:03:29.830
Under the end of this lecture, we will also execute these commands on the terminal to compile and execute

41
00:03:29.830 --> 00:03:30.940
a Java program.

42
00:03:31.390 --> 00:03:37.330
And also, as you progress through the course and the subsequent sections, you will be executing this

43
00:03:37.330 --> 00:03:41.440
commands to compile and execute Java programs.

44
00:03:41.920 --> 00:03:48.970
So let's assume we have a Java program called Hello dot Java, which includes the source code.

45
00:03:49.450 --> 00:03:53.940
So the extension of the file is Java and hello.

46
00:03:54.040 --> 00:04:01.630
Java can then be compiled to generate a file called Hello Dot Class, which includes the Java bytecode.

47
00:04:01.930 --> 00:04:05.770
And to compile we use the command java c space.

48
00:04:05.770 --> 00:04:06.910
Hello Java.

49
00:04:07.570 --> 00:04:13.450
So Java C or Java as it is often pronounced, is the Java compiler.

50
00:04:14.450 --> 00:04:20.820
Also, it does not matter whether we are compiling on Windows or Linux, the file generated would be

51
00:04:20.850 --> 00:04:21.860
held across.

52
00:04:23.420 --> 00:04:30.980
And Hallowed Art Cross can then be executed on any platform that has a gvm installed and to execute

53
00:04:30.980 --> 00:04:31.820
the class file.

54
00:04:31.850 --> 00:04:34.370
We use the combined java space.

55
00:04:34.370 --> 00:04:34.880
Hello.

56
00:04:35.360 --> 00:04:37.790
Here Java is the Java interpreter.

57
00:04:38.590 --> 00:04:41.710
And it is the same command regardless of the platform.

58
00:04:42.460 --> 00:04:44.530
And this command java space.

59
00:04:44.530 --> 00:04:45.130
Hello.

60
00:04:45.250 --> 00:04:47.680
Creates an instance of JVM.

61
00:04:48.160 --> 00:04:56.820
So JVM is just a software and it creates an instance of Java that is the CPU loads the JVM into memory

62
00:04:56.830 --> 00:05:02.170
as soon as we execute this command and then the JVM executes locus.

63
00:05:02.860 --> 00:05:08.740
In other words, JVM interprets the Java bytecode present in Hello class.

64
00:05:09.520 --> 00:05:12.970
And like I said earlier, we will soon look at this process in action.

65
00:05:13.360 --> 00:05:21.220
Now coming back to execution speed, as mentioned earlier, interpreting Java bytecode is much faster

66
00:05:21.220 --> 00:05:22.930
than interpreting source code.

67
00:05:23.530 --> 00:05:31.900
And that's because Java Bytecode is compact compared to source code and is designed specifically to

68
00:05:31.900 --> 00:05:33.940
be interpreted by JVM.

69
00:05:34.510 --> 00:05:37.540
So it is designed specifically to be interpreted by JVM.

70
00:05:38.050 --> 00:05:42.550
And Source Code is designed to be read and written by humans.

71
00:05:42.580 --> 00:05:44.290
That is the developers.

72
00:05:45.010 --> 00:05:52.630
Moreover, it is already compiled, which means that things like syntax checking which happens when

73
00:05:52.630 --> 00:05:55.030
interpreting source code is already done.

74
00:05:55.480 --> 00:05:57.340
So that saves us time.

75
00:05:58.210 --> 00:06:05.410
Also the Java bytecode is to certain extent optimized with certain operations which would make it run

76
00:06:05.410 --> 00:06:06.160
faster.

77
00:06:07.340 --> 00:06:10.130
On next to further speed up execution.

78
00:06:10.130 --> 00:06:17.780
GM also performs additional optimization through a process called Just in Time compilation, which will

79
00:06:17.780 --> 00:06:20.210
be discussed in one of the subsequent lectures.

80
00:06:20.480 --> 00:06:26.150
But this particular optimization will be done at execution time by the JVM.

81
00:06:26.570 --> 00:06:34.610
So it is not done by the compiler, and it plays a very critical role in making Java programs run faster.

82
00:06:36.270 --> 00:06:44.370
Finally note that the Java Bytecode compact form also enables a quick transfer of byte codes across

83
00:06:44.370 --> 00:06:45.090
networks.

84
00:06:45.630 --> 00:06:52.680
Recall that Java was originally designed to work in a networked environment where transferring compiled

85
00:06:52.680 --> 00:06:59.580
Java programs, which are nothing but the Java bytecode across different devices was one of the goals.

86
00:07:00.500 --> 00:07:01.950
So that's about it.

87
00:07:01.970 --> 00:07:10.430
And we have seen how Java Bytecode and JVM were used to achieve platform independence without compromising

88
00:07:10.430 --> 00:07:11.270
on speed.

89
00:07:11.840 --> 00:07:17.030
Now let's go ahead and test the platform independence capability of Java.

90
00:07:19.510 --> 00:07:22.810
So here I am on my windows machine and I have this program.

91
00:07:22.840 --> 00:07:30.070
Hello, Java, which is similar to the C program which we have seen in the platform dependency lecture

92
00:07:30.070 --> 00:07:32.260
where we were printing the text hello world.

93
00:07:32.290 --> 00:07:37.450
So this class also prints hello world here the text hello world onto the console.

94
00:07:37.540 --> 00:07:41.200
So let's go ahead and compile this Java program.

95
00:07:41.620 --> 00:07:46.780
So to compile, as I said earlier, the command is Java C space.

96
00:07:46.810 --> 00:07:49.150
Hello, dot java.

97
00:07:51.840 --> 00:07:57.950
And it would create a dot class file class which contains the Java bytecode.

98
00:07:57.960 --> 00:08:04.410
So in order to execute it we say Java, which is the Java interpreter and it would be space.

99
00:08:04.410 --> 00:08:05.070
Hello.

100
00:08:05.310 --> 00:08:09.090
And that would execute the class which has the Java bytecode.

101
00:08:09.660 --> 00:08:11.520
And as you can see, it prints the text.

102
00:08:11.520 --> 00:08:12.120
Hello world.

103
00:08:12.390 --> 00:08:19.950
Now let's go ahead and copy this dot class file which was generated by the Java compiler onto the Linux

104
00:08:19.950 --> 00:08:24.450
machine in order to test the platform independence capability of Java.

105
00:08:26.450 --> 00:08:32.350
So here is her locked class, which was monitored by the compiler and which has the Java bytecode.

106
00:08:32.360 --> 00:08:34.970
So I copied it onto my Windows machine.

107
00:08:35.880 --> 00:08:36.450
Next.

108
00:08:36.450 --> 00:08:38.100
Let me just execute that.

109
00:08:38.100 --> 00:08:41.150
So we don't have the compensation step here.

110
00:08:41.159 --> 00:08:42.299
Just execute it.

111
00:08:43.480 --> 00:08:44.560
Java space.

112
00:08:44.560 --> 00:08:45.130
Hello.

113
00:08:46.760 --> 00:08:47.220
That's it.

114
00:08:47.240 --> 00:08:53.720
So it also prints Hello World and it shows that Java is platform independent.

115
00:08:54.410 --> 00:08:55.380
So that's about it.

116
00:08:55.400 --> 00:08:56.000
Thank you.

117
00:08:56.000 --> 00:08:57.230
And see you in the next lecture.

