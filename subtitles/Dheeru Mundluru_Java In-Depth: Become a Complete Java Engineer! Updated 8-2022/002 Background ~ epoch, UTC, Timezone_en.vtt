WEBVTT
1
00:00:02.160 --> 00:00:02.400
Okay.

2
00:00:02.400 --> 00:00:08.070
Before we get started with the data and time classes, let's briefly discuss some very fundamental concepts

3
00:00:08.070 --> 00:00:09.570
related to dates and times.

4
00:00:09.930 --> 00:00:15.180
And without knowing this, you must still be able to perform any programming tasks that are relevant

5
00:00:15.180 --> 00:00:16.170
to dates and times.

6
00:00:16.260 --> 00:00:21.450
But when you review the API specs, you may have trouble understanding some of the terminology.

7
00:00:21.870 --> 00:00:27.270
So it's important to know the background information that we are going to cover in this particular lecture.

8
00:00:29.030 --> 00:00:35.660
Now as humans, we are trying to think of date and time in terms of months, days, years, hours and

9
00:00:35.660 --> 00:00:36.860
so on, right?

10
00:00:37.160 --> 00:00:42.050
However, for computers, this kind of interpretation is not easy to represent.

11
00:00:42.560 --> 00:00:49.130
So the model time as a single large number representing a point on a continuous timeline.

12
00:00:49.880 --> 00:00:57.200
And an origin called Epic has been arbitrarily set at midnight of January 1st, 1970.

13
00:00:57.910 --> 00:01:00.310
And here we can see the timeline on Epic.

14
00:01:00.400 --> 00:01:05.740
And this is the same convention that is used in UNIX and it is in fact referred to as UNIX time.

15
00:01:06.560 --> 00:01:09.830
Not that epic generally means start off something.

16
00:01:10.250 --> 00:01:16.370
So in the case of computers, APL is considered as a starting point and time is measured relative to

17
00:01:16.400 --> 00:01:17.000
epic.

18
00:01:17.330 --> 00:01:23.420
So time is measured forward and also backward as we would also have events happening before 1970.

19
00:01:24.340 --> 00:01:31.990
So if you consider this very instance of time, which is around 12:30 a.m., July the second, 2017,

20
00:01:32.380 --> 00:01:39.040
then it would be a single large number on the timeline, like the number of seconds or milliseconds

21
00:01:39.040 --> 00:01:46.630
elapsed since the APIC time, which is considered as zero because APIC is the origin and the date has

22
00:01:46.630 --> 00:01:54.430
86400 seconds, which is nothing but 24 hours multiplied by 60 minutes, which is multiplied by 60 seconds.

23
00:01:54.430 --> 00:01:54.940
Right.

24
00:01:55.210 --> 00:02:00.640
So based on that, computers can deduce date and time that we humans can comprehend.

25
00:02:01.390 --> 00:02:05.470
And later we will look at classes that can capture timestamps on a timeline.

26
00:02:06.580 --> 00:02:11.020
Now here we see this term called as UTC and let's see what it means.

27
00:02:12.970 --> 00:02:19.990
UTC is short for coordinated universal time, and it's the international time standard that the civil

28
00:02:19.990 --> 00:02:22.200
world uses for timekeeping.

29
00:02:22.210 --> 00:02:23.980
So that's what our clocks follow.

30
00:02:25.360 --> 00:02:30.490
Computer servers, aviation and even International Space Station rely on the standard.

31
00:02:31.990 --> 00:02:35.890
On a typical day has 86400 seconds.

32
00:02:35.890 --> 00:02:38.980
Right, because a day has 86400 seconds.

33
00:02:40.080 --> 00:02:47.670
However, occasionally, once every year or two, there can be a day when it can have 1/2 more or 1/2

34
00:02:47.670 --> 00:02:48.240
less.

35
00:02:49.150 --> 00:02:52.630
And that is to account for the uneven rotation of Earth.

36
00:02:53.260 --> 00:02:57.850
Now we know that Earth's rotation is the reason why we have 24 hours in a day.

37
00:02:58.540 --> 00:03:02.680
But it seems Earth also wobbles and sometimes also slows down.

38
00:03:02.770 --> 00:03:06.910
And due to this, it may not be exactly 86400 seconds.

39
00:03:07.300 --> 00:03:10.180
So we need to take this into account by adding a second.

40
00:03:11.110 --> 00:03:14.200
And this second is referred to as a leap second.

41
00:03:14.470 --> 00:03:22.480
Just like the way we have a leap year, once every four years as of January 2017, it seems that there

42
00:03:22.480 --> 00:03:26.740
has been 27 leap seconds since 1972.

43
00:03:27.720 --> 00:03:30.070
Now, sometimes Earth can also move faster.

44
00:03:30.090 --> 00:03:32.790
And due to that, we may have 1/2 less.

45
00:03:33.240 --> 00:03:35.100
But this did not happen so far.

46
00:03:35.130 --> 00:03:37.980
So it was always only 1/2 more.

47
00:03:40.140 --> 00:03:40.770
And UTC.

48
00:03:40.770 --> 00:03:48.750
Time is measured via atomic clocks which are highly precise and there are over 70 UTC timing centers

49
00:03:48.750 --> 00:03:55.770
around the world and an organization called BE IPM, which stands for International Bureau of Weights

50
00:03:55.770 --> 00:04:02.370
and Measures, uses the times that are reported by these different timing centers to compute the exact

51
00:04:02.370 --> 00:04:06.120
UTC time and it uses some sort of weighted averages.

52
00:04:06.690 --> 00:04:13.890
However, computers have their own internal clocks to compute UTC time and they are good at reflecting

53
00:04:13.890 --> 00:04:17.310
UTC time, but they may not reflect the leap seconds.

54
00:04:17.820 --> 00:04:20.670
But practically, this is not considered as a big issue.

55
00:04:21.649 --> 00:04:28.550
From what I read, JPM implementations also do not handle leap seconds so they are just not considered

56
00:04:28.550 --> 00:04:29.780
as a serious problem.

57
00:04:31.860 --> 00:04:33.720
And this is just for your information.

58
00:04:33.900 --> 00:04:41.280
U t which is short for universal time, is another standard, and it is based on astronomical observations

59
00:04:41.430 --> 00:04:43.230
and not on atomic clocks.

60
00:04:43.830 --> 00:04:50.730
And it is there since 1884 and one of its versions called UTI one accounts for leap seconds.

61
00:04:51.560 --> 00:04:58.640
Now at that time, GMT, which stands for Greenwich Mean Time, was chosen as the World's Standard Time.

62
00:04:59.300 --> 00:05:06.170
What that means is that there is this notion of time zones across the world, and these time zones vary

63
00:05:06.170 --> 00:05:10.220
in few hours from GMT, which is by itself a time zone.

64
00:05:11.210 --> 00:05:17.180
Green, which is actually a place in London and also has an observatory called the Royal Observatory,

65
00:05:17.180 --> 00:05:20.690
which is where this GMT is measured many times.

66
00:05:20.720 --> 00:05:25.910
GMT is also alternatively referred to as UTC, which we just discussed.

67
00:05:26.840 --> 00:05:31.550
Later during our demos, we will look at classes that handle different time zones.

68
00:05:32.420 --> 00:05:36.740
Let me now show you an image that shows the different time zones and we can get more information from

69
00:05:36.740 --> 00:05:37.100
it.

70
00:05:39.540 --> 00:05:39.750
Okay.

71
00:05:39.750 --> 00:05:42.060
So this image shows the different time zones.

72
00:05:42.420 --> 00:05:43.920
Let me zoom in here.

73
00:05:45.870 --> 00:05:46.030
Okay.

74
00:05:46.140 --> 00:05:47.850
Now, here we have United Kingdom.

75
00:05:48.090 --> 00:05:51.780
So that's at zero degrees longitude here, zero.

76
00:05:52.050 --> 00:05:54.030
So that is the green.

77
00:05:54.030 --> 00:05:54.570
Which time?

78
00:05:54.570 --> 00:05:56.640
Greenwich Mean Time or UTC.

79
00:05:58.700 --> 00:05:59.480
Here it is.

80
00:06:00.210 --> 00:06:05.730
And towards the left we have the different time zones, a few time zones, and also.

81
00:06:05.730 --> 00:06:07.260
Right, we have few time zones.

82
00:06:07.620 --> 00:06:09.870
So let me scroll here.

83
00:06:11.540 --> 00:06:17.240
So with within each time zone, all the different places within that time zone have the same time.

84
00:06:17.240 --> 00:06:22.080
Generally, under some parts, follow something called as a daylight saving time.

85
00:06:22.100 --> 00:06:23.420
Let me get back to that.

86
00:06:23.720 --> 00:06:29.870
So with each region here, so there is an offset of plus one, which is nothing but plus one hour.

87
00:06:30.320 --> 00:06:37.550
So if we are moving eastwards towards in this direction eastwards, then we are going to add plus one

88
00:06:37.550 --> 00:06:38.810
hour with each time zone.

89
00:06:38.810 --> 00:06:39.980
So this is one time zone.

90
00:06:39.980 --> 00:06:40.970
This is another time zone.

91
00:06:40.970 --> 00:06:42.110
This is another time zone.

92
00:06:42.110 --> 00:06:46.450
And within this time zone, there is there is an offset of plus three.

93
00:06:46.460 --> 00:06:54.020
So if there is an instance of time here, then at the same time in this particular time zone, it would

94
00:06:54.020 --> 00:06:55.880
be ahead by 3 hours.

95
00:06:56.720 --> 00:06:57.290
Now.

96
00:06:59.030 --> 00:07:07.220
Here, for example, in India, India is five and a half hours ahead of GMT, so it's about five and

97
00:07:07.230 --> 00:07:08.810
half hours ahead of GMT.

98
00:07:08.840 --> 00:07:12.230
So similarly, you can look at all other countries here.

99
00:07:12.560 --> 00:07:16.940
Now, if we move westwards towards the United States.

100
00:07:18.350 --> 00:07:22.340
So United States is a really huge country.

101
00:07:22.340 --> 00:07:25.850
So there are different time zones within the United States.

102
00:07:27.480 --> 00:07:34.320
So this is the Pacific Time Zone here, the Los Angeles area, and we have the Eastern Time, the Central

103
00:07:34.320 --> 00:07:34.870
Time.

104
00:07:34.890 --> 00:07:39.450
So each of them, they are varying from the GMT.

105
00:07:39.750 --> 00:07:46.770
For example, Pacific Time is around minus 8 hours behind false behind the GMT time.

106
00:07:47.610 --> 00:07:49.200
So we have these different time zones.

107
00:07:49.200 --> 00:07:54.180
And in some countries we have something called as the Daylight Saving Time.

108
00:07:54.180 --> 00:07:56.700
So that is for saving the daylight.

109
00:07:56.820 --> 00:08:02.490
And for instance, in the United States in the summer, the clock is moved by one hour ahead.

110
00:08:02.490 --> 00:08:05.190
So so that's the daylight saving time.

111
00:08:05.190 --> 00:08:08.370
And in fall, they actually move the clock backwards.

112
00:08:08.700 --> 00:08:13.470
So when we are manipulating dates and times and you are going to deal with different time zones, then

113
00:08:13.470 --> 00:08:17.190
you need to be aware of this, of the Daylight Saving Time.

114
00:08:17.190 --> 00:08:19.620
And in short, it is called us DST.

115
00:08:19.980 --> 00:08:28.530
And later in a demo we will also look at that even within the GMT, even within GMT here in green,

116
00:08:28.530 --> 00:08:35.039
which does not follow Daylight Saving Time, but London follows Daylight Saving Time.

117
00:08:35.970 --> 00:08:42.900
So so there is a time difference in for certain months, even within the same time zone.

118
00:08:43.500 --> 00:08:44.940
So that's about the time zone.

119
00:08:44.940 --> 00:08:48.240
And this link will also be available in the resources section.

120
00:08:48.240 --> 00:08:50.520
And let's head back to our slides.

121
00:08:52.530 --> 00:08:59.340
So we looked at the notion of timeline, the UTC timing, standard and time zone and we said that the

122
00:08:59.340 --> 00:09:03.780
current instance of time can be represented in UTC on a timeline.

123
00:09:04.380 --> 00:09:10.980
Such a timestamp is useful when we want to capture an event like user registration in a website and

124
00:09:10.980 --> 00:09:13.410
this is handled by a certain class in Java.

125
00:09:13.890 --> 00:09:20.250
But often we also need to keep track of certain things like birthdays, where a user specifies a specific

126
00:09:20.250 --> 00:09:26.580
day, month and year that represents his or her birthday and to represent such individual entities.

127
00:09:26.670 --> 00:09:32.910
A different class is used in Java, but when we are talking in terms of only dates rather than time,

128
00:09:32.970 --> 00:09:35.760
then we are thinking in terms of a calendar.

129
00:09:35.760 --> 00:09:36.240
Right?

130
00:09:36.510 --> 00:09:43.380
And just like UTC, there are also standards that computers follow for calendars, but human beings

131
00:09:43.380 --> 00:09:50.460
have come up with three kinds of calendar systems and they are solar, lunar and lunisolar.

132
00:09:51.030 --> 00:09:54.660
And all these calendar systems are based on astronomical cycles.

133
00:09:56.330 --> 00:10:02.090
The Gregorian calendar, which is the most widely used calendar across the world, is an example of

134
00:10:02.090 --> 00:10:03.140
a solar calendar.

135
00:10:03.530 --> 00:10:07.460
And it was introduced on October 15th of 1582.

136
00:10:07.790 --> 00:10:13.250
And before that there was the Julian calendar that was introduced by Julius Caesar.

137
00:10:13.970 --> 00:10:18.590
And the main difference between these two calendars is the rule that determines leap year.

138
00:10:19.960 --> 00:10:20.920
And Gregorian.

139
00:10:21.040 --> 00:10:29.290
Leap year is exactly divisible by four, but it is not divisible by 100 with the exception of 400.

140
00:10:29.980 --> 00:10:33.190
So that's a leap year in Gregorian and in Julian.

141
00:10:33.220 --> 00:10:36.520
A leap year is always exactly divisible by four.

142
00:10:37.060 --> 00:10:40.330
So that seems to be the main difference between these two calendars.

143
00:10:40.450 --> 00:10:46.060
And both these calendars have the same number of months in a year, and they also have the same number

144
00:10:46.060 --> 00:10:47.800
of days in months also.

145
00:10:49.560 --> 00:10:52.440
The Islamic calendar is an example of a lunar calendar.

146
00:10:53.290 --> 00:11:00.760
And finally, Buddhist, Chinese, Hindu, Lunisolar and Hebrew are examples of Lunisolar calendars.

147
00:11:01.360 --> 00:11:05.620
Now, if you're interested in learning more about these calendars, then you can just Google for them

148
00:11:05.620 --> 00:11:07.060
and read more about them.

149
00:11:08.960 --> 00:11:15.230
So since October 15, 1582, Gregorian calendar is what is being widely used throughout the world.

150
00:11:16.340 --> 00:11:19.430
So how are events tracked before this date?

151
00:11:20.830 --> 00:11:27.310
And for that Gregorian calendar, with its leap year, rules can be used once again on the Gregorian

152
00:11:27.310 --> 00:11:34.120
calendar applied to dates before October 15, 1582 is referred to as pluralistic Gregorian calendar.

153
00:11:35.750 --> 00:11:43.850
Now Java eight Data API uses a standard called ISO 8601, which is an international standard, and it

154
00:11:43.850 --> 00:11:46.400
is based on the Gregorian calendar.

155
00:11:47.060 --> 00:11:54.740
It basically means that Gregorian rules for Leap years are applied for all times, and ISO 8601 was

156
00:11:54.740 --> 00:12:00.770
created by ISO, which stands for International Standards Organization, and it is based in Geneva.

157
00:12:01.190 --> 00:12:02.570
So you might even know that.

158
00:12:02.960 --> 00:12:10.730
And this ISO 601 standard aims to avoid the risk of misinterpreting dates and times when they are passed

159
00:12:10.730 --> 00:12:13.700
between systems that are across national boundaries.

160
00:12:14.030 --> 00:12:16.490
So it is like the Unicode character set.

161
00:12:17.510 --> 00:12:19.320
So that's about the background we need.

162
00:12:19.340 --> 00:12:27.710
So to summarize, we discuss the timeline and epic, which starts on Jan first, 1970, and every instance

163
00:12:27.710 --> 00:12:29.840
of time is relative to Epic.

164
00:12:30.350 --> 00:12:34.010
Then we discussed about UTC, which is the international time standard.

165
00:12:34.490 --> 00:12:42.050
Finally, we briefly discuss the calendar systems and we say that the new Java API uses ISO 8601, which

166
00:12:42.050 --> 00:12:45.950
is also an international standard that formalizes the Gregorian calendar.

167
00:12:46.430 --> 00:12:47.570
So that's about it.

168
00:12:47.600 --> 00:12:48.200
Thank you.

169
00:12:48.200 --> 00:12:49.700
And see you in the next lecture.

