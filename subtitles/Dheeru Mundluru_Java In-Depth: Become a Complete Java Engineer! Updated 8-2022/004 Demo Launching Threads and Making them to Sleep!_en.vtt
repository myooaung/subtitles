WEBVTT
1
00:00:00.920 --> 00:00:01.730
Hi there.

2
00:00:02.180 --> 00:00:05.390
In the last lesson, we looked at how we can launch a thread.

3
00:00:05.540 --> 00:00:07.580
Now let's go ahead and implement it.

4
00:00:07.939 --> 00:00:13.220
So apart from that, apart from implementing it, we will also look at an alternative way to launch

5
00:00:13.220 --> 00:00:13.760
a thread.

6
00:00:14.180 --> 00:00:15.380
So there's a second way to do it.

7
00:00:15.380 --> 00:00:16.610
And we will also look at that.

8
00:00:16.850 --> 00:00:20.180
And then we will see how we can put a thread to sleep.

9
00:00:20.690 --> 00:00:26.180
We said that we can invoke the sleep method for doing that, and we will also look at that.

10
00:00:26.720 --> 00:00:31.710
So for this demo, I added a new package called Semantic Square Concurrency.

11
00:00:31.730 --> 00:00:34.490
And we are going to add our classes within this package.

12
00:00:34.850 --> 00:00:39.710
So the first class is called as my first thread since this is going to be our first thread.

13
00:00:39.980 --> 00:00:42.350
So here is the template and we are going to fill it now.

14
00:00:43.010 --> 00:00:45.630
So let's just go ahead and create a thread.

15
00:00:45.650 --> 00:00:48.320
So for creating a thread, we need a task.

16
00:00:48.650 --> 00:00:49.850
So let's create a task.

17
00:00:50.540 --> 00:00:52.620
Basically, we need to create a renewable object.

18
00:00:52.640 --> 00:00:54.230
Let's just call it a task.

19
00:00:56.400 --> 00:00:56.530
Okay.

20
00:00:56.690 --> 00:01:02.180
So this is a class, so let's just go ahead and create a class here.

21
00:01:03.400 --> 00:01:04.690
Called Task.

22
00:01:06.370 --> 00:01:07.990
Now task has to implement.

23
00:01:08.470 --> 00:01:09.250
We know that.

24
00:01:12.900 --> 00:01:18.600
Now we know that the round table has a method called run, right?

25
00:01:18.600 --> 00:01:20.340
So we need to implement that.

26
00:01:20.340 --> 00:01:21.810
We need to override that method.

27
00:01:21.900 --> 00:01:23.130
So here it is.

28
00:01:24.670 --> 00:01:35.890
Now here, let's put a system statement cis out control space and let's say inside run.

29
00:01:37.010 --> 00:01:42.710
So the real business logic of the task goes here of the thread actually goes here in the run method

30
00:01:42.710 --> 00:01:45.290
and from the run method we can actually invoke other methods.

31
00:01:45.560 --> 00:01:49.070
So let's also go ahead and invoke some other methods.

32
00:01:49.370 --> 00:01:51.740
So let's write a method called Go.

33
00:01:54.670 --> 00:01:55.870
So it's a private method.

34
00:01:56.170 --> 00:01:57.610
So once again.

35
00:02:00.930 --> 00:02:02.250
I just copy this.

36
00:02:04.540 --> 00:02:06.360
This is inside.

37
00:02:06.360 --> 00:02:11.250
Go and let's add one more method called more.

38
00:02:19.430 --> 00:02:21.660
So basically this is our task.

39
00:02:21.710 --> 00:02:26.750
The run method is here and it is invoking go and go is in turn invoking more.

40
00:02:27.410 --> 00:02:32.920
So the hope is that I wanted to show you the the way the thread scheduler behaves.

41
00:02:32.930 --> 00:02:36.170
So these multiple invocations is for that.

42
00:02:36.260 --> 00:02:43.370
And let's just hope that the thread scheduler would help us in seeing the sequence of events so we will

43
00:02:43.370 --> 00:02:44.120
test it out.

44
00:02:44.180 --> 00:02:46.490
But here we have the main method.

45
00:02:46.490 --> 00:02:48.660
Now we created the task.

46
00:02:48.680 --> 00:02:50.360
Next step is to create the thread.

47
00:02:50.750 --> 00:02:54.170
So we simply need to instantiate that, let's say, thread.

48
00:02:56.210 --> 00:02:57.970
And we need to pass the task.

49
00:02:57.980 --> 00:03:00.740
So threat is a worker and task is the work.

50
00:03:02.070 --> 00:03:05.430
Now it's we are in the new state, right?

51
00:03:06.720 --> 00:03:11.010
The next step is to start the thread and nothing happens until we do that.

52
00:03:13.250 --> 00:03:15.080
So that's how we start the thread.

53
00:03:16.030 --> 00:03:19.840
And let's also put a system statement here.

54
00:03:22.720 --> 00:03:23.620
And that's it.

55
00:03:23.920 --> 00:03:28.320
So at this instance, if we run GPM, there will be two threads.

56
00:03:28.330 --> 00:03:34.100
One is the main thread which the JV team creates in order to run the main method itself.

57
00:03:34.120 --> 00:03:35.890
So that would be this thread.

58
00:03:36.310 --> 00:03:38.950
But then here we are also creating a second thread.

59
00:03:39.310 --> 00:03:44.860
So there are two threads which will run when we run this program and both of them are non demon threads.

60
00:03:45.070 --> 00:03:50.440
And JVM will not terminate until both the threads are done with their execution.

61
00:03:51.340 --> 00:03:53.410
So let's go ahead and run it.

62
00:03:55.170 --> 00:04:01.800
So what is happening here is the thread scheduler is first running the main threat to completion and

63
00:04:01.800 --> 00:04:07.770
then it is running the the second threat, let's call it as a second thread and it is running that to

64
00:04:07.770 --> 00:04:08.430
completion.

65
00:04:08.700 --> 00:04:11.910
So the inside run is getting invoked and then go and then more.

66
00:04:12.270 --> 00:04:16.680
Now let's see, let's keep running until we can see the switching between the two threads.

67
00:04:18.390 --> 00:04:18.660
Okay.

68
00:04:18.660 --> 00:04:24.390
Now, here you can see that this time the second thread has been launched first.

69
00:04:25.200 --> 00:04:26.520
So we are inside run.

70
00:04:26.820 --> 00:04:27.660
So the run.

71
00:04:27.660 --> 00:04:29.640
The second thread is in running state.

72
00:04:29.670 --> 00:04:36.330
Then the thread scheduler is sending it to run a state so that it can bring the main thread into running

73
00:04:36.330 --> 00:04:36.840
state.

74
00:04:37.290 --> 00:04:43.350
So the second thread has been sent in to run the state and the main thread now is in running state.

75
00:04:43.680 --> 00:04:49.830
But then after the main thread has been run to completion, then the second thread will go back to the

76
00:04:49.830 --> 00:04:50.550
running state.

77
00:04:50.580 --> 00:04:55.860
That's what the thread scheduler is doing, and then it continues executing the remaining part of the

78
00:04:55.860 --> 00:04:59.220
second thread, which is to invoke go and which is to invoke more.

79
00:05:00.180 --> 00:05:07.320
So we can see that the thread scheduler is not behaving consistently, so there is no guarantee on how

80
00:05:07.320 --> 00:05:07.920
it works.

81
00:05:07.920 --> 00:05:13.410
And so we should never, ever rely on it for our program's correctness.

82
00:05:13.770 --> 00:05:15.060
So that's the thread scheduler.

83
00:05:15.390 --> 00:05:18.930
And now let's look at the second approach.

84
00:05:18.930 --> 00:05:22.380
So for that, I already created this class called my thread two.

85
00:05:23.130 --> 00:05:26.040
So this is an alternative way to launch a thread.

86
00:05:26.280 --> 00:05:29.520
And here there is no reliable run double, is there?

87
00:05:29.730 --> 00:05:37.170
But the thing is, the thread class itself, even though the thread class itself actually implements

88
00:05:37.170 --> 00:05:38.550
reasonable interface.

89
00:05:39.570 --> 00:05:45.150
So in this approach, the task will be defined within the thread class itself.

90
00:05:45.870 --> 00:05:47.120
So the thread.

91
00:05:47.130 --> 00:05:53.250
So I said that the thread class is also implementing the renewable run double interface, which means

92
00:05:53.250 --> 00:05:57.000
that thread also has the run method and it does have the run method.

93
00:05:57.030 --> 00:05:59.120
But that run method does not do anything.

94
00:05:59.130 --> 00:06:00.840
It's pretty much like an empty method.

95
00:06:00.960 --> 00:06:02.550
You can look at the source code too.

96
00:06:02.580 --> 00:06:06.330
It has some thing, it does something, but there is nothing happening there.

97
00:06:06.450 --> 00:06:09.420
So what we need to do is we need to extend that thread.

98
00:06:09.450 --> 00:06:14.490
So my thread to my first thread too is extending it, which means that my first thread too is also a

99
00:06:14.490 --> 00:06:20.760
thread, but it is going to override the run method in the thread class and that's what we are doing

100
00:06:20.760 --> 00:06:21.270
here.

101
00:06:21.270 --> 00:06:25.380
And the run method is once again invoking go and go is in working more.

102
00:06:25.740 --> 00:06:28.350
So it's just the same code that we had in the task class.

103
00:06:28.770 --> 00:06:31.230
It has been moved into this into this class.

104
00:06:31.680 --> 00:06:32.790
So that's all it is.

105
00:06:32.790 --> 00:06:38.490
And here in the main method, we are simply instantiating it and we are invoking the start method here.

106
00:06:39.510 --> 00:06:41.640
So let me just run this once again.

107
00:06:42.730 --> 00:06:43.810
So here you go.

108
00:06:43.810 --> 00:06:45.040
It's just the same output.

109
00:06:45.310 --> 00:06:49.020
So the question would be, which method should we prefer?

110
00:06:49.030 --> 00:06:52.210
Should we go with the first approach or the second approach?

111
00:06:52.810 --> 00:06:55.270
And the suggestion is to go with the first approach.

112
00:06:55.270 --> 00:06:56.710
And that's what you should do.

113
00:06:57.580 --> 00:06:58.690
The reason is.

114
00:06:58.840 --> 00:07:03.890
So here we have the worker, which is the thread and its work, which is the task.

115
00:07:03.910 --> 00:07:06.430
So these are two different activities.

116
00:07:06.530 --> 00:07:06.910
Right.

117
00:07:07.210 --> 00:07:11.200
And for I'm a good object oriented design standpoint.

118
00:07:11.380 --> 00:07:16.240
If there are such activities, different activities, then they should be represented by different classes

119
00:07:16.930 --> 00:07:21.840
so that we'll have loosely coupled design and it will have its own benefits.

120
00:07:21.850 --> 00:07:24.580
And that's the reason why you should go with this.

121
00:07:25.270 --> 00:07:26.260
With the first approach.

122
00:07:26.260 --> 00:07:27.700
In the second approach.

123
00:07:27.880 --> 00:07:29.070
That's not the case.

124
00:07:29.490 --> 00:07:34.480
Both the activities have been intermingled, so it is tightly coupled.

125
00:07:34.480 --> 00:07:39.430
And that's not a good design from an object oriented standpoint, and that is what is recommended to

126
00:07:39.430 --> 00:07:40.720
go with the first approach.

127
00:07:40.960 --> 00:07:45.790
So if you look at StackOverflow or anywhere, you will see that this approach is recommended.

128
00:07:46.090 --> 00:07:47.710
So that's the second alternative.

129
00:07:47.740 --> 00:07:52.150
Now, let's just go ahead and see how we can put a thread to sleep.

130
00:07:52.780 --> 00:07:55.750
For that, we just need to invoke the sleep method.

131
00:07:56.200 --> 00:07:59.560
So the sleep method is a static method and the thread class.

132
00:07:59.560 --> 00:08:01.930
So let's just put the sleep statement here.

133
00:08:04.700 --> 00:08:05.510
Here it is.

134
00:08:05.990 --> 00:08:09.500
Now, the sleep method is a static method.

135
00:08:11.210 --> 00:08:15.230
But it throws an exception called interrupted exception.

136
00:08:15.260 --> 00:08:16.490
We will look at it later.

137
00:08:16.730 --> 00:08:23.090
But since it's a checked exception, we need to handle it via a TRICARE statement and etc. and let's

138
00:08:23.090 --> 00:08:23.570
do that.

139
00:08:23.570 --> 00:08:24.480
So here it is.

140
00:08:24.500 --> 00:08:28.250
Interrupted exception will be discussed later, but this is what we are doing.

141
00:08:28.250 --> 00:08:34.190
So we are we are invoking the sleep method and the sleep method accepts it has a single parameter which

142
00:08:34.190 --> 00:08:34.760
is long.

143
00:08:35.059 --> 00:08:40.669
By doing this we are saying we are saying that the current thread, which is the main thread, has to

144
00:08:40.669 --> 00:08:46.370
sleep for so many milliseconds, 3000 milliseconds, which is nothing but 3 seconds.

145
00:08:46.940 --> 00:08:54.410
So this statement with this statement, the current thread would stop its execution or sees its execution

146
00:08:54.410 --> 00:08:58.760
for this many milliseconds for 3000 milliseconds.

147
00:08:59.060 --> 00:09:00.140
So that's what we are doing.

148
00:09:00.710 --> 00:09:03.650
So let's go ahead and execute it.

149
00:09:04.160 --> 00:09:09.500
Now you can see that the program is still running and now it has ended after 3 seconds.

150
00:09:09.830 --> 00:09:16.760
So in this case, the second thread has run to completion and after 3 seconds the main thread has also

151
00:09:16.760 --> 00:09:17.690
run to completion.

152
00:09:18.620 --> 00:09:23.510
So basically that's what the sleep statement does, the sleeping location does.

153
00:09:24.170 --> 00:09:27.920
Now the question would be, why would you need such a sleep statement?

154
00:09:28.190 --> 00:09:31.310
So one example I can think of is the Web crawler.

155
00:09:31.310 --> 00:09:32.270
Web crawler example.

156
00:09:32.270 --> 00:09:34.640
We discussed it at the beginning of the chapter.

157
00:09:34.790 --> 00:09:39.410
A Web crawler is simply a software that search engine uses to crawl the web.

158
00:09:39.620 --> 00:09:47.120
And the way crawling works is, let's say if you give a particular link a URL to a web crawler, then

159
00:09:47.120 --> 00:09:52.340
what it does is it's going to download the corresponding web page, and then that web page has some

160
00:09:52.340 --> 00:09:53.240
number of links.

161
00:09:53.480 --> 00:09:56.150
So it's going to download all of those links.

162
00:09:56.150 --> 00:10:00.880
And each of those links is basically a web page, and those web pages also have links.

163
00:10:00.890 --> 00:10:05.930
Then it's going to download all of those links also, and the process continues, and that's how a web

164
00:10:05.930 --> 00:10:06.770
crawler works.

165
00:10:07.430 --> 00:10:12.040
Now, if a particular Web page has some number of links and all of all of those links, or at least

166
00:10:12.040 --> 00:10:18.470
the majority of them are pointing to one particular site, different pages in one particular site.

167
00:10:18.500 --> 00:10:21.320
So the crawler is going to download all those pages.

168
00:10:21.320 --> 00:10:28.220
And the problem with that is it's going to send request, HTTP, request for all of those links and

169
00:10:28.220 --> 00:10:32.690
that code place burden on the web server that is hosting those pages.

170
00:10:33.290 --> 00:10:36.590
So Web server can accept only so many requests in a given time.

171
00:10:37.070 --> 00:10:40.250
So you should be you should not overburden the server.

172
00:10:40.250 --> 00:10:43.640
You should make sure that you are not hitting it too hard.

173
00:10:43.700 --> 00:10:49.220
So what you can do is between two successive requests, you can insert some delay.

174
00:10:50.120 --> 00:10:56.750
So if you are downloading task is done by a thread, then between two successive requests you can insert

175
00:10:56.750 --> 00:10:59.750
a gap and that you can do using this slip.

176
00:10:59.750 --> 00:11:05.570
So let's say if you have sent a request to the server to download a page and after doing that you can

177
00:11:05.570 --> 00:11:06.800
wait for 1/2.

178
00:11:06.800 --> 00:11:08.900
1/2 is a good it's a good delay.

179
00:11:08.930 --> 00:11:11.240
After that, you can download the second page.

180
00:11:11.690 --> 00:11:13.610
So it is good for inserting delays.

181
00:11:13.610 --> 00:11:20.120
And the second example could be to run some background jobs on your server periodically.

182
00:11:20.510 --> 00:11:22.070
So let's say you have done something.

183
00:11:22.070 --> 00:11:26.170
Let's say you have sent an email today at 8 p.m. and then you would do it after one hour.

184
00:11:26.180 --> 00:11:28.340
Let's say you are going to send another marketing email.

185
00:11:28.550 --> 00:11:34.940
So if a thread is doing that, so once it sends the email, you can make the thread sleep for an hour

186
00:11:35.060 --> 00:11:40.640
and after that the sleep will wake up and then it will send the next campaign emails.

187
00:11:40.970 --> 00:11:42.560
So you can do that.

188
00:11:42.560 --> 00:11:47.930
But in general, such kind of scheduling of jobs can be taken care of in a much better way.

189
00:11:47.930 --> 00:11:49.820
Using frameworks like spring.

190
00:11:49.820 --> 00:11:52.760
Spring has some subcomponents.

191
00:11:52.790 --> 00:11:55.070
One of them is called a squad scheduler.

192
00:11:55.070 --> 00:12:00.230
It can be used for that, so we don't have to do this, but if you really want to do that, so that's

193
00:12:00.230 --> 00:12:01.130
the way you can do it.

194
00:12:01.130 --> 00:12:03.020
Use the sleep method.

195
00:12:04.270 --> 00:12:05.770
So that's the thing.

196
00:12:05.800 --> 00:12:09.040
Now, there is also a second way to insert sleep.

197
00:12:10.240 --> 00:12:10.960
That is.

198
00:12:13.380 --> 00:12:16.050
There is this enum called Time Unit.

199
00:12:16.940 --> 00:12:23.420
And here it has different ways of doing it now that now the disadvantage with the sleep method here

200
00:12:23.420 --> 00:12:26.060
is the unit, the time unit.

201
00:12:26.060 --> 00:12:29.930
The unit of time is only milliseconds.

202
00:12:29.930 --> 00:12:36.230
So if you want to wait for, let's say an hour, then you need to convert that into milliseconds and

203
00:12:36.230 --> 00:12:39.440
pass it as the argument which is not very convenient.

204
00:12:39.440 --> 00:12:48.650
So that's why in Java five they have introduced this time unit in a class and time unit has different

205
00:12:48.650 --> 00:12:54.170
units of time here like days, hours, microseconds, milliseconds and let's order seconds to let's

206
00:12:54.170 --> 00:12:56.900
just second select seconds here and.

207
00:12:57.740 --> 00:12:58.910
Let's put three.

208
00:13:00.050 --> 00:13:01.220
Actually, we need to.

209
00:13:02.930 --> 00:13:04.280
So don't sleep.

210
00:13:05.570 --> 00:13:08.510
After that it.

211
00:13:10.790 --> 00:13:14.150
And now the main thread is waiting for 3 seconds and it is done.

212
00:13:14.450 --> 00:13:19.460
So this is another way to do it, a slightly more convenient and a readable way to do it.

213
00:13:20.150 --> 00:13:21.310
So that's the Time unit.

214
00:13:21.320 --> 00:13:22.130
It's an enum.

215
00:13:23.710 --> 00:13:24.850
Now that's about it.

216
00:13:24.850 --> 00:13:29.590
And one more thing is so we looked at the two approaches for launching a thread and we looked at sleep

217
00:13:29.590 --> 00:13:30.250
method.

218
00:13:30.520 --> 00:13:36.670
And one last thing is, so let's say that this thread has run to completion, so it's run method has

219
00:13:36.670 --> 00:13:38.230
been completely executed.

220
00:13:38.230 --> 00:13:43.600
So the question is, can we restart the thread by just saying thread, dot, dot, and that's not possible

221
00:13:43.810 --> 00:13:49.810
because once the run method finishes its execution, it goes into a state called dead.

222
00:13:50.890 --> 00:13:57.130
So at that point, this thread instance will still be on the on the heap, but it's just a useless object,

223
00:13:57.190 --> 00:13:58.540
just like any regular object.

224
00:13:58.900 --> 00:13:59.560
So.

225
00:13:59.560 --> 00:14:01.720
So there is, it's in the dead state now.

226
00:14:01.840 --> 00:14:04.810
So even if you try to do it, it will throw an exception.

227
00:14:05.440 --> 00:14:06.910
So let's just do that.

228
00:14:09.560 --> 00:14:12.890
So as you can see, it says a legal red state exception.

229
00:14:12.890 --> 00:14:14.290
So you can never do that.

230
00:14:14.300 --> 00:14:20.180
So once the thread finishes its execution, that is the run method has been executed completely.

231
00:14:20.330 --> 00:14:22.100
Then it goes into debt state.

232
00:14:22.700 --> 00:14:25.300
So it's the new state and then the debt state.

233
00:14:25.310 --> 00:14:28.820
And then we also have renewable running and the block state.

234
00:14:29.450 --> 00:14:30.410
So that's about it.

235
00:14:30.410 --> 00:14:35.780
In the next lesson, we will also look at a few more methods in the thread class and you can find this

236
00:14:35.780 --> 00:14:38.410
code in the resources section and that's about it.

237
00:14:38.420 --> 00:14:39.800
Thank you and happy coding.

