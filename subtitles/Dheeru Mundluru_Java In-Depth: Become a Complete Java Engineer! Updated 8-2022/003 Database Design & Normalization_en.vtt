WEBVTT
1
00:00:02.150 --> 00:00:03.010
Hi there.

2
00:00:03.020 --> 00:00:04.240
This is Diamond Uluru.

3
00:00:04.250 --> 00:00:05.300
And welcome back.

4
00:00:05.540 --> 00:00:10.640
So we said that we are going to refactor our project in order to use a database.

5
00:00:11.390 --> 00:00:18.440
So the first thing that we need to do is we need to design our database before we can actually create

6
00:00:18.440 --> 00:00:23.540
our database and create all the tables in the database and also populate them with the data.

7
00:00:24.020 --> 00:00:29.900
So whenever you're working on a project, once you have the requirements in place, the business requirements

8
00:00:29.900 --> 00:00:35.540
in place, one of the first things that you would do is to design your database so that you would do

9
00:00:35.540 --> 00:00:40.700
before even creating the database with the necessary tables and database.

10
00:00:40.700 --> 00:00:45.590
Designing is a very important step and it would be done by somebody who is experienced.

11
00:00:45.920 --> 00:00:51.290
And if it is not done properly, then there can be a lot of issues like inconsistent data.

12
00:00:51.740 --> 00:00:55.790
And so you would want to design your database in a proper way.

13
00:00:56.120 --> 00:01:01.790
And one of the things in a relational database is to reduce redundancy of the data.

14
00:01:02.480 --> 00:01:05.690
And for that, we use something called us normalization.

15
00:01:05.930 --> 00:01:12.650
So normalization is a process which would address redundancy, and it has a bunch of rules.

16
00:01:12.650 --> 00:01:19.370
And you would have to use those rules in order to design your database so that it has as minimal redundancy

17
00:01:19.370 --> 00:01:21.080
of data as possible.

18
00:01:21.830 --> 00:01:28.490
So in this particular lecture, we will look at these normalization rules, and so we are going to learn

19
00:01:28.490 --> 00:01:29.870
about database designing.

20
00:01:29.870 --> 00:01:35.380
And in the next lecture we will look at the actual database design for our project.

21
00:01:35.390 --> 00:01:41.090
And after that we will actually go ahead and create our database and also all the tables within the

22
00:01:41.090 --> 00:01:41.750
database.

23
00:01:42.320 --> 00:01:45.290
So these are the different normalization rules.

24
00:01:45.290 --> 00:01:47.480
So they are called as normal forms.

25
00:01:47.480 --> 00:01:54.560
So you have one NF two NF, three NF, B, C and F four and F five and six and F one and F is called

26
00:01:54.560 --> 00:01:56.060
as the first normal form.

27
00:01:56.330 --> 00:01:59.660
And it was introduced by Edgar Card.

28
00:01:59.780 --> 00:02:05.780
And we discuss we mentioned about Edgar Card in the introductory lecture, and this was introduced in

29
00:02:05.780 --> 00:02:11.780
1970 and after that two NF and three NF were introduced in 1971.

30
00:02:12.230 --> 00:02:19.880
And in 1974, Card has collaborated with Baez and together they came up with the boys card normal form.

31
00:02:20.680 --> 00:02:27.250
Now in practice, mostly you would expect the design to be in either the three and a half form or be

32
00:02:27.250 --> 00:02:27.910
CnF.

33
00:02:28.360 --> 00:02:35.010
So if it isn't big enough, most likely there will not be any tendency in in the different tables.

34
00:02:35.020 --> 00:02:40.540
Sometimes there can be some redundancy, but mostly you wouldn't see any, any, any redundancy.

35
00:02:40.930 --> 00:02:49.180
Now, if a particular table is in CnF, then it also means that it is in three and F and it is also

36
00:02:49.180 --> 00:02:55.240
into an F and it's also in one and F, and if a table is in three enough, then it means that it is

37
00:02:55.240 --> 00:03:01.240
in two and F and also in one and F and if it is in two NF, it means that it is also in one NF.

38
00:03:01.720 --> 00:03:08.140
So in this particular lecture we are going to look at one and F two and F three and F and and F and

39
00:03:08.140 --> 00:03:14.920
four and F and file and F on six and F are most likely for more complicated databases.

40
00:03:14.920 --> 00:03:17.830
And we are not going to discuss that in future.

41
00:03:17.830 --> 00:03:24.460
If I feel it is necessary, I might add a lecture on them, but at least for now, I don't want to discuss

42
00:03:24.460 --> 00:03:26.710
about those other normal forms.

43
00:03:27.460 --> 00:03:30.010
So this is what we have now.

44
00:03:30.010 --> 00:03:35.740
Let's go ahead and look at our the data that we already have for our project.

45
00:03:38.100 --> 00:03:40.530
So you might recall this particular file.

46
00:03:40.530 --> 00:03:42.330
So this is the book file.

47
00:03:42.660 --> 00:03:43.350
The text file.

48
00:03:43.350 --> 00:03:44.580
The data for book.

49
00:03:45.090 --> 00:03:51.000
And we know that our project is about bookmarking books, web links and also movies.

50
00:03:51.000 --> 00:03:53.400
And this was the data that we had for book.

51
00:03:53.790 --> 00:03:58.230
Now, imagine that all of this data is inside a table called Book.

52
00:03:58.800 --> 00:04:00.960
And here we have the different columns.

53
00:04:00.960 --> 00:04:03.280
The first one is the ID, second is the title of the book.

54
00:04:03.300 --> 00:04:06.000
Third is publication date for is the publisher.

55
00:04:06.330 --> 00:04:07.770
First one is author.

56
00:04:07.770 --> 00:04:08.590
Sixth is genre.

57
00:04:08.590 --> 00:04:09.570
The seventh is rating.

58
00:04:09.570 --> 00:04:12.360
An eighth is whether it is kid friendly or not.

59
00:04:12.960 --> 00:04:21.000
Now here we can see that one of these rules has multiple authors and they are separated and in relational

60
00:04:21.000 --> 00:04:21.630
database.

61
00:04:21.630 --> 00:04:25.020
You wouldn't you wouldn't want your data to be in this format.

62
00:04:25.440 --> 00:04:27.180
It's not in normalized format.

63
00:04:27.360 --> 00:04:29.850
So we need to start normalizing it.

64
00:04:29.850 --> 00:04:35.600
And for that, we will use the normal the normal forms which we have, which we have just discussed.

65
00:04:35.610 --> 00:04:40.020
So we are going to discuss about them and we are going to reduce the redundancy.

66
00:04:40.050 --> 00:04:46.500
Now, here, it's very difficult to search for a particular row if the data is like this.

67
00:04:46.770 --> 00:04:49.140
It's not very easy to search for the data.

68
00:04:49.470 --> 00:04:51.270
So this is not recommended.

69
00:04:51.270 --> 00:04:53.790
So you do not want to store your data in this way.

70
00:04:54.030 --> 00:04:59.370
So here I have this file called as normalization and using this file and I'm going to explain about

71
00:04:59.370 --> 00:05:00.630
the different normal forms.

72
00:05:01.050 --> 00:05:04.830
Now, I'm not we're not going to discuss it at a very in-depth level.

73
00:05:04.840 --> 00:05:08.100
It's if you go into the details, it will take a lot of time.

74
00:05:08.100 --> 00:05:11.370
So we are but we are going to cover it at an appropriate level.

75
00:05:11.370 --> 00:05:13.620
And you should be able to understand this normal forms.

76
00:05:13.890 --> 00:05:19.230
And any good database designer will know about this normalized forms.

77
00:05:19.230 --> 00:05:25.170
Sometimes some developers do not understand this, and many times it might be fine, but sometimes they

78
00:05:25.170 --> 00:05:25.740
might.

79
00:05:25.860 --> 00:05:27.840
Because of a lack of understanding of this.

80
00:05:27.840 --> 00:05:34.860
They might design databases that are not well designed, but we will definitely look at this and a lot

81
00:05:34.860 --> 00:05:41.070
of people actually get confused between three and F on BC and F and they are confused with that.

82
00:05:41.070 --> 00:05:44.430
But hopefully this will clear that up.

83
00:05:45.180 --> 00:05:46.110
Hopefully you will.

84
00:05:46.110 --> 00:05:49.860
You'll be able to understand these different normal forms in a nice way.

85
00:05:49.950 --> 00:05:54.180
So the thing is, we do not want the data to be in a normalized form.

86
00:05:54.420 --> 00:05:58.910
So what we need to do here is we have these different values here.

87
00:05:58.920 --> 00:06:05.220
So the first normal form requires that each cell in the table has only one value.

88
00:06:05.220 --> 00:06:12.420
So it shouldn't have such commerce operator list of values and it and it calls it as atomic values.

89
00:06:12.420 --> 00:06:15.990
So it requires each attribute value to be atomic.

90
00:06:15.990 --> 00:06:19.170
So, so that's the term that they use for first normal form.

91
00:06:19.350 --> 00:06:25.800
So in order to do that, we need to split this particular row into multiple rows and each row would

92
00:06:25.800 --> 00:06:27.450
have only one author.

93
00:06:27.450 --> 00:06:29.580
So that's exactly what we have done here.

94
00:06:29.580 --> 00:06:36.270
So this had first design patterns, book has multiple authors and we have split it into these different

95
00:06:36.270 --> 00:06:42.930
rows and we can see that now each of the cells here have only one value.

96
00:06:43.650 --> 00:06:50.310
Now the disadvantage with this is we have redundancy because we can see that the rest of the data for

97
00:06:50.310 --> 00:06:56.550
that particular book has been repeated for all these four rows, right?

98
00:06:56.550 --> 00:07:02.580
So because of that, we have increased storage and we have something called update, delete and insertion

99
00:07:02.580 --> 00:07:03.420
anomalies.

100
00:07:03.600 --> 00:07:09.720
Now for instance, update anomaly is that if you want to change something, you would have to change

101
00:07:09.720 --> 00:07:11.190
in all the different rows.

102
00:07:11.580 --> 00:07:15.600
If you want to change this to head first design, you would have to change that in all other rows.

103
00:07:15.600 --> 00:07:19.920
And if you do not do it in one of them, then you would end up with inconsistent data.

104
00:07:19.920 --> 00:07:25.770
So that's the update anomaly now deletion is that now let's say if we delete this particular row here

105
00:07:26.490 --> 00:07:34.050
and if there is only one book by this author, then if we are going to delete this, then we lost information

106
00:07:34.050 --> 00:07:36.480
about the author too along with the book.

107
00:07:36.600 --> 00:07:38.940
So we no longer know.

108
00:07:39.210 --> 00:07:43.260
We no longer have this author information at all within our database.

109
00:07:43.410 --> 00:07:46.140
So that's a deletion anomaly, an insertion anomaly.

110
00:07:46.140 --> 00:07:53.730
Is that now let's say if we want to insert information only about this particular author or some author,

111
00:07:53.730 --> 00:08:00.690
but we do not have any book information that the author has written, then it might not be possible

112
00:08:00.690 --> 00:08:06.420
to insert that kind of a data into our database, that is, to insert only the author information,

113
00:08:06.420 --> 00:08:12.390
because this particular table might require us to always add the book title also.

114
00:08:12.570 --> 00:08:16.320
So if we have that kind of a constraint, then it will not be possible to add it.

115
00:08:16.590 --> 00:08:18.660
So that's the insertion anomaly.

116
00:08:19.450 --> 00:08:23.920
So in order to insert that, we need to insert the book title also now.

117
00:08:24.400 --> 00:08:29.770
So but this is in first normal form, but it has these some issues here.

118
00:08:30.250 --> 00:08:37.809
Now, before refining this particular schema, furthermore, we need to look understand a few things.

119
00:08:37.809 --> 00:08:40.929
One is we have here something called as candidate keys.

120
00:08:41.020 --> 00:08:46.900
So earlier in the introductory lecture, we mentioned about primary key and this would be the primary

121
00:08:46.900 --> 00:08:47.590
key here.

122
00:08:47.770 --> 00:08:51.310
But in general, there can be multiple keys in a table.

123
00:08:51.340 --> 00:08:53.850
For example, here it is a primary key.

124
00:08:53.860 --> 00:08:55.630
So let's just call it as a key.

125
00:08:55.930 --> 00:08:57.640
But there can be other keys also.

126
00:08:57.640 --> 00:09:01.700
For instance, here, title publication, date and publisher name.

127
00:09:01.720 --> 00:09:08.650
Together, these three columns can also be another key, and in that case, we call it as a candidate

128
00:09:08.650 --> 00:09:09.130
key.

129
00:09:09.820 --> 00:09:12.850
Whenever we have more than one key, we call it as a candidate keys.

130
00:09:13.270 --> 00:09:17.400
And these three columns would uniquely identify a row.

131
00:09:17.410 --> 00:09:20.910
So you cannot have another row with valid in 1854.

132
00:09:20.920 --> 00:09:24.340
And while there publications, you cannot have that.

133
00:09:24.490 --> 00:09:27.040
So in that sense, it is called as a unique key.

134
00:09:27.310 --> 00:09:32.860
Similarly, there is also another candidate key, which is title publication, date and the author.

135
00:09:32.860 --> 00:09:39.640
So together the rows and those columns were also uniquely would also be unique.

136
00:09:40.480 --> 00:09:45.790
Now in the table, if you have such kinds of different kinds of keys, then we call them as candidate

137
00:09:45.790 --> 00:09:47.070
keys or simply keys.

138
00:09:47.080 --> 00:09:51.190
But one of them we will assign as a primary key.

139
00:09:51.400 --> 00:09:58.540
And normally developers prefer to have a primary key, such as this one, which is an integer, because

140
00:09:58.540 --> 00:10:00.930
it will help with performance.

141
00:10:00.940 --> 00:10:03.850
So especially if you have tables like this.

142
00:10:03.850 --> 00:10:07.780
So this is a book table and let's say there are other related tables also.

143
00:10:08.080 --> 00:10:15.790
And if for a given query, if you have to combine these different tables in order to get the required

144
00:10:15.790 --> 00:10:21.430
data, then you would combine those tables based on some common fields.

145
00:10:21.940 --> 00:10:27.100
So we earlier we in the introductory lecture I mentioned about foreign key.

146
00:10:27.910 --> 00:10:30.580
So foreign key would be referencing a primary key in a table.

147
00:10:30.580 --> 00:10:33.520
Let's say there is another table which references this primary key.

148
00:10:33.610 --> 00:10:40.090
So in that kind of a in that kind of a scenario, when we are joining those tables using these common

149
00:10:40.090 --> 00:10:44.170
attributes like the foreign key, referencing the the ID in this.

150
00:10:44.170 --> 00:10:51.160
So the ID field would be common there, the ID in this field and the foreign key and the other table.

151
00:10:51.250 --> 00:10:55.450
So you would use that, that common field in order to extract the data.

152
00:10:55.780 --> 00:11:00.910
And we will see that kind of a query later on when we are fetching some data from the database.

153
00:11:00.910 --> 00:11:02.260
It's called a select query.

154
00:11:02.470 --> 00:11:08.140
So for that, it would be much, much better if if the primary key is an is an integer.

155
00:11:08.620 --> 00:11:13.930
So that's why a lot of developers prefer it to be an integer rather than use something like this as

156
00:11:13.930 --> 00:11:14.920
a primary key.

157
00:11:15.860 --> 00:11:20.690
Basically every table will have an primary key, so you can have it that way.

158
00:11:20.870 --> 00:11:25.400
And so in that case, we call the primary key as a surrogate primary key.

159
00:11:25.790 --> 00:11:28.370
And surrogate primary keys cannot have any null values.

160
00:11:28.370 --> 00:11:29.560
So just keep that in mind.

161
00:11:29.570 --> 00:11:35.540
So you cannot have a null value and null value is it just means that you do not have any data for that

162
00:11:35.540 --> 00:11:36.500
particular cell.

163
00:11:37.130 --> 00:11:43.310
So just like the null value and in the Java programming language, but here the unique keys can have

164
00:11:43.310 --> 00:11:44.790
some null values too.

165
00:11:45.530 --> 00:11:52.270
So you can have title like Walden and 1854 can be null and then you can have some publisher.

166
00:11:52.280 --> 00:11:59.390
In that case, the uniqueness does not matter in the sense some other record can have valid in null

167
00:11:59.390 --> 00:12:01.340
and also while there publication.

168
00:12:01.940 --> 00:12:06.410
So when there is a null, then that unique constraint is relaxed.

169
00:12:07.550 --> 00:12:08.690
So that's one thing.

170
00:12:08.720 --> 00:12:13.460
So unique keys can have both of these are unique keys and they can have null values.

171
00:12:13.460 --> 00:12:14.660
So just keep that in mind.

172
00:12:14.750 --> 00:12:16.280
Now let's look at two NF.

173
00:12:17.370 --> 00:12:24.390
For two and f to understand to an F, let's just assume that there is another column called Publisher

174
00:12:24.390 --> 00:12:25.050
Address.

175
00:12:25.500 --> 00:12:27.450
Here we have public publisher name.

176
00:12:27.600 --> 00:12:30.450
So every publisher also has an address.

177
00:12:30.900 --> 00:12:35.460
So which means that the address is dependent on the publisher name.

178
00:12:35.460 --> 00:12:37.920
Publisher address is dependent on publisher name.

179
00:12:38.070 --> 00:12:43.020
And that kind of a dependency is is just shown in this way.

180
00:12:43.680 --> 00:12:46.380
It's this way using like this with a dash and an arrow.

181
00:12:46.800 --> 00:12:50.490
So, and it's called as a functional dependency.

182
00:12:50.610 --> 00:12:52.560
FD It's called as a functional dependency.

183
00:12:52.560 --> 00:12:59.220
What it means is if the publisher name, same publisher name appears multiple times, then the publisher

184
00:12:59.220 --> 00:13:00.570
address also would repeat.

185
00:13:01.050 --> 00:13:01.980
So there's the thing.

186
00:13:02.220 --> 00:13:09.090
Now, if we have this kind of a this kind of a dependency, functional dependency, and if this left

187
00:13:09.240 --> 00:13:12.510
side attribute, which can also be more than one attribute.

188
00:13:13.350 --> 00:13:20.580
Now, if this is a proper subset of some key, now here we have the different keys.

189
00:13:20.820 --> 00:13:27.990
And if this particular attribute on the left side, if it is a proper subset of some key, then this

190
00:13:27.990 --> 00:13:32.250
particular relation would violate second normal form.

191
00:13:32.790 --> 00:13:36.810
For instance, here publisher name is part of.

192
00:13:37.830 --> 00:13:40.140
Here, this particular key.

193
00:13:40.530 --> 00:13:44.970
So what is going to happen is we are going to have some redundant data.

194
00:13:45.000 --> 00:13:46.830
So, for instance, here.

195
00:13:48.060 --> 00:13:48.690
O'Reilly.

196
00:13:48.690 --> 00:13:54.900
O'Reilly media is in some has some address, so it's going to repeat that multiple times.

197
00:13:55.030 --> 00:13:55.340
All right.

198
00:13:55.350 --> 00:13:57.060
So that's redundant data.

199
00:13:57.540 --> 00:14:04.230
So the thing is, so if you have a functional dependency and if the left side attribute is a proper

200
00:14:04.230 --> 00:14:09.810
subset of some key, then you have, then the table is not in second normal form.

201
00:14:10.320 --> 00:14:18.360
And the way we resolve it is so we need to decompose this table into multiple tables so we can have

202
00:14:18.360 --> 00:14:20.280
two different tables, publisher and book.

203
00:14:20.340 --> 00:14:21.650
So earlier we had only book.

204
00:14:21.660 --> 00:14:28.440
Now we will have publisher table and move that publisher name and the address into this new table called

205
00:14:28.440 --> 00:14:29.160
Publisher.

206
00:14:29.370 --> 00:14:35.730
So you have name and address here, so and so they have been moved from the book table.

207
00:14:35.820 --> 00:14:43.770
And this publisher also has a primary key ID and that ID will be referenced here in the book table.

208
00:14:43.770 --> 00:14:46.110
So in the book table, we no longer have the name and address.

209
00:14:46.110 --> 00:14:51.030
We just have the publisher underscore ID and this publisher underscore ID would be the foreign key and

210
00:14:51.030 --> 00:14:54.180
it would reference this ID and the publisher table.

211
00:14:54.510 --> 00:15:00.660
And with this, we have many to one relationship, many to one relationship in the sense here, many

212
00:15:00.660 --> 00:15:07.680
records, many, many publisher records would more than one publish publisher record would correspond

213
00:15:07.680 --> 00:15:11.520
to exactly one publisher within this table.

214
00:15:12.000 --> 00:15:18.750
What it means, in other words, is a single publisher can publish many books and they call it as many

215
00:15:18.750 --> 00:15:19.680
to one relationship.

216
00:15:19.680 --> 00:15:24.270
So if you look at from this side, from book to publisher, it would be many to one from the other way.

217
00:15:24.270 --> 00:15:25.530
It would be one to many.

218
00:15:26.250 --> 00:15:27.450
So that's one thing.

219
00:15:27.480 --> 00:15:33.300
Now, similarly, let's also assume that we have authors biography.

220
00:15:33.510 --> 00:15:39.300
Then we once again, we have this a similar situation, we call it as a partial dependency.

221
00:15:39.480 --> 00:15:41.700
So we have the author here.

222
00:15:41.940 --> 00:15:43.020
Author name.

223
00:15:43.380 --> 00:15:46.560
And we are saying that there is some biography associated with the author.

224
00:15:46.710 --> 00:15:51.300
So the dependency is author name and the author bio.

225
00:15:51.300 --> 00:15:57.510
So the author bio is dependent on the author name, an author name as a proper subset of this particular

226
00:15:57.510 --> 00:15:57.980
candidate.

227
00:15:58.010 --> 00:16:02.460
KEY And so we once again have some redundant data, and so we need to split that table.

228
00:16:02.460 --> 00:16:08.940
Furthermore, and for that we are introducing two more tables called author and book underscore author.

229
00:16:09.120 --> 00:16:14.700
So Author Table will have the name and bio just like the publisher and the book underscore.

230
00:16:14.700 --> 00:16:19.110
Author is what will capture the relationship between book and author.

231
00:16:19.590 --> 00:16:25.170
But here we have we have a different kind of relationship called many to Many, because a particular

232
00:16:25.170 --> 00:16:30.660
book can be written by multiple authors and a single author can also write multiple books.

233
00:16:30.960 --> 00:16:36.510
So in order to capture that kind of a relationship, it's called as a many to many relationship, we

234
00:16:36.510 --> 00:16:42.270
need to introduce a linking table, a relationship table, and that is what we have here and here.

235
00:16:42.270 --> 00:16:47.610
The book Underscore ID is a foreign reference to the ID in the book table and author underscore ID is

236
00:16:47.610 --> 00:16:50.010
a foreign reference to the ID in this field.

237
00:16:51.180 --> 00:16:54.120
If it's confusing, I think it will be it will get clear later on.

238
00:16:54.120 --> 00:17:01.260
But this example is similar to the book and user example we have seen in the introductory lecture where

239
00:17:01.260 --> 00:17:07.200
we had user and book and we also had another table called book underscore user or user underscore book,

240
00:17:07.200 --> 00:17:13.530
which was capturing the relationship about our users bookmarking some book and they are also we have

241
00:17:13.530 --> 00:17:15.869
the many to many relationship, so many to many.

242
00:17:15.869 --> 00:17:21.180
We are going to introduce a relationship table in this way and that is also something called as 1 to

243
00:17:21.180 --> 00:17:24.839
1 relationship and that you would normally have.

244
00:17:26.140 --> 00:17:26.270
Okay.

245
00:17:26.410 --> 00:17:32.110
For one instance where you would have that as for instance, here you have the user table.

246
00:17:32.140 --> 00:17:38.380
Now let's assume that there are 50 other columns in this table, and so you have a lot of data, but

247
00:17:38.380 --> 00:17:41.010
then the username and password is also stored here.

248
00:17:41.020 --> 00:17:47.410
So every time that you want to verify some username and password, you want to validate the username

249
00:17:47.410 --> 00:17:47.950
and password.

250
00:17:47.950 --> 00:17:50.800
You would have to look into this huge table.

251
00:17:50.830 --> 00:17:55.750
So instead of doing that, what you can do is you can split this user table into two tables.

252
00:17:55.750 --> 00:18:02.230
And one of the tables you will just have the email and the password, and in the other table you will

253
00:18:02.230 --> 00:18:03.340
have the rest of the data.

254
00:18:03.700 --> 00:18:08.920
Similarly, sometimes certain data, some data can be of very large data type.

255
00:18:08.920 --> 00:18:14.800
Like if you are storing an image, then it it occupies a lot of space and you don't want to access that

256
00:18:14.800 --> 00:18:15.950
particular table.

257
00:18:15.970 --> 00:18:22.330
So in which case, you can store the image in a separate table, but you will still maintain the identical

258
00:18:22.630 --> 00:18:23.620
primary key.

259
00:18:23.890 --> 00:18:26.290
So both tables will have same primary keys.

260
00:18:27.220 --> 00:18:32.590
So there it will be a 1 to 1 mapping between between the two tables, between the rows in the two tables.

261
00:18:32.590 --> 00:18:38.770
So you would have this row and in another table you would also have a similar table with fewer number

262
00:18:38.770 --> 00:18:39.670
of columns.

263
00:18:40.360 --> 00:18:42.910
So that's the 1 to 1 relationship.

264
00:18:44.710 --> 00:18:46.750
Now let's go back to normalization.

265
00:18:46.750 --> 00:18:48.460
So that's the second normal form.

266
00:18:48.460 --> 00:18:51.310
And if it is in second normal form, it's also in first normal form.

267
00:18:51.310 --> 00:19:00.640
So you're basically reducing the redundancy by splitting the table into multiple smaller tables.

268
00:19:01.210 --> 00:19:03.160
Now the next one is big enough.

269
00:19:03.160 --> 00:19:08.530
Actually, the next one is three enough, but to understand it easily, we can first look at CnF.

270
00:19:08.980 --> 00:19:12.190
So now to understand we see boys code normal form.

271
00:19:12.190 --> 00:19:14.350
Let's assume we have a new column called Batch.

272
00:19:14.350 --> 00:19:19.990
Let's say the book table has a new column called Batch and the batch can be something like this, like

273
00:19:19.990 --> 00:19:22.210
a bestseller or all time top hundred.

274
00:19:22.210 --> 00:19:27.700
So the book, if a book has this thing, this particular batch, it means that it's a bestseller.

275
00:19:28.090 --> 00:19:31.150
So now let's assume that it depends on rating.

276
00:19:31.360 --> 00:19:36.010
So the functional dependency is rating followed by the batch.

277
00:19:36.010 --> 00:19:44.500
So batch is dependent on rating, but in BC enough for a table to be in CnF, there can be only such

278
00:19:44.500 --> 00:19:45.700
kind of dependencies.

279
00:19:45.700 --> 00:19:51.070
You will have the key on the left side and on the right side you will have non prime attribute.

280
00:19:51.100 --> 00:19:56.650
Non prime attribute is just an attribute which is not part of any of the keys.

281
00:19:57.370 --> 00:20:00.490
So we know that we have these keys here, the candidate keys.

282
00:20:01.060 --> 00:20:07.180
If the right side attribute effort is not part of any of that, those keys, then you have, then you

283
00:20:07.180 --> 00:20:10.180
have a non prime attribute on this side.

284
00:20:10.630 --> 00:20:18.880
And so we in CnF all of the functional dependencies should be like this, but in this case rating is

285
00:20:18.880 --> 00:20:20.080
not is not a key.

286
00:20:20.380 --> 00:20:27.790
And because of that the book relation book table is not would violate CnF because there is going to

287
00:20:27.790 --> 00:20:29.050
be some redundant data.

288
00:20:29.050 --> 00:20:32.080
So you have rating and you have batch.

289
00:20:32.170 --> 00:20:37.420
So whenever the same rating repeats, the batch is also going to repeat.

290
00:20:38.370 --> 00:20:38.610
Okay.

291
00:20:38.610 --> 00:20:39.660
So that's the thing.

292
00:20:40.230 --> 00:20:44.610
So for this, the decomposition would be quite similar to the earlier case.

293
00:20:44.610 --> 00:20:49.920
So where you would create a new table, let's call it, as rating and you would have rating underscore

294
00:20:49.920 --> 00:20:50.520
badge.

295
00:20:50.700 --> 00:20:56.160
And within the book table, we will use a rating underscore ID which will reference this particular

296
00:20:56.160 --> 00:20:56.700
ID.

297
00:20:56.970 --> 00:20:57.360
Okay.

298
00:20:57.600 --> 00:21:05.250
Now, with that, the relationship as the relation book relation is redundant, free and typically any

299
00:21:05.400 --> 00:21:12.330
relations, if all your relations are in BCD form, then it is very unlikely to have any redundancies.

300
00:21:12.480 --> 00:21:13.440
So that's the thing.

301
00:21:13.440 --> 00:21:16.350
You would try to be in this kind of a normal form.

302
00:21:16.560 --> 00:21:24.810
Now three and F if a relation is an F, it is also in three NF onto NF on one NF, but if it is, there

303
00:21:24.810 --> 00:21:30.540
can be a chance when a relationship is not in BNF, but the relation is in three NF and in three NF

304
00:21:30.540 --> 00:21:32.040
there can be some redundancy.

305
00:21:32.070 --> 00:21:37.320
Now if we for the same functional dependency badge badges a non prime attribute.

306
00:21:37.770 --> 00:21:43.680
Now if we assume that this badge is part of some other key, now let's say there is a key called title

307
00:21:43.680 --> 00:21:47.940
publication here and badge, which means that badge is part of this key.

308
00:21:48.360 --> 00:21:55.820
And that case, this relation would satisfy three NF So it's not in NF, but it is in three NF.

309
00:21:56.760 --> 00:21:59.310
So it is going to violate NF.

310
00:21:59.700 --> 00:22:06.240
In that case, there can be some redundancy because the rating and badges there and as the rating is

311
00:22:06.240 --> 00:22:08.700
going to repeat, badge is also going to repeat.

312
00:22:09.090 --> 00:22:13.350
Sometimes we might have to compromise with this and we need to allow this.

313
00:22:14.160 --> 00:22:20.280
So it may not be in big enough, but we may have to stick with three NF and sometimes we may even have

314
00:22:20.280 --> 00:22:28.380
to stick with lower normal forms which are lower than three NF and that also we do it for we do it for

315
00:22:28.380 --> 00:22:29.510
performance reasons.

316
00:22:29.520 --> 00:22:35.350
So sometimes we may have, we may allow certain redundancy for performance reasons.

317
00:22:35.370 --> 00:22:42.360
So normalization, while it is good where it reduces redundancy in certain cases for certain queries,

318
00:22:42.510 --> 00:22:46.380
it might be slow to produce the results for the user to see.

319
00:22:46.830 --> 00:22:53.400
And so if there if those such kind of queries are often, then the system response time will be slow.

320
00:22:53.670 --> 00:23:00.650
So in order to avoid that, we programmers are developers will generally allow some redundancy also.

321
00:23:00.660 --> 00:23:02.660
But again, it depends on the project.

322
00:23:02.670 --> 00:23:08.250
But normally you would try to aim to achieve something like a redundant free data.

323
00:23:08.490 --> 00:23:12.990
But if that's not possible, then this is then you might accommodate some redundancy.

324
00:23:13.620 --> 00:23:16.290
So essentially that's what we have, that's normalization.

325
00:23:16.290 --> 00:23:24.030
And you would always look for your tables to be in certain normalized form, and that normal form would

326
00:23:24.030 --> 00:23:26.790
tell the degree of redundancy within the relation.

327
00:23:27.930 --> 00:23:29.670
So essentially that's what it is.

328
00:23:29.670 --> 00:23:32.100
And you want to address the redundancies.

329
00:23:32.100 --> 00:23:39.060
We generally we decompose the tables into smaller tables so that those smaller tables would not violate

330
00:23:39.180 --> 00:23:41.240
the normal form that we are looking at.

331
00:23:41.250 --> 00:23:43.950
And so the redundancy will not be there.

332
00:23:44.670 --> 00:23:50.490
But practically you would your relationship relations would either be in CnF, F, R, three and F,

333
00:23:50.490 --> 00:23:54.120
so that's what you would try to you would aim to achieve.

334
00:23:54.600 --> 00:23:55.840
So that's about it.

335
00:23:55.860 --> 00:24:00.680
So that's I think that's a nice introduction to database designing.

336
00:24:00.690 --> 00:24:04.800
And next we will look at a database design for our project itself.

337
00:24:04.800 --> 00:24:10.200
And if you're interested, you can read more about it by either Googling or mostly you can purchase

338
00:24:10.200 --> 00:24:16.560
the book that I have specified in their introductory lecture, and they have more in-depth description

339
00:24:16.560 --> 00:24:18.030
about these forms.

340
00:24:18.030 --> 00:24:23.340
And normally many developers are also kind of confused between BCC and F and three and F, but hopefully

341
00:24:23.340 --> 00:24:26.280
you got some fair idea about them.

342
00:24:26.730 --> 00:24:27.010
That's it.

343
00:24:27.030 --> 00:24:30.960
Thank you and happy coding and see you in the next lecture.

