1
00:00:01,140 --> 00:00:04,440
So that's the end of the second chapter through this chapter.

2
00:00:04,530 --> 00:00:08,050
We got started with the Java Language basics.

3
00:00:08,160 --> 00:00:13,440
We have taken a top down approach in learning the concepts that is we first introduced a concept of

4
00:00:13,440 --> 00:00:18,350
object oriented programming by explaining what classes and objects are.

5
00:00:18,750 --> 00:00:24,030
We studied variables methods and constructors in detail which are the chord building blocks of a class

6
00:00:24,030 --> 00:00:24,980
.

7
00:00:25,050 --> 00:00:29,360
We also did our first date structure of course which is an array.

8
00:00:29,440 --> 00:00:34,160
Now let's just look at some of the important points we covered in this chapter.

9
00:00:34,740 --> 00:00:40,350
We started with looking at object oriented programming which helps model real world scenarios in a more

10
00:00:40,350 --> 00:00:41,900
natural way.

11
00:00:42,790 --> 00:00:50,490
Angela An object is used to represent a real world and to be like a student and objects are defined

12
00:00:50,490 --> 00:00:58,040
using a class that is Classes like a blueprint and objects are instances of a class.

13
00:00:58,050 --> 00:00:59,780
Next we look at variables.

14
00:00:59,850 --> 00:01:06,570
A variable is simply a container that holds something and the type of data that a variable can hold

15
00:01:06,990 --> 00:01:12,330
is defined as the variable creation by which set off by stating the variables type.

16
00:01:12,570 --> 00:01:18,210
So once a variable type is defined it can only hold data of that particular type and it cannot hold

17
00:01:18,300 --> 00:01:20,020
any other type of data.

18
00:01:20,320 --> 00:01:28,150
And due to this is refer to as it is tactically type language it variable's type can be either a primitive

19
00:01:28,150 --> 00:01:35,660
type audit class name and we saw that in Java how eight primitive better days.

20
00:01:36,060 --> 00:01:41,760
And we also saw that there are three kinds of variables instance Dodik and local variables instance

21
00:01:41,760 --> 00:01:48,060
variables are unique to each object and they Hallen object stayed static with it was a class variables

22
00:01:48,240 --> 00:01:51,450
that are shared across all objects of the class.

23
00:01:51,690 --> 00:01:58,200
Finally local variables are defined within methods are constructors even method parameters and constructor

24
00:01:58,200 --> 00:02:01,870
parameters are considered as local variables.

25
00:02:02,330 --> 00:02:10,169
When X look that address in Java an array is an object that is it gets stored on the heap like any other

26
00:02:10,169 --> 00:02:12,310
regular Java object.

27
00:02:13,230 --> 00:02:18,960
And it is used to store a fixed number of elements of a single type and that type can be either promote

28
00:02:18,960 --> 00:02:27,640
do or object reference or support fast random access and by fast here we mean constant time.

29
00:02:27,990 --> 00:02:35,120
So accessing 1000th element would pick the same amount of time as accessing the Fifth Element relex

30
00:02:35,130 --> 00:02:43,290
look at methods which basically represent behavior and Jawa always uses pass by value mechanism while

31
00:02:43,290 --> 00:02:46,870
passing data methods even for object references.

32
00:02:46,890 --> 00:02:54,260
We know that it passes a copy of the memory address of the object within that method overloading word

33
00:02:54,300 --> 00:02:55,710
within the same class.

34
00:02:55,770 --> 00:03:01,800
We can have multiple methods with the same name but different parameterless to be considered a valid

35
00:03:01,800 --> 00:03:06,600
overload method parameters must be different.

36
00:03:06,600 --> 00:03:14,070
Finally we look at constructors a concept that is invoked when an object is being created and it is

37
00:03:14,070 --> 00:03:20,850
typically used to initialize object state and we can have multiple ganster person in the same class

38
00:03:20,850 --> 00:03:21,430
.

39
00:03:21,450 --> 00:03:27,660
And this invocation statement is used to invoke an overloaded constructor and disintegrations statement

40
00:03:27,750 --> 00:03:32,880
must also be the first statement in that constructor and that's about it.

41
00:03:32,880 --> 00:03:37,810
Thanks for listening and we will continue learning more language basics in the next chapter.

