1
00:00:02,070 --> 00:00:02,950
Hello there.

2
00:00:02,969 --> 00:00:03,680
This is day to day.

3
00:00:04,110 --> 00:00:04,980
And welcome back.

4
00:00:05,380 --> 00:00:09,510
Let's look at a few more fundamental classes in the Java Lang package.

5
00:00:09,540 --> 00:00:12,060
And they're referred to as box perimeters.

6
00:00:12,660 --> 00:00:17,460
Now, as the name Box Primitive suggests, they have something to do with primitives.

7
00:00:18,120 --> 00:00:23,490
Essentially, each box primitive would hold a particular primitive value.

8
00:00:24,910 --> 00:00:29,650
In other words, a primitive value is being boxed inside a box.

9
00:00:29,650 --> 00:00:30,220
Primitive.

10
00:00:30,760 --> 00:00:35,860
Sometimes we also say that a primitive value is being rubbed inside a box.

11
00:00:35,860 --> 00:00:36,550
Primitive.

12
00:00:36,820 --> 00:00:43,030
And hence, for this reason, a box primitive is also sometimes referred to as a rubber cross.

13
00:00:43,870 --> 00:00:49,930
Now in Georgia, we know that we have these eight primitive types and each of them has an associated

14
00:00:49,930 --> 00:00:51,310
box primitive class.

15
00:00:51,970 --> 00:00:55,450
The box primitive corresponding to end is the integer class.

16
00:00:55,450 --> 00:00:57,220
And you can see the rest here.

17
00:00:57,910 --> 00:01:04,660
Now, if you recall when discussing in Primitive, we looked at the integer class in order to get the

18
00:01:04,690 --> 00:01:08,320
main and max value that an int variable can hold.

19
00:01:08,950 --> 00:01:14,440
You may also recall that we mentioned about box primitives when learning about switch statements.

20
00:01:14,890 --> 00:01:19,660
Let's now go ahead and learn more about them and we will also see how they are useful.

21
00:01:22,340 --> 00:01:25,280
Here we are in the basics demo class in the main method.

22
00:01:25,520 --> 00:01:29,450
So let's go ahead and create a new method called as boxed primitives.

23
00:01:31,190 --> 00:01:34,700
And let's allow eclipse to auto create this method.

24
00:01:36,170 --> 00:01:38,660
And it has created this template method.

25
00:01:39,110 --> 00:01:46,190
So what we are going to do is we are going to create a few box parameter instances and we said that

26
00:01:46,190 --> 00:01:48,980
a box primitive would hold a primitive value.

27
00:01:49,550 --> 00:01:50,810
So we will do that.

28
00:01:50,900 --> 00:01:56,570
So we will create different types of box primitives, like integer instance, double instance, and

29
00:01:56,570 --> 00:01:57,110
so on.

30
00:01:57,380 --> 00:02:03,020
And then we will also see how we can extract the primitive value from a created box.

31
00:02:03,020 --> 00:02:03,560
Primitive.

32
00:02:04,550 --> 00:02:06,350
So let's go ahead and do that.

33
00:02:06,590 --> 00:02:10,639
So the first thing is, let me create an integer box parameter.

34
00:02:10,729 --> 00:02:16,940
Let's name it as boxed int and we'll say integer dot.

35
00:02:17,890 --> 00:02:23,170
We will select this method called value off, which is a static method.

36
00:02:23,710 --> 00:02:29,560
And that's the reason we have the integer name, their integer class name, and we are going to pass

37
00:02:29,560 --> 00:02:34,930
our primitive and this is how an integer instance is created.

38
00:02:35,260 --> 00:02:37,510
So we are creating an integer instance.

39
00:02:38,020 --> 00:02:45,040
So you may be wondering why are we not using a constructor in order to construct the integer instance?

40
00:02:45,670 --> 00:02:52,540
Now this is called as value off is a static method and it's called as a static factory method.

41
00:02:53,310 --> 00:02:59,760
So sometimes, like any object, can also be created using such static factory methods.

42
00:03:00,120 --> 00:03:06,090
So just like the way factories construct something or create something, we can also have such factory

43
00:03:06,090 --> 00:03:08,820
methods to create our objects.

44
00:03:09,360 --> 00:03:10,830
So they are called us.

45
00:03:10,830 --> 00:03:17,700
Static factory methods and value of is a standard naming convention for such factory methods.

46
00:03:17,880 --> 00:03:20,670
And there are also other naming conventions.

47
00:03:20,670 --> 00:03:24,210
And we will look at them later in the naming conventions lecture.

48
00:03:25,050 --> 00:03:29,010
So there is a benefit in using value of instead of using constructor.

49
00:03:29,010 --> 00:03:30,990
So we can also use a constructor to do this.

50
00:03:30,990 --> 00:03:32,490
But we will look at that later.

51
00:03:32,490 --> 00:03:35,040
In a few minutes we will discuss that.

52
00:03:35,400 --> 00:03:37,050
So this is how you will do it.

53
00:03:37,050 --> 00:03:40,830
And just note that I'm going to refer to this as a box parameter.

54
00:03:40,830 --> 00:03:47,730
But sometimes the class itself is referred to as box parameter, but sometimes we may refer to this

55
00:03:47,730 --> 00:03:52,470
particular object as a box parameter, but the context should make it clear.

56
00:03:52,770 --> 00:03:56,910
So if it is box parameter, it can be this or it can be the class name also.

57
00:03:57,740 --> 00:04:01,860
So this is how you would create an integer object.

58
00:04:01,880 --> 00:04:04,700
So it is wrapping this particular value.

59
00:04:04,700 --> 00:04:05,210
Eight.

60
00:04:05,450 --> 00:04:08,930
Let's go ahead and create a few more box parameters.

61
00:04:08,930 --> 00:04:20,269
So let's say Boolean boxed boolean is equal to so every class box, primitive class has such a value

62
00:04:20,269 --> 00:04:21,260
of method.

63
00:04:21,589 --> 00:04:24,590
So let's pass a literal true here.

64
00:04:25,220 --> 00:04:29,360
So that's how you would create a boolean box parameter.

65
00:04:29,810 --> 00:04:32,960
Let's also create a couple of more a character and double.

66
00:04:33,770 --> 00:04:35,270
So that's the character.

67
00:04:37,330 --> 00:04:41,470
And we will say character dot value of.

68
00:04:43,100 --> 00:04:44,590
And let's say a character.

69
00:04:44,640 --> 00:04:45,470
Let's see.

70
00:04:51,470 --> 00:04:53,840
So that's how you would create box perimeters.

71
00:04:53,840 --> 00:04:55,820
And I think four of them should do.

72
00:04:56,180 --> 00:05:06,320
Let's go ahead and print the values, sets out control space and say boxed and just type in I and say

73
00:05:06,320 --> 00:05:10,730
control space and it will automatically create the variable here.

74
00:05:11,060 --> 00:05:13,010
And let me just copy all of this.

75
00:05:17,650 --> 00:05:18,420
Million.

76
00:05:21,520 --> 00:05:21,920
Okay.

77
00:05:22,270 --> 00:05:29,740
So we can just have this object references and println will print the corresponding values.

78
00:05:30,400 --> 00:05:33,100
Just don't worry how it's going to print the parameters.

79
00:05:33,100 --> 00:05:38,860
So internally it will invoke a method called to string on each of these object references, and they

80
00:05:38,860 --> 00:05:42,370
will return the primitive values that are being grabbed.

81
00:05:42,640 --> 00:05:44,410
So let's just run this.

82
00:05:45,920 --> 00:05:46,430
There you go.

83
00:05:46,430 --> 00:05:49,520
Eight True C and 25.5.

84
00:05:50,500 --> 00:05:53,890
Now there is also an overloaded.

85
00:05:55,150 --> 00:05:56,320
Value of method.

86
00:05:56,320 --> 00:06:03,280
So if I say integer dot value off, you can see that there are overloaded methods here.

87
00:06:03,280 --> 00:06:05,410
So this one is taking an end.

88
00:06:05,410 --> 00:06:07,090
So which we have seen earlier.

89
00:06:07,360 --> 00:06:09,220
So this one is taking a string.

90
00:06:09,220 --> 00:06:10,900
So let's pass a string here.

91
00:06:10,900 --> 00:06:17,920
So let's just pass the string eight this time a string literal eight and let's limit us boxed into one.

92
00:06:18,640 --> 00:06:25,600
OC So there are certain cases when certain instances when you might want to use this one, this particular

93
00:06:25,600 --> 00:06:26,230
method.

94
00:06:27,290 --> 00:06:27,720
Okay.

95
00:06:27,740 --> 00:06:29,690
So this is also valid.

96
00:06:29,810 --> 00:06:30,350
All right.

97
00:06:30,620 --> 00:06:32,540
But the thing is.

98
00:06:33,520 --> 00:06:39,280
Such a method is there in all of the boxed primitives except the character.

99
00:06:40,200 --> 00:06:46,770
Plus, except for the character class, the rest of the box primitive classes have this overloaded value

100
00:06:46,770 --> 00:06:47,580
of method.

101
00:06:47,760 --> 00:06:49,320
So just keep that in mind.

102
00:06:49,680 --> 00:06:54,360
But also just note that we cannot have.

103
00:06:56,160 --> 00:06:57,840
Let me call it invalid.

104
00:06:59,600 --> 00:07:03,200
This needs to be a valid numeric value.

105
00:07:03,200 --> 00:07:05,390
So you cannot have something like this.

106
00:07:05,390 --> 00:07:06,920
So this is invalid.

107
00:07:06,920 --> 00:07:12,710
So it's not giving a compilation error, but when we execute it, you will see that we will get this

108
00:07:12,710 --> 00:07:19,130
particular error called number format exception because the number format is not right.

109
00:07:19,520 --> 00:07:20,870
So this is invalid.

110
00:07:20,870 --> 00:07:22,250
So you cannot do this.

111
00:07:23,570 --> 00:07:28,820
So this is one way of creating objects, the static factory methods.

112
00:07:28,820 --> 00:07:37,160
Now there is also the regular way in which we can construct an object so it will be boxed and to so

113
00:07:37,160 --> 00:07:45,740
we'll say new integer and let's say eight, but we shouldn't be doing this.

114
00:07:45,740 --> 00:07:47,150
This is not a recommended way.

115
00:07:47,270 --> 00:07:53,960
So let's go into the API of the integer class and let's see what they have or there.

116
00:07:53,960 --> 00:08:00,590
So just type in integer and whichever is the latest Java version right now it is Java 14, so it's Java

117
00:08:00,620 --> 00:08:01,340
14.

118
00:08:01,610 --> 00:08:03,290
And let's click on this.

119
00:08:03,290 --> 00:08:04,790
You'll see these results.

120
00:08:04,790 --> 00:08:06,140
So just click on this one.

121
00:08:06,860 --> 00:08:12,860
Okay, so this is the integer class and there are some fields here we already know about max value and

122
00:08:12,860 --> 00:08:13,670
min value.

123
00:08:13,670 --> 00:08:15,170
We have used it earlier.

124
00:08:16,440 --> 00:08:18,060
And here are the two constructors.

125
00:08:18,060 --> 00:08:20,150
So there are overloaded constructors.

126
00:08:20,160 --> 00:08:26,220
So this one is taking an integer int and this is what we used and this one is taking a string and it

127
00:08:26,220 --> 00:08:28,260
says they are deprecated.

128
00:08:28,290 --> 00:08:31,470
It says it is really appropriate to use this constructor.

129
00:08:31,470 --> 00:08:32,940
So let's click on that.

130
00:08:33,539 --> 00:08:41,070
So deprecated implies that it is not recommended to use this particular constructor, which means that

131
00:08:41,070 --> 00:08:47,190
there is an alternate way to achieve the same theme to create the object and which we have already used,

132
00:08:47,190 --> 00:08:48,770
which is the value of method.

133
00:08:48,780 --> 00:08:52,440
So it says it says it is really appropriate to use this constructor.

134
00:08:52,440 --> 00:08:55,470
So there is this alternate way and deprecated.

135
00:08:55,470 --> 00:09:02,040
It also implies that it might be removed in the future, so that particular constructor or method may

136
00:09:02,040 --> 00:09:03,300
be removed in the future.

137
00:09:03,300 --> 00:09:05,850
So it is supported for backward compatibility.

138
00:09:06,180 --> 00:09:13,020
So it says it is this particular alternate method is generally a better choice as it is likely to yield

139
00:09:13,020 --> 00:09:16,380
significantly better space on time performance.

140
00:09:16,620 --> 00:09:21,600
So it's going to be it can be more efficient and it can also save some memory.

141
00:09:21,990 --> 00:09:23,190
So that's what it is.

142
00:09:23,190 --> 00:09:29,820
So let's go back here and let's see why this can be better than this.

143
00:09:30,270 --> 00:09:32,820
So this is the static factory method.

144
00:09:32,820 --> 00:09:35,010
So I'm just clicking f three here.

145
00:09:35,010 --> 00:09:39,240
So it takes me to that particular method within the integer class.

146
00:09:39,600 --> 00:09:44,820
So what is happening is so this is the, the primitive that is getting passed.

147
00:09:44,850 --> 00:09:52,800
Now if that primitive is between these range low and high, so it is -128 and positive 127.

148
00:09:52,800 --> 00:09:58,020
In that case it is going to return a pre constructed integer object.

149
00:09:58,020 --> 00:10:04,290
So the integer object has already been created, has been pre constructed, and it's going to return

150
00:10:04,650 --> 00:10:08,550
if the value is between -128 and 127.

151
00:10:08,550 --> 00:10:15,600
So for any value in between that, there is already an integer object that has been created and it is

152
00:10:15,600 --> 00:10:17,580
stored in some array and it is returning that.

153
00:10:17,580 --> 00:10:22,920
But if the value falls out of this range, then it is creating a new integer object.

154
00:10:23,460 --> 00:10:31,080
So it is caching these integer instances because there is a high possibility that you may be passing

155
00:10:31,500 --> 00:10:36,180
a value that falls within that range -128 and positive 127.

156
00:10:36,180 --> 00:10:40,350
So that particular operation might be often might happen often.

157
00:10:40,800 --> 00:10:48,240
So we don't want to keep creating integer objects every time a value within that range is being passed.

158
00:10:48,690 --> 00:10:55,890
So that way by pre creating, we are utilizing those pre created instances and that is saving us some

159
00:10:55,890 --> 00:10:57,180
time and space.

160
00:10:57,810 --> 00:10:59,460
So it's like a string pool.

161
00:11:00,090 --> 00:11:04,350
So that's the benefit of using this such a factory method.

162
00:11:04,980 --> 00:11:12,300
Static factory methods are allowing us to improve the performance by doing something like this instead

163
00:11:12,300 --> 00:11:14,280
of using a constructor right away.

164
00:11:14,280 --> 00:11:18,090
But we are using this constructor if the value falls outside of the range.

165
00:11:18,420 --> 00:11:23,400
And because of this there is this particular item and the effect of Java.

166
00:11:23,430 --> 00:11:30,570
In fact it is a very fast item and it says consider static factory methods instead of constructors and

167
00:11:30,570 --> 00:11:32,250
that is one of the benefits.

168
00:11:32,250 --> 00:11:36,570
So there are other benefits, but we cannot discuss it at this point of time.

169
00:11:37,410 --> 00:11:41,940
Maybe not appropriate for this course also, but at this point, I think it's good enough that we know

170
00:11:41,940 --> 00:11:46,020
at least this particular advantage of using a static factory method.

171
00:11:46,380 --> 00:11:49,470
So we are using some pre constructed instances here.

172
00:11:50,160 --> 00:11:52,710
So that's effective Java first item.

173
00:11:53,100 --> 00:11:54,930
So you should not be using this.

174
00:11:54,960 --> 00:11:58,200
Now let's go ahead and unwrap the values.

175
00:11:59,120 --> 00:12:05,720
Let's just say and let's call it as perimeter ain't equal to.

176
00:12:05,990 --> 00:12:10,240
So the boxed end that we created was named as boxed end.

177
00:12:10,250 --> 00:12:13,010
So let's say boxed end dot.

178
00:12:13,310 --> 00:12:17,000
So there is this method called int value.

179
00:12:17,990 --> 00:12:20,240
And that would return an end.

180
00:12:20,690 --> 00:12:22,850
Similarly, there is also.

181
00:12:24,990 --> 00:12:27,630
So we had the boxed bullion.

182
00:12:28,140 --> 00:12:35,670
So we'll say bullion value and it will return the wrapped bullion value.

183
00:12:35,820 --> 00:12:37,440
So this needs to be bullion.

184
00:12:37,920 --> 00:12:44,760
Similarly, if we want the car that was wrapped inside the box, primitive, so we'll say car, let's

185
00:12:44,760 --> 00:12:47,370
say primitive car.

186
00:12:47,370 --> 00:12:53,010
And it was boxed to a controlled space, not car value.

187
00:12:53,130 --> 00:12:56,730
So when you do this, you get the value here.

188
00:12:57,120 --> 00:12:59,490
So it is called us int value.

189
00:12:59,490 --> 00:13:02,550
So it's the the method names are quite similar.

190
00:13:02,550 --> 00:13:06,450
So it is like type value and it would return a type.

191
00:13:06,450 --> 00:13:09,960
So it's not returning an integer but actually it's returning an int.

192
00:13:09,960 --> 00:13:14,900
So this is returning a boolean primitive that God stored in this particular box parameter.

193
00:13:15,600 --> 00:13:18,420
So and if we print, we will get those values again.

194
00:13:18,420 --> 00:13:24,300
So let me just print for the first one, which is primitive and so I can just run it.

195
00:13:24,300 --> 00:13:31,020
So for double it would be boxed double the variable name dot double value, right?

196
00:13:34,380 --> 00:13:37,200
Say the aid got extracted from the perimeter.

197
00:13:37,260 --> 00:13:40,200
So that is how you would unwrap.

198
00:13:40,960 --> 00:13:42,160
The primitive.

199
00:13:42,160 --> 00:13:43,270
The primitive.

200
00:13:44,260 --> 00:13:45,450
So that's about it.

201
00:13:45,460 --> 00:13:47,860
So in the next lecture, let me just stop here.

202
00:13:47,860 --> 00:13:53,530
And the next lecture we will explore few more methods, but more importantly, we will discuss some

203
00:13:53,530 --> 00:13:59,830
use cases where box primitives are used so we know how to create them and how to unwrap them.

204
00:13:59,830 --> 00:14:00,850
But that's not it.

205
00:14:00,850 --> 00:14:06,100
We need to know where they are useful, so we will look at a couple of use cases where they are, where

206
00:14:06,100 --> 00:14:08,770
they are typically used, and that should be very helpful.

207
00:14:08,770 --> 00:14:12,580
And in the process we will look at other methods and box parameters.

208
00:14:12,610 --> 00:14:14,800
Thank you and see you in the next lecture.

