WEBVTT
1
00:00:01.040 --> 00:00:07.190
Before moving on, let's not briefly discuss a relevant and a very important topic called method binding.

2
00:00:07.670 --> 00:00:10.640
It is related to how methods get executed.

3
00:00:11.370 --> 00:00:16.770
I found that even many senior level engineers do not have a good understanding of this topic.

4
00:00:17.250 --> 00:00:20.430
But we will get to the bottom of this through a very in-depth demo.

5
00:00:21.220 --> 00:00:27.550
While discussing polymorphism, we indirectly discuss part of method binding without making any explicit

6
00:00:27.550 --> 00:00:28.390
reference to it.

7
00:00:28.990 --> 00:00:35.500
For example, we said that compiler looks at the reference type to know whether or not we can invoke

8
00:00:35.500 --> 00:00:38.110
a particular method on an object reference.

9
00:00:38.500 --> 00:00:44.500
And we also said that JVM looks at the object type to know which method to execute at runtime.

10
00:00:44.890 --> 00:00:46.570
So that's all method binding.

11
00:00:47.170 --> 00:00:52.780
However, it was discussed in the context of instance methods, but we also have static methods.

12
00:00:53.140 --> 00:00:57.180
So there are some more details which we need to know with regards to method binding.

13
00:00:57.190 --> 00:00:58.540
And let's check them out now.

14
00:01:00.250 --> 00:01:03.010
Method binding is associated with every method.

15
00:01:03.850 --> 00:01:06.970
So every time you see a method call, there is method binding.

16
00:01:07.390 --> 00:01:13.690
And as the name suggests, it is the mechanism of binding, a method called to the declaration and the

17
00:01:13.690 --> 00:01:19.360
implementation of the method being called not the declaration would be the method signature, while

18
00:01:19.360 --> 00:01:23.800
method implementation is the methods body which gets executed at runtime.

19
00:01:24.570 --> 00:01:27.390
So Method Call is associated with these two things.

20
00:01:27.390 --> 00:01:31.110
One is method signature and the other is method implementation.

21
00:01:31.860 --> 00:01:34.410
And these are two distinct steps of method binding.

22
00:01:34.440 --> 00:01:40.200
And we can refer to them as method signature binding and method implementation binding.

23
00:01:40.800 --> 00:01:44.820
And let's look at both of them, beginning with the method signature binding.

24
00:01:46.440 --> 00:01:52.740
Once the compiler encounters a method invocation statement, it checks of the reference type of the

25
00:01:52.740 --> 00:01:55.590
object reference on which the method has been invoked.

26
00:01:55.620 --> 00:02:01.290
Includes a compatible method which would include same or compatible parameters.

27
00:02:02.330 --> 00:02:07.580
And if it finds one, then it writes that method signature information into the byte code.

28
00:02:08.180 --> 00:02:13.910
Otherwise we know that it throws a compiler error and this whole process can be referred to as method

29
00:02:13.910 --> 00:02:14.960
signature binding.

30
00:02:15.970 --> 00:02:21.820
And this is always done by the compiler and it doesn't matter if the method is static or instance.

31
00:02:23.520 --> 00:02:23.850
Next.

32
00:02:23.850 --> 00:02:29.940
When it comes to which method to execute at runtime, the decision can be made by either compiler or

33
00:02:29.940 --> 00:02:34.050
by JVM at runtime, depending on the kind of method in context.

34
00:02:34.770 --> 00:02:39.450
If the method is static, then the decision is made at compile time itself and it is still based on

35
00:02:39.450 --> 00:02:40.410
reference type.

36
00:02:41.460 --> 00:02:46.980
Now if it is an instance method, then the decision is made at runtime by the team and it is based on

37
00:02:46.980 --> 00:02:48.000
the object type.

38
00:02:48.720 --> 00:02:54.450
Recall how JV team picks the most specific version of the method in the inheritance tree, starting

39
00:02:54.450 --> 00:02:56.970
from the object on which the method is invoked.

40
00:02:58.530 --> 00:03:04.830
So basically binding or static methods is completed at compile time itself, which is based on the reference

41
00:03:04.830 --> 00:03:05.400
type.

42
00:03:05.430 --> 00:03:07.110
And it completely makes sense.

43
00:03:07.470 --> 00:03:13.320
That's because static methods are class methods and they don't have anything to do with objects which

44
00:03:13.320 --> 00:03:14.910
are created only at runtime.

45
00:03:15.510 --> 00:03:22.320
So which method to execute at runtime is decided at compile time itself on such a kind of binding is

46
00:03:22.320 --> 00:03:25.950
referred to as compile time binding or early binding.

47
00:03:27.310 --> 00:03:34.180
Whereas binding of instance methods has to wait till runtime as it is dependent on object type that

48
00:03:34.180 --> 00:03:37.000
is only based on the object and quantity at runtime.

49
00:03:37.180 --> 00:03:39.820
We would know what method is to be executed.

50
00:03:40.270 --> 00:03:44.500
Such a kind of binding is referred to as runtime binding or late binding.

51
00:03:45.310 --> 00:03:51.640
But keep in mind that even for instance methods, their method signatures are still bound at compile

52
00:03:51.640 --> 00:03:52.510
time itself.

53
00:03:53.420 --> 00:03:59.000
Lid binding is what we have seen earlier while learning about polymorphism and method overwriting.

54
00:04:00.310 --> 00:04:01.810
And here is the interesting thing.

55
00:04:01.840 --> 00:04:06.460
While instance methods are late, bounded instance variables are early bounded.

56
00:04:06.790 --> 00:04:09.850
That is, reference type is used to bind instance variables.

57
00:04:10.390 --> 00:04:13.960
Fields also include static variables and so they are also early bounded.

58
00:04:14.560 --> 00:04:19.390
So in Java, early binding applies to both static methods and fields.

59
00:04:20.110 --> 00:04:26.080
We will discuss about overriding of instance variables and that should clarify why instance variables

60
00:04:26.080 --> 00:04:27.340
are early bounded.

61
00:04:28.220 --> 00:04:32.900
And let's not do a short demo and it will give us a clear understanding of method binding.

62
00:04:33.380 --> 00:04:37.910
And we will look at byte code to see how this whole process of method binding works.

63
00:04:38.270 --> 00:04:41.060
So we are going to look at some under-the-hood details.

64
00:04:43.050 --> 00:04:49.470
In this demo, we will first look at method binding for static methods followed by method binding,

65
00:04:49.470 --> 00:04:51.030
for instance methods.

66
00:04:51.480 --> 00:04:54.690
After that, we will look at an interesting example.

67
00:04:55.080 --> 00:05:01.980
This time I'm showing the demo in my notepad plus plus editor as I want to run a tool from command line

68
00:05:02.160 --> 00:05:04.950
and the tool helps us in analyzing bytecode.

69
00:05:05.550 --> 00:05:07.560
So it's going to be an interesting demo.

70
00:05:07.590 --> 00:05:10.830
And let's begin with the static method binding.

71
00:05:11.570 --> 00:05:15.710
So these are the classes from our case study, and so we are just going to extend them.

72
00:05:16.100 --> 00:05:18.160
And here is user Java.

73
00:05:18.170 --> 00:05:21.620
I added this static method called static.

74
00:05:21.710 --> 00:05:27.830
It's named as static method and it has an empty body and with an user test java.

75
00:05:28.010 --> 00:05:32.990
So we're creating a staff object and the reference type is user and the object type is staff.

76
00:05:33.320 --> 00:05:37.400
And we are invoking this method, the new method called static method.

77
00:05:38.060 --> 00:05:40.550
Let's just go ahead and compile it.

78
00:05:43.190 --> 00:05:43.940
So it's compiled.

79
00:05:43.940 --> 00:05:44.540
Fine.

80
00:05:44.990 --> 00:05:47.720
Now we want to disassemble.

81
00:05:47.720 --> 00:05:49.310
We want to look at the byte code.

82
00:05:49.340 --> 00:05:51.170
And for that we need a Java.

83
00:05:51.170 --> 00:05:52.850
We need a disk assembler.

84
00:05:53.120 --> 00:05:56.810
So JDK comes with this assembler called Java P.

85
00:05:56.840 --> 00:05:57.650
It's a tool.

86
00:05:58.130 --> 00:06:02.180
You can find it it in your installation directory in the bin folder.

87
00:06:02.330 --> 00:06:08.660
So here I am in my installation directory in JDK 1.8 and in the bin folder I have this tool called Java

88
00:06:08.660 --> 00:06:13.250
P and it can be used to disassemble class files.

89
00:06:13.700 --> 00:06:19.280
The input to the tool would be a class file and it will show you the byte code, which includes the

90
00:06:19.280 --> 00:06:20.780
instructions for JVM.

91
00:06:21.110 --> 00:06:22.430
So let's just do that.

92
00:06:22.880 --> 00:06:28.430
It's Java B minus V, it's an option, which means it's verbose.

93
00:06:28.430 --> 00:06:29.930
You want to show everything.

94
00:06:29.930 --> 00:06:32.930
A lot of details regarding the byte code.

95
00:06:33.290 --> 00:06:42.020
And since the method invocation is done in user test, let's just say user test dot class.

96
00:06:42.020 --> 00:06:43.850
So it needs to be dot class.

97
00:06:45.890 --> 00:06:52.610
And it shows the bytecode of the body of each method within a user test class.

98
00:06:52.940 --> 00:06:58.640
And the interesting thing for us over here is this instruction.

99
00:06:58.670 --> 00:07:00.730
It's called invoke static.

100
00:07:00.740 --> 00:07:03.560
And it also has this number here.

101
00:07:03.890 --> 00:07:05.450
It's an index number.

102
00:07:05.720 --> 00:07:12.380
And this is just a comment which just says what this particular instruction is doing.

103
00:07:13.340 --> 00:07:21.290
So here it says that, you know, there is this new method called static method and it is within the

104
00:07:21.290 --> 00:07:22.190
user class.

105
00:07:22.190 --> 00:07:29.390
And so we are invoking this static method and this information, this empty parenthesis, indicates

106
00:07:29.390 --> 00:07:32.690
that the method does not take any parameters.

107
00:07:32.690 --> 00:07:35.630
And the V this is the return type of the method.

108
00:07:35.630 --> 00:07:37.040
In this case it is void.

109
00:07:37.460 --> 00:07:45.410
So all that information is represented here in this index, and it's an index into a table here at the

110
00:07:45.410 --> 00:07:47.220
top, which is called a constant pool.

111
00:07:47.240 --> 00:07:52.460
But let's not worry about it right now because we will discuss it in the internal chapter.

112
00:07:52.700 --> 00:08:01.340
But whatever is represented there at index ten within that table, the output of that is what you see

113
00:08:01.340 --> 00:08:01.880
here.

114
00:08:02.540 --> 00:08:08.030
But let's just scroll to the top and let's see how that index looks like.

115
00:08:08.480 --> 00:08:11.120
So this is called as a constant pool.

116
00:08:11.840 --> 00:08:12.680
Here it is.

117
00:08:12.950 --> 00:08:20.060
So Index ten is here and it is once again referring to two other index numbers, 29 and 39.

118
00:08:20.090 --> 00:08:24.140
So 29 is here, here.

119
00:08:24.140 --> 00:08:29.600
And it is simply the name of the class and 39 is here.

120
00:08:30.250 --> 00:08:36.159
And it includes the method name and the parameter information and the return type.

121
00:08:36.159 --> 00:08:40.990
So this information, the parameter information and the return type, it's called as the method descriptor

122
00:08:41.590 --> 00:08:42.159
families.

123
00:08:42.220 --> 00:08:43.270
That's how they call it.

124
00:08:46.540 --> 00:08:50.230
So this whole thing is called as the method specification.

125
00:08:50.260 --> 00:08:56.550
User dot static method and on this parentheses followed by the return type.

126
00:08:56.560 --> 00:08:58.600
So that's called this method specification.

127
00:08:58.600 --> 00:09:02.260
So you have the class name, you have the method name and you have the method descriptor, which is

128
00:09:02.260 --> 00:09:06.940
basically the parameter information along with the return type.

129
00:09:07.450 --> 00:09:10.930
So as you can see, the method signature binding has already been done.

130
00:09:11.530 --> 00:09:18.360
Now when a JVM encounters this, when we run this program on JVM and counters this instruction, invoke

131
00:09:18.370 --> 00:09:19.030
static.

132
00:09:19.360 --> 00:09:22.870
So it's going to look at number ten index.

133
00:09:22.870 --> 00:09:31.780
And since it's invoked static, it knows that static method must be inside this user class, which is

134
00:09:31.780 --> 00:09:32.800
the reference type.

135
00:09:32.950 --> 00:09:39.130
And it looks in that class and it finds that method and then it executes it.

136
00:09:39.400 --> 00:09:41.200
So that's early binding.

137
00:09:41.200 --> 00:09:49.000
So invoke static is telling the JVM that this is this is where the class is and you need to invoke it.

138
00:09:49.360 --> 00:09:51.390
Okay, so that's invoke static.

139
00:09:51.400 --> 00:09:54.230
Now next, let's look at invoke virtual.

140
00:09:54.250 --> 00:09:59.890
So if we go back into our class here, we are invoking post review method.

141
00:09:59.890 --> 00:10:05.800
Poster review method is an old method that which we already have in the staff class and it's override.

142
00:10:05.800 --> 00:10:10.090
It's an overriding method, so it overrides the posterior view and user class.

143
00:10:10.540 --> 00:10:12.010
So that's an instance method.

144
00:10:12.010 --> 00:10:14.440
Posterior view is an instance method, as you can see here.

145
00:10:14.890 --> 00:10:17.860
Now let's go back to our command prompt.

146
00:10:17.860 --> 00:10:22.270
And here at line 16, it says Invoke virtual.

147
00:10:22.420 --> 00:10:26.470
So invoke virtual means you are going to invoke an instance methods.

148
00:10:26.470 --> 00:10:27.940
So what does virtual mean?

149
00:10:27.970 --> 00:10:32.530
It means that the method to be invoked will be decided at runtime, right?

150
00:10:32.560 --> 00:10:34.660
That's how instance methods are invoked.

151
00:10:34.870 --> 00:10:38.980
But the method signature binding is already done by the compiler.

152
00:10:39.700 --> 00:10:46.360
So and then here the instruction says that if you go into this index number 12, it has all the information

153
00:10:46.360 --> 00:10:49.660
and that information is represented in this comment here.

154
00:10:49.660 --> 00:10:52.930
As you can see, it says it looks at the reference type.

155
00:10:52.930 --> 00:10:54.310
The reference type is user.

156
00:10:54.310 --> 00:11:00.460
And within that we have this post review method and the parameter is string because it's taking a review,

157
00:11:00.460 --> 00:11:04.420
text a string and the return type is the review object itself.

158
00:11:04.450 --> 00:11:12.400
We know that that's the method signature binding, but at runtime, when JVM encounters this instruction,

159
00:11:12.610 --> 00:11:19.690
it looks at the object type and it it already knows about the method signature because it is there in

160
00:11:19.690 --> 00:11:25.780
the byte code and then it searches the object, the, the class corresponding to the object type and

161
00:11:25.780 --> 00:11:28.570
it tries to find that particular method.

162
00:11:28.570 --> 00:11:32.530
If it is, if it finds it in the same class, it just executes it.

163
00:11:32.710 --> 00:11:37.900
Otherwise it starts climbing up the inheritance tree until it finds a method.

164
00:11:37.900 --> 00:11:41.530
So it tries to find a more specific method which we which we know how.

165
00:11:42.190 --> 00:11:44.380
I mean, we know the whole process, how it works.

166
00:11:44.500 --> 00:11:47.680
So that's how invoke virtual is going to work.

167
00:11:48.750 --> 00:11:51.540
That's the method binding that we just discussed.

168
00:11:51.930 --> 00:12:00.060
So basically invoke static is binding, whereas invoke virtual sense the actual execution, the decision

169
00:12:00.060 --> 00:12:02.480
on which method to execute is happening at runtime.

170
00:12:02.490 --> 00:12:03.720
It's laid binding.

171
00:12:05.160 --> 00:12:07.930
Next, let's look at an edge case example.

172
00:12:08.240 --> 00:12:09.630
It's an interesting example.

173
00:12:10.320 --> 00:12:11.160
Let me show that.

174
00:12:11.430 --> 00:12:16.700
So here I have this method in in user Java.

175
00:12:16.710 --> 00:12:18.580
It's an instance method.

176
00:12:18.600 --> 00:12:20.150
It's named as instance method.

177
00:12:20.160 --> 00:12:26.550
It takes a double parameter, double as a parameter, and it simply prints the name of the class and

178
00:12:26.550 --> 00:12:27.540
the name of the method.

179
00:12:27.570 --> 00:12:35.940
Now in staff I have a similar method instance method here and it takes instead of double, it's taking

180
00:12:35.940 --> 00:12:39.690
eight and once again printing the name of the class and the method name.

181
00:12:39.690 --> 00:12:46.590
But it's not an overriding method because the reason is the parameter here is int, whereas in the superclass

182
00:12:46.590 --> 00:12:47.350
it was double.

183
00:12:47.370 --> 00:12:50.130
So it needs to be the same parameter.

184
00:12:50.130 --> 00:12:52.530
The parameter type has to be same in order.

185
00:12:52.980 --> 00:12:55.740
It's one of the rules for overwriting, so it's not overwriting.

186
00:12:55.950 --> 00:13:00.630
Now in user test, let me just comment this out.

187
00:13:02.190 --> 00:13:04.500
Let me just here is the invocation statement.

188
00:13:04.680 --> 00:13:11.170
So here we are invoking instance method and we are passing a literal one, which is an end.

189
00:13:11.190 --> 00:13:12.510
So we are passing that.

190
00:13:12.810 --> 00:13:14.310
So what do you think?

191
00:13:14.310 --> 00:13:15.870
Which method would be invoked?

192
00:13:16.020 --> 00:13:21.660
Naturally, we would think that since it's an instance method, it would invoke this particular method

193
00:13:21.660 --> 00:13:27.750
in the staff class because it's the most specific version and it has in terms of the parameter.

194
00:13:27.750 --> 00:13:29.880
And the argument passed here is also end.

195
00:13:30.390 --> 00:13:32.820
However, that's that's not going to happen.

196
00:13:33.300 --> 00:13:36.270
And we will also see why the reason for that.

197
00:13:36.270 --> 00:13:37.980
So let me just compile this.

198
00:13:38.820 --> 00:13:42.780
Let me run user test.

199
00:13:43.530 --> 00:13:46.080
As you can see, it's not it's printing.

200
00:13:46.080 --> 00:13:49.890
The instance method in user class are not the one and staff class.

201
00:13:49.890 --> 00:13:52.410
So that's surprising information.

202
00:13:52.560 --> 00:13:58.860
And the reason for that is let me do a Java P on the user test class.

203
00:14:01.060 --> 00:14:04.480
Here is the main method and or the byte code within main method.

204
00:14:04.720 --> 00:14:07.360
And here is the interesting part.

205
00:14:07.360 --> 00:14:10.360
So it says invoke virtual because it's an instance method.

206
00:14:10.600 --> 00:14:16.450
But here it says instance method is an user class, which is okay.

207
00:14:16.450 --> 00:14:21.760
But the main thing is here it says the parameter is double.

208
00:14:21.850 --> 00:14:26.380
It did not say that it is end and the return type of course is void.

209
00:14:26.380 --> 00:14:33.010
And the reason for that is the compiler when it encounters this invocation statement.

210
00:14:33.130 --> 00:14:40.780
So it's going to look at user class and it's going to see if it can find a compatible method, if it

211
00:14:40.900 --> 00:14:42.580
can find a compatible method.

212
00:14:42.580 --> 00:14:44.680
So it first looks at the method name.

213
00:14:44.680 --> 00:14:52.510
So in user class it finds this method name and then it looks at if if there is a compatible parameter.

214
00:14:52.510 --> 00:14:57.310
So here the parameter is int in the invocation statement, but here the parameter is double.

215
00:14:57.520 --> 00:15:04.350
So it is a double is compatible because because of implicit it can be implicitly cast it to double.

216
00:15:04.360 --> 00:15:07.060
So that's that's a compatible type.

217
00:15:07.060 --> 00:15:14.980
So in the byte code it writes the method signature as instance method and it says the parameter has

218
00:15:14.980 --> 00:15:15.670
to be double.

219
00:15:16.120 --> 00:15:23.560
And so at runtime, you know, when JVM, when it looks at this instruction, it sees that, okay,

220
00:15:23.980 --> 00:15:27.400
here is the instance method and it looks at the object type.

221
00:15:27.460 --> 00:15:32.170
So it starts from staff and in stuff it does not find this method, right?

222
00:15:32.170 --> 00:15:37.690
Because there is an instance method, but in stuff it is, it has the parameter int so it climbs up

223
00:15:37.690 --> 00:15:42.820
the inheritance tree and it goes into user and there it sees that there is this instance method with

224
00:15:42.820 --> 00:15:45.940
the double as parameter and so it executes that.

225
00:15:45.940 --> 00:15:48.460
And so that's the reason why we are seeing that.

226
00:15:49.030 --> 00:15:56.350
So that's an interesting thing and the compiler tries to find a compatible method and that was the main

227
00:15:56.350 --> 00:15:58.810
reason for this strange behavior.

228
00:15:58.900 --> 00:16:04.900
And I also tested the same thing for for another method which is also named as instance method.

229
00:16:04.900 --> 00:16:10.780
But instead of primitive, we are having the user as the parameter and this is a user Java.

230
00:16:10.780 --> 00:16:14.860
And in staff we have stuff as a parameter which is a subtype.

231
00:16:14.860 --> 00:16:17.650
So it's just this exact same behavior.

232
00:16:19.040 --> 00:16:20.360
Truly we don't even have to test it.

233
00:16:20.360 --> 00:16:23.270
It's just it's just a instead of primitive, we are using the same.

234
00:16:24.640 --> 00:16:25.650
Reference type.

235
00:16:27.700 --> 00:16:31.630
So as you can see, it's printing user and instance method this time.

236
00:16:32.020 --> 00:16:33.280
So so that's it.

237
00:16:33.280 --> 00:16:34.360
That's an edge case.

238
00:16:34.570 --> 00:16:41.140
And most of this information is coming from an article written by Kishori Sharan, who is the author

239
00:16:41.140 --> 00:16:44.270
of Harnessing Java seven, which is one of the book's good books.

240
00:16:44.290 --> 00:16:50.950
So I'm going to upload that article in the resources section, or I'll be providing a link to that article.

241
00:16:51.400 --> 00:16:55.690
I'll be doing one of them so you can, if you are interested, you can look at them, but the entire

242
00:16:55.690 --> 00:16:59.200
information is presented here, so you don't have to do that.

243
00:16:59.200 --> 00:17:01.280
But if you're interested, you can check that out too.

244
00:17:01.660 --> 00:17:02.860
And that's it.

