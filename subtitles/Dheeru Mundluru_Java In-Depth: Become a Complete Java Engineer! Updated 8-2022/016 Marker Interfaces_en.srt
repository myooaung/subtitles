1
00:00:01,100 --> 00:00:02,000
Hi there.

2
00:00:02,029 --> 00:00:02,630
This is Dana.

3
00:00:03,680 --> 00:00:09,500
So far we looked at makes sense and representative interfaces, but there is also another kind of interface

4
00:00:09,500 --> 00:00:10,910
called marker interface.

5
00:00:10,910 --> 00:00:12,290
And let's see what it is.

6
00:00:14,100 --> 00:00:20,970
We know that interfaces declare one or more abstract methods indicating either some capability or some

7
00:00:20,970 --> 00:00:24,030
core functionality depending on the type of interface.

8
00:00:24,570 --> 00:00:26,910
But market interfaces are slightly different.

9
00:00:26,940 --> 00:00:29,940
They are simply interfaces without any methods.

10
00:00:29,970 --> 00:00:31,890
That is, they have empty body.

11
00:00:32,220 --> 00:00:34,260
However, they are still valuable.

12
00:00:34,740 --> 00:00:40,820
They are mainly used to market class as having certain property that is any class.

13
00:00:40,830 --> 00:00:47,070
Implementing the marker interface announces that it has the property defined by the market interface

14
00:00:47,160 --> 00:00:52,950
and this property is explained in plain English words in the Java dock of the marker interface, which

15
00:00:52,950 --> 00:00:55,800
basically is the marker interface specification.

16
00:00:56,670 --> 00:01:00,420
So it is only plain English words and there are no methods.

17
00:01:01,050 --> 00:01:06,420
The clients of the implementing class would then take some action based on the supported property.

18
00:01:07,310 --> 00:01:12,660
To take that action, clients may have to invoke some of the methods of the implementing class.

19
00:01:12,950 --> 00:01:16,010
That is the class that is implementing marker interface.

20
00:01:16,520 --> 00:01:21,410
Sometimes the marker interfaces specification explicitly mentions about these methods.

21
00:01:22,130 --> 00:01:25,370
Let's look at some example marker interfaces in the Java API.

22
00:01:27,180 --> 00:01:31,980
First example is a market interface called Random Access, which is from the Java package.

23
00:01:32,160 --> 00:01:37,200
Since it is from Java, we know that this interface is relevant to data structures.

24
00:01:38,060 --> 00:01:44,480
And as the name suggests, any class implementing this interface declares that it allows fast, random

25
00:01:44,480 --> 00:01:45,980
access of its elements.

26
00:01:46,220 --> 00:01:49,850
That is, the elements can be accessed randomly and quickly too.

27
00:01:50,360 --> 00:01:50,900
So fast.

28
00:01:50,900 --> 00:01:57,200
Random access is the property that is defined by random access interface and ArrayList is one class

29
00:01:57,200 --> 00:01:58,730
that implements this interface.

30
00:01:59,030 --> 00:02:04,610
And in doing so it is declaring that it supports fast, random access of its elements.

31
00:02:05,090 --> 00:02:10,580
We will soon see an example that shows how this information is used by one of the algorithms.

32
00:02:12,130 --> 00:02:17,200
Second example is a marker interface called Serialize Realizable, which is from the Java package.

33
00:02:17,770 --> 00:02:24,460
And as the name suggests, any class implementing this interface declares that it allows its objects

34
00:02:24,460 --> 00:02:25,720
to be serialized.

35
00:02:26,740 --> 00:02:31,030
So it is going to declare that it allows its instances to be serialized.

36
00:02:31,360 --> 00:02:37,750
We will look at serialization in detail in the IO chapter, but what it essentially means is it allows

37
00:02:37,750 --> 00:02:44,200
Java objects to be converted to byte streams so that the byte streams can be saved to hard disk for

38
00:02:44,200 --> 00:02:51,940
later serialization or byte streams can also be transmitted to a remote JVM where they can be serialized.

39
00:02:52,360 --> 00:02:57,760
This serialization is nothing but simply converting the byte streams back into Java object.

40
00:02:58,390 --> 00:03:03,520
So in this case a property defined by serialize able interface is serialize ability.

41
00:03:04,750 --> 00:03:09,760
Note that when we look closely, the semantics of the term property is a bit confusing here.

42
00:03:10,210 --> 00:03:16,660
In the first example, a class implementing random access is saying that it has the inbuilt capability

43
00:03:16,660 --> 00:03:22,810
to support fast random access, whereas with serialize able, the implementing class is simply saying

44
00:03:22,810 --> 00:03:27,310
that it is giving permission for its objects to be serialized.

45
00:03:27,910 --> 00:03:35,290
The actual capability to serialize objects belongs to an external class, so it is not with the class

46
00:03:35,290 --> 00:03:36,970
that is implementing the interface.

47
00:03:37,450 --> 00:03:43,570
So there is a class called object output stream in Java or IO package which does the actual serialization.

48
00:03:44,080 --> 00:03:49,750
But the implementing class can provide certain assistance in the serialization and the serialization

49
00:03:49,750 --> 00:03:50,380
process.

50
00:03:50,800 --> 00:03:53,140
But for now, let's not bother ourselves about that.

51
00:03:53,940 --> 00:03:57,180
So just note the difference in semantics for the term property.

52
00:03:57,210 --> 00:04:02,730
In one case it was capability, while in the other case it was more often giving permission.

53
00:04:04,390 --> 00:04:08,350
Now let's look at an example usage of the marker interface, random access.

54
00:04:08,440 --> 00:04:15,160
We have the static method called shuffle in the class collections, which is also part of the Java package.

55
00:04:15,520 --> 00:04:19,810
And this method takes a list and randomly shuffles its elements.

56
00:04:19,810 --> 00:04:21,550
As the name shuffle suggests.

57
00:04:21,820 --> 00:04:28,660
The shuffle algorithm applied depends on whether or not the input list implements random axis, and

58
00:04:28,660 --> 00:04:32,080
for that the instance of operator is used as shown here.

59
00:04:33,590 --> 00:04:39,980
If the input list implements random access, like in the case of ArrayList, then the shuffle algorithm

60
00:04:39,980 --> 00:04:41,720
is applied directly on the list.

61
00:04:42,050 --> 00:04:48,590
For this, the algorithm uses some of the methods of the input list, which would be ArrayList if ArrayList

62
00:04:48,590 --> 00:04:49,190
is passed.

63
00:04:50,370 --> 00:04:56,760
However, if the input list does not implement random access like in the case of link list, which also

64
00:04:56,760 --> 00:05:03,930
implements list interface, then the method uses an alternative algorithm to achieve reasonable performance.

65
00:05:04,380 --> 00:05:10,230
That's because without random access support, it would be expensive to apply the shuffle algorithm

66
00:05:10,230 --> 00:05:11,970
directly on the input list.

67
00:05:12,570 --> 00:05:17,850
So in this case, the logic is that first the list elements are copied into an array.

68
00:05:18,300 --> 00:05:21,460
Then the shuffle algorithm would be applied on that array.

69
00:05:21,480 --> 00:05:26,430
And finally, the shuffle elements are dumped back from the array into the list.

70
00:05:26,850 --> 00:05:33,090
So as you can see, the algorithm applied is based on whether or not the input list supports the random

71
00:05:33,090 --> 00:05:34,170
access property.

72
00:05:34,950 --> 00:05:40,050
Note that random access is also utilized in several other methods in the collections class.

73
00:05:40,680 --> 00:05:42,600
So that's about marker interfaces.

74
00:05:42,780 --> 00:05:47,850
But there is one more interesting marker interface called Quotable, which we will discuss as another

75
00:05:47,850 --> 00:05:49,590
example in the next lesson.

76
00:05:50,420 --> 00:05:56,630
So just to recap, unlike mcshane's and representative interfaces, marker interfaces do not declare

77
00:05:56,630 --> 00:05:57,620
any methods.

78
00:05:58,430 --> 00:06:03,680
They are simply used to mark or tag a class as having certain property.

79
00:06:04,390 --> 00:06:07,480
There are not many marker interfaces in the Java library.

80
00:06:07,510 --> 00:06:10,900
C realizable is probably one of the commonly used ones.

81
00:06:11,410 --> 00:06:18,490
But more than writing to hard disk these days, it is more common for certain complex and frequently

82
00:06:18,490 --> 00:06:21,130
used objects to be cached in the memory.

83
00:06:21,580 --> 00:06:26,890
This way we don't have to reconstruct these complex objects every time they are needed.

84
00:06:27,250 --> 00:06:29,350
They can simply be fetched from the cash.

85
00:06:29,680 --> 00:06:37,510
And cash is an object caching system and it requires all the objects it caches to implement realizable.

86
00:06:37,870 --> 00:06:41,080
So the marker interface, so realizable has to be implemented.

87
00:06:41,560 --> 00:06:42,790
So that's about it.

88
00:06:42,790 --> 00:06:43,960
And thank you.

