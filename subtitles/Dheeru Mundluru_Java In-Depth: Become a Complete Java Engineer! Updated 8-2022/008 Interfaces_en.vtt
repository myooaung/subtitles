WEBVTT
1
00:00:02.050 --> 00:00:03.140
Hi there.

2
00:00:03.160 --> 00:00:03.940
This is Telemundo.

3
00:00:04.420 --> 00:00:05.380
And welcome back.

4
00:00:05.770 --> 00:00:13.090
As I mentioned in the previous lecture, interfaces help in defining optional capability without compromising

5
00:00:13.090 --> 00:00:14.320
on polymorphism.

6
00:00:14.890 --> 00:00:22.540
And by polymorphism, we mean that interfaces help in defining a common protocol, which in turn helps

7
00:00:22.540 --> 00:00:24.070
in achieving polymorphism.

8
00:00:24.580 --> 00:00:27.310
So let's see how interfaces help in doing so.

9
00:00:27.340 --> 00:00:34.120
It's going to be a lengthy discussion on interfaces as we want to go beyond understanding just the syntax.

10
00:00:34.240 --> 00:00:35.980
The syntax part is easy.

11
00:00:36.520 --> 00:00:43.450
We want to get a clear understanding of the role that interfaces play so that we can design good object

12
00:00:43.450 --> 00:00:44.500
oriented software.

13
00:00:45.160 --> 00:00:48.250
So we will focus on those aspects and demo.

14
00:00:48.250 --> 00:00:53.050
Where syntax is put into action will be part of one of the subsequent lectures.

15
00:00:54.730 --> 00:00:55.840
Now we know this.

16
00:00:55.870 --> 00:01:00.730
A super type defines a common protocol for all its subtypes.

17
00:01:01.330 --> 00:01:08.080
That is, the super type is announcing that both myself and all my subtypes have these kinds of methods.

18
00:01:09.160 --> 00:01:17.350
Essentially a super type is specifying a contract which tells what itself and any of its subtypes would

19
00:01:17.350 --> 00:01:17.890
offer.

20
00:01:18.910 --> 00:01:25.870
So super type defines a contract and we know that a super type can be a class and the contract would

21
00:01:25.870 --> 00:01:29.650
be all public and protected methods of the class.

22
00:01:31.020 --> 00:01:36.930
And if class is abstract, then contract would additionally include abstract methods.

23
00:01:38.450 --> 00:01:44.480
The whether it is abstract or not can define instance variables to that is the state.

24
00:01:44.900 --> 00:01:50.690
Moreover, if these variables are declared public, they will also be part of the contract.

25
00:01:51.140 --> 00:01:55.310
Even static variables declared as public would be part of contract.

26
00:01:56.950 --> 00:02:03.940
Now a super type can also be an interface and the syntax of interface looks very similar to a class

27
00:02:03.970 --> 00:02:05.710
and we will look at it shortly.

28
00:02:05.890 --> 00:02:12.130
But the main difference is that the reserved keyword class is replaced with the reserved keyword interface,

29
00:02:12.790 --> 00:02:19.750
but with interface the contract would mostly be only public abstract methods.

30
00:02:20.140 --> 00:02:24.130
That is, typically you will not see any concrete methods.

31
00:02:24.730 --> 00:02:32.080
Prior to Java eight, it used to be only public abstract methods, but since Java eight onwards, an

32
00:02:32.080 --> 00:02:35.800
interface can also have concrete methods as we will see later.

33
00:02:35.800 --> 00:02:40.480
But generally you can expect them to contain only abstract methods.

34
00:02:40.990 --> 00:02:47.560
Interfaces would have subclasses which provide the actual implementations for those abstract methods.

35
00:02:49.290 --> 00:02:52.860
Moreover, interfaces will not have any state.

36
00:02:53.310 --> 00:02:55.860
That is, they cannot have instance variables.

37
00:02:56.250 --> 00:02:58.860
So interfaces are stateless.

38
00:02:59.900 --> 00:03:04.190
And since there are no instance variables, there is no point instantiating them.

39
00:03:04.670 --> 00:03:10.940
That is, they are non interchangeable and it clearly makes sense as the whole point of creating an

40
00:03:10.940 --> 00:03:17.540
object is to store some state that is unique to the object and manipulate that state via the instance

41
00:03:17.540 --> 00:03:18.140
methods.

42
00:03:18.680 --> 00:03:25.910
Since interfaces cannot contain instance variables, you cannot have state and hence it would be meaningless

43
00:03:25.910 --> 00:03:27.320
to instantiate them.

44
00:03:28.180 --> 00:03:35.590
So obviously interfaces do not contain any constructors too as a constructor is needed in order to create

45
00:03:35.590 --> 00:03:36.460
an object.

46
00:03:37.090 --> 00:03:44.740
So essentially an interface generally has only abstract methods which we know do not have any method

47
00:03:44.740 --> 00:03:45.700
implementations.

48
00:03:46.580 --> 00:03:49.430
And hence can be considered as pure contract.

49
00:03:49.880 --> 00:03:52.310
An interface can be considered as pure contract.

50
00:03:52.700 --> 00:04:00.260
That is, it just states what methods it represents and does not say anything about the method implementations.

51
00:04:00.530 --> 00:04:07.070
Method implementations would be provided by subclasses of the interface, so it is much more generic

52
00:04:07.070 --> 00:04:09.860
than classes, including abstract classes.

53
00:04:10.310 --> 00:04:17.000
As with classes, you are able to define some concrete behavior that is methods with implementation.

54
00:04:17.740 --> 00:04:21.279
Moreover, with classes you can have instance variables to.

55
00:04:23.090 --> 00:04:28.430
Because of this lack of implementation, we can achieve more flexible designs.

56
00:04:29.770 --> 00:04:38.460
For instance, as we see here with interfaces, Java allows a class to be a subclass of multiple interfaces

57
00:04:38.470 --> 00:04:41.500
in addition to being a subclass of another class.

58
00:04:41.950 --> 00:04:49.570
So here the subclass is in Blue Circle and it is a subclass of one superclass and three interfaces.

59
00:04:50.440 --> 00:04:56.620
We couldn't do this with just the classes, as Java does not support multiple inheritance of classes

60
00:04:56.770 --> 00:05:03.700
due to the ambiguity of inheriting methods with same names from multiple super classes.

61
00:05:05.560 --> 00:05:11.860
Moreover, it's also very common for the same interface to have multiple subclasses.

62
00:05:12.160 --> 00:05:16.570
And these subclasses can be from completely different projects to.

63
00:05:17.110 --> 00:05:22.030
And all of this will be clear as we progress through this section and the course to.

64
00:05:23.890 --> 00:05:26.770
Now let's look at the syntax for defining an interface.

65
00:05:26.800 --> 00:05:30.280
As mentioned earlier, the declaration is similar to a class.

66
00:05:30.400 --> 00:05:36.910
Only difference is that the keyword class is replaced with the keyword interface, and the keyword interface

67
00:05:36.910 --> 00:05:38.920
is followed by the interface name.

68
00:05:39.790 --> 00:05:45.790
An interface as mentioned earlier, is non intangible and hence is implicitly abstract.

69
00:05:46.300 --> 00:05:52.270
You can in fact include the keyword abstract within the declaration and the compiler will not complain.

70
00:05:52.630 --> 00:05:55.360
But let's not do that as it would be redundant.

71
00:05:56.250 --> 00:06:03.900
The modifier public is optional, although typically you would mostly see interfaces that are public.

72
00:06:03.930 --> 00:06:06.270
So they do have the public modifier.

73
00:06:06.900 --> 00:06:13.470
We know that if we exclude the modifier public, it means that interface is visible only within the

74
00:06:13.470 --> 00:06:14.130
package.

75
00:06:14.460 --> 00:06:19.710
So that's the default access, that is the package, private access.

76
00:06:20.250 --> 00:06:26.370
And we cannot have any other access modifiers in an interface declaration, and that is the case with

77
00:06:26.370 --> 00:06:27.180
class two.

78
00:06:27.570 --> 00:06:33.810
So both class and interface can have only default or public access levels.

79
00:06:34.050 --> 00:06:36.900
That is no private or protected access levels.

80
00:06:37.260 --> 00:06:38.710
So just take that in your mind.

81
00:06:38.730 --> 00:06:43.410
Classes on interfaces can have only default or public access levels.

82
00:06:45.510 --> 00:06:47.220
Coming to what an interface can have.

83
00:06:47.250 --> 00:06:55.380
It can include static, constant variables, that is variables declared with static and final modifiers.

84
00:06:56.010 --> 00:06:59.760
So you can have static variables that are final two.

85
00:06:59.910 --> 00:07:05.100
But keep in mind that interfaces cannot have instance variables as specified earlier.

86
00:07:06.840 --> 00:07:10.080
And as discussed earlier, it can also include abstract methods.

87
00:07:10.200 --> 00:07:12.360
That is methods with no bodies.

88
00:07:13.080 --> 00:07:20.280
We also said that prior to Java eight it used to be only abstract methods, but since Java eight onwards,

89
00:07:20.280 --> 00:07:24.300
an interface can also have concrete methods as we will next see.

90
00:07:24.480 --> 00:07:29.010
But generally you can expect them to contain only abstract methods.

91
00:07:29.550 --> 00:07:33.750
Even static variables are not that commonly seen in interfaces.

92
00:07:34.110 --> 00:07:40.890
So prior to Java eight, an interface was considered as 100% pure abstract class.

93
00:07:41.280 --> 00:07:44.310
That is, it would include only abstract methods.

94
00:07:46.050 --> 00:07:52.830
However, with Java eight interfaces can also have some implementation in the form of something called

95
00:07:52.860 --> 00:07:55.110
default and static methods.

96
00:07:55.740 --> 00:07:59.910
Unlike abstract methods, these methods would have method bodies.

97
00:08:00.090 --> 00:08:02.130
That is, there are concrete methods.

98
00:08:02.610 --> 00:08:08.610
So from Java eight onwards, interfaces are no longer 100% pure abstract classes.

99
00:08:09.390 --> 00:08:12.900
Static methods are just like the static methods we know about.

100
00:08:13.110 --> 00:08:18.690
And later we will look at why these two kinds of methods were introduced in Java eight.

101
00:08:20.420 --> 00:08:28.520
Finally, interfaces can also include nested types, which means it can include nested classes or nested

102
00:08:28.520 --> 00:08:29.570
interfaces.

103
00:08:30.140 --> 00:08:35.210
Nested types will be discussed in a separate section, so let's not worry about them for now.

104
00:08:35.570 --> 00:08:43.429
In general, mostly abstract methods are the only ones you will see in interfaces and hence is emphasized

105
00:08:43.429 --> 00:08:45.200
in red color in the slide.

106
00:08:45.440 --> 00:08:52.400
Sometimes you may see other members like default methods or static final variables, but most of the

107
00:08:52.400 --> 00:08:54.440
time it would be abstract methods.

108
00:08:55.310 --> 00:09:02.780
Also note that all of these members of an interface are implicitly public, so you don't have to explicitly

109
00:09:02.780 --> 00:09:10.670
specify the modifier public in case of abstract methods, the abstract modifier is also implicit and

110
00:09:10.670 --> 00:09:12.050
hence can be omitted.

111
00:09:14.180 --> 00:09:18.290
And here is the example interface declaration for our new requirement.

112
00:09:18.410 --> 00:09:24.290
So we have the interface named as shareable with the abstract method get item data.

113
00:09:24.770 --> 00:09:30.470
Since it is abstract method, it does not have any implementation and ends with a semicolon, but the

114
00:09:30.470 --> 00:09:34.370
modifier abstract is omitted as it is implicit.

115
00:09:35.030 --> 00:09:42.470
As I stated earlier, public modifier can also be omitted as it is implicit for any member in an interface.

116
00:09:42.860 --> 00:09:48.530
And as a matter of style, it is discouraged to explicitly specify default modifiers.

117
00:09:48.800 --> 00:09:52.400
So let's not include default modifiers in the code that we write.

118
00:09:54.560 --> 00:10:00.620
Although there are no variables in this example, any variables declared in an interface are, by default,

119
00:10:00.620 --> 00:10:02.720
public, static and final.

120
00:10:03.050 --> 00:10:07.070
So once again, you don't have to include these modifiers explicitly.

121
00:10:08.960 --> 00:10:13.640
As mentioned earlier, all interface members are public by default.

122
00:10:13.970 --> 00:10:20.870
So regardless of whether it is a variable method or a nested class or a nested interface, it would

123
00:10:20.870 --> 00:10:23.390
have a public access level by default.

124
00:10:25.010 --> 00:10:30.260
You cannot use either private or protected modifiers with interface members.

125
00:10:30.440 --> 00:10:32.930
They can have only public access levels.

126
00:10:33.440 --> 00:10:38.030
So you may then ask what about accessibility only within the package?

127
00:10:38.480 --> 00:10:45.920
And that would happen if the interface itself has a default access that is, public modifier is omitted

128
00:10:45.920 --> 00:10:53.030
from the interface declaration and in that case, the public access level of interface members no longer

129
00:10:53.030 --> 00:10:57.230
apply and those members are not visible outside the package.

130
00:10:57.680 --> 00:11:04.850
So basically the public access level of members is overridden by the default access level specified

131
00:11:04.850 --> 00:11:06.680
in the interface declaration.

132
00:11:07.250 --> 00:11:11.210
But generally you will see interfaces to how public access level.

133
00:11:13.140 --> 00:11:17.670
Also interfaces are important, just like the way we import classes.

134
00:11:19.670 --> 00:11:23.990
And here is how you would subclass an interface for classes.

135
00:11:23.990 --> 00:11:30.890
We know that the keyword expense is used, but for interface you would use the keyword implements.

136
00:11:31.430 --> 00:11:39.050
So in our example, both book and web classes would implement shareable and would provide their own

137
00:11:39.050 --> 00:11:41.990
implementations for get item data method.

138
00:11:42.730 --> 00:11:45.970
And both classes still extend the bookmark class.

139
00:11:46.450 --> 00:11:53.020
Note that the mobi class would only extend bookmark but will not implement shareable as we know that

140
00:11:53.020 --> 00:11:55.540
it should not be shared with the partner website.

141
00:11:56.380 --> 00:12:02.230
With regards to the keywords extents and implements semantically also they make sense.

142
00:12:02.470 --> 00:12:09.970
For instance, the keyword implements suggests that a class is going to implement the abstract methods

143
00:12:09.970 --> 00:12:17.050
declared in an interface, but the keyword extends such as that a class is going to extend the functionality

144
00:12:17.050 --> 00:12:18.310
of a superclass.

145
00:12:18.910 --> 00:12:24.730
That is, it is going to inherit the concrete methods, but is also going to provide implementation

146
00:12:24.730 --> 00:12:26.170
for abstract methods.

147
00:12:26.170 --> 00:12:31.330
And of course it can also add some new methods, thus extending the functionality.

148
00:12:32.140 --> 00:12:39.610
Note that if class declaration includes both extents as well as implements class, then implements class

149
00:12:39.610 --> 00:12:42.190
must always follow the extents class.

150
00:12:42.580 --> 00:12:44.560
Otherwise you get a compilation error.

151
00:12:45.040 --> 00:12:51.490
You can also have instances where a class only implements one or more interfaces but does not extend

152
00:12:51.490 --> 00:12:52.300
any class.

153
00:12:52.630 --> 00:12:53.890
And that's possible to.

154
00:12:55.920 --> 00:13:01.770
So here is the new class diagram with book and weblink classes, implementing the shareable interface

155
00:13:01.770 --> 00:13:05.520
and providing implementations for get item data method.

156
00:13:06.210 --> 00:13:13.350
Multiple inheritance is no longer an issue now as only one class bookmark is extended while the other

157
00:13:13.350 --> 00:13:14.460
is an interface.

158
00:13:15.030 --> 00:13:17.100
Just a quick note on the notation here.

159
00:13:17.310 --> 00:13:23.970
As we have something new in this class diagram, we indicate an interface by using the keyword interface

160
00:13:23.970 --> 00:13:25.410
about the interface name.

161
00:13:26.100 --> 00:13:32.310
Moreover, the implements relationship is indicated using dotted line, but for excellent relationship

162
00:13:32.310 --> 00:13:34.800
it is always going to be solid line.

163
00:13:35.370 --> 00:13:41.250
And regarding the arrow at the end of the dotted line, strictly speaking, it must be a closed arrow

164
00:13:41.250 --> 00:13:46.830
like a triangle, and that applies to both interface as well as the expense relationship.

165
00:13:47.130 --> 00:13:49.770
But in this course, let's simply stick to this notation.

166
00:13:51.100 --> 00:13:54.100
So by using interface we achieved our objective.

167
00:13:54.220 --> 00:13:58.240
That is only weblink and book classes have the shareable capability.

168
00:13:58.450 --> 00:14:02.380
That is only these two classes define the get item data method.

169
00:14:03.690 --> 00:14:07.290
Also now a common protocol is defined via the shareable interface.

170
00:14:07.770 --> 00:14:13.650
This common protocol does not apply to the movie class as it does not implement shareable.

171
00:14:14.250 --> 00:14:21.750
So shareable interface defines the optional capability that web link and book need, and it also provides

172
00:14:21.750 --> 00:14:22.920
a common protocol.

173
00:14:24.700 --> 00:14:30.640
And the beauty here is that we also get the polymorphic benefits of multiple inheritance.

174
00:14:31.950 --> 00:14:33.250
That is in our example.

175
00:14:33.270 --> 00:14:40.620
A book object can now be assigned to a variable of reference type shareable in addition to a variable

176
00:14:40.620 --> 00:14:42.210
of reference type bookmark.

177
00:14:43.040 --> 00:14:46.550
So the book class is a subtype of shareable too.

178
00:14:46.790 --> 00:14:50.330
Just like the way it's a subtype of the bookmark class.

179
00:14:50.720 --> 00:14:55.190
So a class implementing an interface is a subtype of that interface.

180
00:14:55.760 --> 00:15:00.650
So both book and web link in addition to being book and web link.

181
00:15:00.680 --> 00:15:05.690
They are also of two other types now which are shareable and bookmark.

182
00:15:07.640 --> 00:15:09.050
And this is not possible.

183
00:15:09.350 --> 00:15:16.370
A movie object cannot be assigned to a variable of the type shareable as it does not implement shareable.

184
00:15:16.700 --> 00:15:19.580
That is, it is not a subtype of shareable.

185
00:15:20.970 --> 00:15:25.500
Keep in mind that this is also not possible as an interface is non tangible.

186
00:15:26.910 --> 00:15:34.200
So an interface can only be a reference type and it can never be an object type.

187
00:15:34.680 --> 00:15:36.060
So always keep that in mind.

188
00:15:37.260 --> 00:15:44.100
Not that in general, the term type is often used to refer to either a class or an interface.

189
00:15:46.170 --> 00:15:51.510
On this slide shows an example where an interface is used as a method parameter type.

190
00:15:51.990 --> 00:15:58.830
So here the method go has shareable as a method parameter type, and it can be invoked by passing either

191
00:15:58.830 --> 00:16:02.820
book or weblink objects, but not movie objects.

192
00:16:03.420 --> 00:16:08.340
And within the method, get item data method is being invoked on the method parameter.

193
00:16:08.790 --> 00:16:13.950
So if a book object is passed, then its version of get item data method would be invoked.

194
00:16:14.190 --> 00:16:19.290
Similarly, if weblink object is passed, then its version of get item data gets invoked.

195
00:16:19.650 --> 00:16:24.180
So it's just like in the case of using a superclass as the method parameter type.

196
00:16:24.810 --> 00:16:28.440
So what we are seeing here is essentially polymorphism.

197
00:16:30.570 --> 00:16:35.730
As mentioned earlier, a class can be a subclass of multiple interfaces.

198
00:16:35.970 --> 00:16:38.640
That is, a class can implement multiple interfaces.

199
00:16:39.150 --> 00:16:46.230
As you can see here, the class implements Sharable as well as another commonly used interface called

200
00:16:46.230 --> 00:16:50.040
compatible, which is from the Java Lang package.

201
00:16:50.280 --> 00:16:56.460
And we will look at this interface later and the two interfaces are simply comma separated and we can

202
00:16:56.460 --> 00:16:58.080
also have more interfaces.

203
00:16:58.920 --> 00:16:59.340
With this.

204
00:16:59.340 --> 00:17:06.630
The book class also overwrites the abstract method compared to which is defined by comparable interface.

205
00:17:07.390 --> 00:17:13.780
By implementing comparable interface, a class announces that its objects can be compared with each

206
00:17:13.780 --> 00:17:20.380
other, and it is useful when we want to store those objects in certain order and this interface will

207
00:17:20.380 --> 00:17:21.579
be discussed later.

208
00:17:21.880 --> 00:17:27.790
Now, for someone looking at this class definition, when they just look at the compatible interface

209
00:17:27.790 --> 00:17:33.880
in the declaration part, instantly they know that the objects of this class can be compatible with

210
00:17:33.880 --> 00:17:34.480
each other.

211
00:17:35.020 --> 00:17:41.230
Now, you can relate this to a doctor having multiple degrees where the degrees are the interfaces.

212
00:17:41.530 --> 00:17:45.260
Just looking at the degrees, we know the capabilities of the doctor.

213
00:17:45.280 --> 00:17:47.260
And that's exactly the case here.

214
00:17:47.620 --> 00:17:54.820
Just looking at the two interfaces in the book classes declaration, we know that any book object offers

215
00:17:54.820 --> 00:17:57.730
the capabilities to be shared and compared.

216
00:17:59.520 --> 00:18:04.680
Now a book object can also be assigned to a variable whose type is comparable.

217
00:18:05.220 --> 00:18:12.000
So by implementing comparable book classes, offering a new capability that comparable represents.

218
00:18:12.570 --> 00:18:15.420
So that's about the main introduction to interfaces.

219
00:18:15.660 --> 00:18:23.730
Just to summarize, an interface is simply a pure contract and it is much more generic than even abstract

220
00:18:23.730 --> 00:18:24.420
classes.

221
00:18:24.720 --> 00:18:32.100
It doesn't even have a state, so it is just a very high level specification that subclasses would implement.

222
00:18:32.760 --> 00:18:37.920
There are few more important things we need to still discuss about interfaces, and we will do it in

223
00:18:37.920 --> 00:18:38.940
the next lecture.

224
00:18:39.030 --> 00:18:42.720
After that, we will do a demo of everything that we have learned.

225
00:18:43.020 --> 00:18:43.710
Thank you.

