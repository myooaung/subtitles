WEBVTT
1
00:00:02.220 --> 00:00:03.210
Hi there.

2
00:00:03.240 --> 00:00:04.410
This is the De La Rue.

3
00:00:04.410 --> 00:00:05.400
And welcome back.

4
00:00:05.700 --> 00:00:12.540
Now that we have a basic understanding of what compensation is, let's look at what platform dependency

5
00:00:12.540 --> 00:00:13.020
is.

6
00:00:13.470 --> 00:00:16.230
We'll also do a short demo of platform dependency.

7
00:00:18.070 --> 00:00:20.290
Let's just consider a Windows machine.

8
00:00:20.440 --> 00:00:24.880
And let's also assume we have written a C program called Hello.

9
00:00:25.570 --> 00:00:29.230
To compile this program, we can use a compiler called DCC.

10
00:00:30.170 --> 00:00:35.690
And this would be the command DCC space hyphen or space.

11
00:00:35.690 --> 00:00:43.520
Hello Space Hallowed C where hallowed or C is a file containing the C program, while hyphen O is an

12
00:00:43.520 --> 00:00:52.700
option that tells compiler to name the output file as hello, which will have a dot x extension on windows.

13
00:00:53.120 --> 00:01:00.110
So on compiling hello dot c, we get an executable file called hello dot x e, which includes the machine

14
00:01:00.110 --> 00:01:00.530
code.

15
00:01:01.400 --> 00:01:05.120
Your compilation step is also doing something called linking.

16
00:01:05.540 --> 00:01:13.250
Generally, any software comprises of many source code files, and each source code file is compiled

17
00:01:13.250 --> 00:01:19.970
into a separate file called the object file, which has an extension dot or dot object.

18
00:01:20.540 --> 00:01:23.840
For example, in this case, it could be Hello Dot or.

19
00:01:24.530 --> 00:01:30.830
And these object files are then group or linked to form a final executable file.

20
00:01:31.520 --> 00:01:35.330
This linking in many cases is done by the compiler itself.

21
00:01:35.420 --> 00:01:42.290
However, it can also be done manually by programmers themselves using another program called linker.

22
00:01:42.860 --> 00:01:50.450
In this example, compiler does the linking and thus generating an executable called hello dot x which

23
00:01:50.450 --> 00:01:53.210
is finally executed by just typing in.

24
00:01:53.210 --> 00:01:55.040
Hello at the command line.

25
00:01:56.970 --> 00:02:04.380
Similarly, we can also compile the same C program on a Linux machine using the same command as on Windows,

26
00:02:04.380 --> 00:02:07.070
and this will also produce an executable.

27
00:02:07.080 --> 00:02:10.590
But in Linux the executable will be named as hello dot.

28
00:02:11.340 --> 00:02:14.700
So the extension is out here rather than x.

29
00:02:16.090 --> 00:02:19.950
Which can then be executed by typing dot for forward slash.

30
00:02:19.960 --> 00:02:20.440
Hello.

31
00:02:21.010 --> 00:02:28.300
So what we have here is both the executables being successfully executed on the machines on which those

32
00:02:28.300 --> 00:02:30.190
executables are generated.

33
00:02:31.330 --> 00:02:33.280
But this wouldn't be possible.

34
00:02:33.400 --> 00:02:33.940
That is.

35
00:02:33.940 --> 00:02:41.680
Hello executable generated on windows machine cannot be executed on Linux and that is an example of

36
00:02:41.680 --> 00:02:48.130
platform dependency that is hallowed x can be run only on Windows operating system.

37
00:02:48.550 --> 00:02:54.370
To run it on Linux we would have to recompile hallowed C program on Linux.

38
00:02:55.570 --> 00:03:01.510
Similarly, the halo executable generated on Linux cannot be executed on a Windows machine.

39
00:03:01.630 --> 00:03:08.620
You would have to recompile on Windows, so that generated executable is specific to the operating system.

40
00:03:09.970 --> 00:03:13.420
So platform dependency has to do with operating system.

41
00:03:14.240 --> 00:03:20.000
And one main reason is due to the format of the executable file generated.

42
00:03:20.480 --> 00:03:22.430
It is due to the file format.

43
00:03:22.790 --> 00:03:28.100
Windows uses a format called P which stands for portable executable.

44
00:03:28.130 --> 00:03:34.310
While Linux uses a format called L F, which stands for executable and linker format.

45
00:03:34.910 --> 00:03:39.830
In case you are interested about these formats, you can read more about them on Google.

46
00:03:39.860 --> 00:03:45.170
Just search for portable executable or l, f and you can read more about them.

47
00:03:46.790 --> 00:03:52.160
Another reason for dependency on operating system is when the program makes system calls.

48
00:03:52.400 --> 00:03:58.820
System calls are useful for performing operations like file opening directory creation or even printing

49
00:03:58.850 --> 00:04:04.730
to console or that terminal system calls are rooted to the operating systems kernel.

50
00:04:06.660 --> 00:04:09.330
Platform dependency can also be due to hardware.

51
00:04:09.360 --> 00:04:15.570
For instance, machine code generated for a program on an x 86 processor would be different from the

52
00:04:15.570 --> 00:04:19.560
machine code generated for the same program on an arm processor.

53
00:04:20.220 --> 00:04:25.860
So the machine on which an executable is executed should be similar to the machine on which it has been

54
00:04:25.860 --> 00:04:26.460
generated.

55
00:04:26.820 --> 00:04:30.900
Otherwise it has to be recompiled using an appropriate compiler.

56
00:04:31.730 --> 00:04:37.370
So both operating system as well as hardware play a part in platform dependency.

57
00:04:38.160 --> 00:04:42.780
Next, we will see how an interpreter can help resolve the platform dependency issue.

58
00:04:42.810 --> 00:04:47.070
But before doing that, let's just do a quick demo of platform dependency.

59
00:04:49.430 --> 00:04:51.050
Och, this is my windows machine.

60
00:04:51.050 --> 00:04:53.830
And here we have a program named as hello.

61
00:04:54.140 --> 00:04:56.180
See, just as in the slides.

62
00:04:56.360 --> 00:05:02.360
And all it does is print this message called Hello World onto the screen, onto the console.

63
00:05:02.390 --> 00:05:03.590
That's all it does.

64
00:05:03.620 --> 00:05:08.000
So let's just go ahead and compile this particular C program.

65
00:05:08.750 --> 00:05:10.700
This is my command prompt.

66
00:05:10.700 --> 00:05:19.490
So let me just say DCC, the DCC compiler hyphen or and the output file would be hello.

67
00:05:19.880 --> 00:05:23.030
So it would generate a load of x e space.

68
00:05:23.690 --> 00:05:26.330
The input file is the c program.

69
00:05:26.330 --> 00:05:27.110
Hello dot c.

70
00:05:28.590 --> 00:05:30.810
So that would have generated a lot.

71
00:05:31.310 --> 00:05:34.620
FC So now let me just run this.

72
00:05:36.130 --> 00:05:36.790
Hello.

73
00:05:37.210 --> 00:05:39.380
And as you can see, it prints the text.

74
00:05:39.400 --> 00:05:40.150
Hello world.

75
00:05:40.690 --> 00:05:47.230
Now let me copy this C program on to a Linux machine and then we will recompile it there.

76
00:05:47.860 --> 00:05:50.050
So I have a Linux box, too.

77
00:05:50.080 --> 00:05:55.360
So let me just so this here is my windows and this is my Linux.

78
00:05:55.360 --> 00:05:58.180
So here is the Galaxy program.

79
00:05:58.450 --> 00:06:00.190
So let me just copy it here.

80
00:06:02.500 --> 00:06:03.430
It's copied.

81
00:06:03.550 --> 00:06:08.290
Let me open my Linux terminal and compile it and run it to.

82
00:06:09.250 --> 00:06:11.200
So I have the command here.

83
00:06:11.830 --> 00:06:15.960
I think the font is not as big as in the other window.

84
00:06:15.970 --> 00:06:20.160
So it's DCC space hyphen or hello and hello.

85
00:06:20.320 --> 00:06:21.440
See the same command.

86
00:06:21.460 --> 00:06:23.080
So let me compile this.

87
00:06:24.170 --> 00:06:25.000
It's compiled.

88
00:06:25.010 --> 00:06:29.930
So to run it, all I will do is dot forward slash.

89
00:06:30.720 --> 00:06:31.170
Hello.

90
00:06:31.170 --> 00:06:33.510
And it would have created hallowed out here.

91
00:06:35.380 --> 00:06:36.790
So it prints the text.

92
00:06:36.790 --> 00:06:36.990
Hello?

93
00:06:37.060 --> 00:06:37.440
Well.

94
00:06:38.080 --> 00:06:39.160
So that is good.

95
00:06:39.190 --> 00:06:45.730
Now let me copy the XY file that God generated on Windows onto the Linux machine and let's see if we

96
00:06:45.730 --> 00:06:46.330
can run it.

97
00:06:46.930 --> 00:06:48.210
So let me copy this here.

98
00:06:48.220 --> 00:06:49.810
This is a load of XY.

99
00:06:51.120 --> 00:06:52.140
Keep it here.

100
00:06:54.990 --> 00:06:56.880
So here to run it.

101
00:06:56.880 --> 00:06:59.510
Let me say pseudo space.

102
00:06:59.640 --> 00:07:01.500
Dot slash.

103
00:07:02.520 --> 00:07:02.840
Hello.

104
00:07:03.120 --> 00:07:03.960
X e.

105
00:07:05.310 --> 00:07:13.710
And it says command not fun so it is not possible to run the dot FC generated on Windows on a Linux

106
00:07:13.710 --> 00:07:14.160
machine.

107
00:07:14.670 --> 00:07:20.310
So one thing that can be done here is either we have to recompile, that's what we did earlier, or

108
00:07:20.310 --> 00:07:28.060
we can use a software called Vine which will allow us to run Windows programs on Linux.

109
00:07:28.080 --> 00:07:29.460
So let me just say.

110
00:07:30.560 --> 00:07:33.170
So here we are on the Linux machine.

111
00:07:35.040 --> 00:07:38.040
Now, as you can see, it is helping us to do this.

112
00:07:38.400 --> 00:07:43.470
So that's just for your information that we can use this software called wine.

113
00:07:44.280 --> 00:07:50.220
So that clearly says that C is not platform independent, so it is platform dependent.

114
00:07:50.970 --> 00:07:57.450
Now let me copy the executable generated on Linux onto Windows and let's just test the same thing.

115
00:07:57.450 --> 00:08:00.600
So here as the executable on Linux.

116
00:08:00.600 --> 00:08:01.920
So let me copy it here.

117
00:08:03.860 --> 00:08:05.480
So let me open my.

118
00:08:06.290 --> 00:08:07.670
And let me just type in.

119
00:08:07.720 --> 00:08:07.970
Hello?

120
00:08:08.060 --> 00:08:09.170
Dot out.

121
00:08:10.610 --> 00:08:11.650
And that's it.

122
00:08:11.660 --> 00:08:17.240
So we are unable to run the executable generated on Linux on the Windows machine.

123
00:08:17.660 --> 00:08:19.850
So that is platform dependency.

124
00:08:19.850 --> 00:08:23.990
And next we will see how interpreter helps resolve this.

125
00:08:24.530 --> 00:08:28.910
And Java, as we said earlier, is platform independent.

126
00:08:28.910 --> 00:08:35.179
So later we will have a Java program and we will also test platform independence.

127
00:08:35.750 --> 00:08:36.220
That's it.

128
00:08:36.230 --> 00:08:36.770
Thank you.

129
00:08:36.770 --> 00:08:38.090
And see you in the next lecture.

