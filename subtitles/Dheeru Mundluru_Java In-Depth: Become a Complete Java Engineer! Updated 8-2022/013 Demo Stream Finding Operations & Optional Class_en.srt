1
00:00:02,160 --> 00:00:02,930
Hi there.

2
00:00:02,940 --> 00:00:04,080
This is De La Rue.

3
00:00:04,080 --> 00:00:04,950
And welcome back.

4
00:00:04,980 --> 00:00:07,440
Let's now look at the finding operations.

5
00:00:07,590 --> 00:00:11,520
Earlier we looked at the matching operations and now we are going to look at finding operations.

6
00:00:11,520 --> 00:00:17,190
So we are still in the stream operations class and we know that finding operations are also terminal

7
00:00:17,190 --> 00:00:18,930
operations like match operations.

8
00:00:18,930 --> 00:00:24,330
And we also said that fighting operations are also short circuit operations along with matching and

9
00:00:24,330 --> 00:00:25,230
limit operation.

10
00:00:25,680 --> 00:00:31,830
So in finding operations, we are going to look at two methods to find any and find fast.

11
00:00:31,830 --> 00:00:34,020
So those are the two methods that we are going to look at.

12
00:00:34,290 --> 00:00:41,340
And as the name implies, find methods are used to find something in the input stream elements.

13
00:00:41,340 --> 00:00:42,330
That's what they do.

14
00:00:42,930 --> 00:00:49,740
But you would be expecting that these methods would take some kind of a search target, something like

15
00:00:49,740 --> 00:00:57,630
the contains method in collection, and we would search against the input elements, but that is not

16
00:00:57,630 --> 00:00:58,170
happening.

17
00:00:58,170 --> 00:01:01,650
So the fine methods do not have do not take any parameter.

18
00:01:01,650 --> 00:01:08,760
So they are parameter less, but they typically are used with filter operations, so they are used with

19
00:01:08,760 --> 00:01:11,250
filter operations, but that need not be the case.

20
00:01:11,250 --> 00:01:13,680
They can also be used without filter operations.

21
00:01:13,680 --> 00:01:19,680
So if you have a bunch of operations in your stream pipeline without any filtering and if you use one

22
00:01:19,680 --> 00:01:24,180
of the find fine methods, then you would get some kind of value.

23
00:01:24,540 --> 00:01:26,490
They would return a value from the stream.

24
00:01:26,940 --> 00:01:32,430
So it can also be used without filter elements, but typically they are used with filter, filter method,

25
00:01:32,430 --> 00:01:33,450
filter operation.

26
00:01:33,840 --> 00:01:36,120
So let's go ahead and look at the two methods.

27
00:01:36,720 --> 00:01:39,630
Let's go into the find method here.

28
00:01:39,630 --> 00:01:45,060
So along with the find operations, we are also going to look at something called Optional Class, which

29
00:01:45,060 --> 00:01:46,770
was introduced in Java eight.

30
00:01:47,100 --> 00:01:50,850
An optional is part of the Java package and we will look at that.

31
00:01:51,270 --> 00:01:54,900
So we are going to use the same condition here.

32
00:01:54,900 --> 00:01:56,400
We had a condition here.

33
00:01:56,430 --> 00:02:00,810
Is there at least one highly rated book that is inexpensive?

34
00:02:00,930 --> 00:02:03,780
So let's go ahead and use the same condition here.

35
00:02:03,780 --> 00:02:06,660
And if we have that book, then we need to return that book.

36
00:02:06,990 --> 00:02:08,009
So let's do that.

37
00:02:08,009 --> 00:02:09,150
Let's implement that.

38
00:02:09,150 --> 00:02:11,550
So first is we will just say.

39
00:02:12,740 --> 00:02:14,990
The usual syntax.

40
00:02:17,290 --> 00:02:23,920
So we have to use filter because it is not like the match operation and let's just copy the condition

41
00:02:23,920 --> 00:02:24,670
from here.

42
00:02:33,420 --> 00:02:35,100
Now this is find any.

43
00:02:36,590 --> 00:02:41,780
So as soon as find any is executed, then it would return an object.

44
00:02:41,780 --> 00:02:44,450
So if an if there are a stream of elements.

45
00:02:44,780 --> 00:02:51,200
So one of the elements well would satisfy this condition and we would simply return that element.

46
00:02:51,200 --> 00:02:57,950
So that's the find any method and find first method will return the first element.

47
00:02:58,190 --> 00:03:04,250
So what it means is, let's say there are ten elements and within the ten elements, three of the elements

48
00:03:04,250 --> 00:03:05,450
match this condition.

49
00:03:05,840 --> 00:03:08,510
Then, then only one of them will be written.

50
00:03:08,930 --> 00:03:14,270
And it could be like, for instance, it could be the second, fifth and eighth element and the element

51
00:03:14,270 --> 00:03:16,010
return can be any of them.

52
00:03:16,520 --> 00:03:19,160
So that's what happens with find any.

53
00:03:19,310 --> 00:03:25,910
But in a non parallel setup, non parallel setup, typically it would usually return only the first

54
00:03:25,910 --> 00:03:31,400
element, which means if there are if the second, fifth and eighth elements are matching this criteria,

55
00:03:31,430 --> 00:03:32,870
typically the second will be return.

56
00:03:32,870 --> 00:03:34,010
But there is no guarantee.

57
00:03:34,880 --> 00:03:40,880
So that's the find any but with find first, it will always return the first matching element itself.

58
00:03:41,150 --> 00:03:47,000
So after ten, ten elements of second, fifth and eight are going to match, then it would always return

59
00:03:47,000 --> 00:03:47,900
the second element.

60
00:03:48,320 --> 00:03:50,240
So the question is which one to use?

61
00:03:50,280 --> 00:03:52,610
Find any or find first.

62
00:03:53,610 --> 00:03:56,550
In a bit, I'm going to show how the returned value can be printed.

63
00:03:56,790 --> 00:03:59,040
But the question now is of the two.

64
00:03:59,070 --> 00:04:00,270
Which one do you want to use?

65
00:04:00,300 --> 00:04:05,850
The thing is, if we are using this is a stream, but if you are using a parallel stream, then if we

66
00:04:05,850 --> 00:04:12,330
do not have the requirement to return the first element, then you should go with find any OC because

67
00:04:12,330 --> 00:04:18,690
if you are using a parallel stream and if you really want to return only the first element, then there

68
00:04:18,690 --> 00:04:23,610
is more work to be done because with parallel stream, multiple cores will be used.

69
00:04:23,790 --> 00:04:29,760
So the data, the stream elements would be partitioned and we will the different course will be working

70
00:04:29,760 --> 00:04:35,040
on the different partitions, but the requirement is that the first matching element has to be returned

71
00:04:35,280 --> 00:04:38,970
so that synchronization should be there and it is a lot of work.

72
00:04:39,210 --> 00:04:44,250
So if you do not have that requirement, if first and any will do in a parallel environment, then you

73
00:04:44,250 --> 00:04:45,210
have to go for that.

74
00:04:45,720 --> 00:04:47,080
So that's the thing.

75
00:04:47,100 --> 00:04:48,690
Those are the only two methods.

76
00:04:48,900 --> 00:04:53,340
Now here, both of them return an optional off book.

77
00:04:54,120 --> 00:04:56,650
So let's look at what optional is.

78
00:04:56,670 --> 00:04:59,580
So it was introduced in Java eight.

79
00:05:03,480 --> 00:05:04,530
Let's call it result.

80
00:05:05,830 --> 00:05:08,500
So optional as the name implies.

81
00:05:08,500 --> 00:05:14,390
What it means is if the stream matches this criteria, it may match.

82
00:05:14,410 --> 00:05:19,510
If all of the stream elements, if one of the stream elements matches the criteria, then the element

83
00:05:19,510 --> 00:05:20,170
will be returned.

84
00:05:20,170 --> 00:05:26,350
But if none of them match matches, or if the stream is empty, the optional will not contain the value.

85
00:05:26,500 --> 00:05:34,240
So optional is essentially a container class which would have either the matching element or it will

86
00:05:34,240 --> 00:05:35,590
not have the element.

87
00:05:36,160 --> 00:05:37,180
So that's the thing.

88
00:05:37,600 --> 00:05:43,090
So it is saying that the value might be present or might not be present.

89
00:05:43,090 --> 00:05:45,580
So that's why it is called as optional.

90
00:05:45,880 --> 00:05:52,720
So the question is, before Java eight, if had streams been there, then it would have returned the

91
00:05:52,720 --> 00:05:53,060
book.

92
00:05:53,080 --> 00:05:54,240
In this case, the book.

93
00:05:54,250 --> 00:05:58,360
But if the book object was not found, then it would have returned a null value.

94
00:05:58,900 --> 00:06:01,510
So the problem here is with null reference.

95
00:06:01,960 --> 00:06:09,370
If it returns a null and if you invoke some method on the result and if the result is null, and if

96
00:06:09,370 --> 00:06:14,410
you're not performing any null checks, then you would end up with a null pointer exception and null

97
00:06:14,410 --> 00:06:17,230
pointer exceptions are pretty common.

98
00:06:17,230 --> 00:06:22,300
When you're right, when you're working on projects, you could frequently encounter them due to bad

99
00:06:22,300 --> 00:06:25,300
practices because of being careless.

100
00:06:25,360 --> 00:06:28,900
So you could end up with that because null checks are not done.

101
00:06:29,200 --> 00:06:32,320
So to avoid that, this class has been introduced.

102
00:06:32,830 --> 00:06:37,600
So it's a container class, so it's a safe alternative to null checks.

103
00:06:38,050 --> 00:06:39,550
So that's what it is.

104
00:06:39,730 --> 00:06:46,180
So you would use optional and optional kind of classes were also used in Scala and other programming

105
00:06:46,180 --> 00:06:49,210
languages like Haskell, Scala and Haskell.

106
00:06:49,450 --> 00:06:53,290
So probably the language designers were inspired by that and they have introduced this.

107
00:06:53,740 --> 00:06:55,420
So optional is like this.

108
00:06:55,420 --> 00:06:57,250
So if you want to get the value.

109
00:06:57,910 --> 00:07:00,130
So there are certain methods that you can use.

110
00:07:00,340 --> 00:07:02,650
So first thing is we need to check if.

111
00:07:05,200 --> 00:07:06,370
Result is present.

112
00:07:06,370 --> 00:07:09,640
So you can see all of those methods if it is present.

113
00:07:11,570 --> 00:07:12,710
Then you would say.

114
00:07:13,740 --> 00:07:14,790
You can print the.

115
00:07:15,900 --> 00:07:16,720
Result.

116
00:07:16,740 --> 00:07:23,040
Dot get so this would return the this would return the book instance the the book instance that was

117
00:07:23,040 --> 00:07:23,520
found.

118
00:07:24,330 --> 00:07:25,950
So now you would say that.

119
00:07:26,050 --> 00:07:28,350
What's the what's the benefit of this?

120
00:07:28,380 --> 00:07:34,320
Because in the pre Java eight world, you could have made made this into a null check and you would

121
00:07:34,320 --> 00:07:38,970
have you could have printed the the value the value that was written if the condition was met.

122
00:07:38,970 --> 00:07:43,230
But the problem is many times developers might forget the null check.

123
00:07:43,650 --> 00:07:45,600
But you might also ask why?

124
00:07:45,600 --> 00:07:47,850
Why wouldn't a developer forget this one?

125
00:07:48,180 --> 00:07:56,400
But the thing is here, by having this name as optional, there is a greater chance that developer would

126
00:07:56,400 --> 00:08:00,300
actually invoke this method before invoking the get method.

127
00:08:00,900 --> 00:08:03,030
So it's just more likely to do that.

128
00:08:03,450 --> 00:08:06,630
And also optional has other other methods.

129
00:08:06,630 --> 00:08:10,860
Also, if the result is not found, we can return a default value.

130
00:08:10,980 --> 00:08:15,780
So there are other methods which can be which we can make use of.

131
00:08:15,780 --> 00:08:18,030
So there are other benefits to so.

132
00:08:18,030 --> 00:08:23,250
But with using an optional, it is very likely that we will invoke the is present method before invoking

133
00:08:23,250 --> 00:08:23,610
this.

134
00:08:23,760 --> 00:08:29,280
And if we invoke the method also if it is a null value, if he invoked it directly and if it is null,

135
00:08:29,310 --> 00:08:34,320
if there is no value, then it will actually throw an exception just like the null pointer exception.

136
00:08:34,320 --> 00:08:36,510
But it's a different exception, which we will see later.

137
00:08:37,230 --> 00:08:38,280
So that's the thing.

138
00:08:38,280 --> 00:08:40,620
So let me just let's just print that.

139
00:08:42,539 --> 00:08:44,340
So it's printing the book.

140
00:08:44,580 --> 00:08:46,440
It's invoking the two string method in this.

141
00:08:46,440 --> 00:08:51,570
And as you can see, the rating is greater than or equal to 4.8 and the price is less than 50.

142
00:08:51,600 --> 00:08:54,800
Now, let's say let's change it to 5.0.

143
00:08:55,770 --> 00:08:57,900
In which case it will not work.

144
00:08:57,900 --> 00:09:00,540
So we can have some kind of an els condition here.

145
00:09:04,200 --> 00:09:05,460
And we can say.

146
00:09:08,920 --> 00:09:10,420
It's not fun.

147
00:09:12,030 --> 00:09:18,570
So if you execute this, it will say not fun because there are no books which have a rating of five

148
00:09:18,570 --> 00:09:22,940
or the max rating is five, but there is not even a single book which has this rating.

149
00:09:22,950 --> 00:09:24,090
So that's the thing.

150
00:09:24,120 --> 00:09:27,820
Now let me so find any is returning this thing.

151
00:09:27,840 --> 00:09:30,450
So let's just comment this out.

152
00:09:34,300 --> 00:09:34,810
And.

153
00:09:35,960 --> 00:09:37,880
Let me come on this part also.

154
00:09:38,330 --> 00:09:40,810
So there are other methods which we can invoke.

155
00:09:40,820 --> 00:09:48,800
So instead of is present, let's just implement this part directly here so we can say if present.

156
00:09:52,610 --> 00:09:54,920
We can invoke this.

157
00:10:01,300 --> 00:10:09,130
So if present takes a consumer here and it will pass the element which is the phone book.

158
00:10:11,310 --> 00:10:11,500
Yeah.

159
00:10:11,580 --> 00:10:15,090
This is 5.0, so we need to change it to 4.8.

160
00:10:17,830 --> 00:10:20,740
So the book is getting printed now, so you can do that.

161
00:10:20,740 --> 00:10:25,690
I have also created a method here called print, so we can also invoke that.

162
00:10:25,810 --> 00:10:27,700
So if we are invoking that.

163
00:10:29,930 --> 00:10:32,490
You know, in this case, it would be stream.

164
00:10:33,910 --> 00:10:35,230
Operations.

165
00:10:36,230 --> 00:10:40,760
So instead of pentathlon, we are just invoking this method called print, which just takes a book.

166
00:10:44,400 --> 00:10:45,510
As their input.

167
00:10:45,570 --> 00:10:52,170
So this is this is going to be parsed as an instance for the consumer, because consumer is what is

168
00:10:52,170 --> 00:10:53,280
being accessed here.

169
00:10:53,610 --> 00:10:54,990
So consumer will.

170
00:10:56,790 --> 00:11:00,150
So this particular element is getting passed.

171
00:11:00,150 --> 00:11:04,170
So which is nothing but the element that was found here by find any.

172
00:11:04,200 --> 00:11:09,300
So if it is present, then that will that element will be passed on to the print method.

173
00:11:10,440 --> 00:11:11,460
So we can do that.

174
00:11:11,460 --> 00:11:14,640
So that's what if present now in Java nine.

175
00:11:14,640 --> 00:11:19,470
We can actually if it is present, we are doing this through this way.

176
00:11:19,470 --> 00:11:22,890
But if it is not present, we might want to perform some other action.

177
00:11:23,040 --> 00:11:24,980
And for that there is another method.

178
00:11:24,990 --> 00:11:26,730
Let me show you the API for optional.

179
00:11:26,730 --> 00:11:29,640
So these are all the methods in the optional class.

180
00:11:30,180 --> 00:11:34,080
Here is the optional class and it is part of the Java package.

181
00:11:34,080 --> 00:11:39,420
So this is Java nine and there is this method called F present or S.

182
00:11:39,690 --> 00:11:43,500
So if present then we can call the print method that we have seen.

183
00:11:43,500 --> 00:11:45,210
Otherwise we can have.

184
00:11:45,630 --> 00:11:51,420
There is this double so we can pass another lambda to print the print statement in the LS condition.

185
00:11:52,110 --> 00:11:53,040
So that can be done.

186
00:11:53,040 --> 00:11:55,230
But this is only for Java nine.

187
00:11:55,260 --> 00:11:58,350
If you look at Java eight, that method is not there.

188
00:12:00,470 --> 00:12:01,310
Here it is.

189
00:12:01,340 --> 00:12:04,640
It has only if present, but not the other method.

190
00:12:05,210 --> 00:12:07,130
So that's just for your information.

191
00:12:07,160 --> 00:12:14,620
Now, sometimes if the result is not present, then you would want to return some other object.

192
00:12:14,630 --> 00:12:17,750
So for that, there is this method called or.

193
00:12:19,340 --> 00:12:19,940
Else.

194
00:12:20,970 --> 00:12:31,020
And it has to return a default value so that can be done so here or else if it is present, it would

195
00:12:31,020 --> 00:12:32,070
return the element.

196
00:12:32,070 --> 00:12:35,940
Otherwise it would return the default value and the default value.

197
00:12:35,940 --> 00:12:41,100
You can actually give the default value here using some book or something like that.

198
00:12:41,100 --> 00:12:46,860
But in this particular case, I have written a method called default, so we can just invoke this.

199
00:12:46,860 --> 00:12:49,470
So this is the or else method.

200
00:12:51,710 --> 00:12:52,670
And it's.

201
00:12:58,710 --> 00:13:02,730
So this great default will return a default book here.

202
00:13:02,730 --> 00:13:08,940
So we are just printing the statement called default and we are returning a book with some with some

203
00:13:08,940 --> 00:13:09,420
values.

204
00:13:09,420 --> 00:13:11,090
We don't have to worry about it.

205
00:13:11,100 --> 00:13:15,120
So that's what it is, is being done now if I run this thing.

206
00:13:16,600 --> 00:13:19,750
As you can see, default is so.

207
00:13:19,900 --> 00:13:22,090
So finding is this one, this statement.

208
00:13:22,090 --> 00:13:24,010
But the element is found.

209
00:13:24,580 --> 00:13:32,560
But in spite of that, this method is getting invoked and we are printing this text default and we are

210
00:13:32,560 --> 00:13:34,600
actually returning the default, the book.

211
00:13:34,600 --> 00:13:39,160
So that is happening even when the book even when the book was found.

212
00:13:39,280 --> 00:13:43,300
So that is some additional operation that we are doing.

213
00:13:43,510 --> 00:13:50,380
Ideally, it would be nice if this is invoked only when the book was not found, right, because we

214
00:13:50,380 --> 00:13:52,000
have to construct this object.

215
00:13:52,360 --> 00:13:55,780
And so that's an additional cost and we have to invoke this method.

216
00:13:55,780 --> 00:13:57,790
So there is an alternative for that.

217
00:13:57,790 --> 00:14:01,690
It's called as or else get.

218
00:14:02,770 --> 00:14:07,570
Now orders get is going to take a different parameter.

219
00:14:07,570 --> 00:14:09,520
It's going to take a supplier here.

220
00:14:10,060 --> 00:14:12,040
So it's a functional interface, we know that.

221
00:14:12,040 --> 00:14:18,850
So we need to pass we can pass this, we can just convert this into a method reference.

222
00:14:18,850 --> 00:14:25,060
So a method invocation has been converted into a method reference and we need to remove this.

223
00:14:26,390 --> 00:14:27,230
So that's it.

224
00:14:27,230 --> 00:14:28,520
So this is what we have.

225
00:14:28,550 --> 00:14:35,180
Now, if you recall, we know that we had discussed about deferred execution when it comes to functional

226
00:14:35,180 --> 00:14:41,960
interfaces, when we are passing something like a lambda or automated reference, we have deferred execution.

227
00:14:41,960 --> 00:14:50,000
What it means is even if you find if the element was found, then this get default will not be invoked.

228
00:14:50,300 --> 00:14:52,490
If the element was found, it would just return that.

229
00:14:52,490 --> 00:14:59,240
But unlike in the previous case where we had only or else so unlike that case, this particular get

230
00:14:59,300 --> 00:15:01,130
default method will not be invoked.

231
00:15:01,130 --> 00:15:06,590
So it will get invoked only if the element was not found only.

232
00:15:06,590 --> 00:15:11,090
Only then this additional cost of creating the default would be incurred.

233
00:15:12,050 --> 00:15:13,040
So that's the thing.

234
00:15:13,040 --> 00:15:19,220
We have looked at the deferred execution also when discussing supplier and we looked at the logging

235
00:15:19,220 --> 00:15:21,740
classes, you may recall that.

236
00:15:21,830 --> 00:15:23,750
So that's the advantage with that.

237
00:15:23,750 --> 00:15:27,770
So with our else, it is going to be it's going to be eager execution.

238
00:15:27,770 --> 00:15:34,370
But with all else get since we are using a supplier here, it will be a lazy execution.

239
00:15:35,540 --> 00:15:37,850
So those are some of the elements.

240
00:15:37,850 --> 00:15:41,360
So here we are making use of optional.

241
00:15:41,720 --> 00:15:43,250
Optional is being retained.

242
00:15:43,490 --> 00:15:50,450
Now if we want to create any any optional, if we write our own method and if we want to create optional,

243
00:15:50,480 --> 00:15:56,720
right sometimes here we are using some, some, some other method which is doing that find any but the

244
00:15:56,720 --> 00:15:58,040
Java from the Java API.

245
00:15:58,040 --> 00:16:02,330
But if we want to return optional, so there are some methods for that.

246
00:16:02,690 --> 00:16:05,000
Let's just try one of them.

247
00:16:06,590 --> 00:16:08,360
Let's call it does opt.

248
00:16:09,250 --> 00:16:11,260
So there is this method called off.

249
00:16:13,850 --> 00:16:14,040
Okay.

250
00:16:14,230 --> 00:16:16,360
And let's to keep it simple.

251
00:16:16,720 --> 00:16:18,520
Let's say we want to pass.

252
00:16:19,550 --> 00:16:21,740
The first element.

253
00:16:25,120 --> 00:16:27,130
So this would include that.

254
00:16:28,090 --> 00:16:28,720
Now.

255
00:16:30,660 --> 00:16:32,280
It's a system not out.

256
00:16:35,620 --> 00:16:38,740
This is an optional and we know we can invoke the get method.

257
00:16:41,130 --> 00:16:43,860
So let's go ahead and let me just execute this.

258
00:16:45,720 --> 00:16:51,570
So it's going to print the first book, which is which has the title Java one and some information.

259
00:16:51,930 --> 00:16:53,010
So that's a bit off.

260
00:16:53,820 --> 00:16:58,320
So we are storing this, but if we pass none here.

261
00:17:01,040 --> 00:17:03,200
And if we execute it, then we get.

262
00:17:04,270 --> 00:17:07,400
And I'll point out exception because of does not accept this.

263
00:17:07,420 --> 00:17:09,940
If we pass this, it will throw an unwanted exception.

264
00:17:10,690 --> 00:17:13,960
So for that, there is an alternative called null level.

265
00:17:16,140 --> 00:17:20,010
Of Nullarbor and if you pass now it is fine.

266
00:17:21,640 --> 00:17:29,380
But get method would throw in no such element exception and we said that optional has to use dot is

267
00:17:29,380 --> 00:17:30,100
present.

268
00:17:31,700 --> 00:17:33,570
And if you do that, then we are good.

269
00:17:33,590 --> 00:17:37,310
Otherwise it would throw accessing the get method directly with throw this.

270
00:17:37,310 --> 00:17:43,670
So we have to do this kind of a check and then we have to invoke the method as we have shown earlier.

271
00:17:44,450 --> 00:17:50,060
So if we do that, it will say is present as false because we are passing null.

272
00:17:50,060 --> 00:17:50,360
Right.

273
00:17:50,390 --> 00:17:54,110
If it was a non null value, it would have returned the element.

274
00:17:54,570 --> 00:17:54,680
Right?

275
00:17:54,830 --> 00:17:57,320
So if it is false now if you say box.

276
00:17:58,660 --> 00:17:59,940
Not get.

277
00:18:04,730 --> 00:18:06,710
Now it would return a true.

278
00:18:07,760 --> 00:18:08,930
So that's what it is.

279
00:18:08,930 --> 00:18:13,610
So that's the optional class which was introduced in the Java in Java.

280
00:18:14,420 --> 00:18:15,230
So that's it.

281
00:18:15,230 --> 00:18:19,500
So those are the finding operations and we have also seen the matching operations.

282
00:18:19,520 --> 00:18:20,180
That's about it.

283
00:18:20,180 --> 00:18:25,200
And this code is also available in the code, in the in the resource section and that's it.

284
00:18:25,220 --> 00:18:26,540
Thank you and happy coding.

