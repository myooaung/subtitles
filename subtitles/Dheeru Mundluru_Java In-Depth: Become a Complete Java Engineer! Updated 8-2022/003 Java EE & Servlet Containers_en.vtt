WEBVTT
1
00:00:02.100 --> 00:00:03.150
Hi there.

2
00:00:03.180 --> 00:00:04.320
This is the De La Rue.

3
00:00:04.320 --> 00:00:05.430
And welcome back.

4
00:00:05.670 --> 00:00:12.570
Web applications can be developed using different kinds of technologies like the Java E, ASP.NET,

5
00:00:12.570 --> 00:00:15.930
Ruby on Rails, PHP and so on and so forth.

6
00:00:16.410 --> 00:00:21.960
Our interest is in using the Java stack that is Java based technologies.

7
00:00:22.350 --> 00:00:28.890
So in this lecture we will discuss a bit on Java EE and we will also briefly discuss about web servers

8
00:00:28.890 --> 00:00:30.660
and servlet containers.

9
00:00:32.189 --> 00:00:38.250
Java family includes multiple specifications for building different types of applications.

10
00:00:39.140 --> 00:00:45.830
For instance, we know that the Java Sea specification defines the core Java language as well as the

11
00:00:45.830 --> 00:00:53.930
Java and Java as a specification just by itself can be used for building desktop Java applications,

12
00:00:53.930 --> 00:00:55.640
standalone Java applications.

13
00:00:56.530 --> 00:01:03.850
And to define the Code Java language, it uses the Java language specification or G+ in short, and

14
00:01:03.850 --> 00:01:07.180
for JVM it uses the Java virtual machine specification.

15
00:01:07.540 --> 00:01:12.580
So essentially Java SE specification implies these two specifications.

16
00:01:13.300 --> 00:01:20.770
And keep in mind that a specification is simply a document which is written in plain English language.

17
00:01:21.650 --> 00:01:29.480
And we have implementations such as the Oracle's JDK and Free and Open JDK, which implement Gels and

18
00:01:29.490 --> 00:01:30.950
JVM specification.

19
00:01:32.800 --> 00:01:38.890
And as I said earlier, using Just Java SE alone, we can build standalone desktop Java applications.

20
00:01:39.310 --> 00:01:43.490
But if we want to build web applications, we need Java EE.

21
00:01:44.670 --> 00:01:51.780
And for that we have the Java E specification, which is a collection of specifications that extend

22
00:01:51.780 --> 00:01:54.030
the Java Sea specification.

23
00:01:54.450 --> 00:01:57.030
So Java EE extends Java SE.

24
00:01:58.090 --> 00:02:05.770
And these specifications define how Web applications, Web services and other kinds of enterprise software

25
00:02:05.770 --> 00:02:06.520
would work.

26
00:02:08.229 --> 00:02:13.150
And one of the important Java EE specifications is the servlet specification.

27
00:02:13.720 --> 00:02:18.550
It defines servlet and how they work as part of a web application.

28
00:02:18.880 --> 00:02:24.820
Servlet is a key Java EE technology for serving web content and we will soon look at servlet.

29
00:02:24.850 --> 00:02:31.900
Similarly, there are also other specifications like the IGB Specification Java Persistence API specification

30
00:02:32.200 --> 00:02:38.680
jacks are a specification which is a web services related specification and so on and so forth.

31
00:02:40.150 --> 00:02:45.940
So those are specifications and these are some implementations of Java EE specifications.

32
00:02:46.510 --> 00:02:51.430
Glass Fish is the Oracle implementation of Java EE specification.

33
00:02:52.240 --> 00:02:55.540
An Apache Tomcat is a partial implementation.

34
00:02:55.900 --> 00:03:02.830
That is, it implements only a subset of the Java collection of specifications like the Servlet and

35
00:03:02.830 --> 00:03:04.300
JSP specifications.

36
00:03:05.060 --> 00:03:07.490
And we will soon install Apache Tomcat to.

37
00:03:08.540 --> 00:03:18.110
Know that in 2017 Java E specification was officially taken over by the Eclipse Foundation from Oracle.

38
00:03:19.770 --> 00:03:26.400
On the Java Sea, you can build large scale web applications like e-commerce websites, which can have

39
00:03:26.430 --> 00:03:29.670
millions of users accessing them every single day.

40
00:03:31.040 --> 00:03:37.730
And let's also not forget Java Me, which is the Java Micro edition, which is used for building applications

41
00:03:37.730 --> 00:03:39.950
for resource constrained devices.

42
00:03:40.580 --> 00:03:44.390
Now, since we are interested in Java E, let's just focus on that.

43
00:03:45.970 --> 00:03:46.750
As of today.

44
00:03:46.780 --> 00:03:54.580
Java eight is the latest version and these are all the different specifications that fall under Java

45
00:03:54.610 --> 00:03:55.030
EE.

46
00:03:55.570 --> 00:04:03.640
Only some of the important specifications are shown here and at the very end we have the Java Sea as

47
00:04:03.640 --> 00:04:07.510
Java E, as we just mentioned, is an extension of Java SE.

48
00:04:08.680 --> 00:04:11.350
Now we are somewhat familiar with web programming.

49
00:04:11.350 --> 00:04:17.589
You must have heard of application server, web server and servlet container, and probably you may

50
00:04:17.589 --> 00:04:20.589
even be confused about the differences between them.

51
00:04:20.920 --> 00:04:22.780
So let's get a clarity on that.

52
00:04:23.290 --> 00:04:29.740
So what we have here are specifications and something should implement them, just like the way JDK

53
00:04:29.740 --> 00:04:32.830
and Jari implement the Java specification.

54
00:04:33.850 --> 00:04:40.840
And an application server is something that would implement the entire Java specification, which would

55
00:04:40.840 --> 00:04:42.820
be all of these specifications.

56
00:04:43.480 --> 00:04:47.190
As mentioned earlier, Glass Fish implements Java EE.

57
00:04:47.710 --> 00:04:53.800
So it is an application server and it is also open source and is provided by Oracle.

58
00:04:54.280 --> 00:05:00.850
It is the reference implementation of Java EE specifications, just like the way they have the JDK and

59
00:05:00.850 --> 00:05:08.650
Jerry, which are also reference implementations of Java SE specification and among other application

60
00:05:08.650 --> 00:05:14.050
servers, we have the IBM's WebSphere and also Oracle's WebLogic.

61
00:05:14.810 --> 00:05:21.260
So an application server comes with technologies that would implement these different specifications.

62
00:05:21.380 --> 00:05:26.540
And we as developers build our applications using those technologies.

63
00:05:27.410 --> 00:05:33.890
However, often web applications do not need all of the technologies that we see here.

64
00:05:34.310 --> 00:05:42.140
For instance, many web applications are built using just technologies like sublets and ISPs and do

65
00:05:42.140 --> 00:05:48.350
not need technologies like Aegis, where BJB stands for Enterprise Java Beans.

66
00:05:48.800 --> 00:05:55.970
So an application server would be an overkill for such web applications, which are considered lightweight.

67
00:05:57.500 --> 00:06:03.590
Often only these specifications would suffice for building such lightweight web applications.

68
00:06:04.370 --> 00:06:11.030
And for that we need something called a servlet container which would implement these specifications,

69
00:06:11.390 --> 00:06:15.140
which are a subset of the Java EE specifications.

70
00:06:15.650 --> 00:06:22.430
And the servlet container is also often referred to as a web container or a servlet engine.

71
00:06:23.150 --> 00:06:29.420
An example servlet container is Apache Tomcat, which is open source and is written in Java.

72
00:06:29.780 --> 00:06:32.990
Another example of a servlet container is Jetty.

73
00:06:33.960 --> 00:06:41.310
A symbolic container, as the name implies, is a container for sublets that is sublets are deployed

74
00:06:41.310 --> 00:06:42.930
in a sublet container.

75
00:06:43.020 --> 00:06:45.780
And later we will look at how that can be done.

76
00:06:46.290 --> 00:06:54.660
And a sublet is simply a Java class and we will soon look at sublets and sublets are mainly used for

77
00:06:54.660 --> 00:07:01.650
generating dynamic web pages and the dynamic web page is something that is constructed dynamically.

78
00:07:01.890 --> 00:07:07.620
That is it is constructed on the fly and typically it would include content which is fetched from the

79
00:07:07.620 --> 00:07:08.430
database.

80
00:07:09.030 --> 00:07:15.600
Since we are saying a sublet is generating web pages, it means it can also include HTML tags.

81
00:07:16.260 --> 00:07:22.560
So we would use servlet containers when we want to build really lightweight web applications.

82
00:07:22.740 --> 00:07:29.040
And we have application servers for building much more complex web applications where we would need

83
00:07:29.040 --> 00:07:30.920
technologies like Aegis.

84
00:07:31.620 --> 00:07:36.660
However, sometimes we build applications that fall somewhere in between.

85
00:07:36.840 --> 00:07:44.250
That is, we do not need the entire Java specifications, but we also need something more than what

86
00:07:44.250 --> 00:07:46.080
a servlet container can offer.

87
00:07:47.440 --> 00:07:54.220
And for that we have these subset of specifications and they are collectively referred to as Java EE

88
00:07:54.250 --> 00:07:55.150
Web Profile.

89
00:07:55.780 --> 00:08:03.580
JSF, JPA and CDI are some important specifications here, and it also includes the specifications that

90
00:08:03.580 --> 00:08:08.680
is servlet container implements like the Servlet and JSP specifications.

91
00:08:09.550 --> 00:08:17.380
An implementation for Java e web profile is the Apache Dom E, which is also pronounced as Apache Tommey

92
00:08:17.770 --> 00:08:23.380
and it is a wrapper around vanilla Apache Tomcat, which is a servlet container.

93
00:08:24.250 --> 00:08:29.980
For now we are only interested in servlet container and let's just focus only on that.

94
00:08:31.870 --> 00:08:32.919
And we have this.

95
00:08:32.919 --> 00:08:39.130
So we have a browser which is the client and the servlet container that has all the solids now.

96
00:08:39.130 --> 00:08:46.180
So the container is specific to servlet, but in order to receive HTTP requests from the browser and

97
00:08:46.180 --> 00:08:51.670
respond back with HTTP response, we also need something called a web server.

98
00:08:52.270 --> 00:08:57.640
Not that a web server is not the same as application server, which we discussed earlier.

99
00:08:57.850 --> 00:09:01.810
An example web server is the Apache HTTP server.

100
00:09:02.680 --> 00:09:10.390
We said that a servlet container would serve dynamic content via servers, but a web server is typically

101
00:09:10.390 --> 00:09:13.540
configured to serve only static web pages.

102
00:09:13.690 --> 00:09:19.540
And the static web page is a web page that has static content that is, the entire content in the web

103
00:09:19.540 --> 00:09:21.160
page is hardcoded.

104
00:09:21.790 --> 00:09:28.570
So content doesn't come from sources like databases, which is what is typically the case for dynamic

105
00:09:28.570 --> 00:09:29.320
web pages.

106
00:09:30.280 --> 00:09:37.630
A subnet container like Tomcat can also serve static content, but its main purpose is to host servlet

107
00:09:37.630 --> 00:09:38.680
and JSP.

108
00:09:39.340 --> 00:09:41.740
JSP stands for Java Server Pages.

109
00:09:42.370 --> 00:09:48.880
So with this sort of setup that we see here, when the web server receives a request for a static web

110
00:09:48.880 --> 00:09:52.870
page, then the web server itself can serve the webpage.

111
00:09:54.240 --> 00:09:57.510
But if the request was for a sublet.

112
00:09:58.220 --> 00:10:03.200
Then the web server hands the request to servlet container under servlet.

113
00:10:03.200 --> 00:10:11.210
Container calls the servlet, which generates the dynamic response which is then relayed back to the

114
00:10:11.210 --> 00:10:13.820
client by the intermediary web server.

115
00:10:14.360 --> 00:10:22.490
So a web server essentially listens for HTTP calls coming from the browser and can also respond back.

116
00:10:23.150 --> 00:10:30.410
Now, having said that, a servlet container like Apache Tomcat can also act like a web server.

117
00:10:32.050 --> 00:10:33.970
That is, we would have something like this.

118
00:10:34.330 --> 00:10:39.880
Tomcat has a separate module called Coyote, which acts as a web server.

119
00:10:40.510 --> 00:10:47.650
In fact, when we start TomKat, the web server is on by default and as it should, it would be listening

120
00:10:47.650 --> 00:10:49.810
for incoming HTTP calls.

121
00:10:50.380 --> 00:10:56.320
Now, this basic configuration is definitely good enough to build some large scale websites.

122
00:10:56.890 --> 00:11:00.280
Of course, we would also need some adequate hardware too.

123
00:11:00.670 --> 00:11:07.690
Now, if your experiments show that the performance is not good enough with this configuration, then

124
00:11:07.690 --> 00:11:15.070
you can think of adding Apache to HTTP web server, which it seems can serve the static content faster

125
00:11:15.070 --> 00:11:19.600
than Tomcat and also provide some additional performance benefits.

126
00:11:20.340 --> 00:11:26.670
Adding more hardware, more database instances and things like that will be further helpful in improving

127
00:11:26.670 --> 00:11:27.540
the performance.

128
00:11:28.490 --> 00:11:30.380
So that's about it for now.

129
00:11:30.410 --> 00:11:38.060
We now have an idea about the Java EE specification, which is a collection of a long list of specifications

130
00:11:38.060 --> 00:11:40.610
and an application server implements them.

131
00:11:41.210 --> 00:11:47.450
But many lightweight web applications can be built using just a subset of those specifications.

132
00:11:47.690 --> 00:11:54.530
And for that, we can use it servlet container like Tomcat, which can also act as a web server.

133
00:11:55.450 --> 00:12:03.010
We also have the Java EE Web profile, which adds a few more specifications on top of what servlet container

134
00:12:03.010 --> 00:12:03.790
implements.

135
00:12:04.480 --> 00:12:06.550
That's it for now and thank you.

