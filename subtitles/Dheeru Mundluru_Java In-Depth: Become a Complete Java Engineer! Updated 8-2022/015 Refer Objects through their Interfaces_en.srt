1
00:00:01,030 --> 00:00:01,870
Hi there.

2
00:00:01,900 --> 00:00:03,190
This is true.

3
00:00:03,490 --> 00:00:09,010
Now, let's look at item 52, which says refer to objects by their interfaces.

4
00:00:09,460 --> 00:00:15,520
Basically what the items are just is whenever possible, try to use an interface as a reference type

5
00:00:15,520 --> 00:00:20,770
in all kinds of variable declarations and also use them as method return types.

6
00:00:21,250 --> 00:00:22,480
Let's look at an example.

7
00:00:23,600 --> 00:00:29,690
Let's consider this code fragment where the method fool has a single parameter which is of type ArrayList,

8
00:00:29,690 --> 00:00:31,070
which is a concrete class.

9
00:00:31,340 --> 00:00:36,530
The problem with this is we can now only invoke this method with an idealist.

10
00:00:36,770 --> 00:00:40,040
That is, we cannot pass another similar implementation.

11
00:00:41,430 --> 00:00:48,150
However, if we had the parameter type as a list, which is an interface, then we could have passed

12
00:00:48,150 --> 00:00:54,120
out a list or if needed in future we could pass a linked list.

13
00:00:55,140 --> 00:01:01,500
Or maybe even a trialist, which is from Apache Commons Library, which we know is a completely different

14
00:01:01,500 --> 00:01:05,820
inheritance hierarchy, that is list is from standard Java API.

15
00:01:05,910 --> 00:01:11,850
But the object that is being passed is from a whole different inheritance hierarchy and we are able

16
00:01:11,850 --> 00:01:15,960
to do that just because tree list implements list interface.

17
00:01:17,650 --> 00:01:22,720
So we are saying that one benefit is we can change implementations if needed.

18
00:01:23,320 --> 00:01:25,810
But why would we have to change implementation?

19
00:01:26,870 --> 00:01:31,310
A common reason is that new implementation offers better performance.

20
00:01:32,900 --> 00:01:37,040
Of course, we also know about the polymorphic benefits of using a super type.

21
00:01:37,460 --> 00:01:44,210
We get flexible code which is less susceptible to change as we can pass new object types that were not

22
00:01:44,210 --> 00:01:46,760
there when the code was originally written.

23
00:01:47,090 --> 00:01:49,040
So we can pass new implementations.

24
00:01:49,760 --> 00:01:51,680
The code will also be a lot cleaner.

25
00:01:52,130 --> 00:01:58,640
However, notice that now we are saying that it is maximum flexible code as opposed to simply flexible

26
00:01:58,640 --> 00:01:59,090
code.

27
00:01:59,390 --> 00:02:04,970
And that's because with interfaces, objects can come from any inheritance hierarchy.

28
00:02:05,450 --> 00:02:09,380
That is, they need not be from the same inheritance tree as the interface.

29
00:02:09,889 --> 00:02:15,590
And this is generally not possible with concrete or abstract classes, as classes are implementation

30
00:02:15,590 --> 00:02:19,580
specific and are typically confined to one inheritance tree.

31
00:02:20,000 --> 00:02:24,320
That is, typically you don't see them being subclass in a different inheritance tree.

32
00:02:24,890 --> 00:02:31,840
But with interfaces we are defining a contract that is a specification and hence it is much more generic

33
00:02:31,850 --> 00:02:34,670
and implementations can come from anywhere.

34
00:02:36,300 --> 00:02:41,940
Let's also look at a couple of exceptions when we would have to go with classes rather than interfaces.

35
00:02:42,920 --> 00:02:47,100
One exception is when there is no interface at all in such a case.

36
00:02:47,120 --> 00:02:49,940
Try to use the least specific class.

37
00:02:51,410 --> 00:02:57,980
A second scenario is there may be an interface, but we may have to use a specific subclass as a reference

38
00:02:57,980 --> 00:03:04,880
type, as the subclass might be defining some specialized behavior and the methods code needs that specialized

39
00:03:04,880 --> 00:03:05,540
behavior.

40
00:03:05,870 --> 00:03:09,260
In that case, we have to use the subclass as a reference type.

41
00:03:09,920 --> 00:03:12,530
So that's about this item whenever possible.

42
00:03:12,530 --> 00:03:18,440
Try to use an interface as a reference type unless there are some exceptions like the ones we stated

43
00:03:18,440 --> 00:03:18,950
here.

44
00:03:19,190 --> 00:03:19,880
Thank you.

