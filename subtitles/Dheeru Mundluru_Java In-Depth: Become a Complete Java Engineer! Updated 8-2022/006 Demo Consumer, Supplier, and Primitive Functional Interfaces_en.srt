1
00:00:02,140 --> 00:00:02,930
Hi there.

2
00:00:02,950 --> 00:00:04,059
This is the room.

3
00:00:04,090 --> 00:00:05,020
And welcome back.

4
00:00:05,050 --> 00:00:08,650
Let's now continue our discussion on the standard functional interfaces.

5
00:00:08,920 --> 00:00:14,320
In the previous lecture, we have looked at the two standard functional interfaces predicate and function.

6
00:00:14,500 --> 00:00:18,670
And let's now look at two more standard functional interfaces, consumer and supplier.

7
00:00:19,000 --> 00:00:24,790
And together, these four functional interfaces form the core standard functional interfaces within

8
00:00:24,790 --> 00:00:27,310
the Java utility function package.

9
00:00:28,120 --> 00:00:32,320
So consumer, as the name implies, is used for consuming something.

10
00:00:32,710 --> 00:00:36,730
It has a single method called accept, and it takes a parameter.

11
00:00:36,730 --> 00:00:39,820
And within the body we just consume that parameter.

12
00:00:40,090 --> 00:00:46,210
We do something with the past argument and the method returns a void where a supplier, as the name

13
00:00:46,210 --> 00:00:50,020
implies, supply something and it has a single method called get.

14
00:00:50,140 --> 00:00:53,740
And it does not take any parameter, but it returns something.

15
00:00:54,400 --> 00:00:58,660
And what it returns is dependent on that type argument that we pass to the supplier.

16
00:00:59,020 --> 00:01:02,620
So let's just go ahead and look at the two new functional interfaces.

17
00:01:02,620 --> 00:01:05,670
And the first one that we are going to look at is consumer.

18
00:01:05,680 --> 00:01:07,240
And after that, we look at supplier.

19
00:01:07,540 --> 00:01:10,600
So here is the same code from the previous demo.

20
00:01:10,900 --> 00:01:13,120
So here we have the predicate.

21
00:01:13,120 --> 00:01:19,300
And if the document passes the predicate, then we are applying bunch of transformation transformations

22
00:01:19,300 --> 00:01:22,510
using the function here and we are printing the document.

23
00:01:22,540 --> 00:01:28,720
So out of the four documents, two of them are passing the predicate and we are printing the names here.

24
00:01:28,930 --> 00:01:34,030
Now what we can do is instead of printing it this way, we will use the consumer now.

25
00:01:34,210 --> 00:01:39,310
So for that, what we are going to do is we are going to add those documents into an array list.

26
00:01:39,310 --> 00:01:42,730
So have declared a new array list here called target documents.

27
00:01:43,210 --> 00:01:50,620
And we are going to add these documents into this target documents array list because they are the target

28
00:01:50,620 --> 00:01:51,040
documents.

29
00:01:51,040 --> 00:01:55,060
Out of the four documents, we have to target documents which have passed the predicate.

30
00:01:55,330 --> 00:01:58,870
So they are being added here now target documents.

31
00:01:58,870 --> 00:02:00,220
So this is an array list.

32
00:02:00,520 --> 00:02:04,570
And on an array list we can invoke the for each method.

33
00:02:04,750 --> 00:02:08,050
Now for each method is inherited from Iterable.

34
00:02:08,410 --> 00:02:14,710
We know that list interface extends collection interface and collection interface in turn extends iterable

35
00:02:14,710 --> 00:02:18,100
interface and Iterable interface defines the for each method.

36
00:02:18,430 --> 00:02:24,400
And if you recall, we discussed that the for each method in the iterator lecture in the collections

37
00:02:24,400 --> 00:02:29,800
framework chapter and the for each method actually takes a consumer as an input.

38
00:02:30,220 --> 00:02:35,800
And what it does is it invokes the consumer on each of the elements in the list.

39
00:02:35,830 --> 00:02:38,170
That's what it does, and that's what we are going to do.

40
00:02:38,200 --> 00:02:43,480
We are going to invoke the for each method and we are going to pass a println statement here using a

41
00:02:43,480 --> 00:02:45,730
lambda and that would print the document.

42
00:02:45,730 --> 00:02:49,570
So we don't need to iterate through the documents in this way.

43
00:02:49,570 --> 00:02:51,850
The method will take care of that.

44
00:02:52,420 --> 00:02:55,210
So let's go ahead and copy this.

45
00:02:58,440 --> 00:02:58,890
Here it is.

46
00:02:58,890 --> 00:03:03,990
You can see that it takes a consumer and we are calling it as action, which means that this action

47
00:03:03,990 --> 00:03:07,110
is going to be performed on each of the elements in the list.

48
00:03:09,280 --> 00:03:11,170
Let's pass up lambda here.

49
00:03:11,380 --> 00:03:13,180
So it would be the document.

50
00:03:14,690 --> 00:03:16,230
Want to simply pass the document.

51
00:03:16,800 --> 00:03:22,920
So we don't need the clearances because it's just a single statement that we have and we are having

52
00:03:22,920 --> 00:03:24,930
it as an expression Here, let me run this.

53
00:03:25,980 --> 00:03:27,960
So as you can see, we have the same output.

54
00:03:28,140 --> 00:03:29,990
So that's all there is to consumer.

55
00:03:30,000 --> 00:03:36,030
So consumer has a single method called accept and that accept the logic for that is being provided here.

56
00:03:36,450 --> 00:03:37,480
So that's with that.

57
00:03:37,500 --> 00:03:40,890
Now for Supplier, let's look at a very interesting example.

58
00:03:40,920 --> 00:03:48,660
So out of the two documents, let's say if any of the documents has a length of greater than 80 characters,

59
00:03:48,660 --> 00:03:50,370
then we need to throw an exception.

60
00:03:50,910 --> 00:03:54,210
So we need to log that message.

61
00:03:54,480 --> 00:03:56,400
We need to print that message to the console.

62
00:03:56,490 --> 00:03:58,350
So that's what we want to do here.

63
00:03:58,560 --> 00:04:04,290
So out of these two documents, the second document is actually has a size that is greater than 80.

64
00:04:04,560 --> 00:04:08,280
So let's go ahead and let's implement this.

65
00:04:17,420 --> 00:04:20,360
Now here, let's say, doc.

66
00:04:23,060 --> 00:04:23,630
Land.

67
00:04:25,190 --> 00:04:26,330
Greater than 80.

68
00:04:28,390 --> 00:04:29,650
Through an exception.

69
00:04:31,430 --> 00:04:33,800
On the message can be.

70
00:04:36,060 --> 00:04:37,140
Oversized document.

71
00:04:42,330 --> 00:04:44,730
Now, if it is that, let's just print.

72
00:04:45,570 --> 00:04:50,610
So there is a print method that I have already written and the print method is here.

73
00:04:50,880 --> 00:04:52,890
It's a static method in the same class.

74
00:04:53,130 --> 00:05:00,090
So the print method takes a supplier as input and we are simply this is a supplier is a variable and

75
00:05:00,090 --> 00:05:02,550
we are invoking the get method and we are printing it.

76
00:05:02,760 --> 00:05:08,190
But what we are doing here is we want to print this message only when this Boolean flag there is a Boolean

77
00:05:08,190 --> 00:05:09,870
flag here called error flag.

78
00:05:09,900 --> 00:05:11,880
If it is true, only then we want to print it.

79
00:05:11,880 --> 00:05:14,070
Otherwise we do not want to print it.

80
00:05:14,790 --> 00:05:17,550
So this printing is controlled by that flag.

81
00:05:17,970 --> 00:05:21,750
Now let's pass the the variable here, the lambda here.

82
00:05:22,230 --> 00:05:24,870
So the get method does not take any parameters.

83
00:05:24,870 --> 00:05:26,910
So it is an empty parenthesis.

84
00:05:28,260 --> 00:05:31,770
And what we want to print is the message.

85
00:05:31,770 --> 00:05:36,420
So let's say get message here and let's also append something.

86
00:05:37,020 --> 00:05:39,450
Let's say a tilde here.

87
00:05:40,740 --> 00:05:42,240
And the dock itself.

88
00:05:43,380 --> 00:05:46,860
So here we are actually capturing this.

89
00:05:46,860 --> 00:05:51,210
Lambda is capturing the the variable doc from the enclosed scope.

90
00:05:51,750 --> 00:05:54,990
So that's how we are capturing and we discussed about capturing earlier.

91
00:05:55,230 --> 00:05:57,090
So that's what it is.

92
00:05:57,390 --> 00:05:59,700
Now, let me just run this.

93
00:06:02,160 --> 00:06:05,280
So one of the documents is oversized and this is what we are seeing.

94
00:06:05,550 --> 00:06:10,800
Now, the cool thing is if I turn this into false, it's not going to print, obviously.

95
00:06:10,920 --> 00:06:13,940
But what is going to happen is this.

96
00:06:13,950 --> 00:06:19,090
So this concatenation here would happen only if the get is invoked.

97
00:06:19,110 --> 00:06:25,620
So if the flag is false, the Sprint statement will not be invoked and this will not get printed.

98
00:06:25,830 --> 00:06:28,590
But this concatenation is also not happening.

99
00:06:28,890 --> 00:06:33,270
So that's the beauty of this of this approach, of this idiom.

100
00:06:33,280 --> 00:06:35,100
It's called a deferred execution.

101
00:06:35,100 --> 00:06:39,390
So that is happening because we are having supplier as a parameter here.

102
00:06:39,900 --> 00:06:47,430
So only at the instance when Get is invoked, this concatenation of these strings happen now instead

103
00:06:47,430 --> 00:06:48,600
of a supplier.

104
00:06:48,600 --> 00:06:56,640
If this was a string here and if we were passing only the string, only the concatenation part in that

105
00:06:56,880 --> 00:06:59,520
in that case, the concatenation happens right away.

106
00:06:59,610 --> 00:07:05,400
So even if you have the flag as false here and if you are printing it, the concatenation would have

107
00:07:05,400 --> 00:07:05,940
happened.

108
00:07:05,940 --> 00:07:08,610
So obviously that is going to be slow.

109
00:07:08,610 --> 00:07:14,580
And if this message if this particular print method is going to get involved millions of times, then

110
00:07:14,580 --> 00:07:15,960
it's going to be costly.

111
00:07:16,620 --> 00:07:18,660
So that is how this is avoided.

112
00:07:19,200 --> 00:07:23,790
So this is a very nice idiom and it is already adopted in the Java API.

113
00:07:23,820 --> 00:07:30,590
So within the Java API there is something called as a logging framework in the Java logging package

114
00:07:30,600 --> 00:07:36,120
and in professional projects you would be using a logging framework instead of printing it using a println

115
00:07:36,120 --> 00:07:36,750
statement.

116
00:07:37,020 --> 00:07:38,130
That's what you would be doing.

117
00:07:38,270 --> 00:07:41,970
And Java has comes with its own logging framework.

118
00:07:42,120 --> 00:07:48,230
But there are also other really good third party frameworks, and one of them is the Log Forge framework.

119
00:07:48,240 --> 00:07:51,870
It's a logging framework, and you have to learn about logging also.

120
00:07:52,230 --> 00:07:57,480
And obviously if you're working for a project in a professional environment, you would be using some

121
00:07:57,480 --> 00:07:58,340
logging framework.

122
00:07:58,350 --> 00:08:03,900
So they have already adopted something like this and they are using a supplier and they use it in this

123
00:08:03,900 --> 00:08:04,300
way.

124
00:08:04,320 --> 00:08:07,770
So let's go ahead and look at the logging framework just for your information.

125
00:08:07,770 --> 00:08:12,540
But before doing that, let's also look at the API for the standard function interfaces.

126
00:08:13,280 --> 00:08:13,420
Okay.

127
00:08:13,650 --> 00:08:14,360
Here it is.

128
00:08:14,370 --> 00:08:20,480
So this is the Java nine API and we are looking at all these packages here in the left.

129
00:08:20,490 --> 00:08:24,270
So these are the interfaces from the Java dot dot function.

130
00:08:24,270 --> 00:08:29,550
So these are the standard interfaces and you can see the function here.

131
00:08:31,390 --> 00:08:37,590
Then you can see predicate supplier and consumer is also there and there is the by versions, by consumer,

132
00:08:37,600 --> 00:08:41,530
by function, by predicate and these are all the different things.

133
00:08:41,530 --> 00:08:46,950
And here is the supplier interface and the supplier just has a single method called get.

134
00:08:48,070 --> 00:08:55,780
Now here there is in this API, you can also this thing called as use and if you click on use here,

135
00:08:56,020 --> 00:09:02,830
it will show you all the places in the Java API where the supply supplier interface is being used.

136
00:09:02,950 --> 00:09:07,180
So supplier interface is being used in all of these different packages.

137
00:09:07,600 --> 00:09:14,410
As you can see, there are the different packages, Java line module, Java concurrent logging and we

138
00:09:14,410 --> 00:09:19,480
are going to look at that also and the Streams API here, Java Stream.

139
00:09:19,480 --> 00:09:21,940
So these are the different places where it is used.

140
00:09:21,940 --> 00:09:28,510
And if you scroll down further, you can see where exactly the supplier is used within those packages.

141
00:09:28,780 --> 00:09:34,150
So for example, in the Java logging, let me show you that.

142
00:09:35,030 --> 00:09:35,920
Here it is.

143
00:09:35,930 --> 00:09:41,660
So it is being used in all of these methods and in the logging framework.

144
00:09:42,230 --> 00:09:43,880
And so there is.

145
00:09:44,940 --> 00:09:51,810
So within the larger framework there is a class called logger and supplier is being used in the logging

146
00:09:51,810 --> 00:09:54,390
framework in the Java logging.

147
00:09:54,750 --> 00:09:56,400
So here is the logger class.

148
00:09:56,400 --> 00:10:01,020
And this logger class, for example, is using supplier over here.

149
00:10:01,020 --> 00:10:07,170
So this is the method that you would invoke to log message, but there is also an overloaded method

150
00:10:07,170 --> 00:10:08,220
called log.

151
00:10:08,760 --> 00:10:10,200
Here it is, log.

152
00:10:10,230 --> 00:10:13,950
So it also accepts a level and it also accepts a message.

153
00:10:14,280 --> 00:10:15,870
So now what is level?

154
00:10:15,870 --> 00:10:18,300
So level is here, let me open this.

155
00:10:18,570 --> 00:10:21,120
So level is here it is level.

156
00:10:21,300 --> 00:10:23,370
It's also in Java logging.

157
00:10:23,370 --> 00:10:26,660
So there are different levels that you can set.

158
00:10:26,670 --> 00:10:31,680
So in your logging framework you can set a logging level as fine.

159
00:10:32,040 --> 00:10:40,050
And once you do that and whenever you want to log a message, you would invoke one of these methods.

160
00:10:40,680 --> 00:10:47,760
Log this method or log of the supplier method, and you can pass an appropriate logging level along

161
00:10:47,760 --> 00:10:48,720
with the message.

162
00:10:49,290 --> 00:10:57,720
Now here, if the if the logging level was set to fine and if you are invoking the log method with severe,

163
00:10:57,720 --> 00:11:01,200
then it would print the message, it would log the message.

164
00:11:01,320 --> 00:11:06,220
But if you pass a logging level of finder, then it will not log the message.

165
00:11:06,240 --> 00:11:11,490
So anything above this, so the logging was set as fine the logging level.

166
00:11:11,610 --> 00:11:18,540
So during the invocation of the log method, if you pass any any log level which is greater than or

167
00:11:18,540 --> 00:11:20,790
equal to fine, then it would print the message.

168
00:11:20,790 --> 00:11:22,620
Otherwise it will not print the message.

169
00:11:23,010 --> 00:11:28,230
And these logging messages can be printed either to the console or they can also be printed to some

170
00:11:28,230 --> 00:11:31,170
file, and all of that can be set up.

171
00:11:31,350 --> 00:11:36,960
Typically, you would log them to some file and you would generate such files every single day, and

172
00:11:36,960 --> 00:11:40,660
they will also have some timestamps in the name so that can be done.

173
00:11:40,680 --> 00:11:46,940
So so these log levels are just like the Boolean flag that we have seen in our example in our demo.

174
00:11:46,950 --> 00:11:48,300
So it's just like that.

175
00:11:48,570 --> 00:11:52,970
And they are also using this idioms like the string and the supplier.

176
00:11:52,980 --> 00:11:57,690
So typically you would want to use a supplier and do it the way we have done it.

177
00:11:57,690 --> 00:11:59,910
So that way it would be much more efficient.

178
00:12:00,360 --> 00:12:04,020
So if there is any concatenation happening, that's when it will be useful.

179
00:12:04,020 --> 00:12:11,280
And if the level is not, if it is going to be less than the level that was specified initially, then

180
00:12:11,280 --> 00:12:15,480
the the method will not be invoked on the concatenation will not happen.

181
00:12:16,260 --> 00:12:19,350
So that's what this so the idiom is being followed here.

182
00:12:19,350 --> 00:12:21,360
So let's go back to this interface.

183
00:12:21,360 --> 00:12:23,870
And as you can see, these are all the standard interfaces.

184
00:12:23,880 --> 00:12:30,000
Now, one final thing that I want to tell you is there are also these functional interfaces, standard

185
00:12:30,000 --> 00:12:32,340
function interfaces specific to primitives.

186
00:12:32,340 --> 00:12:36,090
Here there is one called int consumer to double function.

187
00:12:36,240 --> 00:12:38,670
So let me show you this enter to double function.

188
00:12:39,690 --> 00:12:45,750
So function we know just as the transformation it applies the transformation on some input and return

189
00:12:45,750 --> 00:12:46,680
some output.

190
00:12:47,700 --> 00:12:49,550
Ah if you if you recall.

191
00:12:49,560 --> 00:12:53,270
But here it takes because it says int to double.

192
00:12:53,280 --> 00:12:56,730
So basically there is a conversion from int to some doubles.

193
00:12:56,850 --> 00:13:01,230
So the method name is applied as double and it takes an end and it returns a double.

194
00:13:01,500 --> 00:13:06,990
Now this is needed you would you want to use this if you are working with primitives, but if you use

195
00:13:06,990 --> 00:13:11,410
if you're using primitives and if you are going to use the function class, the function functional

196
00:13:11,430 --> 00:13:16,980
interface interface, then the boxing will happen or boxing will have come into play.

197
00:13:16,980 --> 00:13:19,020
And we know that that's very inefficient.

198
00:13:19,290 --> 00:13:25,410
So whenever you are dealing with primitives, you would want to look at this primitive specializations

199
00:13:25,410 --> 00:13:28,410
within the standard functional interfaces.

200
00:13:28,920 --> 00:13:30,300
So this is what we have.

201
00:13:30,420 --> 00:13:32,640
So do take a look at this.

202
00:13:32,640 --> 00:13:33,600
They are very simple.

203
00:13:33,600 --> 00:13:39,450
So you know how to work with the with the core function interface and it's just a specialization.

204
00:13:39,450 --> 00:13:41,340
So you can look at that.

205
00:13:41,340 --> 00:13:44,060
You can just check out all the different things that we have here.

206
00:13:44,070 --> 00:13:45,150
Long Predicate.

207
00:13:45,270 --> 00:13:52,980
So this would take a long variable and here it is test method and it would return a boolean.

208
00:13:53,100 --> 00:13:57,360
Now we also have by consumer by function, we already discussed that.

209
00:13:57,360 --> 00:13:59,040
So this is the consumer.

210
00:14:00,220 --> 00:14:03,100
Consumer would have this accept method.

211
00:14:03,220 --> 00:14:05,980
Then we also have the function.

212
00:14:08,670 --> 00:14:15,390
Function will use apply apply DX and it returns an R and there are also some default methods we already

213
00:14:15,390 --> 00:14:15,720
looked at.

214
00:14:15,720 --> 00:14:21,660
And then so you can check out these functional interfaces and also those specialization interfaces for

215
00:14:21,900 --> 00:14:28,110
primitives and do check out the logging framework and you can learn about it and start using it also.

216
00:14:28,560 --> 00:14:29,940
So that's about it.

217
00:14:30,360 --> 00:14:32,520
Thank you and happy coding.

