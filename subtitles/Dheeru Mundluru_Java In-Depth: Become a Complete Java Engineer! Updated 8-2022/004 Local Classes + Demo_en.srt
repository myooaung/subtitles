1
00:00:00,980 --> 00:00:01,790
Hello there.

2
00:00:01,819 --> 00:00:03,260
This is Data zero.

3
00:00:03,350 --> 00:00:05,390
Now, let's look at local causes.

4
00:00:06,630 --> 00:00:12,240
Local classes are classes that are defined within a method, so they're just like local variables.

5
00:00:12,660 --> 00:00:18,240
You would define them within a method because defining them outside of the method doesn't make sense.

6
00:00:18,720 --> 00:00:21,300
Shortly we will look at an example in our demo.

7
00:00:22,770 --> 00:00:27,420
Since they're part of a method, they can only be instantiated somewhere within the method.

8
00:00:28,990 --> 00:00:34,840
And they can also have multiple constructors and can inherit from multiple types just like any other

9
00:00:34,840 --> 00:00:35,410
class.

10
00:00:37,040 --> 00:00:43,070
Now we know that convention is for methods to be shot, and since local classes are part of methods,

11
00:00:43,070 --> 00:00:44,690
they also have to be shot.

12
00:00:45,020 --> 00:00:47,330
Otherwise they would affect readability.

13
00:00:48,110 --> 00:00:52,940
Recall that this was also the case for anonymous classes that are defined within methods.

14
00:00:54,500 --> 00:01:00,830
Also like anonymous classes, any local variables accessed from the enclosing method should be final.

15
00:01:01,400 --> 00:01:07,550
That is, they should either be declared with final modifier or if we are using at least Java eight

16
00:01:07,550 --> 00:01:09,740
then they need to be effectively final.

17
00:01:11,750 --> 00:01:16,070
Note that unlike other nested classes, local classes are rarely used.

18
00:01:16,490 --> 00:01:20,480
I came across one use case where using a local class makes sense.

19
00:01:21,020 --> 00:01:24,260
Let's head over to our editor and look at it in practice.

20
00:01:24,680 --> 00:01:29,210
It should give you an idea about when using local classes would make sense.

21
00:01:31,570 --> 00:01:31,760
Okay.

22
00:01:31,780 --> 00:01:38,740
So for this demo I created this new class, called us data translator within our nested classes package.

23
00:01:39,010 --> 00:01:45,310
So as the name suggests, data translator basically translates data from one format to another.

24
00:01:45,700 --> 00:01:51,460
So in this demo, we are going to see how we can translate a Java object into XML.

25
00:01:51,550 --> 00:01:58,390
And for this, I created this method called this get book as XML and it will translate a Java object

26
00:01:58,390 --> 00:01:59,320
into XML.

27
00:01:59,350 --> 00:02:01,420
So that's a static method.

28
00:02:02,600 --> 00:02:06,980
And within that static method we also have a local class called US Book.

29
00:02:07,280 --> 00:02:08,630
So that's the book class.

30
00:02:08,990 --> 00:02:11,420
And so it is a data translator.

31
00:02:11,420 --> 00:02:15,200
So it's going to translate a Java object into XML format.

32
00:02:15,620 --> 00:02:22,570
And one of the use cases where it would be useful is if you want to share some data with your partners,

33
00:02:22,580 --> 00:02:24,320
then you could make use of this.

34
00:02:24,800 --> 00:02:29,900
So you would convert your Java objects into XML and that XML can be returned to the desk.

35
00:02:29,930 --> 00:02:35,510
And at some point in the future, at some point of time, you can run a background job which will share

36
00:02:35,510 --> 00:02:38,120
that XML data with your partners.

37
00:02:38,540 --> 00:02:43,910
But if the partners want some real time access to your data, which is stored in the database, then

38
00:02:43,910 --> 00:02:50,090
typical way would be to access a web service like a rest API which can return the result in either XML

39
00:02:50,090 --> 00:02:51,440
or JSON format.

40
00:02:51,920 --> 00:02:59,180
But other than as a web service, another way would be to store it and on the disk and then push it

41
00:02:59,180 --> 00:03:00,400
to them at some point in time.

42
00:03:00,410 --> 00:03:01,590
So that's one use case.

43
00:03:01,610 --> 00:03:07,880
Another use case would be a web application where a client is making a request from the browser.

44
00:03:08,270 --> 00:03:14,120
So the request comes to the server and on the server in the back end, the Java object would be created

45
00:03:14,120 --> 00:03:15,710
for that particular request.

46
00:03:16,130 --> 00:03:22,190
And the Java object would be converted into XML, and that XML would be passed back to the client's

47
00:03:22,190 --> 00:03:27,320
browser, where a JavaScript would pass that XML and display the data to the user.

48
00:03:27,770 --> 00:03:29,180
So that's another use case.

49
00:03:29,360 --> 00:03:36,240
So XML is used as a data exchange format, but more recently, JSON is being used in the last few years.

50
00:03:36,260 --> 00:03:40,280
It's being used more commonly because JSON has a more compact format.

51
00:03:40,850 --> 00:03:46,790
So this is one method and it has all these parameters, like the idea of the book, the title, the

52
00:03:46,790 --> 00:03:49,340
rating of the book as be like code.

53
00:03:49,370 --> 00:03:51,350
So if be here as Facebook.

54
00:03:51,350 --> 00:03:58,790
So if that book has any likes on Facebook, so the number of likes on Facebook and if it has been retweeted

55
00:03:58,790 --> 00:04:02,260
on Twitter, so this number indicates that we count.

56
00:04:02,270 --> 00:04:06,380
So just some social data, it's not actually important here.

57
00:04:06,500 --> 00:04:09,560
So within this method, we have this class.

58
00:04:09,860 --> 00:04:15,170
It's a local class because it is defined within a method and it looks just like any regular class,

59
00:04:15,170 --> 00:04:16,700
but defined within a method.

60
00:04:16,910 --> 00:04:20,920
So it has all these parameters, the same parameters which we have seen for the method.

61
00:04:20,930 --> 00:04:26,030
And it also has a constructor because it's just a local class like any other class, and it can have

62
00:04:26,030 --> 00:04:26,900
its constructor.

63
00:04:27,260 --> 00:04:31,460
So as we mentioned, a local class would have to be instantiated within the method.

64
00:04:31,460 --> 00:04:33,080
So we are instantiating it here.

65
00:04:33,080 --> 00:04:38,660
So we are creating a book object and the arguments passed to the method are here.

66
00:04:38,870 --> 00:04:40,910
So these are the method parameter variables.

67
00:04:41,690 --> 00:04:46,210
And the five parameters and we are converting it into XML.

68
00:04:46,220 --> 00:04:48,350
So let's not worry about this piece of code.

69
00:04:48,350 --> 00:04:53,780
It just takes a Java object here, the book object, and it converts it into XML.

70
00:04:54,080 --> 00:04:58,330
The process of converting a Java object into XML or into any other format.

71
00:04:58,340 --> 00:05:01,820
Normally it is referred to as marshalling and extreme.

72
00:05:01,820 --> 00:05:03,740
Here is a third party library.

73
00:05:04,160 --> 00:05:06,800
It comes from this company called ThoughtWorks.

74
00:05:06,800 --> 00:05:09,980
So Extreme is a third party library which is being used here.

75
00:05:10,550 --> 00:05:18,500
Even Java JDK also has something called Ajax B, x, b, it can also be used, but the problem with

76
00:05:18,500 --> 00:05:23,600
that is that the class itself, the nested class, has to be a static member class.

77
00:05:23,780 --> 00:05:28,460
It does not work with local classes and that's the reason I had to use this extreme.

78
00:05:28,460 --> 00:05:33,470
So extreme is also the JAR file is available in the resources and the center code is also available

79
00:05:33,470 --> 00:05:37,310
in resources so you can download and test it out on your end.

80
00:05:38,090 --> 00:05:45,680
So here the writer object is there and it would have the XML data and it is simply converting it into

81
00:05:45,680 --> 00:05:47,210
two string and returning it.

82
00:05:47,210 --> 00:05:49,010
And we have the main method here.

83
00:05:49,010 --> 00:05:53,540
So the main method we are printing the XML string that is that is being written.

84
00:05:53,570 --> 00:05:58,610
So we are invoking the book as XML method and we are passing the data, some data.

85
00:05:58,610 --> 00:06:03,290
It's not important here and we are printing the retained XML string.

86
00:06:03,290 --> 00:06:04,670
So let me run this.

87
00:06:05,560 --> 00:06:13,240
So as you can see, it has all of this data XML string here, book ID title rating, FP likes count

88
00:06:13,240 --> 00:06:16,710
and tweet count and all of this data has been passed here.

89
00:06:16,720 --> 00:06:23,230
The rating, the the counts, the social data and a book object has been created and it has been translated

90
00:06:23,230 --> 00:06:24,220
into XML.

91
00:06:24,850 --> 00:06:32,860
Now the reason we are using a class here, a local class here, because it doesn't make sense to define

92
00:06:32,860 --> 00:06:37,660
it as some other nested class within some other nested class outside of the method.

93
00:06:37,660 --> 00:06:42,640
Because if you are doing that, it means that you would want to reuse that particular nested class.

94
00:06:42,880 --> 00:06:44,830
In this case, we do not want to reuse it.

95
00:06:44,830 --> 00:06:49,180
It's only the scope of this particular class is only within the method.

96
00:06:49,360 --> 00:06:55,930
Now we might have other methods also like get movie XML or get web link as XML and stuff like that.

97
00:06:55,930 --> 00:06:58,090
So they will have their own classes.

98
00:06:58,420 --> 00:07:03,880
But if there are multiple methods which are which are going to share a particular book class, like

99
00:07:03,880 --> 00:07:09,610
for example, we have this get book as XML, let's say we have a method called get book as JSON.

100
00:07:09,610 --> 00:07:16,420
Then those two methods can use the same class, in which case we can use a non-local class, a non-local

101
00:07:16,420 --> 00:07:21,220
nested class, like a static member class or a non static member class.

102
00:07:21,880 --> 00:07:28,720
But here, since the scope of this class is only within a method, so we could make use of a local class

103
00:07:28,720 --> 00:07:29,050
here.

104
00:07:29,050 --> 00:07:32,200
So that's one use case where we can, we can use this.

105
00:07:32,770 --> 00:07:33,910
So that's about it.

106
00:07:33,910 --> 00:07:38,860
So we have seen how a local class can be used and all of the data is available in the resources section.

107
00:07:39,070 --> 00:07:42,010
And thank you and happy coding.

