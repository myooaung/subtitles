1
00:00:00,980 --> 00:00:02,840
Now let's look at polymorphism.

2
00:00:03,350 --> 00:00:09,590
It is very likely that you must have heard of both inheritance as well as polymorphism, even before

3
00:00:09,590 --> 00:00:10,910
you enroll in this course.

4
00:00:11,420 --> 00:00:17,840
We already looked at what inheritance is and polymorphism is another awesome feature of object oriented

5
00:00:17,840 --> 00:00:20,990
programming and it exists due to inheritance.

6
00:00:21,320 --> 00:00:23,240
That is because we have an inheritance.

7
00:00:23,240 --> 00:00:25,850
We are able to take advantage of polymorphism.

8
00:00:26,390 --> 00:00:30,530
So let's look at what polymorphism is and what benefits we can have from it.

9
00:00:31,970 --> 00:00:35,330
Every class defines a contract through its methods.

10
00:00:36,220 --> 00:00:39,520
That is, it announces that I have these kinds of methods.

11
00:00:40,210 --> 00:00:46,150
Now, if the class is public and if it has public methods, then the contract is the API.

12
00:00:47,550 --> 00:00:54,600
Now if class is a super type, then it's contract is also defining a common protocol for all its subtypes.

13
00:00:55,880 --> 00:01:02,510
That is, it is announcing that both myself and all my subtribes have these kinds of methods.

14
00:01:02,960 --> 00:01:08,870
And we know that inheritance permits this as subtribes will inherit all the methods defined in the super

15
00:01:08,870 --> 00:01:09,340
type.

16
00:01:10,200 --> 00:01:13,400
Nobody finding such a common protocol for its subtypes.

17
00:01:13,410 --> 00:01:18,810
Super type is also providing the benefit of polymorphism, and let's see what it means.

18
00:01:20,700 --> 00:01:21,750
Polymorphism.

19
00:01:21,750 --> 00:01:24,900
A super type can be assigned any of its subtypes.

20
00:01:25,660 --> 00:01:31,090
For example, let's consider this method update profile which updates the profile information of a user.

21
00:01:31,480 --> 00:01:33,970
So the methods parameter is off type user.

22
00:01:34,630 --> 00:01:37,780
So obviously we can pass a user object to this method.

23
00:01:38,740 --> 00:01:44,860
But due to polymorphism, we can pass an instance of any subclass of the user class.

24
00:01:45,430 --> 00:01:46,660
This is possible.

25
00:01:46,690 --> 00:01:51,040
A super type is defining the common protocol for all its subtypes.

26
00:01:51,580 --> 00:01:55,430
That is anything you can do with a super type object within this method.

27
00:01:55,450 --> 00:01:59,710
You can also do the same with any of the objects of its subtypes.

28
00:02:00,620 --> 00:02:01,990
That is within this method.

29
00:02:02,000 --> 00:02:07,940
If you are invoking a method on the user object, then that same method will still be invoked even if

30
00:02:07,940 --> 00:02:10,039
an object of subtype is passed.

31
00:02:10,820 --> 00:02:12,800
So what is the benefit of this?

32
00:02:13,760 --> 00:02:16,610
One is that cord is much more flexible.

33
00:02:16,790 --> 00:02:19,400
That is code is less susceptible to change.

34
00:02:19,730 --> 00:02:20,870
And what does that mean?

35
00:02:21,380 --> 00:02:25,520
For example, user class can acquire new subclasses in future.

36
00:02:26,140 --> 00:02:30,040
But this method update profile doesn't have to change at all.

37
00:02:30,490 --> 00:02:32,020
That is, it would remain the same.

38
00:02:32,500 --> 00:02:35,410
So a few more changes imply fewer bugs.

39
00:02:36,630 --> 00:02:38,400
And the code is also a lot cleaner.

40
00:02:38,910 --> 00:02:44,460
Now, without polymorphism, we would have maintained for different versions of update profile method

41
00:02:44,460 --> 00:02:46,410
for the four different types of users.

42
00:02:46,860 --> 00:02:52,350
That is, we would have one update profile method with the user as parameter and one with staff as parameter

43
00:02:52,350 --> 00:02:53,100
and so on.

44
00:02:53,670 --> 00:02:59,820
Also, with every newly added user type, a new update profile method would have to be created, but

45
00:02:59,820 --> 00:03:04,260
now we have only a single method that is less code and also clean code.

46
00:03:05,170 --> 00:03:11,680
So here user can take any form and hence this feature has been named as polymorphism.

47
00:03:12,490 --> 00:03:16,690
In this example, method parameter is a polymorphic reference.

48
00:03:16,870 --> 00:03:18,700
That is how it is referred to as.

49
00:03:19,300 --> 00:03:23,410
However, even the method return type can be a polymorphic reference.

50
00:03:25,170 --> 00:03:27,150
So we set up with polymorphism.

51
00:03:27,180 --> 00:03:30,240
A super type can be assigned any of its subtypes.

52
00:03:30,870 --> 00:03:36,810
It means that the type of object reference and the actual object referenced can be different.

53
00:03:37,750 --> 00:03:44,440
In this case, the type of object reference has to be a super type of the actual object type that is

54
00:03:44,440 --> 00:03:45,370
being referenced.

55
00:03:46,560 --> 00:03:52,890
In this example declaration, the reference type on the left is user, while the actual object referenced

56
00:03:52,890 --> 00:03:56,610
is ED and we know that user is a super type of editor.

57
00:03:57,150 --> 00:04:03,090
Before polymorphism, all the declarations we looked at have same type on either side of the assignment.

58
00:04:04,860 --> 00:04:08,160
Now that reference type and object type can be different.

59
00:04:08,190 --> 00:04:11,640
There is something important you need to know about method invocation.

60
00:04:13,330 --> 00:04:20,470
Compiler uses reference type to decide on whether a method can be invoked on an object reference or

61
00:04:20,470 --> 00:04:20,890
not.

62
00:04:21,370 --> 00:04:26,050
So it doesn't use the object type, but it uses the reference type to make this decision.

63
00:04:26,860 --> 00:04:32,680
Here in this declaration reference type is user, an object type is editor and we get a compiler error

64
00:04:32,680 --> 00:04:36,910
when we try to invoke a review method on the reference variable.

65
00:04:37,450 --> 00:04:43,180
That's because compiler knows that user class, which is the reference type, does not have this method.

66
00:04:44,670 --> 00:04:51,390
But at runtime, JVM uses the actual object type to decide on which method is invoked.

67
00:04:52,350 --> 00:04:57,480
And Jim invokes the most specific version of the method in the inheritance tree.

68
00:04:57,720 --> 00:05:01,440
Starting from the object type and moving upwards in the tree.

69
00:05:01,920 --> 00:05:03,630
Let's actually look at an example.

70
00:05:05,530 --> 00:05:07,750
Here is the class diagram from our case study.

71
00:05:08,140 --> 00:05:10,780
Let's say we have this declaration that we saw earlier.

72
00:05:11,700 --> 00:05:15,360
Next we are invoking post a review method on user variable.

73
00:05:16,140 --> 00:05:20,310
Now there are two implementations of this method one in user class and one in staff.

74
00:05:21,400 --> 00:05:24,190
And GM would invoke the Washington stuff.

75
00:05:24,490 --> 00:05:29,240
That's because GM starts searching for this method in the inheritance tree.

76
00:05:29,260 --> 00:05:34,210
Starting from editor onwards, as editor is the object type in the declaration.

77
00:05:34,990 --> 00:05:40,750
So as it climbs up the inheritance tree from editor, it will find a method in staff class.

78
00:05:41,290 --> 00:05:44,920
So JVM tries to find the most specific version of the method.

79
00:05:46,670 --> 00:05:48,800
Next off, Save a blink method is invoked.

80
00:05:49,040 --> 00:05:52,760
Then JVM invokes the only version in the user class.

81
00:05:53,670 --> 00:05:58,860
Now let's assume that say weblink method internally invokes post review method.

82
00:05:59,760 --> 00:06:03,000
Then can you guess which version of the method would be invoked?

83
00:06:03,420 --> 00:06:06,060
Would it invoke post review in user class?

84
00:06:06,090 --> 00:06:08,490
A safe web link is also in user class.

85
00:06:09,450 --> 00:06:13,500
No, it would still invoke the Posture Review method and the staff class.

86
00:06:13,920 --> 00:06:19,260
And that's because JVD once again starts exploring from editor class onwards.

87
00:06:19,500 --> 00:06:22,680
As editor is the object type that is being referenced.

88
00:06:23,700 --> 00:06:25,200
And that's about polymorphism.

89
00:06:25,410 --> 00:06:30,630
The main takeaway is that polymorphism allows us to write code that is flexible.

90
00:06:31,110 --> 00:06:34,200
That is code that is less susceptible to change.

91
00:06:34,560 --> 00:06:40,710
And the second benefit is it allows us to write less code, and consequently the code is cleaner.

92
00:06:41,570 --> 00:06:44,570
Let me now give a very quick demo of what we learned.

93
00:06:46,310 --> 00:06:49,640
In this demo, we will test two things that we have learned.

94
00:06:50,400 --> 00:06:56,750
First word is the main polymorphism feature that allows subclass objects to be assigned to a super class

95
00:06:56,750 --> 00:06:57,530
reference.

96
00:06:58,130 --> 00:07:00,560
Next, we will test the method invocation concept.

97
00:07:01,330 --> 00:07:06,530
So here we have three classes User, Java, Staff, Java and Java.

98
00:07:07,060 --> 00:07:13,980
Just like the way we have in our case study and user Java that is the user class is the superclass.

99
00:07:13,990 --> 00:07:19,300
We know that and all three classes reside in this package called Semantic Square.

100
00:07:19,330 --> 00:07:21,440
Oop staff dot java.

101
00:07:21,460 --> 00:07:28,540
We know that it extends user and editor class extends staff and within user we have this method called

102
00:07:28,540 --> 00:07:35,830
print user type and all it does is simply print the word user and staff also has the same method, but

103
00:07:35,830 --> 00:07:40,930
it prints staff editor also has the same method and it prints editor.

104
00:07:41,080 --> 00:07:46,000
Now there is a fourth class, a tester class which is called a user test.

105
00:07:46,570 --> 00:07:52,210
It also has the same method print user type, which has a parameter user.

106
00:07:52,210 --> 00:07:54,400
So that's a polymorphic reference type.

107
00:07:54,640 --> 00:08:01,330
And all it does is it invokes the method print user type for the object that is being passed here.

108
00:08:02,580 --> 00:08:04,110
And this is the main method here.

109
00:08:04,470 --> 00:08:07,320
And user test is also in the same package.

110
00:08:07,800 --> 00:08:15,210
So here initially, initially, we are declaring three variables user, staff and editor, and the reference

111
00:08:15,210 --> 00:08:16,890
type is user for all of them.

112
00:08:17,280 --> 00:08:20,970
And for the user variable, the object type is user.

113
00:08:21,240 --> 00:08:24,360
And for the staff variable, the object type is staff.

114
00:08:24,360 --> 00:08:26,490
And for editor it is editor.

115
00:08:27,150 --> 00:08:34,860
Now we are first creating an instance of user test and then we are invoking its only method, print

116
00:08:34,860 --> 00:08:38,400
user type and we are passing user object to it.

117
00:08:38,850 --> 00:08:42,640
And then in this statement we are passing the staff object under.

118
00:08:42,659 --> 00:08:45,060
Then the third one, we are passing the editor object.

119
00:08:45,060 --> 00:08:51,150
So we are passing three different objects and the reference type is just user.

120
00:08:51,510 --> 00:08:56,460
So we discussed this, we said that that's the benefit of polymorphism, right?

121
00:08:56,460 --> 00:09:02,500
We can just have one method and in future, if we add any other objects like email, admin or chief

122
00:09:02,520 --> 00:09:05,760
editor, we don't have to make any changes.

123
00:09:05,760 --> 00:09:09,060
We don't have to change this method and we can simply use the same method.

124
00:09:09,330 --> 00:09:13,140
So it's, it gives us flexible code and it's also lesser code.

125
00:09:13,140 --> 00:09:18,000
You don't have to maintain three different methods for each of the user objects.

126
00:09:18,000 --> 00:09:19,680
So let me just run this.

127
00:09:20,560 --> 00:09:24,220
And it prints user when the user object got passed.

128
00:09:24,220 --> 00:09:30,130
When staff got passed, it printed staff because it invoked the print user type method of the staff

129
00:09:30,130 --> 00:09:31,330
object that got passed.

130
00:09:31,330 --> 00:09:33,360
And then for editor it printed editor.

131
00:09:33,370 --> 00:09:37,120
So that's part one of our demo.

132
00:09:37,120 --> 00:09:40,180
Now let's do the part to.

133
00:09:41,900 --> 00:09:45,050
So user Java has these two methods.

134
00:09:45,050 --> 00:09:49,260
Save Weblink and post a review and save a blank.

135
00:09:49,280 --> 00:09:55,760
It just prints this message user column save web link and it is also invoking the post review method

136
00:09:55,760 --> 00:09:56,930
and post the review method.

137
00:09:56,940 --> 00:09:59,390
Also we have this text that's getting printed.

138
00:09:59,930 --> 00:10:05,900
User It just means that we are inside user class and then we are printing the name of the method and

139
00:10:05,900 --> 00:10:06,290
staff.

140
00:10:06,290 --> 00:10:14,510
Dot Java has just the post review method just like in the case study and editor just has this empty

141
00:10:14,510 --> 00:10:15,830
method approved review.

142
00:10:16,250 --> 00:10:23,810
And so let's just go back to user test and let's just consider this declaration here because it helps

143
00:10:23,810 --> 00:10:25,550
us to test the method invocation.

144
00:10:25,550 --> 00:10:33,350
So let me just say editor dot now you can see this the benefit of using an ID, it gives this dropdown

145
00:10:33,350 --> 00:10:36,800
with all the methods that the user class has.

146
00:10:37,100 --> 00:10:43,040
So let me just try to add approve review which is inside the editor.

147
00:10:43,310 --> 00:10:47,210
But compiler says that there is no approved review method.

148
00:10:47,210 --> 00:10:50,930
That's because compiler is looking at the reference type.

149
00:10:50,930 --> 00:10:51,380
Right.

150
00:10:51,380 --> 00:10:54,500
We discuss this so it's not going to look at the object type.

151
00:10:54,500 --> 00:10:55,940
So this is not going to work.

152
00:10:56,120 --> 00:10:58,130
So let me just comment this out.

153
00:10:59,310 --> 00:11:01,450
Now let's call Ed.

154
00:11:01,470 --> 00:11:03,480
Dot post a review.

155
00:11:05,080 --> 00:11:08,800
Let me just comment these three out.

156
00:11:10,170 --> 00:11:10,590
Okay.

157
00:11:10,590 --> 00:11:12,330
Let me just run this.

158
00:11:13,440 --> 00:11:15,870
Now it says staff post a review.

159
00:11:15,870 --> 00:11:18,480
So post a review and the staff class has been invoked.

160
00:11:18,900 --> 00:11:27,420
So Gvm is actually searching the inheritance tree starting from editor, and it is going upwards towards

161
00:11:27,450 --> 00:11:33,690
user class and it could find the method and staff even though there was this the same method end user.

162
00:11:33,960 --> 00:11:35,940
So that's post a review.

163
00:11:35,940 --> 00:11:39,120
Next, let me comment this out.

164
00:11:39,120 --> 00:11:42,450
So the more specific method was accessed.

165
00:11:43,850 --> 00:11:45,500
Called Save the Blink.

166
00:11:46,700 --> 00:11:48,830
And on this.

167
00:11:49,530 --> 00:11:53,670
Now it's first invoked save a web link in the user class.

168
00:11:53,670 --> 00:11:55,110
So that got printed.

169
00:11:55,110 --> 00:12:01,310
And we know that Save Web link is in turn invoking post review and post review.

170
00:12:01,320 --> 00:12:06,420
It did not invoke the one user, but it invoked the one and stuff.

171
00:12:06,870 --> 00:12:14,760
We already discussed this and we said that once again because JVM is going to start at search from editor,

172
00:12:14,760 --> 00:12:18,630
because editor is the object type and that's about it.

173
00:12:18,630 --> 00:12:20,370
That's about polymorphism.

