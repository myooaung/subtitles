1
00:00:02,100 --> 00:00:02,890
Hi there.

2
00:00:02,910 --> 00:00:04,080
This is the Motley Crew.

3
00:00:04,080 --> 00:00:05,010
And welcome back.

4
00:00:05,130 --> 00:00:08,790
So we are now done with generics, which was a pretty long chapter.

5
00:00:09,270 --> 00:00:11,350
It was a very comprehensive coverage.

6
00:00:11,370 --> 00:00:17,790
And now let's go ahead and quickly review all the important features that we discussed in this chapter.

7
00:00:19,540 --> 00:00:26,770
You may recall that the main motivation for introducing generics was to ensure type safety at compile

8
00:00:26,770 --> 00:00:27,220
time.

9
00:00:27,760 --> 00:00:34,990
Before generics was introduced in Java five, there was always a risk of running into runtime exceptions

10
00:00:34,990 --> 00:00:36,970
that were related to type safety.

11
00:00:37,480 --> 00:00:44,320
So generics is purely a compile time concept and there is no generics at runtime.

12
00:00:46,280 --> 00:00:53,240
You may recall this example from the very first lecture and we said that this is how a class in pre

13
00:00:53,240 --> 00:00:54,980
generics world looked like.

14
00:00:55,490 --> 00:01:00,560
The stock class here can be used for storing and retrieving any object.

15
00:01:01,010 --> 00:01:08,120
So the method parameter of set method is of object type and the return type of getter is also of object

16
00:01:08,120 --> 00:01:08,510
type.

17
00:01:10,290 --> 00:01:17,310
Then we had the developer, John, who stores the date instance from the Java SQL package and he also

18
00:01:17,310 --> 00:01:25,560
retrieves the same object later and applies a cast in order to convert from object to date as the method

19
00:01:25,560 --> 00:01:26,880
returns an object.

20
00:01:28,480 --> 00:01:36,970
Next, Anita uses the same store instance that John created and resets the Date Object Store, but she

21
00:01:36,970 --> 00:01:42,520
sets a date instance from Java util package rather than from Java SQL package.

22
00:01:43,750 --> 00:01:50,320
And later, Jon Scott once again uses the same store instance and retrieves the data object.

23
00:01:50,320 --> 00:01:57,400
And he also applies the data cast from Java or SQL, as that was what he used earlier while storing

24
00:01:57,400 --> 00:01:58,660
the date instance.

25
00:01:59,140 --> 00:02:08,380
And this would give a class cast exception at runtime as the date object now is from Java Util which

26
00:02:08,380 --> 00:02:12,100
cannot be casted to Java SQL date.

27
00:02:12,930 --> 00:02:17,370
Java is a type safe language and hence this exception was generated.

28
00:02:18,000 --> 00:02:25,290
So language designers wanted to identify such kind of issues at compile time itself, and hence they

29
00:02:25,290 --> 00:02:26,700
introduced generics.

30
00:02:28,410 --> 00:02:31,720
So here is the same store class but with generics here.

31
00:02:31,740 --> 00:02:38,340
Type parameter to use used which also acts as the type for the method parameter in the set method and

32
00:02:38,340 --> 00:02:41,010
also as the return type for the getter.

33
00:02:41,890 --> 00:02:44,410
He is also the type, for instance, variable a.

34
00:02:46,370 --> 00:02:52,760
And here is John and Anita's quote, Due to use of generics, Anita's code does not even compile as

35
00:02:52,760 --> 00:02:56,750
she cannot set a date store.

36
00:02:56,750 --> 00:03:04,670
Instance can take only a date instance from Java or SQL as well specified when it was created by John.

37
00:03:06,970 --> 00:03:14,080
Now another user, Raj, can use the same generic class store in order to store a book instance.

38
00:03:14,440 --> 00:03:20,080
With this, one can only store and retrieve a book instance or any of its subtypes.

39
00:03:21,840 --> 00:03:28,350
So with generics, we get compile time type safety and as an add on, the code is also cleaner as we

40
00:03:28,350 --> 00:03:30,960
do not have to apply any explicit costs.

41
00:03:31,230 --> 00:03:32,820
Compiler does that for us.

42
00:03:33,420 --> 00:03:40,620
Code is also expressive as the programmer's intention is very clear, like storing a date instance or

43
00:03:40,620 --> 00:03:49,380
a book instance code is also generic in the sense that client code can store any type of data like book

44
00:03:49,380 --> 00:03:50,460
or date.

45
00:03:51,290 --> 00:03:55,550
Of course, that can be restricted by using bounded type parameters.

46
00:03:56,410 --> 00:04:03,130
Mostly generics and contact only with container type classes which are seen with collections framework.

47
00:04:03,580 --> 00:04:08,260
It may not be very common for you to write such generic classes.

48
00:04:08,530 --> 00:04:10,150
Just depends on your project.

49
00:04:11,960 --> 00:04:17,660
So favor generic types when possible as this item from effective Java suggests.

50
00:04:19,029 --> 00:04:26,380
But inexperienced programmers may still create road types, thus compromising the benefit of generics,

51
00:04:26,620 --> 00:04:28,540
which is compiled type safety.

52
00:04:29,110 --> 00:04:32,290
So this item wants us not to do that.

53
00:04:32,650 --> 00:04:40,000
One reason why developers could be tempted to use raw types, especially for method parameters, is

54
00:04:40,000 --> 00:04:47,980
because they don't know or they do not care what the object past US argument would store in such kind

55
00:04:47,980 --> 00:04:50,450
of a situation instead of using raw type.

56
00:04:50,470 --> 00:04:58,120
One can use unbounded wild card type which provides the benefit of compile time type safety, which

57
00:04:58,120 --> 00:04:59,890
you do not get with raw type.

58
00:05:02,010 --> 00:05:06,300
And here is an example use of an unbounded wild card type.

59
00:05:06,900 --> 00:05:11,070
Here we can pass a list containing any type of element.

60
00:05:12,950 --> 00:05:18,740
I know that wild card can only be used as a type argument, not as a type parameter.

61
00:05:20,230 --> 00:05:20,560
Next.

62
00:05:20,560 --> 00:05:28,090
The question is why not simply use object as type argument instead of a wild card as object is the superclass

63
00:05:28,090 --> 00:05:32,260
of all classes and hence can be assigned any object.

64
00:05:33,490 --> 00:05:40,870
But the limitation with using object as type argument is that you can only assign an instance that also

65
00:05:40,870 --> 00:05:43,030
has object as type argument.

66
00:05:43,510 --> 00:05:46,960
That is, you cannot assign something like a store of string.

67
00:05:48,200 --> 00:05:54,500
And we know that this is due to invariance property which generic size which also helps with compile

68
00:05:54,500 --> 00:05:55,520
time type safety.

69
00:05:57,320 --> 00:06:04,580
But with wild card, we can assign an instance of any type that is store of a string or store of integer

70
00:06:04,580 --> 00:06:05,810
or anything else.

71
00:06:06,050 --> 00:06:12,500
So that's the benefit of using an unbounded wild card over using object as type argument.

72
00:06:14,560 --> 00:06:21,160
And here is the Invariance property book is a subtype of bookmark, but list of book is not a subtype

73
00:06:21,160 --> 00:06:22,810
of list of bookmark.

74
00:06:24,770 --> 00:06:30,250
However for the same type argument inheritance of generic types hold.

75
00:06:30,800 --> 00:06:37,730
So if type argument is bookmark then an array list of bookmark can be assigned to a list of bookmark

76
00:06:37,760 --> 00:06:44,420
as array list is a subtype of list can be a little bit confusing, but just keep in mind that within

77
00:06:44,450 --> 00:06:47,270
variants, type arguments are different.

78
00:06:49,270 --> 00:06:52,780
This was the example we saw on why Invariance is needed.

79
00:06:52,990 --> 00:06:58,180
This example explains what happens if invariants is allowed with generics.

80
00:06:58,600 --> 00:07:04,600
Here we are passing a list of objects as argument, but in the method a movie object is being added

81
00:07:04,600 --> 00:07:12,250
to this list and this could result in a runtime exception as the invoking code is always expecting that

82
00:07:12,250 --> 00:07:15,130
the list would contain only book objects.

83
00:07:15,760 --> 00:07:17,770
So invariance is needed.

84
00:07:19,710 --> 00:07:26,910
However, we next discussed about how invariance is restrictive in certain harmless scenarios, although

85
00:07:26,910 --> 00:07:28,980
it ensures compile time type safety.

86
00:07:29,340 --> 00:07:34,590
One example was the display method, which would take a list of bookmarks and simply display them.

87
00:07:34,860 --> 00:07:38,790
So no intention of inserting wrong type of elements.

88
00:07:39,210 --> 00:07:45,150
But unfortunately, due to invariance, we cannot pass either a list of book or a list of movie in this

89
00:07:45,150 --> 00:07:45,660
case.

90
00:07:47,120 --> 00:07:53,870
So the workaround for such scenarios is to use either a per bonded wildcard or a generic method with

91
00:07:53,870 --> 00:07:55,400
a bonded type parameter.

92
00:07:57,010 --> 00:07:59,240
But we need to ensure type safety too.

93
00:07:59,380 --> 00:08:04,120
And hence compiler has this restriction on a upper bounded wildcard.

94
00:08:04,900 --> 00:08:11,680
We cannot invoke methods that use class level type parameters with any arguments except none.

95
00:08:12,520 --> 00:08:18,610
Otherwise, there is always the chance of invoking such methods and past data that could break type

96
00:08:18,610 --> 00:08:19,120
safety.

97
00:08:20,130 --> 00:08:25,140
So if we invoke such methods with anything other than null, we get a compiler error.

98
00:08:27,120 --> 00:08:32,370
Now with regards to invariants, we also discussed about the scenario where we would want to consume

99
00:08:32,370 --> 00:08:35,880
data and still be able to pass different arguments.

100
00:08:36,679 --> 00:08:40,429
We said that for this lower bound wild card can be used.

101
00:08:41,059 --> 00:08:47,060
For instance, here, the method aggregate uses a lower bounded wild card type to aggregate data.

102
00:08:47,820 --> 00:08:56,100
However, it can be invoked with either a list of bookmark or a list of object where object is the same

103
00:08:56,250 --> 00:09:02,190
type of bookmark, but it cannot be invoked with a list of subtype of bookmark.

104
00:09:04,310 --> 00:09:10,970
And here is the compiler restriction that would make a lower bound wild card type act as a consumer

105
00:09:10,970 --> 00:09:16,640
of data and at the same time ensures that compile time type safety is not compromised.

106
00:09:17,210 --> 00:09:26,000
So the rule says we can invoke methods that use class level type parameter only if argument is of lower

107
00:09:26,000 --> 00:09:28,880
bounded type or one of its subtypes.

108
00:09:30,860 --> 00:09:37,970
And we also discussed this important and interesting item which recommends using bonded wild cards to

109
00:09:37,970 --> 00:09:40,130
increase API flexibility.

110
00:09:40,970 --> 00:09:46,190
It says if parameterized type produces data use extents.

111
00:09:47,180 --> 00:09:50,810
And if parameter type consumes data use super.

112
00:09:51,670 --> 00:09:57,970
If parameter type produces data but does not know or care about type argument.

113
00:09:58,330 --> 00:10:00,250
Use unbounded wild card.

114
00:10:01,110 --> 00:10:08,400
Keep in mind that unbounded wild card is same as unbounded wild card, but with object as the invisible

115
00:10:08,400 --> 00:10:08,760
bond.

116
00:10:09,820 --> 00:10:16,270
Finally, if parameter type produces and consumes data, then you need to use exact match.

117
00:10:17,260 --> 00:10:20,050
Also you can remember the text mnemonic.

118
00:10:21,930 --> 00:10:25,620
And we also looked at few restrictions that go along with generics.

119
00:10:25,650 --> 00:10:31,080
One of them is that class level type parameter cannot be used in a static context.

120
00:10:31,650 --> 00:10:37,020
If our static method needs generic ness, then we can define a generic method.

121
00:10:38,970 --> 00:10:42,330
Another restriction is that type argument cannot be a primitive.

122
00:10:44,020 --> 00:10:48,850
And generics on arrays also do not mix well due to type safety concerns.

123
00:10:50,580 --> 00:10:57,450
And such kind of method overloading does not work where the methods would end up with the same signature

124
00:10:57,450 --> 00:10:58,860
after type erasure.

125
00:10:59,680 --> 00:11:04,690
Remember that type erasure helps with interoperability with legacy code.

126
00:11:05,970 --> 00:11:12,960
Keep in mind that with type erasure, the type parameter would be replaced with either object or the

127
00:11:12,960 --> 00:11:16,170
leftmost bond if one or more bounds exist.

128
00:11:18,040 --> 00:11:24,970
And finally, let's thank our awesome Java compiler for doing all these great things for us.

129
00:11:25,390 --> 00:11:33,170
It ensures compile time type safety inserts, class performs type inference and finally does type erasure.

130
00:11:33,190 --> 00:11:36,760
Does making generics a purely compile time concept?

131
00:11:37,890 --> 00:11:39,750
So that's the end of this chapter.

132
00:11:39,750 --> 00:11:42,290
And I hope you enjoyed learning about generics.

133
00:11:42,300 --> 00:11:49,440
And as mentioned in the introductory lecture, if needed, do review generics concepts once every week

134
00:11:49,440 --> 00:11:54,450
or a couple of weeks until you are completely comfortable with how it works.

135
00:11:55,050 --> 00:11:57,810
That said, thank you and good bye for now.

