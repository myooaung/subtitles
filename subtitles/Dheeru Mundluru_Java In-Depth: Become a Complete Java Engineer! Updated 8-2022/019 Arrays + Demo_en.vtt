WEBVTT
1
00:00:02.090 --> 00:00:02.910
Hello there.

2
00:00:02.930 --> 00:00:03.630
This is the Romans.

3
00:00:04.070 --> 00:00:05.060
And welcome back.

4
00:00:05.150 --> 00:00:13.310
We know that a variable is like a container that holds a single value, like a primitive or an object

5
00:00:13.310 --> 00:00:13.910
reference.

6
00:00:14.390 --> 00:00:20.780
But sometimes we would have a collection of similar values and we would want a variable to hold such

7
00:00:20.780 --> 00:00:21.440
a collection.

8
00:00:21.860 --> 00:00:28.970
Such a variable that holds a collection of similar values is like a collection of containers and would

9
00:00:28.970 --> 00:00:31.010
represent some data structure.

10
00:00:31.710 --> 00:00:38.040
For instance, if we have to keep track of all the course titles that a student has registered for,

11
00:00:38.250 --> 00:00:44.790
then instead of having a separate variable to hold each of those course titles like Course, Title one,

12
00:00:44.790 --> 00:00:52.110
Course, Title two, and so on, we can store all those course titles in a single data structure which

13
00:00:52.110 --> 00:00:54.180
is represented by some variable.

14
00:00:55.120 --> 00:01:03.280
A data structure is an organized collection of similar data, and the software gets all of its power

15
00:01:03.280 --> 00:01:06.610
through the different data structures that it uses.

16
00:01:07.240 --> 00:01:14.650
And if we consider sites like Amazon where the display a list of products or a list of reviews of a

17
00:01:14.650 --> 00:01:21.100
particular product, all of those items which are similar to each other, are stored in a data structure,

18
00:01:21.430 --> 00:01:24.940
and they process the data structure and display those items.

19
00:01:25.480 --> 00:01:29.980
So data structures are very fundamental to any programming language.

20
00:01:30.550 --> 00:01:35.740
Later in the Collections Framework section, we will study several data structures that come with the

21
00:01:35.740 --> 00:01:36.940
Java Library.

22
00:01:37.270 --> 00:01:44.770
But for now, let's look at one very basic and fundamental data structure, which is also built into

23
00:01:44.770 --> 00:01:46.570
every programming language.

24
00:01:46.600 --> 00:01:47.830
And it is an array.

25
00:01:48.580 --> 00:01:55.360
In fact, it is so basic that even some of the data structures that we study later are built on top

26
00:01:55.360 --> 00:01:56.140
of arrays.

27
00:01:56.710 --> 00:02:00.040
So let's go ahead and learn what an array is.

28
00:02:01.940 --> 00:02:10.759
Another is basically a container object that holds a fixed number of values of a single type.

29
00:02:11.240 --> 00:02:16.520
Some of the terms in this definition are emphasized in bold, and let's understand what they mean.

30
00:02:17.240 --> 00:02:23.250
The term object in this definition implies a Java object that is in Java.

31
00:02:23.270 --> 00:02:30.500
An array is basically an object and hence will be stored on the heap like any other object.

32
00:02:31.400 --> 00:02:37.400
So in Java an object can be an array, or it can also be an instance of a class.

33
00:02:38.250 --> 00:02:43.500
Since an area is an object, the variable referencing it is an object reference.

34
00:02:44.300 --> 00:02:45.720
Next my fixed number.

35
00:02:45.740 --> 00:02:53.540
We mean that the number of items an array can store is specified at the creation time and that number

36
00:02:53.540 --> 00:02:55.340
cannot be changed thereafter.

37
00:02:56.090 --> 00:02:57.860
So the array size is fixed.

38
00:02:58.640 --> 00:03:05.600
And finally, by single type we mean that the items in the array should be of a single data type, like

39
00:03:05.600 --> 00:03:09.740
an eight or double or car or even some class.

40
00:03:09.890 --> 00:03:15.890
That is, it can also store object references, but only condition is that they all have to be of the

41
00:03:15.890 --> 00:03:17.090
same data type.

42
00:03:17.930 --> 00:03:22.640
And here is an illustration of an array which contains four integer values.

43
00:03:23.180 --> 00:03:28.340
Let's assume the array represents exam scores of a student in a particular course.

44
00:03:29.060 --> 00:03:33.590
Let's say the first 190 represents score in midterm.

45
00:03:33.590 --> 00:03:36.380
1/2 is the score in midterm two.

46
00:03:36.410 --> 00:03:38.410
Third, the final exam score.

47
00:03:38.420 --> 00:03:41.120
And fourth is the project score.

48
00:03:42.090 --> 00:03:49.680
Now in terms of terminology, each item in the array is referred to as an element of the array, and

49
00:03:49.680 --> 00:03:57.510
an element is accessed by its index number, where index number is the numerical position of the element

50
00:03:57.510 --> 00:04:01.230
in the array and index number starts with zero.

51
00:04:01.770 --> 00:04:09.390
So the first element is that index zero, second index one third at index two, and for that index three.

52
00:04:10.360 --> 00:04:17.740
Now, if the variable holding this array is named as scores as these are exam scores, then to access

53
00:04:17.740 --> 00:04:26.350
the third element of the array, we would say scores of two as two is the index number of the third

54
00:04:26.350 --> 00:04:29.740
element, which represents the final exam score.

55
00:04:30.100 --> 00:04:33.580
So the index number will be specified in the square brackets.

56
00:04:34.030 --> 00:04:38.470
Now let's head over to our editor and see how we can create such an array.

57
00:04:38.740 --> 00:04:41.740
And we will also see how the array elements can be accessed.

58
00:04:42.010 --> 00:04:47.440
We'll also see how to find the size of the array, and we'll just learn different things associated

59
00:04:47.440 --> 00:04:48.280
with the array.

60
00:04:49.210 --> 00:04:50.270
When it comes to arrays.

61
00:04:50.290 --> 00:04:53.470
It is very important to practice the syntax.

62
00:04:53.860 --> 00:04:59.860
And so I encourage you to fire up your editor and type everything that will be shown in the demo.

63
00:05:00.310 --> 00:05:02.350
So let's go ahead and do that.

64
00:05:04.790 --> 00:05:05.030
Okay.

65
00:05:05.030 --> 00:05:08.690
Here we are in the Basics Demo class and in the main method.

66
00:05:08.690 --> 00:05:14.440
The previous invocation has been commented out and a new method called arrays has been introduced.

67
00:05:14.450 --> 00:05:17.990
So here is where we are going to write our code and here is the template.

68
00:05:17.990 --> 00:05:23.120
So just go ahead and type in this template code and it is invoked from the main method.

69
00:05:23.570 --> 00:05:28.730
So there are three different ways to create an array and we will look at all three of them.

70
00:05:28.730 --> 00:05:30.590
So let's start off with the first one.

71
00:05:30.980 --> 00:05:35.030
We are going to create the same array that we have seen in the slides.

72
00:05:35.030 --> 00:05:42.080
So it is an integer array which represents the scores of the student and different exams.

73
00:05:42.500 --> 00:05:43.730
So it was an integer array.

74
00:05:43.740 --> 00:05:50.420
So it will be of type eight and to tell that it is an array, we will have square brackets right after

75
00:05:50.420 --> 00:05:58.250
the data type and the name is course and we will also have the new operator remember that an array is

76
00:05:58.250 --> 00:06:04.850
an object and it is followed by the type again end and the size of the array, which is four.

77
00:06:05.150 --> 00:06:12.890
So if you recall the definition that we have seen, we said that the array will be of fixed type, it

78
00:06:12.890 --> 00:06:17.570
will have a fixed size that is the size of the array is specified at the creation time.

79
00:06:17.870 --> 00:06:24.110
So this is what it is and it cannot be changed and it also will have elements of the same data type.

80
00:06:24.110 --> 00:06:27.680
So it will it can only store values of any type.

81
00:06:28.130 --> 00:06:29.390
And it's also an object.

82
00:06:29.390 --> 00:06:31.610
And we can see the new operator here.

83
00:06:31.940 --> 00:06:34.520
Now, let's put some print statements.

84
00:06:35.450 --> 00:06:38.420
To print all of these values.

85
00:06:40.800 --> 00:06:41.760
Four of them.

86
00:06:42.030 --> 00:06:42.420
Right.

87
00:06:42.420 --> 00:06:45.330
So the first one is midterm one.

88
00:06:47.470 --> 00:06:56.590
And if you recall, we said that to access, you would see scores of the index number, an index numbering

89
00:06:56.590 --> 00:06:58.030
starts from zero.

90
00:06:58.060 --> 00:07:01.030
So the first element will be at zero at position.

91
00:07:01.030 --> 00:07:02.200
So that's what it is.

92
00:07:02.470 --> 00:07:04.870
Next we have midterm to.

93
00:07:05.800 --> 00:07:07.270
Then this will be.

94
00:07:09.340 --> 00:07:10.720
Let me fill these.

95
00:07:12.300 --> 00:07:12.920
One.

96
00:07:17.790 --> 00:07:21.210
This is the final and this is the project.

97
00:07:23.090 --> 00:07:28.880
So at this instance we have already created the array and let's see what it prints.

98
00:07:29.210 --> 00:07:33.650
So let's go into the basics directory, which is where we have this file.

99
00:07:40.250 --> 00:07:40.540
Okay.

100
00:07:40.550 --> 00:07:46.430
Trends zero because each of the elements will get a default of zero.

101
00:07:46.640 --> 00:07:50.560
So they need to be initialized and they have not yet been initialized.

102
00:07:50.570 --> 00:07:57.560
So by default, if you create an array, the elements will get the default value of the type of the

103
00:07:57.560 --> 00:07:59.090
array, which is an end.

104
00:07:59.090 --> 00:08:01.340
And we know that for it the default is zero.

105
00:08:01.340 --> 00:08:03.890
So let's go ahead and initialize this array.

106
00:08:04.010 --> 00:08:05.540
So it's just the same thing.

107
00:08:05.540 --> 00:08:09.620
So we need to assign a value here.

108
00:08:12.150 --> 00:08:14.550
Equal to let's have the same values.

109
00:08:14.550 --> 00:08:19.410
The first one was 90, and we just copy this.

110
00:08:28.880 --> 00:08:31.110
And the final one on the project is perfect.

111
00:08:31.110 --> 00:08:31.760
100.

112
00:08:32.360 --> 00:08:34.370
So let's recompile.

113
00:08:37.520 --> 00:08:39.799
And we consider different values.

114
00:08:40.220 --> 00:08:41.929
So this is how you would do it.

115
00:08:42.530 --> 00:08:48.020
Now, here, instead of this, you can also initialize it.

116
00:08:48.020 --> 00:08:53.360
This way you can have the square brackets in this way and you will not have any issues with that.

117
00:08:53.360 --> 00:09:03.080
It's perfectly valid, but I would prefer to have them here because on this side also we have it right

118
00:09:03.080 --> 00:09:08.320
after the type and I think it is much more clear, a much more readable if it is here.

119
00:09:08.330 --> 00:09:10.460
So at least I prefer to have it.

120
00:09:10.460 --> 00:09:11.420
And this way.

121
00:09:12.350 --> 00:09:16.520
The next thing is, we said that it is all of the elements have to be of the same type.

122
00:09:16.520 --> 00:09:24.950
So if you have a like a long here, then the compiler should obviously compile a complaint and as you

123
00:09:24.950 --> 00:09:26.210
can see, it says.

124
00:09:27.900 --> 00:09:28.590
Sorry.

125
00:09:29.710 --> 00:09:32.140
So it gives us a familiar compilation error.

126
00:09:32.140 --> 00:09:36.730
It says incompatible types, possible lossy conversion from long to end.

127
00:09:37.060 --> 00:09:39.220
So it's got to be of the same type.

128
00:09:39.220 --> 00:09:41.620
All of the elements have to be of the same type.

129
00:09:45.000 --> 00:09:52.830
So we can see that this whole declaration statement is very similar to the way we declare an object

130
00:09:52.830 --> 00:09:53.580
reference.

131
00:09:54.060 --> 00:09:58.140
It's just that the difference is that over here in this case, it is a perimeter.

132
00:09:58.530 --> 00:10:03.600
And with object references, like the ones that we have seen, we cannot have perimeter.

133
00:10:03.630 --> 00:10:06.360
But syntax is very similar with the new keyword.

134
00:10:06.360 --> 00:10:12.450
It's just that on this side we have this additional square brackets and here the parentheses is replaced

135
00:10:12.450 --> 00:10:15.360
by the square brackets with the size of the array.

136
00:10:16.350 --> 00:10:22.110
Now let's go ahead and create the second way of creating an array.

137
00:10:23.010 --> 00:10:24.630
So let me comment that out.

138
00:10:24.930 --> 00:10:30.960
So once again, it starts with ain't this scores equal to new?

139
00:10:30.990 --> 00:10:32.970
And so it looks very similar.

140
00:10:32.970 --> 00:10:36.120
But we'll have empty square brackets here.

141
00:10:36.300 --> 00:10:43.930
And we will say the values, the elements will be specified right here and braces.

142
00:10:43.950 --> 00:10:46.260
It's like the body of the array.

143
00:10:46.560 --> 00:10:50.190
So we are initializing it in this way, 80 and 100.

144
00:10:50.190 --> 00:10:57.480
So there are comma separated within the braces and you should not specify the size of the array.

145
00:10:57.510 --> 00:10:59.900
If you do, you will get a compilation error.

146
00:10:59.910 --> 00:11:02.970
So the size will be inferred implicitly.

147
00:11:03.240 --> 00:11:06.370
So it is implicitly inferred and you do not have to specify it.

148
00:11:06.390 --> 00:11:08.610
So we will see that we will get the same.

149
00:11:09.410 --> 00:11:11.120
Output as earlier.

150
00:11:12.690 --> 00:11:14.700
So that's the second way of doing it.

151
00:11:14.700 --> 00:11:18.390
So let me show you what happens if we put the size of the array.

152
00:11:18.480 --> 00:11:21.530
Let's see what the compilation error says.

153
00:11:22.080 --> 00:11:29.130
So it says Array creation with both dimension, expression and initialization is illegal.

154
00:11:29.400 --> 00:11:31.560
So this is the initialization part.

155
00:11:31.710 --> 00:11:34.230
So we cannot have something like this.

156
00:11:35.190 --> 00:11:38.550
So that is invalid and it's not permitted.

157
00:11:39.030 --> 00:11:40.650
So that's the second one.

158
00:11:42.920 --> 00:11:43.070
That.

159
00:11:43.280 --> 00:11:47.450
And third one is the simplest one.

160
00:11:47.450 --> 00:11:52.700
So this is simpler than this one, but this is even more simpler.

161
00:11:54.610 --> 00:12:00.100
All you need to do is just remove this new and end here and that's it.

162
00:12:00.610 --> 00:12:03.280
So you will just have the initialization part.

163
00:12:03.520 --> 00:12:05.260
So we are going to strip this off.

164
00:12:07.290 --> 00:12:08.790
And that's the third way.

165
00:12:11.510 --> 00:12:12.740
So that's it.

166
00:12:13.280 --> 00:12:16.280
Those are the three different ways of creating an aura.

167
00:12:16.550 --> 00:12:21.080
So these two, I think you will use it if you have just few elements.

168
00:12:21.080 --> 00:12:23.250
So you can just specify them here.

169
00:12:23.270 --> 00:12:28.920
But if you have a lot of elements, like 20 or 30, then you would do it in this way.

170
00:12:28.940 --> 00:12:34.510
And to initialize, perhaps you would use a control flow statement like a for loop.

171
00:12:34.520 --> 00:12:36.620
So we will look at for loops later on.

172
00:12:36.830 --> 00:12:40.370
But using that, you can easily initialize the elements.

173
00:12:40.640 --> 00:12:44.120
So if you have long arrays, that's what you might do.

174
00:12:44.750 --> 00:12:52.100
So we know that an array is an object, so which means that this is an object reference.

175
00:12:52.100 --> 00:12:54.590
And we know that object references.

176
00:12:54.620 --> 00:12:58.430
If not initialized, they will get a default off null.

177
00:12:58.460 --> 00:12:59.030
Right.

178
00:12:59.150 --> 00:13:01.750
So let's test that.

179
00:13:01.760 --> 00:13:05.060
So here in scores, let me make it static.

180
00:13:05.150 --> 00:13:09.740
We need to make it static in order to access from the static method.

181
00:13:09.800 --> 00:13:11.390
That will be discussed later.

182
00:13:11.930 --> 00:13:13.700
So this is what we have.

183
00:13:18.780 --> 00:13:27.570
So it says that we have a null pointer exception because scores is null and we are trying to say null

184
00:13:27.570 --> 00:13:28.650
of zero.

185
00:13:28.920 --> 00:13:34.680
So we looked at the null pointer exception when we looked at the object references in the object references

186
00:13:34.680 --> 00:13:35.430
lecture.

187
00:13:35.490 --> 00:13:38.640
The object reference was initialized with null.

188
00:13:38.670 --> 00:13:40.380
It was a default initialization.

189
00:13:40.380 --> 00:13:46.500
And when we try to access an element like an ID value, it gave us the null pointer exception.

190
00:13:46.500 --> 00:13:47.730
It's just the same thing here.

191
00:13:47.730 --> 00:13:54.150
So we are trying to access an element of the array, but the array is not there and it is it is null.

192
00:13:54.150 --> 00:13:56.910
So because of that we get the null pointer exception.

193
00:13:57.510 --> 00:14:02.970
So array can be null, but we can re initialize it, we can initialize it here separately.

194
00:14:03.330 --> 00:14:04.710
So let's do that.

195
00:14:04.710 --> 00:14:06.750
So let me just remove this here.

196
00:14:06.750 --> 00:14:08.520
Let's just comment on that line.

197
00:14:08.910 --> 00:14:10.050
So this is fine.

198
00:14:10.050 --> 00:14:13.560
So if you do that now, not this.

199
00:14:13.560 --> 00:14:15.300
Sorry, we also need this one.

200
00:14:16.610 --> 00:14:17.750
So this is good.

201
00:14:17.790 --> 00:14:19.400
Now, if we have this, it will.

202
00:14:22.990 --> 00:14:23.120
Okay.

203
00:14:23.290 --> 00:14:25.990
So we get the, the output that we need.

204
00:14:26.170 --> 00:14:32.470
So the array is initialized to null, but then the actual initialization, the object is created here

205
00:14:32.470 --> 00:14:34.600
and then we are initializing the values.

206
00:14:35.810 --> 00:14:39.020
So let me comment this M.O. this.

207
00:14:40.120 --> 00:14:44.440
And let's also do the same thing that the second one here.

208
00:14:44.890 --> 00:14:50.410
So let me just comment the type here, because the variable has already been declared.

209
00:14:50.410 --> 00:14:52.900
So you can do this like with a block code.

210
00:14:54.060 --> 00:14:59.310
So just use the block codes and this part is commented out on the rest of the line will be executed

211
00:14:59.310 --> 00:15:00.480
as a statement.

212
00:15:03.760 --> 00:15:03.890
Okay.

213
00:15:04.070 --> 00:15:05.300
So this is also good.

214
00:15:05.690 --> 00:15:09.590
Now, finally, let's also do the same thing for this one.

215
00:15:14.160 --> 00:15:14.620
OC.

216
00:15:18.580 --> 00:15:20.230
Now it gives an error.

217
00:15:20.530 --> 00:15:24.910
So it says that we cannot do this and we are getting a compilation error.

218
00:15:25.180 --> 00:15:32.200
That's because this sort of syntax can be used only in a declaration statement and you cannot use it

219
00:15:32.200 --> 00:15:34.750
to re initialize an array.

220
00:15:34.750 --> 00:15:38.770
Even this is like a re initialization because it is initialized to null.

221
00:15:38.950 --> 00:15:44.590
So this is not possible with the syntax as possible only in a declaration statement.

222
00:15:45.570 --> 00:15:46.530
Like this one.

223
00:15:47.870 --> 00:15:49.760
So that's the initialization.

224
00:15:49.760 --> 00:15:53.420
So initialization is possible only using the first two syntax.

225
00:15:53.630 --> 00:15:59.990
So let me remove this and let me also comment this out.

226
00:16:00.470 --> 00:16:09.140
Let's just have perhaps this one and let's say we want to know the size of the array, because very

227
00:16:09.140 --> 00:16:11.130
often we would need the size of the array.

228
00:16:11.150 --> 00:16:14.230
For instance, I mentioned about the for loop.

229
00:16:14.240 --> 00:16:19.790
So there we want to know the size of the array in order to access all of the elements.

230
00:16:19.790 --> 00:16:26.990
So to determine the size, what we will do is we will use a field in the array called length.

231
00:16:27.290 --> 00:16:28.510
Let me just show it to you.

232
00:16:28.520 --> 00:16:34.160
So we will just say so that would be, let's call it as number of exams.

233
00:16:34.940 --> 00:16:36.350
And that would be.

234
00:16:38.000 --> 00:16:38.720
Dot.

235
00:16:39.560 --> 00:16:40.120
Lent.

236
00:16:40.130 --> 00:16:42.100
So we would just say dot lent.

237
00:16:42.110 --> 00:16:48.730
So it is like a field and it will give us the length of the or the size of the array.

238
00:16:48.740 --> 00:16:51.890
So if at all you want to determine the size, this is what you will do.

239
00:16:51.890 --> 00:16:54.590
And this is something that you will be doing very often.

240
00:16:56.160 --> 00:16:58.410
So it prints the value for.

241
00:16:59.310 --> 00:16:59.490
Okay.

242
00:16:59.550 --> 00:17:03.270
So that's how you will determine the length or the size of the array.

243
00:17:03.480 --> 00:17:08.130
Now, many students or few students have asked me in the past.

244
00:17:09.109 --> 00:17:10.220
Can we do this?

245
00:17:11.000 --> 00:17:12.530
So this is not possible.

246
00:17:12.530 --> 00:17:20.420
This is a method and it is not a method that is associated with ideas, but length is a method in the

247
00:17:20.420 --> 00:17:24.589
string class and it gives us the length of the string.

248
00:17:24.859 --> 00:17:28.850
So that is the the number of characters that the string represents.

249
00:17:29.270 --> 00:17:30.950
But with Aria, you cannot do that.

250
00:17:30.950 --> 00:17:35.450
With Aria, you will only have the field, so you will just say dot length.

251
00:17:35.480 --> 00:17:40.760
So do not get confused with the length method that is completely different.

252
00:17:41.150 --> 00:17:42.230
So that's that.

253
00:17:42.620 --> 00:17:48.920
Now we know that the aria can have only four elements and we can access access them in this way.

254
00:17:49.070 --> 00:17:58.280
How about if we say minus one, which is a negative index and it is wrong, so if we compile it.

255
00:17:59.380 --> 00:18:00.280
Compliance, fine.

256
00:18:00.280 --> 00:18:06.460
But at runtime, when this particular statement got executed, the project where we are printing the

257
00:18:06.460 --> 00:18:10.150
project, it says our index out of bounds exception.

258
00:18:10.420 --> 00:18:16.360
So that's a runtime error and it says index minus one is out of bounds for the length four.

259
00:18:16.930 --> 00:18:24.550
So essentially we cannot access it can only be from 0 to 3 because the size is four.

260
00:18:24.910 --> 00:18:31.420
So you cannot have a negative number or if it is equal to greater than or equal to four, like four

261
00:18:31.420 --> 00:18:36.150
or five or the size of the array, then it is going to give us the same error.

262
00:18:36.160 --> 00:18:38.650
So the size of the area we know is four.

263
00:18:39.010 --> 00:18:44.650
So if the index is four, which is the size of the array or greater than that, we will once again get

264
00:18:44.650 --> 00:18:45.520
the same error.

265
00:18:45.640 --> 00:18:50.470
Or if it is a negative number, we will get that runtime error, the same runtime error.

266
00:18:55.480 --> 00:19:01.120
So as you can see it says our index out of bonds exception index for out of bounds for the length for.

267
00:19:01.930 --> 00:19:07.480
So it cannot be minus one or it cannot be greater than or equal to the size of the array.

268
00:19:07.630 --> 00:19:10.330
So it has to be this one has to be third.

269
00:19:10.360 --> 00:19:12.040
And that is the fourth element.

270
00:19:12.840 --> 00:19:14.610
So that's all there is to it is.

271
00:19:14.850 --> 00:19:17.760
So what we have seen is an entry.

272
00:19:17.790 --> 00:19:22.260
Now let's look at an area that can store object references.

273
00:19:22.560 --> 00:19:24.390
So let's go ahead and do that also.

274
00:19:24.960 --> 00:19:32.670
Now, we already created the student class, so let's create an array that will hold student objects,

275
00:19:33.240 --> 00:19:35.250
object references corresponding to students.

276
00:19:35.250 --> 00:19:42.090
So we created three students here and we have the student class in the same directory as in the basic

277
00:19:42.090 --> 00:19:42.430
demo.

278
00:19:42.450 --> 00:19:46.350
So we can actually access the student class from here also.

279
00:19:46.380 --> 00:19:47.590
So let's do that.

280
00:19:47.610 --> 00:19:50.800
So let's create a student array.

281
00:19:50.820 --> 00:19:54.870
So it will be student followed by square brackets.

282
00:19:56.740 --> 00:19:59.950
And the name, let's call it as too dense.

283
00:19:59.950 --> 00:20:06.310
So always use a plural name when it comes to arrays because it is storing multiple values.

284
00:20:06.820 --> 00:20:11.920
It's not like a variable which is storing a single value, a single value like a regular variable.

285
00:20:12.220 --> 00:20:18.550
Since it's a data structure we would always like to use, we would we should name it as a plural score

286
00:20:18.640 --> 00:20:21.100
or students or list or something like that.

287
00:20:21.520 --> 00:20:25.750
And we will also discuss that when we get to the naming conventions chapter.

288
00:20:26.050 --> 00:20:33.070
So now let's say a new student of, let's say three because we had three students.

289
00:20:33.310 --> 00:20:37.960
So these are the three students and let's also print them.

290
00:20:38.260 --> 00:20:39.640
This is how you would create.

291
00:20:41.550 --> 00:20:45.720
So the first one is let's just call it as student one.

292
00:20:48.940 --> 00:20:51.520
STUDENT two And.

293
00:20:51.820 --> 00:20:57.100
STUDENT three So here we will have sorry, it will be.

294
00:20:57.100 --> 00:21:00.340
Students This is the one, the variable name.

295
00:21:00.370 --> 00:21:04.990
Students of zero, students of one and students of two.

296
00:21:05.380 --> 00:21:07.870
Now, can you guess what will be printed here?

297
00:21:08.590 --> 00:21:09.310
Let's see.

298
00:21:13.320 --> 00:21:20.820
It prints null because each element here and the students represents an object reference and we know

299
00:21:20.820 --> 00:21:25.500
that object reference by default it will get a value of null.

300
00:21:25.920 --> 00:21:32.970
Earlier when we just declared this, we saw that each element in the array, which is also like a variable,

301
00:21:33.000 --> 00:21:37.860
each element is like a variable and it got a default of zero because the type was end.

302
00:21:37.860 --> 00:21:43.200
And here it's getting a default of null because the type is a student.

303
00:21:43.500 --> 00:21:46.260
So object references get an null value.

304
00:21:46.890 --> 00:21:51.240
So what we need to do is we just do what we have done here.

305
00:21:51.240 --> 00:21:52.320
We need to initialize.

306
00:21:52.320 --> 00:21:54.510
So we will say students of zero.

307
00:21:54.840 --> 00:21:56.250
We need to initialize.

308
00:21:56.250 --> 00:21:59.070
So we'll just say new student.

309
00:22:00.010 --> 00:22:00.610
That's it.

310
00:22:01.890 --> 00:22:07.110
So just like the way we create student objects here, we just do the same thing.

311
00:22:07.140 --> 00:22:13.350
It's just that we are saying students of zero because that represents the first element.

312
00:22:16.450 --> 00:22:17.530
So that's all we have.

313
00:22:19.080 --> 00:22:23.820
And this will be student of one and student of two.

314
00:22:24.180 --> 00:22:28.800
So three student objects have been created and it's print and see the values.

315
00:22:32.040 --> 00:22:33.180
So I chose something.

316
00:22:33.180 --> 00:22:34.980
Just don't worry about this notation.

317
00:22:34.980 --> 00:22:40.350
When we print an object reference, when we have an object reference within the print statement, this

318
00:22:40.350 --> 00:22:41.190
is how it would print.

319
00:22:41.190 --> 00:22:42.930
And that will be clear later on.

320
00:22:42.930 --> 00:22:44.220
Let's not worry about that.

321
00:22:44.790 --> 00:22:47.850
So this is how you would create student objects.

322
00:22:48.270 --> 00:22:53.070
Now I would like you to create the student objects using the second and third approach to.

323
00:22:53.100 --> 00:22:55.650
So just pause the video and try to do that.

324
00:22:55.740 --> 00:22:58.770
And I will also show you next how to do that.

325
00:22:59.250 --> 00:23:00.510
And you can cross-check.

326
00:23:01.150 --> 00:23:05.560
So let me just show you how we can do using the second and third approach.

327
00:23:05.560 --> 00:23:07.780
So this is the second one, right?

328
00:23:07.780 --> 00:23:08.740
This is the first one.

329
00:23:09.310 --> 00:23:13.780
So in the second one, we will we need to strip this off the the size.

330
00:23:13.780 --> 00:23:17.200
And we just need this.

331
00:23:20.110 --> 00:23:21.640
I hope you have done the same thing.

332
00:23:21.970 --> 00:23:23.060
And that's it.

333
00:23:23.080 --> 00:23:24.160
Let's go ahead.

334
00:23:28.400 --> 00:23:29.540
So it just prints.

335
00:23:30.420 --> 00:23:31.560
The same values.

336
00:23:31.860 --> 00:23:35.520
And third one as just remove this.

337
00:23:35.820 --> 00:23:36.530
And that's it.

338
00:23:36.540 --> 00:23:38.100
This is the simplest notation.

339
00:23:41.630 --> 00:23:41.990
Right.

340
00:23:41.990 --> 00:23:43.430
So that's all there is.

341
00:23:43.460 --> 00:23:50.180
Now, if we want to initialize the state, so I'll just say student of zero.

342
00:23:50.690 --> 00:23:53.180
So let's just initialize one variable.

343
00:23:53.180 --> 00:23:56.770
We know that the student class has a lot of variables here, right?

344
00:23:56.780 --> 00:23:58.550
So this is how you would initialize.

345
00:23:58.550 --> 00:24:00.950
So you would once again use a dot operator.

346
00:24:00.950 --> 00:24:07.040
So to initialize for the first student, you will say students of zero dot name.

347
00:24:07.040 --> 00:24:09.170
Let's just initialize only the name.

348
00:24:09.170 --> 00:24:11.780
And if you recall, the first student was John.

349
00:24:11.780 --> 00:24:12.800
So that's all.

350
00:24:12.890 --> 00:24:18.080
And let's also do the same thing here for second and third.

351
00:24:18.230 --> 00:24:19.610
So this is one.

352
00:24:20.990 --> 00:24:22.160
And this is too.

353
00:24:22.700 --> 00:24:25.920
And thus the second student's name was Raj.

354
00:24:25.940 --> 00:24:30.200
Third student's name was the good student Anita.

355
00:24:30.410 --> 00:24:33.470
And here we well, let's access that.

356
00:24:33.470 --> 00:24:39.000
So you will see students of zero dot name and it will print John.

357
00:24:39.140 --> 00:24:41.030
This will print Raj.

358
00:24:41.030 --> 00:24:43.610
And this will print on it.

359
00:24:44.870 --> 00:24:45.920
So.

360
00:24:50.430 --> 00:24:55.320
So all three names are being printed, so it's just no difference.

361
00:24:55.320 --> 00:24:57.780
We just use the dot operator in this way.

362
00:24:57.810 --> 00:25:05.190
So over here we had a separate object reference, but in this case the object reference is part of the

363
00:25:05.190 --> 00:25:07.590
array and so we have to do it in this way.

364
00:25:08.280 --> 00:25:09.700
So that's all there is.

365
00:25:09.720 --> 00:25:11.790
Now, here also, let me just.

366
00:25:11.790 --> 00:25:13.770
I just wanted to show something.

367
00:25:15.610 --> 00:25:23.860
So if we had, we just initialize only the first and the second and if the third element was was not

368
00:25:23.860 --> 00:25:24.760
initialized.

369
00:25:25.060 --> 00:25:34.060
So in that case, if we print the names here, not the name, just the objects, it would print only

370
00:25:34.480 --> 00:25:35.410
for the third one.

371
00:25:35.410 --> 00:25:37.430
It will print null, right.

372
00:25:37.450 --> 00:25:43.780
Because we initialized only zero and the first element and for the second one, it will remain as the.

373
00:25:46.610 --> 00:25:53.480
You know, actually, I initialized it here, so it has to be new student of three.

374
00:25:53.510 --> 00:25:54.260
That's it.

375
00:25:54.290 --> 00:25:59.870
So now for zero ten, first we are we are initializing it with the student objects.

376
00:25:59.960 --> 00:26:02.190
But for the second one, we still did not.

377
00:26:02.210 --> 00:26:05.030
So it will still print now.

378
00:26:06.000 --> 00:26:10.020
Kate Branstad, only the first on the second student were initialized.

379
00:26:10.830 --> 00:26:11.910
So we are done with that.

380
00:26:11.910 --> 00:26:19.740
So we have seen that an area can store both parameters as well as object references and it can be of

381
00:26:19.740 --> 00:26:20.950
any other type.

382
00:26:20.970 --> 00:26:23.610
And here I have two more examples here.

383
00:26:23.850 --> 00:26:25.310
So this is great.

384
00:26:25.320 --> 00:26:27.510
And here the type is car.

385
00:26:27.510 --> 00:26:31.860
So it's a category and this is how it is initialized to the values.

386
00:26:31.860 --> 00:26:36.660
So we have the single codes because four characters is how we initialize the values.

387
00:26:36.660 --> 00:26:38.180
So these are collaterals.

388
00:26:38.490 --> 00:26:40.020
So that's for care.

389
00:26:40.020 --> 00:26:40.840
And this is great.

390
00:26:40.890 --> 00:26:47.520
Think of it as student grades, a grades of a particular student and three different courses like A,

391
00:26:47.550 --> 00:26:48.390
B and A.

392
00:26:48.720 --> 00:26:55.380
Similarly, this one has is a double array, it's called as location, and it includes the latitude

393
00:26:55.380 --> 00:26:56.780
and longitude coordinates.

394
00:26:56.790 --> 00:26:58.320
So this is location of a place.

395
00:26:58.320 --> 00:26:59.790
It's actually San Francisco.

396
00:27:00.090 --> 00:27:03.120
You can think of an application like Google Maps.

397
00:27:03.120 --> 00:27:07.470
They might be using an array such as this one to represent location.

398
00:27:08.190 --> 00:27:15.030
This example I'm just showing you so that you can get a feel for the different use cases where an array

399
00:27:15.030 --> 00:27:15.990
can be used.

400
00:27:16.800 --> 00:27:17.870
So that's all there is.

401
00:27:17.880 --> 00:27:23.520
And I hope you enjoyed learning about race, and I hope you have also implemented it with me.

402
00:27:23.550 --> 00:27:28.830
If not, please to implement it because it's very important to practice and practice all of these three

403
00:27:28.830 --> 00:27:30.570
different ways of creating an array.

404
00:27:31.560 --> 00:27:32.340
Thank you.

405
00:27:32.340 --> 00:27:34.040
And I'll see you in the next lecture.

406
00:27:34.050 --> 00:27:34.950
Happy coding.

