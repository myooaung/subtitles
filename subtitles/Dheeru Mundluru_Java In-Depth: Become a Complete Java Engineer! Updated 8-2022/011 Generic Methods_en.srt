1
00:00:02,120 --> 00:00:03,080
Hi there.

2
00:00:03,200 --> 00:00:04,610
This is the rule.

3
00:00:05,030 --> 00:00:06,650
We looked at generic types.

4
00:00:06,680 --> 00:00:09,140
Now it's time to look at generic methods.

5
00:00:09,440 --> 00:00:15,710
It's an important topic, and it's especially useful for implementing static utility methods, which

6
00:00:15,710 --> 00:00:17,000
are very reusable.

7
00:00:17,600 --> 00:00:22,250
In this lesson, we will look at everything related to generic methods and it's going to be a pretty

8
00:00:22,250 --> 00:00:23,030
long lesson.

9
00:00:23,360 --> 00:00:28,910
And the demo will actually be done in the follow up lesson where we will test most of the stuff we learn

10
00:00:28,910 --> 00:00:29,660
in this lesson.

11
00:00:31,570 --> 00:00:36,520
There is one entire excellent chapter dedicated to generics in the effective Java book.

12
00:00:37,150 --> 00:00:39,490
We do cover many of the things from the chapter.

13
00:00:39,670 --> 00:00:43,240
And if you're interested, you should definitely read it when you get a chance.

14
00:00:43,750 --> 00:00:46,810
And one of the items is favor generic types.

15
00:00:47,320 --> 00:00:50,260
And we already discussed some of the stuff from this item.

16
00:00:51,110 --> 00:00:57,560
Generic types are appropriate for container type classes like the ones in collections API which can

17
00:00:57,560 --> 00:00:59,540
store any kind of element.

18
00:00:59,900 --> 00:01:02,330
That is, these classes are very generic.

19
00:01:02,930 --> 00:01:06,490
In fact, all the collections framework classes we saw are gentrified.

20
00:01:07,340 --> 00:01:13,880
Before generics was introduced, collections API classes were using object type as a polymorphic type

21
00:01:13,880 --> 00:01:15,200
for storing elements.

22
00:01:15,650 --> 00:01:20,510
That is, methods like ADD would use object type as the method parameter type.

23
00:01:20,750 --> 00:01:24,410
And we know that that could lead to class cast exceptions at runtime.

24
00:01:25,440 --> 00:01:30,720
So genetics helps us write safer code due to compile time type safety benefit that it gives.

25
00:01:31,320 --> 00:01:37,380
So such classes are really very generic and hence if we happen to write such generic classes then we

26
00:01:37,380 --> 00:01:40,020
should try to make them into generic types.

27
00:01:42,090 --> 00:01:48,360
Similarly, we also have generic methods and there is also an item dedicated for it which says favour

28
00:01:48,360 --> 00:01:50,880
generic methods like generic types.

29
00:01:50,910 --> 00:01:53,280
These methods are very generic too.

30
00:01:53,880 --> 00:01:55,620
We know that with generic types.

31
00:01:55,710 --> 00:02:01,080
Client code has the flexibility to use different type arguments, right?

32
00:02:01,110 --> 00:02:07,110
Similarly, generic methods also have their own type parameters and clients get the benefit of using

33
00:02:07,110 --> 00:02:08,610
different type arguments.

34
00:02:09,120 --> 00:02:15,120
Of course, we also get the compile time type safety benefit and the convenience of implicit class that

35
00:02:15,120 --> 00:02:16,440
compiler inserts.

36
00:02:17,290 --> 00:02:24,180
Now we know that if a method is static, it has no access to the enclosing class type parameter, right?

37
00:02:24,420 --> 00:02:29,970
So if such a static method needs generic ness, then it needs to be made a generic method.

38
00:02:30,450 --> 00:02:33,690
So both static as well as instance methods can be generic.

39
00:02:34,780 --> 00:02:38,830
Static utility methods are particularly good candidates for generics.

40
00:02:39,220 --> 00:02:45,820
For example, you can check out the utility class Java dot dot collections and you will see that majority

41
00:02:45,820 --> 00:02:47,860
of its methods are generic methods.

42
00:02:48,280 --> 00:02:53,770
And we know that these methods are utility methods that are very generic and hence are perfect candidates

43
00:02:53,770 --> 00:02:55,060
for generic methods.

44
00:02:56,880 --> 00:03:03,210
Like classes on interfaces, methods and also constructors can introduce their own type parameters.

45
00:03:04,390 --> 00:03:06,430
And here is the syntax for generic methods.

46
00:03:06,790 --> 00:03:10,240
So the type parameters are specified in angled brackets.

47
00:03:10,630 --> 00:03:15,610
And as you can see, they can be used as variable types for method parameters.

48
00:03:16,180 --> 00:03:18,000
But it's not just method parameters.

49
00:03:18,010 --> 00:03:23,210
They can be used as type for local variables which are declared within the methods body.

50
00:03:23,230 --> 00:03:25,990
And they can also be used as methods return type.

51
00:03:27,700 --> 00:03:34,810
Not that my parameter list goes between the methods modifiers and the return type, so they come before

52
00:03:34,810 --> 00:03:36,250
the methods return type.

53
00:03:38,040 --> 00:03:40,410
Let's now look at a few examples of generic methods.

54
00:03:40,530 --> 00:03:44,370
Here is one from the Java dot dot collection interface.

55
00:03:45,140 --> 00:03:50,540
As you can see, both method, parameter as well as the return type are using the type parameter.

56
00:03:51,260 --> 00:03:57,320
This is an instance method and we know that it returns an array containing all elements in the current

57
00:03:57,320 --> 00:03:58,010
collection.

58
00:03:58,610 --> 00:04:01,870
It basically acts as a bridge between collection and array.

59
00:04:04,370 --> 00:04:06,860
And here is another example from the Java API.

60
00:04:06,910 --> 00:04:08,630
It is a static utility method.

61
00:04:08,630 --> 00:04:12,920
Replace all from the class java dot dot collections.

62
00:04:12,950 --> 00:04:18,110
The earlier one was from java dot dot collection and this is from collections.

63
00:04:18,500 --> 00:04:25,720
Here the type parameter is acting as a type argument for list in the first method parameter remaining

64
00:04:25,730 --> 00:04:26,950
to method parameters.

65
00:04:26,960 --> 00:04:34,460
Also use the type parameter and this method replaces all the occurrences of the old value within the

66
00:04:34,460 --> 00:04:36,620
list with the specified new value.

67
00:04:37,490 --> 00:04:42,890
As you can see, the method is generic and it doesn't matter what the element type of the list is.

68
00:04:43,430 --> 00:04:47,930
So such kinds of methods should be implemented as generic methods.

69
00:04:49,980 --> 00:04:57,210
In this example, we have the Class Generics demo, which has a type parameter T and the method go also

70
00:04:57,210 --> 00:05:00,170
defines a type parameter with the same name T.

71
00:05:00,870 --> 00:05:06,570
In this case, the method level type parameter overrides the class level type parameter when the method

72
00:05:06,570 --> 00:05:10,110
is invoked and the blue font color here highlights that.

73
00:05:10,710 --> 00:05:17,100
However, try to avoid using same type parameter names in this way as it can be very confusing.

74
00:05:19,470 --> 00:05:24,600
We can also have this where both method level and class level type parameters are used.

75
00:05:25,230 --> 00:05:30,450
The first method parameter uses method level type parameter, while the second one uses the class level

76
00:05:30,450 --> 00:05:31,350
type parameter.

77
00:05:32,150 --> 00:05:38,090
Not that we will get a compilation error if this method is a static method, because class level type

78
00:05:38,090 --> 00:05:41,150
parameter cannot be used in a static context.

79
00:05:41,630 --> 00:05:43,940
It can only be used with instances.

80
00:05:45,740 --> 00:05:52,340
And here is an example where we have a bounded type parameter which we know places restrictions on what

81
00:05:52,340 --> 00:05:57,350
can be passed or what can be returned if type parameter is used as a return type.

82
00:05:58,040 --> 00:06:04,010
In this example, we have multiple bounds and note that everything we discussed about bounds for class

83
00:06:04,010 --> 00:06:06,830
level type parameters apply for methods to.

84
00:06:07,490 --> 00:06:13,100
For instance, if you have a class in the list of bounds, then it can be the only class in the list

85
00:06:13,100 --> 00:06:19,250
of bounds, and it must be specified as the first bound to unrest have to be interfaces.

86
00:06:19,940 --> 00:06:23,930
Also, the type argument must be the subtype of all bombs.

87
00:06:24,440 --> 00:06:28,640
Shortly we will see how type argument will be passed to generic methods.

88
00:06:30,750 --> 00:06:37,170
You can also have something like this where the method level type parameter P is extending the class

89
00:06:37,170 --> 00:06:38,910
level type parameter E.

90
00:06:41,480 --> 00:06:42,590
In this example.

91
00:06:42,590 --> 00:06:46,430
The second type parameter is extending the first type parameter.

92
00:06:49,540 --> 00:06:57,010
Note that generic methods or even generic constructors can exist whether or not the enclosing type is

93
00:06:57,010 --> 00:06:57,670
generic.

94
00:06:59,370 --> 00:07:02,370
So we looked at the syntax for declaring generic methods.

95
00:07:02,430 --> 00:07:05,130
Now it's time to look at how we can invoke them.

96
00:07:05,640 --> 00:07:09,780
Generic methods are invoked just like regular non generic methods.

97
00:07:10,110 --> 00:07:15,210
Only additional thing is specifying the type argument as we are dealing with generics here.

98
00:07:16,060 --> 00:07:22,230
We know that with generic types, parameters types include the type argument, but with generic methods,

99
00:07:22,240 --> 00:07:29,770
type argument can be either automatically inferred by the compiler or they can also be explicitly specified

100
00:07:29,770 --> 00:07:31,900
in the method invocation statement.

101
00:07:32,350 --> 00:07:37,930
But most common way is to let the type arguments to be automatically inferred by the compiler.

102
00:07:38,500 --> 00:07:40,630
And first, let's look at how this can be done.

103
00:07:42,650 --> 00:07:49,340
Let's consider this method go, which has a type parameter T and T is also used as part of the method

104
00:07:49,340 --> 00:07:51,920
parameter and also as the return type.

105
00:07:53,560 --> 00:07:57,370
Now let's assume it is invoked in this way where it double is passed.

106
00:07:57,730 --> 00:08:01,630
In this case, the type argument would be inferred as double.

107
00:08:02,380 --> 00:08:07,960
Note that even though a primitive is parsed type argument, inferred would be the boxed primitive double.

108
00:08:09,460 --> 00:08:13,420
Similarly, if we can work with a string type argument would be inferred as a string.

109
00:08:14,080 --> 00:08:19,030
So as you can see, generic methods appear as infinitely overloaded.

110
00:08:20,240 --> 00:08:22,920
Just note that type inference can happen in two places.

111
00:08:22,940 --> 00:08:29,210
One is, of course here in generic methods and also in generic constructors and the other places when

112
00:08:29,210 --> 00:08:33,230
we use diamond notation during instantiation of generic types.

113
00:08:34,039 --> 00:08:38,150
And here is an example of that and we have been using it in our demos.

114
00:08:38,780 --> 00:08:42,320
Diamond notation works only from Java seven onwards.

115
00:08:43,070 --> 00:08:47,050
Now we know that type parameter can appear as methods in written type two.

116
00:08:47,600 --> 00:08:54,410
So one question we can have is what if type parameter appears only in the return type, but not as part

117
00:08:54,410 --> 00:08:55,640
of method parameter?

118
00:08:56,300 --> 00:09:02,420
In such a case, compiler infers the type argument from the calling context, and let's see how that

119
00:09:02,420 --> 00:09:03,020
works.

120
00:09:04,850 --> 00:09:08,300
Here we have this method empty list from the collections class.

121
00:09:08,450 --> 00:09:11,630
We have seen it in the Collections Framework chapter here.

122
00:09:11,630 --> 00:09:16,970
The return type is list of three and the method does not have any parameters.

123
00:09:18,630 --> 00:09:21,270
Now let's assume the method is invoked in this way.

124
00:09:21,720 --> 00:09:29,130
Here, the return value is assigned to a list of string on compiler user set to infer the type argument

125
00:09:29,130 --> 00:09:30,060
as a string.

126
00:09:30,890 --> 00:09:31,160
Here.

127
00:09:31,160 --> 00:09:37,220
The compiler is going to compare list of PT with list of string to deduce that the type argument is

128
00:09:37,220 --> 00:09:37,700
string.

129
00:09:38,920 --> 00:09:42,670
In this case, list of string is referred to as a target type.

130
00:09:43,610 --> 00:09:49,970
Note that here, even if target type was collection of string, which is the super type of list, then

131
00:09:49,970 --> 00:09:54,200
compiler would still be smart enough to infer the type argument as string.

132
00:09:55,970 --> 00:09:57,980
Now, here is the example we saw earlier.

133
00:09:58,430 --> 00:10:02,390
Now, let's say here we are working with a string, but the target type is a double.

134
00:10:02,780 --> 00:10:05,990
Now, in this case, type argument inferred would be string.

135
00:10:06,320 --> 00:10:09,560
As method parameter involves the type parameter.

136
00:10:10,580 --> 00:10:16,790
So once again, only if method parameters do not include a type parameter, then the target type comes

137
00:10:16,790 --> 00:10:17,450
into play.

138
00:10:18,080 --> 00:10:24,770
In this case, we get a compiler error, and that's because the type argument inferred is string and

139
00:10:24,770 --> 00:10:28,010
the compiler expects the return value to be string to.

140
00:10:28,130 --> 00:10:31,970
As type parameter is also specified as the methods return type.

141
00:10:32,600 --> 00:10:37,040
But the return value is being assigned to a double and so compiler gives an error.

142
00:10:37,700 --> 00:10:42,380
So that's an example of compile time type safety benefit in a generic method.

143
00:10:44,100 --> 00:10:45,660
Here's something more interesting.

144
00:10:45,690 --> 00:10:49,620
Both the parameters and the return type use the type parameter.

145
00:10:50,820 --> 00:10:52,930
And here is the method invocation statement.

146
00:10:52,950 --> 00:10:56,010
First argument is a string, while the second is an ArrayList.

147
00:10:56,040 --> 00:11:03,000
In this case, the type inferred will be the most specific common type among the two arguments.

148
00:11:04,340 --> 00:11:10,460
In this case it would be realizable as both string and ArrayList implement see realizable.

149
00:11:11,090 --> 00:11:17,270
Here target type is realizable, but if it is anything else other than realizable, then we would end

150
00:11:17,270 --> 00:11:18,740
up with a compilation error.

151
00:11:19,550 --> 00:11:21,650
So that's how type arguments are inferred.

152
00:11:22,310 --> 00:11:25,910
Generally, type inference rules are very complex.

153
00:11:26,540 --> 00:11:32,970
If type inference may not be what we expected, which is also possible in some very rare cases.

154
00:11:32,990 --> 00:11:36,080
Then you can use explicit type arguments.

155
00:11:37,860 --> 00:11:42,000
And now let's look at how we can explicitly specify type arguments.

156
00:11:42,480 --> 00:11:43,590
Here we have the method.

157
00:11:43,590 --> 00:11:45,990
Go inside the class generics demo.

158
00:11:47,740 --> 00:11:53,560
And here we are creating an instance of genetics tomorrow and then we are invoking the method go and

159
00:11:53,560 --> 00:11:56,340
explicitly specifying the type argument double.

160
00:11:57,160 --> 00:12:04,300
So type argument comes after the dot operator and before the method name and needs to be in angled brackets.

161
00:12:05,820 --> 00:12:06,540
Not that here.

162
00:12:06,540 --> 00:12:09,660
The type argument is referred to as a type witness.

163
00:12:11,800 --> 00:12:17,770
Now, if the method is in the same class, ought to be more precise, same object as the invoking code.

164
00:12:18,250 --> 00:12:20,350
Then you should use this reference.

165
00:12:21,010 --> 00:12:26,890
Now, without this reference, if you just have the type argument followed by method invocation, then

166
00:12:26,890 --> 00:12:28,180
you get a compilation error.

167
00:12:29,140 --> 00:12:34,630
If it was a non generic method, we can directly invoke the method, but that's not the case with generic

168
00:12:34,630 --> 00:12:35,260
methods.

169
00:12:37,360 --> 00:12:43,240
If you want to access an overridden method in the superclass, then you would need to use the super

170
00:12:43,240 --> 00:12:45,400
keyword instead of this reference.

171
00:12:45,880 --> 00:12:50,800
But for a regular inherited generic method, you would still use this reference.

172
00:12:52,960 --> 00:12:57,940
Finally, if the method is static, then you would simply use the class name instead of the reference

173
00:12:57,940 --> 00:12:58,540
variable.

174
00:12:59,420 --> 00:13:02,720
This is required even if the method is in the same class.

175
00:13:03,620 --> 00:13:08,410
So normally you can go with the first approach where the type arguments are automatically inferred.

176
00:13:08,420 --> 00:13:15,530
But as mentioned earlier, only in some very rare cases where type inference may not be what you expected,

177
00:13:15,680 --> 00:13:19,250
then you can go with explicit type argument specification.

178
00:13:20,030 --> 00:13:25,700
Also, one last thing to note is that if you have a type parameter declared in the method, but if it

179
00:13:25,700 --> 00:13:32,000
does not appear in either the method parameter list or the methods return type, then we can pass the

180
00:13:32,000 --> 00:13:33,560
type argument explicitly.

181
00:13:33,740 --> 00:13:37,490
As in this case, inference type argument is just not possible.

182
00:13:38,340 --> 00:13:42,570
However, in this case, type parameter does not play any valuable role.

183
00:13:43,260 --> 00:13:47,510
The reason is type parameters are mainly useful for client side code.

184
00:13:48,090 --> 00:13:53,790
For instance, if return type is a type parameter, then compiler would insert an appropriate cast in

185
00:13:53,790 --> 00:13:54,960
the invoking code.

186
00:13:55,620 --> 00:14:02,250
Similarly, if the method parameters use type parameter, then the compiler ensures that we pass correct

187
00:14:02,250 --> 00:14:03,060
arguments.

188
00:14:03,540 --> 00:14:09,300
But if type parameter is not part of written type or the method parameters, then there is nothing to

189
00:14:09,300 --> 00:14:14,010
be done on the client side except for passing the type argument explicitly.

190
00:14:14,920 --> 00:14:21,040
And within the method type parameters are erased at runtime as they are replaced by either object type

191
00:14:21,040 --> 00:14:24,040
or the first bone due to type erasure.

192
00:14:24,810 --> 00:14:29,580
We also discussed Hyperledger earlier when discussing class level type parameters.

193
00:14:30,350 --> 00:14:34,850
So we need to keep in mind that generics is a purely compile time concept.

194
00:14:35,620 --> 00:14:37,390
So that's about generic methods.

195
00:14:37,480 --> 00:14:43,210
A couple of very minor details, including generic constructors, were left out and they will be covered

196
00:14:43,210 --> 00:14:44,380
in the follow up demo.

197
00:14:44,950 --> 00:14:47,920
Generally constructors are similar to generic methods.

198
00:14:48,700 --> 00:14:55,480
Also in the resources section, I included a link to a website which is considered one of the most authoritative

199
00:14:55,480 --> 00:14:57,820
online sources on generics.

200
00:14:58,150 --> 00:15:01,300
So you can check that out and probably bookmark it too.

201
00:15:01,720 --> 00:15:03,370
Thank you and see you in the demo.

