1
00:00:02,140 --> 00:00:02,960
Hi there.

2
00:00:02,980 --> 00:00:03,520
This is Dana.

3
00:00:04,120 --> 00:00:05,140
And welcome back.

4
00:00:05,170 --> 00:00:08,170
Let's no further explore about functional interfaces.

5
00:00:08,170 --> 00:00:13,600
And we will learn about some standard functional interfaces which were introduced in Java eight.

6
00:00:14,290 --> 00:00:19,750
Functional interfaces, as the name implies, have something to do with functions, and we know that

7
00:00:19,750 --> 00:00:21,970
they define a single abstract method.

8
00:00:22,420 --> 00:00:28,660
And we have seen how lambda expressions, which are essentially anonymous functions, work with only

9
00:00:28,660 --> 00:00:31,720
functional interfaces other than lambda expressions.

10
00:00:31,730 --> 00:00:38,740
Functions could be method references to not that functional interfaces can also be targets of instances

11
00:00:38,740 --> 00:00:42,670
of ordinary classes that implement those functional interfaces.

12
00:00:43,150 --> 00:00:49,420
And such classes we know can also implement other interfaces which need not be functional interfaces.

13
00:00:51,260 --> 00:00:58,460
And here are some very familiar functional interfaces that were there even before Java eight, and they

14
00:00:58,460 --> 00:01:00,920
have some semantics associated with them.

15
00:01:01,280 --> 00:01:07,370
We know that comparator and comparable are related to sorting while reasonable and callable are related

16
00:01:07,370 --> 00:01:08,090
to threats.

17
00:01:08,480 --> 00:01:11,210
So they have some semantics associated with them.

18
00:01:12,140 --> 00:01:18,950
But in Java eight, several standard functional interfaces were added and these are very generic functional

19
00:01:18,950 --> 00:01:23,480
interfaces and they do not have any specific semantics associated with them.

20
00:01:23,930 --> 00:01:25,670
They only define some structure.

21
00:01:26,030 --> 00:01:29,930
Semantics would depend on the context in which they are used.

22
00:01:30,690 --> 00:01:35,400
And these interfaces are part of this package called Java dot dot function.

23
00:01:35,730 --> 00:01:41,160
And as much as possible, we should try to use the standard functional interfaces instead of creating

24
00:01:41,160 --> 00:01:41,880
our own.

25
00:01:42,150 --> 00:01:47,550
Just like in the case of exceptions where it is recommended to use standard exceptions.

26
00:01:48,150 --> 00:01:54,250
That way we would have a common terminology and all of us developers can be on the same page, right?

27
00:01:54,270 --> 00:01:56,580
Whenever we see a standard functional interface.

28
00:01:56,610 --> 00:02:02,400
We know what it would do and shortly we will look at some of the core standard function interfaces.

29
00:02:02,490 --> 00:02:07,980
But before that, let's look at a simple example which would introduce us to a couple of standard function

30
00:02:07,980 --> 00:02:08,789
interfaces.

31
00:02:10,669 --> 00:02:16,970
Let's assume that we have a list of Web pages and we want to index only those web pages that belong

32
00:02:17,000 --> 00:02:18,380
to a certain category.

33
00:02:19,110 --> 00:02:20,070
On indexing.

34
00:02:20,070 --> 00:02:22,740
We know what happened searching those pages.

35
00:02:23,310 --> 00:02:28,770
So first step is to filter out those Web pages that do not belong to the target category.

36
00:02:29,250 --> 00:02:35,070
So the output of the first step would be only those web pages that belong to the target category.

37
00:02:36,840 --> 00:02:43,440
Our next step would be to remove all the HTML tags from those web pages before we would index them.

38
00:02:45,060 --> 00:02:48,240
So first step here is applying a filter.

39
00:02:48,270 --> 00:02:48,690
Right.

40
00:02:48,690 --> 00:02:50,570
So that's essentially the first step.

41
00:02:50,580 --> 00:02:55,380
And if it returns a true for a given web page, then it would be processed by the second step.

42
00:02:56,450 --> 00:03:01,190
On second step simply transforms the web page by removing the HTML tags.

43
00:03:03,020 --> 00:03:07,580
Not to perform such tasks, we can use these standard functional interfaces.

44
00:03:08,120 --> 00:03:13,130
First one is predicate, which represents the boolean expression for the filter.

45
00:03:13,580 --> 00:03:19,340
In this example, if the webpage belongs to the target category, then the predicate would return a

46
00:03:19,340 --> 00:03:22,040
true and we would further process the web page.

47
00:03:22,830 --> 00:03:28,830
For the second step, which is the transformation step, we can make use of the function interface on

48
00:03:28,830 --> 00:03:29,010
both.

49
00:03:29,010 --> 00:03:32,670
These interfaces are part of our DOT function package.

50
00:03:34,660 --> 00:03:38,500
And here is the definition of the predicate functional interface.

51
00:03:39,930 --> 00:03:47,250
And it represents a Boolean expression that uses an object of type P in the example we just saw.

52
00:03:47,280 --> 00:03:52,860
P would be a document, and this particular function interface has a single abstract method called test.

53
00:03:53,040 --> 00:03:56,640
And so we need to have some function representing this method.

54
00:03:56,970 --> 00:04:01,080
That's where things like lambda expressions and method references come into play.

55
00:04:02,160 --> 00:04:08,580
I note that this interface also has few default methods and one static method, and you can check out

56
00:04:08,580 --> 00:04:15,390
this interfaces API specification to learn about them, but we will be actually using one of them in

57
00:04:15,390 --> 00:04:16,470
the demo shortly.

58
00:04:17,190 --> 00:04:22,500
And here you can also notice that there is an annotation called Functional Interface.

59
00:04:23,220 --> 00:04:27,540
Now if you're creating a functional interface, then you should also use this annotation.

60
00:04:28,330 --> 00:04:33,730
That way, compiler ensures that this interface has only a single abstract method.

61
00:04:34,090 --> 00:04:37,900
And if you try to add more than one abstract method, you will get a compiler error.

62
00:04:38,470 --> 00:04:44,050
Now, even without this annotation, an interface with a single abstract method would still qualify

63
00:04:44,050 --> 00:04:45,280
as a functional interface.

64
00:04:45,580 --> 00:04:51,610
However, if in future someone adds another abstract method, then it would not be a functional interface

65
00:04:51,610 --> 00:04:52,240
anymore.

66
00:04:52,270 --> 00:04:56,950
And the compiler will not complain just because this annotation has been omitted.

67
00:04:57,640 --> 00:05:03,190
But if there are any lambda expressions whose target type is this interface, then the compiler will

68
00:05:03,190 --> 00:05:09,280
still highlight that the target for those lambda expressions is no longer a functional interface.

69
00:05:09,730 --> 00:05:13,330
We saw an example of this in the Lambda Demo that we did earlier.

70
00:05:13,870 --> 00:05:19,120
But it is good to include this annotation, so that compiler right away informs us.

71
00:05:19,150 --> 00:05:23,140
If we by mistake, try to add more than one abstract method.

72
00:05:24,970 --> 00:05:27,610
And here is the function function interface.

73
00:05:29,220 --> 00:05:35,160
It takes an object of generic type DX as input and returns an object of generic type r.

74
00:05:36,050 --> 00:05:43,010
The abstract method is applied that is you are applying some sort of transformation from t to ah.

75
00:05:43,610 --> 00:05:49,730
Note that this interface also has few non abstract methods like default and static, and you can check

76
00:05:49,730 --> 00:05:55,240
out the API to learn about them and also know that there is another function interface called Unity

77
00:05:55,250 --> 00:06:01,490
Operator, which extends this interface and it is a specialization for the case where both input and

78
00:06:01,490 --> 00:06:03,110
output are of the same type.

79
00:06:03,800 --> 00:06:08,150
Now let's head over to my editor to implement the example we just saw earlier.

80
00:06:10,470 --> 00:06:10,590
Okay.

81
00:06:10,730 --> 00:06:15,140
For this demo, I have created this new class called Functional Interface Demo.

82
00:06:15,170 --> 00:06:19,920
As this demo is about functional interfaces and it has been created in our package.

83
00:06:19,940 --> 00:06:25,220
Com dot semantics dot lambdas which was created in the last demo, in the previous demo.

84
00:06:25,790 --> 00:06:31,430
And here we are going to implement the example that we have seen earlier in the slides, which is about

85
00:06:31,430 --> 00:06:33,050
processing HTML pages.

86
00:06:33,170 --> 00:06:39,290
And we discussed about the two steps filtering and transformation and we said that for filtering we'll

87
00:06:39,290 --> 00:06:44,600
be using predicate interface and the for transformation will be using function interface.

88
00:06:44,600 --> 00:06:49,850
So in this demo we'll be looking at those two standard functional interfaces, predicate and function.

89
00:06:50,180 --> 00:06:55,520
And in the subsequent lecture we are going to look at two more standard functional interfaces, consumer

90
00:06:55,520 --> 00:06:56,450
and supplier.

91
00:06:56,660 --> 00:06:59,570
So these are the main standard function interfaces.

92
00:06:59,570 --> 00:07:02,210
And so we are going to look at all four of them.

93
00:07:02,690 --> 00:07:09,470
So the first step here, if you if you recall, the first step was to the main goal was to process HTML

94
00:07:09,470 --> 00:07:12,920
pages and the first step was to apply the filter.

95
00:07:13,130 --> 00:07:18,830
And in the filtering step we will filter out those web pages which do not belong to a certain category.

96
00:07:19,640 --> 00:07:23,030
And if it belongs to the category, then it will be further processed.

97
00:07:23,030 --> 00:07:28,910
And the second step is the transformation step, where the HTML tags in the in the web page will be

98
00:07:28,910 --> 00:07:34,100
stripped out, will be removed, and then the result of that will be used for indexing the page.

99
00:07:34,520 --> 00:07:39,980
Now, in this demo, I'm also going to introduce a third step, which would be another transformation

100
00:07:39,980 --> 00:07:40,520
step.

101
00:07:40,520 --> 00:07:47,030
So once the document is stripped off from the with the HTML tags, once the HTML tags are removed,

102
00:07:47,180 --> 00:07:50,780
the resulting web page will be processed once again.

103
00:07:50,990 --> 00:07:56,270
And during the second transformation step, we will be removing certain words called a stop.

104
00:07:56,270 --> 00:08:01,910
Words and stop words are very generic words like an R and so on.

105
00:08:02,180 --> 00:08:06,980
And stop word removal is a is a common procedure is a common step.

106
00:08:06,980 --> 00:08:12,410
Whenever we are indexing web pages, whenever we are indexing any, any content.

107
00:08:12,560 --> 00:08:19,460
So that is a common step that search engines do because stop words do not add any value during the search

108
00:08:19,460 --> 00:08:22,370
process and also during the indexing.

109
00:08:22,370 --> 00:08:23,300
So it's removed.

110
00:08:23,300 --> 00:08:25,010
So that's not important for us.

111
00:08:25,010 --> 00:08:30,950
The reason I introduced that step is because both second and third step are transformation steps, and

112
00:08:30,950 --> 00:08:36,440
we are going to use the same function, same method to realize both of these steps.

113
00:08:36,679 --> 00:08:39,530
So we are going to reuse the functionality.

114
00:08:39,530 --> 00:08:45,740
So I just wanted to demonstrate that where different behavior is being used, but the same method is,

115
00:08:45,740 --> 00:08:48,230
is being used to accomplish what we want to accomplish.

116
00:08:48,650 --> 00:08:50,510
I think it will be clear when we implement it.

117
00:08:50,660 --> 00:08:56,090
So the goal is to process HTML pages and here we have these for HTML documents.

118
00:08:56,180 --> 00:09:01,430
Essentially, they are strings and each thing is essentially a web document.

119
00:09:01,430 --> 00:09:03,770
Think of it as a Web document, a small document here.

120
00:09:03,770 --> 00:09:05,780
So you have the HTML tax here.

121
00:09:05,960 --> 00:09:09,800
And in the second step, we are going to remove those text.

122
00:09:10,190 --> 00:09:12,470
So the first step is the filtering step.

123
00:09:12,470 --> 00:09:15,380
And in this case, the category is the word stream.

124
00:09:15,890 --> 00:09:20,270
If the if the document contains the word stream, then it needs to be processed.

125
00:09:20,270 --> 00:09:22,280
Otherwise, it should not be processed.

126
00:09:22,460 --> 00:09:23,450
It should be filtered out.

127
00:09:23,780 --> 00:09:29,120
So among these four documents, the first document and the on the fourth document have the word stream

128
00:09:29,120 --> 00:09:29,630
here.

129
00:09:30,620 --> 00:09:35,450
So we are going to process only two documents and the other two documents will get filtered out.

130
00:09:36,050 --> 00:09:38,500
So we need to process these four pages.

131
00:09:38,510 --> 00:09:44,480
And for that we are accumulating all these four documents into this list and we are going to iterate

132
00:09:44,480 --> 00:09:45,050
here.

133
00:09:45,050 --> 00:09:51,170
So we have this template code and for filtering we will invoke this method called filter with a static

134
00:09:51,170 --> 00:09:53,660
method which is declared in the same class.

135
00:09:53,810 --> 00:10:00,080
And for transformation we are going to use this method called transform and both for both the transformation

136
00:10:00,080 --> 00:10:02,240
steps, we will be using the same method.

137
00:10:02,270 --> 00:10:08,030
It's just that in each of the invocations, the behavior that we are going to pass will be different.

138
00:10:08,960 --> 00:10:12,560
So the for the filter, it takes a predicate.

139
00:10:13,070 --> 00:10:18,830
So we need to pass an instance of this predicate in order to filter out the documents for the transformation,

140
00:10:18,920 --> 00:10:24,230
we need to pass a function here, an instance of function during the first invocation.

141
00:10:24,230 --> 00:10:30,650
Well, we will pass the behavior for removing the HTML words, the HTML tags, and during the second

142
00:10:30,650 --> 00:10:34,190
invocation, we will pass the logic to remove the stop words.

143
00:10:34,670 --> 00:10:37,400
And there is also this indexer class here.

144
00:10:37,700 --> 00:10:45,260
So this one has the the logic for stripping the HTML tags and also the logic for removing the supports.

145
00:10:45,260 --> 00:10:46,850
But let's not worry about it for now.

146
00:10:46,850 --> 00:10:52,460
So let's go ahead and first apply the filter.

147
00:10:53,060 --> 00:10:55,280
So we need to call the filter method.

148
00:10:56,300 --> 00:11:01,340
And it takes two parameters, doc, and we need to pass the lambda now.

149
00:11:02,090 --> 00:11:05,090
So B would be the parameter of the lambda.

150
00:11:05,120 --> 00:11:07,780
Then the arrow, then the body of that.

151
00:11:07,790 --> 00:11:11,390
And for the body will say the dot.

152
00:11:12,510 --> 00:11:13,380
Contains.

153
00:11:14,850 --> 00:11:16,670
And our category word is.

154
00:11:17,240 --> 00:11:22,670
So it's a simple categorization and the filter method returns a true or false.

155
00:11:26,920 --> 00:11:28,380
It's as simple as that.

156
00:11:28,390 --> 00:11:32,620
So the filter method is taking a dock and a predicate.

157
00:11:33,370 --> 00:11:38,260
So this is essentially an instantiation of the predicate.

158
00:11:38,500 --> 00:11:40,270
Predicate is a functional interface.

159
00:11:40,390 --> 00:11:46,660
And within the functional interface we are calling this variable as filter and we are invoking the test

160
00:11:46,660 --> 00:11:47,260
method.

161
00:11:47,560 --> 00:11:51,700
So test is a method in predicate and we are passing the document.

162
00:11:52,330 --> 00:11:57,550
And the logic for the test is essentially this one, the body of the lambda expression.

163
00:11:58,330 --> 00:12:01,510
So that goes into the test, into the test method.

164
00:12:01,870 --> 00:12:08,860
And so the test since the test is being passed, doc, so this doc is essentially the argument that

165
00:12:08,860 --> 00:12:12,190
gets passed to the to the lambda parameter here.

166
00:12:12,370 --> 00:12:18,130
And if the doc contains stream, then test would return a true because this contains method would either

167
00:12:18,130 --> 00:12:19,570
return a true or false.

168
00:12:19,810 --> 00:12:22,420
So if it returns true, then true will return here.

169
00:12:23,200 --> 00:12:24,580
So this is an instance.

170
00:12:24,580 --> 00:12:28,870
So before Java eight, we were we would have used anonymous functions.

171
00:12:28,870 --> 00:12:34,570
But now since we have lambda expressions, which is much more elegant and compact, we are going to

172
00:12:34,570 --> 00:12:35,230
use that.

173
00:12:39,540 --> 00:12:40,930
So we are done with the first step.

174
00:12:40,950 --> 00:12:43,110
Now we need to apply the transformation step.

175
00:12:48,870 --> 00:12:50,880
So once again, the parameter here.

176
00:12:54,410 --> 00:12:57,640
And we need to strip the HTML tags.

177
00:12:57,650 --> 00:12:59,570
So that's the first transformation.

178
00:12:59,810 --> 00:13:01,400
So it will be DX here.

179
00:13:01,850 --> 00:13:06,440
So the is the parameter and strip HTML taxes define here.

180
00:13:06,830 --> 00:13:12,560
So for strip HTML tags in order to remove the HTML tags, I'm using a third party library called HTML

181
00:13:12,560 --> 00:13:18,710
cleaner, which also has this class called HTML cleaner, and the job file will be available in the

182
00:13:18,710 --> 00:13:19,730
resources section.

183
00:13:20,030 --> 00:13:25,250
And we are simply invoking the clean method of this class and we are passing the document and we are

184
00:13:25,250 --> 00:13:29,510
invoking some method called get text and we are invoking the two string method here.

185
00:13:29,510 --> 00:13:30,440
So we are chaining.

186
00:13:30,800 --> 00:13:37,040
So this particular clean method will simply strip off the HTML text instead of doing it.

187
00:13:37,190 --> 00:13:39,950
We are using existing logic for that.

188
00:13:40,860 --> 00:13:43,290
And it seems to be a nice library.

189
00:13:43,470 --> 00:13:44,990
So that's what we are doing here.

190
00:13:45,000 --> 00:13:47,790
Strip tax, but it is done by the transfer method.

191
00:13:47,880 --> 00:13:53,400
So the transfer method takes a function here and function here.

192
00:13:53,400 --> 00:14:00,060
So the input is string and the output is also string and we are calling it as transformer and the transformer

193
00:14:00,060 --> 00:14:05,970
interface has the apply method predicate interface has the test method because we are testing something,

194
00:14:06,270 --> 00:14:10,920
but here it has apply method because we want to apply a transformation.

195
00:14:11,160 --> 00:14:16,620
So this is the HTML document and the logic is being passed here.

196
00:14:16,620 --> 00:14:18,120
Strip HTML tags.

197
00:14:18,120 --> 00:14:20,490
So this is the logic of the applied method.

198
00:14:20,760 --> 00:14:26,430
So it's going to take the document with the HTML tags and it is going to strip off the HTML tags.

199
00:14:26,460 --> 00:14:27,690
That's what the logic does.

200
00:14:28,230 --> 00:14:31,080
So the output is assigned to a document.

201
00:14:32,680 --> 00:14:34,840
And we need to apply the second transformation.

202
00:14:37,120 --> 00:14:41,230
So the same document which is stripped off the HTML tags is passed here.

203
00:14:43,790 --> 00:14:47,000
So this time we are invoking remove stop words.

204
00:14:48,630 --> 00:14:48,950
Okay.

205
00:14:48,980 --> 00:14:50,780
And remove stopwatches here.

206
00:14:51,350 --> 00:14:58,310
So the stopwatch is defined in this list and it is just some normal, very generic words.

207
00:14:59,000 --> 00:15:01,400
And the most obvious method is here.

208
00:15:01,580 --> 00:15:05,450
And it takes a document and it simply removes all of these words.

209
00:15:05,570 --> 00:15:07,130
You don't have to worry about this logic.

210
00:15:07,130 --> 00:15:08,510
You can look at it later.

211
00:15:08,660 --> 00:15:15,080
It just removes takes a document which is which has been stripped off the HTML tags and it just removes

212
00:15:15,080 --> 00:15:16,820
any occurrences of these words.

213
00:15:18,690 --> 00:15:20,980
So that's the that's inside the indexer.

214
00:15:21,000 --> 00:15:28,020
So we are invoking the same transform method, but it is a very different logic and this behavior is

215
00:15:28,020 --> 00:15:30,480
being passed via the lambda, right?

216
00:15:30,480 --> 00:15:31,760
So that's the beauty of it.

217
00:15:31,770 --> 00:15:38,580
So we are able to make use of the same transform method, but they are doing very different things.

218
00:15:38,910 --> 00:15:40,230
So the behavior is being passed.

219
00:15:40,230 --> 00:15:46,380
So it's like different strategies that are being passed here when we are nicely utilizing the same function.

220
00:15:46,500 --> 00:15:49,080
So the behavior is getting passed here.

221
00:15:49,260 --> 00:15:53,890
So behavior is like the first class citizens in Java eight.

222
00:15:53,910 --> 00:15:59,730
So this is functional programming, functional style functional programming in action.

223
00:16:02,250 --> 00:16:03,900
So that's the document.

224
00:16:04,200 --> 00:16:05,910
Let's go print it.

225
00:16:06,600 --> 00:16:08,680
As I said, only two documents are there.

226
00:16:08,700 --> 00:16:10,530
The first document has the word stream.

227
00:16:10,530 --> 00:16:11,010
The second.

228
00:16:11,280 --> 00:16:12,930
The fourth one also has stream.

229
00:16:13,080 --> 00:16:15,360
And the second and third have been stripped out.

230
00:16:15,810 --> 00:16:16,950
Have been filtered out.

231
00:16:17,070 --> 00:16:21,720
And the HTML tags have been stripped and all of the stops are also removed.

232
00:16:22,680 --> 00:16:23,860
So that's that.

233
00:16:23,880 --> 00:16:30,570
So in this example, here we are passing this lambda directly, but we can also do something else.

234
00:16:30,570 --> 00:16:35,160
Like we can also assign this lambda to here.

235
00:16:35,160 --> 00:16:40,710
In this case it is being passed as a method argument, but we can also assign it to a variable and pass

236
00:16:40,710 --> 00:16:41,730
that variable to.

237
00:16:42,240 --> 00:16:47,220
So if we are assigning it to a variable, that variable has to be of type function.

238
00:16:47,340 --> 00:16:48,630
So let's do that.

239
00:16:57,760 --> 00:16:58,000
Okay.

240
00:16:58,060 --> 00:17:03,180
So we are just assigning the lambda earlier it was being assigned, but it was a method parameter.

241
00:17:03,190 --> 00:17:07,000
Now we are assigning it here and we can still call.

242
00:17:08,200 --> 00:17:09,670
You can still do this.

243
00:17:15,270 --> 00:17:16,500
You can just pass that.

244
00:17:17,040 --> 00:17:18,990
Similarly, we can also.

245
00:17:21,740 --> 00:17:22,960
So there is no difference here.

246
00:17:22,970 --> 00:17:26,630
It's just that we are assigning to a variable of type function and we are passing it.

247
00:17:26,900 --> 00:17:29,450
Similarly, we can also have the second one.

248
00:17:29,870 --> 00:17:31,700
Let's call it stop word remover.

249
00:17:32,900 --> 00:17:39,830
So this particular function is going to remove the stop words and we can use the same one here.

250
00:17:42,370 --> 00:17:47,650
And we can invoke the transform method and the transform method is simply invoking the apply method,

251
00:17:47,650 --> 00:17:48,030
right?

252
00:17:48,040 --> 00:17:52,900
So we can also just directly invoke the apply method here.

253
00:17:55,540 --> 00:17:59,650
So we really do not have to invoke the transform tool, right?

254
00:17:59,650 --> 00:18:02,860
Because the transform method is also doing the same thing.

255
00:18:02,860 --> 00:18:06,940
It's just invoking the apply method because function has the applied method.

256
00:18:07,790 --> 00:18:08,450
So that's it.

257
00:18:08,450 --> 00:18:10,460
So we are just doing it in a different way here.

258
00:18:10,460 --> 00:18:13,160
We are doing it here instead of doing it in the transform.

259
00:18:13,160 --> 00:18:14,510
So let me run it again.

260
00:18:15,750 --> 00:18:17,520
So it's just the same output.

261
00:18:17,700 --> 00:18:18,930
So we can do this.

262
00:18:19,110 --> 00:18:22,200
Now, let me comment that out.

263
00:18:26,030 --> 00:18:27,950
So we had a working transform.

264
00:18:28,490 --> 00:18:35,690
So there is also, instead of using function that is also a unity operator, which is a sub interface

265
00:18:35,690 --> 00:18:42,770
or function of unity operator is also a functional interface and we can also use that and it is just

266
00:18:42,770 --> 00:18:44,900
a specialization of function.

267
00:18:46,910 --> 00:18:58,730
Import control shift oh so function takes to here to parameters to it has two generic type parameters.

268
00:18:58,730 --> 00:19:02,120
One is one signifies the input and the other output.

269
00:19:02,120 --> 00:19:03,380
But you're not the operator.

270
00:19:03,380 --> 00:19:06,740
It just works on the same input and produces the same output.

271
00:19:06,740 --> 00:19:10,700
But we can also implement it this way because we are having the same type here.

272
00:19:10,700 --> 00:19:11,660
That's also fine.

273
00:19:11,990 --> 00:19:16,850
Or we can have different types too in certain transformations, but if we have this one, we can make

274
00:19:16,850 --> 00:19:17,420
use of unity.

275
00:19:17,480 --> 00:19:18,230
Operator.

276
00:19:18,440 --> 00:19:20,090
Now, so here.

277
00:19:21,270 --> 00:19:25,560
We are just invoking the method operator and the same output.

278
00:19:25,590 --> 00:19:32,220
The reason I commented this out is because here we are using function, but this document transform

279
00:19:32,220 --> 00:19:36,440
here is actually taking a unity operator so there will be a compilation error.

280
00:19:36,450 --> 00:19:38,460
So that's the reason I have done that.

281
00:19:39,200 --> 00:19:42,320
So that's predicate and function.

282
00:19:42,620 --> 00:19:46,100
Now I want to show something called composing.

283
00:19:47,420 --> 00:19:53,180
So I mentioned that the function interface also has some default methods and a static method.

284
00:19:53,180 --> 00:19:56,330
So let's invoke that default method.

285
00:19:56,330 --> 00:20:04,820
It has a default method called and then and if we use and then basically we can compose two functions.

286
00:20:05,420 --> 00:20:12,680
For instance, we can compose this HTML cleaner and stopwatch remover into a single function which is

287
00:20:12,680 --> 00:20:14,240
called as a composed function.

288
00:20:14,840 --> 00:20:16,420
So let's do that.

289
00:20:16,430 --> 00:20:21,440
So for that, I'll take this HTML cleaner, which is a function.

290
00:20:22,530 --> 00:20:24,060
And it has the default method.

291
00:20:24,060 --> 00:20:28,410
And then and and then we'll accept another function.

292
00:20:28,590 --> 00:20:31,290
So this is how composition happens.

293
00:20:31,440 --> 00:20:36,960
And it returns a function so and then takes a function, but also returns a function.

294
00:20:36,960 --> 00:20:38,340
So that's also possible.

295
00:20:38,790 --> 00:20:42,150
So it would also be function or string of string.

296
00:20:44,180 --> 00:20:47,360
Let's call it a processor.

297
00:20:51,410 --> 00:20:56,000
And you can do that and pass the duck processor.

298
00:20:57,200 --> 00:20:57,890
Here.

299
00:21:03,000 --> 00:21:04,030
So we can do that.

300
00:21:04,050 --> 00:21:10,850
So now we are we are invoking the transform only once, but we are passing a composed function here.

301
00:21:10,860 --> 00:21:16,980
And what and then does is so it is returning a compost function and within the transform we are still

302
00:21:16,980 --> 00:21:18,690
invoking the apply method.

303
00:21:18,720 --> 00:21:26,070
But this time what happens is first this function will be applied HTML cleaner and then the result that

304
00:21:26,070 --> 00:21:30,240
we get another document that will be passed to the second function.

305
00:21:30,960 --> 00:21:33,390
So we are changing the functions in this way.

306
00:21:33,390 --> 00:21:39,630
So we are saying that first apply this and then as the method names are just here and then apply the

307
00:21:39,630 --> 00:21:41,550
second, the second function.

308
00:21:41,550 --> 00:21:46,800
So this will be applied first and now the result of that will be passed to the second function, which

309
00:21:46,800 --> 00:21:48,240
does another transformation.

310
00:21:48,240 --> 00:21:51,240
So that's what the apply method will do internally.

311
00:21:51,540 --> 00:21:54,960
So we are passing this compost function and let me just run.

312
00:21:54,960 --> 00:21:57,120
That will still get the same output here.

313
00:22:05,400 --> 00:22:07,210
That needs to be here if you have.

314
00:22:07,450 --> 00:22:09,220
We are not assigning it to Doc.

315
00:22:11,330 --> 00:22:13,790
So now we can see that it's the same output.

316
00:22:13,790 --> 00:22:15,410
So we can do that also.

317
00:22:15,920 --> 00:22:16,850
And.

318
00:22:18,130 --> 00:22:21,250
So that's the that's how we can compose functions.

319
00:22:21,850 --> 00:22:26,110
And it also shows you how by invoking this, it will return a function.

320
00:22:26,470 --> 00:22:31,030
So now the last thing I want to show is something called by function.

321
00:22:31,210 --> 00:22:35,200
A function takes a single parameter and returns a single output, right?

322
00:22:35,320 --> 00:22:38,980
It returns an output, but by function takes two method parameters.

323
00:22:38,980 --> 00:22:40,360
So that's the only difference.

324
00:22:40,480 --> 00:22:43,190
So just like by function, we also have by predicate.

325
00:22:43,210 --> 00:22:46,230
And in the next lecture, we are looking at consumer and supplier.

326
00:22:46,240 --> 00:22:48,160
It also has buy variants.

327
00:22:48,480 --> 00:22:48,670
Okay.

328
00:22:48,670 --> 00:22:56,110
So now I want to show the buy function, but for that, I want to show it here instead of using this.

329
00:22:57,390 --> 00:23:02,930
So this instead of using a filter, we can implement this filter using a bi function.

330
00:23:02,940 --> 00:23:04,410
So let's look at that.

331
00:23:04,410 --> 00:23:05,760
So let's define.

332
00:23:06,990 --> 00:23:09,000
By function here.

333
00:23:09,390 --> 00:23:11,450
So it takes two parameters.

334
00:23:11,460 --> 00:23:17,340
The first one, let's pass the document, and the second one, let's pass the category.

335
00:23:17,790 --> 00:23:21,060
And the third one would be a boolean parameter.

336
00:23:22,000 --> 00:23:22,110
Okay.

337
00:23:22,240 --> 00:23:24,580
So here, buy implies two parameters.

338
00:23:24,790 --> 00:23:26,110
Two method parameters.

339
00:23:27,020 --> 00:23:31,730
It's a by function and let's define our Lambda dx.

340
00:23:32,060 --> 00:23:35,120
See the main port that controls shift or.

341
00:23:37,010 --> 00:23:43,520
And here so B would be correspond to D would correspond to document, C would correspond to the category

342
00:23:44,000 --> 00:23:47,150
and let's say the dot.

343
00:23:48,230 --> 00:23:49,730
Danes see.

344
00:23:50,380 --> 00:23:52,120
So that's the logic.

345
00:23:52,880 --> 00:23:56,440
Now this function we can directly apply here.

346
00:23:57,800 --> 00:23:58,400
Apply.

347
00:23:58,400 --> 00:24:04,340
So it also has play method like function, but it takes two parameters as I mentioned earlier.

348
00:24:04,340 --> 00:24:08,540
So we will pass doc and for the category we will just pass.

349
00:24:09,760 --> 00:24:10,230
Stream.

350
00:24:10,780 --> 00:24:11,620
So that's it.

351
00:24:11,620 --> 00:24:13,600
That's the only thing difference here.

352
00:24:13,810 --> 00:24:20,650
So we are implementing the filter in this way because all we need is all we need to return as a boolean.

353
00:24:20,650 --> 00:24:22,360
And this logic does that.

354
00:24:22,810 --> 00:24:29,470
So this is going to be the behavior for the apply method and the applied method is taking doc on stream,

355
00:24:29,470 --> 00:24:33,970
which means that doc will be this, stream will be this, and this is the logic.

356
00:24:34,090 --> 00:24:35,320
So if we run it.

357
00:24:36,390 --> 00:24:37,660
You get the same output.

358
00:24:37,960 --> 00:24:41,380
So that's the by function, that is also by predicate.

359
00:24:41,500 --> 00:24:46,960
So in the next lecture, we will look at consumer and the supplier, and we will also look at the API

360
00:24:46,960 --> 00:24:54,460
specification also so that you can get a feel for how the API looks, the Java function, the function

361
00:24:54,460 --> 00:24:56,860
package with all the standard interfaces.

362
00:24:57,160 --> 00:24:59,050
So that we will do it in the next lecture.

363
00:24:59,350 --> 00:25:01,640
So I hope you enjoyed learning about this.

364
00:25:01,690 --> 00:25:05,590
Functional interfaces the first two functional interfaces and thank you.

365
00:25:05,590 --> 00:25:08,020
And this code will be available in the resources section.

366
00:25:08,050 --> 00:25:08,950
Happy coding.

