1
00:00:02,090 --> 00:00:02,990
Hi there.

2
00:00:03,020 --> 00:00:03,719
This is the room.

3
00:00:04,310 --> 00:00:05,330
And welcome back.

4
00:00:05,870 --> 00:00:11,240
In the last lecture, we looked at the database design for our three year project.

5
00:00:11,540 --> 00:00:18,110
And now it's time to materialize that database design, which means that we are going to create that

6
00:00:18,110 --> 00:00:21,260
database for our project, for our three year project.

7
00:00:21,920 --> 00:00:28,580
One way was to use the forward engineering approach from the Meyer SQL workbench itself, and we have

8
00:00:28,580 --> 00:00:34,610
seen an instance of that, but we will not be doing that and we will manually create all our tables

9
00:00:34,610 --> 00:00:36,560
and populate them with the data.

10
00:00:37,100 --> 00:00:39,740
And for this, we'll be using SQL queries.

11
00:00:40,520 --> 00:00:46,160
And the data that we are going to populate is simply the data from our project, which so far was being

12
00:00:46,160 --> 00:00:47,420
read from text files.

13
00:00:47,870 --> 00:00:51,950
So we are going to migrate the data from text files into our database.

14
00:00:53,720 --> 00:00:57,560
Now official statements can be classified into two categories.

15
00:00:58,680 --> 00:01:03,780
One is the data manipulation language which is in short referred to as DM ML.

16
00:01:04,720 --> 00:01:10,540
And the other is data definition language, which in short is referred to as DDL.

17
00:01:11,140 --> 00:01:18,100
Now, as the name implies, queries that fall under data manipulation language are responsible for manipulating

18
00:01:18,100 --> 00:01:21,040
the data which is already there in the database.

19
00:01:21,550 --> 00:01:28,600
So you would have queries for doing things like retrieving of data, inserting new data, and updating

20
00:01:28,600 --> 00:01:30,520
and deleting of existing data.

21
00:01:30,970 --> 00:01:35,170
So select insert update and delete statements which are shown.

22
00:01:35,170 --> 00:01:37,300
Here are what would be used.

23
00:01:37,750 --> 00:01:44,920
Now data definition language, on the other hand, as the name implies, is all about defining the data

24
00:01:44,920 --> 00:01:47,170
which we are going to store in the database.

25
00:01:47,680 --> 00:01:54,250
For instance, we would describe the data type information for each of the table columns.

26
00:01:54,760 --> 00:02:00,850
Similarly, we would define the integrity constraints, like the primary keys and unique keys in our

27
00:02:00,850 --> 00:02:01,330
table.

28
00:02:01,810 --> 00:02:06,790
We can see the type of statements that we can have under all of these.

29
00:02:06,820 --> 00:02:11,620
Create table and alt table are probably the most commonly used ones.

30
00:02:12,350 --> 00:02:19,160
Now typically DDL queries are executed directly on the database server instance itself.

31
00:02:19,670 --> 00:02:22,880
That is, they would not be coming from your Java programs.

32
00:02:23,540 --> 00:02:31,130
However, the DMS queries are typically executed from the programs itself in response to some user actions,

33
00:02:31,550 --> 00:02:34,310
and for that the GBK API would be used.

34
00:02:34,940 --> 00:02:40,550
In this particular lecture, we will mainly look at create table and insert statements.

35
00:02:41,000 --> 00:02:44,570
So let's just go ahead and start creating our database.

36
00:02:46,990 --> 00:02:50,050
Here is the text file in our project.

37
00:02:50,620 --> 00:02:53,260
So we are going to migrate this into our database.

38
00:02:53,290 --> 00:02:55,930
Similarly, we have movie and here it is.

39
00:02:55,930 --> 00:02:58,080
So we have user and web link.

40
00:02:58,090 --> 00:03:02,740
So all of the data from these files will have to be moved into our database.

41
00:03:03,370 --> 00:03:08,500
So and here are all the commands that we are going to execute.

42
00:03:08,950 --> 00:03:12,400
So these commands will help us create the database on the tables.

43
00:03:12,430 --> 00:03:15,940
So let me just go ahead and open the my SQL Server instance.

44
00:03:15,940 --> 00:03:22,480
So one way we know is to go here and to start and my SQL here.

45
00:03:22,930 --> 00:03:26,920
So it has a workbench and also the server 5.5, if I click on that.

46
00:03:27,720 --> 00:03:29,670
So this is a command line utility.

47
00:03:29,760 --> 00:03:35,400
So instead of using this, let me just use it from the command prompt itself.

48
00:03:35,550 --> 00:03:37,800
So let me just search for CMD.

49
00:03:39,890 --> 00:03:43,300
Now to connect to use the minus client.

50
00:03:43,310 --> 00:03:44,450
So let me just say.

51
00:03:48,240 --> 00:03:51,720
This is how you're going to connect as a route user.

52
00:03:52,290 --> 00:03:54,480
So we are now connected to the server instance.

53
00:03:54,480 --> 00:03:55,920
So we just need to.

54
00:03:56,660 --> 00:04:03,050
See what all databases we have in the server instance so we can have more than one database.

55
00:04:03,440 --> 00:04:07,040
So here are some of the databases that are already there.

56
00:04:07,400 --> 00:04:13,400
If you recall, the JID underscore test was the one which we created earlier in the earlier lecture

57
00:04:13,490 --> 00:04:18,260
and we used the forward engineering approach in order to create this table.

58
00:04:18,649 --> 00:04:27,440
And here information underscore schema is it comes with my SQL itself and it holds information about

59
00:04:27,470 --> 00:04:29,600
all of the other databases.

60
00:04:29,900 --> 00:04:34,370
So it kind of holds the meta information about all other databases.

61
00:04:34,670 --> 00:04:37,940
So later, we will also look at this in one of the queries.

62
00:04:38,240 --> 00:04:45,300
Now let's go ahead and create our new database and let's call it as the JID underscore, trivial.

63
00:04:45,350 --> 00:04:50,450
So it would be the command would be create database, JID underscore trivial.

64
00:04:50,540 --> 00:04:52,160
So let me just copy this.

65
00:04:56,060 --> 00:04:59,420
So it's create database and the database name.

66
00:04:59,690 --> 00:05:03,390
Now, if we want to drop this database, we want to delete it.

67
00:05:03,410 --> 00:05:05,270
So all we will do as.

68
00:05:07,830 --> 00:05:08,640
And that's it.

69
00:05:08,640 --> 00:05:09,270
It's dropped.

70
00:05:09,630 --> 00:05:12,150
But we just want to create it.

71
00:05:12,150 --> 00:05:13,860
So let me just recreate.

72
00:05:15,760 --> 00:05:21,400
If I say show databases it will we will see that it's created here underscore trivial.

73
00:05:21,760 --> 00:05:26,460
So now we need to get into the database and start creating tables.

74
00:05:26,470 --> 00:05:28,070
So we will say use.

75
00:05:28,090 --> 00:05:30,510
That's what we have to do.

76
00:05:30,850 --> 00:05:31,390
ID.

77
00:05:33,350 --> 00:05:39,320
So now we are inside the database and in order to see all the tables, we can execute this command.

78
00:05:41,480 --> 00:05:42,530
Sure dbus.

79
00:05:42,530 --> 00:05:44,960
But since we don't have anything, it's empty.

80
00:05:46,760 --> 00:05:47,990
Let's go down.

81
00:05:48,760 --> 00:05:54,370
So the first thing that we will be doing is we are going to create all the book related tables like

82
00:05:54,370 --> 00:05:56,440
the book publisher and author.

83
00:05:56,740 --> 00:05:58,510
So this is nothing bad.

84
00:05:59,110 --> 00:06:03,250
So this is the these are the tables book publisher, book author and author.

85
00:06:03,460 --> 00:06:05,440
So we are going to create them.

86
00:06:07,340 --> 00:06:07,820
Okay.

87
00:06:07,820 --> 00:06:12,890
So the first statement here is create table author.

88
00:06:13,130 --> 00:06:16,730
So we are going to create author and the column is ID.

89
00:06:16,760 --> 00:06:20,510
The first column is ID and it has a type of big end.

90
00:06:21,110 --> 00:06:26,600
And big end is like long, so it occupies eight, eight bytes.

91
00:06:26,630 --> 00:06:28,120
Now it is a primary key.

92
00:06:28,130 --> 00:06:30,410
So we have to specify it this way.

93
00:06:30,410 --> 00:06:38,420
And we are saying that it is auto increment and the second column is name and it has a type of watcher

94
00:06:38,930 --> 00:06:47,180
with this 200 here indicates that we can store it max 200 characters for the name field and it has to

95
00:06:47,180 --> 00:06:50,660
be not none, which means that we cannot store any null values.

96
00:06:50,810 --> 00:06:56,540
Now here, auto increment implies that when we are inserting the data, we don't have to insert any

97
00:06:56,540 --> 00:07:04,790
value for ID it will be automatically inserted and for each new row the value will also be automatically

98
00:07:04,790 --> 00:07:05,480
incremented.

99
00:07:05,480 --> 00:07:10,550
So it will be one greater than the value inserted in the previous row.

100
00:07:11,000 --> 00:07:13,750
So it starts with one next it will be two and so on.

101
00:07:13,760 --> 00:07:15,170
Same with publisher.

102
00:07:15,170 --> 00:07:20,270
We have ID a name, publisher name and we have some columns for book.

103
00:07:20,270 --> 00:07:24,530
So here I have listed some of the common data types.

104
00:07:24,530 --> 00:07:30,680
So for Integer, so these are the different data types that we have tiny in small and medium INT and

105
00:07:30,680 --> 00:07:31,160
big end.

106
00:07:31,160 --> 00:07:34,490
So big end was the one which we have used now.

107
00:07:34,490 --> 00:07:39,620
Big end is like eight bytes and tiny and takes only one byte.

108
00:07:39,620 --> 00:07:42,320
So this is like the byte in Java.

109
00:07:42,350 --> 00:07:43,910
Small end takes two bytes.

110
00:07:43,910 --> 00:07:48,710
So it's like short medium, it uses three bytes and uses four bytes.

111
00:07:48,710 --> 00:07:51,230
So just like in Java, big end is like long.

112
00:07:51,230 --> 00:07:52,790
So it uses eight bytes.

113
00:07:53,900 --> 00:07:57,260
So but in reality, I think mostly it will do.

114
00:07:57,260 --> 00:08:02,870
But if you are working on some web, on some website which has millions and millions of millions of

115
00:08:02,870 --> 00:08:05,660
records, so it's really very popular website.

116
00:08:06,260 --> 00:08:09,020
Then in that case, you can go for Big End.

117
00:08:10,070 --> 00:08:13,310
And for here, the second data type is decimal.

118
00:08:13,310 --> 00:08:17,360
It's a fixed point and this you will use for monetary calculations.

119
00:08:17,630 --> 00:08:19,220
So it's kind of like big decimal.

120
00:08:19,700 --> 00:08:21,650
And the third one is floating point.

121
00:08:21,650 --> 00:08:23,840
So it's just like in Java float and double.

122
00:08:24,260 --> 00:08:25,790
Now to represent strings.

123
00:08:25,790 --> 00:08:32,210
We have one chart which we have already seen here and we have CAD also, but convert is like fixed line

124
00:08:32,210 --> 00:08:32,840
strings.

125
00:08:32,840 --> 00:08:40,909
So if you set 200 then it will always be every value would have a length of 200 even if you don't if

126
00:08:40,909 --> 00:08:43,159
the value does not have so many characters.

127
00:08:43,250 --> 00:08:48,260
So if it has only one character, then the rest 199 would be padded with space.

128
00:08:48,800 --> 00:08:50,390
So that's the car.

129
00:08:50,510 --> 00:08:56,870
So you would want to use car when you are storing some fixed length strings, like for states.

130
00:08:56,870 --> 00:09:00,410
For states you can have abbreviated notation.

131
00:09:00,410 --> 00:09:06,260
So let's say two characters or let's say for postal codes or zip codes.

132
00:09:06,260 --> 00:09:10,790
In some countries they call it zip code and some other countries are postal codes, so they may have

133
00:09:10,790 --> 00:09:12,830
a fixed length of five or something like that.

134
00:09:13,610 --> 00:09:21,890
So, so for that you can use car and text is just a pure text if you want to store something like that.

135
00:09:21,890 --> 00:09:28,130
So blob and text are for, for large values, for example, for images or something like that.

136
00:09:28,130 --> 00:09:30,170
You can go for Blob and for dates.

137
00:09:30,170 --> 00:09:33,800
We have these different types and we are going to use date time here.

138
00:09:33,830 --> 00:09:34,880
Date is only date.

139
00:09:34,880 --> 00:09:35,720
Time is only time.

140
00:09:35,720 --> 00:09:37,760
Date time has both date and time and times.

141
00:09:37,760 --> 00:09:39,320
Time is also like date time.

142
00:09:39,320 --> 00:09:45,680
So we will be using date time here and this link has all the different data types and it describes everything.

143
00:09:45,680 --> 00:09:47,210
So it comes from the my SQL.

144
00:09:47,660 --> 00:09:50,060
So that's with this.

145
00:09:50,060 --> 00:09:52,760
So we have author, publisher, book table.

146
00:09:52,760 --> 00:09:56,270
So in all of these tables we have the ID field as the primary key.

147
00:09:56,510 --> 00:10:02,690
Now here, this is a book title and it has a max of 500 watcher and it's not null.

148
00:10:02,720 --> 00:10:06,320
Then the publication here and this is a publisher underscore ID.

149
00:10:06,350 --> 00:10:13,370
So this one is actually a foreign key which is referencing the ID and the publisher field and that we

150
00:10:13,370 --> 00:10:15,260
are indicating it here.

151
00:10:15,530 --> 00:10:22,610
So we are saying foreign key of publisher underscore ID, which is from this table and it references

152
00:10:22,880 --> 00:10:26,390
publisher ID, field and publisher table.

153
00:10:26,750 --> 00:10:28,100
So that's what it means.

154
00:10:28,520 --> 00:10:32,390
And all of these are separated by commas here, as you can see.

155
00:10:33,280 --> 00:10:35,230
So that's with the publisher and obscurity.

156
00:10:35,260 --> 00:10:37,370
Next one is book John Ray.

157
00:10:37,870 --> 00:10:40,210
Now let me go back to our project.

158
00:10:40,660 --> 00:10:43,570
So here book genre enum is there.

159
00:10:43,750 --> 00:10:44,320
Right.

160
00:10:44,440 --> 00:10:49,180
And these constants in constants have an associated audience.

161
00:10:49,180 --> 00:10:50,380
So this is zero.

162
00:10:50,410 --> 00:10:52,300
This one has one, two, and so on.

163
00:10:52,840 --> 00:10:58,270
So we are just storing the ordinal number directly in the database.

164
00:10:58,540 --> 00:11:00,970
So we are not maintaining a separate table.

165
00:11:01,060 --> 00:11:05,900
So you can think that this in itself is the table and the ordinance.

166
00:11:05,920 --> 00:11:08,950
You can think of them as the ID values in that table.

167
00:11:09,220 --> 00:11:13,240
So this is the kind of style that we are using in this project.

168
00:11:13,240 --> 00:11:19,620
So some developers do that or some other in some projects they actually maintain a separate table called

169
00:11:19,630 --> 00:11:23,470
book underscore genre in the database, and they have all of this stored there.

170
00:11:23,680 --> 00:11:25,420
But here, I think we can use this.

171
00:11:25,420 --> 00:11:26,230
It's fine.

172
00:11:27,160 --> 00:11:28,840
So let me just go back.

173
00:11:29,290 --> 00:11:30,950
So that's with the book genre.

174
00:11:30,970 --> 00:11:31,720
Underscore it.

175
00:11:32,260 --> 00:11:33,940
Amazon rating is double.

176
00:11:33,970 --> 00:11:39,820
Kid friendly status is tiny end, which means that whether it is kid friendly or not.

177
00:11:39,820 --> 00:11:42,490
So we are just using tiny end and create a date.

178
00:11:42,490 --> 00:11:49,600
So whenever a new record is created, we wanted we want to keep track of that time of the date and the

179
00:11:49,600 --> 00:11:50,920
time when it was created.

180
00:11:51,070 --> 00:11:57,130
So we are calling it as created underscore date and we are using date time for that.

181
00:11:57,280 --> 00:12:00,160
Now here we are specifying a unique constraint.

182
00:12:00,160 --> 00:12:06,610
So this would be a candidate key and we are saying that title publication underscore here and publisher

183
00:12:06,610 --> 00:12:10,630
underscore ID together would uniquely identify error.

184
00:12:11,290 --> 00:12:12,790
So that's one of the constraints.

185
00:12:12,790 --> 00:12:18,280
So you have this keyword called constraint followed by unique, followed by one or more columns.

186
00:12:19,580 --> 00:12:23,180
And so then we have the book underscore author table here.

187
00:12:23,810 --> 00:12:27,470
So book underscore author table maintains the relationship between book and author.

188
00:12:27,470 --> 00:12:34,350
So you have the ID book ID authority and book ID as a foreign key and it is referencing the ID field

189
00:12:34,370 --> 00:12:38,360
and the book and author underscore ID references, the ID fill in author.

190
00:12:38,360 --> 00:12:39,350
Right, we know that.

191
00:12:39,350 --> 00:12:44,000
And we also want the book, our underscore ID and author underscore ID to be unique.

192
00:12:44,330 --> 00:12:47,660
So so there is a unique constraint here that we are defining.

193
00:12:47,660 --> 00:12:49,210
So that's a book underscore author.

194
00:12:49,220 --> 00:12:53,300
So let's just go ahead and create this table first.

195
00:12:57,180 --> 00:12:58,590
So it got created.

196
00:12:58,980 --> 00:13:02,790
Now, let me create let me just run all of these together.

197
00:13:05,120 --> 00:13:07,520
So three more tables got created.

198
00:13:07,850 --> 00:13:10,510
Now, here, this is how we insert values.

199
00:13:10,520 --> 00:13:13,190
So first we are inserting values into the table.

200
00:13:13,190 --> 00:13:20,870
So the statement as the query syntax is like this insert into followed by the table name which is author,

201
00:13:20,870 --> 00:13:24,770
followed by the number of the columns into which we want to insert the values.

202
00:13:24,770 --> 00:13:27,650
Since ID is auto increment, we don't have to include that.

203
00:13:27,650 --> 00:13:30,770
So it would be name and values and fourth string.

204
00:13:30,770 --> 00:13:33,530
It has to be in like this and single codes.

205
00:13:33,530 --> 00:13:34,790
So this is what we have.

206
00:13:34,880 --> 00:13:35,750
This is the first author.

207
00:13:35,750 --> 00:13:36,680
This is the second author.

208
00:13:36,680 --> 00:13:37,970
This is the third author.

209
00:13:38,390 --> 00:13:43,520
And we can also insert more than one authors in a single statement.

210
00:13:43,520 --> 00:13:46,070
So this one is for that.

211
00:13:46,310 --> 00:13:51,770
And we are inserting the final author so we can insert we can club all of them together in this way

212
00:13:51,770 --> 00:13:52,190
also.

213
00:13:52,190 --> 00:13:53,120
So that's possible.

214
00:13:53,120 --> 00:13:54,830
So let's go ahead.

215
00:13:55,100 --> 00:13:58,700
And this data is exact data which we have in the text files.

216
00:14:03,900 --> 00:14:04,690
So they are done.

217
00:14:04,710 --> 00:14:06,780
Let me also run both of these.

218
00:14:10,090 --> 00:14:10,220
Okay.

219
00:14:10,300 --> 00:14:13,770
So we are done with inserting the data into the authors table.

220
00:14:13,780 --> 00:14:19,870
And if you want to view what data we have, you have to use the select statement and START means that

221
00:14:19,870 --> 00:14:23,680
we we want to see the entire data in the table.

222
00:14:23,680 --> 00:14:27,040
So we want to see all the data that is stored in this table.

223
00:14:27,040 --> 00:14:31,780
So we are saying select star from the table name which is author.

224
00:14:32,050 --> 00:14:33,880
So let me execute that.

225
00:14:37,180 --> 00:14:40,330
So it has it says it has a truce.

226
00:14:40,570 --> 00:14:42,700
So these are the ones that got inserted.

227
00:14:43,030 --> 00:14:45,670
So next is these fi into publisher.

228
00:14:46,540 --> 00:14:52,570
Now here you can see that O'Reilly here has a single quotation within the string itself.

229
00:14:52,780 --> 00:14:59,080
So for that reason, we are actually enclosing this in double quotes instead of single quotes so that

230
00:14:59,080 --> 00:15:00,730
we can also retain this value.

231
00:15:00,910 --> 00:15:02,300
Otherwise, we will have an error.

232
00:15:02,320 --> 00:15:04,030
So let me just copy this.

233
00:15:08,070 --> 00:15:10,140
So we're done with inserting files.

234
00:15:10,560 --> 00:15:12,300
Next is the book table.

235
00:15:12,330 --> 00:15:20,100
So here we have all of these values publication here, publication risk for ID and Amazon rating.

236
00:15:21,200 --> 00:15:21,490
Okay.

237
00:15:21,590 --> 00:15:22,190
So on here.

238
00:15:22,190 --> 00:15:23,510
This is what we are entering.

239
00:15:23,810 --> 00:15:30,530
One publisher, 1854, and here this is the publication.

240
00:15:30,800 --> 00:15:32,060
Let me look at that.

241
00:15:33,180 --> 00:15:36,030
Your third one is the publisher underscore ID and the.

242
00:15:37,850 --> 00:15:39,290
And it says one here.

243
00:15:40,160 --> 00:15:44,000
So this is a publisher underscore it, which is referencing the publisher field.

244
00:15:44,270 --> 00:15:44,540
Right.

245
00:15:44,540 --> 00:15:45,410
So it has one.

246
00:15:45,410 --> 00:15:46,460
It's a foreign key.

247
00:15:46,730 --> 00:15:50,450
So this book is referencing the first publisher.

248
00:15:50,600 --> 00:15:55,280
And here this value is actually the genre information.

249
00:15:55,280 --> 00:15:57,290
So it has a value of six.

250
00:15:57,320 --> 00:16:02,670
Now if you see here, it has a book genre which is coming from the enum.

251
00:16:02,690 --> 00:16:07,690
So if you go back, the book is actually the genre is philosophy.

252
00:16:07,700 --> 00:16:09,440
So philosophy is here.

253
00:16:09,440 --> 00:16:12,740
So it's zero one, two, three, four, five and six.

254
00:16:13,250 --> 00:16:14,650
So that's what we are.

255
00:16:14,660 --> 00:16:16,490
That's why we have the value six here.

256
00:16:17,210 --> 00:16:22,520
And the rest of the stuff is straightforward, like the rating kid friendly status.

257
00:16:23,300 --> 00:16:24,970
Kid friendly status is two.

258
00:16:24,980 --> 00:16:26,780
And the last one was created date.

259
00:16:26,780 --> 00:16:33,350
And for that we are using this function called now and it will insert the date and time at this point

260
00:16:33,350 --> 00:16:36,350
of time whenever this query is going to be executed.

261
00:16:37,100 --> 00:16:37,850
So that's all there is.

262
00:16:37,850 --> 00:16:41,010
So these are the different five, the five queries that we have.

263
00:16:41,030 --> 00:16:44,510
So let me just run them in one go.

264
00:16:52,860 --> 00:16:54,360
So these are all the values.

265
00:16:54,660 --> 00:17:00,060
And you can see that here in the last four created date, we have the current date here.

266
00:17:00,600 --> 00:17:05,010
So similarly for the book, underscore author values are here.

267
00:17:05,460 --> 00:17:13,050
So typically when we have the books in the database and we have some author information and when we

268
00:17:13,050 --> 00:17:17,460
are inserting, sometimes these values can be inserted from the application itself.

269
00:17:17,640 --> 00:17:19,890
But in this case, we are doing it here.

270
00:17:21,819 --> 00:17:24,430
So book underscore it and author underscore it.

271
00:17:24,460 --> 00:17:27,310
So let me just insert that also.

272
00:17:27,849 --> 00:17:29,350
So these can be.

273
00:17:30,140 --> 00:17:36,620
These are such kind of data can be created from here, I think, but sometimes they are created from

274
00:17:36,620 --> 00:17:37,890
the application itself.

275
00:17:37,910 --> 00:17:43,880
Say, for example, if you are getting this information about books from some from third party resource

276
00:17:43,880 --> 00:17:49,550
like a web service, we can grab that and we can, you know, we can execute similar kind of queries

277
00:17:49,550 --> 00:17:50,870
from our Java programs.

278
00:17:54,590 --> 00:17:58,850
So we have this and as you can see, the ID field got incremented automatically.

279
00:17:59,390 --> 00:18:05,180
So that said and these commands, they just show that if you want to delete a particular row, you can

280
00:18:05,180 --> 00:18:05,930
use this.

281
00:18:05,930 --> 00:18:10,490
So from the book underscore author, we can delete an element a row like this.

282
00:18:10,490 --> 00:18:13,370
So we are saying book underscore ID is equal to five.

283
00:18:13,790 --> 00:18:16,070
So we are saying delete that particular row.

284
00:18:16,370 --> 00:18:19,910
So let me just do that also just so that you can see.

285
00:18:22,900 --> 00:18:23,310
Okay.

286
00:18:25,130 --> 00:18:29,330
So as you can see, the last row got deleted which had the underscore ID as five.

287
00:18:29,750 --> 00:18:31,190
So let me reinsert back.

288
00:18:31,190 --> 00:18:36,380
So it's insert into book on the score author and it's five comma eight.

289
00:18:41,570 --> 00:18:42,800
So that's with that.

290
00:18:42,800 --> 00:18:44,840
So we are done with the books now.

291
00:18:44,840 --> 00:18:47,690
So these are the these are the tables for movies.

292
00:18:47,690 --> 00:18:53,030
So you have similarly you have actor, director, movie and.

293
00:18:54,000 --> 00:18:58,170
This is what we have more we underscore actor, movie, underscore director.

294
00:18:58,260 --> 00:19:03,270
So movie underscore actor will capture the relationship between movie and actors and movie underscore

295
00:19:03,270 --> 00:19:03,840
director.

296
00:19:03,840 --> 00:19:05,880
And so we once again have foreign keys.

297
00:19:05,880 --> 00:19:08,040
So it's exactly identical to that.

298
00:19:08,130 --> 00:19:11,580
And we are also inserting the values here.

299
00:19:11,760 --> 00:19:15,660
So it's very similar to what we have for authors.

300
00:19:15,670 --> 00:19:19,800
So let me just create all of them in a single go.

301
00:19:23,490 --> 00:19:24,540
So we're done.

302
00:19:27,670 --> 00:19:29,770
Next, we have a Web link.

303
00:19:31,300 --> 00:19:32,710
So you can take a look at them.

304
00:19:32,710 --> 00:19:35,260
I'll make these files available for you.

305
00:19:40,330 --> 00:19:42,100
So it's all smooth execution.

306
00:19:43,360 --> 00:19:47,360
Next we have user table and the values for that.

307
00:19:47,380 --> 00:19:53,740
So user you have ID, email, password, first name, last name, gender ID and user type ID.

308
00:19:53,770 --> 00:19:57,250
So these are coming from the enemies created date once again.

309
00:19:57,250 --> 00:19:59,400
So every table has this created date.

310
00:19:59,410 --> 00:20:02,140
And here we are saying that email is unique.

311
00:20:03,040 --> 00:20:06,520
This is what it is because emails are, of course, unique.

312
00:20:08,370 --> 00:20:13,190
Because their use being used as for logging into the system.

313
00:20:13,200 --> 00:20:14,850
So let me just create that.

314
00:20:14,850 --> 00:20:15,840
So we are done with that.

315
00:20:15,840 --> 00:20:19,080
So basically we are done with all the queries here.

316
00:20:19,080 --> 00:20:28,110
We only queries that only tables that we need to create are the user underscore book and user underscore

317
00:20:28,410 --> 00:20:28,980
weblink.

318
00:20:28,980 --> 00:20:31,380
So those are the bookmarks.

319
00:20:31,380 --> 00:20:35,880
So when we are bookmarking these items, then we want to have these tables.

320
00:20:35,880 --> 00:20:40,830
So in one of the subsequent lectures, we will create these tables and then from our we will refactor

321
00:20:40,830 --> 00:20:45,510
our project code in order to populate these tables from the project itself.

322
00:20:45,510 --> 00:20:49,980
So as the code in our project is getting executed, these tables will be populated.

323
00:20:49,980 --> 00:20:57,150
So we are not going to populate these tables from using these queries in a similar in a fashion similar

324
00:20:57,150 --> 00:20:57,720
to this.

325
00:20:57,720 --> 00:21:01,800
So but we will actually populate the data from the program itself.

326
00:21:02,370 --> 00:21:05,760
Now, the final thing that I want to show here is.

327
00:21:06,600 --> 00:21:09,690
Some information about my school itself.

328
00:21:10,830 --> 00:21:13,830
My uncle has something called storage engines.

329
00:21:14,040 --> 00:21:20,310
Now, storage engines determine how MySQL stores data and which features are available.

330
00:21:20,340 --> 00:21:23,860
Now there is this command called show engines.

331
00:21:23,880 --> 00:21:25,530
It will show you all the.

332
00:21:27,480 --> 00:21:34,350
Engines that are present that my supports so they call it as storage engines and the two most commonly

333
00:21:34,350 --> 00:21:36,570
used are my ism and ODB.

334
00:21:36,810 --> 00:21:41,520
ODB is the default one and it's been default since my SQL 5.5.

335
00:21:41,520 --> 00:21:44,520
And prior to that the default was my ism.

336
00:21:44,850 --> 00:21:49,620
So within ODB it supports foreign keys and also transactions.

337
00:21:49,650 --> 00:21:57,450
Transactions are nothing but a group of SQL statements which will be executed as a logical unit of work.

338
00:21:57,690 --> 00:22:01,020
So they'll be treated as a single piece of work.

339
00:22:01,020 --> 00:22:06,000
For example, if you one example is let's say you want to transfer some money from your checking account

340
00:22:06,000 --> 00:22:10,230
into savings account, then you would debit from your checking account table.

341
00:22:10,230 --> 00:22:15,210
And we would have to credit that into the saving accounts table.

342
00:22:15,600 --> 00:22:22,320
There are two separate tables and we want that to happen atomically we don't want to do debits here.

343
00:22:22,320 --> 00:22:29,310
And then if if there is an error, then you don't want to leave your database in that kind of state,

344
00:22:29,310 --> 00:22:29,720
right?

345
00:22:29,730 --> 00:22:31,770
So it's like using synchronized keyword.

346
00:22:31,770 --> 00:22:37,200
So we want to make multiple statements to execute atomically.

347
00:22:37,200 --> 00:22:43,110
So it is all of them have to be executed successfully or if not, none of them will be executed.

348
00:22:43,110 --> 00:22:44,130
So something like that.

349
00:22:44,130 --> 00:22:46,950
So that's transactions and DB supports that.

350
00:22:46,950 --> 00:22:53,550
My exam does not support that and my ECM does not even support foreign keys, but it does support something

351
00:22:53,550 --> 00:22:55,110
called full text search.

352
00:22:55,110 --> 00:23:00,480
So if you have if you want to build a search engine or something like that for your data for for some

353
00:23:00,480 --> 00:23:05,070
parts of your data, let's say we are storing some documents, text documents in your database and if

354
00:23:05,070 --> 00:23:06,780
you want to support full text.

355
00:23:06,780 --> 00:23:08,820
So my sign will support that.

356
00:23:09,150 --> 00:23:14,400
So that's a feature that comes with my some which is not there with inaudible.

357
00:23:14,790 --> 00:23:17,580
So that's what my SMS.

358
00:23:17,580 --> 00:23:22,860
But typically for full text, you will use some library like solar instead of relying on this because

359
00:23:22,860 --> 00:23:23,430
that's.

360
00:23:24,380 --> 00:23:28,940
We're way more popular and lot of big sites use solar and here.

361
00:23:29,150 --> 00:23:30,620
Let's execute this.

362
00:23:33,970 --> 00:23:43,170
So here we are looking at the different engines that the different tables that we have in this in our

363
00:23:43,360 --> 00:23:45,940
in our new database did underscore trivial.

364
00:23:45,970 --> 00:23:53,950
But we are using the information schema database, which I specified earlier, and we are invoking a

365
00:23:53,950 --> 00:24:02,950
table in that database called tables and we are saying, show me all the tables and the engines also.

366
00:24:04,000 --> 00:24:11,350
And we are saying that the I, I want to get this data for this better information for only the GD underscore

367
00:24:11,350 --> 00:24:13,840
trillion database, which is the current database.

368
00:24:13,840 --> 00:24:19,840
And we are saying show me all the tables in this database and also the, the the storage engine that

369
00:24:19,840 --> 00:24:21,190
is used for those tables.

370
00:24:21,190 --> 00:24:22,700
So let me just execute that.

371
00:24:22,750 --> 00:24:23,920
So here it is.

372
00:24:23,920 --> 00:24:26,380
Here these are all the tables that we created.

373
00:24:26,380 --> 00:24:29,670
And by default, since it is in Oadby, this is what we have.

374
00:24:29,680 --> 00:24:33,730
But let's say we want to create a new table which uses my sum.

375
00:24:34,450 --> 00:24:40,150
So for that we will just specify after the parenthesis will say engine equal to my sum.

376
00:24:41,800 --> 00:24:43,300
So let me do that.

377
00:24:49,970 --> 00:24:54,850
So now you can see that for test a it is my exam for all the other tables, which is A.B.

378
00:24:55,730 --> 00:24:58,010
So let's drop it.

379
00:25:00,500 --> 00:25:02,180
So that's all there is.

380
00:25:02,270 --> 00:25:08,240
And if you enter exit here, it will exit out of the my SQL.

381
00:25:08,240 --> 00:25:10,850
So that's the last command that we have here.

382
00:25:11,340 --> 00:25:12,040
That's it.

383
00:25:12,530 --> 00:25:18,070
So that's all there is for this lecture, and I hope you like that.

384
00:25:18,080 --> 00:25:20,840
So this is how we can create our database.

385
00:25:21,410 --> 00:25:25,250
And we will also be creating a few more tables and one of the subsequent lectures.

386
00:25:25,370 --> 00:25:28,850
Thank you and happy coding and see you in the next lecture.

