1
00:00:01,070 --> 00:00:02,029
Hello there.

2
00:00:02,150 --> 00:00:03,420
This is the row.

3
00:00:03,710 --> 00:00:05,900
Now let's look at multiple inheritance.

4
00:00:06,380 --> 00:00:12,170
In the previous lesson, we mentioned that multiple inheritance could help us solve the technical requirement

5
00:00:12,170 --> 00:00:13,910
we discussed in that particular lesson.

6
00:00:15,770 --> 00:00:18,670
With multiple inheritance, we can have two super classes.

7
00:00:18,680 --> 00:00:25,130
One is the bookmark class as before, and the other is a new abstract class called Shareable, which

8
00:00:25,130 --> 00:00:33,020
has the abstract method get item data weblink and book classes extend both bookmark and shareable while

9
00:00:33,020 --> 00:00:39,470
mobi class extends only bookmark so only weblink and book classes are required to implement the get

10
00:00:39,470 --> 00:00:43,010
item data method as they extend a new shareable class.

11
00:00:43,580 --> 00:00:46,580
This way we meet the two requirements we discussed earlier.

12
00:00:47,030 --> 00:00:52,460
That is, we have common protocol in the form of shareable class and we have method implementations

13
00:00:52,460 --> 00:00:54,830
only in those classes where it matters.

14
00:00:55,340 --> 00:00:58,370
So that's how multiple inheritance can solve our problem.

15
00:00:58,910 --> 00:01:07,100
But you may recall that in Java we can extend only one superclass that is weblink and book classes cannot

16
00:01:07,100 --> 00:01:09,800
extend both shareable and bookmark.

17
00:01:10,280 --> 00:01:12,560
That is the can extend only one of them.

18
00:01:13,160 --> 00:01:21,020
What it means is that Java does not support multiple inheritance and it does not support multiple inheritance

19
00:01:21,020 --> 00:01:24,590
as it could lead to a problem called deadly diamond of death.

20
00:01:25,070 --> 00:01:27,440
Let's see what this notorious problem is about.

21
00:01:29,360 --> 00:01:34,820
To understand that deadly diamond of death or simply the diamond problem, let's consider this class

22
00:01:34,820 --> 00:01:38,150
diagram which incorporates multiple inheritance.

23
00:01:38,660 --> 00:01:45,140
We know that bookmark class defines the abstract method is kid friendly eligible, which is overridden

24
00:01:45,140 --> 00:01:47,270
in both movie and book classes.

25
00:01:47,930 --> 00:01:53,810
Let's also consider this new class called Movie and Book, which extends both movie and book.

26
00:01:54,230 --> 00:01:56,570
That is, it would be multiple inheritance.

27
00:01:57,230 --> 00:02:03,200
Movie and book class basically represents a movie that is based on some book, like in the case of The

28
00:02:03,200 --> 00:02:05,600
Godfather or the Harry Potter series.

29
00:02:05,900 --> 00:02:08,750
So it is basically a new type of bookmark.

30
00:02:08,750 --> 00:02:14,840
And in reality, we may never have such a class in our system, but it is introduced only for the sake

31
00:02:14,840 --> 00:02:15,800
of this discussion.

32
00:02:16,310 --> 00:02:19,370
So here movie on book class does not override.

33
00:02:19,370 --> 00:02:21,080
Is kid friendly eligible method.

34
00:02:21,850 --> 00:02:24,820
So the question is which version of is kid friendly?

35
00:02:24,820 --> 00:02:28,570
Eligible method is inherited by movie and book class.

36
00:02:28,780 --> 00:02:33,010
Would it inherit the version and movie class or the version in book class?

37
00:02:33,520 --> 00:02:40,360
And the answer is the programming language needs to support some complicated rules to address this ambiguity.

38
00:02:41,110 --> 00:02:48,160
Java, we know, is designed to be simple so it avoids this problem by altogether avoiding multiple

39
00:02:48,160 --> 00:02:49,030
inheritance.

40
00:02:49,540 --> 00:02:54,340
That is, you cannot have a class like movie and book extending both movie and book.

41
00:02:55,260 --> 00:03:01,590
As you can see, the inheritance tree has a diamond shape with one class extending two classes and both

42
00:03:01,590 --> 00:03:04,020
of which extend the same base class.

43
00:03:04,440 --> 00:03:08,190
That's the reason why this problem is referred to as the diamond problem.

44
00:03:09,840 --> 00:03:13,170
Now here is an illustration of diamond problem due to shared state.

45
00:03:13,650 --> 00:03:16,650
The one we just discussed was due to shared behavior.

46
00:03:17,190 --> 00:03:24,300
Here the base class bookmark defines an instance variable ie which is initialized with 25 class book

47
00:03:24,300 --> 00:03:31,770
inherits ie and re initialize it to 42 while the class movie re initializes I to 50.

48
00:03:32,250 --> 00:03:38,280
So once again, the question is which version of I will be inherited by movie and book class?

49
00:03:38,400 --> 00:03:40,080
So that's the ambiguity.

50
00:03:41,720 --> 00:03:45,680
So Java does not support multiple inheritance in that case.

51
00:03:45,710 --> 00:03:49,490
How are we going to solve the puzzle we saw in the previous lesson?

52
00:03:49,730 --> 00:03:56,840
That is, how can we have get item data method in only book and web classes and at the same time define

53
00:03:56,840 --> 00:03:58,010
a common protocol.

54
00:03:59,240 --> 00:04:03,710
And for that we can use interfaces which we are going to study next.

55
00:04:03,740 --> 00:04:06,680
And it's a very important object oriented feature.

56
00:04:07,010 --> 00:04:07,700
Thank you.

