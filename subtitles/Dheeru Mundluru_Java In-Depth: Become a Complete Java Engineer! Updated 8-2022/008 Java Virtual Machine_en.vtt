WEBVTT
1
00:00:02.090 --> 00:00:03.000
Hello there.

2
00:00:03.020 --> 00:00:03.500
This is day.

3
00:00:04.250 --> 00:00:05.180
And welcome back.

4
00:00:05.540 --> 00:00:12.200
So we have seen that one of the unique selling points of Java is its platform independence capability

5
00:00:12.200 --> 00:00:14.750
without compromising on execution speed.

6
00:00:15.560 --> 00:00:17.990
And we know that it is because of Java.

7
00:00:18.830 --> 00:00:26.090
Platform independence was possible as JVM installed on a particular platform can interpret Java bytecode

8
00:00:26.090 --> 00:00:27.620
without any issues.

9
00:00:28.560 --> 00:00:35.700
And since Java Bytecode is designed specifically to be interpreted by JVM, we also get very fast execution

10
00:00:35.700 --> 00:00:36.120
speed.

11
00:00:36.930 --> 00:00:44.820
And we also said that GM can additionally perform something called GI compensation, which makes executing

12
00:00:44.820 --> 00:00:49.860
Java programs even more faster so they can execute super fast.

13
00:00:50.250 --> 00:00:57.300
So GM is the cornerstone of Java and it has other important benefits to and it's a very sophisticated

14
00:00:57.300 --> 00:01:04.980
software and it is so good that even programs written in other popular languages like Scala and Groovy

15
00:01:05.099 --> 00:01:09.930
can be compiled into Java bytecode, which can then be run on any given.

16
00:01:10.230 --> 00:01:16.230
That way they also get the benefits of Java, such as platform independence and fast execution speed.

17
00:01:16.800 --> 00:01:20.940
So to run on JVM, all you need to do is produce Java bytecode.

18
00:01:21.600 --> 00:01:24.630
So you need compilers which can produce Java bytecode.

19
00:01:25.530 --> 00:01:33.060
Since Jevon plays such a vital role in making Georgia really attractive and making it one of the most

20
00:01:33.060 --> 00:01:38.550
popular languages out there, it is important to have a good understanding of Graham.

21
00:01:39.180 --> 00:01:46.860
We have a separate chapter dedicated to JVM, but at this point, let's at least get a good high level

22
00:01:46.860 --> 00:01:49.950
understanding of GM and also its architecture.

23
00:01:50.130 --> 00:01:56.370
And we will also see why Java programs run as fast as C or C++ programs.

24
00:01:57.150 --> 00:02:02.340
So it is very important to understand this instead of just diving into the code.

25
00:02:02.910 --> 00:02:06.630
So we need to know why Java programs run very fast.

26
00:02:08.530 --> 00:02:16.750
Java virtual machine is called virtual, and that's because it is an abstract computing machine that

27
00:02:16.750 --> 00:02:18.790
is like a real computing machine.

28
00:02:18.820 --> 00:02:24.940
It has an instruction set which it executes, and its instruction set is the Java bytecode.

29
00:02:25.390 --> 00:02:32.650
So for a CPU machine code serves as the instruction set, while for a JVM Java bytecode serves as the

30
00:02:32.650 --> 00:02:33.610
instruction set.

31
00:02:35.020 --> 00:02:40.360
Unlike a real computing machine, GM also manipulates memory at runtime.

32
00:02:40.720 --> 00:02:45.400
That is, it uses memory to run its programs and to manipulate their data.

33
00:02:46.340 --> 00:02:52.430
Not that the term run time here refers to the time when the program is actually executed.

34
00:02:54.060 --> 00:03:01.440
Unlike I said earlier, GM is the cornerstone of Java platform and it has few core responsibilities

35
00:03:01.440 --> 00:03:05.550
and one is loading and interpreting Java bytecode.

36
00:03:06.030 --> 00:03:11.940
We know that interpreting Java Bytecode helps achieve platform independence along with fast execution

37
00:03:11.940 --> 00:03:12.360
speed.

38
00:03:12.750 --> 00:03:16.560
So it's a very fundamental responsibility of Java.

39
00:03:17.100 --> 00:03:18.720
And next is security.

40
00:03:18.750 --> 00:03:25.680
Security is critical as Java was developed for a networked environment where programs can be downloaded

41
00:03:25.680 --> 00:03:27.330
from across the network.

42
00:03:27.720 --> 00:03:33.390
And you don't want those programs to perform any harmful activities on the user's machine.

43
00:03:34.610 --> 00:03:36.950
And third is automatic memory management.

44
00:03:36.980 --> 00:03:43.340
Unlike C or C++, Java relieves its programmers from directly manipulating memory.

45
00:03:43.850 --> 00:03:47.750
And it does that through its automatic memory management process.

46
00:03:48.230 --> 00:03:54.560
And this makes programming in Java easier and also makes Java programs a lot safer.

47
00:03:54.920 --> 00:04:01.850
That is, it will greatly minimize some really nasty memory related errors that one might make if they

48
00:04:01.850 --> 00:04:03.740
are manipulating the memory directly.

49
00:04:04.130 --> 00:04:09.140
And as we will soon see, JVM has separate components to manage these responsibilities.

50
00:04:10.230 --> 00:04:16.230
And before we look at what constitutes a JVM, let's first look at what happens when a Java program

51
00:04:16.230 --> 00:04:16.709
is run.

52
00:04:17.490 --> 00:04:23.940
Let's say we have a Java program called Helo and now when we execute this program using the command

53
00:04:23.940 --> 00:04:24.840
java space.

54
00:04:24.840 --> 00:04:25.500
Hello.

55
00:04:25.590 --> 00:04:30.120
An instance of JVM is created and is loaded into memory.

56
00:04:30.940 --> 00:04:36.460
GBM then in turn loads the hallow program into memory and executes it.

57
00:04:37.250 --> 00:04:41.720
As you can see here, both Gvm and the Hello program are now in memory.

58
00:04:42.290 --> 00:04:50.300
So each Java application, like the HALO program here, runs inside a GM instance so we can see the

59
00:04:50.300 --> 00:04:51.410
GM instance here.

60
00:04:52.040 --> 00:04:56.390
Not that a GM instance runs only one Java application.

61
00:04:57.320 --> 00:05:02.690
Now, if you want to run another program at the same time, then you can execute it separately.

62
00:05:02.960 --> 00:05:08.930
So, for instance, while the program is running, if you want to run another program, let's call it

63
00:05:08.930 --> 00:05:09.800
as goodbye.

64
00:05:09.830 --> 00:05:12.770
Then you would say Java Space goodbye.

65
00:05:12.770 --> 00:05:19.430
And that would create yet another instance of JVM, which will then execute the goodbye class.

66
00:05:20.030 --> 00:05:27.080
So two JVM instances are being run at the same time, just like the way you can have two instances of

67
00:05:27.080 --> 00:05:29.030
your browser running at the same time.

68
00:05:30.730 --> 00:05:34.630
And now let's look at a typical architecture of avian.

69
00:05:35.850 --> 00:05:40.350
Let's assume we have a Java program called Hello or Java which is compiled.

70
00:05:40.800 --> 00:05:42.550
Next, we need to run it.

71
00:05:42.570 --> 00:05:45.420
And so we would say Java Space.

72
00:05:45.420 --> 00:05:46.020
Hello.

73
00:05:46.170 --> 00:05:49.350
And we know with that JVM will be launched.

74
00:05:49.380 --> 00:05:52.830
That is it will be loaded into memory, as we just saw in the previous slide.

75
00:05:53.160 --> 00:06:00.270
And at the same time, Java will also get a chunk of memory from the underlying operating system, and

76
00:06:00.270 --> 00:06:03.570
we are referring it as the runtime data areas.

77
00:06:04.080 --> 00:06:06.000
So it's just the Java memory.

78
00:06:06.750 --> 00:06:11.310
JVM now has to load load class, which includes the Java bytecode.

79
00:06:11.790 --> 00:06:19.650
For this, JVM invokes a component called class loader, which as the name implies, locates hello class

80
00:06:19.650 --> 00:06:23.130
and loads the corresponding byte code into memory.

81
00:06:23.490 --> 00:06:27.030
So as the name class suggests, it loads the class.

82
00:06:27.570 --> 00:06:29.220
And when we say memory.

83
00:06:30.410 --> 00:06:34.790
It would be these two areas called heap and method area.

84
00:06:35.700 --> 00:06:43.050
Next, the byte codes are verified by a component called byte code verifier, and this is to ensure

85
00:06:43.050 --> 00:06:46.440
that the loaded class file is not corrupted.

86
00:06:46.680 --> 00:06:53.190
And this is very critical because in certain Java applications, we know that classes can be downloaded

87
00:06:53.190 --> 00:06:59.910
from across the Internet, like in the case of applets, and those classes could have been created by

88
00:06:59.910 --> 00:07:01.140
some hackers.

89
00:07:01.650 --> 00:07:07.170
So bytecode verification is critical to ensure the integrity of Java.

90
00:07:07.940 --> 00:07:15.650
Once the bytecode has been verified and if there are no issues, then it can be safely executed by the

91
00:07:15.650 --> 00:07:21.980
execution engine, which includes the Java interpreter along with a JIT compiler.

92
00:07:22.730 --> 00:07:25.790
So the interpreter here interprets the Java bytecode.

93
00:07:26.390 --> 00:07:33.260
So this execution engine, which includes the interpreter and compiler, gives us the benefit of platform

94
00:07:33.260 --> 00:07:36.440
independence and very fast execution speed.

95
00:07:36.920 --> 00:07:42.440
So it handles one of the core responsibilities of JVM, which we discussed earlier.

96
00:07:43.920 --> 00:07:49.890
Garbage collector is the component that is responsible for automatic memory management, which, as

97
00:07:49.890 --> 00:07:53.430
we mentioned earlier, is another core responsibility of JVM.

98
00:07:53.970 --> 00:08:00.630
And as the name implies, garbage collector collects the garbage in our program, which would be things

99
00:08:00.630 --> 00:08:02.610
that are no longer useful.

100
00:08:03.150 --> 00:08:07.410
And it means it would reclaim the memory access by those things.

101
00:08:09.040 --> 00:08:15.730
Next security manager is responsible for ensuring security, which is another core responsibility of.

102
00:08:17.100 --> 00:08:24.180
For example, if you want to restrict any bytecode from accessing your file system, the security manager

103
00:08:24.180 --> 00:08:30.720
can ensure this by running the byte code in a more restricted environment called the sandbox environment.

104
00:08:32.400 --> 00:08:36.830
Finally, there are also a few other components that constitute a GBM.

105
00:08:37.289 --> 00:08:38.940
But let's not worry about them.

106
00:08:38.970 --> 00:08:45.600
I think we discuss some of the main ones here and it should have given you a fair idea about what constitutes

107
00:08:45.600 --> 00:08:46.170
a GBM.

108
00:08:46.650 --> 00:08:51.810
In GBM Internals chapter, we will discuss many of these components in detail.

109
00:08:52.470 --> 00:08:59.790
Now let's spend a little bit of time discussing the JIT compiler as it plays a critical role in making

110
00:08:59.790 --> 00:09:02.220
Java programs run very fast.

111
00:09:02.400 --> 00:09:05.400
Just like in the case of C, r C++.

112
00:09:07.210 --> 00:09:08.680
We already discussed this.

113
00:09:08.710 --> 00:09:13.240
Interpreting Java bytecode is much faster than interpreting source code.

114
00:09:13.510 --> 00:09:20.500
This is because byte code is designed specifically for Java and is already compiled and also sometimes

115
00:09:20.500 --> 00:09:21.250
optimized.

116
00:09:22.000 --> 00:09:27.880
So let's see how JIT or Just in time compilation helps in further speeding up the execution.

117
00:09:29.870 --> 00:09:38.210
So as the program is executing and bytecode is being interpreted, JVM monitors frequency of execution

118
00:09:38.210 --> 00:09:40.580
of each piece of executed bytecode.

119
00:09:41.090 --> 00:09:47.330
Some of the code is more frequently executed than others, and the frequently executed code is referred

120
00:09:47.330 --> 00:09:49.010
to as hotspots.

121
00:09:49.710 --> 00:09:55.790
Hotspots are then given to G80 compiler, which is a component of JVM, as we just saw.

122
00:09:56.330 --> 00:10:05.330
And JIT compiler converts these hotspots to machine code, and this machine code is then cached, which

123
00:10:05.330 --> 00:10:08.690
means that it is saved in memory for future use.

124
00:10:09.760 --> 00:10:16.660
And in future, whenever there is a need to execute this hot spots, the corresponding caste machine

125
00:10:16.660 --> 00:10:21.630
code is what gets executed, resulting in much faster performance.

126
00:10:21.850 --> 00:10:28.450
Rest of the code is still interpreted by the interpreter, so the frequently executed code that is the

127
00:10:28.450 --> 00:10:32.200
hot spots is not interpreted every single time.

128
00:10:32.500 --> 00:10:40.480
Its corresponding cash machine code is what gets executed directly, and this compilation is referred

129
00:10:40.480 --> 00:10:47.530
to as dynamic compilation as the compilation into machine code is done dynamically at runtime.

130
00:10:48.370 --> 00:10:52.810
Now let's just try to understand this genetic compilation process through a simple example.

131
00:10:54.120 --> 00:11:00.600
Let's consider that we have these two methods called Foo and Bar and some programming languages.

132
00:11:00.600 --> 00:11:04.110
Methods are just referred to as functions.

133
00:11:04.410 --> 00:11:08.670
So in Java we call them as methods and we will discuss methods in the next chapter.

134
00:11:09.030 --> 00:11:15.880
Essentially, they are blocks of code that represent certain logic, certain logic to be executed here.

135
00:11:15.900 --> 00:11:19.440
FU represents some logic and bar would represent something else.

136
00:11:20.010 --> 00:11:24.600
Now let's consider that this method bar here has 50 lines of code.

137
00:11:26.440 --> 00:11:34.510
Now at runtime, the bytecode corresponding to each of these 50 lines of code is interpreted and the

138
00:11:34.510 --> 00:11:37.060
corresponding machine code is executed.

139
00:11:37.750 --> 00:11:43.960
Now this happens the first time the method is executed, and it also happens the second time and so

140
00:11:43.960 --> 00:11:46.180
on until say, 1000 times.

141
00:11:46.600 --> 00:11:54.400
And every single time the byte code corresponding to every line of code here is interpreted and corresponding

142
00:11:54.400 --> 00:11:55.780
machine code is executed.

143
00:11:56.530 --> 00:12:03.460
Now that it ran for 1000 times, this code in bar method could be considered as frequently executed

144
00:12:03.460 --> 00:12:03.790
code.

145
00:12:04.680 --> 00:12:12.930
So GM were designated as hotspot and with that git compiler would then kick in and it would generate

146
00:12:12.930 --> 00:12:17.010
its own machine code version of this entire method.

147
00:12:17.950 --> 00:12:25.420
On JD compiler like a regular compiler could have done some optimizations to when it is generating this

148
00:12:25.420 --> 00:12:26.170
machine code.

149
00:12:27.030 --> 00:12:30.780
And this jihadi generated machine code is then cached.

150
00:12:31.940 --> 00:12:39.680
And when Barr is executed for 1,001st time, the cash machine code will be executed directly.

151
00:12:40.010 --> 00:12:46.130
So there is no more interpretation of the byte code corresponding to the 50 lines of code that the bar

152
00:12:46.130 --> 00:12:46.970
method has.

153
00:12:47.600 --> 00:12:54.260
Since machine code is being executed directly, it would run very fast, just like code written in C

154
00:12:54.260 --> 00:12:59.480
or C++ where CPU executes compiled machine code directly.

155
00:12:59.810 --> 00:13:02.180
So you can see that there is no difference here.

156
00:13:02.630 --> 00:13:09.020
So that's why Java is considered as almost as fast as the languages like C or C++.

157
00:13:11.240 --> 00:13:18.470
Now here, if Barr is executed for, say, 2000 times, then it might trigger another round of optimisation

158
00:13:18.470 --> 00:13:22.640
by the JIT compiler for further speed of execution.

159
00:13:23.750 --> 00:13:24.800
Not that method.

160
00:13:24.800 --> 00:13:30.560
Food may not be that frequently executed and hence might be interpreted every single time.

161
00:13:31.450 --> 00:13:35.530
So this is how conceptually a compiler would work.

162
00:13:36.250 --> 00:13:42.490
The actual way in which it works could differ slightly, but conceptually this is how it would work.

163
00:13:43.000 --> 00:13:44.480
So that's about it.

164
00:13:44.500 --> 00:13:47.440
And that's a high level overview of JVM.

165
00:13:47.710 --> 00:13:54.910
And you can see that it's a very highly sophisticated piece of software that makes Java programs run

166
00:13:54.910 --> 00:13:59.740
very fast and securely and also an platform independently.

167
00:14:00.160 --> 00:14:00.850
Thank you.

