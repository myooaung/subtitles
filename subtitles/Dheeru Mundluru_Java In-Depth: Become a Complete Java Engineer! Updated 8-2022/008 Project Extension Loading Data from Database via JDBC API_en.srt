1
00:00:02,110 --> 00:00:02,740
Hi there.

2
00:00:02,770 --> 00:00:03,450
This is the Romans.

3
00:00:03,850 --> 00:00:04,810
And welcome back.

4
00:00:04,930 --> 00:00:07,870
So in the last lecture, we looked at the select committees.

5
00:00:07,870 --> 00:00:11,410
And I think we now have a good understanding of select committees.

6
00:00:11,590 --> 00:00:16,870
And select committees can be much more complex than that and that you can learn through experience and

7
00:00:16,870 --> 00:00:18,940
also reading some extra material.

8
00:00:19,420 --> 00:00:21,400
Now let's go ahead and refactor our code.

9
00:00:21,430 --> 00:00:23,530
So here is the launch class.

10
00:00:23,530 --> 00:00:26,230
And this is a load of data within the same class.

11
00:00:26,530 --> 00:00:29,920
And here we are invoking the data store load data.

12
00:00:30,220 --> 00:00:33,130
Now, this is the data store class and the load data method.

13
00:00:33,130 --> 00:00:39,210
And you may recall that we had these kinds of invocations for reading data from the text files and I

14
00:00:39,220 --> 00:00:44,270
have commented them out and they have also been removed here from this class.

15
00:00:44,290 --> 00:00:51,730
The only method I have is this, and this is where we are going to do the refactoring in code and for

16
00:00:51,780 --> 00:00:56,500
rest of the stuff like for reading user weblink and movies, it has already been refactored.

17
00:00:56,500 --> 00:01:01,810
And we have also looked at this particular this piece of code where we were loading the ZB driver.

18
00:01:01,840 --> 00:01:06,190
Now here is what we are going to look at.

19
00:01:06,190 --> 00:01:08,290
So this is these are some new changes.

20
00:01:08,680 --> 00:01:16,180
Now we are going to look at some of these types, interfaces and interfaces that come from that come

21
00:01:16,180 --> 00:01:17,950
from the Java SQL package.

22
00:01:17,950 --> 00:01:23,080
So the first thing is we have loaded the GBC driver and the previous lecture.

23
00:01:23,380 --> 00:01:27,670
Next thing to do is we need to get a connection to the database.

24
00:01:28,180 --> 00:01:34,090
And for that we invoke this method called get connection on the driver manager.

25
00:01:34,090 --> 00:01:37,450
Class Driver Manager is from Java SQL.

26
00:01:38,110 --> 00:01:43,750
So we are using the code API and here is the connection string to the database.

27
00:01:43,750 --> 00:01:47,890
So the connection string has a particular has a certain syntax here.

28
00:01:47,980 --> 00:01:49,420
So here is the syntax.

29
00:01:49,420 --> 00:01:56,320
First one is protocol and protocol is nothing, but it would be gbk always followed by a colon, followed

30
00:01:56,320 --> 00:01:58,510
by sub protocol and sub protocol.

31
00:01:58,510 --> 00:02:04,300
In this case, when we are dealing with my SQL, it would be my SQL and in case of other databases it

32
00:02:04,300 --> 00:02:05,440
would be something else.

33
00:02:05,440 --> 00:02:10,150
Then you have this colon, then you have the data source details.

34
00:02:10,449 --> 00:02:16,780
So it is about the my SQL particular, my SQL Server instance itself.

35
00:02:16,780 --> 00:02:22,120
So in our case it is running on the local host, which is, which means it's on the same host, but

36
00:02:22,120 --> 00:02:24,820
it can be some other remote IP address also.

37
00:02:25,180 --> 00:02:31,060
And you have a column, you have double slash here followed by the IP address, followed by colon,

38
00:02:31,060 --> 00:02:38,170
followed by port number on which this my server instance is running, followed by a slash and followed

39
00:02:38,170 --> 00:02:40,870
by the database name on that particular machine.

40
00:02:41,080 --> 00:02:43,690
So that's what we have here and here.

41
00:02:43,690 --> 00:02:45,700
This is some parameter we can ignore it.

42
00:02:46,060 --> 00:02:52,840
And to this method called get connection, we are passing the who the user is.

43
00:02:52,840 --> 00:02:58,210
The user is the root user and we are also passing the root password, which is root in our case.

44
00:02:58,660 --> 00:03:01,930
And this method would return a connection.

45
00:03:01,930 --> 00:03:05,770
Instance on connection is an interface here.

46
00:03:05,770 --> 00:03:12,310
Connection is an interface in Java SQL and this this is going to return an instance of connection.

47
00:03:12,610 --> 00:03:18,280
Now the instance that is returned is actually coming from the GBK driver itself.

48
00:03:18,280 --> 00:03:23,530
So we say we know that the GDB C driver is a jar file which has a bunch of class files.

49
00:03:23,530 --> 00:03:27,160
So this driver manager does not get connection.

50
00:03:27,310 --> 00:03:35,860
When this statement gets executed, it's going to pass this particular URL, the string connection string

51
00:03:35,860 --> 00:03:40,990
to all of the all of the drivers that are registered with it to all of the GBK drivers.

52
00:03:40,990 --> 00:03:47,230
But we registered only one driver, which is a minus year driver, but we can also register multiple

53
00:03:47,230 --> 00:03:48,370
gypsy drivers.

54
00:03:48,700 --> 00:03:55,690
And if we do that, then it's going to pass this connection string to each of those Jtbc drivers.

55
00:03:55,690 --> 00:04:01,120
And one of them in this case, my SQL database driver, will say that it can work with this particular

56
00:04:01,120 --> 00:04:08,110
connection string and it will return an instance of a class which actually implements this connection

57
00:04:08,110 --> 00:04:12,010
interface and it represents a connection to the database instance.

58
00:04:12,310 --> 00:04:18,760
Now sometimes we may also have more than one database servers, which is what the case typically is

59
00:04:18,760 --> 00:04:20,140
in professional projects.

60
00:04:20,140 --> 00:04:25,360
Then you can include multiple addresses here which are comma separated.

61
00:04:25,660 --> 00:04:31,810
So in that case, if one of them, if we are unable to connect to one of them, then the database driver

62
00:04:31,810 --> 00:04:36,640
will automatically use the second or the third one as the fail failover servers.

63
00:04:37,060 --> 00:04:38,890
So so in that case.

64
00:04:38,890 --> 00:04:41,380
So if one fails, it will try to use the other one.

65
00:04:41,380 --> 00:04:43,630
So at least it would work for my SQL.

66
00:04:43,630 --> 00:04:44,800
So that's what I read.

67
00:04:45,590 --> 00:04:47,180
So that is how it works.

68
00:04:47,180 --> 00:04:55,790
It's going to select a particular driver in the statement and now the connection interface has a closed

69
00:04:55,790 --> 00:04:56,420
method.

70
00:04:56,420 --> 00:05:00,980
So once we are done with dealing, with interacting with the database, it needs to be closed.

71
00:05:00,980 --> 00:05:07,430
So we are using this private resources syntax here and we know that this syntax, this feature, will

72
00:05:07,430 --> 00:05:13,040
automatically execute the closed method on this particular variable, which is representing the connection.

73
00:05:13,460 --> 00:05:21,410
Now from the connection here we have within the same private resources syntax, we also are getting

74
00:05:21,410 --> 00:05:27,380
something called statement and for that to get a statement, we are invoking the create statement method

75
00:05:27,380 --> 00:05:33,140
on the on this connection object and it will return an instance of statement statement is also an interface

76
00:05:33,140 --> 00:05:39,530
within the SQL and statement is actually used to use to execute our queries.

77
00:05:39,830 --> 00:05:45,410
So connection is for connecting to the database and statement is for executing the actual queries.

78
00:05:46,100 --> 00:05:49,100
Now here we have written new methods.

79
00:05:49,100 --> 00:05:54,200
Earlier we had the same methods, but without passing any arguments.

80
00:05:54,200 --> 00:05:56,120
So it was no ARG methods.

81
00:05:56,120 --> 00:06:02,060
But here we are passing the statement instance as an argument and the code has already been refactored

82
00:06:02,060 --> 00:06:05,060
for these three methods as I mentioned earlier.

83
00:06:05,060 --> 00:06:07,790
So we need to just look at the load box method.

84
00:06:07,880 --> 00:06:09,440
So the load box.

85
00:06:10,680 --> 00:06:17,100
This is the load box method, the earlier method and the current version.

86
00:06:17,100 --> 00:06:18,690
Now we have to refactor it.

87
00:06:18,690 --> 00:06:23,370
So load box all it is doing as it is reading from the text file.

88
00:06:23,370 --> 00:06:28,680
So if you recall, we were using this read method from the IO class which we have written.

89
00:06:28,980 --> 00:06:34,260
So it is reading and we are passing this book, which means that we need to read from book to text.

90
00:06:34,500 --> 00:06:40,350
And all of the data is being read into this data structure, which is another list.

91
00:06:40,620 --> 00:06:45,630
And each element in this data structure will be one row of a book.

92
00:06:45,630 --> 00:06:51,300
So this is the book text file, and each of these rows will be read into the.

93
00:06:52,060 --> 00:06:52,500
Analyst.

94
00:06:52,600 --> 00:06:54,010
So that's what we were doing.

95
00:06:54,100 --> 00:06:59,470
Now what we will have to do is we need to read from the database, right?

96
00:06:59,500 --> 00:07:00,670
That's what we need to do.

97
00:07:00,700 --> 00:07:03,910
So the first thing is I already have the query here.

98
00:07:04,060 --> 00:07:05,230
This is the query.

99
00:07:07,540 --> 00:07:12,130
So this is very similar to the query that we have seen in the previous lecture when learning about the

100
00:07:12,130 --> 00:07:15,490
select queries almost identical.

101
00:07:17,660 --> 00:07:19,160
Only difference here.

102
00:07:19,610 --> 00:07:24,040
So we are using still a group buy ID and we are still concatenating here.

103
00:07:24,050 --> 00:07:26,480
Here, I'm saying as authors.

104
00:07:26,810 --> 00:07:27,620
As authors.

105
00:07:27,620 --> 00:07:34,820
So I'm using an alias for this group underscore that it is concatenating the author information and

106
00:07:35,030 --> 00:07:36,890
generating a comma separated list.

107
00:07:36,890 --> 00:07:44,300
And apart from that we are also extracting the book genre ID Amazon rating and additionally I'm just

108
00:07:44,300 --> 00:07:50,420
extracting created underscore date recall that every anything that we are adding into our database,

109
00:07:50,420 --> 00:07:57,080
we are also we are also capturing the creation date of that particular row so that I'm doing just because

110
00:07:57,080 --> 00:08:03,650
to show you how we deal with dates in the event reading the data from the database and everything else

111
00:08:03,650 --> 00:08:08,750
is just the same, like in the case of when we were reading that from the text file.

112
00:08:08,840 --> 00:08:14,090
So we are extracting only those columns here and everything else is.

113
00:08:14,090 --> 00:08:18,620
The query is also very identical to what we have seen earlier and the next thing.

114
00:08:18,620 --> 00:08:22,280
So we need to execute the query and we need to use.

115
00:08:24,460 --> 00:08:25,600
Statement here.

116
00:08:26,110 --> 00:08:28,870
Now we need to execute the statement.

117
00:08:28,870 --> 00:08:34,419
So for that, there is this method called execute query.

118
00:08:37,840 --> 00:08:38,770
Here it is.

119
00:08:39,530 --> 00:08:43,010
So we can invoke this method and we can pass our query.

120
00:08:44,430 --> 00:08:47,640
And with this, this query will be executed.

121
00:08:47,640 --> 00:08:50,820
So just like the way we were executing queries from the command line.

122
00:08:50,940 --> 00:08:58,470
So this particular statement would execute this query from our Java program and it returns something

123
00:08:58,470 --> 00:09:00,330
called a result set.

124
00:09:01,880 --> 00:09:03,740
Earlier we were using an array list.

125
00:09:03,740 --> 00:09:10,010
Now on each element of our list was storing the data of each row.

126
00:09:10,070 --> 00:09:13,130
And here the ArrayList is replaced with.

127
00:09:13,960 --> 00:09:19,750
Result set and by convention generally people use just RS for that to represent that.

128
00:09:20,170 --> 00:09:21,670
So that's what it is.

129
00:09:21,670 --> 00:09:23,950
And this one, we can leave it as it is.

130
00:09:23,950 --> 00:09:30,430
And here we are iterating through this list and in each iteration we are processing a particular row

131
00:09:30,430 --> 00:09:32,530
and we are not going to change any of that.

132
00:09:32,680 --> 00:09:40,540
It's just that we will use while instead of four and four results set in order to iterate it, we will

133
00:09:40,540 --> 00:09:43,210
set results that dot next.

134
00:09:43,870 --> 00:09:48,280
So results set is also an interface in Java SQL.

135
00:09:48,280 --> 00:09:54,490
So we looked at two interfaces already connection and statement and result set is also another interface

136
00:09:54,490 --> 00:09:55,240
within that.

137
00:09:55,660 --> 00:10:02,950
So this execute query will return an instance of results set and Results Set has all the different roles

138
00:10:03,550 --> 00:10:09,190
that were extracted from the database and to process each row we need to iterate once.

139
00:10:10,360 --> 00:10:17,110
So basically there is something, a concept called a cursor and cursor is initially before the first

140
00:10:17,110 --> 00:10:17,410
row.

141
00:10:17,680 --> 00:10:23,320
So we are extracting a bunch of rows from the database and it is initially the cursor will be before

142
00:10:23,320 --> 00:10:29,470
the first row and when we invoke the next method here, cursor will point to the first row and it will

143
00:10:29,470 --> 00:10:30,310
return a true.

144
00:10:30,490 --> 00:10:36,910
But if there are no rows to extract, then cursor it means that the cursor as has been moved after the

145
00:10:36,910 --> 00:10:37,750
last row.

146
00:10:38,910 --> 00:10:41,910
In which case it will return a false and we will exit the loop.

147
00:10:42,870 --> 00:10:48,690
So this is how we will iterate through a result set object by using the next method.

148
00:10:48,990 --> 00:10:50,970
Now let me.

149
00:10:50,970 --> 00:10:52,170
I also have the.

150
00:10:53,090 --> 00:10:53,960
Some code here.

151
00:10:53,960 --> 00:10:55,940
Let me just copy all of this.

152
00:10:57,500 --> 00:11:00,060
Pretty simple code.

153
00:11:00,290 --> 00:11:01,760
There's nothing complicated there.

154
00:11:02,710 --> 00:11:05,560
So we just need to extract the individual items.

155
00:11:05,590 --> 00:11:11,650
For instance, here we are getting some values and we are extracting the author information in the previous

156
00:11:11,650 --> 00:11:12,440
version.

157
00:11:12,460 --> 00:11:15,840
Now we are just going to let me delete that.

158
00:11:15,850 --> 00:11:19,630
These last two statements are we can change them.

159
00:11:19,630 --> 00:11:21,310
So this is what we have.

160
00:11:22,330 --> 00:11:22,930
Here.

161
00:11:23,200 --> 00:11:27,690
So here basically we are getting the data and we'll review that.

162
00:11:27,700 --> 00:11:30,370
But once we get the data, we need to create a book.

163
00:11:30,790 --> 00:11:31,600
That's what we were doing.

164
00:11:31,600 --> 00:11:32,740
Even in the previous version.

165
00:11:32,740 --> 00:11:36,480
Once we read the data in each iteration, we were creating a single book.

166
00:11:36,490 --> 00:11:38,650
So that's what we do here also.

167
00:11:38,980 --> 00:11:45,850
Now here we are invoking some methods, some better methods on, on the results set object.

168
00:11:46,090 --> 00:11:51,610
So for instance, the first one that in the query that we specify is the ID.

169
00:11:51,610 --> 00:11:52,720
Second is the title.

170
00:11:52,750 --> 00:11:54,250
Third is the publication here.

171
00:11:54,370 --> 00:11:59,860
So we are simply extracting each of those items via this method methods.

172
00:11:59,860 --> 00:12:02,170
So ID is along in our database.

173
00:12:02,170 --> 00:12:03,680
So we are saying it's long.

174
00:12:03,700 --> 00:12:07,680
It is actually a big end, but a big end corresponds to long in Java.

175
00:12:07,690 --> 00:12:12,640
So we are saying ask dot get long and we are passing the name of the field.

176
00:12:12,640 --> 00:12:15,970
ID field and for title is a string.

177
00:12:15,970 --> 00:12:18,640
We are saying asked get string off title.

178
00:12:18,850 --> 00:12:21,000
So title is the second field here.

179
00:12:21,010 --> 00:12:26,920
So it is the publication here which is an end in the database and it's also an end here.

180
00:12:27,220 --> 00:12:30,790
So and we are assigning it to publication here and here.

181
00:12:30,790 --> 00:12:33,940
String title is being assigned to this variable called string.

182
00:12:34,240 --> 00:12:37,900
So and in the fourth one is the name of the publisher.

183
00:12:38,020 --> 00:12:40,510
So it is a name is a string.

184
00:12:40,510 --> 00:12:45,460
So we are saying asked get string and it is being assigned to this string.

185
00:12:46,510 --> 00:12:49,300
Now for the fourth one is the authors.

186
00:12:49,330 --> 00:12:54,730
Authors, we are doing a concatenation and we are assigning it to a string array here.

187
00:12:54,730 --> 00:12:59,680
So we are in a for one of the books for the head first design patterns.

188
00:12:59,680 --> 00:13:03,340
I believe it had four authors, so it would be a comma separated list.

189
00:13:03,340 --> 00:13:04,540
So we are splitting it.

190
00:13:04,540 --> 00:13:09,250
But for certain books, for most of the book is just a single author, in which case the authors will

191
00:13:09,250 --> 00:13:09,760
have.

192
00:13:09,850 --> 00:13:16,090
The authors are able to have only a single element and the genre ID is also we are getting the genre

193
00:13:16,090 --> 00:13:16,690
ID now.

194
00:13:16,690 --> 00:13:24,850
If you recall from a couple of lectures ago, I said that the genre ID is actually the enum ordinal

195
00:13:24,850 --> 00:13:25,210
value.

196
00:13:25,210 --> 00:13:31,750
If you recall, there is the book genre enum and we were just in the database, we were storing the

197
00:13:31,750 --> 00:13:35,410
the ordinal value of a particular genre.

198
00:13:35,410 --> 00:13:41,920
So we were not storing any string or anything for genre, but we were just storing the ordinal values.

199
00:13:42,400 --> 00:13:44,980
So book genre is here.

200
00:13:45,520 --> 00:13:49,180
So this is what we are storing, the ordinal value of that.

201
00:13:49,210 --> 00:13:55,330
So we were calling it as book genre ID and it has a tiny end as a tiny end as the data, as the data

202
00:13:55,330 --> 00:13:56,740
type in the database.

203
00:13:56,890 --> 00:14:04,090
So we are getting that gender ID and we need to get the actual book genre itself, the enum constant

204
00:14:04,090 --> 00:14:04,720
itself.

205
00:14:04,720 --> 00:14:13,390
So we are saying book genre, dot values, book genre is an enum sort values and we are about values

206
00:14:13,390 --> 00:14:14,350
and values.

207
00:14:14,350 --> 00:14:21,820
We know well return all the constants but we, we need the constant corresponding to this genre ID so

208
00:14:21,820 --> 00:14:25,420
we are passing the ordinal value here and we are getting the book genre.

209
00:14:26,640 --> 00:14:28,050
So I hope that's clear.

210
00:14:28,970 --> 00:14:34,070
The next thing as we are getting the double value, which is Amazon rating and it's being assigned to

211
00:14:34,070 --> 00:14:34,640
a double.

212
00:14:34,850 --> 00:14:35,960
We are saying get double.

213
00:14:36,500 --> 00:14:42,470
Now the fourth, this one we are just doing just for the sake of demonstrating date information.

214
00:14:42,470 --> 00:14:48,140
So we are getting the date by invoking this method called get date and we are saying created underscore

215
00:14:48,140 --> 00:14:55,040
date because that's the column name and it is being assigned to this class called Java dot SQL date.

216
00:14:55,100 --> 00:15:03,830
So create a date and it is of this type and Java dot dot date actually extends extends Java date, which

217
00:15:03,830 --> 00:15:06,560
we have seen when learning about the date and time API.

218
00:15:07,490 --> 00:15:14,060
And it will return only a date, not the time information, but in the database we had both date as

219
00:15:14,060 --> 00:15:19,910
well as time for this particular column created underscore date, but it would extract only only the

220
00:15:19,910 --> 00:15:20,660
date part.

221
00:15:20,660 --> 00:15:26,450
But if we need the entire date and time, we will have to invoke this method called get timestamp.

222
00:15:27,230 --> 00:15:35,480
Now here we can use the same name created underscore date for all of these here all of these we can

223
00:15:35,480 --> 00:15:42,200
either either use the name, the name of the column in the database, or we can use this such a number.

224
00:15:42,200 --> 00:15:43,280
It's an index.

225
00:15:43,280 --> 00:15:50,330
So for example, if you were to extract the ID here, we will put the index number one, which means

226
00:15:50,330 --> 00:15:52,140
which corresponds to one here.

227
00:15:52,160 --> 00:15:54,410
So this is one, this is two, this is three.

228
00:15:54,410 --> 00:16:01,520
So there are some overloaded methods which we can use get long of one, get string off two, four titles

229
00:16:01,520 --> 00:16:02,210
will be two.

230
00:16:02,210 --> 00:16:08,630
So we can either pass the numbers index numbers corresponding to these or we can just pass the string

231
00:16:08,630 --> 00:16:10,520
of the name of the column itself.

232
00:16:10,520 --> 00:16:12,530
So let's just pass the names.

233
00:16:12,530 --> 00:16:15,470
It will be much more clear this is just for demonstration.

234
00:16:15,470 --> 00:16:20,330
I have included this because timestamp here is the eighth index position.

235
00:16:20,330 --> 00:16:23,630
One, two, three, four, five.

236
00:16:26,250 --> 00:16:28,950
Six, seven and eight.

237
00:16:29,250 --> 00:16:31,170
So it starts with one, not zero.

238
00:16:31,680 --> 00:16:39,840
And also just just note that here we are saying as authors for group underscore cat for that particular

239
00:16:39,840 --> 00:16:40,080
thing.

240
00:16:40,080 --> 00:16:42,720
And over here also we are saying authors.

241
00:16:43,570 --> 00:16:43,920
Okay.

242
00:16:43,990 --> 00:16:50,830
So that's the time information and I'm printing that now in Java eight, we know that we had local date

243
00:16:50,830 --> 00:16:51,340
time.

244
00:16:51,520 --> 00:16:59,290
So if you want to convert this timestamp Java timestamp into local date time, there is a method called

245
00:16:59,290 --> 00:17:03,520
to local datetime, so you can even invoke that.

246
00:17:04,440 --> 00:17:07,440
They did that on this time stamp instance.

247
00:17:07,440 --> 00:17:11,310
And it will and it will return an instance of local datetime.

248
00:17:11,970 --> 00:17:14,099
And here we are simply printing the values.

249
00:17:14,099 --> 00:17:18,030
And only thing is here we need to change these.

250
00:17:18,390 --> 00:17:19,290
So here.

251
00:17:19,290 --> 00:17:19,920
This would be.

252
00:17:19,920 --> 00:17:20,670
I'd.

253
00:17:24,020 --> 00:17:26,359
Next one is title.

254
00:17:27,869 --> 00:17:30,480
So all these values have been extracted out.

255
00:17:31,420 --> 00:17:33,010
After title we have.

256
00:17:35,190 --> 00:17:36,480
Publication.

257
00:17:37,490 --> 00:17:38,210
Here.

258
00:17:45,610 --> 00:17:47,290
Publisher authors.

259
00:17:47,830 --> 00:17:49,810
Then we also extracted John Ray.

260
00:17:50,920 --> 00:17:55,200
It's hard to miss genre after genre.

261
00:17:55,230 --> 00:17:56,880
We had Amazon rating.

262
00:18:00,810 --> 00:18:01,330
That's it.

263
00:18:01,680 --> 00:18:03,780
And everything else is same.

264
00:18:07,450 --> 00:18:11,470
And there is this exception that we need to throw.

265
00:18:13,670 --> 00:18:21,080
Said The letters have gone and so bookmark once we get the bookmark, we are adding to this other list

266
00:18:21,080 --> 00:18:23,060
which got which we are creating here.

267
00:18:23,900 --> 00:18:25,430
So that's from the old code.

268
00:18:25,550 --> 00:18:31,750
And finally, we are adding at this bookmark list the entire data that got read from the database,

269
00:18:31,760 --> 00:18:35,390
it's being added into another data structure.

270
00:18:35,390 --> 00:18:37,310
It's a list of list of bookmarks.

271
00:18:37,310 --> 00:18:42,710
And it would store this particular bookmarks, data structure, which store all of the different.

272
00:18:43,550 --> 00:18:44,390
Bookmarks.

273
00:18:44,570 --> 00:18:49,790
So in this case, we are just adding one particular type of bookmark.

274
00:18:50,240 --> 00:18:51,650
So that's that said.

275
00:18:51,650 --> 00:18:52,620
So we are.

276
00:18:52,670 --> 00:18:58,310
So in each iteration, we are basically reading some data and we have some getters like this and we

277
00:18:58,310 --> 00:18:59,060
are reading that.

278
00:18:59,060 --> 00:19:00,560
So that's with the load box.

279
00:19:00,560 --> 00:19:03,020
Then we have a few other methods.

280
00:19:03,020 --> 00:19:06,050
It's very simple, like this is the load users.

281
00:19:06,080 --> 00:19:11,540
Load users is a simple query select start from user, which means that we want to extract everything

282
00:19:11,570 --> 00:19:14,840
all the columns from each row of the user table.

283
00:19:14,990 --> 00:19:16,340
So that's what we are doing.

284
00:19:16,340 --> 00:19:22,250
And just like in the previous case, we are reading everything and we are saying create user here.

285
00:19:23,750 --> 00:19:25,880
And it's getting added here to the users.

286
00:19:26,360 --> 00:19:29,640
And for in the case of web links, it's very straightforward.

287
00:19:29,660 --> 00:19:34,220
Select start from Web Link and we are extracting these for all apps.

288
00:19:34,400 --> 00:19:39,130
So it's just a simple refactoring of the old code for load movies.

289
00:19:39,140 --> 00:19:41,690
It's a little bit similar to the load box.

290
00:19:42,520 --> 00:19:48,070
So just like in the case of books, we have movie, actor, movie, underscore, actor, director,

291
00:19:48,070 --> 00:19:49,840
movie underscore, director, and so on.

292
00:19:50,290 --> 00:19:53,470
So earlier we were reading from the movie or text file.

293
00:19:53,470 --> 00:19:59,920
So we are reading now we are reading the same data, but from from the database and this is a skill

294
00:19:59,920 --> 00:20:07,240
query and I will share some of these queries and the resources section and you can take a look at them.

295
00:20:07,390 --> 00:20:14,140
And just like earlier, we are reading the data here and we are creating a movie and everything is the

296
00:20:14,140 --> 00:20:14,680
same.

297
00:20:15,100 --> 00:20:18,250
So let me just go ahead and.

298
00:20:19,620 --> 00:20:20,570
Run this.

299
00:20:20,870 --> 00:20:22,520
This is the launch glass.

300
00:20:23,550 --> 00:20:28,370
And as you can see, everything is run and everything is coming from the database.

301
00:20:28,640 --> 00:20:30,320
So that's good.

302
00:20:30,560 --> 00:20:31,750
So that's about it.

303
00:20:31,760 --> 00:20:33,810
So that's how we read data.

304
00:20:33,830 --> 00:20:41,000
And in the next lecture, we will see how we can bookmark data and how we can write the bookmark data

305
00:20:41,000 --> 00:20:41,900
into the database.

306
00:20:41,900 --> 00:20:46,430
And for that, we need to create a few more tables in the database, and we will do that.

307
00:20:46,640 --> 00:20:47,270
That's it.

308
00:20:47,270 --> 00:20:49,610
And thank you and happy coding.

