1
00:00:02,070 --> 00:00:03,030
Hello there.

2
00:00:03,060 --> 00:00:04,190
This is the De La Rue.

3
00:00:04,200 --> 00:00:05,220
And welcome back.

4
00:00:05,610 --> 00:00:11,550
As I mentioned at the beginning of the chapter, we can create Java applications for different devices

5
00:00:11,550 --> 00:00:15,270
like desktops, Web servers, mobile devices and so on.

6
00:00:15,960 --> 00:00:21,570
And there are separate platforms dedicated for developing these different types of applications.

7
00:00:22,110 --> 00:00:29,010
And this course is about one such platform called Java SC, which stands for Java Standard Edition.

8
00:00:29,430 --> 00:00:35,280
And in this lecture, let's get a good high level understanding of what Java as a platform is.

9
00:00:37,060 --> 00:00:43,630
The Java software family includes multiple platforms targeting different types of devices, and there

10
00:00:43,630 --> 00:00:47,620
are three main platforms that are most commonly used.

11
00:00:48,040 --> 00:00:53,800
And the first one is the Java Standard Edition or Java SE, in short, which is the subject of this

12
00:00:53,800 --> 00:00:58,870
lecture as well as the course, and previously it was called as J to SC.

13
00:00:59,870 --> 00:01:06,980
And it is used to double up standalone applications that typically run on desktops but may also run

14
00:01:06,980 --> 00:01:08,150
on servers.

15
00:01:09,050 --> 00:01:14,210
An example can be a hospital management system used within a hospital.

16
00:01:14,660 --> 00:01:21,560
Such a system is a standalone system that is, it would be installed on different desktops within the

17
00:01:21,560 --> 00:01:29,270
hospital and the hospital administration staff would use it to enter information like patient details

18
00:01:29,270 --> 00:01:33,590
and which doctor will be treating the patient and so on and so forth.

19
00:01:34,160 --> 00:01:37,130
We do see that when we visit hospitals.

20
00:01:37,790 --> 00:01:45,890
Next is Java Enterprise Edition or Java E in short, and this was previously called as J to E and it

21
00:01:45,890 --> 00:01:50,690
is used to develop large scale applications that run on web servers.

22
00:01:51,110 --> 00:01:57,710
Now, when we say large scale, it implies large number of users will be using the application at any

23
00:01:57,710 --> 00:01:59,180
given instance of time.

24
00:01:59,690 --> 00:02:06,080
An example would be an e-commerce website like Amazon, and you might have heard of technologies like

25
00:02:06,080 --> 00:02:10,400
Serverless and JSP, and they fall under Java E platform.

26
00:02:11,360 --> 00:02:15,320
Angela is built on top of Java Se e platform.

27
00:02:15,860 --> 00:02:24,380
So Java as e technology serves as the foundation for Java E, so Java C is not constrained to just building

28
00:02:24,380 --> 00:02:29,570
standalone applications, but it is needed for building large scale web applications to.

29
00:02:30,080 --> 00:02:37,280
It is just that we need more than what Java C offers and that's where some of the other technologies

30
00:02:37,280 --> 00:02:39,530
within Java come into play.

31
00:02:40,250 --> 00:02:50,690
Now note that in 2017, Java E has been rebranded as Jakarta E as Java E is, development has been shifted

32
00:02:50,690 --> 00:02:53,360
from Oracle to Eclipse Foundation.

33
00:02:53,990 --> 00:03:00,770
Eclipse is a foundation which is also responsible for developing Eclipse IDE and Eclipse Foundation

34
00:03:00,770 --> 00:03:06,470
has chose to rename it as Jakarta E, but originally it used to be with Oracle.

35
00:03:07,570 --> 00:03:13,400
And third platform is Java Micro Edition or Java Me in short, and this was previously called as J.

36
00:03:13,420 --> 00:03:20,440
To me and it is used to develop applications for resource constrained devices like mobile phones and

37
00:03:20,440 --> 00:03:21,820
set top boxes.

38
00:03:21,910 --> 00:03:27,130
So it is mainly for small devices which have limited memory and limited processing power.

39
00:03:28,560 --> 00:03:36,160
While Java E is built on Java Sea, Java uses a subset of Java C.

40
00:03:37,190 --> 00:03:44,330
And in this course we will be learning about Java as E as it represents the core Java programming language.

41
00:03:44,780 --> 00:03:51,860
We will also briefly get into Java E at the very end as the course project is a web application and

42
00:03:51,860 --> 00:03:55,610
we use some basic Java E technologies like Servlet and JSP.

43
00:03:56,540 --> 00:04:03,830
Note that even if you want to develop Java E or Java applications, you still need to have a solid foundation

44
00:04:03,830 --> 00:04:10,170
in Java as both Java EE and Java m e as we can see are based on Java C.

45
00:04:11,440 --> 00:04:16,630
And you may also know that to develop full featured Android apps, we need to know Java.

46
00:04:17,589 --> 00:04:24,220
So having Sound Foundation in Java is very important and this course is all about setting that foundation

47
00:04:24,220 --> 00:04:24,970
firmly.

48
00:04:25,480 --> 00:04:31,750
Not having a good foundation in Java can really hurt your performance as a software engineer when you're

49
00:04:31,750 --> 00:04:34,870
developing Java EE or Android applications.

50
00:04:35,200 --> 00:04:40,960
So it is important to learn Java well, give it the time it needs and once you have a good background

51
00:04:40,960 --> 00:04:46,660
in Java, learning these other platforms is pretty easy and it shouldn't also take too much of time

52
00:04:46,660 --> 00:04:48,250
to acquire those skills.

53
00:04:49,050 --> 00:04:56,450
Now, strictly speaking, each of these different platforms define one or more specifications, and

54
00:04:56,460 --> 00:05:02,100
a specification is simply a document that describes the technology in plain English.

55
00:05:02,640 --> 00:05:05,490
So it is not a software and just a document.

56
00:05:05,790 --> 00:05:10,260
So the software, which is the implementation of the specification, would be something different.

57
00:05:10,440 --> 00:05:16,350
And an implementation can come from different providers like Oracle or Amazon or IBM and so on.

58
00:05:16,860 --> 00:05:24,090
So a specification is like a blueprint for a house, and the implementation is the actual house itself.

59
00:05:25,570 --> 00:05:28,110
Now the course is about Java Sea.

60
00:05:28,150 --> 00:05:29,350
So let's focus on it.

61
00:05:29,530 --> 00:05:38,410
Java Sea defines few specifications and one is the Java language specification or GLS and shot, and

62
00:05:38,410 --> 00:05:41,620
it defines the entire Java programming language itself.

63
00:05:42,010 --> 00:05:45,910
That is a defines the syntax and semantics of the language.

64
00:05:45,910 --> 00:05:47,560
That is the rules of the language.

65
00:05:47,800 --> 00:05:53,980
And it is the most comprehensive and accurate document that you can get on Java as it is written by

66
00:05:53,980 --> 00:05:57,430
the Java language designers themselves like James Gosling.

67
00:05:57,730 --> 00:06:04,120
So it is like any good book on Java but is not easy to understand, at least for a beginner.

68
00:06:04,750 --> 00:06:12,610
Later we will also look at the Java language specification, which is online and next specification

69
00:06:12,610 --> 00:06:20,110
is Java Virtual Machine Specification, which defines how a JVM should work, and it also specifies

70
00:06:20,110 --> 00:06:22,210
the bytecode instruction set.

71
00:06:22,210 --> 00:06:26,320
And we will look at some of the byte code instructions in the Java Internals chapter.

72
00:06:27,350 --> 00:06:33,860
And it also includes the Java API specification, which is nothing but the specification of the Java

73
00:06:33,860 --> 00:06:34,520
library.

74
00:06:35,120 --> 00:06:40,520
So that's what Java SE specification is, and it has many implementations.

75
00:06:40,700 --> 00:06:48,230
One is the official implementation from Oracle and it is referred to as Oracle JDK, where JDK means

76
00:06:48,230 --> 00:06:49,940
Java Development Kit.

77
00:06:51,530 --> 00:06:54,200
Then there is Oracle's open JDK.

78
00:06:54,230 --> 00:06:56,390
So this also comes from Oracle.

79
00:06:56,600 --> 00:07:02,780
The difference between Oracle JDK and Open JDK is that open JDK is completely free.

80
00:07:02,990 --> 00:07:09,830
While with Oracle JDK, you would have to pay Oracle if you are using it for commercial purpose.

81
00:07:10,190 --> 00:07:15,800
And with that, you would also get their support for fixing any bugs in the implementation.

82
00:07:16,770 --> 00:07:21,360
Now open JDK is completely free, so it is free even for commercial purpose.

83
00:07:21,810 --> 00:07:27,390
But since we are learning Java here, it is fine to use even Oracle JDK.

84
00:07:28,440 --> 00:07:35,610
And there are also many other providers and a few prominent ones are adopting Open JDK, Amazon Crypto

85
00:07:35,610 --> 00:07:37,620
and Red Hat's Open JDK.

86
00:07:38,190 --> 00:07:42,060
These are also free, just like Oracle's Open JDK.

87
00:07:42,870 --> 00:07:50,850
Now, each of these implementations is basically a JDK that is Java development kit, and we need a

88
00:07:50,850 --> 00:07:55,350
JDK to write, compile and execute our Java programs.

89
00:07:55,350 --> 00:07:58,740
And soon we will install one of the latest versions of JDK.

90
00:07:59,550 --> 00:08:02,610
And let's see what a JDK would contain.

91
00:08:02,970 --> 00:08:09,150
It would obviously include a JVM which implements the Java specification.

92
00:08:09,600 --> 00:08:10,090
Right.

93
00:08:10,590 --> 00:08:19,020
And it would also include the actual Java API code that is the Java Library code, which is a predefined

94
00:08:19,020 --> 00:08:23,400
functionality that we can readily use when writing our Java programs.

95
00:08:24,840 --> 00:08:32,909
And it would also include development tools like the Java compiler so that we can compile our Java programs.

96
00:08:33,740 --> 00:08:39,919
So all requests that we get from the different providers would include these components.

97
00:08:40,730 --> 00:08:47,750
Gigi is also referred to as Java SDK, where SDK stands for software development kit.

98
00:08:47,990 --> 00:08:56,870
SDK is more of a general term and many times developers may also refer to JDK as Java E, although strictly

99
00:08:56,870 --> 00:09:00,230
speaking, Java E is a set of specifications.

100
00:09:00,230 --> 00:09:08,990
Just as we discussed now here, the JV team and the Java API are collectively referred to as JIRA,

101
00:09:09,020 --> 00:09:11,930
which stands for Java Runtime Environment.

102
00:09:12,850 --> 00:09:19,600
Oracle used to offer such a degree separately from JDK, although JDK includes a GI.

103
00:09:20,050 --> 00:09:27,640
That's because j r e as its name jour runtime environment suggests, is essentially a runtime environment.

104
00:09:27,880 --> 00:09:32,410
That is, it is an environment used to only run Java applications.

105
00:09:32,830 --> 00:09:36,250
So you cannot develop Java applications using Java.

106
00:09:36,990 --> 00:09:43,680
So if you are shipping your Java application to your clients, then your clients would only need to

107
00:09:43,680 --> 00:09:45,690
install a jar to run it.

108
00:09:46,170 --> 00:09:51,630
They do not need development tools like the Java compiler which come with the JDK.

109
00:09:51,630 --> 00:09:54,810
So they do not need a JDK, but they need a job.

110
00:09:55,350 --> 00:10:03,540
However, such a separate Java was offered only till Java SE ten, where ten is one of the versions

111
00:10:03,540 --> 00:10:04,520
of Java C.

112
00:10:05,430 --> 00:10:06,090
From Java.

113
00:10:06,090 --> 00:10:13,860
As 11 onwards, Oracle stopped offering it as they were, including a tool called Jail Ink, which can

114
00:10:13,860 --> 00:10:16,390
be used to create a custom job.

115
00:10:17,130 --> 00:10:21,720
And this custom job can be smaller in size than a regular job.

116
00:10:22,170 --> 00:10:26,940
Or one can simply install a JDK itself, as it also includes a.

117
00:10:28,260 --> 00:10:34,410
So jrd is not included separately by Oracle from Java 11 onwards.

118
00:10:34,740 --> 00:10:41,520
But regardless of whether a separate git is available or not, we as developers who develop Java programs

119
00:10:41,520 --> 00:10:49,230
would need a JDK as it includes tools like Java compiler, which is needed to compile our programs.

120
00:10:49,470 --> 00:10:56,190
And since it also includes a JVM, since the JDK includes a JVM, we can also execute our programs.

121
00:10:56,700 --> 00:10:58,170
So JDK is what we need.

122
00:10:59,080 --> 00:11:05,650
Now, earlier it was mentioned that these are some of the prominent Greek providers, although these

123
00:11:05,650 --> 00:11:07,390
are different implementations.

124
00:11:07,540 --> 00:11:10,440
They are all based on the same source code.

125
00:11:10,450 --> 00:11:18,220
And this source code is developed as part of this project called Open JDK, and this source code is

126
00:11:18,220 --> 00:11:19,120
open source.

127
00:11:19,360 --> 00:11:26,740
And it was originally proprietary to Oracle, but later Oracle made it open source so that anyone can

128
00:11:26,740 --> 00:11:33,190
contribute to it, including engineers from companies such as Oracle, Amazon and IBM.

129
00:11:33,970 --> 00:11:43,270
Now, when we say source code, it would mainly be the Java Library or the Java API code and a JVM implementation

130
00:11:43,270 --> 00:11:44,530
called Hotspot.

131
00:11:45,400 --> 00:11:47,590
And Hotspot is written in C++.

132
00:11:47,890 --> 00:11:54,730
So all these different providers would include the same API code and the hotspot JVM.

133
00:11:55,420 --> 00:12:03,250
However, certain providers might add some non core functionality and may also provide additional services

134
00:12:03,250 --> 00:12:07,780
like offering page support, like in the case of Oracle's dedicated.

135
00:12:08,640 --> 00:12:17,370
Now adopt open Openjdk also provides the option to use another JVM called Open J nine, which is from

136
00:12:17,370 --> 00:12:18,810
the Eclipse Foundation.

137
00:12:19,720 --> 00:12:24,640
Open J nine is also open source and was originally developed by IBM.

138
00:12:25,060 --> 00:12:31,300
So Hotspot and Open nine are two different JVM implementations and both are great.

139
00:12:31,330 --> 00:12:37,510
Hotspot is more like a standard one because it was originally developed by Oracle and it's also part

140
00:12:37,510 --> 00:12:40,990
of Open JDK, but Open nine is also very good.

141
00:12:41,590 --> 00:12:45,820
So keep in mind that Java is open source.

142
00:12:46,330 --> 00:12:51,320
Now let's briefly look at the Java specifications that are available on the web.

143
00:12:53,770 --> 00:12:57,550
So just go ahead and Google for Java s e specification.

144
00:12:57,820 --> 00:13:04,630
And the first result here is the is this link which says Java e specifications and it is from the Oracle

145
00:13:04,630 --> 00:13:05,590
dotcom site.

146
00:13:05,740 --> 00:13:07,060
And just click on that.

147
00:13:08,450 --> 00:13:16,340
So here it shows the Java Sea specifications and it shows the different releases like the Java Sea 14,

148
00:13:16,340 --> 00:13:18,110
which is the latest release.

149
00:13:18,140 --> 00:13:24,110
And there are also the previous releases like the Java Sea, 13, 12, 11 and so on.

150
00:13:24,380 --> 00:13:29,240
And you may see some other release here depending on when you are accessing this.

151
00:13:29,570 --> 00:13:37,160
So here we know that the Java Sea is a set of specifications and one of them is the Java language specification

152
00:13:37,160 --> 00:13:41,210
or GLS, and the other one is the Java virtual machine specification.

153
00:13:41,210 --> 00:13:44,090
And there is also the Java API specification.

154
00:13:44,090 --> 00:13:45,470
It is not linked from here.

155
00:13:45,470 --> 00:13:51,290
So we need to look at it separately and I will show you the Java API specification in a bit.

156
00:13:51,500 --> 00:13:58,190
So here let's go ahead and click on this HTML which shows the HTML version of the specification.

157
00:13:58,850 --> 00:14:04,880
And as I told you, the Java language specification defines the Java programming language itself.

158
00:14:05,630 --> 00:14:11,060
So it defines the syntax and the semantics, like the rules of the programming language.

159
00:14:11,270 --> 00:14:18,860
And as I said earlier, it is authored by the language designers like James Gosling here and other designers

160
00:14:18,860 --> 00:14:19,460
here.

161
00:14:19,460 --> 00:14:22,850
So here you can view the table of contents.

162
00:14:23,570 --> 00:14:29,030
But like I said earlier, it's not very easily comprehensible for a beginner.

163
00:14:29,030 --> 00:14:35,690
Definitely it is not easy to understand because it uses a certain formal way in which they explain things

164
00:14:36,260 --> 00:14:37,880
and it is not very digestible.

165
00:14:37,880 --> 00:14:43,100
So you do need a book or an online resource such as this to understand the language.

166
00:14:43,100 --> 00:14:49,400
But once you gain some experience, sometimes if you have any questions or if you have any doubts while

167
00:14:49,400 --> 00:14:53,900
you are programming, you may refer to this document so you can look at it later.

168
00:14:53,900 --> 00:14:55,280
It's not that important.

169
00:14:56,670 --> 00:14:57,600
So let's go back.

170
00:14:57,600 --> 00:15:01,020
And this is a Java virtual machine specification.

171
00:15:01,710 --> 00:15:08,160
And here also, let's click on this and it tells about how the JVM should work.

172
00:15:08,310 --> 00:15:11,790
OC And here are the table of contents.

173
00:15:12,420 --> 00:15:19,200
It talks about the architecture and the different things within the GVM and the JVM implementation has

174
00:15:19,200 --> 00:15:21,510
to adhere to this particular document.

175
00:15:21,990 --> 00:15:27,000
And like I said, a specification is simply a document written in English.

176
00:15:27,360 --> 00:15:32,820
And at the very end here it lists out all of the bytecode instructions.

177
00:15:32,820 --> 00:15:38,340
And we know that a Java program is compiled into Java bytecode, which is nothing but the Java bytecode

178
00:15:38,340 --> 00:15:44,460
instructions, and these are all the different instructions and we will review some of them later on.

179
00:15:45,570 --> 00:15:45,780
Okay.

180
00:15:45,780 --> 00:15:46,560
So let's go back.

181
00:15:46,800 --> 00:15:53,850
And next in a different tab, just search for, let's say Java 13 API, just Google for that.

182
00:15:54,030 --> 00:15:59,190
And the first link here is the Java API and it is also from the Oracle's website.

183
00:15:59,190 --> 00:16:03,420
And if you see the path here, it says API, let's click on this.

184
00:16:04,660 --> 00:16:08,740
So this is the Java API and this is how it is.

185
00:16:08,740 --> 00:16:10,450
The look and feel very unique.

186
00:16:10,630 --> 00:16:19,030
So the Java API is nothing, but it describes the Java library which contains the predefined functionality

187
00:16:19,030 --> 00:16:21,040
that the Java programmers can use.

188
00:16:21,070 --> 00:16:27,340
And most of this library, the predefined functionality is in the form of classes.

189
00:16:27,730 --> 00:16:32,110
Classes are fundamental units of the Java language.

190
00:16:32,420 --> 00:16:39,250
A class is a very fundamental unit and a Java library has tons of classes, thousands of classes, and

191
00:16:39,250 --> 00:16:41,770
they're all packaged into something called packages.

192
00:16:42,100 --> 00:16:47,830
And very soon we will also write our own first Java class and within this course we'll be writing a

193
00:16:47,830 --> 00:16:48,970
lot of Java classes.

194
00:16:48,970 --> 00:16:52,090
But the library itself comes with a lot of classes.

195
00:16:52,090 --> 00:16:57,580
So I'm not going into this particular document at this point of time because later on we will review

196
00:16:57,580 --> 00:16:58,000
this.

197
00:16:58,420 --> 00:17:05,140
But it does provide a lot of packages and you will have separate packages for data structures and you

198
00:17:05,140 --> 00:17:07,390
can really use those data structures.

199
00:17:07,900 --> 00:17:14,800
Similarly, there will be packages for doing input output like reading and writing into files and also

200
00:17:14,800 --> 00:17:16,030
for other purposes.

201
00:17:16,030 --> 00:17:18,369
So that's the Java API.

202
00:17:19,810 --> 00:17:29,140
Now here every release comes with something called as a GSR and it just ah stands for Java specification

203
00:17:29,140 --> 00:17:29,910
request.

204
00:17:29,920 --> 00:17:36,070
So as you can see, there is this release with this GSR and it's it also has a number GSR 389.

205
00:17:36,100 --> 00:17:39,550
Similarly, Java 13 has GSR 388.

206
00:17:39,580 --> 00:17:43,990
And most of these releases also have their own GSR.

207
00:17:44,410 --> 00:17:51,670
And GSR stands for Java specification request, and it mainly describes the features that got added

208
00:17:51,670 --> 00:17:53,650
within this particular release.

209
00:17:53,830 --> 00:18:02,450
And those features can be some changes in the Java language itself, or it can be something to do with

210
00:18:02,450 --> 00:18:03,370
the JVM.

211
00:18:03,370 --> 00:18:09,700
Like maybe a new algorithm has been added for doing garbage collection, so something like that.

212
00:18:09,700 --> 00:18:17,500
Or it can be some new classes being added to the Java API itself, so it can be any of those changes.

213
00:18:17,980 --> 00:18:24,640
So when something is something change happens to the Java language, then the compiler also has to be

214
00:18:24,640 --> 00:18:27,340
updated, so they need to make a lot of changes there.

215
00:18:28,090 --> 00:18:33,250
Java language change could be something like for instance, in Java eight they introduced something

216
00:18:33,250 --> 00:18:37,030
called as Java, something called the Lambda Expressions.

217
00:18:37,030 --> 00:18:38,800
So that's a change in the language.

218
00:18:38,800 --> 00:18:46,210
And so the compiler also has to be updated and some relevant API changes were also had to be made.

219
00:18:46,360 --> 00:18:54,460
Now this Java specification request over here, this is called as an umbrella GSR and each GSR like

220
00:18:54,460 --> 00:18:59,740
like I said, it has a defines certain it describes certain features and some of the features are major

221
00:18:59,740 --> 00:19:01,420
features and some are minor.

222
00:19:01,420 --> 00:19:05,290
And the major features can also have an associated GSR.

223
00:19:05,680 --> 00:19:13,150
Each major feature can have an associated GSR, and which means that this GSR can have some some component

224
00:19:13,150 --> 00:19:13,630
GSR.

225
00:19:14,320 --> 00:19:19,690
Now, this GSR is initially proposed when they want to come up with a new release.

226
00:19:19,900 --> 00:19:21,970
It is run by a specification lead.

227
00:19:22,090 --> 00:19:26,140
And the GSR would go through different phases.

228
00:19:26,140 --> 00:19:31,210
Initially there would be a draft phase and then finally you will also it goes through multiple stages

229
00:19:31,210 --> 00:19:38,050
and finally there will be a final specification and it would include all the real features and some

230
00:19:38,050 --> 00:19:43,300
of the features which were initially proposed may not make it to the final specification.

231
00:19:43,630 --> 00:19:50,200
So this process of developing this GSR through different stages is called as Java Community Process

232
00:19:50,200 --> 00:19:52,210
or GCP and Short.

233
00:19:53,230 --> 00:19:55,810
So that is just for your information.

234
00:19:55,900 --> 00:19:58,150
So you need to know what a GCP is.

235
00:19:58,150 --> 00:20:03,010
It's a formal mechanism or a formal process to develop Java specifications.

236
00:20:03,010 --> 00:20:07,120
So that way the language is continuously being evolved.

237
00:20:07,450 --> 00:20:12,130
And later on, maybe once you're done with the course you can read about it.

238
00:20:12,160 --> 00:20:18,970
It's not that important to know about at this point of time, but you need to at least know what a GCP

239
00:20:18,970 --> 00:20:20,650
is and what a GSR is.

240
00:20:21,160 --> 00:20:22,330
So that's about it.

241
00:20:22,330 --> 00:20:30,820
So just to summarize, we looked at Java SC and we know where it stands within the Java software family.

242
00:20:30,820 --> 00:20:39,040
It is the core of the Java software platform family, and we know that Java C is a bunch of specifications

243
00:20:39,310 --> 00:20:45,100
and there are also keys which implement a Java SE specifications.

244
00:20:45,100 --> 00:20:51,940
And these kids come from different providers and all of these providers we said are most of them are

245
00:20:51,940 --> 00:20:59,200
based on a common source code, an open source source code which is developed by the Open JDK project.

246
00:20:59,740 --> 00:21:04,960
And we also know that the specifications are developed by, through a process called GCP, which is

247
00:21:04,960 --> 00:21:11,080
a Java community process, and every Java release has this umbrella, GSR, it's called as an umbrella

248
00:21:11,080 --> 00:21:13,750
GSR because it includes all of the different features.

249
00:21:14,470 --> 00:21:19,900
And in the next lecture, let's we will look at the different releases and discuss a bit about the release

250
00:21:19,900 --> 00:21:23,740
cycle and what comes along with each release cycle.

251
00:21:24,120 --> 00:21:25,240
With each release.

252
00:21:25,630 --> 00:21:27,340
Thank you and see you in the next lecture.

