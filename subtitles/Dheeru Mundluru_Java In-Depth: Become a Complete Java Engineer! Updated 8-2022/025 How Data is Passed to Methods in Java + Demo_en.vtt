WEBVTT
1
00:00:02.110 --> 00:00:03.010
Hi there.

2
00:00:03.040 --> 00:00:04.190
This is the De La Rue.

3
00:00:04.210 --> 00:00:05.200
And welcome back.

4
00:00:05.410 --> 00:00:10.360
So far we looked at how methods are defined and how they can be invoked.

5
00:00:10.720 --> 00:00:14.500
We saw that data can be passed to methods during method invocation.

6
00:00:15.040 --> 00:00:20.380
Now, the way this data is passed can vary from one programming language to another.

7
00:00:21.040 --> 00:00:22.930
To understand what I'm talking about.

8
00:00:22.960 --> 00:00:24.790
Let's look at a simple example.

9
00:00:26.080 --> 00:00:32.320
Let's consider this method called update ID, which has only one parameter called new ID.

10
00:00:32.920 --> 00:00:37.330
All it is doing is reassigning new ID to 2001.

11
00:00:38.790 --> 00:00:45.570
Now let's say we are invoking updated method with a variable named ID which is initialized to 2000.

12
00:00:47.050 --> 00:00:51.520
So here is a question we can have after invoking the method update ID.

13
00:00:51.550 --> 00:01:00.280
If we print the variable ID, would it display 1000 or 2001 as updated method is updating the input

14
00:01:00.280 --> 00:01:01.870
parameter 2001.

15
00:01:03.160 --> 00:01:09.250
In Java, it would remain as 1000, whereas in some other programming language it may get updated to

16
00:01:09.250 --> 00:01:10.180
1001.

17
00:01:10.870 --> 00:01:12.910
In this case, we are passing a primitive.

18
00:01:12.940 --> 00:01:16.060
Let's see what happens if we pass an object reference.

19
00:01:17.630 --> 00:01:19.640
And here is the same updated method.

20
00:01:19.910 --> 00:01:26.330
Only difference is instead of primitive, it now has an object reference as the method parameter.

21
00:01:27.050 --> 00:01:33.680
The parameter type is student here and the ID variable in the previous example has been moved into the

22
00:01:33.680 --> 00:01:39.620
student class and similar to previous example, ID is again updated 2001.

23
00:01:39.620 --> 00:01:42.620
But this time we are the object reference as one.

24
00:01:44.640 --> 00:01:47.670
Now here is the code that invokes updated method.

25
00:01:48.210 --> 00:01:51.270
First, an instance of student called S is created.

26
00:01:51.540 --> 00:01:58.800
Then the variable ID is initialized to 1000 and finally variable as is passed as input to the method

27
00:01:58.800 --> 00:01:59.610
update id.

28
00:02:01.340 --> 00:02:08.449
So now the question is if we print ID using the variable, as would it return 2000 or 2001?

29
00:02:09.979 --> 00:02:13.220
And this time in Java it would be 2001.

30
00:02:13.250 --> 00:02:15.830
And in some other language it may be 1000.

31
00:02:16.600 --> 00:02:23.260
So when primitive laws passed, it did not affect the state of the variable in the calling environment.

32
00:02:23.740 --> 00:02:28.930
But when object reference was passed, the state in the calling environment was affected.

33
00:02:29.350 --> 00:02:34.480
And when I say calling environment, I mean the part of the code where method is invoked.

34
00:02:34.690 --> 00:02:37.420
That is where we have the method invocation statement.

35
00:02:38.050 --> 00:02:44.380
So there is this difference between how passing primitives and object references affect the state in

36
00:02:44.380 --> 00:02:45.700
the calling environment.

37
00:02:46.300 --> 00:02:53.440
And it is critical to get a firm understanding of how primitives and object references are passed during

38
00:02:53.440 --> 00:02:54.490
method invocation.

39
00:02:54.820 --> 00:03:00.680
So please make sure you understand this topic clearly before you move ahead to learn other topics.

40
00:03:00.700 --> 00:03:02.530
So this is very fundamental.

41
00:03:04.330 --> 00:03:09.880
And these are the two important ways that programming language is used to pass data to methods.

42
00:03:10.030 --> 00:03:13.780
One is passed by value and the other is pass by reference.

43
00:03:14.260 --> 00:03:20.200
There are few more mechanisms to pass data, and some of them are just minor variations of these.

44
00:03:20.860 --> 00:03:25.810
And of the two, java uses pass by value and we will look at it now.

45
00:03:27.510 --> 00:03:34.680
Basically in this lecture we are talking about data being passed to methods and this data can be literals

46
00:03:34.710 --> 00:03:38.520
or variables like primitives and object references.

47
00:03:38.970 --> 00:03:45.930
Let's consider only variables as we want to understand how state of such variables is being affected

48
00:03:45.930 --> 00:03:47.640
during method invocation.

49
00:03:48.150 --> 00:03:54.420
But before doing that, we need to first understand how variables are actually represented in memory.

50
00:03:55.020 --> 00:03:58.920
First, let's look at how primitive variables are represented in memory.

51
00:04:00.290 --> 00:04:02.690
Let's consider this primitive assignment statement.

52
00:04:04.320 --> 00:04:07.230
And here the variable ID has three components.

53
00:04:07.320 --> 00:04:10.790
One is the logical name of the variable, which is ID.

54
00:04:11.190 --> 00:04:15.420
Second is memory address corresponding to the variable ID.

55
00:04:15.450 --> 00:04:18.000
And third is the actual data, which is 1000.

56
00:04:18.630 --> 00:04:23.850
Logical name is simply the name used in the source code to refer to its data.

57
00:04:24.510 --> 00:04:28.650
An compiler converts such logical names to memory addresses.

58
00:04:29.130 --> 00:04:36.210
And so during program execution, memory address is what matters, and that's where the data is stored.

59
00:04:38.250 --> 00:04:44.890
And here is how we can visualize the relation between logical name, it's memory address and the value

60
00:04:44.910 --> 00:04:46.740
the address stores on.

61
00:04:46.740 --> 00:04:47.010
Right?

62
00:04:47.010 --> 00:04:52.180
We have the memory and here the actual data of variable ID is stored.

63
00:04:52.180 --> 00:04:55.260
That memory address 81921.

64
00:04:55.950 --> 00:04:59.700
So memory address 81921 corresponds to the variable ID.

65
00:05:00.090 --> 00:05:04.290
So at runtime we have only memory address and the real data.

66
00:05:04.590 --> 00:05:08.820
So no variable names at runtime and you need to keep that in mind.

67
00:05:09.330 --> 00:05:13.590
So this is how a primitive variable gets represented in memory.

68
00:05:15.410 --> 00:05:19.130
And now let's see how an object reference looks like in memory.

69
00:05:20.220 --> 00:05:20.490
Here.

70
00:05:20.490 --> 00:05:28.260
A student object is created which is referenced by an object reference as we know that here as is not

71
00:05:28.260 --> 00:05:34.170
an object but simply holds bits that reference a student object in memory.

72
00:05:34.680 --> 00:05:38.520
And by bits we mean the memory address of the student object.

73
00:05:38.880 --> 00:05:41.940
So as holds the memory address of the student object.

74
00:05:42.360 --> 00:05:45.510
And here's how we can visualize it here.

75
00:05:45.510 --> 00:05:53.130
The memory address 81921 corresponds to the variable as like in the case of variable ID in the previous

76
00:05:53.130 --> 00:05:53.820
example.

77
00:05:54.880 --> 00:06:02.170
But 81921 stores the memory address of the actual object, which is 85411.

78
00:06:02.530 --> 00:06:10.000
So the memory address of the actual object is 85411 and 81921 is just holding that value.

79
00:06:10.570 --> 00:06:14.650
So this is how an object reference gets represented in memory.

80
00:06:16.520 --> 00:06:21.230
Now let's look at the pass by value mechanism that Java uses during method invocation.

81
00:06:22.300 --> 00:06:29.020
And as the name implies, pass by value simply means you would pass the value of the method argument

82
00:06:29.020 --> 00:06:36.010
to the method parameter that is a copy of the value of the method argument is made and is then assigned

83
00:06:36.010 --> 00:06:37.420
to the method parameter.

84
00:06:38.700 --> 00:06:44.640
So if argument is primitive variable, then a copy of the corresponding primitive value is passed.

85
00:06:45.500 --> 00:06:51.770
But if argument is object reference, then we know that the argument value is the memory address of

86
00:06:51.770 --> 00:06:52.970
the actual object.

87
00:06:53.330 --> 00:06:56.870
So a copy of the object's memory address is passed.

88
00:06:57.470 --> 00:06:59.510
So that's passed by value.

89
00:06:59.720 --> 00:07:05.330
All we pass is the value of the argument in the method invocation statement.

90
00:07:07.230 --> 00:07:11.370
Now let's see how a primitive is passed using pass by value.

91
00:07:12.890 --> 00:07:17.060
Let's consider the same code snippet which we saw at the very beginning.

92
00:07:17.330 --> 00:07:22.670
We have the updated method which is simply updating the value that is passed as input.

93
00:07:23.210 --> 00:07:24.110
Only additions.

94
00:07:24.110 --> 00:07:31.430
Here are the four points of execution one, two, three and four, so that we can examine the memory

95
00:07:31.430 --> 00:07:33.950
state at each point of execution.

96
00:07:34.580 --> 00:07:39.170
So when control comes to each of those points, we are going to look at the memory state.

97
00:07:39.770 --> 00:07:42.530
So let's go ahead and examine the memory state.

98
00:07:43.830 --> 00:07:50.130
At the first execution point, the variable ID has been initialized and so you can see the value 1000

99
00:07:50.130 --> 00:07:50.760
in memory.

100
00:07:51.360 --> 00:07:57.390
Note that for keeping it simple, we are using the variable name ID here in this illustration instead

101
00:07:57.390 --> 00:08:00.020
of using a memory address to represent it.

102
00:08:01.610 --> 00:08:08.660
Next each second execution point method update ID has already been invoked and due to pass by value.

103
00:08:08.690 --> 00:08:16.190
A copy of the argument Value Thousand is made and is assigned to the method parameter new ID so you

104
00:08:16.190 --> 00:08:18.860
can now see new ID also in memory.

105
00:08:20.640 --> 00:08:22.530
Next, a third execution point.

106
00:08:22.560 --> 00:08:24.330
Updated method updates.

107
00:08:24.360 --> 00:08:26.100
New ID 2001.

108
00:08:26.670 --> 00:08:30.720
However, it's only modifying its own copy of 1000.

109
00:08:31.170 --> 00:08:36.299
That is the ID variable, and the calling environment still has the value thousand.

110
00:08:37.049 --> 00:08:44.190
So once the method parameter gets its value, it has nothing to do with the argument used during method

111
00:08:44.190 --> 00:08:44.970
invocation.

112
00:08:46.800 --> 00:08:53.190
And finally, at fourth execution point, the method execution has completed, and so the local variable

113
00:08:53.190 --> 00:09:00.350
new ID is discarded while ID will still be there in the memory with the original value token.

114
00:09:01.340 --> 00:09:07.130
So that's passed by value with regards to using primitive variables as method arguments.

115
00:09:09.000 --> 00:09:13.340
Now let's see how an object reference is passed using pass by value mechanism.

116
00:09:13.360 --> 00:09:16.380
And it is very important to understand this.

117
00:09:16.680 --> 00:09:19.800
So just pay more attention while we discuss this slide.

118
00:09:21.180 --> 00:09:25.010
This is a second code snippet which we saw at the beginning here.

119
00:09:25.020 --> 00:09:30.510
Updated method has an object reference as method parameter instead of a primitive variable.

120
00:09:30.900 --> 00:09:36.570
Unlike in the previous example, we once again have the four points of execution to steady the memory

121
00:09:36.570 --> 00:09:37.050
state.

122
00:09:39.550 --> 00:09:45.520
At the first execution point, student object is created and its variable ID is initialized to thousand

123
00:09:45.970 --> 00:09:48.880
and you can see the corresponding representation in memory.

124
00:09:49.420 --> 00:09:58.570
We have the student object with ID as 1000 at the memory address 85411 and the variable as referencing

125
00:09:58.570 --> 00:09:58.930
it.

126
00:10:01.010 --> 00:10:01.460
Next steps.

127
00:10:01.460 --> 00:10:07.100
Second execution point method update ID has already been invoked, so a copy of the argument value is

128
00:10:07.100 --> 00:10:09.770
made and is assigned to the method parameter.

129
00:10:09.770 --> 00:10:17.450
S1 The argument value is the memory address 85411 and so it is assigned to S1.

130
00:10:18.140 --> 00:10:25.280
So at this instance we now have both SE and S1 referencing the same student object.

131
00:10:27.470 --> 00:10:29.370
Next, a third execution point.

132
00:10:29.390 --> 00:10:34.430
Updated method updates the ID field of the object 2001.

133
00:10:35.030 --> 00:10:38.030
Now, this also affects the object reference.

134
00:10:38.030 --> 00:10:44.150
As in the caller's environment, a student object is referenced by both SW and S1.

135
00:10:44.870 --> 00:10:51.380
So accessing ID field using object reference as in the calling environment would also return the value

136
00:10:51.380 --> 00:10:52.190
2001.

137
00:10:54.290 --> 00:10:58.420
And finally, at fourth execution point, the method execution has completed.

138
00:10:58.430 --> 00:11:04.970
And so the local variable as one is discarded while object reference as will still be there with the

139
00:11:04.970 --> 00:11:06.680
updated value thousand and one.

140
00:11:07.250 --> 00:11:10.850
That is, if you do as ID, you will get 1001.

141
00:11:11.580 --> 00:11:18.270
So as you can see, if the object is modified inside the method, then that modification is reflected

142
00:11:18.270 --> 00:11:22.440
in the calling environment, which doesn't happen with primitive arguments.

143
00:11:22.860 --> 00:11:28.620
And this is only because here we are dealing with an object that is referenced from both the calling

144
00:11:28.620 --> 00:11:31.380
environment and also from within the method.

145
00:11:33.100 --> 00:11:35.920
And now let's look at a slightly modified example.

146
00:11:37.320 --> 00:11:37.920
Here.

147
00:11:37.920 --> 00:11:44.640
The only difference from the code in the previous slide is that update ID method re assigns the method

148
00:11:44.640 --> 00:11:46.590
parameter to a new object.

149
00:11:47.190 --> 00:11:53.550
So like in the case of the primitive example, now both method parameter and the argument in the method

150
00:11:53.550 --> 00:11:57.150
invocation statement are completely independent of each other.

151
00:11:57.660 --> 00:12:05.070
So any change made on the new object via the method parameter will not have any effect on the original

152
00:12:05.070 --> 00:12:09.600
object referenced by the argument in the method invocation statement.

153
00:12:10.230 --> 00:12:12.300
Let's just take a look at the memory state.

154
00:12:12.510 --> 00:12:17.820
We can jump to the third execution point as the rest of the code is similar to the code in the previous

155
00:12:17.820 --> 00:12:18.360
slide.

156
00:12:19.980 --> 00:12:26.730
So here is what we have at the first execution point where student object is created and its ID value

157
00:12:26.760 --> 00:12:28.320
is initialized to 1000.

158
00:12:30.030 --> 00:12:33.900
And here is what we have after updated method is invoked.

159
00:12:33.930 --> 00:12:42.020
So both SE and S1 at this instance are referencing the same student object which has ID value as 1000.

160
00:12:43.690 --> 00:12:49.570
And at the third execution point, we can see that a new object is created and as one now references

161
00:12:49.570 --> 00:12:54.340
it and it also initializes ID value to 2001.

162
00:12:55.270 --> 00:13:02.320
So the original object that has ideas thousand is now referenced only from the calling environment by

163
00:13:02.320 --> 00:13:03.550
the variable SW.

164
00:13:05.630 --> 00:13:11.300
Finally, at fourth execution point, the method execution completes and seven is discarded.

165
00:13:11.960 --> 00:13:18.320
So the variable as is totally unaffected in this case due to the reassignment that happened within the

166
00:13:18.320 --> 00:13:18.860
method.

167
00:13:20.900 --> 00:13:26.660
Finally, just note that passing data to a method is identical to variable assignment.

168
00:13:27.630 --> 00:13:32.070
That is the method argument value passed is assigned to method parameter.

169
00:13:32.790 --> 00:13:37.260
So we will have exactly identical behavior with variable assignments to.

170
00:13:38.390 --> 00:13:43.250
For instance, let's consider our method in location code in our primitive example.

171
00:13:43.460 --> 00:13:48.020
Now, let's see what this would translate to in terms of variable assignments.

172
00:13:49.600 --> 00:13:51.940
And here are the variable assignment statements.

173
00:13:51.970 --> 00:13:54.280
First, we are initializing it 2000.

174
00:13:54.460 --> 00:14:00.820
Next, we are assigning ID to new ID, which is what is happening when update ID method is invoked.

175
00:14:01.480 --> 00:14:08.100
And finally, new ID is updated to 1001, while ID will still remain as Towson.

176
00:14:08.770 --> 00:14:14.980
So these statements will also have the same memory states as in the case of method location.

177
00:14:15.690 --> 00:14:20.820
Now let's also look at the similar comparison of the object reference passing example.

178
00:14:22.520 --> 00:14:23.780
And here is the code.

179
00:14:24.290 --> 00:14:26.750
And here are the variable assignment statements.

180
00:14:26.900 --> 00:14:32.570
We are first creating object reference as and then we are initializing ID field to 1000.

181
00:14:33.580 --> 00:14:39.970
Next we are assigning as S2 one, which is what is happening when update ID method is invoked.

182
00:14:40.510 --> 00:14:44.860
So both SE and S1 now reference the same student object.

183
00:14:45.680 --> 00:14:53.210
On next we are re initializing it to 1001 via S1, which is what the updated method is doing.

184
00:14:53.720 --> 00:14:59.210
So now accessing id v are the variable as will also return 1001.

185
00:15:00.000 --> 00:15:05.430
So these statements will also have the same memory states as in the case of method invocation.

186
00:15:07.020 --> 00:15:09.690
And finally, just stick this in your mind.

187
00:15:09.720 --> 00:15:16.140
Java is always passed by value, whether it is primitive or object reference.

188
00:15:16.710 --> 00:15:18.090
So that's about it.

189
00:15:18.330 --> 00:15:24.780
It's very important to clearly understand the process when object references are passed to methods.

190
00:15:25.320 --> 00:15:28.050
Let's actually do a very quick demo of it.

191
00:15:30.760 --> 00:15:32.920
Here we are in the basics demo class.

192
00:15:33.070 --> 00:15:38.980
And what we are going to do is we are going to create an array and then we will pass that array to a

193
00:15:38.980 --> 00:15:39.730
method.

194
00:15:39.940 --> 00:15:46.870
And within the method we will modify one of the elements of the array and that modification should be

195
00:15:46.870 --> 00:15:48.940
reflected in the calling environment.

196
00:15:49.680 --> 00:15:52.250
That's passed by value of object reference.

197
00:15:52.260 --> 00:15:57.600
Since our is an object, we can also use it as an object reference for this demonstration.

198
00:15:57.840 --> 00:15:59.970
So let's go ahead and just do that.

199
00:16:00.660 --> 00:16:01.770
Let's create.

200
00:16:02.660 --> 00:16:02.990
And.

201
00:16:03.950 --> 00:16:07.070
And let's just name it as ray itself.

202
00:16:08.780 --> 00:16:10.400
So the idea has two elements.

203
00:16:10.730 --> 00:16:14.610
Let's call a method called go and pass this array.

204
00:16:15.730 --> 00:16:18.230
Let's define the go method here.

205
00:16:18.250 --> 00:16:19.240
Static.

206
00:16:25.900 --> 00:16:26.380
Okay.

207
00:16:26.740 --> 00:16:28.990
First, let's just print the elements.

208
00:16:34.640 --> 00:16:37.130
So let's just print the zero element.

209
00:16:44.680 --> 00:16:46.210
So this would be one.

210
00:16:49.850 --> 00:16:51.290
And let's update.

211
00:16:52.530 --> 00:16:56.880
The first element is array of one to some value.

212
00:16:56.890 --> 00:16:58.200
So let's say 20 to.

213
00:17:00.140 --> 00:17:00.710
And.

214
00:17:02.670 --> 00:17:08.640
Just like as we saw in the slide, let's also print a value here.

215
00:17:08.640 --> 00:17:10.710
So let's just print off one here.

216
00:17:11.520 --> 00:17:14.190
So we are creating an array object here.

217
00:17:14.190 --> 00:17:21.060
So this is an object reference and we are passing this so the memory address gets passed to go.

218
00:17:21.390 --> 00:17:27.750
So at this point, both this array variable and this array will reference the same object and we are

219
00:17:27.750 --> 00:17:31.500
updating the value of one of the elements to 22.

220
00:17:31.590 --> 00:17:35.760
And so it should also be reflected when we print here, right?

221
00:17:35.760 --> 00:17:38.040
So that's what we saw in the slide.

222
00:17:38.040 --> 00:17:40.320
So let's go ahead and compile and run this.

223
00:17:43.020 --> 00:17:43.590
It's fine.

224
00:17:46.910 --> 00:17:47.740
Okay, that's it.

225
00:17:47.750 --> 00:17:53.930
So within the method, we are printing the values one and two and we updated it to 22 and we are printing

226
00:17:53.930 --> 00:17:56.660
this value in the calling environment.

227
00:17:56.900 --> 00:18:00.770
So we are printing it here and it prints the newly updated value.

228
00:18:01.370 --> 00:18:04.580
So that's passed by value of object reference.

229
00:18:04.820 --> 00:18:09.650
So we are just passing the value of the memory address of the object.

230
00:18:09.650 --> 00:18:16.070
We are making a copy of it and it's being assigned here and that's passed by value and that's it.

231
00:18:16.100 --> 00:18:17.630
Thank you and happy coding.

