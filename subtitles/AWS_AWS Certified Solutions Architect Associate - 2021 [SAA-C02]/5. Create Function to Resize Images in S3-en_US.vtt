WEBVTT
1
00:00:02.340 --> 00:00:02.790
Hi guys.

2
00:00:02.790 --> 00:00:05.420
We've got a great use case to play with in this lab.

3
00:00:05.460 --> 00:00:11.640
What we're going to do is create an AWS Lambda function and an event source mapping on an S3

4
00:00:11.640 --> 00:00:19.530
bucket such that when users upload an image to that bucket it notifies Lambda S3 notifies Lambda

5
00:00:20.010 --> 00:00:25.410
and then Lambda executes the function which resize is the images and saves them into a separate bucket.

6
00:00:27.740 --> 00:00:34.640
At the same time a log event will be written by Lambda to CloudWatch logs.

7
00:00:34.710 --> 00:00:36.090
Now what's happening here.

8
00:00:36.090 --> 00:00:42.570
As you can see with the bucket, S3 is actually notifying Lambda.

9
00:00:42.600 --> 00:00:43.680
It's not the other way round.

10
00:00:43.680 --> 00:00:50.610
Lambda is not polling the bucket the bucket has an event notification which notifies Lambda and then

11
00:00:50.610 --> 00:00:52.460
Lambda executes the code.

12
00:00:52.500 --> 00:00:57.380
So this is what's known as a push notification and there's a lot of services.

13
00:00:57.390 --> 00:01:06.930
As you can see in this list here which work in this way. The opposite is a pull based notification where

14
00:01:06.930 --> 00:01:10.770
the event source is located on Lambda not here.

15
00:01:10.800 --> 00:01:17.520
So the configuration in this example is for the event notification to come from the from S3.

16
00:01:18.090 --> 00:01:26.040
Whereas in a pull based notification AWS Lambda is actually polling the service.

17
00:01:26.040 --> 00:01:27.810
And so it doesn't do that with S3.

18
00:01:27.990 --> 00:01:34.200
It does it with stream based services like Kinesis and DynamoDB and in our next lab we're actually

19
00:01:34.200 --> 00:01:37.510
going to look into a bit more detail on how that works.

20
00:01:37.710 --> 00:01:45.060
Now as I don't know what your background is in terms of coding what I'm doing in this lab is following

21
00:01:45.150 --> 00:01:49.580
one of the AWS articles and I'm actually going to follow this sort of word for word.

22
00:01:49.590 --> 00:01:52.170
I'm not going to make any changes to it at all.

23
00:01:52.230 --> 00:01:58.170
And the reason is some of you will be coming from a non-coding background and with Lambda it can be

24
00:01:58.170 --> 00:02:01.110
quite finicky if you don't get certain things right.

25
00:02:01.110 --> 00:02:04.230
And it's quite easy for developers to fix some of the issues.

26
00:02:04.440 --> 00:02:05.650
But if you're not a developer.

27
00:02:05.650 --> 00:02:11.970
The more complex the functions the harder it can be for people to actually resolve those issues and

28
00:02:11.970 --> 00:02:15.360
the solutions Architects Association exam is definitely not developer oriented.

29
00:02:15.360 --> 00:02:16.870
You don't need to know the code.

30
00:02:17.250 --> 00:02:22.250
So what I want to do is just follow through what's outlined in this tutorial.

31
00:02:22.250 --> 00:02:23.330
So if you do get stuck.

32
00:02:23.370 --> 00:02:28.830
If you have any problems you can refer to the link which will be available in the course downloads.

33
00:02:28.830 --> 00:02:30.170
So let's get started.

34
00:02:30.180 --> 00:02:37.950
The first thing we need to do is scroll down and we're going to copy all of this code and this will

35
00:02:37.950 --> 00:02:41.680
also be available in the download so you don't have to use this web page.

36
00:02:41.940 --> 00:02:46.260
And then I'm actually in that directory which we created in the previous lab.

37
00:02:46.270 --> 00:02:53.460
So I mean Lambda rest free and I'm going to do nano and I'm going to paste my code in and then I'm going

38
00:02:53.460 --> 00:03:02.820
to save my code as index.js. The next thing I need to do is run "npm install" and you should have

39
00:03:02.820 --> 00:03:03.860
NPM installed.

40
00:03:03.860 --> 00:03:06.060
You should have done that in the last lab as well.

41
00:03:06.060 --> 00:03:13.280
So head back there if you missed the instructions and we're just gonna run this and get some warnings.

42
00:03:13.290 --> 00:03:14.770
But I think that's okay.

43
00:03:14.910 --> 00:03:20.730
And what we need to do next is create a zip file and this is going to be our deployment package.

44
00:03:20.730 --> 00:03:32.040
So we run zip function.zip and then put a dot and if you look into the directory now we should

45
00:03:32.040 --> 00:03:37.010
have our function.zip so we have our package ready.

46
00:03:37.010 --> 00:03:43.730
And what we need to do before we run any commands here is go back over to the console and we're going

47
00:03:43.730 --> 00:03:47.630
ahead S3 and create our buckets.

48
00:03:47.630 --> 00:03:54.140
So I've already created mine ahead of time and what I've done is I've called it DCC-images dash

49
00:03:54.240 --> 00:03:57.880
20 20 20 and then you need another bucket.

50
00:03:57.890 --> 00:04:04.220
That's exactly the same name but we've resigned on the end and that's all you need to do.

51
00:04:04.250 --> 00:04:11.450
And then what I've got is I've got this image and it's a happy face image and you'll find this.

52
00:04:11.450 --> 00:04:14.690
This is also part of the instructions that we're following.

53
00:04:14.690 --> 00:04:17.270
Also it's available in the course downloads.

54
00:04:17.270 --> 00:04:18.980
And so this is what it actually looks like.

55
00:04:18.980 --> 00:04:23.620
So it's a it's a happy person and it's a full sized image.

56
00:04:24.770 --> 00:04:32.410
So let's head back to the command line and we have a command run so I've already formulated this command.

57
00:04:32.450 --> 00:04:36.170
It's an AWOL CLIA mine that's going to create our function.

58
00:04:36.170 --> 00:04:38.690
So it's AWOL slammed a create function.

59
00:04:38.810 --> 00:04:42.380
We give the function a name and it's going to be called Create thumbnail.

60
00:04:42.380 --> 00:04:44.000
We then tell it where our file is.

61
00:04:44.000 --> 00:04:49.820
This is the function.zip file which is created and that we then sell at the type of handler to use

62
00:04:50.030 --> 00:04:57.110
index or handler the runtime to use the time out the memory size and then the role.

63
00:04:57.110 --> 00:05:05.270
So the key thing you need to get here is your ARN for your Lambda S3 role so you can go into IAM and

64
00:05:05.270 --> 00:05:10.010
copy your ARN and paste it in and then we should be added just hit enter

65
00:05:13.050 --> 00:05:15.090
so it looks like it's credit our function.

66
00:05:15.090 --> 00:05:23.700
And if we head over to Lambda and let's just go up a level here to functions and sure enough we've got

67
00:05:23.700 --> 00:05:30.940
our new function here create from now and so we can see that we've got logging configured here and Amazon

68
00:05:30.940 --> 00:05:36.670
s free will have some get objects and put object permissions to the permissions are set up there and

69
00:05:36.670 --> 00:05:44.170
then if we look in the actual function itself we can see the various modules and the code.

70
00:05:44.200 --> 00:05:49.720
So what we want to do now is test the function and the way we do this is I'm going back to this web

71
00:05:49.720 --> 00:05:50.250
page.

72
00:05:50.260 --> 00:05:59.650
So we need to take this code and copy that to our clipboard and then we'll go over and we'll use nano.

73
00:05:59.650 --> 00:06:05.370
We're going to paste the code in we're going to go up to where we can see source bucket.

74
00:06:05.380 --> 00:06:07.840
There's two instances of source bucket.

75
00:06:07.840 --> 00:06:17.880
So if we just backspace this out I'm going to grab my bucket name.

76
00:06:18.050 --> 00:06:25.160
Copy that to my clipboard and then I can paste that in and then just go up here to the other instance

77
00:06:25.220 --> 00:06:36.660
source bucket backspace died out and save it and paste it and then let's save this as inputs file with

78
00:06:36.660 --> 00:06:39.050
the capital where dot takes a

79
00:06:41.980 --> 00:06:45.730
and then we can run a command to actually invoke the function.

80
00:06:45.730 --> 00:06:51.100
So we're going to run aws Lambda invoke function name and we give it the create thumbnail function

81
00:06:51.100 --> 00:06:57.370
name the invocation type is event the payload file is the input file and then it's output file that

82
00:06:57.370 --> 00:07:02.370
takes t and we just hit enter and we get a status code to 0 2.

83
00:07:02.380 --> 00:07:11.600
Now let's head over to S3 and go in our resized bucket and if we refresh that here it is.

84
00:07:11.600 --> 00:07:19.050
So we've now got this file I'm going to download this one and drag it onto the screen and say Now you

85
00:07:19.050 --> 00:07:22.160
can see we have this resized image.

86
00:07:22.260 --> 00:07:26.360
Now what we've done to this point is we've run a test event but we don't actually have a trigger.

87
00:07:26.370 --> 00:07:29.790
So there's nothing that's going to cause this to happen automatically.

88
00:07:29.820 --> 00:07:35.350
So the next thing to do is to actually configure the trigger so that every time we upload something

89
00:07:35.350 --> 00:07:40.470
to the S3 bucket the Lambda function is automatically invoked.

90
00:07:40.470 --> 00:07:46.260
So we need to head over to our command line again now and we need to run this command and this is going

91
00:07:46.260 --> 00:07:51.960
to allow permission it's going to give permission to Lambda to run our function.

92
00:07:51.960 --> 00:07:58.860
So it's aws Lambda add permission we provide the function name we provide the principal as S3 to Amazon

93
00:07:58.960 --> 00:08:07.290
aws.com the statement I.D. is a value that you can create and then we have the action Lambda invoke

94
00:08:07.290 --> 00:08:15.180
function and then we have the source ARN and in here you basically have your bucket name and then

95
00:08:15.180 --> 00:08:23.420
we have source account and you need to have your account number and then we hit enter.

96
00:08:23.610 --> 00:08:30.450
And so that's being created and we now need to go back to the Lambda console and we need to add our

97
00:08:30.450 --> 00:08:30.900
trigger.

98
00:08:31.530 --> 00:08:33.300
So we're going to add a trigger.

99
00:08:33.300 --> 00:08:40.170
We're going to head down and choose S3 we are going to select our bucket and it's automatically selected

100
00:08:40.170 --> 00:08:44.130
for me and we could also enter a prefix or suffix.

101
00:08:44.130 --> 00:08:49.110
We're not going to now but that might help for instance if you are saving back into the same bucket

102
00:08:49.110 --> 00:08:57.900
in a different file format then you could limit it to jpegs so let's click add and we now have our

103
00:08:57.900 --> 00:09:08.630
trigger so let's head over to S3 and I'm going to go back into my source bucket and what I want to do

104
00:09:08.630 --> 00:09:15.290
is just upload a couple of files so I'm just gonna head into a directory here where I've got a couple

105
00:09:15.290 --> 00:09:26.580
of the images we were using earlier in this in this course and choose click upload and now let's head

106
00:09:26.580 --> 00:09:32.070
over to our resized bucket and we refresh.

107
00:09:32.090 --> 00:09:32.750
And there we go.

108
00:09:32.750 --> 00:09:35.870
We've got our resized files.

109
00:09:35.870 --> 00:09:45.450
So if I for instance take one of these and let's just download that file and drag it onto the screen

110
00:09:45.480 --> 00:09:49.950
and you know this is one that we had earlier in the in the course and you can say it's definitely been

111
00:09:50.070 --> 00:09:51.870
reduced in size now.

112
00:09:52.050 --> 00:09:53.390
So that's it for this lab guys.

113
00:09:53.490 --> 00:09:54.240
Let's have a look.

114
00:09:54.240 --> 00:10:01.380
Back in the diagram to see what we've built so we've now built this capability where a user can upload

115
00:10:01.380 --> 00:10:08.820
a j peg image to a bucket and then an event notification notifies Lambda that this has happened and

116
00:10:08.820 --> 00:10:15.810
Lambda executes some code which goes and picks up that image resize it and then saves it into this bucket.

117
00:10:16.260 --> 00:10:21.240
And then we've actually got some events that go to CloudWatch logs in fact let's look in CloudWatch

118
00:10:21.240 --> 00:10:23.500
logs and see what's been logged.

119
00:10:23.520 --> 00:10:31.450
So we've got a monitoring view logs in CloudWatch logs and then let's choose the latest which is going

120
00:10:31.450 --> 00:10:32.610
to be this one here.

121
00:10:33.150 --> 00:10:41.760
And so now you can see that you've got a Lambda execution and you can see all the information here and

122
00:10:41.760 --> 00:10:50.250
then you'll get the successfully resized image and you can see the name of the image that's being resized

123
00:10:50.640 --> 00:10:55.560
so and you'll see that happening a couple of times for each of those images that we uploaded so that

124
00:10:55.560 --> 00:10:56.320
all looks great.

125
00:10:56.730 --> 00:10:59.010
So we've we've built this out nicely.

126
00:10:59.010 --> 00:11:05.450
And what we're going to do in the next lab put together a use case with DynamoDB.

127
00:11:05.460 --> 00:11:12.090
Now if you want to get rid of your configuration you can just go to Lambda, go to functions, and for each

128
00:11:12.090 --> 00:11:17.210
of the functions we didn't clean up the one for the last lab, you just go in and delete it.

129
00:11:17.280 --> 00:11:21.960
Remember you're not going to be paying for this unless it's actually executing.

130
00:11:21.960 --> 00:11:30.200
And the other thing you can then do is go to S3 and just delete your buckets and if you want to you

131
00:11:30.200 --> 00:11:33.800
can then also go in and delete the role from IAM

