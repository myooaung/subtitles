WEBVTT
1
00:00:05.070 --> 00:00:11.670
So listen, we're going to look at service control policies, CEP's, CEP's, a really great tool to

2
00:00:11.700 --> 00:00:17.150
limit the available permissions in the accounts that we have in our organization.

3
00:00:17.430 --> 00:00:20.170
So let's have a look at a bit of detail about what that means.

4
00:00:20.610 --> 00:00:23.880
So we have an organization in that organization.

5
00:00:23.880 --> 00:00:29.400
We've created a management account and the management account is at the top of the structure.

6
00:00:29.550 --> 00:00:35.460
So there is a hierarchy that we can form and the management account is always at the root of that hierarchy

7
00:00:36.300 --> 00:00:38.430
now attached to the root.

8
00:00:38.430 --> 00:00:45.780
Here we have a service control policy and that service control policy has a statement which gives the

9
00:00:45.780 --> 00:00:49.040
effects of allow action star resource star.

10
00:00:49.290 --> 00:00:55.650
So using wild cards there, it's allowing everything, every API action on every resource.

11
00:00:55.980 --> 00:00:59.860
The CEP's control the maximum available permissions.

12
00:01:00.180 --> 00:01:06.260
So in this case, the available permissions are all permissions because everything is being allowed

13
00:01:06.510 --> 00:01:06.720
now.

14
00:01:06.720 --> 00:01:11.080
You still need to have AYAM permissions to actually do something.

15
00:01:11.490 --> 00:01:13.680
So think of these as two different things.

16
00:01:13.680 --> 00:01:19.290
The ayam permission is what is giving you the permissions, the privileges to be able to perform an

17
00:01:19.290 --> 00:01:24.710
action and then the SEP controls whether you're allowed to in that particular account.

18
00:01:25.170 --> 00:01:29.520
Now users in the management account itself are not restricted by CEP's.

19
00:01:29.520 --> 00:01:33.390
So even if you have Dinni rules, they won't be denied.

20
00:01:33.480 --> 00:01:36.560
You can apply them to manage the management accounts itself.

21
00:01:37.050 --> 00:01:42.780
And this is one reason why there are best practice configurations where you don't create all your users

22
00:01:42.780 --> 00:01:43.910
in the management account.

23
00:01:44.280 --> 00:01:50.280
Now we are creating users in our management account in this particular course, but the reason is otherwise

24
00:01:50.280 --> 00:01:54.750
we need a separate identity account as well as our production and development accounts.

25
00:01:55.110 --> 00:01:56.840
So it does get a bit complicated.

26
00:01:57.060 --> 00:01:59.430
We will create our own users in the management account.

27
00:01:59.430 --> 00:02:04.710
But just bear in mind that the best practice would be that you create them in a different account so

28
00:02:04.710 --> 00:02:07.740
that you can apply CEP's to those users.

29
00:02:08.940 --> 00:02:14.850
Now there's also something called a tax policy so you can apply a tax policy to an organizational unit

30
00:02:14.850 --> 00:02:16.190
as well as an SEPI.

31
00:02:16.770 --> 00:02:17.670
So this is a no.

32
00:02:17.670 --> 00:02:21.750
You the organizational unit forms as part of the hierarchy.

33
00:02:21.870 --> 00:02:27.360
You have the route and then you create your own use underneath it and you put your accounts in those

34
00:02:27.360 --> 00:02:32.500
organizational units and then you apply your tax policies and your service control policies.

35
00:02:32.500 --> 00:02:33.990
And there's a couple of other types as well.

36
00:02:33.990 --> 00:02:40.680
We'll see that in the console shortly type policies or about standardizing, forcing standardization

37
00:02:40.680 --> 00:02:42.840
of tasks that you apply to your resources.

38
00:02:43.110 --> 00:02:46.320
So let's say we create some more organizational units here.

39
00:02:46.980 --> 00:02:52.650
We've got one with our development accounts in it, and then we've got another organizational unit and

40
00:02:52.650 --> 00:02:54.450
that has our production account.

41
00:02:54.870 --> 00:03:00.930
So you can see we have a hierarchy, we have the routes and o you and then another underneath it.

42
00:03:01.200 --> 00:03:03.660
And at this level we have to use.

43
00:03:04.650 --> 00:03:12.330
Now, we can then apply service control policies to those organizational units now in this case, what

44
00:03:12.330 --> 00:03:18.270
happens is we have a Dinni rule, so there's a Dinni for the easy to run instances.

45
00:03:18.690 --> 00:03:26.790
And what it's doing is it's saying you're not allowed to run easy to instances unless the T micro type

46
00:03:26.790 --> 00:03:27.480
is being used.

47
00:03:27.490 --> 00:03:34.890
So there's a condition where the condition says that the string does not equal to micro so that Dinni

48
00:03:34.890 --> 00:03:42.180
takes effect as if the string here is not too micro and that string is the easy to instance type.

49
00:03:42.480 --> 00:03:48.450
So when you perform an API action, in this case, the run instances action, you've got to tell it

50
00:03:48.450 --> 00:03:50.370
what type of instance you want to run.

51
00:03:50.940 --> 00:03:58.560
And if you specify T to micro, then the string does equal to micro and therefore the Dinni policy won't

52
00:03:58.560 --> 00:03:59.230
take effect.

53
00:03:59.700 --> 00:04:05.310
So this means that in the development account, users can only launch two micro instances.

54
00:04:06.510 --> 00:04:11.580
Now, what about the production account, the production account doesn't have an ACP applying to it,

55
00:04:12.210 --> 00:04:16.710
and we know that this particular policy here is actually attached at all levels.

56
00:04:17.070 --> 00:04:19.810
So by default, this policy is attached.

57
00:04:19.860 --> 00:04:24.500
It flows down through the hierarchy into these different organizational units.

58
00:04:24.900 --> 00:04:26.850
And so this is an explicit allow.

59
00:04:27.660 --> 00:04:31.890
But actually the explicit deny will always take precedence.

60
00:04:32.340 --> 00:04:36.540
So producers can only launch two micro instances.

61
00:04:36.750 --> 00:04:42.660
They're basically getting the same permissions as a development account, and that is because the explicit

62
00:04:42.660 --> 00:04:48.390
deny will always override and allow and you must be allowed at all levels.

63
00:04:48.810 --> 00:04:52.500
But a deny will override an explicit allow.

64
00:04:52.520 --> 00:04:58.870
So deny any level above in the hierarchy is going to mean a deny here in the hierarchy.

65
00:04:59.700 --> 00:05:01.380
So that's how I CEP's work.

66
00:05:01.710 --> 00:05:05.850
The inheritance thing can get a little bit complicated, but we're going to look at that in some more

67
00:05:05.850 --> 00:05:11.300
detail and we're going to also do some hands on exercises to see CEP's in action.

68
00:05:12.000 --> 00:05:13.120
So I hope that is useful.

69
00:05:13.140 --> 00:05:14.490
I'll see you in the next lesson.

