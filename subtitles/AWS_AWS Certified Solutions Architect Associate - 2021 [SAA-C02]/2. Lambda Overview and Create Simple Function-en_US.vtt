WEBVTT
1
00:00:02.570 --> 00:00:03.120
Hi guys.

2
00:00:03.140 --> 00:00:10.370
In this lab we're going to talk about AWS Lambda. AWS Lambda is a compute service that allows you

3
00:00:10.370 --> 00:00:12.700
to run code as functions.

4
00:00:12.740 --> 00:00:16.790
So what is a function where you create a function in AWS Lambda.

5
00:00:16.790 --> 00:00:22.670
And it basically incorporates some configuration and then a piece of code and then you can run that

6
00:00:22.670 --> 00:00:23.630
code.

7
00:00:23.660 --> 00:00:27.980
Now it's a serverless technology so that means there's no service to manage.

8
00:00:28.040 --> 00:00:34.610
You literally just create your code add it to a function and then that function can be run and it can

9
00:00:34.610 --> 00:00:37.380
be run in response to certain triggers.

10
00:00:37.460 --> 00:00:42.850
And this diagram which in no means is supposed to represent any kind of real solution.

11
00:00:42.920 --> 00:00:48.050
It's just something I threw together to try and give you an idea of the kinds of things you can do with

12
00:00:48.050 --> 00:00:48.870
Lambda.

13
00:00:48.950 --> 00:00:57.110
For instance you might have users who are using a REST API to upload some data or modify some data using

14
00:00:57.110 --> 00:01:03.770
API Gateway then API Gateway can integrate with Lambda and execute that information so it can take those

15
00:01:03.950 --> 00:01:10.370
modification requests and execute them perhaps to update a DynamoDB table and it gives you the

16
00:01:10.370 --> 00:01:17.810
chance to have your own custom code to manipulate that data in some way you could then have another

17
00:01:17.810 --> 00:01:24.080
Lambda function that polls that dynamoDB database and when it finds some changes in that database

18
00:01:24.470 --> 00:01:28.700
it has its own custom code which then writes that data to a bucket.

19
00:01:28.700 --> 00:01:31.440
Again it might manipulate that data in some way.

20
00:01:31.550 --> 00:01:38.660
For instance it might add additional metadata to the object before it's stored in S3.

21
00:01:38.660 --> 00:01:45.200
Similarly you can have AWS Lambda writing events to CloudWatch Logs and you can also have cloud

22
00:01:45.200 --> 00:01:45.950
watch events.

23
00:01:45.950 --> 00:01:51.620
Then sending a trigger to an AWS Lambda function which then might send out a notification to

24
00:01:51.620 --> 00:01:53.990
someone using SNS.

25
00:01:53.990 --> 00:01:56.190
So lots and lots of things you can do here.

26
00:01:56.330 --> 00:02:00.000
And it actually integrates with a lot of different AWS services.

27
00:02:00.020 --> 00:02:05.990
Now the best way to learn this is to go over to the console and what we're going to do is we're going

28
00:02:05.990 --> 00:02:12.770
to try very very simple function in this lab which is just creating a simple Hello World function that

29
00:02:12.770 --> 00:02:15.360
writes an event to CloudWatch Logs.

30
00:02:15.410 --> 00:02:21.360
So very simple but we'll just get familiar with the interface. So here I am in AWS Lambda.

31
00:02:21.360 --> 00:02:31.720
You can find Lambda and compute right here and what we're going to do is just create a function and

32
00:02:31.720 --> 00:02:37.450
you'll see that there's a few options here so you can offer from scratch you can use a blueprint and

33
00:02:37.460 --> 00:02:39.050
there's lots of blueprints here.

34
00:02:39.130 --> 00:02:45.250
So you might want to go in here and search for instance for S3 and just hit enter and then you get a

35
00:02:45.250 --> 00:02:51.370
few options where you've got some pre configured blueprints that allow you to do certain things of S3

36
00:02:51.880 --> 00:03:01.430
or you might look for Kinesis and again there's a few blueprints and there for Kinesis. Similarly you

37
00:03:01.430 --> 00:03:09.200
can also browse the service application repository and you'll find blueprints here which users have

38
00:03:09.200 --> 00:03:14.750
uploaded to AWS. What we're going to do is just do the author from scratch here and we're actually going

39
00:03:14.750 --> 00:03:19.700
to follow through and do exactly what they say here start with a simple hello world example and we're

40
00:03:19.700 --> 00:03:26.300
just going to call it my function and we're going to leave all these parameters as they are now for

41
00:03:26.300 --> 00:03:27.200
runtime.

42
00:03:27.200 --> 00:03:36.320
You'll see here that you can use quite a few different languages and it's key for the exam to know which

43
00:03:36.320 --> 00:03:38.200
languages are supported.

44
00:03:38.210 --> 00:03:39.650
So here you've got .net,

45
00:03:39.650 --> 00:03:40.840
Go, java,

46
00:03:40.940 --> 00:03:43.760
NodeJS, Python, and Ruby.

47
00:03:43.760 --> 00:03:46.700
And then you got various different versions.

48
00:03:46.850 --> 00:03:55.070
You can also then choose different execution role. So you can configure which IAM roles are used to run

49
00:03:55.070 --> 00:03:57.020
your functions.

50
00:03:57.020 --> 00:03:59.410
And what we're gonna do here is we're just going to leave it.

51
00:03:59.710 --> 00:04:02.720
And what Lambda will do is it will actually create the role for us.

52
00:04:03.050 --> 00:04:04.790
So that's all we need to do.

53
00:04:04.790 --> 00:04:10.700
Let's we just put in the name and click right function and it's usually quite quick to create your function

54
00:04:10.760 --> 00:04:17.660
and then you end up on this page and what we can see here essentially you've got the actual function

55
00:04:17.660 --> 00:04:23.820
itself and if you click on the function you'll then find that you can see the code down here.

56
00:04:23.960 --> 00:04:26.360
It's also added CloudWatch Logs.

57
00:04:26.360 --> 00:04:33.150
So it's able now to to log information to CloudWatch Logs and you can see some information about the

58
00:04:33.150 --> 00:04:41.330
ARNs that it's actually going to log events to and then on the left here you have triggers.

59
00:04:41.660 --> 00:04:45.200
A trigger is a way of invoking a Lambda function.

60
00:04:45.200 --> 00:04:50.900
And as you can see there's lots of different AWS services that you can use with Lambda.

61
00:04:50.900 --> 00:04:57.290
And so there are two ways that these work. Either Lambda polls the service or the service polls Lambda.

62
00:04:57.310 --> 00:05:03.170
So either a kind of push or pull and we'll talk about the differences and which services work which way

63
00:05:03.170 --> 00:05:06.300
round as we get further into the labs in this section.

64
00:05:06.650 --> 00:05:09.080
And you also see there's some partner event sources here.

65
00:05:09.080 --> 00:05:11.530
And these are powered by Amazon event bridge.

66
00:05:11.570 --> 00:05:14.640
So there's some third party options here as well.

67
00:05:14.900 --> 00:05:16.860
In this case we don't need to add anything.

68
00:05:17.030 --> 00:05:22.650
If you then click my function you can come down here and see the code and you can see which runtime

69
00:05:22.660 --> 00:05:23.930
is being used.

70
00:05:24.080 --> 00:05:29.840
And as a couple of options here you can edit in line or you can go and upload a zip file or you can

71
00:05:29.840 --> 00:05:33.580
even choose to pull a zip file from s free.

72
00:05:33.680 --> 00:05:37.920
So a few different ways you can enter your code.

73
00:05:38.020 --> 00:05:40.600
We then have environment variables tags.

74
00:05:40.660 --> 00:05:46.600
We can see the execution role that's being configured in this case is actually created a role in IAM

75
00:05:46.600 --> 00:05:48.130
for us.

76
00:05:48.130 --> 00:05:53.140
And then under basic settings you can configure the resources that are allocated to your function and

77
00:05:53.140 --> 00:05:54.750
you do that in terms of memory.

78
00:05:54.760 --> 00:05:59.950
And then the CPU is added proportional to the amount of memory that you allocate.

79
00:05:59.950 --> 00:06:03.250
And this goes up in 64 megabyte increments.

80
00:06:03.250 --> 00:06:10.310
Right the way up to three thousand eight megabytes. We can leave this down at the minimum.

81
00:06:10.310 --> 00:06:11.970
You then have a timeout.

82
00:06:12.170 --> 00:06:14.470
And by default it's three seconds.

83
00:06:14.480 --> 00:06:18.310
That means that your function won't run more than three seconds.

84
00:06:18.380 --> 00:06:26.560
You can update this to nine hundred or fifteen minutes and we're just going to leave it at the default.

85
00:06:26.560 --> 00:06:31.270
So let's just zero that out and put this back to three.

86
00:06:31.310 --> 00:06:37.520
You can also connect to your functions to resources inside your VPC and if you do that then you can

87
00:06:37.520 --> 00:06:40.820
add subnets and security groups to the configuration.

88
00:06:40.820 --> 00:06:48.260
We don't need to do that now concurrency is something which can come up in the exam.

89
00:06:48.260 --> 00:06:54.920
What this means is you can have concurrent executions of your function running so multiple executions

90
00:06:54.920 --> 00:06:57.870
of your function running in running at any one time.

91
00:06:58.070 --> 00:07:03.590
And if you do that you haven't have 1000 concurrency limit in your account.

92
00:07:03.590 --> 00:07:09.410
And then you also are able to specify within a function that it can only run for instance two concurrent

93
00:07:09.410 --> 00:07:11.090
executions.

94
00:07:11.210 --> 00:07:15.560
So this is a thing that you might want to use if you need to limit the scalability of your function

95
00:07:18.750 --> 00:07:25.230
so we don't need to change anything else what we can do now is go configure test events and by default

96
00:07:25.230 --> 00:07:27.070
it comes up with this hello world.

97
00:07:27.180 --> 00:07:34.730
We just need to give it a name so let's just give it hello world and we can click Create and we can

98
00:07:34.730 --> 00:07:42.120
click on Save and so what you can do is you can have up to 10 test events so you can configure different

99
00:07:42.120 --> 00:07:45.600
types of tests and you can go through this dropdown box

100
00:07:49.280 --> 00:07:55.790
go through this dropdown box and find lots of templates here that you could use which have some code

101
00:07:55.880 --> 00:08:03.640
already in there for testing out certain functions so let's click cancel on there and let's just click

102
00:08:03.640 --> 00:08:09.240
test and so it says it succeeded and we can see a.

103
00:08:09.300 --> 00:08:14.990
The details here with a status code we can see a summary that tells us some information about you know

104
00:08:15.130 --> 00:08:20.320
what's being billed so you actually get billed for the amount of time that the Lambda function is running

105
00:08:20.650 --> 00:08:25.680
and the amount of memory that's been allocated to the function.

106
00:08:25.860 --> 00:08:30.960
You can then see some information in the log output of what exactly has been written to CloudWatch

107
00:08:30.960 --> 00:08:39.230
Logs and if you come down to monitoring you can then see some more information on the functions if we

108
00:08:39.230 --> 00:08:41.150
hit test a few times

109
00:08:44.080 --> 00:08:46.890
we should then get a bit more data turning up.

110
00:08:47.110 --> 00:08:53.440
We can also scroll down here and have a look at what is being logged into CloudWatch Logs and it shows

111
00:08:53.440 --> 00:08:58.480
us the recent invocations and the most expensive invocations in gigabytes seconds

112
00:09:02.250 --> 00:09:10.460
so that means the amount of memory and the amount of seconds that are being billed if we scroll up a

113
00:09:10.460 --> 00:09:18.100
little bit here we can click this button that says you in CloudWatch Logs and this takes us straight

114
00:09:18.100 --> 00:09:20.530
into cloud watch and it takes us into logs.

115
00:09:20.530 --> 00:09:26.350
Now we could find that just by clicking on logs here and then choose the name of your function and then

116
00:09:26.350 --> 00:09:30.090
you can go into the log stream and you can see some information.

117
00:09:30.130 --> 00:09:32.920
So each invocation will have a start.

118
00:09:33.080 --> 00:09:37.380
It then has an end and then it has a report

119
00:09:40.340 --> 00:09:45.500
and these can be obviously more descriptive depending on what you're writing in CloudWatch Logs. So

120
00:09:45.500 --> 00:09:50.960
that's a really basic overview of Lambda as you can see from this diagram here there's tons you

121
00:09:50.960 --> 00:09:51.590
can do with it.

122
00:09:52.040 --> 00:09:55.630
And we're going to run through a couple of examples in this section.

123
00:09:55.790 --> 00:10:00.830
But before we do that in the next lab I want to talk about some of the architectural considerations

124
00:10:00.830 --> 00:10:08.090
between using Lambda vs. other technologies in the compute area such as ECS and EC2.

