1
00:00:05,080 --> 00:00:06,610
Hello and welcome to this lesson.

2
00:00:07,210 --> 00:00:13,210
There are quite a few circumstances where we might want to be able to connect machines that we're running

3
00:00:13,390 --> 00:00:18,520
in different vehicles together using IPv4 or IPv6.

4
00:00:18,970 --> 00:00:24,250
So for instance, we might have two pieces which could be in the same region that could be in a different

5
00:00:24,250 --> 00:00:26,050
region or even a different accounts.

6
00:00:26,590 --> 00:00:33,580
And we want the easy two instances in those two pieces to be able to communicate using private IPv4

7
00:00:33,580 --> 00:00:36,370
addresses or maybe IPv6 addresses.

8
00:00:36,970 --> 00:00:40,030
Now, a way that we can do that is to use VPC pairing.

9
00:00:40,660 --> 00:00:46,980
BPC pairing allows routing for those addresses internally between those VPC.

10
00:00:46,990 --> 00:00:50,860
So when I say internally, what I mean is it's not going out to the internet.

11
00:00:51,280 --> 00:00:58,120
It's using the IWC global network to route traffic between the VPC, so it never touches the internet.

12
00:00:58,450 --> 00:01:07,060
It does get encrypted when it moves between regions, and it uses private IP full and also IPv6 addresses.

13
00:01:07,360 --> 00:01:09,670
So it's a great technology for lots of use cases.

14
00:01:09,820 --> 00:01:12,370
Let's have a look at how we can use VPC pairing.

15
00:01:13,090 --> 00:01:21,460
So let's say we have a VPC, this is VCA, and then we have another VPC, VPC, b, and we want to be

16
00:01:21,460 --> 00:01:24,300
able to route connections between these two.

17
00:01:24,310 --> 00:01:30,850
So we've got two instances maybe Audeze databases, even lambda functions, anything that communicates

18
00:01:30,850 --> 00:01:38,170
inside a VPC, and we want to be able to connect those resources together using private IPv4 addresses.

19
00:01:38,830 --> 00:01:45,040
So what we can do is establish a VPC pairing connection between those two pieces.

20
00:01:45,700 --> 00:01:51,940
So this will enable routing using private IPv4 addresses or IPv6 addresses.

21
00:01:52,300 --> 00:01:56,500
Now, the side of blocks full of Epix's must not overlap.

22
00:01:57,070 --> 00:02:02,530
So this is a very important consideration when you're choosing the side of blocks to use your VP CS,

23
00:02:02,890 --> 00:02:08,110
because even if they're in different accounts, you might someday want to connect your pieces together.

24
00:02:08,410 --> 00:02:13,660
And if they have the same side of blocks or side blocks to overlap with each other, then that won't

25
00:02:13,660 --> 00:02:14,080
work.

26
00:02:14,620 --> 00:02:16,690
So you must have side of blocks that don't overlap.

27
00:02:17,500 --> 00:02:22,930
Now what if we have another VP, CPPCC and VPC, a fourth one?

28
00:02:23,320 --> 00:02:26,140
So they all have their own side, a block so looks good.

29
00:02:26,140 --> 00:02:28,750
We can definitely set up VPC pairing between these.

30
00:02:29,380 --> 00:02:30,130
So what we do?

31
00:02:30,400 --> 00:02:41,050
We establish a VPC pairing connection between PPK and VPC between VPC B and BPC D, and then with VPC

32
00:02:41,050 --> 00:02:42,880
C and BPC D.

33
00:02:43,390 --> 00:02:46,150
So we now have for pairing connection sets up.

34
00:02:46,690 --> 00:02:51,100
But the problem with BPC pairing is it doesn't support transitive pairing.

35
00:02:51,580 --> 00:02:57,370
Now what that means is, let's say we have resources in VPC II and it has a pairing connection with

36
00:02:57,370 --> 00:03:01,930
VPC, b, BPC B then has appeared in connection with VPC d.

37
00:03:02,350 --> 00:03:10,450
So does that mean the VPC A can communicate with resources and VPC d by going via the BBC?

38
00:03:10,690 --> 00:03:11,860
Well, no, it doesn't work.

39
00:03:12,040 --> 00:03:13,600
Transitive routing doesn't work.

40
00:03:13,990 --> 00:03:17,920
So what we actually have to do is set up two more pairing connections.

41
00:03:18,430 --> 00:03:26,050
We've now got a pairing connection between A and D and between B and C, so we've got a full mesh topology

42
00:03:26,650 --> 00:03:30,430
because VPC pairing doesn't support transitive relationships.

43
00:03:30,700 --> 00:03:34,570
We do need this full mesh, so that becomes quite a lot of connections.

44
00:03:34,840 --> 00:03:39,820
Now with these four episodes, it's not too bad, but you can imagine if you spread this out across

45
00:03:39,820 --> 00:03:41,890
a lot more VP CS soon.

46
00:03:41,890 --> 00:03:47,920
This full mesh topology means you've got a huge number of connections to set up and to manage, so it

47
00:03:47,920 --> 00:03:49,060
becomes a bit unwieldy.

48
00:03:49,060 --> 00:03:54,430
And there are other solutions which we're going to look at later on in the section and in sections to

49
00:03:54,430 --> 00:03:54,710
come.

50
00:03:55,450 --> 00:04:00,670
Now, as I mentioned before, the VP six can be in different accounts and they can be in different regions

51
00:04:00,670 --> 00:04:01,090
as well.

52
00:04:01,600 --> 00:04:04,990
Now, let's have a look in a bit more detail about how we set this up.

53
00:04:05,440 --> 00:04:08,350
So we've got region one and we've got Region two.

54
00:04:08,980 --> 00:04:13,570
So in this example, we've got two episodes in different regions could be in the same account or different

55
00:04:13,570 --> 00:04:15,700
accounts, and we want to pair them together.

56
00:04:16,570 --> 00:04:19,210
Now they each have their own side of blocks, which are unique.

57
00:04:19,210 --> 00:04:20,200
They're not overlapping.

58
00:04:20,200 --> 00:04:20,860
So that's good.

59
00:04:21,430 --> 00:04:22,870
And then we've got some subnets.

60
00:04:23,230 --> 00:04:28,510
Now these could be private or public subnet, because remember, it's the private addresses of the instances

61
00:04:28,720 --> 00:04:32,650
that will be used for the VPC to VPC communication.

62
00:04:33,490 --> 00:04:36,010
And we've got some instances running in these subnets.

63
00:04:36,190 --> 00:04:39,610
Now I'm showing public because we're going to set up a lab very much like this.

64
00:04:39,610 --> 00:04:45,100
It makes it easier for us to connect to our two instances if they're in public subnets.

65
00:04:46,090 --> 00:04:50,950
So we create a VPC pairing connection, and I'll show you how to do this in the console.

66
00:04:51,670 --> 00:04:55,060
Now, the next thing we need to do is set up our security groups.

67
00:04:55,390 --> 00:05:01,630
So let's say we want to use the ICMP protocol to send a ping request from one instance to another and

68
00:05:01,630 --> 00:05:02,890
the other, for instance, back again.

69
00:05:03,640 --> 00:05:09,220
Well, in that case, we have to set up a security group rules as well, and we can use the side of

70
00:05:09,400 --> 00:05:15,310
the other region so we can use the site of lockers to source and say that anything coming from that

71
00:05:15,310 --> 00:05:18,490
side a block is going to be allowed based on this rule.

72
00:05:18,880 --> 00:05:22,900
Now, another thing we have to set up for this to work is the root tables.

73
00:05:23,320 --> 00:05:30,130
And what we do is we have a destination rounds, which goes to the side, a block of the remote VPC,

74
00:05:30,760 --> 00:05:35,590
and we specify the pairing IDs when we set up the pairing connection will have a pairing I.D..

75
00:05:36,010 --> 00:05:37,720
I'm going to specify that as a target.

76
00:05:37,840 --> 00:05:43,660
And then we do the reverse on the other side so that the root table will send any traffic destined for

77
00:05:43,660 --> 00:05:49,000
this side, a block to the pairing connection and then it gets routed across to the correct free PC.

