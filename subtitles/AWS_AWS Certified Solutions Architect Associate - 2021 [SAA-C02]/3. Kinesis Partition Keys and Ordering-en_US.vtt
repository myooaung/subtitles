WEBVTT
1
00:00:01.990 --> 00:00:06.910
I'm now going to cover a topic that does come up in a few tricky exam questions.

2
00:00:07.630 --> 00:00:14.950
So what we have here on the screen is we have a Kinesis data stream, and within that stream we have

3
00:00:14.950 --> 00:00:15.360
Shahd.

4
00:00:15.380 --> 00:00:18.100
So we have four shots on the left.

5
00:00:18.100 --> 00:00:22.660
We have some producers and these two instances in this example.

6
00:00:23.200 --> 00:00:29.200
And on the right we have some two instances that are consuming from our stream.

7
00:00:30.130 --> 00:00:32.560
And each of those has a coworker.

8
00:00:32.570 --> 00:00:34.240
So the Kinesis Klein library.

9
00:00:34.480 --> 00:00:39.520
And you can connect from each of these workers into a separate shard.

10
00:00:40.090 --> 00:00:43.450
So what I want to cover is partition keys in ordering.

11
00:00:44.200 --> 00:00:52.230
So when your instance places its records onto a stream, it wants to specify a particular shard.

12
00:00:52.240 --> 00:00:59.140
And to do that, you use the record API and you use the partition key to specify which guard you want

13
00:00:59.140 --> 00:01:00.260
to place your record on.

14
00:01:00.970 --> 00:01:08.950
So easy to instance one might use to partition key for the first shard and then it might use the partition

15
00:01:08.950 --> 00:01:10.300
key for the second shot.

16
00:01:10.300 --> 00:01:15.010
And you now have records can placed onto different shards.

17
00:01:15.990 --> 00:01:22.350
You might then have instance five placing a record in the queue or on the Shard and then instanced to.

18
00:01:23.820 --> 00:01:28.650
Now, one of the things I haven't mentioned is which one of these will be processed first.

19
00:01:29.250 --> 00:01:35.490
Now, that's really up to your consumers, but also it's up to what's in the queue and which one comes

20
00:01:35.490 --> 00:01:35.960
out first.

21
00:01:35.970 --> 00:01:40.020
You can't guarantee ordering between two different shards.

22
00:01:40.960 --> 00:01:47.470
But when we place additional records into the stream, so here we two instance one has placed an additional

23
00:01:47.470 --> 00:01:55.600
record onto a shard within the Shard, the order will be maintained and we could then add additional

24
00:01:55.600 --> 00:01:56.260
records.

25
00:01:56.260 --> 00:01:59.620
And we know these two are going to have the same order maintained and so on.

26
00:02:00.190 --> 00:02:02.580
So that's just a quick example to show you.

27
00:02:02.860 --> 00:02:09.670
And just try and remember, for the exam, you might see some wording in the exam answers where you

28
00:02:09.670 --> 00:02:16.180
need to determine which answer is correct by understanding the fact that the order is maintained for

29
00:02:16.180 --> 00:02:16.660
records.

30
00:02:16.660 --> 00:02:17.530
We've been assured.

31
00:02:17.950 --> 00:02:21.940
Now, sometimes those exam questions might also have asked us.

32
00:02:22.450 --> 00:02:29.650
Now ask us does not guarantee order for standard cues.

33
00:02:29.950 --> 00:02:36.160
So ask us does guarantee the order when you use the fifth, the first in, first out here, but otherwise

34
00:02:36.160 --> 00:02:36.700
it doesn't.

35
00:02:37.120 --> 00:02:41.830
So remember the difference there of one answer says a US standard.

36
00:02:41.830 --> 00:02:46.270
Q And another is Kinesis data streams using partition keys.

37
00:02:46.660 --> 00:02:49.830
You know that we've been assured the order is going to be maintained.

38
00:02:50.200 --> 00:02:53.490
So if that's required by the question, that could be the correct answer.

