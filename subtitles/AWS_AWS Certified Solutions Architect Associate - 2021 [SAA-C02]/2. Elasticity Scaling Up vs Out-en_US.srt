1
00:00:05,270 --> 00:00:11,420
In this lesson, I want to help you to understand the differences between scaling up and scaling out.

2
00:00:11,630 --> 00:00:14,120
And this is all about what we call elasticity.

3
00:00:14,660 --> 00:00:17,720
So you might have heard this term before or scalability.

4
00:00:18,050 --> 00:00:23,570
Now the key difference between scalability and elasticity is with scalability.

5
00:00:23,570 --> 00:00:27,030
We're saying that we're going to add a certain amount of resources.

6
00:00:27,050 --> 00:00:32,150
So for example, if you have a hard drive in your computer and you need of some more storage space where

7
00:00:32,150 --> 00:00:36,080
you can buy another hard drive, plug it in and now you have a bit more space.

8
00:00:36,710 --> 00:00:38,510
That would be scalability.

9
00:00:38,810 --> 00:00:44,060
Now, elasticity means that when you no longer need the space anymore, it's going to automatically

10
00:00:44,060 --> 00:00:44,660
shrink back.

11
00:00:44,660 --> 00:00:48,710
It's elastic like an elastic band if you stretch it and then it contracts again.

12
00:00:49,340 --> 00:00:53,270
Now that wouldn't happen if you just bought a hard drive because now you've already bought it.

13
00:00:53,270 --> 00:01:00,920
So it's there now with the cloud, we can automatically scale things up and out and then back in again

14
00:01:00,920 --> 00:01:02,780
when we don't need as many resources.

15
00:01:03,140 --> 00:01:07,340
And that's one of the key benefits of the cloud because we're only paying for what we use.

16
00:01:07,580 --> 00:01:10,580
We're not paying for the underlying infrastructure layer.

17
00:01:10,850 --> 00:01:15,950
You can certainly scale your resources on premises, but you're always going to pay for the underlying

18
00:01:15,950 --> 00:01:16,310
layer.

19
00:01:16,550 --> 00:01:18,300
So that's a fixed cost.

20
00:01:18,350 --> 00:01:19,550
It's not a variable cost.

21
00:01:20,240 --> 00:01:23,840
So let's have a look at scaling up versus scaling out now.

22
00:01:23,840 --> 00:01:26,900
Scaling up is also known as vertical scaling.

23
00:01:27,170 --> 00:01:29,570
So here we have an easy to instance.

24
00:01:30,020 --> 00:01:33,530
The easy to instance has a certain amount of hardware.

25
00:01:34,250 --> 00:01:40,430
Now scaling up means that we add more hardware, we have more CPU's, we have more memory, more storage

26
00:01:40,430 --> 00:01:44,720
space, maybe some more network bandwidth or an additional adapter.

27
00:01:45,320 --> 00:01:47,780
So that would be scaling up scaling vertically.

28
00:01:47,990 --> 00:01:51,620
Essentially, we're adding resources to that instance.

29
00:01:51,950 --> 00:01:55,820
It's just one instance, but it's got more resources assigned to it.

30
00:01:56,030 --> 00:02:00,260
There's a bit of a limitation here in that you still have a single point of failure.

31
00:02:00,710 --> 00:02:05,660
Imagine you've got a really important application and it keeps becoming more popular.

32
00:02:06,110 --> 00:02:10,670
And so you add more resources, but it's just one instance.

33
00:02:10,880 --> 00:02:13,760
Now what happens if that instance fails for some reason?

34
00:02:14,060 --> 00:02:15,200
Well, now everything has gotten.

35
00:02:15,200 --> 00:02:17,540
So you've essentially got all your eggs in one basket.

36
00:02:17,930 --> 00:02:22,880
So another option is scaling out, also known as horizontal scaling.

37
00:02:23,450 --> 00:02:26,000
So here are applications becoming more popular.

38
00:02:26,510 --> 00:02:32,990
So we add another instance of the application and then another one and another one scaling out gives

39
00:02:32,990 --> 00:02:34,070
you more resiliency.

40
00:02:34,190 --> 00:02:35,990
You don't have all your eggs in one basket.

41
00:02:36,320 --> 00:02:38,000
You now have multiple baskets.

42
00:02:38,000 --> 00:02:42,500
And if any one of these fails, then the other ones can take over the load.

43
00:02:42,800 --> 00:02:46,400
With this model, you can add almost unlimited capacity.

44
00:02:46,700 --> 00:02:52,640
When you're scaling up, you can often reach a limit a ceiling as to how much resource you can assign

45
00:02:53,120 --> 00:02:53,870
with scaling out.

46
00:02:53,870 --> 00:02:55,360
That's not usually the case.

47
00:02:55,370 --> 00:02:57,770
You can keep scaling out again and again.

48
00:02:58,220 --> 00:03:01,190
So how do you do this with Amazon Resources?

49
00:03:01,490 --> 00:03:07,760
Well, for example, with EC2, we might have 80 to instance, so that's a certain instance.

50
00:03:07,760 --> 00:03:10,160
Type has a certain amount of CPU and RAM.

51
00:03:10,580 --> 00:03:16,700
In this case, it's a two micro with one VC CPU, a one gigabyte ram, so not a lot of resources.

52
00:03:17,150 --> 00:03:22,880
Now we can always change the instance type, and maybe we move it to a C five or X launch, which has

53
00:03:22,880 --> 00:03:25,850
got four VC CPUs and eight gigabytes of RAM.

54
00:03:26,570 --> 00:03:30,150
So now we have an instance with more resources.

55
00:03:30,170 --> 00:03:31,280
It's the same instance.

56
00:03:31,400 --> 00:03:32,960
We just change the instance type.

57
00:03:33,290 --> 00:03:36,090
So that's vertical scaling with horizontal scaling.

58
00:03:36,110 --> 00:03:38,570
We simply add more instances.

59
00:03:38,840 --> 00:03:44,120
So now we've got lots of these two micro instances, which means we have more capacity.

60
00:03:44,360 --> 00:03:47,000
So that's how you scale up and scale out.

61
00:03:47,390 --> 00:03:53,930
And in the next lesson, you'll learn about Amazon EC2 auto scaling, which enables you to launch and

62
00:03:53,930 --> 00:03:58,010
terminate instances and scale out and back in again automatically.

