WEBVTT
1
00:00:05.420 --> 00:00:10.940
In this lesson, we're going to get prepared for creating our load balances by crossing our target groups.

2
00:00:11.120 --> 00:00:16.070
And we're going to create two different target groups one for the Albi and one for the NHLBI.

3
00:00:16.400 --> 00:00:21.950
So back in the management console for two, if I scroll down to the bottom of the page here, you can

4
00:00:21.950 --> 00:00:24.830
see under load balancing, you've got target groups.

5
00:00:24.980 --> 00:00:27.290
So what we want to do is create a target group.

6
00:00:27.740 --> 00:00:33.890
So as you can see here, you can choose instances, IP addresses or lambda functions.

7
00:00:34.820 --> 00:00:41.480
Now, if you wanted to use microservices based architectures such as containers running on Docker or

8
00:00:41.480 --> 00:00:43.850
XE, then you might use IP addresses.

9
00:00:44.540 --> 00:00:48.470
We can use a lambda function if we have an eight as lambda function.

10
00:00:48.470 --> 00:00:49.370
We want a routing.

11
00:00:49.700 --> 00:00:56.480
We want to choose instances because we have auto scanning groups with two instances running and we want

12
00:00:56.480 --> 00:00:58.670
to distribute incoming connections to those.

13
00:00:59.540 --> 00:01:04.480
Now I'm going to call this one tJI Dash Ailbhe four protocol and pull.

14
00:01:04.490 --> 00:01:06.070
It's going to be fdcp.

15
00:01:06.440 --> 00:01:08.600
You can see we have several options here.

16
00:01:09.140 --> 00:01:15.740
Hastie's HTTPS is what we want to use with the ALP and faced ETP.

17
00:01:15.740 --> 00:01:17.150
The standard port is 80.

18
00:01:17.300 --> 00:01:19.360
I'm going to leave that protocol version.

19
00:01:19.370 --> 00:01:21.320
I'm going to leave as http one.

20
00:01:21.710 --> 00:01:24.080
I can then optionally change the health check.

21
00:01:24.410 --> 00:01:27.320
I'm happy with it being TCP and slash.

22
00:01:27.680 --> 00:01:35.090
You can specify custom paths and then the load balance is going to check that that path exists and is

23
00:01:35.090 --> 00:01:38.840
accessible and gets a return response of 200.

24
00:01:38.840 --> 00:01:40.160
That's a success code.

25
00:01:40.160 --> 00:01:43.850
We've up to show that that instance is healthy.

26
00:01:44.390 --> 00:01:46.820
I'm happy leaving it as it is with a slash.

27
00:01:47.780 --> 00:01:50.510
You can also change the health check settings.

28
00:01:50.720 --> 00:01:56.600
For example, you can set the healthy threshold and that determines the number of successful consecutive

29
00:01:56.600 --> 00:01:59.690
health checks before an instance is considered healthy.

30
00:02:00.020 --> 00:02:05.310
So I might lower that's a free, for example, in my instances will become healthy a bit faster.

31
00:02:05.630 --> 00:02:12.380
And you can see the interval here is 30 seconds, and what we're looking for here is a success code

32
00:02:12.380 --> 00:02:13.100
of 200.

33
00:02:13.100 --> 00:02:16.880
That's a typical success code for an fdcp request.

34
00:02:17.240 --> 00:02:18.500
Let's now click on next.

35
00:02:18.830 --> 00:02:23.300
I don't want to actually assign these instances to my auto scaling group.

36
00:02:23.300 --> 00:02:24.360
You can do that here.

37
00:02:24.380 --> 00:02:27.140
You can include as pending, I want to remove those.

38
00:02:27.500 --> 00:02:31.970
And the reason being is we're going to attach our target group to our auto scanning group.

39
00:02:32.720 --> 00:02:36.920
So let's just create this target group and we have our tag Albi.

40
00:02:37.580 --> 00:02:40.880
Now let's create one, and this one is going to be for the NLP.

41
00:02:41.030 --> 00:02:43.520
So I'm going to call it S.G., Dash and LP.

42
00:02:43.880 --> 00:02:50.030
This time the protocol is going to be TCP, but the port is going to be the same because I'm still going

43
00:02:50.030 --> 00:02:53.660
to have an HTP website running on my instance.

44
00:02:54.110 --> 00:03:00.140
But I have to use TCP because remember, the NHLBI does not understand HTP.

45
00:03:00.440 --> 00:03:06.350
We wouldn't be able to select this target group when creating a load balancer if we chose HTP.

46
00:03:07.070 --> 00:03:11.210
So with TCP selects it, I can also change the health check.

47
00:03:11.600 --> 00:03:13.910
Now the health check can be HTP.

48
00:03:13.910 --> 00:03:14.510
That's fine.

49
00:03:15.020 --> 00:03:20.720
The load balance of current routes based on HTP information, but it can make a connection request to

50
00:03:20.720 --> 00:03:21.410
our instance.

51
00:03:22.010 --> 00:03:28.520
So as with before, I'm just going to leave these options as they are, let's click on next and create

52
00:03:28.520 --> 00:03:29.330
our target group.

53
00:03:29.690 --> 00:03:30.250
So that's it.

54
00:03:30.260 --> 00:03:34.460
We now have two target groups, and we're going to use these in subsequent lessons.

