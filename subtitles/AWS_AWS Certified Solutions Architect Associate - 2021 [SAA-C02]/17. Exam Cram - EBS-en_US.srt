1
00:00:02,150 --> 00:00:07,610
Hi guys and welcome to another exam cram so we're starting off with the elastic block store.

2
00:00:07,770 --> 00:00:13,110
EBS volumes on network attached storage that you attach to your EC2 instances.

3
00:00:13,220 --> 00:00:14,990
And the data is persistent.

4
00:00:15,020 --> 00:00:21,380
So remember it exists independently of your EC2 instance you don't have to attach a volume to an

5
00:00:21,380 --> 00:00:21,830
instance.

6
00:00:21,830 --> 00:00:26,340
The data can be stored in any EBS volume without being attached to anything.

7
00:00:26,720 --> 00:00:29,320
You can attach multiple volumes to an instance.

8
00:00:29,420 --> 00:00:33,170
You cannot attach a volume to multiple instances though.

9
00:00:33,290 --> 00:00:39,740
For that you'd want to use your the elastic file system. EBS volume data is replicated across multiple

10
00:00:39,740 --> 00:00:41,900
servers in an availability zone.

11
00:00:43,200 --> 00:00:50,880
Volumes must be in the same AZ as the instances that you want to attached and to group EBS volumes

12
00:00:51,090 --> 00:00:53,240
are deleted on termination by default.

13
00:00:53,670 --> 00:00:56,910
Whereas anything extra you add is not deleted by default.

14
00:00:57,570 --> 00:01:05,370
So the behavior can be changed by altering the delay on termination attributes. Instance stores are for

15
00:01:05,370 --> 00:01:08,590
temporary non-persistent block level storage.

16
00:01:09,060 --> 00:01:16,410
So this is different to EBS. EBS is persistent storage but it is also a block storage system. An instance store can

17
00:01:16,410 --> 00:01:23,300
be a root device or an additional volume, it's located on disks that are physically attached to the

18
00:01:23,300 --> 00:01:24,110
host computer.

19
00:01:24,110 --> 00:01:31,900
So you get really high performance. Use cases are for temporary information that changes frequently

20
00:01:32,290 --> 00:01:38,270
so you might think buffers and caches and scratch data or other temporary content or for data that's

21
00:01:38,290 --> 00:01:41,560
replicated across a fleet of instances.

22
00:01:41,560 --> 00:01:43,330
Watch out for exam questions here.

23
00:01:43,360 --> 00:01:49,000
I've noticed instance store coming up a bit more often now and the type of scenario where it's really

24
00:01:49,000 --> 00:01:56,950
good is you might need some really high I/O some really high storage performance and the data is replicated

25
00:01:56,950 --> 00:01:58,990
across multiple instances.

26
00:01:58,990 --> 00:02:01,640
So every instance has a full copy of the data.

27
00:02:01,870 --> 00:02:04,930
In that scenario an instance store makes sense.

28
00:02:04,930 --> 00:02:11,810
Also one of the reasons why it makes sense is because if you're provisioning that type of instance that

29
00:02:11,810 --> 00:02:19,560
comes with an instance store the instance store volume is part of the cost of the EC2 instance.

30
00:02:19,570 --> 00:02:21,710
So you're not paying extra for the storage.

31
00:02:21,830 --> 00:02:28,490
The instance type that you choose determines the size of instance store available and the type of hardware

32
00:02:28,490 --> 00:02:34,240
used for the instance store volume so it's included as part of the instance's usage costs.

33
00:02:34,250 --> 00:02:37,490
So you're paying for the volume as part of the EC2 instance.

34
00:02:37,490 --> 00:02:43,250
So you're not paying extra so for instance the alternative might be that you put data on provisioned

35
00:02:43,270 --> 00:02:48,440
IOPS (EBS) and provision a very high I/O that might cost a lot more than using an instance store and you'd

36
00:02:48,440 --> 00:02:57,010
have to make that evaluation on a case by case basis. So comparing EBS with instance store, EBS means

37
00:02:57,010 --> 00:03:01,360
that the volume is less volume and the storage is persistent.

38
00:03:01,720 --> 00:03:07,330
An instance store backed means the root volume's and instance store volume and the data is not persistent.

39
00:03:08,380 --> 00:03:11,680
Instance store backed instances cannot be stopped.

40
00:03:12,590 --> 00:03:19,880
If the underlying host fails the data will be lost. Instance store volume root devices are created from

41
00:03:19,920 --> 00:03:26,150
AMI templates stored on a S3 whereas EBS backed instances can be stopped and you won't lose the

42
00:03:26,150 --> 00:03:26,570
data.

43
00:03:27,230 --> 00:03:31,550
And EBS volumes can be attached and reattached to different instances.

44
00:03:31,700 --> 00:03:37,350
The EBS root devices are launched from AMIs that are backed by EBS snapshots.

45
00:03:37,430 --> 00:03:38,690
So they sit S3.

46
00:03:38,900 --> 00:03:42,070
Instance store volumes cannot be detached or reattached.

47
00:03:43,580 --> 00:03:47,600
If you reboot the instances for both volume types data doesn't get lost.

48
00:03:47,600 --> 00:03:51,770
So even with an instance store if you reboot the instance data is not lost.

49
00:03:51,770 --> 00:03:53,910
But if you stop the instance it is lost.

50
00:03:53,910 --> 00:03:58,510
Now here's a table that describes the different type of EBS volumes that are available.

51
00:03:58,520 --> 00:04:02,630
I'm not going to go through all of this but just make sure you're aware of the differences.

52
00:04:02,630 --> 00:04:06,080
Make sure you're aware of the use cases as well.

53
00:04:06,080 --> 00:04:11,060
So you've got provisioned IOPS which is where you can specify the amounts of I/O that you want the amount

54
00:04:11,060 --> 00:04:17,270
of performance. You've got the general purpose and these are both SSD and then these are the hard disk drive

55
00:04:17,270 --> 00:04:24,890
options the throughput optimized or the cold. EBS snapshots capture a point in time state of an instance

56
00:04:24,920 --> 00:04:32,090
or specifically of an EBS volume. They're an easy backup strategy and you can also use them to migrate

57
00:04:32,090 --> 00:04:35,640
a system to a different availability zone or region.

58
00:04:35,660 --> 00:04:42,320
You can also use a snapshot to convert an unencrypted volume to be an encrypted volume.

59
00:04:42,380 --> 00:04:45,160
Snapshots are stored on S3.

60
00:04:45,320 --> 00:04:52,150
They're not a granular backup solution so if you need folder and file level backup then don't use snapshots.

61
00:04:52,600 --> 00:04:55,480
Even though snapshots are actually incremental,

62
00:04:55,540 --> 00:05:01,150
so each one is incremental and stores the change data from the previous snapshot.

63
00:05:01,150 --> 00:05:06,820
You actually only have to retain the most recent one to restore the volume in full. Snapshots

64
00:05:06,820 --> 00:05:09,120
can only be accessed through the EC2 API.

65
00:05:09,440 --> 00:05:15,230
EBS volumes remember are AZ specific but snapshots are region specific because they're stored on S3.

66
00:05:15,750 --> 00:05:23,890
EBS you can encrypt the boot and data volumes of an EC2 instance. When you create an EBS volume

67
00:05:23,890 --> 00:05:30,010
that's encrypted and attach it to the right instance type you can encrypt data at rest inside the volume

68
00:05:30,460 --> 00:05:36,400
but also all data moving between the volume and the instance because remember EBS volumes are attached

69
00:05:36,490 --> 00:05:37,900
over a network.

70
00:05:37,900 --> 00:05:44,240
All that data is also encrypted and any snapshot you create will also be encrypted and any volumes you

71
00:05:44,240 --> 00:05:51,680
create from those snapshots will be encrypted. So encryption is supported by all EBS volume types.

72
00:05:51,680 --> 00:05:58,720
You can expect the same IOPS performance on encrypted as unencrypted. All instance families support

73
00:05:58,750 --> 00:06:07,720
encryption as well. So the AMIs are the Amazon machine images and these are what specify the information

74
00:06:07,750 --> 00:06:12,880
about the EC2 instance that you're all going to launch so they include a template for the root

75
00:06:12,910 --> 00:06:13,900
volume.

76
00:06:13,900 --> 00:06:19,570
They include launch permissions and a block device mapping that defines what volumes are attached to

77
00:06:19,570 --> 00:06:26,830
the instance when it's launched and these can be even instance store backed or EBS backed. You can copy

78
00:06:26,840 --> 00:06:35,200
AMIs within or across an AWS region using the command line the management console, SDKs or the

79
00:06:35,200 --> 00:06:36,130
EC2 API.

