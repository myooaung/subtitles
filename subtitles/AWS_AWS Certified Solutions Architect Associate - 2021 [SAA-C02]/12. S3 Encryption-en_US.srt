1
00:00:05,270 --> 00:00:05,910
Welcome back.

2
00:00:05,930 --> 00:00:11,510
Encryption is a big topic for the exam, and there's a few different types of encryption with Amazon,

3
00:00:11,510 --> 00:00:13,100
it's free that you need to be aware of.

4
00:00:13,490 --> 00:00:17,560
Now, specifically here we're talking about encryption of data at rest.

5
00:00:17,570 --> 00:00:23,900
That means that data that's actually stored not in transit, which is when the actual data is traversing

6
00:00:23,900 --> 00:00:26,300
a network for encryption in transit.

7
00:00:26,570 --> 00:00:35,600
We do use HDTV as the secure version of HDTV with Amazon as free, so your data is encrypted in transit

8
00:00:35,600 --> 00:00:37,910
using an SSL TLS certificate.

9
00:00:38,800 --> 00:00:41,500
For encryption at rest as a few different options.

10
00:00:42,190 --> 00:00:47,200
Firstly, we have something called server side encryption with free managed keys.

11
00:00:47,530 --> 00:00:51,280
It's abbreviated as SSD Dash as free.

12
00:00:51,970 --> 00:00:58,720
Now with this, you have as free managed keys, so the keys are managed by the Amazon S3 service.

13
00:00:59,050 --> 00:01:05,620
You get unique object keys and a master key all managed for you, and it uses the advanced encryption

14
00:01:05,620 --> 00:01:09,070
standard as 256 bit encryption keys.

15
00:01:09,730 --> 00:01:14,470
The encryption and the decryption will actually take place in Amazon as free.

16
00:01:14,470 --> 00:01:21,280
So as your data is written to a bucket, it gets encrypted and as it's read from a bucket, it becomes

17
00:01:21,280 --> 00:01:22,060
decrypted.

18
00:01:22,480 --> 00:01:27,400
Now, that doesn't mean it's traversing the network and clear attacks, because remember, we are using

19
00:01:27,400 --> 00:01:33,490
certificates, so you do have an encrypted tunnel for that data as it passes over the network.

20
00:01:34,300 --> 00:01:39,280
But the actual data itself, once it reaches its destination, is still in clear text.

21
00:01:39,910 --> 00:01:44,980
So if we have a client and the client puts an object into us free, it's going to encrypt it.

22
00:01:45,250 --> 00:01:49,000
And then when they remove that object from us free, it's going to decrypt it.

23
00:01:49,750 --> 00:01:56,290
Now the next option is called server side encryption, with eight of US Cames managed keys, and that's

24
00:01:56,290 --> 00:01:59,200
abbreviated as SASE CMS.

25
00:01:59,500 --> 00:02:03,310
Now, in this case, the keys are managed by the Kojima's service.

26
00:02:03,310 --> 00:02:05,710
That's the IWC Key Management Service.

27
00:02:05,950 --> 00:02:12,430
We have comms generated customer master keys, or you can have a CE mark that's generated by the customer.

28
00:02:13,300 --> 00:02:19,420
The encryption and decryption again happens on the bucket, so the client is writing data to as free

29
00:02:19,720 --> 00:02:21,430
as free as encrypting that data.

30
00:02:21,550 --> 00:02:23,710
And when they read it back again, it's decrypt again.

31
00:02:24,820 --> 00:02:28,990
The next option is called server side encryption with client provided keys.

32
00:02:30,010 --> 00:02:30,980
Dash C.

33
00:02:31,330 --> 00:02:36,070
In this case, the keys are managed by the client and not stored on a WC.

34
00:02:37,330 --> 00:02:42,030
But still, the encryption and decryption is taking place on IWC.

35
00:02:42,100 --> 00:02:45,130
It just gives you more control over the encryption keys.

36
00:02:46,080 --> 00:02:49,110
Now, the last option is not a server side encryption option.

37
00:02:49,350 --> 00:02:54,360
This is the only one that's a client side encryption option, so that means you have client managed

38
00:02:54,360 --> 00:03:00,830
keys, so you as a customer have to manage the keys, the creation of them, the rotation, etcetera.

39
00:03:01,200 --> 00:03:07,380
They're not stored on IWC, but you can actually use a KMC in case you can export that.

40
00:03:07,620 --> 00:03:09,420
And then you can use that now.

41
00:03:09,420 --> 00:03:12,840
The encryption in this case is happening on the client side.

42
00:03:13,410 --> 00:03:16,740
So IWC doesn't really know anything about it.

43
00:03:17,250 --> 00:03:20,220
You encrypt your data, you write, it's as free.

44
00:03:20,580 --> 00:03:22,440
The data is encrypted on as free.

45
00:03:22,650 --> 00:03:25,950
You read it back again and then you decrypt it on the client side.

46
00:03:26,340 --> 00:03:33,450
There's no way of decrypting this data on IWC because the keys are actually in your data center on your

47
00:03:33,450 --> 00:03:34,020
systems.

48
00:03:34,530 --> 00:03:38,070
We can configure default encryption on our S3 buckets.

49
00:03:38,430 --> 00:03:44,040
When we do this, we can configure the encryption behavior so we can choose which type of encryption

50
00:03:44,040 --> 00:03:45,030
we want to use.

51
00:03:45,300 --> 00:03:51,960
And then all objects that get written to the bucket will become encrypted using whatever you specify.

52
00:03:52,170 --> 00:03:55,380
Now, note that this mentions new objects.

53
00:03:55,380 --> 00:04:01,680
Existing objects will not be encrypted, so you enable default encryption, but if you have existing

54
00:04:01,680 --> 00:04:04,620
objects in that bucket, they're not going to become encrypted.

55
00:04:05,010 --> 00:04:10,080
But new objects that you up later after you've enabled encryption will be encrypted.

56
00:04:10,620 --> 00:04:15,480
In this case with default encryption, we are talking about using one of these server side encryption

57
00:04:15,480 --> 00:04:16,080
options.

58
00:04:16,530 --> 00:04:22,080
And as I mentioned, that means the S3 is going to encrypt objects as you write them to disk and then

59
00:04:22,080 --> 00:04:27,660
decrypt them when you pull them off of, it's free and there's no change to the encryption status of

60
00:04:27,660 --> 00:04:32,100
objects that already existed in the bucket before you enable default encryption.

61
00:04:32,880 --> 00:04:37,410
Now you can also prevent uploads of unencrypted objects as well.

62
00:04:38,010 --> 00:04:43,710
So you can create a policy like this, and this one will enforce encryption using SASE as free.

63
00:04:44,100 --> 00:04:50,640
We can see that what's happening here is we have a deny for any principle and the action as free puts

64
00:04:50,640 --> 00:04:53,400
objects, so uploading a file to S3.

65
00:04:53,880 --> 00:04:58,640
We would then choose our packet specifying our bucket name and a slash star.

66
00:04:58,650 --> 00:05:01,590
So this applies to objects that we want to put in the bucket.

67
00:05:01,950 --> 00:05:09,360
And the condition is if the string does not equal as free x AMS ad server side encryption with a value

68
00:05:09,360 --> 00:05:11,160
of a two five six.

69
00:05:11,490 --> 00:05:19,350
If you wanted to use SASE CMS, you would instead have a CMS instead of a 256.

70
00:05:19,890 --> 00:05:25,500
So this top portion of the code here is all about defining the encryption headers you want to see.

71
00:05:25,500 --> 00:05:31,980
Whether you want your data to be encrypted using SASE as free or SASE came, for example.

72
00:05:32,490 --> 00:05:34,770
Now, then we deny the actual upload.

73
00:05:35,010 --> 00:05:37,740
So here we have the same with S3 put objects.

74
00:05:37,950 --> 00:05:43,890
We have our resource again, and this time it's condition of null x aims at server side encryption.

75
00:05:43,890 --> 00:05:44,250
True.

76
00:05:44,790 --> 00:05:50,850
So that means if we're not adding encryption to our object when we upload it, then it's not going to

77
00:05:50,850 --> 00:05:52,020
allow it to take place.

78
00:05:52,620 --> 00:05:54,570
And it puts might look like this.

79
00:05:54,870 --> 00:06:02,430
So this is the example of a put request, and we can see the server side encryption had a header as

80
00:06:02,430 --> 00:06:03,330
two five six.

81
00:06:03,540 --> 00:06:07,170
So this object will be encrypted and therefore it will be allowed.

82
00:06:07,500 --> 00:06:08,760
And that's it for this lesson.

83
00:06:08,910 --> 00:06:14,340
We'll do a hands on in the next lesson actually put this into action using a policy to prevent uploads

84
00:06:14,340 --> 00:06:15,750
of unencrypted objects.

