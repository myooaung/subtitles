WEBVTT
1
00:00:02.160 --> 00:00:02.570
Hi guys.

2
00:00:02.580 --> 00:00:05.790
We've got another great lab here on API gateway.

3
00:00:06.000 --> 00:00:13.080
And in this lab we're going to build an API and that API is going to talk to Lambda. Lambda will have

4
00:00:13.080 --> 00:00:19.380
a function that can then manipulate data in the dynamoDB database so we can delete we can get we can

5
00:00:19.380 --> 00:00:23.450
post or put information in a dynamoDB table.

6
00:00:23.490 --> 00:00:25.060
So that's what it looks like.

7
00:00:25.200 --> 00:00:31.250
And we're going to use an article from AWS again and I'll take you over to that now.

8
00:00:31.260 --> 00:00:36.870
So this one is called Create a simple micro service using lambda an API Gateway and we're actually going

9
00:00:36.870 --> 00:00:38.540
to use a blueprint for this.

10
00:00:38.550 --> 00:00:45.440
So it's really easy to get this configuration running so let's head over to the lambda console.

11
00:00:45.600 --> 00:00:48.990
And the first thing we need to do is create our function.

12
00:00:49.110 --> 00:00:54.820
So we're going to choose create function and we're going to select use a blueprint we're then going

13
00:00:54.820 --> 00:00:59.300
to go down to blueprints and we're going to search for micro service

14
00:01:03.300 --> 00:01:10.110
and we're going to choose this option micro service HTTP endpoints and then we click configure and

15
00:01:10.140 --> 00:01:16.860
for the function name we're going to just call it lambda dash micro service and then for the role name

16
00:01:18.310 --> 00:01:24.700
we're going to call it lambda API Gateway role and well they're going to choose a template in this case

17
00:01:24.700 --> 00:01:31.590
it's actually created it for us so it's already got the simple micro service permissions selected the

18
00:01:31.590 --> 00:01:36.300
only other thing we need to change is to select open for security

19
00:01:38.960 --> 00:01:40.990
and it's going to create everything else for us.

20
00:01:41.000 --> 00:01:44.000
So let's just go down and create function.

21
00:01:44.000 --> 00:01:48.620
I just took a few seconds and we've now got our lambda micro service function.

22
00:01:48.620 --> 00:01:58.530
And on the left hand side here we can see we have an API Gateway trigger which connects to this endpoint.

23
00:01:58.560 --> 00:02:01.170
Now you can see the name is my function dash API.

24
00:02:01.180 --> 00:02:07.290
So if we go to API gateway we now have this function which has actually been created if we just go back

25
00:02:07.290 --> 00:02:10.140
to where we were there it says created by AWS lambda.

26
00:02:10.140 --> 00:02:14.210
So that's been automatically created for us before we can test this out.

27
00:02:14.220 --> 00:02:20.740
What we need to do is just go to dynamoDB and we're going to create a table

28
00:02:23.420 --> 00:02:25.780
so we just click Create table.

29
00:02:26.060 --> 00:02:29.090
This needs to be called my table.

30
00:02:29.270 --> 00:02:35.840
We're just going to I.D. for the primary key we're going to need string selected and click Create.

31
00:02:35.860 --> 00:02:41.680
Now let's go back over to lambda and what we're going to do is we're going to configure a test event

32
00:02:42.730 --> 00:02:50.490
and we're going to take all this information just pull all of this out and we're going to paste this

33
00:02:50.490 --> 00:02:58.900
information in and we're just going to call this my test and I'm going to click Create and that's been

34
00:02:58.900 --> 00:02:59.510
done.

35
00:02:59.530 --> 00:03:03.460
And so now we can click test so that succeeded.

36
00:03:03.460 --> 00:03:05.770
Now let's click in the details and see what we got.

37
00:03:06.190 --> 00:03:11.170
And we can see that we've got a status two hundred which is an okay message and we've got the body here

38
00:03:11.170 --> 00:03:12.240
we've got items in this.

39
00:03:12.250 --> 00:03:13.030
There's nothing there.

40
00:03:13.030 --> 00:03:14.530
Count is zero.

41
00:03:14.530 --> 00:03:21.580
So let's go back to our dynamodb table and go to items and let's create some items.

42
00:03:21.640 --> 00:03:35.510
So let's just call this my item 1 and then we'll go in again and do my item two and let's go back to

43
00:03:35.510 --> 00:03:37.680
lambda and just click test again.

44
00:03:37.700 --> 00:03:42.020
So this time we can actually see some information in the console.

45
00:03:42.020 --> 00:03:47.920
So just go back over to our diagram we can see we've got AWS lambda and what we've just done is configure

46
00:03:47.920 --> 00:03:51.570
a test event here which connects to dynamoDB.

47
00:03:51.740 --> 00:03:56.870
What we really want to do is test it from API Gateway and see if API Gateway sends the information to

48
00:03:56.870 --> 00:04:01.810
Lambda checks dynamoDB and returns that information back to us.

49
00:04:01.820 --> 00:04:04.420
So let's head back over to the console.

50
00:04:04.430 --> 00:04:10.490
We're going to go to API Gateway this time so I'm in the API Gateway now and what I can do to test the

51
00:04:10.490 --> 00:04:14.590
function is I can come down to the method.

52
00:04:14.810 --> 00:04:16.610
And here we've got our method.

53
00:04:16.670 --> 00:04:22.820
And I can click on Test and we can then choose which method we want to use and I'm going to choose get

54
00:04:23.850 --> 00:04:33.190
and then I'm going to put table name equals and then the name of my table which is my table.

55
00:04:33.470 --> 00:04:38.870
And if we click on Test we can now see the items that we have created before.

56
00:04:38.870 --> 00:04:47.630
So if we then went back into dynamoDB being created a does call this the new item and now head back to

57
00:04:47.660 --> 00:04:53.570
API Gateway and let's just hit test again and now we've got the new item there in the middle as well.

58
00:04:53.660 --> 00:05:00.050
So using the test function in API Gateway we're able to send the request to Lambda and our lambda function

59
00:05:00.050 --> 00:05:05.450
is executed a request to dynamoDB and then return that information back to us.

60
00:05:05.450 --> 00:05:13.490
Another thing we could do is we could go back to API Gateway go down to stages and it's been deployed

61
00:05:13.490 --> 00:05:21.740
into a default stage we could then come down to get and use this invoke you.

62
00:05:22.060 --> 00:05:28.870
And with that we can then construct a URL that we can actually go through a browser and perform

63
00:05:28.870 --> 00:05:29.990
the same query.

64
00:05:29.990 --> 00:05:31.000
So let's just do that.

65
00:05:31.000 --> 00:05:33.760
I've put together the url.

66
00:05:33.760 --> 00:05:41.650
So all I needed to do was off the lambda micro service put a question mark table name equals my table

67
00:05:41.830 --> 00:05:43.960
and I hit enter and there we go.

68
00:05:43.960 --> 00:05:47.790
We can see we've been returned the list of items.

69
00:05:47.980 --> 00:05:49.780
So that's it for this lab.

70
00:05:49.780 --> 00:05:51.030
Very simple again.

71
00:05:51.070 --> 00:05:53.190
Hope it all works out very well for you.

72
00:05:53.290 --> 00:05:58.180
If not you can always send me a message or reach out in the Q&A forum.

73
00:05:58.180 --> 00:06:01.780
I'm just going to go in and delete my resources.

74
00:06:01.810 --> 00:06:05.800
So what we can do here is we choose the table and the delete table.

75
00:06:06.400 --> 00:06:11.530
Go to API Gateway again we need to go up to our API.

76
00:06:11.800 --> 00:06:20.160
Take the name of the API and then we're going to delete API and is paste that in and then go back to

77
00:06:20.160 --> 00:06:24.420
lambda and we can choose our function and just delete the function.

