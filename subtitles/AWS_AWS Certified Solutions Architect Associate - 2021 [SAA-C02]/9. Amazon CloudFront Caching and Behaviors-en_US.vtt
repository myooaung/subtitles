WEBVTT
1
00:00:05.160 --> 00:00:07.230
So let's look at cloud front and a bit more depth.

2
00:00:07.740 --> 00:00:09.990
So here we have a couple of origins.

3
00:00:09.990 --> 00:00:14.430
We've got an in-situ to origin and we've got an Amazon S3 origin.

4
00:00:15.210 --> 00:00:19.170
And we also have something called a cloud front regional edge cache.

5
00:00:19.560 --> 00:00:24.900
The regional edge cache sits between edge locations and the origin.

6
00:00:25.560 --> 00:00:26.580
There's fewer of them.

7
00:00:26.580 --> 00:00:32.280
There's only 12 compared to a lot more edge locations, but they have a larger cache bandwidth so they

8
00:00:32.280 --> 00:00:33.600
can hold more content.

9
00:00:34.550 --> 00:00:39.650
There are 210 edge locations, so that's spread all over the world, which means hopefully they'll be

10
00:00:39.650 --> 00:00:41.510
close to wherever your uses are.

11
00:00:42.410 --> 00:00:47.540
So global users are then able to access those points of presence around the world.

12
00:00:47.870 --> 00:00:55.040
So an edge location is a points of presence, and that means that's where users connect once they connect

13
00:00:55.040 --> 00:00:56.510
to the edge location.

14
00:00:57.020 --> 00:01:03.530
All of the traffic from that point on goes over the U.S. global network, which means low latency and

15
00:01:03.530 --> 00:01:06.320
consistency and high throughput and performance.

16
00:01:07.390 --> 00:01:15.580
So let's say we've got an object and a user wants to find that objects in an edge location, so he performs

17
00:01:15.580 --> 00:01:16.650
and actually Typekit.

18
00:01:17.350 --> 00:01:21.370
Now remember that cloud front can push your content out to an edge location.

19
00:01:21.670 --> 00:01:27.340
But there might be times when the version of an object is stale or you've deleted an object, or for

20
00:01:27.340 --> 00:01:28.730
some reason, it's not there yet.

21
00:01:28.750 --> 00:01:30.760
It's not in the cache location.

22
00:01:31.360 --> 00:01:34.300
What happens then, is we have something called a cache miss.

23
00:01:34.690 --> 00:01:40.620
So the location doesn't have a copy of our image, so we then go to the regional edge cache.

24
00:01:40.630 --> 00:01:42.550
Let's say there's a miss there as well.

25
00:01:43.210 --> 00:01:45.970
At this time, you have to do an origin fetch.

26
00:01:46.120 --> 00:01:52.600
So you have to go to the origin and retrieve the content, and then it's going to be cached so it gets

27
00:01:52.600 --> 00:01:58.190
cached in multiple locations and then return to the actual requester.

28
00:01:58.900 --> 00:02:02.020
The object gets cached for 24 hours by default.

29
00:02:02.830 --> 00:02:07.840
Now, when another user wants to connect, the object is in that location.

30
00:02:07.840 --> 00:02:12.070
So there's a cache hits and the object gets returned straight to the client with great performance.

31
00:02:13.230 --> 00:02:18.840
When the title expires, the fall is then removed, and that's when an origin fetch can occur again

32
00:02:19.020 --> 00:02:23.370
and retrieve the file and make sure that the latest version of the file is retrieved.

33
00:02:24.870 --> 00:02:31.050
Decreasing the tidal is best for dynamic concerned if your content is likely to change, then you don't

34
00:02:31.050 --> 00:02:34.920
want it to be cash for too long because people might be getting stale objects.

35
00:02:35.520 --> 00:02:39.630
You can actually remove your objects from the cache, but it does cost you to do so.

36
00:02:39.660 --> 00:02:41.700
So it's better to set your TTL properly.

37
00:02:42.510 --> 00:02:46.500
If you want to increase it, then you can do so, and that's going to give better performance because

38
00:02:46.500 --> 00:02:51.900
there's not going to be as many of those instances where a user wants to connect and an origin fetch

39
00:02:51.900 --> 00:02:52.620
has to occur.

40
00:02:53.310 --> 00:02:59.610
You can define the maximum TTL and a default TTL, and you do so at the behavior level in the distribution.

41
00:02:59.970 --> 00:03:04.830
You can even have different TCL's four different file types of exploration.

42
00:03:04.890 --> 00:03:10.770
Cloud Front will check the origin for new requests, so it's checking that the file is the latest version.

43
00:03:11.520 --> 00:03:18.420
You can also use headers to control the cache you use, the cache that control back age equals, and

44
00:03:18.420 --> 00:03:20.280
then you specify the number of seconds.

45
00:03:20.550 --> 00:03:26.040
And that specifies how long before Cloud Front will go back to the origin and fetch the latest version.

46
00:03:26.640 --> 00:03:30.060
And you can set expires for an expiration date and time.

47
00:03:30.420 --> 00:03:32.430
Let's look now at path patterns.

48
00:03:33.120 --> 00:03:37.320
So we have our cloud front distribution, and in this case, we have two origins.

49
00:03:37.710 --> 00:03:39.130
One's got a JPEG image.

50
00:03:39.150 --> 00:03:40.740
One's got an MP for video.

51
00:03:41.620 --> 00:03:44.620
We can create a behavior in our distribution.

52
00:03:45.160 --> 00:03:51.250
And in this case, we're creating a path pattern that says that any requests for JPEG images should

53
00:03:51.250 --> 00:03:52.690
be forwarded to origin one.

54
00:03:53.260 --> 00:04:00.160
Any requests for MP for files should be sent to origin to the default is origin one.

55
00:04:00.880 --> 00:04:05.080
So what happens now is the path pattern will determine where to send in requests.

56
00:04:05.470 --> 00:04:06.430
We've got to use it here.

57
00:04:06.790 --> 00:04:11.440
The users looking for beach jpg, so that should go to origin one.

58
00:04:13.300 --> 00:04:14.590
And the object gets returned.

59
00:04:15.310 --> 00:04:19.660
Then the user wants to request the MP for file that goes to origin too.

60
00:04:19.900 --> 00:04:26.020
And that gets returned, so path patterns are a great way to forward your request to different origins.

61
00:04:26.290 --> 00:04:31.570
The default origin is then used for any requests that don't match a specified path pattern.

62
00:04:32.230 --> 00:04:34.810
And this is the configuration you'll find in Cloud Finder.

63
00:04:34.810 --> 00:04:36.220
We'll do this in the hands on.

64
00:04:36.790 --> 00:04:42.750
So you can set up the path pattern for JPEG images to Origin one and before the Origin two and Defaults

65
00:04:42.760 --> 00:04:43.420
Origin one.

66
00:04:44.050 --> 00:04:46.960
Another common exam question includes request headers.

67
00:04:47.260 --> 00:04:49.000
So you need to understand how these work.

68
00:04:49.330 --> 00:04:55.750
You can configure cloud front to forward the headers in the view request to the Origin Cloud.

69
00:04:55.750 --> 00:05:01.120
Font can then cache multiple versions of an object based on the values of the request headers.

70
00:05:01.810 --> 00:05:07.150
This is controlled in a behavior so that can do one of the following things You can forward all headers

71
00:05:07.150 --> 00:05:10.270
to your origin, and in this case, objects are not cached.

72
00:05:10.600 --> 00:05:16.090
You can afford a whitelist, the headers that you specify, and you can forward only the default headers,

73
00:05:16.360 --> 00:05:19.630
and it doesn't cache any objects on values and request status.

74
00:05:20.170 --> 00:05:22.210
And that's it for caching and behaviors.

75
00:05:22.360 --> 00:05:27.490
And in the next lesson, we're going to look at signed URLs and origin access identities.

