WEBVTT
1
00:00:05.470 --> 00:00:12.220
Most websites and Web applications today are going to be secured with SSL TLS certificates.

2
00:00:12.490 --> 00:00:18.790
And this means that the connections from our customers or our users through to our web applications

3
00:00:18.970 --> 00:00:23.380
is going to be encrypted in transit now with an elastic load balancer.

4
00:00:23.440 --> 00:00:25.810
We can achieve this using a secure listener.

5
00:00:26.290 --> 00:00:31.660
And there are some nuances between application load balancers and network load balances, so we'll look

6
00:00:31.660 --> 00:00:32.320
at those now.

7
00:00:33.970 --> 00:00:39.580
Firstly, we have an application load balancer and we have a client who wants to connect to that load

8
00:00:39.580 --> 00:00:40.120
balancer.

9
00:00:40.810 --> 00:00:48.190
So what we've done is we've loaded an ACM certificate and this can be generated by the IWC Certificate

10
00:00:48.190 --> 00:00:53.350
Manager Service, or you can import a certificate into ACM or IAM.

11
00:00:54.250 --> 00:01:01.450
Now that means we can have an encrypted channel coming from our client to the load balancer itself and

12
00:01:01.450 --> 00:01:05.980
the channel gets terminated there, so it's encrypted in transit fruits of the load balancer.

13
00:01:06.460 --> 00:01:11.290
But then on the back end, it's going to be unencrypted to the easy to instance.

14
00:01:11.860 --> 00:01:16.090
Now what if we want encryption all the way through to the two instance?

15
00:01:16.540 --> 00:01:22.660
Well, clearly we don't do it this way because in this case, an additional connection is taking place,

16
00:01:22.660 --> 00:01:24.550
which is unencrypted, so the back end.

17
00:01:25.240 --> 00:01:34.930
So instead, what we do is we load our SSL TLS on the load balancer and we load an SSL til cert on all

18
00:01:34.930 --> 00:01:36.490
82 instances as well.

19
00:01:36.730 --> 00:01:39.130
And that can be a self-signed certificate.

20
00:01:39.820 --> 00:01:43.720
This means we've got an encrypted channel going through to the load balancer.

21
00:01:43.750 --> 00:01:50.140
It's terminated there and then another encrypted channel is made using the certificate on the issue,

22
00:01:50.150 --> 00:01:50.890
to instance.

23
00:01:51.070 --> 00:01:53.080
So now we have end end encryption.

24
00:01:53.440 --> 00:01:56.410
Things are a little bit different with a network low bouncer.

25
00:01:56.830 --> 00:01:58.870
So now we have a network load balancer.

26
00:01:59.320 --> 00:02:02.260
We have a client connects again and an active instance.

27
00:02:02.470 --> 00:02:06.190
We've loaded an SSL TLS on the instance only.

28
00:02:06.610 --> 00:02:12.520
And now what's going to happen is the client is going to make a connection all the way through using

29
00:02:12.520 --> 00:02:15.550
that certificate, and it must be a public certificate.

30
00:02:16.390 --> 00:02:23.440
So now we have a single encrypted connection from the client to the instance there's no decryption and

31
00:02:23.440 --> 00:02:24.370
then re encryption.

32
00:02:24.880 --> 00:02:31.840
Alternatively, we can use the network load balancer with an SSL TLC cert on both the load balancer

33
00:02:32.170 --> 00:02:34.120
and on the active instance.

34
00:02:34.270 --> 00:02:37.540
And then we have two encrypted channels, just like with the ALP.

35
00:02:37.930 --> 00:02:44.290
The data is going to be decrypted when it reaches the NHLBI, and then it's going to be re encrypted

36
00:02:44.290 --> 00:02:44.830
free.

37
00:02:44.980 --> 00:02:46.210
So the easy to instance.

38
00:02:46.570 --> 00:02:47.560
So that's how it works.

39
00:02:47.560 --> 00:02:53.800
And in the next lesson, what we're going to do is register a certificate using ACM and then create

40
00:02:53.800 --> 00:02:54.640
a secure listener.

