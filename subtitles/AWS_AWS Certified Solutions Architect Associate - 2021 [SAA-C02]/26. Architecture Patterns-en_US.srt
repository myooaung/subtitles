1
00:00:05,420 --> 00:00:09,200
And this architectural patterns lesson, I'm going to cover Amazon EC2.

2
00:00:09,950 --> 00:00:16,220
So the first requirement is a company needs to run a short batch script to configure Amazon E2 Linux

3
00:00:16,220 --> 00:00:18,230
instances after they are launched.

4
00:00:18,620 --> 00:00:19,550
So what could you do here?

5
00:00:19,580 --> 00:00:24,050
Well, it's a short script, so hopefully it's under the 16 kilobyte limit for user data.

6
00:00:24,410 --> 00:00:30,230
And if that's the case, you can add the patch script to the user data of the two instances, and then

7
00:00:30,230 --> 00:00:37,010
it will run as they boot up as a launch for the first time, a tightly coupled HPC workload, high performance

8
00:00:37,010 --> 00:00:42,350
computing requires low latency between nodes and optimum network performance.

9
00:00:42,350 --> 00:00:43,940
So what's the best architecture here?

10
00:00:44,300 --> 00:00:50,630
Well, you should launch the active instances in a single A-Z and a cluster placement group and use

11
00:00:50,630 --> 00:00:52,190
an elastic fabric adapter.

12
00:00:52,400 --> 00:00:58,280
And that's a standard pattern for this type of workload that needs very low latency communications between

13
00:00:58,280 --> 00:00:58,700
nodes.

14
00:00:59,120 --> 00:01:05,210
A line of business application receives weekly bursts of traffic and must scale for short periods,

15
00:01:05,210 --> 00:01:07,700
and you need the most cost effective solution.

16
00:01:08,420 --> 00:01:12,950
In this case, you could use reserved instances for the minimum required workloads, so that's going

17
00:01:12,950 --> 00:01:15,980
to give you a big discount from the standard rates.

18
00:01:16,400 --> 00:01:20,960
And you know that they're going to run all the time anyway, because it's a line of business application

19
00:01:20,960 --> 00:01:24,370
that means it's an important production application for the business.

20
00:01:24,380 --> 00:01:25,970
It's not going away any time soon.

21
00:01:26,570 --> 00:01:30,830
And then you can use spot instances for the occasional bursts in traffic because, you know, those

22
00:01:30,830 --> 00:01:34,550
are short lived, and that means that you can get some cost savings there as well.

23
00:01:34,970 --> 00:01:39,140
A single instance application uses a static public IP address.

24
00:01:39,470 --> 00:01:43,580
In the event of failure, the address must be remapped to a fellow, for instance.

25
00:01:44,270 --> 00:01:49,790
In this case, you can attach an elastic IP address to the instance, and you can remap the IP address

26
00:01:49,970 --> 00:01:51,230
in the event of a failure.

27
00:01:52,460 --> 00:01:56,930
And that can be done programmatically, so you might have some kind of automated way of deploying that.

28
00:01:57,260 --> 00:02:02,990
A fleet of Amazon EC2 instances run in private submarkets across multiple aces.

29
00:02:03,590 --> 00:02:06,200
Company needs a redundant path to the internet.

30
00:02:06,770 --> 00:02:11,480
Well, in this case, you could use NAT gateways so that your instances in the private subnets have

31
00:02:11,480 --> 00:02:15,110
internet access and you can put them into multiple A-Z.

32
00:02:15,130 --> 00:02:20,210
So you've got that high availability because it does ask for redundancy here, and then you need to

33
00:02:20,210 --> 00:02:22,910
update the root tables to point them to the NAT Gateway.

34
00:02:23,570 --> 00:02:30,750
A team of engineers must administer EC2 instances in private subnets from remote locations using SSA

35
00:02:30,770 --> 00:02:32,390
edge to secure shell protocol.

36
00:02:32,960 --> 00:02:38,150
Well, in that case, you can deploy a bastion host in a public subnet and instruct the engineers to

37
00:02:38,150 --> 00:02:41,390
use the Bastiaan host to jump to the instances.

38
00:02:41,390 --> 00:02:48,590
In private subnets, an application uses several active instances the architect must eliminate the risk

39
00:02:48,590 --> 00:02:50,720
of correlated hardware failures.

40
00:02:51,290 --> 00:02:57,200
Well, in that case, he could launch the instances in a spread placement group across distinct underlying

41
00:02:57,200 --> 00:02:57,770
hardware.

42
00:02:58,160 --> 00:03:03,500
This means that each of the instances in the application is essentially in a separate rack of servers

43
00:03:03,500 --> 00:03:07,400
in the IWC data center with separate power supplies and so on.

44
00:03:07,880 --> 00:03:10,460
And that means there shouldn't be a correlated hardware failure.

45
00:03:11,510 --> 00:03:15,170
An application requires enhanced networking capabilities.

46
00:03:15,790 --> 00:03:21,500
We can choose an instance type that supports enhanced networking, and you need to ensure that the INA

47
00:03:21,530 --> 00:03:24,380
module is installed in any support is enabled.

48
00:03:24,710 --> 00:03:30,500
Some allies, like the Amazon Linux two IAMAI, are already configured with the in-a module when it's

49
00:03:30,500 --> 00:03:32,570
enabled, so you already get that support.

50
00:03:33,050 --> 00:03:35,630
For others, you do have to complete these extra steps.

51
00:03:36,440 --> 00:03:42,920
An instance needs close to bare metal performance EFI, the elastic fabric adapter and high performance

52
00:03:42,920 --> 00:03:43,520
networking.

53
00:03:44,060 --> 00:03:50,270
Well, in this case, you might want to use an IWC Nitro instance type, and that's it for this architecture

54
00:03:50,270 --> 00:03:50,750
patterns.

