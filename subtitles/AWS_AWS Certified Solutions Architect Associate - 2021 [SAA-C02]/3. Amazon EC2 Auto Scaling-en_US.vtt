WEBVTT
1
00:00:05.380 --> 00:00:09.040
Hello, and welcome to this lesson on Amazon EC2 auto scaling.

2
00:00:09.250 --> 00:00:15.130
Now there are a few different types of auto scaling you can do auto scaling with Dynamo DB tables,

3
00:00:15.550 --> 00:00:18.730
Amazon Elastic Container Service X as well.

4
00:00:19.270 --> 00:00:23.350
Here we're specifically looking at Amazon EC2 auto scaling.

5
00:00:23.710 --> 00:00:26.620
So this is a way that we can horizontally scale.

6
00:00:26.920 --> 00:00:29.740
Alas, Stickley are two instances.

7
00:00:30.250 --> 00:00:32.740
So let's have a look at a diagram to start with.

8
00:00:33.190 --> 00:00:39.220
So here we've created what's called an auto scaling group, and within that group, we have a few easy

9
00:00:39.220 --> 00:00:41.140
two instances that have been launched.

10
00:00:41.440 --> 00:00:46.120
In this case, the instances are in public subnets, in multiple availability zones.

11
00:00:46.480 --> 00:00:53.320
When you specify multiple Azeez for you auto scaling group, the auto scaling service will generally

12
00:00:53.320 --> 00:00:57.880
try and spread your instances evenly across those availability zones.

13
00:00:58.240 --> 00:01:01.670
As you know, there's different types of monitoring happening with EC2.

14
00:01:01.690 --> 00:01:08.020
We've got status checks that are getting sent to Cloud Watch, and then we also have the metrics from

15
00:01:08.020 --> 00:01:09.880
the two instances themselves.

16
00:01:10.510 --> 00:01:16.240
Now, let's say, for example, that we have these four instances and one of them has a failure of some

17
00:01:16.240 --> 00:01:17.080
status checks.

18
00:01:17.650 --> 00:01:22.930
What's going to happen is the auto scaling group is going to know that and it's going to automatically

19
00:01:23.050 --> 00:01:24.520
replace that instance.

20
00:01:24.820 --> 00:01:31.390
In another example, we might have our metrics being sent from instances to cloud watch.

21
00:01:31.750 --> 00:01:37.480
And in this case, the aggregate CPU across all instances has exceeded 80 percent.

22
00:01:37.990 --> 00:01:44.110
And we might have an alarm that gets triggered, which is looking for whenever the CPU goes above 80

23
00:01:44.530 --> 00:01:47.380
and it's going to tell the auto scaling group through cloud watch.

24
00:01:47.620 --> 00:01:49.720
So then launch an additional instance.

25
00:01:50.050 --> 00:01:56.410
So auto scaling can respond dynamically to what's happening with our application when we're under heavy

26
00:01:56.410 --> 00:01:56.770
load.

27
00:01:56.920 --> 00:02:04.390
It can add additional instances when something fails, they can get replaced and when the load reduces

28
00:02:04.390 --> 00:02:09.850
on our application, it can automatically terminate additional instances to save you money.

29
00:02:10.330 --> 00:02:16.390
So easy to auto scaling is primarily associated with launching and terminating instances.

30
00:02:16.390 --> 00:02:19.180
Dynamically, it's scaling horizontally.

31
00:02:19.180 --> 00:02:22.060
So this is scaling out and scaling back in again.

32
00:02:22.630 --> 00:02:28.840
It provides elasticity and scalability elastic because it not only launches your instances when you

33
00:02:28.840 --> 00:02:34.470
need more instances to service the load on your application, but it will then terminate them when they

34
00:02:34.480 --> 00:02:35.620
no longer needed again.

35
00:02:35.860 --> 00:02:40.450
Auto scaling responds to active status checks, as well as cloud watch metrics.

36
00:02:40.870 --> 00:02:46.300
And with those cloud watch metrics, you can scale based on the performance of your application or even

37
00:02:46.300 --> 00:02:47.320
on a schedule as well.

38
00:02:47.500 --> 00:02:52.840
We use something called a scaling policy and that defines how to respond to those changes in demand.

39
00:02:53.110 --> 00:02:57.100
As you saw before, we had an auto scaling group and within that auto scaling group.

40
00:02:57.130 --> 00:02:59.080
We then had our instances.

41
00:02:59.470 --> 00:03:05.260
So the actual auto scaling group is the collection of two instances that are managed together.

42
00:03:05.710 --> 00:03:09.430
So what do we need to configure and launch an auto scaling group?

43
00:03:10.090 --> 00:03:12.790
Well, firstly, we use something called a launch template.

44
00:03:13.270 --> 00:03:20.720
This is used to specify the configuration of the instances that will be launched within the ISG and

45
00:03:20.720 --> 00:03:24.640
has quite a lot of different attributes you can define in the launch template.

46
00:03:25.000 --> 00:03:25.960
You can see them here.

47
00:03:26.380 --> 00:03:32.230
Things like the am-I and the instance type the EBS volumes you want to attach what security groups to

48
00:03:32.230 --> 00:03:34.240
use, what keeper, et cetera.

49
00:03:34.780 --> 00:03:39.220
So these are the different attributes you can configure, and we'll see this in the hands on.

50
00:03:39.700 --> 00:03:42.220
Another option is something called a launch config.

51
00:03:42.520 --> 00:03:46.480
Now, the launch config has fewer attributes that you can specify.

52
00:03:46.750 --> 00:03:49.750
And essentially, these are being replaced by launch templates.

53
00:03:50.050 --> 00:03:54.940
So for all hands on, we're just going to stick to using launch templates, and they seem to come up

54
00:03:54.940 --> 00:03:57.790
more often and exam questions these days as well.

55
00:03:58.180 --> 00:04:02.770
Now we need a launch template or a launch config before we can create RSG.

56
00:04:03.310 --> 00:04:07.450
Once we have those, we can start the process of creating the ISG.

57
00:04:07.840 --> 00:04:14.170
We can figure out our purchase options, like on demand versus what we can configure the VPC that we

58
00:04:14.170 --> 00:04:16.420
want our auto scaling group to be deployed in.

59
00:04:16.420 --> 00:04:19.780
And note that and also scanning group does not span the pieces.

60
00:04:19.780 --> 00:04:23.890
It's always within the APC and then you can specify the subnets.

61
00:04:24.100 --> 00:04:27.400
Again, this is all within a PPC, which means it's within a region.

62
00:04:27.730 --> 00:04:33.610
Optionally, you can then attach a load balancer, an application load balancer, a network load balancer

63
00:04:33.820 --> 00:04:35.290
or even a classic load balancer.

64
00:04:35.530 --> 00:04:37.630
And we'll see how to do this and hands on as well.

65
00:04:38.080 --> 00:04:39.910
We can also configure health checks.

66
00:04:40.300 --> 00:04:43.510
The auto scanning group is responding to this information.

67
00:04:43.900 --> 00:04:49.840
It knows then when the instance becomes unhealthy and is able to terminate it and launch a replacement

68
00:04:50.260 --> 00:04:53.260
now by default to health checks are defined.

69
00:04:53.650 --> 00:04:57.520
So then it's looking at the system status checks for LP.

70
00:04:57.730 --> 00:05:03.430
This is an additional health check, and this means that we're responding in our auto scaling group

71
00:05:03.670 --> 00:05:04.390
based on.

72
00:05:04.660 --> 00:05:10.890
The health status that's reported by an elastic load balancer and then you define your group size,

73
00:05:10.900 --> 00:05:16.900
how many instances you want to run and scathing policies, how are we going to respond to things like

74
00:05:16.900 --> 00:05:20.110
performance metrics and how we want to scale our application?

75
00:05:20.350 --> 00:05:23.110
Or perhaps we want to scale on a schedule instead?

76
00:05:23.590 --> 00:05:25.240
So let's look at those health checks.

77
00:05:25.690 --> 00:05:31.960
Firstly, we have the easy to status checks I just mentioned this is looking at EC2 and reporting the

78
00:05:31.960 --> 00:05:35.410
health status of the instance, and that's by default, that's enabled.

79
00:05:36.010 --> 00:05:37.240
We then have LP.

80
00:05:37.480 --> 00:05:43.030
This uses the LP health checks and as always, in addition to the EC2 status checks.

81
00:05:43.030 --> 00:05:47.620
And it's recommended if you have an LP that you do enable this option.

82
00:05:47.890 --> 00:05:50.950
And the reason for that is you want to make sure there's not a mismatch.

83
00:05:51.250 --> 00:05:58.360
For example, if the application load balancer thinks that a target is healthy, it's going to forward

84
00:05:58.360 --> 00:05:59.650
the connection to that target.

85
00:06:00.070 --> 00:06:06.040
But maybe the actual target itself has failed an active status check or vice versa.

86
00:06:06.370 --> 00:06:11.950
So by using both health checks, you're gathering more information about the health status of that instance.

87
00:06:12.310 --> 00:06:14.290
We then have the health check grace period.

88
00:06:14.590 --> 00:06:19.240
This is a period of time to wait before checking the health status of the instance.

89
00:06:19.630 --> 00:06:22.300
So we might not one, for instance, to become healthy.

90
00:06:22.450 --> 00:06:27.250
And so we've finished installing some software or performing some kind of configuration.

91
00:06:27.580 --> 00:06:30.520
Otherwise, it might start receiving connections when it's not ready.

92
00:06:30.880 --> 00:06:36.130
Also, scanning will not respond or act on health checks until this period expires as well, so it's

93
00:06:36.130 --> 00:06:38.620
not going to terminate or launch instances.

94
00:06:38.830 --> 00:06:44.710
Moving on to monitoring, we have something called group metrics, and these are about the ACG.

95
00:06:44.710 --> 00:06:50.710
So its data points about the auto scaling group itself, and you can enable the group metrics when you

96
00:06:50.710 --> 00:06:52.870
create your auto scanning group or afterwards.

97
00:06:53.320 --> 00:06:59.260
You get your metrics delivered to cloud watch in one minute granularity and there's no actual additional

98
00:06:59.260 --> 00:06:59.710
charge.

99
00:06:59.890 --> 00:07:03.190
You have to go in and manually enable group metrics.

100
00:07:03.790 --> 00:07:05.440
Then we have basic monitoring.

101
00:07:05.680 --> 00:07:07.960
Now this is for the instances themselves.

102
00:07:08.200 --> 00:07:14.840
So this is the instances individually sending metrics to Amazon Cloud Watch with basic monitoring.

103
00:07:14.860 --> 00:07:17.080
This is with a five minute granularity.

104
00:07:17.350 --> 00:07:18.400
There's no charge.

105
00:07:18.670 --> 00:07:20.340
Then we have detailed monitoring.

106
00:07:20.380 --> 00:07:25.990
Again, this is instances sending metrics to cloud watch, but with a one minute granularity and you

107
00:07:25.990 --> 00:07:27.820
do have to pay a fee for that.

108
00:07:28.360 --> 00:07:30.490
There's a few more scaling settings to know about.

109
00:07:30.880 --> 00:07:32.410
Firstly, we have cooldowns.

110
00:07:32.740 --> 00:07:37.690
These are used with simple screening policies, and it's all about preventing the auto scanning group

111
00:07:37.690 --> 00:07:42.760
from taking any further action before the effects of previous activities are visible.

112
00:07:43.030 --> 00:07:44.410
Default is five minutes.

113
00:07:44.710 --> 00:07:51.400
A termination policy is used to determine which instance should be terminated first when a scale in

114
00:07:51.400 --> 00:07:52.300
event happens.

115
00:07:52.630 --> 00:07:57.050
So when we scale in, we need to terminate instances and it's about choosing which ones.

116
00:07:57.280 --> 00:08:02.260
And as a few different policies, I'll show you a link to more information when we're in the hands on

117
00:08:02.260 --> 00:08:08.200
because it is useful to understand these a basic level termination protection can also be enabled.

118
00:08:08.500 --> 00:08:14.710
This prevents auto scaling from terminating specific instances so you can protect your instances and

119
00:08:14.710 --> 00:08:20.680
make sure that auto scanning is not going to terminate them when an instance is actually in operation

120
00:08:20.680 --> 00:08:22.030
within an auto scanning group.

121
00:08:22.270 --> 00:08:24.310
It's in the in-service state.

122
00:08:24.700 --> 00:08:29.920
You can also put it into what's called a standby state, and that gives you the opportunity to then

123
00:08:30.160 --> 00:08:34.630
update or troubleshoot the instance without worrying about it being terminated.

124
00:08:35.080 --> 00:08:38.020
And then lastly, we have something called lifecycle hooks.

125
00:08:38.500 --> 00:08:41.230
These are used to perform custom actions.

126
00:08:41.470 --> 00:08:46.690
You can pause your instances as the ASG launches them or terminates them.

127
00:08:46.990 --> 00:08:49.150
Let's have a look at a couple of use cases.

128
00:08:49.480 --> 00:08:55.360
Firstly, you might want to run a script to download and install some software as the instance is launching,

129
00:08:55.690 --> 00:08:58.030
but you're not sure exactly how long it's going to take.

130
00:08:58.040 --> 00:09:02.770
So maybe that health check grace period is hard to really quantify how long it should be.

131
00:09:03.430 --> 00:09:11.170
So what you do instead is you use lifecycle hooks to post the instance until they receive a confirmation

132
00:09:11.170 --> 00:09:17.380
from your script or maybe your lambda function that says that, yes, the process is completed of updating

133
00:09:17.380 --> 00:09:20.650
this instance, installing software, configuring it, whatever.

134
00:09:21.100 --> 00:09:24.490
So now you can continue to launch the instance and put it into service.

135
00:09:25.150 --> 00:09:31.060
Another example is you might want to pause an instance to process and data before it's scaled in.

136
00:09:31.510 --> 00:09:33.940
So the instance is going to be terminated.

137
00:09:34.210 --> 00:09:38.980
But you want to pull off some log files or some data that's being written there before it gets deleted.

138
00:09:39.190 --> 00:09:43.900
And you can see a diagram here of the workflow for using lifecycle hooks.

139
00:09:44.260 --> 00:09:49.240
That was quite a lot of very packs into this lesson, and in the next lesson, we're going to do a hands

140
00:09:49.240 --> 00:09:53.140
on where we're going to create a launch template and an auto scanning group.

