WEBVTT
1
00:00:02.310 --> 00:00:02.970
Hi, guys.

2
00:00:03.360 --> 00:00:10.890
In this lesson, what I want to do is cover some of the fundamental concepts associated with identity

3
00:00:10.890 --> 00:00:11.910
and access management.

4
00:00:12.120 --> 00:00:20.340
So that is the service that provides users and groups and policies so that we can access our W.S. accounts

5
00:00:20.550 --> 00:00:22.080
and we can do so securely.

6
00:00:22.440 --> 00:00:28.590
Now, many of you will be new to W.S., but some of you may already be very familiar with these concepts.

7
00:00:28.890 --> 00:00:34.440
But either way, I want to just cover them off because it is important knowledge for the exam and it

8
00:00:34.440 --> 00:00:41.490
is also foundational knowledge which you need before we carry on with the rest of the course and also

9
00:00:41.550 --> 00:00:44.970
with the practical, which is halfway through this section.

10
00:00:45.210 --> 00:00:52.650
So we're gonna start off understanding users in groups and roles and policies and multifactor authentication.

11
00:00:52.950 --> 00:00:55.460
And then we're gonna cry of free terror accounts.

12
00:00:55.760 --> 00:00:58.850
And in that account, you will then use those skills.

13
00:00:58.860 --> 00:00:59.970
We're going to create users.

14
00:00:59.970 --> 00:01:04.920
We're going to create groups, we're going to create policies, and we're gonna set up multi factual

15
00:01:04.920 --> 00:01:05.640
fense occasion.

16
00:01:05.880 --> 00:01:09.140
So let's get on with looking at some of these core concepts.

17
00:01:09.150 --> 00:01:10.590
So we'll start off with users.

18
00:01:10.860 --> 00:01:14.820
So a user is an entity that represents a person or service.

19
00:01:15.120 --> 00:01:20.670
So, for example, in my account, I might have a user named Neil and that will be my account and it's

20
00:01:20.730 --> 00:01:21.810
only for my use.

21
00:01:22.170 --> 00:01:28.920
And that means I can then use an account to log on to a W.S. and Access A.W. services.

22
00:01:29.490 --> 00:01:32.940
Now you can associate a policy directly with an account.

23
00:01:32.970 --> 00:01:38.890
So this is a list of permissions which says what this user is allowed to do on a W.S..

24
00:01:39.300 --> 00:01:39.750
Next stop.

25
00:01:39.780 --> 00:01:40.740
We have groups.

26
00:01:40.980 --> 00:01:46.470
So a group is a collection of users and you can also apply a policy to a group.

27
00:01:47.010 --> 00:01:52.080
So you might put your user into this group and you might put lots of other users into that group.

28
00:01:52.500 --> 00:01:54.690
And so you might have a group for developers.

29
00:01:54.690 --> 00:01:57.180
You might have a group for sysadmins.

30
00:01:57.210 --> 00:02:02.280
You might have a group for, you know, all these different departments within your I.T. department.

31
00:02:02.550 --> 00:02:08.760
And that way you can apply policies that are relevant to the people that are in that group so that are

32
00:02:08.760 --> 00:02:11.550
relevant to the user accounts that you put into that group.

33
00:02:11.940 --> 00:02:15.030
In other words, you're giving them the permissions they need to do their job.

34
00:02:15.420 --> 00:02:17.370
Next up, we have something called a role.

35
00:02:17.520 --> 00:02:21.450
And a role is something that is assumed by a trusted entity.

36
00:02:21.720 --> 00:02:23.100
And you use this for delegation.

37
00:02:23.100 --> 00:02:25.050
And that's a bit of a complex subject.

38
00:02:25.320 --> 00:02:30.120
But I'll help to deconstruct that for you later on in this lesson.

39
00:02:30.360 --> 00:02:36.440
Now, policies can also be applied to roles, and roles are essentially used by services and IWD.

40
00:02:36.520 --> 00:02:37.800
So we'll see how that works.

41
00:02:38.040 --> 00:02:39.540
Lots of times through this course.

42
00:02:39.780 --> 00:02:43.500
So by the end of the course, you'll be very, very familiar with using roles.

43
00:02:43.770 --> 00:02:46.200
So let's look at users in a bit more detail.

44
00:02:46.350 --> 00:02:51.570
So as I mentioned before, I use it is an entity that represents a person or service.

45
00:02:51.870 --> 00:02:54.370
So in this case, we've got users which are named.

46
00:02:54.380 --> 00:02:56.330
So we've got Eric, Ethan and Andrea.

47
00:02:56.580 --> 00:03:02.820
But you can also have a service so you can create a user account that can be used by a service rather

48
00:03:02.880 --> 00:03:03.750
than a human being.

49
00:03:03.990 --> 00:03:08.820
Now, a user account can be assigned an access key I.D. and a secret access key.

50
00:03:09.120 --> 00:03:16.620
So this is called a keeper, and it's a way that they can then programmatically access the W.S. API,

51
00:03:17.010 --> 00:03:21.210
the command line interface and the software development kit, as well as other tools.

52
00:03:21.480 --> 00:03:25.690
You can also assign a password for access to the management console.

53
00:03:25.920 --> 00:03:28.860
Now, by default, users cannot do anything in the account.

54
00:03:29.040 --> 00:03:34.890
So if you create a user code, Andrea, and then you don't apply a policy and you just give her some

55
00:03:34.890 --> 00:03:39.600
credentials and she logs onto her account, she won't be able to do anything in the account, the account

56
00:03:39.600 --> 00:03:44.100
route, user credentials or the email address used to create the account and a password.

57
00:03:44.490 --> 00:03:50.010
Now, later on in this section, we're going to create a free tier account and you'll use an email address

58
00:03:50.010 --> 00:03:50.670
to sign up.

59
00:03:50.970 --> 00:03:52.470
And that's what's called your route account.

60
00:03:53.100 --> 00:03:57.910
Now, the root account has full administrative permissions and they cannot be restricted.

61
00:03:58.110 --> 00:04:03.690
So it's a very powerful account and therefore the best practices to not use the route user credentials,

62
00:04:03.960 --> 00:04:09.510
you should create a user account instead and log on is that user and give that user the permissions

63
00:04:09.510 --> 00:04:10.080
they need.

64
00:04:10.590 --> 00:04:12.720
And you should not use the region route user account.

65
00:04:13.110 --> 00:04:15.900
You should also never share the route user credentials.

66
00:04:16.230 --> 00:04:22.410
So better to create an IBM user, give that user permissions, administrative permissions, and then

67
00:04:22.740 --> 00:04:24.070
use that user to log on.

68
00:04:24.120 --> 00:04:25.680
And we'll do that as well in this section.

69
00:04:25.980 --> 00:04:28.740
You should also enable multifactorial fense occasion.

70
00:04:29.130 --> 00:04:34.480
And we'll talk more about MFA in this section so that you understand exactly what it is as well as setting

71
00:04:34.500 --> 00:04:35.840
up in the hands on.

72
00:04:36.180 --> 00:04:41.550
So occasionally you might use a user account to represent an application, and that's then known as

73
00:04:41.550 --> 00:04:42.480
a service account.

74
00:04:42.840 --> 00:04:49.020
You can have up to 5000 users per W.S. account and each account will have a friendly name, say, for

75
00:04:49.020 --> 00:04:49.780
instance, Andrea.

76
00:04:50.280 --> 00:04:56.550
And then an Amazon resource name, which uniquely identifies the resource across a W.S..

77
00:04:56.820 --> 00:04:59.850
You should always create individual accounts for users.

78
00:05:00.150 --> 00:05:01.500
And you should not share accounts.

79
00:05:01.710 --> 00:05:07.110
And you can set a password policy to define the password length, complexity and so on.

80
00:05:07.440 --> 00:05:09.030
Now let's move on to groups.

81
00:05:09.450 --> 00:05:13.740
A group is a collection of users that has policies attached to them.

82
00:05:14.400 --> 00:05:19.890
A group is not an identity and cannot be identified as a principal and an I am policy.

83
00:05:20.190 --> 00:05:22.320
Now we'll see what this means later in the course.

84
00:05:22.350 --> 00:05:28.500
But essentially it means that a group is not something that you can write into a permissions policy,

85
00:05:28.950 --> 00:05:35.040
but you can take permissions policy and apply it to a group, use groups to assign permissions to users.

86
00:05:35.490 --> 00:05:39.420
And you should always use the principle of least privilege is when you assign permissions.

87
00:05:40.020 --> 00:05:43.380
You can't nest groups, so you can't have a group within a group.

88
00:05:43.700 --> 00:05:44.850
We then have roles.

89
00:05:45.390 --> 00:05:51.600
So a role is created and then assumed by a trusted entity, and it defines a set of permissions for

90
00:05:51.600 --> 00:05:54.150
making servers requests in a W.S..

91
00:05:54.570 --> 00:06:00.270
So, for example, you might have a role here that provides access to the S3 storage system or the Dinham

92
00:06:00.270 --> 00:06:04.050
IDP Database Service or A.W. as LAMDA.

93
00:06:04.590 --> 00:06:10.740
And this role is then provided those permissions to execute a lambda role, for example.

94
00:06:11.400 --> 00:06:17.730
And then you can assign that to another A.W. service and that service is then able to start lamda and

95
00:06:17.730 --> 00:06:18.270
make it work.

96
00:06:18.510 --> 00:06:23.250
Now, we haven't covered Lambda yet, of course, or Dynamo DB or S3, but they'll all be covered in

97
00:06:23.250 --> 00:06:23.730
the course.

98
00:06:24.030 --> 00:06:30.120
So you can use ROVs to delegate permissions to resources for users and services without giving them

99
00:06:30.150 --> 00:06:33.420
permanent credentials so they don't have a username and password.

100
00:06:33.780 --> 00:06:38.310
And the way that works is they actually gain what's called temporary security credentials.

101
00:06:38.610 --> 00:06:41.130
So you don't have to manage usernames and passwords.

102
00:06:41.370 --> 00:06:47.490
This is all done automatically through an API, and it enables them to then gain those temporary credentials

103
00:06:47.580 --> 00:06:54.180
and make the API calls they need to make those application programming interface calls that you used

104
00:06:54.180 --> 00:06:56.400
to work with IWM services.

105
00:06:56.580 --> 00:06:57.930
So you delegate using rolls.

106
00:06:58.150 --> 00:06:59.160
There's no credentials.

107
00:06:59.490 --> 00:07:00.930
And lastly, we have policies.

108
00:07:00.960 --> 00:07:07.380
So the policies are the actual documents that define the permissions that you apply to users, groups

109
00:07:07.620 --> 00:07:08.280
and roles.

110
00:07:08.670 --> 00:07:10.590
So this is a policy document.

111
00:07:10.770 --> 00:07:17.550
It has a list of permissions which are assigned to allow access to as free or Dinham IDB or A.W. as

112
00:07:17.550 --> 00:07:17.940
Lambton.

113
00:07:18.180 --> 00:07:21.210
The documents are written in the JavaScript object.

114
00:07:21.240 --> 00:07:27.750
No capitation also known as Jason, and that includes key value pairs which consist of an attribute

115
00:07:27.780 --> 00:07:28.500
and then a value.

116
00:07:28.820 --> 00:07:34.920
Now all permissions are implicitly denied by default, and that means that if you do not grant permission

117
00:07:34.920 --> 00:07:37.170
to something, then automatically it will be denied.

118
00:07:37.470 --> 00:07:39.930
And the most restrictive policy is always applied.

119
00:07:40.380 --> 00:07:45.720
There's something called the I am policy simulated tool and that can help you understand, test and

120
00:07:45.720 --> 00:07:48.840
validate the effects of access control policies.

121
00:07:49.140 --> 00:07:55.590
So is it all you can go in and kind of visually enter certain parameters into different parts of the

122
00:07:55.590 --> 00:07:58.860
form and then you submit it and it will actually test your policy for you?

123
00:07:59.160 --> 00:08:04.210
There's something else called the condition element and that can be used to apply conditional logic.

124
00:08:04.230 --> 00:08:11.670
So you can say that a permissions policy applies only if the source IP address of the caller is a certain

125
00:08:11.670 --> 00:08:12.060
value.

126
00:08:12.330 --> 00:08:14.820
So that's users, groups, roles and policies.

127
00:08:15.090 --> 00:08:18.240
And in the next lesson, we're gonna cover authentication methods.

