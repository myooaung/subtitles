1
00:00:02,120 --> 00:00:02,600
Hi guys.

2
00:00:02,600 --> 00:00:08,750
In this lab we're going to create an AWS Lambda function that pulls data from a DynamoDB table.

3
00:00:08,750 --> 00:00:13,070
And then when it finds updates it writes some events to CloudWatch logs.

4
00:00:13,070 --> 00:00:19,760
Now I appreciate that we haven't covered DynamoDB yet. DynamoDB is a noSQL database service

5
00:00:20,270 --> 00:00:22,950
and it's gonna be covered in the next section in this course.

6
00:00:23,120 --> 00:00:27,560
But that's okay because we're really going to create a very simple configuration and we're going to

7
00:00:27,560 --> 00:00:31,070
cover DynamoDB in a lot more detail in the next section.

8
00:00:31,130 --> 00:00:32,680
So please notice something here.

9
00:00:32,690 --> 00:00:34,940
The poll based services.

10
00:00:34,970 --> 00:00:41,450
So when I say poll based, what I mean is that AWS Lambda is polling DynamoDB. So this is the complete

11
00:00:41,480 --> 00:00:48,020
opposite of the last lab where you had S3 and S3 was sending an event notification when something

12
00:00:48,020 --> 00:00:49,240
happened in a bucket.

13
00:00:49,490 --> 00:00:56,900
So it was S3 that was responsible for triggering Lambda to execute its code.

14
00:00:56,900 --> 00:01:07,110
In this scenario DynamoDB is a stream based service as is Kinesis and SQS. And so Lambda polls DynamoDB

15
00:01:07,110 --> 00:01:13,400
.It would poll Kinesis, it would poll SQS, so the same thing for those three services.

16
00:01:16,370 --> 00:01:24,170
and what this means is the configuration for the event source mapping is on Lambda not on the service

17
00:01:24,170 --> 00:01:24,740
itself.

18
00:01:25,010 --> 00:01:30,050
So this a key exam question you need to know that difference.

19
00:01:30,200 --> 00:01:35,610
Now let's just head over to a web page and I have this tutorial open that I'm going to be following.

20
00:01:35,630 --> 00:01:42,650
Now we're going to want to use these AWS tutorials because it's very simple way of ensuring that you

21
00:01:42,650 --> 00:01:45,520
guys can run through these labs successfully.

22
00:01:45,650 --> 00:01:50,690
And if you do have any problems of course you can come and message me or you can ask in the Q&A

23
00:01:50,690 --> 00:01:57,050
forum but I'd prefer that you guys just are able to complete these exercises easily without getting

24
00:01:57,050 --> 00:01:59,480
sort of hung up on any coding problems or anything like that.

25
00:01:59,480 --> 00:02:03,830
Because this really isn't the exam where you need to know those kind of things.

26
00:02:03,830 --> 00:02:10,100
So what we do is we come down here and we're going to copy this code and we're gonna create our index

27
00:02:10,290 --> 00:02:18,480
JS file and I'm over on the command line now and I'm going and I'm in my directory so just make sure

28
00:02:18,480 --> 00:02:27,120
you've changed your Lambda DynamoDB directory and we're going to put star code into nano and I'm then

29
00:02:27,120 --> 00:02:40,470
going to save this as index.JS and we can now run zip function.zip and then we write index.js

30
00:02:40,460 --> 00:02:49,480
and so if we look in here now we've got our function.zip file and we can now run the following

31
00:02:49,480 --> 00:02:51,790
command to create our function.

32
00:02:51,790 --> 00:02:57,880
So it's "aws Lambda create function" and we've given it the name and it's process DynamoDB records

33
00:02:58,390 --> 00:03:04,600
we're giving it zip file name we're giving it the handler that we want to use the runtime which is node.js

34
00:03:04,600 --> 00:03:06,560
and then the role.

35
00:03:06,560 --> 00:03:15,210
So just make sure that you get the ARN for your role and paste it in here. We're now in the Lambda console

36
00:03:15,600 --> 00:03:23,370
and if we click functions we should find yet we now have our Lambda function process DynamoDB records.

37
00:03:23,370 --> 00:03:29,670
So let's go in and have a look, and in the center here we can select our function and that will then

38
00:03:29,670 --> 00:03:36,600
display the code underneath so we can see the code which we pasted into nano before to create our index.js

39
00:03:36,610 --> 00:03:41,820
and that's been packaged up and uploaded into our function.

40
00:03:41,820 --> 00:03:49,070
You can see the runtime selected just as we expect it to be you can see there are no layers here layers

41
00:03:49,070 --> 00:03:54,720
are a way that you can pull in additional code and contents that are actually zip archives which contain

42
00:03:54,720 --> 00:03:59,460
the libraries custom runtime and dependencies that you need for that code.

43
00:03:59,460 --> 00:04:07,670
We've then got CloudWatch logs so we can see the permissions here and the actions and we can see DynamoDB

44
00:04:07,670 --> 00:04:15,210
again you've got the resources there and the actions here so that all looks good.

45
00:04:15,210 --> 00:04:20,040
Now one for your note is we don't have a trigger yet so we're going to need to add a trigger soon but

46
00:04:20,040 --> 00:04:24,730
before we do that we can test the function as it is so we can come back to here and what we're going

47
00:04:24,730 --> 00:04:33,080
to do is just copy this code and I'm just gonna go over to an editor because I've noticed that we've

48
00:04:33,080 --> 00:04:40,840
got some regions in hand I need to change us-east-1 to ap-southeast-2, that's my region.

49
00:04:40,840 --> 00:04:41,830
I'm just going to copy that.

50
00:04:41,830 --> 00:04:45,360
I think there's a couple of instances in here where I noticed that.

51
00:04:45,360 --> 00:04:48,030
So here we go got to change U.S. East one again.

52
00:04:48,310 --> 00:04:54,050
So just update this to whatever region you're in, and another one here,

53
00:04:59,820 --> 00:05:02,080
and I think everything else looks okay.

54
00:05:05,040 --> 00:05:09,330
So let's copy this and we're now going to use nano again.

55
00:05:09,420 --> 00:05:16,020
I'm going to paste in that code and I'm gonna save the file as input.txt

56
00:05:19,020 --> 00:05:22,210
and we've, so we've got that file now and we can now run the following command.

57
00:05:22,210 --> 00:05:29,210
So it's aws Lambda invoke we're supplying the function name the payload which is the input.txt

58
00:05:29,210 --> 00:05:33,330
file and then we've got an output field up to 60 for the output.

59
00:05:33,820 --> 00:05:38,170
So we just hit enter on that status code to hundreds so that's okay.

60
00:05:38,290 --> 00:05:44,560
And what we can do now is if we cap the output file we should see we've got this string message which

61
00:05:44,560 --> 00:05:46,630
just says message and that's good.

62
00:05:46,630 --> 00:05:48,070
So that's a success.

63
00:05:48,070 --> 00:05:55,330
Now let's go back to the console and if we have a look at monitoring and view locks and logs in cloud

64
00:05:55,330 --> 00:06:01,720
watch logs we can now go into here and we should see some records and these would have been generated

65
00:06:02,260 --> 00:06:03,800
by our test.

66
00:06:03,850 --> 00:06:07,450
So if you go in you'll see some messages new item.

67
00:06:07,450 --> 00:06:09,930
So that looks good and our test has worked.

68
00:06:09,940 --> 00:06:14,440
So what we want to do now is actually create our dynamo DB table.

69
00:06:14,540 --> 00:06:16,510
So there's some instructions here.

70
00:06:16,510 --> 00:06:22,900
I'm just going to copy the table name and then let's go to DynamoDB which is under database

71
00:06:25,790 --> 00:06:30,980
and it's very simple to create a database and DynamoDB. Like I say, in the next section of the course

72
00:06:30,980 --> 00:06:37,310
we're going to go into this and a lot of detail, but all I need to do here is supply the table name and

73
00:06:37,430 --> 00:06:39,840
I.D. as the partition key.

74
00:06:40,040 --> 00:06:43,810
And then we have string and we'll just click Create.

75
00:06:43,910 --> 00:06:48,020
So it should only take a few seconds to create this but the next thing I want to do is click manage

76
00:06:48,020 --> 00:06:55,160
stream and we just leave the default selection here click on enable and you'll now want to take the

77
00:06:55,250 --> 00:06:58,850
ARN in and copy that to your clipboard.

78
00:06:58,850 --> 00:07:02,330
So as you'll remember from a few minutes ago we don't have a trigger.

79
00:07:02,330 --> 00:07:05,800
Yes if we go back to the configuration here there's no trigger.

80
00:07:05,810 --> 00:07:12,990
So what we're going to do is we're going to run a command and this is to create the event source mapping.

81
00:07:13,370 --> 00:07:20,330
And if you remember from the diagram the event source mapping in this case is taken is configured on

82
00:07:20,420 --> 00:07:22,010
aws Lambda.

83
00:07:22,010 --> 00:07:23,860
So because this is a stream service.

84
00:07:23,900 --> 00:07:31,670
Same for Kinesis, the same for SQS, is the configuration is here on Lambda and not on the service.

85
00:07:31,670 --> 00:07:37,790
So this event source mapping creation we supply the function name again.

86
00:07:37,910 --> 00:07:39,530
It's a couple of other parameters.

87
00:07:39,530 --> 00:07:44,080
And then the big one that you need to be sure that you change is the event source ARN.

88
00:07:44,090 --> 00:07:47,890
So that's the ARN that we just retrieved from DynamoDB.

89
00:07:47,900 --> 00:07:55,890
It says this value here just copy this value make sure your function name is correct paste in your ARN

90
00:07:56,330 --> 00:07:57,750
and then let's hit enter.

91
00:07:57,780 --> 00:08:00,160
So that looks like it's in the state of pending.

92
00:08:00,270 --> 00:08:05,070
And let's head over to the console and let's just refresh this function

93
00:08:09,880 --> 00:08:11,740
and just open up the design there.

94
00:08:11,770 --> 00:08:17,380
And now we have our triggers if we click on that trigger we can see it says no records have been processed.

95
00:08:17,680 --> 00:08:22,220
So the way we can test that this is all working now is we go into DynamoDB.

96
00:08:22,300 --> 00:08:25,810
We go to items and we create items.

97
00:08:25,810 --> 00:08:31,170
So let's just call these items I've got my test add another one.

98
00:08:31,200 --> 00:08:33,990
You just put in the string value let's call it mytest2

99
00:08:38,620 --> 00:08:41,450
mytest3 and click save.

100
00:08:41,660 --> 00:08:47,390
So what should happen according to our diagram is that Lambda should be polling DynamoDB, it should

101
00:08:47,390 --> 00:08:53,870
find that some items have been updated, and then it's going to write a record to CloudWatch logs and

102
00:08:53,870 --> 00:08:57,890
that record should mention the name of the items that we added in here.

103
00:08:57,950 --> 00:09:04,530
So let's go back to CloudWatch and I'm going to refresh.

104
00:09:04,640 --> 00:09:11,550
So we've got a whole load of new entries here let's have a look at some of these and you can see the

105
00:09:11,550 --> 00:09:17,340
build duration memory size Max memory used then you've got to start and then you've got some of the

106
00:09:17,340 --> 00:09:20,280
payload in here so you can see how we've got my test free

107
00:09:24,560 --> 00:09:29,140
and that's all that one so if we go back a bit we should find mytest2.

108
00:09:29,240 --> 00:09:35,660
So we can say this is definitely working we've got Lambda polling DynamoDB and then taking some information

109
00:09:36,050 --> 00:09:43,490
about the updates to the database and writing them to CloudWatch log so you can imagine this this content

110
00:09:43,520 --> 00:09:45,670
and the information that's in it what you could do with that.

111
00:09:45,670 --> 00:09:51,590
So clearly here we're just writing a log but you can imagine the many applications that you can design

112
00:09:51,590 --> 00:09:53,380
which use this information in some way.

113
00:09:53,420 --> 00:09:55,080
So that's it for this lab.

114
00:09:55,280 --> 00:09:56,930
What we can do to clean up.

115
00:09:57,170 --> 00:10:05,290
We can very simply go in select our table and delete table in DynamoDB and that's done.

116
00:10:05,510 --> 00:10:13,080
And then we can go into Lambda and if we just head back up to functions and selects our function and

117
00:10:13,080 --> 00:10:18,270
go over to actions and delete and that say and what we're going to do in the next lab is I'm going to

118
00:10:18,270 --> 00:10:23,790
give you an overview of API Gateway and then we're going to create a simple micro service application

119
00:10:23,790 --> 00:10:29,340
that uses Lambda as well as API Gateway and also DynamoDB.

120
00:10:29,340 --> 00:10:32,070
So that should be very interesting I'll see you in the next lab.

