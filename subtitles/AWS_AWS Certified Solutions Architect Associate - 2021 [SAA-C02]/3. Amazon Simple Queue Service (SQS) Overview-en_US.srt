1
00:00:01,940 --> 00:00:08,990
OK, guys, let's get into the Amazon simple queue service, excuse us, excuse us is a fully managed

2
00:00:08,990 --> 00:00:10,390
message queuing service.

3
00:00:10,730 --> 00:00:17,780
So excuse messages that are received from one application component ready for delivery or consumption

4
00:00:17,900 --> 00:00:20,090
from another application component.

5
00:00:20,510 --> 00:00:27,020
So in this case, we've got a website where the website places messages on a queue and then the app

6
00:00:27,020 --> 00:00:29,090
to keep track in the queue.

7
00:00:29,390 --> 00:00:34,760
So it's polling in the queue and it checks and then eventually finds messages and then it processes

8
00:00:34,760 --> 00:00:35,450
the messages.

9
00:00:36,110 --> 00:00:42,320
So the queue is a temporary repository for messages that are awaiting processing and they're highly

10
00:00:42,320 --> 00:00:42,950
scalable.

11
00:00:43,130 --> 00:00:47,420
So you don't have to worry about how much space there is to store your messages.

12
00:00:47,720 --> 00:00:54,470
The queue acts as a buffer between the component producing and saving the data and the component that's

13
00:00:54,470 --> 00:01:01,040
receiving the data for processing so the queue can resolve issues that arise if the producer is producing

14
00:01:01,040 --> 00:01:07,970
work faster than the consumer can actually process it, or if the producer and consumer are only intermittently

15
00:01:07,970 --> 00:01:09,170
connected to the network.

16
00:01:09,360 --> 00:01:14,810
So there's lots of use cases where you might want to do this because you can't rely on the fact that

17
00:01:14,810 --> 00:01:21,650
your processing is going to be able to process the messages quickly enough for the Web to or they only

18
00:01:21,650 --> 00:01:22,940
periodically check in.

19
00:01:23,090 --> 00:01:27,170
So this means you don't need a direct connection between your application components.

20
00:01:27,440 --> 00:01:34,230
So it's known as decoupling or loose coupling, and it enables you to elastically scale your application.

21
00:01:34,550 --> 00:01:37,820
Now, ask us, is Paul based, not push based?

22
00:01:38,060 --> 00:01:43,820
So like back on the diagram here, you see that the easy two instances are polling the cues, the arrows

23
00:01:43,820 --> 00:01:46,310
going from the easy to instances to the queue.

24
00:01:46,670 --> 00:01:52,390
The producers put it on the queue and then the consumers pull the queue and take it off.

25
00:01:52,850 --> 00:01:57,350
So that means it's poll based and that's the opposite of S.A.S., which is push based.

26
00:01:57,920 --> 00:02:05,120
Now, messages can be up to 256 kilobytes in size and they can be kept in the queue from one minute

27
00:02:05,120 --> 00:02:06,230
to 14 days.

28
00:02:06,560 --> 00:02:08,990
And the default retention period is four days.

29
00:02:09,750 --> 00:02:14,460
Escalus will guarantee that your messages will be processed at least once.

30
00:02:14,750 --> 00:02:17,600
So that's a basic overview of what excuses.

31
00:02:18,020 --> 00:02:23,240
And in the next lessons, we're going to go into more detail on some of the components, starting with

32
00:02:23,240 --> 00:02:24,770
queue times in the next lesson.

