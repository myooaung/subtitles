WEBVTT
1
00:00:02.010 --> 00:00:08.040
We're now going to cover Amazon API Gateway and before we go over this diagram I'm just going to take

2
00:00:08.040 --> 00:00:10.100
you to the AWS Web site.

3
00:00:10.110 --> 00:00:15.120
Sometimes it's easier to explain what a service is just by looking at the AWS article.

4
00:00:15.720 --> 00:00:21.600
So in this article it tells you the API Gateway is a service for creating publishing maintaining monitoring

5
00:00:21.600 --> 00:00:26.170
and securing rest and web socket API as at any scale.

6
00:00:26.190 --> 00:00:30.770
So you're you know what REST is I know we've talked about it earlier on in this course.

7
00:00:30.780 --> 00:00:38.100
If you don't you can always go over to another browse a window SEARCH FOR REST API and there's a good

8
00:00:38.100 --> 00:00:43.980
Wikipedia article that's probably good articles throughout Google but I've used this one few times and

9
00:00:44.250 --> 00:00:49.830
it's got a good amount of information on what REST is and the various hate HTTP methods you might use

10
00:00:49.830 --> 00:00:51.810
with it.

11
00:00:51.810 --> 00:00:58.800
So another thing to point out here is that web socket APIs is a feature of API Gateway.

12
00:00:58.800 --> 00:00:59.820
It's relatively new.

13
00:00:59.820 --> 00:01:06.870
I think it was late 2018 so probably starting to appear on the exam now. They used to just offer rest

14
00:01:06.870 --> 00:01:07.410
api.

15
00:01:07.440 --> 00:01:16.470
But now API Gateway also offers websocket API as well as REST api. Our HTTP based adhere to the rest protocol

16
00:01:17.040 --> 00:01:24.010
and use standard methods it's worth dicing that with API Gateway.

17
00:01:24.030 --> 00:01:26.160
You can only use HTTPS.

18
00:01:26.160 --> 00:01:33.630
So you see HTTP is still the hypertext transfer protocol but it's the secure version of HTTP which is

19
00:01:33.630 --> 00:01:35.310
used with API gateway.

20
00:01:35.310 --> 00:01:36.450
There's no choice there.

21
00:01:36.480 --> 00:01:42.230
There's a diagram here which shows you some of the use cases for using API gateway.

22
00:01:42.250 --> 00:01:50.640
So it could be connected users with streaming dashboards, web and mobile applications, IOT, private applications

23
00:01:50.730 --> 00:01:52.740
within a VPC or on premises.

24
00:01:52.740 --> 00:01:55.020
So these could be anywhere basically.

25
00:01:55.020 --> 00:02:01.350
And then behind API Gateway you might have cloudwatch for your alarms and you can have an API Gateway

26
00:02:01.380 --> 00:02:08.310
cache so that you can cache your API for a better response times and then you can have your applications

27
00:02:08.580 --> 00:02:15.450
pretty much anywhere in a VPC or on premises and then you can have your AWS resources and it really

28
00:02:15.450 --> 00:02:17.910
can be pretty much any backend server.

29
00:02:17.910 --> 00:02:23.730
So you've got your API Gateway and then you've got your back-end services. A few more features worth

30
00:02:23.730 --> 00:02:29.520
noting so we talked about websockets as well as the REST apis, you've got authentication for

31
00:02:29.540 --> 00:02:38.340
IAM lambda authorizer functions, incognito user pools, you can log API usage for cloudtrail, you can use

32
00:02:38.340 --> 00:02:45.900
cloudwatch for setting various alarms, and you can use cloudformation templates for API creation. Also

33
00:02:45.930 --> 00:02:52.290
you can use a custom domain name so you can also integrate with the AWS web application firewall so

34
00:02:52.290 --> 00:02:58.260
that's for protecting your API as against web exploits so this is a security service and then you've

35
00:02:58.260 --> 00:03:05.670
got integration with AWS x-ray for triaging performance. Licenses you can access through the console

36
00:03:05.670 --> 00:03:12.270
the SDK, there's some APIs here that you can use if your language isn't supported by the SDK then

37
00:03:12.270 --> 00:03:18.210
there's the CLI and the tools for Windows powershell. Another thing that's worth noting is that lambda

38
00:03:18.450 --> 00:03:25.380
and API Gateway form the app facing parts of the AWS service infrastructure so this sometimes comes

39
00:03:25.380 --> 00:03:31.020
up in exam questions where they might ask you to identify or they might ask you what would go along

40
00:03:31.020 --> 00:03:37.800
with one of these services as part of the app facing part of the AWS service infrastructure so that's

41
00:03:37.890 --> 00:03:38.120
it.

42
00:03:38.160 --> 00:03:41.560
These are basically your front-end services for your application.

43
00:03:41.850 --> 00:03:47.860
Let's just head back to the diagram now and we've covered a bit of this on on the web page that we just

44
00:03:47.860 --> 00:03:48.340
looked at.

45
00:03:48.370 --> 00:03:54.370
But again you've got your front-end so you've got your clients could be a mobile client a service could

46
00:03:54.370 --> 00:04:00.430
be a Web site, could be IOT, could be pretty much anything on the Internet that's going to talk REST

47
00:04:00.430 --> 00:04:09.310
API using HTTPS to API Gateway. Then behind API Gateway you can have any AWS service basically but

48
00:04:09.310 --> 00:04:15.880
a few examples would be lambda and that's these to form the app facing part of the service infrastructure

49
00:04:16.000 --> 00:04:22.780
as we just mentioned it could be an AWS lambda public end-point or it could be a lambda function as

50
00:04:22.780 --> 00:04:30.790
within a VPC so it could be private and the same applies for application load balancers and EC2 instances.

51
00:04:30.900 --> 00:04:36.300
So these can be in public subnets or they can be in private subnet so they can have a public IP attached

52
00:04:36.300 --> 00:04:38.490
or they can be entirely private.

53
00:04:38.700 --> 00:04:42.780
And API Gateway can connect to any public endpoint as well.

54
00:04:42.810 --> 00:04:46.070
The next thing this cover is API Gateway endpoints.

55
00:04:46.440 --> 00:04:53.660
So there are three different types of endpoints. Originally API gateway came out with the edge optimized endpoint

56
00:04:53.700 --> 00:04:54.650
only.

57
00:04:54.790 --> 00:04:59.050
And in this case cloudfront is put in front of API gateway.

58
00:04:59.050 --> 00:05:04.270
And if you remember cloudfront is a content delivery network with points of presence all over the world

59
00:05:04.300 --> 00:05:10.170
so it's got hundreds of points of presence around the world and it will cache your information second

60
00:05:10.200 --> 00:05:13.460
cache anything form images right for you to stuff like API.

61
00:05:14.140 --> 00:05:20.860
And therefore if your user base is global then you can reduce your latency for requests that come from

62
00:05:20.920 --> 00:05:22.740
anywhere around the world.

63
00:05:22.750 --> 00:05:27.750
So that was a very good solution if you are a global company or you have a global user base.

64
00:05:28.120 --> 00:05:32.090
The next type of endpoint that was introduced was the regional endpoint.

65
00:05:32.260 --> 00:05:38.990
And in this case it's optimized for when your user base or your services that are using API Gateway

66
00:05:39.000 --> 00:05:40.060
are within a region.

67
00:05:40.060 --> 00:05:46.560
Now there could still be outside of the actual AWS region but they might be within a geographical region.

68
00:05:46.570 --> 00:05:52.300
So you don't have to utilize those points of presence around the world that cloudfront has.

69
00:05:52.300 --> 00:05:58.930
Instead you're keeping it within a region and optionally you can then place your own CDN in front of

70
00:05:59.080 --> 00:06:04.340
API gateway for caching and you can also protect with the Web Application Firewall.

71
00:06:04.360 --> 00:06:10.780
The third type of endpoint that was introduced was the private endpoint and this was late 2018.

72
00:06:10.780 --> 00:06:15.000
So again it's something that's relatively new but should be appearing on the exam.

73
00:06:15.010 --> 00:06:20.040
Now in this case your services are within the same VPC.

74
00:06:20.050 --> 00:06:21.400
So this really is private.

75
00:06:21.400 --> 00:06:23.240
This is within AWS.

76
00:06:23.410 --> 00:06:29.050
You could have resources connected over direct connect so that could be your own on premise network.

77
00:06:29.980 --> 00:06:37.170
But essentially what you're saying is you're keeping it's into your secure private IP space so that's

78
00:06:37.170 --> 00:06:42.610
it for this quick overview of API Gateway and what we're gonna do now is go into some labs where we're

79
00:06:42.610 --> 00:06:44.670
going to start building out some solutions.

