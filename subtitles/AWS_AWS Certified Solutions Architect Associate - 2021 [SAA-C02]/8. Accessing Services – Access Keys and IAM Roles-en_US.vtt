WEBVTT
1
00:00:05.050 --> 00:00:10.990
There are going to be multiple situations where you need your easy to instance to be able to connect

2
00:00:10.990 --> 00:00:12.070
to another service.

3
00:00:12.850 --> 00:00:18.520
For instance, you might want to save data to a storage service or you might want to save information

4
00:00:18.520 --> 00:00:20.080
to a database.

5
00:00:20.710 --> 00:00:22.750
So there are a couple of ways that you can do that.

6
00:00:23.470 --> 00:00:25.900
The first is what we call access keys.

7
00:00:26.530 --> 00:00:30.640
Now, access keys are configured on the EC2 instance.

8
00:00:30.970 --> 00:00:36.310
This is some secret information that is stored on the file system of the instance.

9
00:00:36.970 --> 00:00:43.750
Now, the access keys are actually associated with the user accounts, and the user account has a policy.

10
00:00:44.050 --> 00:00:46.060
So it has some permissions assigned to it.

11
00:00:46.570 --> 00:00:56.070
Now, the access keys will pick up whatever permissions the policy allows that user and then the in-situ

12
00:00:56.080 --> 00:01:02.650
instance using the permissions assigned to the user account is able to connect to, in this case, a

13
00:01:02.650 --> 00:01:03.670
storage service.

14
00:01:04.000 --> 00:01:05.150
So that's how that works.

15
00:01:05.170 --> 00:01:07.390
Now that is a bit of a downside.

16
00:01:07.780 --> 00:01:13.270
The downside is that the access keys are stored on the file system of the instance, and it's not a

17
00:01:13.270 --> 00:01:16.300
very secure way of storing that information.

18
00:01:17.020 --> 00:01:23.230
So if the instance was compromised, it's possible an attacker could get access to that information

19
00:01:23.770 --> 00:01:24.650
in the next lesson.

20
00:01:24.670 --> 00:01:29.950
You'll see a hands on and I'll demonstrate how accessible this information is.

21
00:01:30.130 --> 00:01:31.480
Now there is another way.

22
00:01:32.170 --> 00:01:35.860
So the other way is when we use something called an instance profile.

23
00:01:36.520 --> 00:01:43.660
The instance profile is a way that we can connect an IAM role to our active instance.

24
00:01:44.410 --> 00:01:48.130
So in this case, the instance has an I am role attached to it.

25
00:01:49.110 --> 00:01:57.690
That role is then assumed by the AEC to instant, and the easy to instance will gain access to whatever

26
00:01:57.690 --> 00:02:04.050
permissions the policy attached to the role provides and is then able to access these three buckets.

27
00:02:04.380 --> 00:02:09.300
The great thing about this is there's no credentials stored on the EC2 instance.

28
00:02:09.720 --> 00:02:16.230
These are two instance has assumed the role, and it's been given the permissions assigned to that role,

29
00:02:16.680 --> 00:02:20.520
but it doesn't actually have any credentials stored on its file system.

30
00:02:21.240 --> 00:02:28.950
So this can be a much more secure way of allowing your EC2 instance to access AWG services.

31
00:02:29.610 --> 00:02:32.430
And in the next lesson, we're going to see this in action.

