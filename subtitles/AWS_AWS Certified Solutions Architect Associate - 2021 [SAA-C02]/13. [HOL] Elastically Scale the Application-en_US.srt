1
00:00:05,230 --> 00:00:12,490
Welcome back, we're now going to Elastic Skylight application by adding some stress to the CPU's on

2
00:00:12,490 --> 00:00:18,580
our instances and using a dynamic scaling policy to actually respond to that and add more instances

3
00:00:18,580 --> 00:00:19,090
for us.

4
00:00:19,390 --> 00:00:22,030
So let's go back to the console back in the console here.

5
00:00:22,030 --> 00:00:23,320
The first thing I'm going to do.

6
00:00:23,680 --> 00:00:25,990
We still have our EC2 instances running.

7
00:00:26,290 --> 00:00:31,000
I'm going to go to monitoring with one of them selected and I'm going to enable detailed monitoring

8
00:00:31,000 --> 00:00:31,300
now.

9
00:00:31,420 --> 00:00:36,940
This can come with a small cost, so you don't have to do this, but it makes things a bit faster.

10
00:00:37,690 --> 00:00:43,330
I'm going to get some monitoring again for the second instance and enable detailed monitoring, and

11
00:00:43,330 --> 00:00:47,980
that means the metrics will be sent to Cloud Watch every one minute rather than five.

12
00:00:48,310 --> 00:00:54,940
Next, I'm going to come down to my auto scaling group and we're going to create a target tracking scaling

13
00:00:54,940 --> 00:00:55,450
policy.

14
00:00:56,140 --> 00:01:02,860
So select HD One, go to automatic scaling, choose dynamic scaling policy.

15
00:01:03,610 --> 00:01:08,590
It's going to select target tracking by default, average CPU utilization.

16
00:01:09,070 --> 00:01:14,050
And we can put it as, let's say, 60 percent and just create that scaling policy.

17
00:01:14,380 --> 00:01:16,660
So that's going to create an alarm for us.

18
00:01:16,900 --> 00:01:23,410
And when that alarm gets triggered, EC2 auto scaling will launch more instances as are needed.

19
00:01:23,800 --> 00:01:28,780
So now we need to generate some load on our CPU's because at the moment they're going to be sitting

20
00:01:28,780 --> 00:01:30,580
idle, not really doing anything.

21
00:01:31,330 --> 00:01:36,730
So back in instances, I'm going to select each of my instances and connect.

22
00:01:36,970 --> 00:01:39,190
So we're going to use instance connect.

23
00:01:39,550 --> 00:01:40,330
That's one of them.

24
00:01:40,870 --> 00:01:41,740
Let's come back.

25
00:01:42,460 --> 00:01:45,430
Let's choose the other instance do the same thing.

26
00:01:45,940 --> 00:01:49,300
And now I'm connected to both of my instances.

27
00:01:49,810 --> 00:01:50,950
In your course download.

28
00:01:51,250 --> 00:01:58,030
You'll find in the auto scaling and LP directory this install stress utility to what we need to do is

29
00:01:58,030 --> 00:01:59,770
copy each of these commands.

30
00:01:59,770 --> 00:02:03,760
So I'm going to copy this command and we're going to install the stress utility.

31
00:02:04,450 --> 00:02:07,120
I'm going to pay that into my Linux terminal.

32
00:02:07,360 --> 00:02:13,030
Hit enter in my other than it's terminal, I'm going to hit enter with the same command, so I've now

33
00:02:13,030 --> 00:02:16,120
installed it on behalf of my ISA two instances.

34
00:02:16,360 --> 00:02:18,520
And this is the actual stress utility.

35
00:02:18,520 --> 00:02:22,420
So these are just the Linux extras for the Amazon Linux to Amy.

36
00:02:22,780 --> 00:02:25,480
Now we're actually going to install the stress utility.

37
00:02:25,660 --> 00:02:27,340
So back on the command line here.

38
00:02:27,670 --> 00:02:29,860
Let's enter that and.

39
00:02:31,070 --> 00:02:36,980
That should be installed do the same on our other two instance, and we have that installed now, I'm

40
00:02:36,980 --> 00:02:42,530
just going to clear the screen here, bring this down and I'm going to type the command stress space

41
00:02:42,740 --> 00:02:44,590
that see six.

42
00:02:45,020 --> 00:02:48,080
And that should add quite a bit of load to my CPU.

43
00:02:48,320 --> 00:02:50,870
Let's do the same thing now for our other instance.

44
00:02:51,200 --> 00:02:57,080
So again, I'll clear the screen type stress test the six and hit enter.

45
00:02:57,860 --> 00:03:02,270
So let's go back and monitor what's happening back in the ACG management console.

46
00:03:02,600 --> 00:03:08,030
If we select our instances and go to monitoring soon, we should start seeing some information, so

47
00:03:08,030 --> 00:03:10,220
we should start seeing the CPU going up.

48
00:03:10,880 --> 00:03:14,420
Now, another thing we can do is go to Cloud Watch.

49
00:03:14,660 --> 00:03:19,400
Let's open this up in another tab and in Cloud Watch, we can see we have an alarm.

50
00:03:20,330 --> 00:03:26,330
So if I go to all alarms, we can see we have this target tracking alarm that's being created here.

51
00:03:26,900 --> 00:03:33,410
So that's watching for those metrics that are coming in and it's not in an alarm state at this stage.

52
00:03:33,420 --> 00:03:36,770
So what's going to happen soon is hopefully it will go into an alarm state.

53
00:03:37,310 --> 00:03:44,060
Now another thing we can do is go to metrics we can choose to, per instance, metrics, and then we

54
00:03:44,060 --> 00:03:45,590
can see the metrics coming in.

55
00:03:46,130 --> 00:03:51,470
So, for example, we can come back, take the instance I.D. of one of my instances.

56
00:03:51,740 --> 00:03:53,000
Let's plug that in here.

57
00:03:53,510 --> 00:03:55,760
Hit enter to filter the display.

58
00:03:56,270 --> 00:03:58,700
Come down to CPU utilization.

59
00:03:58,820 --> 00:04:03,890
And so very soon we should start seeing some data coming back and we're going to see the load on the

60
00:04:03,890 --> 00:04:04,460
CPU.

61
00:04:04,850 --> 00:04:08,090
If you want to, you can also add your other instance.

62
00:04:08,100 --> 00:04:16,640
So let's take the instance side of this instance and then come back and it's filter by this instance.

63
00:04:16,650 --> 00:04:20,390
Remove that one and find the CPU utilization.

64
00:04:21,410 --> 00:04:24,710
And now we're going to graph both of these CPUs.

65
00:04:24,830 --> 00:04:29,060
Another place you can watch, what's happening is under auto scaling groups.

66
00:04:29,300 --> 00:04:32,270
We choose our auto scanning group and go to activity.

67
00:04:32,570 --> 00:04:37,790
Once our alarm has been breached, we should then see auto scaling respond that we'll see some activity

68
00:04:37,790 --> 00:04:40,730
in here by changing my periods one minute here.

69
00:04:41,090 --> 00:04:43,190
I can now see the spike happening.

70
00:04:43,190 --> 00:04:49,910
You can see the CPU is going right up to about 100 percent and we can see that we no longer have that

71
00:04:49,910 --> 00:04:51,080
healthy alarm.

72
00:04:51,320 --> 00:04:52,460
It's actually been triggered.

73
00:04:52,760 --> 00:04:56,660
So if I choose alarm, we can see that it's an an alarm state.

74
00:04:56,990 --> 00:05:04,280
So let's go back to auto scaling, and let's refresh this page and we can see that we've actually got

75
00:05:04,280 --> 00:05:06,050
some activity happening.

76
00:05:06,050 --> 00:05:10,220
So we've got some instances being launched in response to that alarm.

77
00:05:10,760 --> 00:05:15,710
And it's going to take it up to the maximum allowed instances which we defined as full.

78
00:05:16,370 --> 00:05:23,270
So coming back to instances, we should now see that we have four instances running now.

79
00:05:23,270 --> 00:05:27,950
We'll give these a couple of minutes and then once they're in service, what we should see is we're

80
00:05:27,950 --> 00:05:33,830
able to then use our load balancer DNS name and we're going to load balance between them because they're

81
00:05:33,830 --> 00:05:38,060
actually assigned automatically to the load balance of through the target group.

82
00:05:38,390 --> 00:05:40,190
Remember, we have the auto scaling group.

83
00:05:40,400 --> 00:05:47,390
We attached the target group to the auto scaling group and the load balancer has the target group associated

84
00:05:47,390 --> 00:05:47,690
with it.

85
00:05:47,990 --> 00:05:54,320
That means when auto scaling launches an instance, it automatically gets registered as a target in

86
00:05:54,320 --> 00:05:58,520
the target group, and the load balancer can start distributing connections to it.

87
00:05:58,670 --> 00:06:00,350
So let's just give this a few minutes.

88
00:06:00,740 --> 00:06:02,750
It looks like our instances are running now.

89
00:06:02,990 --> 00:06:08,120
So let's go to load balancers, copy the DNS name and open a new browser tab.

90
00:06:08,480 --> 00:06:14,510
I'll paste the DNS name in, and let's start refreshing our browser and you can see we're moving between

91
00:06:14,510 --> 00:06:17,450
instances in free, different availability zones.

92
00:06:17,480 --> 00:06:18,740
Now we only added free.

93
00:06:18,920 --> 00:06:21,260
So there'll be two instances in one A-Z.

94
00:06:21,890 --> 00:06:25,340
But as you can see, we're quite evenly distributing between them.

95
00:06:25,430 --> 00:06:29,960
So that's how elastic scaling works with its target tracking scaling policy.

96
00:06:30,350 --> 00:06:34,730
For now, we're not going to need to use our target tracking scaling policy anymore.

97
00:06:35,240 --> 00:06:41,540
So I'm going to come back to auto scaling groups, go into my ASG automatic scaling.

98
00:06:41,900 --> 00:06:47,810
And with the target tracking policy selected, I'm going to delete it now that we've removed the scaling

99
00:06:47,810 --> 00:06:48,320
policy.

100
00:06:48,590 --> 00:06:50,630
I'm just going to show you back on the details there.

101
00:06:51,020 --> 00:06:55,670
Do you remember where we set the design capacity to two, where you can see it changed?

102
00:06:55,940 --> 00:07:01,040
And that's because the target tracking scaling policy updated the design capacity.

103
00:07:01,310 --> 00:07:06,650
And if you look through the activity here, you'll see you actually mention that it updated the design

104
00:07:06,650 --> 00:07:08,150
capacity from two to four.

105
00:07:08,750 --> 00:07:14,330
Let's click on Edit, and I'm going to put it back down to two again, and let's click on Update.

106
00:07:14,900 --> 00:07:17,300
So that should terminate a couple of instances.

107
00:07:17,750 --> 00:07:19,010
And that's it for this lesson.

108
00:07:19,020 --> 00:07:20,090
Leave everything running.

109
00:07:20,090 --> 00:07:22,910
We will be coming back to it again and another hands on.

