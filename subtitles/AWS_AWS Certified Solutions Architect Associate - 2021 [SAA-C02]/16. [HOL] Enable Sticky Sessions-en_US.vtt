WEBVTT
1
00:00:05.320 --> 00:00:10.690
In this lesson, we're going to have a look at the sticky sessions behavior and see how it works in

2
00:00:10.690 --> 00:00:11.260
real life.

3
00:00:11.560 --> 00:00:17.710
Back in the issue to management console, you should still have your two instances running from earlier

4
00:00:17.710 --> 00:00:18.490
in this section.

5
00:00:19.000 --> 00:00:21.580
And these are in two different availability zones.

6
00:00:22.060 --> 00:00:29.430
Now, what I want to do now is just pop down to target groups and tag Albi.

7
00:00:29.440 --> 00:00:33.220
It's the target group that these instances are actually registered to.

8
00:00:33.850 --> 00:00:36.940
Now under attributes, this is where we can enable stickiness.

9
00:00:37.420 --> 00:00:44.440
Now, before we do that, let's just quickly take the load balancer DNS and in a new browser tab, I'm

10
00:00:44.440 --> 00:00:49.960
going to paste this in hit enter and I'm going to hit refresh on my browser.

11
00:00:50.440 --> 00:00:58.420
And every time I refresh, I should move between these two different instances and UX 1a and 1b.

12
00:00:58.690 --> 00:00:59.830
And you can see that's working.

13
00:01:00.130 --> 00:01:10.480
So coming back to EC2, let's go to target groups TG Albi attributes and then edit as a couple of things

14
00:01:10.480 --> 00:01:11.830
I want to mention while we're here.

15
00:01:12.370 --> 00:01:14.560
One is the load balancing algorithm.

16
00:01:14.950 --> 00:01:21.010
By default, the load balancer will select targets to distribute connections to in a round robin fashion.

17
00:01:21.220 --> 00:01:22.660
So it's just going to connect to one.

18
00:01:22.810 --> 00:01:28.000
Then the next one, then the next one, and it will attempt to make the distribution even in that manner.

19
00:01:28.750 --> 00:01:36.310
You can also choose least outstanding requests, and this will actually see how many requests are outstanding

20
00:01:36.310 --> 00:01:37.360
for a load balancer.

21
00:01:37.660 --> 00:01:44.500
So there's a bit more intelligence in working out what load your particular S2 instance actually has.

22
00:01:44.860 --> 00:01:49.810
I'm going to leave it on round robin, and here we have stickiness under stickiness type.

23
00:01:49.810 --> 00:01:53.770
You can see there's two different types of cookie that we can enable.

24
00:01:53.780 --> 00:01:58.210
One is called a load balance that generates a cookie and is an application based cookie.

25
00:01:58.480 --> 00:02:01.660
Now, actually, both of these are generated by the load balancer.

26
00:02:01.660 --> 00:02:03.490
They're not generated by the application.

27
00:02:04.420 --> 00:02:07.720
The key difference is with a load balance that generates a cookie.

28
00:02:07.720 --> 00:02:11.410
The cookie name is always IWC Albi.

29
00:02:12.040 --> 00:02:16.900
So if you have multiple layers of load balancer in your architecture, then the cookie name is going

30
00:02:16.900 --> 00:02:18.400
to be the same and that can be a problem.

31
00:02:19.030 --> 00:02:25.540
You can then use an application based cookie and then for each target group, you can specify a different

32
00:02:25.540 --> 00:02:26.080
cookie name.

33
00:02:26.740 --> 00:02:32.530
We're just going to leave it on load balancer generated cookie and save changes that might take a few

34
00:02:32.530 --> 00:02:34.990
seconds to actually update in the background.

35
00:02:35.500 --> 00:02:43.090
But let's now go across to our web browser, and I'm going to refresh and I'm hitting refresh and nothing's

36
00:02:43.090 --> 00:02:43.570
changing.

37
00:02:43.960 --> 00:02:49.930
So we're actually stuck now to the easy two instance in U.S. East 1B.

38
00:02:50.590 --> 00:02:51.160
So that's it.

39
00:02:51.160 --> 00:02:53.350
That's how sticky Sessions actually works.

40
00:02:53.650 --> 00:02:55.090
And that's it for this lesson.

41
00:02:55.420 --> 00:03:01.390
All I'm going to do now is just go back and disable sticky sessions because we do want to use this low

42
00:03:01.390 --> 00:03:03.520
balancer and this target group again.

43
00:03:03.850 --> 00:03:06.580
And I do want it to go back to dynamic.

44
00:03:06.970 --> 00:03:07.450
So that's it.

45
00:03:07.450 --> 00:03:09.160
For now, I will see you in the next lesson.

