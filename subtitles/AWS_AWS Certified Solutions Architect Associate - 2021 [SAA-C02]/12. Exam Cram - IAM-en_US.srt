1
00:00:01,990 --> 00:00:07,110
Welcome to the exam cram for Section 16 and we're starting off with 

2
00:00:07,120 --> 00:00:13,750
Identity and Access Management. So IAM is used to security control individual and group access to

3
00:00:13,760 --> 00:00:16,310
AWS resources. With IAM

4
00:00:16,330 --> 00:00:25,620
we can manage users groups access policies roles user credentials user password policies and also multi

5
00:00:25,620 --> 00:00:33,370
factor authentication and API keys for programmatic access. By default new users are created with no access

6
00:00:33,370 --> 00:00:34,960
to any IAM services.

7
00:00:34,960 --> 00:00:37,360
That's a key one that comes up in exam questions.

8
00:00:37,360 --> 00:00:43,300
If you create a new user and you don't assign them to a group or assign any permissions directly to

9
00:00:43,300 --> 00:00:46,290
them they're not going to have any permissions at all.

10
00:00:46,420 --> 00:00:54,100
So you have to explicitly grant permissions to allow a user to access an AWS service. IAM or IAM is

11
00:00:54,100 --> 00:00:57,040
not used for application level authentication.

12
00:00:57,090 --> 00:00:59,740
So your application might use some other mechanism.

13
00:00:59,740 --> 00:01:05,410
It could be something like Active Directory or samba directory service or some other third party service

14
00:01:05,500 --> 00:01:10,060
or if you have a mobile application it could be using something like AWS Cognito.

15
00:01:10,060 --> 00:01:12,690
You can enable identity Federation.

16
00:01:12,820 --> 00:01:19,060
So this is includes Active Directory and Facebook and other identity providers which means that you

17
00:01:19,060 --> 00:01:26,860
can allow secure access to resources in your account without the user needing to have an IAM account.

18
00:01:26,860 --> 00:01:31,340
So they might have an account in Active Directory rather than an account in

19
00:01:31,420 --> 00:01:33,010
IAM. With MFA

20
00:01:33,010 --> 00:01:38,290
you can enable and enforce this at the account level or for individual users in the accounts.

21
00:01:38,290 --> 00:01:40,130
Now the best practice today..

22
00:01:40,130 --> 00:01:45,940
It has changed a couple of times in the last year but the best practice at the moment is that you should

23
00:01:45,940 --> 00:01:54,930
use MFA for all users and use U2F or hardware MFA devices for all privileged users.

24
00:01:54,970 --> 00:01:58,570
They used to say just enable MFA for the root account.

25
00:01:58,570 --> 00:02:02,350
Then they changed it to enable MFA for all privileged users.

26
00:02:02,350 --> 00:02:07,930
Now they're saying enable it for everyone but use a hardware device to make it even more secure for

27
00:02:07,930 --> 00:02:09,190
any privileged users.

28
00:02:09,190 --> 00:02:13,460
Remember that IAM is global so it doesn't apply to regions.

29
00:02:13,480 --> 00:02:19,300
That means if you create an account and IAM that account can be used anywhere in the world for instance

30
00:02:19,420 --> 00:02:24,400
exam questions sometimes come up and say something along the lines of a company is setting up a new

31
00:02:24,400 --> 00:02:31,120
office in another part of the world and you need to work out what do you do in terms of setting the

32
00:02:31,210 --> 00:02:33,100
user accounts up for that office.

33
00:02:33,100 --> 00:02:36,960
Well of course you don't need to do anything because IAM is a global service.

34
00:02:37,000 --> 00:02:44,020
The root account is the accountant that's created when you set up your IAM account and that has complete administrative

35
00:02:44,020 --> 00:02:48,460
access and by default it's the only account that will have complete administrative access.

36
00:02:48,460 --> 00:02:52,360
It's best practice to not use the root account for anything other than billing.

37
00:02:52,400 --> 00:02:57,820
That's the only account that has access to billing information and that's the only reason you should

38
00:02:57,820 --> 00:03:00,400
use it. In terms of authentication methods.

39
00:03:00,430 --> 00:03:02,100
So we've got the console password.

40
00:03:02,320 --> 00:03:08,480
So as we know this is when you log in to the management console with a user account and you have a password

41
00:03:08,500 --> 00:03:11,470
and a user name and you have the password.

42
00:03:11,470 --> 00:03:17,890
We then have access keys so these are the combination of the Access Key I.D. and the secret access key.

43
00:03:18,130 --> 00:03:25,120
Access keys are used for making programmatic calls to AWS services using the API so you can put those

44
00:03:25,120 --> 00:03:31,000
in program code or the command prompt. Remember it's a best practice not to do that at least not to embed

45
00:03:31,000 --> 00:03:33,280
it in some code somewhere.

46
00:03:33,280 --> 00:03:36,790
You've got to keep these pretty secure. Then we have service certificates.

47
00:03:36,790 --> 00:03:39,620
These can be used to authenticate with some AWS

48
00:03:39,630 --> 00:03:47,500
services and AWS recommend that you use the AWS certificate manager to provision and manage those certificates.

49
00:03:47,500 --> 00:03:54,610
IAM users are an entity that represents a person an individual or a service and they can be assigned

50
00:03:54,760 --> 00:03:59,260
an access key I.D. and secret access key, so that's for the programmatic access so we've seen where

51
00:03:59,260 --> 00:04:05,440
we've created all individual user account and then we can create access keys for those user accounts

52
00:04:06,220 --> 00:04:10,190
and then you can get a password for access to the management console as well.

53
00:04:10,270 --> 00:04:15,940
And remember you can have one or the other or both of these so you can enable a user account so they

54
00:04:15,940 --> 00:04:22,150
only have access to the management console or you can enable them to also have programmatic access or

55
00:04:22,150 --> 00:04:24,370
just given programmatic access.

56
00:04:24,370 --> 00:04:29,310
Users can also be created to represent applications and that's known as a service account.

57
00:04:29,320 --> 00:04:36,610
We then have groups so remember we use groups to create a collection of users and then attach a policy.

58
00:04:36,610 --> 00:04:43,930
So you're using a group to assign permissions to multiple users a group not an identity so you can't

59
00:04:43,930 --> 00:04:51,640
actually identify or specify the group name in an iron policy but what you can do is apply a policy

60
00:04:51,640 --> 00:04:55,820
to the group so you use groups to assign permissions to users.

61
00:04:56,140 --> 00:04:59,520
Always use the principle of least privilege when assigning permissions.

62
00:04:59,530 --> 00:05:04,410
So only give people the minimum amount of privileges they need to do their job.

63
00:05:04,410 --> 00:05:06,960
That's a security best practice.

64
00:05:07,050 --> 00:05:14,440
You can't miss groups say can't put one group inside another group moving on to roles these are created

65
00:05:14,530 --> 00:05:17,380
and then assumed by a trusted entity.

66
00:05:17,380 --> 00:05:24,370
So we remember that if we wanted to give our EC2 instance access to Amazon S3 we create a role

67
00:05:24,370 --> 00:05:28,770
that had the privileges that allowed to read and write to S3.

68
00:05:28,780 --> 00:05:35,530
And then we assign that to the EC2 instance it can then assume that role and perform actions against

69
00:05:35,530 --> 00:05:36,130
S3.

70
00:05:36,130 --> 00:05:42,550
So that means that you're delegating permissions to resources without using those permanent credentials.

71
00:05:42,580 --> 00:05:49,000
So remember that this is how you can get around having to embed those access keys into code which is

72
00:05:49,000 --> 00:05:50,530
a big security no no.

73
00:05:50,530 --> 00:05:56,110
So both uses and services can assume roles to obtain temporary security or credentials that they then

74
00:05:56,110 --> 00:06:02,800
use to make API calls and think of this as being delegation and there's no credentials so no password

75
00:06:02,830 --> 00:06:03,790
and no access key.

76
00:06:03,790 --> 00:06:08,560
So much more secure than using passwords or access keys in your code.

77
00:06:08,560 --> 00:06:10,210
So we then have the policy itself.

78
00:06:10,240 --> 00:06:16,480
So these are the documents that actually define the permissions to be applied to the users groups or

79
00:06:16,480 --> 00:06:18,730
rows to which they are assigned.

80
00:06:18,730 --> 00:06:25,300
They're written in JSON using key value pairs all permissions are implicitly denied so that just means

81
00:06:25,570 --> 00:06:32,080
that unless you explicitly define a permission then it's just going to be denied by default.

82
00:06:32,230 --> 00:06:37,300
If there are multiple conflicting statements so something is allowed but it's restricted somewhere else

83
00:06:37,840 --> 00:06:40,240
then the most restrictive policy will be applied.

84
00:06:40,720 --> 00:06:44,950
So let's have another look at IAM best practices, so there's quite a few of these.

85
00:06:44,950 --> 00:06:48,710
I recommend that you actually have a look on the AWS Web site.

86
00:06:48,790 --> 00:06:54,310
Just search for IAM best practices on google and you'll find the article and just make sure you're familiar

87
00:06:54,310 --> 00:06:55,090
with these.

88
00:06:55,090 --> 00:07:01,090
So firstly lock away your AWS account root user access keys and better still if you don't need them

89
00:07:01,210 --> 00:07:03,230
delete them.

90
00:07:03,360 --> 00:07:08,700
You should create individual IAM users so don't share accounts will use the administrative accounts.

91
00:07:08,760 --> 00:07:15,890
Always use groups to assign permissions to IAM users so that means that you can create the permission

92
00:07:15,890 --> 00:07:18,300
policies once and apply them to a group.

93
00:07:18,320 --> 00:07:23,630
And that means that lots of users in that group will have those permissions always grant these privilege

94
00:07:23,780 --> 00:07:29,360
only give people the access they need get started using permissions with AWS to manage policy.

95
00:07:29,360 --> 00:07:32,990
So this means used to manage policies that AWS created.

96
00:07:32,990 --> 00:07:37,850
So there's some pre configured policies that you can use and that would just make life easier and make

97
00:07:37,850 --> 00:07:44,360
sure that especially when an organization is using the cloud for the first time and they're not that

98
00:07:44,360 --> 00:07:49,340
advanced with creating policies it means there's less chance of human error.

99
00:07:49,340 --> 00:07:52,900
Use custom managed policies instead of in-line policies.

100
00:07:52,940 --> 00:07:58,340
So what this means is use managed policies where you can define everything in one place and manage it

101
00:07:58,340 --> 00:08:03,170
in one place rather than inline so inline means that you create the policy and you attach it to the

102
00:08:03,170 --> 00:08:09,020
user directly or the service directly whereas a managed policy will be something centrally that can

103
00:08:09,020 --> 00:08:10,540
be managed in one place.

104
00:08:10,550 --> 00:08:15,590
Now if you have inline policies and you needed to make a change you'd have to do it on every user that

105
00:08:15,590 --> 00:08:20,630
you've created and assign that policy to use access levels to review and permission.

106
00:08:20,660 --> 00:08:26,450
So this just means that you should regularly review the amount of access your users have through that

107
00:08:26,480 --> 00:08:27,840
IAM permissions.

108
00:08:27,950 --> 00:08:32,930
So make sure that you're monitoring and making sure that people don't have more access than they need

109
00:08:33,740 --> 00:08:39,680
configure a strong password policy so obviously a stronger passwords harder to crack. Enable MFA.

110
00:08:39,710 --> 00:08:47,570
So again the latest advice is to enable MFA for all users and use hardware MFA devices for privileged

111
00:08:47,570 --> 00:08:52,250
users. Use roles for applications that run on EC2 instances.

112
00:08:52,250 --> 00:08:53,750
We've done this in the labs.

113
00:08:53,750 --> 00:08:58,820
This is about where we want to use a role to provide access to EC2 say.

114
00:08:58,850 --> 00:09:01,160
In the example again of S3.

115
00:09:01,190 --> 00:09:06,280
We can assign a role to EC2 and EC2 instance can then access s3.

116
00:09:06,380 --> 00:09:11,750
The other way of doing it is to use access keys where we actually have to copy the access keys onto

117
00:09:11,750 --> 00:09:15,620
the EC2 instance and that's a big security concern.

118
00:09:15,620 --> 00:09:22,490
Use roles to delegate permissions again use those roles to delegate permissions rather than using passwords

119
00:09:22,790 --> 00:09:25,110
rather than using access keys.

120
00:09:25,250 --> 00:09:27,370
Never share access keys.

121
00:09:27,440 --> 00:09:30,280
Remember whoever has access to your access keys.

122
00:09:30,410 --> 00:09:37,100
They can then use those access keys and whatever privileges are assigned to the account where those

123
00:09:37,100 --> 00:09:38,960
access keys are being created.

124
00:09:38,960 --> 00:09:41,800
Those users will be able to use those permissions.

125
00:09:41,810 --> 00:09:48,410
Make sure you rotate credentials regularly so with those access keys delete them and rotate them regularly.

126
00:09:48,440 --> 00:09:51,230
Always remove unnecessary credentials if you don't need them.

127
00:09:51,230 --> 00:09:52,170
Get rid of them.

128
00:09:52,220 --> 00:09:59,360
You can use conditions in policies to apply extra security so for instance a condition in a policy might

129
00:09:59,360 --> 00:10:07,060
say something like you are allowing access only if a request is coming from a specific IP address.

130
00:10:07,070 --> 00:10:10,540
Also always monitor activity in your AWS account.

