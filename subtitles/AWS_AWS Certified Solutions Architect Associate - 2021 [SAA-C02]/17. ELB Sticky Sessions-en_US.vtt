WEBVTT
1
00:00:02.020 --> 00:00:07.510
In this lesson I want to talk about a feature of Elastic Load Balancing called sticky sessions with

2
00:00:07.510 --> 00:00:08.840
sticky sessions.

3
00:00:08.860 --> 00:00:15.700
A client is bound to a specific backhand instance for a period of time and the reason you might want

4
00:00:15.700 --> 00:00:21.640
to do that is because you have some kind of session state that's kept within the instance for the lifetime

5
00:00:21.640 --> 00:00:28.700
of the session so you don't want any new requests to go to a different backend instance.

6
00:00:28.720 --> 00:00:35.890
So the way this works is a client connects through the load balancer and is distributed to instance

7
00:00:35.890 --> 00:00:37.060
one now.

8
00:00:37.100 --> 00:00:42.310
A cookie is generated by the low violence or in the case of a classic low balance so it can actually

9
00:00:42.310 --> 00:00:44.270
be generated by an application.

10
00:00:44.530 --> 00:00:49.990
But otherwise it's a load balance that generates a cookie and for the lifetime of that cookie the client

11
00:00:50.200 --> 00:00:53.470
will always be bound to the same back end instance.

12
00:00:53.500 --> 00:01:00.370
Now eventually the cookie will expire and in that case the next time a request comes from that same

13
00:01:00.370 --> 00:01:01.080
client.

14
00:01:01.240 --> 00:01:05.910
The elastic load balancer will route again and this time it takes it to instance for.

15
00:01:05.950 --> 00:01:07.540
And again it has a cookie.

16
00:01:07.630 --> 00:01:13.480
And until that cookie expires the client will always be bound to the back end instance instance for

17
00:01:13.620 --> 00:01:20.020
in another scenario client free connects to client 6 for the lifetime of the cookie.

18
00:01:20.110 --> 00:01:23.890
But in this case instance sex becomes unhealthy for some reason.

19
00:01:23.890 --> 00:01:30.430
So what happens now is the client goes back to the low balance and the low balance that distributes

20
00:01:30.430 --> 00:01:34.360
the connection to a different instance and a new cookie is generated.

21
00:01:34.450 --> 00:01:40.330
So that's the way sticky sessions work and the behavior is slightly different for each type of load

22
00:01:40.330 --> 00:01:41.250
balancer.

23
00:01:41.290 --> 00:01:48.520
So for the application load balancer it's supported and the cookie name is always a WSJ LP and it is

24
00:01:48.520 --> 00:01:50.610
a load balance that generates a cookie.

25
00:01:50.650 --> 00:01:55.750
There's no support for application generated cookies with the network load balance because it's a layer

26
00:01:55.750 --> 00:01:59.570
for low balance so there's no support at all for sticky sessions.

27
00:01:59.650 --> 00:02:05.110
So you'd have to do that at another level with the classic load balancer sticky sessions are supported

28
00:02:05.500 --> 00:02:09.800
both low balances generated cookies and application generated cookies.

29
00:02:09.820 --> 00:02:13.090
So that's it for a very quick lesson on sticky sessions.

30
00:02:13.090 --> 00:02:14.100
See you in the next lap.

