1
00:00:02,410 --> 00:00:02,950
Hi guys.

2
00:00:02,950 --> 00:00:07,840
In this lab we're going to create a Kinesis stream and then what we're going to do is we're going to

3
00:00:07,840 --> 00:00:15,130
create a Lambda function and we're going to create an event source mapping such that when we put items

4
00:00:15,190 --> 00:00:23,020
into the stream, Lambda is polling the stream, and it finds that there's a new entry and then it runs

5
00:00:23,020 --> 00:00:29,550
the function and the function will simply write an event to CloudWatch logs so if you'll remember from

6
00:00:29,550 --> 00:00:36,660
the Lambda section of the course when it comes to stream based services like Kinesis and DynamoDB

7
00:00:37,200 --> 00:00:42,360
the event source mapping is configured on the Lambda side not on the stream side.

8
00:00:42,390 --> 00:00:47,010
So that's the opposite to a bucket for instance in S3 where you configure the event source

9
00:00:47,010 --> 00:00:48,360
mapping on the bucket.

10
00:00:48,540 --> 00:00:54,510
So it will be the Lambda function that does the polling and we're going to upload some records into

11
00:00:54,510 --> 00:00:55,240
a stream.

12
00:00:55,350 --> 00:00:58,280
Lambda is going to execute and write in events CloudWatch logs.

13
00:00:58,860 --> 00:01:01,650
So let's get over to the console.

14
00:01:02,060 --> 00:01:06,390
Now what we're going to be doing today is following a tutorial from AWS.

15
00:01:06,410 --> 00:01:11,910
So again guys this is to make things easy so that you guys can recreate what I'm doing.

16
00:01:11,990 --> 00:01:16,490
I don't want things to be too complex and you guys have problems.

17
00:01:16,490 --> 00:01:17,870
So what we're going to do.

18
00:01:17,960 --> 00:01:23,290
First thing we need to go to I am and we need to create the execution role.

19
00:01:23,300 --> 00:01:24,760
So let's just open up.

20
00:01:24,770 --> 00:01:26,440
I am so I'm in.

21
00:01:26,450 --> 00:01:27,130
IAM.

22
00:01:27,170 --> 00:01:31,820
I'm going to go to roles create role.

23
00:01:31,920 --> 00:01:37,650
We're going to choose Lambda and then we're going to choose next

24
00:01:41,450 --> 00:01:48,980
and what we want to find is the AWS Lambda Kinesas execution role.

25
00:01:49,000 --> 00:01:49,540
So there we go.

26
00:01:49,540 --> 00:01:56,110
We can just attach this row let's click next and what I'm going to do is I'm just going to paste in

27
00:01:56,110 --> 00:01:59,380
the name for the role which AWS suggested.

28
00:01:59,410 --> 00:02:04,540
So that's Lambda Kinesis - role and we're going to create the role.

29
00:02:04,540 --> 00:02:09,790
And what we're going to do now is go over to the command line and the first thing I need to do and by

30
00:02:09,790 --> 00:02:12,620
the way I've just created the directory called Kinesas.

31
00:02:12,640 --> 00:02:16,540
So I've just created it in my documents folder just create yourself a directory so you can put your

32
00:02:16,540 --> 00:02:17,810
files in here.

33
00:02:18,130 --> 00:02:22,030
And what we're going to do is we need to create an index.js file.

34
00:02:22,180 --> 00:02:32,590
So I'm gonna do nano index.js and I now need to paste in some code and I can say I've missed a

35
00:02:32,590 --> 00:02:37,870
letter at the beginning there so let's just put that in shouldn't be capitals just backspace that console

36
00:02:38,380 --> 00:02:45,980
and I'm just going to save this file so I now have my index.js file.

37
00:02:46,010 --> 00:02:57,850
I then need to run zip function.zip and then supply the name of that index file so we now have our

38
00:02:57,850 --> 00:03:00,520
function.zip in our index.js.

39
00:03:00,610 --> 00:03:05,620
The next thing we need to do is run a command that's going to create our function and to do that we

40
00:03:05,620 --> 00:03:09,820
need to get the ARN of our Lambda role that we created.

41
00:03:09,820 --> 00:03:13,890
So let's just go back and we can choose our role.

42
00:03:13,900 --> 00:03:17,530
And I'm going to copy the IRS on my clipboard.

43
00:03:17,740 --> 00:03:22,070
I'm now going to run this command which is AWS Lambda create function.

44
00:03:22,210 --> 00:03:23,410
I'm gonna give it the name.

45
00:03:23,470 --> 00:03:25,750
Process can e as records.

46
00:03:25,750 --> 00:03:30,980
I'm gonna supply the file the zip file that we just created function.zip.

47
00:03:31,270 --> 00:03:33,260
The handler is indexed or handler.

48
00:03:33,340 --> 00:03:35,530
This is a node.js function.

49
00:03:35,710 --> 00:03:37,540
And then I'm giving it the role.

50
00:03:37,600 --> 00:03:38,550
So let's just hit enter

51
00:03:41,360 --> 00:03:48,470
and now let's head back over to the console and let's go into Lambda and see if we've got our function

52
00:03:48,470 --> 00:03:48,950
created

53
00:03:53,290 --> 00:03:55,820
and that's our process can these records function.

54
00:03:56,050 --> 00:03:57,780
We now want to test our function.

55
00:03:57,820 --> 00:04:00,770
So let's head back over to the console.

56
00:04:01,250 --> 00:04:04,300
We're going to create a file called input dot t 60.

57
00:04:04,390 --> 00:04:15,010
So I'm gonna run nano input dot t t I'm going to paste in my code and I'm going to save the code we're

58
00:04:15,010 --> 00:04:21,370
now going to run a command to invoke the function with the file with the payload false of the input

59
00:04:21,370 --> 00:04:27,780
test file that we just created so we've got a status code of 200 that looks good.

60
00:04:27,930 --> 00:04:34,020
The next thing we want to do is create our Kinesis stream so we can run the command AWS Kinesis

61
00:04:34,110 --> 00:04:39,180
create stream stream name and we're giving it the name Lambda that's stream and we're just going to

62
00:04:39,180 --> 00:04:46,470
have one shard if we want to see the stream details we can run this command AWS Kinesis describe

63
00:04:46,470 --> 00:04:51,810
stream and we give it the stream name and this will also give us the ARN which we're going to need shortly.

64
00:04:51,960 --> 00:04:56,310
Let's just have a quick look in the console to see our stream.

65
00:04:56,540 --> 00:04:58,380
I'm gonna go to Kinesis

66
00:05:01,970 --> 00:05:08,790
and under data streams sure enough we've got our Lambda stream so that all its good we now need to create

67
00:05:08,820 --> 00:05:13,080
our events source mapping and there's a rather long command to do this.

68
00:05:13,080 --> 00:05:17,540
So it's AWS Lambda create dash event dash source dash mapping.

69
00:05:17,700 --> 00:05:26,550
We supply the function name events source which is the ARN for our Lambda stream which we just got from

70
00:05:26,550 --> 00:05:33,200
this output up here and then given a batch size of one hundred and the starting position of latest.

71
00:05:33,240 --> 00:05:37,040
So let's hit enter you may have noticed an error there.

72
00:05:37,150 --> 00:05:42,880
So let's just head back and what I need to do is I haven't copied the full ARN so I'm just going to

73
00:05:42,880 --> 00:05:44,110
backspace away here

74
00:05:48,430 --> 00:05:52,330
and what I need is the full ARN and so I missed out on that first bit.

75
00:05:52,330 --> 00:06:01,180
So let's copy that and then paste that in and hit enter and let's head back over to Lambda

76
00:06:06,060 --> 00:06:09,830
and have a look at our function.

77
00:06:09,900 --> 00:06:15,100
And sure enough we now have an event source mapping here and we can see we have a problem here.

78
00:06:15,150 --> 00:06:18,020
It says the function is not found in the database.

79
00:06:18,040 --> 00:06:23,210
Now I think this is because I've created this before while I was preparing for this lab.

80
00:06:23,850 --> 00:06:29,520
But let's have a look at how we can troubleshoot this so we can see that the output here actually said

81
00:06:29,520 --> 00:06:31,550
mapping already exists.

82
00:06:31,590 --> 00:06:39,330
Let's run AWS Lambda list dash event bash source bash

83
00:06:41,800 --> 00:06:47,520
mappings and we can see that there's a couple of events source mappings here.

84
00:06:47,760 --> 00:06:52,730
And what I want to do I don't need either of these and there's been a conflict.

85
00:06:52,770 --> 00:06:58,920
So what I'm going to do is I'm just going to delete these events source mappings and I can just run

86
00:06:58,920 --> 00:07:09,000
the command delete prevent dash source dash mapping and then I need to give the IDs.

87
00:07:09,000 --> 00:07:16,050
So I do dash dash UUID and I'm going to copy this one here and paste it

88
00:07:18,910 --> 00:07:25,150
and then I'm going to do the same for the other UUIDs I'm just going to backspace out copy this one

89
00:07:29,500 --> 00:07:33,640
and let's go back and list event source mappings and we don't have any anymore.

90
00:07:33,640 --> 00:07:35,700
So I'm going to go and see if I can rerun.

91
00:07:35,710 --> 00:07:40,060
Now before I do that I'm going to run the command but before I do that I just want to go over to Lambda

92
00:07:40,660 --> 00:07:46,970
and let's go outside of this function and just want to go back in and see if it's gone.

93
00:07:46,980 --> 00:07:50,340
So the trigger has gone so that's good.

94
00:07:50,340 --> 00:07:57,060
Now let's go back and try and recreate event source mapping okay.

95
00:07:57,080 --> 00:07:58,470
Now that looks a bit better.

96
00:07:58,550 --> 00:08:04,940
So let's head over to the console and again I'm just going to refresh and we've got our event source

97
00:08:04,940 --> 00:08:08,950
mapping and this time we don't have any issues it just says loss processing result.

98
00:08:08,960 --> 00:08:10,190
No records processed.

99
00:08:10,700 --> 00:08:12,270
So we're back on track.

100
00:08:12,320 --> 00:08:16,610
So let's head back over to the console and what we're going to do now is actually put a record into

101
00:08:16,610 --> 00:08:17,110
the stream.

102
00:08:18,050 --> 00:08:23,930
So we're in the console and I'm going to run this command AWS Kinesis put record and then I'll give

103
00:08:23,930 --> 00:08:27,730
it the stream name the partition key and some data and it just says hello.

104
00:08:27,740 --> 00:08:34,440
This is a test so we're going to run that and then let's just go in and change this too.

105
00:08:34,580 --> 00:08:36,240
This is another test.

106
00:08:36,380 --> 00:08:40,400
So we've sent a couple of records into the stream.

107
00:08:40,400 --> 00:08:45,710
So what should happen now according to our diagram is we've uploaded those records.

108
00:08:45,710 --> 00:08:52,040
They've gone into the stream Lambda should have pulled the stream and then written an event to cloud

109
00:08:52,070 --> 00:08:53,150
watch logs.

110
00:08:53,150 --> 00:08:58,640
So let's head over and we're gonna have a looking CloudWatch logs back in the Lambda console.

111
00:08:58,640 --> 00:09:04,750
Let's go to monitoring and view logs in CloudWatch.

112
00:09:04,920 --> 00:09:06,410
And so we've got this log stream.

113
00:09:06,450 --> 00:09:11,430
Let's open it up and there's a few messages in here and we can see here the payload.

114
00:09:11,460 --> 00:09:14,740
This is a test and we can see here.

115
00:09:14,860 --> 00:09:16,410
This is another test.

116
00:09:16,480 --> 00:09:23,140
So that was a very simple lab just to show how you can integrate between Lambda and concussive streams

117
00:09:23,500 --> 00:09:27,580
and of course with those functions you could do all sorts of things to your data.

118
00:09:27,580 --> 00:09:30,350
All we've done is written a log to cloud watch logs.

119
00:09:30,460 --> 00:09:37,630
So let's close this lab down and what we can do is go into Kinesis streams and delete our stream and

120
00:09:37,630 --> 00:09:42,840
we can go to Lambda and delete our function and that's it.

121
00:09:42,840 --> 00:09:44,040
Guys hate we had some fun.

122
00:09:44,040 --> 00:09:44,970
See in the next lab.

