1
00:00:01,770 --> 00:00:07,380
Hi, guys, before we get stuck into the labs, I want to just teach you a few of the concepts around

2
00:00:07,380 --> 00:00:08,730
elastic load balancing.

3
00:00:09,180 --> 00:00:13,200
So some of you might come from a background where you're not that familiar with load balancing.

4
00:00:13,440 --> 00:00:18,330
So we're just going to start at the basics here to just understand what it's all about.

5
00:00:18,990 --> 00:00:25,320
So with a plastic load balancing, what we're trying to do is we might have an application like a Web

6
00:00:25,320 --> 00:00:28,590
application that runs on multiple instances.

7
00:00:29,130 --> 00:00:35,250
So the applications that are compatible with load balancing must be applications that you can run across

8
00:00:35,250 --> 00:00:36,320
multiple instances.

9
00:00:36,630 --> 00:00:42,840
So Eva, for instance, with a Web application, it could be a static Web application or it could be

10
00:00:42,840 --> 00:00:44,370
using a shared file system.

11
00:00:44,370 --> 00:00:51,160
So there could be an FSR system or S3 so that all of these instances can actually load the same data.

12
00:00:51,180 --> 00:00:56,350
So they're all identical and any one of those instances can actually service the load.

13
00:00:56,700 --> 00:00:59,360
So what we then do is whip and load balancer.

14
00:00:59,640 --> 00:01:06,000
We have a single endpoint now that could be a public DNS name like this one, a custom DNS name, or

15
00:01:06,000 --> 00:01:10,800
it could be the one that you actually get from Amazon, which is a bit of a longer DNS name.

16
00:01:10,800 --> 00:01:12,870
And we'll see what that looks like in the labs.

17
00:01:13,440 --> 00:01:15,030
But you have a single endpoint.

18
00:01:15,040 --> 00:01:21,900
So when a client connects to DCT labs dot com, he's going to hit the load balancer and the load balancer

19
00:01:21,900 --> 00:01:24,780
has a number of what it calls targets.

20
00:01:25,230 --> 00:01:29,040
And these are all instances that can service the request.

21
00:01:29,490 --> 00:01:36,390
So perhaps client one then gets directed to the instance at the top here, and then the second client

22
00:01:36,390 --> 00:01:43,110
wants to access DCT labs dot com and it might get low balance to another instance in a completely different

23
00:01:43,110 --> 00:01:44,220
availability zone.

24
00:01:44,370 --> 00:01:49,320
And you can have two instances spread across as many availability zones as are available.

25
00:01:49,650 --> 00:01:55,230
Now, this is within a region, so you can't load balance between regions, but you can load balance

26
00:01:55,230 --> 00:01:58,410
within a region across multiple availability zones.

27
00:01:58,440 --> 00:02:04,230
So then maybe the third client would get sent to another instance and it's going to try and spread the

28
00:02:04,230 --> 00:02:06,420
load between the availability zones.

29
00:02:06,450 --> 00:02:11,780
Now, the whole idea is that you're going to have high availability and fault tolerance.

30
00:02:12,150 --> 00:02:19,890
So what happens then is health checks are used to determine whether these instances are available and

31
00:02:19,890 --> 00:02:25,110
if, for instance, an instance becomes unavailable for some reason, it's going to fail its health

32
00:02:25,110 --> 00:02:31,650
check and then the connections are going to get dropped and the load balancer is then going to reroute

33
00:02:31,650 --> 00:02:34,280
that client to a different instance.

34
00:02:34,830 --> 00:02:39,690
So that way you don't have to worry so much about your instances failing, because as long as you've

35
00:02:39,690 --> 00:02:46,140
got enough instances to service the load, the load balancer will take care of making sure that your

36
00:02:46,230 --> 00:02:49,340
clients are able to access your application.

37
00:02:49,470 --> 00:02:51,630
So that's basically how it works.

38
00:02:51,810 --> 00:02:57,480
And with auto scaling, which we'll see later in this section, you can then ensure that you've got

39
00:02:57,480 --> 00:02:59,370
a certain number of these instances running.

40
00:02:59,370 --> 00:03:02,390
So when this one fails, another one will get launched and replace it.

41
00:03:02,790 --> 00:03:07,530
But more than that, a bit later on with Amazon elastic load balancing, there are three different types

42
00:03:07,530 --> 00:03:08,400
of load balancer.

43
00:03:08,730 --> 00:03:14,670
So apologies for having lots of information on the screen, but we are going to go into each of these

44
00:03:14,670 --> 00:03:16,290
low balances in detail.

45
00:03:16,290 --> 00:03:19,230
So you're going to learn all of this and a lot more detail and more.

46
00:03:19,240 --> 00:03:24,380
This isn't everything, but these are the key differences that I just want to talk about.

47
00:03:24,840 --> 00:03:27,420
So let's start at the bottom with the classic low balance.

48
00:03:27,650 --> 00:03:30,480
The classic low balance has been around for a long time.

49
00:03:30,480 --> 00:03:32,910
So this is considered to be old generation.

50
00:03:33,150 --> 00:03:36,090
And Amazon don't recommend using it for new applications.

51
00:03:36,360 --> 00:03:41,880
They only recommend that you use it for existing applications running in what's called easy to classic.

52
00:03:42,540 --> 00:03:47,850
Now, we're not dealing with easy to classic now, but it's basically the predecessor to VPC.

53
00:03:47,850 --> 00:03:49,680
It won't be covered in the exam anymore.

54
00:03:49,710 --> 00:03:53,370
Now, the classic low balance operates at layer four and last seven.

55
00:03:53,550 --> 00:04:00,450
So here we're talking about the Open Systems Interconnect or Owosso model, and the layers represent

56
00:04:00,450 --> 00:04:05,460
the transport layer, layer four and the application layer at last seven.

57
00:04:05,760 --> 00:04:12,090
So what that means is it deals with protocols such as TCP and SSL, which operate at Layer four and

58
00:04:12,100 --> 00:04:15,480
HTP and https which operate at seven.

59
00:04:16,050 --> 00:04:19,500
So it operates a both layer four and seven.

60
00:04:19,800 --> 00:04:25,710
So you can have your low balance of protocol, which is the protocol which your load balancer accepts

61
00:04:25,710 --> 00:04:31,350
connections using and is able to rout based on information in the protocol.

62
00:04:32,070 --> 00:04:38,640
And then the instance protocol is the protocol, which you're easy to instances listen on so they can

63
00:04:38,640 --> 00:04:41,550
be listening on ports using these protocols.

64
00:04:41,550 --> 00:04:47,760
We then have the two newer generation load balances, the network load balancer and the application

65
00:04:47,760 --> 00:04:48,510
load balancer.

66
00:04:48,900 --> 00:04:51,570
Now what's happened here is these operate at different levels.

67
00:04:51,570 --> 00:04:56,760
So rather than doing four and seven, we got the network load balancer, which operates at layer four,

68
00:04:57,210 --> 00:05:00,720
and we have the application load balancer, which operates at least seven.

69
00:05:01,410 --> 00:05:09,420
So they're specialized for different use cases with the network load balancer, it operates at the connection

70
00:05:09,420 --> 00:05:09,690
level.

71
00:05:09,700 --> 00:05:12,720
So that's all this TCP tearless UDP and so on.

72
00:05:13,620 --> 00:05:19,620
And it rousse connections based on information within their support numbers, for instance, it's especially

73
00:05:19,620 --> 00:05:25,110
designed to offer ultra high performance, low latency and to be really good for running, tearless

74
00:05:25,110 --> 00:05:25,860
connections.

75
00:05:26,100 --> 00:05:32,040
So tearless, offloading, meaning that it's offloading the processing of encryption from your application.

76
00:05:32,070 --> 00:05:36,600
You can also have static IPS unless the clips on your load balancer.

77
00:05:36,600 --> 00:05:42,300
So you can so you can define the IP address that your low balance uses, which you can't do with an

78
00:05:42,300 --> 00:05:44,400
application or a classic load balancer.

79
00:05:44,430 --> 00:05:50,130
It also supports UDP and static IP addresses as targets so you can have static hippie's on the back

80
00:05:50,130 --> 00:05:50,790
end as well.

81
00:05:50,820 --> 00:05:57,150
The application load balancer operates at the request level, so that is the application level.

82
00:05:57,150 --> 00:06:03,170
So it's last seven is routing based on information within HTTP and https packets.

83
00:06:03,180 --> 00:06:07,620
So what you can do with it is things called path based routing and host based routing.

84
00:06:08,040 --> 00:06:12,420
There's a couple of others as well as you can see here, query string parameter based routing and source

85
00:06:12,420 --> 00:06:14,270
IP address based routing.

86
00:06:14,640 --> 00:06:18,690
But perhaps the most commonly used are path based routing and host based routing.

87
00:06:19,110 --> 00:06:27,660
What this means is you can specify that you route to specific targets based on what the DNS domain name

88
00:06:27,660 --> 00:06:30,030
in the HTTP header is.

89
00:06:30,030 --> 00:06:32,010
So it could be DCT labs dot com.

90
00:06:32,010 --> 00:06:34,710
It's going to send it to one set of instances.

91
00:06:35,130 --> 00:06:40,320
If it's DCT applications dot com, it's going to go to a different set of instances.

92
00:06:40,470 --> 00:06:46,680
So rounds based on information in the header with that's how Spanish routing with path based routing

93
00:06:46,680 --> 00:06:47,250
it can be.

94
00:06:47,250 --> 00:06:48,500
What's after the slash.

95
00:06:48,540 --> 00:06:55,260
So you might have DCT labs dot com slash images and that will send it to certain instances.

96
00:06:55,470 --> 00:07:01,260
Or it could be Check-Out and it'll send you to the checkout instances with an application load balancer.

97
00:07:01,270 --> 00:07:07,260
You can also have IP addresses, lambda functions and containers as targets, so as good for use with

98
00:07:07,260 --> 00:07:09,020
micro services applications.

99
00:07:09,030 --> 00:07:12,540
So that's just a really quick overview of the load balancing.

100
00:07:12,750 --> 00:07:16,620
And what we're going to do now is we're going to have a series of lamp's and we're going to focus on

101
00:07:16,620 --> 00:07:21,630
each of these types of load balancer so that you see it in action and learn how to use them.

