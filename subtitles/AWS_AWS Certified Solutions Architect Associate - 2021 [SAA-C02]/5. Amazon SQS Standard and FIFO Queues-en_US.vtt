WEBVTT
1
00:00:02.150 --> 00:00:08.300
In Amazon excuse me, we have two different types of cute, we have to stand a queue on the left and

2
00:00:08.300 --> 00:00:12.590
then the FIFO queue or first in first out queue on the right hand side.

3
00:00:13.550 --> 00:00:19.550
Now, one of the key facts that I want you to take away, especially from this slide, is that the stand.

4
00:00:19.600 --> 00:00:21.580
Q does what's called best for ordering.

5
00:00:22.250 --> 00:00:28.400
So that means that the order of the messages as they're placed on the Q could be different to the way

6
00:00:28.400 --> 00:00:36.110
they're consumed from the Q So your producers might be putting messages on the Q in a sequence.

7
00:00:36.110 --> 00:00:38.420
One, two, three, four, five, six and so on.

8
00:00:39.570 --> 00:00:44.200
But the consumers on the right hand side might pick the messages up in a different order.

9
00:00:44.790 --> 00:00:51.690
Now it is best efforts, so hopefully it won't be this bad, but it doesn't guarantee that your consumers

10
00:00:51.690 --> 00:00:52.990
are going to get them in an order.

11
00:00:53.010 --> 00:00:58.200
So you have to take that into account if your application relies on the fact that the messages are processed

12
00:00:58.200 --> 00:00:58.800
in an order.

13
00:00:59.490 --> 00:01:04.090
Now, the FIFO queue on the right here does what's called first in, first out delivery.

14
00:01:04.500 --> 00:01:09.180
So that means in this case, the numbers are running backwards because no one was placed on the queue

15
00:01:09.180 --> 00:01:12.260
first and then two, three, four, five, six, seven.

16
00:01:12.870 --> 00:01:15.270
So that means they're going to be consumed in order.

17
00:01:15.450 --> 00:01:17.370
One, two, three, four, five, six, seven.

18
00:01:17.790 --> 00:01:19.460
So that's one of the key differences.

19
00:01:19.650 --> 00:01:21.300
Let's have a look at a bit more detail.

20
00:01:21.450 --> 00:01:27.900
Stand accused of unlimited throughput, and that means they support a nearly unlimited number of transactions

21
00:01:27.900 --> 00:01:35.520
per second for each API action, whereas FIFO queues do support high throughput, but only up to 300

22
00:01:35.520 --> 00:01:38.730
messages per second for send, receive or delay.

23
00:01:39.120 --> 00:01:44.400
And you can match messages per operation and then they can support up to 3000 messages.

24
00:01:44.400 --> 00:01:48.200
A second stand accused offer what's called best effort ordering.

25
00:01:48.210 --> 00:01:52.170
So that means that occasionally messages might be delivered in a different order.

26
00:01:52.800 --> 00:01:58.210
Whereas you remember from the previous slide that the FIFO queue supports first in, first out delivery.

27
00:01:58.500 --> 00:02:01.350
So in this case, the order is strictly preserved.

28
00:02:02.630 --> 00:02:09.050
Stand accused of at least once delivery, so that means the message will be delivered at least once,

29
00:02:09.050 --> 00:02:14.240
but it could be delivered more than once, so your application might end up processing it more than

30
00:02:14.240 --> 00:02:14.660
once.

31
00:02:15.080 --> 00:02:17.690
And you have to account for that in your application code.

32
00:02:18.820 --> 00:02:25.690
Three focus support exactly once processing, and that means a message is delivered once and remains

33
00:02:25.690 --> 00:02:32.830
available until it's processed by consumer and then deleted and duplicates cannot be introduced into

34
00:02:32.830 --> 00:02:33.250
the queue.

35
00:02:33.820 --> 00:02:38.380
There's a bit more information that you need to know for the exam about FIFO queues.

36
00:02:38.500 --> 00:02:41.920
So firstly, we have the duplication with FIFO queues.

37
00:02:42.430 --> 00:02:47.080
And for this you have to provide a message deduplication ID with the message.

38
00:02:48.020 --> 00:02:54.470
The duplication interval was five minutes, and it supports content based duplication, the message,

39
00:02:54.470 --> 00:03:02.140
the duplication, it is generated as a Charr 256 within the message body in terms of sequencing with

40
00:03:02.150 --> 00:03:07.430
FIFO cues to ensure the strict ordering between messages, you can specify a message group.

41
00:03:07.430 --> 00:03:12.550
It will see these both in the console shortly and messages with a different group.

42
00:03:12.650 --> 00:03:19.520
They could be received out of order compared to the previous group day messages with the same group.

43
00:03:19.550 --> 00:03:22.370
They are delivered to one consumer at a time.

44
00:03:22.550 --> 00:03:28.850
FIFO cues required the message group idea and message deduplication idea parameters to be added to messages.

45
00:03:29.750 --> 00:03:31.620
So let's look at these a bit more detail.

46
00:03:31.940 --> 00:03:37.660
The message group, Heidi, is a tag that specifies that the message belongs to a specific message group.

47
00:03:38.060 --> 00:03:43.400
So messages that belong to that group are guaranteed to be processed in a first in, first out method.

48
00:03:44.090 --> 00:03:48.470
The duplication, it is a token that's used for duplicating messages.

49
00:03:49.130 --> 00:03:53.930
Now, what we're going to do now is go over to the console and have a look at creating two different

50
00:03:53.930 --> 00:03:54.570
types of kit.

51
00:03:55.130 --> 00:03:57.050
I mean, the management console.

52
00:03:57.350 --> 00:03:58.550
Let's go to services.

53
00:03:58.850 --> 00:04:03.470
And if we come down to application integration, we'll find the simple Q service.

54
00:04:03.920 --> 00:04:08.630
Now I'm going to get started and it's going to give me the options to create a new queue.

55
00:04:08.870 --> 00:04:13.220
And you can see the two different types of cues of the standard and the FIFO here, and it gives you

56
00:04:13.220 --> 00:04:14.660
a bit more information about them.

57
00:04:15.170 --> 00:04:18.260
I'm going to call this my standard queue.

58
00:04:19.620 --> 00:04:26.410
And I'm going to leave it on standard and we can click configure Q And in here you can see some attributes.

59
00:04:26.700 --> 00:04:30.210
Now we're going to be going over these within this section in subsequent lessons.

60
00:04:30.600 --> 00:04:32.990
So I'm not going to go over the details of them right now.

61
00:04:33.360 --> 00:04:35.730
I'm just going to go down and click on Rikyu.

62
00:04:36.090 --> 00:04:37.830
And that's our standard cue created.

63
00:04:38.190 --> 00:04:38.920
Very simple.

64
00:04:39.480 --> 00:04:41.490
Now let's create a FIFO queue as well.

65
00:04:41.490 --> 00:04:46.110
So I'm going to choose FIFO and I'm going to call this my FIFO queue.

66
00:04:46.320 --> 00:04:49.950
And you can see it's already warning me that I need to put the FIFO suffix on.

67
00:04:50.340 --> 00:04:53.970
So your FIFO queue name must end in FIFO.

68
00:04:55.300 --> 00:05:01.570
And let's just choose quick Rikyu, so we've got our two Qs now let's have a look at sending a message

69
00:05:01.570 --> 00:05:02.370
to our stand.

70
00:05:02.410 --> 00:05:10.020
Q So you can go queue actions, send a message and I'm just going to put a test message in here.

71
00:05:11.130 --> 00:05:18.330
And click on send and Clothes, and so now we have a message available in the queue, and if we've got

72
00:05:18.330 --> 00:05:22.100
a queue actions, view, delete messages, we can poll for messages.

73
00:05:22.410 --> 00:05:26.480
So now it's going to actually poll and see what messages are available in the queue.

74
00:05:26.850 --> 00:05:31.690
And so it's found our text message and we can then process it and delete it.

75
00:05:32.220 --> 00:05:35.210
Let's have a look at the FIFA HQ now with the FIFA.

76
00:05:35.250 --> 00:05:38.240
Q We have a couple of additional attributes.

77
00:05:38.250 --> 00:05:41.660
So we've got the message group ID and the duplication it.

78
00:05:43.220 --> 00:05:48.860
So let's just put a message in message one and then let's put this in group one.

79
00:05:50.160 --> 00:05:56.580
And then for this, we're going to put in a kind of random value for the deduplication idea, and it's

80
00:05:56.590 --> 00:05:57.570
to send a message.

81
00:05:58.620 --> 00:06:04.030
And if we can't send another message, I'm just going to send the same message again now, if we close,

82
00:06:04.030 --> 00:06:07.750
we should only see one message in the queue because it duplicated it.

83
00:06:08.080 --> 00:06:09.430
Let's send another message.

84
00:06:09.820 --> 00:06:12.310
And this time I'm going to put it in group two.

85
00:06:12.820 --> 00:06:16.460
And again, I'm going to put a random value in here and click send message.

86
00:06:17.230 --> 00:06:19.090
So now we've got two messages in the queue.

87
00:06:19.600 --> 00:06:20.590
Let's pull the queue.

88
00:06:21.100 --> 00:06:22.830
So now we get two different messages.

89
00:06:23.140 --> 00:06:28.390
We can see that they have different group IDs and different deduplication IDs.

90
00:06:28.750 --> 00:06:34.390
So the duplication idea must be unique within the group, but it could be the same across two different

91
00:06:34.390 --> 00:06:34.840
groups.

92
00:06:35.180 --> 00:06:38.240
We can easily now go in and just delete these messages.

93
00:06:38.770 --> 00:06:40.060
So that's it for this lesson.

94
00:06:40.060 --> 00:06:42.820
And in the next lesson, we're going to cover a dead letter cuz.

