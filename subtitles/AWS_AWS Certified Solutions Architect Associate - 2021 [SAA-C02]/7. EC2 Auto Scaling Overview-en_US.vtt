WEBVTT
1
00:00:02.200 --> 00:00:10.900
It's now time to introduce auto scaling auto scaling is a service which enables you to automatically

2
00:00:11.110 --> 00:00:19.300
launch instances so what it does is you specify how many instances you want to be launch and auto scaling

3
00:00:19.300 --> 00:00:25.150
takes care of launching those instances and also making sure that that number of instances is always

4
00:00:25.150 --> 00:00:25.990
maintained.

5
00:00:25.990 --> 00:00:34.150
Now you can also specify metrics which define how your auto scaling group even grows or shrinks back

6
00:00:34.150 --> 00:00:35.170
in size again.

7
00:00:35.170 --> 00:00:38.050
So that's what we define as elasticity.

8
00:00:38.350 --> 00:00:46.480
Now scaling with auto scaling is horizontal because you're actually launching additional easy two instances

9
00:00:47.140 --> 00:00:50.710
so you specify the launch parameters.

10
00:00:50.710 --> 00:00:57.810
The type of instance you want to launch and auto scaling takes care of launching that type of instance.

11
00:00:58.060 --> 00:01:03.240
And then when certain metrics are reached it can add additional instances.

12
00:01:03.280 --> 00:01:08.400
If an instance fails and in this case it's failing a health check.

13
00:01:08.680 --> 00:01:14.410
We don't have an elastic low band so if we did it'll be could also do health checking but otherwise

14
00:01:14.920 --> 00:01:17.640
easy to status checks are used.

15
00:01:17.680 --> 00:01:20.200
So in this case the instance has failed.

16
00:01:20.200 --> 00:01:26.590
It's easy to status check and auto scaling we'll know about this and will then replace the instance.

17
00:01:26.590 --> 00:01:32.440
So it's launched a new instance to replace it to ensure that enough instances are still running.

18
00:01:32.470 --> 00:01:36.490
Another thing you can do is use metrics as you can see here.

19
00:01:36.580 --> 00:01:42.760
Metrics are being sent to cloud watch and these are monitoring whatever information about your resource

20
00:01:42.760 --> 00:01:43.740
you want to monitor.

21
00:01:43.770 --> 00:01:49.510
So it could be CPSU number of connections disk Io etc..

22
00:01:49.510 --> 00:01:57.670
In this case a metric has reported that the CPO across the instances has reached or exceeded 80 percent

23
00:01:58.480 --> 00:02:04.720
and cloud watch will learn about this and then it will send a notification to the auto scanning group

24
00:02:05.320 --> 00:02:11.730
and the auto scanning group then knows that it needs to scale and it adds an extra instance.

25
00:02:11.740 --> 00:02:19.150
Now you could also say that if the metric falls below 80 percent then you could remove an instance or

26
00:02:19.160 --> 00:02:25.930
it falls below 60 percent or whatever value you want to specify then it will terminate an instance to

27
00:02:26.140 --> 00:02:27.130
reduce cost.

28
00:02:27.130 --> 00:02:30.420
So that's at a very high level how auto scaling works.

29
00:02:30.430 --> 00:02:35.860
Now you can also use auto scaling with elastic low balances and when used together.

30
00:02:35.860 --> 00:02:40.450
This gives you the elasticity as well as the hate chain fault tolerance.

31
00:02:40.450 --> 00:02:47.140
So in this architecture we have an application load balancer and it's distributing connections to all

32
00:02:47.140 --> 00:02:50.230
of the instances in the auto scaling group.

33
00:02:50.230 --> 00:02:56.080
So you've actually defined not just instances but an auto scaling group is registered against the load

34
00:02:56.080 --> 00:03:01.540
balancer and whatever instances are then in that auto scanning group the low balance so we'll try and

35
00:03:01.540 --> 00:03:08.800
distribute connections to them and in turn the auto scanning group can classically grow or shrink back

36
00:03:08.800 --> 00:03:13.330
in size again according to whatever parameters you've defined.

37
00:03:13.480 --> 00:03:17.110
So what we're going to do now is we're actually gonna go into a lab where we're going to build out a

38
00:03:17.110 --> 00:03:22.440
configuration that you can see on the screen here and see how it all works in the console.

39
00:03:22.570 --> 00:03:23.890
So I'll see in that lab guys.

