1
00:00:02,810 --> 00:00:08,030
Welcome to the databases section of the course. There's lots of great labs

2
00:00:08,030 --> 00:00:10,340
we're going to get stuck into in this section

3
00:00:10,470 --> 00:00:13,200
But before we do that there's a bit of theory to cover.

4
00:00:13,200 --> 00:00:19,410
So I want to start off talking about the difference between relational and non relational databases.

5
00:00:19,410 --> 00:00:24,480
And then shortly we're going to talk about the difference between certain use cases and optimizations

6
00:00:24,480 --> 00:00:31,830
where a database is more suitable for operational workloads or analytical workloads before I get stuck

7
00:00:31,830 --> 00:00:32,840
into the discussion.

8
00:00:32,850 --> 00:00:37,480
I just want to mention that in these areas there's definitely a few grey areas.

9
00:00:37,560 --> 00:00:44,610
So the statements which I'm making some of these are a bit broad in that they can be argued in some

10
00:00:44,610 --> 00:00:50,040
way that some some databases will take on the actual characteristics for instance of relational and non relational

11
00:00:50,310 --> 00:00:52,800
or operational and analytics.

12
00:00:52,800 --> 00:00:58,100
But for the purposes of this exam what I'm giving you here is a good starting point.

13
00:00:58,110 --> 00:00:59,990
And this is pretty much what you need to know.

14
00:01:00,000 --> 00:01:05,830
So, as an architecture exam you need to be able work out given a specific scenario

15
00:01:05,910 --> 00:01:13,050
what is the best database that you should be using or what is the most operationally efficient option

16
00:01:13,110 --> 00:01:19,650
to use or what is the highest performance option or which one has the most ability to manage it at the

17
00:01:19,650 --> 00:01:20,730
operating system level.

18
00:01:20,730 --> 00:01:23,670
Those are all the sorts of things that you need to know.

19
00:01:23,700 --> 00:01:27,840
And so let's get started and we'll talk about relational and non relational first.

20
00:01:27,840 --> 00:01:33,600
The key differences are how data are managed and stored. With relational data is stored in tables rows

21
00:01:33,600 --> 00:01:37,800
and columns with non-relational data is varied.

22
00:01:37,830 --> 00:01:39,830
So it's not in a fixed form.

23
00:01:39,840 --> 00:01:47,270
There can be hierarchies for instance, relational databases have a rigid schema and SQL stands

24
00:01:47,270 --> 00:01:52,000
for Structured Query Language and that's the language that you use to query and find the data.

25
00:01:52,040 --> 00:01:55,310
And it's a very powerful language. With non-relational

26
00:01:55,310 --> 00:01:58,000
there's a flexible schema so it's known as NoSQL.

27
00:01:58,010 --> 00:02:02,400
It doesn't have the same capabilities for searching.

28
00:02:02,420 --> 00:02:04,740
At least it's more limited more simple.

29
00:02:05,000 --> 00:02:06,280
And the schema is flexible.

30
00:02:06,290 --> 00:02:09,160
So that means that the data can be varied.

31
00:02:09,160 --> 00:02:16,150
So what data is associated with an individual item or record can be different throughout the database.

32
00:02:16,250 --> 00:02:19,300
There are different types of non-relational database.

33
00:02:19,310 --> 00:02:23,790
We have key value pairs, columnar, documents, or graph databases.

34
00:02:23,790 --> 00:02:27,230
And I'll just show you a diagram just to make this a bit more clear.

35
00:02:27,230 --> 00:02:34,400
So in this example here we have a key value store and it's Amazon dynamoDB and we can see some items

36
00:02:34,400 --> 00:02:38,110
in the database and we can see a number associated with them.

37
00:02:38,530 --> 00:02:40,100
But let's have a look at the actual beats.

38
00:02:40,160 --> 00:02:48,050
So products I.D. one here the first item has Odyssey Homer and 1871 has attributes.

39
00:02:48,050 --> 00:02:53,420
So we've got a book we've got an author and we have a publishing date.

40
00:02:53,780 --> 00:02:57,690
But the second item here has six bar teachers and bark.

41
00:02:57,710 --> 00:03:02,150
So this is I suppose a symphony and a composer.

42
00:03:02,150 --> 00:03:04,720
So there are different attributes between different records.

43
00:03:04,760 --> 00:03:07,430
You don't get that with a relational database.

44
00:03:07,670 --> 00:03:15,770
You have your columns and you must populate those columns with the same data for each record in your

45
00:03:15,770 --> 00:03:16,850
database.

46
00:03:16,850 --> 00:03:21,510
So this gives you lots and lots of flexibility with a non-relational database.

47
00:03:21,590 --> 00:03:25,880
So those rules I just mentioned they're in force within the database for relational database.

48
00:03:25,880 --> 00:03:30,260
You can have rules for your non relational database but they're not in the database they're in the code

49
00:03:30,260 --> 00:03:38,720
that you use to manipulate data to read and write data in your database. Relational databases are typically

50
00:03:38,750 --> 00:03:40,370
scaled vertically.

51
00:03:40,370 --> 00:03:47,450
So when we get to the RDS section which is one of the Amazon relational databases you'll see that you

52
00:03:47,450 --> 00:03:50,970
actually use EC2 instances for the database.

53
00:03:51,020 --> 00:03:57,920
So when you want to scale the database you have to choose a larger instance one with more CPU and memory

54
00:03:58,610 --> 00:04:04,780
whereas with DynamoDB for instance, the non-relational database we just talked about, it scales horizontally.

55
00:04:04,790 --> 00:04:12,470
So it's scaling sideways and that means you don't have to worry about the limitations and how big your

56
00:04:12,470 --> 00:04:17,930
instance can go vertically, scaling horizontally typically means you can scale a lot further. Relational

57
00:04:17,930 --> 00:04:24,410
databases support complex queries and joins. So joins means joins between tables and complex queries

58
00:04:24,410 --> 00:04:29,750
means the ability of the SQL language to be able to perform all sorts of complexity in times

59
00:04:29,810 --> 00:04:33,300
in terms of the way that you query the data in the database.

60
00:04:33,320 --> 00:04:35,890
This is a phrase that you might see come up on the exam.

61
00:04:35,900 --> 00:04:41,860
So look out for that when they say that you will you require support for complex queries and joins you

62
00:04:41,860 --> 00:04:46,490
know it's relational database is probably going to be RDS. Non-relational is unstructured.

63
00:04:46,600 --> 00:04:53,180
So simple language that supports any kind of schema as we saw in the diagram the structure is different

64
00:04:53,180 --> 00:05:00,610
for our database and you can change it at any time. Relational databases are typically ACID compliance

65
00:05:00,700 --> 00:05:05,830
and this is stands for Atomicity, consistency, isolation, and durability.

66
00:05:05,830 --> 00:05:11,110
So just think relational when you think about relational database is they're optimized for consistency

67
00:05:11,110 --> 00:05:19,940
they're optimized for integrity of the database whereas. With non relational they're more optimized for

68
00:05:19,940 --> 00:05:28,480
performance rather than consistency and integrity and a few examples here we talked about RDS other

69
00:05:28,480 --> 00:05:30,540
ones out there for relational Oracle.

70
00:05:30,540 --> 00:05:36,520
MySQL which you can run on RDS, by the way MariaDB and Postgresql which can also

71
00:05:36,520 --> 00:05:43,210
be run on RDS and then in the non relational world do you have Amazon dynamoDB,  MongoDB a very

72
00:05:43,210 --> 00:05:46,530
popular database and then you have Redis and...

73
00:05:46,810 --> 00:05:51,660
So just going back to this slide here just to give you an idea of some of the other types.

74
00:05:51,660 --> 00:05:56,260
So we have the document database so these are non relational database types remember there are several

75
00:05:56,260 --> 00:05:59,600
different types you got key value document and graph here.

76
00:05:59,800 --> 00:06:04,210
Just going back to the slide you also have column databases as well.

77
00:06:04,420 --> 00:06:06,820
So this is MongoDB.

78
00:06:06,850 --> 00:06:12,810
So you could run MongoDB on an EC2 instance but there's no actual Amazon service for this.

79
00:06:12,820 --> 00:06:20,960
But in this case you can see that it's got the name of a movie and it's got some information about that

80
00:06:20,960 --> 00:06:23,890
movie and then it's got a jpeg file associated with it.

81
00:06:23,900 --> 00:06:27,620
We've then got Amazon Neptune which is a graph type of database.

82
00:06:27,620 --> 00:06:34,420
So what this means is its priority is to find the relations between data between data.

83
00:06:35,000 --> 00:06:40,550
So for instance if you have users like Howard here you can see that Howard is friends with Jack who's

84
00:06:40,550 --> 00:06:42,260
friends of Annie who's friends with Sam.

85
00:06:42,260 --> 00:06:49,200
And if that relationship between those users is useful to you to know then a graph database is going

86
00:06:49,200 --> 00:06:50,000
to be the way to go.

87
00:06:50,000 --> 00:06:54,740
Think things like Facebook where the relations between people are very very important.

88
00:06:54,740 --> 00:06:57,770
That's where a lot of the value of the database comes from.

89
00:06:57,860 --> 00:07:02,570
The next thing we need to talk about is the difference between operational and analytical databases

90
00:07:03,080 --> 00:07:10,400
and what we're really talking about here are the use cases and how the data bases optimized so on the

91
00:07:10,400 --> 00:07:17,420
left you have the operational or also known as transactional databases and this is known as online transaction

92
00:07:17,420 --> 00:07:20,130
processing or OLTP.

93
00:07:20,270 --> 00:07:21,690
So here we're talking about production.

94
00:07:21,690 --> 00:07:23,420
DBs that process transactions.

95
00:07:23,420 --> 00:07:28,640
So if you think about your public facing applications they speak to a database.

96
00:07:28,880 --> 00:07:30,700
Customers could be updating records.

97
00:07:30,710 --> 00:07:35,680
They could be placing orders they could be checking stocks available that kind of thing.

98
00:07:35,810 --> 00:07:40,810
The database that you use for that is going to be an operational database or a transactional database.

99
00:07:40,910 --> 00:07:45,170
So what you're looking at is fairly short transactions and simple queries.

100
00:07:45,170 --> 00:07:50,000
Someone's looking at what is something available in the database they're buying some shoes they want

101
00:07:50,000 --> 00:07:53,420
to check if the shoes were available and they're going to place an order.

102
00:07:53,450 --> 00:07:54,620
So it's very fast.

103
00:07:54,620 --> 00:08:01,280
The order is complete done on the other hand you have the analytical databases also known as online

104
00:08:01,280 --> 00:08:08,120
analytics processing or OLAP databases and your source data comes from your OLTPs.

105
00:08:08,300 --> 00:08:13,340
So you might have a OLDP database and perhaps you've got them around the world around the

106
00:08:13,340 --> 00:08:14,120
country.

107
00:08:14,180 --> 00:08:20,600
You've got lots of different databases and what you need to do is create a data warehouse and that you're

108
00:08:20,600 --> 00:08:26,900
going to use that so that you can extract data and make decisions understand your customers understand

109
00:08:26,900 --> 00:08:30,490
their buying habits look at trends that kind of thing.

110
00:08:30,500 --> 00:08:37,070
So what you do is you aggregate that data into a data warehouse and then you can perform your queries

111
00:08:37,130 --> 00:08:40,830
and these are gonna be complex queries and they're often going to take a long time.

112
00:08:40,880 --> 00:08:46,040
So you're looking at complex queries sometimes could run for hours or days and they're going to take

113
00:08:46,040 --> 00:08:50,630
a lot of CPU power or a lot of overall compute power.

114
00:08:50,630 --> 00:08:55,880
So you definitely don't want to run those kind of queries on your transactional processing databases

115
00:08:55,910 --> 00:08:59,690
because that's going to slow down your system and affect your user experience.

116
00:08:59,690 --> 00:09:05,780
So instead you take the data offline you put it all into a data warehouse and then you can do all those

117
00:09:05,780 --> 00:09:06,470
queries on it.

118
00:09:06,860 --> 00:09:13,880
So a few examples here for relational examples are ideas Oracle IBM DB to and mySQL and then

119
00:09:13,880 --> 00:09:22,880
for non relational OLTP databases we've got MongoDB, Cassandra and neo4J and Hbase and

120
00:09:22,880 --> 00:09:27,800
then we have analytical we've got Amazon Redshift which we'll be covering in this section.

121
00:09:27,800 --> 00:09:31,490
And then you've got things like Teradata and hedge P Vertica as well.

122
00:09:31,730 --> 00:09:37,130
And then for non relational analytical databases you've got Amazon EMR which will also cover in this

123
00:09:37,130 --> 00:09:39,530
section and you've got map reduce.

124
00:09:39,590 --> 00:09:43,810
So I know there's a lot to take in here but you really do need to know this stuff for the exam.

125
00:09:44,000 --> 00:09:49,400
Make sure you understand the differences between these different types of database and also which products

126
00:09:49,400 --> 00:09:51,910
fit into which category.

127
00:09:51,950 --> 00:09:53,470
So one more slide to go.

128
00:09:53,780 --> 00:09:58,800
And then we'll be out to start getting onto the laps this slide is just to help you understand some

129
00:09:58,800 --> 00:10:00,630
typical use cases.

130
00:10:00,840 --> 00:10:07,680
So it's not just the managed services like RDS and dynamoDB and redshift in some cases users might

131
00:10:07,680 --> 00:10:11,740
want to install their database on EC2.

132
00:10:12,120 --> 00:10:17,550
And you would do that if you want full control over the instance and database or the database that you

133
00:10:17,550 --> 00:10:19,470
want is not available underaged.

134
00:10:19,600 --> 00:10:20,600
Yes.

135
00:10:20,670 --> 00:10:26,670
So for instance you might want to install a database like MongoDB or you might want to install a database

136
00:10:26,670 --> 00:10:33,420
that has a version or maybe a licensing configuration or a configuration setting that's just not supported

137
00:10:33,420 --> 00:10:37,020
under RDS or any of the other managed services.

138
00:10:37,020 --> 00:10:44,190
So in that case you can install and you can launch an EC2 instance and install your database on

139
00:10:44,190 --> 00:10:47,330
it and you get full control then over managing the instance in the database.

140
00:10:47,330 --> 00:10:51,280
Of course that comes at the cost of the operational overhead.

141
00:10:51,300 --> 00:10:57,750
We've then got Amazon RDS and this is a managed service and it's used for OLTP type of use

142
00:10:57,750 --> 00:11:04,190
cases and it's SQL so it's for well-formed structured data then we've got dynamoDB.

143
00:11:04,260 --> 00:11:10,140
So this is a name value pair data that's a noSQL database you use it if you have an unpredictable

144
00:11:10,140 --> 00:11:15,750
data structure you get great in memory performance with persistence and later in this section we'll

145
00:11:15,750 --> 00:11:20,550
talk a bit more about the performance of dynamoDB and the options available but if you need high

146
00:11:20,550 --> 00:11:25,440
IO and dynamic scaling dynamoDB is a great option.

147
00:11:25,590 --> 00:11:30,120
We then got one of the warehouses which AWS provides which is Amazon Redshift.

148
00:11:30,120 --> 00:11:36,070
So this is a managed data warehouse solution primarily for analytics processing.

149
00:11:36,210 --> 00:11:37,380
We've then got Amazon Neptune.

150
00:11:37,380 --> 00:11:43,710
So this is the graph database and this is when relationships between objects are of high value you won't

151
00:11:43,710 --> 00:11:49,890
see complex questions I don't think you'll see complex questions in the exam about Amazon Neptune but

152
00:11:49,890 --> 00:11:54,540
you will get something with where the use case is clearly a graph database you just need to know that

153
00:11:54,540 --> 00:11:56,440
Neptune is the graph database.

154
00:11:56,700 --> 00:11:59,190
The next one is Amazon Elasticache.

155
00:11:59,520 --> 00:12:06,360
This is an in-memory database used for temporary storage for small amounts of data so great performance

156
00:12:06,930 --> 00:12:12,540
volatile data though so it's not way you wouldn't use this as your primary database but you use it to

157
00:12:12,540 --> 00:12:15,630
improve the performance of your primary database.

158
00:12:15,630 --> 00:12:20,820
That being said it does depend whether you're using the memcached or Redis versions because redis

159
00:12:20,820 --> 00:12:25,620
does allow you to store data persistently within an elasticache but we'll get onto that later in

160
00:12:25,620 --> 00:12:26,550
this section.

161
00:12:26,700 --> 00:12:29,170
So that's it for this theory lesson.

162
00:12:29,490 --> 00:12:31,570
Hopefully that made a lot of sense to you.

163
00:12:31,590 --> 00:12:33,170
There are lots of great documents.

164
00:12:33,180 --> 00:12:38,310
I'll put a few links into the course download but there's you know there's great reading to do on the

165
00:12:38,610 --> 00:12:44,190
AWS Web site as well as other Web sites just to really understand some of this and a bit more detail

166
00:12:44,640 --> 00:12:49,020
and I suggest you go and have a look at those documents because it is really important because it is

167
00:12:49,020 --> 00:12:53,970
an architecture exam so they will be testing your ability to choose the right solution in a specific

168
00:12:53,970 --> 00:12:54,540
scenario.

