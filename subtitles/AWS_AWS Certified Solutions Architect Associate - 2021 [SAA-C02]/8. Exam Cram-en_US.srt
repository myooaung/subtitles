1
00:00:02,560 --> 00:00:05,400
Hello and welcome to another exam cram.

2
00:00:05,470 --> 00:00:09,900
This one's for section 14 on CloudFormation an Elastic Beanstalk.

3
00:00:10,090 --> 00:00:12,020
And again I'm going to give you the key facts

4
00:00:12,040 --> 00:00:17,710
I think you need to know for the exam so starting off for CloudFormation. CloudFormation is

5
00:00:17,710 --> 00:00:24,130
a way that you have a common language in which you can describe and provision infrastructure resources.

6
00:00:24,130 --> 00:00:26,830
So remember that it's about infrastructure.

7
00:00:26,830 --> 00:00:33,920
It's not the application it's the infrastructure so CloudFormation can be used to provision a broad

8
00:00:33,920 --> 00:00:35,850
range of AWS resources.

9
00:00:35,870 --> 00:00:39,110
I think it pretty much works with every AWS service.

10
00:00:39,110 --> 00:00:40,840
So it's very broad in scope.

11
00:00:41,060 --> 00:00:46,610
Now a CloudFormation we're talking about infrastructure as code and that means that you can write some

12
00:00:46,610 --> 00:00:52,820
code that describes the infrastructure you want to provision and CloudFormation will go and use that

13
00:00:52,820 --> 00:00:56,000
code to actually create that environment for you.

14
00:00:56,000 --> 00:01:02,510
Now Elastic Beanstalk is more focused on deploying applications so you really need to understand the

15
00:01:02,510 --> 00:01:04,010
difference between these two.

16
00:01:04,040 --> 00:01:10,930
So think of beanstalk as being a platform service and that's creating an application environment whereas

17
00:01:10,930 --> 00:01:18,410
a CloudFormation is creating the infrastructure. CloudFormation can actually deploy an Elastic Beanstalk

18
00:01:18,410 --> 00:01:22,960
environment we saw this in the labs when we actually create an Elastic Beanstalk environment.

19
00:01:22,970 --> 00:01:28,310
If we go in looking CloudFormation we can see that actually it's CloudFormation that is creating that

20
00:01:28,310 --> 00:01:30,610
environment but you can't do it the other way round.

21
00:01:30,620 --> 00:01:36,560
So Elastic Beanstalk can't do any CloudFormation provisioning. You have something called a logical ID.

22
00:01:36,830 --> 00:01:41,990
And these are used to reference resources within the template and then you have the physical IDs

23
00:01:42,290 --> 00:01:48,500
and these identify resources outside of the template of the resources of being created.

24
00:01:48,500 --> 00:01:54,470
So we've seen this in the console when we have created some resources and we can actually go and have

25
00:01:54,470 --> 00:01:56,790
a look at what resources have been created.

26
00:01:56,840 --> 00:02:00,260
So a few of the components of CloudFormation. We have templates.

27
00:02:00,410 --> 00:02:05,710
These are the JSON or YAML text files that contain the instructions for building the environment.

28
00:02:05,810 --> 00:02:09,340
Then we have a stack so a stack is the actual environment.

29
00:02:09,350 --> 00:02:13,700
So when we've gone and created something in CloudFormation what we're actually doing is creating a

30
00:02:13,700 --> 00:02:22,390
stack and that stack then uses the template and creates the environment we then have something called

31
00:02:22,390 --> 00:02:28,330
a change set and this is where you can create a summary of the proposed changes to your stack and have

32
00:02:28,330 --> 00:02:34,890
a look at how those changes are going to actually impact the resources before you actually go live.

33
00:02:34,900 --> 00:02:41,870
So for updating the stacks there's two methods you can either directly update or execute a change set.

34
00:02:41,920 --> 00:02:47,620
If you directly update the stack you submit the changes and CloudFormation immediately deploys them

35
00:02:47,620 --> 00:02:51,190
so their live, they've updated your live environment.

36
00:02:51,340 --> 00:02:56,050
You might want to use direct updates when you need to really quickly deploy some kind of change to your

37
00:02:56,050 --> 00:02:57,490
environment.

38
00:02:57,490 --> 00:03:03,010
However with the change set as I mentioned before you can preview the changes that CloudFormation is

39
00:03:03,010 --> 00:03:06,680
going to make without actually applying them to your life environment.

40
00:03:06,730 --> 00:03:09,250
So we then stack sets. Stack sets

41
00:03:09,250 --> 00:03:15,550
extend the functionality of a stack by enabling you to create update or delete stacks across accounts

42
00:03:15,880 --> 00:03:23,200
and regions with a single operation so you can't create a stack that's cross region but you can create

43
00:03:23,200 --> 00:03:28,930
a stack set and that means that you can then create stacks in different regions.

44
00:03:28,930 --> 00:03:33,850
So that means using a single administrative account you can then define and manage the CloudFormation

45
00:03:33,850 --> 00:03:40,180
template and use the template for provisioning stacks into different target accounts and across different

46
00:03:40,180 --> 00:03:41,200
regions.

47
00:03:41,230 --> 00:03:43,440
So moving onto Elastic Beanstalk.

48
00:03:43,630 --> 00:03:47,080
So this is where you're deploying and managing applications in the cloud.

49
00:03:47,410 --> 00:03:53,350
And the key use case here is that you have developers for instance and they want to upload some code

50
00:03:53,800 --> 00:03:59,920
and they want to put that code on to some kind of application framework might be nodeJS might be .NET

51
00:03:59,920 --> 00:04:07,420
or some other framework and they don't want to have to launch EC2 instances and set up load balancing

52
00:04:07,420 --> 00:04:12,370
and set up auto scaling and all that kind of stuff they just want to upload their code so beanstalk

53
00:04:12,670 --> 00:04:18,160
means that you can very easily create that underlying environment so all you have to do is upload code

54
00:04:18,880 --> 00:04:24,070
it will leverage Elastic Load Balancing and auto scaling so that you can scale your application in and

55
00:04:24,070 --> 00:04:29,650
out as you need to and you can deploy it to multiple Availability Zones to have your resiliency and

56
00:04:29,650 --> 00:04:32,260
reliability.

57
00:04:32,350 --> 00:04:38,200
So again Elastic Beanstalk is considered to be a platform as a service solution and it supports these

58
00:04:38,200 --> 00:04:41,210
different frameworks of Java, .NET, PHP.

59
00:04:41,290 --> 00:04:48,460
NodeJS, Python, Ruby, Go and docker. So Elastic Beanstalk can provision most database instances

60
00:04:48,970 --> 00:04:52,870
and it allows you to have full control of the underlying resources.

61
00:04:52,870 --> 00:04:58,090
So even though it's managing and creating that environment for you you still have full access so you

62
00:04:58,090 --> 00:05:04,440
can SSH into the operating system of your EC2 instances or manage your databases.

63
00:05:04,630 --> 00:05:11,890
You can store your application files and also server logs if you need to in Amazon S3 and your application

64
00:05:11,890 --> 00:05:14,550
data can also be stored onto S3.

65
00:05:14,860 --> 00:05:20,620
It supports multiple environments and you can enable versioning for your environments and you can also

66
00:05:20,680 --> 00:05:23,830
replicate changes from get repositories.

67
00:05:23,860 --> 00:05:26,910
So finally just comparing the two again.

68
00:05:26,980 --> 00:05:33,520
So CloudFormation and Elastic Beanstalk think template driven provisioning for CloudFormation think

69
00:05:33,580 --> 00:05:36,540
web apps made easy for Elastic Beanstalk.

70
00:05:36,640 --> 00:05:43,990
Now you'll see use cases for CloudFormation where people need to consistently, repeatedly, securely, deploy

71
00:05:44,170 --> 00:05:45,210
infrastructure.

72
00:05:45,310 --> 00:05:50,920
So maybe you've got a systems integration company and they need to build an environment for customers

73
00:05:50,920 --> 00:05:55,030
and maybe they build a very similar environment for different customers in different parts of the world

74
00:05:55,650 --> 00:06:01,370
and they need to make sure that they can very easily and repeatedly deploy that environment.

75
00:06:01,420 --> 00:06:06,850
So using something like CloudFormation means that they can write their code once and then repeatedly

76
00:06:06,850 --> 00:06:07,490
use it.

77
00:06:07,630 --> 00:06:09,840
That reduces administrative effort.

78
00:06:09,850 --> 00:06:15,250
That means that if you set that environment up securely through the code then every time you set it

79
00:06:15,250 --> 00:06:16,780
up it's gonna be secure.

80
00:06:16,780 --> 00:06:23,260
And again the key use case for Elastic Beanstalk is where you just have some application code using

81
00:06:23,260 --> 00:06:30,280
one of those frameworks like Java or .NET or PHP and you just need to upload that code and have an

82
00:06:30,280 --> 00:06:35,190
environment ready to run so you upload the Zip or WAR files.

83
00:06:35,230 --> 00:06:41,200
In the case of Elastic Beanstalk and use JSON or YAML template files with CloudFormation.

