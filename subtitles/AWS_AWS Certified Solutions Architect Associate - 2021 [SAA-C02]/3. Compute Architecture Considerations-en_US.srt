1
00:00:02,900 --> 00:00:03,430
Hi guys.

2
00:00:03,440 --> 00:00:08,600
In this lesson I want to compare and contrast the differences between some of the different compute

3
00:00:08,600 --> 00:00:16,160
models that are available in AWS so on the left hand side of this diagram we have infrastructure

4
00:00:16,190 --> 00:00:20,120
as a service and the best example of this is the Elastic Compute Cloud.

5
00:00:20,150 --> 00:00:21,760
EC2.

6
00:00:21,770 --> 00:00:28,630
We then have containers as a service and the example is the elastic container service using either the

7
00:00:28,640 --> 00:00:34,670
EC2 launch type or the Fargate launch type and then we have functions as a service and the best

8
00:00:34,670 --> 00:00:35,980
example of this is lambda.

9
00:00:37,040 --> 00:00:38,270
So what are the differences.

10
00:00:38,270 --> 00:00:41,330
Well what I'm trying to show you here is an end to end stack.

11
00:00:41,350 --> 00:00:47,440
So at the very bottom you have the physical hardware and then you have the various software layers with

12
00:00:47,450 --> 00:00:50,000
the applications and the functions sitting on top.

13
00:00:50,060 --> 00:00:56,420
Now functions are more applicable to Lambda but you can also use the same terminology with the way that

14
00:00:56,420 --> 00:00:59,990
an application functions and interacts with other applications.

15
00:01:00,020 --> 00:01:06,000
So this is the stack and the key thing to point out here is what is managed by the consumer.

16
00:01:06,020 --> 00:01:13,460
In other words the AWS user with all of these options in AWS is the physical hardware layer is completely

17
00:01:13,460 --> 00:01:17,830
taken care of for you on EC2.

18
00:01:17,940 --> 00:01:21,620
We then have a hypervisor and that's also managed by AWS.

19
00:01:21,840 --> 00:01:26,630
But what you're responsible for is the guest operating system and anything that you put on top of it.

20
00:01:27,570 --> 00:01:35,070
So you have complete control but also complete management responsibility for everything from here upwards.

21
00:01:35,880 --> 00:01:37,830
With containers as a service

22
00:01:37,830 --> 00:01:42,540
there's a bit more of an abstraction for you so you don't have a guest operating system you don't have

23
00:01:42,540 --> 00:01:49,020
Windows or Linux to to run. The container engine is largely taken care of for you and this really depends

24
00:01:49,020 --> 00:01:55,640
which launch type you're using with ECS but you're really concentrating on a bit of a higher level. And

25
00:01:55,640 --> 00:01:59,590
then with functions as a service everything is abstracted from you.

26
00:01:59,720 --> 00:02:02,760
So all you have to worry about then is code.

27
00:02:02,840 --> 00:02:09,380
So here you're managing at the VM instance level, here you're managing at the container level, and then

28
00:02:09,620 --> 00:02:16,400
with Lambda you're literally just taking care of your code. I have another table here which just helps

29
00:02:16,400 --> 00:02:22,370
us to understand the differences because it's really key for you to understand in the exam and for your

30
00:02:22,370 --> 00:02:25,520
career to try and work out for any given solution

31
00:02:25,520 --> 00:02:32,390
which of these is the best option and the way that the solutions architects exam is constructed is they're

32
00:02:32,390 --> 00:02:39,400
very much looking to test you on your ability to choose the right service for the right solution and

33
00:02:39,410 --> 00:02:42,790
they might ask you what is the most cost effective solution.

34
00:02:42,800 --> 00:02:45,710
What is the most scalable solution.

35
00:02:45,710 --> 00:02:48,080
What is the most operationally efficient solution.

36
00:02:48,080 --> 00:02:49,300
These kind of things.

37
00:02:49,520 --> 00:02:54,920
And by knowing these differences that are on the screen now you can work out what the differences between

38
00:02:54,920 --> 00:03:02,690
these different compute options are. And you know if for instance.. if operational efficiency is the key for

39
00:03:02,690 --> 00:03:08,690
this question, then you wouldn't want to go with EC2 because that has a much higher operational overhead

40
00:03:08,720 --> 00:03:17,150
because you have to manage the operating system, whereas lambda you only have to manage the code. So just

41
00:03:17,150 --> 00:03:21,990
going through this table in the middle here you have the EC2 launch type where you manage the container

42
00:03:22,010 --> 00:03:28,190
instances so you have to remember that with the EC2 launch type you're still managing an EC2

43
00:03:28,190 --> 00:03:38,060
instance you're also then managing the containers and the tasks. With the ECS Fargate launch type

44
00:03:38,240 --> 00:03:39,930
you no longer have to worry about

45
00:03:39,940 --> 00:03:45,300
EC2, you don't have to manage the container instances on which your container runs.

46
00:03:45,320 --> 00:03:51,110
Instead you literally just create the containers and they run, and then with lambda that you just implement

47
00:03:51,110 --> 00:03:53,160
your code and the function runs for you.

48
00:03:53,750 --> 00:03:56,500
So how do you scale these solutions, well with EC2

49
00:03:56,900 --> 00:04:02,750
you can scale vertically and that means that you can change your instance type or your instance families

50
00:04:02,750 --> 00:04:12,350
so that you have more you more RAM, more EBS storage, or you can use auto scaling and that can be automatic

51
00:04:12,350 --> 00:04:17,780
obviously, and you can then scale horizontally by adding more instances to your application so that will

52
00:04:17,780 --> 00:04:22,820
work for some applications but not others. With ECS

53
00:04:23,150 --> 00:04:26,390
what you have to do is add container instances.

54
00:04:26,420 --> 00:04:32,030
So in other words you have to add more of these EC2 instances that run your containers and you add

55
00:04:32,030 --> 00:04:38,450
those to your cluster even manually or you create an ECS service and use auto scaling and that's very

56
00:04:38,450 --> 00:04:40,600
much the same auto scaling you are using here.

57
00:04:40,640 --> 00:04:45,950
Just looking at certain cloudWatch metrics and if your performance gets to a certain point for instance

58
00:04:45,950 --> 00:04:52,290
you'll see you had 80 percent then it adds additional instances. With Fargate

59
00:04:52,310 --> 00:04:53,480
you don't have to worry about that.

60
00:04:53,480 --> 00:05:00,860
So ECS will scale your cluster automatically and with Lambda you can automatically scale your concurrent

61
00:05:00,860 --> 00:05:05,900
executions up to the default limit of 1000 concurrent executions.

62
00:05:06,060 --> 00:05:11,990
And that's an account limit which you can change by contacting AWS and putting in an application.

63
00:05:15,280 --> 00:05:18,250
So what are the use cases for these different compute options?

64
00:05:18,250 --> 00:05:25,570
Well EC2 is more for traditional applications maybe applications that either aren't micro service or

65
00:05:25,870 --> 00:05:32,230
service oriented, they might not be able to run in a container and they might be the sort of stable

66
00:05:32,230 --> 00:05:37,570
applications you run for a long time or they might use certain languages frameworks and so on that aren't

67
00:05:37,570 --> 00:05:39,400
compatible with containers.

68
00:05:39,400 --> 00:05:47,170
So there are definitely use cases for using EC2. And then with ECS we're looking at micro services and batch

69
00:05:47,170 --> 00:05:54,040
use cases so much more micro services architectures and then with the different launch types you then

70
00:05:54,040 --> 00:05:59,410
need to work out for your use case do you need management or do you want management of the underlying

71
00:05:59,410 --> 00:06:05,980
platform or would you rather have all that taken care of for you. With Lambda

72
00:06:05,980 --> 00:06:12,450
there's lots of use cases such as extract transform load infrastructure, automation data validation,

73
00:06:12,520 --> 00:06:20,890
mobile back ends, so Lambda is very much custom code, with EC2 is it could be more commercial off

74
00:06:20,890 --> 00:06:26,710
the shelf applications, and with containers it can kind of fall somewhere in the middle.

75
00:06:31,280 --> 00:06:32,130
With the next line

76
00:06:32,150 --> 00:06:37,850
I just wanted to point out the limitation of nine hundred seconds in execution for lambda because that

77
00:06:37,850 --> 00:06:43,610
could be an issue and if that is an issue then you could even look at going to containers always see

78
00:06:43,610 --> 00:06:49,700
two and probably the next step would be to look at whether containers are compatible with your application.

79
00:06:49,760 --> 00:06:57,980
Now these these timeout issues don't obviously apply to these other compute types. In terms of how you

80
00:06:57,980 --> 00:07:07,430
pay for these resources with EC2 you pay for the instance runtime and that's based on the family and

81
00:07:07,430 --> 00:07:15,200
the type of instance you're running that's the same with EC2 launch type on ECS because you actually

82
00:07:15,200 --> 00:07:21,570
just pay for the EC2 instances you launch you don't pay for the containers you run on them. With

83
00:07:21,710 --> 00:07:29,760
ECS Fargate launch type you pay for the container runtime you don't know how many underlying EC2

84
00:07:29,760 --> 00:07:34,260
instances your containers are running, on that's completely abstracted away from you so you don't have

85
00:07:34,260 --> 00:07:39,330
to pay for those you just pay for the number of containers you're running, the configuration of those

86
00:07:39,330 --> 00:07:45,450
containers based on the amount of resources that you've allocated to them. And then with Lambda you just

87
00:07:45,450 --> 00:07:51,960
pay for execution time and the amount of memory that's actually allocated to that function.

88
00:07:51,960 --> 00:07:54,570
So that's just a quick overview of some of the differences.

89
00:07:54,660 --> 00:08:00,060
Definitely worthwhile going to the FAQs for each of these services and then just try and understand

90
00:08:00,330 --> 00:08:02,070
these differences in a bit more detail.

