WEBVTT
1
00:00:05.110 --> 00:00:06.610
Hi, guys, and welcome to this lesson.

2
00:00:06.970 --> 00:00:12.700
So we've already been starting and stopping and rebooting and launching and terminating instances quite

3
00:00:12.700 --> 00:00:13.970
a lot of times so far.

4
00:00:14.560 --> 00:00:20.710
But there's a few key facts about the instance lifecycle that you need to fully understand for the exam.

5
00:00:22.060 --> 00:00:23.170
So let's have a look.

6
00:00:23.620 --> 00:00:27.670
Firstly, we have all am-I and we launch our instance from it.

7
00:00:28.240 --> 00:00:33.610
Now you've noticed that when you do that, it goes into what's called a pending state from pending.

8
00:00:33.820 --> 00:00:38.980
It should then go to a running state if all works correctly from a running state, we have a couple

9
00:00:39.010 --> 00:00:45.730
options we can reboot, for instance, in which case it goes into a rebooting state and then should

10
00:00:45.730 --> 00:00:48.370
return to a running state in a few minutes.

11
00:00:48.760 --> 00:00:50.410
We could terminate our instance.

12
00:00:50.680 --> 00:00:56.710
And that means that the instance goes into a shutting down state and then ends up being terminated.

13
00:00:57.160 --> 00:01:02.650
Or we could stop an instance or we can stop hibernate instance.

14
00:01:02.920 --> 00:01:05.260
And these are a couple of options we'll talk about in a moment.

15
00:01:05.950 --> 00:01:12.820
So if you stop or stop hibernate your instance, it goes into a stopping state and then goes into a

16
00:01:12.820 --> 00:01:13.570
stop state.

17
00:01:14.050 --> 00:01:19.870
Stopping and hibernating instances is only applicable to EBS Bax instances.

18
00:01:20.170 --> 00:01:26.170
If your instance uses instant store volumes instead, you cannot stop it or hibernate the instance.

19
00:01:26.590 --> 00:01:31.210
Now, from a stopped state, you can then terminate the instance as well if you want, and then you'll

20
00:01:31.210 --> 00:01:32.800
never be able to start it up again.

21
00:01:33.220 --> 00:01:38.650
Or you can start it, and then it would go back into the pending state and eventually turn to the running

22
00:01:38.650 --> 00:01:39.040
states.

23
00:01:39.340 --> 00:01:44.140
So those are the various states and operations you can perform on your instances.

24
00:01:44.410 --> 00:01:46.510
Now, let's have a look at a few key facts.

25
00:01:46.870 --> 00:01:51.220
Stopping easy to instances applies to EBS backed instances only.

26
00:01:51.550 --> 00:01:58.180
There's no charge for the stopped instance, but the EBS volumes will remain attached and they are chargeable.

27
00:01:58.840 --> 00:02:02.800
The data in RAM is actually lost when you stop the instance.

28
00:02:03.100 --> 00:02:10.120
The instance is typically migrated to a different host, so it's a good way of being able to move your

29
00:02:10.120 --> 00:02:11.410
instance between hosts.

30
00:02:11.650 --> 00:02:16.900
If you need to for some reason, for example, you might know that some scheduled hardware maintenance

31
00:02:17.140 --> 00:02:20.230
is happening on a house that your instance is running on.

32
00:02:20.500 --> 00:02:25.450
In that case, if you stop it and start it again, you know it's going to be on a different host when

33
00:02:25.450 --> 00:02:26.590
you stop your instances.

34
00:02:26.590 --> 00:02:33.250
The private IP addresses for v4 and six are retained and public IP addresses are released.

35
00:02:33.460 --> 00:02:36.520
Any associated elastic types are also retained.

36
00:02:37.390 --> 00:02:38.890
So then we have hibernating.

37
00:02:39.310 --> 00:02:44.650
Now this applies to on demand or reserved Linux instances with hibernation.

38
00:02:44.650 --> 00:02:48.400
The contents of RAM are saved to an EBS volume.

39
00:02:48.760 --> 00:02:54.700
So this means you can return your instance to the state it was in, including the information that was

40
00:02:54.700 --> 00:02:55.360
in RAM.

41
00:02:55.690 --> 00:03:02.800
When you need to, the instance must be enabled for hibernation when it is launched and specific prerequisites

42
00:03:02.800 --> 00:03:05.230
do apply when you start your instance.

43
00:03:05.230 --> 00:03:10.030
After it's been hibernated, the volume is restored to its previous state.

44
00:03:10.270 --> 00:03:17.170
The RAM contents are reloaded back into memory, and any processes that were previously running on the

45
00:03:17.170 --> 00:03:18.370
instance are resumed.

46
00:03:18.790 --> 00:03:24.640
You'll also find that any previously attached data volumes are attached, and the instance retains its

47
00:03:24.640 --> 00:03:25.340
instance idle.

48
00:03:25.810 --> 00:03:27.790
Next, we have rebooting instances.

49
00:03:28.030 --> 00:03:30.820
This is equivalent to an operating system reboot.

50
00:03:31.240 --> 00:03:37.440
The DNS name and all IPv4 and six addresses do get retained does not affect billing.

51
00:03:37.450 --> 00:03:38.770
You carry on being built.

52
00:03:39.250 --> 00:03:43.480
Instances can also be retired, and this can happen for a couple of reasons.

53
00:03:43.630 --> 00:03:49.990
One is the West attacks and irreparable failure of the underlying hardware on which the instance is

54
00:03:49.990 --> 00:03:56.050
running or the instance reaches its scheduled retirement date, and in that case, it's stopped or terminated

55
00:03:56.050 --> 00:03:57.100
by IWC.

56
00:03:57.340 --> 00:03:58.690
Now what about terminating?

57
00:03:58.900 --> 00:04:02.890
This is essentially deleting the instance you cannot recover.

58
00:04:02.890 --> 00:04:04.210
It terminated instance.

59
00:04:04.210 --> 00:04:05.950
It's gone by default.

60
00:04:06.040 --> 00:04:08.710
EBS route volumes are deleted now.

61
00:04:09.040 --> 00:04:16.150
Additional volumes that are added to and EC2 instance are not deleted by default, and these settings

62
00:04:16.150 --> 00:04:19.840
can be changed for both the route volume and any additional volumes, you add.

63
00:04:20.260 --> 00:04:23.110
We then have recovering of two instances.

64
00:04:23.620 --> 00:04:29.320
In this case, cloud watch can be used to monitor the system status, and it can check for and then

65
00:04:29.320 --> 00:04:32.470
recover the instance if an issue is found.

66
00:04:32.830 --> 00:04:38.890
This might apply if the instance becomes impaired due to underlying hardware or platform issues.

67
00:04:39.160 --> 00:04:41.170
So these are the system status checks.

68
00:04:41.170 --> 00:04:46.000
Remember, that's when IWC needs to do something to help recover your instance.

69
00:04:46.480 --> 00:04:51.160
If the instance is recovered, it should be identical to the original instance.

70
00:04:51.520 --> 00:04:56.530
And that's it for the easy to instance live cycle, when there's a few key facts that it could be really

71
00:04:56.530 --> 00:04:57.580
useful for your exam.

