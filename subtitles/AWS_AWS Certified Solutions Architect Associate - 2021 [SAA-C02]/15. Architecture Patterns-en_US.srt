1
00:00:05,510 --> 00:00:09,020
Hello and welcome to the first architecture patterns lesson of the course.

2
00:00:09,440 --> 00:00:14,390
What I'm trying to do with these lessons is take some of the knowledge that you've learned and put it

3
00:00:14,390 --> 00:00:20,060
into the context of the type of scenarios you're going to see both in the exam and in the real world.

4
00:00:20,090 --> 00:00:25,850
So imagine your solutions architects and you're working for some customers and those customers are saying

5
00:00:25,850 --> 00:00:31,010
that you need to build a solution and they're going to present some specific requirements to you, present

6
00:00:31,010 --> 00:00:35,120
some challenges that they're trying to deal with, and you've got to come up with the best solution

7
00:00:35,120 --> 00:00:35,660
for the job.

8
00:00:36,170 --> 00:00:38,810
That's the kind of thing that does come up in exam questions.

9
00:00:39,050 --> 00:00:44,360
So I'm going to pose a few scenarios for you here and give you my idea of what the best solution would

10
00:00:44,360 --> 00:00:44,630
be.

11
00:00:45,140 --> 00:00:52,370
The first requirement is that a select group of users only should be allowed to change that IAM password.

12
00:00:52,370 --> 00:00:57,500
So we don't want to let everybody change that Lam passwords, but we do want some privileged users to

13
00:00:57,500 --> 00:00:58,420
be able to do so.

14
00:00:59,030 --> 00:01:05,600
In this case, you can create a group for the users and apply a permissions policy that grants the IAM

15
00:01:05,600 --> 00:01:07,610
Change Password API permission.

16
00:01:08,090 --> 00:01:14,510
Moving on to the next requirement and Amazon EC2 instance must be delegated with permissions to an Amazon

17
00:01:14,510 --> 00:01:15,890
Dynamo DB table.

18
00:01:16,070 --> 00:01:19,850
Now, we haven't covered Dynamo DB yet, but it's another IWC service.

19
00:01:20,150 --> 00:01:21,740
So how do you delegate permissions?

20
00:01:22,040 --> 00:01:28,130
Well, you would create a role assign a permissions policy to the role that grants access to the Dynamo

21
00:01:28,130 --> 00:01:29,660
DB database service.

22
00:01:30,080 --> 00:01:33,110
A company has created that first IWC account.

23
00:01:33,440 --> 00:01:36,830
They need to assign permissions to users based on job function.

24
00:01:37,070 --> 00:01:38,960
That is a couple of things to note here.

25
00:01:39,260 --> 00:01:45,200
Firstly, this company has created their first ever IWC account, so they may well not have very good

26
00:01:45,350 --> 00:01:47,330
skills with IWC.

27
00:01:47,750 --> 00:01:50,100
So what are the IAM best practices tell you?

28
00:01:50,270 --> 00:01:56,210
In this scenario, will they suggest that you use the IWC managed policies and those can be aligned

29
00:01:56,210 --> 00:01:58,490
with specific common job functions?

30
00:01:58,700 --> 00:02:05,210
A solutions architect needs to restrict access to an AWB service based on the source IP address of the

31
00:02:05,210 --> 00:02:05,870
requester.

32
00:02:06,290 --> 00:02:08,450
Remember, we looked at some example policies.

33
00:02:08,930 --> 00:02:15,650
You can create an IAM permissions policy and use the condition element to control access based on source

34
00:02:15,650 --> 00:02:21,500
IP address, a developer needs to make programmatic API calls from a top U.S. ally.

35
00:02:21,830 --> 00:02:27,410
In this case, you can instruct the developer to create a set of access keys and use those for any programmatic

36
00:02:27,410 --> 00:02:27,920
access.

37
00:02:28,930 --> 00:02:34,210
A group of users require full access to all Amazon to API actions.

38
00:02:34,870 --> 00:02:39,490
Well, in that case, you could create a permissions policy that uses a wildcard for the action element

39
00:02:39,490 --> 00:02:45,040
relating to and that would look like the easy to code on star action.

40
00:02:45,550 --> 00:02:47,770
And that's it for this architecture patterns lesson.

