WEBVTT
1
00:00:02.620 --> 00:00:06.310
We're now ready to start setting up some ECS clusters.

2
00:00:06.310 --> 00:00:10.430
And the first one we're going to do is an ECS Fargate cluster.

3
00:00:10.480 --> 00:00:15.420
So you remember this is the one where you don't manage the EC2 instances you don't see them.

4
00:00:15.520 --> 00:00:22.080
You create a cluster and a service and then tasks and everything else is managed for you.

5
00:00:22.200 --> 00:00:27.890
Let's go into the console and what we're going to do is we're just going to use this get started with

6
00:00:27.890 --> 00:00:28.160
it.

7
00:00:28.500 --> 00:00:35.850
Now we're going to use multiple methods for creating ECS clusters both using the Fargate launch type

8
00:00:35.850 --> 00:00:37.580
and EC2 launch type.

9
00:00:37.650 --> 00:00:43.980
This Wizard is a very simple way of just getting something running but we're going to go into lots more

10
00:00:43.980 --> 00:00:50.370
detail throughout this section so you will see how to do it from the command line and from the console.

11
00:00:50.610 --> 00:00:56.880
But just for now we're going to go use this really simple wizard which sets up a sample application

12
00:00:56.880 --> 00:01:02.360
and that sample application is just going to be an instance of Apache.

13
00:01:02.880 --> 00:01:08.100
I'm going to leave the defaults and we can see it uses a first-run task definition.

14
00:01:08.100 --> 00:01:13.240
So this is one which is just already there for you in your account.

15
00:01:13.320 --> 00:01:15.480
We're going to use VPC mode.

16
00:01:15.660 --> 00:01:22.140
It's going to create a new task execution role and it's going to be a Fargate type.

17
00:01:22.140 --> 00:01:31.220
Let's collect next you could attach an elastic load balancer here and you only have the option for application

18
00:01:31.220 --> 00:01:31.890
load balancer.

19
00:01:31.910 --> 00:01:34.070
But we're not going to do that.

20
00:01:34.430 --> 00:01:36.710
We will do that later in this section.

21
00:01:36.710 --> 00:01:45.580
We just need to give this a name and I'm going to call it DCT going to stop it from checking my spelling

22
00:01:45.930 --> 00:01:47.160
Fargate.

23
00:01:47.290 --> 00:01:55.820
And it's going to create a new VPC and subnets for us to collect next we can now see what's going to

24
00:01:55.820 --> 00:01:57.200
be created.

25
00:01:57.230 --> 00:02:04.070
So there's a cluster there's a service there's a task definition and as a container definition if you

26
00:02:04.070 --> 00:02:11.180
remember from the logical diagram earlier we showed what our task definition looks like and within a

27
00:02:11.180 --> 00:02:13.990
task definition you actually have container instances.

28
00:02:14.300 --> 00:02:19.070
And if you saw the full task definition for this and we'll we'll go through this and actually create

29
00:02:19.070 --> 00:02:24.920
a wordpress task later in this section you'll see that there's a mysql database that goes along

30
00:02:24.920 --> 00:02:28.820
with this so you can have multiple containers within a task definition

31
00:02:31.880 --> 00:02:39.150
let's come back to the console and everything is fine so we're just going to click Create.

32
00:02:39.350 --> 00:02:44.270
Now what's actually happening here while this is all creating is it's going to leverage the cloudformation

33
00:02:44.270 --> 00:02:45.330
service.

34
00:02:45.350 --> 00:02:52.670
Now we haven't covered cloudformation in this course yet but it's an infrastructure as code service

35
00:02:53.060 --> 00:02:59.530
where you're able to create your clusters and your infrastructure through code.

36
00:02:59.600 --> 00:03:08.840
It actually uses some files where everything is declared in a JSON or YML template.

37
00:03:09.260 --> 00:03:14.450
And then that template can then be used to create what's called a stack.

38
00:03:14.450 --> 00:03:18.980
And so you can see this actually happening now where we've got to create in progress.

39
00:03:18.980 --> 00:03:21.740
And so we have this stack that's being created.

40
00:03:21.740 --> 00:03:24.530
We can go to events and you can actually see what's happening.

41
00:03:24.530 --> 00:03:30.440
So if we go down we can see all the various different tasks that are happening VPC is being created

42
00:03:30.440 --> 00:03:35.540
and Internet gateways going be attached subnets are going to be created and so on.

43
00:03:35.540 --> 00:03:43.040
So the whole environment is set up for us and can be torn down for us as well automatically.

44
00:03:43.040 --> 00:03:47.300
You can see the list of the resources that are being created.

45
00:03:47.490 --> 00:03:51.200
You can see some outputs if they're defined.

46
00:03:51.390 --> 00:03:57.420
You can see the parameters and this is where you have options to change for instance your subnet block

47
00:03:58.380 --> 00:03:59.750
and your VPC side.

48
00:03:59.790 --> 00:04:02.770
You can change your instance roles here and that kind of thing.

49
00:04:02.790 --> 00:04:07.350
So that's a very powerful technology and you can even use it to detect drift.

50
00:04:07.380 --> 00:04:12.760
So your infrastructure is defined through the template.

51
00:04:13.130 --> 00:04:19.220
And then if you make changes to the configuration you can get cloud formation to check and see whether

52
00:04:19.550 --> 00:04:22.490
what's changed it can give you a report and let you know what's happened.

53
00:04:22.490 --> 00:04:29.090
That only took a few minutes and now we can see that our create is complete and back in the ECS management

54
00:04:29.090 --> 00:04:35.120
console now and we can see that we have a cluster called DCT Fargate and we have a service and a running

55
00:04:35.120 --> 00:04:38.930
task running under the Fargate launch type.

56
00:04:38.930 --> 00:04:45.740
You could also have the EC2 launch type having services and tasks running in the same cluster let's

57
00:04:45.740 --> 00:04:48.220
go into this cluster and have a look.

58
00:04:48.260 --> 00:04:50.900
So we have a sample app service.

59
00:04:50.900 --> 00:04:58.670
And if we click on the app service we can see the tasks that are running we can have a look at events

60
00:05:01.050 --> 00:05:02.690
we can configure.

61
00:05:02.700 --> 00:05:05.010
Auto scaling we'd have to click update

62
00:05:08.090 --> 00:05:11.420
we can have a look at the task placement strategies

63
00:05:14.630 --> 00:05:22.230
and you can have a look at metrics apply tags and view logs.

64
00:05:22.230 --> 00:05:23.390
That's the service.

65
00:05:23.550 --> 00:05:27.090
If we come back up a level we can go in and see tasks.

66
00:05:27.090 --> 00:05:29.950
And again this is where we can see our task.

67
00:05:30.170 --> 00:05:32.840
If you go to AC That's instances you don't see anything.

68
00:05:32.850 --> 00:05:37.730
If this was an EC2 launch type cluster you'd see your instances here.

69
00:05:38.460 --> 00:05:45.010
And indeed if we go over to the EC2 management console you're not going to see anything running.

70
00:05:45.010 --> 00:05:51.790
If this was an EC2 launch type you'd have your EC2 instances running there with the cluster

71
00:05:51.790 --> 00:05:59.180
agent installed let's just get back to where we were and what I want to do is I'm going to head into

72
00:05:59.180 --> 00:06:08.210
this task and I can grab the public IP address of the task and if we just open another tab here we can

73
00:06:08.210 --> 00:06:11.630
see that we have a sample app running on ECS.

74
00:06:11.990 --> 00:06:13.080
So it's as simple as that.

75
00:06:13.100 --> 00:06:20.440
That's just running on Apache on ECS and if we go down here we can have a look at container.

76
00:06:20.440 --> 00:06:25.900
So you got your task with your task configuration then you got your container configuration.

77
00:06:25.900 --> 00:06:31.320
And in here you can run a docker CMD command when you start your instance.

78
00:06:31.450 --> 00:06:35.740
You can see some information about the CPU units that are allocated to it.

79
00:06:35.740 --> 00:06:40.150
These are known as shares and you can see the memory allocation as well.

80
00:06:40.150 --> 00:06:42.090
That's all we're going to do in this lab.

81
00:06:42.160 --> 00:06:48.730
What I'm going to do now is delete the cluster and you just have to click delete cluster and then type

82
00:06:48.730 --> 00:06:53.690
delete me and this will now use cloudformation to remove this configuration.

83
00:06:53.770 --> 00:07:01.650
So if we go back into the console in another tab and I'll head over to cloudformation and what we'll

84
00:07:01.650 --> 00:07:07.320
see is a delete in progress and if we look into events we can now see what's happening and it's

85
00:07:07.320 --> 00:07:09.190
actually removing that cluster.

86
00:07:09.330 --> 00:07:13.140
So that won't take long and it will clean up all the resources that were created.

