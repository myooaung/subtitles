1
00:00:02,200 --> 00:00:05,060
Hello and welcome to the container section of the course.

2
00:00:05,140 --> 00:00:07,030
I'm quite excited about this section.

3
00:00:07,030 --> 00:00:09,740
Containers are a very interesting technology.

4
00:00:09,760 --> 00:00:15,280
They've been around for several years now and definitely in the last few years they've really exploded

5
00:00:15,280 --> 00:00:16,540
in usage.

6
00:00:16,540 --> 00:00:22,210
It doesn't matter if you don't have a background with containers as I'm going to start from the basics.

7
00:00:22,210 --> 00:00:27,850
The key service that we're going to be looking at is the Elastic container service we''ll also cover the

8
00:00:27,850 --> 00:00:34,300
Elastic Kubernetes service in some detail as well within this section.

9
00:00:34,300 --> 00:00:38,870
Before we get into details of ECS let's just review what containers are.

10
00:00:38,890 --> 00:00:45,940
So as you can see here ECS makes it easy to deploy management scale docker containers so Docker is a

11
00:00:45,940 --> 00:00:52,960
software provider who really started the recent movement towards containerization and ECS is compatible

12
00:00:52,960 --> 00:00:54,260
with Docker.

13
00:00:54,370 --> 00:00:56,680
So let's just go over to a slide here.

14
00:00:56,680 --> 00:01:01,100
Now this comes straight from the docker Web site and it just explains what a container is.

15
00:01:01,120 --> 00:01:03,540
So I'm just going to quickly read through this to you.

16
00:01:03,610 --> 00:01:10,560
So Docker say a container is a standard unit of software that packages up code and all its dependencies.

17
00:01:10,570 --> 00:01:17,410
So the application runs quickly and reliably from one computing environment to another a docker container

18
00:01:17,440 --> 00:01:23,410
image is a lightweight standalone executable package of software that includes everything needed to

19
00:01:23,410 --> 00:01:29,170
run an application code runtime system tools system libraries and settings

20
00:01:32,070 --> 00:01:33,830
so you then got a diagram here.

21
00:01:33,840 --> 00:01:37,400
Now in the AWS the infrastructure is abstracted away from you.

22
00:01:37,410 --> 00:01:42,940
So AWS manage the infrastructure you then have a host operating system.

23
00:01:42,990 --> 00:01:47,730
Now there's a couple of different types of implementation of ECS that you can use.

24
00:01:47,730 --> 00:01:51,600
They're called Launch types and we'll go into that in a bit more detail shortly.

25
00:01:51,600 --> 00:01:56,560
In one type you don't actually have an operating system to manage and in the other you do.

26
00:01:56,940 --> 00:02:01,320
But there's always going to be an operating system layer and then there's going to be the docker software

27
00:02:01,320 --> 00:02:02,600
that sits above that.

28
00:02:02,850 --> 00:02:06,530
And then the containers are where your application code resides.

29
00:02:07,380 --> 00:02:09,560
And there they have the minimal information.

30
00:02:09,560 --> 00:02:14,330
So just like it says here they have the code, the runtime, the systems or system libraries and settings.

31
00:02:14,330 --> 00:02:15,360
It's the absolute minimum.

32
00:02:15,360 --> 00:02:16,650
So they're quite small.

33
00:02:16,860 --> 00:02:20,970
They're fast, you can start them and stop them extremely quickly much faster than you would

34
00:02:21,000 --> 00:02:28,200
an instance or a virtual machine and it means that you can use these really well in micro services

35
00:02:28,200 --> 00:02:31,990
environments where you can run lots of processes in parallel.

36
00:02:32,160 --> 00:02:36,450
You can isolate them from each other so it doesn't matter about compatibility

37
00:02:36,440 --> 00:02:42,480
at the operating system level because each of these is isolated from each other and you can scale them

38
00:02:42,990 --> 00:02:44,320
very easily.

39
00:02:44,370 --> 00:02:49,800
Let's have a look at the details of the Elastic Container Service now.

40
00:02:49,870 --> 00:02:53,620
There are few components that you need to understand and we're going to go through these again and again

41
00:02:53,620 --> 00:02:55,590
through this section so you really understand it.

42
00:02:56,500 --> 00:03:04,740
Firstly there's the ECS cluster and there are two launch types with the Elastic container service. In one

43
00:03:04,740 --> 00:03:10,500
you have EC2 instances that you manage and in the other you don't have an EC2 instances

44
00:03:10,500 --> 00:03:11,010
to manage.

45
00:03:11,010 --> 00:03:13,600
So it's more of a server-less service.

46
00:03:13,690 --> 00:03:18,970
For now we're going to talk about the launch type where you do have EC2 instances and that's known

47
00:03:18,970 --> 00:03:22,250
as the EC2 launch type.

48
00:03:22,330 --> 00:03:30,950
So in the ECS cluster you have a logical grouping of EC2 instances within that cluster you then

49
00:03:30,950 --> 00:03:32,540
have container instances.

50
00:03:32,540 --> 00:03:35,690
So this is actually an EC2 instance.

51
00:03:35,690 --> 00:03:40,160
You can go into the EC2 management console and you can see this instance running

52
00:03:43,430 --> 00:03:50,540
and that instance runs the container agent and you use an ECS optimized AMI to launch a container instance.

53
00:03:50,540 --> 00:03:53,070
And that way you actually get the agent installed for you.

54
00:03:53,210 --> 00:03:56,410
You can install it manually if you like on another AMI

55
00:03:59,470 --> 00:04:00,880
on top of a container instance.

56
00:04:00,880 --> 00:04:08,650
We run tasks and these are actually containers and they're launched from a task definition which is

57
00:04:08,800 --> 00:04:12,010
a file with some JSON in it like this.

58
00:04:12,010 --> 00:04:20,760
So we have a task which is a running container using settings in a task definition.

59
00:04:20,810 --> 00:04:29,300
We then have a service and the service which is optional you can run EC2 instances with tasks without

60
00:04:29,300 --> 00:04:31,270
having the ECS service.

61
00:04:31,400 --> 00:04:35,690
But if you install the ECS service we create a configuration using the ECS service.

62
00:04:35,690 --> 00:04:41,780
What it does is it allows you to control the amount of tasks that are running and some of the parameters

63
00:04:41,780 --> 00:04:48,900
of those tasks and you can also use auto scaling and attach an Elastic load balancer.

64
00:04:49,450 --> 00:04:51,890
So the other thing you'll notice here is an image.

65
00:04:52,240 --> 00:04:56,230
So the image sits in the Elastic container registry in this diagram.

66
00:04:56,290 --> 00:05:01,660
It can also be in Docker Hub and in the case of this launch type, the EC2 launch type, where you have

67
00:05:01,660 --> 00:05:03,750
your own instances to manage.

68
00:05:03,820 --> 00:05:07,390
You can also use a self-hosted registry as well.

69
00:05:07,930 --> 00:05:15,070
So what happens is you create your cluster you create your container instances within that cluster

70
00:05:15,310 --> 00:05:18,580
and they could be spread across different Availability Zones.

71
00:05:18,580 --> 00:05:24,310
You create a task definition and that defines how to launch a task and the task definition actually

72
00:05:24,310 --> 00:05:25,750
references an image.

73
00:05:25,750 --> 00:05:28,590
So this could be your WordPress image here for instance.

74
00:05:28,750 --> 00:05:33,010
And here it tells you to launch this task with the WordPress image.

75
00:05:33,010 --> 00:05:40,430
So when you run this task it's going to go to a registry and it's going to pull that image down so let's

76
00:05:40,430 --> 00:05:43,410
just have a quick look now at launch types.

77
00:05:43,550 --> 00:05:49,490
We talked about these just now and there's two different types you got EC2 and Fargate. EC2 is

78
00:05:49,490 --> 00:05:57,510
what we just showed on the slide and with easy to launch type you have container instances.

79
00:05:57,510 --> 00:06:02,340
So these are your EC2 instances and you can see on the right hand side hey you still got a cluster

80
00:06:02,760 --> 00:06:09,300
you still got a service and you've got tasks but there are no container instances over here couple of

81
00:06:09,300 --> 00:06:13,670
differences up the top four registries with it easy to launch type.

82
00:06:13,860 --> 00:06:20,280
You can use the Elastic container registry Docker Hub or self hosted registry with the far right launch

83
00:06:20,280 --> 00:06:20,760
type.

84
00:06:20,760 --> 00:06:26,980
You can use the Elastic container registry and Docker Hub so there's no self-hosted registry of the

85
00:06:26,980 --> 00:06:31,640
key differences you explicitly provision your EC2 instances.

86
00:06:31,700 --> 00:06:37,050
And we'll see how you do that in the labs in this section with ECR.

87
00:06:37,090 --> 00:06:39,730
You don't so that automatically provision.

88
00:06:39,730 --> 00:06:44,020
There are two instances running somewhere that you don't see them so that's not something you have to

89
00:06:44,020 --> 00:06:46,320
worry about and you don't have to manage them at all.

90
00:06:46,510 --> 00:06:53,070
Whereas with the EC2 launch type you do have to manage those instances. Pricing is different as well

91
00:06:53,190 --> 00:06:59,790
with the EC2 launch type, your charged per running EC2 instance so you're charged not for the

92
00:06:59,790 --> 00:07:02,930
tasks that run but for the actual container instance.

93
00:07:02,940 --> 00:07:09,750
With Fargate you're charged for the tasks so it's a different pricing model

94
00:07:11,060 --> 00:07:12,920
to the EC2 launch launch type.

95
00:07:12,940 --> 00:07:18,910
You can use persistent storage so you can attach persistent storage volumes to a task and that can be

96
00:07:18,910 --> 00:07:20,960
EFS and EBS.

97
00:07:21,130 --> 00:07:21,910
With Fargate

98
00:07:21,910 --> 00:07:22,510
you can't.

99
00:07:22,540 --> 00:07:27,540
There's no persistent storage options with Fargate launch type.

100
00:07:27,540 --> 00:07:33,490
You handle any cluster optimization so you can actually launch and also scaling group for containers.

101
00:07:33,690 --> 00:07:39,560
But it's not actually within EC2 it's within the ECS management console. Slightly different when you

102
00:07:39,560 --> 00:07:44,570
use services because that has more of an integration at the task level in terms of Fargate.

103
00:07:44,570 --> 00:07:49,020
They have little cluster optimization for you BBC to launch time.

104
00:07:49,020 --> 00:07:53,810
You have more granular control you actually have to manage this instance you have root access to it

105
00:07:54,300 --> 00:08:00,930
whereas with fargate you don't have that level of control so you've always got to think in a certain situation

106
00:08:01,020 --> 00:08:03,150
for a certain solution.

107
00:08:03,190 --> 00:08:08,710
Is it more important to abstract away some of that management and not have to worry about the management

108
00:08:08,710 --> 00:08:14,290
so it's more operationally efficient or do you need some level of control where you need to get access

109
00:08:14,290 --> 00:08:15,330
to the operating system.

110
00:08:15,340 --> 00:08:21,370
Maybe you need to install some kind of management software for your organisation and that might sway

111
00:08:21,370 --> 00:08:23,900
you towards using the EC2 launch type.

112
00:08:24,010 --> 00:08:25,590
So that's it for this lesson.

113
00:08:25,600 --> 00:08:30,430
I know this has been more theory than actual lab but we're gonna do lots and lots of labs in this section

114
00:08:30,730 --> 00:08:35,530
so I just wanted to make sure that all this all these concepts are clear in your mind before we continue.

