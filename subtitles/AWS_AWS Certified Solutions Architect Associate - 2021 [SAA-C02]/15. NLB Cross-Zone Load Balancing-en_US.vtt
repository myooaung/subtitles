WEBVTT
1
00:00:01.910 --> 00:00:03.290
Hi guys and welcome back.

2
00:00:03.290 --> 00:00:05.840
We're carrying on from the previous lap.

3
00:00:05.840 --> 00:00:11.460
We have our free instances running and they're split across two Availability Zones.

4
00:00:11.570 --> 00:00:18.590
And what we're going to do is look at the behavior of cross own load balancing with a network load balancer.

5
00:00:18.980 --> 00:00:23.880
So I'm going to create a network load balancer just going to call this my MLB.

6
00:00:24.030 --> 00:00:30.320
It's gonna be Internet facing we can our TCB we have poor Haiti for the front end and then I'm just

7
00:00:30.320 --> 00:00:36.920
going to choose the two Availability Zones which my instances of running in click next.

8
00:00:37.030 --> 00:00:44.310
Let's go to routing and I'm going to create a new target group called T1 going to leave the settings

9
00:00:44.310 --> 00:00:50.730
as default except for the healthy fresh shoulder I'm going to put it to and then we're going to register

10
00:00:50.820 --> 00:00:54.750
all three of our targets and we'll click on Create.

11
00:00:55.080 --> 00:00:57.180
And that's our low balance of provisioning.

12
00:00:57.210 --> 00:01:04.740
Now note the attributes cross own load balancing is disabled so it's different to the classic load balancer

13
00:01:04.770 --> 00:01:09.790
and the application load balancer as it's not enabled when you create it through the console.

14
00:01:09.810 --> 00:01:14.260
It is with the classic load balancer and it's always enabled with the application load balancer.

15
00:01:14.310 --> 00:01:19.890
So we'll leave that as it is and we'll check out the behavior of the NLRB with cross own load balancing

16
00:01:19.890 --> 00:01:22.740
disabled first once it's ready.

17
00:01:22.740 --> 00:01:28.260
It's been a few minutes and my network load balancer is now available so I'm going to copy the DNS name

18
00:01:29.020 --> 00:01:34.850
I'm going to put this into browser tab and I get Selena and I refresh.

19
00:01:34.980 --> 00:01:38.460
I still get Selena so I kind of stick to Selena here.

20
00:01:38.490 --> 00:01:44.040
Now let's try opening a new private window and I still get Selena.

21
00:01:44.140 --> 00:01:48.640
Now what you'll find is when you're doing testing like this with your frowns that's probably an imperfect

22
00:01:48.640 --> 00:01:54.820
way of doing it but also if you're just sending requests one after the other very quickly but eventually

23
00:01:54.820 --> 00:01:57.940
it will fail over to another instance.

24
00:01:58.030 --> 00:02:02.620
But what's happening at the moment is all traffic seems to just be going to this one instance.

25
00:02:02.620 --> 00:02:05.300
So this is with cross own load balancing disabled.

26
00:02:05.320 --> 00:02:07.420
Now I tried opening another private window.

27
00:02:07.420 --> 00:02:13.310
Now I go over in our availability zone and if I hit refresh I just stay with us.

28
00:02:13.780 --> 00:02:20.620
So again the behavior when you're doing testing like this doesn't seem to correlate with what's expected

29
00:02:20.620 --> 00:02:26.120
in the documentation but let's have a look what happens when we enable cross own load balancing.

30
00:02:26.230 --> 00:02:32.740
So we just go in here and we can enable cross own load balancing and let's go back into a new tab and

31
00:02:32.920 --> 00:02:34.390
see how it behaves.

32
00:02:34.390 --> 00:02:39.440
So I'll get Selena and then Amber and then I'd stick on Amber.

33
00:02:39.460 --> 00:02:44.710
So again it's kind of strange behavior guys you can keep playing around for a while with this and it

34
00:02:44.710 --> 00:02:50.530
doesn't seem to respond the way you expect it to according to the documentation that seems to be the

35
00:02:50.530 --> 00:02:53.820
way with the MLB and the CLP.

36
00:02:53.950 --> 00:02:58.900
So let's close this down and I'm going to delete my network load balancer and in the next lap we'll

37
00:02:58.900 --> 00:03:00.490
look at the application load balancer.

