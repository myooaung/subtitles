WEBVTT
1
00:00:06.280 --> 00:00:11.710
Welcome to another architectural patterns in this time on auto scaling and elastic load balancing.

2
00:00:12.370 --> 00:00:17.980
The first requirement we have to solve is high availability and elastic scalability is needed for web

3
00:00:17.980 --> 00:00:18.670
service as well.

4
00:00:18.820 --> 00:00:20.530
Hopefully, that straightforward to answer.

5
00:00:20.860 --> 00:00:26.830
You can use Amazon easy to auto scaling and application load balances across multiple places.

6
00:00:27.130 --> 00:00:34.780
Low latency connections are needed over UDP to a poll of EC2 instances running a gaming application.

7
00:00:35.440 --> 00:00:39.790
So in this case, you'd want to use a network load balancer with a UDP lesson.

8
00:00:39.790 --> 00:00:46.570
I remember you can't do UDP listeners with a Albi, so UDP would be the right type of load balancer

9
00:00:46.570 --> 00:00:46.840
here.

10
00:00:47.230 --> 00:00:50.680
It also provides very low latency, so it's ideal for this job.

11
00:00:51.790 --> 00:00:58.330
Clients needs a white list, static IP addresses for a highly available load balancing application and

12
00:00:58.330 --> 00:00:59.620
an IWC region.

13
00:01:00.130 --> 00:01:07.930
That means the clients are connecting to this application in your IWC accounts, and they need to specify

14
00:01:07.930 --> 00:01:10.990
specific IP addresses to connect to on the internet.

15
00:01:11.230 --> 00:01:14.860
And that means they're going to allow those through the firewall they're going to whitelist, and that

16
00:01:14.860 --> 00:01:20.190
means that they'll allow traffic to those addresses, but those addresses need to be statically defined.

17
00:01:20.200 --> 00:01:21.550
So how can we do that?

18
00:01:22.300 --> 00:01:28.380
Well, if you use a network load balancer, you can create static IP addresses in each A-Z.

19
00:01:28.660 --> 00:01:33.160
Remember, with an album, you don't get static IP addresses, so you wouldn't be able to do that.

20
00:01:33.490 --> 00:01:37.330
You would know the DNS name, but the IP addresses might change over time.

21
00:01:37.840 --> 00:01:44.080
An application on EC2 in an auto scanning group requires disaster recovery across regions.

22
00:01:44.470 --> 00:01:45.370
How can you do that?

23
00:01:45.640 --> 00:01:51.870
Well, remember you can't do auto scaling groups across regions, but what you can do is create a nice

24
00:01:51.880 --> 00:01:55.150
g in a second region with a capacity set to zero.

25
00:01:55.450 --> 00:01:59.050
That means there's not going to be any instances running so you're not wasting money.

26
00:01:59.680 --> 00:02:03.100
You can take snapshots and copy them across regions.

27
00:02:03.370 --> 00:02:08.430
You might use Lambda to automate that process or data lifecycle manager DLP.

28
00:02:08.980 --> 00:02:14.320
That means you now have snapshots of your instances from which you can create allies and launch them

29
00:02:14.320 --> 00:02:16.060
in that second region when you need to.

30
00:02:17.050 --> 00:02:23.590
An application on two must scale in larger increments if a big increase in traffic occurs compared to

31
00:02:23.590 --> 00:02:25.150
small increases in traffic.

32
00:02:25.840 --> 00:02:31.990
Well, in that case, you'd use auto scaling and a step scaling policy and you can figure a larger capacity

33
00:02:31.990 --> 00:02:32.590
increase.

34
00:02:32.860 --> 00:02:40.330
If the increase in traffic has jumped up considerably, you need to scale EC2 instances behind an Albi

35
00:02:40.660 --> 00:02:44.440
based on the number of requests completed by each instance.

36
00:02:44.980 --> 00:02:49.390
In this case, you can use an auto scaling group and a target tracking policy.

37
00:02:49.750 --> 00:02:56.050
Now, the target tracking policy can be looking at the Albi request count per target metric, and that's

38
00:02:56.050 --> 00:03:00.310
the number of requests that are outstanding for an individual target.

39
00:03:00.610 --> 00:03:05.260
So that gives you an idea of how many connections are happening on each instance, and it helps you

40
00:03:05.260 --> 00:03:06.460
to spread the load that way.

41
00:03:06.880 --> 00:03:10.690
An application runs on EC2 instances behind an Albi.

42
00:03:11.440 --> 00:03:16.060
Once authenticated, users should not needs a real fence if an instance fails.

43
00:03:16.630 --> 00:03:21.670
In this case, you could use a session state store such as Dynamo DB or Elastic Cache.

44
00:03:21.970 --> 00:03:26.920
They're very low latency, and they're good ways of storing this information so that if an instance

45
00:03:26.920 --> 00:03:34.060
fails and a user is directed to another EC2 instance, it can then go and retrieve the credentials the

46
00:03:34.060 --> 00:03:39.540
offensive location information from the database, and it doesn't ask the user to real forensic.

47
00:03:39.880 --> 00:03:42.510
A company is deploying an IDs IPS.

48
00:03:42.520 --> 00:03:48.700
That's an intrusion detection system and intrusion prevention system, and it's using virtual appliances

49
00:03:48.880 --> 00:03:50.890
and needs to scale those horizontally.

50
00:03:51.220 --> 00:03:57.100
For this scenario, you could use a gateway load balancer in front of the virtual appliances, and that's

51
00:03:57.100 --> 00:03:58.600
it for this architecture patterns.

