1
00:00:02,010 --> 00:00:04,200
Hello and welcome to another exam cram.

2
00:00:04,290 --> 00:00:11,430
So this time we're talking about AWS lambda and API gateway. So Lambda lets you run code as functions

3
00:00:11,430 --> 00:00:13,410
without provisioning or managing servers.

4
00:00:13,410 --> 00:00:15,990
So this is AWSs serverless product. Or one of the serverless products that 

5
00:00:16,110 --> 00:00:23,130
AWS offers. Lambda based applications also referred to as serverless applications

6
00:00:23,470 --> 00:00:30,120
are composed of functions which are triggered by events. With serverless computing

7
00:00:30,170 --> 00:00:37,370
your application is running on a server but all the server management is done by AWS. You specify the

8
00:00:37,370 --> 00:00:40,530
amount of memory you need allocated to your lambda function.

9
00:00:40,970 --> 00:00:48,470
And AWS Lambda allocates CPU power proportional to the memory that you specified using the same ratio

10
00:00:48,800 --> 00:00:55,730
as a general purpose EC2 instance type. A Lambda function can access AWS services or non-AWS

11
00:00:55,730 --> 00:01:03,080
service. Service is running in VPCs, non-AWS services running on ECS instances in an AWS

12
00:01:03,080 --> 00:01:11,090
the VPC. For compute resources you can request additional memory in 64 megabyte increments starting

13
00:01:11,090 --> 00:01:18,140
at 128 make up to 3008 megabytes. Functions larger than one thousand five hundred and thirty

14
00:01:18,140 --> 00:01:25,550
six megabytes are allocated multiple CPU threads and multi-threaded or multi-process code is needed

15
00:01:25,580 --> 00:01:32,660
so that you can take advantage of those CPU threads. There's a maximum execution time out of 15 minutes.

16
00:01:32,810 --> 00:01:37,700
This definitely comes up in an exam question now you'll never get asked directly what's the maximum

17
00:01:37,700 --> 00:01:43,670
execution time for Lambda. Instead it will be weaved into a scenario so you might have a scenario something

18
00:01:43,670 --> 00:01:50,150
like you have some code or a script that needs to run and today you only need to run this maybe once

19
00:01:50,150 --> 00:01:57,560
or twice a week so you want to be cost optimized what's the best solution and one of those solutions

20
00:01:57,560 --> 00:02:02,750
might be lambda. Now you know that it completes in ten minutes and you know that you only ever pay for

21
00:02:02,750 --> 00:02:07,610
lambda when you're executing your code that would be a good option if the script was completed in twenty

22
00:02:07,610 --> 00:02:14,450
minutes it wouldn't work, or you'd at least need to be able to execute multiple functions in parallel

23
00:02:14,450 --> 00:02:20,570
or once or sequentially in order to be able to complete your code so if that's not included in the scenario

24
00:02:20,750 --> 00:02:27,410
then you'd assume that lambda doesn't work for that scenario. You only pay for the time it runs. Lambda

25
00:02:27,410 --> 00:02:34,760
terminates the function at the timeout. Lambda is an event driven compute service so it executes code

26
00:02:35,000 --> 00:02:41,980
in response to events and that could be things like changes to data and an S3 bucket or dynamoDB

27
00:02:41,990 --> 00:02:49,400
table. The event source is the AWS service or application that produces events that trigger a lambda

28
00:02:49,400 --> 00:02:53,810
function and an event source is mapped to a lambda function.

29
00:02:53,810 --> 00:02:58,970
Now you remember this from the labs the event sources maintain the mapping configuration.

30
00:02:58,970 --> 00:03:02,730
So if it's Amazon S3 then you configure.

31
00:03:03,410 --> 00:03:11,120
Amazon S3 to let lambda know when something is changed like you've uploaded data but it's different

32
00:03:11,120 --> 00:03:18,800
for stream based services such as dynamoDB and Kinesis. On those cases you configure the event source

33
00:03:18,860 --> 00:03:24,620
on the lambda side, so lambda actually polls those services. You can deploy managed service applications

34
00:03:24,620 --> 00:03:27,370
using what's called the serverless application model.

35
00:03:27,470 --> 00:03:34,670
That's a specification that prescribes the rules for expressing serverless applications and it aligns with

36
00:03:34,670 --> 00:03:41,530
the syntax used by cloudformation and is supported by cloudformation as a set of resource

37
00:03:41,530 --> 00:03:44,590
types known as serverless resources.

38
00:03:44,830 --> 00:03:51,640
You can automate serverless applications release processes using AWS CodePipeline and CodeDeploy

39
00:03:51,640 --> 00:03:52,640
as well.

40
00:03:52,660 --> 00:03:57,040
Now you probably won't have those come up on the solution architect exam but you might well have those

41
00:03:57,040 --> 00:03:59,890
come up on the developer associate exam.

42
00:03:59,890 --> 00:04:04,970
You can enable your lambda function for tracing with AWS X-Ray as well.

43
00:04:05,140 --> 00:04:07,960
So moving on to Amazon API Gateway.

44
00:04:07,960 --> 00:04:14,950
This is a collection of resources and methods that are integrated with backend HTTP endpoints, lambda

45
00:04:14,950 --> 00:04:17,400
functions or other AWS services.

46
00:04:17,470 --> 00:04:24,760
So it's a fully managed service that makes it easy to publish maintain and monitor secure APIs.

47
00:04:24,940 --> 00:04:30,730
It's a pay as you go fully managed service that handles all the aspects of creating and operating your

48
00:04:30,730 --> 00:04:31,470
API.

49
00:04:31,990 --> 00:04:37,000
And it handles all the tasks involved in accepting and processing hundreds or thousands of concurrent

50
00:04:37,030 --> 00:04:44,620
API calls API calls can include traffic management authorization and access control monitoring an API

51
00:04:44,620 --> 00:04:46,090
version management.

52
00:04:46,090 --> 00:04:52,600
So together with Lambda, API Gateway forms the application facing part of the serverless infrastructure.

53
00:04:53,320 --> 00:05:01,330
Backend services can include EC2, AWS lambda or any web application cloudfront is used as the public

54
00:05:01,390 --> 00:05:08,650
endpoint for API Gateway and all of the APIs created in API Gateway are HTTPS

55
00:05:08,670 --> 00:05:16,070
endpoints so you can't have a HTTP endpoint. An API endpoint type refers to the hostname of

56
00:05:16,070 --> 00:05:23,210
the API and it can be optimized regional or private depending on where the majority of your traffic

57
00:05:23,210 --> 00:05:24,340
originates from.

58
00:05:26,410 --> 00:05:33,430
There are several features that can help you create and manage API so you got metering security resiliency

59
00:05:33,970 --> 00:05:37,770
operations monitoring and lifecycle management as well.

60
00:05:37,860 --> 00:05:42,550
For the solutions architects associate exam you shouldn't need to know API gateway in too much depth

61
00:05:42,940 --> 00:05:49,320
but definitely just to understand these features of API Gateway and know that it uses the cloudfront

62
00:05:49,330 --> 00:05:57,250
network and understand that it works with AWS lambda to form that application facing part of the AWS

63
00:05:57,250 --> 00:05:58,390
serverless infrastructure.

