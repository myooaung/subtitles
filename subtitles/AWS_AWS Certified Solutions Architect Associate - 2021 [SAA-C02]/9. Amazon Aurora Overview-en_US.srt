1
00:00:02,530 --> 00:00:05,250
Hi guys we're now going to cover Amazon Aurora.

2
00:00:05,280 --> 00:00:12,760
So this is another database in the RDS suite of products and you may remember from a couple of labs

3
00:00:12,760 --> 00:00:19,120
ago where I mentioned that I'd RDS Aurora is quite a different animal to the other databases in RDS

4
00:00:19,630 --> 00:00:23,890
and I'm just gonna give you an overview of some of the key features here.

5
00:00:23,920 --> 00:00:29,020
Now there are quite a few more and I do suggest that you go to the Amazon Web site.

6
00:00:29,110 --> 00:00:32,960
Look up RDS Aurora and learn as much as you can.

7
00:00:33,010 --> 00:00:39,070
But what is on the screen here I think represents the key information that you need to know for your

8
00:00:39,070 --> 00:00:42,590
exam so let's start at the top.

9
00:00:42,590 --> 00:00:48,920
First off you got a high performance and scalability audience roar offers high performance self healing

10
00:00:48,920 --> 00:00:52,010
storage which scales up to 64 terabytes.

11
00:00:52,010 --> 00:00:53,870
That's per instance.

12
00:00:53,900 --> 00:00:59,450
You also get point-in-time recovery has a feature called backtrack that you can enable which enables

13
00:00:59,450 --> 00:01:04,350
you to move your database back to a point in time within the last,

14
00:01:04,370 --> 00:01:10,760
I think it's up to 72 hours, and it is right down to the sort of minute or second level and you can then

15
00:01:10,850 --> 00:01:15,260
you can do that without actually having to restore your database as a really cool feature and you can

16
00:01:15,260 --> 00:01:17,810
also get continuous backups to S3.

17
00:01:18,020 --> 00:01:24,140
So very highly available we'll see the architecture in later labs on how they distribute storage.

18
00:01:24,140 --> 00:01:29,180
So there's six copies of your storage across three availability zones so lots and lots of redundancy

19
00:01:30,870 --> 00:01:32,900
D.B. compatibility.

20
00:01:33,060 --> 00:01:39,510
There are two database engines you can use mysql or Postgresql and compatibility with existing

21
00:01:39,600 --> 00:01:43,400
instances of these databases is is fully available.

22
00:01:44,550 --> 00:01:47,390
And we then have the three different options here.

23
00:01:47,400 --> 00:01:53,040
In fact there are 4 for high availability fault tolerance and sort of scaling your performance.

24
00:01:53,040 --> 00:02:01,800
And these are Aurora replicas and an aurora replica is similar to a RDS Read replica in that you're

25
00:02:01,800 --> 00:02:03,690
able to scale your reads.

26
00:02:03,690 --> 00:02:06,640
So it's only read traffic that gets scaled.

27
00:02:06,660 --> 00:02:12,140
It's however only within the region and you can have up to 15.

28
00:02:12,150 --> 00:02:18,220
So like I just mentioned with Aurora you get six copies of your data across three availability zones.

29
00:02:18,300 --> 00:02:25,530
And essentially what happens is the aurora replica is able to read data of those databases.

30
00:02:25,610 --> 00:02:30,710
You can also use them as a failover target so they can give you that fault tolerance where if your

31
00:02:30,710 --> 00:02:38,180
primary fails you can actually have them automatically takeover the database load and be able to perform

32
00:02:38,180 --> 00:02:43,760
rights so they actually get promoted automatically and you can specify tiers you know which ones or

33
00:02:43,760 --> 00:02:49,550
which order your redress because or your Aurora replicas will be upgraded or promoted to primary.

34
00:02:55,250 --> 00:02:57,550
We then have mysql read replicas.

35
00:02:57,560 --> 00:02:58,730
So these are very different.

36
00:02:58,970 --> 00:03:05,510
Whereas a raw because a within the region might seek will read replicas are cross region and actually

37
00:03:05,510 --> 00:03:14,260
creates a cluster within that region and labels you to scale your read traffic again and have a fail

38
00:03:14,260 --> 00:03:16,240
over target in another region.

39
00:03:16,240 --> 00:03:18,110
You can have up to five of these.

40
00:03:18,190 --> 00:03:24,880
So that can be five different regions which you have a cluster in. That's a copy of your primary production

41
00:03:26,190 --> 00:03:32,130
cluster where you're actually performing your database writes to each of those clusters can then have up

42
00:03:32,130 --> 00:03:40,410
to 15 Aurora replicas coming off of there. We then have the global database global database gives you

43
00:03:40,410 --> 00:03:43,070
cross region clustering with Read scaling.

44
00:03:43,170 --> 00:03:46,010
So it's very similar to mysql read replicas.

45
00:03:46,020 --> 00:03:52,230
In that you're able to have a read only database in another region and it will create a cluster as well

46
00:03:52,230 --> 00:03:58,260
so you've got the same sort of storage redundancy in that of a region just as you do with mysql

47
00:03:58,260 --> 00:03:59,630
Read replicas.

48
00:03:59,640 --> 00:04:06,030
The key difference is faster replication and low latency reads so you can't have a lack of a few seconds

49
00:04:06,030 --> 00:04:07,390
with my sequel.

50
00:04:07,410 --> 00:04:13,740
There's also a performance impacts on the master because this is happening actually from mysql native

51
00:04:14,670 --> 00:04:22,650
bin log replication whereas with global database you don't have that impact on your master and you

52
00:04:22,650 --> 00:04:24,030
get lower latency read.

53
00:04:24,030 --> 00:04:30,900
So if your application needs low latency reads you might have to use global database again you can also

54
00:04:30,900 --> 00:04:35,950
promote these two primary and readable databases.

55
00:04:36,390 --> 00:04:41,610
The next one here is multi-master and this is just in here for information because you might ask me

56
00:04:41,610 --> 00:04:45,360
why I haven't covered it in the course and the reason is it's in preview.

57
00:04:45,960 --> 00:04:50,730
So this is a technology that allows you to scale out writes within a region.

58
00:04:50,730 --> 00:04:58,720
So now you can have multiple database instances writing to the same database storage cluster.

59
00:04:58,780 --> 00:05:05,080
Now this is currently in preview what tends to happen is AWS have a rule where they will not add

60
00:05:05,080 --> 00:05:12,480
anything to the exam until the product or feature has been generally available for six months.

61
00:05:12,490 --> 00:05:18,040
So from the point the product or service becomes generally available or it could be a change to an existing

62
00:05:18,040 --> 00:05:23,680
service or an additional feature it will be at least six months before you see it on the exam.

63
00:05:23,680 --> 00:05:27,640
So this one is currently in previews so it's gonna be quite a way off yet you won't see this on the

64
00:05:27,640 --> 00:05:32,100
exam now.

65
00:05:32,150 --> 00:05:34,190
The last one on the list here is scaling.

66
00:05:34,220 --> 00:05:35,640
So this is on demand

67
00:05:35,660 --> 00:05:38,060
Auto scaling for your Aurora.

68
00:05:38,210 --> 00:05:44,360
Now what this means is that rather than specifying a specific instance size you actually give it some

69
00:05:44,540 --> 00:05:51,310
minimum and maximum thresholds and auto scaling takes care of scaling your database for you.

70
00:05:51,380 --> 00:05:53,650
So that's some really cool feature.

71
00:05:53,660 --> 00:05:59,330
The only problem of it is there are a few limitations so it doesn't support read replicas and it doesn't

72
00:05:59,330 --> 00:06:05,810
support public IP is the only way you can access it is through your VPC or through direct connect you

73
00:06:05,810 --> 00:06:12,570
can't access it over a VPN or for instance from another account or another VPC so those are just a few

74
00:06:12,570 --> 00:06:18,230
key features about Amazon Aurora and what we're going to do over the next couple of labs is we're going

75
00:06:18,230 --> 00:06:25,190
to go into more depth and actually create some configurations in AWS around read replicas.

76
00:06:25,260 --> 00:06:27,990
MySQL read replicas and global databases.

