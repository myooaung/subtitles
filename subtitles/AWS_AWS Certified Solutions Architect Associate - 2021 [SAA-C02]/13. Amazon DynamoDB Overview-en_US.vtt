WEBVTT
1
00:00:03.240 --> 00:00:06.030
Hi guys we're moving on to dynamoDB now.

2
00:00:06.030 --> 00:00:11.520
Now there's a lot to DynamoDB but what I want to talk to you about today are really these features

3
00:00:11.520 --> 00:00:13.790
that are on the screen now in this table.

4
00:00:13.780 --> 00:00:18.510
There's a lot more to it but certainly for the scope of the architecture exam I believe these are the

5
00:00:18.720 --> 00:00:23.670
features that you really need to understand and if you're doing the dev ops exam you'll find it's very

6
00:00:23.670 --> 00:00:24.090
different.

7
00:00:24.090 --> 00:00:29.010
There's a lot more coverage of DynamoDB and you have to get in a lot more detail.

8
00:00:29.250 --> 00:00:34.530
But for an architecture exam it's more about understanding these features because this is what you need

9
00:00:34.530 --> 00:00:38.700
to know when you're designing the broader solution.

10
00:00:38.760 --> 00:00:40.690
So let's start going through this table.

11
00:00:40.980 --> 00:00:48.300
So to start with Dynamo IDB service and what that really means to you is that there's no instances to

12
00:00:48.300 --> 00:00:55.200
manage so unlike hard yes where you actually have to provision an instance and that instance is managed

13
00:00:55.200 --> 00:00:55.680
for you.

14
00:00:55.710 --> 00:00:59.730
But there are certain things that have to happen for instance you need to be able to do patching on

15
00:00:59.730 --> 00:01:00.370
that instance.

16
00:01:00.380 --> 00:01:07.170
So you have your maintenance windows and patching is done and it can be automated but you do sometimes

17
00:01:07.170 --> 00:01:11.910
need to reboot that instance and that means downtime for your database.

18
00:01:12.150 --> 00:01:17.580
And obviously you can use read replicas and you can use multi AZ to make sure that you still have a

19
00:01:17.580 --> 00:01:20.300
database running but still there is some downtime.

20
00:01:20.300 --> 00:01:22.760
You don't have to worry about any of that with DynamoDB.

21
00:01:22.890 --> 00:01:26.420
It's totally service fully managed fault tolerance.

22
00:01:26.550 --> 00:01:33.660
So it scales very easily without you having to worry about changing instance sizes and the availability

23
00:01:33.660 --> 00:01:34.380
is very high.

24
00:01:34.380 --> 00:01:40.350
So the availability is four nines SLA and we've global tables which is at the bottom here we're going

25
00:01:40.350 --> 00:01:44.780
to talk about that shortly you get five nines SLA say for an availability SLA.

26
00:01:44.800 --> 00:01:52.080
That's really really high now as we talked about back at the beginning of the section in the database

27
00:01:52.100 --> 00:01:56.030
overview dynamoDB is a NoSQL type of database.

28
00:01:56.030 --> 00:02:01.970
So it's ideal for you use cases where you need a flexible schema and your data is not well structured

29
00:02:01.970 --> 00:02:05.840
or unpredictable dynamoDB offers horizontal scaling.

30
00:02:05.840 --> 00:02:07.950
So you can scale seamlessly.

31
00:02:08.120 --> 00:02:09.860
And that really does mean push button.

32
00:02:09.860 --> 00:02:15.170
Now we say push button for instance with RDS as well meaning that you can you can just go in and sort

33
00:02:15.170 --> 00:02:18.680
of change your instance size and press a button and you've scaled your instance.

34
00:02:18.680 --> 00:02:23.170
But of course that incurs downtime with DynamoDB. That's not the case

35
00:02:23.180 --> 00:02:29.900
You actually put in your read and write units and that's how you scale dynamoDB. Specify the amount

36
00:02:29.900 --> 00:02:33.230
of units of read and write that you want to assign.

37
00:02:33.290 --> 00:02:35.390
You can also now use auto scaling.

38
00:02:35.390 --> 00:02:40.280
This has been around for several months so you can have that take place automatically without having

39
00:02:40.280 --> 00:02:44.470
to specify specific values yourself.

40
00:02:44.490 --> 00:02:52.370
We then have dynamoDB streams and if you remember back in the lambda section of the course we actually

41
00:02:52.370 --> 00:03:00.140
set up some DynamoDB streams so that we could trigger functions in lambda when events happen.

42
00:03:00.140 --> 00:03:07.220
For instance when you added a item to a table it triggered an event and lambda which then executed a

43
00:03:07.220 --> 00:03:14.240
function so it captures a time ordered sequence of item level modifications in a dynamodb table and

44
00:03:14.240 --> 00:03:16.400
stores that information for up to 24 hours.

45
00:03:16.400 --> 00:03:21.980
So as I mentioned and as we went through in the serverless section of the course with Lambda we've used

46
00:03:22.010 --> 00:03:27.380
this to create lambda triggers and you can also use of the Kinesis client library as well.

47
00:03:27.380 --> 00:03:28.280
So those were a couple of ways.

48
00:03:28.280 --> 00:03:32.400
It's often use this there's more options in that as well.

49
00:03:32.570 --> 00:03:34.600
We then have dynamoDB accelerator.

50
00:03:34.640 --> 00:03:40.820
So this is a in memory cache for DynamoDB and we're actually going to create a dynamoDB acelerator

51
00:03:40.820 --> 00:03:48.300
cluster in a couple of labs time so the key thing here is about microsecond latency if you see something

52
00:03:48.300 --> 00:03:55.500
on the exam about microsecond latency then that might push you towards accelerator for transaction options

53
00:03:55.890 --> 00:03:58.620
you get strongly consistent or eventually consistent read.

54
00:03:58.620 --> 00:04:03.450
So there's a couple of different options there and you have different cost associated with them.

55
00:04:03.450 --> 00:04:08.400
You probably don't need to know too much about this for this exam you just need to know that this exists.

56
00:04:08.400 --> 00:04:14.300
You don't need to know how to calculate the cost or how many units of each that you need to assign.

57
00:04:14.340 --> 00:04:16.130
That's more of a devops thing.

58
00:04:16.200 --> 00:04:20.730
You also need to know that it supports ACID transactions for backup.

59
00:04:20.730 --> 00:04:26.490
You can enable point-in-time recovery which takes you down to the last second for the last 35 days

60
00:04:26.500 --> 00:04:34.050
so that means you can restore your database back to a specific point in time within the last 45

61
00:04:34.050 --> 00:04:39.840
days and then you also have a separate phone which is on demand backup and restore what we then have

62
00:04:39.840 --> 00:04:41.310
it's global tables.

63
00:04:41.310 --> 00:04:47.520
So this is the one I mentioned before has a five nines SLA for availability and this is a fully managed

64
00:04:47.520 --> 00:04:50.180
multi region multi master solution.

65
00:04:50.250 --> 00:04:57.390
So this means you can have databases where you can have the same table in multiple regions around the

66
00:04:57.390 --> 00:05:03.330
world and you're able to read and write so those tables and all the data become synchronized across

67
00:05:03.330 --> 00:05:04.820
the multiple tables around the world.

68
00:05:04.820 --> 00:05:08.180
So really great feature we're going to set that up as well.

69
00:05:08.220 --> 00:05:09.780
Later in this section.

70
00:05:10.020 --> 00:05:13.530
So that's set for a quick overview in the next lab.

71
00:05:13.530 --> 00:05:19.230
We're just going to create a simple table and add some items to it and then after that we're going to

72
00:05:19.230 --> 00:05:25.560
go and enable DynamoDB accelerator and test that out and then the first lab will be global tables.

