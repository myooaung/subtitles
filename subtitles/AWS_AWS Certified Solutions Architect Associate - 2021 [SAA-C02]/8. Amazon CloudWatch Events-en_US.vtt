WEBVTT
1
00:00:02.250 --> 00:00:08.630
Cloud Watch Events is a service that allows you to track state changes in your AWB resources.

2
00:00:09.150 --> 00:00:15.630
So in this diagram here, we have a few AWB services and then you can see an example of the types of

3
00:00:15.630 --> 00:00:20.880
events that they might be generating and they'll be sending that information to cloud watch and then

4
00:00:20.880 --> 00:00:23.420
cloud, which can then trigger something in response.

5
00:00:23.820 --> 00:00:31.470
So for easy to it could be a easy to instant state change notification or something about Ebb's for

6
00:00:31.500 --> 00:00:32.390
auto scaling.

7
00:00:32.400 --> 00:00:38.550
It could be that an actual instance is launched or terminated, and for X it could be a task state change

8
00:00:38.550 --> 00:00:40.390
or container instant state change.

9
00:00:40.920 --> 00:00:47.900
So Cloud Watch Events delivers a near real time stream of system events that describe changes in AWB

10
00:00:48.030 --> 00:00:48.750
resources.

11
00:00:48.990 --> 00:00:55.470
You can use cloud watch events to schedule automated actions that self trigger at certain times using

12
00:00:55.470 --> 00:00:57.450
chron or rate expressions.

13
00:00:57.690 --> 00:00:59.340
So I'm sure you're familiar with Chrom.

14
00:00:59.340 --> 00:01:01.140
We've used it a couple of times in the course.

15
00:01:01.350 --> 00:01:05.970
That's for automatically running tasks at certain time intervals.

16
00:01:06.840 --> 00:01:11.790
You can match events and route them to one or more target functions or streams as well.

17
00:01:12.660 --> 00:01:19.020
Now, when you do that, there's a whole series of targets and these include the ones on the screen

18
00:01:19.020 --> 00:01:19.380
here.

19
00:01:19.890 --> 00:01:23.490
So you got two instances, LAMDA functions, data streams.

20
00:01:23.640 --> 00:01:28.960
You've got a code pipeline on the right here in code build projects, X tasks and so on.

21
00:01:29.250 --> 00:01:31.350
So this is what it looks like in the console.

22
00:01:31.350 --> 00:01:37.500
And in this example, we have an easy two instance and we have an easy to instant state change notification.

23
00:01:37.830 --> 00:01:41.520
And in this case, it's any state and you can see the event pattern underneath.

24
00:01:41.850 --> 00:01:47.670
And then on the right hand side, we could actually select a function and then it would trigger that

25
00:01:47.670 --> 00:01:51.710
function whenever any state change happens in that to resource.

26
00:01:52.020 --> 00:01:54.760
And this is something we'll do in a lab in the next lesson.

27
00:01:54.930 --> 00:01:58.950
So here's an example, and this is actually what we're going to do in the lab.

28
00:01:59.340 --> 00:02:06.000
So we have an easy to instance and it's going to send an event source notification when the instant

29
00:02:06.000 --> 00:02:07.560
state change changes.

30
00:02:07.680 --> 00:02:12.510
And in this case, it's going to be when we've actually terminated the instance cloud, which will then

31
00:02:12.510 --> 00:02:17.800
forward that data to an event target, which in this case is going to be an excuse.

32
00:02:17.820 --> 00:02:24.840
Q Now will manually pull the Q and find a message, but you could of course also have an easy two instances

33
00:02:24.840 --> 00:02:29.940
polling the Q and pulling those messages and doing something with them, maybe putting them in a Dinamo

34
00:02:29.940 --> 00:02:31.750
DB database or something like that.

35
00:02:32.670 --> 00:02:35.550
Similarly, you could use a lambda function for the same thing.

36
00:02:35.550 --> 00:02:41.340
So instead of the Q you might have a lambda function and that might write the data to as free or Dinamo

37
00:02:41.340 --> 00:02:41.780
DB.

38
00:02:41.970 --> 00:02:43.470
So that's it for the ferry.

39
00:02:43.620 --> 00:02:49.020
And what we're going to do in the next lesson is have a lab where we're going to create this architecture.

40
00:02:49.020 --> 00:02:54.900
We see on the screen here where we have an extra instance that's sending a state change notification

41
00:02:54.900 --> 00:02:59.760
to cloud watch and then that's triggering a notification to a target, which is an excuse us.

42
00:02:59.760 --> 00:03:00.750
Q in this case.

