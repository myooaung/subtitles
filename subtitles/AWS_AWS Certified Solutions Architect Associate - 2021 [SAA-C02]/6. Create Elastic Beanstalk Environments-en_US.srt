1
00:00:01,490 --> 00:00:05,620
Hi guys it's time to get started with AWS Elastic Beanstalk.

2
00:00:05,690 --> 00:00:13,310
So as I mentioned to you at the beginning of the section in the overview lesson Elastic beanstalk is

3
00:00:13,400 --> 00:00:16,480
a platform as a service.

4
00:00:16,520 --> 00:00:23,060
Now what that means is that developers can take their code and they can basically put it on top of the

5
00:00:23,060 --> 00:00:26,040
platform and the code just starts running.

6
00:00:26,060 --> 00:00:26,300
Okay.

7
00:00:26,330 --> 00:00:27,150
So they don't have to...

8
00:00:27,230 --> 00:00:30,800
They don't have to worry about any of the stuff that's underneath their code.

9
00:00:30,800 --> 00:00:32,510
They have to worry about their code.

10
00:00:32,510 --> 00:00:38,330
Put it on the platform. Obviously, choose the right settings for the platform which will go over now but

11
00:00:38,330 --> 00:00:41,930
the actual platform is provisioned for them, and it's run for them.

12
00:00:41,930 --> 00:00:46,070
So it's very very easy way to get your code running.

13
00:00:46,070 --> 00:00:53,250
Now what we're going to do now is we're going to create a couple of environments within Elastic Beanstalk.

14
00:00:53,360 --> 00:00:57,620
It's just gonna be very simple stuff I'm just gonna show you around so you're familiar with the console

15
00:00:57,620 --> 00:01:02,570
will create a couple of environments and then in the next lab where you're going to then take it to

16
00:01:02,570 --> 00:01:05,900
the next level we're going to actually package our own code.

17
00:01:05,990 --> 00:01:11,120
We're going to set up a HA wordpress with Elastic Beanstalk and RDS as the back end.

18
00:01:11,120 --> 00:01:12,230
So that should be a lot of fun.

19
00:01:12,230 --> 00:01:16,050
So what we're going to do now is we're going to just choose get started.

20
00:01:16,130 --> 00:01:17,920
We're going to put in a name.

21
00:01:17,930 --> 00:01:20,440
I'm just going to call this simple Node.js

22
00:01:20,930 --> 00:01:25,960
in there and then we can choose our platform.

23
00:01:25,960 --> 00:01:30,480
So you need to know for the exam what the support platform options are.

24
00:01:30,490 --> 00:01:34,630
So you have these generic container options up here Docker or multi container Docker.

25
00:01:34,690 --> 00:01:40,120
You then have the pre configured and these are the supported environments and then you have the pre-K

26
00:01:40,120 --> 00:01:43,090
and figure Docker glass which go in Python.

27
00:01:43,120 --> 00:01:47,610
So make sure you know what the supported options are for this option we're going to choose

28
00:01:47,620 --> 00:01:53,740
Node.js and we're going to just leave application sample application selected.

29
00:01:53,740 --> 00:01:57,520
Now normally this is where you would upload your code but we're not going to do that in this lab we're

30
00:01:57,520 --> 00:01:58,910
gonna do in the next lab.

31
00:01:58,990 --> 00:02:03,700
So we just choose sample application and choose create application.

32
00:02:03,700 --> 00:02:07,750
Now you'll notice there's an option to configure more options we're going to do that later on in this

33
00:02:07,750 --> 00:02:11,770
lab but defaults are okay for this option.

34
00:02:11,770 --> 00:02:17,830
So you can see now that we have the environ being created and is getting a hostname or excuse me it's

35
00:02:17,830 --> 00:02:21,620
getting the bucket name for where it's going to store some information in S3.

36
00:02:22,000 --> 00:02:24,690
And I want to show you a couple of things that are going on in the background.

37
00:02:24,700 --> 00:02:34,020
So let's go to CloudFormation and let's also open S3 and let's also open EC2. So in CloudFormation

38
00:02:34,020 --> 00:02:36,330
we can see we have a create in progress.

39
00:02:36,390 --> 00:02:43,200
So what this means is that Elastic Beanstalk is leveraging CloudFormation in order to build out the

40
00:02:43,200 --> 00:02:46,410
infrastructure for your application.

41
00:02:46,440 --> 00:02:50,850
So if you go into events you'll then see what's happening we've got an auto scaling group being created

42
00:02:51,300 --> 00:02:57,000
and see an elastic IP is being created and a launch configuration and so on... security groups all that

43
00:02:57,000 --> 00:02:57,600
kind of stuff.

44
00:02:57,600 --> 00:03:01,630
So that's all happening and you can see the resources that are being created here.

45
00:03:02,430 --> 00:03:07,410
If we go to S3. This is the bucket that's being created in fact this one already existed because I've

46
00:03:07,410 --> 00:03:12,510
created some environments previously but it does have a bucket which you can then store information

47
00:03:12,510 --> 00:03:16,660
in and there's just a couple other objects in there.

48
00:03:16,890 --> 00:03:22,800
If we then go to EC2 and let's see what's happening now the one at the top is an environment which

49
00:03:22,800 --> 00:03:28,710
I already have and this one here is our simple Node.js environment that's just been launched so we can

50
00:03:28,710 --> 00:03:36,690
see that's initializing we come down to auto scaling groups and we can see that it's being launched

51
00:03:36,690 --> 00:03:41,340
through an auto scaling group. That gives us that redundancy that we know if

52
00:03:41,340 --> 00:03:46,320
the instance goes down for some reason we can have a new instance launched.

53
00:03:46,650 --> 00:03:51,240
So all that's going on let's go back to our create environment and we can see this is still happening

54
00:03:51,240 --> 00:03:56,460
Here we go we've got some more options coming up now we can see the elastic IP that's

55
00:03:56,460 --> 00:04:03,840
being created we can see that the instance has been added to the environments and that just took a few

56
00:04:03,840 --> 00:04:09,970
minutes and we can now say that the environment has been successfully launched.

57
00:04:10,160 --> 00:04:17,030
So what we can do now is let's go back up to our application and we can see the application running

58
00:04:17,030 --> 00:04:23,990
here and we can choose this URL and what it does is it loads this page with some information we can

59
00:04:23,990 --> 00:04:30,200
see the health status we can see some information events here we can see the version that's being run

60
00:04:30,200 --> 00:04:36,320
you could actually upload some code to here if you'd like and we can also open this link here and a

61
00:04:36,320 --> 00:04:42,350
new tab and this just gives us a sort of splash screen for Node.js.

62
00:04:42,350 --> 00:04:48,020
So it's just telling us that congratulations your first beanstalk Node.js application is now running

63
00:04:48,440 --> 00:04:51,380
on your dedicated environment in the AWS cloud.

64
00:04:51,380 --> 00:04:52,030
So that's great.

65
00:04:52,040 --> 00:04:54,670
That's that's just running and that was very very simple.

66
00:04:54,680 --> 00:05:00,770
Now of course you can imagine if you've got your application packaged or you to done is instead of choosing

67
00:05:00,770 --> 00:05:04,020
sample application you to just uploaded your zip or WAR file.

68
00:05:04,100 --> 00:05:06,840
And right now you'd be seeing your application running.

69
00:05:06,950 --> 00:05:12,110
So you didn't have to worry about any of that underlying infrastructure provisioning it was all done

70
00:05:12,110 --> 00:05:12,920
for you.

71
00:05:12,950 --> 00:05:19,040
So that's really the key use case and benefit of elastic beanstalk.

72
00:05:19,120 --> 00:05:21,430
Let's go back to our environment here.

73
00:05:21,820 --> 00:05:29,590
Let's now go up to all applications and we can see the only application we have is a simple Node.js application.

74
00:05:29,590 --> 00:05:32,860
So what we can now do is create environment.

75
00:05:32,860 --> 00:05:38,810
Now if you do this what you're doing is you're creating additional nodes as part of this application.

76
00:05:38,980 --> 00:05:40,930
So let's have a look at what happens here.

77
00:05:40,930 --> 00:05:47,590
We can choose create environment and we get two options you get to choose one tier or another web server

78
00:05:47,680 --> 00:05:48,750
or worker.

79
00:05:48,760 --> 00:05:55,960
So the web server is your HTTP Web site running over port 80 and your worker is your specialized

80
00:05:55,960 --> 00:05:58,900
application running background processing.

81
00:05:58,900 --> 00:06:04,850
And the message buses between your web server environment and your worker environment is SQS.

82
00:06:05,710 --> 00:06:09,910
So what we want to do for now I'm just going to add a web server environment that's just look at how

83
00:06:09,910 --> 00:06:15,970
this is done and you can put in a domain name here and check the availability and again you have these

84
00:06:15,970 --> 00:06:20,530
options to choose your code or your sample application.

85
00:06:20,530 --> 00:06:24,960
You could then configure more options we'll do that in a second or you can just create environment.

86
00:06:24,970 --> 00:06:29,650
Let's just choose create environment what we're gonna do is just choose Node.js again, choose

87
00:06:29,650 --> 00:06:34,630
a different one as choose Java so we can see if that will run in parallel within the same application

88
00:06:35,070 --> 00:06:36,400
and we just choose create environment.

89
00:06:37,090 --> 00:06:38,020
So that's starting up.

90
00:06:38,020 --> 00:06:42,970
Let's head over it's CloudFormation and just gonna give this a refresh and you can see that we now

91
00:06:42,970 --> 00:06:48,820
have a new create in progress and if we head over to events we've got a lot of similar stuff happening

92
00:06:48,820 --> 00:06:50,330
as we did before.

93
00:06:50,770 --> 00:06:54,020
Let's just have a look at the outputs from our previous one there were no outputs actually.

94
00:06:54,100 --> 00:06:55,570
That's interesting.

95
00:06:55,570 --> 00:07:01,450
So we can go to resources and we could see these auto scaling group and the elastic IP being created

96
00:07:06,240 --> 00:07:08,190
and that's just going to take a few minutes to complete.

97
00:07:08,820 --> 00:07:13,650
So that just took a few minutes and automatically took me to this screen and that environment is now

98
00:07:13,650 --> 00:07:14,010
running.

99
00:07:14,010 --> 00:07:17,510
So let's go back up to our application here.

100
00:07:17,510 --> 00:07:23,100
So with all applications of a simple Node.js and you can see we now have these two environments running

101
00:07:23,100 --> 00:07:24,360
within a single application.

102
00:07:24,360 --> 00:07:28,740
So I wanted to show you that relationship where you have your applications and then within it you have

103
00:07:28,740 --> 00:07:30,370
these environments.

104
00:07:30,390 --> 00:07:35,040
So this is our new one if we click on this link it takes us back here and then we could open this in

105
00:07:35,040 --> 00:07:38,370
a new tab and we now have this.

106
00:07:38,370 --> 00:07:39,210
Congratulations.

107
00:07:39,220 --> 00:07:43,940
This message which looks very similar to before but this is running on Java rather than 

108
00:07:43,980 --> 00:07:44,700
Node.js

109
00:07:44,760 --> 00:07:46,170
So that's what that looks like.

110
00:07:46,170 --> 00:07:52,590
Let's go to EC2 and let's just give this a refresh and you can see now that we have two auto scaling

111
00:07:52,590 --> 00:07:57,930
groups one of the things to note here is because this is a good use case for auto scaling.

112
00:07:57,930 --> 00:08:01,570
We have a desired min and a max of one.

113
00:08:01,620 --> 00:08:04,940
And what that means is a good way of making sure that your instance runs.

114
00:08:04,930 --> 00:08:10,380
So you might do this you might have a single instance that runs an application on its own.

115
00:08:10,410 --> 00:08:14,250
It's not part of any HA architecture but you just need to make sure that it runs.

116
00:08:14,730 --> 00:08:20,580
So what you can do with this is just ensure that if that instance goes down you get no one back up again.

117
00:08:20,670 --> 00:08:25,140
So you know you don't actually pay for auto scaling you only pay for the resources you create so it's

118
00:08:25,140 --> 00:08:33,010
a great way of ensuring that your instance is always going to be available. If we go back to CloudFormation

119
00:08:33,010 --> 00:08:35,720
we can see both our stacks are complete.

120
00:08:36,130 --> 00:08:37,480
So that's great.

121
00:08:37,480 --> 00:08:42,110
Now let's go back up to the all applications level I want to show you how to create a new application.

122
00:08:42,220 --> 00:08:47,500
So in this case you hit the create new application button right up here on the right hand corner so

123
00:08:47,500 --> 00:08:56,580
let's call this one custom PHP and click on Create and we now get the option to create some environments.

124
00:08:56,590 --> 00:09:00,340
So let's create an environment and then choose web server.

125
00:09:00,650 --> 00:09:08,630
Click on select and I'm going to choose pre configured I'm going to go down to PHP and I'm going

126
00:09:08,630 --> 00:09:12,340
to create a sample application but I'm just going to configure some some of these options now.

127
00:09:12,350 --> 00:09:15,010
So that's the way I'm going to customize this application.

128
00:09:16,730 --> 00:09:21,680
So as you can see you can go through each of these areas here and choose modify.

129
00:09:21,710 --> 00:09:27,110
So for instance we can go into instances modify and we could change it from a t2 micro to t2 small

130
00:09:27,110 --> 00:09:31,470
for instance and we can select the security groups we want it to be part of.

131
00:09:31,470 --> 00:09:39,040
So I'm going to put it in my web access security group we can choose to change from a single instance

132
00:09:39,040 --> 00:09:40,530
to a load balanced environment

133
00:09:46,940 --> 00:09:52,150
and we can select which ones of these availability zones to use.

134
00:09:52,700 --> 00:09:56,930
In this case it's just set to any well we can choose any one.

135
00:09:56,990 --> 00:10:03,000
Let's just leave it on any for now and then you can set up your metrics and statistics and so on.

136
00:10:03,010 --> 00:10:08,920
We're not gonna create a load balancer right now but you can do that and you can see options for

137
00:10:08,920 --> 00:10:14,860
how updates and deployments are configured the security keys.

138
00:10:14,880 --> 00:10:22,130
So if you want to be able to SSH into your instance you're going to need to choose your EC2 key pair.

139
00:10:22,740 --> 00:10:28,020
So you do actually have access to the underlying resources where that Elastic Beanstalk creates.

140
00:10:28,020 --> 00:10:30,660
It's not like ECS for instance where with Fargo

141
00:10:30,690 --> 00:10:34,620
you don't actually see the underlying resources, you can't connect to them.

142
00:10:34,830 --> 00:10:36,040
In this case you can.

143
00:10:36,110 --> 00:10:42,660
You can SSH into your instance but it won't have the key pair. If you want to use a key pair to SSH

144
00:10:42,780 --> 00:10:48,840
into your instance you're going to need to select your key pair here and you could update the instance

145
00:10:48,840 --> 00:10:51,390
profile if you wanted to as well.

146
00:10:51,630 --> 00:11:00,150
So let's just save that option and we could then choose to put it in a VPC so this is an important one.

147
00:11:00,260 --> 00:11:07,550
You could choose a custom VPC let's put it into my custom VPC where my public 2A subnet

148
00:11:12,100 --> 00:11:14,540
and you could add a database here as well.

149
00:11:14,620 --> 00:11:19,810
So we haven't got any code that's gonna use a database in this instance but you could put your database

150
00:11:19,810 --> 00:11:22,070
here and you can choose one of these options.

151
00:11:22,480 --> 00:11:27,010
So let's just cancel out that one and you can use tags and notifications.

152
00:11:27,010 --> 00:11:28,620
Let's just choose create environment

153
00:11:33,660 --> 00:11:36,210
and again it's going to go through exactly the same process.

154
00:11:36,220 --> 00:11:41,080
Using CloudFormation to build out our environment and it looks like that environment is pretty much

155
00:11:41,080 --> 00:11:42,070
there.

156
00:11:42,070 --> 00:11:47,100
Let's go to instances and we can see that we now have our custom PHP environment running here as well

157
00:11:47,110 --> 00:11:49,540
so we've got all these three environments.

158
00:11:49,640 --> 00:11:57,670
Just wanted to show you in back in S3 if you go to this elastic beanstalk bucket which is being

159
00:11:57,670 --> 00:12:05,590
created for us and then you go to resources and choose environments you can then see these three different

160
00:12:06,400 --> 00:12:10,660
folders and each of these corresponds to one of the environments that we've just created and if you

161
00:12:10,660 --> 00:12:17,500
go inside you can see got runtime and then you've got some sub folders and if you go in you'll then

162
00:12:17,500 --> 00:12:24,830
find these files so this is the way the elastic beanstalk can store your code.

163
00:12:24,900 --> 00:12:30,330
We have a looking CloudFormation we can see you've got all these three stacks complete and this is almost

164
00:12:30,330 --> 00:12:30,550
there.

165
00:12:30,560 --> 00:12:36,360
What I'm going to do now is I'm just gonna go up to my environments and I'm going to delete my simple

166
00:12:36,360 --> 00:12:43,530
Node.js application and you just need to copy the name of the application and paste it in and confirm

167
00:12:45,170 --> 00:12:51,070
and I'm gonna do the same with this one as well and if we head back over to CloudFormation now we should

168
00:12:51,070 --> 00:12:53,680
see all of these delays in progress.

169
00:12:53,710 --> 00:12:59,140
So as always a CloudFormation just monitor go back and check that it's definitely deleted all the resources

170
00:12:59,140 --> 00:13:04,150
the elastic IP is you know it's shut down your instances properly that kind of thing you should be at

171
00:13:04,140 --> 00:13:05,520
a tell if that's happened.

172
00:13:05,530 --> 00:13:08,140
I like to go in to make sure that everything looks good here.

173
00:13:08,380 --> 00:13:13,780
And if you have any doubts go over and look into EC2 for instance and make sure that your resources

174
00:13:13,780 --> 00:13:17,710
have been deleted properly so that you don't pay any extra costs.

