WEBVTT
1
00:00:05.210 --> 00:00:11.420
When we're using elastic load balancers, often the applications on our two instances are stateless.

2
00:00:11.690 --> 00:00:14.180
And that means that they don't store information.

3
00:00:14.360 --> 00:00:20.570
Within the C2 instances, cells may be in a cache, but not persistently, and we don't really want

4
00:00:20.570 --> 00:00:27.080
that typically with elastic load balanced applications because obviously instances get terminated,

5
00:00:27.290 --> 00:00:28.640
new ones get launched.

6
00:00:29.210 --> 00:00:35.390
So if we do need to store some data, we often have to store it outside of the C2 instance.

7
00:00:35.780 --> 00:00:41.660
We might also want to make sure that if a user gets redirected to another instance, then they don't

8
00:00:41.660 --> 00:00:42.620
have the real fence.

9
00:00:42.620 --> 00:00:45.800
Okay, so we can use a couple of techniques.

10
00:00:46.250 --> 00:00:50.030
The first one is storing our session state data externally.

11
00:00:50.570 --> 00:00:52.160
So let's say we got a load balancer.

12
00:00:52.430 --> 00:00:55.820
We got some instances and a user connects to an instance.

13
00:00:56.060 --> 00:01:02.300
They might then authenticate and get some authentication credentials that they can use to log in to

14
00:01:02.300 --> 00:01:08.450
the application or maybe to another application, which they're connecting to from the web app running

15
00:01:08.660 --> 00:01:10.670
on the easy to instance that you can see here.

16
00:01:11.480 --> 00:01:19.610
So that data can then be stored in some kind of external service, Dynamo DB is one of those options.

17
00:01:19.940 --> 00:01:25.820
So in this case, the authentication details will be stored in a Dynamo DB table.

18
00:01:26.540 --> 00:01:34.040
So now, if the instance fails, the user gets directed to another instance and then can retrieve those

19
00:01:34.040 --> 00:01:36.120
authentication credentials and carry on.

20
00:01:36.140 --> 00:01:37.550
They don't need to log in again.

21
00:01:37.880 --> 00:01:40.850
That's something that's very good from a usability perspective.

22
00:01:41.360 --> 00:01:47.750
We call this session state data, and it's often used for authentication credentials and various other

23
00:01:47.750 --> 00:01:50.870
information that's relevant to a specific session.

24
00:01:51.080 --> 00:01:54.620
So that data doesn't get lost or needs to be regenerated.

25
00:01:55.550 --> 00:01:59.930
Elastic Cache is another option for storing session state data.

26
00:02:00.260 --> 00:02:07.240
So typically, solutions are Dynamo DB table the cache and in some cases, Amazon S3.

27
00:02:07.610 --> 00:02:10.990
Another technique we have is something called sticky sessions.

28
00:02:11.510 --> 00:02:18.140
In this case, we have a load balancer and our instances and a user connects in to an easy to instance.

29
00:02:18.740 --> 00:02:25.220
Now a cookie gets generates it, and the client then gets bound to that specific issue, to instance

30
00:02:25.220 --> 00:02:26.840
for the lifetime of the cookie.

31
00:02:27.410 --> 00:02:32.600
So if they if their connection gets dropped for some reason and they reconnect, the cookie is going

32
00:02:32.600 --> 00:02:37.610
to tell the load balancer which EC2 instance to send that session to.

33
00:02:38.210 --> 00:02:43.520
So in this case, things like session state data like authentication details might be stored locally

34
00:02:43.760 --> 00:02:45.200
on the actual instance.

35
00:02:45.650 --> 00:02:51.530
Now, if that instance fails, then of course the user gets directed somewhere else, and that means

36
00:02:51.530 --> 00:02:53.090
that information is going to be lost.

37
00:02:53.300 --> 00:02:57.770
So it's not a perfect solution, but it can be helpful in many circumstances.

38
00:02:58.040 --> 00:03:03.770
You can use sticky sessions with an external store for session state data as well.

39
00:03:03.950 --> 00:03:06.800
Often they'll be used separately, but you can use them together.

40
00:03:06.860 --> 00:03:08.510
Now, why might you use them together?

41
00:03:08.600 --> 00:03:10.400
Some data might get stored locally.

42
00:03:10.670 --> 00:03:13.580
Other data might fit better into an external store.

43
00:03:13.970 --> 00:03:17.510
And of course, with the external store, that's going to be a little bit more licensee.

44
00:03:17.720 --> 00:03:22.310
So you have to consider whether that's OK for your particular scenario or not.

45
00:03:22.550 --> 00:03:23.570
So that's it for now.

46
00:03:23.570 --> 00:03:27.650
And in the next lesson, we're going to enable sticky sessions and see how it works.

