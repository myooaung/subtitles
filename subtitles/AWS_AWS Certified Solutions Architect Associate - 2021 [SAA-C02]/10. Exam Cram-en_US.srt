1
00:00:02,030 --> 00:00:07,790
Hello and welcome to the exam cram for Section nine, so we're starting off with the Plastic Container

2
00:00:07,790 --> 00:00:09,020
Service X.

3
00:00:10,660 --> 00:00:17,170
X is a highly scalable, high performance container management system that supports DOCA containers,

4
00:00:17,530 --> 00:00:25,180
and it's a managed infrastructure so you can eliminate the need to build your own system just like any

5
00:00:25,180 --> 00:00:26,740
other cloud service.

6
00:00:27,370 --> 00:00:33,490
It can be used to schedule the placement of containers across clusters based on resource needs and availability

7
00:00:33,490 --> 00:00:34,090
requirements.

8
00:00:34,630 --> 00:00:37,600
Now, there's no additional charge for using the extra service.

9
00:00:37,900 --> 00:00:41,190
You just pay for the resources you create.

10
00:00:41,650 --> 00:00:49,420
So that's the easy two instances and ebb's volumes associated with them that actually run your container

11
00:00:49,420 --> 00:00:50,130
infrastructure.

12
00:00:53,370 --> 00:00:59,280
It's possible to associate a service on X to an Albi for a plastic load balancing.

13
00:00:59,970 --> 00:01:04,660
Now there are two different types of service available for containers in the US.

14
00:01:04,890 --> 00:01:08,270
There's the Plastic Container Service and the elastic community service.

15
00:01:08,670 --> 00:01:13,310
So this table just gives you a bit of detail about the differences between the two.

16
00:01:13,590 --> 00:01:18,930
They're both managed platforms with high availability and scalability.

17
00:01:19,320 --> 00:01:25,890
Remember that with the Cuban 80s with X, that's all about having a hosted Cuban Ãªtes platform for you.

18
00:01:26,430 --> 00:01:34,440
With X, we got two different launch types and the launch types are the Amazon EC2 or the far launch

19
00:01:34,440 --> 00:01:34,840
type.

20
00:01:35,340 --> 00:01:40,410
Got to remember, the difference between these for the exam so far is essentially a kind of serverless

21
00:01:40,410 --> 00:01:40,830
service.

22
00:01:40,830 --> 00:01:45,630
So you don't have to prevision or launch any two instances.

23
00:01:46,670 --> 00:01:51,530
With the easy to launch type, you do so you have to launch two instances.

24
00:01:51,530 --> 00:01:57,140
If you go into the active management console, you can actually see the two instances that are running

25
00:01:57,140 --> 00:01:58,100
your containers.

26
00:01:59,950 --> 00:02:06,730
You're therefore responsible for managing those two instances and also you've got to configure any cluster

27
00:02:06,730 --> 00:02:10,970
optimization, whereas with FOGGER you don't have to worry about that.

28
00:02:11,200 --> 00:02:12,600
It's a serverless service.

29
00:02:12,820 --> 00:02:18,670
So you basically just launch your containers and everything underneath is managed for you.

30
00:02:19,120 --> 00:02:25,660
Containers are created from a read only template that's called an image and that has the instructions

31
00:02:25,660 --> 00:02:27,670
for creating the docker container.

32
00:02:28,480 --> 00:02:34,450
Images are built from a Docker file and only docker containers are currently supported on X.

33
00:02:35,810 --> 00:02:43,310
An image contains the instructions for creating that docker container, they're stored in a registry

34
00:02:43,310 --> 00:02:46,300
such as Docker Hub or the Elastic Container Registry.

35
00:02:47,490 --> 00:02:52,450
NCR is a managed registry that's secure, scalable and reliable.

36
00:02:52,950 --> 00:02:57,330
A task definition is required to run a DOCA contain index.

37
00:02:57,810 --> 00:03:03,450
The task definition is a text file in JSON format that describes one or more consignors.

38
00:03:03,450 --> 00:03:09,230
Up to 10 task definitions used images to actually launch the container.

39
00:03:09,720 --> 00:03:15,360
So you specify the number of tasks you want to run, and that equates to the number of containers that

40
00:03:15,360 --> 00:03:16,350
are actually going to run.

41
00:03:17,820 --> 00:03:19,030
We then have clusters.

42
00:03:19,080 --> 00:03:24,650
This is a logical grouping of container instances that you place tasks on.

43
00:03:25,110 --> 00:03:30,750
So the container instances are the two instances that you run your containers on top of.

44
00:03:30,960 --> 00:03:35,340
And a cluster is a group of those two instances and you place a task on it.

45
00:03:35,350 --> 00:03:37,940
And remember, the task is the actual container itself.

46
00:03:38,830 --> 00:03:42,070
A default clusters created and then you can create your own clusters.

47
00:03:44,610 --> 00:03:50,490
You can specify the definition of a specified number or desired count of tasks to run in the cluster

48
00:03:51,180 --> 00:03:55,620
clusters can contain tasks using both foggy and easy to launch type.

49
00:03:57,210 --> 00:04:03,420
The clusters with the easy to launch type, the clusters can contain different container instance types.

50
00:04:05,050 --> 00:04:09,160
But each container instance can only be part of one cluster at a time.

51
00:04:10,380 --> 00:04:16,440
Now, to provide auto scaling, you create what's called a service, so the services provide you auto

52
00:04:16,440 --> 00:04:25,800
scaling functions for X, specifically, a service scales automatically the number of tasks that are

53
00:04:25,800 --> 00:04:28,850
being executed on your container infrastructure.

54
00:04:29,520 --> 00:04:31,570
A cluster is region specific.

55
00:04:32,250 --> 00:04:37,920
You can create Iame policies for your clusters to allow or restrict users to access specific clusters.

56
00:04:38,670 --> 00:04:43,770
Each consignor instance needs to have a container agent running on it.

57
00:04:44,550 --> 00:04:51,020
So the X container agent allows to contain instances to actually then connect to the X cluster.

58
00:04:51,690 --> 00:04:54,000
It runs on every infrastructure resource.

59
00:04:55,460 --> 00:05:03,200
It's included by default in the X optimized Amoy, and you can install it on overeasy, two instances

60
00:05:03,200 --> 00:05:05,430
that support the X specification.

61
00:05:05,690 --> 00:05:10,100
You can install the X container agent on both Linux and Windows.

62
00:05:11,550 --> 00:05:17,670
For non-native US Linux instances to be used on AWEX, you have to manually install the X container

63
00:05:17,670 --> 00:05:18,050
agent.

64
00:05:18,360 --> 00:05:25,650
So again, for auto scanning you have a service and that can be configured to use auto scanning to adjust

65
00:05:25,650 --> 00:05:29,720
the number of tasks or the number of containers up or down automatically.

66
00:05:30,210 --> 00:05:35,910
And that actually leverages application, also skiting to provide the functionality it supports to different

67
00:05:35,910 --> 00:05:41,000
types of scanning policies, the target tracking screening policy and the steps coding policy.

68
00:05:41,400 --> 00:05:43,440
We then have Kluster also scaling.

69
00:05:43,470 --> 00:05:44,550
Now, this is very new.

70
00:05:44,880 --> 00:05:48,300
So this was actually released in December 2019.

71
00:05:48,300 --> 00:05:51,360
So I don't think it's going to appear on the zero one.

72
00:05:51,660 --> 00:05:57,360
But you might be watching this and actually preparing for the SAAC zero two, especially if it's after

73
00:05:57,360 --> 00:05:58,560
March twenty twenty.

74
00:05:59,010 --> 00:06:02,110
So I'm pretty sure that it will start appearing in that soon.

75
00:06:02,640 --> 00:06:09,180
It uses a new resource type called a capacity provider, and that's associated with an auto scaling

76
00:06:09,180 --> 00:06:09,460
group.

77
00:06:10,050 --> 00:06:15,600
So what this means is you're able to scale not just the tasks, the number of containers you're running

78
00:06:15,600 --> 00:06:21,360
automatically, but you're now able to automatically scale the number of cluster instances, the hosts

79
00:06:21,360 --> 00:06:25,290
on which your clusters or your X tasks actually run.

80
00:06:25,890 --> 00:06:32,190
It leverages to new features, ones called manage scaling and once called managed instance termination

81
00:06:32,190 --> 00:06:32,760
protection.

