1
00:00:05,180 --> 00:00:06,230
Welcome to this lesson.

2
00:00:06,470 --> 00:00:11,810
We've already looked at quite a few I am policies and in the hands on that's coming up, we're going

3
00:00:11,810 --> 00:00:13,370
to use quite a few more as well.

4
00:00:13,370 --> 00:00:18,440
So this is a lesson to help you understand the structure of I am policies.

5
00:00:19,040 --> 00:00:20,900
So this is the basic structure.

6
00:00:21,470 --> 00:00:27,290
Remember, it's a JSON document, JavaScript object notation, and it consists of one or more statements

7
00:00:28,040 --> 00:00:28,610
at the top.

8
00:00:28,610 --> 00:00:32,450
There we have the effects this can be allow or deny.

9
00:00:33,020 --> 00:00:39,380
We then got the action element and that will be the specific API action for which you're granting or

10
00:00:39,380 --> 00:00:40,520
denying permissions.

11
00:00:41,180 --> 00:00:43,370
We then have the resource element.

12
00:00:43,610 --> 00:00:48,050
So this is the specific resource that is affected by the action.

13
00:00:48,650 --> 00:00:53,480
So we'll put in the Amazon resource name the Arrow and into the resource element.

14
00:00:54,080 --> 00:00:58,250
And then lastly, here we have an optional element, which is the condition element.

15
00:00:58,640 --> 00:01:04,340
And this can be used to control when the policy is put into effect, and we'll see some examples showing

16
00:01:04,340 --> 00:01:05,450
this in a moment.

17
00:01:06,510 --> 00:01:09,720
So let's look at a few examples, this is a very simple one.

18
00:01:09,990 --> 00:01:17,820
In this case, the administrator access policy is using wild cards to allow all actions on all resources.

19
00:01:18,270 --> 00:01:20,130
So we simply have the effect allow.

20
00:01:20,430 --> 00:01:22,290
We have the action, which is a wild card.

21
00:01:22,590 --> 00:01:24,810
And then the resource, which is a wild card.

22
00:01:24,840 --> 00:01:28,290
So this will allow any action on any resource.

23
00:01:29,190 --> 00:01:31,890
Now let's look at one that's a little bit more complex.

24
00:01:32,700 --> 00:01:38,940
In this case, the specific API action is defined, so we're not using a wild card under action.

25
00:01:39,330 --> 00:01:42,420
We have easy to on terminate instances.

26
00:01:42,720 --> 00:01:46,860
So that's the specific API action that we want to control.

27
00:01:48,060 --> 00:01:51,210
Now, in this case, the resource is stored, so is a wild card.

28
00:01:52,050 --> 00:01:59,190
But we then have a conditional elements and the conditional element uses the not my IP address and it's

29
00:01:59,190 --> 00:02:02,240
looking for the source IP.

30
00:02:02,250 --> 00:02:08,670
So it's looking into that request context for the IP address that you're making the request from.

31
00:02:09,300 --> 00:02:15,990
And the effects in this case is to deny the action if the IP address is not in the specified range.

32
00:02:16,650 --> 00:02:25,320
So this is one where you want to make sure that nobody is terminating 82 instances unless they're actually

33
00:02:25,500 --> 00:02:28,410
and in some office somewhere on a particular network.

34
00:02:28,800 --> 00:02:34,410
The next example is a resource based policy and the way that we can tell that this is a resource based

35
00:02:34,410 --> 00:02:38,550
policy is because we have this principle element here.

36
00:02:39,240 --> 00:02:42,900
So in this case, the principle is a star, so it's a wild card.

37
00:02:43,560 --> 00:02:48,150
But we could also put a specific principles in in here as well, like a user.

38
00:02:48,450 --> 00:02:54,930
In this case, the policy grants read and write access to Amazon Elastic File System file systems to

39
00:02:54,930 --> 00:02:57,660
all principles, so it's allowing all users access.

40
00:02:58,080 --> 00:03:03,840
And note also that the condition element is looking for secure transport to be true.

41
00:03:04,050 --> 00:03:09,270
That means it's checking in the request context to make sure that the connection that you're coming

42
00:03:09,270 --> 00:03:13,080
from is encrypted with SSL TLS certificates.

43
00:03:13,620 --> 00:03:20,550
In this last policy here, we're trying to control access to S3 buckets, and what we want to do is

44
00:03:20,550 --> 00:03:26,190
have a particular folder for each user and allow them access to that particular folder.

45
00:03:26,850 --> 00:03:34,650
So what we're going to do here is use an S3 prefix variable and that will replace this particular variable

46
00:03:34,650 --> 00:03:36,720
here with the user's friendly name.

47
00:03:36,900 --> 00:03:38,550
So my account that would be nil.

48
00:03:38,560 --> 00:03:40,320
So just replace this with nil.

49
00:03:40,920 --> 00:03:48,630
So it would then give access to the particular folder within the bucket that has this name.

50
00:03:48,630 --> 00:03:53,040
So give me permissions to my own folder within that bucket.

51
00:03:53,520 --> 00:03:58,980
That's it for now, and you will get plenty of opportunity to work with some policies in the hands on

52
00:03:58,980 --> 00:04:00,000
labs that are coming up.

