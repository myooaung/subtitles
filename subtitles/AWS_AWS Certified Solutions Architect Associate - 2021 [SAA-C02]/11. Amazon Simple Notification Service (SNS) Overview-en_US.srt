1
00:00:01,710 --> 00:00:10,050
The Amazon Simple Notification Service S.A. is a pub sub, so publisher subscriber messaging service

2
00:00:10,380 --> 00:00:13,740
that allows you to decouple applications.

3
00:00:13,950 --> 00:00:19,320
So the way it works is you have a publisher and the publisher sends a message to a topic.

4
00:00:19,830 --> 00:00:26,190
And the topic will then deliver the message over various different transport protocols, such as SMS,

5
00:00:26,460 --> 00:00:37,110
email, https to a subscriber and a subscriber can be things like excuse lamda a web application, perhaps

6
00:00:37,110 --> 00:00:40,470
running on Ekta and also email and SMS.

7
00:00:40,470 --> 00:00:41,660
So text messages.

8
00:00:41,970 --> 00:00:47,280
So it's another way that you can decouple your applications by putting something in the middle so that

9
00:00:47,280 --> 00:00:51,500
your publishers here are not directly integrating with your subscribers.

10
00:00:51,750 --> 00:00:57,540
So S.A.S. is a highly available, durable, secure and fully managed pub sub messaging service.

11
00:00:57,960 --> 00:01:02,690
S.A.S. provides topics for high throughput, push based many to many messaging.

12
00:01:03,000 --> 00:01:06,800
So this means you can have many publishers and many subscribers.

13
00:01:07,440 --> 00:01:12,370
The publisher systems can fan out the messages to a large number of endpoints.

14
00:01:12,690 --> 00:01:18,750
So, for instance, you can have a single publisher system that might send messages to a large number

15
00:01:18,750 --> 00:01:22,830
of subscriber endpoints, and those endpoints can be excused.

16
00:01:22,920 --> 00:01:30,540
Lambda functions, https web hooks, mobile push and SMS text messaging as well as email.

17
00:01:30,810 --> 00:01:36,810
You group your recipients by what's called a topic and a topic is an access point, which allows the

18
00:01:36,810 --> 00:01:45,180
recipients to dynamically subscribe for identical copies of the same notification so multiple subscribers

19
00:01:45,180 --> 00:01:48,500
can receive an identical copy of the same message.

20
00:01:48,870 --> 00:01:54,990
One topic can also support deliveries to multiple endpoint types, and all messages are stored redundantly

21
00:01:54,990 --> 00:01:56,460
across multiple bases.

22
00:01:56,820 --> 00:02:03,240
With S.A.S., you get instantaneous push based delivery and it uses simple APIs for easy integration

23
00:02:03,240 --> 00:02:03,990
of applications.

24
00:02:03,990 --> 00:02:10,710
Like most other services, you get flexible message delivery over multiple transport protocols.

25
00:02:11,710 --> 00:02:17,920
And as I mentioned before, you can send messages to many receivers, so the event producer sends one

26
00:02:17,920 --> 00:02:24,970
message to one S.A.S. topic and then many event receivers subscribers listen for those notifications

27
00:02:25,330 --> 00:02:27,960
and each subscriber will get all of the messages.

28
00:02:28,120 --> 00:02:33,150
So you send a message once all the subscribers will receive the same message.

29
00:02:33,160 --> 00:02:37,140
But subscribers can then filter messages in terms of limits.

30
00:02:37,180 --> 00:02:42,900
You get up to 10 million subscriptions per topic and you have a limit of 100000 topics.

31
00:02:43,120 --> 00:02:47,090
Another use case is what's called S.A.S. and skews fan out.

32
00:02:47,410 --> 00:02:52,440
So in this case, you can subscribe one or more excuse to an SS topic.

33
00:02:52,720 --> 00:02:58,150
So in this case, messages are being published from the topic and they get sent to the queue.

34
00:02:58,150 --> 00:03:00,850
So the HQ receives the same message.

35
00:03:01,060 --> 00:03:04,830
Escalus manages the subscription and any necessary permissions.

36
00:03:05,320 --> 00:03:10,710
And when you publish a message to a topic, S.A.S. will send the message to every subscribe queue.

37
00:03:10,930 --> 00:03:12,520
So that's it for the ferry.

38
00:03:12,530 --> 00:03:17,740
And what we're going to do in the next lesson is we're going to set up this configuration where we're

39
00:03:17,740 --> 00:03:26,200
able to send messages to an SMS topic, have them go into a queue and then have LAMDA polling the queue

40
00:03:26,320 --> 00:03:28,420
and writing an event account which logs.

