WEBVTT
1
00:00:02.080 --> 00:00:09.580
And this lesson, we're going to cover the visibility time out and then long polling, so the visibility

2
00:00:09.580 --> 00:00:18.610
timeout is the amount of time in seconds that a message is invisible to consumers while it's being processed.

3
00:00:19.150 --> 00:00:20.400
So it works like this.

4
00:00:20.770 --> 00:00:21.820
You remember the delay.

5
00:00:21.940 --> 00:00:27.910
You so a producer can put a message into the queue and it can be delayed for a period of time.

6
00:00:28.270 --> 00:00:30.430
And that means it's not visible in any way.

7
00:00:30.670 --> 00:00:32.290
So nobody is processing it.

8
00:00:32.290 --> 00:00:35.050
No consumer is processing that message.

9
00:00:36.120 --> 00:00:42.090
Once that expires, the message becomes visible and a consumer can then process that message.

10
00:00:42.930 --> 00:00:48.680
Now the consumer needs some time to process the message before it deletes it from a cue.

11
00:00:49.050 --> 00:00:55.780
So the logic is you need to make sure your consumer successfully processes the message and then deletes

12
00:00:55.800 --> 00:00:56.670
it from the cue.

13
00:00:57.770 --> 00:01:03.690
Because in some instances, for some reason, the consumer will fail to process the message.

14
00:01:04.490 --> 00:01:09.450
So you still want the message to be in the queue so that another consumer can process it.

15
00:01:09.980 --> 00:01:13.770
So after the visibility time out, the message becomes available again.

16
00:01:13.940 --> 00:01:21.260
So just to recap that a consumer takes a message from a queue and starts processing it for a period

17
00:01:21.260 --> 00:01:21.870
of time.

18
00:01:21.890 --> 00:01:24.520
That message is not visible, but it's still in the queue.

19
00:01:25.040 --> 00:01:31.370
And this is a safety measure so that if a failure occurs in processing it, let's say this instance

20
00:01:31.640 --> 00:01:37.820
becomes unavailable for some reason, then the message becomes available again and another consumer

21
00:01:37.820 --> 00:01:38.640
can process it.

22
00:01:39.020 --> 00:01:46.310
So the visibility time out is the amount of time a message is invisible after a reader or consumer picks

23
00:01:46.310 --> 00:01:51.830
it up and provided the job is processed before the visibility time expires, the message will then be

24
00:01:51.830 --> 00:01:53.120
deleted from the queue.

25
00:01:53.300 --> 00:02:00.050
If the job's not processed within that visibility time out, then the message becomes visible and another

26
00:02:00.050 --> 00:02:01.730
reader can then process it instead.

27
00:02:01.940 --> 00:02:04.990
Now this can result in the same message being delivered twice.

28
00:02:05.270 --> 00:02:10.700
So you've got to be careful of how you set up your applications to make sure they're able to process

29
00:02:10.700 --> 00:02:16.700
the message within the visibility time out and then delete the message before any other consumers go

30
00:02:16.700 --> 00:02:17.530
and pick it up again.

31
00:02:17.660 --> 00:02:24.050
The default is 30 seconds and you can increase it if your task takes longer than 30 seconds, up to

32
00:02:24.050 --> 00:02:25.640
a maximum of 12 hours.

33
00:02:25.820 --> 00:02:27.820
And you can configure this at the queue level.

34
00:02:28.010 --> 00:02:33.800
So in the console here, let's just go to configure queue and we can see the default visibility timeout

35
00:02:33.800 --> 00:02:34.310
is here.

36
00:02:34.760 --> 00:02:37.990
So you can change that anything up to 12 hours.

37
00:02:38.540 --> 00:02:42.200
The next concept I want to talk about is long polling and short polling.

38
00:02:43.560 --> 00:02:48.360
This is all about how your consumer checks her messages and how those messages are then returned to

39
00:02:48.360 --> 00:02:49.040
the consumer.

40
00:02:49.710 --> 00:02:57.650
So with short polling, the consumer checks the queue and eight of us will query a subset of service.

41
00:02:57.960 --> 00:03:03.330
So to make things fast, they don't query every server that is associated with your queue.

42
00:03:03.750 --> 00:03:10.890
And that means that in some cases, especially with queues, with fewer messages, you might get a response.

43
00:03:11.250 --> 00:03:12.050
That's a failure.

44
00:03:12.060 --> 00:03:13.770
So it doesn't find any messages.

45
00:03:14.280 --> 00:03:19.350
If you then rerun the Receive Message API, it should then find a message.

46
00:03:19.650 --> 00:03:23.850
Now, long polling is different with long polling the.

47
00:03:25.240 --> 00:03:31.630
Connection is made to rescue us and then the consumer will actually wait for the wait time, seconds,

48
00:03:32.380 --> 00:03:36.010
and then eventually will receive a positive response.

49
00:03:36.880 --> 00:03:43.780
Now, the key thing about this is it means fewer API calls and you pay for API calls to ask us so it

50
00:03:43.780 --> 00:03:44.910
can reduce cost.

51
00:03:45.460 --> 00:03:51.370
So it means that your consumer will then just wait for messages to appear in the queue and then process

52
00:03:51.370 --> 00:03:55.300
them rather than disconnecting and then reconnecting multiple times.

53
00:03:55.570 --> 00:03:58.180
Now, I want to show you how this works at the command line.

54
00:03:58.600 --> 00:04:04.720
So on the left there, what I'm going to do is I'm just going to run it obscures list cuz.

55
00:04:05.880 --> 00:04:12.150
So I can get this cute name and a copy, that's my clipboard, and then I'm going to run it obscures

56
00:04:12.600 --> 00:04:22.920
send message that I'm going to put q your URL paste in the URL I copied and then message body and let's

57
00:04:22.920 --> 00:04:25.080
put this as short polling.

58
00:04:25.650 --> 00:04:29.690
So the next thing we need to do is run the Receive Message API.

59
00:04:30.150 --> 00:04:32.550
So I'm going to look up the command line options.

60
00:04:32.880 --> 00:04:38.520
So I'm going to type Adewusi excuse, receive message help.

61
00:04:39.420 --> 00:04:45.420
And let's see what the options are we need, so we're going to need the wait time seconds and we're

62
00:04:45.420 --> 00:04:46.800
going to need the kuduro.

63
00:04:47.370 --> 00:04:48.540
So let's go back up.

64
00:04:49.020 --> 00:04:50.070
I'm going to type in.

65
00:04:50.580 --> 00:04:57.120
Q Bashira and then we've got wait time, seconds, which will be zero because it's short polling.

66
00:04:57.810 --> 00:04:59.660
So I want to do short polling first.

67
00:05:00.300 --> 00:05:06.210
Now, by the way, before I got started with this lab, I actually cleared out the two messages we sent

68
00:05:06.210 --> 00:05:07.100
in the last lab.

69
00:05:07.620 --> 00:05:14.070
So if you haven't done that, go back into your queue, just choose view, delete messages, start polling

70
00:05:14.250 --> 00:05:17.610
and then delete the messages so you should have an empty queue.

71
00:05:17.730 --> 00:05:18.990
So we have an empty queue.

72
00:05:19.380 --> 00:05:22.770
I'm going to paste in that URL and we've got to wait time.

73
00:05:22.770 --> 00:05:23.550
Azera Seconds.

74
00:05:23.550 --> 00:05:24.690
So this is short polling.

75
00:05:24.690 --> 00:05:27.540
So let's hit enter and you can see it finished.

76
00:05:28.110 --> 00:05:30.810
So it checked and then immediately disconnected.

77
00:05:31.110 --> 00:05:37.110
So what I'm going to do now is I'm going to set a wait time, seconds of ten and let's see what happens.

78
00:05:37.350 --> 00:05:42.980
So now it's actually waiting and we can send this message and then it returns the message.

79
00:05:43.170 --> 00:05:46.500
So that's the difference between long polling and short polling.

80
00:05:47.040 --> 00:05:49.710
And in this case, I'm setting it at the API level.

81
00:05:50.130 --> 00:05:57.150
But again, you can go into your queue, choose, configure, queue and specify the received message,

82
00:05:57.150 --> 00:05:57.810
wait time.

83
00:05:57.990 --> 00:06:02.490
So excuse long polling is a way to retrieve messages from excuse.

84
00:06:03.030 --> 00:06:05.520
And we've just seen there that was short polling.

85
00:06:05.700 --> 00:06:08.730
A response is immediate.

86
00:06:09.000 --> 00:06:15.960
Even if the queue is empty or even if excuse doesn't return a queue because it only queries a subset

87
00:06:15.960 --> 00:06:17.280
of the servers.

88
00:06:18.270 --> 00:06:24.990
Long polling can lower costs by waiting to retrieve a message, and that means that all the servers

89
00:06:24.990 --> 00:06:31.590
actually get queried and any messages that are placed in the queue while the consumer is connected and

90
00:06:31.590 --> 00:06:33.630
waiting will then be processed.

91
00:06:34.230 --> 00:06:40.590
And that saves you money by lowering the amount of API calls you make so you can enable this at the

92
00:06:40.590 --> 00:06:47.850
queue level or at the API level using wait times, seconds and long polling is in effect when the receive

93
00:06:47.850 --> 00:06:52.560
message wait time is a value greater than zero and up to 20 seconds.

94
00:06:52.740 --> 00:06:55.710
So that's it for the visibility time out and long polling.

95
00:06:55.710 --> 00:07:00.300
And in the next lesson, we're going to have a quick look at some important API calls.

