WEBVTT
1
00:00:05.330 --> 00:00:06.560
Hi, guys, welcome back.

2
00:00:06.800 --> 00:00:12.650
There is a bit of complexity in how I am evaluates whether you're allowed or denied from performing

3
00:00:12.650 --> 00:00:14.690
any particular action or operation.

4
00:00:14.960 --> 00:00:19.070
So in this lesson, we're going to delve into a bit more detail about how that works.

5
00:00:19.280 --> 00:00:26.780
Now this is straight from IWC, and this is the logical flow of how we go through the process of determining

6
00:00:26.780 --> 00:00:29.150
whether you allow who denied doing something.

7
00:00:29.480 --> 00:00:31.640
Now I just wanted to show you this quickly here.

8
00:00:31.640 --> 00:00:33.800
We're going to go through this in detail shortly.

9
00:00:34.160 --> 00:00:36.370
But I just wanted to show you what we're leading up to.

10
00:00:36.380 --> 00:00:38.540
This is going to be the last slide of this lesson.

11
00:00:39.050 --> 00:00:43.040
Before we actually go through this, there's going to be a bit more background knowledge that you need.

12
00:00:43.910 --> 00:00:49.550
So let's firstly start with what are the steps for authorizing requests to IWC.

13
00:00:49.550 --> 00:00:52.190
And we've touched on this and a little bit of detail already.

14
00:00:52.490 --> 00:00:57.050
So we have the various methods on the left of how we might authenticates IWC.

15
00:00:57.350 --> 00:01:00.620
And in this example, we're trying to connect to an S3 bucket.

16
00:01:01.430 --> 00:01:08.570
So we first need to authenticate so IWC will authenticate the principle that makes the request.

17
00:01:08.870 --> 00:01:10.250
In this case, it's a user.

18
00:01:10.490 --> 00:01:14.240
The request context must then be formulated and processed.

19
00:01:14.840 --> 00:01:18.350
Now this includes several attributes, so we've got the actions.

20
00:01:18.350 --> 00:01:23.270
These are the actions or operations the principal wants to perform the resources.

21
00:01:23.270 --> 00:01:27.140
In this case, we're trying to perform those actions against the necessary bucket.

22
00:01:27.650 --> 00:01:32.630
The principle in this case, it's a user could be a role federated user or application.

23
00:01:33.290 --> 00:01:39.200
Some environment data, so could be things like the IP address or the SSL status of the connection.

24
00:01:40.130 --> 00:01:46.250
And we then have resource data which is related to the resource, the S3 bucket that's being requested,

25
00:01:46.490 --> 00:01:54.020
then identity based policies and any resource based policies must also be evaluated and then the action.

26
00:01:54.020 --> 00:01:58.220
In this case, the gets objects action will be allowed or denied.

27
00:01:58.220 --> 00:01:59.300
In this case, it's allowed.

28
00:02:00.050 --> 00:02:02.570
So that's the steps for authorizing the request.

29
00:02:02.930 --> 00:02:05.000
Now let's look at the several types of policy.

30
00:02:05.000 --> 00:02:07.640
We're familiar already with quite a few of these.

31
00:02:07.940 --> 00:02:14.120
So identity based policies that we attach to users groups or roles, resource based policies that we

32
00:02:14.120 --> 00:02:22.100
can attach to things like Dynamo DB tables, S3 buckets, VPC endpoints and then we have I am permissions

33
00:02:22.100 --> 00:02:23.900
boundary, which we've also been over.

34
00:02:24.890 --> 00:02:30.650
Then there's eight of US organizations service control policies, and we haven't covered these yet.

35
00:02:30.980 --> 00:02:33.620
We'll cover these in detail later in the course.

36
00:02:33.860 --> 00:02:40.250
But for now, just understand that eight of us organizations is a way that you can centrally manage

37
00:02:40.250 --> 00:02:47.990
multiple IWC accounts, and you can apply policies to those accounts which determine the maximum available

38
00:02:47.990 --> 00:02:51.080
permissions and those are called service control policies.

39
00:02:52.370 --> 00:02:57.770
Lastly, we have session policies which are used with the Assume Role API actions.

40
00:02:58.640 --> 00:03:01.430
So what is the process for evaluating policies?

41
00:03:01.850 --> 00:03:08.120
Well, let's look at when we have a combination of identity based policies and resource based policies,

42
00:03:08.510 --> 00:03:12.080
and in this case there are four allowed permissions.

43
00:03:12.530 --> 00:03:18.380
The effective permissions will be all available permissions here because it will be a combination of

44
00:03:18.380 --> 00:03:24.490
the identity based policy allows, and the resource base policy allows as no denies being shown here.

45
00:03:25.010 --> 00:03:28.130
So the principle will get access to all full permissions.

46
00:03:28.700 --> 00:03:32.570
We then got an identity based policy with a permissions boundary.

47
00:03:33.170 --> 00:03:35.630
And again, this fall allowed permissions.

48
00:03:36.080 --> 00:03:40.730
In this case, the effects of permissions will be where does that overlap between the two?

49
00:03:41.330 --> 00:03:47.840
So you need to have both the identity based policy giving you and allow giving you the privileges for

50
00:03:48.020 --> 00:03:50.000
that particular action or operation.

51
00:03:50.510 --> 00:03:54.350
But you also need to be allowed through the permissions boundary as well.

52
00:03:54.710 --> 00:03:59.550
Lastly, we have the identity based policy with an organization's SVP.

53
00:03:59.870 --> 00:04:04.730
And this is very similar to a permissions boundary, but it's applied at the account level.

54
00:04:05.180 --> 00:04:11.510
And in this case, again, the effective permissions are going to be where the overlap is between the

55
00:04:11.510 --> 00:04:15.440
identity based policies and the organization's ACP.

56
00:04:15.890 --> 00:04:22.580
So in other words, with both the permissions boundary and the organization's ACP, you need to be allowed

57
00:04:22.880 --> 00:04:29.210
in each of those policies, as well as have the permissions through an identity based policy as well.

58
00:04:29.630 --> 00:04:34.220
The last slide before we have a look at that logical flow is the determination rules.

59
00:04:34.520 --> 00:04:41.630
So by default, all requests are implicitly denied, except for for the root user who always has unrestricted

60
00:04:41.630 --> 00:04:42.260
access.

61
00:04:42.950 --> 00:04:45.520
But for everyone else, there's an implicit denial.

62
00:04:45.590 --> 00:04:51.620
That means if you don't have an allow permission allowing you to do something, then you're just denied

63
00:04:51.620 --> 00:04:53.750
by default and explicit.

64
00:04:53.750 --> 00:05:00.950
Allow an identity based or resource based policies will override that default if there's a permissions,

65
00:05:00.950 --> 00:05:04.700
boundary organizations, Skype or session policy that.

66
00:05:04.840 --> 00:05:10.150
Can override the alarm with an implicit denial and think back to the last slide and you'll understand

67
00:05:10.360 --> 00:05:11.290
how that works.

68
00:05:11.530 --> 00:05:16.930
And then lastly, and explicit deny in any policy will always override any allows.

69
00:05:17.440 --> 00:05:21.760
So let's have a look at the logical flow starting up in the top left hand side here.

70
00:05:22.360 --> 00:05:23.970
The decision starts with a denial.

71
00:05:23.980 --> 00:05:25.840
As always, that's the implicit denial.

72
00:05:26.110 --> 00:05:28.450
So now we have to evaluate all the policies.

73
00:05:28.930 --> 00:05:32.260
If there's an explicit deny, then straightaway it's all over.

74
00:05:32.500 --> 00:05:34.630
The deny decision is final.

75
00:05:34.930 --> 00:05:41.690
If there are no denies, then it checks whatever the principal's account is a member of an organization,

76
00:05:41.690 --> 00:05:45.580
an IWC organization with a service control policy.

77
00:05:46.120 --> 00:05:47.630
If not, then just carry on.

78
00:05:47.650 --> 00:05:54.490
If yes, it needs to check for it, allow, then it checks whether the requested resource has a resource

79
00:05:54.490 --> 00:05:55.330
based policy.

80
00:05:55.630 --> 00:05:57.160
If it doesn't, then it moves on.

81
00:05:57.400 --> 00:05:59.680
If it does, again, it just checks won't allow.

82
00:06:00.220 --> 00:06:03.730
And if there is one, then the final decision is allowing this case.

83
00:06:04.000 --> 00:06:08.050
Next up, the permissions boundaries have to be checked is there and allow.

84
00:06:08.680 --> 00:06:11.410
If not, then the final decision is deny.

85
00:06:11.560 --> 00:06:17.980
And if there isn't a permissions boundary, then just move on and check for a session policy again.

86
00:06:17.980 --> 00:06:20.470
If doesn't allow, then it moves on.

87
00:06:20.650 --> 00:06:26.350
If there's a session policy present without an alcohol, then the denial takes effect.

88
00:06:26.800 --> 00:06:31.510
The final step of the decision here is then to check for identity based policies.

89
00:06:31.810 --> 00:06:38.080
Now remember if you had a resource based policy and it had an alcohol, then the allow already took

90
00:06:38.080 --> 00:06:38.560
effect.

91
00:06:39.010 --> 00:06:45.880
So with everything else with the permissions boundary, with the session policy, it needs to check

92
00:06:45.880 --> 00:06:47.920
whether there's an identity based policy.

93
00:06:48.370 --> 00:06:53.890
So if that isn't one, then does it deny it because there is no privilege for any actions?

94
00:06:54.520 --> 00:06:58.720
If there is a policy, then it will check it and again, deny if there's no allow.

95
00:06:58.990 --> 00:07:05.350
That's the implicit denial taking place and then allow if there is an actual explicit statement that

96
00:07:05.350 --> 00:07:07.960
allows you that particular action or operation.

97
00:07:08.320 --> 00:07:10.060
So that's the evaluation logic.

98
00:07:10.060 --> 00:07:11.380
Quite a few steps there.

99
00:07:11.590 --> 00:07:16.870
But once you understand the background of each of these types of policies, all makes a lot more sense.

100
00:07:17.320 --> 00:07:19.840
So I hope that was useful and I'll see you in the next lesson.

