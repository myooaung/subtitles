WEBVTT
1
00:00:00.004 --> 00:00:02.003
- CQRS is a software pattern

2
00:00:02.003 --> 00:00:03.003
that makes a lot of sense

3
00:00:03.003 --> 00:00:05.008
for a microservices architecture

4
00:00:05.008 --> 00:00:08.002
to improve performance.

5
00:00:08.002 --> 00:00:10.004
Now, I've only seen this in theory.

6
00:00:10.004 --> 00:00:14.003
It does have value in spending some time discussing it.

7
00:00:14.003 --> 00:00:16.005
In a microservices architecture,

8
00:00:16.005 --> 00:00:18.005
we usually build data services

9
00:00:18.005 --> 00:00:21.000
that have specific functions.

10
00:00:21.000 --> 00:00:24.002
They usually operate on a single data domain.

11
00:00:24.002 --> 00:00:28.000
As such, they can be optimized for efficiencies.

12
00:00:28.000 --> 00:00:30.003
We are usually dealing with CRUD operations

13
00:00:30.003 --> 00:00:32.006
at first in the data services.

14
00:00:32.006 --> 00:00:35.002
Over time, this can become problematic

15
00:00:35.002 --> 00:00:38.000
in specific use cases.

16
00:00:38.000 --> 00:00:42.005
Rights can be expensive in a traditional RDBMS especially.

17
00:00:42.005 --> 00:00:44.002
This is important to note,

18
00:00:44.002 --> 00:00:47.006
because we can tune a system only to a point,

19
00:00:47.006 --> 00:00:51.006
when the update domain is different than the read domain.

20
00:00:51.006 --> 00:00:54.003
Reads are not immediate or cheap,

21
00:00:54.003 --> 00:00:58.001
especially when we need to massage the data.

22
00:00:58.001 --> 00:00:59.007
If in fact, we find a domain,

23
00:00:59.007 --> 00:01:03.003
whose data services need data being read

24
00:01:03.003 --> 00:01:06.000
diverging from the data being written,

25
00:01:06.000 --> 00:01:09.007
CQRS may be of help.

26
00:01:09.007 --> 00:01:12.007
CQRS is a model that describes written data

27
00:01:12.007 --> 00:01:16.005
in a different model than read data.

28
00:01:16.005 --> 00:01:17.009
It is an acronym

29
00:01:17.009 --> 00:01:22.003
for Command Query Responsibility Segregation.

30
00:01:22.003 --> 00:01:23.004
It can be achieved

31
00:01:23.004 --> 00:01:26.009
through an event-driven asynchronous architecture.

32
00:01:26.009 --> 00:01:29.009
Hence, why we are discussing it here.

33
00:01:29.009 --> 00:01:33.008
It tends to be focused on microservices architectures,

34
00:01:33.008 --> 00:01:35.008
but they are not required.

35
00:01:35.008 --> 00:01:40.000
Likewise, they are not restricted to microservices.

36
00:01:40.000 --> 00:01:41.003
It is important to note

37
00:01:41.003 --> 00:01:44.000
that it isn't a replacement for CRUD,

38
00:01:44.000 --> 00:01:45.008
it is a different use.

39
00:01:45.008 --> 00:01:49.007
If CRUD works for your domain, leave it alone.

40
00:01:49.007 --> 00:01:50.009
There are times, however,

41
00:01:50.009 --> 00:01:53.003
where you find yourself in this use case

42
00:01:53.003 --> 00:01:57.003
and the pain of CQRS may be worth a try.

43
00:01:57.003 --> 00:02:01.004
And in my sole attempt, I can tell you that it was painful.

44
00:02:01.004 --> 00:02:03.006
And this was a demo application,

45
00:02:03.006 --> 00:02:07.002
not a real production system.

46
00:02:07.002 --> 00:02:08.006
Now, I want to warn you,

47
00:02:08.006 --> 00:02:10.009
this is a very simplistic view,

48
00:02:10.009 --> 00:02:13.006
just to show what happens at a high level.

49
00:02:13.006 --> 00:02:16.001
This isn't a hard and fast prescription

50
00:02:16.001 --> 00:02:18.002
for the pattern.

51
00:02:18.002 --> 00:02:22.001
So we start with an update service and its database.

52
00:02:22.001 --> 00:02:24.007
Now, this service uses a distinct domain model

53
00:02:24.007 --> 00:02:28.004
that fits in well with its database.

54
00:02:28.004 --> 00:02:32.004
Likewise, we have a read service and its database.

55
00:02:32.004 --> 00:02:35.001
Again, the distinct domain model fits in well

56
00:02:35.001 --> 00:02:40.001
in this case and is different from the update service.

57
00:02:40.001 --> 00:02:42.003
We also have a message broker.

58
00:02:42.003 --> 00:02:45.001
Now, I'm leaving out the producer and the consumer,

59
00:02:45.001 --> 00:02:47.005
but they are either in the database itself

60
00:02:47.005 --> 00:02:51.008
or via some triggered or event driven process.

61
00:02:51.008 --> 00:02:54.006
Now the flow generally goes like this:

62
00:02:54.006 --> 00:02:55.006
data is written from

63
00:02:55.006 --> 00:02:59.008
the update service to the update database and acknowledged,

64
00:02:59.008 --> 00:03:03.001
the update service then goes about its business.

65
00:03:03.001 --> 00:03:05.004
At the same time, a message is generated

66
00:03:05.004 --> 00:03:07.001
for the event and passed,

67
00:03:07.001 --> 00:03:09.000
either to a message broker,

68
00:03:09.000 --> 00:03:13.001
or directly to the read database asynchronously.

69
00:03:13.001 --> 00:03:15.008
The message is read by a consumer,

70
00:03:15.008 --> 00:03:17.009
if the message broker is used

71
00:03:17.009 --> 00:03:22.005
and written to the read database in its transformed state.

72
00:03:22.005 --> 00:03:25.000
This consumer may need to read other data

73
00:03:25.000 --> 00:03:27.008
to achieve this new model.

74
00:03:27.008 --> 00:03:30.008
Now the read service will hit the read database

75
00:03:30.008 --> 00:03:33.007
and get a response in the new model.

76
00:03:33.007 --> 00:03:36.004
Note, however, that this isn't immediate.

77
00:03:36.004 --> 00:03:38.005
And if you decide to go this route,

78
00:03:38.005 --> 00:03:41.003
this information matters.

79
00:03:41.003 --> 00:03:42.005
And I will warn you once again,

80
00:03:42.005 --> 00:03:44.005
that this isn't for faint of heart

81
00:03:44.005 --> 00:03:47.003
and it shouldn't be forced into existence.

82
00:03:47.003 --> 00:03:51.003
I am presenting it here as an overly simplified view

83
00:03:51.003 --> 00:03:54.006
because it is an example of asynchronous messaging

84
00:03:54.006 --> 00:03:57.005
in a microservices-based system.

85
00:03:57.005 --> 00:03:59.004
It can be powerful,

86
00:03:59.004 --> 00:04:02.005
but it can be expensive and error-prone.

87
00:04:02.005 --> 00:04:04.007
It is, however, a great example

88
00:04:04.007 --> 00:04:06.008
of how asynchronous messaging

89
00:04:06.008 --> 00:04:10.000
can help solve real-world problems.

