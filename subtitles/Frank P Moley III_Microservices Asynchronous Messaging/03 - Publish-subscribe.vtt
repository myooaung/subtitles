WEBVTT
1
00:00:00.004 --> 00:00:01.007
- [Instructor] The publish-subscribe

2
00:00:01.007 --> 00:00:05.000
asynchronous messaging style is a little bit unique

3
00:00:05.000 --> 00:00:08.004
and its use cases are very much in the same boat.

4
00:00:08.004 --> 00:00:12.003
But when you need them, the power is evident.

5
00:00:12.003 --> 00:00:14.003
The use cases are very specific

6
00:00:14.003 --> 00:00:16.003
and much of them deal with real issues

7
00:00:16.003 --> 00:00:19.000
in distributed computing.

8
00:00:19.000 --> 00:00:22.005
The multiple responders use case is one such,

9
00:00:22.005 --> 00:00:25.003
especially in distributed computing.

10
00:00:25.003 --> 00:00:28.009
Oftentimes, we see cases when the flow of traffic

11
00:00:28.009 --> 00:00:31.008
between sites is limited on purpose

12
00:00:31.008 --> 00:00:35.003
to enforce good constraints across the data centers.

13
00:00:35.003 --> 00:00:39.001
We often allow data to stay in sync between sites,

14
00:00:39.001 --> 00:00:42.004
but what happens when you need more than data in sync?

15
00:00:42.004 --> 00:00:44.009
For instance, you may allow your databases

16
00:00:44.009 --> 00:00:47.001
to stay in sync across data centers,

17
00:00:47.001 --> 00:00:51.000
but other triggered actions are data center independent.

18
00:00:51.000 --> 00:00:54.007
In a pub/sub model, you can federate the message broker

19
00:00:54.007 --> 00:00:58.003
across multiple data centers and allow triggered actions

20
00:00:58.003 --> 00:01:01.009
within each data center to occur in isolation.

21
00:01:01.009 --> 00:01:05.002
Those triggered actions are often admin tasks

22
00:01:05.002 --> 00:01:08.007
like triggers to clean up or update search indices.

23
00:01:08.007 --> 00:01:12.004
In this model, the central hub can publish a message

24
00:01:12.004 --> 00:01:14.003
and a worker in each data center

25
00:01:14.003 --> 00:01:16.008
can subscribe to the message.

26
00:01:16.008 --> 00:01:18.005
The beauty of this model is that

27
00:01:18.005 --> 00:01:20.006
when a new data center comes online,

28
00:01:20.006 --> 00:01:23.000
there is no code changes needed as you would see

29
00:01:23.000 --> 00:01:26.009
in a direct push through asynchronous process

30
00:01:26.009 --> 00:01:30.002
as your new data center just creates a new consumer

31
00:01:30.002 --> 00:01:33.002
and subscribes to the channel to get the messages

32
00:01:33.002 --> 00:01:36.001
that every other data center gets.

33
00:01:36.001 --> 00:01:38.005
Another use case, and one that I used a lot

34
00:01:38.005 --> 00:01:42.001
with a GDPR implementation, is when multiple tasks

35
00:01:42.001 --> 00:01:45.004
must fire across disparate systems.

36
00:01:45.004 --> 00:01:47.005
In my GDPR case,

37
00:01:47.005 --> 00:01:51.000
each unique business unit operated independently,

38
00:01:51.000 --> 00:01:55.004
but the department I worked for was the hub for everyone.

39
00:01:55.004 --> 00:01:58.003
We took on GDPR for the company.

40
00:01:58.003 --> 00:02:00.009
I designed the heart of the rights of GDPR

41
00:02:00.009 --> 00:02:03.000
around the pub/sub model.

42
00:02:03.000 --> 00:02:05.008
When a consumer requested a copy of his or her data

43
00:02:05.008 --> 00:02:07.002
or asked to be forgotten,

44
00:02:07.002 --> 00:02:10.009
we would publish a message to the message broker.

45
00:02:10.009 --> 00:02:13.008
Each department would then listen for those messages

46
00:02:13.008 --> 00:02:16.007
and perform their own series of actions

47
00:02:16.007 --> 00:02:19.002
to handle the consumer's request.

48
00:02:19.002 --> 00:02:20.003
When they were done,

49
00:02:20.003 --> 00:02:23.000
they would put a point-to-point message on a queue

50
00:02:23.000 --> 00:02:26.003
and we would then wait until everyone else responded

51
00:02:26.003 --> 00:02:29.000
before moving on to the next step.

52
00:02:29.000 --> 00:02:32.005
This pub/sub model allowed the company to be compliant

53
00:02:32.005 --> 00:02:35.009
early on with a smaller subset of departments

54
00:02:35.009 --> 00:02:38.002
and then roll new departments online

55
00:02:38.002 --> 00:02:42.001
as soon as we were ready, again with no code changes

56
00:02:42.001 --> 00:02:44.002
in the pub/sub side.

57
00:02:44.002 --> 00:02:45.006
We did nothing different.

58
00:02:45.006 --> 00:02:48.006
We continued putting the messages on the queue.

59
00:02:48.006 --> 00:02:51.003
There were considerations we had to account for,

60
00:02:51.003 --> 00:02:53.009
and we will talk about them in a bit.

61
00:02:53.009 --> 00:02:57.008
Pub/sub models also allow for consumer choice.

62
00:02:57.008 --> 00:02:59.007
The consumers can decide if they want

63
00:02:59.007 --> 00:03:02.000
to listen to messages or not.

64
00:03:02.000 --> 00:03:03.005
You don't have to call their APIs

65
00:03:03.005 --> 00:03:06.001
and have them act a message and ignore it.

66
00:03:06.001 --> 00:03:09.000
They simply don't have to subscribe.

67
00:03:09.000 --> 00:03:12.001
Some tools make this even better with fanouts,

68
00:03:12.001 --> 00:03:14.002
where they can listen for messages

69
00:03:14.002 --> 00:03:16.007
that match a specific criteria,

70
00:03:16.007 --> 00:03:19.003
but won't receive anything that doesn't.

71
00:03:19.003 --> 00:03:22.005
The fanout is a little bit outside this course,

72
00:03:22.005 --> 00:03:25.003
but it works in a similar model to pub/sub.

73
00:03:25.003 --> 00:03:28.003
Again, the key here is you can create messages

74
00:03:28.003 --> 00:03:31.006
that everyone, or no one, will listen to

75
00:03:31.006 --> 00:03:34.000
without any code changes.

76
00:03:34.000 --> 00:03:37.008
If there are more consumers, they just subscribe.

77
00:03:37.008 --> 00:03:40.008
I want to talk about durable subscriptions here a bit.

78
00:03:40.008 --> 00:03:43.005
There are cases when your consumer must get the message

79
00:03:43.005 --> 00:03:46.006
in a pub/sub model even if they're offline

80
00:03:46.006 --> 00:03:49.006
at the moment the message is produced.

81
00:03:49.006 --> 00:03:53.008
This is a key benefit of using durable subscribers.

82
00:03:53.008 --> 00:03:56.009
There is a guarantee that they will get the message.

83
00:03:56.009 --> 00:03:59.007
The message broker will learn of the durable subscriber

84
00:03:59.007 --> 00:04:01.002
and keep the message around

85
00:04:01.002 --> 00:04:04.000
until that subscriber acknowledges it

86
00:04:04.000 --> 00:04:07.000
without impacting other subscribers.

87
00:04:07.000 --> 00:04:09.008
The message becomes targeted at that point

88
00:04:09.008 --> 00:04:12.007
without impacting duplicated processes

89
00:04:12.007 --> 00:04:15.006
of other subscribers that are online.

90
00:04:15.006 --> 00:04:17.006
This orchestration becomes powerful

91
00:04:17.006 --> 00:04:20.001
in mission-critical operations.

92
00:04:20.001 --> 00:04:22.003
Back to my GDPR use case.

93
00:04:22.003 --> 00:04:26.001
All of our consumers were durable subscribers on purpose.

94
00:04:26.001 --> 00:04:29.001
We had a legal obligation to process the data,

95
00:04:29.001 --> 00:04:31.001
but didn't want to block or retry

96
00:04:31.001 --> 00:04:34.002
if the remote system was down for some reason.

97
00:04:34.002 --> 00:04:36.008
By employing this model, we didn't block.

98
00:04:36.008 --> 00:04:38.004
We just allowed the message broker

99
00:04:38.004 --> 00:04:40.008
to handle the sending of these messages

100
00:04:40.008 --> 00:04:43.009
when the consumer came back online.

101
00:04:43.009 --> 00:04:47.003
There were other asynchronous processes that fit this bill.

102
00:04:47.003 --> 00:04:50.001
And in my opinion, more often than not,

103
00:04:50.001 --> 00:04:53.002
a subscriber should always be a durable one.

104
00:04:53.002 --> 00:04:56.005
The beauty of this is that a subscriber can unregister,

105
00:04:56.005 --> 00:04:58.000
which is important.

106
00:04:58.000 --> 00:05:00.008
If the consumer no longer needs to consume the messages,

107
00:05:00.008 --> 00:05:03.006
they must unregister to ensure the message broker

108
00:05:03.006 --> 00:05:07.003
doesn't hang onto the messages that are no longer needed,

109
00:05:07.003 --> 00:05:09.006
as opposed to just falling off.

110
00:05:09.006 --> 00:05:11.004
Again, all of this is done

111
00:05:11.004 --> 00:05:13.008
in the producer agnostic fashion.

112
00:05:13.008 --> 00:05:16.003
The producer doesn't know anything about the consumers,

113
00:05:16.003 --> 00:05:18.000
if done correctly.

114
00:05:18.000 --> 00:05:20.004
They don't know if the consumer's durable or not,

115
00:05:20.004 --> 00:05:22.009
they're completely decoupled.

116
00:05:22.009 --> 00:05:25.008
This, of course, isn't the same for synchronous messaging

117
00:05:25.008 --> 00:05:29.008
in a microservices architecture, or any, for that matter.

118
00:05:29.008 --> 00:05:31.008
When your producer doesn't care,

119
00:05:31.008 --> 00:05:33.008
the consumers can be durable or not

120
00:05:33.008 --> 00:05:37.001
without impacting the source system.

121
00:05:37.001 --> 00:05:38.006
So now let's take a quick look

122
00:05:38.006 --> 00:05:41.000
at the publish-subscribe model.

123
00:05:41.000 --> 00:05:44.001
Once again, we start our system with a message broker,

124
00:05:44.001 --> 00:05:46.009
as it is the heart of our system as a whole.

125
00:05:46.009 --> 00:05:48.009
We then create a producer.

126
00:05:48.009 --> 00:05:50.009
It will be called synchronously in this example

127
00:05:50.009 --> 00:05:53.001
by some external system.

128
00:05:53.001 --> 00:05:56.009
The RESTful message will come in and start the process.

129
00:05:56.009 --> 00:05:59.003
Now, the producer knows about the message broker

130
00:05:59.003 --> 00:06:02.001
and how to communicate with it.

131
00:06:02.001 --> 00:06:04.002
We then will have some downstream actions

132
00:06:04.002 --> 00:06:05.007
that need to take place.

133
00:06:05.007 --> 00:06:09.004
In this case, we have two different consumer processes

134
00:06:09.004 --> 00:06:13.000
called subscribers that need to act on the message.

135
00:06:13.000 --> 00:06:15.006
They can be durable or not.

136
00:06:15.006 --> 00:06:17.007
Each of these subscribers also knows

137
00:06:17.007 --> 00:06:19.004
about the message broker.

138
00:06:19.004 --> 00:06:21.003
Each one subscribes to the messages

139
00:06:21.003 --> 00:06:23.006
and starts the polling process.

140
00:06:23.006 --> 00:06:25.009
The message broker knows that currently,

141
00:06:25.009 --> 00:06:29.001
there are two subscribers for the message.

142
00:06:29.001 --> 00:06:31.007
Now, the original service makes a call to the producer

143
00:06:31.007 --> 00:06:34.008
and once again blocks waiting for a response.

144
00:06:34.008 --> 00:06:37.009
The producer creates a message based on the contract

145
00:06:37.009 --> 00:06:41.002
for the system and puts the message on the broker.

146
00:06:41.002 --> 00:06:43.008
Once again, the producer can respond

147
00:06:43.008 --> 00:06:46.006
to the original service with accepted.

148
00:06:46.006 --> 00:06:49.000
Now the message will move to the message broker

149
00:06:49.000 --> 00:06:51.005
and be put on the appropriate queue.

150
00:06:51.005 --> 00:06:54.000
However, it will present the message

151
00:06:54.000 --> 00:06:56.007
to all available subscribers.

152
00:06:56.007 --> 00:07:00.008
The subscribers, during their own independent listen phase,

153
00:07:00.008 --> 00:07:04.008
will receive the message in its original format, usually.

154
00:07:04.008 --> 00:07:08.004
Each subscriber must act the message on its own

155
00:07:08.004 --> 00:07:10.008
or the message broker will still hold the message

156
00:07:10.008 --> 00:07:13.003
for the individual subscriber.

157
00:07:13.003 --> 00:07:16.000
At this point, they can each do their own thing

158
00:07:16.000 --> 00:07:18.002
and execute the actions needed

159
00:07:18.002 --> 00:07:20.000
on the acceptance of the message.

