WEBVTT
1
00:00:00.004 --> 00:00:02.006
- [Instructor] One benefit of the asynchronous model

2
00:00:02.006 --> 00:00:06.000
is that your hands aren't tied into a particular pattern

3
00:00:06.000 --> 00:00:10.000
and hybrids are a very real possibility.

4
00:00:10.000 --> 00:00:11.005
The fact that you are not tied

5
00:00:11.005 --> 00:00:15.001
makes the hybrid event driven system not only possible,

6
00:00:15.001 --> 00:00:17.000
but highly efficient.

7
00:00:17.000 --> 00:00:20.000
This is actually how my GDPR workflow was built

8
00:00:20.000 --> 00:00:22.001
that I discussed earlier.

9
00:00:22.001 --> 00:00:24.006
In this model, you still have a centralized

10
00:00:24.006 --> 00:00:28.006
command and control structure for your system as a whole,

11
00:00:28.006 --> 00:00:31.007
but when the need arises, you can dispatch

12
00:00:31.007 --> 00:00:35.006
choreographed events to remote systems.

13
00:00:35.006 --> 00:00:39.006
They in turn can either stay choreographed or convert back

14
00:00:39.006 --> 00:00:43.003
to an internal command and control structure.

15
00:00:43.003 --> 00:00:45.009
Work gets done, and if you do it right,

16
00:00:45.009 --> 00:00:48.000
the original command and control

17
00:00:48.000 --> 00:00:50.001
knows when everything is finished,

18
00:00:50.001 --> 00:00:55.005
either directly in line or via some other polling mechanism.

19
00:00:55.005 --> 00:00:58.000
Again, this is a system I have built

20
00:00:58.000 --> 00:01:00.005
and is highly efficient at what it does.

21
00:01:00.005 --> 00:01:02.009
The centralized command and control

22
00:01:02.009 --> 00:01:07.001
directs all traffic internally to the system of record,

23
00:01:07.001 --> 00:01:09.006
but also kicks off choreographed workloads

24
00:01:09.006 --> 00:01:11.006
in remote systems.

25
00:01:11.006 --> 00:01:15.008
In the end, the remote system is responsible in some way

26
00:01:15.008 --> 00:01:19.001
to alert the centralized command and control structure

27
00:01:19.001 --> 00:01:20.009
that it is finished.

28
00:01:20.009 --> 00:01:24.006
You can get a good mix of benefits here.

29
00:01:24.006 --> 00:01:27.004
No matter which event model you choose,

30
00:01:27.004 --> 00:01:31.006
be it choreographed, orchestrated, or a hybrid approach,

31
00:01:31.006 --> 00:01:34.000
contracts between your systems

32
00:01:34.000 --> 00:01:37.001
via the message broker are key.

33
00:01:37.001 --> 00:01:40.006
The contract must be well documented.

34
00:01:40.006 --> 00:01:42.000
There is no room for error

35
00:01:42.000 --> 00:01:44.006
when you have disjointed processes,

36
00:01:44.006 --> 00:01:46.009
mainly because you don't need help

37
00:01:46.009 --> 00:01:49.005
making things more complex.

38
00:01:49.005 --> 00:01:52.006
A well-documented contract of the message

39
00:01:52.006 --> 00:01:56.003
will help to alleviate this concern.

40
00:01:56.003 --> 00:02:00.001
The contract must be passive to change.

41
00:02:00.001 --> 00:02:03.000
Changes can and do happen,

42
00:02:03.000 --> 00:02:07.005
but they must not break downstream or upstream systems

43
00:02:07.005 --> 00:02:09.003
in the process.

44
00:02:09.003 --> 00:02:12.001
This applies to all software engineering in my mind.

45
00:02:12.001 --> 00:02:14.008
However, in the asynchronous world,

46
00:02:14.008 --> 00:02:18.007
it becomes a much bigger deal, in my opinion.

47
00:02:18.007 --> 00:02:22.003
Contracts must be enforced rigorously.

48
00:02:22.003 --> 00:02:24.002
In order to be resistant to change

49
00:02:24.002 --> 00:02:26.005
and efficient in your processing,

50
00:02:26.005 --> 00:02:29.004
you must read the contract and honor it.

51
00:02:29.004 --> 00:02:32.006
Furthermore, should you find a breaking change

52
00:02:32.006 --> 00:02:35.002
in how your component is called,

53
00:02:35.002 --> 00:02:39.000
you need to send it to the DLQ quickly and efficiently

54
00:02:39.000 --> 00:02:40.008
to trigger alerting.

55
00:02:40.008 --> 00:02:43.001
If you are passive to contracts,

56
00:02:43.001 --> 00:02:46.000
the error may get lost.

