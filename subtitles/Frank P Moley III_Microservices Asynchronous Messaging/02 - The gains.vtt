WEBVTT
1
00:00:00.004 --> 00:00:02.005
- [Instructor] We briefly touched on some of the benefits

2
00:00:02.005 --> 00:00:04.003
of this communication style,

3
00:00:04.003 --> 00:00:06.003
but I want to go into a little more depth

4
00:00:06.003 --> 00:00:09.009
to the power of these architectural design decisions,

5
00:00:09.009 --> 00:00:12.005
to help you be better prepared to know when

6
00:00:12.005 --> 00:00:16.002
and why you would use such a communication style

7
00:00:16.002 --> 00:00:18.009
in your microservices system.

8
00:00:18.009 --> 00:00:21.009
In TCP/IP communications on a network,

9
00:00:21.009 --> 00:00:25.007
and it used to be a real issue with routing protocols,

10
00:00:25.007 --> 00:00:28.009
it was possible to bring a network to its knees

11
00:00:28.009 --> 00:00:31.006
through what is called a broadcast storm.

12
00:00:31.006 --> 00:00:34.001
Each node was broadcasting its routing table

13
00:00:34.001 --> 00:00:36.005
to the whole network, and the network itself

14
00:00:36.005 --> 00:00:38.005
would become gridlocked.

15
00:00:38.005 --> 00:00:40.009
A similar pattern can emerge

16
00:00:40.009 --> 00:00:43.008
in a microservices architecture.

17
00:00:43.008 --> 00:00:47.004
As more and more services enter the system

18
00:00:47.004 --> 00:00:51.003
or even more prevalent, the container orchestrator,

19
00:00:51.003 --> 00:00:53.002
the chattiness of communications

20
00:00:53.002 --> 00:00:56.004
can lead to congestion in the network.

21
00:00:56.004 --> 00:00:59.003
TCP is a chatty protocol to begin with,

22
00:00:59.003 --> 00:01:02.004
and then you add to it the many calls needed

23
00:01:02.004 --> 00:01:04.009
to make one single operation work,

24
00:01:04.009 --> 00:01:08.005
and you start to see congestion on a network.

25
00:01:08.005 --> 00:01:10.008
What is worse is that the congestion grows

26
00:01:10.008 --> 00:01:15.000
exponentially as more services are added to the system

27
00:01:15.000 --> 00:01:19.001
because seldom do we build one-to-one calls.

28
00:01:19.001 --> 00:01:20.008
The more services on the network

29
00:01:20.008 --> 00:01:23.000
and the more services they consume,

30
00:01:23.000 --> 00:01:25.004
the busier the load becomes.

31
00:01:25.004 --> 00:01:30.003
Of course, more users also means more traffic.

32
00:01:30.003 --> 00:01:33.004
One slow service can exacerbate this issue

33
00:01:33.004 --> 00:01:36.008
even more because that latency is felt

34
00:01:36.008 --> 00:01:40.006
in all services consuming the slow service.

35
00:01:40.006 --> 00:01:44.006
In addition, those blocking calls yield more weights,

36
00:01:44.006 --> 00:01:47.007
which then increases the impact of latency

37
00:01:47.007 --> 00:01:50.002
as more and more downstream services

38
00:01:50.002 --> 00:01:52.004
become impacted.

39
00:01:52.004 --> 00:01:54.007
This is where asynchronous communications

40
00:01:54.007 --> 00:01:57.000
can really have an impact.

41
00:01:57.000 --> 00:01:59.007
The single most effective way to reduce gridlock

42
00:01:59.007 --> 00:02:02.005
on the system is to remove blocking calls

43
00:02:02.005 --> 00:02:04.005
where they are not needed.

44
00:02:04.005 --> 00:02:07.007
The less traffic that is waiting on responses

45
00:02:07.007 --> 00:02:09.006
improves the traffic flow,

46
00:02:09.006 --> 00:02:13.009
which, in turn, can reduce gridlock dramatically.

47
00:02:13.009 --> 00:02:17.002
Now, clearly, this isn't the only solution to the problem.

48
00:02:17.002 --> 00:02:21.005
But many times we aim for synchronous calls first,

49
00:02:21.005 --> 00:02:24.007
when in reality, we should be doing the opposite

50
00:02:24.007 --> 00:02:27.001
in a microservices architecture,

51
00:02:27.001 --> 00:02:31.003
to prevent gridlock from ever becoming a real issue.

52
00:02:31.003 --> 00:02:35.004
One of the biggest gains with asynchronous communications

53
00:02:35.004 --> 00:02:37.004
is the impact it can have

54
00:02:37.004 --> 00:02:40.001
when dealing with long-running processes.

55
00:02:40.001 --> 00:02:42.006
And in fact, this is the use case

56
00:02:42.006 --> 00:02:45.001
most developers first tackle

57
00:02:45.001 --> 00:02:48.003
with asynchronous communications.

58
00:02:48.003 --> 00:02:51.005
One of the key issues with long-running processes

59
00:02:51.005 --> 00:02:53.004
becomes blocking.

60
00:02:53.004 --> 00:02:55.004
As we address with gridlock,

61
00:02:55.004 --> 00:02:59.002
blocking calls can be an issue on network congestion.

62
00:02:59.002 --> 00:03:02.007
That issue becomes worse when you have known

63
00:03:02.007 --> 00:03:05.008
long-running processes to deal with.

64
00:03:05.008 --> 00:03:08.009
Asynchronous messaging provides an opportunity

65
00:03:08.009 --> 00:03:11.008
to build a natural retry logic

66
00:03:11.008 --> 00:03:14.003
without another network call.

67
00:03:14.003 --> 00:03:17.000
The consumer of the asynchronous message

68
00:03:17.000 --> 00:03:19.004
can handle its own retry logic

69
00:03:19.004 --> 00:03:23.004
without the client having to have any input at all.

70
00:03:23.004 --> 00:03:27.003
This actually can reduce the overall error state of systems,

71
00:03:27.003 --> 00:03:32.000
especially in those long-running scenarios.

72
00:03:32.000 --> 00:03:36.003
Long-running processes usually have complex call trees

73
00:03:36.003 --> 00:03:38.007
needed to get the work done.

74
00:03:38.007 --> 00:03:41.004
When moving to asynchronous messaging,

75
00:03:41.004 --> 00:03:44.003
the call trees become non-existent,

76
00:03:44.003 --> 00:03:48.005
which again, improves overall performance.

77
00:03:48.005 --> 00:03:50.008
Each system handles its work

78
00:03:50.008 --> 00:03:54.001
and passes the message on in its original

79
00:03:54.001 --> 00:03:57.001
or a transformed state.

80
00:03:57.001 --> 00:04:00.000
This not only impacts performance,

81
00:04:00.000 --> 00:04:03.002
but can also, if done correctly,

82
00:04:03.002 --> 00:04:05.006
reduce complexity of the calls

83
00:04:05.006 --> 00:04:07.008
from a systems view.

84
00:04:07.008 --> 00:04:10.004
But it's not a silver bullet,

85
00:04:10.004 --> 00:04:14.001
and we will talk about that quite a bit.

86
00:04:14.001 --> 00:04:17.001
You can also reduce the risk of timeouts,

87
00:04:17.001 --> 00:04:20.003
which can cause havoc on system health.

88
00:04:20.003 --> 00:04:22.004
When you have long-running processes

89
00:04:22.004 --> 00:04:25.008
that are blocking calls, from the client side,

90
00:04:25.008 --> 00:04:28.001
there is a risk of natural timeouts

91
00:04:28.001 --> 00:04:30.004
in that blocking call.

92
00:04:30.004 --> 00:04:34.000
This can cause services to flop or become unusable

93
00:04:34.000 --> 00:04:36.004
as sockets are cleaned up.

94
00:04:36.004 --> 00:04:39.003
By leveraging asynchronous communications,

95
00:04:39.003 --> 00:04:41.009
the timeouts become almost non-existent

96
00:04:41.009 --> 00:04:46.009
assuming everything else is healthy in the system.

97
00:04:46.009 --> 00:04:49.007
Highly coupled systems, as we all know,

98
00:04:49.007 --> 00:04:51.007
are the bane of developers.

99
00:04:51.007 --> 00:04:54.002
They become brittle and hard to manage,

100
00:04:54.002 --> 00:04:57.003
let alone add features to.

101
00:04:57.003 --> 00:04:59.006
There is a real risk in microservices,

102
00:04:59.006 --> 00:05:02.001
especially where everything is synchronous

103
00:05:02.001 --> 00:05:04.009
in creating highly coupled systems.

104
00:05:04.009 --> 00:05:07.005
Now we end up building a new monolith

105
00:05:07.005 --> 00:05:10.006
with a lot more complexity and chattiness

106
00:05:10.006 --> 00:05:12.004
without solving any of the real problems

107
00:05:12.004 --> 00:05:14.004
we intended to.

108
00:05:14.004 --> 00:05:16.008
When building asynchronous messaging,

109
00:05:16.008 --> 00:05:20.009
the consumer of your asynchronous message isn't known.

110
00:05:20.009 --> 00:05:23.004
You communicate only through the contract

111
00:05:23.004 --> 00:05:25.009
of the message and as such,

112
00:05:25.009 --> 00:05:29.001
your coupling is reduced naturally.

113
00:05:29.001 --> 00:05:31.003
This coupling becomes really evident

114
00:05:31.003 --> 00:05:34.005
if you build in call trees to get work done.

115
00:05:34.005 --> 00:05:36.008
If your client calls several services

116
00:05:36.008 --> 00:05:39.008
that in turn call several services,

117
00:05:39.008 --> 00:05:42.000
all of which are tied to the original call,

118
00:05:42.000 --> 00:05:44.009
this call tree can become a nightmare.

119
00:05:44.009 --> 00:05:48.008
In asynchronous communications, especially in messaging,

120
00:05:48.008 --> 00:05:50.005
this doesn't happen.

121
00:05:50.005 --> 00:05:54.008
Each consumer will act independently of the rest.

122
00:05:54.008 --> 00:05:56.009
This isn't an all-inclusive list,

123
00:05:56.009 --> 00:05:58.006
but there are a few more key benefits

124
00:05:58.006 --> 00:06:00.000
that we should discuss,

125
00:06:00.000 --> 00:06:03.000
and we will see them later in this course.

126
00:06:03.000 --> 00:06:04.007
With asynchronous communications

127
00:06:04.007 --> 00:06:08.006
you can build QoS or priority into your messages.

128
00:06:08.006 --> 00:06:11.009
This allows the consumers to prioritize the work

129
00:06:11.009 --> 00:06:14.004
in a way that makes sense for your business

130
00:06:14.004 --> 00:06:17.004
without negatively impacting your users.

131
00:06:17.004 --> 00:06:20.002
Fault tolerance also becomes an easier problem

132
00:06:20.002 --> 00:06:23.004
to solve in asynchronous messaging.

133
00:06:23.004 --> 00:06:25.004
In traditional synchronous flows,

134
00:06:25.004 --> 00:06:27.004
if a client is unavailable,

135
00:06:27.004 --> 00:06:30.007
you may wait for a response that will never come.

136
00:06:30.007 --> 00:06:32.008
You also need to implement a circuit breaker

137
00:06:32.008 --> 00:06:36.006
or other client side logic to handle this.

138
00:06:36.006 --> 00:06:38.003
In asynchronous systems,

139
00:06:38.003 --> 00:06:40.004
the contract will handle the case

140
00:06:40.004 --> 00:06:42.000
of an unavailable system

141
00:06:42.000 --> 00:06:45.008
and the message won't be blocked or timed out.

142
00:06:45.008 --> 00:06:48.003
I've already said this, but it's worth repeating.

143
00:06:48.003 --> 00:06:51.008
Not every service call needs an immediate response.

144
00:06:51.008 --> 00:06:54.006
Consider deleting an element in your system.

145
00:06:54.006 --> 00:06:55.008
More often than not

146
00:06:55.008 --> 00:06:57.002
the user doesn't need to know

147
00:06:57.002 --> 00:06:59.005
that the element was actually deleted.

148
00:06:59.005 --> 00:07:01.006
They just expect it to happen.

149
00:07:01.006 --> 00:07:03.009
If the call becomes asynchronous,

150
00:07:03.009 --> 00:07:06.002
as long as it's done eventually,

151
00:07:06.002 --> 00:07:08.006
that usually is sufficient.

152
00:07:08.006 --> 00:07:10.002
We often build into our systems

153
00:07:10.002 --> 00:07:12.006
logging, metrics, and analytics,

154
00:07:12.006 --> 00:07:14.003
and rightfully so.

155
00:07:14.003 --> 00:07:17.002
But do you really need to block on these operations?

156
00:07:17.002 --> 00:07:20.003
Again, more often than not,

157
00:07:20.003 --> 00:07:22.005
waiting a few seconds for a metric value

158
00:07:22.005 --> 00:07:25.000
to show up isn't a big deal.

159
00:07:25.000 --> 00:07:27.000
In fact, most of the data is viewed

160
00:07:27.000 --> 00:07:29.003
as an aggregate over time.

161
00:07:29.003 --> 00:07:32.006
As such there is no need for it to be immediate.

162
00:07:32.006 --> 00:07:35.009
The overhead of doing this type of work synchronously

163
00:07:35.009 --> 00:07:37.000
just isn't worth it.

