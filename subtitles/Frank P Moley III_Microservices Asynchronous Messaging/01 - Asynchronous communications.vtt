WEBVTT
1
00:00:00.004 --> 00:00:03.002
- [Instructor] When dealing with system-to-system calls,

2
00:00:03.002 --> 00:00:05.004
there are only two strategies.

3
00:00:05.004 --> 00:00:08.000
The traditional model that most of us have dealt with

4
00:00:08.000 --> 00:00:10.000
is the synchronous model.

5
00:00:10.000 --> 00:00:13.003
The asynchronous model of interservice communication,

6
00:00:13.003 --> 00:00:16.004
however, has significant value.

7
00:00:16.004 --> 00:00:18.007
Before we talk about asynchronous communications

8
00:00:18.007 --> 00:00:20.003
and microservices,

9
00:00:20.003 --> 00:00:21.009
I want to spend a moment and talk

10
00:00:21.009 --> 00:00:25.002
about standard microservices communications.

11
00:00:25.002 --> 00:00:29.002
In a standard model, service-to-service communications

12
00:00:29.002 --> 00:00:33.003
is over HTTP using RESTful patterns.

13
00:00:33.003 --> 00:00:35.005
The calls are synchronous in nature,

14
00:00:35.005 --> 00:00:38.005
meaning that the caller waits for a response,

15
00:00:38.005 --> 00:00:40.001
but more importantly,

16
00:00:40.001 --> 00:00:45.002
that response is sent after the request is fully processed.

17
00:00:45.002 --> 00:00:48.003
Each call therefore becomes a blocking call

18
00:00:48.003 --> 00:00:53.000
that the client must wait on a success or failure indicated

19
00:00:53.000 --> 00:00:57.000
by status codes from the service being called.

20
00:00:57.000 --> 00:01:02.001
As such, in this model, call paths can become deep.

21
00:01:02.001 --> 00:01:04.001
Now it isn't usually a big deal

22
00:01:04.001 --> 00:01:06.009
in small, concise operations,

23
00:01:06.009 --> 00:01:09.007
but it can become a bottleneck

24
00:01:09.007 --> 00:01:14.003
for longer processes across many services.

25
00:01:14.003 --> 00:01:19.003
As a contrast, the other option and the focus of this course

26
00:01:19.003 --> 00:01:22.001
is asynchronous communications.

27
00:01:22.001 --> 00:01:23.003
There are a couple of ways

28
00:01:23.003 --> 00:01:26.001
to implement asynchronous communications

29
00:01:26.001 --> 00:01:30.001
and the first is over HTTP using REST.

30
00:01:30.001 --> 00:01:33.001
In this model, the client sends a call

31
00:01:33.001 --> 00:01:35.005
and the server immediately responds

32
00:01:35.005 --> 00:01:38.002
with an accepted status code.

33
00:01:38.002 --> 00:01:40.009
The client then either polls the server

34
00:01:40.009 --> 00:01:44.008
or waits for a push message on a callback URL

35
00:01:44.008 --> 00:01:48.005
to determine if the work was done and successful

36
00:01:48.005 --> 00:01:51.006
or done and failed.

37
00:01:51.006 --> 00:01:55.003
Another method, and the ultimate focus of this course,

38
00:01:55.003 --> 00:01:57.003
is through the use of messaging systems

39
00:01:57.003 --> 00:02:01.007
like Rabbit, Kafka, JMS, or others.

40
00:02:01.007 --> 00:02:03.006
We will discuss many different ways

41
00:02:03.006 --> 00:02:07.003
of implementing messaging patterns throughout this course,

42
00:02:07.003 --> 00:02:11.004
but for now, we will simply say a message is put on a system

43
00:02:11.004 --> 00:02:15.004
and a downstream consumer works on that message.

44
00:02:15.004 --> 00:02:18.000
Successes or failures can be communicated

45
00:02:18.000 --> 00:02:21.002
many different ways or not at all

46
00:02:21.002 --> 00:02:24.005
in these various patterns we will discuss.

47
00:02:24.005 --> 00:02:26.002
Now if you are thinking yourself

48
00:02:26.002 --> 00:02:28.006
that these asynchronous communication styles

49
00:02:28.006 --> 00:02:31.004
can be more complex, you're right.

50
00:02:31.004 --> 00:02:35.008
In fact, it can be very difficult to do them right,

51
00:02:35.008 --> 00:02:38.008
but there are benefits.

52
00:02:38.008 --> 00:02:40.005
One of the biggest benefits

53
00:02:40.005 --> 00:02:43.004
is offloading strain on the system.

54
00:02:43.004 --> 00:02:46.009
By not having every call be a blocking call,

55
00:02:46.009 --> 00:02:50.006
you can leverage more processing power behind the scenes

56
00:02:50.006 --> 00:02:53.002
and not impact your customer,

57
00:02:53.002 --> 00:02:57.008
and after all, not every call needs an immediate response,

58
00:02:57.008 --> 00:02:59.006
and since there is a correlation

59
00:02:59.006 --> 00:03:03.000
between user wait times and satisfaction,

60
00:03:03.000 --> 00:03:05.005
the offloading to asynchronous

61
00:03:05.005 --> 00:03:08.004
can improve satisfaction of users.

62
00:03:08.004 --> 00:03:11.000
And in an eCommerce system, for instance,

63
00:03:11.000 --> 00:03:13.008
that can translate to money.

64
00:03:13.008 --> 00:03:18.007
In addition, many jobs take a while to run to completion

65
00:03:18.007 --> 00:03:21.007
and using asynchronous communications

66
00:03:21.007 --> 00:03:25.005
not only off-loads strain, but in doing so,

67
00:03:25.005 --> 00:03:29.001
keeps the system as a whole healthier.

68
00:03:29.001 --> 00:03:33.007
Asynchronous communications, especially in workloads and dag

69
00:03:33.007 --> 00:03:36.009
or directed in cyclical graph workflows,

70
00:03:36.009 --> 00:03:40.001
can allow you to build a natural retries

71
00:03:40.001 --> 00:03:42.009
without negatively impacting performance

72
00:03:42.009 --> 00:03:45.006
on the processes involved.

73
00:03:45.006 --> 00:03:49.005
Now, this is just a very brief introduction to the needs

74
00:03:49.005 --> 00:03:54.002
for asynchronous communications in a microservices system.

75
00:03:54.002 --> 00:03:56.007
And as we move throughout this course,

76
00:03:56.007 --> 00:03:59.001
you will see concrete use cases

77
00:03:59.001 --> 00:04:03.004
where this communication style and the associated patterns

78
00:04:03.004 --> 00:04:08.004
can greatly improve your system viability, scalability,

79
00:04:08.004 --> 00:04:10.008
and overall operations,

80
00:04:10.008 --> 00:04:15.000
which is why we built microservices in the first place.

