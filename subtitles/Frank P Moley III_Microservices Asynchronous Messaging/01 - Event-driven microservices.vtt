WEBVTT
1
00:00:00.004 --> 00:00:02.001
- [Instructor] One of the most common use cases

2
00:00:02.001 --> 00:00:03.005
for asynchronous messaging

3
00:00:03.005 --> 00:00:06.001
in a microservices-based system

4
00:00:06.001 --> 00:00:10.000
is so-called EventDriven microservices.

5
00:00:10.000 --> 00:00:13.006
Oftentimes, you'll hear of EventDriven microservices

6
00:00:13.006 --> 00:00:15.007
being applied to a data pattern,

7
00:00:15.007 --> 00:00:18.009
and we will discuss that when we talk about data

8
00:00:18.009 --> 00:00:20.007
but for the purposes of this chapter,

9
00:00:20.007 --> 00:00:22.004
we are talking very generic

10
00:00:22.004 --> 00:00:24.009
about EventDriven microservices

11
00:00:24.009 --> 00:00:29.000
and how to apply them to your use cases.

12
00:00:29.000 --> 00:00:32.006
An EventDriven microservices pattern requires one

13
00:00:32.006 --> 00:00:35.008
or more steps based on the invocation

14
00:00:35.008 --> 00:00:38.002
from a specific event.

15
00:00:38.002 --> 00:00:41.009
These can be as simple as writing a tuple to a database,

16
00:00:41.009 --> 00:00:45.004
or as complex as a series of remediation processes

17
00:00:45.004 --> 00:00:50.003
that are required when a specific system event occurs.

18
00:00:50.003 --> 00:00:51.009
Again, the sky is the limit here

19
00:00:51.009 --> 00:00:53.007
when working in these models,

20
00:00:53.007 --> 00:00:57.000
but the key is one or more steps.

21
00:00:57.000 --> 00:01:01.004
Those steps, however, are triggered from a single event.

22
00:01:01.004 --> 00:01:04.007
We don't usually build EventDriven microservices based

23
00:01:04.007 --> 00:01:06.009
on several events being fired

24
00:01:06.009 --> 00:01:09.005
before kicking off the workflow.

25
00:01:09.005 --> 00:01:12.002
It is usually one single event.

26
00:01:12.002 --> 00:01:14.002
Now, I won't say that there aren't cases

27
00:01:14.002 --> 00:01:16.005
where there are a series of events needed

28
00:01:16.005 --> 00:01:20.000
but the EventDriven microservices architecture fires

29
00:01:20.000 --> 00:01:22.000
from a successful check

30
00:01:22.000 --> 00:01:25.004
that all the other data is in a proper state.

31
00:01:25.004 --> 00:01:28.002
All of the steps are part of the same goal.

32
00:01:28.002 --> 00:01:30.009
Consider a banking loan application.

33
00:01:30.009 --> 00:01:34.004
In a banking system, several tasks or steps

34
00:01:34.004 --> 00:01:38.008
must be completed once a loan application is submitted.

35
00:01:38.008 --> 00:01:40.009
These events cascade down a path

36
00:01:40.009 --> 00:01:43.002
of getting to one end goal.

37
00:01:43.002 --> 00:01:46.000
The approval or disapproval

38
00:01:46.000 --> 00:01:48.002
of the loan application.

39
00:01:48.002 --> 00:01:50.000
We don't want to muddy the waters here

40
00:01:50.000 --> 00:01:52.004
when discussing an EventDriven system

41
00:01:52.004 --> 00:01:55.005
with ancillary tasks that need to happen.

42
00:01:55.005 --> 00:01:57.008
Those may be required of the system

43
00:01:57.008 --> 00:02:01.002
but they are not part of the event itself.

44
00:02:01.002 --> 00:02:04.008
Finally, each piece has a role to play.

45
00:02:04.008 --> 00:02:08.002
We talked about how they all have the end goal in mind

46
00:02:08.002 --> 00:02:12.001
but each step should be distinct and required.

47
00:02:12.001 --> 00:02:14.009
These isolation of steps allow the components

48
00:02:14.009 --> 00:02:17.003
to do the work that they are assigned to do

49
00:02:17.003 --> 00:02:20.007
and nothing more but nothing less.

50
00:02:20.007 --> 00:02:22.006
The isolation and definition

51
00:02:22.006 --> 00:02:25.006
of what that role is allows the developers

52
00:02:25.006 --> 00:02:29.002
to build systems that function as expected

53
00:02:29.002 --> 00:02:32.001
because there can be a concrete definition

54
00:02:32.001 --> 00:02:34.003
of each of the steps.

55
00:02:34.003 --> 00:02:36.008
The first model for EventDriven microservices

56
00:02:36.008 --> 00:02:41.000
that we will talk about is the choreographed events.

57
00:02:41.000 --> 00:02:43.009
Now, we're going to go into detail of this later on,

58
00:02:43.009 --> 00:02:46.008
but for now, we'll just touch on it.

59
00:02:46.008 --> 00:02:50.000
This often can be called a call tree.

60
00:02:50.000 --> 00:02:51.009
Each step does some work

61
00:02:51.009 --> 00:02:54.008
and passes a message down the change.

62
00:02:54.008 --> 00:02:57.003
There is no centralized controller

63
00:02:57.003 --> 00:02:59.002
of the choreographed events.

64
00:02:59.002 --> 00:03:02.005
They just cascade down the pipeline.

65
00:03:02.005 --> 00:03:04.000
Speaking of pipeline,

66
00:03:04.000 --> 00:03:06.006
if you have ever done work in Unix or Linux,

67
00:03:06.006 --> 00:03:08.007
you have seen a pseudo example of this

68
00:03:08.007 --> 00:03:10.006
with the pipe syntax.

69
00:03:10.006 --> 00:03:12.009
In a pipe, the output from one command

70
00:03:12.009 --> 00:03:15.001
is passed to another.

71
00:03:15.001 --> 00:03:18.004
This is similar to how choreographed events work.

72
00:03:18.004 --> 00:03:20.001
While the full output of a step

73
00:03:20.001 --> 00:03:22.008
isn't passed to the next step that often,

74
00:03:22.008 --> 00:03:24.008
some trigger will be passed

75
00:03:24.008 --> 00:03:27.002
with sufficient data to the next step

76
00:03:27.002 --> 00:03:32.001
for it to do its work and so on down the call chain.

77
00:03:32.001 --> 00:03:34.005
Orchestrated events are another option

78
00:03:34.005 --> 00:03:37.001
with EventDriven microservices.

79
00:03:37.001 --> 00:03:39.006
The orchestrated model is much more common

80
00:03:39.006 --> 00:03:42.009
in practice than orchestrated events.

81
00:03:42.009 --> 00:03:45.001
This comes from the centralization

82
00:03:45.001 --> 00:03:47.002
of command and control.

83
00:03:47.002 --> 00:03:49.009
More often than not, we know the steps

84
00:03:49.009 --> 00:03:51.009
that are involved in a process

85
00:03:51.009 --> 00:03:53.009
and as such, we have the ability

86
00:03:53.009 --> 00:03:56.009
to invoke the steps as we need to,

87
00:03:56.009 --> 00:04:00.001
and oftentimes pull for a result.

88
00:04:00.001 --> 00:04:02.008
Because we are in an asynchronous pattern,

89
00:04:02.008 --> 00:04:05.003
the pulling for results is standard,

90
00:04:05.003 --> 00:04:07.009
either from the service executing the step

91
00:04:07.009 --> 00:04:11.008
or maybe from a database or some other state store.

92
00:04:11.008 --> 00:04:14.000
The orchestrator knows which events

93
00:04:14.000 --> 00:04:18.001
are ready to fire and will handle the calling downstream

94
00:04:18.001 --> 00:04:20.007
via a message system.

95
00:04:20.007 --> 00:04:25.007
This model is, however, still based on isolated steps.

96
00:04:25.007 --> 00:04:28.007
Those isolated steps are distinct.

97
00:04:28.007 --> 00:04:31.008
Seldom, if ever, do steps need to know

98
00:04:31.008 --> 00:04:36.000
about other steps in the overall orchestration.

