WEBVTT
1
00:00:00.004 --> 00:00:01.003
- [Instructor] Throughout this course,

2
00:00:01.003 --> 00:00:03.007
I am going to be using some common terms

3
00:00:03.007 --> 00:00:06.001
and reference common components

4
00:00:06.001 --> 00:00:08.007
and I want to spend a quick moment to introduce them

5
00:00:08.007 --> 00:00:10.003
in case you are completely new

6
00:00:10.003 --> 00:00:14.001
to the concept of asynchronous messaging.

7
00:00:14.001 --> 00:00:17.007
The message broker is one of the core components required

8
00:00:17.007 --> 00:00:19.005
for asynchronous messaging

9
00:00:19.005 --> 00:00:22.003
in a microservices architectural style

10
00:00:22.003 --> 00:00:25.006
or any asynchronous messaging for that matter.

11
00:00:25.006 --> 00:00:27.004
It is the heart of the system

12
00:00:27.004 --> 00:00:32.005
and has central responsibility for all messaging operations.

13
00:00:32.005 --> 00:00:34.003
It provides a native mechanism

14
00:00:34.003 --> 00:00:37.003
to translate the message from one system

15
00:00:37.003 --> 00:00:39.008
into a message for another system.

16
00:00:39.008 --> 00:00:44.000
It can translate and transform the message as it comes in

17
00:00:44.000 --> 00:00:48.002
and prepare it for the consumer as needed.

18
00:00:48.002 --> 00:00:51.004
One of the big responsibilities, as you might imagine,

19
00:00:51.004 --> 00:00:54.007
includes the actual routing of the messages.

20
00:00:54.007 --> 00:00:58.005
Routing comes in many forms from simple point-to-point

21
00:00:58.005 --> 00:01:02.008
to inspection-based routing and fanning out of messages.

22
00:01:02.008 --> 00:01:06.003
The message broker handles these tasks for you

23
00:01:06.003 --> 00:01:08.008
so that your consumers are only impacted

24
00:01:08.008 --> 00:01:12.004
by the messages they need to respond to.

25
00:01:12.004 --> 00:01:14.003
In addition to routing,

26
00:01:14.003 --> 00:01:18.007
messaging can usually be aggregated as needed.

27
00:01:18.007 --> 00:01:23.005
If several messages should be broken apart or reassembled

28
00:01:23.005 --> 00:01:26.001
to do this work for you so you can, again,

29
00:01:26.001 --> 00:01:30.009
target messages in the most efficient way possible.

30
00:01:30.009 --> 00:01:33.009
Unfortunately, one of the most ignored aspects

31
00:01:33.009 --> 00:01:37.005
of message brokers is the ability to handle errors

32
00:01:37.005 --> 00:01:41.005
in the systems and respond or alert to them.

33
00:01:41.005 --> 00:01:45.006
We will talk a bit about how to handle dead-letter queues,

34
00:01:45.006 --> 00:01:49.009
but it's important to know that messaging does have errors

35
00:01:49.009 --> 00:01:51.009
and you shouldn't ignore them.

36
00:01:51.009 --> 00:01:55.000
The message brokers are a great source for handling

37
00:01:55.000 --> 00:01:59.000
and responding to these situations.

38
00:01:59.000 --> 00:02:01.008
There are several common message brokers

39
00:02:01.008 --> 00:02:03.009
that you may see in use.

40
00:02:03.009 --> 00:02:06.009
Many are open source in nature.

41
00:02:06.009 --> 00:02:15.008
RabbitMQ, Apache ActiveMQ, JMS, Apache Kafka, and Cache.

42
00:02:15.008 --> 00:02:19.004
Now cache systems, such as the one by Redis,

43
00:02:19.004 --> 00:02:22.007
can be used as message brokers if needed,

44
00:02:22.007 --> 00:02:24.004
but from my experiences,

45
00:02:24.004 --> 00:02:27.004
they don't provide the robustness

46
00:02:27.004 --> 00:02:30.004
of the other tooling that I mentioned.

47
00:02:30.004 --> 00:02:31.009
There are several key terms

48
00:02:31.009 --> 00:02:34.004
with regards to asynchronous messaging

49
00:02:34.004 --> 00:02:36.007
that I will use throughout this course.

50
00:02:36.007 --> 00:02:38.007
I want to briefly mention them

51
00:02:38.007 --> 00:02:41.005
and what they mean as language and translations

52
00:02:41.005 --> 00:02:45.004
can cause confusion in some situations.

53
00:02:45.004 --> 00:02:49.002
A producer is the system that creates the message

54
00:02:49.002 --> 00:02:51.009
for some other system to act on,

55
00:02:51.009 --> 00:02:55.004
is responsible under the correct conditions

56
00:02:55.004 --> 00:02:59.006
for building a message using the contractual format

57
00:02:59.006 --> 00:03:03.001
and dispatching it to the message broker.

58
00:03:03.001 --> 00:03:04.007
Once it has sent the message,

59
00:03:04.007 --> 00:03:07.005
it usually will respond with an indication

60
00:03:07.005 --> 00:03:09.003
that the message was accepted

61
00:03:09.003 --> 00:03:11.009
and close the process.

62
00:03:11.009 --> 00:03:14.009
A consumer or receiver is the system

63
00:03:14.009 --> 00:03:18.005
that receives the message from the message broker.

64
00:03:18.005 --> 00:03:21.003
There are several ways that this can be accomplished,

65
00:03:21.003 --> 00:03:24.003
but ultimately, once the message is received,

66
00:03:24.003 --> 00:03:27.003
the consumer will act on that message.

67
00:03:27.003 --> 00:03:29.007
Usually the outcome of its operation

68
00:03:29.007 --> 00:03:32.002
is one of several possibilities.

69
00:03:32.002 --> 00:03:37.000
It can do nothing after work is done if it is a simple task.

70
00:03:37.000 --> 00:03:39.003
It can also become a producer

71
00:03:39.003 --> 00:03:42.007
for a message intended to another system downstream

72
00:03:42.007 --> 00:03:47.002
or a producer for the original system indicating

73
00:03:47.002 --> 00:03:49.004
its processing is done,

74
00:03:49.004 --> 00:03:52.009
sometimes called a response or callback scenario.

75
00:03:52.009 --> 00:03:54.006
The action of the consumer

76
00:03:54.006 --> 00:03:58.001
is totally dependent on its purpose.

77
00:03:58.001 --> 00:04:02.000
A dead-letter queue is a special place in a message broker

78
00:04:02.000 --> 00:04:04.004
where error messages go.

79
00:04:04.004 --> 00:04:06.004
There can be several reasons for errors

80
00:04:06.004 --> 00:04:09.006
from format issues like structure or length,

81
00:04:09.006 --> 00:04:13.002
timeouts from not being read quick enough by the consumer,

82
00:04:13.002 --> 00:04:14.008
or in some cases,

83
00:04:14.008 --> 00:04:16.009
the queues being so backed up

84
00:04:16.009 --> 00:04:19.007
that it cannot accept the message.

85
00:04:19.007 --> 00:04:23.004
Consider these cases when building a message-based system

86
00:04:23.004 --> 00:04:25.004
as you will need to respond to the cases

87
00:04:25.004 --> 00:04:29.000
in different manners from scaling up more consumers

88
00:04:29.000 --> 00:04:31.007
to ensuring that they're up and running.

89
00:04:31.007 --> 00:04:37.005
D-L queues can and usually are configured per message path

90
00:04:37.005 --> 00:04:42.000
to ensure messaging is complete across the board.

