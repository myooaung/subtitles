WEBVTT
1
00:00:00.004 --> 00:00:02.000
- [Instructor] One of the most common forays

2
00:00:02.000 --> 00:00:04.009
into asynchronous communications and messaging

3
00:00:04.009 --> 00:00:07.009
is for interservice communications.

4
00:00:07.009 --> 00:00:10.008
Often, you find yourself in a situation

5
00:00:10.008 --> 00:00:12.006
where you just need to push a message

6
00:00:12.006 --> 00:00:14.009
to a remote system to do work,

7
00:00:14.009 --> 00:00:17.003
and you don't want a block on the downstream system

8
00:00:17.003 --> 00:00:19.008
completing its tasks.

9
00:00:19.008 --> 00:00:22.000
Now, while I'm just going to introduce them here,

10
00:00:22.000 --> 00:00:24.004
I'm hoping that this will get you thinking

11
00:00:24.004 --> 00:00:29.003
about the use cases before we do a deep dive.

12
00:00:29.003 --> 00:00:32.005
Point to point messaging is one of the easiest ways

13
00:00:32.005 --> 00:00:34.008
in a microservices architecture

14
00:00:34.008 --> 00:00:38.002
to move to asynchronous messaging.

15
00:00:38.002 --> 00:00:41.002
These calls can replace traditional restful calls

16
00:00:41.002 --> 00:00:45.003
between services, where the response is not needed

17
00:00:45.003 --> 00:00:49.008
or can be received in and out of band process.

18
00:00:49.008 --> 00:00:52.005
In this model, there is a single producer

19
00:00:52.005 --> 00:00:56.008
that creates a message and puts it onto the message broker.

20
00:00:56.008 --> 00:00:59.001
There is also a single consumer

21
00:00:59.001 --> 00:01:01.006
who responds or listens to the message

22
00:01:01.006 --> 00:01:04.000
and does some action on it.

23
00:01:04.000 --> 00:01:05.008
It is important to remember

24
00:01:05.008 --> 00:01:08.002
that it is a send and forget model.

25
00:01:08.002 --> 00:01:10.004
The producer creates the message,

26
00:01:10.004 --> 00:01:13.007
dispatches it, and goes on.

27
00:01:13.007 --> 00:01:17.004
As such, any kind of response is usually

28
00:01:17.004 --> 00:01:20.006
another point-to-point message.

29
00:01:20.006 --> 00:01:24.000
The publish and subscribe, or pub-sub for short,

30
00:01:24.000 --> 00:01:28.001
is a different model for interservice communications.

31
00:01:28.001 --> 00:01:30.009
Its use cases are more specific

32
00:01:30.009 --> 00:01:33.003
in a microservices architecture,

33
00:01:33.003 --> 00:01:36.007
but nonetheless equally valuable.

34
00:01:36.007 --> 00:01:39.008
This actually becomes a very powerful pattern

35
00:01:39.008 --> 00:01:44.000
in distributed computing, as we will discuss.

36
00:01:44.000 --> 00:01:46.008
Once again, we usually have a single producer

37
00:01:46.008 --> 00:01:48.003
who creates the message

38
00:01:48.003 --> 00:01:52.000
and dispatches it to the message broker.

39
00:01:52.000 --> 00:01:57.001
However, in this model, there is one or more subscribers

40
00:01:57.001 --> 00:02:01.003
who listen for messages and act on their own accord.

41
00:02:01.003 --> 00:02:04.007
The distinction here is you can have multiple consumers

42
00:02:04.007 --> 00:02:06.004
of the same message,

43
00:02:06.004 --> 00:02:09.006
which is why this becomes a little less common

44
00:02:09.006 --> 00:02:11.008
in a microservices architecture,

45
00:02:11.008 --> 00:02:15.008
as we don't often find ourselves broadcasting a message

46
00:02:15.008 --> 00:02:20.007
to many different services in the exact same format.

47
00:02:20.007 --> 00:02:24.007
Once again, however, it is a send and forget model

48
00:02:24.007 --> 00:02:28.008
where the producer isn't waiting on any kind of response

49
00:02:28.008 --> 00:02:31.005
before continuing its work.

50
00:02:31.005 --> 00:02:34.003
In this model, there is also a concept

51
00:02:34.003 --> 00:02:37.000
of a durable subscription.

52
00:02:37.000 --> 00:02:40.009
In traditional pub-sub, if a subscriber isn't there,

53
00:02:40.009 --> 00:02:42.006
it won't get the message.

54
00:02:42.006 --> 00:02:46.003
However, if the subscriber is durable,

55
00:02:46.003 --> 00:02:49.005
there is a guarantee that the message will be delivered

56
00:02:49.005 --> 00:02:54.007
at some point once the subscriber is available again.

57
00:02:54.007 --> 00:02:57.008
This is a specific registration process

58
00:02:57.008 --> 00:03:00.006
that allows this durable subscription.

59
00:03:00.006 --> 00:03:04.006
But it is very critical when messages must be acted on,

60
00:03:04.006 --> 00:03:08.000
even if the processes have been terminated in the system.

