WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] One of the biggest uses

2
00:00:01.005 --> 00:00:03.005
of asynchronous messaging,

3
00:00:03.005 --> 00:00:05.004
though, often behind the scenes

4
00:00:05.004 --> 00:00:09.007
in a microservices architecture is in data flows.

5
00:00:09.007 --> 00:00:12.006
These data flows can range from a distributed data

6
00:00:12.006 --> 00:00:17.005
and eventual consistency to CQRS-based data rights

7
00:00:17.005 --> 00:00:18.009
to improve throughput

8
00:00:18.009 --> 00:00:22.004
on a microservices-based data services.

9
00:00:22.004 --> 00:00:25.008
So why is data such a powerful use case?

10
00:00:25.008 --> 00:00:27.009
We have seen it through the stream data platform,

11
00:00:27.009 --> 00:00:29.005
and now we are talking about it again

12
00:00:29.005 --> 00:00:32.000
from a state store perspective.

13
00:00:32.000 --> 00:00:37.002
The reason usually stems from data being hard, necessary,

14
00:00:37.002 --> 00:00:39.002
and often very slow.

15
00:00:39.002 --> 00:00:42.004
Databases, especially NoSQL databases,

16
00:00:42.004 --> 00:00:45.000
have hung their hats on quick writes

17
00:00:45.000 --> 00:00:47.004
to speed up the processing time,

18
00:00:47.004 --> 00:00:49.006
but it can still be a bottleneck

19
00:00:49.006 --> 00:00:52.003
for a highly utilized system.

20
00:00:52.003 --> 00:00:55.006
So slowness, it's relative,

21
00:00:55.006 --> 00:00:59.009
but there can be no denying for anyone with any experiences

22
00:00:59.009 --> 00:01:04.005
in highly utilized production systems that data is slow.

23
00:01:04.005 --> 00:01:07.007
Writing data, reading data, finding data

24
00:01:07.007 --> 00:01:11.001
are all relatively slow processes.

25
00:01:11.001 --> 00:01:13.008
There are remote network calls hidden underneath

26
00:01:13.008 --> 00:01:16.002
a network call to a data service.

27
00:01:16.002 --> 00:01:18.009
There's file IO that usually occurs

28
00:01:18.009 --> 00:01:22.000
or copious amounts of ram are at play

29
00:01:22.000 --> 00:01:24.008
to store the database in memory.

30
00:01:24.008 --> 00:01:27.001
There's access issues where large indices

31
00:01:27.001 --> 00:01:29.005
must be crawled to find data.

32
00:01:29.005 --> 00:01:31.002
There's just no denying it.

33
00:01:31.002 --> 00:01:36.000
The data is slow, but despite its performance,

34
00:01:36.000 --> 00:01:39.007
it is critical to the operation of any system.

35
00:01:39.007 --> 00:01:41.003
I have never worked on a system

36
00:01:41.003 --> 00:01:45.006
that did only raw data processing in memory.

37
00:01:45.006 --> 00:01:48.008
There is always a need to store state.

38
00:01:48.008 --> 00:01:51.009
There's always a need to examine store data,

39
00:01:51.009 --> 00:01:53.009
massage it, move it.

40
00:01:53.009 --> 00:01:56.007
It just cannot be removed from the equation

41
00:01:56.007 --> 00:01:59.006
and businesses need it to function.

42
00:01:59.006 --> 00:02:02.005
In addition, it's growing daily.

43
00:02:02.005 --> 00:02:06.004
My first hard drive was an amazing 80 megabytes.

44
00:02:06.004 --> 00:02:08.002
Yes, megabytes.

45
00:02:08.002 --> 00:02:11.007
Today, I have thousands of times more storage

46
00:02:11.007 --> 00:02:14.008
on a flash drive sitting on my desk,

47
00:02:14.008 --> 00:02:18.006
and that is nothing compared to what businesses store.

48
00:02:18.006 --> 00:02:21.002
A simple aircraft flight records

49
00:02:21.002 --> 00:02:24.000
and offloads copious amounts of data

50
00:02:24.000 --> 00:02:27.001
on the performance and maintenance of the airplane.

51
00:02:27.001 --> 00:02:30.006
Businesses want more and more data to be effective,

52
00:02:30.006 --> 00:02:33.003
and this increases the data storage,

53
00:02:33.003 --> 00:02:35.004
which also slows down the writing

54
00:02:35.004 --> 00:02:38.003
and retrieval of data even more.

55
00:02:38.003 --> 00:02:41.000
Sure, we can shard and segment our data,

56
00:02:41.000 --> 00:02:45.007
but I've never seen a database get smaller naturally.

57
00:02:45.007 --> 00:02:47.005
We're going to spend some time talking about

58
00:02:47.005 --> 00:02:49.005
three big areas of data

59
00:02:49.005 --> 00:02:52.000
that can utilize asynchronous messaging

60
00:02:52.000 --> 00:02:55.003
to improve performance, or at the very least,

61
00:02:55.003 --> 00:02:58.007
provide a viable mechanism.

62
00:02:58.007 --> 00:03:01.000
The first is distributed data.

63
00:03:01.000 --> 00:03:04.000
Distributed data usually is talked about globally,

64
00:03:04.000 --> 00:03:05.008
but I'm going to expand that just a little bit

65
00:03:05.008 --> 00:03:08.009
to include separate databases.

66
00:03:08.009 --> 00:03:11.008
We're going to talk about the uses of asynchronous messaging

67
00:03:11.008 --> 00:03:13.008
and eventual consistency

68
00:03:13.008 --> 00:03:17.007
in a traditional distributed database concept.

69
00:03:17.007 --> 00:03:21.001
But I also want to get into a perspective of CQRS

70
00:03:21.001 --> 00:03:24.003
and what it means for microservices architecture

71
00:03:24.003 --> 00:03:27.007
as it tends to draw more attention of developers today,

72
00:03:27.007 --> 00:03:31.001
at least from a theory perspective.

73
00:03:31.001 --> 00:03:33.004
We are then going to discuss a big topic

74
00:03:33.004 --> 00:03:36.000
that applies not only to microservices,

75
00:03:36.000 --> 00:03:37.007
but really, all systems,

76
00:03:37.007 --> 00:03:39.009
and that is data migrations,

77
00:03:39.009 --> 00:03:42.004
where we move data from one data store

78
00:03:42.004 --> 00:03:46.005
to one or more new ones or vice versa.

79
00:03:46.005 --> 00:03:49.005
Asynchronous patterns thrive here.

80
00:03:49.005 --> 00:03:51.006
And finally, I want to talk about one

81
00:03:51.006 --> 00:03:54.000
of the biggest pain points that I have felt

82
00:03:54.000 --> 00:03:57.007
and that is data synchronization between systems

83
00:03:57.007 --> 00:04:00.009
where asynchronous messaging not only thrives,

84
00:04:00.009 --> 00:04:04.000
but it's almost an exclusive implementation.

