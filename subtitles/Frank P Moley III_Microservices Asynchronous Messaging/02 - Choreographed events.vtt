WEBVTT
1
00:00:00.004 --> 00:00:03.001
- [Instructor] Choreographed events, as the name implies,

2
00:00:03.001 --> 00:00:05.009
are much like a dance choreography.

3
00:00:05.009 --> 00:00:09.004
The choreographer lays out the framework for the dance,

4
00:00:09.004 --> 00:00:12.002
but each dancer does his or her part

5
00:00:12.002 --> 00:00:16.004
independent of the choreographers instructions.

6
00:00:16.004 --> 00:00:20.003
In an event-driven, asynchronous microservices pattern

7
00:00:20.003 --> 00:00:24.003
that uses choreographed events, the same holds true.

8
00:00:24.003 --> 00:00:28.006
The choreographer is played by the initializer of the event,

9
00:00:28.006 --> 00:00:32.006
but each step is on its own from there on out.

10
00:00:32.006 --> 00:00:36.007
Let's look at the use cases and then dig in.

11
00:00:36.007 --> 00:00:40.001
There are two distinct use cases that I have seen and used

12
00:00:40.001 --> 00:00:43.000
where event choreography makes sense.

13
00:00:43.000 --> 00:00:46.000
The first, and probably most common,

14
00:00:46.000 --> 00:00:49.003
is when you have different systems in play.

15
00:00:49.003 --> 00:00:51.004
Few of us work in massive teams

16
00:00:51.004 --> 00:00:52.003
that have tentacles

17
00:00:52.003 --> 00:00:55.007
into the entire operations of our company.

18
00:00:55.007 --> 00:01:00.009
As such, silos are often created within the systems.

19
00:01:00.009 --> 00:01:02.004
When you are in this model,

20
00:01:02.004 --> 00:01:05.007
but you have an event that impacts many systems,

21
00:01:05.007 --> 00:01:09.004
it usually makes the most sense to fire an event

22
00:01:09.004 --> 00:01:12.001
and allow the cascade to occur.

23
00:01:12.001 --> 00:01:16.002
The initial event execution will trigger the remote system

24
00:01:16.002 --> 00:01:18.002
to start its own event chain,

25
00:01:18.002 --> 00:01:21.001
as they, in turn, may call on other systems

26
00:01:21.001 --> 00:01:23.005
through events to do the same.

27
00:01:23.005 --> 00:01:26.003
The risks of having any form of coupling

28
00:01:26.003 --> 00:01:27.009
when teams are distinct

29
00:01:27.009 --> 00:01:31.008
are often too great for productivity to warrant

30
00:01:31.008 --> 00:01:34.006
any other model in these cases.

31
00:01:34.006 --> 00:01:37.004
Separate teams have different ways of doing things,

32
00:01:37.004 --> 00:01:41.002
different languages and, often, different processes.

33
00:01:41.002 --> 00:01:45.001
Choreography makes a lot of sense in these scenarios.

34
00:01:45.001 --> 00:01:48.007
The other type of choreographed event that I have used

35
00:01:48.007 --> 00:01:51.005
is when you have alternative cascades.

36
00:01:51.005 --> 00:01:55.001
Now, you could solve this with orchestration,

37
00:01:55.001 --> 00:01:57.006
but often the spaghetti code that this produces

38
00:01:57.006 --> 00:02:00.005
outweighs any of the side effects

39
00:02:00.005 --> 00:02:03.001
of choreographing this event.

40
00:02:03.001 --> 00:02:06.006
In this use case, each step may have results

41
00:02:06.006 --> 00:02:09.003
that trigger more than one next step,

42
00:02:09.003 --> 00:02:11.002
sometimes at once.

43
00:02:11.002 --> 00:02:15.000
As such, the choreography sets the wheels in motion

44
00:02:15.000 --> 00:02:17.009
and each step along the way does its work

45
00:02:17.009 --> 00:02:19.003
and primes the pump

46
00:02:19.003 --> 00:02:22.006
for any alternative steps that may follow.

47
00:02:22.006 --> 00:02:24.008
It's important to note that I'm leaving out

48
00:02:24.008 --> 00:02:27.005
the use of message broker in these cases,

49
00:02:27.005 --> 00:02:29.008
but it isn't because it isn't there.

50
00:02:29.008 --> 00:02:32.002
It's because it adds noise at this point.

51
00:02:32.002 --> 00:02:36.003
The reality is that each step triggers the downstream step

52
00:02:36.003 --> 00:02:39.007
via a message, not a direct call,

53
00:02:39.007 --> 00:02:44.001
in a pure asynchronous microservices model.

54
00:02:44.001 --> 00:02:47.004
Now, let's take a look at this in action.

55
00:02:47.004 --> 00:02:48.007
Keep this model in mind

56
00:02:48.007 --> 00:02:52.000
when we talk about orchestration, especially.

57
00:02:52.000 --> 00:02:54.008
We start with our message broker.

58
00:02:54.008 --> 00:02:57.002
We then have an event producer.

59
00:02:57.002 --> 00:03:01.003
This is what choreographs the event-driven message.

60
00:03:01.003 --> 00:03:02.007
Now in this case,

61
00:03:02.007 --> 00:03:06.007
our choreographed event has three unique steps.

62
00:03:06.007 --> 00:03:10.002
All of these components produce messages for the broker,

63
00:03:10.002 --> 00:03:13.007
consume them, or both.

64
00:03:13.007 --> 00:03:17.007
The message is produced by the event producer.

65
00:03:17.007 --> 00:03:20.005
It is sent to the broker.

66
00:03:20.005 --> 00:03:25.000
It is then read by the first step and work is done.

67
00:03:25.000 --> 00:03:29.004
A new message is sent back to the broker.

68
00:03:29.004 --> 00:03:34.005
That message is read by the next step and executed on.

69
00:03:34.005 --> 00:03:36.004
It then creates a new message

70
00:03:36.004 --> 00:03:39.002
and sends it back to the message broker.

71
00:03:39.002 --> 00:03:43.008
The third step then reads the message and execute on it.

72
00:03:43.008 --> 00:03:45.001
It's really important to note

73
00:03:45.001 --> 00:03:47.005
that the event producer isn't involved

74
00:03:47.005 --> 00:03:50.007
after the initial production of the message.

75
00:03:50.007 --> 00:03:51.008
Now, of course,

76
00:03:51.008 --> 00:03:55.002
this model has some benefits and some trade-offs.

77
00:03:55.002 --> 00:03:56.003
The first benefit

78
00:03:56.003 --> 00:03:59.006
is increased performance over orchestration.

79
00:03:59.006 --> 00:04:02.007
Because you don't have a centralized orchestrator,

80
00:04:02.007 --> 00:04:06.001
the steps don't funnel through a single process.

81
00:04:06.001 --> 00:04:09.007
As such, you can increase performance

82
00:04:09.007 --> 00:04:12.007
by offloading the steps to the message broker.

83
00:04:12.007 --> 00:04:16.007
Each step can be optimized for its sole function,

84
00:04:16.007 --> 00:04:19.004
which is the work to be performed.

85
00:04:19.004 --> 00:04:23.001
You also, because of performance and code complexity,

86
00:04:23.001 --> 00:04:26.002
have a reduced total cost of ownership.

87
00:04:26.002 --> 00:04:30.003
You do, however, remove some reliability in the system.

88
00:04:30.003 --> 00:04:34.000
Since there is no central place to handle error states,

89
00:04:34.000 --> 00:04:38.003
there is more chance that a single event will fail to fire

90
00:04:38.003 --> 00:04:40.007
everywhere that it is needed.

91
00:04:40.007 --> 00:04:44.002
As such, you need to really ensure that error tracking

92
00:04:44.002 --> 00:04:47.009
and DLQs exists in the message broker

93
00:04:47.009 --> 00:04:53.000
to indicate need to address errors in the workflow.

94
00:04:53.000 --> 00:04:57.003
Finally, because there is no centralized orchestrator,

95
00:04:57.003 --> 00:05:00.006
you remove a single point for observability.

96
00:05:00.006 --> 00:05:03.005
This can make determining the status of the event

97
00:05:03.005 --> 00:05:05.007
that much more difficult.

98
00:05:05.007 --> 00:05:07.002
You have to look everywhere

99
00:05:07.002 --> 00:05:09.009
until you find the state of the current message

100
00:05:09.009 --> 00:05:12.003
to really know what's going on.

101
00:05:12.003 --> 00:05:16.000
In addition, because we are in an asynchronous model,

102
00:05:16.000 --> 00:05:20.003
there is also the message broker and each DLQ to look at.

103
00:05:20.003 --> 00:05:23.004
This increase in observability complexity

104
00:05:23.004 --> 00:05:26.004
makes this model sour many people,

105
00:05:26.004 --> 00:05:29.004
but none of this is impossible to deal with,

106
00:05:29.004 --> 00:05:33.000
especially if you have a valid use case for using it.

