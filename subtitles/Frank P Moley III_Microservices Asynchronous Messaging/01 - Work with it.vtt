WEBVTT
1
00:00:00.005 --> 00:00:01.003
- [Frank] So now that we've have gone

2
00:00:01.003 --> 00:00:04.001
through several iterations of asynchronous messaging

3
00:00:04.001 --> 00:00:06.004
in a microservices architecture,

4
00:00:06.004 --> 00:00:08.009
you may want to know what your next steps are.

5
00:00:08.009 --> 00:00:10.000
Before we get there, however,

6
00:00:10.000 --> 00:00:11.007
I'd like to do a little bit of a recap

7
00:00:11.007 --> 00:00:13.008
of what we talked about.

8
00:00:13.008 --> 00:00:16.007
First and foremost, we talked about asynchronous messaging

9
00:00:16.007 --> 00:00:20.008
as a pattern and what it looks like and what it does.

10
00:00:20.008 --> 00:00:23.004
We talked about interservice communication patterns

11
00:00:23.004 --> 00:00:27.005
like point-to-point and pub-sub models.

12
00:00:27.005 --> 00:00:30.001
We then discussed event-driven systems

13
00:00:30.001 --> 00:00:32.002
and the power behind driving events

14
00:00:32.002 --> 00:00:34.004
through asynchronous messaging.

15
00:00:34.004 --> 00:00:36.004
Then we talked about one of my favorite topics,

16
00:00:36.004 --> 00:00:38.005
which is the stream data platform,

17
00:00:38.005 --> 00:00:40.001
and how much power it can bring,

18
00:00:40.001 --> 00:00:43.008
especially in a microservices-based system.

19
00:00:43.008 --> 00:00:45.002
And finally, we talked a little bit about

20
00:00:45.002 --> 00:00:49.003
some of the unique data use cases that really benefit

21
00:00:49.003 --> 00:00:51.009
from an asynchronous messaging platform

22
00:00:51.009 --> 00:00:56.008
that can be provided through microservices architecture.

23
00:00:56.008 --> 00:00:58.007
I would advise you that if you really

24
00:00:58.007 --> 00:01:01.008
want to get good at this, work with it.

25
00:01:01.008 --> 00:01:04.002
Start small.

26
00:01:04.002 --> 00:01:06.001
Build up an asynchronous process

27
00:01:06.001 --> 00:01:08.001
and start playing with all of the things

28
00:01:08.001 --> 00:01:09.004
that come with that.

29
00:01:09.004 --> 00:01:11.006
The error states, the overhead,

30
00:01:11.006 --> 00:01:15.006
as well as the benefits and the improved efficiencies.

31
00:01:15.006 --> 00:01:19.001
Find a pattern that works in your work environment

32
00:01:19.001 --> 00:01:22.009
or your personal environment and execute on it.

33
00:01:22.009 --> 00:01:25.007
Then, as I mentioned previously, watch for errors.

34
00:01:25.007 --> 00:01:27.004
I can't stress this enough.

35
00:01:27.004 --> 00:01:30.009
Errors are critical in an asynchronous messaging platform

36
00:01:30.009 --> 00:01:34.008
and you must identify them and deal with them.

37
00:01:34.008 --> 00:01:38.003
I do want to thank you for your time with me in this course.

38
00:01:38.003 --> 00:01:41.000
This is an architectural shift for many people

39
00:01:41.000 --> 00:01:43.004
and one not to be taken lightly,

40
00:01:43.004 --> 00:01:46.006
so I really do appreciate your time.

41
00:01:46.006 --> 00:01:50.001
I want to offer myself up for any questions you may have.

42
00:01:50.001 --> 00:01:53.006
Please use the Q&A section here on LinkedIn Learning

43
00:01:53.006 --> 00:01:57.004
or reach out to me on Twitter, GitHub or Stack Overflow

44
00:01:57.004 --> 00:02:00.003
under the username fpmoles.

45
00:02:00.003 --> 00:02:02.001
I hope you found value in this course

46
00:02:02.001 --> 00:02:05.004
and can use it to solve some real-world problems

47
00:02:05.004 --> 00:02:08.000
in your microservices-based system.

48
00:02:08.000 --> 00:02:09.000
Thanks again.

