WEBVTT
1
00:00:00.004 --> 00:00:02.003
- [Instructor] Log aggregation is one of those areas

2
00:00:02.003 --> 00:00:06.001
in the stream data platform that we first visit.

3
00:00:06.001 --> 00:00:08.000
When talking about log aggregation,

4
00:00:08.000 --> 00:00:11.006
there are really two separate parts of the process.

5
00:00:11.006 --> 00:00:15.002
Most diagrams only focus on the log aggregation activities

6
00:00:15.002 --> 00:00:17.002
of the message broker itself.

7
00:00:17.002 --> 00:00:21.006
And indeed, it can aggregate logs from various systems,

8
00:00:21.006 --> 00:00:24.007
usually, however, in a raw format.

9
00:00:24.007 --> 00:00:27.008
Transformations, however, are not traditionally done

10
00:00:27.008 --> 00:00:30.002
in the stream data platform itself.

11
00:00:30.002 --> 00:00:32.007
It is usually preferred to keep all logs

12
00:00:32.007 --> 00:00:34.005
in the original format

13
00:00:34.005 --> 00:00:38.008
so as to not lose context or metadata from the log itself.

14
00:00:38.008 --> 00:00:41.006
As such, they become disjointed.

15
00:00:41.006 --> 00:00:44.007
Readability of log messages directly impacts

16
00:00:44.007 --> 00:00:46.006
the utilization of them.

17
00:00:46.006 --> 00:00:48.002
If logs are disjointed

18
00:00:48.002 --> 00:00:50.008
and a human has to piece them together,

19
00:00:50.008 --> 00:00:52.009
points will be lost.

20
00:00:52.009 --> 00:00:55.006
The log aggregation that I'm mostly referring to

21
00:00:55.006 --> 00:00:57.008
is in a consumption engine.

22
00:00:57.008 --> 00:01:01.006
The log messages are transformed into a common format

23
00:01:01.006 --> 00:01:05.002
and shipped to a system designed to provide insight

24
00:01:05.002 --> 00:01:08.000
and readability into the log messages.

25
00:01:08.000 --> 00:01:10.005
A tool like Elastic ELK Stack

26
00:01:10.005 --> 00:01:14.004
is a great place for the outcomes of these messages.

27
00:01:14.004 --> 00:01:18.000
While they can handle real-time log aggregation,

28
00:01:18.000 --> 00:01:21.007
a system designed with a bigger swath of log messages

29
00:01:21.007 --> 00:01:23.009
out of a stream data platform

30
00:01:23.009 --> 00:01:26.004
that has been transformed during shipping

31
00:01:26.004 --> 00:01:29.006
is a powerful operational tool.

32
00:01:29.006 --> 00:01:33.003
Operations can use the data in the aggregator system

33
00:01:33.003 --> 00:01:36.004
to visualize the stream of events that brought about

34
00:01:36.004 --> 00:01:39.009
the need for the operational insight.

35
00:01:39.009 --> 00:01:41.008
Internal log aggregation and processing

36
00:01:41.008 --> 00:01:43.005
are worth mentioning here

37
00:01:43.005 --> 00:01:45.009
because they can be as useful as well

38
00:01:45.009 --> 00:01:47.004
for some of the same uses

39
00:01:47.004 --> 00:01:50.009
that an external log aggregator can be used for.

40
00:01:50.009 --> 00:01:53.005
They're designed to aggregate logs and make decisions

41
00:01:53.005 --> 00:01:57.000
based on the presence or absence of data.

42
00:01:57.000 --> 00:02:00.002
Often, they're used to trigger API calls

43
00:02:00.002 --> 00:02:03.009
to perform some action through synchronous events.

44
00:02:03.009 --> 00:02:07.008
They can also be used to trigger alerts when needed.

45
00:02:07.008 --> 00:02:12.007
Of course, you can do all of this in the external system.

46
00:02:12.007 --> 00:02:16.004
They can also create events through asynchronous messaging.

47
00:02:16.004 --> 00:02:18.009
These events can trigger various functions

48
00:02:18.009 --> 00:02:21.005
throughout the system.

49
00:02:21.005 --> 00:02:25.001
In my opinion, the visualization of log aggregators

50
00:02:25.001 --> 00:02:28.005
is critical to its usefulness.

51
00:02:28.005 --> 00:02:33.000
Visualization improves the human readability of log messages

52
00:02:33.000 --> 00:02:37.003
because, often, we have a message and metadata about it.

53
00:02:37.003 --> 00:02:39.006
The ability to filter on metadata

54
00:02:39.006 --> 00:02:42.004
and only visualize the log message

55
00:02:42.004 --> 00:02:46.001
becomes a huge improvement for human comprehension.

56
00:02:46.001 --> 00:02:49.009
In addition, metadata can help you understand

57
00:02:49.009 --> 00:02:52.006
the real state that the system was in

58
00:02:52.006 --> 00:02:54.009
when the log was produced.

59
00:02:54.009 --> 00:02:57.009
Operations can leverage the visualization of logs

60
00:02:57.009 --> 00:03:02.005
when troubleshooting as well as inspecting system health.

61
00:03:02.005 --> 00:03:05.003
The operational value of visualizations

62
00:03:05.003 --> 00:03:09.001
of aggregated logs cannot be underestimated.

63
00:03:09.001 --> 00:03:11.008
Logs can also be useful in debugging,

64
00:03:11.008 --> 00:03:15.005
especially in a microservices architecture.

65
00:03:15.005 --> 00:03:18.002
The calls are disjointed by their very nature,

66
00:03:18.002 --> 00:03:19.009
and by aggregating the logs,

67
00:03:19.009 --> 00:03:23.002
you get a better picture of the system as a whole.

68
00:03:23.002 --> 00:03:25.004
Debugging multiple remote processes

69
00:03:25.004 --> 00:03:27.008
is hard to say the least,

70
00:03:27.008 --> 00:03:32.003
but logs can help tremendously in producing a simpler path

71
00:03:32.003 --> 00:03:35.003
so that you can target the impacted system

72
00:03:35.003 --> 00:03:37.007
instead of the full call stack.

73
00:03:37.007 --> 00:03:42.005
Visualization just aids in the analysis of logs.

74
00:03:42.005 --> 00:03:45.003
Log visualizations can be tremendously powerful

75
00:03:45.003 --> 00:03:47.008
during refactoring exercises.

76
00:03:47.008 --> 00:03:50.002
They can be a first point of contact,

77
00:03:50.002 --> 00:03:52.005
especially in lower environments

78
00:03:52.005 --> 00:03:54.009
to determining if there are negative impacts

79
00:03:54.009 --> 00:03:59.000
of the refactoring that your testing didn't account for.

80
00:03:59.000 --> 00:04:02.000
I mention this because important, in my opinion,

81
00:04:02.000 --> 00:04:04.004
to build stream data platforms

82
00:04:04.004 --> 00:04:06.007
that read from all environments,

83
00:04:06.007 --> 00:04:09.000
not just production.

