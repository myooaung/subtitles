WEBVTT
1
00:00:00.004 --> 00:00:01.006
- [Instructor] Much of what we've seen

2
00:00:01.006 --> 00:00:04.008
actually includes a little bit of synchronization.

3
00:00:04.008 --> 00:00:07.004
Distributed data's eventual consistency,

4
00:00:07.004 --> 00:00:10.005
and the migration model are prime examples.

5
00:00:10.005 --> 00:00:14.002
I want to talk about it a bit more here however.

6
00:00:14.002 --> 00:00:17.009
You may ask why would we need to synchronize data?

7
00:00:17.009 --> 00:00:21.001
One use case is we have different databases.

8
00:00:21.001 --> 00:00:24.003
Consider a runtime database in a data warehouse

9
00:00:24.003 --> 00:00:27.000
for business intelligence reporting.

10
00:00:27.000 --> 00:00:29.009
These databases need to stay in sync,

11
00:00:29.009 --> 00:00:33.000
but the BI system doesn't need to be synchronous

12
00:00:33.000 --> 00:00:35.001
in getting its data.

13
00:00:35.001 --> 00:00:37.000
Another, and one that I have used

14
00:00:37.000 --> 00:00:39.002
a lot with NoSQL databases,

15
00:00:39.002 --> 00:00:41.005
is differing systems.

16
00:00:41.005 --> 00:00:45.000
Because NoSQL indices tend to be a weak spot,

17
00:00:45.000 --> 00:00:48.005
I've used synchronization to keep a search engine

18
00:00:48.005 --> 00:00:51.006
in sync with the database itself so that I have a place

19
00:00:51.006 --> 00:00:55.005
to execute complex queries as necessary.

20
00:00:55.005 --> 00:00:58.004
While there are for sure many other use cases,

21
00:00:58.004 --> 00:01:01.001
these are the two that I have most often used,

22
00:01:01.001 --> 00:01:05.004
and really, the model is the same for all use cases.

23
00:01:05.004 --> 00:01:06.009
A little bit of a warning here.

24
00:01:06.009 --> 00:01:10.002
There's a lot of overhead in keeping data in sync.

25
00:01:10.002 --> 00:01:13.006
We have to build the system to not only keep in sync,

26
00:01:13.006 --> 00:01:17.008
but also ensure that it stays in sync.

27
00:01:17.008 --> 00:01:19.001
Now as I present this model,

28
00:01:19.001 --> 00:01:22.006
I'm going to do so in an overly simplified fashion.

29
00:01:22.006 --> 00:01:24.000
I am leaving out components

30
00:01:24.000 --> 00:01:27.003
because they at this point are redundant.

31
00:01:27.003 --> 00:01:29.000
So we start with the source system,

32
00:01:29.000 --> 00:01:31.002
which is usually a database.

33
00:01:31.002 --> 00:01:34.000
We then introduce the destination system,

34
00:01:34.000 --> 00:01:36.007
which may be another database, a search engine,

35
00:01:36.007 --> 00:01:39.006
a cache, or anything else really.

36
00:01:39.006 --> 00:01:42.008
Now we add our friend the message broker.

37
00:01:42.008 --> 00:01:45.008
A trigger from the source system puts a message

38
00:01:45.008 --> 00:01:49.000
on the broker via a producer.

39
00:01:49.000 --> 00:01:51.004
A consumer picks up the message

40
00:01:51.004 --> 00:01:53.004
and either reads it from source

41
00:01:53.004 --> 00:01:58.003
or just processes the message depending on the completeness.

42
00:01:58.003 --> 00:02:01.006
Some technologies work better with small messages.

43
00:02:01.006 --> 00:02:04.007
So often, you will post an ID only

44
00:02:04.007 --> 00:02:07.008
and allow the consumer to query the database

45
00:02:07.008 --> 00:02:10.004
as we saw with the migration model.

46
00:02:10.004 --> 00:02:13.001
It pushes the message to the destination,

47
00:02:13.001 --> 00:02:16.001
usually via an API.

48
00:02:16.001 --> 00:02:19.001
Now you aren't really done here as I mentioned before.

49
00:02:19.001 --> 00:02:20.007
You need something to make sure

50
00:02:20.007 --> 00:02:23.007
that all the data is indeed in sync.

51
00:02:23.007 --> 00:02:25.009
Enter in the watcher.

52
00:02:25.009 --> 00:02:29.004
Its purpose is to routinely evaluate data

53
00:02:29.004 --> 00:02:33.008
in both systems to ensure that they are in sync.

54
00:02:33.008 --> 00:02:37.009
For most cases, they will be, and they just simply know op,

55
00:02:37.009 --> 00:02:40.006
but if it finds a discrepancy,

56
00:02:40.006 --> 00:02:45.002
it needs to trust the source system or the original database

57
00:02:45.002 --> 00:02:48.003
and push a message back through the producer

58
00:02:48.003 --> 00:02:51.000
to update the destination.

