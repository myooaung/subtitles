WEBVTT
1
00:00:00.004 --> 00:00:02.001
- [Instructor] Event detection and reactions

2
00:00:02.001 --> 00:00:05.004
are some of the coolest parts of a stream data platform

3
00:00:05.004 --> 00:00:08.003
that I've been involved at at any level.

4
00:00:08.003 --> 00:00:09.009
I just want to briefly discuss it

5
00:00:09.009 --> 00:00:11.005
because I feel that that provides

6
00:00:11.005 --> 00:00:15.004
some of the most positive experiences for a developer.

7
00:00:15.004 --> 00:00:19.002
The use cases for inventing can be pretty wide open.

8
00:00:19.002 --> 00:00:21.007
There's always a need for real time reactions

9
00:00:21.007 --> 00:00:24.000
to behavior on the system.

10
00:00:24.000 --> 00:00:26.004
The power really comes from finding the value

11
00:00:26.004 --> 00:00:28.004
for investing in the event,

12
00:00:28.004 --> 00:00:31.006
and then optimizing on that value.

13
00:00:31.006 --> 00:00:34.001
One of the first use cases I was involved with,

14
00:00:34.001 --> 00:00:36.006
and definitely one that makes a lot of sense

15
00:00:36.006 --> 00:00:39.002
is stopping bad behavior.

16
00:00:39.002 --> 00:00:43.001
Obviously this can span from operational runtime issues

17
00:00:43.001 --> 00:00:46.001
to bad actors attacking systems,

18
00:00:46.001 --> 00:00:49.005
which is where I was first introduced to this model.

19
00:00:49.005 --> 00:00:52.002
Some members of my team built a system

20
00:00:52.002 --> 00:00:55.005
where patterns had been identified through analytics.

21
00:00:55.005 --> 00:00:58.004
They then created real time analytics jobs

22
00:00:58.004 --> 00:01:00.006
within the stream gate of platform

23
00:01:00.006 --> 00:01:03.000
when bad actor events occurred.

24
00:01:03.000 --> 00:01:05.005
And this triggered a system event

25
00:01:05.005 --> 00:01:08.007
that alerted the security operation center.

26
00:01:08.007 --> 00:01:11.002
Another and more positive use case

27
00:01:11.002 --> 00:01:14.001
is to use event data to trigger positive reactions

28
00:01:14.001 --> 00:01:15.009
in the system.

29
00:01:15.009 --> 00:01:19.002
Consider for a moment, a valid use case I've read about

30
00:01:19.002 --> 00:01:23.001
where a company offered two discount codes at random.

31
00:01:23.001 --> 00:01:26.003
They built an engine that evaluated the engagement rate

32
00:01:26.003 --> 00:01:29.008
on the two codes for analytics purposes.

33
00:01:29.008 --> 00:01:32.002
Now, if they had been using an event engine,

34
00:01:32.002 --> 00:01:35.008
they could have triggered a reaction based on this data.

35
00:01:35.008 --> 00:01:38.005
They found that a 10% discount rate

36
00:01:38.005 --> 00:01:42.004
was actually more successful than a 15% rate

37
00:01:42.004 --> 00:01:44.008
in getting customers to engage.

38
00:01:44.008 --> 00:01:46.005
The assumption here was that the math

39
00:01:46.005 --> 00:01:50.001
was easier to calculate and inventing engine

40
00:01:50.001 --> 00:01:52.005
that triggered from the analytics data

41
00:01:52.005 --> 00:01:55.005
could have immediately flexed the discount rate

42
00:01:55.005 --> 00:01:59.006
based on engagement to find that sweet spot.

43
00:01:59.006 --> 00:02:03.007
This again is the power of this process immediate reactions,

44
00:02:03.007 --> 00:02:06.006
the implementation of the event can be synchronous

45
00:02:06.006 --> 00:02:09.009
or asynchronous, it really doesn't matter.

46
00:02:09.009 --> 00:02:12.002
The key here is that all of this analytics data

47
00:02:12.002 --> 00:02:14.002
out of a stream data platform

48
00:02:14.002 --> 00:02:17.008
can actually be used to trigger real time events

49
00:02:17.008 --> 00:02:19.006
not only for people to look at,

50
00:02:19.006 --> 00:02:23.000
but for the system to actually heal itself.

