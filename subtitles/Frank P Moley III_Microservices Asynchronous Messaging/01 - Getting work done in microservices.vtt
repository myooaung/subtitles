WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Frank] In a microservices architecture,

2
00:00:02.006 --> 00:00:05.002
we usually are dealing with restful calls

3
00:00:05.002 --> 00:00:07.006
between autonomous services in order

4
00:00:07.006 --> 00:00:10.004
to execute actions across our systems.

5
00:00:10.004 --> 00:00:14.002
However, there is another way to handle communications

6
00:00:14.002 --> 00:00:16.004
in a microservices architecture,

7
00:00:16.004 --> 00:00:19.004
and that is through asynchronous messaging.

8
00:00:19.004 --> 00:00:21.001
Oftentimes, when you're working

9
00:00:21.001 --> 00:00:23.009
with large scale deployments of systems,

10
00:00:23.009 --> 00:00:27.001
you need to define a way to get real work done

11
00:00:27.001 --> 00:00:31.000
often behind-the-scenes and always with minimal strain

12
00:00:31.000 --> 00:00:34.009
on the day-to-day operations of the system as a whole.

13
00:00:34.009 --> 00:00:38.004
Here we begin the journey of asynchronous communications

14
00:00:38.004 --> 00:00:41.007
to get work done and, most often,

15
00:00:41.007 --> 00:00:44.000
this is accomplished through messaging.

16
00:00:44.000 --> 00:00:47.005
Hi, my name is Frank Moley, I'm a developer,

17
00:00:47.005 --> 00:00:49.008
architect, teacher, and student,

18
00:00:49.008 --> 00:00:52.004
who has been active in cloud native development,

19
00:00:52.004 --> 00:00:55.005
and architectures for some time now.

20
00:00:55.005 --> 00:00:59.001
I have helped build large multi data center,

21
00:00:59.001 --> 00:01:01.007
and multi cloud systems that were

22
00:01:01.007 --> 00:01:05.000
often asynchronous messaging patterns have been used

23
00:01:05.000 --> 00:01:07.003
to keep the system at peak shape,

24
00:01:07.003 --> 00:01:11.000
as well as compliant with all legal regulations.

25
00:01:11.000 --> 00:01:13.005
In this course, I want to share with you

26
00:01:13.005 --> 00:01:16.008
why there is more to microservices architectures

27
00:01:16.008 --> 00:01:21.001
than just restful API calls over HTTP,

28
00:01:21.001 --> 00:01:24.004
and how understanding asynchronous messaging

29
00:01:24.004 --> 00:01:29.000
can often improve your efficiencies at getting work done.

