WEBVTT
1
00:00:00.000 --> 00:00:01.009
- [Instructor] Orchestrated events,

2
00:00:01.009 --> 00:00:03.005
as I previously mentioned,

3
00:00:03.005 --> 00:00:05.001
are a much more common pattern

4
00:00:05.001 --> 00:00:09.002
within the asynchronous, event-driven microservices model.

5
00:00:09.002 --> 00:00:11.006
The command and control they offer makes sense,

6
00:00:11.006 --> 00:00:15.000
in a lot of architectural decisions that are attractive

7
00:00:15.000 --> 00:00:19.000
to software architects, as well as developers.

8
00:00:19.000 --> 00:00:21.003
There are a lot of use cases for orchestrated events,

9
00:00:21.003 --> 00:00:24.005
but I want to talk about a few that I've personally used

10
00:00:24.005 --> 00:00:26.007
in a microservices architecture,

11
00:00:26.007 --> 00:00:30.005
leveraging event driven asynchronous communications.

12
00:00:30.005 --> 00:00:33.004
I tend to call the orchestrator either that or the command

13
00:00:33.004 --> 00:00:35.009
and control center, both are appropriate,

14
00:00:35.009 --> 00:00:38.006
so please keep that in mind.

15
00:00:38.006 --> 00:00:42.002
The first case is when there's sequential processing.

16
00:00:42.002 --> 00:00:44.003
Now this can be anything from a loan application

17
00:00:44.003 --> 00:00:46.002
to a registration event.

18
00:00:46.002 --> 00:00:49.002
In this situation, the need to dispatch messages

19
00:00:49.002 --> 00:00:51.005
intended for remote workers,

20
00:00:51.005 --> 00:00:54.006
depends on the current state of the system.

21
00:00:54.006 --> 00:00:57.006
You cannot approve a loan for a customer for instance,

22
00:00:57.006 --> 00:01:00.002
before the credit report is returned.

23
00:01:00.002 --> 00:01:02.009
The credit score is critical piece of data

24
00:01:02.009 --> 00:01:04.006
before the approval process

25
00:01:04.006 --> 00:01:07.008
and as such the command and control center

26
00:01:07.008 --> 00:01:11.006
must ensure it has a response on the credit score

27
00:01:11.006 --> 00:01:14.001
before triggering downstream actions.

28
00:01:14.001 --> 00:01:18.002
Again, in this model, all communications is asynchronous,

29
00:01:18.002 --> 00:01:20.006
but the producer of the original message

30
00:01:20.006 --> 00:01:25.001
becomes a consumer on the response.

31
00:01:25.001 --> 00:01:26.001
The next use case,

32
00:01:26.001 --> 00:01:28.003
and the one that I've used the most

33
00:01:28.003 --> 00:01:30.009
is the command workflow scenario.

34
00:01:30.009 --> 00:01:34.008
Consider for a moment, the need to allocate infrastructure,

35
00:01:34.008 --> 00:01:38.001
before installing Kubernetes into a cloud provider

36
00:01:38.001 --> 00:01:40.002
in an automated fashion.

37
00:01:40.002 --> 00:01:41.009
You can make direct calls,

38
00:01:41.009 --> 00:01:44.005
but often the blocking nature of those calls

39
00:01:44.005 --> 00:01:47.002
hinders the throughput of the system.

40
00:01:47.002 --> 00:01:51.008
As such, you can dispatch the event to a worker process.

41
00:01:51.008 --> 00:01:55.005
The worker does its work, say provision virtual machines.

42
00:01:55.005 --> 00:01:58.002
And when it is done, sends a response message

43
00:01:58.002 --> 00:02:02.004
back to the intended command and control center.

44
00:02:02.004 --> 00:02:05.000
Once it has the infrastructure it needs,

45
00:02:05.000 --> 00:02:07.006
it can then dispatch another message

46
00:02:07.006 --> 00:02:10.006
to install Kubernetes to another worker,

47
00:02:10.006 --> 00:02:12.003
providing the connection details

48
00:02:12.003 --> 00:02:15.003
of the newly created virtual machines.

49
00:02:15.003 --> 00:02:18.000
This model allows for many Kubernetes clusters

50
00:02:18.000 --> 00:02:22.001
to be spun up at once through a single orchestrator call,

51
00:02:22.001 --> 00:02:26.009
since the calls become non-blocking asynchronous messages.

52
00:02:26.009 --> 00:02:28.005
The examples are endless here,

53
00:02:28.005 --> 00:02:31.000
but the pattern should be clear.

54
00:02:31.000 --> 00:02:34.001
The final use case exists in almost every other use case

55
00:02:34.001 --> 00:02:38.005
for orchestrated events, and that is a response required.

56
00:02:38.005 --> 00:02:40.008
Anytime you are doing asynchronous messaging

57
00:02:40.008 --> 00:02:44.003
and you need a response, be it for sequential processing,

58
00:02:44.003 --> 00:02:47.004
command workflows or other use cases,

59
00:02:47.004 --> 00:02:49.008
the orchestrator can be the point,

60
00:02:49.008 --> 00:02:52.005
where this response structure exists.

61
00:02:52.005 --> 00:02:55.002
It will usually aggregate all of the responses

62
00:02:55.002 --> 00:02:58.004
into a master status that is available,

63
00:02:58.004 --> 00:03:00.007
to any system interested.

64
00:03:00.007 --> 00:03:03.005
Most often the event originator.

65
00:03:03.005 --> 00:03:06.005
Each step can respond to the orchestrator via messaging

66
00:03:06.005 --> 00:03:10.000
as needed, but the master response will be aggregated

67
00:03:10.000 --> 00:03:12.004
in this model.

68
00:03:12.004 --> 00:03:14.006
This process is a little more intensive

69
00:03:14.006 --> 00:03:16.002
than the choreographed model.

70
00:03:16.002 --> 00:03:18.002
So let's walk through it.

71
00:03:18.002 --> 00:03:21.002
Once again, we start with a message broker.

72
00:03:21.002 --> 00:03:23.002
We then have an orchestrator.

73
00:03:23.002 --> 00:03:25.006
It knows about the message broker.

74
00:03:25.006 --> 00:03:28.000
We also have an event producer.

75
00:03:28.000 --> 00:03:29.000
In this diagram,

76
00:03:29.000 --> 00:03:33.004
it will make an asynchronous restful call over HHTP.

77
00:03:33.004 --> 00:03:35.004
We then have several steps,

78
00:03:35.004 --> 00:03:39.003
each of those steps knows about the message broker.

79
00:03:39.003 --> 00:03:43.000
The event producer makes a call to the orchestrator.

80
00:03:43.000 --> 00:03:46.005
It creates a message and sends it to the broker.

81
00:03:46.005 --> 00:03:49.007
The broker then exposes the message for the first step,

82
00:03:49.007 --> 00:03:52.006
which receives the message and does work.

83
00:03:52.006 --> 00:03:53.005
When it's done,

84
00:03:53.005 --> 00:03:55.008
it sends a message back to the message broker,

85
00:03:55.008 --> 00:03:58.001
which the orchestrator receives.

86
00:03:58.001 --> 00:04:00.000
All the while the poller,

87
00:04:00.000 --> 00:04:04.004
maybe polling the orchestrator for a response.

88
00:04:04.004 --> 00:04:11.005
This process continues until all of our work is done.

89
00:04:11.005 --> 00:04:14.003
When finished the polling will succeed

90
00:04:14.003 --> 00:04:19.002
and the entire work is done for our system.

91
00:04:19.002 --> 00:04:22.001
Now of course this model has some benefits

92
00:04:22.001 --> 00:04:23.009
and some trade-offs.

93
00:04:23.009 --> 00:04:26.003
The first trade-off is decreased performance

94
00:04:26.003 --> 00:04:28.000
or choreography.

95
00:04:28.000 --> 00:04:30.004
Because you have a centralized orchestrator,

96
00:04:30.004 --> 00:04:33.004
the steps funnel through a single process.

97
00:04:33.004 --> 00:04:36.009
As such you decrease performance.

98
00:04:36.009 --> 00:04:40.005
Now the orchestrator must have a state machine of some kind

99
00:04:40.005 --> 00:04:42.008
to keep track of the status responses

100
00:04:42.008 --> 00:04:47.001
and code paths that handle the downstream actions.

101
00:04:47.001 --> 00:04:50.002
This all increases the total cost of ownership.

102
00:04:50.002 --> 00:04:52.003
The orchestrator needs to be beefier

103
00:04:52.003 --> 00:04:55.008
and often needs to have much more complex code.

104
00:04:55.008 --> 00:05:00.003
These costs in both operations and developer efficiencies.

105
00:05:00.003 --> 00:05:02.008
Because of the centralized control however,

106
00:05:02.008 --> 00:05:05.004
you increase your reliability.

107
00:05:05.004 --> 00:05:09.002
The orchestrator can use its state to resubmit jobs

108
00:05:09.002 --> 00:05:11.003
that need to be processed.

109
00:05:11.003 --> 00:05:14.007
You can also build in much more robust error handling

110
00:05:14.007 --> 00:05:17.001
for outlier conditions.

111
00:05:17.001 --> 00:05:19.009
This centralized controller becomes the sweet spot

112
00:05:19.009 --> 00:05:21.009
for observability.

113
00:05:21.009 --> 00:05:24.008
While you still have disjointed processes

114
00:05:24.008 --> 00:05:28.002
that aren't solved in this model for observability,

115
00:05:28.002 --> 00:05:31.007
this central point can produce more logging and metrics

116
00:05:31.007 --> 00:05:34.000
that can help an operations team.

