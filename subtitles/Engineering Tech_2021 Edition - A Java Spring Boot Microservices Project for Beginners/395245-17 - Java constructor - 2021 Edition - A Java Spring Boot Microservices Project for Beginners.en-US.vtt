WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:04.905
A constructor is a method with the same name is that glass,

00:00:04.905 --> 00:00:06.390
but with no return type.

00:00:06.390 --> 00:00:08.820
Whenever we instantiate a class,

00:00:08.820 --> 00:00:11.710
the constructor gets invoked.

00:00:12.140 --> 00:00:15.370
Let's see how that works.

00:00:15.620 --> 00:00:18.464
So far in all class definitions,

00:00:18.464 --> 00:00:20.670
the default constructor is hidden.

00:00:20.670 --> 00:00:27.150
Default constructor is a method with the same name as the class.

00:00:27.150 --> 00:00:31.510
So this is the default constructor that is hidden.

00:00:32.780 --> 00:00:36.580
Let's artist system or treatment here.

00:00:41.260 --> 00:00:44.240
Whenever we are initializing a class,

00:00:44.240 --> 00:00:46.010
dog equals new dog,

00:00:46.010 --> 00:00:47.930
the default constructor is getting invoke.

00:00:47.930 --> 00:00:54.395
Let's run it now. We can see that I am a dog is getting printed.

00:00:54.395 --> 00:00:56.915
The default constructor was always there,

00:00:56.915 --> 00:00:59.150
just that we're not using it.

00:00:59.150 --> 00:01:03.650
Typically used constructors to initialize class-level variables.

00:01:03.650 --> 00:01:07.050
For example, we can have a name variable here.

00:01:09.880 --> 00:01:15.389
And we can initialize died within the constructor.

00:01:22.360 --> 00:01:25.235
And we can use it.

00:01:25.235 --> 00:01:28.410
In other methods within the class.

00:01:30.970 --> 00:01:37.080
Will say My name is whatever is the name.

00:01:37.870 --> 00:01:41.510
We'll run it again. We can see that

00:01:41.510 --> 00:01:45.800
the name variable is getting any cell-based and date is getting printed here.

00:01:45.800 --> 00:01:50.040
You can also do constructor overloading in Java.

00:01:51.340 --> 00:01:56.015
You can have constructor with different signature,

00:01:56.015 --> 00:01:59.580
but the name has to match with the class name.

00:02:00.700 --> 00:02:03.770
Now we are passing name.

00:02:03.770 --> 00:02:07.340
And whatever name we pass based on that,

00:02:07.340 --> 00:02:09.690
the name will get decided.

00:02:09.970 --> 00:02:13.205
And wailing walking dog.

00:02:13.205 --> 00:02:21.050
Let's say Mike will run it. So disdain.

00:02:21.050 --> 00:02:23.135
And the class gets instantiated.

00:02:23.135 --> 00:02:25.535
This constructor will get invoked.

00:02:25.535 --> 00:02:27.680
The default will not graded work.

00:02:27.680 --> 00:02:36.155
So you should see my name is make it printed nal.

00:02:36.155 --> 00:02:44.880
Let's check it out. That's because we did not populate name variable.

00:02:46.540 --> 00:02:52.310
Now let's give the parameter a different name and this is the class level variable.

00:02:52.310 --> 00:02:58.490
Later, we'll understand how to have the same name and distinguishes class level variable.

00:02:58.490 --> 00:03:00.485
We did this skewered.

00:03:00.485 --> 00:03:07.595
We'll run it again. So now Mike is getting pinned down.

00:03:07.595 --> 00:03:11.150
So this is how you can overload constructors.

00:03:11.150 --> 00:03:12.800
And depending on your use case,

00:03:12.800 --> 00:03:15.840
you can use a particular constructor.
