WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.980
Welcome back or let's understand,

00:00:02.980 --> 00:00:06.510
Java under obeisance you for new to programming.

00:00:06.510 --> 00:00:09.390
You might find it a little hard to understand.

00:00:09.390 --> 00:00:10.250
Initially,

00:00:10.250 --> 00:00:10.940
however,

00:00:10.940 --> 00:00:14.050
annotations simply five job programming quite a bit.

00:00:14.050 --> 00:00:17.960
I don't Patients are used to provide additional information.

00:00:17.960 --> 00:00:18.870
Toe classes,

00:00:18.870 --> 00:00:19.420
metres,

00:00:19.420 --> 00:00:20.130
variables,

00:00:20.130 --> 00:00:21.350
constructor.

00:00:21.350 --> 00:00:26.850
You tell the job program classmethod variable to behave in a certain way.

00:00:26.850 --> 00:00:31.150
The best way to understand annotation is by looking at an example.

00:00:31.150 --> 00:00:36.850
Let's jump in and create a new project in intelligence created huge our project.

00:00:36.850 --> 00:00:40.720
Give it the name our animation demo finish.

00:00:40.720 --> 00:00:43.090
I want to go to the project view.

00:00:43.090 --> 00:00:49.010
Let's globalize ourself for that and create a new Java class with Limited is animation

00:00:49.010 --> 00:00:52.040
example to gender Public static Wardman matter.

00:00:52.040 --> 00:00:53.270
Simply type PSV,

00:00:53.270 --> 00:00:53.400
um,

00:00:53.400 --> 00:00:54.190
and hit tab.

00:00:54.190 --> 00:00:55.650
You'll get the court.

00:00:55.650 --> 00:01:01.190
Let's hard another class called animal class.

00:01:01.190 --> 00:01:04.950
We'll have a simple speak mattered within animal class.

00:01:04.950 --> 00:01:07.850
Let's start a system or statement.

00:01:07.850 --> 00:01:12.360
Let's add a dog class,

00:01:12.360 --> 00:01:14.150
which will inherit from the animal class.

00:01:14.150 --> 00:01:19.170
Dog extends any month and ever different system.

00:01:19.170 --> 00:01:20.450
Elon's statement.

00:01:20.450 --> 00:01:21.580
Now,

00:01:21.580 --> 00:01:24.500
let's instance it the dog class and involved the speedometer.

00:01:24.500 --> 00:01:31.800
So this one served the involved a speak matter of the dog class because we were worried in

00:01:31.800 --> 00:01:33.380
that In the dock class,

00:01:33.380 --> 00:01:35.150
Footprints dog is expected.

00:01:35.150 --> 00:01:38.910
But what if there is a typo in the middle name?

00:01:38.910 --> 00:01:41.030
Let's say we father toe right,

00:01:41.030 --> 00:01:41.580
speak.

00:01:41.580 --> 00:01:42.650
And then there's a table.

00:01:42.650 --> 00:01:48.620
It's only during the run time that will realize that it's invoking the animal method by

00:01:48.620 --> 00:01:52.900
mistake to enforce the dark last overrate,

00:01:52.900 --> 00:01:53.710
the speak method.

00:01:53.710 --> 00:01:54.970
We can use an annotation.

00:01:54.970 --> 00:01:57.460
We can just simply rate the rate overrate.

00:01:57.460 --> 00:01:58.860
Then this method,

00:01:58.860 --> 00:02:02.450
sure over raid one of the methods in animal class.

00:02:02.450 --> 00:02:05.340
That's the way appealing the compiler there.

00:02:05.340 --> 00:02:06.870
This matter should operator in the middle,

00:02:06.870 --> 00:02:10.350
and it doesn't find the matter with the is capital piece or given it up.

00:02:10.350 --> 00:02:12.070
You change that run fine.

00:02:12.070 --> 00:02:16.920
So by using the override an impatient we're able to tell the compiler for the speak

00:02:16.920 --> 00:02:17.350
maturity,

00:02:17.350 --> 00:02:19.250
the dog class to behave in a certain way.

00:02:19.250 --> 00:02:21.510
Now it prints Dog is expected.

00:02:21.510 --> 00:02:27.190
You just saw an example of how to tell the Compiler hotel a method to behave in a certain

00:02:27.190 --> 00:02:27.390
way,

00:02:27.390 --> 00:02:29.690
academic class to be even that certainly,

00:02:29.690 --> 00:02:32.150
and we achieved that through an innovation.

00:02:32.150 --> 00:02:38.230
You'll find many examples up annotation in spring framework and in spring book whose you're

00:02:38.230 --> 00:02:39.510
going to discuss next.

00:02:39.510 --> 00:02:44.850
It could be a little challenging for you to initially understand why we are doing

00:02:44.850 --> 00:02:47.100
annotations or why we're writing a vision.

00:02:47.100 --> 00:02:50.550
It's actually it simplifies a lot of things for the developers.

00:02:50.550 --> 00:02:55.500
You do not have to really worry about what is happening there and annotations how the

00:02:55.500 --> 00:02:57.750
quarter configurations are getting generated.

00:02:57.750 --> 00:03:02.480
All you need to understand is a big note or is a person who is new to spring.

00:03:02.480 --> 00:03:03.250
For Marcus,

00:03:03.250 --> 00:03:08.660
the class are the metal where you see that rotation is expected to behave in a particular

00:03:08.660 --> 00:03:09.000
way,

00:03:09.000 --> 00:03:13.530
and you go and read more about the documentation of that particular irritation.

00:03:13.530 --> 00:03:16.750
With also explained that there during the course of the lab.

00:03:16.750 --> 00:03:22.050
So that is the best way to get started with innovations in spring framework.

00:03:22.050 --> 00:03:23.760
Prior to annotations,

00:03:23.760 --> 00:03:27.330
we used to do all configuration in spring framework in the XML file,

00:03:27.330 --> 00:03:29.350
which was kind of quite tedious,

00:03:29.350 --> 00:03:31.400
and developers did not like it,

00:03:31.400 --> 00:03:34.150
and annotations simplifies a lot of things.

00:03:34.150 --> 00:03:35.750
Those were completely new.

00:03:35.750 --> 00:03:41.100
Plantations need not try to understand house being used to work in the older days because

00:03:41.100 --> 00:03:43.210
annotation has married simply for you.

00:03:43.210 --> 00:03:44.660
So if we're just getting started,

00:03:44.660 --> 00:03:48.160
just get used to the fact that there will be a lot of annotations.

00:03:48.160 --> 00:03:53.810
An annotation will tell particular classmethod are construct variable to behave in a

00:03:53.810 --> 00:03:54.380
certain way.

00:03:54.380 --> 00:03:55.610
Just accept that.

00:03:55.610 --> 00:04:00.540
And then I think gradually you'll get the more understanding of annotations.

00:04:00.540 --> 00:04:05.850
And then you can appreciate how it simplifies the overall programming fourth Cartel Oppa's

00:04:05.850 --> 00:04:05.850
.

00:04:05.850 --> 00:04:07.800
And it mentioned I lived.

00:04:07.800 --> 00:04:11.700
The complexity of all the court and configuration is hidden from you.

00:04:11.700 --> 00:04:13.160
It is there in the framework,

00:04:13.160 --> 00:04:16.040
in form of Java class or libraries.

00:04:16.040 --> 00:04:18.350
But then is an individual today.

00:04:18.350 --> 00:04:19.110
Is it?

00:04:19.110 --> 00:04:23.560
A leopard wanted to focus on writing business logic just your used annotation,

00:04:23.560 --> 00:04:27.720
and you can expect the method of class to behave in a certain way.

00:04:27.720 --> 00:04:30.260
So that's the best way to get started with annotations.

00:04:30.260 --> 00:04:32.850
So let's land spring from work next,

00:04:32.850 --> 00:04:37.750
and you'll see plenty of annotations in almost all the examples that we see.

00:04:37.750 --> 00:04:42.920
And we try to explain the concept windows ambition so that it would be simple and easy for

00:04:42.920 --> 00:04:43.600
you to understand.

00:04:43.600 --> 00:04:45.050
Thank you very much

