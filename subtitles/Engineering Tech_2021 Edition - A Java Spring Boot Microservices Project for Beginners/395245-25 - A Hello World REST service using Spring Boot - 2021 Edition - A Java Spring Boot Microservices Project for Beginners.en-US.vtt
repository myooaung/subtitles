WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.220 --> 00:00:05.265
Let's build our first springboard up in this lab.

00:00:05.265 --> 00:00:07.180
We'll go to Start dots sprinkled.

00:00:07.180 --> 00:00:13.305
Do Note that the interfaces changed lately as of January 2021.

00:00:13.305 --> 00:00:17.415
However, the steps to create a project are pretty much the same.

00:00:17.415 --> 00:00:21.570
You select dependencies here and specify all project material,

00:00:21.570 --> 00:00:23.490
the information in this section,

00:00:23.490 --> 00:00:27.100
and then you pick gender can create a project.

00:00:27.440 --> 00:00:30.360
The default project tape is Maven,

00:00:30.360 --> 00:00:34.755
and we'll be using Maven for build and dependency management in this course.

00:00:34.755 --> 00:00:37.110
Using Maven, we can easily manage

00:00:37.110 --> 00:00:42.125
all project dependencies and build a project and created deployable jar file,

00:00:42.125 --> 00:00:44.375
which can be taken to any environment.

00:00:44.375 --> 00:00:48.365
We'll talk more about May one later in the course.

00:00:48.365 --> 00:00:50.810
So for now let's select product tables.

00:00:50.810 --> 00:00:52.835
May 1 languages, Java,

00:00:52.835 --> 00:00:54.620
and whatever spin would worsen.

00:00:54.620 --> 00:00:56.340
We see here.

00:00:56.530 --> 00:01:01.320
Group name is the root package name for your project.

00:01:02.740 --> 00:01:08.520
I limited com dot future x-dot microservices.

00:01:11.470 --> 00:01:14.000
Artifact mimics the project.

00:01:14.000 --> 00:01:21.650
Mmm, let's call it spring HelloWorld description.

00:01:21.650 --> 00:01:23.180
You can leave it default.

00:01:23.180 --> 00:01:25.865
And the package name is group name,

00:01:25.865 --> 00:01:28.175
including the project name.

00:01:28.175 --> 00:01:31.160
Let's select Java eight here.

00:01:31.160 --> 00:01:34.820
And after that, we need to add dependencies.

00:01:34.820 --> 00:01:38.105
Since we are learning microservices In this course,

00:01:38.105 --> 00:01:44.270
we'll start out springboard journey with a simple rest service, search for riskier.

00:01:44.270 --> 00:01:47.765
We can see Spring Web dependency at the top.

00:01:47.765 --> 00:01:52.760
Using spring where we can build websites and also RESTful web services.

00:01:52.760 --> 00:01:56.165
You can also build wrestler EPA's using risks repository.

00:01:56.165 --> 00:02:02.340
For now let's select only splitting web and create a project.

00:02:02.830 --> 00:02:06.170
Select data and agenda the project,

00:02:06.170 --> 00:02:09.390
Clicking on that gender button here.

00:02:10.210 --> 00:02:14.720
Spring Boot creates a startup project based on these options.

00:02:14.720 --> 00:02:19.620
And when you gender it creates a zip file which gets downloaded.

00:02:19.720 --> 00:02:23.310
Let's unzip this fail.

00:02:26.590 --> 00:02:30.930
So let's open IntelliJ J and Lord this project.

00:02:35.410 --> 00:02:44.630
Go to File New Project from existing source and select

00:02:44.630 --> 00:02:45.920
the project route

00:02:45.920 --> 00:02:56.460
directly. Click next.

00:02:57.520 --> 00:03:00.080
It picked up the project name.

00:03:00.080 --> 00:03:04.260
The project name is by default whatever is the root directory name.

00:03:06.400 --> 00:03:11.310
You can keep everything as depart can click Next.

00:03:13.030 --> 00:03:20.360
Next again. And we'll select

00:03:20.360 --> 00:03:27.645
JDK 1.8. Click Next.

00:03:27.645 --> 00:03:29.840
Then finish.

00:03:30.510 --> 00:03:33.980
Let's open it in this window.

00:03:35.340 --> 00:03:38.980
Now it's prompting us to load it as a Maven project.

00:03:38.980 --> 00:03:41.060
Let's click on that.

00:03:42.030 --> 00:03:49.220
It will take a few seconds to read the bomb dot xml and cleared the project structure.

00:03:49.860 --> 00:03:53.065
Let's now go to Palm dot xml.

00:03:53.065 --> 00:03:57.160
We selected ME One is the project type and every Maven project has

00:03:57.160 --> 00:04:02.060
a palm dot xml file using which all the dependencies are managed.

00:04:03.630 --> 00:04:10.305
Spring Boot startup paste is the default dependency that gets added using which

00:04:10.305 --> 00:04:12.800
a Spring Boot application can be tested using

00:04:12.800 --> 00:04:17.735
different libraries such as JUnit, Jupiter, Mockito.

00:04:17.735 --> 00:04:22.534
And we selected web-based their dependency to build that SDP.

00:04:22.534 --> 00:04:25.205
And that is getting shown here.

00:04:25.205 --> 00:04:27.185
So based on this,

00:04:27.185 --> 00:04:32.825
intelligent or download the required jar files and keep it under external libraries.

00:04:32.825 --> 00:04:36.995
Initially you see JDK liquid liabilities here.

00:04:36.995 --> 00:04:40.295
As soon as May one results all the dependencies,

00:04:40.295 --> 00:04:44.820
all the springboard or later liabilities will be shown here.

00:04:45.640 --> 00:04:48.710
Now we can see that intelligence downloaded

00:04:48.710 --> 00:04:53.344
the required jar files for springboard application.

00:04:53.344 --> 00:04:58.355
Springboard creates a JAR file under SRC Main Java,

00:04:58.355 --> 00:05:01.040
and whatever package you specified.

00:05:01.040 --> 00:05:04.880
And that Java class is the starting point of the application.

00:05:04.880 --> 00:05:07.820
In this case, spring Hello World application

00:05:07.820 --> 00:05:11.699
is the starting point of the springboard application.

00:05:12.280 --> 00:05:15.919
And there is a Spring Boot application annotation

00:05:15.919 --> 00:05:19.920
which tells the compiler that this is a Spring Boot application.

00:05:20.620 --> 00:05:23.165
Now we can run this project,

00:05:23.165 --> 00:05:26.900
but we can see that not all dependencies have been dissolved.

00:05:26.900 --> 00:05:29.915
Spring Boot application is appearing in bread.

00:05:29.915 --> 00:05:32.030
If we get the same error here,

00:05:32.030 --> 00:05:34.325
I refuse troubleshooting tips.

00:05:34.325 --> 00:05:36.920
Right? Click on pop dot xml,

00:05:36.920 --> 00:05:40.535
select May one and reload project.

00:05:40.535 --> 00:05:43.985
They want to try to resolve dependencies.

00:05:43.985 --> 00:05:46.205
If that doesn't tell,

00:05:46.205 --> 00:05:51.035
delete the main.xml file that you might see under the main folder.

00:05:51.035 --> 00:05:53.645
Sometimes it creates conflicts.

00:05:53.645 --> 00:05:56.885
Simply click on it and dot delete.

00:05:56.885 --> 00:06:02.370
Half cooked that intelligence should find all the required dependencies.

00:06:04.420 --> 00:06:09.305
We can see that all error's highlighted in red are gone.

00:06:09.305 --> 00:06:15.155
Now this is a web service that is ready to be executed and deployed.

00:06:15.155 --> 00:06:20.585
You do not need to make any additional coder configuration changes to make it run.

00:06:20.585 --> 00:06:23.930
As a developer, you need to concentrate on adding

00:06:23.930 --> 00:06:28.580
business logic and creating an endpoint for your list web service.

00:06:28.580 --> 00:06:34.430
For now let's artist simple system or statement will print out Hello World,

00:06:34.430 --> 00:06:37.920
string and run the application.

00:06:43.300 --> 00:06:46.610
Now it is started running and we can see

00:06:46.610 --> 00:06:50.730
springboard in the console and the Watson is getting printed.

00:06:50.800 --> 00:06:55.920
So this is the default log that Spring Boot dendrites.

00:06:56.650 --> 00:07:00.830
Now we can see that the spring Boot application I started

00:07:00.830 --> 00:07:04.294
running and there is an inbuilt DOM card webserver,

00:07:04.294 --> 00:07:07.805
using which the Spring Boot app has been launched.

00:07:07.805 --> 00:07:12.035
Also, we can see the HelloWorld output in the console.

00:07:12.035 --> 00:07:16.924
Now let's try to hit the web service it localhost 8080.

00:07:16.924 --> 00:07:21.080
We can open a browser and Lord localhost 8080.

00:07:21.080 --> 00:07:23.520
And now we got an error.

00:07:24.250 --> 00:07:26.855
This is expected.

00:07:26.855 --> 00:07:31.700
It says application has no explicit mapping for class data.

00:07:31.700 --> 00:07:34.385
When we invoke localhost 8080,

00:07:34.385 --> 00:07:39.920
it's looking for a mapping or some functionality which mapped to the root directory.

00:07:39.920 --> 00:07:43.565
And we have not specified anything for that.

00:07:43.565 --> 00:07:45.620
Traditionally is a fallback.

00:07:45.620 --> 00:07:48.275
Gets trained to look for class several URL,

00:07:48.275 --> 00:07:52.595
but we have not provided any mapping quartz glass that are also.

00:07:52.595 --> 00:07:57.335
Let's understand how to provide a mapping to a URL.

00:07:57.335 --> 00:08:00.515
We learned new Java class.

00:08:00.515 --> 00:08:03.770
Let's call it hello service.

00:08:03.770 --> 00:08:06.690
You can specify any name.

00:08:06.820 --> 00:08:10.880
Now to start with a rest API using this class,

00:08:10.880 --> 00:08:14.825
we need to R then M relation called wrist controller.

00:08:14.825 --> 00:08:16.955
And as soon as we do that,

00:08:16.955 --> 00:08:20.700
intelligence imports the required package.

00:08:21.850 --> 00:08:26.315
Next we'll add a maternal and map it to a URL.

00:08:26.315 --> 00:08:28.880
Let's call it index.

00:08:28.880 --> 00:08:31.260
You can give any name.

00:08:31.390 --> 00:08:35.190
And we'll return a simple string.

00:08:38.530 --> 00:08:45.965
We need to add an annotation request mapping with the URL to map it to this method.

00:08:45.965 --> 00:08:48.545
Let's map index to class you had,

00:08:48.545 --> 00:08:50.910
which is the root directory.

00:08:51.850 --> 00:08:55.610
Let's put a semicolon here and fix

00:08:55.610 --> 00:09:04.680
that typo. And we'll run it.

00:09:04.960 --> 00:09:07.760
It is started running.

00:09:07.760 --> 00:09:11.104
It's running now at port 8080.

00:09:11.104 --> 00:09:14.360
Let's refresh this page.

00:09:14.360 --> 00:09:19.020
And this time we got the message Hello World 2021.

00:09:20.080 --> 00:09:26.280
And this is coming from this index method which is mapped to the root directory.

00:09:26.920 --> 00:09:31.385
The method returns a string which is sent back to the client.

00:09:31.385 --> 00:09:33.515
Let's start another method.

00:09:33.515 --> 00:09:36.965
And this time we'll map it to slash abc widen,

00:09:36.965 --> 00:09:40.740
and we live a different return statement.

00:09:41.290 --> 00:09:45.420
And let's change the method name also.

00:09:45.640 --> 00:09:49.620
Can not have two methods with the same name.

00:09:52.840 --> 00:10:00.650
Will run it. Similarly, you can create ties many method send,

00:10:00.650 --> 00:10:03.005
map it to different Tile URLs.

00:10:03.005 --> 00:10:06.620
So this is how you create a risk TPA using Spring Boot.

00:10:06.620 --> 00:10:11.105
You create a method and then map it to a URL.

00:10:11.105 --> 00:10:14.690
Also, you need to ensure the annotations are added.

00:10:14.690 --> 00:10:19.070
Rest controller at the class level and that equipment mapping it dumb.

00:10:19.070 --> 00:10:26.280
At third level. It is again started running.

00:10:27.820 --> 00:10:29.270
First.

00:10:29.270 --> 00:10:31.445
This, this works fine.

00:10:31.445 --> 00:10:35.220
And now we'll invoke does class ABC URL.

00:10:35.590 --> 00:10:42.270
And it returns message from the method that is mapped to this class CBC URL.

00:10:43.600 --> 00:10:48.660
So this is how you can get started with springboard.
