WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.990
in the previous love we saw.

00:00:02.990 --> 00:00:04.490
When the course up goes down,

00:00:04.490 --> 00:00:10.410
it also takes down the course catalog service in a micro services set up or in any

00:00:10.410 --> 00:00:11.050
application,

00:00:11.050 --> 00:00:13.190
failure could happen for many different reasons.

00:00:13.190 --> 00:00:15.590
That could be system issues that could be network issues,

00:00:15.590 --> 00:00:16.850
that competitiveness issues,

00:00:16.850 --> 00:00:21.860
then how we handed those failures so that our application can work seamlessly.

00:00:21.860 --> 00:00:27.230
One of the popular technique for handling failure in micro services or in any application,

00:00:27.230 --> 00:00:28.660
is the circuit breaker pattern.

00:00:28.660 --> 00:00:30.130
So as the name suggest,

00:00:30.130 --> 00:00:31.670
just break the circuit.

00:00:31.670 --> 00:00:37.550
So stop sending any additional request to the downstream service.

00:00:37.550 --> 00:00:43.040
When you would realize that those services down it's really easy toe Implement a circuit

00:00:43.040 --> 00:00:44.390
breaker in spring clout.

00:00:44.390 --> 00:00:47.450
It has Netflix history libraries,

00:00:47.450 --> 00:00:50.830
which was the Lord by the teammate Netflix.

00:00:50.830 --> 00:00:53.550
Using that you can easily implement circuit breaker.

00:00:53.550 --> 00:00:56.640
The way it works is pretty simple.

00:00:56.640 --> 00:00:59.290
Let's say one services in walking another service,

00:00:59.290 --> 00:01:02.960
and when 50% of the request fail in a 12th rolling window,

00:01:02.960 --> 00:01:04.190
you just break the circuit.

00:01:04.190 --> 00:01:06.880
And how do you know when the service is up?

00:01:06.880 --> 00:01:13.030
Keep sending one request every five second to check the downstream services up so That is

00:01:13.030 --> 00:01:14.310
the way our Netflix,

00:01:14.310 --> 00:01:16.000
his tricks circuit breaker,

00:01:16.000 --> 00:01:19.450
what's and we'll see that in the practical station.

00:01:19.450 --> 00:01:21.620
And how do you handle that failure?

00:01:21.620 --> 00:01:23.240
You can have a fallback matter,

00:01:23.240 --> 00:01:24.650
which can call another service,

00:01:24.650 --> 00:01:26.050
which can call another matter,

00:01:26.050 --> 00:01:31.580
using which you can display some misses to the user that the services don't or you can have

00:01:31.580 --> 00:01:38.000
some ordinates strategy in terms off are displaying that up from a separate Microsoft's is

00:01:38.000 --> 00:01:39.850
still the main services back.

00:01:39.850 --> 00:01:41.610
So in the next,

00:01:41.610 --> 00:01:42.550
love will understand.

00:01:42.550 --> 00:01:46.920
How do we handle the failure of the course up by calling another fall back method,

00:01:46.920 --> 00:01:53.000
which will give us some pre configured or hard coded mrs and which you can use to display

00:01:53.000 --> 00:01:55.850
back to the users till the course up comes in light.

00:01:55.850 --> 00:01:57.810
So let's see it in action.

00:01:57.810 --> 00:01:58.350
Thank you.

