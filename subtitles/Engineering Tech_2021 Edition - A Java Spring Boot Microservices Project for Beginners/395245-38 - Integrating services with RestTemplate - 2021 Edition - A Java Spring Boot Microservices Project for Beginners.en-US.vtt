WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.830 --> 00:00:06.435
Welcome back. Cartel. Now we have built a court's application with a database of its own.

00:00:06.435 --> 00:00:11.820
And this is a self-contained application that can be deployed in any Java environment.

00:00:11.820 --> 00:00:14.620
And can we invoked through wrist?

00:00:14.720 --> 00:00:21.700
Now how do we call this service from another service which is also a wrist web service.

00:00:22.040 --> 00:00:27.360
For example, how do we call the core sap from a Course Catalog app,

00:00:27.360 --> 00:00:29.955
which might be needing course information.

00:00:29.955 --> 00:00:34.050
And further it might be relying on the courts have service.

00:00:34.990 --> 00:00:38.880
So let's understand that in this lab.

00:00:39.400 --> 00:00:45.440
Let's go to started Sprint dot IO and create a new project for the course.

00:00:45.440 --> 00:00:51.750
Catalog hub will use web rest.

00:00:52.960 --> 00:00:57.500
We do not need the GPA because we not be directly interacting with the database

00:00:57.500 --> 00:01:01.130
from this Course Catalog app will in turn using the core SAP,

00:01:01.130 --> 00:01:03.450
which will interact with the database.

00:01:04.390 --> 00:01:08.520
Let's import the course Cutler project.

00:01:08.800 --> 00:01:12.990
It'll be of type mountain-like God the project.

00:01:14.130 --> 00:01:18.550
The app is now ready for us to make changes.

00:01:18.550 --> 00:01:21.370
So let's see what are the changes required in

00:01:21.370 --> 00:01:25.370
the course catalog for it to find the course app.

00:01:25.950 --> 00:01:29.870
So we'll use something called Race template.

00:01:30.930 --> 00:01:35.005
Let's give a new port to the course catalog apps.

00:01:35.005 --> 00:01:37.375
Solver.py equal to h 001.

00:01:37.375 --> 00:01:39.655
That's the port for the course catalogue up.

00:01:39.655 --> 00:01:43.270
Because the default port 88 is already taken by the courts app.

00:01:43.270 --> 00:01:45.010
Using application dot properties,

00:01:45.010 --> 00:01:47.300
you can modify the default port.

00:01:47.490 --> 00:01:49.870
Now let's create a Java class.

00:01:49.870 --> 00:01:53.360
We'll name it as catalog controller.

00:01:57.910 --> 00:02:01.520
And we'll address controller annotation.

00:02:01.520 --> 00:02:05.820
This class will have methods which will map to rest URL.

00:02:06.370 --> 00:02:09.905
Let's add a method for homepage.

00:02:09.905 --> 00:02:12.455
You'll just simply return a string.

00:02:12.455 --> 00:02:17.150
Welcome to future ex course catalog will annotate it with request mapping.

00:02:17.150 --> 00:02:23.400
Annotation will point to the home directory.

00:02:24.010 --> 00:02:27.815
It started it, it's running at port it 01.

00:02:27.815 --> 00:02:29.910
Let's check it out.

00:02:31.030 --> 00:02:33.200
Everything looks good.

00:02:33.200 --> 00:02:35.315
So this is the course catalogue up.

00:02:35.315 --> 00:02:39.515
Now let's see how we can get data from the course.

00:02:39.515 --> 00:02:43.940
Let's go to the course app and make one could change show.

00:02:43.940 --> 00:02:47.990
We'll add a mapping for the different root directory.

00:02:47.990 --> 00:02:52.670
We have annotation for the courses and for the ID URL,

00:02:52.670 --> 00:02:58.100
but I think for that we should be blank.

00:02:58.100 --> 00:03:02.190
Just class sled will point to the root of the application.

00:03:02.230 --> 00:03:05.850
And we'll return a simple string.

00:03:10.060 --> 00:03:13.370
This is core Sappho, whom we've already built a home for

00:03:13.370 --> 00:03:19.140
the course catalogue up for the course tab. Now let's run it.

00:03:20.830 --> 00:03:27.110
Lord saw the courts have home text list since your other URLs are working fine.

00:03:27.110 --> 00:03:29.060
Courses should fetch all the courses,

00:03:29.060 --> 00:03:34.520
send specific courts, IDs should fit particular courts,

00:03:34.520 --> 00:03:36.125
so it's working fine.

00:03:36.125 --> 00:03:40.650
Now let's try to integrate the course catalogue with a coarser.

00:03:42.700 --> 00:03:49.010
Go back to the course catalog project in the catalog controller class.

00:03:49.010 --> 00:03:53.900
Let's try to append the Coursera homepage messes with

00:03:53.900 --> 00:04:01.250
the course catalogue up Mrs. now to integrate Buddha Risk Services,

00:04:01.250 --> 00:04:03.980
we'll use something called Race template.

00:04:03.980 --> 00:04:08.045
Risk template has a method called get for object,

00:04:08.045 --> 00:04:10.190
which will return us data from

00:04:10.190 --> 00:04:18.515
the target tau risks service will have to specify the course up URL,

00:04:18.515 --> 00:04:22.415
that is the URL that the rich templates should target.

00:04:22.415 --> 00:04:25.640
The return type would be string dot class.

00:04:25.640 --> 00:04:29.190
We are going to return the homepage text.

00:04:30.760 --> 00:04:33.455
It's a simple integration.

00:04:33.455 --> 00:04:35.700
Using the rich template.

00:04:36.190 --> 00:04:38.690
Get the homepage message from

00:04:38.690 --> 00:04:43.620
the core SAP and append it to the Course Catalog app and are displayed.

00:04:45.250 --> 00:04:49.740
So we're doing that using various templates. Let's run it.

00:04:50.680 --> 00:04:53.990
So this will be the course app URL,

00:04:53.990 --> 00:04:59.960
not the course catalog URL which you corrected. Run it.

00:04:59.960 --> 00:05:06.770
Now. You can see that local or state

00:05:06.770 --> 00:05:08.810
001 gives the complete

00:05:08.810 --> 00:05:14.940
Mrs. part of it from the course catalog and then part of it from the course have.

00:05:15.280 --> 00:05:19.910
So this is how you can integrate to services using bearish template.

00:05:19.910 --> 00:05:25.830
We're returning a string from one-day service and using that in the other service.

00:05:28.540 --> 00:05:31.950
Now let's look at another example.

00:05:32.740 --> 00:05:37.910
We'll try to return the entire courses list.

00:05:37.910 --> 00:05:40.910
Clever new URL mapping for catalog.

00:05:40.910 --> 00:05:44.580
And this should return us all the courses.

00:05:50.980 --> 00:05:59.430
Will change the URL and then whatever we are getting appended to some string.

00:05:59.920 --> 00:06:04.415
So our courses are get everything from class courses.

00:06:04.415 --> 00:06:09.875
Append that to the, our courses hard-coded text message.

00:06:09.875 --> 00:06:12.630
Let's run it now.

00:06:14.650 --> 00:06:20.010
And invoke class catalog in the Course Catalog app.

00:06:20.530 --> 00:06:23.750
And you can see that data getting,

00:06:23.750 --> 00:06:27.665
getting fades from the course up and getting the split in the catalogue.

00:06:27.665 --> 00:06:30.810
Now let's try to return an object.

00:06:31.840 --> 00:06:36.080
We'll add a class called Dog course class,

00:06:36.080 --> 00:06:39.110
so that we can whatever output we are getting,

00:06:39.110 --> 00:06:42.500
we can map it to an object and extract value out of it.

00:06:42.500 --> 00:06:45.420
Even prank that with string.

00:06:50.830 --> 00:06:56.135
We can copy the entire class from the core SAP and make changes.

00:06:56.135 --> 00:06:58.950
Let's copy the fields and methods.

00:07:01.840 --> 00:07:05.705
And we'll remove other database littered annotations

00:07:05.705 --> 00:07:10.410
because we are not connecting to database from course catalog.

00:07:10.780 --> 00:07:16.955
It's a simple course class with the same fields and variables, the course up.

00:07:16.955 --> 00:07:24.240
Now let's see how do return data from a rest service and map it to an object.

00:07:24.910 --> 00:07:28.070
Let's add a new method which change

00:07:28.070 --> 00:07:32.015
the URL instead of a string will return an object, the stain.

00:07:32.015 --> 00:07:35.190
That object would be obtained course.

00:07:37.750 --> 00:07:40.340
So whenever you are releasing,

00:07:40.340 --> 00:07:43.175
a core subject would be returned and

00:07:43.175 --> 00:07:46.895
that same core subject can be used to extract information.

00:07:46.895 --> 00:07:51.420
Let's change the URL to point it to a specific course.

00:07:54.070 --> 00:07:56.900
Will try to face the first course.

00:07:56.900 --> 00:07:59.210
And introduction lingered class now should have

00:07:59.210 --> 00:08:02.850
Coursera's class in the gate for object method.

00:08:03.550 --> 00:08:05.810
Return type should be course,

00:08:05.810 --> 00:08:08.900
and we'll see our first course

00:08:08.900 --> 00:08:13.410
is to extract the name will change the URL to first course.

00:08:14.320 --> 00:08:17.570
And then we'll say our first course

00:08:17.570 --> 00:08:23.580
is whatever cost object we get from that little extra app.get course name.

00:08:25.660 --> 00:08:29.840
So this is how we can get an object and invoke

00:08:29.840 --> 00:08:34.440
various methods of it to get more information on specific information.

00:08:35.770 --> 00:08:46.520
Let's run it. Or it failed because we tried to use the same name for the meter,

00:08:46.520 --> 00:08:50.640
will change it and run it again.

00:08:51.010 --> 00:08:55.565
You're going to fail because we tried to any size of course subject to a string.

00:08:55.565 --> 00:09:00.150
Let says that we'll have course equal nuh course.

00:09:00.280 --> 00:09:05.160
You can't have Gosling assigned to cluster two is an error.

00:09:07.210 --> 00:09:10.700
And this time it should run fine.

00:09:10.700 --> 00:09:15.690
Okay, now let's invoke the first course URL.

00:09:17.200 --> 00:09:24.050
We can see that Hadoop is getting faced returning a core subject.

00:09:24.050 --> 00:09:29.070
And from that we are extending the name and displaying it in the course catalog service.

00:09:29.230 --> 00:09:35.400
So this is how you can integrate the tourists services using the template.

00:09:35.650 --> 00:09:38.480
Later on in the microservices six,

00:09:38.480 --> 00:09:41.465
and we'll understand how do we avoid hardcoding.

00:09:41.465 --> 00:09:45.860
So that'll take us to the world of microservices where the services can be

00:09:45.860 --> 00:09:50.690
automatically discover and we can also implement other patterns,

00:09:50.690 --> 00:09:52.730
lake how to handle failure,

00:09:52.730 --> 00:09:55.760
how to do intelligent routing.

00:09:55.760 --> 00:09:59.790
So more on that in the microservices Texan.
