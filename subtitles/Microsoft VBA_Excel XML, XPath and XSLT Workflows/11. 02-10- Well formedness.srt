1
00:00:00,000 --> 00:00:18,130
in order to be considered well formed an XML document as to it here to the following Seven

2
00:00:18,130 --> 00:00:20,550
Rules Festival,

3
00:00:20,550 --> 00:00:27,740
the XML document must contain a root element and elements that contains a lot the other

4
00:00:27,740 --> 00:00:29,750
nodes within the XML document.

5
00:00:29,750 --> 00:00:38,650
Let's take an example of an XML document that breaks this rule in zero to XML essentials.

6
00:00:38,650 --> 00:00:39,930
That's open up.

7
00:00:39,930 --> 00:00:46,250
Number 10 well formed this and then 01 well honed.

8
00:00:46,250 --> 00:00:52,120
And here we can see following the exile declaration,

9
00:00:52,120 --> 00:00:57,200
we have an element called day and when I collapse that element,

10
00:00:57,200 --> 00:01:01,050
you can see it's immediately followed by another day element.

11
00:01:01,050 --> 00:01:04,230
So root element repeats.

12
00:01:04,230 --> 00:01:05,950
It has siblings,

13
00:01:05,950 --> 00:01:11,250
and this therefore means that it's not a well formed XML document.

14
00:01:11,250 --> 00:01:15,350
Assuming that everything else is okay with the document,

15
00:01:15,350 --> 00:01:17,850
this is very easy to fix.

16
00:01:17,850 --> 00:01:24,050
We simply need to create a root element and put all our existing content inside it.

17
00:01:24,050 --> 00:01:26,760
So to do that,

18
00:01:26,760 --> 00:01:29,360
I'm going to select everything apart from the prologue,

19
00:01:29,360 --> 00:01:30,980
the XML declaration,

20
00:01:30,980 --> 00:01:33,250
my present control,

21
00:01:33,250 --> 00:01:41,120
Fifth and the End key and then just pressing the tab key to indented everything.

22
00:01:41,120 --> 00:01:43,900
And this is purely for readability.

23
00:01:43,900 --> 00:01:46,550
It's not in any way of requirement in XML.

24
00:01:46,550 --> 00:01:51,450
And now let's insert the open in tag of our root element.

25
00:01:51,450 --> 00:01:53,870
Let's call it days.

26
00:01:53,870 --> 00:01:57,810
And in the brackets environment,

27
00:01:57,810 --> 00:02:00,280
the closing tag goes in automatically.

28
00:02:00,280 --> 00:02:05,750
So I now I just need to cut the clothes in tag and pasted at the very end of the documents

29
00:02:05,750 --> 00:02:05,750
.

30
00:02:05,750 --> 00:02:15,250
And then we have it.

31
00:02:15,250 --> 00:02:19,010
If I now collapse our first element,

32
00:02:19,010 --> 00:02:24,550
you'll see that the entire document is collapsed,

33
00:02:24,550 --> 00:02:27,300
says this document is now.

34
00:02:27,300 --> 00:02:31,850
Well hold and let's just close it and say about changes.

35
00:02:31,850 --> 00:02:38,520
Next.

36
00:02:38,520 --> 00:02:44,170
We have some restrictions on the names of elements and attributes names cannot contain.

37
00:02:44,170 --> 00:02:49,110
Spaces cannot start with a number of special character cannot start with the letters.

38
00:02:49,110 --> 00:02:50,030
XML,

39
00:02:50,030 --> 00:02:53,080
regardless of the case on the name,

40
00:02:53,080 --> 00:02:54,920
must contain at least one character.

41
00:02:54,920 --> 00:02:56,650
It can't be completely numeric.

42
00:02:56,650 --> 00:03:00,290
And the game.

43
00:03:00,290 --> 00:03:05,650
Let's take an example of something that breaks these rules zero to,

44
00:03:05,650 --> 00:03:10,550
and here we can see that we have an element called course name,

45
00:03:10,550 --> 00:03:12,470
and it's two words,

46
00:03:12,470 --> 00:03:14,650
very simple breach of the rules.

47
00:03:14,650 --> 00:03:18,860
No space is allowed in the names of elements or attributes,

48
00:03:18,860 --> 00:03:21,200
so to make this well formed,

49
00:03:21,200 --> 00:03:23,450
you simply have to take out all these spaces,

50
00:03:23,450 --> 00:03:30,250
and I missed one and another.

51
00:03:30,250 --> 00:03:31,630
I said,

52
00:03:31,630 --> 00:03:33,350
Once the space Israel gun,

53
00:03:33,350 --> 00:03:37,990
all the names are legit and we have a well formed document.

54
00:03:37,990 --> 00:03:50,450
The next requirement is that element tags must be properly nested,

55
00:03:50,450 --> 00:03:56,350
and this refers to the situation of where you have a parent element on a child element.

56
00:03:56,350 --> 00:04:03,150
The tags off the child element must be completely enclosed within the tanks of the parent

57
00:04:03,150 --> 00:04:03,750
element.

58
00:04:03,750 --> 00:04:08,450
So let's have a look at examples three.

59
00:04:08,450 --> 00:04:11,250
Which breaks this rule.

60
00:04:11,250 --> 00:04:20,500
So here we have a root of notification state time when we have detail,

61
00:04:20,500 --> 00:04:26,950
which contains recipients on message is it's child elements on recipients,

62
00:04:26,950 --> 00:04:32,950
contains or other is meant to contain the two element as its child element.

63
00:04:32,950 --> 00:04:36,420
So we have the open intact for recipients.

64
00:04:36,420 --> 00:04:38,650
The open intact for two.

65
00:04:38,650 --> 00:04:43,650
But then we closed recipients before close into.

66
00:04:43,650 --> 00:04:46,450
So to correct this,

67
00:04:46,450 --> 00:04:51,050
we need to have to closed here.

68
00:04:51,050 --> 00:04:56,650
And then recipients closed here.

69
00:04:56,650 --> 00:05:04,800
So the opening and closing tags off the child element a completely enclosed inside the

70
00:05:04,800 --> 00:05:07,850
opening and closing tags of the parent element.

71
00:05:07,850 --> 00:05:12,190
And again,

72
00:05:12,190 --> 00:05:14,550
let's does save and close.

73
00:05:14,550 --> 00:05:18,680
Next,

74
00:05:18,680 --> 00:05:20,950
we have what looks like a fairly obvious one.

75
00:05:20,950 --> 00:05:25,340
Every Odin in tag must have imagine closing tag.

76
00:05:25,340 --> 00:05:34,220
And this tends to be broken by anyone who's designing XML but has more HTML experience than

77
00:05:34,220 --> 00:05:41,650
XML experience because in HTML five it is legitimate in some circumstances.

78
00:05:41,650 --> 00:05:46,040
Toe have an open in tag with no matching clothes in tag,

79
00:05:46,040 --> 00:05:49,830
so on to example,

80
00:05:49,830 --> 00:05:55,150
four and the culprits are in this paragraph,

81
00:05:55,150 --> 00:06:00,050
and it's basically this BR tag that's been introduced.

82
00:06:00,050 --> 00:06:05,560
It's taken from HTML on stands for a line break,

83
00:06:05,560 --> 00:06:07,030
and in HTML five.

84
00:06:07,030 --> 00:06:10,150
It's perfectly legitimate to write it in this way.

85
00:06:10,150 --> 00:06:11,860
But in XML,

86
00:06:11,860 --> 00:06:13,390
it's completely wrong.

87
00:06:13,390 --> 00:06:17,450
If it's to be treated as an empty element with no content,

88
00:06:17,450 --> 00:06:22,860
then you need to use the convention that we saw earlier but making it both an opening and

89
00:06:22,860 --> 00:06:23,840
closing tag.

90
00:06:23,840 --> 00:06:24,310
So,

91
00:06:24,310 --> 00:06:24,950
in other words,

92
00:06:24,950 --> 00:06:30,450
you need to put a forward slash just before the closing angle bracket,

93
00:06:30,450 --> 00:06:33,280
and this means that it's both an open and close intact.

94
00:06:33,280 --> 00:06:39,720
So it's completely legitimate if we simply copy this on paste over ALS,

95
00:06:39,720 --> 00:06:43,390
the illegal ones there aren't too many of them.

96
00:06:43,390 --> 00:06:44,650
Soldiers do it this way.

97
00:06:44,650 --> 00:06:53,070
Just missed one here on assumes they're all gone.

98
00:06:53,070 --> 00:07:00,450
That power should become a legitimate like so So this is the situation where people are

99
00:07:00,450 --> 00:07:04,240
designing XML and they might all into this trap.

100
00:07:04,240 --> 00:07:08,520
It's where they've got a lot of HTML experience that they make certain assumptions about

101
00:07:08,520 --> 00:07:11,550
what's permissible inside an XML document.

102
00:07:11,550 --> 00:07:13,140
So again,

103
00:07:13,140 --> 00:07:19,610
this saving close Next,

104
00:07:19,610 --> 00:07:27,200
we have the requirement that all attributes must have values and the game.

105
00:07:27,200 --> 00:07:30,450
Let's taken example of something that breaks these rules,

106
00:07:30,450 --> 00:07:32,950
the needs of our elements.

107
00:07:32,950 --> 00:07:35,450
We have three attributes.

108
00:07:35,450 --> 00:07:37,950
Two of them are perfectly legit,

109
00:07:37,950 --> 00:07:41,150
but the last one consists of a single word.

110
00:07:41,150 --> 00:07:48,510
So whether you take this word as the name of the attribute or as the value associating with

111
00:07:48,510 --> 00:07:51,870
a nameless attributes in both circumstances,

112
00:07:51,870 --> 00:07:54,150
it's not permitted in XML.

113
00:07:54,150 --> 00:07:59,740
So we would have to come up with perhaps a name for an attribute and then treat low,

114
00:07:59,740 --> 00:08:04,350
medium and high as the possible values for that attribute.

115
00:08:04,350 --> 00:08:14,350
So let's call our attribute rating so the correct syntax would be rating equals open quotes

116
00:08:14,350 --> 00:08:17,150
and then obviously closed quotes at the end.

117
00:08:17,150 --> 00:08:31,290
Save my copy this on his pasted in front of each and the strain woods and then just put the

118
00:08:31,290 --> 00:08:33,050
clothes in quotation mark.

119
00:08:33,050 --> 00:08:36,380
They told us co create control,

120
00:08:36,380 --> 00:08:38,300
see on dinners paste in.

121
00:08:38,300 --> 00:08:43,830
So having done that,

122
00:08:43,830 --> 00:08:50,440
we've now made all of these attributes of legitimate theater abuses called rate in on then

123
00:08:50,440 --> 00:08:50,750
low,

124
00:08:50,750 --> 00:08:59,210
medium and high have now become the values along that same attribute each time little and

125
00:08:59,210 --> 00:09:05,030
safe and clothes Next.

126
00:09:05,030 --> 00:09:09,180
We have the stipulation that all attribute values must be quoted.

127
00:09:09,180 --> 00:09:11,660
We can either use double quotes,

128
00:09:11,660 --> 00:09:12,910
all single quotes,

129
00:09:12,910 --> 00:09:14,350
but we must use quotes.

130
00:09:14,350 --> 00:09:21,910
This rule tends to be broken where people take a convention from programming languages on

131
00:09:21,910 --> 00:09:23,150
moving into XML.

132
00:09:23,150 --> 00:09:25,480
In programming languages.

133
00:09:25,480 --> 00:09:28,570
It's always required that you quote strings,

134
00:09:28,570 --> 00:09:33,000
but you normally don't need to quote any values.

135
00:09:33,000 --> 00:09:34,610
If something's numeric,

136
00:09:34,610 --> 00:09:37,150
you don't normally need to have quotes around it.

137
00:09:37,150 --> 00:09:39,090
But in XML,

138
00:09:39,090 --> 00:09:41,450
regardless of the type of data,

139
00:09:41,450 --> 00:09:44,850
you always place your values inside close.

140
00:09:44,850 --> 00:09:49,850
Let's have a look at example Number six.

141
00:09:49,850 --> 00:09:54,350
So here we can see for each of our invoices,

142
00:09:54,350 --> 00:09:59,550
we have status expected because it's textual.

143
00:09:59,550 --> 00:10:01,450
We placed it in quotes,

144
00:10:01,450 --> 00:10:09,450
but then we've made this erroneous assumption that because paid as a numeric value,

145
00:10:09,450 --> 00:10:13,750
that numeric value doesn't need to be in spite quotes.

146
00:10:13,750 --> 00:10:15,480
But in XML,

147
00:10:15,480 --> 00:10:21,570
it does every attributes value has to be inside quotation once again,

148
00:10:21,570 --> 00:10:27,560
I'm just gonna copy that and then just paste it around each of these numeric values,

149
00:10:27,560 --> 00:10:32,630
and that's all we need to do.

150
00:10:32,630 --> 00:10:36,050
So we now have a well formed XML document.

151
00:10:36,050 --> 00:10:44,680
And finally,

152
00:10:44,680 --> 00:10:51,550
we have the stipulation that illegal characters such as less than greater than 10% must all

153
00:10:51,550 --> 00:10:54,150
be replaced with entity references.

154
00:10:54,150 --> 00:10:58,050
And we've seen examples of this requirement in earlier videos.

155
00:10:58,050 --> 00:11:07,540
Let's look at an example we haven't encountered that's open up 07 We've seen that attribute

156
00:11:07,540 --> 00:11:07,540
.

157
00:11:07,540 --> 00:11:09,980
Values must always be quoted,

158
00:11:09,980 --> 00:11:13,540
but it's something you whether you use double personal single ones.

159
00:11:13,540 --> 00:11:16,510
If you use double quotes,

160
00:11:16,510 --> 00:11:20,950
then it's permissible to use single quotes inside them.

161
00:11:20,950 --> 00:11:23,370
But if you're using single quotes,

162
00:11:23,370 --> 00:11:25,090
as we are in this example,

163
00:11:25,090 --> 00:11:30,650
this means you can no longer have single quotes within your content.

164
00:11:30,650 --> 00:11:35,150
So using the apostrophe and Matthew Horror becomes illegal.

165
00:11:35,150 --> 00:11:40,730
Let's say that there's some technical reason for using single quotes.

166
00:11:40,730 --> 00:11:44,640
It makes programming in some other part of the system more convenient,

167
00:11:44,640 --> 00:11:46,350
so we want to continue with that.

168
00:11:46,350 --> 00:11:54,210
We have to make sure that we always use entity references instead of the apostrophe and the

169
00:11:54,210 --> 00:11:56,920
character entity for an apostrophe is ember.

170
00:11:56,920 --> 00:12:00,550
Send a pulse semi colon.

171
00:12:00,550 --> 00:12:17,370
The ones we don't meant We now have well formed XML And again that's close and save so

172
00:12:17,370 --> 00:12:21,970
those in the main criteria which need to be satisfied in order for a document to be

173
00:12:21,970 --> 00:12:24,450
considered well formed XML.

174
00:12:24,450 --> 00:12:25,920
However,

175
00:12:25,920 --> 00:12:33,240
a document that satisfies these very basic syntactical criteria isn't necessary a valid XML

176
00:12:33,240 --> 00:12:33,850
document.

177
00:12:33,850 --> 00:12:35,780
So in the next video,

178
00:12:35,780 --> 00:12:41,580
we'll move on to look at the criteria which have to be satisfied in order for a document to

179
00:12:41,580 --> 00:12:44,250
become a valid XML document.

