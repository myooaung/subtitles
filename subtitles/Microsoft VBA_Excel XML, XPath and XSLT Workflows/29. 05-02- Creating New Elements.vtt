WEBVTT
﻿1
00:00:00.000 --> 00:00:14.040
now that we've had a look at the key principles involved in performing excess lt

2
00:00:14.040 --> 00:00:15.150
transformations.

3
00:00:15.150 --> 00:00:20.160
But the rest of this section will focus on a particular transformation.

4
00:00:20.160 --> 00:00:23.280
Plan 05 used in excess lt style sheets.

5
00:00:23.280 --> 00:00:25.710
Let's now move into number two,

6
00:00:25.710 --> 00:00:27.110
creating new elements.

7
00:00:27.110 --> 00:00:32.750
I've got a couple of pdf diagrams in here which illustrate the transformation that will be

8
00:00:32.750 --> 00:00:39.750
doing This is the Input XML document that will be using on.

9
00:00:39.750 --> 00:00:45.650
We have encountered a couple of times in the course we have brawn chases the root element,

10
00:00:45.650 --> 00:00:48.440
and we're interested in the data.

11
00:00:48.440 --> 00:00:53.370
But the problem is that the data exists at three different levels.

12
00:00:53.370 --> 00:00:56.550
So we have the branch men into data at one level,

13
00:00:56.550 --> 00:01:03.580
the department head data at one level and then the stuff member data as 1/3 level.

14
00:01:03.580 --> 00:01:05.120
And for this reason,

15
00:01:05.120 --> 00:01:09.550
we're not able to import the XML into a single exceptional table.

16
00:01:09.550 --> 00:01:15.210
So what we'll do is to create an excess lt style sheet,

17
00:01:15.210 --> 00:01:20.250
but will transform that XML into an excel friendly format.

18
00:01:20.250 --> 00:01:23.900
So here's the output document that we want.

19
00:01:23.900 --> 00:01:30.630
The root element will be people and inside that will have a repeated element called person

20
00:01:30.630 --> 00:01:30.630
,

21
00:01:30.630 --> 00:01:35.850
which contains the original child elements that were at three different levels.

22
00:01:35.850 --> 00:01:38.850
I will dispense with the photo element.

23
00:01:38.850 --> 00:01:40.010
Since this is Exelon,

24
00:01:40.010 --> 00:01:45.550
we won't be displaying people's photos and to distinguish between the various staff members

25
00:01:45.550 --> 00:01:45.550
.

26
00:01:45.550 --> 00:01:48.330
We'll have three new attributes.

27
00:01:48.330 --> 00:01:55.770
The role will specify the person's job role and that will just be picked up from the

28
00:01:55.770 --> 00:01:57.870
original input document said.

29
00:01:57.870 --> 00:01:59.930
We'll pick up by the branch manager,

30
00:01:59.930 --> 00:02:02.250
head or staff member,

31
00:02:02.250 --> 00:02:10.090
and then we'll specify the branch in which the person works and the department and again,

32
00:02:10.090 --> 00:02:11.900
as we transform the document,

33
00:02:11.900 --> 00:02:16.460
we'll just pick up that information from these two attributes.

34
00:02:16.460 --> 00:02:19.350
So Branch has an attribute called Name,

35
00:02:19.350 --> 00:02:24.280
which is the name of the branch on similarly department as an attribute,

36
00:02:24.280 --> 00:02:25.450
also called Name,

37
00:02:25.450 --> 00:02:27.650
which will be the name of the department.

38
00:02:27.650 --> 00:02:32.270
So that's the transformation that we're planning in the section on.

39
00:02:32.270 --> 00:02:34.750
We'll just take it one step at a time.

40
00:02:34.750 --> 00:02:43.350
So as a first step in this video will look at creating new elements and the syntax that's

41
00:02:43.350 --> 00:02:46.050
used within an excess lt style treat for doing that.

42
00:02:46.050 --> 00:02:49.780
Let's begin by opening branches dot xml.

43
00:02:49.780 --> 00:02:58.330
And now let's have a look at the style sheet So we started with the bare bones.

44
00:02:58.330 --> 00:03:05.330
We've got the XML declaration and then the obligatory parent element Xsl style Street with

45
00:03:05.330 --> 00:03:07.650
the correct name Space Declaration.

46
00:03:07.650 --> 00:03:10.950
So if you remember there to top level elements,

47
00:03:10.950 --> 00:03:16.590
so let's just put those in xsl outputs.

48
00:03:16.590 --> 00:03:24.450
And then we need at least one xsl templates element,

49
00:03:24.450 --> 00:03:30.500
so to finish off the out.

50
00:03:30.500 --> 00:03:31.520
But we,

51
00:03:31.520 --> 00:03:32.020
first of all,

52
00:03:32.020 --> 00:03:34.210
specify Method and Frank,

53
00:03:34.210 --> 00:03:36.650
so this is always XML.

54
00:03:36.650 --> 00:03:39.810
I'll mention the second parameter just to remind you,

55
00:03:39.810 --> 00:03:42.450
but it's not particularly important for Excel,

56
00:03:42.450 --> 00:03:44.150
and that's indent.

57
00:03:44.150 --> 00:03:49.270
Since we won't see the transformed document,

58
00:03:49.270 --> 00:03:51.150
we'll only see an XML table.

59
00:03:51.150 --> 00:03:52.560
It doesn't really matter.

60
00:03:52.560 --> 00:03:54.950
But I just put that in there just to remind you.

61
00:03:54.950 --> 00:04:01.440
Now we come to the template to specify which part of the input document is being targeted

62
00:04:01.440 --> 00:04:02.720
by kicking template.

63
00:04:02.720 --> 00:04:10.150
We use the match attribute and then for the first template.

64
00:04:10.150 --> 00:04:17.010
We always target the entire document by using a forward slashes the value which targets the

65
00:04:17.010 --> 00:04:24.210
document root and everything in the document is a child of the document root and just

66
00:04:24.210 --> 00:04:30.500
remind you why this is so that we don't have any input which is not catered for by our star

67
00:04:30.500 --> 00:04:34.370
trees so we won't get any unpredictable results.

68
00:04:34.370 --> 00:04:37.450
So going back to branches,

69
00:04:37.450 --> 00:04:45.670
the first thing we want to do is to replace branches with a new parent element called

70
00:04:45.670 --> 00:04:46.350
people.

71
00:04:46.350 --> 00:04:51.650
So inside our main template,

72
00:04:51.650 --> 00:04:55.150
we now use xsl element,

73
00:04:55.150 --> 00:04:59.090
which is the element that's used for creating elements.

74
00:04:59.090 --> 00:05:01.780
So we have the element element,

75
00:05:01.780 --> 00:05:10.050
and then we specify name equals people.

76
00:05:10.050 --> 00:05:16.130
So so far,

77
00:05:16.130 --> 00:05:19.490
our main template generates just one piece of output,

78
00:05:19.490 --> 00:05:21.780
and that is the root element,

79
00:05:21.780 --> 00:05:26.010
which we've called people to specify what goes inside it.

80
00:05:26.010 --> 00:05:30.240
We would then typically use xsl apply templates,

81
00:05:30.240 --> 00:05:35.860
and this enables us to point to any part of the input tree that we want to process.

82
00:05:35.860 --> 00:05:42.690
So any part of the input tree that's not addressed will simply be ignored that will not be

83
00:05:42.690 --> 00:05:44.950
present in the output document.

84
00:05:44.950 --> 00:05:51.850
So this is why it's so important that our first template matches the entire document,

85
00:05:51.850 --> 00:05:58.420
because what it means is that weaken suppress anything that we don't want simply by not

86
00:05:58.420 --> 00:06:03.050
targeted it with an xsl applied templates statement.

87
00:06:03.050 --> 00:06:04.720
So this occasion,

88
00:06:04.720 --> 00:06:07.200
when we use xsl apply templates,

89
00:06:07.200 --> 00:06:16.870
we want to assemble the branch manager head and stuff member elements.

90
00:06:16.870 --> 00:06:21.280
And there's a very useful export operator for doing this,

91
00:06:21.280 --> 00:06:25.350
which is the union operator written as the pipe character.

92
00:06:25.350 --> 00:06:27.250
Let's see what this looks like.

93
00:06:27.250 --> 00:06:30.710
So here we use xsl,

94
00:06:30.710 --> 00:06:32.070
apply templates,

95
00:06:32.070 --> 00:06:40.770
and then we use the Select a tribute to specify what we're targeting.

96
00:06:40.770 --> 00:06:45.800
And as we saw in the last section,

97
00:06:45.800 --> 00:06:48.010
we can either put an absolute part,

98
00:06:48.010 --> 00:06:54.080
starting with forward slash what we can use this very convenient double forward slash,

99
00:06:54.080 --> 00:06:57.190
which is a short cut for descendant or self,

100
00:06:57.190 --> 00:07:03.090
and this effectively enables us to jump to any section off the input document.

101
00:07:03.090 --> 00:07:04.100
So first of all,

102
00:07:04.100 --> 00:07:07.760
we want to jump to branch manager Bronze,

103
00:07:07.760 --> 00:07:09.050
underscore Manager.

104
00:07:09.050 --> 00:07:17.290
Then we use the pint character to combine branch manager with another section of the input

105
00:07:17.290 --> 00:07:18.050
document.

106
00:07:18.050 --> 00:07:19.560
So we do forward,

107
00:07:19.560 --> 00:07:29.330
slash forward slash head another union character and finally descendant It'll self stuff on

108
00:07:29.330 --> 00:07:30.180
the school member.

109
00:07:30.180 --> 00:07:38.170
So this fairly short statement is very powerful because it enables us to combine three

110
00:07:38.170 --> 00:07:43.090
notes sets from different sections of the document into one note set,

111
00:07:43.090 --> 00:07:46.700
and to specify what happens to this combined note said,

112
00:07:46.700 --> 00:07:51.680
we now create another template which targets exactly the same note set,

113
00:07:51.680 --> 00:08:08.250
so this time I'll match will be the same as the contents of that select.

114
00:08:08.250 --> 00:08:19.660
So this template is saying,

115
00:08:19.660 --> 00:08:22.500
is that every time we encounter a branch manager,

116
00:08:22.500 --> 00:08:24.550
head or staff member element,

117
00:08:24.550 --> 00:08:26.650
this is what we want to happen.

118
00:08:26.650 --> 00:08:28.540
And of course,

119
00:08:28.540 --> 00:08:32.850
what we want to happen is the creation of a person element.

120
00:08:32.850 --> 00:08:35.120
And as we've just seen,

121
00:08:35.120 --> 00:08:39.150
the same tax for creating an element is xsl element.

122
00:08:39.150 --> 00:08:51.950
Name equals person and for this video will leave it at that.

123
00:08:51.950 --> 00:08:54.800
So just to recap what we've done,

124
00:08:54.800 --> 00:08:59.650
we've created a template that targets the entire input document.

125
00:08:59.650 --> 00:09:08.540
And we specified which nodes we want to appear in the output document I use in an xsl apply

126
00:09:08.540 --> 00:09:09.850
template statement.

127
00:09:09.850 --> 00:09:15.060
And now we specify and what we want to happen to each element within that note set.

128
00:09:15.060 --> 00:09:16.840
And so far,

129
00:09:16.840 --> 00:09:19.990
what we said is create an element called person.

130
00:09:19.990 --> 00:09:25.230
So if the original XML contains 1000 branch manager,

131
00:09:25.230 --> 00:09:28.850
head and staff member combined elements,

132
00:09:28.850 --> 00:09:32.970
we'll end up with 1000 person elements.

133
00:09:32.970 --> 00:09:34.640
At this point in time,

134
00:09:34.640 --> 00:09:36.310
it's gonna be an empty element.

135
00:09:36.310 --> 00:09:37.770
There'll be nothing inside it,

136
00:09:37.770 --> 00:09:40.250
but the element will exist.

137
00:09:40.250 --> 00:09:42.440
So that's it for this video.

138
00:09:42.440 --> 00:09:44.500
Let's just save out changes.

139
00:09:44.500 --> 00:09:49.050
Let's finish by testing what we've got so far.

140
00:09:49.050 --> 00:09:58.180
And just to remind you normally you would be going into developer using one of the commands

141
00:09:58.180 --> 00:09:59.430
in the XML group.

142
00:09:59.430 --> 00:10:02.660
But were you working with XML Transformation?

143
00:10:02.660 --> 00:10:08.850
What you have to do is to go to file open and access the XML file that way.

144
00:10:08.850 --> 00:10:18.160
So we go across to creating new elements and branches on because it contains the style

145
00:10:18.160 --> 00:10:19.920
sheet processing instruction.

146
00:10:19.920 --> 00:10:25.610
Excel displays this dialogue that allows us to choose branches but xsl to do the

147
00:10:25.610 --> 00:10:26.650
transformation.

148
00:10:26.650 --> 00:10:30.350
Then we have the standard warning message.

149
00:10:30.350 --> 00:10:36.140
We can leave the defaults XML table option and click.

150
00:10:36.140 --> 00:10:36.870
OK,

151
00:10:36.870 --> 00:10:38.850
I can understand it message.

152
00:10:38.850 --> 00:10:45.630
And here we've got a person column with lots of empty rows and they could go across the

153
00:10:45.630 --> 00:10:47.820
developer source.

154
00:10:47.820 --> 00:10:50.990
That's what we've got so far.

155
00:10:50.990 --> 00:10:57.350
We have people as the root element and then person as the repeating child element.

156
00:10:57.350 --> 00:11:01.040
Let's just look at what this looks like as an XML document.

157
00:11:01.040 --> 00:11:04.330
So before we can export this,

158
00:11:04.330 --> 00:11:06.740
we need to put something in each of these rows,

159
00:11:06.740 --> 00:11:12.750
so I'll just put person one and then just company that down.

160
00:11:12.750 --> 00:11:18.500
And now we've got something that we can export export older,

161
00:11:18.500 --> 00:11:19.390
too.

162
00:11:19.390 --> 00:11:29.050
Let's go with people and let's have a look at the result in documents.

163
00:11:29.050 --> 00:11:36.390
So that's the XML output that's being generated by our style Street.

164
00:11:36.390 --> 00:11:36.880
So far,

165
00:11:36.880 --> 00:11:43.650
we've got the people root element and then lots of empty person elements inside it.

166
00:11:43.650 --> 00:11:49.100
So in the next video,

167
00:11:49.100 --> 00:11:52.250
we'll move on to look at using XSL Copy Off,

168
00:11:52.250 --> 00:11:58.990
which is one of the key elements that's used for transferring information from the input

169
00:11:58.990 --> 00:12:02.150
document into the Output XML document.

