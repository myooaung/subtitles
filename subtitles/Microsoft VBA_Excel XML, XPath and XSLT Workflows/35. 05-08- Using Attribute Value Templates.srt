1
00:00:00,000 --> 00:00:11,020
in this section,

2
00:00:11,020 --> 00:00:14,750
we looked at the basics of working with excess lt style sheets,

3
00:00:14,750 --> 00:00:21,340
and we've done so in the context of imported XML data into Microsoft Excel excess.

4
00:00:21,340 --> 00:00:23,650
Lt is a very deep topic,

5
00:00:23,650 --> 00:00:27,370
and excess lt style streets can be extremely complex.

6
00:00:27,370 --> 00:00:29,460
And as you can imagine,

7
00:00:29,460 --> 00:00:32,050
we're only just scratching the surface.

8
00:00:32,050 --> 00:00:34,480
But no look at excess.

9
00:00:34,480 --> 00:00:38,730
Lt is complete without the final topic that we're gonna cover,

10
00:00:38,730 --> 00:00:41,450
which is attribute value templates.

11
00:00:41,450 --> 00:00:46,350
So that's going to sub folder number eight and just have a look at how they work.

12
00:00:46,350 --> 00:00:47,900
So the local branches,

13
00:00:47,900 --> 00:00:51,950
the xsl and this is where we left off in the last video.

14
00:00:51,950 --> 00:00:57,670
And let's focus on the section of the style sheet where we specifying the output that we

15
00:00:57,670 --> 00:01:05,950
want to generate and the two elements that leave used to do that xsl element on xsl

16
00:01:05,950 --> 00:01:10,670
contribute as well as using these two elements access.

17
00:01:10,670 --> 00:01:14,740
Lt also permits you to use literal elements,

18
00:01:14,740 --> 00:01:21,550
so to create a person element instead of sane xsl element name equals person.

19
00:01:21,550 --> 00:01:26,010
You can simply type a person tag like said,

20
00:01:26,010 --> 00:01:35,840
and then obviously you need to close that person tang on the bottom and that will produce

21
00:01:35,840 --> 00:01:37,650
exactly the same result.

22
00:01:37,650 --> 00:01:43,650
So let's do that for the other elements that were output in stuff I D.

23
00:01:43,650 --> 00:01:57,750
And then we'll stroll to the top and do the same with the root element.

24
00:01:57,750 --> 00:02:18,490
The main benefit of using literal tags in this way is that your code tends to be shorter

25
00:02:18,490 --> 00:02:22,310
and it begins to resemble the output that you're created.

26
00:02:22,310 --> 00:02:28,050
So you've got a better idea of what the output will look like as you're creating your style

27
00:02:28,050 --> 00:02:29,400
sheet on.

28
00:02:29,400 --> 00:02:33,970
This becomes even more the case when you do the same thing for attributes.

29
00:02:33,970 --> 00:02:36,850
So instead of using xsl attributes,

30
00:02:36,850 --> 00:02:42,800
you can actually write the attribute inside the opening tag of the element to which you

31
00:02:42,800 --> 00:02:43,890
want to attack it.

32
00:02:43,890 --> 00:02:46,930
So here we would just put the name of the attributes,

33
00:02:46,930 --> 00:02:50,850
which is role equals double quotes.

34
00:02:50,850 --> 00:02:53,600
Then we can do the same for Branch.

35
00:02:53,600 --> 00:02:58,450
And then inside the double quotes,

36
00:02:58,450 --> 00:03:05,650
we have the option of inserting the expats that we have inside xsl value ALS.

37
00:03:05,650 --> 00:03:09,050
So I can now copy this expert statement.

38
00:03:09,050 --> 00:03:15,680
But if I was simply to paste it inside these double quotes,

39
00:03:15,680 --> 00:03:21,150
I would be implying that I want literally what it says inside the quotes.

40
00:03:21,150 --> 00:03:26,530
So I need to find a way to tell the excess lt process er that what's inside these double

41
00:03:26,530 --> 00:03:31,250
puts is actually an expanse statement that needs to be processed accordingly.

42
00:03:31,250 --> 00:03:38,000
On the mechanism for doing this is called an attribute value template on the syntax for

43
00:03:38,000 --> 00:03:40,190
indicated an attribute value template.

44
00:03:40,190 --> 00:03:42,650
It's curly braces,

45
00:03:42,650 --> 00:03:47,150
so you find now paste my expert inside those curly braces.

46
00:03:47,150 --> 00:03:51,950
I've indicated that this is X path as opposed to a literal string,

47
00:03:51,950 --> 00:03:55,810
and I can do the same with the value off the branch,

48
00:03:55,810 --> 00:03:56,810
Elhanan said.

49
00:03:56,810 --> 00:04:04,580
It's copy all of that and then paste it inside curly braces.

50
00:04:04,580 --> 00:04:13,430
So now these to attribute declarations are surplus to requirements,

51
00:04:13,430 --> 00:04:14,650
I could get rid of them.

52
00:04:14,650 --> 00:04:17,640
So now,

53
00:04:17,640 --> 00:04:19,990
as I'm looking at the xsl code,

54
00:04:19,990 --> 00:04:24,450
I can get a much better idea of what the output documents gonna look like.

55
00:04:24,450 --> 00:04:25,940
So here I'll have,

56
00:04:25,940 --> 00:04:27,750
like people root element,

57
00:04:27,750 --> 00:04:34,250
then inside that have a person element inside of which have role and branch.

58
00:04:34,250 --> 00:04:35,570
Now,

59
00:04:35,570 --> 00:04:36,280
as you can imagine,

60
00:04:36,280 --> 00:04:41,340
I can't do the same thing with the department attributes because I've got a complex

61
00:04:41,340 --> 00:04:44,310
definition of what needs to go inside,

62
00:04:44,310 --> 00:04:51,150
so we'll need to leave my xsl True's intact inside the xsl attributes element.

63
00:04:51,150 --> 00:04:58,190
But wherever I have a simple xsl value off statement that I can use this mechanism of doing

64
00:04:58,190 --> 00:05:04,720
a literal definition off my attributes and then using this very useful attribute value

65
00:05:04,720 --> 00:05:11,950
template mechanism to specify the experts that will generate the content for that attribute

66
00:05:11,950 --> 00:05:11,950
.

67
00:05:11,950 --> 00:05:15,900
So that's what attribute value templates are,

68
00:05:15,900 --> 00:05:17,150
and that's how they work.

69
00:05:17,150 --> 00:05:24,850
Let's just save and do one final test in Excel to make sure that everything still works.

70
00:05:24,850 --> 00:05:36,250
Uh,

71
00:05:36,250 --> 00:05:45,100
and as you can see,

72
00:05:45,100 --> 00:05:47,460
everything is still working on.

73
00:05:47,460 --> 00:05:49,250
We go across to developer.

74
00:05:49,250 --> 00:05:53,650
Look at our map were still there all three attributes.

75
00:05:53,650 --> 00:05:57,630
So just bear that in mind.

76
00:05:57,630 --> 00:05:59,620
You've got two ways of working.

77
00:05:59,620 --> 00:06:04,200
You can either use xsl element and xsl attribute,

78
00:06:04,200 --> 00:06:12,500
or you can use literal strings to define your elements and your attributes and then used

79
00:06:12,500 --> 00:06:18,250
attribute value templates to specify the value off each of those attributes.

80
00:06:18,250 --> 00:06:22,220
So that completes our look at excess.

81
00:06:22,220 --> 00:06:23,230
Lt.

82
00:06:23,230 --> 00:06:23,820
And indeed,

83
00:06:23,820 --> 00:06:25,140
it completes the course.

84
00:06:25,140 --> 00:06:27,150
Hope you found it useful.

85
00:06:27,150 --> 00:06:29,650
I'd appreciate any feedback that you have.

86
00:06:29,650 --> 00:06:31,520
And if you have any questions,

87
00:06:31,520 --> 00:06:32,840
feel free to ask.

88
00:06:32,840 --> 00:06:34,720
So thank you very much for your time.

89
00:06:34,720 --> 00:06:37,330
And I hope to meet you again on another calls.

90
00:06:37,330 --> 00:06:38,050
Goodbye

