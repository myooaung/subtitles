WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.490 --> 00:00:05.460
Let's move on to adding some JavaScript to our project,

00:00:05.460 --> 00:00:08.070
where we're really going to bring our project to life.

00:00:08.070 --> 00:00:12.375
To do this, we're going to create a script section down at the very bottom.

00:00:12.375 --> 00:00:15.980
So if we scroll to the end of our index.html,

00:00:15.980 --> 00:00:18.860
just above the closing body tag,

00:00:18.860 --> 00:00:23.425
we can insert our JavaScript inside of the script elements.

00:00:23.425 --> 00:00:26.180
This will have an opening and closing tag,

00:00:26.180 --> 00:00:29.540
and all of our code will go between this section.

00:00:29.540 --> 00:00:32.270
So let's think about what we want to do here.

00:00:32.270 --> 00:00:35.090
We have the bill section up at the top

00:00:35.090 --> 00:00:38.065
and the user is going to add a value inside here here.

00:00:38.065 --> 00:00:42.965
So once this is done, we want to run some code to update all of the values.

00:00:42.965 --> 00:00:45.770
To do this, we can create a function which is going to

00:00:45.770 --> 00:00:48.815
be responsible for all of these changes.

00:00:48.815 --> 00:00:51.860
We do this with the function keyword

00:00:51.860 --> 00:00:55.375
followed by a name which you want to give it to this function.

00:00:55.375 --> 00:01:00.450
We could also possibly insert an augments between these brackets if we wanted to.

00:01:00.450 --> 00:01:04.330
I'm going to take a look at how to do this later on in this project.

00:01:04.330 --> 00:01:07.610
We now know we need to understand that everything which we add in-between

00:01:07.610 --> 00:01:12.800
these curly braces will be run each time we call this update function.

00:01:12.800 --> 00:01:16.415
So how do we actually call this update function?

00:01:16.415 --> 00:01:19.070
Well, there's multiple ways we can do this.

00:01:19.070 --> 00:01:23.230
As an example, we can do this when an element has been clicked.

00:01:23.230 --> 00:01:26.370
Let's scroll up to our bill section.

00:01:26.370 --> 00:01:29.600
If we locate our input as an attribute,

00:01:29.600 --> 00:01:31.910
we can listen for an event.

00:01:31.910 --> 00:01:34.040
An event is when something happens,

00:01:34.040 --> 00:01:37.910
such as an element is clicked or an input is updated.

00:01:37.910 --> 00:01:40.895
This will then allow us to call our function.

00:01:40.895 --> 00:01:44.000
As an example, we're going to listen out for a click,

00:01:44.000 --> 00:01:45.920
so we can use on click.

00:01:45.920 --> 00:01:47.509
Inside of the quotations,

00:01:47.509 --> 00:01:49.760
we add the code which we want to run.

00:01:49.760 --> 00:01:51.500
In our case, we want to call

00:01:51.500 --> 00:01:55.775
the update function followed by the brackets, just like this.

00:01:55.775 --> 00:01:58.655
If we save this and reload the browser,

00:01:58.655 --> 00:01:59.900
when we click on this input,

00:01:59.900 --> 00:02:02.875
we don't see anything happen just yet.

00:02:02.875 --> 00:02:07.370
This is because we don't have any code between these curly braces.

00:02:07.370 --> 00:02:10.955
We can check this is working by doing a console log,

00:02:10.955 --> 00:02:15.290
which is going to output a message to the console that you say,

00:02:15.290 --> 00:02:19.460
function called, save our file.

00:02:19.460 --> 00:02:20.870
If we reload the browser,

00:02:20.870 --> 00:02:23.885
we can now head into the developer tools.

00:02:23.885 --> 00:02:27.780
We do this with right-click and inspect.

00:02:28.360 --> 00:02:31.740
Click on the console tab.

00:02:31.870 --> 00:02:34.730
Since we're listening to a click event,

00:02:34.730 --> 00:02:37.480
we now want to click this input, just here.

00:02:37.480 --> 00:02:40.360
Listen output detect the function calls.

00:02:40.360 --> 00:02:43.745
So our function is now being called correctly.

00:02:43.745 --> 00:02:49.110
Let's also keep this open for later and shrink the browser down.

00:02:49.760 --> 00:02:55.310
However though, calling this function when this is clicked on is not a good use case.

00:02:55.310 --> 00:02:57.830
We actually want to run this function each time

00:02:57.830 --> 00:03:01.585
the user inputs anything inside of this input field.

00:03:01.585 --> 00:03:07.400
We can scroll back up to our input and change the type to be on inputs.

00:03:07.400 --> 00:03:10.070
Let's change this. Rather than on click,

00:03:10.070 --> 00:03:12.040
we need on inputs.

00:03:12.040 --> 00:03:16.820
Reload the browser. Now each time we type a number inside of this field,

00:03:16.820 --> 00:03:20.710
we see that our function has now been called three times.

00:03:20.710 --> 00:03:22.910
However though, for this function,

00:03:22.910 --> 00:03:25.310
we want to make it a little bit more useful rather than

00:03:25.310 --> 00:03:27.965
just simply logging some texts to the console.

00:03:27.965 --> 00:03:31.345
Instead, what we want to do is to grab the value of our bill,

00:03:31.345 --> 00:03:33.670
the percentage for our slider,

00:03:33.670 --> 00:03:38.345
and also the number of people which the bill is being split between.

00:03:38.345 --> 00:03:44.575
To do this, we can access the values which have been inputs into any of these fields.

00:03:44.575 --> 00:03:47.320
First of all, we select the full documents,

00:03:47.320 --> 00:03:48.935
which is the web page.

00:03:48.935 --> 00:03:52.715
We can then narrow this down to select a single element.

00:03:52.715 --> 00:03:57.340
One of the ways we can grab this is to select this by the element's ID.

00:03:57.340 --> 00:04:00.800
So the first one we want to grab is the value of this bill.

00:04:00.800 --> 00:04:03.360
If we scroll up to the bill,

00:04:03.650 --> 00:04:07.035
this has the value of your bill.

00:04:07.035 --> 00:04:09.095
So we can make use of this.

00:04:09.095 --> 00:04:10.565
We say documents.

00:04:10.565 --> 00:04:16.485
Then we can grab an element by the ID and add in the value of your bill.

00:04:16.485 --> 00:04:19.360
Now we have access to these particular elements.

00:04:19.360 --> 00:04:22.550
We can now solve this inside of a variable.

00:04:22.550 --> 00:04:28.460
We can create a variable with the let keyword and then give the same name, such as bill.

00:04:28.460 --> 00:04:32.420
This will now store the value of everything on the right-hand side,

00:04:32.420 --> 00:04:34.565
for this value called bill.

00:04:34.565 --> 00:04:36.410
If we want to check this is working,

00:04:36.410 --> 00:04:42.460
we can also do a new console log passing in the value of bill.

00:04:43.040 --> 00:04:47.690
This will be called each time we add something to our input.

00:04:47.690 --> 00:04:49.940
If we take a look at the console,

00:04:49.940 --> 00:04:52.010
we see the value of the actual inputs,

00:04:52.010 --> 00:04:54.620
elements with the type of number.

00:04:54.620 --> 00:04:58.070
However, what we want for our Tip calculator is

00:04:58.070 --> 00:05:01.900
to actually grab the contents which the user inputs.

00:05:01.900 --> 00:05:05.145
We can do this with.value.

00:05:05.145 --> 00:05:10.035
Let's try this again by reloading, enter a value.

00:05:10.035 --> 00:05:16.000
Now the actual value entered by the user will now be stored in this bill variable.

00:05:16.000 --> 00:05:17.510
So now we know how to do this.

00:05:17.510 --> 00:05:21.675
We can also grab the tip percent and also the split.

00:05:21.675 --> 00:05:25.450
So let's copy and paste this into more times.

00:05:25.450 --> 00:05:28.360
The second one is the tipPercent.

00:05:28.360 --> 00:05:30.415
We need to also grab an ID.

00:05:30.415 --> 00:05:32.360
So let's take a look for this.

00:05:32.360 --> 00:05:36.400
The first range input has the ID of tipInputs.

00:05:36.400 --> 00:05:39.985
So copy this. It is in.

00:05:39.985 --> 00:05:43.460
The third one is going to be for the split.

00:05:44.330 --> 00:05:48.520
This has an ID of split input.

00:05:49.820 --> 00:05:55.105
Just before we move on, let's log all three of these values and check their are working.

00:05:55.105 --> 00:06:00.710
The next one is the tipPercent and also the split.

00:06:00.710 --> 00:06:05.670
Reload the browser, let's go for the value of 67.

00:06:05.670 --> 00:06:07.915
So we see the value of 67.

00:06:07.915 --> 00:06:10.480
Then we have the value of the tip which is currently

00:06:10.480 --> 00:06:13.850
zero and then the split which is one percent.

00:06:13.850 --> 00:06:18.039
Just as a quick tip to when console log in multiple values,

00:06:18.039 --> 00:06:21.430
we can also wrap these in the curly braces to turn these into

00:06:21.430 --> 00:06:25.375
an object and these will be a lot more easier to read.

00:06:25.375 --> 00:06:28.190
Add a value. This will then output

00:06:28.190 --> 00:06:32.980
the property name along with the value to make it much more readable in the console.

00:06:32.980 --> 00:06:35.000
This now means we're capturing all of

00:06:35.000 --> 00:06:38.930
our user inputs and we can work with these values very soon.

00:06:38.930 --> 00:06:42.365
However, you will notice, if we work with the range inputs,

00:06:42.365 --> 00:06:45.625
that none of the values are updated in the console.

00:06:45.625 --> 00:06:48.980
This is because we are only calling this update

00:06:48.980 --> 00:06:53.110
function each time the user inputs something to this bill.

00:06:53.110 --> 00:06:55.040
However, for our use case,

00:06:55.040 --> 00:06:57.560
it would be a lot more practical if this function was

00:06:57.560 --> 00:07:01.735
updated when the user clicked on any of these inputs.

00:07:01.735 --> 00:07:06.225
So to do this, let's remove the on input event handler.

00:07:06.225 --> 00:07:09.765
Instead we can place this on the main wrapper.

00:07:09.765 --> 00:07:13.010
This main section is wrapping all of our inputs.

00:07:13.010 --> 00:07:17.015
So now if we save this, refresh the browser,

00:07:17.015 --> 00:07:20.344
and now each time one of our inputs has been updated,

00:07:20.344 --> 00:07:22.535
this will now call our function.

00:07:22.535 --> 00:07:28.435
We see the tip percentage being increased and also the split is now between three people.

00:07:28.435 --> 00:07:33.020
This means our update function is now being called for all three inputs.

00:07:33.020 --> 00:07:35.600
But we can also improve on this by removing

00:07:35.600 --> 00:07:39.995
our JavaScript and also separating this from the HTML.

00:07:39.995 --> 00:07:43.060
The way we can do this if we set an ID,

00:07:43.060 --> 00:07:45.370
let's go for a container.

00:07:45.370 --> 00:07:48.380
We can now keep this as pure HTML and

00:07:48.380 --> 00:07:51.805
only have our JavaScript in the script section below.

00:07:51.805 --> 00:07:55.505
So first, let's create a reference to this main wrapper.

00:07:55.505 --> 00:08:00.515
We do this just as above with document.getElementById.

00:08:00.515 --> 00:08:02.960
The ID name which we just placed in is

00:08:02.960 --> 00:08:08.480
container and we can store this in a variable called container.

00:08:08.480 --> 00:08:10.685
So now we have our container.

00:08:10.685 --> 00:08:14.870
We want to re-introduce our on input event handler.

00:08:14.870 --> 00:08:17.930
We can do this with addEventListener.

00:08:17.930 --> 00:08:20.960
This is going to take in two values.

00:08:20.960 --> 00:08:24.980
The first value is the type of event we want to listen for.

00:08:24.980 --> 00:08:28.370
Just like before, we can use things such as click or

00:08:28.370 --> 00:08:31.685
inputs and then separate it by a comma,

00:08:31.685 --> 00:08:34.430
the name of the function which we want to call.

00:08:34.430 --> 00:08:37.245
In our case, this is update.

00:08:37.245 --> 00:08:40.825
Let's save this file and check this is working okay.

00:08:40.825 --> 00:08:44.060
When we click on the bill, this is updated.

00:08:44.060 --> 00:08:46.040
If we increase the tip,

00:08:46.040 --> 00:08:48.230
this is also updated too.

00:08:48.230 --> 00:08:50.990
Finally, the split value.

00:08:50.990 --> 00:08:56.585
This now leaves our function with access to all of the information which we need.

00:08:56.585 --> 00:08:59.600
Next we're going to use all of these values to create

00:08:59.600 --> 00:09:04.710
our tip calculations and then display them in the user interface.
