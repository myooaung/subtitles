WEBVTT

00:05.700 --> 00:13.420
So you at this point in the course have gotten your application back and now you're on to the bug testing.

00:13.890 --> 00:17.510
This is a crucial phase of the application process.

00:17.530 --> 00:19.200
You listened to my previous little bit.

00:19.200 --> 00:20.610
Don't be afraid of bugs.

00:20.610 --> 00:23.790
Expect the bugs and embrace the bugs.

00:23.790 --> 00:29.610
There is no reason why the bug hunting process can't be fun because the more bugs you find the more

00:29.610 --> 00:30.830
bugs you can fix.

00:31.020 --> 00:34.890
The more bugs I find the less bugs that my users will find.

00:35.980 --> 00:36.880
I like to think of bugs.

00:36.880 --> 00:38.820
Kind of like panning for gold.

00:38.860 --> 00:44.770
You just strike over here or you strike over there and eventually you'll find something with software

00:44.860 --> 00:47.410
it honestly you can't find every single bug.

00:47.440 --> 00:49.020
But you want to find the big ones.

00:49.060 --> 00:55.420
So don't neglect this section and I'm going to give you some tips and tricks some warm up ideas for

00:55.420 --> 00:57.320
how you can find bugs.

00:57.320 --> 01:02.620
The general idea behind how you're going to look for all of the bugs in your mobile application or your

01:02.620 --> 01:08.540
web application or whatever your freelancer is delivered to you is just time on task.

01:08.770 --> 01:11.870
That's why we talked previously about using the poem Medoro.

01:11.980 --> 01:17.640
Personally if I have a medium size application I will go through four to five pomo Darroze and that's

01:17.770 --> 01:22.690
hour and 40 minutes of solidly hitting the Web site or that mobile application or whatever it is that

01:22.690 --> 01:23.750
you built.

01:23.800 --> 01:32.110
You might not be as OCD as I am but I prefer I would like to see you at least hit the major areas so

01:32.110 --> 01:37.330
the first thing I do whenever I get my application back is I start with number 1 graphics graphics is

01:37.330 --> 01:42.310
an easy one and it's a it's a kind of a sore spot I've noticed and very often when you find problems

01:42.310 --> 01:44.210
in the graphics department.

01:44.260 --> 01:46.740
Now when you have a developer.

01:46.780 --> 01:47.860
Most likely are not.

01:47.860 --> 01:52.720
Also the graphic designer they most likely took design from somewhere else earlier in the course.

01:52.720 --> 01:58.330
We talked about getting a graphic designer and how you can get the end product which is a photoshop

01:58.330 --> 02:01.700
file their developer can convert that into your application.

02:01.750 --> 02:07.240
If you didn't get a graphic designer and you're using a template I still suggest you do a quick view

02:07.270 --> 02:09.460
of the graphics itself.

02:09.460 --> 02:15.370
It's not really the same because templates are typically designed to look good no matter what and the

02:15.370 --> 02:21.340
developers not following a set design picture he's just using the elements that are available.

02:21.340 --> 02:26.740
Let's assume that you use a graphic designer and he is ninety nine designs even you have a page that

02:26.740 --> 02:28.660
you designed for your web application.

02:28.660 --> 02:34.030
Now look at the application that your freelancer brought up or is delivered to you in a separate window

02:34.090 --> 02:38.230
open up a photoshop file of your design.

02:38.230 --> 02:39.880
If there is immediate discrepancies.

02:39.940 --> 02:42.190
Well there you go write those down.

02:42.190 --> 02:44.490
Send them to your freelancer.

02:44.660 --> 02:48.610
I want you to make sure that you're using Google Docs or this entire thing and when you use Google Docs

02:48.610 --> 02:50.580
you find a bug right next to it.

02:50.590 --> 02:53.140
The time that you find the bug at.

02:53.230 --> 02:56.890
Don't ask me why it helps later and helps the developer.

02:56.890 --> 02:58.290
It's just worth doing.

02:58.690 --> 02:59.910
You do take a quick glance.

02:59.950 --> 03:01.510
You'll look at your graphic design.

03:01.510 --> 03:04.000
You might notice something immediately after that.

03:04.000 --> 03:06.760
Once you think you've noticed all the big things look really small.

03:06.790 --> 03:10.710
Zoom into your photoshop file and look at the application.

03:10.720 --> 03:13.060
Chances are you'll find things that are off.

03:13.060 --> 03:18.190
There is a term we use called pixel perfect pixel perfect means that the application matches every single

03:18.190 --> 03:20.220
pixel of the graphic design.

03:20.290 --> 03:23.050
It's up to you if you want to be that close to the actual design.

03:23.050 --> 03:24.420
I always go for pixel perfect.

03:24.430 --> 03:28.660
There's no reason it shouldn't be the case that the developer can make the exact same way that your

03:28.660 --> 03:30.240
graphic designer designed it.

03:30.290 --> 03:35.650
But if you want to have that strict of a guideline it's very possible that you could end up with a lot

03:35.650 --> 03:36.930
of mismatches.

03:37.000 --> 03:41.490
Do the buttons look the exact same to the pages load correctly.

03:41.500 --> 03:44.420
Are there breaks in the line pages.

03:44.650 --> 03:46.040
Look at the width of the website.

03:46.040 --> 03:49.450
Is it wider than it was in the graphic design.

03:49.760 --> 03:53.090
Is the background color match the graphic design.

03:53.110 --> 03:59.490
These are things that are very common and a lot of developers will try to cut corners by skipping over.

03:59.730 --> 04:04.780
It might even be the case that you can't put your finger on what exactly is wrong but it's worth highlighting

04:04.780 --> 04:10.410
it to the freelancer and showing them hey this doesn't look right because chances are if you drill down

04:10.410 --> 04:15.730
and zoom in you'll notice that something is off in some detail that they missed.

04:15.730 --> 04:17.520
So graphic design is fairly intuitive.

04:17.520 --> 04:19.720
Just use your eyeballs and scan it.

04:19.740 --> 04:23.560
See if you notice anything that's off and make sure that you report it.

04:23.760 --> 04:27.100
If you don't want to stick to pixel perfect guideline that's up to you.

04:27.120 --> 04:31.110
But you do want to make sure that sticks to your graphic design because you liked your graphic design

04:31.110 --> 04:32.020
to begin with.

04:32.040 --> 04:33.760
There's no reason to change it at this point.

04:34.570 --> 04:37.240
The second thing I move onto after that are forms.

04:37.240 --> 04:39.990
Chances are your application has a form somewhere in it.

04:40.060 --> 04:45.910
Well then not it's a form for logging in or a form for entering an account information you know whatever

04:45.910 --> 04:47.080
your application does.

04:47.080 --> 04:50.020
Chances are it's going to take input from the user.

04:50.050 --> 04:51.100
Look at those forms.

04:51.100 --> 04:56.230
These are problem areas every single time we build an application.

04:56.260 --> 04:57.880
Try filling them out as yourself.

04:57.910 --> 05:02.330
Try filling out some honest information see how that reacts after you do that.

05:02.340 --> 05:09.640
Try bouncing around the page and try to fill out all of the functionality of your application.

05:09.640 --> 05:11.950
Then go back and imagine you're someone else.

05:11.950 --> 05:19.040
We call this in software design test cases just imagine you're someone else a few you signed up as someone

05:19.040 --> 05:23.390
who is 30 years old go back and sign up as someone who's 45 years old 6 years old.

05:23.390 --> 05:32.400
Change your name try inserting an accent mark on top of your name just try different combinations out.

05:32.480 --> 05:33.740
It doesn't make sense to you.

05:33.740 --> 05:37.850
Thinking about it because probably you're not familiar with how the software process works but the more

05:37.850 --> 05:41.870
you do this the more likely you'll find some kind of internal error.

05:41.990 --> 05:45.110
At first you'll notice immediately there's some issues.

05:45.110 --> 05:50.120
One of my favorite things to do with forms is enter into maximum character limit.

05:50.240 --> 05:53.730
A lot of developers forget to add the maximum character limit.

05:53.780 --> 05:56.430
So meaning what it says they like first name last name.

05:56.450 --> 06:00.350
What if my first name has 100 digits in it you'd say Why does that matter.

06:00.350 --> 06:02.570
Well chances are someone is going to try that.

06:02.630 --> 06:05.060
There's a good likelihood that it crash your system.

06:05.150 --> 06:09.220
So try doing that try entering a name that has foreigner characters and see if the system accepts it.

06:09.230 --> 06:11.180
If it doesn't accept it what happens.

06:11.180 --> 06:15.040
Try to break and try to be the worst user you possibly can.

06:15.140 --> 06:20.480
Try to introduce special characters in in a percent sign or an asterisk or things that you wouldn't

06:20.480 --> 06:22.320
expect to put in your form.

06:22.640 --> 06:23.720
If it asked for a digit.

06:23.720 --> 06:30.470
Try putting in a word and if it asked for a word try putting in a special character try to put in everything

06:30.470 --> 06:36.080
wrong that you can think of like if it asked for state your city would ask for your zip code put your

06:36.080 --> 06:38.060
state do these kind of basic things.

06:38.060 --> 06:44.180
You'll find out very quickly where the developer cut corners and things he or she might have forgotten

06:44.180 --> 06:51.410
to accommodate for after you're done screwing around with your forms and anything that can take in information.

06:51.550 --> 06:54.070
Try creating multiple counts.

06:54.140 --> 06:58.210
Making out for a fake user or another fake user another fake user and another fake user.

06:58.210 --> 07:04.240
Now if your application communicates between the two try to communicate for example with a sprint click

07:04.240 --> 07:07.780
application we had one that had messaging.

07:07.780 --> 07:12.250
And so in order to test the messaging it wasn't sufficient for us to create one account and send a bunch

07:12.250 --> 07:13.120
of messages.

07:13.240 --> 07:18.970
We had to create hundreds of accounts with different information and then communicate back and forth.

07:19.000 --> 07:23.870
We didn't just try to communicate in single regular text which try to communicate messages or try to

07:23.870 --> 07:25.340
communicate in special characters.

07:25.360 --> 07:30.910
We tried to communicate in numbers who tried to communicate anything that could possibly break the system.

07:30.910 --> 07:39.630
You don't have to use 100 users but you should create three or four after you've tested out the graphics

07:39.810 --> 07:45.210
the forms you've created a bunch of accounts and you try to do any type of interaction where these accounts

07:45.210 --> 07:46.820
communicate with each other.

07:47.070 --> 07:52.350
Why then typically just move on to a phase where I try to see every single screen.

07:52.350 --> 07:57.180
Now you might have forgotten all of the screens you design with your graphic designer or there are a

07:57.180 --> 07:59.490
lot of screens you might not have thought about.

07:59.490 --> 08:01.590
Try to find a page that doesn't exist.

08:01.740 --> 08:05.760
If you have a search bar in your application go to a search bar and just search for all sorts of things

08:05.760 --> 08:06.810
that don't exist.

08:06.810 --> 08:08.130
See how it reacts.

08:09.100 --> 08:14.050
If your application handles images that's a big area for potential bugs.

08:14.050 --> 08:16.830
Try uploading files that aren't correct.

08:16.830 --> 08:21.610
You can ask for a jpeg PSINet a PNB if it takes all common image files.

08:21.610 --> 08:24.390
Try sending in a movie file to see what happens.

08:24.460 --> 08:28.880
Try sending a image that is way too large and one that's way too small.

08:29.200 --> 08:33.280
Honestly you don't even need to certainly plan it out just see what's on your computer upload it and

08:33.280 --> 08:34.560
see what happens.

08:34.570 --> 08:38.820
Chances are you'll run into something and you can keep growing your google doc list.

08:39.990 --> 08:46.420
Now I want to stress in this lecture that there is no set plan for bug hunting.

08:46.420 --> 08:51.970
People build their entire careers off of software testing so don't expect that you're going to get every

08:51.970 --> 08:52.570
single one.

08:52.570 --> 08:55.440
Don't even expect that you're going to get 80 percent of them.

08:55.450 --> 09:00.590
There are a lot of bugs that only come out under for Ensign's performance stress.

09:00.700 --> 09:04.480
You're not going to be able to find all the bugs that happen that could potentially happen when you

09:04.480 --> 09:07.030
have thousands of users so don't expect too much.

09:07.060 --> 09:10.600
Keep in mind that these things are going to happen in the future.

09:11.210 --> 09:18.310
The point to being a good bug hunter I think is just spending as much time as you can with your application.

09:18.350 --> 09:23.390
Try to flip over every single stone you can without getting too excessive.

09:23.390 --> 09:29.060
You don't want to spend tens of hours messing with your application unless you have the free time to

09:29.060 --> 09:29.570
do that.

09:29.580 --> 09:31.510
And that's worth doing for you.

09:31.520 --> 09:37.610
I typically think that it's not try to be economical with your time but at the same time make sure you're

09:37.610 --> 09:42.290
spending at least an hour playing with it because I think that in the end you'll have a much better

09:42.320 --> 09:43.670
outcome.

09:43.670 --> 09:48.870
Keep in mind also that bugs typically operate in clusters once you find one bug.

09:48.950 --> 09:53.010
It's not that you just found a bug you found an entire area that your developer hasn't thought about.

09:53.030 --> 09:55.280
So you can really kind of go after that.

09:55.600 --> 09:56.720
The example.

09:56.720 --> 10:03.290
Maybe he didn't plan for how the system reacts when it's under Wi-Fi or how it reacts when it's on the

10:03.290 --> 10:04.790
edge network.

10:04.790 --> 10:09.850
When you're on say like the Edge network meaning you're really out there you have a very limited connection.

10:09.860 --> 10:14.220
How did the pages of load other sections are very browser heavy.

10:14.480 --> 10:19.660
If you try that out you might get a cluster of bugs so happy hunting.

10:19.660 --> 10:22.090
Spend as much time as you can on it.

10:22.090 --> 10:24.790
Don't get frustrated by the ones you can't find.

10:24.790 --> 10:27.710
Keep in mind you're not going to find all of them.

10:27.790 --> 10:34.350
This lecturer didn't have a step by step structure bug testing unfortunately just does not have a structure.

10:34.360 --> 10:40.750
It's really kind of an art and less science so I think the best way of being a good bug hunter is to

10:40.750 --> 10:41.930
have fun with it.

10:42.010 --> 10:43.620
Try to beat your application.

10:43.630 --> 10:49.150
Try to break it down try to screw it up as much as you can because at the end of the day the more you

10:49.150 --> 11:01.120
do that the better the application is going to be in its final version.
