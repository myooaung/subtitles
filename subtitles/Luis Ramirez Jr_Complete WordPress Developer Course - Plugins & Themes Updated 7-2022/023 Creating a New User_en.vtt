WEBVTT
1
00:00:00.120 --> 00:00:03.790
In this lecture, we are going to begin creating a new user.

2
00:00:03.810 --> 00:00:09.630
Just like everything else, WordPress will supply functions for helping us create users.

3
00:00:09.630 --> 00:00:13.950
We do not need to manually insert a user into the database.

4
00:00:13.950 --> 00:00:18.060
These functions will perform additional validation on our data.

5
00:00:18.060 --> 00:00:20.520
They are safer than a manual solution.

6
00:00:20.520 --> 00:00:24.420
To get started, open the sign up php file.

7
00:00:26.520 --> 00:00:32.369
At the bottom of the function, let's return a function called WP insert user.

8
00:00:34.560 --> 00:00:39.270
The WP insert user function will add a new user to our site.

9
00:00:39.300 --> 00:00:43.590
It accepts an array of data that can be inserted into the database.

10
00:00:43.590 --> 00:00:47.970
In the resource section of this lecture, I provide a link to this function.

11
00:00:50.000 --> 00:00:54.200
On the documentation page, scroll to the parameters section.

12
00:00:54.200 --> 00:00:59.170
WordPress will document the various values you can insert into the database.

13
00:00:59.180 --> 00:01:02.120
We're not required to add every property.

14
00:01:02.120 --> 00:01:06.880
At a minimum, we should provide a username, email and password.

15
00:01:06.890 --> 00:01:08.960
Let's head back to the editor.

16
00:01:08.960 --> 00:01:13.910
Inside this array we are going to add a key called user log in.

17
00:01:16.030 --> 00:01:19.330
The user log in key accepts the username.

18
00:01:19.330 --> 00:01:22.720
Let's set this key to the username variable.

19
00:01:24.650 --> 00:01:28.010
Next, add a key called user pass.

20
00:01:28.010 --> 00:01:30.890
The value for this key will be the variable.

21
00:01:33.070 --> 00:01:35.590
Add a key called user email.

22
00:01:37.530 --> 00:01:41.200
After calling this function, a user should have been created.

23
00:01:41.220 --> 00:01:44.550
We could call it a day and leave our function as is.

24
00:01:44.580 --> 00:01:49.920
However, it's very common for sites to log a user in after registering an account.

25
00:01:49.950 --> 00:01:52.500
It provides a great user experience.

26
00:01:52.500 --> 00:01:58.470
We should begin logging the user in forcing a log and will require the ID of the user.

27
00:01:58.530 --> 00:02:01.950
Head back to the documentation page on this page.

28
00:02:01.950 --> 00:02:04.170
Scroll to return section.

29
00:02:06.350 --> 00:02:10.970
According to the documentation, there are two possible return values.

30
00:02:10.970 --> 00:02:17.570
If the user was created, their ID is returned, otherwise an error object is returned.

31
00:02:17.600 --> 00:02:22.220
Typically, PHP will stop running a script if an error occurs.

32
00:02:22.220 --> 00:02:27.350
However, WordPress likes to wrap errors in an object for our convenience.

33
00:02:27.350 --> 00:02:33.800
This behavior allows us to handle errors without crashing our script before logging the user in.

34
00:02:33.800 --> 00:02:36.530
Let's check the return value for an error.

35
00:02:36.560 --> 00:02:38.000
Head back to the editor.

36
00:02:38.000 --> 00:02:41.810
We are going to assign the return value of the WP.

37
00:02:41.810 --> 00:02:45.860
Insert user function to a variable called user ID.

38
00:02:48.100 --> 00:02:53.260
After the WP insert user function, create a conditional statement.

39
00:02:55.390 --> 00:03:01.630
The condition will be a function called is WP error with the user ID variable.

40
00:03:01.660 --> 00:03:06.700
This function will check a value for a valid WordPress error if there is an error.

41
00:03:06.730 --> 00:03:08.230
This function will return.

42
00:03:08.230 --> 00:03:08.830
True.

43
00:03:08.860 --> 00:03:12.100
We should return the response from within the block.

44
00:03:14.240 --> 00:03:19.460
If there isn't an error, we can proceed to log in after the conditional statement.

45
00:03:19.490 --> 00:03:23.900
Let's run a function called WP new user notification.

46
00:03:26.100 --> 00:03:30.970
This function will send an email notification for a new user registration.

47
00:03:30.990 --> 00:03:35.460
It's typical for a site to send an email after a user has signed in.

48
00:03:35.490 --> 00:03:38.190
Best of all, this function is pluggable.

49
00:03:38.190 --> 00:03:44.880
If you have a plugin for handling emails, the email can be formatted with the plugin, otherwise WordPress

50
00:03:44.880 --> 00:03:46.770
will handle sending the email.

51
00:03:46.800 --> 00:03:49.340
This function has three arguments.

52
00:03:49.350 --> 00:03:53.030
The first argument is the user ID of the new user.

53
00:03:53.040 --> 00:03:55.920
Let's pass in the user ID variable.

54
00:03:58.040 --> 00:04:00.710
The second argument is deprecated.

55
00:04:00.770 --> 00:04:03.370
The function ignores the second argument.

56
00:04:03.380 --> 00:04:05.810
It's recommended to pass in null.

57
00:04:07.960 --> 00:04:10.900
The last argument is where to send the email.

58
00:04:10.900 --> 00:04:14.070
Should we send it to the admin user or both?

59
00:04:14.080 --> 00:04:17.829
We can send an email to the user by passing in user.

60
00:04:19.970 --> 00:04:22.600
In some cases you may want the email.

61
00:04:22.610 --> 00:04:24.840
You can set this argument to admin.

62
00:04:24.860 --> 00:04:30.500
Lastly, you can set the value to both for sending emails to the admin and user.

63
00:04:30.650 --> 00:04:34.430
For this case, sending the email to the user will suffice.

64
00:04:34.460 --> 00:04:37.900
Next lets run a function called WP.

65
00:04:37.910 --> 00:04:41.660
Set current user with the user ID variable.

66
00:04:43.790 --> 00:04:49.820
This function was signed in a user to WordPress, they'll immediately become active with their respective

67
00:04:49.820 --> 00:04:50.750
permissions.

68
00:04:50.780 --> 00:04:54.720
Unfortunately, their authentication will not persist.

69
00:04:54.740 --> 00:05:01.700
Afterward, we can run a function called WP, set off cookie with the user ID variable.

70
00:05:03.910 --> 00:05:07.240
This function will add a cookie to the user's browser.

71
00:05:07.270 --> 00:05:12.220
A cookie will allow users to automatically log in after closing the browser.

72
00:05:12.250 --> 00:05:15.580
Creating a cookie is important for persistence.

73
00:05:15.580 --> 00:05:22.330
Browsers will automatically send cookies to the server, which WordPress will use for logging user back

74
00:05:22.330 --> 00:05:23.500
into their account.

75
00:05:23.500 --> 00:05:25.870
Both functions are required for logging.

76
00:05:25.870 --> 00:05:32.770
A user in the first function will immediately log the user in, whereas the second function will allow

77
00:05:32.770 --> 00:05:36.400
a user to revisit our site while staying logged in.

78
00:05:36.700 --> 00:05:37.990
We're almost finished.

79
00:05:37.990 --> 00:05:39.520
There's one final step.

80
00:05:39.520 --> 00:05:44.770
We should notify WordPress and third party plugins that a user has logged in.

81
00:05:44.770 --> 00:05:50.590
There may be other developers who would like to perform additional actions after a user has logged in.

82
00:05:50.590 --> 00:05:52.900
It's not required but recommended.

83
00:05:53.140 --> 00:05:58.210
Throughout this course we've been listening to events with the ADD Action function.

84
00:05:58.210 --> 00:06:02.110
We can trigger any event with a function called due action.

85
00:06:02.110 --> 00:06:05.680
Let's call this function before returning the response.

86
00:06:07.720 --> 00:06:10.700
This function has one required argument.

87
00:06:10.720 --> 00:06:13.360
It's the name of the event or a hook.

88
00:06:13.390 --> 00:06:19.720
The proper hook for notifying other plugins of a user login is called WP Login.

89
00:06:21.990 --> 00:06:28.410
If another plugin is waiting for a user to log in, they will be able to detect a log in with this hook.

90
00:06:28.440 --> 00:06:31.410
However, we must provide additional data.

91
00:06:31.530 --> 00:06:36.190
External hook functions are not provided with the user who is logged in.

92
00:06:36.210 --> 00:06:41.590
We must provide this data with the hook in the resource section of this lecture.

93
00:06:41.610 --> 00:06:43.620
I provide a link to this hook.

94
00:06:45.850 --> 00:06:48.340
Hooks are documented by WordPress.

95
00:06:48.370 --> 00:06:54.530
According to the documentation, this hook is called after a user logs in by WordPress.

96
00:06:54.550 --> 00:07:00.970
However, we are manually firing this hook because we've created a custom solution for logging in.

97
00:07:01.090 --> 00:07:05.400
The do action function has an unlimited set of arguments.

98
00:07:05.410 --> 00:07:09.250
Arguments after the first argument will be passed onto functions.

99
00:07:09.250 --> 00:07:16.360
Listening to this hook by default, WordPress will send functions to the user's username and the user

100
00:07:16.360 --> 00:07:17.090
object.

101
00:07:17.110 --> 00:07:19.000
We should mimic this behavior.

102
00:07:19.030 --> 00:07:21.620
Otherwise plugins will become confused.

103
00:07:21.640 --> 00:07:23.890
This could potentially throw an error.

104
00:07:24.100 --> 00:07:28.420
Let's head back to the editor above the do action function.

105
00:07:28.430 --> 00:07:30.730
Define a variable called user.

106
00:07:32.880 --> 00:07:36.000
At the moment we don't have the user object.

107
00:07:36.030 --> 00:07:38.160
We only have the user's ID.

108
00:07:38.280 --> 00:07:43.500
A user object contains an entire list of properties related to the user.

109
00:07:43.530 --> 00:07:48.420
We can grab a user's object by running a function called get user by.

110
00:07:50.670 --> 00:07:54.560
The user by function will return a user object.

111
00:07:54.570 --> 00:07:56.240
It has two arguments.

112
00:07:56.250 --> 00:07:59.250
The first argument is how to select a user.

113
00:07:59.250 --> 00:08:04.130
We can grab a user by their ID, email, username or slug.

114
00:08:04.140 --> 00:08:06.570
In our case, we have their ID.

115
00:08:06.600 --> 00:08:08.550
Let's pass an ID.

116
00:08:10.820 --> 00:08:13.120
The second argument is the value.

117
00:08:13.130 --> 00:08:16.070
Let's pass in the user ID variable.

118
00:08:18.180 --> 00:08:24.920
After grabbing the user object, we can update the due action function by passing in the following values.

119
00:08:24.930 --> 00:08:25.620
User.

120
00:08:25.620 --> 00:08:26.040
User.

121
00:08:26.040 --> 00:08:27.390
Login user.

122
00:08:29.590 --> 00:08:33.039
The second argument must be the username of the user.

123
00:08:33.070 --> 00:08:37.000
This information is stored in the user login property.

124
00:08:37.030 --> 00:08:41.010
The third argument must be the entire user object.

125
00:08:41.020 --> 00:08:41.799
Perfect.

126
00:08:41.830 --> 00:08:44.320
We've successfully finished the function.

127
00:08:44.320 --> 00:08:48.880
We've even taken the time to allow plugins to extend our registration.

128
00:08:49.030 --> 00:08:53.020
Let's try testing our endpoint with the postman application.

129
00:08:53.590 --> 00:08:56.800
I'm going to initiate the request one more time.

130
00:08:59.010 --> 00:09:02.880
The user I've created should not exist within the system.

131
00:09:02.910 --> 00:09:07.290
Our end point should be able to create the first user without a problem.

132
00:09:07.320 --> 00:09:12.060
After a few moments, the status property has been set to two.

133
00:09:12.090 --> 00:09:15.780
Unfortunately, we can't test the login feature.

134
00:09:15.810 --> 00:09:19.620
The request was initiated with Postman, not a browser.

135
00:09:19.830 --> 00:09:24.580
If we were to view the front end, we would not be logged in as our new user.

136
00:09:24.600 --> 00:09:27.670
We will test this feature in another lecture.

137
00:09:27.690 --> 00:09:34.980
For now, let's verify the user was created by navigating to the user's page in the admin dashboard.

138
00:09:37.200 --> 00:09:40.770
As you can see, the test user has been created.

139
00:09:40.800 --> 00:09:47.040
You may have a different user if you have different registration details, the registration endpoint

140
00:09:47.040 --> 00:09:48.180
is complete.

141
00:09:48.210 --> 00:09:54.990
The final step is to update the registration form to handle the possible responses from our endpoint.

142
00:09:55.020 --> 00:09:57.540
We don't need to use Postman anymore.

143
00:09:57.570 --> 00:10:01.210
Before ending this lecture, I'm going to delete this user.

144
00:10:01.230 --> 00:10:05.010
Your account should be created via the form, not postman.

145
00:10:05.010 --> 00:10:06.450
You should do the same.

146
00:10:06.450 --> 00:10:11.250
In the next lecture, let's begin working on the form for registering a user.

