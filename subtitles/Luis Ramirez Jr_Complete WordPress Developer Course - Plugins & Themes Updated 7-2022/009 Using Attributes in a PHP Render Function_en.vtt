WEBVTT
1
00:00:00.240 --> 00:00:07.090
In this lecture, we are going to apply the attributes to the render function for the search form block.

2
00:00:07.110 --> 00:00:13.130
Conveniently, WordPress will handle grabbing the attributes from a block's HTML comments.

3
00:00:13.140 --> 00:00:17.190
The JSON object is converted into a PHP array.

4
00:00:17.220 --> 00:00:21.930
This array is provided to our render callback functions as an argument.

5
00:00:21.930 --> 00:00:26.400
Let's try using our attributes to change the block styles.

6
00:00:26.430 --> 00:00:29.370
Open the search form php file.

7
00:00:31.580 --> 00:00:37.610
Inside the argument list of these search form function at an argument called attributes.

8
00:00:39.700 --> 00:00:43.930
Next, let's extract the items from the attributes array.

9
00:00:43.960 --> 00:00:45.970
This will help with readability.

10
00:00:46.000 --> 00:00:49.170
Create a variable called BG color.

11
00:00:49.180 --> 00:00:54.190
The value for this variable will be the attributes bg color item.

12
00:00:56.380 --> 00:01:00.450
The attributes in the array are stored as an associative array.

13
00:01:00.460 --> 00:01:05.780
An attribute can be referenced by the name stored in the block JSON file.

14
00:01:05.800 --> 00:01:12.820
Before defining the next variable, let's wrap this variable with a function called escape attributes.

15
00:01:15.060 --> 00:01:20.460
WordPress defines dozens of functions for escaping and sanitizing data.

16
00:01:22.300 --> 00:01:27.440
The concept of escaping and sanitizing data is common in their programming world.

17
00:01:27.460 --> 00:01:34.150
Both concepts have the goal of protecting your site and users from experiencing malicious content.

18
00:01:34.180 --> 00:01:40.450
The goal of sanitizing or escaping data is to clean data before storage or output.

19
00:01:40.480 --> 00:01:44.240
Despite having similar goals, there are differences.

20
00:01:44.260 --> 00:01:49.050
If you're filtering or cleaning data, this is considered sanitization.

21
00:01:49.060 --> 00:01:55.120
However, if data is being sent to the browser, we consider this action as escaping.

22
00:01:55.120 --> 00:01:57.470
It's a matter of where the data is going.

23
00:01:57.490 --> 00:02:02.380
If you're trying to save data in the database, you should always sanitize it.

24
00:02:02.410 --> 00:02:06.750
On the other hand, we may want to output a variable in the browser.

25
00:02:06.760 --> 00:02:09.130
We should escape it before doing so.

26
00:02:10.310 --> 00:02:17.780
This page provides documentation on the most common functions for sanitizing or escaping data from the

27
00:02:17.780 --> 00:02:18.530
sidebar.

28
00:02:18.560 --> 00:02:22.640
Lets click on the escaping securing output section.

29
00:02:22.640 --> 00:02:29.360
Under this section we are given a list of functions for escaping data according to the documentation.

30
00:02:29.390 --> 00:02:36.470
The escape attribute function is useful for escaping data that will appear in an HTML attribute.

31
00:02:36.500 --> 00:02:39.600
You may be wondering why should we escape data?

32
00:02:39.620 --> 00:02:42.250
Isn't the data in our database secure?

33
00:02:42.260 --> 00:02:44.330
That may not always be the case.

34
00:02:44.360 --> 00:02:51.890
A hacker may try to insert malicious HTML into the database if this data gets rendered on the browser.

35
00:02:51.920 --> 00:02:55.650
A simple style attribute can quickly become a nightmare.

36
00:02:55.670 --> 00:02:59.720
Therefore, we should assume our data can be compromised.

37
00:02:59.750 --> 00:03:02.370
Escaping is the best way to reduce harm.

38
00:03:02.390 --> 00:03:04.190
Switch back to the editor.

39
00:03:06.390 --> 00:03:10.570
The escape attribute function will return the escaped data.

40
00:03:10.590 --> 00:03:14.370
Let's do the same thing for the text color attributes.

41
00:03:19.170 --> 00:03:24.380
After making those changes, we should create the value for the style attributes.

42
00:03:24.390 --> 00:03:27.830
Define a variable called style attributes.

43
00:03:27.840 --> 00:03:30.480
Its value will be the following background.

44
00:03:30.480 --> 00:03:30.990
Color.

45
00:03:31.020 --> 00:03:32.100
BG color.

46
00:03:32.100 --> 00:03:32.700
Color.

47
00:03:32.700 --> 00:03:33.780
Text color.

48
00:03:40.210 --> 00:03:44.660
In our templates, we have two locations for applying these styles.

49
00:03:44.680 --> 00:03:51.640
I think it's a good idea to store the value for the style attributes in a variable for reusability inside

50
00:03:51.640 --> 00:03:53.170
the variables value.

51
00:03:53.170 --> 00:04:00.520
I'm injecting a variable p php supports variable interpolation, which is the process of adding a variable

52
00:04:00.520 --> 00:04:01.510
to a string.

53
00:04:01.600 --> 00:04:04.960
There are two rules for variable interpolation.

54
00:04:04.960 --> 00:04:09.160
Firstly, the variable must be wrapped with curly brackets.

55
00:04:09.160 --> 00:04:12.580
Secondly, the string must use double quotes.

56
00:04:12.760 --> 00:04:17.110
Variable interpolation does not work for strings with single quotes.

57
00:04:17.110 --> 00:04:22.180
By using this feature we can inject a variable value into a string.

58
00:04:22.210 --> 00:04:25.960
Let's try using our variable on the element.

59
00:04:25.960 --> 00:04:30.580
Let's replace the block props expression with the style attribute.

60
00:04:32.740 --> 00:04:37.510
The value for the attribute should be the style attribute from PHP.

61
00:04:37.540 --> 00:04:40.990
Let's enter PHP mode for echoing this variable.

62
00:04:43.200 --> 00:04:49.040
Next, we are going to add a class attribute by using the block props function.

63
00:04:49.050 --> 00:04:53.210
The attributes for the root element of our block are added for us.

64
00:04:53.220 --> 00:04:59.110
However, with PHP, we must manually add attributes to the root element.

65
00:04:59.130 --> 00:05:01.770
This includes the class for the element.

66
00:05:01.770 --> 00:05:03.390
Class names for block.

67
00:05:03.390 --> 00:05:05.930
Start with the words WP BLOCK.

68
00:05:05.940 --> 00:05:08.720
This name is followed by the name of our block.

69
00:05:08.730 --> 00:05:16.230
In this case, the full class name should be the following WP BLOCK YouTube plus search form.

70
00:05:18.310 --> 00:05:23.020
Moving on, let's apply the style attribute to the button element.

71
00:05:23.050 --> 00:05:30.190
The value is going to be the same, so we can safely copy and paste the value over to the button element.

72
00:05:32.350 --> 00:05:33.510
One more thing.

73
00:05:33.520 --> 00:05:38.690
The development with the button wrapper class should have the class attribute.

74
00:05:38.710 --> 00:05:44.680
Previously we renamed it to class name for compatibility with JavaScript.

75
00:05:44.710 --> 00:05:49.300
After making those changes, let's refresh the experimental page.

76
00:05:51.290 --> 00:05:54.950
As you can see, the block template appears on the page.

77
00:05:54.950 --> 00:05:55.910
That's awesome.

78
00:05:55.910 --> 00:05:59.600
We've successfully brought the block over to the front end.

79
00:05:59.630 --> 00:06:03.410
There's one more step before considering our block complete.

80
00:06:03.440 --> 00:06:06.740
It should be fully functional for performing searches.

81
00:06:06.740 --> 00:06:09.440
Let's work on that in the next lecture.

