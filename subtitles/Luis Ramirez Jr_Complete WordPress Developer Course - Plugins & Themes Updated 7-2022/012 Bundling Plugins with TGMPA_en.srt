1
00:00:00,180 --> 00:00:04,520
In this lecture, we are going to learn how to bundle our plugins with a theme.

2
00:00:04,530 --> 00:00:07,740
There are two plugins that should be bundled with our theme.

3
00:00:07,740 --> 00:00:10,670
The first plugin is the YouTube plus plugin.

4
00:00:10,680 --> 00:00:14,100
This is a custom plugin that's exclusive to our theme.

5
00:00:14,100 --> 00:00:17,610
The second plugin is called Regenerate Thumbnails.

6
00:00:17,610 --> 00:00:21,900
This plugin helped us reset the dimensions for existing images.

7
00:00:21,900 --> 00:00:25,710
It's common practice for theme developers to recommend this plugin.

8
00:00:25,860 --> 00:00:28,380
Both plugins should be easy to install.

9
00:00:28,380 --> 00:00:32,640
Forcing the user to manually download each plugin would be a pain.

10
00:00:32,640 --> 00:00:39,060
Ideally, we should provide a simple interface for downloading each plugin for a theme to be fully functional.

11
00:00:39,060 --> 00:00:45,120
The most efficient solution would be to use a class called TG plugin activation.

12
00:00:45,120 --> 00:00:46,770
In the resource section.

13
00:00:46,770 --> 00:00:48,840
I provide a link to this class.

14
00:00:48,840 --> 00:00:53,880
This class was introduced to help theme developers bundle plugins with a theme.

15
00:00:53,970 --> 00:01:00,780
It'll create an interface for installing plugins that are required or recommended to avoid redundancy.

16
00:01:00,780 --> 00:01:03,690
It'll check if a plugin has already been installed.

17
00:01:03,690 --> 00:01:07,050
If it has, the plugin will not be installed again.

18
00:01:07,260 --> 00:01:09,780
It's one of the best solutions available.

19
00:01:09,810 --> 00:01:12,510
I find it extremely easy to use.

20
00:01:12,510 --> 00:01:15,810
Let's try integrating this class into our theme.

21
00:01:15,810 --> 00:01:19,740
First, we must download the file at the top of the page.

22
00:01:19,740 --> 00:01:21,600
Click on the download link.

23
00:01:23,770 --> 00:01:27,500
The page will help us integrate the class with our project.

24
00:01:27,520 --> 00:01:31,390
First, we must select where the class will be utilized.

25
00:01:31,390 --> 00:01:33,700
Let's select the theme option.

26
00:01:33,730 --> 00:01:38,380
Next, we are asked where we plan on distributing our theme.

27
00:01:38,410 --> 00:01:41,170
Feel free to select any of the options.

28
00:01:41,170 --> 00:01:44,530
I'm going to select the some other way option.

29
00:01:44,620 --> 00:01:47,980
Afterward, we must provide the text domain.

30
00:01:47,980 --> 00:01:50,560
Set the text domain to Udemy.

31
00:01:52,720 --> 00:01:56,620
Filling in this field will cause the other fields to be pre-filled.

32
00:01:56,650 --> 00:01:58,660
I'm fine with the default values.

33
00:01:58,660 --> 00:02:00,430
Let's click on Generate.

34
00:02:02,700 --> 00:02:05,660
This will cause the browser to download a zip file.

35
00:02:05,670 --> 00:02:08,490
Let's check out the contents of the zip file.

36
00:02:10,669 --> 00:02:11,900
In the zip file.

37
00:02:11,900 --> 00:02:13,970
We are going to find a few files.

38
00:02:13,970 --> 00:02:21,730
However, we only care about a single file called class TG JDM Plugin Activation PHP.

39
00:02:21,770 --> 00:02:24,530
This file contains everything we will need.

40
00:02:24,560 --> 00:02:26,460
Everything else can be ignored.

41
00:02:26,480 --> 00:02:30,890
Let's drag and drop this file into the includes folder of our theme.

42
00:02:33,050 --> 00:02:35,870
If you want you can also grab the example.

43
00:02:36,500 --> 00:02:37,420
PHP file.

44
00:02:37,430 --> 00:02:41,300
This file provides a real example of how to use this class.

45
00:02:41,330 --> 00:02:48,410
It can be helpful later down the line after copying the files, open the function's PHP file in your

46
00:02:48,410 --> 00:02:49,070
editor.

47
00:02:51,200 --> 00:02:58,550
The first step is to include this file in our theme under the includes section include the class TG

48
00:02:58,790 --> 00:03:01,820
Plugin Activation PHP file.

49
00:03:03,940 --> 00:03:07,690
By including this class, a custom hook will be emitted.

50
00:03:07,720 --> 00:03:13,180
This hook gives us the opportunity to register plug ins under the Hooks section.

51
00:03:13,180 --> 00:03:17,080
Add an action hook called TX GMP to register.

52
00:03:19,360 --> 00:03:23,590
The name of our function will be called You Register Plug INS.

53
00:03:25,740 --> 00:03:27,710
Inside the includes folder.

54
00:03:27,720 --> 00:03:31,770
Create a file called Register Plugins php.

55
00:03:34,050 --> 00:03:35,400
Inside this file.

56
00:03:35,400 --> 00:03:38,700
Define the you register plugins function.

57
00:03:40,840 --> 00:03:41,570
Next.

58
00:03:41,590 --> 00:03:44,560
Head back to the function, start php file.

59
00:03:44,590 --> 00:03:48,250
This file must be included for the function to be available.

60
00:03:50,380 --> 00:03:51,000
Great.

61
00:03:51,010 --> 00:03:55,940
We can begin in registering plug ins back in the register plug ins function.

62
00:03:55,960 --> 00:03:59,640
A new function will become available called DT GMP.

63
00:03:59,680 --> 00:04:00,880
Let's call it.

64
00:04:00,910 --> 00:04:03,450
This function has two arguments.

65
00:04:03,460 --> 00:04:06,300
The first argument is an array of plug ins.

66
00:04:06,310 --> 00:04:10,420
The second argument is an array of configuration settings.

67
00:04:10,420 --> 00:04:15,150
It's recommended to outsource these values into separate variables.

68
00:04:15,160 --> 00:04:17,740
This practice keeps our code readable.

69
00:04:17,769 --> 00:04:19,209
Let's give it a try.

70
00:04:19,240 --> 00:04:24,820
Above this function, create two arrays called plugins and config.

71
00:04:27,000 --> 00:04:27,880
Next.

72
00:04:27,900 --> 00:04:30,450
Pass these variables into the function.

73
00:04:32,670 --> 00:04:35,310
Let's begin updating the plugins array.

74
00:04:35,340 --> 00:04:39,570
As I mentioned before, we're going to recommend to plug ins.

75
00:04:39,570 --> 00:04:43,230
The first plugin is the Regenerate Thumbnails plugin.

76
00:04:43,260 --> 00:04:48,420
A plugin can be registered by adding an array to represent the plugin settings.

77
00:04:48,420 --> 00:04:50,460
Lets pass in an array.

78
00:04:50,550 --> 00:04:54,390
In this array we must add a key called name.

79
00:04:56,630 --> 00:05:00,420
The name option must be set to the name of the plugin.

80
00:05:00,440 --> 00:05:05,300
In this example, the name of the plugin is called Regenerate Thumbnails.

81
00:05:07,460 --> 00:05:10,790
Next, we must add an option called slug.

82
00:05:12,910 --> 00:05:18,940
The slug options value must be the path to the plugin from the WordPress repository.

83
00:05:18,970 --> 00:05:23,470
This class will handle searching for the plugin from the official repository.

84
00:05:23,500 --> 00:05:28,350
However, we must provide the URL in the resource section of this lecture.

85
00:05:28,360 --> 00:05:31,870
I provide a link to the regenerate thumbnails page.

86
00:05:34,000 --> 00:05:36,960
All plugins have a similar URL structure.

87
00:05:36,970 --> 00:05:42,640
The difference between each plugin is the path after the plugins segment of the URL.

88
00:05:42,670 --> 00:05:45,430
Copy this path into your clipboard.

89
00:05:47,600 --> 00:05:51,890
Next set the slug option to the value we copied earlier.

90
00:05:54,020 --> 00:05:57,460
There's one more option we'll add called required.

91
00:05:57,470 --> 00:06:01,550
We have the option of requiring or recommending this plugin.

92
00:06:01,550 --> 00:06:05,780
By setting this option to false, the plugin will be recommended.

93
00:06:07,880 --> 00:06:12,410
Setting this option to true will force the user to download this in.

94
00:06:12,440 --> 00:06:18,600
In my opinion, it's never a good idea to require a plugin unless it's absolutely necessary.

95
00:06:18,620 --> 00:06:24,170
The more plugins installed on a site, the more bloated the site can become at most.

96
00:06:24,200 --> 00:06:28,760
Your theme should never rely on more than two plugins to be usable.

97
00:06:28,910 --> 00:06:31,910
We're finished with registering our first plugin.

98
00:06:31,910 --> 00:06:35,640
Let's begin registering the custom plugin for our theme.

99
00:06:35,660 --> 00:06:39,270
Add another array to the plugins array in this array.

100
00:06:39,290 --> 00:06:42,800
Set the name option to utility plus.

101
00:06:45,170 --> 00:06:49,160
Next set the slug option to Udemy plus.

102
00:06:51,360 --> 00:06:56,270
This plugin is not publicly accessible from the WordPress plugin repository.

103
00:06:56,280 --> 00:07:02,970
If the plugin cannot be downloaded publicly, the slug option must be set to the name of the plugin

104
00:07:02,970 --> 00:07:03,720
folder.

105
00:07:03,750 --> 00:07:08,160
After adding this option, set the required option to true.

106
00:07:10,450 --> 00:07:13,490
We're going to require this plugin for our theme.

107
00:07:13,510 --> 00:07:16,840
Next, let's add an option called source.

108
00:07:19,050 --> 00:07:24,270
The TG class is capable of grabbing plugins from various sources.

109
00:07:24,300 --> 00:07:31,320
It can grab a plugin from the official WordPress repository and external source, or it can search for

110
00:07:31,320 --> 00:07:32,430
a file from within.

111
00:07:32,430 --> 00:07:36,990
Our theme for this course, we're going to include the plug in with our theme.

112
00:07:36,990 --> 00:07:44,610
If you haven't already, create a zip file of the Udemy plus plugin after doing so, grab the zip file.

113
00:07:46,880 --> 00:07:50,220
We're going to add the zip file to the Udemy theme.

114
00:07:50,240 --> 00:07:56,810
I recommend creating a folder dedicated to plug ins, zip files and the root folder of our theme.

115
00:07:56,810 --> 00:07:59,120
Create a folder called Plugins.

116
00:08:01,230 --> 00:08:03,870
Add the zip file to this directory.

117
00:08:06,040 --> 00:08:07,270
Back in the editor.

118
00:08:07,270 --> 00:08:10,120
We must provide a full path to this file.

119
00:08:10,150 --> 00:08:13,810
Set the source option to the following value.

120
00:08:13,840 --> 00:08:15,880
Get template directory.

121
00:08:15,910 --> 00:08:17,980
Dot slash plugins.

122
00:08:17,980 --> 00:08:20,800
Slash Udemy plus dot zip.

123
00:08:23,040 --> 00:08:29,070
After adding this path, the TG class will download the plugin from the local source.

124
00:08:29,070 --> 00:08:32,909
Including your plugin as a local source is not a bad idea.

125
00:08:32,940 --> 00:08:37,100
However, you can outsource it to a GitHub repository.

126
00:08:37,110 --> 00:08:39,340
That's another option at our disposal.

127
00:08:39,360 --> 00:08:45,470
I recommend checking out the example PHP file from the TG zip file.

128
00:08:45,480 --> 00:08:50,860
This file includes examples of how to grab a plug in zip file from various sources.

129
00:08:50,880 --> 00:08:56,940
For our purposes, storing a copy of the plugin as a local source is more than enough.

130
00:08:56,970 --> 00:08:59,480
We're finished registering our plugins.

131
00:08:59,490 --> 00:09:07,470
The next step is to begin configuring the TG class in the configure array at an option called ID.

132
00:09:09,670 --> 00:09:15,100
It's completely possible for third party plugins to include the TG M class.

133
00:09:15,250 --> 00:09:21,900
In these cases we do not want our lists of plugins to clash with another set of recommended plugins.

134
00:09:21,910 --> 00:09:26,150
This library is extremely popular among the WordPress community.

135
00:09:26,170 --> 00:09:28,750
We can give our list of plugins and ID.

136
00:09:28,780 --> 00:09:31,210
Let's set the ID to Udemy.

137
00:09:33,320 --> 00:09:37,940
Next, we can set the ID of the menu by adding the menu option.

138
00:09:37,970 --> 00:09:43,760
Behind the scenes, the team class will register a menu in the admin dashboard.

139
00:09:43,790 --> 00:09:48,330
This menu will be dedicated to installing and activating our plugins.

140
00:09:48,350 --> 00:09:51,340
The value should be a unique menu name.

141
00:09:51,350 --> 00:09:56,420
Let's set the menu option to jump to install plugins.

142
00:09:58,540 --> 00:10:03,970
Next we can set the parent slug option to theme start up.

143
00:10:06,250 --> 00:10:13,300
By setting the parents log option, the menu will appear as a sub menu item to an existing parent menu.

144
00:10:13,330 --> 00:10:18,070
In this example, we're using the themes app parent menu.

145
00:10:18,100 --> 00:10:22,330
This will cause the menu to appear under the appearance parent menu.

146
00:10:22,360 --> 00:10:27,070
Up next, set the capability option to edit the options.

147
00:10:29,290 --> 00:10:35,590
The capability option will limit who can install and activate plug ins by a specific capability.

148
00:10:35,590 --> 00:10:40,120
In this example, we're using the edit theme options capability.

149
00:10:40,120 --> 00:10:47,320
This capability is available to users who can configure a site's theme after this option set the has

150
00:10:47,320 --> 00:10:49,240
notices option to true.

151
00:10:51,480 --> 00:10:54,830
This option will display notices to the end user.

152
00:10:54,840 --> 00:11:01,020
If the user has permission to install and activate plug ins, they'll be shown a notice for activating

153
00:11:01,020 --> 00:11:03,290
a plugin required for a theme.

154
00:11:03,300 --> 00:11:04,860
Along with this option.

155
00:11:04,860 --> 00:11:07,590
Set the dismissible option to true.

156
00:11:09,850 --> 00:11:14,100
The dismissal option will allow users to dismiss the notices.

157
00:11:14,110 --> 00:11:19,080
We're not going to annoy the user if they're not interested in activating our plugins.

158
00:11:19,090 --> 00:11:21,610
Let's allow them to dismiss the notices.

159
00:11:21,640 --> 00:11:22,510
That's it.

160
00:11:22,540 --> 00:11:25,880
We've configured the TG class with our theme.

161
00:11:25,900 --> 00:11:30,100
Let's refresh the plugins page in the admin dashboard.

162
00:11:32,240 --> 00:11:34,390
At the moment, nothing will happen.

163
00:11:34,400 --> 00:11:36,210
Both plugins are activated.

164
00:11:36,230 --> 00:11:39,890
Let's try deactivating the utility plus plugin.

165
00:11:42,050 --> 00:11:45,500
After deactivating this plugin, a notice will appear.

166
00:11:45,680 --> 00:11:50,860
The notice instructs us that the utility plus plugin is required for our theme.

167
00:11:50,870 --> 00:11:58,190
We can click on the link to be taken to a page with a list of required plugins by using a single class.

168
00:11:58,190 --> 00:12:03,350
We do not need to generate a UI or handle verifying a plugin activated.

169
00:12:03,680 --> 00:12:09,210
The team class is completely capable of verifying the current site's plugins.

170
00:12:09,230 --> 00:12:15,380
If a plugin is not active, the class will help the user install and activate the plugin.

171
00:12:15,410 --> 00:12:21,570
I highly recommend checking out the example php file for a complete list of settings.

172
00:12:21,590 --> 00:12:24,350
This experience can be customized further.

173
00:12:24,500 --> 00:12:27,240
We're officially finished with our theme and plugin.

174
00:12:27,260 --> 00:12:28,220
Congrats.

175
00:12:28,250 --> 00:12:31,220
It took dozens of hours, but it was well worth it.

176
00:12:31,250 --> 00:12:35,510
In the next section, let's finish the course with some final thoughts.

