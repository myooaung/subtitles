1
00:00:00,150 --> 00:00:04,800
In this lecture, we are going to authenticate the user with our custom endpoint.

2
00:00:04,830 --> 00:00:09,130
Previously, we left off with preparing the function for authentication.

3
00:00:09,150 --> 00:00:14,040
The next step is to add the logic for authenticating the user with their credentials.

4
00:00:14,130 --> 00:00:17,940
In your editor, open the sign in PHP file.

5
00:00:19,950 --> 00:00:23,810
We're going to authenticate the user after validating the request.

6
00:00:23,820 --> 00:00:27,270
First, let's extract the data into variables.

7
00:00:27,270 --> 00:00:29,580
Define a variable called email.

8
00:00:29,580 --> 00:00:36,390
The value for this variable will be the sanitize email function with the params user log in variable.

9
00:00:38,590 --> 00:00:42,660
For this form, we are going to limit authentication to emails.

10
00:00:42,670 --> 00:00:45,290
It's possible to log in with a username.

11
00:00:45,310 --> 00:00:50,260
From my experience, authenticating users by their username can be tricky.

12
00:00:50,290 --> 00:00:52,270
Emails are considered reliable.

13
00:00:52,300 --> 00:00:55,460
Next, create a variable called password.

14
00:00:55,480 --> 00:01:02,440
The value for this variable will be the sanitize text field function with the params password variable.

15
00:01:04,660 --> 00:01:09,090
After extracting the data, we can proceed to authenticate the user.

16
00:01:09,100 --> 00:01:13,570
After the variables run a function called WP sign on.

17
00:01:15,750 --> 00:01:20,380
The WP sign on function will authenticate the user into WordPress.

18
00:01:20,400 --> 00:01:25,410
It will add a cookie to the user's browser to indicate the user has been logged in.

19
00:01:25,440 --> 00:01:29,880
This function performs the same actions as our previous solution.

20
00:01:29,940 --> 00:01:34,410
A cookie will be added to the user's browser to indicate their logged in.

21
00:01:34,500 --> 00:01:39,090
You may be wondering why aren't we using this function in our registration function?

22
00:01:39,120 --> 00:01:45,280
From my experience, the WP sign on function does not work properly for first time users.

23
00:01:45,300 --> 00:01:49,890
If a user has not logged in before, this function may not behave properly.

24
00:01:49,920 --> 00:01:56,340
To avoid this issue, I like to manually authenticate the user for the first time for subsequent log

25
00:01:56,340 --> 00:01:56,730
ins.

26
00:01:56,730 --> 00:01:58,740
This function will behave normally.

27
00:01:58,830 --> 00:02:02,970
This function has one argument which is an array of credentials.

28
00:02:02,970 --> 00:02:07,170
Lets pass in an array with a key called user log in.

29
00:02:07,200 --> 00:02:10,770
The value for this variable will be the email variable.

30
00:02:12,860 --> 00:02:15,090
Next, add the password key.

31
00:02:15,110 --> 00:02:18,830
The value for this key will be the password variable.

32
00:02:20,920 --> 00:02:24,340
Lastly, let's set the remember key to true.

33
00:02:26,450 --> 00:02:31,370
By adding this, key users will be remembered on future visits to our site.

34
00:02:31,400 --> 00:02:36,540
You may want to disable this option if your site handles sensitive information.

35
00:02:36,560 --> 00:02:38,380
Let's keep moving forward.

36
00:02:38,390 --> 00:02:41,210
It's possible the authentication might fail.

37
00:02:41,240 --> 00:02:44,500
The user may have inputted an incorrect password.

38
00:02:44,510 --> 00:02:47,660
If that's the case, we should reject the request.

39
00:02:47,840 --> 00:02:55,640
The WP sign on function will return a user object upon success, otherwise an error will be returned.

40
00:02:55,640 --> 00:02:59,300
Let's store the result in a variable called user.

41
00:03:01,360 --> 00:03:04,370
Next, let's add a conditional statement.

42
00:03:04,390 --> 00:03:09,610
The condition will be the is WP error function with the user variable.

43
00:03:11,930 --> 00:03:16,970
If the variable contains an error, we are going to return the response variable.

44
00:03:19,050 --> 00:03:19,730
Great.

45
00:03:19,740 --> 00:03:23,010
After making those changes, we're finished with the function.

46
00:03:23,040 --> 00:03:26,080
The solution is shorter than registering a user.

47
00:03:26,100 --> 00:03:27,600
There's not much to it.

48
00:03:28,260 --> 00:03:30,720
Let's try testing our new endpoint.

49
00:03:30,750 --> 00:03:34,090
Open the postman application if you haven't already.

50
00:03:34,110 --> 00:03:38,470
Save the new URL into the authentication collection.

51
00:03:38,490 --> 00:03:40,650
I will set the name to log in.

52
00:03:42,820 --> 00:03:47,580
Next, let's try logging in with valid credentials inside the body.

53
00:03:47,590 --> 00:03:51,070
I'm going to modify the credentials for the test user.

54
00:03:53,230 --> 00:03:55,960
Lastly, let's submit the request.

55
00:03:58,040 --> 00:04:00,920
As you can see, we've been logged into the system.

56
00:04:00,920 --> 00:04:01,700
Perfect.

57
00:04:01,700 --> 00:04:03,470
Our end point is complete.

58
00:04:03,500 --> 00:04:05,770
The next step is to prepare the form.

59
00:04:05,780 --> 00:04:10,250
Users should be able to log in from the browser in the following lecture.

60
00:04:10,250 --> 00:04:12,770
Let's start working on the login form.

