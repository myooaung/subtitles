WEBVTT
1
00:00:00.060 --> 00:00:03.600
In this lecture we are going to install Node.js.

2
00:00:03.630 --> 00:00:08.790
Node.js is a program for running JavaScript on your machine without a browser.

3
00:00:08.820 --> 00:00:12.060
Do you remember those tools I mentioned about React?

4
00:00:12.090 --> 00:00:16.110
Those tools are written with JavaScript under the hood.

5
00:00:16.110 --> 00:00:19.230
They're using Node.js to run on our machines.

6
00:00:19.230 --> 00:00:23.460
In order to use React, we need to install Node.js.

7
00:00:23.460 --> 00:00:29.490
In the resource section of this lecture, I provide a link to the official site for Node.js.

8
00:00:29.520 --> 00:00:37.320
The official description is Node.js is a JavaScript runtime built on Chrome's V8 JavaScript engine.

9
00:00:37.470 --> 00:00:41.100
I want you to download the latest version as of this course.

10
00:00:41.100 --> 00:00:43.110
The latest version is 18.

11
00:00:43.110 --> 00:00:46.200
If you find a newer version, feel free to install it.

12
00:00:46.200 --> 00:00:49.410
An earlier version may be available for installation.

13
00:00:49.410 --> 00:00:55.950
This option is available for developers who have developed their applications in older versions of Node.

14
00:00:56.250 --> 00:00:59.490
I've already installed Node.js on my computer.

15
00:00:59.490 --> 00:01:02.520
I won't be going through the default installation.

16
00:01:02.520 --> 00:01:09.480
Luckily, installing Node is like installing any other program you can click next until you're finished.

17
00:01:09.480 --> 00:01:14.550
During the installation process, you may be asked to install additional tools.

18
00:01:14.550 --> 00:01:19.560
You should opt into these tools as they'll be useful for running Node.js.

19
00:01:22.860 --> 00:01:28.140
Once you've installed Node, let's explore what comes with it and how you can use it.

20
00:01:28.170 --> 00:01:32.520
A program will be installed on your machine called Node.js.

21
00:01:32.550 --> 00:01:34.750
It should look something like this.

22
00:01:34.770 --> 00:01:39.540
Initially, you may think this is a command prompt or terminal, but it isn't.

23
00:01:39.570 --> 00:01:42.410
You can't run commands inside this program.

24
00:01:42.420 --> 00:01:47.310
For example, if I were to run the command, LZ, an error would get thrown.

25
00:01:47.340 --> 00:01:51.240
This program is for running JavaScript without creating a file.

26
00:01:51.270 --> 00:01:55.440
It's a great way to test node before getting into real code.

27
00:01:55.470 --> 00:02:03.060
If I were to create a variable called foo with a value of five, the tool would output undefined.

28
00:02:03.090 --> 00:02:10.320
However, this variable is officially available, we can type the foo variable to view its value.

29
00:02:10.410 --> 00:02:14.430
Essentially we are given an environment for running Java scripts.

30
00:02:14.430 --> 00:02:16.440
I'm going to exit this program.

31
00:02:16.470 --> 00:02:19.590
It's a fun tool, but not something we'll be using.

32
00:02:19.770 --> 00:02:24.990
The real power of Node is the commands, modules and package ecosystem.

33
00:02:25.020 --> 00:02:29.080
For this example, let's open the command line in our editors.

34
00:02:29.100 --> 00:02:31.490
I'll be working in an empty directory.

35
00:02:31.500 --> 00:02:37.680
As a side note, you can move the command line by dragging and dropping the name to the top of the editor.

36
00:02:37.710 --> 00:02:42.390
In my opinion, it's easier to view commands with the terminal stretched outs.

37
00:02:42.420 --> 00:02:46.310
The great thing about Node is that you can use it anywhere on your system.

38
00:02:46.320 --> 00:02:49.240
You don't have to use it in any particular folder.

39
00:02:49.260 --> 00:02:53.880
That means you can use it in your documents, desktop or even Windows folder.

40
00:02:53.910 --> 00:02:56.490
Let's run node in the current directory.

41
00:02:56.490 --> 00:03:00.330
First, let's create a file called Index JS.

42
00:03:02.450 --> 00:03:05.300
Inside this file, let's log a message.

43
00:03:07.340 --> 00:03:10.230
Next, let's switch over to the command line.

44
00:03:10.250 --> 00:03:13.080
The command line should be pointed to your project.

45
00:03:13.100 --> 00:03:14.550
This is very important.

46
00:03:14.570 --> 00:03:19.190
Note will not work unless you're inside the same directory as your file.

47
00:03:19.220 --> 00:03:21.500
I'm using Visual Studio code.

48
00:03:21.530 --> 00:03:25.490
It automatically points to this folder whenever I open my terminal.

49
00:03:25.520 --> 00:03:31.280
If you're not using Visual Studio code, it's perfectly fine to use the command line that comes with

50
00:03:31.280 --> 00:03:32.690
your operating system.

51
00:03:32.720 --> 00:03:38.000
You may have to use the CD and LZ commands to navigate to this directory.

52
00:03:38.240 --> 00:03:43.400
Once you're inside this directory, run the following command node index.

53
00:03:45.460 --> 00:03:49.480
After running this command, our messages get logged in the command line.

54
00:03:49.480 --> 00:03:51.610
So what exactly is going on?

55
00:03:51.640 --> 00:03:54.010
Let's take it one step at a time.

56
00:03:54.160 --> 00:03:59.660
Upon installing Node, a new command called Node becomes available on our machines.

57
00:03:59.680 --> 00:04:03.830
This command allows us to run a JavaScript file on our computer.

58
00:04:03.850 --> 00:04:07.400
After the node command, we can provide a file to run.

59
00:04:07.420 --> 00:04:12.400
In our case, we are running the index file without the extension by default.

60
00:04:12.430 --> 00:04:16.029
No one will assume we're executing a JavaScript file.

61
00:04:16.240 --> 00:04:20.860
After running, this command node will execute the code inside our file.

62
00:04:20.890 --> 00:04:24.650
In this example, we're logging a message into the console.

63
00:04:24.670 --> 00:04:31.090
For a demonstration purposes, let's check what happens when we run the command in a different directory.

64
00:04:31.120 --> 00:04:35.260
I'm going to move into a different directory with the command.

65
00:04:37.260 --> 00:04:40.560
Next, I'll run the node index command.

66
00:04:42.720 --> 00:04:47.280
Right away an error gets thrown stating that our file can't be found.

67
00:04:47.310 --> 00:04:50.280
This behavior is very important to highlight.

68
00:04:50.310 --> 00:04:54.570
I have to be inside the same directory as the file to execute it.

69
00:04:54.600 --> 00:04:57.150
Otherwise an error gets produced.

70
00:04:57.150 --> 00:04:58.490
In most cases.

71
00:04:58.500 --> 00:05:02.610
You should always be in the same directory as your JavaScript files.

72
00:05:02.640 --> 00:05:05.220
I'm going to move back into my project.

73
00:05:05.400 --> 00:05:08.880
This is a basic example of what you can do with Node.

74
00:05:08.910 --> 00:05:12.720
You can run JavaScript on your computer instead of a web browser.

75
00:05:12.840 --> 00:05:19.290
Unlike the browser, we can interact with a user's file system, create a server, or develop custom

76
00:05:19.290 --> 00:05:21.030
commands for the command line.

77
00:05:21.060 --> 00:05:23.930
The possibilities are endless for this course.

78
00:05:23.940 --> 00:05:25.950
We won't be doing any of that.

79
00:05:25.980 --> 00:05:27.420
The reason is simple.

80
00:05:27.420 --> 00:05:30.690
We have PHP, Apache and MySQL.

81
00:05:30.720 --> 00:05:35.730
These programs already handle creating a server and interacting with the file system.

82
00:05:35.760 --> 00:05:41.440
Lastly, we have WordPress, which handles the complicated technical details of running a site.

83
00:05:41.460 --> 00:05:45.600
It won't be necessary to let Node handle this type of functionality.

84
00:05:45.630 --> 00:05:50.630
As I stated earlier, the tools developed by the React team are written for Node.

85
00:05:50.640 --> 00:05:54.060
We must have Node installed to optimize our code base.

86
00:05:54.090 --> 00:05:59.100
These tools are going to be incredibly helpful for developing Gutenberg Blox.

87
00:05:59.130 --> 00:06:02.320
It's time to get back into WordPress when you're ready.

88
00:06:02.340 --> 00:06:04.500
I'll see you in the next lecture.

