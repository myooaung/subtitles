1
00:00:00,150 --> 00:00:06,090
In this lecture, we are going to have the option of modifying the background color of the search form

2
00:00:06,090 --> 00:00:06,730
block.

3
00:00:06,750 --> 00:00:11,730
Previously, we used the color palette component to render a color picker.

4
00:00:11,760 --> 00:00:15,870
It's a recommended component for adding color options to your block.

5
00:00:15,900 --> 00:00:20,160
However, there's another component that's not well documented.

6
00:00:20,190 --> 00:00:24,360
I'm not sure why, but the WordPress team has obscured it.

7
00:00:24,390 --> 00:00:28,440
Despite that, I think it's an extremely powerful component.

8
00:00:28,470 --> 00:00:31,560
It's called the Panel Color Settings Components.

9
00:00:31,590 --> 00:00:35,490
This component will create a panel that has a color palette.

10
00:00:35,520 --> 00:00:39,390
The UI will be similar to the color palette component.

11
00:00:39,510 --> 00:00:42,230
Describing the differences is difficult.

12
00:00:42,240 --> 00:00:47,610
So rather than describe the component, let's give it a try in your editor.

13
00:00:47,640 --> 00:00:50,010
Open the block JSON file.

14
00:00:52,120 --> 00:00:56,240
For starters, let's define the attributes for storing the colors.

15
00:00:56,260 --> 00:01:01,480
Our component is going to have two attributes for modifying the colors of our block.

16
00:01:01,510 --> 00:01:08,590
Clients will be able to modify the background and text color inside the attributes object at a property

17
00:01:08,590 --> 00:01:10,240
called BG Color.

18
00:01:12,510 --> 00:01:17,790
Color values will be stored as strings set the type property to string.

19
00:01:20,010 --> 00:01:26,460
Next, we should add a default color and the default property with the following value hash.

20
00:01:26,520 --> 00:01:28,890
f87171.

21
00:01:31,140 --> 00:01:35,170
By default, attributes are stored in the content of a block.

22
00:01:35,190 --> 00:01:41,670
Unlike client side rendered blocks, we should never change the resource of a server side rendered block

23
00:01:41,670 --> 00:01:46,140
attributes for server side render blocks must be stored in the comments.

24
00:01:46,150 --> 00:01:48,960
It's because the block doesn't have anything else.

25
00:01:48,960 --> 00:01:53,520
It's impossible to retrieve attribute values from different sources.

26
00:01:53,520 --> 00:01:56,310
Therefore, we should leave the source alone.

27
00:01:56,400 --> 00:01:58,710
Let's add the next attribute.

28
00:01:58,740 --> 00:02:02,520
The name of the next attribute is called text color.

29
00:02:04,660 --> 00:02:05,830
Same as before.

30
00:02:05,860 --> 00:02:08,500
Let's set the type property to string.

31
00:02:10,600 --> 00:02:14,350
Lastly, set the default property to hash f.

32
00:02:14,350 --> 00:02:15,130
F f.

33
00:02:17,300 --> 00:02:22,550
Our attributes already we can begin to update them from the indexed JS file.

34
00:02:22,550 --> 00:02:25,100
Let's open this file with our editors.

35
00:02:25,100 --> 00:02:31,460
First things first we should start grabbing the components we'll need for the block from the BLOCK Editor

36
00:02:31,460 --> 00:02:32,180
package.

37
00:02:32,180 --> 00:02:38,690
We are going to update the import statement to include two components called inspector controls and

38
00:02:38,690 --> 00:02:40,310
panel color settings.

39
00:02:42,580 --> 00:02:46,180
We're already familiar with the Inspector Controls component.

40
00:02:46,210 --> 00:02:49,300
This component will add content to the sidebar.

41
00:02:49,330 --> 00:02:55,210
It's the ideal location for adding options to modify a block's behavior or appearance.

42
00:02:55,240 --> 00:02:59,350
Next, we're importing the panel color settings component.

43
00:02:59,380 --> 00:03:03,340
Strangely, it's been defined from the block editor package.

44
00:03:03,370 --> 00:03:10,450
Next, let's import the double underscore function from the WordPress slash IE 18 RN package.

45
00:03:12,630 --> 00:03:14,670
After importing these components.

46
00:03:14,670 --> 00:03:18,420
Let's update our block in the edit function's argument list.

47
00:03:18,420 --> 00:03:24,390
We should structure the props object for the attributes and set attributes function.

48
00:03:26,650 --> 00:03:34,150
The attributes object will contain the current values of our blocks attributes, whereas the set attributes

49
00:03:34,150 --> 00:03:37,300
function will help us with updating our attributes.

50
00:03:37,300 --> 00:03:44,560
For readability, we should structure the attributes object at the top of the function d structure the

51
00:03:44,560 --> 00:03:49,720
attributes object for the BG colour and text colour attributes.

52
00:03:51,870 --> 00:03:53,090
Everything is ready.

53
00:03:53,100 --> 00:03:55,940
We have our components and attributes.

54
00:03:55,950 --> 00:04:02,460
The last step is to add the panel color settings component for manipulating the attribute values.

55
00:04:02,460 --> 00:04:09,180
First, we are going to update the return statement by wrapping the existing HTML with a fragment.

56
00:04:11,420 --> 00:04:18,769
If we plan on adding the inspector controls component, we must add a fragment, otherwise react with

57
00:04:18,769 --> 00:04:22,100
throw an error for having multiple parent elements.

58
00:04:22,310 --> 00:04:26,420
Next, let's add the inspector controls component.

59
00:04:28,480 --> 00:04:33,480
It's going to sit above the block from within the inspector controls component.

60
00:04:33,490 --> 00:04:36,760
Insert the panel color settings component.

61
00:04:38,860 --> 00:04:42,530
The panel color settings component has two properties.

62
00:04:42,550 --> 00:04:45,070
The first property is called Title.

63
00:04:45,100 --> 00:04:49,420
The value for this property will be the double underscore function.

64
00:04:51,600 --> 00:04:54,550
The title will get rendered at the top of the panel.

65
00:04:54,570 --> 00:05:01,020
Let's set the arguments in the double underscore function to the following colors utility plus.

66
00:05:03,120 --> 00:05:06,690
Next we can add a property called Color Settings.

67
00:05:06,690 --> 00:05:09,720
The value for this property will be an array.

68
00:05:12,070 --> 00:05:16,550
The panel color settings can display multiple color options.

69
00:05:16,570 --> 00:05:21,220
We don't need to duplicate this component for each color in our block.

70
00:05:21,250 --> 00:05:24,340
It can handle everything inside this array.

71
00:05:24,340 --> 00:05:26,950
We can add an object for each color.

72
00:05:26,950 --> 00:05:30,130
For example, let's try adding an object.

73
00:05:30,130 --> 00:05:33,820
Inside this object we must add three properties.

74
00:05:33,820 --> 00:05:37,330
First, we must add a property called Label.

75
00:05:37,330 --> 00:05:44,170
Since the panel color settings component can display multiple colors, we should add a label for each

76
00:05:44,170 --> 00:05:49,210
color setting, otherwise the client may not understand each option.

77
00:05:49,210 --> 00:05:52,690
Let's set the label to the double underscore function.

78
00:05:52,690 --> 00:05:57,790
We are going to set the translatable text to the following background color.

79
00:05:59,930 --> 00:06:03,560
The text domain should be set to YouTube plus.

80
00:06:05,660 --> 00:06:06,800
Moving along.

81
00:06:06,800 --> 00:06:09,440
The second property is called value.

82
00:06:09,470 --> 00:06:14,000
Let's set this property to the BG color attribute.

83
00:06:16,280 --> 00:06:19,450
The last property is called on change.

84
00:06:19,460 --> 00:06:21,440
This property is an event.

85
00:06:21,470 --> 00:06:26,720
During this event, let's run a function that accepts the new value parameter.

86
00:06:28,860 --> 00:06:34,020
As the name implies, this event will be fired when a new colour is selected.

87
00:06:34,050 --> 00:06:38,430
The new value parameter stores the new colour on this event.

88
00:06:38,460 --> 00:06:41,580
We should update vb g colour attribute.

89
00:06:41,610 --> 00:06:47,370
Let's update this attribute with the set attributes function inside this function.

90
00:06:47,370 --> 00:06:51,900
Set the BG colour attribute to the new value parameter.

91
00:06:54,180 --> 00:06:57,410
Our first object is finished as an exercise.

92
00:06:57,420 --> 00:07:01,950
Try adding another object for modifying the text color attributes.

93
00:07:01,950 --> 00:07:05,600
The object should look similar to the first object.

94
00:07:05,610 --> 00:07:07,650
Pause the video and give it a try.

95
00:07:07,680 --> 00:07:08,580
Good luck.

96
00:07:13,060 --> 00:07:14,100
Welcome back.

97
00:07:14,110 --> 00:07:17,490
If you're able to add a new object, that's great.

98
00:07:17,500 --> 00:07:19,150
If not, that's fine.

99
00:07:19,150 --> 00:07:21,360
Let's try working on it together.

100
00:07:21,370 --> 00:07:22,750
Inside the array.

101
00:07:22,750 --> 00:07:24,490
Add a second object.

102
00:07:26,620 --> 00:07:29,790
Next, create a property called label.

103
00:07:29,800 --> 00:07:34,030
The value will be translated with the double underscore function.

104
00:07:36,180 --> 00:07:40,170
The translatable text will be the following text color.

105
00:07:42,420 --> 00:07:46,500
Afterward set the text domain to Udemy Plus.

106
00:07:48,620 --> 00:07:52,690
The next property is called value which will set the current colour.

107
00:07:52,700 --> 00:07:56,720
Let's set this property to the text colour attributes.

108
00:07:58,860 --> 00:08:02,220
Lastly, we must add the on change event.

109
00:08:02,250 --> 00:08:07,530
The value for this event will be a function to update the text color attributes.

110
00:08:07,560 --> 00:08:14,440
It will be very similar to the function of the first object instead of updating the BG color attribute.

111
00:08:14,460 --> 00:08:19,440
We are going to update the text color attribute with the new value parameter.

112
00:08:21,580 --> 00:08:24,280
After making those changes, we're finished.

113
00:08:24,310 --> 00:08:26,940
Your solution should be similar to mine.

114
00:08:26,950 --> 00:08:29,680
If the order of the properties is different.

115
00:08:29,710 --> 00:08:31,270
That's completely fine.

116
00:08:31,300 --> 00:08:35,049
As long as you have the same properties, you should be good to go.

117
00:08:35,080 --> 00:08:39,789
Let's save our changes and refresh the experimental page.

118
00:08:41,909 --> 00:08:42,929
In the editor.

119
00:08:42,929 --> 00:08:45,840
I'm going to insert the search form block.

120
00:08:48,060 --> 00:08:50,730
The locks should have been inserted without a problem.

121
00:08:50,730 --> 00:08:56,430
If we select the block, a panel should appear in the sidebar for the block settings.

122
00:08:56,460 --> 00:09:01,170
Immediately you'll notice differences from the previous color palettes.

123
00:09:01,170 --> 00:09:05,400
Unlike previously, we did not provide a custom color palette.

124
00:09:05,430 --> 00:09:10,410
The panel color settings component will borrow the palette from the current theme.

125
00:09:10,410 --> 00:09:13,470
In my opinion, this behavior is preferable.

126
00:09:13,470 --> 00:09:17,970
Clients will not have to switch back and forth between color pickers.

127
00:09:18,000 --> 00:09:22,320
Under this panel, we can modify the background and text colors.

128
00:09:22,320 --> 00:09:24,630
The editor shouldn't throw errors.

129
00:09:24,630 --> 00:09:31,050
As you can see, the panel color settings component is a very powerful component for rendering this

130
00:09:31,050 --> 00:09:31,740
UI.

131
00:09:32,010 --> 00:09:35,880
You may want to use this panel if you have multiple colors.

132
00:09:35,880 --> 00:09:42,120
However, if you need to override a themes color palette, you can stick to using the color palette

133
00:09:42,120 --> 00:09:43,020
component.

134
00:09:43,020 --> 00:09:44,730
Either option is viable.

135
00:09:44,730 --> 00:09:47,190
This lecture is starting to get long.

136
00:09:47,190 --> 00:09:51,630
Starting in the next lecture, let's apply the colors to our template.

