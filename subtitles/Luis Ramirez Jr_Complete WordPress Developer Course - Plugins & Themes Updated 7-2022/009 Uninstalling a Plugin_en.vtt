WEBVTT
1
00:00:00.120 --> 00:00:04.220
In this lecture, we are going to add support for uninstalling the plugin.

2
00:00:04.230 --> 00:00:06.420
We have a fully functional plugin.

3
00:00:06.420 --> 00:00:09.900
The code is clean, organized and secure for WordPress.

4
00:00:09.900 --> 00:00:13.950
However, there may be users who disagree for one reason or another.

5
00:00:13.950 --> 00:00:16.410
They may have found another plugin that's even better.

6
00:00:16.410 --> 00:00:19.530
In such cases, they will uninstall our plugin.

7
00:00:19.590 --> 00:00:23.160
Currently, our plugin does not clean itself from a site.

8
00:00:23.160 --> 00:00:27.090
This is a common problem among thousands of plugins available to you.

9
00:00:27.120 --> 00:00:33.060
Plugin developers will spend a lot of time adding database tables, plugin settings and uploading files

10
00:00:33.060 --> 00:00:35.400
to your site during an installation.

11
00:00:35.400 --> 00:00:40.410
None of this is removed from your site, thus your site is left feeling bloated.

12
00:00:40.560 --> 00:00:44.340
Purging a plugin is often an overlooked step for beginners.

13
00:00:44.340 --> 00:00:46.200
It's not enough to delete the plugin.

14
00:00:46.200 --> 00:00:48.780
Other areas must be wiped from a site.

15
00:00:48.780 --> 00:00:54.240
For this course, we're going to properly clean our plugin from WordPress during an installation.

16
00:00:54.270 --> 00:01:00.630
The process for handling on installation is easy with WordPress in our plugins directory, create a

17
00:01:00.630 --> 00:01:03.540
file called Uninstall PHP.

18
00:01:05.800 --> 00:01:10.570
WordPress will execute the code inside this file when our plugin is uninstalled.

19
00:01:10.600 --> 00:01:14.320
It's completely optional to have this file, but it's recommended.

20
00:01:14.350 --> 00:01:16.900
There's one problem with creating this file.

21
00:01:16.900 --> 00:01:18.630
It's extremely dangerous.

22
00:01:18.640 --> 00:01:23.730
The leading data from a site cannot be undone easily before executing the code.

23
00:01:23.740 --> 00:01:28.930
We should verify that the user wants to uninstall our plugin at the top of the file.

24
00:01:28.930 --> 00:01:30.730
Add a conditional statement.

25
00:01:32.920 --> 00:01:39.760
The condition will check if the WP uninstall plugin consent was not defined with the defined function.

26
00:01:41.910 --> 00:01:44.370
WordPress creates this constant.

27
00:01:44.400 --> 00:01:47.940
It will only be created when a plugin is being uninstalled.

28
00:01:47.970 --> 00:01:54.900
If this constant does not exist, this file should not run inside the conditional block at the exit

29
00:01:54.900 --> 00:01:55.710
statement.

30
00:01:57.840 --> 00:02:04.380
If this constant is defined, we can proceed with uninstalling our plugin below the conditional statement.

31
00:02:04.380 --> 00:02:06.810
Run the delete option function.

32
00:02:09.090 --> 00:02:13.190
The first step we'll take is deleting the option from our database.

33
00:02:13.200 --> 00:02:17.140
This information is not necessary for the current WordPress site.

34
00:02:17.160 --> 00:02:20.130
This function will delete an option from the database.

35
00:02:20.160 --> 00:02:23.950
This function has one argument which is the name of the option.

36
00:02:23.970 --> 00:02:27.330
The name of our option was called up options.

37
00:02:29.460 --> 00:02:32.750
Next, let's delete the recipe ratings table.

38
00:02:32.760 --> 00:02:35.790
Add the WP DB global variable.

39
00:02:38.010 --> 00:02:39.090
On this object.

40
00:02:39.090 --> 00:02:41.070
Run a function called query.

41
00:02:43.250 --> 00:02:45.950
I'm introducing a new function called query.

42
00:02:45.980 --> 00:02:49.370
The query function will allow us to run a raw query.

43
00:02:49.400 --> 00:02:53.330
Unlike the other functions, the results of the query are not returned.

44
00:02:53.360 --> 00:02:58.430
Instead, this function will return the number of rows affected by the query.

45
00:02:58.460 --> 00:03:01.610
Let's use this function for deleting a table.

46
00:03:01.670 --> 00:03:04.420
The query can be passed in as a string.

47
00:03:04.430 --> 00:03:08.070
Add the following query drop table if exists.

48
00:03:08.090 --> 00:03:11.990
WP db prefix recipe ratings.

49
00:03:14.260 --> 00:03:18.520
The query we've written is different than any query we've written before.

50
00:03:18.550 --> 00:03:19.920
Let's break it down.

51
00:03:19.930 --> 00:03:24.380
The drop table keywords will instruct the database to delete a table.

52
00:03:24.400 --> 00:03:27.340
Afterward, we're adding the if exists.

53
00:03:27.370 --> 00:03:28.270
Keywords.

54
00:03:28.270 --> 00:03:35.360
These keywords are optional by including them as SQL will not throw an error if the table does not exist.

55
00:03:35.380 --> 00:03:40.000
If an error gets thrown, this may interrupt the installation process.

56
00:03:40.030 --> 00:03:43.840
It can cause WordPress to not delete our plugin from a site.

57
00:03:44.050 --> 00:03:47.310
We should not disrupt the installation process.

58
00:03:47.320 --> 00:03:51.160
I recommend including these keywords as an extra precaution.

59
00:03:51.190 --> 00:03:53.950
Next, we can provide the name of the table.

60
00:03:53.950 --> 00:03:57.880
In this example, we are dropping the recipe ratings table.

61
00:03:57.910 --> 00:04:00.520
Overall, the query is very simple.

62
00:04:00.640 --> 00:04:04.210
Before testing this file, let's back up our in.

63
00:04:04.240 --> 00:04:06.880
Otherwise, we're going to lose our work.

64
00:04:06.910 --> 00:04:10.210
Open the plugins folder in your file explorer.

65
00:04:12.450 --> 00:04:14.610
Zip the Udemy plus plug in.

66
00:04:16.690 --> 00:04:21.010
Next, let's open the plugins page in the admin dashboard.

67
00:04:23.220 --> 00:04:26.280
I'm going to deactivate and delete the plugin.

68
00:04:30.820 --> 00:04:35.950
After uninstalling the plugin, the plugin files will completely disappear from our site.

69
00:04:35.980 --> 00:04:40.930
Let's verify the table was deleted by opening the database in another tab.

70
00:04:43.800 --> 00:04:47.190
As you can see, the recipe ratings table is gone.

71
00:04:47.190 --> 00:04:47.980
Perfect.

72
00:04:48.000 --> 00:04:52.170
I recommend activating the utility plus plugin through the zip file.

73
00:04:52.200 --> 00:04:54.780
We deleted it for testing purposes.

74
00:04:54.780 --> 00:04:58.260
As you do so, I want to answer a crucial question.

75
00:05:01.350 --> 00:05:07.830
Oftentimes beginner developers will ask me if they should delete content related to the custom post

76
00:05:07.830 --> 00:05:08.340
type.

77
00:05:08.370 --> 00:05:10.500
The answer is it depends.

78
00:05:10.530 --> 00:05:14.280
Some plugins will completely wipe custom post type data.

79
00:05:14.310 --> 00:05:15.990
Other plugins will not.

80
00:05:16.080 --> 00:05:22.260
The reason we're not purging custom post type data has to do with the possibility of other areas in

81
00:05:22.260 --> 00:05:24.780
WordPress using the custom post type.

82
00:05:24.810 --> 00:05:29.030
It's not uncommon for plugins to access data from other post types.

83
00:05:29.040 --> 00:05:33.180
Deleting custom post type data can potentially break a site.

84
00:05:33.210 --> 00:05:35.800
The recipe table was a custom table.

85
00:05:35.820 --> 00:05:41.350
It's highly unlikely a plug and we'll know how to work with it, let alone know its existence.

86
00:05:41.370 --> 00:05:46.770
The table was outside the scope of WordPress is API, therefore we should clean it up.

87
00:05:46.830 --> 00:05:53.730
Custom post type data and metadata are features within WordPress scope, so it's perfectly fine to leave

88
00:05:53.730 --> 00:05:54.780
that data there.

89
00:05:54.780 --> 00:05:56.970
At the end of the day, it's up to you.

90
00:05:56.970 --> 00:06:00.760
If you want to delete the custom post type data, that's fine.

91
00:06:00.780 --> 00:06:05.250
In the next lecture, let's explore some tools for debugging WordPress.

