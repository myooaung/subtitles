1
00:00:00,090 --> 00:00:05,100
In this lecture we will explore another feature of PHP called Arrays.

2
00:00:05,130 --> 00:00:11,760
Often we may need to work with a group or collection of data, for example, a collection of blog posts

3
00:00:11,760 --> 00:00:12,730
or users.

4
00:00:12,750 --> 00:00:16,820
So far we've explored storing a single piece of data.

5
00:00:16,830 --> 00:00:19,980
What if we need to store multiple pieces of data?

6
00:00:20,010 --> 00:00:24,390
One solution would be to create a variable for each piece of data.

7
00:00:24,420 --> 00:00:27,780
Unfortunately, that's not a scalable solution.

8
00:00:27,780 --> 00:00:31,350
We would need to memorize the names of each variable.

9
00:00:31,380 --> 00:00:37,220
Ideally, we should be able to store multiple pieces of data in a single variable.

10
00:00:37,230 --> 00:00:39,360
That's what an array is for.

11
00:00:39,390 --> 00:00:43,100
Arrays can store an unlimited amount of values.

12
00:00:43,110 --> 00:00:46,710
Let's try creating one inside our PHP file.

13
00:00:46,710 --> 00:00:49,200
Let's remove the existing code.

14
00:00:51,260 --> 00:00:55,130
Next, let's create a variable called food.

15
00:00:57,330 --> 00:01:03,690
The value for this variable will be the word array, followed by a pair of parentheses.

16
00:01:05,930 --> 00:01:08,990
A raise can be created with the array function.

17
00:01:08,990 --> 00:01:13,700
As we learned, functions are a feature for outsourcing reusable logic.

18
00:01:13,700 --> 00:01:16,760
We're not limited to functions defined by us.

19
00:01:16,760 --> 00:01:23,360
There are hundreds of functions built into the PHP language to help you perform various tasks.

20
00:01:23,360 --> 00:01:27,830
We don't need to do anything to expose these functions to our code.

21
00:01:27,830 --> 00:01:30,800
They're automatically available from the beginning.

22
00:01:30,800 --> 00:01:34,490
Strangely, the value of the variable is a function.

23
00:01:34,490 --> 00:01:39,380
We haven't discussed this feature, but functions can return values.

24
00:01:39,380 --> 00:01:44,180
The value returned by the function will be used as the variables value.

25
00:01:44,180 --> 00:01:48,200
In our case, the array function will return an array.

26
00:01:48,230 --> 00:01:54,350
Therefore the food variable will store an array, not a copy of the array function.

27
00:01:54,410 --> 00:01:58,610
Inside the functions arguments we can start adding values.

28
00:01:58,610 --> 00:02:01,220
There are a couple of things to keep in mind.

29
00:02:01,220 --> 00:02:04,710
We're allowed to store as many values as we'd like.

30
00:02:04,750 --> 00:02:07,250
Values must be comma separated.

31
00:02:07,250 --> 00:02:11,120
Lastly, the data types do not need to be consistent.

32
00:02:11,120 --> 00:02:14,450
We can create an array of strings and numbers.

33
00:02:14,450 --> 00:02:19,400
However, it's common practice to store the same type of value within an array.

34
00:02:19,430 --> 00:02:21,680
It keeps our code consistent.

35
00:02:21,680 --> 00:02:24,650
Let's try adding some of our favorite food.

36
00:02:29,710 --> 00:02:35,280
By creating an array or able to store a collection of data in a single variable.

37
00:02:35,290 --> 00:02:39,130
The next step is to start rendering the data in our array.

38
00:02:39,160 --> 00:02:43,660
After creating the array, let's echo the food variable.

39
00:02:45,910 --> 00:02:52,750
Individual items in an array can be accessed by typing a pair of square brackets after the array.

40
00:02:52,780 --> 00:02:59,320
Inside the brackets we can type a number to grab an item from an array behind the scenes.

41
00:02:59,740 --> 00:03:03,360
PHP will assign numeric indexes to each value.

42
00:03:03,370 --> 00:03:08,020
In the programming world, it's common for an index to start at zero.

43
00:03:08,200 --> 00:03:13,570
So for example, let's say we want to grab the first item in the array.

44
00:03:13,600 --> 00:03:16,420
The index for this item would be zero.

45
00:03:16,450 --> 00:03:18,200
What about the second item?

46
00:03:18,220 --> 00:03:21,190
The second item would have an index of one.

47
00:03:21,220 --> 00:03:24,040
The third item would have an index of two.

48
00:03:24,070 --> 00:03:25,530
So on and so forth.

49
00:03:25,540 --> 00:03:29,190
You get the picture inside the square brackets.

50
00:03:29,200 --> 00:03:32,740
We can input the index of the item we'd like to grab.

51
00:03:32,770 --> 00:03:36,040
Let's grab the first item by typing zero.

52
00:03:38,340 --> 00:03:40,020
Before viewing the browser.

53
00:03:40,020 --> 00:03:42,530
Let's try rendering a different item.

54
00:03:42,540 --> 00:03:48,420
Trying this as an exercise, I want you to output a different item from the array.

55
00:03:48,450 --> 00:03:50,610
Pause the video and good luck.

56
00:03:53,820 --> 00:03:54,730
Welcome back.

57
00:03:54,750 --> 00:03:57,280
Let's walk through the solution together.

58
00:03:57,300 --> 00:04:00,540
After the first echo statement, let's add another.

59
00:04:00,540 --> 00:04:04,680
For this example, I will put the last item in the array.

60
00:04:04,710 --> 00:04:10,770
The index for this value is to remember to add the number inside the square brackets.

61
00:04:13,020 --> 00:04:15,150
Next, let's view the browser.

62
00:04:17,209 --> 00:04:20,700
As expected, both values appear on the page.

63
00:04:20,720 --> 00:04:21,970
That's fantastic.

64
00:04:21,980 --> 00:04:27,780
We have the power to store a collection of values and access them individually.

65
00:04:27,800 --> 00:04:31,940
Let's continue our discussion of arrays in the next lecture.

