1
00:00:00,120 --> 00:00:04,170
In this lecture, we are going to explore the idea of components.

2
00:00:04,620 --> 00:00:07,050
HTML was never designed to be scalable.

3
00:00:07,050 --> 00:00:11,640
Like other languages, files can easily become thousands of lines long.

4
00:00:11,670 --> 00:00:15,060
Trying to find an element within a document can be tedious.

5
00:00:15,060 --> 00:00:22,200
The larger your file becomes, it isn't possible to split your HTML into separate files for a single

6
00:00:22,200 --> 00:00:22,980
page.

7
00:00:23,100 --> 00:00:27,240
React has curated a solution for tackling this problem.

8
00:00:27,240 --> 00:00:29,580
Components are supported and React.

9
00:00:29,610 --> 00:00:31,050
What is a component?

10
00:00:31,080 --> 00:00:34,260
A component is a feature for teaching the browser.

11
00:00:34,260 --> 00:00:40,650
New tags browsers will have various tags from paragraph tags to video tags.

12
00:00:40,680 --> 00:00:44,580
Each tag will create a UI element on the browser.

13
00:00:44,580 --> 00:00:46,890
Some tags will render text.

14
00:00:46,920 --> 00:00:50,820
Other tags will render fully functional video players.

15
00:00:50,820 --> 00:00:54,210
With React, we can create custom elements.

16
00:00:54,210 --> 00:00:58,530
For example, we can teach the browser to render a login form.

17
00:00:58,530 --> 00:01:04,260
Best of all, we have complete control over the behavior and appearance of a component.

18
00:01:04,260 --> 00:01:05,700
The sky is the limits.

19
00:01:06,490 --> 00:01:08,170
I've got a secret for you.

20
00:01:08,200 --> 00:01:11,290
We have already created our first components.

21
00:01:11,320 --> 00:01:14,830
The page function can be considered a component.

22
00:01:14,830 --> 00:01:17,350
Components are created with functions.

23
00:01:17,350 --> 00:01:19,000
There's just one rule.

24
00:01:19,000 --> 00:01:26,620
The function must return JZ X Other than that, React will recognize our functions as components.

25
00:01:26,650 --> 00:01:31,840
To prove it, let's update the render function inside the first argument.

26
00:01:31,840 --> 00:01:37,060
We're going to replace the page function with a self closing page tag.

27
00:01:39,390 --> 00:01:42,850
If we were to look at the page, our app is fully functional.

28
00:01:42,870 --> 00:01:44,070
That's incredible.

29
00:01:44,100 --> 00:01:48,060
React was able to detect that we are writing a custom components.

30
00:01:48,090 --> 00:01:53,270
It'll search our application for a function definition that shares the same name.

31
00:01:53,280 --> 00:01:54,810
If it finds a function.

32
00:01:54,840 --> 00:01:58,530
It'll invoke the function and render the returned value.

33
00:01:58,680 --> 00:02:01,230
We're not limited to a single component.

34
00:02:01,230 --> 00:02:04,720
An unlimited number of components can be created.

35
00:02:04,740 --> 00:02:09,410
Let's try creating another component above the page function.

36
00:02:09,419 --> 00:02:11,580
Defining a function called header.

37
00:02:13,820 --> 00:02:18,590
It's considered standard practice to capitalize the name of a component.

38
00:02:18,620 --> 00:02:22,980
The names for regular high HTML elements are all lowercase.

39
00:02:23,000 --> 00:02:29,550
This naming convention helps developers distinguish custom component names from regular elements.

40
00:02:29,570 --> 00:02:35,280
This component will be responsible for rendering the H one tag from the page components.

41
00:02:35,300 --> 00:02:39,260
Let's move the H one tag over to our new component.

42
00:02:41,490 --> 00:02:45,600
Lastly, we're going to return the elements unlike before.

43
00:02:45,630 --> 00:02:48,900
We're not going to wrap the element with parentheses.

44
00:02:48,930 --> 00:02:51,330
A pair of parentheses are optional.

45
00:02:51,330 --> 00:02:57,540
If you're writing multi line X, the heading element can be returned on a single line.

46
00:02:57,870 --> 00:03:03,630
After making that adjustment, the heading should disappear from the page as an exercise.

47
00:03:03,630 --> 00:03:09,540
Try adding the H one tag back to the page component by using our new function.

48
00:03:09,540 --> 00:03:11,880
Pause the video and give it a try.

49
00:03:14,030 --> 00:03:15,080
Welcome back.

50
00:03:15,110 --> 00:03:18,380
Hopefully you were able to take on the exercise.

51
00:03:18,380 --> 00:03:19,910
Don't worry if you couldn't.

52
00:03:19,940 --> 00:03:22,260
Let's tackle the solution together.

53
00:03:22,280 --> 00:03:28,670
Back in the page component, we can load the header component by adding a self closing tag with the

54
00:03:28,670 --> 00:03:30,590
same name as the function.

55
00:03:32,740 --> 00:03:35,550
In a few seconds, the page will refresh.

56
00:03:35,560 --> 00:03:38,080
As you can see, the heading is back.

57
00:03:38,110 --> 00:03:40,370
Creating components is very easy.

58
00:03:40,390 --> 00:03:45,760
React makes the process painless by leveraging existing features in JavaScript.

59
00:03:45,760 --> 00:03:49,960
Before ending this lecture, let's create a dynamic components.

60
00:03:50,170 --> 00:03:53,890
Previously, our component was displaying the current time.

61
00:03:53,890 --> 00:03:55,960
We've lost that functionality.

62
00:03:55,960 --> 00:03:57,400
Let's add it back in.

63
00:03:57,400 --> 00:03:59,170
Inside the header function.

64
00:03:59,170 --> 00:04:01,600
Define a variable called clock.

65
00:04:01,630 --> 00:04:06,070
Its value will be the date dot to local string function.

66
00:04:08,190 --> 00:04:12,600
Next, we need to inject this variable into the H one tag.

67
00:04:12,630 --> 00:04:20,950
The question is how J6 has a special syntax for adding expressions at the end of the H one tag.

68
00:04:20,970 --> 00:04:24,690
Add a pair of curly brackets inside these brackets.

69
00:04:24,690 --> 00:04:26,910
Insert the clock variable.

70
00:04:29,290 --> 00:04:33,760
The curly brackets act as a placeholder inside the curly brackets.

71
00:04:33,910 --> 00:04:39,430
You must add a valid JavaScript expression before the content is rendered on the screen.

72
00:04:39,460 --> 00:04:41,590
The expression will be processed.

73
00:04:41,590 --> 00:04:46,040
Whatever value was returned by the expression will appear on the page.

74
00:04:46,060 --> 00:04:50,230
As you can see on the page, we have a fully functional clock again.

75
00:04:50,380 --> 00:04:54,550
In a nutshell, components are a core feature of React.

76
00:04:54,580 --> 00:04:59,590
We're not forced to place our entire document structure in a single function.

77
00:04:59,620 --> 00:05:03,700
The UI of the document can be split into various components.

78
00:05:03,730 --> 00:05:08,710
This feature gives developers a maintainable and scalable project.

