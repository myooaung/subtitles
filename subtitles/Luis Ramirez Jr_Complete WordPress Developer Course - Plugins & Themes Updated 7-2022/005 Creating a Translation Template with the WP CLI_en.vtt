WEBVTT
1
00:00:00.150 --> 00:00:05.340
In this lecture, we are going to create a translation templates for our plugin.

2
00:00:05.550 --> 00:00:09.120
There are various tools available for generating a templates.

3
00:00:09.150 --> 00:00:13.140
In my opinion, the best tool is the WordPress CLI.

4
00:00:13.170 --> 00:00:19.650
In the resource section of this lecture, I provide a link to the WP CLI Handbook.

5
00:00:19.680 --> 00:00:23.520
This handbook will provide a basic overview of this tool.

6
00:00:23.760 --> 00:00:29.670
The WP CLI was created for interacting with WordPress sites from the command line.

7
00:00:29.700 --> 00:00:34.320
It's different from the other command line tools we've worked with thus far.

8
00:00:34.350 --> 00:00:38.900
The WordPress Scripts package is aimed at plugin development.

9
00:00:38.910 --> 00:00:43.470
This tool can completely manage your WordPress site without using a UI.

10
00:00:43.500 --> 00:00:48.390
We can install plugins, create posts, update users and download.

11
00:00:48.390 --> 00:00:55.200
WordPress developers may prefer to manage WordPress from the command line rather than an interface.

12
00:00:55.410 --> 00:00:57.440
I don't normally use this tool.

13
00:00:57.450 --> 00:01:01.240
However, it has a command for generating template files.

14
00:01:01.260 --> 00:01:04.510
It's beneficial for plugin and theme developers.

15
00:01:04.530 --> 00:01:05.910
Let's give it a try.

16
00:01:05.940 --> 00:01:08.440
First, we must install this tool.

17
00:01:08.460 --> 00:01:12.240
If you're using local, this tool has been installed for you.

18
00:01:12.270 --> 00:01:18.120
However, if you're using a different environment, you must follow the installation instructions from

19
00:01:18.120 --> 00:01:19.770
the installing page.

20
00:01:19.800 --> 00:01:27.680
For those of you following along with me, let's open the WP CLI with local open the local application.

21
00:01:27.690 --> 00:01:31.980
If we select our site, there's an option for opening the site shell.

22
00:01:32.010 --> 00:01:33.510
Click on this option.

23
00:01:35.640 --> 00:01:38.540
After doing so, a command line will open.

24
00:01:38.550 --> 00:01:45.190
Unlike the command line from our system, this command line will have access to the WPC line.

25
00:01:45.240 --> 00:01:48.690
Therefore, we can run commands from this package.

26
00:01:48.720 --> 00:01:51.420
You may receive errors from the command line.

27
00:01:51.450 --> 00:01:52.890
That's perfectly fine.

28
00:01:52.920 --> 00:01:59.190
We can test the CLI by running a command called WP minus minus version.

29
00:02:01.400 --> 00:02:06.050
BWP CLE can be accessed by typing the WP command.

30
00:02:06.050 --> 00:02:11.780
In this example, we're adding the version flag to grab the current version of the CLI.

31
00:02:11.810 --> 00:02:17.040
If the version appears that's perfect, we can continue with our objective.

32
00:02:17.060 --> 00:02:20.370
Let's move into the Udemy plus plugin directory.

33
00:02:20.390 --> 00:02:23.500
The command line will place you in this directory.

34
00:02:23.510 --> 00:02:25.970
We must manually move into it.

35
00:02:26.000 --> 00:02:30.430
If you forget where to find the directory, you can refer to local.

36
00:02:30.440 --> 00:02:33.570
There's an option for opening the project directory.

37
00:02:33.590 --> 00:02:38.100
From there, you can run the command to move around the system.

38
00:02:38.120 --> 00:02:41.360
I'm going to quickly move into our plugins directory.

39
00:02:43.650 --> 00:02:48.180
Once you've moved into the directory, we can type the following commands.

40
00:02:48.210 --> 00:02:51.570
WP I 18 n make pot.

41
00:02:53.720 --> 00:02:56.050
This command has two arguments.

42
00:02:56.060 --> 00:02:59.900
The first argument is the name of the directory of our plug in.

43
00:02:59.900 --> 00:03:06.400
By providing a directory, the tool will scan the entire directory for files with translations.

44
00:03:06.410 --> 00:03:12.260
As long as our application is using the official WordPress functions for translating checks, they'll

45
00:03:12.260 --> 00:03:14.270
be extracted by this command.

46
00:03:14.300 --> 00:03:18.350
It'll extract those translations into a separate file.

47
00:03:18.470 --> 00:03:21.500
In this example, we are going to add a dot.

48
00:03:21.500 --> 00:03:24.200
We're already inside the plugin directory.

49
00:03:24.200 --> 00:03:30.050
We can tell the commands to run from within the current directory by passing in a dot.

50
00:03:30.260 --> 00:03:36.320
Next we can set the name of the file for storing translations by providing a path.

51
00:03:36.350 --> 00:03:38.420
Let's use the following path.

52
00:03:38.420 --> 00:03:42.320
Languages slash youtube plus dot plot.

53
00:03:44.590 --> 00:03:50.660
Translations should be stored in a separate directory from our PHP and JavaScript files.

54
00:03:50.680 --> 00:03:56.200
Most developers prefer storing translations in a directory called Languages.

55
00:03:56.230 --> 00:03:59.220
Let's follow this practice for consistency.

56
00:03:59.230 --> 00:04:05.370
Within this directory, the name of our translation files should be named after the name of our plugin.

57
00:04:05.380 --> 00:04:07.060
Let's run the command.

58
00:04:09.230 --> 00:04:11.970
This command may take a while to execute.

59
00:04:11.990 --> 00:04:17.550
It's searching through our files for translations after the command finishes running.

60
00:04:17.570 --> 00:04:19.769
It'll output a success message.

61
00:04:19.790 --> 00:04:22.430
Let's open the plugin in our editors.

62
00:04:24.590 --> 00:04:30.770
As you can see, a new directory was created called Languages inside this directory.

63
00:04:30.800 --> 00:04:34.460
There's a new file called Utility Plus Dot Plot.

64
00:04:34.490 --> 00:04:38.310
There are three types of files for handling translations.

65
00:04:38.330 --> 00:04:40.880
The first file type is called Potts.

66
00:04:40.910 --> 00:04:43.490
These files are considered templates.

67
00:04:43.490 --> 00:04:47.480
They must always contain the original translation of a plugin.

68
00:04:47.630 --> 00:04:53.030
Translators can create a copy of this file with the extension files.

69
00:04:53.030 --> 00:04:57.650
With the POA extension are considered the official translation of a plug in.

70
00:04:57.800 --> 00:05:01.000
Typically, these files are in other languages.

71
00:05:01.010 --> 00:05:03.800
The last file type is called MO.

72
00:05:03.830 --> 00:05:07.760
Unlike the other file types, you cannot modify these files.

73
00:05:07.760 --> 00:05:14.330
They've been compiled into machine readable code for WordPress loading translation files can take a

74
00:05:14.330 --> 00:05:16.580
while to speed up the process.

75
00:05:16.580 --> 00:05:19.760
ML files are optimized for machines.

76
00:05:19.760 --> 00:05:22.130
Creating these files can be a pain.

77
00:05:22.130 --> 00:05:25.940
Luckily, there is a plug in for expediting this process.

78
00:05:25.940 --> 00:05:29.270
Let's talk about this plugin in the following lecture.

