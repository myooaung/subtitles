WEBVTT
1
00:00:00.150 --> 00:00:03.600
In this lecture, we are going to quickly hide the model.

2
00:00:03.600 --> 00:00:05.500
At the moment I'm logged in.

3
00:00:05.520 --> 00:00:11.790
There are two noticeable problems with the current implementation of our authentication model.

4
00:00:11.820 --> 00:00:16.190
Firstly, the header tools block asks the user to log in.

5
00:00:16.200 --> 00:00:17.610
That doesn't seem right.

6
00:00:17.640 --> 00:00:20.880
The header tools should acknowledge the user is logged in.

7
00:00:20.910 --> 00:00:26.640
Secondly, the modal will continue to appear if we click on the link the modal pops up.

8
00:00:26.670 --> 00:00:30.750
It shouldn't be possible to create a new account or log in.

9
00:00:30.870 --> 00:00:37.020
Both problems can be resolved by checking the user's current authentication status if they're logged

10
00:00:37.020 --> 00:00:37.380
in.

11
00:00:37.410 --> 00:00:39.340
We are going to greet the user.

12
00:00:39.360 --> 00:00:42.490
As for the modal, it will be completely invisible.

13
00:00:42.510 --> 00:00:44.820
The link should not open a modal.

14
00:00:44.850 --> 00:00:49.700
For this lecture, we are going to start by hiding the modal in your editor.

15
00:00:49.710 --> 00:00:53.100
Open the off modal dot php file.

16
00:00:55.290 --> 00:00:56.850
At the top of the function.

17
00:00:56.850 --> 00:00:58.710
Add a conditional statements.

18
00:01:00.900 --> 00:01:04.980
The condition will be the is user logged in function.

19
00:01:07.070 --> 00:01:09.590
This function is defined by WordPress.

20
00:01:09.620 --> 00:01:14.240
It will check the user's current authentication if the user is logged in.

21
00:01:14.270 --> 00:01:17.630
This function returns true inside the block.

22
00:01:17.630 --> 00:01:19.610
Lets return an empty string.

23
00:01:21.790 --> 00:01:25.420
By returning an empty string, the modal will never appear.

24
00:01:25.450 --> 00:01:29.320
It doesn't matter if there are links with the open modal class.

25
00:01:29.350 --> 00:01:32.970
Another thing worth mentioning is the location of this condition.

26
00:01:32.980 --> 00:01:35.080
We're not waiting to create a buffer.

27
00:01:35.080 --> 00:01:37.730
It's not necessary to return an empty string.

28
00:01:37.750 --> 00:01:40.930
Let's test our code by refreshing the page.

29
00:01:43.200 --> 00:01:46.020
If we click on the link, the modal never appears.

30
00:01:46.020 --> 00:01:49.350
We've fixed the second problem of our block.

31
00:01:49.350 --> 00:01:52.830
However, the links are still displaying the wrong text.

32
00:01:52.830 --> 00:01:57.090
In addition, there's another problem that's hidden from us in the browser.

33
00:01:57.120 --> 00:02:00.690
Open the console panel of the developer tools.

34
00:02:02.810 --> 00:02:06.730
After clicking on the link, an error gets thrown by the console.

35
00:02:06.740 --> 00:02:13.700
Despite not adding the modal, the open modal class is still applied to the link we need to remove this

36
00:02:13.700 --> 00:02:18.790
link to, otherwise the messages will continue to appear in the console.

37
00:02:18.800 --> 00:02:24.620
Let's modify the header tools block by opening the header tools php file.

38
00:02:26.890 --> 00:02:30.630
At the top of the function create a variable called user.

39
00:02:30.640 --> 00:02:34.900
The value will be the WP gets current user function.

40
00:02:37.030 --> 00:02:40.750
We're not going to be using the is user logged in function.

41
00:02:40.750 --> 00:02:44.260
We need more than a boolean value inside the block.

42
00:02:44.260 --> 00:02:47.020
The user's name should be rendered on the page.

43
00:02:47.020 --> 00:02:52.000
The WP get current user function will check if the user is logged in.

44
00:02:52.030 --> 00:02:56.890
The value returned by this function will be an object of the user's info.

45
00:02:56.890 --> 00:02:58.690
But what if they're not logged in?

46
00:02:58.840 --> 00:03:04.570
The object returned by this function has a method for verifying the user's authentication.

47
00:03:04.570 --> 00:03:08.110
We can take advantage of this function before reading their data.

48
00:03:08.110 --> 00:03:10.360
Let me show you an example below.

49
00:03:10.360 --> 00:03:13.990
The user variable create a variable called name.

50
00:03:13.990 --> 00:03:17.170
The value will be the following user exists.

51
00:03:17.170 --> 00:03:18.580
Question mark user.

52
00:03:18.580 --> 00:03:19.180
Log in.

53
00:03:19.180 --> 00:03:20.740
Colon sign in.

54
00:03:26.660 --> 00:03:32.310
In this example, we're using a ternary operator before assigning a value to the variable.

55
00:03:32.330 --> 00:03:37.160
The exists method will check if the user object has information.

56
00:03:37.160 --> 00:03:40.190
If there is a user, this method returns true.

57
00:03:40.220 --> 00:03:47.570
In this case, we can set the variable to the name from the object by accessing the user log in property.

58
00:03:47.600 --> 00:03:53.210
Otherwise we're setting the variable to static text to encourage the user to log in.

59
00:03:53.240 --> 00:03:56.930
Let's create one more variable called open class.

60
00:03:56.930 --> 00:04:01.060
The value for this variable will be the following user exists.

61
00:04:01.070 --> 00:04:02.120
Question mark.

62
00:04:02.120 --> 00:04:03.830
Empty string colon.

63
00:04:03.830 --> 00:04:04.880
Open modal.

64
00:04:07.000 --> 00:04:09.430
The class will be stored in a variable.

65
00:04:09.430 --> 00:04:12.190
We're not going to statically render the class.

66
00:04:12.190 --> 00:04:13.480
It should be dynamic.

67
00:04:13.480 --> 00:04:17.980
Let's update our template to output this information inside the template.

68
00:04:17.980 --> 00:04:22.180
Search for an anchor element with a class called Sign in link.

69
00:04:24.370 --> 00:04:25.360
On this element.

70
00:04:25.360 --> 00:04:29.650
We can replace the open modal class with the open class variable.

71
00:04:31.700 --> 00:04:36.470
Next search for a div tag with a class called Sign in text.

72
00:04:38.660 --> 00:04:41.690
Replace the static text with the name variable.

73
00:04:43.700 --> 00:04:49.220
In both examples we are entering PvP mode to echo the variables values.

74
00:04:49.250 --> 00:04:52.670
After making those changes, let's refresh the page.

75
00:04:54.800 --> 00:04:56.750
This time things are different.

76
00:04:56.780 --> 00:04:59.030
I'm still logged into the application.

77
00:04:59.060 --> 00:05:02.820
The header tools block will display my name on the page.

78
00:05:02.840 --> 00:05:06.950
Furthermore, the link does not throw errors after clicking on it.

79
00:05:06.980 --> 00:05:07.910
That's perfect.

80
00:05:07.940 --> 00:05:11.710
We've successfully updated the blocks to behave correctly.

81
00:05:11.720 --> 00:05:14.790
You can log out to test the opposite behavior.

82
00:05:14.810 --> 00:05:18.650
In the next lecture, let's discuss some final topics.

