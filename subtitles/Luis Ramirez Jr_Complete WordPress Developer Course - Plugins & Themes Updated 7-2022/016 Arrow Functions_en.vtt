WEBVTT
1
00:00:00.150 --> 00:00:06.660
In this lecture, we are going to explore another option for writing functions called an arrow function.

2
00:00:06.689 --> 00:00:11.790
Arrow functions were introduced to provide a shorter way of writing a function.

3
00:00:11.820 --> 00:00:15.540
They're relatively popular within the JavaScript community.

4
00:00:15.570 --> 00:00:19.750
Most developers prefer arrow functions over regular functions.

5
00:00:19.770 --> 00:00:22.960
Let's explore this feature inside your editor.

6
00:00:22.980 --> 00:00:24.630
Open the main file.

7
00:00:26.740 --> 00:00:29.500
Next, clear the contents of the file.

8
00:00:31.600 --> 00:00:36.830
First, let's create a regular function for comparison inside the file.

9
00:00:36.850 --> 00:00:39.010
Define a function called hello.

10
00:00:39.040 --> 00:00:43.270
Inside this function, we will output a message to the console.

11
00:00:45.470 --> 00:00:48.020
Lastly, let's invoke the function.

12
00:00:50.320 --> 00:00:53.570
If we refresh the page, the message gets logged.

13
00:00:53.590 --> 00:00:55.150
Nothing new so far.

14
00:00:55.330 --> 00:00:58.820
Arrow functions are a new way to create functions.

15
00:00:58.840 --> 00:01:03.340
The syntax can be a bit confusing at first, but it's definitely more readable.

16
00:01:03.340 --> 00:01:09.250
Once you understand what's going on to create an arrow function, you need to do the following.

17
00:01:09.250 --> 00:01:12.610
First, we can safely remove the function keyword.

18
00:01:12.610 --> 00:01:15.790
It's not necessary for defining an arrow function.

19
00:01:15.790 --> 00:01:18.640
Next, we can remove the name of the function.

20
00:01:20.960 --> 00:01:27.850
Afterward, we can add the following symbols after the parenthesis equal sign greater than sine.

21
00:01:30.090 --> 00:01:33.630
These characters are referred to as a fat arrow.

22
00:01:33.660 --> 00:01:36.780
Lastly, the curly braces can be removed.

23
00:01:38.990 --> 00:01:44.510
Instead of putting the console statement on a new line, we can move the message to the same line.

24
00:01:46.680 --> 00:01:49.850
This is a very basic example of an arrow function.

25
00:01:49.860 --> 00:01:53.730
It's a shorter syntax for writing a function straight off the bat.

26
00:01:53.760 --> 00:01:56.470
Arrow functions are entirely anonymous.

27
00:01:56.490 --> 00:02:01.680
If you are to add the name of the function before the parentheses, this would produce an error.

28
00:02:01.710 --> 00:02:04.630
Arrow functions are not meant to be written alone.

29
00:02:04.650 --> 00:02:11.130
Primarily, you will either assign an arrow function to a variable or pass it into another function.

30
00:02:11.220 --> 00:02:14.870
Let's assign it to a variable before the arrow function.

31
00:02:14.880 --> 00:02:17.520
Assign it to a variable called Hello.

32
00:02:17.550 --> 00:02:22.410
The value of this variable will be assigned to the arrow function like so.

33
00:02:23.870 --> 00:02:26.220
Let's make a side by side comparison.

34
00:02:26.240 --> 00:02:31.220
I'm going to add a comment above the variable to indicate it's an arrow function.

35
00:02:31.340 --> 00:02:36.440
Next, I'm going to create a normal function like the one we had before.

36
00:02:36.530 --> 00:02:39.120
Both functions perform the same logic.

37
00:02:39.140 --> 00:02:42.730
They're nearly identical as far as functionality goes.

38
00:02:42.740 --> 00:02:45.950
The only noticeable difference is the way they're written.

39
00:02:45.980 --> 00:02:52.100
Unlike arrow functions, regular functions are usually multi lined, even if you only have a single

40
00:02:52.100 --> 00:02:53.060
line of code.

41
00:02:53.360 --> 00:02:56.620
Of course, you can always move everything to one line.

42
00:02:56.630 --> 00:02:59.550
However, your code becomes less readable.

43
00:02:59.570 --> 00:03:03.440
The arrow function is much more readable and shorter to write.

44
00:03:03.470 --> 00:03:06.230
I'm going to comment out the regular function.

45
00:03:08.450 --> 00:03:10.980
Let's keep working with the arrow function.

46
00:03:11.000 --> 00:03:13.750
Multi-line arrow functions are optional.

47
00:03:13.760 --> 00:03:19.610
You can create a multi-line arrow function by adding curly brackets to the body of the function.

48
00:03:22.000 --> 00:03:24.550
The curly brackets are completely optional.

49
00:03:24.550 --> 00:03:30.910
If you have one line of code but required if you have multiple lines, just like any other function

50
00:03:30.910 --> 00:03:32.600
parameters are supported.

51
00:03:32.620 --> 00:03:36.610
I'm going to create a parameter called param one.

52
00:03:36.640 --> 00:03:40.930
Multiple parameters can be added by separating them with a comma.

53
00:03:40.960 --> 00:03:44.260
For this example, let's stick to one parameter.

54
00:03:44.440 --> 00:03:49.390
Let's update the hello function invocation by passing in a message.

55
00:03:51.520 --> 00:03:55.780
Next, let's update our function to log the parameter.

56
00:03:57.970 --> 00:04:00.310
Lastly, refresh the page.

57
00:04:02.480 --> 00:04:04.480
These same behavior occurs.

58
00:04:04.490 --> 00:04:08.810
There are two things you should be aware of when using arrow functions.

59
00:04:08.810 --> 00:04:13.370
Firstly, parentheses are optional for functions with one parameter.

60
00:04:13.370 --> 00:04:16.339
In this example, we have one parameter.

61
00:04:16.490 --> 00:04:21.290
If we were to remove the parentheses, the syntax would be considered valid.

62
00:04:21.320 --> 00:04:25.820
However, this option is only available if you have one parameter.

63
00:04:25.820 --> 00:04:31.280
For example, if an arrow function has zero parameters, you must have parentheses.

64
00:04:31.280 --> 00:04:34.760
If you have one parameter parentheses are optional.

65
00:04:34.760 --> 00:04:39.290
If you have two or more parameters, you're required to have parentheses.

66
00:04:39.500 --> 00:04:43.970
The other thing to be aware of is that arrow functions do not have a scope.

67
00:04:43.970 --> 00:04:47.720
As an example, let's create an object called Foo.

68
00:04:49.900 --> 00:04:52.800
This object will have a property called NUM.

69
00:04:52.810 --> 00:04:55.470
The NUM property will be set to ten.

70
00:04:55.480 --> 00:05:01.420
Next we will create a function called log num that logs the num property.

71
00:05:03.610 --> 00:05:06.190
Lastly, we're going to run the function.

72
00:05:08.320 --> 00:05:11.910
There are two options to reference the gnome property.

73
00:05:11.920 --> 00:05:16.150
We can use the foo variable name or the this keyword.

74
00:05:16.180 --> 00:05:19.560
The this keyword is the most commonly used option.

75
00:05:19.570 --> 00:05:22.810
If we refresh the page, the number gets logged.

76
00:05:22.840 --> 00:05:26.660
Let's try changing our solution to arrow functions.

77
00:05:26.680 --> 00:05:29.110
I'm going to remove the fat arrow.

78
00:05:31.340 --> 00:05:35.480
Lastly, I'm going to refresh the page to view the results.

79
00:05:37.760 --> 00:05:42.570
The console will output undefined aero functions don't have a scope.

80
00:05:42.590 --> 00:05:46.700
As a result, the this keyword doesn't point to the object.

81
00:05:46.730 --> 00:05:50.810
Normally JavaScript wouldn't have a problem finding the property.

82
00:05:50.810 --> 00:05:53.810
However, aero functions throw it off course.

83
00:05:53.810 --> 00:06:00.110
If we're trying to log the gnome property, the console statement will need to be updated to use the

84
00:06:00.110 --> 00:06:01.220
foo variable.

85
00:06:03.500 --> 00:06:07.970
If we refresh the page, the console should output the property.

86
00:06:10.160 --> 00:06:12.080
That's about all there is to it.

87
00:06:12.110 --> 00:06:14.870
eraL functions are popular for two reasons.

88
00:06:14.900 --> 00:06:19.130
The first reason is that it's easier to read and write than regular functions.

89
00:06:19.160 --> 00:06:22.760
The second reason is that the scope becomes less of a problem.

90
00:06:22.790 --> 00:06:27.110
Arrow functions share the scope of the parent, which can be helpful.

91
00:06:27.200 --> 00:06:33.480
In future lectures, we'll look at how Arrow functions can be helpful over regular functions.

92
00:06:33.500 --> 00:06:39.950
I know it may not seem like a big deal, but the advantages become clearer when writing larger applications.

93
00:06:39.950 --> 00:06:43.940
Throughout this course, we will heavily use arrow functions.

