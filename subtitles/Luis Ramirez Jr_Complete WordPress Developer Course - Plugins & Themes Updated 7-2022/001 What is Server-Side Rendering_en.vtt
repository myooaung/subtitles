WEBVTT
1
00:00:00.120 --> 00:00:04.560
In this section, we are going to begin our discussion of server side rendering.

2
00:00:04.590 --> 00:00:08.300
The first block we built was a client side rendered block.

3
00:00:08.310 --> 00:00:12.240
There's a vast difference between both types of rendering methods.

4
00:00:12.240 --> 00:00:16.470
Let's get into the differences and why you would choose one over the other.

5
00:00:16.620 --> 00:00:22.260
For starters, how does WordPress render a block on the front end with client side rendering?

6
00:00:22.260 --> 00:00:25.170
The process begins with the Gutenberg Editor.

7
00:00:25.170 --> 00:00:27.870
WordPress initiates the saving process.

8
00:00:27.870 --> 00:00:33.150
The moment a user publishes a post, it will loop through every block on the editor.

9
00:00:33.300 --> 00:00:37.170
On each iteration, it'll search for a save function.

10
00:00:37.170 --> 00:00:41.160
If this function exists, WordPress will invoke the function.

11
00:00:41.160 --> 00:00:46.020
The content produced by the save function will be saved in the database.

12
00:00:46.020 --> 00:00:50.130
Everything happens in the browser with JavaScript on the front end.

13
00:00:50.130 --> 00:00:55.620
If the page is requested, WordPress will search for the page from within the database.

14
00:00:55.620 --> 00:00:59.430
The content saved in the database will be sent to the browser.

15
00:00:59.460 --> 00:01:04.560
WordPress will not process the content further since it's ready out of the box.

16
00:01:04.560 --> 00:01:08.610
You can think of client side rendering as a fast food restaurant.

17
00:01:08.610 --> 00:01:12.150
By the time you've arrived at the restaurant, your food is ready.

18
00:01:12.150 --> 00:01:14.310
You're in and out within minutes.

19
00:01:14.310 --> 00:01:17.640
The process is different with server side rendering.

20
00:01:17.640 --> 00:01:22.590
If the user clicks publish WordPress will loop through the blocks on the page.

21
00:01:22.620 --> 00:01:29.850
If it finds a block without a safe function and HTML comment is saved in the database, attributes are

22
00:01:29.850 --> 00:01:32.490
added to the comment if a block needs them.

23
00:01:32.490 --> 00:01:39.210
Other than that, the editor doesn't perform additional work next before a page is delivered on the

24
00:01:39.210 --> 00:01:42.750
front end, WordPress will perform additional actions.

25
00:01:42.750 --> 00:01:45.630
It will notice that our block is lacking content.

26
00:01:45.630 --> 00:01:50.310
If it were to render the content as is, visitors would see nothing.

27
00:01:50.310 --> 00:01:54.480
After all, the block has been saved as an HTML comment.

28
00:01:54.510 --> 00:01:59.670
WordPress will search for a PHP function to handle rendering the content.

29
00:01:59.910 --> 00:02:03.120
This PHP function can be defined by us.

30
00:02:03.120 --> 00:02:09.479
Inside this function we must return content that will be presented to the visitor on the browser.

31
00:02:09.509 --> 00:02:14.250
This content will replace the HTML comment stored in the content.

32
00:02:14.280 --> 00:02:17.490
WordPress will deliver the content to the browser.

33
00:02:17.490 --> 00:02:21.750
You can think of server side rendering as a regular restaurant.

34
00:02:21.780 --> 00:02:24.150
Our food won't be ready from the beginning.

35
00:02:24.150 --> 00:02:28.560
The chef must take time to prepare our food after ordering.

36
00:02:28.590 --> 00:02:34.080
The question becomes why would we choose client side rendering or server side rendering?

37
00:02:34.080 --> 00:02:40.500
Client side rendering can be a great choice for simple content that does not rely on external data.

38
00:02:40.500 --> 00:02:46.350
The paragraph block is a great example of a block that can be created on the client.

39
00:02:46.350 --> 00:02:51.090
It's a block that has a simple presentation in terms of performance.

40
00:02:51.090 --> 00:02:54.180
Client side rendering is considered superior.

41
00:02:54.180 --> 00:02:56.880
The page may take a few seconds to save.

42
00:02:56.880 --> 00:03:01.380
However, on the front end, WordPress can render the page faster.

43
00:03:01.380 --> 00:03:04.050
The block does not need additional help.

44
00:03:04.050 --> 00:03:06.270
It's ready to go from the beginning.

45
00:03:06.270 --> 00:03:08.550
What about server side rendering?

46
00:03:08.550 --> 00:03:13.140
Server side rendering is great for blocks that produce dynamic content.

47
00:03:13.140 --> 00:03:15.930
The site title block is a great example.

48
00:03:15.930 --> 00:03:21.300
Users with administrative permissions have the power to change the title of a site.

49
00:03:21.300 --> 00:03:25.890
If the site title changes, the front end should reflect that change.

50
00:03:25.890 --> 00:03:30.510
Therefore, the site title block can never be rendered by the client.

51
00:03:30.540 --> 00:03:35.610
It must always check the database for the latest value of the site title.

52
00:03:35.700 --> 00:03:40.230
Server side rendering is considered slower than client side rendering.

53
00:03:40.230 --> 00:03:45.240
In most cases, you should consider creating a block with client side rendering.

54
00:03:45.240 --> 00:03:51.090
If the block's contents can be changed, you should switch over to server side rendering.

55
00:03:51.120 --> 00:03:54.480
Otherwise clients must manually save the page.

56
00:03:54.480 --> 00:04:00.690
If he blocks content is outdated, that may be okay for a single page, but what if we had hundreds

57
00:04:00.690 --> 00:04:01.590
of pages?

58
00:04:01.590 --> 00:04:03.870
It would become a tedious task.

59
00:04:03.900 --> 00:04:09.060
Through experience, you'll be able to decide which type of rendering to choose.

60
00:04:09.060 --> 00:04:14.640
For the rest of this section, we are going to create blocks with server side rendering.

61
00:04:14.640 --> 00:04:16.050
Let's get started.

