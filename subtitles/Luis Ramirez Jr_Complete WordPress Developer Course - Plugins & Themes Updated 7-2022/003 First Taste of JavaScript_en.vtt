WEBVTT
1
00:00:00.150 --> 00:00:05.700
In this lecture, we will get our first taste of Java script by running instructions in the browser.

2
00:00:05.760 --> 00:00:09.240
Typically, JavaScript is written in a separate file.

3
00:00:09.270 --> 00:00:15.600
However, the browser provides a few tools for quickly executing JavaScript in the browser.

4
00:00:15.630 --> 00:00:19.220
These tools allow us to quickly debug our applications.

5
00:00:19.230 --> 00:00:20.790
Let's give them a try.

6
00:00:20.820 --> 00:00:23.310
Open the developer tools for your browser.

7
00:00:23.310 --> 00:00:26.200
You can open the developer tools on any site.

8
00:00:26.220 --> 00:00:28.590
It doesn't have to be our WordPress site.

9
00:00:28.590 --> 00:00:31.200
Switch to the panel called Console.

10
00:00:31.230 --> 00:00:35.340
The console panel is a tool for reading messages from our site.

11
00:00:35.370 --> 00:00:38.720
These messages can range from errors to notices.

12
00:00:38.730 --> 00:00:42.510
It's an incredibly helpful tool for debugging and application.

13
00:00:42.690 --> 00:00:46.740
Messages can come from the browser or the code in our files.

14
00:00:46.770 --> 00:00:50.310
Immediately, you may be receiving messages from the browser.

15
00:00:50.310 --> 00:00:52.950
I have the console opened for our site.

16
00:00:52.980 --> 00:00:55.830
The console may be littered with error messages.

17
00:00:55.830 --> 00:00:59.310
As you can see, the console is already being helpful.

18
00:00:59.310 --> 00:01:02.010
It will inform you of problems on your site.

19
00:01:02.160 --> 00:01:06.090
For this demonstration, we are going to ignore these messages.

20
00:01:06.090 --> 00:01:10.890
At the top left corner of the console, there is a button for clearing the console.

21
00:01:10.890 --> 00:01:11.910
Click on it.

22
00:01:11.910 --> 00:01:15.360
After doing so, the error messages should go away.

23
00:01:15.390 --> 00:01:20.670
Time to start writing JavaScript for starters, let's try running a function.

24
00:01:22.340 --> 00:01:26.690
Functions in JavaScript are similar to functions in PHP.

25
00:01:26.720 --> 00:01:30.500
It is a feature for writing logic in a block of code.

26
00:01:30.530 --> 00:01:33.590
This block of code is entirely reusable.

27
00:01:33.620 --> 00:01:37.940
JavaScript functions, support parameters and return values.

28
00:01:37.970 --> 00:01:42.290
Surprisingly, the syntax is going to be very similar to PHP.

29
00:01:42.320 --> 00:01:44.090
You'll feel right at home.

30
00:01:44.450 --> 00:01:47.690
Generally there are three types of functions.

31
00:01:47.690 --> 00:01:50.570
There are functions defined by the language.

32
00:01:50.600 --> 00:01:53.390
We saw an example of this in PHP.

33
00:01:53.850 --> 00:01:58.140
PHP has functions that are automatically available to us from the beginning.

34
00:01:58.160 --> 00:02:00.620
The same can be said about JavaScript.

35
00:02:00.650 --> 00:02:04.700
JavaScript has a variety of functions built into the language.

36
00:02:04.700 --> 00:02:07.790
An example would be the parse int function.

37
00:02:08.000 --> 00:02:11.780
The second type of function is custom defined functions.

38
00:02:11.810 --> 00:02:15.750
JavaScript allows developers to define custom functions.

39
00:02:15.770 --> 00:02:19.440
Lastly, there are environment specific functions.

40
00:02:19.460 --> 00:02:22.880
These types of functions are not common in PHP.

41
00:02:23.360 --> 00:02:25.750
PHP is aimed at web development.

42
00:02:25.760 --> 00:02:31.640
It doesn't matter if you're running a server on Windows, Mac or Linux, the same functions will be

43
00:02:31.640 --> 00:02:32.480
available.

44
00:02:32.660 --> 00:02:35.270
The same can't be said for JavaScript.

45
00:02:35.300 --> 00:02:40.040
As we discussed before, JavaScript is a general purpose language.

46
00:02:40.040 --> 00:02:44.180
We can run JavaScript on the browser or a mobile device.

47
00:02:44.210 --> 00:02:47.690
These locations are referred to as environments.

48
00:02:47.720 --> 00:02:53.590
Each environment will define additional functions through the language which are available immediately.

49
00:02:53.600 --> 00:02:58.760
For this course, we are going to focus on functions that are available in the browser.

50
00:02:58.790 --> 00:03:03.680
The alert function is an example of a function defined by the environment.

51
00:03:04.500 --> 00:03:06.900
In the console of the developer tools.

52
00:03:06.900 --> 00:03:08.850
We're allowed to run functions.

53
00:03:08.850 --> 00:03:11.550
Let's try using the alert function.

54
00:03:11.580 --> 00:03:16.440
A function is written by typing the name, followed by a pair of parentheses.

55
00:03:18.680 --> 00:03:22.220
Lastly, we can add a semicolon to end the statement.

56
00:03:22.250 --> 00:03:25.060
To be clear, we're not defining a function.

57
00:03:25.070 --> 00:03:30.450
We're calling an existing function that has been defined by the environment, which is the browser.

58
00:03:30.470 --> 00:03:34.330
The alert function will open a pop up with a message.

59
00:03:34.340 --> 00:03:38.300
The message can be modified through the functions argument list.

60
00:03:38.330 --> 00:03:41.510
You can probably guess where we would write the message.

61
00:03:41.510 --> 00:03:45.020
If you guessed within the parentheses, you would be correct.

62
00:03:45.020 --> 00:03:46.900
Inside the parentheses.

63
00:03:46.910 --> 00:03:50.480
Let's write a message by surrounding it with double quotes.

64
00:03:52.590 --> 00:03:56.520
Once again, there are striking similarities with PHP.

65
00:03:56.550 --> 00:03:58.510
The quotes denote a string.

66
00:03:58.530 --> 00:04:02.760
JavaScript supports strings, which are a string of characters.

67
00:04:02.760 --> 00:04:04.980
We are allowed to write whatever we want.

68
00:04:04.980 --> 00:04:06.180
Inside the quotes.

69
00:04:06.180 --> 00:04:09.390
Let's execute the function by pressing enter.

70
00:04:09.600 --> 00:04:13.290
Almost immediately a pop up will appear in the browser.

71
00:04:13.320 --> 00:04:16.410
Our message will be visible from within the pop up.

72
00:04:16.410 --> 00:04:21.240
By using JavaScript, we can add an interactive experience to the browser.

73
00:04:21.240 --> 00:04:26.310
The alert function is a small portion of what JavaScript has to offer.

74
00:04:26.340 --> 00:04:30.750
In some cases, you may want to run multiple lines of JavaScript.

75
00:04:30.780 --> 00:04:37.500
The console allows multiple lines, but it may not be the best way to write along scripts inside the

76
00:04:37.500 --> 00:04:38.220
console.

77
00:04:38.220 --> 00:04:40.680
Let's write the same alert function.

78
00:04:43.140 --> 00:04:44.010
Afterward.

79
00:04:44.010 --> 00:04:47.280
Let's add another alert function on a new line.

80
00:04:47.280 --> 00:04:51.180
We must hold down the shift key to add a new line.

81
00:04:51.210 --> 00:04:54.900
On the new line, let's add the second alert function.

82
00:04:56.990 --> 00:05:00.470
What do you think will happen when we run this line of code?

83
00:05:00.500 --> 00:05:01.850
Let's find out.

84
00:05:01.940 --> 00:05:06.260
After running the code, the pop up appears with the first message.

85
00:05:06.260 --> 00:05:09.200
However, a second pop up is not showing.

86
00:05:09.200 --> 00:05:13.130
This is because JavaScript is blocking the next line of code.

87
00:05:13.160 --> 00:05:18.290
The next line of code can't run until the previous line has finished executing.

88
00:05:18.290 --> 00:05:23.960
While the first pop up is alive, JavaScript considers the first line to be running.

89
00:05:23.990 --> 00:05:28.040
If we press OC, the previous instruction will be finished.

90
00:05:28.040 --> 00:05:32.470
The next line will run, a second pop up will appear on the page.

91
00:05:32.480 --> 00:05:35.330
This behavior is essential to understand.

92
00:05:35.330 --> 00:05:38.150
Instructions will run line by line.

93
00:05:38.150 --> 00:05:43.460
The next instruction can't run until the previous instruction has been completed.

94
00:05:43.730 --> 00:05:47.720
Running code in the console is a great way to test features.

95
00:05:47.720 --> 00:05:51.590
However, you may want to run multiple lines of code.

96
00:05:51.590 --> 00:05:55.010
The console is great for running one or two lines of code.

97
00:05:55.010 --> 00:06:00.380
If you need to write more than two lines of code, you should consider an alternative option.

98
00:06:00.410 --> 00:06:02.750
There's another panel worth checking out.

99
00:06:02.780 --> 00:06:04.340
It's called Sources.

100
00:06:04.340 --> 00:06:09.110
The Sources panel will display a list of files that have been loaded on your site.

101
00:06:09.140 --> 00:06:12.560
This panel sounds very similar to the network panel.

102
00:06:12.560 --> 00:06:15.770
There are some distinctions between the two panels.

103
00:06:15.770 --> 00:06:19.340
Both panels will provide a list of files for your site.

104
00:06:19.370 --> 00:06:24.980
However, the network panel is mainly for inspecting the network activity of a site.

105
00:06:25.010 --> 00:06:29.060
You will be able to view incoming and outgoing requests.

106
00:06:29.060 --> 00:06:33.080
Whereas the Sources panel is a tool for debugging files.

107
00:06:33.080 --> 00:06:35.690
We can modify or create files.

108
00:06:35.690 --> 00:06:41.030
It's a great tool for quickly debugging a site without modifying the original code.

109
00:06:41.030 --> 00:06:47.480
Keep in mind changes to your files from the sources panel will not be reflected in your project.

110
00:06:47.480 --> 00:06:49.160
At the top left corner.

111
00:06:49.160 --> 00:06:51.710
Click on the double Chevron icon.

112
00:06:51.710 --> 00:06:54.410
An option will appear called snippets.

113
00:06:54.410 --> 00:06:58.280
Snippets are JavaScript files that are saved within the browser.

114
00:06:58.310 --> 00:07:01.610
They are not saved with your project's code base.

115
00:07:01.610 --> 00:07:06.560
Snippets are a great tool for writing JavaScript with multiple lines of code.

116
00:07:06.560 --> 00:07:10.070
Let's add a snippet called Index dot js.

117
00:07:12.220 --> 00:07:17.440
The name of the file can be whatever you want as long as it ends with the JS extension.

118
00:07:17.470 --> 00:07:18.550
You're good to go.

119
00:07:18.580 --> 00:07:23.330
JavaScript files must have the JS extension to be considered valid.

120
00:07:23.350 --> 00:07:28.420
Inside our snippet, let's write the alert function with single quotes.

121
00:07:30.640 --> 00:07:34.250
Strings can be written with double quotes or single quotes.

122
00:07:34.270 --> 00:07:36.430
There isn't a difference between the two.

123
00:07:36.460 --> 00:07:41.830
Some developers prefer to write strings with single quotes because it's easier to read.

124
00:07:41.890 --> 00:07:44.800
Feel free to use whichever style suits you.

125
00:07:44.830 --> 00:07:48.340
Next, let's remove the semicolon from the line.

126
00:07:48.490 --> 00:07:51.340
Semicolons are optional in JavaScript.

127
00:07:51.370 --> 00:07:56.680
This is the first difference between PHP and JavaScript in PHP.

128
00:07:56.710 --> 00:08:02.440
Instructions must end with a semicolon, otherwise you will receive a syntax error.

129
00:08:02.470 --> 00:08:07.150
On the other hand, instructions in Java scripts don't require a semicolon.

130
00:08:07.180 --> 00:08:10.010
JavaScript is a very smart language.

131
00:08:10.030 --> 00:08:12.310
It can close instructions for you.

132
00:08:12.340 --> 00:08:16.030
For the rest of this course, I'm going to ignore semicolons.

133
00:08:16.060 --> 00:08:17.980
It's very rare to need them.

134
00:08:18.010 --> 00:08:21.100
Let's run our code at the bottom right corner.

135
00:08:21.100 --> 00:08:24.100
We can run a snippet by pressing the play button.

136
00:08:24.130 --> 00:08:28.250
Upon clicking this button, a pop up should appear with our message.

137
00:08:28.270 --> 00:08:33.490
In addition, the developer tools will open a console below the sources panel.

138
00:08:33.520 --> 00:08:37.659
This window can be helpful if you're logging data in the console.

139
00:08:37.690 --> 00:08:39.760
I'm going to close the console.

140
00:08:41.940 --> 00:08:46.640
On the right side of the panel, there are additional tools for debugging your files.

141
00:08:46.650 --> 00:08:48.840
We can safely ignore these tools.

142
00:08:48.840 --> 00:08:50.250
We won't be needing them.

143
00:08:50.250 --> 00:08:53.130
So that's your first taste of JavaScript?

144
00:08:53.130 --> 00:08:54.450
Pretty cool, right?

145
00:08:54.450 --> 00:09:00.090
So many of the concepts you've learned with PHP can be transferred to JavaScript.

146
00:09:00.120 --> 00:09:07.200
Along the way we've encountered differences such as the semicolon being optional four lines of code.

147
00:09:07.200 --> 00:09:11.160
As we go through the language, you'll pick up more nuances.

148
00:09:11.160 --> 00:09:16.140
Let's continue our exploration of JavaScript in the next few lectures.

