WEBVTT
1
00:00:00.180 --> 00:00:05.820
In this lecture, we are going to modify the Webpack configuration to help us build custom files.

2
00:00:05.820 --> 00:00:10.150
As we know, these scripts package uses Webpack to bundle our files.

3
00:00:10.170 --> 00:00:15.710
It's capable of searching for files within the source directory to generate files for each block.

4
00:00:15.720 --> 00:00:18.450
However, this feature is limited to blocks.

5
00:00:18.480 --> 00:00:21.360
It does not process files for other pages.

6
00:00:21.360 --> 00:00:25.290
The Webpack configuration from WordPress is completely extendable.

7
00:00:25.290 --> 00:00:28.260
We do not have to stick with the default configuration.

8
00:00:28.260 --> 00:00:31.620
Let's extend Webpack to include custom files.

9
00:00:31.620 --> 00:00:36.270
First, let's create a JavaScript file inside the source directory.

10
00:00:36.270 --> 00:00:38.340
Create a folder called Admin.

11
00:00:40.600 --> 00:00:44.740
Inside this folder, create a file called Index JS.

12
00:00:46.870 --> 00:00:49.810
Inside this file, let's log a message.

13
00:00:51.970 --> 00:00:57.100
JavaScript files for the admin dashboard should be created within this directory.

14
00:00:57.130 --> 00:01:02.950
Now that our files have been created, let's process them with Webpack in the root directory of the

15
00:01:02.950 --> 00:01:03.580
plugin.

16
00:01:03.580 --> 00:01:08.230
Create a file called Webpack config js.

17
00:01:10.380 --> 00:01:14.680
By default, Webpack will run the configuration from WordPress.

18
00:01:14.700 --> 00:01:22.100
If we create a Webpack configuration file, Webpack will prioritize our configuration over WordPress

19
00:01:22.110 --> 00:01:23.250
configuration.

20
00:01:23.250 --> 00:01:25.410
The file name is very important.

21
00:01:25.410 --> 00:01:30.210
If we do not use this file name, our configuration file will be ignored.

22
00:01:30.420 --> 00:01:33.520
Inside this file we are going to import WordPress.

23
00:01:33.520 --> 00:01:34.830
This configuration.

24
00:01:34.860 --> 00:01:38.640
Our goal isn't to completely override the configuration.

25
00:01:38.640 --> 00:01:42.120
We're only interested in adding files to the current bundle.

26
00:01:42.120 --> 00:01:46.800
It's possible to merge WordPress configuration with our configuration.

27
00:01:46.800 --> 00:01:52.050
First, we must import the configuration object at the top of the file.

28
00:01:52.050 --> 00:02:00.750
Import an object called default config from the following path at WordPress slash scripts slash config

29
00:02:00.780 --> 00:02:04.680
slash webpack config dot js.

30
00:02:06.270 --> 00:02:10.600
This path points directly to the configuration file by WordPress.

31
00:02:10.620 --> 00:02:12.730
Import statements will not work.

32
00:02:12.750 --> 00:02:15.320
Technically, this is the JavaScript file.

33
00:02:15.330 --> 00:02:19.950
However, this file is executed by node JS, not the browser.

34
00:02:19.950 --> 00:02:24.270
We need to add support for modules by updating the package file.

35
00:02:26.520 --> 00:02:32.250
At the bottom of the file at a property called type with a value of module.

36
00:02:34.460 --> 00:02:40.130
By adding this property note will allow us to use import statements from our script files.

37
00:02:40.160 --> 00:02:44.080
Let's head back to our configuration file from this file.

38
00:02:44.090 --> 00:02:45.980
Export an empty object.

39
00:02:48.180 --> 00:02:53.400
The object exported by this file will be processed as the configuration for Webpack.

40
00:02:53.430 --> 00:02:58.220
As I mentioned before, we're not interested in completely overriding WordPress.

41
00:02:58.220 --> 00:03:04.890
This configuration, we can merge the configuration from WordPress by spreading the default config object

42
00:03:04.890 --> 00:03:06.270
into our object.

43
00:03:08.310 --> 00:03:12.180
The next step is to start adding our file to the entry point.

44
00:03:12.210 --> 00:03:17.670
The entry point refers to the files that should be processed by Webpack by default.

45
00:03:17.700 --> 00:03:24.780
WordPress has configured Webpack to set the entry point to the files listed in the block JSON file.

46
00:03:24.810 --> 00:03:29.250
We can add custom entry points by adding an object called entry.

47
00:03:31.560 --> 00:03:37.660
Unfortunately, by adding this object, the entry point configured by WordPress will be overridden.

48
00:03:37.680 --> 00:03:44.520
Once again, we can merge WordPress as entry point with our entry point by spreading the default config

49
00:03:44.910 --> 00:03:47.400
entry object into our object.

50
00:03:49.600 --> 00:03:53.900
Next, let's add our admin file inside this object.

51
00:03:53.920 --> 00:03:57.460
The property name must represent the new name of the file.

52
00:03:57.460 --> 00:04:01.930
Set the property name to the following admin slash index.

53
00:04:04.050 --> 00:04:05.910
For organization reasons.

54
00:04:05.910 --> 00:04:10.530
We are going to store the admin files in a separate directory called admin.

55
00:04:10.560 --> 00:04:13.270
The name of the file will be called Index.

56
00:04:13.290 --> 00:04:16.320
We do not need to include the file extension.

57
00:04:16.320 --> 00:04:19.040
Webpack will add the extension for us.

58
00:04:19.050 --> 00:04:25.140
As for the value of this property, we must point web pack to the file in the source directory.

59
00:04:25.170 --> 00:04:27.900
Set the property to the following dot.

60
00:04:27.900 --> 00:04:29.580
Slash CRC.

61
00:04:29.610 --> 00:04:31.140
Slash admin.

62
00:04:33.350 --> 00:04:38.140
In this example, I'm providing the path to the directory, but not the file.

63
00:04:38.150 --> 00:04:44.750
By default, JavaScript will search for a file called index JS within a given directory.

64
00:04:44.750 --> 00:04:48.290
We do not need to append the full path to the file.

65
00:04:48.290 --> 00:04:54.530
After making those changes, we're ready to test our configuration switch over to the command line.

66
00:04:54.530 --> 00:04:59.240
If the start command is running, you may need to restart this command.

67
00:05:01.420 --> 00:05:06.520
After a few moments, Webpack has processed our files just to make sure.

68
00:05:06.520 --> 00:05:10.520
Let's check out the build directory inside this directory.

69
00:05:10.540 --> 00:05:13.660
A new folder should be available called admin.

70
00:05:13.690 --> 00:05:16.090
You can view this file for the bundles.

71
00:05:16.090 --> 00:05:18.960
Webpack has successfully bundled our code.

72
00:05:18.970 --> 00:05:19.900
That's great.

73
00:05:19.930 --> 00:05:22.690
Our code will be optimized for production.

74
00:05:22.720 --> 00:05:27.700
This step is optional, but I always recommend processing your code with Webpack.

75
00:05:27.730 --> 00:05:31.750
In the next lecture, let's begin opening the media library.

