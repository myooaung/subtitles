WEBVTT
1
00:00:00.090 --> 00:00:05.350
In this lecture, we are going to explore another feature of components called props.

2
00:00:05.370 --> 00:00:08.820
Various HTML elements have attributes.

3
00:00:08.820 --> 00:00:13.170
Attributes can modify the behavior or appearance of an element.

4
00:00:13.170 --> 00:00:20.520
For example, images can have a height and width attribute for adjusting the dimensions of an image.

5
00:00:20.580 --> 00:00:26.310
Anchor elements have an attribute called H ref for modifying the URL of a link.

6
00:00:26.490 --> 00:00:30.720
React supports custom attributes on custom components.

7
00:00:30.720 --> 00:00:37.080
This feature is referred to as props, which is short for properties similar to components.

8
00:00:37.080 --> 00:00:39.330
Props can have custom names.

9
00:00:39.330 --> 00:00:44.610
Let's extend the header component by passing in a name on the header component.

10
00:00:44.610 --> 00:00:48.090
Add a prop called name with a value of John.

11
00:00:50.440 --> 00:00:56.580
The syntax for writing props is similar to adding attributes to regular HTML elements.

12
00:00:56.590 --> 00:00:59.950
It's the name of the prop followed by the value.

13
00:00:59.980 --> 00:01:02.740
Our props can have custom names.

14
00:01:02.860 --> 00:01:05.820
We don't have to abide by specific rules.

15
00:01:05.830 --> 00:01:09.460
For example, we change our prop name to identity.

16
00:01:09.490 --> 00:01:14.530
However, I think the original name is more than suitable for our example.

17
00:01:14.560 --> 00:01:19.030
Next, we can access this prop by updating the header function.

18
00:01:19.030 --> 00:01:24.160
Inside the functions parameters, we can accept a parameter called props.

19
00:01:26.260 --> 00:01:30.780
Properties are passed onto a component through the props parameters.

20
00:01:30.790 --> 00:01:33.250
The props parameter is an object.

21
00:01:33.250 --> 00:01:36.520
We can access a specific prop by its name.

22
00:01:36.520 --> 00:01:44.800
Let's replace the word world with an expression inside the expression we can render the props name property.

23
00:01:47.130 --> 00:01:48.150
On the page.

24
00:01:48.150 --> 00:01:51.090
The name from the prop should appear in the heading.

25
00:01:51.090 --> 00:01:51.880
Perfect.

26
00:01:51.900 --> 00:01:56.240
We've successfully passed on data from one component to the next.

27
00:01:56.250 --> 00:01:58.620
Let's take our solution a step further.

28
00:01:58.620 --> 00:02:04.320
By passing on a variable, the value we're passing on is hardcoded into the value.

29
00:02:04.350 --> 00:02:06.840
What if we want to pass on a variable?

30
00:02:06.870 --> 00:02:11.060
Inside the page component create a variable called name.

31
00:02:11.070 --> 00:02:12.990
The value will be John.

32
00:02:15.140 --> 00:02:18.090
Next, let's update our G6.

33
00:02:18.110 --> 00:02:22.550
The goal is to pass on the name variable to the header component.

34
00:02:22.580 --> 00:02:26.710
Beginners may be tempted to add curly brackets inside the quotes.

35
00:02:26.720 --> 00:02:31.480
However, this is not the proper syntax for passing on dynamic values.

36
00:02:31.490 --> 00:02:36.030
The quotes must be replaced by curly brackets by doing so.

37
00:02:36.070 --> 00:02:40.070
Our custom props can be set to variables or expressions.

38
00:02:40.070 --> 00:02:42.590
Lets pass in the name variable.

39
00:02:44.940 --> 00:02:45.930
On the page.

40
00:02:45.930 --> 00:02:47.660
The name has been rendered.

41
00:02:47.670 --> 00:02:50.400
React gives us ultimate flexibility.

42
00:02:50.400 --> 00:02:57.600
By allowing us to customize the behavior of a component, we can use props to send data from a parent

43
00:02:57.600 --> 00:02:59.790
component to a child component.

44
00:02:59.790 --> 00:03:04.620
In the next lecture, we are going to continue our discussions of props.

