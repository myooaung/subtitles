1
00:00:00,090 --> 00:00:03,540
In this lecture, we are going to clear the blobs from memory.

2
00:00:03,570 --> 00:00:10,680
As mentioned before, blobs are stored in the client system memory after the image is finished uploading

3
00:00:10,680 --> 00:00:16,260
the URL for the image swaps from the blob URL to an http url.

4
00:00:16,290 --> 00:00:21,270
However, just because the URL changes doesn't mean the blob disappears.

5
00:00:21,360 --> 00:00:24,290
There's a concept known as a memory leak.

6
00:00:24,300 --> 00:00:28,080
A memory leak is when data is not released from a system.

7
00:00:28,080 --> 00:00:32,259
Browsers must allocate resources for files and variables.

8
00:00:32,280 --> 00:00:38,560
If the user navigates away from a page, these resources are released by releasing memory.

9
00:00:38,580 --> 00:00:40,410
New data can be stored.

10
00:00:40,440 --> 00:00:44,010
Otherwise, a user system may become congested.

11
00:00:44,040 --> 00:00:47,790
This can lead to slow performance and sluggish behavior.

12
00:00:47,820 --> 00:00:51,180
Browsers do an incredible job of releasing memory.

13
00:00:51,180 --> 00:00:54,120
React also releases memory on our behalf.

14
00:00:54,150 --> 00:00:56,780
However, that doesn't mean we can be lazy.

15
00:00:56,790 --> 00:00:59,240
We have a memory leak in our program.

16
00:00:59,250 --> 00:01:01,730
A blob will continue to persist.

17
00:01:01,740 --> 00:01:05,129
Blobs are released after the browser has been closed.

18
00:01:05,160 --> 00:01:11,340
However, the user may not close the browser after uploading a file, they may want to continue editing

19
00:01:11,340 --> 00:01:12,150
their site.

20
00:01:12,150 --> 00:01:15,020
Files can occupy large amounts of memory.

21
00:01:15,030 --> 00:01:19,410
It would be a good idea to release a blob after the image is uploaded.

22
00:01:19,890 --> 00:01:22,800
WordPress has a function for releasing memory.

23
00:01:22,800 --> 00:01:26,580
Let's try using this function to fix our memory leak issue.

24
00:01:26,580 --> 00:01:31,710
In your editor, open the indexed JS file for the team member block.

25
00:01:33,780 --> 00:01:36,540
From the WordPress blog package.

26
00:01:36,540 --> 00:01:40,200
Import a function called revoke blob URL.

27
00:01:42,350 --> 00:01:49,580
This function will release memory for a blog URL, scroll to the on select event from the media placeholder

28
00:01:49,580 --> 00:01:50,400
component.

29
00:01:50,420 --> 00:01:54,380
We are going to call this function at the end of the block.

30
00:01:56,530 --> 00:02:01,810
We can safely assume that this lock is executed after an image has been uploaded.

31
00:02:01,840 --> 00:02:05,450
This function accepts the blob URL as an argument.

32
00:02:05,470 --> 00:02:10,030
Let's pass in the image preview state which contains the blob URL.

33
00:02:12,370 --> 00:02:17,530
Even if this variable does not contain a blog URL, WordPress will not complain.

34
00:02:17,560 --> 00:02:19,570
It's perfectly safe to call it.

35
00:02:19,600 --> 00:02:23,970
After making those changes, let's test our code in the browser.

36
00:02:23,980 --> 00:02:25,510
Refresh the page.

37
00:02:27,720 --> 00:02:33,120
I'm going to upload an image with the console panel opened from the developer tools.

38
00:02:35,240 --> 00:02:39,200
As the image is uploaded, an error should not be thrown by the block.

39
00:02:39,200 --> 00:02:45,330
As long as an error is not thrown by the browser, we can consider our solution a success.

40
00:02:45,350 --> 00:02:50,660
In the next lecture, let's begin implementing a solution to replace the image.

