1
00:00:00,090 --> 00:00:04,270
In this lecture, we are going to update the cuisines attributes.

2
00:00:04,290 --> 00:00:11,550
This attribute will store an array of objects where each object represents a term we left off with adding

3
00:00:11,550 --> 00:00:14,310
an input for adding terms to the block.

4
00:00:14,310 --> 00:00:20,550
Currently, I have the block on the page with the console panel opened from the developer tools.

5
00:00:20,550 --> 00:00:22,500
I'm going to add a new term.

6
00:00:24,750 --> 00:00:27,970
After adding the term, the input will clear out.

7
00:00:27,990 --> 00:00:30,310
We haven't updated the attribute.

8
00:00:30,330 --> 00:00:35,430
If we look in the console, the value is in array with the term as a string.

9
00:00:35,460 --> 00:00:38,270
Unfortunately, that's not what we need.

10
00:00:38,280 --> 00:00:39,300
In the future.

11
00:00:39,300 --> 00:00:43,110
We are going to perform a request for a list of posts.

12
00:00:43,140 --> 00:00:48,600
Filtering posts by taxonomies requires the ID of the terms, not their names.

13
00:00:48,630 --> 00:00:53,280
Once again, we must format the value into an array of term IDs.

14
00:00:53,310 --> 00:00:55,480
Let's get started in your editor.

15
00:00:55,500 --> 00:00:57,960
Open the index JS file.

16
00:01:00,020 --> 00:01:06,090
Scroll to the query control's component inside the EN Category Change Events.

17
00:01:06,110 --> 00:01:11,120
Let's replace the console statement with a variable called New CUISINE'S.

18
00:01:11,150 --> 00:01:15,080
The initial value for this variable will be an empty array.

19
00:01:17,500 --> 00:01:19,430
Our attribute is an array.

20
00:01:19,450 --> 00:01:22,980
As a reminder, we cannot partially update the array.

21
00:01:22,990 --> 00:01:26,980
We must completely override the array with a new array.

22
00:01:27,010 --> 00:01:31,780
This variable will store the new copy of the Cuisine's attribute.

23
00:01:31,810 --> 00:01:37,960
Next, let's begin looping through the new terms argument with the for each function.

24
00:01:40,120 --> 00:01:45,110
The value emitted by the event will contain existing and new terms.

25
00:01:45,130 --> 00:01:51,880
Let's handle both scenarios as they come up inside the for each function pass in an arrow function with

26
00:01:51,880 --> 00:01:53,830
an argument called cuisine.

27
00:01:55,970 --> 00:02:00,110
Next, let's create a variable called cuisine term.

28
00:02:00,140 --> 00:02:03,290
This variable will store the terms object.

29
00:02:03,290 --> 00:02:06,010
First, we need to search for the term.

30
00:02:06,020 --> 00:02:07,570
All we have is the name.

31
00:02:07,580 --> 00:02:10,190
Luckily, that's enough to find the term.

32
00:02:10,190 --> 00:02:13,760
Set the variable to the following value terms.

33
00:02:13,760 --> 00:02:16,190
Question Mark dot find.

34
00:02:18,400 --> 00:02:20,380
Arrays have a function called find.

35
00:02:20,380 --> 00:02:23,080
This function will loop through the items in the array.

36
00:02:23,110 --> 00:02:26,050
During the loop we can search for a specific item.

37
00:02:26,050 --> 00:02:28,980
The item selected by the function will be returned.

38
00:02:28,990 --> 00:02:33,370
This function has one argument which is a function to perform the search.

39
00:02:33,370 --> 00:02:37,420
Let's pass in an arrow function that accepts the term object.

40
00:02:39,750 --> 00:02:42,480
Our function must return a boolean value.

41
00:02:42,480 --> 00:02:48,990
If the return value is true, we're telling JavaScript to return the item from the current iteration,

42
00:02:49,020 --> 00:02:52,530
otherwise it'll move on to the next item in the array.

43
00:02:52,560 --> 00:02:55,650
As I said before, all we have is the name.

44
00:02:55,680 --> 00:03:00,720
Each term object has a copy of the name in a property called Name.

45
00:03:00,960 --> 00:03:07,440
Let's perform the following comparison term Dot name equals equals equals cuisine.

46
00:03:09,660 --> 00:03:15,170
If the term name from the current object matches the input from the user, we have a match.

47
00:03:15,180 --> 00:03:21,180
The result is stored in the cuisine term variable, thus giving us access to the ID.

48
00:03:21,210 --> 00:03:25,770
The last step is to push the object into the new terms array.

49
00:03:25,800 --> 00:03:28,530
After the loop, add a conditional statement.

50
00:03:30,690 --> 00:03:34,290
The condition will be the cuisine term variable.

51
00:03:36,490 --> 00:03:38,940
It's possible that we may not find a term.

52
00:03:38,950 --> 00:03:42,520
This can be due to a term that doesn't exist on our site.

53
00:03:42,610 --> 00:03:45,940
Technically, it's possible to create new terms.

54
00:03:45,970 --> 00:03:49,850
However, we're going to limit our block to existing terms.

55
00:03:49,870 --> 00:03:52,750
New terms must be created beforehand.

56
00:03:52,780 --> 00:03:56,090
Creating new terms can make our block more complicated.

57
00:03:56,110 --> 00:03:57,940
Let's assume what term was found.

58
00:03:57,940 --> 00:04:04,330
We can proceed to push the cuisine term variable into the new cuisines array with the push function.

59
00:04:06,480 --> 00:04:12,180
After the for each function we can update the attribute with the set attributes function.

60
00:04:14,260 --> 00:04:18,190
Set the Cuisine's attribute to the new cuisines variable.

61
00:04:20,290 --> 00:04:21,670
So far so good.

62
00:04:21,700 --> 00:04:24,670
However, there is one problem with our solution.

63
00:04:24,670 --> 00:04:28,560
As they said before, the event will emit an array of terms.

64
00:04:28,570 --> 00:04:32,050
This array will contain existing and new terms.

65
00:04:32,050 --> 00:04:36,310
As we learned, new terms will be passed on as strings.

66
00:04:36,340 --> 00:04:38,920
Existing terms will be our objects.

67
00:04:38,920 --> 00:04:41,800
We have a mixture of objects and strings.

68
00:04:41,830 --> 00:04:44,260
Existing terms are objects.

69
00:04:44,260 --> 00:04:46,090
New terms are strings.

70
00:04:46,090 --> 00:04:50,410
In our current solution, we're assuming the array contains strings.

71
00:04:50,410 --> 00:04:56,260
By not taking into account of objects, the existing terms are completely ignored.

72
00:04:56,350 --> 00:04:58,780
We need to handle both scenarios.

73
00:04:58,780 --> 00:05:00,460
The solution becomes clear.

74
00:05:00,460 --> 00:05:02,590
We should check for an object.

75
00:05:02,590 --> 00:05:06,670
If the term is an object, we do not need to search for it.

76
00:05:06,670 --> 00:05:13,480
We can go ahead with pushing it into the new array of terms at the top of the for each loop, add a

77
00:05:13,480 --> 00:05:14,830
conditional statement.

78
00:05:16,920 --> 00:05:18,760
Type the following condition.

79
00:05:18,780 --> 00:05:22,500
Type of cuisine equals equals equals object.

80
00:05:24,570 --> 00:05:29,070
The type of keyword will help us to detect the data type of a variable.

81
00:05:29,070 --> 00:05:32,160
In this example, we are checking for an object.

82
00:05:32,160 --> 00:05:38,570
If it is an object, we can proceed to push the object into the array without searching for it.

83
00:05:38,580 --> 00:05:40,140
Call the new cuisine.

84
00:05:40,160 --> 00:05:43,650
Stop push function with the cuisine variable.

85
00:05:45,910 --> 00:05:48,730
We should return this statement from the function.

86
00:05:48,760 --> 00:05:52,500
There isn't a reason for the current iteration to continue running.

87
00:05:52,510 --> 00:05:59,020
We can move on to the next item by returning the function early before each function is not going to

88
00:05:59,020 --> 00:06:00,720
do anything with the value.

89
00:06:00,730 --> 00:06:02,290
It's safe to return it.

90
00:06:02,320 --> 00:06:06,220
Let's remove the console statement before testing our code.

91
00:06:08,420 --> 00:06:13,930
Before I forget, there's one more property that should be added to the query controls component.

92
00:06:13,940 --> 00:06:20,570
We can set the initial values of these selected terms by adding the selected categories property.

93
00:06:20,570 --> 00:06:23,810
Set this property to the cuisine's attributes.

94
00:06:26,030 --> 00:06:27,560
Time to test our code.

95
00:06:27,560 --> 00:06:29,060
Refresh the page.

96
00:06:31,140 --> 00:06:34,530
Add the popular recipes block to the editor.

97
00:06:36,590 --> 00:06:39,830
Lastly, try adding cuisines to the page.

98
00:06:46,850 --> 00:06:50,400
We can safely add and remove cuisines from the block.

99
00:06:50,420 --> 00:06:53,720
New terms can't be added, but that's to be expected.

100
00:06:53,750 --> 00:06:57,380
We haven't added support for adding new terms to the site.

101
00:06:57,380 --> 00:07:01,910
In the next lecture, we are going to begin performing the query for posts.

102
00:07:01,910 --> 00:07:05,360
Once you're ready, I'll see you in the following lecture.

