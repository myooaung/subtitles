1
00:00:00,090 --> 00:00:06,120
In this lecture, let's start creating a custom admin page for displaying our plugins options.

2
00:00:06,120 --> 00:00:11,070
We can create a new page by using a function called Add menu page.

3
00:00:11,070 --> 00:00:14,940
Before using this function, we should use it from the correct hook.

4
00:00:14,940 --> 00:00:21,990
Since not all requests are not for the admin dashboard on the sidebar, click on the more information

5
00:00:21,990 --> 00:00:22,710
section.

6
00:00:24,830 --> 00:00:30,030
The second note states the following The hook you should use is admin menu.

7
00:00:30,050 --> 00:00:35,480
If we were to use a different hook, we might receive an error based on the advice of this function.

8
00:00:35,480 --> 00:00:37,990
Let's use this hook in your editor.

9
00:00:38,000 --> 00:00:40,340
Open the index plug and file.

10
00:00:42,490 --> 00:00:44,650
At the bottom of the hook section.

11
00:00:44,650 --> 00:00:47,020
Run the add action function.

12
00:00:49,230 --> 00:00:52,040
The name of the hook is called Admin Menu.

13
00:00:54,150 --> 00:00:58,980
This hook runs during the initialization of the WordPress admin menu.

14
00:00:59,010 --> 00:01:03,030
The name of our function will be called up admin menus.

15
00:01:05,090 --> 00:01:10,810
Next let's define this function in the includes slash admin folder.

16
00:01:10,820 --> 00:01:14,150
Create a file called menus PHP.

17
00:01:16,450 --> 00:01:19,360
Define the function from within this file.

18
00:01:21,390 --> 00:01:25,230
Next, let's call the add menu page function.

19
00:01:27,470 --> 00:01:29,800
This function has a few arguments.

20
00:01:29,810 --> 00:01:32,420
The first argument is the page title.

21
00:01:32,450 --> 00:01:38,690
The value passed into this argument will be inserted into the title tags of the tab.

22
00:01:38,720 --> 00:01:43,430
Let's pass in the following translated message You to me plus.

23
00:01:45,650 --> 00:01:49,150
The second argument is the title of the menu item.

24
00:01:49,160 --> 00:01:53,230
This value will appear in the admin menu off the dashboard.

25
00:01:53,240 --> 00:01:56,780
Let's use the same value as the first argument.

26
00:01:58,840 --> 00:02:04,090
In both cases, we're translating the texts with the double underscore function.

27
00:02:04,120 --> 00:02:07,460
The third argument is the capability of the user.

28
00:02:07,480 --> 00:02:13,540
We haven't had the chance to talk about capabilities and the resource section of this lecture.

29
00:02:13,570 --> 00:02:17,650
I provide a link to the capabilities documentation page.

30
00:02:19,160 --> 00:02:22,460
Capabilities refer to the permissions of a user.

31
00:02:22,490 --> 00:02:27,950
If you scroll through this page, you're going to find a long list of permissions available.

32
00:02:27,980 --> 00:02:31,860
They range from reading posts to creating new users.

33
00:02:31,880 --> 00:02:36,110
WordPress assigns capabilities by roles by default.

34
00:02:36,110 --> 00:02:44,600
There are six roles which are super admin, administrator, editor, author, contributor and subscriber.

35
00:02:44,630 --> 00:02:49,630
Let's scroll down to the capability versus role section of this page.

36
00:02:49,640 --> 00:02:56,870
As you can see, a super admin can perform every action, whereas a subscriber can only read posts and

37
00:02:56,870 --> 00:02:57,680
pages.

38
00:02:57,710 --> 00:03:01,220
You can think of roles as a way to group capabilities.

39
00:03:01,250 --> 00:03:05,930
WordPress recommends checking a user's capability as opposed to their role.

40
00:03:05,960 --> 00:03:09,800
This is because capabilities can be modified for a user.

41
00:03:09,980 --> 00:03:14,180
There are plugins for creating or modifying existing roles.

42
00:03:14,210 --> 00:03:20,980
These plugins can modify the capabilities of each role, which can remove or add specific permissions.

43
00:03:20,990 --> 00:03:24,770
It's always important to check a capability rather than a role.

44
00:03:24,800 --> 00:03:26,810
Let's head back to our editor.

45
00:03:26,840 --> 00:03:29,990
The function requires the name of a capability.

46
00:03:29,990 --> 00:03:33,290
It'll check if the user can perform this capability.

47
00:03:33,290 --> 00:03:37,250
If they can, they will have permission to access this page.

48
00:03:37,280 --> 00:03:44,700
Currently, we're interested in limiting this page to users with the roles super admin or administrators.

49
00:03:44,720 --> 00:03:48,200
Let's set this argument to the following capability.

50
00:03:48,230 --> 00:03:50,240
Edit Theme Options.

51
00:03:52,380 --> 00:03:55,530
This capability is available to both roles.

52
00:03:55,560 --> 00:04:00,180
Let's work on setting the fourth argument, which is the menu slug.

53
00:04:00,210 --> 00:04:03,870
You can think of this argument as the ID of the menu.

54
00:04:03,900 --> 00:04:05,950
There are dozens of menu options.

55
00:04:05,970 --> 00:04:11,230
WordPress needs help identifying our menu by assigning an ID to this menu.

56
00:04:11,250 --> 00:04:14,940
Let's set the ID to up plug in options.

57
00:04:17,019 --> 00:04:22,420
The fifth argument is the name of the function responsible for rendering the pages content.

58
00:04:22,450 --> 00:04:26,680
Let's call our function up plugins options page.

59
00:04:28,900 --> 00:04:30,740
This function doesn't exist.

60
00:04:30,760 --> 00:04:34,570
Let's work on creating it inside the admin folder.

61
00:04:34,600 --> 00:04:37,150
Create a file called Options Page.

62
00:04:37,720 --> 00:04:38,340
PHP.

63
00:04:40,600 --> 00:04:44,770
Next, let's define the up plugin options page function.

64
00:04:46,840 --> 00:04:50,470
From this function we can output content onto the page.

65
00:04:50,470 --> 00:04:53,860
Lets exit and re-enter page mode.

66
00:04:56,040 --> 00:04:59,550
Next additive tag with a class called Wrap.

67
00:05:01,720 --> 00:05:05,460
The rap class will position our content on the page.

68
00:05:05,470 --> 00:05:08,430
This class is not documented by WordPress.

69
00:05:08,440 --> 00:05:14,470
If you're curious as to how I know this class exists, I inspected the elements of other pages.

70
00:05:14,470 --> 00:05:16,600
All WordPress admin pages.

71
00:05:16,600 --> 00:05:21,250
Use this class for positioning the content of the page next to the menu.

72
00:05:21,250 --> 00:05:24,790
Inside this tag, let's output a simple message.

73
00:05:26,900 --> 00:05:28,220
We're almost finished.

74
00:05:28,220 --> 00:05:30,500
The last step is to add an icon.

75
00:05:30,530 --> 00:05:34,660
All menu items can have an icon next to the name of the menu.

76
00:05:34,670 --> 00:05:37,220
We have two options at our disposal.

77
00:05:37,220 --> 00:05:41,480
We can use dash icons or a custom SVG image.

78
00:05:41,480 --> 00:05:48,830
I prefer using a custom SVG image and the resource section of this lecture I provide a link to an SVG

79
00:05:48,860 --> 00:05:49,580
image.

80
00:05:51,720 --> 00:05:57,210
Copy this image to your plugin folder under the name letter u dot SVG.

81
00:05:57,240 --> 00:05:59,850
I'm going to quickly add it to my plugin.

82
00:06:01,460 --> 00:06:05,270
The file should be inserted in the root directory of the plugin.

83
00:06:05,270 --> 00:06:10,200
After adding this file, let's update the add menu page function.

84
00:06:10,220 --> 00:06:15,230
There's a sixth argument which is a valid HTTP path to an image.

85
00:06:15,230 --> 00:06:20,570
We can generate a path to our image using a function called plugins URL.

86
00:06:22,740 --> 00:06:25,040
This function has two arguments.

87
00:06:25,050 --> 00:06:31,650
The first argument is the name of the file let's pass in letter u dot SVG.

88
00:06:33,870 --> 00:06:37,240
The second argument is the path to the plug and file.

89
00:06:37,260 --> 00:06:41,220
This function does not know which plugin the file originates from.

90
00:06:41,250 --> 00:06:46,900
Normally we would pass in the file constants, but we're not in the main plug in file.

91
00:06:46,920 --> 00:06:53,010
Let's create a constant for storing the path to the file in the index plug and file.

92
00:06:53,010 --> 00:06:58,380
Scroll to the setup section at a constant called up plug in file.

93
00:07:00,540 --> 00:07:04,500
The value for this constant will be the file constant.

94
00:07:06,610 --> 00:07:13,900
Next, let's pass this constant to the plugins URL function in the menus dot PHP file.

95
00:07:16,170 --> 00:07:21,870
The return value of this function will be a full HTTP URL to the image.

96
00:07:21,870 --> 00:07:25,040
We're finished creating the menu in the browser.

97
00:07:25,050 --> 00:07:27,240
Refresh the admin dashboard.

98
00:07:29,420 --> 00:07:30,200
Voila.

99
00:07:30,230 --> 00:07:32,110
A new menu item has appeared.

100
00:07:32,120 --> 00:07:35,950
We can click on this link to view our page on the page.

101
00:07:35,960 --> 00:07:40,700
Our message from the function has appeared in the content area of the page.

102
00:07:40,700 --> 00:07:42,590
It's positioned perfectly.

103
00:07:42,590 --> 00:07:43,850
In the next lecture.

104
00:07:43,850 --> 00:07:47,600
Let's begin working on rendering a form for this page.

