1
00:00:00,090 --> 00:00:05,140
In this lecture, we are going to create a custom interface for opening the media library.

2
00:00:05,160 --> 00:00:10,690
Previously, we used the media placeholder component for generating an interface.

3
00:00:10,710 --> 00:00:14,010
This interface had a button for opening the library.

4
00:00:14,040 --> 00:00:19,350
However, this component is not our only option for opening the media library.

5
00:00:19,350 --> 00:00:22,550
We're more than welcome to create a custom interface.

6
00:00:22,560 --> 00:00:27,930
You may prefer to develop a custom interface over using WordPress interface.

7
00:00:28,170 --> 00:00:33,660
Let's try creating a simple interface for opening the media library in your editor.

8
00:00:33,690 --> 00:00:35,730
Open the sidebar file.

9
00:00:37,950 --> 00:00:46,350
At the top of the file import to components called Media Upload and Media Upload Check from the WordPress

10
00:00:46,350 --> 00:00:48,750
slash block editor package.

11
00:00:50,900 --> 00:00:54,920
There's one component we will need from the components package.

12
00:00:54,920 --> 00:00:57,020
Import the button component.

13
00:00:59,170 --> 00:01:02,750
Now that we have our components, we can begin rendering them.

14
00:01:02,770 --> 00:01:07,560
Head back to the panel body components at the bottom of this component.

15
00:01:07,570 --> 00:01:12,550
Add the following expression ogg override image and.

16
00:01:14,810 --> 00:01:21,260
The interface for selecting an image should not be rendered unless the user wants to use a custom image.

17
00:01:21,290 --> 00:01:26,560
There isn't a point in rendering this UI if the user prefers the featured image.

18
00:01:26,570 --> 00:01:30,710
Next, add a fragment element with the image tag.

19
00:01:32,820 --> 00:01:36,830
React does not allow us to render multiple route elements.

20
00:01:36,840 --> 00:01:42,600
In our case, we're going to need to render the image and the interface for selecting an image on the

21
00:01:42,600 --> 00:01:43,470
root level.

22
00:01:43,470 --> 00:01:44,970
So we get around this error.

23
00:01:44,970 --> 00:01:49,230
We can use the fragment element for grouping our elements.

24
00:01:49,230 --> 00:01:54,120
The image tag will render a preview of the selected image on this tag.

25
00:01:54,120 --> 00:01:58,440
Set the source attribute to the Ogg image variable.

26
00:02:00,690 --> 00:02:05,550
Next below this image and the media upload check component.

27
00:02:07,720 --> 00:02:12,980
Not everyone has access to the media library before rendering the media library.

28
00:02:13,000 --> 00:02:15,660
We should check the user's capabilities.

29
00:02:15,670 --> 00:02:20,230
This component will validate the user before rendering the media library.

30
00:02:20,260 --> 00:02:24,220
Previously, we did not have to check the user's permissions.

31
00:02:24,250 --> 00:02:29,380
This is because the media placeholder component performs this check for us.

32
00:02:29,410 --> 00:02:33,780
If we're not using this component, we must perform the check ourselves.

33
00:02:33,790 --> 00:02:38,210
The media upload check component was designed for this purpose.

34
00:02:38,230 --> 00:02:43,780
If the user has permission, the content written inside the component will become visible.

35
00:02:43,930 --> 00:02:47,050
Let's render the media upload component.

36
00:02:49,140 --> 00:02:54,670
This component will allow us to create a custom interface for opening the media library.

37
00:02:54,690 --> 00:02:59,450
In addition, it can communicate with the media library to configure its settings.

38
00:02:59,460 --> 00:03:01,320
Let's add a few properties.

39
00:03:01,320 --> 00:03:06,810
First, let's set the accept property to an array of valid file types.

40
00:03:06,810 --> 00:03:10,230
We are going to limit the file types to image types.

41
00:03:12,270 --> 00:03:15,150
Next at a property called Render.

42
00:03:17,420 --> 00:03:23,350
The render property accepts a function for rendering the interface for opening the library.

43
00:03:23,360 --> 00:03:27,570
We have complete control over how the media library is opened.

44
00:03:27,590 --> 00:03:29,750
Let's pass in an arrow function.

45
00:03:31,960 --> 00:03:35,350
From this function, we must return gsx.

46
00:03:35,350 --> 00:03:37,780
Let's return the button component.

47
00:03:40,010 --> 00:03:41,300
On this component.

48
00:03:41,300 --> 00:03:44,480
Let's add a property called is primary.

49
00:03:46,790 --> 00:03:51,110
The IS primary property will change the colour of the button to blue.

50
00:03:51,140 --> 00:03:52,980
This property is optional.

51
00:03:53,000 --> 00:03:56,210
However, I think it worked for our interface.

52
00:03:56,420 --> 00:04:01,790
Inside the button add the following translatable text change image.

53
00:04:03,780 --> 00:04:07,290
Next, we should start opening the media library.

54
00:04:07,320 --> 00:04:13,320
Conveniently, the function is provided an object with various methods for interacting with the media

55
00:04:13,320 --> 00:04:14,180
library.

56
00:04:14,190 --> 00:04:18,390
Let's structure the argument for a function called Open.

57
00:04:20,850 --> 00:04:24,550
By calling this function, we can open the media library.

58
00:04:24,570 --> 00:04:28,230
On the button component, add the on click event.

59
00:04:28,260 --> 00:04:32,280
If this event gets triggered, we'll call the open function.

60
00:04:34,580 --> 00:04:38,060
The interface for opening the media library is ready.

61
00:04:38,090 --> 00:04:44,420
There's one more property we'll add to the media upload component called on Select.

62
00:04:46,650 --> 00:04:51,020
This property is an event that will get emitted when an image is selected.

63
00:04:51,030 --> 00:04:54,660
We can pass in an arrow function to handle the selection.

64
00:04:56,820 --> 00:05:00,660
The arrow function can accept an argument called image.

65
00:05:02,820 --> 00:05:07,840
This argument is an object with properties related to the current selection.

66
00:05:07,860 --> 00:05:10,290
Let's call the edit post function.

67
00:05:12,600 --> 00:05:13,800
In the object.

68
00:05:13,800 --> 00:05:15,720
Add the meta object.

69
00:05:17,830 --> 00:05:24,280
Next set the OG image property to the following value image sizes.

70
00:05:24,280 --> 00:05:26,950
Dot open graph dot url.

71
00:05:29,080 --> 00:05:33,250
You can long b image argument for a list of properties available.

72
00:05:33,290 --> 00:05:36,930
It'll contain the typical properties for any media item.

73
00:05:36,940 --> 00:05:39,760
Let's refresh the page to test our code.

74
00:05:42,070 --> 00:05:43,970
Open the custom sidebar.

75
00:05:43,990 --> 00:05:47,180
Initially, the button will be hidden from the user.

76
00:05:47,200 --> 00:05:52,390
We can click on the override option to toggle the visibility of this modal.

77
00:05:52,420 --> 00:05:57,880
It should appear, since we have proper permissions for interacting with the media library.

78
00:05:57,910 --> 00:05:59,920
Let's select an image.

79
00:06:02,050 --> 00:06:04,270
Next update The Post.

80
00:06:06,360 --> 00:06:08,880
Lastly, refresh the page.

81
00:06:11,130 --> 00:06:14,280
Our image continues to persist in the sidebar.

82
00:06:14,310 --> 00:06:17,370
The media library is completely functional.

83
00:06:17,370 --> 00:06:21,830
With a few lines of code, we're able to create a custom interface.

84
00:06:21,840 --> 00:06:26,610
We may not need all the bells and whistles of the media placeholder components.

85
00:06:26,610 --> 00:06:34,020
In some cases, you may need to create a custom interface that's completely possible with two components.

86
00:06:34,020 --> 00:06:37,200
We're almost finished with our open graph solution.

87
00:06:37,230 --> 00:06:43,410
The final step is to render the tags for adding a preview to the page in the next lecture.

88
00:06:43,410 --> 00:06:45,120
Let's handle this step.

