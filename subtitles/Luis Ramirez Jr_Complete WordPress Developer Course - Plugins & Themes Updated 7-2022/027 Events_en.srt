1
00:00:00,180 --> 00:00:06,330
In this lecture we are going to explore event handling in React events, play a major role in the browser

2
00:00:06,330 --> 00:00:11,580
in the real world, birthdays, achievements and marriages are considered events.

3
00:00:11,580 --> 00:00:15,120
The idea of events can be applicable to the programming world.

4
00:00:15,120 --> 00:00:17,400
However, they're not as exciting.

5
00:00:17,400 --> 00:00:22,260
Mouse clicks, scrolling or typing on the keyboard can be considered an event.

6
00:00:22,260 --> 00:00:26,430
The browser provides an API for listening to events with JavaScript.

7
00:00:26,460 --> 00:00:32,189
In the resource section of this lecture, I provide a link to a function called Add event listener.

8
00:00:32,189 --> 00:00:36,600
If you're not using React, you must use this function for working with events.

9
00:00:36,600 --> 00:00:40,950
Luckily, React provides an easier API for handling events.

10
00:00:40,950 --> 00:00:43,710
Check out the resource section for another link.

11
00:00:43,710 --> 00:00:47,970
React allows us to listen to events on elements with attributes.

12
00:00:47,970 --> 00:00:53,370
If you scroll through the page, you may come across a section called Supported Events.

13
00:00:53,370 --> 00:00:57,120
React supports most of the events available in the browser.

14
00:00:57,150 --> 00:01:01,410
Feel free to search through the list of events after finishing this lecture.

15
00:01:01,560 --> 00:01:03,930
Let's leverage this feature in our app.

16
00:01:03,930 --> 00:01:09,540
For this example, let's create a link that will count the number of times the link has been clicked

17
00:01:09,540 --> 00:01:10,950
back in our project.

18
00:01:10,950 --> 00:01:15,990
Create a file inside the source directory called Counter JS.

19
00:01:18,050 --> 00:01:19,670
To keep our code clean.

20
00:01:19,670 --> 00:01:23,880
A separate component will handle this logic at the top of the file.

21
00:01:23,900 --> 00:01:27,500
Import the React object from the React package.

22
00:01:29,540 --> 00:01:32,450
Next to find a function called counter.

23
00:01:34,600 --> 00:01:41,020
Inside the function create a variable that will be set to the react use state function.

24
00:01:43,250 --> 00:01:48,360
We're going to call the use state function to keep track of the clicks performed on the link.

25
00:01:48,380 --> 00:01:51,420
Initially, the account should be set to zero.

26
00:01:51,440 --> 00:01:52,920
Let's pass that in.

27
00:01:52,940 --> 00:01:59,780
After setting the initial value, we can structure the return value by adding a pair of square brackets

28
00:01:59,780 --> 00:02:01,330
inside these brackets.

29
00:02:01,340 --> 00:02:05,240
Set the names to count and set count respectively.

30
00:02:07,510 --> 00:02:10,449
The first variable will hold the current value.

31
00:02:10,479 --> 00:02:14,380
The second variable will hold a function for updating the value.

32
00:02:14,410 --> 00:02:21,310
Next, we can begin to create the link after the variable definition, return and anchor element.

33
00:02:23,460 --> 00:02:27,300
The H ref attribute should be set to a hash character.

34
00:02:29,460 --> 00:02:32,490
The inner text should save the following counts.

35
00:02:32,490 --> 00:02:33,930
Colon counts.

36
00:02:36,160 --> 00:02:37,420
Inside the element.

37
00:02:37,420 --> 00:02:40,330
We are rendering the current count with a placeholder.

38
00:02:40,360 --> 00:02:44,070
Let's test our code by adding this component to our application.

39
00:02:44,080 --> 00:02:46,840
First, we must export the component.

40
00:02:46,870 --> 00:02:50,590
Add the export default keywords to the function definition.

41
00:02:52,640 --> 00:02:54,920
Next, open the page file.

42
00:02:56,910 --> 00:02:58,350
At the top of the file.

43
00:02:58,350 --> 00:03:02,820
We can import the component with the name counter from the counter file.

44
00:03:04,940 --> 00:03:06,490
The name can be anything.

45
00:03:06,500 --> 00:03:07,550
It doesn't have to be.

46
00:03:07,550 --> 00:03:14,150
Counter functions or variables exported under the default namespace won't be assigned a name.

47
00:03:14,180 --> 00:03:17,940
This gives our import statements the power to use a different name.

48
00:03:17,960 --> 00:03:23,970
However, for consistency, let's keep using the same name under the paragraph element.

49
00:03:23,990 --> 00:03:26,210
Let's add the counter component.

50
00:03:28,350 --> 00:03:32,610
We successfully created a component for counter clicks on a link.

51
00:03:32,640 --> 00:03:36,180
If we look at the page, the link should appear at the bottom.

52
00:03:36,210 --> 00:03:39,150
Unfortunately, there are some problems with the link.

53
00:03:39,180 --> 00:03:42,540
Firstly, if we click on the link, nothing happens.

54
00:03:42,540 --> 00:03:45,960
The counter should be updated after it has been clicked.

55
00:03:45,990 --> 00:03:48,900
Secondly, the URL has been changed.

56
00:03:48,930 --> 00:03:52,290
A hash character will appear at the end of the URL.

57
00:03:52,320 --> 00:03:57,420
The anchor element is an example of an element with default behavior attached to it.

58
00:03:57,450 --> 00:04:03,090
Once clicked, it'll manipulate the current URL to the value from the ref attribute.

59
00:04:03,120 --> 00:04:04,900
We should avoid this behavior.

60
00:04:04,920 --> 00:04:06,830
Let's fix both issues.

61
00:04:06,840 --> 00:04:09,210
Head back to the counter component.

62
00:04:09,240 --> 00:04:12,030
The goal is to handle click events on the link.

63
00:04:12,060 --> 00:04:15,250
This process is known as listening to an event.

64
00:04:15,270 --> 00:04:20,790
On the anchor element, we can listen for clicks by adding an attribute called on click.

65
00:04:22,960 --> 00:04:24,450
The spelling is crucial.

66
00:04:24,460 --> 00:04:28,690
The word click must be capitalized by adding this attribute.

67
00:04:28,720 --> 00:04:32,230
React will allow us to run a function on a click event.

68
00:04:32,260 --> 00:04:37,160
You can refer to the documentation for a complete list of valid events.

69
00:04:37,180 --> 00:04:41,580
The on click event is the preferred event for handling clicks.

70
00:04:41,590 --> 00:04:44,800
The value for this attribute must be an expression.

71
00:04:44,800 --> 00:04:51,490
As we've learned, a JavaScript expression can be added to an attribute by adding a pair of curly brackets

72
00:04:51,490 --> 00:04:53,080
inside these brackets.

73
00:04:53,080 --> 00:04:55,570
Let's set the function name to handle.

74
00:04:55,570 --> 00:04:56,200
Click.

75
00:04:58,360 --> 00:05:01,570
This function doesn't exist before defining it.

76
00:05:01,600 --> 00:05:04,120
Let's take a closer look at the value.

77
00:05:04,150 --> 00:05:08,000
We are not adding the parentheses by adding parentheses.

78
00:05:08,020 --> 00:05:10,150
The function will be called immediately.

79
00:05:10,180 --> 00:05:12,810
It doesn't matter if a visitor clicks on the link.

80
00:05:12,820 --> 00:05:14,450
That's not what we want.

81
00:05:14,470 --> 00:05:18,330
The behavior should be to call this function on clicks.

82
00:05:18,340 --> 00:05:20,580
By removing the parentheses.

83
00:05:20,590 --> 00:05:22,600
React will not call the function.

84
00:05:22,600 --> 00:05:25,390
Instead, it'll wait to call the function.

85
00:05:25,390 --> 00:05:29,030
Adding or removing parentheses can make a huge difference.

86
00:05:29,050 --> 00:05:31,490
Let's move on to defining the function.

87
00:05:31,510 --> 00:05:35,440
The function can be defined from within the counter component.

88
00:05:35,440 --> 00:05:38,830
I'm going to define it above the return statements.

89
00:05:40,970 --> 00:05:43,470
This syntax is completely valid.

90
00:05:43,490 --> 00:05:46,140
We're allowed to create nested functions.

91
00:05:46,160 --> 00:05:51,990
The benefit of nesting our functions is isolating them from other areas of our application.

92
00:05:52,010 --> 00:05:56,390
It's going to be nearly impossible to run this function from the outside.

93
00:05:56,420 --> 00:05:59,890
There isn't a point in sharing this function with other files.

94
00:05:59,900 --> 00:06:03,980
It's perfectly acceptable to define functions from within a function.

95
00:06:04,100 --> 00:06:06,640
Let's address the issues with our solution.

96
00:06:06,650 --> 00:06:10,370
First, we're going to add an argument called event.

97
00:06:12,550 --> 00:06:16,270
React events are an extension of JavaScript events.

98
00:06:16,420 --> 00:06:20,160
The syntax is easier to read and write with React.

99
00:06:20,170 --> 00:06:23,050
However, React doesn't keep you out of the loop.

100
00:06:23,080 --> 00:06:27,010
JavaScript events will pass on an object called Event.

101
00:06:27,040 --> 00:06:29,670
React will pass this object onto us.

102
00:06:29,680 --> 00:06:34,060
In the resource section of this lecture, I provide a link to this object.

103
00:06:34,090 --> 00:06:37,480
To be clear, this object is coming from JavaScript.

104
00:06:37,480 --> 00:06:39,400
It's not related to react.

105
00:06:39,430 --> 00:06:45,460
This documentation page will provide a comprehensive list of the properties and methods of the event

106
00:06:45,460 --> 00:06:46,240
object.

107
00:06:48,460 --> 00:06:51,940
This object contains information on the current event.

108
00:06:51,970 --> 00:06:57,320
Most importantly, it has a method for preventing the default behavior of an element.

109
00:06:57,340 --> 00:07:04,300
As we discussed before, links will manipulate the current URL with the value from the ref attribute.

110
00:07:04,330 --> 00:07:08,950
This behavior can be prevented by running a method called prevent defaults.

111
00:07:08,980 --> 00:07:10,360
Let's give it a try.

112
00:07:10,390 --> 00:07:15,310
Back in our function lets run the event dot prevent default function.

113
00:07:17,480 --> 00:07:19,500
That'll fix the issue with the link.

114
00:07:19,520 --> 00:07:25,500
In some cases, developers will refer to the argument as E, which is short for event.

115
00:07:25,520 --> 00:07:29,200
For this example, we're going to use the full name for clarity.

116
00:07:29,210 --> 00:07:33,020
However, you're more than welcome to change the argument to EA.

117
00:07:33,050 --> 00:07:40,130
Let's move on to updating the counts after preventing the default behavior, call the set count function.

118
00:07:42,390 --> 00:07:47,160
There are two types of values we can pass onto the set count function.

119
00:07:47,190 --> 00:07:49,980
The first option would be to pass in a value.

120
00:07:50,010 --> 00:07:52,960
The second option would be to pass in a function.

121
00:07:52,980 --> 00:07:55,290
If we pass in a function, react.

122
00:07:55,290 --> 00:07:56,570
We'll run the function.

123
00:07:56,580 --> 00:08:02,200
The value returned by our function will be the new value of the state variable.

124
00:08:02,220 --> 00:08:03,960
Let's pass in a function.

125
00:08:06,150 --> 00:08:08,790
You may be wondering, why are we using a function?

126
00:08:08,820 --> 00:08:10,080
The reason is simple.

127
00:08:10,080 --> 00:08:13,110
The new value should be the previous value.

128
00:08:13,110 --> 00:08:14,450
Incremented by one.

129
00:08:14,460 --> 00:08:21,060
The function passed into the set count function will be provided an argument called previous value without

130
00:08:21,060 --> 00:08:24,840
passing in a function, we don't have access to the previous value.

131
00:08:24,840 --> 00:08:28,560
Let's return the following previous value plus one.

132
00:08:30,790 --> 00:08:35,830
In my opinion, an arrow function might be more suitable for readability purposes.

133
00:08:35,830 --> 00:08:41,640
And this example, it doesn't matter if the function is a regular or an arrow function.

134
00:08:41,650 --> 00:08:44,310
However, readability is important.

135
00:08:44,320 --> 00:08:47,740
I think an arrow function is easier to read and write.

136
00:08:47,770 --> 00:08:52,330
Therefore, I'm going to convert this example into an arrow function.

137
00:08:54,690 --> 00:08:57,840
Aero functions can omit the return keyword.

138
00:08:57,840 --> 00:09:03,840
If the arrow function is written as one line, JavaScript will assume the value must be returned.

139
00:09:03,870 --> 00:09:06,840
This example is the same example as before.

140
00:09:06,870 --> 00:09:08,690
Feel free to use either one.

141
00:09:08,700 --> 00:09:10,980
Let's try testing our app.

142
00:09:11,010 --> 00:09:14,150
If you click on the link, the account will get updated.

143
00:09:14,160 --> 00:09:14,910
Perfect.

144
00:09:14,910 --> 00:09:17,640
This was the exact behavior we were looking for.

145
00:09:17,670 --> 00:09:20,060
Overall, working with events is easy.

146
00:09:20,070 --> 00:09:23,940
You simply attach the event name as an attribute to the element.

147
00:09:23,970 --> 00:09:27,060
Next, you can run a function to handle the event.

148
00:09:27,090 --> 00:09:32,130
Let's explore one more feature of React before moving on to other topics.

