1
00:00:00,120 --> 00:00:04,900
In this lecture, we are going to add a callback function for rendering the block.

2
00:00:04,920 --> 00:00:09,070
Currently, I'm viewing the experimental page on the front end.

3
00:00:09,090 --> 00:00:12,540
The page is not rendering the search form block.

4
00:00:12,570 --> 00:00:16,650
This is because we didn't add a save function to our block.

5
00:00:16,680 --> 00:00:22,620
If you were to copy the blocks, content and HTML comment would be saved in your clipboard.

6
00:00:22,680 --> 00:00:26,880
As we discussed before, the comment will act as a placeholder.

7
00:00:26,910 --> 00:00:31,980
WordPress will search for a function responsible for rendering the blocks content.

8
00:00:32,009 --> 00:00:38,380
If a function is not available, nothing is rendered on the page, the next step becomes apparent.

9
00:00:38,400 --> 00:00:42,210
We should define a function for rendering the blocks content.

10
00:00:42,240 --> 00:00:46,120
Let's get started in the resource section of this lecture.

11
00:00:46,140 --> 00:00:50,970
I provide a link to the register block type functions parameter list.

12
00:00:50,970 --> 00:00:55,990
The Register block type function has a second parameter, which is optional.

13
00:00:56,010 --> 00:00:58,570
It's an array of options for our block.

14
00:00:58,590 --> 00:01:03,090
The documentation for this function does not provide a list of options.

15
00:01:03,210 --> 00:01:09,480
According to the description of the second parameter, we can view a complete list of options by viewing

16
00:01:09,480 --> 00:01:14,600
the documentation page for the WP block type construct method.

17
00:01:14,610 --> 00:01:15,930
Let's check it out.

18
00:01:15,930 --> 00:01:22,590
Behind the scenes, the register block type function is calling this function to register our block.

19
00:01:22,770 --> 00:01:29,130
If we scroll to the parameters section, they'll be similar to the register block type function.

20
00:01:29,130 --> 00:01:32,130
The first parameter is the name of our block.

21
00:01:32,130 --> 00:01:37,410
The second parameter is an array of options compared to the previous page.

22
00:01:37,410 --> 00:01:42,650
This page will provide a comprehensive list of options with descriptions.

23
00:01:42,660 --> 00:01:45,480
You may notice something about these options.

24
00:01:45,480 --> 00:01:52,740
They're similar to the options for the block JSON file or register block type JavaScript function.

25
00:01:52,740 --> 00:02:00,120
WordPress provides an alternative solution for adding block options through PHP seems redundant, but

26
00:02:00,120 --> 00:02:04,970
WordPress provides ultimate flexibility with adding options to a block.

27
00:02:04,980 --> 00:02:11,070
Keep in mind, not all options are the same between each solution for blocks that are rendered on the

28
00:02:11,070 --> 00:02:15,780
server, there's an option exclusive to the PHP version of this function.

29
00:02:15,780 --> 00:02:18,270
Let's give it a try in your editor.

30
00:02:18,270 --> 00:02:20,760
Open the register block's file.

31
00:02:22,940 --> 00:02:29,170
We are going to update the second argument of the register block type function from within the loop.

32
00:02:29,180 --> 00:02:33,350
However, we should have this argument on a per block basis.

33
00:02:33,350 --> 00:02:40,130
For example, the fancy header block does not need to add options rather than adding the options directly

34
00:02:40,130 --> 00:02:46,370
in the function, let's outsource them to our arrays inside the array for the search form block.

35
00:02:46,400 --> 00:02:50,510
At an index called options, its value will be an array.

36
00:02:52,820 --> 00:02:58,220
Inside this array, we will store the options for the register block type function.

37
00:02:58,250 --> 00:03:04,190
A function can be added for rendering the block by adding an index called render callback.

38
00:03:06,440 --> 00:03:10,910
Throughout your career as a developer, you may hear the word callback.

39
00:03:10,940 --> 00:03:13,490
It's a common word in the programming world.

40
00:03:13,520 --> 00:03:17,240
A callback refers to a function that's called in the future.

41
00:03:17,270 --> 00:03:20,150
Currently, we're trying to register a block.

42
00:03:20,180 --> 00:03:25,790
We are not trying to render the block unless a page has the block within its contents.

43
00:03:25,820 --> 00:03:29,060
Therefore, it makes sense to have a callback.

44
00:03:29,090 --> 00:03:32,760
WordPress will handle calling the function at the right time.

45
00:03:32,780 --> 00:03:36,800
The value for this index must be the function's name.

46
00:03:36,830 --> 00:03:39,500
Let's set the name to the following up.

47
00:03:39,500 --> 00:03:41,780
Search form render CB.

48
00:03:44,040 --> 00:03:49,030
In some cases, developers will shorten the word callback to CB.

49
00:03:49,050 --> 00:03:53,940
The next step is to add the options to the register block type function.

50
00:03:53,970 --> 00:03:58,970
However, we shouldn't assume the options array is available for all blocks.

51
00:03:58,980 --> 00:04:04,000
For example, the options array is not available in the fancy header block.

52
00:04:04,020 --> 00:04:07,680
We should check that the options array has been defined.

53
00:04:09,740 --> 00:04:12,950
There are two options for handling this scenario.

54
00:04:12,980 --> 00:04:16,339
The first option is to use a conditional statement.

55
00:04:16,370 --> 00:04:18,870
This solution is completely valid.

56
00:04:18,890 --> 00:04:21,290
However, it's a lot of code to write.

57
00:04:21,800 --> 00:04:25,930
PHP has support for a feature called the Ternary Operator.

58
00:04:25,940 --> 00:04:29,870
It's a shorthand syntax for writing a conditional statement.

59
00:04:32,050 --> 00:04:33,380
Let's give it a shot.

60
00:04:33,400 --> 00:04:36,220
Inside the register block type function.

61
00:04:36,220 --> 00:04:39,610
Add a second argument with the following characters.

62
00:04:39,610 --> 00:04:41,320
Question Mark Colon.

63
00:04:43,650 --> 00:04:49,080
Adding These characters will create a ternary operator to the left of the question mark.

64
00:04:49,080 --> 00:04:52,140
We must provide a condition for the condition.

65
00:04:52,140 --> 00:04:54,970
Let's use a function called is set.

66
00:04:57,200 --> 00:05:00,710
The IS set function is defined by PHP.

67
00:05:00,740 --> 00:05:03,290
It will check if an array has an index.

68
00:05:03,320 --> 00:05:08,960
In this case, we should check if the block array has an index called options.

69
00:05:08,990 --> 00:05:15,950
If it does, we can safely assume that we can provide the registered block type function with the options

70
00:05:15,950 --> 00:05:18,850
between the question mark and colon symbols.

71
00:05:18,860 --> 00:05:21,790
We can provide a value if the condition is true.

72
00:05:22,310 --> 00:05:28,610
Here's the biggest difference between a traditional conditional statement and a ternary operator.

73
00:05:28,640 --> 00:05:31,820
A ternary operator will produce an expression.

74
00:05:31,820 --> 00:05:38,210
The value from the expression will be the value for the second argument of the registered block type

75
00:05:38,210 --> 00:05:38,990
function.

76
00:05:39,110 --> 00:05:43,040
For this example, let's pass on the block options array.

77
00:05:45,260 --> 00:05:47,630
Lastly, we must provide a value.

78
00:05:47,630 --> 00:05:54,540
If the condition is false, a value for a false condition can be added to the right of the colon symbol.

79
00:05:54,560 --> 00:05:56,540
Let's add an empty array.

80
00:05:58,790 --> 00:06:04,910
The code we've written is the equivalent of the conditional statement from the previous code snippet.

81
00:06:04,940 --> 00:06:10,380
The ternary operator is a great way to create a value based on a condition.

82
00:06:10,400 --> 00:06:14,750
It's not useful for writing blocks of code with multiple lines.

83
00:06:14,780 --> 00:06:20,840
If this line of code was any longer, we should resort to a traditional conditional statements.

84
00:06:21,110 --> 00:06:28,280
There are developers who don't like ternary operators because they can be difficult to read if the syntax

85
00:06:28,280 --> 00:06:29,600
is difficult to read.

86
00:06:29,630 --> 00:06:34,280
You're more than welcome to switch to traditional conditional statements.

87
00:06:34,310 --> 00:06:38,420
Overall, we are checking if the options array exists.

88
00:06:38,450 --> 00:06:41,900
If it does, we are passing it into the function.

89
00:06:41,930 --> 00:06:49,250
Otherwise, an empty array is provided to the function, which is the equivalent of not passing in anything.

90
00:06:49,460 --> 00:06:54,430
The next step is to define this function inside the includes directory.

91
00:06:54,440 --> 00:06:56,960
Create a folder called Blocks.

92
00:06:59,160 --> 00:07:05,630
We are going to dedicate a directory for rendering blocks with php inside this directory.

93
00:07:05,640 --> 00:07:08,070
Create a file called search form.

94
00:07:08,700 --> 00:07:09,300
PHP.

95
00:07:11,560 --> 00:07:15,460
Next define the up search form render CB.

96
00:07:17,820 --> 00:07:22,030
Inside this function, we must return content for the block.

97
00:07:22,050 --> 00:07:26,550
To keep things simple, let's return a string with a basic message.

98
00:07:28,670 --> 00:07:32,490
The actual HTML will be returned in another lecture.

99
00:07:32,510 --> 00:07:35,230
The next step is to include this file.

100
00:07:35,240 --> 00:07:39,350
At the moment, WordPress won't be able to find this function.

101
00:07:39,350 --> 00:07:43,730
We can include this file from the indexed PHP file.

102
00:07:45,990 --> 00:07:53,760
Under the include section run the include function with the following path includes slash blocks slash

103
00:07:53,760 --> 00:07:55,890
search form php.

104
00:07:58,140 --> 00:07:59,220
We're finished.

105
00:07:59,220 --> 00:08:05,430
The finding of function for rendering a block is as simple as adding the render callback option to a

106
00:08:05,430 --> 00:08:05,730
block.

107
00:08:05,880 --> 00:08:06,640
Options.

108
00:08:06,660 --> 00:08:09,300
Let's try refreshing the front ends.

109
00:08:09,450 --> 00:08:15,100
After a few moments, the string returned by our function will be displayed on the front end.

110
00:08:15,120 --> 00:08:19,470
We've successfully created a block with server side rendering.

111
00:08:19,500 --> 00:08:25,380
In the next lecture we will replace this string with the real template for the block.

