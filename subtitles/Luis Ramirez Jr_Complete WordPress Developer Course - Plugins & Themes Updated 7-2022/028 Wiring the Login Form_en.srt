1
00:00:00,120 --> 00:00:06,330
In this lecture, we are going to finish the log in form by submitting the values to our custom endpoint.

2
00:00:06,360 --> 00:00:09,920
The process is very similar to the registration form.

3
00:00:09,930 --> 00:00:14,520
For this reason, I think this is a great opportunity for an exercise.

4
00:00:14,520 --> 00:00:18,270
Try tackling the solution, pause the video and good luck.

5
00:00:22,000 --> 00:00:23,080
Welcome back.

6
00:00:23,110 --> 00:00:26,740
Hopefully you were able to submit the form without my help.

7
00:00:26,770 --> 00:00:28,320
If not, that's fine.

8
00:00:28,330 --> 00:00:30,510
Let's tackle the solution together.

9
00:00:30,520 --> 00:00:35,380
The first step is to listen for the form submission at the bottom of the function.

10
00:00:35,380 --> 00:00:37,360
Let's run the sign in form.

11
00:00:37,780 --> 00:00:39,820
Add event listener function.

12
00:00:41,970 --> 00:00:44,820
The name of the event is called Submit.

13
00:00:47,010 --> 00:00:51,180
Next pass in an arrow function with the async keyword.

14
00:00:53,320 --> 00:00:58,000
In a moment, we're going to be running an asynchronous function ahead of time.

15
00:00:58,000 --> 00:01:00,400
We are adding the async keyword.

16
00:01:00,430 --> 00:01:06,880
The next step is to disable the default behavior by accepting the event object as an argument.

17
00:01:09,060 --> 00:01:13,680
Inside the function run the events dot prevent default function.

18
00:01:15,750 --> 00:01:17,350
So far so good.

19
00:01:17,370 --> 00:01:20,520
We've got a function for capturing the form submission.

20
00:01:20,550 --> 00:01:23,100
Our next move is to update the form.

21
00:01:23,130 --> 00:01:27,840
Users shouldn't be able to modify their input while the form is in submission.

22
00:01:27,870 --> 00:01:31,480
In addition, we should inform them of the submission.

23
00:01:31,500 --> 00:01:35,830
First, we need to select the elements for performing these actions.

24
00:01:35,850 --> 00:01:39,300
Create a variable called sign in field sets.

25
00:01:41,510 --> 00:01:45,670
The value for the variable will be the dot query selector function.

26
00:01:45,680 --> 00:01:48,620
We're going to select the field set elements.

27
00:01:50,740 --> 00:01:53,080
Similar to the registration form.

28
00:01:53,080 --> 00:01:57,730
The log in form has the field set element wrapped around the inputs.

29
00:01:57,760 --> 00:02:01,620
Next, create a variable called sign in status.

30
00:02:01,630 --> 00:02:06,430
The element containing the status has an ID called sign in status.

31
00:02:08,520 --> 00:02:10,949
Next, let's update the elements.

32
00:02:10,979 --> 00:02:17,880
For starters, we can disable the form by calling the set attribute function on the sign in field set

33
00:02:17,880 --> 00:02:18,720
variable.

34
00:02:18,750 --> 00:02:21,890
The name of the attribute is called disabled.

35
00:02:21,900 --> 00:02:23,670
Its value will be true.

36
00:02:25,960 --> 00:02:28,430
This attribute will disable the form.

37
00:02:28,450 --> 00:02:34,930
Next we can update the sign in status dot inour html property to add a message.

38
00:02:34,960 --> 00:02:37,600
The message will be wrapped with a div tag.

39
00:02:37,630 --> 00:02:39,820
It'll contain the following classes.

40
00:02:39,820 --> 00:02:41,170
Modal Status.

41
00:02:41,170 --> 00:02:43,300
Modal Status info.

42
00:02:45,490 --> 00:02:47,980
The message will contain the following text.

43
00:02:47,980 --> 00:02:48,810
Please wait.

44
00:02:48,820 --> 00:02:50,170
We are logging you in.

45
00:02:52,320 --> 00:02:56,890
Now that we've prepped the interface, the request can be sent to the server.

46
00:02:56,910 --> 00:02:59,310
However, we don't have the URL.

47
00:02:59,340 --> 00:03:05,130
Let's inject the variable into our script by updating the NDK php file.

48
00:03:07,310 --> 00:03:11,600
In an earlier lecture we called an array called off the URLs.

49
00:03:11,630 --> 00:03:16,340
This variable gets injected into the document as a JavaScript variable.

50
00:03:16,370 --> 00:03:18,670
Most of the work has been performed.

51
00:03:18,680 --> 00:03:26,600
We can update the array to include another URL for the log in endpoints inside this array at a key called

52
00:03:26,600 --> 00:03:27,470
sign in.

53
00:03:27,470 --> 00:03:30,770
The value for this key will be the following code.

54
00:03:30,830 --> 00:03:32,860
Escape your URL raw.

55
00:03:32,870 --> 00:03:34,640
Rest your URL up.

56
00:03:34,640 --> 00:03:36,590
Slash v one slash.

57
00:03:36,590 --> 00:03:37,460
Sign in.

58
00:03:39,840 --> 00:03:43,410
After adding the URL, we can head back to the script.

59
00:03:43,440 --> 00:03:48,720
Let's create a variable for the form data below the updates to the form elements.

60
00:03:48,720 --> 00:03:51,390
Create a variable called form data.

61
00:03:53,490 --> 00:04:00,300
The value for this variable will be an object with two properties called user login and password.

62
00:04:02,470 --> 00:04:05,230
The name of the properties is very important.

63
00:04:05,260 --> 00:04:08,800
Our End Point is expecting properties with these names.

64
00:04:08,830 --> 00:04:11,650
Otherwise, our request may be rejected.

65
00:04:11,680 --> 00:04:19,390
The value for the user log in property will be the following sign in form dot query selector hash c

66
00:04:19,420 --> 00:04:21,040
email value.

67
00:04:23,160 --> 00:04:30,330
In the form, I have given each input an ID the value for the password property will be the same, except

68
00:04:30,330 --> 00:04:33,060
the ID is called c password.

69
00:04:35,190 --> 00:04:41,910
Lastly, we can start sending this data to the end point after the variable call the fetch function.

70
00:04:44,100 --> 00:04:46,440
The first argument is the URL.

71
00:04:46,470 --> 00:04:50,700
Let's pass the up off rest sign in variable.

72
00:04:52,760 --> 00:04:56,600
Next pass in an object for configuring the request.

73
00:04:56,600 --> 00:04:59,950
The endpoint only accepts post requests.

74
00:04:59,960 --> 00:05:02,870
Let's set the method property to post.

75
00:05:05,230 --> 00:05:05,980
Afterward.

76
00:05:05,980 --> 00:05:10,930
We must change the file type of the request by adding the headers object.

77
00:05:13,130 --> 00:05:19,820
The file type can be modified by setting the content type header to application JSON.

78
00:05:21,880 --> 00:05:26,800
Lastly, we can add the body property for sending data with our request.

79
00:05:26,830 --> 00:05:32,770
The value will be the JSON string if I function with the form data variable.

80
00:05:34,980 --> 00:05:39,860
The fetch function returns a promise by sending the request as is.

81
00:05:39,870 --> 00:05:45,310
The browser will not wait for the request to be completed before running the next line of code.

82
00:05:45,330 --> 00:05:49,200
We can wait for the request by adding the await keyword.

83
00:05:51,600 --> 00:05:54,510
The value resolved by the promise will be returned.

84
00:05:54,510 --> 00:06:00,450
After adding this keyword, let's store the response in a variable called response.

85
00:06:02,650 --> 00:06:08,650
The response object returned by the fetch function will contain various pieces of information.

86
00:06:08,650 --> 00:06:12,200
However, we're not interested in most of the information.

87
00:06:12,220 --> 00:06:17,130
The body of the response contains the data we'll need to process the response.

88
00:06:17,140 --> 00:06:22,390
Let's extract the body by creating a variable called response JSON.

89
00:06:22,420 --> 00:06:28,600
The value for this variable will be the response JSON function with the await keyword.

90
00:06:30,900 --> 00:06:34,660
Adding the a weight keyword is a must without this keyword.

91
00:06:34,680 --> 00:06:37,080
The variable will store a promise.

92
00:06:37,080 --> 00:06:42,510
The JSON function will grab and format the responses body into an object.

93
00:06:42,720 --> 00:06:47,370
The final step in our process is to check the status of their response.

94
00:06:47,370 --> 00:06:51,620
If the form was submitted successfully, we will refresh the page.

95
00:06:51,630 --> 00:06:54,440
Otherwise the form must be re enabled.

96
00:06:54,450 --> 00:06:59,400
Below the variables create a conditional statement with the following condition.

97
00:06:59,400 --> 00:07:04,380
Response JSON status equals equals equals to.

98
00:07:06,610 --> 00:07:11,080
A successful authentication will have the status properties set to two.

99
00:07:11,110 --> 00:07:18,190
If this is the case, we're going to update the sign in form status property to a div tag with the following

100
00:07:18,190 --> 00:07:19,000
classes.

101
00:07:19,000 --> 00:07:20,500
Modal Status.

102
00:07:20,500 --> 00:07:22,840
Modal Status Success.

103
00:07:24,910 --> 00:07:27,450
The message will say the following success.

104
00:07:27,460 --> 00:07:28,780
You are now logged in.

105
00:07:33,660 --> 00:07:38,490
Lastly, let's reload the page with the location reload function.

106
00:07:40,600 --> 00:07:42,490
The authentication may fail.

107
00:07:42,490 --> 00:07:47,050
If that's the case, let's add an LX statement for handling failures.

108
00:07:49,050 --> 00:07:51,690
Firstly, the form should be re enabled.

109
00:07:51,720 --> 00:07:57,100
This gives the user the opportunity to modify their info on the field set element.

110
00:07:57,120 --> 00:08:00,430
The disabled attribute was applied to the elements.

111
00:08:00,450 --> 00:08:04,770
Let's remove this attribute by calling the sign in field set.

112
00:08:05,130 --> 00:08:09,000
Remove attribute function with the disabled attributes.

113
00:08:11,190 --> 00:08:19,650
Next we can update the sign in field set inour HTML property to update the message at a div tag with

114
00:08:19,650 --> 00:08:21,120
the following classes.

115
00:08:21,120 --> 00:08:22,500
Modal Status.

116
00:08:22,500 --> 00:08:23,820
Modal Status.

117
00:08:23,820 --> 00:08:24,630
Danger.

118
00:08:27,070 --> 00:08:30,150
The message will say the following invalid credentials.

119
00:08:30,160 --> 00:08:31,630
Please try again later.

120
00:08:33,740 --> 00:08:34,730
We're finished.

121
00:08:34,760 --> 00:08:38,600
That was a lot to go through, but nothing you shouldn't be unfamiliar with.

122
00:08:38,630 --> 00:08:42,350
Overall, we're sending a request to our End Point.

123
00:08:42,400 --> 00:08:46,260
Afterward, we're handling the response by checking the status.

124
00:08:46,280 --> 00:08:49,330
Let's try testing this form in your browser.

125
00:08:49,340 --> 00:08:51,950
Refresh the experimental page.

126
00:08:54,030 --> 00:08:57,430
Next, let's open the modal to view the login form.

127
00:08:57,450 --> 00:09:00,990
I'm going to submit the form with invalid credentials.

128
00:09:03,130 --> 00:09:06,130
As expected, the authentication will fail.

129
00:09:06,160 --> 00:09:10,450
Next, I'm going to submit the form with valid credentials.

130
00:09:12,610 --> 00:09:13,180
Great.

131
00:09:13,210 --> 00:09:17,500
We've successfully logged in at the top right corner of the page.

132
00:09:17,500 --> 00:09:19,730
The user username or email should appear.

133
00:09:19,750 --> 00:09:22,270
This indicates we're logged into the system.

134
00:09:22,300 --> 00:09:23,580
Pat yourself on the back.

135
00:09:23,590 --> 00:09:25,350
We've completed the forms.

136
00:09:25,360 --> 00:09:30,480
There are some finishing touches that will apply to our solution before considering it complete.

137
00:09:30,490 --> 00:09:33,790
Once you're ready, I'll see you in the next lecture.

