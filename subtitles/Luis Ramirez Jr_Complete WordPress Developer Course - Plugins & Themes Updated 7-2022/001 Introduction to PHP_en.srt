1
00:00:00,150 --> 00:00:03,040
Welcome to this section of the course.

2
00:00:03,060 --> 00:00:07,800
We're going to begin our journey by talking about the fundamentals of PHP.

3
00:00:07,830 --> 00:00:10,830
It's the language WordPress is written with.

4
00:00:10,860 --> 00:00:14,910
If you already know PHP, feel free to skip this section.

5
00:00:14,910 --> 00:00:17,850
Nothing groundbreaking will be taught in this section.

6
00:00:17,850 --> 00:00:19,890
So what is PHP?

7
00:00:19,920 --> 00:00:24,720
It's a programming language that runs on servers to process web pages.

8
00:00:24,720 --> 00:00:27,330
Let's dive deeper into this definition.

9
00:00:27,540 --> 00:00:31,440
First and foremost, PHP is a programming language.

10
00:00:31,470 --> 00:00:35,340
A programming language allows us to give instructions to a machine.

11
00:00:35,340 --> 00:00:41,220
We can tell a machine to register a new user, upload a file or process a purchase.

12
00:00:41,220 --> 00:00:44,370
There are dozens of programming languages available.

13
00:00:44,370 --> 00:00:47,460
It's possible to create a site with any of them.

14
00:00:47,460 --> 00:00:52,260
P php sticks out from the bunch because it focuses on web development.

15
00:00:52,260 --> 00:00:57,660
Every feature it introduces is targeted at making web development easier.

16
00:00:58,410 --> 00:01:06,060
PHP power is over 79% of websites, so for every ten sites you visit, eight of them are written with

17
00:01:06,360 --> 00:01:09,480
PHP, its popularity and feature set.

18
00:01:09,480 --> 00:01:12,990
Make it the best language for WordPress to be written in.

19
00:01:13,020 --> 00:01:15,780
Let's talk about how PHP works.

20
00:01:16,260 --> 00:01:18,440
PHP can be installed on a server.

21
00:01:18,450 --> 00:01:22,980
A server is a computer that provides resources for running programs.

22
00:01:22,980 --> 00:01:28,100
Servers can be purchased or we can convert our personal machines into one.

23
00:01:28,110 --> 00:01:33,840
In our case, we're going to be using a server to run PHP for web development.

24
00:01:33,960 --> 00:01:42,030
We can write PHP code inside a PHP file code written inside this file will perform any task we tell

25
00:01:42,030 --> 00:01:42,720
it to.

26
00:01:42,750 --> 00:01:46,430
Page PHP will only run on the machine it was installed on.

27
00:01:46,440 --> 00:01:50,490
If we install it on a server it will only run on the server.

28
00:01:50,490 --> 00:01:52,520
It never runs in the browser.

29
00:01:52,530 --> 00:01:57,450
So you may be wondering how does the user know when something happens?

30
00:01:57,630 --> 00:02:01,980
The PHP does something that no other language does out of the box.

31
00:02:01,980 --> 00:02:04,350
It will produce an HTML file.

32
00:02:04,380 --> 00:02:10,130
This step is optional, but in most cases you will want to produce an HTML file.

33
00:02:10,139 --> 00:02:12,870
This file can be sent over to the browser.

34
00:02:12,900 --> 00:02:16,860
From that point, the browser will render the HTML file.

35
00:02:17,520 --> 00:02:20,460
PHP plays very nicely with HTML.

36
00:02:20,610 --> 00:02:24,820
A prerequisite to this course was knowledge of HTML.

37
00:02:24,840 --> 00:02:29,430
Since you know each HTML, you already know how to write some PHP.

38
00:02:29,460 --> 00:02:33,810
This section is going to cover the basics of PHP code.

39
00:02:35,030 --> 00:02:38,000
Let's start by creating a PHP file.

40
00:02:38,030 --> 00:02:42,190
Currently I'm pointing my editor to the WordPress project.

41
00:02:42,200 --> 00:02:46,680
I want you to do the same if you forgot where your site is stored.

42
00:02:46,700 --> 00:02:49,770
Let's quickly review how to find your project.

43
00:02:49,790 --> 00:02:54,450
You can open local to grab the full path on the local dashboard.

44
00:02:54,470 --> 00:02:57,710
You can click on the button below the site's title.

45
00:02:57,740 --> 00:03:00,590
This button should open the file Explorer.

46
00:03:00,770 --> 00:03:07,130
As a reminder, WordPress files can be found under the app slash public directory.

47
00:03:07,160 --> 00:03:10,820
This directory is where your editor should be pointed to.

48
00:03:10,850 --> 00:03:17,870
After you've got your editor sorted, let's create a file inside the root directory of the WordPress

49
00:03:17,870 --> 00:03:18,410
site.

50
00:03:18,440 --> 00:03:21,980
Create a file called Test PHP.

51
00:03:24,380 --> 00:03:29,240
PSP files have the PHP extension without this extension.

52
00:03:29,270 --> 00:03:34,070
Our server will not process the PHP code written inside the file.

53
00:03:34,100 --> 00:03:40,820
Typically, it's considered bad practice to create files in the root directory of a WordPress site.

54
00:03:40,850 --> 00:03:47,820
However, I want to review the fundamentals of PHP before we dive into the code of WordPress.

55
00:03:47,840 --> 00:03:51,940
We should have a basic understanding of the PHP language.

56
00:03:51,950 --> 00:03:55,610
We're creating this file independently from WordPress.

57
00:03:55,640 --> 00:04:00,080
As we discussed before, PHP can render HTML.

58
00:04:00,110 --> 00:04:04,610
Therefore we're allowed to write valid HTML inside this file.

59
00:04:04,640 --> 00:04:08,390
Let's create an h one tag with some dummy text.

60
00:04:10,570 --> 00:04:18,310
Under normal circumstances, we would wrap this tag with HTML and body tags for demonstration purposes.

61
00:04:18,310 --> 00:04:19,709
We'll keep it simple.

62
00:04:19,720 --> 00:04:23,050
The next step is to open this file in the browser.

63
00:04:23,050 --> 00:04:26,200
If you haven't already turn your server on.

64
00:04:26,290 --> 00:04:29,410
Otherwise we won't be able to view this file.

65
00:04:29,410 --> 00:04:31,870
Let's check out the site in our browser.

66
00:04:34,100 --> 00:04:38,010
Behind the scenes and Jinks is delivering this page.

67
00:04:38,030 --> 00:04:45,950
If we look closely at the URL, we're not accessing a specific file by default and Jinx will hand over

68
00:04:45,950 --> 00:04:47,900
the request to WordPress.

69
00:04:48,020 --> 00:04:53,160
We can access a file by typing its name after the domain in the address bar.

70
00:04:53,180 --> 00:04:56,380
We can type the name of the file by default.

71
00:04:56,390 --> 00:04:59,250
The server is pointing to our WordPress site.

72
00:04:59,270 --> 00:05:03,140
Let's try accessing the test php file.

73
00:05:05,350 --> 00:05:08,740
After doing so, we are presented with the file.

74
00:05:08,770 --> 00:05:09,460
Awesome.

75
00:05:09,460 --> 00:05:12,630
We don't need to type the full path to the file.

76
00:05:12,640 --> 00:05:18,460
The web server will automatically search for the file in the app slash public directory.

77
00:05:18,490 --> 00:05:21,840
This feature is the main benefit of using a server.

78
00:05:21,850 --> 00:05:25,390
We don't need to type full paths in the address bar.

79
00:05:25,420 --> 00:05:30,400
A server can automatically serve files from a specific directory.

80
00:05:30,580 --> 00:05:34,030
We've successfully created our first PHP file.

81
00:05:34,540 --> 00:05:41,020
PHP files have the PHP extension inside a free file we can write html.

82
00:05:41,050 --> 00:05:44,170
Does this mean PHP is running on the browser?

83
00:05:44,200 --> 00:05:45,760
The answer is no.

84
00:05:45,790 --> 00:05:51,880
To better understand, let's take a peek at the files received by the browser on your keyboard.

85
00:05:51,880 --> 00:05:53,620
Press the F 12 key.

86
00:05:53,620 --> 00:05:56,830
This key should open the Chrome developer tools.

87
00:05:56,830 --> 00:06:03,400
If this toolset doesn't open, you can manually open this tool by clicking on the three dots top right

88
00:06:03,400 --> 00:06:04,120
corner.

89
00:06:04,150 --> 00:06:09,910
The developer tools can be found under the more tools developer tools menu.

90
00:06:12,130 --> 00:06:16,270
If you're not familiar with the developer tools, that's perfectly fine.

91
00:06:16,300 --> 00:06:18,220
I'll give a brief introduction.

92
00:06:18,250 --> 00:06:23,320
The developer tools are a suite of tools for debugging a site in the browser.

93
00:06:23,350 --> 00:06:26,480
For example, there's a panel called Elements.

94
00:06:26,500 --> 00:06:31,600
This panel will give you a preview of the HTML document in the browser.

95
00:06:31,630 --> 00:06:36,220
As you can see, our H1 tag can be found in the document.

96
00:06:36,250 --> 00:06:39,260
Additional tags have been added by default.

97
00:06:39,280 --> 00:06:45,400
Chrome will inject the HTML head and body tags if they're missing from the document.

98
00:06:45,580 --> 00:06:49,450
The elements panel is cool, but it's not what we're interested in.

99
00:06:49,480 --> 00:06:52,430
Let's shift our focus to the network panel.

100
00:06:52,450 --> 00:07:01,000
This panel allows us to view files received by the server images, videos, CSS and HTML files are some

101
00:07:01,000 --> 00:07:03,850
examples of files that can be sent by a server.

102
00:07:03,880 --> 00:07:07,760
It's possible this panel may be empty if that's the case.

103
00:07:07,780 --> 00:07:09,280
Refresh the page.

104
00:07:11,540 --> 00:07:16,440
After some time, the network panel will display a table of files.

105
00:07:16,460 --> 00:07:18,740
You may receive different files.

106
00:07:18,740 --> 00:07:20,220
That's perfectly fine.

107
00:07:20,240 --> 00:07:25,970
The file we're interested in is the test PHP file and this table.

108
00:07:26,000 --> 00:07:30,720
Various pieces of information are given to us, such as the file size.

109
00:07:30,740 --> 00:07:34,070
Let's focus our attention on the type column.

110
00:07:34,310 --> 00:07:36,920
This column will tell us the file type.

111
00:07:36,950 --> 00:07:45,860
For example, if we were viewing an image, the file type could be PNG or JPEG for the test php file.

112
00:07:45,890 --> 00:07:48,470
The type is set to documents.

113
00:07:48,500 --> 00:07:53,030
The document type is the file type for an html file.

114
00:07:53,120 --> 00:07:54,570
Mysterious, right.

115
00:07:54,590 --> 00:07:58,040
Clearly we are asking for a PHP file.

116
00:07:58,070 --> 00:07:59,310
Behind the scenes.

117
00:07:59,720 --> 00:08:02,150
PHP has produced an html file.

118
00:08:02,180 --> 00:08:07,710
This concept is important to understand whenever we ask for a PHP file.

119
00:08:07,730 --> 00:08:13,400
The server will process the code inside a PHP file after it executes the code.

120
00:08:13,430 --> 00:08:16,910
The output of a php file is HTML.

121
00:08:16,940 --> 00:08:19,900
The HTML file is sent to the browser.

122
00:08:19,910 --> 00:08:23,080
Browsers will never see a line of PHP code.

123
00:08:23,090 --> 00:08:25,490
It will always receive HTML.

124
00:08:25,520 --> 00:08:31,760
For this reason, the developer tools categorize the file as an HTML file.

125
00:08:31,910 --> 00:08:34,520
So far we have got nothing exciting.

126
00:08:34,520 --> 00:08:39,350
Let's start learning some of PHP features in the following lecture.

