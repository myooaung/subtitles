WEBVTT
1
00:00:00.090 --> 00:00:04.770
In this lecture, we're going to explore a feature that's going to make our lives easier.

2
00:00:04.800 --> 00:00:11.020
In our file, we are using the React Dot create element function to create elements.

3
00:00:11.040 --> 00:00:13.680
It's very unintuitive and unreadable.

4
00:00:13.710 --> 00:00:18.900
What if we had hundreds of elements, not to mention the attributes for each element.

5
00:00:18.930 --> 00:00:23.220
Our application can become hideous with a few dozen elements.

6
00:00:23.250 --> 00:00:27.090
Luckily, React has a solution that addresses this issue.

7
00:00:27.120 --> 00:00:31.390
What if I told you you could write HTML in a JavaScript file?

8
00:00:31.410 --> 00:00:35.820
That's completely possible with an extension called Gsx.

9
00:00:36.830 --> 00:00:42.860
Before our files are loaded on the browser, our code goes through a package called Webpack.

10
00:00:42.890 --> 00:00:48.350
Webpack is a tool designed for bundling and optimizing your code for production.

11
00:00:48.380 --> 00:00:51.260
We saw an example of what Webpack can do.

12
00:00:51.290 --> 00:00:53.900
It can remove whitespace from our code.

13
00:00:53.930 --> 00:00:56.390
This process is automated for us.

14
00:00:56.420 --> 00:00:58.070
It can do so much more.

15
00:00:58.100 --> 00:01:04.720
Webpack has been configured to convert Gsx into the react dot create element function.

16
00:01:04.730 --> 00:01:07.020
So what is gsx?

17
00:01:07.040 --> 00:01:11.570
The developers of React have created an extension for JavaScript.

18
00:01:11.600 --> 00:01:13.410
It's called Gsx.

19
00:01:13.430 --> 00:01:20.840
It's a syntax that allows HTML like code to be written in a JavaScript file before files are delivered

20
00:01:20.840 --> 00:01:21.770
to the browser.

21
00:01:21.800 --> 00:01:25.820
Gsx will be converted into the create element function.

22
00:01:25.850 --> 00:01:27.230
Here's an example.

23
00:01:27.320 --> 00:01:30.740
To be clear, gsx is not HTML.

24
00:01:30.770 --> 00:01:34.190
The syntax is similar, but there are differences.

25
00:01:34.190 --> 00:01:38.760
Not everything from the HTML language will be available in gsx.

26
00:01:38.780 --> 00:01:41.240
Let's start writing some gsx.

27
00:01:41.480 --> 00:01:44.930
In our project, let's update the page function.

28
00:01:44.930 --> 00:01:50.420
First, we will completely replace the return value with a pair of parentheses.

29
00:01:54.690 --> 00:01:57.510
Multi-line Gsx is supported.

30
00:01:57.510 --> 00:02:03.930
However, it must be wrapped with a pair of parentheses, otherwise you may run into issues.

31
00:02:03.930 --> 00:02:07.650
Afterward, we can begin writing G6 elements.

32
00:02:07.650 --> 00:02:12.420
Let's try recreating the same interface inside the parentheses.

33
00:02:12.420 --> 00:02:14.070
Let's add a div tag.

34
00:02:16.330 --> 00:02:20.530
Next, add an H one tag with two paragraph tags.

35
00:02:20.560 --> 00:02:23.020
Each tag should have dummy content.

36
00:02:26.180 --> 00:02:32.880
So far it's starting to look like HTML JS makes writing templates feel intuitive.

37
00:02:32.900 --> 00:02:35.340
However, there are some differences.

38
00:02:35.360 --> 00:02:39.510
Firstly, we're not allowed to return multiple root elements.

39
00:02:39.530 --> 00:02:42.750
Currently everything is wrapped with a div tag.

40
00:02:42.770 --> 00:02:47.060
What do you think will happen if we were to remove the surrounding div tag?

41
00:02:47.090 --> 00:02:48.500
Let's give it a try.

42
00:02:50.710 --> 00:02:54.700
After removing the div tag, the page will throw an error.

43
00:02:54.730 --> 00:03:00.220
It states the following G6 expressions must have one root element.

44
00:03:00.250 --> 00:03:04.160
As you can see, we must always have one root element.

45
00:03:04.180 --> 00:03:07.320
However, this restriction can cause issues.

46
00:03:07.330 --> 00:03:09.310
What if we don't need a div tag?

47
00:03:09.340 --> 00:03:15.540
Adding additional HTML to satisfy the compiler is not considered good practice.

48
00:03:15.550 --> 00:03:19.050
This practice can potentially break our CSS.

49
00:03:19.060 --> 00:03:23.980
Fortunately, React has a custom element to address this problem.

50
00:03:24.100 --> 00:03:26.920
There is a special element called a fragment.

51
00:03:26.920 --> 00:03:32.830
Fragments are elements that can surround multiple elements without introducing a new tag.

52
00:03:32.860 --> 00:03:35.620
Fragments are written as empty tags.

53
00:03:35.650 --> 00:03:38.830
Let's remove the div keyword from the tags.

54
00:03:40.930 --> 00:03:44.560
This syntax can look awkward, but it's completely valid.

55
00:03:44.730 --> 00:03:46.660
Gsx on the page.

56
00:03:46.660 --> 00:03:48.250
The error should go away.

57
00:03:48.280 --> 00:03:52.150
Let's inspect the elements to check out what has been returned.

58
00:03:54.450 --> 00:03:59.000
Under the elements panel, the fragment has been completely removed.

59
00:03:59.010 --> 00:04:03.560
The parent element is the div tag with the ID of root.

60
00:04:03.570 --> 00:04:07.550
By using fragments, we can remove clutter from our documents.

61
00:04:07.680 --> 00:04:10.260
There's one more feature worth mentioning.

62
00:04:10.260 --> 00:04:17.490
Classes are supported but with a different attributes on the H one tag add an attribute called class

63
00:04:17.490 --> 00:04:18.089
name.

64
00:04:18.089 --> 00:04:21.480
Its value will be a class called Orange.

65
00:04:23.640 --> 00:04:27.900
Keep in mind, we're writing Gsx inside a JavaScript file.

66
00:04:27.930 --> 00:04:30.810
We're still bound by the rules of JavaScript.

67
00:04:30.840 --> 00:04:34.560
JavaScript has a reserved keyword called class.

68
00:04:34.590 --> 00:04:39.990
It just so happens that HTML also has a reserved keyword called class.

69
00:04:40.020 --> 00:04:45.450
This commonality creates a conflict of interest since we're in a JavaScript file.

70
00:04:45.480 --> 00:04:47.220
JavaScript wins the battle.

71
00:04:47.250 --> 00:04:53.850
G6 has a different attribute for applying classes to an element called class name.

72
00:04:54.150 --> 00:05:00.330
If we were to use the class keyword JavaScript might assume we're trying to perform a different action.

73
00:05:00.360 --> 00:05:02.440
It would throw an error in our code.

74
00:05:02.460 --> 00:05:06.910
Let's try applying styles to the element by using this class.

75
00:05:06.930 --> 00:05:12.130
Inside the source directory there's a file called Style CSS.

76
00:05:12.150 --> 00:05:14.580
Let's add a class called Orange.

77
00:05:14.610 --> 00:05:18.390
It'll change the text color of an element to orange.

78
00:05:20.480 --> 00:05:22.160
We're not finished yet.

79
00:05:22.190 --> 00:05:26.280
This file does not get automatically loaded into our documents.

80
00:05:26.300 --> 00:05:28.100
We have two options.

81
00:05:28.100 --> 00:05:32.240
We can link it from the HTML file or we can import it.

82
00:05:32.270 --> 00:05:35.440
Strangely, importing might be the best option.

83
00:05:35.450 --> 00:05:39.380
Webpack is not limited to processing JavaScript files.

84
00:05:39.380 --> 00:05:42.110
It can process CSS files too.

85
00:05:42.260 --> 00:05:50.360
By importing our JavaScript file, Webpack will be able to process our CSS files back in the index js

86
00:05:50.360 --> 00:05:51.000
file.

87
00:05:51.020 --> 00:05:54.770
Import the CSS file with the import statements.

88
00:05:56.980 --> 00:06:00.470
This behavior might seem strange by default.

89
00:06:00.490 --> 00:06:04.090
JavaScript does not support CSS imports.

90
00:06:04.090 --> 00:06:07.000
This is another benefit of using web pack.

91
00:06:07.000 --> 00:06:11.740
New features are added to the language that can make development easier.

92
00:06:11.830 --> 00:06:17.320
If we look at the page, the text color for the heading has changed to orange.

93
00:06:17.320 --> 00:06:21.430
For the rest of this course we are going to stick with Gsx.

94
00:06:21.430 --> 00:06:25.330
It's easier to read than the create element function.

95
00:06:25.330 --> 00:06:27.370
Hopefully you'll agree with me.

96
00:06:27.370 --> 00:06:30.520
Let's continue our studies in the next lecture.

