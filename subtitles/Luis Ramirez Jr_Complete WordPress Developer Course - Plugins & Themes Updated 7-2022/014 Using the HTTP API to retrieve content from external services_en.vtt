WEBVTT
1
00:00:07.750 --> 00:00:14.020
In some cases, you will need to make requests to third party sources, for example, you may need to

2
00:00:14.020 --> 00:00:16.140
grab a Twitter feed or grab an image.

3
00:00:16.420 --> 00:00:22.780
There are various methods out there for retrieving content from external sources with WordPress isn't

4
00:00:22.780 --> 00:00:23.660
very biased.

5
00:00:23.880 --> 00:00:30.820
Instead, it provides an API that tries all methods out there so that you aren't limited to just one.

6
00:00:31.330 --> 00:00:36.910
The API can make any request you want, whether it's a post or get request.

7
00:00:37.450 --> 00:00:42.160
In the resource section of this lecture, I provide a link to learn more about this API.

8
00:00:42.610 --> 00:00:44.740
Here's what WordPress has to say about it.

9
00:00:45.340 --> 00:00:51.240
Within HP, there are many possible ways to send in a request for simplicity.

10
00:00:51.430 --> 00:00:56.010
These methods will be referred to collectively as transports for this article.

11
00:00:56.440 --> 00:01:03.340
The purpose for the API is to support as many of them as possible with an API that is simple and standard

12
00:01:03.340 --> 00:01:04.750
for each of the transports.

13
00:01:05.440 --> 00:01:11.050
The problem is that Web hosting servers support different transports and some might support none.

14
00:01:11.560 --> 00:01:17.260
The solution then is to support as many as possible to allow for those who have hosts that disable one

15
00:01:17.260 --> 00:01:23.380
or two to still access the web through one of the other transports that might still be enabled or supported.

16
00:01:24.440 --> 00:01:31.190
By using this API, we save ourselves the headaches of determining what method to use to make HGP requests.

17
00:01:31.670 --> 00:01:33.810
Let's try using this API now.

18
00:01:34.250 --> 00:01:36.760
Right now I'm looking at one of the recipes.

19
00:01:37.160 --> 00:01:39.980
Do you remember how we created this piece of info?

20
00:01:40.220 --> 00:01:46.850
If you can recall, we created a template separate from our code and used the file get contents function

21
00:01:46.850 --> 00:01:47.860
to get this info.

22
00:01:48.230 --> 00:01:52.670
However, a lot of hosts out there disable this function and it's extension.

23
00:01:53.330 --> 00:01:58.330
Relying on this one method to retrieve content will eventually cause us to run into errors.

24
00:01:58.670 --> 00:02:02.360
We should let WordPress handle the best method for retrieving content.

25
00:02:03.080 --> 00:02:10.880
We're going to update the Filter Dasch content file so that it can use the WordPress HDP API to retrieve

26
00:02:10.880 --> 00:02:12.130
and process the template.

27
00:02:12.830 --> 00:02:18.770
If you scroll down this page, you'll find a list of helper functions for using the API.

28
00:02:19.220 --> 00:02:22.790
The WP remote get function is what we want to use.

29
00:02:23.060 --> 00:02:26.870
Let's use this function now inside the filter function.

30
00:02:26.990 --> 00:02:30.770
Define a variable named Recipe TPO RSS.

31
00:02:31.040 --> 00:02:35.750
Its value will be set to the value returned by the WP Ermold get function.

32
00:02:38.530 --> 00:02:40.520
This function has two parameters.

33
00:02:40.780 --> 00:02:47.590
First is the URL, I'm going to use the plugins Eurail function to retrieve the URL to the plugins folder.

34
00:02:49.940 --> 00:02:54.810
Keep in mind that this must be an age, you, Earl, and not a system path.

35
00:02:55.190 --> 00:02:58.780
Also note that the U.S. doesn't have to be from our own site.

36
00:02:59.180 --> 00:03:02.450
You can make requests to your URLs outside of the site.

37
00:03:02.450 --> 00:03:08.870
The plugin is installed on the second parameter we can set is additional headers or info about this

38
00:03:08.870 --> 00:03:09.500
request.

39
00:03:09.920 --> 00:03:13.610
This is optional and we don't need this kind of power at the moment.

40
00:03:13.610 --> 00:03:16.730
So we'll let WordPress decide the default settings.

41
00:03:17.360 --> 00:03:22.310
This function will end up returning in a rate that will contain various pieces of information about

42
00:03:22.310 --> 00:03:23.550
the response received.

43
00:03:23.960 --> 00:03:30.530
Fortunately, WordPress also provides a set of utility functions to help process and grab the information

44
00:03:30.530 --> 00:03:31.220
we care about.

45
00:03:32.030 --> 00:03:37.060
Replace the contents function with a function called WP Remote Retrieve Body.

46
00:03:37.610 --> 00:03:42.740
This function will pass a response object and return the contents of the response.

47
00:03:43.130 --> 00:03:46.250
So we replace these values with the response like some.

48
00:03:50.070 --> 00:03:56.220
Let's refresh the page, we should receive no errors, our content should still be displaying, along

49
00:03:56.220 --> 00:03:58.120
with the recipe, template and its data.

50
00:03:58.590 --> 00:04:00.930
That's it for the HTP API.

51
00:04:01.350 --> 00:04:08.220
To recap what's going on, BWP remote get function will make a request to a euro and return the results

52
00:04:08.220 --> 00:04:09.140
of that request.

53
00:04:09.570 --> 00:04:15.860
The WP remote retrieve body will pass that response and return only the contents of that response.

54
00:04:16.260 --> 00:04:18.220
In our case, it would be the template.

55
00:04:19.019 --> 00:04:23.900
Feel free to read up on the documentation to learn more about it as an exercise.

56
00:04:23.910 --> 00:04:26.280
Try and doing the same thing to our recipe.

57
00:04:26.280 --> 00:04:27.390
Creator shortcode.

58
00:04:27.690 --> 00:04:31.410
If you can remember this shortcode also uses the file.

59
00:04:31.410 --> 00:04:32.760
Get contents function.

60
00:04:33.250 --> 00:04:36.870
Replace that using the WordPress HTP API.

