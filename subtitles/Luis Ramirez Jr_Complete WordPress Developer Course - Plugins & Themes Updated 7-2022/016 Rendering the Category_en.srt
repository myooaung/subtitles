1
00:00:00,090 --> 00:00:03,890
In this lecture, we are going to finish the page header block.

2
00:00:03,900 --> 00:00:05,970
The edit function is finished.

3
00:00:06,000 --> 00:00:10,560
All that's left is to render the block on the front end with server side rendering.

4
00:00:10,560 --> 00:00:14,400
We have already defined a function for handling this process.

5
00:00:14,400 --> 00:00:18,420
In your editor, open the page header php file.

6
00:00:20,490 --> 00:00:24,910
From this file, we are going to return the templates to get started.

7
00:00:24,930 --> 00:00:28,830
We are going to add output buffering at the top of the function.

8
00:00:28,830 --> 00:00:33,420
Let's run the OB start function to initialize the output buffer.

9
00:00:35,520 --> 00:00:39,540
Next, let's add closing and opening FB tags.

10
00:00:41,640 --> 00:00:44,610
Inside these tags, we will add the templates.

11
00:00:44,610 --> 00:00:48,390
The template can be grabbed from the index JS file.

12
00:00:48,420 --> 00:00:50,970
Let's open this file with our editors.

13
00:00:53,090 --> 00:00:57,260
We are going to grab the div tag with the block props object.

14
00:00:57,260 --> 00:01:02,210
The fragment element and inspector controls component can be ignored.

15
00:01:04,379 --> 00:01:09,930
Next paste this template into the render function for the page header block.

16
00:01:12,140 --> 00:01:19,400
After pacing in the templates, we can start closing the buffer after the opening php tag create a variable

17
00:01:19,400 --> 00:01:20,720
called output.

18
00:01:20,750 --> 00:01:24,530
Its value will be the object contents function.

19
00:01:26,740 --> 00:01:32,290
Next, let's call the OB and clean function to clear the buffer for other blocks.

20
00:01:34,400 --> 00:01:37,650
Ali said before, this step is very important.

21
00:01:37,670 --> 00:01:42,730
If we don't call this function, our block may contain HTML from other blocks.

22
00:01:42,740 --> 00:01:47,480
The output buffer should only contain HTML from the current function.

23
00:01:47,480 --> 00:01:50,960
Lastly, let's return the output variable.

24
00:01:53,170 --> 00:01:55,880
The basic structure of the function is ready.

25
00:01:55,900 --> 00:02:01,290
The final steps are to update the template with the appropriate classes and attributes.

26
00:02:01,300 --> 00:02:05,350
First, we're going to need the attributes inside the functions.

27
00:02:05,350 --> 00:02:06,340
Argument list.

28
00:02:06,340 --> 00:02:08,680
Grab the attributes argument.

29
00:02:10,810 --> 00:02:16,180
Next, let's extract the content attribute into a variable called heading.

30
00:02:16,180 --> 00:02:22,450
Before setting the variable, we should escape the content with a function called escape HTML.

31
00:02:24,330 --> 00:02:29,180
The escape HTML function is another function for escaping data.

32
00:02:29,190 --> 00:02:34,260
If we're inserting data into HTML tags, we should escape the content.

33
00:02:34,290 --> 00:02:38,160
WordPress will strip HTML tags from the value.

34
00:02:38,190 --> 00:02:44,610
This is to prevent the content from breaking our HTML document or inserting malicious scripts.

35
00:02:44,640 --> 00:02:47,520
However, we're not finished with the header.

36
00:02:47,550 --> 00:02:50,440
The client may want to render the category.

37
00:02:50,460 --> 00:02:56,430
If that's the case, we should replace this variables value with the category's name.

38
00:02:56,460 --> 00:03:00,460
Previously we performed this check from within the templates.

39
00:03:00,480 --> 00:03:04,020
I'm not a huge fan of inserting logic into a template.

40
00:03:04,050 --> 00:03:08,130
Unfortunately, React requires a certain style of programming.

41
00:03:08,160 --> 00:03:10,300
Luckily PHP is different.

42
00:03:10,320 --> 00:03:13,440
We can outsource the logic outside of the templates.

43
00:03:13,470 --> 00:03:20,010
After the variable definition, add a conditional statement with the attributes show category variable

44
00:03:20,010 --> 00:03:21,180
as the condition.

45
00:03:23,360 --> 00:03:27,860
Page, we will handle converting this attribute into a boolean value.

46
00:03:27,890 --> 00:03:34,220
If this attribute is set to true, we should display the category inside the conditional block.

47
00:03:34,220 --> 00:03:38,900
Let's set the header variable to the get the archive title function.

48
00:03:41,180 --> 00:03:46,440
The variables should only be updated if the show category attribute is true.

49
00:03:46,490 --> 00:03:51,590
We're using the get the archive title function to get the category of a page.

50
00:03:51,620 --> 00:03:55,260
WordPress will handle grabbing the appropriate category.

51
00:03:55,280 --> 00:03:58,840
As you might suspect, this function is a template tag.

52
00:03:58,850 --> 00:04:04,700
If you're interested in outputting the category directly in the template, you can use this function's

53
00:04:04,700 --> 00:04:09,350
counterpart, which is called the archive title and attributes.

54
00:04:09,350 --> 00:04:12,770
Already the last step is to update the templates.

55
00:04:12,770 --> 00:04:17,810
First, we are going to replace the block props object with the class attribute.

56
00:04:17,810 --> 00:04:23,120
The only class we're adding is the WP BLOCK YouTube plus page header class.

57
00:04:26,840 --> 00:04:33,670
Next, let's completely replace the expression inside the div tag with the inner page header class.

58
00:04:33,680 --> 00:04:37,680
This expression should be replaced with a pair of PHP tags.

59
00:04:37,700 --> 00:04:40,040
We're going to echo the heading variable.

60
00:04:42,310 --> 00:04:43,690
Our block is complete.

61
00:04:43,720 --> 00:04:46,670
Time to start applying this block to our templates.

62
00:04:46,690 --> 00:04:50,230
Inside your browser, navigate to the full site editor.

63
00:04:50,230 --> 00:04:53,170
We are going to modify the category templates.

64
00:04:55,160 --> 00:05:02,230
Previously we inserted the header into this template as an HTML block similar to the search form block.

65
00:05:02,240 --> 00:05:06,000
We are going to replace the HTML block with our custom block.

66
00:05:06,020 --> 00:05:09,500
The header can be found below the header template part.

67
00:05:09,530 --> 00:05:13,310
Let's completely remove the HTML block from the templates.

68
00:05:15,430 --> 00:05:18,580
Next, let's insert the page header block.

69
00:05:22,740 --> 00:05:24,150
For our first test.

70
00:05:24,150 --> 00:05:30,390
Let's try and checking if the category displays on the page by enabling the show category option.

71
00:05:30,420 --> 00:05:34,020
After enabling this option, we can save the templates.

72
00:05:36,090 --> 00:05:39,120
Let's try viewing a category on the front end.

73
00:05:40,140 --> 00:05:44,660
If we look below the header of the page, the category appears on the page.

74
00:05:44,670 --> 00:05:48,930
I can switch to a different category to check if the header changes.

75
00:05:50,990 --> 00:05:53,360
It changes, but it's not perfect.

76
00:05:53,390 --> 00:05:56,450
At the top of the page, we are receiving a warning.

77
00:05:56,480 --> 00:06:01,730
The warning says the following undefined index content from page header.

78
00:06:02,390 --> 00:06:06,890
PHP on line for the error tells us everything we need to know.

79
00:06:06,890 --> 00:06:12,560
If you ever receive an error that says undefined index, the error refers to an array.

80
00:06:12,590 --> 00:06:17,390
An undefined index means that an index does not exist within an array.

81
00:06:17,420 --> 00:06:21,650
This can be an index with a name or number according to the error.

82
00:06:21,680 --> 00:06:25,100
The index that doesn't exist is called content.

83
00:06:27,330 --> 00:06:30,950
The error is coming from the first line in our render function.

84
00:06:30,960 --> 00:06:33,540
It is the heading variable definition.

85
00:06:33,570 --> 00:06:37,140
On this line we are grabbing the content attributes.

86
00:06:37,170 --> 00:06:42,870
However, if you were to view your blocks comment, the content attribute may not be missing.

87
00:06:42,870 --> 00:06:48,270
If this attribute exists in the comment, chances are you added contents to the block.

88
00:06:48,300 --> 00:06:52,450
If you didn't write anything, the content attribute might be missing.

89
00:06:52,470 --> 00:06:58,080
The reason we're receiving an error is because WordPress couldn't extract the content attribute from

90
00:06:58,080 --> 00:06:58,820
our block.

91
00:06:58,830 --> 00:07:02,820
Therefore, we're trying to access an attribute that doesn't exist.

92
00:07:04,970 --> 00:07:07,510
This behavior is critical to understand.

93
00:07:07,520 --> 00:07:11,870
WordPress does not automatically assign values to your attributes.

94
00:07:11,870 --> 00:07:15,050
The client is responsible for providing a value.

95
00:07:15,080 --> 00:07:20,450
If an attribute does not have a value during a save, the attribute is skipped.

96
00:07:20,480 --> 00:07:25,310
We can avoid this problem by always assigning a default value in your editor.

97
00:07:25,340 --> 00:07:27,680
Open the block JSON file.

98
00:07:29,810 --> 00:07:36,020
Inside the content attribute and the default property with an initial value of an empty shrink.

99
00:07:38,300 --> 00:07:44,370
Even though the default value is an empty string, WordPress will add the attribute to the block anyway.

100
00:07:44,390 --> 00:07:48,850
After making those changes, let's head back to the full site editor.

101
00:07:48,860 --> 00:07:54,950
I'm going to quickly refresh the page and re add the page header block in the same location.

102
00:07:54,950 --> 00:07:56,600
The settings will be the same.

103
00:08:04,660 --> 00:08:07,690
Next, I'll refresh the page in the browser.

104
00:08:10,850 --> 00:08:12,410
The errors have gone away.

105
00:08:12,440 --> 00:08:14,480
We've successfully added the block.

106
00:08:14,510 --> 00:08:17,390
There's one more thing I want to do at the moment.

107
00:08:17,390 --> 00:08:19,810
The template is stored in the database.

108
00:08:19,820 --> 00:08:23,840
The page header block should be a part of the category template.

109
00:08:23,870 --> 00:08:27,800
Let's head back to the full site editor from the list of blocks.

110
00:08:27,800 --> 00:08:30,110
Copy all the blocks to your clipboard.

111
00:08:32,260 --> 00:08:35,710
Next, open the category template from our theme.

112
00:08:37,919 --> 00:08:41,549
Replace the existing contents with the new set of blocks.

113
00:08:43,600 --> 00:08:48,250
Lastly, let's refresh the template in the browser at the top of the page.

114
00:08:48,250 --> 00:08:50,860
Clearly customizations for the templates.

115
00:08:56,460 --> 00:09:02,160
The page header block should now appear as the default block instead of the HTML block.

116
00:09:02,190 --> 00:09:02,800
Great.

117
00:09:02,820 --> 00:09:05,270
We're finished with the page header block.

118
00:09:05,280 --> 00:09:11,160
Let's discuss some final topics in the next set of lectures related to server side rendering.

