1
00:00:00,150 --> 00:00:03,580
In this lecture, we are going to add a custom endpoints.

2
00:00:03,600 --> 00:00:08,430
At the moment, WordPress does not offer an endpoint for registering a new user.

3
00:00:08,430 --> 00:00:12,990
We must create a custom endpoint for handling user registration.

4
00:00:12,990 --> 00:00:16,620
New endpoints can be created with a single function.

5
00:00:16,620 --> 00:00:19,140
Let's get started in your editor.

6
00:00:19,140 --> 00:00:22,290
Open the indexed PHP plugin file.

7
00:00:24,430 --> 00:00:25,900
Under the hook section.

8
00:00:25,900 --> 00:00:28,180
Call the add action function.

9
00:00:30,300 --> 00:00:35,490
We are going to register a function for a hook called rest API in it.

10
00:00:37,690 --> 00:00:43,810
The rest API it hook is triggered when a request is made to WordPress as rest API.

11
00:00:43,840 --> 00:00:49,280
At this point we can register a new endpoint before WordPress sends a response.

12
00:00:49,300 --> 00:00:53,680
Let's set the function name to up rest API in its.

13
00:00:55,920 --> 00:01:02,490
Afterward, let's create a file to contain the function definition inside the included directory.

14
00:01:02,520 --> 00:01:05,370
Create a folder called Rest API.

15
00:01:07,530 --> 00:01:13,870
We are going to be defining a few endpoints, creating a directory dedicated to the rest API.

16
00:01:13,890 --> 00:01:17,880
We'll keep our code base organized inside this folder.

17
00:01:17,910 --> 00:01:21,000
Create a file called in its PHP.

18
00:01:23,390 --> 00:01:27,020
Define the up rest api and it function.

19
00:01:29,170 --> 00:01:31,690
The file does not need to be included.

20
00:01:31,720 --> 00:01:34,390
It's already included with the glob tool.

21
00:01:34,420 --> 00:01:37,720
The last step is to define a new endpoint.

22
00:01:37,720 --> 00:01:44,560
In the resource section of this lecture, I provide a link to a function called Register Rest Routes.

23
00:01:46,750 --> 00:01:50,860
This function will register a new route with the rest API.

24
00:01:50,890 --> 00:01:56,950
According to the description, we should not call this function before the rest API init hook.

25
00:01:56,980 --> 00:02:00,470
Luckily we're using this hook for registering our routes.

26
00:02:00,490 --> 00:02:02,120
This shouldn't be an issue.

27
00:02:02,140 --> 00:02:04,840
Let's scroll to the parameters section.

28
00:02:04,960 --> 00:02:09,490
According to the documentation, we must provide a namespace end arounds.

29
00:02:09,520 --> 00:02:11,670
Let's try using this function.

30
00:02:11,680 --> 00:02:13,870
Head back to the PHP file.

31
00:02:13,870 --> 00:02:15,280
Inside our function.

32
00:02:15,280 --> 00:02:18,880
Let's call the register rest root function.

33
00:02:21,080 --> 00:02:24,630
The first argument is the namespace, as we've learned.

34
00:02:24,650 --> 00:02:31,040
Name spacing is a technique for preventing conflicts with other functions, variables or classes.

35
00:02:31,040 --> 00:02:34,820
The up rest API init function is an example.

36
00:02:34,820 --> 00:02:40,010
We are pre fixing our functions with up the rest API is no difference.

37
00:02:40,040 --> 00:02:45,980
Other plugins may introduce new endpoints to prevent conflicts with other endpoints.

38
00:02:45,980 --> 00:02:49,490
It's recommended to add a namespace to our endpoints.

39
00:02:49,490 --> 00:02:55,340
For example, WordPress reserves, the WP slash v two namespace.

40
00:02:55,340 --> 00:03:00,140
The format for a namespace is the name of our plugin followed by the version.

41
00:03:00,320 --> 00:03:03,980
Earlier I mentioned that rest APIs are popular.

42
00:03:03,980 --> 00:03:06,920
It's common for rest APIs to evolve.

43
00:03:06,920 --> 00:03:08,330
Similar to plugins.

44
00:03:08,330 --> 00:03:13,070
We should add a version to help other developers identify the latest version.

45
00:03:13,070 --> 00:03:14,570
This is a fresh plugin.

46
00:03:14,570 --> 00:03:16,850
It's fair to say that we're on v one.

47
00:03:16,850 --> 00:03:20,960
Let's set the namespace argument to up slash v one.

48
00:03:23,070 --> 00:03:25,440
Next, we must add the endpoint.

49
00:03:25,440 --> 00:03:28,680
Let's set the endpoint to slash sign up.

50
00:03:31,150 --> 00:03:33,930
These values will register a new endpoint.

51
00:03:33,940 --> 00:03:38,260
For example, let's say our site was hosted on a domain called example.

52
00:03:39,190 --> 00:03:49,090
The full URL would be the following example dot com slash wp json slash up slash v one slash sign up.

53
00:03:51,300 --> 00:03:58,780
The WP JSON segment must be included with the path it applies to core and custom endpoints.

54
00:03:58,800 --> 00:04:03,660
After registering a root, we must provide a function for handling the response.

55
00:04:03,690 --> 00:04:08,430
We can configure the root by passing in an array to the third argument.

56
00:04:10,670 --> 00:04:11,960
Inside this array.

57
00:04:11,960 --> 00:04:14,870
Let's set a key called Methods to Post.

58
00:04:16,930 --> 00:04:20,329
We can configure the HTTP method with this key.

59
00:04:20,350 --> 00:04:23,440
The route we've created we'll register a new user.

60
00:04:23,440 --> 00:04:27,090
Hence we are creating a new resource on our site.

61
00:04:27,100 --> 00:04:31,860
The post method is the most appropriate method for creating resources.

62
00:04:31,870 --> 00:04:34,930
Next, let's add a key called callback.

63
00:04:37,020 --> 00:04:42,120
This key will contain the name of function to run when the endpoint is visited.

64
00:04:42,150 --> 00:04:46,920
We are going to call our function up rest API sign up handler.

65
00:04:49,070 --> 00:04:53,060
There's one more key that we should add called permission callback.

66
00:04:55,090 --> 00:04:57,220
Security is very important.

67
00:04:57,250 --> 00:05:03,300
Custom endpoints must have this key before WordPress runs the callback function.

68
00:05:03,310 --> 00:05:07,600
It'll check if the user has proper permissions for visiting this route.

69
00:05:07,630 --> 00:05:10,470
The value for this key must be a function.

70
00:05:10,480 --> 00:05:14,500
The function must return true to allow access to the root.

71
00:05:14,530 --> 00:05:21,430
We can deny access by returning false for this route or going to allow anyone to visit it.

72
00:05:21,460 --> 00:05:24,250
Let's use a special function called underscore.

73
00:05:24,250 --> 00:05:25,600
Underscore return.

74
00:05:25,600 --> 00:05:26,290
Underscore.

75
00:05:26,320 --> 00:05:27,010
True.

76
00:05:29,220 --> 00:05:31,950
This function is defined by WordPress.

77
00:05:31,950 --> 00:05:36,510
In the resource section of this lecture, I provide a link to this function.

78
00:05:38,770 --> 00:05:42,400
As the name implies, this function will return true.

79
00:05:42,430 --> 00:05:47,540
If we scroll to the source section, we can take a look at the body of the function.

80
00:05:47,560 --> 00:05:50,140
It looks like a weird function to define.

81
00:05:50,140 --> 00:05:53,710
However, we're allowing anyone to register on accounts.

82
00:05:53,710 --> 00:05:55,420
Our function should return.

83
00:05:55,420 --> 00:06:00,520
True, rather than being redundant, we can leverage word press functions.

84
00:06:00,520 --> 00:06:02,050
It's quicker and easier.

85
00:06:02,050 --> 00:06:04,780
The round has been successfully created.

86
00:06:04,780 --> 00:06:08,590
Let's try testing it with Postman in the Postman app.

87
00:06:08,590 --> 00:06:11,170
Navigate to the workspace for our site.

88
00:06:11,170 --> 00:06:13,870
The previous session should have been saved.

89
00:06:13,870 --> 00:06:19,360
If not, you can re-enter the URL to our site inside the address bar.

90
00:06:19,360 --> 00:06:22,840
We are going to replace the path with the following path.

91
00:06:22,840 --> 00:06:28,600
WP json slash up slash v one slash sign up.

92
00:06:30,880 --> 00:06:34,630
The new route will start with the namespace afterword.

93
00:06:34,630 --> 00:06:37,330
The end point is appended to the namespace.

94
00:06:37,330 --> 00:06:39,850
Let's update the method to post.

95
00:06:42,080 --> 00:06:44,690
Inside the query parameter section.

96
00:06:44,690 --> 00:06:46,400
Remove any parameters.

97
00:06:46,400 --> 00:06:49,520
After doing so, let's send the request.

98
00:06:51,680 --> 00:06:55,550
After a few moments, WordPress should receive the request.

99
00:06:55,580 --> 00:06:59,450
The response from the server will be a 500 error code.

100
00:06:59,480 --> 00:07:05,120
A 500 error code is thrown when the server couldn't properly process the request.

101
00:07:05,120 --> 00:07:11,180
Inside the responses body, a JSON object is returned with details of the error.

102
00:07:11,210 --> 00:07:13,460
Let's read the message property.

103
00:07:13,460 --> 00:07:15,800
The handler for the root is invalid.

104
00:07:16,250 --> 00:07:21,680
The problem stems from not defining the PHP function for handling the new endpoint.

105
00:07:21,710 --> 00:07:23,210
That's perfectly fine.

106
00:07:23,210 --> 00:07:27,440
As long as WordPress has identified our new routes, we're good to go.

107
00:07:27,440 --> 00:07:32,030
In the next lecture, let's define the function for handling the response.

