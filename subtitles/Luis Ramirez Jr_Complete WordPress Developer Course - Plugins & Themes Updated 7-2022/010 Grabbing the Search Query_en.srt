1
00:00:00,120 --> 00:00:05,310
In this lecture, we will finalize the search form block by adding dynamic data to the form.

2
00:00:05,310 --> 00:00:08,460
Let's examine the form in the browser above the input.

3
00:00:08,460 --> 00:00:10,050
We have static text.

4
00:00:10,050 --> 00:00:14,280
Inside this text, we should render the search term written by the user.

5
00:00:14,280 --> 00:00:16,650
This term should appear inside the input.

6
00:00:16,650 --> 00:00:17,160
Two.

7
00:00:17,160 --> 00:00:20,010
Lastly, the form should be fully functional.

8
00:00:20,010 --> 00:00:24,570
If a user submits our form, the page should refresh with the search results.

9
00:00:24,570 --> 00:00:29,730
Luckily, WordPress offers various functions to help us achieve the desired output.

10
00:00:29,730 --> 00:00:31,470
It's going to be a breeze.

11
00:00:31,470 --> 00:00:33,780
Let's get started in your editor.

12
00:00:33,810 --> 00:00:36,930
Open the search form php file.

13
00:00:39,020 --> 00:00:41,610
Let's start from the top and work our way down.

14
00:00:41,630 --> 00:00:45,300
First, let's update the H one tag from the templates.

15
00:00:45,320 --> 00:00:49,250
The word search should be replaced with PHP tags.

16
00:00:51,360 --> 00:00:54,330
Do not remove the colon character from the text.

17
00:00:54,360 --> 00:00:56,030
It'll act as a separator.

18
00:00:56,040 --> 00:00:59,640
Next, let's run a function called Underscore E.

19
00:01:01,820 --> 00:01:06,850
WordPress has dozens of functions for translating texts throughout this course.

20
00:01:06,860 --> 00:01:08,910
We are going to explore most of them.

21
00:01:08,930 --> 00:01:13,660
The first function we encountered was called the double underscore function.

22
00:01:13,670 --> 00:01:17,750
It's the most straightforward function available for translating texts.

23
00:01:17,750 --> 00:01:20,180
It'll return a translated string.

24
00:01:20,180 --> 00:01:25,370
The underscore e function will echo the translated text, not return it.

25
00:01:25,370 --> 00:01:28,340
However, there's one problem with this function.

26
00:01:28,340 --> 00:01:30,200
It will not escape the output.

27
00:01:30,200 --> 00:01:34,970
As mentioned in the previous lecture, we should attempt to escape output from our blocks.

28
00:01:34,970 --> 00:01:37,190
This includes translated strings.

29
00:01:37,190 --> 00:01:42,890
Fortunately, there's another function for escaping the output of a translated string called Escape

30
00:01:43,190 --> 00:01:43,700
html.

31
00:01:43,730 --> 00:01:44,240
E.

32
00:01:46,410 --> 00:01:51,860
The escape html e function will perform the task as the underscore e function.

33
00:01:51,870 --> 00:01:55,680
In addition, it'll strip HTML tags from the string.

34
00:01:55,710 --> 00:02:00,330
This can be a great way to prevent unsafe content from appearing on the page.

35
00:02:00,360 --> 00:02:04,910
The arguments for this function are the same as the double underscore function.

36
00:02:04,920 --> 00:02:08,370
Let's pass in the word search as the translation.

37
00:02:08,370 --> 00:02:11,910
The text domain should be set to Udemy plus.

38
00:02:14,140 --> 00:02:15,730
After translating the text.

39
00:02:15,730 --> 00:02:18,350
Let's move on to the other portion of the text.

40
00:02:18,370 --> 00:02:21,790
The search term should be added after the colon character.

41
00:02:21,820 --> 00:02:24,280
Let's add a pair of PHP tags.

42
00:02:26,390 --> 00:02:31,250
Inside these tags, we are going to run a function called the search query.

43
00:02:33,420 --> 00:02:36,750
The search query function is considered a template tag.

44
00:02:36,750 --> 00:02:42,630
In the resource section of this lecture, I provide a link to a complete list of template tags.

45
00:02:44,770 --> 00:02:49,390
A template tag refers to a function for rendering a template to the page.

46
00:02:49,390 --> 00:02:52,120
They're mainly utilized from within themes.

47
00:02:52,120 --> 00:02:56,170
However, it's perfectly safe to use them from within plugins.

48
00:02:56,200 --> 00:03:03,370
As I mentioned before, WordPress allows developers to access the same APIs from plugins and themes.

49
00:03:03,580 --> 00:03:07,310
Template tags will output various pieces of information.

50
00:03:07,330 --> 00:03:14,110
For example, we can output the title of a post, a list of categories or render comments.

51
00:03:16,290 --> 00:03:22,620
If you were to explore the various functions listed on the documentation page, you may notice a pattern.

52
00:03:22,650 --> 00:03:26,670
WordPress defines two functions for grabbing the same value.

53
00:03:26,700 --> 00:03:31,680
For example, there are two functions for grabbing the user's search query.

54
00:03:31,680 --> 00:03:37,650
We can use the the search query function or the get search query function.

55
00:03:37,680 --> 00:03:43,950
The first function will echo the search query, whereas the second function will return the search query.

56
00:03:43,980 --> 00:03:47,580
Aside from those differences, the value will be the same.

57
00:03:47,580 --> 00:03:52,040
Functions that begin with the word get will always return the value.

58
00:03:52,050 --> 00:03:57,810
If a function begins with the word the, you can expect the value to be echoed on the page.

59
00:03:57,990 --> 00:04:02,890
For example, there is another set of functions for grabbing the title of a post.

60
00:04:02,910 --> 00:04:08,070
The the title function will echo the post title in comparison.

61
00:04:08,100 --> 00:04:12,000
The get the title function will return the post title.

62
00:04:14,240 --> 00:04:16,600
Feel free to explore the other functions.

63
00:04:16,610 --> 00:04:19,360
For now, let's keep working on the form.

64
00:04:19,370 --> 00:04:21,579
The H one tag is complete.

65
00:04:21,589 --> 00:04:24,350
We can start working on the form element.

66
00:04:24,380 --> 00:04:27,200
The form must be submitted to the home page.

67
00:04:27,200 --> 00:04:31,400
The home page will be responsible for accepting the search submission.

68
00:04:31,400 --> 00:04:35,660
Let's look at a demonstration by using the search form in the header.

69
00:04:35,690 --> 00:04:40,370
Keep in mind this form comes bundled with the core of WordPress.

70
00:04:40,370 --> 00:04:42,770
I'm going to search for a random word.

71
00:04:45,030 --> 00:04:50,820
Looking closely at the URL, we can clearly see where the request is being sent to.

72
00:04:50,850 --> 00:04:55,320
By default, WordPress will send the request to the home page.

73
00:04:55,350 --> 00:04:58,800
It uses a query parameter for storing the search term.

74
00:04:58,830 --> 00:05:03,750
The name of the query parameter is called TSS, which is short for search.

75
00:05:03,810 --> 00:05:07,020
Our block should send the form data to this URL.

76
00:05:07,050 --> 00:05:08,970
Let's head back to the editor.

77
00:05:11,190 --> 00:05:12,600
On the form element.

78
00:05:12,600 --> 00:05:14,820
Add an attribute called action.

79
00:05:16,910 --> 00:05:21,670
The action attribute will tell the browser where to send the form data.

80
00:05:21,680 --> 00:05:25,730
Let's set the value to the following code in a php tag.

81
00:05:25,880 --> 00:05:29,840
Echo Escape URL home url forward slash.

82
00:05:31,850 --> 00:05:36,130
We are using two functions for producing a URL to the home page.

83
00:05:36,140 --> 00:05:41,180
The home URL function will return a URL relative to the home page.

84
00:05:41,210 --> 00:05:43,060
This function accepts a path.

85
00:05:43,070 --> 00:05:48,770
We're telling WordPress to return the root path by passing in a forward slash character.

86
00:05:48,800 --> 00:05:53,600
Next, we are passing on the value to the escape URL function.

87
00:05:53,630 --> 00:05:57,950
This function will strip characters that aren't related to a URL.

88
00:05:57,980 --> 00:06:00,590
Lastly, we're echoing the results.

89
00:06:00,620 --> 00:06:02,070
We're not finished yet.

90
00:06:02,090 --> 00:06:05,030
The data is being sent to the correct URL.

91
00:06:05,060 --> 00:06:10,230
However, the input element must be updated to add a query parameter.

92
00:06:10,250 --> 00:06:15,890
On the input element, add an attribute called name with a value of s.

93
00:06:17,990 --> 00:06:24,150
By adding the name attribute, the browser will store the value from the input in a query parameter.

94
00:06:24,170 --> 00:06:27,950
The name of the parameter can be configured through this attribute.

95
00:06:27,980 --> 00:06:31,070
The query parameter must be called SE.

96
00:06:31,100 --> 00:06:34,610
WordPress is expecting this query parameter name.

97
00:06:34,640 --> 00:06:38,180
Otherwise the search results page will have nothing.

98
00:06:38,210 --> 00:06:42,250
Afterward, let's pre fill the input with the search query.

99
00:06:42,260 --> 00:06:49,250
This way visitors will be able to modify their search queries, add the value attribute to the input

100
00:06:49,250 --> 00:06:49,970
element.

101
00:06:50,000 --> 00:06:54,470
The value for this attribute will be the the search query function.

102
00:06:56,530 --> 00:07:00,370
You may be wondering why aren't we escaping the value from this function?

103
00:07:00,400 --> 00:07:05,780
It's because WordPress already escapes the value in the resource section of this lecture.

104
00:07:05,800 --> 00:07:11,080
I provide a link to the the search query function documentation page.

105
00:07:13,270 --> 00:07:18,730
If we scroll to the source section, the official function definition can be found.

106
00:07:18,760 --> 00:07:25,280
Looking closely at the return statement, the value is being escaped with the escape attribute function.

107
00:07:25,300 --> 00:07:31,240
It's always good practice to read through the code of WordPress to verify the behavior of a function.

108
00:07:31,240 --> 00:07:33,130
Let's head back to the editor.

109
00:07:35,370 --> 00:07:41,360
There's one last step and the placeholder attribute and the inner text of the button element.

110
00:07:41,370 --> 00:07:43,660
We are outputting the word search.

111
00:07:43,680 --> 00:07:47,440
This text should be replaced with a translation function.

112
00:07:47,460 --> 00:07:50,270
Luckily, we've already prepared the translation.

113
00:07:50,280 --> 00:07:54,900
Let's copy and paste the translated text into these two locations.

114
00:07:57,030 --> 00:07:58,250
Our block is finished.

115
00:07:58,260 --> 00:08:01,140
However, we can't test our block yet.

116
00:08:01,170 --> 00:08:04,250
The template needs to be updated to use this block.

117
00:08:04,260 --> 00:08:07,920
Let's start adding the block to the template in the next lecture.

