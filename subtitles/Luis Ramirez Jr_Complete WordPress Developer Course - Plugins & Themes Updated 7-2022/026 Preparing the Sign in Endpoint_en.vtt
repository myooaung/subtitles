WEBVTT
1
00:00:00.090 --> 00:00:04.460
In this lecture we are going to prepare the endpoint for the login form.

2
00:00:04.470 --> 00:00:09.660
This time we're going to start with the PHP function for handling the request.

3
00:00:09.660 --> 00:00:14.820
After the function is ready, we'll prepare the form on the front end to get started.

4
00:00:14.820 --> 00:00:17.730
Open the init php file.

5
00:00:19.930 --> 00:00:24.790
Inside this file, we registered a new route for user registration.

6
00:00:24.820 --> 00:00:28.340
The process is going to be the same for the login form.

7
00:00:28.360 --> 00:00:33.370
Let's create a new route by calling the register rest route function.

8
00:00:35.610 --> 00:00:38.930
The first argument of this function is the namespace.

9
00:00:38.940 --> 00:00:42.600
Let's set the namespace to up slash v one.

10
00:00:44.810 --> 00:00:47.600
We're using the same namespace as before.

11
00:00:47.630 --> 00:00:53.990
It's considered good practice to use a consistent namespace for our routes as long as they're related

12
00:00:53.990 --> 00:00:54.960
to one another.

13
00:00:54.980 --> 00:00:57.570
It's perfectly fine to share a namespace.

14
00:00:57.590 --> 00:01:01.000
Next, let's pass on the path for this route.

15
00:01:01.010 --> 00:01:04.670
The name of the route will be called Slash sign in.

16
00:01:06.870 --> 00:01:07.680
Afterward.

17
00:01:07.680 --> 00:01:10.610
Let's pass in an array for configuring the routes.

18
00:01:10.620 --> 00:01:14.210
First, we should limit the route to post requests.

19
00:01:14.220 --> 00:01:17.100
Let's set the methods key to post.

20
00:01:19.130 --> 00:01:24.750
Next set the callback key to the following value up rest API.

21
00:01:24.770 --> 00:01:26.300
Sign in handler.

22
00:01:28.360 --> 00:01:33.580
Lastly, set the permission callback key to the return true function.

23
00:01:35.730 --> 00:01:40.920
After adding these three keys, we can define the function for handling the request.

24
00:01:40.950 --> 00:01:44.130
Create a file called sign in PHP.

25
00:01:46.360 --> 00:01:47.770
Inside this file.

26
00:01:47.770 --> 00:01:51.730
Define the up rest API sign in handler function.

27
00:01:53.760 --> 00:01:55.330
So far so good.

28
00:01:55.350 --> 00:01:57.960
The next step is to handle the response.

29
00:01:57.960 --> 00:02:02.220
Inside this function, let's create a variable called response.

30
00:02:02.220 --> 00:02:05.160
The value for this variable will be an array.

31
00:02:07.390 --> 00:02:10.479
We're going to be using the same practice as before.

32
00:02:10.509 --> 00:02:13.930
The array should contain a key called status.

33
00:02:13.930 --> 00:02:16.390
The value for this key will be one.

34
00:02:18.700 --> 00:02:22.420
If the response fails, we will leave the status as one.

35
00:02:22.450 --> 00:02:27.500
Otherwise, the status should be updated to two for a successful response.

36
00:02:27.520 --> 00:02:30.710
Next, let's begin invalidating the request.

37
00:02:30.730 --> 00:02:36.940
If the visitor fails to provide a username or password, we should not authenticate them into the system.

38
00:02:36.940 --> 00:02:40.930
Let's update the function to accept the request arguments.

39
00:02:43.100 --> 00:02:43.970
Afterward.

40
00:02:43.970 --> 00:02:50.930
Let's grab the data received by the request below the response variable to find another variable called

41
00:02:50.930 --> 00:02:51.950
parameters.

42
00:02:51.950 --> 00:02:57.560
The value for this variable will be the request gets json params function.

43
00:02:59.800 --> 00:03:04.900
The against json params function will extract data from the body of the request.

44
00:03:04.930 --> 00:03:11.800
The final step is to validate the parameters, create a conditional statement that returns the response

45
00:03:11.800 --> 00:03:12.610
variable.

46
00:03:14.800 --> 00:03:17.440
We're going to create three conditions.

47
00:03:17.470 --> 00:03:22.540
The first condition will be the is set function with the not operator.

48
00:03:24.820 --> 00:03:29.480
The first condition will check the parameters from the body of the request.

49
00:03:29.500 --> 00:03:36.580
Inside this function pass in the params user log in and params password variables.

50
00:03:38.660 --> 00:03:42.650
Next, let's add the condition with the ore operator.

51
00:03:42.680 --> 00:03:48.320
The second condition will be the empty function with the params user log and variable.

52
00:03:50.460 --> 00:03:54.560
Lastly, let's add the owner operator one more time.

53
00:03:54.570 --> 00:03:57.630
The last condition will be the empty function again.

54
00:03:57.630 --> 00:04:02.040
This time we're going to check the params password variable.

55
00:04:04.290 --> 00:04:08.400
If any of these conditions are true, the form has invalid data.

56
00:04:08.400 --> 00:04:10.690
We should not authenticate the user.

57
00:04:10.710 --> 00:04:12.890
Let's assume the values are valid.

58
00:04:12.900 --> 00:04:17.490
We can proceed to update the status key of the response variable.

59
00:04:17.519 --> 00:04:20.459
The variable should be updated to two.

60
00:04:22.600 --> 00:04:25.540
Lastly, let's return the response.

61
00:04:27.650 --> 00:04:29.530
I know I flew by the solution.

62
00:04:29.540 --> 00:04:31.450
Most of this isn't new to us.

63
00:04:31.460 --> 00:04:34.770
These are steps we've covered in the previous lecture.

64
00:04:34.790 --> 00:04:38.490
This was an opportunity to practice creating an endpoint.

65
00:04:38.510 --> 00:04:41.600
As you can see, the process is mostly the same.

66
00:04:41.600 --> 00:04:43.850
Let's test our endpoint.

67
00:04:44.000 --> 00:04:46.070
Open the postman application.

68
00:04:48.240 --> 00:04:52.680
Throughout this course, we are going to be creating additional end points.

69
00:04:52.680 --> 00:04:57.630
Before we test our new endpoint, let's start organizing our endpoints.

70
00:04:57.630 --> 00:05:02.160
Postman has a feature for organizing URLs and to collections.

71
00:05:02.190 --> 00:05:06.180
A collection can be thought of as a folder for your URLs.

72
00:05:06.360 --> 00:05:10.890
Let's store our endpoints into a collection for authentication.

73
00:05:10.890 --> 00:05:13.980
On the sidebar, click on the folder icon.

74
00:05:13.980 --> 00:05:16.770
This will open the collection for a workspace.

75
00:05:16.800 --> 00:05:19.320
Next, let's add a new collection.

76
00:05:19.320 --> 00:05:22.500
Postman will open a new tab for the collection.

77
00:05:22.500 --> 00:05:26.520
We can edit the name of the collection by pressing the pencil icon.

78
00:05:26.520 --> 00:05:29.160
Let's set the name to authentication.

79
00:05:31.380 --> 00:05:35.430
Afterward switch to the other tab from a previous session.

80
00:05:35.430 --> 00:05:38.420
Postman will save the registration URL.

81
00:05:38.430 --> 00:05:44.130
We can click on the save button to add this URL to the authentication collection.

82
00:05:44.160 --> 00:05:46.350
The URL can be given a name.

83
00:05:46.350 --> 00:05:48.780
Let's set the name to register.

84
00:05:50.990 --> 00:05:52.400
After setting the name.

85
00:05:52.400 --> 00:05:54.020
Let's save the URL.

86
00:05:54.050 --> 00:05:58.700
The endpoint should appear in the collection by saving the URL.

87
00:05:58.730 --> 00:06:02.430
We can revisit the URL without typing the URL.

88
00:06:02.450 --> 00:06:06.740
On new sessions, it'll be easier to revisit endpoints.

89
00:06:06.770 --> 00:06:09.980
Next, let's add the endpoint for logging in.

90
00:06:10.020 --> 00:06:13.460
Add a new tab inside the URL input.

91
00:06:13.460 --> 00:06:20.570
Add the following url wp json slash up slash v one slash sign in.

92
00:06:22.720 --> 00:06:25.900
Next, let's change the method to post.

93
00:06:27.980 --> 00:06:28.600
Great.

94
00:06:28.610 --> 00:06:31.460
We can finally attempt to send the request.

95
00:06:33.530 --> 00:06:37.050
As expected, the response will reject the request.

96
00:06:37.070 --> 00:06:40.330
We haven't provided the user login or password.

97
00:06:40.340 --> 00:06:44.760
Let's add this information to the request by switching to the body tab.

98
00:06:44.780 --> 00:06:50.330
Under this tab, we need to change the body of the request by selecting the raw option.

99
00:06:50.450 --> 00:06:55.670
On the right side, we can specify the content type by setting it to JSON.

100
00:06:57.760 --> 00:07:03.140
Lastly, let's create an object with the user login and password properties.

101
00:07:03.160 --> 00:07:04.960
Their values can be random.

102
00:07:07.090 --> 00:07:09.700
Initiate the request one more time.

103
00:07:11.840 --> 00:07:14.480
This time, the request should go through.

104
00:07:14.510 --> 00:07:18.050
We can verify the response by checking the status key.

105
00:07:18.080 --> 00:07:21.320
The value of this key is to perfect.

106
00:07:21.320 --> 00:07:24.050
We've successfully created the endpoint.

107
00:07:24.050 --> 00:07:25.280
In the next lecture.

108
00:07:25.280 --> 00:07:27.560
Let's begin authenticating the user.

