1
00:00:00,150 --> 00:00:05,920
In this lecture, we are going to render a block with output buffers whenever possible.

2
00:00:05,939 --> 00:00:09,670
I prefer to write a HTML with syntax highlighting.

3
00:00:09,690 --> 00:00:14,670
I don't like writing HTML inside a string unless it's a single line of code.

4
00:00:14,700 --> 00:00:20,730
Unfortunately, that task will be difficult with our blocks render function in your editor.

5
00:00:20,760 --> 00:00:22,080
Open the search form.

6
00:00:22,680 --> 00:00:23,610
PHP file.

7
00:00:25,690 --> 00:00:26,980
Inside the string.

8
00:00:26,980 --> 00:00:29,260
I'm going to add a paragraph tag.

9
00:00:31,390 --> 00:00:37,080
As you can see, the paragraph element does not receive syntax highlighting from the editor.

10
00:00:37,090 --> 00:00:39,230
It's difficult to read our code.

11
00:00:39,250 --> 00:00:43,550
Unfortunately, WordPress expects us to return the template.

12
00:00:43,570 --> 00:00:46,090
This means we must return a string.

13
00:00:46,120 --> 00:00:51,400
Luckily PHP has a feature for grabbing the output called buffers.

14
00:00:52,860 --> 00:00:57,570
Output buffers are an interesting feature of PHP by default.

15
00:00:58,050 --> 00:01:03,550
PHP will send content directly to the browser as it processes your PHP code.

16
00:01:03,570 --> 00:01:06,990
It does not send the entire document all at once.

17
00:01:07,020 --> 00:01:11,280
If we approach an echo statement, the message would appear in the browser.

18
00:01:11,310 --> 00:01:18,090
However, if we have more code, the message may appear before the rest of the code has been processed.

19
00:01:18,120 --> 00:01:22,770
I like to use the analogy of viewing a large image on the browser.

20
00:01:22,800 --> 00:01:27,410
Typically, browsers don't wait for the entire image to be downloaded.

21
00:01:27,420 --> 00:01:30,990
Large images are displayed as they're being downloaded.

22
00:01:31,020 --> 00:01:34,920
As you can see from this example, the image is slowly coming in.

23
00:01:34,950 --> 00:01:36,900
It's the same for PHP.

24
00:01:37,230 --> 00:01:41,490
This behavior may not always be desirable in some cases.

25
00:01:41,490 --> 00:01:48,000
You may want to wait for every line of PHP code to be executed after PHP is finished running.

26
00:01:48,000 --> 00:01:50,440
You can send the contents all at once.

27
00:01:50,460 --> 00:01:54,130
That's possible with a feature called output buffering.

28
00:01:54,150 --> 00:02:01,350
An output buffer will tell PHP not to send the document in bits and pieces and said the content will

29
00:02:01,350 --> 00:02:02,630
be stored in memory.

30
00:02:02,640 --> 00:02:07,080
After PHP is finished running the content will be sent to the browser.

31
00:02:07,110 --> 00:02:10,919
However, we have the option of closing the output buffer.

32
00:02:10,919 --> 00:02:15,780
The content stored in the memory can be stored in a variable as a string.

33
00:02:15,810 --> 00:02:19,650
As a result, we can return the string from the function.

34
00:02:21,020 --> 00:02:22,930
Let's look at an example.

35
00:02:22,940 --> 00:02:27,590
At the top of the function, let's run a function called obese start.

36
00:02:29,840 --> 00:02:34,130
Before and after the function, I'm going to add an echo statement.

37
00:02:36,260 --> 00:02:39,510
This function is defined by the PHP language.

38
00:02:39,530 --> 00:02:43,880
It will tell PHP to store content in an output buffer.

39
00:02:43,910 --> 00:02:50,870
The echo statement before the obs start function will be sent to the browser immediately or as the echo

40
00:02:50,870 --> 00:02:55,880
statement after it will be sent to the browser after WordPress is finished running.

41
00:02:56,120 --> 00:03:00,160
You may not be able to notice the difference if you were to view the page.

42
00:03:00,170 --> 00:03:02,250
We are running this on our machines.

43
00:03:02,270 --> 00:03:06,060
Writing an echo statement does not require many resources.

44
00:03:06,080 --> 00:03:08,190
It's a very fast line of code.

45
00:03:08,210 --> 00:03:10,700
However, the point is still the same.

46
00:03:10,700 --> 00:03:16,910
We are preventing PHP from sending content to the browser until every line has finished running.

47
00:03:16,910 --> 00:03:20,150
So you may be wondering how does this help us?

48
00:03:20,180 --> 00:03:26,090
We have the option of grabbing content stored in the output buffer into a variable.

49
00:03:26,120 --> 00:03:31,620
For example, after the echo statement, create a variable called outputs.

50
00:03:31,640 --> 00:03:36,530
The value for this variable will be the object contents function.

51
00:03:38,650 --> 00:03:43,120
This function will search for an active output buffer if it finds one.

52
00:03:43,120 --> 00:03:47,290
The content from the buffer will be returned from the function as a string.

53
00:03:47,320 --> 00:03:49,810
You can probably guess what that means.

54
00:03:49,810 --> 00:03:52,860
We can return this variable from our function.

55
00:03:52,870 --> 00:03:57,850
Let's replace this string with the output variable from the return statement.

56
00:03:59,950 --> 00:04:01,410
There's one more thing.

57
00:04:01,420 --> 00:04:06,640
After the output variable, let's run a function called OB and clean.

58
00:04:08,880 --> 00:04:12,720
The OB and clean function performs to actions.

59
00:04:12,720 --> 00:04:19,339
Firstly, it'll stop output buffering from running PvP will revert to its original behaviour.

60
00:04:19,350 --> 00:04:23,220
Secondly, the output buffer will have its memory wiped.

61
00:04:23,220 --> 00:04:26,700
Content stored in the output buffer will be lost.

62
00:04:26,730 --> 00:04:28,980
We should always end the buffer.

63
00:04:29,010 --> 00:04:31,850
Other plugins may not appreciate having a buffer.

64
00:04:31,860 --> 00:04:35,930
Keep in mind we may not be the only plugin on a site.

65
00:04:35,940 --> 00:04:40,420
We are sharing resources on a machine with other plugins and themes.

66
00:04:40,440 --> 00:04:43,170
Clearing the buffer is beneficial to us.

67
00:04:43,200 --> 00:04:49,410
If we have another block, the content from a previous block will not clutter the buffer for another

68
00:04:49,410 --> 00:04:50,040
block.

69
00:04:50,190 --> 00:04:54,180
Before testing our code, let's remove the echo statements.

70
00:04:56,190 --> 00:05:02,790
Next, let's grab the templates, open the index JS file for the search form block.

71
00:05:04,960 --> 00:05:08,330
We are going to grab the HTML for the templates.

72
00:05:08,350 --> 00:05:13,120
Do not grab the fragment element or inspector controls components.

73
00:05:15,250 --> 00:05:17,320
Head back to the render function.

74
00:05:17,320 --> 00:05:22,510
We are going to close and open PHP mode after the ob start function.

75
00:05:24,700 --> 00:05:26,860
Inside the HTML area.

76
00:05:26,860 --> 00:05:28,360
Paste in the templates.

77
00:05:30,520 --> 00:05:33,070
The template is not going to be functional.

78
00:05:33,070 --> 00:05:34,530
That's perfectly fine.

79
00:05:34,540 --> 00:05:40,390
The goal is to render the HTML refresh the experimental page on the front end.

80
00:05:42,460 --> 00:05:43,270
Perfect.

81
00:05:43,270 --> 00:05:49,930
The block gets rendered, we can proceed to update the template with PHP functions to achieve the same

82
00:05:49,930 --> 00:05:51,310
appearance as before.

83
00:05:51,340 --> 00:05:54,860
Let's begin modifying the templates in the next lecture.

84
00:05:54,880 --> 00:05:56,080
I'll see you there.

