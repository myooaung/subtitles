1
00:00:00,090 --> 00:00:05,430
In this lecture, we are going to continue working on the function for handling the registration.

2
00:00:05,430 --> 00:00:07,530
Before we can register the user.

3
00:00:07,530 --> 00:00:10,140
We should check if the request was valid.

4
00:00:10,140 --> 00:00:14,250
The request should come with the username, email and password.

5
00:00:14,250 --> 00:00:18,780
Without these details, WordPress will not be able to create a user.

6
00:00:18,780 --> 00:00:22,080
It's our job to check if this information is available.

7
00:00:22,080 --> 00:00:24,270
Let's get started in the editor.

8
00:00:24,300 --> 00:00:26,970
Open the signup php file.

9
00:00:29,220 --> 00:00:36,600
Data sent with a request is accessible via an argument inside the function's argument list at an argument

10
00:00:36,600 --> 00:00:38,130
called request.

11
00:00:40,270 --> 00:00:46,060
This argument is an object with various properties and methods related to a request.

12
00:00:46,060 --> 00:00:53,680
In the resource section of this lecture, I provide a link to a class called WP Rest Request.

13
00:00:55,810 --> 00:00:58,760
WordPress defines dozens of classes.

14
00:00:58,780 --> 00:01:05,340
The WP Rest request class will act as a wrapper around the data of our request.

15
00:01:05,349 --> 00:01:09,510
We can access various pieces of information through this class.

16
00:01:09,520 --> 00:01:13,510
The request argument will be an instance of this class.

17
00:01:13,510 --> 00:01:17,940
You can look through the methods for the various actions that can be performed.

18
00:01:17,950 --> 00:01:20,280
Let's head back to our editors.

19
00:01:20,290 --> 00:01:24,100
WordPress will refer to the data as parameters.

20
00:01:24,100 --> 00:01:28,930
Let's create a variable for storing the request called params.

21
00:01:28,930 --> 00:01:32,620
The value for this variable will be the request.

22
00:01:32,620 --> 00:01:35,380
Get json params function.

23
00:01:37,530 --> 00:01:41,070
There are various ways to send data to an end point.

24
00:01:41,190 --> 00:01:45,120
This class supports various approaches for this course.

25
00:01:45,120 --> 00:01:48,480
We are going to be sending the form data as JSON.

26
00:01:48,480 --> 00:01:55,740
If we send JSON data to an endpoint, we can retrieve the data with the git json params function.

27
00:01:55,740 --> 00:02:01,350
WordPress will convert the JSON data into an array for a demonstration purposes.

28
00:02:01,350 --> 00:02:03,300
Let's return this variable.

29
00:02:05,170 --> 00:02:09,639
If we did everything right, we should receive the same data sent by us.

30
00:02:09,669 --> 00:02:11,680
Open the post of an application.

31
00:02:11,680 --> 00:02:14,740
We are going to update the request by sending data.

32
00:02:14,770 --> 00:02:18,820
Originally we've been sending data via query parameters.

33
00:02:18,820 --> 00:02:23,560
This time we are going to send data via the body of the request.

34
00:02:24,670 --> 00:02:28,350
In HTML, we have two sections of a document.

35
00:02:28,360 --> 00:02:33,460
There are the head and body sections both play different roles.

36
00:02:33,490 --> 00:02:41,110
The head section contains useful information on the page, such as the title styles and meta tags.

37
00:02:41,110 --> 00:02:47,060
The information inserted into the head section of the document is not rendered on the page.

38
00:02:47,080 --> 00:02:51,880
The purpose of this section is to help the browser understand the page.

39
00:02:51,910 --> 00:02:56,740
The body section serves as the main content area of the page.

40
00:02:56,740 --> 00:03:02,220
If we insert text or images, this content will be presented to visitors.

41
00:03:02,230 --> 00:03:09,520
This idea of separating information can be translated to requests and responses in a HTTP.

42
00:03:09,820 --> 00:03:12,790
A request or a response can have a header.

43
00:03:13,000 --> 00:03:19,180
The header can contain various pieces of information such as the IP browser or method.

44
00:03:19,180 --> 00:03:23,020
The body can contain the data of a response or request.

45
00:03:23,020 --> 00:03:27,100
This information is meant for the browser or server to process.

46
00:03:27,930 --> 00:03:29,580
In our php file.

47
00:03:29,610 --> 00:03:34,120
The get json params function will search for the data from the body.

48
00:03:34,140 --> 00:03:39,760
Therefore we must initiate our request with the data stored in the requests body.

49
00:03:39,780 --> 00:03:43,130
Postman allows us to send data through the body.

50
00:03:43,140 --> 00:03:45,240
There's a tab called Body.

51
00:03:45,270 --> 00:03:49,320
Under this tab we can send data in various formats.

52
00:03:49,350 --> 00:03:53,340
JSON data can be sent by selecting the raw option.

53
00:03:53,580 --> 00:03:58,160
After selecting this option, we can specify the type of data to send.

54
00:03:58,170 --> 00:04:01,020
Let's configure the data type to JSON.

55
00:04:03,140 --> 00:04:06,440
Below the options we can start writing JSON.

56
00:04:06,470 --> 00:04:10,730
The code written inside this box will be sent to our endpoint.

57
00:04:10,760 --> 00:04:14,120
Let's add an object with the following properties.

58
00:04:14,150 --> 00:04:15,680
Email username.

59
00:04:15,680 --> 00:04:16,670
Password.

60
00:04:22,120 --> 00:04:24,880
Each property will have a random value.

61
00:04:27,060 --> 00:04:29,820
Next, let's initiate the request.

62
00:04:31,930 --> 00:04:36,470
After a few moments, the server should respond with the same parameters.

63
00:04:36,490 --> 00:04:42,380
This response indicates that WordPress was able to successfully grab the data from the body.

64
00:04:42,400 --> 00:04:45,100
We can proceed to process the request.

65
00:04:45,130 --> 00:04:49,010
However, what if we don't include this data we should check about?

66
00:04:49,030 --> 00:04:53,020
The body contains everything that we need for registering a user.

67
00:04:53,050 --> 00:04:55,010
Let's head back to the editor.

68
00:04:55,030 --> 00:04:59,110
The return statement can be replaced with a conditional statement.

69
00:05:01,240 --> 00:05:06,610
Inside the conditional statement, we are going to add the is set function.

70
00:05:08,720 --> 00:05:12,170
The IS set function is defined by PHP.

71
00:05:12,200 --> 00:05:15,080
It will check if a variable has been created.

72
00:05:15,110 --> 00:05:19,070
This includes array keys and object properties.

73
00:05:19,100 --> 00:05:23,180
If a key exists within an array, this function will return.

74
00:05:23,180 --> 00:05:23,840
True.

75
00:05:23,870 --> 00:05:28,490
Our goal is to check if the data does not exist with the params array.

76
00:05:28,520 --> 00:05:30,750
Let's add the not operator.

77
00:05:30,770 --> 00:05:37,010
If this function returns false, we should stop the function from processing the rest of the request.

78
00:05:37,010 --> 00:05:41,780
Inside the conditional statement, let's return the response variable.

79
00:05:44,050 --> 00:05:47,490
This function has an unlimited number of arguments.

80
00:05:47,500 --> 00:05:54,070
We can pass any list of variables to check the get json params function returns and array.

81
00:05:54,100 --> 00:05:59,110
The data from the request will be stored as items in the array by their names.

82
00:05:59,110 --> 00:06:00,880
Let's pass in the following.

83
00:06:00,880 --> 00:06:02,110
Params email.

84
00:06:02,140 --> 00:06:03,460
Params username.

85
00:06:03,460 --> 00:06:05,170
Params password.

86
00:06:07,370 --> 00:06:14,630
If any of these keys aren't present in the response, the is set function will return false, thus causing

87
00:06:14,630 --> 00:06:17,370
the response to be returned by our function.

88
00:06:17,390 --> 00:06:19,100
We're not finished yet.

89
00:06:19,430 --> 00:06:22,710
We're checking if the items in the array have been created.

90
00:06:22,730 --> 00:06:27,050
However, this function will not check if the value is empty.

91
00:06:27,230 --> 00:06:29,840
Empty values can be a huge problem.

92
00:06:29,840 --> 00:06:37,790
WordPress will reject our attempts to create a new user if the request has empty data after the is set

93
00:06:37,790 --> 00:06:38,480
function.

94
00:06:38,480 --> 00:06:40,730
Let's add the OR operator.

95
00:06:42,980 --> 00:06:47,040
The OR operator is written with two pipe characters.

96
00:06:47,060 --> 00:06:50,860
This operator will allow us to write multiple conditions.

97
00:06:50,870 --> 00:06:53,750
It's very similar to the and operator.

98
00:06:53,780 --> 00:07:00,150
The main difference is that only a single condition has to be true with the and operator.

99
00:07:00,170 --> 00:07:02,330
All conditions had to be true.

100
00:07:02,360 --> 00:07:09,890
Whereas the OR operator will allow either condition to be true after the ore operator at a function

101
00:07:09,890 --> 00:07:11,090
called empty.

102
00:07:13,430 --> 00:07:16,430
The empty function is defined by PHP.

103
00:07:16,460 --> 00:07:19,580
It will check if a variable has an empty value.

104
00:07:19,610 --> 00:07:22,700
Let's pass in the params email key.

105
00:07:25,090 --> 00:07:30,730
Unlike the is set function, the empty function can only check one variable.

106
00:07:30,730 --> 00:07:35,130
In this example we are checking if the email key has a value.

107
00:07:35,140 --> 00:07:37,720
If it doesn't, this function will return.

108
00:07:37,720 --> 00:07:42,130
True, it will cause our scripts to return the response variable.

109
00:07:42,130 --> 00:07:44,760
Let's add another or operator.

110
00:07:44,770 --> 00:07:50,440
This time we are going to check the params username key with the empty function.

111
00:07:52,560 --> 00:07:55,210
Let's add this operator one more time.

112
00:07:55,230 --> 00:08:00,330
The last condition should be the empty function with the params password key.

113
00:08:02,670 --> 00:08:07,740
Overall, the conditions will check if the request has the appropriate data.

114
00:08:07,770 --> 00:08:12,930
In addition, the request will be denied if the request has empty values.

115
00:08:12,960 --> 00:08:19,200
I always recommend taking the time to validate data before inserting it into the database.

116
00:08:19,230 --> 00:08:22,140
Another thing worth noting is the formatting.

117
00:08:22,170 --> 00:08:25,760
Technically, we could write this condition in a single line.

118
00:08:25,770 --> 00:08:30,300
However, I like to write one condition per line for readability.

119
00:08:30,390 --> 00:08:33,110
Feel free to format this conditional statement.

120
00:08:33,120 --> 00:08:35,140
Let's try testing our function.

121
00:08:35,159 --> 00:08:38,380
Head back to postman in our first test.

122
00:08:38,400 --> 00:08:44,560
Let's try checking a rejected request by removing the password property from the body.

123
00:08:44,580 --> 00:08:48,570
After removing this property, let's initiate the request.

124
00:08:50,760 --> 00:08:54,510
The function will return a response with a status of one.

125
00:08:54,540 --> 00:08:58,600
This status indicates that the request has been rejected.

126
00:08:58,620 --> 00:09:01,710
Let's add the password property to the body.

127
00:09:03,850 --> 00:09:06,400
Next, let's send the request.

128
00:09:08,520 --> 00:09:11,760
This time, the status has been set to two.

129
00:09:11,790 --> 00:09:12,870
That's perfect.

130
00:09:12,900 --> 00:09:15,600
It's exactly the behavior we were looking for.

131
00:09:15,630 --> 00:09:18,310
We've successfully validated the data.

132
00:09:18,330 --> 00:09:23,980
We're guaranteed that our data will have values before inserting them into the database.

133
00:09:24,000 --> 00:09:28,200
In the next lecture, we're going to continue working on the function.

