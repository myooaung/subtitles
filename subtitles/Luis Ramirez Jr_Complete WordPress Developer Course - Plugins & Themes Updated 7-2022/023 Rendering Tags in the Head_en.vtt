WEBVTT
1
00:00:00.090 --> 00:00:06.689
In this lecture, we are going to finalize our solution by rendering open graph tags into the head section

2
00:00:06.689 --> 00:00:07.850
of the document.

3
00:00:07.860 --> 00:00:13.680
Social media platforms will scan the head section of a document format tags.

4
00:00:13.680 --> 00:00:17.790
On these tags, we can configure the open graph preview.

5
00:00:17.820 --> 00:00:24.180
There are dozens of options that can be configured for the sake of simplicity, we will focus on a handful

6
00:00:24.180 --> 00:00:24.840
of them.

7
00:00:24.930 --> 00:00:30.930
The first step is to add a hook for rendering content in the head section of the document.

8
00:00:30.930 --> 00:00:34.110
In your editor, open the main plugin file.

9
00:00:36.340 --> 00:00:41.590
At the bottom of the hook section at an action hook called WP Head.

10
00:00:43.820 --> 00:00:47.050
This hook will give us access to the head tag.

11
00:00:47.060 --> 00:00:49.610
We'll be able to render additional tags.

12
00:00:49.610 --> 00:00:52.190
The name of our function will be called up.

13
00:00:52.190 --> 00:00:53.540
WP Head.

14
00:00:55.820 --> 00:01:03.380
Next create a file called head php within the include slash front directory.

15
00:01:05.550 --> 00:01:06.950
Inside this file.

16
00:01:06.960 --> 00:01:09.960
Define the up WP head function.

17
00:01:12.230 --> 00:01:15.670
The next step is to begin grabbing the current options.

18
00:01:15.680 --> 00:01:19.730
Define a variable called options with the following value.

19
00:01:19.760 --> 00:01:22.430
Get option up options.

20
00:01:24.620 --> 00:01:30.750
If the user has disabled our plugins open graph feature, we should not continue running the function.

21
00:01:30.770 --> 00:01:32.960
Define a conditional statements.

22
00:01:32.960 --> 00:01:36.050
The conditional statement should compare the options.

23
00:01:36.050 --> 00:01:38.870
Enable Ogg variable with one.

24
00:01:41.130 --> 00:01:46.770
If this condition returns true, we will return the function to cease execution.

25
00:01:48.980 --> 00:01:54.850
Let's assume this feature is enabled, we can continue running the function for readability.

26
00:01:54.860 --> 00:01:59.960
I recommend defining variables for the title, description and image.

27
00:02:00.050 --> 00:02:06.410
Create a variable called title with the options OG title variable as the value.

28
00:02:08.560 --> 00:02:16.390
Next, create a variable called description with the options OG description variable as the value.

29
00:02:18.740 --> 00:02:25.550
Afterward create a variable called image set to the options ogg image variable.

30
00:02:27.750 --> 00:02:34.350
There's one last variable we'll create the URL to the page should be added to the preview.

31
00:02:34.380 --> 00:02:37.040
Create a variable called URL.

32
00:02:37.050 --> 00:02:42.780
Its value will be the site URL function with a forward slash character.

33
00:02:45.220 --> 00:02:50.900
The site URL function will return a valid HTTP URL to our site.

34
00:02:50.920 --> 00:02:54.550
We can pass any path to add to the base URL.

35
00:02:54.580 --> 00:02:58.080
In this example, we're pointing to the home page.

36
00:02:58.090 --> 00:02:59.980
The initial data is ready.

37
00:02:59.980 --> 00:03:03.240
However, we're not going to render the tags yet.

38
00:03:03.250 --> 00:03:06.970
First, we should check the type of page we're on.

39
00:03:06.970 --> 00:03:13.630
If the user is viewing a post, the variables should be updated with the data from the Post's metadata

40
00:03:13.870 --> 00:03:14.470
below.

41
00:03:14.470 --> 00:03:17.830
These variables create a conditional statement.

42
00:03:17.830 --> 00:03:21.400
The condition will be a function called is single.

43
00:03:23.700 --> 00:03:27.150
The IS single function will check the current page.

44
00:03:27.180 --> 00:03:30.810
It will detect if the page is displaying a single post.

45
00:03:30.840 --> 00:03:36.710
If it is, the return value will be true inside the conditional block.

46
00:03:36.720 --> 00:03:41.270
Let's begin updating the variables with the metadata from the post.

47
00:03:41.280 --> 00:03:46.800
First, we'll need the ID to create a variable called post ID.

48
00:03:46.830 --> 00:03:50.610
Set the value to the get the ID function.

49
00:03:52.970 --> 00:03:53.810
The gets.

50
00:03:53.810 --> 00:03:57.780
The ID function is another function defined by WordPress.

51
00:03:57.800 --> 00:04:00.320
It will return the ID of the post.

52
00:04:00.350 --> 00:04:07.790
We can safely assume there is an ID since the is single function and returns true after grabbing the

53
00:04:07.790 --> 00:04:08.390
ID.

54
00:04:08.420 --> 00:04:10.190
Let's update the title.

55
00:04:10.220 --> 00:04:14.990
Create a variable called new title with the following value.

56
00:04:15.020 --> 00:04:18.980
Get post meta post id og title.

57
00:04:18.980 --> 00:04:19.670
True.

58
00:04:21.910 --> 00:04:25.490
We're not going to directly update the title variable.

59
00:04:25.510 --> 00:04:29.020
It's possible that the metadata may not have a value.

60
00:04:29.050 --> 00:04:32.320
If that's the case, we should not update the title.

61
00:04:32.350 --> 00:04:35.920
Otherwise, the open graph preview may be empty.

62
00:04:35.950 --> 00:04:39.570
Let's set the title variable to the following value.

63
00:04:39.610 --> 00:04:41.740
Empty title question mark.

64
00:04:41.770 --> 00:04:43.060
Title Colon.

65
00:04:43.060 --> 00:04:44.260
New title.

66
00:04:46.550 --> 00:04:52.340
In this example, we're using the empty function to check the value for an empty value.

67
00:04:52.370 --> 00:04:57.230
If it is, we should set the title variable to its initial value.

68
00:04:57.260 --> 00:05:02.540
Otherwise we can safely update the title with the value from the metadata.

69
00:05:02.660 --> 00:05:05.730
The description is going to be the same process.

70
00:05:05.750 --> 00:05:09.200
Let's create a copy of these two lines of code.

71
00:05:11.540 --> 00:05:17.810
The variable names should be updated to new description and description respectively.

72
00:05:19.960 --> 00:05:26.950
They get post meta function can be updated to retrieve the OG description metadata value.

73
00:05:29.130 --> 00:05:32.470
Moving on, we can start updating the image.

74
00:05:32.490 --> 00:05:34.840
The process will be slightly different.

75
00:05:34.860 --> 00:05:37.770
First, let's grab the metadata value.

76
00:05:37.800 --> 00:05:42.720
Create a variable called override image with the following value.

77
00:05:42.750 --> 00:05:47.940
Get post meta post id ogg override image.

78
00:05:47.940 --> 00:05:48.570
True.

79
00:05:50.800 --> 00:05:59.290
Next update the image variable to the following value override image question mark get post meta post

80
00:05:59.290 --> 00:06:07.840
id og image true colon get the post thumbnail url post id open graph.

81
00:06:14.110 --> 00:06:16.570
We have a very long line of code.

82
00:06:16.600 --> 00:06:20.380
Overall, we're checking the override image variable.

83
00:06:20.440 --> 00:06:27.520
If this option is enabled for the post, the image variable will be set to the image from the metadata.

84
00:06:27.610 --> 00:06:30.340
Otherwise it'll be set to the posts.

85
00:06:30.370 --> 00:06:31.710
Featured image.

86
00:06:31.720 --> 00:06:37.070
We're using the get the post thumbnail URL function to grab the featured image.

87
00:06:37.090 --> 00:06:43.420
This function has to arguments which are the ID of the post and the size.

88
00:06:43.450 --> 00:06:45.520
We're getting close to finishing.

89
00:06:45.520 --> 00:06:49.240
The last variable that should be updated is the URL.

90
00:06:49.240 --> 00:06:55.300
Set the URL variable to the get permalink function with the post ID variable.

91
00:06:57.840 --> 00:07:04.670
After updating our variables, we can begin rendering the meta tags at the bottom of the function output.

92
00:07:04.680 --> 00:07:05.880
A meta tag.

93
00:07:08.100 --> 00:07:13.010
Social media platforms will search for meta tags with two attributes.

94
00:07:13.020 --> 00:07:15.620
The first attribute is called property.

95
00:07:15.630 --> 00:07:20.340
Let's set this attributes value to Ogg Colon title.

96
00:07:22.450 --> 00:07:25.130
The value for this attribute is important.

97
00:07:25.150 --> 00:07:28.270
This value will configure the title of the preview.

98
00:07:28.300 --> 00:07:32.200
We can set the title by adding the content attribute.

99
00:07:32.230 --> 00:07:38.710
The value for this attribute will be the escape attribute function with the title variable.

100
00:07:40.850 --> 00:07:44.840
As usual, the data will be escaped for the user's safety.

101
00:07:44.870 --> 00:07:47.920
Next, let's add another meta tag.

102
00:07:47.930 --> 00:07:55.760
This time the property attribute will be set to Ogg Colon description for configuring the description.

103
00:07:58.080 --> 00:08:04.980
The content attribute will be set to the escape attribute function with the description variable.

104
00:08:07.090 --> 00:08:15.300
Next we can configure the image by adding another meta tag with the property attribute set to ogg colon

105
00:08:15.310 --> 00:08:16.120
image.

106
00:08:18.300 --> 00:08:24.690
Let's set the content attribute to the escape attribute function with the image variable.

107
00:08:27.100 --> 00:08:34.750
After setting the image at another meta tag, the property attribute will be set to ogg colon type.

108
00:08:37.000 --> 00:08:42.970
This attribute can be added for configuring the type of URL that will be added to the page.

109
00:08:43.000 --> 00:08:46.300
Set the content attribute to the website.

110
00:08:48.590 --> 00:08:52.820
The website type is a generic type that will cover most cases.

111
00:08:52.850 --> 00:08:56.190
Lastly, let's add one more meta tag.

112
00:08:56.210 --> 00:09:01.310
The property attribute will have a value of ogg colon URL.

113
00:09:03.630 --> 00:09:10.350
Lastly, set the content attribute to the escape attribute function with the URL variable.

114
00:09:12.580 --> 00:09:18.070
After adding this information, we have successfully generated an open graph preview.

115
00:09:18.100 --> 00:09:21.110
Unfortunately, we cannot test our code.

116
00:09:21.130 --> 00:09:23.650
Our site must be live for a preview.

117
00:09:23.650 --> 00:09:27.980
To be generated, local environments cannot generate previews.

118
00:09:28.000 --> 00:09:32.470
However, just to make sure, let's refresh the page in the browser.

119
00:09:34.680 --> 00:09:39.240
If an error does not appear, you can consider the solution a success.

120
00:09:39.270 --> 00:09:40.920
Pat yourself on the back.

121
00:09:40.920 --> 00:09:44.850
We finally added support for an open graph preview.

122
00:09:44.880 --> 00:09:49.830
In the next section we are going to wrap up our site with a few tweaks.

