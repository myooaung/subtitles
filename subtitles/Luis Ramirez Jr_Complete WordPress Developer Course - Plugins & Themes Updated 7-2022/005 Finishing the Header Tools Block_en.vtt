WEBVTT
1
00:00:00.150 --> 00:00:04.620
In this lecture, we are going to render the header tools block on the server.

2
00:00:04.650 --> 00:00:10.050
You may be wondering why are we choosing server side rendering over client side rendering?

3
00:00:10.080 --> 00:00:12.100
Let's say the user is logged in.

4
00:00:12.120 --> 00:00:17.270
The block shouldn't ask the user to sign in and said it should greet the user.

5
00:00:17.280 --> 00:00:18.910
It's a dynamic block.

6
00:00:18.930 --> 00:00:22.410
Therefore we are going to use server side rendering.

7
00:00:22.440 --> 00:00:23.780
Let's get started.

8
00:00:23.790 --> 00:00:29.190
We've already prepared a function for handling the rendering of our block in your editor.

9
00:00:29.220 --> 00:00:32.310
Open the header tools dot php file.

10
00:00:34.540 --> 00:00:41.260
As usual, we are going to be using output buffering to help us build the templates inside the function.

11
00:00:41.260 --> 00:00:43.720
Call the OB start function.

12
00:00:45.860 --> 00:00:49.130
Next close and open PHP mode.

13
00:00:51.220 --> 00:00:54.910
Let's grab the template from the index js file.

14
00:00:57.140 --> 00:01:01.880
Inside this file, grab the div tag with the block props variable.

15
00:01:01.880 --> 00:01:07.190
We can safely ignore the fragment element and inspector controls components.

16
00:01:09.320 --> 00:01:14.600
Lastly, let's paste this template into our PHP render function.

17
00:01:16.880 --> 00:01:23.390
The next step is to update our template with the same logic from the JavaScript file with PHP.

18
00:01:23.420 --> 00:01:28.670
For starters, let's remove the block props variable from the root element.

19
00:01:28.700 --> 00:01:36.170
This variable can be replaced with a class called WP BLOCK Utility plus header tools.

20
00:01:38.330 --> 00:01:39.380
Afterward.

21
00:01:39.380 --> 00:01:42.020
Let's start conditionally rendering the links.

22
00:01:42.020 --> 00:01:46.160
First, we need the attributes inside the argument list.

23
00:01:46.160 --> 00:01:48.590
Add the attributes arguments.

24
00:01:50.770 --> 00:01:56.500
Next, let's update the template by replacing the expressions with conditional statements.

25
00:01:56.530 --> 00:02:02.870
Unlike JavaScript, we can't use ternary operators to conditionally render the templates.

26
00:02:02.890 --> 00:02:06.840
Luckily, we can stick to traditional conditional statements.

27
00:02:06.850 --> 00:02:10.120
Let's remove the expression surrounding the log and link.

28
00:02:12.530 --> 00:02:14.180
Above the anchor elements.

29
00:02:14.180 --> 00:02:17.720
Enter PvP mode to enter a conditional statement.

30
00:02:19.890 --> 00:02:23.850
Next, let's move the anchor element inside the block.

31
00:02:30.130 --> 00:02:34.970
We are re-entering FPS mode to add the condition inside the block.

32
00:02:34.990 --> 00:02:37.240
PvP mode should be exited.

33
00:02:37.270 --> 00:02:39.550
Make sure your code matches mine.

34
00:02:39.550 --> 00:02:43.230
After confirming that it does, let's add the condition.

35
00:02:43.240 --> 00:02:46.720
We are going to check the show off attributes.

36
00:02:48.800 --> 00:02:54.990
The show off attribute is a boolean value, which is expected by the conditional statements.

37
00:02:55.010 --> 00:02:59.090
We can check the attributes value as is that should do it.

38
00:02:59.120 --> 00:03:01.940
There's one more modification at the moment.

39
00:03:01.940 --> 00:03:06.830
The template will not work because the class attribute is spelled incorrectly.

40
00:03:06.860 --> 00:03:10.950
Earlier the class attribute was renamed to class name.

41
00:03:10.970 --> 00:03:14.240
This was to ensure compatibility with JavaScript.

42
00:03:14.270 --> 00:03:16.550
Let's revert the name to class.

43
00:03:16.580 --> 00:03:19.270
However, there are dozens of attributes.

44
00:03:19.280 --> 00:03:22.490
It would be tedious to modify each attribute.

45
00:03:22.520 --> 00:03:28.880
We can quickly modify the attribute by selecting the first instance of the class name attribute.

46
00:03:28.910 --> 00:03:33.780
Next, we can press control DX to select the next instance.

47
00:03:33.800 --> 00:03:40.200
You can repeatedly press this button to select all the instances after selecting all the attributes.

48
00:03:40.220 --> 00:03:44.150
We can replace every attribute with the class attribute.

49
00:03:46.350 --> 00:03:47.050
Great.

50
00:03:47.070 --> 00:03:48.380
The template is ready.

51
00:03:48.390 --> 00:03:53.820
Let's finalize the render function by returning the templates at the end of the function.

52
00:03:53.820 --> 00:03:56.340
Create a variable called output.

53
00:03:56.550 --> 00:04:01.230
The value for this variable will be the object contents function.

54
00:04:03.340 --> 00:04:08.500
Next we can call the OB and clean function to clear the output buffer.

55
00:04:10.630 --> 00:04:13.840
Lastly, we can return the output variable.

56
00:04:16.000 --> 00:04:18.769
Time to test our code in the browser.

57
00:04:18.790 --> 00:04:21.550
View the experimental page on the front end.

58
00:04:23.700 --> 00:04:27.660
As you can see, the header tool's block appears without a problem.

59
00:04:27.660 --> 00:04:31.470
We should be able to toggle the links without breaking the template.

60
00:04:31.500 --> 00:04:34.320
I'm going to quickly disable the log in link.

61
00:04:36.450 --> 00:04:38.940
Next, I'll refresh the page.

62
00:04:41.080 --> 00:04:41.840
Perfect.

63
00:04:41.860 --> 00:04:44.510
The login link does not appear on the front end.

64
00:04:44.530 --> 00:04:46.990
We can consider our block complete.

65
00:04:46.990 --> 00:04:53.230
The next step is to begin working on another block for rendering the form before moving on to the next

66
00:04:53.230 --> 00:04:54.070
lecture.

67
00:04:54.160 --> 00:04:55.840
Enable the log and link.

68
00:04:55.840 --> 00:04:59.200
Once you're ready, I'll see you in the next lecture.

