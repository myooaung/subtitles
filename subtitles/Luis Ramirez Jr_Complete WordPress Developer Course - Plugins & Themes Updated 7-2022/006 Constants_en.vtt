WEBVTT
1
00:00:00.120 --> 00:00:05.790
In this lecture, we will explore a different option for creating variables called constants.

2
00:00:05.790 --> 00:00:08.010
The idea of a constant is simple.

3
00:00:08.010 --> 00:00:12.300
They are variables that cannot be updated after they've been initialized.

4
00:00:12.300 --> 00:00:16.170
JavaScript will throw an error at us if we change a constant.

5
00:00:16.170 --> 00:00:20.460
First, let's look at how we can update a regular variable.

6
00:00:20.490 --> 00:00:26.460
In my browser, I have the snippets section to open with the example from the previous lecture.

7
00:00:26.460 --> 00:00:33.060
A variable can be updated by typing the name of the variable, followed by an equal sign character and

8
00:00:33.060 --> 00:00:34.170
the new value.

9
00:00:34.170 --> 00:00:38.610
For example, let's update the my name variable to Jane.

10
00:00:40.800 --> 00:00:43.790
It's not required to add delete keyword.

11
00:00:43.800 --> 00:00:47.500
This keyword is only necessary during initialization.

12
00:00:47.520 --> 00:00:49.470
Let's try running the script.

13
00:00:49.500 --> 00:00:56.100
The alert box will display the new value of the my name variable since we're updating it before running

14
00:00:56.100 --> 00:00:57.300
the alert function.

15
00:00:57.420 --> 00:01:01.410
Next, let's try switching our variable to a constant.

16
00:01:01.440 --> 00:01:05.850
Creating a constant is similar to creating a regular variable.

17
00:01:05.850 --> 00:01:11.820
Instead of using the lead keyword, we can replace this keyword with the const keyword.

18
00:01:13.970 --> 00:01:17.090
Let's try rerunning the script this time.

19
00:01:17.090 --> 00:01:18.890
Things won't go as planned.

20
00:01:18.890 --> 00:01:22.180
An alert box will never appear in the console.

21
00:01:22.190 --> 00:01:24.230
An error message gets thrown.

22
00:01:24.260 --> 00:01:28.730
The error message tells us that we're attempting to update a constant.

23
00:01:28.760 --> 00:01:31.430
Let's remove the update from our scripts.

24
00:01:31.820 --> 00:01:37.670
After making that change, you may need to refresh the page for the update to be applied.

25
00:01:37.670 --> 00:01:42.800
I prefer pressing control five to forcefully refresh the page.

26
00:01:44.940 --> 00:01:47.760
These scripts should have persisted across the page.

27
00:01:47.760 --> 00:01:48.410
Reload.

28
00:01:48.420 --> 00:01:50.180
Let's try running it again.

29
00:01:50.190 --> 00:01:53.430
This time the alert box appears on the page.

30
00:01:53.430 --> 00:01:54.230
Perfect.

31
00:01:54.240 --> 00:01:56.220
We've got a functioning script.

32
00:01:56.250 --> 00:01:57.300
In a nutshell.

33
00:01:57.330 --> 00:02:03.240
Constants are a great way to create a variable without worrying about it changing.

34
00:02:05.570 --> 00:02:07.280
Before ending the lecture.

35
00:02:07.280 --> 00:02:10.520
There is another solution for creating a variable.

36
00:02:10.550 --> 00:02:15.980
Variables can be created with the var keyword before the year 2015.

37
00:02:16.010 --> 00:02:20.260
The var keyword was the only solution for creating variables.

38
00:02:20.270 --> 00:02:24.470
The cost and let keywords were introduced a decade later.

39
00:02:24.690 --> 00:02:27.670
Developers don't use the var keyword anymore.

40
00:02:27.680 --> 00:02:31.000
It's strongly recommended to stick to the other keywords.

41
00:02:31.010 --> 00:02:35.110
I wanted to mention this keyword in case you come across it in the wild.

42
00:02:35.120 --> 00:02:39.890
It's just another way to create a variable that is considered outdated.

