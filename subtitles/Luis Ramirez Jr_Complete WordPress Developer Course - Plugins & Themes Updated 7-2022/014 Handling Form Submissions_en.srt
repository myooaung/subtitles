1
00:00:01,190 --> 00:00:05,760
In this lecture we are going to handle the form submission with JavaScript.

2
00:00:05,780 --> 00:00:10,340
By default, the browser will submit data to a specific URL.

3
00:00:10,340 --> 00:00:13,430
We saw an example of this with the search form.

4
00:00:13,430 --> 00:00:17,420
After submitting the search form, the entire page refreshes.

5
00:00:17,420 --> 00:00:20,560
We are redirected to the search results page.

6
00:00:20,570 --> 00:00:23,270
This behavior is quick and simple.

7
00:00:23,300 --> 00:00:29,750
However, in the modern age of web development, developers have moved towards submitting forms with

8
00:00:29,750 --> 00:00:30,740
JavaScript.

9
00:00:30,770 --> 00:00:36,590
Reloading a page can take up unnecessary resources rather than refreshing the page.

10
00:00:36,590 --> 00:00:41,060
It's much better to send data to the server and wait for a response.

11
00:00:41,060 --> 00:00:46,520
With JavaScript, we are going to begin with the registration form in the browser.

12
00:00:46,520 --> 00:00:47,750
Let's check it out.

13
00:00:47,780 --> 00:00:52,310
We have three fields for the email, name and password.

14
00:00:52,310 --> 00:00:57,260
The values for these fields should be retrieved during submission.

15
00:00:57,260 --> 00:01:00,710
We should tell the user that their account is being created.

16
00:01:00,710 --> 00:01:04,610
Lastly, we should disable the fields and buttons.

17
00:01:04,640 --> 00:01:07,100
Let's get started in your editor.

18
00:01:07,100 --> 00:01:09,740
Open the front end JS file.

19
00:01:11,940 --> 00:01:13,680
At the bottom of the function.

20
00:01:13,680 --> 00:01:18,410
We need to listen for an event called Submit on the registration form.

21
00:01:18,420 --> 00:01:23,160
We already have a variable that stores a reference to the registration form.

22
00:01:23,160 --> 00:01:25,620
This is why variables are important.

23
00:01:25,620 --> 00:01:28,980
We can reuse them for other parts of an application.

24
00:01:28,980 --> 00:01:34,260
Let's change the add event listener function to the sign up variable.

25
00:01:36,540 --> 00:01:39,390
The name of the event is called Submit.

26
00:01:41,620 --> 00:01:43,750
The cement event is emitted.

27
00:01:43,750 --> 00:01:49,140
If a form is submitted, we can intercept the request by listening to this event.

28
00:01:49,150 --> 00:01:53,440
Let's pass in an arrow function that accepts the event object.

29
00:01:55,740 --> 00:01:57,150
Inside our function.

30
00:01:57,150 --> 00:02:01,710
Let's call the prevent default function on the event object.

31
00:02:03,800 --> 00:02:07,040
This is the most important step by default.

32
00:02:07,070 --> 00:02:10,479
The page will be redirected to the submission page.

33
00:02:10,490 --> 00:02:15,110
We can stop the browser from redirecting visitors by calling this method.

34
00:02:15,140 --> 00:02:20,540
There's one caveat we are responsible for handling the form that won't be a problem.

35
00:02:20,540 --> 00:02:23,210
Submitting a form is easy with WordPress.

36
00:02:23,210 --> 00:02:30,260
Before sending data, we must disable the form, otherwise visitors may attempt to submit the form again.

37
00:02:30,260 --> 00:02:34,690
Sending excessive submissions can potentially crash our site.

38
00:02:34,700 --> 00:02:40,010
It's considered good practice to disable a form while a request is being sent in.

39
00:02:40,010 --> 00:02:44,180
Your editor open the op modal dot php file.

40
00:02:46,250 --> 00:02:48,510
Search for the registration form.

41
00:02:48,530 --> 00:02:52,100
It can be found under a comment that says register form.

42
00:02:54,310 --> 00:02:57,340
I wrapped the form with a field set element.

43
00:02:57,370 --> 00:02:59,560
This element is highly underrated.

44
00:02:59,590 --> 00:03:01,910
I don't find many developers using it.

45
00:03:01,930 --> 00:03:08,030
However, there's one advantage to adding this element to a form similar to listening to events.

46
00:03:08,050 --> 00:03:10,990
Inputs must be disabled one at a time.

47
00:03:11,200 --> 00:03:14,260
The field set element offers a shortcut.

48
00:03:14,290 --> 00:03:17,560
We can directly disable the fields by doing so.

49
00:03:17,590 --> 00:03:19,580
Children elements are disabled.

50
00:03:19,600 --> 00:03:24,400
It's faster to disable a single element than an entire list of elements.

51
00:03:24,400 --> 00:03:28,090
Let's select the field set element to disable the form.

52
00:03:28,090 --> 00:03:30,430
Switch back to the script file.

53
00:03:30,460 --> 00:03:36,760
First, we should select the field, set elements, create a variable called sign up field.

54
00:03:36,760 --> 00:03:37,420
Set.

55
00:03:37,450 --> 00:03:40,330
The value for this variable will be the following.

56
00:03:40,330 --> 00:03:44,290
Sign up form dot query selector field set.

57
00:03:46,580 --> 00:03:49,550
All elements have the query selector function.

58
00:03:49,580 --> 00:03:53,030
This function is not exclusive to the document object.

59
00:03:53,030 --> 00:03:59,360
By reusing the sign up form variable, we do not need to provide a specific selector.

60
00:03:59,390 --> 00:04:04,760
JavaScript will search for the field set element from within the registration form.

61
00:04:04,790 --> 00:04:10,700
After selecting the element, let's add the disabled attribute by calling the signup field.

62
00:04:10,700 --> 00:04:11,090
Set.

63
00:04:11,480 --> 00:04:11,960
Set.

64
00:04:11,960 --> 00:04:12,530
Attribute.

65
00:04:12,530 --> 00:04:13,220
Function.

66
00:04:15,530 --> 00:04:17,880
This function has two arguments.

67
00:04:17,899 --> 00:04:20,820
The first argument is the name of the attribute.

68
00:04:20,839 --> 00:04:23,060
Let's set the name to disabled.

69
00:04:25,170 --> 00:04:28,620
Next, we must provide the value for the attributes.

70
00:04:28,620 --> 00:04:31,670
The disabled attribute doesn't have a value.

71
00:04:31,680 --> 00:04:35,460
In this case, we can set the attributes value to true.

72
00:04:37,840 --> 00:04:43,570
After disabling the fields, we should render a message to let users know that their registration is

73
00:04:43,570 --> 00:04:44,550
in process.

74
00:04:44,560 --> 00:04:48,700
Let's check out the template again above the field set element.

75
00:04:48,700 --> 00:04:52,540
There's a div tag with an ID called sign up status.

76
00:04:52,540 --> 00:04:55,930
Inside this element, we are going to render a message.

77
00:04:55,930 --> 00:04:59,230
I have prepared classes for formatting the message.

78
00:04:59,230 --> 00:05:00,640
Let's give it a try.

79
00:05:01,060 --> 00:05:02,590
That can be script file.

80
00:05:02,590 --> 00:05:09,520
We should select this element below the sign up field set variable create another variable called sign

81
00:05:09,520 --> 00:05:10,510
up status.

82
00:05:10,510 --> 00:05:18,730
The value for this variable will be the following sign up form query selector hash sign up status.

83
00:05:20,880 --> 00:05:24,600
Next, let's update the inner HTML property.

84
00:05:26,800 --> 00:05:30,570
The contents of an element can be updated through this property.

85
00:05:30,580 --> 00:05:34,510
We are going to insert a div tag with the following classes.

86
00:05:34,510 --> 00:05:35,770
Modal Status.

87
00:05:35,770 --> 00:05:37,570
Modal Status Info.

88
00:05:39,770 --> 00:05:46,540
I'm using a template string despite not inserting a variable template strings how multi line support.

89
00:05:46,550 --> 00:05:50,420
It'll be easier to read and write our code with a template string.

90
00:05:50,450 --> 00:05:56,120
There is one downside to using plain JavaScript syntax highlighting is not supported.

91
00:05:56,190 --> 00:06:00,520
If we are using React with JSP X, this wouldn't be a problem.

92
00:06:00,530 --> 00:06:07,490
It's worth mentioning this if you plan on writing plain JavaScript, the classes I provided will change

93
00:06:07,490 --> 00:06:09,440
the background and text color.

94
00:06:09,470 --> 00:06:16,250
You can check out the CSS file for the properties modified by these classes inside this element.

95
00:06:16,280 --> 00:06:18,320
Let's write the following message.

96
00:06:18,320 --> 00:06:19,250
Please wait.

97
00:06:19,280 --> 00:06:21,200
We are creating your accounts.

98
00:06:23,350 --> 00:06:24,300
We're finished.

99
00:06:24,310 --> 00:06:27,330
Let's try testing our form in the browser.

100
00:06:27,340 --> 00:06:29,830
We refresh the experimental page.

101
00:06:31,890 --> 00:06:34,670
Let's do the registration form from the modal.

102
00:06:34,680 --> 00:06:36,800
We can freely modify the form.

103
00:06:36,810 --> 00:06:39,980
After we filled out the form, we can submit it.

104
00:06:39,990 --> 00:06:42,090
The page should not refresh.

105
00:06:42,090 --> 00:06:45,630
At the same time the form has been completely disabled.

106
00:06:45,630 --> 00:06:48,960
We are not able to modify the fields after submission.

107
00:06:48,960 --> 00:06:51,870
Lastly, our message appears at the top.

108
00:06:52,050 --> 00:06:54,930
This is the exact behavior we were looking for.

109
00:06:54,930 --> 00:06:57,360
We can begin sending data to the form.

110
00:06:57,360 --> 00:07:00,660
Let's continue working on the form in the next lecture.

