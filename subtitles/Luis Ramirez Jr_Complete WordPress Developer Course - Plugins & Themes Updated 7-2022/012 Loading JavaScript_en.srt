1
00:00:00,240 --> 00:00:04,220
In this lecture we are going to load JavaScript from the document.

2
00:00:04,230 --> 00:00:10,860
The snippets tool has been great, but it's not the proper solution for adding a script to the page.

3
00:00:10,860 --> 00:00:15,440
The HTML language has a tag dedicated to loading scripts.

4
00:00:15,450 --> 00:00:16,920
Let's give it a try.

5
00:00:17,070 --> 00:00:21,720
For the remainder of the section, we are going to be working in a code editor.

6
00:00:21,720 --> 00:00:25,020
I have my editor pointed to an empty directory.

7
00:00:25,020 --> 00:00:26,580
You should do the same.

8
00:00:26,580 --> 00:00:31,140
Your editor shouldn't be pointed to the current WordPress installation.

9
00:00:31,170 --> 00:00:34,290
Our changes shouldn't affect our main project.

10
00:00:34,290 --> 00:00:39,810
After you've got that sorted, let's create a file called Index dot HTML.

11
00:00:42,150 --> 00:00:47,730
An HTML file can be scaffolded by typing html colon five.

12
00:00:47,730 --> 00:00:53,010
An option will loop here to pre fill the file with a basic html template.

13
00:00:53,040 --> 00:00:57,210
If we press enter the template should get loaded into the file.

14
00:00:57,240 --> 00:00:58,340
Fantastic.

15
00:00:58,350 --> 00:01:04,080
Let's modify the title tag by setting it to the following js examples.

16
00:01:06,270 --> 00:01:08,380
Everything else is fine, as is.

17
00:01:08,400 --> 00:01:13,380
Next, inside the body tags add an H one tag with dummy checks.

18
00:01:15,480 --> 00:01:19,170
We're including this tag to verify the page's content.

19
00:01:19,200 --> 00:01:21,640
Let's begin loading a JavaScript file.

20
00:01:21,660 --> 00:01:27,250
First, we must create a JavaScript file inside our project's directory.

21
00:01:27,270 --> 00:01:31,170
Create a new file called Main JS.

22
00:01:33,250 --> 00:01:38,470
Let's log a message with the console log function inside our new file.

23
00:01:40,520 --> 00:01:41,270
Next.

24
00:01:41,300 --> 00:01:42,860
Head back to the document.

25
00:01:42,890 --> 00:01:46,350
Script files can be loaded by adding the script tag.

26
00:01:46,370 --> 00:01:49,700
Let's add it to the head section of the document.

27
00:01:52,040 --> 00:01:56,250
The script tag provides two options for writing JavaScript.

28
00:01:56,270 --> 00:02:00,230
Firstly, we can write JavaScript inside the tags.

29
00:02:00,260 --> 00:02:04,280
Alternatively, we can load an external JavaScript file.

30
00:02:04,280 --> 00:02:09,590
In most cases, you should separate your HTML and JavaScript code.

31
00:02:09,620 --> 00:02:16,110
It's the same reason developers prefer to write HTML and CSS in separate files.

32
00:02:16,130 --> 00:02:20,570
Using separate files keeps our code clean and manageable.

33
00:02:20,840 --> 00:02:24,710
On the script tag add an attribute called source.

34
00:02:24,710 --> 00:02:28,910
The source attribute should be a path to a script file.

35
00:02:28,940 --> 00:02:32,090
Let's point to the main JS file.

36
00:02:34,240 --> 00:02:36,990
Next, let's view the file in the browser.

37
00:02:37,000 --> 00:02:41,080
Drag and drop the HTML file onto a blank tab.

38
00:02:44,920 --> 00:02:46,420
Inside the document.

39
00:02:46,420 --> 00:02:50,410
The H one tag should appear on the page to verify.

40
00:02:50,440 --> 00:02:52,470
Our script file was loaded.

41
00:02:52,480 --> 00:02:56,500
Let's open the console panel in the developer tools.

42
00:02:58,660 --> 00:02:59,410
Great.

43
00:02:59,440 --> 00:03:02,150
Our script has been successfully loaded.

44
00:03:02,170 --> 00:03:04,230
This is indicated by the message.

45
00:03:04,240 --> 00:03:06,400
So far, so good, right?

46
00:03:06,430 --> 00:03:07,720
Not so fast.

47
00:03:07,750 --> 00:03:09,930
There's one problem with our script.

48
00:03:09,940 --> 00:03:13,720
This problem can cause further issues with our template.

49
00:03:13,720 --> 00:03:17,520
Script files should be loaded at the bottom of the documents.

50
00:03:17,530 --> 00:03:25,300
In most cases, you should never load a script from the head section of the document to understand why.

51
00:03:25,330 --> 00:03:27,460
Let's try updating our scripts.

52
00:03:27,490 --> 00:03:30,360
Head back to the editor inside the script.

53
00:03:30,370 --> 00:03:35,770
We're going to replace the console log function with the alert function.

54
00:03:38,020 --> 00:03:43,190
As we've learned, the alert function blocks additional actions in the browser.

55
00:03:43,210 --> 00:03:47,590
The page doesn't become functional until the alert box goes away.

56
00:03:47,620 --> 00:03:50,510
Let's see how this impacts our page.

57
00:03:50,530 --> 00:03:52,990
Refresh the document in the browser.

58
00:03:55,280 --> 00:03:58,880
The alert box appears on the page, which is great.

59
00:03:58,910 --> 00:04:02,330
Unfortunately, the rest of the document is missing.

60
00:04:02,330 --> 00:04:05,450
The heading from our file does not get rendered.

61
00:04:05,480 --> 00:04:08,160
This problem is caused by our scripts.

62
00:04:08,180 --> 00:04:12,020
If we close the alert box, the heading suddenly appears.

63
00:04:12,050 --> 00:04:13,790
Here's what's going on.

64
00:04:13,820 --> 00:04:19,640
Browsers will process HTML files from top to bottom, line by line.

65
00:04:19,670 --> 00:04:24,740
It'll update the document with the information inside the HTML file.

66
00:04:24,770 --> 00:04:31,300
Eventually, it'll come across the script tag before it proceeds with subsequent lines.

67
00:04:31,310 --> 00:04:38,240
It'll load the script file after the file has been loaded, the code inside the file will execute.

68
00:04:38,270 --> 00:04:41,680
At this point, the heading has not been processed.

69
00:04:41,690 --> 00:04:47,750
For this reason, the browser does not have the opportunity to load the heading on the page.

70
00:04:47,780 --> 00:04:54,620
It's too busy with our JavaScript file, which will block the document from performing additional actions.

71
00:04:54,650 --> 00:04:56,530
This can be a huge problem.

72
00:04:56,540 --> 00:04:59,930
What if we need to access an element from our script?

73
00:04:59,960 --> 00:05:03,980
It won't be available until the document has fully loaded.

74
00:05:04,130 --> 00:05:06,380
Getting around this problem is simple.

75
00:05:06,380 --> 00:05:11,880
We can move the script tag from the top of the document to the bottom of the document.

76
00:05:11,900 --> 00:05:16,160
Cut and paste the script tag before the closing body tag.

77
00:05:18,310 --> 00:05:19,090
Next.

78
00:05:19,090 --> 00:05:20,830
Let's refresh the page.

79
00:05:21,950 --> 00:05:25,730
This time the alert box appears, but so does the heading.

80
00:05:25,760 --> 00:05:32,270
Script files should always be the last files to be included in a document to reduce the headaches.

81
00:05:32,270 --> 00:05:37,400
There are a couple more things worth mentioning before moving on to the next lecture.

82
00:05:37,430 --> 00:05:39,290
Head back to the document.

83
00:05:39,320 --> 00:05:41,870
Inline JavaScript is supported.

84
00:05:41,870 --> 00:05:44,360
You may see this feature from time to time.

85
00:05:44,360 --> 00:05:49,610
For example, on the H one tag, let's add an attribute called on click.

86
00:05:51,860 --> 00:05:54,890
The attribute name should be in lowercase letters.

87
00:05:54,890 --> 00:06:01,070
This attribute will execute JavaScript code if the element is clicked on the attributes.

88
00:06:01,070 --> 00:06:05,420
Value must be valid JavaScript code for this demonstration.

89
00:06:05,420 --> 00:06:07,520
Let's write a console statement.

90
00:06:09,670 --> 00:06:13,370
Inside my console statement, I'm logging a message.

91
00:06:13,390 --> 00:06:17,010
However, what's more interesting are the quotes.

92
00:06:17,020 --> 00:06:19,000
I'm using single quotes.

93
00:06:19,030 --> 00:06:23,160
If I were to use double quotes, we would run into some problems.

94
00:06:23,170 --> 00:06:26,640
The attribute is already written with double quotes.

95
00:06:26,650 --> 00:06:31,090
Using double quotes in the log function will cause issues.

96
00:06:33,250 --> 00:06:38,650
As you can see, the document assumes the attribute begins and ends here.

97
00:06:38,680 --> 00:06:42,110
It does not recognize the latter portion of the script.

98
00:06:42,130 --> 00:06:47,590
For this reason, you should stick to single quotes when using inline JavaScript.

99
00:06:47,620 --> 00:06:50,080
I'm going to remove this attribute.

100
00:06:50,110 --> 00:06:53,050
It's rare to write inline JavaScript.

101
00:06:53,080 --> 00:06:55,180
It's the same reason as before.

102
00:06:55,210 --> 00:06:58,810
JavaScript code should be written in a separate file.

103
00:06:58,840 --> 00:07:03,690
Inline JavaScript can clutter our code for the rest of this section.

104
00:07:03,700 --> 00:07:08,510
We're going to dedicate most of our time to writing JavaScript in a single file.

105
00:07:08,530 --> 00:07:12,490
Let's continue exploring additional features in the next lecture.

106
00:07:12,520 --> 00:07:13,810
I'll see you there.

