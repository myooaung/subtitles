WEBVTT
1
00:00:00.090 --> 00:00:04.350
In this lecture we are going to register new metadata for posts.

2
00:00:04.350 --> 00:00:10.560
Throughout this section, we've created settings for adding an open graph preview for various social

3
00:00:10.560 --> 00:00:11.940
media platforms.

4
00:00:11.940 --> 00:00:16.320
At the moment, the same preview will be generated for all pages.

5
00:00:16.320 --> 00:00:20.460
Ideally, the preview should reflect the contents of the page.

6
00:00:20.460 --> 00:00:22.320
Let me show you an example.

7
00:00:22.470 --> 00:00:27.240
Currently, I'm using a tool for previewing an open graph preview.

8
00:00:27.270 --> 00:00:31.290
I'm going to submit a link to the home page of a random site.

9
00:00:33.450 --> 00:00:36.210
This site has an open graph preview.

10
00:00:36.240 --> 00:00:40.590
The preview contains a generic title image and description.

11
00:00:40.590 --> 00:00:45.150
Lets check out what happens when I view the preview for a specific product.

12
00:00:47.300 --> 00:00:51.100
This time, the preview displays information on the product.

13
00:00:51.110 --> 00:00:55.550
It's common practice to tailor the preview to a specific page.

14
00:00:55.580 --> 00:01:00.950
This helps users on social media sites understand the type of content on a page.

15
00:01:00.980 --> 00:01:06.380
Our plugin should give users the option of modifying the preview for a specific post.

16
00:01:06.410 --> 00:01:09.410
That's what we'll be tackling next in this section.

17
00:01:09.560 --> 00:01:14.020
To get started, we're going to register new metadata for a post.

18
00:01:14.030 --> 00:01:19.640
The open graph settings for a post will be stored as post metadata in your editor.

19
00:01:19.670 --> 00:01:23.960
Open the recipe post type dot php file.

20
00:01:26.190 --> 00:01:30.140
In this file, we are registering the recipe post type.

21
00:01:30.150 --> 00:01:34.140
In addition, we're registering metadata for this post type.

22
00:01:34.140 --> 00:01:39.540
Let's register our metadata from within this function at the bottom of the file.

23
00:01:39.540 --> 00:01:42.510
Run the register post meta function.

24
00:01:44.780 --> 00:01:48.650
The first argument of this function is the name of the post type.

25
00:01:48.650 --> 00:01:52.440
However, we're going to apply this metadata to all posts.

26
00:01:52.460 --> 00:01:56.270
It shouldn't be exclusive to a specific post type.

27
00:01:56.300 --> 00:01:59.070
Luckily we can pass in an empty string.

28
00:01:59.090 --> 00:02:02.870
WordPress will apply the metadata to all post types.

29
00:02:02.900 --> 00:02:05.820
Next, let's set the name of our metadata.

30
00:02:05.840 --> 00:02:08.180
It will be called OG title.

31
00:02:10.190 --> 00:02:14.150
The fields are going to be similar to the fields from our custom page.

32
00:02:14.180 --> 00:02:20.750
Users will be able to modify the title image and description of an open graph preview.

33
00:02:20.780 --> 00:02:26.870
After setting the name, let's configure the settings of this metadata by passing in an array in the

34
00:02:26.870 --> 00:02:27.380
array.

35
00:02:27.380 --> 00:02:30.260
Lets set the single item to true.

36
00:02:32.540 --> 00:02:35.390
This metadata will contain a single value.

37
00:02:35.420 --> 00:02:38.340
We're not going to store the metadata in an array.

38
00:02:38.360 --> 00:02:42.020
Next, let's set the type item to string.

39
00:02:44.250 --> 00:02:47.380
This option will set the data type of our variable.

40
00:02:47.400 --> 00:02:51.510
Afterward set the show in rest option to true.

41
00:02:53.630 --> 00:02:57.470
This option will expose the metadata through the rest API.

42
00:02:57.500 --> 00:03:04.040
Up next, set the sanitized callback option to the sanitized text field function.

43
00:03:06.260 --> 00:03:08.090
This option is new to us.

44
00:03:08.120 --> 00:03:12.350
WordPress can handle updating metadata through the rest API.

45
00:03:12.380 --> 00:03:19.460
If the value is updated through a request, we can run the value through a custom function for sanitization.

46
00:03:19.490 --> 00:03:22.390
Typically we would define a custom function.

47
00:03:22.400 --> 00:03:26.180
However, we're not going to go heavy on the sanitization.

48
00:03:26.210 --> 00:03:31.280
It'll be enough to pass the value onto the sanitized text field function.

49
00:03:31.580 --> 00:03:34.760
The last option is called off callback.

50
00:03:34.790 --> 00:03:38.030
The value for this option will be an anonymous function.

51
00:03:40.360 --> 00:03:47.470
If the metadata is added, modified or deleted through the rest API, we can limit the access to perform

52
00:03:47.470 --> 00:03:48.590
these actions.

53
00:03:48.610 --> 00:03:53.830
The off callback function must return a boolean value inside this function.

54
00:03:53.830 --> 00:03:57.220
Let's return the current user can function.

55
00:03:59.570 --> 00:04:02.350
We're going to check the user's capabilities.

56
00:04:02.360 --> 00:04:06.170
The name of the capability will be called edit posts.

57
00:04:08.300 --> 00:04:12.080
This capability is given to users who can edit a post.

58
00:04:12.110 --> 00:04:14.500
Most rolls have this access.

59
00:04:14.510 --> 00:04:21.260
We're lowering the permissions since most users can create posts but not modify the global settings

60
00:04:21.260 --> 00:04:22.100
of a site.

61
00:04:22.130 --> 00:04:26.260
If the user can edit a post, they're saved to edit the metadata.

62
00:04:26.270 --> 00:04:29.270
Let's create three copies of this function.

63
00:04:29.300 --> 00:04:32.600
The values for the other metadata will be similar.

64
00:04:32.600 --> 00:04:38.600
We just need to modify the name, which is the value in the second argument of the function for the

65
00:04:38.600 --> 00:04:42.380
second copy, set the name to OG description.

66
00:04:44.580 --> 00:04:46.130
For the third copy.

67
00:04:46.140 --> 00:04:47.970
Set the name to OG.

68
00:04:48.000 --> 00:04:48.750
Image.

69
00:04:50.880 --> 00:04:56.310
Lastly, set the forth copy's name to OG override image.

70
00:04:58.480 --> 00:05:04.000
The last option will give the user to override the image of the post by default.

71
00:05:04.030 --> 00:05:08.500
We're going to use the featured image of the post as the image for the preview.

72
00:05:08.530 --> 00:05:13.070
However, users may want to use a different image for social media.

73
00:05:13.090 --> 00:05:17.740
If that's the case, we'll give them the option to override the default behavior.

74
00:05:18.130 --> 00:05:21.610
For this option, let's set the type to Boolean.

75
00:05:23.890 --> 00:05:28.720
Next, let's add an option called default with a value of false.

76
00:05:30.950 --> 00:05:36.560
The default option gives us the opportunity to set the default value for this metadata.

77
00:05:36.590 --> 00:05:39.290
Our metadata has been registered before.

78
00:05:39.290 --> 00:05:46.700
Moving on, let's try testing the metadata by testing the Post's endpoint, Open the Postman application.

79
00:05:47.960 --> 00:05:52.460
In a new tab, create a get request with the following URL.

80
00:05:52.490 --> 00:06:00.470
Udemy Local Slash WP json slash wp slash v two slash posts.

81
00:06:02.650 --> 00:06:05.740
The metadata will be applied to any post type.

82
00:06:05.740 --> 00:06:10.050
And this example, we're going to test the post post type.

83
00:06:10.060 --> 00:06:11.920
Let's send the request.

84
00:06:14.070 --> 00:06:18.120
And the response body, we will receive an array of objects.

85
00:06:18.150 --> 00:06:22.980
Each object represents a single post within any of the objects.

86
00:06:22.980 --> 00:06:25.440
Search for a property called Meta.

87
00:06:27.710 --> 00:06:31.120
WordPress will store the metadata within this property.

88
00:06:31.130 --> 00:06:35.860
If we look closely, our custom metadata has been added to the response.

89
00:06:35.870 --> 00:06:36.860
That's perfect.

90
00:06:36.890 --> 00:06:40.970
We've successfully registered our metadata with all post types.

91
00:06:41.000 --> 00:06:47.370
In the next lecture, let's begin adding fields for modifying this metadata from within the editor.

