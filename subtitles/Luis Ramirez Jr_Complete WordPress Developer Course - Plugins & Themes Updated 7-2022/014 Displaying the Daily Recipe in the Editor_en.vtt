WEBVTT
1
00:00:00.120 --> 00:00:05.810
In this lecture, we are going to begin displaying the recipe in the block for the Gutenberg editor.

2
00:00:05.820 --> 00:00:09.390
We prepared the end point for grabbing this information.

3
00:00:09.390 --> 00:00:14.460
Let's send your request to our custom end point from our block in your editor.

4
00:00:14.490 --> 00:00:17.130
Open the index JS file.

5
00:00:19.220 --> 00:00:25.240
First, let's import some components and functions that we'll need at the top of the file.

6
00:00:25.250 --> 00:00:26.750
Import the API.

7
00:00:26.780 --> 00:00:30.050
Fetch function from the WordPress slash API.

8
00:00:30.080 --> 00:00:31.280
Fetch package.

9
00:00:33.460 --> 00:00:38.860
The API fetch function is going to help us send a request to our rest API.

10
00:00:38.890 --> 00:00:47.290
Next, let's import the use state and use effect functions from the WordPress slash element package.

11
00:00:49.480 --> 00:00:55.060
They use effect function will help us send a request when the component has been initialized.

12
00:00:55.090 --> 00:01:00.210
However, we don't want to rescind the request after updating the component.

13
00:01:00.220 --> 00:01:02.720
As for the used state function.

14
00:01:02.740 --> 00:01:06.380
We're going to store the post data in the component state.

15
00:01:06.400 --> 00:01:12.880
It's not necessary to store it as an attribute since the post ID is stored as a transient value.

16
00:01:12.910 --> 00:01:19.180
Lastly, let's import the spinner component from the WordPress slash components package.

17
00:01:25.870 --> 00:01:31.070
The request will take a while to complete while the request is being processed.

18
00:01:31.090 --> 00:01:35.290
We'll display the spinner component to indicate the post is loading.

19
00:01:35.320 --> 00:01:36.950
This is everything we'll need.

20
00:01:36.970 --> 00:01:39.790
Let's start working on the blocks template.

21
00:01:39.820 --> 00:01:41.860
Scroll to the edit function.

22
00:01:41.860 --> 00:01:44.080
Let's define the component state.

23
00:01:44.080 --> 00:01:48.130
With the used state function, the value will be an object.

24
00:01:50.260 --> 00:01:55.780
In this object at a property called is loading with an initial value of true.

25
00:01:58.020 --> 00:02:02.500
This property will be responsible for toggling the appearance of the spinner.

26
00:02:02.520 --> 00:02:06.780
Initially, the spinner will appear while the request is pending.

27
00:02:06.780 --> 00:02:13.140
After the request has been completed, we will toggle this property to false, thus causing the spinner

28
00:02:13.140 --> 00:02:14.150
to disappear.

29
00:02:14.160 --> 00:02:19.950
Next, let's add three properties called URL, image and title.

30
00:02:19.980 --> 00:02:23.400
All properties will have an initial value of no.

31
00:02:25.590 --> 00:02:29.530
These properties will be updated with the data from their response.

32
00:02:29.550 --> 00:02:37.200
After creating the state, let's de structure the return of value into two variables called post and

33
00:02:37.200 --> 00:02:38.370
set post.

34
00:02:40.540 --> 00:02:48.790
Next we can begin to send a request after the use state function run the use effect function with an

35
00:02:48.790 --> 00:02:52.180
arrow function passed in as the second argument.

36
00:02:54.460 --> 00:02:55.990
Before the arrow function.

37
00:02:55.990 --> 00:02:58.060
Add the async keyword.

38
00:03:00.180 --> 00:03:02.130
Requests are asynchronous.

39
00:03:02.130 --> 00:03:05.120
To help us deal with the asynchronous request.

40
00:03:05.130 --> 00:03:12.090
We're adding the async keyword after adding the function at an empty array as the second argument to

41
00:03:12.090 --> 00:03:13.860
the use effect function.

42
00:03:16.000 --> 00:03:21.860
By default, the use effect function will execute the function on every component update.

43
00:03:21.880 --> 00:03:25.390
The request does not need to be sent multiple times.

44
00:03:25.390 --> 00:03:26.900
One time is plenty.

45
00:03:26.920 --> 00:03:33.160
Adding an empty array will instruct react to run the function once during the initialization of the

46
00:03:33.160 --> 00:03:34.090
component.

47
00:03:34.120 --> 00:03:37.840
Let's begin sending the request inside the function.

48
00:03:37.840 --> 00:03:40.510
Create a variable called response.

49
00:03:40.510 --> 00:03:46.510
The value for this variable will be the API fetch function with the weight keyword.

50
00:03:48.790 --> 00:03:54.970
We're going to send the request to our custom end point by passing in an object with a property called

51
00:03:54.970 --> 00:03:55.770
Path.

52
00:03:55.780 --> 00:04:02.770
The path to our endpoint is the following up slash v one slash daily recipe.

53
00:04:05.050 --> 00:04:10.030
After receiving the response, the state can be updated with the response data.

54
00:04:10.060 --> 00:04:14.260
Let's call the set post function inside the object.

55
00:04:14.260 --> 00:04:17.709
Let's set the is loading property to false.

56
00:04:17.709 --> 00:04:21.029
This value indicates the request has been completed.

57
00:04:21.040 --> 00:04:24.070
Our block can display the data afterward.

58
00:04:24.070 --> 00:04:27.430
Spread the response variable into the object.

59
00:04:29.610 --> 00:04:33.840
The property names from the response matched the names from our state.

60
00:04:33.870 --> 00:04:38.910
Updating the data is as simple as merging the response data into the state.

61
00:04:39.000 --> 00:04:40.360
Our data is ready.

62
00:04:40.380 --> 00:04:43.230
The final step is to update the template.

63
00:04:43.260 --> 00:04:45.660
This process will be very simple.

64
00:04:45.660 --> 00:04:47.830
It's nothing we haven't done before.

65
00:04:47.850 --> 00:04:50.680
Scroll to the templates and the template.

66
00:04:50.700 --> 00:04:54.000
We have an anchor element for displaying the post.

67
00:04:54.030 --> 00:04:58.300
This element should be updated to dynamically render the post data.

68
00:04:58.320 --> 00:05:01.230
Above the element add the following expression.

69
00:05:01.230 --> 00:05:03.510
Post dot is loading.

70
00:05:03.510 --> 00:05:04.440
Question mark.

71
00:05:04.440 --> 00:05:05.880
Spinner colon.

72
00:05:08.130 --> 00:05:10.050
Before rendering the element.

73
00:05:10.050 --> 00:05:14.520
We are checking the is loading property for a truth value.

74
00:05:14.550 --> 00:05:18.010
If it is, the spinner component should be rendered.

75
00:05:18.030 --> 00:05:23.370
Otherwise lets render the anchor element at the end of the ternary operator.

76
00:05:25.510 --> 00:05:30.790
Lastly, we can update the attributes and text with the post state.

77
00:05:30.790 --> 00:05:35.530
Set the ref attribute to the post dot URL property.

78
00:05:37.650 --> 00:05:42.570
Next set the source attribute to the post dot image property.

79
00:05:44.720 --> 00:05:49.880
Lastly, update the inner text of the H three text with an expression.

80
00:05:50.090 --> 00:05:53.900
The expression will be the post title property.

81
00:05:56.000 --> 00:05:57.570
The block is complete.

82
00:05:57.590 --> 00:06:01.610
Let's try testing the block before moving on in the browser.

83
00:06:01.610 --> 00:06:03.680
Refresh the Gutenberg Editor.

84
00:06:05.560 --> 00:06:08.650
Add the daily recipe block to the page.

85
00:06:10.800 --> 00:06:14.970
Initially, the spinner component will appear for a brief moment.

86
00:06:15.000 --> 00:06:19.300
Once the request is complete, the post data appears in the block.

87
00:06:19.320 --> 00:06:20.100
Perfect.

88
00:06:20.100 --> 00:06:22.680
The block is finished for the Gutenberg editor.

89
00:06:22.710 --> 00:06:28.350
The last steps are to render this information on the front end with server side rendering.

90
00:06:28.380 --> 00:06:31.050
Let's finish our block in the next lecture.

