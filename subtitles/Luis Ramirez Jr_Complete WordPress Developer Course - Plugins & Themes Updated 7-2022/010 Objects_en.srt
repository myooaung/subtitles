1
00:00:00,120 --> 00:00:04,950
In this lecture, we are going to begin our discussion of objects in JavaScript.

2
00:00:04,980 --> 00:00:09,570
During the development of our theme, we got a taste of objects with JSON.

3
00:00:09,600 --> 00:00:14,350
As a reminder, JSON stands for JavaScript object notation.

4
00:00:14,370 --> 00:00:18,130
The syntax for JSON was heavily inspired by Java scripts.

5
00:00:18,150 --> 00:00:19,560
Object Syntax.

6
00:00:19,560 --> 00:00:24,300
By knowing JSON, you already have an idea of what an object is.

7
00:00:24,300 --> 00:00:27,920
An object is a data type for storing a group of data.

8
00:00:27,930 --> 00:00:30,040
They're very similar to arrays.

9
00:00:30,060 --> 00:00:33,660
However, there are some big differences between the two.

10
00:00:33,690 --> 00:00:35,650
Let's get into an example.

11
00:00:35,760 --> 00:00:40,470
Inside the browser, open the snippet section of the developer tools.

12
00:00:40,470 --> 00:00:44,420
We will be working with the index file inside the file.

13
00:00:44,430 --> 00:00:46,170
Clear the existing code.

14
00:00:46,170 --> 00:00:47,870
We're going to start fresh.

15
00:00:47,880 --> 00:00:51,240
Let's create a variable called checking accounts.

16
00:00:53,390 --> 00:00:57,440
The value for this variable will be a pair of curly brackets.

17
00:00:57,440 --> 00:01:01,880
From within this object, we can add what's known as properties.

18
00:01:01,880 --> 00:01:04,610
Properties are key value pairs.

19
00:01:04,610 --> 00:01:10,940
The syntax for creating a property is the same as creating a property in a JSON object.

20
00:01:10,940 --> 00:01:16,040
With one difference let's add a property called name with a value of John.

21
00:01:18,290 --> 00:01:20,190
Here's the first difference.

22
00:01:20,210 --> 00:01:24,430
Property names do not need to be wrapped with quotes in JSON.

23
00:01:24,440 --> 00:01:29,780
Our code would become invalid if we were missing double quotes surrounding the property name.

24
00:01:29,810 --> 00:01:34,220
JavaScript doesn't care about double quotes, they are completely optional.

25
00:01:34,250 --> 00:01:37,690
Let's try adding another property called balance.

26
00:01:37,700 --> 00:01:40,940
The value for this property will be 1000.

27
00:01:43,060 --> 00:01:47,170
Properties can be set to any type of value just like that.

28
00:01:47,200 --> 00:01:49,810
We've created our first object.

29
00:01:49,840 --> 00:01:56,870
Unlike arrays, the values within an object can be referenced by their name instead of a numeric index.

30
00:01:56,890 --> 00:02:00,520
Let's try accessing a property below the object.

31
00:02:00,520 --> 00:02:02,020
Add an alert function.

32
00:02:04,330 --> 00:02:11,590
The syntax for accessing a value from an object is called dot notation inside the alert function pass

33
00:02:11,590 --> 00:02:15,430
in the following value checking account dot balance.

34
00:02:17,610 --> 00:02:22,140
To begin, you must reference the object where the value exists.

35
00:02:22,170 --> 00:02:26,700
In this example, we're trying to access the balance of the checking accounts.

36
00:02:26,700 --> 00:02:31,110
Before doing so, we need to reference the checking account variable.

37
00:02:31,140 --> 00:02:36,180
Next, we need to type a dot to grab a value within the object.

38
00:02:36,210 --> 00:02:39,080
Lastly, we can type the property name.

39
00:02:39,090 --> 00:02:42,920
Let's try running the scripts inside the alert box.

40
00:02:42,930 --> 00:02:46,350
The balance from the account has been rendered perfect.

41
00:02:46,380 --> 00:02:48,670
Objects can offer so much more.

42
00:02:48,690 --> 00:02:50,400
We're not limited to strings.

43
00:02:50,400 --> 00:02:56,250
Numbers and booleans arrays can be added to an object inside the object.

44
00:02:56,250 --> 00:03:00,270
Define an array called deposits with the following numbers.

45
00:03:00,270 --> 00:03:01,350
200.

46
00:03:01,350 --> 00:03:02,310
400.

47
00:03:02,310 --> 00:03:03,300
400.

48
00:03:05,570 --> 00:03:11,630
Let's imagine we're keeping track of the deposits made to the accounts inside the alert function.

49
00:03:11,660 --> 00:03:16,820
Update the value to the following checking account dot deposits to.

50
00:03:19,060 --> 00:03:24,780
In this example, we're missing object and array syntax, which is completely allowed.

51
00:03:24,790 --> 00:03:28,120
You can access an array after accessing the property.

52
00:03:28,120 --> 00:03:29,350
Storing the array.

53
00:03:29,500 --> 00:03:30,550
The same is true.

54
00:03:30,550 --> 00:03:31,530
Vice versa.

55
00:03:31,540 --> 00:03:36,930
We're allowed to have an array of objects before accessing an object's properties.

56
00:03:36,960 --> 00:03:39,940
We must access the item via its index.

57
00:03:39,970 --> 00:03:41,920
Let's try running the scripts.

58
00:03:42,070 --> 00:03:45,830
The last number from the array should appear in the alert box.

59
00:03:45,850 --> 00:03:47,530
So far, so good.

60
00:03:47,560 --> 00:03:50,530
There's one last feature worth talking about.

61
00:03:50,560 --> 00:03:52,840
Objects can support functions.

62
00:03:52,840 --> 00:03:55,320
JSON does not allow functions.

63
00:03:55,330 --> 00:03:59,560
This is because JSON is not a language for processing logic.

64
00:03:59,560 --> 00:04:02,530
We're completely limited to raw data.

65
00:04:02,680 --> 00:04:06,210
JavaScript supports functions from within an object.

66
00:04:06,220 --> 00:04:11,230
Let's define a function for performing a withdrawal inside the object.

67
00:04:11,230 --> 00:04:13,570
Define a property called withdraw.

68
00:04:15,950 --> 00:04:19,579
The value for this property will be an anonymous function.

69
00:04:21,750 --> 00:04:24,900
Anonymous functions are functions without a name.

70
00:04:24,930 --> 00:04:27,050
Assigning a name is not necessary.

71
00:04:27,060 --> 00:04:31,140
JavaScript will store the function under the withdraw property.

72
00:04:31,140 --> 00:04:34,320
There's a shorthand syntax for writing a function.

73
00:04:34,350 --> 00:04:38,820
The function keyword and the colon character can be removed.

74
00:04:40,900 --> 00:04:45,020
This shorthand syntax will result in a function definition.

75
00:04:45,040 --> 00:04:48,090
You may prefer it over the longer syntax.

76
00:04:48,100 --> 00:04:52,630
For the rest of this course, we're going to stick to this shorthand syntax.

77
00:04:52,630 --> 00:04:55,060
In my opinion, it's easier to read.

78
00:04:55,060 --> 00:04:59,170
Next, let's add an argument to the function called amounts.

79
00:05:01,310 --> 00:05:02,750
Inside the function.

80
00:05:02,750 --> 00:05:05,300
Let's deduct the amount from the balance.

81
00:05:05,330 --> 00:05:08,900
Updating a property is the same as updating a variable.

82
00:05:08,900 --> 00:05:13,040
We must access the property before assigning a new value.

83
00:05:13,040 --> 00:05:14,660
Write the following code.

84
00:05:14,660 --> 00:05:18,470
Checking accounts dot balance equals checking accounts.

85
00:05:18,470 --> 00:05:20,720
Dot balance minus amounts.

86
00:05:22,860 --> 00:05:24,930
We've got a long line of code.

87
00:05:24,960 --> 00:05:29,160
However, all we're doing is deducting the amount from the balance.

88
00:05:29,160 --> 00:05:33,210
At the start of the line, we're accessing the balance property.

89
00:05:33,210 --> 00:05:38,130
Next, we're subtracting the amount argument from the balance property.

90
00:05:38,160 --> 00:05:41,610
Let's try testing our code below the object.

91
00:05:41,610 --> 00:05:45,330
Run the withdraw function with a value of 200.

92
00:05:47,490 --> 00:05:52,660
Once again, functions can be accessed from within an object using dot notation.

93
00:05:52,680 --> 00:05:58,230
After accessing the object's properties, we can run a function like any other function.

94
00:05:58,230 --> 00:06:02,430
Let's update the alert function to output the new balance.

95
00:06:04,530 --> 00:06:09,810
To recap, we have a function called withdraw, which will deduct the balance.

96
00:06:09,810 --> 00:06:15,930
The amount deducted will be based on the value passed into the function where executing this function

97
00:06:15,930 --> 00:06:17,730
before checking the balance.

98
00:06:17,730 --> 00:06:21,420
If we did everything right, we should have a new balance.

99
00:06:21,420 --> 00:06:23,790
Run the scripts in the alert.

100
00:06:23,820 --> 00:06:25,620
The New Balance gets rendered.

101
00:06:25,650 --> 00:06:30,360
Objects in JavaScript are much more powerful than objects in JSON.

102
00:06:30,360 --> 00:06:35,190
Being able to add functions gives us control over an object's properties.

103
00:06:35,190 --> 00:06:36,750
But wait, there's more.

104
00:06:36,780 --> 00:06:39,240
This line of code is way too long.

105
00:06:39,240 --> 00:06:41,070
It can be difficult to read.

106
00:06:41,220 --> 00:06:45,090
Luckily there is a feature for shortening this line of code.

107
00:06:45,090 --> 00:06:48,510
It's called the this keyword inside the function.

108
00:06:48,510 --> 00:06:52,650
Replace the checking account object with the this keyword.

109
00:06:54,890 --> 00:07:00,500
For most beginners, the this key word can be a confusing concept to understand.

110
00:07:00,530 --> 00:07:03,700
I'll try my best to explain this key word.

111
00:07:03,710 --> 00:07:10,290
The this keyword is a special keyword in the JavaScript language for referencing an object from within.

112
00:07:10,310 --> 00:07:14,690
Inside our function, we're attempting to update the balanced property.

113
00:07:14,690 --> 00:07:19,610
The balance property exists within the same object as the withdraw function.

114
00:07:19,610 --> 00:07:21,260
They have a relationship.

115
00:07:21,440 --> 00:07:25,340
The this key word will attempt to search through the same object.

116
00:07:25,340 --> 00:07:27,740
The withdrawal function was defined in.

117
00:07:27,740 --> 00:07:32,800
If the withdrawal function were defined elsewhere, the this keyword wouldn't work.

118
00:07:32,810 --> 00:07:39,950
For this reason we can't use the this keyword during the execution of the withdrawal function JavaScript

119
00:07:39,950 --> 00:07:42,500
wouldn't know where to define the object.

120
00:07:42,500 --> 00:07:46,400
The This keyword may only be used from within an object.

121
00:07:46,490 --> 00:07:48,530
Let's try running our scripts.

122
00:07:48,530 --> 00:07:51,620
The same result will appear in the alert box.

123
00:07:51,620 --> 00:07:58,070
In a nutshell, the this keyword is a quick and easy way to grab a value from the same object.

124
00:07:58,100 --> 00:08:03,290
Furthermore, it can be useful from accidentally selecting the wrong object.

125
00:08:03,290 --> 00:08:06,200
What if we had a savings and investments accounts?

126
00:08:06,200 --> 00:08:12,830
It's likely that these accounts may have a separate object with their own balances to prevent us from

127
00:08:12,830 --> 00:08:15,230
accidentally selecting the wrong object.

128
00:08:15,230 --> 00:08:21,650
The this keyword guarantees that you're grabbing properties from the same object it was used in.

129
00:08:21,650 --> 00:08:25,340
Overall, it's a common keyword to use with objects.

130
00:08:25,340 --> 00:08:27,590
We don't get a lot of practice with it.

131
00:08:29,750 --> 00:08:35,120
One less thing functions to find in an object can be referred to as a method.

132
00:08:35,150 --> 00:08:38,679
Functions and methods can be interchangeable terms.

133
00:08:38,690 --> 00:08:41,120
However, there is a distinction.

134
00:08:41,150 --> 00:08:46,540
Normally, developers will refer to functions inside an object as a method.

135
00:08:46,550 --> 00:08:49,970
Functions outside of an object are called a function.

136
00:08:50,000 --> 00:08:53,750
That wraps up our discussion of objects in JavaScript.

137
00:08:53,780 --> 00:08:57,590
Let's explore some objects defined by the language.

