WEBVTT
1
00:00:00.120 --> 00:00:04.230
In this lecture, we are going to explore a feature called Loops.

2
00:00:04.230 --> 00:00:08.670
There's one common scenario you will come across in your programming journey.

3
00:00:08.670 --> 00:00:13.670
You may want to output the entire collection of an array inside of a script.

4
00:00:13.680 --> 00:00:16.079
There are three items in the array.

5
00:00:16.110 --> 00:00:21.060
Writing an eco statement for each item is possible, but not scalable.

6
00:00:21.060 --> 00:00:25.350
If there were dozens of items, this process would become tedious.

7
00:00:25.350 --> 00:00:27.240
What if the array changes?

8
00:00:27.240 --> 00:00:31.230
Our echo statements would require constant updates.

9
00:00:31.440 --> 00:00:36.120
I don't feel like babysitting our code to correctly output the entire array.

10
00:00:36.150 --> 00:00:41.730
Luckily we can avoid this scenario by using another feature called Loops.

11
00:00:42.300 --> 00:00:46.530
PHP provides a feature for looping through the contents of an array.

12
00:00:46.560 --> 00:00:50.790
We can create a loop by typing the wild keyword.

13
00:00:50.790 --> 00:00:54.630
Let's replace the echo statements with the wild keyword.

14
00:00:56.750 --> 00:01:00.950
Next, we can add a pair of parentheses and curly brackets.

15
00:01:03.220 --> 00:01:06.470
A wild loop is composed of two pieces.

16
00:01:06.490 --> 00:01:10.630
The first piece is the condition inside the parentheses.

17
00:01:10.630 --> 00:01:13.390
We must provide a condition for the loop.

18
00:01:13.480 --> 00:01:19.060
A condition will tell PHP to execute the code written inside the curly brackets.

19
00:01:19.060 --> 00:01:22.690
As long as the condition is true, the loop will run.

20
00:01:22.990 --> 00:01:25.180
I should provide a word of caution.

21
00:01:25.180 --> 00:01:28.150
It is possible to create an infinite loop.

22
00:01:28.150 --> 00:01:32.710
I highly advise against creating an infinite loop for various reasons.

23
00:01:32.710 --> 00:01:35.440
It can each resources on your machine.

24
00:01:35.440 --> 00:01:40.990
Some hosts will even shut down your account if you attempt to create an infinite loop.

25
00:01:41.290 --> 00:01:44.680
Our goal is to loop through each item in the array.

26
00:01:44.710 --> 00:01:49.480
After the loop has gone through every value, it should stop running first.

27
00:01:49.480 --> 00:01:55.450
We need to keep track of how many times the loop has executed the block of code above the loop.

28
00:01:55.450 --> 00:01:59.740
Create a variable called count with a value of zero.

29
00:02:01.860 --> 00:02:08.160
Next inside the condition, let's add the following count less than count food.

30
00:02:10.410 --> 00:02:13.570
There are a couple of things to note about this condition.

31
00:02:13.590 --> 00:02:16.780
Firstly, we're using a function called counts.

32
00:02:16.800 --> 00:02:22.470
The count function is defined by the PHP language as its name suggests.

33
00:02:22.500 --> 00:02:24.660
It'll count the items in an array.

34
00:02:24.690 --> 00:02:27.480
This value is returned by the function.

35
00:02:27.750 --> 00:02:34.450
Secondly, we are comparing the count variable with the value returned by the count function.

36
00:02:34.470 --> 00:02:37.680
Initially, the count variable will be zero.

37
00:02:37.710 --> 00:02:40.170
There are three items in the array.

38
00:02:40.200 --> 00:02:45.610
Therefore we can assume the condition will check if zero is less than three.

39
00:02:45.630 --> 00:02:50.170
This condition is true in the resource section of this lecture.

40
00:02:50.190 --> 00:02:54.870
I provide a link to the documentation page for comparison operators.

41
00:02:57.250 --> 00:02:58.360
Out of the box.

42
00:02:58.810 --> 00:03:02.420
PHP provides dozens of comparison operators.

43
00:03:02.440 --> 00:03:07.870
As its name implies, comparison operators will compare two values.

44
00:03:07.870 --> 00:03:12.730
In our case, we are comparing if one value is less than another.

45
00:03:12.760 --> 00:03:17.830
You can view this table for a complete list of comparison operators.

46
00:03:17.860 --> 00:03:23.820
Feel free to play around with different comparison operators after you finished this lecture.

47
00:03:23.830 --> 00:03:26.020
Let's go back to our editors.

48
00:03:28.170 --> 00:03:30.480
The condition will always be true.

49
00:03:30.510 --> 00:03:33.430
Therefore, we have created an infinite loop.

50
00:03:33.450 --> 00:03:38.910
We should update the count variable on each iteration inside the curly brackets.

51
00:03:38.940 --> 00:03:43.680
Let's update the count variable to the count variable plus one.

52
00:03:45.920 --> 00:03:48.890
Let's break down the behavior of the while loop.

53
00:03:48.920 --> 00:03:53.810
Initially, pee pee will check the condition if the condition is true.

54
00:03:53.840 --> 00:03:56.330
The code inside the block will execute.

55
00:03:56.330 --> 00:04:04.200
In our block of code, we're updating the count variable by adding one after the code has finished executing.

56
00:04:04.220 --> 00:04:06.050
The condition is checked again.

57
00:04:06.050 --> 00:04:09.980
This time the count variable will be set to one.

58
00:04:09.980 --> 00:04:11.870
One is less than three.

59
00:04:11.870 --> 00:04:14.330
Therefore the condition is true.

60
00:04:14.360 --> 00:04:17.540
Once again, the block of code will execute.

61
00:04:17.570 --> 00:04:21.709
Eventually, the count variable will not be less than three.

62
00:04:21.740 --> 00:04:23.600
Our loop will stop running.

63
00:04:23.630 --> 00:04:25.780
This is the most important step.

64
00:04:25.790 --> 00:04:29.010
We should always stop our loop from infinitely running.

65
00:04:29.030 --> 00:04:31.010
Now that we've established a loop.

66
00:04:31.040 --> 00:04:36.360
Let's try echoing the values from the array before updating the count variable.

67
00:04:36.380 --> 00:04:38.630
Let's output the food array.

68
00:04:40.900 --> 00:04:42.760
Inside these square brackets.

69
00:04:42.760 --> 00:04:44.890
Let's add the count variable.

70
00:04:47.130 --> 00:04:52.440
Instead of writing a raw value, we're using the count variable as the index.

71
00:04:52.470 --> 00:04:55.980
Conveniently, the account variable starts at zero.

72
00:04:56.010 --> 00:05:03.000
On each iteration, it'll update by one, which gives us access to the next value in the array.

73
00:05:03.030 --> 00:05:08.550
If our theory is correct, we should be able to view all values in the array.

74
00:05:08.580 --> 00:05:10.440
Let's check out the browser.

75
00:05:12.700 --> 00:05:13.560
Perfect.

76
00:05:13.570 --> 00:05:16.160
We've rendered all items in the array.

77
00:05:16.180 --> 00:05:21.670
If we remove or add items, the page should be reflected with the changes.

78
00:05:21.700 --> 00:05:25.350
Currently, our code is not formatted, but that's all right.

79
00:05:25.360 --> 00:05:29.620
As long as all items are displayed on the page, we're good to go.

80
00:05:29.830 --> 00:05:34.660
Before I am this lecture, there's a shorthand syntax I want to show you.

81
00:05:34.690 --> 00:05:36.400
Go back to your editor.

82
00:05:36.910 --> 00:05:40.830
PHP has additional features for helping you write less code.

83
00:05:40.840 --> 00:05:47.410
Instead of updating the count variable, we can replace the assignment with two plus symbols.

84
00:05:49.580 --> 00:05:53.100
Two plus symbols are called the increment operator.

85
00:05:53.120 --> 00:05:57.200
They perform the same action as incrementing a number by one.

86
00:05:57.230 --> 00:06:00.350
There isn't a difference between the two solutions.

87
00:06:00.350 --> 00:06:06.680
However, most developers prefer this operator because it results in writing less code.

88
00:06:07.070 --> 00:06:11.550
Another shorthand syntax you should be aware of is for arrays.

89
00:06:11.570 --> 00:06:15.440
Let's replace the array function with square brackets.

90
00:06:17.780 --> 00:06:21.260
You don't need to use the array function to create an array.

91
00:06:21.350 --> 00:06:24.410
A pair of square brackets will create an array.

92
00:06:24.440 --> 00:06:27.080
Once again, either solution works.

93
00:06:27.080 --> 00:06:28.970
It's a matter of preference.

94
00:06:28.970 --> 00:06:36.770
Some developers prefer the array function because it gives clarity as to the type of value you're creating.

95
00:06:37.010 --> 00:06:39.680
We're finished with our discussion of arrays.

96
00:06:39.710 --> 00:06:41.870
I'll see you in the next lecture.

