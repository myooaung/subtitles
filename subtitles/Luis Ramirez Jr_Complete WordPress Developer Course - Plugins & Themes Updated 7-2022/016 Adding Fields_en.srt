1
00:00:00,090 --> 00:00:04,210
In this lecture, we are going to begin adding fields to our form.

2
00:00:04,230 --> 00:00:05,939
This step is very easy.

3
00:00:05,939 --> 00:00:10,380
Similar to other steps, WordPress has a function for adding a field.

4
00:00:10,380 --> 00:00:12,840
Fields must be added to a section.

5
00:00:12,840 --> 00:00:15,840
Luckily we have a section on our page.

6
00:00:15,840 --> 00:00:18,630
Our fields can be added to this section.

7
00:00:18,630 --> 00:00:23,520
Let's get started by opening the settings api php file.

8
00:00:25,720 --> 00:00:30,460
At the bottom of the function, run a function called add settings fields.

9
00:00:32,670 --> 00:00:35,450
This function will add a field to a section.

10
00:00:35,460 --> 00:00:37,430
There are five arguments.

11
00:00:37,440 --> 00:00:40,380
The first argument is an ID for the field.

12
00:00:40,380 --> 00:00:44,520
Let's set the ID to ogg title input.

13
00:00:46,660 --> 00:00:49,610
Next, we must add the text for the label.

14
00:00:49,630 --> 00:00:52,630
The label will sit to the side of the input.

15
00:00:52,660 --> 00:00:56,480
This input will represent the title of the open graph.

16
00:00:56,500 --> 00:01:01,570
Let's use the following translatable text open graph title.

17
00:01:03,930 --> 00:01:07,840
Up next, we must provide a function for rendering the input.

18
00:01:07,860 --> 00:01:10,900
The input element is our responsibility.

19
00:01:10,920 --> 00:01:16,590
The Settings API does not render this element, but it will help us with setting the value.

20
00:01:16,620 --> 00:01:21,390
The name of our function will be called OGG Title Input CB.

21
00:01:23,580 --> 00:01:26,250
In a moment, we will define this function.

22
00:01:26,250 --> 00:01:29,990
Let's move on to the next argument, which is the pages name.

23
00:01:30,000 --> 00:01:33,880
WordPress doesn't know which page the input will appear on.

24
00:01:33,900 --> 00:01:36,330
Therefore, we must provide the name.

25
00:01:36,330 --> 00:01:42,650
The value must correspond with the value passed into the due settings section's function.

26
00:01:42,660 --> 00:01:47,100
In our case, the page's name is called Up Options Page.

27
00:01:49,360 --> 00:01:52,670
Lastly, we must provide the name of the section.

28
00:01:52,690 --> 00:01:56,320
Our section is called Up Options Section.

29
00:01:58,600 --> 00:01:59,270
Great.

30
00:01:59,290 --> 00:02:04,660
The last step is to define the function for rendering the input below this function.

31
00:02:04,660 --> 00:02:08,889
Define the OGG title input CB function.

32
00:02:11,020 --> 00:02:15,720
In this function, we can output an input element for storing the value.

33
00:02:15,730 --> 00:02:18,010
First, let's grab the option.

34
00:02:18,050 --> 00:02:20,560
Define a variable called options.

35
00:02:20,560 --> 00:02:24,550
The value for this variable will be the get option function.

36
00:02:26,660 --> 00:02:29,930
The name of the option is called up options.

37
00:02:31,960 --> 00:02:32,860
Afterward.

38
00:02:32,860 --> 00:02:35,110
Let's render the input element.

39
00:02:37,230 --> 00:02:41,430
On this element set the class attribute to regular text.

40
00:02:43,480 --> 00:02:47,780
The input will have similar attributes to the element from the other page.

41
00:02:47,800 --> 00:02:54,520
Next, let's set the name attribute to the following value up options OG Title.

42
00:02:56,580 --> 00:02:58,800
Here's where things become different.

43
00:02:58,830 --> 00:03:01,820
Normally, we would give our input to a custom name.

44
00:03:01,830 --> 00:03:06,570
However, we must set the name attribute to the name of the option.

45
00:03:06,600 --> 00:03:09,330
WordPress handles processing the form.

46
00:03:09,330 --> 00:03:12,090
We do not need to intercept the request.

47
00:03:12,090 --> 00:03:16,770
For this reason, the name of our input must match the name of our option.

48
00:03:16,770 --> 00:03:23,520
If our option is an array, we need to add a pair of square brackets to specify the item in the array.

49
00:03:23,850 --> 00:03:28,350
The last attribute will be the value attribute we should output.

50
00:03:28,350 --> 00:03:30,450
The current value of this function.

51
00:03:30,480 --> 00:03:36,240
Echo the options OG title variable with the escape attribute function.

52
00:03:38,390 --> 00:03:42,850
Let's test our input before adding the other inputs in the browser.

53
00:03:42,860 --> 00:03:44,450
Refresh the page.

54
00:03:46,790 --> 00:03:51,360
Our input appears in the section with the original value of the option.

55
00:03:51,380 --> 00:03:52,040
Great.

56
00:03:52,040 --> 00:03:55,180
Let's try adding the other fields to our form.

57
00:03:55,190 --> 00:03:57,960
The process is going to be very similar.

58
00:03:57,980 --> 00:04:04,220
Back in the editor, let's make three copies of the add settings field function.

59
00:04:06,410 --> 00:04:09,620
In total, we are going to have four fields.

60
00:04:09,650 --> 00:04:12,780
Each copy should reflect an option from our plugin.

61
00:04:12,800 --> 00:04:15,400
Let's update these fields first.

62
00:04:15,410 --> 00:04:20,450
The second field can be updated by changing the word title to image.

63
00:04:25,290 --> 00:04:30,870
Next, change the third field by changing the word title to description.

64
00:04:36,140 --> 00:04:41,600
Lastly, change the fourth field by changing the word title to enable.

65
00:04:46,690 --> 00:04:47,780
We're almost done.

66
00:04:47,800 --> 00:04:53,090
The last step is to define the function for rendering the inputs of our other fields.

67
00:04:53,110 --> 00:04:56,680
To save time, I have prepared these functions for you.

68
00:04:56,680 --> 00:05:01,150
In the resource section of this lecture, I provide a link to a gist.

69
00:05:03,310 --> 00:05:07,010
This just contains a list of functions for the inputs.

70
00:05:07,030 --> 00:05:09,010
Copy them to your clipboard.

71
00:05:11,160 --> 00:05:16,080
Next paced them into the settings api dot php file.

72
00:05:18,280 --> 00:05:24,010
If you were to look through the functions, you'd notice one thing they're very similar to the inputs

73
00:05:24,010 --> 00:05:25,800
from the original page.

74
00:05:25,810 --> 00:05:31,340
We can safely copy and paste the inputs from the original page to these functions.

75
00:05:31,360 --> 00:05:38,890
The modifications I've performed on these inputs are by changing the name attribute to the fields respective

76
00:05:38,890 --> 00:05:39,610
option.

77
00:05:39,640 --> 00:05:43,420
Other than that, they're mostly the same for the image.

78
00:05:43,420 --> 00:05:46,210
I'm using the button to change the image.

79
00:05:46,210 --> 00:05:48,910
However, this solution will not work.

80
00:05:48,910 --> 00:05:53,710
The script for handling the media library will not be in queued on our page.

81
00:05:53,710 --> 00:05:57,310
Let's update the and queue PHP file.

82
00:05:59,710 --> 00:06:05,450
Inside the conditional statements and the following condition or hook suffix.

83
00:06:05,470 --> 00:06:07,210
Equals equals equals.

84
00:06:07,210 --> 00:06:09,400
Utility plus page up.

85
00:06:09,400 --> 00:06:11,440
Plug in options alt.

86
00:06:13,770 --> 00:06:14,820
Ahead of time.

87
00:06:14,820 --> 00:06:18,710
I echoed the hook suffix variable for the other page.

88
00:06:18,720 --> 00:06:24,000
The name and our condition is the name assigned by WordPress for our page.

89
00:06:24,030 --> 00:06:26,490
Let's refresh the page in the browser.

90
00:06:27,170 --> 00:06:30,230
As you can see, the fields appear in the section.

91
00:06:30,230 --> 00:06:33,750
We can freely modify the values, including the image.

92
00:06:33,770 --> 00:06:37,610
After modifying these values, we can submit the form.

93
00:06:39,820 --> 00:06:43,910
Like I said before, we do not need to intercept the request.

94
00:06:43,930 --> 00:06:47,750
The Settings API is capable of updating our options.

95
00:06:47,770 --> 00:06:51,230
This is one of the benefits of using the settings API.

96
00:06:51,250 --> 00:06:53,950
We can avoid processing the request.

97
00:06:53,980 --> 00:06:57,250
We've completed the form with the settings API.

98
00:06:57,280 --> 00:06:58,480
In this section.

99
00:06:58,480 --> 00:07:01,080
Both forms perform the same action.

100
00:07:01,090 --> 00:07:03,340
The first form is a custom form.

101
00:07:03,340 --> 00:07:06,670
The other form was developed with the Settings API.

102
00:07:06,700 --> 00:07:08,520
Each developer is different.

103
00:07:08,530 --> 00:07:11,950
Some might like the Settings API, but others may not.

104
00:07:11,980 --> 00:07:13,810
There isn't a wrong answer.

105
00:07:13,840 --> 00:07:16,740
Use whichever solution suits your plugin.

106
00:07:16,750 --> 00:07:21,040
I just wanted to present both options in the next set of lectures.

107
00:07:21,040 --> 00:07:25,450
We are going to begin adding these options to the Gutenberg Editor.

