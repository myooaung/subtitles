1
00:00:00,120 --> 00:00:05,360
In this lecture, we are going to begin working on the form by waiting for the document to load.

2
00:00:05,370 --> 00:00:09,850
Before we do, let's talk about using React versus plain JavaScript.

3
00:00:09,870 --> 00:00:16,140
Throughout these past few sections, we've been relying on React to help us build blocks we are required

4
00:00:16,140 --> 00:00:19,950
to use React with the Gutenberg editor on the front end.

5
00:00:19,950 --> 00:00:21,210
It's a different story.

6
00:00:21,210 --> 00:00:23,760
WordPress is frontend agnostic.

7
00:00:23,760 --> 00:00:28,710
We are allowed to use any library or framework for building interfaces.

8
00:00:28,710 --> 00:00:31,830
It's completely up to you if you would like to use React.

9
00:00:31,830 --> 00:00:36,090
In our theme for this course, we are going to explore two options.

10
00:00:36,090 --> 00:00:40,200
First, we are going to build interfaces with plain JavaScript.

11
00:00:40,200 --> 00:00:44,760
Secondly, we will build interfaces with React on the front end.

12
00:00:44,760 --> 00:00:46,500
Both options are viable.

13
00:00:46,500 --> 00:00:52,920
By experiencing both options, you will be able to decide what best suits you for this block.

14
00:00:52,920 --> 00:00:57,570
We are going to use plain JavaScript, no libraries or frameworks.

15
00:00:57,570 --> 00:01:01,440
The first step in our journey is to wait for the document to load.

16
00:01:01,470 --> 00:01:06,420
To understand why, let's open the elements panel with the developer tools.

17
00:01:08,460 --> 00:01:12,510
Next, let's search for the front end DJ's file.

18
00:01:14,690 --> 00:01:17,390
The file gets loaded with the scripts tag.

19
00:01:17,420 --> 00:01:18,860
That much is obvious.

20
00:01:18,860 --> 00:01:22,650
However, the location of the scripts tag is not ideal.

21
00:01:22,670 --> 00:01:26,070
If we look at the parent element, it's the head tag.

22
00:01:26,090 --> 00:01:32,300
Previously we talked about loading scripts in the footer by adding a script in the head section.

23
00:01:32,300 --> 00:01:34,970
We may experience issues with blocking.

24
00:01:35,240 --> 00:01:41,420
As of the recording of this lecture, there isn't a solution for forcing the script to be loaded in

25
00:01:41,420 --> 00:01:42,110
the footer.

26
00:01:42,110 --> 00:01:48,230
Luckily, there is a solution for waiting for the document to load inside your text editor.

27
00:01:48,260 --> 00:01:50,780
Open the front end JS file.

28
00:01:53,020 --> 00:01:58,900
Replace the long statement with the following function document dot add event listener.

29
00:02:01,080 --> 00:02:04,300
JavaScript is a language that has an event system.

30
00:02:04,320 --> 00:02:08,250
We can listen to various events on the elements in our document.

31
00:02:08,280 --> 00:02:12,050
Normally we would add a property to a component or element.

32
00:02:12,060 --> 00:02:15,510
However, that's the react way of listening to events.

33
00:02:15,510 --> 00:02:18,480
With plain JavaScript, the syntax is different.

34
00:02:18,510 --> 00:02:23,340
We can call the add event listener function to listen for an event.

35
00:02:23,370 --> 00:02:26,380
This function must be changed to an element.

36
00:02:26,400 --> 00:02:33,630
In this example, we are changing the function on the document object which represents the entire documents.

37
00:02:33,660 --> 00:02:40,320
The document object has a special event inside the first argument of this function, we must provide

38
00:02:40,320 --> 00:02:42,300
the event's name as a string.

39
00:02:42,300 --> 00:02:46,740
Let's pass in an event called DOM Content Loaded.

40
00:02:48,950 --> 00:02:53,150
This event will be emitted after the entire document has been loaded.

41
00:02:53,180 --> 00:02:54,320
This is perfect.

42
00:02:54,320 --> 00:03:00,020
By waiting for the document to be loaded, we are safe to begin executing JavaScript.

43
00:03:00,050 --> 00:03:04,640
It doesn't matter if the script was added to the head section of a document.

44
00:03:04,760 --> 00:03:08,360
You may be wondering why haven't we use this event earlier?

45
00:03:08,390 --> 00:03:12,620
Beforehand we relied on Gutenberg to wait for the document to load.

46
00:03:12,650 --> 00:03:16,430
This means we never had to worry about waiting for the documents.

47
00:03:16,460 --> 00:03:19,810
We benefited greatly from Gutenberg's behavior.

48
00:03:19,820 --> 00:03:23,450
However, we're not loading the script for the Gutenberg editor.

49
00:03:23,480 --> 00:03:27,110
Therefore, we must handle this process ourselves.

50
00:03:27,140 --> 00:03:30,990
The second argument to this function is a callback function.

51
00:03:31,010 --> 00:03:35,360
The browser will run our function after the event has been emitted.

52
00:03:35,390 --> 00:03:37,730
Let's pass in an arrow function.

53
00:03:39,880 --> 00:03:43,060
Lastly, let's log a message to the console.

54
00:03:45,130 --> 00:03:50,050
Let's test our code by refreshing the experimental page in the browser.

55
00:03:52,210 --> 00:03:54,190
Inside the console panel.

56
00:03:54,220 --> 00:03:56,740
The message from our file has been logged.

57
00:03:56,770 --> 00:04:02,290
This indicates the event was emitted after the document had been completely loaded.

58
00:04:02,320 --> 00:04:05,070
We are safe to execute additional code.

59
00:04:05,080 --> 00:04:10,730
If you're ever working on the front end, you should always load scripts at the bottom of the documents.

60
00:04:10,750 --> 00:04:13,690
If you can't, you can resort to this event.

