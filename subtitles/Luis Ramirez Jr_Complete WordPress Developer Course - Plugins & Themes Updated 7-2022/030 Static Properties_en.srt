1
00:00:00,180 --> 00:00:05,510
In this lecture we are going to talk about static properties for PHP classes.

2
00:00:05,520 --> 00:00:09,770
During our last discussion of classes, we talked about creating them.

3
00:00:09,780 --> 00:00:14,310
As we learned, we cannot use a class until we've created an instance.

4
00:00:14,310 --> 00:00:18,660
This instance stores a copy of the property and methods from the class.

5
00:00:18,660 --> 00:00:22,290
In some cases, we may not need to create an instance.

6
00:00:22,290 --> 00:00:28,980
It's possible to access a classes, properties and methods with a feature called Static Classes.

7
00:00:28,980 --> 00:00:30,720
Let's look at an example.

8
00:00:30,720 --> 00:00:37,590
In the resource section of this lecture, I provide a link to the PHP playgrounds inside this playground.

9
00:00:37,590 --> 00:00:39,210
Clear the existing code.

10
00:00:39,210 --> 00:00:42,870
After clearing the editor, create a class called Car.

11
00:00:45,000 --> 00:00:48,840
Next, create a public property called Brands.

12
00:00:48,870 --> 00:00:52,800
Feel free to set this property to your favorite car brands.

13
00:00:55,040 --> 00:01:01,070
Outside of the class, we can access this property by creating a new instance of a class.

14
00:01:01,070 --> 00:01:04,160
Let's create a new variable called My Car.

15
00:01:04,190 --> 00:01:09,200
The value for this variable will be a new instance of the car class.

16
00:01:11,330 --> 00:01:14,270
Lastly, let's echo the brand variable.

17
00:01:16,370 --> 00:01:19,510
Typically this is how we can access a property.

18
00:01:19,520 --> 00:01:21,430
It's a two step process.

19
00:01:21,440 --> 00:01:24,040
First, we must create an instance.

20
00:01:24,050 --> 00:01:28,160
Afterward, we can access the property through the instance.

21
00:01:28,160 --> 00:01:30,710
This is the default behavior of a class.

22
00:01:30,710 --> 00:01:33,200
But what if we only need the brand variable?

23
00:01:33,200 --> 00:01:36,950
We may not always need to have a copy of the class.

24
00:01:36,950 --> 00:01:41,510
Luckily, we can shorten the process by using the static keyword.

25
00:01:41,510 --> 00:01:45,290
This keyword must be added after the access modifier.

26
00:01:45,290 --> 00:01:49,220
Let's add this keyword after the public keyword.

27
00:01:49,520 --> 00:01:53,300
After doing so, we can remove the mycar variable.

28
00:01:55,490 --> 00:01:59,930
Secondly, we can replace the Arrow character with double colons.

29
00:02:01,970 --> 00:02:06,320
Static properties do not need to be accessed via an instance.

30
00:02:06,740 --> 00:02:10,900
PHP will create this property after the class has been defined.

31
00:02:10,910 --> 00:02:13,780
We can access a static property right away.

32
00:02:13,790 --> 00:02:15,710
Let's try running the script.

33
00:02:17,930 --> 00:02:21,970
After a few seconds, the car brand will appear in the output.

34
00:02:21,980 --> 00:02:25,600
As you can see, static properties require less code.

35
00:02:25,610 --> 00:02:30,620
So what are the differences between a static and non static property?

36
00:02:30,650 --> 00:02:36,440
Static properties are universal, whereas normal properties are unique to each instance.

37
00:02:36,470 --> 00:02:42,190
If we had two instances of a class, each instance will be given unique properties.

38
00:02:42,200 --> 00:02:46,730
Modifying the property of an instance will not affect other instances.

39
00:02:46,760 --> 00:02:49,720
The same can't be said for static properties.

40
00:02:49,730 --> 00:02:52,760
We only have one copy of the static property.

41
00:02:52,760 --> 00:02:58,730
It doesn't matter if we had hundreds of instances of the same class, they'll contain the same copy.

42
00:02:58,730 --> 00:03:05,090
If we update the property from one location, all locations will be reflected with the changes.

43
00:03:05,120 --> 00:03:08,880
It's up to you to decide if you want to use static properties.

44
00:03:08,900 --> 00:03:12,110
They're not common, but they can come in handy from time to time.

45
00:03:12,110 --> 00:03:16,190
In the next lecture, let's look at an example from WordPress.

