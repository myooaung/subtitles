WEBVTT
1
00:00:00.150 --> 00:00:06.410
In this lecture we are going to load the files in the build directory for the admin dashboard.

2
00:00:06.420 --> 00:00:09.300
At the moment we have a single script file.

3
00:00:09.300 --> 00:00:14.190
However, our admin page will have custom styles on this page.

4
00:00:14.190 --> 00:00:17.100
We are going to display the image as a preview.

5
00:00:17.130 --> 00:00:20.850
The size of the image may be too large for the page.

6
00:00:20.850 --> 00:00:26.820
Let's apply styles to constrain the sciences in the source slash admin directory.

7
00:00:26.850 --> 00:00:29.670
Create a file called Main CSS.

8
00:00:31.860 --> 00:00:36.210
The image tag has the following ID OG Image preview.

9
00:00:39.060 --> 00:00:40.110
For the image.

10
00:00:40.110 --> 00:00:42.780
Set the display property to block.

11
00:00:44.800 --> 00:00:47.890
Set the margin bottom property to 20.

12
00:00:50.030 --> 00:00:54.020
Lastly, set the max width property to 600.

13
00:00:56.190 --> 00:00:59.910
The next step is to import this file from within our script.

14
00:00:59.940 --> 00:01:01.710
Open the index file.

15
00:01:03.850 --> 00:01:05.290
At the top of the file.

16
00:01:05.290 --> 00:01:08.110
Import the main CSS file.

17
00:01:10.310 --> 00:01:15.200
Let's do the build slash admin directory and sign this directory.

18
00:01:15.230 --> 00:01:17.330
A CSS file should appear.

19
00:01:17.360 --> 00:01:20.500
If not, you can try restarting the command.

20
00:01:20.510 --> 00:01:26.840
After confirming the file has been created, we can begin registering and in queuing our files.

21
00:01:26.870 --> 00:01:30.320
Open the indexed PHP plugin file.

22
00:01:32.450 --> 00:01:34.010
At the bottom of the file.

23
00:01:34.010 --> 00:01:35.930
Let's add the init hook.

24
00:01:38.160 --> 00:01:41.680
Typically we would register files from a different hook.

25
00:01:41.700 --> 00:01:46.700
However, the files from the admin dashboard will be in queued conditionally.

26
00:01:46.710 --> 00:01:49.080
They will not be loaded for every page.

27
00:01:49.110 --> 00:01:52.350
I prefer to register files from within one file.

28
00:01:52.380 --> 00:02:00.200
This way I can queue assets from other files, while assets must be in queued from specific files,

29
00:02:00.210 --> 00:02:02.150
they can be registered any time.

30
00:02:02.160 --> 00:02:05.680
I recommend registering assets as early as possible.

31
00:02:05.700 --> 00:02:07.620
The init hook is perfect for.

32
00:02:08.220 --> 00:02:12.330
The name of our function will be called up register assets.

33
00:02:14.460 --> 00:02:19.890
Next let's create a file in the includes directory called register assets.

34
00:02:20.490 --> 00:02:21.090
PHP.

35
00:02:23.480 --> 00:02:26.390
Define the up register asset function.

36
00:02:28.400 --> 00:02:31.470
First, let's register the CSS file.

37
00:02:31.490 --> 00:02:34.970
Run the WP register style function.

38
00:02:37.170 --> 00:02:40.320
The name of the file will be called up admin.

39
00:02:42.430 --> 00:02:48.520
Next, let's generate a full URL to the file by calling the plugins url function.

40
00:02:50.780 --> 00:02:53.120
The path to the file will be the following.

41
00:02:53.120 --> 00:02:57.830
Slash build slash admin slash index CSIS.

42
00:02:59.990 --> 00:03:03.620
The second argument to this function must be the plug in file.

43
00:03:03.650 --> 00:03:08.790
Earlier, we created a constant for storing the path to the main plug and file.

44
00:03:08.810 --> 00:03:11.240
It was called up plug and file.

45
00:03:13.490 --> 00:03:14.140
Great.

46
00:03:14.150 --> 00:03:17.080
We can move on to registering the script file.

47
00:03:17.090 --> 00:03:19.550
We haven't registered a script before.

48
00:03:19.580 --> 00:03:27.030
Normally WordPress would register NQ script files for our blocks since our script is not for a block.

49
00:03:27.050 --> 00:03:29.290
This process will not be automated.

50
00:03:29.300 --> 00:03:31.970
We must manually register an in queue.

51
00:03:32.000 --> 00:03:33.020
Our scripts.

52
00:03:33.020 --> 00:03:40.220
In the resource section of this lecture, I provide a link to a function called WP Register Scripts.

53
00:03:41.060 --> 00:03:44.280
This function will register a script with WordPress.

54
00:03:44.300 --> 00:03:51.810
It has five arguments which are the handle name source array of dependencies, version and footer.

55
00:03:51.830 --> 00:03:55.250
The footer argument is the most serious argument.

56
00:03:55.280 --> 00:03:59.330
WordPress is capable of loading scripts in the header or footer.

57
00:03:59.360 --> 00:04:04.430
This argument gives us the option of choosing where to load the scripts by default.

58
00:04:04.460 --> 00:04:07.520
Scripts are loaded in the header by passing in.

59
00:04:07.520 --> 00:04:10.730
True, these scripts will be loaded in the footer.

60
00:04:12.900 --> 00:04:16.870
As for the rest of the arguments, they're already familiar to us.

61
00:04:16.890 --> 00:04:22.250
They function similarly to the arguments of the WP Register style function.

62
00:04:22.260 --> 00:04:24.660
Let's head back to the editor below.

63
00:04:24.660 --> 00:04:29.760
The Style Registration Call the WP Register script function.

64
00:04:32.050 --> 00:04:35.260
The name of our handle will be called up admin.

65
00:04:37.440 --> 00:04:42.420
It's perfectly acceptable to have matching handle names for our scripts and styles.

66
00:04:42.420 --> 00:04:44.750
They're stored in separate locations.

67
00:04:44.760 --> 00:04:47.770
We do not have to worry about naming conflicts.

68
00:04:47.790 --> 00:04:52.920
Next, let's pass in the URL by calling the plugins URL function.

69
00:04:52.950 --> 00:04:55.380
The path to the file is the following.

70
00:04:55.380 --> 00:04:58.200
Slash build slash admin.

71
00:04:58.200 --> 00:04:59.610
Slash index.

72
00:04:59.910 --> 00:05:00.750
JS.

73
00:05:03.000 --> 00:05:06.780
Lastly, pass in the up plugin file constants.

74
00:05:09.020 --> 00:05:12.030
We're going to take advantage of the fifth arguments.

75
00:05:12.050 --> 00:05:15.860
Our scripts should appear in the footer as we learn before.

76
00:05:15.890 --> 00:05:21.380
Scripts loaded in the footer may block the document from loading by loading the script in the footer.

77
00:05:21.410 --> 00:05:26.400
The entire document can load in the browser before we start adding the arguments.

78
00:05:26.420 --> 00:05:30.050
Let's check out the build slash admin directory.

79
00:05:30.080 --> 00:05:34.760
For most of the course, we never talked about the files generated by Webpack.

80
00:05:34.790 --> 00:05:39.820
Aside from the script and CSS file, other files will be generated.

81
00:05:39.830 --> 00:05:41.300
Let's talk about them.

82
00:05:41.300 --> 00:05:47.750
We have to map files, one for the CSS file and another for the script files.

83
00:05:47.780 --> 00:05:52.600
A map file is a file that D ugly files your code for production.

84
00:05:52.610 --> 00:05:54.740
Your code should always be minified.

85
00:05:54.770 --> 00:06:01.540
Modification involves stripping unnecessary white space from a file, thus reducing the size of a file.

86
00:06:01.550 --> 00:06:06.320
However, you may need to view this file in the browser for debugging purposes.

87
00:06:06.320 --> 00:06:11.060
The map file will help the browser unmodified your code for readability.

88
00:06:11.090 --> 00:06:14.030
Creating a map file is completely optional.

89
00:06:14.030 --> 00:06:19.010
It doesn't help the performance of your site, it's purely for debugging purposes.

90
00:06:19.040 --> 00:06:21.620
The last file is a PHP file.

91
00:06:21.620 --> 00:06:25.160
It's weird to have this file in the source directory.

92
00:06:25.160 --> 00:06:27.770
We do not have a single PHP file.

93
00:06:27.770 --> 00:06:30.310
So why did wordpress generate this file?

94
00:06:30.320 --> 00:06:31.970
Let's take a look inside.

95
00:06:31.970 --> 00:06:34.850
In this file an array is being returned.

96
00:06:34.850 --> 00:06:42.050
This array contains two items which are an array of dependencies and the version of the asset files.

97
00:06:42.140 --> 00:06:48.080
The purpose of this file is to help us register the script during the development of our block.

98
00:06:48.080 --> 00:06:52.340
We are constantly importing functions and components from other files.

99
00:06:52.340 --> 00:06:56.000
Importing code from other files is considered a dependency.

100
00:06:56.030 --> 00:07:00.410
WordPress will scan our import statements for these dependencies.

101
00:07:00.410 --> 00:07:02.180
It allowed them to this array.

102
00:07:02.330 --> 00:07:08.930
If we need to manually register a script, we can use this array of dependencies as the third argument

103
00:07:08.930 --> 00:07:12.110
of the WP Register script function.

104
00:07:12.110 --> 00:07:16.790
As for the version option, script files can have versions for caching.

105
00:07:16.790 --> 00:07:22.210
However, WordPress will generate a unique ID for your files during updates.

106
00:07:22.220 --> 00:07:26.720
This way we never have to manually set the version ourselves.

107
00:07:26.720 --> 00:07:29.300
This array is returned by the file.

108
00:07:29.300 --> 00:07:32.450
Returning values is not limited to functions.

109
00:07:32.450 --> 00:07:35.240
Files are allowed to return values.

110
00:07:35.240 --> 00:07:39.920
In our function we can include this file to grab the return value.

111
00:07:39.950 --> 00:07:41.450
Let's give that a try.

112
00:07:41.480 --> 00:07:48.080
Switch back to the register assets file above the WP Register script function.

113
00:07:48.080 --> 00:07:51.440
Define a variable called admin assets.

114
00:07:53.620 --> 00:07:58.750
The value for this variable will be the include function with the following path.

115
00:07:58.780 --> 00:08:07.870
Include up plugin directory dot build slash admin slash index dot assets dot php.

116
00:08:09.300 --> 00:08:13.380
The include function will handle returning the value from the file.

117
00:08:13.410 --> 00:08:15.630
The variable will store the array.

118
00:08:15.660 --> 00:08:22.980
Let's update the WP registers script function by passing in the dependencies and version variables as

119
00:08:22.980 --> 00:08:25.770
the third and fourth arguments to the function.

120
00:08:27.940 --> 00:08:34.510
Lastly, let's set the fifth argument to true this value will cause the script to load in the footer.

121
00:08:34.539 --> 00:08:40.929
After registering our scripts we can in queue it open the end queue php file.

122
00:08:43.070 --> 00:08:49.370
The files should not be loaded unless the user is viewing the custom admin page and sign the conditional

123
00:08:49.370 --> 00:08:56.660
statements and queue the files with the WP and Q style and WP and Q script functions.

124
00:08:58.750 --> 00:08:59.750
We're finished.

125
00:08:59.770 --> 00:09:01.480
Let's refresh the page.

126
00:09:05.020 --> 00:09:07.020
The page should render normally.

127
00:09:07.030 --> 00:09:07.970
That's great.

128
00:09:07.990 --> 00:09:11.850
We've successfully registered and include our files.

129
00:09:11.860 --> 00:09:17.170
Let's continue working on adding the media library to the page in the following lecture.

