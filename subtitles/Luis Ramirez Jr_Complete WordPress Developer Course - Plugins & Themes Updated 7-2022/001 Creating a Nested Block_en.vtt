WEBVTT
1
00:00:00.090 --> 00:00:03.950
In this lecture, we are going to start working on our next block.

2
00:00:03.960 --> 00:00:05.060
In my browser.

3
00:00:05.070 --> 00:00:07.410
I have a copy of the static version.

4
00:00:07.410 --> 00:00:10.650
We are going to develop a team members block.

5
00:00:10.650 --> 00:00:13.890
Clients will be able to add a list of team members.

6
00:00:13.890 --> 00:00:20.910
Each team member will have a profile, picture, name, bio and links to their social media pages.

7
00:00:20.910 --> 00:00:25.020
Interestingly, we are not going to be working on a single block.

8
00:00:25.050 --> 00:00:29.130
Developing this type of UI will involve creating two blocks.

9
00:00:29.130 --> 00:00:31.650
The first block will act as a container.

10
00:00:31.680 --> 00:00:34.800
The second block will represent each team member.

11
00:00:34.800 --> 00:00:37.050
If that doesn't make sense, it will.

12
00:00:37.050 --> 00:00:42.870
During the plugins development, it's not uncommon to develop multiple blocks for creating a single

13
00:00:42.870 --> 00:00:43.830
interface.

14
00:00:43.830 --> 00:00:48.510
In fact, it can be easier to break a UI into multiple blocks.

15
00:00:48.510 --> 00:00:50.940
By doing so, we can reduce clutter.

16
00:00:50.940 --> 00:00:53.610
Let's try registering both blocks.

17
00:00:53.610 --> 00:00:59.790
In the resource section of this lecture, I provide a link to a gist with the starter files for the

18
00:00:59.790 --> 00:01:01.110
team members group.

19
00:01:01.110 --> 00:01:01.710
BLOCK.

20
00:01:01.710 --> 00:01:08.610
As usual, I want you to add these files to your project under a new directory called Team Members Group.

21
00:01:08.610 --> 00:01:10.860
Pause the video and give it a try.

22
00:01:11.830 --> 00:01:12.830
Welcome back.

23
00:01:12.850 --> 00:01:18.310
I've added the files to my project in the source slash block's directory.

24
00:01:18.340 --> 00:01:21.340
I have a new folder called Team Members Group.

25
00:01:21.370 --> 00:01:24.660
Inside this folder, there are three new files.

26
00:01:24.670 --> 00:01:25.910
Let's go through them.

27
00:01:25.930 --> 00:01:29.070
The first file is called BLOCK JSON.

28
00:01:29.110 --> 00:01:32.260
This file has the typical setup for a block.

29
00:01:32.290 --> 00:01:35.590
The name of our block is called Team Members Group.

30
00:01:35.620 --> 00:01:39.460
This block will act as a container for the team members.

31
00:01:39.490 --> 00:01:41.860
Let's look at the attributes for this block.

32
00:01:41.860 --> 00:01:46.630
We are storing two attributes called columns and image shape.

33
00:01:47.600 --> 00:01:49.880
Designing blocks can be a challenge.

34
00:01:49.880 --> 00:01:54.410
If you're designing nested blocks, things can become even more difficult.

35
00:01:54.440 --> 00:02:00.470
A great approach to designing blocks is to ask yourself What responsibility should a block have?

36
00:02:00.500 --> 00:02:05.120
By thinking about this question, you will be able to make decisions easier.

37
00:02:05.150 --> 00:02:08.660
For example, let's think about our blocks attributes.

38
00:02:08.660 --> 00:02:12.360
We're going to allow users to modify the columns in our block.

39
00:02:12.380 --> 00:02:16.280
Clients can show between 2 to 4 members in a row.

40
00:02:16.310 --> 00:02:19.640
Should this setting appear on the outer or inner block?

41
00:02:19.910 --> 00:02:25.700
In my opinion, this attribute should appear on the outer block, aka the container.

42
00:02:25.730 --> 00:02:29.630
This type of setting will affect the overall performance of the blocks.

43
00:02:29.660 --> 00:02:34.250
It doesn't make sense to configure the columns of individual blocks.

44
00:02:34.250 --> 00:02:37.990
There's another attribute for manipulating the image shape.

45
00:02:38.000 --> 00:02:41.220
A single team member will have a profile picture.

46
00:02:41.240 --> 00:02:46.780
Wouldn't it make sense to manipulate the image shape on each team member from a glance?

47
00:02:46.790 --> 00:02:51.110
It does, however, what if the client has 20 team members?

48
00:02:51.110 --> 00:02:57.920
They would need to modify the same setting 20 times for all members to have the same image shape by

49
00:02:57.920 --> 00:03:00.140
adding this setting to the parent block.

50
00:03:00.170 --> 00:03:05.870
The setting must be changed once we can pass on this setting to the children blocks.

51
00:03:05.870 --> 00:03:11.450
On the other hand, nothing is stopping you from adding this setting to the individual blocks.

52
00:03:11.450 --> 00:03:15.410
For this course, we are going to apply it from the parent block.

53
00:03:16.700 --> 00:03:20.100
There's nothing else to say about the blocked JSON file.

54
00:03:20.120 --> 00:03:23.510
Let's take a look at the index JS file.

55
00:03:23.600 --> 00:03:26.780
I've provided a lot of code but nothing new to you.

56
00:03:26.810 --> 00:03:30.560
Let's scroll to the edit function and the edit function.

57
00:03:30.560 --> 00:03:34.750
We're extracting the image shape and column attributes.

58
00:03:34.760 --> 00:03:37.180
These attributes will be useful later.

59
00:03:37.190 --> 00:03:44.200
Inside the templates we're adding the inspector controls component for adding form controls to the sidebar.

60
00:03:44.210 --> 00:03:49.360
The controls inside the sidebar will manipulate the columns and image shape.

61
00:03:49.370 --> 00:03:52.460
Let's take a closer look for the columns.

62
00:03:52.460 --> 00:03:55.520
We're adding a component called Range Control.

63
00:03:55.550 --> 00:04:02.300
The Range Control Component adds a slider for changing a numeric value within a specific range.

64
00:04:02.300 --> 00:04:09.140
Like most input components, we can add a label, set the current value and add an event listener for

65
00:04:09.140 --> 00:04:10.940
updating the current value.

66
00:04:10.970 --> 00:04:14.720
In this case, we're manipulating the columns attributes.

67
00:04:14.720 --> 00:04:19.010
Clients will be able to change the number of columns within our block.

68
00:04:19.040 --> 00:04:23.300
The component below this control is called Select Control.

69
00:04:23.300 --> 00:04:25.970
It's a component we're already familiar with.

70
00:04:26.000 --> 00:04:28.970
This component will manipulate the image shape.

71
00:04:28.970 --> 00:04:31.280
We're going to provide three shapes.

72
00:04:31.280 --> 00:04:34.040
You're more than welcome to add additional shapes.

73
00:04:34.040 --> 00:04:39.380
If you decide to add more shapes, you will need to add CSS classes for them.

74
00:04:39.380 --> 00:04:44.660
In a future lecture, we will discuss how the shapes can be applied to the image.

75
00:04:44.690 --> 00:04:47.150
Let's scroll to the bottom of the file.

76
00:04:47.150 --> 00:04:49.850
We will come across the save function.

77
00:04:49.850 --> 00:04:54.770
It's been a while, but we are going to be using client side rendering for our block.

78
00:04:54.770 --> 00:04:57.620
There isn't a reason to use server side rendering.

79
00:04:57.620 --> 00:05:00.590
We aren't going to be relying on dynamic data.

80
00:05:00.590 --> 00:05:03.470
It makes sense to use client side rendering.

81
00:05:03.470 --> 00:05:06.560
The save function is very barebones.

82
00:05:06.560 --> 00:05:11.150
I don't usually do this, but let's look at the main CSS file.

83
00:05:11.180 --> 00:05:13.880
Most of the CSS is straightforward.

84
00:05:13.880 --> 00:05:18.800
If you scroll through the file, I've added a section for adding styles to the editor.

85
00:05:18.800 --> 00:05:23.030
I ran across some issues with getting the columns to work in the editor.

86
00:05:23.030 --> 00:05:25.340
I've had to add better selectors.

87
00:05:25.340 --> 00:05:31.310
You may run into the same problems, so feel free to steal these selectors for your project.

88
00:05:31.430 --> 00:05:33.200
That's about it for this block.

89
00:05:33.200 --> 00:05:34.520
We're not finished yet.

90
00:05:34.520 --> 00:05:40.550
In the resource section of this lecture, I provide a link to the starter files for the team member

91
00:05:40.550 --> 00:05:41.210
block.

92
00:05:43.230 --> 00:05:48.810
As stated before, we are going to be creating two blocks for creating the UI.

93
00:05:48.840 --> 00:05:52.620
In your project, create a new folder called Team Member.

94
00:05:52.650 --> 00:05:57.510
The files from this gist should be created from within the new directory.

95
00:05:57.540 --> 00:06:00.450
Pause the video and create the files.

96
00:06:02.680 --> 00:06:03.670
Welcome back.

97
00:06:03.700 --> 00:06:05.560
Let's review the files together.

98
00:06:05.590 --> 00:06:07.410
There's not much to say about them.

99
00:06:07.420 --> 00:06:11.850
There are dozens of lines of code, but nothing we haven't encountered before.

100
00:06:11.860 --> 00:06:16.420
For example, the blocked JSON file has a few attributes.

101
00:06:16.420 --> 00:06:19.420
There are more attributes than we're used to.

102
00:06:19.450 --> 00:06:25.850
We're going to store the name, title, bio, social handles and image data of a member.

103
00:06:25.870 --> 00:06:30.910
There's a lot of information to store, but the data itself is not complex.

104
00:06:30.940 --> 00:06:35.160
Next, let's head down over to the index JS file.

105
00:06:35.170 --> 00:06:39.170
Inside this file we have the edit and save functions.

106
00:06:39.190 --> 00:06:44.110
We do not need a server to render this UI inside the edit function.

107
00:06:44.140 --> 00:06:50.860
The block will have a control in the sidebar for editing the images alt attributes, the blocks name

108
00:06:50.860 --> 00:06:56.260
or render the name title, image, bio and social handles.

109
00:06:56.290 --> 00:07:03.010
The name, title and bio attributes will be modifiable via the rich text component.

110
00:07:03.040 --> 00:07:06.370
I prepared this component for these locations.

111
00:07:06.400 --> 00:07:13.600
Our focus is going to be on allowing clients to modify their image and social media handles on our blocks

112
00:07:13.600 --> 00:07:14.230
already.

113
00:07:14.260 --> 00:07:16.420
The next step is to register them.

114
00:07:16.450 --> 00:07:18.100
Open the register block.

115
00:07:18.100 --> 00:07:19.870
Start php file.

116
00:07:22.130 --> 00:07:24.170
At the bottom of the block's array.

117
00:07:24.170 --> 00:07:29.420
Add two arrays for the team members, group and team member blocks.

118
00:07:34.590 --> 00:07:36.800
Neither block needs an options array.

119
00:07:36.810 --> 00:07:38.860
Let's try using these blocks.

120
00:07:38.880 --> 00:07:43.050
I'm going to open the experimental page in the Gutenberg Editor.

121
00:07:45.280 --> 00:07:50.820
If you have blocks from previous sections, you can safely remove them after doing so.

122
00:07:50.830 --> 00:07:54.100
Try adding the team member blocks to the page.

123
00:07:56.180 --> 00:07:58.670
You may not see anything for the team members.

124
00:07:58.670 --> 00:08:01.550
BLOCK It's not going to produce content.

125
00:08:01.580 --> 00:08:06.020
The job of this block is to be a container for the team member block.

126
00:08:06.050 --> 00:08:09.890
Regardless, you should be able to add the block to the page.

127
00:08:10.040 --> 00:08:15.980
If Gutenberg can add the blocks to the page, we can move on to working on the blocks.

