WEBVTT
1
00:00:00.270 --> 00:00:04.230
In this lecture, we are going to toggle the visibility of the modal.

2
00:00:04.230 --> 00:00:09.840
As we learned, the modal is hidden by setting the display CSS property to none.

3
00:00:09.870 --> 00:00:16.770
Displaying the modal is as simple as updating the display property to block before toggling this property.

4
00:00:16.770 --> 00:00:20.280
We must decide when this property should be updated.

5
00:00:20.400 --> 00:00:23.040
In the header we have a log in link.

6
00:00:23.040 --> 00:00:26.310
Let's inspect this element with the developer tools.

7
00:00:28.370 --> 00:00:33.360
I haven't mentioned this, but I added a class called Open Modal to the link.

8
00:00:33.380 --> 00:00:38.270
We are going to add an event listener to elements with the open modal class.

9
00:00:38.300 --> 00:00:40.480
Notice how I said elements?

10
00:00:40.490 --> 00:00:47.240
We are going to allow multiple elements to open the modal as long as an element has the open modal class.

11
00:00:47.270 --> 00:00:50.600
Clicking on the element should cause the modal to appear.

12
00:00:50.870 --> 00:00:57.350
This means we can tell our clients to add this class to any element that should cause the modal to open.

13
00:00:57.380 --> 00:01:04.340
For starters, we will update the log link from the header tools block to cause the modal to open.

14
00:01:04.370 --> 00:01:05.640
Let's get started.

15
00:01:05.660 --> 00:01:09.890
We are going to be working inside the front end JS file.

16
00:01:12.060 --> 00:01:17.340
The first step is to listen for events on elements with the open modal class.

17
00:01:17.340 --> 00:01:22.610
Inside the function, we are going to remove the console statements in its place.

18
00:01:22.620 --> 00:01:25.530
Create a variable called open modal button.

19
00:01:27.790 --> 00:01:34.300
The value for this variable will be the documents dot query select all function with the open modal

20
00:01:34.300 --> 00:01:35.050
class.

21
00:01:37.230 --> 00:01:42.290
Keep in mind, we're going to allow this class to be added to multiple elements.

22
00:01:42.300 --> 00:01:46.440
Therefore, we should select all elements with this class.

23
00:01:46.470 --> 00:01:53.170
Unlike the document object, we can't immediately apply the add event listener to our variable.

24
00:01:53.190 --> 00:01:56.220
The variable will store an array of elements.

25
00:01:56.250 --> 00:02:01.240
Unfortunately, the browser does not allow us to listen for events on arrays.

26
00:02:01.260 --> 00:02:05.580
We must individually add any event listener to each element.

27
00:02:05.610 --> 00:02:07.080
There's just one problem.

28
00:02:07.080 --> 00:02:10.650
We don't know how many elements have been found with this class.

29
00:02:10.680 --> 00:02:14.010
The best approach is to loop through the array below.

30
00:02:14.010 --> 00:02:19.770
The variable chaining function called for each to the open modal button variable.

31
00:02:21.870 --> 00:02:25.710
JavaScript has various functions for looping through an array.

32
00:02:25.740 --> 00:02:29.880
If a variable is an array, we have access to these functions.

33
00:02:29.880 --> 00:02:32.940
One of the functions is called for each.

34
00:02:32.970 --> 00:02:36.690
It's the simplest function available for looping through an array.

35
00:02:36.720 --> 00:02:40.290
This function will iterate through each item in the array.

36
00:02:40.680 --> 00:02:43.130
This syntax might feel strange.

37
00:02:43.140 --> 00:02:46.350
It's as if we're treating the variable as an object.

38
00:02:46.380 --> 00:02:49.160
That's one of the cool behaviors of JavaScript.

39
00:02:49.170 --> 00:02:52.890
We can treat a regular value as if it were an object.

40
00:02:52.920 --> 00:02:58.500
JavaScript will supply us with methods and properties for interacting with the value.

41
00:02:58.530 --> 00:03:00.510
Back to the task at hand.

42
00:03:00.510 --> 00:03:03.870
We can pass in a function to handle each iteration.

43
00:03:03.870 --> 00:03:05.940
Let's pass in an arrow function.

44
00:03:08.140 --> 00:03:13.000
This function will be provided the item from the current iteration as an argument.

45
00:03:13.030 --> 00:03:15.490
Let's call the arguments element.

46
00:03:17.550 --> 00:03:22.160
Since we have an array of elements, this argument will reference the element.

47
00:03:22.170 --> 00:03:28.440
We can hover our mouse over this argument for confirmation, according to Visual Studio code.

48
00:03:28.470 --> 00:03:30.540
The argument will hold an element.

49
00:03:30.570 --> 00:03:35.010
At this point, it's safe to change the ADD event listener function.

50
00:03:35.040 --> 00:03:39.510
Let's go ahead with chaining this function on the element arguments.

51
00:03:41.680 --> 00:03:44.890
We are going to use a simple event called Click.

52
00:03:47.030 --> 00:03:51.860
As you can guess, this event is emitted when the element has been clicked on.

53
00:03:51.860 --> 00:03:55.600
Next, let's pass in a function for handling the events.

54
00:03:55.610 --> 00:03:58.970
This function will be provided the event object.

55
00:04:01.130 --> 00:04:07.680
The event object contains information on the event, such as the element that caused the event.

56
00:04:07.700 --> 00:04:12.950
Clients may be tempted to apply the open modal class to an anchor element.

57
00:04:12.980 --> 00:04:18.260
Anchor elements will cause the browser to refresh the page, which isn't what we want.

58
00:04:18.290 --> 00:04:24.990
The event object contains a function for preventing the default behavior called prevent defaults.

59
00:04:25.010 --> 00:04:26.630
Let's call this function.

60
00:04:28.760 --> 00:04:32.470
By calling this function, we can avoid page refreshes.

61
00:04:32.480 --> 00:04:34.700
We're getting close to opening the modal.

62
00:04:34.730 --> 00:04:39.710
The final step is to open the modal by toggling the display property.

63
00:04:39.740 --> 00:04:43.520
I've added a class to help us change the display property.

64
00:04:43.520 --> 00:04:47.150
However, we don't have access to the modal elements.

65
00:04:47.150 --> 00:04:50.300
Let's create a variable for referencing the modal.

66
00:04:50.300 --> 00:04:54.280
We're not going to create this variable directly in the events.

67
00:04:54.290 --> 00:04:57.920
Be mindful of the fact that we're going to close the modal.

68
00:04:57.920 --> 00:05:01.550
To close the modal, we're going to need a reference to the modal.

69
00:05:01.550 --> 00:05:08.240
It would make sense to create this variable outside of the events below the open modal button variable.

70
00:05:08.270 --> 00:05:11.270
Define a variable called modal elements.

71
00:05:13.470 --> 00:05:17.910
The value for this variable will be the query selector function.

72
00:05:17.940 --> 00:05:24.600
The selector for the element will be the following WP BLOCK YouTube plus off modal.

73
00:05:26.850 --> 00:05:30.670
The model will be selected by the class generated for blocks.

74
00:05:30.690 --> 00:05:35.250
We're going to assume there will be one modal if there are multiple models.

75
00:05:35.250 --> 00:05:38.730
This query will select the first modal it finds.

76
00:05:38.730 --> 00:05:44.490
By storing the modal, we can begin to toggle classes back inside the event handler.

77
00:05:44.490 --> 00:05:46.530
Let's run the following function.

78
00:05:46.530 --> 00:05:49.410
Modal Element dot class list.

79
00:05:49.410 --> 00:05:50.550
Dot Add.

80
00:05:52.970 --> 00:05:56.310
Every element will have an object called class list.

81
00:05:56.330 --> 00:06:00.710
This object will contain a list of classes applied to the element.

82
00:06:00.740 --> 00:06:04.080
We can add a new class by calling the ADD function.

83
00:06:04.100 --> 00:06:07.410
This function accepts the class name as a string.

84
00:06:07.430 --> 00:06:09.950
Let's add a class called Modal Show.

85
00:06:12.350 --> 00:06:15.460
This class can be found in our block CSS.

86
00:06:15.470 --> 00:06:18.470
It'll change the display property to block.

87
00:06:18.500 --> 00:06:22.290
You can check the CSS to view this classes styles.

88
00:06:22.310 --> 00:06:25.790
Let's refresh the experimental page in the browser.

89
00:06:28.180 --> 00:06:33.440
If we did everything right, we should be able to click on the log and link from the page.

90
00:06:33.460 --> 00:06:35.690
Don't click on the link from the header.

91
00:06:35.710 --> 00:06:37.430
This is the static version.

92
00:06:37.450 --> 00:06:38.950
It may or may not work.

93
00:06:38.980 --> 00:06:41.620
After clicking the link, the modal will appear.

94
00:06:41.650 --> 00:06:44.150
Toggling the modal took a lot of work.

95
00:06:44.170 --> 00:06:48.640
First we had to search for elements with the open modal class.

96
00:06:48.670 --> 00:06:53.770
Afterward, we had to loop through every element to listen for a click event.

97
00:06:53.800 --> 00:06:59.590
Lastly, we opened the modal by adding a class that modifies the display property.

98
00:06:59.770 --> 00:07:02.960
We're able to open the modal, but we can't close it.

99
00:07:02.980 --> 00:07:05.320
That's going to be the next task.

100
00:07:05.320 --> 00:07:09.870
Before we start writing code, let's talk about when to close the modal.

101
00:07:09.880 --> 00:07:13.780
The modal should be closed if the exit button is clicked on.

102
00:07:13.810 --> 00:07:18.620
Alternatively, clicking on the opaque overlay should close the modal too.

103
00:07:18.640 --> 00:07:22.240
We have two elements responsible for closing the modal.

104
00:07:22.270 --> 00:07:23.620
Let's get started.

105
00:07:23.620 --> 00:07:25.820
Switch back to the text editor.

106
00:07:25.840 --> 00:07:28.730
The first step is to select these elements.

107
00:07:28.750 --> 00:07:33.290
However, there's just one problem to make things slightly difficult.

108
00:07:33.310 --> 00:07:36.130
I've given both elements different classes.

109
00:07:36.130 --> 00:07:40.690
Therefore, we need to select both elements with different queries.

110
00:07:40.720 --> 00:07:48.220
Luckily, JavaScript supports multiple selectors with the query selector all function below the modal

111
00:07:48.220 --> 00:07:49.420
element variable.

112
00:07:49.450 --> 00:07:52.810
Create a variable called modal close element.

113
00:07:54.950 --> 00:07:58.700
Next set the variables value to the documents.

114
00:07:59.000 --> 00:08:01.250
Query selector all function.

115
00:08:03.360 --> 00:08:10.140
Since multiple elements can close the modal, we must use the query selector all function inside this

116
00:08:10.140 --> 00:08:16.050
function pass in the following selectors modal overlay modal button close.

117
00:08:18.110 --> 00:08:22.110
We can add multiple selectors by separating them with a comma.

118
00:08:22.130 --> 00:08:24.180
It's similar to CSS.

119
00:08:24.200 --> 00:08:29.500
It's not necessary to create two variables to select multiple elements.

120
00:08:29.510 --> 00:08:32.330
We can continue to use a single variable.

121
00:08:32.360 --> 00:08:38.690
Moving on, let's begin looping through these elements below the first loop called the for each function

122
00:08:38.690 --> 00:08:41.539
on the modal close element variable.

123
00:08:43.710 --> 00:08:47.310
Next, passing a function to handle each iteration.

124
00:08:47.310 --> 00:08:51.060
Let's refer to the current element as elements.

125
00:08:53.250 --> 00:08:56.890
The function is going to be very similar to the first function.

126
00:08:56.910 --> 00:09:01.770
To save time, let's copy the code from the first loop into the second loop.

127
00:09:04.010 --> 00:09:09.230
To remove the model from the page, we must reverse the changes applied to the modal.

128
00:09:09.260 --> 00:09:13.190
From the first loop we added the modal show class.

129
00:09:13.190 --> 00:09:15.440
Therefore we must remove it.

130
00:09:15.470 --> 00:09:20.810
We can remove a class by replacing the add function with the remove function.

131
00:09:22.950 --> 00:09:27.540
As the name implies, this function will remove a class from an element.

132
00:09:27.570 --> 00:09:29.590
Let's try testing our code.

133
00:09:29.610 --> 00:09:31.170
Refresh the page.

134
00:09:33.230 --> 00:09:35.510
The models should continue to open.

135
00:09:35.540 --> 00:09:40.340
Before closing the model, let's click around the model's content area.

136
00:09:40.370 --> 00:09:43.880
None of our clicks should cause the modal to close.

137
00:09:43.910 --> 00:09:47.360
Clicking on the close button should cause it to close.

138
00:09:47.390 --> 00:09:50.180
The same goes for clicking on the overlay.

139
00:09:50.210 --> 00:09:50.980
Perfect.

140
00:09:50.990 --> 00:09:54.420
We've successfully opened and closed the modal.

141
00:09:54.440 --> 00:10:00.950
The most challenging part of this process was selecting multiple elements with the same class or different

142
00:10:00.950 --> 00:10:02.300
sets of classes.

143
00:10:02.330 --> 00:10:07.670
Either way, we had to loop through the elements to apply an event listener.

144
00:10:07.700 --> 00:10:09.670
This step is very important.

145
00:10:09.680 --> 00:10:13.190
We can't apply event listeners to an entire array.

146
00:10:13.220 --> 00:10:16.850
In the next lecture, let's start working on the tabs.

