WEBVTT
1
00:00:00.150 --> 00:00:03.990
In this lecture, we are going to explore conditional statements.

2
00:00:03.990 --> 00:00:10.020
Conditional statements in JavaScript serve the same purpose as conditional statements in PHP.

3
00:00:10.080 --> 00:00:14.820
JavaScript allows us to control the flow of logic in our applications.

4
00:00:14.820 --> 00:00:17.250
There are a feature for running a block of code.

5
00:00:17.250 --> 00:00:24.720
If a condition is truth D in the resource section of this lecture, I provide a link to a list of comparison

6
00:00:24.720 --> 00:00:28.350
operators and most of your conditional statements.

7
00:00:28.350 --> 00:00:33.060
You're likely to use comparison operators to help you perform a condition.

8
00:00:33.060 --> 00:00:37.170
Comparison operators allow you to compare two values.

9
00:00:37.200 --> 00:00:41.550
A boolean will be returned by the various comparison operators.

10
00:00:41.550 --> 00:00:46.740
Let's use the comparison operators with a conditional statement in your editor.

11
00:00:46.770 --> 00:00:50.340
Open the main file for this demonstration.

12
00:00:50.340 --> 00:00:54.930
Let's check if the second list item contains the name Jane.

13
00:00:54.930 --> 00:01:00.090
If it does, we'll log a message to the console that we found Jane.

14
00:01:00.390 --> 00:01:06.960
Otherwise, we'll log a message that we haven't at the bottom of the script and the if keyword.

15
00:01:09.290 --> 00:01:13.100
Conditional statements will always begin with the if keyword.

16
00:01:13.100 --> 00:01:18.890
After the if keyword, we can add a pair of parentheses inside the parentheses.

17
00:01:18.890 --> 00:01:25.610
The condition must be added regardless of our condition, the expression must be a boolean value.

18
00:01:25.610 --> 00:01:31.040
As we've learned, comparison operators will always return a boolean value.

19
00:01:31.070 --> 00:01:33.890
Our condition will be the following lie.

20
00:01:33.890 --> 00:01:38.900
One Inner HTML equals equals equals Jane.

21
00:01:41.110 --> 00:01:42.860
There's a lot to break down.

22
00:01:42.880 --> 00:01:50.170
First, we're grabbing the inner contents of the second list item element with the inner HTML property.

23
00:01:50.200 --> 00:01:55.330
Keep in mind this property will return raw text and HTML.

24
00:01:55.360 --> 00:02:02.530
If our list item elements had children elements, we can expect those elements to appear in the property.

25
00:02:02.800 --> 00:02:07.240
After grabbing the property, we are comparing the text with a string.

26
00:02:07.240 --> 00:02:11.350
In our example, we're using the strict equal operator.

27
00:02:11.380 --> 00:02:17.980
JavaScript has two operators for comparing values called equal and strict equal.

28
00:02:18.010 --> 00:02:25.690
The equal operator is written with two equal sign symbols, whereas the strict equal operator uses three

29
00:02:25.690 --> 00:02:27.220
equal sign symbols.

30
00:02:27.370 --> 00:02:33.610
The difference between them is that strict equal operator will check the data type of both values.

31
00:02:33.760 --> 00:02:37.090
Data types can be tricky to work with in JavaScript.

32
00:02:37.090 --> 00:02:43.610
Sometimes you may receive a true value when values don't match at times.

33
00:02:43.630 --> 00:02:47.880
JavaScript can be a quirky language to reduce confusion.

34
00:02:47.890 --> 00:02:54.220
It's considered good practice to use the strict equal operator over the equal operator.

35
00:02:54.430 --> 00:02:59.860
After adding the condition, curly brackets can be added for the body of the condition.

36
00:02:59.860 --> 00:03:04.980
If our condition evaluates to true, the code inside the block will run.

37
00:03:04.990 --> 00:03:08.830
Let's try running our script by refreshing the page.

38
00:03:10.990 --> 00:03:13.840
Inside the console of the developer tools.

39
00:03:13.840 --> 00:03:17.030
The message will tell us Gene was found awesome.

40
00:03:17.050 --> 00:03:19.440
Our condition is working as expected.

41
00:03:19.450 --> 00:03:22.750
We're not limited to checking a single condition.

42
00:03:22.750 --> 00:03:26.410
We can run a series of conditions back in our scripts.

43
00:03:26.410 --> 00:03:29.350
Let's add an else if statements.

44
00:03:31.680 --> 00:03:36.210
If an ls if condition exists, JavaScript will check the condition.

45
00:03:36.210 --> 00:03:42.870
If the previous condition fails, therefore, this condition will never run, since the first condition

46
00:03:42.870 --> 00:03:45.390
will evaluate to true the else.

47
00:03:45.420 --> 00:03:52.290
If statement has a similar format to the if statement inside the parentheses, we can add a condition.

48
00:03:52.290 --> 00:03:56.640
Let's check if the list item element is equal to John.

49
00:03:58.830 --> 00:04:01.260
If it is, let's log a message.

50
00:04:03.250 --> 00:04:06.130
Lastly, we have the WL statement.

51
00:04:08.260 --> 00:04:15.310
Unlike the if and else if statements, the statement does not have the option of adding a condition.

52
00:04:15.310 --> 00:04:20.410
The L statement can only be added if an if statement precedes it.

53
00:04:20.440 --> 00:04:23.380
JavaScript will execute the else block.

54
00:04:23.380 --> 00:04:27.910
If the if condition fails, you can think of it as a last resort.

55
00:04:28.150 --> 00:04:33.520
Keep in mind the chain of conditional statements must start with the if condition.

56
00:04:33.550 --> 00:04:38.410
If we were to remove this condition, the other statements would produce an error.

57
00:04:38.440 --> 00:04:41.920
Visual Studio code will even highlight the error.

58
00:04:41.950 --> 00:04:44.440
The order of statements does matter.

59
00:04:44.470 --> 00:04:47.250
The if statement must always be first.

60
00:04:47.260 --> 00:04:50.650
The statement must always be last.

61
00:04:50.680 --> 00:04:55.210
Lastly, we can add as many else if statements as we'd like.

62
00:04:55.420 --> 00:05:00.370
Inside the RLS block, let's log a message stating that no one was found.

63
00:05:02.470 --> 00:05:09.220
Next, let's update the first condition so that it fails by changing the comparison operator to the

64
00:05:09.220 --> 00:05:11.290
not equal to operator.

65
00:05:13.570 --> 00:05:18.720
The not equal to operator will check of two values are not equal to each other.

66
00:05:18.730 --> 00:05:23.530
In this case, the values match, which will cause the condition to fail.

67
00:05:23.560 --> 00:05:27.190
The second condition will be checked, which will also fail.

68
00:05:27.220 --> 00:05:30.410
Therefore, the else block should be executed.

69
00:05:30.430 --> 00:05:32.830
Let's try refreshing the page.

70
00:05:32.860 --> 00:05:35.560
Our console is telling us no one was found.

71
00:05:35.590 --> 00:05:36.260
Great.

72
00:05:36.280 --> 00:05:41.780
Conditional statements are a great way to control the flow of logic within our application.

73
00:05:41.800 --> 00:05:45.880
Let's continue exploring more features in the next lecture.

