1
00:00:00,090 --> 00:00:06,090
In this lecture we are going to explore a repository created by the WordPress team for a learning block

2
00:00:06,090 --> 00:00:06,960
development.

3
00:00:06,960 --> 00:00:14,040
In the resource section of this lecture, I provide a link to a repository called Gutenberg Examples.

4
00:00:14,070 --> 00:00:19,590
If you are a beginner developer, you might want to check out this repository for developing blocks.

5
00:00:19,590 --> 00:00:23,040
Blocks do not need to be developed with additional tools.

6
00:00:23,040 --> 00:00:28,950
Throughout this course we've been relying on JSX for writing HTML in a JavaScript file.

7
00:00:28,980 --> 00:00:31,560
However, you may not like gsx.

8
00:00:31,560 --> 00:00:36,720
If that's the case, you can stick to plain JavaScript inside this repository.

9
00:00:36,720 --> 00:00:41,820
WordPress will provide examples with and without gsx for the same block.

10
00:00:41,820 --> 00:00:47,250
For example, the first two blocks are called basic and basic is next.

11
00:00:47,250 --> 00:00:54,210
The next version will contain Gsx, whereas the other folder will be written with vanilla JavaScript.

12
00:00:54,240 --> 00:00:59,220
Let's take a look at the Vanilla JavaScript solution inside this directory.

13
00:00:59,220 --> 00:01:01,590
Open the block JS file.

14
00:01:03,800 --> 00:01:07,880
Creating a block without help is vastly different than what we're used to.

15
00:01:07,910 --> 00:01:10,640
Keep in mind, this is a basic example.

16
00:01:10,640 --> 00:01:16,070
If you were to look at other blocks without G6 or Webpack, the code might be different.

17
00:01:16,100 --> 00:01:18,170
Let's quickly review this file.

18
00:01:18,380 --> 00:01:21,800
Everything is wrapped with an immediately invoked function.

19
00:01:21,800 --> 00:01:23,360
As the name implies.

20
00:01:23,360 --> 00:01:27,380
Functions can be invoked immediately after it's been defined.

21
00:01:27,410 --> 00:01:29,100
It's a very old technique.

22
00:01:29,120 --> 00:01:32,920
In most cases, you shouldn't need to invoke your own functions.

23
00:01:32,930 --> 00:01:39,650
However, if you plan on developing blocks without tools, you may need to do so at the bottom of the

24
00:01:39,650 --> 00:01:40,250
function.

25
00:01:40,250 --> 00:01:44,900
We are going to find the values passed on to the function, believe it or not.

26
00:01:44,930 --> 00:01:49,460
Most of WordPress packages are available as global variables.

27
00:01:49,490 --> 00:01:51,530
A variable is considered global.

28
00:01:51,530 --> 00:01:57,260
If it can be accessed anywhere, the packages can be found under the WP object.

29
00:01:57,260 --> 00:02:02,030
Inside this object we can reference a specific package by its name.

30
00:02:02,210 --> 00:02:10,720
In this example, we are grabbing the blocks i 18 n element and block editor packages inside the function.

31
00:02:10,729 --> 00:02:14,900
The example is using these packages to build a basic block.

32
00:02:14,900 --> 00:02:16,460
At the top of the function.

33
00:02:16,460 --> 00:02:21,050
Functions are extracted from each package without d structuring.

34
00:02:21,170 --> 00:02:27,770
Moving on, if we look at the return value of the edit or save functions, the elements are created

35
00:02:27,770 --> 00:02:29,930
with a function called element.

36
00:02:29,960 --> 00:02:32,480
This variable was created above.

37
00:02:32,510 --> 00:02:39,350
If we look at the variable definition, the variable is a shorthand for the element dot create element

38
00:02:39,350 --> 00:02:40,040
function.

39
00:02:40,250 --> 00:02:41,480
Hold on a moment.

40
00:02:41,510 --> 00:02:44,960
Aren't Gutenberg blocks created with react components?

41
00:02:44,960 --> 00:02:49,940
So why aren't we using the react dot create element function?

42
00:02:52,090 --> 00:02:55,870
The WordPress team is concerned with backward compatibility.

43
00:02:55,870 --> 00:03:01,780
React is not developed by WordPress, it's an independent project by Facebook meta.

44
00:03:01,780 --> 00:03:07,330
If Meta decides to change, react, thousands of block plugins will become incompatible.

45
00:03:07,390 --> 00:03:14,170
To avoid this issue, WordPress has created a wrapper around the create element function with its own

46
00:03:14,170 --> 00:03:15,670
create element function.

47
00:03:15,670 --> 00:03:23,320
Behind the scenes, we're using the react create element function with the WP dot elements dot create

48
00:03:23,320 --> 00:03:24,400
element function.

49
00:03:24,400 --> 00:03:29,380
However, if the React API changes we won't need to update our code.

50
00:03:29,410 --> 00:03:33,340
It'll become WordPress job to handle the transition for us.

51
00:03:33,340 --> 00:03:39,430
Thus we can continue developing blocks with the same code while taking advantage of the latest features

52
00:03:39,430 --> 00:03:40,270
in React.

53
00:03:40,270 --> 00:03:45,820
At the end of the day, it's not something you'll have to worry about if you're using WordPress official

54
00:03:45,850 --> 00:03:47,830
toolset for building blocks.

55
00:03:47,920 --> 00:03:50,860
Most of the heavy lifting is taken care of for you.

56
00:03:50,860 --> 00:03:56,650
With that being said, you're more than welcome to explore the other blocks for learning block development.

57
00:03:56,680 --> 00:03:59,770
Otherwise, let's continue building blocks together.

58
00:03:59,770 --> 00:04:02,290
I'll see you in the next section.

