1
00:00:00,240 --> 00:00:05,580
In this lecture, we are going to insert data into our custom table before doing so.

2
00:00:05,580 --> 00:00:08,100
There is an important concept to understand.

3
00:00:08,100 --> 00:00:13,080
We should wrap our heads around this concept before proceeding with additional queries.

4
00:00:13,140 --> 00:00:15,930
I'm referring to a concept called CRUD.

5
00:00:15,960 --> 00:00:19,950
It stands for Create, Read, Update and delete.

6
00:00:19,980 --> 00:00:23,130
These are the four pillars of database operations.

7
00:00:23,130 --> 00:00:28,020
In most cases, you're going to perform any of these actions onto your database.

8
00:00:28,020 --> 00:00:32,280
My SQL and Maria DB support CRUD operations.

9
00:00:32,280 --> 00:00:37,530
In this section, we are going to explore each action for this lecture.

10
00:00:37,530 --> 00:00:39,990
We are going to start with creating data.

11
00:00:39,990 --> 00:00:42,390
We have a table for storing products.

12
00:00:42,390 --> 00:00:44,760
Let's try inserting a product.

13
00:00:44,790 --> 00:00:48,660
Currently, I'm viewing the query page for our database.

14
00:00:48,690 --> 00:00:55,110
A new record can be inserted into a table by typing the following keywords insert into.

15
00:00:57,180 --> 00:01:00,170
Next, we must provide the name of the table.

16
00:01:00,180 --> 00:01:04,950
In our case, we are going to insert data into the products table.

17
00:01:07,160 --> 00:01:08,300
On a new line.

18
00:01:08,300 --> 00:01:12,410
Let's add the values keyword with a pair of parentheses.

19
00:01:14,500 --> 00:01:19,370
The values keyword will allow us to start providing data for the new record.

20
00:01:19,390 --> 00:01:25,390
Inside the parentheses, we must provide a list of values separated by a comma.

21
00:01:25,390 --> 00:01:27,820
The order of values does matter.

22
00:01:27,850 --> 00:01:33,580
Databases will insert the value in the same order as the columns for the table.

23
00:01:33,610 --> 00:01:38,920
For example, the first column in the products table is the ID column.

24
00:01:38,920 --> 00:01:43,520
Therefore, the first value will be inserted into the ID column.

25
00:01:43,540 --> 00:01:48,880
The second value will be inserted under the name column, so on and so forth.

26
00:01:48,910 --> 00:01:52,920
If you don't remember the order of columns, that's perfectly fine.

27
00:01:52,930 --> 00:01:58,090
In another tab, I recommend opening the structure of a table by default.

28
00:01:58,120 --> 00:02:01,260
Most clients will provide the order of the columns.

29
00:02:01,270 --> 00:02:06,010
As you can see, the order of our table is the ID and name.

30
00:02:06,220 --> 00:02:07,690
Back to our query.

31
00:02:07,720 --> 00:02:10,009
Let's set the ID to one.

32
00:02:10,030 --> 00:02:12,910
The name of the product will be called hats.

33
00:02:15,110 --> 00:02:18,830
The ID of the product must be a numeric value.

34
00:02:18,860 --> 00:02:24,080
It's because the column has a data type of big ints which accepts numbers.

35
00:02:24,110 --> 00:02:28,650
If we were to insert a different data type, the database would throw an error.

36
00:02:28,670 --> 00:02:33,340
Similar to other languages, strings are created with double quotes.

37
00:02:33,350 --> 00:02:38,840
The var in data type is analogous to strings for PHP or JavaScript.

38
00:02:38,990 --> 00:02:44,120
After creating the query, let's add a semicolon to end the statement.

39
00:02:44,150 --> 00:02:46,670
Next, let's execute the query.

40
00:02:48,820 --> 00:02:53,470
After a few seconds, the data should have been inserted into our table.

41
00:02:53,500 --> 00:02:57,700
Let's click on our table to view the data as clear as day.

42
00:02:57,730 --> 00:03:00,160
A new record has been added to our table.

43
00:03:00,190 --> 00:03:03,670
There is an alternative syntax for inserting data.

44
00:03:03,700 --> 00:03:05,110
Let's give it a try.

45
00:03:05,140 --> 00:03:09,010
Head back to the query page inside the input.

46
00:03:09,010 --> 00:03:12,940
Add the insert into keywords with the products table.

47
00:03:15,060 --> 00:03:19,470
By default, we must provide a value for every column in our table.

48
00:03:19,500 --> 00:03:22,610
However, we may not have data for every column.

49
00:03:22,620 --> 00:03:27,880
We can specify a list of columns by adding parentheses after the table's name.

50
00:03:27,900 --> 00:03:33,150
Inside these parentheses, we can write a list of columns separated by a comma.

51
00:03:33,180 --> 00:03:36,270
Let's add the ID column to the list.

52
00:03:38,470 --> 00:03:43,270
Next, add the values keyword with a number for the ID.

53
00:03:45,280 --> 00:03:48,000
There is a limitation to this syntax.

54
00:03:48,010 --> 00:03:51,330
If a column is required, the query will not work.

55
00:03:51,340 --> 00:03:55,230
For example, let's add another query for inserting data.

56
00:03:55,240 --> 00:04:00,040
First, add the semicolon after the first statement on a new line.

57
00:04:00,040 --> 00:04:03,880
Add the insert into keywords for the product table.

58
00:04:05,960 --> 00:04:09,650
This time, let's insert a value for the name column.

59
00:04:11,810 --> 00:04:15,890
Next, add the values keyword with a random value.

60
00:04:18,040 --> 00:04:24,640
During the creation of our table, we specified that the ID column could not be null by adding the not

61
00:04:24,640 --> 00:04:25,880
null keywords.

62
00:04:25,900 --> 00:04:28,240
This query should result in an error.

63
00:04:28,270 --> 00:04:30,340
Let's try running the query.

64
00:04:32,460 --> 00:04:38,520
The client will inform us that the first query was executed successfully, even though we did not provide

65
00:04:38,520 --> 00:04:40,180
a value for the name column.

66
00:04:40,200 --> 00:04:43,440
The database will attempt to add a null value.

67
00:04:43,470 --> 00:04:47,160
However, this action did not work for the second query.

68
00:04:47,190 --> 00:04:51,100
Unlike the name column, the ID column is required.

69
00:04:51,120 --> 00:04:53,990
The database was unable to add our record.

70
00:04:54,000 --> 00:04:58,410
We can verify the insertion by viewing the data for the products table.

71
00:05:00,570 --> 00:05:03,720
The second row has an ID, but no name.

72
00:05:03,750 --> 00:05:06,420
A column without a value will have null.

73
00:05:06,450 --> 00:05:13,280
As you can see, inserting data into a table is as easy as two keywords in the next lecture.

74
00:05:13,290 --> 00:05:16,110
Let's talk about reading data in a table.

