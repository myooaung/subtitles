1
00:00:00,060 --> 00:00:06,370
In this lecture, we are going to create a custom rest API endpoint for grabbing a random recipe.

2
00:00:06,390 --> 00:00:10,140
We'll be using our function to help us generate this information.

3
00:00:10,140 --> 00:00:14,010
First, let's register a new route in your editor.

4
00:00:14,010 --> 00:00:16,920
Open the init dot php file.

5
00:00:19,060 --> 00:00:25,210
At the bottom of the function at a new root with the register rest root function.

6
00:00:27,280 --> 00:00:32,080
Next let's set the namespace to up slash v one.

7
00:00:34,270 --> 00:00:37,690
The endpoint will be set to daily recipe.

8
00:00:39,940 --> 00:00:40,810
Afterward.

9
00:00:40,810 --> 00:00:45,010
Let's pass in an array to configure the settings of our new route.

10
00:00:45,040 --> 00:00:49,540
First, we'll set the methods option to the WP Rest server.

11
00:00:49,540 --> 00:00:50,980
Readable constants.

12
00:00:53,030 --> 00:00:56,810
The readable constant will set the method of a route to get.

13
00:00:56,840 --> 00:00:59,110
This makes sense for our new routes.

14
00:00:59,120 --> 00:01:03,360
We aren't going to allow users to create new daily recipes.

15
00:01:03,380 --> 00:01:06,590
The end point will always return a single recipe.

16
00:01:06,620 --> 00:01:12,890
Next, let's set the callback option to the following function up rest API.

17
00:01:12,920 --> 00:01:14,840
Daily Recipe Handler.

18
00:01:16,990 --> 00:01:22,660
Lastly, let's set the permission callback option to the return true function.

19
00:01:24,840 --> 00:01:28,120
This end point will be accessible to all users.

20
00:01:28,140 --> 00:01:32,850
Users will not need special permissions to view the recipe of the day.

21
00:01:32,880 --> 00:01:34,950
Our route has been registered.

22
00:01:34,980 --> 00:01:42,750
Time to handle the request by defining the function inside the includes slash rest API directory.

23
00:01:42,780 --> 00:01:45,480
Create a file called daily recipe.

24
00:01:46,170 --> 00:01:46,800
PHP.

25
00:01:49,030 --> 00:01:50,380
Inside this file.

26
00:01:50,380 --> 00:01:55,600
Define the up rest API daily recipe handler function.

27
00:01:57,830 --> 00:02:02,060
Typically we would send a response with a key called status.

28
00:02:02,090 --> 00:02:08,050
Unlike the other endpoints we've created, this endpoint will return post data.

29
00:02:08,060 --> 00:02:10,610
It's not going to contain a status.

30
00:02:10,610 --> 00:02:13,640
Let's create an array called response.

31
00:02:15,800 --> 00:02:21,740
Inside this array, we are going to store the URL image and title of a post.

32
00:02:27,740 --> 00:02:30,040
We're not going to include everything.

33
00:02:30,050 --> 00:02:32,280
It's not necessary for the block.

34
00:02:32,300 --> 00:02:36,350
This information is plenty for displaying the recipe of the day.

35
00:02:36,380 --> 00:02:40,940
After defining the response, create a variable called ID.

36
00:02:40,970 --> 00:02:45,800
The value for this variable will be the get transient function.

37
00:02:48,110 --> 00:02:53,540
The get transient function will return a transient value from the database.

38
00:02:53,540 --> 00:02:58,930
The name of the transient must be passed in as the functions first arguments.

39
00:02:58,940 --> 00:03:03,500
In our case, the name is called up daily recipe ID.

40
00:03:05,660 --> 00:03:11,870
However, as mentioned before, WordPress will delete the record from the database as the transient

41
00:03:11,870 --> 00:03:12,840
expires.

42
00:03:12,860 --> 00:03:15,890
If WordPress is unable to grab a value.

43
00:03:15,920 --> 00:03:18,880
It will return false, which is not what we want.

44
00:03:18,890 --> 00:03:24,770
Just to make sure let's verify the contents of the variable with a conditional statement.

45
00:03:24,800 --> 00:03:29,270
The condition will check if the ID variable is false.

46
00:03:31,380 --> 00:03:38,850
If it is false, we should generate a new transient by sending the ID variable to the up generate daily

47
00:03:38,850 --> 00:03:40,170
recipe function.

48
00:03:42,280 --> 00:03:46,480
At this point, we are always guaranteed to have a post ID.

49
00:03:46,510 --> 00:03:51,120
The last step is to update the response with the appropriate values.

50
00:03:51,130 --> 00:03:58,390
After the conditional statement, set the response URL variable to the get permalink function with the

51
00:03:58,390 --> 00:03:59,680
ID variable.

52
00:04:01,870 --> 00:04:06,790
We can use template tags to help us get the relevant information on a post.

53
00:04:06,820 --> 00:04:10,200
You'll notice that we're not using this function in the loop.

54
00:04:10,210 --> 00:04:15,880
If we're not using a template tag in a loop, we must provide the ID of the post to these functions

55
00:04:15,880 --> 00:04:18,820
to retrieve information related to a post.

56
00:04:18,850 --> 00:04:26,350
Next, let's set the response image variable to the get the post thumbnail URL function with the ID

57
00:04:26,350 --> 00:04:27,220
variable.

58
00:04:29,430 --> 00:04:33,360
The second argument is the size of the image by default.

59
00:04:33,390 --> 00:04:36,730
WordPress will return the URL to the thumbnail.

60
00:04:36,750 --> 00:04:39,390
Let's change the size to full.

61
00:04:41,600 --> 00:04:45,320
This size will return the size of the original image.

62
00:04:45,350 --> 00:04:52,880
Lastly, let's set the response title variable to the get the title function with the ID variable.

63
00:04:55,130 --> 00:04:59,120
After updating their response, we can return it from the function.

64
00:05:01,190 --> 00:05:04,380
Let's try testing the endpoint with Postman.

65
00:05:04,400 --> 00:05:07,270
Postman should have saved your previous session.

66
00:05:07,280 --> 00:05:11,080
We can modify the current URL to our new endpoint.

67
00:05:11,090 --> 00:05:13,820
Change the path to the following up.

68
00:05:13,820 --> 00:05:17,360
Slash V one slash daily recipe.

69
00:05:19,560 --> 00:05:26,310
The parameters from the previous session will go away if they haven't manually clear them from the request.

70
00:05:26,340 --> 00:05:30,330
After making those changes, let's send the request.

71
00:05:32,560 --> 00:05:34,120
In the requests body.

72
00:05:34,120 --> 00:05:36,990
We are given a random recipe from the post.

73
00:05:37,000 --> 00:05:39,640
Let's try sending the request again.

74
00:05:39,670 --> 00:05:42,370
The same post should appear in the body.

75
00:05:42,370 --> 00:05:48,000
A new recipe will not be selected until 24 hours have passed, which is perfect.

76
00:05:48,010 --> 00:05:52,360
This is the exact behavior we were looking for in the next lecture.

77
00:05:52,360 --> 00:05:55,720
Let's begin displaying this information in our block.

