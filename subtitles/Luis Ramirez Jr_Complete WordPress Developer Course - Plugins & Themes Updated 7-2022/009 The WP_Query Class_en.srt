1
00:00:00,120 --> 00:00:06,240
In this lecture, let's begin working on finishing the popular recipes block by rendering it with the

2
00:00:06,240 --> 00:00:06,850
server.

3
00:00:06,870 --> 00:00:13,680
We've taken the first steps of accomplishing this task by defining a function for rendering the block

4
00:00:13,680 --> 00:00:14,820
in your editor.

5
00:00:14,850 --> 00:00:18,930
Open the popular recipes dot PHP file.

6
00:00:21,000 --> 00:00:22,640
First things first.

7
00:00:22,650 --> 00:00:27,120
Let's grab the attributes by accepting the attributes argument.

8
00:00:29,240 --> 00:00:34,080
Next we can begin extracting the attributes, starting with the title.

9
00:00:34,100 --> 00:00:36,560
Create a variable called title.

10
00:00:36,560 --> 00:00:43,760
The value for this variable will be the escape html function with the attributes title variable.

11
00:00:45,880 --> 00:00:50,360
As usual, we are escaping the title before rendering it on the screen.

12
00:00:50,380 --> 00:00:57,040
This step is to reduce the likelihood of malicious HTML being inserted into the document.

13
00:00:57,070 --> 00:01:00,430
Next, let's grab the cuisine IDs.

14
00:01:00,460 --> 00:01:03,820
Create a variable called cuisine IDs.

15
00:01:06,030 --> 00:01:12,120
The value for this variable should be an array of cuisine IDs in our attributes.

16
00:01:12,120 --> 00:01:18,960
We're storing an array of objects where each object represents a term from the cuisine taxonomy.

17
00:01:18,960 --> 00:01:22,830
Let's create a new array where each item is the ID.

18
00:01:22,860 --> 00:01:28,380
Let's set this variable to the return value of the array map function.

19
00:01:30,650 --> 00:01:34,020
This function is defined by the PHP language.

20
00:01:34,040 --> 00:01:37,850
The array map function will loop through an array.

21
00:01:37,880 --> 00:01:43,970
On each iteration, we can return a new value to replace the current value of the item.

22
00:01:43,970 --> 00:01:47,480
For our purpose, we're trying to grab the ID.

23
00:01:47,510 --> 00:01:53,840
There are two arguments which is a function for handling each iteration of the loop and the array.

24
00:01:53,870 --> 00:01:57,350
Let's pass in an anonymous PHP function.

25
00:01:59,680 --> 00:02:03,700
Next pass in the attributes cuisine's variable.

26
00:02:05,820 --> 00:02:11,340
The function passed into the array map function will be given each item in the array.

27
00:02:11,370 --> 00:02:15,720
Let's reference each item as an argument called term.

28
00:02:17,680 --> 00:02:18,970
Within the function.

29
00:02:18,970 --> 00:02:21,790
Let's return the term ID item.

30
00:02:24,100 --> 00:02:27,430
Technically the items in the array are objects.

31
00:02:27,430 --> 00:02:33,010
However, WordPress will convert the JavaScript objects into PHP arrays.

32
00:02:33,040 --> 00:02:36,530
The property name will be converted into an array key.

33
00:02:36,550 --> 00:02:41,680
We can reference a specific item from the object by its name as an array key.

34
00:02:42,040 --> 00:02:47,260
The value returned by this function will be a new array of term IDs.

35
00:02:47,290 --> 00:02:51,050
We can finally begin initiating the query for posts.

36
00:02:51,070 --> 00:02:54,870
Previously, WordPress would create the query for us.

37
00:02:54,880 --> 00:02:59,560
We did not have to create the query ourselves with the rest API.

38
00:02:59,710 --> 00:03:05,190
This time we must manually create the query with the WP query class.

39
00:03:05,200 --> 00:03:12,220
After the variables define a variable called query, the value for this variable will be a new instance

40
00:03:12,220 --> 00:03:14,590
of the WP query class.

41
00:03:16,700 --> 00:03:22,240
New instances of a class can be configured by passing data inside the parentheses.

42
00:03:22,250 --> 00:03:25,800
We haven't had the opportunity to discuss this feature.

43
00:03:25,820 --> 00:03:32,030
However, the PHP classes can support arguments similar to functions by default.

44
00:03:32,060 --> 00:03:37,310
WordPress will query the database for a list of posts for our block.

45
00:03:37,310 --> 00:03:45,170
We're not interested in posts, so let's modify the query by passing in an array above the query variable.

46
00:03:45,170 --> 00:03:50,060
Define a variable called arguments with an initial value of an array.

47
00:03:52,350 --> 00:03:55,260
The query can be modified with an array.

48
00:03:55,290 --> 00:04:01,940
In this array we can add parameters documented on the page for the WP query class.

49
00:04:01,950 --> 00:04:05,690
Most of these parameters are going to be familiar to us.

50
00:04:05,700 --> 00:04:13,470
First, let's filter the posts by the recipe post type by setting the post type key to recipe.

51
00:04:19,980 --> 00:04:26,170
Next, we can limit the number of posts to retrieve by setting the posts per page key.

52
00:04:26,190 --> 00:04:30,600
The value for this key will be the attributes count variable.

53
00:04:32,900 --> 00:04:38,500
After limiting the results, we can start sorting the results by the rating of the recipe.

54
00:04:38,510 --> 00:04:42,440
Set the order by parameter to meta value num.

55
00:04:44,620 --> 00:04:49,300
Next set the meta key parameter to recipe rating.

56
00:04:51,440 --> 00:04:55,130
Lastly, set the order key to descending.

57
00:04:57,470 --> 00:04:59,260
The query is almost ready.

58
00:04:59,270 --> 00:05:02,590
There's one piece of information to add to the query.

59
00:05:02,600 --> 00:05:06,990
The results should be filtered by a specific taxonomy term.

60
00:05:07,010 --> 00:05:13,490
If the block has cuisine IDs, the query must be altered to filter the results below.

61
00:05:13,490 --> 00:05:20,810
The arguments variable create a conditional statement with the following condition not empty cuisine

62
00:05:20,810 --> 00:05:21,770
IDs.

63
00:05:23,980 --> 00:05:25,900
Before altering the query.

64
00:05:25,900 --> 00:05:28,920
We're checking the cuisine IDs variable.

65
00:05:28,930 --> 00:05:34,280
It's possible that the user may not want to filter their results by a specific cuisine.

66
00:05:34,300 --> 00:05:37,690
If that's the case, the query should not be altered.

67
00:05:37,690 --> 00:05:44,410
If the array contains at least one value, we can begin modifying the query in the conditional block.

68
00:05:44,410 --> 00:05:48,010
Let's add a new key called tax query.

69
00:05:50,370 --> 00:05:54,400
A new item can be pushed into an array with this syntax.

70
00:05:54,420 --> 00:05:58,170
We do not need a function to push items into an array.

71
00:05:58,210 --> 00:06:01,350
Pjp is very flexible with its arrays.

72
00:06:01,350 --> 00:06:06,040
The value for this new item will be in array within this array.

73
00:06:06,060 --> 00:06:11,550
We can add more arrays with configuration settings in each child array.

74
00:06:11,550 --> 00:06:15,150
We can filter the results by a specific taxonomy.

75
00:06:15,150 --> 00:06:19,800
As you know, a post type can have multiple taxonomies.

76
00:06:19,800 --> 00:06:23,520
The query can be refined for multiple taxonomies.

77
00:06:23,520 --> 00:06:30,120
However, in our case, we're interested in filtering the results by the cuisine taxonomy.

78
00:06:30,120 --> 00:06:34,980
Inside this array, let's add a parameter called taxonomy.

79
00:06:34,980 --> 00:06:37,650
Set this parameter to cuisine.

80
00:06:39,900 --> 00:06:45,630
Next, we need to specify the field to filter the recipes by taxonomy.

81
00:06:45,630 --> 00:06:49,500
Terms can be sorted by their name, slug or ID.

82
00:06:49,530 --> 00:06:55,920
We only have their ids, so let's set the field parameter to term ID.

83
00:06:58,160 --> 00:07:05,540
As a reminder, the information for these parameters can be found on the WP Query Class Documentation

84
00:07:05,540 --> 00:07:06,210
page.

85
00:07:06,230 --> 00:07:10,180
Next, let's add a parameter called terms.

86
00:07:10,190 --> 00:07:15,290
The value for this parameter will be the cuisine IDs variable.

87
00:07:17,460 --> 00:07:20,270
Let me break down the query we've created.

88
00:07:20,280 --> 00:07:24,930
Starting from the Loop, we're performing a query for recipe posts.

89
00:07:24,930 --> 00:07:28,380
The number of results should not exceed ten posts.

90
00:07:28,380 --> 00:07:32,160
The order of the recipes will be sorted by their ratings.

91
00:07:32,160 --> 00:07:36,270
The highest rated recipe will appear at the top of the array.

92
00:07:36,570 --> 00:07:43,590
If the posts should be filtered by a specific taxonomy term, we are adding to the query by adding the

93
00:07:43,590 --> 00:07:45,570
tax query parameter.

94
00:07:45,570 --> 00:07:52,740
In this parameter, we are filtering the posts further by a set of terms within the cuisine taxonomy.

95
00:07:52,890 --> 00:07:58,410
Overall, we have a query for grabbing the most highly rated recipes on our site.

96
00:07:58,440 --> 00:08:05,010
Let's pass on the arguments variable to the new instance of the WP query class.

97
00:08:07,170 --> 00:08:13,250
After the instance has been created, WordPress will initiate a query to the database.

98
00:08:13,260 --> 00:08:18,840
This query will return a list of posts which are stored in the query variable.

99
00:08:18,870 --> 00:08:21,180
We are starting to run short on time.

100
00:08:21,180 --> 00:08:25,110
In the next lecture, let's begin looping through the results.

