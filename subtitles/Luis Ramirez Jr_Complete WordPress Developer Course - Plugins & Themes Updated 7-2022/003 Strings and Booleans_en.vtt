WEBVTT
1
00:00:00.120 --> 00:00:03.870
In this lecture, we're going to learn about strings and booleans.

2
00:00:03.870 --> 00:00:07.320
We're not limited to working with numbers in PHP.

3
00:00:07.350 --> 00:00:10.440
Various values can be stored in a variable.

4
00:00:10.920 --> 00:00:14.430
PHP has a category system for variables.

5
00:00:14.430 --> 00:00:17.940
Let's discuss the categories before writing code.

6
00:00:17.970 --> 00:00:21.900
In PHP, there's a concept called data types.

7
00:00:21.930 --> 00:00:26.130
A data type describes the type of data stored in a variable.

8
00:00:26.160 --> 00:00:28.950
Every variable will have a data type.

9
00:00:28.980 --> 00:00:33.330
Assigning a data type to a variable is automated by the language.

10
00:00:33.330 --> 00:00:36.810
We don't have to take care of this process ourselves.

11
00:00:36.810 --> 00:00:42.120
Despite that, it's always good to have some understanding of data types.

12
00:00:42.120 --> 00:00:45.540
In the previous lecture we worked with numbers.

13
00:00:46.020 --> 00:00:49.590
PHP will assign the integer data type to numbers.

14
00:00:49.590 --> 00:00:54.630
If we're working with decimal values, the data type would be called float.

15
00:00:54.630 --> 00:00:58.680
The next two data types are strings and booleans.

16
00:00:58.680 --> 00:01:02.130
We'll be discussing these two data types in a moment.

17
00:01:02.160 --> 00:01:05.040
Afterward, we have arrays and objects.

18
00:01:05.040 --> 00:01:08.460
These data types will have lectures of their own.

19
00:01:08.550 --> 00:01:11.310
The last data type is called null.

20
00:01:11.340 --> 00:01:14.640
A variable is null if it doesn't have a value.

21
00:01:14.670 --> 00:01:19.620
Here's an example of what a variable looks like without being assigned a value.

22
00:01:19.620 --> 00:01:22.110
It's optional to assign a value.

23
00:01:22.110 --> 00:01:26.910
If we decide not to assign a value, it'll be considered empty or null.

24
00:01:26.910 --> 00:01:30.540
You're still able to assign a value at a later time.

25
00:01:30.540 --> 00:01:34.200
It's not common to declare a variable without a value.

26
00:01:34.230 --> 00:01:37.980
However, there are some cases when you want to do this.

27
00:01:37.980 --> 00:01:44.130
For example, you may want to declare a variable because you'll need to use it later in your program

28
00:01:44.130 --> 00:01:47.790
but don't have a value to assign it during declaration.

29
00:01:48.910 --> 00:01:53.980
Aside from numbers, strings are a common data type you'll be working with.

30
00:01:54.010 --> 00:01:57.010
Strings are the data type for raw text.

31
00:01:57.040 --> 00:02:01.540
We may want to store names, addresses or paragraphs of text.

32
00:02:01.540 --> 00:02:07.330
If we're storing text, PHP will set the data type of a variable to string.

33
00:02:07.330 --> 00:02:13.300
The reason it's called string is because the text is made up of a sequence of characters that are strung

34
00:02:13.330 --> 00:02:14.050
together.

35
00:02:14.050 --> 00:02:17.650
It's a weird technical name, but you'll soon get used to it.

36
00:02:17.650 --> 00:02:18.670
And the editor?

37
00:02:18.670 --> 00:02:22.120
We're going to create a variable called name.

38
00:02:24.400 --> 00:02:28.270
The value of the variable will be a pair of single quotes.

39
00:02:30.360 --> 00:02:33.690
Strings are created by wrapping texts with quotes.

40
00:02:34.230 --> 00:02:37.240
PHP will interpret this syntax as a string.

41
00:02:37.260 --> 00:02:40.710
Inside these quotes we can write whatever we want.

42
00:02:40.710 --> 00:02:47.630
We can write gibberish numbers, letters, spaces, and almost any character on your keyboard.

43
00:02:47.640 --> 00:02:51.050
There isn't a limit to what we can write inside these quotes.

44
00:02:51.060 --> 00:02:57.450
The value will be completely valid since the variable is called name, we should add our name.

45
00:02:59.660 --> 00:03:04.400
Next we'll output the variable by typing the following echo name.

46
00:03:06.660 --> 00:03:09.190
Be sure to include the semicolons.

47
00:03:09.210 --> 00:03:10.690
This is very important.

48
00:03:10.710 --> 00:03:16.060
Without a semicolon, php is unaware if we're finished with our line of code.

49
00:03:16.080 --> 00:03:18.720
Let's check out the browser for the output.

50
00:03:20.880 --> 00:03:21.570
Great.

51
00:03:21.600 --> 00:03:23.500
Our name appears in the browser.

52
00:03:23.520 --> 00:03:26.210
Strings are how we can store text.

53
00:03:26.220 --> 00:03:28.870
They're very simple to read and write.

54
00:03:28.890 --> 00:03:31.590
There is an alternative way to write text.

55
00:03:31.590 --> 00:03:36.720
Instead of using single quotes, we can wrap our text with double quotes.

56
00:03:38.940 --> 00:03:42.200
There isn't a difference between single quotes or double quotes.

57
00:03:42.210 --> 00:03:44.980
They'll both tell PHP to create a string.

58
00:03:45.000 --> 00:03:46.630
It's a matter of preference.

59
00:03:46.650 --> 00:03:50.190
I prefer to use single quotes because they're more readable.

60
00:03:50.220 --> 00:03:51.960
Use whichever you prefer.

61
00:03:52.140 --> 00:03:54.090
Let's move on to booleans.

62
00:03:54.120 --> 00:03:58.620
A boolean is a data type where the value is either true or false.

63
00:03:58.650 --> 00:04:04.950
I mean that quite literally we're going to replace our code with a variable called is logged in.

64
00:04:07.210 --> 00:04:09.670
The variable name is multi worded.

65
00:04:09.700 --> 00:04:14.710
If we wanted to, we could write the entire variable name with lowercase letters.

66
00:04:14.740 --> 00:04:17.570
However, that can be difficult to read.

67
00:04:17.589 --> 00:04:23.020
One common practice is to capitalize each word except for the first word.

68
00:04:23.050 --> 00:04:25.900
This practice is known as camel racing.

69
00:04:25.900 --> 00:04:30.010
Another practice is to separate each word with an underscore.

70
00:04:32.330 --> 00:04:35.390
Keep in mind that underscore characters are valid.

71
00:04:35.390 --> 00:04:40.250
Any variable name we're going to be using camel casing for this course.

72
00:04:40.250 --> 00:04:42.590
It's more common than snake casing.

73
00:04:42.590 --> 00:04:47.030
Next, let's assign the variable to a value called true.

74
00:04:49.210 --> 00:04:53.750
If we type true, php will set the data type to a boolean.

75
00:04:53.770 --> 00:04:58.730
Booleans are a way to tell our program if something is true or false.

76
00:04:58.750 --> 00:05:03.040
For example, we may need to tell our program if a user is logged in.

77
00:05:03.130 --> 00:05:07.210
A good idea would be to store this value in a variable.

78
00:05:07.240 --> 00:05:12.340
A variable will keep track of the current authenticated status of the user.

79
00:05:12.430 --> 00:05:15.660
A boolean can only be one of two values.

80
00:05:15.670 --> 00:05:17.710
It can be true or false.

81
00:05:17.980 --> 00:05:20.560
In this example, we're setting it to true.

82
00:05:20.590 --> 00:05:22.510
Let's change it to false.

83
00:05:24.620 --> 00:05:27.230
Next, let's echo this variable.

84
00:05:29.330 --> 00:05:32.330
If we switch to the browser, nothing appears.

85
00:05:34.430 --> 00:05:39.890
It's because a false boolean value will tell the program not to output anything.

86
00:05:39.920 --> 00:05:41.360
It's completely normal.

87
00:05:41.360 --> 00:05:44.920
If we had true, the number one would be outputted.

88
00:05:45.440 --> 00:05:48.560
PHP will not output the word true onto the screen.

89
00:05:48.560 --> 00:05:53.420
It'll convert the boolean value into a number if we attempt to output it.

90
00:05:53.450 --> 00:05:57.090
You may be wondering why does it matter which data type we use?

91
00:05:57.110 --> 00:05:59.870
Theoretically, we could stick to strings.

92
00:05:59.870 --> 00:06:04.970
However, it's essential to stick with the appropriate data type whenever possible.

93
00:06:05.510 --> 00:06:10.870
PHP will attempt to optimize our program based on the data types of our variables.

94
00:06:10.880 --> 00:06:15.240
For example, Booleans can only be one of two values.

95
00:06:15.650 --> 00:06:22.790
PHP never has to worry about a third value, therefore it will be able to process our code much faster

96
00:06:22.790 --> 00:06:24.640
as opposed to a string.

97
00:06:24.650 --> 00:06:32.240
In addition, PHP can behave weirdly if we mix our data types throughout this course we will get a lot

98
00:06:32.240 --> 00:06:34.790
of practice with different data types.

99
00:06:34.790 --> 00:06:38.080
You'll see how each data type can come in handy.

100
00:06:38.090 --> 00:06:41.270
We'll continue our studies in the next lecture.

