1
00:00:00,150 --> 00:00:04,530
In this lecture we are going to practice with the WordPress Rest API.

2
00:00:04,530 --> 00:00:10,260
Before we start sending requests, we should download an application designed for rest APIs.

3
00:00:10,260 --> 00:00:15,600
In the resource section of this lecture, I provide a link to a tool called Postman.

4
00:00:15,600 --> 00:00:18,810
Postman is a tool for sending API requests.

5
00:00:18,810 --> 00:00:24,090
It's a great tool for rapidly prototyping a rest API before downloading.

6
00:00:24,090 --> 00:00:25,260
You'll need an account.

7
00:00:25,290 --> 00:00:27,450
Go ahead with creating an account.

8
00:00:27,480 --> 00:00:28,920
It's completely free.

9
00:00:28,920 --> 00:00:34,980
There is a premium version of Postman, but the free version will suffice for WordPress development.

10
00:00:35,010 --> 00:00:37,860
After creating an account, log into it.

11
00:00:37,860 --> 00:00:39,810
I'm going to quickly do so.

12
00:00:41,720 --> 00:00:43,700
You'll be taken to the dashboard.

13
00:00:43,700 --> 00:00:48,640
We can test postman from the browser, but I prefer the desktop application.

14
00:00:48,650 --> 00:00:53,660
It works with local WordPress development, whereas the browser version does not.

15
00:00:53,690 --> 00:00:57,970
On the sidebar, there's a link for downloading the desktop application.

16
00:00:57,980 --> 00:01:01,610
I want you to download Postman for your system next.

17
00:01:01,610 --> 00:01:03,440
Go through the installation.

18
00:01:03,440 --> 00:01:07,010
Installing Postman is like installing any other program.

19
00:01:07,040 --> 00:01:10,470
Just keep clicking next until you've reached the end.

20
00:01:10,490 --> 00:01:13,310
I'm going to install Postman for my system.

21
00:01:15,300 --> 00:01:19,380
After installing Postman, you may need to log into the application.

22
00:01:19,380 --> 00:01:24,000
Once you are logged in you will be greeted with the same interface from the browser.

23
00:01:24,030 --> 00:01:30,270
Like I said before, the difference between the applications is that the desktop app has access to local

24
00:01:30,270 --> 00:01:32,670
environments at the top of the menu.

25
00:01:32,700 --> 00:01:35,430
We are going to access the workspace menu.

26
00:01:35,460 --> 00:01:38,250
You may be working on multiple applications.

27
00:01:38,250 --> 00:01:40,740
You can create a workspace for each app.

28
00:01:40,770 --> 00:01:42,750
This feature will reduce clutter.

29
00:01:42,780 --> 00:01:45,760
Let's create a new workspace for our site.

30
00:01:45,780 --> 00:01:49,290
The name of our workspace will be called WordPress Udemy.

31
00:01:51,380 --> 00:01:52,880
Let's skip the summary.

32
00:01:52,880 --> 00:01:56,510
Lastly, we can set the visibility of our workspace.

33
00:01:56,510 --> 00:02:00,910
We're on our personal machines, so let's select the personal option.

34
00:02:00,920 --> 00:02:04,310
After selecting those options, create the workspace.

35
00:02:06,360 --> 00:02:09,479
Initially, the interface may feel overwhelming.

36
00:02:09,509 --> 00:02:13,500
However, these tools are beneficial for testing your API.

37
00:02:13,530 --> 00:02:17,100
To keep things simple, let's minimize the sidebar.

38
00:02:17,100 --> 00:02:21,900
At the bottom left corner, there's a button for closing the sidebar.

39
00:02:21,930 --> 00:02:25,950
After closing the sidebar, let's close the overview tab.

40
00:02:28,060 --> 00:02:31,300
This is much simpler at the top of the application.

41
00:02:31,300 --> 00:02:32,790
Let's add a new tab.

42
00:02:32,800 --> 00:02:34,060
From this tab.

43
00:02:34,060 --> 00:02:36,220
We can initiate a new request.

44
00:02:36,220 --> 00:02:39,450
We can provide a your URL for sending a request.

45
00:02:39,460 --> 00:02:43,120
Let's try grabbing a list of posts in the browser.

46
00:02:43,120 --> 00:02:46,960
Navigate to the rest API Handbook for WordPress.

47
00:02:48,510 --> 00:02:49,620
On the sidebar.

48
00:02:49,620 --> 00:02:52,290
Let's open the End Point Reference menu.

49
00:02:52,320 --> 00:02:55,290
We're going to check out the End Point for posts.

50
00:02:57,350 --> 00:02:59,790
There's a wealth of information on this page.

51
00:02:59,810 --> 00:03:03,600
Let's learn how to navigate it from the table of contents.

52
00:03:03,620 --> 00:03:06,880
Let's check out the first topic called Schema.

53
00:03:06,890 --> 00:03:13,850
The schema topic will describe the type of values you can expect as a response by requesting a list

54
00:03:13,850 --> 00:03:14,660
of posts.

55
00:03:14,660 --> 00:03:21,470
WordPress will respond with JSON data inside the response, we are going to be provided with various

56
00:03:21,470 --> 00:03:23,630
properties related to a post.

57
00:03:23,630 --> 00:03:27,380
The schema section describes each property in detail.

58
00:03:27,380 --> 00:03:32,480
For example, the date of the post will be added under a property called Date.

59
00:03:32,570 --> 00:03:37,700
Other properties include the ID, title, author or post type.

60
00:03:37,700 --> 00:03:43,510
Not all properties will have a value, but you can expect most of these properties from the response.

61
00:03:43,520 --> 00:03:46,100
Let's head back to the table of contents.

62
00:03:46,100 --> 00:03:47,690
Through the rest API.

63
00:03:47,690 --> 00:03:49,940
We can perform various actions.

64
00:03:49,940 --> 00:03:57,560
We can grab a list of posts, create a post, retrieve a single post, update a post, and lastly delete

65
00:03:57,560 --> 00:03:58,310
a post.

66
00:03:58,340 --> 00:04:04,310
In each section we are given the definition an example request and a list of arguments.

67
00:04:04,310 --> 00:04:06,410
Each sub section is the same.

68
00:04:06,410 --> 00:04:08,210
Let's look at an example.

69
00:04:08,210 --> 00:04:11,660
I'm going to click on the list post section.

70
00:04:13,880 --> 00:04:17,120
In the beginning, WordPress will provide a description.

71
00:04:17,149 --> 00:04:22,710
According to this description, the following end point will provide a collection of posts.

72
00:04:22,730 --> 00:04:27,380
Afterward, we are given the definition, which is the end point for this action.

73
00:04:29,130 --> 00:04:35,120
If you were to comb through the documentation for the definitions of each action, you may notice something.

74
00:04:35,130 --> 00:04:38,100
The end points are vastly similar to one another.

75
00:04:38,130 --> 00:04:39,780
This can feel confusing.

76
00:04:39,780 --> 00:04:42,960
How can a single URL handle different actions?

77
00:04:42,990 --> 00:04:48,930
It would be the same as having a single URL deliver different images on page refreshes.

78
00:04:49,050 --> 00:04:52,380
HTTP is a very powerful protocol for the web.

79
00:04:52,410 --> 00:04:54,180
It's not just URLs.

80
00:04:54,180 --> 00:05:00,450
We can add additional information to each request in a documentation next to the endpoints.

81
00:05:00,480 --> 00:05:03,030
You're going to find an HTTP method.

82
00:05:03,030 --> 00:05:08,370
For example, grabbing a list of posts is performed with a get method.

83
00:05:08,400 --> 00:05:11,790
Updating a post is performed with a post method.

84
00:05:11,790 --> 00:05:14,970
So what are HTTP methods?

85
00:05:15,160 --> 00:05:22,090
HTTP methods are a category system for describing the type of action that should be performed on a resource.

86
00:05:22,110 --> 00:05:25,420
In some cases, we may want to grab a post.

87
00:05:25,440 --> 00:05:28,950
In other cases, we may need to update a post.

88
00:05:29,220 --> 00:05:32,460
HTTP methods keep our URLs clean.

89
00:05:32,700 --> 00:05:37,780
For example, it may be tempting to create an endpoint called Get Post.

90
00:05:37,800 --> 00:05:41,430
However, what if someone else prefers the name grab post?

91
00:05:41,460 --> 00:05:44,770
In a way, both paths describe the action.

92
00:05:44,790 --> 00:05:48,120
This is the wrong way of designing a rest API.

93
00:05:48,150 --> 00:05:51,390
This practice will lead to inconsistent naming.

94
00:05:51,450 --> 00:05:53,870
There's a better way to write endpoints.

95
00:05:53,880 --> 00:05:57,590
The endpoint should describe the resources, not the action.

96
00:05:57,600 --> 00:06:01,200
The action can be described with an HTTP method.

97
00:06:01,230 --> 00:06:04,950
This naming practice adds clarity and simplicity.

98
00:06:05,100 --> 00:06:07,550
There are dozens of HTTP methods.

99
00:06:07,560 --> 00:06:10,580
Luckily, we can focus on a handful of them.

100
00:06:10,590 --> 00:06:17,160
The most important methods are the following The get method is used for retrieving a single or list

101
00:06:17,160 --> 00:06:18,300
of resources.

102
00:06:18,300 --> 00:06:22,430
The update method is used for creating or updating a resource.

103
00:06:22,440 --> 00:06:26,910
Lastly, the delete method is used for deleting a resource.

104
00:06:27,610 --> 00:06:29,410
Back to the documentation.

105
00:06:29,410 --> 00:06:31,560
The definition should make more sense.

106
00:06:31,570 --> 00:06:36,570
The HTTP method for grabbing a list of posts is the get method.

107
00:06:36,580 --> 00:06:39,160
Let's shift our focus to the URL.

108
00:06:39,190 --> 00:06:43,000
WordPress will have a special path for its rest APIs.

109
00:06:43,000 --> 00:06:51,190
In this case, we can grab a list of posts by visiting the WP slash V two slash posts endpoint.

110
00:06:51,190 --> 00:06:55,480
This endpoint can be appended after the URL of a WordPress site.

111
00:06:55,510 --> 00:06:59,680
The next section has an example of what a request would look like.

112
00:06:59,680 --> 00:07:01,690
It's very self explanatory.

113
00:07:01,690 --> 00:07:05,530
Lastly, we have a section with a list of arguments.

114
00:07:05,530 --> 00:07:10,420
As I said before, rest APIs allow us to send and receive data.

115
00:07:10,420 --> 00:07:15,760
We can filter the list of posts returned by WordPress by sending arguments.

116
00:07:15,760 --> 00:07:22,750
For example, we can limit the number of posts returned by adding the per page arguments by defaults.

117
00:07:22,750 --> 00:07:24,730
This argument is set to ten.

118
00:07:24,730 --> 00:07:32,740
Let's try using this endpoint switch over to post min and the address bar type the following URL Udemy

119
00:07:33,040 --> 00:07:40,060
Local Slash WP json slash wp slash v two slash posts.

120
00:07:42,240 --> 00:07:45,330
Your server should be running for this request to work.

121
00:07:45,360 --> 00:07:48,960
Let's examine the URL before initiating the request.

122
00:07:48,990 --> 00:07:53,160
WordPress will reserve a unique path for the rest API.

123
00:07:53,190 --> 00:07:56,820
All paths must begin with WP JSON.

124
00:07:56,850 --> 00:08:01,860
It doesn't matter if the endpoint is part of the core or a custom endpoint.

125
00:08:01,890 --> 00:08:05,730
Afterward, we can append the endpoint to the left.

126
00:08:05,760 --> 00:08:09,240
We can change the HTTP method by default.

127
00:08:09,270 --> 00:08:11,410
The method has been set to get.

128
00:08:11,430 --> 00:08:15,570
As I mentioned before, there are dozens of HTTP methods.

129
00:08:15,570 --> 00:08:23,100
However, in relation to WordPress, the most commonly used methods are get post and delete.

130
00:08:23,130 --> 00:08:25,200
Let's initiate the request.

131
00:08:27,360 --> 00:08:33,090
After doing so, the bottom of the application should display the data received by the server.

132
00:08:33,120 --> 00:08:37,950
As you can see, WordPress will provide a list of posts with JSON.

133
00:08:37,980 --> 00:08:40,020
The number of posts may be limited.

134
00:08:40,049 --> 00:08:44,070
We can customize the posts returned by adding an argument.

135
00:08:44,159 --> 00:08:47,400
Arguments can be added through query parameters.

136
00:08:47,430 --> 00:08:52,100
Conveniently, Postman provides a section for adding query parameters.

137
00:08:52,110 --> 00:08:56,250
For example, let's try adding the per page argument.

138
00:08:58,380 --> 00:09:01,110
The value for this argument will be to.

139
00:09:01,110 --> 00:09:04,800
As for the description, we can safely ignore this field.

140
00:09:04,800 --> 00:09:10,680
Postman provides this field for adding a description for your teammates who may not know what the query

141
00:09:10,680 --> 00:09:12,060
parameter is for.

142
00:09:12,090 --> 00:09:15,780
After filling out the form, let's resubmit the request.

143
00:09:17,910 --> 00:09:21,740
This time, two objects will appear from the response.

144
00:09:21,750 --> 00:09:25,070
As you can see, we can grab data from WordPress.

145
00:09:25,080 --> 00:09:29,370
We're going to be using the rest API for registering and logging in.

146
00:09:29,370 --> 00:09:32,670
Let's begin that process in the next lecture.

