WEBVTT
1
00:00:00.150 --> 00:00:05.030
In this lecture, we are going to inject the rest URL to the front end.

2
00:00:05.040 --> 00:00:08.610
The URL to our endpoint should not be hardcoded.

3
00:00:08.640 --> 00:00:13.800
We should let WordPress generate a URL to our endpoint by doing so.

4
00:00:13.830 --> 00:00:18.300
Our registration form should be compatible with any URL structure.

5
00:00:18.330 --> 00:00:20.010
There's just one problem.

6
00:00:20.010 --> 00:00:22.830
We're using JavaScript to submit the form.

7
00:00:22.830 --> 00:00:25.050
We don't have access to WordPress.

8
00:00:25.470 --> 00:00:29.350
PHP functions for generating a full URL as usual.

9
00:00:29.370 --> 00:00:32.700
WordPress has a solution for addressing this issue.

10
00:00:32.729 --> 00:00:36.510
We can inject an inline script into the documents.

11
00:00:36.540 --> 00:00:39.990
Dynamic scripts can be created with JavaScript.

12
00:00:40.020 --> 00:00:41.490
Let's give it a try.

13
00:00:41.520 --> 00:00:46.500
Inside your editor, open the index php plugin file.

14
00:00:48.650 --> 00:00:51.860
These scripts should not be injected prematurely.

15
00:00:51.890 --> 00:00:59.300
Let's use the correct action hook for adding scripts to the documents at the bottom of the Hooks section.

16
00:00:59.300 --> 00:01:01.670
Add the add action function.

17
00:01:03.760 --> 00:01:07.540
The name of the hook is called WP and Q Scripts.

18
00:01:09.740 --> 00:01:13.850
This hook is called during the ink process for scripts.

19
00:01:13.880 --> 00:01:17.590
WordPress recommends this hook for dynamic scripts.

20
00:01:17.600 --> 00:01:21.740
The name of our function will be called up NQ Scripts.

21
00:01:23.880 --> 00:01:25.840
Inside the includes folder.

22
00:01:25.860 --> 00:01:28.380
Create a new directory called Front.

23
00:01:30.510 --> 00:01:34.610
Files related to the front end will be created in this directory.

24
00:01:34.620 --> 00:01:38.640
Let's create a new file called NQ PHP.

25
00:01:41.020 --> 00:01:44.590
Define the up end q scripts function.

26
00:01:46.850 --> 00:01:52.220
First, let's create a variable for storing the URLs to our custom endpoint.

27
00:01:52.250 --> 00:01:56.870
Inside the function, define a variable called off the URLs.

28
00:01:56.870 --> 00:01:59.840
The value for this variable will be an array.

29
00:02:02.240 --> 00:02:08.210
Even though we have a single endpoint, we're accounting for the next endpoint for authentication.

30
00:02:08.210 --> 00:02:14.330
After finishing the registration form, we're going to work on the login form inside this array.

31
00:02:14.330 --> 00:02:16.130
Add a key called signup.

32
00:02:16.160 --> 00:02:20.180
The value for this key will be the rest URL function.

33
00:02:22.310 --> 00:02:27.140
This function will return a URL to WordPress as rest API.

34
00:02:27.170 --> 00:02:31.580
We can append an endpoint to the URL by passing in a string.

35
00:02:31.610 --> 00:02:35.780
The path for our custom endpoint is the following up.

36
00:02:35.780 --> 00:02:38.780
Slash v one slash sign up.

37
00:02:40.960 --> 00:02:42.550
For extra security.

38
00:02:42.550 --> 00:02:47.650
We should wrap this function with a function called escape URL raw.

39
00:02:49.980 --> 00:02:52.260
This function will escape a URL.

40
00:02:52.290 --> 00:02:56.820
Unfortunately, the rescue URL function will not escape the URL.

41
00:02:56.850 --> 00:03:03.810
For this reason, I highly recommend wrapping the values returned by this function with the escape URL

42
00:03:03.810 --> 00:03:04.950
raw function.

43
00:03:05.010 --> 00:03:11.010
After creating the array, we are going to wrap the array with a JSON encode function.

44
00:03:13.150 --> 00:03:16.600
The variable we've created is written with PHP.

45
00:03:16.630 --> 00:03:20.900
However, this information needs to be accessible with JavaScript.

46
00:03:20.920 --> 00:03:25.330
As we've learned, JSON is heavily inspired by JavaScript.

47
00:03:25.360 --> 00:03:29.530
A JSON object is compatible with a JavaScript object.

48
00:03:29.560 --> 00:03:37.630
Fortunately, PHP has a function for converting a variables value into a JSON compatible object called

49
00:03:37.630 --> 00:03:39.160
JSON encode.

50
00:03:39.370 --> 00:03:44.020
This function will return a string which contains a JSON object.

51
00:03:44.050 --> 00:03:48.970
The next step is to create a variable for JavaScript with PHP.

52
00:03:49.000 --> 00:03:52.330
The variables value should be set to this string.

53
00:03:52.360 --> 00:03:57.530
WordPress has a function for injecting an inline script into the documents.

54
00:03:57.550 --> 00:04:00.490
It's called WP Inline scripts.

55
00:04:02.670 --> 00:04:05.370
There are three arguments for this function.

56
00:04:05.400 --> 00:04:09.580
The first argument is the handle of a script by itself.

57
00:04:09.600 --> 00:04:13.860
The inline script is not automatically added to the document.

58
00:04:13.890 --> 00:04:18.240
The inline script will be added as a dependency to another script.

59
00:04:18.269 --> 00:04:22.830
In our case, this script should be a dependency for the front end.

60
00:04:23.160 --> 00:04:26.550
JS file for the authentication modal block.

61
00:04:26.580 --> 00:04:30.030
Here's the problem the script is in queued by word press.

62
00:04:30.060 --> 00:04:32.380
We're not manually cueing this file.

63
00:04:32.400 --> 00:04:35.700
Therefore, we don't have control over the handle name.

64
00:04:35.700 --> 00:04:39.900
To get the handle name, we must look at the front end in the browser.

65
00:04:39.930 --> 00:04:42.570
Open the elements for the developer tools.

66
00:04:42.570 --> 00:04:45.960
Make sure you're viewing the experimental page.

67
00:04:48.060 --> 00:04:51.300
Let's search for the front end DJ's file.

68
00:04:53.570 --> 00:04:58.640
The handle name for a script will be added as the ID to the script's tag.

69
00:04:58.670 --> 00:05:05.120
Looking closely, the idea of our script is the following Udemy plus off modal script.

70
00:05:05.120 --> 00:05:12.560
JS By using this handle, we can add the inline script whenever the front end JS file has been added

71
00:05:12.560 --> 00:05:13.740
to the documents.

72
00:05:13.760 --> 00:05:21.350
Head back to the editor inside the first argument of the WP inline script function pass in the following

73
00:05:21.350 --> 00:05:25.250
ID Udemy plus auth modal script.

74
00:05:27.540 --> 00:05:30.900
The jazz portion of the ID can be excluded.

75
00:05:30.930 --> 00:05:36.960
WordPress adds JS to the ID to identify the element as a script.

76
00:05:36.990 --> 00:05:41.400
However, it's not officially part of the handle by adding the handle.

77
00:05:41.430 --> 00:05:47.400
WordPress will add this inline script whenever the front end JS file has been added.

78
00:05:47.430 --> 00:05:56.760
The next argument is the JavaScript code passing the following const up off rest equals off URLs.

79
00:05:58.950 --> 00:06:01.320
These script tags can be excluded.

80
00:06:01.350 --> 00:06:05.410
WordPress will wrap your code with them inside our script.

81
00:06:05.430 --> 00:06:09.070
We are defining a global variable with our URLs.

82
00:06:09.090 --> 00:06:13.160
The last argument for our function is the placement of the scripts.

83
00:06:13.170 --> 00:06:16.570
We can add the script before or after the handle.

84
00:06:16.590 --> 00:06:20.400
In this case, we are going to round the script before the handle.

85
00:06:22.590 --> 00:06:26.580
Otherwise, our scripts may not have access to the variables.

86
00:06:26.610 --> 00:06:29.290
Our variables should be defined first.

87
00:06:29.310 --> 00:06:35.640
If you're interested in adding the script after the handle script, we can set this argument to after.

88
00:06:35.710 --> 00:06:37.530
After adding this information.

89
00:06:37.530 --> 00:06:39.270
Let's refresh the page.

90
00:06:41.390 --> 00:06:48.320
Switch over to the console panel inside the console, log the up off rest variable.

91
00:06:50.510 --> 00:06:55.050
As you can see, our variable contains an object with our URLs.

92
00:06:55.070 --> 00:06:59.270
We've successfully injected the URLs into our documents.

93
00:06:59.300 --> 00:07:04.130
The next step is to send the registration form data to this URL.

94
00:07:04.160 --> 00:07:08.870
In the next lecture, we are going to finalize the registration form.

