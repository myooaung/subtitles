WEBVTT
1
00:00:00.120 --> 00:00:05.160
In this lecture, we are going to update our block to perform a request for a post.

2
00:00:05.190 --> 00:00:10.800
The request for the posts will look very similar to the request from the Postman application with a

3
00:00:10.800 --> 00:00:12.290
few modifications.

4
00:00:12.300 --> 00:00:14.580
Let's get started in your editor.

5
00:00:14.610 --> 00:00:17.040
Open the index JS file.

6
00:00:19.190 --> 00:00:20.180
To get started.

7
00:00:20.180 --> 00:00:23.630
We're going to need the term IDs at the moment.

8
00:00:23.630 --> 00:00:27.720
The Cuisine's attribute stores an array of terms.

9
00:00:27.740 --> 00:00:30.350
Each term is represented by an object.

10
00:00:30.350 --> 00:00:33.290
Within this object, we're storing the ID.

11
00:00:33.320 --> 00:00:37.280
The end point does not need the entire term object.

12
00:00:37.310 --> 00:00:38.960
It just needs the ID.

13
00:00:38.990 --> 00:00:46.670
Let's create an array with the ID from the cuisine's attributes inside the edit function create a variable

14
00:00:46.670 --> 00:00:48.860
called cuisine ids.

15
00:00:50.940 --> 00:00:55.590
The value for this variable will be the cuisine stop map function.

16
00:00:57.630 --> 00:01:03.030
Next pass in the following arrow function term term dot id.

17
00:01:05.190 --> 00:01:10.680
The map function will return a new array by looping through each item in the current array.

18
00:01:10.680 --> 00:01:16.230
On each iteration, we can return a new value that will replace the current value.

19
00:01:16.260 --> 00:01:20.940
In this example, we are returning the ID property from each term.

20
00:01:20.940 --> 00:01:26.240
As a result, the cuisine IDS variable will be an array of IDs.

21
00:01:26.250 --> 00:01:32.910
After creating this variable, we can begin initiating the request with the use select function.

22
00:01:32.910 --> 00:01:35.580
Let's define a variable called posts.

23
00:01:35.580 --> 00:01:39.810
The value for this variable will be the use select function.

24
00:01:41.990 --> 00:01:46.000
Next pass in an arrow function to start performing the query.

25
00:01:46.010 --> 00:01:50.060
This function will accept the select function as an argument.

26
00:01:52.160 --> 00:01:53.420
From this function.

27
00:01:53.420 --> 00:01:58.580
Let's return the select core dot get entity records function.

28
00:02:00.610 --> 00:02:06.750
So far we've been using the Git entity records function to retrieve taxonomy terms.

29
00:02:06.760 --> 00:02:08.820
It's much more powerful than that.

30
00:02:08.830 --> 00:02:11.810
We can retrieve post data from the database.

31
00:02:11.830 --> 00:02:14.050
The arguments are slightly different.

32
00:02:14.080 --> 00:02:17.500
The first argument is the type of data to retrieve.

33
00:02:17.500 --> 00:02:23.290
We can instruct this function to grab posts by sending this argument to post type.

34
00:02:25.390 --> 00:02:28.950
Next, we must specify the name of the post type.

35
00:02:28.960 --> 00:02:31.630
Let's set this argument to recipe.

36
00:02:33.930 --> 00:02:38.430
The last argument is an object of query parameters for the request.

37
00:02:38.460 --> 00:02:44.700
The query parameters will be nearly identical to the query parameters from the Postman application.

38
00:02:44.730 --> 00:02:46.500
Let's quickly go through them.

39
00:02:46.530 --> 00:02:49.470
The first parameter is called per page.

40
00:02:49.500 --> 00:02:52.410
Set this parameter to the count variable.

41
00:02:54.570 --> 00:02:58.440
Next set the underscore embed parameter to true.

42
00:03:00.720 --> 00:03:03.780
Technically this parameter does not need a value.

43
00:03:03.810 --> 00:03:10.740
However, properties must have a value for the sake of JavaScript, we will set this parameter to true.

44
00:03:10.770 --> 00:03:16.140
Afterward, let's set the cuisine parameter to the cuisine ids variable.

45
00:03:18.400 --> 00:03:21.170
Arrays are not supported in query parameters.

46
00:03:21.190 --> 00:03:26.910
Fortunately, WordPress will convert our array into a string before sending the request.

47
00:03:26.920 --> 00:03:31.230
The value will be compatible with the rest API endpoints.

48
00:03:31.240 --> 00:03:35.170
Up next, let's set the order property to descending.

49
00:03:37.600 --> 00:03:43.120
Lastly, let's add the order by rating property with a value of one.

50
00:03:45.350 --> 00:03:49.480
There's one more adjustment before considering this request complete.

51
00:03:49.490 --> 00:03:53.120
We may need to perform this request multiple times.

52
00:03:53.120 --> 00:03:57.140
For example, the user may want to change the post counts.

53
00:03:57.140 --> 00:04:00.950
Alternatively, they may change the taxonomy terms.

54
00:04:00.950 --> 00:04:05.990
If the user changes the block settings, the requests should be initiated again.

55
00:04:06.020 --> 00:04:09.860
Otherwise the block may display incorrect results.

56
00:04:09.860 --> 00:04:13.970
The use select function has an optional third argument.

57
00:04:14.000 --> 00:04:16.310
It's an array of variables to watch.

58
00:04:16.310 --> 00:04:21.649
Let's pass in an array with the count and cuisine ids variables.

59
00:04:23.720 --> 00:04:29.090
By passing in these variables, WordPress will watch these variables for changes.

60
00:04:29.120 --> 00:04:35.040
If either variable changes, the request is sent again, thus giving us fresh results.

61
00:04:35.060 --> 00:04:37.100
WordPress is very efficient.

62
00:04:37.130 --> 00:04:41.960
If other areas of the applications are updated, the request is not sent.

63
00:04:41.990 --> 00:04:46.680
The request is bound to the accounts and cuisine ID's variables.

64
00:04:46.700 --> 00:04:50.150
After creating the posts, let's log the value.

65
00:04:52.340 --> 00:04:55.010
Next, refresh the Guttenberg editor.

66
00:04:56.090 --> 00:04:58.850
Let's add the popular recipes block.

67
00:05:00.980 --> 00:05:02.620
From the developer tools.

68
00:05:02.630 --> 00:05:04.340
Open the console panel.

69
00:05:04.340 --> 00:05:06.920
Initially the block will log null.

70
00:05:06.950 --> 00:05:10.580
This response indicates that the request is not complete.

71
00:05:10.610 --> 00:05:13.010
The post data is not available.

72
00:05:13.040 --> 00:05:16.850
After a few moments, an array should be logged in the console.

73
00:05:16.880 --> 00:05:19.740
This array is the response to the request.

74
00:05:19.760 --> 00:05:23.600
If you look inside the array, you'll encounter post data.

75
00:05:23.750 --> 00:05:24.680
Perfect.

76
00:05:24.710 --> 00:05:29.090
In the next lecture, let's begin displaying this data in the template.

