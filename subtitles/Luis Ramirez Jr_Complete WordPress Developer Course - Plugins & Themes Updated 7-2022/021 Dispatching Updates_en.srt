1
00:00:00,120 --> 00:00:05,680
In this lecture, we are going to dispatch updates for updating the metadata of a post.

2
00:00:05,700 --> 00:00:10,920
Thus far, we've created custom endpoints for modifying the data of a site.

3
00:00:10,920 --> 00:00:15,420
In other situations, we created hooks for intercepting requests.

4
00:00:15,420 --> 00:00:19,260
From these hooks, we performed updates to the database.

5
00:00:19,260 --> 00:00:22,440
This time we're going to look at a different solution.

6
00:00:22,620 --> 00:00:27,420
WordPress is capable of updating metadata without a custom end point.

7
00:00:27,420 --> 00:00:34,380
By using the register post meta function, WordPress will allow users to modify metadata through the

8
00:00:34,380 --> 00:00:35,610
rest API.

9
00:00:35,640 --> 00:00:38,550
It'll handle performing updates on our data.

10
00:00:38,580 --> 00:00:43,170
All we have to do is send the data to the appropriate end point.

11
00:00:43,410 --> 00:00:48,930
WordPress has a set of dedicated functions for sending requests to the rest API.

12
00:00:48,960 --> 00:00:51,540
Let's give them a try in your editor.

13
00:00:51,540 --> 00:00:54,270
Open the sidebar JS file.

14
00:00:56,520 --> 00:00:58,020
At the top of the file.

15
00:00:58,020 --> 00:01:02,250
Import the used dispatch function from the data package.

16
00:01:04,370 --> 00:01:08,950
WordPress separates the functions for updating data in another storage.

17
00:01:08,960 --> 00:01:16,010
If we're trying to select data, we must use the use select function functions for updating data can

18
00:01:16,010 --> 00:01:19,150
be retrieved via the used dispatch function.

19
00:01:19,160 --> 00:01:22,430
Let's look at an example in the render function.

20
00:01:22,430 --> 00:01:24,920
Call the used dispatch function.

21
00:01:27,010 --> 00:01:29,560
Similar to the use select function.

22
00:01:29,560 --> 00:01:35,980
We must provide the storage name typically if we're interested in updating data selected earlier.

23
00:01:36,010 --> 00:01:40,860
The functions for updating the same data can be found from the same storage.

24
00:01:40,870 --> 00:01:46,320
For example, metadata can be selected from the core slash editor storage.

25
00:01:46,330 --> 00:01:51,540
Therefore, functions for updating metadata can be found within the same storage.

26
00:01:51,550 --> 00:01:55,780
Let's pass in the same name to the used dispatch function.

27
00:01:57,890 --> 00:02:01,340
This function will return an object of functions.

28
00:02:01,370 --> 00:02:05,660
These functions can update various pieces of information on the editor.

29
00:02:05,700 --> 00:02:10,160
Let's structure the object for a function called edit post.

30
00:02:12,430 --> 00:02:18,460
If you're curious as to how I know what the function names are, you can refer to the documentation.

31
00:02:18,460 --> 00:02:24,520
In the resource section of this lecture, I provide a link to an official list of storages.

32
00:02:26,800 --> 00:02:33,360
On this page we can click on the link for the storages respective functions for each storage.

33
00:02:33,370 --> 00:02:35,010
There are two sections.

34
00:02:35,020 --> 00:02:37,960
The first section is called selectors.

35
00:02:37,960 --> 00:02:44,850
Functions listed under this section can be retrieved by selecting the storage with the use select function.

36
00:02:44,860 --> 00:02:47,440
The other section is called actions.

37
00:02:49,610 --> 00:02:55,100
Under this section, there's a list of functions that can be retrieved by selecting the storage with

38
00:02:55,100 --> 00:02:57,110
the used dispatch function.

39
00:02:57,140 --> 00:03:00,990
Under this section you will find the edit post function.

40
00:03:01,010 --> 00:03:04,610
In my opinion, the page isn't well documented.

41
00:03:04,640 --> 00:03:07,130
Hopefully that'll change in the future.

42
00:03:07,160 --> 00:03:09,230
Let's head back to the editor.

43
00:03:09,410 --> 00:03:14,590
We can start using the edit post function for modifying a post's attributes.

44
00:03:14,600 --> 00:03:18,530
We will call this function from the events emitted by the controls.

45
00:03:18,560 --> 00:03:24,520
The first control is for the title of the Open Graph Preview in the on change events.

46
00:03:24,530 --> 00:03:26,570
Run the edit post function.

47
00:03:28,730 --> 00:03:33,380
This function accepts an object of properties that can be modified on the post.

48
00:03:33,410 --> 00:03:36,050
We're not limited to modifying metadata.

49
00:03:36,080 --> 00:03:38,290
Other attributes can be changed.

50
00:03:38,300 --> 00:03:41,760
In our case, we're attempting to change the metadata.

51
00:03:41,780 --> 00:03:44,240
Let's add an object called Meta.

52
00:03:46,530 --> 00:03:50,800
In this object, we can change any of the metadata values.

53
00:03:50,820 --> 00:03:56,400
Let's set the OGG title metadata to the OGG title arguments.

54
00:03:58,600 --> 00:04:01,480
The process will be the same for the other events.

55
00:04:01,510 --> 00:04:05,130
We can copy and paste the solution for the other events.

56
00:04:05,140 --> 00:04:08,110
The second control will modify the description.

57
00:04:08,110 --> 00:04:11,620
Let's paste the code into the on change events.

58
00:04:13,830 --> 00:04:19,380
Change the metadata key from OG title to OG description.

59
00:04:21,760 --> 00:04:25,100
The last field is for toggling the override option.

60
00:04:25,120 --> 00:04:28,120
Paste the snippet into the on change event.

61
00:04:30,580 --> 00:04:36,580
Lastly, change the key from OG title to OG override image.

62
00:04:38,880 --> 00:04:43,780
After modifying the events, we can try testing our code in the browser.

63
00:04:43,800 --> 00:04:45,360
Refresh the page.

64
00:04:47,560 --> 00:04:50,680
If we look inside the sidebar, nothing changes.

65
00:04:50,680 --> 00:04:55,050
However, we can freely modify the fields as we do so.

66
00:04:55,060 --> 00:04:58,420
The update button at the top right corner will light up.

67
00:04:58,510 --> 00:05:01,690
Our updates are not immediately applied to the post.

68
00:05:01,690 --> 00:05:03,700
They're queued in the background.

69
00:05:03,730 --> 00:05:07,480
It would be inefficient to update a post on every keystroke.

70
00:05:07,480 --> 00:05:10,330
WordPress will update the post all at once.

71
00:05:10,330 --> 00:05:14,290
The moment we press update, the metadata will be updated.

72
00:05:16,440 --> 00:05:18,270
Let's refresh the page.

73
00:05:20,420 --> 00:05:25,190
If we check the sidebar, the new values for our option have persisted.

74
00:05:25,220 --> 00:05:27,150
That's exactly what we wanted.

75
00:05:27,170 --> 00:05:30,750
The only field missing is for the image in the next lecture.

76
00:05:30,770 --> 00:05:36,680
Let's begin working on allowing users to select an image for the Open Graph Preview.

