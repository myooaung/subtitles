WEBVTT
1
00:00:00.120 --> 00:00:04.590
In this lecture, we are going to toggle the links from within the editor.

2
00:00:04.620 --> 00:00:09.420
The client should be able to view the effects of our controls on the block.

3
00:00:09.450 --> 00:00:13.590
At the moment, the block will continue to render the log and link.

4
00:00:13.590 --> 00:00:16.560
Changing the settings does not affect the templates.

5
00:00:16.560 --> 00:00:19.020
This behavior may confuse clients.

6
00:00:19.020 --> 00:00:23.160
We should dynamically add or remove these links from the templates.

7
00:00:23.190 --> 00:00:25.920
Tackling this problem is nothing new to us.

8
00:00:25.920 --> 00:00:30.360
Therefore, I want you to tackle this problem as an exercise.

9
00:00:30.360 --> 00:00:34.560
The log and link should be hidden if the dropdown is set to no.

10
00:00:34.590 --> 00:00:36.900
The same goes for the checkbox.

11
00:00:36.900 --> 00:00:43.710
As a hint, you can use ternary operators to help you toggle the elements in the block, pause the video

12
00:00:43.710 --> 00:00:44.790
and give it a try.

13
00:00:44.820 --> 00:00:45.690
Good luck.

14
00:00:46.490 --> 00:00:47.510
Welcome back.

15
00:00:47.540 --> 00:00:52.730
Hopefully you are able to implement a solution for toggling the links in the block.

16
00:00:52.760 --> 00:00:54.400
If not, that's fine.

17
00:00:54.410 --> 00:00:58.010
Let's go through the solution together in your editor.

18
00:00:58.010 --> 00:01:00.560
Open the index dot js file.

19
00:01:02.670 --> 00:01:05.010
We are going to modify the templates.

20
00:01:05.010 --> 00:01:11.490
You can find the log link by searching for an anchor element with a class called Sign in Link.

21
00:01:13.660 --> 00:01:16.540
Before this element, let's add an expression.

22
00:01:16.570 --> 00:01:21.010
The expression will be the following show off question mark colon.

23
00:01:23.060 --> 00:01:28.180
We are using the show off attribute to check if we should display the log in link.

24
00:01:28.190 --> 00:01:32.090
Let's move the anchor element after question mark character.

25
00:01:34.130 --> 00:01:38.780
Next, let's add a no value after the colon character.

26
00:01:40.920 --> 00:01:43.870
This exercise may have been tricky for some of you.

27
00:01:43.890 --> 00:01:48.330
We haven't discussed what you should do if you don't have a template to display.

28
00:01:48.360 --> 00:01:52.440
In these cases you can add a null value by adding null.

29
00:01:52.470 --> 00:01:55.890
WordPress will not render anything, which is what we want.

30
00:01:55.920 --> 00:02:00.830
However, there's another solution you could have tried in the wild.

31
00:02:00.840 --> 00:02:05.430
You may see a different solution for conditionally rendering a template.

32
00:02:05.550 --> 00:02:08.590
Adding a new value can feel like extra work.

33
00:02:08.610 --> 00:02:13.170
We're adding an additional line of code to tell react, not to render anything.

34
00:02:13.200 --> 00:02:16.170
It would be nice if we could omit this line of code.

35
00:02:16.290 --> 00:02:19.750
Luckily, there's a different solution for this scenario.

36
00:02:19.770 --> 00:02:23.460
Let's remove the null value and colon character.

37
00:02:25.650 --> 00:02:30.690
Next, let's replace the question mark character with the end operator.

38
00:02:32.740 --> 00:02:35.980
So far we've been dealing with a single condition.

39
00:02:35.980 --> 00:02:39.490
What if we want two conditions within a single statement?

40
00:02:41.710 --> 00:02:45.670
The and operator allows us to check two conditions.

41
00:02:45.670 --> 00:02:48.850
If both conditions aren't meant, nothing happens.

42
00:02:48.850 --> 00:02:53.350
The and operator is written with two ampersand characters.

43
00:02:53.350 --> 00:02:57.330
In this example, the first conditional statement will never run.

44
00:02:57.340 --> 00:03:02.470
The first condition is true, however, the second condition is false.

45
00:03:02.470 --> 00:03:06.580
Therefore, Java scripts will not execute the block of code.

46
00:03:06.580 --> 00:03:10.810
And the second example both conditions evaluate to true.

47
00:03:11.020 --> 00:03:13.780
As a result, the block of code will run.

48
00:03:16.020 --> 00:03:16.920
That's great.

49
00:03:16.920 --> 00:03:19.230
But how does this apply to our code?

50
00:03:19.260 --> 00:03:20.730
We're using a hack.

51
00:03:20.820 --> 00:03:24.400
Technically, we're not supposed to use JavaScript in this manner.

52
00:03:24.420 --> 00:03:28.750
The and operator can be used outside of a conditional statement.

53
00:03:28.770 --> 00:03:31.050
It can be used in an expression.

54
00:03:31.200 --> 00:03:34.790
JavaScript will run the expression from left to right.

55
00:03:34.800 --> 00:03:37.950
It'll check if the show off attribute is true.

56
00:03:37.980 --> 00:03:40.830
If it is, it'll run the second condition.

57
00:03:40.860 --> 00:03:44.350
However, our second condition is the templates.

58
00:03:44.370 --> 00:03:47.730
This will cause JavaScript to output the templates.

59
00:03:47.880 --> 00:03:51.030
What if these show off attribute was false?

60
00:03:51.060 --> 00:03:54.450
JavaScript follows a fast exit strategy.

61
00:03:54.480 --> 00:03:58.620
If a condition is false, subsequent conditions are never checked.

62
00:03:58.650 --> 00:04:02.710
It doesn't matter if the other conditions evaluate to false.

63
00:04:02.730 --> 00:04:05.970
This behavior boosts the performance of JavaScript.

64
00:04:06.000 --> 00:04:07.560
Makes sense, right?

65
00:04:07.590 --> 00:04:13.780
It doesn't matter if the other conditions are true orthe ultimately the entire condition will fail.

66
00:04:13.800 --> 00:04:19.829
Since that's the case, the template will never render if the show off attribute is false.

67
00:04:19.860 --> 00:04:22.850
This behavior can be tricky to wrap your head around.

68
00:04:22.860 --> 00:04:27.040
If that doesn't make sense, you can stick to ternary operators.

69
00:04:27.060 --> 00:04:29.750
We're finished with the header tools block.

70
00:04:29.760 --> 00:04:31.590
The links are now tolerable.

71
00:04:31.590 --> 00:04:37.500
Let's try testing our block by refreshing the experimental page in the Gutenberg Editor.

72
00:04:39.690 --> 00:04:43.250
We can toggle the values to toggle the links in the block.

73
00:04:43.260 --> 00:04:48.090
You can use any combination of values to achieve the desired interface.

74
00:04:48.120 --> 00:04:53.070
Once again, we're using a hack solution for conditionally rendering blocks.

75
00:04:53.070 --> 00:04:59.230
Using the and operator can be a great way to reduce the template size by one line of code.

76
00:04:59.250 --> 00:05:02.910
Let's finish the header tools block in the next lecture.

