WEBVTT
1
00:00:00.090 --> 00:00:05.880
In this lecture, we are going to wrap up our discussion of translations by loading them for blocks

2
00:00:05.880 --> 00:00:07.510
in the Gutenberg Editor.

3
00:00:07.530 --> 00:00:11.290
At the moment, the translations are loaded on the server.

4
00:00:11.310 --> 00:00:13.600
They're not accessible to the front end.

5
00:00:13.620 --> 00:00:15.230
Let me give an example.

6
00:00:15.240 --> 00:00:21.050
At the moment, my science language has been set to French and the Gutenberg editor.

7
00:00:21.060 --> 00:00:25.230
I'm going to search for the custom blocks we've developed in this course.

8
00:00:27.480 --> 00:00:30.120
The names of the blocks are in English.

9
00:00:30.150 --> 00:00:36.330
If we were to add these blocks to the page, the entire block settings would be in English too.

10
00:00:36.360 --> 00:00:40.380
The translations do not get loaded for the Gutenberg editor.

11
00:00:40.380 --> 00:00:43.230
We must manually load them for our blocks.

12
00:00:43.230 --> 00:00:46.290
Navigate to the local translate page.

13
00:00:48.350 --> 00:00:52.010
Let's update the French translations for our plugin.

14
00:00:54.250 --> 00:00:58.160
I'm going to translate the name of the daily recipe block.

15
00:00:58.180 --> 00:01:03.220
Once again, I'll be using Google Translate to help me translate the name.

16
00:01:05.440 --> 00:01:07.390
After saving the translation.

17
00:01:07.390 --> 00:01:11.680
Let's try loading the translation for our block in your editor.

18
00:01:11.710 --> 00:01:13.870
Open the main plugin file.

19
00:01:16.100 --> 00:01:21.230
At the bottom of the file at a hook called WP in Q Scripts.

20
00:01:23.420 --> 00:01:26.020
A function already exists for this hook.

21
00:01:26.030 --> 00:01:32.860
However, I think it would be a good idea to outsource the translations into a separate file for readability

22
00:01:32.870 --> 00:01:34.170
at the end of the day.

23
00:01:34.190 --> 00:01:35.210
It's up to you.

24
00:01:35.240 --> 00:01:41.870
From my personal experience, the larger a plugin becomes, the harder it becomes to find code.

25
00:01:41.900 --> 00:01:46.250
Organizing your logic will make it easier to search through your plugin.

26
00:01:46.340 --> 00:01:51.410
The name of our function will be called Upload BLOCK Translations.

27
00:01:53.580 --> 00:01:56.880
Afterward set the priority to 100.

28
00:01:59.010 --> 00:02:02.130
Setting the priority is the most important step.

29
00:02:02.160 --> 00:02:07.240
WordPress handles registering and queueing the script files for our block.

30
00:02:07.260 --> 00:02:09.460
We never have to perform this step.

31
00:02:09.479 --> 00:02:12.420
While convenient, it does pose a problem.

32
00:02:12.450 --> 00:02:17.010
Our translations must be loaded after the files have been registered.

33
00:02:17.040 --> 00:02:21.450
Otherwise, our translations may not get applied to our scripts.

34
00:02:21.690 --> 00:02:26.460
Through we save the priority should be a high number behind the scenes.

35
00:02:26.490 --> 00:02:31.110
WordPress uses this hook for registering our scripts by default.

36
00:02:31.140 --> 00:02:33.600
The priority for this hook is ten.

37
00:02:33.630 --> 00:02:37.600
Using a high number will cause our a function to run last.

38
00:02:37.620 --> 00:02:44.490
As a result, our translations will be applied after the scripts have been registered and in queued.

39
00:02:44.520 --> 00:02:49.380
Next open the load translations dot php file.

40
00:02:51.630 --> 00:02:53.250
At the bottom of the file.

41
00:02:53.250 --> 00:02:57.300
Define the upload block translations function.

42
00:02:59.440 --> 00:03:02.650
Next, let's create an array of our blocks.

43
00:03:02.650 --> 00:03:08.500
In the resource section of this lecture, I provide a link to a complete list of blocks.

44
00:03:12.060 --> 00:03:14.610
Copy this array into your clipboard.

45
00:03:16.880 --> 00:03:21.710
Lastly, head back to the editor paced the array into the function.

46
00:03:23.750 --> 00:03:30.480
Once again, we will face another problem with adding translations to our blocks as we discussed before.

47
00:03:30.500 --> 00:03:33.530
WordPress handles registering our scripts.

48
00:03:33.530 --> 00:03:37.070
We do not have the handle names assigned by WordPress.

49
00:03:37.250 --> 00:03:41.090
To save time, I have grabbed the handle names for you.

50
00:03:41.120 --> 00:03:47.000
Regardless, I want to show you how I was able to grab these names in the browser.

51
00:03:47.000 --> 00:03:49.550
Navigate to the Gutenberg Editor.

52
00:03:51.950 --> 00:03:55.340
Open the elements panel from the Developer Tools.

53
00:03:57.350 --> 00:04:01.760
Let's search for the script tag that loads any of our blocks.

54
00:04:01.760 --> 00:04:06.380
For this example, I'm going to search for the fancy header scripts.

55
00:04:08.610 --> 00:04:12.750
The ID attribute will contain the handle name of our script.

56
00:04:12.780 --> 00:04:16.529
WordPress will set the handle name to the name of our block.

57
00:04:16.529 --> 00:04:21.180
The handle name is a fixed with the word editor script JS.

58
00:04:21.180 --> 00:04:25.530
However, the script JS portion of the name can be omitted.

59
00:04:25.560 --> 00:04:31.530
The official handle name would be the following you to me plus fancy header editor.

60
00:04:31.620 --> 00:04:36.390
You can search through the document for the other handles for your convenience.

61
00:04:36.390 --> 00:04:39.090
I have created an array of handle names.

62
00:04:39.090 --> 00:04:41.100
Let's head back to the editor.

63
00:04:41.100 --> 00:04:44.310
The next step is to begin loading the translations.

64
00:04:44.310 --> 00:04:50.880
For each block we have decided to store the handle names in an array to loop through them below the

65
00:04:50.880 --> 00:04:53.340
array and a for each loop.

66
00:04:55.690 --> 00:04:59.290
The condition will be the following blocks as block.

67
00:05:01.600 --> 00:05:04.910
Each item in the array will be referenced as block.

68
00:05:04.930 --> 00:05:10.990
Inside the loop run a function called WP set script translations.

69
00:05:13.210 --> 00:05:17.260
This function will add translations for a specific script.

70
00:05:17.290 --> 00:05:19.430
It has three arguments.

71
00:05:19.450 --> 00:05:24.650
The first argument is the handle name for a script which is stored in our rain.

72
00:05:24.670 --> 00:05:27.370
Let's pass in the block variable.

73
00:05:29.660 --> 00:05:32.450
The second argument is the text domain.

74
00:05:32.450 --> 00:05:35.600
Set the text domain to Udemy plus.

75
00:05:37.790 --> 00:05:42.020
Lastly, we must provide a full path to the translation file.

76
00:05:42.050 --> 00:05:45.650
WordPress will not accept the relative path like before.

77
00:05:45.680 --> 00:05:49.790
Luckily we have a constant that points to our plugins directory.

78
00:05:49.820 --> 00:05:56.300
Set this argument to the following value up plugin directory dot languages.

79
00:05:57.950 --> 00:06:01.760
Let's test our code by refreshing the Gutenberg editor.

80
00:06:02.920 --> 00:06:06.210
Next search for the daily recipe block.

81
00:06:08.380 --> 00:06:11.800
The name of our block has been successfully translated.

82
00:06:11.800 --> 00:06:17.080
Loading translations on the front end is as simple as calling a single function word.

83
00:06:17.080 --> 00:06:23.480
WordPress will handle loading the translations into a browser that wraps up our discussion on translations.

84
00:06:23.500 --> 00:06:28.630
In the next lecture, let's begin handling the installation of our plugin.

