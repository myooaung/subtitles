WEBVTT
1
00:00:00.120 --> 00:00:04.450
In this lecture, we are going to talk about a tricky feature called Scope.

2
00:00:04.470 --> 00:00:10.140
Once in a while, you may encounter strange behavior from your variables that prevent you from accessing

3
00:00:10.140 --> 00:00:10.950
their value.

4
00:00:10.980 --> 00:00:15.390
Being aware of a variable scope can prevent strange behavior from occurring.

5
00:00:15.420 --> 00:00:17.590
So what am I talking about?

6
00:00:17.610 --> 00:00:21.770
Scope affects the accessibility of a variable in your application.

7
00:00:21.780 --> 00:00:25.950
You can think of it as an imaginary fence for your variables.

8
00:00:25.950 --> 00:00:30.780
The location of your variable definitions will affect how they can be used.

9
00:00:30.810 --> 00:00:37.260
If your variable is defined in a block of code, external code will not have access to the variable.

10
00:00:37.260 --> 00:00:40.080
Let's talk about scope with an analogy.

11
00:00:40.110 --> 00:00:43.290
My favorite analogy is the apple tree analogy.

12
00:00:43.290 --> 00:00:46.830
Let's pretend you have a beautiful apple tree in your backyard.

13
00:00:46.830 --> 00:00:51.240
It's surrounded by a large fence to prevent others from stealing your tree.

14
00:00:51.270 --> 00:00:55.290
If you invite a neighbor over, they'll have access to your apple tree.

15
00:00:55.290 --> 00:00:59.310
In this analogy, a variable is represented by a tree.

16
00:00:59.340 --> 00:01:01.140
Our offense is a function.

17
00:01:01.140 --> 00:01:05.400
Lastly, our neighbor can be code that needs access to the variable.

18
00:01:05.400 --> 00:01:07.020
Simple enough, right?

19
00:01:07.200 --> 00:01:09.060
Let's take it a step further.

20
00:01:09.060 --> 00:01:12.690
In this example, our neighbor is not inside our house.

21
00:01:12.690 --> 00:01:17.610
Therefore they're not allowed to grab an apple from our tree on the right side.

22
00:01:17.610 --> 00:01:20.580
If you were to run the code, you would receive an error.

23
00:01:20.610 --> 00:01:23.550
The variable is defined inside the function.

24
00:01:23.550 --> 00:01:27.300
The log method does not have access to the variable.

25
00:01:27.570 --> 00:01:32.490
In our final scenario, let's say the apple tree is outside our house.

26
00:01:32.490 --> 00:01:34.800
The apple tree is completely public.

27
00:01:34.800 --> 00:01:38.100
Both my neighbor and I have access to the apple tree.

28
00:01:38.100 --> 00:01:41.820
This includes anyone else within proximity of the apple tree.

29
00:01:41.820 --> 00:01:45.990
In our code example, the variable is defined outside the function.

30
00:01:45.990 --> 00:01:49.710
It's accessible inside and outside of the function.

31
00:01:49.920 --> 00:01:56.970
Scope applies to all blocks of code such as functions, conditional statements, loops, etc. If you

32
00:01:56.970 --> 00:02:03.360
ever receive an undefined error from the console, you should always check the location of your variables.

33
00:02:03.360 --> 00:02:06.000
It may be nested inside a block of code.

34
00:02:06.000 --> 00:02:11.160
Fixing these types of errors is as simple as moving the variable above a level.

35
00:02:11.340 --> 00:02:14.880
There's a gotcha you can run into if you're not careful.

36
00:02:14.910 --> 00:02:19.830
The var keyword is more flexible than the cost and let keywords.

37
00:02:19.860 --> 00:02:23.550
It does not abide by the same rules as the other keywords.

38
00:02:23.550 --> 00:02:29.940
For example, we can define a variable inside a conditional statement with the var keyword.

39
00:02:29.940 --> 00:02:33.210
This variable will be available outside of the block.

40
00:02:33.210 --> 00:02:37.710
This behavior is not true for the let and const keywords.

41
00:02:37.710 --> 00:02:43.200
However, variables always have a restricted scope if defined within a function.

42
00:02:43.230 --> 00:02:45.450
The second example would not work.

43
00:02:45.480 --> 00:02:50.100
It doesn't matter if you're using the var const or let keywords.

44
00:02:50.100 --> 00:02:51.210
One more thing.

45
00:02:51.210 --> 00:02:56.190
Throughout the course you may hear the words local variable or global variable.

46
00:02:56.220 --> 00:03:02.850
A variable is considered local if its accessibility is restricted to a specific function or block of

47
00:03:02.850 --> 00:03:03.510
code.

48
00:03:03.510 --> 00:03:08.700
On the other hand, variables are considered global if they're accessible everywhere.

49
00:03:08.700 --> 00:03:12.630
At the end of the day, the scope will affect the way we write code.

50
00:03:12.630 --> 00:03:17.430
Throughout this course, I'll be sure to remind you of how it affects us.

