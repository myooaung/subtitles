1
00:00:00,270 --> 00:00:04,180
In this lecture, we will begin rendering the template for our block.

2
00:00:04,200 --> 00:00:06,300
The process will be very simple.

3
00:00:06,300 --> 00:00:08,400
The data is readily available.

4
00:00:08,430 --> 00:00:12,210
Our job is to loop through the data with the templates in the block.

5
00:00:12,210 --> 00:00:14,400
Let's get started in your editor.

6
00:00:14,430 --> 00:00:16,830
Open the index JS file.

7
00:00:18,930 --> 00:00:23,280
Next scroll to the diff with a class called Single Post.

8
00:00:23,310 --> 00:00:29,730
This tag contains the template for displaying a single post for each item in the posts array.

9
00:00:29,760 --> 00:00:31,770
We are going to render this element.

10
00:00:31,800 --> 00:00:34,880
Let's create the loop above the div tag.

11
00:00:34,890 --> 00:00:37,410
Add the following expression posts.

12
00:00:37,410 --> 00:00:39,630
Question mark dot map.

13
00:00:41,870 --> 00:00:44,240
The Post's variable may be null.

14
00:00:44,240 --> 00:00:47,850
If that's the case, the map function will not be available.

15
00:00:47,870 --> 00:00:50,660
This function is only available for arrays.

16
00:00:50,690 --> 00:00:54,510
Next, let's pass in a function to handle each loop.

17
00:00:54,530 --> 00:00:58,430
Let's refer to each item in the array as post.

18
00:01:00,510 --> 00:01:07,080
Within this function, let's return the templates, cut and paste the template into the return statement.

19
00:01:09,370 --> 00:01:14,140
The next step is to update the template to dynamically render the values.

20
00:01:14,170 --> 00:01:15,920
Let's start with the image.

21
00:01:15,940 --> 00:01:18,200
Not all posts will have an image.

22
00:01:18,220 --> 00:01:20,440
Images are entirely optional.

23
00:01:20,470 --> 00:01:24,280
Before rendering the image, we should check for an image.

24
00:01:24,290 --> 00:01:27,490
Define a variable called featured image.

25
00:01:29,550 --> 00:01:33,270
The value for this variable is going to be very long.

26
00:01:33,300 --> 00:01:44,010
Type the following code post dot underscore embedded and post dot underscore embedded WP Colon Featured

27
00:01:44,010 --> 00:01:55,590
Media and post dot underscore embedded WP Colon Featured Media Length Greater than zero and Post dot

28
00:01:55,590 --> 00:02:01,080
underscore embedded WP Colon Featured Media zero.

29
00:02:08,180 --> 00:02:11,190
Pause the video if you need to copy this value.

30
00:02:11,210 --> 00:02:13,130
Let me break down what's going on.

31
00:02:13,130 --> 00:02:17,480
First, we're checking the post for the underscore embedded property.

32
00:02:17,480 --> 00:02:21,530
This property contains information on the featured image.

33
00:02:21,530 --> 00:02:25,640
If this property does not exist, we cannot grab the image.

34
00:02:25,640 --> 00:02:33,650
The second condition we'll check the underscore embedded property for a property called WP Colon Featured

35
00:02:33,650 --> 00:02:34,370
Media.

36
00:02:34,370 --> 00:02:40,010
Once again, if this property does not exist, we won't be able to grab the image.

37
00:02:40,130 --> 00:02:46,070
Next, we're checking the length of the WP Colon featured media property.

38
00:02:46,070 --> 00:02:48,800
This property is an array of images.

39
00:02:48,800 --> 00:02:51,170
Typically there's only one image.

40
00:02:51,170 --> 00:02:56,090
If the array is empty, we can assume the image does not exist on the post.

41
00:02:56,360 --> 00:03:02,910
Lastly, we're grabbing the first item in the array, which is an object representing the featured image.

42
00:03:02,930 --> 00:03:07,010
You're more than welcome to launch this variable to view this information.

43
00:03:07,040 --> 00:03:10,520
Admittedly, it is a hassle to grab this information.

44
00:03:10,520 --> 00:03:14,000
Let's move on to rendering the image in the templates.

45
00:03:14,000 --> 00:03:18,560
There is an anchor element with a class called single post image.

46
00:03:18,590 --> 00:03:20,000
Above this element.

47
00:03:20,000 --> 00:03:26,780
Add an expression to conditionally render the image with the following code featured image and.

48
00:03:29,020 --> 00:03:33,580
Next move the anchor element after the and operator.

49
00:03:35,790 --> 00:03:42,330
If the featured image variable is empty, we don't have an image, therefore nothing should be rendered.

50
00:03:42,360 --> 00:03:44,280
Let's assume there is an image.

51
00:03:44,280 --> 00:03:48,670
We can proceed to update the template with the values from the post data.

52
00:03:48,690 --> 00:03:53,820
First, set the h rf attribute to the post dot link property.

53
00:03:56,050 --> 00:03:59,350
The link property contains the URL to the post.

54
00:03:59,380 --> 00:04:05,650
If you're curious about how I know where to find this information, you can always log the post variable.

55
00:04:05,680 --> 00:04:09,580
It's as simple as looking through the data to find what you're looking for.

56
00:04:09,610 --> 00:04:15,490
Next, let's update the image elements source attribute to the following value.

57
00:04:15,520 --> 00:04:18,579
Featured Image dot media details dot.

58
00:04:18,579 --> 00:04:19,810
Sizes dot.

59
00:04:19,810 --> 00:04:21,050
Thumbnail dot.

60
00:04:21,070 --> 00:04:22,360
Source URL.

61
00:04:24,520 --> 00:04:30,230
In this example, we're grabbing the images thumbnail URL in addition to the URL.

62
00:04:30,250 --> 00:04:34,030
It's considered good practice to set the alt attributes.

63
00:04:34,030 --> 00:04:39,820
The value for this attribute will be the featured image alt text property.

64
00:04:42,530 --> 00:04:43,810
The image is ready.

65
00:04:43,820 --> 00:04:48,020
Let's work on rendering the title of the post and author below.

66
00:04:48,020 --> 00:04:55,340
This expression There's another anchor element set the ref attribute to the post dot link property.

67
00:04:57,390 --> 00:05:04,860
Inside this element, we can render the Post's title with the following expression Post dot title dot

68
00:05:04,860 --> 00:05:05,670
rendered.

69
00:05:07,850 --> 00:05:12,350
The rendered property can contain HTML by defaults.

70
00:05:12,350 --> 00:05:16,770
React does not allow HTML to be inserted from an expression.

71
00:05:16,790 --> 00:05:23,370
It's extremely dangerous to allow data sources to insert HTML into a component's templates.

72
00:05:23,390 --> 00:05:28,010
However, WordPress will store the title of a post with a HTML.

73
00:05:28,040 --> 00:05:32,360
If we were to enter this expression, the HTML would be escaped.

74
00:05:32,390 --> 00:05:34,790
The title may appear awkwardly.

75
00:05:34,820 --> 00:05:40,970
To get around this, React has a component for addressing this issue at the top of the file.

76
00:05:40,970 --> 00:05:47,450
Import a component called raw HTML from the WordPress slash element package.

77
00:05:49,590 --> 00:05:55,140
The raw HTML component will render an expression without escaping the HTML.

78
00:05:55,170 --> 00:05:58,290
Let's head back to the expression for the title.

79
00:05:58,320 --> 00:06:02,670
Let's wrap the expression with the raw HTML component.

80
00:06:04,820 --> 00:06:10,580
Like I said before, it's not considered good practice to render HTML in a block.

81
00:06:10,610 --> 00:06:14,130
Unfortunately, WordPress does not give us a choice.

82
00:06:14,150 --> 00:06:17,660
The last piece of information to render is the author.

83
00:06:17,690 --> 00:06:22,700
Let's update the ref attribute to the post dot link property.

84
00:06:24,880 --> 00:06:32,590
Lastly, we replace the inner checks of the anchor element with the following expression post dot underscore.

85
00:06:32,590 --> 00:06:36,460
Embedded dot author zero dot name.

86
00:06:38,720 --> 00:06:44,120
Once again, we are grabbing this information for the underscore embedded property.

87
00:06:44,150 --> 00:06:49,430
Unlike the image, we're not going through the process of checking the properties for values.

88
00:06:49,460 --> 00:06:51,530
Every post will have an author.

89
00:06:51,530 --> 00:06:55,490
It's improbable for a post to be submitted anonymously.

90
00:06:55,490 --> 00:07:00,230
I don't think it's necessary to perform checks on this chain of properties.

91
00:07:00,380 --> 00:07:07,190
The author property will be an array of authors since a single post can have multiple authors.

92
00:07:07,190 --> 00:07:11,510
In this example, we are grabbing the first author of the post.

93
00:07:11,510 --> 00:07:15,980
Let's proceed to give our block one final test in the browser.

94
00:07:15,980 --> 00:07:17,570
Refresh the page.

95
00:07:19,700 --> 00:07:23,420
Next, add the popular recipes block.

96
00:07:25,490 --> 00:07:28,710
Initially the list of posts will be empty.

97
00:07:28,730 --> 00:07:31,640
The request is still being processed.

98
00:07:31,670 --> 00:07:35,220
After a few moments, the list of posts will appear.

99
00:07:35,240 --> 00:07:39,010
You can freely modify the block to update this list.

100
00:07:39,020 --> 00:07:44,060
For example, let's try filtering the posts by a taxonomy term.

101
00:07:46,250 --> 00:07:49,460
This time, the list of recipes is different.

102
00:07:49,490 --> 00:07:52,400
Our block is working exactly as intended.

103
00:07:52,400 --> 00:07:53,240
Perfect.

104
00:07:53,240 --> 00:07:58,670
The last step is to render the block on the front end with server side rendering.

105
00:07:58,670 --> 00:08:03,740
Before moving on to the next lecture, I'm going to save the post with the block.

106
00:08:03,740 --> 00:08:06,470
You should do the same in the next lecture.

107
00:08:06,470 --> 00:08:09,560
Let's begin rendering the block with PHP.

