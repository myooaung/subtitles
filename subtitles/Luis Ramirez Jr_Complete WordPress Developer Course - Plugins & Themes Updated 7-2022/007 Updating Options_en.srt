1
00:00:00,120 --> 00:00:05,100
In this lecture, we are going to update our function to update the plugin settings.

2
00:00:05,100 --> 00:00:06,330
Before doing so.

3
00:00:06,330 --> 00:00:09,570
We should take the time to secure the form submission.

4
00:00:09,570 --> 00:00:12,480
It's completely possible to spoof our form.

5
00:00:12,480 --> 00:00:16,379
We should take steps to validate the user's permissions in.

6
00:00:16,379 --> 00:00:19,020
Your editor, open the save option.

7
00:00:19,020 --> 00:00:20,640
Stop PHP file.

8
00:00:22,780 --> 00:00:24,460
At the top of the function.

9
00:00:24,460 --> 00:00:28,930
Add a conditional statement with a function called current user can.

10
00:00:31,120 --> 00:00:36,620
First we are going to check the users permissions with the current user can function.

11
00:00:36,640 --> 00:00:39,550
This function we'll check the user's capability.

12
00:00:39,550 --> 00:00:42,580
We can pass any capability as a string.

13
00:00:42,580 --> 00:00:48,490
Let's use the same capability for the menu, which was called edit theme options.

14
00:00:50,540 --> 00:00:52,580
Next, let's add the knot.

15
00:00:52,610 --> 00:00:59,300
Operator If this function returns false, the user does not have permission to submit this form.

16
00:00:59,300 --> 00:01:01,680
But what if the user is not logged in?

17
00:01:01,700 --> 00:01:08,450
In that case, this function will assume the user does not have permission inside this conditional block.

18
00:01:08,450 --> 00:01:11,570
Lets run a function called WP die.

19
00:01:13,850 --> 00:01:18,010
The WP die function will stop a script from executing.

20
00:01:18,020 --> 00:01:22,910
In addition, it'll render a formatted message at the center of the page.

21
00:01:22,940 --> 00:01:27,470
It's better than producing a blank white page inside this function.

22
00:01:27,470 --> 00:01:33,740
Let's pass in the following translated message You are not allowed to be on this page.

23
00:01:35,900 --> 00:01:41,900
This conditional statement should effectively stop unauthorized users from submitting the form.

24
00:01:41,930 --> 00:01:46,510
Next, let's check our knots below the conditional statements.

25
00:01:46,520 --> 00:01:49,850
Run a function called check admin refer.

26
00:01:52,230 --> 00:01:54,690
Our non-school send along with the form.

27
00:01:54,690 --> 00:01:57,120
This function will verify the nonce.

28
00:01:57,120 --> 00:02:01,530
If the nonce is invalid, the function will immediately kill the script.

29
00:02:01,560 --> 00:02:07,080
Let's pass in the name of the knots which was called up options verify.

30
00:02:09,310 --> 00:02:16,420
After verifying the validity of the form submission, we can finally start updating our plugins options

31
00:02:16,420 --> 00:02:16,970
below.

32
00:02:16,990 --> 00:02:20,560
This function create a variable called options.

33
00:02:20,560 --> 00:02:26,230
The value for this variable will be the get options function with a name of our option.

34
00:02:28,330 --> 00:02:34,520
Next, let's update the OG title item with the sanitized text field function.

35
00:02:34,540 --> 00:02:40,000
In this function, we can pass in the post up OG title variable.

36
00:02:41,980 --> 00:02:47,230
As usual, we're sanitizing our data before inserting it into the database.

37
00:02:47,230 --> 00:02:49,570
Sanitising data is optional.

38
00:02:49,600 --> 00:02:54,220
The options API will automatically sanitise data on your behalf.

39
00:02:54,250 --> 00:02:58,360
However, it doesn't hurt to sanitise the data ourselves.

40
00:02:58,390 --> 00:03:01,630
The form data can be found within the post variable.

41
00:03:01,660 --> 00:03:06,210
The values for each input can be found under their respective name.

42
00:03:06,220 --> 00:03:11,380
The value of the name attribute will be the name of the key in the array.

43
00:03:11,410 --> 00:03:16,450
You can refer to the options page file for the list of names.

44
00:03:16,480 --> 00:03:24,220
After setting the title, let's update the OG image option to the sanitize URL function with the post

45
00:03:24,220 --> 00:03:26,470
up OG image variable.

46
00:03:28,720 --> 00:03:33,970
I'm using a new function called sanitized URL for sanitizing a URL.

47
00:03:34,000 --> 00:03:42,580
Next, let's update the OG description option to the sanitize text field function with the post up OG

48
00:03:42,580 --> 00:03:44,110
description variable.

49
00:03:49,410 --> 00:03:58,380
Lastly, let's set the enable OG option to the ABS end function with the post up enable ogg variable.

50
00:04:00,660 --> 00:04:02,730
The options variable is ready.

51
00:04:02,730 --> 00:04:07,680
We can begin updating the options with a function called update option.

52
00:04:09,950 --> 00:04:16,649
This function will perform a query for updating a specific record in the WP options table.

53
00:04:16,670 --> 00:04:18,430
There are two arguments.

54
00:04:18,440 --> 00:04:21,290
The first argument is the name of the option.

55
00:04:21,290 --> 00:04:23,840
Let's pass in up options.

56
00:04:25,820 --> 00:04:29,860
Next, we need to refine the new value for this option.

57
00:04:29,870 --> 00:04:32,660
Let's pass in the options variable.

58
00:04:34,920 --> 00:04:39,750
After updating the options, we should redirect the user back to the form.

59
00:04:39,780 --> 00:04:47,490
WordPress has a special function for helping us redirect the user below the update option function run

60
00:04:47,490 --> 00:04:50,130
the WP redirect function.

61
00:04:52,310 --> 00:04:54,610
This function has one argument.

62
00:04:54,620 --> 00:04:57,080
It's a valid http url.

63
00:04:57,110 --> 00:05:00,330
The user will be redirected to this URL.

64
00:05:00,350 --> 00:05:04,880
In this function, let's pass in a function called admin URL.

65
00:05:07,040 --> 00:05:09,980
The form is located in the admin dashboard.

66
00:05:10,010 --> 00:05:15,720
The admin URL function will generate a path to the current site's admin dashboard.

67
00:05:15,740 --> 00:05:18,440
It has one argument which is optional.

68
00:05:18,470 --> 00:05:24,230
We can point to a specific page within the dashboard pass in the following path.

69
00:05:24,230 --> 00:05:25,660
Admin page.

70
00:05:25,790 --> 00:05:28,910
PHP question mark page equals.

71
00:05:31,100 --> 00:05:37,150
The Admin P file is responsible for displaying various pages from the dashboard.

72
00:05:37,160 --> 00:05:42,250
We can specify a page by adding a query parameter called page.

73
00:05:42,260 --> 00:05:47,420
The value for this parameter must be the ID or slug of the page.

74
00:05:47,420 --> 00:05:52,880
And the fourth argument of this function we passed in the ID of the page.

75
00:05:53,090 --> 00:05:57,400
This value appears as the value for the page query parameter.

76
00:05:57,410 --> 00:06:02,120
Let's copy and paste this value into the admin URL function.

77
00:06:04,580 --> 00:06:07,970
There's one more parameter we will add to the URL.

78
00:06:07,970 --> 00:06:11,930
Add a parameter called status with a value of one.

79
00:06:14,280 --> 00:06:18,120
The user should be notified that their submission was a success.

80
00:06:18,120 --> 00:06:21,640
If this query parameter exists within the URL.

81
00:06:21,660 --> 00:06:24,420
The page will display a message to the user.

82
00:06:24,450 --> 00:06:27,330
Let's update the options page file.

83
00:06:29,310 --> 00:06:32,820
Scrawled to the h one elements below this element.

84
00:06:32,820 --> 00:06:35,100
Add a pair of PHP tags.

85
00:06:37,150 --> 00:06:39,850
Next, add a conditional statement.

86
00:06:41,940 --> 00:06:43,020
The condition will be.

87
00:06:43,020 --> 00:06:45,020
The following is set.

88
00:06:45,030 --> 00:06:48,060
Get status and get status.

89
00:06:48,090 --> 00:06:49,710
Equals equals one.

90
00:06:52,030 --> 00:06:56,770
The EGP will store query parameters in the get variable as an array.

91
00:06:56,800 --> 00:07:00,830
Each query parameter will be added as a key to the array.

92
00:07:00,850 --> 00:07:07,990
We can reference the query parameter by its name and this example we're performing two conditions.

93
00:07:08,020 --> 00:07:12,690
The first condition will check for the existence of the status parameter.

94
00:07:12,700 --> 00:07:18,070
If it does, we can proceed to the second condition, which is to check the value.

95
00:07:18,100 --> 00:07:22,710
Keep in mind PHP follows a fast exit strategy.

96
00:07:22,720 --> 00:07:25,240
The order of conditions does matter.

97
00:07:25,270 --> 00:07:30,520
If the first condition fails, PHP will not perform the second condition.

98
00:07:30,550 --> 00:07:33,100
Reversing the conditions will cause an error.

99
00:07:33,130 --> 00:07:39,190
Attempting to access an item in a variable that doesn't exist will cause PHP to throw an error.

100
00:07:39,220 --> 00:07:45,340
For this reason, it's considered good practice to check the existence of the variable before comparing

101
00:07:45,340 --> 00:07:46,900
it to other values.

102
00:07:46,930 --> 00:07:50,770
Let's render a message inside the conditional block.

103
00:07:50,770 --> 00:07:54,520
We can safely assume that the form was submitted successfully.

104
00:07:54,520 --> 00:07:57,520
Additive tag with the following classes.

105
00:07:57,520 --> 00:07:58,270
Notice.

106
00:07:58,270 --> 00:07:58,960
Notice.

107
00:07:58,960 --> 00:08:00,730
Success in line.

108
00:08:04,070 --> 00:08:09,260
These classes will produce notices in WordPress that are defined by WordPress.

109
00:08:09,290 --> 00:08:15,830
I recommend checking out the WordPress admin styles plugin for a complete list of notice classes.

110
00:08:15,860 --> 00:08:18,800
Next, add a pair of paragraph tags.

111
00:08:18,800 --> 00:08:27,260
Inside these tags, run the escape html e function with the following message options updated successfully.

112
00:08:31,470 --> 00:08:33,419
We're finished with our form.

113
00:08:33,419 --> 00:08:35,530
It's time to resubmit the form.

114
00:08:35,549 --> 00:08:40,110
Your browser should allow you to resubmit the form by refreshing the page.

115
00:08:40,110 --> 00:08:45,780
If it doesn't just submit it through the page, I'm going to quickly refresh the page.

116
00:08:47,190 --> 00:08:50,670
After doing so, the values should remain the same.

117
00:08:50,700 --> 00:08:53,790
Above the form, the notice appears with our message.

118
00:08:53,790 --> 00:08:54,560
Perfect.

119
00:08:54,570 --> 00:08:56,970
We've successfully submitted the form.

120
00:08:56,970 --> 00:08:58,340
We're not done yet.

121
00:08:58,350 --> 00:09:01,290
The last steps are to update the image.

122
00:09:01,290 --> 00:09:04,530
At the moment, clicking on this button does nothing.

123
00:09:04,530 --> 00:09:05,970
In the next lecture.

124
00:09:05,970 --> 00:09:09,750
Let's finalize our form by working on the image.

