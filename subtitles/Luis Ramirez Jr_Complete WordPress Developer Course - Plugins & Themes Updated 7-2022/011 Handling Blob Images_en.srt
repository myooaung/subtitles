1
00:00:00,180 --> 00:00:04,900
In this lecture, we are going to update our function for handling uploads.

2
00:00:04,920 --> 00:00:11,550
As we learned earlier, WordPress does not always provide the same object during the on select event.

3
00:00:11,580 --> 00:00:17,760
If a file is uploaded, the image argument represents a blob until the upload is complete.

4
00:00:17,790 --> 00:00:21,900
Let's update our function to detect a blob in your editor.

5
00:00:21,930 --> 00:00:24,510
Open the index JS file.

6
00:00:26,590 --> 00:00:29,980
WordPress has a function for detecting blobs.

7
00:00:29,980 --> 00:00:33,040
We don't need to curate a solution of our own.

8
00:00:33,070 --> 00:00:40,930
At the top of the file import a function called is blob URL from a package called WordPress slash blob.

9
00:00:43,080 --> 00:00:46,020
I'm introducing a new package called Blob.

10
00:00:46,050 --> 00:00:49,570
This package has functions for dealing with blobs.

11
00:00:49,590 --> 00:00:50,890
The is blob.

12
00:00:50,910 --> 00:00:54,450
URL function will check if a URL is a blob.

13
00:00:54,480 --> 00:00:55,740
Let's give it a try.

14
00:00:55,770 --> 00:00:58,470
Scroll to the on select function.

15
00:01:00,710 --> 00:01:08,300
At the top of the function, let's create a variable called new image URL with an initial value of null.

16
00:01:10,480 --> 00:01:13,480
We are going to store the URL in a variable.

17
00:01:13,480 --> 00:01:19,060
Next, let's create a conditional statement with the IS blog URL function.

18
00:01:21,200 --> 00:01:27,420
This function returns a boolean value we can pass in the URL as an argument.

19
00:01:27,440 --> 00:01:30,800
Let's pass in the image url property.

20
00:01:33,010 --> 00:01:35,410
Regardless of an image, is a blog or not.

21
00:01:35,410 --> 00:01:38,080
The URL property will always exist.

22
00:01:38,080 --> 00:01:44,890
If the image was selected from the media library, the URL property will store the path to the original

23
00:01:44,890 --> 00:01:48,010
image on the occasion this function returns.

24
00:01:48,010 --> 00:01:51,280
True, we have a blob URL on our hands.

25
00:01:51,280 --> 00:01:56,740
Let's set the new image url variable to the image url property.

26
00:01:58,950 --> 00:02:01,110
Next, add an LSS block.

27
00:02:03,230 --> 00:02:10,850
If the image is not a blob, we can safely set the new image URL variable to the image sizes.

28
00:02:11,240 --> 00:02:13,970
Team member URL property.

29
00:02:16,070 --> 00:02:17,570
We have a simple function.

30
00:02:17,570 --> 00:02:20,940
We can detect a blob image in either scenario.

31
00:02:20,960 --> 00:02:28,070
The image should get displayed on the block inside the set attributes function update the image URL

32
00:02:28,070 --> 00:02:30,050
attribute to our variable.

33
00:02:32,160 --> 00:02:35,220
Let's try testing our code in the browser.

34
00:02:35,250 --> 00:02:39,720
Refresh the page and add the team members group block.

35
00:02:41,850 --> 00:02:44,100
Next, try uploading an image.

36
00:02:46,080 --> 00:02:48,360
The image gets rendered on the block.

37
00:02:48,360 --> 00:02:51,460
However, not everything appears as it seems.

38
00:02:51,480 --> 00:02:55,680
The on select event gets emitted twice for file uploads.

39
00:02:55,680 --> 00:02:59,640
The first time it gets emitted is when the upload is initiated.

40
00:02:59,670 --> 00:03:03,240
During this process, the image data is not available.

41
00:03:03,270 --> 00:03:06,660
WordPress will provide us with the blob image.

42
00:03:06,840 --> 00:03:09,720
The function works perfectly during the event.

43
00:03:09,750 --> 00:03:13,080
The second time occurs after the upload is complete.

44
00:03:13,110 --> 00:03:17,950
If we look in the console, an error gets thrown by the on select function.

45
00:03:17,970 --> 00:03:22,080
This error gets triggered during the second execution of our function.

46
00:03:22,110 --> 00:03:24,460
At this point, the upload is finished.

47
00:03:24,480 --> 00:03:29,670
If we read the error, it states that the size property is undefined.

48
00:03:29,760 --> 00:03:32,980
Above the error we are given the image object.

49
00:03:33,000 --> 00:03:36,060
The image object has an ID property.

50
00:03:36,060 --> 00:03:38,760
This indicates the image has been uploaded.

51
00:03:38,760 --> 00:03:40,390
So what's going on?

52
00:03:40,410 --> 00:03:43,800
Shouldn't this object have the sizes property?

53
00:03:43,860 --> 00:03:50,100
If we look through the object, the size is property is absent from the object for uploads.

54
00:03:50,100 --> 00:03:55,220
The image object will move the list of images sizes to a different property.

55
00:03:55,230 --> 00:03:59,580
In this object there's a property called media details.

56
00:03:59,580 --> 00:04:04,020
Within this property, the size property has been defined.

57
00:04:04,020 --> 00:04:08,030
The media placeholder component can be tricky to deal with.

58
00:04:08,040 --> 00:04:12,500
Finding the image URL can be defined in different locations.

59
00:04:12,510 --> 00:04:15,880
It's up to us to find the image, which can be annoying.

60
00:04:15,900 --> 00:04:18,700
Fortunately, the goose chase has ended.

61
00:04:18,720 --> 00:04:23,130
After adjusting our function, we will not need to search for the URL.

62
00:04:23,160 --> 00:04:24,750
Head back to the editor.

63
00:04:26,920 --> 00:04:28,720
Inside the L block.

64
00:04:28,720 --> 00:04:33,550
Let's set the new image URL variable to a ternary operator.

65
00:04:35,550 --> 00:04:39,870
Let's set the condition to the image sizes property.

66
00:04:42,070 --> 00:04:45,310
Undefined properties will evaluate as false.

67
00:04:45,310 --> 00:04:49,810
If the property does exist, the condition will evaluate to true.

68
00:04:49,840 --> 00:04:53,410
Let's set the variable to the image sizes.

69
00:04:53,800 --> 00:04:58,150
Team member URL property for a truth value.

70
00:05:00,370 --> 00:05:03,910
Otherwise the URL can be found in the images.

71
00:05:04,270 --> 00:05:05,590
Media Details.

72
00:05:05,950 --> 00:05:06,790
Sizes.

73
00:05:07,180 --> 00:05:08,170
Team member.

74
00:05:08,530 --> 00:05:10,360
Source URL property.

75
00:05:14,760 --> 00:05:18,760
Hopefully this will fix our block before testing our code.

76
00:05:18,780 --> 00:05:21,420
I'm going to remove the console statements.

77
00:05:21,420 --> 00:05:23,010
They're no longer required.

78
00:05:25,200 --> 00:05:28,160
Let's try testing the block one more time.

79
00:05:28,170 --> 00:05:31,770
I'm going to upload an image after refreshing the page.

80
00:05:36,390 --> 00:05:40,210
This time, the image should have been uploaded successfully.

81
00:05:40,230 --> 00:05:43,610
If we look in the console, an error never gets thrown.

82
00:05:43,620 --> 00:05:50,700
We can verify an image has been uploaded by inspecting the image element with the developer tools under

83
00:05:50,700 --> 00:05:54,870
the elements panel search for the image tag for the block.

84
00:05:54,870 --> 00:05:58,800
The source attribute should not start with the word blob.

85
00:05:58,800 --> 00:06:02,850
If it doesn't, this indicates the image is stored in the database.

86
00:06:02,850 --> 00:06:03,600
Perfect.

87
00:06:03,600 --> 00:06:05,160
We fixed our block.

88
00:06:05,160 --> 00:06:11,970
Users have the option of uploading a new image or selecting an existing image from the media library.

89
00:06:11,970 --> 00:06:15,570
Let's continue working on our block in the next lecture.

