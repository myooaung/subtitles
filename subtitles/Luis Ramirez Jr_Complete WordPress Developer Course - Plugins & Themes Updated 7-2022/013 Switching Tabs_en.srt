1
00:00:00,150 --> 00:00:03,510
In this lecture, we are going to begin switching tabs.

2
00:00:03,510 --> 00:00:06,000
Let's look at the modal on the front end.

3
00:00:06,000 --> 00:00:08,370
There are two forms inside the modal.

4
00:00:08,370 --> 00:00:10,950
You may not be able to view the other modal.

5
00:00:10,950 --> 00:00:12,840
I've hidden it with CSS.

6
00:00:12,840 --> 00:00:15,780
The modal should display one form at a time.

7
00:00:15,780 --> 00:00:20,220
The form that gets displayed will be based on the current active tabs.

8
00:00:20,220 --> 00:00:23,550
At the top of the modal we have two tab links.

9
00:00:23,550 --> 00:00:26,580
The active tab will have a bright text color.

10
00:00:26,610 --> 00:00:29,190
Let's inspect the element for the tab.

11
00:00:31,310 --> 00:00:34,160
The links are created with anchor elements.

12
00:00:34,160 --> 00:00:38,940
We can change the color of a tab by adding a class called Active Tab.

13
00:00:38,960 --> 00:00:42,770
As you can see, this class has been added to the login link.

14
00:00:42,770 --> 00:00:46,120
By default, the log in form should be displayed.

15
00:00:46,130 --> 00:00:49,040
There's another useful piece of information on the link.

16
00:00:49,040 --> 00:00:52,730
The H ref attribute contains the ID of the form.

17
00:00:52,730 --> 00:00:58,220
If we look below the unordered list element, there's a div tag called Modal Body.

18
00:00:58,250 --> 00:01:01,190
Inside this element there are two forms.

19
00:01:01,190 --> 00:01:06,500
Looking closely, the IDs match the values from the ref attribute.

20
00:01:06,500 --> 00:01:12,260
Changing tabs will require adding and removing the active tab class from the links.

21
00:01:12,260 --> 00:01:17,420
Afterward, we can hide or display a form by toggling the display property.

22
00:01:17,420 --> 00:01:21,860
The ref attribute will help us decide which form to display.

23
00:01:21,950 --> 00:01:24,380
Let's get started in your editor.

24
00:01:24,380 --> 00:01:27,020
Open the front end JS file.

25
00:01:29,030 --> 00:01:32,270
We are going to add our code at the bottom of the function.

26
00:01:32,300 --> 00:01:35,830
The goal is to listen for clicks on the tab links.

27
00:01:35,840 --> 00:01:38,500
Therefore, we should select the links.

28
00:01:38,510 --> 00:01:41,320
Create a variable called tabs.

29
00:01:41,330 --> 00:01:46,910
The value for this function will be the document query selector all function.

30
00:01:49,150 --> 00:01:51,670
The selector will be the following tabs.

31
00:01:51,700 --> 00:01:52,270
A.

32
00:01:55,250 --> 00:01:59,310
The unordered list element has a class called Tabs.

33
00:01:59,330 --> 00:02:05,090
Inside this element, we are selecting the anchor elements, which are the links for the tabs.

34
00:02:05,120 --> 00:02:10,960
After making this selection, we can begin looping through the elements to apply click events.

35
00:02:10,970 --> 00:02:14,840
Let's call the for each function on the tabs variable.

36
00:02:17,040 --> 00:02:20,730
Passed in an arrow function that accepts the tab element.

37
00:02:22,770 --> 00:02:26,520
Previously we used a generic name for the selection.

38
00:02:26,550 --> 00:02:31,120
This was because the open modal class could be applied to any element.

39
00:02:31,140 --> 00:02:36,960
This time we know what kind of elements will be selected from our query whenever possible.

40
00:02:36,990 --> 00:02:40,980
I prefer specific names inside our arrow function.

41
00:02:40,980 --> 00:02:45,330
Lets call the add event listener function on the tab variable.

42
00:02:47,480 --> 00:02:50,450
The name of the event will be called Click.

43
00:02:52,590 --> 00:02:55,980
Lastly, passing a function to handle the event.

44
00:02:58,100 --> 00:02:59,960
We are dealing with links.

45
00:02:59,960 --> 00:03:02,850
Clicking links can cause the page to refresh.

46
00:03:02,870 --> 00:03:07,130
To avoid this behavior, let's accept the event object.

47
00:03:09,270 --> 00:03:15,960
After doing so we can call the event dot prevent default function to stop the browser from updating

48
00:03:15,960 --> 00:03:16,740
the page.

49
00:03:18,880 --> 00:03:19,490
Great.

50
00:03:19,510 --> 00:03:23,450
We can start to toggle the active tab class from the links.

51
00:03:23,470 --> 00:03:25,940
Here's where things are going to get tricky.

52
00:03:25,960 --> 00:03:32,030
We must remove the active tab class from the other links before adding it to the current link.

53
00:03:32,050 --> 00:03:35,680
Otherwise, multiple links may have this class.

54
00:03:35,710 --> 00:03:39,880
The question becomes how do we know which tabs have this class?

55
00:03:39,910 --> 00:03:41,800
The answer is we don't.

56
00:03:41,830 --> 00:03:46,040
The solution to our problem is to remove the class from all links.

57
00:03:46,060 --> 00:03:49,690
We are going to need to create another loop for the tabs.

58
00:03:49,720 --> 00:03:55,930
We can't reuse this loop because the loop runs once we need to loop through the tabs after a link has

59
00:03:55,930 --> 00:04:00,880
been clicked inside our loop, let's call the tabs dot for each function.

60
00:04:03,030 --> 00:04:09,960
Passing a function to handle each iteration, we are going to refer to each item in the array as current

61
00:04:09,960 --> 00:04:10,680
tab.

62
00:04:12,830 --> 00:04:20,120
The class can be removed by calling the current tab class list dot remove function pass in the active

63
00:04:20,120 --> 00:04:21,260
tab class.

64
00:04:23,420 --> 00:04:28,260
Once again, we are looping through the tabs to remove the active tab class.

65
00:04:28,280 --> 00:04:31,480
At this point, all links should not be active.

66
00:04:31,490 --> 00:04:36,760
We can proceed to add this class to the tab that should be active below the loop.

67
00:04:36,770 --> 00:04:40,520
Lets log a property called event dot current target.

68
00:04:42,650 --> 00:04:49,280
Next, let's refresh the experimental page with the console panel from the Developer Tools.

69
00:04:51,360 --> 00:04:55,620
We can open the modal and start clicking on the links as we do so.

70
00:04:55,620 --> 00:04:59,340
Both links should not be active inside the console.

71
00:04:59,370 --> 00:05:03,420
The event dot current target property has been logged.

72
00:05:03,450 --> 00:05:09,820
JavaScript is aware that multiple elements can have the same events without JavaScript help.

73
00:05:09,840 --> 00:05:13,170
It can be difficult to determine which link was clicked.

74
00:05:13,200 --> 00:05:18,010
Luckily, the event object has a property called Current Targets.

75
00:05:18,030 --> 00:05:22,440
This property is an object for the element that triggered the event.

76
00:05:22,470 --> 00:05:26,160
We don't need to guess which element emitted the click event.

77
00:05:26,190 --> 00:05:32,780
The current target property will contain the same methods and properties for interacting with the elements.

78
00:05:32,790 --> 00:05:36,990
Thus we can add or remove classes through this object.

79
00:05:37,020 --> 00:05:38,430
Let's give it a try.

80
00:05:38,460 --> 00:05:45,090
Back in the editor, we're going to replace the event's current target property with the following function

81
00:05:45,120 --> 00:05:45,740
event.

82
00:05:46,110 --> 00:05:48,660
Current Target dot class list.

83
00:05:48,660 --> 00:05:50,940
Dot Add active tab.

84
00:05:53,250 --> 00:05:54,660
After routing the class.

85
00:05:54,660 --> 00:05:56,840
Let's try testing the links again.

86
00:05:56,850 --> 00:05:58,500
Head back to the browser.

87
00:06:00,680 --> 00:06:03,860
If we open the model, everything appears fine.

88
00:06:03,890 --> 00:06:09,220
Clicking on the tabs should cause the scripts to update the link with the correct color.

89
00:06:09,230 --> 00:06:10,870
So far, so good.

90
00:06:10,880 --> 00:06:12,230
We're halfway there.

91
00:06:12,230 --> 00:06:15,500
The last step is to display the correct form.

92
00:06:15,500 --> 00:06:20,540
Luckily, we have most of the information we will need to accomplish this step.

93
00:06:20,540 --> 00:06:22,370
Let's head back to the editor.

94
00:06:24,510 --> 00:06:25,860
First things first.

95
00:06:25,860 --> 00:06:29,670
We must get the h ref attribute from the link clicked.

96
00:06:29,700 --> 00:06:32,060
Grabbing this information will be easy.

97
00:06:32,070 --> 00:06:37,590
We already know how to grab the element that triggered the event at the bottom of the loop.

98
00:06:37,590 --> 00:06:40,580
Create a variable called active tab.

99
00:06:40,590 --> 00:06:45,900
The value for this variable will be the events dot current target property.

100
00:06:48,090 --> 00:06:51,200
We're not interested in grabbing the entire elements.

101
00:06:51,210 --> 00:06:56,730
The attribute can be retrieved by training a function called get attributes.

102
00:06:56,760 --> 00:07:00,870
This function will grab any attributes value from an element.

103
00:07:00,900 --> 00:07:03,650
It accepts the attribute name as a string.

104
00:07:03,660 --> 00:07:06,210
Let's grab the ref attributes.

105
00:07:08,270 --> 00:07:13,340
After grabbing the rough attributes, we will be able to update the correct form.

106
00:07:13,340 --> 00:07:14,560
Before doing so.

107
00:07:14,570 --> 00:07:18,210
We're going to need to select both forms above the loop.

108
00:07:18,230 --> 00:07:22,640
Let's create variables that store references to the form elements.

109
00:07:22,640 --> 00:07:25,340
First, let's grab the login form.

110
00:07:25,340 --> 00:07:27,980
Create a variable called sign and form.

111
00:07:27,980 --> 00:07:31,770
The value for this variable will be the following value.

112
00:07:31,790 --> 00:07:35,630
Document dot query selector sign in tab.

113
00:07:37,920 --> 00:07:40,040
I've given both forms IDs.

114
00:07:40,050 --> 00:07:44,880
You can check out the template for their respective IDs for the login form.

115
00:07:44,880 --> 00:07:47,190
The ID is sign in tab.

116
00:07:47,190 --> 00:07:50,730
Let's create another variable called signup form.

117
00:07:50,730 --> 00:07:54,660
The ID for the registration form is sign up tab.

118
00:07:54,660 --> 00:07:57,450
Let's select it with the document dot query.

119
00:07:57,450 --> 00:07:58,770
Select your function.

120
00:08:00,390 --> 00:08:01,000
Great.

121
00:08:01,020 --> 00:08:04,270
We've got references to the forms back in the loop.

122
00:08:04,290 --> 00:08:06,540
Let's add a conditional statement.

123
00:08:08,640 --> 00:08:14,670
We are going to check if the active tab variable is strictly equal to the sign in tab.

124
00:08:19,390 --> 00:08:23,800
If it is, we can assume that a visitor wants to view the sign in form.

125
00:08:23,830 --> 00:08:27,960
Previously, we toggled an element's appearance for our class.

126
00:08:27,970 --> 00:08:30,210
We could use the same solution again.

127
00:08:30,220 --> 00:08:33,400
However, I want to show you a different approach.

128
00:08:33,400 --> 00:08:38,559
By manipulating an element styles, one solution isn't better than the other.

129
00:08:38,559 --> 00:08:42,669
I just want to show you your options inside the conditional statement.

130
00:08:42,669 --> 00:08:45,370
Set the sign in form style dot.

131
00:08:45,460 --> 00:08:47,530
Display property to block.

132
00:08:50,570 --> 00:08:53,870
The sale property is available on all elements.

133
00:08:53,870 --> 00:08:58,240
This property is an object of style applied to the elements.

134
00:08:58,250 --> 00:09:01,900
However, it doesn't display styles from classes.

135
00:09:01,910 --> 00:09:06,440
The style must be applied via the style attribute for it to appear.

136
00:09:06,440 --> 00:09:11,240
Within this object, we have the option of adding styles to this object.

137
00:09:11,390 --> 00:09:15,260
The name of the style must be a valid CSS property.

138
00:09:15,260 --> 00:09:18,590
In this case we are adding the display property.

139
00:09:18,590 --> 00:09:23,180
The value for this property must be a valid CSS value.

140
00:09:23,210 --> 00:09:28,280
JavaScript will handle adding the style to the element before moving on.

141
00:09:28,280 --> 00:09:30,740
We must hide the registration form.

142
00:09:30,740 --> 00:09:34,160
We're going to assume the registration form is appearing.

143
00:09:34,160 --> 00:09:40,490
We can hide the form by setting the register form style dot display property to non.

144
00:09:42,770 --> 00:09:44,020
We're almost finished.

145
00:09:44,030 --> 00:09:46,910
The last step is to hide the log and form.

146
00:09:46,910 --> 00:09:51,230
If the register link tab was clicked, let's add an else block.

147
00:09:53,380 --> 00:09:59,650
The code will be the same, but with the values reversed, we can copy the code from the if block to

148
00:09:59,650 --> 00:10:00,760
the else block.

149
00:10:02,850 --> 00:10:05,340
Lastly, reverse the values.

150
00:10:07,310 --> 00:10:08,360
We're finished.

151
00:10:08,390 --> 00:10:11,540
Head on over to the browser to refresh the page.

152
00:10:13,710 --> 00:10:16,780
This time we can fully test the tabs.

153
00:10:16,800 --> 00:10:20,460
Upon opening the modal, let's try switching tabs.

154
00:10:20,460 --> 00:10:22,990
As we do so, the forms will change.

155
00:10:23,010 --> 00:10:25,380
The correct form should appear in the modal.

156
00:10:25,380 --> 00:10:26,940
As we switch between them.

157
00:10:26,940 --> 00:10:31,690
You can even click on the same tab twice to test if the form stays around.

158
00:10:31,710 --> 00:10:32,430
Perfect.

159
00:10:32,430 --> 00:10:36,510
We've successfully created tabs with plain JavaScript.

160
00:10:36,540 --> 00:10:41,550
In the final set of lectures, we can start submitting the form data to WordPress.

161
00:10:41,550 --> 00:10:44,760
When you're ready, I'll see you in the next lecture.

