WEBVTT
1
00:00:00.210 --> 00:00:05.670
In this lecture, we are going to test our end point with postmen before getting started.

2
00:00:05.700 --> 00:00:07.820
I created three recipes.

3
00:00:07.830 --> 00:00:12.180
They are called Recipe one, recipe two and Recipe three.

4
00:00:12.210 --> 00:00:15.150
Each recipe has an image and cuisine.

5
00:00:15.180 --> 00:00:18.780
Lastly, I've given each recipe a rating recipe.

6
00:00:18.780 --> 00:00:21.150
One has a rating of five stars.

7
00:00:21.150 --> 00:00:27.270
Recipe two has a rating of two stars and Recipe three has a rating of four stars.

8
00:00:27.300 --> 00:00:31.750
Creating these recipes will be necessary for testing our end points.

9
00:00:31.770 --> 00:00:35.540
I want you to pause the video and recreate these posts.

10
00:00:35.550 --> 00:00:40.230
Theoretically, we should be able to query these posts in the following order.

11
00:00:40.260 --> 00:00:43.800
Recipe one, recipe three and recipe two.

12
00:00:43.830 --> 00:00:47.070
Let's test if that's true, open the postman.

13
00:00:47.070 --> 00:00:48.870
Application in postman.

14
00:00:48.870 --> 00:00:52.950
We are going to create a new request in the URL field.

15
00:00:52.950 --> 00:00:54.930
Let's type the following path.

16
00:00:54.930 --> 00:01:03.630
Udemy dot local slash wp json slash wp slash v two slash recipe.

17
00:01:05.890 --> 00:01:09.790
The endpoint is a custom endpoint created by WordPress.

18
00:01:09.790 --> 00:01:16.810
During the registration of the recipe post type, WordPress will create an endpoint for the recipe.

19
00:01:16.840 --> 00:01:19.660
The endpoint is named after the post type.

20
00:01:19.690 --> 00:01:23.980
The question is what kind of request can we perform to this endpoint?

21
00:01:23.980 --> 00:01:29.650
In the resource section of this lecture, I provide a link to the Post's reference page.

22
00:01:29.830 --> 00:01:34.750
Custom post types will adopt the same endpoints and features as a post.

23
00:01:34.750 --> 00:01:40.060
We can rely on this documentation page for the types of requests that are possible.

24
00:01:40.060 --> 00:01:41.890
Let's head back to Postman.

25
00:01:41.890 --> 00:01:44.920
Our goal is to grab a list of recipes.

26
00:01:44.950 --> 00:01:48.790
A list of posts can be requested with a get request.

27
00:01:48.820 --> 00:01:55.240
Typically, this is the default method for new HTTP requests under the params section.

28
00:01:55.240 --> 00:01:58.390
Let's begin filtering the posts to begin.

29
00:01:58.390 --> 00:02:00.760
The number of results should be limited.

30
00:02:00.760 --> 00:02:05.320
For this example, let's set the per page parameter to ten.

31
00:02:07.570 --> 00:02:11.850
In our block, we are limiting results to between one and ten.

32
00:02:11.860 --> 00:02:16.500
For the sake of simplicity, we all limit results to the maximum threshold.

33
00:02:16.510 --> 00:02:19.930
Next, let's add a parameter called cuisine.

34
00:02:21.940 --> 00:02:27.820
We can filter posts by a taxonomy by adding the taxonomy as a query parameter.

35
00:02:27.850 --> 00:02:32.650
WordPress is capable of detecting our custom taxonomy in the request.

36
00:02:32.680 --> 00:02:38.350
It will curate a query that will filter posts by the taxonomy added to the request.

37
00:02:38.380 --> 00:02:42.980
The value for this parameter must be a list of term IDs.

38
00:02:43.000 --> 00:02:46.970
Let's grab the add that was used for the dummy recipes.

39
00:02:46.990 --> 00:02:52.810
I'll show you how to grab this information head on over to the WordPress Admin dashboard.

40
00:02:54.890 --> 00:02:59.030
Navigate to the page for managing the cuisine taxonomy.

41
00:03:01.140 --> 00:03:05.220
Next click on the cuisine associated with our recipes.

42
00:03:07.290 --> 00:03:12.750
In the query parameters of the URL, there's a parameter called tag ID.

43
00:03:12.780 --> 00:03:16.050
This parameter contains the ID of the term.

44
00:03:16.050 --> 00:03:21.540
Let's copy this ID and paste it into the cuisine parameter of our request.

45
00:03:24.180 --> 00:03:28.410
There are additional parameters, but let's try testing our request.

46
00:03:28.440 --> 00:03:30.780
Send the request to WordPress.

47
00:03:33.020 --> 00:03:35.440
The request is working without a problem.

48
00:03:35.450 --> 00:03:40.540
If we look at the responses body, the response contains an array of recipes.

49
00:03:40.550 --> 00:03:43.430
In total, there should be three recipes.

50
00:03:43.430 --> 00:03:49.410
If you have more than three posts associated with a term, you may receive more than three posts.

51
00:03:49.430 --> 00:03:53.440
Everything looks fine, but there is something missing from the response.

52
00:03:53.450 --> 00:03:59.240
As a reminder, we are trying to display a list of popular recipes with each post.

53
00:03:59.240 --> 00:04:02.610
The posts, image, title and author should appear.

54
00:04:02.630 --> 00:04:06.050
Looking through the data, the title of the post is available.

55
00:04:06.050 --> 00:04:10.310
However, the image and author are not available with this information.

56
00:04:10.310 --> 00:04:14.060
By default, WordPress does not expose this information.

57
00:04:14.090 --> 00:04:19.910
If you were to search through the documentation, there isn't any information available on how to grab

58
00:04:19.910 --> 00:04:20.940
this information.

59
00:04:20.959 --> 00:04:23.940
Unfortunately, it's not documented anywhere.

60
00:04:23.960 --> 00:04:30.940
However, there is a solution for adding this information to the request under the parameters section.

61
00:04:30.950 --> 00:04:34.340
Add a parameter called underscore embed.

62
00:04:36.520 --> 00:04:38.950
This parameter does not have a value.

63
00:04:38.950 --> 00:04:42.190
Simply adding it will help us get the desired behavior.

64
00:04:42.220 --> 00:04:44.260
Let's send the request again.

65
00:04:46.460 --> 00:04:48.230
In the body of the response.

66
00:04:48.230 --> 00:04:50.950
Things are slightly different this time.

67
00:04:50.960 --> 00:04:55.910
A new property is available with each post called Underscore Embedded.

68
00:04:55.940 --> 00:05:02.060
Previously, this property was not available by adding the underscore embed parameter.

69
00:05:02.060 --> 00:05:06.380
WordPress will include information related to the author and image.

70
00:05:06.410 --> 00:05:12.770
As you can see, we have two properties called author and WP featured image.

71
00:05:12.770 --> 00:05:19.040
Within these properties, we have additional information pertaining to the author of the post and the

72
00:05:19.040 --> 00:05:20.240
featured image.

73
00:05:20.240 --> 00:05:25.160
So far, the end point for receiving a list of recipes seems fine.

74
00:05:25.160 --> 00:05:28.910
However, there is one more problem that needs to be addressed.

75
00:05:28.910 --> 00:05:31.640
The posts are not in the desired order.

76
00:05:31.670 --> 00:05:37.160
The first item in the array should be the post with the highest rating vice versa.

77
00:05:37.160 --> 00:05:42.500
The last item in the array should be the post, with the lowest rating in the response.

78
00:05:42.500 --> 00:05:45.920
The first object represents recipe number three.

79
00:05:48.060 --> 00:05:50.430
Followed by recipe number two.

80
00:05:52.570 --> 00:05:55.410
Lastly, we have recipe number one.

81
00:05:55.420 --> 00:05:57.850
This is not the order that we are hoping for.

82
00:05:57.880 --> 00:06:01.870
The order should be recipe number one, recipe number three.

83
00:06:01.870 --> 00:06:04.480
And lastly, recipe number two.

84
00:06:04.510 --> 00:06:08.620
Let's head back to the documentation for the Post's End Point.

85
00:06:10.890 --> 00:06:13.410
Click on the list posts link.

86
00:06:13.410 --> 00:06:18.220
This link will take us to the section for modifying the results of this endpoint.

87
00:06:18.240 --> 00:06:22.140
If we scroll through the arguments table, we are going to come across.

88
00:06:22.140 --> 00:06:29.340
An argument called Order by WordPress gives us the option of ordering the list of posts by a specific

89
00:06:29.340 --> 00:06:30.060
value.

90
00:06:30.150 --> 00:06:33.930
In our case, we're trying to order the posts by their rating.

91
00:06:33.930 --> 00:06:37.270
The rating of a recipe is stored as metadata.

92
00:06:37.290 --> 00:06:39.940
If we look at the list of possible values.

93
00:06:39.960 --> 00:06:44.520
WordPress does not give us the option of ordering posts by metadata.

94
00:06:44.550 --> 00:06:46.650
This is where our problems begin.

95
00:06:46.680 --> 00:06:49.270
The posts must be sorted by their rating.

96
00:06:49.290 --> 00:06:54.360
To achieve this behaviour, we must modify the query created by the endpoint.

97
00:06:54.390 --> 00:07:01.640
Luckily, WordPress has a filter for exposing the original query before the query is sent to the database.

98
00:07:01.650 --> 00:07:04.300
We are given the opportunity to modify it.

99
00:07:04.320 --> 00:07:09.270
In the next lecture, let's add support for ordering posts by rating.

