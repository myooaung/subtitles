1
00:00:00,120 --> 00:00:05,500
In this lecture, we are going to finish our block by rendering it with our PHP function.

2
00:00:05,520 --> 00:00:08,310
Most of these steps will be familiar to you.

3
00:00:08,340 --> 00:00:11,940
We're going to fly right by the solution to get started.

4
00:00:11,970 --> 00:00:15,390
Open the daily recipe dot php file.

5
00:00:17,510 --> 00:00:23,450
In the beginning, we created this file to define the function for rendering the block on the server.

6
00:00:23,480 --> 00:00:28,010
Let's update this function to output the same template from the block.

7
00:00:28,010 --> 00:00:32,060
First, let's add the attributes argument to the function.

8
00:00:34,170 --> 00:00:36,740
Next, let's extract the attributes.

9
00:00:36,750 --> 00:00:39,420
There's only one attribute which is the title.

10
00:00:39,450 --> 00:00:42,030
Define a variable called title.

11
00:00:42,060 --> 00:00:49,170
The value for this attribute will be the escape html function with the attributes title variable.

12
00:00:51,350 --> 00:00:53,210
After grabbing the attributes.

13
00:00:53,210 --> 00:00:57,440
Let's grab the ID, define a variable called ID.

14
00:00:57,530 --> 00:01:01,380
Its value will be the get transient function.

15
00:01:01,400 --> 00:01:05,960
Our transient was called up daily recipe ID.

16
00:01:08,190 --> 00:01:09,690
Similar to before.

17
00:01:09,720 --> 00:01:14,390
It's possible that the get transient function may return an empty results.

18
00:01:14,400 --> 00:01:21,210
To avoid this scenario, we can create a conditional statement for checking an empty value on the ID

19
00:01:21,210 --> 00:01:22,050
variable.

20
00:01:24,410 --> 00:01:32,450
If the value is empty, we'll update the ID variable to the return value of the up generate daily recipe

21
00:01:32,450 --> 00:01:33,200
function.

22
00:01:35,380 --> 00:01:40,190
This was the main reason we outsourced the code into a separate function.

23
00:01:40,210 --> 00:01:46,570
We are going to generate a random recipe from the rest response and render the function for the daily

24
00:01:46,570 --> 00:01:47,830
recipe block.

25
00:01:47,860 --> 00:01:49,180
Our data is ready.

26
00:01:49,210 --> 00:01:55,210
The final step is to begin rendering this information in the templates inside the buffer zone.

27
00:01:55,210 --> 00:02:01,630
Add a div tag with a class called WP BLOCK Udemy plus daily recipe.

28
00:02:03,840 --> 00:02:10,740
Inside these tags, add an H six tag with the title variable echoed in between the tags.

29
00:02:13,110 --> 00:02:18,330
Afterward add an anchor element below the H six tag on this element.

30
00:02:18,330 --> 00:02:23,940
Set the H ref attribute to the the permalink function with the ID variable.

31
00:02:25,990 --> 00:02:29,890
Next, add an image element with the source attributes.

32
00:02:31,990 --> 00:02:34,060
Here's where things get interesting.

33
00:02:34,090 --> 00:02:40,390
WordPress is known for being helpful, but sometimes it can be inconsistent in the resource section

34
00:02:40,390 --> 00:02:41,530
of this lecture.

35
00:02:41,560 --> 00:02:49,210
I provide links to two functions called the post thumbnail URL and get the post thumbnail URL.

36
00:02:51,350 --> 00:02:55,390
Both functions will produce a URL to a post thumbnail.

37
00:02:55,400 --> 00:03:00,530
As we learned before, the Gantt version of the function will return the value.

38
00:03:00,560 --> 00:03:06,410
The non git version will echo the value while both functions produce the same results.

39
00:03:06,410 --> 00:03:10,040
There is another difference that affects the way we'll write our code.

40
00:03:10,070 --> 00:03:15,890
The the post thumbnail URL function does not allow us to pass an ID.

41
00:03:15,920 --> 00:03:19,430
It completely relies on the loop to output an image.

42
00:03:19,430 --> 00:03:23,390
Normally we would use this function for rendering an image.

43
00:03:23,390 --> 00:03:29,380
Since it does not accept an ID, we will resort to the get version of the function.

44
00:03:29,390 --> 00:03:34,160
It's strange because there are other functions that can accept the ID.

45
00:03:34,190 --> 00:03:37,580
This inconsistency can be annoying to deal with.

46
00:03:37,610 --> 00:03:42,470
I always recommend viewing the documentation of a function before using it.

47
00:03:42,470 --> 00:03:46,190
Let's head back to the editor for the source attribute.

48
00:03:46,190 --> 00:03:52,820
We are going to echo the get the post thumbnail URL function with the ID variable.

49
00:03:54,940 --> 00:03:57,940
Next, let's set the size to full.

50
00:04:00,150 --> 00:04:01,050
Afterward.

51
00:04:01,050 --> 00:04:04,860
Let's render the title by adding a pair of H three tags.

52
00:04:04,890 --> 00:04:10,650
Inside these tags echo the get the title function with the ID variable.

53
00:04:14,820 --> 00:04:15,860
We're finished.

54
00:04:15,870 --> 00:04:21,570
Let's try testing our code by refreshing the page with the daily recipe block.

55
00:04:23,770 --> 00:04:27,130
We've successfully finished the daily recipe block.

56
00:04:27,160 --> 00:04:29,720
Overall, the process is very simple.

57
00:04:29,740 --> 00:04:34,270
The main takeaway for this block was learning how to use transients.

58
00:04:34,300 --> 00:04:39,910
They're a great feature for temporarily caching data before moving on to the next block.

59
00:04:39,940 --> 00:04:42,970
Let's talk about performance in the next lecture.

