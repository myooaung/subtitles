WEBVTT
1
00:00:00.120 --> 00:00:04.100
In this lecture we are going to prepare the social media links.

2
00:00:04.110 --> 00:00:06.770
Team members may have social media links.

3
00:00:06.780 --> 00:00:11.060
Not all members will have accounts for the same social media platforms.

4
00:00:11.070 --> 00:00:16.230
Our block should be flexible by allowing members to have links to various platforms.

5
00:00:16.230 --> 00:00:18.450
This is where things can get tricky.

6
00:00:18.450 --> 00:00:21.630
We need to provide the option of adding a new link.

7
00:00:21.630 --> 00:00:25.290
So far we've always had a fixed set of elements.

8
00:00:25.290 --> 00:00:29.610
Adding or moving elements from within a block will require some work.

9
00:00:29.610 --> 00:00:30.780
Let's get started.

10
00:00:30.780 --> 00:00:37.410
First, we need to update our attributes in your editor, open the block JSON file.

11
00:00:39.570 --> 00:00:44.070
Inside the attributes, we have an attribute called social handles.

12
00:00:44.070 --> 00:00:46.830
Blocks can store rays in an attribute.

13
00:00:46.860 --> 00:00:52.050
We should help the client by providing a default set of social media handles.

14
00:00:52.050 --> 00:00:55.590
Let's add the default property to the attributes.

15
00:00:57.780 --> 00:01:01.530
The value for this attribute will be an array of objects.

16
00:01:01.560 --> 00:01:08.670
Each object will represent a handle to a social media platform, and each object we are going to store

17
00:01:08.700 --> 00:01:11.840
to properties the URL and icon.

18
00:01:11.850 --> 00:01:15.360
Let's add an object with a URL to Facebook.

19
00:01:17.530 --> 00:01:20.890
Next, let's add a property called Icon.

20
00:01:23.120 --> 00:01:30.890
In the resource section of this lecture, I provide a link to a font icon set called Bootstrap Icons.

21
00:01:33.070 --> 00:01:37.000
WordPress has icons for various social media platforms.

22
00:01:37.000 --> 00:01:41.140
However, I prefer the icons from the bootstrap icon set.

23
00:01:41.170 --> 00:01:44.280
Bootstrap is a separate CSS framework.

24
00:01:44.290 --> 00:01:48.460
We do not need to learn or use Bootstrap to use these icons.

25
00:01:48.460 --> 00:01:51.050
They can be added separately to a project.

26
00:01:51.070 --> 00:01:54.100
The icons are already available from the theme.

27
00:01:54.100 --> 00:01:56.260
We can begin using them right away.

28
00:01:56.290 --> 00:01:57.800
Head back to the editor.

29
00:01:57.820 --> 00:02:01.030
The icon for Facebook is called Facebook.

30
00:02:03.170 --> 00:02:07.400
Next, let's add another social media handle for Instagram.

31
00:02:07.400 --> 00:02:11.570
Set the URL property to the URL for Instagram.

32
00:02:13.740 --> 00:02:17.370
Next set the icon property to Instagram.

33
00:02:19.590 --> 00:02:21.510
The next step is to loop through.

34
00:02:21.510 --> 00:02:24.260
This attributes values for each object.

35
00:02:24.270 --> 00:02:27.890
We will display a link to a team members social accounts.

36
00:02:27.900 --> 00:02:30.480
Open the edit JS file.

37
00:02:32.590 --> 00:02:38.410
Inside the template search for a div tag with a class called Social Links.

38
00:02:40.600 --> 00:02:43.190
This tag will contain a list of links.

39
00:02:43.210 --> 00:02:47.680
The social handles attribute has been structured beforehand.

40
00:02:47.710 --> 00:02:50.270
We do not need to grab this attributes.

41
00:02:50.290 --> 00:02:53.530
Let's begin looping through the attributes values.

42
00:02:53.530 --> 00:02:55.000
Inside this tag.

43
00:02:55.030 --> 00:02:57.640
Add an expression with the following value.

44
00:02:57.670 --> 00:02:59.230
Social handles.

45
00:02:59.230 --> 00:03:00.220
Dot map.

46
00:03:02.420 --> 00:03:03.860
For this demonstration.

47
00:03:03.860 --> 00:03:10.010
We are looping through the data with the map function inside this function pass in an arrow function

48
00:03:10.010 --> 00:03:13.580
to accept the handle and index arguments.

49
00:03:15.860 --> 00:03:22.160
The handle argument will contain a reference to each item, whereas the index argument will contain

50
00:03:22.160 --> 00:03:24.410
the index of the item in the array.

51
00:03:24.440 --> 00:03:29.700
Normally we wouldn't grab the index, but it's going to be helpful later down the line.

52
00:03:29.720 --> 00:03:31.600
You'll see why in a moment.

53
00:03:31.610 --> 00:03:35.810
After creating the function, let's return an anchor element.

54
00:03:38.100 --> 00:03:41.100
On each iteration we are going to render a link.

55
00:03:41.100 --> 00:03:46.320
The h ref attribute will be sent to the handle dot url property.

56
00:03:48.620 --> 00:03:53.060
Next, let's set the key attribute to the index argument.

57
00:03:55.200 --> 00:03:58.260
I'm introducing a new attribute called Key.

58
00:03:58.290 --> 00:04:02.040
Looping through items in an array can be tricky for react.

59
00:04:02.070 --> 00:04:04.460
Arrays can constantly change.

60
00:04:04.470 --> 00:04:09.570
Any time an array changes, our component must reflect those changes.

61
00:04:09.600 --> 00:04:13.560
React can easily become confused during this process.

62
00:04:13.560 --> 00:04:20.760
By adding the key attribute, React can associate a specific item in an array with an element on the

63
00:04:20.760 --> 00:04:21.480
page.

64
00:04:21.720 --> 00:04:28.020
If you ever experience funky behavior, you may want to consider adding the key attributes.

65
00:04:28.020 --> 00:04:33.540
The value for this attribute must be a unique value from the current item in the array.

66
00:04:33.570 --> 00:04:39.150
In this example, we are using the items index by adding the key attribute.

67
00:04:39.150 --> 00:04:42.240
We shouldn't experience inconsistent behavior.

68
00:04:42.480 --> 00:04:47.550
After adding the key, let's render the icon inside the anchor element.

69
00:04:47.550 --> 00:04:50.760
Add an eye tag with the following classes.

70
00:04:50.790 --> 00:04:51.640
B i.

71
00:04:51.690 --> 00:04:54.360
B I handle dot icon.

72
00:04:56.650 --> 00:05:00.950
Bootstrap icons can be added by adding the by class.

73
00:05:00.970 --> 00:05:03.670
This class will apply generic styles.

74
00:05:03.700 --> 00:05:06.980
A specific icon can be rendered by its name.

75
00:05:07.000 --> 00:05:10.210
Most icons are prefixed with by.

76
00:05:10.240 --> 00:05:14.710
We are appending the name of the social media platform to grab the icon.

77
00:05:14.820 --> 00:05:15.760
We're finished.

78
00:05:15.760 --> 00:05:22.570
Let's try testing our code in the browser, refresh the page and add the team members group block.

79
00:05:25.940 --> 00:05:27.290
After adding the block.

80
00:05:27.290 --> 00:05:29.720
Each team member has two icons.

81
00:05:29.720 --> 00:05:30.620
That's great.

82
00:05:30.650 --> 00:05:35.100
We've successfully looped through the links in the blocks attributes.

83
00:05:35.120 --> 00:05:40.100
The next step is to provide a field for adding or modifying existing links.

84
00:05:40.100 --> 00:05:44.000
In the next set of lectures, let's begin working on a solution.

