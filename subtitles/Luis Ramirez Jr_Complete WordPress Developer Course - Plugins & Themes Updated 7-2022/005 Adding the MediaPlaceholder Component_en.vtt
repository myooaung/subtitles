WEBVTT
1
00:00:00.300 --> 00:00:05.610
In this lecture, we are going to add the option of uploading an image to the team member.

2
00:00:05.610 --> 00:00:10.260
BLOCK We have the option of writing the entire logic, but that's a lot of work.

3
00:00:10.290 --> 00:00:14.310
It would take hours to create an interface for managing images.

4
00:00:14.310 --> 00:00:20.790
Fortunately, WordPress has a component for handling uploads called the media placeholder component.

5
00:00:20.820 --> 00:00:27.090
In the resource section of this lecture, I provide a link to the documentation page for this component.

6
00:00:27.120 --> 00:00:32.670
This component will generate an entire interface for managing and uploading files.

7
00:00:32.670 --> 00:00:37.140
We can implement this component from within our blocks to leverage its features.

8
00:00:37.140 --> 00:00:38.520
Let's give it a try.

9
00:00:38.520 --> 00:00:43.830
In your editor, open the indexed JS file for the team member block.

10
00:00:46.120 --> 00:00:52.510
The media placeholder component can be imported from the WordPress slash block editor package.

11
00:00:54.590 --> 00:00:57.960
Next, let's update our block to use this component.

12
00:00:57.980 --> 00:01:00.890
Scroll to the edit functions templates.

13
00:01:03.040 --> 00:01:06.370
Inside the templates, we have an empty image tag.

14
00:01:06.370 --> 00:01:10.630
Below this tag, let's render the media placeholder component.

15
00:01:12.760 --> 00:01:16.910
In the future, we are going to toggle the appearance of this component.

16
00:01:16.930 --> 00:01:20.770
If an image has been selected, this component will be hidden.

17
00:01:20.800 --> 00:01:23.460
Otherwise the image tag will be hidden.

18
00:01:23.470 --> 00:01:26.770
For now, both elements will appear in our block.

19
00:01:26.800 --> 00:01:30.730
It's going to create an awkward UI, but that's perfectly fine.

20
00:01:30.910 --> 00:01:35.210
On this component, we can configure the behavior with properties.

21
00:01:35.230 --> 00:01:40.390
The media placeholder component will list all media files uploaded to our site.

22
00:01:40.420 --> 00:01:43.090
Media files are not limited to images.

23
00:01:43.090 --> 00:01:47.220
Sites can store audio, video and PDF files.

24
00:01:47.230 --> 00:01:50.970
Let's limit the type of files that can appear in this block.

25
00:01:50.980 --> 00:01:56.950
First, we are going to set the accepted type's property to an array of file types.

26
00:01:59.040 --> 00:02:02.970
If you're not familiar with a mime type, let's quickly talk about them.

27
00:02:04.580 --> 00:02:08.150
Typically files can be identified by their extension.

28
00:02:08.150 --> 00:02:12.790
For example, PHP files have a dot php extension.

29
00:02:12.800 --> 00:02:16.610
There is another way of identifying a file called a mime type.

30
00:02:16.640 --> 00:02:21.470
Unlike extensions, mime types are not visible from within the file name.

31
00:02:21.470 --> 00:02:23.990
They're stored as metadata in a file.

32
00:02:24.020 --> 00:02:26.990
Mime types follow a specific format.

33
00:02:26.990 --> 00:02:30.520
It's the category followed by the actual file type.

34
00:02:30.530 --> 00:02:37.040
For example, if we had a tag image, the mime type would be image slash pag.

35
00:02:37.070 --> 00:02:40.670
The image portion of the mime type would be the category.

36
00:02:40.670 --> 00:02:45.830
The category and file type are separated with a forward slash character.

37
00:02:47.080 --> 00:02:52.840
In the resource section of this lecture, I provide a link to a list of common mime types.

38
00:02:52.870 --> 00:02:57.130
Generally, mime types can share a category for our block.

39
00:02:57.130 --> 00:03:01.420
We are going to support mime types that belong to the image category.

40
00:03:01.450 --> 00:03:04.420
Let's update our code to use this mime type.

41
00:03:04.450 --> 00:03:05.980
Head back to the editor.

42
00:03:08.220 --> 00:03:11.520
In the array, we can provide a list of mime types.

43
00:03:11.520 --> 00:03:13.800
Let's add the image category.

44
00:03:16.000 --> 00:03:19.400
It would be tedious to list every image mime type.

45
00:03:19.420 --> 00:03:23.600
Luckily, we can omit the file type by providing the category.

46
00:03:23.620 --> 00:03:28.720
If we provide the category, WordPress will permit files within this category.

47
00:03:28.750 --> 00:03:34.820
However, if you want to limit the type of files that can be uploaded, feel free to add the file type.

48
00:03:34.840 --> 00:03:39.210
For example, let's say the block can only have PNG files.

49
00:03:39.220 --> 00:03:44.320
We can update the array to contain the image slash PNG mime type.

50
00:03:45.790 --> 00:03:49.350
I'm going to revert this value to the image category.

51
00:03:49.360 --> 00:03:53.810
As stated before, we're going to allow any image to be uploaded.

52
00:03:53.830 --> 00:03:55.340
We're not finished yet.

53
00:03:55.360 --> 00:04:01.050
This property will affect the type of files that will appear from within the media uploader.

54
00:04:01.060 --> 00:04:05.590
In addition to this property, we must add the accepted property.

55
00:04:07.780 --> 00:04:10.620
Users will have the option of uploading a file.

56
00:04:10.630 --> 00:04:15.040
They do not need to select an existing file from the media library.

57
00:04:15.220 --> 00:04:21.640
If they decide to upload a file, we must add the accepted property to set the type of file uploaded

58
00:04:21.640 --> 00:04:22.660
to the server.

59
00:04:22.780 --> 00:04:27.670
Let's set this value to the following image slash asterisk.

60
00:04:29.740 --> 00:04:31.990
Once again, we're using a mime type.

61
00:04:32.020 --> 00:04:37.550
However, we're adding the asterisk character to act as a wild card by doing so.

62
00:04:37.570 --> 00:04:40.180
The file upload will be marked as an image.

63
00:04:40.210 --> 00:04:44.210
After making those changes, let's add a few more properties.

64
00:04:44.230 --> 00:04:46.900
The next property is called Icon.

65
00:04:48.730 --> 00:04:51.910
We can add an icon to help the component stand out.

66
00:04:51.940 --> 00:04:55.390
I'm going to set the icon to add many users.

67
00:04:57.420 --> 00:05:02.380
This icon is from the official WordPress icon set called Dash Icons.

68
00:05:02.400 --> 00:05:06.300
We can set this value to the name of the icon from this set.

69
00:05:06.330 --> 00:05:12.370
The purpose of adding the media placeholder is to allow users to add an image for a team member.

70
00:05:12.390 --> 00:05:16.740
I think the admin user's icon is appropriate for this component.

71
00:05:16.770 --> 00:05:20.260
Let's move on to adding functions for handling uploads.

72
00:05:20.280 --> 00:05:23.650
First, let's add the on select property.

73
00:05:23.670 --> 00:05:29.580
The value for this property will be an arrow function that accepts the upload as an argument called

74
00:05:29.580 --> 00:05:30.330
image.

75
00:05:32.420 --> 00:05:35.780
Inside the body of the function log the message.

76
00:05:37.830 --> 00:05:40.470
The on select property is an event.

77
00:05:40.500 --> 00:05:44.940
This event gets emitted after an image has been selected or uploaded.

78
00:05:44.940 --> 00:05:48.400
We are given the images information via an argument.

79
00:05:48.420 --> 00:05:53.820
This information will be helpful for updating the block's appearance before testing our code.

80
00:05:53.820 --> 00:05:57.090
There's another event worth adding called on error.

81
00:05:59.310 --> 00:06:01.680
This event is emitted during errors.

82
00:06:01.680 --> 00:06:04.080
For example, an upload can fail.

83
00:06:04.110 --> 00:06:07.440
Let's pass in an arrow function to handle the event.

84
00:06:07.470 --> 00:06:12.060
In this function, we can accept the error as an argument called error.

85
00:06:14.270 --> 00:06:15.860
In the body of the function.

86
00:06:15.860 --> 00:06:19.730
We can log the error with the console dot error function.

87
00:06:19.760 --> 00:06:23.540
Normally we would log messages with the log function.

88
00:06:23.570 --> 00:06:28.070
However, the error function is another function for logging messages.

89
00:06:28.100 --> 00:06:31.440
The difference is that the message will have a red background.

90
00:06:31.460 --> 00:06:35.070
It's not required to log errors with the error function.

91
00:06:35.090 --> 00:06:41.290
However, it can add clarity if you want, you can swap this function with the log function.

92
00:06:41.300 --> 00:06:43.130
Let's try testing our code.

93
00:06:43.130 --> 00:06:44.660
Refresh the page.

94
00:06:46.770 --> 00:06:50.010
Next, add the team members group block.

95
00:06:52.040 --> 00:06:53.840
In the team member block.

96
00:06:53.840 --> 00:07:01.020
WordPress has generated a UI for uploading a file or selecting a media file with a few lines of code.

97
00:07:01.040 --> 00:07:03.580
We're given this entire interface.

98
00:07:03.590 --> 00:07:09.320
Overall, using the media placeholder component is the best way to handle uploads.

99
00:07:09.320 --> 00:07:11.060
Let's select an image.

100
00:07:11.060 --> 00:07:15.110
After selecting an image, the details are logged in the console.

101
00:07:15.110 --> 00:07:20.930
We are given various pieces of information from the name of the file to the file size.

102
00:07:20.930 --> 00:07:26.000
With this information, let's begin updating our block to render the image.

