WEBVTT
1
00:00:00.090 --> 00:00:04.560
In this lecture, we are going to fix the problem with our custom image size.

2
00:00:04.590 --> 00:00:07.700
Gutenberg is not providing our size as an option.

3
00:00:07.710 --> 00:00:09.030
The reason is simple.

4
00:00:09.030 --> 00:00:13.830
Like anything else, WordPress does not like including everything with a response.

5
00:00:13.830 --> 00:00:17.640
Keep in mind this information was grabbed with the rest API.

6
00:00:17.670 --> 00:00:25.110
Custom values must be explicitly added to a response, otherwise WordPress will not include it, adding

7
00:00:25.110 --> 00:00:26.640
the custom size to the rest.

8
00:00:26.640 --> 00:00:28.380
API response is simple.

9
00:00:28.380 --> 00:00:31.830
There is a hook for including sizes in your editor.

10
00:00:31.830 --> 00:00:33.930
Open the index plug and file.

11
00:00:36.140 --> 00:00:43.100
At the bottom of the hook section at another hook called image size names choose with the add filter

12
00:00:43.100 --> 00:00:43.790
function.

13
00:00:46.020 --> 00:00:50.080
Up until now, we've been adding hooks with the add action function.

14
00:00:50.100 --> 00:00:53.040
There's another type of hook called a filter hook.

15
00:00:55.280 --> 00:00:58.340
A filter hook is a function that returns a value.

16
00:00:58.370 --> 00:01:02.420
Typically, hooks give us the flexibility to run additional code.

17
00:01:02.450 --> 00:01:05.239
We never have to return a value filter.

18
00:01:05.239 --> 00:01:06.560
Hooks are different.

19
00:01:06.590 --> 00:01:08.660
A filter hook is given a value.

20
00:01:08.660 --> 00:01:11.740
This value must be returned by the function.

21
00:01:11.750 --> 00:01:17.270
Alternatively, we can return a new value or a modified version of the value.

22
00:01:17.540 --> 00:01:22.550
Filter hooks are utilized to give plugins the opportunity to modify a value.

23
00:01:22.580 --> 00:01:24.320
Let's look at an example.

24
00:01:26.440 --> 00:01:32.650
In our plugin, we are hooking into a filter hook called Image Size Names Choose.

25
00:01:32.650 --> 00:01:39.670
This hook will run when a list of image sizes is retrieved similar to the ADD Action function, we can

26
00:01:39.670 --> 00:01:42.550
specify a function to run during this hook.

27
00:01:42.550 --> 00:01:46.690
Let's set the name to up custom image sizes.

28
00:01:48.720 --> 00:01:52.500
Next, let's create a file called image sizes.

29
00:01:53.190 --> 00:01:55.650
PHP inside the includes folder.

30
00:01:57.880 --> 00:02:01.360
Define the up custom image sizes function.

31
00:02:03.570 --> 00:02:07.860
As stated before, filter hooks will provide a value to a function.

32
00:02:07.890 --> 00:02:09.840
This statement is always true.

33
00:02:09.870 --> 00:02:12.390
We can accept the value as an argument.

34
00:02:12.420 --> 00:02:17.100
In our case, WordPress will provide us with an array of image sizes.

35
00:02:19.260 --> 00:02:20.550
From our function.

36
00:02:20.550 --> 00:02:22.950
We must return an array of sciences.

37
00:02:22.950 --> 00:02:25.530
Before we do, let's return the array.

38
00:02:25.530 --> 00:02:26.640
Merge function.

39
00:02:28.880 --> 00:02:34.170
The size is variable will contain a list of sizes for images by default.

40
00:02:34.190 --> 00:02:36.050
Our sizes are not included.

41
00:02:36.080 --> 00:02:39.920
We can fix this problem by adding our sizes to the array.

42
00:02:39.950 --> 00:02:43.130
There are different ways to add items to an array.

43
00:02:43.130 --> 00:02:49.160
I prefer to use the array merge function which will merge to arrays into a single array.

44
00:02:49.400 --> 00:02:53.240
This function accepts an unlimited number of arrays to merge.

45
00:02:53.240 --> 00:02:55.640
Let's pass in the sizes array.

46
00:02:57.760 --> 00:03:00.380
Next, let's create another array.

47
00:03:00.400 --> 00:03:04.410
In this array, we are going to add our custom image size.

48
00:03:04.420 --> 00:03:10.230
The format for adding a new size is the name of the size, followed by a human readable name.

49
00:03:10.240 --> 00:03:15.640
In the previous lecture, the name of our custom size was called Team Member.

50
00:03:17.900 --> 00:03:20.260
The name will be set as the key.

51
00:03:20.270 --> 00:03:23.560
The value for this key will be the human readable name.

52
00:03:23.570 --> 00:03:27.530
Let's run the double underscore a function to translate the name.

53
00:03:27.560 --> 00:03:31.130
The value of the key will be the following team member.

54
00:03:33.370 --> 00:03:38.800
To reiterate, we are merging to erase the original array and our new array.

55
00:03:38.830 --> 00:03:43.610
By doing so, the team member size will become available with the response.

56
00:03:43.630 --> 00:03:48.280
Let's try testing our code by refreshing the experimental page.

57
00:03:50.370 --> 00:03:53.130
At the team members group block.

58
00:03:55.090 --> 00:03:57.670
Lastly, try selecting an image.

59
00:03:59.890 --> 00:04:03.040
Open the console panel from the developer tools.

60
00:04:03.040 --> 00:04:08.220
An object should have been logged in the object search for the science property.

61
00:04:08.230 --> 00:04:11.240
This time our size appears in the object.

62
00:04:11.260 --> 00:04:12.150
That's great.

63
00:04:12.160 --> 00:04:14.170
We have a URL to the image.

64
00:04:14.170 --> 00:04:21.339
With our custom size, we can add this URL to our block to display the image in the next lecture.

65
00:04:21.339 --> 00:04:23.170
Let's begin working on that.

