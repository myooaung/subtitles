WEBVTT
1
00:00:00.060 --> 00:00:07.140
In this lecture, we are going to explore one more topic of JavaScript before moving on to react related

2
00:00:07.140 --> 00:00:07.980
topics.

3
00:00:08.010 --> 00:00:12.550
These structuring is a feature for extracting properties from an object.

4
00:00:12.570 --> 00:00:18.660
So far we've been typing the entire path of an object to access its properties.

5
00:00:18.690 --> 00:00:22.470
It can become tiring to constantly type the same lines.

6
00:00:22.500 --> 00:00:26.190
On top of that, our code can become difficult to read.

7
00:00:26.520 --> 00:00:29.850
DE Structuring addresses this specific issue.

8
00:00:29.880 --> 00:00:34.350
We can de structure properties from objects or items from arrays.

9
00:00:34.380 --> 00:00:37.280
Let's look at some examples in our scripts.

10
00:00:37.290 --> 00:00:42.430
We have an object with a property called NUM and a method called log num.

11
00:00:42.450 --> 00:00:46.860
We can access the NUM property by typing food num.

12
00:00:46.890 --> 00:00:52.200
Every time I'd like to access this property, I need to type out this long line of code.

13
00:00:52.230 --> 00:00:56.810
It's not that long, but imagine if we had an object with nested objects.

14
00:00:56.820 --> 00:00:59.840
It's not uncommon to encounter nested objects.

15
00:00:59.850 --> 00:01:04.220
We can shorten our code by assigning the property to a variable.

16
00:01:04.230 --> 00:01:08.740
For example, below the object create a variable called num.

17
00:01:08.760 --> 00:01:12.300
Its value will be the foo num property.

18
00:01:14.600 --> 00:01:20.440
This solution will allow us to use the value without referencing the entire chain of objects.

19
00:01:20.450 --> 00:01:22.070
There's just one problem.

20
00:01:22.070 --> 00:01:25.820
What if we want to grab multiple properties from an object?

21
00:01:25.850 --> 00:01:29.250
Theoretically, we could create another variable.

22
00:01:29.270 --> 00:01:31.630
However, there's an easier approach.

23
00:01:31.640 --> 00:01:35.360
Let's wrap the numb variable with curly brackets.

24
00:01:37.480 --> 00:01:41.800
These structuring can be applied to any of the variable keywords.

25
00:01:41.800 --> 00:01:45.190
The name of the variables is wrapped curly brackets.

26
00:01:45.190 --> 00:01:52.150
Inside these brackets we must specify the name of the properties that should be extracted from the object.

27
00:01:52.150 --> 00:01:56.440
Therefore we can remove the num property from the value.

28
00:01:58.610 --> 00:02:02.420
JavaScript will extract properties from a given object.

29
00:02:02.420 --> 00:02:07.500
We can extract multiple properties by separating each property with a comma.

30
00:02:07.520 --> 00:02:11.660
For example, let's extract the log num function.

31
00:02:13.910 --> 00:02:17.790
Each property will be assigned to a variable of the same name.

32
00:02:17.810 --> 00:02:21.710
We're not limited to extracting properties from objects.

33
00:02:21.740 --> 00:02:24.560
Arrays can have their values structured.

34
00:02:24.590 --> 00:02:28.830
As an example, let's create a variable called names.

35
00:02:28.850 --> 00:02:31.640
Its value will be an array of names.

36
00:02:33.810 --> 00:02:37.900
Unlike objects, arrays rely on numbered indexes.

37
00:02:37.920 --> 00:02:44.100
This begs the question how do we extract a single value from the array after this array?

38
00:02:44.130 --> 00:02:47.130
Define another variable called first name.

39
00:02:49.520 --> 00:02:52.880
The value for this array will be the names array.

40
00:02:52.910 --> 00:02:58.070
After assigning the variable, let's root the variable name with square brackets.

41
00:03:00.220 --> 00:03:03.460
These structuring functions differently for arrays.

42
00:03:03.490 --> 00:03:07.010
Values are structured in the order they are defined.

43
00:03:07.030 --> 00:03:10.990
The first item in the array will be extracted from the array.

44
00:03:11.020 --> 00:03:14.250
It will be assigned to the first name variable.

45
00:03:14.260 --> 00:03:20.500
If we were to add another name, the second value in the array would be assigned to the second variable.

46
00:03:20.710 --> 00:03:26.650
Overall, these structuring is a simple feature in JavaScript for making our code readable.

47
00:03:26.680 --> 00:03:32.030
The original solution is valuable, but most developers prefer the structuring.

48
00:03:32.050 --> 00:03:36.330
It's easier to read and write with that final topic out of the way.

49
00:03:36.340 --> 00:03:38.380
Let's get into reactive element.

50
00:03:38.410 --> 00:03:40.750
I'll see you in the next lecture.

