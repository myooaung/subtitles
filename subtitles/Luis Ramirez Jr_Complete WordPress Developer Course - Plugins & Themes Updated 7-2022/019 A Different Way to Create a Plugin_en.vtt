WEBVTT
1
00:00:00.090 --> 00:00:04.800
In this lecture, we will explore a different solution for creating a plugin.

2
00:00:04.800 --> 00:00:08.400
WordPress has an official package for creating a plugin.

3
00:00:08.400 --> 00:00:11.730
This package can be helpful for quickly writing a block.

4
00:00:11.730 --> 00:00:16.379
In the resource section of this lecture, I provide a link to this package.

5
00:00:16.379 --> 00:00:20.250
This package is not to be confused with these scripts package.

6
00:00:20.250 --> 00:00:26.580
The purpose of these scripts package is to provide tooling and optimization, whereas the Create BLOCK

7
00:00:26.580 --> 00:00:30.690
package will create the folders and files for a block plugin.

8
00:00:30.690 --> 00:00:34.860
It'll download the scripts package to on this page.

9
00:00:34.860 --> 00:00:37.740
We are given instructions for running this package.

10
00:00:37.740 --> 00:00:45.150
Let's try using this package to create a block plugin in your editor point the command line to the plugins

11
00:00:45.150 --> 00:00:46.020
directory.

12
00:00:46.020 --> 00:00:52.980
We should not run this package from the YouTube plus plugin folder, otherwise we may encounter issues.

13
00:00:52.980 --> 00:00:59.850
The purpose of this package is to create a new plugin in the command line, type the following commands

14
00:00:59.850 --> 00:01:04.500
and ppc's wordpress slash create block example.

15
00:01:06.700 --> 00:01:10.240
I'm introducing a new command called NPCs.

16
00:01:10.270 --> 00:01:15.390
The NPCs command will temporarily download a package for execution.

17
00:01:15.400 --> 00:01:19.960
As we've learned, some packages are capable of running on the command line.

18
00:01:19.990 --> 00:01:23.030
The Create BLOCK package is an example.

19
00:01:23.050 --> 00:01:28.330
After the package has been downloaded and PM will execute it from the command line.

20
00:01:28.360 --> 00:01:31.720
The package will be deleted after it's finished running.

21
00:01:31.930 --> 00:01:39.520
We are not forced to download packages in our project if we plan on using a package once it isn't necessary

22
00:01:39.520 --> 00:01:40.780
to keep it around.

23
00:01:40.810 --> 00:01:44.140
The NPCs command is excellent for this purpose.

24
00:01:44.170 --> 00:01:47.980
After this command we must provide the name of the package.

25
00:01:48.010 --> 00:01:54.310
Lastly, we can provide the name of our plugin, which will be used by the Create BLOCK package.

26
00:01:54.460 --> 00:01:57.460
Let's run the command after doing so.

27
00:01:57.490 --> 00:02:01.770
You may be asked if you're sure about downloading this package.

28
00:02:01.780 --> 00:02:02.830
Let's select.

29
00:02:02.830 --> 00:02:03.610
Yes.

30
00:02:05.850 --> 00:02:10.229
The package will create a new directory in the plugins directory.

31
00:02:10.259 --> 00:02:14.220
After a few moments, a new set of files should appear.

32
00:02:14.400 --> 00:02:17.100
This process may take a while for some of you.

33
00:02:17.130 --> 00:02:18.120
Be patient.

34
00:02:18.120 --> 00:02:23.280
Once the files have been created, an additional set of packages will be installed.

35
00:02:23.460 --> 00:02:25.830
While the packages are being installed.

36
00:02:25.830 --> 00:02:30.630
Let's check out the files in the root directory of the example plugin.

37
00:02:30.660 --> 00:02:33.630
The first file is called editor config.

38
00:02:33.660 --> 00:02:35.620
You may be working on a team.

39
00:02:35.640 --> 00:02:40.800
Each team member may be using different editors with different formatting settings.

40
00:02:40.800 --> 00:02:45.600
This file can be extremely helpful for standardizing editor settings.

41
00:02:45.600 --> 00:02:50.690
The editor config file is a file that can be picked up by most editors.

42
00:02:50.700 --> 00:02:56.580
If this file exists in a project, the editors settings will be modified to match the settings from

43
00:02:56.580 --> 00:02:57.410
this file.

44
00:02:57.420 --> 00:03:03.260
It may not seem like it, but working on a project that has various formatting can be tedious.

45
00:03:03.270 --> 00:03:08.400
Your team should standardize the formatting settings of your project's files.

46
00:03:08.520 --> 00:03:14.910
Visual Studio code does not support this file, but support can be added with an extension for this

47
00:03:14.910 --> 00:03:15.480
course.

48
00:03:15.480 --> 00:03:17.600
We're not going to need this file.

49
00:03:17.610 --> 00:03:23.910
You can read the comment for more information on configuring this file for a project moving along.

50
00:03:23.910 --> 00:03:27.030
The following file is called Git Ignore.

51
00:03:29.180 --> 00:03:32.050
We're already familiar with this type of file.

52
00:03:32.060 --> 00:03:36.710
It's a list of files and folders that should not be uploaded to GitHub.

53
00:03:36.740 --> 00:03:42.290
As you can see, WordPress has prepared an extensive list of possible files.

54
00:03:42.320 --> 00:03:46.580
Next, let's open the example PHP file.

55
00:03:48.720 --> 00:03:51.270
This file is the main plug file.

56
00:03:51.270 --> 00:03:56.600
At the top of the file, we are going to find the file header that has been generated.

57
00:03:56.610 --> 00:03:59.000
You're more than welcome to modify the header.

58
00:03:59.010 --> 00:04:01.350
This goes for the other files too.

59
00:04:01.350 --> 00:04:07.020
If we scroll to the bottom of the file, we are going to find a function for registering a block.

60
00:04:07.050 --> 00:04:10.500
This function will be called after the init hook.

61
00:04:10.620 --> 00:04:15.360
Overall, WordPress provides the minimal setup for registering a block.

62
00:04:15.360 --> 00:04:18.269
Most of this code should be familiar to you.

63
00:04:18.269 --> 00:04:23.460
Unlike our plugin, WordPress will define functions from within the same file.

64
00:04:23.490 --> 00:04:25.470
You're more than welcome to do the same.

65
00:04:25.470 --> 00:04:28.800
Let's check out the package JSON file.

66
00:04:30.910 --> 00:04:33.290
The package file is very standard.

67
00:04:33.310 --> 00:04:39.310
Under the dependencies object, the WordPress slash scripts package has been installed.

68
00:04:39.340 --> 00:04:46.420
Like I said before, the create block package will create the files necessary for starting a block plugin.

69
00:04:46.450 --> 00:04:51.400
However, it is not a tool for constantly watching your files for changes.

70
00:04:51.400 --> 00:04:54.530
That job is left to the scripts package.

71
00:04:54.550 --> 00:04:59.880
Inside these scripts object, we are going to find them the same commands from our project.

72
00:04:59.890 --> 00:05:04.900
We do not need to learn a new set of commands for performing the same task.

73
00:05:04.900 --> 00:05:08.620
We can continue to use the commands we're familiar with.

74
00:05:08.650 --> 00:05:14.380
Let's open the last file in the root directory called Read Me Text.

75
00:05:16.790 --> 00:05:22.910
If you plan on uploading your plug into the official WordPress repository, you must provide a read

76
00:05:22.910 --> 00:05:23.780
me file.

77
00:05:23.810 --> 00:05:27.510
The read me file should contain a description of your plugin.

78
00:05:27.530 --> 00:05:31.950
In addition, you can add installation instructions and screenshots.

79
00:05:31.970 --> 00:05:35.150
Otherwise, you can safely delete this file.

80
00:05:35.270 --> 00:05:41.430
The last set of files can be found in a directory called source inside this directory.

81
00:05:41.450 --> 00:05:44.630
We are going to find the code for creating a block.

82
00:05:44.660 --> 00:05:48.220
The main entry file is called Indexed JS.

83
00:05:48.350 --> 00:05:49.730
Let's check it out.

84
00:05:52.000 --> 00:05:55.220
The index file will have dozens of lines of code.

85
00:05:55.240 --> 00:05:57.610
However, most of them are comments.

86
00:05:57.610 --> 00:05:59.180
They don't affect the block.

87
00:05:59.200 --> 00:06:03.040
WordPress has included them to help you navigate the project.

88
00:06:03.070 --> 00:06:05.890
You're more than welcome to delete these comments.

89
00:06:05.890 --> 00:06:09.070
At its core, we have a regular block file.

90
00:06:09.070 --> 00:06:15.490
If we scroll to the bottom of the file, we are going to find the register block type function for adding

91
00:06:15.490 --> 00:06:19.000
the block inside the object of the second argument.

92
00:06:19.030 --> 00:06:22.060
The edit and save functions have been added.

93
00:06:22.300 --> 00:06:26.020
However, the functions aren't defined from the same file.

94
00:06:26.020 --> 00:06:30.160
WordPress has outsourced the functions into separate files.

95
00:06:30.160 --> 00:06:34.180
You may want to do this if you're writing a large block for this course.

96
00:06:34.180 --> 00:06:37.660
We may separate our functions into separate files.

97
00:06:37.660 --> 00:06:43.540
However, the blocks we've built are relatively small, so they're easier to maintain.

98
00:06:43.780 --> 00:06:46.960
You're more than welcome to explore the other files.

99
00:06:46.960 --> 00:06:52.000
There is one more file that I want to point out inside the source directory.

100
00:06:52.000 --> 00:06:55.750
There are two files with the SAS extension.

101
00:06:55.750 --> 00:07:01.690
In the resource section of this lecture, I provide a link to a project called SAS.

102
00:07:03.890 --> 00:07:06.920
Sass is a new language for CSIS.

103
00:07:06.950 --> 00:07:09.710
It adds additional features to the language.

104
00:07:09.710 --> 00:07:12.470
Covering SAS would require a new course.

105
00:07:12.470 --> 00:07:16.190
For this reason we haven't used SAS in our project.

106
00:07:16.220 --> 00:07:19.730
However, the scripts package has support for it.

107
00:07:19.760 --> 00:07:23.930
You can check out the language after finishing the course for now.

108
00:07:23.960 --> 00:07:26.610
We are going to stick with playing CSIS.

109
00:07:26.630 --> 00:07:29.030
Let's head back to our project.

110
00:07:31.120 --> 00:07:34.180
At this point, the package should finish running.

111
00:07:34.180 --> 00:07:35.570
And the command line.

112
00:07:35.590 --> 00:07:40.390
The package will output additional commands that you can run to start the project.

113
00:07:40.420 --> 00:07:47.290
If we look at the plugins folders, two folders have been created called Node modules and builds.

114
00:07:47.320 --> 00:07:51.870
The node modules directory will contain the packages for the project.

115
00:07:51.880 --> 00:07:53.770
As for the build folder.

116
00:07:53.800 --> 00:07:56.830
The final bundled files can be found here.

117
00:07:56.860 --> 00:08:03.700
Overall, the Create BLOCK package is a very powerful package for creating a block plugin.

118
00:08:03.730 --> 00:08:09.010
We never talked about it before so that we can fully understand every line of code.

119
00:08:09.190 --> 00:08:13.040
You may want to consider using this package for a future plug ins.

120
00:08:13.060 --> 00:08:17.020
For now, we are going to stick with the plugin we've developed.

