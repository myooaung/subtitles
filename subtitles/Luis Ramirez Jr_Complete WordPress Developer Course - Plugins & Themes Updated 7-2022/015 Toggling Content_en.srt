1
00:00:00,150 --> 00:00:05,370
In this lecture, we are going to begin toggling content from within the Gutenberg Editor.

2
00:00:05,400 --> 00:00:07,680
This is where things can become tricky.

3
00:00:07,710 --> 00:00:12,270
We are going to toggle the blocks content inside the page header.

4
00:00:12,270 --> 00:00:18,040
If the show category attribute is enabled, the client should not be able to edit the header.

5
00:00:18,060 --> 00:00:21,990
Therefore, we must disable the rich text component.

6
00:00:22,020 --> 00:00:26,730
Initially, we might use a conditional statement to accomplish this behavior.

7
00:00:26,760 --> 00:00:30,600
However, Gsx does not support the if statements.

8
00:00:30,630 --> 00:00:34,950
Conditionally rendering content requires a ternary operator.

9
00:00:34,980 --> 00:00:38,340
The ternary operator is not unique to PHP.

10
00:00:38,520 --> 00:00:41,280
Various languages support this operator.

11
00:00:41,310 --> 00:00:43,170
This includes JavaScript.

12
00:00:43,200 --> 00:00:46,700
Surprisingly, the syntax is exactly the same.

13
00:00:46,710 --> 00:00:49,500
You will feel right at home to get started.

14
00:00:49,530 --> 00:00:52,050
Open the index dot js file.

15
00:00:54,170 --> 00:00:57,590
Let's scroll to the edit components gsx.

16
00:00:57,590 --> 00:01:00,840
We are going to modify the rich text component.

17
00:01:00,860 --> 00:01:08,060
As I mentioned before, we should enable or disable this component based on the value of the show category

18
00:01:08,060 --> 00:01:08,970
attributes.

19
00:01:08,990 --> 00:01:16,230
If the client wants to show the category, this component should be disabled before the rich text component.

20
00:01:16,250 --> 00:01:19,190
Add an expression with a ternary operator.

21
00:01:21,460 --> 00:01:28,780
The syntax for a ternary operator is the exact same as the syntax for a ternary operator in PHP.

22
00:01:28,840 --> 00:01:33,740
Keep in mind the ternary operator is a JavaScript syntax feature.

23
00:01:33,760 --> 00:01:41,110
It's not specific to react or gsx, however, it's a popular syntax feature in React.

24
00:01:41,140 --> 00:01:48,100
If you look at examples online, the ternary operator is the primary choice for conditionally rendering

25
00:01:48,100 --> 00:01:51,630
content to the right of the question mark symbol.

26
00:01:51,640 --> 00:01:53,430
We must add a condition.

27
00:01:53,440 --> 00:01:57,400
The condition will be the show category attributes.

28
00:01:59,760 --> 00:02:05,850
If the condition is true, thi we should display the current category after the question mark symbol

29
00:02:05,850 --> 00:02:08,009
at a pair of h one tags.

30
00:02:10,139 --> 00:02:14,190
The page header block will be applied to the category templates.

31
00:02:14,220 --> 00:02:20,480
Unfortunately, the full site editor does not provide a fake category to display on the page.

32
00:02:20,490 --> 00:02:27,420
We won't have access to a category, therefore we will need to display a dummy category inside these

33
00:02:27,420 --> 00:02:28,110
tags.

34
00:02:28,110 --> 00:02:31,650
Add an expression with the double underscore function.

35
00:02:31,740 --> 00:02:35,850
The translation will contain the following text category.

36
00:02:35,850 --> 00:02:37,200
Some category.

37
00:02:39,340 --> 00:02:41,780
Let's assume the option is turned off.

38
00:02:41,800 --> 00:02:45,580
At this point, we should render the rich text components.

39
00:02:45,610 --> 00:02:51,310
We can move the rich text component from its current location to after the colon symbol.

40
00:02:53,540 --> 00:02:57,530
The formatting of our ternary operator may seem strange.

41
00:02:57,560 --> 00:03:02,090
Normally, the ternary operator is written on a single line of code.

42
00:03:02,120 --> 00:03:06,090
However, our code would be difficult to read on a single line.

43
00:03:06,110 --> 00:03:10,920
It's perfectly valid to break the ternary operator into multiple lines.

44
00:03:10,940 --> 00:03:16,280
In addition, the template will always be provided the latest value of the attributes.

45
00:03:16,280 --> 00:03:19,400
We won't need to check if the value has been updated.

46
00:03:19,430 --> 00:03:23,840
WordPress will manage providing our template with the latest value.

47
00:03:24,170 --> 00:03:27,620
Before testing our code, let's try an exercise.

48
00:03:27,620 --> 00:03:30,960
Scroll to the toggle control components.

49
00:03:30,980 --> 00:03:38,000
This component has an additional property for displaying help text at a property called Help.

50
00:03:40,300 --> 00:03:43,870
The Help property is similar to the label property.

51
00:03:43,900 --> 00:03:48,850
You can use this property to provide additional information for helping the user.

52
00:03:48,880 --> 00:03:53,440
The text will appear below the control with light colored text.

53
00:03:53,470 --> 00:04:00,610
As an exercise, I want you to tell the client if the block will render the category or custom content.

54
00:04:00,850 --> 00:04:04,840
The solution will be vastly similar to the blocks template.

55
00:04:04,870 --> 00:04:08,770
You can use the ternary operator for toggling the value.

56
00:04:08,800 --> 00:04:10,840
Give it a try and good luck.

57
00:04:14,680 --> 00:04:15,730
Welcome back.

58
00:04:15,760 --> 00:04:18,829
Hopefully you are able to tackle this challenge.

59
00:04:18,850 --> 00:04:22,400
If not, let's try tackling the solution together.

60
00:04:22,420 --> 00:04:25,080
First, we must provide a condition.

61
00:04:25,090 --> 00:04:28,040
The condition is going to be the same as before.

62
00:04:28,060 --> 00:04:33,670
We are going to check the show category attribute for a true value.

63
00:04:35,920 --> 00:04:40,110
If it is, we will tell the client that the category will be shown.

64
00:04:40,120 --> 00:04:44,960
We are going to translate the text with the double underscore function.

65
00:04:44,980 --> 00:04:49,000
The translation should say the following category shown.

66
00:04:51,220 --> 00:04:56,490
If this option is disabled, we should tell the client that they can add custom content.

67
00:04:56,500 --> 00:04:59,790
Let's add the double underscore function again.

68
00:04:59,800 --> 00:05:05,020
This time the translation will say the following custom content shown.

69
00:05:07,350 --> 00:05:08,060
Great.

70
00:05:08,070 --> 00:05:11,860
We are able to tell the client what will be displayed in the block.

71
00:05:11,880 --> 00:05:15,110
Let's try testing our block in the browser.

72
00:05:15,120 --> 00:05:17,940
Refresh the experimental page.

73
00:05:20,140 --> 00:05:24,250
Next, let's add the page header block to the page.

74
00:05:26,500 --> 00:05:32,830
If we look at the sidebar, the show category option will tell us that we can add custom content.

75
00:05:32,860 --> 00:05:35,170
Let's try enabling this option.

76
00:05:35,200 --> 00:05:38,560
After doing so, the help text should change.

77
00:05:38,590 --> 00:05:41,780
In addition, the category is shown in the block.

78
00:05:41,800 --> 00:05:44,250
The content is no longer editable.

79
00:05:44,260 --> 00:05:45,860
It's completely static.

80
00:05:45,880 --> 00:05:51,080
If you would like to edit the content, the show category option must be disabled.

81
00:05:51,100 --> 00:05:54,320
We can toggle between options with minimal effort.

82
00:05:54,340 --> 00:05:55,050
Perfect.

83
00:05:55,060 --> 00:05:57,590
We've successfully finished the block.

84
00:05:57,610 --> 00:06:00,740
The final part is to render the block on the front end.

85
00:06:00,760 --> 00:06:06,040
Since we're trying to dynamically grab the category, the block must be rendered on the server.

86
00:06:06,070 --> 00:06:08,590
Let's get started in the next lecture.

