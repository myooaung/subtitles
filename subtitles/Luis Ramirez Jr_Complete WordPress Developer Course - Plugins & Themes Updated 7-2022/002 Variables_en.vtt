WEBVTT
1
00:00:00.490 --> 00:00:05.980
In this lecture we will learn the first feature of PHP called Variables.

2
00:00:06.010 --> 00:00:12.880
Variables play an integral role in any language they allow us to store values in our program.

3
00:00:13.150 --> 00:00:14.950
Do you remember a math class?

4
00:00:14.950 --> 00:00:18.880
In math class, some equations can contain variables.

5
00:00:18.880 --> 00:00:23.260
For example, x plus five is an equation with a variable.

6
00:00:23.290 --> 00:00:26.650
The letter X can represent a numeric value.

7
00:00:26.800 --> 00:00:34.630
The variables in math function similarly to variables in PHP, we can create variables for storing values.

8
00:00:34.660 --> 00:00:37.660
Unlike math, we don't have to store numbers.

9
00:00:37.660 --> 00:00:45.610
We can store other types of data such as names, addresses, file data, etc. Variables are convenient

10
00:00:45.610 --> 00:00:48.610
because we reference them at a later point in time.

11
00:00:48.610 --> 00:00:49.480
Enough talk.

12
00:00:49.480 --> 00:00:53.560
Let's dig into the code for this entire section.

13
00:00:53.560 --> 00:01:00.370
We're going to be working inside the test PHP file before starting a lecture in this section.

14
00:01:00.370 --> 00:01:03.880
You should have this file opened at the top of the file.

15
00:01:03.880 --> 00:01:06.280
Let's add a pair of PHP tags.

16
00:01:06.280 --> 00:01:07.810
Follow along with me.

17
00:01:07.810 --> 00:01:09.880
Write the following code.

18
00:01:09.880 --> 00:01:11.890
Less than question mark.

19
00:01:12.280 --> 00:01:14.950
PHP question mark greater than.

20
00:01:17.100 --> 00:01:20.000
We've written a pair of php tags.

21
00:01:20.010 --> 00:01:24.180
This is where php starts to become different from html.

22
00:01:24.210 --> 00:01:27.380
H html is not known for being intelligent.

23
00:01:27.390 --> 00:01:32.700
We can't tell HTML to calculate values or output a set of tags.

24
00:01:32.700 --> 00:01:39.570
If a condition is met, whatever is written inside an HTML file gets outputted on the browser.

25
00:01:39.600 --> 00:01:42.330
This is where PHP comes into play.

26
00:01:42.570 --> 00:01:50.310
By adding an opening PHP tag, we can begin giving instructions code rich and inside this tag will be

27
00:01:50.310 --> 00:01:51.250
processed.

28
00:01:51.270 --> 00:01:57.420
We'll be able to perform complex logic from sending emails to processing a transaction.

29
00:01:57.630 --> 00:02:00.070
There are some rules to keep in mind.

30
00:02:00.090 --> 00:02:05.190
Firstly, we're not allowed to write HTML inside PHP tags.

31
00:02:05.220 --> 00:02:07.860
Otherwise we may encounter an error.

32
00:02:07.890 --> 00:02:11.880
There is a way to write HTML, but we'll look at that later.

33
00:02:11.880 --> 00:02:16.500
We are allowed to write HTML outside the PHP tags.

34
00:02:16.530 --> 00:02:20.420
Secondly, we can create multiple PHP tags.

35
00:02:20.430 --> 00:02:25.390
We're not limited to a single pair of PHP tags, for example.

36
00:02:25.410 --> 00:02:30.360
I'll add another pair of PHP tags after the h one tag.

37
00:02:32.670 --> 00:02:38.220
The code inside the first pair of PHP tags will be interpreted as PHP.

38
00:02:38.250 --> 00:02:42.060
The H one tags will be interpreted as HTML.

39
00:02:42.090 --> 00:02:47.730
As for the second pair of PHP tags, they'll be interpreted as PHP.

40
00:02:47.760 --> 00:02:52.410
We are given flexibility with where PHP can be written.

41
00:02:52.680 --> 00:02:56.410
Lastly, it's optional to close the PHP tag.

42
00:02:56.430 --> 00:03:01.350
For example, if I were to remove the closing tag, everything would work.

43
00:03:01.380 --> 00:03:06.930
Omitting the closing tag is allowed as long as the file ends with PHP code.

44
00:03:06.960 --> 00:03:12.420
If we were to attempt to add HTML at the end of the file, we would get an error.

45
00:03:12.450 --> 00:03:17.070
Only PHP code is allowed inside a PHP tag.

46
00:03:17.340 --> 00:03:24.420
It's considered good practice not to include the closing PHP tag if you don't intend to write html after

47
00:03:24.420 --> 00:03:25.710
writing PHP.

48
00:03:25.980 --> 00:03:28.510
This practice makes our code readable.

49
00:03:28.530 --> 00:03:31.760
Let's adopt this practice in our PHP code.

50
00:03:31.770 --> 00:03:35.670
I'm going to leave an opening PHP tag in our file.

51
00:03:37.950 --> 00:03:40.640
Moving on, let's create a variable.

52
00:03:40.650 --> 00:03:48.720
After the opening PHP tag, we can begin to write PHP inside the tag we're going to write a dollar sign

53
00:03:48.720 --> 00:03:49.410
symbol.

54
00:03:51.670 --> 00:03:57.250
The dollar sign symbol is an instruction for telling PHP to define a variable.

55
00:03:59.410 --> 00:04:04.190
In the English language, we have rules for how it's spoken and written.

56
00:04:04.210 --> 00:04:06.940
We refer to these rules as grammar.

57
00:04:06.970 --> 00:04:11.030
Programming languages also have rules for how they're written.

58
00:04:11.050 --> 00:04:15.400
The rules for a programming language are called its syntax.

59
00:04:15.580 --> 00:04:20.079
If we want to write a variable, we need to type a dollar sign symbol.

60
00:04:20.200 --> 00:04:23.710
The PHP will understand we're trying to define the variable.

61
00:04:23.740 --> 00:04:28.930
The process of creating a variable is called a variable declaration.

62
00:04:28.960 --> 00:04:32.680
You may hear other developers say declaring a variable.

63
00:04:32.680 --> 00:04:37.090
The words creating or declaring are interchangeable terms.

64
00:04:37.480 --> 00:04:42.310
After typing the dollar sign symbol, we need to give our variable a name.

65
00:04:42.340 --> 00:04:45.860
There are rules for how variables should be named.

66
00:04:45.880 --> 00:04:51.450
The first character in a variable name can only be a letter or underscore character.

67
00:04:51.460 --> 00:04:55.450
It can't start with a number after the first character.

68
00:04:55.480 --> 00:04:58.620
We're allowed to use alphanumeric characters.

69
00:04:58.630 --> 00:05:01.090
This includes the underscore character.

70
00:05:01.990 --> 00:05:05.590
For our first variable, let's call it age.

71
00:05:07.820 --> 00:05:14.300
I'm using lowercase letters, but it's perfectly acceptable to use uppercase letters or a combination

72
00:05:14.300 --> 00:05:15.110
of both.

73
00:05:15.140 --> 00:05:21.860
After giving our variable a name, we're going to add a space followed by an equal sign character.

74
00:05:24.030 --> 00:05:29.250
The equal sign character will tell PHP to assign the variable a value.

75
00:05:29.280 --> 00:05:31.950
We can give our variable any value.

76
00:05:31.950 --> 00:05:36.210
For this example, we are creating a variable for our age.

77
00:05:36.210 --> 00:05:39.230
I want you to set this variable to your age.

78
00:05:39.240 --> 00:05:41.880
In my case, I'll set it to 28.

79
00:05:41.910 --> 00:05:45.000
The last step is to add a semicolon.

80
00:05:47.250 --> 00:05:50.880
In English, we must end our sentences with a period.

81
00:05:50.910 --> 00:05:54.660
It's how we let others know we're finished with our sentences.

82
00:05:54.690 --> 00:05:58.340
This same idea applies to programming languages.

83
00:05:58.350 --> 00:06:02.440
We need to tell PHP that we're finished with this line of code.

84
00:06:02.460 --> 00:06:05.880
Afterward, it'll start running the next line of code.

85
00:06:06.060 --> 00:06:09.760
Currently, we've written our variable on a single line.

86
00:06:09.780 --> 00:06:13.710
If you're writing a single line of code, this is perfectly fine.

87
00:06:13.740 --> 00:06:17.280
However, you may prefer to format your code.

88
00:06:17.420 --> 00:06:22.320
H html can be written on a single line of code for readability.

89
00:06:22.350 --> 00:06:25.410
Each HTML is written on multiple lines.

90
00:06:25.440 --> 00:06:33.180
This same practice is applied to PHP where you're allowed to add spacing before and after the variable.

91
00:06:35.670 --> 00:06:38.610
We will be formatting our code throughout the course.

92
00:06:38.610 --> 00:06:40.710
We'll get to more code in a moment.

93
00:06:40.710 --> 00:06:44.820
But first, let's try running this code in your browser.

94
00:06:44.820 --> 00:06:46.830
Try refreshing the page.

95
00:06:49.000 --> 00:06:50.310
Nothing happens.

96
00:06:50.320 --> 00:06:51.700
That's to be expected.

97
00:06:51.730 --> 00:06:58.810
We didn't do anything else besides create a variable pvp won't do anything with the variable besides

98
00:06:58.810 --> 00:07:01.120
store its back in the editor.

99
00:07:01.120 --> 00:07:06.190
We can tell PHP to output the variable by typing the word echo.

100
00:07:08.470 --> 00:07:12.220
The echo keyword holds a special place in PHP.

101
00:07:12.250 --> 00:07:16.300
It'll tell our machine to output the value written after it.

102
00:07:16.330 --> 00:07:19.270
Let's tell it to output the age variable.

103
00:07:21.420 --> 00:07:26.460
We can reference a variable by typing its name with the dollar sign character.

104
00:07:27.000 --> 00:07:30.350
PHP will search for a variable called age.

105
00:07:30.360 --> 00:07:36.280
If it finds a variable, it will allow us to access the value stored in the variable.

106
00:07:36.300 --> 00:07:39.900
As a result, this line will output the age.

107
00:07:39.930 --> 00:07:42.450
Let's try rechecking the browser.

108
00:07:44.740 --> 00:07:47.320
Our age gets outputted on the page.

109
00:07:47.350 --> 00:07:48.340
Fantastic.

110
00:07:48.340 --> 00:07:51.160
We've created our first variable.

111
00:07:51.190 --> 00:07:57.770
Variables are one of the most commonly used features in the language they allow us to store data.

112
00:07:57.790 --> 00:08:01.240
There's one more thing I want to mention before moving on.

113
00:08:01.450 --> 00:08:04.060
Variables are case sensitive.

114
00:08:04.090 --> 00:08:10.300
Below the first variable, let's create another variable called age assigned to 50.

115
00:08:10.300 --> 00:08:15.010
This time, the variable name will contain all uppercase letters.

116
00:08:17.280 --> 00:08:21.840
As far as PHP is concerned, these are two different variables.

117
00:08:21.840 --> 00:08:23.780
They have different casings.

118
00:08:23.790 --> 00:08:30.240
Therefore, our program will continue to output the value assigned to the first variable.

119
00:08:30.270 --> 00:08:34.320
If we recheck the browser, the first age gets rendered.

120
00:08:36.559 --> 00:08:41.270
If we want to override a variables value, we need to reassign it.

121
00:08:41.299 --> 00:08:45.680
We can reassign a variable by typing the same code as before.

122
00:08:45.710 --> 00:08:50.130
Let's head back to the editor below the second age variable.

123
00:08:50.150 --> 00:08:53.660
We're going to set the age variable to 50.

124
00:08:55.940 --> 00:08:58.200
Pay close attention to the casing.

125
00:08:58.220 --> 00:09:01.370
The variables have the same name and casing.

126
00:09:01.400 --> 00:09:03.200
Let's check out the browser.

127
00:09:05.490 --> 00:09:07.960
This time, the output has changed.

128
00:09:07.980 --> 00:09:09.950
The number of 50 gets rendered.

129
00:09:09.960 --> 00:09:13.910
So that's how we can change the value of a variable.

130
00:09:13.920 --> 00:09:18.670
We have complete freedom over when and how a variable changes.

131
00:09:18.750 --> 00:09:21.690
PBP is very flexible in this regard.

132
00:09:21.690 --> 00:09:25.950
We will continue our journey with PHP in the next lecture.

