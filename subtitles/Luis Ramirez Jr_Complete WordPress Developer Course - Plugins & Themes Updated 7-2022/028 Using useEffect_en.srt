1
00:00:00,120 --> 00:00:05,250
In this lecture, we are going to explore one more function called use effects.

2
00:00:05,280 --> 00:00:07,830
Let's talk about an issue with our project.

3
00:00:07,860 --> 00:00:12,520
JavaScript is not a language that persists across page refreshes.

4
00:00:12,540 --> 00:00:16,440
For example, I'm going to click on the link to increase the counter.

5
00:00:16,470 --> 00:00:19,390
After a few clicks, I'll refresh the page.

6
00:00:19,410 --> 00:00:21,570
The counter has been reset.

7
00:00:21,660 --> 00:00:27,690
Browsers will not store your functions or variables in their memory after the user navigates away from

8
00:00:27,690 --> 00:00:28,440
the page.

9
00:00:28,470 --> 00:00:32,210
This behavior can be beneficial for preventing memory leaks.

10
00:00:32,220 --> 00:00:39,280
However, we may need to persist data after a page refresh in the resource section of this lecture.

11
00:00:39,300 --> 00:00:44,740
I provide a link to a documentation page for an API called Local Storage.

12
00:00:44,760 --> 00:00:48,340
The local storage API is available in most browsers.

13
00:00:48,360 --> 00:00:50,360
It's not specific to react.

14
00:00:50,370 --> 00:00:57,330
The purpose of the local storage API is to store data in the user's browser without an expiration date.

15
00:00:57,360 --> 00:01:02,070
Users can navigate away from a page or completely close their browser.

16
00:01:02,100 --> 00:01:05,220
Our data will continue to be stored in the browser.

17
00:01:05,250 --> 00:01:09,530
For this lecture, we are going to store the counts in the local storage.

18
00:01:09,540 --> 00:01:14,190
If the user refreshes the page, we'll check the local storage for the account.

19
00:01:14,220 --> 00:01:17,910
To achieve this behavior, our data needs to be observed.

20
00:01:17,940 --> 00:01:22,320
It just so happens that React has a function for observing our data.

21
00:01:22,350 --> 00:01:23,750
Let's give it a try.

22
00:01:23,940 --> 00:01:26,600
Head back to the React project.

23
00:01:26,610 --> 00:01:30,420
We are going to continue working with the counter component.

24
00:01:30,450 --> 00:01:36,120
Our first step will be to watch the account variable above the handle click function.

25
00:01:36,120 --> 00:01:40,110
Lets run a function called react dot use effect.

26
00:01:42,220 --> 00:01:45,700
The use effect function can be thought of as a spine.

27
00:01:45,730 --> 00:01:50,870
It's capable of observing our data for changes it has to arguments.

28
00:01:50,890 --> 00:01:55,120
The first argument is a function let's pass in an arrow function.

29
00:01:57,300 --> 00:01:59,520
Regular functions can be passed in.

30
00:01:59,520 --> 00:02:04,190
However, an arrow function is less code to write whenever possible.

31
00:02:04,200 --> 00:02:07,590
I prefer to use arrow functions to write less code.

32
00:02:07,590 --> 00:02:12,590
Inside this function, we have complete freedom over what happens during an update.

33
00:02:12,600 --> 00:02:17,530
Before writing the logic, we must provide the data that should be watched.

34
00:02:17,550 --> 00:02:22,730
The second argument for the use effect function is an array of dependencies.

35
00:02:22,740 --> 00:02:25,980
This array can contain a list of variables.

36
00:02:25,980 --> 00:02:29,790
These variables will be watched by the use effect function.

37
00:02:29,820 --> 00:02:36,840
If a variable from the list gets updated, the function passed into the first argument we'll get executed.

38
00:02:36,840 --> 00:02:42,870
For this example, we are trying to store the count variable in the local storage API.

39
00:02:42,900 --> 00:02:45,870
Let's add the count variable to the array.

40
00:02:48,030 --> 00:02:52,320
Next we can begin updating the storage inside the function.

41
00:02:52,320 --> 00:02:56,910
Run the following function local storage dot set item.

42
00:02:59,160 --> 00:03:06,300
The local storage object is defined by the browser, it's automatically available to us on this object.

43
00:03:06,300 --> 00:03:10,740
We have various methods for interacting with the local storage.

44
00:03:10,920 --> 00:03:15,870
A new value can be added to the storage by calling the set item function.

45
00:03:15,870 --> 00:03:17,610
It has two arguments.

46
00:03:17,610 --> 00:03:20,340
The first argument is a name for the item.

47
00:03:20,340 --> 00:03:22,470
Let's set the name to count.

48
00:03:24,630 --> 00:03:27,960
The second argument is the value that should be stored.

49
00:03:27,960 --> 00:03:30,270
Let's pass in the account variable.

50
00:03:32,500 --> 00:03:37,470
Keep in mind this function will run after the count variable has been updated.

51
00:03:37,480 --> 00:03:40,500
We are guaranteed to store the latest value.

52
00:03:40,510 --> 00:03:43,510
Let's try testing our code on the page.

53
00:03:43,510 --> 00:03:44,560
Click on the link.

54
00:03:44,560 --> 00:03:48,160
As we do so, the count should continue to be functional.

55
00:03:48,160 --> 00:03:51,090
The question is how can we check the storage?

56
00:03:51,100 --> 00:03:55,330
The Chrome Developer Tools has a panel for viewing this information.

57
00:03:55,330 --> 00:03:57,940
Open the Developer Tools for your browser.

58
00:03:57,940 --> 00:04:04,390
In Chrome, there's a panel called Application Browsers have various APIs for storing data.

59
00:04:04,390 --> 00:04:08,020
Local storage is considered the simplest API.

60
00:04:08,050 --> 00:04:12,490
On the sidebar, we can find a section for the local storage feature.

61
00:04:12,490 --> 00:04:16,899
If we were to click on our app's URL, a table should appear on the right.

62
00:04:16,990 --> 00:04:19,779
Listed in the table is the counts item.

63
00:04:19,779 --> 00:04:21,490
So far so good.

64
00:04:21,490 --> 00:04:25,960
The next step is to check if the account item exists in the storage.

65
00:04:25,960 --> 00:04:32,770
If it does, we should set the initial value of the account state to the account from the local storage.

66
00:04:32,770 --> 00:04:39,460
Once again, we can utilize the use effect function to achieve this behavior back in our scripts.

67
00:04:39,460 --> 00:04:44,290
Let's add the use effect function above the other use effect function.

68
00:04:46,470 --> 00:04:49,840
There's another cool feature of the use effect function.

69
00:04:49,860 --> 00:04:54,480
This function can run once if the array of dependencies is empty.

70
00:04:54,510 --> 00:04:58,500
Let's take a look by passing in an empty function and array.

71
00:05:00,860 --> 00:05:03,230
During the first render of a component.

72
00:05:03,230 --> 00:05:09,390
If the use effect function does not have an array of dependencies, it will be executed immediately.

73
00:05:09,410 --> 00:05:14,540
This can be a great way to set up a component after it has been rendered on the page.

74
00:05:14,570 --> 00:05:20,220
It's the perfect opportunity to check the local storage inside a conditional statement.

75
00:05:20,240 --> 00:05:24,860
We're going to check the local storage dot get item function.

76
00:05:27,050 --> 00:05:31,480
The gift item function will return an item from the local storage.

77
00:05:31,490 --> 00:05:35,300
We can specify the item by passing in the name as a string.

78
00:05:35,300 --> 00:05:37,790
Let's try grabbing the count item.

79
00:05:40,050 --> 00:05:45,110
Before updating the state, we should check the storage for the existence of the accounts.

80
00:05:45,120 --> 00:05:51,520
If the user is visiting our site for the first time, this item will not be available in their storage.

81
00:05:51,540 --> 00:05:56,580
It's always considered good practice to check the storage before grabbing an item.

82
00:05:56,760 --> 00:06:00,690
The get item function will return the value or null.

83
00:06:00,690 --> 00:06:05,400
As we learned before, a conditional statement should have a boolean value.

84
00:06:05,430 --> 00:06:11,970
However, behind the scenes, JavaScript will convert your values to booleans for conditions.

85
00:06:12,000 --> 00:06:18,540
This behavior can be dangerous to play with generally, as long as a number is greater than one or a

86
00:06:18,540 --> 00:06:25,650
string has one character, the value will be converted to true null values are converted to false.

87
00:06:25,980 --> 00:06:32,510
We can safely assume that the block of code will execute if a value is found inside the block of code,

88
00:06:32,520 --> 00:06:34,780
let's run the set count function.

89
00:06:34,800 --> 00:06:37,480
The name of the item will be called counts.

90
00:06:37,500 --> 00:06:42,330
The value will be the local storage dot get item count function.

91
00:06:44,520 --> 00:06:45,900
We're not finished yet.

92
00:06:45,930 --> 00:06:49,770
Local storage may store a different data type of our data.

93
00:06:49,800 --> 00:06:55,200
It may be possible that our number has been converted to a string for extra assurance.

94
00:06:55,200 --> 00:07:00,060
Let's wrap the get item function with another function called parse int.

95
00:07:01,610 --> 00:07:08,030
The parse and function is defined by the JavaScript language, it will convert a value to an integer.

96
00:07:08,060 --> 00:07:11,360
I run into problems with the local storage API.

97
00:07:11,360 --> 00:07:14,900
I always like to convert the data type before using it.

98
00:07:14,930 --> 00:07:18,140
Otherwise we may get unpredictable behavior.

99
00:07:18,140 --> 00:07:20,600
Let's try testing our application.

100
00:07:20,630 --> 00:07:24,920
If we refresh the page, the count on the page should persist.

101
00:07:24,920 --> 00:07:27,740
We can refresh as many times as we'd like.

102
00:07:27,740 --> 00:07:30,560
Our application will keep track of the count.

103
00:07:30,590 --> 00:07:31,220
Awesome.

104
00:07:31,220 --> 00:07:33,740
We've successfully created a counter.

105
00:07:33,770 --> 00:07:36,890
This is the final React feature that will be learning.

106
00:07:36,890 --> 00:07:40,430
Future topics will be discussed as we explore Gutenberg.

107
00:07:40,460 --> 00:07:45,770
There are some additional topics that will need to get into before heading to the next section.

108
00:07:45,770 --> 00:07:47,150
Let's get into them.

