1
00:00:00,180 --> 00:00:06,830
In this lecture, we are going to explore a feature called Functions Just like variables.

2
00:00:06,840 --> 00:00:09,630
Functions are a common feature in PHP.

3
00:00:09,660 --> 00:00:12,090
They are heavily used in WordPress.

4
00:00:12,120 --> 00:00:17,940
A function is a block of code that can perform a specific task to better understand.

5
00:00:17,970 --> 00:00:20,790
Let's look at an example in our file.

6
00:00:20,790 --> 00:00:24,510
Let's clear the code inside the PHP tags.

7
00:00:26,610 --> 00:00:30,270
Next, let's echo a welcome message to the user.

8
00:00:32,439 --> 00:00:35,830
Previously we would store a string in a variable.

9
00:00:35,830 --> 00:00:40,920
It's utterly acceptable to output a value rather than a variable.

10
00:00:40,930 --> 00:00:46,290
If you don't need to re-use a value, you may want to skip storing it in a variable.

11
00:00:46,300 --> 00:00:49,420
Let's shift our focus back to functions.

12
00:00:49,420 --> 00:00:52,200
The code we've written is not reusable.

13
00:00:52,210 --> 00:00:58,570
For example, let's say we want to output this message multiple times to take it a step further.

14
00:00:58,570 --> 00:01:02,350
We may want to output this message in various files.

15
00:01:02,380 --> 00:01:07,510
outPutting the same message would require copying and pasting the same code.

16
00:01:07,510 --> 00:01:12,310
At first glance, that may seem fine, but it could lead to issues.

17
00:01:12,310 --> 00:01:14,620
What if we want to change the message?

18
00:01:14,620 --> 00:01:18,790
We would need to search for this line of code in various files.

19
00:01:18,790 --> 00:01:21,400
Each line would need to be updated.

20
00:01:21,400 --> 00:01:23,640
It's inconvenient and tedious.

21
00:01:23,650 --> 00:01:29,890
Ideally, we should be able to update this line once and everything would reflect the update.

22
00:01:29,890 --> 00:01:32,740
Functions are the solution to our dilemma.

23
00:01:32,770 --> 00:01:36,970
Above this line of code, let's write the function keyword.

24
00:01:39,120 --> 00:01:42,210
Functions are defined with the function keyword.

25
00:01:42,240 --> 00:01:47,100
After typing this keyword, we can add a space followed by the function's name.

26
00:01:47,100 --> 00:01:50,340
We can call our function whatever we want.

27
00:01:50,370 --> 00:01:53,940
The naming rules for variables apply to functions.

28
00:01:53,940 --> 00:01:56,250
Let's call our function greeting.

29
00:01:58,410 --> 00:02:02,100
Next, let's add parentheses and curly brackets.

30
00:02:04,190 --> 00:02:11,060
The parentheses can contain a list of arguments and a future lecture, we will revisit the topic of

31
00:02:11,060 --> 00:02:12,000
arguments.

32
00:02:12,020 --> 00:02:15,560
For now, we can safely ignore the parentheses.

33
00:02:15,560 --> 00:02:19,760
As for the curly brackets, they contain the body of the function.

34
00:02:19,760 --> 00:02:23,830
Inside these curly brackets, we can write additional code.

35
00:02:23,840 --> 00:02:27,740
Let's move the echo statement to inside the function.

36
00:02:30,030 --> 00:02:37,170
The purpose of a function is to outsource reusable code into a centralized location by default.

37
00:02:37,200 --> 00:02:39,980
Code inside functions is not executed.

38
00:02:39,990 --> 00:02:44,820
If we were to view the browser, the message would not get rendered on the page.

39
00:02:44,970 --> 00:02:48,150
Functions must be invoked after defining them.

40
00:02:48,150 --> 00:02:49,590
Let's give that a try.

41
00:02:49,620 --> 00:02:55,710
After the curly brackets, let's write the name of the function followed by a pair of parentheses.

42
00:02:57,830 --> 00:03:00,530
What we're doing is called calling a function.

43
00:03:00,530 --> 00:03:06,320
By calling a function code written inside a functions curly brackets is executed.

44
00:03:06,350 --> 00:03:08,150
Let's check out the browser.

45
00:03:10,350 --> 00:03:12,750
The message from the function gets rendered.

46
00:03:12,750 --> 00:03:16,500
So far, this feature doesn't seem like anything special.

47
00:03:16,530 --> 00:03:18,630
What's the point of using a function?

48
00:03:18,630 --> 00:03:20,740
Functions are reusable.

49
00:03:20,760 --> 00:03:23,990
They can be called multiple times in our application.

50
00:03:24,000 --> 00:03:25,480
Let's try that out.

51
00:03:25,500 --> 00:03:27,170
Switch back to the editor.

52
00:03:27,180 --> 00:03:31,140
Let's try calling the greeting function a second time.

53
00:03:33,450 --> 00:03:38,820
By calling the greeting function twice the code inside the function runs twice.

54
00:03:38,880 --> 00:03:43,530
Imagine if our function had 20 lines of code without functions.

55
00:03:43,530 --> 00:03:47,110
We would be copying and pasting the same block of code.

56
00:03:47,130 --> 00:03:48,570
That's not efficient.

57
00:03:49,080 --> 00:03:52,410
PHP introduces functions for reusing code.

58
00:03:52,410 --> 00:03:57,150
Whenever we want to reuse code, we can call it with a single line of code.

59
00:03:57,180 --> 00:03:59,550
Let's switch over to the browser.

60
00:04:01,690 --> 00:04:05,170
As you can see, the same message gets rendered.

61
00:04:05,200 --> 00:04:08,410
Overall, functions provide convenience.

62
00:04:08,440 --> 00:04:14,800
Our example is simple, but there aren't rules for how many lines of code can be written in a function.

63
00:04:14,800 --> 00:04:18,519
We can have one line of code or 20 lines of code.

64
00:04:18,790 --> 00:04:21,260
There's one more feature I want to show you.

65
00:04:21,279 --> 00:04:23,320
Let's head back to the editor.

66
00:04:23,350 --> 00:04:27,640
Earlier, we ignored the parentheses of a function definition.

67
00:04:27,670 --> 00:04:33,820
Now that we understand the basics of a function, let's take a moment to discuss this portion of the

68
00:04:33,820 --> 00:04:34,790
syntax.

69
00:04:34,810 --> 00:04:38,850
The parentheses store values passed on to the function.

70
00:04:38,860 --> 00:04:42,730
At the moment, our function will output the same message.

71
00:04:42,730 --> 00:04:44,650
It's not customizable.

72
00:04:44,950 --> 00:04:49,560
In some cases, we may want to modify a line of code in our function.

73
00:04:49,570 --> 00:04:55,450
For example, one, if we're going to output different messages from our function, would we need to

74
00:04:55,450 --> 00:04:58,910
define multiple functions that would be inefficient?

75
00:04:58,930 --> 00:05:03,040
We can make our function flexible by adding parameters.

76
00:05:03,160 --> 00:05:06,080
Parameters are variables for functions.

77
00:05:06,100 --> 00:05:13,240
These variables can be configured during the functions execution inside the parentheses of the function.

78
00:05:13,240 --> 00:05:15,940
Add a variable called message.

79
00:05:18,210 --> 00:05:23,730
Variables can be added to a function by defining them inside the parentheses.

80
00:05:23,760 --> 00:05:28,950
Unlike before, we don't have to initialize these variables with values.

81
00:05:28,950 --> 00:05:36,270
We can configure the value of a variable by updating our function calls inside the parentheses of the

82
00:05:36,270 --> 00:05:39,630
first function, we will add a different greeting.

83
00:05:41,990 --> 00:05:44,660
Notice how I'm not defining a variable?

84
00:05:44,690 --> 00:05:50,970
The value we pass into the function will be the value of the variable in the functions parameters.

85
00:05:50,990 --> 00:05:54,530
Let's add a different greeting to the second function call.

86
00:05:56,820 --> 00:06:02,790
By adding parameters, we can pass data to a function to modify its behavior.

87
00:06:02,820 --> 00:06:07,030
In this example, we are trying to output different messages.

88
00:06:07,050 --> 00:06:10,320
Let's use our variable inside the function.

89
00:06:10,320 --> 00:06:14,460
Let's replace the current value with the message variable.

90
00:06:16,660 --> 00:06:19,150
Lastly, let's view the browser.

91
00:06:21,490 --> 00:06:22,210
Awesome.

92
00:06:22,210 --> 00:06:26,140
We've got a flexible function to output various messages.

93
00:06:26,170 --> 00:06:31,350
Parameters are an optional feature to pass on values to a function.

94
00:06:31,360 --> 00:06:36,190
There's one more thing I want to mention before moving on to the next lecture.

95
00:06:38,380 --> 00:06:45,040
There's another word you may hear when discussing a function's parameters, which is the word arguments.

96
00:06:45,040 --> 00:06:50,150
The words parameter and argument can be interchangeable terms.

97
00:06:50,170 --> 00:06:52,300
However, there is a difference.

98
00:06:52,330 --> 00:07:00,160
A parameter refers to the variable defined in a functions declaration, whereas an argument refers to

99
00:07:00,160 --> 00:07:02,140
the value of the variable.

100
00:07:02,320 --> 00:07:06,590
Most developers will throw around these words interchangeably.

101
00:07:06,610 --> 00:07:08,260
It isn't the end of the world.

102
00:07:08,260 --> 00:07:12,850
If your phrasing is incorrect, no one's going to scold you for doing so.

103
00:07:12,880 --> 00:07:17,050
As long as you understand there's a difference, you should be good to go.

104
00:07:17,080 --> 00:07:19,150
Let's move on from functions.

105
00:07:19,150 --> 00:07:23,170
In the following lecture, we'll start talking about arrays.

