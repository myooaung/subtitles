WEBVTT
1
00:00:00.330 --> 00:00:05.750
In this lecture, we are going to modify the query generated by the Post's end endpoint.

2
00:00:05.760 --> 00:00:11.280
As we learned the rest API does not sort the posts by your recipes rating.

3
00:00:11.280 --> 00:00:17.370
The query can be modified with a filter hook to get started, open the main plugin file.

4
00:00:19.480 --> 00:00:25.750
At the bottom of the hook section and a filter hook called Rest Recipe Query.

5
00:00:27.850 --> 00:00:29.170
The hook we're using.

6
00:00:29.170 --> 00:00:30.480
It's a dynamic hook.

7
00:00:30.490 --> 00:00:33.690
The word in the middle of the hook name is a placeholder.

8
00:00:33.700 --> 00:00:38.170
We can replace this portion of the name with the name of the post type.

9
00:00:38.170 --> 00:00:43.120
Next, let's set the function name to up rest recipe query.

10
00:00:45.290 --> 00:00:50.860
Throughout this course, we've been sticking to the first two parameters of the hook functions.

11
00:00:50.870 --> 00:00:53.360
There's a third and fourth parameter.

12
00:00:53.360 --> 00:00:55.370
These parameters are optional.

13
00:00:55.370 --> 00:01:00.200
In most cases, hooks will provide at least one value to our functions.

14
00:01:00.200 --> 00:01:03.350
However, a hook can provide multiple values.

15
00:01:03.350 --> 00:01:08.420
The rest query hook is an example of a hook with multiple values.

16
00:01:08.420 --> 00:01:14.540
By default, the add action and add filter functions will limit hooks to one value.

17
00:01:14.570 --> 00:01:19.970
We must explicitly instruct WordPress to allow for multiple values to be sent.

18
00:01:20.000 --> 00:01:23.360
We can configure this option with the fourth parameter.

19
00:01:23.360 --> 00:01:25.850
Let's set the third parameter to ten.

20
00:01:26.060 --> 00:01:29.750
The third parameter configures the priority of a function.

21
00:01:29.750 --> 00:01:32.600
Multiple functions can run during a hook.

22
00:01:32.600 --> 00:01:36.320
The default priority assigned to a function is ten.

23
00:01:36.350 --> 00:01:39.170
The lower the number, the higher the priority.

24
00:01:39.170 --> 00:01:42.500
Let's leave the priority at its default value.

25
00:01:42.530 --> 00:01:45.550
Our focus will be on the fourth arguments.

26
00:01:45.560 --> 00:01:49.910
The fourth argument is the number of arguments accepted by our function.

27
00:01:49.910 --> 00:01:52.370
Let's set this argument to two.

28
00:01:52.400 --> 00:01:55.730
Typically, our function would receive one value.

29
00:01:55.730 --> 00:02:01.460
By setting this parameter to two, our function will be able to accept two values.

30
00:02:01.460 --> 00:02:07.700
Let's define our function inside the includes slash rest API folder.

31
00:02:07.730 --> 00:02:12.080
Create a file called recipe query mod php.

32
00:02:14.370 --> 00:02:15.740
Inside this file.

33
00:02:15.750 --> 00:02:19.260
Define the up rest recipe query function.

34
00:02:21.410 --> 00:02:26.870
In the argument list and two arguments called arguments and request.

35
00:02:28.980 --> 00:02:35.490
The arguments argument will contain information on the query, whereas the request argument will contain

36
00:02:35.490 --> 00:02:38.490
information on the request sent by the client.

37
00:02:38.520 --> 00:02:41.460
Both arguments will be helpful in our function.

38
00:02:41.460 --> 00:02:46.800
Before we start modifying the query, let's check out a class called WP Query.

39
00:02:46.800 --> 00:02:51.510
In the resource section of this lecture, I provide a link to this class.

40
00:02:53.570 --> 00:02:59.330
Behind the scenes, WordPress uses this class to query the database for grabbing posts.

41
00:02:59.360 --> 00:03:03.920
If you scroll through the documentation, you'll get the feeling that it never ends.

42
00:03:03.950 --> 00:03:07.150
It's one of the most documented classes in WordPress.

43
00:03:07.160 --> 00:03:12.980
This class gives us the power to sort and filter posts in the database by different parameters.

44
00:03:12.980 --> 00:03:15.830
We can grab posts by specific authors.

45
00:03:15.830 --> 00:03:21.200
Taxonomies and metadata posts can be sorted by their title or date.

46
00:03:21.290 --> 00:03:25.880
The results of this class can be modified by an argument on the sidebar.

47
00:03:25.910 --> 00:03:29.750
Click on the order and order by parameters link.

48
00:03:31.910 --> 00:03:37.200
This section of the documentation provides information on how to sort post data.

49
00:03:37.220 --> 00:03:40.910
The order by parameter can accept various values.

50
00:03:40.910 --> 00:03:45.440
The value we're interested in is called meta value number.

51
00:03:47.740 --> 00:03:54.100
According to the documentation, setting the order by parameter to this value will assert the data by

52
00:03:54.100 --> 00:03:55.460
a metadata field.

53
00:03:55.480 --> 00:03:58.600
This is exactly what we are hoping to accomplish.

54
00:03:58.600 --> 00:04:04.930
Reading further, the documentation states that another parameter must exist within the query called

55
00:04:04.930 --> 00:04:05.800
meta key.

56
00:04:05.830 --> 00:04:10.360
This parameter will set the metadata field to sort the post SPI.

57
00:04:10.390 --> 00:04:13.030
Let's apply these parameters to the query.

58
00:04:13.060 --> 00:04:14.650
Head back to the editor.

59
00:04:16.680 --> 00:04:24.150
Inside the function lets create a variable called order by the value for this variable will be the request

60
00:04:24.150 --> 00:04:25.380
parameter function.

61
00:04:27.470 --> 00:04:30.500
Sorting posts by metadata should be optional.

62
00:04:30.500 --> 00:04:35.600
Whenever you're modifying a query, the default behavior must be left intact.

63
00:04:35.600 --> 00:04:42.200
Before modifying the query, let's check the request for a parameter called Order by rating.

64
00:04:43.610 --> 00:04:49.610
If this parameter exists on the request, we can safely assume that the post should be sorted by their

65
00:04:49.610 --> 00:04:50.210
rating.

66
00:04:50.240 --> 00:04:53.300
This is a custom parameter created by us.

67
00:04:53.330 --> 00:04:57.080
It's not a parameter that exists within the current API.

68
00:04:57.110 --> 00:05:02.960
After creating this variable, create a conditional statement with the following condition.

69
00:05:02.960 --> 00:05:05.600
Is set order by rating.

70
00:05:07.760 --> 00:05:09.920
Inside the body of the condition.

71
00:05:09.920 --> 00:05:12.730
Let's modify the arguments argument.

72
00:05:12.740 --> 00:05:18.590
This variable is an array of settings that will be passed on to the WP query class.

73
00:05:18.770 --> 00:05:24.830
The parameters listed on the documentation page for this class can be applied to this array.

74
00:05:24.830 --> 00:05:28.670
Let's set the order by key to meta value num.

75
00:05:30.760 --> 00:05:35.200
Next, let's set the meta key parameter to recipe rating.

76
00:05:37.320 --> 00:05:42.090
The key parameter will set the metadata key to sort the post spy.

77
00:05:42.120 --> 00:05:46.140
WordPress will query the database for a list of recipes.

78
00:05:46.140 --> 00:05:49.530
The order of the recipes will be sorted by their rating.

79
00:05:49.530 --> 00:05:54.720
The last step is to return the arguments argument from the function.

80
00:05:54.720 --> 00:05:58.470
Let's return this value after the conditional statements.

81
00:06:00.730 --> 00:06:02.050
Our function is ready.

82
00:06:02.050 --> 00:06:05.260
Let's try testing our end point with Postman.

83
00:06:05.260 --> 00:06:11.950
I'm going to continue working with the request created in the previous lecture under the parameter section.

84
00:06:11.950 --> 00:06:14.620
Add the order by rating parameter.

85
00:06:16.810 --> 00:06:21.580
This parameter does not need a value as long as it's added as a parameter.

86
00:06:21.610 --> 00:06:23.910
Our function will modify the query.

87
00:06:23.920 --> 00:06:29.740
In addition, let's change the direction of the order at a parameter called order.

88
00:06:32.120 --> 00:06:36.310
The order parameter can be sent to ascending or descending.

89
00:06:36.320 --> 00:06:40.940
In our case we are trying to order the posts in descending order.

90
00:06:40.940 --> 00:06:43.670
Set this parameter to descending.

91
00:06:45.860 --> 00:06:48.620
Lastly, let's send the request.

92
00:06:50.700 --> 00:06:52.560
In the body of the response.

93
00:06:52.560 --> 00:06:55.050
The order of posts has changed.

94
00:06:55.080 --> 00:06:57.900
The first post is called Recipe one.

95
00:07:00.050 --> 00:07:02.150
Followed by recipe three.

96
00:07:04.250 --> 00:07:07.670
Lastly, we have a post called Recipe two.

97
00:07:07.700 --> 00:07:09.270
This is the correct order.

98
00:07:09.290 --> 00:07:13.140
We've successfully ordered the posts in the API request.

99
00:07:13.160 --> 00:07:17.410
We can start sending this request from our block in the next lecture.

100
00:07:17.420 --> 00:07:20.840
Let's update our block to grab these posts.

