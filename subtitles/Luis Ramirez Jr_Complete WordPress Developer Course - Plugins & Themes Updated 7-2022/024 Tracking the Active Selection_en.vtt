WEBVTT
1
00:00:00.090 --> 00:00:05.710
In this lecture, we are going to begin working on a form for modifying social media links.

2
00:00:05.730 --> 00:00:09.620
Before we do, we must track the active selection for a link.

3
00:00:09.630 --> 00:00:13.470
WordPress keeps track of an active selection for blocks.

4
00:00:13.470 --> 00:00:16.590
However, it does not track specific elements.

5
00:00:16.590 --> 00:00:23.400
We must replicate this feature for links, otherwise we don't know what social media link to modify.

6
00:00:23.580 --> 00:00:26.850
Luckily, it's easy to keep track of this information.

7
00:00:26.850 --> 00:00:30.090
We can use the state to track an active link.

8
00:00:30.120 --> 00:00:32.400
Let's get started in your editor.

9
00:00:32.400 --> 00:00:34.860
Open the edit JS file.

10
00:00:37.070 --> 00:00:39.500
Next before the return statement.

11
00:00:39.500 --> 00:00:43.760
Call the U.S state function with a null value.

12
00:00:45.830 --> 00:00:48.190
Initially, none of the links are active.

13
00:00:48.200 --> 00:00:52.610
We are going to hide the form from the user until they've selected a link.

14
00:00:52.640 --> 00:01:00.080
Next, let's store the states values in two variables called active social link and set active social

15
00:01:00.080 --> 00:01:00.650
link.

16
00:01:02.820 --> 00:01:08.130
After storing this information, we can begin updating our template to use this state.

17
00:01:08.160 --> 00:01:12.400
First, let's listen to an event on the social media links.

18
00:01:12.420 --> 00:01:18.500
If a user clicks on a link, we should set the current state to the index of the link clicked.

19
00:01:18.510 --> 00:01:22.380
Scroll to the loop for the links on the anchor element.

20
00:01:22.380 --> 00:01:24.210
Add the on click event.

21
00:01:26.410 --> 00:01:30.280
Passing an arrow function that accepts the event argument.

22
00:01:32.400 --> 00:01:33.780
Before doing anything.

23
00:01:33.780 --> 00:01:40.530
Let's call the event dot prevent default function to prevent the default behavior of clicking on a link.

24
00:01:42.720 --> 00:01:47.970
Next, let's call the set active social link function to update the state.

25
00:01:48.000 --> 00:01:50.460
The value will be the following code.

26
00:01:50.460 --> 00:01:57.750
Active social link equals equals equals index question mark null colon index.

27
00:02:01.690 --> 00:02:05.030
We are using a ternary operator to set the value.

28
00:02:05.050 --> 00:02:06.910
The form should be tolerable.

29
00:02:06.910 --> 00:02:10.729
Clients may not want to see the form after modifying the link.

30
00:02:10.750 --> 00:02:13.610
They can click on a link for the form to appear.

31
00:02:13.630 --> 00:02:17.440
If they click on the same link again, the form should be hidden.

32
00:02:17.470 --> 00:02:23.830
In this example, we are checking the current state of the variable by comparing it to the current index.

33
00:02:23.860 --> 00:02:30.190
If these values are equal, the state will be set to null, thus causing the form to be hidden.

34
00:02:30.220 --> 00:02:34.180
Otherwise, the state will be set to the current index.

35
00:02:34.180 --> 00:02:41.830
By setting it to the current index will know exactly which link the user wants to modify after adding

36
00:02:41.830 --> 00:02:42.520
this event.

37
00:02:42.550 --> 00:02:44.820
Let's apply a class to the link.

38
00:02:44.830 --> 00:02:47.950
The user may forget which link they're modifying.

39
00:02:47.980 --> 00:02:50.890
I've created a class to highlight the icon.

40
00:02:50.920 --> 00:02:55.430
You can find this class from the CSS file after the event.

41
00:02:55.450 --> 00:02:57.790
Add the class name attributes.

42
00:02:59.950 --> 00:03:07.570
The value for this attribute will be the following active social link equals equals equals index and

43
00:03:07.570 --> 00:03:10.060
is selected is active.

44
00:03:14.590 --> 00:03:16.790
We are performing two conditions.

45
00:03:16.810 --> 00:03:21.850
Firstly, we're checking if the link is selected by comparing the state with the index.

46
00:03:21.880 --> 00:03:26.600
Secondly, we're checking if the block is selected in the Gutenberg Editor.

47
00:03:26.620 --> 00:03:31.570
If the user is not modifying the current block, the link should not be highlighted.

48
00:03:31.600 --> 00:03:36.460
If both conditions are true, Kathy, we're applying a class called is active.

49
00:03:36.490 --> 00:03:39.760
Otherwise the class will be an empty string.

50
00:03:41.990 --> 00:03:46.360
The next step is to set the active link to newly added links.

51
00:03:46.370 --> 00:03:50.980
If clients add a new link to a team member, they may want to modify the link.

52
00:03:50.990 --> 00:03:53.270
We should set the state to the new link.

53
00:03:53.270 --> 00:03:56.480
Scroll to the plus button on the anchor element.

54
00:03:56.480 --> 00:04:01.220
Let's modify the function for the on click event at the bottom of the function.

55
00:04:01.220 --> 00:04:06.470
Call the set active social link with the social handles dot length property.

56
00:04:08.620 --> 00:04:12.340
Items added to the array will always appear at the end of the array.

57
00:04:12.370 --> 00:04:16.470
We can safely assume the last item in the array is the new line.

58
00:04:16.480 --> 00:04:21.010
Therefore, the length property will point to the last item in the array.

59
00:04:21.040 --> 00:04:22.370
The state is ready.

60
00:04:22.390 --> 00:04:28.240
The last step is to render a form below the div tag with the social links class.

61
00:04:28.240 --> 00:04:29.470
Add an expression.

62
00:04:35.920 --> 00:04:43.570
The expression will be the following is selected and active social link exclamation point equals equals

63
00:04:43.570 --> 00:04:44.950
null and.

64
00:04:47.000 --> 00:04:48.920
We have two conditions.

65
00:04:48.950 --> 00:04:52.360
The first condition, we'll check the block selection status.

66
00:04:52.370 --> 00:04:55.670
If the lock is not selected, the form should be hidden.

67
00:04:55.700 --> 00:05:01.450
The second condition will check the active social link state for a non null value.

68
00:05:01.460 --> 00:05:07.190
If the state has a valid value, we can display the form after passing both conditions.

69
00:05:07.190 --> 00:05:13.010
Let's render a div tag with a class called team member social edit container.

70
00:05:18.260 --> 00:05:22.790
The styles for this class can be found in the CSS files for this block.

71
00:05:22.820 --> 00:05:25.150
Feel free to check out these styles.

72
00:05:25.160 --> 00:05:28.030
We're finished with tracking the active selection.

73
00:05:28.040 --> 00:05:31.000
Let's try checking our work in the browser.

74
00:05:31.010 --> 00:05:32.540
Refresh the page.

75
00:05:34.620 --> 00:05:37.350
Add the team members group block.

76
00:05:39.370 --> 00:05:41.770
Next, try clicking on the links.

77
00:05:41.770 --> 00:05:45.540
As you do so a grey box will appear below the links.

78
00:05:45.550 --> 00:05:49.760
At the moment we do not have input fields for modifying the link.

79
00:05:49.780 --> 00:05:51.220
That's perfectly fine.

80
00:05:51.220 --> 00:05:55.390
In the next lecture we will add input fields for each link.

81
00:05:55.390 --> 00:05:58.080
As long as a box appears, you're good to go.

82
00:05:58.090 --> 00:06:02.020
You can click on the same link for the box to disappear.

83
00:06:02.200 --> 00:06:05.980
If you add a new link, the new link will become active.

84
00:06:05.980 --> 00:06:08.110
Everything is behaving perfectly.

85
00:06:08.110 --> 00:06:10.420
Let's begin adding input fields.

86
00:06:10.420 --> 00:06:12.640
I'll see you in the next lecture.

