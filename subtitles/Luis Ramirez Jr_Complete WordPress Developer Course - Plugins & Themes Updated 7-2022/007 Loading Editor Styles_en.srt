1
00:00:00,090 --> 00:00:03,600
In this lecture, we are going to load our styles in the editor.

2
00:00:03,600 --> 00:00:08,160
So far we've been switching back and forth between the editor and front end.

3
00:00:08,189 --> 00:00:14,340
The purpose of the Gutenberg editor is to let clients visualize their theme during the design process.

4
00:00:14,340 --> 00:00:17,930
What is shown in the editor should be reflected on the front.

5
00:00:17,940 --> 00:00:21,120
In some cases, this may not always be possible.

6
00:00:21,150 --> 00:00:24,750
However, we should try to get as close as possible.

7
00:00:24,900 --> 00:00:29,100
In the previous lecture, we added classes for centering the blocks.

8
00:00:29,100 --> 00:00:34,920
At the moment, we're not able to see the effect of these classes until switching over to the front

9
00:00:34,920 --> 00:00:35,370
end.

10
00:00:35,370 --> 00:00:40,980
WordPress provides a solution for loading our theme's CSS files into the editor.

11
00:00:40,980 --> 00:00:46,050
We should implement this solution for the fastest possible editing experience.

12
00:00:46,050 --> 00:00:48,840
It's going to make the design process faster.

13
00:00:48,990 --> 00:00:54,360
Let's get started in your text editor open the functions function's PHP file.

14
00:00:56,480 --> 00:01:02,280
The process for loading files in a Gutenberg editor is different from loading files on the front end.

15
00:01:02,300 --> 00:01:06,800
We need to use an entirely different set of functions and hooks.

16
00:01:06,800 --> 00:01:12,380
Under the Hooks section, we are going to add an action hook called After Setup Theme.

17
00:01:14,660 --> 00:01:19,770
The after set of theme hook is an event that runs after our theme has been loaded.

18
00:01:19,790 --> 00:01:22,190
It's one of the earliest hooks available.

19
00:01:22,220 --> 00:01:25,940
Loading styles in the editor must be performed in this hook.

20
00:01:25,970 --> 00:01:29,350
WordPress recommends this hook for setting up your theme.

21
00:01:29,360 --> 00:01:33,320
The name of your function is going to be called You Set Up Theme.

22
00:01:35,750 --> 00:01:38,230
The next step is to define this function.

23
00:01:38,240 --> 00:01:43,390
Let's create a file inside the includes folder called setup PHP.

24
00:01:45,760 --> 00:01:49,960
Inside this function defined the you setup theme function.

25
00:01:52,120 --> 00:01:56,600
Lastly, we need to include this file back in the functions file.

26
00:01:56,620 --> 00:02:01,250
Call the include function with the get theme file path function.

27
00:02:01,270 --> 00:02:06,280
The path to the file is includes slash setup php.

28
00:02:08,509 --> 00:02:12,190
We can start loading our files back in the setup file.

29
00:02:12,200 --> 00:02:14,210
We're going to run two functions.

30
00:02:14,210 --> 00:02:18,170
First, we need to call the ad theme support function.

31
00:02:20,330 --> 00:02:23,470
WordPress has various features we can leverage.

32
00:02:23,480 --> 00:02:28,370
One of these features is allowing themes to add styles to the Gutenberg editor.

33
00:02:28,370 --> 00:02:32,900
Before adding styles, we need to tell WordPress that we intend to do so.

34
00:02:32,930 --> 00:02:37,010
The ADD theme support function allows us to enable this feature.

35
00:02:37,100 --> 00:02:41,410
This function has one argument which is the feature we'd like to enable.

36
00:02:41,420 --> 00:02:44,660
The name of the feature is called Editor Styles.

37
00:02:47,260 --> 00:02:52,960
By enabling this feature, we can begin loading CSS files in the Gutenberg Editor.

38
00:02:52,990 --> 00:02:57,040
Afterward, lets run a function called Add Editor style.

39
00:02:59,240 --> 00:03:05,020
Unlike the front end, we do not need to register or queue files for the Gutenberg editor.

40
00:03:05,030 --> 00:03:10,900
The ADD Editor style function is a shortcut for loading CSS files into the editor.

41
00:03:10,910 --> 00:03:13,880
We can pass in a path to a single file.

42
00:03:13,910 --> 00:03:17,970
However, there is an alternative solution for calling this function.

43
00:03:17,990 --> 00:03:21,730
An array can be passed in to load multiple files.

44
00:03:21,740 --> 00:03:25,980
For our purposes, passing in an array is the best solution.

45
00:03:26,000 --> 00:03:28,850
We have three files that need to be loaded.

46
00:03:28,880 --> 00:03:34,410
These are the same files that were registered and include in the ndk php file.

47
00:03:34,430 --> 00:03:35,960
Let's open this file.

48
00:03:38,130 --> 00:03:43,870
One by one we are going to copy the paths from the WP Register style function.

49
00:03:43,890 --> 00:03:48,330
They will be pasted into the array of the add editor style function.

50
00:03:58,210 --> 00:04:03,670
The ad editor style function is smarter than the register and in queue functions.

51
00:04:03,700 --> 00:04:06,830
It can handle absolute and local paths.

52
00:04:06,850 --> 00:04:12,910
If the path is a valid HTTP URL, the style will get loaded through the URL.

53
00:04:12,940 --> 00:04:18,410
Otherwise, the add editor style function will assume the file can be found locally.

54
00:04:18,430 --> 00:04:22,800
It'll automatically generate a full path to our themes folder.

55
00:04:22,810 --> 00:04:27,160
Therefore, we can pass in a path relative to the theme folder.

56
00:04:27,190 --> 00:04:31,270
The get theme file URI function is not necessary.

57
00:04:31,390 --> 00:04:37,330
In total, there should be three files one for the Google font, another for the icons.

58
00:04:37,330 --> 00:04:40,840
And lastly, the index CSS file.

59
00:04:40,870 --> 00:04:42,790
We're ready to test our code.

60
00:04:42,820 --> 00:04:45,280
Save your changes afterward.

61
00:04:45,280 --> 00:04:47,500
Refresh the page in the browser.

62
00:04:50,100 --> 00:04:52,860
The paragraph block should have moved slightly.

63
00:04:52,890 --> 00:04:56,120
It may not be easy to see because of the limited space.

64
00:04:56,130 --> 00:04:58,680
There is a better way to test the changes.

65
00:04:58,680 --> 00:05:02,060
Click on the HTML block on the toolbar.

66
00:05:02,070 --> 00:05:06,960
There's an option to preview the HTML in the editor if we click on it.

67
00:05:06,990 --> 00:05:10,740
The preview should look similar to the header on the front end.

68
00:05:10,890 --> 00:05:15,550
There are some inconsistencies, however, that's not going to be a problem.

69
00:05:15,570 --> 00:05:22,260
The HTML block will be deleted after transforming the header into blocks as long as you see something

70
00:05:22,260 --> 00:05:23,730
similar to what I have.

71
00:05:23,760 --> 00:05:24,930
You're good to go.

72
00:05:25,050 --> 00:05:27,750
Our styles have been successfully loaded.

73
00:05:29,610 --> 00:05:32,760
There's one more piece of information worth mentioning.

74
00:05:32,760 --> 00:05:38,810
It's not appearance, but WordPress will modify our CSS selectors behind the scenes.

75
00:05:38,820 --> 00:05:44,130
WordPress changes our selectors by adding the editor styles wrapper selector.

76
00:05:44,160 --> 00:05:46,330
This is known as encapsulation.

77
00:05:46,350 --> 00:05:50,190
Blocks are not the only UI elements in the Gutenberg editor.

78
00:05:50,220 --> 00:05:51,970
There's the editor itself.

79
00:05:51,990 --> 00:05:57,640
This includes the sidebar list, view and buttons at the top by loading CSS.

80
00:05:57,660 --> 00:06:01,950
We can potentially break the Gutenberg editor to avoid this issue.

81
00:06:01,980 --> 00:06:04,710
WordPress will modify your CSS code.

82
00:06:04,710 --> 00:06:07,890
In most cases, this shouldn't break your site.

83
00:06:07,920 --> 00:06:11,480
This process only applies to the Gutenberg editor.

84
00:06:11,490 --> 00:06:14,820
It does not affect the front end or final results.

85
00:06:14,910 --> 00:06:17,880
Here's an example of how encapsulation works.

86
00:06:17,880 --> 00:06:23,130
We have a class called example during the loading phase of the Gutenberg Editor.

87
00:06:23,160 --> 00:06:30,990
The editor styles wrapper classes is added, therefore the final selector becomes editor styles wrapper

88
00:06:30,990 --> 00:06:31,950
example.

89
00:06:31,980 --> 00:06:33,860
This feature is beneficial.

90
00:06:33,870 --> 00:06:38,610
It prevents us from accidentally breaking the Gutenberg editor with our styles.

91
00:06:38,640 --> 00:06:41,250
Some problems will arise from this feature.

92
00:06:41,250 --> 00:06:47,220
However, we'll tackle them any future lecture, let's get back into creating blocks.

