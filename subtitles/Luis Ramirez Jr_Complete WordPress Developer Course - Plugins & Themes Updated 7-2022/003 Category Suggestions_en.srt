1
00:00:00,090 --> 00:00:06,100
In this lecture, we are going to start adding category suggestions to the query controls block.

2
00:00:06,120 --> 00:00:11,990
The goal is to give users the option of filtering recipes based on a specific cuisine.

3
00:00:12,000 --> 00:00:15,460
They may want to display popular recipes for a cuisine.

4
00:00:15,480 --> 00:00:17,790
We should provide that option to them.

5
00:00:17,820 --> 00:00:21,740
The query controls component can help us with this situation.

6
00:00:21,750 --> 00:00:26,160
It can render an input with a feature for suggesting cuisines.

7
00:00:26,190 --> 00:00:28,920
Let's explore this feature in the editor.

8
00:00:28,950 --> 00:00:31,560
Open the index JS file.

9
00:00:33,710 --> 00:00:38,600
First we need to grab a list of all cuisine items from the current site.

10
00:00:38,630 --> 00:00:45,300
The query controls component does not automatically grab terms for a specific taxonomy.

11
00:00:45,320 --> 00:00:49,400
We must manually perform this query at the top of the file.

12
00:00:49,400 --> 00:00:55,160
Import the use select function from the WordPress slash data package.

13
00:00:57,290 --> 00:01:01,910
Any time we need to perform a query to the database, this function will help us.

14
00:01:01,940 --> 00:01:08,980
Next, let's begin using this function inside the edit function create a variable called terms.

15
00:01:08,990 --> 00:01:13,160
The value for this variable will be the use select function.

16
00:01:15,370 --> 00:01:18,250
Passing a function to begin handling the query.

17
00:01:18,250 --> 00:01:23,110
The function will be provided a function called select for performing the query.

18
00:01:25,300 --> 00:01:28,730
Inside this function, let's return the following value.

19
00:01:28,750 --> 00:01:32,680
Select core dot get entity records.

20
00:01:34,880 --> 00:01:41,450
We're already familiar with creating a query for taxonomy terms for the recipe summary block.

21
00:01:41,450 --> 00:01:43,540
We performed a similar query.

22
00:01:43,550 --> 00:01:51,020
The first step is to select the core storage, which contains a method for retrieving terms for a taxonomy.

23
00:01:51,020 --> 00:01:56,240
Next, we can call the get entity records function to initiate the query.

24
00:01:56,270 --> 00:01:59,960
Inside this function, we can pass in the type of data to grab.

25
00:01:59,960 --> 00:02:02,330
Let's set the type to taxonomy.

26
00:02:04,500 --> 00:02:09,270
Next, we must specify the name of the taxonomy, which is cuisine.

27
00:02:09,300 --> 00:02:13,170
Lastly, we can pass in an object to filter the results.

28
00:02:13,170 --> 00:02:17,820
By default, WordPress will limit the results, but that's not what we want.

29
00:02:17,850 --> 00:02:21,180
The query should grab all the taxonomy terms.

30
00:02:21,180 --> 00:02:26,010
We can add a parameter called per page with a value of minus one.

31
00:02:28,380 --> 00:02:34,920
The per page parameter will limit the results to a maximum threshold by setting it to minus one word.

32
00:02:34,920 --> 00:02:37,020
Press will not impose a threshold.

33
00:02:37,050 --> 00:02:41,390
All terms available within the taxonomy are grabbed from the database.

34
00:02:41,400 --> 00:02:44,060
The query is ready, but we're not finished yet.

35
00:02:44,070 --> 00:02:47,430
There's one problem with the data retrieved by the query.

36
00:02:49,570 --> 00:02:52,000
The data is not formatted correctly.

37
00:02:52,000 --> 00:02:56,260
The use select function will return an array of results.

38
00:02:56,260 --> 00:03:00,040
You can log the array to view the results in the array.

39
00:03:00,040 --> 00:03:02,620
An object represents a single term.

40
00:03:02,620 --> 00:03:09,400
I've simplified the results for the sake of clarity, you may find more properties than the ID and name

41
00:03:09,400 --> 00:03:11,440
the query controls component.

42
00:03:11,440 --> 00:03:13,540
Want an object, not an array.

43
00:03:13,570 --> 00:03:16,750
Each term must be stored in a property.

44
00:03:16,750 --> 00:03:21,220
The property name must store the name of the taxonomy term.

45
00:03:21,430 --> 00:03:23,620
Our next step becomes obvious.

46
00:03:23,620 --> 00:03:28,150
We are going to convert the data from the current format to the desired format.

47
00:03:28,180 --> 00:03:32,860
Otherwise, the query controls components may not behave correctly.

48
00:03:34,960 --> 00:03:37,020
Below the terms variable.

49
00:03:37,030 --> 00:03:43,120
Define another variable called suggestions with an initial value of an empty object.

50
00:03:45,470 --> 00:03:48,680
Next we are going to loop through the terms array.

51
00:03:48,710 --> 00:03:52,360
On each iteration we will add the term to the object.

52
00:03:52,370 --> 00:03:57,440
Let's begin looping through the terms array with the for each function.

53
00:03:59,540 --> 00:04:03,350
I'm going to introduce a new feature called Optional Chaining.

54
00:04:03,380 --> 00:04:08,760
Optional Chaining is a feature for accessing a property or method without throwing an error.

55
00:04:08,780 --> 00:04:12,890
Initially, the use select function will return null.

56
00:04:12,920 --> 00:04:16,579
This means the terms variable will have an empty value.

57
00:04:16,610 --> 00:04:22,940
Retrieving taxonomies terms can take a while, since that's the case before each function will not be

58
00:04:22,940 --> 00:04:25,340
available on the terms variable.

59
00:04:25,370 --> 00:04:31,050
If we were to access a method that doesn't exist on a variable, the browser would throw an error.

60
00:04:31,070 --> 00:04:35,780
We can resolve this issue by checking the terms variable for a value.

61
00:04:35,810 --> 00:04:38,320
There are different ways to write a solution.

62
00:04:38,330 --> 00:04:44,510
For example, we can wrap this function with a conditional statement to check the current value of the

63
00:04:44,510 --> 00:04:45,770
terms variable.

64
00:04:45,800 --> 00:04:51,530
However, there is a cleaner syntax called optional chaining after the terms variable.

65
00:04:51,530 --> 00:04:53,570
Add a question mark character.

66
00:04:55,720 --> 00:05:00,010
This operator will instruct the browser to check the terms variable.

67
00:05:00,010 --> 00:05:04,970
If this variable is an object, the browser will proceed to run the line of code.

68
00:05:04,990 --> 00:05:11,380
On the other hand, if the variable is empty, it will not run the for each function, thus preventing

69
00:05:11,380 --> 00:05:13,150
an error from being thrown.

70
00:05:13,240 --> 00:05:19,090
It's a simpler solution for accessing a property that may or may not exist on a variable.

71
00:05:19,090 --> 00:05:26,200
Let's assume the variable contains an array inside the for each function pass in an arrow function.

72
00:05:26,200 --> 00:05:30,130
I'm going to reference each item in the array as term.

73
00:05:32,300 --> 00:05:37,490
Next, let's add a new property with the following syntax suggestions.

74
00:05:37,490 --> 00:05:40,340
Term dot name equals term.

75
00:05:42,600 --> 00:05:46,420
Throughout this course, we've been pushing items into an array.

76
00:05:46,440 --> 00:05:50,070
But what if we need to add a property to an existing object?

77
00:05:50,100 --> 00:05:53,420
There are two solutions for adding new properties.

78
00:05:53,430 --> 00:05:57,010
The most common solution is to use dot notation.

79
00:05:57,030 --> 00:06:01,680
For example, let's say we wanted to add a new property called Foo.

80
00:06:01,710 --> 00:06:03,450
We could write it like so.

81
00:06:05,670 --> 00:06:09,600
If the property doesn't exist, it'll be added to the object.

82
00:06:09,630 --> 00:06:13,550
However, this solution does not work for our purposes.

83
00:06:13,560 --> 00:06:17,700
The name of the property should be based on the name of the term.

84
00:06:17,730 --> 00:06:21,960
For this scenario, we can resort to square bracket notation.

85
00:06:21,960 --> 00:06:28,350
Within these square brackets, we can add a string or use a dynamic value to represent the properties

86
00:06:28,350 --> 00:06:28,890
name.

87
00:06:29,130 --> 00:06:33,750
After adding the property, we are setting the value to the term object.

88
00:06:33,750 --> 00:06:35,370
Let's log the value.

89
00:06:35,370 --> 00:06:38,010
It's going to help us understand the outcome.

90
00:06:40,190 --> 00:06:42,410
Next, refresh the page.

91
00:06:44,420 --> 00:06:47,340
And the popular recipes block.

92
00:06:49,470 --> 00:06:52,650
Open the console panel of the developer tools.

93
00:06:52,680 --> 00:06:58,400
If we were to look at the logs, the suggestions variable starts as an empty object.

94
00:06:58,410 --> 00:07:02,640
At this point, the request for the terms has not been completed.

95
00:07:02,670 --> 00:07:06,990
After a few moments, a new object should be logged in the console.

96
00:07:07,020 --> 00:07:14,020
As you can see, our terms have been formatted into the format expected by the query controls object.

97
00:07:14,040 --> 00:07:17,010
The name of the term appears as the property name.

98
00:07:17,040 --> 00:07:20,220
Each property contains the term object.

99
00:07:20,250 --> 00:07:24,480
Let's pass these values onto the query controls component.

100
00:07:24,510 --> 00:07:26,110
Head back to the editor.

101
00:07:26,130 --> 00:07:33,860
Scroll to the query controls components on this component at a property called Category Suggestions,

102
00:07:33,870 --> 00:07:38,130
the value for this property will be the suggestions variable.

103
00:07:42,790 --> 00:07:49,470
By providing a list of suggestions, WordPress will compare the user's input with the suggestions.

104
00:07:49,480 --> 00:07:53,280
If there is a partial match, WordPress will recommend the term.

105
00:07:53,290 --> 00:07:58,000
Next, we must add an event called on category change.

106
00:08:00,060 --> 00:08:03,340
Without this event, the input will not appear.

107
00:08:03,360 --> 00:08:09,990
The minimum requirement for the input to appear is to have the category suggestions, property and the

108
00:08:09,990 --> 00:08:13,050
on category change events on the components.

109
00:08:13,080 --> 00:08:17,640
Let's pass in an arrow function that accepts the new terms as an argument.

110
00:08:19,870 --> 00:08:23,890
Inside the function long the new term's arguments.

111
00:08:26,010 --> 00:08:29,760
This event is emitted when new terms are added to the input.

112
00:08:29,790 --> 00:08:33,070
Let's try testing our components in the browser.

113
00:08:33,090 --> 00:08:34,590
Refresh the page.

114
00:08:36,750 --> 00:08:39,510
Next, add the popular recipes.

115
00:08:39,510 --> 00:08:40,950
Lock to the page.

116
00:08:43,039 --> 00:08:46,520
Initially the input will not appear on the sidebar.

117
00:08:46,550 --> 00:08:51,740
This is because the category suggestions property is given a null value.

118
00:08:51,770 --> 00:08:56,300
It will not appear until the request for the terms has been completed.

119
00:08:56,330 --> 00:08:59,180
After a few moments, you should see it appear.

120
00:08:59,210 --> 00:09:03,230
We can type inside this input to add a new cuisine.

121
00:09:03,260 --> 00:09:07,200
If we type an existing cuisine, the component will suggest it.

122
00:09:07,220 --> 00:09:08,390
That's perfect.

123
00:09:08,570 --> 00:09:12,150
We've successfully suggested cuisines to the user.

124
00:09:12,170 --> 00:09:17,240
In the next lecture, let's begin saving the cuisines into our attributes.

