WEBVTT
1
00:00:00.090 --> 00:00:04.660
In this lecture, we will step away from our project to talk about classes.

2
00:00:04.680 --> 00:00:09.810
If you already know PHP classes, you can skip this lecture for the rest of you.

3
00:00:09.840 --> 00:00:12.180
Let's talk about classes in PHP.

4
00:00:12.210 --> 00:00:16.050
Throughout this course we have written objects in JavaScript.

5
00:00:16.050 --> 00:00:17.790
But what about PHP?

6
00:00:17.820 --> 00:00:20.310
Does PHP support objects?

7
00:00:20.340 --> 00:00:21.810
The answer is yes.

8
00:00:21.810 --> 00:00:25.200
However, objects are written differently than objects.

9
00:00:25.200 --> 00:00:28.950
In JavaScript, we must create something called a class.

10
00:00:31.220 --> 00:00:35.900
A class can be thought of as a blueprint for a house before a house is built.

11
00:00:35.930 --> 00:00:39.180
Contractors must be given a blueprint for the home.

12
00:00:39.200 --> 00:00:44.270
The blueprint contains instructions and guidelines for the construction of a house.

13
00:00:44.300 --> 00:00:46.760
Without a blueprint, there may be issues.

14
00:00:46.790 --> 00:00:49.580
The same concept applies to PHP.

15
00:00:50.150 --> 00:00:52.820
PHP does not know what an object should look like.

16
00:00:52.820 --> 00:00:55.370
It needs help constructing an object.

17
00:00:55.400 --> 00:00:59.600
A class is considered a blueprint for creating an object.

18
00:01:01.780 --> 00:01:07.510
In the resource section of this lecture, I provide a link to a PHP playgrounds.

19
00:01:07.510 --> 00:01:11.300
We are going to be using this playgrounds to create classes.

20
00:01:11.320 --> 00:01:15.730
First, let's remove the initial PHP code from the example.

21
00:01:17.870 --> 00:01:21.110
Next, let's define a class called House.

22
00:01:21.140 --> 00:01:24.540
A class can be defined by typing the class keyword.

23
00:01:24.560 --> 00:01:27.470
This class is followed by the name of the class.

24
00:01:29.670 --> 00:01:33.670
After typing the name of the classes, we can add curly brackets.

25
00:01:33.690 --> 00:01:39.510
The body of the class is written inside the brackets similar to objects in JavaScript.

26
00:01:40.200 --> 00:01:42.810
Objects can have properties and methods.

27
00:01:42.810 --> 00:01:48.390
Properties are variables for objects, whereas methods are functions for objects.

28
00:01:48.390 --> 00:01:52.950
Let's define a variable called a color with an initial value of white.

29
00:01:55.160 --> 00:01:57.980
Let's pretend the colour of our house is white.

30
00:01:58.010 --> 00:02:01.860
In the future we may want to change the colour of the house.

31
00:02:01.880 --> 00:02:08.479
Let's create a method for changing the colour below the variable defining function called set colour.

32
00:02:10.630 --> 00:02:14.380
This function will accept an argument called new color.

33
00:02:16.480 --> 00:02:23.350
Lastly, let's update the color by setting the this color property to the new color argument.

34
00:02:25.520 --> 00:02:29.190
The this keyword exists in the PHP language.

35
00:02:29.210 --> 00:02:33.470
It's a variable for accessing the properties from the same object.

36
00:02:33.980 --> 00:02:36.920
PHP will search for a variable called color.

37
00:02:36.950 --> 00:02:41.330
We do not need to include the dollar sign symbol for the color variable.

38
00:02:41.360 --> 00:02:45.290
The dollar sign symbol must be added at the beginning of the line.

39
00:02:45.500 --> 00:02:49.640
We can access properties and methods from an object by using an arrow.

40
00:02:49.670 --> 00:02:53.340
In JavaScript, we could access properties with a dot.

41
00:02:53.360 --> 00:02:55.070
It's different in PHP.

42
00:02:55.100 --> 00:02:56.690
We must use an arrow.

43
00:02:56.720 --> 00:03:00.330
After accessing the property, we can update the property.

44
00:03:00.350 --> 00:03:04.940
In this case, we're updating the property with the new color arguments.

45
00:03:07.100 --> 00:03:08.370
Our class is ready.

46
00:03:08.390 --> 00:03:11.120
Keep in mind, we've created a blueprint.

47
00:03:11.150 --> 00:03:15.300
The class is not a physical object that can be accessed.

48
00:03:15.320 --> 00:03:17.960
We must create an instance of a class.

49
00:03:17.990 --> 00:03:20.480
You may hear this word from time to time.

50
00:03:20.510 --> 00:03:23.110
An instance is a copy of a class.

51
00:03:23.120 --> 00:03:28.940
If a blueprint is the instructions for a building a house, an instance would be the physical house

52
00:03:28.940 --> 00:03:29.690
itself.

53
00:03:31.900 --> 00:03:36.020
Below the class, let's create a variable called my house.

54
00:03:36.040 --> 00:03:39.730
The value for this variable will be the following code.

55
00:03:39.730 --> 00:03:41.020
New house.

56
00:03:43.100 --> 00:03:46.310
An instance must be stored in a variable.

57
00:03:46.340 --> 00:03:48.820
Otherwise we would lose the instance.

58
00:03:48.830 --> 00:03:52.850
The instance can be created by typing the new keyword.

59
00:03:52.880 --> 00:03:57.300
This will instruct PHP to create an instance from a class.

60
00:03:57.320 --> 00:04:01.370
This is followed by the name of the class with parentheses.

61
00:04:01.580 --> 00:04:07.590
After creating an instance, let's try accessing the properties and methods from the class.

62
00:04:07.610 --> 00:04:12.010
We can access a class's information with the same syntax.

63
00:04:12.020 --> 00:04:15.740
We can write the name of the variable followed by an arrow.

64
00:04:15.770 --> 00:04:18.410
Let's try echoing the color property.

65
00:04:20.670 --> 00:04:23.420
This line will throw an error by default.

66
00:04:23.430 --> 00:04:26.600
Properties are not accessible outside of the class.

67
00:04:26.610 --> 00:04:31.320
Back in the class, let's add the public keyword to the color property.

68
00:04:33.660 --> 00:04:40.410
In the resource section of this lecture, I provide a link to a list of access modifiers in PHP.

69
00:04:40.440 --> 00:04:46.820
An access modifier is a key word for changing the accessibility of a property or method.

70
00:04:46.830 --> 00:04:50.640
We can prevent outside code from accessing a property.

71
00:04:50.670 --> 00:04:54.150
Access Modifiers Keep our classes secure.

72
00:04:54.150 --> 00:04:57.870
There are various reasons for using access modifiers.

73
00:04:57.870 --> 00:05:02.370
We won't be diving too deep into access modifiers for now.

74
00:05:02.370 --> 00:05:07.470
Just know that a property is not publicly accessible without the public keyword.

75
00:05:07.470 --> 00:05:12.240
By adding this keyword, our code should work before testing our code.

76
00:05:12.240 --> 00:05:13.800
Let's update the color.

77
00:05:13.800 --> 00:05:16.050
Call the set color function.

78
00:05:16.050 --> 00:05:19.290
I'm going to change the color of my house to blue.

79
00:05:23.100 --> 00:05:26.760
Lastly, I will echo the color of property again.

80
00:05:29.010 --> 00:05:34.230
The set colour method does not need an access modifier by default.

81
00:05:34.260 --> 00:05:36.350
Methods are publicly accessible.

82
00:05:36.360 --> 00:05:38.280
Let's try running our code.

83
00:05:40.550 --> 00:05:43.620
After a few moments, the colors should appear.

84
00:05:43.640 --> 00:05:48.340
The house will originally be white by calling the set color method.

85
00:05:48.350 --> 00:05:50.600
The color has changed to blue.

86
00:05:50.630 --> 00:05:56.330
Overall, objects in PHP can be more complex to write than objects in JavaScript.

87
00:05:56.360 --> 00:06:01.140
Don't worry, we aren't going to be heavily using objects in our PHP code.

88
00:06:01.160 --> 00:06:04.350
It's going to become a relevant topic in the next lecture.

89
00:06:04.370 --> 00:06:07.640
Once you're ready, let's hop back into our project.

