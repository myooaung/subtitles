WEBVTT
1
00:00:00.150 --> 00:00:06.810
In this lecture, we are going to create a dynamic page by rendering the current time not the most impressive

2
00:00:06.810 --> 00:00:12.480
example, but it will demonstrate why developers favor react over plain JavaScript.

3
00:00:12.480 --> 00:00:18.510
First things first, let's update our solution by storing the elements inside a function instead of

4
00:00:18.510 --> 00:00:19.410
a variable.

5
00:00:20.050 --> 00:00:26.830
In most cases, it's considered good practice to return elements from a function without using a variable.

6
00:00:26.860 --> 00:00:28.840
There are various reasons why.

7
00:00:28.870 --> 00:00:32.299
One reason is to prevent memory leaks from occurring.

8
00:00:32.320 --> 00:00:36.350
Memory leaks are considered a massive problem in programming.

9
00:00:36.370 --> 00:00:39.700
They can cause a user's machine to act sluggishly.

10
00:00:39.880 --> 00:00:42.550
The idea of a memory leak is simple.

11
00:00:42.550 --> 00:00:47.200
Whenever defining a variable, we occupy memory on a user's machine.

12
00:00:47.230 --> 00:00:48.980
Variables are not free.

13
00:00:49.000 --> 00:00:51.730
Similar to storing items in a warehouse.

14
00:00:51.760 --> 00:00:55.240
A warehouse has a maximum storage capacity.

15
00:00:55.270 --> 00:00:57.690
The same idea applies to variables.

16
00:00:57.700 --> 00:01:02.090
If a variable is not needed anymore, we should clear it from memory.

17
00:01:02.110 --> 00:01:05.710
This section will allow us to store other variables.

18
00:01:05.740 --> 00:01:07.630
Take the following example.

19
00:01:07.630 --> 00:01:10.020
This example is not fully functional.

20
00:01:10.030 --> 00:01:12.520
However, let's pretend that it is.

21
00:01:12.520 --> 00:01:15.940
And this example we are creating a login form.

22
00:01:15.970 --> 00:01:21.830
Before rendering the form, we are checking if the user is logged in with a conditional statement.

23
00:01:21.850 --> 00:01:24.100
If they aren't, we'll render the form.

24
00:01:24.100 --> 00:01:26.800
Otherwise the form should be hidden.

25
00:01:26.830 --> 00:01:31.780
This solution works, but it's not ideal, even though the form will never appear on the page if the

26
00:01:31.780 --> 00:01:32.980
user is logged in.

27
00:01:33.010 --> 00:01:37.080
The element for creating the form is stored in the user's memory.

28
00:01:37.090 --> 00:01:38.600
It never gets cleared.

29
00:01:38.620 --> 00:01:41.820
We're occupying memory that doesn't need to be copied.

30
00:01:41.830 --> 00:01:44.400
Function definitions will occupy memory.

31
00:01:44.410 --> 00:01:49.480
However, the element for creating a form is not occupying a user's memory.

32
00:01:49.480 --> 00:01:53.740
It isn't until the function has been executed will the form be created?

33
00:01:53.770 --> 00:01:57.670
Unlike the previous solution, a memory leak has been avoided.

34
00:01:58.570 --> 00:02:01.990
Let's convert our variable to a function first.

35
00:02:01.990 --> 00:02:04.540
Let's create a function called page.

36
00:02:06.650 --> 00:02:10.280
Next move the div variable into the function.

37
00:02:12.400 --> 00:02:15.910
Let's replace the variable name with a return statement.

38
00:02:17.970 --> 00:02:22.950
Lastly, we can update the render function by calling the page function.

39
00:02:22.980 --> 00:02:25.950
This function should replace the div variable.

40
00:02:28.240 --> 00:02:32.250
After making those changes, the app should continue to be functional.

41
00:02:32.260 --> 00:02:35.920
However, we're using a function instead of a variable.

42
00:02:35.920 --> 00:02:38.740
Let's start creating dynamic content.

43
00:02:38.770 --> 00:02:42.180
Our goal is to display the current time like a clock.

44
00:02:42.190 --> 00:02:45.480
JavaScript has an object for working with dates.

45
00:02:45.490 --> 00:02:49.330
This object has various functions for grabbing the current time.

46
00:02:49.330 --> 00:02:52.170
Let's display the time in the H one tag.

47
00:02:52.180 --> 00:02:55.510
We can inject the time by using a template literal.

48
00:02:55.540 --> 00:02:59.830
First, we should convert the third argument to a template literal.

49
00:03:02.110 --> 00:03:06.910
At the end of the string, we're going to add a placeholder inside this placeholder.

50
00:03:06.910 --> 00:03:11.500
Write the following code date dot to locale string.

51
00:03:13.740 --> 00:03:19.650
The date function is defined by the JavaScript language, it's automatically available to us.

52
00:03:19.680 --> 00:03:25.130
This function will return an object with various functions for grabbing the current date.

53
00:03:25.140 --> 00:03:29.620
We can grab the current our seconds month or timezone.

54
00:03:29.640 --> 00:03:31.370
It's loaded with information.

55
00:03:31.380 --> 00:03:37.410
In this example, we're grabbing the current time by calling the two locale string function.

56
00:03:37.650 --> 00:03:40.860
If we were to look at the page, the time gets displayed.

57
00:03:40.890 --> 00:03:42.690
So far so good.

58
00:03:42.720 --> 00:03:45.900
It would be cool if the time was updated every second.

59
00:03:45.930 --> 00:03:53.040
Luckily, JavaScript has a function for executing a code block with an interval below the render function.

60
00:03:53.040 --> 00:03:55.980
Let's run a function called set interval.

61
00:03:58.100 --> 00:04:02.490
The set interval function is defined by the JavaScript language.

62
00:04:02.510 --> 00:04:06.710
It's a special function for executing another function on an interval.

63
00:04:06.740 --> 00:04:08.730
It has two arguments.

64
00:04:08.750 --> 00:04:10.830
The first argument is a function.

65
00:04:10.850 --> 00:04:14.060
This can be a regular function or arrow function.

66
00:04:14.060 --> 00:04:16.250
Lets pass in a regular function.

67
00:04:18.510 --> 00:04:20.839
This type of argument is new to us.

68
00:04:20.850 --> 00:04:25.230
However, it's completely valid to pass in a function to a function.

69
00:04:25.260 --> 00:04:27.390
The second argument is a timer.

70
00:04:27.390 --> 00:04:29.820
We can create a custom interval.

71
00:04:29.850 --> 00:04:32.330
The interval is measured in milliseconds.

72
00:04:32.340 --> 00:04:34.380
Let's pass in 1000.

73
00:04:36.650 --> 00:04:39.020
Our function will run every second.

74
00:04:39.050 --> 00:04:45.200
If we want to update the timer on the page, we should move the render function to inside the interval

75
00:04:45.200 --> 00:04:45.920
function.

76
00:04:48.080 --> 00:04:51.200
Basically we're rendering the page every second.

77
00:04:51.230 --> 00:04:55.550
Seems like a waste, but wait until you see what happens on the page.

78
00:04:55.550 --> 00:04:57.980
The timer gets rendered every second.

79
00:04:58.010 --> 00:04:59.760
We've simulated a clock.

80
00:04:59.780 --> 00:05:03.140
However, there's something else happening behind the scenes.

81
00:05:03.170 --> 00:05:07.180
It's possible to assume that the entire page is being repainted.

82
00:05:07.190 --> 00:05:08.390
That's not true.

83
00:05:08.420 --> 00:05:09.500
Check this out.

84
00:05:09.530 --> 00:05:12.800
I'm going to attempt to select the time on the page.

85
00:05:12.800 --> 00:05:17.240
Whenever the timer updates, the browser will select the text.

86
00:05:17.270 --> 00:05:23.870
It doesn't matter how many times I try, the text will always be selected after 1 seconds.

87
00:05:24.020 --> 00:05:26.380
This behavior is part of the browser.

88
00:05:26.390 --> 00:05:31.700
If an element changes while being selected, the browser will select the text.

89
00:05:31.730 --> 00:05:33.740
What if I select the text?

90
00:05:33.740 --> 00:05:35.480
Any paragraph elements?

91
00:05:35.510 --> 00:05:36.680
Nothing happens.

92
00:05:36.680 --> 00:05:40.820
The browser will not select the text from the paragraphs.

93
00:05:41.060 --> 00:05:45.080
Under the hood, React can intelligently update the page.

94
00:05:45.080 --> 00:05:49.400
If an element does not need to be updated, it'll remain intact.

95
00:05:49.430 --> 00:05:55.640
React understands that we're only changing the current time, therefore it'll update the heading.

96
00:05:55.640 --> 00:05:58.400
The other elements will remain untouched.

97
00:05:58.430 --> 00:06:01.310
For this reason, developers love react.

98
00:06:01.340 --> 00:06:05.390
Normally, we would need to manage this behavior without react.

99
00:06:05.390 --> 00:06:10.920
We would need to keep track of our elements along with the values inserted into the document.

100
00:06:10.940 --> 00:06:13.700
One solution would be to use IDs.

101
00:06:13.700 --> 00:06:17.700
However, we would need to assign an ID to every element.

102
00:06:17.720 --> 00:06:19.880
This can quickly become a nightmare.

103
00:06:19.940 --> 00:06:24.620
React is more than capable of tracking our elements without additional help.

104
00:06:24.620 --> 00:06:31.520
The team for React have developed an efficient and optimized algorithm for properly updating the document.

105
00:06:31.550 --> 00:06:34.900
This saves us time from creating a solution ourselves.

106
00:06:34.910 --> 00:06:38.150
It allows us to focus on the UI of an element.

107
00:06:38.180 --> 00:06:42.470
Hopefully it's starting to become clear as to why React is awesome.

108
00:06:42.470 --> 00:06:46.610
In the next lecture, let's tackle the problem with scaling and application.

