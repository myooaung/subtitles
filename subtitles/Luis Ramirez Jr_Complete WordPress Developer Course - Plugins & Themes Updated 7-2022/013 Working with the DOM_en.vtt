WEBVTT
1
00:00:00.240 --> 00:00:05.400
In this lecture, we are going to explore one of the most powerful features of the browser.

2
00:00:05.430 --> 00:00:10.510
Believe it or not, the browser performs a special conversion on our documents.

3
00:00:10.530 --> 00:00:16.650
It's converting our HTML document from text to a tree of objects.

4
00:00:16.680 --> 00:00:18.010
Sounds confusing.

5
00:00:18.030 --> 00:00:21.510
Let's dig deeper into the mechanics of this feature.

6
00:00:21.630 --> 00:00:25.560
In this example, I have a basic HTML document.

7
00:00:25.590 --> 00:00:27.510
Nothing we haven't seen before.

8
00:00:27.540 --> 00:00:33.480
The browser will scan through your documents HTML to understand its structure.

9
00:00:33.660 --> 00:00:36.450
It'll produce a tree of objects.

10
00:00:36.450 --> 00:00:41.140
The relationship of our tags has been mapped into a tree diagram.

11
00:00:41.160 --> 00:00:44.460
Each element will become available as an object.

12
00:00:44.490 --> 00:00:50.770
These objects contain dozens of properties and methods for interacting with the elements.

13
00:00:50.790 --> 00:00:56.510
We can change an element's content styles or attributes to take it a step further.

14
00:00:56.520 --> 00:01:00.150
We can insert or remove elements from the document.

15
00:01:00.270 --> 00:01:04.230
Essentially, we can bring life to the document through JavaScript.

16
00:01:04.260 --> 00:01:07.290
This feature is called the Document Object Model.

17
00:01:07.320 --> 00:01:11.160
Let's explore our options for grabbing elements from the document.

18
00:01:11.950 --> 00:01:15.850
For starters, let's try grabbing the entire document.

19
00:01:15.880 --> 00:01:19.000
Open the main JS file in your editor.

20
00:01:19.000 --> 00:01:22.970
Inside this file, let's clear the contents to start fresh.

21
00:01:22.990 --> 00:01:26.800
Next, let's log an object called Document.

22
00:01:28.970 --> 00:01:32.250
The document object is defined by the browser.

23
00:01:32.270 --> 00:01:36.380
It's an object that represents the entire HTML documents.

24
00:01:36.410 --> 00:01:43.660
Through this object, we can interact with the various elements, attributes and content of the documents

25
00:01:43.670 --> 00:01:44.800
in the browser.

26
00:01:44.810 --> 00:01:47.420
Refresh the page afterward.

27
00:01:47.420 --> 00:01:50.480
Open the console of the developer tools.

28
00:01:52.700 --> 00:01:55.380
The entire document has been logged.

29
00:01:55.400 --> 00:01:59.840
We can look closely at the object to view the HTML document.

30
00:01:59.960 --> 00:02:01.230
As you can see.

31
00:02:01.250 --> 00:02:04.770
JavaScript captured every element in our documents.

32
00:02:04.790 --> 00:02:09.229
We can hover our mouse over the elements to highlight them on the page.

33
00:02:09.259 --> 00:02:16.640
For example, if I hover my mouse over the H one tag, a blue box is layered on top of the element.

34
00:02:16.670 --> 00:02:23.900
Selecting the entire document is great, but you may want to select specific elements for a demonstration

35
00:02:23.900 --> 00:02:24.740
purposes.

36
00:02:24.740 --> 00:02:29.240
Let's try selecting the H one tag inside our script.

37
00:02:29.270 --> 00:02:31.880
Create a variable called H one.

38
00:02:31.910 --> 00:02:37.610
Its value will be a function called document dot query selector.

39
00:02:39.900 --> 00:02:46.200
The query selector function is a special function for selecting an element within the document.

40
00:02:46.380 --> 00:02:51.540
It has one argument which is a valid CSS selector for the element.

41
00:02:51.570 --> 00:02:52.980
You heard that right?

42
00:02:53.010 --> 00:02:57.000
JavaScript uses CSS selectors for grabbing elements.

43
00:02:57.030 --> 00:03:00.530
In our case, we're trying to grab the H1 tag.

44
00:03:00.540 --> 00:03:03.870
Therefore we can pass in the name of the tag.

45
00:03:05.930 --> 00:03:09.050
Next, let's log the H one variable.

46
00:03:11.120 --> 00:03:16.370
In our browser, we can refresh the page to view the results in the console.

47
00:03:16.400 --> 00:03:19.550
The H one tag has been logged perfect.

48
00:03:19.550 --> 00:03:23.300
With a single function, we're able to select any elements.

49
00:03:23.330 --> 00:03:30.870
The query selector function allows us to grab elements by their class ID or any other attributes.

50
00:03:30.890 --> 00:03:37.760
For example, if we had a class called example, we can select the element with not example.

51
00:03:40.040 --> 00:03:45.890
If the element had an ID called example, the DOT can be replaced with a hash.

52
00:03:48.090 --> 00:03:51.300
We are not restricted to using a single selector.

53
00:03:51.300 --> 00:03:55.020
We can use nested selectors as an example.

54
00:03:55.020 --> 00:03:59.790
Let's update our document by adding an unordered list elements.

55
00:04:01.930 --> 00:04:03.490
Inside this element.

56
00:04:03.520 --> 00:04:07.120
Add three list item elements with random text.

57
00:04:09.190 --> 00:04:16.510
Switch back to the script, we're going to define a variable called lie with a value of the document

58
00:04:16.870 --> 00:04:17.380
query.

59
00:04:17.380 --> 00:04:18.700
Select your function.

60
00:04:20.950 --> 00:04:25.960
The query for the list item element will be the following UL line.

61
00:04:28.220 --> 00:04:32.120
Technically we could grab a list item by using ly.

62
00:04:32.150 --> 00:04:36.920
However, for demonstration purposes, let's stick to this query.

63
00:04:36.950 --> 00:04:40.940
After creating the variable, let's log it into the console.

64
00:04:43.110 --> 00:04:45.450
Next, refresh the page.

65
00:04:47.530 --> 00:04:51.490
As you can see, the list item element has been selected.

66
00:04:51.520 --> 00:04:53.640
However, there's one problem.

67
00:04:53.650 --> 00:04:57.570
Oftentimes you may want to select multiple elements.

68
00:04:57.580 --> 00:05:01.960
The query selector function will select the first item it finds.

69
00:05:01.990 --> 00:05:05.650
If other elements match the query, that will be ignored.

70
00:05:05.650 --> 00:05:12.730
In our scripts, we can select multiple elements by changing the function from query selector to query

71
00:05:12.730 --> 00:05:13.900
selector all.

72
00:05:16.290 --> 00:05:19.890
If we refresh the page again, things will be different.

73
00:05:19.920 --> 00:05:24.360
The console will log an array of elements selected by our query.

74
00:05:24.360 --> 00:05:25.200
Perfect.

75
00:05:25.200 --> 00:05:29.190
We have got two methods on our belt for selecting elements.

76
00:05:31.450 --> 00:05:36.130
There are other functions available for selecting elements there.

77
00:05:36.130 --> 00:05:43.870
The get element by ID get elements by tag name and get elements by class name functions.

78
00:05:43.870 --> 00:05:50.770
As their name suggests, they allow us to grab elements by IDs, tag names or classes.

79
00:05:50.770 --> 00:05:55.150
In my opinion, I prefer to stick to the query selector function.

80
00:05:55.150 --> 00:05:57.790
It's easier to remember a single function.

81
00:05:58.210 --> 00:06:02.020
However, you're more than welcome to explore these options.

82
00:06:02.020 --> 00:06:05.980
At the end of the day, they'll return an elements object.

83
00:06:05.980 --> 00:06:11.020
Through this object, we can interact with the various properties of the element.

84
00:06:13.180 --> 00:06:19.140
Let's look at an example above the console statement for the list item element.

85
00:06:19.150 --> 00:06:24.850
Let's change the following property list item one dot style dot color.

86
00:06:27.150 --> 00:06:34.440
Keep in mind, we're selecting multiple list item elements that are stored in an array before manipulating

87
00:06:34.440 --> 00:06:35.900
a specific object.

88
00:06:35.910 --> 00:06:38.010
We must grab it from the array.

89
00:06:38.400 --> 00:06:39.060
Objects.

90
00:06:39.060 --> 00:06:42.000
Four elements will have a property called style.

91
00:06:42.030 --> 00:06:46.470
The style property is an object of styles applied to an element.

92
00:06:46.470 --> 00:06:51.450
We have the option of reading or writing to this object and this example.

93
00:06:51.450 --> 00:06:54.000
We are going to change the color to read.

94
00:06:56.380 --> 00:07:02.950
After applying this change, we should see the text for the second list item element changed to read.

95
00:07:02.980 --> 00:07:04.540
Refresh the page.

96
00:07:04.550 --> 00:07:05.290
Voila.

97
00:07:05.320 --> 00:07:08.070
We've successfully changed the color.

98
00:07:08.080 --> 00:07:11.980
There's so much more we can do with the document object model.

99
00:07:11.980 --> 00:07:16.810
We can add events, change the contents of a tag, or remove elements.

100
00:07:16.930 --> 00:07:18.520
Overall browsers.

101
00:07:18.520 --> 00:07:22.600
Provide a robust API for interacting with the documents.

102
00:07:22.600 --> 00:07:28.390
In the resource section of this lecture, I provide a link to a reference page for the DOM.

103
00:07:29.380 --> 00:07:35.980
This page will provide an overview of all the properties and methods available from the DOM API.

104
00:07:36.070 --> 00:07:39.790
I encourage you to check it out and play around with what you find.

105
00:07:39.820 --> 00:07:44.680
For now, let's continue our discussion of JavaScript in the next lecture.

