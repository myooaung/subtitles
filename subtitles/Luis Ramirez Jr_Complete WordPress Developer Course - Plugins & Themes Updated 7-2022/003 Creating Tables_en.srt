1
00:00:00,180 --> 00:00:04,520
In this lecture, we are going to create a table in our database.

2
00:00:04,530 --> 00:00:10,400
We're not going to work with the tables by word press, otherwise we may run into problems.

3
00:00:10,410 --> 00:00:15,630
I always recommend creating a table purely for experimenting with queries.

4
00:00:15,660 --> 00:00:17,190
Unless you know what you're doing.

5
00:00:17,190 --> 00:00:21,990
You can mitigate a disaster by working with a dummy table or database.

6
00:00:21,990 --> 00:00:24,750
It's very difficult to fix databases.

7
00:00:24,750 --> 00:00:28,020
For this reason, I recommend regular backups.

8
00:00:28,020 --> 00:00:31,470
Let's try creating a table in our database.

9
00:00:31,470 --> 00:00:35,970
On the right side of the page, there's a link called SQL Command.

10
00:00:35,970 --> 00:00:42,060
We can click on this link to navigate to a page for writing a custom SQL Command.

11
00:00:42,180 --> 00:00:45,660
We are given a simple text box for writing commands.

12
00:00:45,660 --> 00:00:49,260
Let's try creating a table inside the box.

13
00:00:49,260 --> 00:00:52,170
Type the following commands create table.

14
00:00:54,330 --> 00:01:00,660
First and foremost, like any other language, SQL languages have reserved keywords.

15
00:01:00,690 --> 00:01:04,970
We can type these keywords to send instructions to the database.

16
00:01:04,980 --> 00:01:11,670
In this example, we are using the create table keywords as the keyword suggests.

17
00:01:11,670 --> 00:01:15,390
We can use them to create a table in our database.

18
00:01:15,390 --> 00:01:21,120
The syntax for database is is very different from the syntax for programming languages.

19
00:01:21,120 --> 00:01:25,470
For example, I've written these key words with uppercase letters.

20
00:01:25,470 --> 00:01:29,580
However, SQL is not a case sensitive language.

21
00:01:29,580 --> 00:01:35,430
We can use a mixture of casing, or we can write these key words with lowercase letters.

22
00:01:35,430 --> 00:01:41,580
It's common practice to use uppercase letters for all reserved keywords in the language.

23
00:01:41,580 --> 00:01:46,740
This helps developers identify SQL keywords from their own values.

24
00:01:46,740 --> 00:01:50,910
For the remainder of this course, we are going to follow this convention.

25
00:01:51,060 --> 00:01:54,120
Next, we must provide a name for our table.

26
00:01:54,120 --> 00:01:56,640
Let's set the name to products.

27
00:01:58,730 --> 00:02:02,850
This table is going to store an imaginary list of products.

28
00:02:02,870 --> 00:02:07,220
After defining the table's name, let's add a pair of parentheses.

29
00:02:07,220 --> 00:02:12,440
Inside these parentheses, we can start adding a list of columns for the table.

30
00:02:12,440 --> 00:02:19,340
This portion of the query is where we can describe the type of data that can be inserted into the table.

31
00:02:19,430 --> 00:02:25,520
The format for adding a column is simple it's the name of the column followed by the data type.

32
00:02:25,520 --> 00:02:28,220
Let's add a column called ID.

33
00:02:30,520 --> 00:02:36,640
I'd column's are the most common types of columns that can be added to a database to prove it.

34
00:02:36,670 --> 00:02:39,940
Let's open the post table in another tab.

35
00:02:39,970 --> 00:02:42,380
Do not navigate away from this page.

36
00:02:42,400 --> 00:02:45,430
Otherwise, you may lose the original query.

37
00:02:45,640 --> 00:02:48,010
I'm viewing the structure of the table.

38
00:02:48,010 --> 00:02:51,040
The structure of a table is called a schema.

39
00:02:51,070 --> 00:02:57,190
If you're not able to view this page, you may need to click on the show structure link at the top.

40
00:02:57,220 --> 00:03:02,540
The schema will describe the columns added to the table at the top of the list.

41
00:03:02,560 --> 00:03:05,680
There's a column called ID in a Table.

42
00:03:05,710 --> 00:03:08,470
Thousands of rows of data can be added.

43
00:03:08,500 --> 00:03:11,350
It's not unheard of to have millions of rows.

44
00:03:11,350 --> 00:03:15,190
Data can be updated after being inserted into a table.

45
00:03:15,220 --> 00:03:17,810
While it's great that data is flexible.

46
00:03:17,830 --> 00:03:20,230
It becomes difficult to track data.

47
00:03:20,380 --> 00:03:27,580
Most database developers agree that adding a column called ID is the best way to keep track of a row

48
00:03:27,580 --> 00:03:28,420
of data.

49
00:03:28,450 --> 00:03:34,640
If you were to look at the structure of the other tables, you're going to come across an ID column.

50
00:03:34,660 --> 00:03:37,700
It's a standard practice in most databases.

51
00:03:37,720 --> 00:03:39,070
Back to our query.

52
00:03:39,070 --> 00:03:41,710
We will add a column called ID.

53
00:03:41,740 --> 00:03:46,540
This column's value should never change after a value has been inserted.

54
00:03:46,780 --> 00:03:52,130
Next, we must provide the data type in the resource section of this lecture.

55
00:03:52,150 --> 00:03:55,060
I provide a link to a list of data types.

56
00:03:55,090 --> 00:04:01,840
Unlike programming languages, databases will have dozens of data types for the same type of value.

57
00:04:01,870 --> 00:04:07,180
Let's look at an example by scrolling to the numeric data types section.

58
00:04:09,410 --> 00:04:12,710
There are several data types for storing numbers.

59
00:04:12,740 --> 00:04:14,960
Why have so many data types?

60
00:04:14,990 --> 00:04:18,320
Databases are heavily focused on being efficient.

61
00:04:18,350 --> 00:04:20,060
Every second counts.

62
00:04:20,089 --> 00:04:25,910
A program cannot continue executing an action until the database responds with data.

63
00:04:25,940 --> 00:04:32,720
Any database worth its salt will allow developers to fine tune the type of data that can be stored in

64
00:04:32,720 --> 00:04:33,440
a table.

65
00:04:33,620 --> 00:04:36,530
Let's say you're trying to store test scores.

66
00:04:36,560 --> 00:04:39,960
A test score can range from 0 to 100.

67
00:04:39,980 --> 00:04:44,750
You may not need to store a value higher than 100 if that's the case.

68
00:04:44,780 --> 00:04:48,800
Databases shouldn't have to worry about storing higher values.

69
00:04:48,830 --> 00:04:53,750
Unlike programming languages, databases can have a set size for a column.

70
00:04:53,780 --> 00:04:59,350
For example, we can tell the database that we plan on storing numbers with three digits.

71
00:04:59,360 --> 00:05:04,580
By doing so, the database does not need to strain itself with higher values.

72
00:05:04,910 --> 00:05:09,600
Databases introduce data types for different sizes of the same value.

73
00:05:09,620 --> 00:05:18,440
For example, the tiny inch data type can store numbers from -128 to 127 one if we need to store a larger

74
00:05:18,440 --> 00:05:18,960
number.

75
00:05:18,980 --> 00:05:23,270
There's a data type called INT for storing numbers in the billions.

76
00:05:23,300 --> 00:05:24,660
Need something bigger?

77
00:05:24,680 --> 00:05:27,590
The big data type has you covered.

78
00:05:27,830 --> 00:05:30,490
Feel free to check out the other data types.

79
00:05:30,500 --> 00:05:32,810
Let's head back to the admin or tool.

80
00:05:32,810 --> 00:05:35,480
Let's add the big data type.

81
00:05:37,680 --> 00:05:41,220
WordPress recommends this data type for IDs.

82
00:05:41,340 --> 00:05:45,780
You can look through the structure of other tables for their data types.

83
00:05:45,810 --> 00:05:50,490
Next, we must provide a size by adding a pair of parentheses.

84
00:05:50,490 --> 00:05:57,120
Inside these parentheses, we can specify a size, which is the maximum number of digits that can appear

85
00:05:57,120 --> 00:05:58,140
in an ID.

86
00:05:58,170 --> 00:06:00,450
Let's set the size to 20.

87
00:06:02,610 --> 00:06:05,040
The ID should always have a value.

88
00:06:05,070 --> 00:06:11,640
We can add the not null keywords after the data type to prevent empty values from appearing in this

89
00:06:11,640 --> 00:06:12,300
column.

90
00:06:14,370 --> 00:06:20,040
By default, if a value is not provided for a column, the value will be set to null.

91
00:06:20,100 --> 00:06:24,300
Maria DB is capable of performing basic data validation.

92
00:06:24,300 --> 00:06:29,570
If the data type is not a number or is not provided, the action will be rejected.

93
00:06:29,580 --> 00:06:32,400
Let's add another column by adding a comma.

94
00:06:32,400 --> 00:06:35,430
The name of the next column will be called Name.

95
00:06:37,720 --> 00:06:39,880
Before moving forward with the column.

96
00:06:39,880 --> 00:06:41,710
Let's talk about the formatting.

97
00:06:41,920 --> 00:06:44,520
SQL does not care about the formatting.

98
00:06:44,530 --> 00:06:48,630
We can write a query on a single line for readability.

99
00:06:48,640 --> 00:06:52,240
I recommend formatting your query on multiple lines.

100
00:06:52,240 --> 00:06:57,790
We were inventing the column names not required but recommended back to our column.

101
00:06:57,790 --> 00:07:00,070
Let's add the data type too far.

102
00:07:00,070 --> 00:07:02,650
Char with a size of 255.

103
00:07:04,720 --> 00:07:06,970
Strings have various data types.

104
00:07:06,970 --> 00:07:12,360
You can refer to the documentation page I linked to earlier for a complete breakdown.

105
00:07:12,370 --> 00:07:17,950
The var CHA data type will allow a column to store a string with a specific size.

106
00:07:17,950 --> 00:07:22,360
We can configure the data type size inside the parentheses.

107
00:07:22,360 --> 00:07:27,610
In this case, we're going to allow a maximum of 255 characters.

108
00:07:27,610 --> 00:07:30,400
We're finished before executing the query.

109
00:07:30,400 --> 00:07:31,990
Let's add a semicolon.

110
00:07:31,990 --> 00:07:37,360
At the end of the statement, the semicolon character indicates the end of a query.

111
00:07:37,390 --> 00:07:42,400
A new query can be written after the first query after adding the semicolon.

112
00:07:42,400 --> 00:07:44,290
Let's execute the query.

113
00:07:46,480 --> 00:07:51,170
After a second, the table has been successfully created to the right.

114
00:07:51,190 --> 00:07:54,160
The products table has been added to the list.

115
00:07:54,190 --> 00:07:55,520
Let's click on it.

116
00:07:55,540 --> 00:08:00,060
As you can see, the tables structure is similar to the query.

117
00:08:00,070 --> 00:08:08,800
The IDS data type is big and with a size of 20, whereas the name column has a data type of var char.

118
00:08:08,980 --> 00:08:12,770
After creating a table, we can begin inserting data.

119
00:08:12,790 --> 00:08:16,600
Let's start adding data to our table in the next lecture.

