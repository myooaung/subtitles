WEBVTT
1
00:00:00.120 --> 00:00:06.380
In this lecture we are going to explore a JavaScript feature called Modules by Learning React.

2
00:00:06.390 --> 00:00:11.070
We ran into an example of a module in the index JS file.

3
00:00:11.100 --> 00:00:13.320
There are two import statements.

4
00:00:13.320 --> 00:00:18.210
Importing data from another file is a part of Java Scripts Module system.

5
00:00:18.210 --> 00:00:22.560
Third party packages are not the only ones that can export data.

6
00:00:22.770 --> 00:00:26.820
JavaScript gives us the power to export and import data.

7
00:00:26.820 --> 00:00:30.090
In our file we have about 30 lines of code.

8
00:00:30.090 --> 00:00:32.310
Our file is starting to get large.

9
00:00:32.310 --> 00:00:36.960
I think it would be a good idea to separate our functions into different files.

10
00:00:36.960 --> 00:00:40.530
By doing so, it will be easier to manage our files.

11
00:00:40.530 --> 00:00:45.330
Let's get started by creating two files inside the source directory.

12
00:00:45.330 --> 00:00:49.860
The files will be called page JS and header JS.

13
00:00:51.910 --> 00:00:55.480
While we're here, let's delete the app JS file.

14
00:00:55.480 --> 00:00:56.950
It's not being used.

15
00:00:56.980 --> 00:00:59.740
We can safely delete it from our project.

16
00:01:02.000 --> 00:01:05.550
Next, we're going to move our functions into these files.

17
00:01:05.570 --> 00:01:09.260
First, move the header function into the header file.

18
00:01:11.490 --> 00:01:12.360
Afterward.

19
00:01:12.360 --> 00:01:15.480
Move the page function into the page file.

20
00:01:17.590 --> 00:01:19.270
By moving everything around.

21
00:01:19.270 --> 00:01:23.560
We've completely broken our app according to the error on the page.

22
00:01:23.560 --> 00:01:27.010
The error states that the page component is missing.

23
00:01:27.010 --> 00:01:32.010
It can't find the page function, therefore it's unable to render the page.

24
00:01:32.020 --> 00:01:35.370
We can fix this by importing the page function.

25
00:01:35.380 --> 00:01:39.070
However, first we must export the component.

26
00:01:39.190 --> 00:01:41.500
Switch over to the page file.

27
00:01:41.500 --> 00:01:46.300
Let's add the following keywords to the function export default.

28
00:01:48.440 --> 00:01:51.470
By default, data is restricted to a file.

29
00:01:51.470 --> 00:01:57.230
We don't have access to data from other files, nor are they expressed through imports.

30
00:01:57.260 --> 00:02:02.670
We must explicitly export data by using the export keyword by doing so.

31
00:02:02.690 --> 00:02:07.370
JavaScript will allow specific values to be available to other files.

32
00:02:07.370 --> 00:02:13.610
And this example we're allowing the page function to be available for a further demonstration.

33
00:02:13.610 --> 00:02:17.540
Let's create a variable called age outside of the function.

34
00:02:19.770 --> 00:02:23.000
This variable does not have the export keyword.

35
00:02:23.010 --> 00:02:26.640
Since that's the case, it's not accessible outside of the file.

36
00:02:26.670 --> 00:02:28.320
Let's keep moving on.

37
00:02:28.320 --> 00:02:31.450
Next, we are adding the default keyword.

38
00:02:31.470 --> 00:02:34.170
This keyword configures the namespace.

39
00:02:36.240 --> 00:02:39.720
From time to time, you may hear the word space.

40
00:02:39.750 --> 00:02:43.610
The idea of a namespace applies to programming in general.

41
00:02:43.620 --> 00:02:47.820
It's a concept for organizing data into different locations.

42
00:02:47.820 --> 00:02:52.920
For example, let's say you had a folder for storing movies, music and photos.

43
00:02:52.920 --> 00:02:55.830
You wouldn't store these files in a single folder.

44
00:02:55.860 --> 00:03:00.600
A better way to organize your files is by storing them in different folders.

45
00:03:00.630 --> 00:03:04.440
The same idea can be applied to variables and functions.

46
00:03:04.440 --> 00:03:09.240
We may not always need every function or variable exported by a file.

47
00:03:09.240 --> 00:03:12.840
In some cases, we may want to grab a single function.

48
00:03:12.840 --> 00:03:14.610
The rest can be left alone.

49
00:03:14.610 --> 00:03:17.370
Files can export multiple values.

50
00:03:17.400 --> 00:03:21.420
Each value can be assigned to a namespace or location.

51
00:03:23.610 --> 00:03:28.710
In our example, we're assigning the page function to the default namespace.

52
00:03:28.740 --> 00:03:31.800
A default namespace is available in every file.

53
00:03:31.800 --> 00:03:35.940
By using the default namespace, we can avoid assigning a name.

54
00:03:35.940 --> 00:03:40.020
Therefore we can remove the function name from our function.

55
00:03:40.020 --> 00:03:42.460
An anonymous function will suffice.

56
00:03:42.480 --> 00:03:48.120
Next, we can import the function into the index file at the top of the file.

57
00:03:48.120 --> 00:03:51.990
Add an import statement with the import from keywords.

58
00:03:54.250 --> 00:03:57.060
The packages can be imported by their names.

59
00:03:57.070 --> 00:03:58.750
What about local files?

60
00:03:58.780 --> 00:04:02.840
A local file can be imported by providing a relative path.

61
00:04:02.860 --> 00:04:06.910
Let's set the path to dot slash page.

62
00:04:09.260 --> 00:04:12.060
The extension can be omitted from the file name.

63
00:04:12.080 --> 00:04:14.550
The JSS extension will be assumed.

64
00:04:14.570 --> 00:04:17.660
Next, we need to give our import a name.

65
00:04:17.690 --> 00:04:19.940
The name can be whatever we want.

66
00:04:19.970 --> 00:04:26.500
The default namespace allows our import statements to assign a custom name to the default value.

67
00:04:26.510 --> 00:04:32.870
In some cases, you might want to use the same name as the function for demonstration purposes.

68
00:04:32.870 --> 00:04:35.210
Let's set the name to page.

69
00:04:37.420 --> 00:04:41.900
Despite importing the page components, the page is not working.

70
00:04:41.920 --> 00:04:44.850
There are two problems with our programme.

71
00:04:44.860 --> 00:04:51.580
Firstly, the react not create element function is not available in the page file.

72
00:04:51.610 --> 00:04:56.820
Secondly, the header component is not imported into the page components.

73
00:04:56.830 --> 00:05:00.570
Let's fix these issues back in the page file.

74
00:05:00.580 --> 00:05:03.700
The first error has to do with our gsx.

75
00:05:03.700 --> 00:05:10.600
As a reminder, G6 elements are converted into the react, not create element function.

76
00:05:10.630 --> 00:05:14.060
However, this function is not available in this file.

77
00:05:14.080 --> 00:05:18.850
To fix the error, we must import this function at the top of the file.

78
00:05:18.850 --> 00:05:22.690
Import the React object from the React package.

79
00:05:24.820 --> 00:05:26.880
Let's address the second issue.

80
00:05:26.890 --> 00:05:28.820
Switch over to the header file.

81
00:05:28.840 --> 00:05:32.170
We're going to add the export keyword to the function.

82
00:05:34.370 --> 00:05:39.210
By omitting the default keyword, we are required to give our function a name.

83
00:05:39.230 --> 00:05:45.230
If I were to remove the function name, an error would get thrown from the editor under the function.

84
00:05:45.260 --> 00:05:47.290
A red squiggly line will appear.

85
00:05:47.300 --> 00:05:50.890
We can hover our mouse over the line to view the error.

86
00:05:50.900 --> 00:05:57.170
The error states that it was expecting a name unless we're exporting a function or variable under the

87
00:05:57.170 --> 00:05:58.490
default namespace.

88
00:05:58.520 --> 00:06:01.130
A name must be given to the export.

89
00:06:01.220 --> 00:06:03.980
Let's add the name back in next.

90
00:06:04.010 --> 00:06:07.850
Import the React object from the React package.

91
00:06:10.060 --> 00:06:14.320
We're importing the React package for the same reason as before.

92
00:06:14.350 --> 00:06:18.410
Our gsx will not work without this package being imported.

93
00:06:18.430 --> 00:06:22.120
Let's head over to the page file at the top of the file.

94
00:06:22.120 --> 00:06:26.080
Import the header file with the import from keywords.

95
00:06:28.270 --> 00:06:34.570
Unlike the default namespace, values exported with a name must be imported by their name.

96
00:06:34.570 --> 00:06:39.130
We can import values by their names by adding a pair of curly brackets.

97
00:06:39.130 --> 00:06:44.080
Inside these brackets we can specify the values to import from the file.

98
00:06:44.080 --> 00:06:46.030
Let's add the header function.

99
00:06:48.090 --> 00:06:49.230
Just like that.

100
00:06:49.230 --> 00:06:51.270
Our app should be fully functional.

101
00:06:52.030 --> 00:06:55.100
If it's not, you may need to refresh the page.

102
00:06:55.120 --> 00:06:58.120
Snack blitz can be buggy from time to time.

103
00:06:58.120 --> 00:07:02.050
We've successfully broken our application into separate files.

104
00:07:02.050 --> 00:07:05.100
This is the power of Java Scripts Module System.

105
00:07:05.110 --> 00:07:09.800
To be clear, this is not a React feature, it's pure JavaScript.

106
00:07:09.820 --> 00:07:12.950
Let's get back into some React specific code.

107
00:07:12.970 --> 00:07:15.040
I'll see you in the next lecture.

