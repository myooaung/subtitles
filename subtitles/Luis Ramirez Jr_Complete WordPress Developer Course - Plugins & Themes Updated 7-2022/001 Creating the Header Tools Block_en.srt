1
00:00:00,120 --> 00:00:05,030
In this lecture, we are going to focus on authentication and registration.

2
00:00:05,040 --> 00:00:10,020
During the production of this course, I thought about using a third party plugin to add a form on the

3
00:00:10,020 --> 00:00:10,620
front end.

4
00:00:10,620 --> 00:00:12,240
To accomplish this task.

5
00:00:12,240 --> 00:00:15,720
However, I ran into two separate problems.

6
00:00:15,720 --> 00:00:18,660
You might encounter these problems as a developer.

7
00:00:18,690 --> 00:00:22,230
The first problem was that the plugins were not customizable.

8
00:00:22,260 --> 00:00:26,070
It was a pain to achieve the desired behavior and appearance.

9
00:00:26,070 --> 00:00:29,550
The second problem was that most plugins had bloat.

10
00:00:29,580 --> 00:00:35,250
The plugins with the most customizable options have additional features that might not be necessary

11
00:00:35,250 --> 00:00:36,300
for our site.

12
00:00:36,330 --> 00:00:39,990
It can be difficult to find a middle grounds at this point.

13
00:00:39,990 --> 00:00:42,720
I figured why not develop my own solution?

14
00:00:42,720 --> 00:00:45,660
So that's what we're going to do in this section.

15
00:00:45,660 --> 00:00:48,900
We are going to allow users to register an accounts.

16
00:00:48,900 --> 00:00:52,050
If they have an account, they will be able to log in.

17
00:00:52,050 --> 00:00:56,130
In my browser, I have a preview of the end product.

18
00:00:56,310 --> 00:00:59,610
The forms will appear inside a modal or pop up.

19
00:00:59,640 --> 00:01:02,610
Users can switch between forms via tabs.

20
00:01:02,610 --> 00:01:05,730
The behavior of this form will be programmed by us.

21
00:01:05,730 --> 00:01:07,590
It's going to take a lot of work.

22
00:01:07,590 --> 00:01:08,880
Let's get started.

23
00:01:09,120 --> 00:01:14,910
The first step in our journey is to create a block for opening the modal in the templates header.

24
00:01:14,910 --> 00:01:19,050
We have a link for opening the modal during the development of our theme.

25
00:01:19,050 --> 00:01:21,600
This UI was with an HTML block.

26
00:01:21,600 --> 00:01:24,600
It's time to convert it into a custom block.

27
00:01:24,630 --> 00:01:29,340
As usual, I'm going to be providing the starter files for this project.

28
00:01:29,340 --> 00:01:33,930
In the resource section of this lecture, I provide a link to a gist.

29
00:01:33,930 --> 00:01:37,470
From this gist you're going to find three files.

30
00:01:37,470 --> 00:01:42,600
Here's what I want you to do inside the source slash block directory.

31
00:01:42,630 --> 00:01:45,270
Create a folder called Header Tools.

32
00:01:45,300 --> 00:01:48,960
Next, create the three files from this list.

33
00:01:48,960 --> 00:01:53,160
They should be created inside the directory for our new block.

34
00:01:53,160 --> 00:01:55,750
Make sure to add the code for each file.

35
00:01:55,770 --> 00:01:57,750
Pause the video and give it a try.

36
00:01:57,780 --> 00:01:58,680
Good luck.

37
00:02:00,450 --> 00:02:01,500
Welcome back.

38
00:02:01,530 --> 00:02:05,430
Hopefully you are able to transfer the files to your project.

39
00:02:05,460 --> 00:02:10,919
Let's quickly review the code inside the source slash blocks folder.

40
00:02:10,949 --> 00:02:13,870
I have created a folder called Header Tools.

41
00:02:13,890 --> 00:02:20,540
It contains the block JSON, indexed JS and main CSS files.

42
00:02:20,550 --> 00:02:25,400
The block dot JSON and main CSS files are nothing special.

43
00:02:25,410 --> 00:02:27,390
They don't contain anything unique.

44
00:02:27,420 --> 00:02:31,260
Let's shift our focus to the index JS file.

45
00:02:31,440 --> 00:02:33,340
I am providing a lot of code.

46
00:02:33,360 --> 00:02:38,790
As I said before, I don't want the course to become too repetitive with block development.

47
00:02:38,820 --> 00:02:41,460
Everything inside this file is nothing new.

48
00:02:41,490 --> 00:02:47,950
We are registering the block with the register block type function inside the return value.

49
00:02:47,970 --> 00:02:51,990
I added the template from the header with two modifications.

50
00:02:52,140 --> 00:02:55,950
The first modification can be found on the root elements.

51
00:02:56,010 --> 00:03:00,780
I replaced the class attribute with the block props variable.

52
00:03:00,810 --> 00:03:05,250
The second modification has been applied to the class attributes.

53
00:03:05,250 --> 00:03:08,600
Scattered throughout the template are various classes.

54
00:03:08,610 --> 00:03:16,050
The class attribute must be replaced with the class name attribute to prevent clashes with JavaScript.

55
00:03:16,320 --> 00:03:19,700
Other than these modifications, everything is the same.

56
00:03:19,710 --> 00:03:23,910
We have a completely static template above the templates.

57
00:03:23,910 --> 00:03:29,220
I've added the inspector controls component with the panel body components.

58
00:03:29,220 --> 00:03:32,280
We are going to be adding controls to the block.

59
00:03:32,400 --> 00:03:34,770
Before we start working on the block.

60
00:03:34,770 --> 00:03:36,960
Let's register it with WordPress.

61
00:03:36,990 --> 00:03:40,830
Open the register locks dot php file.

62
00:03:43,080 --> 00:03:44,840
Inside the blocks array.

63
00:03:44,850 --> 00:03:46,020
Add a new array.

64
00:03:46,050 --> 00:03:49,500
The name of the block will be called header tools.

65
00:03:51,600 --> 00:03:54,630
The header tool's block will be rendered on the server.

66
00:03:54,630 --> 00:04:00,240
Lets register a render callback function by adding the options item to the array.

67
00:04:02,500 --> 00:04:07,690
Set the render callback option to up header tools render CV.

68
00:04:09,850 --> 00:04:13,150
Next, let's create a file called Header Tools.

69
00:04:13,780 --> 00:04:17,320
PHP inside the includes slash blocks folder.

70
00:04:19,529 --> 00:04:20,880
Inside this file.

71
00:04:20,880 --> 00:04:24,780
Define the up header tools render CB function.

72
00:04:26,980 --> 00:04:30,950
The file should automatically be included before testing our code.

73
00:04:30,970 --> 00:04:34,210
Make sure the block has been processed with Webpack.

74
00:04:34,240 --> 00:04:37,150
You may need to restart the scripts package.

75
00:04:37,180 --> 00:04:41,940
You can verify the block's files have been generated by checking the build folder.

76
00:04:41,950 --> 00:04:45,880
After confirming everything is working, let's check out the browser.

77
00:04:46,870 --> 00:04:49,780
Let's modify the experimental page.

78
00:04:51,820 --> 00:04:55,870
Inside this page, insert the header tools block.

79
00:04:58,010 --> 00:04:58,660
The header.

80
00:04:58,670 --> 00:05:01,300
Tool's block appears with the other blocks.

81
00:05:01,310 --> 00:05:03,360
The appearance may look awkward.

82
00:05:03,380 --> 00:05:05,000
That's to be expected.

83
00:05:05,030 --> 00:05:10,010
This block is designed to appear in the header, not the contents of a page.

84
00:05:10,040 --> 00:05:16,750
For now, we are going to be working inside the experimental page after the block has been completed.

85
00:05:16,760 --> 00:05:19,890
We will insert this block in the correct location.

86
00:05:19,910 --> 00:05:24,170
In the next lecture, let's start adding attributes to the block.

