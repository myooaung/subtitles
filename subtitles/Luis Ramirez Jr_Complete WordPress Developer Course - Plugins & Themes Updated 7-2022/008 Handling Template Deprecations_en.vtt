WEBVTT
1
00:00:00.120 --> 00:00:04.720
In this lecture, we will help WordPress understand the update in our block.

2
00:00:04.740 --> 00:00:11.190
As we learned, WordPress cannot extract the content attribute from the block saved in the database.

3
00:00:11.220 --> 00:00:12.870
It's not WordPress fault.

4
00:00:12.900 --> 00:00:18.780
We've updated our template which causes confusion in the resource section of this lecture.

5
00:00:18.810 --> 00:00:22.560
I provide a link to a feature called BLOCK DEPRECATION.

6
00:00:22.680 --> 00:00:27.260
WordPress has two recommendations for handling deprecated blocks.

7
00:00:27.270 --> 00:00:32.710
The first solution is to create another block rather than updating an old block.

8
00:00:32.729 --> 00:00:36.120
You can create a new block with the latest features.

9
00:00:36.150 --> 00:00:41.820
Alternatively, we can update the current block to have a copy of the original template.

10
00:00:41.850 --> 00:00:48.450
This step is more complicated but can be easier for users to upgrade to newer versions of a block.

11
00:00:48.540 --> 00:00:49.980
Let's give it a try.

12
00:00:50.010 --> 00:00:51.720
Head on over to the editor.

13
00:00:51.720 --> 00:00:55.950
Storing the original copy of a block can occupy lots of code.

14
00:00:55.980 --> 00:01:01.660
To reduce clutter, let's create a new file for storing the older version of our block.

15
00:01:01.680 --> 00:01:05.280
Create a file called V one JS.

16
00:01:07.420 --> 00:01:11.940
It's common practice to define older versions of a block with numbers.

17
00:01:11.950 --> 00:01:15.010
The original block can be considered version one.

18
00:01:15.100 --> 00:01:19.000
Our latest copy of The BLOCK can be considered version two.

19
00:01:19.030 --> 00:01:24.280
Inside this file, import an empty object in the default namespace.

20
00:01:26.470 --> 00:01:29.430
Next, we need to start configuring the block.

21
00:01:29.440 --> 00:01:35.360
The object can contain the same configuration details as the block JSON file.

22
00:01:35.380 --> 00:01:38.950
However, we do not need to override every value.

23
00:01:38.980 --> 00:01:43.580
There are only three properties required for deprecated blocks.

24
00:01:43.600 --> 00:01:47.560
Firstly, we must provide a list of supported features.

25
00:01:47.770 --> 00:01:51.170
Our block does not change features regardless.

26
00:01:51.190 --> 00:01:55.180
WordPress requires this information at the top of the file.

27
00:01:55.180 --> 00:01:57.100
Import the block file.

28
00:01:59.320 --> 00:02:06.880
It will be easier to use our block file to add a list of supported features in the object and the supports

29
00:02:06.880 --> 00:02:07.630
option.

30
00:02:09.669 --> 00:02:14.740
And the block data supports property with the spread operator.

31
00:02:16.820 --> 00:02:19.850
Next we must add the attributes property.

32
00:02:19.850 --> 00:02:25.370
Once again, we will spread the block data attributes property into the object.

33
00:02:27.570 --> 00:02:32.480
The attributes from the latest version of the lock are not the same as the original version.

34
00:02:32.490 --> 00:02:35.660
The content attribute has a different selector.

35
00:02:35.670 --> 00:02:39.570
Lets override this attribute by adding it to the object.

36
00:02:42.040 --> 00:02:44.620
Set the type property to string.

37
00:02:46.880 --> 00:02:50.630
Afterward set the source property to HML.

38
00:02:52.750 --> 00:02:58.270
Lastly, set the selector property to the following alert box content.

39
00:02:58.270 --> 00:02:58.900
P.

40
00:03:01.030 --> 00:03:07.780
As mentioned before, the values for this configuration object must contain the original values before

41
00:03:07.780 --> 00:03:11.630
the block was updated in the previous version of this block.

42
00:03:11.650 --> 00:03:14.590
Our content was stored in the paragraph tag.

43
00:03:14.620 --> 00:03:19.480
Therefore, our selector should reflect the older version of the block.

44
00:03:19.510 --> 00:03:22.310
Next, let's add the save function.

45
00:03:22.330 --> 00:03:24.430
This is the most crucial step.

46
00:03:24.460 --> 00:03:29.170
The save function must produce the same template saved in the database.

47
00:03:29.200 --> 00:03:35.680
If it does, WordPress will pass the block validation because it was able to extract the values for

48
00:03:35.680 --> 00:03:37.270
the blocks attributes.

49
00:03:37.300 --> 00:03:39.880
Open these saved js file.

50
00:03:42.100 --> 00:03:42.700
Copy.

51
00:03:42.700 --> 00:03:44.050
They say function.

52
00:03:46.180 --> 00:03:49.780
Pasted into the object from the v one file.

53
00:03:51.910 --> 00:03:57.760
The save function won't be completely functional without the components and functions from the original

54
00:03:57.760 --> 00:03:58.390
block.

55
00:03:58.420 --> 00:04:04.570
Let's head back to the save file to grab the import statements, copy the import statements from the

56
00:04:04.570 --> 00:04:07.630
block editor and components packages.

57
00:04:09.820 --> 00:04:12.310
Paste them into the deprecated file.

58
00:04:14.460 --> 00:04:15.690
We're almost finished.

59
00:04:15.720 --> 00:04:21.839
There's one modification that should be made to the save function in the v one file in the template

60
00:04:21.839 --> 00:04:25.530
search for the rich text content component.

61
00:04:25.560 --> 00:04:28.740
Change the tag name property to P.

62
00:04:31.020 --> 00:04:32.940
The configuration is ready.

63
00:04:32.970 --> 00:04:37.150
Our final step is to register this deprecation with the block.

64
00:04:37.170 --> 00:04:39.870
Open the index JS file.

65
00:04:41.960 --> 00:04:43.430
At the top of the file.

66
00:04:43.430 --> 00:04:45.620
Import the v one file.

67
00:04:47.930 --> 00:04:54.250
Next scroll to the bottom of the block registration object at an array called deprecation.

68
00:04:56.880 --> 00:05:01.340
Inside this array, we can provide a list of configuration objects.

69
00:05:01.350 --> 00:05:04.110
Let's add the v one object.

70
00:05:06.200 --> 00:05:13.100
During the validation process, WordPress will resort to the deprecation option for validating the block.

71
00:05:13.130 --> 00:05:18.800
This assumes that the validation failed with the initial save function of the block.

72
00:05:18.830 --> 00:05:24.980
It will go through every save function until the configuration produces a match to the template from

73
00:05:24.980 --> 00:05:25.940
the database.

74
00:05:25.970 --> 00:05:28.550
Let's refresh the page in the browser.

75
00:05:30.790 --> 00:05:34.450
This time, the blocks are not producing the same error.

76
00:05:34.480 --> 00:05:39.610
WordPress was able to run the save function from the first version of the block.

77
00:05:39.640 --> 00:05:43.700
The blocks template matched the template from the database.

78
00:05:43.720 --> 00:05:46.740
It was able to grab the attributes values.

79
00:05:46.750 --> 00:05:50.260
As you can see, the content appears in the block.

80
00:05:50.290 --> 00:05:54.200
We've successfully upgraded our block to a newer version.

81
00:05:54.220 --> 00:06:00.500
If a user has an older version of our block, they will not have to worry about upgrading our plugin.

82
00:06:00.520 --> 00:06:04.020
The plugin is capable of handling smooth upgrades.

83
00:06:04.030 --> 00:06:05.980
There are pages will not break.

