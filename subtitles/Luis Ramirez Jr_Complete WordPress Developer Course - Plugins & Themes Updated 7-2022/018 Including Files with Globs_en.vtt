WEBVTT
1
00:00:00.150 --> 00:00:05.150
In this lecture, we are going to look at a simple solution for including files.

2
00:00:05.160 --> 00:00:08.860
We are going to be creating over 30 PHP files.

3
00:00:08.880 --> 00:00:13.930
This means we are going to be including each file with PHP in your editor.

4
00:00:13.950 --> 00:00:16.590
Open the indexed php file.

5
00:00:18.890 --> 00:00:23.980
Under the include section, we will be running the include function 30 times.

6
00:00:23.990 --> 00:00:27.890
This part of the course may get repetitive to speed things up.

7
00:00:27.890 --> 00:00:31.910
We should try automatically including files with globs.

8
00:00:34.150 --> 00:00:35.990
Glaub Sounds like a funny word.

9
00:00:36.010 --> 00:00:38.080
I know, but it's a real concept.

10
00:00:38.110 --> 00:00:40.750
The word glob is short for global.

11
00:00:40.780 --> 00:00:44.350
This feature is available in most programming languages.

12
00:00:44.380 --> 00:00:48.310
It's a feature for helping us search for files within a directory.

13
00:00:48.850 --> 00:00:50.480
PHP supports globs.

14
00:00:50.500 --> 00:00:52.570
We can start using it right away.

15
00:00:54.860 --> 00:01:00.290
In the resource section of this lecture, I provide a link to a function called Glob.

16
00:01:00.320 --> 00:01:04.709
PB will allow us to use this feature with a simple function.

17
00:01:04.730 --> 00:01:10.430
You can read through the documentation for the various values you can pass into the function.

18
00:01:10.460 --> 00:01:11.610
Let's give it a try.

19
00:01:11.630 --> 00:01:14.790
To help us include files in your editor.

20
00:01:14.810 --> 00:01:17.630
Open the index stock php file.

21
00:01:19.910 --> 00:01:22.010
Under the include section.

22
00:01:22.010 --> 00:01:24.820
Define a variable called root files.

23
00:01:24.830 --> 00:01:28.580
The value for this variable will be the glob function.

24
00:01:30.800 --> 00:01:35.610
The glove function will return an array of files found, to be clear.

25
00:01:35.630 --> 00:01:37.500
It will return paths.

26
00:01:37.520 --> 00:01:42.070
It's not going to include the files in the indexed PHP file.

27
00:01:42.080 --> 00:01:48.020
After retrieving these paths, we will loop through the array to include the files one by one.

28
00:01:48.050 --> 00:01:51.150
Inside this function, we must provide a pattern.

29
00:01:51.170 --> 00:01:55.030
The pattern will tell PHP how to search for files.

30
00:01:55.040 --> 00:02:01.100
In this case, we should tell PHP to search for files inside the included directory.

31
00:02:01.110 --> 00:02:09.830
Let's pass in the following path up plugin directory dot includes slash asterisk php.

32
00:02:12.200 --> 00:02:17.030
We are using the constant defined in our plugin for pointing to the plugins directory.

33
00:02:17.060 --> 00:02:20.450
Next we are pointing to the includes directory.

34
00:02:20.480 --> 00:02:25.150
Lastly, we're telling the glob extension to search for PHP files.

35
00:02:25.160 --> 00:02:27.920
We can have various php files.

36
00:02:27.950 --> 00:02:30.480
It would be tedious to type each name.

37
00:02:30.500 --> 00:02:34.380
The name can be replaced with an asterisk character.

38
00:02:34.400 --> 00:02:38.830
This character will tell the tool to select any PHP files.

39
00:02:38.840 --> 00:02:40.700
It's a wild card character.

40
00:02:40.790 --> 00:02:45.590
After creating this variable, let's print it with the print r function.

41
00:02:47.830 --> 00:02:50.360
Typically variables can be echoed.

42
00:02:50.380 --> 00:02:55.460
However, arrays and objects are treated differently with the echo statement.

43
00:02:55.480 --> 00:02:59.680
We may not be able to view the contents of a variable if it's an array.

44
00:02:59.710 --> 00:03:03.850
Therefore, we can use a special function for viewing and arrays.

45
00:03:03.850 --> 00:03:07.010
Contents called print are in the browser.

46
00:03:07.030 --> 00:03:09.100
Let's refresh the home page.

47
00:03:11.250 --> 00:03:14.910
At the top of the page we will be able to view the array.

48
00:03:14.940 --> 00:03:22.590
The register blockstack php file was successfully found and each array item a full path is given to

49
00:03:22.590 --> 00:03:23.310
a file.

50
00:03:23.340 --> 00:03:27.150
However, we're missing the files from subdirectories.

51
00:03:27.180 --> 00:03:31.020
To resolve this issue, we need to create another array.

52
00:03:31.050 --> 00:03:34.920
Head back to the editor under the root files array.

53
00:03:34.950 --> 00:03:38.870
Create another array called subdirectory files.

54
00:03:38.880 --> 00:03:42.510
The value for this variable will be the glob function.

55
00:03:44.740 --> 00:03:54.250
The path will be the following up plug in directory dot includes slash asterisk asterisk slash asterisk

56
00:03:54.250 --> 00:03:55.480
dot php.

57
00:03:57.820 --> 00:04:02.320
We are using another set of wild card characters for directories.

58
00:04:02.350 --> 00:04:08.200
This pattern should allow the tool to find all PHP files within any directory.

59
00:04:08.290 --> 00:04:13.480
Let's update the printer function to output the subdirectory files variable.

60
00:04:15.670 --> 00:04:16.390
Next.

61
00:04:16.390 --> 00:04:18.190
Let's refresh the page.

62
00:04:20.300 --> 00:04:25.800
As you can see, the files from the includes slash blocks directory were found.

63
00:04:25.820 --> 00:04:26.640
Perfect.

64
00:04:26.660 --> 00:04:29.870
Let's head back to the editor to make our life easier.

65
00:04:29.900 --> 00:04:36.170
These arrays should be merged, otherwise we would need to perform two loops for each array.

66
00:04:36.200 --> 00:04:38.550
I'd rather work with a single array.

67
00:04:38.600 --> 00:04:42.100
Create one more variable called all files.

68
00:04:42.110 --> 00:04:46.190
The value for this variable will be the array merge function.

69
00:04:48.450 --> 00:04:51.480
The array merge function will merge to arrays.

70
00:04:51.480 --> 00:04:53.920
We can pass them in as arguments.

71
00:04:53.940 --> 00:04:58.020
Let's pass in the root files and subdirectory files.

72
00:04:58.020 --> 00:04:58.860
Arrays.

73
00:05:01.180 --> 00:05:04.170
Next, let's remove the printer function.

74
00:05:04.180 --> 00:05:07.300
We don't need to view the array data anymore.

75
00:05:07.330 --> 00:05:14.470
After removing the print r function, let's create a loop with the for each statement inside the for

76
00:05:14.470 --> 00:05:17.440
each statement pass in the following values.

77
00:05:17.470 --> 00:05:19.750
All files as file name.

78
00:05:22.000 --> 00:05:26.020
The file name variable will represent each item in the array.

79
00:05:26.050 --> 00:05:30.160
As a reminder, the full path is included with the file name.

80
00:05:30.190 --> 00:05:33.860
We don't need to prefix the pass as we've been doing thus far.

81
00:05:33.880 --> 00:05:35.080
Inside the block.

82
00:05:35.080 --> 00:05:39.370
Let's run the include ones function with the file name variable.

83
00:05:41.520 --> 00:05:46.270
I'm introducing a new function for including files called include once.

84
00:05:46.290 --> 00:05:49.770
It's possible that we may include duplicate files.

85
00:05:50.310 --> 00:05:53.670
PHP may complain if we include the same file twice.

86
00:05:53.700 --> 00:05:58.210
It shouldn't happen, but bugs can be introduced to avoid this error.

87
00:05:58.230 --> 00:06:02.640
We can swamp the include function with the include once function.

88
00:06:02.790 --> 00:06:06.540
This function will check if a file has already been included.

89
00:06:06.570 --> 00:06:10.200
If it has, php will not include the file again.

90
00:06:10.230 --> 00:06:14.270
It's a very helpful function for including files at least once.

91
00:06:14.280 --> 00:06:19.290
After adding this function, the other included functions can be safely removed.

92
00:06:21.500 --> 00:06:27.980
By automatically including files we can skip the step of writing the include function to add a file.

93
00:06:28.010 --> 00:06:30.310
This is going to boost our productivity.

94
00:06:30.320 --> 00:06:32.300
Let's refresh the home page.

95
00:06:34.480 --> 00:06:38.240
The page should not produce errors if it hasn't for you.

96
00:06:38.260 --> 00:06:42.330
You can consider the solution a success just to make sure.

97
00:06:42.340 --> 00:06:47.510
Let's try viewing a page that has a block with server side rendering in the header.

98
00:06:47.530 --> 00:06:49.630
Let's try performing a search.

99
00:06:51.890 --> 00:06:55.180
On this page, we have the custom search form.

100
00:06:55.190 --> 00:06:57.620
As you can see, it's fully functional.

101
00:06:57.650 --> 00:06:58.360
Perfect.

102
00:06:58.370 --> 00:07:01.610
We've successfully auto included files.

103
00:07:03.840 --> 00:07:08.160
In this lecture I introduced a new function for including files.

104
00:07:08.700 --> 00:07:14.280
PHP has another set of functions for adding files called require and require.

105
00:07:14.310 --> 00:07:19.340
Once these functions perform the same action as the include function.

106
00:07:19.350 --> 00:07:23.880
However, if a file can't be found, a fatal error is thrown.

107
00:07:24.150 --> 00:07:27.930
There are two types of errors you may encounter in PHP.

108
00:07:27.960 --> 00:07:30.180
Warnings are the first type of error.

109
00:07:30.210 --> 00:07:35.740
These errors will add a message to the document, but they will not stop the script from running.

110
00:07:35.760 --> 00:07:41.490
If you have additional PHP code, it will be executed after the warning has been displayed.

111
00:07:41.790 --> 00:07:44.550
Fatal errors are the second type of error.

112
00:07:44.550 --> 00:07:48.870
If a fatal error occurs, the PHP script will stop running.

113
00:07:48.900 --> 00:07:55.920
It doesn't matter if you have additional PHP code, the rest of the script will not execute the include.

114
00:07:55.920 --> 00:08:00.090
Functions are considered safer for files that aren't urgent.

115
00:08:00.330 --> 00:08:06.140
If you want WordPress to stop running entirely, you should try using the required function.

116
00:08:06.150 --> 00:08:11.010
In most cases the include functions are more than suitable for a plugin.

117
00:08:11.010 --> 00:08:14.520
We shouldn't interrupt WordPress unless we have to.

