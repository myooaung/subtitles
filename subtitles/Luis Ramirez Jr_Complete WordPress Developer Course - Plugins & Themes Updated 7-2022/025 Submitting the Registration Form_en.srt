1
00:00:00,090 --> 00:00:06,090
In this lecture, we are going to finish the registration form by submitting the data to our End Point.

2
00:00:06,120 --> 00:00:10,530
Up until now, we've been using Postman for sending the request.

3
00:00:10,560 --> 00:00:17,030
Most users will probably want to fill out a form as opposed to downloading a program for a registration.

4
00:00:17,040 --> 00:00:19,710
Let's finish the form in your editor.

5
00:00:19,710 --> 00:00:22,260
Open the front end JS file.

6
00:00:24,480 --> 00:00:28,410
Earlier we left off with rendering a message to the browser.

7
00:00:28,440 --> 00:00:32,910
This message will inform the user that their registration is in progress.

8
00:00:32,940 --> 00:00:37,340
After rendering the message, we should start initiating the request.

9
00:00:37,350 --> 00:00:43,500
First, we need to grab the form data at the bottom of the function for handling the submission.

10
00:00:43,500 --> 00:00:46,290
Create a variable called form data.

11
00:00:48,580 --> 00:00:55,420
The value for this variable will be an object inside this object at a property called username.

12
00:00:55,420 --> 00:00:59,080
The value for this property will be the signup form.

13
00:00:59,080 --> 00:01:00,100
DOT query.

14
00:01:00,100 --> 00:01:01,480
Select your function.

15
00:01:03,730 --> 00:01:05,019
Inside the forum.

16
00:01:05,019 --> 00:01:09,190
I've given each input an ID for the user name field.

17
00:01:09,190 --> 00:01:13,060
The ID is the following hash you name.

18
00:01:15,080 --> 00:01:17,600
We're selecting an input element.

19
00:01:17,630 --> 00:01:24,860
Input elements have a special property for extracting the value of an input after selecting the input

20
00:01:24,860 --> 00:01:27,050
at a property called value.

21
00:01:29,200 --> 00:01:32,920
The value property will contain the value from the input.

22
00:01:32,950 --> 00:01:38,810
We are going to do the same thing for the email and password at a property called email.

23
00:01:38,830 --> 00:01:46,960
The value for this property will be the following sign up form dot query selector seu email value.

24
00:01:49,210 --> 00:01:56,530
Lastly, let's add a property called password with the following value sign up form dot query selector.

25
00:01:56,560 --> 00:01:57,970
S2 Password.

26
00:01:57,970 --> 00:01:59,080
Dot value.

27
00:02:01,190 --> 00:02:03,810
The names of our properties are important.

28
00:02:03,830 --> 00:02:08,870
The end point we've created will be expecting our data with these property names.

29
00:02:08,900 --> 00:02:12,140
Otherwise, our request will be rejected.

30
00:02:12,170 --> 00:02:14,350
Our data has been prepared.

31
00:02:14,360 --> 00:02:16,850
It's time to initiate the request.

32
00:02:16,880 --> 00:02:23,060
JavaScript has a special function for sending a request without refreshing the page below.

33
00:02:23,060 --> 00:02:25,940
The object run a function called fetch.

34
00:02:28,940 --> 00:02:31,720
The fetch function has two arguments.

35
00:02:31,730 --> 00:02:34,130
The first argument is the URL.

36
00:02:34,160 --> 00:02:40,210
In the previous lecture, we injected a variable with the URL for the custom endpoint.

37
00:02:40,220 --> 00:02:44,180
The name of the variable was called up auth rest.

38
00:02:44,210 --> 00:02:48,320
This variable is an object with a property called Sign Up.

39
00:02:50,460 --> 00:02:52,640
The second argument is optional.

40
00:02:52,650 --> 00:02:59,700
It's an object of configuration settings for the request for this request or going to modify the default

41
00:02:59,700 --> 00:03:02,370
configuration pass in an object.

42
00:03:02,370 --> 00:03:06,870
Inside this object we are going to add a property called method.

43
00:03:06,870 --> 00:03:09,990
The value for this property will be post.

44
00:03:12,150 --> 00:03:18,340
This property will allow us to change the HTTP method of the request by default.

45
00:03:18,360 --> 00:03:20,460
The method will be set to get.

46
00:03:20,490 --> 00:03:24,690
However, our end point is expecting a post request.

47
00:03:24,720 --> 00:03:28,770
After changing the method, let's add an object called headers.

48
00:03:30,890 --> 00:03:35,800
As we've learned, HTTP requests can have a header and body.

49
00:03:35,810 --> 00:03:41,170
The header section of a request can contain useful information on the request.

50
00:03:41,180 --> 00:03:46,280
We can add or configure existing headers by adding properties to this object.

51
00:03:46,280 --> 00:03:54,230
Inside this object, let's set the content type header to the following value application slash JSON.

52
00:03:56,430 --> 00:04:00,180
By default, a request is sent as plain text.

53
00:04:00,210 --> 00:04:03,030
The endpoint is expecting JSON data.

54
00:04:03,060 --> 00:04:09,260
If we were to send the data as plain text, we may receive errors to avoid this issue.

55
00:04:09,270 --> 00:04:12,060
We can change the contents type header.

56
00:04:12,090 --> 00:04:16,529
This header describes the type of data or file sent to a server.

57
00:04:16,560 --> 00:04:20,430
The value for this header must be the mime type of a file.

58
00:04:20,459 --> 00:04:27,090
For this example, we are setting this header to application slash JSON, which is the content type

59
00:04:27,090 --> 00:04:28,720
for JSON files.

60
00:04:28,740 --> 00:04:35,130
There's one final property that will be added to the object below the headers property at a property

61
00:04:35,130 --> 00:04:36,210
called body.

62
00:04:38,470 --> 00:04:43,180
We must send our data inside the body of the request before we do.

63
00:04:43,210 --> 00:04:46,310
The form data must be converted into a string.

64
00:04:46,330 --> 00:04:52,600
The value for this property will be the following JSON string of I form data.

65
00:04:54,770 --> 00:04:58,880
The JSON object is defined by the JavaScript language.

66
00:04:58,910 --> 00:05:03,060
It contains useful functions for interacting with JSON data.

67
00:05:03,080 --> 00:05:10,130
In this example, we are using the string of function for converting a JavaScript object into a string.

68
00:05:10,160 --> 00:05:13,800
The string will be a copy of the form data object.

69
00:05:13,820 --> 00:05:20,990
We cannot send objects with the fetch function, therefore we must convert it into a string for compatibility.

70
00:05:21,020 --> 00:05:23,700
We're almost finished with the fetch function.

71
00:05:23,720 --> 00:05:25,370
There's one final step.

72
00:05:25,370 --> 00:05:27,650
This function is a synchronous.

73
00:05:30,000 --> 00:05:32,650
JavaScript is an interesting language.

74
00:05:32,670 --> 00:05:37,840
There are two concepts known as synchronous and asynchronous programming.

75
00:05:37,860 --> 00:05:42,420
Synchronous programming is when one line of code is executed at a time.

76
00:05:42,420 --> 00:05:45,960
Throughout this course, we have been writing synchronous code.

77
00:05:45,990 --> 00:05:47,850
Take a look at this example.

78
00:05:47,880 --> 00:05:51,130
The body of the function is entirely synchronous.

79
00:05:51,150 --> 00:05:56,310
The first line of code will run, followed by the second and lastly, the third.

80
00:05:56,340 --> 00:06:00,510
It's very easy to understand the flow of our program's logic.

81
00:06:00,670 --> 00:06:03,720
On the other hand, we have asynchronous code.

82
00:06:03,810 --> 00:06:07,690
Asynchronous code will allow for multiple tasks to run.

83
00:06:07,710 --> 00:06:13,050
We don't have to wait for the previous line of code to finish running before running the next line of

84
00:06:13,050 --> 00:06:13,590
code.

85
00:06:13,620 --> 00:06:15,420
Take a look at this example.

86
00:06:15,420 --> 00:06:18,480
In the body we are running a fetch function.

87
00:06:18,510 --> 00:06:21,120
The fetch function is asynchronous.

88
00:06:21,150 --> 00:06:23,700
A request completion time can vary.

89
00:06:23,730 --> 00:06:28,080
It can complete within a few milliseconds or 100 milliseconds.

90
00:06:28,110 --> 00:06:33,120
We're not guaranteed that the request will complete within a specific time frame.

91
00:06:33,150 --> 00:06:35,220
This is common in JavaScript.

92
00:06:35,250 --> 00:06:38,460
There are functions that can take a while to execute.

93
00:06:38,490 --> 00:06:41,670
Rather than waiting for the request to be complete.

94
00:06:41,700 --> 00:06:45,000
JavaScript will move on to the next line of code.

95
00:06:45,060 --> 00:06:50,250
The final console statement will be executed before the request is complete.

96
00:06:51,640 --> 00:06:58,720
The question becomes how do we identify asynchronous functions in the resource section of this lecture?

97
00:06:58,750 --> 00:07:02,480
I provide a link to the documentation for the fetch function.

98
00:07:02,500 --> 00:07:09,050
The best way to identify asynchronous functions is by viewing the return value of a function.

99
00:07:09,070 --> 00:07:12,370
On this page, scroll to the return section.

100
00:07:12,460 --> 00:07:16,810
According to the documentation, the fetch function returns a promise.

101
00:07:16,840 --> 00:07:19,810
Functions that return promises are considered.

102
00:07:19,810 --> 00:07:23,430
Asynchronous promises are always asynchronous.

103
00:07:23,440 --> 00:07:26,410
In addition, promises will produce a value.

104
00:07:26,440 --> 00:07:28,900
You may be wondering why is this important?

105
00:07:28,930 --> 00:07:31,150
Let's head back to our editors.

106
00:07:31,180 --> 00:07:34,630
We're using the fetch function to register a user.

107
00:07:34,630 --> 00:07:38,080
At the moment, the next line of code will be executed.

108
00:07:38,110 --> 00:07:40,240
However, that's not what we want.

109
00:07:40,270 --> 00:07:42,940
We should wait for the request to be complete.

110
00:07:42,970 --> 00:07:46,600
Otherwise, we may experience unexpected behavior.

111
00:07:46,870 --> 00:07:51,610
There is a feature for telling our function to wait for a promise to be resolved.

112
00:07:51,640 --> 00:07:58,300
Scroll to the top of the function for the event listener before the parentheses add a keyword called

113
00:07:58,300 --> 00:07:59,140
async.

114
00:08:01,330 --> 00:08:05,680
The async keyword will mark a function as a synchronous.

115
00:08:05,680 --> 00:08:10,830
This keyword tells the language that our function will contain asynchronous functions.

116
00:08:10,840 --> 00:08:15,360
We can apply this keyword to regular functions or arrow functions.

117
00:08:15,370 --> 00:08:19,580
The async keyword must always be applied before the function.

118
00:08:19,600 --> 00:08:23,440
Let's head back to the fetch function before this function.

119
00:08:23,440 --> 00:08:25,360
Add the await keyword.

120
00:08:27,500 --> 00:08:34,549
We're using a special syntax called async await the awake keyword will tell JavaScript to wait for the

121
00:08:34,549 --> 00:08:36,020
function to resolve.

122
00:08:36,049 --> 00:08:40,320
We can apply the awake keyword to functions that return a promise.

123
00:08:40,340 --> 00:08:44,330
The next line of code will not run until the request is completed.

124
00:08:44,360 --> 00:08:45,360
That's perfect.

125
00:08:45,380 --> 00:08:50,750
We can safely assume that the request is completed before updating the registration form.

126
00:08:50,870 --> 00:08:57,560
Before we update the form, let's assign the value returned by the fetch function to a variable called

127
00:08:57,560 --> 00:08:58,520
response.

128
00:09:00,630 --> 00:09:05,860
By default, the fetch function returns a promise without the wait keyword.

129
00:09:05,880 --> 00:09:08,970
The value of our variable will be a promise.

130
00:09:08,970 --> 00:09:15,510
However, the await keyword will force the function to return the value resolved by the promise.

131
00:09:15,630 --> 00:09:21,640
A resolved value is the value returned by the promise after the request has been completed.

132
00:09:21,660 --> 00:09:25,860
Let's head back to the documentation page for the fetch function.

133
00:09:28,080 --> 00:09:33,690
According to the documentation, the promise will resolve to an object called response.

134
00:09:33,720 --> 00:09:38,210
Let's click on this link to view the information related to the response.

135
00:09:38,220 --> 00:09:44,590
The response object will contain properties and methods related to the response from the server.

136
00:09:44,610 --> 00:09:51,420
This includes the JSON data returned by our endpoint search for a function called JSON.

137
00:09:53,500 --> 00:09:57,820
We're not interested in most of the information related to the response.

138
00:09:57,850 --> 00:10:00,410
All we care about is the JSON data.

139
00:10:00,430 --> 00:10:05,140
The JSON function will return the JSON data in the responses body.

140
00:10:05,170 --> 00:10:10,510
However, this function is asynchronous because the return value is a promise.

141
00:10:10,690 --> 00:10:16,090
The size of a JSON response can range from a few lines to hundreds of lines.

142
00:10:16,120 --> 00:10:21,430
The larger the response, the longer it will take to process the body of the response.

143
00:10:21,460 --> 00:10:25,120
Therefore, this function has been marked as a promise.

144
00:10:25,150 --> 00:10:28,270
Luckily, we know how to deal with promises.

145
00:10:28,300 --> 00:10:30,310
Let's head back to the editor.

146
00:10:32,400 --> 00:10:38,100
After the response variable defined another variable called response JSON.

147
00:10:38,130 --> 00:10:44,610
The value for this variable will be the response JSON function with the O8 keyword.

148
00:10:46,780 --> 00:10:49,380
There isn't a limit on the weight keyword.

149
00:10:49,390 --> 00:10:52,300
We can apply it as many times as we'd like.

150
00:10:52,300 --> 00:10:58,200
The response JSON variable will hold the JSON data returned by our endpoint.

151
00:10:58,240 --> 00:11:01,090
It's saved to check the status of the response.

152
00:11:01,090 --> 00:11:04,420
After the variable, create a conditional statements.

153
00:11:06,560 --> 00:11:09,230
The condition will be the following response.

154
00:11:09,230 --> 00:11:10,580
JSON status.

155
00:11:10,610 --> 00:11:11,180
Equals.

156
00:11:11,180 --> 00:11:11,690
Equals.

157
00:11:11,690 --> 00:11:13,010
Equals to.

158
00:11:15,340 --> 00:11:20,720
If the status property is set to two, the user will be successfully registered.

159
00:11:20,740 --> 00:11:23,200
Let's update the sign up status.

160
00:11:23,600 --> 00:11:25,540
Inner HTML property.

161
00:11:25,750 --> 00:11:29,620
The value will be a div tag with the following classes.

162
00:11:29,620 --> 00:11:31,030
Modal Status.

163
00:11:31,030 --> 00:11:32,350
Modal Status.

164
00:11:32,350 --> 00:11:33,280
Success.

165
00:11:35,450 --> 00:11:39,480
We are recreating the element with a different set of classes.

166
00:11:39,500 --> 00:11:43,010
These classes will change the background color to green.

167
00:11:43,040 --> 00:11:51,290
Typically, green is associated with success inside this element and the following message Success.

168
00:11:51,290 --> 00:11:53,300
Your account has been created.

169
00:11:55,430 --> 00:11:59,930
After rendering this message, let's run a function called location.

170
00:12:00,410 --> 00:12:01,280
Reload.

171
00:12:03,610 --> 00:12:06,830
The location object is defined by the browser.

172
00:12:06,850 --> 00:12:13,000
This object contains methods and properties for interacting with the URL of the page.

173
00:12:13,000 --> 00:12:17,440
We can change the URL or force the page to refresh.

174
00:12:17,470 --> 00:12:21,490
In this example, we are forcing the page to refresh.

175
00:12:21,490 --> 00:12:24,000
The user has been logged into the site.

176
00:12:24,010 --> 00:12:29,380
We should refresh the page to allow them to view the site as a logged in user.

177
00:12:29,530 --> 00:12:30,890
We're almost finished.

178
00:12:30,910 --> 00:12:33,070
What if the user failed to register?

179
00:12:33,100 --> 00:12:36,670
Let's handle this scenario by adding an LZ block.

180
00:12:38,750 --> 00:12:41,030
First, let's enable the form.

181
00:12:41,030 --> 00:12:45,140
As it stands, visitors will not be able to modify the form.

182
00:12:45,140 --> 00:12:48,980
In an earlier lecture, we disabled the registration form.

183
00:12:48,980 --> 00:12:50,180
After a submission.

184
00:12:50,180 --> 00:12:53,030
We should give them a chance to amend their values.

185
00:12:53,030 --> 00:12:57,170
We can enable the form by removing the disabled attributes.

186
00:12:57,170 --> 00:13:02,870
Let's run a function called sign up field state, not remove attributes.

187
00:13:05,090 --> 00:13:10,410
The remove attribute function will remove an attribute on the selected elements.

188
00:13:10,430 --> 00:13:16,020
In this case, we're removing an attribute from the field set surrounding the inputs.

189
00:13:16,040 --> 00:13:21,650
Let's pass in the disabled attribute to remove it from the field set element.

190
00:13:23,880 --> 00:13:29,160
Next, let's update the sign up status dot enter HTML property.

191
00:13:31,240 --> 00:13:36,070
The value for this property will be a div tag with the following classes.

192
00:13:36,070 --> 00:13:37,390
Modal Status.

193
00:13:37,390 --> 00:13:38,740
Modal Status.

194
00:13:38,740 --> 00:13:39,550
Danger.

195
00:13:41,720 --> 00:13:45,250
Inside this element, let's insert the following message.

196
00:13:45,260 --> 00:13:48,590
Unable to create accounts, please try again later.

197
00:13:50,640 --> 00:13:52,620
We have that final line of code.

198
00:13:52,620 --> 00:13:52,950
Where?

199
00:13:52,950 --> 00:13:53,550
Finished.

200
00:13:53,550 --> 00:13:54,370
Congrats.

201
00:13:54,390 --> 00:14:00,780
The last step is to test our code, save your changes and refresh the experimental page.

202
00:14:03,020 --> 00:14:06,740
If you're logged in, try and logging out before testing the form.

203
00:14:06,740 --> 00:14:09,560
I've already logged out after logging out.

204
00:14:09,590 --> 00:14:13,580
Try submitting the registration form without filling out the fields.

205
00:14:15,790 --> 00:14:20,620
After a few moments, the message will inform us that the registration failed.

206
00:14:20,650 --> 00:14:22,530
The form will become enabled.

207
00:14:22,540 --> 00:14:26,540
We can freely modify the fields after testing a failure.

208
00:14:26,560 --> 00:14:30,220
Let's try creating an account with valid values.

209
00:14:32,310 --> 00:14:35,560
In a few moments, the registration was a success.

210
00:14:35,580 --> 00:14:38,570
The success message should appear temporarily.

211
00:14:38,580 --> 00:14:42,840
We won't be able to view it for long because the page has refreshed.

212
00:14:42,870 --> 00:14:49,400
However, if we look at the top of the page, the WordPress admin bar will appear to the right.

213
00:14:49,410 --> 00:14:51,660
We're presented with our username.

214
00:14:51,660 --> 00:14:52,550
Perfect.

215
00:14:52,560 --> 00:14:56,280
We've successfully created an account and logged in.

216
00:14:56,310 --> 00:15:02,730
It took a while, but we've created a custom solution for registering an accounts and the final set

217
00:15:02,730 --> 00:15:03,600
of lectures.

218
00:15:03,600 --> 00:15:06,390
We are going to start working on the login form.

219
00:15:06,420 --> 00:15:08,270
The process will be faster.

220
00:15:08,280 --> 00:15:11,940
The knowledge we've gained will be applicable to the login form.

221
00:15:11,970 --> 00:15:15,330
Once you're ready, I'll see you in the next lecture.

