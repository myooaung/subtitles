WEBVTT
1
00:00:00.120 --> 00:00:04.860
In this lecture, we are going to explore another way of creating variables.

2
00:00:05.130 --> 00:00:07.710
HP allows us to create constants.

3
00:00:07.740 --> 00:00:13.590
A constant is a variable that cannot have its value updated very special type of variable.

4
00:00:13.590 --> 00:00:19.110
If we attempt to update a constant after it's been initialized, the VP will throw an error.

5
00:00:19.140 --> 00:00:23.460
Constants can be reliable for storing data that never needs to change.

6
00:00:23.460 --> 00:00:30.780
We can store strings, numbers, booleans, etc. You may be asking why would we want to create a constant?

7
00:00:30.780 --> 00:00:35.100
It seems like a variation of a variable but with fewer features.

8
00:00:35.100 --> 00:00:38.250
This is true, but it's incredibly beneficial.

9
00:00:38.280 --> 00:00:42.150
Firstly, constants are faster than regular variables.

10
00:00:42.570 --> 00:00:45.930
PHP does not need to keep track of changes to a variable.

11
00:00:45.930 --> 00:00:48.600
Secondly, constants are reliable.

12
00:00:48.630 --> 00:00:52.170
Let's say you are calculating the total cost of a purchase.

13
00:00:52.200 --> 00:00:53.880
Taxes must be applied.

14
00:00:53.880 --> 00:00:57.300
It's unlikely the tax rate may change for a user.

15
00:00:57.300 --> 00:01:01.320
It's the perfect scenario for storing the tax rate in a constant.

16
00:01:01.350 --> 00:01:04.170
Variables are constantly being passed around.

17
00:01:04.200 --> 00:01:09.360
If we were to use a regular variable, the variable might accidentally get updated.

18
00:01:09.360 --> 00:01:15.390
By using a constant, we are always guaranteed the value of a variable never changes.

19
00:01:15.390 --> 00:01:20.100
For these reasons, constants are considered useful enough chitchat.

20
00:01:20.100 --> 00:01:23.820
Let's try creating a constant in our PHP file.

21
00:01:23.820 --> 00:01:25.920
Let's remove the previous code.

22
00:01:28.130 --> 00:01:33.680
Creating a constant is a completely different process than creating a regular variable.

23
00:01:33.710 --> 00:01:36.800
Constants are declared with the defined function.

24
00:01:38.960 --> 00:01:41.690
The defined function has two arguments.

25
00:01:41.690 --> 00:01:44.660
The first argument is the name of the variable.

26
00:01:44.690 --> 00:01:48.320
For this example, let's call our constant name.

27
00:01:50.520 --> 00:01:54.030
There are three things worth mentioning about this argument.

28
00:01:54.060 --> 00:01:57.480
Firstly, the name must be passed in as a string.

29
00:01:57.510 --> 00:02:01.800
Secondly, the name must adhere to the variable naming rules.

30
00:02:01.800 --> 00:02:06.810
For example, spaces are not allowed, otherwise we would receive an error.

31
00:02:06.840 --> 00:02:10.680
Lastly, the name of the variable is in all caps.

32
00:02:10.740 --> 00:02:14.000
Technically, we don't need to use uppercase letters.

33
00:02:14.010 --> 00:02:17.380
Constants can have lowercase letters in their names.

34
00:02:17.400 --> 00:02:21.620
However, it's common practice to use all uppercase letters.

35
00:02:21.630 --> 00:02:28.290
This convention helps identify constants throughout your career as a WordPress developer, you're going

36
00:02:28.290 --> 00:02:32.820
to notice that this convention is widely adopted for the rest of this course.

37
00:02:32.820 --> 00:02:35.070
We're going to follow this practice.

38
00:02:35.070 --> 00:02:38.580
Let's shift our focus to the second argument.

39
00:02:38.610 --> 00:02:43.350
The second argument of the defined function is the value for the variable.

40
00:02:43.350 --> 00:02:45.210
Let's pass in our name.

41
00:02:47.430 --> 00:02:50.840
After defining a constant, the value may never change.

42
00:02:50.850 --> 00:02:53.970
On the other hand, we are allowed to read the value.

43
00:02:54.120 --> 00:02:57.510
For example, let's echo the name Constant.

44
00:02:59.750 --> 00:03:02.780
A constant value can be accessed by its name.

45
00:03:02.780 --> 00:03:05.780
We don't have to add the dollar sign symbol to the name.

46
00:03:05.780 --> 00:03:09.770
We can add the variable solely by its name in your browser.

47
00:03:09.770 --> 00:03:11.240
Refresh the page.

48
00:03:13.410 --> 00:03:14.160
Perfect.

49
00:03:14.190 --> 00:03:17.370
The value of our constant appears on the page.

50
00:03:17.370 --> 00:03:20.040
By using constants we are guaranteed.

51
00:03:20.040 --> 00:03:21.740
The value never changes.

52
00:03:21.750 --> 00:03:27.170
Throughout this course we will be using a mixture of constants and regular variables.

53
00:03:27.180 --> 00:03:30.360
Let's continue our journey in the next lecture.

