1
00:00:00,840 --> 00:00:04,380
In this lecture we are going to handle the form submission.

2
00:00:04,420 --> 00:00:08,450
PGP is a language that can easily handle form submissions.

3
00:00:08,460 --> 00:00:13,920
Typically, it's the developer's job to handle most of the steps for processing forms.

4
00:00:13,920 --> 00:00:16,620
P PHP is not like other languages.

5
00:00:16,620 --> 00:00:19,680
It's capable of formatting the data in a variable.

6
00:00:19,680 --> 00:00:21,180
Let's get into it.

7
00:00:21,210 --> 00:00:25,620
The first step is to define a function for handling the form submission.

8
00:00:25,620 --> 00:00:31,680
In the resource section of this lecture, I provide a link to a hook called Admin Post.

9
00:00:31,680 --> 00:00:37,410
This hook will run during form submissions to the admin post PHP file.

10
00:00:37,410 --> 00:00:39,000
It's a dynamic hook.

11
00:00:39,000 --> 00:00:42,690
The placeholder can be replaced with the action of the form.

12
00:00:42,690 --> 00:00:48,000
Let's try adding this hook and your editor open the main plugin file.

13
00:00:50,090 --> 00:00:54,740
At the bottom of the hook section at the admin post hook.

14
00:00:56,720 --> 00:01:00,830
For the placeholder, let's refer to the options page file.

15
00:01:02,820 --> 00:01:09,450
In the form search for the input with the action on this input, the value for this attribute can be

16
00:01:09,450 --> 00:01:10,630
added to the hook.

17
00:01:10,650 --> 00:01:12,900
Let's copy it over to our hook.

18
00:01:14,960 --> 00:01:19,760
Next, let's set the function name to up save options.

19
00:01:21,830 --> 00:01:24,250
The name of the function matches the hook.

20
00:01:24,260 --> 00:01:25,660
This is not required.

21
00:01:25,670 --> 00:01:27,430
It's a personal preference.

22
00:01:27,440 --> 00:01:32,750
I like to keep the name consistent to easily associate the function with the form.

23
00:01:32,780 --> 00:01:38,930
After adding this hook, let's define the function in the include slash admin folder.

24
00:01:38,930 --> 00:01:42,650
Create a file called save options dot php.

25
00:01:44,900 --> 00:01:49,100
Inside this function, let's run a function called print r.

26
00:01:51,340 --> 00:01:57,670
Before updating the data, we are going to verify that our function has intercepted the request.

27
00:01:57,700 --> 00:02:03,730
The printer function allows us to output the contents of an array or object form.

28
00:02:03,730 --> 00:02:09,910
Data is formatted as an array in this function, parsing a variable called post.

29
00:02:12,050 --> 00:02:12,920
Afterward.

30
00:02:12,920 --> 00:02:14,690
Let's exit the scripts.

31
00:02:16,760 --> 00:02:19,250
Let's talk about the post variable.

32
00:02:21,370 --> 00:02:24,610
This is not a feature of WordPress behind the scenes.

33
00:02:25,030 --> 00:02:28,330
PHP will work with the server to retrieve the form data.

34
00:02:28,360 --> 00:02:32,500
Browsers will send data from the input elements in the form.

35
00:02:32,500 --> 00:02:35,840
This data is stored in two types of variables.

36
00:02:35,860 --> 00:02:42,940
If we're sending a git request, the data is stored in a variable called gets data sent with a post

37
00:02:42,940 --> 00:02:46,420
method will be stored in a variable called post.

38
00:02:46,540 --> 00:02:49,870
Other methods do not get dedicated variables.

39
00:02:51,950 --> 00:02:55,820
Let's try submitting the form without modifying the values.

40
00:02:57,950 --> 00:03:01,680
Our function has successfully intercepted the request.

41
00:03:01,700 --> 00:03:06,080
As you can see, the form data has been formatted into an array.

42
00:03:06,110 --> 00:03:09,180
This data will be used for updating our option.

43
00:03:09,200 --> 00:03:15,230
In the next lecture, let's begin updating our function to modify the plugin settings.

