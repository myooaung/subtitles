WEBVTT
1
00:00:00.090 --> 00:00:04.510
In this lecture, we are going to explore a powerful feature called State.

2
00:00:04.530 --> 00:00:10.260
React is all about being responsive to the user's interactions, hence why it's called React.

3
00:00:10.290 --> 00:00:12.810
The application we've built is functional.

4
00:00:12.810 --> 00:00:16.950
However, we haven't taken the best approach to creating a clock.

5
00:00:16.950 --> 00:00:20.610
Let's take a moment to examine the current state of our code.

6
00:00:20.760 --> 00:00:26.940
In the heading of the page, we created a clock on every second the timer gets updated.

7
00:00:26.940 --> 00:00:32.250
This effect was achieved by wrapping the render function with a set interval function.

8
00:00:32.250 --> 00:00:35.220
There is one major problem with the application.

9
00:00:35.220 --> 00:00:41.910
As we saw before, the job of the render function is to render the elements created by the create element

10
00:00:41.910 --> 00:00:43.530
function onto the page.

11
00:00:43.530 --> 00:00:44.700
Before it does.

12
00:00:44.700 --> 00:00:47.640
It'll check if the elements need to be updated.

13
00:00:47.640 --> 00:00:53.970
For example, the paragraph tags from the page component do not need to be updated every second.

14
00:00:54.000 --> 00:00:57.750
Therefore React will not update them on the document.

15
00:00:57.870 --> 00:01:00.600
The only element that's changing is the heading.

16
00:01:00.600 --> 00:01:03.900
It's a waste of time to render the entire application.

17
00:01:03.900 --> 00:01:08.370
It would make more sense to restrict the update process to the heading.

18
00:01:08.370 --> 00:01:14.670
Imagine if we have thousands of elements react would need to check every element before proceeding to

19
00:01:14.670 --> 00:01:16.020
update the documents.

20
00:01:16.020 --> 00:01:19.470
This behavior could potentially impact performance.

21
00:01:19.470 --> 00:01:22.170
At most, the render function should run.

22
00:01:22.170 --> 00:01:28.980
Once React has support for updating a specific section of a page, we can skip checking elements that

23
00:01:28.980 --> 00:01:32.370
don't need to be checked inside the index file.

24
00:01:32.370 --> 00:01:36.150
We're going to remove the set interval function from our file.

25
00:01:36.150 --> 00:01:38.730
The render function should be left alone.

26
00:01:40.940 --> 00:01:43.970
Next, let's head over to the header file.

27
00:01:44.000 --> 00:01:47.220
This file contains the logic for rendering the clock.

28
00:01:47.240 --> 00:01:53.540
This component should be responsible for updating the clock variable without the help of external code.

29
00:01:53.570 --> 00:01:57.680
Let's try the same solution again below the clock variable.

30
00:01:57.680 --> 00:02:02.570
Run the set interval function with an interval of 1000 milliseconds.

31
00:02:04.720 --> 00:02:06.070
Inside the function.

32
00:02:06.070 --> 00:02:11.650
Let's update the clock variable to the date dot to locale string function.

33
00:02:13.740 --> 00:02:20.900
As a reminder, the clock variable should be created with the let keyword constants can't be updated.

34
00:02:20.910 --> 00:02:23.040
Next, let's look at the page.

35
00:02:23.040 --> 00:02:26.700
Despite running the interval, the time never changes.

36
00:02:26.700 --> 00:02:32.070
The reason is simple functions are executed once they're not repeatedly called.

37
00:02:32.070 --> 00:02:36.150
As a result, the return value of our function is returned.

38
00:02:36.150 --> 00:02:42.780
Once we can improve this behavior by logging a message to the console below the function, lets log

39
00:02:42.780 --> 00:02:43.590
a message.

40
00:02:45.730 --> 00:02:51.910
Stack Blitz has a console for the page that can be opened by clicking the bar below in the console.

41
00:02:51.940 --> 00:02:53.990
Our message gets rendered once.

42
00:02:54.010 --> 00:02:56.320
Not exactly what we were aiming for.

43
00:02:56.350 --> 00:03:00.170
Our goal is to update the template when the variable changes.

44
00:03:00.190 --> 00:03:02.710
React doesn't care about our variables.

45
00:03:02.740 --> 00:03:05.260
It will not bother watching them for updates.

46
00:03:05.260 --> 00:03:09.970
We can tell react to care by creating them as state variables.

47
00:03:12.140 --> 00:03:17.120
Throughout your career as a React developer state is a word you'll hear a lot.

48
00:03:17.150 --> 00:03:21.370
State refers to the data for your application or components.

49
00:03:21.380 --> 00:03:24.830
Data can be stored in your application as variables.

50
00:03:24.860 --> 00:03:29.510
Alternatively, data can be fed into an application from a database.

51
00:03:29.510 --> 00:03:32.300
State refers to both types of data.

52
00:03:34.530 --> 00:03:38.710
Like I said before, React doesn't care about the clock variable.

53
00:03:38.730 --> 00:03:44.640
We can make it clear by wrapping the value with a function called react dot you state.

54
00:03:46.880 --> 00:03:49.940
React has a function called use state.

55
00:03:49.970 --> 00:03:53.810
The purpose of this function is to register data with a component.

56
00:03:53.810 --> 00:04:00.530
By using this function, React will recognize the data passed into it as important and will keep track

57
00:04:00.530 --> 00:04:03.110
of the value for you inside the function.

58
00:04:03.110 --> 00:04:04.820
We can pass on a value.

59
00:04:04.850 --> 00:04:06.560
The value can be anything.

60
00:04:06.560 --> 00:04:11.370
We can store strings, numbers, dates, objects and arrays.

61
00:04:11.390 --> 00:04:14.700
The use state function will return an array.

62
00:04:14.720 --> 00:04:17.630
Inside this array, there are two items.

63
00:04:17.630 --> 00:04:19.910
The first item is the current value.

64
00:04:19.940 --> 00:04:23.180
The second item is a function for updating the value.

65
00:04:23.210 --> 00:04:25.730
Let's log the clock variable.

66
00:04:30.850 --> 00:04:33.040
Next, let's check out the console.

67
00:04:33.040 --> 00:04:37.180
As you can see, an array has been logged in the first index.

68
00:04:37.180 --> 00:04:41.040
We have the value from the two low cal string function.

69
00:04:41.050 --> 00:04:43.180
The second index has a function.

70
00:04:43.180 --> 00:04:45.730
We should never directly modify the array.

71
00:04:45.730 --> 00:04:49.540
Instead, this function should be called for updating the value.

72
00:04:49.540 --> 00:04:53.260
It will help react refresh the template for our components.

73
00:04:53.260 --> 00:04:57.340
For readability, we should extract this information from the array.

74
00:04:57.370 --> 00:05:02.140
It's common practice to structure the value from the use state function.

75
00:05:02.140 --> 00:05:05.770
For readability reasons, let's structure the value.

76
00:05:05.770 --> 00:05:09.730
As we've learned, the structuring and array is straightforward.

77
00:05:09.880 --> 00:05:13.510
The first name will be matched with the first item in the array.

78
00:05:13.540 --> 00:05:16.690
Let's store the current value under the same name.

79
00:05:18.900 --> 00:05:22.560
As for the function, set the name to set clock.

80
00:05:24.760 --> 00:05:28.680
It's common practice for the function name to match the previous name.

81
00:05:28.690 --> 00:05:32.170
However, it should be prefixed with the word set.

82
00:05:32.200 --> 00:05:36.610
This indicates that it's a function for setting the new value of the state.

83
00:05:36.640 --> 00:05:39.080
You'll come across this practice often.

84
00:05:39.100 --> 00:05:42.370
We're going to follow this practice for the rest of the course.

85
00:05:42.400 --> 00:05:47.740
The next step is to update the rest of our components in the set interval function.

86
00:05:47.740 --> 00:05:53.440
Let's replace the variable reassignment by wrapping the value with the set clock function.

87
00:05:55.640 --> 00:05:57.320
Let's check out the page.

88
00:05:57.350 --> 00:05:59.210
The timer is functional again.

89
00:05:59.300 --> 00:06:03.200
Every second the timer gets updated just to make sure.

90
00:06:03.230 --> 00:06:05.000
Let's check out the console.

91
00:06:05.030 --> 00:06:09.530
Previously, we logged the message to tell us if the function was executed.

92
00:06:09.560 --> 00:06:11.760
Things will be different this time around.

93
00:06:11.780 --> 00:06:17.810
The message gets logged every second despite not being wrapped inside the set interval function.

94
00:06:18.020 --> 00:06:21.710
By updating the state, React will execute the function.

95
00:06:21.740 --> 00:06:24.850
This means our console statement will log a message.

96
00:06:24.860 --> 00:06:29.390
It'll be able to update our template with the correct value from the clock.

97
00:06:29.420 --> 00:06:32.870
Overall, the used state function helps react.

98
00:06:32.870 --> 00:06:34.290
Keep track of our data.

99
00:06:34.310 --> 00:06:40.490
If you would like changes to be reflected in your template, you should store them in a component state

100
00:06:40.490 --> 00:06:42.500
which is managed by React.

