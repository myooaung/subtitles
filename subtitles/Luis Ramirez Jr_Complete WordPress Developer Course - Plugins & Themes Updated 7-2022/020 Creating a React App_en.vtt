WEBVTT
1
00:00:00.090 --> 00:00:05.610
In this lecture, we will start creating a React app by rendering a message to the browser.

2
00:00:05.700 --> 00:00:09.780
Our goal is to create the simplest React app possible.

3
00:00:09.810 --> 00:00:13.930
We're going to continue working inside the Stack Blitz project.

4
00:00:13.950 --> 00:00:16.620
If you haven't, you should create an account.

5
00:00:16.620 --> 00:00:21.520
By doing so, you can revisit your project after opening your project.

6
00:00:21.540 --> 00:00:24.030
Open the index JS file.

7
00:00:26.220 --> 00:00:31.270
Inside this file we're going to import React by typing the following code.

8
00:00:31.290 --> 00:00:32.040
Import.

9
00:00:32.040 --> 00:00:34.110
React from react.

10
00:00:36.180 --> 00:00:39.260
Do you remember the include function from PHP?

11
00:00:39.300 --> 00:00:42.270
It allowed us to share code between files.

12
00:00:42.300 --> 00:00:47.460
The idea of separating logic into separate files is not special to PHP.

13
00:00:47.610 --> 00:00:53.100
Various languages offer solutions for breaking an application into multiple files.

14
00:00:53.130 --> 00:00:58.150
JavaScript has a system called modules for sharing code between files.

15
00:00:58.170 --> 00:01:01.060
It's more complex than PHP solution.

16
00:01:01.080 --> 00:01:03.330
Let's break down this line of code.

17
00:01:03.600 --> 00:01:10.350
A file is functions and variables can be loaded into a file by typing the import statements after the

18
00:01:10.350 --> 00:01:11.430
import statement.

19
00:01:11.460 --> 00:01:15.480
We must specify a name for the code that gets imported.

20
00:01:15.510 --> 00:01:18.000
You can think of it as a variable name.

21
00:01:18.000 --> 00:01:24.480
Unlike PHP, functions that can be found in another file are exposed via a variable.

22
00:01:24.660 --> 00:01:30.090
If we want to reference functions from other packages, we can do so through our variable.

23
00:01:30.480 --> 00:01:34.560
Afterward, we need to tell JavaScript where to find the file.

24
00:01:34.560 --> 00:01:40.350
And this example we're telling JavaScript to import code from a package called React.

25
00:01:40.380 --> 00:01:46.230
The packages name must be the same name that can be found in the package JSON file.

26
00:01:46.260 --> 00:01:48.370
Node is an intelligent tool.

27
00:01:48.390 --> 00:01:52.020
We're not specifying a path, but the name of a package.

28
00:01:52.020 --> 00:01:55.500
Regardless, node will be able to find the package.

29
00:01:55.590 --> 00:01:58.890
We've officially imported react into our project.

30
00:01:58.920 --> 00:02:03.330
The next step is to begin using its functions for creating an app.

31
00:02:03.360 --> 00:02:09.870
The question is where can we find a list of functions that are available in the resource section of

32
00:02:09.870 --> 00:02:10.800
this lecture?

33
00:02:10.830 --> 00:02:15.170
I provide a link to the React API documentation page.

34
00:02:15.180 --> 00:02:21.710
This page will have a complete list of functions, examples and descriptions for this package.

35
00:02:21.720 --> 00:02:26.010
React offers various functions, but we're only going to need one.

36
00:02:26.250 --> 00:02:30.240
Let's head back to our projects below the import statement.

37
00:02:30.240 --> 00:02:32.820
Create a variable called H one.

38
00:02:32.850 --> 00:02:38.490
The value for this variable will be the react dot create element function.

39
00:02:40.680 --> 00:02:44.020
We're starting with a function called create elements.

40
00:02:44.040 --> 00:02:48.670
This function will create an element that can be displayed on the documents.

41
00:02:48.690 --> 00:02:50.810
It has three arguments.

42
00:02:50.820 --> 00:02:53.760
The first argument is the name of the element.

43
00:02:53.760 --> 00:02:55.770
We're trying to create a heading.

44
00:02:55.770 --> 00:02:58.980
Let's set the name of the element to H one.

45
00:03:01.210 --> 00:03:06.130
Next, we need to provide a list of properties a.k.a attributes.

46
00:03:06.130 --> 00:03:09.730
For this example, we're not going to have attributes.

47
00:03:09.730 --> 00:03:11.530
Let's pass in null.

48
00:03:13.740 --> 00:03:14.940
By passing in.

49
00:03:14.940 --> 00:03:18.690
No, React will not add attributes to the elements.

50
00:03:18.720 --> 00:03:22.590
The last argument is the inner content of the elements.

51
00:03:22.620 --> 00:03:27.290
Typically, developers will add text or load additional elements.

52
00:03:27.300 --> 00:03:29.970
Let's keep it simple by rendering text.

53
00:03:32.060 --> 00:03:34.740
We've successfully created an element.

54
00:03:34.760 --> 00:03:38.220
However, this element does not appear on the page.

55
00:03:38.240 --> 00:03:42.520
React doesn't automatically insert the element into the page.

56
00:03:42.530 --> 00:03:44.970
The element is created in memory.

57
00:03:44.990 --> 00:03:46.970
This behavior is a good thing.

58
00:03:46.970 --> 00:03:51.800
We don't want react to start inserting content wherever it pleases.

59
00:03:51.800 --> 00:03:55.630
The element must be manually inserted into the document.

60
00:03:55.640 --> 00:03:57.260
That's our next step.

61
00:03:57.290 --> 00:04:03.200
At the top of the file we are going to import the React Dom slash client package.

62
00:04:05.400 --> 00:04:08.410
React is not just a library for web development.

63
00:04:08.430 --> 00:04:12.490
Mobile and desktop applications can be developed with React.

64
00:04:12.510 --> 00:04:16.470
The core of a React can be found under the React package.

65
00:04:16.470 --> 00:04:22.200
The job of the React package is to manage elements, however it does not render them.

66
00:04:22.410 --> 00:04:30.660
If we're interested in inserting a react element into the documents, we must import the React Dom package.

67
00:04:30.690 --> 00:04:34.950
This package exports function for interacting with the browser.

68
00:04:34.980 --> 00:04:42.570
Both packages will be necessary for this example below the H one variable define a variable called root

69
00:04:42.570 --> 00:04:43.360
element.

70
00:04:43.400 --> 00:04:47.700
Its value will be the document dot, query, select or function.

71
00:04:49.900 --> 00:04:54.580
Before rendering the element onto the page, we must select an element.

72
00:04:54.610 --> 00:04:57.610
This element will be the location of our application.

73
00:04:57.610 --> 00:05:01.480
We're using the query selector function to select the element.

74
00:05:01.510 --> 00:05:07.390
If you can recall, the starter project has a div element with an ID of root.

75
00:05:07.420 --> 00:05:09.400
Let's select this element.

76
00:05:11.630 --> 00:05:17.870
Next we must instruct react to treat this element as the root element of the application.

77
00:05:17.990 --> 00:05:20.240
Create a variable called root.

78
00:05:20.270 --> 00:05:23.270
Its value will be the react dom dot.

79
00:05:23.330 --> 00:05:24.860
Create root function.

80
00:05:27.120 --> 00:05:30.110
This function accepts an element from the document.

81
00:05:30.120 --> 00:05:33.060
Let's pass in the root element variable.

82
00:05:35.120 --> 00:05:36.270
Everything is ready.

83
00:05:36.290 --> 00:05:38.780
Time to start rendering the page below.

84
00:05:38.810 --> 00:05:42.740
Our variables run a function called root render.

85
00:05:45.020 --> 00:05:49.690
The render function is responsible for displaying an element on the page.

86
00:05:49.700 --> 00:05:53.940
It has one argument which is the element created by React.

87
00:05:53.960 --> 00:05:56.660
Let's pass in the H one variable.

88
00:05:58.850 --> 00:05:59.710
Perfect.

89
00:05:59.720 --> 00:06:02.030
Our text has been rendered on the page.

90
00:06:02.030 --> 00:06:06.890
We've successfully created the most basic React application possible.

91
00:06:06.920 --> 00:06:10.390
However, what if we want to render multiple elements?

92
00:06:10.400 --> 00:06:11.750
That's possible too.

93
00:06:11.780 --> 00:06:14.360
Let's take our example a step further.

94
00:06:14.480 --> 00:06:20.420
As we discussed before, elements are created with the create element function.

95
00:06:20.450 --> 00:06:24.510
The third argument can be a string for representing text.

96
00:06:24.530 --> 00:06:29.600
However, we can change this to an array similar to HTML.

97
00:06:29.630 --> 00:06:32.800
React elements can have children elements.

98
00:06:32.810 --> 00:06:36.800
Children elements can be inserted by adding them into an array.

99
00:06:36.830 --> 00:06:40.190
Let's convert the third argument into an array.

100
00:06:42.590 --> 00:06:43.790
After doing so.

101
00:06:43.790 --> 00:06:48.110
Let's change the element from an H one tag to a div tag.

102
00:06:50.290 --> 00:06:57.490
The variable name will be updated to be sure to update the variable name inside the render function.

103
00:06:59.830 --> 00:07:03.110
As an exercise, try loading three elements.

104
00:07:03.130 --> 00:07:05.560
They can be any elements you want.

105
00:07:05.620 --> 00:07:07.300
Add them to the array.

106
00:07:07.330 --> 00:07:09.730
Pause the video and give it a try.

107
00:07:15.080 --> 00:07:16.160
Welcome back.

108
00:07:16.160 --> 00:07:19.510
If you're able to add three elements, that's great.

109
00:07:19.520 --> 00:07:21.470
If not, that's fine too.

110
00:07:21.500 --> 00:07:25.250
Let's go over the solution together inside the array.

111
00:07:25.280 --> 00:07:29.270
Let's run the react dot create element function.

112
00:07:31.430 --> 00:07:35.410
It doesn't matter if you're creating a parent or children element.

113
00:07:35.420 --> 00:07:39.160
The create element function can handle both scenarios.

114
00:07:39.170 --> 00:07:41.960
Let's run this function two more times.

115
00:07:44.140 --> 00:07:48.820
I'm going to create a heading element with two paragraph elements.

116
00:07:50.940 --> 00:07:54.870
If your solution has different elements, that's completely fine.

117
00:07:54.870 --> 00:07:59.820
As long as you can create elements, you can consider your solution a success.

118
00:07:59.850 --> 00:08:04.980
Next, I'm going to set the second argument for each element to know.

119
00:08:07.300 --> 00:08:10.670
We aren't going to add attributes to our elements.

120
00:08:10.690 --> 00:08:14.680
Lastly, I'm going to add dummy text to each element.

121
00:08:16.880 --> 00:08:20.330
Overall, your solution should be similar to mine.

122
00:08:20.450 --> 00:08:24.950
If we were to save our changes, the page should reflect our changes.

123
00:08:24.980 --> 00:08:29.750
Creating multiple elements is cool, but why would we want to use React?

124
00:08:29.780 --> 00:08:34.130
Recreating this behavior can be done through plain HTML.

125
00:08:34.159 --> 00:08:36.500
JavaScript isn't necessary.

126
00:08:36.620 --> 00:08:43.200
Truthfully, this example demonstrates what React can do, but not why we would want to use it.

127
00:08:43.220 --> 00:08:46.740
React shines when trying to render dynamic content.

128
00:08:46.760 --> 00:08:49.670
Let's look at an example in the next lecture.

