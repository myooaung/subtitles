WEBVTT
1
00:00:00.180 --> 00:00:04.200
In this lecture, we will begin rendering the list of posts.

2
00:00:04.230 --> 00:00:08.590
Thus far, we have been working with blocks that produce static content.

3
00:00:08.610 --> 00:00:12.370
However, rendering a list of posts should be dynamic.

4
00:00:12.390 --> 00:00:16.650
If a new post is added, the block should render the latest post.

5
00:00:16.680 --> 00:00:18.730
What if there are too many posts?

6
00:00:18.750 --> 00:00:21.180
Pagination is another concern.

7
00:00:21.270 --> 00:00:26.310
Fortunately, WordPress has a special block for addressing these dilemmas.

8
00:00:26.340 --> 00:00:28.910
It's called the query loop block.

9
00:00:28.920 --> 00:00:35.250
This block will handle grabbing posts from the database, rendering them and adding pagination.

10
00:00:35.280 --> 00:00:37.440
It's an extremely flexible block.

11
00:00:37.470 --> 00:00:45.360
Posts can be filtered by post type, taxonomies, etc. In the resource section of this lecture, I provide

12
00:00:45.360 --> 00:00:49.450
a link to an article for exploring this block settings.

13
00:00:49.470 --> 00:00:52.980
For our case, we need to render the latest posts.

14
00:00:53.010 --> 00:00:57.910
Luckily, the default behavior of this block is to render the latest post.

15
00:00:57.930 --> 00:00:59.550
It'll work out of the blocks.

16
00:00:59.550 --> 00:01:00.910
Let's give it a try.

17
00:01:00.930 --> 00:01:05.550
In the first column, we are going to insert the query loop block.

18
00:01:07.730 --> 00:01:08.840
To get started.

19
00:01:08.840 --> 00:01:11.780
WordPress will recommend various layouts.

20
00:01:11.780 --> 00:01:14.780
You're more than free to explore these layouts.

21
00:01:14.810 --> 00:01:19.520
Our design uses a slightly different layout than the default options.

22
00:01:19.520 --> 00:01:23.480
Therefore we're going to click on the start blank option.

23
00:01:23.600 --> 00:01:27.170
WordPress will prompt us to select a basic template.

24
00:01:27.170 --> 00:01:30.200
Let's choose the title and date option.

25
00:01:32.510 --> 00:01:36.810
After a few moments, WordPress will display a list of posts.

26
00:01:36.830 --> 00:01:41.730
These are real posts from our site to get a better idea of what's going on.

27
00:01:41.750 --> 00:01:43.640
Let's check out the list for you.

28
00:01:43.670 --> 00:01:45.770
We've inserted a single block.

29
00:01:45.770 --> 00:01:49.420
However, WordPress will insert additional blocks.

30
00:01:49.430 --> 00:01:52.880
The query loop block is not an independent block.

31
00:01:52.880 --> 00:01:56.870
It should be paired with several other blocks to be fully functional.

32
00:01:59.080 --> 00:02:01.440
There are two blocks worth mentioning.

33
00:02:01.450 --> 00:02:04.810
The query loop block is the most important block.

34
00:02:04.840 --> 00:02:08.080
Its job is to grab posts from the database.

35
00:02:08.080 --> 00:02:11.440
However, it doesn't do anything with the posts.

36
00:02:11.470 --> 00:02:17.770
If we were to add the query loop block without additional blocks, nothing would appear on the page.

37
00:02:17.770 --> 00:02:25.300
The responsibility of rendering content is left to the post template block after the query loop BLOCK

38
00:02:25.300 --> 00:02:29.410
grabs the post data, this data is stored in an array.

39
00:02:29.440 --> 00:02:33.820
The post template block will loop through the array with PHP.

40
00:02:33.850 --> 00:02:40.990
In the old days of WordPress, theme developers had to write the logic for the loop with full site editing.

41
00:02:40.990 --> 00:02:46.840
This job can be handled by WordPress core blocks, thus making our lives easier.

42
00:02:49.050 --> 00:02:54.740
For this reason it is not necessary to create multiple post template blocks.

43
00:02:54.750 --> 00:03:01.530
This block is capable of always rendering the correct number of posts inside the post template block.

44
00:03:01.530 --> 00:03:08.850
We have additional blocks for rendering specific pieces of data related to the post before moving forward.

45
00:03:08.850 --> 00:03:11.760
There is an adjustment I'd like to make to the query.

46
00:03:11.760 --> 00:03:17.220
By default, the query loop block will grab the latest post from the database.

47
00:03:17.220 --> 00:03:20.970
While this seems great, there are some issues with this query.

48
00:03:20.970 --> 00:03:24.510
The index template will be applied to all pages.

49
00:03:24.510 --> 00:03:29.400
This includes search results, category posts and single posts.

50
00:03:29.400 --> 00:03:34.110
As it is, the same list of posts will appear on all pages.

51
00:03:34.230 --> 00:03:37.470
The list of posts should be unique to each page.

52
00:03:37.500 --> 00:03:40.680
There's another behavior that we can take advantage of.

53
00:03:41.980 --> 00:03:46.420
First things first, let's talk about the concept of a query.

54
00:03:46.450 --> 00:03:50.800
A query can mean various things in relation to WordPress.

55
00:03:50.830 --> 00:03:58.020
A query is a request for data from a database, hence why the block is called query loop.

56
00:03:58.030 --> 00:04:01.250
It's a block that queries the database for posts.

57
00:04:01.270 --> 00:04:04.120
These posts can be looped through.

58
00:04:04.270 --> 00:04:08.970
Behind the scenes, WordPress will perform a query on every page.

59
00:04:08.980 --> 00:04:15.580
It doesn't matter what's on the page, we can be viewing the home search or for oh four pages.

60
00:04:15.610 --> 00:04:17.920
A query is always performed.

61
00:04:17.920 --> 00:04:20.649
The query is based on the current URL.

62
00:04:20.680 --> 00:04:25.960
WordPress is an extremely intelligent platform based on the URL.

63
00:04:25.960 --> 00:04:32.170
WordPress will query the database for posts that should be rendered for the respective URL.

64
00:04:32.380 --> 00:04:37.750
For example, if we are on the home page, the query will select the latest posts.

65
00:04:37.750 --> 00:04:44.560
If we're on the search page, the query will select posts based on the search term, so on and so forth.

66
00:04:44.560 --> 00:04:47.200
This process is completely automated.

67
00:04:47.770 --> 00:04:51.610
The query loop block is performing a separate query.

68
00:04:51.610 --> 00:04:57.220
Therefore, every page request will have at least two queries, which is not ideal.

69
00:04:57.220 --> 00:05:02.980
Rather than letting the query loop block perform a query, we should tell it to use the query for the

70
00:05:02.980 --> 00:05:03.610
page.

71
00:05:03.610 --> 00:05:07.000
Luckily, there's an option for this exact behavior.

72
00:05:07.000 --> 00:05:10.210
Select the query loop block from the list.

73
00:05:10.360 --> 00:05:14.560
Next, we will modify the settings under the Settings Panel.

74
00:05:14.560 --> 00:05:17.980
There's an option called inherit query from loop.

75
00:05:17.980 --> 00:05:19.630
Turn this option on.

76
00:05:19.630 --> 00:05:25.180
By turning this option on the query loop block will not create an additional query.

77
00:05:25.180 --> 00:05:29.050
Instead, it'll use WordPress as query for the page.

78
00:05:29.050 --> 00:05:33.400
Whatever results are generated by the page will be used by the block.

79
00:05:33.460 --> 00:05:35.830
There is a downside to this option.

80
00:05:35.860 --> 00:05:38.770
The block will not allow us to refine the query.

81
00:05:38.770 --> 00:05:42.070
We are completely stuck with the results by WordPress.

82
00:05:42.070 --> 00:05:45.280
For our case, this behavior is completely fine.

83
00:05:45.280 --> 00:05:47.170
Let's save our templates.

84
00:05:47.170 --> 00:05:51.970
In the next lecture we are going to customize the template for the query.

