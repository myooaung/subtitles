WEBVTT
1
00:00:00.240 --> 00:00:04.800
In this lecture, we are going to prevent duplicate users from appearing in our site.

2
00:00:04.830 --> 00:00:09.130
It's possible that a username or email may be taken from somebody else.

3
00:00:09.150 --> 00:00:12.180
If that's the case, we should reject the request.

4
00:00:12.210 --> 00:00:16.320
WordPress has a set of functions for helping us prevent this issue.

5
00:00:16.350 --> 00:00:17.770
Let's give them a try.

6
00:00:17.790 --> 00:00:21.540
In your editor, open the sign up php file.

7
00:00:23.790 --> 00:00:30.380
After the conditional statement, we are going to extract the values from the params array into variables.

8
00:00:30.390 --> 00:00:33.900
First, let's create a variable called email.

9
00:00:33.930 --> 00:00:38.040
The value for this variable will be the sanitize email function.

10
00:00:40.080 --> 00:00:42.470
So far we've been escaping data.

11
00:00:42.480 --> 00:00:46.590
If we're outputting data onto the document, we should escape our data.

12
00:00:46.620 --> 00:00:48.730
Things are different this time around.

13
00:00:48.750 --> 00:00:51.600
We're trying to insert data into the database.

14
00:00:51.600 --> 00:00:56.220
Data that will be inserted into our database should be sanitized.

15
00:00:56.250 --> 00:00:59.790
WordPress has a few functions for sanitizing data.

16
00:00:59.820 --> 00:01:03.560
The sanitize email function will sanitize an email.

17
00:01:03.570 --> 00:01:07.230
The sanitized email will be returned by this function.

18
00:01:07.230 --> 00:01:10.830
Let's pass in the params email variable.

19
00:01:12.940 --> 00:01:16.560
Next, let's create a variable called username.

20
00:01:16.570 --> 00:01:21.250
The value for this variable will be the sanitize text field function.

21
00:01:23.410 --> 00:01:27.790
This function will return a sanitized value for regular text.

22
00:01:27.820 --> 00:01:31.390
Let's pass in the params username variable.

23
00:01:33.490 --> 00:01:37.220
Lastly, let's create a variable called password.

24
00:01:37.240 --> 00:01:44.710
The value for this variable will be the sanitized text field function with the params password variable.

25
00:01:46.990 --> 00:01:51.820
Our variables are ready, we can proceed to check for duplicate users.

26
00:01:51.820 --> 00:01:55.420
Below the variables add a conditional statement.

27
00:01:57.540 --> 00:02:00.870
Inside the block return the response variable.

28
00:02:03.050 --> 00:02:09.520
If the user exists, we are going to return the response variable inside the parentheses.

29
00:02:09.530 --> 00:02:11.880
Let's start adding our conditions.

30
00:02:11.900 --> 00:02:14.660
There will be a total of three conditions.

31
00:02:14.690 --> 00:02:18.080
The first condition will be the user name exists.

32
00:02:18.080 --> 00:02:18.830
Function.

33
00:02:20.930 --> 00:02:23.570
This function is defined by WordPress.

34
00:02:23.600 --> 00:02:29.410
It'll check the database for a username we can pass in a username as an argument.

35
00:02:29.420 --> 00:02:32.030
Let's pass in the username variable.

36
00:02:34.230 --> 00:02:38.130
Conveniently, this function will return a boolean value.

37
00:02:38.130 --> 00:02:45.150
If the user name exists, the function will return true, thus causing our function to return early.

38
00:02:45.150 --> 00:02:47.580
Let's add an OR operator.

39
00:02:49.740 --> 00:02:53.190
The next condition will be the is email function.

40
00:02:55.300 --> 00:03:00.010
This is another function defined by WordPress as the name suggests.

41
00:03:00.040 --> 00:03:03.280
It'll check the format of an email before checking.

42
00:03:03.280 --> 00:03:04.590
If an email is taken.

43
00:03:04.600 --> 00:03:07.060
We should check the format of the email.

44
00:03:07.060 --> 00:03:12.190
If the email is in an invalid format, there isn't a point in checking the database.

45
00:03:12.190 --> 00:03:14.920
Let's pass in the email variable.

46
00:03:17.050 --> 00:03:19.990
This function will return a boolean value.

47
00:03:19.990 --> 00:03:23.740
If the email is valid, the function will return true.

48
00:03:23.770 --> 00:03:27.670
However, the goal is to check if the email is invalid.

49
00:03:27.670 --> 00:03:30.970
Let's add the not operator to the function.

50
00:03:30.970 --> 00:03:34.900
After adding this operator, add another or operator.

51
00:03:37.070 --> 00:03:40.700
The final condition will be the email exists function.

52
00:03:42.650 --> 00:03:45.020
Let's pass in the email variable.

53
00:03:47.140 --> 00:03:50.930
This function is similar to the user name exists function.

54
00:03:50.950 --> 00:03:54.030
It'll check the database for an existing email.

55
00:03:54.040 --> 00:03:58.930
If there's an account with the same email, we are going to reject the request.

56
00:03:59.020 --> 00:04:05.890
Overall, we have a conditional statement for preventing visitors from registering an account with duplicate

57
00:04:05.890 --> 00:04:07.690
usernames or emails.

58
00:04:07.720 --> 00:04:10.040
Let's try testing our function.

59
00:04:10.060 --> 00:04:14.580
Open the postman application inside the body of the request.

60
00:04:14.590 --> 00:04:19.750
I'm going to update the username property to an existing username on my site.

61
00:04:19.779 --> 00:04:23.800
For my personal project, I have a user called Admin.

62
00:04:23.830 --> 00:04:25.560
Yours may be different.

63
00:04:25.570 --> 00:04:28.510
You can double check your site for a username.

64
00:04:28.570 --> 00:04:33.910
After updating the username in the request, I'm going to initiate the request.

65
00:04:36.060 --> 00:04:40.200
As expected, the request will be rejected by our end point.

66
00:04:40.230 --> 00:04:45.420
The status property is set to one which indicates the username exists.

67
00:04:45.450 --> 00:04:49.740
Next, I'm going to change the username to a unique value.

68
00:04:51.850 --> 00:04:54.490
Lastly, I'll send the request.

69
00:04:56.530 --> 00:04:59.260
This time, the request will go through.

70
00:04:59.290 --> 00:05:02.950
The status property will have a value of two.

71
00:05:02.980 --> 00:05:06.120
We've successfully checked for duplicate users.

72
00:05:06.130 --> 00:05:09.460
We can start creating a user in the next lecture.

73
00:05:09.460 --> 00:05:12.970
Let's try inserting a user into the database.

