1
00:00:00,420 --> 00:00:06,810
In this lecture, we are going to begin looping through the results in the query variable before writing

2
00:00:06,810 --> 00:00:08,260
a single line of code.

3
00:00:08,280 --> 00:00:12,190
I want to quickly mention a concept called the Loop.

4
00:00:12,210 --> 00:00:16,219
WordPress has a term to refer to what we're doing in our block.

5
00:00:16,230 --> 00:00:22,800
The idea of querying the database for posts and looping through the results is known as the Loop.

6
00:00:22,980 --> 00:00:26,070
This concept is mainly for theme developers.

7
00:00:26,070 --> 00:00:29,820
However, it can apply to plug in developers too.

8
00:00:29,850 --> 00:00:36,240
This documentation page will describe the proper method for querying the database and looping through

9
00:00:36,240 --> 00:00:37,200
the results.

10
00:00:37,230 --> 00:00:40,510
Feel free to read through this page for more info.

11
00:00:40,530 --> 00:00:46,530
For this lecture we are going to be adhering to the process recommended on this page.

12
00:00:46,560 --> 00:00:49,070
Let's get started in your editor.

13
00:00:49,080 --> 00:00:53,160
Open the popular recipes dot php file.

14
00:00:55,290 --> 00:00:56,910
Inside the function.

15
00:00:56,910 --> 00:01:01,090
We will begin writing the template after the OB start function.

16
00:01:01,110 --> 00:01:03,660
The block will be wrapped with a div tag.

17
00:01:03,660 --> 00:01:10,200
This tag will have a class called WP BLOCK Utility plus popular recipes.

18
00:01:12,230 --> 00:01:17,350
Next we can render the title by adding a pair of H six tags.

19
00:01:17,360 --> 00:01:21,200
Inside these tags, let's echo the title variable.

20
00:01:23,500 --> 00:01:27,840
Afterward, we can begin displaying the posts for this task.

21
00:01:27,850 --> 00:01:33,370
We need to go back into PHP mode inside a pair of PHP tags.

22
00:01:33,370 --> 00:01:35,290
Add a conditional statement.

23
00:01:37,620 --> 00:01:39,270
On the query object.

24
00:01:39,270 --> 00:01:41,880
There's a method called have posts.

25
00:01:41,880 --> 00:01:46,230
Let's call this function from within the conditional statement.

26
00:01:48,420 --> 00:01:53,100
Before looping through the results, we should check the query for results.

27
00:01:53,130 --> 00:01:57,480
It's possible that WordPress may not have been able to find recipes.

28
00:01:57,510 --> 00:02:01,530
In this case, we should not bother looping through the results.

29
00:02:01,560 --> 00:02:04,640
This function will return a boolean value.

30
00:02:04,650 --> 00:02:07,540
If there are results, the value will be true.

31
00:02:07,560 --> 00:02:13,020
Inside this conditional block, we can begin looping through the data with a while loop.

32
00:02:15,260 --> 00:02:19,550
Inside the wild loop called the have posts function again.

33
00:02:21,670 --> 00:02:25,240
Once again, we're calling the half posts function.

34
00:02:25,240 --> 00:02:28,600
The half post function performs another action.

35
00:02:28,600 --> 00:02:31,600
It'll check if the posts have been looped through.

36
00:02:31,630 --> 00:02:38,980
If every post has been looped through, this function will return false, thus causing the loop to end.

37
00:02:39,010 --> 00:02:42,170
At the moment, the loop will run infinitely.

38
00:02:42,190 --> 00:02:46,420
We are not moving on to the next post in the wild block.

39
00:02:46,420 --> 00:02:48,790
Run a function called the Post.

40
00:02:50,870 --> 00:02:57,950
The the post function will check if the loop is running for the first time, if it is, the first post

41
00:02:57,950 --> 00:03:04,250
is grabbed from the results, otherwise it will move on to the next post in the list of results.

42
00:03:04,280 --> 00:03:08,580
It's always important to call this function at the beginning of the loop.

43
00:03:08,600 --> 00:03:12,650
Otherwise, you may experience inconsistent results.

44
00:03:12,710 --> 00:03:17,880
Now that we have our data, we can begin displaying the template for each post.

45
00:03:17,900 --> 00:03:21,080
First, let's exit out of PHP mode.

46
00:03:23,170 --> 00:03:27,940
Next at a div tag with a class called Single Post.

47
00:03:30,150 --> 00:03:35,790
Afterward add an anchor element with a class called Single Post Image.

48
00:03:40,350 --> 00:03:41,520
On this element.

49
00:03:41,520 --> 00:03:46,410
Let's set the h ref attribute to a function called the permalink.

50
00:03:48,620 --> 00:03:51,850
The the permalink function is a template tag.

51
00:03:51,860 --> 00:03:54,380
We talked about template tags before.

52
00:03:54,410 --> 00:03:58,170
There are functions for rendering specific pieces of content.

53
00:03:58,190 --> 00:04:02,540
There are a series of template tags that can run inside a loop.

54
00:04:02,570 --> 00:04:06,280
These functions will be able to detect their inside a loop.

55
00:04:06,290 --> 00:04:12,380
If a template tag detects a loop, it'll attempt to grab the post in the current iteration.

56
00:04:12,410 --> 00:04:15,080
This is the main benefit of using the loop.

57
00:04:15,110 --> 00:04:19,640
WordPress has designed its functions for handling most of the work.

58
00:04:19,700 --> 00:04:24,860
You do not need to provide the ID of the post or any other piece of information.

59
00:04:24,890 --> 00:04:31,820
It's capable of doing the heavy lifting as long as we're calling the the post function on each iteration.

60
00:04:31,850 --> 00:04:34,130
Everything else is handled for us.

61
00:04:34,160 --> 00:04:38,300
This function will return the URL to a specific post.

62
00:04:38,330 --> 00:04:41,380
Let's render the image from within this element.

63
00:04:41,390 --> 00:04:43,360
Inside the anchor element.

64
00:04:43,370 --> 00:04:45,860
Run a function called the thumbnail.

65
00:04:48,060 --> 00:04:54,960
The the thumbnail function will generate an image tag with the source pointing to the image of the post.

66
00:04:54,990 --> 00:04:59,560
This function has an optional parameter which is the size of the image.

67
00:04:59,580 --> 00:05:02,550
Let's set the size to thumbnail.

68
00:05:04,740 --> 00:05:07,430
We've successfully rendered the thumbnail.

69
00:05:07,440 --> 00:05:12,060
Let's proceed to render the title of the post and the author below.

70
00:05:12,060 --> 00:05:18,180
The anchor element added div tag with a class called Single Post Detail.

71
00:05:20,430 --> 00:05:24,870
Next, add an anchor element with the H ref attributes.

72
00:05:27,000 --> 00:05:31,380
The value for this attribute will be the the permalink function.

73
00:05:33,580 --> 00:05:36,970
Inside this tag, we are going to render the title.

74
00:05:37,000 --> 00:05:40,930
The title can be rendered by calling the the title function.

75
00:05:43,030 --> 00:05:44,500
For your convenience.

76
00:05:44,500 --> 00:05:49,690
I provided a link to a page with a complete list of template tags in WordPress.

77
00:05:49,720 --> 00:05:51,370
Feel free to check it out.

78
00:05:51,400 --> 00:05:55,600
Most of these functions will handle grabbing the information for us.

79
00:05:55,630 --> 00:05:59,590
Next, let's render the name of the author below.

80
00:05:59,590 --> 00:06:00,880
The Anchor Element.

81
00:06:00,880 --> 00:06:02,440
Add a span tag.

82
00:06:04,540 --> 00:06:10,120
Inside this tag and the word bye, followed by an anchor element.

83
00:06:12,280 --> 00:06:13,450
One more time.

84
00:06:13,450 --> 00:06:17,440
Set the h ref attribute to the the permalink function.

85
00:06:19,660 --> 00:06:23,650
Inside the elements, we are going to render the name of the author.

86
00:06:23,680 --> 00:06:27,430
The author can be displayed by calling the author function.

87
00:06:29,660 --> 00:06:31,070
The template is ready.

88
00:06:31,100 --> 00:06:34,120
There's one more crucial step below the loop.

89
00:06:34,130 --> 00:06:38,690
Let's run a function called WP Reset Post data.

90
00:06:40,860 --> 00:06:44,580
We've talked about this before, but I want to mention it again.

91
00:06:44,580 --> 00:06:50,700
Regardless of what page we're viewing, WordPress will always perform a query to the database for a

92
00:06:50,700 --> 00:06:51,950
list of posts.

93
00:06:51,960 --> 00:06:57,090
This query is considered the main query queries written by a plugin or theme.

94
00:06:57,090 --> 00:07:00,270
Developers are considered secondary queries.

95
00:07:00,300 --> 00:07:07,860
Whenever we create a custom query, WordPress will shift its focus from the main query to our secondary

96
00:07:07,860 --> 00:07:08,550
query.

97
00:07:08,580 --> 00:07:15,360
This shift in focus allows us to use template tags without worrying about informing WordPress of the

98
00:07:15,360 --> 00:07:16,470
current post.

99
00:07:16,560 --> 00:07:23,580
This behavior does have consequences if another developer performs the loop, the data from the loop

100
00:07:23,580 --> 00:07:25,900
will contain the data from our query.

101
00:07:25,920 --> 00:07:27,510
That's not what we want.

102
00:07:27,540 --> 00:07:31,860
It's likely that other developers will want data from the main query.

103
00:07:31,860 --> 00:07:33,500
By calling this function.

104
00:07:33,510 --> 00:07:37,800
We're telling WordPress that we're finished with the secondary query.

105
00:07:37,800 --> 00:07:40,920
It can go back to focusing on the main query.

106
00:07:41,070 --> 00:07:43,580
The function is ready in the browser.

107
00:07:43,590 --> 00:07:48,030
I'm going to refresh a page with the popular recipes block.

108
00:07:50,190 --> 00:07:57,060
While are the most highly rated recipes are being displayed in the block, we've successfully queried

109
00:07:57,060 --> 00:08:00,970
the database for this information and presented it to the user.

110
00:08:00,990 --> 00:08:02,570
The block is complete.

111
00:08:02,580 --> 00:08:07,210
We can start working on the second block for this section when you're ready.

112
00:08:07,230 --> 00:08:09,570
I'll see you in the next lecture.

