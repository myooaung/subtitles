WEBVTT
1
00:00:00.150 --> 00:00:03.590
In this lecture, we're going to work on the index template.

2
00:00:03.600 --> 00:00:07.800
So far we've been focused on the style dot CSS file.

3
00:00:07.830 --> 00:00:12.000
The job of the CSV file is to store information on our theme.

4
00:00:12.030 --> 00:00:15.970
Let's shift our focus to the indexed PHP file.

5
00:00:15.990 --> 00:00:21.370
It's the second file required by WordPress for officially registering a theme.

6
00:00:21.390 --> 00:00:25.320
The purpose of the index template is to display content.

7
00:00:25.350 --> 00:00:29.700
If we look at the front side of our site, it will be completely empty.

8
00:00:29.730 --> 00:00:32.500
It's because the index template is blank.

9
00:00:32.520 --> 00:00:36.210
Let's open the indexed PHP file in our theme.

10
00:00:38.200 --> 00:00:41.730
We have complete freedom over the content of this file.

11
00:00:41.740 --> 00:00:43.730
We can add whatever we want.

12
00:00:43.750 --> 00:00:46.870
Whatever gets added will be displayed on the site.

13
00:00:46.870 --> 00:00:52.000
For example, let's add a pair of H one tags with some dummy content.

14
00:00:54.060 --> 00:00:57.390
Next, let's refresh the page in the browser.

15
00:00:59.660 --> 00:01:03.390
The content from the index template appears on the page.

16
00:01:03.410 --> 00:01:06.830
WordPress will automatically load this file for us.

17
00:01:06.860 --> 00:01:08.930
It's part of the template system.

18
00:01:08.960 --> 00:01:12.430
WordPress does not inject anything into our template.

19
00:01:12.440 --> 00:01:16.130
We can improve this by viewing the source of the page.

20
00:01:18.310 --> 00:01:22.820
As you can see, WordPress has responded with the contents of our file.

21
00:01:22.840 --> 00:01:27.050
Thus we are given complete liberty with the appearance of the page.

22
00:01:27.070 --> 00:01:31.510
At the moment we are using the old system for creating a template.

23
00:01:31.540 --> 00:01:34.730
The new system completely relies on blocks.

24
00:01:34.750 --> 00:01:36.890
Let's switch to the new system.

25
00:01:36.910 --> 00:01:38.920
Switch back to your editor.

26
00:01:41.040 --> 00:01:44.320
Switching over to the new system is super easy.

27
00:01:44.340 --> 00:01:47.800
There are two steps for enabling full site editing.

28
00:01:47.820 --> 00:01:53.010
The first step is to create a directory called templates in our theme folder.

29
00:01:55.150 --> 00:01:58.160
The name of the folder must be called templates.

30
00:01:58.180 --> 00:02:02.410
The second step is to create a file called Indexed HTML.

31
00:02:02.440 --> 00:02:06.580
This file must be placed inside the templates directory.

32
00:02:08.840 --> 00:02:09.660
That's it.

33
00:02:09.680 --> 00:02:14.670
We fully transitioned from classic site editing to full site editing.

34
00:02:14.690 --> 00:02:18.950
Let's test our site in the browser before refreshing the homepage.

35
00:02:18.950 --> 00:02:24.000
I want you to take a guess which template do you think will be rendered on the page?

36
00:02:24.020 --> 00:02:25.250
Let's find out.

37
00:02:27.410 --> 00:02:30.050
The behavior has completely changed.

38
00:02:30.080 --> 00:02:31.170
Unlike before.

39
00:02:31.190 --> 00:02:35.100
WordPress will inject the admin bar at the top of the page.

40
00:02:35.120 --> 00:02:39.910
If you don't see the admin bar, you're likely not logged in as an administrator.

41
00:02:39.920 --> 00:02:45.530
As for the contents of the page, WordPress informs us that the template is empty.

42
00:02:45.770 --> 00:02:49.640
The indexed page P file gets completely ignored.

43
00:02:49.670 --> 00:02:52.520
It doesn't matter if you have content inside it.

44
00:02:52.550 --> 00:02:57.230
WordPress will always check if your theme has a templates directory.

45
00:02:57.260 --> 00:03:02.370
If it does, it'll check if an index dot html file exists.

46
00:03:02.390 --> 00:03:07.160
Our HTML file has priority over the PHP file.

47
00:03:07.310 --> 00:03:09.520
Let's try adding some content.

48
00:03:09.530 --> 00:03:10.540
At first.

49
00:03:10.550 --> 00:03:15.050
You may be tempted to write plain HTML in our index templates.

50
00:03:15.080 --> 00:03:17.490
However, this is not a good idea.

51
00:03:17.510 --> 00:03:19.100
It can break a theme.

52
00:03:19.130 --> 00:03:26.480
To better understand, let's look at a demonstration back in your editor at a pair of H one tags inside

53
00:03:26.480 --> 00:03:28.010
the HTML file.

54
00:03:28.040 --> 00:03:30.890
The contents of the tag can be anything.

55
00:03:33.080 --> 00:03:33.830
Next.

56
00:03:33.830 --> 00:03:35.660
Let's refresh the page.

57
00:03:37.710 --> 00:03:39.010
Perfect, right?

58
00:03:39.030 --> 00:03:43.200
It doesn't seem like WordPress has a problem with plain HTML.

59
00:03:43.230 --> 00:03:44.500
Not so fast.

60
00:03:44.520 --> 00:03:50.550
While the template is functional on the front end, the same can't be said for the editor at the top

61
00:03:50.550 --> 00:03:51.390
of the page.

62
00:03:51.420 --> 00:03:53.520
A button says edit site.

63
00:03:53.520 --> 00:03:54.540
Click on it.

64
00:03:56.780 --> 00:04:02.570
After a few moments, WordPress will load the full site editor for the index template.

65
00:04:02.600 --> 00:04:08.150
To be clear, the editor is grabbing the HTML file, not the PHP file.

66
00:04:08.180 --> 00:04:11.390
WordPress is telling us that the template is broken.

67
00:04:11.420 --> 00:04:13.920
Full site editing is very strict.

68
00:04:13.940 --> 00:04:18.860
It does not support plain HTML and said it supports blocks.

69
00:04:18.890 --> 00:04:21.440
Templates may contain only blocks.

70
00:04:21.470 --> 00:04:26.600
Otherwise WordPress will be unable to process our templates in the editor.

71
00:04:26.780 --> 00:04:30.110
Let's try fixing our templates back in the editor.

72
00:04:30.110 --> 00:04:32.000
Remove the H1 tag.

73
00:04:34.170 --> 00:04:38.200
Next, add an HTML comment with the following code.

74
00:04:38.220 --> 00:04:42.120
WP Colon site title slash.

75
00:04:44.350 --> 00:04:49.170
Under the hood blocks are written with HTML comments inside a comment.

76
00:04:49.180 --> 00:04:51.640
We must write the name of the block.

77
00:04:51.640 --> 00:04:53.810
As for the slash character.

78
00:04:53.830 --> 00:04:57.380
This character indicates the block is self closing.

79
00:04:57.400 --> 00:04:59.410
Don't worry about the details.

80
00:04:59.410 --> 00:05:05.080
Once we get into block development, the anatomy of a block will make much more sense.

81
00:05:05.110 --> 00:05:08.890
Let's try refreshing the page in the admin dashboard.

82
00:05:11.050 --> 00:05:14.680
Unlike before, the editor can understand our template.

83
00:05:14.710 --> 00:05:18.940
It has detected that we're using a block called site title.

84
00:05:18.970 --> 00:05:22.880
This block will render the name of our site as a clickable link.

85
00:05:22.900 --> 00:05:25.930
Next, let's try refreshing the front end.

86
00:05:28.240 --> 00:05:34.330
Same as before WordPress was able to render the block despite being an HTML comment.

87
00:05:34.330 --> 00:05:38.170
WordPress handled processing and rendering the page.

88
00:05:38.200 --> 00:05:40.770
Admittedly, it is very abstract.

89
00:05:40.780 --> 00:05:45.800
However, this feature makes it incredibly easy to build templates.

90
00:05:45.820 --> 00:05:47.680
As you can already imagine.

91
00:05:47.710 --> 00:05:52.920
Building a site involves converting a regular HTML file into blocks.

92
00:05:52.930 --> 00:05:54.730
That's what we're going to do.

93
00:05:54.760 --> 00:05:59.800
First, we're going to try building our site with WordPress default blocks.

94
00:05:59.830 --> 00:06:05.590
Eventually, we will run into a few roadblocks because our UI will be too complex.

95
00:06:05.590 --> 00:06:11.120
Once you start running into problems, it's recommended that you create custom blocks.

96
00:06:11.140 --> 00:06:14.310
It's going to be a long but worthwhile process.

97
00:06:14.320 --> 00:06:18.190
Let's continue our discussion of templates in the next lecture.

