WEBVTT
1
00:00:00.120 --> 00:00:04.630
In this lecture, we will start working on the button for opening the media library.

2
00:00:04.650 --> 00:00:08.390
The user will be allowed to choose an image from the media library.

3
00:00:08.400 --> 00:00:13.050
After selecting an image, the image will be displayed as a preview within the form.

4
00:00:13.050 --> 00:00:16.530
The URL of the image should be stored inside the option.

5
00:00:16.530 --> 00:00:19.230
These are the steps will be performing in this lecture.

6
00:00:19.230 --> 00:00:23.040
Let's get started by opening the index JS file.

7
00:00:25.340 --> 00:00:29.620
Our first step will be to select the elements related to this image.

8
00:00:29.630 --> 00:00:35.090
We are going to be manipulating the documents, creating references to the elements will be helpful

9
00:00:35.090 --> 00:00:36.290
for readability.

10
00:00:36.290 --> 00:00:37.970
We have three elements.

11
00:00:37.970 --> 00:00:40.820
First, we have the button for opening the modal.

12
00:00:40.820 --> 00:00:44.060
Next, we have the image for rendering the preview.

13
00:00:44.060 --> 00:00:50.420
Lastly, there is an input for storing the URL during the form submission, let's create a variable

14
00:00:50.420 --> 00:00:52.550
called Ogg Image button.

15
00:00:52.550 --> 00:00:59.300
The value for this variable will be the document dot query selector function with the ID of the image

16
00:00:59.300 --> 00:01:01.730
which is ogg image button.

17
00:01:04.370 --> 00:01:08.350
Next, create a variable called OG image container.

18
00:01:08.360 --> 00:01:13.160
The ID for this element is the following OGG Image preview.

19
00:01:15.290 --> 00:01:19.500
Lastly, create a variable called OG image input.

20
00:01:19.520 --> 00:01:23.480
This element has an ID called up OG image.

21
00:01:25.720 --> 00:01:27.100
Our elements are ready.

22
00:01:27.100 --> 00:01:30.400
We can start initializing the media library below.

23
00:01:30.400 --> 00:01:33.820
The elements create a variable called media frame.

24
00:01:35.960 --> 00:01:40.100
Set the value to a function called WP Dot Media.

25
00:01:42.340 --> 00:01:45.300
This function will initialize the media library.

26
00:01:45.310 --> 00:01:48.940
We can pass in an object to configure the media library.

27
00:01:48.940 --> 00:01:55.150
In the resource section of this lecture, I provide a link to the functions documentation page.

28
00:01:55.150 --> 00:02:01.000
I recommend checking it out after finishing this lecture by interviewing the media files, WordPress

29
00:02:01.000 --> 00:02:04.030
will define this function from one of its scripts.

30
00:02:04.030 --> 00:02:05.920
Let's add in a few settings.

31
00:02:05.920 --> 00:02:08.440
The first setting will be called title.

32
00:02:10.550 --> 00:02:13.970
This setting will configure the title of the media library.

33
00:02:13.970 --> 00:02:16.570
The title appears at the top of the pop up.

34
00:02:16.580 --> 00:02:20.900
Let's set the title to the following Select or upload media.

35
00:02:23.040 --> 00:02:24.000
Afterward.

36
00:02:24.000 --> 00:02:26.100
Let's add an object called Button.

37
00:02:28.200 --> 00:02:34.620
The button for selecting an image can be modified or going to modify the text by setting the text property

38
00:02:34.620 --> 00:02:36.030
to the following text.

39
00:02:36.060 --> 00:02:38.010
Use this media.

40
00:02:40.180 --> 00:02:43.900
Lastly, let's set the multiple property to false.

41
00:02:46.020 --> 00:02:49.680
Multiple images can be selected from the media library.

42
00:02:49.710 --> 00:02:52.500
For our purposes, one image will be enough.

43
00:02:52.500 --> 00:02:57.770
Setting this property to false will prevent multiple images from being selected.

44
00:02:57.780 --> 00:03:02.880
After initializing the media library, we can start opening it by default.

45
00:03:02.910 --> 00:03:07.290
The media library will be created but not be visible on the page.

46
00:03:07.290 --> 00:03:08.910
It's hidden from the user.

47
00:03:09.150 --> 00:03:11.430
This behavior is desirable.

48
00:03:11.430 --> 00:03:16.560
We do not want the media library to appear until the user has clicked on the button.

49
00:03:16.560 --> 00:03:21.900
Let's add an event listener to the button with the add event listener function.

50
00:03:24.080 --> 00:03:26.600
The name of the event is called Click.

51
00:03:28.870 --> 00:03:32.800
Next pass in an arrow function with the event object.

52
00:03:34.810 --> 00:03:36.910
The button is an anchor element.

53
00:03:36.940 --> 00:03:39.950
Anchor elements can update the URL of the page.

54
00:03:39.970 --> 00:03:44.500
However, we're not interested in redirecting the user to a different URL.

55
00:03:44.530 --> 00:03:51.220
To prevent this behavior, we can call the prevent default function on the event object.

56
00:03:53.440 --> 00:03:57.150
After preventing the default behavior, we can open the modal.

57
00:03:57.160 --> 00:04:02.750
The WP media function will return a reference to the media library.

58
00:04:02.770 --> 00:04:09.610
This reference contains a method for opening its let's run the media frame dot open function.

59
00:04:11.920 --> 00:04:13.120
We're almost finished.

60
00:04:13.120 --> 00:04:19.920
The last step is to update the preview and input with the image selected by the user below the event.

61
00:04:19.930 --> 00:04:24.670
Let's add another event listener with the media frame on function.

62
00:04:26.930 --> 00:04:29.810
The media library emits custom events.

63
00:04:29.810 --> 00:04:34.620
Since these are custom events, we can't use the ADD event listener function.

64
00:04:34.640 --> 00:04:37.850
This function is reserved for events by the documents.

65
00:04:37.880 --> 00:04:41.740
The on function will allow us to listen for custom events.

66
00:04:41.750 --> 00:04:44.450
The name of the event is called Select.

67
00:04:46.590 --> 00:04:50.230
The second argument is a function for handling the event.

68
00:04:50.250 --> 00:04:52.710
Let's pass in an arrow function.

69
00:04:54.870 --> 00:05:01.660
Inside this function lets grab the image selected by the user defining variable called attachments.

70
00:05:01.680 --> 00:05:03.690
It'll have the following value.

71
00:05:03.720 --> 00:05:10.560
Media Frame state dot get selection dot first dot two json.

72
00:05:15.950 --> 00:05:18.470
We are training a long list of functions.

73
00:05:18.470 --> 00:05:20.270
Let's go through each of them.

74
00:05:20.300 --> 00:05:24.590
The state function will return the data related to the media library.

75
00:05:24.620 --> 00:05:26.760
We're not interested in all the data.

76
00:05:26.780 --> 00:05:29.430
We just want the image selected by the user.

77
00:05:29.450 --> 00:05:35.090
We can change the get function to specify the type of data to grab from the state.

78
00:05:35.120 --> 00:05:40.550
In this case, we're grabbing a value called selection, which stores the current selection.

79
00:05:40.910 --> 00:05:47.030
Up next, we're changing a function called first to grab the first item from the array of files.

80
00:05:47.060 --> 00:05:51.680
As I mentioned before, it's possible to select multiple images.

81
00:05:51.710 --> 00:05:55.310
The media library will store the selection in an array.

82
00:05:55.340 --> 00:06:01.970
Our plugin does not support multiple images, therefore we're going to grab the first image by using

83
00:06:01.970 --> 00:06:03.320
the first function.

84
00:06:03.350 --> 00:06:06.590
Lastly, we're converting the data into JSON.

85
00:06:06.740 --> 00:06:09.720
The final result will be stored in our variable.

86
00:06:09.740 --> 00:06:13.950
The attachment variable will contain information on the image.

87
00:06:13.970 --> 00:06:18.390
Let's begin using this information to update the elements on our page.

88
00:06:18.410 --> 00:06:28.400
First, let's set the OGG image container source property to the attachment slices dot open graph URL

89
00:06:28.400 --> 00:06:29.240
property.

90
00:06:31.440 --> 00:06:35.850
In this line of code, we're updating the image tag source attributes.

91
00:06:35.850 --> 00:06:41.180
The value for this attribute will be the URL for the open graph size of the image.

92
00:06:41.190 --> 00:06:48.240
After updating their preview, let's update the input by setting the OGG image input value property

93
00:06:48.240 --> 00:06:49.680
to the same value.

94
00:06:51.890 --> 00:06:55.570
An input value can be modified through the value property.

95
00:06:55.580 --> 00:06:56.830
The page is ready.

96
00:06:56.840 --> 00:07:00.350
Let's try testing our button for uploading images.

97
00:07:02.520 --> 00:07:05.670
I'm going to select an image from the media library.

98
00:07:05.670 --> 00:07:09.660
After doing so, the image will appear in the form as a preview.

99
00:07:09.690 --> 00:07:12.720
We can submit the form to save our selection.

100
00:07:14.990 --> 00:07:18.960
The image has remained on the page after the form has been submitted.

101
00:07:18.980 --> 00:07:20.050
This is perfect.

102
00:07:20.060 --> 00:07:21.770
We have completed our form.

103
00:07:21.770 --> 00:07:27.300
It took a while, but you may need to develop an admin page for adding settings to WordPress.

104
00:07:27.320 --> 00:07:32.780
In the next lecture we are going to look at an alternative solution to generating this form.

