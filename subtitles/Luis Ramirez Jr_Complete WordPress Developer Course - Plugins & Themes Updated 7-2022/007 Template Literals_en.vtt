WEBVTT
1
00:00:00.150 --> 00:00:07.110
In this lecture, we are going to explore a third option for creating strings called a template literal.

2
00:00:07.290 --> 00:00:10.770
They are sometimes referred to as template strings.

3
00:00:10.890 --> 00:00:15.150
Either way, JavaScript offers another option for writing a string.

4
00:00:15.180 --> 00:00:20.550
Previously, we learned that strings could be created with single or double quotes.

5
00:00:20.580 --> 00:00:23.280
There isn't a difference between these options.

6
00:00:23.310 --> 00:00:30.150
However, template literals offer a completely new feature that isn't available with the other options.

7
00:00:30.180 --> 00:00:33.720
Variables can be injected into a template literal.

8
00:00:33.930 --> 00:00:38.310
This feature can be useful for writing a string that should be dynamic.

9
00:00:38.340 --> 00:00:42.520
Let's look at an example inside the developer tools.

10
00:00:42.540 --> 00:00:46.260
Open the index JS file from the snippets tool.

11
00:00:46.290 --> 00:00:48.780
We're going to clear the contents of the file.

12
00:00:48.780 --> 00:00:51.780
Let's start fresh after clearing the file.

13
00:00:51.780 --> 00:00:54.300
Create a variable called age.

14
00:00:54.300 --> 00:00:58.890
The value of the variable should be your age or a random number.

15
00:01:01.090 --> 00:01:03.670
Feel free to use const or let.

16
00:01:03.700 --> 00:01:09.360
Typically I like to use the cost keyword unless I know the variable must be updated.

17
00:01:09.370 --> 00:01:13.720
Next, we are going to run the alert function with the following message.

18
00:01:13.720 --> 00:01:15.880
My age is age.

19
00:01:18.020 --> 00:01:23.180
Inside our function, we are using a regular string, not a template literal.

20
00:01:23.180 --> 00:01:28.280
Inside the string we may want to inject the age variable by default.

21
00:01:28.310 --> 00:01:32.120
Text inside quotes is treated as regular text.

22
00:01:32.120 --> 00:01:35.780
Key keywords and variable names are completely ignored.

23
00:01:35.780 --> 00:01:39.020
Let's find out what happens by running the script.

24
00:01:39.230 --> 00:01:43.640
After running the script, the alert function will output our message.

25
00:01:43.640 --> 00:01:46.010
It's not exactly what we're aiming for.

26
00:01:46.040 --> 00:01:50.060
The value from the age variable should appear in the message.

27
00:01:50.060 --> 00:01:55.280
We can get the desired output by using a template literal back in the script.

28
00:01:55.280 --> 00:01:58.550
Replace the quotes with the back characters.

29
00:02:00.770 --> 00:02:05.720
Typically the back tick character can be found at the top row of your keyboard.

30
00:02:05.720 --> 00:02:12.500
By using the back characters, we are creating a string that can have values injected into the string.

31
00:02:12.530 --> 00:02:16.400
There's a second step to loading a variable in our string.

32
00:02:16.400 --> 00:02:19.220
We are using the word age twice.

33
00:02:19.220 --> 00:02:25.880
The first occurrence of the word should appear as is, whereas the second occurrence should be our variable.

34
00:02:25.910 --> 00:02:30.870
How does JavaScript know when to render a variable or raw text?

35
00:02:30.890 --> 00:02:36.200
We can wrap a variable with the dollar sign character and a pair of curly brackets.

36
00:02:36.200 --> 00:02:39.080
Let's wrap the age variable in our string.

37
00:02:41.280 --> 00:02:48.360
By adding these characters, text is treated as an expression in the most simplest terms, and expression

38
00:02:48.360 --> 00:02:51.120
is a line of code that evaluates a value.

39
00:02:51.150 --> 00:02:54.030
Writing a string is considered an expression.

40
00:02:54.030 --> 00:02:58.140
Performing arithmetic operations is also considered an expression.

41
00:02:58.140 --> 00:03:04.530
In the resource section of this lecture, I provide a link to a YouTube video that beautifully explains

42
00:03:04.530 --> 00:03:05.630
expressions.

43
00:03:05.640 --> 00:03:09.510
I highly recommend giving it a watch for a better explanation.

44
00:03:09.510 --> 00:03:12.840
Back in our scripts, we are creating a placeholder.

45
00:03:12.840 --> 00:03:18.150
The placeholder will be replaced with the value evaluated from our expression.

46
00:03:18.150 --> 00:03:23.280
In this example, JavaScript will retrieve the value from the age variable.

47
00:03:23.310 --> 00:03:25.350
It will be injected into the string.

48
00:03:25.350 --> 00:03:27.360
Let's try running the script.

49
00:03:27.390 --> 00:03:34.860
After doing so, the alert box will display our name template literals give us the power to inject values

50
00:03:34.860 --> 00:03:36.240
into our strings.

51
00:03:36.240 --> 00:03:40.590
This feature is going to be helpful during Gutenberg development.

52
00:03:42.770 --> 00:03:47.030
There's another feature in JavaScript called string concatenation.

53
00:03:47.060 --> 00:03:51.200
This feature accomplishes the same goal as template strings.

54
00:03:51.200 --> 00:03:56.020
We can add variables to strings by using the plus operator.

55
00:03:56.030 --> 00:04:01.490
Typically, the plus operator is associated with mathematical operations.

56
00:04:01.490 --> 00:04:04.640
However, it can be used for strings too.

57
00:04:04.820 --> 00:04:10.440
By using this character with a string, the variables value will be added to the string.

58
00:04:10.460 --> 00:04:13.130
You can try playing around with this feature.

59
00:04:13.160 --> 00:04:18.829
Template Literals are considered the proper solution for rendering a value in a string.

60
00:04:18.860 --> 00:04:20.899
They're easier to read and write.

61
00:04:20.930 --> 00:04:26.570
In some cases, you may see string concatenation, which is why I'm mentioning this feature.

62
00:04:26.570 --> 00:04:28.970
Same goal, different syntax.

