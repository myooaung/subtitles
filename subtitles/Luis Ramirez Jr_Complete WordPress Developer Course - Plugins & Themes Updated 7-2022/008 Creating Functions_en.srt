1
00:00:00,150 --> 00:00:04,059
In this lecture, we are going to create a function with JavaScript.

2
00:00:04,080 --> 00:00:08,930
Thus far we've been running functions defined by JavaScript or the environment.

3
00:00:08,940 --> 00:00:12,120
We haven't had the chance to define a custom function.

4
00:00:12,120 --> 00:00:15,480
Let's quickly explore the syntax for writing a function.

5
00:00:15,600 --> 00:00:19,380
The purpose of a function is to store reusable logic.

6
00:00:19,380 --> 00:00:23,280
The concept of a function is universal in the programming world.

7
00:00:23,280 --> 00:00:29,430
Let's write a function by replacing the file's contents in the snippet section of the developer tools.

8
00:00:29,430 --> 00:00:33,060
We can define a function by writing the function keyword.

9
00:00:35,160 --> 00:00:38,370
This keyword is followed by the name of the function.

10
00:00:38,400 --> 00:00:41,700
The rules for naming variables apply to functions.

11
00:00:41,700 --> 00:00:44,670
For this example, let's set the name of the function.

12
00:00:44,670 --> 00:00:45,540
To sum.

13
00:00:45,540 --> 00:00:49,830
Afterward, we can add a pair of parentheses and curly brackets.

14
00:00:51,980 --> 00:00:58,130
The parentheses can contain an argument list inside the curly brackets, we can add the body of the

15
00:00:58,130 --> 00:00:58,820
function.

16
00:00:58,820 --> 00:01:02,690
Let's use an alert function to add to numbers.

17
00:01:02,690 --> 00:01:05,060
These numbers can be whatever you like.

18
00:01:07,270 --> 00:01:10,360
I'm inventing the body of the function for readability.

19
00:01:10,360 --> 00:01:15,020
It's not required to indent the body, but it's considered standard practice.

20
00:01:15,040 --> 00:01:18,400
We're going to adhere to this practice throughout the course.

21
00:01:18,430 --> 00:01:22,330
Next, we need to call the function by defining a function.

22
00:01:22,360 --> 00:01:24,980
The code inside does not get executed.

23
00:01:25,000 --> 00:01:29,590
We must call it by typing the name, followed by a pair of parentheses.

24
00:01:31,720 --> 00:01:35,050
Let's try executing the script to view the output.

25
00:01:35,050 --> 00:01:38,590
As expected, the alert box will display the sum.

26
00:01:38,590 --> 00:01:44,770
JavaScript will perform mathematical operations before passing the value on to the alert function.

27
00:01:44,800 --> 00:01:47,470
The result is displayed on the alert box.

28
00:01:47,500 --> 00:01:49,010
So far, so good.

29
00:01:49,030 --> 00:01:55,960
The process for writing a function is similar to writing a function in PHP, JavaScript function, support,

30
00:01:55,960 --> 00:01:58,260
arguments and return values.

31
00:01:58,270 --> 00:02:01,120
Let's try playing around with those features.

32
00:02:01,120 --> 00:02:07,090
For starters, arguments can be added to a function by listing them in the parentheses of the function

33
00:02:07,090 --> 00:02:08,020
definition.

34
00:02:08,020 --> 00:02:11,950
Multiple arguments can be added by separating them with commas.

35
00:02:11,950 --> 00:02:17,080
Let's update these some function by adding two parameters called A and B.

36
00:02:19,310 --> 00:02:25,580
By adding these parameters, data can be passed into the function to manipulate the functions, behavior

37
00:02:25,580 --> 00:02:32,030
and our example, the sum function should be able to calculate the sum of two numbers passed into it

38
00:02:32,030 --> 00:02:38,420
in the alert function update the value passed into it by adding the A and B parameters.

39
00:02:40,500 --> 00:02:43,430
Next, we need to update our function call.

40
00:02:43,440 --> 00:02:46,200
Let's pass in two random numbers.

41
00:02:48,260 --> 00:02:51,900
Parameters are another feature supported by JavaScript.

42
00:02:51,920 --> 00:02:56,280
They allow us to send data to a function during its execution.

43
00:02:56,300 --> 00:02:59,510
I'm going to run the script almost immediately.

44
00:02:59,510 --> 00:03:04,600
The alert box will contain the sum of the two values passed into the function.

45
00:03:04,610 --> 00:03:05,510
Perfect.

46
00:03:05,540 --> 00:03:10,520
Let's explore the final feature of functions which are return values.

47
00:03:10,550 --> 00:03:17,060
Functions can return a single value that can be used outside of the function rather than rendering an

48
00:03:17,060 --> 00:03:18,830
alert from within the function.

49
00:03:18,830 --> 00:03:20,900
Let's do it outside the function.

50
00:03:20,900 --> 00:03:25,430
We're going to replace the alert function with the return keyword.

51
00:03:27,620 --> 00:03:31,550
Next, we're going to create a variable called total.

52
00:03:31,580 --> 00:03:36,110
Its value will be the sum function below our function definition.

53
00:03:38,160 --> 00:03:42,660
Lastly, let's run the alert function with the total variable.

54
00:03:44,820 --> 00:03:49,410
The total variable will store the value returned by the sum function.

55
00:03:49,410 --> 00:03:55,980
Before the sum function returns the value it will calculate the sum of the two numbers passed into it.

56
00:03:56,010 --> 00:03:57,960
Let's try running our script.

57
00:03:58,170 --> 00:04:01,230
After doing so, the same behavior occurs.

58
00:04:01,260 --> 00:04:04,860
Unlike the previous solution, the sum is reusable.

59
00:04:04,860 --> 00:04:06,300
Outside of the function.

60
00:04:06,300 --> 00:04:10,110
We're not restricted to using the sum from within the function.

61
00:04:10,110 --> 00:04:16,230
Overall functions are pretty similar to functions for any language you should feel right at home with

62
00:04:16,230 --> 00:04:17,940
functions in JavaScript.

63
00:04:17,940 --> 00:04:20,850
Let's talk about arrays in the next lecture.

