WEBVTT
1
00:00:00.150 --> 00:00:05.190
In this lecture, we are going to create a new script file for the front end.

2
00:00:05.220 --> 00:00:09.880
Up until now, we've been creating script files for the Gutenberg editor.

3
00:00:09.900 --> 00:00:13.060
However, things are going to change this time.

4
00:00:13.080 --> 00:00:15.540
A script should be loaded on the front end.

5
00:00:15.570 --> 00:00:19.740
WordPress refers to this type of script as a Vue script.

6
00:00:19.830 --> 00:00:23.490
There are two options for loading the script on the front end.

7
00:00:23.520 --> 00:00:27.510
We can use PHP to register and in queue a script.

8
00:00:27.540 --> 00:00:33.750
Alternatively, we can allow WordPress to in queue the script through the block JSON file.

9
00:00:33.780 --> 00:00:37.210
I think it's easier to use the block JSON file.

10
00:00:37.230 --> 00:00:40.230
It'll mean writing less code to get started.

11
00:00:40.260 --> 00:00:45.030
Open the block json file for the authentication modal block.

12
00:00:47.200 --> 00:00:48.970
At the bottom of the object.

13
00:00:48.970 --> 00:00:52.000
Add a new property called View Scripts.

14
00:00:54.170 --> 00:00:58.020
The View script property will load a script on the front end.

15
00:00:58.040 --> 00:01:04.459
We never have to worry about the script appearing in the editor by creating two separate scripts for

16
00:01:04.459 --> 00:01:06.150
the editor and front end.

17
00:01:06.170 --> 00:01:08.930
We can prevent our site from becoming bloated.

18
00:01:08.960 --> 00:01:11.570
WordPress will handle loading the script.

19
00:01:11.600 --> 00:01:16.650
Most importantly, it will check if the block is present on the page if it isn't.

20
00:01:16.670 --> 00:01:18.860
These scripts will never be in queued.

21
00:01:18.890 --> 00:01:22.540
The value for this property will be the following file.

22
00:01:22.550 --> 00:01:25.700
Dot slash front end dot js.

23
00:01:27.850 --> 00:01:29.830
The file name should be unique.

24
00:01:29.830 --> 00:01:31.330
For the rest of this course.

25
00:01:31.330 --> 00:01:35.290
We are going to call our View Scripts front end JS.

26
00:01:35.320 --> 00:01:41.350
This file doesn't exist, so let's create it inside the authentication modal folder.

27
00:01:41.350 --> 00:01:44.440
Create a file called Front End JS.

28
00:01:46.530 --> 00:01:52.710
Next, let's log a message to the console to verify that the file has been loaded on the page.

29
00:01:54.940 --> 00:01:59.710
If you're running the scripts package, you may need to restart the command line.

30
00:01:59.740 --> 00:02:06.640
The front end JS file will not be included with the bundle until the start command has been restarted.

31
00:02:08.870 --> 00:02:10.139
Just to make sure.

32
00:02:10.160 --> 00:02:13.260
Let's take a peek inside the build directory.

33
00:02:13.280 --> 00:02:20.540
The off modal directory should contain the front end JS file by adding the view script property.

34
00:02:20.540 --> 00:02:24.200
These scripts package will search for a file with the same name.

35
00:02:24.200 --> 00:02:28.400
If this file exists, it will be processed with the final builds.

36
00:02:28.400 --> 00:02:35.570
It's very important that the name inside the property matches the actual file name after verifying the

37
00:02:35.570 --> 00:02:36.890
file has been moved.

38
00:02:36.890 --> 00:02:40.610
Let's refresh the experimental page on the front end.

39
00:02:41.630 --> 00:02:45.050
Open the console panel from the developer tools.

40
00:02:47.170 --> 00:02:48.640
Inside the console.

41
00:02:48.640 --> 00:02:51.140
The message from our script will get logged.

42
00:02:51.160 --> 00:02:52.220
That's perfect.

43
00:02:52.240 --> 00:02:55.570
We've got a script for handling the front end of our block.

44
00:02:55.600 --> 00:02:59.170
The script will have access to the elements on the page.

45
00:02:59.200 --> 00:03:04.000
In the next lecture, let's start writing the logic for the registration form.

