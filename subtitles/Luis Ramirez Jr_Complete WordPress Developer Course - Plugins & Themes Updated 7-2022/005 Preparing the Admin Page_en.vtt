WEBVTT
1
00:00:00.090 --> 00:00:05.370
In this lecture, we are going to update the custom admin page to output a form.

2
00:00:05.370 --> 00:00:10.420
This form will contain fields for modifying the values from our custom option.

3
00:00:10.440 --> 00:00:14.550
In total, there will be four fields before getting started.

4
00:00:14.550 --> 00:00:16.830
We must make an important decision.

5
00:00:16.830 --> 00:00:21.630
Should the form match the design of WordPress or should we use a custom design?

6
00:00:21.630 --> 00:00:23.700
There is no right or wrong answer.

7
00:00:23.730 --> 00:00:27.600
Often you'll find plugin developers going with either option.

8
00:00:27.600 --> 00:00:32.940
In my opinion, it's easier to use WordPress classes for designing a form.

9
00:00:32.940 --> 00:00:36.480
This approach provides a consistent user experience.

10
00:00:36.480 --> 00:00:43.290
Unfortunately, WordPress does not document its classes in the resource section of this lecture, I

11
00:00:43.290 --> 00:00:45.000
provide a link to a plugin.

12
00:00:45.000 --> 00:00:48.540
This plugin is called WordPress Admin Styles.

13
00:00:48.540 --> 00:00:55.020
It's a plugin aimed at developers and will provide a complete list of classes for generating specific

14
00:00:55.020 --> 00:00:56.340
UI elements.

15
00:00:56.340 --> 00:01:00.720
I find it incredibly helpful for designing custom admin pages.

16
00:01:00.720 --> 00:01:05.069
This plugin cannot be installed from the official WordPress repository.

17
00:01:05.069 --> 00:01:07.650
You must manually install this plug in.

18
00:01:07.920 --> 00:01:11.970
A zip file can be downloaded by clicking on the code button.

19
00:01:11.970 --> 00:01:14.910
A link will appear for downloading a zip file.

20
00:01:14.910 --> 00:01:20.400
I want you to download this plugin, upload it to our WordPress site and activate it.

21
00:01:20.430 --> 00:01:23.820
I'm going to quickly add this plugin to my site.

22
00:01:25.940 --> 00:01:31.390
After activating the plugin, a new menu item will be available called Admin Style.

23
00:01:31.400 --> 00:01:32.960
Let's click on this link.

24
00:01:32.960 --> 00:01:38.510
We are taking to a page with a long list of different elements that are supported in WordPress.

25
00:01:38.510 --> 00:01:46.130
There are even examples I recommend bookmarking this plugin as it will help you design admin pages ahead

26
00:01:46.130 --> 00:01:46.790
of time.

27
00:01:46.790 --> 00:01:49.310
I've prepared a form for this section.

28
00:01:49.310 --> 00:01:53.930
In the resource section of this lecture, I provide a link to a gist.

29
00:01:53.960 --> 00:01:58.610
This gist contains a static form with styles from WordPress.

30
00:01:58.610 --> 00:02:01.580
None of these elements contain custom styles.

31
00:02:01.580 --> 00:02:03.890
Everything is defined by WordPress.

32
00:02:03.890 --> 00:02:06.110
I want you to copy this code.

33
00:02:08.270 --> 00:02:10.910
Next open the options page.

34
00:02:11.570 --> 00:02:12.530
PHP file.

35
00:02:14.670 --> 00:02:18.600
Paste this code inside the div tag with the wrap class.

36
00:02:20.670 --> 00:02:22.860
Most of this template is static.

37
00:02:22.890 --> 00:02:26.610
There is one thing worth mentioning scattered throughout the template.

38
00:02:26.640 --> 00:02:29.040
There's a function called escape h.

39
00:02:29.040 --> 00:02:30.270
HTML e.

40
00:02:30.300 --> 00:02:34.590
This function is another translation function available in WordPress.

41
00:02:34.620 --> 00:02:37.550
It'll output a translated message.

42
00:02:37.560 --> 00:02:41.730
It's similar to the underscore e function with one exception.

43
00:02:41.850 --> 00:02:45.420
This function will escape HTML from the message.

44
00:02:45.450 --> 00:02:50.250
This is to prevent malicious translation messages from appearing on the page.

45
00:02:50.280 --> 00:02:54.180
Other than that, these functions have the same arguments.

46
00:02:54.210 --> 00:02:57.870
The entire template is borrowing classes from WordPress.

47
00:02:57.900 --> 00:03:03.580
If you were to quickly scan through the template, it's a form element with four fields.

48
00:03:03.600 --> 00:03:10.130
Let's begin updating this template to output the values from the options at the top of the function.

49
00:03:10.140 --> 00:03:12.720
Define a variable called options.

50
00:03:12.720 --> 00:03:16.710
The value for this variable will be the git option function.

51
00:03:19.100 --> 00:03:22.370
The name of our option was called up options.

52
00:03:24.400 --> 00:03:25.040
Great.

53
00:03:25.060 --> 00:03:27.760
We can begin updating the form first.

54
00:03:27.760 --> 00:03:30.250
Let's start with the form element.

55
00:03:30.280 --> 00:03:34.210
Up until now, we've been sending requests with JavaScript.

56
00:03:34.240 --> 00:03:39.620
However, let's take a different approach rather than submitting a form with JavaScript.

57
00:03:39.640 --> 00:03:41.860
Let's submit it the old fashioned way.

58
00:03:41.980 --> 00:03:48.110
This will give us an opportunity to explore an alternative solution for handling form submissions.

59
00:03:48.130 --> 00:03:51.340
You may not always be able to use the rest API.

60
00:03:51.370 --> 00:03:55.090
This is especially true if you're working with an old plugin.

61
00:03:55.120 --> 00:04:01.520
The traditional solution of submitting forms is common in older plugins on the form element.

62
00:04:01.540 --> 00:04:05.650
Add an attribute called method with a value of post.

63
00:04:07.830 --> 00:04:14.740
The HTTP method of a request can be configured by adding the method attribute to the form element.

64
00:04:14.760 --> 00:04:17.990
In this example, we are using the post method.

65
00:04:18.000 --> 00:04:22.470
Next, let's set the URL by adding the action attributes.

66
00:04:24.560 --> 00:04:30.320
The value for this attribute will be a file called admin post PHP.

67
00:04:32.610 --> 00:04:38.910
The action attribute allows us to send the request to a specific URL for our form.

68
00:04:38.910 --> 00:04:44.070
We are going to send the data to a file called admin post PHP.

69
00:04:44.220 --> 00:04:48.060
This file exists within the WP admin folder.

70
00:04:48.090 --> 00:04:52.140
The browser will be able to send the data to the relative path.

71
00:04:52.170 --> 00:04:56.010
WordPress recommends sending form data to this file.

72
00:04:56.040 --> 00:04:58.040
The form element is ready.

73
00:04:58.050 --> 00:05:02.100
The next step is to update the fields at the top of the form element.

74
00:05:02.100 --> 00:05:03.780
Add a hidden input.

75
00:05:05.920 --> 00:05:08.920
The name of this input must be called action.

76
00:05:11.090 --> 00:05:14.400
Multiple forms can submit data to the same file.

77
00:05:14.420 --> 00:05:17.750
WordPress does not know where the data is coming from.

78
00:05:17.750 --> 00:05:24.120
We can associate our data with our form by adding a hidden input with a name called Action.

79
00:05:24.140 --> 00:05:27.530
You can think of it as a unique ID for our form.

80
00:05:27.530 --> 00:05:31.160
The value for this input must be a unique value.

81
00:05:31.190 --> 00:05:35.930
Let's set the action input to up save options.

82
00:05:38.170 --> 00:05:41.320
The input is the most important field in our form.

83
00:05:41.350 --> 00:05:45.370
Without this input, we will not be able to process the form.

84
00:05:45.370 --> 00:05:49.900
Next, let's run a function called WP Knots Fields.

85
00:05:52.040 --> 00:05:53.210
For security.

86
00:05:53.210 --> 00:05:55.100
We should always add a nonce.

87
00:05:57.110 --> 00:06:00.030
Nazis are a security feature in WordPress.

88
00:06:00.050 --> 00:06:03.260
It stands for number used once.

89
00:06:03.260 --> 00:06:07.060
A nonce is a random value that can only be used once.

90
00:06:07.070 --> 00:06:11.160
WordPress uses Nazis for validating form submissions.

91
00:06:11.180 --> 00:06:16.610
If we send a nonce with our form, WordPress will check the validity of the nonce.

92
00:06:16.640 --> 00:06:22.910
This is a basic security technique for presenting users outside our site from submitting this form.

93
00:06:22.940 --> 00:06:29.000
If hackers want to send our form, they need to generate a nonce which is not easy without WordPress.

94
00:06:30.540 --> 00:06:33.930
Nazis can be handled and validated by word press.

95
00:06:33.930 --> 00:06:37.980
We do not need to worry about the complexities of using Nazis.

96
00:06:37.980 --> 00:06:44.100
However, if you're interested, check out the resource section of this lecture for a link to this feature.

97
00:06:44.130 --> 00:06:50.020
WordPress provides extensive documentation on how this feature can help secure forms.

98
00:06:50.040 --> 00:06:51.960
Let's head back to the editor.

99
00:06:52.140 --> 00:06:55.800
This function requires a unique ID for the nonce.

100
00:06:55.800 --> 00:06:58.620
Let's set the ID to up options.

101
00:06:58.620 --> 00:06:59.520
Verify.

102
00:07:01.730 --> 00:07:05.970
After adding these fields, we can proceed to update the inputs.

103
00:07:05.990 --> 00:07:09.250
The first input is for the open graph title.

104
00:07:09.260 --> 00:07:12.200
I've added a table for formatting the inputs.

105
00:07:12.200 --> 00:07:18.800
WordPress itself uses tables for formatting forms for every input I've assigned a name.

106
00:07:18.800 --> 00:07:20.690
The name is very important.

107
00:07:20.690 --> 00:07:27.020
During the submission process, the values for each input can be found by their respective name.

108
00:07:27.020 --> 00:07:33.680
In the next lecture, you'll see an example of how these values are retrieved on this input.

109
00:07:33.680 --> 00:07:36.010
Let's add the attribute value.

110
00:07:36.020 --> 00:07:43.580
The value for this attribute will be the escape attribute function with the options OG title variable.

111
00:07:47.370 --> 00:07:51.290
We're escaping the output with the escape attribute function.

112
00:07:51.300 --> 00:07:55.320
It's the recommended function for rendering values in attributes.

113
00:07:55.320 --> 00:08:00.750
The value will be echoed since the escape attribute function returns a value.

114
00:08:00.780 --> 00:08:03.390
Let's do the same for the other fields.

115
00:08:03.420 --> 00:08:05.790
The next field is for the image.

116
00:08:05.790 --> 00:08:09.450
This field has a hidden input on this input.

117
00:08:09.450 --> 00:08:16.800
Set the value attribute to the escape attribute function with the options OG image variable.

118
00:08:18.960 --> 00:08:23.940
Let's apply the same value to the source attribute on the image tag.

119
00:08:26.150 --> 00:08:29.100
This tag will display a preview of the image.

120
00:08:29.120 --> 00:08:33.299
Moving on, we have the field for the open graph description.

121
00:08:33.320 --> 00:08:38.450
This time we're using a text area element inside the text area.

122
00:08:38.450 --> 00:08:45.050
Tags echo the escape HTML function with the options OG description variable.

123
00:08:47.250 --> 00:08:48.670
There's one more field.

124
00:08:48.690 --> 00:08:50.150
It is a checkbox.

125
00:08:50.160 --> 00:08:56.580
Unlike the other fields, we're not going to set the value and said we are going to add the checked

126
00:08:56.580 --> 00:08:57.570
attribute.

127
00:08:57.600 --> 00:09:01.780
WordPress has a function for adding this attribute to an input.

128
00:09:01.800 --> 00:09:06.720
It's cleaner than using a conditional statement inside the input elements.

129
00:09:06.720 --> 00:09:09.870
Attribute run a function called checked.

130
00:09:12.080 --> 00:09:14.390
This function has two arguments.

131
00:09:14.390 --> 00:09:16.370
It's the values to compare.

132
00:09:16.370 --> 00:09:21.310
If both values match, WordPress will output the checked attributes.

133
00:09:21.320 --> 00:09:25.760
Let's pass in one and the options enable ogg variable.

134
00:09:29.750 --> 00:09:31.070
The fields are already.

135
00:09:31.070 --> 00:09:33.550
There's one last thing to add to the form.

136
00:09:33.560 --> 00:09:40.580
We do not have a button for submitting the form below the closing table tag run a function called Submit

137
00:09:40.580 --> 00:09:41.180
button.

138
00:09:43.440 --> 00:09:48.850
This function is a convenient feature for rendering a button with styles from WordPress.

139
00:09:48.870 --> 00:09:51.900
We do not need to hard code the button ourselves.

140
00:09:51.930 --> 00:09:53.150
Our form is ready.

141
00:09:53.160 --> 00:09:56.090
Let's check out the results in the browser.

142
00:09:56.100 --> 00:09:58.860
Refresh the custom admin page.

143
00:10:01.060 --> 00:10:03.610
You should see something similar to my screen.

144
00:10:03.640 --> 00:10:07.660
The title and description should have their inputs prefilled.

145
00:10:07.690 --> 00:10:12.210
In addition, the open graph option should be ticked by defaults.

146
00:10:12.220 --> 00:10:15.510
We're going to enable open graph for the current site.

147
00:10:15.520 --> 00:10:17.230
Let's inspect the form.

148
00:10:19.460 --> 00:10:23.260
Directly under the form elements, there are three inputs.

149
00:10:23.270 --> 00:10:25.430
The last two inputs are hidden.

150
00:10:25.460 --> 00:10:29.780
These inputs were generated by the WP Nonce Field function.

151
00:10:29.810 --> 00:10:34.790
WordPress will handle configuring these inputs for validation on the back end.

152
00:10:34.970 --> 00:10:40.490
Now that we verified the form is functional, the next step is to handle the form submission.

153
00:10:40.520 --> 00:10:43.820
In the next lecture, let's handle this process.

