WEBVTT
1
00:00:01.896 --> 00:00:04.406
When I demonstrated the creation of the JobConfiguration,

2
00:00:04.406 --> 00:00:07.981
I injected a step instance, but I never configured it.

3
00:00:07.981 --> 00:00:10.238
We're going to do that now.

4
00:00:10.238 --> 00:00:14.199
I'm displaying the BatchJobConfiguration class that we just created.

5
00:00:14.199 --> 00:00:16.577
I'm going to use it again for step creation.

6
00:00:16.577 --> 00:00:19.758
Note that I'll be defining a new member on the

7
00:00:19.758 --> 00:00:22.785
Configuration class called StepBuilderFactory.

8
00:00:22.785 --> 00:00:26.996
Just as Spring Batch provides you a DSL for defining the configuration of a job,

9
00:00:26.996 --> 00:00:29.500
the framework also provides you with a DSL for

10
00:00:29.500 --> 00:00:31.192
defining the configuration of a step.

11
00:00:31.192 --> 00:00:35.587
Once again, a step is simply a phase in the processing of a job.

12
00:00:35.587 --> 00:00:39.093
It defines a reader, a processor, and a writer.

13
00:00:39.093 --> 00:00:39.823
Given this,

14
00:00:39.823 --> 00:00:43.968
the StepBuilderFactory will provide you with support for defining what reader,

15
00:00:43.968 --> 00:00:48.059
processor, and writer to use as part of the configuration.

16
00:00:48.059 --> 00:00:49.890
Steps are configured to use the concept of a tasklet.

17
00:00:49.890 --> 00:00:56.136
A tasklet simply defines what task the step will actually perform.

18
00:00:56.136 --> 00:00:57.046
To begin with,

19
00:00:57.046 --> 00:00:59.472
I'm going to demonstrate creating a simple tasklet

20
00:00:59.472 --> 00:01:01.271
that just prints out Hello World!

21
00:01:01.271 --> 00:01:03.066
As we continue with the course,

22
00:01:03.066 --> 00:01:06.554
I'll be replacing the demo tasklet with an

23
00:01:06.554 --> 00:01:08.401
implementation of chunk-oriented processing,

24
00:01:08.401 --> 00:01:09.480
or chunking.

25
00:01:09.480 --> 00:01:15.375
Chunking simply refers to processing where data is read one record at a time,

26
00:01:15.375 --> 00:01:19.732
processed, and then grouped into chunks to be written out to an endpoint.

27
00:01:19.732 --> 00:01:21.753
Chunking is a type of tasklet.

28
00:01:21.753 --> 00:01:23.384
As we go through the course,

29
00:01:23.384 --> 00:01:26.936
I'll demonstrate chunking by creating a custom reader for reading a file,

30
00:01:26.936 --> 00:01:27.896
a custom processor,

31
00:01:27.896 --> 00:01:32.288
and a custom writer to write chunks of data out to the database.

32
00:01:32.288 --> 00:01:36.039
I'm once again displaying the BatchJobConfiguration class.

33
00:01:36.039 --> 00:01:38.313
This is the Bean I'll be defining for the simple

34
00:01:38.313 --> 00:01:40.762
implementation of a tasklet for the job step.

35
00:01:40.762 --> 00:01:44.614
I'm going to use the stepBuilderFactory to start the definition of the step,

36
00:01:44.614 --> 00:01:48.432
similar to how I used the JobBuilderFactory earlier for the job.

37
00:01:48.432 --> 00:01:52.263
The stepBuilderFactory will use a STEP_NAME that I've defined in a

38
00:01:52.263 --> 00:01:54.933
Constants class to retrieve an instance of a stepBuilder.

39
00:01:54.933 --> 00:01:58.896
The stepBuilder will have a reference to the JobRepository and

40
00:01:58.896 --> 00:02:01.624
TransactionManager that we configured earlier.

41
00:02:01.624 --> 00:02:06.625
Next, I'll use the stepBuilder instance to build a step with a custom tasklet.

42
00:02:06.625 --> 00:02:10.150
This returns an instance of Tasklet stepBuilder.

43
00:02:10.150 --> 00:02:12.924
There are several other types of stepBuilders available for

44
00:02:12.924 --> 00:02:15.561
creating remote steps and flow steps.

45
00:02:15.561 --> 00:02:20.213
In the custom tasklet execution, I'll just be printing out Hello World!

46
00:02:20.213 --> 00:02:20.877
for now.

47
00:02:20.877 --> 00:02:24.788
The execute method has a parameter of type StepContribution,

48
00:02:24.788 --> 00:02:28.545
which is a buffer for storing the details of processing such as read,

49
00:02:28.545 --> 00:02:30.007
process, and write counts.

50
00:02:30.007 --> 00:02:32.955
It also has a parameter of type ChunkContext,

51
00:02:32.955 --> 00:02:38.039
which is the context object for data stored during the duration of a chunk.

52
00:02:38.039 --> 00:02:41.941
For our simple example, I won't be updating either of these inputs.

53
00:02:41.941 --> 00:02:45.759
At the end of the method, I return a RepeatStatus.

54
00:02:45.759 --> 00:02:48.500
This is an enumeration that tells Spring Batch to either

55
00:02:48.500 --> 00:02:53.085
continue processing or that processing is complete.

56
00:02:53.085 --> 00:02:57.032
Now that we know how to configure a step, let's do it in the demo application.

57
00:02:57.032 --> 00:03:00.954
I'll be following Demo 6 found in the DEMOS.

58
00:03:00.954 --> 00:03:04.004
md file in the root project directory.

59
00:03:04.004 --> 00:03:05.747
With the Spring Batch job configured,

60
00:03:05.747 --> 00:03:08.548
I'll now demonstrate the creation of a job step.

61
00:03:08.548 --> 00:03:12.250
The step will define the reader, processor, and writer for the job.

62
00:03:12.250 --> 00:03:16.153
In the next parts of this course, I'll implement the actual reader,

63
00:03:16.153 --> 00:03:17.314
writer, and processor.

64
00:03:17.314 --> 00:03:20.831
But for now, I'll just create a testable implementation.

65
00:03:20.831 --> 00:03:25.898
Let's start by opening up the class BatchJobConfiguration.

66
00:03:25.898 --> 00:03:29.459
This is the same class where we defined the JobConfiguration.

67
00:03:29.459 --> 00:03:34.098
I'm going to start by adding stepBuilderFactory as a member on the class.

68
00:03:34.098 --> 00:03:36.477
The stepBuilderFactory member that I defined will provide

69
00:03:36.477 --> 00:03:39.694
us with a DSL for configuring the step.

70
00:03:39.694 --> 00:03:43.880
Next, I need to define the actual step configuration.

71
00:03:43.880 --> 00:03:45.995
Let's drop in the step method.

72
00:03:45.995 --> 00:03:49.563
First, you'll notice that I've once again used a constant,

73
00:03:49.563 --> 00:03:54.902
this time to define the STEP_NAME, similar to what I did with the JOB_NAME.

74
00:03:54.902 --> 00:03:57.272
Let's open up the Constants class.

75
00:03:57.272 --> 00:03:59.775
I'm going to add the constant for the STEP_NAME.

76
00:03:59.775 --> 00:04:04.225
You see here now that the STEP_NAME is process-patients-step.

77
00:04:04.225 --> 00:04:06.708
Let's go back to our BatchJobConfiguration class,

78
00:04:06.708 --> 00:04:10.511
and we can note here that the stepBuilderFactory will get an

79
00:04:10.511 --> 00:04:12.771
instance of stepBuilder using the STEP_NAME.

80
00:04:12.771 --> 00:04:17.999
Next, I define the custom tasklet execution to print out Hello World!

81
00:04:17.999 --> 00:04:28.000
Finally, the definition of the step is ended by calling the build method. That completes the demo for our step configuration.

