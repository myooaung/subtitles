WEBVTT
1
00:00:00.000 --> 00:00:05.058
Now that I have a reader in place to read data from a file,

2
00:00:05.058 --> 00:00:08.851
the next step is to create an item processor.

3
00:00:08.851 --> 00:00:12.417
The goal of this processor is to transform patient records into a

4
00:00:12.417 --> 00:00:16.070
format that's suitable for persisting to a database.

5
00:00:16.070 --> 00:00:19.060
Let's look at processors at a high level.

6
00:00:19.060 --> 00:00:22.876
Item processors are where the rubber meets the road for batch.

7
00:00:22.876 --> 00:00:23.844
With item processing,

8
00:00:23.844 --> 00:00:29.188
I want to apply one or more business rules repetitively across a set of data.

9
00:00:29.188 --> 00:00:31.223
As with the demo example,

10
00:00:31.223 --> 00:00:34.341
processing will often transform the incoming data record

11
00:00:34.341 --> 00:00:37.366
into a format for use by other systems.

12
00:00:37.366 --> 00:00:40.877
If I'm batch loading data into a data warehouse,

13
00:00:40.877 --> 00:00:45.210
I might transform records into denormalized data structures.

14
00:00:45.210 --> 00:00:47.840
I might have to call other web services to enhance the

15
00:00:47.840 --> 00:00:49.270
input data before persisting it.

16
00:00:49.270 --> 00:00:52.635
While we added validation at the time of job execution,

17
00:00:52.635 --> 00:00:55.684
item processors might also contain validation,

18
00:00:55.684 --> 00:00:58.181
but at a per-data-record level.

19
00:00:58.181 --> 00:00:59.153
For example,

20
00:00:59.153 --> 00:01:03.220
it's possible that update data from a source system

21
00:01:03.220 --> 00:01:06.086
couldn't be matched to the target database.

22
00:01:06.086 --> 00:01:10.544
In this case, the update might fail or be retried in the next batch run.

23
00:01:10.544 --> 00:01:11.428
In this course,

24
00:01:11.428 --> 00:01:15.188
I'll be focusing on transforming data to be stored into a database.

25
00:01:15.188 --> 00:01:18.875
Let's look at what the target is for that transformation.

26
00:01:18.875 --> 00:01:22.886
I'm displaying the new PatientEntity class that I'll be creating shortly.

27
00:01:22.886 --> 00:01:27.292
This new class will be located in the domain package of the project.

28
00:01:27.292 --> 00:01:29.524
It's just a JPA entity class.

29
00:01:29.524 --> 00:01:34.572
Note that I've annotated the class with the PJA annotations of Entity and Table.

30
00:01:34.572 --> 00:01:37.072
In the next section of the course,

31
00:01:37.072 --> 00:01:41.136
I'll be creating the database schema for this patient table.

32
00:01:41.136 --> 00:01:45.458
For the members of this class, I've added a generated sequential ID field,

33
00:01:45.458 --> 00:01:50.346
otherwise, each field maps to a field in the input record.

34
00:01:50.346 --> 00:01:53.671
Let's create this entity class now.

35
00:01:53.671 --> 00:01:57.641
I'm going to demonstrate creating the PatientEntity class.

36
00:01:57.641 --> 00:02:00.911
Note that I'll be following demo 15 found in the DEMOS.

37
00:02:00.911 --> 00:02:05.603
md file in the root project directory.

38
00:02:05.603 --> 00:02:06.656
For this demo,

39
00:02:06.656 --> 00:02:10.810
I'll show you how to create the PatientEntity JPA class that's going

40
00:02:10.810 --> 00:02:13.394
to be used by the item processor transformation.

41
00:02:13.394 --> 00:02:16.445
In the package com.

42
00:02:16.445 --> 00:02:17.208
Pluralsight.

43
00:02:17.208 --> 00:02:17.971
springbatch.

44
00:02:17.971 --> 00:02:18.734
patientbatchloader.

45
00:02:18.734 --> 00:02:22.910
domain, we're going to create our new class.

46
00:02:22.910 --> 00:02:26.322
We're going to name the class PatientEntity.

47
00:02:26.322 --> 00:02:30.065
I need to start by making the class serializable,

48
00:02:30.065 --> 00:02:32.977
so I'm going to add the interface.

49
00:02:32.977 --> 00:02:37.005
Next, I need to include the JPA annotations.

50
00:02:37.005 --> 00:02:41.857
These annotations decorate this class as representing a JPA entity.

51
00:02:41.857 --> 00:02:44.551
Now we're going to add the entity members.

52
00:02:44.551 --> 00:02:46.616
This is going to be a lot of code,

53
00:02:46.616 --> 00:02:50.330
so I recommend using the demos file to drop in the code.

54
00:02:50.330 --> 00:02:50.752
Again,

55
00:02:50.752 --> 00:02:54.812
each of these attributes that I've added map directly to a

56
00:02:54.812 --> 00:02:58.585
record from the input file with the exception of the Id that

57
00:02:58.585 --> 00:03:01.091
contains the Generated sequence value.

58
00:03:01.091 --> 00:03:02.922
I'm going to scroll down to the birthdate.

59
00:03:02.922 --> 00:03:05.595
Note that unlike the input for the birthdate,

60
00:03:05.595 --> 00:03:08.994
I'll be outputting to the database with the type LocalDate.

61
00:03:08.994 --> 00:03:12.527
I'll be adding that logic in the item processor.

62
00:03:12.527 --> 00:03:16.937
Next, let's add the constructors for the Entity class.

63
00:03:16.937 --> 00:03:19.213
Let's scroll up a bit.

64
00:03:19.213 --> 00:03:22.583
The second constructor contains all fields with the

65
00:03:22.583 --> 00:03:24.180
exception of the generated ID.

66
00:03:24.180 --> 00:03:27.566
I'll use this constructor later for item processing convenience.

67
00:03:27.566 --> 00:03:34.100
Now I need to generate the getters and setters for the members on the class.

68
00:03:34.100 --> 00:03:36.836
I'm going to select all members.

69
00:03:36.836 --> 00:03:40.941
And finally, I want to generate a toString method.

70
00:03:40.941 --> 00:03:43.271
I'm going to do that at the bottom.

71
00:03:43.271 --> 00:03:47.076
Again, I'm going to select all of the members of the class,

72
00:03:47.076 --> 00:03:55.000
and now my PatientEntity class is complete. And that also completes the demo.

