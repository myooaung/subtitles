WEBVTT
1
00:00:02.280 --> 00:00:07.105
With the item processor implemented, the next step is to unit test it.

2
00:00:07.105 --> 00:00:10.453
I'm showing a portion of the code for a new unit test case to be

3
00:00:10.453 --> 00:00:14.747
created in the BatchJobConfigurationTest class.

4
00:00:14.747 --> 00:00:19.482
As this item processor is just a Java function, testing is relatively simple.

5
00:00:19.482 --> 00:00:24.400
I'm just constructing an instance of PatientRecord with sample data,

6
00:00:24.400 --> 00:00:29.088
then I pass that data into the apply method of the processor function.

7
00:00:29.088 --> 00:00:31.232
This returns a PatientEntity.

8
00:00:31.232 --> 00:00:37.062
Finally, I perform assertions to validate that the entity was correctly built.

9
00:00:37.062 --> 00:00:39.797
Note that while this test is against the Java function,

10
00:00:39.797 --> 00:00:41.695
I annotated the Bean with StepScope.

11
00:00:41.695 --> 00:00:42.645
Because of this,

12
00:00:42.645 --> 00:00:46.143
I'm also going to be required to add test listeners

13
00:00:46.143 --> 00:00:48.692
to create a StepScope for my test.

14
00:00:48.692 --> 00:00:52.109
Let's create that test now.

15
00:00:52.109 --> 00:00:55.622
In this demo, I'll be adding a test case for the item processor,

16
00:00:55.622 --> 00:00:59.573
as well as modifying the test class to add listeners for a StepScope.

17
00:00:59.573 --> 00:01:03.264
Please note that I'll be following Demo 17 found in the DEMOS.

18
00:01:03.264 --> 00:01:07.423
md file in the root project directory.

19
00:01:07.423 --> 00:01:09.273
With the item processor implementation in place,

20
00:01:09.273 --> 00:01:11.730
I want to now unit test the code.

21
00:01:11.730 --> 00:01:13.621
Let's create the unit test.

22
00:01:13.621 --> 00:01:15.768
Open the class BatchJobConfigurationTest.

23
00:01:15.768 --> 00:01:20.888
I'm going to start by adding an attribute for the

24
00:01:20.888 --> 00:01:23.811
item processor into the test class.

25
00:01:23.811 --> 00:01:28.423
This will autowire the processor Bean that it created into the test class.

26
00:01:28.423 --> 00:01:30.061
Next let's scroll to the bottom,

27
00:01:30.061 --> 00:01:33.495
and we're going to add the item processor test case.

28
00:01:33.495 --> 00:01:39.617
The item processor test simply calls the Java function apply method to

29
00:01:39.617 --> 00:01:43.229
transform the test PatientRecord into a PatientEntity.

30
00:01:43.229 --> 00:01:46.123
I'm going to scroll down so we can see the bottom of this.

31
00:01:46.123 --> 00:01:48.559
While the implementation is simply a Java function,

32
00:01:48.559 --> 00:01:51.470
I annotated the Bean with the StepScope annotation.

33
00:01:51.470 --> 00:01:56.130
Given this, the test will fail as it wasn't executed within a step.

34
00:01:56.130 --> 00:01:59.983
To overcome this, I'm going to add an annotation to the class.

35
00:01:59.983 --> 00:02:02.667
Let me scroll up to the top now.

36
00:02:02.667 --> 00:02:07.106
I'm going to drop in an annotation for TestExecutionListeners.

37
00:02:07.106 --> 00:02:11.978
The test execution listeners I added will allow my test to succeed.

38
00:02:11.978 --> 00:02:15.658
The DependencyInjectionTestExecutionListener and

39
00:02:15.658 --> 00:02:19.089
StepScopeTestExecutionListener result in a StepScope

40
00:02:19.089 --> 00:02:22.106
context being created for my unit test.

41
00:02:22.106 --> 00:02:25.065
Now I'm going to try to execute the test.

42
00:02:25.065 --> 00:02:30.136
Let's scroll back down, and I'll click to run it in the IDE.

43
00:02:30.136 --> 00:02:32.461
And here we see that the test has passed.

44
00:02:32.461 --> 00:02:33.752
If it fails for you,

45
00:02:33.752 --> 00:02:36.830
make sure to double check your configuration changes and assure

46
00:02:36.830 --> 00:02:45.000
that you've added listeners to this class. This completes the demo for unit testing the item processor.

