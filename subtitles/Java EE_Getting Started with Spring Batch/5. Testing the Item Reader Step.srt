1
00:00:02,056 --> 00:00:06,960
Now that the ItemReader is implemented, I want to be able to unit test it.

2
00:00:06,960 --> 00:00:09,318
Spring Batch provides strong support for unit testing

3
00:00:09,318 --> 00:00:11,161
as you're going to see shortly.

4
00:00:11,161 --> 00:00:16,250
I'm displaying the first part of updates I'll be making to the

5
00:00:16,250 --> 00:00:18,460
existing BatchJobConfigurationTest class.

6
00:00:18,460 --> 00:00:23,518
First, I'll autowire the FlatFileItemReader that I just created.

7
00:00:23,518 --> 00:00:25,059
Then, as part of test setup,

8
00:00:25,059 --> 00:00:27,743
I'll be defining the JobParameter for the ItemReader test.

9
00:00:27,743 --> 00:00:33,412
The file name will be a test csv file, which includes only one test record.

10
00:00:33,412 --> 00:00:37,641
We can find this file in the data folder of the project.

11
00:00:37,641 --> 00:00:40,364
Next, let's look at the test.

12
00:00:40,364 --> 00:00:44,211
Here is the full test case I'll implement for the file ItemReader.

13
00:00:44,211 --> 00:00:47,933
I'm going to use the Spring Batch construct

14
00:00:47,933 --> 00:00:51,304
MetaDataInstanceFactory to create a StepExecution using the

15
00:00:51,304 --> 00:00:54,234
jobParameters that I defined for testing.

16
00:00:54,234 --> 00:00:58,681
I'm going to use Spring Batch's StepScopeTestUtils to execute the step

17
00:00:58,681 --> 00:01:02,524
with the scope that will include our fileName parameter.

18
00:01:02,524 --> 00:01:06,288
I'm going to get the count of PatientRecords for later assertion.

19
00:01:06,288 --> 00:01:09,255
I'll then read the record in the test file and perform

20
00:01:09,255 --> 00:01:11,956
assertions on each field of the record.

21
00:01:11,956 --> 00:01:15,846
Finally, I'll perform the assertion on the record count.

22
00:01:15,846 --> 00:01:18,812
This is a fairly robust test of the reader.

23
00:01:18,812 --> 00:01:21,713
If I wanted to simulate other situations with the reader,

24
00:01:21,713 --> 00:01:24,982
I could create other simple unit test files that

25
00:01:24,982 --> 00:01:27,161
set up fixtures for these cases.

26
00:01:27,161 --> 00:01:31,355
Now let's implement the test.

27
00:01:31,355 --> 00:01:34,341
We're going to add the FlatFileItemReader test and test setup

28
00:01:34,341 --> 00:01:36,451
to the existing ConfigurationTest class.

29
00:01:36,451 --> 00:01:41,861
Note that I'll be following Demo 13 found in the DEMOS.

30
00:01:41,861 --> 00:01:45,149
md file in the root project directory.

31
00:01:45,149 --> 00:01:46,434
For this demo,

32
00:01:46,434 --> 00:01:50,070
I'll be adding the FlatFileItemReader implementation to the

33
00:01:50,070 --> 00:01:53,898
BatchConfigurationTest case to verify its configuration.

34
00:01:53,898 --> 00:01:58,098
Open up the class BatchJobConfigurationTest.

35
00:01:58,098 --> 00:02:04,056
I'm going to start by autowiring the reader as a member on this Test class.

36
00:02:04,056 --> 00:02:06,777
This will inject the FlatFileItemReader

37
00:02:06,777 --> 00:02:09,499
implementation from the Configuration class.

38
00:02:09,499 --> 00:02:13,237
To support the reader, we need to create job parameters for testing.

39
00:02:13,237 --> 00:02:15,612
Let's drop those in now.

40
00:02:15,612 --> 00:02:17,513
Now, before each test,

41
00:02:17,513 --> 00:02:22,056
the JobParameter map will be initialized with a test input file.

42
00:02:22,056 --> 00:02:24,475
The input file only contains a limited number of

43
00:02:24,475 --> 00:02:26,569
records for the purpose of unit testing.

44
00:02:26,569 --> 00:02:30,880
Now I'm going to drop in the test case for the FlatFileItemReader.

45
00:02:30,880 --> 00:02:35,814
Note that this test method uses the Spring Batch

46
00:02:35,814 --> 00:02:40,873
StepScopeTestUtils class to test the execution of the reader.

47
00:02:40,873 --> 00:02:42,436
Just like in a full execution,

48
00:02:42,436 --> 00:02:45,918
the parameter for the file name will be passed into the step

49
00:02:45,918 --> 00:02:48,717
and the reader will read from the file.

50
00:02:48,717 --> 00:02:51,420
Note that I've added several assertions for the content of

51
00:02:51,420 --> 00:02:54,400
the file and the count of records read.

52
00:02:54,400 --> 00:02:57,245
Let's look at that count check now.

53
00:02:57,245 --> 00:03:01,879
Here we see at the bottom of the test the check for an assertion of 1.

54
00:03:01,879 --> 00:03:14,000
Now let's try to run the test, and our test passed successfully. This completes the implementation of the test case for the new ItemReader.

