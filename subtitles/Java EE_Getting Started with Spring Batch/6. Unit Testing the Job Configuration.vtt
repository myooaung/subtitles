WEBVTT
1
00:00:01.945 --> 00:00:06.582
With the job and step configuration built, I can now create a simple test.

2
00:00:06.582 --> 00:00:09.860
The new Test class will verify the job is available in the

3
00:00:09.860 --> 00:00:12.428
Spring context with the correct name.

4
00:00:12.428 --> 00:00:15.640
I'm displaying the code for the test.

5
00:00:15.640 --> 00:00:19.479
Note this is a JUnit Test that leverages the SpringRunner.

6
00:00:19.479 --> 00:00:23.295
I'm also using the SpringBootTest annotation to use the context

7
00:00:23.295 --> 00:00:26.577
loaded by the main application class of the project.

8
00:00:26.577 --> 00:00:30.242
Also, I'm using the dev Spring profile for the test.

9
00:00:30.242 --> 00:00:33.361
The actual test method will then assert the job configuration I've

10
00:00:33.361 --> 00:00:38.468
autowired is available and has the correct name.

11
00:00:38.468 --> 00:00:41.008
Now that you see what the test looks like,

12
00:00:41.008 --> 00:00:42.984
let's create it in the demo application.

13
00:00:42.984 --> 00:00:46.657
To do this, I'm going to be following Demo 7 found in the DEMOS.

14
00:00:46.657 --> 00:00:50.622
md file in the root project directory.

15
00:00:50.622 --> 00:00:52.436
With the BatchJobConfiguration class defined,

16
00:00:52.436 --> 00:00:56.935
we simply want to start unit testing by verifying that the job

17
00:00:56.935 --> 00:00:59.238
is created correctly by the configuration.

18
00:00:59.238 --> 00:01:02.367
We're going to create a class named

19
00:01:02.367 --> 00:01:06.743
BatchJobConfigurationTest in the test package com.

20
00:01:06.743 --> 00:01:07.755
Pluralsight.

21
00:01:07.755 --> 00:01:08.767
springbatch.

22
00:01:08.767 --> 00:01:09.778
patientbatchloader.

23
00:01:09.778 --> 00:01:10.790
config.

24
00:01:10.790 --> 00:01:13.279
Let's do that now.

25
00:01:13.279 --> 00:01:18.257
I'll enter in the class name as BatchJobConfigurationTest.

26
00:01:18.257 --> 00:01:22.289
Our first step is to add annotations for the class to run tests with the

27
00:01:22.289 --> 00:01:26.837
SpringRunner class and for the class to run as a Spring Boot test using

28
00:01:26.837 --> 00:01:29.673
the main application class of the project.

29
00:01:29.673 --> 00:01:33.443
We'll also want to use the dev Spring profile.

30
00:01:33.443 --> 00:01:35.826
Now that we have our test scaffolding in place,

31
00:01:35.826 --> 00:01:38.185
let's autowire the configured job bean.

32
00:01:38.185 --> 00:01:42.877
And finally, we need to define the test method.

33
00:01:42.877 --> 00:01:45.178
I'm going to test that the job was successfully

34
00:01:45.178 --> 00:01:47.030
Autowired and that it's not null.

35
00:01:47.030 --> 00:01:50.648
I'll also verify that the job has the correct name.

36
00:01:50.648 --> 00:01:52.848
Let's drop that method in now.

37
00:01:52.848 --> 00:01:56.148
With the test defined, let's try to run it.

38
00:01:56.148 --> 00:02:01.280
From the IDE, I'm going to run the new test method.

39
00:02:01.280 --> 00:02:03.250
And, as we see, our test passed.

40
00:02:03.250 --> 00:02:05.501
If you get an error with the test,

41
00:02:05.501 --> 00:02:14.000
it's most likely due to the configuration of the Test class. This concludes the demo for unit testing the job.

