WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.010 --> 00:00:05.490
Next we'll understand how to create a list EPA from the charge more

00:00:05.490 --> 00:00:12.885
than Go to Google Cloud and selectivity in the way we have done earlier,

00:00:12.885 --> 00:00:17.890
make sure is TDP HTTPS axis is allowed.

00:00:17.960 --> 00:00:24.930
You can have additional space if p1 by ten dB should be sufficient for this demo.

00:00:24.930 --> 00:00:30.210
Cleared the instance mixture,

00:00:30.210 --> 00:00:33.520
all the ports are open the way we had shown earlier.

00:00:37.960 --> 00:00:40.505
Let's log into the console.

00:00:40.505 --> 00:00:43.889
We need to install all standard libraries.

00:00:46.300 --> 00:00:48.830
The stem dirty snow libraries,

00:00:48.830 --> 00:00:56.960
we need our starch and pandas installed the liabilities one-by-one.

00:00:56.960 --> 00:00:59.070
The way you have done earlier.

00:01:04.360 --> 00:01:09.360
Flask would be required to create the rest API.

00:01:13.570 --> 00:01:16.685
Numpy scikit-learn.

00:01:16.685 --> 00:01:18.590
And then we'll install

00:01:18.590 --> 00:01:20.130
starch

00:01:27.610 --> 00:01:28.910
so that we

00:01:28.910 --> 00:01:33.630
can pull files from our GitHub repository.

00:01:35.950 --> 00:01:39.300
We would need the pickle file.

00:01:39.640 --> 00:01:43.050
Let's copy it from GitHub.

00:01:44.170 --> 00:01:48.620
Let's copy down by more than

00:01:48.620 --> 00:01:49.130
land on

00:01:49.130 --> 00:01:50.580
Jupiter

00:01:59.530 --> 00:02:02.130
binders.

00:02:02.590 --> 00:02:08.090
After dark tau, we can run the Python file which we run in Columbia environment.

00:02:08.090 --> 00:02:13.920
Just download the notebook is r dot by and run it and you will get output.

00:02:15.550 --> 00:02:20.630
This output for 42 n salary 40 thousand.

00:02:20.630 --> 00:02:23.840
Next we'll create a rest API using Flask.

00:02:23.840 --> 00:02:27.860
The court is pretty much similar to what we have done earlier.

00:02:27.860 --> 00:02:31.310
Let me first turn it and then I'll show you the code in the meantime,

00:02:31.310 --> 00:02:37.290
try to guess what Alton is required to create this flask list API.

00:02:39.310 --> 00:02:44.670
As you might have guessed, unit due to Lord the Morton.

00:02:46.150 --> 00:02:50.610
And you also need to create it SDP.

00:02:50.920 --> 00:02:53.870
And then use store doubt,

00:02:53.870 --> 00:02:56.910
put in a variable and then just return it.

00:03:00.310 --> 00:03:05.210
To access the model, copy the public IP from the Google cloud instance.

00:03:05.210 --> 00:03:08.195
And I, it's running at port 85.

00:03:08.195 --> 00:03:12.600
Now let's run it with age 40 and salvatore 1000.

00:03:15.160 --> 00:03:21.510
We got the response from the Google Cloud API.

00:03:23.140 --> 00:03:27.690
We can change the way lose and get different outputs.

00:03:28.300 --> 00:03:33.620
Now, this can be accessed from any application be java.net Python

00:03:33.620 --> 00:03:39.840
because it's a rest API request and response to be sent over HTTP protocol.
