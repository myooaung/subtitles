WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:02.130
We'll be covering Python,

00:00:02.130 --> 00:00:04.500
Numpy, Pandas and matplotlib.

00:00:04.500 --> 00:00:08.535
In this lab. You are already familiar with these Python liabilities.

00:00:08.535 --> 00:00:12.255
Then you can skip this lecture and move to the next one.

00:00:12.255 --> 00:00:17.190
Let's create a new file using spider and start coding.

00:00:17.190 --> 00:00:21.255
In Python, you can declare variables without giving datatypes.

00:00:21.255 --> 00:00:25.245
And he put now populate a string value we may,

00:00:25.245 --> 00:00:27.195
Python will not complain.

00:00:27.195 --> 00:00:29.370
Can spider variable explorer,

00:00:29.370 --> 00:00:32.025
you can see all the variables and their value.

00:00:32.025 --> 00:00:35.700
Let's say three, be equal to five,

00:00:35.700 --> 00:00:42.520
then break into a plus b. Select this 31.

00:00:42.520 --> 00:00:45.890
So we can see that the output is getting printed in Python.

00:00:45.890 --> 00:00:48.680
You can perform all kinds of arithmetic operations.

00:00:48.680 --> 00:00:51.575
Python is a data type called list.

00:00:51.575 --> 00:00:55.115
And you declared that within square brackets.

00:00:55.115 --> 00:00:58.399
And then you specify a list of elements.

00:00:58.399 --> 00:01:02.435
And you can then grab elements specifying the index number.

00:01:02.435 --> 00:01:04.925
And index number starts with 0.

00:01:04.925 --> 00:01:08.720
We'll print this out. Then.

00:01:08.720 --> 00:01:12.560
Do, DO whatever index one, and so on.

00:01:12.560 --> 00:01:16.849
To grab the last element, you specify minus1.

00:01:16.849 --> 00:01:20.675
You can also specify three in this case,

00:01:20.675 --> 00:01:24.290
but minus1 would also give you the last element.

00:01:24.290 --> 00:01:26.750
That way when the list is very long,

00:01:26.750 --> 00:01:29.960
you can easily grab the last element by specifying minus1.

00:01:29.960 --> 00:01:32.180
And then if you do minus two,

00:01:32.180 --> 00:01:36.440
it will give you the second last element, that is 30.

00:01:36.440 --> 00:01:40.100
So this is how we can declare a list and grabbed different elements.

00:01:40.100 --> 00:01:45.000
And the list can have communist enough different data types.

00:01:46.090 --> 00:01:51.905
In Python, you can write a loop by giving a condition colon and hit enter.

00:01:51.905 --> 00:01:55.800
In Python, both single quotes and double quotes are fine.

00:01:58.450 --> 00:02:01.850
Space and indentation batters in Python.

00:02:01.850 --> 00:02:03.890
So if we write this like this,

00:02:03.890 --> 00:02:08.464
it'll give her loop ends when Sundance.

00:02:08.464 --> 00:02:11.705
Now if I write something here that is outside,

00:02:11.705 --> 00:02:15.230
if look outside the loop is getting printed,

00:02:15.230 --> 00:02:19.020
debate change the condition. It'll print both.

00:02:21.190 --> 00:02:25.610
There are many ways you can write a for loop in Python.

00:02:25.610 --> 00:02:29.480
So I can say for i in range ten.

00:02:29.480 --> 00:02:34.980
So this should print the value of i is starting from 0 to nine.

00:02:36.700 --> 00:02:39.545
So these are the ten values.

00:02:39.545 --> 00:02:42.725
You can also look through this list.

00:02:42.725 --> 00:02:48.755
My enlist, you can say for i in my underscore List,

00:02:48.755 --> 00:02:53.880
tie, it, printed all the elements of the list.

00:02:54.430 --> 00:02:59.760
And let's do another operation on the list,

00:03:00.040 --> 00:03:04.040
which is picking all the values from the first list,

00:03:04.040 --> 00:03:05.600
multiplying them by three,

00:03:05.600 --> 00:03:08.390
had been creating the new list.

00:03:08.390 --> 00:03:13.055
In Python, you declare function with the def keyword.

00:03:13.055 --> 00:03:16.520
Calculate some, let's say a, B.

00:03:16.520 --> 00:03:18.785
And we can get done this sum.

00:03:18.785 --> 00:03:26.720
And now we can call this passing two values and then we'll get the sum.

00:03:26.720 --> 00:03:30.420
You can also return multiple values.

00:03:30.600 --> 00:03:34.405
So we can see that both the variables are getting populated.

00:03:34.405 --> 00:03:36.640
So desire you can return multiple values from

00:03:36.640 --> 00:03:41.860
a Python function to create a file in Python,

00:03:41.860 --> 00:03:46.930
use with open and then write some content.

00:03:46.930 --> 00:03:50.860
You can see my file in the file explorer.

00:03:50.860 --> 00:03:53.540
It has sample content.

00:03:54.870 --> 00:03:59.185
Note that the mode is W here. That is what rating.

00:03:59.185 --> 00:04:02.590
You can add more content with an app campaign mode.

00:04:02.590 --> 00:04:07.045
Let's execute this and check out the file.

00:04:07.045 --> 00:04:09.775
You can see more contents getting art it.

00:04:09.775 --> 00:04:14.420
But you can also work with the W mode.

00:04:14.860 --> 00:04:17.795
Now you should see that new content,

00:04:17.795 --> 00:04:22.805
heavy things should get overwritten new content.

00:04:22.805 --> 00:04:26.540
So these are, we can create a file in Python.

00:04:26.540 --> 00:04:29.270
Let's now understand NumPy.

00:04:29.270 --> 00:04:34.160
Numpy is a popular Python liability for scientific computing.

00:04:34.160 --> 00:04:37.070
First we need to import numpy,

00:04:37.070 --> 00:04:39.170
will import numpy as np.

00:04:39.170 --> 00:04:42.575
And now we can do all NumPy operation using NB.

00:04:42.575 --> 00:04:45.710
Many of the popular machine learning libraries,

00:04:45.710 --> 00:04:50.735
scikit-learn, they're designed to work based on Numpy arrays.

00:04:50.735 --> 00:04:53.420
You can create a list.

00:04:53.420 --> 00:04:55.770
Let's declare a list.

00:04:56.080 --> 00:05:00.545
And we can create a one-dimensional array from the list.

00:05:00.545 --> 00:05:02.150
Let's take out this value,

00:05:02.150 --> 00:05:04.560
sample number one DRA.

00:05:05.500 --> 00:05:08.135
So this is a numpy array object,

00:05:08.135 --> 00:05:11.180
will now create a two-dimensional NumPy array.

00:05:11.180 --> 00:05:14.990
It has four rows and three columns.

00:05:14.990 --> 00:05:18.875
Should create an umpire two-dimensional lattice.

00:05:18.875 --> 00:05:22.010
You can easily reshape them pair is.

00:05:22.010 --> 00:05:24.620
So this is a for row three column array.

00:05:24.620 --> 00:05:28.715
We can reshape it to two rows and six columns.

00:05:28.715 --> 00:05:30.770
Note that when you reshape,

00:05:30.770 --> 00:05:32.960
the original Arabism get reshaped,

00:05:32.960 --> 00:05:36.150
you can store it in a new way.

00:05:37.960 --> 00:05:41.960
It has two rows and six columns.

00:05:41.960 --> 00:05:46.385
You can reshape provided the total number of elements match.

00:05:46.385 --> 00:05:49.774
You cannot have two files because it has two elements.

00:05:49.774 --> 00:05:52.625
If we reshape with, let's say one minus1,

00:05:52.625 --> 00:05:57.150
it would create one row and maximum number of columns.

00:05:57.370 --> 00:06:04.025
Similarly, you've got to reshape to one column and maximum number of gross possible.

00:06:04.025 --> 00:06:06.875
You can do that by specifying minus1 and one.

00:06:06.875 --> 00:06:09.830
You don't have to count how many rows or columns are there.

00:06:09.830 --> 00:06:13.080
We will have this as new edit three.

00:06:13.510 --> 00:06:18.260
So this is how we can reshape NumPy R is sometimes doing machine learning processing.

00:06:18.260 --> 00:06:21.350
You might have to extract rows and extract columns

00:06:21.350 --> 00:06:26.070
and do some operations to this reshaping would be very useful.

00:06:26.710 --> 00:06:29.720
You can grab a portion of the Numpy array.

00:06:29.720 --> 00:06:36.275
So this means give me first draw up to third row but not intuiting the third row.

00:06:36.275 --> 00:06:38.660
Second column up to fourth column,

00:06:38.660 --> 00:06:40.670
but not including the fourth column.

00:06:40.670 --> 00:06:42.530
Let's see what we get.

00:06:42.530 --> 00:06:46.025
So the original array doesn't get changed.

00:06:46.025 --> 00:06:51.965
We live to populate it to a new array and see the output news sample.

00:06:51.965 --> 00:06:56.825
We got rosy at index 12 and column at index two,

00:06:56.825 --> 00:07:00.000
because there is no column at index three.

00:07:00.850 --> 00:07:06.005
Pandas is a popular Python library for data analysis.

00:07:06.005 --> 00:07:11.435
You import pandas saying import pandas as pd, that is convincing.

00:07:11.435 --> 00:07:15.800
And pandas one-dimensional arrays known as cities.

00:07:15.800 --> 00:07:19.385
So this is very clear that cities, it's one-dimensional.

00:07:19.385 --> 00:07:21.440
Their advantage with parentheses,

00:07:21.440 --> 00:07:23.975
you can give your elements and name.

00:07:23.975 --> 00:07:27.305
For example, I can say 10203040,

00:07:27.305 --> 00:07:29.510
but I can give them a label.

00:07:29.510 --> 00:07:32.250
Let's check it out.

00:07:33.520 --> 00:07:39.620
You can see that the index ABCD,

00:07:39.620 --> 00:07:42.860
you can grab a limit specifying the number,

00:07:42.860 --> 00:07:44.615
index number ours perspective.

00:07:44.615 --> 00:07:49.535
If you do Sample Series two, you get 30.

00:07:49.535 --> 00:07:54.305
You can also grab it by saying sampled cities to see.

00:07:54.305 --> 00:07:57.605
That will also give the same value.

00:07:57.605 --> 00:08:00.290
You declare a DataFrame,

00:08:00.290 --> 00:08:06.905
which is a two-dimensional array using pd dot DataFrame function.

00:08:06.905 --> 00:08:11.670
And you can pass a two-dimensional list and you'll get a DataFrame.

00:08:13.030 --> 00:08:16.805
We can see the pandas DataFrame.

00:08:16.805 --> 00:08:22.415
And with Pandas, you can also give rows and columns and label.

00:08:22.415 --> 00:08:24.635
Should now we have row one,

00:08:24.635 --> 00:08:27.695
row four, column two, column three.

00:08:27.695 --> 00:08:31.460
And you can grab elements specifying row name,

00:08:31.460 --> 00:08:37.130
column name, or specifying the index number for each row and column.

00:08:37.130 --> 00:08:38.615
So column three years,

00:08:38.615 --> 00:08:41.855
36912, which is this.

00:08:41.855 --> 00:08:46.550
And you can grab multiple columns by specifying both the columns.

00:08:46.550 --> 00:08:53.465
To grab rows, you're pre-specify a Lucy location and give Roden m,

00:08:53.465 --> 00:08:57.170
you will get the row to grab a portion of the DataFrame.

00:08:57.170 --> 00:09:02.975
You can specify a boat row and column names and get that person.

00:09:02.975 --> 00:09:05.660
So we're getting column two, column three, row two,

00:09:05.660 --> 00:09:10.170
row three from the sample data frame two.

00:09:10.240 --> 00:09:14.000
You can also specify index location in

00:09:14.000 --> 00:09:18.200
instead of liberals to get a portion of a DataFrame.

00:09:18.200 --> 00:09:22.205
This is rho 0 all the way up to row two naught including row two,

00:09:22.205 --> 00:09:23.900
column one, up to column three,

00:09:23.900 --> 00:09:25.385
not including column three.

00:09:25.385 --> 00:09:27.320
If you don't specify anything,

00:09:27.320 --> 00:09:30.005
you get all the rows and all the columns.

00:09:30.005 --> 00:09:33.245
And if you are up to the last column,

00:09:33.245 --> 00:09:36.120
you say black minus1.

00:09:36.520 --> 00:09:41.130
So you've got 14710 to 581.

00:09:41.790 --> 00:09:45.640
That is column one, column two, and all the rows.

00:09:45.640 --> 00:09:49.735
And we said grab all the columns up to the last column.

00:09:49.735 --> 00:09:53.440
So this is how we can grab all the columns and all the rows,

00:09:53.440 --> 00:09:56.005
but excluding the last column.

00:09:56.005 --> 00:10:01.225
And a subset of a DataFrame is a dataframe if it is two diamonds smell.

00:10:01.225 --> 00:10:04.495
If you are grabbing one row or one column, it could be a series.

00:10:04.495 --> 00:10:07.870
In Python, you can use tape to check paper of any variable.

00:10:07.870 --> 00:10:12.220
You can easily convert it to Pandas by invoking

00:10:12.220 --> 00:10:16.855
dot values when he machine-learning liabilities are designed to our Putnam PRA.

00:10:16.855 --> 00:10:20.450
So do the conversion using dark values.

00:10:21.330 --> 00:10:24.385
This is now a NumPy array.

00:10:24.385 --> 00:10:27.835
You see two opening and closing brackets.

00:10:27.835 --> 00:10:30.580
So it's a two-dimensional NumPy array.

00:10:30.580 --> 00:10:36.110
You can store this in a new NumPy array.

00:10:39.390 --> 00:10:42.160
This is now a numpy array.

00:10:42.160 --> 00:10:48.910
We grabbed a portion of the DataFrame and converted it to a NumPy data with dark values.

00:10:48.910 --> 00:10:52.285
This would convert the last column to a NumPy data.

00:10:52.285 --> 00:10:56.125
Let's look at an example of filter operations on DataFrames.

00:10:56.125 --> 00:10:57.715
So we are saying here,

00:10:57.715 --> 00:11:01.615
get me those samples where column one values are greater than for.

00:11:01.615 --> 00:11:04.570
Wherever it is greater than 48 gives you true.

00:11:04.570 --> 00:11:06.810
Otherwise it gave you false.

00:11:06.810 --> 00:11:12.480
Sample DataFrame. You apply that condition on the mid DataFrame.

00:11:13.210 --> 00:11:19.520
With Pandas, you can easily read CSV files are indeed get-up file.

00:11:19.520 --> 00:11:21.350
And as is the read_csv,

00:11:21.350 --> 00:11:25.085
let's read a sample.csv file from our repository.

00:11:25.085 --> 00:11:29.630
We would say store data dot CSV.

00:11:29.630 --> 00:11:34.170
Pandas would load the CSV file to a DataFrame.

00:11:34.270 --> 00:11:37.800
And if we check our DF Now,

00:11:39.760 --> 00:11:44.405
there, that's pursuit has been loaded into a DataFrame.

00:11:44.405 --> 00:11:46.685
We can check the file also.

00:11:46.685 --> 00:11:49.040
So these are huge in part does you can easily

00:11:49.040 --> 00:11:52.985
load all the rows and columns to a DataFrame.

00:11:52.985 --> 00:11:58.490
With df.describe, you can get video statistical element about the DataFrame.

00:11:58.490 --> 00:12:00.200
Like how many rows,

00:12:00.200 --> 00:12:02.915
what is the mean and standard deviation?

00:12:02.915 --> 00:12:06.695
You can get additional info with dF dot info.

00:12:06.695 --> 00:12:09.215
What data type and what are the columns?

00:12:09.215 --> 00:12:13.290
Df.loc head would give you the first five rows.

00:12:13.360 --> 00:12:16.955
You can take sample of a DataFrame by doing head.

00:12:16.955 --> 00:12:21.170
And you can also specify how many rows you weren't in the head.

00:12:21.170 --> 00:12:23.435
So this get-up premise three columns.

00:12:23.435 --> 00:12:27.260
We can grab the first two columns and convert that Vietnam.

00:12:27.260 --> 00:12:30.545
Now let's go to variable explorer and check x.

00:12:30.545 --> 00:12:33.770
So it is the first two columns because

00:12:33.770 --> 00:12:37.535
we excluded the last column and it has been converted to an umpire.

00:12:37.535 --> 00:12:39.875
To convert the last column,

00:12:39.875 --> 00:12:42.215
you simply grab the last column.

00:12:42.215 --> 00:12:44.570
You do not have to specify the range.

00:12:44.570 --> 00:12:48.740
And the last column will get converted to an umpire.

00:12:48.740 --> 00:12:51.215
It's a one-dimensional area.

00:12:51.215 --> 00:12:54.980
Finally, let's look at the matplotlib library.

00:12:54.980 --> 00:12:59.210
Using matplotlib, you can visualize the data by drawing different bloods.

00:12:59.210 --> 00:13:03.200
Spider is applauds tab where the plots will get created.

00:13:03.200 --> 00:13:06.575
You import matplotlib like this.

00:13:06.575 --> 00:13:09.810
Now let's declare two lists.

00:13:10.510 --> 00:13:13.010
And we'll plot x and y.

00:13:13.010 --> 00:13:15.800
We got inline-block by default, we get a line plot.

00:13:15.800 --> 00:13:18.425
When we plot to get a scatter plot,

00:13:18.425 --> 00:13:21.000
you say plt.plot scatter.

00:13:21.640 --> 00:13:23.930
And you will get a scatter plot.

00:13:23.930 --> 00:13:32.189
You can give labels to your blood and also a title sample plot, x and y-axis.

00:13:33.070 --> 00:13:39.005
Let's create a plot for our data we read from the CSV file.

00:13:39.005 --> 00:13:41.345
We'll create a new plot.

00:13:41.345 --> 00:13:45.755
And X6 is we leverage the y-axis will have salary,

00:13:45.755 --> 00:13:52.980
and we'll grab columns and pass it on to the plot function to get the block.

00:13:54.700 --> 00:14:00.740
So you can see plot for our data which will aid from the CSV file.

00:14:00.740 --> 00:14:03.710
This is an example of a histogram.

00:14:03.710 --> 00:14:06.695
So this is about Numpy, Pandas,

00:14:06.695 --> 00:14:09.305
Matplotlib and some basic Python.

00:14:09.305 --> 00:14:12.395
This is not everything that is out there in those liabilities.

00:14:12.395 --> 00:14:15.500
However, this much knowledge is sufficient for you to

00:14:15.500 --> 00:14:19.560
get started with machine learning programming using Python.
