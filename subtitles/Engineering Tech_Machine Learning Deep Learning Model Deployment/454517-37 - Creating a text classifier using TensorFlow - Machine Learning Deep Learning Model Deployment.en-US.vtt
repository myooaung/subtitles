WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.410 --> 00:00:06.360
Now let us understand how to create a text classifier using TensorFlow cameras.

00:00:06.360 --> 00:00:08.580
So once our data is ready,

00:00:08.580 --> 00:00:11.475
then we can create a TensorFlow model.

00:00:11.475 --> 00:00:13.575
Similar to the earlier examples,

00:00:13.575 --> 00:00:16.260
we'll create two hidden layers and

00:00:16.260 --> 00:00:22.730
one output layer will have 500 nodes in each hidden layer, intensive loci.

00:00:22.730 --> 00:00:25.790
Whereas you do not have to specify the input layer because it will

00:00:25.790 --> 00:00:30.300
automatically determine that from the input data.

00:00:32.080 --> 00:00:36.630
Now let's train the model with a 100 epochs.

00:00:38.020 --> 00:00:41.870
Once the model has been trained to be can take the loss and

00:00:41.870 --> 00:00:45.995
accuracy and also check the model's summary.

00:00:45.995 --> 00:00:53.090
Now we can predict the way we predicted earlier for kNN or Python models.

00:00:53.090 --> 00:00:56.130
Have a sample sentence.

00:00:56.170 --> 00:00:59.375
Convert it to numeric format.

00:00:59.375 --> 00:01:03.725
Then using TensorFlow model.predict method,

00:01:03.725 --> 00:01:05.765
you predict this intimate.

00:01:05.765 --> 00:01:10.685
It is 0.79. So it means it's a positive sentence.

00:01:10.685 --> 00:01:12.815
Similarly, for the other one,

00:01:12.815 --> 00:01:15.890
we got a very low number exponential minus 07.

00:01:15.890 --> 00:01:18.320
So that's a negative sentence.

00:01:18.320 --> 00:01:22.430
Now we can save and export this model and you can

00:01:22.430 --> 00:01:25.610
create a rest API using TensorFlow model server.

00:01:25.610 --> 00:01:27.810
The way we have shown earlier.
