WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.850
Till now we have seen how to create a model and store it in the pickled format.

00:00:05.850 --> 00:00:12.330
We have also stored the standard scalar objects in binary format using picker liability.

00:00:12.330 --> 00:00:15.585
Next, we'll see how to DC relays

00:00:15.585 --> 00:00:18.810
and use this pickle objects in another Python environment.

00:00:18.810 --> 00:00:22.290
It could be on-premise or it could be on cloud.

00:00:22.290 --> 00:00:27.670
Will first try to use the pickle files to the local environment.

00:00:30.560 --> 00:00:33.330
Let's create a new Python file.

00:00:33.330 --> 00:00:36.540
We'll call it use model.predict.

00:00:36.540 --> 00:00:41.170
We first need to import the libraries.

00:00:41.260 --> 00:00:45.330
We also need to import NumPy.

00:00:49.030 --> 00:00:54.710
Next we'll DC relays and store the classifier in a local object in

00:00:54.710 --> 00:00:58.040
the new program will use the pickled dot Lord method to

00:00:58.040 --> 00:01:02.610
load the classifier that vehicle using read binary format.

00:01:07.990 --> 00:01:14.190
Similarly will read the scalar to a new object.

00:01:15.310 --> 00:01:19.655
St.petersburg will be loaded to local scalar objects.

00:01:19.655 --> 00:01:24.530
Next, we'll use the local classifier and

00:01:24.530 --> 00:01:26.810
the local scalar to predict whether

00:01:26.810 --> 00:01:30.530
a customer with age 40 and suddenly 20 thousand goodbye or not.

00:01:30.530 --> 00:01:33.979
Before running it lets clear all the old variables.

00:01:33.979 --> 00:01:36.920
You can click here and removal old variables.

00:01:36.920 --> 00:01:41.940
You can also clear the console by right-clicking and doing clear console here.

00:01:42.130 --> 00:01:45.620
Now let's run this program.

00:01:45.620 --> 00:01:49.880
Now we can see that new prediction and which is 0,

00:01:49.880 --> 00:01:52.710
which is matching with the previous prediction.

00:01:52.870 --> 00:01:56.405
Let's take the new probability.

00:01:56.405 --> 00:02:02.690
This is again 0.2 for the customer with age 40 and suddenly

00:02:02.690 --> 00:02:10.135
20 thousand and delays the classifier object and the local scalar object.

00:02:10.135 --> 00:02:13.450
Then we have tried to predict whether a customer or buyer

00:02:13.450 --> 00:02:17.905
not using this D's related objects in a new Python program.

00:02:17.905 --> 00:02:23.425
So this program doesn't know anything about how the model was built or trade.

00:02:23.425 --> 00:02:28.705
It picked up the modelling scalar from the pickle files and use them to predict.

00:02:28.705 --> 00:02:34.855
We can also try to predict for each 42 and salary 50 thousand.

00:02:34.855 --> 00:02:38.230
Earlier we got 80% probability.

00:02:38.230 --> 00:02:40.990
We should see the same output here,

00:02:40.990 --> 00:02:46.960
0.8, and prediction is one. Customer buy.

00:02:46.960 --> 00:02:52.235
So you've seen how use Pickle files in another Python Program,

00:02:52.235 --> 00:02:57.245
which doesn't know anything about how the model was built and how the model was trained.

00:02:57.245 --> 00:03:00.230
We tried this in a local environment.

00:03:00.230 --> 00:03:03.660
Next, we'll try it in a cloud environment.
