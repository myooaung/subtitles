WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.820 --> 00:00:09.190
Next we'll understand how to expose machine-learning model or rest API.

00:00:09.680 --> 00:00:14.160
Rest stands for representative scared transport.

00:00:14.160 --> 00:00:18.375
It's a popular way of extrinsic data in the real world.

00:00:18.375 --> 00:00:21.900
You can build an application using Java, Python,

00:00:21.900 --> 00:00:24.840
Scala.net, or any other programming language.

00:00:24.840 --> 00:00:27.795
And if we want to make your application accessible to others,

00:00:27.795 --> 00:00:30.615
you can expose it over rr.

00:00:30.615 --> 00:00:33.809
Any client wants to access your application.

00:00:33.809 --> 00:00:39.545
Dude, send a request to what HTTP protocol using rest and get a response back.

00:00:39.545 --> 00:00:44.100
And data is typically extension XML or JSON format.

00:00:44.320 --> 00:00:46.880
Using the Flask framework,

00:00:46.880 --> 00:00:51.365
you can easily build a risk deeply for the Python application.

00:00:51.365 --> 00:00:55.834
Let's first look at a simple Hello World application.

00:00:55.834 --> 00:01:02.250
Then we'll dive into making our machine learning model exposure porta, rest API.

00:01:02.680 --> 00:01:06.600
In spider created new Python file.

00:01:07.600 --> 00:01:11.370
We'll call it flask helloworld.

00:01:12.700 --> 00:01:14.720
To build a flask,

00:01:14.720 --> 00:01:19.745
Chris TPA import Flask and the associated request object.

00:01:19.745 --> 00:01:27.620
From the flask liability will declare an endpoint slash Model.

00:01:27.620 --> 00:01:33.059
And who will receive post request in this application.

00:01:33.460 --> 00:01:37.325
Post is one of the most common HTTP methods.

00:01:37.325 --> 00:01:41.045
Using post, one can send data to an application,

00:01:41.045 --> 00:01:43.770
can receive a response.

00:01:44.290 --> 00:01:47.585
Let's say hello world function.

00:01:47.585 --> 00:01:52.980
In this example will send the data in JSON format and receive it in JSON format.

00:01:53.770 --> 00:01:58.085
Here, whatever data we are receiving the request in JSON format,

00:01:58.085 --> 00:02:01.800
we're storing it in requests to underscore data.

00:02:03.010 --> 00:02:09.870
We'll pass the Martin limb in the request which will retrieve and display to the user.

00:02:10.810 --> 00:02:13.910
Anybody could pose the model name.

00:02:13.910 --> 00:02:17.190
Invoking this last modelling point

00:02:17.800 --> 00:02:24.125
will display simple screen you are requesting for a with Python string interpolation.

00:02:24.125 --> 00:02:26.600
We are displaying that Martin Limb.

00:02:26.600 --> 00:02:29.670
Now let's add a main method.

00:02:30.910 --> 00:02:35.405
Will specify the port number so that when the app is started,

00:02:35.405 --> 00:02:37.980
it will run it that particular port.

00:02:39.040 --> 00:02:43.170
Let's launch the application in the local environment.

00:02:43.630 --> 00:02:48.960
If anybody wants to use equally invoke it with this last model URL.

00:02:49.870 --> 00:02:53.360
Let's go to the command prompt and started

00:02:53.360 --> 00:03:03.210
the program type CMD and hit Enter to learn.com prompt.

00:03:03.610 --> 00:03:06.050
Now let's start though.

00:03:06.050 --> 00:03:08.700
Helloworld program.

00:03:09.520 --> 00:03:12.695
Darpa is now started.

00:03:12.695 --> 00:03:17.405
We have created a simple rest API which is running at port 8 thousand.

00:03:17.405 --> 00:03:23.540
Let's now see how to push data to this app and receive a response.

00:03:23.540 --> 00:03:26.700
We'll create a new Python file.

00:03:27.160 --> 00:03:31.640
We'll call it restaurants could plant dot-dot-dot.

00:03:31.640 --> 00:03:34.235
Since we will be sending the data in JSON format,

00:03:34.235 --> 00:03:36.630
let's import JSON First.

00:03:37.510 --> 00:03:42.305
We also need to import the request liability.

00:03:42.305 --> 00:03:44.555
Request is the HTTP library.

00:03:44.555 --> 00:03:48.090
And you can just hover over it and read more about this.

00:03:49.240 --> 00:03:52.925
Using requests. You can send HTTP request.

00:03:52.925 --> 00:03:58.970
Now let's have a variable for the URL. In the server name.

00:03:58.970 --> 00:04:00.305
We can have local host,

00:04:00.305 --> 00:04:04.440
or we can put the IP address that was displayed in the console.

00:04:05.110 --> 00:04:11.550
1270018 thousand, which is pointing to the local loss,

00:04:12.250 --> 00:04:19.070
will have very simple request data in JSON format with one key and one value.

00:04:19.070 --> 00:04:22.110
And we are passing KNN as the model name.

00:04:22.840 --> 00:04:25.445
Now instead a post request.

00:04:25.445 --> 00:04:29.160
Possibly you wouldn't enter data in JSON format.

00:04:29.920 --> 00:04:32.555
And from the response object,

00:04:32.555 --> 00:04:35.730
we can extract the text and print it out.

00:04:36.760 --> 00:04:40.560
Let's now run it and see the output.

00:04:43.450 --> 00:04:47.570
Now we can see the output you are requesting for a KNN model,

00:04:47.570 --> 00:04:50.520
which is coming from the SDP.
