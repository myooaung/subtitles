WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.350 --> 00:00:04.500
Next we'll create a list EPA for the machine learning

00:00:04.500 --> 00:00:09.285
model so that anybody can invoke the risk EPA and do prediction.

00:00:09.285 --> 00:00:12.135
Let's create a new Python file.

00:00:12.135 --> 00:00:20.415
We'll call it classifier rest service dot pi.

00:00:20.415 --> 00:00:24.885
Let's copy the code from the HelloWorld Python application.

00:00:24.885 --> 00:00:26.910
And we'll import pickle,

00:00:26.910 --> 00:00:32.235
import numpy will lord the pickle files.

00:00:32.235 --> 00:00:36.705
We'll use the local classifiers to predict the data.

00:00:36.705 --> 00:00:39.090
For any hedge.

00:00:39.090 --> 00:00:47.120
And salary will retrieve

00:00:47.120 --> 00:00:53.040
the agent salary from the request will first represent h, then the salary.

00:00:53.140 --> 00:00:58.730
We are now passing gays in salary edge variables to the classifier to predict.

00:00:58.730 --> 00:01:02.600
And whatever prediction we have, we'll return it.

00:01:02.600 --> 00:01:04.400
The prediction

00:01:04.400 --> 00:01:14.150
is and

00:01:14.150 --> 00:01:17.070
pass the prediction variable at different time.

00:01:17.170 --> 00:01:21.090
Now let's run this application.

00:01:25.240 --> 00:01:29.840
We'll say Python classifier, rr wizard.

00:01:29.840 --> 00:01:36.330
By now it is running at port 8 thousand.

00:01:36.700 --> 00:01:40.655
Let's clear the Machine Learning class.

00:01:40.655 --> 00:01:50.100
We'll call it a meld rest client.

00:01:53.680 --> 00:01:58.410
Let's copy the code from here.

00:01:59.440 --> 00:02:04.970
And instead of having mortal kNN, now,

00:02:04.970 --> 00:02:08.060
two parameters we leverage,

00:02:08.060 --> 00:02:12.840
which is a numeric value, let's say 40.

00:02:20.200 --> 00:02:31.715
And we love salary, 20 thousand.

00:02:31.715 --> 00:02:34.670
We are passing two variables now.

00:02:34.670 --> 00:02:38.165
And with these two variables,

00:02:38.165 --> 00:02:41.660
we are going to call the classifier predict

00:02:41.660 --> 00:02:46.235
method to get the prediction where there is going to be 0 or one.

00:02:46.235 --> 00:02:48.095
And based on that prediction,

00:02:48.095 --> 00:02:54.270
back to though client now, let's run it.

00:03:02.590 --> 00:03:05.645
We'll run it at a different port.

00:03:05.645 --> 00:03:11.450
Lets clear the console and are there to print statement

00:03:11.450 --> 00:03:17.285
for agent salary so that we can know what is insanity or being passed.

00:03:17.285 --> 00:03:20.180
Let's run it and see if everything is fine.

00:03:20.180 --> 00:03:24.290
It compiled fine. Let's now run it from the command prompt.

00:03:24.290 --> 00:03:27.305
It's running at port 8 thousand to now.

00:03:27.305 --> 00:03:37.080
And we'll go to the mail client and call it with age for the Sangre 20 thousand.

00:03:44.440 --> 00:03:54.304
The prediction is 0. If we call it with age 42 and salary,

00:03:54.304 --> 00:04:02.850
50 thousand recorded, the prediction is one.

00:04:02.950 --> 00:04:05.930
Instead of two final prediction,

00:04:05.930 --> 00:04:09.540
we can also determine the probability or risk TPA.

00:04:20.230 --> 00:04:23.880
We can see the prediction is 0.8.

00:04:24.160 --> 00:04:32.550
And if we change it to 4020 thousand, we should get 0.2.

00:04:34.060 --> 00:04:38.330
We have seen how to create a rest API using which are the clients

00:04:38.330 --> 00:04:42.215
can access the machine learning model and get the prediction.

00:04:42.215 --> 00:04:44.855
And these clients there might be running in Python,

00:04:44.855 --> 00:04:46.700
Java, or any other language.

00:04:46.700 --> 00:04:51.110
They can send data over HTTP and receive a response to what is GDP.

00:04:51.110 --> 00:04:55.670
So when you make a rest call will not only about how the application is written.

00:04:55.670 --> 00:04:59.600
This is how we can expose your Python machine learning model

00:04:59.600 --> 00:05:04.320
to other applications which are written using Python.
