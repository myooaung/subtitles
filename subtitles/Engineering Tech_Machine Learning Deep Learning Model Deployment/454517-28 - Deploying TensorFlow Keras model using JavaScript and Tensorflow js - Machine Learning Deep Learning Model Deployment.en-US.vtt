WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.000 --> 00:00:05.520
We'll now understand how to export the TensorFlow carriage customer behavior model

00:00:05.520 --> 00:00:11.080
that we created earlier and deploy it in a TensorFlow JSON moment.

00:00:11.810 --> 00:00:14.310
We have opened the notebook,

00:00:14.310 --> 00:00:18.400
which we created earlier to predict customer behavior.

00:00:19.460 --> 00:00:21.975
Now once you've created the model,

00:00:21.975 --> 00:00:25.665
we need to export it in a format that encircle a j's can understand.

00:00:25.665 --> 00:00:28.815
First we need to install TensorFlow JS.

00:00:28.815 --> 00:00:32.410
Let's do that in the collab environment.

00:00:33.200 --> 00:00:36.285
It says it's already installed.

00:00:36.285 --> 00:00:39.685
Then we'll import TensorFlow Js is,

00:00:39.685 --> 00:00:43.610
and then we'll save the Cara's model in

00:00:43.610 --> 00:00:48.185
JSON format using TMJs converters save Cara's modal method.

00:00:48.185 --> 00:00:50.450
Now, if we do a list,

00:00:50.450 --> 00:00:53.840
we see one module.js IN file and one group,

00:00:53.840 --> 00:00:57.755
one shared one of one bin file.

00:00:57.755 --> 00:01:04.500
So we need to take these two files to TensorFlow JSON moment and use them to predict.

00:01:05.890 --> 00:01:09.305
We can also view the content of the JSON file.

00:01:09.305 --> 00:01:15.680
Let's now download these two files from Google collab environment will show the module.js

00:01:15.680 --> 00:01:22.865
IN and the Groupon bin file in the same directory as the HTML file yml file,

00:01:22.865 --> 00:01:27.470
from which will predict using the exported model files.

00:01:27.470 --> 00:01:31.169
We first importance of luxuries.

00:01:31.630 --> 00:01:38.975
And then we load the model by using tf dot lower layers modal method.

00:01:38.975 --> 00:01:42.185
And we will have to write that within an asynchronous method.

00:01:42.185 --> 00:01:44.105
If we write asynchronous method,

00:01:44.105 --> 00:01:47.990
then the program execution will not wait for this method to get completed.

00:01:47.990 --> 00:01:50.135
Whenever this method is completed,

00:01:50.135 --> 00:01:52.325
the output will be shown.

00:01:52.325 --> 00:01:55.550
Without asynchronous method, the steps will get executed

00:01:55.550 --> 00:02:00.995
sequentially and your program will keep waiting until this execution is complete.

00:02:00.995 --> 00:02:06.440
So let's load the model within the JavaScript sinc function and then predict

00:02:06.440 --> 00:02:12.095
output will use the scaled value of Isn't salary for prediction.

00:02:12.095 --> 00:02:17.660
Let's first try it for a is 42 and salary 50 thousand. So these are the values.

00:02:17.660 --> 00:02:20.820
And using the same values we can predict.

00:02:23.290 --> 00:02:31.860
Now let's load this pays on live server and do Inspect Element.

00:02:32.200 --> 00:02:34.940
And go to the Console tab.

00:02:34.940 --> 00:02:38.330
We can see the prediction, which is 0.684.

00:02:38.330 --> 00:02:42.650
That means the customer route by which is seamus dot earlier prediction.

00:02:42.650 --> 00:02:44.900
Now if we try for age 207040

00:02:44.900 --> 00:02:54.305
thousand, we'll get 0.008.

00:02:54.305 --> 00:02:57.440
So that means the customer will not buy.

00:02:57.440 --> 00:03:01.040
So this is how you can export it TensorFlow Cara's model,

00:03:01.040 --> 00:03:06.150
and use it in a webpage using TensorFlow JS library.
