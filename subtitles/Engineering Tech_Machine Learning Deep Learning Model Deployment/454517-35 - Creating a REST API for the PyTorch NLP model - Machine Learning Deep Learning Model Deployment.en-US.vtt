WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:01.460 --> 00:00:04.200
Let's now create a rest API using

00:00:04.200 --> 00:00:10.720
the pipe classifier model and DFID and the pleasure that we just created.

00:00:11.390 --> 00:00:17.775
First we'll go to the Columbia environmental endow upload text classifier,

00:00:17.775 --> 00:00:23.140
Python's dictionary file and TFIDF model.predict refinement.

00:00:23.990 --> 00:00:27.820
You can simply click here and upload.

00:00:28.940 --> 00:00:32.984
Once you do that, the python dictionary

00:00:32.984 --> 00:00:37.360
and our TF-IDF model pickle file should be visible here.

00:00:38.300 --> 00:00:42.820
After that, you can follow the matters that you've learned till now.

00:00:45.390 --> 00:00:50.750
Import Flask Python, NumPy libraries.

00:00:52.320 --> 00:00:55.720
Before we lord up pi-thirds dictionary,

00:00:55.720 --> 00:00:58.135
we're predicting that in neural network class

00:00:58.135 --> 00:01:02.005
for which you'll have to specify the input sizes for 67.

00:01:02.005 --> 00:01:06.080
That was the input size for our text classifier.

00:01:06.690 --> 00:01:10.310
And let's declare a class.

00:01:12.210 --> 00:01:17.720
And now we'll declare a model class for the Python model.

00:01:17.730 --> 00:01:27.290
Next we load the Python's dictionary keys matched successfully.

00:01:27.610 --> 00:01:29.780
Now as shown earlier,

00:01:29.780 --> 00:01:34.020
let's create a rest API using Flask in Iraq.

00:01:36.730 --> 00:01:40.470
Will import runway tends Iraq.

00:01:41.590 --> 00:01:44.450
Then declare an app.

00:01:44.450 --> 00:01:47.910
Then do runway 1000 cap.

00:01:50.320 --> 00:01:55.710
And after dark, when Lord that TF-IDF model.

00:01:55.810 --> 00:01:59.900
Now we'll declare an endpoint and create

00:01:59.900 --> 00:02:04.620
a method to read the request and then predict output.

00:02:05.200 --> 00:02:10.590
First we'll read the incoming request to it, a variable.

00:02:10.810 --> 00:02:14.390
Then we'll convert that to a list.

00:02:14.390 --> 00:02:16.580
And then after that we are using

00:02:16.580 --> 00:02:20.255
the TF-IDF with treasure will convert it to numeric format.

00:02:20.255 --> 00:02:25.260
And then using Python will predict output.

00:02:27.280 --> 00:02:31.220
And then we'll compare that tensors and tensor at

00:02:31.220 --> 00:02:34.760
index 0 is higher than the tensor at index one.

00:02:34.760 --> 00:02:36.470
That's a negative sentence.

00:02:36.470 --> 00:02:39.420
Otherwise it's a positive sentence.

00:02:41.800 --> 00:02:47.670
Softer predicting, we're just comparing which value is higher.

00:02:47.740 --> 00:02:51.750
Then we're returning that sentiment.

00:02:52.090 --> 00:02:54.695
So let's run this.

00:02:54.695 --> 00:02:57.390
And now we'll run that.

00:02:57.640 --> 00:03:00.930
Record the endpoint URL.

00:03:03.400 --> 00:03:08.610
Let's now hit the rest API from the postmen tool.

00:03:10.030 --> 00:03:12.770
And we'll pass it text.

00:03:12.770 --> 00:03:16.800
And we'll try to predict the sentiment of this.

00:03:20.230 --> 00:03:24.030
So this is a positive sentence.

00:03:25.540 --> 00:03:29.160
Now let's send something else.

00:03:37.900 --> 00:03:41.315
And this is a negative sentence.

00:03:41.315 --> 00:03:46.265
So this is how you can clear the rest API for your search NLP model,

00:03:46.265 --> 00:03:48.930
and exposure to internet.
