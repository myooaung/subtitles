WEBVTT

00:00.850 --> 00:05.980
Welcome back in previously we saw how we can store information to local storage pick that backed up

00:05.980 --> 00:08.830
and make use of it within our Javascript.

00:08.830 --> 00:14.830
So one of the things that you might have noticed is that every time we need to have a name and then

00:14.950 --> 00:16.070
one value.

00:16.180 --> 00:21.230
So if we've got to store a lot of information this can get fairly long.

00:21.250 --> 00:23.020
We need to access a bunch of names.

00:23.020 --> 00:25.600
We can only get that one string value back.

00:25.690 --> 00:30.490
And this is one of the limitations to local storage and the same thing for cookies as well.

00:30.490 --> 00:34.610
So this is one of the real pain points when you're working with these.

00:34.780 --> 00:42.430
So there is actually a better way to do this and a solution for this and this is that using Jason or

00:42.430 --> 00:44.700
javascript object notation.

00:45.040 --> 00:51.010
So we are going to look at this in more detail coming up in the next lesson or the next section as we

00:51.010 --> 00:56.020
look at using Jaison and retrieving Jaison data in more detail.

00:56.110 --> 01:01.990
But for now we're just going to use a javascript object and we're going to show you how you can string

01:01.990 --> 01:10.990
a file it into a string and then also pull that back and parse it back in to a usable object format.

01:11.020 --> 01:19.330
So let's go ahead and set this up so variable and let's set up an object so we know that for objects

01:19.420 --> 01:21.130
with javascript objects.

01:21.340 --> 01:28.060
And Jason's actually very similar to javascript objects the formats actually are identical to javascript

01:28.060 --> 01:33.970
objects where you need to have key and then you have a values of these paired values.

01:34.000 --> 01:39.170
So we saw this before when we might have something like a message.

01:39.190 --> 01:40.700
So this is the key.

01:40.750 --> 01:47.370
And then the value associated with it is going to be hello world.

01:47.530 --> 01:53.270
So we could do this we could do it within this format and we know with javascript objects we don't actually

01:53.270 --> 01:57.190
need to quote around the key but in Jaison you actually do.

01:57.190 --> 02:02.910
So that's the really the big difference between Jaison and javascript object.

02:03.040 --> 02:06.880
So I want to use a JS saw on format so I have a message.

02:06.910 --> 02:15.430
And then also I can comma separated out and add in multiple values so I can have a count as well and

02:15.430 --> 02:23.070
then separate it with the colon and we can use strings or we can use numbers were booleans as well.

02:23.060 --> 02:29.050
So let's do the count and then next let's do secret.

02:29.120 --> 02:32.110
So we'll pass over a secret message as well.

02:32.420 --> 02:38.880
So and the secret is going to be Javascript of course.

02:38.880 --> 02:39.480
So there we go.

02:39.480 --> 02:45.880
So we've got some information that we're passing into our object and let's console log.

02:45.910 --> 02:51.870
This we're going to and then what I'll do is we're going to turn it into a string of fire value and

02:51.870 --> 02:56.520
then I'm going to store it into local storage and then I'm going to pick that up suddenly going to need

02:56.520 --> 03:00.320
that one key value in order to store this information.

03:00.330 --> 03:02.430
So let's go back and refresh it.

03:02.430 --> 03:08.730
So we see that this function is still working we still got this information stored within our javascript

03:09.000 --> 03:16.110
and now we set up our javascript object or J saw an object looks the same and we've got counter-message

03:16.170 --> 03:19.310
and secret so we're passing in some values.

03:19.500 --> 03:27.780
So let's take this to a next step and we're going to string a flat So we're going to do the object and

03:27.780 --> 03:30.000
we're going to call it my string.

03:30.450 --> 03:37.390
And this is a builtin method in javascript so we can do a J so on we see we've got the two options.

03:37.530 --> 03:43.740
So string of phi convert the Jason value to a string and then parse actually does the opposite.

03:43.740 --> 03:48.840
So it pulls out of a string and turns it back into an object.

03:48.840 --> 03:55.930
So let me show you the difference here and we'll do my string and then also just to save some time.

03:55.980 --> 04:00.720
Let's do my hubby G too.

04:00.850 --> 04:03.220
So we're going to call it might object to.

04:03.270 --> 04:05.590
And we're going to use Jason again.

04:05.610 --> 04:12.240
So the Jasen method and we're going to parse back the value and notice that I'm going to use the value

04:12.300 --> 04:18.060
of my string and then we'll Konsole log that information out.

04:18.090 --> 04:27.180
So basically this is going to illustrate how we can send a bunch of information as one string value

04:27.420 --> 04:28.870
and then pull that back.

04:28.920 --> 04:35.010
And this is perfect for local storage because it saves you the trouble of creating a bunch of these

04:35.580 --> 04:38.990
local storage items and storing them.

04:39.000 --> 04:39.760
So let's try that.

04:39.810 --> 04:46.270
So we won't actually see anything different on our page but we will see something different in here.

04:46.440 --> 04:48.380
So we see that at first.

04:48.450 --> 04:53.550
So this is just a regular string so notice that we can't open it up we can't select.

04:53.550 --> 04:54.990
This is just a string.

04:54.990 --> 04:58.290
So this is Jason as a string and that's it.

04:58.290 --> 05:00.830
So we can't do anything more with it.

05:00.930 --> 05:08.430
But when we pull that string and we parse it back into is Jason parce we actually have access to it

05:08.430 --> 05:09.880
just as we did before.

05:10.020 --> 05:13.060
And that means that we can make use of it within our code.

05:13.080 --> 05:20.810
So this is perfect for passing it in as into our local storage.

05:20.810 --> 05:30.890
So what I want you to do now is pass your object as a string into your local storage so set it up as

05:30.890 --> 05:36.740
an item in the local storage and you can call it whatever you want is I'm going to call it.

05:36.930 --> 05:39.910
And he asks for a message and then output.

05:39.920 --> 05:41.450
All of this information.

05:41.480 --> 05:48.170
So what I want you to do is to pass that in as an item into your browser.

05:48.320 --> 05:56.630
Local storage and then pull that back out and output all of these values within your HVM else.

05:56.630 --> 05:59.690
So go ahead and try that and I'll show you the solution coming up.

06:01.720 --> 06:04.450
So P.N. an opportunity to try that out.

06:04.480 --> 06:07.290
And now let me show you the solution for this.

06:07.300 --> 06:15.480
So the solution for this is that we can take the value and we can send it to local storage.

06:15.510 --> 06:23.210
So let me just use what we have here before and I'm going to call it MVS and because this is a string

06:23.210 --> 06:30.240
value I can send it and I can save it into my Emmies and the next thing that I need to do is I'm going

06:30.250 --> 06:39.280
to get rid of this and I can pick that up from my stored value and I can make use of it.

06:39.280 --> 06:47.470
So let's let's check to see if the US is there and if it is then what I want to do is I want to output

06:47.500 --> 06:48.820
that information.

06:48.820 --> 06:55.560
So this is where I need to parse that value so I can get rid of the console logs here.

06:55.870 --> 06:58.570
So let's use the same variable.

06:58.720 --> 07:07.120
So we know that MVS is a string value and we can return it back and parse it in as a J song object.

07:07.120 --> 07:14.470
And now we should have access to all of that wonderful information that's available within there as

07:14.470 --> 07:15.710
an object for a month.

07:15.850 --> 07:18.010
So let's first try message.

07:18.010 --> 07:22.360
So basically this should output message and

07:25.120 --> 07:31.380
let's say we're going to store it that one time and if we want to make updates to it we can update it

07:31.380 --> 07:32.040
as well.

07:32.830 --> 07:38.560
So basically what's going to happen here within this condition is that it's going to check to see if

07:38.800 --> 07:47.140
local storage has a value for mass and if it does it's going to put that value parse it take that string

07:47.140 --> 07:52.540
value turn it back into a sun object or javascript object.

07:52.630 --> 07:55.710
And then we're just going to simply output that first value in the object.

07:55.900 --> 08:02.390
And if mass doesn't exist then it's going to set that value from the string over here.

08:02.410 --> 08:06.620
So let's go ahead and save this and try this and refreshed.

08:06.640 --> 08:13.410
So we see that first time we're not actually getting any message because this is the first time first

08:13.630 --> 08:16.040
round where we're actually setting the value.

08:16.210 --> 08:19.100
Next let's refresh and we see that we're getting.

08:19.120 --> 08:19.950
Hello world.

08:20.050 --> 08:25.210
So that value is coming from the my object and it's putting into the output there.

08:25.330 --> 08:26.880
And then we can finish this off.

08:26.900 --> 08:29.070
But putting the rest of those values.

08:29.080 --> 08:35.260
So this is going to be this is actually fairly straightforward because now that we've got it within

08:35.260 --> 08:39.280
that object format we can pull back the value for message

08:42.090 --> 08:44.790
and we can pull back the value of count

08:48.750 --> 09:00.310
and we can also pull back the last value for secret so we can get that secret message out and a whole

09:00.310 --> 09:01.290
lot more.

09:01.300 --> 09:12.940
So the other thing that we can do as well is we can't increment this and next we can set or object

09:16.310 --> 09:26.290
and let's set that object value and let's now let's set the message as updated and let's set the value

09:26.350 --> 09:35.340
of count as whatever we've got within this variable and javascript to and then next we need to just

09:35.400 --> 09:37.040
store that value.

09:39.240 --> 09:43.410
So we can actually get rid of the else because we're always going to be storing that value no matter

09:43.410 --> 09:44.740
what afterwards.

09:44.750 --> 09:45.770
So let's refresh.

09:45.900 --> 09:47.850
So now whenever we refresh

09:50.810 --> 09:56.170
and we should update this to be numeric as well so let's do number.

09:56.990 --> 10:00.900
So let's convert it to a number and then we're going to increment it by one

10:06.640 --> 10:09.710
and we can set the value like this.

10:09.710 --> 10:14.590
So this one this one is a little bit longer here but it's basically the same thing that we had to do

10:14.590 --> 10:19.440
previously where we can set the values.

10:19.540 --> 10:24.730
And one last thing that I need to do is I need to string a file that objects.

10:24.730 --> 10:26.790
That's the last thing that I wasn't doing.

10:26.800 --> 10:32.590
So now when we refresh it we see that the update is working so everything is working as before but we've

10:32.590 --> 10:37.260
simplified it and we can actually pass in a whole lot more information.

10:37.330 --> 10:44.200
So go ahead and try this out for yourself and try creating even a longer object of information that

10:44.200 --> 10:45.250
you're passing.

10:45.250 --> 10:47.460
Parse it in string a Fiat.

10:47.500 --> 10:53.920
So remember when you're parsing but passing it into your local storage it needs to be a string.

10:53.920 --> 10:56.630
So this is where you can string ify that value.

10:56.650 --> 11:01.480
And then when you're picking it up you can parse it back to using js on Parse.

11:01.480 --> 11:07.550
So do try that for yourself and create a longer message within your web application.
