WEBVTT

00:00.770 --> 00:01.600
Well come back.

00:01.620 --> 00:08.570
And one of the uses for geeks is to actually pull out email addresses out of a string value.

00:08.730 --> 00:14.490
So let's say for instance you've got a large string and you want to pull back all of the e-mail addresses

00:14.550 --> 00:16.910
located within that string.

00:16.920 --> 00:21.310
So let's set up some functionality here and let's set up an input.

00:21.450 --> 00:26.310
And so this is going to be where we're going to be expecting our e-mail address and I'm not going to

00:26.310 --> 00:32.010
use H too much fifes email because we know that if we do put a value in there it's not going to allow

00:32.010 --> 00:33.330
me to submit the form.

00:33.330 --> 00:39.420
If that value is not an actual email address so I'm going to keep it as text although I'm not submitting

00:39.420 --> 00:41.840
it I'm just validating it over here.

00:41.880 --> 00:43.650
We don't want to run into any of that.

00:43.650 --> 00:51.360
Tim L5 defaults so let's go ahead and create an ID for this one so that we can grab that dynamically.

00:51.360 --> 00:53.310
And I'm just going to call it e-mail.

00:53.580 --> 01:00.150
And let's also give it a default values so that it always have to keep typing in an e-mail address so

01:00.150 --> 01:06.870
we know that an email will start out with a string and there's a particular pattern for email addresses

01:06.870 --> 01:09.090
and this is why Reg X is ideal.

01:09.180 --> 01:13.080
So know that all email addresses have some characters.

01:13.080 --> 01:19.320
Then they have the at symbol and then they have some more characters and then they have a dot for the

01:19.320 --> 01:19.960
domain.

01:19.980 --> 01:25.530
So basically the structure of every email address is going to be very similar.

01:25.650 --> 01:33.420
So what I want to do is I want to use my fun to validate that whatever content I've got within Here

01:33.660 --> 01:35.990
is an actual email address.

01:36.060 --> 01:42.540
So the next step is to pull back the value that's contained within email so we know that we can grab

01:42.540 --> 01:45.340
that document get element by ID.

01:45.360 --> 01:53.940
So let's go ahead and get that value now instead of we need to pick up the value there and let's grab

01:54.030 --> 01:54.810
email.

01:54.870 --> 01:58.370
So this way we know within the string.

01:58.560 --> 02:02.400
We're going to pick up the values contained within this input field.

02:02.430 --> 02:08.010
So the next thing that we need to do is get our regular expression in order to match that pattern.

02:08.100 --> 02:13.710
And unlike when we were looking for javascript we don't actually know what characters are going to be

02:13.710 --> 02:14.380
here.

02:14.400 --> 02:18.240
We don't know what characters are going to be here and we don't know what characters are going to be

02:18.240 --> 02:19.060
here either.

02:19.170 --> 02:27.720
So there isn't much we know but we do know that there's characters at characters dot characters so we

02:27.720 --> 02:29.190
know there's a pattern there.

02:29.280 --> 02:35.530
And this is where you can use Regg X are in order to help identify that pattern for emails.

02:35.700 --> 02:42.510
So there's a number of different ones online that people use and we see here so this is our general

02:42.510 --> 02:43.440
format.

02:43.440 --> 02:48.750
So basically we can see that if that content.

02:48.750 --> 02:58.530
So the first part of the content is has any letters A to Z lowercase uppercase A to Z zero to nine because

02:58.530 --> 03:02.310
we know email addresses can have zero can have digits in there.

03:02.460 --> 03:07.800
Also if they put a dot in there so sometimes people have their first dot last name.

03:07.830 --> 03:09.260
So we've got to account for that.

03:09.330 --> 03:16.080
Also sometimes people do their first name underscore last name and also sometimes people use a dash.

03:16.080 --> 03:22.150
So basically this accounts for all the different types of characters and we're accepting any type of

03:22.310 --> 03:26.280
anyone's of these characters for a valid email format.

03:26.280 --> 03:34.440
And we know that if we had different type of format so if we had a character here that was typically

03:34.440 --> 03:40.110
part of an email then we know that the email string only matches this part there.

03:40.140 --> 03:44.230
So it's not going to take those dollar signs because they're not going to be part of an email address.

03:44.430 --> 03:51.360
So either this whole thing is not a valid email address or the e-mail address is starting out just the

03:51.370 --> 03:52.010
whole.

03:52.080 --> 03:55.310
So keeping in mind that we're just matching a pattern.

03:55.320 --> 04:02.160
So we're trying to be as accurate as possible and that's why I say there's quite a few different ones

04:02.160 --> 04:07.560
out there for matching e-mail addresses and some of them actually are fairly lengthy.

04:07.560 --> 04:15.240
So I took the most simplest one and it probably matches ninety nine point nine nine nine percent of

04:15.240 --> 04:16.800
all the e-mail addresses.

04:16.890 --> 04:19.360
There might be some variations as well.

04:19.590 --> 04:22.340
So the next thing that we know that we do a plus.

04:22.370 --> 04:23.740
So we concatenate it.

04:23.820 --> 04:26.940
And so this is the Tolkin that we're looking for.

04:26.940 --> 04:31.180
So it matches the character at which we know e-mail addresses do.

04:31.230 --> 04:34.300
And then next we're doing the same thing that we did over here.

04:34.320 --> 04:39.930
So the same set of characters are valid for that e-mail address and then the next thing that we know

04:39.990 --> 04:42.090
that we need to encounter a dot.

04:42.210 --> 04:49.410
So we need to escape that period because this is Reg x characters so we need to escape that dot and

04:49.410 --> 04:51.230
that's why we've got the backwards slash.

04:51.300 --> 04:56.130
So we saw that earlier as well when we were creating strings and we were using quotes and we had to

04:56.130 --> 05:00.290
code within the strings we needed to escape the character using the backslash.

05:00.300 --> 05:02.390
So the same thing is being done here.

05:02.400 --> 05:06.380
The next thing that we need to look for is the dot and then the domain name.

05:06.510 --> 05:12.420
And we know that sometimes the domain names can have a couple of characters dot another two characters.

05:12.450 --> 05:15.900
So there's a number of different options for the domain names.

05:15.960 --> 05:18.620
So we wanted to be able to account for all of them.

05:18.780 --> 05:24.990
So if they have a dot and oftentimes they're not going to have an underscore or a slash so we could

05:24.990 --> 05:27.840
theoretically we could remove these two.

05:27.840 --> 05:29.460
We don't have to search for those.

05:29.640 --> 05:33.270
And we're still okay we're picking up Seow dot uk.

05:33.270 --> 05:34.570
So that's still fine.

05:34.680 --> 05:37.370
And a lot of times they don't have the numbers either.

05:37.470 --> 05:39.550
So we could remove those as well.

05:39.630 --> 05:45.840
So again this stuff is just optional and it's however you want to find the pattern in whatever you want

05:45.840 --> 05:47.340
to match the pattern to.

05:47.370 --> 05:55.830
So basically after all of this we've created a really useful pattern here that we can then take and

05:55.890 --> 05:58.560
we can bring in to our Javascript.

05:58.560 --> 06:03.640
And let's set up our variable pattern so that's slosh slosh.

06:03.780 --> 06:10.110
And I'm also going to include the IGY so that we get all of the e-mail addresses and the case actually

06:10.110 --> 06:14.370
doesn't really matter because it's not matching to any other case.

06:14.400 --> 06:18.290
So now we know that we've got a pattern for the e-mail address.

06:18.300 --> 06:24.390
We know we've picked up the value from the input field and now we're ready to do our regular expression

06:24.450 --> 06:26.850
and see if there is a match.

06:26.850 --> 06:33.600
So let's do the next one and we'll use our again and this time we're going to match the value that's

06:33.600 --> 06:40.420
contained within the so this is in place of the string that we used last time we're taking the value

06:40.420 --> 06:43.520
that we're getting from the e-mail input field.

06:43.600 --> 06:47.880
And this is the one that we're actually utilizing and we're matching.

06:47.920 --> 06:51.950
And then next we need to match the pattern.

06:52.210 --> 06:58.250
And then lastly let's just console log out the results and see what happens.

06:58.390 --> 07:05.080
So we want to make sure that there is something in here and if there is then we know that this is a

07:05.080 --> 07:06.710
valid email address.

07:06.850 --> 07:15.070
So let's open up our editor and refresh that page and we've got a valid email address so we know when

07:15.070 --> 07:15.690
we click it.

07:15.700 --> 07:17.460
We do have a valid e-mail address.

07:17.590 --> 07:20.220
So what happens if I remove the symbol we get.

07:20.230 --> 07:23.270
No because this is no longer valid.

07:23.380 --> 07:30.060
So we can simply return back so we can return back to our.

07:30.460 --> 07:35.980
So we could do something like this or we could return back that are or we could set up a terrine ary

07:35.980 --> 07:39.790
operator which will basically return back true or false.

07:39.790 --> 07:46.810
So let's actually do that and we'll set that up as T and actually do need to get rid of that.

07:46.810 --> 07:49.700
So let's set that up as t.

07:49.710 --> 07:55.400
So remember what the Teron area operator did is that we could apply a condition.

07:55.480 --> 08:00.210
So let's check to see if our is equal to.

08:00.420 --> 08:01.350
No.

08:01.630 --> 08:07.230
And if it is then we know that we've got a false.

08:07.330 --> 08:12.090
So this should be returning back false and otherwise we're returning back.

08:12.090 --> 08:12.680
True.

08:13.120 --> 08:15.590
And now let's return back t.

08:15.820 --> 08:19.000
And also within the console let's put to you.

08:19.150 --> 08:22.350
So let's try that one more time and validate email

08:25.780 --> 08:28.630
and we see that it's actually not working.

08:28.690 --> 08:34.370
So why do you think it's not working so a little bit of trouble shooting that we can do here now.

08:34.370 --> 08:37.120
So let's go back to what we learned earlier.

08:37.150 --> 08:44.030
When we do the on click events and whenever we run this function if we're returning back false to it.

08:44.050 --> 08:51.250
So let's actually move this console up earlier before we do the return because we know that once we

08:51.250 --> 08:57.010
return we're not going to get any further of the code execution within Javascript.

08:57.010 --> 08:59.800
So we see that we get true being returned back.

08:59.920 --> 09:00.810
Let's update that.

09:00.820 --> 09:03.310
Now we're getting false being returned back.

09:03.520 --> 09:09.940
So what's happening here is that we're calling we're invoking the function here the on click and we're

09:09.940 --> 09:12.000
simply returning back true.

09:12.130 --> 09:14.920
And basically that's what we're doing here.

09:14.920 --> 09:20.310
So that was what we're doing it was just the order that we were presenting the console log.

09:20.440 --> 09:23.710
And we don't actually have anything happening if it's true.

09:23.720 --> 09:29.730
So that's different than if we actually ran the function and we did a check to see if it was true.

09:29.730 --> 09:31.550
And then we actually did something with it.

09:31.570 --> 09:34.870
So there's a few options there that you can do as well.

09:34.870 --> 09:41.260
So what I want you to do now is create an input form that's actually going to validate to check to see

09:41.350 --> 09:44.870
first of all if there's any content in the inputs.

09:44.980 --> 09:50.290
And then secondly to check to see if you've got an e-mail input.

09:50.320 --> 09:58.480
And thirdly create a number input and remember don't use the types so use them all as text so that we

09:58.480 --> 10:08.990
don't get tripped up with each time L5 and create one input as a number create one as an e-mail.

10:09.070 --> 10:18.880
So I just write this down so number input email input and then a regular text input and all of them

10:19.330 --> 10:23.070
all need to have content.

10:23.230 --> 10:30.130
So we need to make sure that there are some values within there and then the number needs to be checked

10:30.130 --> 10:32.340
to see if it's actually a number.

10:32.340 --> 10:37.990
The email needs to be checked to see if it's actually an email address and then the text.

10:38.050 --> 10:42.700
Let's restrict this only to text so no numbers.

10:42.700 --> 10:49.080
So this one has to be only text input so only character inputs no digits at all.

10:49.090 --> 10:59.010
So let's only characters and all digits so that's the validation and we're going to use Reg acq Reg

10:59.010 --> 11:01.100
X in order to do this validation.

11:01.230 --> 11:04.340
So go ahead and create this and I'll show you the solution.

11:04.350 --> 11:04.920
Coming up.
