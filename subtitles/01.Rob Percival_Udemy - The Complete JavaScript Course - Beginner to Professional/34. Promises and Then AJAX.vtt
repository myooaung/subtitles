WEBVTT

00:00.980 --> 00:09.000
In this lesson we're going to look at brand new promises with ESX and promises are basically a result

00:09.000 --> 00:11.090
of an asynchronous operation.

00:11.220 --> 00:20.120
So at some point in the future a promise always gets handled and with promises we can greatly improve.

00:20.870 --> 00:27.080
And clean up various operations and callbacks that we typically would have been doing in Javascript.

00:27.290 --> 00:34.360
And there's quite a few uses for promises one of them is whenever we're doing an AJAX call if we're

00:34.360 --> 00:39.340
waiting on a file to load then maybe we want to set up a promise whenever the file loads and we want

00:39.340 --> 00:40.780
to do something with that.

00:40.780 --> 00:43.460
So that's the example that we're going to set up now.

00:43.520 --> 00:51.690
We're set up a basic function and this will be get get data that we're going to pass in.

00:51.730 --> 00:53.140
You are all in here.

00:53.350 --> 00:58.230
So this is our basic function that we're going to use in order to get data.

00:58.390 --> 01:07.720
So we need to get a file in order to call that out and let's go over to my son and I've set up one here.

01:07.720 --> 01:13.870
So this is the one that I'm going to make that AJAX call to go back into our page and that's actually

01:13.870 --> 01:15.350
going to be the you are l.

01:15.390 --> 01:24.130
So it's to get data and we need to pass it over our arguments of this.

01:24.270 --> 01:27.900
So we're going to get data and then the URL that we want to pick up.

01:28.020 --> 01:34.680
And right now we haven't include any promises so let's add those in and we're going to use then method

01:34.740 --> 01:38.750
and what then does is basically it returns a promise.

01:38.850 --> 01:45.150
So whenever a promise is ready this is where it's going to pick up and it's going to access and continue

01:45.510 --> 01:47.330
the code from this point.

01:47.340 --> 01:50.370
So within then let's have a function.

01:50.880 --> 01:58.910
So set up a function and whatever we're getting back from our call we'll call it response like we went

01:58.910 --> 02:00.220
on to a new line there.

02:00.220 --> 02:10.420
So Ruth spots sort of will return back the data within the response object and let me let me clean this

02:10.420 --> 02:11.130
up a little bit.

02:11.140 --> 02:13.310
So it's a little bit easier to read there.

02:13.570 --> 02:20.200
So we've got function and the parameter that we're looking for is response and then simply we're going

02:20.200 --> 02:24.660
to console log out whatever we're getting back within our response.

02:26.240 --> 02:33.060
So whatever we're returning back from our data get data call we want to see within the response.

02:33.200 --> 02:37.300
And this is going to get initiated from promise.

02:37.310 --> 02:42.350
So let's set up our promise and our promise is actually going to live within the function that we're

02:42.350 --> 02:43.160
calling.

02:43.160 --> 02:50.360
So basically they get data and what we're going to return back from this function is a new promise.

02:50.390 --> 02:52.250
So we're setting up that promise.

02:52.250 --> 02:57.110
And then within the promise we're going to have an anonymous function and within here we're actually

02:57.110 --> 03:00.800
going to return back that response information.

03:00.800 --> 03:05.810
So basically the way this is going to work this is going to kind of work similar to a callback where

03:05.870 --> 03:15.350
whenever a promise is ready and it's fulfilled then we can output that information of the response into

03:15.350 --> 03:16.450
the console.

03:16.850 --> 03:20.780
And I'm not sure what happened there but let's and console.

03:21.650 --> 03:24.350
So when a console log a response at that point

03:27.920 --> 03:37.870
so it's build out our AJAX call so going back quite a few lessons that we had on X and X AML HTP request

03:38.170 --> 03:46.030
and the way that we create those is new SML HTP request object.

03:46.190 --> 03:52.850
So that basically gives us the ability to send requests and we saw it earlier that this object has a

03:52.850 --> 03:56.250
lot of different methods that are contained within there.

03:56.540 --> 04:04.760
So one of them is the exit of char we can do and open and we need to specify what we're what we're opening

04:04.820 --> 04:07.460
and the method that we're going to use to open.

04:07.460 --> 04:13.400
So usually I like to keep this upper case we're going to do get and we want to open up the you are.

04:13.430 --> 04:19.290
So that's what we want to open up and then down here is where I want to send it.

04:19.340 --> 04:23.030
So send initiate the opening of that.

04:23.060 --> 04:25.920
You are all within the AJAX call.

04:25.920 --> 04:29.440
And then within here we're going to listen for on load.

04:29.450 --> 04:35.090
So there was a number of different options before but on board is the one that we want to listen to

04:35.180 --> 04:36.290
within this case.

04:36.290 --> 04:42.020
So whenever that file loads that we know that we want to pick it up and we want to do something with

04:42.020 --> 04:48.680
that and on load we've got an anonymous function on the other end assigned to it.

04:48.680 --> 04:59.520
And if we're going to do a quick check to see if the actual request is status is equal to 200 and we

04:59.520 --> 05:06.270
saw that earlier that 200 basically means that you've made a connection and that you've got your response

05:06.270 --> 05:07.190
back.

05:07.200 --> 05:11.260
So here we're going to actually output within response.

05:11.550 --> 05:19.530
So going back all the way into our function that we've set up earlier here that we're responding back

05:19.530 --> 05:21.170
to that function.

05:21.180 --> 05:28.740
So response over here is the value that we're looking for and this is where we're assigning value into

05:28.740 --> 05:30.270
that response function.

05:32.640 --> 05:37.780
And what we want to send back is that S.H. our response.

05:37.950 --> 05:44.010
So I know I've used response quite a few times and I'm going to try to clean that up but for now let's

05:44.010 --> 05:46.600
just try this out and see if it actually works.

05:48.160 --> 05:54.910
So let's save it and go out to the console and load it and we see that in fact we were able to pull

05:54.910 --> 05:58.700
back the information contained within this Jason File.

05:58.810 --> 06:04.390
And now of course within our javascript we could actually make use of it within this get data a call

06:04.630 --> 06:06.720
so we can actually really set this up.

06:06.880 --> 06:14.140
And with promises this works really nice and neatly because the promises are give us the ability if

06:14.140 --> 06:18.790
we're loading the file to give us a little bit more time to load that content in.

06:18.790 --> 06:23.800
And then we've got it within a string format and we could parse it back into the sun and then we could

06:23.800 --> 06:28.420
make use of it within this value here within the get data.

06:28.420 --> 06:36.840
So what I want you to do now is try the search for yourself and build out this getting data from a u

06:36.850 --> 06:37.540
r l.

06:37.570 --> 06:44.810
So build this AJAX call using promises within your within your

06:47.510 --> 06:51.760
code and that's going to make it look work a whole lot more efficiently.

06:53.990 --> 07:01.210
And you can also call out to that same you are l because remember if you are working locally then you're

07:01.210 --> 07:06.800
not able to link to any of the files you have to actually have a file that starts with HTP protocol.

07:06.820 --> 07:09.780
So make sure that you're not linking to any internal files.

07:09.850 --> 07:12.540
Otherwise you're not going to be able to make that Ajax connection.
