WEBVTT

00:01.060 --> 00:08.110
Welcome back in this lesson we're going to dive deeper into variables and also data types and look at

00:08.110 --> 00:09.040
booleans.

00:09.040 --> 00:14.650
So I did mention that one of the data types were booleans and it didn't really make a lot of sense because

00:14.650 --> 00:16.640
those are all true or false.

00:16.690 --> 00:22.900
So it doesn't really make a lot of sense to type in false or Taipan true unless we actually start looking

00:22.900 --> 00:24.280
at variables.

00:24.280 --> 00:27.830
So that's why we introduced variables in the last lesson.

00:27.850 --> 00:30.660
So let's create some basic variables.

00:30.760 --> 00:39.870
So look one that we're going to call my string and we're going to give this one a value of Hello World.

00:39.890 --> 00:45.580
This is just a typical character set for a string.

00:45.580 --> 00:52.610
Next one will have my number and this one will hold a value of 100.

00:52.730 --> 00:54.560
So that's a nice round number.

00:54.670 --> 00:58.120
And next we'll have my boolean.

00:58.250 --> 01:01.330
So this one can either be true or false.

01:01.330 --> 01:04.020
So for now let's just set it as true.

01:04.180 --> 01:09.430
And these will become more apparent the usefulness of them as we progress.

01:09.580 --> 01:17.240
And as we look deeper into conditions and looking at different comparison operators.

01:17.470 --> 01:23.770
So now we've got our strings we've got our numbers we've got booleans all set up and I'm going to go

01:23.770 --> 01:27.510
back to the page and you just refresh this.

01:27.520 --> 01:37.900
And now I can callback number I can call back my value or being called it my string and we can see that

01:37.930 --> 01:43.750
we can return back all of those values that we set with in the application.

01:43.750 --> 01:52.070
So this shows you the usefulness of writing your code down with in file because you can always recall

01:52.070 --> 01:58.970
that and you can set some values and you can interact with those values within the rest of your code.

01:59.170 --> 02:06.580
So establishing variables usually done at the start of you whenever your script is being initiated because

02:06.580 --> 02:11.800
the whole idea is that you want to set those parameters those initial starting points those initial

02:11.800 --> 02:19.970
starting values that you can work with in order to write out all of the different logic for your program.

02:22.750 --> 02:29.140
So we've looked at boolean and I did mention there are a few other primitive types that we haven't looked

02:29.140 --> 02:30.660
at as of yet.

02:30.850 --> 02:41.050
So let's let's just set a variable and we'll just call that my We'll call it my none.

02:41.230 --> 02:45.250
And I'm not actually not cannot establish a value to that.

02:45.280 --> 02:46.830
So let's refresh that.

02:46.870 --> 02:52.070
And when I try to recall it it's there but it returns back undefined.

02:52.180 --> 03:00.550
So undefined is actually another primitive data type and this one is just holds one value and that's

03:00.640 --> 03:01.600
undefined.

03:01.600 --> 03:08.950
So basically if you've set a variable but you haven't defined a value for the variable as of yet then

03:08.950 --> 03:14.570
it's going to come back undefined and undefined is actually different than no.

03:14.650 --> 03:23.520
So if I was to equal this to know which is the lower case there so if we equal it to No.

03:23.620 --> 03:30.710
And if my refreshed and let's see the value of my 9 is we can see that we're returning back no.

03:30.810 --> 03:34.950
So no it is a special type.

03:35.020 --> 03:39.110
And these ones as well hold these ones as well.

03:39.110 --> 03:41.980
Are are both primitive data types.

03:42.040 --> 03:52.300
So no only holds that one value and basically it doesn't point to any valid value it's a snowball.

03:52.300 --> 03:58.390
So if you want to set something to be novel but you don't want that to come up undefined there is a

03:58.390 --> 04:03.770
difference between those and if you just don't want it to hold any type of value.

04:04.000 --> 04:09.080
And lastly there is also a way using javascript built in method.

04:09.100 --> 04:12.810
And we're going to come across quite a few of these as we go through the course.

04:13.000 --> 04:20.010
And these are pre-built methods or functions and basically they execute a set of code behind the scenes.

04:20.170 --> 04:25.330
So much like what we saw with alert we were typing in the alert method.

04:25.330 --> 04:30.720
We've got another one where we can actually define and find out what data type it is.

04:30.910 --> 04:33.250
So we can use type of.

04:33.910 --> 04:39.350
And we can do them by none and we can see that my 9 is an object.

04:39.520 --> 04:42.130
Let's do them by string.

04:42.130 --> 04:53.560
We see that type of my string is a string type of number is a number and type of my Bouley is a boolean

04:53.620 --> 04:54.490
value.

04:54.910 --> 05:01.330
So there are the primitive ones and then everything else is an object and we are going to get more into

05:01.360 --> 05:04.810
objects as we progress the course as well.

05:04.810 --> 05:12.940
So this is useful method because in case you all of a sudden you switch the my number and you switch

05:13.150 --> 05:15.320
to a string value.

05:15.760 --> 05:17.890
So just stretch the string value.

05:17.890 --> 05:23.580
Now if I do type of my number we see that it's being returned back as a string.

05:23.590 --> 05:31.330
So this is going to be these types of builtin methods really become useful especially if you want to

05:31.330 --> 05:38.410
make sure that the variable that you're pulling in is a number you can do it check to see if the value

05:38.410 --> 05:43.660
of it is a number and if it isn't then you could do something to convert it into a number.

05:43.930 --> 05:47.240
Or if it is a number then you can go ahead and execute your code.

05:47.380 --> 05:53.020
So once you start applying a logic within your programming it becomes really important and really evident

05:53.260 --> 05:59.910
how you can use these different methods that are built into javascript to really power up your program.

06:01.260 --> 06:05.010
And apply application logic.

06:05.190 --> 06:10.590
And before we finish up I did want to mention one other thing with strings.

06:10.680 --> 06:14.580
So we saw that we've got strings and we need quotes around strings.

06:14.700 --> 06:22.370
So there is a rule that we need to follow if we want to pluralize if we want to have a quote worlds

06:22.560 --> 06:25.860
so this will work within the double quote environment.

06:25.860 --> 06:32.820
So if I go back and if I refresh and if I call back my stream we can see that we've got.

06:32.820 --> 06:34.010
Hello world.

06:34.150 --> 06:40.050
But what happens if we actually want to do a double code around worlds.

06:40.290 --> 06:41.810
So what do you think we can do there.

06:41.820 --> 06:47.730
Because at this point we're going to have to double quotes or we're actually breaking out of our string

06:48.270 --> 06:51.090
value and we're not.

06:51.210 --> 06:56.250
We can see that the editor of bracket's is picking this up and it's making it black.

06:56.280 --> 07:00.810
So basically we can see it right away that there's some type of error there that there's something not

07:00.810 --> 07:01.540
right.

07:01.620 --> 07:05.540
And the way to fix this is to use backslash.

07:05.660 --> 07:10.020
So backslash gives us a way to use escape characters.

07:10.020 --> 07:16.920
So now if I go back in and if I refresh it and if I get the value of my string we can see that we get

07:16.920 --> 07:19.760
the return value and we've got the double quotes in there.

07:19.920 --> 07:22.670
So this is the same thing for single quotes.

07:22.680 --> 07:31.150
So if I for instance had a bunch of single quotes around here and bracket's is trying to auto complete

07:31.170 --> 07:33.140
those single quotes for me.

07:33.180 --> 07:36.340
So it's got to be really careful that I'm just adding the one in there.

07:36.450 --> 07:43.820
So this time I need to escape the single quote and let's refresh and we'll try this one out again and

07:43.820 --> 07:50.070
we see that that worked fine as well and it actually ignored the backslashes for the double quotes.

07:50.130 --> 07:52.890
So it kept them in double double quotes.

07:52.890 --> 07:58.830
So you got to make sure that if you are using any type of these special characters such as the quotes

07:59.220 --> 08:05.580
that you're always that you always do the backslash in order to escape that there is another challenge

08:05.580 --> 08:06.030
as well.

08:06.030 --> 08:14.150
So what happens if you actually want to include the double slops within your within your string values

08:14.170 --> 08:16.350
so what if we had four.

08:16.380 --> 08:17.800
And we want to

08:21.390 --> 08:28.200
have something like like this that's not a fraction but let's say for instance you had this backslash

08:28.200 --> 08:28.770
there.

08:28.830 --> 08:30.240
So what do you think is going to happen.

08:30.270 --> 08:37.470
Now if I want to actually include the backslash we see that it actually breaks out of the the string

08:37.470 --> 08:39.860
value and it doesn't show us 6.

08:40.110 --> 08:41.920
So it just continues.

08:42.120 --> 08:49.140
So basically what happens when you include the backslash is that we get this this type of character

08:49.140 --> 08:49.760
here.

08:49.860 --> 08:57.180
And it's if we want to include the backslash itself we could just double backslash and refresh it.

08:57.220 --> 09:02.210
And now if we get the string value we see that we get the backslash being put there.

09:02.250 --> 09:07.060
So that's how box options work and that's how you're able to escape.

09:07.720 --> 09:13.080
Escape your special characters within your string values.

09:13.260 --> 09:14.940
So take that.

09:15.090 --> 09:22.590
Try it for yourself and try out this rule as well create some strings with some special characters like

09:22.590 --> 09:25.380
quotes double quotes and single quotes.

09:25.380 --> 09:31.950
Try it for yourself or even try to do adding in a backslash within your string value and try it for

09:31.950 --> 09:39.450
yourself and get familiar with creating strings numbers booleans and some of the rules related to strings.

09:40.250 --> 09:46.070
So the next lesson we're going to be jumping into props so props are going to provide us an interesting

09:46.070 --> 09:53.090
way to actually take some input from the user and utilize it hold it within a variable value and then

09:53.090 --> 09:54.860
make use of it within our code.

09:54.980 --> 09:56.680
So that's coming up in the next lesson.
