WEBVTT

00:00.510 --> 00:07.170
We'll come back and in this lesson we're going to be exploring how to create another really useful function

00:07.380 --> 00:10.140
that you can remove reuse over and over again.

00:10.140 --> 00:16.070
So what this one is going to do is it's actually going to remove duplicates from an array so any array.

00:16.080 --> 00:18.750
So first of all let's set up an array.

00:18.840 --> 00:21.480
So we're going to call it my array.

00:21.960 --> 00:25.850
And let's give it some values here within the array.

00:25.890 --> 00:30.060
So do some string values and we'll also.

00:30.330 --> 00:38.970
So we'll do some more string values then I'll add some numeric values as well and another string.

00:40.020 --> 00:42.000
So now we need to have some duplicates.

00:42.150 --> 00:49.860
So the concept here is that we want to loop through all of the items within this array and simply get

00:49.860 --> 00:52.170
rid of any duplicates that we might have.

00:52.350 --> 00:57.570
So we've got some repetition that we're going to have here and I want to have this a really long array

00:57.570 --> 00:59.320
with a lot of values in it.

00:59.460 --> 01:05.370
So I can also add in these as another set of duplicates so you can have a lot of items here within this

01:05.370 --> 01:05.960
array.

01:06.120 --> 01:09.960
And what we want to do is we want to get rid of the duplicate.

01:09.960 --> 01:17.600
So we want to create a function that can actually do that and then output the new cleaned up array with

01:17.600 --> 01:18.560
an output.

01:18.840 --> 01:20.930
So let's let's take care of that.

01:20.970 --> 01:24.940
And let's set up a function in order to do that.

01:24.960 --> 01:29.480
So the function can be called remove doop.

01:29.700 --> 01:31.530
So this one will remove duplicates.

01:31.560 --> 01:34.870
And what we need to do is we need to pass in an array.

01:35.010 --> 01:41.640
So this can work dynamically using any array and looping through all of the values in the array that

01:41.640 --> 01:49.380
gets passed in to remove the duplicates essentially removing the duplicates from the array and next

01:49.380 --> 01:52.960
thing that I want to do is I want to have another array.

01:52.950 --> 01:56.400
So this is going to be my array clean.

01:56.460 --> 02:02.640
So this is going to be the clean one and this is where I'm going to pass that array into the remove

02:02.640 --> 02:09.500
duplicate some passing in my array into here and we're going to return back within this function.

02:09.540 --> 02:14.140
We're going to return back the cleaned up version of that array.

02:14.160 --> 02:24.000
So next let's set up our connections to our h to model so we can output it into the ID with that element

02:24.000 --> 02:26.100
with the ID of output.

02:26.100 --> 02:34.730
So document's get element by id and grab that into the output object.

02:35.220 --> 02:42.750
So now we can actually run through this and we can update output and update the enraged him well with

02:42.750 --> 02:49.470
whatever we're getting returned back from the clean array as well as the array.

02:49.470 --> 02:54.250
So let's first put the array and we'll concatenate together

02:56.880 --> 03:02.010
adding in a line break there so that it's more readable and then other value there.

03:02.010 --> 03:03.320
So that might clean me.

03:03.720 --> 03:08.970
And basically what this is going to return back is it's going to return back to a are.

03:08.970 --> 03:11.330
So let's let's try this out first.

03:11.520 --> 03:13.800
And we see that we've got both of those arrays.

03:13.800 --> 03:14.900
They both get output.

03:14.910 --> 03:16.360
They're both the same.

03:16.380 --> 03:23.010
So what we want to do is we want to clean these up and we want to have the ability to loop through the

03:23.010 --> 03:27.000
array values and essentially remove the duplicates.

03:27.000 --> 03:30.630
So what do we need here within this function in order to accomplish this.

03:30.720 --> 03:38.520
And these types of functions are really just super useful because you can use them within any script

03:38.580 --> 03:43.940
just passing in any function any array and then cleaning it up or moving out the duplicate.

03:44.130 --> 03:47.670
So the first thing that we do need to do is we need to set up

03:52.730 --> 03:59.710
an array that we can use as a result or this can just be c array.

03:59.720 --> 04:06.740
So this is going to be our cleaned up array that we can put the new entries into and then ultimately

04:06.800 --> 04:12.550
what we're going to be doing is we're going to be returning back this cleaned up array instead of the

04:12.600 --> 04:14.210
a are.

04:14.210 --> 04:21.590
So we'll set that up first and declare it so that we can make use of it within our code.

04:21.590 --> 04:27.280
So setting up that first array and the other thing that we do need to set up is we need an object.

04:27.590 --> 04:29.870
And the reason that we need to have.

04:30.230 --> 04:34.370
So this is going to be our cleaner object or holding object.

04:34.370 --> 04:41.690
So basically what we're going to do is we're going to put the values of the array as the keys of the

04:41.690 --> 04:48.440
object and we know that when we try to add in keys that already exist then we don't add in any more

04:48.440 --> 04:49.330
duplicates.

04:49.340 --> 04:55.070
So this is going to be a quick and easy way to clean up the contents of the array just to make sure

04:55.070 --> 05:00.440
that we don't have any duplicates and return it back so we're going to eventually we're putting it into

05:00.440 --> 05:06.830
an object and then we're going to loop through it and return back all of the values from the object

05:06.890 --> 05:09.860
and then push them back into our brand new array.

05:10.070 --> 05:11.210
So let's set that up.

05:11.210 --> 05:20.660
So first thing that we need to do is set up a loop and starting with variable x starting at zero.

05:20.840 --> 05:28.310
We want to loop through the entire length of the brand new array that we're using or there that's been

05:28.310 --> 05:38.470
passed in and then increment X and then this is where we're going to place it with in the C object

05:41.410 --> 05:48.510
and we're passing it in as the key so we know it doesn't really matter what the value is.

05:48.520 --> 05:53.110
So this can actually be whatever it doesn't actually matter what this value is because we're not actually

05:53.110 --> 05:55.290
going to be using this value.

05:55.300 --> 06:03.610
The important part is that we're setting up this object with whatever the contents of that particular

06:04.120 --> 06:05.270
item are.

06:05.680 --> 06:11.170
So let's say we can log that so you can take a closer look at actually what's going to be set and what's

06:11.170 --> 06:12.570
going to be set in here.

06:15.940 --> 06:21.580
So let's go back and refresh it and take a look in the console and we see that we as we loop through

06:21.730 --> 06:23.630
we hit all of the items in the array.

06:23.680 --> 06:28.090
And now we're setting those up within our object.

06:28.130 --> 06:34.550
So the next thing that we need to do and if I go out into the console or if I do see object

06:39.000 --> 06:43.970
I can't see it because it's actually sitting in the local scope of the function.

06:43.980 --> 06:45.270
So this is important to note.

06:45.270 --> 06:52.670
So from the previous lesson that we are only using these values within the function themselves we're

06:52.680 --> 06:53.730
not able to see it.

06:53.850 --> 06:58.950
And if we do want to see it we can always console log that out here within our console.

06:58.950 --> 07:06.460
So this is another great use for a console log because we can see that it's it's really useful for debugging.

07:06.720 --> 07:12.770
So let's go back refreshed and now we see that we can actually see the contents of that object.

07:12.780 --> 07:20.010
So all of the values are whatever but we see that the keys here are all the different unique values

07:20.070 --> 07:21.620
of the items in the array.

07:21.840 --> 07:31.050
So now all that's left is to loop through the object and output them and push them back into the C array.

07:31.050 --> 07:36.300
So what I want you to do now is pause the video and create this loop.

07:36.510 --> 07:42.690
So remember earlier in the earlier lessons when we're looking at objects we saw how we can loop through

07:42.750 --> 07:47.520
all of the items within the object and we can pull out their key values.

07:47.520 --> 07:54.720
So this is what I want you to do within this line of code and then ultimately push it back into this

07:54.780 --> 07:56.270
new array that we're building.

07:56.400 --> 08:04.440
So as we loop through all of these keys like 22 45 all the way down javascript hello and world.

08:04.440 --> 08:09.870
So they're actually going to get deposited and it's going to be this value that you're going to be building

08:09.870 --> 08:12.770
out and pushing into your brand new array.

08:12.780 --> 08:13.520
So go ahead.

08:13.520 --> 08:16.250
Pause a video try it and I'll show you the solution.

08:16.260 --> 08:21.040
Coming up so little you get an opportunity to try this.

08:21.230 --> 08:27.440
And this is going to be a great exercise with working with arrays and objects and in javascript.

08:27.450 --> 08:29.960
It's very common that you're working with both.

08:30.110 --> 08:35.780
And this is a great way to handle data and especially it's great to be comfortable with it especially

08:35.780 --> 08:37.810
when you're handling large amounts of data.

08:37.910 --> 08:43.910
So getting used to creating these loops and pulling out information from arrays and objects is really

08:43.910 --> 08:47.630
important to learning how to program with Javascript.

08:47.660 --> 08:54.410
So let's set up our loop here and I'm going to just declare another variable here.

08:54.410 --> 09:01.020
So he's going to call it Z and I'm going to leave this one just blank for now.

09:01.790 --> 09:05.900
And this is the one that I'm actually going to use so I'm going to use

09:08.420 --> 09:16.350
Z and I'm going to do an.

09:16.400 --> 09:19.520
So we're looking through the C object.

09:19.710 --> 09:24.230
So we're looping through so that this value what you could call it whatever you want you could call

09:24.230 --> 09:25.920
it key as well.

09:25.940 --> 09:31.240
So this this isn't really relevant within the code actually working or not.

09:31.370 --> 09:36.350
And you can also console log that I want to take a closer look at what we're actually picking up in

09:36.350 --> 09:37.390
this value.

09:37.820 --> 09:44.300
So what I'll do is comment this one out and we'll refresh it and then we'll take a closer look at what

09:44.300 --> 09:46.370
we've actually got here that we're outputting.

09:46.370 --> 09:51.770
So this is exactly what we want to output so we see that these are the unique values that are contained

09:51.770 --> 09:52.990
within the array.

09:53.000 --> 10:00.050
So the last thing the last part of this was simply to build this brand new array with those values that

10:00.050 --> 10:03.920
were returning back within this within this variable.

10:03.920 --> 10:10.440
So let's add in the push method and add those in.

10:10.550 --> 10:18.180
And so basically as we loop through we're going to be building out our brand new version of the array.

10:18.290 --> 10:25.340
And when we refresh it then we see that we do have only unique values left within the array.

10:25.610 --> 10:29.610
So we've cleaned it up and we've built a brand new array.

10:29.810 --> 10:32.360
And this can this is very flexible.

10:32.450 --> 10:38.490
It can work with a whole bunch of values or we can remove out a bunch of values so we only have a few.

10:38.600 --> 10:45.920
And you can see that as we loop through it the second line of code here is the one that's cleaned up

10:46.160 --> 10:50.010
and all of the duplicates have been removed.

10:50.010 --> 10:57.540
So what I want you to do now is open up your editor and recreate this remove duplicate function and

10:57.540 --> 11:03.990
create yourself an array have some duplicate values in that array and try passing that array into the

11:03.990 --> 11:07.810
remove duplicate array and see your results.

11:07.830 --> 11:09.210
Just check out the function.

11:09.210 --> 11:14.290
Make sure that's working that's removing the duplicate results and try it for yourself.
