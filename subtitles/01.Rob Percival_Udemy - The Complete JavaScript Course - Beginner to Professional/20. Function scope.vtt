WEBVTT

00:00.450 --> 00:06.390
Welcome back in in this lesson we're going to look at function scope so function scope is how variables

00:06.390 --> 00:12.960
are treated so global variables and local variables and how they get treated with insight being inside

00:12.960 --> 00:15.100
of a function or outside of function.

00:15.180 --> 00:16.980
When we declare a variable.

00:17.050 --> 00:19.710
So let's go ahead and create a variable.

00:19.710 --> 00:26.380
So just call it outside fun and we're going to give it a value of outside.

00:26.490 --> 00:31.860
So this is a variable that we're creating and this is going to be a global variable basically meaning

00:31.890 --> 00:37.770
that we can access it within our functions and outside of our functions as long as we're not reading

00:37.770 --> 00:40.530
clearing it locally within our function.

00:40.860 --> 00:46.710
So next thing we're going to do set up a function and I'm going to create another variable and this

00:46.710 --> 00:58.450
time I'm going to create declare a variable called Inside fun and give it a value of inside.

00:58.480 --> 01:04.230
Now we've got a variable that's only accessible locally within the function.

01:04.240 --> 01:05.260
My fun.

01:05.260 --> 01:13.240
So basically that also means that I can't access that same variable inside of another function.

01:14.420 --> 01:17.420
So let's take a closer look and see how this works.

01:17.420 --> 01:25.430
So if I console log inside of the function I can access outside fun so I can access the variable outside

01:25.430 --> 01:25.840
fun.

01:25.880 --> 01:35.980
And also if I console log inside fun I'll get a value for that as well.

01:36.050 --> 01:43.370
And so let's call our function and let me show you what happens when I try to access the inside find

01:43.430 --> 01:48.830
outside of the function scope.

01:50.650 --> 01:52.490
So it's both of those up.

01:52.510 --> 01:57.890
Save it refresh it and let's open up our console.

01:58.090 --> 02:02.600
So we see that within the console we're we've got that first variable.

02:02.600 --> 02:07.900
That outside we see because these two are being output in the console from within the function.

02:07.930 --> 02:14.110
So we do have access to the inside variable but when we try to access that outside of a function we

02:14.110 --> 02:16.260
no longer have access to it.

02:17.110 --> 02:23.990
So this is one thing that I did want to show you within this lesson is that if you declare a variable

02:24.040 --> 02:27.840
but you don't use the V.A. are to declare the variable.

02:27.880 --> 02:31.250
Watch what happens to this inside one variable.

02:31.420 --> 02:38.140
So when we refresh it and let's open that up within the console again and we see that we actually do

02:38.140 --> 02:39.470
have access to it.

02:39.610 --> 02:45.800
And remember this console log statement is actually sitting outside of the function.

02:45.800 --> 02:51.380
So what happened here where we've got the actual coding that's actually sitting inside of the function

02:51.620 --> 02:57.910
we're declaring it and yet we're still able to access it outside of the function.

02:57.920 --> 03:06.200
So this was one of those quirks in regards to javascript where it tries to fix an error and it sees

03:06.200 --> 03:13.670
that you're trying to call a variable called Inside fun and it doesn't actually see that within the

03:13.670 --> 03:14.630
global scope.

03:14.720 --> 03:20.900
But it does see that because it's the function has been initiated been run and it knows that there has

03:20.900 --> 03:26.460
been a variable that's been been declared within the function.

03:26.470 --> 03:28.170
It's called Inside fun.

03:28.240 --> 03:33.470
And the other thing too that following the rules of javascript.

03:33.550 --> 03:39.910
It also knows that when you're trying to access a variable that you would typically expect it that it's

03:39.910 --> 03:43.150
already declared outside unless you're declaring it here.

03:43.150 --> 03:49.690
So this is why by default it will go out to the global scope and it will be accessible outside of the

03:49.690 --> 03:50.550
function.

03:50.590 --> 03:56.410
And I'm just showing you this because this is a common error and a common mistake that's made when you're

03:56.410 --> 04:04.120
writing javascript that if you're setting up variables and you set them up and you don't declare them

04:04.120 --> 04:10.480
properly then they actually become global variables and you can have issues and errors in regards to

04:10.480 --> 04:19.050
this and in general if we're not using any variables across multiple functions then we try not to actually

04:19.050 --> 04:23.040
declare them globally unless it's actually absolutely necessary.

04:24.370 --> 04:31.150
And this would be a really bad way to set up global variables because it is reliant on the function

04:31.220 --> 04:32.200
aren't running.

04:32.200 --> 04:38.620
So if I do come into the function I go back refresh the page and I take a look in the console we see

04:38.620 --> 04:39.330
that inside.

04:39.340 --> 04:46.180
Fun is not defined so it knows that that variable has not yet been defined but yet I'm trying to access

04:46.180 --> 04:46.610
it.

04:46.720 --> 04:51.400
So it is dependent on running the function in order to have access to that variable.

04:51.520 --> 04:59.790
And this is something that you want to avoid just for that reason alone because having to set it up

04:59.790 --> 05:02.500
within a function just does not work well.

05:03.000 --> 05:11.620
So what I want you to do now is set up variables so have one variable on the outside and set up another

05:11.620 --> 05:18.010
variable that you're actually declaring on the inside part of the function and then output them both

05:18.010 --> 05:23.380
within the function and to try to free yourself just to get really familiar with how a function scope

05:23.380 --> 05:30.130
works and get yourself familiar with setting up global variables as well as local variables within functions

05:30.400 --> 05:35.500
because it's going to be a very important part of using javascript and I'm going to get rid of the statement

05:35.500 --> 05:41.380
here because this is incorrect as we wouldn't be calling a function that would have been locally defined

05:41.470 --> 05:42.330
within fun.

05:42.550 --> 05:49.550
So go ahead try it yourself and just get used to working with local and global variables.
