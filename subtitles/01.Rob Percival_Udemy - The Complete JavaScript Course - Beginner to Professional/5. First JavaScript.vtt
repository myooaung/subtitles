WEBVTT

00:00.930 --> 00:05.290
Welcome back in this lesson we're going to be writing some more a javascript code.

00:05.340 --> 00:11.580
So what I'm going to do is I'm going to use that script G-S file that I opened up earlier and I'm actually

00:11.580 --> 00:14.510
going to close off indexing going to work off of that script.

00:14.550 --> 00:22.380
Jay X-File So we know that from our previous lesson that we linked our file we've got them on the same

00:22.380 --> 00:29.580
directory so make sure as well when you're linking to the G-S file that depending on where the file

00:29.580 --> 00:32.140
is located that you've got the proper path.

00:32.310 --> 00:38.640
So it might not always be the case that you're doing the javascript the same level as you're doing your

00:38.640 --> 00:39.650
index page.

00:39.750 --> 00:45.900
So make sure that if you've got scripts folder or if you've got some other folders on your site that

00:45.900 --> 00:51.930
your property linking to it as well as if you're linking to an external library then make sure that

00:51.960 --> 00:57.870
you're also creating that correct path or you've got the absolute path to get to that file so you're

00:57.870 --> 00:59.520
not throwing any errors.

00:59.520 --> 01:05.160
So this is always a good idea to create some type of simple javascript that's visible.

01:05.220 --> 01:12.370
So you know that you're actually connected to the Javascript.

01:12.400 --> 01:18.880
So now I've opened up that script g s file and I'm ready to start typing some Javascript.

01:19.000 --> 01:22.300
And we know that the file is somewhere down here at the bottom.

01:22.300 --> 01:29.770
And earlier we saw how we can type alert and we can whenever we load the page we see that this javascript

01:29.770 --> 01:36.990
fires off and we get this alert message happening and showing up within the page and basically says

01:37.000 --> 01:39.320
this page says hello again.

01:39.490 --> 01:46.580
So I'm going to show you some more tips about writing javascript as well as how javascript works.

01:46.720 --> 01:49.720
So another thing that we can do with javascript.

01:49.720 --> 01:53.120
We can also write information to the web page.

01:53.200 --> 02:01.750
And this is a really big part of javascript because this gives us the ability to actually interact with

02:01.840 --> 02:03.860
our Web page content.

02:04.270 --> 02:11.950
And now when I refreshed the page we get that halo message but we also have hello world written down

02:11.950 --> 02:12.860
here at the bottom.

02:13.000 --> 02:20.890
So notice that wherever that script tag is that's linked to this script yes file is located that's where

02:20.950 --> 02:24.540
within our H.T. mail our content gets written out.

02:24.550 --> 02:31.710
So basically it's not a great way to write out content onto your web page by doing document right.

02:31.720 --> 02:37.870
I just want to show you that this is one of the ways that we can typically create some type of dynamic

02:37.930 --> 02:43.480
content being generated within our Web page and it could be as simple as this that we're just adding

02:43.510 --> 02:46.770
some content that's not actually existing within the source code.

02:46.900 --> 02:51.480
And after the page loads runs the javascript then that content gets added.

02:51.520 --> 02:56.830
So the other thing that you might have noticed if you're looking really closely you could see that I've

02:56.830 --> 02:58.270
got double quotes here.

02:58.300 --> 03:05.590
I've got single quotes down here and really at the end of the day it doesn't matter which quotes you're

03:05.590 --> 03:06.250
using.

03:06.280 --> 03:13.800
You can use single you can use double and not actually just add double double quote with a single.

03:13.830 --> 03:15.360
So it's hard to remove that.

03:15.550 --> 03:17.790
But this will work the same way.

03:17.890 --> 03:20.890
And when we render up the page we see the hello again.

03:21.040 --> 03:27.910
So either way if you're writing with single or double You're free to use either one as long as you're

03:28.300 --> 03:30.920
encapsulating those string characters.

03:31.030 --> 03:36.400
So if you didn't write those quotes then javascript actually would throw an error because it wouldn't

03:36.400 --> 03:38.560
actually know what to do with that.

03:38.560 --> 03:42.850
So we see that we're not actually getting that information being output there.

03:42.970 --> 03:45.100
And that's because we've got an error.

03:45.160 --> 03:50.410
So we're actually missing some information between the argument list and we are going to talk more about

03:50.410 --> 03:51.690
that in the upcoming lesson.

03:51.690 --> 03:55.030
We talk about console log and debugging.

03:55.030 --> 04:00.420
So we know that this isn't proper in Javascript does it like that once rendering.

04:00.480 --> 04:02.800
So it throws an error.

04:02.800 --> 04:07.180
So now I've updated that fix that we can go back to our page.

04:07.180 --> 04:09.550
And now again we'll see that our page loads.

04:09.670 --> 04:15.340
So this is another important thing to note that when I had an error in my javascript we noticed that

04:15.430 --> 04:21.370
it didn't actually render out the alert because the javascript threw an error and it stopped executing

04:21.370 --> 04:22.170
the code.

04:22.180 --> 04:29.170
So once you have an error where there is something that javascript just can't make can't make out what

04:29.170 --> 04:33.330
it needs to do with that command that is going to stop executing the code.

04:33.460 --> 04:39.100
So always keep that in mind that if you're going to your web page and something isn't happening that

04:39.100 --> 04:43.260
you've got in your javascript and you don't know why that's where you open up the console.

04:43.270 --> 04:48.560
And if he if you're throwing an error you're going to see that within the con..

04:48.580 --> 04:56.440
So another thing about javascript is that I can have a number of whitespace here and when I reload the

04:56.440 --> 04:58.930
page it doesn't actually make any difference.

04:59.050 --> 05:06.720
So javascript ignores the whitespace and it doesn't actually matter to the javascript if I've got my

05:06.720 --> 05:12.240
code like that although it's a lot harder to read when you're a web developer when you're coming in

05:12.450 --> 05:16.030
so it's not really advisable that you add all of this whitespace in.

05:16.140 --> 05:22.390
But for demonstration purposes it really doesn't matter to the browser where this spacing is air.

05:22.410 --> 05:26.310
If you're adding in tabs so you can add in tabs as well.

05:26.370 --> 05:31.730
You can move your content in and out and tabs are usually used for writing.

05:31.890 --> 05:32.520
Code.

05:32.520 --> 05:40.890
So typically we do it in a branching type structure where we have our main javascript statements and

05:40.890 --> 05:45.960
then if we've got a function or a loop and we've got some additional code running in those and I am

05:45.960 --> 05:48.590
going to talk about those in the upcoming lessons.

05:48.750 --> 05:54.210
But if you got any of those and you've got more code running in there than we intend just to make it

05:54.210 --> 05:55.060
more readable.

05:55.140 --> 06:03.460
So web developers typically will use the ability for javascript to create spacing to make it more readable.

06:03.540 --> 06:10.740
And there's also a concern for javascript when it's minute fight and when the javascript code is mid-fi

06:10.740 --> 06:16.800
basically what that means is that getting rid of all the excess whitespace and making the file size

06:16.800 --> 06:19.710
smaller and allowing it to load quicker.

06:21.280 --> 06:23.960
But when you're starting out you don't have to worry about that.

06:23.980 --> 06:29.920
And the main thing is that your code is readable and that you can go through the code and you can consume

06:29.920 --> 06:33.220
that code in a fairly easy manner.

06:33.220 --> 06:38.530
The other thing was in Javascript you notice that at the end of each line I've got these semi-colons.

06:38.590 --> 06:43.600
So the javascript itself it will still run without the semi-colons.

06:43.690 --> 06:45.160
But we do use those.

06:45.160 --> 06:52.000
So they are optional but it's another one of those really good coding practices that once you created

06:52.000 --> 06:57.700
your statement you put a semi-colon in there just so that we know that this is the end of this particular

06:57.700 --> 07:04.090
comment and Javascript really is about creating all of those commands and those instructions on how

07:04.090 --> 07:12.610
to do something and once where once we're able to really isolate these instructions so this would be

07:12.610 --> 07:13.330
step one.

07:13.360 --> 07:16.600
This would be step two to render out all of that content.

07:16.690 --> 07:23.600
And that's where we use the semi-colons to Vought to visibly divide those steps.

07:23.620 --> 07:24.460
So what do you think.

07:24.480 --> 07:26.040
Javascript so far.

07:26.170 --> 07:30.040
It's really easy to start writing the code as we've seen.

07:30.070 --> 07:36.970
It's also really easy to do something with just some simple lines of code so it can do quite a bit which

07:36.970 --> 07:41.120
is already built into javascript with just one or two lines of code.

07:41.200 --> 07:46.630
You can already have something happening within your web page and that's really the beauty of javascript

07:46.660 --> 07:53.620
because that simplicity of that code in that light weight ability for that code to read out directly

07:53.620 --> 07:59.730
within your browser is really important because this gets you started with javascript really quickly

08:00.010 --> 08:03.240
and you can do a whole lot with just a little bit of code.

08:03.370 --> 08:10.690
So what I want you to do now is to open up your J S file and try writing the document write yourself

08:10.780 --> 08:18.100
a nice interesting message refresh your page and see a get rendered within each team L and the next

08:18.100 --> 08:18.670
lesson.

08:18.700 --> 08:25.900
We're going to go into looking at debugging because as we saw earlier that Javascript can actually tell

08:25.900 --> 08:32.290
if there's an error and although javascript is very flexible and it's made to be very flexible when

08:32.290 --> 08:38.590
it's rendering out that code and very forgiving I should say as it's rendering out that code it does.

08:38.590 --> 08:44.520
It does run into some errors and those errors can really easily be read within the console.

08:44.560 --> 08:47.830
And this gives us the ability to debug and fix those errors.

08:47.890 --> 08:52.420
And there's also a way to communicate from our code into the console.

08:52.420 --> 08:56.130
So as we develop an application you can pass that information.

08:56.260 --> 08:58.910
So all of this is coming up in the next lesson.
