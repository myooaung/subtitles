WEBVTT

00:00.840 --> 00:06.740
In this section we're going to be looking at iterators and generators and first of all I want to set

00:06.860 --> 00:15.230
my use strict mode within my javascript code and basically what this will do is this will restrict and

00:15.320 --> 00:19.140
allow us to have our code executed within a strict mode.

00:20.490 --> 00:25.510
And this is a new directive that came along in ECMAScript version 5.

00:25.520 --> 00:30.840
It's not a literal expression and it's ignored by earlier versions of javascript so it basically allows

00:30.840 --> 00:33.960
you to force that.

00:34.060 --> 00:40.150
The format is now going to be in a strict format so any errors that you might be writing that might

00:40.150 --> 00:43.450
have been ignored earlier are going to get thrown within the con..

00:43.690 --> 00:52.670
So next to that we want to do is look at generator's so generators are functions but they have little

00:52.670 --> 00:54.110
asterisks beside them.

00:54.170 --> 01:00.890
So this indicates that this is a generator and generators work with a yield keyword.

01:00.950 --> 01:03.760
So let's just create a generator function.

01:03.950 --> 01:05.580
So it looks very similar.

01:05.750 --> 01:10.420
And what we do within the generator function so we can set some variables.

01:10.430 --> 01:12.340
I'm going to set one called counter.

01:12.350 --> 01:20.090
So it's going to run within here and we're going to loop through the counter and we're going to loop

01:20.090 --> 01:26.710
through it while counter is less than 10 and we're going to use the yield keyword.

01:26.720 --> 01:28.550
So this is going to yield back.

01:28.610 --> 01:36.530
And this is going to give us essentially a needle or a point that the state is of this irit a reader

01:36.950 --> 01:39.730
now going to access this generator.

01:39.740 --> 01:47.900
So let's just do a regular let and recall it page and PGE generator.

01:47.900 --> 01:49.790
And I'm going to console log out.

01:49.790 --> 01:52.170
What's contained now with NPG.

01:52.340 --> 01:53.900
So this isn't a normal function.

01:53.900 --> 01:55.100
This is a generator.

01:55.130 --> 01:59.570
So it's going to look slightly different and it's probably something that you're not expecting that

01:59.570 --> 02:02.440
there is quite a bit of information that's being held in here.

02:02.630 --> 02:04.060
So we've got a generator.

02:04.070 --> 02:05.840
We've got a generator status.

02:05.870 --> 02:08.620
So currently the generator status is suspended.

02:08.630 --> 02:10.540
We've got some scopes here.

02:10.610 --> 02:15.430
So where the generator scope is and then we've also got the generator values there.

02:15.530 --> 02:19.240
So we've got a caller a length and so on.

02:19.400 --> 02:25.760
So next let's take another step and let's do something with this generator so now that we have our generators

02:25.760 --> 02:32.330
set up we've got a number of options that are available within the generator and the whole purpose of

02:32.330 --> 02:38.770
generators is to be able to move through and iterate through a number of values.

02:38.810 --> 02:43.240
So let's so we've set up kind of a default here where we're looping through.

02:43.250 --> 02:48.590
So this is returning back a bunch of different values so every time we go through the generator and

02:48.590 --> 02:53.870
we move to next we're going to yield a different value so essentially counter is going to increment

02:53.870 --> 02:55.010
by one every week.

02:55.010 --> 03:00.930
Every time we call back to the generator find out the position of the generator and currently it's suspended.

03:01.900 --> 03:05.570
And we have a way to move it through to the next one.

03:05.680 --> 03:08.710
And that's using the next method.

03:08.710 --> 03:10.290
So that's simply next.

03:10.300 --> 03:11.640
And it's the next method.

03:11.770 --> 03:14.300
So this is built into the generators.

03:14.350 --> 03:22.220
And let me show you what this puts So let's refresh it and we see now that value is 0 and done is false.

03:22.240 --> 03:26.940
So that means that there's still content there that we can continue to move through.

03:26.950 --> 03:34.570
So it hasn't stopped returning content and it's still allowing us to move through next.

03:34.570 --> 03:44.080
So if I duplicate the sote several times refresh it we see that we move to value 1 2 and 3 and we can

03:44.080 --> 03:48.140
continue to move through here until we hit the end of the counter.

03:48.250 --> 03:56.590
So if I set the end of the counter at 2 and let's do a few more let's refresh it and then we see that

03:56.650 --> 03:58.270
the value is.

03:58.270 --> 04:00.090
So we get we started at zero.

04:00.130 --> 04:01.380
The first time we run through.

04:01.480 --> 04:03.190
So we get return back zero.

04:03.220 --> 04:07.730
The next time we run through the counter increases to 1 we yield that and we return that.

04:07.870 --> 04:14.380
And then because the statement is no longer going to be true we're not able to loop through any values

04:14.380 --> 04:17.490
passed to or first past the first two.

04:17.570 --> 04:23.350
So 0 and 1 we return back undefined and we see that done comes out to true.

04:23.350 --> 04:30.790
So basically what this means is this is ideal and perfect for a loop because we know that we can loop

04:30.790 --> 04:36.740
through a series of values and we can also break out of the loop if we see a certain condition.

04:36.850 --> 04:42.220
And the one thing that you do need to be careful of here is that when you're moving through next that

04:42.250 --> 04:46.790
every time you call next you're actually going to move the needle over one.

04:46.840 --> 04:48.680
So are going to move that yield over one.

04:48.790 --> 04:58.390
So if you were to simply loop through and check to make sure that page next is going to be is equal

04:58.390 --> 05:04.150
to false and continue to move it through until it hits true then you're still going to run into a problem

05:04.360 --> 05:09.050
because if you want to output any of that content you have to do PGE next.

05:09.160 --> 05:11.160
All the time in order to get the values.

05:11.260 --> 05:17.200
So the best thing and the best solution usually is if you want to actually have output to those that

05:17.200 --> 05:19.760
content and you want to loop through it.

05:19.780 --> 05:24.100
So just set up a regular loop as you normally would.

05:25.150 --> 05:31.990
So I'm going to loop it through till 10 times and increment I.

05:32.290 --> 05:38.790
So there's a loop and I'm going to set up a variable so basically a holder for that value.

05:39.070 --> 05:42.930
And this is where I'm going to do the Peachi next.

05:42.940 --> 05:47.920
So that way we're not going to move our needle at all and we're going to get that we're going to capture

05:48.340 --> 05:52.880
all of that information so the value in the done stayed within holder.

05:53.110 --> 05:59.610
And then here is where we can apply our condition so we can check to see if Holder is done.

05:59.650 --> 06:08.020
So if this is true and if it is true then we can simply break out of our loop and that's we it's a good

06:08.020 --> 06:11.370
use for break as well within loops.

06:11.380 --> 06:17.950
So now let's let's sort of put our values with a console log out the value of Holder because remember

06:17.950 --> 06:20.770
Holder is holding that PGE next object.

06:20.770 --> 06:23.490
So do holder value.

06:24.400 --> 06:34.160
And what put that in the console and we can also output the contents of Holder done.

06:34.210 --> 06:36.280
So let's refresh this.

06:36.340 --> 06:44.250
And now we see that we've got these values get output here so we get the zero which is the value and

06:44.260 --> 06:45.400
done is false.

06:45.400 --> 06:47.920
One is the value done is false.

06:48.100 --> 06:55.000
And then once done it's true that we stop running through there and we can also see that when we go

06:55.000 --> 07:00.760
down here the generator now has changed to close it's not suspended anymore because now the state is

07:00.760 --> 07:01.510
closed.

07:01.510 --> 07:07.900
We've run through and we've completed all the content within the generator and we also see that if we

07:07.900 --> 07:12.360
try to keep trying to call to it we're going to get undefined and done is equal to true.

07:12.370 --> 07:18.010
So that's the state of that generator once we've run through all the content that's contained within

07:18.010 --> 07:18.390
there.

07:18.520 --> 07:26.970
So if I was to change this to 20 and we can see that now we end up looping through everything and not

07:26.990 --> 07:34.610
going to have the status there of done but we can see that we're looping through and we're getting through

07:34.670 --> 07:38.890
all nine there and our generators still suspended.

07:39.020 --> 07:43.670
We can see that we can still access the next value the next value the next value.

07:43.670 --> 07:50.540
So we can start where we stopped off here and we can continue through because this generator now has

07:50.750 --> 07:55.710
more items and it's got 20 different 20 values that it's ready to return.

07:56.060 --> 08:02.510
So I know that this was a fairly complex topic and we've run through it fairly quickly but there's a

08:02.510 --> 08:08.150
lot of power behind this because this gives us the ability to essentially loop through values and pull

08:08.150 --> 08:11.550
them back into our applications and then make use of them.

08:11.690 --> 08:18.440
So we've got the State of the generator and we can also see if the generator status if it's suspended

08:18.650 --> 08:21.100
that means there's more content within the generator.

08:21.110 --> 08:26.870
So if we're developing our application we can always call to it and pull back even more information.

08:26.870 --> 08:29.640
So what do I need to do now is try the suit for yourself.

08:29.810 --> 08:37.760
So set up a generator and you can have a number of pieces of content and so on and you can essentially

08:37.790 --> 08:42.670
loop through all those pieces of content and yield that information back.

08:42.800 --> 08:49.310
So that's essentially the place within the iteration of the content that you're at or you could just

08:49.310 --> 08:51.630
set up a loop here as well.

08:53.090 --> 08:55.140
To simulate having that content.

08:55.190 --> 09:04.370
So set up a value and then loop through it and then output that and output various values and then also

09:04.550 --> 09:14.080
try to within the for loop where you can pick up and check to see if the value of done is false or Idalia

09:14.120 --> 09:14.960
of done is true.

09:14.990 --> 09:16.460
And then break the loop.

09:16.460 --> 09:19.720
So go out and try this out for yourself within your editor.
