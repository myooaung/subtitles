WEBVTT

00:01.440 --> 00:10.010
In this lesson we're going to be looking at Ajax So what is Ajax Ajax it basically is short for Asynchronous

00:10.100 --> 00:16.930
JavaScript and Exham else let me put that out here and I'm going to update this one.

00:17.390 --> 00:26.120
So Asynchronous JavaScript and SML and this predominately Nowadays we use it to pull back some data

00:26.600 --> 00:34.070
and basically So Ajax is not a programming language and it's a combination of basically allowing us

00:34.070 --> 00:38.960
to make HTP request in the background using script.

00:38.960 --> 00:47.210
So this is an ace DTP request as if you go to any web page HTP request but we allow us to do this using

00:47.270 --> 00:53.480
javascript and basically allows us to load content into our web page.

00:53.480 --> 00:55.050
So let me show you an example.

00:55.070 --> 01:02.540
So basically we've got the web browser we've got the user user interface and the HTP request sends it

01:02.570 --> 01:05.690
over in order to get additional information.

01:05.780 --> 01:12.050
And the web server typically done to a web server and this can also be loading a web page in or are

01:12.200 --> 01:13.940
a file or file contents.

01:14.020 --> 01:16.930
And that gets sent back to the user interface.

01:17.030 --> 01:17.720
So it's not

01:20.740 --> 01:24.230
much different then if you're browse into a page.

01:24.340 --> 01:27.780
But the key here is this Ajax engine.

01:27.880 --> 01:34.490
And so this was done by javascript that javascript in the middle allows us to request web page data.

01:34.510 --> 01:38.350
So basically you can load content without reloading the page.

01:38.350 --> 01:40.290
So that's what really is.

01:40.550 --> 01:42.810
That's what AJAX is all about.

01:43.000 --> 01:51.190
And this is exactly what we need for our Jason file in order to load it so that whenever any of these

01:51.190 --> 01:58.750
values change we can simply load it and we can load all of the contents of there and then utilize that

01:58.840 --> 02:00.520
as we normally would.

02:00.520 --> 02:05.020
So we're basically reading the contents of a file into our Javascript.

02:05.050 --> 02:09.210
So let's set up that function in order to load Jason.

02:09.550 --> 02:18.360
So I call it function and it's going to basically load on data and we'll have a callback there as well.

02:20.530 --> 02:26.750
So whatever our Web page loads that's when I want to initialize and load Jaison.

02:26.800 --> 02:28.800
So let's create a function.

02:28.950 --> 02:30.980
I NIIT.

02:31.100 --> 02:33.350
So this is our initialization function.

02:33.500 --> 02:38.090
And what's going to happen is that this is actually going to load that Jaison data.

02:38.330 --> 02:40.240
So we don't use the function load.

02:40.280 --> 02:45.480
Jason and because this is a callback.

02:45.700 --> 02:50.740
So it basically whatever data is responded.

02:50.740 --> 02:58.690
So whatever that response data is that we can make use of it within hours upon Syria and basically for

02:58.690 --> 03:02.910
now we'll just console log it the response value.

03:03.340 --> 03:09.310
And this can make a lot more sense as we progressed through this lesson so not to worry if right now

03:09.400 --> 03:12.810
maybe it seems I might be going a little bit fast through the explanation.

03:12.820 --> 03:16.220
But let's set this up and I'm sure that's going to work.

03:16.300 --> 03:20.740
And then we can go through more detailed explanation of Jason.

03:20.830 --> 03:27.580
And believe me once you start using AJAX and Jaison together it's the perfect match it works.

03:27.580 --> 03:33.730
They work so well together that you can get this response information from the file and then basically

03:33.730 --> 03:35.250
loop through it and make use of it.

03:37.590 --> 03:42.690
So maybe first we're actually going to do it with the callback and then I'll show you why we're including

03:42.690 --> 03:46.770
the callback because it's it just makes it function a little bit better.

03:46.770 --> 03:51.720
So what I need to do is I simply need to load Giese on so that's the first time that we're going to

03:51.720 --> 03:52.310
do that.

03:52.350 --> 03:58.110
We're just going to run that function to load Jason and I'm going to comment this one for now and then

03:58.110 --> 04:03.000
I'll show you what the differences between the two is a little bit easier to understand if we're not

04:03.000 --> 04:07.280
doing the callback because you don't need the callback in order to do Ajax.

04:07.290 --> 04:11.640
So basically we're loading the page and then we're loading the Jae's on file.

04:11.640 --> 04:14.020
So that's what's happening right now.

04:14.040 --> 04:21.600
So first thing that we need to do we need to establish an X M-L HTP request object.

04:21.600 --> 04:27.180
So this is available just as we've created other objects that we make use of.

04:27.180 --> 04:31.980
So I just call it X H.R. you can call it whatever you like whatever makes sense.

04:32.100 --> 04:37.950
And basically you're creating a new X M-L and all of this did start as SML.

04:38.250 --> 04:45.600
So that's why whenever we're making those requests even though we're getting Jason we type SML HTP request

04:45.660 --> 04:46.770
object.

04:46.770 --> 04:54.120
So basically allows us to create a brand new one and all console log this out for now so that we can

04:54.120 --> 04:57.080
take a closer look and we can see what's contained within here.

04:57.270 --> 04:59.680
So go back out and refresh it.

04:59.730 --> 05:07.020
So there's the H.T. SML HTP request object and you can see that there's quite a lot of information in

05:07.020 --> 05:07.770
there.

05:08.100 --> 05:14.230
So we know that what we need to do is we need to send a request.

05:14.310 --> 05:21.510
So there's a number of methods here and we need to also identify where the file is what we're trying

05:21.510 --> 05:22.830
to open.

05:22.830 --> 05:26.300
So these are the next two parameters that we need to include here.

05:26.310 --> 05:28.020
So let's set those up.

05:28.020 --> 05:37.320
So let's do X H.R. and we're going to use the method open and this is where we specify how we're opening

05:37.320 --> 05:43.370
it and of course we've got different methods so we can do a get or post.

05:43.410 --> 05:48.260
So I'm going to do a get and the next we need to provide a file path.

05:48.330 --> 05:53.840
So I've got a g son and I are going to rename that one to Jay's son one.

05:54.160 --> 05:59.300
So go down here and get rid of this.

05:59.360 --> 06:04.850
So that's just going to sit as a regular Jasen object.

06:04.950 --> 06:08.580
So I'm just going to go ahead and save this as Jason one.

06:08.610 --> 06:11.720
Jason same directory so that we can access it.

06:11.730 --> 06:14.440
So we know we're trying to open that file.

06:16.160 --> 06:20.800
And lastly we can specify if it's asynchronous or synchronous.

06:20.900 --> 06:27.400
So synchronous asynchronous is true and synchronous as false.

06:27.410 --> 06:31.340
So that's where we get that last parameter there that it's either true or false.

06:31.370 --> 06:34.080
So let's refresh now again.

06:34.100 --> 06:41.240
And we see that what we have now is ready state one because we've actually sent it and we've gone to

06:41.240 --> 06:44.300
the point where we're actually trying to open something up.

06:44.300 --> 06:49.580
So that means that we've got ready state one and there's one other thing that we need to do is we need

06:49.580 --> 06:55.720
to actually send our request that's just done by the method send.

06:55.730 --> 06:57.820
So let's see what happens now.

07:01.100 --> 07:03.580
And we run into our error.

07:03.590 --> 07:11.360
So this is a cross origin request and basically the problem here is that we're trying to open up a file

07:11.600 --> 07:17.150
and the path for the file is file call and forward slash forward slash K and then this is basically

07:17.150 --> 07:22.820
our address and we can't do these types across origin requests so even though this is sitting on the

07:22.820 --> 07:26.130
same directory we can actually access it.

07:26.270 --> 07:32.240
If you've got a local server running or a local host running you could access it then you can do HTP

07:32.450 --> 07:35.990
data Crome and so on Chrome extension HGT.

07:36.110 --> 07:38.610
So those ones are supported formats.

07:38.870 --> 07:42.520
So we need to actually have a different protocol.

07:42.520 --> 07:48.890
We can't do a File protocol and this is one of the security features of javascript that you can't have

07:48.890 --> 07:53.500
these scripts that run and they can simply pick up files off of the computer.

07:53.570 --> 07:55.280
So we don't want that to happen.

07:55.310 --> 08:02.550
And that's why a lot of times if you try to run this locally you're going to get this cross origin problem.

08:02.750 --> 08:09.080
So the problem for that the solution for that is to get an HD T-P address so I'm going to simply place

08:09.080 --> 08:11.200
that in there and see that.

08:11.210 --> 08:18.140
So that's going to give me you are l and then I can take that you or else so this is where our contents

08:18.200 --> 08:18.990
are sitting.

08:19.100 --> 08:21.840
And I can simply load that in there.

08:22.810 --> 08:23.590
Refresh.

08:23.620 --> 08:25.630
And our error is gone.

08:25.630 --> 08:33.670
And now we can actually see we get response and response text and notice this is exactly what we needed

08:33.880 --> 08:37.720
in order to return back that Giese on formatted data.

08:37.720 --> 08:41.070
So this is exactly what we needed.

08:41.080 --> 08:45.590
So now we're actually ready to make use of the respondent information.

08:45.850 --> 08:50.080
So I'll show you some additional pieces that we can also see.

08:50.080 --> 08:55.720
And there's a number of other values in here that are really important to take a closer look at.

08:55.720 --> 08:57.850
So ready state is one.

08:58.040 --> 09:03.490
So ready state basically changes depending on how far you get with the file.

09:03.490 --> 09:08.590
And if you get make it to ready state for that means that you actually connected with the file and you've

09:08.590 --> 09:10.260
received back information.

09:10.300 --> 09:12.400
It's the same thing as status 200.

09:12.580 --> 09:19.540
So sometimes it's a great idea to kind of check to see if the ready state has changed and if it does

09:19.750 --> 09:23.260
then you know that you've got some data there that you can respond back.

09:23.260 --> 09:29.770
So that's exactly what the next step is that we're actually we've made our request we've retrieved back

09:29.860 --> 09:35.820
some information and now we're able to actually check the ready state.

09:35.830 --> 09:40.030
So basically we see that we've got an answer they're all ready to go.

09:40.210 --> 09:43.780
And this is where within the request.

09:43.780 --> 09:45.840
So usually I do it at the top there.

09:46.000 --> 09:53.490
So it's X a char and the method is on ready state change.

09:53.500 --> 10:01.630
So this is the one that we're looking for and if that changes then we fire off this anonymous function.

10:01.630 --> 10:05.860
And then within here we can check the ready state values.

10:05.860 --> 10:11.290
So let's let's first log out the ready state values so you can see that there's actually going to be

10:11.290 --> 10:13.720
a progression and a change in those.

10:13.750 --> 10:20.750
So we're just going to do a char ready state or we can also use this as well.

10:20.760 --> 10:25.050
So this is just referring to the current object that a char object.

10:25.050 --> 10:26.740
So either one is fine.

10:28.420 --> 10:29.760
So let's get ready state.

10:29.830 --> 10:34.410
We'll get that ready state value and let's reload that one more time.

10:34.540 --> 10:40.930
So you refresh it and you see that we start out ready state and one that we get ready state to ready

10:40.930 --> 10:43.100
state 3 and get ready state for.

10:43.120 --> 10:46.860
We know we've got some data to respond and to make use of.

10:46.870 --> 10:47.460
So that's it.

10:47.470 --> 10:52.750
So now we can pull back that response text.

10:52.870 --> 10:55.750
So there's a response center response text.

10:55.750 --> 11:03.050
Most of the time we use response text and we know that previously from objects we know that we can get

11:03.050 --> 11:07.460
this response text within our console in our Javascript.

11:07.460 --> 11:10.610
And basically now we can make use of it as needed.

11:10.790 --> 11:17.090
So let's let's create a variable to hold this value.

11:17.430 --> 11:24.650
So I'm going to simply create variable and it's going to be H Tim L and then within here is wearing

11:24.650 --> 11:26.780
going to get the response text.

11:27.030 --> 11:31.330
So do you remember how we could bring it into a usable Jaison format.

11:31.530 --> 11:37.180
So instead of mightst him out let's call it my object.

11:37.590 --> 11:41.510
So what I want you to do now pause the video connects.

11:41.580 --> 11:47.460
So update and add your file if you're not using a local host or a local system.

11:47.480 --> 11:52.590
You can't run this this is part of the JavaScript that's not going to run with just opening up the file

11:52.590 --> 11:55.470
in the browser are you going to come across those cores errors.

11:55.590 --> 12:01.830
And so a number of solutions go to my adjacent com place or on in there and just get that you are all

12:01.840 --> 12:05.160
linked or if you've got a server you can upload it there.

12:05.190 --> 12:13.950
So as long as you're doing HTP or HTP s within the file location then you can pull that back or if you've

12:13.950 --> 12:15.690
got a local server running.

12:15.690 --> 12:19.720
So that means that you're not going to something like that we have here.

12:19.740 --> 12:21.480
So the protocols not file.

12:21.520 --> 12:25.440
You're doing an HTP and that's what you need in order to load it.

12:25.620 --> 12:32.430
So go ahead and create that file whether it's in my guess on dot com or another format and pull it in

12:32.490 --> 12:34.110
try to pull it into your file.

12:34.200 --> 12:41.730
And then lastly pause the video and once you get that response text in I actually output that response

12:41.730 --> 12:44.820
text as an object within Javascript.

12:44.880 --> 12:45.890
So go ahead and try that.

12:45.930 --> 12:48.360
And I see the solution coming up.

12:48.360 --> 12:55.740
So we did see that we had JS saw an object and if we parse a string that means that we can parse it

12:55.740 --> 12:58.140
in and make it usable.

12:59.360 --> 13:01.520
Within Javascript.

13:01.520 --> 13:02.420
So that's all it was.

13:02.420 --> 13:10.500
We just needed to parse that information through and notice that we only get the value here at the end.

13:10.530 --> 13:11.900
But it is usable.

13:12.030 --> 13:17.250
So there was one other thing that we do need to add in and we know that we're doing this ready state

13:17.310 --> 13:23.910
change but we need to check what the ready state is because we only have the data that we can actually

13:23.910 --> 13:26.550
make use of that data only right at the end.

13:26.550 --> 13:32.040
So that was what the problem here was that I'm not sure if you experienced the same thing but you probably

13:32.040 --> 13:34.900
caught a bunch of errors and then at the end it did work out.

13:34.950 --> 13:42.480
So this is where we can do this and we can check the ready state and we can just ensure that ready state

13:42.480 --> 13:44.100
is equal to 400.

13:44.130 --> 13:49.080
And also if you want to be doubly sure you can do this status.

13:49.200 --> 13:56.900
And if we do this status make sure that status is equal to 200 because that means that we've connected

13:56.900 --> 13:57.910
to the file.

13:57.920 --> 14:03.350
So now when I refresh it we're only going to hit this and we're going to try to read the response text

14:03.590 --> 14:06.820
when the ready status for and a status is 200.

14:06.830 --> 14:07.490
So there we go.

14:07.520 --> 14:11.960
So now we've pulled back the file and we can make use of it within our Javascript.

14:11.960 --> 14:15.770
And that's exactly what we're going to do in the upcoming lesson.

14:15.890 --> 14:24.930
So go ahead and try that out and pull in some information from a file pull that information into your

14:24.930 --> 14:27.960
javascript and output it within your console.

14:27.960 --> 14:32.110
So go ahead and try that out and I'll show you the next steps coming up in the next lesson.
