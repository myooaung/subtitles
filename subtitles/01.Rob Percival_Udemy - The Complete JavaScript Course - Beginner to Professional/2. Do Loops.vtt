WEBVTT

00:00.720 --> 00:05.850
Welcome back in in this lesson we're going to be looking at the do while loop.

00:05.870 --> 00:12.420
So basically a loop allows you to execute a block of code a number of times and you can set the parameters

00:12.450 --> 00:13.190
for that.

00:13.350 --> 00:16.490
So let's set up our first loop and loops.

00:16.500 --> 00:17.780
Save us time.

00:17.940 --> 00:20.070
So this one is called a do loop.

00:20.490 --> 00:24.070
And there are a number of different ways to do the loops.

00:24.120 --> 00:28.910
So I want to show you the different ways to get and execute the loops.

00:29.100 --> 00:33.510
And there's also different rationale for doing them in all these ways.

00:33.510 --> 00:37.110
But they all do need three different expressions.

00:37.260 --> 00:39.510
And I'm going to show you those as well.

00:39.510 --> 00:43.800
So the first one that we need to set is we need to set a variable.

00:43.980 --> 00:50.370
So I set a variable of X and I set it to be zero.

00:51.330 --> 00:53.430
And so this is the do loop.

00:53.580 --> 01:03.230
And what I need to do with it the do is I need to increment X so lastly and the most important one.

01:03.320 --> 01:06.140
So we've set a starting value for X..

01:06.290 --> 01:11.850
We have we're doing something with X so that we can eventually break out of the loop.

01:11.870 --> 01:19.100
And lastly the most important part most important expression that we need to add in the loop is we need

01:19.280 --> 01:20.990
to set a breaking point.

01:21.230 --> 01:23.710
And this is where we can use while.

01:23.780 --> 01:30.620
So what we want to do is we want to continue to loop while X is less than 10.

01:30.950 --> 01:36.090
And then once X is less than 10 then we're actually going to break out of the loop.

01:36.950 --> 01:45.870
So let's put let's create our variable output and this one we're going to grab that element in the dog.

01:46.130 --> 01:53.110
So it's a document get element by id and then we need to identify the element that we want to grab.

01:53.240 --> 01:55.740
So we want to set up that inner HMO.

01:56.000 --> 02:05.180
So as we're looping through we're going to put in her age to now and what we're going to do is we're

02:05.180 --> 02:07.000
going to keep concatenating to it.

02:07.040 --> 02:09.610
So we're going to add to the existing content.

02:09.710 --> 02:20.030
And we want to put a value of x soulis to value x equals so we can see the value of x as we're looping

02:20.030 --> 02:20.650
through.

02:20.780 --> 02:23.170
And then also you add a line break.

02:23.190 --> 02:30.090
So just some h t m l so we can differentiate between different iterations of the loop.

02:30.220 --> 02:31.510
So we're all ready to go.

02:31.550 --> 02:33.700
So let's try this out.

02:33.800 --> 02:39.700
So we see that what gets put here is starting at the value of zero.

02:39.770 --> 02:43.510
We continuously looped through the value of x.

02:43.580 --> 02:50.460
So it puts set and increments X and then it gets this statement here where we've got while.

02:50.540 --> 02:52.100
So this is our condition.

02:52.130 --> 02:59.110
So just like the conditions that we saw earlier that while this condition is not true

03:02.260 --> 03:05.110
and that's the point will it it will break the loop.

03:05.110 --> 03:09.410
So this condition always has to be true or it's going to break out of the loop.

03:09.580 --> 03:19.220
So we know at this point that it's gone through its own put X AMS let's let's do one work and we're

03:19.220 --> 03:23.920
going to say final value of x.

03:25.150 --> 03:27.520
So the final value of x.

03:27.590 --> 03:30.340
What do you think the final value of x is.

03:30.500 --> 03:34.290
And we seek we can quickly run through the code here.

03:34.310 --> 03:40.730
So starting undervalues 0 we're looping it through where incrementing X here and then where we have

03:40.730 --> 03:45.520
that condition while it's less than 10 was not less than an equal to 10.

03:45.560 --> 03:49.340
While it's less than 10 and that's where we break out of the loop.

03:49.550 --> 03:54.250
So do you think that it actually runs one more time increments x.

03:54.260 --> 03:59.030
So do you think X will be 10 or do you think X will be 9.

03:59.090 --> 04:05.290
So let's refresh the page and if you said X is 10 you're actually correct.

04:05.300 --> 04:12.190
So what's happened here is because we've done the increment afterwards after that put here.

04:12.290 --> 04:15.350
So this is why the value X is 10.

04:15.590 --> 04:22.970
So order it is really important when especially when you're incrementing the value you're using that

04:22.970 --> 04:24.920
value in output.

04:24.920 --> 04:28.040
So what if I put it before that I would put statement.

04:28.070 --> 04:33.860
What do you think the value of X is going to be do you think that the final value of X is going to be

04:33.980 --> 04:40.460
equal to the last one that we're putting within the loop iteration let's refresh that and see what the

04:40.460 --> 04:41.440
answer is.

04:41.450 --> 04:46.300
So it is 10 and going through the code.

04:46.500 --> 04:48.870
So you can see that we're starting at zero.

04:48.990 --> 04:53.250
We enter in within the loop we immediately increment X by 1.

04:53.250 --> 05:00.420
So at this point X heard one when we're doing the output we see the value of X gets put to one and then

05:00.420 --> 05:05.820
we continue to loop through and we check to see if the condition is true and that we continue to go

05:05.820 --> 05:06.570
back there.

05:06.660 --> 05:10.300
So we're not going to actually do one more trip in increment x.

05:10.330 --> 05:19.470
So the last time we incremented that X were outputting in 10 and we break the loop at this point because

05:19.470 --> 05:22.720
the condition now is no longer true.

05:22.770 --> 05:24.950
It's no longer less than 10.

05:24.990 --> 05:27.100
So the condition is false.

05:27.210 --> 05:32.060
And then we put the value.

05:32.180 --> 05:40.030
So let's do an exercise now and what I want you to do for this exercise is to ask the user coming in.

05:40.100 --> 05:49.580
So using a prompt asking for a value and ask how many times you want them where they want you to loop

05:49.580 --> 05:52.520
through the code and output the value.

05:52.820 --> 05:54.010
So let's give it a go.

05:54.050 --> 05:59.910
And I did the prompt and then using the return value the prompt.

06:00.050 --> 06:05.210
That's where you set the condition for the loop and limit the number of times that we iterate through

06:05.210 --> 06:07.450
the loop and you keep the output the same.

06:07.490 --> 06:12.940
Where we're outputting the value of x as we're doing our count and we're looping through.

06:13.190 --> 06:14.090
So go ahead.

06:14.090 --> 06:15.410
Open up here Ed..

06:15.440 --> 06:26.080
Pause the video and create that prompt and then letting the user set the breaking point for the loop.

06:28.010 --> 06:35.600
So we had an opportunity to try that out and let's just do one here called answer and prompt

06:38.390 --> 06:45.010
and we'll ask how many times do you want me to loop

06:48.540 --> 06:50.590
with a question mark at the end.

06:51.060 --> 06:58.270
So now whatever the user is going to get prompted whenever they refresh the page they're getting a prompt

06:58.370 --> 07:02.280
and they're going to get asked how many times they want to see this loop.

07:02.970 --> 07:09.890
So all we have to do is take the value of answer and use that as our breaking point for you.

07:10.080 --> 07:13.870
So answer any answer we can go out and refresh.

07:14.100 --> 07:17.450
And now we're asked how many times do we want to do.

07:17.810 --> 07:24.060
So now we can enter in whatever number we want and we'll see that the actual loop loops as many times

07:24.060 --> 07:25.260
as we entered in there.

07:25.380 --> 07:30.790
So we can enter in a really large number and probably not a great idea.

07:30.820 --> 07:32.580
But it does work.

07:32.680 --> 07:34.730
So you should have some type of limits.

07:34.930 --> 07:42.010
And the other thing too as well we should also add in something where maybe we do a check to see if

07:42.010 --> 07:44.980
the value is actually numeric.

07:45.400 --> 07:51.400
So you can see here that even if I enter in something we actually still do that 1 loop through because

07:51.400 --> 07:59.480
what's happening now is that we're still going into the code we're reading through it and the condition

07:59.540 --> 08:01.340
actually isn't.

08:01.700 --> 08:03.940
So we we do that do.

08:04.070 --> 08:07.770
Which basically means and this is really important to know as well.

08:07.910 --> 08:16.430
So even though we did actually have a numeric value that we rendered out we went through do we incremented

08:16.490 --> 08:22.220
X we output the value of x and then we hit that condition.

08:22.350 --> 08:29.140
And within this condition we know that answer I actually was holding a numeric value.

08:29.250 --> 08:37.570
So basically the loop broke and we output the value there.

08:37.670 --> 08:45.880
So it's important to note this that we did we did pick up a value with an answer but it wasn't numeric.

08:45.980 --> 08:52.950
So the loop still ran and the condition broke ass out of the loop before it could run that second round.

08:55.600 --> 09:01.420
So one thing I didn't want to note that we know that with prompts the actual value is going to be a

09:01.420 --> 09:02.450
string value.

09:02.590 --> 09:05.350
But javascript's flexible enough to work with it.

09:05.500 --> 09:12.520
But realistically this should actually be updated to number just to make sure that we are actually using

09:12.580 --> 09:14.100
a number value.

09:14.260 --> 09:18.430
And we can also add in a condition that checks to see if

09:21.830 --> 09:30.020
the type of values if we take number answer and let's use typeof.

09:30.100 --> 09:32.100
So that's the one that we used before.

09:33.170 --> 09:43.630
So we're converting number answer into a number of value.

09:43.850 --> 09:48.360
So let's go ahead and convert the answer into a number value.

09:48.500 --> 09:50.430
So the number answer.

09:50.510 --> 09:58.850
So this will actually convert our street value into a number or numeric value in order to be able to

09:58.850 --> 10:04.370
loop through there and then all we need to do is just make sure that this fund is answer as well.

10:04.370 --> 10:07.190
So this is going to be using that value of answer.

10:07.190 --> 10:08.330
Let me refresh it.

10:08.510 --> 10:11.750
And now it's going to ask me how many times want to loop through in there.

10:11.810 --> 10:14.160
So everything is working as before.

10:15.310 --> 10:17.770
And I can open up the console and I can do.

10:17.770 --> 10:20.160
Type of answer.

10:20.500 --> 10:22.300
And we can see that now is the numbers.

10:22.320 --> 10:26.620
That's the answer that we have given and we see that's taken in numeric format.

10:26.980 --> 10:35.770
So what want you to do now for the challenge is to open up your editor and loop through numbers 0 to

10:35.830 --> 10:40.360
30 and only output that even numbers.

10:41.140 --> 10:48.640
So looping through all those numbers and I only want you to output within that inner each to Maol only

10:48.730 --> 10:52.870
output those even numbers.

10:52.870 --> 10:59.410
So I just give it a second and pause the video and try it for yourself and I'll show you the answer

10:59.470 --> 11:00.120
coming up.

11:00.980 --> 11:04.690
So you had the opportunity to try this out yourself.

11:05.480 --> 11:07.460
So let's clean up some of this code.

11:07.490 --> 11:09.080
We don't need answer any more.

11:09.110 --> 11:15.140
So I can get rid of those ones and what we need to do is so we can set it starting at zero.

11:15.140 --> 11:24.050
We want to loop through while X is less than 31 or we can say 30 it actually doesn't matter because

11:24.050 --> 11:26.720
we only want to hit even numbers.

11:26.720 --> 11:33.050
So while we're looping through the value of x and it's also important to know where we're placing the

11:33.050 --> 11:34.390
X increment here.

11:34.430 --> 11:36.080
So I'm going to leave that where it is.

11:36.110 --> 11:41.270
And of course if I put that above and I did the conditional statement then we would have a different

11:41.270 --> 11:42.560
value for x.

11:42.710 --> 11:46.900
So coming in X starts at 0 but we already add one.

11:46.940 --> 11:48.510
So it's already up to 1.

11:48.770 --> 11:56.450
So we can actually it might actually be better that if we had it down here so we can start at zero.

11:56.450 --> 11:59.470
So zero would be our first even number.

11:59.630 --> 12:02.390
So now we need to add in that condition.

12:02.690 --> 12:09.950
So let's take a look at the value of x and we'll look at X and we'll see if X

12:13.580 --> 12:20.260
remember modulus so modulus gives us the ability to check if there is a remainder to a number.

12:20.300 --> 12:28.670
So if we divide it by two we know that the number if we divide it by two and the remainder is zero.

12:28.670 --> 12:31.510
We know that that number is even.

12:31.580 --> 12:38.210
So we can put the value of x so we can just simply keep that statement that we have there and we're

12:38.210 --> 12:43.520
going to put the value of x and then we're going to continuously loop through and we can leave this

12:43.520 --> 12:44.980
one in as well.

12:44.990 --> 12:48.680
So let's open up the browser let's refresh the page.

12:48.680 --> 12:51.140
And now we see that we're starting at zero.

12:51.140 --> 12:53.250
We've got two four six eight ten.

12:53.270 --> 12:56.630
All of that even numbers all the way up to 30.

12:56.660 --> 12:57.950
So that's the solution.

12:58.070 --> 13:04.220
And then the next lesson we're going to look at while loops sort of are looked at the do while loop

13:04.490 --> 13:07.340
and the wild loops are going to be slightly different.

13:07.340 --> 13:09.330
So that's coming up in the next lesson.
