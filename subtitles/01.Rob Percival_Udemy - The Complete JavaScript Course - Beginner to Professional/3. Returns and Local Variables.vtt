WEBVTT

00:00.540 --> 00:04.950
We'll come back in this list and wash surely even more you can do with functions.

00:05.100 --> 00:11.140
So previously we saw how we can when we looked at functions within the console.

00:11.190 --> 00:17.410
They didn't have any value being returned so let's create a brand new function and we'll give it a name

00:20.560 --> 00:28.030
so just call it my fun one and then we're going to set that up and this time what I wanted to do is

00:28.030 --> 00:34.140
I want to return a value so I'm going to return the value of OK.

00:35.200 --> 00:42.950
So now when we invoke mindful I'm one and I'm going to refresh it and open up the console so my find

00:43.060 --> 00:49.480
one and rather rather rounded brackets and we see that now instead of undefined we actually get the

00:49.480 --> 00:50.820
return value.

00:51.070 --> 00:54.330
So basically what this means is that you can set up a variable.

00:54.340 --> 01:03.070
I can give it my fly for one as a function of value and the same thing that we saw before where we declare

01:03.070 --> 01:03.950
a variable.

01:03.970 --> 01:13.840
And if I give the variable the street value of hello and I hit a I get the value of Hello being returned

01:13.840 --> 01:14.420
back.

01:14.500 --> 01:20.980
So I can do the same thing where I can declare a variable value and I can see my phone line.

01:21.190 --> 01:30.310
And because this one now has a return value when I enter in a type and B I've now taken that value that's

01:30.310 --> 01:32.330
being returned from the function.

01:32.350 --> 01:36.430
So let's do that within the editor so that we can declare the value.

01:36.440 --> 01:37.920
My final one.

01:37.930 --> 01:41.620
So now if I go out and if I refreshed the page

01:44.360 --> 01:47.800
I can see that now I've assigned this value to a.

01:47.930 --> 01:53.180
And actually I should make use of that where I want to within my code.

01:53.270 --> 02:01.820
So if I wanted to for instance say I want to update my output of my interglacials you UML rushing I

02:01.860 --> 02:09.020
take this out of the function and let's update the output of each two mail as my phone once when I refresh

02:09.020 --> 02:09.380
it.

02:09.410 --> 02:12.740
We get that return value output there.

02:13.070 --> 02:20.500
So let's do even more that we can do with functions and we can set up and we saw that earlier we can

02:20.510 --> 02:25.040
say and we can have parameters and we can send through various arguments.

02:25.070 --> 02:32.840
So let's make use of that and to set up a number of arguments parameters here and then within my function

02:33.110 --> 02:39.680
I'm going to pass in some values so I'm passing in 4 5 and 6 I'm picking them up within my function

02:39.740 --> 02:46.510
as ABC and then I can utilize them and represent them and make use of them within my function.

02:46.790 --> 02:52.310
So maybe what I want to do is I why use a variable so I don't and declare a variable.

02:52.310 --> 02:54.910
And I'm going to explain this afterwards as well.

02:55.040 --> 02:58.300
So I'm declaring a variable and I'm calling it response.

02:58.460 --> 03:07.130
And all I'm going to do is I'm going to add a plus b plus C and then be the value of response and say

03:07.340 --> 03:12.410
OK I'm going to return this value from response.

03:12.410 --> 03:18.830
So now what's happening is I'm setting the value of my interface to mail to whatever is being returned

03:18.830 --> 03:20.350
here with in my file.

03:20.420 --> 03:21.350
My fun one.

03:21.470 --> 03:25.860
So let's refresh not and we see we get the total value that's put here.

03:26.210 --> 03:33.040
So let's make this even more interesting where we're just good output and update that value within here.

03:33.140 --> 03:36.230
And this is where we're going to make use of that variable.

03:36.230 --> 03:42.500
So we have before we could have just done this with the variable we could help the return values and

03:42.500 --> 03:44.510
we could put it within our HMO.

03:44.630 --> 03:50.540
But because we want to make use of this calculated value somewhere else it's great.

03:50.540 --> 03:54.910
It's great that we have the ability to utilize that with variable.

03:54.950 --> 03:58.570
So now we see that we've got that value here.

03:58.700 --> 04:07.190
And if I open this up and if I do my final one and a bunch of numbers together it's going to update

04:07.280 --> 04:12.460
whatever that output element whatever that return value is.

04:12.530 --> 04:15.320
And so from that to that output element.

04:15.410 --> 04:22.610
So I just want to talk about what we're doing with declaring variables in here because if I open up

04:23.750 --> 04:30.060
the depth and we saw that this variable was being returned back as response.

04:30.640 --> 04:35.840
But if I type in response I'm actually going to get responses not defined.

04:35.990 --> 04:49.100
And if I get a clear response and I give it a value of 66 and then I run my fine one and then now I

04:49.100 --> 04:54.910
try to see the value of response when you see that it's still 66.

04:54.980 --> 04:56.530
So it hasn't changed.

04:56.720 --> 05:03.950
And this has to do with local and Google school and this is an important part about functions and understanding

05:03.950 --> 05:07.880
how variables work within functions is really super important.

05:08.150 --> 05:18.560
So when I'm declaring a variable I can declare it as response and I can give it a value of 55 or something

05:18.560 --> 05:19.060
like that.

05:19.070 --> 05:20.950
And notice this is a string.

05:20.990 --> 05:30.560
And then over here if you want to make use of that because Javascript has dynamic types so it's actually

05:30.560 --> 05:35.000
automatically going to convert it into a number format because we're passing through the numbers here

05:35.240 --> 05:37.290
and then my response will be a number.

05:37.310 --> 05:39.200
So what do you think is going to happen here.

05:39.200 --> 05:45.860
Now that I'm declared response outside of a function and I'm still making use of that within the function.

05:45.860 --> 05:48.310
So when I refresh it it's 15.

05:48.410 --> 05:50.780
And let's see what the output is.

05:50.780 --> 05:55.950
Here's the response and we see that that value is still 15.

05:56.210 --> 05:59.900
So if I actually opti that

06:03.380 --> 06:13.480
using my phone 1 and Melas pass in some numbers there so there will be definitely much larger than 15.

06:13.490 --> 06:16.500
We see that now you find two response.

06:16.550 --> 06:18.930
We actually have that value being held.

06:19.220 --> 06:25.310
So what's happening within the code within the background here is that I'm declaring a response and

06:25.340 --> 06:28.620
this is now treated as a global variable.

06:28.760 --> 06:33.210
And within the function I have access to that variable.

06:33.500 --> 06:38.420
But if within the function itself I read to clear that variable.

06:38.420 --> 06:47.660
So if I declare it like this this is actually going to become local and it's allowing it to update here

06:47.760 --> 06:49.090
within my function.

06:49.090 --> 06:51.160
So let's try that one more time.

06:51.240 --> 06:56.380
Go to a console and we'll take a look at what we've got for response.

06:56.540 --> 06:58.400
And we see that we've got 55.

06:58.520 --> 07:04.580
So it didn't actually change even though we invoke the function because right now response is running

07:04.580 --> 07:06.080
locally within the function.

07:06.170 --> 07:11.450
And basically what that means is once it leaves the function it gets destroyed and it's only it only

07:11.450 --> 07:13.970
lives within the function itself.

07:13.970 --> 07:21.020
So if I want to make use of variables that I'm only using within the function as was the case here was

07:21.020 --> 07:27.570
creating response and I was returning it then I could declare the variable if I want to make use of

07:27.570 --> 07:30.820
a Google how you which I would side with the function.

07:30.830 --> 07:34.500
And I can grab it without doing the variable declaration.

07:34.580 --> 07:39.140
I can assign get used to it and reassign values to every time the function gets them.

07:39.140 --> 07:46.200
So now I want to try it for yourself because it's an important concept to get familiar with with Javascript.

07:46.340 --> 07:53.690
So I don't want you to do is to open up your editor create Bubel variable and give it a values you can

07:53.690 --> 07:58.660
call it a and give it a value of Hello.

07:58.850 --> 08:07.040
And then within the function create another variable called B and give that one a value of world and

08:07.040 --> 08:15.560
then combine hello world together output it and then also respond back with both of those values as

08:15.620 --> 08:18.290
one value within your output.

08:18.290 --> 08:22.070
So adding that returned value into the output.

08:22.160 --> 08:26.060
So go ahead and try to show you the solution coming up.

08:26.060 --> 08:32.910
So this challenge was to create another function and give this one a name my phone too.

08:32.960 --> 08:37.640
And we're not going to pass the arguments you always need to pass arguments but we are going to return

08:38.330 --> 08:39.750
combined value.

08:39.890 --> 08:48.040
And we also said that we want to set up a variable to give a name and call it hello.

08:48.410 --> 08:56.820
And then within a function what I want to do is set up a variable B and I want to combine the global

08:56.820 --> 08:59.750
value of A.

09:00.240 --> 09:05.430
And combine that with out in space as well.

09:05.430 --> 09:08.460
And then lastly it was combine it with world.

09:09.000 --> 09:13.000
So now B contains hello world and we'll return.

09:13.110 --> 09:14.390
Hello world.

09:14.700 --> 09:19.970
And then what we wanted to do was put to the inner h to metal that.

09:20.100 --> 09:21.190
Hello world.

09:21.300 --> 09:24.920
So after the function runs we can return back and put.

09:24.930 --> 09:26.080
Hello world.

09:26.250 --> 09:28.110
So let's start.

09:28.240 --> 09:31.820
Go ahead and do that and we'll see what happens.

09:31.820 --> 09:35.270
So if my find to call.

09:35.450 --> 09:37.340
And then afterwards we're going to

09:41.650 --> 09:47.320
I said we're going to put the return value of my phone to and to put it reached him.

09:47.320 --> 09:48.480
So let's try that out.

09:48.640 --> 09:49.480
And we see that we get.

09:49.480 --> 09:50.460
Hello world.

09:50.620 --> 09:51.570
Return back.

09:51.850 --> 09:58.150
So what's happened here is that we've grabbed the value of a which is global.

09:58.150 --> 10:06.040
We've set local value of b and then we've returned back B and then we've made use of it within our output

10:06.310 --> 10:08.200
by calling the function.

10:08.200 --> 10:12.950
So we're using that return value that's being held within the function.
