WEBVTT

00:00.600 --> 00:05.970
Welcome back in this lesson we are going to be looking at a block level declaration so we're going to

00:05.970 --> 00:13.470
be looking at brand new ones let in Kautz so previously within the earlier lessons we got really comfortable

00:13.470 --> 00:15.600
and familiar with are.

00:15.780 --> 00:23.910
And we could declare a variable and we saw that we could work with those variables within our Javascript

00:23.910 --> 00:24.520
code.

00:24.810 --> 00:33.570
So now with ESX there is something new and that is thinking of variables and Dick declarations of those

00:33.570 --> 00:37.360
values having more control over them.

00:37.390 --> 00:44.830
So now we have what's known as lexical scoping and Javascript and basically these declarations don't

00:44.830 --> 00:45.710
get hoisted.

00:45.790 --> 00:50.080
They only exist within the block of code that they are declared.

00:50.080 --> 00:59.420
So if I set up a constant and Konst instead of V-A are to declare variables we're going to use Konst

00:59.510 --> 01:08.940
So we're declaring B as constant and I'll show you how these are going to work within Chrome.

01:09.010 --> 01:14.780
And that's one of the good things about Crome is that it's fairly ESX friendly.

01:15.040 --> 01:21.070
And that's why one of the reasons why we like using Chrome within web developer courses is because it's

01:21.130 --> 01:26.750
really truly compatible with most of the latest versions and updates with Javascript.

01:26.800 --> 01:35.230
So I've set up three different variables here so I've got variable A which is just a VAR and variable

01:35.230 --> 01:39.780
B which is a constant and then variable c which is left.

01:39.790 --> 01:45.730
So let me show you what the differences between these and I'll do this one as hello world as well.

01:47.120 --> 01:51.950
So one of the things is that there's not a whole lot of difference because they're all being declared

01:51.950 --> 01:53.440
within the same block.

01:53.450 --> 01:58.220
So when I say that they're being declared in the same block they're being declared within the window

01:58.220 --> 02:01.520
block and there is a difference here.

02:01.550 --> 02:02.910
And the output here.

02:02.990 --> 02:04.570
So I do refresh it.

02:04.670 --> 02:09.530
If I go into the console we're going to be working quite a bit within the console and upcoming lessons.

02:09.620 --> 02:16.560
So if I do a b and c they don't actually look any different within our output here.

02:16.580 --> 02:22.220
So now let's take a look at the windows object so if I do window A I get hello world.

02:22.370 --> 02:25.250
And do you think with window B I'm going to get.

02:25.250 --> 02:26.150
Hello world.

02:26.240 --> 02:28.670
I don't actually get or constant.

02:28.730 --> 02:31.330
I don't actually get a defined value.

02:31.400 --> 02:34.070
And the same thing with window seat.

02:34.370 --> 02:38.840
And that's because they're not being held within the window object.

02:38.840 --> 02:43.390
So that's a big difference as to how these variables are being treated.

02:43.490 --> 02:49.800
And they're only available within the block that's been that it's been called within.

02:49.800 --> 02:55.290
So basically we've got more control now over the life cycle of these variables.

02:57.060 --> 03:02.370
Now there's a few other things that we can look out and there's a few other differences.

03:02.400 --> 03:09.840
So if I do a console log a and I'm trying to access it before it's been declared and if I refresh it

03:10.050 --> 03:11.730
we get undefined back.

03:11.820 --> 03:18.770
But what happens if I try to access variable b before it actually gets declared.

03:18.900 --> 03:26.850
So let me show you and we'll refresh it and we get an error because just like what we saw with within

03:26.940 --> 03:30.030
Babel that this is more strict.

03:30.040 --> 03:37.420
So we're javascript is less forgiving as before with earlier versions of javascript we had hoisting

03:37.470 --> 03:44.070
and we know that even though we hadn't yet declared a variable we could we could see that it's we're

03:44.100 --> 03:49.140
not going to throw an error because javascript is actually trying to work with it so it's doing hoisting

03:49.410 --> 03:55.550
of those values of those declarations before they're actually being declared within that code.

03:55.560 --> 04:02.760
So we've got to be a lot more careful with these newer block level declarations because they will throw

04:02.760 --> 04:05.180
errors if we try to do something like that.

04:05.430 --> 04:07.470
So something else that is.

04:07.470 --> 04:11.090
So there's a big Also big difference between Konst and let.

04:11.190 --> 04:15.590
So let's say for instance let me save this and refresh it.

04:15.840 --> 04:21.140
So we know what variable A we can reassign a new value to it.

04:21.300 --> 04:28.740
So I can do at any point I can go a equals new and then a return back new but what happens if I try

04:28.740 --> 04:31.130
to do B equals new.

04:31.470 --> 04:35.370
And remember Konst is short for constant.

04:35.520 --> 04:43.320
And basically that means that we can't reassign the value so once we've declared it as a constant value

04:43.620 --> 04:44.790
there's no changing it.

04:44.790 --> 04:47.880
There's no reader declaring that you can't change it.

04:47.880 --> 04:49.900
You can't assign a new value to it.

04:50.010 --> 04:53.800
It's going to throw an error and you're going to see that error here within the console.

04:54.000 --> 05:00.450
But when it comes to let We do have the ability to reassign the value.

05:00.450 --> 05:01.170
So let.

05:01.200 --> 05:07.580
In a way where it's similar to var where we do have that ability that we can update and change them.

05:07.650 --> 05:14.280
And also keeping in mind with Latt we can't try to use them before we've declared them as well.

05:16.960 --> 05:26.300
So let me show you a great example of where you can use these new declarations and earlier we got really

05:26.300 --> 05:28.240
familiar with the for loop.

05:28.250 --> 05:36.020
So now instead of setting a variable let's do let I equals zero and we're going to do this loop while

05:36.110 --> 05:40.190
I is less less than that.

05:40.250 --> 05:47.630
So while it is less than five and let's increment I and then add in something.

05:47.630 --> 05:54.390
So just console log out whatever the value of it is at the time so see how that works.

05:54.420 --> 06:01.920
So if I refreshed and I can see that I start out at zero so just as we would typically expect with a

06:01.920 --> 06:07.590
loop where we start with our initial value we increment it until it meets that condition and then it

06:07.590 --> 06:08.280
breaks.

06:08.310 --> 06:15.960
But what happens if I try to grab it outside I'm not able to actually see I after this block because

06:15.960 --> 06:20.510
anything with the curly brackets this is concerted or a block of code.

06:20.520 --> 06:28.920
So basically anything if we're trying to access outside just as we saw earlier with functions that whenever

06:28.920 --> 06:34.220
we're declaring a variable within a function then it's local to that function.

06:34.290 --> 06:40.500
And this is the same idea that we're declaring it locally within this block and we can't access it outside

06:40.500 --> 06:48.440
of the block where as if we change this back to a VAR and if I refresh the page and then I try to access

06:48.540 --> 06:50.040
I.

06:50.180 --> 06:52.210
I see that it's got a value of 5.

06:52.370 --> 07:01.440
So it still exists within my within my scope and it's not it hasn't been destroyed after we've used

07:01.440 --> 07:01.850
it.

07:01.980 --> 07:08.910
And this is one of the main reasons why we use these brand new formats because we need to get more control

07:08.910 --> 07:15.510
over the variables because sometimes whenever you are declaring variables you've got a lot of variables

07:15.510 --> 07:17.860
floating around within the global scope.

07:18.030 --> 07:22.480
And it's not always a great idea especially if you've got a really long program.

07:22.590 --> 07:25.970
So all these little short code snippets it really wouldn't matter.

07:25.980 --> 07:32.730
But if you've got a really long program then this is one of the main sources for errors is when we have

07:32.730 --> 07:41.150
problems with variables that are just floating around and that they are outside of their original scope

07:41.150 --> 07:45.130
or they have been used and they're still floating around within the global scale.

07:46.010 --> 07:53.990
And the other problem as well is that if we're writing into the global scope so that's where we saw

07:54.110 --> 07:56.500
that we can do window a.

07:56.540 --> 08:03.800
So that's sitting within the window global scope then we can also overwrite part of what is available

08:03.800 --> 08:05.160
within the window object.

08:05.300 --> 08:11.600
And we don't want to do that so we could technically if we wanted to we could grab one of these and

08:11.810 --> 08:14.060
we see that A is sitting within it.

08:14.180 --> 08:21.470
And if we've got some values we might inadvertently overwrite them by mistake and then we try to use

08:21.470 --> 08:26.660
them then they're not going to exist as they initially existed within the browser.

08:26.660 --> 08:32.510
So again there's a lot of room for error and you can see even the eye is still existing in there and

08:32.510 --> 08:34.410
it just builds and adds in there.

08:34.430 --> 08:39.770
And again if you have a really long program if you've got a lot of variables then it's going to clutter

08:39.770 --> 08:41.530
up that window object.

08:43.480 --> 08:50.470
So what I want you to do now is try this out create a Konst create a left variable and then also try

08:50.470 --> 08:54.660
to access it outside of the scope that you've declared to them.

08:54.670 --> 08:57.070
You can also do it with a conditional statement.

08:57.190 --> 09:01.790
So we can do something like if if a.

09:01.960 --> 09:09.370
And then if it exists then we can do let de inkwells

09:11.710 --> 09:21.050
works that will console log the.

09:21.280 --> 09:29.400
And then we can do an else statement and we can actually do the exact same thing so we could let D and

09:29.430 --> 09:41.340
equal not working and we'll console log out d and then at the end of this condition then let's try to

09:41.340 --> 09:42.590
console log.

09:42.720 --> 09:44.750
So what do you think is going to happen here.

09:44.840 --> 09:51.690
Well I was keeping in mind that we've declared them locally within the scope so that scope is the curly

09:51.690 --> 09:52.430
brackets.

09:52.470 --> 09:56.070
So both of these are locally done within.

09:56.340 --> 10:01.110
So what do you think is going to happen and will we refresh it if you said it's going to throw an error.

10:01.110 --> 10:03.750
You are correct because it is going to throw an error.

10:03.870 --> 10:08.290
So go ahead and open up your editor and try it for yourself.

10:08.430 --> 10:12.930
Create some let's Konst and build them add them into the local scopes.
