WEBVTT

00:01.520 --> 00:07.310
Welcome back in in this lesson we're going to be looking at objects and we saw earlier that an array

00:07.310 --> 00:10.760
is actually an object but it was a special type of object.

00:10.850 --> 00:16.670
And we also saw earlier that there's five primitive data types and Javascript and everything else is

00:16.670 --> 00:17.680
an object.

00:17.690 --> 00:25.070
So this is all about objects and objects also give us much like arrays the ability to hold multiple

00:25.070 --> 00:28.480
different pieces of data within one variable.

00:28.490 --> 00:30.950
So here we still have an error array.

00:31.070 --> 00:36.980
And I've left this in here just to give you a comparison to what the difference between an array and

00:37.070 --> 00:38.330
object is.

00:38.330 --> 00:46.310
So I set up an object we set up within our familiar format where we do V-A are so variable object because

00:46.360 --> 00:49.890
we've again using that same variable structure.

00:49.940 --> 00:54.560
And then on the right hand side is where we've got our different data type.

00:54.920 --> 01:03.080
So we know that javascript uses objects and almost everything in javascript is an object.

01:03.230 --> 01:05.900
So what exactly is an object.

01:05.930 --> 01:12.680
And if you look around in the real world outside of the computer we see that we've got a number of items

01:12.890 --> 01:14.500
that are sitting around.

01:14.660 --> 01:18.670
And these are all objects they've got a bunch of properties.

01:18.770 --> 01:26.630
So if we take for instance our car we know that a car has multiple properties and objects are defined

01:26.690 --> 01:28.750
with these curly brackets.

01:29.030 --> 01:34.140
So let's list some of the properties that we know about a car.

01:34.340 --> 01:43.640
So we know that a car will have a color and we can specify the color so maybe for instance this one

01:43.700 --> 01:44.720
is red.

01:44.720 --> 01:47.410
It would also have a make.

01:47.480 --> 01:50.580
So maybe this one is a Ford.

01:50.750 --> 01:57.870
We also have wheels so maybe it's got six wheels.

01:57.870 --> 02:00.880
Not sure what type of car and this is that's got six wheels.

02:01.170 --> 02:08.550
Well let's say for instance six wheels and we can see that we've got a number of associations to this

02:08.550 --> 02:16.740
car so we've got a color a make wheels and maybe or maybe better than wheels has doors.

02:16.930 --> 02:23.040
Clearly that's more of a common one sort of can at six doors or five doors or maybe five doors makes

02:23.040 --> 02:24.610
more sense.

02:24.690 --> 02:31.830
And then let's add one more value to it so you know we've got a make and we've got also a model for

02:31.830 --> 02:32.950
most cars.

02:33.120 --> 02:38.080
So maybe this is a Mustang because it's a Ford and Ford Mustangs.

02:38.160 --> 02:40.990
So it's a red mustang with five doors.

02:41.040 --> 02:45.150
And these are the properties that are available in this particular project.

02:45.360 --> 02:50.690
So let's log out this object and see what it looks like within the console.

02:50.700 --> 02:58.980
So go back here refreshed and we see that we've got all of these values now are associated to the object

02:58.980 --> 02:59.500
variable.

02:59.500 --> 03:05.790
The OPG variable and of course this variable you can call whatever you want as long as it just makes

03:05.790 --> 03:10.300
sense within the context of the content that you're outputting.

03:10.410 --> 03:17.780
So we see that the structure for objects is very similar to what we found within arrays.

03:17.940 --> 03:25.530
But instead of having indexes within the items we have what's called as paired values.

03:25.530 --> 03:30.520
So we have a name of the value and then we have the value of it.

03:30.600 --> 03:37.890
So a name separated by a colon and then each one of the properties is then separated by a comma.

03:37.980 --> 03:40.430
So much like what we did within the arrays.

03:40.530 --> 03:47.950
But it gives us more flexibility and actually makes our content more humanly readable whereas with arrays

03:47.970 --> 03:49.800
we have to rely on the indices.

03:49.800 --> 03:57.360
This time we've got actual words for the name that we can refer to and pull back those values.

03:57.450 --> 04:01.410
So a whole lot more readable and easier to work with.

04:01.410 --> 04:04.190
So this is one way to define objects.

04:04.260 --> 04:10.470
And just like arrays there is an alternative to defined objects which you might see as well but it's

04:10.470 --> 04:11.680
not as common.

04:11.700 --> 04:20.190
And really the literal way to define array is to define objects is the best way to go.

04:20.730 --> 04:27.930
But just in case you do encounter the constructor of the object constructor method I'll show you how

04:27.930 --> 04:28.780
to do that.

04:28.800 --> 04:37.200
Well let's just call this one object one OPG one and this time just like the arrays we have to declare

04:37.260 --> 04:41.920
we're creating a new object.

04:42.090 --> 04:45.000
So this is how we specify that new object.

04:45.070 --> 04:53.120
And now we can console log that object and then we don't have any contents in there yet.

04:53.280 --> 04:57.620
So we can console log though and that's perfectly valid.

04:58.560 --> 05:03.240
But really the big difference here is that formatting it this way.

05:03.270 --> 05:09.320
So you can still add items into that object so much like what we've added in here.

05:09.480 --> 05:17.940
We can construct and we can add additional values in here so g 1 and let's let's do the same thing that

05:17.940 --> 05:19.040
we did up there.

05:19.140 --> 05:24.670
So do color and equal it to red and then so on and so on.

05:24.810 --> 05:28.620
So we could have all of those values in a similar format.

05:28.620 --> 05:37.260
So B.J. one in your next list to make it forward so that we have some consistency.

05:37.490 --> 05:43.800
Let's refresh and we can see that we can build at that object within that same format but using it this

05:43.800 --> 05:48.740
way within that constructor method it doesn't perform as well in browsers.

05:48.870 --> 05:54.880
It's a lot more difficult to read and it's just there's more typing than the literal method.

05:54.930 --> 06:02.160
It's a literal method is the way to go and it's the most commonly used format for setting up options

06:02.160 --> 06:02.940
and Javascript

06:07.270 --> 06:11.320
so the next lesson I'm going to show you how to retrieve data.

06:11.510 --> 06:14.390
So what I want you to do before we start the next lesson.

06:14.390 --> 06:23.570
Open up your editor creates an object take a look around the room that you're in and actually do a description

06:23.660 --> 06:31.370
of one of the items that you see within the room and create an object out of that and put that information

06:31.430 --> 06:32.870
into the con..

06:32.960 --> 06:39.020
So the next lesson I'll show you how you can retrieve that information and we can retrieve specific

06:39.020 --> 06:44.100
pieces specific values that are contained within our object.

06:44.100 --> 06:45.230
I'll show you how to do that.

06:45.230 --> 06:45.860
Coming up.
