WEBVTT

00:00.900 --> 00:06.600
WELCOME BACK IN THIS is where things get more interesting because we're going to be looking at variables.

00:06.600 --> 00:11.370
So variables give us the ability to store data and recall it later.

00:11.370 --> 00:14.680
So earlier we saw how we created a bunch of strings.

00:14.760 --> 00:20.060
And every time we watch a recall of the string we had to go back and type it again.

00:20.220 --> 00:26.880
So this is very useful especially in programming because we want this dynamic ability in order to store

00:26.880 --> 00:33.070
data to manipulate that data and then recall it often within our programming.

00:33.240 --> 00:40.260
So this is what variables do and variables are one of the fundamentals of every programming language

00:40.530 --> 00:47.550
you need to be able to store that data and variables give us that container in order to store that data.

00:47.550 --> 00:57.420
So just like with algebra and where you're storing some type of value and let's say x is equal to something

00:57.630 --> 01:00.950
you do the same thing for variables you use.

01:01.220 --> 01:09.800
Are in order to declare the variable so that the syntax so that the system actually knows that you're

01:09.810 --> 01:12.600
actually declaring X as a variable.

01:12.600 --> 01:19.320
So all you have to do is place V-A are in front of the variable that you want to declare and then assign

01:19.410 --> 01:20.790
x value.

01:20.910 --> 01:25.000
And we're going to use the assignment operator so this is just an equal sign.

01:25.110 --> 01:32.050
And then whatever here is here on the right hand side is going to be the value of x.

01:32.070 --> 01:38.700
So let's give X a value of 5 and we see that we get a response back because we're not looking for a

01:38.700 --> 01:40.470
response quite yet.

01:40.470 --> 01:48.240
But now the interesting thing is when I type an X I get a value of five associated with it and that

01:48.240 --> 01:49.510
gets returned.

01:49.860 --> 01:53.660
And you're probably also wondering well where are the data types fit in.

01:53.820 --> 01:59.220
Because with javascript you don't actually have to define the data type.

01:59.220 --> 02:02.120
So we've got what's known as dynamic typing.

02:02.310 --> 02:12.120
And basically what this means is that if we've got a variable that's being declared as a number then

02:12.180 --> 02:15.490
that variable is actually going to be a number variable.

02:15.570 --> 02:21.960
And if we have it being declared as a string then why is going to be a string value.

02:22.170 --> 02:25.650
So we can also even switch between values.

02:25.710 --> 02:33.120
So once we've declared x we don't have to specify the R anymore whenever we want to reassign a value

02:33.120 --> 02:33.670
to it.

02:33.720 --> 02:36.930
And this happens very often as you're programming.

02:36.930 --> 02:40.590
You want the numbers to change the stored values to change.

02:40.590 --> 02:43.560
And this is where programming really gets a lot of power.

02:43.680 --> 02:51.450
So if I want to take X and for instance now I want X to be 10 I can recall X and X holds the value of

02:51.470 --> 02:55.920
10 and I could just as easily switch it into a string.

02:55.950 --> 03:05.460
So if I didn't want the numeric 10 and if I wanted character 10 then I can switch the data type.

03:05.610 --> 03:08.140
And javascript is fine with that.

03:08.130 --> 03:15.440
There's no problem with doing switching the different data types depending on what the variable is.

03:15.570 --> 03:22.690
And of course if you've got that within your program and you want to make sure that you're not switching

03:22.700 --> 03:26.170
it if your program always wants X to be Tamm.

03:26.230 --> 03:31.060
So this is something you've got to establish once you're creating your program but it is acceptable

03:31.060 --> 03:35.740
within javascript to switch between the different types.

03:35.740 --> 03:41.580
Now there are a few rules when you're creating variables and some of those rules I've got listed out

03:41.590 --> 03:44.080
here so it is case sensitive.

03:44.230 --> 03:47.650
So if I do an uppercase x we get this.

03:47.650 --> 03:55.030
X is not defined because we haven't initially defined and declared x at any point where the uppercase

03:55.080 --> 03:55.690
x.

03:55.690 --> 04:02.620
So if I do something like var X and now I type in the upper case X I've got that one and I've got the

04:02.620 --> 04:11.400
lower case X and I can even assign a value to the Upper Case 1 so I wanted 10 for uppercase and the

04:11.560 --> 04:15.100
written 10 for a lower case i can do that as well.

04:15.100 --> 04:22.260
So I just as easily I just make sure that when you are naming your variables they are case sensitive

04:22.270 --> 04:23.640
so watch for that.

04:23.680 --> 04:27.790
There's also some rules as to what the variable can be.

04:27.880 --> 04:33.290
So you can't call it variable and views are reserved words such as alert.

04:33.310 --> 04:35.070
So that's not going to work out.

04:35.260 --> 04:42.370
Another thing that you need to avoid as well is starting with a number because if you have a variable

04:42.370 --> 04:44.790
and you want to call it for.

04:44.860 --> 04:49.530
Notice that with javascript or should equal it to four.

04:49.540 --> 04:52.060
We see that with javascript.

04:52.060 --> 04:54.780
The numbers we don't need to code around them.

04:54.940 --> 05:01.120
So this is where we need to be mindful of the fact that javascript wouldn't know what for this is supposed

05:01.120 --> 05:05.950
to be if it's a variable for we can't if we're just recalling the number four.

05:06.040 --> 05:09.320
So make sure that you're not starting with a number.

05:09.400 --> 05:13.890
You can have something like variable x for if you want it to.

05:13.900 --> 05:18.370
So you can include those digits in there so we can equal that to four.

05:18.460 --> 05:21.860
And this is flying javascript's fine with this as well.

05:21.880 --> 05:30.370
You can also start variables with an underscore so we can name it underscore X and we'll just give it

05:30.490 --> 05:34.770
a value of 5 and we see that that's fine as well.

05:34.840 --> 05:41.070
We can also start a declaration or the variable name with a dollar sign.

05:41.200 --> 05:47.200
So this is often used as well where we've got the dollar sign and we've got that characters so we've

05:47.200 --> 05:51.400
got dollar sign X and it's that's the variable name.

05:51.400 --> 05:54.490
So you do have quite a bit of flexibility with names.

05:54.490 --> 06:03.520
Another thing to keep in mind whenever you're naming your variables typically we do use camel case.

06:03.520 --> 06:12.280
So basically what that means is if you've got a number of words such as my value we start the second

06:12.280 --> 06:19.240
word with an upper case and if we have another one my value name or something like that again we start

06:19.240 --> 06:23.960
that one with uppercase because you can't have spaces for your variable name.

06:23.980 --> 06:27.910
So if you have my value that's not going to work and we see that already.

06:27.910 --> 06:35.590
Chrome turns that black because it's not understanding that this is one name since we place that space

06:35.590 --> 06:36.030
in there.

06:36.130 --> 06:45.440
So avoid spaces as well and you're fine as well to make them really long if you want to be also mindful

06:45.440 --> 06:47.230
of the fact when you're recalling them.

06:47.390 --> 06:53.660
If you've got a really long character set that's defining the variable name then this could be a problem

06:53.750 --> 06:55.110
as well.

06:56.520 --> 07:02.400
And that's just simply from a useful perspective that you don't want to have something that's really

07:02.480 --> 07:03.140
one.

07:03.420 --> 07:06.770
So again we're just going to declare this one as five.

07:06.870 --> 07:14.720
And if you want to call that recall back we can recall that I can get the value returned back and the

07:14.720 --> 07:21.200
scope of the variables is going to be global of it globally available.

07:21.650 --> 07:27.200
And this is going to become even more evident why we're calling them global variables.

07:27.320 --> 07:33.260
When we come to functions and we start looking at local variables within functions so global variables

07:33.260 --> 07:38.900
basically mean that we can access this within functions as well and make use of the values that we're

07:38.900 --> 07:47.610
setting that we're declaring as var my value and we can pick that up within a function.

07:47.610 --> 07:51.900
So what I want you to do now is practice declaring variables.

07:52.050 --> 07:54.300
So this is really easy to do.

07:54.300 --> 07:55.330
Be creative.

07:55.350 --> 07:59.050
Start out try out some different names for variables.

07:59.070 --> 08:01.600
Keep them camel case.

08:01.710 --> 08:09.120
Make sure that you are case sensitive that you are aware that that case matters for the variable names

08:09.210 --> 08:15.230
and also make sure that you know starting with letters dollar with digits and that you're keeping two

08:15.230 --> 08:19.850
letters underscore and dollar sign and that you're not including any spaces in the name.

08:19.980 --> 08:21.630
And try it for yourself.

08:21.630 --> 08:29.520
So open up your browser console and try creating some variables and then recalling those values and

08:29.520 --> 08:38.470
then even try to overwrite those values with something new and then recalling those back as well.

08:38.470 --> 08:38.990
So.

08:39.040 --> 08:42.790
Re-establish a value for it and you can recall it.

08:43.050 --> 08:52.830
So try to have something like variable one and he will add to one variable to equal it to 2 and so on

08:53.370 --> 09:00.930
and just get yourself really comfortable with writing variables and familiar with the different rules

09:01.050 --> 09:04.250
associated with variables and then the next lesson.

09:04.260 --> 09:08.070
I'm going to show you even more with what we can do with variables.

09:12.200 --> 09:17.360
And it's really important to be comfortable with creating variables because these are going to be the

09:17.360 --> 09:24.080
very basic starting point for any application where you need to hold data and you need to hold values

09:24.290 --> 09:25.850
within those variables.
