WEBVTT

00:01.300 --> 00:04.900
This lesson we're going to look at what's new what functions.

00:04.960 --> 00:11.260
So earlier in the previous lessons clear section where we're looking at functions we actually introduced

00:11.260 --> 00:13.980
you to setting defaults for functions.

00:14.110 --> 00:16.990
So I can run through this again really quickly.

00:16.990 --> 00:22.330
So let's say for instance you've got a function and let's call it

00:25.920 --> 00:32.170
so a call it output message and it's going to expect a parameter of a message being passed in.

00:32.310 --> 00:37.430
And then what we want to do is let's console log a message value.

00:37.740 --> 00:44.600
So console log and whatever is contained within message we want to log that information out.

00:44.610 --> 00:51.150
So next in order to use that function Let's save that go back and refresh it.

00:51.150 --> 00:53.680
So let's you go ahead and use that function.

00:53.700 --> 00:59.030
So if we want to send a message we can do something like Hello.

00:59.380 --> 01:04.220
What happens if we actually forget to pass in our argument.

01:04.530 --> 01:06.060
And we call it like this.

01:06.060 --> 01:07.670
We just get undefined.

01:07.680 --> 01:13.440
So essentially this is not a really good outcome because sometimes you want to have a default value

01:13.440 --> 01:13.930
there.

01:13.980 --> 01:20.880
So every time someone is calling output message we want to return something to that user and that's

01:20.880 --> 01:22.910
where we can use that equal sign.

01:23.040 --> 01:24.730
So we could equal that too.

01:24.810 --> 01:26.450
And this is new with ESX.

01:26.460 --> 01:31.060
It works across a lot of browsers and that's why I went through it earlier as well.

01:31.260 --> 01:32.700
No value.

01:33.120 --> 01:41.280
So now whenever that gets called if we output message and we don't pass any parameters in there we get

01:41.280 --> 01:42.160
no value.

01:42.300 --> 01:50.740
So basically giving us the ability to do a default within a function so it's go back into our editor

01:50.800 --> 01:55.420
and I want to set up a default variable and set up a constant variable.

01:55.420 --> 01:58.970
And this one is going to be my output object.

01:59.260 --> 02:09.030
So we've been using this before where where we do the documents get element by id and then we grab that

02:09.090 --> 02:09.980
output object.

02:09.980 --> 02:15.910
So all of that content that's contained within this element we're grabbing it into the output object.

02:16.020 --> 02:19.350
And then a lot of times what we've done is we've simply output.

02:19.350 --> 02:25.590
So we've done output in or H T A male and then equal that to message.

02:25.590 --> 02:28.640
So this is something else that we could do as well.

02:28.740 --> 02:31.680
And this is incorporating constants into it.

02:31.680 --> 02:35.790
So now let's try output message and we're not going to pass any value.

02:35.910 --> 02:37.820
So we see that no value gets passed in there

02:42.020 --> 02:50.240
so we can also have multiple multiple default values as well and some of them could also even be if

02:50.240 --> 02:53.430
we want to call in a function or something like that.

02:53.450 --> 02:55.590
So let's call them a separate that out.

02:55.610 --> 03:03.370
So the next one and let's do a function here and we're going to show whatever value we've got in message

03:04.900 --> 03:09.860
so let's create a function that's going to show and this function will just be called so.

03:10.030 --> 03:16.700
And this one lets pass in we're not actually going to pass any values into the arguments and I assure

03:16.850 --> 03:19.510
you we can still pick up that information.

03:19.510 --> 03:24.230
So now with shole it's to console log.

03:24.250 --> 03:27.190
And we're going to output that content.

03:27.310 --> 03:33.660
So we have the ability to actually grab that content by using the keyword arguments.

03:34.000 --> 03:40.120
So this is something that's new within javascript now as well that we can't output.

03:40.270 --> 03:45.980
And we've got this default value here contained within as arguments.

03:45.990 --> 03:49.510
So let me show you what happens now when we look at arguments

03:52.510 --> 03:54.570
so let's do output message

03:58.290 --> 04:02.300
and let's pass in value there.

04:02.310 --> 04:04.140
So passen Hello world.

04:06.330 --> 04:12.310
And you see that we actually invoke the function and we output the function here within the whole world

04:12.630 --> 04:13.950
and we see that.

04:13.990 --> 04:19.250
So we're outputting Schull and so is actually passing arguments.

04:19.270 --> 04:25.530
And so even though we don't see it here within these parameters we're able to pick up those arguments.

04:25.650 --> 04:29.670
So if we had more than one argument that we were passing over to show.

04:29.820 --> 04:33.180
So let's say something else.

04:33.180 --> 04:36.070
So now we're passing a number of arguments there.

04:36.120 --> 04:39.260
We see that we can make use of them and we can pick those up.

04:39.390 --> 04:46.080
So let's refresh it and let's do the same thing where we pass over a message and this time it's just

04:46.080 --> 04:48.780
the one argument we've got all three of them there.

04:48.870 --> 04:53.340
And the first one here we're picking up from the value of message.

04:53.370 --> 05:00.240
So that's being taken and passed and to show as our first argument the next argument is blank and then

05:00.240 --> 05:01.810
the last one is new.

05:01.830 --> 05:03.340
So we've got them ordered.

05:03.360 --> 05:06.270
So what we can do as well is we can get the length.

05:06.420 --> 05:09.460
And this is going to work the same way as any array.

05:09.510 --> 05:12.330
So we can actually output that information.

05:12.330 --> 05:18.060
So if one output whatever the first argument is all we have to do is indicate that we're looking for

05:18.060 --> 05:18.950
the first one.

05:18.960 --> 05:22.990
So now let's try that again and this time we're actually outputting.

05:23.070 --> 05:25.220
Hello world.

05:25.230 --> 05:27.150
So let me show you another example.

05:27.150 --> 05:33.510
So another function and let's call this one my fun and we're not going to pass in any of the arguments

05:33.780 --> 05:36.590
or actually we are going to be expecting a bunch of arguments

05:42.980 --> 05:45.010
and let's console log.

05:45.130 --> 05:49.890
So all console log out the arguments object.

05:50.390 --> 05:56.720
And we're also going to console What does console log arguments for now and I'll show you something

05:56.720 --> 05:57.680
else.

05:57.680 --> 06:03.440
There's actually contents and information in there so we can grab that argument's length if you want

06:03.440 --> 06:06.290
to and make use of it within our Javascript.

06:06.290 --> 06:11.550
So we saw that that object had length and at a number of other parameters.

06:11.570 --> 06:19.280
So let's make use of that function so let's invoke that function and let's pass in some values.

06:22.000 --> 06:25.080
And let's try that and see what happens within the con..

06:25.090 --> 06:30.790
So we see that that first console log is outputting all of the arguments.

06:30.810 --> 06:32.810
So so putting one to three.

06:32.920 --> 06:37.770
So it's actually picking them up and it's not worrying about D and E because there's no values that

06:37.780 --> 06:39.200
are being passed in there.

06:39.280 --> 06:44.530
But when we look at the call e we can actually see that it was actually expecting 5.

06:44.620 --> 06:48.580
So it was expecting five different arguments to be passed in there.

06:48.580 --> 06:53.500
And it's actually got a listing of what we're expecting within my fun.

06:53.500 --> 06:55.760
We also have a name of the function.

06:55.810 --> 07:01.000
So if we want to return back the name of the function we can pick it up within the Cauley as well.

07:01.000 --> 07:04.270
So all of this information is contained within the object.

07:04.300 --> 07:07.220
And then lastly we also saw the length.

07:07.300 --> 07:12.470
So if we wanted to we could find out how many were expected.

07:12.490 --> 07:17.390
When we do so it's all contained within the arguments object.

07:17.500 --> 07:19.240
And that was the the

07:21.830 --> 07:25.970
and we can see how many were being expected within the call.

07:26.180 --> 07:28.400
So let's refresh that again now.

07:28.400 --> 07:29.910
So we're expecting 5.

07:29.930 --> 07:35.410
We've got three and we can do something with that within our code as well if needed.

07:36.850 --> 07:43.270
So what are you to do now pause the video and add in a condition they're checking to make sure that

07:43.510 --> 07:47.840
the length of arguments is equal to the ones that we're expecting.

07:47.890 --> 07:55.540
And if it's not then in the console what I want it to rate is how many arguments were actually missing

07:55.870 --> 07:58.810
and how many were expected and how many were missing so just right out.

07:58.810 --> 08:05.060
So for this instance we're missing two such that say missing two arguments.

08:05.260 --> 08:15.310
So add that into your code and I'll show you the solution coming up so our challenge was for this exercise

08:15.550 --> 08:24.310
was to pull back and out of condition here to see if the amount of if the length of the expected arguments

08:24.550 --> 08:29.680
was actually the ones that were passed in and if not then output an error into the con..

08:29.680 --> 08:30.920
So let's do that now.

08:31.060 --> 08:36.700
So the first thing we need to do is we need to check and see our condition and we know that we've got

08:36.760 --> 08:38.860
a number of values there.

08:38.860 --> 08:43.620
So we've got our length and this is the actual length of it.

08:43.630 --> 08:54.180
So if this length is greater than or it's greater than or equal to that we know that we're OK and it

08:54.180 --> 08:56.060
actually should just be equal to.

08:56.230 --> 09:02.530
So we could probably just get away with doing equal to.

09:02.760 --> 09:09.460
And now let's put our message so console log.

09:10.070 --> 09:12.880
OK.

09:13.030 --> 09:19.000
And if it's not then what we want to do is we want to output that there's an error.

09:19.000 --> 09:28.900
So let's do an else and let's console log and missing and then whatever number of arguments that we're

09:28.900 --> 09:29.540
missing.

09:29.620 --> 09:31.600
So we can add that in here as well.

09:31.600 --> 09:36.750
So it's simply that like that and update this to equal sign.

09:36.940 --> 09:40.750
So my guess and this one actually should be for us.

09:40.780 --> 09:47.150
So let's do the call the length minus the arguments length.

09:47.220 --> 09:50.010
So this one now should tell us how many were missing.

09:50.010 --> 09:51.050
Let's try that.

09:51.210 --> 09:58.300
And we see that we're missing three and or we're missing two.

09:58.350 --> 09:59.850
That was the three down here.

09:59.850 --> 10:03.600
That's the value of the third item in the array.

10:03.600 --> 10:06.400
So that was the other code that was interfering with that.

10:06.480 --> 10:14.460
But for now what we see is that we're actually missing two of them and this is the solution to using

10:14.520 --> 10:17.170
the arguments to determine how many are missing.

10:17.280 --> 10:22.560
And then if you're missing some you could always add in some logic within your application to take care

10:22.560 --> 10:26.330
of any issues that are coming up within your calculations.
