1
00:00:00,940 --> 00:00:05,940
Now, we do have nonâ€‘text content in our Product Catalog document.

2
00:00:05,940 --> 00:00:07,550
There are product images.

3
00:00:07,550 --> 00:00:10,840
So how can we extract them?

4
00:00:10,840 --> 00:00:16,440
This could be a bit tricky though, meaning it is not so straightforward.

5
00:00:16,440 --> 00:00:21,640
If you can remember, there are three product images in the first page.

6
00:00:21,640 --> 00:00:25,280
So let's say we want to extract all the images in the first

7
00:00:25,280 --> 00:00:28,840
page of the Product Catalog document.

8
00:00:28,840 --> 00:00:33,940
The first step would be to get the first page by calling the getPage method,

9
00:00:33,940 --> 00:00:37,340
passing in the pageIndex.

10
00:00:37,340 --> 00:00:40,640
Note that the page indexes start from 0,

11
00:00:40,640 --> 00:00:44,840
just like how array indexes start from 0.

12
00:00:44,840 --> 00:00:48,540
This means that if you want to get the first page,

13
00:00:48,540 --> 00:00:52,300
you will need to pass 0 to getPage method.

14
00:00:52,300 --> 00:00:55,790
The getPage method call is going to return the first

15
00:00:55,790 --> 00:00:58,540
page in the Product Catalog document,

16
00:00:58,540 --> 00:01:02,640
and then we can access the resources in this page by

17
00:01:02,640 --> 00:01:06,840
calling the getResources method on the page.

18
00:01:06,840 --> 00:01:08,640
A small note here,

19
00:01:08,640 --> 00:01:13,870
resources are the different types of content that can be present in the PDF,

20
00:01:13,870 --> 00:01:17,190
like images and other types of content.

21
00:01:17,190 --> 00:01:23,340
Among these resources, there can be external objects, like images.

22
00:01:23,340 --> 00:01:28,540
In the PDF file structure, these are known as XObjects.

23
00:01:28,540 --> 00:01:32,440
XObjext, or in other words, external object,

24
00:01:32,440 --> 00:01:36,390
is a way of _____ _____ elements in a PDF.

25
00:01:36,390 --> 00:01:44,050
In PDFBox, these XObjects are represented by the PDXObject class.

26
00:01:44,050 --> 00:01:47,620
PDXObjects come in different forms, for example,

27
00:01:47,620 --> 00:01:52,940
as PDFormXObjects and PDImageXObjects.

28
00:01:52,940 --> 00:01:58,620
PDFormXObject can be thought of as a top level XObject representation,

29
00:01:58,620 --> 00:02:06,340
whereas PDXImageXObject is a more specific representation for image objects.

30
00:02:06,340 --> 00:02:07,750
So in this case,

31
00:02:07,750 --> 00:02:13,900
it is possible to find out the ImageXObjects in the resource stream and access

32
00:02:13,900 --> 00:02:18,240
the images in the PDF page we are looking at through them.

33
00:02:18,240 --> 00:02:22,140
You will need to write a couple of lines of code to achieve this.

34
00:02:22,140 --> 00:02:27,230
Now, we have obtained the PDResources from the first page,

35
00:02:27,230 --> 00:02:32,520
so let's iterate through the XObject names of the resources by

36
00:02:32,520 --> 00:02:39,440
calling resources.getXObjectNames within a for loop.

37
00:02:39,440 --> 00:02:41,900
According to the PDF specification,

38
00:02:41,900 --> 00:02:46,400
everything in a PDF document has a COSName, so the

39
00:02:46,400 --> 00:02:50,050
XObjectNames are also in the form of a COSName.

40
00:02:50,050 --> 00:02:55,190
So we get the COSName of the XObject, and then by the name,

41
00:02:55,190 --> 00:03:02,940
we can retrieve each PDXObject from the page resources by calling getXObject,

42
00:03:02,940 --> 00:03:06,640
passing in the COSName.

43
00:03:06,640 --> 00:03:13,940
Let's assign it to a variable of type PDXObject named xObject.

44
00:03:13,940 --> 00:03:17,840
Now, we are in the process of extracting the images,

45
00:03:17,840 --> 00:03:23,640
so we need to find out if this particular xObject is an ImageXObject.

46
00:03:23,640 --> 00:03:26,140
So, using an if condition,

47
00:03:26,140 --> 00:03:34,440
we check if the XObject that we have is an instanceof PDImageXObject.

48
00:03:34,440 --> 00:03:40,940
And if so, we can cast the XObject in to a PDImageXObject,

49
00:03:40,940 --> 00:03:44,940
and then we have any ImageXObject.

50
00:03:44,940 --> 00:03:52,640
As you already know, in PDFBox, images are represented using PDImageXObjects.

51
00:03:52,640 --> 00:03:58,840
So now, you can access the image using this ImageXObject.

52
00:03:58,840 --> 00:04:02,640
So let's save the extracted image on the file system.

53
00:04:02,640 --> 00:04:06,940
For this, call the Image I/O's write method.

54
00:04:06,940 --> 00:04:12,940
We need to pass in the file path to it in the form of a file object.

55
00:04:12,940 --> 00:04:19,840
So first, specify the file path, like this, simply save the extracted

56
00:04:19,840 --> 00:04:23,740
images inside the images folder under resources.

57
00:04:23,740 --> 00:04:29,900
Let's give the image file a dynamic name, like this, and then call

58
00:04:29,900 --> 00:04:41,110
ImageIO.write, passing in the image itself by accessing the ImageXObjects image

59
00:04:41,110 --> 00:04:49,580
by calling getImage method and give the file format as jpg and the File object

60
00:04:49,580 --> 00:04:56,770
to represent the file in the file system, passing in the path to the File. We

61
00:04:56,770 --> 00:05:02,110
need to implement i's value to be able to generate dynamic file names inside the

62
00:05:02,110 --> 00:05:05,940
for loop, and now we are done.

63
00:05:05,940 --> 00:05:09,860
If you now call this method in the main class and then

64
00:05:09,860 --> 00:05:14,540
expand images folder under resources,

65
00:05:14,540 --> 00:05:20,840
you should see the extracted_images saved under it, like this.

66
00:05:20,840 --> 00:05:23,220
Though the process was a bit complicated,

67
00:05:23,220 --> 00:05:26,190
it actually is quite simple to be able to access

68
00:05:26,190 --> 00:05:29,440
multiple images in a PDF document.

69
00:05:29,440 --> 00:05:30,760
On the other hand,

70
00:05:30,760 --> 00:05:34,920
if you have a full page image on your PDF, extracting it

71
00:05:34,920 --> 00:05:37,740
would be much more simpler than these.

72
00:05:37,740 --> 00:05:41,520
There is the PDFRenderer class that is capable of rendering a

73
00:05:41,520 --> 00:05:46,040
PDF document into an AWT BufferedImage.

74
00:05:46,040 --> 00:05:50,250
So if you create a PDFRenderer, passing the PDDocument,

75
00:05:50,250 --> 00:05:53,340
and then call the renderImage method,

76
00:05:53,340 --> 00:05:55,590
you should be able to get the image as a BufferedImage.

77
00:05:55,590 --> 00:05:59,400
You need to pass in the pageIndex,

78
00:05:59,400 --> 00:06:03,630
which is 0 based. This is the page where you have the image

79
00:06:03,630 --> 00:06:06,330
that should be rendered, or in our case,

80
00:06:06,330 --> 00:06:08,040
extracted.

81
00:06:08,040 --> 00:06:13,360
And then simply, you can save the image object onto your file system in the

82
00:06:13,360 --> 00:06:20,770
usual way, as you saw earlier, by calling ImageIO.write method. You can try

83
00:06:20,770 --> 00:06:26,240
this out as well by simply following these steps and see what happens. With

84
00:06:26,240 --> 00:06:35,000
that, we come to an end up this demo. And in the next demo, you will see how to remove a page from the PDF.

