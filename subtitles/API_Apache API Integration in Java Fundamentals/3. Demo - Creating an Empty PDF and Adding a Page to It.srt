1
00:00:01,440 --> 00:00:03,410
Now let's get to work.

2
00:00:03,410 --> 00:00:06,400
Let's create the product catalog PDF.

3
00:00:06,400 --> 00:00:07,720
In this demo,

4
00:00:07,720 --> 00:00:11,970
you will see how to create an empty PDF document and then

5
00:00:11,970 --> 00:00:17,730
add a page to it. Open up your IDE with the Maven project

6
00:00:17,730 --> 00:00:20,240
that you configured earlier.

7
00:00:20,240 --> 00:00:22,340
Here it is.

8
00:00:22,340 --> 00:00:28,110
Let's first add a new Java class, ProductCatalog.

9
00:00:28,110 --> 00:00:36,530
In this, I'm going to add a method generateCatalog. Inside the method,

10
00:00:36,530 --> 00:00:41,060
we are going to add code to generate our catalog PDF. The

11
00:00:41,060 --> 00:00:46,140
first step is to create an empty PDF document.

12
00:00:46,140 --> 00:00:47,190
For that,

13
00:00:47,190 --> 00:00:52,840
we need to use the PDDocument class that resides in

14
00:00:52,840 --> 00:00:58,340
org.apache.pdfbox.pdmodel package.

15
00:00:58,340 --> 00:01:04,040
You can view this API document from this URL right here.

16
00:01:04,040 --> 00:01:11,640
So let's create an object named catalog of type PDDocument.

17
00:01:11,640 --> 00:01:12,620
Now,

18
00:01:12,620 --> 00:01:16,730
we need to ensure that this document object is closed

19
00:01:16,730 --> 00:01:19,940
after we are done with using it.

20
00:01:19,940 --> 00:01:23,140
We can do that in many ways,

21
00:01:23,140 --> 00:01:27,590
but let's use the try‑with‑resources syntax here. Surround

22
00:01:27,590 --> 00:01:32,940
the document object with try‑with‑resource.

23
00:01:32,940 --> 00:01:38,940
The resource PDDocument implements the AutoCloseable interface, as you can

24
00:01:38,940 --> 00:01:45,110
see here. So we can use the try with resource with it.

25
00:01:45,110 --> 00:01:48,780
And then we need to add a catch block to handle the

26
00:01:48,780 --> 00:01:51,940
IOException thrown by the resource.

27
00:01:51,940 --> 00:01:59,100
So let's add that. Next, let's go ahead and add a page to this

28
00:01:59,100 --> 00:02:08,240
PDDocuments. For that, create a page object from PDPage class.

29
00:02:08,240 --> 00:02:15,550
Let's call it firstPage. Then add the page to the document that you

30
00:02:15,550 --> 00:02:25,560
created by calling catalog.addPage, passing the page object to it. Now

31
00:02:25,560 --> 00:02:32,220
save the catalog PDF in the file system. For that, call the save method

32
00:02:32,220 --> 00:02:38,440
on the catalog document. You need to pass in the file name as a string

33
00:02:38,440 --> 00:02:41,020
to the save method.

34
00:02:41,020 --> 00:02:46,740
Let's save the catalog PDF file inside the resources folder under main,

35
00:02:46,740 --> 00:02:55,990
which I've already added. So let's give src/main/resources and the PDF

36
00:02:55,990 --> 00:03:04,270
file name as product_catalog.pdf, printing to the console that the

37
00:03:04,270 --> 00:03:10,900
document creation was successful. To see the outcome, I will call the

38
00:03:10,900 --> 00:03:22,000
generateCatalog method in the main class. Now run it, and you can see the empty PDF document created as you had expected.

