1
00:00:02,240 --> 00:00:06,840
Now let's see how to draw borders around some cells.

2
00:00:06,840 --> 00:00:08,940
When setting cell borders,

3
00:00:08,940 --> 00:00:12,640
you can use the setter methods for setting different border

4
00:00:12,640 --> 00:00:17,640
types and colors in the XSSFCellStyle class,

5
00:00:17,640 --> 00:00:20,040
which is one mechanism.

6
00:00:20,040 --> 00:00:23,860
You can also use the PropertyTemplate class in the

7
00:00:23,860 --> 00:00:31,440
org.apache.poi.ss.util package and call its drawBorders

8
00:00:31,440 --> 00:00:36,840
method to set border styles more conveniently.

9
00:00:36,840 --> 00:00:42,080
So let's use the PropertyTemplate class in this case. Let's say you

10
00:00:42,080 --> 00:00:48,050
want to draw borders around the Sub Total cell and the Total cell.

11
00:00:48,050 --> 00:00:54,660
So how can we do that using the PropertyTemplate class? Back in the

12
00:00:54,660 --> 00:00:56,840
generateQuotation method,

13
00:00:56,840 --> 00:01:06,440
create a PropertyTemplate object. Then call the drawBorders method on it.

14
00:01:06,440 --> 00:01:12,540
Now you need to pass in the cell range as the first parameter to this method.

15
00:01:12,540 --> 00:01:21,340
So, create a new CellRangeAddress object, passing in the starting row,

16
00:01:21,340 --> 00:01:28,240
the ending row, the starting column, and the ending column of the range.

17
00:01:28,240 --> 00:01:32,510
Let's check what this means in the Excel sheet.

18
00:01:32,510 --> 00:01:36,840
The Sub Total cell has a starting row index value of 12,

19
00:01:36,840 --> 00:01:41,840
where the row index starts with 0, and a starting column index

20
00:01:41,840 --> 00:01:46,290
7, counting from the left. And, of course,

21
00:01:46,290 --> 00:01:50,380
the ending row index would be the same, which is 12,

22
00:01:50,380 --> 00:01:54,530
since we are drawing the border around a single row, but ending

23
00:01:54,530 --> 00:01:59,080
column index would be 10, because we want to draw the border

24
00:01:59,080 --> 00:02:04,600
surrounding multiple cells. Then for the rest of the parameters

25
00:02:04,600 --> 00:02:11,940
you need to pass the border style, the color index, and the border extent.

26
00:02:11,940 --> 00:02:20,890
So let's pass BorderStyle.MEDIUM, IndexedColors.GREEN and its

27
00:02:20,890 --> 00:02:29,490
index, and BorderExtent.OUTSIDE, which means we want to draw

28
00:02:29,490 --> 00:02:34,240
the outside border of the cell.

29
00:02:34,240 --> 00:02:38,310
You can check the other available values in BorderStyle and

30
00:02:38,310 --> 00:02:46,230
BorderExtent enums. Then to draw a border around the Total cells, call

31
00:02:46,230 --> 00:02:51,050
the drawBorder method once again, passing in the correct cell range

32
00:02:51,050 --> 00:02:59,630
values and the rest of the values. Finally, apply the borders to the

33
00:02:59,630 --> 00:03:11,040
sheet by calling pt.applyBorders, passing in the sheet. Now Save and

34
00:03:11,040 --> 00:03:20,230
Run. And you can see the borders drawn around the Sub Total and Total

35
00:03:20,230 --> 00:03:24,740
cells like this.

36
00:03:24,740 --> 00:03:25,600
If you want,

37
00:03:25,600 --> 00:03:29,180
you can also use the setter methods available in the

38
00:03:29,180 --> 00:03:34,320
XSSFCellStyle class as well to set borders.

39
00:03:34,320 --> 00:03:38,170
In that case, you will need to call set Top, Left,

40
00:03:38,170 --> 00:03:44,840
Right, and Bottom border methods and their color method separately.

41
00:03:44,840 --> 00:03:49,540
This will end up you having to write more lines of code.

42
00:03:49,540 --> 00:03:51,560
It could be a bit tedious,

43
00:03:51,560 --> 00:03:58,010
depending on the amount of formatting that you will need to do. As a final

44
00:03:58,010 --> 00:04:02,140
note before we conclude the discussion on cell styling,

45
00:04:02,140 --> 00:04:05,980
consider using cell properties when you want to work

46
00:04:05,980 --> 00:04:10,140
with styles in a more versatile manner.

47
00:04:10,140 --> 00:04:19,340
This is available in org.apache.poi.ss.util.CellUtil class.

48
00:04:19,340 --> 00:04:23,940
You can call the setCellStyleProperties method of this class,

49
00:04:23,940 --> 00:04:30,410
passing in the cell object and a HashMap of properties.

50
00:04:30,410 --> 00:04:37,240
The HashMap has a key of String and a value of Object.

51
00:04:37,240 --> 00:04:40,840
Here is an example of how you can use it.

52
00:04:40,840 --> 00:04:45,420
You can specify a HashMap with a String key and Object value.

53
00:04:45,420 --> 00:04:50,570
Then put all the required styles that you would want to

54
00:04:50,570 --> 00:04:54,840
apply to multiple cells into the map.

55
00:04:54,840 --> 00:04:59,950
Then call the setCellStyleProperties method, passing in the required

56
00:04:59,950 --> 00:05:05,220
cell to be styled and the properties map that consists of the styles

57
00:05:05,220 --> 00:05:15,000
that need to be added to the cell. This can help you to better manage your cell styles.

