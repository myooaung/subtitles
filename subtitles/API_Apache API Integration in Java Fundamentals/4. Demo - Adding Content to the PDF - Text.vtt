WEBVTT
1
00:00:01.240 --> 00:00:05.440
Now it's time to add content to the product catalog.

2
00:00:05.440 --> 00:00:08.840
First, we need to add a heading to it.

3
00:00:08.840 --> 00:00:15.040
Then, add the productive images followed by the features.

4
00:00:15.040 --> 00:00:18.940
But before adding this content to the PDF page,

5
00:00:18.940 --> 00:00:23.440
you should understand the PDF coordinate system.

6
00:00:23.440 --> 00:00:29.280
The space in a PDF page is measured using PDF units.

7
00:00:29.280 --> 00:00:39.340
The PDF specification defines PDF units as 1 inch equals to 72 PDF units.

8
00:00:39.340 --> 00:00:48.640
An A4‑sized page is 8.3 inches wide and 11.7 inches in height.

9
00:00:48.640 --> 00:00:51.410
When converted to PDF units,

10
00:00:51.410 --> 00:01:00.840
it approximately has a width of 598 PDF units and a height of 842 PDF units.

11
00:01:00.840 --> 00:01:03.940
The origin of the PDF document, or 0,

12
00:01:03.940 --> 00:01:10.490
0 coordinate, is in the lower‑left corner of the document.

13
00:01:10.490 --> 00:01:17.330
The y‑coordinate increases upwards from the origin and the

14
00:01:17.330 --> 00:01:22.340
x‑coordinate increases to the right from the origin.

15
00:01:22.340 --> 00:01:27.440
Having said that, let's start adding content to the PDF page.

16
00:01:27.440 --> 00:01:31.740
First, we need to add a heading to the page.

17
00:01:31.740 --> 00:01:37.300
To do that, we need to use the PDPageContentStream class.

18
00:01:37.300 --> 00:01:41.840
Let's create a PDPageContentStream object,

19
00:01:41.840 --> 00:01:51.500
passing in the PDF document, catalog, and the first page to it.

20
00:01:51.500 --> 00:01:51.920
Now,

21
00:01:51.920 --> 00:01:57.440
there are different ways in which you can create the content stream. For that,

22
00:01:57.440 --> 00:02:02.440
you can use the different overloaded constructors.

23
00:02:02.440 --> 00:02:08.110
The stream needs to be closed when it's done its job. So wrap it

24
00:02:08.110 --> 00:02:14.170
up around try‑with‑resources. Now the text content should be

25
00:02:14.170 --> 00:02:20.960
written between beginText and endText method calls. So, add

26
00:02:20.960 --> 00:02:29.140
content.beginText and content.endText.

27
00:02:29.140 --> 00:02:30.740
Between these,

28
00:02:30.740 --> 00:02:38.870
we will add our text content. To specify the font that we want to use, let's

29
00:02:38.870 --> 00:02:45.780
call the setFont method on the content stream, content, passing in the type

30
00:02:45.780 --> 00:02:52.040
of font. PDFBox has a set of 14 standard fonts,

31
00:02:52.040 --> 00:02:57.800
and they are defined as constants in PDType1Font class,

32
00:02:57.800 --> 00:03:07.940
which can be found inside org.apache.pdfbox.pdmodel.font package.

33
00:03:07.940 --> 00:03:15.470
Let's use Helvetica. So do PDType1Font.HELVETICA. Keep the font

34
00:03:15.470 --> 00:03:23.650
size as 16 because this is the heading. Now,

35
00:03:23.650 --> 00:03:25.600
before we add the heading,

36
00:03:25.600 --> 00:03:30.090
we need to position it by giving the x and y‑coordinates. For

37
00:03:30.090 --> 00:03:34.830
this, we call the method newLineAtOffset on the content

38
00:03:34.830 --> 00:03:40.540
stream, passing in values for x and y.

39
00:03:40.540 --> 00:03:53.720
I'm giving x as 30 and y as 750. What does this mean? Well, it means that we

40
00:03:53.720 --> 00:03:59.800
are going to start writing the heading at 30 units from the x‑axis to the

41
00:03:59.800 --> 00:04:05.040
right and 750 units from the y‑axis to the top,

42
00:04:05.040 --> 00:04:09.540
which is approximately at this position.

43
00:04:09.540 --> 00:04:14.750
Then, to add the heading, call the showText method on the content

44
00:04:14.750 --> 00:04:22.340
stream and give the text as FURNITURE ‑ CHAIRS.

45
00:04:22.340 --> 00:04:26.790
If you save and run the application now, you can see the heading

46
00:04:26.790 --> 00:04:31.440
appearing at the top of the page like this.

47
00:04:31.440 --> 00:04:42.000
You can try changing the position of the heading text by changing the x and y values in newLineAtOffset method.

