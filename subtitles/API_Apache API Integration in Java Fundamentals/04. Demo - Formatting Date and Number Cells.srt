1
00:00:01,540 --> 00:00:05,340
We are going to see how to add formatting and styling

2
00:00:05,340 --> 00:00:08,240
to cells in the quotation document,

3
00:00:08,240 --> 00:00:15,480
using the XSSFCellStyle class. We will format the date

4
00:00:15,480 --> 00:00:19,820
cell, number cells, align cell content,

5
00:00:19,820 --> 00:00:24,940
color cells, and draw borders around cells.

6
00:00:24,940 --> 00:00:26,970
But before jumping into the demo,

7
00:00:26,970 --> 00:00:32,440
let's have a look at the XSSFCellStyle class and its methods.

8
00:00:32,440 --> 00:00:42,710
This class resides in the org.apache.poi.xssf.usermodel package.

9
00:00:42,710 --> 00:00:45,640
There are a bunch of methods in this class,

10
00:00:45,640 --> 00:00:50,940
but you'll find yourself using these methods most of the time.

11
00:00:50,940 --> 00:00:55,280
The setDataFormat method will set the different cell formats like

12
00:00:55,280 --> 00:01:01,460
date, number, and etc., the setAlignment method to set the horizontal

13
00:01:01,460 --> 00:01:06,690
alignment, and the setVerticalAlignment method, of course, to set the

14
00:01:06,690 --> 00:01:11,670
vertical alignment, and also, the setFillBackgroundColor and

15
00:01:11,670 --> 00:01:15,540
setFillForegroundColor methods.

16
00:01:15,540 --> 00:01:20,270
It should be noted that both these methods are used to set the field or,

17
00:01:20,270 --> 00:01:23,240
in other words, the background color,

18
00:01:23,240 --> 00:01:28,240
even though the latter is named as foreground color.

19
00:01:28,240 --> 00:01:30,690
When using both these methods,

20
00:01:30,690 --> 00:01:34,320
the setFillPattern method should also be added,

21
00:01:34,320 --> 00:01:37,240
passing in the fill pattern type.

22
00:01:37,240 --> 00:01:41,140
You will see more about them in the demo.

23
00:01:41,140 --> 00:01:46,120
You can also find a bunch of setter methods to set different border

24
00:01:46,120 --> 00:01:53,240
types and colors as well in the XSSFCellStyle class.

25
00:01:53,240 --> 00:02:00,440
So, for specifying the cell format, you'll be using the setDataFormat method.

26
00:02:00,440 --> 00:02:06,040
You will need to pass in the format as an int or a short value.

27
00:02:06,040 --> 00:02:11,410
You can find the builtâ€‘in formats inside the BuiltinFormats class that

28
00:02:11,410 --> 00:02:18,840
reside inside org.apache.poi.ss.usermodel package.

29
00:02:18,840 --> 00:02:24,100
It defines formats as strings with their corresponding numeric values.

30
00:02:24,100 --> 00:02:27,140
More about it in the demo.

31
00:02:27,140 --> 00:02:28,550
Alternatively,

32
00:02:28,550 --> 00:02:33,700
you can use the XSSFDataFormat class to specify the formats

33
00:02:33,700 --> 00:02:38,440
as strings or as numeric values as well.

34
00:02:38,440 --> 00:02:42,890
Go back to the addQuoteDetails method in the Quotation class.

35
00:02:42,890 --> 00:02:47,640
Let's format the cell that has the quotation date as a date cell.

36
00:02:47,640 --> 00:02:53,440
For that, first, you'll need to create a CellStyle object on the workbook.

37
00:02:53,440 --> 00:02:59,540
Let's call it dateCellStyle.

38
00:02:59,540 --> 00:03:05,540
Next, call the setDataFormat method on it.

39
00:03:05,540 --> 00:03:11,940
So what value are we supposed to pass to this? As I said before,

40
00:03:11,940 --> 00:03:19,040
you can refer to the BuiltinFormats class to find out the available formats.

41
00:03:19,040 --> 00:03:24,570
Let's say we want to use this date format. So you can call the static

42
00:03:24,570 --> 00:03:30,540
method, passing in the string representation of the format.

43
00:03:30,540 --> 00:03:38,840
So back in the code, let's call that method and pass in the format string.

44
00:03:38,840 --> 00:03:43,800
Now you need to set the style that you created to the date cell by

45
00:03:43,800 --> 00:03:52,540
calling setCellStyle method on it, passing in the style.

46
00:03:52,540 --> 00:04:00,940
Now run the application. And you can see that the date

47
00:04:00,940 --> 00:04:04,010
cell value is now formatted as a date,

48
00:04:04,010 --> 00:04:11,050
according to the format that we specified. You can also use another

49
00:04:11,050 --> 00:04:17,530
mechanism to set the data format, that is by creating a XSSFDataFormat

50
00:04:17,530 --> 00:04:23,140
object and calling its getFormat method for obtaining a format as a

51
00:04:23,140 --> 00:04:27,740
short value to be passed to the method.

52
00:04:27,740 --> 00:04:29,440
To do that, first,

53
00:04:29,440 --> 00:04:37,240
you need to create a XSSFCreationHelper object like this on the

54
00:04:37,240 --> 00:04:42,910
workbook. Then, call the createDataFormat method on it, and you'll get a

55
00:04:42,910 --> 00:04:49,500
XSSFDataFormat object on which you can call the getFormat method,

56
00:04:49,500 --> 00:04:55,470
passing in the string format that you want. Here, you can even pass in

57
00:04:55,470 --> 00:04:58,840
your own custom format like this.

58
00:04:58,840 --> 00:05:05,940
Let's see the outcome of this by running.

59
00:05:05,940 --> 00:05:13,540
As you can see, the date is formatted in the format specified.

60
00:05:13,540 --> 00:05:18,130
We can also format the price cell and quota cells with a

61
00:05:18,130 --> 00:05:22,940
number format by following the same procedure.

62
00:05:22,940 --> 00:05:27,910
So, here we can create a new XSSFCellStyle named

63
00:05:27,910 --> 00:05:32,540
priceCellStyle. Set the data format,

64
00:05:32,540 --> 00:05:37,330
once again, referring to the BuiltinFormats class to look

65
00:05:37,330 --> 00:05:44,440
for a format. Let's use this format.

66
00:05:44,440 --> 00:05:49,740
So pass it like this into the setDataFormat method.

67
00:05:49,740 --> 00:06:02,040
Apply the style to the required cells, product price, total, and subTotal.

68
00:06:02,040 --> 00:06:15,000
Run it, and you can see that the set cell values are formatted in the specified number format.

