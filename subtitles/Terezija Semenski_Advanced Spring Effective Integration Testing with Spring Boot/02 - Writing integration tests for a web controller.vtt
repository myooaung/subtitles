WEBVTT
1
00:00:00.000 --> 00:00:01.001
- [Instructor] Let's get started

2
00:00:01.001 --> 00:00:04.009
by writing a test for HTTP controller.

3
00:00:04.009 --> 00:00:08.001
We will create a new student controller test.

4
00:00:08.001 --> 00:00:09.002
We are going to test

5
00:00:09.002 --> 00:00:11.005
if we can correctly make a request

6
00:00:11.005 --> 00:00:12.007
to students service

7
00:00:12.007 --> 00:00:15.006
and get the response we expect.

8
00:00:15.006 --> 00:00:17.003
We need to assert certain things

9
00:00:17.003 --> 00:00:20.002
about the shape of the response.

10
00:00:20.002 --> 00:00:25.009
First, let's create student controller test class.

11
00:00:25.009 --> 00:00:29.004
A simple unit test will not cover the HTTP layer

12
00:00:29.004 --> 00:00:31.003
so we need to bring Spring Boot

13
00:00:31.003 --> 00:00:34.005
to do HTTP magic for us.

14
00:00:34.005 --> 00:00:36.001
We could use Spring Boot test

15
00:00:36.001 --> 00:00:39.005
but with web MVC test slides

16
00:00:39.005 --> 00:00:41.007
Spring fires up an application context

17
00:00:41.007 --> 00:00:44.009
that contains only the beans needed

18
00:00:44.009 --> 00:00:47.006
for testing a web controller.

19
00:00:47.006 --> 00:00:50.003
These beans will evaluate the annotations

20
00:00:50.003 --> 00:00:54.002
that would be ignored by simple unit test.

21
00:00:54.002 --> 00:00:56.004
We will use mock MVC

22
00:00:56.004 --> 00:00:58.009
Spring's MVC test braver

23
00:00:58.009 --> 00:01:01.002
to perform HTTP requests

24
00:01:01.002 --> 00:01:02.009
on the web in-points

25
00:01:02.009 --> 00:01:05.004
inside our mock web environment.

26
00:01:05.004 --> 00:01:06.007
Since the mock MVC bean

27
00:01:06.007 --> 00:01:08.006
is loaded into the context

28
00:01:08.006 --> 00:01:14.003
we will be able to simply auto wire it for our use.

29
00:01:14.003 --> 00:01:15.008
We will name our method

30
00:01:15.008 --> 00:01:23.005
get student for saved student is returned.

31
00:01:23.005 --> 00:01:25.002
As we make our request

32
00:01:25.002 --> 00:01:27.009
by calling mock MVC perform

33
00:01:27.009 --> 00:01:31.009
with get method to students end point

34
00:01:31.009 --> 00:01:41.003
we expect that HTTP status will be okay.

35
00:01:41.003 --> 00:01:43.000
Body will contain Jason

36
00:01:43.000 --> 00:01:46.002
for which we can use Jason path.

37
00:01:46.002 --> 00:01:47.006
We want to prove

38
00:01:47.006 --> 00:01:50.005
that Jason will contain attribute ID

39
00:01:50.005 --> 00:01:52.001
with value one,

40
00:01:52.001 --> 00:01:54.007
name equal to Mark

41
00:01:54.007 --> 00:02:01.003
and will contain attribute grade with value 10.

42
00:02:01.003 --> 00:02:02.003
Running the test

43
00:02:02.003 --> 00:02:04.009
should give us 404 status

44
00:02:04.009 --> 00:02:08.000
since we haven't implemented the controller yet.

45
00:02:08.000 --> 00:02:12.005
Let's run our test.

46
00:02:12.005 --> 00:02:14.003
There is no end point to talk to.

47
00:02:14.003 --> 00:02:16.007
So let's create an end point.

48
00:02:16.007 --> 00:02:19.006
We will create the class student controller

49
00:02:19.006 --> 00:02:23.002
and annotate it with rest controller.

50
00:02:23.002 --> 00:02:25.002
First thing we need to take care of

51
00:02:25.002 --> 00:02:26.007
is to create new method

52
00:02:26.007 --> 00:02:30.007
get student that accepts ID as parameter

53
00:02:30.007 --> 00:02:33.006
and returns a student.

54
00:02:33.006 --> 00:02:35.006
We will return now for now.

55
00:02:35.006 --> 00:02:37.009
We also need to annotate our method

56
00:02:37.009 --> 00:02:39.007
with get mapping

57
00:02:39.007 --> 00:02:42.000
and add students end point

58
00:02:42.000 --> 00:02:45.002
that accepts ID as a path variable

59
00:02:45.002 --> 00:02:49.002
and maps it to long ID parameter.

60
00:02:49.002 --> 00:02:54.003
Let's rerun our test.

61
00:02:54.003 --> 00:02:55.008
As we can see right now

62
00:02:55.008 --> 00:02:58.004
the controller is handling the request

63
00:02:58.004 --> 00:03:00.002
but is returning a null.

64
00:03:00.002 --> 00:03:02.001
For every failure we get,

65
00:03:02.001 --> 00:03:04.002
we have to do minimal code changes

66
00:03:04.002 --> 00:03:07.002
that make the next assertion go green

67
00:03:07.002 --> 00:03:08.007
because this is a test slide

68
00:03:08.007 --> 00:03:11.004
where we easily did only the web tier

69
00:03:11.004 --> 00:03:12.008
from everything else.

70
00:03:12.008 --> 00:03:14.006
The collaborating object

71
00:03:14.006 --> 00:03:17.004
student service was not available.

72
00:03:17.004 --> 00:03:20.007
We need to provide that object as a mock.

73
00:03:20.007 --> 00:03:24.001
So we are going to add student service

74
00:03:24.001 --> 00:03:28.007
and annotate it with a mock bean annotation

75
00:03:28.007 --> 00:03:30.005
and mock its behavior.

76
00:03:30.005 --> 00:03:32.002
The way mock bean works

77
00:03:32.002 --> 00:03:34.001
is it try to find any bean

78
00:03:34.001 --> 00:03:37.004
in the application context of its type.

79
00:03:37.004 --> 00:03:39.008
If it exists, it will replace it.

80
00:03:39.008 --> 00:03:42.003
If it doesn't exist, it will add it.

81
00:03:42.003 --> 00:03:45.004
Given students service dot

82
00:03:45.004 --> 00:03:49.003
get student by ID

83
00:03:49.003 --> 00:03:50.007
for any long

84
00:03:50.007 --> 00:03:54.004
will return a new student

85
00:03:54.004 --> 00:03:57.009
with ID one,

86
00:03:57.009 --> 00:04:00.000
name Mark

87
00:04:00.000 --> 00:04:04.005
and grade 10.

88
00:04:04.005 --> 00:04:06.006
This test would still fail.

89
00:04:06.006 --> 00:04:10.001
We are not using student service in our controller

90
00:04:10.001 --> 00:04:12.007
so let's go ahead and use it.

91
00:04:12.007 --> 00:04:17.000
Let's add student service bean.

92
00:04:17.000 --> 00:04:20.006
Keep in mind all this favor constructor injection

93
00:04:20.006 --> 00:04:22.004
over filled injection.

94
00:04:22.004 --> 00:04:25.002
Therefore, I will make this dependency

95
00:04:25.002 --> 00:04:27.009
private final

96
00:04:27.009 --> 00:04:31.008
and we need to invoke get student by ID method

97
00:04:31.008 --> 00:04:35.002
which returns a student.

98
00:04:35.002 --> 00:04:37.009
Let's rerun our test

99
00:04:37.009 --> 00:04:39.008
and there you have it.

100
00:04:39.008 --> 00:04:42.000
We got our green test.

