WEBVTT
1
00:00:00.005 --> 00:00:03.008
- [Instructor] The code and tests tends to be disorganized.

2
00:00:03.008 --> 00:00:06.004
Some mocks here and there, interleaved

3
00:00:06.004 --> 00:00:09.005
with assertions and test method calls.

4
00:00:09.005 --> 00:00:12.009
Let's look at the given-when-then methodology

5
00:00:12.009 --> 00:00:16.000
with BDDMockito and AssertJ

6
00:00:16.000 --> 00:00:18.007
to create human readable tests.

7
00:00:18.007 --> 00:00:21.004
Given-when-then methodology arrived

8
00:00:21.004 --> 00:00:26.003
from a very popular AGL development process called BDD

9
00:00:26.003 --> 00:00:29.004
or behavior-driven development.

10
00:00:29.004 --> 00:00:33.006
BDD, which emerged from TDD, brings to the table

11
00:00:33.006 --> 00:00:36.005
a human friendly style of writing test

12
00:00:36.005 --> 00:00:39.000
scenarios by structuring the test

13
00:00:39.000 --> 00:00:40.009
into three parts.

14
00:00:40.009 --> 00:00:43.005
Given is where we put our preconditions

15
00:00:43.005 --> 00:00:46.002
and requirements for this use case.

16
00:00:46.002 --> 00:00:49.003
When is the action that we want to test.

17
00:00:49.003 --> 00:00:53.005
Usually this involves calling no more than one or two lines

18
00:00:53.005 --> 00:00:54.006
of code.

19
00:00:54.006 --> 00:00:58.003
Then is used to verify what should happen

20
00:00:58.003 --> 00:01:01.001
after the execution of the action.

21
00:01:01.001 --> 00:01:03.007
It is represented usually by assertions

22
00:01:03.007 --> 00:01:08.003
to more classes and validation of returned results.

23
00:01:08.003 --> 00:01:11.005
This brings more clarity in our tests

24
00:01:11.005 --> 00:01:15.007
as we are following a natural language that is easy to read

25
00:01:15.007 --> 00:01:17.008
not only by developers

26
00:01:17.008 --> 00:01:20.005
but also by business users.

27
00:01:20.005 --> 00:01:23.008
Unlike standard Mockito, which uses when alias

28
00:01:23.008 --> 00:01:26.005
to configure behavior of a mock.

29
00:01:26.005 --> 00:01:31.009
BDDMockito provides us with a more elegant alias given,

30
00:01:31.009 --> 00:01:36.006
which integrates nicely with a given part of BDD style test.

31
00:01:36.006 --> 00:01:39.003
Another library that we are going to use

32
00:01:39.003 --> 00:01:41.006
in our tests is the AssertJ.

33
00:01:41.006 --> 00:01:44.003
But why should you care about AssertJ

34
00:01:44.003 --> 00:01:48.001
if J unit comes with assertions out of the box?

35
00:01:48.001 --> 00:01:51.008
Actually JUnit assertions are quite limited

36
00:01:51.008 --> 00:01:54.000
to a few basic scenarios

37
00:01:54.000 --> 00:01:56.008
and lead to confusion when reading them.

38
00:01:56.008 --> 00:02:00.005
For example, a common mistake that many developers

39
00:02:00.005 --> 00:02:05.003
still make is mixed up the expected with the actual value.

40
00:02:05.003 --> 00:02:09.006
Compare that to a AssertJ which provides a much more natural

41
00:02:09.006 --> 00:02:15.005
and fluent API, AssertJ provides a rich set of assertions,

42
00:02:15.005 --> 00:02:20.008
truly helpful error messages, improves test code readability

43
00:02:20.008 --> 00:02:24.000
and is designed to be super easy to use.

44
00:02:24.000 --> 00:02:28.001
To highlight some of the features describing assertions,

45
00:02:28.001 --> 00:02:29.009
field by field comparison,

46
00:02:29.009 --> 00:02:33.007
iterable, araya assertions, capture and then assert

47
00:02:33.007 --> 00:02:37.004
on a throwable, which can be expressed by Alonda.

48
00:02:37.004 --> 00:02:42.005
Note that a AssertJ also comes with BDD friendly alias.

49
00:02:42.005 --> 00:02:45.007
Like BDDMockito has called then,

50
00:02:45.007 --> 00:02:48.007
which we will use instead of assertThat.

51
00:02:48.007 --> 00:02:51.006
The adoption of BDDMockito together

52
00:02:51.006 --> 00:02:56.000
with AssertJ provides us with a powerful feature set

53
00:02:56.000 --> 00:02:59.004
that can help us reduce boilerplate code

54
00:02:59.004 --> 00:03:03.000
and write more readable verification called blocks.

