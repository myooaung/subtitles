WEBVTT
1
00:00:00.006 --> 00:00:03.000
- [Instructor] Spring Boot comes with some great features

2
00:00:03.000 --> 00:00:05.003
to help with error handling.

3
00:00:05.003 --> 00:00:08.008
But it is left to the developer to use those features

4
00:00:08.008 --> 00:00:12.007
the three the exceptions and return meaningful responses

5
00:00:12.007 --> 00:00:15.001
to the API client.

6
00:00:15.001 --> 00:00:17.008
Let's fire up our application

7
00:00:17.008 --> 00:00:22.003
and see how we are handling cases when somebody is looking

8
00:00:22.003 --> 00:00:25.000
for a research that is not found.

9
00:00:25.000 --> 00:00:28.003
What will happen when we try to retrieve a student

10
00:00:28.003 --> 00:00:30.002
that does not exist.

11
00:00:30.002 --> 00:00:34.007
So to do that, we need to call the following rest endpoint.

12
00:00:34.007 --> 00:00:37.005
Get students ID.

13
00:00:37.005 --> 00:00:40.008
Well, the default error representation

14
00:00:40.008 --> 00:00:45.006
looks a little bit messy and misleading, right?

15
00:00:45.006 --> 00:00:49.001
500 is not the right code to describe

16
00:00:49.001 --> 00:00:52.003
that the requested resource is not found.

17
00:00:52.003 --> 00:00:54.004
Each should be 404.

18
00:00:54.004 --> 00:00:56.009
Internal server error does not provide

19
00:00:56.009 --> 00:01:01.004
any meaningful information to the API consumers.

20
00:01:01.004 --> 00:01:05.007
Exposing 500 internal server errors to the clients

21
00:01:05.007 --> 00:01:08.002
is not a good practice at all.

22
00:01:08.002 --> 00:01:11.003
So, to handle our errors properly

23
00:01:11.003 --> 00:01:12.006
we need to customize

24
00:01:12.006 --> 00:01:16.001
the default Spring Boot API error response

25
00:01:16.001 --> 00:01:20.004
with a meaningful message indicating what went wrong

26
00:01:20.004 --> 00:01:25.001
and a proper status code based on the context.

27
00:01:25.001 --> 00:01:28.001
So let's create a new test for the case

28
00:01:28.001 --> 00:01:30.002
when a student is missing.

29
00:01:30.002 --> 00:01:33.002
We will use (indistinct) and Mockito

30
00:01:33.002 --> 00:01:35.003
to write an integration test

31
00:01:35.003 --> 00:01:38.009
one exception is thrown and verify that the proper

32
00:01:38.009 --> 00:01:42.000
HTTP status is returned.

33
00:01:42.000 --> 00:01:44.008
We will first create a new test method

34
00:01:44.008 --> 00:01:47.002
in student control test.

35
00:01:47.002 --> 00:01:51.001
Called getStudent_forMissingStudent_

36
00:01:51.001 --> 00:01:53.001
status404.

37
00:01:53.001 --> 00:01:55.003
Since this is a slice test

38
00:01:55.003 --> 00:01:58.004
and we're using mock students service

39
00:01:58.004 --> 00:02:02.008
we need to mock a behavior to draw an exception.

40
00:02:02.008 --> 00:02:06.000
Recall from the service layer test exercise.

41
00:02:06.000 --> 00:02:08.008
We have already created a custom student

42
00:02:08.008 --> 00:02:10.006
not found exception,

43
00:02:10.006 --> 00:02:13.003
so we need to mock (indistinct) it in a case

44
00:02:13.003 --> 00:02:15.005
of a missing student.

45
00:02:15.005 --> 00:02:20.001
We can do that with mockitos method will throw

46
00:02:20.001 --> 00:02:25.003
students not found exception.

47
00:02:25.003 --> 00:02:30.009
Now we just need to invoke students and point with any ID.

48
00:02:30.009 --> 00:02:39.005
And this time assert that expect the status is not found.

49
00:02:39.005 --> 00:02:43.002
If we run our test we will see

50
00:02:43.002 --> 00:02:45.005
that instead of 404

51
00:02:45.005 --> 00:02:50.002
we get, a student not found exception.

52
00:02:50.002 --> 00:02:52.005
Let's explore two simple ways

53
00:02:52.005 --> 00:02:55.004
we can implement custom mapping.

54
00:02:55.004 --> 00:02:59.008
One, is by creating an exception handler.

55
00:02:59.008 --> 00:03:02.007
We can define new method.

56
00:03:02.007 --> 00:03:07.002
Void students not found exception

57
00:03:07.002 --> 00:03:10.002
that accepts exception

58
00:03:10.002 --> 00:03:12.004
as method argument

59
00:03:12.004 --> 00:03:14.004
and annotate it with

60
00:03:14.004 --> 00:03:17.004
exception handler

61
00:03:17.004 --> 00:03:19.009
and response status

62
00:03:19.009 --> 00:03:25.009
to map this exception to 404 not found status code.

63
00:03:25.009 --> 00:03:29.002
Another way, instead of an exception handler

64
00:03:29.002 --> 00:03:33.000
we could have just annotated our exception

65
00:03:33.000 --> 00:03:39.008
with response status and status is not found

66
00:03:39.008 --> 00:03:41.009
that would have worked too.

67
00:03:41.009 --> 00:03:43.009
When we re-run our test,

68
00:03:43.009 --> 00:03:48.007
we can see

69
00:03:48.007 --> 00:03:50.007
that we got green.

70
00:03:50.007 --> 00:03:54.008
Communicating meaningful responses in case of exceptions

71
00:03:54.008 --> 00:03:58.007
is a crucial part when designing arrests API

72
00:03:58.007 --> 00:04:01.002
and together with Spring Boot support

73
00:04:01.002 --> 00:04:02.007
and more can we (indistinct)

74
00:04:02.007 --> 00:04:07.000
we can easily verify and implement such behaviors.

