WEBVTT
1
00:00:00.005 --> 00:00:03.008
- [Instructor] Writing tests for all database interactions

2
00:00:03.008 --> 00:00:05.000
can be tedious.

3
00:00:05.000 --> 00:00:09.002
How to choose which interactions to mock and which test,

4
00:00:09.002 --> 00:00:13.000
what risks are we introducing with custom queries,

5
00:00:13.000 --> 00:00:15.004
having in-memory databases,

6
00:00:15.004 --> 00:00:17.009
and how to avoid common pitfalls.

7
00:00:17.009 --> 00:00:20.007
Let's explore three keys to write

8
00:00:20.007 --> 00:00:24.008
an effective integration test for the database layer.

9
00:00:24.008 --> 00:00:29.004
But first, let's understand spring boot data support

10
00:00:29.004 --> 00:00:33.009
and common ways of interacting with our persistence layer

11
00:00:33.009 --> 00:00:35.006
in spring applications.

12
00:00:35.006 --> 00:00:40.001
Spring boot comes with a variety of spring data projects

13
00:00:40.001 --> 00:00:43.009
to work with SQL and NoSQL databases,

14
00:00:43.009 --> 00:00:47.003
such as document, graph, and search.

15
00:00:47.003 --> 00:00:50.001
We also get extensive support to interact

16
00:00:50.001 --> 00:00:53.007
with our database from direct Jdbc access

17
00:00:53.007 --> 00:00:57.003
using data source or Jdbc template.

18
00:00:57.003 --> 00:01:00.009
Up to complete ORM such as hibernate

19
00:01:00.009 --> 00:01:05.000
where we work with entity managers or repositories.

20
00:01:05.000 --> 00:01:08.000
Spring data also provides different ways

21
00:01:08.000 --> 00:01:10.006
to create a DB schema.

22
00:01:10.006 --> 00:01:14.007
From writing SQL scripts or using DB migration tools

23
00:01:14.007 --> 00:01:17.006
such as flyway or Liquibase,

24
00:01:17.006 --> 00:01:21.003
to simplest autocreation based owner entities.

25
00:01:21.003 --> 00:01:23.003
Each customization we make,

26
00:01:23.003 --> 00:01:26.004
we introduce different levels of risks.

27
00:01:26.004 --> 00:01:29.007
Key one, choosing the right interactions to test.

28
00:01:29.007 --> 00:01:33.003
Let's consider you're using spring data repository

29
00:01:33.003 --> 00:01:35.001
which you create by extending

30
00:01:35.001 --> 00:01:37.008
one of the repository interfaces.

31
00:01:37.008 --> 00:01:41.000
Spring data also allows you to customize queries

32
00:01:41.000 --> 00:01:42.008
in the following ways.

33
00:01:42.008 --> 00:01:45.001
By using custom query methods,

34
00:01:45.001 --> 00:01:48.000
we don't need to tell spring data what to do

35
00:01:48.000 --> 00:01:51.000
since it automatically derives the SQL query

36
00:01:51.000 --> 00:01:54.002
from the method name using query annotation

37
00:01:54.002 --> 00:01:56.005
with JPQL query syntax.

38
00:01:56.005 --> 00:01:59.009
JPQL is Java Persistent Query Language

39
00:01:59.009 --> 00:02:03.004
used to create queries against entities to store

40
00:02:03.004 --> 00:02:05.005
in a relational database.

41
00:02:05.005 --> 00:02:09.003
Using SQL query followed by native SQL

42
00:02:09.003 --> 00:02:11.008
targeted at the database table.

43
00:02:11.008 --> 00:02:15.008
Now, imagine we make a bug in all four cases.

44
00:02:15.008 --> 00:02:17.007
The neat thing with spring

45
00:02:17.007 --> 00:02:20.000
is that for the first three cases,

46
00:02:20.000 --> 00:02:23.009
spring data and hibernate automatically check

47
00:02:23.009 --> 00:02:27.000
if entity and query are valid at startup.

48
00:02:27.000 --> 00:02:30.006
So there is a very little risk involved.

49
00:02:30.006 --> 00:02:34.004
However, native queries are not validated.

50
00:02:34.004 --> 00:02:37.002
So native queries are primary candidates

51
00:02:37.002 --> 00:02:39.002
for integration tests.

52
00:02:39.002 --> 00:02:43.007
Key two, make your tests fast by using test slices.

53
00:02:43.007 --> 00:02:46.001
Running integration tests in spring

54
00:02:46.001 --> 00:02:50.004
can be achieved by adding spring boot test annotation,

55
00:02:50.004 --> 00:02:53.001
which loads full spring context.

56
00:02:53.001 --> 00:02:57.001
However, this can lead to loading unnecessary parts

57
00:02:57.001 --> 00:02:58.007
of your application.

58
00:02:58.007 --> 00:03:03.003
For example, you might want to test database interactions

59
00:03:03.003 --> 00:03:06.002
but you are not interested in the web layer

60
00:03:06.002 --> 00:03:08.002
when those tests run.

61
00:03:08.002 --> 00:03:11.007
Or you're only interested in web layer

62
00:03:11.007 --> 00:03:15.002
and want to avoid loading all repositories.

63
00:03:15.002 --> 00:03:18.007
The spring boot test module includes a number

64
00:03:18.007 --> 00:03:21.000
of annotation test slices.

65
00:03:21.000 --> 00:03:25.008
Each test slide, loads only the parts of the configuration

66
00:03:25.008 --> 00:03:29.005
that are required to test the slice of your application

67
00:03:29.005 --> 00:03:32.002
which can drastically speed up your tests.

68
00:03:32.002 --> 00:03:34.006
Key three, in memory database

69
00:03:34.006 --> 00:03:37.003
doesn't equal production database.

70
00:03:37.003 --> 00:03:40.000
Springboard provides a convenient way

71
00:03:40.000 --> 00:03:44.003
to set up an environment with an embedded database

72
00:03:44.003 --> 00:03:48.001
such as age two or age as SQL

73
00:03:48.001 --> 00:03:50.007
to test our database interactions.

74
00:03:50.007 --> 00:03:53.009
Even though each tool comes with compatibility mode

75
00:03:53.009 --> 00:03:56.004
for my SQL or Postgres.

76
00:03:56.004 --> 00:04:00.005
However, if compatibility is not in sync with the version

77
00:04:00.005 --> 00:04:02.005
of DB you're using,

78
00:04:02.005 --> 00:04:06.007
you can almost get lulled into false sense of security,

79
00:04:06.007 --> 00:04:10.006
thinking that all SQL interactions are fine.

80
00:04:10.006 --> 00:04:12.001
What is the alternative?

81
00:04:12.001 --> 00:04:16.001
How can we mitigate such risks with test containers?

82
00:04:16.001 --> 00:04:18.008
This container is a lightweight library

83
00:04:18.008 --> 00:04:21.001
that provides throwaway instances

84
00:04:21.001 --> 00:04:24.005
of a common database in a docker container.

85
00:04:24.005 --> 00:04:28.008
But without requiring complex setups for developers,

86
00:04:28.008 --> 00:04:31.008
we can define exactly which database type

87
00:04:31.008 --> 00:04:34.002
and version we want to work with.

88
00:04:34.002 --> 00:04:35.002
We don't need to worry

89
00:04:35.002 --> 00:04:38.004
about tests, having polluted the database,

90
00:04:38.004 --> 00:04:40.009
or left things in a broken state

91
00:04:40.009 --> 00:04:44.009
as each time our test starts with a fresh instance.

92
00:04:44.009 --> 00:04:47.007
By choosing right interactions to test,

93
00:04:47.007 --> 00:04:50.009
using test slices with embedded databases

94
00:04:50.009 --> 00:04:52.007
or test containers.

95
00:04:52.007 --> 00:04:57.003
We can produce integration tests with more efficiency

96
00:04:57.003 --> 00:05:02.000
and with more reliability to deliver first-class software.

