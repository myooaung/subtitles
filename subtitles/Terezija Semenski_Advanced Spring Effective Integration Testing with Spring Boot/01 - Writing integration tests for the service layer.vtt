WEBVTT
1
00:00:00.005 --> 00:00:03.002
- [Instructor] As we are making our way through the layers,

2
00:00:03.002 --> 00:00:06.006
the next one we will tackle is the service layer.

3
00:00:06.006 --> 00:00:09.009
Separation of concern, loose coupling,

4
00:00:09.009 --> 00:00:12.004
orchestration, caching,

5
00:00:12.004 --> 00:00:15.000
are just some of the benefits we will get

6
00:00:15.000 --> 00:00:16.006
from the service layer.

7
00:00:16.006 --> 00:00:20.004
Now let's write our first integration test

8
00:00:20.004 --> 00:00:24.002
that involves interaction between the service

9
00:00:24.002 --> 00:00:25.009
and data layers.

10
00:00:25.009 --> 00:00:28.004
We want to test that we are able

11
00:00:28.004 --> 00:00:31.000
to correctly fetch our student

12
00:00:31.000 --> 00:00:34.003
by making a request to the repository

13
00:00:34.003 --> 00:00:38.001
and assure the response is as expected.

14
00:00:38.001 --> 00:00:41.009
So here we are going to create StudentsServiceTest,

15
00:00:41.009 --> 00:00:44.000
as this is an integration test,

16
00:00:44.000 --> 00:00:47.003
we'll use SpringBootTest annotation.

17
00:00:47.003 --> 00:00:50.005
SpringBootTest works by reading configuration

18
00:00:50.005 --> 00:00:52.006
from SpringBootApplication

19
00:00:52.006 --> 00:00:55.001
and creates an application context

20
00:00:55.001 --> 00:00:57.009
very similar to the one that would be started

21
00:00:57.009 --> 00:01:00.003
in a production environment.

22
00:01:00.003 --> 00:01:02.008
Because we have a full application context,

23
00:01:02.008 --> 00:01:05.004
including web controller services

24
00:01:05.004 --> 00:01:07.007
and spring data repositories,

25
00:01:07.007 --> 00:01:11.007
SpringBootTest is a very convenient for integration tests

26
00:01:11.007 --> 00:01:14.008
that go through all layers of the application,

27
00:01:14.008 --> 00:01:16.004
however, in this test,

28
00:01:16.004 --> 00:01:20.004
we want to isolate all the services and repositories,

29
00:01:20.004 --> 00:01:23.009
and since the WebEnvironment is available in a class puff,

30
00:01:23.009 --> 00:01:26.009
by default, SpringBootTest will load

31
00:01:26.009 --> 00:01:29.002
the mock WebEnvironment.

32
00:01:29.002 --> 00:01:31.002
In order to prevent that,

33
00:01:31.002 --> 00:01:34.008
we need to add WebEnvironment equals NONE.

34
00:01:34.008 --> 00:01:37.007
Now we can create our Test method,

35
00:01:37.007 --> 00:01:42.000
getStudentByID_forSavedStudent_isReturned.

36
00:01:42.000 --> 00:01:45.001
If we want to give a more meaningful description,

37
00:01:45.001 --> 00:01:50.000
we can also use junit five, DisplayName annotation.

38
00:01:50.000 --> 00:01:55.000
In our example, returning saved student from service layer.

39
00:01:55.000 --> 00:01:58.008
Again, we will organize our tests

40
00:01:58.008 --> 00:02:02.003
into given, when, then structure.

41
00:02:02.003 --> 00:02:04.009
In the given part, we want to have our student

42
00:02:04.009 --> 00:02:07.005
already saved in our database,

43
00:02:07.005 --> 00:02:11.002
therefore we need to inject the student's repository,

44
00:02:11.002 --> 00:02:14.001
which we created in the previous chapter,

45
00:02:14.001 --> 00:02:16.002
and save a new student.

46
00:02:16.002 --> 00:02:23.008
Now, we can call StudentRepository.save new Student.

47
00:02:23.008 --> 00:02:25.008
Keep in mind that SpringBootTest

48
00:02:25.008 --> 00:02:28.006
does not contain transactional notation,

49
00:02:28.006 --> 00:02:31.005
like there's data GPI test slice,

50
00:02:31.005 --> 00:02:35.008
which means any interaction will not get rolled back.

51
00:02:35.008 --> 00:02:39.007
This means that any interaction with DB stays persisted

52
00:02:39.007 --> 00:02:41.005
and can cause side effects

53
00:02:41.005 --> 00:02:44.005
for other tests running at the same time,

54
00:02:44.005 --> 00:02:47.003
so we need to add Transactional.

55
00:02:47.003 --> 00:02:51.007
In the when part, we want to invoke studentService component

56
00:02:51.007 --> 00:02:56.000
by calling a new method that accepts student ID,

57
00:02:56.000 --> 00:02:57.009
and returns student.

58
00:02:57.009 --> 00:03:01.004
We will call this method getStudentById,

59
00:03:01.004 --> 00:03:04.006
and provide ID for saved student.

60
00:03:04.006 --> 00:03:07.001
Now, we will add a new field name,

61
00:03:07.001 --> 00:03:11.005
StudentService, and the type, studentService,

62
00:03:11.005 --> 00:03:13.005
and need to create a new class

63
00:03:13.005 --> 00:03:15.009
and market with service and rotation

64
00:03:15.009 --> 00:03:18.009
to be registered in the spring context.

65
00:03:18.009 --> 00:03:22.008
What is left to do is create an implementation,

66
00:03:22.008 --> 00:03:26.007
so in StudentService, we need to create missing method.

67
00:03:26.007 --> 00:03:29.008
At this moment, we don't care about implementation,

68
00:03:29.008 --> 00:03:32.002
so let's return now for now.

69
00:03:32.002 --> 00:03:36.004
Remember we are doing red green refactor TDD.

70
00:03:36.004 --> 00:03:40.001
In the test, we can now alter our StudentService

71
00:03:40.001 --> 00:03:42.009
and verify that the retrieved student

72
00:03:42.009 --> 00:03:46.005
does really contain the right name and ID,

73
00:03:46.005 --> 00:03:48.001
which is not Null.

74
00:03:48.001 --> 00:03:52.003
Now let's run our test.

75
00:03:52.003 --> 00:03:54.009
So, why did our tests fail?

76
00:03:54.009 --> 00:03:57.009
Well, we haven't really called a repository.

77
00:03:57.009 --> 00:03:59.003
Let's do that now.

78
00:03:59.003 --> 00:04:02.001
We need to inject StudentRepository.

79
00:04:02.001 --> 00:04:05.007
We'll use the required argsConstructor from lonbok

80
00:04:05.007 --> 00:04:08.001
to use constructor injection.

81
00:04:08.001 --> 00:04:09.009
For retrieving a student,

82
00:04:09.009 --> 00:04:13.003
we will invoke findById method,

83
00:04:13.003 --> 00:04:17.009
which comes from GPA repository.

84
00:04:17.009 --> 00:04:22.000
Since findById returns our students in Optional,

85
00:04:22.000 --> 00:04:26.002
we have many options how to deal with missing student.

86
00:04:26.002 --> 00:04:29.001
For now, we can just return now

87
00:04:29.001 --> 00:04:32.009
in case student is not found.

88
00:04:32.009 --> 00:04:38.008
Great, let's rerun our test.

89
00:04:38.008 --> 00:04:40.000
And there we have it!

90
00:04:40.000 --> 00:04:43.006
We have successfully created our first integration test

91
00:04:43.006 --> 00:04:46.005
involving both service and repository layer

92
00:04:46.005 --> 00:04:48.000
in our application.

