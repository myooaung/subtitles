WEBVTT
1
00:00:00.006 --> 00:00:01.004
- [Instructor] So far,

2
00:00:01.004 --> 00:00:03.005
we have written a student service app

3
00:00:03.005 --> 00:00:07.005
with integration tests covering all layers,

4
00:00:07.005 --> 00:00:08.005
but how can we ensure

5
00:00:08.005 --> 00:00:11.005
it can be consumed by other applications?

6
00:00:11.005 --> 00:00:15.005
Let's dive in and write a consumer for a service

7
00:00:15.005 --> 00:00:17.007
and see how we can write

8
00:00:17.007 --> 00:00:19.005
a meaningful integration test

9
00:00:19.005 --> 00:00:23.002
even when the student service is not available.

10
00:00:23.002 --> 00:00:26.006
Head over to start.spring.io.

11
00:00:26.006 --> 00:00:27.009
As the Group name,

12
00:00:27.009 --> 00:00:30.005
choose com.linkedIn

13
00:00:30.005 --> 00:00:35.005
and as the Artifact use student-client.

14
00:00:35.005 --> 00:00:38.007
We can leave other configurations as default,

15
00:00:38.007 --> 00:00:40.002
choose Java 15.

16
00:00:40.002 --> 00:00:44.006
In the dependencies select Project lombok,

17
00:00:44.006 --> 00:00:48.009
Spring Reactive Web and stub runner

18
00:00:48.009 --> 00:00:51.006
click on generate

19
00:00:51.006 --> 00:00:53.009
go to downloads directory

20
00:00:53.009 --> 00:01:02.008
and open it between your ID.

21
00:01:02.008 --> 00:01:05.005
This is our client application.

22
00:01:05.005 --> 00:01:06.004
We'll start

23
00:01:06.004 --> 00:01:08.003
by first writing a test

24
00:01:08.003 --> 00:01:09.009
that can create a client

25
00:01:09.009 --> 00:01:13.001
which can talk to our service.

26
00:01:13.001 --> 00:01:15.003
Using the TDD approach,

27
00:01:15.003 --> 00:01:17.009
we first need to write a failing test.

28
00:01:17.009 --> 00:01:24.001
Let's create a new class student client test

29
00:01:24.001 --> 00:01:28.002
and annotate it with Spring Boot test

30
00:01:28.002 --> 00:01:30.003
we will need a student client

31
00:01:30.003 --> 00:01:33.001
that will talk to our service.

32
00:01:33.001 --> 00:01:34.006
Since it doesn't exist

33
00:01:34.006 --> 00:01:35.006
we will create one

34
00:01:35.006 --> 00:01:40.001
and annotate it with add component

35
00:01:40.001 --> 00:01:44.003
so it is registered by Spring.

36
00:01:44.003 --> 00:01:46.001
We need a new test method

37
00:01:46.001 --> 00:01:54.004
get student for given student is returned.

38
00:01:54.004 --> 00:01:55.007
Under given part,

39
00:01:55.007 --> 00:02:00.002
we will create random ID.

40
00:02:00.002 --> 00:02:01.005
Under when part,

41
00:02:01.005 --> 00:02:03.005
we will call our client

42
00:02:03.005 --> 00:02:07.003
with client dot get student

43
00:02:07.003 --> 00:02:11.001
and provide student ID.

44
00:02:11.001 --> 00:02:12.002
As the response,

45
00:02:12.002 --> 00:02:16.002
we expect to get back a student object.

46
00:02:16.002 --> 00:02:19.004
The student type and method don't exist yet

47
00:02:19.004 --> 00:02:21.008
so we will create them.

48
00:02:21.008 --> 00:02:25.007
For now, we can return null.

49
00:02:25.007 --> 00:02:27.002
For student class,

50
00:02:27.002 --> 00:02:30.009
we will add the same fields like

51
00:02:30.009 --> 00:02:33.006
ID,

52
00:02:33.006 --> 00:02:35.008
a student name

53
00:02:35.008 --> 00:02:38.005
and grade

54
00:02:38.005 --> 00:02:41.005
plus lombok connotations.

55
00:02:41.005 --> 00:02:44.009
Let's assert certain things about the response.

56
00:02:44.009 --> 00:02:50.003
We expect the student ID will not be null.

57
00:02:50.003 --> 00:02:54.001
Student name equal to Mark

58
00:02:54.001 --> 00:02:57.006
and grade equal to 10.

59
00:02:57.006 --> 00:02:59.000
If we run our tests,

60
00:02:59.000 --> 00:03:00.007
we know it will fail

61
00:03:00.007 --> 00:03:05.003
because in a client we are returning null.

62
00:03:05.003 --> 00:03:07.004
We will use WebClient

63
00:03:07.004 --> 00:03:10.002
since the rest template will be deprecated

64
00:03:10.002 --> 00:03:12.009
in the future versions of Spring.

65
00:03:12.009 --> 00:03:14.000
We'll also include

66
00:03:14.000 --> 00:03:16.002
required args constructor

67
00:03:16.002 --> 00:03:17.008
from project lombok

68
00:03:17.008 --> 00:03:20.009
to handle construction injection.

69
00:03:20.009 --> 00:03:23.008
Now we can write WebClient

70
00:03:23.008 --> 00:03:25.008
dot get

71
00:03:25.008 --> 00:03:27.003
dot URI

72
00:03:27.003 --> 00:03:30.006
slash student slash ID

73
00:03:30.006 --> 00:03:32.004
as a parameter

74
00:03:32.004 --> 00:03:34.006
and just to finish our call,

75
00:03:34.006 --> 00:03:37.008
we expect a type of student class.

76
00:03:37.008 --> 00:03:40.002
Note that WebClient by default

77
00:03:40.002 --> 00:03:44.004
wraps our object to Mono and Flux wrappers.

78
00:03:44.004 --> 00:03:48.002
Since our student service API is non reactive

79
00:03:48.002 --> 00:03:49.004
then Flux and Mono

80
00:03:49.004 --> 00:03:51.008
are not much use for us

81
00:03:51.008 --> 00:03:55.002
so we can unwrap them by calling block

82
00:03:55.002 --> 00:03:56.008
which blocks the stream

83
00:03:56.008 --> 00:03:58.009
and gets data out of it.

84
00:03:58.009 --> 00:04:00.007
In order for this to work,

85
00:04:00.007 --> 00:04:04.004
we need to configure our bean for our WebClient.

86
00:04:04.004 --> 00:04:05.007
We can do that

87
00:04:05.007 --> 00:04:09.000
in a student client application class

88
00:04:09.000 --> 00:04:11.006
we need to inject a WebClient builder

89
00:04:11.006 --> 00:04:13.000
to configure it

90
00:04:13.000 --> 00:04:18.007
and set the domain and port of the service.

91
00:04:18.007 --> 00:04:19.006
We could configure

92
00:04:19.006 --> 00:04:22.002
domain and port in application property

93
00:04:22.002 --> 00:04:29.006
but for now it's fine if we leave it hard-coded.

94
00:04:29.006 --> 00:04:37.001
Now let's try again running our test.

95
00:04:37.001 --> 00:04:38.009
Notice what happens.

96
00:04:38.009 --> 00:04:41.003
We get connection refused

97
00:04:41.003 --> 00:04:42.005
and it is obvious

98
00:04:42.005 --> 00:04:46.005
why our student service application is not running.

99
00:04:46.005 --> 00:04:50.002
We could run it by firing up another intelligent

100
00:04:50.002 --> 00:04:53.002
but what if we have 10 different services?

101
00:04:53.002 --> 00:04:55.005
Would you fire up those as well?

102
00:04:55.005 --> 00:04:57.005
Or what if you are depending on a service

103
00:04:57.005 --> 00:04:59.009
that is in a cloud environment

104
00:04:59.009 --> 00:05:02.000
but it is either unavailable

105
00:05:02.000 --> 00:05:04.007
or unreachable from our test?

106
00:05:04.007 --> 00:05:05.009
So what should we do?

107
00:05:05.009 --> 00:05:10.005
The obvious thing to do is run a mock

108
00:05:10.005 --> 00:05:12.001
but not just any mock.

109
00:05:12.001 --> 00:05:15.003
We need a mock on HTTP level.

110
00:05:15.003 --> 00:05:18.007
This is where WireMock can support us.

111
00:05:18.007 --> 00:05:20.000
We just need to configure

112
00:05:20.000 --> 00:05:22.002
auto configure WireMock

113
00:05:22.002 --> 00:05:26.004
which by default uses port 8080,

114
00:05:26.004 --> 00:05:29.003
we can overwrite it if we want to.

115
00:05:29.003 --> 00:05:34.009
Stub for get students

116
00:05:34.009 --> 00:05:38.000
slash plus ID

117
00:05:38.000 --> 00:05:41.001
will return Okay Jason,

118
00:05:41.001 --> 00:05:44.004
I love this fluent API from WireMock.

119
00:05:44.004 --> 00:05:46.006
As in a few lines of code,

120
00:05:46.006 --> 00:05:49.000
we can easily create a stub.

121
00:05:49.000 --> 00:05:50.007
Also with Java 15,

122
00:05:50.007 --> 00:05:53.000
we get a text block support

123
00:05:53.000 --> 00:05:56.003
plus with intelligent and James Jason reference

124
00:05:56.003 --> 00:06:01.003
and we can easily write Jason response.

125
00:06:01.003 --> 00:06:04.000
Now that we have everything ready,

126
00:06:04.000 --> 00:06:08.007
let's fire up our test again

127
00:06:08.007 --> 00:06:09.009
and there you have it.

128
00:06:09.009 --> 00:06:13.006
We have just proved our client application working.

129
00:06:13.006 --> 00:06:15.003
We have a green client.

130
00:06:15.003 --> 00:06:17.003
We have a green service.

131
00:06:17.003 --> 00:06:20.002
Everything seems working, right?

132
00:06:20.002 --> 00:06:22.008
Well, not exactly.

133
00:06:22.008 --> 00:06:25.009
Did you notice the bug on the client side

134
00:06:25.009 --> 00:06:28.002
resume the collaborating object

135
00:06:28.002 --> 00:06:30.006
has student name?

136
00:06:30.006 --> 00:06:33.004
While the service provides just the name,

137
00:06:33.004 --> 00:06:36.000
this can happen quite often.

138
00:06:36.000 --> 00:06:38.008
One team can change collaborating objects

139
00:06:38.008 --> 00:06:40.006
without being aware

140
00:06:40.006 --> 00:06:43.009
it is affecting other client's applications.

141
00:06:43.009 --> 00:06:47.002
Later we're going to follow up on this example

142
00:06:47.002 --> 00:06:50.003
and learn how to mitigate such issues

143
00:06:50.003 --> 00:06:53.000
in a microservice environment.

