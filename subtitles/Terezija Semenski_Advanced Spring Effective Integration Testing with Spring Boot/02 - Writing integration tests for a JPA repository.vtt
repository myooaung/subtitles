WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] Let's take into practice

2
00:00:02.001 --> 00:00:05.008
everything we've learned so far by writing our first test.

3
00:00:05.008 --> 00:00:07.006
When it comes to testing,

4
00:00:07.006 --> 00:00:10.007
there are two different approaches we can use

5
00:00:10.007 --> 00:00:14.002
from the smallest component all the way up

6
00:00:14.002 --> 00:00:18.007
which is called bottom up approach or inside out.

7
00:00:18.007 --> 00:00:20.002
This approach is great

8
00:00:20.002 --> 00:00:24.001
When we have two different teams working independently

9
00:00:24.001 --> 00:00:26.001
on a different services

10
00:00:26.001 --> 00:00:29.005
and we are not so worried about integration.

11
00:00:29.005 --> 00:00:32.007
However, when we have two different teams

12
00:00:32.007 --> 00:00:36.002
and we know integration is going to be risky

13
00:00:36.002 --> 00:00:37.003
in this case,

14
00:00:37.003 --> 00:00:40.006
we want to prioritize building the integration

15
00:00:40.006 --> 00:00:42.002
and points first,

16
00:00:42.002 --> 00:00:46.000
and then focus on smaller components.

17
00:00:46.000 --> 00:00:50.006
This is called Top-down approach or outside-in.

18
00:00:50.006 --> 00:00:52.001
In our example,

19
00:00:52.001 --> 00:00:55.005
we are going to start with Bottom up Approach

20
00:00:55.005 --> 00:00:59.003
by writing integration tests for our repository.

21
00:00:59.003 --> 00:01:03.009
We want to prove we can retrieve objects from the database

22
00:01:03.009 --> 00:01:06.008
by queering it by student name.

23
00:01:06.008 --> 00:01:09.008
We want to verify that student object

24
00:01:09.008 --> 00:01:12.006
maps correctly to the database.

25
00:01:12.006 --> 00:01:14.009
We will write our tests first

26
00:01:14.009 --> 00:01:17.005
and then the actual implementation.

27
00:01:17.005 --> 00:01:22.001
This is known as TDD and red-green refactor.

28
00:01:22.001 --> 00:01:25.006
First, we will write a red failing test

29
00:01:25.006 --> 00:01:27.007
and then write just enough code

30
00:01:27.007 --> 00:01:29.008
to make our tests green again.

31
00:01:29.008 --> 00:01:31.008
We can then do refactoring

32
00:01:31.008 --> 00:01:33.009
by improving the implementation

33
00:01:33.009 --> 00:01:36.007
without changing his behavior.

34
00:01:36.007 --> 00:01:40.001
Let's create Student Repository Test Class,

35
00:01:40.001 --> 00:01:42.002
another first test method.

36
00:01:42.002 --> 00:01:47.002
Test gets student by name, return student details.

37
00:01:47.002 --> 00:01:52.000
We will use a given when, then met structure.

38
00:01:52.000 --> 00:01:53.006
In the given part,

39
00:01:53.006 --> 00:01:56.000
We need to create new student.

40
00:01:56.000 --> 00:02:00.006
Since student doesn't exist yet, we will create one

41
00:02:00.006 --> 00:02:04.000
with properties, ID, and name.

42
00:02:04.000 --> 00:02:07.001
We could create getters and setters

43
00:02:07.001 --> 00:02:10.006
but what I like to use is project Lombok

44
00:02:10.006 --> 00:02:13.004
which removes the ball plate code.

45
00:02:13.004 --> 00:02:16.003
Let's give our student object name Mark.

46
00:02:16.003 --> 00:02:18.002
Now, the assumption is

47
00:02:18.002 --> 00:02:22.002
that ID will be autocreated per database.

48
00:02:22.002 --> 00:02:24.009
Therefore we can leave it now.

49
00:02:24.009 --> 00:02:28.007
Here we also need to persist our student.

50
00:02:28.007 --> 00:02:31.006
Spring gives us a lot of options when it comes

51
00:02:31.006 --> 00:02:33.005
to interacting with DB,

52
00:02:33.005 --> 00:02:38.005
and the easiest way is to use GPA Repository.

53
00:02:38.005 --> 00:02:43.008
We will create a new field, student repository,

54
00:02:43.008 --> 00:02:47.002
Student repository must be an interface

55
00:02:47.002 --> 00:02:51.000
and must extend GPA repository

56
00:02:51.000 --> 00:02:54.008
that manages the entity of type student

57
00:02:54.008 --> 00:02:58.002
with primary key of type log.

58
00:02:58.002 --> 00:03:01.001
Keep in mind, this is just an interface

59
00:03:01.001 --> 00:03:05.003
and spring data provides the implementation for us.

60
00:03:05.003 --> 00:03:07.009
In order for this to take effect

61
00:03:07.009 --> 00:03:10.009
we need to bring in spring to our test.

62
00:03:10.009 --> 00:03:14.001
We could use spring boot test annotation,

63
00:03:14.001 --> 00:03:17.006
that loads the full application context.

64
00:03:17.006 --> 00:03:20.002
However, we don't want to test

65
00:03:20.002 --> 00:03:22.006
the entire spring application.

66
00:03:22.006 --> 00:03:26.006
What we only want to test is our data tier

67
00:03:26.006 --> 00:03:30.008
and for that, we will use Data GPA test.

68
00:03:30.008 --> 00:03:33.001
Since we have spring in our tests,

69
00:03:33.001 --> 00:03:36.008
we can now inject student repository.

70
00:03:36.008 --> 00:03:41.001
In one part, we still need to query students by name.

71
00:03:41.001 --> 00:03:43.008
We will create a new query method,

72
00:03:43.008 --> 00:03:47.002
get students by name, which returns the student.

73
00:03:47.002 --> 00:03:50.002
And what is left to do is verify

74
00:03:50.002 --> 00:03:52.001
that student is retrieved

75
00:03:52.001 --> 00:03:56.001
and contains ID that is not now,

76
00:03:56.001 --> 00:04:00.003
and name that is the same to saved student.

77
00:04:00.003 --> 00:04:03.006
Now, our code compiles,

78
00:04:03.006 --> 00:04:09.009
let's see if our tests is going through.

79
00:04:09.009 --> 00:04:12.001
It failed.

80
00:04:12.001 --> 00:04:18.004
It failed because we didn't mark student class as entity.

81
00:04:18.004 --> 00:04:22.006
We also need to tell GPA what is our ID

82
00:04:22.006 --> 00:04:25.004
and mark it as generated value

83
00:04:25.004 --> 00:04:33.007
since we expect it is out to generated by database.

84
00:04:33.007 --> 00:04:36.004
Now, our test is passing

85
00:04:36.004 --> 00:04:40.000
however, we still have an undetected bug.

86
00:04:40.000 --> 00:04:44.001
With GPA, we need to have a default constructor

87
00:04:44.001 --> 00:04:45.009
in our entity class.

88
00:04:45.009 --> 00:04:50.004
With data test GPA and using repository,

89
00:04:50.004 --> 00:04:53.009
our changes are not flushed to the database

90
00:04:53.009 --> 00:04:57.004
and we aren't really interacting with the database,

91
00:04:57.004 --> 00:05:02.001
but with the first level cache of GPA repository.

92
00:05:02.001 --> 00:05:05.001
Spring provides us with the convenient bin

93
00:05:05.001 --> 00:05:08.004
called Test Entity Manager.

94
00:05:08.004 --> 00:05:10.005
With Test Entity Manager,

95
00:05:10.005 --> 00:05:14.008
we can use persist, flush find methods

96
00:05:14.008 --> 00:05:17.000
to force synchronization

97
00:05:17.000 --> 00:05:21.006
by inserting object to the database and detaching it.

98
00:05:21.006 --> 00:05:25.008
Meaning, all new queries will be executed

99
00:05:25.008 --> 00:05:29.001
to a low fetching entities again.

100
00:05:29.001 --> 00:05:33.003
After refactoring, our bug has not been detected,

101
00:05:33.003 --> 00:05:39.005
let's add a missing constructor.

102
00:05:39.005 --> 00:05:41.005
And there we have it.

103
00:05:41.005 --> 00:05:46.000
Let's run our test, and now it is green.

