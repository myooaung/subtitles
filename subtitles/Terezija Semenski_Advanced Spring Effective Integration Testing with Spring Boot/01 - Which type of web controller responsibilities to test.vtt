WEBVTT
1
00:00:00.005 --> 00:00:02.006
- Testing Web Controllers is easy.

2
00:00:02.006 --> 00:00:05.007
We can just call business logic and we're done,

3
00:00:05.007 --> 00:00:06.009
or maybe not,

4
00:00:06.009 --> 00:00:09.007
How do you ensure that endpoint is really exposed

5
00:00:09.007 --> 00:00:11.000
on a certain URL?

6
00:00:11.000 --> 00:00:13.003
How can you ensure that proper validation

7
00:00:13.003 --> 00:00:14.008
has been performed?

8
00:00:14.008 --> 00:00:17.005
And how can you prove that exceptions

9
00:00:17.005 --> 00:00:21.008
in your applications are translated into right messages

10
00:00:21.008 --> 00:00:24.000
and status code for the user?

11
00:00:24.000 --> 00:00:25.002
As you can see,

12
00:00:25.002 --> 00:00:27.007
there are plenty of other responsibilities

13
00:00:27.007 --> 00:00:30.000
that are happening around the controller.

14
00:00:30.000 --> 00:00:32.009
Let's review them and see how we can run

15
00:00:32.009 --> 00:00:35.007
our integration tests against them

16
00:00:35.007 --> 00:00:37.004
so we are more confident

17
00:00:37.004 --> 00:00:41.001
that our application is properly covered with testing.

18
00:00:41.001 --> 00:00:44.008
Here's an example of a simple RestController.

19
00:00:44.008 --> 00:00:45.009
For each request,

20
00:00:45.009 --> 00:00:48.005
the controller does the following.

21
00:00:48.005 --> 00:00:51.008
First, listen to HTTP request,

22
00:00:51.008 --> 00:00:54.000
response to certain URLs,

23
00:00:54.000 --> 00:00:57.001
HTTP methods, and content types.

24
00:00:57.001 --> 00:00:59.004
Two, deserialized input,

25
00:00:59.004 --> 00:01:01.009
pass the incoming HTTP requests

26
00:01:01.009 --> 00:01:06.000
and then create Java objects from variables in the URL,

27
00:01:06.000 --> 00:01:09.007
HTTP requests parameters and request body.

28
00:01:09.007 --> 00:01:12.005
Three, validate input.

29
00:01:12.005 --> 00:01:15.007
Controller checks if input is not valid.

30
00:01:15.007 --> 00:01:18.004
Four, call the business logic.

31
00:01:18.004 --> 00:01:21.009
After Parsing the input transforms it into a business model

32
00:01:21.009 --> 00:01:24.004
and parse it to a business logic.

33
00:01:24.004 --> 00:01:28.004
Five, serialize the output takes the output

34
00:01:28.004 --> 00:01:33.003
of a business logic and serialize it into HTTP response.

35
00:01:33.003 --> 00:01:35.008
Six, translate exceptions.

36
00:01:35.008 --> 00:01:38.009
When exception occurse controller will translate it

37
00:01:38.009 --> 00:01:43.001
into HTTP status and error message for the user.

38
00:01:43.001 --> 00:01:46.007
How are we going to write meaningful tests that cover all

39
00:01:46.007 --> 00:01:48.006
of those responsibilities?

40
00:01:48.006 --> 00:01:50.002
If you use the Unit Test.

41
00:01:50.002 --> 00:01:53.009
We will test the controller in isolation by mocking away

42
00:01:53.009 --> 00:01:56.008
any interactions with control dependencies

43
00:01:56.008 --> 00:01:59.004
for example, calling the service layer

44
00:01:59.004 --> 00:02:02.001
and at the end call controller methods

45
00:02:02.001 --> 00:02:04.002
and verify the proper response

46
00:02:04.002 --> 00:02:08.008
since the Unit Testing is not leveraging spring framework.

47
00:02:08.008 --> 00:02:10.009
All of the stations and processing

48
00:02:10.009 --> 00:02:15.000
which are happening behind the scenes of spring get ignored.

49
00:02:15.000 --> 00:02:18.002
And our controller is no longer a controller,

50
00:02:18.002 --> 00:02:22.002
but a plain cloth that involves the business logic.

51
00:02:22.002 --> 00:02:23.004
As you can see,

52
00:02:23.004 --> 00:02:27.004
a simple Unit Test will not cover responsibilities.

53
00:02:27.004 --> 00:02:30.005
So we need to introduce spring to our tests

54
00:02:30.005 --> 00:02:33.004
and integration tests with spring fires up

55
00:02:33.004 --> 00:02:35.004
a spring application context

56
00:02:35.004 --> 00:02:40.000
that contains all beans required for testing controller.

57
00:02:40.000 --> 00:02:42.002
This includes beans responsible

58
00:02:42.002 --> 00:02:46.001
for URL napping, serializing, and deserializing

59
00:02:46.001 --> 00:02:50.006
to and from JSON and Java objects and translating exceptions

60
00:02:50.006 --> 00:02:54.001
to proper HTTP message and status code.

61
00:02:54.001 --> 00:02:58.004
These beans will evaluate the notations that would be

62
00:02:58.004 --> 00:03:00.009
ignored by simple Unit Tests.

63
00:03:00.009 --> 00:03:03.000
So, how can we do it?

64
00:03:03.000 --> 00:03:07.004
with WebMvcTest and WebFluxTest Slices.

65
00:03:07.004 --> 00:03:11.001
WebMvcTest loads components required

66
00:03:11.001 --> 00:03:14.004
for testing Mvc parts of application.

67
00:03:14.004 --> 00:03:18.008
WebMvcTest also auto configures MockMvc.

68
00:03:18.008 --> 00:03:23.001
MockMvc offers a powerful way to quickly test

69
00:03:23.001 --> 00:03:28.006
Mvc controllers without need to start a full HTTP server.

70
00:03:28.006 --> 00:03:32.006
Web Slice will not cover testing service component

71
00:03:32.006 --> 00:03:34.005
or repository beans?

72
00:03:34.005 --> 00:03:36.009
So it is often used in combination

73
00:03:36.009 --> 00:03:40.003
with MockBean to provide mock implementations

74
00:03:40.003 --> 00:03:42.005
for required collaborators.

75
00:03:42.005 --> 00:03:45.009
If you're coding reactive applications with WebFlux

76
00:03:45.009 --> 00:03:48.000
there's also WebFluxTests

77
00:03:48.000 --> 00:03:51.002
which also AutoConfigures WebTestClient

78
00:03:51.002 --> 00:03:53.008
enabling testing Web Fluxe controllers

79
00:03:53.008 --> 00:03:57.007
without the need to fire up HTTP server.

80
00:03:57.007 --> 00:04:01.008
However, if you still feel you want to run a test

81
00:04:01.008 --> 00:04:03.006
for the full application

82
00:04:03.006 --> 00:04:06.009
you can always use Spring Boot Test.

83
00:04:06.009 --> 00:04:09.008
Spring Boot Test will by default load

84
00:04:09.008 --> 00:04:11.009
a Mock Web environment,

85
00:04:11.009 --> 00:04:14.004
but it can also be configured to run

86
00:04:14.004 --> 00:04:16.004
on a production environment.

87
00:04:16.004 --> 00:04:20.000
You also have the power to use real dependencies.

88
00:04:20.000 --> 00:04:22.006
But if you want, you can mock them out.

89
00:04:22.006 --> 00:04:24.002
Just be careful not

90
00:04:24.002 --> 00:04:27.004
to overuse Spring Boot Test notation.

91
00:04:27.004 --> 00:04:31.000
Otherwise, you might end up with slow running tests

92
00:04:31.000 --> 00:04:35.000
since full application context is started.

