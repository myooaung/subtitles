WEBVTT
1
00:00:00.002 --> 00:00:05.006
(upbeat music)

2
00:00:05.006 --> 00:00:06.008
- [Instructor] Welcome back.

3
00:00:06.008 --> 00:00:09.000
How did you make out with the challenge?

4
00:00:09.000 --> 00:00:10.008
I hope you were successful.

5
00:00:10.008 --> 00:00:13.003
I will walk you through my solution.

6
00:00:13.003 --> 00:00:16.002
Now, it might look different than yours

7
00:00:16.002 --> 00:00:17.006
but that's fine

8
00:00:17.006 --> 00:00:19.006
as long as the outcome is the same.

9
00:00:19.006 --> 00:00:23.000
First, we want to extend our student class

10
00:00:23.000 --> 00:00:25.000
with new attributes.

11
00:00:25.000 --> 00:00:26.005
Boolean active

12
00:00:26.005 --> 00:00:27.007
and

13
00:00:27.007 --> 00:00:31.001
int grade.

14
00:00:31.001 --> 00:00:34.000
If you don't have desired constructor

15
00:00:34.000 --> 00:00:37.003
what I like to use is builder (indistinct)

16
00:00:37.003 --> 00:00:40.007
that can be simply enabled with Project Lombok,

17
00:00:40.007 --> 00:00:44.008
by adding ed builder with (indistinct) students class.

18
00:00:44.008 --> 00:00:48.008
Also in previous tests, we have used construct through

19
00:00:48.008 --> 00:00:53.003
which accepts ID and name, which is now missing.

20
00:00:53.003 --> 00:00:57.002
So let's add that one as well.

21
00:00:57.002 --> 00:01:01.004
Now, we are ready to write our failing tests.

22
00:01:01.004 --> 00:01:04.009
We will name it getAvgGrade

23
00:01:04.009 --> 00:01:08.006
for active students calculatesAvg.

24
00:01:08.006 --> 00:01:13.007
Again, I will structure my test with given, when, then.

25
00:01:13.007 --> 00:01:18.004
In the given part, we want to create a couple of students.

26
00:01:18.004 --> 00:01:23.007
First, we want to create student Mark, which is active

27
00:01:23.007 --> 00:01:26.000
and has grade 80.

28
00:01:26.000 --> 00:01:31.008
Similar to Mark, we have students Susan that is also active

29
00:01:31.008 --> 00:01:34.002
but his grade set to 100.

30
00:01:34.002 --> 00:01:38.004
3rd student is Peter, which is inactive.

31
00:01:38.004 --> 00:01:43.001
And has grade 50, this student should not be counted

32
00:01:43.001 --> 00:01:47.004
into average grade calculator since he's inactive.

33
00:01:47.004 --> 00:01:52.005
In the given part, we also want to persist our students.

34
00:01:52.005 --> 00:01:57.000
What I like to do is use arrays as list

35
00:01:57.000 --> 00:02:00.009
and persist all three students

36
00:02:00.009 --> 00:02:03.004
Mark, Susan and Peter.

37
00:02:03.004 --> 00:02:07.005
With persistFlushFind method.

38
00:02:07.005 --> 00:02:09.002
Under when part

39
00:02:09.002 --> 00:02:12.004
we will invoke our new query method.

40
00:02:12.004 --> 00:02:16.000
GetAvgGrade for active students

41
00:02:16.000 --> 00:02:18.004
which returns double.

42
00:02:18.004 --> 00:02:20.001
Keep in mind at this point

43
00:02:20.001 --> 00:02:22.006
this method doesn't do anything yet

44
00:02:22.006 --> 00:02:24.006
So we will need to create one.

45
00:02:24.006 --> 00:02:26.004
Leave the method for now.

46
00:02:26.004 --> 00:02:28.004
And let's go to our test

47
00:02:28.004 --> 00:02:30.009
and write assertion on average grade.

48
00:02:30.009 --> 00:02:34.005
Then average grade is equal to 90

49
00:02:34.005 --> 00:02:38.007
since Peter and Susan are the only active students

50
00:02:38.007 --> 00:02:42.009
sum of their grades is 180.

51
00:02:42.009 --> 00:02:46.004
So the average grade is equal to 90.

52
00:02:46.004 --> 00:02:48.001
Notice,

53
00:02:48.001 --> 00:02:50.007
when we run the test

54
00:02:50.007 --> 00:02:53.007
we get a failed result.

55
00:02:53.007 --> 00:02:56.001
Well, that is to be expected

56
00:02:56.001 --> 00:02:59.006
as we haven't written our implementation.

57
00:02:59.006 --> 00:03:03.000
For implementing query, unfortunately,

58
00:03:03.000 --> 00:03:05.009
there is no option to write method name

59
00:03:05.009 --> 00:03:08.002
from which query can be derived

60
00:03:08.002 --> 00:03:11.000
as there is no support for average.

61
00:03:11.000 --> 00:03:15.000
However, we can write a GPQL query.

62
00:03:15.000 --> 00:03:18.001
Which is the query running against the entities

63
00:03:18.001 --> 00:03:20.006
which is similar to SQL.

64
00:03:20.006 --> 00:03:22.000
Select

65
00:03:22.000 --> 00:03:23.005
avg,

66
00:03:23.005 --> 00:03:26.004
which is keyword for average grade

67
00:03:26.004 --> 00:03:28.003
from student

68
00:03:28.003 --> 00:03:30.005
where active

69
00:03:30.005 --> 00:03:32.006
equals true.

70
00:03:32.006 --> 00:03:36.002
Now, if you have gone with native SQL option

71
00:03:36.002 --> 00:03:38.000
that is still fine.

72
00:03:38.000 --> 00:03:40.005
As long as the result is the same.

73
00:03:40.005 --> 00:03:43.003
When we re-run our test case

74
00:03:43.003 --> 00:03:47.001
we should get green result

75
00:03:47.001 --> 00:03:48.005
and there you have it.

76
00:03:48.005 --> 00:03:51.000
We have just completed our solution.

