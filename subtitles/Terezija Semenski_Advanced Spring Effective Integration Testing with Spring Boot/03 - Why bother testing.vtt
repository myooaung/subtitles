WEBVTT
1
00:00:00.000 --> 00:00:02.001
- [Narrator] Spring Boot applications

2
00:00:02.001 --> 00:00:04.000
are built in multiple layers

3
00:00:04.000 --> 00:00:06.003
data, service and web.

4
00:00:06.003 --> 00:00:07.004
In unit testing,

5
00:00:07.004 --> 00:00:10.004
we test each of these layers independently.

6
00:00:10.004 --> 00:00:13.002
For example, we test the web controllers

7
00:00:13.002 --> 00:00:16.000
that mock out the business services.

8
00:00:16.000 --> 00:00:18.008
But how do we test to ensure all these layers

9
00:00:18.008 --> 00:00:21.007
work well when combined together?

10
00:00:21.007 --> 00:00:25.005
How do we test other web controller responsibilities

11
00:00:25.005 --> 00:00:29.001
such as input validation or exception handling?

12
00:00:29.001 --> 00:00:33.002
Or how do we test integrations with external systems such

13
00:00:33.002 --> 00:00:37.008
as database custom queries or using external API?

14
00:00:37.008 --> 00:00:41.003
This is where integration tests come into play.

15
00:00:41.003 --> 00:00:45.001
Before we start into integration tests with Spring Boot

16
00:00:45.001 --> 00:00:48.006
let's define what sets an integration test

17
00:00:48.006 --> 00:00:51.004
apart from a unit test.

18
00:00:51.004 --> 00:00:54.009
A unit test targets a small unit of code

19
00:00:54.009 --> 00:00:58.003
for example, a method or a class.

20
00:00:58.003 --> 00:01:01.004
Any dependencies are removed from unit tests

21
00:01:01.004 --> 00:01:05.003
like replacing the dependency with a test implementation

22
00:01:05.003 --> 00:01:09.000
or a mock object created by test framework.

23
00:01:09.000 --> 00:01:11.008
An integration test on the other hand

24
00:01:11.008 --> 00:01:14.005
can be anything of the following,

25
00:01:14.005 --> 00:01:17.005
a test that covers multiple units

26
00:01:17.005 --> 00:01:20.007
because it tests the interaction between

27
00:01:20.007 --> 00:01:23.004
two or more components which is spring

28
00:01:23.004 --> 00:01:25.008
we refer to spring beans.

29
00:01:25.008 --> 00:01:28.009
A test that covers multiple layers.

30
00:01:28.009 --> 00:01:30.009
This is actually a specialization

31
00:01:30.009 --> 00:01:34.003
of the first case and might cover the interaction

32
00:01:34.003 --> 00:01:37.005
between a web controller and a service layer

33
00:01:37.005 --> 00:01:40.006
or a business service, and a persistence layer.

34
00:01:40.006 --> 00:01:44.006
A test that covers the whole path for the application.

35
00:01:44.006 --> 00:01:48.003
In this test, we send the request to the application

36
00:01:48.003 --> 00:01:50.003
and check that it responds correctly

37
00:01:50.003 --> 00:01:53.004
and has changed the database state

38
00:01:53.004 --> 00:01:55.009
according to our expectations.

39
00:01:55.009 --> 00:02:00.005
A test that requires an interaction with external systems

40
00:02:00.005 --> 00:02:05.007
such as database SFTP server, other API endpoints.

41
00:02:05.007 --> 00:02:09.006
So whenever we are moving beyond unit testing

42
00:02:09.006 --> 00:02:12.000
and start integration testing,

43
00:02:12.000 --> 00:02:15.002
we should use SpringBootTest support

44
00:02:15.002 --> 00:02:17.007
to create an application context

45
00:02:17.007 --> 00:02:19.009
containing all the objects we need

46
00:02:19.009 --> 00:02:22.008
for all the above test types.

47
00:02:22.008 --> 00:02:24.009
As you progress through the course

48
00:02:24.009 --> 00:02:28.002
we will explore SpringBootTest libraries.

49
00:02:28.002 --> 00:02:32.001
Learn some three key real world testing scenarios

50
00:02:32.001 --> 00:02:35.000
such as testing with real database,

51
00:02:35.000 --> 00:02:39.000
testing service layer with caching support, web layers

52
00:02:39.000 --> 00:02:42.000
and testing in micro serviced environment.

