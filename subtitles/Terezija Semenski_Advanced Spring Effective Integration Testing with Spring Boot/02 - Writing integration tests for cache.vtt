WEBVTT
1
00:00:00.005 --> 00:00:01.004
- [Instructor] Ever wonder how

2
00:00:01.004 --> 00:00:04.004
to test a hard problem, like caching?

3
00:00:04.004 --> 00:00:07.000
We use the cache, to protect the database

4
00:00:07.000 --> 00:00:10.006
or to avoid cost-intensive calculations.

5
00:00:10.006 --> 00:00:13.007
And spring provides an abstraction layer,

6
00:00:13.007 --> 00:00:15.008
for implementing a cache.

7
00:00:15.008 --> 00:00:17.002
But how do we ensure,

8
00:00:17.002 --> 00:00:20.006
that our cache is really working as expected?

9
00:00:20.006 --> 00:00:23.001
What we need is to ensure in cases,

10
00:00:23.001 --> 00:00:26.006
when we are retrieving the same student from our service,

11
00:00:26.006 --> 00:00:30.004
we want to verify we are not hitting the database,

12
00:00:30.004 --> 00:00:32.004
every single time.

13
00:00:32.004 --> 00:00:36.003
We will start, by creating a new test class.

14
00:00:36.003 --> 00:00:40.002
And we will call it Student Cache Test.

15
00:00:40.002 --> 00:00:42.006
Let's create new test method,

16
00:00:42.006 --> 00:00:45.001
and name it, Gets Students By ID,

17
00:00:45.001 --> 00:00:50.000
for multiple requests, is retrieved from cache.

18
00:00:50.000 --> 00:00:56.007
In the given part, we will create some random student ID.

19
00:00:56.007 --> 00:01:00.000
We need to inject student service in our test,

20
00:01:00.000 --> 00:01:03.002
and in the Web part, simulate,

21
00:01:03.002 --> 00:01:05.009
multiple requests to the service layer,

22
00:01:05.009 --> 00:01:08.002
by calling Gets Students By ID,

23
00:01:08.002 --> 00:01:12.009
multiple times for the same student ID.

24
00:01:12.009 --> 00:01:16.002
Since we need to test interaction with a repository,

25
00:01:16.002 --> 00:01:17.007
this means, we need the kind

26
00:01:17.007 --> 00:01:19.008
of way to check how many times,

27
00:01:19.008 --> 00:01:21.007
our database has been called.

28
00:01:21.007 --> 00:01:23.006
What we need is a Mock.

29
00:01:23.006 --> 00:01:26.008
As a mocking framework, we'll use Mockito,

30
00:01:26.008 --> 00:01:29.006
since it's well-rounded ,well established

31
00:01:29.006 --> 00:01:32.006
and well integrated into spring boot.

32
00:01:32.006 --> 00:01:34.008
With Mockito Extension Unit Test,

33
00:01:34.008 --> 00:01:38.006
we can use Mock and Spy ,to define mocked objects,

34
00:01:38.006 --> 00:01:41.005
and on the tested class at Inject Mock.

35
00:01:41.005 --> 00:01:44.005
Mockito will then try to instantiate fields,

36
00:01:44.005 --> 00:01:48.006
annotated with inject mocks by passing all the mocks

37
00:01:48.006 --> 00:01:52.006
in Togo structure or by using Setter Injection.

38
00:01:52.006 --> 00:01:54.008
However, there are times,

39
00:01:54.008 --> 00:01:57.003
when we have to rely on spring boot,

40
00:01:57.003 --> 00:02:00.002
to set up an application context for us,

41
00:02:00.002 --> 00:02:02.003
because it would be too much work ,

42
00:02:02.003 --> 00:02:04.008
to instantiate classes manually.

43
00:02:04.008 --> 00:02:08.002
And we want to have full benefit from Spring contexts,

44
00:02:08.002 --> 00:02:12.001
such as dependency injection or infrastructure support,

45
00:02:12.001 --> 00:02:15.000
such as caching or data access.

46
00:02:15.000 --> 00:02:17.002
We may not want to test integration

47
00:02:17.002 --> 00:02:20.000
between all the beans in a certain test.

48
00:02:20.000 --> 00:02:23.002
So we need a way to replace certain spring beans

49
00:02:23.002 --> 00:02:24.003
with a mock.

50
00:02:24.003 --> 00:02:28.002
For example, we may depend on remote service,

51
00:02:28.002 --> 00:02:31.003
that is unavailable doing development.

52
00:02:31.003 --> 00:02:33.001
Mocking is also useful,

53
00:02:33.001 --> 00:02:34.006
when we want to simulate ,

54
00:02:34.006 --> 00:02:37.002
failures that might be hard to trigger,

55
00:02:37.002 --> 00:02:38.008
in a real environment.

56
00:02:38.008 --> 00:02:42.008
Spring Boot provides, the Mock Bean and Spy Bean,

57
00:02:42.008 --> 00:02:45.003
annotations for this purpose.

58
00:02:45.003 --> 00:02:47.001
The Spring Boot test support,

59
00:02:47.001 --> 00:02:50.008
will then automatically create a Mock or a Spy,

60
00:02:50.008 --> 00:02:53.006
and then edits to the application context,

61
00:02:53.006 --> 00:02:56.001
So we can then use Mockito given,

62
00:02:56.001 --> 00:02:58.007
when methods to mock behavior

63
00:02:58.007 --> 00:03:01.006
or verify interactions with our bean.

64
00:03:01.006 --> 00:03:03.004
Since we need to rely on spring,

65
00:03:03.004 --> 00:03:05.000
to give us caching support,

66
00:03:05.000 --> 00:03:07.006
we will use spring boot test notation

67
00:03:07.006 --> 00:03:10.002
and insulate ourselves from web environment,

68
00:03:10.002 --> 00:03:13.002
by adding web environment equals none.

69
00:03:13.002 --> 00:03:15.004
In order to verify interactions,

70
00:03:15.004 --> 00:03:17.002
we cannot use a real Bean.

71
00:03:17.002 --> 00:03:18.005
We need mock one.

72
00:03:18.005 --> 00:03:21.002
Therefore we will inject student repository,

73
00:03:21.002 --> 00:03:23.001
with mock bean annotation.

74
00:03:23.001 --> 00:03:25.005
In the given part, we need to mock out,

75
00:03:25.005 --> 00:03:29.004
student repository dot find by ID behavior,

76
00:03:29.004 --> 00:03:32.002
as this is called from students service.

77
00:03:32.002 --> 00:03:35.004
Let's use BDDMockito method ,

78
00:03:35.004 --> 00:03:39.007
given for student repository dot find by ID call ,

79
00:03:39.007 --> 00:03:46.009
for student ID, we'll return optional, of type student.

80
00:03:46.009 --> 00:03:49.007
In the Den part, we will use the method from

81
00:03:49.007 --> 00:03:52.005
BDDMockito library, to verify

82
00:03:52.005 --> 00:03:56.006
that find by ID was called only once.

83
00:03:56.006 --> 00:03:59.001
Quito, gives us times method,

84
00:03:59.001 --> 00:04:02.006
to assert how many times the method has been called.

85
00:04:02.006 --> 00:04:05.006
Then, student repository should times one,

86
00:04:05.006 --> 00:04:07.002
meaning called only once,

87
00:04:07.002 --> 00:04:09.001
called method Find by ID.

88
00:04:09.001 --> 00:04:12.007
Let's run our test.

89
00:04:12.007 --> 00:04:14.000
Why did it fail?

90
00:04:14.000 --> 00:04:17.004
It fails since we haven't added cache in support.

91
00:04:17.004 --> 00:04:19.002
We can do that easily,

92
00:04:19.002 --> 00:04:22.004
by annotating gets students by ID method ,

93
00:04:22.004 --> 00:04:27.006
with Cacheable, with cache key, set to students.

94
00:04:27.006 --> 00:04:31.000
And by adding ,enable caching annotation ,

95
00:04:31.000 --> 00:04:33.001
to the spring boot application ,

96
00:04:33.001 --> 00:04:36.009
to use Embedded Spring Cache.

97
00:04:36.009 --> 00:04:42.007
When we rerun our test, now it should pass.

98
00:04:42.007 --> 00:04:43.009
And there you go,

99
00:04:43.009 --> 00:04:48.000
you've just mastered Integration Testing For Spring Cache.

