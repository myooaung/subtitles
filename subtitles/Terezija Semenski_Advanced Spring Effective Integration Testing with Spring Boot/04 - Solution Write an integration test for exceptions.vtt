WEBVTT
1
00:00:00.000 --> 00:00:05.006
(upbeat music)

2
00:00:05.006 --> 00:00:07.001
- [Instructor} How was the Challenge?

3
00:00:07.001 --> 00:00:09.004
Did you struggle or was it easy?

4
00:00:09.004 --> 00:00:13.003
Even though we had to change a few lines of code,

5
00:00:13.003 --> 00:00:17.001
testing exceptions is no easy thing to do.

6
00:00:17.001 --> 00:00:19.003
I will walk you through the solution.

7
00:00:19.003 --> 00:00:22.003
First, on Student Service Desk,

8
00:00:22.003 --> 00:00:24.009
we need to create new method.

9
00:00:24.009 --> 00:00:26.009
Get student by ID

10
00:00:26.009 --> 00:00:31.002
when missing student not found exception thrown.

11
00:00:31.002 --> 00:00:36.004
Again, let's use given-when-then structure.

12
00:00:36.004 --> 00:00:39.002
Since we want to simulate missing data scenario

13
00:00:39.002 --> 00:00:43.003
we don't need to pre-populate our database with students.

14
00:00:43.003 --> 00:00:46.001
We also don't need to mock out any behavior

15
00:00:46.001 --> 00:00:49.001
since you're dealing with a real repository.

16
00:00:49.001 --> 00:00:51.002
We only need some random ID

17
00:00:51.002 --> 00:00:54.007
for which we know there is no student.

18
00:00:54.007 --> 00:00:56.008
When it comes to asserting exceptions,

19
00:00:56.008 --> 00:00:59.008
AssertJ comes with many different styles

20
00:00:59.008 --> 00:01:03.007
and it's up to you which one you find most readable.

21
00:01:03.007 --> 00:01:07.000
For example, we can use non-BDD style

22
00:01:07.000 --> 00:01:09.006
with assert that exception of type

23
00:01:09.006 --> 00:01:11.009
or with assert that thrown by

24
00:01:11.009 --> 00:01:16.005
where when and then are part of the same line of code.

25
00:01:16.005 --> 00:01:20.007
If you prefer a BDD style, we can separate catching

26
00:01:20.007 --> 00:01:24.005
and asserting exception by using catch throwable

27
00:01:24.005 --> 00:01:28.008
and by using then or assert that method call.

28
00:01:28.008 --> 00:01:31.009
Since the goal of this test is to verify

29
00:01:31.009 --> 00:01:36.000
when get student is involved for a missing student,

30
00:01:36.000 --> 00:01:38.004
a custom exception is thrown.

31
00:01:38.004 --> 00:01:42.008
We can use catch throwable method from AssertJ

32
00:01:42.008 --> 00:01:46.000
to catch thrown exception.

33
00:01:46.000 --> 00:01:49.009
Under then part we can use BDD assertions then

34
00:01:49.009 --> 00:01:54.000
or assert that method call and verify an exception

35
00:01:54.000 --> 00:01:57.007
is of type student not found exception.

36
00:01:57.007 --> 00:02:02.003
Our compiler is complaining as we haven't created one yet.

37
00:02:02.003 --> 00:02:04.003
Let's create a new class.

38
00:02:04.003 --> 00:02:09.007
And the only thing left is to extend runtime exception.

39
00:02:09.007 --> 00:02:19.003
Now we can run our test.

40
00:02:19.003 --> 00:02:21.003
Since we haven't changed anything yet

41
00:02:21.003 --> 00:02:24.000
in students service clause, the test failed.

42
00:02:24.000 --> 00:02:28.006
So let's change implementation and, as you probably know,

43
00:02:28.006 --> 00:02:31.003
optional gives us a lot of possibilities

44
00:02:31.003 --> 00:02:33.006
for handling missing objects.

45
00:02:33.006 --> 00:02:37.000
Here we use the replacement object which is null.

46
00:02:37.000 --> 00:02:41.002
So we can easily change this by replacing or else part

47
00:02:41.002 --> 00:02:45.008
with or else throw that accepts an exception supplier.

48
00:02:45.008 --> 00:02:50.006
In our case, we will throw a student not found exception.

49
00:02:50.006 --> 00:02:54.001
After re-running our test, it should be green.

50
00:02:54.001 --> 00:02:55.006
Lets run it.

51
00:02:55.006 --> 00:02:59.006
Congratulations, you've just learned how to use TDD

52
00:02:59.006 --> 00:03:01.008
to implement custom exceptions

53
00:03:01.008 --> 00:03:06.000
and different ways to use AssertJ to perform assertions.

