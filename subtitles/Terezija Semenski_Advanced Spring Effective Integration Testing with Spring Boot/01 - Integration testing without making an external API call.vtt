WEBVTT
1
00:00:00.000 --> 00:00:01.000
- [Instructor] How can you counter

2
00:00:01.000 --> 00:00:03.000
integration testing for code

3
00:00:03.000 --> 00:00:05.009
that interacts with an external API?

4
00:00:05.009 --> 00:00:07.003
Imagine you have a component

5
00:00:07.003 --> 00:00:10.000
that's talking to another service

6
00:00:10.000 --> 00:00:12.002
and the service that you're calling

7
00:00:12.002 --> 00:00:13.006
in production environment,

8
00:00:13.006 --> 00:00:16.004
just isn't available to you

9
00:00:16.004 --> 00:00:18.007
in your test environment.

10
00:00:18.007 --> 00:00:21.005
Calling a staged version would be a better option

11
00:00:21.005 --> 00:00:24.006
but often you don't have it offered.

12
00:00:24.006 --> 00:00:26.000
For example,

13
00:00:26.000 --> 00:00:28.008
you're calling a live service like YouTube,

14
00:00:28.008 --> 00:00:32.004
Google, Facebook or Twitter API.

15
00:00:32.004 --> 00:00:35.005
APIs such as these have rate limits.

16
00:00:35.005 --> 00:00:37.008
So when you're running the tests

17
00:00:37.008 --> 00:00:40.001
you could exceed rate limits

18
00:00:40.001 --> 00:00:42.002
and your tests would fail

19
00:00:42.002 --> 00:00:44.005
or you would need to be careful

20
00:00:44.005 --> 00:00:46.002
not to exceed your rate limit

21
00:00:46.002 --> 00:00:48.008
and incur additional expenses.

22
00:00:48.008 --> 00:00:50.008
Then you also need to worry

23
00:00:50.008 --> 00:00:52.005
about storing credentials

24
00:00:52.005 --> 00:00:54.000
somewhere for your test use

25
00:00:54.000 --> 00:00:57.001
and it ends up way too complicated.

26
00:00:57.001 --> 00:01:00.002
Your best option is to mock out the service

27
00:01:00.002 --> 00:01:01.001
that you're calling.

28
00:01:01.001 --> 00:01:02.005
In the Spring world,

29
00:01:02.005 --> 00:01:04.004
we use the rest template

30
00:01:04.004 --> 00:01:05.007
or a WebClient

31
00:01:05.007 --> 00:01:08.002
to interact with external APIs.

32
00:01:08.002 --> 00:01:10.005
You could mock out rest template

33
00:01:10.005 --> 00:01:13.004
by mocking rest template interfaces.

34
00:01:13.004 --> 00:01:15.001
Set a bunch of expectations

35
00:01:15.001 --> 00:01:19.009
by using mock it or for particular URI and entity.

36
00:01:19.009 --> 00:01:22.009
Define what kind of response will get returned

37
00:01:22.009 --> 00:01:25.005
but there is a lot of risk involved

38
00:01:25.005 --> 00:01:27.001
in making a mistake.

39
00:01:27.001 --> 00:01:29.003
You could make a mistake in the URI

40
00:01:29.003 --> 00:01:32.009
or when substituting path variables

41
00:01:32.009 --> 00:01:36.006
or when you're mocking message conversion logic.

42
00:01:36.006 --> 00:01:39.006
A better option is to use rest client test slides

43
00:01:39.006 --> 00:01:43.007
which comes with a pre-configured mock rest service server.

44
00:01:43.007 --> 00:01:47.002
Mock rest service server provides a way

45
00:01:47.002 --> 00:01:49.006
to set up expected requests

46
00:01:49.006 --> 00:01:51.004
that will be performed

47
00:01:51.004 --> 00:01:53.000
through the rest template,

48
00:01:53.000 --> 00:01:56.001
as well as mock responses to send back

49
00:01:56.001 --> 00:01:58.001
thus removing the need

50
00:01:58.001 --> 00:01:59.008
for actual server.

51
00:01:59.008 --> 00:02:01.000
In the same way,

52
00:02:01.000 --> 00:02:04.003
we could take an existing service API

53
00:02:04.003 --> 00:02:06.000
like YouTube, Twitter

54
00:02:06.000 --> 00:02:07.004
we are interacting with,

55
00:02:07.004 --> 00:02:10.005
take their requests and responses

56
00:02:10.005 --> 00:02:14.006
and map those to our mock rest service server

57
00:02:14.006 --> 00:02:17.004
which gives us a higher degree of confidence

58
00:02:17.004 --> 00:02:20.008
that a rest template is making right calls

59
00:02:20.008 --> 00:02:22.004
to external API.

60
00:02:22.004 --> 00:02:26.001
However, usage of a mock rest service server

61
00:02:26.001 --> 00:02:28.009
is limited only to rest template.

62
00:02:28.009 --> 00:02:31.001
If you are using WebClient

63
00:02:31.001 --> 00:02:33.005
things get even more challenging.

64
00:02:33.005 --> 00:02:37.008
This is because the WebClient is a fluent API

65
00:02:37.008 --> 00:02:39.003
where a lot of objects

66
00:02:39.003 --> 00:02:42.005
pause between the calling code and the mock.

67
00:02:42.005 --> 00:02:43.004
As we can see,

68
00:02:43.004 --> 00:02:46.005
we need to provide a different mock object

69
00:02:46.005 --> 00:02:48.004
for each call in the chain.

70
00:02:48.004 --> 00:02:50.009
This is verbose and cumbersome.

71
00:02:50.009 --> 00:02:52.007
It also requires us

72
00:02:52.007 --> 00:02:55.000
to know the implementation details

73
00:02:55.000 --> 00:02:58.006
of how exactly our service uses WebClient

74
00:02:58.006 --> 00:03:01.005
making this a brittle way of testing.

75
00:03:01.005 --> 00:03:04.003
So what should we use?

76
00:03:04.003 --> 00:03:06.008
The Spring team recommends using

77
00:03:06.008 --> 00:03:11.009
OkHTTPS mock web server or WireMock.

78
00:03:11.009 --> 00:03:13.000
In a similar way,

79
00:03:13.000 --> 00:03:15.006
to mock rest service server

80
00:03:15.006 --> 00:03:17.002
you can set up expectations

81
00:03:17.002 --> 00:03:20.000
but unlike mock rest service server

82
00:03:20.000 --> 00:03:23.000
it is exposed or HTTP.

83
00:03:23.000 --> 00:03:25.005
Instead of using some sort of mock

84
00:03:25.005 --> 00:03:27.007
with predetermined responses,

85
00:03:27.007 --> 00:03:31.004
you get to keep the HTTP client underneath

86
00:03:31.004 --> 00:03:34.003
which leads to more complete testing.

87
00:03:34.003 --> 00:03:36.005
Over an actual socket

88
00:03:36.005 --> 00:03:40.000
it's more natural to simulate slow network conditions,

89
00:03:40.000 --> 00:03:41.006
chunked responses

90
00:03:41.006 --> 00:03:44.003
and then in turn to test the impact

91
00:03:44.003 --> 00:03:46.004
with the actual HTTP client

92
00:03:46.004 --> 00:03:50.000
in charge of processing content on the wire.

