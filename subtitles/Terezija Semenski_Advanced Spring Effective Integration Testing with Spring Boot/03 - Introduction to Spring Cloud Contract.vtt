WEBVTT
1
00:00:00.000 --> 00:00:02.002
- [Narrator] We have written Green Tests

2
00:00:02.002 --> 00:00:05.002
for both web and client applications

3
00:00:05.002 --> 00:00:07.002
yet there is still a bug.

4
00:00:07.002 --> 00:00:10.007
How can you ensure that the contract between the consumer

5
00:00:10.007 --> 00:00:13.005
and the producer of the API works?

6
00:00:13.005 --> 00:00:15.005
To make things more interesting,

7
00:00:15.005 --> 00:00:17.007
imagine your application is dependent

8
00:00:17.007 --> 00:00:22.008
on 10 different services in the microservice environment.

9
00:00:22.008 --> 00:00:26.002
How would you test integrations between them?

10
00:00:26.002 --> 00:00:30.004
Would you deploy all microservices in the same environment

11
00:00:30.004 --> 00:00:32.008
and run an end to end test?

12
00:00:32.008 --> 00:00:35.002
Or would you use something like WireMock

13
00:00:35.002 --> 00:00:37.004
to mock out other services?

14
00:00:37.004 --> 00:00:41.006
Both come with their advantages and disadvantages.

15
00:00:41.006 --> 00:00:46.003
If we deploy all microservices and perform end to end

16
00:00:46.003 --> 00:00:50.005
we get the benefit of testing real communication

17
00:00:50.005 --> 00:00:54.003
between services which is as close as it gets

18
00:00:54.003 --> 00:00:56.004
to simulating production.

19
00:00:56.004 --> 00:00:59.001
But this comes at high price

20
00:00:59.001 --> 00:01:03.004
of having dedicated infrastructure with all servers,

21
00:01:03.004 --> 00:01:06.007
databases, and other dependencies.

22
00:01:06.007 --> 00:01:09.009
These tests can also be slow and flaky,

23
00:01:09.009 --> 00:01:13.007
meaning hard to debug and not so reliable

24
00:01:13.007 --> 00:01:16.004
in case data is inconsistent.

25
00:01:16.004 --> 00:01:17.003
In this case,

26
00:01:17.003 --> 00:01:19.006
the second approach with mocking

27
00:01:19.006 --> 00:01:21.007
might sound like a better idea.

28
00:01:21.007 --> 00:01:23.006
We get very fast feedback

29
00:01:23.006 --> 00:01:26.001
and no infrastructure requirements.

30
00:01:26.001 --> 00:01:29.003
However, we have seen that the mocking service

31
00:01:29.003 --> 00:01:33.000
might not be aligned with real service,

32
00:01:33.000 --> 00:01:35.003
which can give us false assurance

33
00:01:35.003 --> 00:01:37.001
that everything is fine.

34
00:01:37.001 --> 00:01:38.007
To solve this issue,

35
00:01:38.007 --> 00:01:41.008
Spring Cloud Contract was created.

36
00:01:41.008 --> 00:01:44.008
The main idea of the Spring Cloud Contract

37
00:01:44.008 --> 00:01:47.008
is to give you very fast feedback

38
00:01:47.008 --> 00:01:52.007
without the need to set up the whole world of microservices.

39
00:01:52.007 --> 00:01:55.008
Client applications work with stubs.

40
00:01:55.008 --> 00:01:59.007
However, we get certainty that the stubs that we use

41
00:01:59.007 --> 00:02:02.004
in our client application consumer.

42
00:02:02.004 --> 00:02:06.003
were created by the service producer recall,

43
00:02:06.003 --> 00:02:08.008
but how does it all work?

44
00:02:08.008 --> 00:02:11.003
Imagine that before two applications

45
00:02:11.003 --> 00:02:13.006
communicate with each other,

46
00:02:13.006 --> 00:02:18.001
they've formalized a way they send and receive messages.

47
00:02:18.001 --> 00:02:19.007
On the producer side,

48
00:02:19.007 --> 00:02:25.001
we can define contract in Java, Groovy, Kotlin and YAML

49
00:02:25.001 --> 00:02:29.000
by specifying expected request and response.

50
00:02:29.000 --> 00:02:32.009
Second, in order for this contract to have an effect,

51
00:02:32.009 --> 00:02:37.006
Spring Cloud Maven Plugin will read contract definitions

52
00:02:37.006 --> 00:02:39.005
and generate tests.

53
00:02:39.005 --> 00:02:43.000
We also need to define this class for a test,

54
00:02:43.000 --> 00:02:46.001
which contains all the setup information

55
00:02:46.001 --> 00:02:48.001
necessary to run the tests.

56
00:02:48.001 --> 00:02:51.003
For example, mocking out service layer.

57
00:02:51.003 --> 00:02:54.006
Once our tests are passing and verified,

58
00:02:54.006 --> 00:02:58.001
both the application and the WireMock stubs

59
00:02:58.001 --> 00:03:00.000
are installed on the local

60
00:03:00.000 --> 00:03:05.005
or upload it to Maven manager such as Nexus or Artifactory.

61
00:03:05.005 --> 00:03:11.001
Now, let's explore how we can change the consumer side test

62
00:03:11.001 --> 00:03:13.003
to reuse those stubs.

63
00:03:13.003 --> 00:03:16.006
Spring Cloud Contract comes with a component

64
00:03:16.006 --> 00:03:18.006
called a stub runner.

65
00:03:18.006 --> 00:03:22.003
It comes with auto configure stub runner annotation,

66
00:03:22.003 --> 00:03:26.001
in which we need to define artifact coordinates

67
00:03:26.001 --> 00:03:30.008
such as stub storage, artifactId and port number.

68
00:03:30.008 --> 00:03:35.004
Stub runner will fetch the stub from various locations

69
00:03:35.004 --> 00:03:40.000
and the HTTP server stub will get started on defined ports.

70
00:03:40.000 --> 00:03:45.004
Our client tests can now reference the stub server directly.

71
00:03:45.004 --> 00:03:49.001
So what's the outcome of such an approach?

72
00:03:49.001 --> 00:03:52.003
As consumers, we will fail fast

73
00:03:52.003 --> 00:03:55.000
if they are not in sync with producer.

74
00:03:55.000 --> 00:03:58.009
As producers we can see if our code changes

75
00:03:58.009 --> 00:04:02.008
are not breaking the contracts we have made with our client.

76
00:04:02.008 --> 00:04:08.000
This approach is called consumer-driven construct testing.

