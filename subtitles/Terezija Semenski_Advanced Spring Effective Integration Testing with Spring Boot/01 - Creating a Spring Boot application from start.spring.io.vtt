WEBVTT
1
00:00:00.005 --> 00:00:02.008
- [Instructor] Writing good tests can be considered

2
00:00:02.008 --> 00:00:05.005
an art that is hard to master,

3
00:00:05.005 --> 00:00:08.004
but the good news is that the mechanics supporting it

4
00:00:08.004 --> 00:00:09.008
are easy to learn.

5
00:00:09.008 --> 00:00:13.009
In this lesson, we're going to create our first application,

6
00:00:13.009 --> 00:00:18.001
called Students Service, and explore the powerful set

7
00:00:18.001 --> 00:00:20.007
of Spring Boot's including libraries

8
00:00:20.007 --> 00:00:24.008
that make our tests straightforward and easy to implement.

9
00:00:24.008 --> 00:00:28.006
Creating Spring Boot applications can be done in many ways,

10
00:00:28.006 --> 00:00:33.001
but one of the easiest is to head off to start.spring.io.

11
00:00:33.001 --> 00:00:35.007
This is the initializer web application

12
00:00:35.007 --> 00:00:38.006
where we can choose many of the options

13
00:00:38.006 --> 00:00:41.003
that we will use to create our first application,

14
00:00:41.003 --> 00:00:43.001
called Student Service.

15
00:00:43.001 --> 00:00:45.006
We can leave most of default options,

16
00:00:45.006 --> 00:00:49.004
like using Maven Project, Java as our language,

17
00:00:49.004 --> 00:00:52.001
and latent Spring Boot dependency.

18
00:00:52.001 --> 00:00:55.001
Now, we are going to populate the group.

19
00:00:55.001 --> 00:00:57.003
Let's use com.linkedin.

20
00:00:57.003 --> 00:01:01.000
As an artifact, we need to set it to Student Service.

21
00:01:01.000 --> 00:01:03.002
Leave the packaging as a .jar,

22
00:01:03.002 --> 00:01:05.008
since with this option we have the benefit

23
00:01:05.008 --> 00:01:08.005
of embedded Tomcat, which we will need

24
00:01:08.005 --> 00:01:11.003
considering we are building REST service.

25
00:01:11.003 --> 00:01:15.001
As the Java version, we will choose the latest Java 15.

26
00:01:15.001 --> 00:01:19.006
However, examples are also compatible from Java 11,

27
00:01:19.006 --> 00:01:22.005
which provides long-term support.

28
00:01:22.005 --> 00:01:25.000
In the dependencies we will bring Lombok,

29
00:01:25.000 --> 00:01:27.006
which makes Java less cluttered with code.

30
00:01:27.006 --> 00:01:33.007
We're going to add Spring Web, Spring Data GPA Support,

31
00:01:33.007 --> 00:01:39.008
embedded H2 database, and contract verifier.

32
00:01:39.008 --> 00:01:42.001
Click on Generate.

33
00:01:42.001 --> 00:01:44.003
Let's open the Download directory,

34
00:01:44.003 --> 00:01:48.005
unzip the generated project, and open it in the IDE,

35
00:01:48.005 --> 00:01:51.007
either from terminal or from Java IDE.

36
00:01:51.007 --> 00:01:53.008
I'm using IntelliJ IDEA,

37
00:01:53.008 --> 00:01:56.006
which comes with a useful set of plugins

38
00:01:56.006 --> 00:01:59.001
for Spring Boot projects.

39
00:01:59.001 --> 00:02:01.005
Immediately after opening the project,

40
00:02:01.005 --> 00:02:05.005
IntelliJ will pull all the Maven dependencies.

41
00:02:05.005 --> 00:02:08.009
Make sure that you have the correct Java version installed.

42
00:02:08.009 --> 00:02:12.006
You can check it by opening File, Project Structure.

43
00:02:12.006 --> 00:02:16.008
Under Project SDK, you should see Java 15.

44
00:02:16.008 --> 00:02:20.003
As we can see, this is a fresh Spring Boot application,

45
00:02:20.003 --> 00:02:24.009
which comes out of the box with Spring Boot Test Support.

46
00:02:24.009 --> 00:02:28.002
It provides a number of utilities and annotations

47
00:02:28.002 --> 00:02:30.007
to help when testing your application.

48
00:02:30.007 --> 00:02:32.008
These are the libraries we are going to use,

49
00:02:32.008 --> 00:02:35.009
JUnit5, the de facto standard

50
00:02:35.009 --> 00:02:38.001
for unit testing Java applications,

51
00:02:38.001 --> 00:02:42.003
SpringBootTest Utilities and Integration Test Support

52
00:02:42.003 --> 00:02:44.006
for Spring Boot applications,

53
00:02:44.006 --> 00:02:50.001
Mockito, a Java mocking framework, AssertJ fluent API,

54
00:02:50.001 --> 00:02:53.009
JSON Assert, an assertion library for JSON,

55
00:02:53.009 --> 00:02:56.000
and JSONPath, Xpath for J--

