WEBVTT
1
00:00:00.005 --> 00:00:01.006
- [Instructor] We have our service

2
00:00:01.006 --> 00:00:05.002
and client integration test on both end screen.

3
00:00:05.002 --> 00:00:08.002
But since they deviate in one or three bit name,

4
00:00:08.002 --> 00:00:10.005
they won't be able to work together.

5
00:00:10.005 --> 00:00:14.000
We want to make sure that any change on the service

6
00:00:14.000 --> 00:00:17.006
immediately impacts the client with a failing test.

7
00:00:17.006 --> 00:00:20.000
One way to get such assurance

8
00:00:20.000 --> 00:00:23.002
is by using Spring Cloud Contract.

9
00:00:23.002 --> 00:00:26.008
We will go ahead and define a contract in Groovy.

10
00:00:26.008 --> 00:00:29.001
In our students service application,

11
00:00:29.001 --> 00:00:34.000
under test, resources, contracts,

12
00:00:34.000 --> 00:00:37.000
we will create a new file,

13
00:00:37.000 --> 00:00:40.003
Should Return Student.groovy.

14
00:00:40.003 --> 00:00:42.002
This is the default directory

15
00:00:42.002 --> 00:00:45.004
where spring scans for all contracts.

16
00:00:45.004 --> 00:00:48.008
Don't be alarmed if you have not used Groovy before.

17
00:00:48.008 --> 00:00:51.008
Knowledge of the language is not really needed

18
00:00:51.008 --> 00:00:56.001
as DSL is statically typed to make it programmer readable

19
00:00:56.001 --> 00:00:59.004
without any knowledge of the DSL itself.

20
00:00:59.004 --> 00:01:04.008
Let's start by typing contract.make.

21
00:01:04.008 --> 00:01:11.000
First we add the description, should return a student.

22
00:01:11.000 --> 00:01:13.000
Then in the request,

23
00:01:13.000 --> 00:01:16.009
where we are going to define what a request will look like.

24
00:01:16.009 --> 00:01:19.008
We expect method of type get,

25
00:01:19.008 --> 00:01:25.005
and we'll arrive on the /students/1.

26
00:01:25.005 --> 00:01:28.009
And then we describe how response would look like.

27
00:01:28.009 --> 00:01:34.003
First by adding HTTP status, OK.

28
00:01:34.003 --> 00:01:38.005
and content type application JSON.

29
00:01:38.005 --> 00:01:43.000
Underbody, we can define response as JSON literal,

30
00:01:43.000 --> 00:01:48.003
or as an object which gets converted to JSON.

31
00:01:48.003 --> 00:01:51.008
Spring Cloud Contract provides the Maven plugin.

32
00:01:51.008 --> 00:01:54.007
And when running our Maven test score,

33
00:01:54.007 --> 00:01:56.008
this is going to read our contract

34
00:01:56.008 --> 00:01:59.006
and create an integration test.

35
00:01:59.006 --> 00:02:04.007
Since we're using MockMVC to verify our integration tests,

36
00:02:04.007 --> 00:02:08.000
we need to tell our Spring Cloud Contract plugin

37
00:02:08.000 --> 00:02:12.004
to use MockMVC as test mode.

38
00:02:12.004 --> 00:02:17.009
Let's run a Maven test call.

39
00:02:17.009 --> 00:02:21.000
Notice that our test failed but reached one.

40
00:02:21.000 --> 00:02:25.005
Noticed the class name Contract Verifier Test failed.

41
00:02:25.005 --> 00:02:27.005
We didn't write this class.

42
00:02:27.005 --> 00:02:30.007
it was generated by Spring Cloud Contract.

43
00:02:30.007 --> 00:02:33.006
We can open it in IntelliJ

44
00:02:33.006 --> 00:02:38.001
and see that it contains test method for API.

45
00:02:38.001 --> 00:02:42.002
Each failed because this is just a unit test.

46
00:02:42.002 --> 00:02:43.006
In order to fix it,

47
00:02:43.006 --> 00:02:46.003
it needs to be extend base class

48
00:02:46.003 --> 00:02:49.004
where we can set up spring integration test

49
00:02:49.004 --> 00:02:51.000
and Mock behavior.

50
00:02:51.000 --> 00:02:53.004
Since we don't have our base class yet,

51
00:02:53.004 --> 00:03:01.004
let's create one and call it Student Controller Base Class.

52
00:03:01.004 --> 00:03:02.007
In the Base Class,

53
00:03:02.007 --> 00:03:04.005
we need to do similar setup

54
00:03:04.005 --> 00:03:07.006
as we did in previous integration test.

55
00:03:07.006 --> 00:03:09.001
And that means,

56
00:03:09.001 --> 00:03:13.008
first, by setting up web MVC test slides,

57
00:03:13.008 --> 00:03:16.009
and second mock out student service

58
00:03:16.009 --> 00:03:19.007
get used by the end points.

59
00:03:19.007 --> 00:03:22.008
We can just copy paste the same configuration

60
00:03:22.008 --> 00:03:26.002
from the previous integration test,

61
00:03:26.002 --> 00:03:28.008
and add it within the new method

62
00:03:28.008 --> 00:03:32.001
which needs to run before each test.

63
00:03:32.001 --> 00:03:34.000
Let's call this method before,

64
00:03:34.000 --> 00:03:37.002
an annotated with before each.

65
00:03:37.002 --> 00:03:40.007
We also need to pass MockMVC bean

66
00:03:40.007 --> 00:03:51.009
by calling rest assured MockMVC.mockMVC

67
00:03:51.009 --> 00:03:53.003
We're not done yet.

68
00:03:53.003 --> 00:03:55.000
Between Maven plugin,

69
00:03:55.000 --> 00:04:01.006
we need to point out where is the Base Class.

70
00:04:01.006 --> 00:04:08.009
Now, let's rerun Maven clean and install.

71
00:04:08.009 --> 00:04:10.006
And we see it worked.

72
00:04:10.006 --> 00:04:14.009
Apart from running the test in a local main repository,

73
00:04:14.009 --> 00:04:17.006
it also stopped three things.

74
00:04:17.006 --> 00:04:20.002
Our students service jar,

75
00:04:20.002 --> 00:04:22.003
students service pom,

76
00:04:22.003 --> 00:04:24.007
and students service stubs jar

77
00:04:24.007 --> 00:04:27.002
which contains WireMock stub,

78
00:04:27.002 --> 00:04:29.007
we can use on the client's side.

79
00:04:29.007 --> 00:04:31.006
Producer side is done,

80
00:04:31.006 --> 00:04:35.000
we can now go to students-client application

81
00:04:35.000 --> 00:04:36.007
and use that stub.

82
00:04:36.007 --> 00:04:39.006
Since the stub will create an end point for us,

83
00:04:39.006 --> 00:04:43.002
we don't need to mock out responses in our client.

84
00:04:43.002 --> 00:04:47.006
We can just get rid of out to configure WireMock annotation

85
00:04:47.006 --> 00:04:49.007
and to stop configuration.

86
00:04:49.007 --> 00:04:52.003
What we need is stub runner,

87
00:04:52.003 --> 00:04:54.001
Here in the annotation,

88
00:04:54.001 --> 00:04:58.005
we need to put out to configure Stub runner

89
00:04:58.005 --> 00:05:00.006
and provide me even coordinates

90
00:05:00.006 --> 00:05:02.005
for a construct definition,

91
00:05:02.005 --> 00:05:05.004
so it knows from where to pull this stub from.

92
00:05:05.004 --> 00:05:09.002
This means providing ID of artifact.

93
00:05:09.002 --> 00:05:11.009
We will use plus to find the latest version

94
00:05:11.009 --> 00:05:14.005
and run it on port 8080.

95
00:05:14.005 --> 00:05:19.009
Make sure port is aligned with the port used by web client.

96
00:05:19.009 --> 00:05:23.007
Now we can run test again

97
00:05:23.007 --> 00:05:26.003
and we see it failed.

98
00:05:26.003 --> 00:05:30.000
It failed because our test was not able to find value

99
00:05:30.000 --> 00:05:32.000
for students name.

100
00:05:32.000 --> 00:05:40.009
Let's fix it easily by changing from student name to name.

101
00:05:40.009 --> 00:05:47.009
Rerun our test.

102
00:05:47.009 --> 00:05:49.002
And there you have it,

103
00:05:49.002 --> 00:05:50.006
our test passed.

104
00:05:50.006 --> 00:05:54.003
It was fast, we didn't need to mock up anything

105
00:05:54.003 --> 00:05:57.000
and it caught the bug we introduced earlier.

