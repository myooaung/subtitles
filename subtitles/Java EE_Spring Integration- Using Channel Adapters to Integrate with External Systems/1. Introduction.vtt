WEBVTT
1
00:00:00.340 --> 00:00:02.230
Welcome to the final module,

2
00:00:02.230 --> 00:00:06.350
Integrating with Custom External Systems in the Spring Integration: Using

3
00:00:06.350 --> 00:00:09.390
Channel Adapters to Integrate with External Systems course.

4
00:00:09.390 --> 00:00:10.830
In this module,

5
00:00:10.830 --> 00:00:14.860
we're going to review how to build custom inbound and outbound channel adapters.

6
00:00:14.860 --> 00:00:18.450
We'll start by reviewing our custom integration strategy to

7
00:00:18.450 --> 00:00:21.530
learn how we can integrate with systems for which Spring

8
00:00:21.530 --> 00:00:24.000
Integration does not have native support.

9
00:00:24.000 --> 00:00:27.950
Then we're going to review how to build a custom inbound channel adapter,

10
00:00:27.950 --> 00:00:32.140
and finally, we'll review how to build a custom outbound channel adapter.

11
00:00:32.140 --> 00:00:33.840
As we've seen through this course,

12
00:00:33.840 --> 00:00:37.270
inbound and outbound channel adapters share commonalities that we

13
00:00:37.270 --> 00:00:39.940
can leverage to build our own custom adapters.

14
00:00:39.940 --> 00:00:43.740
We saw several Spring Integration native inbound channel adapters

15
00:00:43.740 --> 00:00:46.820
that were ultimately some form of message source,

16
00:00:46.820 --> 00:00:51.160
and we saw outbound channel adapters that were some form of message handler.

17
00:00:51.160 --> 00:00:54.360
So if we want to integrate with a custom external system,

18
00:00:54.360 --> 00:00:57.460
all we need to do is create our own MessageSource and

19
00:00:57.460 --> 00:01:00.040
MessageHandler implementations.

20
00:01:00.040 --> 00:01:03.420
A MessageSource is a functional interface that defines a

21
00:01:03.420 --> 00:01:06.580
received method that returns a message.

22
00:01:06.580 --> 00:01:10.080
We have three options to build a custom MessageSource.

23
00:01:10.080 --> 00:01:10.870
First,

24
00:01:10.870 --> 00:01:13.200
we can implement our functionality inside our

25
00:01:13.200 --> 00:01:16.240
configuration class using a lambda expression.

26
00:01:16.240 --> 00:01:16.970
Next,

27
00:01:16.970 --> 00:01:19.900
we can create a new class that implements the message source

28
00:01:19.900 --> 00:01:22.710
interface and override its receive method.

29
00:01:22.710 --> 00:01:23.800
And finally,

30
00:01:23.800 --> 00:01:27.070
we can extend the abstract MessageSource class and

31
00:01:27.070 --> 00:01:28.790
implement its doReceive method.

32
00:01:28.790 --> 00:01:32.930
For the example in this module, we'll opt for the final option,

33
00:01:32.930 --> 00:01:36.440
namely extending the abstract MessageSource class.

34
00:01:36.440 --> 00:01:40.280
A MessageHandler is a functional interface that defines a

35
00:01:40.280 --> 00:01:43.700
handleMessage method that receives a message.

36
00:01:43.700 --> 00:01:46.970
We have similar options to build a custom MessageHandler.

37
00:01:46.970 --> 00:01:49.840
We can implement a MessageHandler using a lambda

38
00:01:49.840 --> 00:01:53.340
expression as we saw in the Mongo DB example.

39
00:01:53.340 --> 00:01:56.300
We can implement the MessageHandler interface and

40
00:01:56.300 --> 00:01:58.440
override its handleMessage method.

41
00:01:58.440 --> 00:01:59.310
And finally,

42
00:01:59.310 --> 00:02:02.640
we can extend the abstract MessageHandler class and

43
00:02:02.640 --> 00:02:05.370
override its handleMessage internal method.

44
00:02:05.370 --> 00:02:07.680
Again, for the example in this module,

45
00:02:07.680 --> 00:02:11.040
we'll opt to extend the abstract MessageHandler class.

46
00:02:11.040 --> 00:02:12.920
Putting all of this into a diagram,

47
00:02:12.920 --> 00:02:17.390
a publisher will send a message to a channel that triggers a service

48
00:02:17.390 --> 00:02:21.140
activator that invokes our custom MessageHandler.

49
00:02:21.140 --> 00:02:24.210
Our custom MessageHandler will implement the logic to

50
00:02:24.210 --> 00:02:26.770
send the message to the external system,

51
00:02:26.770 --> 00:02:30.300
then we'll define a message source with an inbound channel adapter

52
00:02:30.300 --> 00:02:35.020
annotation that defines a poller that invokes the message source.

53
00:02:35.020 --> 00:02:39.040
The message source will retrieve the data from the external system,

54
00:02:39.040 --> 00:02:42.290
and the inbound channel adapter will publish it to a channel

55
00:02:42.290 --> 00:02:45.240
that will ultimately be received by a consumer.

56
00:02:45.240 --> 00:02:47.700
We're going to need a sample external system,

57
00:02:47.700 --> 00:02:51.480
but to keep things simple and to keep us focused on the

58
00:02:51.480 --> 00:02:53.510
Spring Integration side of things,

59
00:02:53.510 --> 00:02:56.910
rather than on the complexities of an external system,

60
00:02:56.910 --> 00:03:00.280
we're going to implement a simple directory monitor.

61
00:03:00.280 --> 00:03:05.010
Well read reservations as JSON files from a local directory.

62
00:03:05.010 --> 00:03:08.940
And when creating reservations, we'll write them to a local directory.

63
00:03:08.940 --> 00:03:12.240
Spring Integration already has this functionality,

64
00:03:12.240 --> 00:03:16.460
but it'll be a simple example that will allow us to see all of the moving

65
00:03:16.460 --> 00:03:20.040
parts in creating inbound and outbound channel adapters.

66
00:03:20.040 --> 00:03:25.000
So let's get started by reviewing how to create a custom inbound channel adapter.

