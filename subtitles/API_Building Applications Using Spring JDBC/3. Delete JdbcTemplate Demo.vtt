WEBVTT
1
00:00:01.840 --> 00:00:03.890
To implement our delete functionality,

2
00:00:03.890 --> 00:00:08.440
we're going to follow the same approach we did with our update functionality.

3
00:00:08.440 --> 00:00:12.040
I'm going to start off by making sure that my server is stopped,

4
00:00:12.040 --> 00:00:16.300
and then I'm going to open up our test and scroll to the

5
00:00:16.300 --> 00:00:22.350
bottom of it and copy one of these existing tests that we

6
00:00:22.350 --> 00:00:26.240
have and just paste it down below.

7
00:00:26.240 --> 00:00:29.100
I'm going to change the name to testDelete.

8
00:00:29.100 --> 00:00:34.640
And inside of here, the delete is actually quite simple.

9
00:00:34.640 --> 00:00:38.070
We're just going to call the delete method with the URL

10
00:00:38.070 --> 00:00:41.740
of the ID that we want to delete.

11
00:00:41.740 --> 00:00:46.870
So we're going to say /delete and the actual ID of one

12
00:00:46.870 --> 00:00:48.860
of the ones that we want to delete.

13
00:00:48.860 --> 00:00:51.540
Now to figure out what that ID is,

14
00:00:51.540 --> 00:00:56.390
I'm actually going to switch over to my MySQL Workbench

15
00:00:56.390 --> 00:01:00.450
really quick and run a select statement and see what the last

16
00:01:00.450 --> 00:01:02.740
created record I have in there is.

17
00:01:02.740 --> 00:01:06.790
Your numbers may not be as high as mine because I have implemented the test a

18
00:01:06.790 --> 00:01:10.710
few extra times just to see some test data that's out there,

19
00:01:10.710 --> 00:01:13.590
but my last created record was 16.

20
00:01:13.590 --> 00:01:17.420
Again, it doesn't matter if yours is 9, 10, 11, whatever.

21
00:01:17.420 --> 00:01:22.460
I'm going to grab that number 16 there and we're going to switch

22
00:01:22.460 --> 00:01:26.700
over and say that we want to delete that URL.

23
00:01:26.700 --> 00:01:29.800
So localhost:8080/ride_tracker/delete/16,

24
00:01:29.800 --> 00:01:36.240
and 16 is going to be the ID that we catch inside of our controller.

25
00:01:36.240 --> 00:01:44.540
So let's save this, open up our controller,

26
00:01:44.540 --> 00:01:49.610
and inside of here we're going to go ahead and grab this

27
00:01:49.610 --> 00:01:54.530
getRide method that we've already created because we want to

28
00:01:54.530 --> 00:01:57.840
grab a path variable just like this one.

29
00:01:57.840 --> 00:02:00.570
Same thing, we'll go down to the bottom,

30
00:02:00.570 --> 00:02:04.290
paste that in, and instead of it being a value of /ride,

31
00:02:04.290 --> 00:02:08.480
we're going to do /delete and grab that ID and change

32
00:02:08.480 --> 00:02:12.240
the request method to delete as well.

33
00:02:12.240 --> 00:02:17.350
Now, for our return type we're going to just change this to Object,

34
00:02:17.350 --> 00:02:22.230
and I'll explain why here in a little bit. We'll change the method

35
00:02:22.230 --> 00:02:27.700
name to delete, and then we can change the code that calls our service

36
00:02:27.700 --> 00:02:30.570
tier and our return down below.

37
00:02:30.570 --> 00:02:34.670
Now as I mentioned a minute ago that we were going to return object type

38
00:02:34.670 --> 00:02:40.030
from our body, and this actually has to do with the REST service and

39
00:02:40.030 --> 00:02:44.630
returning a valid response versus an invalid response. And void will

40
00:02:44.630 --> 00:02:48.780
return a 404 error. Don't worry about it now, we're going to go into this

41
00:02:48.780 --> 00:02:52.420
deeper when we talk about exception handling in the next section, but

42
00:02:52.420 --> 00:03:01.640
we'll just say rideService.deleteRide, and this doesn't currently exist.

43
00:03:01.640 --> 00:03:06.830
We'll pass in the ID, and then we're going to below that say return null,

44
00:03:06.830 --> 00:03:10.040
just like we did with the batch up above.

45
00:03:10.040 --> 00:03:15.210
Now we can save this and click on the red X over in the left‑hand

46
00:03:15.210 --> 00:03:17.750
column, and just like we've done in previous modules,

47
00:03:17.750 --> 00:03:21.750
we're going to create that method deleteRide in our service tier.

48
00:03:21.750 --> 00:03:26.830
And this is going to say void deleteRide and take an Integer id,

49
00:03:26.830 --> 00:03:30.650
we'll save that, and now it will ask us to provide an

50
00:03:30.650 --> 00:03:33.840
implementation in our RideServiceImpl.

51
00:03:33.840 --> 00:03:40.070
I'm just going to scroll down to the bottom of here, hit Ctrl+spacebar, and

52
00:03:40.070 --> 00:03:45.110
add the deleteRide functionality. And this will just call our

53
00:03:45.110 --> 00:03:56.240
rideRepository.deleteRide, and it will take the ID as well.

54
00:03:56.240 --> 00:04:01.200
We'll save this. And same as before, we'll click that red X and say

55
00:04:01.200 --> 00:04:05.340
Create method deleteRide in our RideRepository.

56
00:04:05.340 --> 00:04:13.840
Save that, and now we can add our implementation to our RideRepositoryImpl.

57
00:04:13.840 --> 00:04:18.520
Now inside of here I'm going to scroll down to the bottom and

58
00:04:18.520 --> 00:04:23.080
make sure I'm inside that closing curly brace, hit Ctrl+spacebar,

59
00:04:23.080 --> 00:04:28.940
and add the deleteRide functionality in here. And now we can call

60
00:04:28.940 --> 00:04:31.460
our jdbcTemplate update.

61
00:04:31.460 --> 00:04:39.740
So we'll say jdbcTemplate.update.

62
00:04:39.740 --> 00:04:45.040
And we're going to just pass inside of here some basic SQL of delete

63
00:04:45.040 --> 00:04:53.550
from ride where id = ?, close that quote off, and then we're going to

64
00:04:53.550 --> 00:04:58.740
pass in the id and close that statement off.

65
00:04:58.740 --> 00:05:02.230
That's all we have to do to actually implement our delete

66
00:05:02.230 --> 00:05:06.140
functionality inside of our repository.

67
00:05:06.140 --> 00:05:11.180
I'm going to exit full screen, start our server backup,

68
00:05:11.180 --> 00:05:13.940
make sure that there's no errors on startup,

69
00:05:13.940 --> 00:05:20.400
everything looks good there. And then I'm going to switch back to our test and

70
00:05:20.400 --> 00:05:25.760
make sure you've updated your ID with the correct one from your database, and

71
00:05:25.760 --> 00:05:36.230
then I'm going to right‑click on my testDelete and say Run As, JUnit Test, and

72
00:05:36.230 --> 00:05:42.810
when this is done I will see a green bar here and I can switch over to my MySQL

73
00:05:42.810 --> 00:05:49.360
Workbench, execute that select statement again, and record 16 has been deleted

74
00:05:49.360 --> 00:05:51.240
from our database.

75
00:05:51.240 --> 00:05:52.290
It's pretty straightforward.

76
00:05:52.290 --> 00:05:54.340
Let's walk through that again.

77
00:05:54.340 --> 00:06:00.360
We went ahead and created that RestTemplate delete and we did URL rewriting

78
00:06:00.360 --> 00:06:06.950
and just tacked the ID onto the end of there. Inside of our controller, we

79
00:06:06.950 --> 00:06:12.010
have a delete method that we created that does URL rewriting and grabs an ID

80
00:06:12.010 --> 00:06:20.690
off of that and then it uses the method type of delete and grabs that ID,

81
00:06:20.690 --> 00:06:23.140
passing it to our service tier.

82
00:06:23.140 --> 00:06:27.550
Our service tier passes that through to our repository where we now

83
00:06:27.550 --> 00:06:31.820
implement our update to issue the delete statement,

84
00:06:31.820 --> 00:06:34.340
passing that ID in.

85
00:06:34.340 --> 00:06:36.800
In the next section, we're going to go through and show

86
00:06:36.800 --> 00:06:45.000
you how to do the same thing using named parameters to get rid of that question mark.

