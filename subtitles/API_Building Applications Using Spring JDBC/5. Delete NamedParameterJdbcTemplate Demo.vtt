WEBVTT
1
00:00:01.040 --> 00:00:04.920
This is where we left off after the previous demo of

2
00:00:04.920 --> 00:00:07.940
implementing our deleteRide functionality.

3
00:00:07.940 --> 00:00:12.450
I'm going to go ahead and give myself some whitespace down below here to

4
00:00:12.450 --> 00:00:17.340
create a new instance of a NamedParameterJdbcTemplate.

5
00:00:17.340 --> 00:00:18.830
Now if you like this approach,

6
00:00:18.830 --> 00:00:24.960
you don't have to create this NamedParameterJdbcTemplate per

7
00:00:24.960 --> 00:00:31.840
method, you can create one up above and pass that in.

8
00:00:31.840 --> 00:00:35.200
So, all we want to do is create that instance and use

9
00:00:35.200 --> 00:00:38.940
our NamedParameterJdbcTemplate.

10
00:00:38.940 --> 00:00:41.890
I'll go ahead and bring this down to the next line so that you can see

11
00:00:41.890 --> 00:00:50.140
the whole thing. And from here, we now need to create a map with our

12
00:00:50.140 --> 00:00:57.110
name value pairs in it. So we'll say Map and import a java.util map,

13
00:00:57.110 --> 00:01:01.740
and it's a String Object pair.

14
00:01:01.740 --> 00:01:10.440
We'll call this paramMap. And this is equal to a new HashMap.

15
00:01:10.440 --> 00:01:19.210
And inside of here, we're going to say paramMap.put, and we'll pass in the

16
00:01:19.210 --> 00:01:29.780
string of id and the value of id. And now all we have to do is that similar SQL

17
00:01:29.780 --> 00:01:33.770
that we implemented up above, but we no longer have the parameters of question

18
00:01:33.770 --> 00:01:42.560
marks in here, rather named parameters. So we'll say namedTemplate.update, and I

19
00:01:42.560 --> 00:01:48.630
am going to grab the SQL from up above and just modify it to show you the change

20
00:01:48.630 --> 00:01:59.750
here. So we'll paste that in, and this is now changed to id and we pass in our

21
00:01:59.750 --> 00:02:02.240
paramMap.

22
00:02:02.240 --> 00:02:08.280
This may seem like a little bit of overkill for just this one parameter,

23
00:02:08.280 --> 00:02:12.510
and I won't argue that it's not, but think in terms of if you had a

24
00:02:12.510 --> 00:02:15.840
search screen where you were maybe passing in 5,

25
00:02:15.840 --> 00:02:16.340
10,

26
00:02:16.340 --> 00:02:20.630
15 different parameters that you're trying to gather and then have that

27
00:02:20.630 --> 00:02:23.940
dynamically map to the SQL in the right positions.

28
00:02:23.940 --> 00:02:27.190
This is a lot better approach than trying to use question marks

29
00:02:27.190 --> 00:02:30.620
and get those built the right way in there because I can just pass

30
00:02:30.620 --> 00:02:34.140
that map of parameterized values in.

31
00:02:34.140 --> 00:02:38.720
Now that we've saved that, I'm going to exit full screen and

32
00:02:38.720 --> 00:02:44.060
switch over to my workbench to see what the last created record I

33
00:02:44.060 --> 00:02:46.560
have in there, and the ID is 15 for me,

34
00:02:46.560 --> 00:02:49.890
yours may be something different depending on how many times you've

35
00:02:49.890 --> 00:02:57.310
run this test. Now we can go back to our test and change the ID of

36
00:02:57.310 --> 00:02:59.140
the record that we want to delete.

37
00:02:59.140 --> 00:03:04.240
I'm going to change mine to 15 because that was the last record I have in there.

38
00:03:04.240 --> 00:03:09.490
Make sure your server is started up, and then rightâ€‘click

39
00:03:09.490 --> 00:03:16.340
on that test and say Run As, JUnit Test,

40
00:03:16.340 --> 00:03:21.660
verify that it came back green, which it did. Switch back over to

41
00:03:21.660 --> 00:03:28.150
our workbench, and 15 has now been deleted. And again, what we had

42
00:03:28.150 --> 00:03:33.590
to change there was inside of our RideRepositoryImpl to use that

43
00:03:33.590 --> 00:03:36.050
NamedParameterJdbcTemplate.

44
00:03:36.050 --> 00:03:46.000
So the NamedParameterJdbcTemplate just gives us another option instead of having those question marks inside of our application.

