1
00:00:02,240 --> 00:00:05,930
If you didn't like using that KeyHolder to obtain the

2
00:00:05,930 --> 00:00:08,840
ID of our newly inserted record,

3
00:00:08,840 --> 00:00:12,550
there is one other option, and that is to use the

4
00:00:12,550 --> 00:00:15,230
SimpleJdbcInsert that we had earlier.

5
00:00:15,230 --> 00:00:18,870
I'll let you decide which one you like better. I'm comfortable with

6
00:00:18,870 --> 00:00:23,070
anonymous inner classes, but a lot of people aren't. First, let's start off

7
00:00:23,070 --> 00:00:27,240
by stopping our server so it's not trying to redeploy as we make these

8
00:00:27,240 --> 00:00:32,640
changes. And when we go into our RideRepository,

9
00:00:32,640 --> 00:00:36,510
that keyHolder that we just created down to the number

10
00:00:36,510 --> 00:00:39,100
ID, let's just comment that out.

11
00:00:39,100 --> 00:00:43,140
You can compare on your own as to which one you like better.

12
00:00:43,140 --> 00:00:47,550
I'm going to go into the notes.txt that I had mentioned earlier that we

13
00:00:47,550 --> 00:00:54,190
pasted in and grab that code now. We'll come back over and paste that in

14
00:00:54,190 --> 00:01:04,940
below and uncomment it, and you can see here that we have a

15
00:01:04,940 --> 00:01:10,630
SimpleJdbcInsert, it's exactly what we had written before, and we had to set

16
00:01:10,630 --> 00:01:14,310
up our GeneratedKeyName and map our columns,

17
00:01:14,310 --> 00:01:20,100
map our data, call set on it, but it does have that one helper function

18
00:01:20,100 --> 00:01:25,340
of executeAndReturnKey that we can see down here.

19
00:01:25,340 --> 00:01:28,160
Now we can save that,

20
00:01:28,160 --> 00:01:34,890
go back to our RestController and change this to another name,

21
00:01:34,890 --> 00:01:40,940
we'll say the Yellow Fork Trail, and save it.

22
00:01:40,940 --> 00:01:46,040
We'll start our server back up.

23
00:01:46,040 --> 00:01:49,440
Now we can rightâ€‘click on our testCreateRide,

24
00:01:49,440 --> 00:01:57,740
Run As, JUnit Test, and see that it was successful.

25
00:01:57,740 --> 00:02:04,210
Run our testGetRides again and see that it now has our

26
00:02:04,210 --> 00:02:07,940
Yellow Fork Trail down there as well.

27
00:02:07,940 --> 00:02:12,970
So, not a lot of code changes saved as far as one over the other,

28
00:02:12,970 --> 00:02:19,770
but you do eliminate that anonymous inner class inside of your code and

29
00:02:19,770 --> 00:02:23,000
you're just dealing with these maps to swap data in and out.

30
00:02:23,000 --> 00:02:30,340
You don't have any SQL, it acts more like an ORM, so it's really which is more

31
00:02:30,340 --> 00:02:34,410
beneficial to you for what you would like to do. If your inserts are always

32
00:02:34,410 --> 00:02:37,160
going to return this and you like the ORM syntax,

33
00:02:37,160 --> 00:02:39,490
maybe you'll go with this approach. If you don't

34
00:02:39,490 --> 00:02:43,990
mind that anonymous inner class, you have this approach as well.

35
00:02:43,990 --> 00:02:45,640
Both work well,

36
00:02:45,640 --> 00:02:50,250
it's all a matter of which is easier for you. In terms of

37
00:02:50,250 --> 00:02:59,000
efficiency, they're both prepared statements so they get both compiled and ran with the same efficiency.

