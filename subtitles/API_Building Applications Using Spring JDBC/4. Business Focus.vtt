WEBVTT
1
00:00:01.701 --> 00:00:05.583
I used this exact same example in my Spring fundamentals course,

2
00:00:05.583 --> 00:00:09.101
but let's talk about business focus for a minute.

3
00:00:09.101 --> 00:00:14.701
If you've ever done much database development in Java, you've used JDBC.

4
00:00:14.701 --> 00:00:17.401
And JDBC at first glance doesn't look that bad,

5
00:00:17.401 --> 00:00:21.401
but then you really start picking it apart and it's really not pretty.

6
00:00:21.401 --> 00:00:25.251
Look at all this extra stuff we have in our code,

7
00:00:25.251 --> 00:00:27.701
just to do a simple select statement.

8
00:00:27.701 --> 00:00:30.701
We have connections and prepared statements and result sets,

9
00:00:30.701 --> 00:00:35.610
and then we have this try catch finally block and we have a driver manager.

10
00:00:35.610 --> 00:00:39.428
We have all of this stuff in there and look at that

11
00:00:39.428 --> 00:00:42.519
great big finally block of if rs = null,

12
00:00:42.519 --> 00:00:45.428
if statement = null, if connection = null,

13
00:00:45.428 --> 00:00:49.751
and then we also have these empty curly braces just catching exceptions.

14
00:00:49.751 --> 00:00:55.001
There's a big bunch of just code in here when really all of our business

15
00:00:55.001 --> 00:01:00.201
cares about is this single line right here where we say select whatever

16
00:01:00.201 --> 00:01:04.701
fields are in the CAR table where this ID = whatever,

17
00:01:04.701 --> 00:01:10.301
and then we only grab the other line that our business really cares about,

18
00:01:10.301 --> 00:01:15.701
and that is the actual string, and store it in a Java object and return it.

19
00:01:15.701 --> 00:01:18.700
Now this may look like a great selling point for

20
00:01:18.700 --> 00:01:20.789
Hibernate instead of Spring JDBC,

21
00:01:20.789 --> 00:01:25.263
but I'm actually going to show you that Spring JDBC

22
00:01:25.263 --> 00:01:27.500
handles this example really well.

23
00:01:27.500 --> 00:01:30.750
So all these places that we're assigning things and

24
00:01:30.750 --> 00:01:40.000
handling stuff and closing all these connections can easily be handled by Spring JDBC for us.

