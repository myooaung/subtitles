1
00:00:00,840 --> 00:00:03,940
To show you the SimpleJdbcInsert,

2
00:00:03,940 --> 00:00:08,060
I am actually going to comment out the tdbcTemplate example

3
00:00:08,060 --> 00:00:11,600
that we had done earlier because I'm going to revert our code

4
00:00:11,600 --> 00:00:13,840
back to that after we're done.

5
00:00:13,840 --> 00:00:15,770
If you are using GitHub,

6
00:00:15,770 --> 00:00:20,810
maybe you want to branch this example and do it in a separate branch and you

7
00:00:20,810 --> 00:00:24,350
can save it and look at it later or revert back to it,

8
00:00:24,350 --> 00:00:28,690
whatever you choose, just for this example I'm going to comment it out.

9
00:00:28,690 --> 00:00:34,940
Now there are a few reasons that I want to show you the SimpleJdbcInsert.

10
00:00:34,940 --> 00:00:42,560
It's an alternative, and it acts like an ORM more than a straight database call.

11
00:00:42,560 --> 00:00:46,830
So we're going to start off by creating a new instance of the new

12
00:00:46,830 --> 00:00:55,110
SimpleJdbcInsert, and this takes a jdbcTemplate in here.

13
00:00:55,110 --> 00:00:58,240
So it's built upon the JdbcTemplate.

14
00:00:58,240 --> 00:01:01,170
Now there's a lot more set up with this, but if you're

15
00:01:01,170 --> 00:01:03,510
going to use this in multiple places,

16
00:01:03,510 --> 00:01:08,230
you can create one SimpleJdbcInsert and set some of

17
00:01:08,230 --> 00:01:10,530
these values up per repository.

18
00:01:10,530 --> 00:01:14,040
You don't have to do this in every method.

19
00:01:14,040 --> 00:01:18,240
I'm going to go ahead and now create our list of columns.

20
00:01:18,240 --> 00:01:22,750
So you have to tell this what to work with as far

21
00:01:22,750 --> 00:01:25,740
as the columns in your database.

22
00:01:25,740 --> 00:01:30,240
So it's a little more verbose upfront with some of the configuration.

23
00:01:30,240 --> 00:01:40,210
So we'll say columns and then we're going to make a new ArrayList, and then we

24
00:01:40,210 --> 00:01:43,450
want to go ahead and add what our column names are in here.

25
00:01:43,450 --> 00:01:49,620
So we'll say columns.add, and we're just going to pass a string

26
00:01:49,620 --> 00:01:58,080
in here of name, and then we want to do columns.add, pass

27
00:01:58,080 --> 00:02:00,980
another string in here for duration.

28
00:02:00,980 --> 00:02:05,590
So these are the columns in our database. Just like we had

29
00:02:05,590 --> 00:02:08,970
created in our simple select statement up above, we're going to

30
00:02:08,970 --> 00:02:12,740
now map this object to that database.

31
00:02:12,740 --> 00:02:17,150
The next thing that we need to do is we need to set our table name.

32
00:02:17,150 --> 00:02:25,280
So we'll say insert.setTableName, and our table name

33
00:02:25,280 --> 00:02:33,240
is ride, and insert.setColumns.

34
00:02:33,240 --> 00:02:39,140
So we'll set our column names in there and we just called our columns.

35
00:02:39,140 --> 00:02:45,140
Now, we're finally down to where we can start putting the data in here.

36
00:02:45,140 --> 00:02:50,720
We want to create a map, and this is going to go through a simple map

37
00:02:50,720 --> 00:02:59,170
instance with a string and an object for the key and value pair. We'll

38
00:02:59,170 --> 00:03:09,640
call this data = new HashMap, and inside of here we can start putting

39
00:03:09,640 --> 00:03:15,270
our data in there. So we'll say data.put, and for the key it's going to

40
00:03:15,270 --> 00:03:16,470
be our column name.

41
00:03:16,470 --> 00:03:28,970
So for the name we're going to put in the value of ride.getName, and for the

42
00:03:28,970 --> 00:03:38,940
duration we'll say data.put and we'll give it a name of duration and the

43
00:03:38,940 --> 00:03:45,540
parameter we're going to pass in is ride.getDuration.

44
00:03:45,540 --> 00:03:47,070
And we're almost ready to run this.

45
00:03:47,070 --> 00:03:50,940
We've got to do one more thing.

46
00:03:50,940 --> 00:03:56,880
One of the benefits of using the SimpleJdbcInsert is that we can return the

47
00:03:56,880 --> 00:04:00,970
key that was created automatically from the database.

48
00:04:00,970 --> 00:04:04,780
So if you'll remember when we created that table we had an id column and it was

49
00:04:04,780 --> 00:04:10,430
an autoincrementing field. In one call we can get back that ID. So we can say

50
00:04:10,430 --> 00:04:21,950
insert.setGeneratedKeyName and we can pass in that it was the column name id.

51
00:04:21,950 --> 00:04:36,040
Now we're ready to say Number key = insert.executeAndReturnKey and pass in that

52
00:04:36,040 --> 00:04:41,910
data that we had just created. Just to show that the key is getting a return,

53
00:04:41,910 --> 00:04:49,060
I'm going to go ahead and throw a System.out.println for a test value here

54
00:04:49,060 --> 00:04:55,220
until we replace that return null and pass in the key value to it and see what

55
00:04:55,220 --> 00:04:59,670
happens. Now if your server is still running, it should automatically redeploy,

56
00:04:59,670 --> 00:05:06,730
but if it doesn't, you may want to restart your server. Once that's up and

57
00:05:06,730 --> 00:05:12,950
running, we can go ahead and open up our unit test and go back to our

58
00:05:12,950 --> 00:05:18,410
CreateRide unit test, and I'm going to change this to another trail ride name

59
00:05:18,410 --> 00:05:23,410
that I like called Round Valley, one of my favorite rides here locally, and

60
00:05:23,410 --> 00:05:29,790
change it to 38 minutes and save that just so we have another data point

61
00:05:29,790 --> 00:05:31,610
getting added to our database.

62
00:05:31,610 --> 00:05:35,640
Rightâ€‘click and say Run As, JUnit Test.

63
00:05:35,640 --> 00:05:40,770
Once this completes, we should see that our

64
00:05:40,770 --> 00:05:44,230
testCreateRide completed successfully.

65
00:05:44,230 --> 00:05:48,520
If we switch back to our console, you'll see that ID number 5 was

66
00:05:48,520 --> 00:05:52,440
printed out on that System.out.println, and we can verify that by going

67
00:05:52,440 --> 00:05:57,080
to our workbench and running that execute statement again for the select

68
00:05:57,080 --> 00:06:02,530
*, and ID number 5 was in fact created with the Round Valley Ride with a

69
00:06:02,530 --> 00:06:04,540
duration of 38 minutes.

70
00:06:04,540 --> 00:06:08,200
So we've looked at that alternative way of using that

71
00:06:08,200 --> 00:06:12,580
SimpleJdbcInsert, which isn't bad,

72
00:06:12,580 --> 00:06:17,410
it's just not my favorite because of the amount of prep work that

73
00:06:17,410 --> 00:06:21,400
you have to do to get it ready to use. We have to define the

74
00:06:21,400 --> 00:06:24,230
SimpleJdbcInsert, we have to list the columns,

75
00:06:24,230 --> 00:06:29,620
set the table, we have to bind all of our data to a hash map and pass

76
00:06:29,620 --> 00:06:34,670
it in, but I do like the option of getting that key back in one call

77
00:06:34,670 --> 00:06:37,620
using the executeAndReturnKey approach.

78
00:06:37,620 --> 00:06:42,290
So there's a few tradeoffs, and as I mentioned also you can create one

79
00:06:42,290 --> 00:06:47,860
SimpleJdbcInsert and utilize that throughout your repository.

80
00:06:47,860 --> 00:06:53,080
So maybe you only do this in the setup of the object one time

81
00:06:53,080 --> 00:06:55,740
and use it throughout all of your methods.

82
00:06:55,740 --> 00:07:02,070
I am going to uncomment our SimpleJdbcTemplate update from before and

83
00:07:02,070 --> 00:07:08,790
comment out the code that we just did using the SimpleJdbcInsert so

84
00:07:08,790 --> 00:07:14,000
that my method is just using the JdbcTemplate and not the

85
00:07:14,000 --> 00:07:23,000
SimpleJdbcInsert because the other methods we're going to use just use the JdbcTemplate approach.

