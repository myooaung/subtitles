WEBVTT

00:05.550 --> 00:07.000
Hello and welcome back.

00:07.110 --> 00:12.030
In this lecture I want to provide you with the ability to test your knowledge of the bridge design pattern.

00:12.030 --> 00:18.990
So we have another assignment another challenge here is a current design that you're going to fix using

00:18.990 --> 00:20.530
the bridge pattern right.

00:20.540 --> 00:22.910
You can see all this messiness ALL THIS THING.

00:22.920 --> 00:24.430
EVERYTHING'S tangled up.

00:24.450 --> 00:28.670
We want to separate this current design into separate hierarchies.

00:28.680 --> 00:29.590
We want to have shapes.

00:29.610 --> 00:33.210
And then each shape has a color so we can have a separate hierarchy for shape.

00:33.210 --> 00:35.140
And we can have a separate hierarchy for color.

00:35.280 --> 00:41.040
Color would act as the implementer and the bridge design pattern and shape would act as the abstraction.

00:41.040 --> 00:43.850
Shape would have a has a relationship with a color.

00:43.860 --> 00:50.310
We can then take out the other colors green color red color and so forth from different shapes.

00:50.310 --> 00:55.730
They're no longer loosely coupled the different shapes would just use the colors with a has a relationship

00:56.220 --> 00:59.990
but we want to separate the implement or from the abstraction.

01:00.000 --> 01:05.070
And right now this current design they are not separate at all the abstraction is shape and all the

01:05.070 --> 01:10.360
implementers are inside the rectangle and triangle because they're using colors.

01:10.360 --> 01:11.620
There's all this tangled mess.

01:11.850 --> 01:14.210
So we want to solve this problem.

01:14.610 --> 01:18.660
So we want to use the bridge pattern to decouple the above design.

01:18.660 --> 01:24.360
We want to have the abstraction side be the shape side and the implementer side be the colors.

01:24.360 --> 01:29.560
After this redesign and implementation it will have a much cleaner look and you'll have this decoupling.

01:29.610 --> 01:33.930
You have this ability to change either side without affecting one or the other side.

01:33.930 --> 01:39.720
The resulting implementation will include an abstraction specific and an implementer specific method

01:40.110 --> 01:42.820
to represent the power and useful moves of this pattern.

01:43.670 --> 01:43.890
OK.

01:43.920 --> 01:46.200
So you're required to write a drawing program.

01:46.200 --> 01:51.420
You're going to allow the user to draw different shapes filled with different colors in different border

01:51.420 --> 01:53.110
sizes.

01:53.130 --> 01:59.220
This program will consist of a drawing interface which acts as a bridge implements or the interface

01:59.250 --> 02:02.690
should be named color eye color color interface.

02:02.820 --> 02:08.610
It could include a single method fill with color that takes an into border concrete class of this interface

02:08.610 --> 02:11.040
should be named Red Circle and green circle.

02:11.400 --> 02:15.030
You can implement these would implement the fill with color by just putting out a message.

02:15.030 --> 02:20.170
No real behavior because we're just demonstrating the bridge pattern in its use.

02:20.400 --> 02:25.710
The bridge abstraction side the hierarchy should include an abstract class named shape which will use

02:25.710 --> 02:26.690
the drawing interface.

02:26.690 --> 02:28.600
It will have a has a relationship.

02:28.680 --> 02:35.040
It will include abstract methods to draw shapes and modify borders you'll need to create concrete classes

02:35.040 --> 02:36.640
for implementing the shape interface.

02:36.660 --> 02:41.070
The refined abstractions those are named triangle and rectangle.

02:41.070 --> 02:46.030
We can draw these shapes with a particular color with the implement or specific method draw shape.

02:46.320 --> 02:53.460
We can change the thickness of the border by the abstraction specific method modify border.

02:53.460 --> 02:59.460
You need to write a main class or a client that will use the shape class to draw different colored circles

03:01.130 --> 03:06.150
and so some example output would be something like the following you'd have an ID at the bridge and

03:06.150 --> 03:07.240
you have the bridge pattern.

03:08.380 --> 03:13.680
You could say I'm coloring a triangle this triangles colored with green color and 20 inch border.

03:13.720 --> 03:17.770
This is obviously the extractor side using the implementer side.

03:19.090 --> 03:24.190
And then you can change the border length three times and the trier colored with green color with 60

03:24.190 --> 03:25.080
inch border.

03:25.360 --> 03:31.360
So you'll see that things are still changed and modified when you call the implementer and you can do

03:31.360 --> 03:34.250
this for both shapes triangle and rectangle.

03:34.390 --> 03:38.800
Draw a couple triangles and rectangles with different colors different filled in colors with different

03:38.800 --> 03:45.790
border sizes and that will demonstrate the use of the bridge pattern the steps to complete the challenge

03:46.340 --> 03:49.250
are you're going to have to create the bridge implementer interface.

03:49.290 --> 03:51.600
I mentioned that early the color interface.

03:51.610 --> 03:56.740
That's the implementer side you're going to have to create the concrete bridge and blender classes.

03:56.740 --> 04:02.070
Implementing this implement or interface green color red color you're gonna have to create an after

04:02.080 --> 04:10.090
class shape using the color interface that has a relationship that breaks the dependency their composition

04:10.150 --> 04:11.440
over inheritance.

04:11.440 --> 04:16.420
We don't have to have a ton of subclasses color subclasses on the extractor side.

04:16.420 --> 04:22.480
We can just have those separate create concrete classes implementing the shape interface triangle and

04:22.480 --> 04:29.230
rectangle and then use the shape and the color interfaces classes to draw different colored shapes.

04:29.230 --> 04:30.950
That's what we're trying to accomplish here.

04:30.970 --> 04:32.050
So good luck.

04:32.050 --> 04:36.700
I'll provide a solution in the next lecture that will go through all these requirements and show you

04:36.700 --> 04:38.560
how the bridge is implemented.

04:38.560 --> 04:38.910
Thank you.
