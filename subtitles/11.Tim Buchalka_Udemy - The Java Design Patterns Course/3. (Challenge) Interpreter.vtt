WEBVTT

00:05.430 --> 00:06.640
Hello and welcome.

00:06.660 --> 00:07.740
I have another challenge for you.

00:07.740 --> 00:11.070
This is a challenge for the interpreter design pattern.

00:11.120 --> 00:14.130
We're gonna write a simple application that uses this pattern.

00:14.310 --> 00:18.590
And so what we have to do if we want to use this pattern is we have to define what senses we're going

00:18.590 --> 00:19.700
to interpret.

00:19.800 --> 00:23.430
And so what this application is going to do is it's going to protectorate sentences that contain the

00:23.430 --> 00:31.320
words and had the word or with an expression on each side an expression and an expression an expression

00:31.380 --> 00:32.970
or an expression.

00:32.970 --> 00:37.810
And so it will return a boolean result based on and in awe or logic.

00:37.920 --> 00:38.170
Right.

00:38.190 --> 00:42.990
So for ads in order for that to be true both expressions on the left and the right hand side have to

00:42.990 --> 00:50.830
be true and for expressions only one of them have to be true our first step will be to write the interpreter

00:50.830 --> 00:54.090
context class that will do the actual interpretation.

00:54.130 --> 00:58.350
So you're going to see what an expression represents as well an expression is not going to be a number

00:58.360 --> 01:00.780
it's going to just be a string.

01:00.850 --> 01:02.890
So we're going to write the interpreter context class.

01:02.950 --> 01:05.320
This will do the actual interpretation.

01:05.320 --> 01:08.830
It's going to determine when to to return true or false.

01:08.830 --> 01:14.350
The class is going to contain a string that represents the input and you're going to need to create

01:14.350 --> 01:19.600
a get result function that returns true if the input contains the data of the expression.

01:19.600 --> 01:23.790
So you can just use the string contains Method After we create in context.

01:23.800 --> 01:26.670
We're then going to need to create the expression interface.

01:26.680 --> 01:30.720
This should include a single interpret method that takes a context and returns a boolean.

01:30.790 --> 01:33.880
There's only one term in a class required for this language.

01:33.940 --> 01:37.580
It's going to contain a constructor that sets the data for the expression.

01:37.750 --> 01:41.530
Remember the terminal class is what ends the recursion for non terminal classes.

01:41.560 --> 01:44.130
It's an actual it's actual data.

01:44.260 --> 01:46.150
It's not a variable.

01:46.150 --> 01:50.110
The terminal class is going to implement the interpret method by calling the context.

01:50.110 --> 01:57.560
Get result method in passing in the expression data you're going to also have to create new town two

01:57.570 --> 01:59.660
non terminal expression classes.

01:59.700 --> 02:05.720
We didn't do this in the example but you should have enough information to implement it.

02:05.880 --> 02:11.760
You're going to need to create one for and in one for each class should contain two expression references

02:11.790 --> 02:14.250
because this is how the non terminal classes work.

02:14.400 --> 02:21.450
They have to have a reference for both expressions the end and the R and those are set in the constructor

02:22.290 --> 02:28.440
and then the interpret method should basically just do an and or an or the two expression references

02:29.390 --> 02:32.470
and you'll have to use recursion for this implementation right.

02:32.490 --> 02:38.700
So if it's doing an and it will recursively call it and method for the two expression references and

02:38.700 --> 02:41.930
eventually it will catch a terminal and it will end.

02:41.960 --> 02:47.340
So really all you need to do is the interpret method is call the same interpret what you're doing and

02:47.340 --> 02:47.550
on it.

02:47.550 --> 02:52.650
So you do it for the both expressions and the same for the or the last step is to create the client

02:53.190 --> 02:59.160
you're going to need to create at least two terminal expressions that contain strings so use each one

02:59.160 --> 03:05.780
to pass into your non terminal expression your end in your classes you need to create a context with

03:05.780 --> 03:12.130
an input that will return true or false based on which non terminal expression was created and or an.

03:12.290 --> 03:18.020
So for example you could create two terminal expressions that represent a person in marriage.

03:18.020 --> 03:20.620
One would be Jason and another would be married.

03:20.690 --> 03:22.360
Those are terminal expressions.

03:22.370 --> 03:29.040
Jason married you would create instances of terminal class you then would create a non terminal expression

03:29.070 --> 03:31.010
and representing.

03:31.110 --> 03:34.490
If two people are married using your two terminal expressions.

03:34.830 --> 03:36.660
So you have two terminal expressions.

03:36.680 --> 03:40.340
You gonna create a non terminal expression and you get a pass in those two.

03:40.350 --> 03:45.360
You can just pass them into the constructor and then if you create a context that represents is Jason

03:45.360 --> 03:46.920
married for example.

03:46.920 --> 03:49.490
String married Jason the.

03:49.590 --> 03:56.850
And expression should interpret this as true because when it goes into the interpret function interpret

03:56.850 --> 04:03.000
method I should say of the end non terminal class it will no married is one non terminal.

04:03.000 --> 04:09.230
Jason is another non terminal and we'll call the context to see if each one of those is contained in

04:09.260 --> 04:09.440
four.

04:09.450 --> 04:13.290
And both of them have to be in the string four or only one of them.

04:13.350 --> 04:18.720
So if we create a context that represents John married the end expression should interpret this as false

04:19.020 --> 04:22.520
because there's not two non terminals for John married.

04:22.620 --> 04:28.020
You'll notice that this client class represents the grammar it contains an instance for each terminal

04:28.110 --> 04:29.610
in each non terminal.

04:29.610 --> 04:35.610
Jason and John are terminals and in the end all caps is a non terminal because that's just a symbol

04:36.300 --> 04:39.690
that's gonna be represent a non terminal.

04:39.690 --> 04:39.930
All right.

04:39.930 --> 04:41.160
So this is what it's all about.

04:41.160 --> 04:44.610
It's also could be thought of as an abstract syntax tree.

04:44.610 --> 04:49.510
Another example would be to create the following two terminal expressions that represent a person.

04:49.560 --> 04:50.340
One is Lucy.

04:50.340 --> 04:51.870
And another is Myra.

04:51.870 --> 04:57.720
You then create a non terminal expression or representing a female by using the two terminal expressions

04:57.720 --> 04:59.670
you created Lucy and Myra.

04:59.670 --> 05:06.060
You can then pass these expressions into my into your non terminal or expression constructor if you

05:06.060 --> 05:08.920
create a context such as Lucy female.

05:09.270 --> 05:15.940
Lucy the expression should interpret this as true if you create a context is Maya a female.

05:15.940 --> 05:16.790
Myra.

05:17.050 --> 05:19.780
So the context here is just Lucy or Maya.

05:20.110 --> 05:22.750
Then your expression should interpret this as true.

05:23.470 --> 05:28.390
If you create a context is Jason female your expression should interpret this as false.

05:28.390 --> 05:33.220
Because Jason is not in one of those two non terminals.

05:33.220 --> 05:36.510
Jason's not including Lucy and is not included in Maya.

05:36.530 --> 05:39.240
The grammar here would be for this language.

05:39.310 --> 05:44.170
Use the examples on the previous slide would be the end expression would be expression and expression

05:44.560 --> 05:47.130
the or would be expression or expression.

05:47.170 --> 05:52.120
And again those are represented as non terminal classes you pass in the expressions that you created

05:53.290 --> 05:58.980
and then the expressions in this grammar would be Jason married Lucy Myra right.

05:59.070 --> 06:03.510
Those are all the non terminals for your application.

06:03.510 --> 06:05.690
You can create any terminals that you want.

06:05.930 --> 06:08.350
And here would be an example of output.

06:08.510 --> 06:11.850
I'm going to point out the context and I'm on to point out the result.

06:11.850 --> 06:14.330
Lucy is female true Maya Myra's female.

06:14.330 --> 06:16.470
True Jason is female false.

06:16.500 --> 06:17.370
Jason is married.

06:17.370 --> 06:19.240
True John is married.

06:19.290 --> 06:25.380
False to non terminals in the bottom two one terminal site.

06:25.420 --> 06:32.000
Two not terminals two terminals in the bottom two and then one terminal and each one of these.

06:32.050 --> 06:32.920
Good luck.

06:32.920 --> 06:34.000
Let me know if you have any questions.

06:34.000 --> 06:34.390
Thank you.
