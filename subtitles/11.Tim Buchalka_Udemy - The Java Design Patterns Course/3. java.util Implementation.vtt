WEBVTT

00:05.320 --> 00:06.210
Hello and welcome back.

00:06.220 --> 00:11.400
In this lecture I want to talk about the observer pattern in the Java YouTube package.

00:11.590 --> 00:17.500
So the Java implementation the observer pattern is so useful that Java contains an implementation of

00:17.500 --> 00:19.120
it in its packages.

00:19.240 --> 00:23.890
Told you it was popular and useful and that's why Java has its own version.

00:23.890 --> 00:28.540
It's quite similar to are the one I just talked about in the last lecture on the subject in The Observer

00:28.540 --> 00:33.150
interfaces but it gives you a lot of functionality out of the box.

00:33.220 --> 00:38.720
You can also implement either a push or a pull style of update to your observers understand the difference

00:38.720 --> 00:39.110
here.

00:39.220 --> 00:41.500
Normally the observer is a push.

00:41.710 --> 00:47.890
We notify all of our observers when there's a change a pull is when the observer would ask for the information

00:48.250 --> 00:54.840
in Java allows you to implement either style the observable class and the observable observer interface

00:54.850 --> 01:01.660
make up the pattern the observable class plays the role of the subject in the Java package Java dot

01:01.660 --> 01:06.970
you tell instead of the methods attach detach and notify.

01:06.970 --> 01:14.690
For example Java uses an observer for registration the lead observer for UN registration and notify

01:14.690 --> 01:20.970
observers for notifying all for an object to become an observer.

01:20.970 --> 01:25.890
You have to implement the observer interface so what you have to do is you have to call the an observer

01:26.220 --> 01:30.650
on any observable object and then to remove yourself as an observer.

01:30.650 --> 01:35.130
You just call the Daily Observer again register and de register.

01:35.150 --> 01:39.680
You just implement that observer level interface and you immediately can be an observer by calling these

01:39.680 --> 01:44.730
methods for the observable to send notifications.

01:44.830 --> 01:50.480
You need to be observable by extending the Java that you still observable superclass.

01:50.570 --> 01:50.910
All right.

01:50.950 --> 01:56.670
So you must first call the set changed method to signify that state has changed in your object.

01:56.980 --> 02:02.890
Then you call one of to notify observer methods either notify observers with no parameters or notify

02:02.890 --> 02:04.080
observers with an object.

02:05.500 --> 02:10.750
For an observer to receive notifications it must implement the update method.

02:10.930 --> 02:14.590
The signature of the method is a bit different than what I explained earlier.

02:14.710 --> 02:20.260
When you implement your own design on observable if you want to push data to the observers you can pass

02:20.260 --> 02:23.530
the data as a data object to the notify observers ARG method.

02:23.530 --> 02:25.130
That's one that takes a parameter.

02:25.270 --> 02:32.450
If not then the observer has to pull the data it wants from the observable object passed to it the set

02:32.450 --> 02:35.710
change method is used to signify that the state has changed.

02:35.720 --> 02:41.990
As I mentioned when notify observers is called it should updates its observers if notify observers is

02:41.990 --> 02:44.450
called without first calling a set changed.

02:44.450 --> 02:48.820
The observers will not be notified and that's an important distinction.

02:48.970 --> 02:52.310
You need to call set change for notifications to work.

02:52.330 --> 02:58.750
You may also want to use the clear change method which sets the chain state back to false and this has

02:58.750 --> 02:59.440
changed method.

02:59.440 --> 03:03.730
Also you may want to call which tells you the current state of the changed flag.

03:05.480 --> 03:06.640
It basically comes down to this.

03:06.650 --> 03:12.680
I don't cover the Java implementation a lot of detail but because it does have some issues so the observations

03:12.680 --> 03:16.240
on the implementation it's not widely used.

03:16.340 --> 03:21.380
Its implementation is really simple and restrictive and that's why in this class we're going to focus

03:21.380 --> 03:27.570
on implementing our own OBS observe design pattern.

03:27.650 --> 03:31.740
One issue is the observable as a class so you have to subclass it.

03:31.760 --> 03:37.040
What that means is you can not add onto the observable behavior to an existing class that already extends

03:37.040 --> 03:38.260
another superclass.

03:38.420 --> 03:40.950
So that will limit its reuse potential.

03:41.110 --> 03:44.930
And again the whole reason we're using design patterns is for software reuse.

03:44.930 --> 03:49.700
So if you can't reuse it that's definitely going to be a negative and that's one reason why we don't

03:50.000 --> 03:52.220
focus on the Java implementation.

03:52.220 --> 03:57.560
There's also no observable interface so you cannot create your own implementation that plays well with

03:57.560 --> 03:59.930
the Java built in observer API.

04:00.200 --> 04:06.110
You do not have the option of swapping out the Java utility plantation for another say a new multi threaded

04:06.110 --> 04:06.800
implementation.

04:06.800 --> 04:13.410
You just can't do that observer will may serve your needs if you can extend the Java you tell observer

04:14.740 --> 04:19.750
but on the other hand more often than not you're going to need to create your own implementation.

04:19.750 --> 04:22.380
And that's why we focus on that in this class.

04:22.420 --> 04:28.210
You should understand what I mentioned the previous lectures about how the observed pattern is implemented

04:28.750 --> 04:30.430
and also its purpose.

04:30.430 --> 04:35.530
Feel free to check out the Java plantation to play around with it but we're going to focus on implementing

04:35.530 --> 04:42.190
our own and so in the next lecture I'll provide a concrete example of implementing the observe design

04:42.190 --> 04:45.510
pattern traditionally using your own implementation.

04:45.520 --> 04:45.900
Thank you.
