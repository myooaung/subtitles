WEBVTT

00:05.410 --> 00:06.900
Hello and welcome back.

00:06.910 --> 00:12.020
This lecture I won't provide a solution to our previous challenge which was implementing the media interface.

00:12.020 --> 00:14.730
We're going to simulate an auction.

00:14.920 --> 00:20.800
So let's go ahead and bring up intelligent and we're gonna name this project our media solution and

00:20.800 --> 00:26.080
the first thing we'll have to do is wealth to create that media interface that centralized location

00:26.650 --> 00:31.200
that all of our colleagues have to go through in order to communicate with another colleague.

00:31.240 --> 00:32.560
So we're gonna say mediator

00:34.870 --> 00:35.590
solution

00:39.870 --> 00:49.870
we can say new Java class and we'll say mediator has our name and this is gonna be an interface and

00:49.870 --> 00:57.250
this is gonna allow colleagues to be able to add to the mediator so we're gonna have a public void ad

00:57.250 --> 01:07.510
buyer which will take a buyer as a parameter and we'll create that college class in a minute and then

01:07.510 --> 01:17.110
we're also going to have a method called Find highest bidder something like that and then we need to

01:17.110 --> 01:19.350
create the concrete mediator.

01:19.600 --> 01:22.700
This is gonna be called Auction mediator.

01:22.700 --> 01:28.190
Remember this is the one that has a list of all of its buyers all of its colleagues right.

01:28.210 --> 01:34.170
So this is gonna implement the mediator interface we'll call it auction.

01:34.170 --> 01:37.130
I can spell auction.

01:38.140 --> 01:39.090
Oh my God I can't spell.

01:39.110 --> 01:47.020
Hey you see t Io an auction mediator is going to implement the mediator.

01:47.020 --> 01:49.520
And with this class I'll just put a commie here.

01:49.600 --> 01:53.230
This class implements the mediator interface

01:56.080 --> 02:07.120
and holds all the buyers in an array list.

02:07.120 --> 02:09.730
Then we can add we can add

02:12.580 --> 02:16.860
buyers and find the highest bidder.

02:19.990 --> 02:22.670
OK.

02:24.910 --> 02:32.190
So here we'll need our array list will say private array list.

02:32.200 --> 02:41.710
And this will be our buyers and we'll initialize this in our constructor.

02:41.710 --> 02:45.610
We'll just say buyers equals new

02:48.370 --> 02:48.940
array list

02:54.480 --> 02:58.820
we're not going to override the ad buyer.

02:58.820 --> 03:04.790
So we're gonna say public void ad buyer which takes a buyer.

03:04.980 --> 03:07.760
Because we need to add it to the list.

03:07.760 --> 03:12.000
And again the buyers the concrete colleague we haven't implemented it yet but all we need to do here

03:12.000 --> 03:19.470
is we need to say buyers to add the UI Ja and we may want to print out a message saying somebody some

03:19.470 --> 03:20.960
buyer was added to the list.

03:21.150 --> 03:28.590
Again just for testing capabilities to some little method mass message.

03:28.980 --> 03:30.870
Let's add that buyer dot name.

03:30.900 --> 03:36.370
And again we're going to implement the buyer but the buyer not name was added to the list.

03:36.390 --> 03:39.730
We also need to override the highest find highest bidder.

03:39.780 --> 03:47.190
So we're gonna override our find highest bidder.

03:47.230 --> 03:53.090
And I spelled that wrong up there not find highest bigger find highest bidder.

03:53.640 --> 03:58.120
And this is gonna go through the list and just see what the highest bidders.

03:58.170 --> 04:00.620
So it's gonna create a local variable for the max bid.

04:01.380 --> 04:05.910
And it's also going to want to see who the buyers for winner so it's gonna create a local winner for

04:05.910 --> 04:13.230
the buyer and the buyer again is the colleague we're going to fast iteration loop here which goes through

04:13.230 --> 04:16.160
the array list and all the buyers.

04:16.170 --> 04:22.440
And if the price for that buyer is greater than the max bid it's going to set the max bid to that price.

04:22.440 --> 04:26.680
And it's also going to declare the winner at the end of this.

04:27.140 --> 04:30.020
It's going to specify that the auction has ended.

04:30.050 --> 04:34.250
We can put this anywhere really but we're just going to say put it in here.

04:34.280 --> 04:35.900
Auction has ended.

04:35.900 --> 04:42.440
And again we'll see these methods implemented in our concrete colleagues.

04:42.440 --> 04:47.550
And then the last thing we want to do is we just want to point out the winner and the price for the

04:47.550 --> 04:47.820
item

04:50.840 --> 04:51.580
something like that

04:54.930 --> 04:59.170
and what this does is just prints out the actual winner by looking at the buyer's name and the winning

04:59.170 --> 05:00.560
price for the auction.

05:00.970 --> 05:05.050
And then we're gonna close that method and we're gonna make sure we close the class.

05:05.050 --> 05:09.880
Now we have a lot of red here because we haven't implemented the concrete colleague or the colleague

05:09.880 --> 05:11.200
interface for that matter.

05:11.260 --> 05:16.330
So first let's implement that colleague interface here.

05:16.540 --> 05:24.010
We're gonna say our new colleague interface which is our buyer and this is gonna be an abstract class.

05:24.380 --> 05:27.250
And what this is gonna do is it's going to hold the mediator.

05:27.250 --> 05:32.230
It's also going to have a name and a price for all the concrete colleagues so we can put that all on

05:32.230 --> 05:34.530
this base class.

05:34.530 --> 05:39.580
All right our mediator that's used for all communication and our name and price.

05:39.580 --> 05:47.800
And then all that's gonna be set up in our constructor so in our constructor we can set the mediator.

05:47.800 --> 05:49.490
We can set the name.

05:49.780 --> 05:54.340
Then we're gonna have our three abstract methods that are concrete colleagues are going to implement

05:54.800 --> 05:58.810
we're going to have one for bidding.

05:58.810 --> 06:04.210
This is gonna be an abstract void and it's going to take a price so that someone can bid on something

06:07.000 --> 06:09.700
we're gonna have one to cancel the bid.

06:09.700 --> 06:13.660
So here we'll just call this also going to return nothing.

06:13.690 --> 06:16.790
We're gonna say cancel the bid.

06:17.890 --> 06:23.800
And then the last one we're gonna have is one for the auction is ended so that the receipts essentially

06:23.800 --> 06:30.490
receiver method to know that the auction has ended.

06:30.520 --> 06:33.490
Now we can create our concrete colleagues to implement this.

06:33.680 --> 06:42.070
Our concrete colleague is just gonna be the auction buyer so we can say class auction buyer extends

06:43.030 --> 06:46.100
our buyer after class.

06:46.510 --> 06:49.100
And it's this is going to implement the bidding process.

06:49.180 --> 06:54.010
There's gonna be an option a bid an option to cancel the cancel the bidding constructor is just gonna

06:54.010 --> 07:02.730
call super on the abstract class super mediator super name and we also.

07:02.750 --> 07:03.390
Okay that's good.

07:05.660 --> 07:09.200
We need to override our abstract methods.

07:09.200 --> 07:11.980
Cancel the bid will be bid we'll be first.

07:11.990 --> 07:16.240
All this does is set the price for that buyer.

07:16.250 --> 07:18.490
So something like this not price equals price.

07:18.500 --> 07:21.420
Pretty straightforward cancelling the bid.

07:21.590 --> 07:23.990
It's just gonna set the price to negative 1.

07:24.200 --> 07:30.430
Some kind of flag to indicate that we're no longer bidding and the auction is and it is gonna be received

07:30.430 --> 07:30.650
Matt.

07:30.650 --> 07:35.720
That's all it's gonna do is output some information saying the auction has ended right.

07:35.720 --> 07:46.370
We received a message that the auction is over for this user and that will tell us that the mediator

07:46.370 --> 07:48.440
sent us a message.

07:48.440 --> 07:53.710
The last thing we need to do is create the client let's make sure everything is going to compile.

07:54.050 --> 07:56.120
We misspell the method inside here.

07:56.120 --> 08:00.600
This means to be highest HIV each.

08:00.900 --> 08:03.620
And that's good.

08:03.620 --> 08:05.200
Just fixing any my problems.

08:05.210 --> 08:08.060
Buyer needs to

08:10.800 --> 08:11.820
be here.

08:11.850 --> 08:15.350
Make sure we have our buyer class implemented right.

08:17.710 --> 08:19.850
And we have to make sure that we spell everything right.

08:19.850 --> 08:23.890
So auction has ended auction has ended.

08:23.900 --> 08:25.670
And this cannot be abstract.

08:26.900 --> 08:32.740
So that's one mistake we got to make sure things are spelled correctly.

08:35.760 --> 08:41.670
Buyer and it is just a quick fix with casting in the loop.

08:41.670 --> 08:45.750
Have the array list contain buyer's returns an object.

08:45.750 --> 08:47.910
And then we can just cast last up.

08:47.910 --> 08:51.960
We need to do is we need to create the client.

08:51.960 --> 08:57.370
So we're gonna say new Java class and we're going to say client

09:01.780 --> 09:04.720
remember this program's just illustrating an auction.

09:04.720 --> 09:10.030
This auction mediator is responsible for adding the buyers and after each buyer bid a certain amount

09:10.030 --> 09:13.210
for the item the mediator knows who won the auction.

09:13.420 --> 09:16.320
So the client's going to have a main method.

09:16.630 --> 09:20.510
Public static void main.

09:22.780 --> 09:27.370
And what this is gonna do is it's gonna first need to create the auction mediator and then have to create

09:27.370 --> 09:29.370
some buyers.

09:29.490 --> 09:36.360
So we're gonna say auction mediator and then we're to create some buyers will say Buyer B one equals

09:36.360 --> 09:44.390
new auction buyer and we're going to pass in the mediator and we'll again say Jason create a couple

09:44.390 --> 09:46.090
of these buyers.

09:46.450 --> 09:48.410
How about three.

09:48.600 --> 09:52.910
And again with just different names.

09:53.220 --> 10:05.080
We'll say even in my room once we have the buyers created we'll have to add them to the mediator.

10:05.430 --> 10:12.120
So we're gonna just call the add method on the mediator to add each buyer and we're gonna just display

10:12.120 --> 10:16.710
some output so we know what's going on in the program.

10:16.710 --> 10:19.950
Nice little message saying Welcome to the auction.

10:19.950 --> 10:25.420
Tonight we're selling a vacation and so forth and then we're gonna wait for the buyers offshore.

10:25.450 --> 10:30.760
So we're going to turn out one more message saying waiting for the buyers offers.

10:31.060 --> 10:32.940
Then we'll start making bids.

10:33.310 --> 10:40.960
Be one or buyer one we'll bid eighteen hundred buyer to a bid two thousand and buyer 3 is gonna bid

10:40.960 --> 10:50.740
780 and then we'll do some more formatting our output and then try to find the highest bidder to find

10:50.740 --> 10:55.210
the highest bidder we have to use the mediator so we say media dot find highest bidder.

10:55.990 --> 10:57.840
And this is gonna tell us the highest bidder.

10:57.850 --> 11:05.260
But before after we find the highest bidder B2 is gonna change their mind and they're gonna say cancel

11:05.260 --> 11:06.680
the bid.

11:07.450 --> 11:12.810
Now we're gonna have to print out the B to just cancel their bid.

11:12.940 --> 11:16.870
So what happens after they cancel the bid while the mediator is going to have to find the highest price

11:16.870 --> 11:17.110
again.

11:18.040 --> 11:24.520
So we're gonna call a mediator again find highest bidder and they'll find the highest bidder after that

11:24.580 --> 11:28.300
and then they should notify everyone that the auction is over.

11:28.300 --> 11:38.860
So let's go ahead and try to build this website and see the output build and we say run on the client

11:40.960 --> 11:46.170
and what you should notices everything to happen in the auction.

11:46.180 --> 11:49.150
Jason Ian Michael were added as buyers.

11:49.150 --> 11:51.130
So now the auction started.

11:51.130 --> 11:59.530
They're waiting for buyers offers and the mediator received a message that the auction is over because

11:59.530 --> 12:04.450
we called Find highest bidder and they immediately found the highest bidder after the bids were made

12:04.840 --> 12:07.890
and notified all the colleagues that the auction was over.

12:07.900 --> 12:12.640
They also notified that the winner was Ian because he paid two thousand dollars for the item.

12:12.640 --> 12:14.700
Then Ian cancelled the bed.

12:14.710 --> 12:20.680
So in that case we also send out we find the highest bidder again.

12:20.950 --> 12:26.200
And then we received messages at the auction really is over and we set the new winner to Jason who paid

12:26.230 --> 12:29.130
eighteen hundred dollars for the item the next highest bidder.

12:29.140 --> 12:33.940
This could be formatted a little bit better and a little clear to display the messages of the auction

12:33.940 --> 12:40.590
being over after we displayed the winner and that would be easy to fix.

12:40.880 --> 12:47.660
We could say inside the mediate mediator hence the auction is ended.

12:47.660 --> 12:54.080
We'd want to do that after after we set the winner.

12:54.080 --> 12:57.050
The only problem is you'd have to do that in another loop right.

12:57.050 --> 13:02.820
So we'd have to end up doing something like this to print out where the winner is.

13:02.900 --> 13:06.320
And then we just tell them that the auction is ended.

13:06.320 --> 13:08.500
That may be a little bit cleaner.

13:08.510 --> 13:11.800
We just have to make sure recast correctly.

13:12.350 --> 13:15.310
And then the output may look a little bit better.

13:15.500 --> 13:23.020
Now we build and we run we'll see it's a little bit clear to the user what's going on.

13:23.250 --> 13:32.590
Just say run quiet and now we can actually see that the auction winner should be done first.

13:32.600 --> 13:37.550
So let's make sure we have to make sure we remove the other one.

13:38.120 --> 13:45.990
Try one more time and now when we run can see it's a little bit clear we have an auction winner and

13:45.990 --> 13:50.970
then they receive the message that the auction is over and then there's cancellation.

13:50.980 --> 13:53.270
And in that case the auction winner is Jason.

13:53.370 --> 13:54.660
And then we see receive the message.

13:54.660 --> 13:56.430
The auction is over again.

13:56.430 --> 14:01.950
So all this helps clarify your challenge and helped you understand the mediator design pattern a bit

14:01.950 --> 14:02.520
more better.

14:03.000 --> 14:03.390
Thank you.
