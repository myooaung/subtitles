WEBVTT

00:05.200 --> 00:06.430
Hello and welcome back.

00:06.430 --> 00:10.260
This lecture I'd like to talk about the Singleton versus dependency injection.

00:10.360 --> 00:13.380
We talked about dependency injection in a previous lecture.

00:13.450 --> 00:18.310
You should have noticed in the first lecture on Ann Singleton that dependency injection is very similar

00:19.390 --> 00:24.010
so there's some discussion in the software community on when you should utilize a singleton versus when

00:24.010 --> 00:28.990
you should utilize Dependency Injection dependency injection can actually be used in replacement of

00:28.990 --> 00:36.370
a singleton although the scenario is is somewhat specific because the Singleton does have some disadvantages.

00:36.400 --> 00:39.790
There are some opportunities to use dependency injection.

00:39.880 --> 00:45.200
So right now we know from previous lectures that dependency injection is a technique whereby one object

00:45.200 --> 00:47.610
supplies the dependencies of another object.

00:47.770 --> 00:51.760
It enables you to replace dependencies without changing the class that uses them.

00:51.760 --> 00:56.080
Remember we had that lecture where we basically said there was a dependency between high and low level

00:56.080 --> 00:57.020
classes.

00:57.250 --> 01:02.320
Dependency inversion gets rid of the dependency between those classes by having an abstract interface

01:02.650 --> 01:05.360
but there's still that dependency of the creation of the instance.

01:05.410 --> 01:11.850
And so with dependency injection you can get rid of that dependency of the creation of the instance.

01:11.980 --> 01:18.400
It can also be used to avoid statics and this is one of the most common reasons to use dependency injection

01:18.400 --> 01:24.950
because you don't use a static member object and you often do use a static member object and a singleton.

01:25.160 --> 01:29.520
We know that singletons only insure one instance of an object right.

01:29.540 --> 01:35.860
So we know what a singleton is we know what Dependency Injection is when you use dependency injection.

01:35.910 --> 01:40.380
Typically what you'll do is you're using either constructor or a setter injection to pass around a single

01:40.380 --> 01:41.980
object.

01:42.010 --> 01:48.040
We went all the way through those examples where we created an instance and then we injected it using

01:48.040 --> 01:51.970
a setter or a constructor to set the instance in that class.

01:52.330 --> 01:56.230
So you have the injector create a single object and then inject a view of the constructor the setter

01:56.230 --> 02:01.780
of any dependent objects you remove that dependency it implements a singleton with less dependencies.

02:01.780 --> 02:07.080
That's basically what the Dependency Injection is doing.

02:07.150 --> 02:14.140
So some of the dependencies a singleton have that we mentioned previously with the disadvantages are

02:14.140 --> 02:16.250
that Singleton create these hidden dependencies.

02:16.270 --> 02:19.870
Right because they're readily available throughout the code base they're overused.

02:19.870 --> 02:24.730
I mentioned that previously and since there's a reference it's not completely transparent when passing

02:24.730 --> 02:27.160
the different methods it becomes difficult because of track.

02:27.160 --> 02:30.260
So there are dependencies and disadvantages with the singleton.

02:30.460 --> 02:31.840
They also hinder unit testing.

02:31.840 --> 02:38.860
We mentioned that having issues with testable code because it's hard with that tight coupling to get

02:38.860 --> 02:44.450
a fully functional class without adding some dedication to a singleton and really it's because of the

02:44.450 --> 02:50.850
use of the statics the use of statics in the Singleton implementation make it very hard to test.

02:50.860 --> 02:56.340
So now the question becomes Can Dependency Injection solve the disadvantages of single pin patterns

02:56.350 --> 02:58.680
introduction of new dependencies.

02:58.750 --> 03:02.020
Can the Dependency Injection principle reduce or eliminate this dependency.

03:02.050 --> 03:09.070
That's really the question and the answer is it really depends on the situation in some cases Dependency

03:09.370 --> 03:14.380
Injection is preferred over singletons but not in all cases and that's why we still focus on the Singleton

03:14.380 --> 03:19.690
design pattern in this class because the Singleton design pattern is still used widely and it still

03:19.690 --> 03:21.820
is applicable to certain situations.

03:21.820 --> 03:28.600
However having said that there may be times when you want to use dependency injection over the Singleton.

03:28.770 --> 03:33.560
And so when would you use dependency injection over the Singleton Well when you are software to be under

03:33.570 --> 03:39.380
you in a test then it's much easier to write unit tests for your code when using dependency injection

03:39.390 --> 03:40.520
there's less coupling.

03:40.740 --> 03:45.600
Now that you might say well that pretty much sums it up because I always want to write unit tests so

03:45.600 --> 03:47.940
I might as well always use dependency injection.

03:48.030 --> 03:52.170
Well again that's not always the case it depends on again the situation.

03:52.170 --> 03:56.130
Now if your software needs to be on a unit test it is easier with dependency injection but it's not

03:56.130 --> 03:58.100
impossible with Singleton.

03:58.500 --> 04:03.540
Other times when you want to use the eye over the Singleton when you want to avoid using statics again

04:03.630 --> 04:09.360
the use of statics static member variables static methods makes it harder for your code to get under

04:09.360 --> 04:13.670
test and Singleton's use quite a bit of statics.

04:13.800 --> 04:19.930
We're not going to go into details why it necessarily makes it harder but it does make it harder.

04:20.040 --> 04:27.090
You also want to use DIY over the Singleton when you have a non stable dependency a non stable dependency

04:27.090 --> 04:32.590
is a dependency which refers to or affects the global state such as an external service a file system

04:32.590 --> 04:39.560
or database in these cases it's often good practice to inject that dependency to the dependent class.

04:40.370 --> 04:42.380
As opposed to using a singleton.

04:42.380 --> 04:46.790
It helps the class explicitly specify everything it needs in order to perform properly.

04:46.790 --> 04:54.200
So when you have some non stable dependency some external dependency such as a database something outside

04:54.500 --> 05:00.230
then it is probably better to create that object outside and then inject it through the object that

05:00.230 --> 05:06.350
needs it has that dependency through the constructor or the setter external dependencies.

05:06.350 --> 05:07.980
That's when you want to use the AI.

05:08.210 --> 05:12.520
So using the IO singletons is mostly but not entirely about testing.

05:12.740 --> 05:13.930
That's the main reason.

05:14.060 --> 05:18.590
But there are these issues with statics and non stable dependent.

05:18.590 --> 05:21.070
Sometimes you just do not want a singleton.

05:21.470 --> 05:27.320
It's just more flexible when you don't have the singleton and so you would use the AI when when you

05:27.320 --> 05:30.260
want to use a singleton over dependency injection.

05:30.560 --> 05:36.470
There are still our dependencies which are better represented using a singleton so there's no way that

05:36.560 --> 05:38.450
you can say that you should never use a singleton.

05:38.450 --> 05:45.080
There still are situations and being dependencies are dependencies which span across multiple classes

05:45.080 --> 05:46.740
and often multiple layers.

05:46.850 --> 05:51.250
The single point in pattern is better suited to handle this than then dependency injection.

05:51.530 --> 05:57.350
Mainly because with dependency injection you have to pass this object all over to all these multiple

05:57.350 --> 05:58.450
classes.

05:58.760 --> 06:03.140
Right so you do a ton of passing you'd have a ton of methods that take the object needed to pass it

06:03.140 --> 06:06.460
all around and that can be cumbersome.

06:06.480 --> 06:11.120
A good example of this is if you had a single you'd want to use a singleton over dependency injection

06:11.120 --> 06:12.890
and a logger service.

06:12.890 --> 06:18.530
If you have a lot of activities throughout your codebase that are using logging it's just not practical

06:18.530 --> 06:24.170
to pass this logger instance as a dependency and inject it in every single class that needs it because

06:24.260 --> 06:26.330
every class pretty much does need it.

06:26.390 --> 06:31.130
So if you have a class that every class has the same dependency you probably want to use a singleton

06:31.160 --> 06:36.910
and not dependency injection just because of the practicality of passing it all over the place.

06:37.670 --> 06:42.050
It's important to keep a balance between the dependencies represented as singletons and the ones using

06:42.050 --> 06:49.090
the dependency injection principles if a dependency is ambient meaning that it's used by a ton of classes

06:49.360 --> 06:50.230
multiple layers.

06:50.230 --> 06:56.560
You want to use a singleton because again it's just not practical to be injecting this object to so

06:56.560 --> 07:01.900
many different classes otherwise you can inject it into the dependent classes.

07:01.900 --> 07:07.960
Class is usually in Dependency Injection principle to avoid statics and to have better capability for

07:07.960 --> 07:09.070
unit testing.

07:09.070 --> 07:15.850
If you don't have a lot of class classes then you're probably use dependency injection and so I wanted

07:15.850 --> 07:20.800
to just provide a quick overview because there is some debate when we should use Singleton when we should

07:20.800 --> 07:22.360
use dependency injection.

07:22.360 --> 07:26.710
Hopefully it's clearer now that Singleton has its place in certain situations mainly when you have a

07:26.710 --> 07:32.140
lot more classes and a lot more dependencies and dependency injection also has its place mainly when

07:32.140 --> 07:36.400
you have the use of statics and when you want to get things under unit testing.

07:36.400 --> 07:36.790
Thank you.
