WEBVTT

00:05.650 --> 00:07.030
Hello and welcome.

00:07.030 --> 00:08.380
We're finally done with the course.

00:08.380 --> 00:09.840
This is our last lecture.

00:09.850 --> 00:10.790
Hooray.

00:11.170 --> 00:12.340
We're finally done.

00:12.370 --> 00:13.900
So I wanted to write a little coarse summary.

00:13.900 --> 00:15.730
This is a time to reflect.

00:15.730 --> 00:18.480
Try to go back and try to remember everything you learned.

00:18.480 --> 00:19.910
This was quite a big class.

00:20.110 --> 00:23.110
We covered a ton of time concepts related design patterns.

00:23.260 --> 00:26.350
So let's just kind of go through them see what we've learned.

00:26.380 --> 00:30.330
Pat ourselves on the back and finally be done with design patterns.

00:30.370 --> 00:33.060
The learning design patterns you're still going to use them quite a bit.

00:33.400 --> 00:35.780
But remember we covered a lot of topics.

00:35.860 --> 00:38.980
We first started off with just giving an overview of the design patterns right.

00:38.980 --> 00:44.200
We provided definition we told you a little history about the Gang of Four how these gang of four came

00:44.200 --> 00:49.720
out with a book identify 23 design patterns that were central for software development.

00:49.720 --> 00:53.960
We then moved on and talked about why would you ever want to study design patterns right.

00:54.160 --> 00:59.260
And we went through many many different points in terms of they have a lot of benefits and really help

00:59.260 --> 01:01.680
you write clean high quality code.

01:01.810 --> 01:07.450
Mainly they provide for loose coupling which least which makes the dependencies between objects much

01:07.450 --> 01:08.240
smaller.

01:08.290 --> 01:12.630
They provide for high cohesion which makes objects much more focused.

01:12.640 --> 01:19.780
Basically they make it easier to maintain and fix your code with this loose coupling and this high cohesion.

01:19.780 --> 01:25.360
Not to mention many other good design principles with separation of code and integration segregation

01:25.360 --> 01:27.140
principles single responsibility.

01:27.160 --> 01:32.710
We also went through all those but all of these are advantages of design patterns and you really should

01:32.710 --> 01:36.940
get in the habit of using these as much as possible because of all these advantages.

01:36.970 --> 01:40.990
We then talked about the types of deposit design patterns and how they're separated right.

01:40.990 --> 01:46.750
There's three basic classifications are criminal patterns roughly five of them are behavior patterns

01:46.750 --> 01:53.590
roughly 11 in our structural patterns roughly seven I believe and each one of these classifications

01:53.800 --> 01:57.310
focus on a certain group of design patterns because of what they do.

01:57.310 --> 02:03.460
Recreational patterns create instance of all of objects behavior patterns have to do with how objects

02:03.460 --> 02:08.960
communicate relate to one another and structural patterns have to do with the structure of the objects.

02:09.020 --> 02:13.810
And so we went through all these different patterns but before we started learning about the design

02:13.810 --> 02:19.360
patterns we first focused on some of the principles of strategies that all the design patterns follow

02:20.060 --> 02:20.380
right.

02:20.380 --> 02:26.500
We talked about design symbols which are really just indications that your design has some issues has

02:26.500 --> 02:27.490
some problems.

02:27.600 --> 02:34.000
You know things like tight coupling things like very low cohesion things like where objects are just

02:34.000 --> 02:39.880
too big or the objects are depending on one another and it's just really really hard to fix or add new

02:39.880 --> 02:40.870
software.

02:40.870 --> 02:47.170
Your code is very rigid you can't change your code very easily changing one thing will cause a big headache

02:47.200 --> 02:49.250
and so you don't end up changing anything.

02:49.360 --> 02:53.770
And then we started talking about the various principles programming to an interface really the concept

02:53.770 --> 02:58.600
of just always using an interface not really paying attention to concrete classes.

02:58.600 --> 03:04.360
When you're the client composition over inheritance this has a relationship either using composition

03:04.360 --> 03:10.630
or aggregation instead of is a relationship inheritance because of dependencies with the base in subclasses.

03:10.810 --> 03:12.800
We talked about delegation principles.

03:12.820 --> 03:15.210
We're really this has to do with responsibility.

03:15.310 --> 03:20.680
Each object should have a certain responsibility and you can delegate responsibilities to other objects.

03:20.680 --> 03:22.390
We talked about single responsibility.

03:22.390 --> 03:24.540
This has to do with cohesion All right.

03:24.550 --> 03:26.580
Everything should be have a single focus.

03:26.620 --> 03:30.020
Objects should not be all over the place and do 100 different things.

03:30.070 --> 03:32.710
The open closed principle this is a really really popular one.

03:32.740 --> 03:36.990
Open for extension closed for change.

03:37.000 --> 03:39.390
Once a class is done it's done.

03:39.550 --> 03:41.790
We can extend it we can add new functionality to it.

03:41.800 --> 03:46.150
But if this class has a lot of variation we don't want to keep changing it.

03:46.240 --> 03:50.800
Less golf substitution principle this has to do with a base class and a subclass.

03:50.800 --> 03:53.920
You don't want to have a base class break a subclass.

03:53.920 --> 03:59.550
So the methods that you have in the base class you want to treat a base class Object reference.

03:59.650 --> 04:00.850
They should be in the subclasses.

04:00.880 --> 04:02.320
Otherwise you can break things.

04:02.500 --> 04:08.320
Interface segregation principle this is when you just have a bunch a bunch of different methods and

04:08.320 --> 04:13.810
an interface and yet a lot of the classes and implement the interface don't care about those methods.

04:13.870 --> 04:17.080
So you want to separate those methods into separate interfaces.

04:17.080 --> 04:19.600
The interface is really just being highly cohesive.

04:19.600 --> 04:24.210
We then talked about the difference between dependency and aversion versus dependency injection.

04:24.350 --> 04:24.540
Right.

04:24.550 --> 04:30.430
Inversion is more of a principle more of a way of thinking where we basically instead of thinking in

04:30.430 --> 04:36.580
a top down approach we think in a bottom up approach where injection is where you can pass around an

04:36.580 --> 04:39.560
object and inject it in other places.

04:39.640 --> 04:45.610
If you need that object it kind of goes hand with the Singleton although you don't want to use dependency

04:45.610 --> 04:50.400
injection when you're passing around the object to many many many different classes.

04:50.470 --> 04:56.560
In that case you want to use Singleton but again instead of creating a single OP instance and then keep

04:56.650 --> 05:01.980
using that all over you know you would just create the single instance one and then pass it around and

05:02.020 --> 05:07.020
so those are good design principles of strategies that all these patterns that we study followed and

05:07.020 --> 05:10.830
so it was important to understand these because they're closely closely related.

05:10.830 --> 05:13.680
One more thing we had to learn which is UML.

05:13.680 --> 05:15.450
This is the unified model language.

05:15.450 --> 05:20.310
This is how you can document design and it was important to understand this because many of the design

05:20.310 --> 05:24.660
patterns utilize this in the terms of a class diagram or sequence diagram.

05:24.660 --> 05:27.120
So we studied that very briefly.

05:27.120 --> 05:31.440
We also studied the modules we control that was towards the end of the class just a high level view

05:31.440 --> 05:37.430
because it is a big architectural type pattern and it's a it's a big term or phrase that you hear about

05:37.440 --> 05:39.560
so should at least know what it means.

05:39.690 --> 05:43.090
Then we drove into the creation of design patterns that was really the first thing we did.

05:43.110 --> 05:48.660
We talked about 5 different patterns all had to do with creating the instance of an object the factory

05:48.660 --> 05:53.790
in the abstract factory similar the abstract factory is a factory of factories you can think of a family

05:54.120 --> 06:01.350
grouping but the factory allows us to create a specific type in just one class unless you want to implement

06:01.350 --> 06:05.880
it in the more traditional sense where you have a subclass for each factory but we tend to like to use

06:06.510 --> 06:10.370
and send parameter strings which will determine the type of instance create.

06:10.380 --> 06:14.500
We talked about a singleton the singleton is where you just want to create a single instance.

06:14.610 --> 06:19.050
We talked about some of the issues with the singleton and then the many different implementations of

06:19.050 --> 06:27.180
the Singleton the bill PUA approach versus the double locking approach versus a lazy evaluation versus

06:27.210 --> 06:28.580
eager evaluation.

06:28.590 --> 06:30.060
We also discussed the builder.

06:30.090 --> 06:32.590
This can build very complex types of objects.

06:32.730 --> 06:37.710
Typically objects where the constructor has a lot of attributes the order matters when you call a constructor

06:37.740 --> 06:37.950
right.

06:37.950 --> 06:40.020
The builder can simplify those types of things.

06:40.140 --> 06:42.660
Prototype is used for copy more or less.

06:42.660 --> 06:47.100
We talked about the cloning interface in Java but the prototype is nice because we can copy an object

06:47.430 --> 06:52.250
use it do things with it and we don't have to worry about affecting the object that we copied.

06:52.290 --> 06:57.340
We then drove in to our structural design patterns and there is about 7 of these.

06:57.420 --> 07:02.220
These have to do with structure how objects in enter relate to one another but really the structure

07:02.630 --> 07:04.680
they adaptor was the first one that we focused on.

07:04.890 --> 07:09.770
This has to do with two incompatible interfaces making them be able to talk to one another right.

07:09.770 --> 07:11.420
We use the example of an adapter.

07:11.530 --> 07:15.280
Well just a plug in trying to plug a regular adapter into a European outlet.

07:15.280 --> 07:20.030
Right you need something that does that conversion and that's what the adapter provides.

07:20.050 --> 07:25.410
Dancers are typically used in legacy type systems after the interfaces have already been created but

07:25.410 --> 07:27.110
now you want to use them together.

07:27.150 --> 07:33.260
We talked about the bridge we talked about the composite the composite is many objects made up of one.

07:33.270 --> 07:39.570
The decorator which is an alternative to classing the facade which is really just making an interface

07:39.570 --> 07:44.340
or many interfaces to subsystems much more simpler by providing a front end interface.

07:44.430 --> 07:51.860
The flyweight which can help with objects that are not very performing very well right.

07:51.910 --> 07:56.550
We want to make something with performance so we'll pass around many objects and they won't have an

07:56.550 --> 07:57.900
expensive cost.

07:57.900 --> 08:03.450
We talked about the proxy the proxy is a popular one and it's just like you would think of the traditional

08:03.660 --> 08:05.820
definition of the proxy just like you use on the Internet.

08:05.820 --> 08:07.140
It's an Intermedia.

08:07.200 --> 08:09.090
It controls access to objects.

08:09.150 --> 08:15.390
We had some great examples where we had the internet example work and control and secure access.

08:15.390 --> 08:21.240
The last classification of patterns that we discussed were these 11 behavior design patterns descriptions

08:21.480 --> 08:26.700
of how patterns can work together or communicate the chain of responsibility pattern was the first one

08:26.700 --> 08:30.810
we focused on and that has to do with really just a chain of objects.

08:30.840 --> 08:36.200
We can have a next object in each chain and then we just go from one object to the next.

08:36.210 --> 08:38.310
If that object needs to do something it will do it.

08:38.310 --> 08:39.120
Otherwise it won't.

08:39.480 --> 08:42.120
The command is all about encapsulating commands.

08:42.120 --> 08:44.870
Each object is going to have a specific command.

08:44.910 --> 08:47.340
And so this again is about separation.

08:47.340 --> 08:48.260
Loose coupling.

08:48.390 --> 08:56.190
The interpreter has to do with understanding general languages we use to utilize the grammar to understand

08:56.190 --> 09:01.770
the interpreter and the interpreter it doesn't do any parsing but it does provide a mechanism where

09:01.860 --> 09:07.170
given a natural language we can understand if sentences are in that language iterator one of the more

09:07.170 --> 09:08.310
popular ones.

09:08.340 --> 09:13.590
Also one of the more easy ones to understand because of the Java collections framework we're able to

09:13.830 --> 09:19.260
traverse a list or an array list using an iterator and we don't care what the elements are.

09:19.350 --> 09:21.870
We're gonna go through that list the same way.

09:21.870 --> 09:26.940
There are typically four methods that we use in the iterator the next the has next might get the current

09:26.940 --> 09:31.870
item and we might also check check other things.

09:32.160 --> 09:39.450
The mediator mediator is really a centralized location for all communication between different objects.

09:39.450 --> 09:46.650
The momento is a way to save and restore points in an object so it will save certain states at specified

09:46.650 --> 09:47.370
times.

09:47.370 --> 09:54.530
The momento is usually implemented as an class and it can control access through its other components.

09:54.750 --> 10:00.210
The Observer observer probably the most popular design pattern I should say the observers use quite

10:00.210 --> 10:03.660
a bit and it's really sort of like a broadcasting mechanism.

10:03.750 --> 10:10.020
Any time an object needs to know some information it can register with an observer and anytime the observer

10:10.020 --> 10:15.420
state or any other state changes all the other objects that are registered will be notified.

10:15.630 --> 10:20.460
The state design pattern will get rid of conditional statements when you have conditional statements

10:20.460 --> 10:25.020
depending on state and have different actions depending on that state change you will do something you

10:25.020 --> 10:29.550
don't need those conditional statements anymore because all of those actions are encapsulated into a

10:29.550 --> 10:30.800
state object.

10:30.960 --> 10:36.960
The strategy design pattern closely related to the state although it has to do with algorithms it also

10:36.960 --> 10:40.830
utilized polymorphism like the state and it does different strategies.

10:40.830 --> 10:45.890
We had examples of the strategy would like purchasing online goods versus perching them in the store

10:46.290 --> 10:49.500
template map that we just got just got completed.

10:49.500 --> 10:52.350
This has to do with a skelter algorithm.

10:52.440 --> 10:57.870
We have an abstract class that defense that defines the skeletal algorithm with a series of steps that

10:57.870 --> 11:03.200
are ordered and then we have concrete classes that may or may not implement some of those steps.

11:03.240 --> 11:07.280
Some of the steps may implement in the abstract class the ones that are unique that are different will

11:07.290 --> 11:12.780
go on the subclasses and then we finished up with the all important visitor object which has to do with

11:13.140 --> 11:19.680
mainly an object structure and object structure meaning a composite of objects or list or collection

11:20.100 --> 11:25.710
we can add new functionality to the elements in the list without affecting that structure.

11:25.710 --> 11:31.190
So we use this visitor and the visitor can add new functionality to the elements.

11:31.290 --> 11:36.780
The elements will just be passed in a visitor and then implement except visit methods and so we covered

11:36.780 --> 11:37.440
quite a bit.

11:37.950 --> 11:39.000
You should be proud of yourself.

11:39.000 --> 11:46.190
That's a lot of information and a lot of patterns and a lot of high quality code and code in design.

11:46.200 --> 11:51.810
We also talked a little bit about the end of awesome J to e patterns but that was just a high level

11:51.810 --> 11:52.730
overview.

11:52.800 --> 11:58.380
Hopefully now you can look back and everything you learned and you can say hey I understand the fundamentals

11:58.380 --> 11:59.420
of design patterns.

11:59.520 --> 12:02.220
I know how to implement most of these design patterns.

12:02.220 --> 12:06.540
I can create Java applications that use these design patterns.

12:06.540 --> 12:09.240
That's really the goal of the class right.

12:09.320 --> 12:14.730
And also while understanding these design patterns I really really hope that you improve your problem

12:14.730 --> 12:16.860
solving skills right.

12:16.910 --> 12:20.160
You can prove those skills by using efficient proven methods.

12:20.160 --> 12:21.360
That's key right.

12:21.380 --> 12:24.470
Design Patterns are common solutions to common problems.

12:24.540 --> 12:30.720
They've been tried and tested over the years and when we follow those try and tested means lot of smart

12:30.720 --> 12:33.420
people come up with these ideas and we're following them.

12:33.420 --> 12:36.960
So we're really following good proven methods.

12:36.960 --> 12:42.420
I also hope you learn how to write high quality Joe Java code because of all these design characteristics

12:42.420 --> 12:43.450
that we learned about.

12:43.950 --> 12:50.130
But basically you should be proficient in basic design principles because the design patterns are following

12:50.130 --> 12:52.640
a lot of them into and the lecture.

12:52.650 --> 12:54.990
I want to say congratulations.

12:54.990 --> 12:56.730
Pat yourself on the back.

12:56.820 --> 12:58.410
You did a great job you learned a lot.

12:58.410 --> 13:01.510
Like I said this class these concepts are not easy.

13:01.560 --> 13:04.610
I would I would encourage you to continue to study them.

13:04.710 --> 13:07.730
OK and also don't hesitate to ask questions.

13:07.770 --> 13:12.060
I monitor the CUNY board every day so I should get back to you pretty quickly.

13:12.060 --> 13:19.350
Also please provide feedback via the ratings please provide fair feedback.

13:19.350 --> 13:24.720
It's important the ratings are used quite a bit and the classes and so I'm just looking for fair feedback.

13:24.750 --> 13:26.140
I know I'm not perfect OK.

13:26.160 --> 13:27.700
I know I tend to ramble on.

13:27.780 --> 13:29.910
I know I've repeated myself quite a bit.

13:29.910 --> 13:35.420
Sometimes it's intentional to focus emphasize important characteristics sometimes I just ramble on.

13:35.560 --> 13:37.010
I apologize for that.

13:37.060 --> 13:39.030
I also know that I make mistakes.

13:39.070 --> 13:40.810
There are some mistakes in the code.

13:40.840 --> 13:41.820
Please be gentle.

13:41.820 --> 13:45.850
Don't hold it against me I put a lot of effort in the class I did the best I could.

13:45.850 --> 13:47.710
Everybody makes mistakes.

13:47.710 --> 13:49.960
And again hopefully you learned a lot.

13:49.960 --> 13:55.590
Hopefully you'll forgive me on some of the things so please provide fair ratings fair constructive criticism.

13:55.990 --> 13:58.660
And you know I'm always looking for constructive criticism.

13:58.660 --> 14:02.890
Always looking for ways to improve the course so if you have any ideas on how to improve this course

14:03.100 --> 14:08.090
please let me know and I'll continue to make course updates to improve this class.

14:08.140 --> 14:10.710
I'm always looking new improved so I'll make updates.

14:11.320 --> 14:15.280
I may add some other design patterns if they end up being popular and so forth.

14:15.280 --> 14:17.010
But again congratulations.

14:17.020 --> 14:19.280
I really appreciate you signing up for the course.

14:19.330 --> 14:24.250
The most important thing is that you learned a lot and so I really hope you learned a lot.

14:24.250 --> 14:27.460
Good luck in your future software career.

14:27.460 --> 14:30.010
I really really encourage you to use design patterns.

14:30.010 --> 14:32.260
And thank you very much for signing up for the class.
