WEBVTT

00:05.120 --> 00:06.450
Hello and welcome back.

00:06.530 --> 00:11.810
In this lecture I want to talk about how we can implement the adapter pattern using object composition.

00:11.810 --> 00:15.060
I'm going to show you two separate ways to implement this pattern.

00:15.150 --> 00:22.640
One in this manner and another using inheritance which will be the class and after implementation.

00:22.760 --> 00:28.040
So here's a nice class diagram that I took from head first design patterns that describes how you implement

00:28.550 --> 00:35.000
the adapter using composition what you see here are no different objects the client the target the adapter

00:35.000 --> 00:36.240
and the deputy.

00:36.440 --> 00:43.130
The client is gonna use the target interface for all of its communication with the interface what the

00:43.130 --> 00:48.020
target interfaces gonna do is it's gonna be implemented the adapter is gonna be implementing the target

00:48.020 --> 00:54.030
interface and so the adapter implements the target interface by having a relationship with the adapter.

00:55.370 --> 01:01.390
And the adapter will do all the conversion to make sure that the client can talk with the adapter.

01:02.150 --> 01:04.530
So the adapter is composed with the adapter.

01:05.760 --> 01:05.910
Right.

01:05.970 --> 01:12.890
There's an instance of the adapting in the adapter class and all requests get delegated to the adapter.

01:13.610 --> 01:18.590
And we'll see how that works when we go through a concrete example but at a high level these are the

01:18.590 --> 01:22.560
objects that are involved and these are their responsibilities.

01:22.700 --> 01:28.130
And just to reiterate the target defines a domain specific interface that the client uses the client

01:28.250 --> 01:35.060
is gonna collaborate with objects conforming to the target interface the adoptee defines an existing

01:35.060 --> 01:40.760
interface that needs adapting right that's the one that's incompatible and then the adapter will adopt

01:40.760 --> 01:45.650
the interface of the adapters to the target interface we'll do all the conversion it involves a single

01:45.650 --> 01:50.800
class which is responsible to joint functionalities of independent or incompatible interfaces it will

01:50.810 --> 01:53.280
have a composition relationship with the adapter.

01:55.680 --> 01:58.590
And this is how the client will use the adapter.

01:58.590 --> 02:04.980
The client is implemented against the target interface as we mentioned so we'll send a request to the

02:04.980 --> 02:11.250
target interface target interface is the adapter the adapter will have that interface and then we'll

02:11.250 --> 02:16.950
have concrete classes and implement the adapter and so then that translated request will go to the adapter

02:18.090 --> 02:22.710
to get the information it needs to do to return to the client.

02:23.180 --> 02:27.780
And so this is just a good another illustration from the head design patterns book that really sums

02:27.780 --> 02:32.520
up everything and how the client will use the adapter right.

02:32.550 --> 02:39.130
Some of the things I mentioned before so a client makes a request adapter by calling a method on it

02:39.130 --> 02:40.240
using the target interface.

02:40.240 --> 02:45.210
The adapters translate the adapter I'm sorry translates the request into one or more calls on the adapter

02:45.250 --> 02:49.080
using the adoptee interface and also has a composition relationship.

02:49.270 --> 02:53.050
The client receives the results of the call never knows there's an adapter doing the translation is

02:53.050 --> 02:56.650
completely abstracted completely transparent.

02:56.800 --> 03:02.560
So essentially clients will call operations on the adapter instance and turn the adapter calls that

03:02.560 --> 03:05.410
the operations that carry out the request.

03:05.410 --> 03:08.290
Very very straightforward.

03:08.640 --> 03:14.850
So to summarize adapters vary in the amount they work they they do to adapt the adapt the to the target

03:14.850 --> 03:21.510
interface they'll either do simple interface conversion change the name of Operations Support an entirely

03:21.510 --> 03:26.110
different set of operations so there may be methods and really the only difference is the names so they're

03:26.130 --> 03:28.320
just essentially do a mapping.

03:28.320 --> 03:32.880
Same with the attributes if you want to get certain attributes and the attributes are identical in each

03:32.880 --> 03:38.100
class but they have different names so just do a mapping the amount of work the adapter does depends

03:38.100 --> 03:43.650
on how similar the target interface is to the adapters if the adapter has more and more attributes and

03:43.650 --> 03:48.800
more behaviors it will need to either stop a mile or say UN support operation or things like that.

03:48.840 --> 03:55.380
Or if one of the methods in the adapter and the ADAPT is similar but it actually maybe does a different

03:55.380 --> 03:59.120
calculation you have to decide how you're going to do that translation.

03:59.130 --> 04:01.370
How are you gonna do that conversion.

04:01.370 --> 04:04.920
The adapter frees you from worrying about existing interfaces.

04:04.920 --> 04:09.330
If I have a class that does what I need I know that I can always use the adapter pattern to give it

04:09.330 --> 04:10.680
the correct interface.

04:10.700 --> 04:16.380
It's a very useful pattern and the lax lacks so we'll go through a concrete example of implementing

04:16.830 --> 04:19.780
the adapter using object composition.

04:19.800 --> 04:20.160
Thank you.
