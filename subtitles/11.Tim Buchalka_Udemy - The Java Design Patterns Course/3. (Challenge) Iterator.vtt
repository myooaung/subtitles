WEBVTT

00:05.300 --> 00:06.950
Hello and welcome back.

00:06.950 --> 00:12.230
We have a challenge for you for the iterator design pattern we're gonna create an application that is

00:12.230 --> 00:18.720
used in college environments will access specific data different subjects of certain departments.

00:19.190 --> 00:23.090
You're going to have different departments that store information in different data structures.

00:23.300 --> 00:27.380
The arts department is going to use an array data structure to store different subjects.

00:27.380 --> 00:32.030
The science department is going to use a linked list data structure to store different subjects you're

00:32.030 --> 00:37.420
required to use the iterator design pattern so that you can access this data through common methods.

00:37.490 --> 00:41.300
It does not care which data structures used by individual departments.

00:41.510 --> 00:48.620
We are displaying the subjects using iterator is so the design you're required to create an iterator

00:48.620 --> 00:54.950
interface that will contain common methods for both types of iterations science or arts.

00:54.950 --> 01:03.040
It includes methods first and that will first of all be avoid function and reset to the first element.

01:03.100 --> 01:05.670
We'll have a next method that will return a String.

01:05.690 --> 01:11.290
Get the next element is done we'll turn a boolean end of the collection check and the current item which

01:11.290 --> 01:16.030
returns a string retrieve the current item we're going to be displaying subjects through the common

01:16.030 --> 01:17.490
methods is done.

01:17.620 --> 01:25.320
And next you can use the other two methods first and also first and current item if you need to concrete

01:25.320 --> 01:29.970
iterator is named Art's iterator in science iterator need to be created.

01:29.970 --> 01:35.130
These should be entire classes of your concrete aggregates only can use the iterator to diverse.

01:35.160 --> 01:40.380
That way you're ensuring that you can only use the operators constructors will take an array for arts

01:40.440 --> 01:43.710
in a linked list for a science requirements.

01:43.790 --> 01:45.860
Create your aggregate interface.

01:45.860 --> 01:50.960
This could be the subject interface remember the aggregate is the collection it includes only the carry

01:50.960 --> 01:55.540
iterator method which returns in iterator create your concrete aggregates.

01:55.700 --> 01:58.160
Art should use an array to store subjects.

01:58.250 --> 02:02.230
Constructor or main can populate array with default strings.

02:02.240 --> 02:04.370
Science should use a linked list to store objects.

02:04.490 --> 02:10.630
You can add some dummy data either through the constructor or the main method.

02:10.640 --> 02:12.410
Lastly you need to create your client.

02:12.410 --> 02:17.970
This should display a bunch of objects using both types of iterator is either arts or science in some

02:17.970 --> 02:23.900
example output would be sine just iterate through science subjects or iterate through art subjects and

02:23.910 --> 02:30.590
it displays the data using the iterator so this implementation is going to allow us to support different

02:30.590 --> 02:36.230
variations for the traversal of an aggregate where the Agora is the interface to create an iterator

02:36.260 --> 02:37.650
object.

02:37.670 --> 02:41.750
Also most importantly it simplifies the interface.

02:42.140 --> 02:46.610
You have to be careful what traversing in any kind of modification during that traversal period can

02:46.610 --> 02:48.310
cause problems.

02:48.470 --> 02:53.390
So let's go ahead and implement this iterator design pattern through these subjects so you can traverse

02:53.390 --> 02:58.180
them in each actual aggregate is going to store the data differently.

02:58.190 --> 02:58.570
Thank you.
