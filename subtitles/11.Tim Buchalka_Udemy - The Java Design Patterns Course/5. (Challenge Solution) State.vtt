WEBVTT

00:05.340 --> 00:06.690
Loan Welcome back.

00:06.740 --> 00:12.530
And this lecture I want to provide a solution to our previous challenge which was an assignment on implementing

00:12.530 --> 00:19.990
the state design pattern of simple application that simulated vibration and silence and a mobile phone.

00:21.110 --> 00:31.740
So we're gonna call this state solution a state solution and the first thing we're gonna do is we're

00:31.740 --> 00:33.240
going to create our state interface.

00:33.240 --> 00:36.990
This can be either an abstract class or an interface.

00:36.990 --> 00:48.200
We're just gonna call it mobile alert state mobile alert state and we'll make this an interface.

00:48.240 --> 00:49.530
This is just gonna have one method.

00:49.530 --> 00:56.370
This is gonna have the public void alert method something like that and then we're gonna create the

00:56.370 --> 00:57.640
context.

00:57.930 --> 01:00.750
The context is the alert state context.

01:01.140 --> 01:09.080
So we'll create another new class and this will be called alert state context.

01:09.090 --> 01:13.130
Now this is gonna have a reference to our state objects.

01:13.350 --> 01:18.360
So we'll say private mobile alert state.

01:18.360 --> 01:24.360
Current state and then we're gonna have a constructor that sets that current state.

01:24.360 --> 01:32.340
Now we're gonna need to have two concrete state objects vibration and silence.

01:32.340 --> 01:37.710
And so the constructor is gonna set an initial state it's gonna use the concrete state object which

01:37.710 --> 01:39.730
we haven't implemented yet but we will sign it.

01:39.960 --> 01:44.730
It's also gonna have a set state method and then it's gonna have the alert method the alert method is

01:44.730 --> 01:51.420
always easy to implement because it's just going to call the current state use the current state object

01:51.420 --> 01:53.300
and call the alert method in there.

01:53.370 --> 01:59.190
So it uses polymorphism so we can say public and this is really the gist of the pattern.

01:59.190 --> 02:04.740
Public void alert and then we can just say current state that call the alert method.

02:04.750 --> 02:04.900
Right.

02:05.010 --> 02:08.240
And that will handle the state change.

02:08.280 --> 02:12.310
So now we need to create our concrete state classes.

02:12.310 --> 02:13.440
Remember gonna have two of those.

02:13.440 --> 02:21.220
We're gonna have our vibration and then we're also going to have a silent class so that vibration is

02:21.220 --> 02:26.640
gonna be pretty simple because it's just gonna have one overridden method.

02:26.890 --> 02:27.910
That alert method.

02:28.030 --> 02:32.920
And we're not going to actually turn a phone on and put a phone in vibration because we don't have access

02:32.920 --> 02:39.130
to all the hardware we're just gonna output some code saying that it worked the other concrete class

02:39.130 --> 02:42.670
that we need to create is the silent class.

02:42.670 --> 02:44.860
And again very straightforward to implement the alert.

02:45.370 --> 02:48.030
And it's gonna do some different action based on the handler.

02:48.100 --> 02:52.680
In this case it's gonna print out a different output message.

02:54.250 --> 02:55.280
And I screwed up a little.

02:55.280 --> 03:02.900
These classes really should go in the implementation of this alert state.

03:02.900 --> 03:10.970
These should go on inside here because they're implementing the different states and then the context

03:10.970 --> 03:11.630
is separate right.

03:11.630 --> 03:18.110
The context is just going to have a reference to the state and then call the right method on that instance.

03:18.110 --> 03:24.260
Last thing we need to do is only to create a client so we'll just call this client and we'll have the

03:24.260 --> 03:27.860
standard main method.

03:27.860 --> 03:31.530
Public static void main.

03:32.690 --> 03:40.640
And this is just gonna create an alert state context and we'll just say state context and then we'll

03:40.970 --> 03:48.380
say a new alert state context and then we're just going to set a bunch of alerts and then change the

03:48.380 --> 03:49.110
state.

03:49.250 --> 03:55.070
So when we initially said a couple of alerts the state is gonna be in a default state which is the vibration

03:55.070 --> 03:55.400
state.

03:55.430 --> 03:56.450
So we should see that.

03:56.480 --> 04:00.600
So if we set if we call our twice we should cease vibrate.

04:00.620 --> 04:08.180
Then if we change it to a silent state we should see all subsequent calls to the alert now be handling

04:08.180 --> 04:08.930
in the silent state

04:12.290 --> 04:13.010
something like this.

04:13.010 --> 04:18.840
We change the change of state and then the context should change as well.

04:19.190 --> 04:25.210
So we're gonna say build I'm going to run this client and we'll just gonna see simple output that the

04:25.210 --> 04:31.840
state is changing initially again the state is gonna be vibration for twice because we call our twice

04:32.470 --> 04:36.090
and then silent three times so pretty straight forward.

04:36.090 --> 04:38.050
Not a lot of objects in the state right.

04:38.060 --> 04:41.130
We just have our state interface and then an object for each state.

04:41.130 --> 04:45.210
And remember if you have a lot of states this can get problematic because you have a lot of objects

04:46.290 --> 04:51.300
but the state context will just have a reference to the interface and then through polymorphism at runtime

04:51.300 --> 04:57.030
it's going to call the right alert method for that particular state and the action will be handled if

04:57.030 --> 04:58.580
you have any questions please let me know.

04:58.650 --> 04:58.980
Thank you.
