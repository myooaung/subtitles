WEBVTT

00:05.180 --> 00:06.380
Hello and welcome.

00:06.380 --> 00:09.620
In this lecture I'd like to talk about the open closed design principle

00:12.200 --> 00:20.420
Bertrand Meier proposed the open closed principle by center name correctly or him classes and methods

00:20.420 --> 00:25.780
should be open for extension new functionality basically enclosed for modification.

00:25.790 --> 00:28.830
It's pretty descriptive name.

00:28.850 --> 00:33.020
Open open closed principle open from extension closed for modification.

00:33.020 --> 00:35.150
What that means is would you change.

00:35.150 --> 00:37.010
You shouldn't have a lot of change in classes.

00:37.010 --> 00:39.090
You should only be able to add new things.

00:39.200 --> 00:43.840
A class should be easily extensible without modifying the class itself.

00:43.940 --> 00:44.960
So how do you achieve that.

00:45.020 --> 00:47.170
You may ask yourself and we'll get to that.

00:47.470 --> 00:52.820
A module is said to be open if it is still available for extension it should be possible add fields

00:52.820 --> 00:58.400
to the data structures that contains or new elements to the set of functions it performs so in Java's

00:58.400 --> 01:00.050
case adding new methods.

01:00.410 --> 01:05.840
Adding any kind of new data structures and new collection classes any new things like that should be

01:05.840 --> 01:10.790
easy to do by extending the class without actually having to modify the class itself.

01:10.940 --> 01:17.150
A module is said to be closed if it is available for use by other modules modules in this case are objects

01:18.490 --> 01:25.260
assume that the module has been given a well-defined stable description the interface in the sense of

01:25.260 --> 01:27.650
information hiding not a Java interface right.

01:27.660 --> 01:30.300
We mentioned before the interface is an overloaded term.

01:30.510 --> 01:34.950
In this case it's just a generic interface it doesn't have to be a Java interface.

01:34.970 --> 01:41.220
But again it's closed if it's available for use by other modules.

01:41.220 --> 01:44.880
The general idea of this principle is that it tells you to write your code so that you'll be able to

01:44.880 --> 01:47.940
add new functionality without changing existing code.

01:47.960 --> 01:52.490
It really hits the right in the head of the now there.

01:52.550 --> 01:57.090
It prevents situations in which a change to one of your classes also requires you to adopt all dependent

01:57.110 --> 01:58.250
classes.

01:58.500 --> 02:04.280
Again this cascading effect which will reduce the tightly coupled objects.

02:04.290 --> 02:04.670
Right.

02:04.710 --> 02:10.410
You're not going to have tight coupling if you can make changes without having all these other changes

02:10.410 --> 02:12.540
you need to make in other classes.

02:12.540 --> 02:17.580
Robert C. Martin considered this principle as the most important principle of object oriented design

02:18.240 --> 02:20.760
and if you don't know Robyn C. Martin is look him up.

02:20.910 --> 02:24.210
He's basically the godfather of object oriented design.

02:24.210 --> 02:26.100
He's very very important.

02:26.340 --> 02:30.030
So if he says this principle is a big deal this principle is a big deal.

02:30.480 --> 02:34.300
So pay close attention for this again open for extension.

02:34.350 --> 02:36.900
Adding new functionality close for changes

02:39.670 --> 02:44.930
unfortunately mayor proposed the use of inheritance to achieve this principle.

02:44.930 --> 02:45.960
How do you implement it.

02:46.090 --> 02:47.290
They said inheritance.

02:47.350 --> 02:52.600
This is not the best way to do it because we mentioned before that inheritance introduces tight coupling

02:52.990 --> 02:57.340
because subclasses depend on the implementation of the base class.

02:57.850 --> 03:04.240
Others refine this open closed principle to use more of a polymorphic open closed principle and they

03:04.240 --> 03:08.020
almost renamed it polymorphic and open closed principle.

03:08.020 --> 03:14.350
What this does is it uses interfaces instead of super classes to allow for different implementations.

03:14.350 --> 03:21.660
Interfaces can be reused through inheritance but in imitation nappy so you can easily substitute without

03:21.660 --> 03:27.000
changing the code that uses them multiple mutations have be created and polymorphic fully substituted

03:27.000 --> 03:28.450
for each other.

03:28.530 --> 03:30.910
Again this is programming to an interface.

03:30.960 --> 03:35.790
Our first principle we're using that principle in implementing the open closed principle we want to

03:35.790 --> 03:41.550
use interfaces we want to stay away from inheritance as possibly because of that coupling between subclasses

03:41.550 --> 03:47.480
and base classes interfaces are by definition closed for modifications.

03:48.330 --> 03:54.200
And you can provide new implementations to extend the functionality of your software it's important

03:54.200 --> 03:58.550
to have your interface defined front and you don't want to change it as much every now and then you

03:58.550 --> 04:05.810
do but for the most part closed new implementations must implement the interface so the extension part

04:05.810 --> 04:11.150
here right you can add new functionality very easily to an interface by just adding a new class that

04:11.150 --> 04:18.230
implements that interface but you don't change the interface much so the interfaces introduce an additional

04:18.230 --> 04:24.500
level of abstraction which enables this loose coupling interfaces are independent of each other and

04:24.500 --> 04:26.540
they don't need to share any code usually.

04:26.720 --> 04:28.090
Sometimes they do.

04:28.110 --> 04:28.830
And now.

04:28.910 --> 04:30.460
Nice of Java.

04:30.470 --> 04:34.970
Java later a features there you can have default methods but for the most part they don't need to share

04:34.970 --> 04:36.940
any code so they're independent.

04:36.950 --> 04:40.130
And this promotes loose coupling.

04:40.130 --> 04:44.870
So again to make this easier to understand let's look at an example an ontology that demonstrates this

04:44.870 --> 04:45.400
principle

04:50.480 --> 04:51.960
will open up ontology here.

04:51.970 --> 04:53.590
You know the drill.

04:54.040 --> 05:01.530
Create a simple project I want to demonstrate a rectangle some various shapes project here.

05:01.810 --> 05:03.890
I'll try to do this quicker so we don't have to

05:07.160 --> 05:08.770
let's not create a project from a template.

05:08.780 --> 05:16.580
Let's just name this open closed principal example.

05:17.000 --> 05:21.380
This application is going to calculate areas of various shapes.

05:21.380 --> 05:27.620
So we're gonna first start off with creating a class for our first shape a rectangle which has two attributes

05:27.620 --> 05:32.570
length in a way with so we're just gonna make it by default.

05:32.570 --> 05:33.250
Public here

05:36.470 --> 05:40.010
and just again to simple member variables.

05:40.520 --> 05:44.300
And we're gonna make them public just for demonstration purposes.

05:44.330 --> 05:49.190
Companies so pay attention to that because remember all our member verbals should be public private

05:49.330 --> 05:50.990
for encapsulation.

05:50.990 --> 05:56.160
But we just have to remember verbals length and with pretty basic.

05:57.260 --> 06:02.770
Next thing we want to do is we want to create a class to calculate the area of this rectangle.

06:02.780 --> 06:05.220
It's going to have a method calculate Rectangle area.

06:05.300 --> 06:10.190
It takes the rectangle as an input parameter and calculates Syria.

06:10.190 --> 06:13.820
So class area rectangle or area calculator.

06:13.820 --> 06:16.700
I'm sorry.

06:17.900 --> 06:26.480
This will return a double and take a rectangle as an object as a parameter

06:30.980 --> 06:37.010
and the implementation of this method is is going to just return the rectangle

06:40.520 --> 06:41.390
length times with

06:47.930 --> 06:48.700
pretty basic right.

06:48.710 --> 06:49.610
How to Create.

06:49.610 --> 06:56.710
Create the calculate the area and use mine tell since more often.

06:56.880 --> 06:59.830
So again not too complicated here.

07:00.600 --> 07:02.510
Rectangle area calculator class.

07:02.520 --> 07:05.460
Now say you want to add another shape.

07:05.460 --> 07:07.500
Let's say we want to add a circle.

07:07.590 --> 07:10.320
We're going to create a new class for a circle right.

07:10.320 --> 07:18.750
The circle has one member variable which is a radius.

07:19.230 --> 07:21.360
Again pretty simple there.

07:21.370 --> 07:28.180
So now we need to modify our era calculus class to add circle calculations all right.

07:28.390 --> 07:32.160
So now we want to do the area of a circle.

07:32.350 --> 07:34.340
We have to add another method.

07:34.850 --> 07:35.050
Right.

07:35.050 --> 07:36.430
Public double calculate

07:38.830 --> 07:42.800
Circle area.

07:43.090 --> 07:49.800
And that will take a circle object and to calculate the area of a circle.

07:49.900 --> 07:56.290
We basically just have to return twenty two divided by seven.

07:56.440 --> 08:01.000
And don't ask me about this calculation it's just a circle area calculation.

08:01.180 --> 08:10.560
We take the circle radius times two are squared.

08:10.960 --> 08:14.660
So now we have our calculation of our circle area.

08:14.780 --> 08:18.710
What do you notice about this design right.

08:18.710 --> 08:21.900
It seems like there's some issues right.

08:21.900 --> 08:28.990
What if we want to add another shape then we have to keep modifying the area calculator class as we

08:28.990 --> 08:34.830
add new shapes the era calculator class keeps on changing all the consumers of this class.

08:34.830 --> 08:39.110
We'll have to keep on updating the code to contain area calculator.

08:39.590 --> 08:47.070
All of our new shapes so the area that calculator class is not finalized every time a new shape comes

08:47.070 --> 08:48.150
in.

08:48.150 --> 08:50.640
We have to modify it by adding a new method.

08:50.850 --> 08:53.640
The design is not closed for modification.

08:53.640 --> 08:59.570
The design is also not extensible error calculator will need to keep on adding new logic as you mentioned.

08:59.590 --> 09:04.700
Another method for each new shape we are not expanding the scope of the shapes.

09:04.880 --> 09:07.790
We are adding a new solution for every shape that is added.

09:08.140 --> 09:13.450
So we have to modify this design so that complies with the open closed principle.

09:13.450 --> 09:20.230
The best way to do this is to define interface a shape interface that can have and then have the circle

09:20.230 --> 09:22.990
and rectangle classes implement that shape.

09:23.110 --> 09:24.820
So let's add a new interface

09:27.690 --> 09:29.720
we'll say public interface shape.

09:31.790 --> 09:38.660
And this is going to contain our calculate area method.

09:39.980 --> 09:42.410
And it's not going to take any parameters.

09:42.500 --> 09:48.980
Now we're going to change our rectangle to implement the shape interface.

09:49.430 --> 09:59.660
And so then our logic for implementing the area will be pretty simple we'll just do the link times with

10:01.510 --> 10:04.360
so we're going to implement our public double calculate area

10:08.560 --> 10:10.450
which will just return the link times with.

10:10.720 --> 10:18.370
So I really need you to copy that turn the length times the width and then we would do the same for

10:18.370 --> 10:19.990
the circle.

10:20.160 --> 10:27.670
Probably better organize this a little bit better move circle up here and class circle is going to implement

10:27.670 --> 10:28.210
our shape

10:32.890 --> 10:35.680
and it's going to calculate the radius

10:41.130 --> 10:45.220
by doing that nice function nice method here.

10:45.390 --> 10:57.030
Twenty two times Radius Radius.

10:58.120 --> 10:59.670
And there we go.

10:59.670 --> 11:07.820
This a design is much more extensible the reasons that it's more extensible is there's a base interface

11:07.850 --> 11:10.610
shape now and all shapes.

11:10.620 --> 11:12.630
Now implement the base interface shape right.

11:12.660 --> 11:20.180
We see that with rectangle and circle shape interface has this abstract method calculate area so both

11:20.180 --> 11:24.550
the circle and the rectangle provide their own overwritten implementations of the calculate area.

11:25.370 --> 11:26.820
Using their own attributes right.

11:26.850 --> 11:32.360
Lengthen width inside rectangle in radius inside shape or inside circle sorry.

11:32.360 --> 11:35.180
Shapes are now an instance of shape interfaces.

11:35.210 --> 11:38.260
This allows us to use shape instead of individual classes.

11:38.390 --> 11:45.820
Wherever these classes are used by any consumer so we can modify our area calculator where we can remove

11:45.820 --> 11:48.780
these methods.

11:48.960 --> 11:52.650
We can now add a single method calculate shape area

11:56.670 --> 12:01.100
which takes shape object.

12:01.110 --> 12:08.240
And this just says return shape that calculate area right and you should notice.

12:08.280 --> 12:10.620
This looks like a delegation right.

12:10.650 --> 12:16.920
We're actually assigning responsibility for calculating area to our various shape classes circle and

12:17.250 --> 12:24.110
rectangle and calculate shape area now can also be polymorphic because it takes a shape so it now Eric

12:24.160 --> 12:26.490
calculator doesn't have the design flaws.

12:26.540 --> 12:31.810
This is a clean solution which adheres to the open closed principle.

12:31.850 --> 12:37.340
This resulting design is open for extension more shapes can be added without modifying the existing

12:37.340 --> 12:38.580
code.

12:38.630 --> 12:44.180
We don't have to modify Eric calculator all we have to do is we create a new class for new shape.

12:44.180 --> 12:51.830
Implement the interface and implement the calculate area method with a formula specific to that class.

12:51.830 --> 13:00.720
The new shape the design is also closed from modification area calculated classes complete it can calculate

13:00.720 --> 13:08.710
the area of any shape works for all shapes any classes that implement the shape interface essentially.

13:08.710 --> 13:14.740
So again now we adhere to the open closed principle open for extension by implementing the interface

13:15.480 --> 13:19.070
closed for modification error calculators closed.

13:19.120 --> 13:22.180
So this is a good example of the open closed principle.

13:22.180 --> 13:25.550
As mentioned the very very important principle.

13:25.570 --> 13:30.250
So we'll go through examples again when we implement design patterns that demonstrate this more but

13:30.250 --> 13:35.970
you can also see how this particular implementation also uses delegation.

13:36.070 --> 13:43.150
So a nice little thing here where we can use interfaces and polymorphism and have our implementation

13:44.050 --> 13:46.600
open for extension and close for modification.

13:46.600 --> 13:46.960
Thank you.
