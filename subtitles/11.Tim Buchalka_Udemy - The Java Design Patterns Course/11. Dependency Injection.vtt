WEBVTT

00:05.210 --> 00:06.460
Hello and welcome.

00:06.500 --> 00:09.710
This lecture I'd like to talk about dependency injection.

00:09.710 --> 00:13.970
This goes hand in hand with the dependency inversion principle dependency inversion.

00:14.000 --> 00:17.910
Remember has to do more with not doing that top down approach.

00:18.140 --> 00:24.720
And also it's very closely related to programming through interfaces although it's a little more strict.

00:24.740 --> 00:30.180
So let's talk about dependency injection first let's just talk about what dependencies are.

00:30.230 --> 00:36.590
We should understand what dependencies are through our common term coupling because coupling has to

00:36.590 --> 00:37.790
do a lot with dependency.

00:37.790 --> 00:38.310
Right.

00:38.360 --> 00:44.060
But in order to understand dependency injection we have to understand what dependencies are may seem

00:44.060 --> 00:46.410
intuitive but I just want to quickly cover it.

00:46.520 --> 00:52.610
So Java classes and dependency and another class if it uses an instance of this class it's referred

00:52.610 --> 00:59.210
to as a class dependency class which axis is a logger service that has a dependency on this service

00:59.210 --> 00:59.530
class.

00:59.540 --> 01:01.690
That would be an example right.

01:01.690 --> 01:07.330
So if you had an instance of a logger service in your application that class that has an instance would

01:07.330 --> 01:11.680
have that dependency Java classes should be as independent as possible from other Java classes.

01:11.680 --> 01:17.230
That's what we strive for that's loose loose coupling it increases the possibility of reusing these

01:17.230 --> 01:20.370
classes and to be able to test them independently from other classes.

01:20.380 --> 01:20.540
Right.

01:20.550 --> 01:25.290
We kind of notice the less dependencies the easier they are to maintain.

01:25.360 --> 01:31.400
When you change something you don't have a ripple effect if a Java class creates an instance of another

01:31.400 --> 01:33.500
class via the new operator.

01:33.500 --> 01:43.030
It cannot be used and tested independently from this class and this is called a hard dependency dependency

01:43.030 --> 01:44.040
injection.

01:44.090 --> 01:46.090
Solve these hard dependencies.

01:46.150 --> 01:51.490
So that's what we're trying to accomplish when we file the Dependency Injection principle we try to

01:51.490 --> 01:57.370
solve these hard dependencies when we have a specific class has a dependency and another class by using

01:57.370 --> 01:58.450
the new operator

02:01.170 --> 02:05.790
so let's look at an example and tell a j of a class that has a hard dependency.

02:05.850 --> 02:06.870
We'll be pretty straightforward.

02:06.870 --> 02:10.320
So we're just going to create a quick project we'll just call test for now.

02:11.190 --> 02:13.090
It's really not going to do much.

02:13.140 --> 02:14.640
I just want to be able to write some code

02:20.630 --> 02:24.510
what this class is gonna do it again it's just going to demonstrate what a hard dependency is.

02:24.680 --> 02:25.820
It's gonna be a client class.

02:25.830 --> 02:29.030
So we'll just start writing it.

02:30.890 --> 02:31.960
So the name is client.

02:32.900 --> 02:36.390
It's going to have an internal reference to some kind of service.

02:36.470 --> 02:40.010
So we'll just say this is an internal reference

02:43.550 --> 02:45.560
to the service used by this client.

02:45.560 --> 02:50.750
So in turn a reference to the service used by this client.

02:50.750 --> 02:55.970
So we're just gonna assume there's an example called example service a class called example service

02:56.420 --> 03:00.890
and we'll name a service that's going to stay red because we don't have that class defined yet for we'll

03:00.890 --> 03:03.470
have a client for a client

03:08.090 --> 03:10.430
and this is the constructor.

03:10.430 --> 03:23.210
This is going to specify a service specific implementation in the constructor instead of using any kind

03:23.210 --> 03:28.110
of dependency injection.

03:28.130 --> 03:34.620
So what we would do here is we would just instantiate the service.

03:35.530 --> 03:37.090
OK.

03:37.510 --> 03:43.490
And then we may have some methods in this class you know maybe something like that the client would

03:43.490 --> 03:48.170
use maybe a mess maybe a method called GRI or something like that.

03:48.240 --> 03:51.170
And so again it's a pretty simple class right.

03:51.170 --> 03:56.600
It just has a has a relationship with this example service and it has a method called greed that uses

03:56.600 --> 03:58.630
the example service.

03:58.640 --> 04:02.930
Pretty straightforward that service member is contained inside the class.

04:02.930 --> 04:08.110
And it's actually used in the method in instantiated in the client.

04:08.130 --> 04:11.670
This is an example of a hard coded dependency.

04:11.670 --> 04:16.260
The client has a hard dependency of the example service that makes sense.

04:16.290 --> 04:20.240
So let's look at some of the problems with this hardcoded dependency.

04:20.250 --> 04:24.660
First off you know it's a dependency that's typical in programming.

04:24.660 --> 04:25.710
It's somewhat trivial.

04:26.400 --> 04:31.710
However when the application code gets bigger and more complex the hard coded dependency among the classes

04:31.710 --> 04:33.870
introduces many problems.

04:34.070 --> 04:36.160
For one the code is very inflexible.

04:36.230 --> 04:41.940
It's going to be hard to maintain and extend as when a class permanently depends on another class.

04:41.990 --> 04:46.460
So the change to the dependent class may require a change to the dependent class.

04:46.490 --> 04:50.180
So whenever you change example service you're going to probably have to change client.

04:50.990 --> 04:55.240
So it's very inflexible code codes also harder to get on a unit test.

04:55.590 --> 05:00.020
And we mentioned the importance of unit tests in previous lectures.

05:00.020 --> 05:04.340
When you want to test only the functionality of a class you have to test the other dependent classes

05:04.340 --> 05:05.120
as well.

05:05.120 --> 05:11.120
So if I want to actually get the client under test and I want to test the treatment method I would also

05:11.120 --> 05:15.350
have to have a dependency with the exam example service.

05:15.520 --> 05:17.890
I would also have to try to get rid of that dependency.

05:17.890 --> 05:20.240
You would probably mark it out.

05:20.240 --> 05:25.250
The code is also hard to reuse because of the coupling the dependencies between the example service

05:25.910 --> 05:26.540
and the client.

05:26.570 --> 05:33.450
If we ever tried to use client Well we again we'd be reusing example service so the point here is dependency

05:33.450 --> 05:36.320
injection can solve all of these drawbacks.

05:36.330 --> 05:41.130
They can solve the inflexibility they can solve the fact that it's hard to get on a test and they can

05:41.130 --> 05:45.170
solve the tightly coupled to make it more loosely coupled All right.

05:45.240 --> 05:49.940
The code can be more flexible to changes easy for unit testing and reusable.

05:50.010 --> 05:57.090
So let's go back to the slides and talk more about dependency injection this slide basically summarizes

05:57.090 --> 06:01.920
what I just said in terms of the problems with the example and the hard dependency.

06:01.920 --> 06:03.930
Now how can Dependency Injection What is it.

06:03.930 --> 06:06.090
How can it solve this problem.

06:06.090 --> 06:10.420
It's a technique whereby one of the objects supplies the dependencies of another object.

06:10.590 --> 06:14.010
It enables do you replace dependencies without changing the class that uses them

06:16.810 --> 06:22.280
dependency is an object that can be used usually will refer to that as a service.

06:22.450 --> 06:28.240
The injection is the passing of the dependency to a dependent object dependent object is the client

06:28.390 --> 06:30.660
the client uses the service.

06:30.970 --> 06:36.520
It allows us to remove the hardcoded dependencies and make our application loosely coupled extendable

06:36.790 --> 06:41.100
and maintainable like we mentioned the problems with the example.

06:41.380 --> 06:44.650
It's one form of the broader technique of dependency inversion.

06:44.650 --> 06:51.330
So as I mentioned it is related to dependency inversion the Dependency Injection supports the dependency

06:51.330 --> 06:53.090
inversion principle.

06:53.220 --> 06:57.510
What's gonna happen is the client is they're going to delegate the responsibility of providing its dependencies

06:57.840 --> 07:03.550
to the external code the external code is referred to as the injector.

07:03.720 --> 07:06.530
We just talked about the dependency and aversion present principle.

07:06.560 --> 07:09.210
But again let's remind you of of what that is.

07:09.240 --> 07:14.070
So that you can relate it to the dependency injection dependency inversion is where you can introduce

07:14.070 --> 07:18.840
interfaces to break dependencies between higher and low lower level classes.

07:18.840 --> 07:19.060
Right.

07:19.060 --> 07:24.700
That after action technique both classes depend on the interface and they no longer depend on each other.

07:24.750 --> 07:28.180
That's the central focus of the Dependency inversion principle.

07:28.230 --> 07:33.100
You still have a dependency on the lower level class with the dependency inversion principle.

07:33.120 --> 07:38.460
What happens is the interface is only going to decouple the usage of the lower level class but not necessarily

07:38.460 --> 07:44.000
its instantiation so you still need instantiate the implementation of the interface.

07:44.050 --> 07:49.930
So the goal of dependency injection is to remove that dependency by separating the usage from the creation

07:49.930 --> 07:51.860
of the object.

07:51.910 --> 07:58.420
It's all about getting rid of the creation of the object dependency because remember dependency inversion

07:58.420 --> 08:00.490
still has that dependency.

08:00.490 --> 08:03.250
It's just no longer with a low level high our class.

08:03.250 --> 08:04.750
It's with that new instance.

08:04.840 --> 08:10.360
So dependency injection is going to reduce the amount of the required boilerplate code and it will improve

08:10.360 --> 08:12.220
in flexibility.

08:12.220 --> 08:15.460
Let's talk about the four roles and dependency injection.

08:15.460 --> 08:20.620
If you want to use dependency injection you need classes that fulfill four basic roles.

08:20.620 --> 08:27.820
We mentioned the service the service you want to use the client that uses the dependency and interface

08:27.820 --> 08:32.060
that is used by the client and implemented by the service would be the third role and the last role

08:32.060 --> 08:36.910
is the injector the injector creates a service instance and injects it into the client.

08:37.360 --> 08:42.400
So what you're doing here is somebody else is creating the instance and then they're passing it to the

08:42.400 --> 08:43.570
client.

08:43.570 --> 08:49.110
The injector creates it the dependency which is the service and then passes it to the client.

08:49.360 --> 08:54.490
You already implement three of these four roles by following the dependency inversion principle the

08:54.490 --> 08:58.840
service and the client are the two classes between which the dependency and Virgin principle intends

08:58.870 --> 09:04.480
to remove the dependency by introducing an interface so that low level class a high level class that

09:04.480 --> 09:12.310
service the client and then the actual interface removes that dependency that abstract class the injector

09:12.310 --> 09:17.050
is the only role that is not required by the dependency inversion principle who creates the object and

09:17.050 --> 09:18.130
then passes it through.

09:18.640 --> 09:22.930
So the injector is really what you have to learn here in dependency injection that you haven't learned

09:22.930 --> 09:25.510
in the dependency inversion.

09:25.540 --> 09:28.720
Now we have to try to figure out what this injector is all about.

09:28.720 --> 09:34.510
How can we use the injector to inject this new dependency while there's multiple ways you can do it.

09:35.110 --> 09:39.520
There's at least three ways an object and receive a reference to an external object.

09:39.520 --> 09:44.440
You can do it through a constructor injection where the dependencies are provided through the constructor

09:44.440 --> 09:51.330
you basically just passed the reference to the constructor and the client cetera injection.

09:51.330 --> 09:57.800
This is where the clients exposes setter method and you pass the dependency through the setter method

09:58.500 --> 10:04.110
and then the interface injection is the dependency provides an injector method that will inject the

10:04.110 --> 10:07.450
dependency into any client pass to it.

10:07.500 --> 10:10.650
So a client will be passed to the method and then it would inject it that way.

10:10.740 --> 10:17.360
Clients have to implement this interface that explosives the setter method that accepts the dependency.

10:17.420 --> 10:20.600
Here is an example of constructor injection.

10:20.660 --> 10:24.620
This method requires the client to provide a parameter in a constructor.

10:24.620 --> 10:29.630
And so again the services the dependency the client's going to use that dependency.

10:29.690 --> 10:35.100
All you do is the client constructor takes that service object and then you have a member variable that

10:35.100 --> 10:37.590
saves it And gets assigned to it.

10:38.650 --> 10:44.050
Setter injection where you have the set method inside the client pretty much very closely to the constructor

10:44.350 --> 10:45.780
although you have a set method.

10:45.910 --> 10:50.890
So set services this example again the service is passed and that way the reference and then you save

10:50.890 --> 10:51.810
it to remember variable.

10:51.820 --> 10:58.030
Those are very closely related the constructor and the setter injection the interface injection.

10:58.030 --> 11:03.520
Remember that you have to actually implement something and you pass the the service through the set

11:03.520 --> 11:04.870
service method.

11:04.870 --> 11:11.380
So this is simply the client publishing a role interface to the setter methods of the client's dependencies.

11:11.380 --> 11:16.220
This can be used to establish how the injector should talk to the client when injecting dependencies.

11:16.270 --> 11:19.440
Here we have our interface called Service Center.

11:19.500 --> 11:21.210
We have a set service method.

11:21.330 --> 11:23.970
It takes our service which is our dependency.

11:24.060 --> 11:26.990
We have a client class that implements the service center.

11:27.300 --> 11:31.770
And then again you have your member variables for your service and your set service method implements

11:31.770 --> 11:37.470
it the interface implements as a service and takes the service method has a reference and sets the member

11:37.470 --> 11:42.210
variable you would then have your service class here on the right that maybe has an eject method that

11:42.210 --> 11:44.880
takes the client has a parameter.

11:44.880 --> 11:51.420
The client would then call it set service method through the interface and set the service or the dependency

11:51.420 --> 11:51.960
that way.

11:52.050 --> 12:01.560
At this point let's look at an example that uses these four rolls for dependency injection.

12:02.100 --> 12:09.890
I'd like to create a new project and this is going to be our dependency injection example it's going

12:09.890 --> 12:20.970
to use those for roles the client service the injector in the interface so Dependency Injection example

12:24.500 --> 12:31.380
or we start by creating our interface public interface service.

12:32.270 --> 12:40.900
And this is just gonna think contain a simple right method takes a string.

12:41.040 --> 12:44.740
Now we're gonna create a service that implements the service.

12:44.760 --> 12:46.320
So we'll say public class

12:50.220 --> 12:56.050
service a implements service.

12:56.070 --> 13:02.250
And this is gonna have our over and method to right.

13:02.250 --> 13:05.710
Public void right.

13:05.760 --> 13:08.180
It takes a message.

13:09.000 --> 13:11.760
And this is just going to display some output

13:15.930 --> 13:17.180
hello world for example

13:21.990 --> 13:31.800
now we need our client will say and we're going to actually leave these class class client and we need

13:31.800 --> 13:42.380
a instance of our dependency so we're gonna say private service my service and then we're gonna do injection

13:42.380 --> 13:43.780
via the constructor.

13:43.820 --> 13:51.870
So here we can say injects via the constructor in here we'll have our constructor.

13:51.910 --> 13:52.780
It's pretty basic.

13:52.790 --> 14:00.920
We're just gonna set that reference.

14:00.920 --> 14:10.880
This stop my service equals service and that's an example of our constructor injection.

14:10.880 --> 14:18.170
Now we might have another method inside here that does something.

14:18.200 --> 14:23.120
Again not doing much but it's going to demonstrate that it will use that service that dependency.

14:23.120 --> 14:27.260
So I might just say my service stopped right and then write some message.

14:27.270 --> 14:29.980
You know this is a message.

14:30.410 --> 14:31.720
Something like that.

14:31.720 --> 14:36.890
And so there is an example of our constructor injection.

14:36.890 --> 14:43.070
We no longer have the dependency on the my service class because the service is gonna get instantiated

14:43.100 --> 14:45.090
elsewhere here.

14:45.350 --> 14:50.340
We would actually create the injector maybe inside of a main method or another class.

14:50.840 --> 14:51.110
Right.

14:51.140 --> 15:02.550
So let's actually create that mean.

15:02.550 --> 15:07.640
And so now we're we're going to actually do our instantiation is a dependency outside of the necessary

15:07.640 --> 15:08.390
of the Client class.

15:08.390 --> 15:09.530
This is just the main method.

15:10.190 --> 15:13.850
So here we could create our dependency.

15:14.150 --> 15:15.380
It's a new service a

15:18.720 --> 15:23.860
create our client and past the dependency via the constructor.

15:23.880 --> 15:24.060
Right.

15:24.060 --> 15:29.090
So this service right here this is the actual injector.

15:29.880 --> 15:36.720
And here is the client which is going to pass in the injector is going to be past the dependency into

15:36.720 --> 15:41.100
the service into the client constructor.

15:41.100 --> 15:44.670
So this injects the constructor

15:47.640 --> 15:54.510
and then you can actually call a client that do something.

15:54.690 --> 16:00.180
We could also use setter injection instead of constructor injection to pass the depending object to

16:00.180 --> 16:02.090
the dependent one.

16:02.110 --> 16:07.720
So all we will need to do is we will need to go in the Client class and add a set method.

16:08.050 --> 16:12.320
So that service.

16:12.990 --> 16:13.240
Right.

16:18.340 --> 16:25.240
And then you say this that service equals service they're my service I should say

16:30.660 --> 16:32.690
something like that.

16:33.090 --> 16:33.380
Right.

16:33.390 --> 16:38.910
And then when we create the new service and the new client instead of actually passing it into the constructor

16:39.480 --> 16:46.800
right we would end up doing something like client that says service and pass in service object this

16:46.800 --> 16:52.530
way and then we would call do something and that would be an example of injecting via the set method

16:52.680 --> 16:53.550
setter injection.

16:54.730 --> 16:55.810
OK.

16:55.980 --> 17:02.920
And that's basically dependency injection the dependency inversion principle introduced interfaces between

17:02.920 --> 17:04.650
a high level class and its dependencies.

17:04.660 --> 17:08.860
We know that and that decouple the higher level class from it its penalties.

17:08.860 --> 17:12.280
So that you can change the code of lower or lower class without changing the code that uses it.

17:13.300 --> 17:18.370
However is still had a dependency because the instantiation was happening in that lower level class

17:19.920 --> 17:24.900
so the only call that you actually use the dependency directly is the one that instantiate an object

17:24.900 --> 17:27.510
of the specific class that implements the interface.

17:27.860 --> 17:32.970
The dependency injection technique enables you to improve es improve the dependency inversion principle

17:32.970 --> 17:38.990
even further because it provides a way to separate the creation of an object from its usage so you can

17:38.990 --> 17:44.170
replace a dependency by doing this injection technique without changing any of the code.

17:44.180 --> 17:47.890
It also reduces the boilerplate code in the business logic of any class.

17:48.760 --> 17:51.670
So in a nutshell this was the dependency injection.

17:51.970 --> 17:57.400
Again the instantiation of this is outside of the Client class.

17:57.480 --> 18:00.200
Don't worry about it being in the main method right now.

18:00.280 --> 18:06.120
There's no dependencies now for the instantiation that's moved out so service say is instantiated somewhere

18:06.120 --> 18:10.400
else and there's no dependency there for that instantiation.

18:10.470 --> 18:10.890
Thank you.
