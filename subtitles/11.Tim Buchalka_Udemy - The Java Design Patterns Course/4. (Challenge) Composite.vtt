WEBVTT

00:05.340 --> 00:06.800
Hello and welcome back.

00:06.900 --> 00:12.480
In this lecture I want you guys to be able to test your knowledge on the composite design pattern.

00:12.480 --> 00:18.880
So we have another assignment another challenge the requirements of this assignment are as follows.

00:18.970 --> 00:23.890
We're going to use the composite pattern to implement an application that stores information for a college

00:23.920 --> 00:25.420
organization.

00:25.420 --> 00:31.850
We want to understand the hierarchy of the faculty so we have many professors with different titles.

00:31.990 --> 00:36.090
An adjunct professor and associate professor or full professor.

00:36.160 --> 00:38.590
We also have two heads of departments.

00:38.590 --> 00:44.870
These are department chairs one for computer science and one for mathematics the Maddox math mathematics

00:44.870 --> 00:50.300
department has two faculty members the computer science department has three faculty members.

00:50.300 --> 00:54.650
So you see the layers here that were that I'm identifying again you can kind of think of these all of

00:54.710 --> 01:04.180
art as objects try to identify the composites versus the Leafs or the composites are going to have faculty

01:04.180 --> 01:09.390
underneath them and the faculties themselves are going to be Leaf's.

01:09.540 --> 01:13.590
We also have a dean who can be the head of multiple departments.

01:13.890 --> 01:19.260
So the Dean is at that top layer the grouping that we want to achieve is to show the hierarchy of the

01:19.260 --> 01:25.230
technology department who is the dean of technology how many departments or chairs are under this Dean.

01:25.680 --> 01:28.530
How many professors are in each department.

01:29.250 --> 01:32.850
So you need to create many different objects that represent this hierarchy.

01:32.850 --> 01:38.940
Again to summarize one dean of technology this is a composite since it has faculty under it two departments

01:39.030 --> 01:41.880
a math and a computer science department.

01:41.880 --> 01:48.890
They have chairs composite since it has faculty underneath it and then two professors under math and

01:48.890 --> 01:53.360
three professors under computer science each professor is a primitive object.

01:53.360 --> 01:54.120
That's a leaf.

01:54.170 --> 01:55.360
Nothing below it.

01:55.580 --> 02:01.010
So the steps to implement this assignment are you first have to identify and create the component interface.

02:01.010 --> 02:06.080
This is what the client's going to use this component interfaces are going to allow you to treat leaves

02:06.500 --> 02:09.410
and composites in the same manner.

02:09.410 --> 02:13.430
So the first step is to create the component it declares the interface for the object and the composition

02:14.000 --> 02:17.480
it implements default behavior for the interface common to all classes.

02:17.480 --> 02:22.040
It declares an interface for access to commanding managing its child components.

02:22.040 --> 02:27.290
Now you can have this these access methods in this class or you can treat everything you formally or

02:27.290 --> 02:28.850
you can put it in the composite class.

02:28.850 --> 02:37.290
It's up to you our component is represented by the faculty interface contains a get details method that

02:37.290 --> 02:38.940
returns a string.

02:39.030 --> 02:43.540
Let's assume that the Dean chair and professors are all faculty members.

02:43.730 --> 02:43.910
Right.

02:43.920 --> 02:46.850
So the faculty interface is the component interface.

02:46.860 --> 02:48.330
That's what the client sees.

02:48.330 --> 02:50.430
One method get details.

02:50.430 --> 02:52.700
We have to then identify and create all the Leafs.

02:52.710 --> 02:55.270
Those are the primitive objects.

02:55.320 --> 02:59.640
This would be the leaf object and the composition remember leaf has no children.

03:00.440 --> 03:00.600
Right.

03:00.650 --> 03:06.400
So the pop defines behavior for both the primitive objects in the composition our leaf as a professor.

03:06.560 --> 03:09.950
All professors have a name a position and an office number.

03:09.980 --> 03:13.640
And the professor will implement the component the faculty interface.

03:13.790 --> 03:17.070
The next step is to create the composite.

03:17.120 --> 03:22.340
This is will define all the behavior for the components having children having leaves store as child

03:22.340 --> 03:26.580
components implements child related operations in the component interface.

03:26.810 --> 03:32.180
So you can declare these methods in here or you can implement them from the interface the component.

03:32.200 --> 03:37.340
It's up to you but they're adding removing and so forth from the data structure our composite is the

03:37.340 --> 03:40.320
supervisor who has faculty under them.

03:40.390 --> 03:47.180
This they have a name and a department name and methods include Add Remove get my faculty and get details

03:47.510 --> 03:55.020
get my faculty will only return the faculty directly under that supervisor the component represents

03:55.020 --> 04:02.250
a group of objects Deans who have chairs who have professors chairs who have professors under them we

04:02.250 --> 04:06.870
can treat a group of objects the deans and the chairs the same way as a single object the professors

04:07.520 --> 04:11.920
and that's the whole point of the composite interface.

04:12.240 --> 04:17.700
When you current you have to create the client next and when you create the client that's going to manipulate

04:17.700 --> 04:20.530
the objects in the composition through the component interface.

04:20.700 --> 04:23.110
Remember just to summarize is a lot going on here.

04:23.220 --> 04:28.200
We have one Dean two heads of departments Department chairs one for computer science and one for math

04:28.710 --> 04:33.120
the mathematics department has two faculty members in the computer science department has three faculty

04:33.120 --> 04:39.830
members all these objects should be created and organized based on their grouping to component objects.

04:39.870 --> 04:45.090
The dean and the chairs all faculty under the Dean all faculty under the chairs the rest are primitive

04:45.090 --> 04:51.770
objects professors your client should display all the factor faculty members in formatted output you

04:51.780 --> 04:57.450
should display the Dean first then the head of departments and two tabs and then each faculty member

04:57.540 --> 04:59.220
of each department in four tabs.

04:59.220 --> 05:05.280
This way it's very clear what the hierarchy is clients should then delete one faculty member from the

05:05.700 --> 05:12.760
computer science department and read display the list of all faculty members in the same above format.

05:12.930 --> 05:16.510
So this is what the output is going to look like as an example.

05:16.770 --> 05:19.900
And this shows the structure of the college.

05:19.920 --> 05:22.720
So for example the dean of technology is listed first.

05:22.890 --> 05:24.650
The two chairs are displayed under them.

05:24.660 --> 05:27.080
The chair of the math and the chair of the computer science.

05:27.270 --> 05:30.210
And then we have all the professors under that.

05:30.810 --> 05:36.360
Then if we were to remove a computer science professor there leaving the organization we would then

05:36.360 --> 05:39.480
show that there's now only two computer science professors.

05:39.480 --> 05:43.990
Computer science professor one in three as an example.

05:44.110 --> 05:49.070
And so this is your assignment go through these slides again if you need to lose a lot of details but

05:49.070 --> 05:58.390
the idea is here to treat composites and leaves the same organizing things around hierarchy Dean's chairs

05:58.750 --> 06:02.140
and professors and then what happens when you remove one.

06:02.320 --> 06:03.310
Good luck and thank you.
