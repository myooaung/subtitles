WEBVTT

00:05.180 --> 00:05.860
Hello and welcome.

00:06.690 --> 00:12.390
Let's continue our discussion on design principles and strategies and talk about the Single Responsibility

00:12.390 --> 00:20.900
Principle mainly all about cohesion highly cohesive objects basically this principle states that every

00:20.900 --> 00:27.810
class should have responsibility over a single part of the functionality provided by the software the

00:27.810 --> 00:34.160
responsibility should be entirely encapsulated by the class all its methods should be narrowly aligned

00:34.190 --> 00:36.090
with that responsibility.

00:36.320 --> 00:38.340
A class should only have one job.

00:38.780 --> 00:46.990
Again as I mentioned cohesion a single focus do not want a class that's doing five thousand things.

00:47.090 --> 00:49.130
Much harder to maintain.

00:49.170 --> 00:56.570
A very simple principle a class should have a single responsibility where responsibility is nothing

00:56.570 --> 01:03.810
but a reason to change should make sure that one class at the most responsible for doing one task or

01:03.810 --> 01:09.700
functionality among the whole set of responsibilities that it has only when there is a change need in

01:09.700 --> 01:13.590
that specific task or functionality should this class be changed.

01:13.630 --> 01:18.910
You're limiting your amount of changes to a particular class and you're following encapsulation.

01:18.910 --> 01:26.130
Now you may ask yourself OK well what if I have a simple operation writing data to writing output to

01:26.130 --> 01:26.660
the screen.

01:26.700 --> 01:29.760
Should I only have one on one method.

01:29.760 --> 01:33.870
It doesn't mean that you can still have more than one method.

01:33.870 --> 01:39.360
It's just the single task is printing or displaying output but you have variations of that display of

01:39.360 --> 01:39.690
output.

01:39.960 --> 01:45.500
So just like in Java when you have the system thought out that print line print line is the method and

01:45.500 --> 01:49.170
the system dot out in the out.

01:49.190 --> 01:55.730
I'll class or one of the string classes but it has variations of that print line method but it still

01:55.730 --> 01:56.870
has one task right.

01:56.960 --> 01:59.210
It's focused on displaying output.

01:59.720 --> 02:05.460
So in this case don't just think of task as one single method it's closely related to the concepts of

02:05.460 --> 02:06.350
coupling cohesion.

02:06.360 --> 02:11.220
As I mentioned because of taillight cohesive it also is reduced.

02:11.450 --> 02:15.150
It has a reduction in coupling it's very loosely coupled because it doesn't you know doesn't have other

02:15.150 --> 02:17.730
dependencies has a similar responsibility.

02:18.030 --> 02:21.200
Coupling is the degree of independence between software classes or methods.

02:21.360 --> 02:24.180
We should know this by now but I haven't provided a formal definition.

02:24.180 --> 02:25.830
So here's a good time.

02:25.830 --> 02:32.130
It's a measure of how closely connected two classes are two methods are doesn't just mean objects dependencies.

02:32.130 --> 02:37.680
It also can mean dependency between methods systems that use like global a lot of global variables tend

02:37.680 --> 02:43.380
to be tightly coupled encapsulation can help reduce the coupling but you can help us still have tightly

02:43.380 --> 02:44.220
coupled systems.

02:44.430 --> 02:50.520
If you know if you have a lot of different objects to composition or all sorts of other things so coupling

02:50.520 --> 02:56.570
just again measures that degree of relationships the strength of relationships between classes.

02:56.850 --> 03:00.750
Low coupling means small dependencies between classes and methods.

03:00.750 --> 03:05.020
What that means is it's easier to change code without introducing bugs in other classes or other methods.

03:05.020 --> 03:09.920
It's very very basic you know if when you have a lot of dependencies obviously when you make a change

03:09.930 --> 03:12.260
one spot it's going to cascade.

03:12.300 --> 03:20.620
You can limit that to the amount of cascading when you have low coupling tight coupling means two classes

03:21.010 --> 03:22.810
or two methods are closely connected.

03:22.810 --> 03:28.860
A change in one module method may affect another module module term is also used interchangeably a lot

03:28.860 --> 03:31.680
with with methods components classes.

03:31.810 --> 03:33.160
It's a more generic term.

03:33.280 --> 03:36.310
Cohesion refers to what the class or method can do.

03:36.340 --> 03:42.140
Its focus its responsibility really low cohesion would mean that the class does a great variety of actions

03:42.310 --> 03:44.030
all over the place.

03:44.280 --> 03:48.890
Your class is getting input from the user it's performing five or six different algorithms.

03:49.030 --> 03:52.150
Maybe it does some drawing or graphical stuff.

03:52.150 --> 03:55.650
Maybe it doesn't network connections all sorts of things.

03:55.810 --> 04:03.250
New programmers tend to create one huge gigantic class for everything and it just does way too much.

04:03.250 --> 04:05.690
When you have this low cohesion it's just unfocused.

04:05.710 --> 04:06.540
It's very broad.

04:06.580 --> 04:07.930
It's usually very generic.

04:07.930 --> 04:11.520
It doesn't have the specificity to it.

04:11.890 --> 04:14.250
Hi cohesion means that the class is focused.

04:14.350 --> 04:15.760
It knows what it should be doing.

04:15.910 --> 04:17.560
It has a single responsibility.

04:17.560 --> 04:20.800
It only contains methods related to the attention of the class.

04:20.800 --> 04:25.360
You know you don't have a car class and then the car class does.

04:25.420 --> 04:29.380
Motorcycle stuff just won't make sense.

04:29.380 --> 04:35.250
The Single Responsibility Principle is about limiting the impact of change by designing loosely low

04:35.260 --> 04:38.580
couple classes that are highly cohesive.

04:38.590 --> 04:44.770
OK so both of these big terms are are used to the responsibility principle and mainly again to impact

04:45.130 --> 04:47.900
the amount of change when you do have change.

04:48.130 --> 04:55.030
You don't have to change a million different files or million different classes some examples of responsibilities

04:55.030 --> 04:59.540
that classes have that may need to be separated out into other classes.

04:59.560 --> 05:04.130
Persistence saving data things like that.

05:04.130 --> 05:09.010
Maybe if you have specific functionality for persistence whether it's persisting through a database

05:09.010 --> 05:14.170
or a file or something like that separate that out validation validation code can be separated out as

05:14.170 --> 05:14.440
well.

05:15.490 --> 05:18.970
Notifications error handling logging.

05:19.000 --> 05:23.500
These are all specific tasks that can be contained to their own class.

05:23.560 --> 05:28.960
Class selection instantiation creation of objects will look at a lot of design patterns to do that formatting

05:28.960 --> 05:33.790
formatting is usually somewhat complicated and can do many different options so that will be in its

05:33.790 --> 05:38.560
own class passing passing and even parsers and compilers.

05:38.570 --> 05:41.150
Again they tend to be somewhat complicated.

05:41.380 --> 05:47.020
Whether you're passing an entire language grammar or something like that or if you're just passing text

05:47.020 --> 05:51.730
on a file it's definitely good to separate that out and mapping would be another example.

05:52.180 --> 05:59.020
So common examples as of some functionality in programming that you would want to separate out and have

05:59.020 --> 06:01.420
its own focus.

06:01.600 --> 06:04.090
Now let me demonstrate in intelligence.

06:04.120 --> 06:09.670
An example of a class that's not following a single responsibility and then how we can refactor it change

06:09.670 --> 06:10.540
it so that it is

06:16.580 --> 06:18.740
let's bring up until a J.

06:18.740 --> 06:22.300
We're just gonna create a simple employee class employee in a company.

06:22.370 --> 06:26.060
Employees usually have some attributes related to their name and address.

06:26.060 --> 06:28.760
They may have information on when they join the company.

06:28.760 --> 06:29.950
Things like that.

06:30.050 --> 06:36.170
It's a basic class but when I first create it I want to show you how basically breaks the Single Responsibility

06:37.130 --> 06:39.710
Principle because it's just doing too many things.

06:41.720 --> 06:48.200
So we'll name This name the single responsibility.

06:48.200 --> 06:53.620
Example K our public class employee.

06:53.630 --> 07:00.400
Gonna have some attributes related to employees things like employee I.D. name address and so forth.

07:00.410 --> 07:08.380
We want to make our attributes private for good encapsulation so an employee I.D..

07:09.140 --> 07:09.650
Let's just

07:13.430 --> 07:15.080
have a name

07:18.730 --> 07:19.430
and address

07:24.170 --> 07:25.520
and then we also have a date

07:29.770 --> 07:37.680
with a copper methods in here such as a method as intensive boolean.

07:37.740 --> 07:41.560
Just a is promotion.

07:42.140 --> 07:44.120
Do this year.

07:44.120 --> 07:46.330
We're not going to have any real behavior inside this.

07:46.330 --> 07:51.080
We're just going to say this has some promotional logic.

07:51.080 --> 07:55.580
Again I'm just trying to demonstrate the single responsibility so it's not important to demonstrate

07:56.960 --> 08:03.410
method logic right because we know we know how to create methods and in Java of another one just for

08:03.410 --> 08:04.670
calculating income tax

08:08.050 --> 08:09.160
for the current year

08:12.360 --> 08:14.560
and not doing much.

08:14.640 --> 08:23.350
We'll have some income tax logic and then we probably also have some getters and setters getters and

08:23.350 --> 08:33.280
setters for all of our member variables.

08:33.280 --> 08:36.850
I could go up and generate some getters and setters if I wanted to but

08:40.000 --> 08:43.180
we're good for now we're just gonna say there's a bunch of getters and setters.

08:43.740 --> 08:45.040
So you'll see this class right.

08:45.040 --> 08:46.550
We have some stuff going on.

08:46.630 --> 08:48.010
It looks logically correct.

08:48.010 --> 08:48.210
Right.

08:48.210 --> 08:53.770
We have some member variable and so forth that has all the employee attributes like the name age I.D.

08:54.250 --> 08:56.300
date of joining an address.

08:56.350 --> 09:01.120
It tells you if the employee is eligible for promotion this year it calculates income tax he has to

09:01.120 --> 09:10.180
pay for the year however this class breaks the single responsibility principle the logic of determining

09:10.180 --> 09:15.780
whether the employee is due a promotion this year is not a responsibility which the employee owns right.

09:15.800 --> 09:18.160
Usually that's the company's H.R. department.

09:18.260 --> 09:23.720
They all the responsibility based on the company's H.R. policies and that can change every few years

09:24.890 --> 09:31.610
so when any H.R. policy changes the Employee class now needs to be updated so that it currently has

09:31.610 --> 09:37.200
a responsibility because it has currently has responsibility promotion determination.

09:37.340 --> 09:39.560
Can you see how that could be a problem.

09:39.560 --> 09:43.450
This really should be owned by the employee because promotions are owned by H.R..

09:43.700 --> 09:45.580
Those change frequently in H.R..

09:45.620 --> 09:47.780
Now you have to update the Employee class.

09:47.780 --> 09:50.120
Same goes for the income tax calculation.

09:50.150 --> 09:52.500
That's not a responsibility of an employee class.

09:52.580 --> 09:55.670
That's a Finance Department responsibility.

09:55.780 --> 09:58.770
The Finance Department is going to take care of the current tax structure.

09:58.850 --> 10:03.680
And again that may get updated every year so every time you update the current tax structure now you

10:03.680 --> 10:06.520
have to update the employee right.

10:06.550 --> 10:11.970
So it's not a single responsibility policy here.

10:11.970 --> 10:13.930
This class is just not following it.

10:13.980 --> 10:15.710
It's not conducive to change.

10:15.900 --> 10:19.550
Every time things change for you have to change in this class.

10:19.800 --> 10:26.130
The class really should have the single responsibility of maintaining core attributes of only an employee.

10:26.130 --> 10:30.900
So what I'd like to do is I'd like to refactor the Employee class so that it adheres to the Single Responsibility

10:30.900 --> 10:32.110
Principle.

10:32.250 --> 10:36.870
First thing we need to do is we need to move the promotion determining logic from an employee class

10:36.870 --> 10:39.140
to an H.R. promotions class.

10:39.150 --> 10:50.850
So let's do that first we'll create a new class and we'll name it H.R. promotions.

10:50.850 --> 10:57.780
Now again this is going to have much it's just going to have our promotions here and we'll basically

10:57.780 --> 11:05.030
just copy this change it a bit but we're moving the responsibility out of H.R. promotions into the H.R.

11:05.030 --> 11:06.700
promotions class.

11:06.810 --> 11:07.110
Right.

11:07.130 --> 11:11.130
And the way we would want to do this is we'd have the same method name.

11:11.180 --> 11:16.690
But what we do is we just have to take an employee object so we can say employee.

11:17.740 --> 11:22.040
And so now the promotion logic the implementation

11:26.330 --> 11:27.590
is using the employee

11:31.660 --> 11:32.630
information passed in

11:37.120 --> 11:38.940
right.

11:39.040 --> 11:41.560
We can create another class that removes that

11:44.100 --> 11:46.230
functionality for calculating the income tax.

11:46.230 --> 11:50.070
So here we can just call it and finance

11:53.190 --> 11:55.920
calculations.

11:56.010 --> 12:02.880
How about just the finance class finance and again in here we're going to eventually move things from

12:02.880 --> 12:10.340
the employee but for now we'll just copy it and finance we'll have our calculated income tax for the

12:10.340 --> 12:10.940
current year.

12:10.940 --> 12:13.640
And again this will take a employee object.

12:15.080 --> 12:19.700
And you would perform operations on the Employee object.

12:19.700 --> 12:20.370
Right.

12:20.390 --> 12:25.450
So this is going to implement the tax logic using the employee past in

12:29.720 --> 12:30.350
pretty straightforward.

12:30.350 --> 12:37.100
So far we basically removed responsibilities an employee in separate out into separate classes.

12:37.100 --> 12:39.860
So now we can remove those functions methods.

12:39.860 --> 12:40.550
I should say sorry.

12:40.550 --> 12:44.300
Sometimes I use terminology now.

12:44.780 --> 12:48.660
All the Employee class has is its attributes that are relevant.

12:48.770 --> 12:52.620
Employee Name address and date of joining right now.

12:52.670 --> 12:57.790
The Employee class adheres to the Single Responsibility Principle.

12:57.860 --> 13:05.670
It does not have all these different responsibilities for getting the tax calculations or determining

13:05.670 --> 13:07.080
promotions.

13:07.090 --> 13:07.260
Right.

13:07.260 --> 13:11.730
So now that means when those things change which they're constantly going to be changing those are not

13:11.880 --> 13:15.100
we don't have to update Employee class we can just apply to other classes.

13:15.330 --> 13:19.190
And that is the single responsibility program in a nutshell.

13:19.200 --> 13:24.090
Again we will be using this quite a bit in the design patterns we go into detail but this is a very

13:24.090 --> 13:25.680
basic example.

13:25.680 --> 13:26.040
Thank you.
