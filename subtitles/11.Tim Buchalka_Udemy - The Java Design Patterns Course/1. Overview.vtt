WEBVTT

00:05.770 --> 00:06.820
Hello and welcome.

00:07.010 --> 00:11.680
In this lecture I want to briefly cover some Java 2 Enterprise Edition patterns.

00:11.720 --> 00:19.180
Will focus on in this lecture is just a few of those and also the null object pattern so some patterns

00:19.180 --> 00:20.520
I mentioned before we didn't cover.

00:20.520 --> 00:26.050
So I just want to talk about it at a high level in this like so we'll take a look at no object and also

00:26.050 --> 00:28.920
these seven J E patterns again at a high level.

00:28.930 --> 00:33.250
We're not going to necessarily be able to go out and implement these but we're gonna be aware of them.

00:33.310 --> 00:39.540
A lot of these j2 e patterns are kind of obsolete or not used as much as the Gang of twenty three.

00:40.860 --> 00:46.980
So the no object pattern the intent of this pattern is to encapsulate the absence of an object by providing

00:46.980 --> 00:52.080
a substitute alternative that offers suitable designed to do nothing behavior.

00:52.170 --> 00:57.630
So this is a design where nothing will come of nothing essentially and this pattern we create an abstract

00:57.630 --> 01:03.870
class specifying that very operations to be done a concrete class extending this class and an all object

01:03.870 --> 01:06.870
class providing do nothing implementation.

01:07.080 --> 01:11.610
Its use seamlessly where we need to check for null value.

01:11.850 --> 01:18.750
So because java has this disadvantage of having objects be able to be null and there's no way to check

01:18.750 --> 01:19.440
the malleability.

01:19.440 --> 01:21.160
This pattern tries to do that.

01:21.300 --> 01:25.530
It tries to make things sure that things are not null objects are not null.

01:25.530 --> 01:30.720
So you can use this pattern when an object requires a collaborator or it makes use of the collaboration

01:30.720 --> 01:32.300
that exists.

01:32.340 --> 01:36.370
Also you can use this pattern when some collaborate or instances should do nothing.

01:36.480 --> 01:39.760
You want abstract the handling of null away from the client.

01:39.810 --> 01:41.380
That's really the purpose.

01:41.480 --> 01:45.060
The no object class has often been implement as a singleton.

01:45.330 --> 01:49.440
It's no object usually does not have any state so it state can't change.

01:49.440 --> 01:51.470
So multiple instances are identical.

01:51.630 --> 01:56.910
So you use a singleton and then you can do nothing and handle malleability of it better.

01:56.910 --> 01:59.290
Again just a nice little pattern.

01:59.310 --> 02:03.810
Now let's look at the J to e patterns the first one is the business delegate pattern.

02:03.810 --> 02:06.720
This is used to decouple the presentation tier and the business.

02:06.720 --> 02:10.640
Here we looked at MVC that sort of does some of this but it layers it in three.

02:10.800 --> 02:13.050
This one layers it into a separate step.

02:13.050 --> 02:19.260
Business logic from the local or from the UI user interface it can you be used to reduce communication

02:19.290 --> 02:25.380
or remote lookup functionality to a business tier code in presentation to your code so it can also be

02:25.380 --> 02:26.680
somewhat efficient.

02:26.730 --> 02:33.380
It acts as a client side business abstraction it provides an abstraction for thus hides the implementation

02:33.380 --> 02:38.110
of the business services all the business stuff is on the back end.

02:38.200 --> 02:42.820
You can use this pattern when you want loose coupling between the presentation and the business tiers.

02:42.820 --> 02:48.270
Or if you want to orchestrate calls to multiple business services or if you want to encapsulate service

02:48.280 --> 02:55.530
lookups in service calls the components in this pattern include the client which is the presentation

02:55.530 --> 02:56.370
tier code.

02:56.400 --> 03:02.580
This could be a Java server page a servant or a user interface Java code the business delegate.

03:02.580 --> 03:07.680
This is a single entry point class for client entities to provide access to business service methods

03:08.430 --> 03:09.240
look up service.

03:09.240 --> 03:15.210
This is responsible to get relative business implementation and provide business object access to business

03:15.210 --> 03:17.010
delegate objects.

03:17.010 --> 03:19.770
And then lastly the business service component.

03:19.800 --> 03:24.810
These are concrete classes that implement this business service to provide actual business implementation

03:24.810 --> 03:26.640
logic all right.

03:26.640 --> 03:31.620
This is a high level description it's really just about separating that business logic from the user

03:31.620 --> 03:32.760
interface.

03:33.210 --> 03:35.370
The composite entity pattern.

03:35.370 --> 03:42.450
This is an enterprise Java beans entity being which represents a graph of objects when a composite entity

03:42.450 --> 03:43.380
is updated.

03:43.560 --> 03:46.910
It will internally update all the dependent object beans.

03:47.070 --> 03:53.250
They'll get updated automatically as they're being managed by J.B. entity being the following are the

03:53.250 --> 04:00.330
participants in this pattern the context in the composite entity the context are entity beings are not

04:00.330 --> 04:05.340
intended to represent every persistent object in the object model and entity beings are better suited

04:05.340 --> 04:11.610
for coarse grain persistent business objects the composite entity is the primary entity being it can

04:11.610 --> 04:16.590
be coarse grained or can contain of course grained object to be used for persistence purpose.

04:16.710 --> 04:20.130
So this pattern has a lot to do with beans.

04:20.340 --> 04:22.590
The following are the participants in this pattern.

04:22.590 --> 04:27.960
As I mentioned the coarse grained object contains dependent objects it has its own lifecycle and also

04:27.960 --> 04:31.080
manages the lifecycle of dependent objects.

04:31.080 --> 04:32.220
The dependent object.

04:32.340 --> 04:37.050
This is the object which depends on the course grained objects first persistence lifecycle and then

04:37.050 --> 04:42.310
the strategies they represent how to implement it can posit entity again.

04:42.330 --> 04:47.430
A quick rundown of composite entity by no means you're gonna go be able to go and implement this but

04:47.430 --> 04:49.380
a high level has to do with being.

04:49.410 --> 04:53.800
That's what you kind of got to think of and how you can separate coarse grain dependent objects.

04:53.940 --> 04:56.970
The next one is the data access object pattern.

04:56.970 --> 05:02.910
Many real world Java 2 Enterprise Edition applications need to use persistent data at some point.

05:02.910 --> 05:06.300
Access to data varies depending on the source of the data.

05:06.300 --> 05:11.550
Access to persistent storage varies greatly depending on the type of the storage if it's a database.

05:11.700 --> 05:15.120
If it's different type of database relational versus object oriented.

05:15.150 --> 05:19.400
If you're storing data on flash fire all those things will price distance mechanism.

05:19.470 --> 05:22.680
It also varies depending on the vendor into implementation.

05:22.680 --> 05:28.680
The data can reside in mainframe systems on different protocols like hold up or repositories.

05:28.680 --> 05:34.350
The pattern is used to separate this low level data accessing API or operations from the high level

05:34.350 --> 05:40.470
business services the data access object interface is composed in this pattern.

05:40.470 --> 05:44.770
This defines a standard operations to be formed on a model's object.

05:44.910 --> 05:49.830
The data access object concrete class implements the above interface and is responsible to get data

05:49.830 --> 05:54.890
from a data source which can be database X AML or any other storage mechanism.

05:54.990 --> 06:01.260
The model object or the value object is a simple Pogo plain old Java object containing get set methods

06:01.260 --> 06:08.530
to store data retrieved using data access objects class so when you think of this pattern you can just

06:08.530 --> 06:12.860
think of separating the data source from the business layer.

06:13.000 --> 06:16.950
We don't care about how the data is stored or what protocols it's using.

06:17.050 --> 06:20.740
And this separation can happen in this pattern.

06:20.800 --> 06:23.210
The next pattern is the front controller pattern.

06:23.230 --> 06:27.610
This is where all the requests that come for a resource and application will be handled by a single

06:27.610 --> 06:32.690
handler and then dispatched to the appropriate handler for that type of request.

06:32.700 --> 06:33.070
All right.

06:33.070 --> 06:36.310
This kind of sounds like a chain of Ron's responsibility pattern.

06:36.310 --> 06:41.810
It's not used as widely since MVC pattern was released MVC handles this much better but the presenter

06:41.860 --> 06:47.860
request presentation to request handling mechanism must control coordinate processing of each user across

06:47.860 --> 06:53.410
multiple requests when a user access is the view directly without going through a centralized mechanism.

06:53.410 --> 06:54.740
Two problems can occur.

06:55.060 --> 06:59.670
Each view is required to provide its own system services often resulting in duplicate code.

06:59.930 --> 07:05.680
The View navigation is left to the views which may result in mixed view content and view navigation

07:05.710 --> 07:09.560
problems also distribute controls more difficult to maintain.

07:09.790 --> 07:15.040
Since changes will often need to be made in numerous places so this pad and world ensure that a system

07:15.040 --> 07:20.740
has a centralized access point for presentation to your request handling to support the integration

07:20.740 --> 07:28.170
of system services content retrieval view management and navigate the participants in this pattern are

07:28.180 --> 07:29.470
the controller.

07:29.470 --> 07:33.350
This is the initial contact point for handling all the question the system.

07:33.370 --> 07:39.190
This is a centralization it may delegate to a helper to complete authentication authorization of a user

07:39.430 --> 07:41.900
or to initiate contact retrieval.

07:41.950 --> 07:47.690
The view represents and displays information to the client retrieves information from a model help or

07:47.710 --> 07:52.420
support of use by encapsulating adapting the underlying data model for use in the display.

07:52.420 --> 07:57.400
So you should be asking yourself this looks very similar to MVC and that's why this is not used as much.

07:57.400 --> 08:03.430
The dispatcher is responsible for view management and navigation managing the choice of the next few

08:03.430 --> 08:09.160
to present to the user and providing the mechanism for vector and control to this resource.

08:09.160 --> 08:13.990
And then we have our helper that's responsible for helping a view or control or complete its processing

08:14.440 --> 08:16.420
has numerous responsibilities.

08:16.420 --> 08:22.340
One of them being gathered data required by the view and storing it in the intermediate model let's

08:22.340 --> 08:25.440
talk about the intercepting filter design pattern.

08:25.460 --> 08:31.910
This is a pattern for J to e which creates plugin all filters to process common services and a standard

08:31.910 --> 08:36.790
mantle without requiring changes to correct request processing code.

08:37.010 --> 08:42.770
So its use when we want to do some pre processing post-processing with request a response of an application.

08:42.770 --> 08:48.500
The filters are defined and applied on their quest before passing the request to the target filters

08:48.500 --> 08:53.540
can do the authentication authorization logging or tracking of requests and then pass the request to

08:53.540 --> 08:54.800
the corresponding handlers.

08:54.800 --> 08:57.170
So it's like an intermediary.

08:57.290 --> 09:02.510
The participants include the filter which performs certain tasks prior or after execution of request

09:02.810 --> 09:09.320
by request handler the filter chain which carries multiple filters and can help to execute them in define

09:09.320 --> 09:10.640
order on the target.

09:10.640 --> 09:15.860
The target is the request handler the pre or the post happened before the target or after the filter

09:15.860 --> 09:20.870
manager manages the filters in the filter chain and the client is the object who sends the requests

09:21.290 --> 09:27.240
to the target object let's look at service locator design pattern again I'm running through these pretty

09:27.240 --> 09:32.070
quick but it's really just to give you a general General Idea a general sense.

09:32.070 --> 09:34.650
This pattern is relatively old an old pattern.

09:34.770 --> 09:36.520
It was very popular with Java.

09:36.660 --> 09:42.510
The goal this pattern is to improve the modularity of your application by removing the dependency between

09:42.510 --> 09:45.580
the client and the implementation of an interface.

09:45.600 --> 09:50.070
Again these aren't used as much because we have the gang at 23 which is addresses a lot of these.

09:50.220 --> 09:54.630
Now these are specific to j2 easy which is one of their benefits.

09:54.630 --> 10:00.480
This one is use the service locator is used whenever we want to locate fetch various service says using

10:00.480 --> 10:02.210
Java naming and directory interface.

10:02.250 --> 10:08.130
For those of you that have used A.I. which typically is a redundant and very expensive lookup.

10:08.370 --> 10:08.850
Right.

10:08.880 --> 10:13.710
So this pattern can improve that performance because it encapsulates the process involved in obtaining

10:13.710 --> 10:17.010
a service with a strong abstraction layer.

10:17.010 --> 10:22.770
He uses a central registry known as a service locator which on request returns the information necessary

10:22.770 --> 10:27.130
to perform a certain task the service locator is responsible.

10:27.130 --> 10:32.690
Returning instances of services when they are requested for by the service consumers or the service

10:32.690 --> 10:33.860
clients.

10:34.010 --> 10:40.430
The pattern addresses this expensive lookup by using caching the very first time particular services

10:40.430 --> 10:45.140
request that the locator looks it up in the Jandi ie fetches the relevant service and then finally it

10:45.140 --> 10:46.750
will cache that service object.

10:46.940 --> 10:52.850
Further look ups will use the cache that use the same service locator and so it improves the performance

10:52.850 --> 10:55.330
of the application to a great extent.

10:55.490 --> 11:00.590
The participants in this application or this pattern are the service the actual service which will process

11:00.590 --> 11:06.860
the request and the reference of such service is to be looked upon in the NDA server the context the

11:06.860 --> 11:07.640
initial context.

11:07.640 --> 11:13.580
This is the Jan Di context which carries the reference to the service used for lookup purposes.

11:13.760 --> 11:19.370
The service locator this is the single point of contact to get services by Jandi I look up catching

11:19.370 --> 11:25.010
the services the cash is going to store the references of service to reuse them to increase performance

11:25.510 --> 11:30.650
and then the client the object that invokes the services via the service locator.

11:30.650 --> 11:31.100
OK.

11:31.100 --> 11:36.470
Lot of patterns and a quick amount of time the last pattern that we're gonna discuss is this transfer

11:36.470 --> 11:40.370
object pattern and that will do it for the J to w e patterns.

11:40.370 --> 11:45.920
This is frequently used when we want to pass data with multiple attributes in one shot from the client

11:45.920 --> 11:49.250
to the server to avoid multiple calls to a remote server.

11:49.250 --> 11:51.470
Again performance based.

11:51.470 --> 11:57.500
We can have a simple Poso class plane of Java object has getter setter methods and it's a reliable so

11:57.500 --> 11:59.720
that can be transferred over the network.

11:59.750 --> 12:01.640
It does not have any behaviour.

12:02.060 --> 12:06.770
The server side business class normally fetches the data from the database and fills this Poso class

12:06.770 --> 12:08.690
and then sends it to the client.

12:08.780 --> 12:10.680
The following are the participants in this pattern.

12:10.760 --> 12:15.980
The business object which fills the transfer object with data the transfer object which is a simple

12:15.980 --> 12:21.470
Poso having methods to get set and get attributes only and then the client which requests or sends the

12:21.470 --> 12:23.590
transfer object to the business object.

12:24.620 --> 12:25.180
Okay.

12:25.190 --> 12:27.830
That was a that was a handful.

12:27.830 --> 12:30.560
That was a lot of information a lot of patterns.

12:30.650 --> 12:36.950
But again the gist of it here is these are used for J to e besides a null object and a lot of marked

12:36.950 --> 12:39.760
use too much and that's why we don't cover them in a ton of detail.

12:39.830 --> 12:45.710
The 23 patterns from the getting a for a much more usable and actually address some of these concerns

12:46.130 --> 12:50.900
some of the concerns in the data are more specific to j2 like the J and I look up the service locator

12:51.380 --> 12:53.830
but again other patterns can be used for some of these.

12:53.920 --> 12:58.340
A quick rundown by no means are you going to go and implement these patterns but again you'll least

12:58.460 --> 13:03.820
if somebody mentions this term you say oh that's a data pattern and you'll have at least some idea.

13:03.830 --> 13:04.630
Thanks for listening.
