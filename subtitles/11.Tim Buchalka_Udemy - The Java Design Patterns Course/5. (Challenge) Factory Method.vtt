WEBVTT

00:05.210 --> 00:06.570
Hello and welcome.

00:06.650 --> 00:08.950
Welcome to your first challenge.

00:08.960 --> 00:13.130
We're going to finally apply what you learned for the factory method pattern.

00:13.130 --> 00:15.050
I want you guys to think of this as an assignment.

00:15.050 --> 00:19.700
This is how you can write your own code so that you can test your knowledge so that you know that you

00:19.700 --> 00:22.570
know that you fully understand how to implement this design pattern.

00:22.580 --> 00:25.490
This is a very popular pattern that's used quite a bit.

00:25.490 --> 00:26.890
So I'm going to give you this assignment.

00:26.890 --> 00:29.810
This is our challenge the requirements for this Simon are as follows.

00:30.520 --> 00:35.060
We're gonna create an application that utilizes different types of animals so duck and Tiger are going

00:35.060 --> 00:39.700
to represent your types of animals those are gonna represent the products.

00:39.740 --> 00:44.720
Your goal for this assignment is to utilize the factory method design pattern for the creation of each

00:44.720 --> 00:50.670
type of animal for the creation of each duck or Tiger you'll need to implement this pattern using the

00:50.670 --> 00:51.640
most common technique.

00:51.640 --> 00:56.700
So I want you to implement this pattern where you use a class with a single factory method.

00:56.700 --> 01:02.520
That method will take a parameter a string which will indicate what object needs to be created.

01:02.550 --> 01:07.260
You don't have to create an abstract create or interface or anything like that you just create one concrete

01:07.260 --> 01:14.130
class that has one factory method takes a string and it will create the correct type of product either

01:14.130 --> 01:21.890
doc or tiger you should create an interface for the products because interfaces we know programming

01:21.890 --> 01:26.770
to an interface the interface through product should have some common method for each type of animal.

01:26.810 --> 01:31.040
This will demonstrate that the right instance was actually created so you can add whatever you want

01:31.040 --> 01:36.650
here you can add a method like eat or walk the implementation of this method doesn't have to be anything

01:36.650 --> 01:37.650
concrete.

01:37.820 --> 01:39.860
The implementation could just display some output.

01:40.820 --> 01:47.720
OK so each each product concrete provides to implement the product interface the concrete products are

01:47.720 --> 01:53.090
the type of animals talking Tiger they're going to implement this Walker eat method again there doesn't

01:53.090 --> 01:57.630
have to actually be real logic in these methods you can just display output.

01:57.800 --> 02:03.230
The purpose of these methods are so that we can invoke them on the instance that's created which will

02:03.230 --> 02:07.920
confirm whether or not the factory method worked in your implementation.

02:08.010 --> 02:13.280
OK so you implement those concrete products you then need to implement implement your concrete factory

02:13.280 --> 02:14.040
class.

02:14.270 --> 02:19.370
Again just one class contains one factory method that's the creator part of the factory method pattern

02:19.420 --> 02:19.670
right.

02:19.670 --> 02:21.240
We understand what the creators.

02:21.330 --> 02:23.770
We understand what the product is.

02:23.840 --> 02:28.790
You can name it whatever you want but it probably be a good idea to call it something like Animal Factory

02:30.220 --> 02:33.310
and the name of the factory method can also be anything you want.

02:33.610 --> 02:37.130
But I would suggest get animal type again.

02:37.130 --> 02:42.260
This factory method is going to work like the most common example that I provided the common most common

02:42.260 --> 02:43.320
implementation.

02:43.370 --> 02:47.810
It takes a string as a parameter that represents the type of the object type of the animal that you

02:47.810 --> 02:49.590
want to create.

02:49.620 --> 02:56.460
And so this method this get method will return an animal reference it shouldn't return a concrete instance

02:56.460 --> 03:00.960
it should return animal reference because then you can pass around this animal reference and you have

03:00.970 --> 03:03.710
better company.

03:03.760 --> 03:07.300
The last thing you want to do is you want to create your client class the client class while the main

03:07.300 --> 03:07.720
method.

03:07.720 --> 03:12.040
This will be testing your factory method pattern implementation.

03:12.220 --> 03:17.620
It will utilize the animal factory to create the type of animal that you specify in the main method

03:18.250 --> 03:25.270
whether you pass in a doc or any kind of animal that you're going to create after creating animal subtype

03:25.360 --> 03:29.750
which points to an animal reference you then using the factory method.

03:29.770 --> 03:34.710
You then want to invoke your method Walker eat that will verify that the correct object was created.

03:34.870 --> 03:38.890
Otherwise you don't know whether or not the instance was created correctly unless you were to put some

03:38.890 --> 03:41.020
output in the constructor or something like that.

03:41.020 --> 03:43.300
But let's do it this way.

03:43.390 --> 03:49.970
So the example output of this program would be something simple like Doc says pack pack Tiger says pile

03:50.080 --> 03:52.780
them home wherever you want to pronounce that right.

03:52.780 --> 03:54.890
Because this is the implementation of the eat.

03:54.940 --> 03:58.420
For this example this is the implementation of a talk method.

03:58.660 --> 04:05.230
And so the talk method here would be just displaying hardcoded output that says you'd correctly implement

04:05.350 --> 04:10.400
or correctly called the correct instance method for the correct type.

04:10.450 --> 04:15.760
So this is using polymorphism you would have an animal reference you would call talk and then the correct

04:15.820 --> 04:19.990
Doc would be called the Tiger would be called because your factory method worked and that's how you

04:19.990 --> 04:23.200
know that this assignment was implemented correctly.

04:23.230 --> 04:29.110
The next lecture I'll provide a solution to this assignment so you can verify whether or not you did

04:29.110 --> 04:31.100
it correctly thank you.
