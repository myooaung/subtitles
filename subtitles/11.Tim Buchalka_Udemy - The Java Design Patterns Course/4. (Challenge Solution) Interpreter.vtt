WEBVTT

00:05.340 --> 00:06.800
Loan Welcome back.

00:06.820 --> 00:11.100
This lecture I want to provide a solution to our previous challenge which was implementing the interpreter

00:11.100 --> 00:12.470
design pattern.

00:12.570 --> 00:17.970
We're gonna name this project interpreter solution remember this is all about having a language that

00:17.970 --> 00:20.540
represents AND and OR expressions.

00:20.700 --> 00:26.290
So we're gonna have non terminals and terminal symbols in this implementation that's going gonna be

00:26.290 --> 00:32.490
interpreted ter solution interpreter and implementation.

00:32.520 --> 00:38.050
Tough to say our first step is gonna be to create the context.

00:38.500 --> 00:43.570
This will do the actual interpretation it contains information that is global to the interpreter remember

00:43.570 --> 00:46.750
we're just gonna look at the string and see if it contains it.

00:46.780 --> 00:55.170
So we're gonna say new Java class we're gonna call this context and this is going to just have input

00:55.540 --> 00:59.110
as a member variable right.

00:59.830 --> 01:09.190
And a constructor that sets the input of public context String input and then we're just going to say

01:09.190 --> 01:13.660
this Don input equals input.

01:13.810 --> 01:15.400
We also need to have a get result.

01:15.400 --> 01:19.260
This is gonna be called by our non terminal our terminal class I'm sorry.

01:19.270 --> 01:21.040
Terminal class.

01:21.040 --> 01:28.870
So there is a public boolean get resolved it turns a boolean because a string or an end and or expression

01:28.870 --> 01:34.150
returns boolean and so all we're gonna do with the data is we're gonna see for contains and if it does

01:34.290 --> 01:39.730
that's going to say it's true for that monster are true for that terminal or two for that non terminal.

01:39.740 --> 01:49.300
Gosh I keep giving those terms mixed up so if I say if input dot contains data then I'm going to return

01:51.490 --> 01:59.150
return True else return false.

01:59.470 --> 02:07.120
That's how we're gonna determine our and doors if the context of data is contained inside their.

02:07.220 --> 02:14.230
Now we want to create different types of expressions that will consume this interpreter context class.

02:14.240 --> 02:17.850
This is gonna declare an abstract and Thurber operation that's common to all the nodes the abstract

02:17.900 --> 02:21.250
syntax tree it's gonna be named expression.

02:21.250 --> 02:27.570
So we're gonna say new Java class expression and this is gonna be interface.

02:27.610 --> 02:34.120
It's gonna be a boolean that returns earned interpret that returns of boolean so public boolean interpret

02:35.310 --> 02:36.580
and it's gonna take context

02:42.300 --> 02:49.930
before is gonna create the terminal concrete class this terminal concrete class is going to implement

02:49.930 --> 02:55.780
this interpret operation and you have to have an instance of the terminal for every terminal symbol

02:55.780 --> 03:01.320
in a sentence the interpret method at each node uses the context to store and access the state of the

03:01.320 --> 03:01.790
interpreter.

03:02.610 --> 03:11.340
So you're gonna say class terminal expression and this is going to implement our expression.

03:11.340 --> 03:14.390
This is gonna have a private String data.

03:16.020 --> 03:20.010
It's gonna have a constructor that sets the data

03:26.880 --> 03:32.490
and then it's going to have our over and method override hopes

03:36.290 --> 03:39.870
for our interpret public boolean interpret.

03:40.080 --> 03:45.930
And remember this is a terminal so a terminal just means it calls the context method.

03:45.980 --> 03:51.550
So here takes context so this is just gonna call the result.

03:51.650 --> 03:58.290
It's gonna say return context not give result passing in its data.

03:58.690 --> 04:07.020
The non terminals are gonna have instances of each terminal for that rule and we have two rules and

04:07.170 --> 04:09.030
hand or.

04:09.190 --> 04:11.610
So now we want to create the non terminal again.

04:11.620 --> 04:15.570
These classes have are you have to have a class for each rule in the grammar.

04:15.670 --> 04:20.440
It means it's going to maintain an instance variable of type abstract expression for each of the symbols

04:20.740 --> 04:27.300
on either side of the non terminal terminal not terminal implements and interpret operation for the

04:27.300 --> 04:32.010
non terminal symbols in the grammar each non terminal expression node is going to define interpret in

04:32.010 --> 04:38.710
terms of interpret on each substance of expression so the first one we're gonna create is the OR expression

04:45.200 --> 04:48.690
and this is going to have two expressions associated with it.

04:50.610 --> 04:59.790
So we're going to have a private expression expression one sequel to null and another one expression

04:59.780 --> 05:02.050
two.

05:03.350 --> 05:08.990
And these will be set in the constructor so or expression they're both going to take an expression that's

05:09.000 --> 05:12.340
going to take two expressions expression one

05:15.370 --> 05:16.990
expression two

05:20.610 --> 05:26.710
All right pretty common stuff here.

05:28.700 --> 05:29.770
All right.

05:29.800 --> 05:36.820
Now it needs to have its interpret function interpret method interpret Method Method Method.

05:36.820 --> 05:41.010
I keep saying function I could think for that too.

05:41.220 --> 05:42.250
Hopefully.

05:43.720 --> 05:47.370
This is going to return a boolean remember and take context.

05:47.890 --> 05:49.090
And what does it's gonna do.

05:49.080 --> 05:50.950
It's going to use recursion right.

05:50.980 --> 05:56.050
It's going to use recursion to figure out what it needs to stop.

05:57.160 --> 06:16.030
So it's going to say return expression one to interpret context or expression to interpret the context

06:18.070 --> 06:23.710
or they're as simple so if you call interpret turns true for turns true once this is going to return

06:23.710 --> 06:25.750
true because that's what always do.

06:25.780 --> 06:35.010
So we just use the logical operator here on both on both of our terminals in our expression is going

06:35.010 --> 06:39.620
to be very very similar so let's say.

06:40.590 --> 06:42.840
Well I guess we'll put this in another class.

06:43.030 --> 06:44.510
I'm going to copy it.

06:44.560 --> 06:49.460
This is gonna be called our and expression.

06:49.580 --> 06:52.810
Again this is a non terminal.

06:52.810 --> 06:55.190
It's going to implement our expression

06:58.400 --> 07:01.700
and this is gonna be very similar it's going to have a couple of expressions

07:04.430 --> 07:11.330
and it's gonna be okay and expression and then they're really only thing it's gonna do is in the interpret

07:11.330 --> 07:19.760
it's gonna do an ampersand Ampersand like this passing Ampersand looks weird.

07:20.060 --> 07:25.430
And in this case when it calls the interpret recursively it's going to eventually have to return to

07:25.430 --> 07:26.260
on both sides

07:30.330 --> 07:34.330
and let's indent this correctly.

07:36.350 --> 07:38.670
Now we have to create our client application.

07:38.670 --> 07:45.060
This is gonna create a non terminal expression based on it's going to be hardcoded the client will then

07:46.020 --> 07:52.080
initialize the context and invoke and interpret operation and then use the output to generate the response

07:52.740 --> 07:57.630
the client is gonna be given an abstract syntax tree representing a particular sentence and the language

07:58.080 --> 07:59.480
that the grammar defines.

07:59.490 --> 08:05.850
Remember we're just going to define we're just gonna hard code it with some simple strings so the grammar

08:05.860 --> 08:09.350
again remember has two non terminals and in.

08:09.630 --> 08:10.750
They take the.

08:10.770 --> 08:17.300
The rules are they take expressions on either side and then the turtle symbols are strings.

08:17.680 --> 08:21.810
And so let's create that client application.

08:21.810 --> 08:22.950
We're going to say new client

08:27.660 --> 08:33.070
and we're gonna have a couple helper methods that are just going to get some of the examples I provided

08:33.280 --> 08:33.880
in the class.

08:33.910 --> 08:42.190
We're gonna check if certain names or certain certain people are males and we're gonna check if certain

08:42.190 --> 08:48.290
women are married so we're gonna create a helper method public static.

08:48.460 --> 08:55.600
It's going to return an expression get male expression it's gonna tell us if you're a male or not.

08:56.440 --> 09:05.190
So here we're gonna say expression robber equals new terminal expression.

09:05.530 --> 09:06.640
And this is just going to be Robert

09:10.120 --> 09:20.380
we're gonna have another one expression John equals new terminal expression and this is gonna be John.

09:23.550 --> 09:26.100
And this is the language that we're defining right.

09:26.110 --> 09:29.020
These are terminals terminals.

09:29.020 --> 09:35.230
So Robert and John are terminals and if they're Mayor if either one of these mails they have to contain

09:35.230 --> 09:36.150
one of these.

09:36.430 --> 09:44.630
So we're gonna save return a new or expression of one of these to Robert or John.

09:44.670 --> 09:48.540
So here we created our non terminal expression.

09:48.540 --> 09:51.750
We're gonna do something similar for checking if a woman is married.

09:52.780 --> 09:56.890
We're only going to allow one sense in the language for this.

09:56.980 --> 09:59.770
This is gonna be two terminals.

09:59.770 --> 10:00.530
Julie married.

10:00.550 --> 10:05.170
So the only one that could possibly married is Julie and the only males that we have in our language

10:05.170 --> 10:12.740
are John and Robert we're having right here and one thing we forgot to do is we forgot to implement

10:12.770 --> 10:15.330
the expression on your face.

10:15.860 --> 10:21.580
In both of our non terminals we did it in here but not the other one.

10:24.040 --> 10:25.990
That would make sense that's why I was right there.

10:25.990 --> 10:32.600
So we have our two expressions and we want to check.

10:32.730 --> 10:34.560
Now we need to write a mean method

10:44.010 --> 10:47.090
and this one is gonna create a two expressions.

10:47.100 --> 10:51.320
Ismail is married woman and that's gonna be by calling these helmets.

10:51.350 --> 11:01.410
So we'll say expression is male equals get male expression and then we'll say expression is married

11:01.530 --> 11:05.790
woman equals get married woman expression.

11:05.790 --> 11:12.510
Now we're gonna create our context which is gonna see if these if these certain contexts are in the

11:12.510 --> 11:18.330
language so it's a context I see equals new context and we're gonna just say John

11:24.260 --> 11:27.870
White's adding maybe I'm adding the second parentheses.

11:28.200 --> 11:34.630
And so then we're gonna print out is John a male and he should be because he's one of the expressions

11:34.630 --> 11:38.350
so we'll say system put out the print line

11:40.940 --> 11:42.580
John is male.

11:42.680 --> 11:52.670
Like a question mark and then we'll see if he is by calling is male that interpret the context

11:55.370 --> 11:57.820
and we'll also do the same for context of Mary.

11:57.810 --> 12:03.420
Julie is duly married something like this.

12:03.500 --> 12:10.820
Now if we checked if someone else was May married so we could probably do a third context.

12:10.820 --> 12:23.860
Maybe you could say well we could say is Lucy married or Lucy male I should say.

12:23.860 --> 12:27.110
And that should return false.

12:27.220 --> 12:36.990
So if we can compile this and we'll see if these contexts return the correct results now we're gonna

12:37.000 --> 12:38.110
run our client

12:41.070 --> 12:43.620
and you'll notice John is male is true.

12:43.620 --> 12:49.110
John is a married woman is true and Lucy is male is true and that's probably because I'm not passing

12:49.110 --> 12:50.470
in the right context.

12:50.760 --> 12:51.970
I see three.

12:52.050 --> 12:53.250
There we go.

12:53.250 --> 12:54.720
Sorry about that.

12:54.720 --> 13:01.820
Rebuild and run and now we see Lucy as male is false.

13:02.310 --> 13:04.210
So that's a solution to the challenge.

13:04.380 --> 13:06.710
If you have any questions please let me know.

13:06.900 --> 13:07.710
Otherwise thank you.
