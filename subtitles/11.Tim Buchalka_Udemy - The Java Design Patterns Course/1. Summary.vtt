WEBVTT

00:05.420 --> 00:06.230
Hello and welcome back.

00:06.230 --> 00:11.150
Congratulations we are finally finished with another classification of patterns were all done with the

00:11.150 --> 00:13.690
structural patterns we studied around.

00:13.700 --> 00:19.850
I think it was seven patterns and now I just want to provide a summary mainly I wanted to identify and

00:19.850 --> 00:24.560
tell you the different difference in the similarities between some of the patterns because there's a

00:24.560 --> 00:29.360
lot of the pattern and structures are very similar so you want to understand what you learned and how

00:29.360 --> 00:31.390
things are similar and when they should be used.

00:31.430 --> 00:35.810
So the first one I want to talk about was the adapter versus the bridge.

00:35.810 --> 00:41.090
Just as an overview there are many similarities between a lot of the patterns especially in the participants

00:41.090 --> 00:42.050
in the collaboration.

00:42.050 --> 00:45.890
Remember the participants are really the objects that are used in the pattern.

00:45.890 --> 00:48.230
The collaborators are how those objects work together.

00:48.380 --> 00:54.020
So you see a lot of commonality in terms of composition aggregation how the inheritance hierarchies

00:54.020 --> 00:59.720
are working how the interfaces are implementing and so forth all the interaction techniques a lot of

00:59.720 --> 01:06.110
similarities and with the adapter versus the bridge they're similar as well they both promote flexibility

01:06.140 --> 01:11.750
by providing a level of indirection to another object they also both involve forwarding requests to

01:11.750 --> 01:14.540
this object from an interface other than its own.

01:14.630 --> 01:17.930
The key difference between these two patterns lies in their intents.

01:18.100 --> 01:23.510
The adapter focuses on resolving incompatibilities between two existing interfaces typically in a legacy

01:23.510 --> 01:24.440
system.

01:24.440 --> 01:29.480
The code was already written one interfaces were another interfaces were and you need to use them together

01:29.480 --> 01:35.780
you can't use it together so you add that layer and between that that adapter and now these two interfaces

01:35.780 --> 01:37.210
can talk to one another.

01:37.550 --> 01:42.980
The bridge is different in its intent and that the bridge bridge is an abstraction and it's potentially

01:42.980 --> 01:49.290
numerous implementations so it provides a stable interface to clients as it lets you vary the classes

01:49.290 --> 01:50.370
that implement it.

01:50.390 --> 01:55.470
I mean it's exactly what it says it's a bridge and so understand the differences and similarities between

01:55.470 --> 01:56.560
the two.

01:56.820 --> 02:03.090
They also are often used at different points in the software lifecycle and adapter is usually necessary

02:03.090 --> 02:07.920
when you discover that these two incompatible classes need to work together and you also want to avoid

02:07.920 --> 02:15.210
replicating any code the user the bridge is usually used in a new design it understands upfront that

02:15.210 --> 02:21.800
the abstraction must have several implementations in both may evolve independently so the adapter pattern

02:21.800 --> 02:28.260
makes things work after they're designed and the bridge makes them work before they are designed so

02:28.260 --> 02:31.710
the adapter versus bridge understand those similarities differences.

02:31.710 --> 02:39.350
Also the composite versus the decorator both of these have similar structure diagrams both rely on recursive

02:39.350 --> 02:43.110
composition to organize an open ended number of objects.

02:43.310 --> 02:48.140
The decorator is designed to let you add responsibilities to objects without subclasses rights and alternatives

02:48.140 --> 02:49.330
to sub classing.

02:49.340 --> 02:55.880
We can extend the functionality by having concrete decorators it avoids the explosion of subclasses

02:55.880 --> 02:59.830
that can arise from trying to cover every combination of responsibilities statically.

02:59.840 --> 03:05.570
Instead you do it dynamically the composite has a different intent than the decorator it focuses on

03:05.570 --> 03:09.230
structure and classes so that many related object can be treated uniformly.

03:09.230 --> 03:13.700
Remember we had these grouping of objects these smaller objects didn't matter if they are part of a

03:13.700 --> 03:19.010
group a composition or if they were individual objects you could treat them the same multiple objects

03:19.010 --> 03:22.900
treated as one you didn't have to add any if or else statement saying oh is it a composite.

03:22.910 --> 03:24.880
Does it have multiple leaves and so forth.

03:25.130 --> 03:31.370
But the composites focus is not on the Ebell embellishment but on the representation both of these patterns

03:31.370 --> 03:32.990
are often used together.

03:32.990 --> 03:38.180
They both lead to the kind of design in which you can build applications just by plugging objects together

03:38.270 --> 03:44.000
without defining any new classes they usually consist of an abstract class with some subclasses that

03:44.000 --> 03:48.980
are composites some that are direct decorators in some that implement the fundamental building blocks

03:48.980 --> 03:55.730
of the system both composites and decorators will have a common interface and that is a common the common

03:55.730 --> 04:00.440
interface and the composite is the concrete component that implements that interface and the decorator

04:00.650 --> 04:01.600
is a leaf.

04:01.850 --> 04:03.080
When you use them together.

04:03.290 --> 04:07.430
So the decorator acts as a leaf and the composite acts of the concrete component.

04:07.430 --> 04:10.350
The decorator is also similar to the proxy.

04:10.430 --> 04:14.180
Both patterns describe how to provide a level of indirection to an object.

04:15.070 --> 04:20.170
Both implementations keep a reference to another object to which they forward requests say they'll both

04:20.170 --> 04:25.730
have a has a relationship but they differ by their intent just like the previous two examples.

04:25.930 --> 04:31.390
The proxy pattern composes an object and provides an identical interface to clients.

04:31.390 --> 04:34.990
It's not concerned with attaching or detaching properties dynamically.

04:34.990 --> 04:37.680
It's not designed for recursive composition.

04:37.780 --> 04:42.940
Its intent is to provide a stand in for a subject when it's inconvenient and undesirable to access the

04:42.940 --> 04:48.670
subject indirectly or subject directly it lives on a remote machine has restricted access or is persistent

04:49.900 --> 04:54.920
the decorator is when the component provides only part of the functionality in one or more decorators

04:54.920 --> 04:59.130
furnish the rest so the decorator addresses the situation where it objects.

04:59.150 --> 05:02.020
Total functionality cannot be determined at compile time.

05:02.030 --> 05:02.320
Right.

05:02.330 --> 05:03.390
It's dynamic.

05:03.510 --> 05:08.070
The recursive composition is an essential part and this is not the case in the proxy.

05:08.150 --> 05:13.220
The proxy focuses on one relationship between the proxy and its subject and that relationship can be

05:13.220 --> 05:15.080
expressed statically.

05:15.080 --> 05:18.800
Now the differences do not mean that these patterns cannot be combined.

05:18.800 --> 05:25.070
You might envision a proxy decorator that adds functionality to a proxy or a decorator proxy that embellishes

05:25.070 --> 05:27.350
a remote object so that's it.

05:27.380 --> 05:33.530
That's all I have on the structural design patterns I wanted to just add this last tidbit and you probably

05:33.530 --> 05:38.570
noticed some of the similarities and differences in these patterns are really the ones that that were

05:38.630 --> 05:40.460
really apparent with their similarities.

05:40.490 --> 05:45.220
So understand this understand how to use them and you should be good to go.

05:45.230 --> 05:45.620
Thank you.
