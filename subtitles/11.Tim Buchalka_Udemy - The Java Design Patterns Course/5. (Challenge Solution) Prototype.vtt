WEBVTT

00:05.190 --> 00:06.290
Hello and welcome.

00:06.510 --> 00:12.060
In this lecture I want to provide a solution to our previous challenge which is demonstrating the prototype

00:12.060 --> 00:13.180
design pattern.

00:13.470 --> 00:19.160
We're going to create a basic car after class couple of concrete cars that implement Colonial.

00:19.410 --> 00:23.820
And then we're going to use a cash to retrieve colonial cars.

00:23.820 --> 00:26.930
Let's bring up until today and I'm going to call this project.

00:27.270 --> 00:36.060
I think I'll call a prototype solution since it's applying to a challenge and then you can ignore most

00:36.060 --> 00:38.040
of this it's pretty straightforward.

00:38.130 --> 00:49.360
We're going to see a prototype could spell prototype solution.

00:49.770 --> 00:53.670
First thing we're gonna do is we're going to create our abstract class.

00:53.810 --> 01:02.840
And so we're gonna say public abstract or better yet abstract class I like not using the modifiers just

01:03.020 --> 01:07.430
so not to worry about files file naming and so forth.

01:07.430 --> 01:09.460
So it's a basic car.

01:09.760 --> 01:12.800
And this is going to implement the colonial interface.

01:13.430 --> 01:17.840
We're gonna have a couple attributes for the string the model name

01:21.290 --> 01:30.380
and the price and we'll just make that an integer and just for simplicity and then a couple of getters

01:30.380 --> 01:39.240
and setters which we can just click on and say generate and we'll generate a getter and setter

01:41.910 --> 01:45.680
make it a bit easier.

01:45.680 --> 01:47.580
Generated them a little lower than I wanted

01:51.030 --> 01:52.500
and then we'll do the same for price

01:55.400 --> 02:04.940
although the change a bit actually for price I think I'll just add a setter and I want to do some kind

02:04.940 --> 02:11.500
of random price just to make things interesting so I'll say public static int.

02:11.660 --> 02:16.020
So we can actually set the price without having an instance.

02:16.250 --> 02:21.980
We can do it after the fact with the colonial set price and what we're gonna do is here is going to

02:21.980 --> 02:27.780
say in price equals zero and then we're just gonna do some random price.

02:28.430 --> 02:32.840
So we're gonna use the Random class new random we're gonna set the seed

02:35.710 --> 02:45.590
our next dance and just put something in narrow like a hundred grand.

02:45.590 --> 02:51.140
And then the price is gonna be equal to that random number and we're gonna return the price just to

02:51.140 --> 02:53.630
make things interesting.

02:53.690 --> 03:02.660
We also need to implement the clone method and so we're gonna say public basic car clone because it

03:02.660 --> 03:04.550
returns a basic car.

03:04.550 --> 03:09.710
We have to support our exception which is our clone not spoiled exception.

03:11.420 --> 03:17.790
And then we're just gonna return a basic car casted and call super doc.

03:17.800 --> 03:18.620
All right.

03:18.620 --> 03:25.760
Just the way we implement our clone method and then we need to create or implement a couple concrete

03:25.760 --> 03:38.930
classes or extend these after our class here will say class Ford extends basic car our constructor is

03:38.930 --> 03:43.940
going to just set the model name so we can access it in our cash.

03:44.030 --> 03:45.470
So take a string

03:50.270 --> 03:54.380
and let's use the brackets.

03:56.120 --> 04:05.320
And this is just going to set the model name to em from the base class.

04:05.360 --> 04:07.190
I love how they keep adding brackets for me

04:14.640 --> 04:16.710
and then we're also going to implement the colonial here

04:19.810 --> 04:24.970
so we're going to just basically make a Ford super clone even though we don't have extra attributes

04:24.970 --> 04:30.290
inhere and it's not necessary.

04:30.290 --> 04:37.330
What we're gonna say public basic car clone throws

04:43.220 --> 04:47.710
that's for an exception.

04:47.950 --> 04:52.370
This will allow us to return afford if we need it.

04:53.730 --> 04:58.970
Turn for super dazzle.

05:00.540 --> 05:03.900
We're gonna do something very similar for our Nano car

05:07.270 --> 05:16.090
so we can copy and paste some of that in because it is mainly code duplication with just very very slight

05:16.090 --> 05:17.560
differences.

05:17.660 --> 05:21.810
Returning a nano instead in our clone method.

05:22.030 --> 05:31.240
So there we implemented our basic classes that we want cloned.

05:31.250 --> 05:35.450
Now we want to create our cash that can retrieve colonial items easily.

05:35.450 --> 05:38.060
Kind of a helper to the client.

05:38.060 --> 05:45.800
So now we're gonna say new Java class basic car cash.

05:47.120 --> 05:51.020
And this is going to have a private static cash table

05:55.250 --> 05:56.750
of strings and basic cars

05:59.480 --> 06:02.250
string based car.

06:03.520 --> 06:06.480
And we're going to S.A. this a class loaning time.

06:06.500 --> 06:10.280
So say basic car map equals new hash table

06:13.010 --> 06:14.170
string.

06:14.420 --> 06:18.140
Basic Car math

06:20.930 --> 06:27.530
basic core sorry basic car not basic car map.

06:29.690 --> 06:35.600
And then we're gonna have a good car that will return the car in the hash table based on the string

06:35.600 --> 06:37.010
of the car name.

06:37.190 --> 06:46.140
So we'll make this static so we don't have to create an instance of our basic car cash basic car map.

06:46.260 --> 06:47.570
Gosh I keep making that mistake.

06:47.570 --> 06:54.570
Basic Car get car string car name.

06:55.220 --> 06:57.470
And this will return our basic car.

06:57.520 --> 07:00.380
So occurred a local variable of a caste car.

07:00.380 --> 07:01.790
So we can call clone on it

07:05.630 --> 07:06.560
get it from the map

07:10.550 --> 07:17.660
using the key car name and then we want to return the colonial of this.

07:17.660 --> 07:25.780
So we just return a basic car cached basic car Doc clone.

07:26.820 --> 07:27.190
OK.

07:28.400 --> 07:31.210
So that's a helper method for the client so we can get our cars.

07:31.400 --> 07:39.320
We're going to add another helping method which is create these instances so that the hash table has

07:39.320 --> 07:40.870
some information in it.

07:41.180 --> 07:49.040
And so we're gonna create a method called load cash this load cash is going to create new Nanos in New

07:49.040 --> 07:56.260
forts and we're going to set the price equal to basically the price methods that we can get.

07:56.260 --> 08:00.380
So when a call price.

08:00.760 --> 08:05.860
So we want to do is we want to set initial prices and then afterwards we want to change those prices

08:05.860 --> 08:08.620
to demonstrate that things were cloned.

08:08.620 --> 08:15.580
So this is what we want to do basically and have correct quotation marks since copying and pasting doesn't

08:15.580 --> 08:20.200
always work correctly.

08:20.200 --> 08:22.930
And so this is our cash class.

08:23.080 --> 08:24.840
Pretty straightforward.

08:25.150 --> 08:27.850
We want to make sure that this compiles and we don't have any issues.

08:29.160 --> 08:32.930
And I do have an extra quote there.

08:32.930 --> 08:36.070
And that should be good.

08:36.190 --> 08:40.300
The last thing to do is create our client go ahead and say new client

08:43.290 --> 08:49.360
and what we'll do here is the first thing we'll do is we're gonna display information to say what this

08:49.360 --> 08:49.650
is.

08:49.660 --> 08:52.030
This is actually outputting.

08:52.330 --> 08:57.400
So we're just gonna be demonstrating the prototype design pattern and what we want to do is we want

08:57.400 --> 09:03.220
to first load the cash so we can say basic car cash Load

09:06.410 --> 09:07.460
load

09:10.600 --> 09:15.820
cash something like that and we want to make sure this isn't a main method

09:24.370 --> 09:26.530
so that we can get rid of those rates.

09:29.050 --> 09:36.040
So we know once we load the cash we can then get some colonial items and change their prices.

09:36.040 --> 09:38.170
So first we want to get our green anno

09:42.490 --> 09:48.510
so we're gonna do something like this to get our green nano.

09:50.350 --> 09:52.690
Something like that.

09:52.690 --> 09:59.860
We then want to set the price to be more than a thousand to make sure that our green Nano is a clone.

10:02.370 --> 10:07.030
And then I'll put some information related to it.

10:07.140 --> 10:14.070
So here we're gonna say B.C. 1 da price equals B.C. 1 that price plus basic car set price.

10:14.160 --> 10:15.900
So we're adding to it.

10:16.590 --> 10:19.620
And then we can get the actual model name

10:25.140 --> 10:26.640
and we can get the price

10:30.560 --> 10:31.530
which we don't have a get math.

10:31.550 --> 10:36.470
We just made it public which pi make that private for good instance but it is public.

10:36.470 --> 10:40.230
This should definitely be private.

10:40.430 --> 10:43.860
You know all about that you know all about those good programming practices.

10:44.030 --> 10:53.600
Even when I make mistakes we can also do the same for a yellow Ford and also set its price to make sure.

10:53.890 --> 10:58.830
So let's do something similar.

10:59.210 --> 11:00.410
Try to make this bigger.

11:02.870 --> 11:03.700
So we're gonna create.

11:03.710 --> 11:10.370
Now we're gonna set the basic car B C 1 and we're gonna set it to getting another colonial which is

11:10.370 --> 11:14.420
a Ford yellow.

11:14.420 --> 11:17.150
So it's gonna get a clone of that object instead.

11:17.300 --> 11:21.150
And it's also gonna get the model.

11:24.540 --> 11:29.480
And so this will demonstrate the prototype that we got cloned items and then because typical what you

11:29.480 --> 11:35.900
do when you get a clone item is you modified after and you can use it and it's still not a new instance.

11:35.960 --> 11:38.120
So let's go out and build and run this and see what we get

11:43.610 --> 11:49.950
when we run this and I made a mistake when I said that private we want to make it protected

11:56.260 --> 12:00.880
I had to make a couple corrections to get this to compile because I made a couple mistakes.

12:00.880 --> 12:06.190
Mainly I want to make sure that the subclasses implement Colonial.

12:06.190 --> 12:11.860
And so when I when the base class implements colonial I don't need to have to try and catch catch it

12:11.870 --> 12:16.990
because the base classes and so I also change the return values of the clone methods to return the right

12:16.990 --> 12:17.860
types.

12:18.070 --> 12:22.110
And I don't have to enclose and try and catch so a couple mistakes I just fixed.

12:22.110 --> 12:26.440
Real quick I didn't want to waste your time on the implementation it's implementing clone correctly

12:27.250 --> 12:28.230
in the subclasses.

12:28.240 --> 12:33.730
I made a couple of mistakes in the subclasses implementing them again I added implements colonial change

12:33.790 --> 12:39.730
type to the clone didn't have to close some trying to catch because it's already up here in the base

12:39.730 --> 12:42.880
class and I did the same for the Nano.

12:42.880 --> 12:49.780
So now when I try to build it should compile correctly and I should be able to run it and you'll see

12:49.780 --> 12:55.210
that our prototype design pattern is working splendidly.

12:55.210 --> 13:03.430
We are able to get copies of green nano and Ford yellow and add to its price to modify the price attribute.

13:03.480 --> 13:03.870
Thank you.
