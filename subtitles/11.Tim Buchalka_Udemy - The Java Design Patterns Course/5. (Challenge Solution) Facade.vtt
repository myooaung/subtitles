WEBVTT

00:05.270 --> 00:06.440
Hello and welcome.

00:06.590 --> 00:11.330
In this lecture I'm going to provide a solution to our previous challenge which demonstrate the implementation

00:11.330 --> 00:12.860
of the facade pattern.

00:12.860 --> 00:18.590
I'm going to open up an existing project that we already had that already created that will have our

00:18.590 --> 00:22.350
entire structure and hierarchies created.

00:22.430 --> 00:23.310
I've already created this.

00:23.310 --> 00:25.700
So this is just going to be called facade solution

00:28.420 --> 00:35.290
and right now it just contains our hierarchy it contains our restaurants and our menus our hotel on

00:35.290 --> 00:36.430
our menus.

00:36.430 --> 00:40.360
So they'll tell interface remember they'll tell interface implements to get the menus.

00:40.480 --> 00:47.890
And each one of the restaurants have a get menus and then we have the menus interface that has specific

00:47.890 --> 00:53.970
menus that are implemented and just part coding bring out information for testing.

00:54.010 --> 00:59.050
Really not too complicated here but right now a client in this subsystem isn't overly complicated but

00:59.050 --> 01:03.350
right now a client does have to create an instance of a specific restaurant.

01:03.460 --> 01:10.480
And then from a specific restaurant they have to request getting the menus for a specific menu.

01:10.510 --> 01:16.180
So it can be a little more simplified it's not the best example in the world because it's not overly

01:16.180 --> 01:21.150
complicated but it is is better.

01:21.670 --> 01:23.350
We can't make it a little cleaner.

01:23.420 --> 01:28.570
So let's go ahead and start and create the facade on the facade as it's going to be named the hotel

01:28.570 --> 01:29.860
keeper.

01:29.860 --> 01:34.990
So we're just going to say hotel keeper.

01:34.990 --> 01:40.930
Remember this class is completely independent of any of the subsystem classes so it's just a separate

01:40.930 --> 01:41.800
class really.

01:41.950 --> 01:43.390
You can use it if you want to.

01:43.390 --> 01:49.720
If you don't you can use the interface on this you're going to have three methods to make the client's

01:49.720 --> 01:50.740
life easier.

01:50.740 --> 01:59.740
It's going to have a get veg menu getting on veg menu and a get veg non menu or get veg get both menu

02:00.520 --> 02:01.790
something similar to that.

02:01.960 --> 02:05.840
So public veg menu get veg menu.

02:06.700 --> 02:11.880
And this is going to create an instance of a veg restaurant because that's where the menu is.

02:11.970 --> 02:15.330
It's going to need that V and it's going to say new veg restaurant.

02:16.810 --> 02:21.490
And then we're going to have to get the menu and return the menu so we have to create a sense of a menu

02:22.030 --> 02:32.310
going to say vegetarian menu equals where we have to cast veggie menu that VDI get feed.

02:32.650 --> 02:37.030
Get menus and then I'm going to return the veg menu.

02:37.090 --> 02:38.770
So it's pretty straightforward.

02:38.770 --> 02:42.270
It's not overly complex but it does simplify things you can see that you have to create a restaurant.

02:42.280 --> 02:46.760
You have to create a menu and you have to get the menu and so forth.

02:47.080 --> 02:52.360
So that simplifies things a bit for the veg menu we have to do the same for the not veg menu.

02:52.360 --> 02:57.670
So it's gonna be very similar except different instances and different methods are going to be invoked.

02:57.670 --> 02:59.680
So here was say non veggie menu

03:02.680 --> 03:07.420
and this will actually say get non veg menu.

03:07.420 --> 03:09.400
This will create a non veg restaurant

03:12.880 --> 03:15.190
and a non veg restaurant.

03:15.190 --> 03:21.410
And the menu will be different non veg menu the instance should also be different.

03:23.140 --> 03:29.800
And this is going to need to be casted and we're just going to say v docket menus and this is going

03:29.800 --> 03:33.990
to return our non veg menu pretty straightforward.

03:34.000 --> 03:37.260
We also need to do it for both menus.

03:37.660 --> 03:42.650
So we're gonna say get veg non menu so both get veggie and get non.

03:42.670 --> 03:45.550
This is going to return a both menu.

03:45.550 --> 03:50.140
Not the greatest name but it will suffice.

03:50.140 --> 03:57.540
So get veg non menu and this is going to create a veggie non both restaurant

04:02.500 --> 04:04.600
and it's also going to create a both menu

04:09.610 --> 04:18.670
and it's going to call VDI get menus and it's going to return both menu.

04:18.700 --> 04:20.560
So this is our facade a little bit simpler.

04:20.560 --> 04:24.620
The client will be able to call the method directly to get menus that they're interested in.

04:24.820 --> 04:37.840
So let's create a client say new Java class or going to see client and this needs to have a main method.

04:37.840 --> 04:38.650
I mean

04:44.080 --> 04:48.490
this is going to need to create the facade the hotel keeper.

04:49.600 --> 04:56.560
We'll just call them keeper and we'll see a new hotel keeper and then we can get the menus that we want

04:57.010 --> 05:07.190
by just using the keeper so we can return a veg menu by calling keeper to get veg menu.

05:07.210 --> 05:17.380
We can get a non veg menu by simply calling keeper dog get not veg menu and we can get both menus by

05:17.380 --> 05:21.970
just saying keeper get non veg menu.

05:25.510 --> 05:30.730
So in this way the implementation incentive sensitive side the client is given just one interface the

05:30.730 --> 05:38.830
facade and it can access it only that way it hides all the complexities and we want to make sure I didn't

05:38.830 --> 05:44.920
screw this up our menus are both

05:47.820 --> 05:49.590
so keep her dark.

05:49.600 --> 05:57.280
Get non veg menu has to be get veg non menu.

05:57.370 --> 06:01.400
That's that's what happens when you have bad naming conventions.

06:01.430 --> 06:02.930
There we go.

06:02.930 --> 06:09.560
Was there any turning the right instant so if we build this and run it we'll just see some basic output

06:09.590 --> 06:13.460
for instance is being created and returned

06:16.420 --> 06:22.400
and you just notice that all sounds not right we're creating a non veg menu all three times.

06:22.420 --> 06:34.300
So we'll have to modify something here that's most likely cause my constructors have misinformation

06:34.360 --> 06:40.480
in the output I would imagine that would be my help.

06:40.480 --> 06:42.240
They all say creating an on veg menu.

06:42.250 --> 06:43.950
So that's a mistake.

06:44.040 --> 06:46.920
You should be creating a veg menu.

06:46.930 --> 06:54.370
You may have to correct this in the solution creating a veg or I'll update that creating a veg menu

06:56.320 --> 07:13.600
and menu items and veg menu and creating a creating both a non and veg Menu menu items and both veg

07:13.660 --> 07:16.580
and that menu.

07:16.610 --> 07:17.730
Now let's try this again.

07:23.980 --> 07:29.570
And now we have three different types of menus created have to have the right output displayed for the

07:29.930 --> 07:31.010
instances that are created.

07:31.700 --> 07:34.450
So I hope this helped your understanding with the facade.

07:34.460 --> 07:38.720
If you have any questions please ask in the Q and A otherwise onto the next design pattern.

07:38.720 --> 07:39.170
Thank you.
