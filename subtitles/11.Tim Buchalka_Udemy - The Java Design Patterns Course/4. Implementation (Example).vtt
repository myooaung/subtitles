WEBVTT

00:05.300 --> 00:06.740
Hello and welcome back.

00:06.790 --> 00:11.090
In this lecture we're going to go through an example of implementing the observer.

00:11.110 --> 00:14.030
This is going to be a simple application that demonstrates the observer pattern.

00:14.030 --> 00:18.560
We're going to implement a simple topic that observers can register for.

00:18.620 --> 00:24.650
So let's create a new project and let's call this one observer example

00:28.920 --> 00:34.100
for this topic that observers can register for whenever any new message is posted to the topic.

00:34.110 --> 00:38.690
All the registered observers will be notified and then they can consume the message.

00:38.700 --> 00:43.050
I'm going to also implement this application so that observers can also ask subjects if there are any

00:43.050 --> 00:43.690
updates.

00:44.030 --> 00:48.540
So because sort of a pull method we're going to add a get update to the subject interface.

00:48.540 --> 00:53.310
We're going to add a reference to the subject in the concrete observer and we're going to add a set

00:53.370 --> 00:58.590
subject method in the concrete observer so that the observer knows its subject.

00:58.590 --> 01:03.610
If the Update method of the concrete observer will then return the latest subject string.

01:04.020 --> 01:07.820
So we're gonna start off by creating this subject interface.

01:07.980 --> 01:16.980
So let's go out and say new Java class and we'll call it subject and we're going to say it's an interface.

01:16.980 --> 01:19.880
So remember the subject knows it's observers.

01:19.890 --> 01:25.050
It's going to contain a list observers observers to notify any number observer objects may observe a

01:25.050 --> 01:26.280
subject.

01:26.370 --> 01:32.610
This interface is provides for registration and de registration to observer objects.

01:32.610 --> 01:36.650
These methods allow them to be added not added to the list.

01:36.660 --> 01:40.870
There's also a method to notify all the observers of any change.

01:40.950 --> 01:42.810
So let's get started.

01:42.840 --> 01:46.860
So the first thing we're going to do is we're going to add the register and unregistered methods.

01:46.880 --> 01:47.060
Right.

01:47.070 --> 01:52.230
So methods to register and on register observers.

01:53.880 --> 01:57.050
So we're just going to call those register.

01:57.060 --> 02:00.900
It's going to take an observer which the class we haven't implemented yet.

02:00.900 --> 02:09.120
Observer LBJ looks like this actually might be deprecated to you know I've got to get up to date on

02:09.120 --> 02:10.860
my thing.

02:10.860 --> 02:20.300
So our Observer class is going to be implemented and looks this is a interface no default behavior here

02:22.770 --> 02:24.810
and then are on register

02:29.220 --> 02:33.210
and register also taking an observer

02:36.490 --> 02:37.880
and we'll fix that.

02:38.040 --> 02:47.130
We need to have a method to notify observers of change.

02:48.750 --> 02:54.660
And this one will be called Public void on register.

02:54.660 --> 02:54.960
I'm sorry.

02:54.960 --> 02:58.760
Notify observers to notify observers.

03:01.130 --> 03:05.380
And then we're going to allow had a method to get it for getting updates from the subject.

03:05.430 --> 03:09.690
This is required but we want to add this all observers can query to see if there is an update.

03:12.100 --> 03:18.520
So something like this in the get update again we'll take an observer object.

03:18.520 --> 03:21.970
We now need to update or create the observer interface.

03:22.150 --> 03:29.320
So we're gonna say new Java class we're gonna call this observer and this is also going to be an interface

03:30.580 --> 03:31.580
this one.

03:31.900 --> 03:36.760
Remember the responsibilities of this object are it defines the updated interface for the objects that

03:36.760 --> 03:43.820
should be notified of changes in a subject all potential observers need to implement this interface.

03:44.350 --> 03:49.110
We're going to have a method called update which will be called to update the observer.

03:49.120 --> 03:56.540
So method to update the observer used by the subject.

03:56.770 --> 03:57.670
Public void Update.

03:59.050 --> 04:01.930
We're also going to have our set subject.

04:01.930 --> 04:05.010
This is gonna be attached with the subject to observe.

04:05.110 --> 04:07.310
This will allow us to pull.

04:07.540 --> 04:11.980
So there's gonna be attached with subjects observed not required but added so that the observer can

04:11.980 --> 04:14.480
query the subject to see if an update has occurred.

04:15.220 --> 04:16.840
Let's make sure this we don't need this.

04:16.840 --> 04:19.650
So maybe those.

04:19.690 --> 04:22.270
There we go.

04:22.270 --> 04:25.780
Now let's carry the concrete subjects this cock.

04:25.780 --> 04:30.560
The concrete objects will store state of interest to the concrete observer objects.

04:30.640 --> 04:37.150
They'll send a notification to observers when it's state changes our subject is going to be named my

04:37.150 --> 04:38.920
topic.

04:38.920 --> 04:39.490
So we're gonna say.

04:39.490 --> 04:43.840
Class my topic implements.

04:43.960 --> 04:47.650
Subject.

04:47.650 --> 04:50.120
Remember we have to have a list for all the observers.

04:50.140 --> 04:54.490
We're also gonna have a message and we're going to have a boolean change that will tell us if something's

04:54.490 --> 04:54.880
changed

04:57.850 --> 05:03.880
so we're going to have a private list of the observers string message and boolean changed the constructor

05:03.880 --> 05:09.880
is just going to create a new array list for the observers to store all of its observers.

05:09.880 --> 05:12.160
So the constructors are pretty basic.

05:12.160 --> 05:20.670
We then need to override the register in the UN register and the notified so the register is gonna take

05:20.670 --> 05:23.590
an observer has a parameter.

05:23.920 --> 05:28.350
Right now it's really going to do is add it to the list as long as it's not in the list already.

05:28.350 --> 05:33.150
So Raj is going to take this observer if the objects null it's going to throw a new null pointer exception

05:33.990 --> 05:40.310
if the observer is not currently in the Observer list it's going to add it and the Raja on register

05:40.310 --> 05:42.890
is just going to try to remove it and if it's not in there it's no harm.

05:42.890 --> 05:44.270
You don't have to check for that.

05:44.360 --> 05:48.070
It's just going to go ahead and remove it if it's there if not fine.

05:48.950 --> 05:57.520
The notify observers is gonna need to go through the list observers and if something is changed it's

05:57.520 --> 06:03.010
going to actually update all the observers.

06:03.080 --> 06:04.780
Let's go ahead.

06:04.790 --> 06:11.030
This is an override and this is gonna be public void notify observers

06:13.580 --> 06:16.630
and we're going to create a local object for our list.

06:16.670 --> 06:25.070
This is gonna be observer contain observer objects and this is gonna be our observers local

06:28.910 --> 06:33.350
and we first have to check if something's changed so we're gonna use our Boolean if something's changed

06:33.860 --> 06:36.170
if nothing has changed.

06:36.170 --> 06:37.520
We're just gonna return out of the method

06:41.820 --> 06:43.210
and that's not always great.

06:43.250 --> 06:48.280
Coding practice as well to have returns throughout the method usually just happen at the bottom.

06:48.440 --> 06:51.460
But again we're not demonstrating that we're demonstrating the pattern.

06:51.470 --> 06:54.970
So you could create a local variable and then return the bottom.

06:56.360 --> 07:06.700
Otherwise we're gonna have our observers local equal to the new array list of the current observers.

07:06.740 --> 07:09.610
This way we avoid any race conditions.

07:09.740 --> 07:13.880
If something is added We're not going to we'll we'll get it right at this state.

07:13.880 --> 07:15.550
So this observers.

07:15.800 --> 07:23.990
This is the new list and then we're gonna set this dot changed equal to False and then we're just gonna.

07:24.170 --> 07:29.750
Lastly we're gonna go through the list and call update on all the observers.

07:29.870 --> 07:34.910
So for observer LBJ for all the local observers.

07:35.150 --> 07:40.690
Again we're kind of saving the state there so we don't have a race condition where they object that

07:40.790 --> 07:41.470
update.

07:44.560 --> 07:46.960
And then we're gonna end this method.

07:47.010 --> 07:50.690
We also need to implement our get update.

07:51.210 --> 07:55.270
And this is just going to return a message.

07:55.290 --> 07:59.060
So here we have public object get update for the Observer.

07:59.190 --> 08:05.620
And it's just going to return the message to local variable or the member verbal.

08:05.620 --> 08:10.380
Then we need to have a method to post the message to the topic to change the state.

08:10.380 --> 08:10.670
All right.

08:10.690 --> 08:13.620
If you don't change the state no observers are going to get updated.

08:13.630 --> 08:15.560
So we have to be able to change the state.

08:15.670 --> 08:23.790
So we're going to have a method called post message and this is going to set the state essentially post

08:23.790 --> 08:26.790
a message to the chop to the topic.

08:26.790 --> 08:30.800
This will be our trigger notification so we're going to print out some information and then we're going

08:30.800 --> 08:37.730
to set our message to the message passed in change the state and then call notify observers.

08:37.950 --> 08:40.770
So something like that.

08:40.770 --> 08:45.360
And that does it for our Observer concrete observers.

08:45.560 --> 08:45.910
Right.

08:45.940 --> 08:46.990
Our my topic.

08:47.130 --> 08:52.500
Let's have observers our message an hour changed a couple of things the notice notice the method implementation

08:52.500 --> 08:56.680
of registering on register an observer very simple to do that right.

08:56.730 --> 08:59.280
We just add to the list there's not a lot of code there.

08:59.280 --> 09:05.430
The extra Method POST message that this will be used by the client application to post string messages

09:05.430 --> 09:07.070
to the topic.

09:07.320 --> 09:11.910
Notice that the boolean variable to keep track of the change in the state of topic and use in notifying

09:11.910 --> 09:12.870
observers.

09:12.870 --> 09:15.560
Those variables required so if there is no update.

09:15.630 --> 09:17.950
And somebody calls notify observers.

09:18.060 --> 09:21.340
It does not send false notifications to the observers.

09:21.360 --> 09:23.520
Now let's create our concrete observers.

09:23.820 --> 09:28.070
And remember the concrete observers are going to maintain a reference to a concrete subject.

09:28.200 --> 09:31.830
They're going to store the state that should stay consistent with the subjects and they're also going

09:31.830 --> 09:35.970
to implement the observer updating interface to keep it stay consistent with the subjects.

09:36.450 --> 09:44.720
So we're going to say class my topic subscriber implements observer.

09:45.090 --> 09:47.190
And this is going to have a name.

09:47.190 --> 09:50.710
And it's also going to have a subject although the subject's not required.

09:50.820 --> 09:54.830
We're just passing the subject since to so that we can attach.

09:54.840 --> 09:58.710
So here we have our name and then our subject topic.

09:58.710 --> 10:02.430
We could just pass the subject state to the update method.

10:02.430 --> 10:04.790
But we also can use this to attach.

10:05.280 --> 10:08.670
So now in the constructor we're going to set up our name.

10:08.670 --> 10:14.490
What we typically do in most constructors and we're also going to override the update and the set subject

10:14.490 --> 10:18.210
methods the update method looks like this.

10:18.210 --> 10:24.420
Now this method could take data of subject state that was changed as a parameter and then we wouldn't

10:24.420 --> 10:26.330
need to ask the topic for.

10:26.370 --> 10:30.720
But what this method is doing is it's going to ask the topic to get the update.

10:30.810 --> 10:34.920
And so it's going to get the message if the message is no it's going to print it out and say no new

10:34.920 --> 10:35.450
message.

10:35.460 --> 10:38.070
Otherwise it's going to say consuming message.

10:38.070 --> 10:40.710
This is how we're doing a little bit of pull.

10:40.770 --> 10:44.280
We're also got to implement our set subject method.

10:44.480 --> 10:49.470
Again this is not required but we added it so we can.

10:49.530 --> 10:52.580
So the observer can ask the subject for state right.

10:52.670 --> 10:57.380
And so notice the implementation of the update method where it's calling to get update subjects get

10:57.390 --> 11:01.070
update right to get the message to consume.

11:01.120 --> 11:02.420
We could have avoided this.

11:02.490 --> 11:07.180
I know I'm repeating myself but we could avoid this by passing the message as an argument to the update

11:07.180 --> 11:11.020
method then we would not need a subject reference.

11:11.110 --> 11:15.690
However this reference does allow us to have the observer ask the subject for state.

11:15.940 --> 11:18.830
The last thing we need to do is create the client.

11:19.240 --> 11:26.400
So we're going to say new Java class and we're in call this one client and this one is going to need

11:26.400 --> 11:27.990
a main method.

11:28.060 --> 11:33.570
So we're gonna say public static void main.

11:35.590 --> 11:40.990
And this is gonna create our subject and then it's going to create three observers the observers are

11:40.990 --> 11:44.610
just going to be named observer 1 2 and 3.

11:44.620 --> 11:51.260
So here we create our subject then we create the observers first thing we have to do is we have to register

11:51.260 --> 11:53.520
those observers with the subject.

11:53.720 --> 11:58.120
So we're gonna call topic dot register passing in the observers.

11:58.960 --> 11:59.510
Right.

11:59.540 --> 12:05.390
And this again we could have added the registration as part of the observer constructor as well passing

12:05.390 --> 12:06.430
in the subject.

12:06.890 --> 12:09.140
But this is another way to do it.

12:09.200 --> 12:12.060
We then want to attach the observer to the subject.

12:12.080 --> 12:13.130
This is not required.

12:13.130 --> 12:16.220
We could have passed it in the subject state to the update method.

12:16.220 --> 12:18.040
So we can do something like this.

12:18.170 --> 12:26.920
Now we can check if there's any update available by just saying object one dot update let's now try

12:26.920 --> 12:30.590
to trigger an update by sending a message to the subject.

12:30.610 --> 12:33.340
This will trigger a fire trigger then notify all.

12:33.340 --> 12:37.000
So we're gonna call our post message on our topic.

12:37.000 --> 12:38.780
Just posting a new message.

12:38.780 --> 12:41.890
And when we call that you should see all the other observers receive it.

12:43.230 --> 12:49.660
So let's try to compile this and see what happens.

12:50.140 --> 12:56.260
Now we'll run the client and we should see all observers getting that information of a new message.

12:56.260 --> 13:02.880
And you'll notice that when it called update there was no new message so here object one calls update.

13:02.970 --> 13:04.290
No new message.

13:04.290 --> 13:11.760
We now trigger a new message message posted to topic and all three objects get notified of that message

13:13.110 --> 13:21.660
because the subject sees that the state has changed and it goes through its entire list and calls the

13:21.660 --> 13:23.790
update method on the observer.

13:23.790 --> 13:27.790
And then the observer will tell you if the message is change and print it out.

13:27.810 --> 13:29.070
So this is the observer.

13:29.190 --> 13:32.320
Again notice the decoupling of the subject in the Observer.

13:32.520 --> 13:38.880
And notice how the client has to register and then also how we added some new implementation so we can

13:38.880 --> 13:42.150
set the subject and we can pull for any updates.

13:42.180 --> 13:42.570
Thank you.
