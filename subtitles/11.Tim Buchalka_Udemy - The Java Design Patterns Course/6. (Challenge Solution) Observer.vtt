WEBVTT

00:05.340 --> 00:06.580
Hello and welcome.

00:06.630 --> 00:11.430
This locks are on to provide a solution to our previous challenge which was implementing the observer

00:11.910 --> 00:14.820
design pattern for a cricket information.

00:14.850 --> 00:16.840
So we're going to create a new project.

00:17.160 --> 00:20.310
We're going to name this Our Observer solution

00:25.560 --> 00:26.880
and the first thing we're going to do

00:30.170 --> 00:32.990
is we're going to create our subject interface.

00:32.990 --> 00:34.420
Remember the subjects pretty simple.

00:34.430 --> 00:36.530
It just contains three methods.

00:36.530 --> 00:41.420
It's going to contain a register in on register and a notify all.

00:41.540 --> 00:44.770
We'll call this subject and it's going to be an interface

00:47.480 --> 00:53.540
and like I said it's just going to contain our three methods register observer on register observer

00:54.080 --> 00:58.800
which both take an observer as a parameter and then our notify all.

00:59.060 --> 01:00.720
Something like this.

01:01.460 --> 01:05.720
And this is gonna be implemented by the cricket data to communicate with observers.

01:05.750 --> 01:10.870
So we'll put a nice little comment as a reminder of what it's doing.

01:10.880 --> 01:14.240
Next thing we need to do is implement our Observer interface.

01:14.390 --> 01:21.320
So we're gonna create another new class and we're gonna call this or observer and this is gonna be an

01:21.320 --> 01:25.550
interface.

01:25.550 --> 01:31.280
And this is going to be the interface epitomized by all the classes that need to be updated whenever

01:31.280 --> 01:37.910
there is an update from the cricket data the concrete subject so we're gonna put a little reminder there

01:38.540 --> 01:43.130
and we're going to just add our update method here remember the update takes three parameters to pass

01:43.130 --> 01:54.200
the data the state data that's changing the runs the wickets and the overs something like that.

01:54.200 --> 01:58.190
Our next step will be to create the concrete subject.

01:58.190 --> 02:03.410
So we're gonna go back to our subject class and we're gonna say class cricket data

02:05.810 --> 02:09.060
implements subject.

02:09.090 --> 02:18.580
And this has to have member variables for runs wickets in overs and the overs can have division.

02:18.580 --> 02:20.780
So we're gonna make it a flow.

02:20.900 --> 02:26.280
We also need to have a list for all our observers we're going to make this an array list and it's going

02:26.280 --> 02:28.370
to contain our observer.

02:29.090 --> 02:35.840
And this is gonna be our Observer list and we're gonna make sure that we use the right observer.

02:35.840 --> 02:43.820
So we're going to delete that and then we need to implement our constructor which will just instantiate

02:45.080 --> 02:51.040
our array list by creating a new array list our register observer and our on register are very simple

02:51.040 --> 02:52.070
methods.

02:52.360 --> 02:54.680
They just add to the list or remove from the list.

02:54.850 --> 03:00.580
Usually you want to do a check before you add so that you don't add the same one.

03:00.580 --> 03:01.020
So we're safe.

03:01.020 --> 03:04.120
Register observer that takes an observer

03:08.020 --> 03:10.760
and we're just going to add it because we're just demonstrating the pattern.

03:10.760 --> 03:14.230
But normally you want to have a check here.

03:14.230 --> 03:23.620
So you don't observe twice we can say add and we can just say observer and then our UN register is pretty

03:23.620 --> 03:26.500
much just as easy.

03:26.500 --> 03:36.890
We override and we say public void on register observer taking an observer object.

03:37.740 --> 03:45.070
And in this one we just remove it from the list that we saw observer list that remove and we pass in

03:45.880 --> 03:50.010
the correct index would be observer list.

03:50.010 --> 04:00.920
The index of we've got to make sure we have the right method our variable name so we just say observer

04:00.920 --> 04:04.160
list index of.

04:04.160 --> 04:06.530
And then we say our Observer

04:10.900 --> 04:16.320
The last thing is we need to do is we need to implement the notify observers and then we'll add a couple

04:16.340 --> 04:25.020
get methods that notify observers are gonna go through the list and call the update method.

04:25.070 --> 04:32.890
So we say override and this one is gonna be public void notify observers.

04:32.890 --> 04:35.030
And this doesn't take any parameters.

04:35.030 --> 04:41.060
It just goes through our list and we're going to use an iterator to go through the list the array list.

04:41.270 --> 04:43.670
So we're going to do something like this.

04:43.850 --> 04:49.400
We're gonna say iterator observers it get the iterator call has next exit the loop and we don't have

04:49.460 --> 04:53.590
anymore get the next one and then just call update on it.

04:53.590 --> 05:01.880
So we say oh update when we pass and I remember verbals wickets runs wickets and overs

05:07.680 --> 05:10.950
so that's nice.

05:10.990 --> 05:18.700
Now we're going to add to get her methods so that we can get the latest runs and we can also get the

05:18.700 --> 05:26.590
wickets something like that and those are just private member variables if we ever need to get them

05:27.810 --> 05:33.960
which we'll probably do and our next method which is our data change method our trigger method.

05:33.960 --> 05:40.440
So we also had to get method for our overs and these are all gonna be private.

05:40.440 --> 05:42.070
So this will get all our overs.

05:42.300 --> 05:46.710
And again they're just hardcoded I hardcoded the whatever I don't want to have to have set methods for

05:46.710 --> 05:52.210
setting state variables the trigger method that we want to add that the client can call is the data

05:52.210 --> 05:53.930
change method.

05:54.070 --> 05:59.730
So we're gonna have public void data changed and this will be used to update.

05:59.770 --> 06:05.880
So what we'll do is we'll get the latest data and then we'll call notify observers.

06:05.880 --> 06:06.740
Very straightforward.

06:09.340 --> 06:11.380
So then we just need to call notify

06:13.910 --> 06:14.940
notify observers.

06:16.150 --> 06:23.710
And that will be the end to our cricket data class our concrete subject.

06:23.720 --> 06:26.020
Now let's create the concrete observers.

06:26.030 --> 06:33.320
We need to concrete observers 1 for average score display in 1 4 are here remember what we need that

06:33.320 --> 06:42.210
we need to current score display so we're gonna say class average score display.

06:42.500 --> 06:43.970
This is going to implement our observer

06:47.630 --> 06:54.680
and this is going to have a couple variables for our calculations for average score and they're going

06:54.680 --> 07:00.870
to be called the run rate in the predicted score we're going to calculate these in our update method.

07:01.040 --> 07:06.110
Right because now we're gonna get notified from the subject when things change and what it's going to

07:06.110 --> 07:09.110
do it's gonna pass the runs the wickets and the overs.

07:09.320 --> 07:15.170
So we get that state data that's passed that's changed we're going to then do our calculations on that

07:15.170 --> 07:21.210
data and we're going to call a display method the display method is just going to output the data so

07:21.210 --> 07:26.910
here we have our display math and all this does is print out the average score display with a nice line

07:26.910 --> 07:35.050
feeds and then the run rate in the predicted score pretty straightforward are other concrete observer

07:35.770 --> 07:38.000
is gonna be our current score display.

07:39.280 --> 07:40.630
So this is gonna be current

07:43.000 --> 07:49.990
score display and this isn't going to have to do any calculations it's going to implement the observer

07:51.180 --> 07:57.130
and it's going to have some member variables for what gets passed to its update method and then it's

07:57.130 --> 07:59.410
just gonna display those.

07:59.950 --> 08:05.920
So the update is gonna set the member data call display which will output the data to the screen so

08:05.920 --> 08:11.830
that we know our observed pattern is working because this would that would mean that this concrete observer

08:12.100 --> 08:15.370
was notified from the subject.

08:15.520 --> 08:21.580
So our display method similar to the other one just displaying our run wickets in overs versus our run

08:21.580 --> 08:24.160
rate in our predicted score.

08:24.160 --> 08:27.830
Last thing we need to do is we need to create our client we need to test this thing out.

08:28.060 --> 08:37.900
So we're gonna create a new client and this is going to have to create a couple observers for testing.

08:37.960 --> 08:40.060
So it's going to have to have a static void Main

08:45.700 --> 08:51.890
and it's going to create an average score display and a current score display used for our testing these

08:51.890 --> 08:52.890
are the observers.

08:52.900 --> 08:53.120
All right.

08:53.120 --> 08:58.360
These are the things that I get notified when we trigger a change.

08:58.370 --> 09:01.560
We also need to create our subject.

09:01.610 --> 09:09.920
So here we're going to pass the displays displays to the cricket data.

09:10.610 --> 09:11.530
So we'll have to register.

09:11.530 --> 09:13.850
So first we need to create our cricket data.

09:14.980 --> 09:20.380
And we're just going to call it cricket data whether it's a new cricket data then we're going to register.

09:20.380 --> 09:22.250
We're going to register.

09:22.370 --> 09:27.610
Register the display elements.

09:27.610 --> 09:32.580
And so we're gonna say cricket data that register observer.

09:32.610 --> 09:36.050
We're going to pass in our average score display.

09:36.050 --> 09:38.750
And we're also going to do it for our current score display.

09:38.750 --> 09:48.050
So cricket data that register observer current score display now that we're registered for changes we'll

09:48.050 --> 09:48.440
get them.

09:48.440 --> 09:56.850
So we can trigger a change by calling data changed so we can do something like that then we want to

09:56.850 --> 10:03.230
remove an observer and we want to see if that observer is going to get notified after we remove it.

10:03.270 --> 10:06.520
So remember the data change will print out some information.

10:06.570 --> 10:17.380
So now we'll also do a trigger to see if both observers get the data which is shown at the average score

10:17.380 --> 10:22.750
should not be displayed only on the first date of change we should see both averaging occur on the second

10:22.750 --> 10:23.290
day to change.

10:23.290 --> 10:25.670
We should only see current score display.

10:26.920 --> 10:38.040
So let's build this and try to run it to see if this works we'll run the client and we'll say run client

10:38.040 --> 10:46.970
dot main and the output is we first see the average score display just some values and we also see the

10:46.970 --> 10:48.890
current score display.

10:49.040 --> 10:50.560
We do not see the current discord.

10:50.570 --> 10:56.420
We do not see the average score display after the second day to change because we on registered the

10:56.420 --> 10:57.980
average score display.

10:57.980 --> 11:02.330
So this proves that our Observer worked and looks good.

11:02.330 --> 11:07.940
Now again understand that if between the subject and the observers the subject is the data it contains

11:07.940 --> 11:13.190
the register on register notify observer methods you'll always contain a list the list of observers

11:13.190 --> 11:22.080
as has the call update on and then we have our observers which will just have an update method and then

11:22.080 --> 11:25.170
it will have some of the same state data that is on the subject.

11:25.500 --> 11:30.230
And in this case the update method gets called it does a calculation and then it prints out some information.

11:30.740 --> 11:34.270
So that's the observer if you have any questions please let me know.

11:34.460 --> 11:35.240
Otherwise thank you.
