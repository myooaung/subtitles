WEBVTT

00:05.250 --> 00:10.090
Low let's talk about implementing the factory method design pattern.

00:10.090 --> 00:13.980
The first one we're going to talk about is really three ways to implement the pattern.

00:13.990 --> 00:18.580
First we're gonna talk about this abstract creator type of implementation.

00:18.580 --> 00:23.620
This is really the strictest implementation of the pattern the way that it's implemented is the creator

00:23.620 --> 00:31.330
class is an abstract class member the creator creates the actual instance the creator class implements

00:31.330 --> 00:37.100
the factory method what happens here is you create a subclass of the Creator class for each product

00:37.100 --> 00:41.330
type which contains an implementation of the factory method.

00:41.480 --> 00:46.010
Each product type will be the instance that you want to create.

00:46.100 --> 00:51.650
And so there may be many in the product is usually hidden behind an interface as well to use the factory

00:51.650 --> 00:57.380
method creating objects you simply specify an instance of that type of the type of product and invoke

00:57.380 --> 00:58.980
the factory method.

00:59.330 --> 01:06.580
So be very clear the subclass itself contains the factory method the disadvantage of this approach is

01:06.580 --> 01:11.450
that every new product has to subclass the creator class and implement its factory method.

01:11.450 --> 01:15.150
And when I show you the two other approaches you'll see how this is a disadvantage.

01:15.310 --> 01:20.800
You just have a lot of factory methods and you have a lot of subclasses but this is the strictest implementation

01:20.800 --> 01:21.250
of the pattern.

01:21.250 --> 01:27.250
This is really the strictest definition of the class diagram that I showed you earlier which is this

01:27.730 --> 01:33.700
creator factory method create an interface you have all these other concrete methods that implement

01:33.700 --> 01:38.790
the factory method and then you have a bunch of products that have a bunch of different crop Concrete

01:38.790 --> 01:41.780
Products and remove the product interface.

01:42.080 --> 01:48.540
The concrete creator the client will use the concrete creator pass creating an instance of whatever

01:48.540 --> 01:54.410
concrete creator needs created and then calling the factory method on that so here in this most strict

01:54.410 --> 01:58.930
implementation the product is the interface for the type of object that the factory method creates.

01:58.930 --> 02:03.740
See object that gets created the creator is the interface that defines the factory method.

02:03.860 --> 02:08.730
Any other methods implemented here are written on top rate on products produced by the factory method.

02:08.750 --> 02:12.010
So you can have different methods if you want in this interface.

02:12.050 --> 02:16.100
They're just kind of helper methods or things that you perform on the product that's actually created

02:16.610 --> 02:21.440
the creator classes are and without knowledge of the actual products that will be created.

02:21.620 --> 02:26.090
You don't have to know what actual products are created you just implement that factory method and you

02:26.090 --> 02:32.210
create a new instance based on the concrete creator instance clients will need to subclass their creator

02:32.210 --> 02:36.950
class to make particular concrete product only subclasses actually implement the factory method and

02:36.950 --> 02:41.480
create the products again mention that the actual products will be created it is decided purely by the

02:41.480 --> 02:43.270
choice of the subclass that's used.

02:43.370 --> 02:48.020
So what has going to happen is the clients are going to create a new instance of the concrete creator

02:48.560 --> 02:52.600
and that will know what product to create based on that concrete creator.

02:52.600 --> 02:59.790
For instance let's take a look at an example in intelligence that will identify exactly what I'm talking

02:59.790 --> 03:00.090
about

03:04.490 --> 03:13.640
spring up ontology and I'm going to create a simple project that will be named what it will be named

03:13.650 --> 03:20.430
abstract creator factory implementation abstract creator keep everything by default.

03:20.680 --> 03:31.770
Factory example abstract creator how about factory abstract creator example abstract creator.

03:31.770 --> 03:32.980
Example.

03:33.510 --> 03:38.340
Because going to multiple examples with different kinds of implementation a little bit of information

03:38.340 --> 03:44.850
on the application that we're going to demonstrate here is we're gonna create a shape hierarchy a factory

03:44.850 --> 03:50.610
method so that it can create different types of shapes and what's going to happen is the product in

03:50.610 --> 03:55.800
this case is going to be the interface for the type object that the factory method created.

03:55.890 --> 03:58.430
The creator is going to be interface that defines the factory method.

03:58.440 --> 03:59.230
We know that.

03:59.390 --> 04:04.380
So the product in this case would be shape interface products or shape products will create a shape

04:04.380 --> 04:07.320
interface and then concrete classes and implement the shape interface.

04:07.320 --> 04:12.570
Those are the products we then get to create an abstract class name shape factory and subclasses that

04:12.570 --> 04:13.620
extend the shape factor.

04:13.620 --> 04:15.070
Those are the creators.

04:15.450 --> 04:22.300
Each subclass will implement the factory method and then lastly we create our clients who will use a

04:22.300 --> 04:26.170
subclass of the shape factory to create a specific shape object.

04:26.170 --> 04:28.240
Let's start by creating our shape interface.

04:31.660 --> 04:35.010
And this is just connecting one method we'll just say it's the draw method

04:38.670 --> 04:39.790
boy draw.

04:39.810 --> 04:42.930
We're then going to create a bunch of classes that implement the shape interface.

04:42.930 --> 04:45.020
These are all products right.

04:45.030 --> 04:51.710
So we'll create a rectangle class we'll create a square class and we'll create a circle.

04:51.710 --> 04:57.680
So here is our rectangle class rectangle implements shape implements the draw method.

04:57.680 --> 05:03.040
And again like most implementation in this classes it's not gonna contain any logic it's just going

05:03.050 --> 05:04.400
to display some output.

05:04.400 --> 05:08.090
So here we're just saying inside our draw method.

05:08.090 --> 05:14.050
The other two classes and implement this interface again are the square and the circle.

05:14.220 --> 05:15.880
These are different types of shapes.

05:16.040 --> 05:19.830
Again representing the product these are the instances that are going to be created.

05:19.830 --> 05:23.040
So square implements shape and again draw just.

05:23.050 --> 05:30.000
I'll put some hardcoded data and circle implements shape and just for sake of simplicity I'm putting

05:30.000 --> 05:31.350
all these classes in the same file.

05:31.350 --> 05:36.570
Now typically when you write Java code you put each class on a separate file but just to make things

05:36.570 --> 05:42.030
more efficient I'm putting my novel in the same file again an interface shape and then three classes

05:42.030 --> 05:45.420
and implement the interface.

05:45.420 --> 05:50.550
Now we'll actually implement our factory and for this I'll create a new class we'll just say new Java

05:50.550 --> 05:54.150
class we'll call this abstract shape factory

05:57.320 --> 06:00.700
and this will contain the abstract shape factory interface.

06:00.810 --> 06:03.380
It'll be an abstract class actually.

06:03.570 --> 06:07.410
And it will contain the factory method.

06:07.410 --> 06:13.800
So a public class abstract shape factory will have a protected abstract math 3 method because our factory

06:13.800 --> 06:23.590
method because remember we're using classing here and it's going to return a shape which is a reference.

06:23.790 --> 06:30.210
And she's going to call it factory method for clarity and then we're also gonna have a default behavior

06:30.840 --> 06:37.420
method which is going to return the shape just makes it easier to return the actual instance.

06:37.470 --> 06:39.330
So we'll just say return.

06:39.330 --> 06:40.110
Factory method.

06:40.110 --> 06:42.180
This will create the call the factory method.

06:42.180 --> 06:44.600
Create the instance and return it.

06:44.910 --> 06:50.580
You can have other methods here if you want wanted other helper methods or other methods specifically

06:50.580 --> 06:54.560
for commonality of all sharp objects.

06:54.690 --> 06:59.420
Now we need to create our subclasses for the abstract factory that implements the factory method.

06:59.430 --> 07:06.070
This is going to be this is gonna be our rectangle factory our square factory inner circle factory.

07:06.140 --> 07:12.420
We're just gonna implement the factory method by returning to new instance of particular concrete product.

07:12.480 --> 07:15.180
So here our first one will be our rectangle.

07:15.180 --> 07:19.120
We'll just put it in a default class.

07:19.160 --> 07:24.330
It's going to extend the exact shape factory implement this abstract fear factory method just by returning

07:24.330 --> 07:25.770
a new Rectangle.

07:25.770 --> 07:29.650
Same is going to happen for the circle and square right.

07:29.670 --> 07:35.130
So we'll just copy and paste and just return different types of objects but the specific factory return

07:35.130 --> 07:37.510
a specific product.

07:37.510 --> 07:40.920
All right we'll call it square factory

07:46.500 --> 07:48.900
square factory and that is gonna return a new square

07:53.280 --> 07:59.260
and our circle factory return in your circle.

07:59.730 --> 08:06.060
Pretty straightforward but what you should notice in this strict implementation is that you need a subclass

08:06.600 --> 08:10.260
for every single product to implement its own factory method.

08:10.260 --> 08:13.410
So you end up creating a lot of subclasses.

08:13.560 --> 08:17.850
We now need to create the client so say nuclear do Java class.

08:17.860 --> 08:19.250
We'll just call a client.

08:19.270 --> 08:25.600
This will contain the main method that actually creates use of the factory to create instances so we'll

08:25.600 --> 08:32.930
add a main method.

08:32.930 --> 08:40.940
And what happens here is we first need to create different types of products so either using the different

08:40.940 --> 08:42.230
factory methods.

08:42.230 --> 08:50.670
So if we want to get an object of circle and then called straw method we can use the circle factory.

08:50.670 --> 08:51.260
All right.

08:51.260 --> 09:00.560
So let's get an object of circle and we just can create a shape reference say shape 1 and we have to

09:00.560 --> 09:04.250
create a new instance of the factory for the product that we want which would be circle factory

09:06.860 --> 09:13.070
and what we want to do is call the get shape method which will return the instance because remember

09:13.070 --> 09:17.850
we added that help her get shape which we'll call the factory method.

09:17.920 --> 09:22.720
So the client here doesn't know anything about the factory method it just says get shape than on shape

09:22.720 --> 09:32.710
one we can actually say shape one dot draw.

09:34.100 --> 09:36.100
See that helps.

09:36.100 --> 09:40.860
Now I can see the draw method and so we would do the same for other types of shapes.

09:41.200 --> 09:42.150
If we want to get a lot.

09:42.250 --> 09:47.890
An object of rectangle we would call the rectangle factory and we would call the draw method for that.

09:47.990 --> 09:50.370
So let's do that.

09:50.400 --> 09:52.060
So there we go.

09:52.060 --> 09:55.910
We called Get shape on our rectangle factory.

09:55.930 --> 10:01.500
We just have another syntax error we want to make sure we have the braces and there we go.

10:01.690 --> 10:05.170
So that we'll call that that will create a new insta rectangle and call the drama.

10:05.230 --> 10:08.470
And then we can also do it for our last factory.

10:08.470 --> 10:13.810
So this is the most strict implementation and what you'll notice here is in the client you have to create

10:13.810 --> 10:21.040
a new subclass instance for every single product and so in turn that means that all of your factory

10:21.040 --> 10:27.540
methods have to be in a subclass rectangle factory square factory circle factory that's the most strictest

10:27.570 --> 10:33.140
implementation and you'll notice that the factory method is hidden behind this gate shape so the client.

10:33.150 --> 10:35.250
All it does is know about its shape.

10:35.340 --> 10:41.320
So if we were to build and run this we want to make sure our class is abstract

10:45.070 --> 10:48.890
and now we're gonna compilation how to fix couple errors related to make sure that those methods are

10:48.890 --> 10:51.080
protected because they're in the abstract class.

10:51.200 --> 10:59.180
So when we run this and what you see is output is each one of the correct instances methods gets invoked

11:00.100 --> 11:02.030
right through polymorphism essentially.

11:02.030 --> 11:05.530
So inside circle draw inside rectangle drawn inside squared drawer.

11:05.780 --> 11:10.940
Again the client is using the factory to create an instance of a specific product which is the circle

11:11.480 --> 11:17.790
using the subclass and also because its shape on it will call even though it's a reference through polymorphism.

11:17.960 --> 11:19.430
It will call the right instance.

11:19.550 --> 11:23.600
So it ends up calling for each abstract shoe factory.

11:23.600 --> 11:31.050
The specific factory method which will return a specific product type and then the get shape is the

11:31.050 --> 11:32.280
way that it calls it.

11:32.400 --> 11:38.250
And then lastly when you call the draw method it actually just displays some output to verify that you're

11:38.250 --> 11:40.370
actually creating the correct product.

11:40.380 --> 11:43.890
So this is the most strict implementation of the factory method.

11:43.890 --> 11:49.860
This idea of the subclasses and creating a subclass that implements every single factory method let's

11:49.860 --> 11:54.360
look at one more example and then I'll take a look at the different ways you can implement the factory

11:55.140 --> 11:59.360
using a single subclass and then also using a static method.

11:59.370 --> 12:01.550
But let's look at one more example.

12:01.660 --> 12:03.390
So want to go back to the slides at this point

12:08.380 --> 12:13.960
so let's consider a framework for applications that can present multiple documents to the user to key

12:13.960 --> 12:18.790
abstractions in this framework are the classes application which is the creator and document which is

12:18.790 --> 12:21.240
the product both of these classes are abstract.

12:21.250 --> 12:28.150
Just like in our example clients will have subclass them to realize their application specific implementations.

12:28.150 --> 12:33.820
If we create a drawing application we'll define class as drawing application and drawing document those

12:33.820 --> 12:40.000
will be the concrete classes of the creator in the product the creators responsible for managing the

12:40.000 --> 12:42.490
documents they'll create them as required.

12:42.490 --> 12:44.660
So the creator implements the factory method.

12:44.860 --> 12:48.420
It only knows when a new document should be created not what kind of document to create.

12:49.880 --> 12:50.010
Right.

12:50.060 --> 12:55.820
That's the high level abstract class the framework must instantiate classes but it only knows about

12:55.820 --> 13:01.150
abstract classes which it cannot instantiate the factory method pattern will capsule late the knowledge

13:01.150 --> 13:07.920
of which document subclass to create and moves this knowledge out of the framework application subclasses

13:07.920 --> 13:13.710
redefine the abstract create document operation on application to return the appropriate document subclass

13:13.770 --> 13:17.270
well just like we did pretty much the exact same thing.

13:17.280 --> 13:19.750
The creators and Ma example were shapes.

13:19.890 --> 13:25.650
I'm sorry the products were shapes the creators were the factory methods abstract shape circle factory

13:25.650 --> 13:32.160
or or shape factory or erect or sorry rectangle factory or or square factory.

13:32.160 --> 13:37.380
Once an application subclasses instantiated it can then instantiate application specific documents without

13:37.380 --> 13:38.280
knowing their class.

13:39.030 --> 13:43.610
So we call it create document the factory method because it's responsible for manufacturing an object

13:43.650 --> 13:48.600
can hide that behind a get method if you want like I did but you can also just call the factory method

13:48.600 --> 13:50.190
directly and that's it.

13:50.190 --> 13:53.060
This is the strict implementation of the factory method.

13:53.070 --> 13:54.960
Let's look at a couple other implementations.
