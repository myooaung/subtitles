WEBVTT

00:05.280 --> 00:06.230
Hello and welcome.

00:06.400 --> 00:10.740
In this lecture I want to provide an overview of how you can implement the Singleton design pattern

00:12.220 --> 00:14.080
to implement the Singleton pattern.

00:14.080 --> 00:18.610
There are different approaches and we're going to talk about multiple approaches but all of these approaches

00:19.000 --> 00:21.680
have the same following concepts.

00:21.790 --> 00:26.560
There's always gonna be a private constructor to restrict instantiation of the class from other classes.

00:26.560 --> 00:27.840
This is a must.

00:27.930 --> 00:30.310
Your constructor is gonna be private by making it private.

00:30.310 --> 00:35.400
No clients will be able to create an instance of that class directly using the new operator.

00:35.410 --> 00:40.220
So in all of the approaches that I'm going to talk about the constructor must be private.

00:40.240 --> 00:45.040
You're also going to have a private static variable of the same class that is the only instance of the

00:45.040 --> 00:46.120
class.

00:46.120 --> 00:47.150
And we'll see how that is done.

00:47.170 --> 00:49.260
But you basically have a private member variable.

00:49.630 --> 00:54.740
You're also always going to have a public static method that returns the instance of the class.

00:54.760 --> 00:59.380
This is the global access point for the everybody else in the world to get the instance of the singleton

00:59.380 --> 01:00.500
class.

01:00.580 --> 01:03.010
These are always common to all approaches.

01:03.010 --> 01:09.280
Having said that there are many different ways you can implement the Singleton pattern and we're going

01:09.280 --> 01:10.670
to talk about those.

01:10.670 --> 01:15.620
This is the basic class diagram for the Singleton that represents just what I talk to you about on the

01:15.620 --> 01:17.690
last slide.

01:17.750 --> 01:20.510
The Singleton is the name of the design pattern.

01:20.510 --> 01:26.060
We have two member variables a static instance which is private and then we have some Singleton data

01:26.870 --> 01:30.920
which will have other data member variables for the singleton.

01:30.920 --> 01:33.700
We then have a public static get instance method.

01:33.860 --> 01:39.230
This will retrieve the static instance whether it's been created before or not.

01:39.230 --> 01:44.240
We have a singleton operation those can just be operations inside the class and maybe get Singleton

01:44.240 --> 01:47.310
data that returns other member variables right.

01:47.350 --> 01:52.660
Here's a little note that the Singleton data gets static instance will return the actual instance the

01:52.660 --> 01:56.960
static it instance let's look at some of the different approaches.

01:57.050 --> 02:01.130
I'm only going to talk about five different approaches when implementing this pattern because there

02:01.130 --> 02:03.030
are five different ways you can implement it.

02:03.080 --> 02:08.620
It all depends on the situation and what you're looking to accomplish.

02:08.690 --> 02:13.070
The first way you can implement it is you can use this lazy evaluation approach.

02:13.070 --> 02:17.990
There are some issues with lazy evaluation approach mainly that it's not thread safe.

02:18.140 --> 02:23.120
So if you're doing any kind of parallel processing you can have issues where you may not actually get

02:23.120 --> 02:24.150
a single instance.

02:24.230 --> 02:28.580
There could be a race condition so you want to use that lazy evaluation approach.

02:28.580 --> 02:33.140
If you are not worried about multiple threats if you have a system where you never running multiple

02:33.140 --> 02:36.260
threads then you can use the lazy evaluation approach.

02:36.440 --> 02:40.700
Although this is not the recommended approach because most systems while multiple threads at some point

02:41.020 --> 02:46.190
and you should be safe but I will tell you how you can implement the Singleton using this lazy evaluation

02:46.190 --> 02:47.100
approach.

02:47.110 --> 02:50.990
I'll then move on and I'll tell you how you can do a synchronised approach.

02:50.990 --> 02:55.220
This is basically the thread safe approach to implementing the singleton.

02:55.220 --> 02:59.720
This is used when performance is not critical to your application but it is multi threaded so you do

02:59.720 --> 03:01.680
need some safety there.

03:01.710 --> 03:07.640
OK it's straight one state more forward and effective but again it's not optimal in terms of there is

03:07.640 --> 03:13.700
some performance it's so then we can have another approach which increases the performance of the thread

03:13.730 --> 03:19.790
saying this is the double checked locking principle approach its thread safe and it's also better performing

03:20.510 --> 03:22.790
so it increases performance from the synchronised approach.

03:22.790 --> 03:26.190
This is the third approach that we'll talk about when implementing the Singleton.

03:26.540 --> 03:29.180
The fourth approach is the eager evaluation approach.

03:29.180 --> 03:32.390
This is sort of the opposite of the lazy evaluation approach.

03:32.390 --> 03:37.480
If your application always creates and uses an instance of the singleton you'll want to use this approach.

03:37.520 --> 03:42.020
It does not use a lot of resources which is an advantage it's thread safe.

03:42.020 --> 03:47.030
So if you have multiple threads you're good to go in the instances created even though the client application

03:47.060 --> 03:49.070
might not be using it.

03:49.140 --> 03:55.350
That's one down downside to this approach is that the incidence is always created and there may be times

03:55.350 --> 03:56.770
when you're not going to use it.

03:56.790 --> 04:00.780
So now the fifth approach that I want to talk about which is an improvement on the C your evaluation

04:00.780 --> 04:03.580
approach is this bill Pugh approach.

04:03.840 --> 04:05.640
This has this is thread safe.

04:05.700 --> 04:07.320
This is high performance.

04:07.320 --> 04:10.650
It ensures that the instance is only created if a client needs it.

04:10.710 --> 04:12.620
So that's a good good advantage.

04:12.660 --> 04:16.720
It creates a singleton class using an inner static helper class.

04:16.710 --> 04:19.670
It's regarded as the standard method to implement singletons in Java.

04:19.700 --> 04:22.940
So this is the approach that I'm going to recommend to use.

04:22.950 --> 04:26.490
This is the approach that you're going to need to you and your challenge and your assignment.

04:26.490 --> 04:28.490
And that's what tried the demonstration for.

04:28.500 --> 04:33.540
But you should be familiar with the other approaches because the other approaches will apply during

04:33.540 --> 04:38.280
certain situations and you always want to have all the knowledge at your disposal so that you can pick

04:38.700 --> 04:42.360
the right one for the right situation.

04:42.570 --> 04:46.650
So there's five approaches we're going to discuss each one I'm on to show you how to implement them

04:47.040 --> 04:49.350
and identify the advantages not advantages.
