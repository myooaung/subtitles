WEBVTT

00:05.470 --> 00:06.530
Hello and welcome.

00:06.630 --> 00:11.950
In this lecture on to provide an overview of how you go about implementing the visitor pattern I specifically

00:11.950 --> 00:15.400
talk about some of the objects in the class diagram.

00:15.490 --> 00:18.520
So here at this kind of a big class diagram there's a lot going on.

00:18.520 --> 00:24.200
We have two separate separate pieces here we have the visitor interface and then we have concrete visitors

00:24.910 --> 00:28.140
and then we also have the object structure of matter that's collection.

00:28.340 --> 00:34.340
And then we have elements in each element is gonna need to have an accepted method that takes a visitor

00:34.430 --> 00:35.120
as a parameter.

00:35.120 --> 00:40.760
Then we have our concrete elements and the concrete elements will have that except method and take the

00:40.760 --> 00:44.270
visitor and what it will do is it will call the visitor method up here.

00:44.270 --> 00:49.640
So this is how you add additional functionality to an element without messing with the object structure

00:49.700 --> 00:55.850
or the element itself really it just calls the accept and it calls the visitor accept method when the

00:55.850 --> 00:56.930
visitors pass to it.

00:57.770 --> 01:01.390
So let's look at the participants on the visitor up here.

01:01.400 --> 01:02.150
It's kind of separate.

01:02.150 --> 01:07.190
The client uses both the visitor and the collection it's going to go through the collection in each

01:07.190 --> 01:12.590
element and then call except on it by passing a visitor into it but the visitor is used to declare the

01:12.590 --> 01:16.140
visit operations for all types of visit to all classes.

01:16.310 --> 01:23.250
The operations name and the signature identifies the class that sends the visit request to the visitor.

01:23.340 --> 01:29.830
So you're going to see in each one of these visit methods there's going to be a concrete element a.

01:30.030 --> 01:35.580
So there's gonna be a surplus of the element itself so this lets the visitor determine the concrete

01:35.580 --> 01:37.920
class of the element being visited.

01:37.920 --> 01:44.300
The visitor can then access the element directly through its particular interface the other participants

01:44.300 --> 01:46.670
the concrete visitor down in here.

01:46.670 --> 01:49.700
This implements each method declared by the visitor.

01:49.700 --> 01:54.950
Each operation implements a fragment of the algorithm defined for the corresponding class of the object

01:54.950 --> 01:55.610
in the structure.

01:55.610 --> 02:01.190
This is really where the additional implementation for the object structure in each element comes in.

02:01.190 --> 02:04.290
It provides the context for the algorithm and stored its local state.

02:04.340 --> 02:11.430
The state often accumulates results during that reversal of the structure and we'll see that with one

02:11.430 --> 02:17.520
of the examples that I provide where you're calculating the cost of each element the element itself.

02:17.520 --> 02:19.340
This will have an accepted method inside of it.

02:19.350 --> 02:25.020
It takes a visitor X an argument the entry point which enables an object to be visited by the visited

02:25.020 --> 02:26.400
visitor object.

02:26.410 --> 02:26.890
Right.

02:26.940 --> 02:30.840
You're gonna go through the object structure you're going to get each element and then you're gonna

02:30.840 --> 02:35.940
pass on a visitor to each element so that you can visit it and have the new functionality the concrete

02:35.940 --> 02:40.950
element implements and accept method that takes a visitor as an argument the visitor object will be

02:40.950 --> 02:45.060
passed to the object using the accepted method.

02:45.080 --> 02:48.250
We also have the object structure remember this is the collection of the list.

02:48.440 --> 02:51.650
It can enumerate elements control or traverse them.

02:51.860 --> 02:57.340
It may provide a high level interface to allow the visitor to visit its elements.

02:57.420 --> 03:03.300
It may also be a composite or collection such as a list or assets that can also be an object structure

03:03.300 --> 03:06.420
make it a made up of other objects a composite.

03:06.420 --> 03:11.640
The client is a consumer of the classes of the visitor design pattern and has access to the data structure

03:11.640 --> 03:17.890
objects and can instruct them to accept the visitor to perform the appropriate processing all right.

03:17.900 --> 03:21.550
Let's look at a sequence diagram that can show you a little more detail.

03:21.590 --> 03:26.090
We have our object structure a list or a composite.

03:26.200 --> 03:28.020
We have our concrete element.

03:28.040 --> 03:28.930
All right we're gonna create.

03:28.930 --> 03:34.420
We're gonna go through the object structure we're gonna call except on each concrete element and the

03:34.420 --> 03:35.180
concrete element.

03:35.200 --> 03:39.460
We're gonna pass it a visitor inside the concrete element and just go to call the right visitor method

03:40.030 --> 03:42.090
and do some additional functionality.

03:42.340 --> 03:48.160
We're gonna do that for all of the concrete elements and a lot of times the concrete visitors will keep

03:48.160 --> 03:54.320
some kind of running tally of each element and then you just keep doing that over and over through the

03:54.320 --> 03:55.280
iterations.

03:55.280 --> 04:00.140
So the client creates a concrete visitor object and then versus the object structure either the commander

04:00.140 --> 04:05.810
or the collection visiting each element with the visitor by calling and except on the concrete element

04:05.810 --> 04:11.360
and passing in that visitor when element is visited it calls a visitor operation that corresponds to

04:11.360 --> 04:17.780
its class polymorphism the element supplies itself as an argument to this operation to let the visitor

04:17.780 --> 04:24.820
access at state so that's a lot to take in we're gonna go through a concrete example but to summarize

04:25.030 --> 04:32.140
this pattern will create an external class that uses data in the other classes the external class is

04:32.470 --> 04:38.410
the visitor the core of this pattern is that visitor interface it defines that visit operation for each

04:38.410 --> 04:40.620
type of concrete element in the object structure.

04:40.720 --> 04:46.360
So you're going to have many visit operations for each element if each if your structure has ten different

04:46.360 --> 04:52.600
objects you're going to have ten different visit methods that take each object the concrete visitor

04:52.600 --> 05:01.150
implements the operations defined in the visitor interface mainly the accept method it will store local

05:01.150 --> 05:07.300
state typically as traverses the set of elements maybe to do like a calculation or total if you're summing

05:07.300 --> 05:15.390
up the total of a price for example for many elements the element interface simply defines and accept

05:15.390 --> 05:21.370
the method to allow the visitor run some action over that element the concrete element will implement

05:21.370 --> 05:27.580
this accept method and it will be passed into the visitor and then call the visitor method visitor operations

05:27.580 --> 05:34.360
are controlled in a unified manner also this pattern allows you to add operations to a composite structure

05:34.420 --> 05:37.170
or collection without changing the structure itself.

05:37.310 --> 05:41.950
Right we have no effect on that collection if it's an array list and it has methods for the array list

05:42.340 --> 05:48.580
we don't affect the array list it's very easy to add operations that depend on the components of complex

05:48.580 --> 05:54.010
objects when using this pattern you can define a new operation over an object structure simply by adding

05:54.010 --> 06:01.420
a new visitor for that element a visitor gathers related operations and separates unrelated ones it's

06:01.420 --> 06:06.970
all localized in the visitor unrelated sets of behavior are partitioned in their own visitor subclasses

06:07.630 --> 06:12.520
it simplifies both the classes defining the elements and the algorithms defined in the visitors loose

06:12.520 --> 06:20.450
coupling less dependencies easier to maintain class encapsulation may need to be compromised when visitors

06:20.450 --> 06:26.630
are used if the existing structure is really complex the traversal mechanism becomes complex and so

06:26.630 --> 06:31.820
you may break encapsulation you got to consider that or you may need to access some data in the visitor

06:32.790 --> 06:37.970
the drawback of this pattern is that we should know the return type of visit methods at the time of

06:37.970 --> 06:43.760
designing you have to know that otherwise we'll have to change the interface and all of its implementations

06:44.320 --> 06:48.050
and that's a drawback because you kind of know a little more than you need to or you shouldn't need

06:48.050 --> 06:48.900
to.

06:48.920 --> 06:53.450
Another drawback is that if there are too many implementations of the visitor interface it makes it

06:53.450 --> 07:00.510
hard to extend because it's just really really big so that's a quick overview of this pattern.

07:00.620 --> 07:02.900
We're going to go through a concrete example.

07:02.900 --> 07:10.460
We'll have a basically a shopping cart that can calculate cost of all the items in a structure object

07:10.460 --> 07:11.630
structure collection.

07:11.630 --> 07:11.990
Thank you.
