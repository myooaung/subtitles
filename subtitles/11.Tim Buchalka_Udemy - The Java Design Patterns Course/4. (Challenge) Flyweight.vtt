WEBVTT

00:05.320 --> 00:06.530
Hello and welcome.

00:06.660 --> 00:13.020
You guys up for another challenge because now this challenge is gonna be all about the Flyaway so let's

00:13.020 --> 00:16.610
write an application that simulates the popular game counterstrike.

00:16.680 --> 00:23.310
If you guys are familiar with this it's really just a sort of like a gun shooting game terrorists versus

00:23.300 --> 00:24.810
counter terrorists.

00:24.900 --> 00:31.080
Hopefully no one is offended by this is just a nice example of a nice game where you can reuse players

00:31.410 --> 00:37.920
mentioned earlier that one of the examples of using the flyway is gaming where you can reuse players

00:37.920 --> 00:39.650
so you don't create so many objects.

00:39.690 --> 00:43.770
So this is just going to simulate this game we're going to implement the creation of terrorists and

00:43.770 --> 00:50.210
counter terrorist objects using the flyway pattern so you're going to need to create two classes a terrorist

00:50.250 --> 00:54.360
and a counterterrorist whenever a player asks for a weapon.

00:54.410 --> 01:00.580
We assign him the best weapon in the mission the terrorist task is to plant a bomb while the counter

01:00.580 --> 01:03.260
terrorists have to diffuse the bomb.

01:03.270 --> 01:09.000
We want to reduce the object count for each player and we'll use the flyway pattern to achieve this.

01:09.090 --> 01:11.540
We have any number of players playing this game.

01:11.610 --> 01:16.320
If we do not file the flyway design pattern then we will have to create any number of objects one for

01:16.320 --> 01:22.300
each player using the fly a pattern we only have to create two objects one for the terrorists and another

01:22.300 --> 01:23.700
for the counter terrorists.

01:23.800 --> 01:29.830
We can then reuse them again and again again and whenever acquired it's important to identify the intrinsic

01:29.920 --> 01:32.440
and extrinsic state when using a fly pattern.

01:32.440 --> 01:33.070
We know this.

01:33.070 --> 01:36.760
I've emphasizes quite a bit for our application.

01:36.760 --> 01:40.570
The task is an intrinsic state for both types of players.

01:40.600 --> 01:44.380
It's always the same for terrorists and always the same for counterterrorist.

01:44.440 --> 01:49.510
We can have some other states like their color or any other properties which are similar for all the

01:49.510 --> 01:53.160
terrorists counterterrorist for our application.

01:53.160 --> 01:55.590
Weapon is an extrinsic state.

01:55.680 --> 02:02.220
Each player can carry any weapon of his or her choice weapon needs to be passed as a parameter by the

02:02.220 --> 02:04.320
client itself.

02:04.370 --> 02:09.790
So here's a possible design the Flyaway interface would be the player that's the object that we want

02:09.790 --> 02:11.640
to share as much as possible.

02:11.650 --> 02:19.040
This is also the optical we would set the extrinsic data are two concrete concrete fly weights which

02:19.040 --> 02:19.880
are gonna be shared.

02:19.880 --> 02:23.210
Are the terrorists and the counter terrorists all right.

02:23.210 --> 02:25.190
Task is intrinsic data.

02:25.190 --> 02:27.290
Weapon is extrinsic data.

02:27.320 --> 02:30.020
Weapon usually do not store as a member variable.

02:30.260 --> 02:32.410
Usually you use it inside of a method.

02:32.600 --> 02:38.340
But again for our purposes we want to just demonstrate that we're using the extrinsic data.

02:38.480 --> 02:43.880
And so we're going to assign it and then we can print it out just like what in my example.

02:43.910 --> 02:47.990
But again typically the weapon is not going to be a member variable the weapon would just be passed

02:47.990 --> 02:49.330
and parameters and stored.

02:49.340 --> 02:56.450
So you'd have multiple extrinsic data parameters or methods where you could use that data.

02:56.450 --> 02:59.000
You're also going to need to create your factory it's pretty straightforward.

02:59.000 --> 03:05.090
It's just you can pass a parameter that can be a concrete factory it will store things on a hash map

03:05.120 --> 03:10.160
and you can have a guitar player which returns the player the shared player or new player.

03:10.160 --> 03:16.040
And then we have the client which could be the task that Counter Strike client and this will have a

03:16.040 --> 03:26.140
player type in a weapon and also methods for calling the assigned weapon and calling the mission.

03:26.440 --> 03:30.070
So this isn't a great class description here.

03:30.070 --> 03:35.800
Really the client here can just have a bunch of player types either terrorists or counter types terrorists

03:36.250 --> 03:37.570
a bunch of weapons.

03:37.660 --> 03:41.680
And what this would do is they would just create a bunch of players maybe like in a for loop maybe create

03:41.680 --> 03:47.170
like 10 players they would get the players to the player factory and you know either you can write a

03:47.170 --> 03:52.420
random function method to get random players either terrorists or counter terrorists they would then

03:52.510 --> 03:59.800
assign weapons for those terrorists and then you could call a mission on the player to send the player

03:59.800 --> 04:02.100
on a mission right.

04:02.120 --> 04:10.040
But the mission and the the mission here would be on the actual player itself so it would be in the

04:10.040 --> 04:13.330
Flyaway interface which would be a terrorist or counterterrorist.

04:13.400 --> 04:17.060
So the mission is not located in this context right class.

04:17.090 --> 04:17.320
Right.

04:18.570 --> 04:23.640
The assigned weapon in the mission are being used but they're actually in the interface up here implemented

04:23.640 --> 04:24.180
down in here

04:27.390 --> 04:32.580
and you can store this state data on the client if you want but that's usually not a great idea either

04:33.580 --> 04:39.940
but that's the gist of it again is we want to create the flyweight interface extrinsic data for assigning

04:39.940 --> 04:48.100
a weapon and in an a method just called Mission which can you can call in the client because the missions

04:48.100 --> 04:56.360
are going to be the same right and the the two concrete fly weights are gonna have attributes for a

04:56.360 --> 05:01.840
task because that's intrinsic attributes we are going to store the extrinsic state because we're gonna

05:01.850 --> 05:07.310
have an assigned weapon method and then when we do our mission call our mission will display the weapon

05:07.310 --> 05:13.400
that we're using and that will show us that we can actually have very similar objects shared but have

05:13.400 --> 05:16.250
very in just little little types of data.

05:16.610 --> 05:19.910
So that's your task possible output.

05:20.060 --> 05:22.150
Again we created the counterterrorist.

05:22.160 --> 05:24.580
We then have a counterterrorist with a particular weapon.

05:24.890 --> 05:29.320
And the task is always you know maybe the same then we create terrorists.

05:29.370 --> 05:32.910
We have different weapons and the same tasks.

05:32.910 --> 05:38.340
We have other counterterrorist with different weapons in the same tasks I'll provide a solution in the

05:38.340 --> 05:40.340
LAX lecture and how you can implement this.

05:40.540 --> 05:42.820
But good luck and please let me know if you have any questions.

05:42.820 --> 05:43.780
Q and A thank you.
