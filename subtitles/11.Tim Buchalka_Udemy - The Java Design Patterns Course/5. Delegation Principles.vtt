WEBVTT

00:05.180 --> 00:06.680
Hello and welcome back.

00:06.680 --> 00:11.150
The design principle that I want to talk about now is delegation.

00:11.150 --> 00:17.390
This is one you'll see quite a bit in your design patterns.

00:17.710 --> 00:23.620
So to start off delegation is the concept of one class delegating its behavior in other classes about

00:23.620 --> 00:25.510
responsibility.

00:25.510 --> 00:27.210
You don't want to do all the stuff by yourself.

00:27.250 --> 00:32.220
So you say hey this other class is going to help me out when you delegate you're simply calling up some

00:32.220 --> 00:35.460
class which knows what must be done right.

00:35.460 --> 00:41.310
This definitely is going to increase your cohesiveness because now each class has a distinct responsibility.

00:41.580 --> 00:44.060
You don't really care how it's actually going to get complete.

00:44.070 --> 00:45.600
Again there's a sense to.

00:45.690 --> 00:50.340
All you care about is that the class you're calling knows what it needs to do.

00:50.400 --> 00:55.740
Delegates can be viewed as a relationship between objects where one object forward certain method calls

00:55.740 --> 00:58.420
to another object called call its delegate.

00:58.770 --> 01:07.260
And you see this again in many many programming languages IOW hand Objective C uses this principle quite

01:07.260 --> 01:09.030
a bit with delegation and delegates

01:12.390 --> 01:15.040
delegation is an extreme example of object composition.

01:15.090 --> 01:17.900
So we just understood what object composition is.

01:18.000 --> 01:22.750
It shows that you can always replace inheritance with object composition as a mechanism for code reuse.

01:22.800 --> 01:26.960
It's really demonstrating this principle that we just talked about.

01:27.450 --> 01:32.760
It means that you can use another object of another class as an instance variable and you can forward

01:32.760 --> 01:38.350
messages to use that instance to the instance communicating with the instance.

01:38.590 --> 01:44.260
It's better than inheritance for many cases it makes you think about each message forward the instances

01:44.430 --> 01:46.980
of a known class rather than a new class.

01:47.020 --> 01:50.000
It does not force you to accept all the methods of the superclass.

01:50.050 --> 01:55.450
We talked about that being a disadvantage in tightly coupled you can provide only the methods that really

01:55.450 --> 01:56.980
make sense.

01:57.010 --> 02:04.780
So delegation is a good concept in that it also uses composition other advantages.

02:04.810 --> 02:10.390
The main one is runtime flexibility that makes it easy to compose behaviors at runtime and to change

02:10.390 --> 02:12.720
the way they are composed.

02:12.750 --> 02:17.150
It's a good design choice only when it simplifies more than it complicates like everything.

02:17.160 --> 02:21.830
If you overuse it or use it incorrectly it can definitely complicate things.

02:21.840 --> 02:26.940
So how effective it will be definitely depends on the context and how much experience you have with

02:26.940 --> 02:27.580
it.

02:27.600 --> 02:32.800
It works best when it's used with design patterns and that's why we talk about it.

02:32.940 --> 02:37.740
Some of the design parents that are going to use delegation the same pattern what happens here is the

02:37.740 --> 02:44.660
state will delegate request to another object the state object that represents its current state strategy

02:45.470 --> 02:51.680
design pattern would delegate a specific request to an object that represents a strategy for carrying

02:51.680 --> 02:52.310
out the request.

02:52.310 --> 02:57.920
So what you see with the strategy is again you see this runtime flexibility where things happen dynamically

02:58.490 --> 02:59.000
visitor.

02:59.000 --> 03:02.870
This is an operation that gets performed on each element of an object structure.

03:02.960 --> 03:09.350
You enumerate through elements maybe in a list and it's always delegated to the visitor object getting

03:10.010 --> 03:11.220
good cohesiveness.

03:11.300 --> 03:13.310
Have the classes know what they're doing.

03:13.310 --> 03:14.200
Do what you need to do.

03:14.210 --> 03:21.710
You just can use object composition and have a relationship in that matter some other examples so assume

03:21.710 --> 03:25.250
your class is called B and the delegated class is called a.

03:25.490 --> 03:30.880
You can use delegation if you want to enhance a but a is final because it uses composition.

03:32.770 --> 03:35.310
The equals and the hash code methods in Java.

03:35.350 --> 03:40.910
It's another classic example of delegation in order to compare two objects for equality.

03:40.960 --> 03:46.330
You can ask the class itself to do comparison instead of the Client class doing that check you delegate

03:46.330 --> 03:48.510
that responsibility to the class for the comparison.

03:49.740 --> 03:53.880
Event delegation is another example of delegation events.

03:53.880 --> 03:58.760
When you click on mouse click on buttons or click out use a mouse click any kind of event usually through

03:58.760 --> 03:59.880
3D interface.

04:00.090 --> 04:06.690
That's always handled by usually specific classes handler classes right.

04:06.830 --> 04:12.060
The handle classes are responsible for for handling button clicks for example and it's used in Java

04:12.090 --> 04:13.550
quite a bit.

04:14.010 --> 04:15.850
So that's the theory behind delegation.

04:15.870 --> 04:16.510
Just do it here.

04:16.530 --> 04:22.750
Just assigning responsibility for something specific to another object using that object through composition.

04:22.800 --> 04:26.910
Let's look at a coding example in intelligence to see exactly how it is in Java.

04:33.820 --> 04:35.010
Don't bring up the intelligence.

04:35.050 --> 04:41.570
IDC are famous integrated development environment we're going gonna create a project delegation example

04:41.570 --> 04:43.830
project.

04:43.970 --> 04:46.710
It's a pretty basic.

04:46.790 --> 04:48.260
Let's go and make it a command line.

04:50.360 --> 04:54.200
We'll call it delegation.

04:54.290 --> 04:54.860
Example

04:57.630 --> 04:59.860
this is automatically going to create a main class one.

04:59.870 --> 05:05.750
One bad thing about the template your price should just avoid but it does create our main class which

05:05.750 --> 05:08.620
ought to change the name of so I don't get compilers and I always forget.

05:08.630 --> 05:09.960
So just bring that up.

05:10.880 --> 05:11.440
All right.

05:11.510 --> 05:20.000
What I want to do in this example is I want to demonstrate delegation by using different responsibilities

05:20.000 --> 05:21.760
for two classes.

05:21.810 --> 05:28.340
I'm going to delegate responsibility from a printer class to a class that actually does the printing

05:29.380 --> 05:29.550
right.

05:29.590 --> 05:31.360
So the printer class is more generic.

05:31.510 --> 05:38.410
The printer class is gonna be the delegator and the delegate itself is gonna be a real printer class

05:38.680 --> 05:45.460
and then we'll have a main class that's going to use a printer object and then basically through object

05:45.460 --> 05:50.620
composition the printer class is going to delegate its responsibility to print to the real printer class.

05:50.640 --> 05:58.860
So it's a simple example but it gives you an idea of the separation so I'm gonna start off by creating

05:58.860 --> 06:00.500
the delegate itself.

06:00.500 --> 06:04.020
And again the delegate is just gonna be called real printer.

06:04.020 --> 06:07.800
This is the actual printer that does the actual work.

06:08.070 --> 06:10.380
And so this is gonna be the delegate.

06:10.500 --> 06:16.120
So we'll just put that in comments just to remind you it's gonna be a simple class again.

06:16.140 --> 06:22.260
It doesn't do much it just has a single method that prints out some information so it's the print method

06:22.290 --> 06:24.270
really.

06:24.600 --> 06:30.480
And for a lot of the code that I write in this class my method behavior is not really to do anything

06:30.480 --> 06:36.240
important it's just gonna display output so let's just display output saying you know printing or something

06:36.240 --> 06:36.630
like that.

06:37.830 --> 06:39.510
So here we're still going to just say the delegate

06:46.110 --> 06:52.050
and that's my entire class and I'm gonna actually create the or now which is my partner class

06:54.750 --> 06:57.930
that delegates responsibility of printing to the real printer.

06:57.930 --> 07:03.410
So when we create our delegator it has to have a composition relationship.

07:04.110 --> 07:12.510
So we're gonna say this is the delegator and so it's gonna have a member variable for the real printer

07:13.530 --> 07:16.700
and we're going to actually instantiate it right when we declare it.

07:16.800 --> 07:22.800
We'll just say new real printer called the default constructor and that's about it.

07:22.800 --> 07:31.370
Now the actual delegate which will assign the responsibility of printing to the real printer.

07:31.370 --> 07:32.470
We'll also have a print method.

07:32.480 --> 07:41.410
It will just basically assign that responsibility so we're gonna create the delegate here or use it.

07:41.410 --> 07:42.200
I should say so.

07:42.200 --> 07:45.630
Void print.

07:46.230 --> 07:49.920
And I would put my braces on the left on the right here.

07:50.450 --> 07:53.180
Depending on your coding style you know you can put it on the next line.

07:53.180 --> 07:57.710
Sometimes is a better for beginners but I tend to get in the habit of that.

07:57.860 --> 08:05.720
All this print method is going to do is it's gonna use my member variable object to call print and that's

08:05.720 --> 08:09.400
the actual perform the delegation.

08:09.470 --> 08:09.710
Right.

08:09.740 --> 08:13.760
We're delegating responsibility of printing to our real printer object.

08:13.790 --> 08:18.850
This printer class just contains the dollar delegation.

08:19.030 --> 08:25.640
So now we can create our test our class through this.

08:25.930 --> 08:33.640
And so to the outside world it looks like the printer is actually printing

08:37.730 --> 08:39.980
the printer actually prints right.

08:40.580 --> 08:44.390
When we write our public static Morton main method.

08:44.390 --> 08:52.840
So our main method is just going to create a printer and print not too complicated.

08:54.340 --> 09:01.360
So we're gonna create a printer instance say printer new printer and you see here we don't actually

09:01.360 --> 09:03.250
have to utilize any polymorphism.

09:03.250 --> 09:09.010
We're creating actual instance of the printer and then we're gonna just call print on it and then remember

09:09.010 --> 09:13.930
the print method of the printer instance is gonna delegate its responsibilities to print through the

09:13.930 --> 09:16.210
real printer.

09:16.450 --> 09:17.930
Pretty straightforward right.

09:17.950 --> 09:23.970
Printer block print calls print uses its composition its object has a relationship.

09:24.140 --> 09:24.920
It's called print.

09:24.970 --> 09:28.930
The actual implementation the delegate is in real printer

09:32.470 --> 09:39.740
wood to build our class here and we can't create an object unless we have new in front of it.

09:39.800 --> 09:44.360
So amateur hour here and now we should be able to build

09:47.210 --> 09:53.280
and run this and you'll see basically that the delegator the delegate itself gets called by the delegator.

09:53.280 --> 09:57.710
And so bear with me in the hours as these the first couple of things I'll try to limit these errors

09:57.710 --> 10:00.880
I know something you get for a frustrate and say I should never make a mistake.

10:01.370 --> 10:03.530
I'm not perfect so I do make mistakes.

10:03.530 --> 10:09.770
I forgot to rename the class again to test or Java because we have our main method and test our public

10:09.770 --> 10:11.960
class system in a public file.

10:11.960 --> 10:17.930
So when I rename test or dot Java and I ran the program I now see that the delegate is displayed telling

10:17.930 --> 10:23.710
me that the real printer responsibility is actually doing the implementation of the delegate.

10:23.870 --> 10:29.270
Even though the outside world the tester class knows nothing about a real printer all noses about the

10:29.270 --> 10:34.650
printer the responsibility is delegated to the real printer through the printer so that's the whole

10:34.650 --> 10:36.720
delegation principle in a nutshell.

10:36.780 --> 10:42.080
Again pretty straightforward you'll see it used in a lot of design patterns and a more complex way.

10:42.180 --> 10:48.870
But again it's really just a has a relationship with the actual comp composed object doing responsibility

10:49.710 --> 10:52.110
when it's being used inside the delegator.
