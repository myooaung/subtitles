WEBVTT

00:05.240 --> 00:06.770
Hello and welcome.

00:06.770 --> 00:07.090
All right.

00:07.100 --> 00:08.360
We have another challenge for you.

00:08.360 --> 00:13.430
I want to test your knowledge of the singleton design pattern very common pattern that's used to create

00:13.430 --> 00:16.460
a single instance of an object.

00:16.490 --> 00:20.030
All right the requirements of this application and I want you to write our first.

00:20.030 --> 00:22.050
Suppose you're a member of a cricket team.

00:22.460 --> 00:25.160
So start thinking about this is how the application is going to work.

00:25.160 --> 00:26.780
You're a member of a cricket team.

00:26.780 --> 00:32.480
You're in a tournament and your team is going to play against another team as per the rules of the game.

00:32.510 --> 00:38.300
The captain of each side must go for a toss to decide which side will bat or ball first.

00:38.300 --> 00:43.760
I'm not a cricket expert or anything like that but basically you have to decide whether or not you have

00:43.760 --> 00:44.300
a captain.

00:45.680 --> 00:50.390
If your team does not have a captain you need to elect someone as a captain first.

00:50.390 --> 00:53.940
At the same time you can your team can now have more than one captain.

00:53.960 --> 00:57.980
So right now you should be thinking this is a terrific opportunity to write a singleton because you

00:57.980 --> 00:58.950
only have one.

00:59.040 --> 01:02.330
Only want to have one and only one captain.

01:02.330 --> 01:07.670
So you're go for this challenge is to use the singleton design pattern to ensure that your team only

01:07.670 --> 01:11.150
has one captain when writing an application that simulates cricket.

01:11.870 --> 01:20.950
OK so the requirements you're required to use the bill Pugh Singleton implementation approach to ensure

01:21.190 --> 01:26.770
only one captain is selected on your team so if you use Bill Pugh you have to make sure that you use

01:26.770 --> 01:31.830
an interstate helper class to create your captain.

01:31.970 --> 01:36.320
You want to create a class that test your implementation of the singleton design pattern call you get

01:36.320 --> 01:41.120
instance method multiple times to retrieve objects see if the objects are the same by using the equals

01:41.120 --> 01:48.630
equals operator Here's some example input their output I should say here is where we're trying to create

01:48.630 --> 01:54.330
instead of a captain we then make a new captain selected for the team and then you trying to make another

01:54.330 --> 01:57.480
captain and you already have a captain for your team.

01:57.480 --> 02:02.540
So you say send him for the toss and then you compare your two instances which would in this case your

02:02.560 --> 02:06.940
names you want to see two under the same instance.

02:06.990 --> 02:10.330
Now I purposely didn't provide a ton of details as far as how you're going to implement it.

02:10.420 --> 02:15.940
You should know how to implement the Singleton using Bill Pugh but all you really have to do is is really

02:15.940 --> 02:22.570
make one or two classes the one class is the instance that you need to have a singleton for so that

02:22.570 --> 02:24.550
class name can be something like make a captain.

02:24.550 --> 02:27.610
You don't have to simulate an entire cricket application.

02:27.700 --> 02:32.650
I was just trying to give you a scenario where you only need one instance in this case it's a cricket

02:32.650 --> 02:36.580
game where you select a captain but you don't have to write any code for cricket.

02:36.580 --> 02:43.390
Really what I would suggest as you write one class in one class and maybe one class that includes a

02:43.390 --> 02:51.310
main method you can name that class something like Captain and this is the singleton class it will implement

02:51.310 --> 02:52.910
the Singleton using Bill Pugh.

02:52.960 --> 02:53.850
It's pretty straightforward.

02:53.850 --> 02:55.950
It looks just like most of our examples.

02:56.140 --> 02:59.650
And then the other thing you want to do for the assignment is really just demonstrate that the Singleton

02:59.650 --> 03:00.460
works.

03:00.460 --> 03:01.770
So you have a main method.

03:01.960 --> 03:05.800
You can print out some output just like I did you know trying to make a new captain.

03:05.800 --> 03:11.680
This would be right before you actually invoked to create the new Singleton using the singleton class

03:12.390 --> 03:17.420
to get the Singleton you'd price know call your get instance method have you created the singleton.

03:17.590 --> 03:22.270
You'll say hey I'm trying to make another captain so you would call to get instance again with another

03:22.270 --> 03:30.190
instance and inside your actual Singleton class you may have some output that displays you're you have

03:30.190 --> 03:31.830
the captain for your team.

03:32.080 --> 03:36.130
So setting for the toss you know something like that.

03:36.280 --> 03:38.590
It all depends on the output that you provide.

03:38.590 --> 03:42.850
The last thing you want to do is you want a test just like I tested in my examples to make sure that

03:42.850 --> 03:45.190
you're singletons are in fact the same instance.

03:45.340 --> 03:46.800
So you can use the equals equals.

03:46.810 --> 03:51.940
In this case you could do it like I did in the example where you just display the class Heidi you can

03:51.940 --> 03:57.230
add data to your member or to your singleton class to confirm that the data member outputs are the same.

03:57.250 --> 03:58.330
It's really up to you.

03:58.510 --> 04:03.700
The basic requirements of the curious Singleton use Bill Pugh and this captain example thank you and

04:03.700 --> 04:04.120
good luck.
