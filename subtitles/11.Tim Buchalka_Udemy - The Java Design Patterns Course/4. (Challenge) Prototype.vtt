WEBVTT

00:05.210 --> 00:05.510
All right.

00:05.540 --> 00:06.080
Hello.

00:06.860 --> 00:09.870
Let's test our knowledge of the prototype design pattern.

00:09.890 --> 00:11.300
We have another challenge for you.

00:11.300 --> 00:12.600
Another assignment.

00:12.860 --> 00:15.100
So let's get started.

00:15.890 --> 00:19.850
And this assignment let's think of a theoretical concept here.

00:19.850 --> 00:25.380
Suppose you want to create a car application that contains different types of cars.

00:25.540 --> 00:29.620
We want to utilize the prototype design pattern to return duplicate cars.

00:29.680 --> 00:35.420
So you're gonna be required to implement this pattern using the Java colonial interface the prototype

00:35.420 --> 00:40.370
for application is named basic car this should be an abstract class.

00:40.550 --> 00:45.500
It should have some implementation and that's why it's abstract.

00:45.500 --> 00:50.000
You should have member variables for a model name and a price and it should be created with some default

00:50.000 --> 00:51.320
price.

00:51.320 --> 01:00.820
The price could also be modified later as per the model model the car the concrete prototypes are nano

01:00.820 --> 01:05.130
and Ford they need to implement the clone method defined in the basic car.

01:07.290 --> 01:12.790
So requirements are you should have a class called Basic Car cash that acts axis that acts as a helper.

01:13.060 --> 01:17.780
That should be defined and what you'll do is you store Basic Car objects and a hash table.

01:17.830 --> 01:20.350
Return their clone whenever it's requested.

01:20.770 --> 01:22.780
So have like a get method.

01:22.780 --> 01:27.340
You're also required to implement a driver demo class which is your client.

01:27.340 --> 01:32.310
This will use the basic car cash class to get basic car objects right.

01:32.350 --> 01:34.370
So again pretty straightforward here.

01:34.480 --> 01:41.740
Some example output of what I'm looking for is you would tell me what the cars are that are cloned so

01:41.770 --> 01:45.770
you could say the car is a green nano and its price is some money.

01:45.790 --> 01:51.550
Again ignore the output here but some kind of some kind of price or the car is a Ford yellow and it's

01:51.630 --> 01:54.790
prices you know 10 million dollars whatever it is.

01:55.690 --> 02:02.050
But again what you want to do here is you want to have your basic car cash with a hash table and you

02:02.050 --> 02:06.970
want to return clones when requested based on some kind of idea or something similar like that so you

02:06.970 --> 02:14.100
can look up the key in the hash table and then you want to have an abstract class basic car and concrete

02:14.310 --> 02:15.990
prototypes nano and Ford.

02:15.990 --> 02:16.910
So good luck.

02:17.040 --> 02:20.610
I'll provide a solution in the next lecture but this is pretty straightforward.

02:20.610 --> 02:20.990
Thank you.
