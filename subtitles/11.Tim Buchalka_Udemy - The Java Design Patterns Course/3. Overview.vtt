WEBVTT

00:08.670 --> 00:09.320
Hello.

00:09.410 --> 00:09.890
Saw.

00:09.990 --> 00:11.850
I'm excited to get started.

00:11.850 --> 00:17.760
First I want to go through a basic overview of design patterns give some definitions give you a little

00:17.760 --> 00:22.720
history and tell you the four common essential parts of a design pattern.

00:25.760 --> 00:31.240
All right so as far as everyday life in the real world we always talk about the way that we do things

00:31.270 --> 00:31.830
right.

00:31.870 --> 00:36.990
Our hobbies our home life and we recognize when we're doing these hobbies and this.

00:37.000 --> 00:39.250
This everyday work that we have power patterns right.

00:39.250 --> 00:40.000
You repeat things.

00:40.000 --> 00:40.200
All right.

00:40.240 --> 00:45.910
When you go to work you get up in the morning you brush your teeth you drive a certain distance certain

00:45.910 --> 00:51.070
place you're doing a lot of repetition and this is the same when it comes to software.

00:51.070 --> 00:54.820
When you write code you end up repeating yourself quite a bit.

00:54.820 --> 01:02.080
So when you repeat yourself these are patterns and if you're going to repeat yourself you can identify

01:02.520 --> 01:05.360
a really good common solution to these patterns.

01:05.380 --> 01:11.530
So software engineers face common problems during development of various software programs and you should

01:11.530 --> 01:13.280
know this as you're writing code.

01:13.330 --> 01:16.540
A lot of times you encounter the same problems.

01:16.640 --> 01:22.100
And so for example when we tell a colleague how we accomplish a tricky bit of programming so that the

01:22.100 --> 01:23.840
colleague doesn't have to recreate it from scratch.

01:23.840 --> 01:23.990
Right.

01:23.990 --> 01:25.070
We help one another out.

01:25.580 --> 01:27.470
You don't want to reinvent the wheel.

01:27.530 --> 01:30.030
You want to be able to say hey I solve this problem.

01:30.060 --> 01:31.280
It was really really tough.

01:31.580 --> 01:33.770
And this is how I solved it.

01:33.810 --> 01:37.740
And when you solve it you want to make sure that your solution was actually tried and tested useful

01:38.110 --> 01:39.930
and it was a good way of solving right.

01:39.930 --> 01:44.620
You don't want to give out patterns of repetition for bad ways to do things.

01:44.640 --> 01:51.010
So when we face these common problems for these common software problems we want to be able to communicate

01:51.010 --> 01:55.720
to other developers how we solve these problems using good techniques and good programming.

01:55.740 --> 02:01.200
So in the past when we found solutions to these common problems there was really no way to tell your

02:01.200 --> 02:04.890
co-worker your or your partner or whoever you were coding with.

02:04.920 --> 02:07.560
There were no standards right there in the documentation.

02:07.560 --> 02:12.020
You couldn't just say hey refer to this go solve it the way I did.

02:12.090 --> 02:16.380
So it becomes a significant problem when you don't have this communication especially when new team

02:16.380 --> 02:23.880
members you have new people write code you have new students develop Java they write new programs and

02:23.880 --> 02:29.190
in the past you can actually tell them Hey once you go solve this common problem like this.

02:29.190 --> 02:34.770
So it became a problem when you have new people to not be able to tell them these good things that you

02:34.770 --> 02:35.860
came up with.

02:36.210 --> 02:41.460
Especially I know that when I first started writing code and a lot of people weren't familiar with design

02:41.460 --> 02:43.480
patterns early on.

02:43.620 --> 02:47.620
It was no way to say hey go solve this problem this way.

02:47.880 --> 02:52.710
Go use the adapter go use the factory method that just didn't exist.

02:52.800 --> 02:57.810
And so when you don't have these techniques these documentation these patterns that you can reuse they're

02:57.810 --> 03:00.360
not documented anywhere they're not even thought of.

03:00.480 --> 03:06.040
It takes a lot of effort to become familiar with an existing product it just really it's just gonna

03:06.070 --> 03:06.810
save you time.

03:06.820 --> 03:11.110
If you have somewhere that's documented that you can solve common problems common solutions.

03:11.200 --> 03:18.270
They were something that was created to help solve these common solutions to common problems.

03:18.490 --> 03:21.010
And they're mainly aimed towards object oriented programming languages.

03:21.010 --> 03:23.550
And obviously this is Java class we're going to focus on Java.

03:23.680 --> 03:30.400
But you can use the design patterns that we're going to study and see plus plus C sharp any object oriented

03:30.400 --> 03:37.990
language Smalltalk all the popular ones out there designing object going to software is hard.

03:37.990 --> 03:42.010
Designing reusable object oriented software is even harder.

03:42.010 --> 03:42.200
OK.

03:42.220 --> 03:50.050
So if there's some kind of concept or some pattern that you can study that helps with that it's tremendously

03:50.050 --> 03:55.980
advantage advantageous so design patterns address these issues that I just mentioned.

03:56.130 --> 04:03.060
They help solve common problems in software with provide providing common software solutions in documenting

04:03.060 --> 04:08.090
that so it's a standard that's provided.

04:08.250 --> 04:13.830
It's really really helps give directions to new developers or even experienced developers on how to

04:13.830 --> 04:16.000
solve these common core software problems.

04:16.080 --> 04:22.330
Very very important to learn as it helps you become a much much better programmer and designer.

04:24.450 --> 04:29.130
So I wanted to go through some definitions just some formal definitions to so you can kind of hear other

04:29.130 --> 04:33.180
thoughts of other other important people in the field.

04:33.180 --> 04:38.100
So when you have these different definitions helps you see some different perspective.

04:38.100 --> 04:43.650
So the real probably the real most popular one you've heard is design patterns are reoccurring solutions

04:44.010 --> 04:46.970
to design problems you see over and over and over.

04:47.100 --> 04:51.990
All right pretty straightforward design patterns constitute a set of rules describing how to accomplish

04:51.990 --> 04:54.820
certain tasks in the realm of software development.

04:54.840 --> 05:00.980
Again you're going to notice these these definitions relatively say the same thing common software solutions

05:01.000 --> 05:07.050
common problems design patterns focus more on reuse of recurring and architectural design themes while

05:07.050 --> 05:09.690
frameworks focus on detail design and implementation.

05:09.690 --> 05:15.360
So this definition is kind of distinguishing between frameworks versus specific design patterns design

05:15.360 --> 05:18.560
planners tend to solve smaller subsets of problems.

05:18.570 --> 05:27.800
Framework is much larger and much more detail oriented pattern addresses of reoccurring design problem

05:28.070 --> 05:32.760
that arises in specific design situations and presents a solution to it.

05:33.080 --> 05:39.410
Patterns identify and specify abstractions that are above the level of single classes and instances

05:39.530 --> 05:47.280
or of components so these are just good definitions that again can give you a good summary or good information

05:47.320 --> 05:51.050
on what the goal of Design Patterns are what do they do.

05:51.060 --> 05:55.170
And again it really just comes down to I know I've said this a couple times what really comes down to

05:55.470 --> 05:59.870
common software solutions to common software problems.

06:00.060 --> 06:05.190
So they represent the best practices used by experienced and experienced object oriented programming.

06:05.220 --> 06:09.660
You don't want to reinvent the wheel like I said there's no reason for you to rewrite a solution to

06:09.660 --> 06:11.320
a common problem.

06:11.370 --> 06:14.420
It's been done it's been tried and tested right.

06:14.660 --> 06:20.310
These solutions to general problems have been faced throughout the history of programming.

06:20.420 --> 06:23.910
People come up with great solutions reuse those great solutions.

06:24.130 --> 06:24.370
Right.

06:24.380 --> 06:29.210
So through trial and error through numerous software experienced developers these are tried and tested

06:29.420 --> 06:32.020
software solutions that you should use.

06:32.030 --> 06:36.650
So that's what you're going to study in this class these great solutions that past experience developers

06:36.650 --> 06:37.790
have come up with.

06:37.790 --> 06:40.550
It's going to save your mom a tremendous amount of time as well.

06:41.780 --> 06:45.920
So it's design patterns are not just about the design of objects.

06:45.950 --> 06:47.720
Design is a broad field.

06:47.720 --> 06:51.750
Usually you'll design your software before you actually go and implement and write the code.

06:52.100 --> 06:54.700
If you don't do that you're going to run to a lot of issues.

06:55.040 --> 06:59.150
But what you can think about when think when you you know when you come this concept of design patterns

06:59.540 --> 07:01.430
also think about the interaction between objects.

07:01.430 --> 07:02.510
How do objects communicate.

07:02.510 --> 07:04.310
How do they work together.

07:04.340 --> 07:10.670
So in addition to design high level and low level detail design in some instances there's also strategies

07:11.090 --> 07:13.070
for object inheritance in containment.

07:13.070 --> 07:18.410
You're going to see a law of the same themes repeated over and over while we discuss design patterns

07:18.440 --> 07:20.320
terms like abstraction.

07:20.320 --> 07:20.830
Right.

07:20.900 --> 07:27.320
Inheritance encapsulation you can hear things like coupling cohesion you're going to hear a lot of design

07:27.320 --> 07:35.630
terminology that help you understand these good software solutions design patterns can exist at many

07:35.630 --> 07:40.670
levels from very low level specific solutions to more generalized system issues.

07:40.670 --> 07:45.140
So we'll see all sorts of different solutions that are more broad more general and some more detailed

07:46.710 --> 07:47.670
as far as the history.

07:47.670 --> 07:52.980
Again just to give you some context if you're not if you're not interested in learning about the history

07:52.980 --> 07:58.530
you can skip this but I like to when I when I approach a subject I like to understand all of it the

07:58.530 --> 08:04.560
concept design patterns originated from Christopher Wolfgang Alexander he was from Australia and he

08:04.560 --> 08:05.290
was an architect.

08:05.310 --> 08:06.950
He had nothing to do with software.

08:07.050 --> 08:09.390
He architected buildings.

08:09.390 --> 08:12.890
He learned how to build town different buildings and towns.

08:12.900 --> 08:16.370
He had no computer programming experience running software.

08:16.770 --> 08:20.780
And he came up with this concept after he noticed.

08:20.780 --> 08:25.860
Again a lot of repetition when designing building says an architect.

08:26.130 --> 08:30.900
He said each pattern describes a problem which occurs over and over again in our environment and then

08:30.900 --> 08:35.610
describes the core of the solution to that problem in such a way that you can use the solution a million

08:35.610 --> 08:38.610
times over without ever doing it the same way twice.

08:38.610 --> 08:43.230
That was his definition and he was really the first guy that came up with even the concept of repetition

08:44.460 --> 08:45.890
in nineteen ninety four ninety five.

08:45.900 --> 08:52.590
There was a gang of four gang of four these four architects developers where everyone to calm that took

08:52.590 --> 08:57.060
Alexander's concept and applied it to software software development.

08:57.060 --> 09:01.860
Their names are Eric gamma Richard Howe Ralph Johnson and John plus seats.

09:02.250 --> 09:04.320
Excuse my mispronunciation.

09:04.380 --> 09:08.460
These are the four main guys that came up with the twenty three basic patterns that we're going to discuss

09:08.460 --> 09:09.590
in this course.

09:09.780 --> 09:14.850
And I mentioned I always get it kind of always kind of jump back and forth between 22 and 23 three but

09:14.850 --> 09:19.180
we're going to focus on twenty three sometimes I'll make a mistake and say twenty two but there's twenty

09:19.180 --> 09:23.760
three patterns that we're going to focus upon focus on in this class they were developed and created

09:23.760 --> 09:31.240
by these four four programmers they expressed solutions in terms of objects and interfaces instead of

09:31.240 --> 09:31.870
walls and doors.

09:31.870 --> 09:32.040
All right.

09:32.050 --> 09:37.570
So they took this concept from Alexander and said hey this this the software solutions let's apply this

09:37.570 --> 09:43.450
to objects interfaces inheritance whatever whatever the case may be they saw the advantages of this

09:43.630 --> 09:48.640
of how you have these common solutions cough common software problems.

09:48.640 --> 09:53.580
So what happened was they basically created a book Design Patterns elements of reasonable object or

09:53.600 --> 09:56.080
software that was published nineteen ninety five.

09:56.080 --> 09:58.270
I'll be using this book quite a bit in the class.

09:58.270 --> 10:04.180
A lot of references to it because it's the book that created design patterns and documented all the

10:04.180 --> 10:05.120
useful ones.

10:05.140 --> 10:08.680
So we're going to utilize this book a lot for our learning.

10:08.890 --> 10:14.140
What this book did was it basically applied the idea of patterns to software design and they came up

10:14.140 --> 10:19.510
with the name design patterns because it is just repetition it's just a pattern they describe a structure

10:19.960 --> 10:24.760
within which to catalogue and describe these patterns know they organized when they said hey let's figure

10:24.760 --> 10:26.390
out what these common problems are.

10:26.500 --> 10:32.560
Let's give him a name let's give him certain advantages let's give some implementation details and so

10:32.560 --> 10:33.700
forth.

10:34.030 --> 10:38.010
They catalog these 23 such patterns that we're going to study in this class.

10:38.260 --> 10:45.050
They postulated object oriented strategies and approaches based on the design patterns and that's really

10:45.050 --> 10:45.230
it.

10:45.230 --> 10:52.580
I mean they just came up with some good solutions using good design approaches they did not create the

10:52.580 --> 10:53.870
patterns described in the book.

10:53.890 --> 10:57.500
So I may may have used that term previously but they didn't actually create it right because we know

10:57.500 --> 11:00.040
that these patterns existed in the past.

11:00.170 --> 11:02.030
They just documented right.

11:02.090 --> 11:05.600
They identified the problems that are exist that were common problems.

11:05.600 --> 11:10.460
They said hey you know my colleague always encounters this problem for two incompatible types can't

11:10.460 --> 11:15.980
communicate let's call that the adapter my other I've noticed over 20 years of programming that I always

11:15.980 --> 11:19.130
have a problem where I only want to create one instance of my object.

11:19.130 --> 11:22.160
Let's let's document that and call that Singleton.

11:22.160 --> 11:27.330
So these patterns reflected what had been learned about high quality designs for specific problems.

11:27.380 --> 11:29.240
And again these are high quality.

11:29.240 --> 11:34.790
These are for really smart people that said based on my experience and based on the history in all these

11:35.240 --> 11:36.200
different information.

11:36.200 --> 11:40.130
This is the patterns that we want to focus on these are the most popular ones.

11:40.700 --> 11:46.970
And they basically identified four essential elements to all patterns should have all design patterns

11:47.000 --> 11:50.060
should have a pattern name right.

11:50.100 --> 11:50.870
If you don't have a name.

11:50.880 --> 11:54.410
How you gonna refer to how you can even tell your colleague Hey use this.

11:54.440 --> 11:57.930
So they came up with this idea that patterns have to have names.

11:57.930 --> 12:00.960
They described the problem the solution and the consequences.

12:00.960 --> 12:02.100
In a word or two.

12:02.100 --> 12:05.430
So I provided some examples in our first lecture.

12:05.430 --> 12:12.780
Examples of design pattern names adaptor facade interpreter iterator they all are one or two words that

12:12.780 --> 12:21.100
really concisely kind of describe what the pattern is going to kind of focus on.

12:21.310 --> 12:23.060
This basically this by providing the same.

12:23.070 --> 12:26.920
It lets a designer design at a higher level of abstraction.

12:26.940 --> 12:30.700
You can talk to your friends and you can say hey try using the adapter for her.

12:30.730 --> 12:32.090
Makes it much easier to communicate.

12:33.510 --> 12:38.720
And it makes it easier to think about the design by just the description of that one or two words.

12:38.910 --> 12:42.060
They also said that every design pattern has to solve a problem right.

12:42.120 --> 12:43.140
I mean that's a purpose.

12:43.140 --> 12:47.380
So they have to explicitly document the problem.

12:47.430 --> 12:53.100
Explain and give some context this might describe specific design problems such as how to represent

12:53.100 --> 12:55.180
algorithms as objects.

12:55.260 --> 12:56.870
And again it's an object oriented focus.

12:56.880 --> 12:59.650
So everything's going to be organized around objects.

12:59.970 --> 13:05.500
It might describe a class or different object structures that are symptomatic of an inflexible design.

13:05.640 --> 13:12.070
So it also may when they describe the problem they may tell you why you don't want to do it this way.

13:12.330 --> 13:14.570
It's very valuable to learn things.

13:14.640 --> 13:19.080
Sometimes when you learn the wrong way first and then tell you how to solve it using the right way because

13:19.080 --> 13:22.470
then you can identify why the right way is so good.

13:22.560 --> 13:27.660
So the problem description also will include usually a list of conditions that must be met before it

13:27.690 --> 13:29.200
makes sense to apply the pattern.

13:29.250 --> 13:30.540
They give you a little information Hey.

13:30.570 --> 13:36.510
This is when you should use the pattern again if you don't have a name you don't have the problem description

13:36.810 --> 13:39.630
and you don't actually understand when to use it.

13:39.690 --> 13:45.570
It's not that useful so they try to provide this basic information pattern name and problem they followed

13:45.570 --> 13:49.490
that up with the solution which is obviously very important.

13:49.530 --> 13:53.760
The solution is going to describe the elements that make up the design the relationships responsibility

13:53.760 --> 13:59.490
and collaboration usually including a class diagram through UML because that succinctly helps describe

13:59.490 --> 14:01.200
the solution.

14:01.350 --> 14:04.020
We'll tell you this is an interface.

14:04.020 --> 14:05.930
These are these are subclasses.

14:05.940 --> 14:08.440
This is how all the objects relate together.

14:08.550 --> 14:10.770
They do not and this is very important.

14:10.770 --> 14:15.430
They do not describe a specific implementation right.

14:15.470 --> 14:18.050
Because this would make it much more restrictive.

14:18.050 --> 14:18.780
Right.

14:18.800 --> 14:23.690
You've got to think of a pattern in terms of a template which can be more generic and applied to many

14:23.690 --> 14:25.130
different situations.

14:25.130 --> 14:30.080
If it was very implementation specific it could only be applied maybe to one language patterns are not

14:30.080 --> 14:35.420
designed to work with just Java or just C++ though they're designed to work with any object oriented

14:35.420 --> 14:35.860
languages.

14:36.170 --> 14:41.660
So the implementations that are described in the book and that are essential for for the design patterns

14:41.990 --> 14:45.600
documentation don't provide detailed implementations.

14:45.680 --> 14:49.270
I will provide detailed them computations in this class using Java.

14:49.610 --> 14:54.440
But traditionally when you hear adaptor and when the Gang of Four create a document of these patterns

14:54.920 --> 14:57.910
they didn't provide a detailed implementation.

14:57.920 --> 14:59.170
They just provided that template.

14:59.560 --> 15:00.300
OK.

15:00.620 --> 15:04.730
You should also understand that the consequences of design patterns this usually includes tradeoffs

15:04.940 --> 15:09.820
advantages when of applying the pattern because sometimes it's not always clear cut.

15:09.830 --> 15:10.280
Right.

15:10.280 --> 15:14.420
Sometimes you may apply the pattern and you say Hey well don't forget this could cause another issue.

15:14.570 --> 15:16.370
There's not always perfect implementations.

15:16.400 --> 15:17.870
It's the best implementation.

15:17.870 --> 15:19.160
It's not always perfect.

15:19.220 --> 15:24.620
So the consequences are porn for evaluating design alternatives and for understanding the cost and the

15:24.620 --> 15:27.170
benefits of applying pattern.

15:27.170 --> 15:32.430
This often concerns space memory issues time trade offs things with performance.

15:32.540 --> 15:35.860
It may actually address different language in implementation issues as well.

15:35.870 --> 15:41.750
For example a design pattern may work well in an object oriented language that supports garbage collection

15:42.080 --> 15:47.000
which one that doesn't or may work well in a language that supports multiple inheritance versus one

15:47.000 --> 15:47.450
that doesn't.

15:47.450 --> 15:52.830
This kind of information will be included in the consequences section so it includes impacts on the

15:52.830 --> 15:59.190
systems flexibility extend ability or portability regarding software reuse.

15:59.690 --> 16:03.510
And these are important concepts as well flexibility extensible and portability.

16:03.530 --> 16:07.320
We'll talk about that when we talk about the advantages of design patterns.

16:07.400 --> 16:08.120
That about does it.

16:08.120 --> 16:13.820
I wanted to give you just a basic overview of what design patterns can do you know what they are definition

16:13.920 --> 16:20.480
a little history and common elements that you'll see associated with design patterns.

16:20.480 --> 16:20.840
Thank you.
