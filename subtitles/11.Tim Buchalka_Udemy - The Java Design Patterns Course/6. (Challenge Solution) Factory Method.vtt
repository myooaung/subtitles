WEBVTT

00:05.170 --> 00:06.550
Hello and welcome back.

00:06.550 --> 00:11.710
This lecture I want to provide a solution to our first challenge regarding the implementation of the

00:11.710 --> 00:13.620
factory method pattern.

00:14.250 --> 00:21.820
So let me bring up until J and create our project will just which will be titled factory method pattern

00:21.820 --> 00:23.350
solution or something similar to that

00:30.830 --> 00:39.350
so we'll see a Factory factory method design as just factory method solution.

00:39.350 --> 00:41.670
Let's keep it shorter.

00:42.510 --> 00:46.760
Sorry if you remember from our challenge this was going to use the factory method to create different

00:46.760 --> 00:48.680
types of animals right.

00:48.680 --> 00:53.630
So I'll start off by creating our product interface.

00:53.630 --> 00:58.830
Basically in AI animal interface.

00:58.830 --> 01:03.150
So let's go ahead and remove this.

01:03.210 --> 01:06.960
So I started off creating my nano animal interface class.

01:06.960 --> 01:13.230
This is going to be pretty basic it's just going to contain a simple method for speaking so we'll say

01:13.230 --> 01:23.070
interface animal interface just to be clear you could deem it AI animals some people use certain common

01:23.070 --> 01:27.330
conventions it's just going to contain a speak method don't take any parameters.

01:27.330 --> 01:27.960
Pretty basic.

01:27.960 --> 01:32.100
Again we're just demonstrating a design pattern the different product implementations are gonna be a

01:32.100 --> 01:33.570
dog and a tiger.

01:33.570 --> 01:41.400
So going to create a Dog class that implements this interface and it's going to just override our speak

01:41.400 --> 01:46.800
method.

01:46.800 --> 01:52.380
And like I said this the implementation of these methods don't have any real logic.

01:52.500 --> 01:57.210
They're just going to display some output to the screen so that we're demonstrating our implementation

01:57.210 --> 02:00.340
of our factory met pattern that we implemented it correctly.

02:00.360 --> 02:07.560
So in this case we'll just say system dot out front line and we'll print out something like Doc says

02:10.620 --> 02:15.270
pack pack whatever you want to do just something similar

02:21.750 --> 02:22.160
OK.

02:22.370 --> 02:31.860
And then one implement another class tiger this implements the animal interface again pretty straightforward.

02:31.880 --> 02:36.750
We're just going to override implement our speak method.

02:36.860 --> 02:42.170
This will help put some different data for a tiger.

02:42.170 --> 02:43.460
So this will do something like

02:46.280 --> 02:53.320
print out Tiger says Helen Dash.

02:54.890 --> 02:55.110
OK.

02:55.130 --> 02:56.720
So that's pretty straightforward.

02:56.720 --> 03:00.980
We have them our product interface and then we implement that product interface with a couple of different

03:00.980 --> 03:01.820
types.

03:01.820 --> 03:07.800
Now we want to create our factory which will create the right instance based on a parameter.

03:07.910 --> 03:12.650
Here I am going to create another file and I'm going to name I'm going to actually create a interface

03:12.650 --> 03:17.900
for it just for good practice even though I mentioned you don't have to create an interface you can

03:17.900 --> 03:20.180
just create the concrete creator.

03:20.240 --> 03:22.310
So here I'm just gonna say animal

03:25.070 --> 03:28.630
factory interface.

03:28.780 --> 03:33.230
And again this may or may not you may or may not want to follow this.

03:33.400 --> 03:39.440
It's good convention to always create interfaces we know that when we have programming to an interface

03:40.730 --> 03:41.520
design strategy.

03:41.540 --> 03:48.350
So here we're gonna say public we're gonna actually make this an abstract class it's a public abstract

03:48.350 --> 03:59.820
class animal interface and we're actually going to have this method call an exception if we can't instantiate.

03:59.820 --> 04:04.460
So it's a public string abstract and we're going to return an animal interface.

04:04.580 --> 04:07.590
That's the reference type we want to return for the product.

04:07.590 --> 04:15.030
The product interface we call this get animal type that's going to take a string of type.

04:15.390 --> 04:20.550
And it's going to throw an exception if it can't create any type of object.

04:20.550 --> 04:29.360
So maybe if you pass and no that's our simple factory interface now we're gonna have our concrete factory.

04:29.610 --> 04:37.440
We can name this whatever you want I'll name it concrete factory.

04:37.740 --> 04:46.680
And this is going to extend the astronaut class Animal Animal Factory interface.

04:46.680 --> 04:50.520
It's going to have an override that's gonna be our factory method.

04:50.820 --> 04:54.200
So we're going to override this get animal type.

04:55.850 --> 05:02.310
Is just gonna be a public and it's gonna return again and animal interface so you get animal type

05:05.190 --> 05:07.560
String type and it is gonna throw an exception

05:14.420 --> 05:20.250
and you can have if statements in here or you can have Switch team.

05:20.300 --> 05:24.550
I'm going to put a switch statement in just because we didn't have a statement in the previous example.

05:24.710 --> 05:34.040
Here we're gonna just switch on type which is a string and we're gonna have cases for dark and if it's

05:34.040 --> 05:35.750
a dark we just want to return a new doc

05:39.080 --> 05:45.150
and if it's a tiger we'll actually want to break out of here.

05:45.770 --> 05:56.290
And if it's a tiger we're going to return any tiger.

05:56.510 --> 06:03.100
Otherwise the default will break out again and again default sometimes there's arguments to say this

06:03.100 --> 06:05.790
should never be necessary but we are going to put a default in here.

06:06.020 --> 06:17.080
In this case we're gonna throw new Exception in all something like animal type type

06:20.930 --> 06:24.320
cannot be substantiated.

06:24.400 --> 06:25.080
All right.

06:25.100 --> 06:33.830
So pretty straightforward we implemented our new our new factory method in a single class that implements

06:34.040 --> 06:34.700
our interface

06:37.400 --> 06:43.400
last thing we need to do is create our client so that can demonstrate the use of the factory method.

06:43.870 --> 06:48.280
We'll create a new class here and we'll just name a client.

06:50.920 --> 06:55.310
And this will need to have a main method.

06:57.610 --> 07:05.050
And it's going to maybe throw an exception just in case we don't create the thing correctly so we have.

07:05.080 --> 07:06.520
So we have to declare it up here

07:09.370 --> 07:15.400
so we'll say throws Exception all basic Java stuff.

07:15.400 --> 07:22.000
And in this case I want to just display some information so I'm going to display some output such as

07:22.000 --> 07:24.400
this is a factory method

07:27.710 --> 07:33.510
so just some outputs of the user saying this is the factory pattern demo I then need to create some

07:33.510 --> 07:44.430
animal and animal interface reference we'll call that the animal factory and this will actually call

07:44.430 --> 07:47.420
a concrete class or a new concrete factory.

07:47.470 --> 07:52.500
And remember in our examples we could get around this and I have to do this if we had a static method

07:52.920 --> 07:58.290
in our concrete factory but for now we'll just keep it the way it is.

07:58.440 --> 08:00.450
We have our animal factory created.

08:00.450 --> 08:04.290
Now we want to actually create and call the factory method.

08:04.290 --> 08:05.490
On that instance.

08:05.490 --> 08:11.460
So we have to create a couple products in this case let's create a dog type first.

08:11.460 --> 08:16.160
And this will be the animal interface.

08:17.250 --> 08:18.600
I'll just name this dog type

08:21.430 --> 08:29.280
and this will be instantiated by calling the Animal Factory target animal type bypassing that string

08:29.280 --> 08:30.210
parameter.

08:30.210 --> 08:33.290
So it's going to pass on a dog.

08:36.060 --> 08:39.180
Once we have that instance created for the dog we want to test it.

08:39.180 --> 08:41.120
So we call the speak method on it.

08:41.130 --> 08:46.270
And that should display output which will confirm whether or not the correct instance was created.

08:46.440 --> 08:49.710
Let's also create a tiger type to see if that works.

08:49.710 --> 08:53.330
So again it's called animal interface.

08:53.640 --> 09:00.600
And this time will say tiger type do the same thing called get animal but will pass and Tiger as our

09:00.600 --> 09:05.900
string in the case statement should be executed correctly.

09:06.390 --> 09:12.810
We can then call Tiger type speak which will verify whether or not the correct instance was created.

09:13.440 --> 09:18.720
Let's also check our exception to see that the exception gets thrown when we try to credence that doesn't

09:18.720 --> 09:20.010
exist.

09:20.010 --> 09:25.460
So let's try creating a line which makes no sense because there is no lion type.

09:25.890 --> 09:28.110
But the exceptions should be caught and thrown.

09:28.110 --> 09:33.570
So let's say Animal Factory dog get animal type and in this case we'll put in life

09:37.200 --> 09:42.200
and then we'll call lion type speak.

09:42.390 --> 09:47.580
So what we should see is output when we run the program is we should see the speak method called for

09:47.790 --> 09:52.960
the dog type through polymorphism who have the right instance because a dog is being created.

09:53.040 --> 09:56.050
So we'll display output for whatever the speak was for dog.

09:56.220 --> 09:58.410
We'll do the same for Tiger and then for lion it's going to.

09:58.470 --> 10:04.230
An exception is going to be thrown and it's not going to work I also had to go back and change my switch

10:04.230 --> 10:13.100
statement so that the switch statement could remove the brake statements I had the brakes in the earlier

10:13.090 --> 10:16.590
I had to remove them because we're obviously doing a return we don't need to remove.

10:16.620 --> 10:18.430
So let's compile this.

10:18.680 --> 10:20.320
Try running this from the client.

10:21.960 --> 10:23.850
And you'll notice that we get two out.

10:23.880 --> 10:25.310
We get output for the dock.

10:25.320 --> 10:27.080
So we created the right dock instance.

10:27.180 --> 10:33.330
We can output for the tiger and then we get an exception thrown because there's no line that can be

10:33.330 --> 10:34.330
created.

10:34.350 --> 10:36.870
So this is the solution to your first challenge.

10:37.230 --> 10:42.020
The source code will be you can download it and verify that you implemented the factory method correctly.

10:42.030 --> 10:42.450
Thank you.
