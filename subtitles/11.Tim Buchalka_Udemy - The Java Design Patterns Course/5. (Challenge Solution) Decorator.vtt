WEBVTT

00:05.330 --> 00:06.300
Hello and welcome.

00:06.440 --> 00:13.280
In this lecture I'd like to provide a solution to our previous challenge which implemented a decorator

00:13.280 --> 00:17.120
design pattern with the scenario of a shape.

00:17.120 --> 00:18.830
So let's bring up and tell J.

00:18.920 --> 00:27.110
A NAME THIS PROJECT decorator solution will be available for download if you want to compare it to your

00:27.110 --> 00:27.680
solution.

00:33.330 --> 00:40.710
Then LIKE THAT FIRST THING WE'RE GONNA DO IS WE'RE GONNA CREATE OUR component.

00:41.080 --> 00:45.430
We're gonna say new Java class the component is gonna be our interface for our shape.

00:46.660 --> 00:51.190
So we'll see say shape making an interface.

00:51.190 --> 00:53.920
And this is gonna have one method.

00:53.920 --> 00:55.150
This is gonna have the draw method

00:59.340 --> 01:04.980
and then we have to create concrete components off of the shape the concrete components gonna be a rectangle

01:04.980 --> 01:06.790
in a circle.

01:06.790 --> 01:16.180
So here will say class rectangle implements shape and we're gonna override

01:20.080 --> 01:21.400
the draw method.

01:21.400 --> 01:28.260
And this is just gonna print out a message saying Shape Rectangle.

01:28.750 --> 01:33.910
This is the original functionality of the class that we want to add additional functionality using our

01:33.910 --> 01:39.580
decorator something like Shape Rectangle.

01:39.580 --> 01:42.400
Pretty straightforward a very small simple class.

01:42.400 --> 01:44.740
These are our gain our concrete components.

01:44.860 --> 01:49.160
So we'll do the same for our circle.

01:49.540 --> 01:53.710
And what this is basically saying is when you draw a rectangle circle all it does is just as a basic

01:53.710 --> 01:54.360
draw.

01:54.550 --> 01:56.620
It doesn't do anything fancy.

01:56.800 --> 02:05.440
So this is gonna be a circle and we're gonna display as the type of shape which is circle shape.

02:05.740 --> 02:08.680
Our next step is to create the abstract decorator.

02:08.710 --> 02:21.150
So here we're gonna create a new abstract class called Shape decorator shape decorator.

02:21.190 --> 02:23.940
This is gonna be abstract.

02:24.130 --> 02:26.220
It's going to implement the shape the component.

02:26.410 --> 02:27.580
So it's gonna implement shape

02:31.600 --> 02:36.970
and it needs to have a reference to a decorated shape needs I have reference to the component.

02:37.120 --> 02:49.180
So we're gonna say protected shapes we only want the subclasses to have this decorated shape our constructor

02:50.260 --> 02:51.520
will say public.

02:52.420 --> 03:00.090
Instead of having a separate method because we don't want any one of to directly side it.

03:00.100 --> 03:10.460
So we'll say shape decorated shape and then we'll just say this decorative shape equals decorated sheet.

03:16.450 --> 03:27.080
And then this Draw method is just going to call the components Draw method.

03:28.580 --> 03:33.640
So decorated shape that draw

03:37.230 --> 03:39.100
and that's our abstract decorator.

03:39.330 --> 03:41.880
Need to create a couple concrete decorators.

03:41.880 --> 03:49.720
I'm just gonna change the color of the shape so I might create a red shape decorator something like

03:49.720 --> 03:51.830
this.

03:52.450 --> 03:55.690
Class red.

03:55.930 --> 03:56.440
Shape

03:58.870 --> 04:04.390
decorator extends our shape decorator.

04:06.550 --> 04:08.050
Abstract decorator.

04:08.090 --> 04:14.230
This is gonna have a constructor that just calls the base constructor so that we can set up our reference

04:14.840 --> 04:17.210
or has a relationship.

04:17.520 --> 04:21.400
It's gonna override the draw method to add additional functionality by setting a border

04:24.140 --> 04:27.530
so in our draw method we're gonna say decorative shape that draw.

04:27.540 --> 04:32.490
And we're gonna call a helper method called set red border which will just display some output.

04:34.410 --> 04:38.620
So our set red border is gonna do something like that.

04:39.000 --> 04:44.180
So that's our decorator we can add red borders to multiple shapes.

04:44.200 --> 05:02.260
Now we'll create our client it's gonna use the decorator say client and this needs to have a main method.

05:02.730 --> 05:05.650
This is gonna create a new shape.

05:06.120 --> 05:10.710
And it's also gonna use the decorator add functionality to that shape.

05:10.710 --> 05:15.350
So the first thing we're gonna do is create a new circle and then we're going to carry a red circle

05:15.350 --> 05:21.260
decorator and call the actual draw methods.

05:21.260 --> 05:26.540
We'll also create a rod rake rectangle while we're at it.

05:26.630 --> 05:28.780
So we have a red circle.

05:28.970 --> 05:30.360
We have a red rectangle.

05:30.440 --> 05:35.220
They both use the decorator passing in either a circle or a rectangle.

05:35.240 --> 05:41.420
We're then going to display some information and call the circle draw method.

05:41.420 --> 05:43.610
So this is not going to use a decorator.

05:43.640 --> 05:46.170
It's just gonna do the normal behavior for Circle.

05:46.250 --> 05:53.560
We're then going to add the red borders to both the rectangle and the circle by using the decorator.

05:53.560 --> 05:56.160
And then we're gonna just do something like this.

05:56.860 --> 05:58.670
And that will demonstrate the use of the decorator.

05:58.670 --> 05:59.750
So let's try to compile

06:03.720 --> 06:04.980
and run this application

06:08.090 --> 06:12.730
and you'll notice that it uses a decorator for additional functionality that is a circle.

06:12.730 --> 06:14.360
Normal border.

06:14.780 --> 06:20.980
And then it has a circle with the red border and also a rectangle of red border.

06:20.990 --> 06:25.840
You'll notice that for the rectangle we didn't actually call the draw method on a rectangle.

06:25.850 --> 06:27.590
So we don't have a rectangle.

06:27.740 --> 06:33.490
We just passed in a new rectangle and actually we don't need to.

06:34.720 --> 06:35.010
Oh yeah.

06:35.020 --> 06:39.730
Because we want to call circle dot draw because the circle we created the original circle just to show

06:39.730 --> 06:41.980
that it has normal behavior.

06:42.010 --> 06:44.460
So this is a decorator design pattern in nutshell.

06:44.590 --> 06:47.560
If you have any questions please ask the Q and A.

06:47.570 --> 06:49.990
Otherwise onto the next design pattern.

06:49.990 --> 06:50.410
Thank you.
