WEBVTT

00:05.150 --> 00:06.650
Hello and welcome back.

00:06.650 --> 00:07.940
We have another challenge for you.

00:07.940 --> 00:12.800
A challenge to test your understanding of the build or design pattern just as a refresher.

00:12.800 --> 00:15.440
This is what you're going to try to create.

00:15.440 --> 00:19.760
You're going to create multiple objects to build a complex object.

00:19.820 --> 00:24.240
We're going to have a builder object builder interface concrete builders that ultimately you're going

00:24.240 --> 00:30.140
to build the product and then you're going to have a director that has a construct method that takes

00:30.290 --> 00:37.100
a concrete builder as a parameter and calls method on each concrete builder and the concrete BUILD A

00:37.100 --> 00:40.920
will usually add things to a list to the ultimate goal of building this.

00:41.210 --> 00:49.240
And product so the scenario that I want you to consider Suppose you're a manager of a fast food restaurant

00:50.200 --> 00:54.780
Tinkerbell typical meals in this restaurant consist of a burger and a cold drink.

00:54.930 --> 00:57.820
The burger can be either a veggie burger or a chicken burger.

00:57.940 --> 01:02.590
And that will be packed by a wrapper the cold drink could be either Coke or Pepsi and that will be packed

01:02.590 --> 01:04.330
in a bottle.

01:04.380 --> 01:09.360
So as you are reading this you should kind of think of objects and how you create the different objects

01:10.350 --> 01:15.830
you'll need to utilize the builder pattern to create objects that build different types of meals.

01:16.050 --> 01:22.230
Typically a vegetarian Miro versus a non vegetarian meal so you first can they need to create a hierarchy

01:22.230 --> 01:26.990
and after class set up are items the items represent the object to build.

01:27.030 --> 01:29.910
You're going to take the different items to build the product.

01:29.910 --> 01:34.770
The items are going to be everything listed here veggie burger chicken burger.

01:35.370 --> 01:37.740
Coke or Pepsi and so forth.

01:37.770 --> 01:42.570
So the first thing you need to do is you need to create an item interface methods in the item interface

01:42.570 --> 01:47.940
or could be a name and a price for the item and a method that returns a packing object in the item interface.

01:47.970 --> 01:54.360
The packaging would be different whether it's a burger or whether it's a drink you then can represent

01:54.360 --> 02:00.720
food items such as burgers that would that would be implementing the item interface and cold drinks

02:00.720 --> 02:03.560
as abstract class as implementing the item interface.

02:03.630 --> 02:10.140
So burgers would implement item cold drinks would implement item D classes would be abstract all they

02:10.140 --> 02:16.530
would do is implement the packing method will return a packing object and the other classes that are

02:16.530 --> 02:24.250
subclasses of burger and cold drinks would implement the price in the name and those would include veggie

02:24.250 --> 02:29.080
burger and chicken burger that implements the burger or is a concrete class to the abstract class Burger

02:29.080 --> 02:30.120
extends it.

02:30.390 --> 02:32.380
That would implement the price in the name methods.

02:32.380 --> 02:38.530
Just returning hardcoded floats and strings whatever you want and then the Coke and Pepsi concrete classes

02:38.530 --> 02:41.820
would extend the cold drink after ACT class.

02:41.950 --> 02:47.240
Again this would implement the price in the name methods just hardcoded to whatever you want floats

02:47.250 --> 02:48.230
and strings.

02:48.520 --> 02:53.770
You then need to create a packing interface the packing interface is going to represent the packaging

02:53.770 --> 03:00.850
of food items concrete classes for the packing interface would be wrapper or bottle a burger would be

03:00.850 --> 03:06.140
packed in a wrapper and a cold drink would be packed in a bottle so you would include a single method

03:06.670 --> 03:13.280
in these concrete classes wrapper and bottle such as pack and that would just be hardcoded to represent

03:13.280 --> 03:19.210
a string representation of hey we packed the bottle or we packed a wrapper and this is all pre setup

03:19.390 --> 03:23.320
you haven't implemented anything in the building yet you're just setting up your class hierarchy for

03:23.320 --> 03:26.540
all the items that you're going to need to build.

03:26.540 --> 03:31.800
Now we need to start implementing the builder pattern to implement the builder pattern you're going

03:31.800 --> 03:35.280
to have to create the class that represents the product and the builder pattern.

03:35.350 --> 03:42.300
This is the meal a vegetarian meal or a non vegetarian meal so this meal class has to have a list.

03:42.310 --> 03:47.420
Remember because we add items to the list from the concrete builders the concrete builders are gonna

03:47.440 --> 03:54.770
call the add method so this class can have an ad item a gate cost and show item methods add item will

03:54.770 --> 03:58.640
add things to the list and get costs or retrieve the cost.

03:58.640 --> 04:04.980
The total cost of the product itself you'll go through the linked list and for each item in the linked

04:04.980 --> 04:09.210
list you'll retrieve the cost and then calculate the total cost.

04:09.300 --> 04:15.540
So items will show you all the items that make up the meal and show items will just again go through

04:15.540 --> 04:19.570
the list and display hardcoded statements.

04:20.100 --> 04:24.820
So get cost control items iterate through the Israelis to determine the total cost in each item name

04:24.840 --> 04:26.160
pack and type in total price.

04:27.760 --> 04:32.570
You have to create a meal meal builder interface that acts as the abstract class builder.

04:32.620 --> 04:37.570
They should include methods for building the burger building the drink and getting the meal methods

04:38.190 --> 04:38.500
right.

04:38.530 --> 04:42.010
Because remember there's only two real item or two steps.

04:42.010 --> 04:48.130
Building a burger or drink either vegetarian or non vegetarian build a burger or for the drink we mentioned

04:48.880 --> 04:59.150
either Coke or Pepsi or something and then they get meal will return the product which is the meal you

04:59.150 --> 05:03.980
want to create a concrete build or objects that implement the meal builder interface veg meal build

05:03.980 --> 05:08.030
or non veggie meal builder that contain a meal object right.

05:08.040 --> 05:09.520
Because we need to.

05:09.690 --> 05:13.070
The meal is going to be the product so you'll need to add to the meal object.

05:13.230 --> 05:18.130
They're going to build different types of meal objects by adding items to the meals array list.

05:18.130 --> 05:20.490
Lastly you got to create the doctor director.

05:20.500 --> 05:24.380
You also have to create the client but you create the director class from the builder pattern.

05:24.400 --> 05:31.000
This will contain an instance of the main builder interface because you'll have to call the three polymorphism

05:31.000 --> 05:36.860
you call the builder concrete methods and this will include a construct method that takes them ie a

05:36.890 --> 05:42.680
concrete meal builder object as a parameter and it will include the steps to create the object you create

05:42.680 --> 05:44.840
your client that will use the director.

05:44.840 --> 05:52.880
Create a new director the director will take the meal builder concrete types to build the meal and then

05:52.880 --> 05:59.520
you'll call the get meal method basically to retrieve the product and then you can show it and calculate

05:59.520 --> 06:00.210
the total cost.

06:01.380 --> 06:07.290
So here is some example output of something that you can create after you build the meals you add all

06:07.290 --> 06:12.840
the items you can call the show method which will tell you the type of meal or you actually know the

06:12.840 --> 06:14.270
type of meal so you could display it.

06:14.430 --> 06:20.760
The show method will go through the items display each item and maybe their prices and then you also

06:20.760 --> 06:28.920
display the total cost at the end and so you can add a method to your meal to get the total cost and

06:28.960 --> 06:34.750
so here's the examples for the veg vegetarian meal the non vegetarian meal and you'll see that for non

06:34.750 --> 06:41.230
vegetarian meals you have a chicken burger you have a packing that's a wrapper in the price and for

06:41.230 --> 06:47.350
the drinks you have Pepsi and the price thirty five and you have coke for vegetarian meal so this is

06:47.350 --> 06:49.860
what I'm looking for in this assignment.

06:50.020 --> 06:54.850
A lot of it is building up the hierarchy for all the different items and then you adding the builder

06:54.850 --> 07:01.810
pattern to to add the correct items to the list with correct and then you get prices and so forth.

07:01.810 --> 07:04.380
So in this case we're actually adding more than just strings.

07:04.510 --> 07:08.410
We're gonna be adding items to the list thanks and good luck.
