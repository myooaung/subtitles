WEBVTT

00:05.190 --> 00:06.420
Loan Welcome back.

00:06.640 --> 00:11.610
In this lecture I'd like to talk about the principle of dependency and aversion kind of hear this quite

00:11.610 --> 00:18.270
quite a bit in a lot of terminology in a lot of different resources.

00:18.300 --> 00:23.980
It's a principle that states that entities must depend on abstractions and not on concrete actions.

00:24.150 --> 00:29.510
Again a common theme that we've seen in many different lectures so far all about these interfaces right.

00:29.520 --> 00:33.800
These abstractions not concrete classes right.

00:33.810 --> 00:38.600
So you have this client and it really just uses these interfaces.

00:38.640 --> 00:44.060
The goal is to reduce dependencies on concrete classes uses views as little as possible.

00:44.100 --> 00:50.760
The concrete class that you have to from the client side abstraction should not depend upon the details.

00:50.780 --> 00:52.730
That's the whole point of an abstraction.

00:52.730 --> 00:59.390
It should only depend upon the abstractions high level classes must not depend on the low level classes

01:00.290 --> 01:04.440
both high level classes and low level classes should depend upon abstractions.

01:04.460 --> 01:09.830
Again it's all about abstractions the lower level class implementation is accessible to the higher level

01:09.830 --> 01:16.960
class the and abstract interface actual implementation of lower level classes can then vary.

01:17.160 --> 01:23.160
You have the separation you can utilize abstractions you can change things much easier because you don't

01:23.160 --> 01:29.610
have to change the abstraction and you're only utilizing the abstraction the inversion name in this

01:29.610 --> 01:36.060
principle is there because it inverts the way you typically might think about your and your own design.

01:36.060 --> 01:38.640
Typically when you design things you think OK.

01:38.670 --> 01:47.460
Top to bottom dependencies and so forth with both the high level and the low level classes you now invert

01:47.460 --> 01:52.190
that and you think of it opposite.

01:52.200 --> 02:00.370
You no longer think in a top to bottom you think in a bottom to top right low level classes are now

02:01.120 --> 02:06.590
dependent upon the high level classes but you take away that dependencies through abstraction.

02:06.620 --> 02:08.340
There's no correlation there.

02:08.380 --> 02:14.610
Both of them are gonna depend on this abstraction this sounds very similar to program through an interface

02:14.640 --> 02:16.660
not to an implementation.

02:16.740 --> 02:22.980
The difference being this actual principle makes an even stronger statement about abstraction.

02:23.070 --> 02:28.560
When we talked about programming into an interface not implementation it's essentially this but this

02:28.560 --> 02:33.860
is even more right because what it's saying is the client should only deal with these interfaces.

02:33.870 --> 02:39.050
He shouldn't deal with concrete classes both of those principals are saying this but this just makes

02:39.170 --> 02:45.070
a stronger statement about abstraction really emphasizes the importance of the abstraction.

02:45.120 --> 02:48.990
This is a central principle underlying the use of many design patterns.

02:48.990 --> 02:54.880
Again that's why we're looking at these principles so you have to invert your thinking.

02:55.100 --> 02:56.240
So let's look at an example.

02:56.240 --> 02:58.400
Let's say we need to implement a pizza store.

02:58.400 --> 03:02.200
What's the first thought that pops in your head God.

03:02.290 --> 03:07.160
Think for a second what's the first thought that pops in your head while usually you start at the top

03:07.160 --> 03:08.790
and go to the bottom right.

03:08.810 --> 03:15.900
You start designing the top level classes and you follow them down to the concrete classes however you

03:15.900 --> 03:21.660
do not want your store to know about these concrete concrete pizza types because then the pizza store

03:21.960 --> 03:27.660
is going to be dependent on all those concrete classes so you want to invert you thinking instead of

03:27.660 --> 03:30.910
starting at the top you want to start at the pizzas.

03:30.960 --> 03:37.050
The lower classes and think about what you can extract the pizza itself is the abstraction is what you're

03:37.050 --> 03:39.780
going to come to.

03:39.870 --> 03:45.310
So you're different concrete pizza types depend only on an abstraction and so does your store.

03:45.320 --> 03:48.130
The two of them are not coupled together.

03:48.570 --> 03:52.010
So the initial design where the store dependent on the concrete classes.

03:52.260 --> 03:58.470
When you thought of a top down design that can be inverted to have the design abstract those two dependencies

03:59.710 --> 04:05.380
the top to the bottom the the interface to the actual or the base class to the subclass.

04:05.510 --> 04:09.290
You don't have to think of the pizza store and then the pizzas below it.

04:09.410 --> 04:12.730
You now think of the pizzas depending on an abstract class in the pizza store.

04:12.730 --> 04:16.430
Depending on an abstract class they're now independent of one another.

04:16.550 --> 04:18.250
They don't have those dependencies.

04:18.350 --> 04:23.810
It's a different way of thinking because again usually you think in a top down manner.

04:23.810 --> 04:30.610
But if we think as where the pizza is the abstraction we have much more benefits to this.

04:30.610 --> 04:36.260
And so I got this example from head first design patterns and I want to show you an illustration in

04:36.260 --> 04:42.970
one second but if the pizza store is the high level class its behavior can be defined in terms of pizzas.

04:43.430 --> 04:50.000
It creates all the different pizza objects and prepares bakes carts and boxes the pizzas the pizzas

04:50.300 --> 04:57.140
are gonna use all the low level classes pizza it uses are low level classes so the pizza implementations

04:57.440 --> 05:04.100
are now things like veggie pizza New York style Chicago style the pizza store class is independent.

05:04.100 --> 05:08.970
Upon these concrete pizza classes there's no dependency there.

05:10.000 --> 05:14.410
So what this principal is telling us is we should write our code so that we are depending on abstractions

05:14.740 --> 05:16.600
not on these concrete classes.

05:16.750 --> 05:21.010
So the client is just going to see the after action.

05:21.010 --> 05:24.460
This applies to both high level classes and low level classes.

05:24.460 --> 05:29.260
We can create an abstract class named pizza the pizza store and the concrete pizzas.

05:29.260 --> 05:30.920
Both depend on the pizza class.

05:30.940 --> 05:33.280
That's the abstraction.

05:33.280 --> 05:37.960
Let's take a look at an example with an illustration here and again I took this from headfirst design

05:37.960 --> 05:44.020
patterns because it was such a good example I couldn't resist our pizza store only depends on the pizza

05:44.020 --> 05:45.510
the pizzas the abstraction.

05:45.610 --> 05:51.230
That's the abstract class the concrete pizza classes depend on the abstraction as well.

05:52.860 --> 05:59.340
They implement this pizza interface and all these different types of pizzas can be created New York

05:59.340 --> 06:06.180
style cheese pizza New York style clam pizza pepperoni pizza Chicago style pepperoni pizza all these

06:06.180 --> 06:13.530
nice things but the pizza store is now not directly coupled to the concrete classes you have that abstraction

06:13.530 --> 06:16.850
that pizza abstraction.

06:17.040 --> 06:23.100
What are the advantages of following this principle and providing this abstraction the obvious one is

06:23.610 --> 06:24.650
the coupling.

06:24.650 --> 06:31.570
There is no no more dependencies between the top classes and the lower level classes before each higher

06:31.570 --> 06:36.250
level class was tightly coupled with the low covert level concrete class that's taken away because we

06:36.250 --> 06:42.610
now provide the abstraction and in the past what happened was any change in the lower level class had

06:42.610 --> 06:45.480
a ripple effect to the next higher level class.

06:45.670 --> 06:53.170
So it was extremely costly to maintain this whole hierarchy and functionality of layers this dependency

06:53.170 --> 06:58.150
inversion principle introduces this layer of abstraction between the higher level class and lower level

06:58.150 --> 06:59.480
concrete class.

06:59.560 --> 07:04.510
Now the higher level class only depends on the abstraction and the lower level class can be modified

07:04.540 --> 07:11.690
or extended without worrying about screwing up that high level class all the lower level class has to

07:11.690 --> 07:13.760
do is adhere to the contract with the interface.

07:13.760 --> 07:19.990
The abstraction itself principle basically provides loose coupling between these higher low level classes

07:20.300 --> 07:26.300
by introducing that abstraction layer very very beneficial for maintain maintenance finding and fixing

07:26.300 --> 07:30.720
bugs adding new functionality and also extension adding that new functionality is much easier now.

07:32.850 --> 07:39.310
Some of the guidelines that you want to follow so that you adhere to this principle are no variable

07:39.310 --> 07:42.850
should hold a reference to a concrete class.

07:42.890 --> 07:46.880
We had an example of this previously right in the past.

07:46.880 --> 07:51.680
You can create instance of objects you have to know those instances or you could call like a get method

07:52.520 --> 07:56.160
to get method is essentially using a factory pattern.

07:56.190 --> 07:58.770
You don't have to actually know anything about the concrete class.

07:58.790 --> 08:04.390
If you use a factory design pattern and so that's what this principal is saying is use that get method.

08:04.410 --> 08:10.260
Never have a new on the concrete class whenever you want to get your concrete class instance you say

08:10.290 --> 08:12.690
get and use the factory pattern.

08:12.750 --> 08:15.120
This will become clearer when we talk about the factory pattern.

08:15.360 --> 08:22.970
But what's happening here is you're not using new no class should subclass from a concrete class if

08:22.970 --> 08:24.690
you subclass from a concrete class.

08:24.830 --> 08:31.600
You're depending on that concrete class you want to always subclass from an abstraction and this would

08:31.600 --> 08:35.610
be an interface or an abstract class even own interface you implement it.

08:35.740 --> 08:40.510
You're still actually providing sort of a subclass to it right because you can now pass around the interface

08:41.140 --> 08:45.490
but an after class it could also be used.

08:46.270 --> 08:51.280
No method should override and implement and method of any of its base classes.

08:51.280 --> 08:55.360
If you override implement and method then your base class was not really an abstraction to start with

08:56.870 --> 08:57.310
right.

08:57.360 --> 08:59.500
Do you see what that point means there.

08:59.500 --> 09:04.720
If it would give them traction you would need to override it method methods implemented in the base

09:04.720 --> 09:09.500
class are meant to be shared by all of your subclasses.

09:09.520 --> 09:13.400
You may be asking yourself what you mean I can't override any implemented method.

09:13.450 --> 09:17.050
What do you mean I can't subclass from any concrete class.

09:17.050 --> 09:18.210
You don't always know.

09:18.250 --> 09:25.030
I mean there are cases where this may not apply but the benefits of applying this is that a loose coupling

09:25.460 --> 09:26.700
and so you strive for this.

09:26.700 --> 09:29.300
You try to do this as much as you can right.

09:29.320 --> 09:31.400
You try not to subclass McCosker class.

09:31.480 --> 09:37.210
You try not to override any implement and methods in the base classes because again that's a smell of

09:37.300 --> 09:41.430
a design flaw in the sense that it's not really an abstraction.

09:41.530 --> 09:46.830
If you're overriding so this is a guideline as I mentioned you should strive for.

09:46.930 --> 09:50.720
It's not a rule that you can follow all the time it all depends on the situation.

09:50.790 --> 09:54.790
If you have a class that's not likely to change you know that this class is not going to change a lot

09:55.180 --> 09:59.880
then it may be okay to instantiate a concrete class using the new operator right.

09:59.930 --> 10:01.480
There's not a lot of damage done.

10:01.700 --> 10:08.300
So for example we instantiate String objects all the time and this violates the principle but the String

10:08.300 --> 10:10.790
class is never going to change right.

10:10.850 --> 10:17.690
So it would be useful to just basically say new on the String objects like we do because it's never

10:17.690 --> 10:18.060
changing.

10:18.070 --> 10:19.940
It's not it's not a class that changes much.

10:19.940 --> 10:23.930
So who cares if it violates the principle.

10:24.000 --> 10:28.460
You should internalize these guidelines and have them in the back of your mind when you design.

10:28.500 --> 10:33.570
So if you notice that you're starting to subclass a lot of concrete classes think to yourself it's just

10:33.570 --> 10:35.040
going to create more coupling.

10:35.160 --> 10:36.510
It's going to be more tightly coupled.

10:36.510 --> 10:38.790
Am I really adhering to DSP.

10:38.790 --> 10:39.660
No you're not.

10:39.660 --> 10:44.670
If you're doing a lot of override override and methods of a base class think of that coupling that now

10:44.880 --> 10:48.050
applies there or especially if it's an after class think of hey.

10:48.060 --> 10:49.310
This is not really abstraction.

10:49.320 --> 10:54.150
I didn't design this correctly to better demonstrate this principle.

10:54.150 --> 10:56.400
Let's again look at an example an intelligent

11:03.170 --> 11:05.250
spring up our intel Jay.

11:06.160 --> 11:09.910
We're going to name this example our dependency inversion.

11:09.910 --> 11:12.140
Example.

11:12.240 --> 11:19.210
Second see in this I wish I could automate this but dependency I could cut it out of the video but students

11:19.210 --> 11:32.170
like to see typing from my experience so dependency inversion example and finish that up let's create

11:32.170 --> 11:32.970
a class.

11:33.040 --> 11:39.500
This first example is going to demonstrate a coupling between a password in a database.

11:39.910 --> 11:44.270
It's not a real you know it's more of a concise conceptual example.

11:44.320 --> 11:46.860
So bear with me it will make more sense.

11:46.870 --> 11:49.270
Let's say I have a class and it's named.

11:49.300 --> 11:50.700
It's called Password reminder.

11:50.710 --> 11:55.110
Some kind of password reminder class inside this class.

11:55.180 --> 11:58.910
Let's say I have a db connection right.

11:58.930 --> 12:03.910
Let's say the connection actually is an integer so let's say DV connection

12:06.790 --> 12:16.060
and then my constructor for my password reminder is going to take my secret connection.

12:16.070 --> 12:19.790
And again bear with me this code may not compile because it has objects that have been created yet.

12:20.560 --> 12:28.580
But let's say it has this DB connection and it's another class it's a my secret connection mice equals

12:28.630 --> 12:34.240
a database manager and all this constructor is going to do is it's going to assign its member variable

12:35.350 --> 12:40.130
to the one passed in which is very common and constructors.

12:40.140 --> 12:45.780
OK conceptually again we have a member variable in my sequel connection.

12:47.070 --> 12:54.170
Now this object my school connection to low level module the password reminder is a high level module

12:54.190 --> 12:55.860
high level class.

12:55.930 --> 13:02.300
My sequel low level class password reminder high level class according to the dependency and principle

13:03.020 --> 13:06.590
we have to depend on an attraction not on concrete ins.

13:06.710 --> 13:12.710
So this code is violating this principle because the password reminder class is being forced to depend

13:12.950 --> 13:16.440
on the My School connection class right.

13:16.440 --> 13:21.300
If you were to change the database engine in the future you would also have to change his password reminder

13:21.300 --> 13:27.510
class and this also violates the open closed principle.

13:27.630 --> 13:28.740
Do we see that.

13:29.150 --> 13:34.970
So the past reminder class should not care what database your application uses.

13:35.050 --> 13:38.300
It's a high level and low level classes should depend on an abstraction.

13:38.320 --> 13:44.290
We should code to an interface violating couple principles here.

13:44.470 --> 13:51.800
So what we'd want to do is we want to create an interface right that represented our DB connection or

13:51.970 --> 13:52.840
database connection

13:56.410 --> 14:04.030
and you know we can have our interconnect method in here returns and it posit number 4 if it works.

14:04.030 --> 14:06.610
Negative number 4 doesn't.

14:06.760 --> 14:11.920
Now this interface has connect method in the My School connection class would implement this interface

14:12.500 --> 14:12.900
right.

14:12.910 --> 14:20.170
So we would have something like class mice equal connection implements

14:23.120 --> 14:31.540
this DB connection interface would have some logic to actually do the connection.

14:32.140 --> 14:39.430
All right in this case we don't know what the logic is so we're just going to say return one for success.

14:39.430 --> 14:44.830
And now the constructor of the password reminder class should accept the interface as a parameter not

14:44.830 --> 14:48.740
the mice equal parameter.

14:48.750 --> 14:53.610
This would mean that no matter what the type of the database this application uses password reminder

14:54.490 --> 15:00.660
it can easily connect to the database without any problems and the open closed principles not violated

15:00.660 --> 15:02.310
as well.

15:02.310 --> 15:10.000
So here we would basically still instead of having our are private we would have our private int D.B.

15:10.020 --> 15:12.020
connection.

15:12.180 --> 15:13.380
This would not be an int though.

15:13.380 --> 15:24.600
This would be the interface reference and in our constructor we would take the DV the interface and

15:24.600 --> 15:27.470
then we would just sign it.

15:27.480 --> 15:33.450
So now you'll notice that the password reminder which is a high level class has no dependencies on the

15:33.450 --> 15:40.670
low level class of my school connection password reminder depends on the abstraction db connection interface.

15:40.670 --> 15:47.120
My secret connection the lower level class also depends on the enter after action db connection interface.

15:47.120 --> 15:52.530
You can change my secret connection without having to effect the client right.

15:52.970 --> 15:59.950
And so this is the dependency inversion principle the loose coupling the Independent in again it looks

15:59.950 --> 16:04.450
very very similar to programming to an interface but it really just is more strict.
