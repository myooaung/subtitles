WEBVTT

00:05.260 --> 00:06.890
Hello class and welcome back.

00:06.890 --> 00:11.740
I'm gonna go through one more example of implementing the adapter design pattern using composition.

00:11.740 --> 00:12.820
This is the object.

00:12.910 --> 00:17.700
Adapt their implementation with one in the last class and it was a pretty good example.

00:17.710 --> 00:23.860
But I want to provide another one that shows you a little bit more information.

00:24.490 --> 00:30.910
We'll name this project the adapter object composition.

00:30.900 --> 00:34.960
Example 2.

00:35.290 --> 00:39.760
In this example we're going to have two incompatible interfaces that can't talk to one another.

00:39.790 --> 00:44.880
I want to demonstrate an application that use the adapter to calculate the area of different shapes.

00:45.040 --> 00:47.840
So we have two shapes a rectangle on a triangle.

00:47.890 --> 00:51.120
I'm going to show you how it's currently implemented and the current implementation.

00:51.160 --> 00:54.320
We can calculate the area of the rectangle very easily.

00:54.340 --> 00:57.780
We basically use this calculator class and get area method.

00:57.880 --> 01:03.280
The area method takes a rectangle object as input and everything works great but you'll see in this

01:03.280 --> 01:05.980
current permutation we can't do the same for the triangle.

01:06.040 --> 01:10.930
The calculator interface is incompatible with the triangle to get area math that does not take a triangle

01:10.960 --> 01:11.930
object as input.

01:12.540 --> 01:14.880
And so this will allow us to create an adapter.

01:15.070 --> 01:21.250
So first let me create my rectangle and it's a very simple class.

01:21.480 --> 01:29.180
It's just going to this rectangle class will just be a full gel plain old Java object with just a couple

01:29.190 --> 01:30.030
data attributes.

01:30.030 --> 01:38.670
So going to say class rectangle and it's going to have something for length with double double double

01:39.030 --> 01:43.460
double W and then we'll also have our triangle class in here.

01:43.470 --> 01:47.160
Just for simplicity.

01:47.160 --> 01:53.390
This will also just have some data attributes and also a constructor.

01:53.820 --> 02:00.840
So here will say public double B or let's make these good names linked

02:04.500 --> 02:05.010
with

02:08.120 --> 02:11.900
and base base and height.

02:12.010 --> 02:19.140
These are the attributes of a triangle.

02:19.140 --> 02:19.800
Public.

02:20.010 --> 02:22.110
All right.

02:22.150 --> 02:24.390
And then our constructor

02:28.740 --> 02:30.060
which will take two doubles

02:35.160 --> 02:40.700
and set up its member variables base equals B height equals H.

02:40.860 --> 02:46.770
Pretty basic These are the two classes and we'll look at how they're incompatible with the interface

02:46.770 --> 02:49.550
that's created which would be in the next step.

02:51.930 --> 03:00.910
So here's an interface that the client would use to create a new interface class.

03:01.330 --> 03:04.030
We're gonna call this calculator interface

03:10.710 --> 03:13.230
and this is just going to have one method.

03:13.230 --> 03:19.080
This is gonna be the target interface.

03:19.260 --> 03:25.590
This is gonna be public double gate area and it takes a rectangle.

03:26.340 --> 03:28.900
So right off the bat you see how limited that is.

03:28.980 --> 03:34.180
This interface will not work with triangles and we wanted to work with triangles.

03:34.820 --> 03:35.050
Right.

03:35.060 --> 03:38.240
So now that means we're gonna have to write an adapter.

03:38.470 --> 03:43.680
And so if you kind of visualize this project how it's implemented the target is gonna be the calculator

03:43.680 --> 03:44.880
interface right.

03:44.880 --> 03:53.060
This is the interface that a triangle uses to get its area the client is going to is is the current

03:53.060 --> 03:58.010
client cannot use a triangle to get its area.

03:58.010 --> 04:03.870
Little triangles incompatible with the calculator you need to collaborate the client's gonna need to

04:03.870 --> 04:08.390
collaborate with the calculator adapter which confer forms through the calculator interface.

04:08.640 --> 04:11.160
The adapter is going to be the calculator.

04:11.160 --> 04:18.930
That's the existing interface that needs adapting the adapter is gonna be called calculator adapter

04:18.930 --> 04:21.920
that adapts the calculator to the calculator interface.

04:22.080 --> 04:26.400
So let's look at the class that implements this calculator interface.

04:26.520 --> 04:33.290
This is gonna be the adaptive the existing interface that needs adapting this calculator currently calculates

04:33.300 --> 04:36.620
area of a rectangle but we need to calculate the area of a triangle.

04:36.630 --> 04:38.910
So here is our class calculator.

04:39.150 --> 04:46.230
So class calculator implements the calculator interface.

04:47.100 --> 04:51.510
And this is going to have a rectangle and you see how this is very limited because the count the gate

04:51.510 --> 04:53.110
area only takes a rectangle.

04:53.130 --> 04:54.690
So we have a rectangle object

04:57.710 --> 04:59.100
and then we say public.

04:59.640 --> 05:01.920
We implement our interface method.

05:02.400 --> 05:10.520
We say public double get area rectangle R.

05:11.730 --> 05:23.460
And this is going to set the member variable and then it's going to return the rectangle length times

05:23.460 --> 05:28.840
of rectangle dot with right calculating their rectangle pretty straightforward.

05:29.010 --> 05:31.590
Again as I mentioned this only takes a rectangle.

05:31.590 --> 05:35.430
It doesn't take a triangle so it's not going to work with triangles.

05:35.430 --> 05:39.030
And so this calculator interface for the client is not very useful.

05:39.090 --> 05:40.650
So we have to write an adapter.

05:40.800 --> 05:42.780
Perfect spot for an adapter.

05:42.810 --> 05:47.510
And again what happens here is the adapter is gonna be the calculator adapter.

05:47.670 --> 05:50.610
It's going to adapt the calculator to the calculator interface.

05:50.640 --> 05:57.090
It's going to adapt this to this and they adapt these the calculator.

05:57.090 --> 05:58.800
That's what needs adapting.

05:58.800 --> 06:01.820
And the client will be able to work with the triangle.

06:02.100 --> 06:07.500
So let's write the calculator adopt the adapter and say new Java class

06:10.230 --> 06:12.430
calculator adapter.

06:13.900 --> 06:16.350
And this is going to implement our calculator interface

06:19.080 --> 06:20.280
because that's the target.

06:21.450 --> 06:25.200
So calculator interfaces is the target.

06:25.200 --> 06:29.280
We're going to have a calculator as a composition relationship right.

06:29.280 --> 06:34.490
We know that because this is the adapter.

06:35.580 --> 06:36.650
Something like that.

06:36.810 --> 06:42.560
We're also going to have a triangle in here because we need to take the triangle and use it.

06:42.690 --> 06:44.520
We need its attributes in order to adapt.

06:46.050 --> 06:47.700
So we're gonna say triangle T.

06:47.880 --> 06:49.110
And then in our constructor

06:52.600 --> 06:53.700
it's going to take a triangle

06:57.370 --> 07:04.160
and it's just going to set up the member variable T equals my trunk.

07:05.130 --> 07:12.750
Now get area method will allow us to convert the rectangle to a triangle.

07:13.140 --> 07:15.900
So get area remember that takes a rectangle.

07:15.900 --> 07:16.770
That's what we're implementing

07:21.030 --> 07:23.280
inside here.

07:23.280 --> 07:24.650
We're going to create a new calculator.

07:28.890 --> 07:33.270
So in calls remember method.

07:33.750 --> 07:40.830
And we're going to get our rectangle to create a new Rectangle because we need to pass on a rectangle

07:40.830 --> 07:44.010
to the existing interface.

07:44.410 --> 07:44.590
Right.

07:44.880 --> 07:52.550
New rectangle sorry.

07:53.910 --> 07:58.030
And then we're going to calculate the area of a triangle which is zero point five times the base times

07:58.030 --> 07:58.420
the height.

07:58.500 --> 08:01.720
But we have to set it to rectangle attributes.

08:01.800 --> 08:15.150
So we have to see are dot length is going to equal triangle dot base and our dot with is going to equal

08:15.150 --> 08:16.500
our triangle.

08:16.560 --> 08:21.840
So we're gonna do zero point five times the triangle height T dot.

08:22.220 --> 08:22.500
Right.

08:23.770 --> 08:25.440
And that's gonna be our conversion.

08:25.440 --> 08:28.950
Then we can call the calculator method.

08:28.950 --> 08:36.410
We can just return calculator dot get area passing in the rectangle that we just created.

08:36.510 --> 08:39.360
That's converting the triangle to a rectangle.

08:39.360 --> 08:41.220
And that's what our adapter does again.

08:41.370 --> 08:46.650
Has he has a relationship with the calculator that's adapting the calculator to the target interface

08:46.650 --> 08:48.680
which is calculator interface.

08:48.750 --> 08:53.940
It's doing that by implementing the get area method and basically converting the triangle to a rectangle

08:54.540 --> 08:57.540
and then calling to get area method on that rectangle.

08:57.540 --> 09:02.990
Now let's look at a client to see how this can be used.

09:03.000 --> 09:05.580
Let's create a new client.

09:08.250 --> 09:11.780
And this will use the adapter pattern.

09:11.910 --> 09:15.780
So we're gonna print out nice little message saying that we're using the adapter pattern

09:20.060 --> 09:22.090
something like adapter pattern demo.

09:22.090 --> 09:33.950
And this needs to be inside a main.

09:36.080 --> 09:42.270
And what this is doing to it's going to create a new triangle so triangle t equals new triangle.

09:42.260 --> 09:45.890
It's gonna back pass and 20 and 10 as the base in height

09:49.890 --> 09:55.910
and then we're gonna use our calculator interface to create a new calculator adapter

10:02.290 --> 10:12.230
so there is a new calculator adapter and we're gonna pass in our triangle that we just created T.

10:12.830 --> 10:16.380
Now we can actually display the area of the triangle.

10:16.430 --> 10:23.270
So if we say system dot out the front line front line area of the triangle is

10:26.000 --> 10:32.570
Cal dot get area and we actually don't have to pass anything in for this.

10:32.570 --> 10:37.500
So we've pass a null because the rectangles.

10:37.500 --> 10:40.280
Now we already set it within the constructor so

10:43.910 --> 10:51.020
something like that would pass and now because we don't have an actual rectangle T in the constructor

10:51.040 --> 10:56.030
data and so we didn't change the interface we could add another method to get area but we won't have

10:56.030 --> 10:57.140
to change the interface.

10:57.140 --> 11:00.840
The Gary method taking a triangle.

11:00.840 --> 11:08.390
And now when we're running compile this we'll be able to see that the Triangle area is being calculated.

11:08.540 --> 11:16.280
We want to make sure that we don't have any duplication here with our parameters.

11:16.770 --> 11:16.980
Right.

11:17.000 --> 11:18.800
And the adapter we don't even use the R.

11:18.830 --> 11:23.300
We just have to adhere to the interface.

11:23.450 --> 11:25.580
That's why we set it the No.

11:29.240 --> 11:31.880
Hopefully this will compile more dumb mistakes

11:34.750 --> 11:43.990
so now when we run it we can see that we're able to get the triangle and I forgot the change last one

11:44.250 --> 11:45.140
is the rectangle.

11:45.140 --> 11:46.540
So another dumb mistake.

11:46.660 --> 11:47.360
Here we go.

11:49.070 --> 11:51.040
So now hopefully this will work.

11:51.040 --> 11:51.990
Apologize.

11:52.000 --> 11:55.750
I know some of you are doing me for this and give me some bad reviews saying he makes too many mistakes

11:55.780 --> 12:01.480
but I'm not perfect and I do make mistakes so I apologize.

12:01.480 --> 12:08.970
Now hopefully we'll see that the area of the Triangle is one hundred and that is correct.

12:08.980 --> 12:15.370
So again just another nice example the adapter using object composition adapting what what are we adapting

12:16.270 --> 12:25.000
we're adapting the actual calculator to the calculator interface we're allowing now to be able to compute

12:25.000 --> 12:32.230
areas of triangles we just did all this conversion in the adapter the most important thing here is the

12:32.230 --> 12:34.960
adapter and this important does not need to be there.

12:35.260 --> 12:36.040
So I hope this helps.

12:36.040 --> 12:36.460
Thank you.
