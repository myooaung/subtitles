WEBVTT

00:05.460 --> 00:05.730
Hello.

00:05.730 --> 00:07.210
Welcome welcome.

00:07.380 --> 00:13.270
In this lecture we're going to implement the solution to the previous challenge which was implementing

00:13.270 --> 00:17.600
a strategy interface mainly performing mathematical operations.

00:17.640 --> 00:24.330
Let's go ahead and bring this idea up our intelligence a idea which is really useful and awesome right.

00:24.330 --> 00:29.280
We're going to create a new project that's gonna be called the strategy solution and the first thing

00:29.280 --> 00:34.740
we'll probably do is Pi create our strategy interface which we'll just have one method in it which is

00:34.740 --> 00:36.540
the perform operation.

00:36.660 --> 00:40.200
So we're gonna name this strategy solution

00:43.060 --> 00:43.540
all right.

00:43.550 --> 00:52.510
So let's say new Java class we're gonna name this our strategy interface strategy and like I said it

00:52.510 --> 01:00.870
just has one method it's gonna have a public and perform operation.

01:01.090 --> 01:08.140
It's gonna take two numbers num 1 and 2 Very nice.

01:08.310 --> 01:11.890
The concrete strategy classes that we have to implement there's gonna be three of them one for adding

01:11.890 --> 01:13.550
subtracting and multiplying.

01:13.960 --> 01:26.930
And so the first one is gonna be class operation add implements of strategy.

01:27.760 --> 01:31.830
You can override or perform operation.

01:31.830 --> 01:38.360
So it's gonna be public and perform operation and the implementation is gonna be very very straightforward.

01:38.400 --> 01:45.150
We're just gonna add two numbers together.

01:45.150 --> 01:51.900
So here we're gonna just say return num 1 plus number 2.

01:52.050 --> 01:56.580
And that's really how all of our Cockney classes are gonna look like very similar just performing different

01:56.580 --> 02:01.020
operations not equals plus.

02:01.080 --> 02:10.110
And so wi fi go out and copy paste this for efficiency you know we're gonna need two of them.

02:10.110 --> 02:17.880
And again one is gonna be subtract and one will be multiply operations tracked is just gonna be number

02:17.880 --> 02:22.740
one minus num to Operation multiply

02:25.120 --> 02:28.950
is just gonna be multiplication.

02:28.950 --> 02:31.860
Very very straightforward.

02:31.970 --> 02:34.560
The next thing we need to do is we need to create our context.

02:34.640 --> 02:39.080
So we're gonna say new Java class context

02:41.760 --> 02:44.270
just like we're going to implement our contacts.

02:44.270 --> 02:46.660
So that strategy is passed to it.

02:46.770 --> 02:51.540
So we don't need anything in really in here other than a simple method that takes a strategy object

02:51.570 --> 02:54.200
in the two numbers that it needs to execute the strategy.

02:54.420 --> 02:54.560
Right.

02:54.570 --> 02:57.580
We don't need a reference to a strategy we don't need a constructor.

02:57.630 --> 03:04.770
So what we're gonna do is we're just gonna say public and execute strategy and this is gonna take a

03:04.770 --> 03:05.700
strategy object.

03:05.700 --> 03:08.880
We're gonna have it take the route the interface will strategy

03:11.780 --> 03:19.140
and then we're gonna have to take our numbers number one and number two.

03:20.010 --> 03:29.080
And then this is just gonna be a pass through it's going to return strategy dot perform operation Number

03:29.080 --> 03:32.910
One Number Two and very clean.

03:33.040 --> 03:35.050
Nice implementation.

03:35.050 --> 03:38.830
Last thing we need to do is create the client.

03:38.880 --> 03:41.660
We're going to say new Java class or to call this one client.

03:42.990 --> 03:45.900
And this is gonna need to have a main method.

03:45.900 --> 03:52.090
This is gonna use the context to see the change in behavior when it changes the strategy.

03:52.170 --> 04:03.250
So public static void main String args we'll create our context and we'll just name it context.

04:03.250 --> 04:12.980
So in new context and in this case the context is going to take remember the context doesn't have a

04:13.910 --> 04:17.030
constructor so it's going to not take anything to the constructor.

04:17.460 --> 04:24.250
You say new context and then we can pretty much do our print our output why we execute strategy.

04:24.260 --> 04:33.930
So we're gonna say system that out up front line and we're going to say actually probably yeah we'll

04:33.930 --> 04:35.150
start in a local variable.

04:35.280 --> 04:41.210
So what's the end result equals context dot excuse strategy.

04:41.300 --> 04:52.980
And here we'll say new operation add as our first parameter and then we're gonna say 10 and 5 has our

04:52.980 --> 04:56.200
other parameters and then we can just print out the result.

04:56.340 --> 05:06.900
We can say with some context we could say 10 plus five equals plus result just like that and then you'll

05:06.900 --> 05:14.370
notice if we change strategies by changing what we pass to the excuse strategy method we'll see different

05:14.370 --> 05:14.740
results.

05:14.730 --> 05:18.810
So let's go ahead and copy and paste this to check our other strategies.

05:18.990 --> 05:26.940
And in this one instead of Operation ad we'll do operation multiple operations tracked and then we'll

05:28.300 --> 05:29.350
use the same variable.

05:29.350 --> 05:36.490
So just something like that and we'll make sure that we have the right output do the same for multiply

05:38.900 --> 05:45.590
instead of creating an operation add we'll create an operation multiply class for strategy and then

05:45.590 --> 05:48.580
here would be ten times five.

05:48.620 --> 05:54.890
Now we try to build this and run it and you'll see different strategies being run at runtime with different

05:54.890 --> 05:55.430
results

05:59.390 --> 06:07.570
and we say run client Main and we see 10 plus 5 15 10 minus five equals five 10 times five equals 50.

06:07.600 --> 06:14.920
Very straightforward nice implementation clean plantation not a huge huge problem but a nice implementation

06:14.920 --> 06:17.650
that demonstrates a strategy design pattern.

06:17.650 --> 06:20.200
Please let me know if you have any questions the Q and A thank you.
