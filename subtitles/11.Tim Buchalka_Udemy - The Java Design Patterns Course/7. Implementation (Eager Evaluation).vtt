WEBVTT

00:05.140 --> 00:06.090
Hello and welcome.

00:06.210 --> 00:09.280
In this lecture I want to show you another approach to implementing Singleton.

00:09.290 --> 00:14.450
This is called the eager evaluation approach in eager initialization the instance of the singleton class

00:14.450 --> 00:16.790
is created at the time of class loading.

00:16.790 --> 00:19.750
This is the easiest method to create a singleton class.

00:19.790 --> 00:24.110
It has a drawback that the instance is created even though the client application might not be using

00:24.110 --> 00:30.800
it using this approach rely on the JVM to create the unique instance of the singleton when the class

00:30.800 --> 00:31.710
is loaded.

00:31.980 --> 00:37.330
The JVM Java Virtual Machine guarantees that the instance will be created before any thread access this

00:37.670 --> 00:39.800
accesses the static unique instance variable.

00:39.900 --> 00:46.860
So it is thread safe what happens in this approach is you create instance to the Singleton in a static

00:46.860 --> 00:51.870
initialize or the code is guaranteed to be thread safe because you no longer have an F check inside

00:51.870 --> 00:53.100
your get instance method.

00:53.130 --> 00:57.630
So we just say private static singleton unique instance equals new Singleton.

00:57.710 --> 01:04.010
It's very simple we just have basically return the unique instance inside the get instance where do

01:04.010 --> 01:04.640
you have an instance.

01:04.640 --> 01:05.480
So we just return it.

01:07.220 --> 01:09.670
So as you can notice it's quite easy to implement.

01:09.920 --> 01:13.510
All you do is you say new Singleton create the instance class loading time.

01:13.610 --> 01:14.500
It's pretty straightforward.

01:14.500 --> 01:18.170
You still have your get instance and you just return unique instance

01:20.970 --> 01:27.440
if you're singleton classes not using a lot of resources then the eagle initialization is the approach

01:27.440 --> 01:34.480
to use sometimes you're hear this referred to as eager instantiation initialization is just creating

01:34.480 --> 01:41.510
an instance in most of the scenarios singleton classes are created for resources such as a file system

01:41.510 --> 01:48.270
a database connection etc. You want to avoid the instantiation until or unless the client calls the

01:48.270 --> 01:55.100
get instance method and so we have one more approach that we're gonna discuss which is the bill pupil

01:55.510 --> 01:57.100
Bill Pugh approach.

01:57.100 --> 02:01.810
He has a different approach to creating the singleton class using an inner static helper class that's

02:01.810 --> 02:03.190
really improving upon this one.

02:03.190 --> 02:09.270
This approach to create the singleton class doesn't require any synchronization it's thread safe and

02:09.280 --> 02:16.350
it only creates the instance when the client needs it and I'm talking about the bill Pugh approach right.

02:16.410 --> 02:21.210
That's why most people use the bill Pugh approach which we'll talk about the bill PR approach is easier

02:21.260 --> 02:25.590
easier to understand and implement and it's regarded as the standard method to implement singletons

02:25.590 --> 02:26.670
in Java.

02:26.670 --> 02:32.850
So we'll talk about that next to eager instantiation is the easiest implementation because again all

02:32.850 --> 02:40.950
you do is you modify and create the new instance right at class loading time and then get instance just

02:40.950 --> 02:41.780
returns it.

02:42.150 --> 02:47.760
And I don't feel the need to go into intelligibility because this code is pretty basic and we pretty

02:47.760 --> 02:52.230
much should have the Singleton memorized by now considering we've already gone through three approaches

02:53.360 --> 02:56.520
so remember that eager instantiation initialization approach.

02:56.630 --> 03:00.290
I'll provide a source code example for the class so you can see it.

03:00.470 --> 03:02.850
But again this is throughout safe.

03:02.870 --> 03:07.290
It just has some issues where it's always going to be created even if you don't need it.

03:07.430 --> 03:09.950
And that's what the bill P approach will solve.

03:09.950 --> 03:10.310
Thank you.
