WEBVTT

00:05.570 --> 00:07.630
Hello and welcome to another challenge.

00:07.730 --> 00:11.810
This challenge is going to test your knowledge on your understanding of the chain of responsibility

00:11.810 --> 00:13.030
design pattern.

00:13.100 --> 00:18.580
We're going to write an error handler application that used the chain of responsibility pattern consider

00:18.580 --> 00:24.660
an application which is handling e-mail or facts errors if we have an email error or fax error.

00:24.880 --> 00:29.850
We need to take care of this issue reported in each of these communications.

00:29.960 --> 00:32.870
We're going to need to write to air handler classes.

00:32.870 --> 00:34.770
These are going to be concrete handlers.

00:34.910 --> 00:38.810
We're going to be named email air handler refactor and they're pretty straightforward.

00:38.940 --> 00:45.980
Email air handler will handle e-mail our email airs only it's not responsible for the facts here's what

00:45.980 --> 00:51.560
it's gonna do is it's gonna pass a message for text and if that tax contains the word email that means

00:51.560 --> 00:56.820
it's an email error fax error handler will handle facts errors and it does not care about any e mailers

00:57.230 --> 01:01.870
so it's gonna do the same thing it's going to pass a message for text that contains the word facts as

01:01.880 --> 01:10.090
instead of email so the requirements you're going to need to create a chain for the error handling whenever

01:10.090 --> 01:14.860
our main application finds an error it's just going to raise this and forward the error with the hope

01:14.860 --> 01:19.550
that one of those handlers will handle it the request will first come to the facts are handled.

01:19.560 --> 01:21.480
That's the first in the chain.

01:21.480 --> 01:26.550
If it finds that it's a fax issue it will handle the request otherwise it will for the issue to the

01:26.560 --> 01:35.410
email error handler the second the chain our chain is gonna end with the email error handler your application

01:35.410 --> 01:42.250
should also be a process both normal and high priority issues from either one of these communications

01:43.270 --> 01:48.520
you'll need to create some helper classes for the priority for message priority this can be an enum

01:49.060 --> 01:55.270
and you also need a message the message can have a test or message priority member variables another

01:55.270 --> 02:01.210
help a class that may be useful for initiating the chain could be issue razor this class could be used

02:01.210 --> 02:07.870
by the client to start the chain your handler interface can have methods to process the message and

02:07.870 --> 02:14.470
set the next chain pretty straightforward there we did that in our previous example here's an example

02:14.470 --> 02:24.430
class diagram we have our message priority which is an enum and that will be well the message will have

02:24.430 --> 02:32.080
a message priority a text and a message will have our client that's going to set the chain of responsibility

02:34.040 --> 02:40.640
and we'll have our two air handler classes with our receiver being the interface and then our air hand

02:40.700 --> 02:47.690
that has two methods in it setting the setting the next chain and processing the message in our two

02:47.710 --> 02:56.070
area handler classes that act as the chain Here's some example output here's where the factory handler

02:56.070 --> 03:01.710
is processing a normal priority issue faxes reaching late to the destination is the message that's their

03:02.610 --> 03:09.240
email handlers then processing next to errors one is high priority 1 is normal priority and the text

03:09.240 --> 03:15.750
is the actual issue is emails not going and in the email PCC field is disabled and then the last one

03:15.750 --> 03:16.740
is fax here.

03:16.740 --> 03:22.890
So you're creating a number of different errors and they're either containing fax or email in the message

03:22.890 --> 03:28.530
here and you're gonna pass that message and then depending on what they contain the right chain the

03:28.530 --> 03:35.010
right object going to handle them other considerations if you need to handle another type of issue such

03:35.010 --> 03:41.790
as an authentication you can easily add another air handler it's very easy to add new errors authentication

03:41.790 --> 03:47.910
error handler because that can just implement our interface whenever the issue cannot be fixed by email

03:47.910 --> 03:53.860
handler the issue can be forwarded to the authentication error handler and the channel and there the

03:53.860 --> 03:58.750
bottom line is as follows the channel and if the issue is being processed by some handler or there are

03:58.750 --> 04:00.700
no more handlers to process it.

04:01.000 --> 04:03.990
In other words we have reached the end of the chain.

04:04.100 --> 04:05.150
So good luck.

04:05.400 --> 04:10.770
You have to implement this using the chain of responsibility pattern in the next lecture I'll provide

04:10.770 --> 04:11.250
a solution.

04:11.250 --> 04:11.690
Thank you.
