WEBVTT
1
00:00:00.050 --> 00:00:01.030
- [Instructor] Okay we have looked

2
00:00:01.030 --> 00:00:04.080
at gender default settings that JSON binding employs

3
00:00:04.080 --> 00:00:08.070
while converting Java to JSON and back to Java.

4
00:00:08.070 --> 00:00:11.050
Now we look at the certain default settings

5
00:00:11.050 --> 00:00:13.020
which are going to be applicable for

6
00:00:13.020 --> 00:00:15.050
the visibility of your properties.

7
00:00:15.050 --> 00:00:18.030
So when I say properties I mean your fields,

8
00:00:18.030 --> 00:00:19.090
or your instance variables that you

9
00:00:19.090 --> 00:00:21.070
have under your Java beans.

10
00:00:21.070 --> 00:00:24.020
Okay, there are certain rules that we have listed out here,

11
00:00:24.020 --> 00:00:25.090
we'll go through them one by one,

12
00:00:25.090 --> 00:00:30.020
and we'll see how JSON binding behaves in each case.

13
00:00:30.020 --> 00:00:33.030
So the first is, let's say you have a private field

14
00:00:33.030 --> 00:00:35.060
with public getter/setters.

15
00:00:35.060 --> 00:00:39.000
So let's go to user bean and check out.

16
00:00:39.000 --> 00:00:42.040
This is exactly what we did, we had all of feeds private

17
00:00:42.040 --> 00:00:47.080
and all the getter/setters lines 33 down there to 63.

18
00:00:47.080 --> 00:00:51.010
All of the getter/setters that we defined were public.

19
00:00:51.010 --> 00:00:54.050
Yes and this is the basic encapsulation principle of

20
00:00:54.050 --> 00:00:56.020
Java object-oriented programming that

21
00:00:56.020 --> 00:00:58.040
all fields should be private

22
00:00:58.040 --> 00:01:00.080
and the getter/setters should be public,

23
00:01:00.080 --> 00:01:02.000
and that's what we did.

24
00:01:02.000 --> 00:01:06.000
And when that happens, yes, the JSON binding API

25
00:01:06.000 --> 00:01:08.000
is going to make sure that it picks up

26
00:01:08.000 --> 00:01:10.040
all the fields for serialization.

27
00:01:10.040 --> 00:01:13.050
That's because it respects the getters/setters first.

28
00:01:13.050 --> 00:01:16.000
So it look at the getter/setters and since they are public

29
00:01:16.000 --> 00:01:18.050
it will quickly understand that yes it can pick them up

30
00:01:18.050 --> 00:01:21.060
in the sense these fields for serialization.

31
00:01:21.060 --> 00:01:24.060
So that's the default thing that we've already seen before.

32
00:01:24.060 --> 00:01:26.080
Let's look at the next combination.

33
00:01:26.080 --> 00:01:30.010
It's a private field with no getter/setters.

34
00:01:30.010 --> 00:01:33.010
So you are trying to have a private field in your bean,

35
00:01:33.010 --> 00:01:34.040
which does not have getter/setters,

36
00:01:34.040 --> 00:01:36.030
so let's understand how that works.

37
00:01:36.030 --> 00:01:40.070
So we'll go ahead and do something, we'll say...

38
00:01:40.070 --> 00:01:44.070
private... we can have let's say long

39
00:01:44.070 --> 00:01:47.080
and creditCardNumber.

40
00:01:47.080 --> 00:01:50.050
So we want maybe to access its credit card number only

41
00:01:50.050 --> 00:01:51.070
in this user bean,

42
00:01:51.070 --> 00:01:53.070
and we don't want that to be accessed outside.

43
00:01:53.070 --> 00:01:55.040
So we're gonna set it inside the bean.

44
00:01:55.040 --> 00:01:57.010
Now if you want to test the scenario,

45
00:01:57.010 --> 00:01:58.070
you will have to make sure that we run

46
00:01:58.070 --> 00:02:01.050
the program right here inside the user class.

47
00:02:01.050 --> 00:02:02.040
That's because we know

48
00:02:02.040 --> 00:02:05.070
the private access modifier rule in Java.

49
00:02:05.070 --> 00:02:09.020
You cannot access the field anywhere outside this class,

50
00:02:09.020 --> 00:02:10.000
okay?

51
00:02:10.000 --> 00:02:13.080
So what I'm going to do, in the user bean itself,

52
00:02:13.080 --> 00:02:17.010
I'll come down, right down, and on line 74 I'm going to

53
00:02:17.010 --> 00:02:18.080
grab the main method here.

54
00:02:18.080 --> 00:02:22.090
So I'll take psvm shortcut, yeah, and control space.

55
00:02:22.090 --> 00:02:26.020
And what we'll do is, we copy the code of our testing class.

56
00:02:26.020 --> 00:02:29.010
So we're going to take this code.

57
00:02:29.010 --> 00:02:35.020
Just go ahead and copy lines 25 to 29,

58
00:02:35.020 --> 00:02:37.020
come back to the user,

59
00:02:37.020 --> 00:02:41.090
and paste them from line 75 to 79.

60
00:02:41.090 --> 00:02:43.090
Okay.

61
00:02:43.090 --> 00:02:46.010
Now once that's done, I of course make sure

62
00:02:46.010 --> 00:02:48.030
that the appropriate imports are provided,

63
00:02:48.030 --> 00:02:49.020
and there we go.

64
00:02:49.020 --> 00:02:50.080
So the user object is ready.

65
00:02:50.080 --> 00:02:55.030
Additionally I'll also set that credit card number to it,

66
00:02:55.030 --> 00:02:57.000
so I don't have to set a field

67
00:02:57.000 --> 00:02:58.080
because we made the field private,

68
00:02:58.080 --> 00:03:03.020
so I'm going to set it directly in this case.

69
00:03:03.020 --> 00:03:05.010
Some number, okay?

70
00:03:05.010 --> 00:03:06.040
Credit card number.

71
00:03:06.040 --> 00:03:10.050
And once we do that,

72
00:03:10.050 --> 00:03:13.070
once we are done with it then...

73
00:03:13.070 --> 00:03:15.080
Okay we have, I think we define the number to

74
00:03:15.080 --> 00:03:17.020
be in digit type,

75
00:03:17.020 --> 00:03:21.060
no, we want a long type, let's go back to...

76
00:03:21.060 --> 00:03:26.040
Line 22, yeah it is indeed long.

77
00:03:26.040 --> 00:03:28.050
It's too long for it, alright.

78
00:03:28.050 --> 00:03:33.050
Okay, so that's the setting.

79
00:03:33.050 --> 00:03:38.020
Now, what we've done is we've set the value for sure,

80
00:03:38.020 --> 00:03:41.010
but we don't know how it is going to be here,

81
00:03:41.010 --> 00:03:43.090
once it actually does the serialization process.

82
00:03:43.090 --> 00:03:46.090
What I mean to say is, along with the ID, the email,

83
00:03:46.090 --> 00:03:48.090
the name, the date of birth,

84
00:03:48.090 --> 00:03:51.040
what happens to the credit card field when

85
00:03:51.040 --> 00:03:54.040
the serialization process happens from Java to JSON.

86
00:03:54.040 --> 00:03:56.030
So I'm going to run this program right here,

87
00:03:56.030 --> 00:04:00.020
and check it out.

88
00:04:00.020 --> 00:04:01.090
You see what the result is?

89
00:04:01.090 --> 00:04:05.090
We got the data but the email, the ID, and the name,

90
00:04:05.090 --> 00:04:08.030
but the credit card number field didn't show up.

91
00:04:08.030 --> 00:04:10.090
That is because since the credit card number field

92
00:04:10.090 --> 00:04:13.020
does not have its own getters/setters,

93
00:04:13.020 --> 00:04:15.090
and as I said JSON binding respects the getter/setters.

94
00:04:15.090 --> 00:04:19.000
So since it does not have that and the field is private,

95
00:04:19.000 --> 00:04:21.010
it will never pick it up for serialization,

96
00:04:21.010 --> 00:04:23.010
that's the rule.

97
00:04:23.010 --> 00:04:24.010
The next one is,

98
00:04:24.010 --> 00:04:27.000
you have public fields without getters/setters.

99
00:04:27.000 --> 00:04:30.050
Alright, so we'll do is we'll modify the same field.

100
00:04:30.050 --> 00:04:35.080
Instead of making the field private on line number 22,

101
00:04:35.080 --> 00:04:38.030
this time we'll make the field public.

102
00:04:38.030 --> 00:04:40.090
And of course we don't have getter/setters even now,

103
00:04:40.090 --> 00:04:42.020
but instead of the private field,

104
00:04:42.020 --> 00:04:44.050
I turned it into a public field.

105
00:04:44.050 --> 00:04:49.070
Now let's go down and let's run this file again.

106
00:04:49.070 --> 00:04:51.020
We'll see the output now,

107
00:04:51.020 --> 00:04:54.060
and do you see that now the credit card number shows up

108
00:04:54.060 --> 00:04:56.050
in the JSON representation.

109
00:04:56.050 --> 00:04:57.090
So that's what it means,

110
00:04:57.090 --> 00:05:00.020
it will first respect the public getters/setters.

111
00:05:00.020 --> 00:05:01.070
If it finds them, good!

112
00:05:01.070 --> 00:05:03.080
It's going to pick the fields for serialization.

113
00:05:03.080 --> 00:05:05.080
Doesn't find them? It's go to the field.

114
00:05:05.080 --> 00:05:07.070
If it's private, it'll ignore it.

115
00:05:07.070 --> 00:05:09.040
But if it's public, yes, good,

116
00:05:09.040 --> 00:05:11.020
again it'll pick it up for serialization.

117
00:05:11.020 --> 00:05:13.050
That's the rule that it goes through when it tries

118
00:05:13.050 --> 00:05:15.060
to do serialization for your fields.

119
00:05:15.060 --> 00:05:16.060
Okay?

120
00:05:16.060 --> 00:05:18.000
The next combination,

121
00:05:18.000 --> 00:05:21.020
it's a public field with private getter/setter.

122
00:05:21.020 --> 00:05:22.070
Which is kind of very odd,

123
00:05:22.070 --> 00:05:24.050
because we never do this kind of situation

124
00:05:24.050 --> 00:05:26.000
in a Java applications.

125
00:05:26.000 --> 00:05:28.080
However, we just take a look at how that behaves.

126
00:05:28.080 --> 00:05:31.080
So let's go to the ID again.

127
00:05:31.080 --> 00:05:34.050
Okay, so we have a public field already,

128
00:05:34.050 --> 00:05:35.030
that's the one.

129
00:05:35.030 --> 00:05:38.000
We'll generate a getter/setter for it first,

130
00:05:38.000 --> 00:05:39.060
and then we make it private.

131
00:05:39.060 --> 00:05:43.010
So I'm going to go on line number 35, right click,

132
00:05:43.010 --> 00:05:46.070
insert code, choose the getter/setter option,

133
00:05:46.070 --> 00:05:48.060
choose that credit card number field,

134
00:05:48.060 --> 00:05:50.060
and say generate.

135
00:05:50.060 --> 00:05:53.000
Okay, and then on line 35 instead

136
00:05:53.000 --> 00:05:56.090
of making the getter public I'm going to make it private.

137
00:05:56.090 --> 00:06:00.080
Similarly I'll make the setter also private.

138
00:06:00.080 --> 00:06:03.060
Okay, now let's check what happens.

139
00:06:03.060 --> 00:06:08.060
Okay, I will run this file again.

140
00:06:08.060 --> 00:06:11.060
Oh, the credit card number does not show up.

141
00:06:11.060 --> 00:06:12.050
I told you right?

142
00:06:12.050 --> 00:06:16.000
I said explicitly that it respects the getter/setters,

143
00:06:16.000 --> 00:06:18.060
so when it finds out that the getter/setters are private,

144
00:06:18.060 --> 00:06:23.040
it'll just ignore even if the field is public.

145
00:06:23.040 --> 00:06:25.080
You get that? That's exactly how this behaves.

146
00:06:25.080 --> 00:06:27.040
So there's no point in making the field public

147
00:06:27.040 --> 00:06:28.090
and putting a private getter/setter

148
00:06:28.090 --> 00:06:30.080
because JSON binding is going to make sure that it looks

149
00:06:30.080 --> 00:06:32.020
at the getter/setters first.

150
00:06:32.020 --> 00:06:35.060
If they are private, it kind of really is disappointed

151
00:06:35.060 --> 00:06:36.060
because it does not want

152
00:06:36.060 --> 00:06:39.010
the getter/setters to be actually private.

153
00:06:39.010 --> 00:06:42.030
So it'll ignore the field as well even if it is public

154
00:06:42.030 --> 00:06:43.040
it does not matter.

155
00:06:43.040 --> 00:06:46.080
So be very careful when you actually try to have your fields

156
00:06:46.080 --> 00:06:49.030
and getter/setters together in your bean.

157
00:06:49.030 --> 00:06:52.030
The rule that the Java platform dictates is

158
00:06:52.030 --> 00:06:54.090
private fields, public getter/setters.

159
00:06:54.090 --> 00:06:57.080
Yes you can protected fields and public getter/setters,

160
00:06:57.080 --> 00:07:00.050
but that's the only thing we always do

161
00:07:00.050 --> 00:07:02.050
to encapsulate a bean in Java.

162
00:07:02.050 --> 00:07:05.060
We will look at the visibility settings for the final static

163
00:07:05.060 --> 00:07:08.000
and transient fields in the next video.

