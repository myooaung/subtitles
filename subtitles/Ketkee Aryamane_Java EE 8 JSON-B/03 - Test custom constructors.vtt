WEBVTT
1
00:00:00.020 --> 00:00:02.010
- [Instructor] So now let's go ahead and test the scenario.

2
00:00:02.010 --> 00:00:05.080
Let's make a class under the tests folder.

3
00:00:05.080 --> 00:00:11.040
Let's call it TestCustomCreator.

4
00:00:11.040 --> 00:00:15.040
Let's grab the main method, psvm.

5
00:00:15.040 --> 00:00:21.040
Let's create an empty Jsonb instance.

6
00:00:21.040 --> 00:00:24.020
.create

7
00:00:24.020 --> 00:00:26.000
So once you get that instance, what you're going to do is,

8
00:00:26.000 --> 00:00:29.020
if you observe, this is our project folder,

9
00:00:29.020 --> 00:00:31.030
and we have saved the order details file.

10
00:00:31.030 --> 00:00:33.010
So this is a JSON document.

11
00:00:33.010 --> 00:00:35.030
Now, we're going to read this JSON representation

12
00:00:35.030 --> 00:00:38.000
and then employ the custom creator for that.

13
00:00:38.000 --> 00:00:38.080
Okay.

14
00:00:38.080 --> 00:00:40.080
So let's go to the code.

15
00:00:40.080 --> 00:00:46.030
Let's say jsonb.fromjson

16
00:00:46.030 --> 00:00:49.060
And we'll employ the file reader to read that file,

17
00:00:49.060 --> 00:00:52.040
which will demand a file object.

18
00:00:52.040 --> 00:00:54.010
So we'll do that.

19
00:00:54.010 --> 00:00:57.010
And it'll also demand the path of the object,

20
00:00:57.010 --> 00:01:01.030
so that will be orderdetails.txt

21
00:01:01.030 --> 00:01:05.070
And, of course, the type will be OrderDetails this time.

22
00:01:05.070 --> 00:01:07.080
OrderDetails.class

23
00:01:07.080 --> 00:01:09.070
That's what we have to mention.

24
00:01:09.070 --> 00:01:10.050
Okay.

25
00:01:10.050 --> 00:01:13.040
And what we'll also do is we'll take the output of this

26
00:01:13.040 --> 00:01:15.000
inside an OrderDetails object.

27
00:01:15.000 --> 00:01:17.010
That's what we have to check, correct?

28
00:01:17.010 --> 00:01:19.020
So ...

29
00:01:19.020 --> 00:01:20.000
Okay.

30
00:01:20.000 --> 00:01:21.000
Now, since we are reading the file,

31
00:01:21.000 --> 00:01:22.060
of course it's going to throw the checked exception.

32
00:01:22.060 --> 00:01:23.090
It's an IO operation,

33
00:01:23.090 --> 00:01:26.030
so let's surround the statement with try catch.

34
00:01:26.030 --> 00:01:27.050
All right.

35
00:01:27.050 --> 00:01:30.020
And then, let's come on line number 27.

36
00:01:30.020 --> 00:01:34.010
After we get the deserialized object out of that file,

37
00:01:34.010 --> 00:01:37.010
we are going to say sys out,

38
00:01:37.010 --> 00:01:38.090
and we'll check whether we're getting

39
00:01:38.090 --> 00:01:42.020
the address object constructed correctly.

40
00:01:42.020 --> 00:01:43.080
That will be getShippingAddress

41
00:01:43.080 --> 00:01:44.090
Okay.

42
00:01:44.090 --> 00:01:50.080
Let's run this and check for ourselves.

43
00:01:50.080 --> 00:01:51.060
Yes.

44
00:01:51.060 --> 00:01:52.060
Do you see?

45
00:01:52.060 --> 00:01:57.030
Every JSON property in that document is correctly mapped

46
00:01:57.030 --> 00:02:00.050
to the respective property in my address object.

47
00:02:00.050 --> 00:02:02.070
And this address object was created

48
00:02:02.070 --> 00:02:05.000
out of that custom constructor.

49
00:02:05.000 --> 00:02:07.000
So now, your properties can come

50
00:02:07.000 --> 00:02:09.050
in any fashion that you may want in your JSON document,

51
00:02:09.050 --> 00:02:13.030
but it is up to you to have those complex constructions

52
00:02:13.030 --> 00:02:15.020
the way we did on line number 31

53
00:02:15.020 --> 00:02:17.060
so that all the JSON values

54
00:02:17.060 --> 00:02:20.030
correctly fit in your bin hierarchies.

55
00:02:20.030 --> 00:02:23.000
So that's how you employ a custom constructor.

