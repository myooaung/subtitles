WEBVTT
1
00:00:00.000 --> 00:00:01.040
- [Instructor] The next is what

2
00:00:01.040 --> 00:00:03.010
is the customized mapping support

3
00:00:03.010 --> 00:00:06.000
that JSON Binding offers for I-JSON.

4
00:00:06.000 --> 00:00:08.010
Now I-JSON is internet JSON which

5
00:00:08.010 --> 00:00:10.030
is a restricted profile of JSON.

6
00:00:10.030 --> 00:00:13.010
This is basically in place to make sure

7
00:00:13.010 --> 00:00:17.060
that there's maximum interoperability between systems,

8
00:00:17.060 --> 00:00:18.080
so the thing is that you

9
00:00:18.080 --> 00:00:20.070
may have certain software applications,

10
00:00:20.070 --> 00:00:22.040
or certain implementations which comply

11
00:00:22.040 --> 00:00:25.040
to the previous formats of JSON data.

12
00:00:25.040 --> 00:00:27.060
In case they are going to be used now,

13
00:00:27.060 --> 00:00:29.050
then according to the latest JSON format two,

14
00:00:29.050 --> 00:00:31.030
the systems should work correctly,

15
00:00:31.030 --> 00:00:35.000
so I-JSON is specified as a stricter or restricted format

16
00:00:35.000 --> 00:00:38.070
to make sure that all of the systems, old and new,

17
00:00:38.070 --> 00:00:40.060
correctly operate with each other,

18
00:00:40.060 --> 00:00:43.040
and the software applications do have a confidence,

19
00:00:43.040 --> 00:00:45.040
so that they can successfully transform,

20
00:00:45.040 --> 00:00:48.070
or successfully use that data with predictable results.

21
00:00:48.070 --> 00:00:51.020
Now when it comes to JSON Binding API,

22
00:00:51.020 --> 00:00:53.000
yes, JSON Binding also supports

23
00:00:53.000 --> 00:00:55.010
and respects the I-JSON format,

24
00:00:55.010 --> 00:00:57.070
but there are a few exceptions.

25
00:00:57.070 --> 00:01:01.070
When it comes to I-JSON, let's understand this point,

26
00:01:01.070 --> 00:01:04.060
there are many software applications which comply

27
00:01:04.060 --> 00:01:07.020
or which accorded according to the older specification

28
00:01:07.020 --> 00:01:09.090
of JSON format, now, those applications,

29
00:01:09.090 --> 00:01:13.080
accept only JSON objects or JSON arrays.

30
00:01:13.080 --> 00:01:16.090
Those are the only two data structures that they understand,

31
00:01:16.090 --> 00:01:18.080
so such kind of implementations,

32
00:01:18.080 --> 00:01:22.080
you cannot use JSON text for example,

33
00:01:22.080 --> 00:01:25.050
Now JSON Binding does not have this restriction.

34
00:01:25.050 --> 00:01:27.020
JSON Binding we have already seen,

35
00:01:27.020 --> 00:01:28.080
in all of our previous demos,

36
00:01:28.080 --> 00:01:32.060
that it has the capability to even serialize a JSON text,

37
00:01:32.060 --> 00:01:34.070
but if you are going to provide this capability

38
00:01:34.070 --> 00:01:37.050
to a system which is not capable of understanding that,

39
00:01:37.050 --> 00:01:39.050
then it becomes an issue,

40
00:01:39.050 --> 00:01:41.070
so when it comes to JSON Binding,

41
00:01:41.070 --> 00:01:43.050
there is no restriction on the serialization

42
00:01:43.050 --> 00:01:45.020
of top-level JSON text,

43
00:01:45.020 --> 00:01:48.040
so those applications which do not understand JSON texts,

44
00:01:48.040 --> 00:01:52.030
and understand only objects or arrays may face a problem,

45
00:01:52.030 --> 00:01:55.000
so this kind of restriction will have to be handled

46
00:01:55.000 --> 00:01:56.070
at the application level.

47
00:01:56.070 --> 00:01:58.080
By default, there is no support for this.

48
00:01:58.080 --> 00:02:01.010
Next one, is there's also no serialization,

49
00:02:01.010 --> 00:02:06.040
that JSON-B does for binary data with base 64 url encoding,

50
00:02:06.040 --> 00:02:08.090
so if you want this particular restriction to be imposed,

51
00:02:08.090 --> 00:02:12.000
then you'll have to do that too on the application level,

52
00:02:12.000 --> 00:02:14.050
again, there's no enforcement on restrictions

53
00:02:14.050 --> 00:02:17.020
for dates and times that are used in your application,

54
00:02:17.020 --> 00:02:19.070
so for that too, you will have to fall back

55
00:02:19.070 --> 00:02:22.000
to the application level customization,

56
00:02:22.000 --> 00:02:26.030
so, under JSON Binding API, the customized support

57
00:02:26.030 --> 00:02:29.080
for I-JSON will be enabled, the full support I mean,

58
00:02:29.080 --> 00:02:32.090
will be enabled with the JsonbConfigs

59
00:02:32.090 --> 00:02:36.080
with strict I-Jason API call, set that to true,

60
00:02:36.080 --> 00:02:39.060
and then whenever you're trying to use JSON Binding API

61
00:02:39.060 --> 00:02:41.040
in your application, it'll make sure,

62
00:02:41.040 --> 00:02:43.070
that it'll provide you the full support

63
00:02:43.070 --> 00:02:47.000
for internet JSON, so we're going to do a very small demo

64
00:02:47.000 --> 00:02:49.040
for this, let's come back to the IDE,

65
00:02:49.040 --> 00:02:51.060
so let's create our test class,

66
00:02:51.060 --> 00:02:59.010
and let's call it Test I-JSON,

67
00:02:59.010 --> 00:03:02.040
okay, and let's come right there,

68
00:03:02.040 --> 00:03:06.050
let's enter the main method first,

69
00:03:06.050 --> 00:03:09.010
and how do you set the I-JSON support,

70
00:03:09.010 --> 00:03:10.070
so let's go back to object mapper

71
00:03:10.070 --> 00:03:13.030
because it can be only done under config objects,

72
00:03:13.030 --> 00:03:16.040
so I'm going to comment this out,

73
00:03:16.040 --> 00:03:18.020
so please understand that I'm commenting,

74
00:03:18.020 --> 00:03:21.010
all the previous lines, all the previous properties,

75
00:03:21.010 --> 00:03:23.030
or calls that we have done under the configured object,

76
00:03:23.030 --> 00:03:25.050
the only reason for this is we do not want all

77
00:03:25.050 --> 00:03:28.000
of them to be operational on a particular demo,

78
00:03:28.000 --> 00:03:29.050
so I comment out all of them,

79
00:03:29.050 --> 00:03:32.040
and I keep adding the one that we're doing the demo for,

80
00:03:32.040 --> 00:03:33.050
okay, this is just for your information,

81
00:03:33.050 --> 00:03:36.020
so that you don't get confused about it,

82
00:03:36.020 --> 00:03:38.050
okay, so I'm going to put a comment here,

83
00:03:38.050 --> 00:03:43.030
and I'm going to say property for I-JSON support,

84
00:03:43.030 --> 00:03:44.090
okay, so what are we going to do,

85
00:03:44.090 --> 00:03:47.010
you're just going to get the config object,

86
00:03:47.010 --> 00:03:53.010
and say with strict I-JSON, that's the one, and set this

87
00:03:53.010 --> 00:04:00.040
to true, okay, so now let's go back to the test class,

88
00:04:00.040 --> 00:04:09.060
and create an md JSON-B engine instance first,

89
00:04:09.060 --> 00:04:18.020
builder, dot create, okay, once we say this,

90
00:04:18.020 --> 00:04:25.000
let's do one thing, let's say string, text equal to JSON-B,

91
00:04:25.000 --> 00:04:27.020
just a simple text, and we all know,

92
00:04:27.020 --> 00:04:30.030
that by default, JSON Binding API is definitely going

93
00:04:30.030 --> 00:04:32.090
to serialize this JSON text, we know for sure, correct,

94
00:04:32.090 --> 00:04:34.010
so let's check that out again,

95
00:04:34.010 --> 00:04:36.020
let's make sure that we understand what we are doing,

96
00:04:36.020 --> 00:04:38.020
so I'm trying to show you the default setting,

97
00:04:38.020 --> 00:04:41.020
before we look into the I-JSON strict support, okay,

98
00:04:41.020 --> 00:04:49.050
so I'm going to say Json b dot to JSON, and say text, okay,

99
00:04:49.050 --> 00:04:54.070
and if I run this file, yeah, that's what I'll get,

100
00:04:54.070 --> 00:04:57.040
so by default, JSON Binding API is definitely going

101
00:04:57.040 --> 00:04:59.090
to serialize that text, however,

102
00:04:59.090 --> 00:05:02.020
we spoke about the problem where some systems,

103
00:05:02.020 --> 00:05:03.070
may not be able to understand this,

104
00:05:03.070 --> 00:05:06.020
and only understand in terms of JSON objects

105
00:05:06.020 --> 00:05:08.080
and JSON arrays, so in that case, what do we do?

106
00:05:08.080 --> 00:05:11.030
So now to inject that I-JSON support,

107
00:05:11.030 --> 00:05:14.090
I'm going to get hold of that object mapper class,

108
00:05:14.090 --> 00:05:17.080
because I have set the strict I-JSON support,

109
00:05:17.080 --> 00:05:24.060
in the config object, okay, so now let's run this,

110
00:05:24.060 --> 00:05:26.060
yes, now do you see what happen,

111
00:05:26.060 --> 00:05:28.060
it says that I cannot marshal a single value

112
00:05:28.060 --> 00:05:32.090
because I-JSON is enabled, so now, it is understood that

113
00:05:32.090 --> 00:05:34.090
since you are using I-JSON support,

114
00:05:34.090 --> 00:05:37.070
which means I'll not be able to serialize a text like that,

115
00:05:37.070 --> 00:05:42.050
okay, so what we do is we need to actually do the creation

116
00:05:42.050 --> 00:05:46.030
of a JSON object from the Java X JSON API,

117
00:05:46.030 --> 00:05:52.020
so I'm going to say JSON object equal to JSON,

118
00:05:52.020 --> 00:05:56.030
let's take the JSON Java X dot JSON API,

119
00:05:56.030 --> 00:06:00.020
and on that, let's create an object,

120
00:06:00.020 --> 00:06:02.080
using the object builder, this way,

121
00:06:02.080 --> 00:06:09.080
and then say add, an add a key, that's the course name,

122
00:06:09.080 --> 00:06:16.060
and get this text right there,

123
00:06:16.060 --> 00:06:20.050
okay, and now, I am also going to do call the build method

124
00:06:20.050 --> 00:06:22.090
on it so that it finally builds that object for me,

125
00:06:22.090 --> 00:06:25.050
once this is done, let's take that JSON object reference

126
00:06:25.050 --> 00:06:30.030
from line 28 and put it on line 29,

127
00:06:30.030 --> 00:06:34.080
okay, let's clear the console, and now run this again,

128
00:06:34.080 --> 00:06:37.090
yes, so this time you do get the string that you really want

129
00:06:37.090 --> 00:06:41.090
to serialize, but it is done through the JSON object API,

130
00:06:41.090 --> 00:06:43.060
that's exactly what we were looking for,

131
00:06:43.060 --> 00:06:46.090
so this is how you can enablize JSON support completely

132
00:06:46.090 --> 00:06:51.000
by going to the config object and setting it to true,

133
00:06:51.000 --> 00:06:52.030
and then throughout your application,

134
00:06:52.030 --> 00:06:54.060
you should exercise the caution as to how are you going

135
00:06:54.060 --> 00:06:57.000
to serialize your objects or de-serialize them.

