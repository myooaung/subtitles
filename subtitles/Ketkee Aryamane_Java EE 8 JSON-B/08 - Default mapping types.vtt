WEBVTT
1
00:00:00.050 --> 00:00:03.030
- [Instructor] Okay, so the JSON-B Default Mapping Types

2
00:00:03.030 --> 00:00:05.070
that we have is it can map an object for you,

3
00:00:05.070 --> 00:00:09.090
map a single bean or a complete hierarchy of objects

4
00:00:09.090 --> 00:00:11.030
or a complete collection of objects

5
00:00:11.030 --> 00:00:13.010
the way we saw in the previous example.

6
00:00:13.010 --> 00:00:14.080
It can also map a collection.

7
00:00:14.080 --> 00:00:16.060
And I'm talking about an open collection,

8
00:00:16.060 --> 00:00:18.050
which can accept any kind of value

9
00:00:18.050 --> 00:00:19.070
that you feed into it.

10
00:00:19.070 --> 00:00:21.040
So when you talk about collections in Java,

11
00:00:21.040 --> 00:00:23.000
you have Lists, Sets, and Maps.

12
00:00:23.000 --> 00:00:25.010
All of these can be very comfortably mapped

13
00:00:25.010 --> 00:00:26.080
using the JSON binding API.

14
00:00:26.080 --> 00:00:30.000
And then you can also map a generics collection.

15
00:00:30.000 --> 00:00:31.040
And that is interesting, because when you talk about

16
00:00:31.040 --> 00:00:33.060
generics collection you have

17
00:00:33.060 --> 00:00:35.050
List, Set, and Map instances

18
00:00:35.050 --> 00:00:38.070
with specific type of objects that you add into it.

19
00:00:38.070 --> 00:00:41.050
So we have already seen the first kind of mapping,

20
00:00:41.050 --> 00:00:44.010
we have seen it for a very large number of objects.

21
00:00:44.010 --> 00:00:46.020
Now we will see the collection mapping

22
00:00:46.020 --> 00:00:47.050
and we'll see collection mapping

23
00:00:47.050 --> 00:00:49.010
even with the generics type.

24
00:00:49.010 --> 00:00:51.000
Let's go back to the IDE.

25
00:00:51.000 --> 00:00:53.050
And I'm going to make a test class here

26
00:00:53.050 --> 00:00:54.050
which says

27
00:00:54.050 --> 00:00:55.080
test

28
00:00:55.080 --> 00:00:58.070
collections.

29
00:00:58.070 --> 00:01:01.000
Grab the main method.

30
00:01:01.000 --> 00:01:02.050
And the first thing that I'm gonna do

31
00:01:02.050 --> 00:01:03.060
is I'm going to create a list.

32
00:01:03.060 --> 00:01:05.030
Now this list will be an open list,

33
00:01:05.030 --> 00:01:08.090
which means I can enter any kind of object inside it.

34
00:01:08.090 --> 00:01:14.040
So I'm just going to say new array list.

35
00:01:14.040 --> 00:01:15.020
Okay.

36
00:01:15.020 --> 00:01:17.080
And then I can say objects

37
00:01:17.080 --> 00:01:19.010
dot add.

38
00:01:19.010 --> 00:01:20.060
I can say

39
00:01:20.060 --> 00:01:22.080
JSON-B

40
00:01:22.080 --> 00:01:23.080
and

41
00:01:23.080 --> 00:01:27.010
then I can also say objects dot

42
00:01:27.010 --> 00:01:28.010
add 23

43
00:01:28.010 --> 00:01:29.050
maybe a number.

44
00:01:29.050 --> 00:01:31.040
Basically I can do any stuff.

45
00:01:31.040 --> 00:01:34.030
Objects stored add and I can say

46
00:01:34.030 --> 00:01:35.050
new

47
00:01:35.050 --> 00:01:37.060
user, maybe.

48
00:01:37.060 --> 00:01:38.040
Yeah?

49
00:01:38.040 --> 00:01:40.000
So I'm trying to add different kinds of objects.

50
00:01:40.000 --> 00:01:43.080
And if you want to serialize this list now

51
00:01:43.080 --> 00:01:45.060
using the JSON binding API,

52
00:01:45.060 --> 00:01:48.010
the process is exactly the same, nothing changes there.

53
00:01:48.010 --> 00:01:51.090
So on line 24 I'll create that instance first.

54
00:01:51.090 --> 00:01:53.050
Let's create it directly this time,

55
00:01:53.050 --> 00:01:56.080
I'm going to say JSON-B builder dot create.

56
00:01:56.080 --> 00:02:01.010
And on that I'm gonna change to JSON.

57
00:02:01.010 --> 00:02:03.030
And pass in that list that we created,

58
00:02:03.030 --> 00:02:05.060
the open collection as we say.

59
00:02:05.060 --> 00:02:07.050
And let's do one thing, let's sys out this.

60
00:02:07.050 --> 00:02:09.020
I'm going to cut this out.

61
00:02:09.020 --> 00:02:12.020
And get in the system.out.println

62
00:02:12.020 --> 00:02:14.040
and paste it inside.

63
00:02:14.040 --> 00:02:15.040
Okay.

64
00:02:15.040 --> 00:02:19.070
And if you run this file,

65
00:02:19.070 --> 00:02:21.070
yeah, so this is pretty much simple.

66
00:02:21.070 --> 00:02:24.030
So you see that the list has got serialized

67
00:02:24.030 --> 00:02:26.050
and it is going to be converted into a JSON array,

68
00:02:26.050 --> 00:02:28.010
because that's how JSON understands

69
00:02:28.010 --> 00:02:29.060
when it comes to collections.

70
00:02:29.060 --> 00:02:31.050
So you have the first value, the second value

71
00:02:31.050 --> 00:02:34.090
and the third value is actually a Java object.

72
00:02:34.090 --> 00:02:36.080
So that's how it will serialize.

73
00:02:36.080 --> 00:02:38.020
But this is pretty simple.

74
00:02:38.020 --> 00:02:39.060
What we really want to see is

75
00:02:39.060 --> 00:02:43.000
how will it serialize a list which is of the generics type?

76
00:02:43.000 --> 00:02:44.040
And that is something that we want to see.

77
00:02:44.040 --> 00:02:46.020
So what I will do is

78
00:02:46.020 --> 00:02:48.000
I will go to the data generator class

79
00:02:48.000 --> 00:02:51.020
which already creates a lot of mock data for me.

80
00:02:51.020 --> 00:02:54.040
And I will take lines number 30

81
00:02:54.040 --> 00:02:56.000
to 35

82
00:02:56.000 --> 00:02:58.010
okay, which is the list of products.

83
00:02:58.010 --> 00:03:00.030
And this is a generics kind of a list.

84
00:03:00.030 --> 00:03:02.000
So let's take that.

85
00:03:02.000 --> 00:03:03.090
Go back to test collections.

86
00:03:03.090 --> 00:03:10.090
And I will come down on line 27 and paste it there.

87
00:03:10.090 --> 00:03:11.090
Okay.

88
00:03:11.090 --> 00:03:13.030
Now, what do I do?

89
00:03:13.030 --> 00:03:16.040
I am going to say JSON-B builder

90
00:03:16.040 --> 00:03:19.080
dot create, so create that default JSON-B engine.

91
00:03:19.080 --> 00:03:23.030
And then I say to JSON

92
00:03:23.030 --> 00:03:25.040
and I pass that products list.

93
00:03:25.040 --> 00:03:26.020
Okay?

94
00:03:26.020 --> 00:03:29.000
Now let me collect this string

95
00:03:29.000 --> 00:03:31.080
in a result variable.

96
00:03:31.080 --> 00:03:32.070
Okay.

97
00:03:32.070 --> 00:03:35.000
And now we'll also de-serialize this.

98
00:03:35.000 --> 00:03:36.070
And that's exactly what is important.

99
00:03:36.070 --> 00:03:38.090
During serialization, it is of course going to take in

100
00:03:38.090 --> 00:03:42.010
the entire products list, covert each one of them

101
00:03:42.010 --> 00:03:44.010
as an element of a JSON array

102
00:03:44.010 --> 00:03:45.050
and then print it to the document.

103
00:03:45.050 --> 00:03:47.010
Or print it to the string variable,

104
00:03:47.010 --> 00:03:48.060
wherever you want to collect it.

105
00:03:48.060 --> 00:03:51.010
However, when you de-serialize,

106
00:03:51.010 --> 00:03:52.050
how is that going to work?

107
00:03:52.050 --> 00:03:54.010
So let's understand that.

108
00:03:54.010 --> 00:03:57.000
We're going to say JSON-B

109
00:03:57.000 --> 00:03:58.080
builder again

110
00:03:58.080 --> 00:04:00.000
dot

111
00:04:00.000 --> 00:04:00.080
create

112
00:04:00.080 --> 00:04:03.060
so that'll give us the empty JSON-B engine.

113
00:04:03.060 --> 00:04:07.000
And on that, this time I want to say from JSON.

114
00:04:07.000 --> 00:04:10.010
Now from JSON is going to take this result

115
00:04:10.010 --> 00:04:14.030
which is the serialized products list, okay?

116
00:04:14.030 --> 00:04:16.000
And what is the type this time?

117
00:04:16.000 --> 00:04:18.040
Now this is something that we have to think of.

118
00:04:18.040 --> 00:04:19.040
Okay?

119
00:04:19.040 --> 00:04:21.080
But before this, let's see how did we do it

120
00:04:21.080 --> 00:04:24.020
for the open collection.

121
00:04:24.020 --> 00:04:25.030
So there's an open collection

122
00:04:25.030 --> 00:04:26.080
and there's a generics collection.

123
00:04:26.080 --> 00:04:28.080
The serialization will happen pretty much the same way,

124
00:04:28.080 --> 00:04:30.080
it's going to be a JSON array.

125
00:04:30.080 --> 00:04:32.070
But how does a de-serialization happen

126
00:04:32.070 --> 00:04:35.030
for an open collection, and how does it happen

127
00:04:35.030 --> 00:04:37.070
or how does it behave for a generics collection?

128
00:04:37.070 --> 00:04:38.090
Let's check that out.

129
00:04:38.090 --> 00:04:41.090
So what we'll do is we'll just backtrack a program,

130
00:04:41.090 --> 00:04:44.010
go on line 26

131
00:04:44.010 --> 00:04:46.080
take this line

132
00:04:46.080 --> 00:04:49.020
cut it out and instead of printing it

133
00:04:49.020 --> 00:04:55.080
we'll collect it into a string variable.

134
00:04:55.080 --> 00:04:57.020
Okay.

135
00:04:57.020 --> 00:04:59.000
And we'll also de-serialize, okay?

136
00:04:59.000 --> 00:05:01.050
So we'll say JSON-B builder.

137
00:05:01.050 --> 00:05:03.090
We need this

138
00:05:03.090 --> 00:05:06.020
JSON-B engine every single time

139
00:05:06.020 --> 00:05:09.060
you want to do serialization or de-serialization, whatever.

140
00:05:09.060 --> 00:05:13.050
So say from JSON, pass that open collection,

141
00:05:13.050 --> 00:05:16.070
and the type for this will be

142
00:05:16.070 --> 00:05:18.060
array list

143
00:05:18.060 --> 00:05:22.000
dot class.

144
00:05:22.000 --> 00:05:22.090
Okay?

145
00:05:22.090 --> 00:05:26.010
So what we can do is we can actually sys out this.

146
00:05:26.010 --> 00:05:30.000
So I'm going to say so ut, and take this entire thing

147
00:05:30.000 --> 00:05:35.090
and put it in that sys out statement.

148
00:05:35.090 --> 00:05:37.030
Okay.

149
00:05:37.030 --> 00:05:39.020
So that's how it is for open collection,

150
00:05:39.020 --> 00:05:40.080
but now let's understand how is it going

151
00:05:40.080 --> 00:05:42.060
to work for generics collection.

152
00:05:42.060 --> 00:05:45.010
For that you will have to do something like this.

153
00:05:45.010 --> 00:05:46.090
New

154
00:05:46.090 --> 00:05:48.080
array list

155
00:05:48.080 --> 00:05:50.040
of

156
00:05:50.040 --> 00:05:52.080
product.

157
00:05:52.080 --> 00:05:54.090
And then

158
00:05:54.090 --> 00:05:57.030
we will of course instantiate it.

159
00:05:57.030 --> 00:05:59.050
Then we have a collate pair of braces.

160
00:05:59.050 --> 00:06:02.000
On that we have get class.

161
00:06:02.000 --> 00:06:06.050
And on that we have get generic superclass.

162
00:06:06.050 --> 00:06:07.040
Okay.

163
00:06:07.040 --> 00:06:09.030
So what does this syntax mean?

164
00:06:09.030 --> 00:06:10.060
Let's understand this.

165
00:06:10.060 --> 00:06:13.090
This is a generics list that you're trying to serialize.

166
00:06:13.090 --> 00:06:16.040
Okay, it got serialized, fine.

167
00:06:16.040 --> 00:06:18.040
But when it wants to de-serialize itself,

168
00:06:18.040 --> 00:06:20.060
you'll have to tell the JSON-B engine

169
00:06:20.060 --> 00:06:23.090
that it has to be converted into an array list of products.

170
00:06:23.090 --> 00:06:27.030
In order to do that, the from JSON demands from you

171
00:06:27.030 --> 00:06:30.070
a type as the second argument, right?

172
00:06:30.070 --> 00:06:33.010
The second argument is specified in this way.

173
00:06:33.010 --> 00:06:35.050
So this means that you try to create

174
00:06:35.050 --> 00:06:38.060
and instantiate an anonymous inner class

175
00:06:38.060 --> 00:06:42.040
which extends array list of product, that's number one.

176
00:06:42.040 --> 00:06:44.070
Now on that, when you say get class

177
00:06:44.070 --> 00:06:46.050
it actually gets you that class

178
00:06:46.050 --> 00:06:49.000
which is the anonymous class.

179
00:06:49.000 --> 00:06:52.020
And on that, when you say get generic superclass

180
00:06:52.020 --> 00:06:55.030
then it will return you array list of product,

181
00:06:55.030 --> 00:06:57.010
which is the type that we need

182
00:06:57.010 --> 00:07:00.030
in order to de-serialize the list of products.

183
00:07:00.030 --> 00:07:01.050
So what we're going to do is

184
00:07:01.050 --> 00:07:06.060
we are going to collect this in a list of products.

185
00:07:06.060 --> 00:07:09.010
So once the products are de-serialized,

186
00:07:09.010 --> 00:07:10.090
once that JSON data is de-serialized

187
00:07:10.090 --> 00:07:15.000
we'll say these are the de-serialized products.

188
00:07:15.000 --> 00:07:21.030
And on the next line we'll just print that out.

189
00:07:21.030 --> 00:07:22.030
Okay.

190
00:07:22.030 --> 00:07:27.000
So now let's go ahead and run this.

191
00:07:27.000 --> 00:07:28.010
So there we go.

192
00:07:28.010 --> 00:07:32.020
In the first case, it tried to bring to me the list

193
00:07:32.020 --> 00:07:33.090
which was an open collection.

194
00:07:33.090 --> 00:07:36.000
And in the second, it tried to bring me

195
00:07:36.000 --> 00:07:38.070
that entire array list back, which has got each

196
00:07:38.070 --> 00:07:40.080
individual product object.

197
00:07:40.080 --> 00:07:41.070
Do you see that?

198
00:07:41.070 --> 00:07:43.050
Each individual product object.

199
00:07:43.050 --> 00:07:46.000
So this is because the array list classes

200
00:07:46.000 --> 00:07:48.070
or for that matter all the collection classes

201
00:07:48.070 --> 00:07:51.040
have already implemented the two-string method.

202
00:07:51.040 --> 00:07:55.020
So because of that, it brings you the elements information.

203
00:07:55.020 --> 00:07:57.070
The objects information directly

204
00:07:57.070 --> 00:08:01.000
when you actually print any kind of collection.

205
00:08:01.000 --> 00:08:03.050
So basically when we actually said

206
00:08:03.050 --> 00:08:05.060
system array dot print this list,

207
00:08:05.060 --> 00:08:07.070
the list class is already implemented to a string

208
00:08:07.070 --> 00:08:10.040
because of which variable to see all the product data

209
00:08:10.040 --> 00:08:12.010
right there on the console.

210
00:08:12.010 --> 00:08:14.070
So this is how you can serialize

211
00:08:14.070 --> 00:08:16.080
and de-serialize collections.

212
00:08:16.080 --> 00:08:20.050
Now this rule is generic that I'm about to mention now.

213
00:08:20.050 --> 00:08:23.010
For any kind of serialization that JSON binding

214
00:08:23.010 --> 00:08:24.090
does for you, it could be a field,

215
00:08:24.090 --> 00:08:28.000
it could be a collection, or it could be

216
00:08:28.000 --> 00:08:29.040
any other kind of data structure

217
00:08:29.040 --> 00:08:33.010
everywhere it is going to use the two-string method

218
00:08:33.010 --> 00:08:34.090
on that field, just remember this.

219
00:08:34.090 --> 00:08:36.060
So whenever it tries to serialize

220
00:08:36.060 --> 00:08:38.000
it will use two-string method.

