WEBVTT
1
00:00:00.060 --> 00:00:02.070
- [Instructor] Now that we've seen the simplest demo

2
00:00:02.070 --> 00:00:05.010
where we created a simple user bean

3
00:00:05.010 --> 00:00:07.070
and converted that to JSON and back to Java,

4
00:00:07.070 --> 00:00:09.090
let's look at the general default settings

5
00:00:09.090 --> 00:00:13.030
that the JSON Binding API is going to apply

6
00:00:13.030 --> 00:00:16.000
when it tries to do serialization.

7
00:00:16.000 --> 00:00:18.070
The first one is the property naming.

8
00:00:18.070 --> 00:00:21.060
When you talk about the JSON document generation,

9
00:00:21.060 --> 00:00:24.060
of course, we know that JSON has name and value pairs.

10
00:00:24.060 --> 00:00:27.060
Where does it pick up those names from, those keys from?

11
00:00:27.060 --> 00:00:31.020
So, the names are always as per the instance variables

12
00:00:31.020 --> 00:00:33.040
in the beans that you have defined.

13
00:00:33.040 --> 00:00:35.020
And those are the ones that are picked up

14
00:00:35.020 --> 00:00:36.060
during serialization.

15
00:00:36.060 --> 00:00:39.000
So, let's go and check it out in our demo also.

16
00:00:39.000 --> 00:00:40.060
We have this User bean.

17
00:00:40.060 --> 00:00:43.030
And if you look at the User bean,

18
00:00:43.030 --> 00:00:45.000
those were the properties that you've defined

19
00:00:45.000 --> 00:00:47.010
from lines 16 to 19.

20
00:00:47.010 --> 00:00:49.050
And if you look at your JSON representation,

21
00:00:49.050 --> 00:00:53.010
the instance variables are exactly the keys

22
00:00:53.010 --> 00:00:56.030
that were picked up for the serialization process.

23
00:00:56.030 --> 00:01:00.090
So, when your Java object got converted to a JSON document,

24
00:01:00.090 --> 00:01:03.080
the keys will be the instance variables.

25
00:01:03.080 --> 00:01:07.050
That's the default setting that JSON Binding applies.

26
00:01:07.050 --> 00:01:10.070
The next one is property order.

27
00:01:10.070 --> 00:01:14.010
It follows a lexicographical order during serialization.

28
00:01:14.010 --> 00:01:16.040
What that means is the dictionary order.

29
00:01:16.040 --> 00:01:19.070
Even if I try to declare id, name, email, and dateOfBirth

30
00:01:19.070 --> 00:01:21.010
in that order,

31
00:01:21.010 --> 00:01:23.060
the order that it actually made out

32
00:01:23.060 --> 00:01:25.060
during the serialization process

33
00:01:25.060 --> 00:01:28.000
is, yes, the d will come first and then the e.

34
00:01:28.000 --> 00:01:32.000
So, it's a lexicographical order that it always follows.

35
00:01:32.000 --> 00:01:34.040
Next one, null values.

36
00:01:34.040 --> 00:01:36.050
Null values are ignored.

37
00:01:36.050 --> 00:01:38.080
Null entries in collections

38
00:01:38.080 --> 00:01:40.080
are retained during serialization.

39
00:01:40.080 --> 00:01:44.030
What I mean to say is, we already saw a bit of this

40
00:01:44.030 --> 00:01:47.020
when we started off with the user bean example.

41
00:01:47.020 --> 00:01:49.080
When we had the dateOfBirth

42
00:01:49.080 --> 00:01:53.000
or the email or the name as null,

43
00:01:53.000 --> 00:01:56.020
we saw that JSON Binding skipped those null values

44
00:01:56.020 --> 00:01:57.050
during serialization.

45
00:01:57.050 --> 00:02:01.030
I only had the id-getting generated into the JSON document.

46
00:02:01.030 --> 00:02:02.080
That's what it does.

47
00:02:02.080 --> 00:02:06.040
However, if you're going to use Java Collections API

48
00:02:06.040 --> 00:02:09.020
like List or Map or Set or Queue,

49
00:02:09.020 --> 00:02:12.020
then it is going to retain the null values in collections.

50
00:02:12.020 --> 00:02:13.060
And it's absolutely correct

51
00:02:13.060 --> 00:02:15.080
because it is working in compete alignment

52
00:02:15.080 --> 00:02:18.000
with the Java Collections API.

53
00:02:18.000 --> 00:02:19.050
When you talk about a Java Collection class

54
00:02:19.050 --> 00:02:23.070
or, let's say, List or HashSet or HashMap or TreeMap,

55
00:02:23.070 --> 00:02:26.020
every single time you have a null entry,

56
00:02:26.020 --> 00:02:28.010
you're allowed that null entry

57
00:02:28.010 --> 00:02:30.090
into the collection's framework classes, right?

58
00:02:30.090 --> 00:02:32.030
And that's exactly the behavior

59
00:02:32.030 --> 00:02:34.060
that JSON Binding also adopts.

60
00:02:34.060 --> 00:02:36.070
So, yes, it will retain that null value

61
00:02:36.070 --> 00:02:39.020
during the serialization process.

62
00:02:39.020 --> 00:02:43.060
Next, the default or no-argument constructor is required.

63
00:02:43.060 --> 00:02:44.070
That's right.

64
00:02:44.070 --> 00:02:47.060
The default/no-argument constructor is absolutely required

65
00:02:47.060 --> 00:02:51.070
when it tries to deserialize your JSON into Java.

66
00:02:51.070 --> 00:02:54.000
Let's understand this point.

67
00:02:54.000 --> 00:02:56.060
When you had your User object,

68
00:02:56.060 --> 00:02:59.080
it serialized and it gave you this JSON, okay.

69
00:02:59.080 --> 00:03:01.090
Now, when it was trying to deserialize,

70
00:03:01.090 --> 00:03:03.060
if you look at your testing code,

71
00:03:03.060 --> 00:03:08.020
we had given the fromJson API call which had two arguments,

72
00:03:08.020 --> 00:03:11.010
the result and the type, right?

73
00:03:11.010 --> 00:03:12.090
So, it needs that type, as we said,

74
00:03:12.090 --> 00:03:16.090
in order to convert your JSON to the correct Java object.

75
00:03:16.090 --> 00:03:19.060
Now, for doing this, the first step it does is

76
00:03:19.060 --> 00:03:21.010
after reading that JSON,

77
00:03:21.010 --> 00:03:23.060
it will create an instance of this User.class

78
00:03:23.060 --> 00:03:26.010
by invoking your constructor.

79
00:03:26.010 --> 00:03:29.070
And for that, it requires the default constructor.

80
00:03:29.070 --> 00:03:31.050
I wanna do one thing.

81
00:03:31.050 --> 00:03:33.030
Let's come here (typing)

82
00:03:33.030 --> 00:03:35.020
and write a parameterized constructor.

83
00:03:35.020 --> 00:03:37.040
Let's generate that, okay?

84
00:03:37.040 --> 00:03:39.000
And save this code.

85
00:03:39.000 --> 00:03:40.040
And now, let's go here.

86
00:03:40.040 --> 00:03:42.070
And, of course, it is going to start yelling at you

87
00:03:42.070 --> 00:03:44.060
because it'll say that now the default constructor

88
00:03:44.060 --> 00:03:46.020
is not present in your class.

89
00:03:46.020 --> 00:03:50.030
Okay, so what we'll do is we will not construct the object

90
00:03:50.030 --> 00:03:52.030
using the default constructor. (typing)

91
00:03:52.030 --> 00:03:54.080
Instead, on line number 25, (typing)

92
00:03:54.080 --> 00:03:56.050
I'm trying to construct an object

93
00:03:56.050 --> 00:03:58.040
using the constructor that we wrote just now,

94
00:03:58.040 --> 00:03:59.070
which is the parameterized one.

95
00:03:59.070 --> 00:04:02.070
(typing) So, let's do that.

96
00:04:02.070 --> 00:04:04.090
Okay, so I say 123, (typing)

97
00:04:04.090 --> 00:04:09.000
and then I say jsontester, (typing)

98
00:04:09.000 --> 00:04:10.080
and then I say (typing)

99
00:04:10.080 --> 00:04:13.090
test@gmail.com, (typing)

100
00:04:13.090 --> 00:04:16.070
and then I say new Date, (typing)

101
00:04:16.070 --> 00:04:19.030
and give some long value. (typing)

102
00:04:19.030 --> 00:04:21.050
Okay, so we have created the object now

103
00:04:21.050 --> 00:04:23.090
using the parameterized constructor.

104
00:04:23.090 --> 00:04:25.070
Now, let's go ahead and run this code

105
00:04:25.070 --> 00:04:27.030
and let's see what happens.

106
00:04:27.030 --> 00:04:28.070
(mouse clicking)

107
00:04:28.070 --> 00:04:32.000
So, I'm going to say Run File.

108
00:04:32.000 --> 00:04:34.030
Yeah, now we've got an exception.

109
00:04:34.030 --> 00:04:37.050
It says that it can't create an instance of a class

110
00:04:37.050 --> 00:04:40.020
because there is no default constructor found.

111
00:04:40.020 --> 00:04:42.080
So, by default, whenever JSON Binding API

112
00:04:42.080 --> 00:04:44.090
tries to deserialize your object,

113
00:04:44.090 --> 00:04:46.080
it is going to use a default constructor,

114
00:04:46.080 --> 00:04:48.050
and please remember this.

115
00:04:48.050 --> 00:04:50.080
So, even if you write a parameterized constructor

116
00:04:50.080 --> 00:04:53.030
on your own, then what are we going to do?

117
00:04:53.030 --> 00:04:54.060
We are going to make sure

118
00:04:54.060 --> 00:04:56.090
that there is a default constructor written out.

119
00:04:56.090 --> 00:04:58.020
(typing)

120
00:04:58.020 --> 00:04:59.090
That's what we have to ensure.

121
00:04:59.090 --> 00:05:00.090
Now, we'll run this again,

122
00:05:00.090 --> 00:05:03.090
and the exception will go off.

123
00:05:03.090 --> 00:05:04.090
There you go.

124
00:05:04.090 --> 00:05:07.020
So, this is how it works, okay?

125
00:05:07.020 --> 00:05:10.010
The next one is, all the JSON data that it tries to encode

126
00:05:10.010 --> 00:05:12.020
is according to the UTF-8 format,

127
00:05:12.020 --> 00:05:15.030
the Unicodes business that we know, that goes around.

128
00:05:15.030 --> 00:05:17.070
Next is the date and the locale settings.

129
00:05:17.070 --> 00:05:19.040
So, whatever date and locale settings

130
00:05:19.040 --> 00:05:21.090
that it is going to use as a part of your conversion

131
00:05:21.090 --> 00:05:23.080
from Java to JSON or JSON to Java,

132
00:05:23.080 --> 00:05:27.020
every setting will be picked up from the machine.

133
00:05:27.020 --> 00:05:29.040
Okay, and then the last one is,

134
00:05:29.040 --> 00:05:32.060
it supports JSON-P processing types

135
00:05:32.060 --> 00:05:35.000
for serialization and deserialization.

136
00:05:35.000 --> 00:05:38.000
We already talked about this twice in the earlier videos

137
00:05:38.000 --> 00:05:40.030
that the JSON Binding API

138
00:05:40.030 --> 00:05:43.010
uses JSON Processing API internally

139
00:05:43.010 --> 00:05:44.030
for low-level passing

140
00:05:44.030 --> 00:05:46.080
and serialization/deserialization, right?

141
00:05:46.080 --> 00:05:49.090
So, even if you take the JSON-P processing types

142
00:05:49.090 --> 00:05:51.090
and try to construct objects,

143
00:05:51.090 --> 00:05:54.050
and then feed it to the JSON Binding API,

144
00:05:54.050 --> 00:05:58.020
it will still do the serialization and deserialization

145
00:05:58.020 --> 00:05:59.090
the way you want, okay?

146
00:05:59.090 --> 00:06:01.060
So, let's do one thing.

147
00:06:01.060 --> 00:06:04.010
Let's go back to the IDE (mouse clicking)

148
00:06:04.010 --> 00:06:06.090
and let me create a class here

149
00:06:06.090 --> 00:06:09.040
and I'll say

150
00:06:09.040 --> 00:06:15.080
TestJsonpTypes. (typing)

151
00:06:15.080 --> 00:06:16.090
Okay?

152
00:06:16.090 --> 00:06:18.040
And under this, (typing)

153
00:06:18.040 --> 00:06:20.090
of course, let me grab the main method first,

154
00:06:20.090 --> 00:06:22.030
and what is it going to do?

155
00:06:22.030 --> 00:06:27.020
We are now going to use the JSON Processing type API

156
00:06:27.020 --> 00:06:29.090
to actually create an object, okay?

157
00:06:29.090 --> 00:06:34.040
What that means is, I'm going to do something like this.

158
00:06:34.040 --> 00:06:37.000
I'm going to say, JsonObject. (typing)

159
00:06:37.000 --> 00:06:39.090
Now, this is coming from javax.json.

160
00:06:39.090 --> 00:06:41.070
Please make a note of this.

161
00:06:41.070 --> 00:06:44.020
The javax.json.bind is the one that we're using

162
00:06:44.020 --> 00:06:46.010
for JSON Binding API,

163
00:06:46.010 --> 00:06:48.080
but this is the low-level JSON Processing API,

164
00:06:48.080 --> 00:06:52.020
so I'm trying to take the JsonObject from that package.

165
00:06:52.020 --> 00:06:54.030
Okay, so let's take that object

166
00:06:54.030 --> 00:06:57.040
and let's quickly do one thing.

167
00:06:57.040 --> 00:06:58.040
(typing)

168
00:06:58.040 --> 00:07:01.040
Take a reference, and how will you create this?

169
00:07:01.040 --> 00:07:03.010
You have a class called Json, (typing)

170
00:07:03.010 --> 00:07:05.050
which is, again, coming from javax.json,

171
00:07:05.050 --> 00:07:09.080
and on that, you have a createObjectBuilder method.

172
00:07:09.080 --> 00:07:12.010
(typing)

173
00:07:12.010 --> 00:07:13.040
That's the one.

174
00:07:13.040 --> 00:07:16.030
On this, you can actually go ahead and add in

175
00:07:16.030 --> 00:07:18.050
the name and value pairs that you want.

176
00:07:18.050 --> 00:07:20.030
So, let's say name, (typing)

177
00:07:20.030 --> 00:07:22.050
and let's say, I'm saying...

178
00:07:22.050 --> 00:07:25.020
(typing)

179
00:07:25.020 --> 00:07:26.000
Okay.

180
00:07:26.000 --> 00:07:28.020
And then you can add more key value pairs

181
00:07:28.020 --> 00:07:31.010
by just chaining that add API again, okay?

182
00:07:31.010 --> 00:07:32.090
So, I can do something like this.

183
00:07:32.090 --> 00:07:35.010
Just calling that again, that's chaining in Java.

184
00:07:35.010 --> 00:07:36.050
So, you say this

185
00:07:36.050 --> 00:07:40.050
and then say profession, (typing)

186
00:07:40.050 --> 00:07:45.020
and let's say Developer, okay? (typing)

187
00:07:45.020 --> 00:07:46.060
Once you do that, once you know

188
00:07:46.060 --> 00:07:48.070
that all the name value pairs have been added,

189
00:07:48.070 --> 00:07:51.040
you can finally call the build method.

190
00:07:51.040 --> 00:07:53.080
So, now, this will give you a JSON object.

191
00:07:53.080 --> 00:07:55.040
Now, please understand that this is

192
00:07:55.040 --> 00:07:58.000
a JSON Processing type object.

193
00:07:58.000 --> 00:07:59.060
We talked about JSON Processing types

194
00:07:59.060 --> 00:08:00.070
in one of our earlier videos.

195
00:08:00.070 --> 00:08:03.040
We said that for every kind of JSON structure,

196
00:08:03.040 --> 00:08:05.080
you have a corresponding JSON API

197
00:08:05.080 --> 00:08:08.070
available in the JSON Processing specification.

198
00:08:08.070 --> 00:08:12.060
So, JsonObject, JsonArray, JsonString, JsonNumber,

199
00:08:12.060 --> 00:08:13.070
so on and so forth.

200
00:08:13.070 --> 00:08:16.020
So, I'm actually trying to use the JSON-P API

201
00:08:16.020 --> 00:08:17.070
to create an object. (typing)

202
00:08:17.070 --> 00:08:22.020
Now, let's go ahead and convert this jsonObject

203
00:08:22.020 --> 00:08:23.070
into the JSON document.

204
00:08:23.070 --> 00:08:24.090
So, how will we do that?

205
00:08:24.090 --> 00:08:28.070
We take the Jsonb instance, (typing)

206
00:08:28.070 --> 00:08:34.000
(typing)

207
00:08:34.000 --> 00:08:35.020
like that. (typing)

208
00:08:35.020 --> 00:08:36.080
Again, call the create method (typing)

209
00:08:36.080 --> 00:08:38.070
that we have already done before,

210
00:08:38.070 --> 00:08:39.090
and then (typing)

211
00:08:39.090 --> 00:08:41.060
grab the two json method

212
00:08:41.060 --> 00:08:44.060
and just parse in that jsonObject that you created.

213
00:08:44.060 --> 00:08:46.040
(typing)

214
00:08:46.040 --> 00:08:48.060
And let's bring this to the console.

215
00:08:48.060 --> 00:08:51.020
So, I'm going to cut that and put it in the System.out.print

216
00:08:51.020 --> 00:08:52.050
and then call.

217
00:08:52.050 --> 00:08:54.040
Okay, let's run this.

218
00:08:54.040 --> 00:08:56.030
(mouse clicking)

219
00:08:56.030 --> 00:08:57.010
There we go.

220
00:08:57.010 --> 00:08:58.060
So, you can do serialization

221
00:08:58.060 --> 00:09:02.000
even with the JSON-P processing types.

222
00:09:02.000 --> 00:09:05.000
Okay, so those are the general default settings.

223
00:09:05.000 --> 00:09:07.040
We have to see some more on property visibility,

224
00:09:07.040 --> 00:09:09.000
but we'll see that in the next video.

