WEBVTT
1
00:00:00.060 --> 00:00:01.090
- (Narrator) Now that the project is ready,

2
00:00:01.090 --> 00:00:04.000
let's start looking at the demos.

3
00:00:04.000 --> 00:00:05.080
The first one coming up is the

4
00:00:05.080 --> 00:00:09.020
JSON binding default mapping API.

5
00:00:09.020 --> 00:00:10.050
So, what we're going to do is we are going

6
00:00:10.050 --> 00:00:13.070
to make a simple java object, a very simple java bean

7
00:00:13.070 --> 00:00:15.090
give it a lot of attributes, and of course

8
00:00:15.090 --> 00:00:18.090
the getters/setters, and after you create an object out

9
00:00:18.090 --> 00:00:21.040
of that class then we are going to convert that

10
00:00:21.040 --> 00:00:24.050
to a JSON representation and the JSON representation

11
00:00:24.050 --> 00:00:26.080
that results out is going to be converted back

12
00:00:26.080 --> 00:00:29.000
to the java object and all of this we are going

13
00:00:29.000 --> 00:00:31.030
to do using the JSON Binding API.

14
00:00:31.030 --> 00:00:32.030
So, let's go ahead.

15
00:00:32.030 --> 00:00:34.080
The first step is, of course, creating the user bean.

16
00:00:34.080 --> 00:00:37.050
I've chosen a user bean, and then we give it attributes

17
00:00:37.050 --> 00:00:38.080
and generate getters/setters.

18
00:00:38.080 --> 00:00:41.090
So, let's go to the IDE under the source packages.

19
00:00:41.090 --> 00:00:44.010
Let's first create appropriate packages.

20
00:00:44.010 --> 00:00:48.030
The first one being com dot app dot beans.

21
00:00:48.030 --> 00:00:50.040
So, this folder is going to contain all

22
00:00:50.040 --> 00:00:51.080
the beans that I ever create for all

23
00:00:51.080 --> 00:00:53.090
the demos in this application. Okay?

24
00:00:53.090 --> 00:00:57.060
And, the other one will be exclusively for the tests.

25
00:00:57.060 --> 00:01:00.020
So, com dot app dot tests.

26
00:01:00.020 --> 00:01:01.070
So, all the tests that you do for

27
00:01:01.070 --> 00:01:04.050
the stand alone application will be inside this folder.

28
00:01:04.050 --> 00:01:07.030
We'll go on to our packages in the later part

29
00:01:07.030 --> 00:01:09.080
of the videos when we need them.

30
00:01:09.080 --> 00:01:14.080
Okay, so now let's create a user bean so simple java class,

31
00:01:14.080 --> 00:01:17.070
and let's give it attributes.

32
00:01:17.070 --> 00:01:22.000
So, let's say private int id,

33
00:01:22.000 --> 00:01:24.070
(keyboard typing)

34
00:01:24.070 --> 00:01:27.040
name,

35
00:01:27.040 --> 00:01:30.070
(keyboard typing)

36
00:01:30.070 --> 00:01:31.080
email

37
00:01:31.080 --> 00:01:33.070
and

38
00:01:33.070 --> 00:01:39.030
let's say date,

39
00:01:39.030 --> 00:01:42.090
say date of birth.

40
00:01:42.090 --> 00:01:44.040
And the next step is, of course, generating the

41
00:01:44.040 --> 00:01:47.090
getters/setters the encapsulation principle of Java.

42
00:01:47.090 --> 00:01:53.040
Right? So, getters/setters coming up. Okay. So that's done.

43
00:01:53.040 --> 00:01:55.050
The next is, you have to create an instance of user class

44
00:01:55.050 --> 00:01:57.030
and then feed data to it. Okay.

45
00:01:57.030 --> 00:02:00.070
So now that the bean is ready, let's go to the tests folder

46
00:02:00.070 --> 00:02:07.030
and create a java class let's call it testing a simple bean.

47
00:02:07.030 --> 00:02:09.070
Let's grab the main method P S V M

48
00:02:09.070 --> 00:02:11.030
that's the short cut control space.

49
00:02:11.030 --> 00:02:14.050
And then say user.

50
00:02:14.050 --> 00:02:18.060
Let's create an instance.

51
00:02:18.060 --> 00:02:20.000
Okay.

52
00:02:20.000 --> 00:02:22.060
And let's hold on before we actually assign any data

53
00:02:22.060 --> 00:02:23.060
to that user bean.

54
00:02:23.060 --> 00:02:26.050
The next step is, create a JSON B instance

55
00:02:26.050 --> 00:02:28.000
from JSON B builder.

56
00:02:28.000 --> 00:02:29.050
Now, the objective of this demo is

57
00:02:29.050 --> 00:02:30.090
that you have your user object in front

58
00:02:30.090 --> 00:02:32.040
of you, you want to convert this

59
00:02:32.040 --> 00:02:34.090
to a JSON representation and in order to do that.

60
00:02:34.090 --> 00:02:37.050
Of course that is what we are trying to do and learn in

61
00:02:37.050 --> 00:02:41.010
this course, the JSON binding API will help you for this.

62
00:02:41.010 --> 00:02:46.020
So, let's create an empty JSON B instance first.

63
00:02:46.020 --> 00:02:47.020
Yeah, so everything comes from

64
00:02:47.020 --> 00:02:52.020
the Java export JSON dot bind package and then you create

65
00:02:52.020 --> 00:02:55.000
an instance of JSON B. So, how do you do that?

66
00:02:55.000 --> 00:02:56.060
There's a builder class that is provided

67
00:02:56.060 --> 00:02:59.050
in the API which is called JSON builder.

68
00:02:59.050 --> 00:03:02.070
And you just have to invoke the create method on it.

69
00:03:02.070 --> 00:03:06.020
Once, that's done you have to say JSON B and on

70
00:03:06.020 --> 00:03:09.040
that there is a method called to JSON and then you pass

71
00:03:09.040 --> 00:03:13.030
the object that you want to have a JSON representation of.

72
00:03:13.030 --> 00:03:16.030
So, I'm going to pass the user instance.

73
00:03:16.030 --> 00:03:18.030
Okay, additionally let's also do one thing.

74
00:03:18.030 --> 00:03:20.050
Let's take this inner string because this

75
00:03:20.050 --> 00:03:24.030
to JSON API is going to return me a string value

76
00:03:24.030 --> 00:03:25.010
so I'm going to say string result equal

77
00:03:25.010 --> 00:03:26.000
to this and then let's quickly go

78
00:03:26.000 --> 00:03:33.070
and print that result on the next line.

79
00:03:33.070 --> 00:03:36.020
I'm just separating that variable.

80
00:03:36.020 --> 00:03:39.090
It's a simple thing to do. Okay, let's run this.

81
00:03:39.090 --> 00:03:45.070
And see what happens. Okay, that's what I got on my consul.

82
00:03:45.070 --> 00:03:47.080
Now this is a little puzzling because I had four

83
00:03:47.080 --> 00:03:49.050
attributes inside the user bean.

84
00:03:49.050 --> 00:03:52.000
ID, name, email and date of birth and

85
00:03:52.000 --> 00:03:53.080
the JSON representation is unfortunately

86
00:03:53.080 --> 00:03:56.030
only giving me the ID. Why?

87
00:03:56.030 --> 00:03:58.080
Okay, so that is exactly what we say

88
00:03:58.080 --> 00:04:01.090
the default settings are JSON binding API provides.

89
00:04:01.090 --> 00:04:04.060
What happens is, look carefully, inside the user bean

90
00:04:04.060 --> 00:04:08.050
the data type of the ID is integer and by default

91
00:04:08.050 --> 00:04:12.030
the value of an integer that I type in Java is always zero.

92
00:04:12.030 --> 00:04:14.040
For the other data types string and date

93
00:04:14.040 --> 00:04:17.020
the default value in Java is null.

94
00:04:17.020 --> 00:04:20.040
Now when your JSON bindING API tries to generate

95
00:04:20.040 --> 00:04:22.030
the Jason representation for you

96
00:04:22.030 --> 00:04:25.020
it is always going to skip the null values.

97
00:04:25.020 --> 00:04:26.090
Since ID does not have a null value

98
00:04:26.090 --> 00:04:28.070
and has a legal value which is zero

99
00:04:28.070 --> 00:04:32.000
that's why it only picks up ID during

100
00:04:32.000 --> 00:04:35.030
the serialization process to convert java to JSON.

101
00:04:35.030 --> 00:04:37.050
So, that's what this is about.

102
00:04:37.050 --> 00:04:38.080
So, that's not too good.

103
00:04:38.080 --> 00:04:40.010
So what we'll do is now we'll give meaning to

104
00:04:40.010 --> 00:04:43.000
that user object which means we'll set meaningful data.

105
00:04:43.000 --> 00:04:45.050
So, let's come on the next line, line number twenty.

106
00:04:45.050 --> 00:04:48.030
And say user dot set user ID. Let's give it an ID

107
00:04:48.030 --> 00:04:58.060
one, two, three. Lets say. And then user dot set email.

108
00:04:58.060 --> 00:05:00.090
user dot set name

109
00:05:00.090 --> 00:05:02.080
JSON tester.

110
00:05:02.080 --> 00:05:04.040
That's the name that we want to give

111
00:05:04.040 --> 00:05:06.040
and user dot

112
00:05:06.040 --> 00:05:08.040
set date

113
00:05:08.040 --> 00:05:10.010
will be new date

114
00:05:10.010 --> 00:05:16.030
and let's give it a long value, this one.

115
00:05:16.030 --> 00:05:18.000
Okay.

116
00:05:18.000 --> 00:05:20.020
Now that I've given values to all the fields of

117
00:05:20.020 --> 00:05:22.010
the user object now lets generate

118
00:05:22.010 --> 00:05:27.000
the JSON using JSON binding. And check for results.

119
00:05:27.000 --> 00:05:28.070
Yes, do you see?

120
00:05:28.070 --> 00:05:31.010
Now, you have all the attributes with, of course,

121
00:05:31.010 --> 00:05:32.020
the property names.

122
00:05:32.020 --> 00:05:34.080
So, ID, name, email and the date of birth

123
00:05:34.080 --> 00:05:36.080
and the respective values that have come in

124
00:05:36.080 --> 00:05:39.080
and we have our JSON representation ready.

125
00:05:39.080 --> 00:05:42.030
So what we did is we have a simple java object, we tried

126
00:05:42.030 --> 00:05:44.040
to convert it to a JSON document using

127
00:05:44.040 --> 00:05:47.070
the JSON binding API so the entry point

128
00:05:47.070 --> 00:05:50.060
for this entire process is creating the JSON B instance

129
00:05:50.060 --> 00:05:54.020
that you will get from the JSON B Builder API.

130
00:05:54.020 --> 00:05:57.010
So, on that, you invoke the create method and you're done.

131
00:05:57.010 --> 00:05:58.070
And you see how easy it is?

132
00:05:58.070 --> 00:06:01.050
So this is that data binding that we were talking about.

133
00:06:01.050 --> 00:06:03.030
That when you have your user object you just need

134
00:06:03.030 --> 00:06:06.040
to feed it into the builder API and bam,

135
00:06:06.040 --> 00:06:08.030
that JSON document is ready for you.

136
00:06:08.030 --> 00:06:11.040
Okay, next is we'll see the reverse process,

137
00:06:11.040 --> 00:06:15.000
the opposite side which is using JSON B from JSON

138
00:06:15.000 --> 00:06:18.080
to convert the JSON string back to the user object.

139
00:06:18.080 --> 00:06:20.070
Okay, so let's see how to do that.

140
00:06:20.070 --> 00:06:22.050
So, for that right now, I'm going

141
00:06:22.050 --> 00:06:23.040
to take another JSON B instance

142
00:06:23.040 --> 00:06:25.000
so I'll copy this line twenty-five

143
00:06:25.000 --> 00:06:28.060
and just create another instance on twenty-nine.

144
00:06:28.060 --> 00:06:33.060
Let's take JSON B one. Okay, and what are we going to do?

145
00:06:33.060 --> 00:06:35.050
This JSON result that we already have

146
00:06:35.050 --> 00:06:37.070
with our cells we're going to take the same result

147
00:06:37.070 --> 00:06:41.080
and then convert it into the user object. Okay?

148
00:06:41.080 --> 00:06:45.010
So, how do we do that? You take JSON B one and this time

149
00:06:45.010 --> 00:06:48.060
you say from JSON, we earlier said to JSON

150
00:06:48.060 --> 00:06:51.070
this time it will be from JSON, which takes into arguments

151
00:06:51.070 --> 00:06:54.070
that JSON string or if the JSON is stored

152
00:06:54.070 --> 00:06:56.080
in a document it'll take an input string

153
00:06:56.080 --> 00:06:58.070
or a reader object so that it reads out

154
00:06:58.070 --> 00:07:00.040
that string from that document. Okay?

155
00:07:00.040 --> 00:07:03.020
And then the next argument will be the type

156
00:07:03.020 --> 00:07:07.010
of object you want to convert that JSON data back into.

157
00:07:07.010 --> 00:07:09.030
You have a Java object user object I want that the JSON

158
00:07:09.030 --> 00:07:13.040
that I'm reading gets converted into this user object now.

159
00:07:13.040 --> 00:07:16.080
So that type will go inside the second argument, okay?

160
00:07:16.080 --> 00:07:19.050
Let's make sure that we give the result as

161
00:07:19.050 --> 00:07:23.030
the first argument and the type will be user dot class.

162
00:07:23.030 --> 00:07:27.070
Okay, So let's take this cut and print it out basically,

163
00:07:27.070 --> 00:07:29.060
so we'll put it in a sys-out statement

164
00:07:29.060 --> 00:07:34.090
and let's see what happens.

165
00:07:34.090 --> 00:07:37.020
So there you go, that's the JSON representation

166
00:07:37.020 --> 00:07:40.000
that you got when you invoked to JSON and

167
00:07:40.000 --> 00:07:43.000
that is what you go when you invoked from JSON.

168
00:07:43.000 --> 00:07:45.070
And what does it look like, it is the textual representation

169
00:07:45.070 --> 00:07:49.010
of your object, generally how Java displays your objectS.

170
00:07:49.010 --> 00:07:52.000
So, if you don't want this textual representation you can

171
00:07:52.000 --> 00:07:55.020
go and override the two string method.

172
00:07:55.020 --> 00:07:57.000
So let's come to the user class down there

173
00:07:57.000 --> 00:08:00.020
on line number fifty-three, right click insert code

174
00:08:00.020 --> 00:08:03.020
and make sure that two string is overridden so that all

175
00:08:03.020 --> 00:08:06.020
the values of the instance variables are printed instead

176
00:08:06.020 --> 00:08:07.090
of the textual representation.

177
00:08:07.090 --> 00:08:10.070
So, generate, save this, go back to

178
00:08:10.070 --> 00:08:16.020
the simple bean and now run this.

179
00:08:16.020 --> 00:08:20.010
Okay, so this time we have got whatever we wanted. Right?

180
00:08:20.010 --> 00:08:22.050
We can see the user object coming back and

181
00:08:22.050 --> 00:08:24.050
all the respective fields with all

182
00:08:24.050 --> 00:08:27.050
the correct values set perfectly which were read out

183
00:08:27.050 --> 00:08:30.010
from that JSON representation.

184
00:08:30.010 --> 00:08:32.030
Okay, so that's the basic example.

185
00:08:32.030 --> 00:08:35.080
You converted a java object with JSON using the to JSON API

186
00:08:35.080 --> 00:08:39.020
and you converted a JSON string back

187
00:08:39.020 --> 00:08:42.020
to a user object using the from JSON API.

188
00:08:42.020 --> 00:08:44.050
Now of course, to JSON and from JSON

189
00:08:44.050 --> 00:08:49.030
have overloaded versions. Let's quickly take a look.

190
00:08:49.030 --> 00:08:52.020
So when I say to JSON you can just give

191
00:08:52.020 --> 00:08:53.060
the object and you can give the object

192
00:08:53.060 --> 00:08:56.010
and sometimes also mention the type,

193
00:08:56.010 --> 00:08:58.030
or you can give the object and say that you want

194
00:08:58.030 --> 00:09:00.030
to write this to a particular file,

195
00:09:00.030 --> 00:09:02.020
so you can actually mention the writer object doing

196
00:09:02.020 --> 00:09:05.050
the job for you. So these overloaded versions are available.

197
00:09:05.050 --> 00:09:07.020
So, the way you have a writer you also have

198
00:09:07.020 --> 00:09:09.000
an output string, right?

199
00:09:09.000 --> 00:09:11.080
Similarly, you also have the from JSON overloaded

200
00:09:11.080 --> 00:09:14.000
versions which will either take an input string

201
00:09:14.000 --> 00:09:15.080
or will take a reader object

202
00:09:15.080 --> 00:09:18.040
or it will simply take your JSON string.

203
00:09:18.040 --> 00:09:22.070
And of course from JSON will definitely require the type.

204
00:09:22.070 --> 00:09:24.040
Otherwise, it will not be able to understand what

205
00:09:24.040 --> 00:09:27.010
it is supposed to convert back to.

206
00:09:27.010 --> 00:09:31.030
You need proper Java type specified as the second argument.

207
00:09:31.030 --> 00:09:33.090
Okay? So we'll see a lot of default settings.

208
00:09:33.090 --> 00:09:35.050
We've just seen the basic demo.

209
00:09:35.050 --> 00:09:38.000
We'll see the rest of them in the next video.

