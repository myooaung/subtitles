WEBVTT
1
00:00:00.060 --> 00:00:04.030
- So the entire bean structure and the data all of that

2
00:00:04.030 --> 00:00:07.040
is ready with us, now let's go on and test out this

3
00:00:07.040 --> 00:00:12.030
small application, so we will create a Jsonb instance

4
00:00:12.030 --> 00:00:16.000
from the JsonbBuilder, so Jsonb the default engine

5
00:00:16.000 --> 00:00:18.070
that we have used before as well and all the default

6
00:00:18.070 --> 00:00:21.000
settings that we saw before were set by that Jsonb

7
00:00:21.000 --> 00:00:25.010
default agent, Jsonb instances that you create are

8
00:00:25.010 --> 00:00:27.090
thread safe and they can also be reused

9
00:00:27.090 --> 00:00:30.000
Moreover, the specification says that you can use

10
00:00:30.000 --> 00:00:33.000
one instance per conflict type

11
00:00:33.000 --> 00:00:35.070
In the previous demo, we used separate instance to

12
00:00:35.070 --> 00:00:37.060
serialize and deserialize, but we can just use

13
00:00:37.060 --> 00:00:41.020
one of them, so let's go ahead to the IDE

14
00:00:41.020 --> 00:00:44.060
Let's create a test class, let's say, we are testing

15
00:00:44.060 --> 00:00:48.000
many data types now, because it's a lot of objects

16
00:00:48.000 --> 00:00:51.040
going around, so let's say test data types, and let's

17
00:00:51.040 --> 00:00:55.030
grab the bean method and we get the Jsonb default

18
00:00:55.030 --> 00:01:03.060
engine instance, so, that you can get by the

19
00:01:03.060 --> 00:01:12.010
JsonbBuilder, API, and let's call it create API

20
00:01:12.010 --> 00:01:15.050
So once that's done, let's correct the spelling for this

21
00:01:15.050 --> 00:01:23.050
OK now let's go ahead and say Jsonb.tojson, so the process

22
00:01:23.050 --> 00:01:27.010
is pretty much the same you've already seen previously

23
00:01:27.010 --> 00:01:29.050
but this time what we're going to do is, we are going

24
00:01:29.050 --> 00:01:33.040
to write this entire json representation in a file

25
00:01:33.040 --> 00:01:35.040
We're not just gonna have a string for it, we're gonna

26
00:01:35.040 --> 00:01:37.010
write it out in a file

27
00:01:37.010 --> 00:01:41.070
So let's do one thing, let's have try with resources

28
00:01:41.070 --> 00:01:51.070
statement, where you have a writer object

29
00:01:51.070 --> 00:01:54.090
Let's feed in a new file writer and then a new file object

30
00:01:54.090 --> 00:02:01.090
inside it and let's give part of the file as order.ext

31
00:02:01.090 --> 00:02:05.030
so that's the x file in which the entire serialized

32
00:02:05.030 --> 00:02:09.020
object of that order is going to go inside

33
00:02:09.020 --> 00:02:11.060
OK and what are we going to do inside it, we just have

34
00:02:11.060 --> 00:02:19.040
to say writer.write and what are we going to write?

35
00:02:19.040 --> 00:02:22.070
What we are going to write is let's take that jsonb engine

36
00:02:22.070 --> 00:02:28.050
instance and say .tojson and we have to feed the order

37
00:02:28.050 --> 00:02:31.070
object here, but in order to feed the order object, yes

38
00:02:31.070 --> 00:02:34.010
we will have to get the order object from the data

39
00:02:34.010 --> 00:02:36.020
generator class that we saw in the previous video

40
00:02:36.020 --> 00:02:41.040
So let's do that before, online 29 I'll create the order

41
00:02:41.040 --> 00:02:46.070
reference and I'll call the data generator that I have

42
00:02:46.070 --> 00:02:50.070
in my utilities package and just take the data

43
00:02:50.070 --> 00:02:53.030
So once this is opting you just have to copy this and

44
00:02:53.030 --> 00:02:58.000
paste it on that line number 26

45
00:02:58.000 --> 00:03:01.070
OK and after that of course we have to say writer.flush

46
00:03:01.070 --> 00:03:04.050
because the contents have to get copied into that file

47
00:03:04.050 --> 00:03:07.050
OK so once we do this we have to add a catch clause

48
00:03:07.050 --> 00:03:11.030
for this, here and we're ready, so now the file is order

49
00:03:11.030 --> 00:03:14.020
on EXT, it should get created in your project structure

50
00:03:14.020 --> 00:03:19.040
itself, OK and the next step we'll do is use Jsonb

51
00:03:19.040 --> 00:03:23.010
from Json which is going to convert that Json string

52
00:03:23.010 --> 00:03:27.010
back to the original bean structure, so let's come back

53
00:03:27.010 --> 00:03:31.050
What are we going to do here is we are going to take

54
00:03:31.050 --> 00:03:38.040
that same Jsonb instance here and say .fromJson and this

55
00:03:38.040 --> 00:03:40.080
time we are going to read that Json structure from

56
00:03:40.080 --> 00:03:44.060
the file that we just saved, so the first thing is this

57
00:03:44.060 --> 00:03:47.040
writing operation will happen which will save this file,

58
00:03:47.040 --> 00:03:49.020
then we'll take that same file and we'll read

59
00:03:49.020 --> 00:03:51.060
the entire Json structure back and it should return

60
00:03:51.060 --> 00:03:56.080
to us this time an order object, so let's do that

61
00:03:56.080 --> 00:04:02.020
Let's come on line 35 and say new, file reader, do that

62
00:04:02.020 --> 00:04:07.020
provide the file object, to that provide the file which

63
00:04:07.020 --> 00:04:09.020
is simple, in the project structure so I'm just referring

64
00:04:09.020 --> 00:04:11.080
it directly, and what is the type that we want, we want

65
00:04:11.080 --> 00:04:16.060
order.class, because that's the object that we intend

66
00:04:16.060 --> 00:04:20.050
to serialize and deserialize, OK and let's also do one

67
00:04:20.050 --> 00:04:23.060
thing, let's take the entire output of this quickly

68
00:04:23.060 --> 00:04:26.050
in an order object and do you see that it is so easy

69
00:04:26.050 --> 00:04:29.060
to do that, we'll name it differently, we'll say

70
00:04:29.060 --> 00:04:35.000
deserialized order, it's that simple, you just have

71
00:04:35.000 --> 00:04:38.000
to create a reference of your order and the entire

72
00:04:38.000 --> 00:04:40.080
deserialization process will quickly help you to

73
00:04:40.080 --> 00:04:43.070
fetch the data in that order object

74
00:04:43.070 --> 00:04:47.030
Let's not do throws, let's do dry catch, OK

75
00:04:47.030 --> 00:04:51.050
So now I'm gonna print the contents of this order reference

76
00:04:51.050 --> 00:04:56.080
so I'll say system out on line 39 and jut print this out

77
00:04:56.080 --> 00:04:59.030
that's all, so let's run this application and see how

78
00:04:59.030 --> 00:05:04.070
it behaves, OK it did print me, do you see

79
00:05:04.070 --> 00:05:08.000
the entire object got printed, but I don't have

80
00:05:08.000 --> 00:05:10.000
the serialized input, so for that we'll have

81
00:05:10.000 --> 00:05:12.040
to see this file that must have got created in your

82
00:05:12.040 --> 00:05:16.060
project structure, so let's go there, here it got

83
00:05:16.060 --> 00:05:19.020
created, so I'm under my beans projects folder

84
00:05:19.020 --> 00:05:22.020
Jsonb sample, that's where the project is and I

85
00:05:22.020 --> 00:05:25.090
just have to right click this, OK so that's the Jsonb

86
00:05:25.090 --> 00:05:28.090
representation and it is very cumbersome to look at it

87
00:05:28.090 --> 00:05:32.020
because it's one long straight line, OK so let's do one

88
00:05:32.020 --> 00:05:36.040
thing let's pick up this entire line, copy, and let's

89
00:05:36.040 --> 00:05:39.090
go to our very own jsonlint.com and let's paste

90
00:05:39.090 --> 00:05:43.030
that entire string here and save data I json and there you

91
00:05:43.030 --> 00:05:46.050
go now it's formatted for us so it's easy to read

92
00:05:46.050 --> 00:05:49.020
so that's the customer object with all its fields

93
00:05:49.020 --> 00:05:52.020
the numbers, the strings, the order values

94
00:05:52.020 --> 00:05:54.040
then we have a couple of date fields which we had picked

95
00:05:54.040 --> 00:05:57.030
up as local date API from Java time package

96
00:05:57.030 --> 00:05:59.090
And then we have the order details object which is called

97
00:05:59.090 --> 00:06:01.090
a list of products, so that becomes an array now

98
00:06:01.090 --> 00:06:05.000
because it was a list of products in our Java class

99
00:06:05.000 --> 00:06:08.020
so those are the fields for the first product

100
00:06:08.020 --> 00:06:12.000
the second one, the third one, the fourth one

101
00:06:12.000 --> 00:06:14.080
and now do you see that under the fourth product

102
00:06:14.080 --> 00:06:18.010
I do not have the shipping company attribute listed

103
00:06:18.010 --> 00:06:21.060
at all, that's because shipping company was set to null

104
00:06:21.060 --> 00:06:24.070
and null values will not be picked up in serialization

105
00:06:24.070 --> 00:06:27.090
however, after you finish up the fourth product

106
00:06:27.090 --> 00:06:31.000
there's a null value right there, that's the null

107
00:06:31.000 --> 00:06:33.060
entry in the collection, and json is going to retain

108
00:06:33.060 --> 00:06:37.050
all the null entries during serialization

109
00:06:37.050 --> 00:06:40.030
Null is a valid value in any collection class that

110
00:06:40.030 --> 00:06:45.020
you use in Java and Jsonb aligns with that behavior

111
00:06:45.020 --> 00:06:48.020
OK and then you have the shipping address, and then

112
00:06:48.020 --> 00:06:52.020
its respective fields, the total amount, and the order ID

113
00:06:52.020 --> 00:06:57.000
and then finally the json has its closing braces right

114
00:06:57.000 --> 00:07:00.090
there, OK so every object has a key, right, and all

115
00:07:00.090 --> 00:07:04.060
of these keys are picked up from all the instances of names

116
00:07:04.060 --> 00:07:08.050
that we have declared as a part of a B, OK so that's

117
00:07:08.050 --> 00:07:12.050
how this goes, so that's about serialization, now when

118
00:07:12.050 --> 00:07:16.050
we come to deserialization, that's what we did, we

119
00:07:16.050 --> 00:07:19.050
actually read the entire order.ext file and then we got

120
00:07:19.050 --> 00:07:23.030
the entire deserialized content in an order reference

121
00:07:23.030 --> 00:07:26.060
and we printed that out and that's how it looks like

122
00:07:26.060 --> 00:07:29.090
so let's maximize the console, yeah there it is

123
00:07:29.090 --> 00:07:32.000
so you have your order object inside which you have

124
00:07:32.000 --> 00:07:34.080
order details and order details points to order details

125
00:07:34.080 --> 00:07:38.000
object again, so then we have inside that products

126
00:07:38.000 --> 00:07:40.090
which points to a number of product objects

127
00:07:40.090 --> 00:07:45.020
OK one by one, and then you also have the shipping

128
00:07:45.020 --> 00:07:48.050
address and the customer details and all of that

129
00:07:48.050 --> 00:07:51.040
So this output is a result of the two string

130
00:07:51.040 --> 00:07:54.030
implementation in all our Java beans, you will not

131
00:07:54.030 --> 00:07:57.010
be able to format this because this is Java object

132
00:07:57.010 --> 00:07:59.080
OK we'll be able to format only the Jsonb representation

133
00:07:59.080 --> 00:08:03.070
that we saw earlier, so that now we've seen serialization

134
00:08:03.070 --> 00:08:06.020
and deserialization for a lot of data types for all kinds

135
00:08:06.020 --> 00:08:08.080
of objects and for a complicated combination of objects

136
00:08:08.080 --> 00:08:12.000
let's go and do some more stuff in the upcoming videos

