WEBVTT
1
00:00:00.060 --> 00:00:01.090
- [Instructor] Okay, let's take a look

2
00:00:01.090 --> 00:00:06.010
at the customized option of ignoring certain properties.

3
00:00:06.010 --> 00:00:07.050
One of these we've already seen

4
00:00:07.050 --> 00:00:09.070
in one of our earlier videos.

5
00:00:09.070 --> 00:00:12.040
We've already looked at the property visibility,

6
00:00:12.040 --> 00:00:15.030
where we had talked about certain combinations,

7
00:00:15.030 --> 00:00:17.050
and one of them was what happens

8
00:00:17.050 --> 00:00:20.000
when you apply the "transient" modifier.

9
00:00:20.000 --> 00:00:22.020
So we know that when you apply transient modifier

10
00:00:22.020 --> 00:00:23.070
to any field, then that field is going

11
00:00:23.070 --> 00:00:26.090
to be skipped during serialization, okay?

12
00:00:26.090 --> 00:00:28.080
So that's the first option that you have with you

13
00:00:28.080 --> 00:00:30.070
if you want to ignore a particular property.

14
00:00:30.070 --> 00:00:33.090
In addition to that, you can also add compile time,

15
00:00:33.090 --> 00:00:37.070
use the JsonbTransient annotation.

16
00:00:37.070 --> 00:00:39.040
Either you apply it directly on the field,

17
00:00:39.040 --> 00:00:41.020
or on the getter/setter.

18
00:00:41.020 --> 00:00:42.090
So let's check that annotation out.

19
00:00:42.090 --> 00:00:46.000
Let's say, on the Product class,

20
00:00:46.000 --> 00:00:49.050
we want to make sure that "shippingCompany"

21
00:00:49.050 --> 00:00:51.080
is not a part of the generated JSON.

22
00:00:51.080 --> 00:00:53.040
Let's say that's what we want to do.

23
00:00:53.040 --> 00:00:58.040
So in that case, I'm going to say, JsonbTransient.

24
00:00:58.040 --> 00:01:00.040
That's the annotation that I'm going to apply

25
00:01:00.040 --> 00:01:03.030
on the "shippingCompany" property, okay?

26
00:01:03.030 --> 00:01:09.030
And now let's go ahead, let's make a test class.

27
00:01:09.030 --> 00:01:16.070
Test, let's say, IgnoreProperties.

28
00:01:16.070 --> 00:01:20.050
The main method, yes, lets go to the last test class,

29
00:01:20.050 --> 00:01:22.020
we already have everything set there,

30
00:01:22.020 --> 00:01:25.070
the data for the product, so I'm just going to grab the,

31
00:01:25.070 --> 00:01:28.000
all the strategy maybe, yes.

32
00:01:28.000 --> 00:01:31.060
And let's get hold of this data.

33
00:01:31.060 --> 00:01:34.000
And let's come back to TestIgnoreProperties

34
00:01:34.000 --> 00:01:35.060
on line number 16.

35
00:01:35.060 --> 00:01:36.090
I'm going to copy that.

36
00:01:36.090 --> 00:01:37.080
This is just the mock data

37
00:01:37.080 --> 00:01:40.080
that we are trying to create, nothing more.

38
00:01:40.080 --> 00:01:42.090
Okay, and once we do that,

39
00:01:42.090 --> 00:01:47.020
we also can pick up the lines in their test class,

40
00:01:47.020 --> 00:01:51.080
which was trying to write the object to JSON.

41
00:01:51.080 --> 00:01:55.060
So lines number 29 will be create the b for JSON instance,

42
00:01:55.060 --> 00:01:59.010
and then we call the two adjacent API.

43
00:01:59.010 --> 00:02:02.030
So let's grab those two lines, 29 and 30.

44
00:02:02.030 --> 00:02:05.020
Come back to our TestIgnoreProperties class,

45
00:02:05.020 --> 00:02:07.050
and paste them on line 28.

46
00:02:07.050 --> 00:02:10.010
However, we do not want the ObjectMapper.

47
00:02:10.010 --> 00:02:12.060
We just want an empty jsonb instance,

48
00:02:12.060 --> 00:02:15.040
which is created using the Create API,

49
00:02:15.040 --> 00:02:17.080
not the overloaded version of Create API.

50
00:02:17.080 --> 00:02:20.040
So I'm going to get rid of this, okay?

51
00:02:20.040 --> 00:02:24.000
Let's run this and see.

52
00:02:24.000 --> 00:02:26.090
Okay, so since we did not take the config object,

53
00:02:26.090 --> 00:02:29.030
you're not going to get the formatting, okay?

54
00:02:29.030 --> 00:02:31.090
So let's go ahead and take this.

55
00:02:31.090 --> 00:02:37.020
Go to JSONLint and observe the output.

56
00:02:37.020 --> 00:02:38.090
Validate JSON, yeah.

57
00:02:38.090 --> 00:02:41.000
Now do you see, that under every product

58
00:02:41.000 --> 00:02:43.090
that has got information, I do not see

59
00:02:43.090 --> 00:02:47.000
the shipping company at all.

60
00:02:47.000 --> 00:02:48.020
Do you see that?

61
00:02:48.020 --> 00:02:49.020
There's no product which has got

62
00:02:49.020 --> 00:02:50.090
the shipping company listed at all.

63
00:02:50.090 --> 00:02:52.090
So that's how you can ignore a certain property

64
00:02:52.090 --> 00:02:55.010
when you want, to serialize it.

65
00:02:55.010 --> 00:02:57.090
Now this annotation that we have applied,

66
00:02:57.090 --> 00:03:01.000
is, of course, on the field level, right?

67
00:03:01.000 --> 00:03:02.030
So you're on the Product class,

68
00:03:02.030 --> 00:03:04.000
we actually applied it on the field level.

69
00:03:04.000 --> 00:03:06.090
However, you can apply it eve on the getter or the setter.

70
00:03:06.090 --> 00:03:10.010
So let's see how it behaves when you apply it on the getter.

71
00:03:10.010 --> 00:03:14.040
So let's go to getShippingCompany down there.

72
00:03:14.040 --> 00:03:18.020
Yeah that's when the getter method for the shipping company,

73
00:03:18.020 --> 00:03:21.030
and just before the getter method, on line 61,

74
00:03:21.030 --> 00:03:24.070
I'm going to paste that annotation, okay?

75
00:03:24.070 --> 00:03:27.080
And then let's see what happens.

76
00:03:27.080 --> 00:03:29.070
So this is the JsonbTransient annotation

77
00:03:29.070 --> 00:03:31.000
that we have applied on the getter,

78
00:03:31.000 --> 00:03:34.010
now let's go back to the testing class,

79
00:03:34.010 --> 00:03:37.020
and let's go down,

80
00:03:37.020 --> 00:03:38.000
and let's say

81
00:03:38.000 --> 00:03:39.080
that we are taking this into a string.

82
00:03:39.080 --> 00:03:43.030
Let's take this into a string,

83
00:03:43.030 --> 00:03:45.070
instead of printing it out of the consoles.

84
00:03:45.070 --> 00:03:47.020
And we'll just say String result

85
00:03:47.020 --> 00:03:52.030
equal to the serialized output.

86
00:03:52.030 --> 00:03:56.090
And let's print that.

87
00:03:56.090 --> 00:03:58.040
So I actually took it in a variable,

88
00:03:58.040 --> 00:04:00.080
because I also want to deserialize it, okay,

89
00:04:00.080 --> 00:04:02.050
which is why I took it in a variable.

90
00:04:02.050 --> 00:04:03.060
Okay, and the next line,

91
00:04:03.060 --> 00:04:06.030
we'll deserialize the products data, okay?

92
00:04:06.030 --> 00:04:08.010
So how will we do that?

93
00:04:08.010 --> 00:04:11.050
We have to make sure that we have the same instance.

94
00:04:11.050 --> 00:04:13.060
This is the one.

95
00:04:13.060 --> 00:04:19.000
Copy that, come to line 34, and then say "fromjson",

96
00:04:19.000 --> 00:04:21.040
and then you can, given the result, okay?

97
00:04:21.040 --> 00:04:22.070
It will expect a type,

98
00:04:22.070 --> 00:04:24.030
so this is a generics list

99
00:04:24.030 --> 00:04:28.000
so again the same mechanism that we applied last time.

100
00:04:28.000 --> 00:04:33.020
ArrayList, of Product, okay?

101
00:04:33.020 --> 00:04:39.010
And then on that you say getClass and getGEnericSuperclass.

102
00:04:39.010 --> 00:04:50.090
The output of this will be List of Products.

103
00:04:50.090 --> 00:04:55.050
And then we just print the deserialized products.

104
00:04:55.050 --> 00:04:57.020
Okay.

105
00:04:57.020 --> 00:04:58.000
So what we've done

106
00:04:58.000 --> 00:05:00.010
is we've applied the jsonb transient annotation

107
00:05:00.010 --> 00:05:01.080
on the getter.

108
00:05:01.080 --> 00:05:04.020
And this time we have also deserialized

109
00:05:04.020 --> 00:05:06.000
so that we understand the difference

110
00:05:06.000 --> 00:05:09.000
of that particular annotation when it comes to serialization

111
00:05:09.000 --> 00:05:11.000
and deserialization, both.

112
00:05:11.000 --> 00:05:15.050
Let's run this.

113
00:05:15.050 --> 00:05:16.040
Okay.

114
00:05:16.040 --> 00:05:19.030
So when it tried to serialize, that was output.

115
00:05:19.030 --> 00:05:22.090
So under that you do not see the shipping company at all.

116
00:05:22.090 --> 00:05:26.030
So since the annnotation was laid out on the getter,

117
00:05:26.030 --> 00:05:28.020
while it was doing the serialization,

118
00:05:28.020 --> 00:05:31.070
the shipping company property will never be included.

119
00:05:31.070 --> 00:05:33.020
And because of that,

120
00:05:33.020 --> 00:05:34.090
when it was trying to deserialize,

121
00:05:34.090 --> 00:05:37.030
do you see that every product has shipping company

122
00:05:37.030 --> 00:05:38.060
set to null?

123
00:05:38.060 --> 00:05:42.050
Because it never found the value for this particular key

124
00:05:42.050 --> 00:05:44.060
in the json representation.

125
00:05:44.060 --> 00:05:47.040
So when it tried to deserialize it couldn't get a value

126
00:05:47.040 --> 00:05:51.000
so it sent it to the default value of its data type

127
00:05:51.000 --> 00:05:53.060
and its data type is null.

128
00:05:53.060 --> 00:05:54.060
Right?

129
00:05:54.060 --> 00:05:55.050
If you, however,

130
00:05:55.050 --> 00:05:58.030
apply this annotation in your setter meters.

131
00:05:58.030 --> 00:06:00.090
So let's cut it out from here

132
00:06:00.090 --> 00:06:03.050
and let's go the second meter, line 65

133
00:06:03.050 --> 00:06:05.020
and paste it there.

134
00:06:05.020 --> 00:06:08.080
And then let's see what happens.

135
00:06:08.080 --> 00:06:12.070
So I'm going to run this again.

136
00:06:12.070 --> 00:06:14.020
So when it tried to serialize,

137
00:06:14.020 --> 00:06:16.030
yes the shipping company was good

138
00:06:16.030 --> 00:06:20.020
and every product's shipping company was definitely going

139
00:06:20.020 --> 00:06:22.050
to go inside the json document.

140
00:06:22.050 --> 00:06:25.000
However, we specifically mentioned

141
00:06:25.000 --> 00:06:27.060
that it should not consider the shipping company

142
00:06:27.060 --> 00:06:31.000
when it was trying to deserialize the json.

143
00:06:31.000 --> 00:06:33.030
And that's exactly why everywhere now,

144
00:06:33.030 --> 00:06:37.010
the shipping company is set to null.

145
00:06:37.010 --> 00:06:38.010
Okay?

146
00:06:38.010 --> 00:06:39.040
So this is what it is.

147
00:06:39.040 --> 00:06:41.030
Whenever you have to have it on getter

148
00:06:41.030 --> 00:06:43.040
it will be considered for serialization.

149
00:06:43.040 --> 00:06:44.090
But if it's on setter

150
00:06:44.090 --> 00:06:47.060
then it will not be considered for deserialization.

151
00:06:47.060 --> 00:06:49.030
But if you put it on the field,

152
00:06:49.030 --> 00:06:50.080
then it will not be considered for

153
00:06:50.080 --> 00:06:53.050
both serialization and deserialization.

154
00:06:53.050 --> 00:06:56.050
Let's do both the cases even on the field level.

155
00:06:56.050 --> 00:06:58.000
Let's cut this out.

156
00:06:58.000 --> 00:06:59.050
Because when we say it on the field level,

157
00:06:59.050 --> 00:07:01.030
we only saw for serialization.

158
00:07:01.030 --> 00:07:03.000
So let's check it out for both.

159
00:07:03.000 --> 00:07:11.030
So again back to line number 20 over there and now test.

160
00:07:11.030 --> 00:07:14.010
Okay, so now when you put it on the field level,

161
00:07:14.010 --> 00:07:15.070
you do not have the shipping company

162
00:07:15.070 --> 00:07:19.040
either on the serialization neither on the deserialization.

163
00:07:19.040 --> 00:07:23.010
In both the cases, it is not going to be considered at all.

164
00:07:23.010 --> 00:07:26.070
We'll see the .withPropertyVisibilityStrategy API call

165
00:07:26.070 --> 00:07:28.000
in the next video.

