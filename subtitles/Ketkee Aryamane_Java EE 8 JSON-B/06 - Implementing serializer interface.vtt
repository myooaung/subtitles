WEBVTT
1
00:00:00.050 --> 00:00:01.080
- [Instructor] So the Use case that we have is,

2
00:00:01.080 --> 00:00:04.040
we are going to identify different kinds of people

3
00:00:04.040 --> 00:00:06.010
who come for that conference meet.

4
00:00:06.010 --> 00:00:08.020
So I have a software developer, I have a professor,

5
00:00:08.020 --> 00:00:10.030
I could have some other kind of a person.

6
00:00:10.030 --> 00:00:13.000
All of them belong to the same inheritance hierarchy.

7
00:00:13.000 --> 00:00:15.030
So when you serialize a collection of such objects,

8
00:00:15.030 --> 00:00:17.010
how do you even deserialize it?

9
00:00:17.010 --> 00:00:18.070
Because there's no way to figure out

10
00:00:18.070 --> 00:00:20.030
which object you're trying to create

11
00:00:20.030 --> 00:00:22.080
back from the JSON document, right?

12
00:00:22.080 --> 00:00:25.010
So now let's go ahead and implement the custom serializer.

13
00:00:25.010 --> 00:00:27.010
So, for that we need to write a class

14
00:00:27.010 --> 00:00:30.030
which implements the JSON-B serializer interface.

15
00:00:30.030 --> 00:00:33.030
Let's head back to the IDE and under the Custom folder,

16
00:00:33.030 --> 00:00:37.020
I will create a class which will, let's say,

17
00:00:37.020 --> 00:00:40.080
be called PersonSerializer.

18
00:00:40.080 --> 00:00:42.060
And what is this going to do?

19
00:00:42.060 --> 00:00:48.050
This is going to implement the JsonbSerializer interface.

20
00:00:48.050 --> 00:00:50.010
And who are we doing this job for?

21
00:00:50.010 --> 00:00:52.020
For the Person class.

22
00:00:52.020 --> 00:00:56.050
So that will be the generics value that we apply.

23
00:00:56.050 --> 00:00:57.060
So the moment we do this we'll have

24
00:00:57.060 --> 00:00:59.050
to implement the abstract methods.

25
00:00:59.050 --> 00:01:00.040
Right?

26
00:01:00.040 --> 00:01:01.030
Okay.

27
00:01:01.030 --> 00:01:02.080
Let's do this.

28
00:01:02.080 --> 00:01:03.070
Okay.

29
00:01:03.070 --> 00:01:04.070
There's just one method.

30
00:01:04.070 --> 00:01:05.050
Serialize.

31
00:01:05.050 --> 00:01:07.010
Now what is this demanding?

32
00:01:07.010 --> 00:01:09.000
The Person object?

33
00:01:09.000 --> 00:01:10.040
JsonGenerator.

34
00:01:10.040 --> 00:01:14.010
So this is the low-level Json API that we have,

35
00:01:14.010 --> 00:01:17.070
which comes from the JsonProcessing bundle of APIs.

36
00:01:17.070 --> 00:01:22.020
So, this JsonGenerator will help you to write JSON data

37
00:01:22.020 --> 00:01:24.090
to an output source in a streaming fashion.

38
00:01:24.090 --> 00:01:29.000
It belongs to the javax.jason.stream package.

39
00:01:29.000 --> 00:01:31.010
And if you look at your Json class,

40
00:01:31.010 --> 00:01:32.080
it has got methods in order

41
00:01:32.080 --> 00:01:35.090
to create these Generator references for you.

42
00:01:35.090 --> 00:01:37.040
So that is the JsonGenerator.

43
00:01:37.040 --> 00:01:39.040
And then additionally, we have got something

44
00:01:39.040 --> 00:01:41.090
which is called as SerializationContext.

45
00:01:41.090 --> 00:01:44.040
So if you look at this, it is a helper,

46
00:01:44.040 --> 00:01:45.040
it is a kind of utility,

47
00:01:45.040 --> 00:01:48.050
which will help you to serialize a given object.

48
00:01:48.050 --> 00:01:50.060
So there are all ordered versions of that method,

49
00:01:50.060 --> 00:01:54.050
the first one which will take a String and then the object.

50
00:01:54.050 --> 00:01:56.030
And then use the JsonGenerator

51
00:01:56.030 --> 00:01:58.040
to write it to the output source.

52
00:01:58.040 --> 00:02:02.000
The other one just takes the object and the JsonGenerator.

53
00:02:02.000 --> 00:02:04.090
So, first one is primarily to make out

54
00:02:04.090 --> 00:02:06.030
if you really want to specify a key

55
00:02:06.030 --> 00:02:10.020
for that particular object that you're trying to serialize.

56
00:02:10.020 --> 00:02:12.040
Okay. So what are we going to do here?

57
00:02:12.040 --> 00:02:14.050
Let's get rid of the default implementation first.

58
00:02:14.050 --> 00:02:15.090
Let's come down.

59
00:02:15.090 --> 00:02:17.030
Line number 22.

60
00:02:17.030 --> 00:02:20.080
I don't like these names which are given to parameters.

61
00:02:20.080 --> 00:02:22.010
You cannot make out anything from them.

62
00:02:22.010 --> 00:02:23.000
So let's change them.

63
00:02:23.000 --> 00:02:24.060
Person.

64
00:02:24.060 --> 00:02:27.040
Let's stick to a good coding convention.

65
00:02:27.040 --> 00:02:29.020
JsonGenerator.

66
00:02:29.020 --> 00:02:31.060
That's always good rather than jg.

67
00:02:31.060 --> 00:02:32.040
Right?

68
00:02:32.040 --> 00:02:35.010
Okay and let's call this, at least, context.

69
00:02:35.010 --> 00:02:36.000
Okay.

70
00:02:36.000 --> 00:02:37.000
Now it looks better.

71
00:02:37.000 --> 00:02:38.040
Now let's go ahead.

72
00:02:38.040 --> 00:02:41.000
The first thing that we have to do is go ahead

73
00:02:41.000 --> 00:02:45.010
and take that jsonGenerator reference

74
00:02:45.010 --> 00:02:48.050
and say start writing the object.

75
00:02:48.050 --> 00:02:50.010
writeStartObject().

76
00:02:50.010 --> 00:02:51.070
That's the method that you want to call.

77
00:02:51.070 --> 00:02:52.080
This one.

78
00:02:52.080 --> 00:02:54.040
Now, the next thing is

79
00:02:54.040 --> 00:02:56.060
we are going to take the serialization context object,

80
00:02:56.060 --> 00:03:00.030
so let's say context, and we are going to say serialize,

81
00:03:00.030 --> 00:03:03.080
and we want to get the second version, the overloaded

82
00:03:03.080 --> 00:03:05.070
version, which demands a string.

83
00:03:05.070 --> 00:03:07.040
Now the string will be

84
00:03:07.040 --> 00:03:10.060
I'm going to get the name of the class.

85
00:03:10.060 --> 00:03:12.030
What better key do you have

86
00:03:12.030 --> 00:03:14.040
than taking the name of the class itself?

87
00:03:14.040 --> 00:03:19.090
So let's say person, dot, and you say getClass,

88
00:03:19.090 --> 00:03:22.080
and on that you chain getName.

89
00:03:22.080 --> 00:03:24.060
And take this current

90
00:03:24.060 --> 00:03:29.020
person object that you already have as a parameter and then

91
00:03:29.020 --> 00:03:30.080
of course the jsonGenerator.

92
00:03:30.080 --> 00:03:32.060
So once you've completed this

93
00:03:32.060 --> 00:03:35.050
serialization, you'll just going to have to call the

94
00:03:35.050 --> 00:03:39.030
jsonGenerator and say writeEnd.

95
00:03:39.030 --> 00:03:40.050
Okay.

96
00:03:40.050 --> 00:03:44.000
So, in a gist, what have we done?

97
00:03:44.000 --> 00:03:46.010
Whenever any of the Professor or the

98
00:03:46.010 --> 00:03:49.020
SoftwareDeveloper objects comes in for serialization,

99
00:03:49.020 --> 00:03:51.010
it's going to meet this method first.

100
00:03:51.010 --> 00:03:53.030
Because that's how we're going to serialize it.

101
00:03:53.030 --> 00:03:56.010
When it starts writing out the serialization for,

102
00:03:56.010 --> 00:03:57.070
let's say, a software developer,

103
00:03:57.070 --> 00:04:00.020
then the SoftwareDeveloper object is going to come and

104
00:04:00.020 --> 00:04:01.090
sit in this parameter.

105
00:04:01.090 --> 00:04:03.070
So when we say getClass, getName,

106
00:04:03.070 --> 00:04:06.070
we're going to get the name of the SoftwareDeveloper class.

107
00:04:06.070 --> 00:04:08.070
That totally works for us because that's how we will

108
00:04:08.070 --> 00:04:11.060
identify that the object that got serialized right now

109
00:04:11.060 --> 00:04:14.030
is of this software developer.

110
00:04:14.030 --> 00:04:15.070
Pass the object itself.

111
00:04:15.070 --> 00:04:17.080
Because that's what you want to serialize.

112
00:04:17.080 --> 00:04:18.080
And jsonGenerator

113
00:04:18.080 --> 00:04:21.010
because you need to write out this object in a streaming

114
00:04:21.010 --> 00:04:23.070
fashion for which you will use this API.

115
00:04:23.070 --> 00:04:27.050
Once this is done, you just have to end the writing.

116
00:04:27.050 --> 00:04:30.000
Alright, so this is the Serializer.

117
00:04:30.000 --> 00:04:33.000
So now let's go and test the serialization behavior.

118
00:04:33.000 --> 00:04:33.080
You just have to go the the

119
00:04:33.080 --> 00:04:37.010
TestSerializers class and there's another thing that we

120
00:04:37.010 --> 00:04:38.010
have to do.

121
00:04:38.010 --> 00:04:41.080
We have to pass an instance of the Serializer

122
00:04:41.080 --> 00:04:43.000
to the object mapper.

123
00:04:43.000 --> 00:04:44.040
I'm right there on the mappers folder

124
00:04:44.040 --> 00:04:45.070
right now.

125
00:04:45.070 --> 00:04:48.050
I'm about to open ObjectMapper.

126
00:04:48.050 --> 00:04:49.080
Go down there,

127
00:04:49.080 --> 00:04:52.020
comment out the Adapter, we don't want the Adapter now,

128
00:04:52.020 --> 00:05:00.090
and instead we say "//property for Serializer".

129
00:05:00.090 --> 00:05:03.050
And what are we going to do? We are going to set that

130
00:05:03.050 --> 00:05:07.030
Serializer as a part of this API call so I can actually

131
00:05:07.030 --> 00:05:11.010
see conflict with Serializers and instantiate your

132
00:05:11.010 --> 00:05:12.080
PersonSerializer.

133
00:05:12.080 --> 00:05:14.040
That's all.

134
00:05:14.040 --> 00:05:15.080
Okay, once you do this,

135
00:05:15.080 --> 00:05:18.070
let's come back to the Test class, and now, what are we

136
00:05:18.070 --> 00:05:19.090
going to do?

137
00:05:19.090 --> 00:05:22.010
We are going to make sure that on line 27,

138
00:05:22.010 --> 00:05:24.070
where we were trying to get that empty jsonb instance,

139
00:05:24.070 --> 00:05:27.080
we get the conflict object to clear that instance.

140
00:05:27.080 --> 00:05:28.070
Right?

141
00:05:28.070 --> 00:05:30.050
So the same thing that we have been doing all over.

142
00:05:30.050 --> 00:05:33.020
ObjectMapper.getObjectMapper().

143
00:05:33.020 --> 00:05:34.030
And the moment you do this,

144
00:05:34.030 --> 00:05:36.010
there's one more thing that we have to do.

145
00:05:36.010 --> 00:05:38.000
When we say jsonb.toJson,

146
00:05:38.000 --> 00:05:40.090
this time we are not only going to pass the

147
00:05:40.090 --> 00:05:45.080
data, but we are also going to give the type.

148
00:05:45.080 --> 00:05:49.050
What kind of type it is when you're trying to serialize.

149
00:05:49.050 --> 00:05:53.050
So that will be on line 27. I'm just going to take it from

150
00:05:53.050 --> 00:05:55.070
the java.lang.reflect package.

151
00:05:55.070 --> 00:05:58.000
Take that type and then

152
00:05:58.000 --> 00:06:02.040
say the one that we've already written out on line 34.

153
00:06:02.040 --> 00:06:07.030
We just start to take this type.

154
00:06:07.030 --> 00:06:10.060
And just mention that type out here.

155
00:06:10.060 --> 00:06:12.040
That's all.

156
00:06:12.040 --> 00:06:13.020
I did three things.

157
00:06:13.020 --> 00:06:14.070
One is I took the conflict object.

158
00:06:14.070 --> 00:06:18.030
Second, in addition to the data, I pass the type to.

159
00:06:18.030 --> 00:06:21.020
And how do we mention the type for a generics list?

160
00:06:21.020 --> 00:06:23.000
That's how we do it.

161
00:06:23.000 --> 00:06:26.040
So this call toJson is now going to call

162
00:06:26.040 --> 00:06:30.080
our custom Serializer because that is what we are using

163
00:06:30.080 --> 00:06:32.040
in the jsonb object.

164
00:06:32.040 --> 00:06:34.030
And now let's see how the result

165
00:06:34.030 --> 00:06:35.010
comes out to be.

166
00:06:35.010 --> 00:06:37.070
I am going to comment the lines 34 and 35

167
00:06:37.070 --> 00:06:42.010
because they are going to give me that exception that we

168
00:06:42.010 --> 00:06:43.050
have already seen before.

169
00:06:43.050 --> 00:06:45.020
So let's just run this part

170
00:06:45.020 --> 00:06:48.010
of the call and check it out.

171
00:06:48.010 --> 00:06:49.080
Oh yeah, do you see what happened?

172
00:06:49.080 --> 00:06:51.010
It tells me that the

173
00:06:51.010 --> 00:06:54.080
result is com.app.beans.Professor, and then the data for the

174
00:06:54.080 --> 00:06:57.080
professor, and the second element in that jSon array is

175
00:06:57.080 --> 00:07:01.090
com.app.beans.SoftwareDeveloper and the information

176
00:07:01.090 --> 00:07:03.030
pertaining to that guy.

177
00:07:03.030 --> 00:07:04.030
Right?

178
00:07:04.030 --> 00:07:06.080
So this is how that serialization is going to happen now.

179
00:07:06.080 --> 00:07:10.070
Previously, we only got this information:

180
00:07:10.070 --> 00:07:11.070
the one that I'm highlighting.

181
00:07:11.070 --> 00:07:13.040
I never got the label.

182
00:07:13.040 --> 00:07:14.090
I never got this.

183
00:07:14.090 --> 00:07:17.060
But that's what we did using the Serializer.

184
00:07:17.060 --> 00:07:20.000
In the next video, we'll see how to Deserialize

185
00:07:20.000 --> 00:07:22.000
and write logic for it, and then see the output.

