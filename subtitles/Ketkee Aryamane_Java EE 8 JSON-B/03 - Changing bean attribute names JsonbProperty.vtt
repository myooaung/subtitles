WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] Let's look at the second option

2
00:00:01.070 --> 00:00:03.060
of customized mapping, which helps us

3
00:00:03.060 --> 00:00:06.000
to change the bean attribute names.

4
00:00:06.000 --> 00:00:08.080
Now, by default, we know that JSON Binding API

5
00:00:08.080 --> 00:00:11.030
is going to pick up the names of the instance variables

6
00:00:11.030 --> 00:00:14.080
as keys in the resulting JSON document.

7
00:00:14.080 --> 00:00:17.060
Let's come back to the IDE and let's say,

8
00:00:17.060 --> 00:00:20.080
open the customer class.

9
00:00:20.080 --> 00:00:23.090
So whenever JSON-B is going to serialize

10
00:00:23.090 --> 00:00:25.040
an object of this kind,

11
00:00:25.040 --> 00:00:27.000
then the keys in the JSON document will be

12
00:00:27.000 --> 00:00:30.080
customerid, customerName, emailAddress and isPrimeUser.

13
00:00:30.080 --> 00:00:32.000
However, there's an option with us

14
00:00:32.000 --> 00:00:34.000
to change this default behavior,

15
00:00:34.000 --> 00:00:38.080
and that is done using the @JSONbProperty annotation.

16
00:00:38.080 --> 00:00:41.000
You can apply this either on the field name

17
00:00:41.000 --> 00:00:43.060
or on the getter/setter, one of them.

18
00:00:43.060 --> 00:00:46.000
And let's see how it behaves in both the cases.

19
00:00:46.000 --> 00:00:48.040
Let's go back to the IDE.

20
00:00:48.040 --> 00:00:51.060
And let's say that these two fields is something

21
00:00:51.060 --> 00:00:53.060
that we want to change the names for.

22
00:00:53.060 --> 00:00:59.080
So, I'm going to go on line 14 and say JSONbProperty.

23
00:00:59.080 --> 00:01:03.070
And, I'm going to set the value of this to just id.

24
00:01:03.070 --> 00:01:05.080
I don't want CustomerId coming out in the JSON document,

25
00:01:05.080 --> 00:01:07.010
I just want id.

26
00:01:07.010 --> 00:01:13.030
Similarly, I'll customize the other property too.

27
00:01:13.030 --> 00:01:16.020
Let's say this is name.

28
00:01:16.020 --> 00:01:19.050
Then let's write a test class, quickly.

29
00:01:19.050 --> 00:01:24.010
Say "TestCustomNames."

30
00:01:24.010 --> 00:01:27.060
Let's grab the main meter.

31
00:01:27.060 --> 00:01:31.010
Let's grab the JSON-B default engine instance.

32
00:01:31.010 --> 00:01:42.020
That will be JSON-B = JSONbBuilder.create.

33
00:01:42.020 --> 00:01:45.080
Once that's done, we have to make one thing

34
00:01:45.080 --> 00:01:47.070
that's the customer data.

35
00:01:47.070 --> 00:01:49.060
So, I'm going to go to the data generator class,

36
00:01:49.060 --> 00:01:54.090
get all of that customer mock data line on line number 40,

37
00:01:54.090 --> 00:01:58.040
come back to test class and copy that on line number 20.

38
00:01:58.040 --> 00:02:01.030
The mock data is ready with me.

39
00:02:01.030 --> 00:02:02.080
Now, what I'll do is, I'll quickly employ

40
00:02:02.080 --> 00:02:04.090
the try with resources statement

41
00:02:04.090 --> 00:02:07.030
to write this customer object to a file,

42
00:02:07.030 --> 00:02:11.000
and then, the reader object will read it back.

43
00:02:11.000 --> 00:02:12.020
We've already written that code,

44
00:02:12.020 --> 00:02:13.080
so what I'm going to do is, I'm just going to go

45
00:02:13.080 --> 00:02:19.000
to the test data types, get in that code,

46
00:02:19.000 --> 00:02:20.040
which is this.

47
00:02:20.040 --> 00:02:24.080
I'm trying to write the file from line number 30 to 35.

48
00:02:24.080 --> 00:02:29.000
Then I'm also trying to read, which is line number 37 to 42.

49
00:02:29.000 --> 00:02:32.040
So take this entire code, copy, come back here,

50
00:02:32.040 --> 00:02:39.050
and paste it from line number 23.

51
00:02:39.050 --> 00:02:41.010
Now, what you have to do here is,

52
00:02:41.010 --> 00:02:44.010
we have to change the name of the file firstly,

53
00:02:44.010 --> 00:02:45.080
which is customer.txt.

54
00:02:45.080 --> 00:02:48.080
The object that we want to write on line number 33

55
00:02:48.080 --> 00:02:51.070
is the customer object, not the order object.

56
00:02:51.070 --> 00:02:53.080
Similarly, when you're trying to do the reading

57
00:02:53.080 --> 00:02:55.080
operation on line number 39, we just want

58
00:02:55.080 --> 00:02:57.070
to make sure the file name is correct,

59
00:02:57.070 --> 00:02:58.080
that's what we want to read,

60
00:02:58.080 --> 00:03:03.070
and the type is correct too, which is Customer.class.

61
00:03:03.070 --> 00:03:12.030
And, of course, the reference will also change.

62
00:03:12.030 --> 00:03:14.030
So, let's copy that and put it in the Sys out

63
00:03:14.030 --> 00:03:17.050
input that we have.

64
00:03:17.050 --> 00:03:18.080
Let's make sure everything's right.

65
00:03:18.080 --> 00:03:21.030
We're writing to a customer.txt,

66
00:03:21.030 --> 00:03:24.060
and we're writing the java object to that file.

67
00:03:24.060 --> 00:03:26.030
So it will get serialized.

68
00:03:26.030 --> 00:03:28.050
And on this iteration, we're trying to read it

69
00:03:28.050 --> 00:03:31.030
from the file and convert it to a customer object

70
00:03:31.030 --> 00:03:35.040
and then printing that out on the console.

71
00:03:35.040 --> 00:03:39.090
Let's go ahead and run this file.

72
00:03:39.090 --> 00:03:44.000
Alright, let's see what happened on JSON-B Sample.

73
00:03:44.000 --> 00:03:46.060
Yes, there's a customer file that got generated.

74
00:03:46.060 --> 00:03:50.000
If you see, the names now

75
00:03:50.000 --> 00:03:52.000
that have been picked up for the customization.

76
00:03:52.000 --> 00:03:54.040
Id, and the name.

77
00:03:54.040 --> 00:03:56.070
If you come back to the deserialized code,

78
00:03:56.070 --> 00:03:58.060
this is what happens.

79
00:03:58.060 --> 00:04:00.070
Yes, so it's all working fine.

80
00:04:00.070 --> 00:04:04.030
When it's serialized, it prefers the keys as id and name.

81
00:04:04.030 --> 00:04:07.020
And when it was deserializing, it got the correct

82
00:04:07.020 --> 00:04:09.030
keys, id and name, in the JSON document,

83
00:04:09.030 --> 00:04:10.090
and it deserialized them to the correct

84
00:04:10.090 --> 00:04:12.060
and appropriate properties.

85
00:04:12.060 --> 00:04:13.070
Simple.

86
00:04:13.070 --> 00:04:17.060
Now, we've applied this JSON-B property annotation

87
00:04:17.060 --> 00:04:18.080
on the field name.

88
00:04:18.080 --> 00:04:22.060
But, it can also be employed on the getters or setters.

89
00:04:22.060 --> 00:04:25.020
Now I'm going to come on line number 19,

90
00:04:25.020 --> 00:04:30.060
cut this out, and go to the getCustomerName meter,

91
00:04:30.060 --> 00:04:33.070
here, and paste that annotation.

92
00:04:33.070 --> 00:04:35.070
What this means is that if I'm trying to put

93
00:04:35.070 --> 00:04:38.080
the JSON-B annotation on the getter meter,

94
00:04:38.080 --> 00:04:47.040
then it will prefer this key on serialization.

95
00:04:47.040 --> 00:04:49.010
We have already talked about this before,

96
00:04:49.010 --> 00:04:50.080
that when it does serialization,

97
00:04:50.080 --> 00:04:52.070
it will call the getter meter.

98
00:04:52.070 --> 00:04:54.020
And when it does deserialization,

99
00:04:54.020 --> 00:04:56.000
it will call the setter meter.

100
00:04:56.000 --> 00:04:58.060
Now, on this turn, let's test this out,

101
00:04:58.060 --> 00:05:01.000
and then we learn to send the output.

102
00:05:01.000 --> 00:05:04.050
Let me run this again.

103
00:05:04.050 --> 00:05:05.090
I'm reloading the file.

104
00:05:05.090 --> 00:05:08.000
What happened during serialization is, yes,

105
00:05:08.000 --> 00:05:09.020
the id is still the same,

106
00:05:09.020 --> 00:05:11.070
and what we did is, we preferred the key name

107
00:05:11.070 --> 00:05:13.010
during serialization.

108
00:05:13.010 --> 00:05:15.060
However, if you look at the deserialized output,

109
00:05:15.060 --> 00:05:18.070
you see that you get the customerName as null.

110
00:05:18.070 --> 00:05:20.010
Yes, this is what is going to happen.

111
00:05:20.010 --> 00:05:22.080
It means that during deserialization,

112
00:05:22.080 --> 00:05:26.030
it does not consider that preferred name key.

113
00:05:26.030 --> 00:05:27.060
That is what the difference is.

114
00:05:27.060 --> 00:05:31.090
It'll consider it only during serialization.

115
00:05:31.090 --> 00:05:34.070
So, now, when it tried to deserialize, yes,

116
00:05:34.070 --> 00:05:37.030
in the JSON document, it did find the key name,

117
00:05:37.030 --> 00:05:39.040
but it didn't know that it has to be mapped

118
00:05:39.040 --> 00:05:43.090
to the customerName attribute of this java bean.

119
00:05:43.090 --> 00:05:45.090
That information was not known,

120
00:05:45.090 --> 00:05:47.030
and that's why the customer name has turned out

121
00:05:47.030 --> 00:05:49.010
to be null.

122
00:05:49.010 --> 00:05:52.040
Similarly, you can also apply this on the setter meter,

123
00:05:52.040 --> 00:05:53.040
so let's cut this out and I'll put it

124
00:05:53.040 --> 00:05:57.050
on the setter meter.

125
00:05:57.050 --> 00:06:01.090
So, now, it means that it will prefer this key

126
00:06:01.090 --> 00:06:04.090
on deserialization.

127
00:06:04.090 --> 00:06:08.020
Which means it expects that a key name

128
00:06:08.020 --> 00:06:10.070
is present in the JSON document

129
00:06:10.070 --> 00:06:14.080
so that it can be mapped to the customerName property.

130
00:06:14.080 --> 00:06:17.010
This is the expectation.

131
00:06:17.010 --> 00:06:22.060
Now let's test this out and see what it does.

132
00:06:22.060 --> 00:06:24.020
The file must have been written there,

133
00:06:24.020 --> 00:06:26.050
so I'm reloading it.

134
00:06:26.050 --> 00:06:29.000
Now, during serialization, it just got hold

135
00:06:29.000 --> 00:06:31.020
of the customerName property by default

136
00:06:31.020 --> 00:06:34.010
because nothing was mentioned on the serialization process.

137
00:06:34.010 --> 00:06:37.020
But when it is deserialized, look what happened.

138
00:06:37.020 --> 00:06:39.040
The customer name turned out to be null.

139
00:06:39.040 --> 00:06:43.010
That is because when it tried to deserialize

140
00:06:43.010 --> 00:06:44.080
it expected this key.

141
00:06:44.080 --> 00:06:48.090
However, the file has customerName, right?

142
00:06:48.090 --> 00:06:50.070
So this is what will happen if you try

143
00:06:50.070 --> 00:06:53.000
to specify the properties separately

144
00:06:53.000 --> 00:06:54.050
on the getter or the setter.

145
00:06:54.050 --> 00:06:56.050
So it's always better that you actually try

146
00:06:56.050 --> 00:06:58.050
to specify it on the field level itself

147
00:06:58.050 --> 00:07:01.040
so that the same key, as per your preference,

148
00:07:01.040 --> 00:07:04.090
is going to be considered during both serialization

149
00:07:04.090 --> 00:07:07.000
as well as deserialization.

