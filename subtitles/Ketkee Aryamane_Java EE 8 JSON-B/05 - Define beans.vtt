WEBVTT
1
00:00:00.000 --> 00:00:01.040
- [Instructor] Now that we've looked at

2
00:00:01.040 --> 00:00:05.040
the simple, single-bean mapping in JSON binding,

3
00:00:05.040 --> 00:00:08.010
let's take a look at a little complicated case

4
00:00:08.010 --> 00:00:09.070
where we're trying to have a lot of

5
00:00:09.070 --> 00:00:12.080
objects created the way we do it in our live projects.

6
00:00:12.080 --> 00:00:15.060
Let's say I'm trying to take an order from

7
00:00:15.060 --> 00:00:17.080
Amazon or eBay and trying to represent it

8
00:00:17.080 --> 00:00:19.090
in the form of an object in Java.

9
00:00:19.090 --> 00:00:21.050
I will have an order object.

10
00:00:21.050 --> 00:00:23.020
Every order is for a customer,

11
00:00:23.020 --> 00:00:25.030
so customer is another object.

12
00:00:25.030 --> 00:00:28.020
Then every order, we have order details,

13
00:00:28.020 --> 00:00:31.010
so order details could be shipping address to

14
00:00:31.010 --> 00:00:32.090
where that order has to be shipped to,

15
00:00:32.090 --> 00:00:34.090
or it could have the products that

16
00:00:34.090 --> 00:00:37.000
the order comprises of and the amount

17
00:00:37.000 --> 00:00:38.040
and all of those details.

18
00:00:38.040 --> 00:00:41.070
We're going to create this entire object's set

19
00:00:41.070 --> 00:00:44.000
within our project and then we'll see how to use

20
00:00:44.000 --> 00:00:47.080
JSON binding for JSON serialization and de-serialization.

21
00:00:47.080 --> 00:00:50.060
Let's start off by defining the fields first.

22
00:00:50.060 --> 00:00:52.060
The first step is to create all the beans

23
00:00:52.060 --> 00:00:54.040
as per the about icon that we saw.

24
00:00:54.040 --> 00:00:58.040
Let's go back to the IDE.

25
00:00:58.040 --> 00:01:00.070
Let's go to the beans folder and first create

26
00:01:00.070 --> 00:01:03.000
a class called Order.

27
00:01:03.000 --> 00:01:04.070
Let's create the skeleton of all the classes

28
00:01:04.070 --> 00:01:05.060
that are in (mumbles)

29
00:01:05.060 --> 00:01:08.030
and then we'll give it the fields.

30
00:01:08.030 --> 00:01:13.070
Next is OrderDetails.

31
00:01:13.070 --> 00:01:17.090
OrderDetails of course will have the product

32
00:01:17.090 --> 00:01:22.090
and it will have an address.

33
00:01:22.090 --> 00:01:24.080
All of this order things and order business

34
00:01:24.080 --> 00:01:26.040
that we're doing is for a customer,

35
00:01:26.040 --> 00:01:32.010
so we need the customer class.

36
00:01:32.010 --> 00:01:36.040
Let's first go ahead and define the address fields.

37
00:01:36.040 --> 00:01:42.000
That will be private String street,

38
00:01:42.000 --> 00:01:46.090
private String city,

39
00:01:46.090 --> 00:01:57.070
private String country, and private int zipcode.

40
00:01:57.070 --> 00:02:01.070
I missed the semicolon here and I have misspelled

41
00:02:01.070 --> 00:02:05.080
the private keyword; let's correct that.

42
00:02:05.080 --> 00:02:08.020
On line number 19, I'm going to do a couple of steps.

43
00:02:08.020 --> 00:02:12.020
One is I'm going to insert the code for getter setters.

44
00:02:12.020 --> 00:02:13.060
Great.

45
00:02:13.060 --> 00:02:16.000
The next big step, I'm going to make constructors

46
00:02:16.000 --> 00:02:18.000
so that whenever we create data for these beans,

47
00:02:18.000 --> 00:02:19.030
it will be easier to do it via

48
00:02:19.030 --> 00:02:21.010
the param address constructors

49
00:02:21.010 --> 00:02:23.020
rather than the default ones.

50
00:02:23.020 --> 00:02:24.080
On line number 19, I'm generating

51
00:02:24.080 --> 00:02:27.090
a param address constructor; that's the one.

52
00:02:27.090 --> 00:02:28.080
Great.

53
00:02:28.080 --> 00:02:29.090
NetBeans generates them for you.

54
00:02:29.090 --> 00:02:31.060
You don't have to code it.

55
00:02:31.060 --> 00:02:33.050
Do not forget the default rule.

56
00:02:33.050 --> 00:02:35.080
We need the default constructor also

57
00:02:35.080 --> 00:02:38.040
because JSON binding API will take that

58
00:02:38.040 --> 00:02:40.070
into account during de-serialization.

59
00:02:40.070 --> 00:02:41.070
Let's not forget that rule.

60
00:02:41.070 --> 00:02:46.010
I'm going to also generate the default constructor.

61
00:02:46.010 --> 00:02:48.060
So we add ID with the address bean; good.

62
00:02:48.060 --> 00:02:50.040
Let's go ahead and define the properties

63
00:02:50.040 --> 00:02:52.000
for the product bean.

64
00:02:52.000 --> 00:02:56.080
This will have private int id,

65
00:02:56.080 --> 00:03:01.020
private String name, yes,

66
00:03:01.020 --> 00:03:05.070
and it will also have the manufacturer,

67
00:03:05.070 --> 00:03:07.080
the one who manufactured the product.

68
00:03:07.080 --> 00:03:12.020
It may also have the one who is shipping the product.

69
00:03:12.020 --> 00:03:17.030
Shipping, and then you also could have under product

70
00:03:17.030 --> 00:03:19.040
the price of course.

71
00:03:19.040 --> 00:03:22.040
That will be a double variable.

72
00:03:22.040 --> 00:03:26.090
Let's say price.

73
00:03:26.090 --> 00:03:28.070
Let's call this shippingCompany.

74
00:03:28.070 --> 00:03:33.040
That would be a little better.

75
00:03:33.040 --> 00:03:34.060
This is good enough.

76
00:03:34.060 --> 00:03:36.090
Now let's go ahead and right-click on

77
00:03:36.090 --> 00:03:42.060
line number 20 and insert the code for getter setters.

78
00:03:42.060 --> 00:03:43.050
That's nice.

79
00:03:43.050 --> 00:03:47.030
And then of course the usual business, the constructors.

80
00:03:47.030 --> 00:03:49.060
On line number 20, I'm going to say product

81
00:03:49.060 --> 00:03:51.090
and generate a param address constructor.

82
00:03:51.090 --> 00:03:53.080
And on line number 28,

83
00:03:53.080 --> 00:03:57.030
I'm going to generate the default constructor.

84
00:03:57.030 --> 00:03:59.000
There's one more thing that we should do,

85
00:03:59.000 --> 00:04:01.010
is we should generate the toString method

86
00:04:01.010 --> 00:04:03.020
because when we have the de-serialization process

87
00:04:03.020 --> 00:04:06.040
coming in, we want to see the values of the fields

88
00:04:06.040 --> 00:04:08.000
rather than looking at the texture

89
00:04:08.000 --> 00:04:09.020
representation of the object.

90
00:04:09.020 --> 00:04:10.090
So let's do that also.

91
00:04:10.090 --> 00:04:12.060
On line 73, I'm going to generate

92
00:04:12.060 --> 00:04:15.090
the toString method for all the fields.

93
00:04:15.090 --> 00:04:16.090
There we go.

94
00:04:16.090 --> 00:04:18.090
Let's do that for the address field as well.

95
00:04:18.090 --> 00:04:21.030
Let's go down; right down on line 64,

96
00:04:21.030 --> 00:04:25.020
let's say, right-click, Insert Code, toString.

97
00:04:25.020 --> 00:04:27.080
Say Generate.

98
00:04:27.080 --> 00:04:30.090
Next let's define the customer fields.

99
00:04:30.090 --> 00:04:35.090
I'm gonna say private int customerId,

100
00:04:35.090 --> 00:04:40.010
private String customerName,

101
00:04:40.010 --> 00:04:48.020
private String emailAddress.

102
00:04:48.020 --> 00:04:53.000
Then what else can a customer have?

103
00:04:53.000 --> 00:04:54.070
Let's say if it is Amazon,

104
00:04:54.070 --> 00:04:57.090
generally Amazon has a facility for Prime user.

105
00:04:57.090 --> 00:05:00.010
So let's have a boolean value,

106
00:05:00.010 --> 00:05:04.020
which will have private boolean isPrimeUser

107
00:05:04.020 --> 00:05:07.010
who is able to access those videos on Amazon Prime,

108
00:05:07.010 --> 00:05:08.080
for whom the shipping is free.

109
00:05:08.080 --> 00:05:10.080
So that's the Prime user.

110
00:05:10.080 --> 00:05:13.000
And the same three steps;

111
00:05:13.000 --> 00:05:17.090
right-click, Insert Code, generate getter setters.

112
00:05:17.090 --> 00:05:21.080
Then we need the constructors, so line number 20,

113
00:05:21.080 --> 00:05:24.000
I'll have the param address constructor,

114
00:05:24.000 --> 00:05:29.050
and on line 27, the default constructor.

115
00:05:29.050 --> 00:05:32.040
Let's go right down, line number 63,

116
00:05:32.040 --> 00:05:37.090
the toString method.

117
00:05:37.090 --> 00:05:39.080
The first three basic classes are ready.

118
00:05:39.080 --> 00:05:43.000
Now let's go to OrderDetails, and what will this have?

119
00:05:43.000 --> 00:05:45.020
One order can have multiple products, correct?

120
00:05:45.020 --> 00:05:51.090
So we want to say private list of products this time

121
00:05:51.090 --> 00:05:56.020
with the generics index.

122
00:05:56.020 --> 00:05:58.040
Products; what else?

123
00:05:58.040 --> 00:06:00.030
It should definitely contain the shipping address,

124
00:06:00.030 --> 00:06:01.080
so I'm going to take the reference of

125
00:06:01.080 --> 00:06:06.000
the shipping address also, the address.

126
00:06:06.000 --> 00:06:07.080
Let's label this property as shippingAddress

127
00:06:07.080 --> 00:06:11.080
so it makes us clear about what that property's doing.

128
00:06:11.080 --> 00:06:14.070
Of course it will have the total amount for that order,

129
00:06:14.070 --> 00:06:22.010
so let's call a double again and totalAmount.

130
00:06:22.010 --> 00:06:23.080
Next again, the same thing.

131
00:06:23.080 --> 00:06:26.030
Insert the getter setters

132
00:06:26.030 --> 00:06:34.070
and then insert the constructors.

133
00:06:34.070 --> 00:06:41.050
Go down, line 55, insert the toString.

134
00:06:41.050 --> 00:06:43.070
So now let's finally go to the order

135
00:06:43.070 --> 00:06:45.060
and make sure that we have a reference to

136
00:06:45.060 --> 00:06:47.080
all the other objects that we created.

137
00:06:47.080 --> 00:06:49.090
So yes, it will definitely have

138
00:06:49.090 --> 00:06:55.030
the OrderDetails reference.

139
00:06:55.030 --> 00:07:00.090
In addition to that, it will have an order ID

140
00:07:00.090 --> 00:07:06.080
and it will have the order date and the delivery date.

141
00:07:06.080 --> 00:07:10.020
I'm going to use java.time API in order to get

142
00:07:10.020 --> 00:07:12.020
the data types for the dates.

143
00:07:12.020 --> 00:07:13.080
I don't wanna use java.util.Date,

144
00:07:13.080 --> 00:07:17.080
let's use java.time; so I'm gonna say LocalDate.

145
00:07:17.080 --> 00:07:20.000
It's coming from the java.time package.

146
00:07:20.000 --> 00:07:21.040
Let's say this is orderDate.

147
00:07:21.040 --> 00:07:24.000
And similarly another field on the next line,

148
00:07:24.000 --> 00:07:26.050
which is again a LocalDate,

149
00:07:26.050 --> 00:07:31.070
and let's say delivery date.

150
00:07:31.070 --> 00:07:34.030
We have the order details of course.

151
00:07:34.030 --> 00:07:36.060
And of course we have this order for a customer,

152
00:07:36.060 --> 00:07:38.060
so I'm going to say private

153
00:07:38.060 --> 00:07:43.030
and take the reference of the customer.

154
00:07:43.030 --> 00:07:45.050
And then the next few steps are

155
00:07:45.050 --> 00:07:47.070
exactly the same that you did for the other beans,

156
00:07:47.070 --> 00:07:51.080
so insert the code for getter setters

157
00:07:51.080 --> 00:08:00.020
and then on line 22, the constructors.

158
00:08:00.020 --> 00:08:03.060
And then at the end, toString.

159
00:08:03.060 --> 00:08:05.050
So a basic Java (mumbles) that we're

160
00:08:05.050 --> 00:08:09.040
trying to have in our beans.

161
00:08:09.040 --> 00:08:11.090
The entire structure has been created now.

162
00:08:11.090 --> 00:08:14.060
Now we create data for this.

163
00:08:14.060 --> 00:08:16.000
That's the next step.

164
00:08:16.000 --> 00:08:17.050
You're to create instances of all beans.

165
00:08:17.050 --> 00:08:19.020
We'll have data inside those beans

166
00:08:19.020 --> 00:08:22.000
and we link all of them together.

167
00:08:22.000 --> 00:08:24.000
We have to do that; we'll do that in the next video.

