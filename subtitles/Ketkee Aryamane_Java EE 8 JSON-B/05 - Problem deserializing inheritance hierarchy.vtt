WEBVTT
1
00:00:00.050 --> 00:00:02.040
- [Instructor] Now let us understand what we are going to do

2
00:00:02.040 --> 00:00:05.010
as a part of the custom serializers and deserializers

3
00:00:05.010 --> 00:00:07.020
demonstration that we have.

4
00:00:07.020 --> 00:00:08.030
Let's understand this thing.

5
00:00:08.030 --> 00:00:10.040
So far, whenever we had a network of objects

6
00:00:10.040 --> 00:00:12.090
we had the order, order details

7
00:00:12.090 --> 00:00:14.020
address, customer, and product.

8
00:00:14.020 --> 00:00:18.020
All of them tied together as references in each other.

9
00:00:18.020 --> 00:00:19.000
Okay?

10
00:00:19.000 --> 00:00:20.010
Now what we want to do is

11
00:00:20.010 --> 00:00:22.030
we're going to create an inheritance hierarchy.

12
00:00:22.030 --> 00:00:25.060
So the use case here is that there is a professor

13
00:00:25.060 --> 00:00:28.000
and there's a software developer, okay?

14
00:00:28.000 --> 00:00:31.060
Both of them want to meet for a conference.

15
00:00:31.060 --> 00:00:34.010
So I am going to create an inheritance hierarchy.

16
00:00:34.010 --> 00:00:38.040
The abstract class at the top will be a person class, okay?

17
00:00:38.040 --> 00:00:40.040
And down there I'll have two other classes.

18
00:00:40.040 --> 00:00:42.090
So I will have the software developer

19
00:00:42.090 --> 00:00:44.030
and I'll have the professor.

20
00:00:44.030 --> 00:00:45.090
So let's create that hierarchy first

21
00:00:45.090 --> 00:00:47.020
and then we'll talk about it.

22
00:00:47.020 --> 00:00:50.020
So I'm going to create a class called person

23
00:00:50.020 --> 00:00:53.070
and I'm going to keep this as an abstract class, all right?

24
00:00:53.070 --> 00:00:57.020
And let's come inside and define and few fields for it.

25
00:00:57.020 --> 00:00:59.020
So I'll say private string name

26
00:00:59.020 --> 00:01:01.020
and private

27
00:01:01.020 --> 00:01:02.050
string

28
00:01:02.050 --> 00:01:06.020
email.

29
00:01:06.020 --> 00:01:07.010
Okay.

30
00:01:07.010 --> 00:01:09.020
And what I'm also going to do is

31
00:01:09.020 --> 00:01:10.070
let's generate the getter setters.

32
00:01:10.070 --> 00:01:13.030
So on line 17, right-click, insert code

33
00:01:13.030 --> 00:01:14.080
generate getter setter.

34
00:01:14.080 --> 00:01:15.080
That's one.

35
00:01:15.080 --> 00:01:17.030
Then also generate the constructors.

36
00:01:17.030 --> 00:01:19.080
So line 17,

37
00:01:19.080 --> 00:01:20.080
person.

38
00:01:20.080 --> 00:01:22.070
Okay, we do not need really the two-string method

39
00:01:22.070 --> 00:01:24.050
for this version because it's the abstract class

40
00:01:24.050 --> 00:01:25.080
so we are good with this.

41
00:01:25.080 --> 00:01:29.060
All right, let's create another class which is called

42
00:01:29.060 --> 00:01:31.090
professor, so person is a professor

43
00:01:31.090 --> 00:01:34.020
so that will be the inheritance hierarchy

44
00:01:34.020 --> 00:01:35.030
that we are trying to implement.

45
00:01:35.030 --> 00:01:39.040
So I'll say extends and extends person.

46
00:01:39.040 --> 00:01:40.020
Okay.

47
00:01:40.020 --> 00:01:43.080
And what are the fields that the professor class can have?

48
00:01:43.080 --> 00:01:45.050
Let's understand that.

49
00:01:45.050 --> 00:01:47.040
You can have

50
00:01:47.040 --> 00:01:49.080
private

51
00:01:49.080 --> 00:01:51.060
string

52
00:01:51.060 --> 00:01:54.050
degree, the degree that this professor has, let's say.

53
00:01:54.050 --> 00:01:57.040
And private string specialized course

54
00:01:57.040 --> 00:02:01.020
that the professor has

55
00:02:01.020 --> 00:02:02.000
attained.

56
00:02:02.000 --> 00:02:03.080
Specialization in some course that he may have attained,

57
00:02:03.080 --> 00:02:05.040
that is what is the next field.

58
00:02:05.040 --> 00:02:06.020
Okay.

59
00:02:06.020 --> 00:02:13.020
And then say right-click, insert code getter setter.

60
00:02:13.020 --> 00:02:16.080
And let's also go ahead and generate the constructors.

61
00:02:16.080 --> 00:02:18.090
So there's a compilation error that you see on this line

62
00:02:18.090 --> 00:02:20.090
that is because we have generated

63
00:02:20.090 --> 00:02:24.020
a bad image rise constructor in the person class.

64
00:02:24.020 --> 00:02:27.000
Okay, so likewise we'll also generate

65
00:02:27.000 --> 00:02:30.000
a bad image rise constructor in the professor class.

66
00:02:30.000 --> 00:02:32.000
But, do not forget the golden rule.

67
00:02:32.000 --> 00:02:33.060
When it comes to JSON binding,

68
00:02:33.060 --> 00:02:35.090
you need the default constructor, don't you?

69
00:02:35.090 --> 00:02:39.010
So let's go ahead and generate that, too.

70
00:02:39.010 --> 00:02:42.050
And we will do that for both.

71
00:02:42.050 --> 00:02:45.010
So you don't need this, really.

72
00:02:45.010 --> 00:02:47.060
But remember the golden rule for JSON binding API,

73
00:02:47.060 --> 00:02:49.070
you need the default constructor as well.

74
00:02:49.070 --> 00:02:52.030
So let's go ahead in the person class,

75
00:02:52.030 --> 00:02:56.070
let's generate it there first on line 21.

76
00:02:56.070 --> 00:02:58.070
Okay, it's come back and generated

77
00:02:58.070 --> 00:03:02.050
for the professor bean on line 20.

78
00:03:02.050 --> 00:03:05.000
Okay.

79
00:03:05.000 --> 00:03:06.040
So, there we are.

80
00:03:06.040 --> 00:03:11.050
Now we'll create the other bean that we want.

81
00:03:11.050 --> 00:03:15.030
The software developer.

82
00:03:15.030 --> 00:03:16.020
Okay.

83
00:03:16.020 --> 00:03:21.040
And this also is going to extend the person class.

84
00:03:21.040 --> 00:03:23.000
And I'm going to say private

85
00:03:23.000 --> 00:03:26.060
string let's say designation.

86
00:03:26.060 --> 00:03:28.060
What is the exact designation of the software developer

87
00:03:28.060 --> 00:03:32.090
because he may be a technical lead, he may be a team lead,

88
00:03:32.090 --> 00:03:34.060
he may be an architect, it depends,

89
00:03:34.060 --> 00:03:36.040
because all of these people are software developers.

90
00:03:36.040 --> 00:03:38.050
So let's understand what their designation is.

91
00:03:38.050 --> 00:03:41.040
And another thing is, let's also understand

92
00:03:41.040 --> 00:03:43.040
the company for which he works,

93
00:03:43.040 --> 00:03:45.090
so the company works for.

94
00:03:45.090 --> 00:03:46.070
All right.

95
00:03:46.070 --> 00:03:49.020
And then also the usual routine,

96
00:03:49.020 --> 00:03:53.080
insert code for getter setters

97
00:03:53.080 --> 00:03:58.000
and then the constructors right away coming up on line 17.

98
00:03:58.000 --> 00:03:59.090
So we'll say

99
00:03:59.090 --> 00:04:02.070
software developer this one and then

100
00:04:02.070 --> 00:04:06.000
the default constructor as well.

101
00:04:06.000 --> 00:04:06.080
Okay.

102
00:04:06.080 --> 00:04:08.050
Let's come at the end and also generate

103
00:04:08.050 --> 00:04:10.040
the two string presentation,

104
00:04:10.040 --> 00:04:12.040
the method that we have to override.

105
00:04:12.040 --> 00:04:15.020
Let's also go to professor, at the end

106
00:04:15.020 --> 00:04:18.080
and on line 44, right-click, insert code

107
00:04:18.080 --> 00:04:21.000
generate the two string.

108
00:04:21.000 --> 00:04:22.030
Okay.

109
00:04:22.030 --> 00:04:24.070
So the tests folder is the one where we are trying

110
00:04:24.070 --> 00:04:26.030
to create the test serializers class

111
00:04:26.030 --> 00:04:28.050
because we want to test out the default behavior

112
00:04:28.050 --> 00:04:30.050
for this inheritance hierarchy

113
00:04:30.050 --> 00:04:32.070
that JSON binding provides for us.

114
00:04:32.070 --> 00:04:35.040
So now let's grab the main method.

115
00:04:35.040 --> 00:04:38.030
Okay, and now we're going to create a list

116
00:04:38.030 --> 00:04:40.090
of the person objects, okay?

117
00:04:40.090 --> 00:04:45.000
So list of, and I'm going to specify generics syntax.

118
00:04:45.000 --> 00:04:46.000
That's how it goes.

119
00:04:46.000 --> 00:04:52.060
And let's say people equal to new array list

120
00:04:52.060 --> 00:04:55.000
person again.

121
00:04:55.000 --> 00:04:58.040
Okay, and now to this I'll add two people.

122
00:04:58.040 --> 00:05:00.070
People dot add

123
00:05:00.070 --> 00:05:05.020
new, one will be professor

124
00:05:05.020 --> 00:05:07.010
okay, we have to make sure

125
00:05:07.010 --> 00:05:09.060
that we instantiate the guy, okay?

126
00:05:09.060 --> 00:05:12.040
They generally have a PhD degree, okay.

127
00:05:12.040 --> 00:05:16.000
Specialize for, let's say this professor has been

128
00:05:16.000 --> 00:05:18.060
specializing in digital computing.

129
00:05:18.060 --> 00:05:19.080
Okay.

130
00:05:19.080 --> 00:05:21.040
What name could we give?

131
00:05:21.040 --> 00:05:23.090
Let's say Ross Geller.

132
00:05:23.090 --> 00:05:25.050
He was a professor, right?

133
00:05:25.050 --> 00:05:27.020
And then say Ross

134
00:05:27.020 --> 00:05:29.000
at gmail

135
00:05:29.000 --> 00:05:30.010
dot com.

136
00:05:30.010 --> 00:05:32.050
Okay, so this is one person that I've added to the list.

137
00:05:32.050 --> 00:05:35.070
Let's add the second person.

138
00:05:35.070 --> 00:05:38.010
There will be no surprises when I add Chandler Bing's name

139
00:05:38.010 --> 00:05:39.060
to this, so, new software developer

140
00:05:39.060 --> 00:05:42.020
I'm going to name him Chandler Bing.

141
00:05:42.020 --> 00:05:45.000
His designation is used to do data analysis

142
00:05:45.000 --> 00:05:47.060
and statistical analysis and reconfiguration.

143
00:05:47.060 --> 00:05:50.090
Okay, we'll call him data analyst.

144
00:05:50.090 --> 00:05:53.020
Let's say he works for, I don't remember

145
00:05:53.020 --> 00:05:56.070
what he used to work for, so let's say ABC Corporation.

146
00:05:56.070 --> 00:05:59.010
And

147
00:05:59.010 --> 00:06:01.090
let's give his name

148
00:06:01.090 --> 00:06:03.080
Chandler Bing

149
00:06:03.080 --> 00:06:05.030
it's obvious, right, that when Ross wants

150
00:06:05.030 --> 00:06:08.040
to come to a conference, Chandler will accompany him.

151
00:06:08.040 --> 00:06:11.010
Chandler at

152
00:06:11.010 --> 00:06:14.060
okay, all right, so we have two people added.

153
00:06:14.060 --> 00:06:16.020
What now we want to do is

154
00:06:16.020 --> 00:06:18.090
let's go to the end, come right on line 25,

155
00:06:18.090 --> 00:06:22.070
create an empty JSON-B instance,

156
00:06:22.070 --> 00:06:23.050
okay?

157
00:06:23.050 --> 00:06:26.030
Using the JSON

158
00:06:26.030 --> 00:06:27.010
B builder

159
00:06:27.010 --> 00:06:30.080
API dot create call.

160
00:06:30.080 --> 00:06:31.070
Okay.

161
00:06:31.070 --> 00:06:33.010
And what do we do next?

162
00:06:33.010 --> 00:06:36.010
We are going to serialize this list.

163
00:06:36.010 --> 00:06:36.090
That's the intent.

164
00:06:36.090 --> 00:06:39.090
And if you want to see what is the default behavior

165
00:06:39.090 --> 00:06:42.000
when you try to serialize this kind of list.

166
00:06:42.000 --> 00:06:45.010
You have a list which completely has two different objects.

167
00:06:45.010 --> 00:06:47.080
But they are a part of the same inheritance hierarchy.

168
00:06:47.080 --> 00:06:49.030
So how does JSON-B handle this?

169
00:06:49.030 --> 00:06:50.060
That's what we are trying to see.

170
00:06:50.060 --> 00:06:54.000
Okay, so let's go ahead and say

171
00:06:54.000 --> 00:06:56.000
sys out

172
00:06:56.000 --> 00:06:57.010
all right, okay.

173
00:06:57.010 --> 00:06:57.090
And

174
00:06:57.090 --> 00:06:59.010
JSON-B

175
00:06:59.010 --> 00:07:01.020
talk to JSON

176
00:07:01.020 --> 00:07:02.070
and

177
00:07:02.070 --> 00:07:04.070
there's only one parameter that we have to pass

178
00:07:04.070 --> 00:07:07.010
which is people.

179
00:07:07.010 --> 00:07:08.040
Okay.

180
00:07:08.040 --> 00:07:13.010
Let's try to run this and see what happens.

181
00:07:13.010 --> 00:07:14.090
Yeah, do you see what happened?

182
00:07:14.090 --> 00:07:17.040
So I'm going to quickly take this into JSONLint,

183
00:07:17.040 --> 00:07:19.000
better for viewing.

184
00:07:19.000 --> 00:07:21.030
Copy this, validate, okay.

185
00:07:21.030 --> 00:07:22.060
So this is what it give me.

186
00:07:22.060 --> 00:07:24.030
Of course it is trying to give me a collection,

187
00:07:24.030 --> 00:07:26.010
it's giving me a JSON array because it tried

188
00:07:26.010 --> 00:07:27.080
to serialize a list.

189
00:07:27.080 --> 00:07:29.080
But do you understand the problem here?

190
00:07:29.080 --> 00:07:33.030
The problem is that when you try to deserialize this array

191
00:07:33.030 --> 00:07:35.000
how will it understand which object

192
00:07:35.000 --> 00:07:36.030
it is supposed to create?

193
00:07:36.030 --> 00:07:38.070
Whether it has to create an instance of the professor

194
00:07:38.070 --> 00:07:41.060
or an instance of the software developer.

195
00:07:41.060 --> 00:07:43.050
And that is the problem here.

196
00:07:43.050 --> 00:07:44.030
Okay?

197
00:07:44.030 --> 00:07:47.090
Let's try the deserialization quickly in the code.

198
00:07:47.090 --> 00:07:51.080
I'm going to take this line 28's call

199
00:07:51.080 --> 00:07:55.040
and as usual, I'm going to put it in a string variable

200
00:07:55.040 --> 00:07:57.040
result equal to this

201
00:07:57.040 --> 00:08:00.020
and semi-colon, come on the next line

202
00:08:00.020 --> 00:08:01.010
and say

203
00:08:01.010 --> 00:08:03.060
so ut

204
00:08:03.060 --> 00:08:04.090
JSON-B

205
00:08:04.090 --> 00:08:05.070
dot

206
00:08:05.070 --> 00:08:07.060
from JSON.

207
00:08:07.060 --> 00:08:09.080
Pass that result

208
00:08:09.080 --> 00:08:11.020
and the type.

209
00:08:11.020 --> 00:08:12.080
What do you think is the type?

210
00:08:12.080 --> 00:08:15.020
This is a list, so we know how generics list

211
00:08:15.020 --> 00:08:16.090
can be deserialized, so I'm going to use

212
00:08:16.090 --> 00:08:18.050
that same syntax.

213
00:08:18.050 --> 00:08:20.040
Array list

214
00:08:20.040 --> 00:08:21.020
of

215
00:08:21.020 --> 00:08:22.030
person.

216
00:08:22.030 --> 00:08:23.050
Okay.

217
00:08:23.050 --> 00:08:25.050
And then the anonymous inner class

218
00:08:25.050 --> 00:08:27.040
and on that, you say get class

219
00:08:27.040 --> 00:08:31.060
and on that, you say get generic super class.

220
00:08:31.060 --> 00:08:34.050
Okay, so this is not going to be printing for me

221
00:08:34.050 --> 00:08:36.040
because that will be a little weird,

222
00:08:36.040 --> 00:08:39.030
so what I'm gonna do is I'm just going to collect this

223
00:08:39.030 --> 00:08:42.000
in a list of people again

224
00:08:42.000 --> 00:08:48.040
and let me call this deserialized people now.

225
00:08:48.040 --> 00:08:50.060
Naming convention should be right.

226
00:08:50.060 --> 00:08:52.050
Okay, deserialized people.

227
00:08:52.050 --> 00:08:53.050
Okay.

228
00:08:53.050 --> 00:08:55.030
So I'm basically taking this entire thing

229
00:08:55.030 --> 00:08:57.090
and putting it inside a list again.

230
00:08:57.090 --> 00:08:59.080
So this is what I'm gonna do

231
00:08:59.080 --> 00:09:02.030
and now I'm gonna just make sure that I sys out

232
00:09:02.030 --> 00:09:04.080
this and check what happens.

233
00:09:04.080 --> 00:09:05.060
Let's run this.

234
00:09:05.060 --> 00:09:07.000
So we are serializing of course

235
00:09:07.000 --> 00:09:09.000
and let's also print out the serialization result

236
00:09:09.000 --> 00:09:10.020
on line 30.

237
00:09:10.020 --> 00:09:13.040
I'm just gonna print that result out, okay?

238
00:09:13.040 --> 00:09:14.070
And let's say result.

239
00:09:14.070 --> 00:09:16.020
Okay.

240
00:09:16.020 --> 00:09:19.080
Let's run this and see what happens.

241
00:09:19.080 --> 00:09:22.030
Yeah, do you see what has happened?

242
00:09:22.030 --> 00:09:24.010
It gave me the serialization result.

243
00:09:24.010 --> 00:09:25.070
Of course, it gave me a collection

244
00:09:25.070 --> 00:09:27.090
which is converted to a JSON array.

245
00:09:27.090 --> 00:09:30.060
But now it doesn't understand what to do.

246
00:09:30.060 --> 00:09:32.020
It doesn't understand whose instance to create,

247
00:09:32.020 --> 00:09:34.080
whether it wants a constructor of the professor code

248
00:09:34.080 --> 00:09:37.050
or the constructor of the software developer code.

249
00:09:37.050 --> 00:09:38.030
Right?

250
00:09:38.030 --> 00:09:40.060
So now how do you handle this deserialization process?

251
00:09:40.060 --> 00:09:44.020
There are no annotations, there are no APIs

252
00:09:44.020 --> 00:09:45.080
inside the JSON-B configure object

253
00:09:45.080 --> 00:09:47.000
which help you to do this.

254
00:09:47.000 --> 00:09:49.010
So now this is what we are going to achieve

255
00:09:49.010 --> 00:09:52.060
using serializers and deserializers.

256
00:09:52.060 --> 00:09:55.000
And we'll look at that demo in the next video.

