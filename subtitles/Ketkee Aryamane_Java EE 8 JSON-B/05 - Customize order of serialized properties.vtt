WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Narrator] Now let's look at the next

2
00:00:01.070 --> 00:00:05.000
customized mapping option which is customizing the order

3
00:00:05.000 --> 00:00:09.000
of the serialized properties.

4
00:00:09.000 --> 00:00:12.070
Now this can be done at both the compile and the run time.

5
00:00:12.070 --> 00:00:14.030
At the compile time if you want to provide

6
00:00:14.030 --> 00:00:18.010
this customization you need the JsonbPropertyOrder

7
00:00:18.010 --> 00:00:20.020
annotation to be set on the class.

8
00:00:20.020 --> 00:00:21.010
So how do you do that?

9
00:00:21.010 --> 00:00:22.030
Let's go to the IDE.

10
00:00:22.030 --> 00:00:24.070
Let's pick up the Product class this time.

11
00:00:24.070 --> 00:00:30.030
And on this class I'm going to say JsonbPropertyOrder.

12
00:00:30.030 --> 00:00:31.050
That's the one.

13
00:00:31.050 --> 00:00:34.050
And when you talk about the JsonbPropertyOrder,

14
00:00:34.050 --> 00:00:37.030
you can now actually specify that using

15
00:00:37.030 --> 00:00:42.000
the PropertyOrderStrategy and on that,

16
00:00:42.000 --> 00:00:44.050
you can specify whether it is any,

17
00:00:44.050 --> 00:00:47.030
or it is lexicographical or it is reverse.

18
00:00:47.030 --> 00:00:49.080
By default of course the order strategy that is employed

19
00:00:49.080 --> 00:00:52.070
is lexicographical, however if you say reverse,

20
00:00:52.070 --> 00:00:55.090
let's try out reverse this time.

21
00:00:55.090 --> 00:00:59.020
It means that the properties in your json document

22
00:00:59.020 --> 00:01:02.060
will be ordered from z to a.

23
00:01:02.060 --> 00:01:03.080
That's what it means okay?

24
00:01:03.080 --> 00:01:05.020
So let's test this out.

25
00:01:05.020 --> 00:01:13.060
Let's go to Tests folder, create a Test class.

26
00:01:13.060 --> 00:01:18.080
TestOrderStrategy, psvm, the main method,

27
00:01:18.080 --> 00:01:25.030
and we have already tried to take the product data

28
00:01:25.030 --> 00:01:28.050
in one of the classes so I'm just going to grab those lines.

29
00:01:28.050 --> 00:01:32.000
I'm going to TestCollections.java and picking up the code

30
00:01:32.000 --> 00:01:34.030
from line number 29 to 34,

31
00:01:34.030 --> 00:01:37.010
because I want only product-specific data.

32
00:01:37.010 --> 00:01:41.010
So let's go there and have that first in our main method

33
00:01:41.010 --> 00:01:42.090
pasted on line number 19.

34
00:01:42.090 --> 00:01:45.000
Okay once we do this, we only have to do

35
00:01:45.000 --> 00:01:51.010
is to get that Jsonb default engine.

36
00:01:51.010 --> 00:01:59.040
And create an instance using the JsonbBuilder.create.

37
00:01:59.040 --> 00:02:03.090
Once that's done, let's just go ahead and say

38
00:02:03.090 --> 00:02:12.000
jsonb.toJson and let's feed the products object.

39
00:02:12.000 --> 00:02:17.070
Okay and let's run this now.

40
00:02:17.070 --> 00:02:20.040
Yeah so do you see that under every product object

41
00:02:20.040 --> 00:02:22.050
the ShippingCompany comes in first?

42
00:02:22.050 --> 00:02:26.000
And then the price and then the name, the id,

43
00:02:26.000 --> 00:02:28.030
in that order and then of course the manufacturer.

44
00:02:28.030 --> 00:02:30.010
So it is going to be the reverse alphabetical order

45
00:02:30.010 --> 00:02:31.080
from z to a.

46
00:02:31.080 --> 00:02:34.020
So that's what you can do.

47
00:02:34.020 --> 00:02:37.030
The other way to set that is at the run time

48
00:02:37.030 --> 00:02:39.040
using the JsonbConfig object,

49
00:02:39.040 --> 00:02:41.070
and the method is withPropertyOrderStrategy

50
00:02:41.070 --> 00:02:44.060
so let's go back to the IDE.

51
00:02:44.060 --> 00:02:50.040
Let's grab the object mapper class and let's come into this

52
00:02:50.040 --> 00:02:52.090
and go ahead and say,

53
00:02:52.090 --> 00:02:59.010
this now is for the property order strategy okay?

54
00:02:59.010 --> 00:03:00.000
And what are we going to do?

55
00:03:00.000 --> 00:03:02.020
We are going to set it on the config object.

56
00:03:02.020 --> 00:03:04.070
There's an API called propertyOrderStrategy

57
00:03:04.070 --> 00:03:09.080
and there you can specify the PropertyOrderStrategy

58
00:03:09.080 --> 00:03:14.000
as reverse okay?

59
00:03:14.000 --> 00:03:16.070
Let's also do one more thing let's go to the Product class

60
00:03:16.070 --> 00:03:20.080
and get rid of the annotation that we put in the code.

61
00:03:20.080 --> 00:03:24.020
Okay next is go to the Test class,

62
00:03:24.020 --> 00:03:26.010
let me get rid of these unwanted imports,

63
00:03:26.010 --> 00:03:27.070
I don't want them okay.

64
00:03:27.070 --> 00:03:30.070
That's good now let's go to the Test class,

65
00:03:30.070 --> 00:03:35.070
and let's make sure that we are trying to grab

66
00:03:35.070 --> 00:03:39.080
the jsonb default engine instance by the overloaded method

67
00:03:39.080 --> 00:03:41.090
of the JsonbBuilder okay?

68
00:03:41.090 --> 00:03:43.050
So that will be create and you are going

69
00:03:43.050 --> 00:03:50.030
to take in the ObjectMapper.

70
00:03:50.030 --> 00:03:52.080
Let's run this, the output is not going to change,

71
00:03:52.080 --> 00:03:55.080
but the only thing is that we'll see the formatted output

72
00:03:55.080 --> 00:03:57.070
so that is going to be a little better.

73
00:03:57.070 --> 00:04:02.030
Yeah so you have p, n, m, i, s, p, n, m, i right?

74
00:04:02.030 --> 00:04:04.090
So the reverse order of the lexicographical order.

75
00:04:04.090 --> 00:04:07.000
However, if you go to ObjectMapper,

76
00:04:07.000 --> 00:04:09.080
and try to put this as any,

77
00:04:09.080 --> 00:04:11.090
it is generally going to follow the order

78
00:04:11.090 --> 00:04:14.010
of the instance variable that is mentioned

79
00:04:14.010 --> 00:04:16.050
in the respective java object.

80
00:04:16.050 --> 00:04:18.050
That's usually the order but that's not guaranteed

81
00:04:18.050 --> 00:04:21.010
so let's quickly test this and see.

82
00:04:21.010 --> 00:04:24.060
Let's say run file.

83
00:04:24.060 --> 00:04:28.030
Yeah, so it is p, n, i, m, s, p, n, i, m,

84
00:04:28.030 --> 00:04:31.060
still employing the same one that we have seen before okay?

85
00:04:31.060 --> 00:04:33.080
So it really doesn't matter if you want to keep

86
00:04:33.080 --> 00:04:35.080
it lexicographical or reverse but these are just

87
00:04:35.080 --> 00:04:38.060
the kind of order strategies that the json binding API

88
00:04:38.060 --> 00:04:42.000
provides you in case you want a different strategy.

