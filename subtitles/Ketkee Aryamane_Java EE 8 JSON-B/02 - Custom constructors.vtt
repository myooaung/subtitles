WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Instructor] Now let's take a look at the next

2
00:00:02.000 --> 00:00:03.090
customized mapping option that we have,

3
00:00:03.090 --> 00:00:08.060
which is how do you define a custom constructor?

4
00:00:08.060 --> 00:00:11.040
Now by default, whenever the JSON binding API

5
00:00:11.040 --> 00:00:13.060
tries to do deserialization,

6
00:00:13.060 --> 00:00:15.020
we all know that a no argument

7
00:00:15.020 --> 00:00:17.070
or a default constructor is a must.

8
00:00:17.070 --> 00:00:20.010
It is going to make sure that it invokes that,

9
00:00:20.010 --> 00:00:22.090
and thereafter, it'll invoke the appropriate setup methods

10
00:00:22.090 --> 00:00:25.030
to set the values on the JSON document

11
00:00:25.030 --> 00:00:28.010
into the respective property of your Java object.

12
00:00:28.010 --> 00:00:29.040
So that's the rule.

13
00:00:29.040 --> 00:00:31.010
However, there are certain situations

14
00:00:31.010 --> 00:00:33.040
where this may not be the desired behavior

15
00:00:33.040 --> 00:00:35.030
because the kind of JSON representation

16
00:00:35.030 --> 00:00:37.020
that you're getting from some other system

17
00:00:37.020 --> 00:00:40.040
may not know the structure of your beans.

18
00:00:40.040 --> 00:00:42.030
So it may send out a plain JSON

19
00:00:42.030 --> 00:00:44.000
with just key-value pairs,

20
00:00:44.000 --> 00:00:47.070
and it really may not have the correct object representation

21
00:00:47.070 --> 00:00:50.000
that your system or your code expects.

22
00:00:50.000 --> 00:00:51.060
So I'm going to talk about this situation,

23
00:00:51.060 --> 00:00:53.070
this example that we have in front of us,

24
00:00:53.070 --> 00:00:56.080
and then we'll go onto understand how do you solve this.

25
00:00:56.080 --> 00:00:58.080
So let's go to our project structure.

26
00:00:58.080 --> 00:01:00.020
And we have this order file

27
00:01:00.020 --> 00:01:02.040
that we have saved in one of our previous demos.

28
00:01:02.040 --> 00:01:06.010
I'm just going to open that, and let's take a look at it.

29
00:01:06.010 --> 00:01:09.060
So, let's go ahead and copy this in JSONLint

30
00:01:09.060 --> 00:01:11.090
because it's difficult to read otherwise.

31
00:01:11.090 --> 00:01:15.080
So I'm going to open JSONLint.

32
00:01:15.080 --> 00:01:17.080
Okay, let's validate.

33
00:01:17.080 --> 00:01:20.020
Yeah, now, it is formatted for us,

34
00:01:20.020 --> 00:01:21.060
so it has got a lot of fields.

35
00:01:21.060 --> 00:01:23.010
It has got the customer object,

36
00:01:23.010 --> 00:01:24.070
and then, it has got the delivery date,

37
00:01:24.070 --> 00:01:27.050
and order date fields, and then the order details.

38
00:01:27.050 --> 00:01:29.050
And then order details again, has a list of products,

39
00:01:29.050 --> 00:01:33.000
and then this total amount, and order ID, and all of that.

40
00:01:33.000 --> 00:01:34.000
What I'm going to do is,

41
00:01:34.000 --> 00:01:36.090
I'm going to pick up the order details object for this demo,

42
00:01:36.090 --> 00:01:38.070
and then we'll explain to ourselves,

43
00:01:38.070 --> 00:01:40.000
what is the problem,

44
00:01:40.000 --> 00:01:44.020
and how do you solve it using the custom constructor.

45
00:01:44.020 --> 00:01:46.020
So let's do one thing first.

46
00:01:46.020 --> 00:01:49.070
Let's get hold of that order details object alone.

47
00:01:49.070 --> 00:01:50.090
Okay.

48
00:01:50.090 --> 00:01:54.030
So, I'm just going to carefully copy

49
00:01:54.030 --> 00:01:56.020
the order details object.

50
00:01:56.020 --> 00:01:57.060
I'll need the products.

51
00:01:57.060 --> 00:01:59.010
I'll need the shipping address,

52
00:01:59.010 --> 00:02:00.090
and I'll need the total amount.

53
00:02:00.090 --> 00:02:03.040
So that will comprise my order details object.

54
00:02:03.040 --> 00:02:06.040
Let's copy that, let's go back to Notepad++.

55
00:02:06.040 --> 00:02:09.080
Open a new document, and paste it there.

56
00:02:09.080 --> 00:02:12.030
So let's see how do you want to see this object.

57
00:02:12.030 --> 00:02:15.040
You will not have this key anymore.

58
00:02:15.040 --> 00:02:17.060
So, order details will have products.

59
00:02:17.060 --> 00:02:20.000
It will have the shipping address,

60
00:02:20.000 --> 00:02:21.060
and it will have the total amount.

61
00:02:21.060 --> 00:02:26.020
So my object, the JSON object should end here, like that.

62
00:02:26.020 --> 00:02:29.030
Okay, so, this is actually only the order details object.

63
00:02:29.030 --> 00:02:31.040
This one has a key called products,

64
00:02:31.040 --> 00:02:33.080
which points to an array of products, of course.

65
00:02:33.080 --> 00:02:35.070
Then it has another key called shipping address,

66
00:02:35.070 --> 00:02:38.010
which points to the respective fields of the address,

67
00:02:38.010 --> 00:02:41.060
and then the total amount of that particular order.

68
00:02:41.060 --> 00:02:44.060
Now, sometimes, let's say you're getting

69
00:02:44.060 --> 00:02:47.070
this JSON from another system or another application,

70
00:02:47.070 --> 00:02:49.050
another program, another platform.

71
00:02:49.050 --> 00:02:52.090
In that case, it is possible that since

72
00:02:52.090 --> 00:02:56.020
that system does not know the structure of your beans,

73
00:02:56.020 --> 00:02:59.050
it could actually send out certain fields or certain values,

74
00:02:59.050 --> 00:03:02.080
certain data, only in the form of key-value pair.

75
00:03:02.080 --> 00:03:08.010
For example: on line 26, what happens if I eliminate this?

76
00:03:08.010 --> 00:03:11.040
What happens if I eliminate the shipping address key?

77
00:03:11.040 --> 00:03:14.070
And the corresponding closing brace for that too.

78
00:03:14.070 --> 00:03:18.010
In this case, this is still a perfectly valid JSON, right?

79
00:03:18.010 --> 00:03:20.070
The products end here.

80
00:03:20.070 --> 00:03:23.050
And then there's city, country, street, and zip code,

81
00:03:23.050 --> 00:03:25.050
and then this total amount, okay?

82
00:03:25.050 --> 00:03:27.030
Let me take this JSON and see

83
00:03:27.030 --> 00:03:29.030
whether it is still a valid JSON first.

84
00:03:29.030 --> 00:03:33.020
Let's get rid of this, paste this, and check.

85
00:03:33.020 --> 00:03:35.040
And yes, it is still a valid JSON.

86
00:03:35.040 --> 00:03:36.070
Why not?

87
00:03:36.070 --> 00:03:40.040
But, the additionally key of the address information

88
00:03:40.040 --> 00:03:42.060
was coming in because our structure was like that,

89
00:03:42.060 --> 00:03:44.050
and then the serialization that happened,

90
00:03:44.050 --> 00:03:48.000
introduced that shipping address key into the document.

91
00:03:48.000 --> 00:03:49.010
But let's say,

92
00:03:49.010 --> 00:03:52.000
somebody else is sending you this data of order details,

93
00:03:52.000 --> 00:03:52.080
some other system,

94
00:03:52.080 --> 00:03:55.020
and then it does not have those respective keys.

95
00:03:55.020 --> 00:03:57.020
So you may just get plain fields like these:

96
00:03:57.020 --> 00:03:59.000
city, country, street, and zip code.

97
00:03:59.000 --> 00:04:01.010
So in that case, how do you make sure

98
00:04:01.010 --> 00:04:04.060
that you want these four fields to be a part

99
00:04:04.060 --> 00:04:08.060
of an address object when this JSON enters your code.

100
00:04:08.060 --> 00:04:13.050
So, that's how you do it with the custom creator.

101
00:04:13.050 --> 00:04:16.000
I know that these fields are coming in as they are,

102
00:04:16.000 --> 00:04:19.000
but when I get this JSON document in my application,

103
00:04:19.000 --> 00:04:22.020
I want that, the city, country, street, the zip code,

104
00:04:22.020 --> 00:04:24.010
the fields that are highlighted right now,

105
00:04:24.010 --> 00:04:26.040
become a part of the address object.

106
00:04:26.040 --> 00:04:29.080
I don't want to receive them as simple strings, yes?

107
00:04:29.080 --> 00:04:31.000
I don't want to receive this as a string.

108
00:04:31.000 --> 00:04:34.040
This as another string, another one, and then the integer.

109
00:04:34.040 --> 00:04:37.010
I want that they become a part of my address object,

110
00:04:37.010 --> 00:04:38.090
which means, I will now

111
00:04:38.090 --> 00:04:41.020
have to instantiate the address class,

112
00:04:41.020 --> 00:04:44.030
and make sure, this four fields are fed to the Java object,

113
00:04:44.030 --> 00:04:46.070
and then I take it for processing further.

114
00:04:46.070 --> 00:04:47.050
Okay?

115
00:04:47.050 --> 00:04:48.050
So, what we're going to do is,

116
00:04:48.050 --> 00:04:51.080
now we're going to retain this, structure as is.

117
00:04:51.080 --> 00:04:54.030
We're going to save this in our folder,

118
00:04:54.030 --> 00:04:59.090
and let's label it, order details.dxt.

119
00:04:59.090 --> 00:05:02.020
So, once we do that, let's go back to the code,

120
00:05:02.020 --> 00:05:04.080
and let's close all of this,

121
00:05:04.080 --> 00:05:08.000
and let's open up the order details peel,

122
00:05:08.000 --> 00:05:10.060
which is this one.

123
00:05:10.060 --> 00:05:11.040
Right?

124
00:05:11.040 --> 00:05:12.030
The order details constructor,

125
00:05:12.030 --> 00:05:14.070
one of them is parametrized, the other one is default.

126
00:05:14.070 --> 00:05:17.050
Now, by default, of course, JSON peel is going to utilize

127
00:05:17.050 --> 00:05:19.070
this constructor for deserialization.

128
00:05:19.070 --> 00:05:22.010
But we don't want it to consider this.

129
00:05:22.010 --> 00:05:25.040
Instead, we want to define our own constructor.

130
00:05:25.040 --> 00:05:26.020
How do we do that?

131
00:05:26.020 --> 00:05:28.010
Let's go ahead, on line 26,

132
00:05:28.010 --> 00:05:29.090
and I'm going to define one more constructor there.

133
00:05:29.090 --> 00:05:32.050
I'll say order details.

134
00:05:32.050 --> 00:05:33.030
Okay.

135
00:05:33.030 --> 00:05:35.020
And what does this expect?

136
00:05:35.020 --> 00:05:37.090
I expect list of products

137
00:05:37.090 --> 00:05:40.080
that I'm copying from line number 20 itself.

138
00:05:40.080 --> 00:05:42.090
That's one of the parameters.

139
00:05:42.090 --> 00:05:47.070
Copying it to line 26, and then the address fields are going

140
00:05:47.070 --> 00:05:49.000
to be received like this.

141
00:05:49.000 --> 00:05:50.080
Because the JSON that is coming in,

142
00:05:50.080 --> 00:05:54.010
is trying to give me city, street, state, and zip code

143
00:05:54.010 --> 00:05:55.070
in the form of individual fields,

144
00:05:55.070 --> 00:05:57.090
rather than as address object, okay?

145
00:05:57.090 --> 00:06:04.020
So I'm going to take those as parameters,

146
00:06:04.020 --> 00:06:06.060
and then of course, I have the total amount,

147
00:06:06.060 --> 00:06:08.090
which is a double field.

148
00:06:08.090 --> 00:06:12.030
So let that be as it is.

149
00:06:12.030 --> 00:06:17.040
Okay, let's make this public.

150
00:06:17.040 --> 00:06:23.000
Okay, now, what I want is, let's look at the slide.

151
00:06:23.000 --> 00:06:25.010
We have this requirement, where we now want

152
00:06:25.010 --> 00:06:27.030
to write out a custom constructor,

153
00:06:27.030 --> 00:06:29.010
and that has to be supplied

154
00:06:29.010 --> 00:06:31.060
during the deserialization process, right?

155
00:06:31.060 --> 00:06:33.050
So, in order to do that, we'll have to

156
00:06:33.050 --> 00:06:36.050
tell JSON binding API that hey, listen,

157
00:06:36.050 --> 00:06:39.000
instead of using the default constructor,

158
00:06:39.000 --> 00:06:41.040
can you please use this constructor that I have define,

159
00:06:41.040 --> 00:06:44.060
in order to deserialize my order details object?

160
00:06:44.060 --> 00:06:47.010
So that will be done with the help of the annotation,

161
00:06:47.010 --> 00:06:48.090
JSON-B Creator.

162
00:06:48.090 --> 00:06:51.030
So let's go and attach that annotation right away,

163
00:06:51.030 --> 00:06:52.010
on that constructor.

164
00:06:52.010 --> 00:06:53.090
So I'm going to come on line 26

165
00:06:53.090 --> 00:06:57.000
and call out that annotation here.

166
00:06:57.000 --> 00:06:59.030
This will tell your JSON binding API,

167
00:06:59.030 --> 00:07:01.090
now that this particular constructor

168
00:07:01.090 --> 00:07:04.050
has to be used for deserialization.

169
00:07:04.050 --> 00:07:07.040
Okay, and let's correct that compilation error,

170
00:07:07.040 --> 00:07:09.030
that is the capital string.

171
00:07:09.030 --> 00:07:10.090
Okay.

172
00:07:10.090 --> 00:07:12.040
Now, the other thing is,

173
00:07:12.040 --> 00:07:16.020
you will have to annotate all parameters of the constructor

174
00:07:16.020 --> 00:07:18.090
with @JsonbProperty annotation.

175
00:07:18.090 --> 00:07:20.040
What it means is,

176
00:07:20.040 --> 00:07:23.030
now since you have individual fields coming in,

177
00:07:23.030 --> 00:07:26.040
and this is not the default constructor, right?

178
00:07:26.040 --> 00:07:28.050
For the deserialization process,

179
00:07:28.050 --> 00:07:31.070
which means JSON binding API now needs to be told

180
00:07:31.070 --> 00:07:35.060
that hey, listen, there are are one, two, three, four,

181
00:07:35.060 --> 00:07:37.060
five and six parameters,

182
00:07:37.060 --> 00:07:41.060
and each of these parameters is going to be mapped

183
00:07:41.060 --> 00:07:46.010
from a particular property on that JSON document, okay?

184
00:07:46.010 --> 00:07:48.090
So let me open that JSON document.

185
00:07:48.090 --> 00:07:51.070
Okay, so, products is going to be mapped with this key.

186
00:07:51.070 --> 00:07:54.010
But, as far as the address is concerned,

187
00:07:54.010 --> 00:07:56.010
I don't have a property called shipping address.

188
00:07:56.010 --> 00:07:58.020
I have individual fields.

189
00:07:58.020 --> 00:08:01.050
So, for correct parameter substitution,

190
00:08:01.050 --> 00:08:04.070
I will have to make sure that in this constructor,

191
00:08:04.070 --> 00:08:08.060
I mention which property of the JSON document belongs to

192
00:08:08.060 --> 00:08:13.010
which property in this parameterized constructor set, okay?

193
00:08:13.010 --> 00:08:15.020
So, how will we do that?

194
00:08:15.020 --> 00:08:19.020
Let's go here, at the beginning, you say JSONbProperty.

195
00:08:19.020 --> 00:08:21.000
And you give the name of the property,

196
00:08:21.000 --> 00:08:25.030
and that in case of this particular object is products.

197
00:08:25.030 --> 00:08:26.020
Right?

198
00:08:26.020 --> 00:08:27.080
And we'll have to do this parameter substitution

199
00:08:27.080 --> 00:08:30.030
for each of the properties coming ahead.

200
00:08:30.030 --> 00:08:33.090
So, I'm going to just copy this,

201
00:08:33.090 --> 00:08:36.090
go to the next one,

202
00:08:36.090 --> 00:08:37.090
paste it there,

203
00:08:37.090 --> 00:08:41.060
and specify the key inside the JSON document.

204
00:08:41.060 --> 00:08:44.070
So, city is supposed to be mapped to this property, okay?

205
00:08:44.070 --> 00:08:48.010
Again, let's go and change it for the country.

206
00:08:48.010 --> 00:08:50.030
That's how country is going to be mapped.

207
00:08:50.030 --> 00:08:52.040
Next, it's going to be the street.

208
00:08:52.040 --> 00:08:58.050
So, just paste that, and change the name of that property.

209
00:08:58.050 --> 00:08:59.090
And then we have zip code.

210
00:08:59.090 --> 00:09:02.080
So, paste that, and change the name again

211
00:09:02.080 --> 00:09:05.060
to the respective property.

212
00:09:05.060 --> 00:09:08.060
And do the same thing for the amount as well,

213
00:09:08.060 --> 00:09:12.020
so that will be total amount.

214
00:09:12.020 --> 00:09:16.020
Okay, so, if you look at your JSON document, that's the key,

215
00:09:16.020 --> 00:09:20.030
then you have city, country, street, zip code, total amount.

216
00:09:20.030 --> 00:09:21.070
So this is done because now,

217
00:09:21.070 --> 00:09:24.050
this is not the default serialization process.

218
00:09:24.050 --> 00:09:27.000
So, it is not going to behave as per your Java objects

219
00:09:27.000 --> 00:09:29.000
properties that you have listed out,

220
00:09:29.000 --> 00:09:32.060
and that's why, you will need to tell the JSON binding API

221
00:09:32.060 --> 00:09:37.020
that this particular key points to this particular argument.

222
00:09:37.020 --> 00:09:41.030
Similarly, the case for city, country, street, zip code,

223
00:09:41.030 --> 00:09:42.070
and total amount.

224
00:09:42.070 --> 00:09:45.090
And now, let's come inside, and say

225
00:09:45.090 --> 00:09:48.010
this.products of course is going to be mapped

226
00:09:48.010 --> 00:09:50.090
to that incoming products argument, which is fair,

227
00:09:50.090 --> 00:09:52.040
which is still the same, nothing changes there.

228
00:09:52.040 --> 00:09:55.050
But, now I'm concerned for the shipping address.

229
00:09:55.050 --> 00:09:56.050
So how is that going to happen?

230
00:09:56.050 --> 00:09:59.060
I'm going to say, this.shipping address equal to,

231
00:09:59.060 --> 00:10:05.000
and now here, I will instantiate the address object,

232
00:10:05.000 --> 00:10:07.060
by feeding in the respective properties

233
00:10:07.060 --> 00:10:09.070
of the address object,

234
00:10:09.070 --> 00:10:12.040
mapping them to constructor arguments.

235
00:10:12.040 --> 00:10:15.010
So now, these particular arguments that you have,

236
00:10:15.010 --> 00:10:17.030
they're going to be mapped to the address constructor,

237
00:10:17.030 --> 00:10:20.000
and we're going to get the address object.

238
00:10:20.000 --> 00:10:22.080
And as far as the total amount is concerned,

239
00:10:22.080 --> 00:10:23.080
that is still going to be the same.

240
00:10:23.080 --> 00:10:25.060
That does not change.

241
00:10:25.060 --> 00:10:31.000
Total amount is equal to the incoming parameter.

242
00:10:31.000 --> 00:10:32.020
Right?

243
00:10:32.020 --> 00:10:33.000
So, what you did is,

244
00:10:33.000 --> 00:10:34.060
you did this complex construction

245
00:10:34.060 --> 00:10:37.040
by yourself with the help of the keys

246
00:10:37.040 --> 00:10:39.070
that you got from your JSON document.

247
00:10:39.070 --> 00:10:40.080
So, this is only in the case,

248
00:10:40.080 --> 00:10:42.090
where you know the JSON document is being received

249
00:10:42.090 --> 00:10:44.010
from some other system.

250
00:10:44.010 --> 00:10:46.040
That system may not have an idea about the structure

251
00:10:46.040 --> 00:10:47.070
of your Java objects,

252
00:10:47.070 --> 00:10:50.010
so you will have to construct those objects by yourself,

253
00:10:50.010 --> 00:10:52.000
which means that you will have to write a custom creator,

254
00:10:52.000 --> 00:10:54.060
annotate it with JSON-B creator,

255
00:10:54.060 --> 00:10:57.000
make sure the correct parameter substitution is done

256
00:10:57.000 --> 00:10:58.030
for every parameter,

257
00:10:58.030 --> 00:11:00.050
and then instantiate the way you want it.

258
00:11:00.050 --> 00:11:04.010
Okay, so now let's go ahead and test this out.

259
00:11:04.010 --> 00:11:06.000
But we'll do that in the next video.

