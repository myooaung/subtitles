WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Narrator] So in the last chapter, we actually saw

2
00:00:02.020 --> 00:00:05.060
what all default mapping is available which is in binding,

3
00:00:05.060 --> 00:00:08.020
so we saw how you can do, as a part of serialization

4
00:00:08.020 --> 00:00:11.020
and de-serialization, without any additional setting.

5
00:00:11.020 --> 00:00:13.030
Everything that we were using by far

6
00:00:13.030 --> 00:00:15.020
was the JSON-B default engine.

7
00:00:15.020 --> 00:00:16.080
We just created an instance of that

8
00:00:16.080 --> 00:00:18.050
using the JSON-B builder,

9
00:00:18.050 --> 00:00:21.050
and then we utilized the to JSON and from JSON APIs

10
00:00:21.050 --> 00:00:24.080
to serialize and de-serialize our objects.

11
00:00:24.080 --> 00:00:28.000
But JSON-Binding API also provides you a list

12
00:00:28.000 --> 00:00:31.070
of fantastic options to customize that mapping,

13
00:00:31.070 --> 00:00:33.030
so you may not like the default mapping.

14
00:00:33.030 --> 00:00:36.030
You may not like certain settings of the default mapping,

15
00:00:36.030 --> 00:00:38.010
yes, then you have a way around it,

16
00:00:38.010 --> 00:00:41.030
and JSON-B is open enough to provide you a list

17
00:00:41.030 --> 00:00:44.030
of custom options, so that you can actually serialize

18
00:00:44.030 --> 00:00:47.030
and de-serialize the way you want.

19
00:00:47.030 --> 00:00:49.060
So to support this, there are two types

20
00:00:49.060 --> 00:00:52.090
of customizations that JSON-Binding API provides.

21
00:00:52.090 --> 00:00:55.020
The first one is at the compile time,

22
00:00:55.020 --> 00:00:58.060
and that's facilitated by means of annotations,

23
00:00:58.060 --> 00:01:01.050
so you have a field or you have a class,

24
00:01:01.050 --> 00:01:05.020
or you have a method, so on each one of these,

25
00:01:05.020 --> 00:01:08.020
you have certain set of annotations that you can apply,

26
00:01:08.020 --> 00:01:10.070
and that will be taken into consideration

27
00:01:10.070 --> 00:01:12.070
at compile time itself.

28
00:01:12.070 --> 00:01:16.030
However, there's another option, which is runtime,

29
00:01:16.030 --> 00:01:20.000
and that is by means of an API called JsonbConfig,

30
00:01:20.000 --> 00:01:21.080
so this is a configuration object

31
00:01:21.080 --> 00:01:24.010
which is going to hold all the configuration settings

32
00:01:24.010 --> 00:01:25.070
for your customized mapping.

33
00:01:25.070 --> 00:01:27.070
You apply this configuration object

34
00:01:27.070 --> 00:01:31.050
whenever you create the JSON-B engine instance,

35
00:01:31.050 --> 00:01:35.080
and when you do that, at serialization, at de-serialization,

36
00:01:35.080 --> 00:01:39.050
wherever applicable, those customizations will apply,

37
00:01:39.050 --> 00:01:41.070
and please remember that when you actually try

38
00:01:41.070 --> 00:01:45.010
to apply customization using JsonbConfig API,

39
00:01:45.010 --> 00:01:47.070
it kind of is a global customization,

40
00:01:47.070 --> 00:01:51.040
which means it will try to run on all the other beans

41
00:01:51.040 --> 00:01:54.070
that you have in the project in case you do serialization

42
00:01:54.070 --> 00:01:58.040
with the JSON-B instance, and this config object,

43
00:01:58.040 --> 00:02:01.000
so we'll look at all of this in the subsequent demos.

44
00:02:01.000 --> 00:02:02.040
Right now, we just have to remember

45
00:02:02.040 --> 00:02:04.030
that there are two levels of customization,

46
00:02:04.030 --> 00:02:07.020
one at the compile, and the other, at the runtime,

47
00:02:07.020 --> 00:02:09.070
each one of them facilitated in its own way,

48
00:02:09.070 --> 00:02:11.030
compile time by annotations,

49
00:02:11.030 --> 00:02:14.000
runtime by the JsonbConfig object.

