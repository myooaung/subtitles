WEBVTT
1
00:00:00.050 --> 00:00:03.050
- [Instructor] Now, I just got the DataGenerator class

2
00:00:03.050 --> 00:00:05.000
modified a little bit,

3
00:00:05.000 --> 00:00:06.080
so instead of returning a single order,

4
00:00:06.080 --> 00:00:09.040
it is now going to give me a list of orders.

5
00:00:09.040 --> 00:00:12.010
So I modified the getData method

6
00:00:12.010 --> 00:00:15.000
and created two orders there, okay,

7
00:00:15.000 --> 00:00:17.010
and added both of them to the orders List

8
00:00:17.010 --> 00:00:19.000
and returned that list.

9
00:00:19.000 --> 00:00:21.000
Okay, this file is available for you

10
00:00:21.000 --> 00:00:22.020
in the exercise folders,

11
00:00:22.020 --> 00:00:23.090
and let me tell you that it is not necessary

12
00:00:23.090 --> 00:00:25.050
that you create data like this,

13
00:00:25.050 --> 00:00:28.000
you can always give a call to your database,

14
00:00:28.000 --> 00:00:30.050
to the back end, and retrieve all the data

15
00:00:30.050 --> 00:00:32.090
and then set it in the List of orders object.

16
00:00:32.090 --> 00:00:34.090
That's absolutely okay.

17
00:00:34.090 --> 00:00:37.060
All right, but this file nevertheless is available to you,

18
00:00:37.060 --> 00:00:40.090
so you can use it, please feel free to use it, no problem.

19
00:00:40.090 --> 00:00:43.050
Okay, so now we are going to go back to the OrderResource,

20
00:00:43.050 --> 00:00:44.090
and that's the point

21
00:00:44.090 --> 00:00:48.030
where we had written out getOrdersFromDatabase,

22
00:00:48.030 --> 00:00:50.090
so I am just going to say, on the next line,

23
00:00:50.090 --> 00:00:54.000
instead of now trying to get data, I am going to get it

24
00:00:54.000 --> 00:00:56.070
in the orders List.

25
00:00:56.070 --> 00:01:01.060
Okay, so I'm going to say, DataGenerator.getData,

26
00:01:01.060 --> 00:01:04.000
and that'll give me a complete list of orders,

27
00:01:04.000 --> 00:01:05.060
which is good.

28
00:01:05.060 --> 00:01:10.070
Now, let's come back to the RESTful GET method

29
00:01:10.070 --> 00:01:14.000
that we have, and what are we going to do inside it?

30
00:01:14.000 --> 00:01:19.030
Nothing, we have to just make sure

31
00:01:19.030 --> 00:01:21.000
that we get the orders

32
00:01:21.000 --> 00:01:25.040
from that local method, the one that is trying

33
00:01:25.040 --> 00:01:27.020
to generate it and get back.

34
00:01:27.020 --> 00:01:33.030
And then let's take this and return as a part of line 27.

35
00:01:33.030 --> 00:01:37.040
Okay, so that's what it is, and of course, let's annotate

36
00:01:37.040 --> 00:01:44.010
one more parameter to the method, which is Produces,

37
00:01:44.010 --> 00:01:46.000
and what is this Produces?

38
00:01:46.000 --> 00:01:49.050
Basically, this method is going to produce me data

39
00:01:49.050 --> 00:01:51.010
of type JSON,

40
00:01:51.010 --> 00:01:53.030
and I'll explain to you what is happening behind the scenes,

41
00:01:53.030 --> 00:01:56.050
but right now I want to specify that this method is going

42
00:01:56.050 --> 00:01:58.010
to produce something of type JSON,

43
00:01:58.010 --> 00:02:00.080
so I'm going to take the help of MediaType

44
00:02:00.080 --> 00:02:05.000
and say Application.JSON, there we go.

45
00:02:05.000 --> 00:02:08.070
This is all related to the RESTful Web Services basics.

46
00:02:08.070 --> 00:02:11.080
Okay, so now that we are done with this,

47
00:02:11.080 --> 00:02:13.060
let's go ahead and clean

48
00:02:13.060 --> 00:02:19.080
and build this project first, quickly,

49
00:02:19.080 --> 00:02:21.030
okay, the build is a success,

50
00:02:21.030 --> 00:02:22.090
and let's run this project.

51
00:02:22.090 --> 00:02:25.000
It'll ask you to select the server when you're running it

52
00:02:25.000 --> 00:02:28.030
for the first time, so select GlassFish Server 5,

53
00:02:28.030 --> 00:02:31.000
and maybe you can Remember it for the Current IDE Session

54
00:02:31.000 --> 00:02:33.040
or maybe Remember Permanently.

55
00:02:33.040 --> 00:02:36.030
So let's go ahead and launch the server.

56
00:02:36.030 --> 00:02:38.060
This is going to take a little time, because it's starting

57
00:02:38.060 --> 00:02:42.030
for the first time.

58
00:02:42.030 --> 00:02:45.040
Okay, so it has pulled up the basic URI

59
00:02:45.040 --> 00:02:48.020
of the application, so what we're going to do now is,

60
00:02:48.020 --> 00:02:49.070
we're going to use the Postman tool

61
00:02:49.070 --> 00:02:53.030
to test out this particular web service,

62
00:02:53.030 --> 00:02:56.080
so let's launch the Postman tool,

63
00:02:56.080 --> 00:03:01.010
and let's copy this URI and close this window.

64
00:03:01.010 --> 00:03:03.030
Yeah, we have the Postman tool ready,

65
00:03:03.030 --> 00:03:05.020
so let's make sure

66
00:03:05.020 --> 00:03:09.050
that we access the current application's URL,

67
00:03:09.050 --> 00:03:11.030
which is this, so that's the basic URL,

68
00:03:11.030 --> 00:03:14.000
but as we say, you have to first access the part

69
00:03:14.000 --> 00:03:18.000
of the basic JAX-RS configuration class,

70
00:03:18.000 --> 00:03:21.040
and then we can access the part of the RESTful API

71
00:03:21.040 --> 00:03:23.020
that you want to really give a hit to

72
00:03:23.020 --> 00:03:25.060
in order to get the orders, okay?

73
00:03:25.060 --> 00:03:27.090
So let's quickly revise that in case you want

74
00:03:27.090 --> 00:03:31.010
to recollect, that's the JAX-RS configuration class,

75
00:03:31.010 --> 00:03:34.000
so that's the first basic URI that you need to access,

76
00:03:34.000 --> 00:03:37.080
after which, you can hit the RESTful API spot.

77
00:03:37.080 --> 00:03:39.040
That's how you do it, okay?

78
00:03:39.040 --> 00:03:40.070
So let's go to the Postman tool

79
00:03:40.070 --> 00:03:44.030
and click on Send, there we go,

80
00:03:44.030 --> 00:03:48.040
that's the JSON that it has gotten for us.

81
00:03:48.040 --> 00:03:49.080
Now let's examine this carefully.

82
00:03:49.080 --> 00:03:52.080
Let's go to the Pretty Pretty view, there, oh,

83
00:03:52.080 --> 00:03:56.010
and your very nicely formatted JSON will come up there,

84
00:03:56.010 --> 00:03:57.070
and what is this signifying?

85
00:03:57.070 --> 00:03:59.040
This is an array.

86
00:03:59.040 --> 00:04:02.030
There are two orders that I have added to my list,

87
00:04:02.030 --> 00:04:05.000
and when I want to get all the orders it is displaying there

88
00:04:05.000 --> 00:04:08.060
in the form of a JSON array, so that is the first order.

89
00:04:08.060 --> 00:04:12.040
Let me change the pane that I am trying to view in this,

90
00:04:12.040 --> 00:04:13.070
so it'll be a little better.

91
00:04:13.070 --> 00:04:18.030
Yes, there we go, so that's the first order,

92
00:04:18.030 --> 00:04:21.050
order 199, and that is the second order,

93
00:04:21.050 --> 00:04:25.020
and this entire data has come out in the form of a JSON,

94
00:04:25.020 --> 00:04:28.040
and we're getting it through a RESTful API.

95
00:04:28.040 --> 00:04:30.080
Now you must have noticed that we did not do any

96
00:04:30.080 --> 00:04:34.020
of the stuff we actually did in the standalone application.

97
00:04:34.020 --> 00:04:36.070
We did not clear the JSON-B instance,

98
00:04:36.070 --> 00:04:39.080
the default JSON-B engine instance,

99
00:04:39.080 --> 00:04:41.090
we never called the JSON-B builder,

100
00:04:41.090 --> 00:04:45.030
we never called the 2 JSON API, why?

101
00:04:45.030 --> 00:04:50.040
That's because the JAX-RS services are already integrated

102
00:04:50.040 --> 00:04:52.020
with the JSON Binding API.

103
00:04:52.020 --> 00:04:54.050
Now how fantastic is that?

104
00:04:54.050 --> 00:04:57.050
You only have to specify the RESTful API,

105
00:04:57.050 --> 00:05:00.000
you have to specify your method, you make sure that you have

106
00:05:00.000 --> 00:05:03.010
all the data ready with you, and once that data is ready,

107
00:05:03.010 --> 00:05:05.090
you just embed that into your RESTful method,

108
00:05:05.090 --> 00:05:07.040
and you are ready for it.

109
00:05:07.040 --> 00:05:11.000
So this entire thing, of getting the order's object,

110
00:05:11.000 --> 00:05:14.050
converting it into JSON, all of it was done

111
00:05:14.050 --> 00:05:17.090
by the JAX-RS service behind the scenes,

112
00:05:17.090 --> 00:05:20.080
using the JSON Binding API.

113
00:05:20.080 --> 00:05:23.040
That is how this goes, okay?

114
00:05:23.040 --> 00:05:25.090
In the next video, we'll add one more method,

115
00:05:25.090 --> 00:05:28.000
and then we'll check it out, how that looks like.

