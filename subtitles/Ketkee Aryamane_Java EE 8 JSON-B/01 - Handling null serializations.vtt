WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Instructor] Let's now look at the customized mapping

2
00:00:02.060 --> 00:00:05.090
option that we have for null serializations.

3
00:00:05.090 --> 00:00:08.020
By default the serialization of null

4
00:00:08.020 --> 00:00:09.040
values does not happen.

5
00:00:09.040 --> 00:00:12.000
So, if you have any property, which is set to null,

6
00:00:12.000 --> 00:00:14.060
JSON binding API is going to skip the

7
00:00:14.060 --> 00:00:16.070
serialization process for such things.

8
00:00:16.070 --> 00:00:19.020
The reason that it is done is that if you have too many

9
00:00:19.020 --> 00:00:22.000
properties with the null values, then the payload that

10
00:00:22.000 --> 00:00:24.010
you're trying to send across, which is the JSON

11
00:00:24.010 --> 00:00:27.040
representation, will unnecessarily grow a little longer,

12
00:00:27.040 --> 00:00:29.030
which is why null values are skipped.

13
00:00:29.030 --> 00:00:32.010
However, this may not be the intended behavior

14
00:00:32.010 --> 00:00:34.020
that you want for your application.

15
00:00:34.020 --> 00:00:37.000
So in cases where you want that the null values are

16
00:00:37.000 --> 00:00:39.080
also considered during the serialization process,

17
00:00:39.080 --> 00:00:43.030
we have certain ways around it to do the necessary mapping.

18
00:00:43.030 --> 00:00:44.080
So let's see how to do that.

19
00:00:44.080 --> 00:00:47.090
The first option is you have the JSONbNillable

20
00:00:47.090 --> 00:00:50.050
annotation, which you can attach on

21
00:00:50.050 --> 00:00:52.040
the class or the package in full level,

22
00:00:52.040 --> 00:00:55.090
and get all the properties that are null in that particular

23
00:00:55.090 --> 00:00:59.030
java object to be considered for serialization.

24
00:00:59.030 --> 00:01:02.000
So let's try this out, let's go back to the IDE.

25
00:01:02.000 --> 00:01:05.010
And let me open, let's see the product bin.

26
00:01:05.010 --> 00:01:08.040
And at the top of this class, I'm going

27
00:01:08.040 --> 00:01:13.040
to attach the JSONbNillable annotation.

28
00:01:13.040 --> 00:01:14.040
That's the thing to do.

29
00:01:14.040 --> 00:01:16.030
Now we write a test class and test this out.

30
00:01:16.030 --> 00:01:22.080
Let's hit new java class, Test Nillable,

31
00:01:22.080 --> 00:01:27.010
take the main method, now you'll get the empty JSONb

32
00:01:27.010 --> 00:01:31.060
which is the default engine instance.

33
00:01:31.060 --> 00:01:34.040
And let's hit

34
00:01:34.040 --> 00:01:38.020
JSONbBuilder, the business as usual that we do

35
00:01:38.020 --> 00:01:40.050
for all the demos, to get the builder

36
00:01:40.050 --> 00:01:44.000
and create that empty instance first.

37
00:01:44.000 --> 00:01:46.040
And then let's make a product object quickly,

38
00:01:46.040 --> 00:01:50.080
I'll say product, data reference, and say new product.

39
00:01:50.080 --> 00:01:54.010
So what I'll do is I will just make an empty object.

40
00:01:54.010 --> 00:01:55.030
Now if you go the the product bin, let's

41
00:01:55.030 --> 00:01:57.060
just drive us to the product bin,

42
00:01:57.060 --> 00:01:58.070
and you have a lot of things there.

43
00:01:58.070 --> 00:02:02.060
You have ID, name, manufacturer, shipping company, price.

44
00:02:02.060 --> 00:02:04.040
And then, in one of our earlier videos,

45
00:02:04.040 --> 00:02:06.010
we had also attached JSONbTransient.

46
00:02:06.010 --> 00:02:08.030
So momentarily for this demo, I'm just going to

47
00:02:08.030 --> 00:02:10.040
come and out this JSONbTransient

48
00:02:10.040 --> 00:02:12.010
annotation, we don't need that.

49
00:02:12.010 --> 00:02:13.090
Let's save this.

50
00:02:13.090 --> 00:02:16.060
So what we are trying to look at is we have int,

51
00:02:16.060 --> 00:02:18.070
then we have three Strings, and we have a double.

52
00:02:18.070 --> 00:02:21.040
Now the default values for int and double will be

53
00:02:21.040 --> 00:02:23.090
zero and zero point zero, respectively.

54
00:02:23.090 --> 00:02:25.070
But for the name, the manufacturer,

55
00:02:25.070 --> 00:02:28.070
and the shipping company, all of these will be null values.

56
00:02:28.070 --> 00:02:30.070
So let's see how the behavior is during

57
00:02:30.070 --> 00:02:33.040
serialization now that we have annotated

58
00:02:33.040 --> 00:02:35.050
this class with this annotation.

59
00:02:35.050 --> 00:02:38.070
So let's go to the test class,

60
00:02:38.070 --> 00:02:41.040
and let's hit sys out, and we'll just

61
00:02:41.040 --> 00:02:43.060
serialize that product object.

62
00:02:43.060 --> 00:02:46.060
We have to take the instance,

63
00:02:46.060 --> 00:02:50.060
and then say to JSON, and pass in the product object.

64
00:02:50.060 --> 00:02:51.050
And let's run this quickly and

65
00:02:51.050 --> 00:02:55.080
see for ourselves what happens.

66
00:02:55.080 --> 00:02:58.070
Yes, so now do you that see along with the ID

67
00:02:58.070 --> 00:03:02.040
and the price, which definitely have legal values,

68
00:03:02.040 --> 00:03:04.060
the rest of the null values also

69
00:03:04.060 --> 00:03:06.080
turned up in the JSON representation.

70
00:03:06.080 --> 00:03:08.060
So if you want this behavior, then you

71
00:03:08.060 --> 00:03:11.060
use the JSON B Nillable annotation.

72
00:03:11.060 --> 00:03:13.080
However if you do not use this,

73
00:03:13.080 --> 00:03:15.030
these null values will be skipped.

74
00:03:15.030 --> 00:03:16.090
So what I'm going to do is, I'm just

75
00:03:16.090 --> 00:03:20.010
going to go back to the product bin,

76
00:03:20.010 --> 00:03:22.040
and let's just comment out this annotation

77
00:03:22.040 --> 00:03:27.020
and then look at the default behavior for ourselves.

78
00:03:27.020 --> 00:03:29.050
Yes, so when you're not annotating it,

79
00:03:29.050 --> 00:03:31.030
then it's only going to consider those values

80
00:03:31.030 --> 00:03:35.040
which indeed have certain meaningful values, okay?

81
00:03:35.040 --> 00:03:36.090
So that's the first option, you either use

82
00:03:36.090 --> 00:03:38.060
JSON Nillable directly on the

83
00:03:38.060 --> 00:03:39.090
class, or there's another option.

84
00:03:39.090 --> 00:03:42.040
So you can also use JSON B property on a

85
00:03:42.040 --> 00:03:44.070
particular property and give it an extra

86
00:03:44.070 --> 00:03:47.030
parameter of nillable equal to true.

87
00:03:47.030 --> 00:03:49.070
Set this on the field, and only that property

88
00:03:49.070 --> 00:03:51.020
with the null value will be

89
00:03:51.020 --> 00:03:52.070
considered for serialization.

90
00:03:52.070 --> 00:03:53.070
So let's come back,

91
00:03:53.070 --> 00:03:57.080
and let's say for shipping company on line number 23,

92
00:03:57.080 --> 00:04:00.000
I'm going to say JSONbProperty,

93
00:04:00.000 --> 00:04:04.000
and set the nillable parameter to true.

94
00:04:04.000 --> 00:04:05.030
Now let's go back to the test class,

95
00:04:05.030 --> 00:04:06.080
and now let's give values.

96
00:04:06.080 --> 00:04:07.080
Let's give certain values.

97
00:04:07.080 --> 00:04:10.000
So I'm going to invoke the other parameter

98
00:04:10.000 --> 00:04:12.010
constructor that we have, which is this one.

99
00:04:12.010 --> 00:04:15.050
So let's say ID is 34, and name is ABC,

100
00:04:15.050 --> 00:04:17.020
any data that you wish to give,

101
00:04:17.020 --> 00:04:19.080
the prize twenty three dollars,

102
00:04:19.080 --> 00:04:24.090
then the manufacturer XYZ,

103
00:04:24.090 --> 00:04:28.060
and the shipping company will be null,

104
00:04:28.060 --> 00:04:30.050
that's what we want, okay?

105
00:04:30.050 --> 00:04:35.010
And now let's see how this behaves.

106
00:04:35.010 --> 00:04:37.040
Yes, so the shipping company, in spite of being null,

107
00:04:37.040 --> 00:04:40.010
is still considered for serialization because we

108
00:04:40.010 --> 00:04:42.000
went ahead and annotated their property

109
00:04:42.000 --> 00:04:44.020
with the JSONbProperty annotation

110
00:04:44.020 --> 00:04:46.090
setting the nillable equal to true, okay?

111
00:04:46.090 --> 00:04:49.000
So if you actually go ahead even set the

112
00:04:49.000 --> 00:04:52.010
other property as null, let's say I set this to null,

113
00:04:52.010 --> 00:04:54.030
and see whether that gets considered.

114
00:04:54.030 --> 00:04:58.040
So if run the file, and check the output, yeah.

115
00:04:58.040 --> 00:05:00.040
So you did not get any other null value

116
00:05:00.040 --> 00:05:02.000
which was considered for serialization

117
00:05:02.000 --> 00:05:04.000
but shipping company was, because we

118
00:05:04.000 --> 00:05:06.030
annotated it with the concern annotation.

119
00:05:06.030 --> 00:05:09.000
So that's the other option that you have.

120
00:05:09.000 --> 00:05:10.080
And of course, when you have annotations they are the

121
00:05:10.080 --> 00:05:12.070
comprised customizations that you can do.

122
00:05:12.070 --> 00:05:14.080
But there is an option for the run time customization

123
00:05:14.080 --> 00:05:18.000
as well with the JSONbConfig object,

124
00:05:18.000 --> 00:05:20.040
on it there's an API with null values.

125
00:05:20.040 --> 00:05:23.090
Set that to true, and you will get the same behavior.

126
00:05:23.090 --> 00:05:27.070
So if I go back, let's avoid trying to do this

127
00:05:27.070 --> 00:05:31.030
at the annotation level as I'm going to comment this out.

128
00:05:31.030 --> 00:05:36.040
And what we'll do is we'll go to the object mapper.

129
00:05:36.040 --> 00:05:39.070
And down there on line 31, I'm just going to

130
00:05:39.070 --> 00:05:41.070
comment line 31 because we don't need the

131
00:05:41.070 --> 00:05:44.060
property visibility strategy to be tested right now.

132
00:05:44.060 --> 00:05:47.050
So on line number 33, I'm going to put a comment first.

133
00:05:47.050 --> 00:05:52.010
So this is for property nillable, okay?

134
00:05:52.010 --> 00:05:53.030
And what are we going to do, we are going to take

135
00:05:53.030 --> 00:05:55.060
the config object, and it has

136
00:05:55.060 --> 00:05:58.080
got an API with null values.

137
00:05:58.080 --> 00:06:01.040
So set this to true.

138
00:06:01.040 --> 00:06:02.030
Alight?

139
00:06:02.030 --> 00:06:06.040
And let's just come back to the test and get that

140
00:06:06.040 --> 00:06:08.090
config object on line number 19 first.

141
00:06:08.090 --> 00:06:16.000
It has to be fetched from the object mapper,

142
00:06:16.000 --> 00:06:18.040
invoke the meta which will get you the config object,

143
00:06:18.040 --> 00:06:21.040
and then let's run this.

144
00:06:21.040 --> 00:06:22.030
Yeah?

145
00:06:22.030 --> 00:06:23.070
So you still see that you're getting the

146
00:06:23.070 --> 00:06:24.080
shipping company and the name,

147
00:06:24.080 --> 00:06:26.060
so whatever values were set null,

148
00:06:26.060 --> 00:06:29.030
are yes, they are considered during the serialization

149
00:06:29.030 --> 00:06:32.000
even with the run time customization option.

150
00:06:32.000 --> 00:06:33.070
So that's how you can handle your

151
00:06:33.070 --> 00:06:36.000
null values in your application.

