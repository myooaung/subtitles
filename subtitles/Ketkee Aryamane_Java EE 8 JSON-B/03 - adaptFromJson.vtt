WEBVTT
1
00:00:00.050 --> 00:00:01.090
- [Instructor] So now lets take a look at

2
00:00:01.090 --> 00:00:03.080
the other method that we wanted to implement,

3
00:00:03.080 --> 00:00:05.020
which is adaptFromJson.

4
00:00:05.020 --> 00:00:06.090
We've already provided the logic for

5
00:00:06.090 --> 00:00:11.010
trying to serialize and now we'll try to de-serialize.

6
00:00:11.010 --> 00:00:13.000
We need to write a logic for that, too.

7
00:00:13.000 --> 00:00:17.090
Let's first get rid of the default implementation.

8
00:00:17.090 --> 00:00:19.020
What we are going to do is

9
00:00:19.020 --> 00:00:25.040
we're going to first create a customer object.

10
00:00:25.040 --> 00:00:28.090
Once that's done, then we will get hold of

11
00:00:28.090 --> 00:00:33.000
the customer object and say setCustomerId.

12
00:00:33.000 --> 00:00:35.000
How are we going to get this customer ID?

13
00:00:35.000 --> 00:00:38.080
We have to take this adapted object parameter.

14
00:00:38.080 --> 00:00:43.050
So that's adptd.getInt

15
00:00:43.050 --> 00:00:46.040
because customer ID in our case is an integer field.

16
00:00:46.040 --> 00:00:48.020
So we just have to make sure that we parse

17
00:00:48.020 --> 00:00:50.030
the key that we had given for serialization.

18
00:00:50.030 --> 00:00:54.040
That, we'll get from here, which is customerId.

19
00:00:54.040 --> 00:01:00.020
Let's copy from line 26 and paste it on line 38.

20
00:01:00.020 --> 00:01:03.000
Then what we have to also do is

21
00:01:03.000 --> 00:01:06.070
we have to check whether the incoming Prime user,

22
00:01:06.070 --> 00:01:09.070
the isPrimeUser field, is a regular user

23
00:01:09.070 --> 00:01:11.020
or it is a Prime user.

24
00:01:11.020 --> 00:01:13.030
If it is a regular user, then we'll have to set

25
00:01:13.030 --> 00:01:17.030
the isPrimeUser boolean variable to false.

26
00:01:17.030 --> 00:01:19.060
And if it's a Prime user, then we'll have to set

27
00:01:19.060 --> 00:01:22.080
the isPrimeUser variable of our customer object

28
00:01:22.080 --> 00:01:23.080
to a true value.

29
00:01:23.080 --> 00:01:25.090
So let's write that logic quickly.

30
00:01:25.090 --> 00:01:27.060
I'm going to come on line 39 and say

31
00:01:27.060 --> 00:01:31.010
if the adapted version of the object,

32
00:01:31.010 --> 00:01:38.000
the JSON object, .getString, and the key.

33
00:01:38.000 --> 00:01:39.090
Let's take the key from line number 29.

34
00:01:39.090 --> 00:01:42.090
That's the key we had given during serialization.

35
00:01:42.090 --> 00:01:46.020
So we say this and then we compare it,

36
00:01:46.020 --> 00:01:51.060
so we say equals Prime user.

37
00:01:51.060 --> 00:01:52.070
Let's also copy the string, too.

38
00:01:52.070 --> 00:01:54.080
We do not want to make any kind of spelling mistakes,

39
00:01:54.080 --> 00:01:56.040
so let's copy that from line 26

40
00:01:56.040 --> 00:01:59.020
and paste it on line 39.

41
00:01:59.020 --> 00:02:01.060
If it is a Prime user, then we're going to say

42
00:02:01.060 --> 00:02:08.080
customer.setIsPrimeUser to true.

43
00:02:08.080 --> 00:02:10.060
Else, we'll do the other way around.

44
00:02:10.060 --> 00:02:13.040
Else is a regular user, so let's go ahead and say

45
00:02:13.040 --> 00:02:21.010
customer.setIsPrimeUser to false.

46
00:02:21.010 --> 00:02:23.010
Once we are done with everything, we just have to

47
00:02:23.010 --> 00:02:26.090
return that customer object back from this method.

48
00:02:26.090 --> 00:02:29.020
We have done the serialization

49
00:02:29.020 --> 00:02:31.060
and the de-serialization logic by

50
00:02:31.060 --> 00:02:35.080
the adaptToJson and adaptFromJson methods.

51
00:02:35.080 --> 00:02:37.090
Now we need to test this scenario out.

52
00:02:37.090 --> 00:02:41.000
What we can do is,

53
00:02:41.000 --> 00:02:44.020
let's go back to the object mapper.

54
00:02:44.020 --> 00:02:48.020
Let's get rid of the unwanted imports.

55
00:02:48.020 --> 00:02:49.090
Let's come down there on line 42.

56
00:02:49.090 --> 00:02:51.070
I'm going to comment out this line.

57
00:02:51.070 --> 00:02:54.080
And now I have to make sure that

58
00:02:54.080 --> 00:02:57.000
the adapter is in action.

59
00:02:57.000 --> 00:02:59.020
What you have to do for this is you have to take

60
00:02:59.020 --> 00:03:01.090
the instance of your adapter class and parse it to

61
00:03:01.090 --> 00:03:05.070
the JsonConfig.withAdapters API.

62
00:03:05.070 --> 00:03:07.070
Once you do that, then the adapter will be in action.

63
00:03:07.070 --> 00:03:10.090
So next time you try to serialize a customer object,

64
00:03:10.090 --> 00:03:13.000
then you're going to be able to do that with

65
00:03:13.000 --> 00:03:15.030
the help of the adapter by picking it up

66
00:03:15.030 --> 00:03:17.000
from the JsonConfig object.

67
00:03:17.000 --> 00:03:18.050
Let's work this out.

68
00:03:18.050 --> 00:03:23.020
Go to IDE and get the config object,

69
00:03:23.020 --> 00:03:27.070
and call this API called withAdapters.

70
00:03:27.070 --> 00:03:29.040
And then you're going to provide an instance of

71
00:03:29.040 --> 00:03:31.020
the adapter that you wrote a while ago.

72
00:03:31.020 --> 00:03:32.050
So that's the customer adapters.

73
00:03:32.050 --> 00:03:36.070
I'm just going to say new CustomerAdapter.

74
00:03:36.070 --> 00:03:38.020
Okay, that's nice.

75
00:03:38.020 --> 00:03:40.010
Now let's go ahead and make a test class

76
00:03:40.010 --> 00:03:46.090
and let's call it TestCustomAdapters.

77
00:03:46.090 --> 00:03:51.050
Make sure that we spelled everything right.

78
00:03:51.050 --> 00:03:54.030
Let's grab the main method.

79
00:03:54.030 --> 00:03:57.080
Let's make an empty Jsonb instance.

80
00:03:57.080 --> 00:04:01.010
But since we have mentioned something custom

81
00:04:01.010 --> 00:04:03.000
in the code for this demo, we will have to get

82
00:04:03.000 --> 00:04:05.020
that config object from the object mapper.

83
00:04:05.020 --> 00:04:08.070
So I'm going to say JsonbBuilder.create,

84
00:04:08.070 --> 00:04:10.060
use the overloaded version,

85
00:04:10.060 --> 00:04:15.090
and get that object from the object mapper.

86
00:04:15.090 --> 00:04:17.040
So now the JSON config that has been

87
00:04:17.040 --> 00:04:19.050
returned by this call contains my

88
00:04:19.050 --> 00:04:21.080
customized adapter that is in action.

89
00:04:21.080 --> 00:04:24.070
So now when I try to make a customer object ...

90
00:04:24.070 --> 00:04:30.020
Let's say customer = new Customer.

91
00:04:30.020 --> 00:04:31.030
Let's give all the fields.

92
00:04:31.030 --> 00:04:35.000
Let's say 123 maybe,

93
00:04:35.000 --> 00:04:39.000
jsonbtester,

94
00:04:39.000 --> 00:04:44.010
email address, jsonbtester@gmail.com,

95
00:04:44.010 --> 00:04:47.020
and let's keep this as a Prime user.

96
00:04:47.020 --> 00:04:50.010
And then on the console,

97
00:04:50.010 --> 00:04:51.030
what you're going to do is you're going to take

98
00:04:51.030 --> 00:04:55.020
the Jsonb instance and say

99
00:04:55.020 --> 00:04:59.030
.toJson and then parse in the customer object.

100
00:04:59.030 --> 00:05:00.080
What is going to happen is,

101
00:05:00.080 --> 00:05:02.040
since we have taken the config object,

102
00:05:02.040 --> 00:05:05.020
the config object has got the custom adapter

103
00:05:05.020 --> 00:05:08.000
set to it, that config object has been used to

104
00:05:08.000 --> 00:05:10.030
create the Jsonb engine instance.

105
00:05:10.030 --> 00:05:12.010
And to that, we're trying to parse

106
00:05:12.010 --> 00:05:14.050
the customer object for serialization.

107
00:05:14.050 --> 00:05:15.060
That is definitely going to be done

108
00:05:15.060 --> 00:05:17.060
through the toJson API.

109
00:05:17.060 --> 00:05:19.070
So now let's test this out.

110
00:05:19.070 --> 00:05:22.050
Let's run this.

111
00:05:22.050 --> 00:05:23.090
Yes, do you see?

112
00:05:23.090 --> 00:05:25.090
Now we get only the customer ID

113
00:05:25.090 --> 00:05:28.070
and the isPrimeUser, and that is the serialized output

114
00:05:28.070 --> 00:05:30.030
that possibly needs to be transmitted

115
00:05:30.030 --> 00:05:31.080
to some other system.

116
00:05:31.080 --> 00:05:33.060
That's how it looks.

117
00:05:33.060 --> 00:05:34.090
We'll also test the other way now.

118
00:05:34.090 --> 00:05:36.080
Let's go ahead and instead of printing it out,

119
00:05:36.080 --> 00:05:38.050
let's take it in a string variable.

120
00:05:38.050 --> 00:05:44.060
I'm just going to copy the actual call in line 24,

121
00:05:44.060 --> 00:05:49.060
get rid of this, and say string result equal to this.

122
00:05:49.060 --> 00:05:51.080
On the next line, let's print that out

123
00:05:51.080 --> 00:05:55.040
just for our reference.

124
00:05:55.040 --> 00:05:57.020
And now let's do the other way around.

125
00:05:57.020 --> 00:05:59.080
Let's also make use of the adaptFromJson

126
00:05:59.080 --> 00:06:01.090
from the adapter class that we wrote.

127
00:06:01.090 --> 00:06:03.060
So how are we going to do that?

128
00:06:03.060 --> 00:06:05.090
Same thing; the process of serialization

129
00:06:05.090 --> 00:06:08.020
and de-serialization is not going to change.

130
00:06:08.020 --> 00:06:10.060
We're still going to call the toJson

131
00:06:10.060 --> 00:06:12.030
and the fromJson APIs.

132
00:06:12.030 --> 00:06:14.000
What we have changed right now is

133
00:06:14.000 --> 00:06:16.090
what exactly is going to happen in the serialization.

134
00:06:16.090 --> 00:06:20.000
That is the logic that we provided.

135
00:06:20.000 --> 00:06:22.000
So let's take the same instance, jsonb,

136
00:06:22.000 --> 00:06:25.020
and say fromJson, parse that string that

137
00:06:25.020 --> 00:06:26.070
we collected just now,

138
00:06:26.070 --> 00:06:30.060
and of course the type is Customer.class.

139
00:06:30.060 --> 00:06:36.000
Take this entire thing and then sys out on the console.

140
00:06:36.000 --> 00:06:40.080
Let's see what happens.

141
00:06:40.080 --> 00:06:41.080
So that's what it is.

142
00:06:41.080 --> 00:06:44.040
We had only the Prime user field

143
00:06:44.040 --> 00:06:47.020
and the customer ID, and when we de-serialized,

144
00:06:47.020 --> 00:06:49.040
we have the customer ID back.

145
00:06:49.040 --> 00:06:53.040
And this time we have the boolean value correctly set.

146
00:06:53.040 --> 00:06:55.020
When you serialize it, you actually give away

147
00:06:55.020 --> 00:06:56.070
a string instead of a boolean value

148
00:06:56.070 --> 00:06:58.090
because the system didn't want a true or a false,

149
00:06:58.090 --> 00:07:02.010
it wanted these labels; Prime user or regular user.

150
00:07:02.010 --> 00:07:04.050
Now when you de-serialize, you are back to your

151
00:07:04.050 --> 00:07:07.070
original data types and you get the true value

152
00:07:07.070 --> 00:07:09.070
in the isPrimeUser field.

153
00:07:09.070 --> 00:07:11.050
Any of this kind of customization that

154
00:07:11.050 --> 00:07:13.070
you may want to do where you do not have access

155
00:07:13.070 --> 00:07:15.050
either to the actual objects,

156
00:07:15.050 --> 00:07:17.070
or maybe your requirements are not met

157
00:07:17.070 --> 00:07:20.030
with the compile time or runtime customization

158
00:07:20.030 --> 00:07:22.080
that JSON binding provides, then you can go ahead,

159
00:07:22.080 --> 00:07:24.050
write an adapter class like this

160
00:07:24.050 --> 00:07:27.030
and put it in the Jsonb config object cited,

161
00:07:27.030 --> 00:07:28.040
and then use that config object

162
00:07:28.040 --> 00:07:31.070
for serializing and de-serializing.

163
00:07:31.070 --> 00:07:34.000
And of course the last thing that you have to note is

164
00:07:34.000 --> 00:07:36.010
you could have also done this using

165
00:07:36.010 --> 00:07:38.050
the Jsonb-type adapter annotation.

166
00:07:38.050 --> 00:07:40.080
It will surely be okay for you to actually attach

167
00:07:40.080 --> 00:07:43.020
this annotation on your customer bean

168
00:07:43.020 --> 00:07:46.030
so that the customer object is going to be

169
00:07:46.030 --> 00:07:49.050
serialized and de-serialized using that adapter

170
00:07:49.050 --> 00:07:54.010
instead of the default one that JSON binding provides.

171
00:07:54.010 --> 00:07:57.010
So that is it about the adapters demo.

172
00:07:57.010 --> 00:07:59.020
In the next video, we're going to talk about

173
00:07:59.020 --> 00:08:02.000
the serializers and the de-serializers.

