WEBVTT
1
00:00:00.050 --> 00:00:02.050
- [Instructor] Lets start looking at the customized options

2
00:00:02.050 --> 00:00:05.020
that we have from the API, one by one.

3
00:00:05.020 --> 00:00:07.090
The first one among them is formatting output,

4
00:00:07.090 --> 00:00:10.090
and it definitely must have been a sense of relief

5
00:00:10.090 --> 00:00:12.060
the moment you read this title,

6
00:00:12.060 --> 00:00:14.010
because in one of the previous demos,

7
00:00:14.010 --> 00:00:16.010
we actually had that serialized Json,

8
00:00:16.010 --> 00:00:18.000
which was one long straight line,

9
00:00:18.000 --> 00:00:20.000
and then you were not able to read it correctly.

10
00:00:20.000 --> 00:00:23.010
So, yes, using customized mapping, you have a way

11
00:00:23.010 --> 00:00:24.070
to format your output.

12
00:00:24.070 --> 00:00:25.090
So how do you do that?

13
00:00:25.090 --> 00:00:28.090
That can be done by the JsonbConfig object,

14
00:00:28.090 --> 00:00:31.080
which means it is a runtime configuration, right,

15
00:00:31.080 --> 00:00:34.030
so lets understand how to write this out.

16
00:00:34.030 --> 00:00:36.050
Lets go to IDE, and I'm going to create

17
00:00:36.050 --> 00:00:45.000
a source package here, com.app.mappers,

18
00:00:45.000 --> 00:00:47.050
and here, I'm going to write a Class,

19
00:00:47.050 --> 00:00:53.090
which is ObjectMapper, and I write a method inside it,

20
00:00:53.090 --> 00:01:00.060
which is public, and it returns JsonbConfig, okay,

21
00:01:00.060 --> 00:01:07.000
and what does that say, getObjectMapper().

22
00:01:07.000 --> 00:01:10.020
So here I'm going to create a JsonbConfig object,

23
00:01:10.020 --> 00:01:14.040
like that, by just instantiating it,

24
00:01:14.040 --> 00:01:18.080
and this is the classes, getObjectMapper method

25
00:01:18.080 --> 00:01:21.080
inside which, we are going to have the jsonbConfig object

26
00:01:21.080 --> 00:01:25.010
ready with us, and all kinds of runtime customizations

27
00:01:25.010 --> 00:01:27.090
that you want to apply, we set them right here,

28
00:01:27.090 --> 00:01:29.060
and in every other test class

29
00:01:29.060 --> 00:01:31.090
where you may want to apply the customization,

30
00:01:31.090 --> 00:01:34.070
you can just fetch this JsonbConfig object

31
00:01:34.070 --> 00:01:36.020
through this method, right,

32
00:01:36.020 --> 00:01:37.050
so we'll not keep writing this object

33
00:01:37.050 --> 00:01:39.090
in every other test class, we have one central class

34
00:01:39.090 --> 00:01:42.030
where we write out that object, configure everything

35
00:01:42.030 --> 00:01:43.090
that you want to do, and then go ahead

36
00:01:43.090 --> 00:01:45.060
and apply to the test classes.

37
00:01:45.060 --> 00:01:48.070
So this is for the short customizations that we want to do,

38
00:01:48.070 --> 00:01:51.010
but when we get to adapters and serializers,

39
00:01:51.010 --> 00:01:53.010
then we'll have to write it in their own classes.

40
00:01:53.010 --> 00:01:54.000
So we'll look at that later,

41
00:01:54.000 --> 00:01:55.070
don't worry about that right now.

42
00:01:55.070 --> 00:01:58.020
Right now you're looking at this JsonbConfig object,

43
00:01:58.020 --> 00:02:01.030
which will allow you to store runtime customizations,

44
00:02:01.030 --> 00:02:03.060
and on this, you have a method,

45
00:02:03.060 --> 00:02:07.020
which is called withformatting,

46
00:02:07.020 --> 00:02:12.070
and I'm gonna set that to TRUE.

47
00:02:12.070 --> 00:02:15.070
Okay, once you do this, you just have to

48
00:02:15.070 --> 00:02:21.040
return that config object, that's all.

49
00:02:21.040 --> 00:02:23.060
Okay, so now lets go ahead and clear the New Class

50
00:02:23.060 --> 00:02:27.040
under the Tests folder, and say TestFormatting.

51
00:02:27.040 --> 00:02:30.070
So now we're going to test out that runtime customization

52
00:02:30.070 --> 00:02:34.050
that we are talking about.

53
00:02:34.050 --> 00:02:39.000
Okay, and how do you make sure

54
00:02:39.000 --> 00:02:42.060
that now the JsonbConfig object is available

55
00:02:42.060 --> 00:02:45.050
with you when you serialize or de-serialize?

56
00:02:45.050 --> 00:02:46.060
So what we're to do is,

57
00:02:46.060 --> 00:02:49.090
when you clear that jsonb default instance,

58
00:02:49.090 --> 00:02:58.030
which is that engine, like that, using the Builder object,

59
00:02:58.030 --> 00:03:00.080
you can call the create API method,

60
00:03:00.080 --> 00:03:03.070
and this create API comes with an overloaded version,

61
00:03:03.070 --> 00:03:06.070
do you see that, which demands a JsonbConfig object,

62
00:03:06.070 --> 00:03:08.050
so we're going to take that object

63
00:03:08.050 --> 00:03:11.010
and we are going to obtain that object

64
00:03:11.010 --> 00:03:12.050
by the ObjectMapper class,

65
00:03:12.050 --> 00:03:18.020
so I'm just going to say, ObjectMapper,

66
00:03:18.020 --> 00:03:22.050
and lets also do one more thing, lets make this static

67
00:03:22.050 --> 00:03:24.050
so we can quickly call it on the class name

68
00:03:24.050 --> 00:03:26.040
instead of instance.

69
00:03:26.040 --> 00:03:29.000
Okay, so on line number 16, on the ObjectMapper class,

70
00:03:29.000 --> 00:03:31.040
I just went and changed the method signature

71
00:03:31.040 --> 00:03:33.040
and I added the static keyword to it.

72
00:03:33.040 --> 00:03:34.080
Lets go back to TestFormatting,

73
00:03:34.080 --> 00:03:38.080
and then say getObjectMapper.

74
00:03:38.080 --> 00:03:42.010
So this is how you will create a jsonb instance now,

75
00:03:42.010 --> 00:03:46.030
when you want the runtime customizations to apply.

76
00:03:46.030 --> 00:03:48.010
The runtime customizations are stored

77
00:03:48.010 --> 00:03:50.070
in the JsonbConfig object, and that's what you're passing

78
00:03:50.070 --> 00:03:52.080
to the overload data create API,

79
00:03:52.080 --> 00:03:56.060
and now getting the jsonb instance like that, okay?

80
00:03:56.060 --> 00:03:58.080
So now, lets go ahead and do one thing,

81
00:03:58.080 --> 00:04:01.040
lets get that Order object from our DataGenerator class,

82
00:04:01.040 --> 00:04:10.010
we already have that with us, DataGenerator.getData,

83
00:04:10.010 --> 00:04:15.020
okay, and we'll now take this jsonb instance

84
00:04:15.020 --> 00:04:19.060
and say tojson, and then pass that order,

85
00:04:19.060 --> 00:04:25.040
and what we also do is, we'll sys out this (mumbles),

86
00:04:25.040 --> 00:04:30.080
so lets state this, put it under the sys out statement.

87
00:04:30.080 --> 00:04:35.030
Okay, now lets run this and see.

88
00:04:35.030 --> 00:04:38.000
Oh, yeah, yeah, yeah, do you see something?

89
00:04:38.000 --> 00:04:40.050
Now do you see your formatted output.

90
00:04:40.050 --> 00:04:43.060
In all our previous demos, output was a simple long line

91
00:04:43.060 --> 00:04:45.030
when we saw the json serialization,

92
00:04:45.030 --> 00:04:48.030
but now, no more, you can do that customization,

93
00:04:48.030 --> 00:04:50.020
and it'll give you the formatted output

94
00:04:50.020 --> 00:04:53.070
the way we used to see on jsonlint.com.

95
00:04:53.070 --> 00:04:55.050
I hope you recollect that example

96
00:04:55.050 --> 00:04:57.050
when we actually took the entire string,

97
00:04:57.050 --> 00:04:59.040
and went on to jsonlint.com

98
00:04:59.040 --> 00:05:02.000
to find out how the formatting looks like, and then read it,

99
00:05:02.000 --> 00:05:05.010
but now, you can do it right here on your console

100
00:05:05.010 --> 00:05:07.070
using that runtime customization.

101
00:05:07.070 --> 00:05:13.020
So, the withFormatting API of the JsonbConfig object

102
00:05:13.020 --> 00:05:16.090
allows you to make sure that the formatting is applied

103
00:05:16.090 --> 00:05:21.000
when it tries to serialize any of your Java objects.

