WEBVTT
1
00:00:00.050 --> 00:00:01.070
- [Instructor] Now that we've seen all

2
00:00:01.070 --> 00:00:04.070
the default and the customized settings that you can do

3
00:00:04.070 --> 00:00:07.070
for mapping your Java to JSON and JSON to Java,

4
00:00:07.070 --> 00:00:10.080
let's look at another topic which is JSON-B Adapters

5
00:00:10.080 --> 00:00:13.010
and JSON-B serializers.

6
00:00:13.010 --> 00:00:15.040
We'll talk about serializers in the upcoming videos,

7
00:00:15.040 --> 00:00:19.020
but let's first understand the need for JSON-B adapters.

8
00:00:19.020 --> 00:00:22.000
So now that we've seen so many annotations

9
00:00:22.000 --> 00:00:23.080
and then we have seen so many settings

10
00:00:23.080 --> 00:00:27.010
on the JSON-B config object that is runtime customization,

11
00:00:27.010 --> 00:00:30.050
sometimes all of this is not enough.

12
00:00:30.050 --> 00:00:32.070
Whatever kind of custom mapping you are trying to do

13
00:00:32.070 --> 00:00:35.060
for your application may not be completely possible

14
00:00:35.060 --> 00:00:38.020
with either the compile line, that is annotations,

15
00:00:38.020 --> 00:00:42.050
or the runtime, which is the JSON-B config settings.

16
00:00:42.050 --> 00:00:44.080
So in that case, we need something more,

17
00:00:44.080 --> 00:00:47.080
and that's why we have a JSON-B adapter.

18
00:00:47.080 --> 00:00:49.070
There's also another situation where let's say you're

19
00:00:49.070 --> 00:00:52.000
trying to access some third-party libraries.

20
00:00:52.000 --> 00:00:54.010
You have certain source code that you do not have

21
00:00:54.010 --> 00:00:54.090
an access to.

22
00:00:54.090 --> 00:00:57.010
Maybe you're trying to integrate with some other application

23
00:00:57.010 --> 00:00:58.050
and it has got their source code,

24
00:00:58.050 --> 00:01:01.020
and you do not have an access to it at all.

25
00:01:01.020 --> 00:01:03.030
Moreover there are certain classes which don't even

26
00:01:03.030 --> 00:01:05.060
have a default constructor at times.

27
00:01:05.060 --> 00:01:06.070
So then there in that process

28
00:01:06.070 --> 00:01:09.060
of serialization deserialization becomes an issue,

29
00:01:09.060 --> 00:01:12.020
and in that case you will have to then write down

30
00:01:12.020 --> 00:01:14.070
your own JSON-B adapter to satisfy

31
00:01:14.070 --> 00:01:18.040
those very specific requirements that you have.

32
00:01:18.040 --> 00:01:21.080
So, what are JSON-B adapters?

33
00:01:21.080 --> 00:01:25.030
They are basically the custom classes that you'll write

34
00:01:25.030 --> 00:01:27.040
in order to write out that specific code

35
00:01:27.040 --> 00:01:29.090
for serialization or deserialization.

36
00:01:29.090 --> 00:01:32.090
So basically, you're going to write a class which implements

37
00:01:32.090 --> 00:01:38.050
javax.json.bind.adapter.JsonbAdapter interface.

38
00:01:38.050 --> 00:01:40.080
And it gives you a couple of methods to implement:

39
00:01:40.080 --> 00:01:44.050
adaptToJson and adaptFromJson.

40
00:01:44.050 --> 00:01:47.000
So you have these methods in which you can write your own

41
00:01:47.000 --> 00:01:50.010
customization code to serialize and deserialize

42
00:01:50.010 --> 00:01:52.080
the objects that you have.

43
00:01:52.080 --> 00:01:55.090
Okay, so we're going to do a small demo for JSON-B adapters.

44
00:01:55.090 --> 00:01:58.060
What is the use case, we have the customer bean

45
00:01:58.060 --> 00:01:59.060
that we have already seen in

46
00:01:59.060 --> 00:02:01.070
all of our previous demos, right?

47
00:02:01.070 --> 00:02:06.030
In that, there is one feed which is called isPrimerUser.

48
00:02:06.030 --> 00:02:08.050
So if you want to recollect quickly let's go to

49
00:02:08.050 --> 00:02:11.050
the customer bean and let's take a look at that feed.

50
00:02:11.050 --> 00:02:13.000
Yes, there it is.

51
00:02:13.000 --> 00:02:15.010
On line number 20, you have a feed

52
00:02:15.010 --> 00:02:17.010
which is called isPrimeUser.

53
00:02:17.010 --> 00:02:18.060
And what I want to do is,

54
00:02:18.060 --> 00:02:21.070
there's a use case in my application where I want

55
00:02:21.070 --> 00:02:27.000
to send only two things or two feeds about the customer.

56
00:02:27.000 --> 00:02:29.000
One, is the customer ID and

57
00:02:29.000 --> 00:02:32.050
the other is the isPrimeUser feed.

58
00:02:32.050 --> 00:02:37.000
Now I do not have a facility in my annotations way

59
00:02:37.000 --> 00:02:39.070
or in my JSON config way in order to send out

60
00:02:39.070 --> 00:02:42.050
only specific feeds during serialization.

61
00:02:42.050 --> 00:02:44.080
So out of all the feeds that the customer has,

62
00:02:44.080 --> 00:02:47.010
I need to send out only the customer ID

63
00:02:47.010 --> 00:02:50.010
and the isPrimeUser feed for serialization.

64
00:02:50.010 --> 00:02:51.050
And when I get the object back,

65
00:02:51.050 --> 00:02:54.000
I want to deserialize it pretty much the same way.

66
00:02:54.000 --> 00:02:55.050
So for this requirement,

67
00:02:55.050 --> 00:02:57.090
we're going to write a JSON-B adapter class.

68
00:02:57.090 --> 00:03:00.000
So we'll look at the demo in the next video.

