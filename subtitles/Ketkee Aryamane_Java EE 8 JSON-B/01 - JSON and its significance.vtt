WEBVTT
1
00:00:00.050 --> 00:00:01.030
- [Instructor] This course

2
00:00:01.030 --> 00:00:04.030
is going to talk about JSON binding API.

3
00:00:04.030 --> 00:00:06.090
But before that, let's understand what JSON is

4
00:00:06.090 --> 00:00:09.080
and what is its significance.

5
00:00:09.080 --> 00:00:12.070
JSON stands for JavaScript Object Notation.

6
00:00:12.070 --> 00:00:13.060
And what is it?

7
00:00:13.060 --> 00:00:18.060
It is a simple structured text format for data interchange,

8
00:00:18.060 --> 00:00:22.000
exchange of data between two different systems.

9
00:00:22.000 --> 00:00:24.080
And it is programming language independent.

10
00:00:24.080 --> 00:00:27.020
And you'll understand why that's required.

11
00:00:27.020 --> 00:00:29.030
It's, of course, derived out of JavaScript,

12
00:00:29.030 --> 00:00:30.090
it is a subset of JavaScript.

13
00:00:30.090 --> 00:00:32.000
However, for this course,

14
00:00:32.000 --> 00:00:34.000
we are going to talk about how do deal with JSON

15
00:00:34.000 --> 00:00:37.020
with the Java platform using the JSON binding API.

16
00:00:37.020 --> 00:00:38.010
So don't worry to much

17
00:00:38.010 --> 00:00:39.090
if you do not have to sound a knowledge

18
00:00:39.090 --> 00:00:43.000
of JavaScript right now, it's okay.

19
00:00:43.000 --> 00:00:45.060
Douglas Crockford came up with the idea of JSON

20
00:00:45.060 --> 00:00:47.040
and when it actually came into existence,

21
00:00:47.040 --> 00:00:51.080
that was used as a format for data to pass in and out

22
00:00:51.080 --> 00:00:53.020
of a web service.

23
00:00:53.020 --> 00:00:56.040
But today it is pretty much an international standard.

24
00:00:56.040 --> 00:00:58.030
If you look at all the JavaScript frameworks like

25
00:00:58.030 --> 00:01:01.080
Node.js, React, Angular, or no sequal databases like

26
00:01:01.080 --> 00:01:04.060
MongoDB or messaging frameworks like Kafka,

27
00:01:04.060 --> 00:01:09.000
all of them extensively make use of JSON today.

28
00:01:09.000 --> 00:01:11.040
So now let's understand why we need JSON.

29
00:01:11.040 --> 00:01:14.070
Let's look at this two tier architecture of an application.

30
00:01:14.070 --> 00:01:17.030
I have a database here and that RESTful API

31
00:01:17.030 --> 00:01:19.020
is talking to the database.

32
00:01:19.020 --> 00:01:22.000
This API may be built on a .net platform using

33
00:01:22.000 --> 00:01:24.060
the ASP.net MVC API's.

34
00:01:24.060 --> 00:01:27.070
And then when the RESTful API churns out data,

35
00:01:27.070 --> 00:01:30.000
it will display it on the Java server page,

36
00:01:30.000 --> 00:01:33.000
which come a under the Java enterprise umbrella.

37
00:01:33.000 --> 00:01:34.090
Both of these are different systems.

38
00:01:34.090 --> 00:01:36.030
Java and .net,

39
00:01:36.030 --> 00:01:39.050
but in spite of that, they are talking together.

40
00:01:39.050 --> 00:01:41.070
Let's see how a 3D architecture looks like,

41
00:01:41.070 --> 00:01:45.000
you have a RESTful API communicating with the database,

42
00:01:45.000 --> 00:01:47.090
then you have a set of middleware API's let's say,

43
00:01:47.090 --> 00:01:50.060
which is written out in Python libraries,

44
00:01:50.060 --> 00:01:51.090
and then both of these systems

45
00:01:51.090 --> 00:01:53.030
lets say have to work together

46
00:01:53.030 --> 00:01:56.090
in order to display the data on the front end,

47
00:01:56.090 --> 00:01:58.040
which is the user interface,

48
00:01:58.040 --> 00:02:00.010
and that is backed up by a Java

49
00:02:00.010 --> 00:02:03.060
or maybe a Java enterprise framework like Spring Mvc,

50
00:02:03.060 --> 00:02:06.040
JSF strat, et cetera.

51
00:02:06.040 --> 00:02:08.010
Now in both of these architectures,

52
00:02:08.010 --> 00:02:09.080
do you understand that all of these blocks

53
00:02:09.080 --> 00:02:12.010
have to work together in harmony.

54
00:02:12.010 --> 00:02:14.080
They have to collaborate, they have to communicate,

55
00:02:14.080 --> 00:02:18.020
so that they ultimately go and render the application

56
00:02:18.020 --> 00:02:20.000
to the end customers.

57
00:02:20.000 --> 00:02:22.050
Now each of these blocks, or each of these languages,

58
00:02:22.050 --> 00:02:24.000
or each of these platforms,

59
00:02:24.000 --> 00:02:25.080
has got a different way of working.

60
00:02:25.080 --> 00:02:28.010
Their own environment, semantics,

61
00:02:28.010 --> 00:02:30.080
their ways of storing data, everything is different.

62
00:02:30.080 --> 00:02:33.050
But at the end of the day, yes they have to communicate

63
00:02:33.050 --> 00:02:36.020
in order to satisfy the requirements of the customer.

64
00:02:36.020 --> 00:02:39.060
Which means they need a format of data exchange.

65
00:02:39.060 --> 00:02:42.010
Which each of these systems will understand.

66
00:02:42.010 --> 00:02:44.010
Each one of them will be able to pass it,

67
00:02:44.010 --> 00:02:46.040
and then can word it into their own objects

68
00:02:46.040 --> 00:02:48.040
inside for further processing.

69
00:02:48.040 --> 00:02:50.080
That's exactly why we need JSON.

70
00:02:50.080 --> 00:02:53.060
JSON is that kind of a format which will be used

71
00:02:53.060 --> 00:02:57.020
to exchange data between these heterogeneous systems

72
00:02:57.020 --> 00:03:00.090
so that the end application is rendered to the customer.

73
00:03:00.090 --> 00:03:04.040
Now, which ever system let's say its SpiTAN, or .net,

74
00:03:04.040 --> 00:03:06.030
or Java, or any other the system

75
00:03:06.030 --> 00:03:08.010
any other language that you take,

76
00:03:08.010 --> 00:03:11.020
if it wants to transmit data to another system,

77
00:03:11.020 --> 00:03:14.060
then it will have convert data out of its own object

78
00:03:14.060 --> 00:03:17.010
to a JSON representation.

79
00:03:17.010 --> 00:03:19.090
And whenever it receives data from any other system,

80
00:03:19.090 --> 00:03:22.010
it will receive a JSON representation

81
00:03:22.010 --> 00:03:23.080
which it'll have to convert back

82
00:03:23.080 --> 00:03:26.070
into it's own kind of object.

83
00:03:26.070 --> 00:03:29.090
So when we try to talk of JASON with the Java platform,

84
00:03:29.090 --> 00:03:32.080
when you can order Java object to a JASON representation,

85
00:03:32.080 --> 00:03:35.080
of course the process is called Production of JSON,

86
00:03:35.080 --> 00:03:38.050
or as we say technically serialization.

87
00:03:38.050 --> 00:03:40.010
And when it's the other way around,

88
00:03:40.010 --> 00:03:41.070
when you have a JSON object

89
00:03:41.070 --> 00:03:44.050
being converted to a Java object,

90
00:03:44.050 --> 00:03:46.070
the it is called Consumption of JSON,

91
00:03:46.070 --> 00:03:49.050
or as we say deserialization.

92
00:03:49.050 --> 00:03:51.020
So across the industry,

93
00:03:51.020 --> 00:03:54.030
today we have these kind of multi-tier architectures

94
00:03:54.030 --> 00:03:55.030
in the picture.

95
00:03:55.030 --> 00:03:57.000
When you have different systems

96
00:03:57.000 --> 00:03:58.030
collaborating with each other

97
00:03:58.030 --> 00:04:00.090
they'll communicate wire this common data format

98
00:04:00.090 --> 00:04:01.090
which is JSON,

99
00:04:01.090 --> 00:04:05.040
and then help the customers have a wonderful experience

100
00:04:05.040 --> 00:04:06.090
for their applications.

101
00:04:06.090 --> 00:04:09.090
In the next video, we'll see the basic JSON types.

102
00:04:09.090 --> 00:04:11.070
And we will also see how JSON

103
00:04:11.070 --> 00:04:14.000
looks like the structures, et cetera.

