WEBVTT
1
00:00:00.050 --> 00:00:03.000
- [Instructor] Let's take a look at the JSON data types now.

2
00:00:03.000 --> 00:00:05.000
The simple types first, and then we will see

3
00:00:05.000 --> 00:00:07.000
how a JSON structure looks like.

4
00:00:07.000 --> 00:00:08.080
So whenever you have a JSON representation

5
00:00:08.080 --> 00:00:10.040
on a document, it could have one

6
00:00:10.040 --> 00:00:11.080
of the following data types.

7
00:00:11.080 --> 00:00:14.000
Either a string, which is a text value.

8
00:00:14.000 --> 00:00:17.080
A number, numerical values which fractional numbers.

9
00:00:17.080 --> 00:00:20.000
Boolean, either true or false.

10
00:00:20.000 --> 00:00:22.070
And it could also have null values.

11
00:00:22.070 --> 00:00:24.080
Let's take a look at the JSON structures now.

12
00:00:24.080 --> 00:00:28.010
So with those data types that we saw in the previous slide,

13
00:00:28.010 --> 00:00:29.050
how do you write a JSON?

14
00:00:29.050 --> 00:00:31.020
What does a JSON structure look like?

15
00:00:31.020 --> 00:00:33.060
So when you have a JSON document in front of you,

16
00:00:33.060 --> 00:00:35.060
how are you supposed to interpret it?

17
00:00:35.060 --> 00:00:36.060
Let's go ahead.

18
00:00:36.060 --> 00:00:39.030
The JSON representations have the following structures.

19
00:00:39.030 --> 00:00:41.040
It could either be a key-value pair,

20
00:00:41.040 --> 00:00:44.000
or it could be an object or an array.

21
00:00:44.000 --> 00:00:47.000
Let's look at each one of them in a little detail.

22
00:00:47.000 --> 00:00:49.090
I have a Notepad++ document open in front of me,

23
00:00:49.090 --> 00:00:53.000
and the first one, which is a key value page structure,

24
00:00:53.000 --> 00:00:54.090
looks like this.

25
00:00:54.090 --> 00:00:56.060
Every JSON object is always surrounded

26
00:00:56.060 --> 00:00:58.040
by a curly pair of braces.

27
00:00:58.040 --> 00:00:59.080
And when I say key value pair,

28
00:00:59.080 --> 00:01:02.010
now I'm going to write name,

29
00:01:02.010 --> 00:01:03.090
which is of course, the key.

30
00:01:03.090 --> 00:01:05.040
Then it's followed by a colon,

31
00:01:05.040 --> 00:01:09.040
and then then value is my name, which is again in quotes.

32
00:01:09.040 --> 00:01:11.040
So the value is of the string type

33
00:01:11.040 --> 00:01:13.040
and the key is called name.

34
00:01:13.040 --> 00:01:14.030
That's it.

35
00:01:14.030 --> 00:01:17.050
This is the simplest way of writing the JSON structure.

36
00:01:17.050 --> 00:01:19.090
And then you have JSON object.

37
00:01:19.090 --> 00:01:22.090
So what the means is, let me copy this.

38
00:01:22.090 --> 00:01:24.030
Let me go on the next line.

39
00:01:24.030 --> 00:01:26.020
And just space that again.

40
00:01:26.020 --> 00:01:28.040
And when I say it is a JSON object,

41
00:01:28.040 --> 00:01:31.040
it means I have multiple key-value pairs,

42
00:01:31.040 --> 00:01:33.090
a collection of key-value pairs, specifying

43
00:01:33.090 --> 00:01:35.070
a particular entity.

44
00:01:35.070 --> 00:01:37.070
So let's say I have already given my name.

45
00:01:37.070 --> 00:01:39.060
Of course I've gone to the next line

46
00:01:39.060 --> 00:01:41.000
with the help of a comma sign.

47
00:01:41.000 --> 00:01:45.070
And then I will say profession.

48
00:01:45.070 --> 00:01:49.050
And I say developer.

49
00:01:49.050 --> 00:01:50.040
Okay?

50
00:01:50.040 --> 00:01:54.090
Next, I could say location, where I stay.

51
00:01:54.090 --> 00:01:58.010
And then I could say Sweden.

52
00:01:58.010 --> 00:02:00.000
Then I can, again, give a comma sign.

53
00:02:00.000 --> 00:02:05.050
And let's say I could have a key called is_student,

54
00:02:05.050 --> 00:02:08.050
and then to this I can say false.

55
00:02:08.050 --> 00:02:10.070
So what I'm trying to do is have multiple values

56
00:02:10.070 --> 00:02:13.000
which specify a particular object.

57
00:02:13.000 --> 00:02:20.010
Again, I can have number of years of experience.

58
00:02:20.010 --> 00:02:22.010
And that may be 11.

59
00:02:22.010 --> 00:02:23.040
So what I try to do is,

60
00:02:23.040 --> 00:02:25.040
when I give the values for the keys

61
00:02:25.040 --> 00:02:26.060
in this object,

62
00:02:26.060 --> 00:02:28.020
It could either of be of string,

63
00:02:28.020 --> 00:02:29.090
then I give a Boolean value,

64
00:02:29.090 --> 00:02:31.080
and I could also give a numerical value.

65
00:02:31.080 --> 00:02:33.060
In addition to this, you can also define

66
00:02:33.060 --> 00:02:36.010
a null value for any of your keys.

67
00:02:36.010 --> 00:02:38.060
Each key-value pair separated by comma sign,

68
00:02:38.060 --> 00:02:42.090
and each key and value separated by a colon sign.

69
00:02:42.090 --> 00:02:44.060
The next one is JSON array.

70
00:02:44.060 --> 00:02:46.050
So how does that look like?

71
00:02:46.050 --> 00:02:48.070
Any array we know is a collection of elements.

72
00:02:48.070 --> 00:02:50.020
Generally of the same type in some

73
00:02:50.020 --> 00:02:51.050
of the programming languages,

74
00:02:51.050 --> 00:02:53.000
it could be different in JavaScript,

75
00:02:53.000 --> 00:02:54.050
it could be different in JSON.

76
00:02:54.050 --> 00:02:57.000
So an array will be represented like that,

77
00:02:57.000 --> 00:02:58.050
with a pair of square brackets.

78
00:02:58.050 --> 00:03:00.020
And let's say I have an array of fruits.

79
00:03:00.020 --> 00:03:03.070
So I can say apple.

80
00:03:03.070 --> 00:03:06.030
Then, mango.

81
00:03:06.030 --> 00:03:07.080
So on and so forth.

82
00:03:07.080 --> 00:03:08.060
Okay?

83
00:03:08.060 --> 00:03:12.050
Now, I could actually have a complete JSON object

84
00:03:12.050 --> 00:03:15.030
which has not only got these simple kind of values,

85
00:03:15.030 --> 00:03:18.010
but, the values could also be arrays.

86
00:03:18.010 --> 00:03:19.040
So let's see how to write that.

87
00:03:19.040 --> 00:03:21.050
Let's take this entire JSON object.

88
00:03:21.050 --> 00:03:26.000
Copy, and paste it on line number 16.

89
00:03:26.000 --> 00:03:28.080
And what I'm going to do here is I'm going to say comma.

90
00:03:28.080 --> 00:03:31.010
So I'm adding a new key-value pair.

91
00:03:31.010 --> 00:03:35.010
And the key is, let's say courses.

92
00:03:35.010 --> 00:03:39.000
And that is now going to point to an array.

93
00:03:39.000 --> 00:03:41.040
Because courses cannot be defined as a single value

94
00:03:41.040 --> 00:03:43.040
it has to be collection of values and that's why

95
00:03:43.040 --> 00:03:46.030
the value given to this key of courses now

96
00:03:46.030 --> 00:03:47.080
is a JSON array.

97
00:03:47.080 --> 00:03:48.060
Okay?

98
00:03:48.060 --> 00:03:53.040
And then I can say Java

99
00:03:53.040 --> 00:03:56.090
J-E-E,

100
00:03:56.090 --> 00:03:59.090
AngularJS,

101
00:03:59.090 --> 00:04:01.050
so on and so forth, right?

102
00:04:01.050 --> 00:04:04.010
So the value now is an JSON array.

103
00:04:04.010 --> 00:04:06.080
Additionally you could have a little complicated structure.

104
00:04:06.080 --> 00:04:09.060
Let's say I want to specify the address

105
00:04:09.060 --> 00:04:11.030
for this particular member.

106
00:04:11.030 --> 00:04:13.090
Now the address if definitely composed of multiple fields.

107
00:04:13.090 --> 00:04:16.060
It has street, building name, city, country,

108
00:04:16.060 --> 00:04:19.020
zip code, et cetera.

109
00:04:19.020 --> 00:04:21.040
So I do not want to specify all of the address information

110
00:04:21.040 --> 00:04:23.030
as a simple string value,

111
00:04:23.030 --> 00:04:25.010
but I want that each of the components

112
00:04:25.010 --> 00:04:26.090
to be specified separately.

113
00:04:26.090 --> 00:04:28.070
So in that case, I can put a colon.

114
00:04:28.070 --> 00:04:33.000
And the value of this key is another JSON object.

115
00:04:33.000 --> 00:04:34.060
This is absolutely okay.

116
00:04:34.060 --> 00:04:37.080
This is how things work, even in the projects.

117
00:04:37.080 --> 00:04:39.020
These are the kind of structures that you will

118
00:04:39.020 --> 00:04:40.090
come across when it comes to JSON

119
00:04:40.090 --> 00:04:42.030
in your applications.

120
00:04:42.030 --> 00:04:44.030
So now this address could have,

121
00:04:44.030 --> 00:04:47.040
let's say city

122
00:04:47.040 --> 00:04:49.070
I'll say Stockholm,

123
00:04:49.070 --> 00:04:51.090
and then I can have a comma there again.

124
00:04:51.090 --> 00:04:55.040
And put another key, which is country.

125
00:04:55.040 --> 00:04:58.090
To which I can say Sweden, et cetera.

126
00:04:58.090 --> 00:05:00.050
So on forth and so forth, you can specify

127
00:05:00.050 --> 00:05:03.000
all the parameters for the address object.

128
00:05:03.000 --> 00:05:06.060
So this means that whenever you have a JSON object,

129
00:05:06.060 --> 00:05:08.020
it should have a key-value pair,

130
00:05:08.020 --> 00:05:10.050
but values can be of different types.

131
00:05:10.050 --> 00:05:12.000
It could point to an array,

132
00:05:12.000 --> 00:05:14.040
it could also point to another JSON object.

133
00:05:14.040 --> 00:05:16.070
So you will have this nested level of objects,

134
00:05:16.070 --> 00:05:19.020
every single time you have a JSON representation

135
00:05:19.020 --> 00:05:21.060
or a JSON document.

136
00:05:21.060 --> 00:05:23.070
Okay, now whenever you write a JSON,

137
00:05:23.070 --> 00:05:24.060
it should of course look like this.

138
00:05:24.060 --> 00:05:27.090
We have every key-value pair on a separate line.

139
00:05:27.090 --> 00:05:29.070
If let's say you want to really format it,

140
00:05:29.070 --> 00:05:31.060
or you wanted to understand whether the JSON

141
00:05:31.060 --> 00:05:33.070
you have written is correct or not,

142
00:05:33.070 --> 00:05:36.030
you have ways to validate it.

143
00:05:36.030 --> 00:05:38.080
So what we'll do is, we'll copy this entire JSON,

144
00:05:38.080 --> 00:05:44.090
and we will go to this website which is called jsonlint.com

145
00:05:44.090 --> 00:05:48.010
Now, if I paste my JSON here, and if I click on

146
00:05:48.010 --> 00:05:49.060
that Validate JSON button,

147
00:05:49.060 --> 00:05:50.070
do you see what happened?

148
00:05:50.070 --> 00:05:52.080
It of course tells me that it is a valid JSON,

149
00:05:52.080 --> 00:05:56.040
and it is kind enough to even format that for me.

150
00:05:56.040 --> 00:05:57.090
So there were these keys at the beginning

151
00:05:57.090 --> 00:06:00.030
name, profession, location, student, et cetera.

152
00:06:00.030 --> 00:06:02.090
And under address, since I have another JSON object,

153
00:06:02.090 --> 00:06:05.010
it formatted that as well.

154
00:06:05.010 --> 00:06:05.090
Okay?

155
00:06:05.090 --> 00:06:07.080
So jsonlint.com is just one of the websites

156
00:06:07.080 --> 00:06:09.090
where you can format and see whether your JSON

157
00:06:09.090 --> 00:06:12.050
is correct or not, and there are tons of websites

158
00:06:12.050 --> 00:06:15.020
like these, who can do the same job for you.

159
00:06:15.020 --> 00:06:18.070
Now, let's see some of the rules that you need to remember.

160
00:06:18.070 --> 00:06:21.040
Many of you who have already worked with the JavaScript

161
00:06:21.040 --> 00:06:24.010
language, must definitely understand that this

162
00:06:24.010 --> 00:06:27.040
structure looks very similar to a JavaScript object.

163
00:06:27.040 --> 00:06:28.090
But there's a difference.

164
00:06:28.090 --> 00:06:32.010
When it comes to JSON, the keys that you specify,

165
00:06:32.010 --> 00:06:34.010
are always of string type.

166
00:06:34.010 --> 00:06:36.060
In a JavaScript object, you can actually have a key

167
00:06:36.060 --> 00:06:39.000
which does not have these codes at all.

168
00:06:39.000 --> 00:06:41.010
Now, if I try to validate this JSON,

169
00:06:41.010 --> 00:06:43.030
it will give me an error, and it'll say that

170
00:06:43.030 --> 00:06:45.020
it is not expecting something of this type.

171
00:06:45.020 --> 00:06:47.040
It is expecting a string key.

172
00:06:47.040 --> 00:06:49.050
That's the difference between a JSON

173
00:06:49.050 --> 00:06:51.040
and a JavaScript object.

174
00:06:51.040 --> 00:06:53.060
Moreover, let's correct that.

175
00:06:53.060 --> 00:06:55.010
Let's go back to the previous thing.

176
00:06:55.010 --> 00:06:57.030
Let's say you have a single code.

177
00:06:57.030 --> 00:06:59.020
I mentioned by mistake a single code

178
00:06:59.020 --> 00:07:00.090
in one of the values that I tried to give.

179
00:07:00.090 --> 00:07:02.020
Let's validate this again.

180
00:07:02.020 --> 00:07:03.090
And then again it'll show me that error.

181
00:07:03.090 --> 00:07:05.060
So whatever values that you're embedding

182
00:07:05.060 --> 00:07:08.060
if it is a string type, it has to be a double code.

183
00:07:08.060 --> 00:07:10.060
A single code is not allowed.

184
00:07:10.060 --> 00:07:13.030
Let's say we also miss out this comma sign.

185
00:07:13.030 --> 00:07:16.020
We correct this, and we miss out the comma sign.

186
00:07:16.020 --> 00:07:18.030
And let's validate it again.

187
00:07:18.030 --> 00:07:19.080
There you go, again.

188
00:07:19.080 --> 00:07:22.000
So it expects that you give a comma sign.

189
00:07:22.000 --> 00:07:24.020
So any of these rules, if you're not going to follow

190
00:07:24.020 --> 00:07:27.030
which means this document is an invalid JSON document.

191
00:07:27.030 --> 00:07:29.000
And do not forget this.

192
00:07:29.000 --> 00:07:31.000
Now mostly in your industry projects,

193
00:07:31.000 --> 00:07:32.080
when you're trying to work with JSON,

194
00:07:32.080 --> 00:07:34.050
you have no requirement as such

195
00:07:34.050 --> 00:07:36.030
when you're writing out a JSON.

196
00:07:36.030 --> 00:07:38.000
But sometimes you receive a JSON document

197
00:07:38.000 --> 00:07:41.060
and maybe you probably think something is wrong with it,

198
00:07:41.060 --> 00:07:43.090
then you can quickly go ahead and validate

199
00:07:43.090 --> 00:07:46.000
with any of these websites that you have.

200
00:07:46.000 --> 00:07:47.000
Okay.

201
00:07:47.000 --> 00:07:49.000
So we've seen key-value pairs,

202
00:07:49.000 --> 00:07:50.010
we've seen objects,

203
00:07:50.010 --> 00:07:51.010
we have seen JSON arrays,

204
00:07:51.010 --> 00:07:54.000
and this JSON structure could be nested at any level

205
00:07:54.000 --> 00:07:54.080
as I said.

206
00:07:54.080 --> 00:07:57.040
Any kind of values which falls in the JSON value types

207
00:07:57.040 --> 00:08:00.010
and any level of nesting is possible.

208
00:08:00.010 --> 00:08:04.090
Now according to latest RFC 7159: every JSON value

209
00:08:04.090 --> 00:08:08.000
is considered to be a valid JSON document.

210
00:08:08.000 --> 00:08:11.030
What I mean is, let's go back to JSONLint.

211
00:08:11.030 --> 00:08:15.070
If I erase all of this, and I just say false.

212
00:08:15.070 --> 00:08:17.060
And I say validate JSON.

213
00:08:17.060 --> 00:08:20.030
Do you see that it tells me that it is a valid JSON?

214
00:08:20.030 --> 00:08:24.000
It's simple value, but it is a valid JSON value,

215
00:08:24.000 --> 00:08:25.050
and that's exactly why it will say that

216
00:08:25.050 --> 00:08:27.000
it is a valid JSON.

217
00:08:27.000 --> 00:08:30.050
So this is as per the latest RFC 7159.

218
00:08:30.050 --> 00:08:32.010
Of course, then you have to check

219
00:08:32.010 --> 00:08:36.020
what kind of JSON API that you're using in your application.

220
00:08:36.020 --> 00:08:38.060
Whether it really supports this latest

221
00:08:38.060 --> 00:08:41.000
RFC modification or not.

222
00:08:41.000 --> 00:08:42.000
Okay.

223
00:08:42.000 --> 00:08:44.010
In the next video, we are going to debate

224
00:08:44.010 --> 00:08:46.090
whether JSON is better, or the XML,

225
00:08:46.090 --> 00:08:49.050
Extensible Markup Language, is a better way

226
00:08:49.050 --> 00:08:51.000
of exchanging data.

