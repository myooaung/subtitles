WEBVTT
1
00:00:00.050 --> 00:00:01.050
- [Instructor] So now lets write out

2
00:00:01.050 --> 00:00:03.030
the custom deserializer.

3
00:00:03.030 --> 00:00:06.030
Lets go to the IDE, under the Custom folder,

4
00:00:06.030 --> 00:00:08.000
I'm going to create a new Java Class,

5
00:00:08.000 --> 00:00:15.040
and call this PersonDeserializer, that's right.

6
00:00:15.040 --> 00:00:22.010
Make this implement jsonbDeserializer,

7
00:00:22.010 --> 00:00:23.090
and of course, we are working this out further,

8
00:00:23.090 --> 00:00:26.070
Person class.

9
00:00:26.070 --> 00:00:31.030
Okay, now, this is going to be a little complicated logic

10
00:00:31.030 --> 00:00:33.090
that we have to write, so lets go slow.

11
00:00:33.090 --> 00:00:37.030
This is what we got as the serialized output, didn't we?

12
00:00:37.030 --> 00:00:40.020
Now in order to deserialize this, understand this,

13
00:00:40.020 --> 00:00:42.050
this is where the (mumbles) starts,

14
00:00:42.050 --> 00:00:44.010
and then you have the curly brace,

15
00:00:44.010 --> 00:00:45.090
and then you have the key.

16
00:00:45.090 --> 00:00:49.000
This is the key that is going to help you identify

17
00:00:49.000 --> 00:00:53.030
what kind of instance does the json binding API create

18
00:00:53.030 --> 00:00:55.000
during deserialization, right,

19
00:00:55.000 --> 00:00:57.010
this key's very crucial for us,

20
00:00:57.010 --> 00:00:58.060
so how do we make sure

21
00:00:58.060 --> 00:01:01.050
that we get the key right there, okay.

22
00:01:01.050 --> 00:01:04.070
So now we are going to do a very low level parsing

23
00:01:04.070 --> 00:01:07.060
of this json through the APIs that we have as a part

24
00:01:07.060 --> 00:01:11.040
of the jsonbDeserializer interface, okay.

25
00:01:11.040 --> 00:01:14.080
What we're going to do is the jsonParser object

26
00:01:14.080 --> 00:01:17.040
will be available with us, and this jsonParser

27
00:01:17.040 --> 00:01:20.020
is actually going to parse each line.

28
00:01:20.020 --> 00:01:22.050
When we reach this line, we are quickly going to collect

29
00:01:22.050 --> 00:01:24.050
that string, it's a string right, so we're going to collect

30
00:01:24.050 --> 00:01:27.040
that string, and there after, whatever object we get,

31
00:01:27.040 --> 00:01:30.030
we are going to send it for deserialization.

32
00:01:30.030 --> 00:01:34.030
To collect the string separately is an important step,

33
00:01:34.030 --> 00:01:37.050
because that will help us identify what instance

34
00:01:37.050 --> 00:01:40.040
do we want to create when the deserialization happens.

35
00:01:40.040 --> 00:01:43.050
Okay, so we are going to do that very low level parsing.

36
00:01:43.050 --> 00:01:45.090
So lets see how.

37
00:01:45.090 --> 00:01:49.020
Okay, so I'm going to first implement the abstract methods,

38
00:01:49.020 --> 00:01:51.070
and I'm deliberately trying to keep this window open,

39
00:01:51.070 --> 00:01:53.020
because I just want you to make sure

40
00:01:53.020 --> 00:01:55.020
that you understand the code that I'm writing.

41
00:01:55.020 --> 00:01:58.070
Okay, so lets make it a little better, all right.

42
00:01:58.070 --> 00:02:01.080
Lets get rid of the default implementation.

43
00:02:01.080 --> 00:02:05.030
Okay, now what are the parameters to this method?

44
00:02:05.030 --> 00:02:08.040
You have a jsonParser, I'm not too happy with this name,

45
00:02:08.040 --> 00:02:10.020
so I'm gonna change these names.

46
00:02:10.020 --> 00:02:16.010
Okay, deContext, and type is okay, all right.

47
00:02:16.010 --> 00:02:17.000
So what are we gonna do?

48
00:02:17.000 --> 00:02:19.000
The first thing is we are going to make sure

49
00:02:19.000 --> 00:02:22.060
that we are going to get the jsonParser

50
00:02:22.060 --> 00:02:27.000
and simply envoke next.

51
00:02:27.000 --> 00:02:28.060
Okay, we're simply going to invoke next

52
00:02:28.060 --> 00:02:29.050
because we don't want this curly brace to be read,

53
00:02:29.050 --> 00:02:33.050
you want to ignore it, so we want to move the Parser

54
00:02:33.050 --> 00:02:35.010
to the next line, okay?

55
00:02:35.010 --> 00:02:37.040
Now the next line is, this string, and this string

56
00:02:37.040 --> 00:02:40.010
is the key, very important, so we're going to collect that

57
00:02:40.010 --> 00:02:41.040
in a string variable.

58
00:02:41.040 --> 00:02:45.090
Lets say that is the className, and we're going to say

59
00:02:45.090 --> 00:02:50.090
jsonParser.getString().

60
00:02:50.090 --> 00:02:53.080
Okay, next is we want to make sure

61
00:02:53.080 --> 00:02:55.010
that we grow this as well,

62
00:02:55.010 --> 00:03:02.000
right, so lets also say jsonParser.next() again,

63
00:03:02.000 --> 00:03:03.050
and then we finally have

64
00:03:03.050 --> 00:03:05.090
the entire information with us to parse.

65
00:03:05.090 --> 00:03:11.030
So, that we are going to now, take in a Person object.

66
00:03:11.030 --> 00:03:17.060
Let me create a person reference = null,

67
00:03:17.060 --> 00:03:18.090
and what are we going to do here?

68
00:03:18.090 --> 00:03:22.020
We are going to say, person =,

69
00:03:22.020 --> 00:03:26.040
take that deserialization context parameter

70
00:03:26.040 --> 00:03:27.080
that we have with us,

71
00:03:27.080 --> 00:03:31.010
and on this, I'm going to call the deserialized method,

72
00:03:31.010 --> 00:03:33.040
so this is a very similar method, the way we already seen

73
00:03:33.040 --> 00:03:35.000
in the serialization context.

74
00:03:35.000 --> 00:03:36.030
So this is another helper utility,

75
00:03:36.030 --> 00:03:39.040
which will help us to deserialize our objects.

76
00:03:39.040 --> 00:03:42.090
So we're going to take deserialize method,

77
00:03:42.090 --> 00:03:45.030
and what are we going to pass there?

78
00:03:45.030 --> 00:03:47.070
The first one is Type.

79
00:03:47.070 --> 00:03:50.080
So the type is, basically, this classes name,

80
00:03:50.080 --> 00:03:54.000
the className that we've already acquired on line number 23,

81
00:03:54.000 --> 00:03:55.040
right, we have to make sure

82
00:03:55.040 --> 00:03:57.010
that the deserialization happens

83
00:03:57.010 --> 00:03:59.040
according to this class name, right,

84
00:03:59.040 --> 00:04:02.010
so if it is com.app.beans.Professor,

85
00:04:02.010 --> 00:04:03.050
then the deserialization should happen

86
00:04:03.050 --> 00:04:04.090
for the Professor object.

87
00:04:04.090 --> 00:04:07.030
If it is however, the software developer coming in,

88
00:04:07.030 --> 00:04:09.050
then the instance of this software developer

89
00:04:09.050 --> 00:04:11.060
needs to get created, okay,

90
00:04:11.060 --> 00:04:14.090
so what I'm gonna do is, I'm going to go to line 27,

91
00:04:14.090 --> 00:04:19.080
and say, load the class which has this className,

92
00:04:19.080 --> 00:04:22.040
the one that we collected on 23, okay,

93
00:04:22.040 --> 00:04:30.080
and this should be a subclass of Person.

94
00:04:30.080 --> 00:04:32.070
Okay, we are forcing the rule here that the class

95
00:04:32.070 --> 00:04:33.090
that you're trying to load,

96
00:04:33.090 --> 00:04:36.070
definitely should be a subclass of the Person class.

97
00:04:36.070 --> 00:04:40.000
Okay let the jsonParser argument be as is,

98
00:04:40.000 --> 00:04:41.030
we do not want to change that,

99
00:04:41.030 --> 00:04:44.080
because that is what is going to help us do everything.

100
00:04:44.080 --> 00:04:46.060
Okay, we also have to make sure

101
00:04:46.060 --> 00:04:48.080
that we handle this exception.

102
00:04:48.080 --> 00:04:50.070
What if that class is not found in your project?

103
00:04:50.070 --> 00:04:52.000
Okay, so class not found,

104
00:04:52.000 --> 00:04:56.060
lets quickly surround it with try/catch.,

105
00:04:56.060 --> 00:04:57.060
and once we do this,

106
00:04:57.060 --> 00:05:03.080
lets just return the Person object from here.

107
00:05:03.080 --> 00:05:07.060
Okay, so we called the jsonParser next few times,

108
00:05:07.060 --> 00:05:09.050
because we wanted to ignore certain characters

109
00:05:09.050 --> 00:05:11.060
as a part of the json representation,

110
00:05:11.060 --> 00:05:14.060
okay but we definitely wanted collect this string,

111
00:05:14.060 --> 00:05:16.030
so that's what we are going to do

112
00:05:16.030 --> 00:05:19.060
by line number 25, and then,

113
00:05:19.060 --> 00:05:21.080
we asked the deserialization context

114
00:05:21.080 --> 00:05:24.080
to load the class corresponding to this className,

115
00:05:24.080 --> 00:05:27.090
which is definitely a subclass of Person class,

116
00:05:27.090 --> 00:05:29.090
and then the jsonParser's going to come into picture,

117
00:05:29.090 --> 00:05:32.010
and it will help us deserialize that object,

118
00:05:32.010 --> 00:05:33.030
and then we're going to return that object

119
00:05:33.030 --> 00:05:35.090
back to wherever you want it.

120
00:05:35.090 --> 00:05:37.020
Okay, so you redid all the deserializer,

121
00:05:37.020 --> 00:05:40.010
we've already seen the serializer's output.

122
00:05:40.010 --> 00:05:42.050
We will take a look at the deserializer's output

123
00:05:42.050 --> 00:05:44.000
in the next video.

