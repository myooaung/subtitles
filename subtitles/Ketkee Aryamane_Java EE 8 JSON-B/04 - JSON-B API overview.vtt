WEBVTT
1
00:00:00.060 --> 00:00:02.090
- [Narrator] Let's take a look at few JSON Processing APIs.

2
00:00:02.090 --> 00:00:04.060
We are going to talk about certain APIs,

3
00:00:04.060 --> 00:00:08.060
and then we'll understand and get into JSON Binding.

4
00:00:08.060 --> 00:00:11.060
As a part of Java Enterprise Platform version seven,

5
00:00:11.060 --> 00:00:15.030
as of Java Specification Request 353, there was

6
00:00:15.030 --> 00:00:18.000
an API added called JSON Processing.

7
00:00:18.000 --> 00:00:21.060
Now this is a low-level Java API, which is used to

8
00:00:21.060 --> 00:00:25.090
generate, parse, query, and read JSON documents.

9
00:00:25.090 --> 00:00:27.080
And it is based on two models.

10
00:00:27.080 --> 00:00:29.070
The first one is the object model,

11
00:00:29.070 --> 00:00:32.010
and the other one is streaming.

12
00:00:32.010 --> 00:00:34.070
When you talk about the object model, the entire JSON

13
00:00:34.070 --> 00:00:38.000
representation is available to you as a single document,

14
00:00:38.000 --> 00:00:40.030
and it can be loaded into the memory.

15
00:00:40.030 --> 00:00:43.020
Now if it is a huge document, then loading it into

16
00:00:43.020 --> 00:00:44.060
the memory is definitely going to

17
00:00:44.060 --> 00:00:46.090
leave a bigger memory footprint.

18
00:00:46.090 --> 00:00:51.020
However, when you talk about the entire document being

19
00:00:51.020 --> 00:00:53.080
loaded into memory, it's also an advantage because you

20
00:00:53.080 --> 00:00:57.070
have random access to any element inside the JSON document.

21
00:00:57.070 --> 00:01:00.030
When you talk about streaming model,

22
00:01:00.030 --> 00:01:02.050
it's of course an event-based model.

23
00:01:02.050 --> 00:01:05.030
So when you actually have a JSON document

24
00:01:05.030 --> 00:01:07.050
it doesn't entirely come at the same time.

25
00:01:07.050 --> 00:01:11.090
Once, instead, there's one element coming in at one time.

26
00:01:11.090 --> 00:01:14.080
So you will not have access to entire document,

27
00:01:14.080 --> 00:01:17.050
and if the file is huge, then this is definitely going to

28
00:01:17.050 --> 00:01:19.080
act faster, because it does not have to load

29
00:01:19.080 --> 00:01:22.050
the entire document into memory at all.

30
00:01:22.050 --> 00:01:26.020
So that way, it definitely has a lesser memory footprint.

31
00:01:26.020 --> 00:01:29.080
Now, another thing is that when you talk about JSON

32
00:01:29.080 --> 00:01:32.020
Processing, the kind of API it

33
00:01:32.020 --> 00:01:36.070
is uses JSON Processing types.

34
00:01:36.070 --> 00:01:39.010
We have already seen the JSON structures.

35
00:01:39.010 --> 00:01:40.090
We have seen the JSON data types.

36
00:01:40.090 --> 00:01:43.080
Now corresponding to each of the data types and structures,

37
00:01:43.080 --> 00:01:47.050
you APIs under the JSON-P bundle.

38
00:01:47.050 --> 00:01:49.040
So let's say that if you have JSON object,

39
00:01:49.040 --> 00:01:52.050
then it is represented by "JsonObject" API.

40
00:01:52.050 --> 00:01:55.000
If you want to represent an array in JSON, then there is

41
00:01:55.000 --> 00:01:57.080
an API corresponding to that as well - "JsonArray."

42
00:01:57.080 --> 00:02:00.000
And then you have "JsonNumber," "JsonString,"

43
00:02:00.000 --> 00:02:03.000
"JsonValue," "JsonPointer," et cetera.

44
00:02:03.000 --> 00:02:05.070
So what I want to say here is that there is no direct

45
00:02:05.070 --> 00:02:10.090
binding between the Java object and the JSON representation.

46
00:02:10.090 --> 00:02:13.090
Why do you want direct binding?

47
00:02:13.090 --> 00:02:15.060
We all know that there's an architecture which is

48
00:02:15.060 --> 00:02:19.060
called "JAXB" - Java API for XML Binding.

49
00:02:19.060 --> 00:02:22.050
And that architecture actually allows you to directly

50
00:02:22.050 --> 00:02:24.080
bind the Java object's element,

51
00:02:24.080 --> 00:02:27.090
that's property, with the XML element.

52
00:02:27.090 --> 00:02:30.020
You also have a set of annotations that you can lay out

53
00:02:30.020 --> 00:02:33.030
on the field name, or on the methods, getter setters,

54
00:02:33.030 --> 00:02:35.070
and it helps you to directly bind that property

55
00:02:35.070 --> 00:02:37.090
with a respective XML element.

56
00:02:37.090 --> 00:02:40.050
And that is definitely a better way to start

57
00:02:40.050 --> 00:02:43.060
converting Java to JSON, or JSON to Java.

58
00:02:43.060 --> 00:02:47.040
Now those of you have worked with XML already know that

59
00:02:47.040 --> 00:02:50.080
the object and streaming model is exactly similar to

60
00:02:50.080 --> 00:02:54.000
"DOM" model and "StAX" model parsing,

61
00:02:54.000 --> 00:02:57.010
respectively, under the XML language.

62
00:02:57.010 --> 00:02:59.020
Now to do this direct binding, of course there are

63
00:02:59.020 --> 00:03:01.090
third-party libraries, like Jackson, you have Google's

64
00:03:01.090 --> 00:03:05.010
Gson, a very famous and popular library.

65
00:03:05.010 --> 00:03:07.080
But then, even if there are these third-party libraries,

66
00:03:07.080 --> 00:03:11.070
it's still not a standard of the Enterprise platform.

67
00:03:11.070 --> 00:03:14.050
So we needed some API which is regarded as standard

68
00:03:14.050 --> 00:03:17.070
under the Enterprise umbrella of the Java platform.

69
00:03:17.070 --> 00:03:20.090
And that's exactly why we have JSON Binding.

70
00:03:20.090 --> 00:03:23.040
This is what the course is going to talk about.

71
00:03:23.040 --> 00:03:27.010
So let's understand the features of JSON Binding.

72
00:03:27.010 --> 00:03:31.040
It is a Java Enterprise platform version eight feature,

73
00:03:31.040 --> 00:03:35.000
introduced as Java Specification Request 367,

74
00:03:35.000 --> 00:03:37.080
and it is the one that is going to provide you a uniform

75
00:03:37.080 --> 00:03:41.080
standard for converting Java to JSON and back again.

76
00:03:41.080 --> 00:03:44.010
And as we said, it is going to provide you that binding

77
00:03:44.010 --> 00:03:48.050
layer, which is missing in JSON Processing API.

78
00:03:48.050 --> 00:03:50.040
So every time you use JSON Processing,

79
00:03:50.040 --> 00:03:53.000
you have to deal with those APIs that we talked about.

80
00:03:53.000 --> 00:03:55.040
JsonObject, JsonArray, and et cetera.

81
00:03:55.040 --> 00:03:57.040
When it comes to JSON Binding, you just have to put

82
00:03:57.040 --> 00:03:59.040
those annotations on those fields, and then

83
00:03:59.040 --> 00:04:01.040
your Java object is quickly converted to

84
00:04:01.040 --> 00:04:05.000
a JSON representation, and vice versa.

85
00:04:05.000 --> 00:04:07.050
JSON Binding API is very easy to use, there is no

86
00:04:07.050 --> 00:04:10.000
big ceremony here to use JSON Binding API.

87
00:04:10.000 --> 00:04:12.030
It's a set of dependencies, very

88
00:04:12.030 --> 00:04:15.020
quick to configure in your project.

89
00:04:15.020 --> 00:04:17.050
Enter these dependencies into your configuration files

90
00:04:17.050 --> 00:04:20.000
of the build tools that you are using,

91
00:04:20.000 --> 00:04:22.030
and you already started on that.

92
00:04:22.030 --> 00:04:24.080
Moreover, if you come with a background where you've

93
00:04:24.080 --> 00:04:26.080
already used Jackson or Gson, they

94
00:04:26.080 --> 00:04:29.030
provide those binding layers already.

95
00:04:29.030 --> 00:04:33.060
So you will possibly already know how to use JSON Binding.

96
00:04:33.060 --> 00:04:37.060
JSON Binding API works perfectly with JSON Processing API.

97
00:04:37.060 --> 00:04:41.090
In fact, JSON-B internally works with JSON-P,

98
00:04:41.090 --> 00:04:43.060
which is that low-level Java API

99
00:04:43.060 --> 00:04:45.070
we've talked about in the previous slide.

100
00:04:45.070 --> 00:04:47.090
It works on both of those model and streaming APIs,

101
00:04:47.090 --> 00:04:50.050
and when you talk about JSON Binding API,

102
00:04:50.050 --> 00:04:53.060
it will use JSON Processing API internally

103
00:04:53.060 --> 00:04:57.080
to do low-level serializations and deserializations.

104
00:04:57.080 --> 00:05:00.020
So when it comes to JSON Binding API,

105
00:05:00.020 --> 00:05:03.000
it gives you a lot of mappings to do.

106
00:05:03.000 --> 00:05:05.000
First of all it has got a long list of default

107
00:05:05.000 --> 00:05:06.050
mappings that it can do when it tries

108
00:05:06.050 --> 00:05:09.050
to convert a Java to JSON or JSON to Java.

109
00:05:09.050 --> 00:05:11.030
Not only that, if you're not satisfied with

110
00:05:11.030 --> 00:05:13.050
the default settings, yes, there's a host of

111
00:05:13.050 --> 00:05:16.050
customizations that you can run, and ask

112
00:05:16.050 --> 00:05:19.000
JSON Binding to do the customized level of

113
00:05:19.000 --> 00:05:20.090
mapping, for conversion of your Java

114
00:05:20.090 --> 00:05:24.050
objects to JSON, and JSON to Java.

115
00:05:24.050 --> 00:05:27.020
All the APIs of JSON Binding reside

116
00:05:27.020 --> 00:05:30.060
in the "javax.json.bind" package.

117
00:05:30.060 --> 00:05:32.070
Okay, so now we've talked a lot about

118
00:05:32.070 --> 00:05:35.050
the JSON structures, the JSON types,

119
00:05:35.050 --> 00:05:38.030
the JSON APIs [uintelligible], the famous

120
00:05:38.030 --> 00:05:41.080
and the popular ones, and then why we have JSON Binding API,

121
00:05:41.080 --> 00:05:44.010
and the features of JSON Binding API.

122
00:05:44.010 --> 00:05:46.060
Up next, we'll see the setup for how do you make

123
00:05:46.060 --> 00:05:48.060
JSON Binding project, and then

124
00:05:48.060 --> 00:05:50.000
let's get started on with the demos.

