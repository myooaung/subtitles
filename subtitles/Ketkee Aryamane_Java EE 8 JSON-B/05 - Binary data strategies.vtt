WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Narrator] The next couple of customizations

2
00:00:02.000 --> 00:00:03.050
that we are going to see are very specific to

3
00:00:03.050 --> 00:00:04.080
your application so if you have

4
00:00:04.080 --> 00:00:07.040
a requirement where you want the

5
00:00:07.040 --> 00:00:10.010
binary data strategy to be decided

6
00:00:10.010 --> 00:00:11.070
for you application in case you are trying

7
00:00:11.070 --> 00:00:13.000
to work with bytes.

8
00:00:13.000 --> 00:00:15.030
Then this is the mapping that you're looking for.

9
00:00:15.030 --> 00:00:16.090
So by default, of course it will use the

10
00:00:16.090 --> 00:00:17.090
BYTE encoding.

11
00:00:17.090 --> 00:00:20.030
But there are a couple of other binary data strategies

12
00:00:20.030 --> 00:00:23.000
that you can employ with the customized

13
00:00:23.000 --> 00:00:26.020
mapping option available under JSON Binding API.

14
00:00:26.020 --> 00:00:28.020
So, by default if you have,

15
00:00:28.020 --> 00:00:29.010
let's say some bytes.

16
00:00:29.010 --> 00:00:31.030
Some byte data with you in the application,

17
00:00:31.030 --> 00:00:33.090
then the will be using the byte encoding format.

18
00:00:33.090 --> 00:00:37.030
However, you can also use base 64 encoding format

19
00:00:37.030 --> 00:00:40.080
when you try to customize it using this option.

20
00:00:40.080 --> 00:00:43.040
So this option is available on the JsonbConfig object

21
00:00:43.040 --> 00:00:45.020
which means this is going to be possible

22
00:00:45.020 --> 00:00:46.040
at the run time.

23
00:00:46.040 --> 00:00:48.000
It's a run time customization.

24
00:00:48.000 --> 00:00:50.050
So we are going to do a very small demo for this.

25
00:00:50.050 --> 00:00:53.040
Let's come back to the IDE

26
00:00:53.040 --> 00:00:56.090
and let's clear the test class

27
00:00:56.090 --> 00:01:03.030
and let's say this is test binary strategies.

28
00:01:03.030 --> 00:01:05.050
Yes, we've spelt that right.

29
00:01:05.050 --> 00:01:09.010
Let's come to the main method.

30
00:01:09.010 --> 00:01:10.040
Okay.

31
00:01:10.040 --> 00:01:13.040
And I'm going to clear the byte array

32
00:01:13.040 --> 00:01:14.030
like that.

33
00:01:14.030 --> 00:01:16.050
So I'm going to say

34
00:01:16.050 --> 00:01:18.050
JSON

35
00:01:18.050 --> 00:01:19.030
B

36
00:01:19.030 --> 00:01:21.090
is easy to learn.

37
00:01:21.090 --> 00:01:22.070
Okay?

38
00:01:22.070 --> 00:01:24.060
And I'm going to convert this into bytes

39
00:01:24.060 --> 00:01:25.080
so you can do that with the help of

40
00:01:25.080 --> 00:01:27.060
the getBytes API that's available on a

41
00:01:27.060 --> 00:01:29.090
sting object in Java.

42
00:01:29.090 --> 00:01:31.020
Okay, and then,

43
00:01:31.020 --> 00:01:34.090
let's also go to the object mapper.

44
00:01:34.090 --> 00:01:36.000
Let's come down.

45
00:01:36.000 --> 00:01:37.090
Let's come in this

46
00:01:37.090 --> 00:01:40.090
and let's go ahead and on line 40

47
00:01:40.090 --> 00:01:42.000
I'm going to put a

48
00:01:42.000 --> 00:01:44.050
comment saying this is property

49
00:01:44.050 --> 00:01:46.030
for binary

50
00:01:46.030 --> 00:01:47.090
strategy.

51
00:01:47.090 --> 00:01:48.070
Okay.

52
00:01:48.070 --> 00:01:50.020
And what are we going to do on the configure object

53
00:01:50.020 --> 00:01:53.000
we'll take config.

54
00:01:53.000 --> 00:01:55.050
with binary data strategy

55
00:01:55.050 --> 00:01:58.010
and the binary data strategy options

56
00:01:58.010 --> 00:02:01.010
are available on that API itself like that.

57
00:02:01.010 --> 00:02:02.070
So you can choose one of the

58
00:02:02.070 --> 00:02:04.070
three by default as we said it uses the

59
00:02:04.070 --> 00:02:05.080
byte encoding but,

60
00:02:05.080 --> 00:02:07.090
let's say you want to use base 64 encoding

61
00:02:07.090 --> 00:02:11.000
that also is possible.

62
00:02:11.000 --> 00:02:13.010
Okay so let's come back here

63
00:02:13.010 --> 00:02:16.010
and on line 16 in the test class

64
00:02:16.010 --> 00:02:20.020
we are going to make our name be JSON instance first.

65
00:02:20.020 --> 00:02:23.050
Say JSONbBuilder.create.

66
00:02:23.050 --> 00:02:26.040
(keys clicking)

67
00:02:26.040 --> 00:02:27.040
And I'm gonna do two runs.

68
00:02:27.040 --> 00:02:30.070
I'm gonna show you the default byte encoding

69
00:02:30.070 --> 00:02:31.060
that it uses

70
00:02:31.060 --> 00:02:33.070
and once we see the output for that then,

71
00:02:33.070 --> 00:02:36.000
we'll see the output for the base 64 encoding.

72
00:02:36.000 --> 00:02:37.030
Okay and then we'll see that yes,

73
00:02:37.030 --> 00:02:39.020
there is indeed a difference so you can use it

74
00:02:39.020 --> 00:02:40.060
according to your requirement.

75
00:02:40.060 --> 00:02:43.020
So you've created an empty JSONb instance

76
00:02:43.020 --> 00:02:45.060
and what I'm going to say is sys out.

77
00:02:45.060 --> 00:02:47.050
I'm going to use that JSONb instance

78
00:02:47.050 --> 00:02:50.000
and let's say two JSON.

79
00:02:50.000 --> 00:02:51.070
So when you say two JSON,

80
00:02:51.070 --> 00:02:53.090
I'm going to pass that bytes array

81
00:02:53.090 --> 00:02:57.050
Okay.

82
00:02:57.050 --> 00:03:00.040
Alright so I'm going to put a small comment here

83
00:03:00.040 --> 00:03:04.010
the default encoding output

84
00:03:04.010 --> 00:03:05.040
just to make sure that we understand

85
00:03:05.040 --> 00:03:06.050
that there's a difference.

86
00:03:06.050 --> 00:03:09.030
Okay, let's run this.

87
00:03:09.030 --> 00:03:11.000
Yeah, so that's how that

88
00:03:11.000 --> 00:03:14.000
entire byte encoding format is printed.

89
00:03:14.000 --> 00:03:15.080
Okay, now what I'm gonna do,

90
00:03:15.080 --> 00:03:18.040
I'm going to get the object mapper

91
00:03:18.040 --> 00:03:21.030
and pass it to the create API on line 19

92
00:03:21.030 --> 00:03:23.020
because in the configure object

93
00:03:23.020 --> 00:03:25.000
we have set that the encoding style

94
00:03:25.000 --> 00:03:26.060
should be base 64.

95
00:03:26.060 --> 00:03:29.090
Okay, so let's get the

96
00:03:29.090 --> 00:03:33.010
object mapper

97
00:03:33.010 --> 00:03:34.030
get object mapper

98
00:03:34.030 --> 00:03:36.070
and now when we try to output the bytes,

99
00:03:36.070 --> 00:03:39.030
let's see how that output is going to be.

100
00:03:39.030 --> 00:03:41.060
So,

101
00:03:41.060 --> 00:03:45.010
this comment will go out now and now we'll see

102
00:03:45.010 --> 00:03:50.030
the base 64

103
00:03:50.030 --> 00:03:52.040
encoding.

104
00:03:52.040 --> 00:03:53.050
Okay.

105
00:03:53.050 --> 00:03:57.020
So let's run this.

106
00:03:57.020 --> 00:03:58.020
Yes so do you see

107
00:03:58.020 --> 00:04:00.020
that now there is a different encoding mechanism

108
00:04:00.020 --> 00:04:02.050
that it is trying to use for the byte array

109
00:04:02.050 --> 00:04:03.080
that you have in your application.

110
00:04:03.080 --> 00:04:07.000
So you can employ these different kinds of encoding

111
00:04:07.000 --> 00:04:10.000
formats when it comes to binary data strategies.

