WEBVTT
1
00:00:00.090 --> 00:00:04.010
- [Instructor] Okay, next one is final fields.

2
00:00:04.010 --> 00:00:06.000
Okay, how do final fields look like

3
00:00:06.000 --> 00:00:07.070
in JSON serialization?

4
00:00:07.070 --> 00:00:12.020
Let's go there and make sure we go right up

5
00:00:12.020 --> 00:00:14.060
and create a final variable.

6
00:00:14.060 --> 00:00:18.070
So I'm gonna say "public final", "string",

7
00:00:18.070 --> 00:00:21.010
and let's declare the user type.

8
00:00:21.010 --> 00:00:22.090
It's a final variable, which is why

9
00:00:22.090 --> 00:00:25.040
I have used that naming convention.

10
00:00:25.040 --> 00:00:26.050
The convention is the always

11
00:00:26.050 --> 00:00:29.050
the variable name is going to be all in uppercase, right?

12
00:00:29.050 --> 00:00:30.090
All characters in uppercase.

13
00:00:30.090 --> 00:00:33.090
So let's give it a value, I'll say, "admin".

14
00:00:33.090 --> 00:00:36.030
Let's say this user is the admin tag.

15
00:00:36.030 --> 00:00:37.080
Okay, I'm setting a value right there

16
00:00:37.080 --> 00:00:39.020
because it's a final field.

17
00:00:39.020 --> 00:00:40.070
Right? The Java concept.

18
00:00:40.070 --> 00:00:43.010
Now let's come down, and let's see that

19
00:00:43.010 --> 00:00:45.050
when I try to serialize the user object,

20
00:00:45.050 --> 00:00:48.040
whether that final field shows up or not.

21
00:00:48.040 --> 00:00:51.000
So let's go ahead and run this...

22
00:00:51.000 --> 00:00:51.080
Yes it does.

23
00:00:51.080 --> 00:00:53.000
So final fields totally work

24
00:00:53.000 --> 00:00:54.080
for JSON Binding API.

25
00:00:54.080 --> 00:00:58.020
That's good. Next is static fields.

26
00:00:58.020 --> 00:01:01.030
So let's say I want to put a static field right up there,

27
00:01:01.030 --> 00:01:03.030
I want to go ahead and count

28
00:01:03.030 --> 00:01:05.040
the number of users in my system.

29
00:01:05.040 --> 00:01:07.070
I will make a field, let's say,

30
00:01:07.070 --> 00:01:10.070
"public static...

31
00:01:10.070 --> 00:01:13.020
"int counter"...

32
00:01:13.020 --> 00:01:16.070
Set it to zero initially, and let's go down,

33
00:01:16.070 --> 00:01:17.060
run this file again,

34
00:01:17.060 --> 00:01:21.080
and check whether the static field shows up...

35
00:01:21.080 --> 00:01:22.060
It does not.

36
00:01:22.060 --> 00:01:23.090
Static fields do not show up

37
00:01:23.090 --> 00:01:27.000
when the serialization process happens with JSON Binding.

38
00:01:27.000 --> 00:01:29.050
It's a static field, and the logical explanation will be

39
00:01:29.050 --> 00:01:31.040
since static field is on the class level,

40
00:01:31.040 --> 00:01:34.000
you will not have it on the user instance level,

41
00:01:34.000 --> 00:01:36.070
and that's why it doesn't care for serialization.

42
00:01:36.070 --> 00:01:39.010
That's the logical explanation for it.

43
00:01:39.010 --> 00:01:42.020
Okay, and the last one, transient field.

44
00:01:42.020 --> 00:01:45.040
Let's see how transient field behaves.

45
00:01:45.040 --> 00:01:48.040
Let's go up...

46
00:01:48.040 --> 00:01:51.020
Let's declare one more field on line 25,

47
00:01:51.020 --> 00:01:56.010
and I'm gonna say "public transient"...

48
00:01:56.010 --> 00:01:58.070
Let's say, "boolean type"...

49
00:01:58.070 --> 00:02:01.010
And say "isMember"...

50
00:02:01.010 --> 00:02:04.020
We do not want to mention this information,

51
00:02:04.020 --> 00:02:06.060
that's why we're taking it as transient.

52
00:02:06.060 --> 00:02:08.070
So we'll say false...

53
00:02:08.070 --> 00:02:11.060
Okay, and let's find out whether the isMember property

54
00:02:11.060 --> 00:02:14.030
is going to show up in the serialization process.

55
00:02:14.030 --> 00:02:18.010
Let's go down, run the file again...

56
00:02:18.010 --> 00:02:20.060
Yeah, so it does not show up.

57
00:02:20.060 --> 00:02:23.050
So we already know this fundamental concept, don't we?

58
00:02:23.050 --> 00:02:27.070
When we talk about the transient modifier in Java platform,

59
00:02:27.070 --> 00:02:31.010
the transient modifier is specifically going to be allocated

60
00:02:31.010 --> 00:02:34.020
to those fields for which you do not want

61
00:02:34.020 --> 00:02:36.050
the serialization process to happen, right?

62
00:02:36.050 --> 00:02:39.000
In Java, of course you have this concept of serialization,

63
00:02:39.000 --> 00:02:41.080
where you can serialize an object to an external file.

64
00:02:41.080 --> 00:02:44.080
And if you do not want to serialize certain properties

65
00:02:44.080 --> 00:02:47.050
of your objects, you always mark them as transient.

66
00:02:47.050 --> 00:02:50.040
And JSON Binding API respects that rule,

67
00:02:50.040 --> 00:02:52.080
and hence when you mark a field as transient,

68
00:02:52.080 --> 00:02:54.080
it does not take that into consideration

69
00:02:54.080 --> 00:02:56.080
for the serialization process.

70
00:02:56.080 --> 00:03:00.060
Okay, so that's what JSON Binding employs

71
00:03:00.060 --> 00:03:03.050
as visibility settings for your fields.

72
00:03:03.050 --> 00:03:05.070
We'll just quickly remind ourselves that

73
00:03:05.070 --> 00:03:08.020
whenever you talk about the user Bean,

74
00:03:08.020 --> 00:03:10.010
or any Bean for that matter,

75
00:03:10.010 --> 00:03:13.000
the getter method for all the properties,

76
00:03:13.000 --> 00:03:16.020
that's the one that the JSON Binding is going to use

77
00:03:16.020 --> 00:03:18.030
during serialization.

78
00:03:18.030 --> 00:03:20.070
However, when it deserializes your object,

79
00:03:20.070 --> 00:03:23.070
it is going to employ the setter method.

80
00:03:23.070 --> 00:03:26.060
So deserialization is creating an instance,

81
00:03:26.060 --> 00:03:28.070
taking the values from the JSON document,

82
00:03:28.070 --> 00:03:30.010
and setting it to your fields,

83
00:03:30.010 --> 00:03:31.080
so it will require the setter.

84
00:03:31.080 --> 00:03:33.060
But when it does serialization,

85
00:03:33.060 --> 00:03:35.070
it wants to write them to a string or a file

86
00:03:35.070 --> 00:03:38.000
so it will get the values of your properties,

87
00:03:38.000 --> 00:03:40.060
and that's why you need the getter method.

88
00:03:40.060 --> 00:03:42.080
So that's all folks for the visibility settings,

89
00:03:42.080 --> 00:03:45.000
we'll see the remaining parts in the next videos.

