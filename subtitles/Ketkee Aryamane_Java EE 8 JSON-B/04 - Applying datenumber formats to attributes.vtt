WEBVTT
1
00:00:00.050 --> 00:00:02.050
- [Instructor] Up next is the customized mapping

2
00:00:02.050 --> 00:00:05.020
for applying a date and number format.

3
00:00:05.020 --> 00:00:08.070
Now, by default, JSON binding API uses the ISO format

4
00:00:08.070 --> 00:00:10.080
to format your data number fields,

5
00:00:10.080 --> 00:00:12.090
so let's head back to the IDE,

6
00:00:12.090 --> 00:00:18.030
and let's create a test class here.

7
00:00:18.030 --> 00:00:20.050
Test, date, time, formats.

8
00:00:20.050 --> 00:00:25.040
Let the convention be right, OK.

9
00:00:25.040 --> 00:00:27.090
And let's come down and grab the main method,

10
00:00:27.090 --> 00:00:29.060
and under that, I'm going to just create

11
00:00:29.060 --> 00:00:32.090
the JsonbBuilder call

12
00:00:32.090 --> 00:00:37.020
to serialize a date object.

13
00:00:37.020 --> 00:00:43.000
New date, java route util, and provide it some long value.

14
00:00:43.000 --> 00:00:44.040
And then take this entire thing

15
00:00:44.040 --> 00:00:46.040
and print it out on the console.

16
00:00:46.040 --> 00:00:50.020
S O U T, system dot-dot-dot, print LN,

17
00:00:50.020 --> 00:00:53.010
yeah, so now if I run this,

18
00:00:53.010 --> 00:00:55.080
it'll give you that ISO format, all right?

19
00:00:55.080 --> 00:00:58.020
Now, it is possible that you can change the format

20
00:00:58.020 --> 00:01:00.050
for the respective date fields that you have

21
00:01:00.050 --> 00:01:01.080
in your Java Beans.

22
00:01:01.080 --> 00:01:06.030
For example, in my code, I have the Order object,

23
00:01:06.030 --> 00:01:08.090
and I have this couple of date fields that I have,

24
00:01:08.090 --> 00:01:10.050
Order date, and delivery date.

25
00:01:10.050 --> 00:01:13.020
And of course, I have chosen the java dot time package,

26
00:01:13.020 --> 00:01:16.030
local date API, in order to provide the data type,

27
00:01:16.030 --> 00:01:18.080
and JSON binding completely supports

28
00:01:18.080 --> 00:01:21.060
this Java dot time APIs, of course.

29
00:01:21.060 --> 00:01:24.010
So, now, what we'll do is, we'll change the format

30
00:01:24.010 --> 00:01:26.010
of the date that we have

31
00:01:26.010 --> 00:01:28.050
for either the Order date or the delivery date.

32
00:01:28.050 --> 00:01:32.030
And in order to do that, we have this @JsonbDateFormat

33
00:01:32.030 --> 00:01:35.060
annotation that you can present as the compile time itself

34
00:01:35.060 --> 00:01:39.080
and provide a format as a value of the annotation

35
00:01:39.080 --> 00:01:43.020
and then get that customized date format for your classes.

36
00:01:43.020 --> 00:01:46.030
So, let's go ahead and on that local date field,

37
00:01:46.030 --> 00:01:52.020
on line number 19, I'm going to say @JsonbDateFormat,

38
00:01:52.020 --> 00:01:54.080
and inside that I can choose whatever format that I want,

39
00:01:54.080 --> 00:01:57.060
so, let's say I'm going to say DD,

40
00:01:57.060 --> 00:02:01.060
MM, YYYY, so I want a dot as a separator

41
00:02:01.060 --> 00:02:04.000
between each of the date fields.

42
00:02:04.000 --> 00:02:06.080
Okay, so, in order to test this out,

43
00:02:06.080 --> 00:02:08.070
we already have a test class

44
00:02:08.070 --> 00:02:11.010
where we have played with the Order object.

45
00:02:11.010 --> 00:02:16.050
I'm going to pick up test data types and come down,

46
00:02:16.050 --> 00:02:20.070
and let's pick up the code for serializing the Order object,

47
00:02:20.070 --> 00:02:25.010
so this is going to be Order,

48
00:02:25.010 --> 00:02:28.020
we need the Order object, we also need the @JsonB instance,

49
00:02:28.020 --> 00:02:30.000
and we need the code for serialization,

50
00:02:30.000 --> 00:02:33.010
so, I'm gonna take codes lines number 28 through 35,

51
00:02:33.010 --> 00:02:37.020
copy them, close this, come back to our test class,

52
00:02:37.020 --> 00:02:39.050
and instead of this, just paste them here,

53
00:02:39.050 --> 00:02:43.050
with the appropriate inputs.

54
00:02:43.050 --> 00:02:47.020
Okay, so, yeah, everything is pretty much ready,

55
00:02:47.020 --> 00:02:48.040
we've also put the date format.

56
00:02:48.040 --> 00:02:50.010
Now let's see that when we serialize

57
00:02:50.010 --> 00:02:51.070
this entire Order object,

58
00:02:51.070 --> 00:02:55.020
then let's understand whether the date format shows up

59
00:02:55.020 --> 00:02:59.040
in the serialized object, so I'm going to quickly run this,

60
00:02:59.040 --> 00:03:01.040
and let's go to our project,

61
00:03:01.040 --> 00:03:07.040
and test whether it's come out correctly in the order TXT.

62
00:03:07.040 --> 00:03:10.090
Yeah, so do you see that the Order date is now right there,

63
00:03:10.090 --> 00:03:14.090
which is in the format of DD dot MM dot YYYY,

64
00:03:14.090 --> 00:03:18.030
so that's how you can serialize the date format

65
00:03:18.030 --> 00:03:20.090
according to whatever convention that you have decided

66
00:03:20.090 --> 00:03:22.070
for your application.

67
00:03:22.070 --> 00:03:23.080
So the same is going to hold true

68
00:03:23.080 --> 00:03:25.030
for the other fields as well,

69
00:03:25.030 --> 00:03:28.010
and if you put the @JsonbDateFormat on the field directly,

70
00:03:28.010 --> 00:03:30.060
then it is going to make sure that it considers the same

71
00:03:30.060 --> 00:03:33.060
for both, serialization and de-serialization.

72
00:03:33.060 --> 00:03:35.030
But, if you put it only on the getter,

73
00:03:35.030 --> 00:03:37.070
then it'll happen only for serialization.

74
00:03:37.070 --> 00:03:40.020
If you put it on the setter, then it'll consider it

75
00:03:40.020 --> 00:03:42.010
for de-serialization as well.

76
00:03:42.010 --> 00:03:44.040
So, there are multiple date formats that you can apply

77
00:03:44.040 --> 00:03:46.060
for all your date fields.

78
00:03:46.060 --> 00:03:48.030
Let's look at the other way, too.

79
00:03:48.030 --> 00:03:51.060
Alternately, we can use JsonbConfig() with date format API

80
00:03:51.060 --> 00:03:53.000
in order to set the format.

81
00:03:53.000 --> 00:03:54.060
So what this means is, if you go back

82
00:03:54.060 --> 00:03:57.040
to the object mapper class,

83
00:03:57.040 --> 00:03:59.070
let's open the object mapper class,

84
00:03:59.070 --> 00:04:03.080
and let's say here, I'll come down on line 34.

85
00:04:03.080 --> 00:04:06.020
Let me comment this.

86
00:04:06.020 --> 00:04:08.080
Let's put a new comment saying,

87
00:04:08.080 --> 00:04:12.000
property setting for date,

88
00:04:12.000 --> 00:04:14.030
and then say config,

89
00:04:14.030 --> 00:04:18.050
dot, with, date format, yeah, there we go.

90
00:04:18.050 --> 00:04:20.090
And here you can actually say,

91
00:04:20.090 --> 00:04:25.040
YYYY, MM, DD.

92
00:04:25.040 --> 00:04:27.070
Another format this is, and the locale,

93
00:04:27.070 --> 00:04:29.030
you can choose whatever locale you want.

94
00:04:29.030 --> 00:04:32.020
If you want, you can also get in the default locale,

95
00:04:32.020 --> 00:04:35.090
which is like that, okay?

96
00:04:35.090 --> 00:04:37.060
And then the config object is ready with us,

97
00:04:37.060 --> 00:04:40.060
so let's come back to the dest date time formats,

98
00:04:40.060 --> 00:04:44.020
and make sure that we pick up the config object,

99
00:04:44.020 --> 00:04:46.010
so on line number 27, whenever you're trying

100
00:04:46.010 --> 00:04:48.050
to create the empty @JsonB instance,

101
00:04:48.050 --> 00:04:50.020
I'm just going to pass the config object

102
00:04:50.020 --> 00:04:54.010
by other object mapper, so I'm gonna say, object,

103
00:04:54.010 --> 00:04:57.080
mapper, dot, get object mapper,

104
00:04:57.080 --> 00:05:00.010
okay, and the additional thing that we have to do is,

105
00:05:00.010 --> 00:05:02.000
let's go to the Order class and make sure

106
00:05:02.000 --> 00:05:03.000
that this is commented,

107
00:05:03.000 --> 00:05:05.070
because we don't want the compile time customization.

108
00:05:05.070 --> 00:05:08.000
We are trying to do a run-time customization

109
00:05:08.000 --> 00:05:09.040
with the config object,

110
00:05:09.040 --> 00:05:13.050
so let's go ahead and run this.

111
00:05:13.050 --> 00:05:15.060
Okay, so test date time format,

112
00:05:15.060 --> 00:05:17.040
we have taken the config object,

113
00:05:17.040 --> 00:05:20.050
and to that config object we have set the date format,

114
00:05:20.050 --> 00:05:25.000
so now let's run this, and test.

115
00:05:25.000 --> 00:05:28.020
So now let's go back to the Order TXT.

116
00:05:28.020 --> 00:05:30.000
It is loaded again.

117
00:05:30.000 --> 00:05:33.040
Of course, you have used the JsonbConfig object

118
00:05:33.040 --> 00:05:35.010
which is a runtime customization,

119
00:05:35.010 --> 00:05:37.020
so whatever customization you apply there,

120
00:05:37.020 --> 00:05:39.050
will apply globally to all the fields,

121
00:05:39.050 --> 00:05:42.000
which is why right now you see both the delivery date

122
00:05:42.000 --> 00:05:44.020
and the order date set to the format

123
00:05:44.020 --> 00:05:47.000
that you've specified on the config object.

