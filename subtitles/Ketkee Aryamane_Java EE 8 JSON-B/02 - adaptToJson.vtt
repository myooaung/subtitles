WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Instructor] So let us take a look at the demo now.

2
00:00:02.060 --> 00:00:05.050
The first thing that we have to do is create

3
00:00:05.050 --> 00:00:08.060
an adapter class which will implement

4
00:00:08.060 --> 00:00:11.020
the JsonbAdapter interface.

5
00:00:11.020 --> 00:00:12.070
And that's called a couple of methods

6
00:00:12.070 --> 00:00:14.050
that we spoke about in the previous video.

7
00:00:14.050 --> 00:00:17.000
So let's head back to the IDE.

8
00:00:17.000 --> 00:00:19.030
And under the custom folder,

9
00:00:19.030 --> 00:00:21.000
I'm going to create a class.

10
00:00:21.000 --> 00:00:24.060
And let's call it CustomerAdapter

11
00:00:24.060 --> 00:00:26.070
because that's the one I was trying to talk about.

12
00:00:26.070 --> 00:00:29.040
The use cases and the customer object that I have,

13
00:00:29.040 --> 00:00:31.020
I need to send out only two fields

14
00:00:31.020 --> 00:00:33.070
as a part of serialization then, the serialization.

15
00:00:33.070 --> 00:00:36.010
So I'm going to write an adapter for that.

16
00:00:36.010 --> 00:00:37.050
And what do you do on this?

17
00:00:37.050 --> 00:00:42.010
You say implement JSONbAdapter.

18
00:00:42.010 --> 00:00:43.020
That's the one.

19
00:00:43.020 --> 00:00:45.020
So the JSONbAdapter is going to ask you

20
00:00:45.020 --> 00:00:47.030
for two arguments in the javax syntax.

21
00:00:47.030 --> 00:00:50.080
One is the original object which is the customer,

22
00:00:50.080 --> 00:00:53.000
then the adapted object that you actually want

23
00:00:53.000 --> 00:00:54.050
as a part of your requirement.

24
00:00:54.050 --> 00:00:56.030
So the original object is the customer,

25
00:00:56.030 --> 00:01:02.000
so let's import that, com.app.beans.

26
00:01:02.000 --> 00:01:07.080
And the next one is, of course, going to be the JSON object.

27
00:01:07.080 --> 00:01:09.090
So what we do is we take the customer object,

28
00:01:09.090 --> 00:01:11.070
and we convert it into a JSON object

29
00:01:11.070 --> 00:01:13.020
and then that's serialized.

30
00:01:13.020 --> 00:01:17.050
So I'm going to take that import from javax.json.

31
00:01:17.050 --> 00:01:19.080
So it'll give you access to those JSONP APIs.

32
00:01:19.080 --> 00:01:24.010
We know that JSON binding uses JSONP internally.

33
00:01:24.010 --> 00:01:26.010
Okay, so once we do this, let's implement

34
00:01:26.010 --> 00:01:29.020
the abstract methods.

35
00:01:29.020 --> 00:01:30.090
Right, so now you have two methods.

36
00:01:30.090 --> 00:01:32.090
Let's understand and observe what they do for us.

37
00:01:32.090 --> 00:01:36.040
adaptToJson, which takes a parameter

38
00:01:36.040 --> 00:01:38.090
of the original customer object.

39
00:01:38.090 --> 00:01:41.080
So I'm going to take this object, the original object,

40
00:01:41.080 --> 00:01:44.080
and then I'm going to do whatever I want on it

41
00:01:44.080 --> 00:01:47.010
which is the customization that I want to do

42
00:01:47.010 --> 00:01:49.090
which could then have been met by the annotations

43
00:01:49.090 --> 00:01:53.000
or the JSONB config customizations, right?

44
00:01:53.000 --> 00:01:54.090
So I'm going to write down the logic

45
00:01:54.090 --> 00:01:57.040
for the specific serialization that I want to do,

46
00:01:57.040 --> 00:02:00.040
and then I'll convert it into a JSON object.

47
00:02:00.040 --> 00:02:02.020
Then it will get serialized.

48
00:02:02.020 --> 00:02:03.060
The process the other way around will be

49
00:02:03.060 --> 00:02:06.060
I will have an input parameter as the JSON object,

50
00:02:06.060 --> 00:02:09.040
and then I'll get that converted to the customer object

51
00:02:09.040 --> 00:02:12.040
which is going to suit the needs of my application.

52
00:02:12.040 --> 00:02:16.050
Okay, so let's go ahead and now write in the logic

53
00:02:16.050 --> 00:02:18.090
for the customer adapter.

54
00:02:18.090 --> 00:02:21.030
So let's go there, and let's get rid

55
00:02:21.030 --> 00:02:23.030
of the default implementation.

56
00:02:23.030 --> 00:02:26.080
We don't want this.

57
00:02:26.080 --> 00:02:28.080
Now inside this, the first thing that I'm going to do

58
00:02:28.080 --> 00:02:31.090
is I'm going to create an instance of that JSONB object.

59
00:02:31.090 --> 00:02:35.010
Let that be ready with me.

60
00:02:35.010 --> 00:02:37.040
Let that be null initially.

61
00:02:37.040 --> 00:02:38.050
And let's also do one more thing.

62
00:02:38.050 --> 00:02:40.090
I'm not too happy with the kind of names

63
00:02:40.090 --> 00:02:43.050
that have been given to the generated parameters,

64
00:02:43.050 --> 00:02:45.050
so I'll label this as customer.

65
00:02:45.050 --> 00:02:48.070
Now that looks a little comfortable, looks a little better.

66
00:02:48.070 --> 00:02:51.060
Okay, so now what I'm going to do is

67
00:02:51.060 --> 00:02:59.030
I am going to say on line 23 that if the customer object

68
00:02:59.030 --> 00:03:05.030
dot IsPrimeUser is true.

69
00:03:05.030 --> 00:03:07.040
So if the customer is prime user,

70
00:03:07.040 --> 00:03:11.000
then I'm going to send out information like this.

71
00:03:11.000 --> 00:03:15.050
I'm going to say the jsonObject that I created before,

72
00:03:15.050 --> 00:03:18.060
I'm going to build a JSON object on my own right now

73
00:03:18.060 --> 00:03:21.010
with only two fields from the customer bin,

74
00:03:21.010 --> 00:03:24.010
the PrimeUser and the CustomerID.

75
00:03:24.010 --> 00:03:26.090
Okay, in order to do that, I'll have to get hold

76
00:03:26.090 --> 00:03:29.000
of that JSON class that we have

77
00:03:29.000 --> 00:03:33.040
which is coming from the javax.json package.

78
00:03:33.040 --> 00:03:38.040
And on that, I'm going to say, createObjectBuilder().

79
00:03:38.040 --> 00:03:41.030
To this, I will say add two fields.

80
00:03:41.030 --> 00:03:44.000
I want customerID, and I want the prime user field.

81
00:03:44.000 --> 00:03:49.000
So the first one will be, let me label this customerID,

82
00:03:49.000 --> 00:03:55.000
and the value will, of course, be customer.getCustomerID.

83
00:03:55.000 --> 00:03:57.040
So that's the first field that I want to have

84
00:03:57.040 --> 00:03:59.020
as a part of my serialization.

85
00:03:59.020 --> 00:04:01.000
The other field that I want to have is,

86
00:04:01.000 --> 00:04:02.060
I'm going to add another field,

87
00:04:02.060 --> 00:04:06.070
and that field is isPrimeUser.

88
00:04:06.070 --> 00:04:09.080
Okay, and this time, I don't want to pass

89
00:04:09.080 --> 00:04:11.010
the value as true.

90
00:04:11.010 --> 00:04:13.040
I want to pass a value which says

91
00:04:13.040 --> 00:04:15.010
that yes, it is a PrimeUser.

92
00:04:15.010 --> 00:04:17.030
I want to do something of this sort.

93
00:04:17.030 --> 00:04:20.050
Okay, and once this is done, then I can finally call

94
00:04:20.050 --> 00:04:23.040
the build API.

95
00:04:23.040 --> 00:04:26.050
So what I'm doing is, this is my original object.

96
00:04:26.050 --> 00:04:29.080
From there, I'm trying to check whether it is a prime user.

97
00:04:29.080 --> 00:04:32.040
If it is a prime user, then I am going to serialize

98
00:04:32.040 --> 00:04:34.080
this object with only two fields which is one,

99
00:04:34.080 --> 00:04:37.060
customerID, second, the PrimeUser.

100
00:04:37.060 --> 00:04:40.020
Moreover, I can also write my custom logic

101
00:04:40.020 --> 00:04:42.050
so that I change the values of the fields.

102
00:04:42.050 --> 00:04:44.090
So when I send out this information of customerID

103
00:04:44.090 --> 00:04:46.060
and isPrimeUser, I do not want to say

104
00:04:46.060 --> 00:04:48.060
PrimerUser is true or false

105
00:04:48.060 --> 00:04:50.020
because the other system does not expect it

106
00:04:50.020 --> 00:04:51.010
to be like that.

107
00:04:51.010 --> 00:04:52.070
It expects a string.

108
00:04:52.070 --> 00:04:55.000
It could either be a regular user

109
00:04:55.000 --> 00:04:56.060
or it could be a prime user.

110
00:04:56.060 --> 00:04:59.000
So I don't want to send out true or false values

111
00:04:59.000 --> 00:05:00.020
in the serialized product.

112
00:05:00.020 --> 00:05:02.020
I want to actually send out strings like that,

113
00:05:02.020 --> 00:05:05.050
PRIME_USER or REGULAR_USER.

114
00:05:05.050 --> 00:05:10.060
So let's also put an else statement on line 28.

115
00:05:10.060 --> 00:05:13.050
We're just going to copy this line 26

116
00:05:13.050 --> 00:05:17.060
and go on line 29, paste it, and instead

117
00:05:17.060 --> 00:05:22.040
of PRIME_USER, we say this is a REGULAR_USER.

118
00:05:22.040 --> 00:05:26.030
Okay, once all of this is done, let's just return

119
00:05:26.030 --> 00:05:30.030
that jsonObject back from this method.

120
00:05:30.030 --> 00:05:33.030
Alright, so there were two purposes of this use case.

121
00:05:33.030 --> 00:05:35.030
One is I wanted to serialize an object

122
00:05:35.030 --> 00:05:37.010
with only two fields: the customerID

123
00:05:37.010 --> 00:05:38.060
and the PrimeUser field.

124
00:05:38.060 --> 00:05:40.060
Second purpose was, I did not want

125
00:05:40.060 --> 00:05:43.070
to send true or false in case of the PrimeUser field.

126
00:05:43.070 --> 00:05:46.020
I wanted to send out information like this,

127
00:05:46.020 --> 00:05:51.040
whether it's a PRIME_USER or a REGULAR_USER in uppercases.

128
00:05:51.040 --> 00:05:54.060
So we have returned the logic for the adaptToJson

129
00:05:54.060 --> 00:05:57.000
which is going to be called as a part

130
00:05:57.000 --> 00:05:59.010
of the serialization of customer object

131
00:05:59.010 --> 00:06:01.010
to a JSON representation.

132
00:06:01.010 --> 00:06:03.040
In the next video, we'll also give an implementation

133
00:06:03.040 --> 00:06:04.050
to the other way around.

134
00:06:04.050 --> 00:06:06.010
When you have a JSON representation,

135
00:06:06.010 --> 00:06:08.090
how do we convert it back to the customer object.

136
00:06:08.090 --> 00:06:11.000
We'll see that in the next video.

