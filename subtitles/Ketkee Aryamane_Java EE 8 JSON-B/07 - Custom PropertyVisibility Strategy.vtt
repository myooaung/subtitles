WEBVTT
1
00:00:00.060 --> 00:00:03.000
- [Narrator] Lets know take a look as how the property

2
00:00:03.000 --> 00:00:08.010
visibility strategy customization at the runtime will work.

3
00:00:08.010 --> 00:00:10.060
So this is a JSON-B Config object that we have for

4
00:00:10.060 --> 00:00:13.010
runtime customizations, and on that we can actually

5
00:00:13.010 --> 00:00:15.090
feed the property visibility strategy,

6
00:00:15.090 --> 00:00:19.060
but for that we'll have to write down our own class.

7
00:00:19.060 --> 00:00:21.080
So there is a custom class that we want to write

8
00:00:21.080 --> 00:00:24.020
in order to do this demo.

9
00:00:24.020 --> 00:00:26.090
So what we want to do is, in the first initial radials when

10
00:00:26.090 --> 00:00:28.080
we just started off with the demos

11
00:00:28.080 --> 00:00:30.060
we had created a user class.

12
00:00:30.060 --> 00:00:34.080
And there we have seen, that if you have a public field

13
00:00:34.080 --> 00:00:38.050
with private getter setters, do you see them?

14
00:00:38.050 --> 00:00:41.070
And then we said that is is an old combination.

15
00:00:41.070 --> 00:00:44.090
The other combinations is, lets say you have a private field

16
00:00:44.090 --> 00:00:46.090
and you do not have public getter setters,

17
00:00:46.090 --> 00:00:49.070
in that case also these kind of fields will be

18
00:00:49.070 --> 00:00:52.070
skipped during serialization.

19
00:00:52.070 --> 00:00:55.010
Right, we had discussed this at that point when we saw

20
00:00:55.010 --> 00:00:57.000
the properties visibility.

21
00:00:57.000 --> 00:00:59.060
So what we want to do is, we're going to alter this,

22
00:00:59.060 --> 00:01:02.070
we're going to force JSON binding API to pick up

23
00:01:02.070 --> 00:01:05.070
the private fields for serialization no matter what.

24
00:01:05.070 --> 00:01:08.050
So in order to do that, we'll have to write a custom class

25
00:01:08.050 --> 00:01:11.060
so I'm going to go in com.app.custom

26
00:01:11.060 --> 00:01:15.060
and then I'll write a class, lets call it

27
00:01:15.060 --> 00:01:18.070
(typing)

28
00:01:18.070 --> 00:01:22.040
FieldsVisibilityStrategy.

29
00:01:22.040 --> 00:01:26.080
Let me spell that correctly.

30
00:01:26.080 --> 00:01:29.010
Yes, looks okay.

31
00:01:29.010 --> 00:01:31.060
And this will implement

32
00:01:31.060 --> 00:01:34.030
PropertyVisibilityStrategy

33
00:01:34.030 --> 00:01:36.020
that's the interface.

34
00:01:36.020 --> 00:01:38.000
So of course we'll have to implement a couple

35
00:01:38.000 --> 00:01:40.080
of abstract methods, lets go ahead and do that.

36
00:01:40.080 --> 00:01:42.030
And what does that say?

37
00:01:42.030 --> 00:01:44.050
Public boolean is visible.

38
00:01:44.050 --> 00:01:47.040
Public boolean is visible but one is for the method

39
00:01:47.040 --> 00:01:48.060
and one is for the field.

40
00:01:48.060 --> 00:01:50.040
So basically employing the Java reflection mechanism

41
00:01:50.040 --> 00:01:53.060
to find out the current field and the current method, okay.

42
00:01:53.060 --> 00:01:55.060
So what we're going to do here is first lets get rid

43
00:01:55.060 --> 00:01:59.070
of the default implementation so I'm going to remove that.

44
00:01:59.070 --> 00:02:02.080
Okay, and what I'm going to do is I'm going to say

45
00:02:02.080 --> 00:02:05.050
return true, that's all.

46
00:02:05.050 --> 00:02:07.060
Every field whichever field it is that

47
00:02:07.060 --> 00:02:10.030
you are trying to serialize I want it to be visible

48
00:02:10.030 --> 00:02:12.090
this is what I'm forcing, so JSON-B is going

49
00:02:12.090 --> 00:02:14.050
to come ahead and look at this implementation

50
00:02:14.050 --> 00:02:18.030
and says okay I had a strategy that I wanted to respect

51
00:02:18.030 --> 00:02:21.030
public getter setters and then if they were not present

52
00:02:21.030 --> 00:02:24.000
and if the field was private I was going to ignore it,

53
00:02:24.000 --> 00:02:26.000
but now that you're forcing me to do it,

54
00:02:26.000 --> 00:02:27.090
alright I'll consider your private field.

55
00:02:27.090 --> 00:02:30.060
This is what the binding APIs going to tell us okay.

56
00:02:30.060 --> 00:02:33.040
As for the hema dots, yes for that to let it go

57
00:02:33.040 --> 00:02:36.070
and observe all the methods, we don't want any problems.

58
00:02:36.070 --> 00:02:41.010
Oh, the return statement, alright.

59
00:02:41.010 --> 00:02:45.090
Okay, how do we test this? Let's go and make a class first.

60
00:02:45.090 --> 00:02:48.050
Okay we wouldn't be able to test this in a different class

61
00:02:48.050 --> 00:02:50.070
because we have certain private properties right.

62
00:02:50.070 --> 00:02:53.060
Java's private modifier says it will not be accessible

63
00:02:53.060 --> 00:02:56.030
outside the class in which it was declared.

64
00:02:56.030 --> 00:02:58.020
Okay so we can't do this we'll have to go back

65
00:02:58.020 --> 00:03:01.070
to the user class itself and do the rest of the stuff.

66
00:03:01.070 --> 00:03:05.030
So lets go down and if we remember we'll recollect from

67
00:03:05.030 --> 00:03:08.010
our discussion that we already written out the main material

68
00:03:08.010 --> 00:03:10.050
to test out the private field scenario because we

69
00:03:10.050 --> 00:03:13.080
couldn't access them anywhere else okay.

70
00:03:13.080 --> 00:03:16.090
So we are going to do that testing part right here.

71
00:03:16.090 --> 00:03:20.010
So we have the user object ready with us on line 88

72
00:03:20.010 --> 00:03:22.090
and we have a credit card number allocated to it as well,

73
00:03:22.090 --> 00:03:24.060
we have a date of birth as well

74
00:03:24.060 --> 00:03:27.040
and we said Jsonbbuilder.create that gave us the default

75
00:03:27.040 --> 00:03:30.050
JSON-B engine, fair enough, but now that

76
00:03:30.050 --> 00:03:33.080
we've written the fields visibility strategy class

77
00:03:33.080 --> 00:03:37.020
it's a custom class and if I need to apply that

78
00:03:37.020 --> 00:03:40.080
I will need the JSON-B Config object.

79
00:03:40.080 --> 00:03:44.030
Okay, so lets do one thing lets go to the object mapper.

80
00:03:44.030 --> 00:03:47.060
We have already written that object mapper.

81
00:03:47.060 --> 00:03:51.070
And lets come down lets come in this.

82
00:03:51.070 --> 00:03:54.060
And go down and say

83
00:03:54.060 --> 00:04:00.000
Property Visibility Strategy setting.

84
00:04:00.000 --> 00:04:01.060
And what are we going to do? You're going to grab that

85
00:04:01.060 --> 00:04:06.020
config object and say withPropertyVisibilityStrategy

86
00:04:06.020 --> 00:04:08.040
that's the API.

87
00:04:08.040 --> 00:04:11.060
Okay, and this is going to ask you an instance of that

88
00:04:11.060 --> 00:04:14.070
custom class you have written, it expects a reference

89
00:04:14.070 --> 00:04:18.020
of the property visibility strategy API.

90
00:04:18.020 --> 00:04:20.030
So lets instantiate

91
00:04:20.030 --> 00:04:26.040
new Fields Visibility class.

92
00:04:26.040 --> 00:04:28.080
There we go and that's all.

93
00:04:28.080 --> 00:04:31.080
Now lets come back to the user class and please note

94
00:04:31.080 --> 00:04:34.000
that I'm writing the main method in the user class

95
00:04:34.000 --> 00:04:37.060
because of the specific problem that the private modifier

96
00:04:37.060 --> 00:04:41.070
we able will not be accessed outside this class.

97
00:04:41.070 --> 00:04:44.000
Otherwise, so far for all the examples we have written

98
00:04:44.000 --> 00:04:46.050
a completely dedicated test class for it,

99
00:04:46.050 --> 00:04:48.030
but this will be an exception.

100
00:04:48.030 --> 00:04:52.050
Okay, so now we are going to create the instance of JSON-B

101
00:04:52.050 --> 00:04:55.070
on line number 91 I'm going to use the overloaded method

102
00:04:55.070 --> 00:04:57.080
and get that object mapper,

103
00:04:57.080 --> 00:05:01.020
ObjectMapper.getObjectMapper

104
00:05:01.020 --> 00:05:04.030
So you'll be able to get that JSON-B Config object which has

105
00:05:04.030 --> 00:05:09.050
been asked to apply the fields visibility strategy alright.

106
00:05:09.050 --> 00:05:12.040
Okay and now lets go ahead and run this,

107
00:05:12.040 --> 00:05:17.020
lets see what happens.

108
00:05:17.020 --> 00:05:18.090
Ya, do you see the output.

109
00:05:18.090 --> 00:05:21.030
Oh I got the credit card number this time.

110
00:05:21.030 --> 00:05:23.070
The credit card number was not supposed to be in

111
00:05:23.070 --> 00:05:25.070
the credit card number was a public field

112
00:05:25.070 --> 00:05:28.070
with private getter setters and since the getter setters

113
00:05:28.070 --> 00:05:32.020
are private JSON binding had actually skipped,

114
00:05:32.020 --> 00:05:34.050
but now since I've written my own visibility strategy

115
00:05:34.050 --> 00:05:38.090
and I said no, forcibly make sure that this kind of a field

116
00:05:38.090 --> 00:05:42.020
also comes in during the serialization process,

117
00:05:42.020 --> 00:05:45.040
that's why the credit card field is also right there

118
00:05:45.040 --> 00:05:48.060
on the serialized version of that object.

119
00:05:48.060 --> 00:05:51.080
Okay, lets also do one more thing.

120
00:05:51.080 --> 00:05:54.060
Apart from the

121
00:05:54.060 --> 00:05:56.070
credit card field,

122
00:05:56.070 --> 00:05:58.010
which is this,

123
00:05:58.010 --> 00:05:59.090
what we want to do is on line number 22

124
00:05:59.090 --> 00:06:01.080
the date of birth field that we have

125
00:06:01.080 --> 00:06:05.080
we're going to cut out the getter setters for it, okay.

126
00:06:05.080 --> 00:06:08.060
So let's come down, let's come down, way down, way down,

127
00:06:08.060 --> 00:06:13.030
here, line number 73 and 79, lets come in this code.

128
00:06:13.030 --> 00:06:17.040
I don't want the getter setters okay and lets see whether

129
00:06:17.040 --> 00:06:20.030
that date of birth is still going to come in.

130
00:06:20.030 --> 00:06:23.010
But the moment we actually get rid of the getter setters

131
00:06:23.010 --> 00:06:25.070
for that, yes it is going to give me an error here

132
00:06:25.070 --> 00:06:29.070
so I'll have to command out this line and have to assign

133
00:06:29.070 --> 00:06:33.050
the date of birth manually using the property name itself.

134
00:06:33.050 --> 00:06:37.030
So I'll say date of birth, equal to, the same value that we

135
00:06:37.030 --> 00:06:44.000
had given on line 92 I just grab that value and put it here.

136
00:06:44.000 --> 00:06:49.090
Okay, and lets see what happens.

137
00:06:49.090 --> 00:06:52.040
Oh yes do you see, another date of birth also comes

138
00:06:52.040 --> 00:06:54.080
and sits in as the part of the serialized

139
00:06:54.080 --> 00:06:56.070
version of that object.

140
00:06:56.070 --> 00:06:59.020
So this is what happens because I have forcibly written

141
00:06:59.020 --> 00:07:02.090
down the implementation to make sure that all the fields,

142
00:07:02.090 --> 00:07:06.000
no matter how they have been configured in your Java beans,

143
00:07:06.000 --> 00:07:09.080
become visible during the process of serialization.

144
00:07:09.080 --> 00:07:11.090
So that's how you can implement your own

145
00:07:11.090 --> 00:07:14.000
property visibility strategy.

