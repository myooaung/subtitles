WEBVTT
1
00:00:01.040 --> 00:00:03.620
So we have covered three different app integration

2
00:00:03.620 --> 00:00:05.720
services here within this module.

3
00:00:05.720 --> 00:00:10.240
So before we go look at our scenarios, let's quickly review what we've covered.

4
00:00:10.240 --> 00:00:15.140
So first of all, we introduced Amazon Simple Notification Service, or SNS,

5
00:00:15.140 --> 00:00:18.350
and we talked about how it enabled you to either publish messages to a

6
00:00:18.350 --> 00:00:22.240
topic or subscribe to get messages from that topic.

7
00:00:22.240 --> 00:00:26.610
We then looked at Amazon Simple Queue Service, or SQS, and we talked

8
00:00:26.610 --> 00:00:30.060
about how in many ways it worked like a mailbox. You can put messages in

9
00:00:30.060 --> 00:00:32.570
and it will keep them there for up to 14 days.

10
00:00:32.570 --> 00:00:35.860
And this will help us build fault tolerant applications.

11
00:00:35.860 --> 00:00:40.640
We also explored architectures that leverage both SNS and SQS.

12
00:00:40.640 --> 00:00:41.500
And after that,

13
00:00:41.500 --> 00:00:46.300
we examined AWS Step Functions, and we reviewed how you could take a very

14
00:00:46.300 --> 00:00:50.240
complex workflow and define it within a Step Function.

15
00:00:50.240 --> 00:00:53.070
So now, let's take a look at our scenarios.

16
00:00:53.070 --> 00:00:56.970
So our first scenario was Ruth, and her nonâ€‘profit was losing

17
00:00:56.970 --> 00:01:00.380
volunteer signups because their database server went down.

18
00:01:00.380 --> 00:01:03.020
So what is Ruth really trying to solve for here?

19
00:01:03.020 --> 00:01:03.160
Well,

20
00:01:03.160 --> 00:01:07.470
she's trying to solve for being fault tolerant because right now they're not

21
00:01:07.470 --> 00:01:10.540
fault tolerant, they're losing data with user signups.

22
00:01:10.540 --> 00:01:12.510
So what service would you recommend?

23
00:01:12.510 --> 00:01:15.670
Well, that's going to be Simple Queue Service, or SQS.

24
00:01:15.670 --> 00:01:19.840
This way they can take user signups even if their database server is down.

25
00:01:19.840 --> 00:01:21.460
And when their server comes back up,

26
00:01:21.460 --> 00:01:24.740
it can simply go pull messages off of the queue.

27
00:01:24.740 --> 00:01:29.620
Next, let's look at Jessi, and she had the complex list of onboarding steps.

28
00:01:29.620 --> 00:01:33.040
So is there a service that she could use to model these steps?

29
00:01:33.040 --> 00:01:33.630
Well, in this case,

30
00:01:33.630 --> 00:01:37.830
that would be AWS Step Functions because she could go in and take all the

31
00:01:37.830 --> 00:01:41.500
steps that she has in her onboarding process and integrate them into a

32
00:01:41.500 --> 00:01:44.440
workflow where every time there is a new customer,

33
00:01:44.440 --> 00:01:48.010
you could send them through that workflow with Step Functions.

34
00:01:48.010 --> 00:01:48.910
Now last,

35
00:01:48.910 --> 00:01:52.090
let's look at Roger. And his ecommerce company was

36
00:01:52.090 --> 00:01:53.980
building that custom platform,

37
00:01:53.980 --> 00:01:56.760
but they don't know all the different components and what messages

38
00:01:56.760 --> 00:01:59.590
they're going to need to listen to, so they want to get a service that

39
00:01:59.590 --> 00:02:02.390
would allow for both current and future parts of the platform to listen

40
00:02:02.390 --> 00:02:04.810
for those key events. Well in this case,

41
00:02:04.810 --> 00:02:08.540
that would be Simple Notification Service, or SNS.

42
00:02:08.540 --> 00:02:09.060
In this way,

43
00:02:09.060 --> 00:02:17.000
certain parts of the platform could listen for order events and other parts could listen for refund events.

