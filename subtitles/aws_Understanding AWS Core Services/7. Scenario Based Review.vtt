WEBVTT
1
00:00:01.040 --> 00:00:03.990
So next, we're going to walk you through some scenarios so

2
00:00:03.990 --> 00:00:07.010
that you can see how you have mastered the content that has

3
00:00:07.010 --> 00:00:09.340
been presented within this module.

4
00:00:09.340 --> 00:00:10.250
So first of all,

5
00:00:10.250 --> 00:00:13.380
we're going to look at Jane, and her company maintains

6
00:00:13.380 --> 00:00:15.750
two different corporate datacenters,

7
00:00:15.750 --> 00:00:18.240
and they want their datacenters to work directly

8
00:00:18.240 --> 00:00:21.230
alongside AWS for specific workloads.

9
00:00:21.230 --> 00:00:22.020
So in this case,

10
00:00:22.020 --> 00:00:24.710
they probably have some data that's stored within their own datacenter,

11
00:00:24.710 --> 00:00:28.440
but they want to have some public applications on AWS,

12
00:00:28.440 --> 00:00:31.350
and they need to have those public applications to be able

13
00:00:31.350 --> 00:00:33.600
to communicate with their datacenter.

14
00:00:33.600 --> 00:00:38.110
And so she's wondering if there's any way to have a persistent connection to AWS

15
00:00:38.110 --> 00:00:41.420
because she's worried about just sending everything out on the public internet

16
00:00:41.420 --> 00:00:43.710
that that could potentially be slow, and ideally,

17
00:00:43.710 --> 00:00:47.490
she'd like some of this communication to happen kind of behind the firewall.

18
00:00:47.490 --> 00:00:50.730
So, what service from AWS would you recommend that her

19
00:00:50.730 --> 00:00:53.840
company implement to meet these criteria?

20
00:00:53.840 --> 00:00:56.590
Okay, next, we're going to talk about Tim,

21
00:00:56.590 --> 00:00:59.580
and we've met Tim before in a previous course,

22
00:00:59.580 --> 00:01:02.320
and his company is looking to serve content through their site to

23
00:01:02.320 --> 00:01:05.870
users all around the globe. And they're looking to optimize their

24
00:01:05.870 --> 00:01:08.280
performance to users around the world.

25
00:01:08.280 --> 00:01:12.070
Now they want to leverage a content delivery network. Now

26
00:01:12.070 --> 00:01:16.040
previously, we asked what element of the AWS global infrastructure

27
00:01:16.040 --> 00:01:18.060
Tim would be leveraging, but in this case,

28
00:01:18.060 --> 00:01:20.500
we're going to get even more specific and we're going to ask the

29
00:01:20.500 --> 00:01:24.110
question, which service would enable optimized performance

30
00:01:24.110 --> 00:01:27.420
globally for this company's content?

31
00:01:27.420 --> 00:01:32.100
Okay, we've got one more scenario. Here, we're going to be looking at Ellen,

32
00:01:32.100 --> 00:01:34.990
and her company has an internal application that runs

33
00:01:34.990 --> 00:01:37.350
on an EC2 server. Now currently,

34
00:01:37.350 --> 00:01:41.780
there is some downtime because demand is greater than capacity for the server.

35
00:01:41.780 --> 00:01:42.520
So, for example,

36
00:01:42.520 --> 00:01:46.290
the server could probably handle about 150 users without fail, but in

37
00:01:46.290 --> 00:01:49.280
this case we have up to 200 simultaneous users.

38
00:01:49.280 --> 00:01:50.470
So this is a problem.

39
00:01:50.470 --> 00:01:55.100
So here, Ellen is trying to decide if she should use bigger servers, so

40
00:01:55.100 --> 00:01:59.320
in essence changing the instance type, or more servers, so more servers

41
00:01:59.320 --> 00:02:01.440
of the same kind that they already have.

42
00:02:01.440 --> 00:02:04.690
So, which scaling approach, based on the ones that we've discussed,

43
00:02:04.690 --> 00:02:08.120
would you recommend for Ellen's company? And then what services

44
00:02:08.120 --> 00:02:15.000
should they use alongside that approach? So we'll cover these answers in the next clip.

