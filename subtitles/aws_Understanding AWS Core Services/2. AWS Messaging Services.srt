1
00:00:01,040 --> 00:00:06,140
So next, we're going to talk about the AWS messaging services,

2
00:00:06,140 --> 00:00:09,800
and the first one we're going to take a look at is Amazon SNS,

3
00:00:09,800 --> 00:00:12,640
or Simple Notification Service.

4
00:00:12,640 --> 00:00:16,630
And this is a fully managed pub/sub messaging service.

5
00:00:16,630 --> 00:00:19,230
And what this enables you to do is it gives you the

6
00:00:19,230 --> 00:00:22,600
ability to create decoupled applications,

7
00:00:22,600 --> 00:00:26,840
and we'll talk more in just a minute about what that means specifically.

8
00:00:26,840 --> 00:00:31,980
But the way it works is that it organizes information according to topics,

9
00:00:31,980 --> 00:00:35,290
so you can choose to listen to one topic and not listen to another.

10
00:00:35,290 --> 00:00:38,640
And that's what we mean by pub/sub, it is publish and subscribe.

11
00:00:38,640 --> 00:00:41,080
So you can publish messages about, let's say,

12
00:00:41,080 --> 00:00:41,790
new orders,

13
00:00:41,790 --> 00:00:46,540
and then you could choose to subscribe to new orders and maybe order refunds.

14
00:00:46,540 --> 00:00:50,430
Now it integrates with multiple AWS services out of the box.

15
00:00:50,430 --> 00:00:52,640
And in addition to just providing messaging,

16
00:00:52,640 --> 00:00:55,070
meaning one part of your application can talk to

17
00:00:55,070 --> 00:00:56,660
another part of your application,

18
00:00:56,660 --> 00:01:01,030
you also can integrate this in and have end user notifications.

19
00:01:01,030 --> 00:01:01,830
So through this,

20
00:01:01,830 --> 00:01:05,650
you could send out an SMS notification or an email notification

21
00:01:05,650 --> 00:01:08,550
or a push notification to your mobile app.

22
00:01:08,550 --> 00:01:10,850
Now let's see some of this at work.

23
00:01:10,850 --> 00:01:13,990
So here we have a sample SNS architecture.

24
00:01:13,990 --> 00:01:16,500
Let's say that we're a Software as a Service company

25
00:01:16,500 --> 00:01:20,840
and we have a new user sign up, so we have a new user on our platform.

26
00:01:20,840 --> 00:01:25,120
We could choose to connect that process to an SNS topic.

27
00:01:25,120 --> 00:01:27,190
And let's say the first thing that we want to do is we

28
00:01:27,190 --> 00:01:29,730
want to integrate them into our CRM tool.

29
00:01:29,730 --> 00:01:30,500
Well in that case,

30
00:01:30,500 --> 00:01:33,300
we could choose to connect that to a Lambda function that would

31
00:01:33,300 --> 00:01:36,140
then talk to our CRM and put their data in there.

32
00:01:36,140 --> 00:01:38,970
Let's say that we also want to have a queue for some of our

33
00:01:38,970 --> 00:01:41,240
sales people to follow up with them directly.

34
00:01:41,240 --> 00:01:43,270
Well, we could use an SQS queue for that,

35
00:01:43,270 --> 00:01:47,140
and we'll talk more next about how you leverage SQS queues.

36
00:01:47,140 --> 00:01:49,960
But let's say we also want to send out an email so that the

37
00:01:49,960 --> 00:01:52,430
regional sales director in that area knows that,

38
00:01:52,430 --> 00:01:55,610
hey, you have a new customer that's come into the platform.

39
00:01:55,610 --> 00:01:57,770
We could also do that through SNS.

40
00:01:57,770 --> 00:02:01,990
But SNS works a little bit like some of the social networks

41
00:02:01,990 --> 00:02:05,040
that send out messages that then disappear.

42
00:02:05,040 --> 00:02:09,090
In this case, if we aren't listening for a message when it's published,

43
00:02:09,090 --> 00:02:11,290
we are not going to get it.

44
00:02:11,290 --> 00:02:14,320
These messages aren't kept around, they're short lived.

45
00:02:14,320 --> 00:02:16,990
However, there's another approach we can look at,

46
00:02:16,990 --> 00:02:19,500
and that is leveraging Simple Queue Service,

47
00:02:19,500 --> 00:02:21,540
or SQS.

48
00:02:21,540 --> 00:02:24,800
So this is a fully managed message queue service,

49
00:02:24,800 --> 00:02:28,010
and it also enables you to build decoupled applications.

50
00:02:28,010 --> 00:02:30,890
But it also enables you to build fault tolerant applications,

51
00:02:30,890 --> 00:02:33,760
and we'll look next at how that works.

52
00:02:33,760 --> 00:02:39,340
It supports a decent amount of data, you can put about 256 Kb into a message,

53
00:02:39,340 --> 00:02:43,490
and it allows messages to be stored for up to 14 days.

54
00:02:43,490 --> 00:02:46,320
So while we're thinking about SNS being more like some of

55
00:02:46,320 --> 00:02:48,780
those new social media apps that enable you to just send

56
00:02:48,780 --> 00:02:53,490
messages and then they disappear, SQS is a little bit more like a mailbox.

57
00:02:53,490 --> 00:02:56,110
Those messages will stay there until you actually go

58
00:02:56,110 --> 00:02:58,440
and get them out of the mailbox.

59
00:02:58,440 --> 00:03:01,990
Now there are two different types of queues that are included with SQS.

60
00:03:01,990 --> 00:03:02,930
Now,

61
00:03:02,930 --> 00:03:06,400
a standard queue does not guarantee the order of the items that

62
00:03:06,400 --> 00:03:08,560
you're going to be pulling off of the queue,

63
00:03:08,560 --> 00:03:11,910
but if you use a first in/first out queue,

64
00:03:11,910 --> 00:03:16,040
it will guarantee that you're actually processing those messages in order.

65
00:03:16,040 --> 00:03:18,530
Now let's begin to see what happens when you put

66
00:03:18,530 --> 00:03:23,390
together SNS and SQS into an architecture.

67
00:03:23,390 --> 00:03:24,360
So first of all,

68
00:03:24,360 --> 00:03:27,100
we're going to have a user order, and this is going to

69
00:03:27,100 --> 00:03:29,740
come into our ecommerce company.

70
00:03:29,740 --> 00:03:31,790
And the first thing we're going to do is we're going

71
00:03:31,790 --> 00:03:34,940
to send that through an SNS topic.

72
00:03:34,940 --> 00:03:37,400
Now we're going to do something here called fanout.

73
00:03:37,400 --> 00:03:41,140
This is one of the benefits of using an SNS topic is that we can

74
00:03:41,140 --> 00:03:44,410
actually send messages out to multiple places.

75
00:03:44,410 --> 00:03:46,220
The first place we're going to send it is we're going

76
00:03:46,220 --> 00:03:48,540
to send it to a fulfillment queue.

77
00:03:48,540 --> 00:03:52,180
So this is going to connect to a server that we have in our warehouse,

78
00:03:52,180 --> 00:03:55,460
and this is going to be our order fulfillment service.

79
00:03:55,460 --> 00:03:58,700
And so our order fulfillment service knows to go and get a message off

80
00:03:58,700 --> 00:04:02,110
of the queue and then send that out so that we know what we need to

81
00:04:02,110 --> 00:04:04,540
put in the mail to send to our customers.

82
00:04:04,540 --> 00:04:08,470
But we also have another queue, and this is where the fanout happens.

83
00:04:08,470 --> 00:04:11,650
So coming from that SNS topic, we're now sending out to multiple

84
00:04:11,650 --> 00:04:15,800
queues. The next queue is our analytics queue, and this is where we

85
00:04:15,800 --> 00:04:18,780
want to be able to store the information about the products that

86
00:04:18,780 --> 00:04:20,550
we're sending out to customers.

87
00:04:20,550 --> 00:04:23,560
And we want to eventually be able to pull this into our BI

88
00:04:23,560 --> 00:04:26,190
tool so we can see trends for our products.

89
00:04:26,190 --> 00:04:28,260
So to drop this into our data warehouse,

90
00:04:28,260 --> 00:04:32,030
we have a Lambda function on AWS that's going to drop that

91
00:04:32,030 --> 00:04:34,840
information into our data warehouse tool.

92
00:04:34,840 --> 00:04:36,330
But something happens.

93
00:04:36,330 --> 00:04:39,970
We actually send out an update to our analytics integration

94
00:04:39,970 --> 00:04:43,340
service and it goes away, it doesn't work.

95
00:04:43,340 --> 00:04:45,140
Now here's the great thing.

96
00:04:45,140 --> 00:04:48,850
While that's not working, we're still loading up items into the queue.

97
00:04:48,850 --> 00:04:52,380
We haven't lost any information. And the moment that

98
00:04:52,380 --> 00:04:54,100
that service gets back up and running,

99
00:04:54,100 --> 00:04:57,230
it will be able to go and grab messages off the queue

100
00:04:57,230 --> 00:04:59,340
and put it into our data warehouse.

101
00:04:59,340 --> 00:05:03,080
This is what we mean by fault tolerant, is that we can

102
00:05:03,080 --> 00:05:06,240
have an aspect of our system go down,

103
00:05:06,240 --> 00:05:09,780
and it can still work according to its purpose.

104
00:05:09,780 --> 00:05:12,290
But let's say we also have something else happen in the same

105
00:05:12,290 --> 00:05:16,320
day, that server that's sitting in our warehouse just dies,

106
00:05:16,320 --> 00:05:18,510
the hardware itself goes kaput.

107
00:05:18,510 --> 00:05:19,670
Well, in this case,

108
00:05:19,670 --> 00:05:23,340
we're also still able to get orders in through our fulfillment queue.

109
00:05:23,340 --> 00:05:26,580
And the moment we get both our analytics ingestion service and our

110
00:05:26,580 --> 00:05:35,000
order fulfillment service back up and running, we will continue with our normal business processes without any lost data.

