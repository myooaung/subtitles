1
00:00:01,040 --> 00:00:05,230
So next, we're going to be diving in and taking a look at Amazon DynamoDB,

2
00:00:05,230 --> 00:00:08,920
which is a very exciting service on AWS.

3
00:00:08,920 --> 00:00:11,890
So first of all, it's important to note here what it is.

4
00:00:11,890 --> 00:00:17,280
It is a fully managed, NoSQL database service. So fully managed in this case,

5
00:00:17,280 --> 00:00:19,540
this is a Software as a Service option.

6
00:00:19,540 --> 00:00:22,030
Not only do you not manage the underlying infrastructure,

7
00:00:22,030 --> 00:00:26,850
but you also don't even manage the database layer, you simply use the database.

8
00:00:26,850 --> 00:00:27,510
And in this case,

9
00:00:27,510 --> 00:00:31,780
it is not a relational database, it is a NoSQL database approach,

10
00:00:31,780 --> 00:00:34,740
which gives you some flexibility in terms of your schema,

11
00:00:34,740 --> 00:00:37,460
but also provides some other limitations depending on how

12
00:00:37,460 --> 00:00:39,140
you build your applications.

13
00:00:39,140 --> 00:00:44,440
And it provides both key value, and it also is a document database.

14
00:00:44,440 --> 00:00:47,270
And one of the great things about it is that it does enable

15
00:00:47,270 --> 00:00:51,270
extremely low latency at virtually any scale.

16
00:00:51,270 --> 00:00:53,680
Now you might be wondering how they were able to achieve that.

17
00:00:53,680 --> 00:00:57,410
Well, if you think about it, they have some great challenges to work with,

18
00:00:57,410 --> 00:00:59,580
including supporting amazon.com.

19
00:00:59,580 --> 00:01:03,640
And so DynamoDB was built with that kind of scale in mind.

20
00:01:03,640 --> 00:01:05,460
and so they were able to build a database that could

21
00:01:05,460 --> 00:01:07,490
perform extremely efficiently at a very,

22
00:01:07,490 --> 00:01:08,980
very high scale.

23
00:01:08,980 --> 00:01:12,690
And it does support automated scaling based on configuration,

24
00:01:12,690 --> 00:01:15,220
so you can choose to have its scale based on the predicted need

25
00:01:15,220 --> 00:01:17,810
that you think you're going to have, but it can also scale

26
00:01:17,810 --> 00:01:20,910
automatically based on your usage.

27
00:01:20,910 --> 00:01:23,020
And there's also several other additional features,

28
00:01:23,020 --> 00:01:25,500
like the Accelerator, or DAX,

29
00:01:25,500 --> 00:01:30,790
which gives you an inâ€‘memory cache that you can use alongside the database.

30
00:01:30,790 --> 00:01:35,390
Now we can handle more than 10 trillion requests per day and can support

31
00:01:35,390 --> 00:01:38,950
peaks of more than 20 million requests per second.

32
00:01:38,950 --> 00:01:42,800
And so this gives you just the scale that you can't get with many other

33
00:01:42,800 --> 00:01:46,140
databases, and it's provided here in a way where you don't have to

34
00:01:46,140 --> 00:01:48,490
manage any of the underlying infrastructure.

35
00:01:48,490 --> 00:01:53,540
So let's talk through some of the use cases on when you might leverage DynamoDB.

36
00:01:53,540 --> 00:01:56,130
So here we have scale without excessive maintenance.

37
00:01:56,130 --> 00:01:57,350
Now, this is critical.

38
00:01:57,350 --> 00:01:59,830
If you have ever tried to scale a database in the cloud,

39
00:01:59,830 --> 00:02:01,880
it can be quite challenging.

40
00:02:01,880 --> 00:02:04,470
So if you have run up to an issue where you've had difficulty

41
00:02:04,470 --> 00:02:07,540
scaling, DynamoDB could be a great choice.

42
00:02:07,540 --> 00:02:08,120
Also,

43
00:02:08,120 --> 00:02:11,830
if you're embracing a serverless architecture, DynamoDB

44
00:02:11,830 --> 00:02:13,430
fits into that nicely because, again,

45
00:02:13,430 --> 00:02:15,380
you're not having to manage any of the underlying

46
00:02:15,380 --> 00:02:18,340
infrastructure or even the database layer.

47
00:02:18,340 --> 00:02:22,310
Also, if you have implementations where low latency is key,

48
00:02:22,310 --> 00:02:24,620
you want to be able to get responses quickly from the

49
00:02:24,620 --> 00:02:28,060
database, DynamoDB is a great use case. But also, if you

50
00:02:28,060 --> 00:02:29,820
have data models without blob storage,

51
00:02:29,820 --> 00:02:34,730
so big bits of binary data within your database schema, if you have that,

52
00:02:34,730 --> 00:02:40,000
it's not going to work well with Dynamo, but if you don't, this could be a great fit.

