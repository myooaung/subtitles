1
00:00:01,100 --> 00:00:04,100
So now we have already talked through two of the three compute

2
00:00:04,100 --> 00:00:07,200
services that we said we would be covering in this module, and that

3
00:00:07,200 --> 00:00:11,130
would be Amazon EC2 and AWS Elastic Beanstalk.

4
00:00:11,130 --> 00:00:13,970
But now, in this clip, we're going to be introducing the third,

5
00:00:13,970 --> 00:00:18,420
which is AWS Lambda. Now Lambda is different in that it lets you run code

6
00:00:18,420 --> 00:00:22,240
without provisioning or managing servers, and you only pay for the compute

7
00:00:22,240 --> 00:00:25,500
time that you consume, and so you can run code for pretty much any type of

8
00:00:25,500 --> 00:00:29,540
application or back‑end service, all with zero administration.

9
00:00:29,540 --> 00:00:33,030
So at a high level, AWS Lambda does enable you to run code

10
00:00:33,030 --> 00:00:35,340
without provisioning infrastructure, and,

11
00:00:35,340 --> 00:00:39,640
as we said, it is only charged for usage based on execution time.

12
00:00:39,640 --> 00:00:42,430
Now the real variable when it comes to pricing with Lambda is the

13
00:00:42,430 --> 00:00:45,720
amount of memory that you make available to it,

14
00:00:45,720 --> 00:00:50,970
and you can choose to have anywhere from 128 to 3008 MB allocated for your

15
00:00:50,970 --> 00:00:54,580
functions that are running on AWS Lambda. Now the great thing is,

16
00:00:54,580 --> 00:00:59,140
is that it integrates with many AWS services just out of the box. For example,

17
00:00:59,140 --> 00:01:01,990
the work with things like S3 and DynamoDB is just

18
00:01:01,990 --> 00:01:03,850
automatic once you configure it.

19
00:01:03,850 --> 00:01:07,730
And because of that, it can enable what we would call event‑driven work flows.

20
00:01:07,730 --> 00:01:10,120
So, you could say something like when I upload a file,

21
00:01:10,120 --> 00:01:13,980
I want you to execute this function. Now this is the primary service in

22
00:01:13,980 --> 00:01:17,170
terms of compute for the serverless architecture approach,

23
00:01:17,170 --> 00:01:21,070
and we'll be talking more about serverless later within this path.

24
00:01:21,070 --> 00:01:23,130
Now, let's look at some advantages for Lambda.

25
00:01:23,130 --> 00:01:26,540
First of all, there are reduced maintenance requirements,

26
00:01:26,540 --> 00:01:28,740
so you don't have to worry about those underlying

27
00:01:28,740 --> 00:01:30,340
servers and keeping them up to date.

28
00:01:30,340 --> 00:01:32,840
In this case, AWS owns that for you.

29
00:01:32,840 --> 00:01:36,860
Also, it enables fault tolerance without you having to build it in.

30
00:01:36,860 --> 00:01:40,220
So this concept of running across multiple availability zones and making

31
00:01:40,220 --> 00:01:43,430
sure that no single point of failure can take down your application,

32
00:01:43,430 --> 00:01:45,840
well that's just built in to Lambda. Also,

33
00:01:45,840 --> 00:01:49,310
its scales based on demand, so irrespective of the number of users

34
00:01:49,310 --> 00:01:51,830
you have that are using your lambda function,

35
00:01:51,830 --> 00:01:56,310
you can know that it will scale. And your pricing is based on direct usage,

36
00:01:56,310 --> 00:01:59,280
whereas with EC2 if you have a server up and running and let's say it

37
00:01:59,280 --> 00:02:02,250
supports 1000 people and you only have 10 people using it,

38
00:02:02,250 --> 00:02:04,820
you're having to pay for that whole server, but with Lambda it

39
00:02:04,820 --> 00:02:11,000
truly maps to usage because it's only going to charge you based on the usage that you have.

