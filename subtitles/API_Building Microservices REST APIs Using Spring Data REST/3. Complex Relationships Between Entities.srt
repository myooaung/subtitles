1
00:00:00,450 --> 00:00:00,741
Now,

2
00:00:00,741 --> 00:00:03,357
we have a solid foundation for talking about complex

3
00:00:03,357 --> 00:00:07,428
relationships between the entities, ticket,

4
00:00:07,428 --> 00:00:09,870
application, and person.

5
00:00:09,870 --> 00:00:16,712
So what are the relationships between a ticket, an application, and a person?

6
00:00:16,712 --> 00:00:19,713
A ticket belongs to one application,

7
00:00:19,713 --> 00:00:24,214
and an application can have 0 or many tickets.

8
00:00:24,214 --> 00:00:27,943
A person can own 0 or many applications,

9
00:00:27,943 --> 00:00:31,966
and an application can be owned by one person.

10
00:00:31,966 --> 00:00:36,197
A person can be assigned to 0 or many tickets,

11
00:00:36,197 --> 00:00:40,077
and a ticket can be assigned to exactly one person.

12
00:00:40,077 --> 00:00:41,965
In a monolith database,

13
00:00:41,965 --> 00:00:46,427
sharing data and joining data was easy because all of

14
00:00:46,427 --> 00:00:48,830
the data resided in the same place.

15
00:00:48,830 --> 00:00:50,968
The use of microservices changes this.

16
00:00:50,968 --> 00:00:54,755
How do we handle such complex relationships between microservices?

17
00:00:54,755 --> 00:00:59,411
There are a few popular options for sharing data.

18
00:00:59,411 --> 00:01:03,487
We will look at one option called synchronous lookup.

19
00:01:03,487 --> 00:01:08,863
Now when you split data across microservices, joins are much harder to do.

20
00:01:08,863 --> 00:01:11,191
There are several options for this as well,

21
00:01:11,191 --> 00:01:15,582
and we will discuss joining in the client versus a

22
00:01:15,582 --> 00:01:18,272
service that materializes a view.

23
00:01:18,272 --> 00:01:20,983
There are several options for sharing data.

24
00:01:20,983 --> 00:01:24,594
I will demo the option where one microservice makes a synchronous call

25
00:01:24,594 --> 00:01:27,963
to retrieve the data owned by another in real time.

26
00:01:27,963 --> 00:01:33,183
In the relationship, a ticket belongs to one application,

27
00:01:33,183 --> 00:01:36,236
the ticket service will call the application service to

28
00:01:36,236 --> 00:01:40,721
retrieve information about applications since the application

29
00:01:40,721 --> 00:01:44,176
service owns the application data.

30
00:01:44,176 --> 00:01:49,228
This is the relationship between applications and people.

31
00:01:49,228 --> 00:01:54,839
An application has an owner represented by the owner ID.

32
00:01:54,839 --> 00:01:58,942
Now, instead of passing the owner ID back to the calling program,

33
00:01:58,942 --> 00:02:02,423
we want to pass back the name and the role of the owner,

34
00:02:02,423 --> 00:02:06,904
so we use the owner ID to retrieve additional

35
00:02:06,904 --> 00:02:11,678
details like the name and the role.

36
00:02:11,678 --> 00:02:16,589
When you split data across microservices, joins are much harder to do.

37
00:02:16,589 --> 00:02:19,168
There are two options for joining data.

38
00:02:19,168 --> 00:02:22,793
The first option is to join in the client application.

39
00:02:22,793 --> 00:02:27,255
So you have the calling client or application first get an

40
00:02:27,255 --> 00:02:30,024
application using the application microservice,

41
00:02:30,024 --> 00:02:38,659
then query matching tickets for that application via the ticket service.

42
00:02:38,659 --> 00:02:42,803
Materializing a view is where you maintain one or more materialized

43
00:02:42,803 --> 00:02:46,240
views that contain data for multiple services.

44
00:02:46,240 --> 00:02:50,658
The view is updated by a service that subscribes to events from the

45
00:02:50,658 --> 00:02:54,492
application and ticket service about data changes.

46
00:02:54,492 --> 00:02:56,968
For example, first you find applications,

47
00:02:56,968 --> 00:03:04,000
and then open tickets for the applications maintained in a view that joins applications and tickets.

