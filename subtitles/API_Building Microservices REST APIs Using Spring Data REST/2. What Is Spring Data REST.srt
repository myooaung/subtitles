1
00:00:04,159 --> 00:00:08,089
Spring Data REST is a part of the umbrella Spring Data project,

2
00:00:08,089 --> 00:00:12,020
and makes it easy to build hypermedia driven REST web services

3
00:00:12,020 --> 00:00:14,987
that connect to Spring Data repositories.

4
00:00:14,987 --> 00:00:19,971
At the heart of Spring Data REST lies the need to expose data in one system

5
00:00:19,971 --> 00:00:25,008
to another system as a hypermedia driven HTTP resource.

6
00:00:25,008 --> 00:00:29,337
So when you think about Spring Data REST from a conceptual standpoint,

7
00:00:29,337 --> 00:00:35,244
think about it in terms of it being a combination of Spring Data and REST APIs.

8
00:00:35,244 --> 00:00:38,892
So this means you're existing Spring Data repositories can be

9
00:00:38,892 --> 00:00:42,729
exposed as hypermedia driven RESTful web services.

10
00:00:42,729 --> 00:00:44,697
Similar to Spring Data JPA,

11
00:00:44,697 --> 00:00:48,239
which exposes APIs to access data in relational databases,

12
00:00:48,239 --> 00:00:52,636
Spring Data REST builds on top of the repository abstraction,

13
00:00:52,636 --> 00:00:59,514
and exposes data in relational databases via HTTP.

14
00:00:59,514 --> 00:01:03,625
So what is a hypermedia driven RESTful API?

15
00:01:03,625 --> 00:01:08,197
According to Roy Fielding, who first published the REST API specification,

16
00:01:08,197 --> 00:01:14,461
an API's not truly RESTful unless it follows a uniform interface.

17
00:01:14,461 --> 00:01:17,877
One of his constraints for a uniform interface is followed when

18
00:01:17,877 --> 00:01:22,041
Hypermedia As an Engine of Application State,

19
00:01:22,041 --> 00:01:24,421
or HATEOAS, is employed.

20
00:01:24,421 --> 00:01:30,048
A RESTful API should do more than expose resource endpoints over HTTP,

21
00:01:30,048 --> 00:01:33,681
it should also expose the API's documentation and

22
00:01:33,681 --> 00:01:36,789
automatically provide navigation between resources.

23
00:01:36,789 --> 00:01:40,815
Hypermedia driven APIs accomplish just that.

24
00:01:40,815 --> 00:01:45,047
This is an example of TrackZilla's Hypermedia Driven APIs,

25
00:01:45,047 --> 00:01:49,759
localhost:8080/profile is an active lent to the

26
00:01:49,759 --> 00:01:52,974
documentation's API exposed by the microservice.

27
00:01:52,974 --> 00:01:56,839
Spring Data REST employs the Hypermedia Application Language,

28
00:01:56,839 --> 00:02:01,734
or HAL, standard to associate resource objects to one another.

29
00:02:01,734 --> 00:02:06,702
Spring Data REST APIs are hypermedia driven out of the box,

30
00:02:06,702 --> 00:02:09,572
no extra configuration needed.

31
00:02:09,572 --> 00:02:12,759
What do you need in order to use Spring Data REST?

32
00:02:12,759 --> 00:02:18,963
You should be using Spring Data repositories, such as the CrudRepository.

33
00:02:18,963 --> 00:02:22,666
These are looked for at application startup.

34
00:02:22,666 --> 00:02:25,861
Spring Data REST takes a way a lot of the manual work

35
00:02:25,861 --> 00:02:28,090
usually associated with writing APIs,

36
00:02:28,090 --> 00:02:38,000
and makes implementing basic CRUD functionality for web applications very simple.

