1
00:00:02,967 --> 00:00:04,957
When I started writing software,

2
00:00:04,957 --> 00:00:08,484
N-Tier and monolithic applications were the defacto standard.

3
00:00:08,484 --> 00:00:11,386
In one single binary web artifact,

4
00:00:11,386 --> 00:00:14,675
there would be a layered architecture with decomposition of

5
00:00:14,675 --> 00:00:17,594
code into more functional components.

6
00:00:17,594 --> 00:00:22,743
There are several disadvantages to N-Tier monolithic application architecture.

7
00:00:22,743 --> 00:00:24,033
Tight coupling of code,

8
00:00:24,033 --> 00:00:28,912
which makes changes hard because a single deployment contains all of the layers,

9
00:00:28,912 --> 00:00:32,759
which causes long testing, building, and deployment cycles.

10
00:00:32,759 --> 00:00:38,636
A big monolithic application makes code reuse and sharing components difficult.

11
00:00:38,636 --> 00:00:41,948
When components are shared in a monolithic application,

12
00:00:41,948 --> 00:00:43,842
it brings about tight coupling.

13
00:00:43,842 --> 00:00:49,371
Due to tight coupling, the smallest of changes can require large scale releases,

14
00:00:49,371 --> 00:00:57,000
which impacts speed to market. This is how TrackZilla would look if it were an N-Tier monolithic application.

