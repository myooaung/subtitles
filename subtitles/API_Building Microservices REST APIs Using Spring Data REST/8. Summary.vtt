WEBVTT
1
00:00:00.000 --> 00:00:04.273
The domains in the TrackZilla application would be application catalog,

2
00:00:04.273 --> 00:00:07.424
ticket management, and user management.

3
00:00:07.424 --> 00:00:11.577
The corresponding microservices architecture would have services

4
00:00:11.577 --> 00:00:14.230
corresponding to each of these subdomains.

5
00:00:14.230 --> 00:00:18.555
So, application management service, TicketManagement service,

6
00:00:18.555 --> 00:00:20.718
and UserManagement service.

7
00:00:20.718 --> 00:00:21.739
For this demo,

8
00:00:21.739 --> 00:00:25.143
we will break up the TrackZilla monolith and create a

9
00:00:25.143 --> 00:00:28.076
ticket management service that allows us to retrieve a

10
00:00:28.076 --> 00:00:29.962
list of tickets for an application.

11
00:00:29.962 --> 00:00:35.788
So looking at this code, this is what we saw at the end of module one,

12
00:00:35.788 --> 00:00:39.158
the TrackZilla monolith with the controller layer,

13
00:00:39.158 --> 00:00:41.752
the service layer, and the data layer.

14
00:00:41.752 --> 00:00:43.591
So let's break it into microservices,

15
00:00:43.591 --> 00:00:47.055
and get it ready to become a Spring Data REST project.

16
00:00:47.055 --> 00:00:51.919
So the goal of this demo is to create our ticket management service.

17
00:00:51.919 --> 00:01:01.081
So let's remove the unneeded domain entities: application and person.

18
00:01:01.081 --> 00:01:07.106
So let's delete application.

19
00:01:07.106 --> 00:01:14.912
Let's delete person.

20
00:01:14.912 --> 00:01:17.747
Next, let's remove the unneeded repository.

21
00:01:17.747 --> 00:01:33.278
So delete the application repository and the person repository.

22
00:01:33.278 --> 00:01:43.419
Let's delete the entire service layer.

23
00:01:43.419 --> 00:01:51.294
Let's even remove the controller.

24
00:01:51.294 --> 00:01:56.502
So now let's clean up our application loader.

25
00:01:56.502 --> 00:02:01.957
Now let's get rid of the application repository and the person repository,

26
00:02:01.957 --> 00:02:07.400
let's get rid of the auto wiring.

27
00:02:07.400 --> 00:02:19.630
We are no longer creating people, so let's get rid of those.

28
00:02:19.630 --> 00:02:38.569
Now let's pass in the ID.

29
00:02:38.569 --> 00:02:40.535
Goodbye monolith.

30
00:02:40.535 --> 00:02:49.384
So let's run this and look at our database.

31
00:02:49.384 --> 00:02:52.565
Now, as the application starts up,

32
00:02:52.565 --> 00:02:59.631
this project is now a self-contained unit for the ticket management service.

33
00:02:59.631 --> 00:03:02.225
So, let's see our database.

34
00:03:02.225 --> 00:03:07.555
Go to the console for our H2 in-memory database,

35
00:03:07.555 --> 00:03:11.465
click connect, so now we only have the ticket table.

36
00:03:11.465 --> 00:03:15.789
So the ticket management service has its own private

37
00:03:15.789 --> 00:03:18.158
database specifically for tickets.

38
00:03:18.158 --> 00:03:25.000
So now the ticket management service is ready to be exposed via Spring Data REST, and that's what we will do in the next module.

