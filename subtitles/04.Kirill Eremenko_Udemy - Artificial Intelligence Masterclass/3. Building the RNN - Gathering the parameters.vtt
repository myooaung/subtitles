WEBVTT

00:00.210 --> 00:02.200
Hello and welcome to this new tutorial.

00:02.340 --> 00:08.760
Now we're about to build the Ireland part of the NTN Arnon model and what we're going to start with

00:09.000 --> 00:16.140
is to introduce all the parameters you know the Brennus that will be required to build the Arnon and

00:16.260 --> 00:22.620
the first one that we're going to introduce right now is the number of mixtures used to you know simple

00:22.620 --> 00:28.250
the probability of the next latent vector conditionally to the current latent vector the actual place

00:28.320 --> 00:29.680
in the current state.

00:29.940 --> 00:34.420
And that number of mixtures is clearly given in the article.

00:34.530 --> 00:41.160
Again in that section of the appendix because indeed in both tasks meaning the car racing task and the

00:41.160 --> 00:45.730
Dume task well the author used five Gaussian mixtures.

00:45.840 --> 00:51.760
And so the parameter we were about to introduce right now is exactly that number of mixtures.

00:51.870 --> 00:56.520
And so the name we're going to give for that parameter and we're actually going to create an object

00:56.520 --> 01:04.290
variable which will be a variable at the end and Arnon instances of this class will be self that numb

01:04.860 --> 01:09.590
mixture and we could initialize it to 5 right now.

01:09.690 --> 01:16.560
But the way we're going to do this is rather through the HPF object parameter that we have as the argument

01:16.560 --> 01:22.460
of the build model method here because indeed it contains all the hyper parameters of the engine are

01:22.480 --> 01:28.200
and model including the number of mixtures and therefore it initialized this this way we're going to

01:28.200 --> 01:36.000
call our H.B. as objects from which we're going to get that number of mixtures which has the same name

01:36.110 --> 01:37.830
not a mixture.

01:37.830 --> 01:38.610
All right perfect.

01:38.610 --> 01:42.510
And then we're also going to create a separate voidable.

01:42.570 --> 01:47.240
But this time not attached to the object and that we're going to call k mix.

01:47.280 --> 01:53.190
So I'm just taking the same variable names as the others implementation because the author's implementation

01:53.190 --> 02:00.000
is larger so if you want to develop this code to use it differently you know to perform some for example

02:00.090 --> 02:01.030
other training.

02:01.140 --> 02:05.860
Well I prefer to keep the same names for the parameters and variables as the author.

02:06.000 --> 02:13.940
So K-Max here and this is going to be as well to that number of mixture self that number of mixtures

02:13.940 --> 02:16.940
so I'm just copying this and pasting that here.

02:17.040 --> 02:17.340
All right.

02:17.360 --> 02:22.230
That was for the first important hyper parameter of the Arnon.

02:22.380 --> 02:29.400
And now we're going to introduce an initialize to other essential parameters of the Arnon which are

02:29.400 --> 02:33.750
of course dimension of the input and the dimension of the output.

02:34.020 --> 02:38.040
So let's first give the names of these parameters.

02:38.160 --> 02:45.720
The damage of the input will be in width and the damage from the output will be out with.

02:45.930 --> 02:51.460
And that's also the number of channels in respectively the input and the output.

02:51.520 --> 02:54.370
And so what are going to be these dimensions.

02:54.480 --> 02:57.590
Well let's have a look at our cheat sheet.

02:57.630 --> 03:01.550
This is our cheat sheet and right now we're building the engine Arnon.

03:01.560 --> 03:08.370
And as we can see the engine arland model here in the full world model actually has a double input it

03:08.450 --> 03:16.140
has a first input coming from the latent vector Z returned by the V and also a second input coming from

03:16.140 --> 03:18.410
the action returned by the controller.

03:18.510 --> 03:19.110
Right.

03:19.110 --> 03:24.720
You can see that the control plays the action inside the environment but not only that it also returns

03:24.720 --> 03:27.400
that same action into the engine.

03:27.430 --> 03:32.250
Arnon and therefore the engine Arnon has a double and put Z in action.

03:32.270 --> 03:36.680
So now the question is what is the dimension of Z and what is the diameter of the action.

03:36.840 --> 03:43.230
Well the dimension of Z we already know that it is Zetsche size because if we go back to our code in

03:43.230 --> 03:51.390
our vitæ we can see that Z here has the same time engine as me and sigma because this is a sum of two

03:51.690 --> 03:52.660
dense layers.

03:52.710 --> 03:59.010
And since both of these dense layers have a number of elements equal to that size and that size is equal

03:59.010 --> 04:08.370
to by default 32 then the diamond of the first input set here will be set size equal to by default 32.

04:08.460 --> 04:15.010
And this is actually confirmed in the article I made this page so that I don't have to scroll up the

04:15.030 --> 04:18.660
dimension of the left and vector is indeed 32 right.

04:18.660 --> 04:22.760
This means exactly that it is a vector of 32 elements.

04:23.120 --> 04:27.630
And now now as we have the time engine of zed What is the dimension of the action.

04:27.720 --> 04:33.090
Well and each time the agents actually ourselves as well because we are going to play the game too we're

04:33.090 --> 04:39.060
going to raise the car well and each time there are three possible actions that can be played which

04:39.060 --> 04:41.790
are first we can accelerate.

04:41.820 --> 04:44.080
Second we can slow down.

04:44.160 --> 04:51.750
And third we can turn no left or right and therefore there are three actions that are played each time.

04:51.840 --> 04:58.260
Or more specifically each time step of the environment and therefore the action here is a three dimensional

04:58.440 --> 05:08.880
input so the total dimension of the input of the MGM Arnon is thirty two plus three equals 35.

05:09.130 --> 05:15.910
And that's the number of channels we're about to introduce for this first input in with.

05:16.150 --> 05:22.010
And so again here we could initialize this as 32 plus 3 or 35.

05:22.210 --> 05:28.420
But again we're not going to do it this way we're going to do it with our HPF hyper parameter object

05:28.780 --> 05:34.390
and therefore we're going to got HP as again here from which we're going to get another attribute which

05:34.390 --> 05:41.250
will be of course attribute for that dimension of the input and which will be named input underscores

05:41.260 --> 05:43.510
CEQ underscore with us.

05:43.510 --> 05:48.320
So again I'm just taking the same parameters names as the other.

05:48.340 --> 05:49.120
All right.

05:49.120 --> 05:53.210
Now let's tackle the diamond in the output outwits.

05:53.360 --> 05:57.030
And so let's go back to our cheat sheet of the full world model.

05:57.100 --> 06:03.370
We can clearly see that this time we have a single output which is the hidden state and the state has

06:03.370 --> 06:07.390
the same dimension as the other and puts the ladies in vector.

06:07.570 --> 06:14.320
And therefore it's going to be as well 32 and therefore again we're not going to initialize this as

06:14.440 --> 06:24.760
32 but by taking our HBL to render object from which we're going to get this time the output SEC with

06:25.030 --> 06:29.170
attributes corresponding Of course to the dimensions of the output.

06:29.170 --> 06:33.140
So here I'm just replacing inputs by output.

06:33.340 --> 06:34.050
Perfect.

06:34.210 --> 06:41.680
And now one last runner that we have to introduce which is the length and which will correspond to the

06:41.680 --> 06:44.470
maximum sequence length of an episode.

06:44.470 --> 06:47.560
In other words maximum steps in an episode.

06:47.560 --> 06:53.840
Remember when we played the car racing game against the powerful AI in the first Toyoda's course.

06:54.040 --> 06:56.780
Well we played on 900 steps.

06:56.800 --> 06:58.960
This was written in the in the council.

06:59.200 --> 07:05.200
And right now what we are about to initialize is just the maximum number of steps which will be initialized

07:05.260 --> 07:06.400
as 1000.

07:06.430 --> 07:08.470
And thats of course for the training.

07:08.590 --> 07:15.520
You know the Arnon model will be trained on some episodes which will have a maximum number of 1000 steps.

07:15.520 --> 07:21.430
And the reason why we have to introduce an initialises parameter right now is because in the same build

07:21.430 --> 07:25.130
model method we will implement the train operations.

07:25.420 --> 07:33.520
All right let's do this length which again we will initialize things to our HP as object parameter.

07:33.520 --> 07:38.990
So I can either take of the HP Yes or just H.B. us like we did just above.

07:39.190 --> 07:46.900
That's the same because in the init method we initialized self that HP as as the argument HP is given

07:47.110 --> 07:50.000
when creating the instance of the engine on.

07:50.110 --> 07:52.120
So that's just the same.

07:52.120 --> 07:54.370
And from this HP is object.

07:54.520 --> 08:03.550
Well we're going to get the following hyper parameter which is the max SEC Len Max ségolène the maximum

08:03.550 --> 08:04.990
number of steps.

08:04.990 --> 08:05.530
All right.

08:05.530 --> 08:10.820
Perfect So we're done with the main parameters that we'll need to build the Arnon.

08:11.050 --> 08:17.230
And now we're just going to introduce one last thing which is the global step writes a global step of

08:17.470 --> 08:22.530
the training operation which is another parameter of the engine aren't immortal.

08:22.750 --> 08:28.390
And so we're going to create a new object variable which will cause well global step as what we did

08:28.390 --> 08:30.010
for the Wii.

08:30.070 --> 08:36.570
But first before we created we're just going to make sure that we are in the training mode and actually

08:36.590 --> 08:42.270
the training mode is once again another hyper parameter of this HBL object.

08:42.280 --> 08:47.830
And so I'm going to call the HP is objeck again from which I'm going to get that.

08:47.930 --> 08:55.810
Is training hyper parameter which will tell us the mode whether we are in training mode or in France

08:55.810 --> 08:56.470
mode.

08:56.470 --> 09:02.410
And so if HB as that is training because it was true which we don't have to specify because true is

09:02.410 --> 09:10.660
the default value of a boolean then what we can do is introduce an initialize the global step object

09:10.660 --> 09:17.790
variable and since it is exactly the same as the one we introduced here for the V.

09:17.830 --> 09:18.290
Right.

09:18.310 --> 09:18.850
Exactly.

09:18.940 --> 09:27.010
If self that is draining logicals true then self Global's that will be created as an object of the variable

09:27.010 --> 09:30.620
class by a sense of flow with the exact same argument.

09:30.620 --> 09:37.010
So I'm just copying this then I'm going to paste that inside our Arnon moral.

09:37.060 --> 09:38.070
And here we go.

09:38.170 --> 09:42.780
Now we can begin the creation of the art and architecture.

09:42.970 --> 09:48.130
So we'll do that in the next tutorials because it's actually going to be a long code section to get

09:48.130 --> 09:51.650
yourself some good energy and I'll see you as soon as you ready.

09:51.730 --> 09:54.020
Until then enjoy artificial intelligence.
