WEBVTT
1

00:00:01.600  -->  00:00:06.810
So that has been all the comparison operators here I wanted to cover,

2

00:00:06.900  -->  00:00:10.460
now let's move on to boolean operators,

3

00:00:10.560  -->  00:00:12.410
what are boolean operators?

4

00:00:12.550  -->  00:00:15.090
Let me give you an example.

5

00:00:15.090  -->  00:00:18.060
I'll write an if statement here and I'll check here

6

00:00:18.110  -->  00:00:22.130
if one equals one

7

00:00:22.950  -->  00:00:30.000
and now I want to add another condition and I do this with a boolean operator, by writing two and signs,

8

00:00:30.150  -->  00:00:33.060
I add another condition which I expect to be true.

9

00:00:33.450  -->  00:00:37.200
So here I want to check if two equals two

10

00:00:37.530  -->  00:00:48.490
and in this case, I'll print true. Now what do you think I'll get if I hit run? I get

11

00:00:49.170  -->  00:00:56.430
true and I'll also specify an else case here, just to have something in case we're entering something which would

12

00:00:56.430  -->  00:00:57.420
not be true

13

00:00:57.810  -->  00:01:00.720
but as you see, I still get true.

14

00:01:00.870  -->  00:01:09.300
So the boolean operator here basically tells Javascript both sides of this operator have

15

00:01:09.300  -->  00:01:17.460
to be true or put in other words, combine both results into one single result,

16

00:01:17.460  -->  00:01:18.830
this would also be a way of

17

00:01:18.830  -->  00:01:27.590
thinking of it. You might specify parentheses around the individual checks here, just to separate this

18

00:01:27.600  -->  00:01:28.850
a bit clearer.

19

00:01:28.950  -->  00:01:36.360
So therefore here, if I check if two equals three, which clearly is not the case and I have to add one

20

00:01:36.360  -->  00:01:37.350
parentheses here,

21

00:01:37.590  -->  00:01:39.150
so what do you think I'll get

22

00:01:39.150  -->  00:01:51.070
now? I get false because the combined operator is now no longer true but instead false

23

00:01:51.260  -->  00:01:55.140
and to make this clearer, I get rid of this and I'll make this easier here.

24

00:01:55.140  -->  00:02:07.110
I check if one equals one and then two equals three and I print out the combined result which of

25

00:02:07.110  -->  00:02:12.310
course is and I should add log here,

26

00:02:12.540  -->  00:02:16.770
so I print out this result which of course is false

27

00:02:16.910  -->  00:02:19.330
because this operator combines both results,

28

00:02:19.350  -->  00:02:22.450
that's what a boolean operator does.

29

00:02:22.470  -->  00:02:27.590
I also have another operator, the OR operator with two pipe symbols here,

30

00:02:28.140  -->  00:02:29.790
what do you think I'll get now?

31

00:02:31.320  -->  00:02:40.480
I get true because this OR operator will return true as long as any of the conditions we have here is true.

32

00:02:40.830  -->  00:02:45.030
So it prefers true and checks if anything here is true,

33

00:02:45.030  -->  00:02:47.580
of course I can chain multiple,

34

00:02:47.580  -->  00:02:52.170
so I'll add if four equals five and

35

00:02:52.620  -->  00:02:57.980
if I run this, I still get true because at least one of all these conditions here is true,

36

00:02:58.050  -->  00:03:06.770
the first one. If I change this to something which isn't true, I get false in the end. If I change this

37

00:03:06.780  -->  00:03:14.400
back to being true but I add and here, what do you think I'll get now?

38

00:03:15.360  -->  00:03:18.360
I still get true because what am I checking here?

39

00:03:18.600  -->  00:03:26.610
I check if this is true or if this is true and well, this here is still true,

40

00:03:26.610  -->  00:03:36.450
so I get true overall. It looks different if I add this here and replace this with the OR operator. If

41

00:03:36.460  -->  00:03:43.900
I now hit run, I get false because I'm requiring this to be true which would be the case

42

00:03:44.040  -->  00:03:46.730
and this to be true which is not the case.

43

00:03:46.980  -->  00:03:51.620
Now how are these conditions here treated?

44

00:03:51.750  -->  00:04:03.180
So are we checking if this is true and this is true or if this is true and this is true? We can simply

45

00:04:03.180  -->  00:04:09.810
check this by adding a 4 here or making this 5 a 4.

46

00:04:09.830  -->  00:04:15.170
Now this expression would return true, this returns true.

47

00:04:15.330  -->  00:04:19.880
So if we are checking this and this, we should get true.

48

00:04:20.070  -->  00:04:25.570
If we're only checking this and this, we should still get false, so

49

00:04:25.980  -->  00:04:28.790
let's see what happens. We get true,

50

00:04:28.950  -->  00:04:32.280
so we're actually comparing this to this,

51

00:04:32.430  -->  00:04:37.560
of course we can change this behavior with additional parentheses here.

52

00:04:37.590  -->  00:04:40.660
Now we're checking if this and this is true

53

00:04:40.980  -->  00:04:44.330
and thereafter we're checking or if this is true.

54

00:04:44.790  -->  00:04:47.140
So what would you expect now?

55

00:04:47.820  -->  00:04:54.300
Well we still get true because this part here will resolve to false sense we require both conditions

56

00:04:54.300  -->  00:04:56.610
to be true which is not the case

57

00:04:56.610  -->  00:05:01.700
but then we check if this is true or if this is true

58

00:05:01.830  -->  00:05:03.490
and this of course is true.

59

00:05:03.930  -->  00:05:09.860
So only if I change this back to 5 will we get false here

60

00:05:09.920  -->  00:05:12.510
because now no condition is satisfied.

61

00:05:12.600  -->  00:05:21.550
So we can use boolean operators to chain conditions and to resolve them to true or false.

62

00:05:21.570  -->  00:05:26.580
So we had a look at quite some operators here. Now sometimes you don't want to check if something

63

00:05:26.580  -->  00:05:33.610
is equal or if something is greater then but you want to check exactly the opposite, if it is not true,

64

00:05:33.660  -->  00:05:36.650
if it is not equal. Well you can do this too,

65

00:05:37.080  -->  00:05:41.010
you can simply try the following,

66

00:05:41.040  -->  00:05:48.420
you could check if 1 is not equal to 2 and if I now hit run, what do we expect to see in the console?

67

00:05:49.570  -->  00:05:53.400
Well you see true in this case because 1 isn't equal to 2.

68

00:05:53.550  -->  00:05:58.950
So with the exclamation mark operator, you can invert the meaning or

69

00:05:59.150  -->  00:06:01.050
the check in this case,

70

00:06:01.320  -->  00:06:03.230
so then you're checking not for equality.

71

00:06:03.240  -->  00:06:06.960
You can also do something else,

72

00:06:06.960  -->  00:06:13.680
you can create a variable, name it isTrue and let's say it's equal to true. Now with the exclamation

73

00:06:13.680  -->  00:06:16.990
mark, you can also invert the value here, 

74

00:06:17.070  -->  00:06:20.350
so if I now hit run, what do you think we'll see?

75

00:06:21.600  -->  00:06:22.830
Well now we see false,

76

00:06:22.890  -->  00:06:27.890
so with this I'm kind of converting this or I'm just inverting it,

77

00:06:27.930  -->  00:06:32.180
so true becomes false and false would become true.

78

00:06:32.320  -->  00:06:38.340
You invert the meaning, you check for the opposite and oftentimes, that is what you want to do because you might

79

00:06:38.340  -->  00:06:43.700
want to check if you got a value that is anything but one for example

80

00:06:43.760  -->  00:06:46.850
and in this case, with the exclamation mark, it's very easy to do this.
