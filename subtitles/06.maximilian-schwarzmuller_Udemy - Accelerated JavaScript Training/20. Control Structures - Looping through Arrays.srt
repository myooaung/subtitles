1

00:00:01,320  -->  00:00:10,530
Now a common thing to use such loops for is to use them in conjunction with arrays. Remember, an array,

2

00:00:10,530  -->  00:00:10,620
I'll just

3

00:00:10,620  -->  00:00:12,530
create a variable here

4

00:00:12,810  -->  00:00:17,490
looks like this with brackets and contains multiple values.

5

00:00:17,490  -->  00:00:23,490
Now, since we have multiple values in one place, I think it's one of the first things you think about

6

00:00:23,820  -->  00:00:31,180
that you could loop through this and use these values step-by-step or value for value.

7

00:00:31,500  -->  00:00:39,660
You could do that by setting i back to zero and going back to incrementing, I'll also change this to being

8

00:00:39,660  -->  00:00:42,050
smaller then something but the something,

9

00:00:42,300  -->  00:00:54,160
well it could now be hardcoded 3 and I could then log array and access the index with

10

00:00:54,420  -->  00:00:57,090
the variable i

11

00:00:57,270  -->  00:00:59,970
which of course gets increased upon each round.

12

00:00:59,970  -->  00:01:03,140
So now if I hit run, what will we see?

13

00:01:03,690  -->  00:01:08,480
Well we see 1, 2, 3 because I now step-by-step access the value in the array

14

00:01:09,060  -->  00:01:14,230
but that's not really the best way because I hardcoded the size of the array here.

15

00:01:14,550  -->  00:01:22,740
If I change this to 5 because I expect the array to have five elements but it actually only has three, what

16

00:01:22,740  -->  00:01:24,550
would I now get?

17

00:01:25,230  -->  00:01:25,700
Well I get

18

00:01:25,710  -->  00:01:29,590
undefined undefined because I'm accessing values which aren't there.

19

00:01:29,730  -->  00:01:36,600
So that's not really good because rarely can I know how big an array is and even if I could know it because

20

00:01:36,600  -->  00:01:39,420
I hardcoded it, I might change this later on

21

00:01:39,420  -->  00:01:45,710
and then I would have to change the size of all places in my code where I hardcoded it. So a better way

22

00:01:45,710  -->  00:01:53,290
is to use my array and access the length property on that array

23

00:01:53,550  -->  00:01:59,850
because remember, an array is an object and it happens to have this length property built-in

24

00:02:00,060  -->  00:02:03,580
and as this name implies, this gives me the length of the array.

25

00:02:03,900  -->  00:02:09,700
So now I'm looping as long as i is smaller than the length of the array.

26

00:02:09,720  -->  00:02:15,610
What do you think will happen if I now hit run? We get 1, 2, 3 again

27

00:02:15,810  -->  00:02:18,020
because the length is of course three.

28

00:02:18,270  -->  00:02:25,410
Notice that it is important to understand that since the first index of the array is zero, we have

29

00:02:25,410  -->  00:02:34,640
to use the smaller sign then and not smaller or equal because in this case, we would loop until i takes

30

00:02:34,710  -->  00:02:39,930
the value of three which actually tries to access the fourth element

31

00:02:40,080  -->  00:02:43,260
and that is not the behavior we would like to have.

32

00:02:43,260  -->  00:02:46,920
So this is how we would write it to loop through such an array.
