WEBVTT
1

00:00:01.350  -->  00:00:07.680
Let's have a look at another important built-in object in Javascript, the date object. The date object

2

00:00:07.680  -->  00:00:13.560
allows you to easily create dates, work with them, parse them and so on.

3

00:00:13.650  -->  00:00:20.370
For example if I wanted to have variable which stores today's date, I could simply create a new date

4

00:00:20.400  -->  00:00:30.720
like this, new Date, again date is a built-in object and if I now log today to the console, I'm not

5

00:00:30.720  -->  00:00:35.800
going to ask what we'll see because you don't know the day at which I am recording this but if I hit

6

00:00:35.800  -->  00:00:40.550
run, I get an object which would be today.

7

00:00:40.800  -->  00:00:44.550
Now of course, this is not really satisfying because we're not seeing today

8

00:00:44.940  -->  00:00:51.180
but if I execute the toString method which again is available since it is provided by Object.prototype,

9

00:00:52.650  -->  00:00:55.500
you won't see it print out like this.

10

00:00:55.500  -->  00:01:01.680
So this is an easy and convenient way to get the most recent date,

11

00:01:02.250  -->  00:01:06.110
however you can create this in a different way.

12

00:01:06.120  -->  00:01:09.970
This is the default date created when just using new date like this

13

00:01:10.110  -->  00:01:13.480
but you can pass arguments to this constructor here,

14

00:01:13.770  -->  00:01:22.080
you can pass for example the year, the month and the day to not use today's date

15

00:01:22.140  -->  00:01:25.530
but instead, generate a specific date.

16

00:01:25.920  -->  00:01:33.570
What do you think we'll now see if he hit run? We get the same format but now notice that the day

17

00:01:33.960  -->  00:01:36.850
or the specific date here is another one,

18

00:01:36.870  -->  00:01:40.350
we're now using the 26th of June, 2016.

19

00:01:40.400  -->  00:01:43.280
Now you might be wondering why June if this was 5,

20

00:01:43.470  -->  00:01:50.010
well because it starts at 0, so January is not one but instead zero, like in an array with the elements

21

00:01:50.010  -->  00:01:51.890
or the index in an array.

22

00:01:51.990  -->  00:02:00.810
So that's important to keep in mind, that you have to subtract one off the actual number, so the highest

23

00:02:00.810  -->  00:02:04.380
available month is 11 therefore which is December.

24

00:02:04.470  -->  00:02:11.220
Now what happens if I want to create a date which doesn't exist, like the 32nd of December?

25

00:02:11.640  -->  00:02:12.860
Let's see what happens.

26

00:02:13.020  -->  00:02:16.680
Well now we get January 1st of 2017,

27

00:02:16.700  -->  00:02:20.760
so it automatically counts it up to the next month or the next day

28

00:02:20.760  -->  00:02:26.160
here. You can also specify a string which describes your days,

29

00:02:26.340  -->  00:02:31.180
however this has to be a valid format and I'll come back to this valid format thing.

30

00:02:31.380  -->  00:02:36.430
So one valid format would be this one here

31

00:02:36.990  -->  00:02:39.810
and if I now hit run, what do you think we'll now see?

32

00:02:40.410  -->  00:02:42.590
Well now we got the 20th of May,

33

00:02:42.600  -->  00:02:49.800
so here it's not starting at zero because here we have a string, no numbers and we just write our date

34

00:02:49.800  -->  00:02:50.260
.

35

00:02:50.310  -->  00:02:52.700
However as mentioned, this has to be valid

36

00:02:52.890  -->  00:02:58.770
and how do you find out what the date object likes and what it doesn't like and how it formats the date

37

00:02:58.790  -->  00:02:59.210
?

38

00:02:59.610  -->  00:03:08.910
Well you can google for js, for Javascript and then date and then you should get this article from

39

00:03:08.910  -->  00:03:15.160
the MDN, the Mozilla Developer Network and if you click on this article, you'll find more information

40

00:03:15.180  -->  00:03:15.470
on date

41

00:03:15.480  -->  00:03:20.320
and you also find a link to this in the cheatsheet attached to this module

42

00:03:20.400  -->  00:03:27.480
and here you'll find all the information you need, including a link describing how the date should be

43

00:03:27.480  -->  00:03:32.670
formatted and which formats are being able to be parsed and read.

44

00:03:32.910  -->  00:03:40.080
You can not only create dates with the new keyword here, you can also use some static methods which

45

00:03:40.080  -->  00:03:42.050
exists on the date object,

46

00:03:42.090  -->  00:03:52.320
for example the parse method to also pass a string there and I'll get rid of this today variable and

47

00:03:52.320  -->  00:03:57.110
if I now hit run, I get a strange number.

48

00:03:57.120  -->  00:03:58.190
What's that?

49

00:03:58.590  -->  00:04:04.420
Well that is the amount of milliseconds since the first January in 1970,

50

00:04:04.530  -->  00:04:12.700
that is where the date starts in Javascript, 1st January of 1970.

51

00:04:12.920  -->  00:04:19.290
So this is where it starts and this is the amount of milliseconds which passed from 1st January of

52

00:04:19.290  -->  00:04:23.560
1970 to this date here.

53

00:04:24.180  -->  00:04:27.200
You could also, to reintroduce the today

54

00:04:27.210  -->  00:04:33.030
variable with new date, log something specific of this date,

55

00:04:33.240  -->  00:04:35.790
for example get date,

56

00:04:38.880  -->  00:04:45.260
which if I run it gives us 7 which is basically the day in the month.

57

00:04:45.300  -->  00:04:49.350
So today is the 7th of June, therefore I get 7.

58

00:04:49.440  -->  00:04:56.780
I could also log get day and this is not the same as get date,

59

00:04:56.790  -->  00:04:58.790
here we get the day in the week,

60

00:04:59.130  -->  00:05:00.470
2nd here since

61

00:05:00.480  -->  00:05:04.140
it starts counting at Sunday which is zero,

62

00:05:04.140  -->  00:05:08.470
Monday is one and today is Tuesday, so this is 2nd.

63

00:05:08.580  -->  00:05:17.820
And again I could go through all these methods but if you have a look at the date article, you'll find

64

00:05:17.820  -->  00:05:23.240
a pretty good overview over all the built-in methods you can use on dates

65

00:05:23.370  -->  00:05:30.480
and this makes much more sense than if I start going over every one of those methods which basically

66

00:05:30.510  -->  00:05:36.830
all allow you to transform dates, extract certain data, parse dates.

67

00:05:36.890  -->  00:05:41.610
That is what the date object does and that is why it is this important,

68

00:05:41.610  -->  00:05:47.550
it's very important to have such an object to work with date in your application and to work with them

69

00:05:47.730  -->  00:05:54.810
in a uniform way, not being distorted by your local language settings or anything like that.

70

00:05:54.960  -->  00:05:57.470
So therefore, definitely check this out

71

00:05:57.570  -->  00:06:02.190
and again, you'll find a link in the cheatsheet attached to this module.
