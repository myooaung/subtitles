1

00:00:01,500  -->  00:00:04,920
Of course you can not only get data, you know you can also send data,

2

00:00:04,920  -->  00:00:12,720
so let's try this. I'll change the method to post and when posting data, I of course also have to

3

00:00:12,750  -->  00:00:14,690
attach some data.

4

00:00:14,730  -->  00:00:20,520
I'll also turn this back to no longer access any element but I will leave the JSON.parse since I will

5

00:00:20,520  -->  00:00:23,330
get back JSON data here too.

6

00:00:23,820  -->  00:00:28,040
I'll also add one extra thing after opening the request,

7

00:00:28,240  -->  00:00:36,220
I'll set the request header to let the server which gets the request know which content it gets.

8

00:00:36,240  -->  00:00:48,710
So I'll set the Content-Type header to application/x-www-form-urlencoded and that's just

9

00:00:48,750  -->  00:00:56,310
a specific content type telling the server that it's getting data in the form URL encoded format

10

00:00:56,340  -->  00:01:02,470
and I'll show you this format here where I create the data variable and just set up a dummy data here

11

00:01:02,520  -->  00:01:02,830
and

12

00:01:03,230  -->  00:01:12,470
let's say since I'm creating a post, I'll have a title of let's say post title and I'll use the percentage

13

00:01:12,470  -->  00:01:16,820
sign, 20 to represent a whitespace here an

14

00:01:16,900  -->  00:01:23,970
typically you would not type this manually but of course fetch from a form in your project for example

15

00:01:23,970  -->  00:01:31,950
and again, learn more in this using XMLHttpRequest document and I'll also set up body so I'll add an and sign

16

00:01:31,980  -->  00:01:39,650
and body should be equal to body like this and then the data of course has to be attached and

17

00:01:39,690  -->  00:01:43,830
I do this here in the send method which takes an argument,

18

00:01:43,890  -->  00:01:45,740
the data I want to send.

19

00:01:46,230  -->  00:01:50,640
So with that, I'm now leaving the same URL but I'm sending a post request,

20

00:01:50,700  -->  00:01:56,250
I am sending this data here and I'm still parsing any response I'll get back.

21

00:01:56,250  -->  00:02:00,660
I also set the request header to let the server know what it's getting.

22

00:02:00,660  -->  00:02:07,740
I also need to change the status check here to check for status 201 since this will be the status I

23

00:02:07,740  -->  00:02:11,040
get back when I create or when I post something here

24

00:02:11,040  -->  00:02:13,490
since 201 means everything is OK,

25

00:02:13,500  -->  00:02:19,530
a resource was created and that is what I typically want to do when sending a post request.

26

00:02:19,530  -->  00:02:25,560
So here, I'll hit run and as you can see, I'm getting back an object with my data,

27

00:02:25,560  -->  00:02:31,500
of course this is just dummy data, it wasn't created on some server, it's not stored anywhere but I'm

28

00:02:31,500  -->  00:02:31,570
getting back

29

00:02:31,570  -->  00:02:32,500
data I send

30

00:02:32,630  -->  00:02:34,560
and this shows me that this worked

31

00:02:34,680  -->  00:02:41,160
and this is how you can post data, Again, if you want to learn more about how to parse data and convert it

32

00:02:41,160  -->  00:02:44,500
into a data variable which you can attach,

33

00:02:44,530  -->  00:02:51,190
check out this using XMLHttpRequest article and as mentioned in the beginning of this module,

34

00:02:51,230  -->  00:02:58,890
oftentimes you'll use a third-party library which will handle this for you. Nonetheless it's important to

35

00:02:58,890  -->  00:03:00,340
understand how this works

36

00:03:00,400  -->  00:03:04,530
and I sure hope that the lectures here were helpful regarding this aspect. 
