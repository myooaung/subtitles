WEBVTT
1

00:00:01.320  -->  00:00:10.110
With that deep dive, let's do some checks if we can not only see this in action here but also

2

00:00:10.440  -->  00:00:19.410
prove that by comparing some things. So it looks like the prototype of Anna is person,

3

00:00:19.830  -->  00:00:25.480
does that mean that if I print the following, we get true?

4

00:00:25.710  -->  00:00:26.780
Wait a second,

5

00:00:27.030  -->  00:00:37.720
if I print anna.__proto__, remember this is an unsafe way but it's fine for testing here,

6

00:00:38.040  -->  00:00:44.480
if I print this, I'm accessing the prototype of Anna and I compare this to person.

7

00:00:44.640  -->  00:00:47.540
So I'm just checking if the prototype of Anna is person

8

00:00:47.550  -->  00:00:49.570
and again, don't use this in production.

9

00:00:49.920  -->  00:00:52.680
What do you think we'll see if I hit run?

10

00:00:53.160  -->  00:01:04.260
We get true because it's the case, the prototype of Anna is person and if I access the prototype of the prototype,

11

00:01:04.560  -->  00:01:10.560
so the prototype of person, is that then Object.prototype?

12

00:01:11.520  -->  00:01:12.960
Let's see,

13

00:01:13.500  -->  00:01:13.960
it's true,

14

00:01:14.010  -->  00:01:14.470
yes.

15

00:01:14.580  -->  00:01:18.230
The prototype of person and this is the prototype of proto

16

00:01:18.240  -->  00:01:20.790
here, is Object.prototype.

17

00:01:21.000  -->  00:01:29.160
So here, we can kind of see the chain of prototypes, you could think of this proto as person and this

18

00:01:29.160  -->  00:01:32.640
proto as Object.prototype,

19

00:01:32.640  -->  00:01:43.020
so that's where we get our functions and fields from. A more safe way to find out if we have the prototype

20

00:01:43.020  -->  00:01:48.540
here or if just this equal is, going back to the first check,

21

00:01:48.600  -->  00:01:56.580
if I use the built-in object object and then the static method getPrototypeOf

22

00:01:57.030  -->  00:02:03.370
and I want to get the prototype of Anna and compare that with person.

23

00:02:03.580  -->  00:02:05.860
So we should get true here too

24

00:02:06.450  -->  00:02:07.330
and we do.

25

00:02:07.770  -->  00:02:14.070
So this is a way you could use in production too if you need to find out or compare prototypes for example,

26

00:02:14.360  -->  00:02:21.080
this is available so getPrototypeOf is a safer way to get the prototype of Anna.

27

00:02:21.660  -->  00:02:23.260
However of course it's longer

28

00:02:23.340  -->  00:02:30.180
but dunder proto, so __proto__ is no safe way to access the prototype

29

00:02:30.180  -->  00:02:31.760
in production code.

30

00:02:32.340  -->  00:02:35.540
It will be added with the next specification of Javascript

31

00:02:35.550  -->  00:02:42.210
as far as I am aware but don't use it right now. So that's been prototypes.

32

00:02:42.210  -->  00:02:48.810
Hopefully, it's clear how they work and in the end that they are only blueprints for you to extend

33

00:02:48.810  -->  00:02:55.410
with your objects and to benefit from methods or fields you might not have built-in into your project

34

00:02:55.410  -->  00:02:55.430
but

35

00:02:55.440  -->  00:03:03.210
in a prototype at a higher level from which you're kind of inheriting and it's only Javascript's

36

00:03:03.210  -->  00:03:07.160
form of inheritance, that is how you have to think about it.

37

00:03:07.320  -->  00:03:16.080
And with this prototype chain you saw, you have this way of accessing fields and methods your object

38

00:03:16.080  -->  00:03:16.800
might not have.
