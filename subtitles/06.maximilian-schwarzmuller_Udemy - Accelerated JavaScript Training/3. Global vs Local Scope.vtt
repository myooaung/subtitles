WEBVTT
1

00:00:01.320  -->  00:00:10.590
Let's talk about scope, what is scope? To put it in simple words, you can think of scope as the registry

2

00:00:10.740  -->  00:00:13.990
on which your variables and so on are registered.

3

00:00:14.250  -->  00:00:19.170
So if you create a variable and then you use it somewhere else in your code like we've been

4

00:00:19.170  -->  00:00:21.390
doing that all time long,

5

00:00:21.390  -->  00:00:28.680
how does Javascript actually know that when you print the variable a, that this is the variable you declare

6

00:00:28.710  -->  00:00:38.430
two lines before? It does know it because both operations take place in the same scope and the scope is therefore

7

00:00:38.430  -->  00:00:40.570
very important.

8

00:00:40.620  -->  00:00:46.470
Basically Javascript knows two different scopes, though there is a third one on which I won't to dive

9

00:00:46.470  -->  00:00:52.470
deeper into here because it's not really that interesting with ES5,

10

00:00:52.490  -->  00:01:01.170
so the current Javascript version. We have the global scope by default and global scope refers to our

11

00:01:01.170  -->  00:01:02.550
window object.

12

00:01:02.610  -->  00:01:12.000
Now with window object, I mean that if you think about it, our code runs in the browser, the topmost level

13

00:01:12.000  -->  00:01:18.210
on which we can be is the window, the browser window and indeed Javascript does have this window object

14

00:01:18.240  -->  00:01:24.540
as you will learn later in the module about the document object model and how all of that works together

15

00:01:24.560  -->  00:01:25.080
.

16

00:01:25.560  -->  00:01:33.090
So this is the global scope, the highest level to which we can go and by default, all our variables and so

17

00:01:33.090  -->  00:01:40.260
on which we create are registered in this global scope and therefore are available throughout our application,

18

00:01:40.960  -->  00:01:41.610
though

19

00:01:41.790  -->  00:01:51.240
we also have local scope nested inside the global scope. Local scope is created when we create a function,

20

00:01:51.900  -->  00:01:53.570
inside this function,

21

00:01:53.670  -->  00:01:55.560
we have a different scope.

22

00:01:55.560  -->  00:02:03.780
So the function has its own scope and this means that variables defined inside a function are kind of

23

00:02:03.780  -->  00:02:07.810
independent from the variables outside of that function

24

00:02:07.920  -->  00:02:13.720
and we're not able to access variables from within a function outside of that function too.

25

00:02:14.130  -->  00:02:21.450
However it is possible to use global scope variables or global scope elements inside local scope,

26

00:02:21.450  -->  00:02:28.980
so we have this direction flow but it's not possible to use elements defined in local scope outside

27

00:02:28.980  -->  00:02:30.050
of it.

28

00:02:30.060  -->  00:02:35.670
Now since this is very theoretical, why don't we just have a look at it in practice?
