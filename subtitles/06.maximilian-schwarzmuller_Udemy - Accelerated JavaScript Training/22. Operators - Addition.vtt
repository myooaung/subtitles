WEBVTT
1

00:00:01.290  -->  00:00:05.250
I was already using some operators throughout all these examples,

2

00:00:05.250  -->  00:00:13.470
for example when incrementing i or decrementing it. In the next lectures, I'll go through a lot of operators

3

00:00:13.710  -->  00:00:17.020
Javascript offer us us and how to use them.

4

00:00:17.070  -->  00:00:19.880
I'll start with some basic addition operators here

5

00:00:19.920  -->  00:00:25.440
and while this might sound trivial, there are some interesting things amongst them and it's especially interesting

6

00:00:25.440  -->  00:00:30.980
to learn how you can add variables which don't have the same types,

7

00:00:30.990  -->  00:00:33.970
for example string and number.

8

00:00:34.440  -->  00:00:40.790
So I'll generate a variable named a here, which is 5 and a variable b, which is 10

9

00:00:41.100  -->  00:00:45.950
and then I will log a+b.

10

00:00:47.910  -->  00:00:51.000
Well, I'm not going to ask what you think we'll see,

11

00:00:51.000  -->  00:00:52.890
of course we see 15,

12

00:00:52.890  -->  00:00:55.020
now let me add something else here,

13

00:00:55.350  -->  00:00:56.740
I'll add this statement

14

00:00:56.850  -->  00:01:00.550
a += b

15

00:01:00.780  -->  00:01:03.660
and now I'm just printing a.

16

00:01:04.560  -->  00:01:06.630
What do you think we'll see here?

17

00:01:07.380  -->  00:01:16.840
Well we still see 15 but now I change the value of a to be equal to a + b,

18

00:01:16.860  -->  00:01:21.330
so this operator could be rewritten as a + b,

19

00:01:21.400  -->  00:01:23.960
of course this would still yield me 15 here.

20

00:01:24.240  -->  00:01:32.880
So it's a shorthand syntax to quickly add a number plus another number and reassign it to the first

21

00:01:32.880  -->  00:01:33.920
variable here.

22

00:01:34.200  -->  00:01:41.210
It's kind of comparable with a++ which could also be translated a + 1.

23

00:01:41.280  -->  00:01:45.300
This of course is the incremention operator you saw before.

24

00:01:45.360  -->  00:01:53.480
Therefore if I hit run now, we see six because we increased a by one.

25

00:01:53.640  -->  00:02:03.920
What do you think happens if I get rid of this and I change a to be 5.1 and b to be 3.5 or 4.5

26

00:02:04.020  -->  00:02:05.570
and then I print a + b,

27

00:02:05.610  -->  00:02:08.040
what do you think we'll see now?

28

00:02:08.040  -->  00:02:10.240
Of course we see 9.7,

29

00:02:10.230  -->  00:02:13.970
so adding floating numbers works in the same way

30

00:02:14.220  -->  00:02:19.410
but I'll come back to floating numbers in the future since there are some issues with

31

00:02:19.410  -->  00:02:19.680
it,

32

00:02:19.770  -->  00:02:21.320
let's put it that way.

33

00:02:21.360  -->  00:02:31.900
What happens if I set a equal to join and 4.5 equal to us,

34

00:02:31.920  -->  00:02:33.430
what do you now think we'll see here?

35

00:02:33.480  -->  00:02:39.770
Well we see join us, indeed we can add strings like this,

36

00:02:39.810  -->  00:02:44.810
we can add them like numbers and they will be concatenated into one string.

37

00:02:45.780  -->  00:02:51.950
What do you think we'll see if I change b to 3, will we see join 3?

38

00:02:52.740  -->  00:02:54.870
Yes, we will see join 3,

39

00:02:54.960  -->  00:03:00.540
so now a string and a number has been concatenated into one string,

40

00:03:00.540  -->  00:03:06.780
notice that 3 has been cast into a string here.

41

00:03:06.840  -->  00:03:15.660
Now what do you think happens if I change a to be 3 and b to be 'join',

42

00:03:15.720  -->  00:03:19.180
will we see 3 join?

43

00:03:20.220  -->  00:03:20.810
Yes,

44

00:03:21.000  -->  00:03:23.860
this also works the other way around.

45

00:03:23.950  -->  00:03:31.530
Javascript tries to make this work and as it recognizes it can't add both variables in a mathematical

46

00:03:31.530  -->  00:03:36.000
way, it will have a look at the next way it knows, creating strings.

47

00:03:36.000  -->  00:03:41.250
That's an important behavior to have in mind, which makes it of course easy to combine strings and

48

00:03:41.250  -->  00:03:44.300
variables or numbers or whatever.

49

00:03:44.790  -->  00:03:48.140
What happens if I change 3 to true,

50

00:03:48.300  -->  00:03:49.140
so it's a boolean

51

00:03:49.150  -->  00:03:52.450
now, what do you think we'll see now?

52

00:03:52.590  -->  00:03:53.480
True join,

53

00:03:53.610  -->  00:04:03.160
so as with numbers, Javascript also tries to transform booleans into strings.

54

00:04:03.180  -->  00:04:10.000
What happens if I exchange true with an array where I have 1 and 2 inside, what

55

00:04:10.040  -->  00:04:11.280
do you now think we'll see?

56

00:04:14.250  -->  00:04:15.380
1, 2, join,

57

00:04:15.480  -->  00:04:17.410
so even this does work.

58

00:04:17.430  -->  00:04:25.020
Javascript is really clever and trying hard to make it work if we join something with a string.

59

00:04:25.020  -->  00:04:26.630
Now here's an interesting one,

60

00:04:26.880  -->  00:04:34.930
what happens if I set a to 12 and b to '1'

61

00:04:34.950  -->  00:04:39.360
but as a string, what do you think we'll now see?

62

00:04:40.440  -->  00:04:45.500
Well I'm not sure if you expect this but we got 121,

63

00:04:45.570  -->  00:04:49.230
so again Javascript made this all a string,

64

00:04:49.230  -->  00:04:56.210
it did not recognize that this is a number too. What happens if we set b to true?

65

00:04:56.380  -->  00:05:02.530
So now we're trying to add true to 12, remember that true

66

00:05:02.910  -->  00:05:04.920
also seem to be equal to 1,

67

00:05:04.920  -->  00:05:07.590
so what's happening now?

68

00:05:07.710  -->  00:05:15.310
Now we're getting 13, so we can add a number and a boolean operator

69

00:05:15.330  -->  00:05:20.240
since boolean operators can easily be transformed into numbers.

70

00:05:20.520  -->  00:05:22.770
What happens if I add true and true?

71

00:05:25.810  -->  00:05:32.210
Well we get 2 again because true equals 1 if we would try to transform it into a number

72

00:05:32.370  -->  00:05:35.520
and Javascript tries to do that when adding it.

73

00:05:35.670  -->  00:05:38.280
So we can calculate with booleans,

74

00:05:38.310  -->  00:05:41.060
the question of course is if we do want to do that

75

00:05:41.070  -->  00:05:45.450
but it's important to understand how Javascript works behind the scenes.

76

00:05:45.930  -->  00:05:47.270
So back to numbers,

77

00:05:47.280  -->  00:05:53.070
what happens if I try to add null to 12, what will we see now?

78

00:05:53.850  -->  00:05:54.840
Well we see 12,

79

00:05:54.840  -->  00:06:00.730
so null is transferred into zero when using it in calculations.

80

00:06:01.080  -->  00:06:03.870
And if we use undefined, what's happening then?

81

00:06:07.110  -->  00:06:15.900
We get Not A Number because undefined isn't a number and Javascript doesn't transform it into zero or anything

82

00:06:15.900  -->  00:06:16.730
like that,

83

00:06:16.770  -->  00:06:23.340
instead it just recognizes that it can't do this calculation and in such cases, it will return us not

84

00:06:23.340  -->  00:06:28.100
a number to let us know that this calculation doesn't result in anything.

85

00:06:28.230  -->  00:06:32.130
The same is of course true if we set b to be equal to Not A Number

86

00:06:32.370  -->  00:06:35.080
and of course you would rarely do this directly like this

87

00:06:35.190  -->  00:06:41.250
but imagine b is itself the result of another calculation and this calculation might return

88

00:06:41.300  -->  00:06:42.140
Not A Number,

89

00:06:42.240  -->  00:06:48.040
in this case, of course we also get Not A Number as a result of this addition.

90

00:06:48.330  -->  00:06:52.280
So that was a lot of adding numbers or adding stuff

91

00:06:52.350  -->  00:06:58.560
but as I said, I think it's very important to understand how Javascript transforms certain values

92

00:06:58.740  -->  00:07:02.320
and works with values when we're trying to add them together.

93

00:07:02.520  -->  00:07:06.000
That's the reason why I put so much emphasis on this.
