WEBVTT
1

00:00:01.630  -->  00:00:11.250
Back in JSBin, I'll start with the primitive types. I'll create a number and assign it a number and

2

00:00:11.490  -->  00:00:14.550
then I log that number.

3

00:00:15.870  -->  00:00:20.330
I won't execute this code right now because I think it's pretty clear what will happen.

4

00:00:20.730  -->  00:00:25.210
I'll then create a new variable, anotherNumber

5

00:00:25.530  -->  00:00:36.680
and I also assign a number and I log anotherNumber.

6

00:00:36.870  -->  00:00:39.440
So let's run this code,

7

00:00:39.720  -->  00:00:42.900
it prints 5 two times.

8

00:00:42.930  -->  00:00:46.990
Next, I set a number equal to 12

9

00:00:47.730  -->  00:00:52.450
and I repeat the two console logs here,

10

00:00:52.470  -->  00:00:56.120
so I print out a number and anotherNumber again.

11

00:00:56.850  -->  00:00:58.680
So what would you expect to show

12

00:00:58.700  -->  00:00:59.860
now?

13

00:01:00.330  -->  00:01:07.800
See that we print four times here, we get 5, 5, 12 and 5 again,

14

00:01:07.830  -->  00:01:15.370
so anotherNumber is still 5 even though a number was changed after being assigned to anotherNumber

15

00:01:15.780  -->  00:01:21.320
and the reason for this is of course the behavior I described. With primitive types, like numbers,

16

00:01:21.450  -->  00:01:30.360
a copy of the value is created and therefore anotherNumber has the value 5 and no reference to a number

17

00:01:30.360  -->  00:01:30.440
,

18

00:01:30.450  -->  00:01:33.510
therefore it doesn't care what I do with a number

19

00:01:34.200  -->  00:01:41.510
and this changes if I switch this with another example. I'll create an array;

20

00:01:41.610  -->  00:01:43.020
1, 2, 3

21

00:01:43.560  -->  00:01:51.830
and first let me remember what type an array has.

22

00:01:52.650  -->  00:01:58.530
So I'll run this code and we see that an array is actually an object, that's important to know because

23

00:01:58.530  -->  00:02:02.010
an object is a reference type.

24

00:02:02.010  -->  00:02:08.580
So if I now create another array and I assign array,

25

00:02:08.580  -->  00:02:10.170
now let me print both

26

00:02:10.230  -->  00:02:10.860
values,

27

00:02:10.890  -->  00:02:19.980
so I print the array and then I print the anotherArray,

28

00:02:20.100  -->  00:02:22.300
what do you think we'll see?

29

00:02:23.430  -->  00:02:29.370
Well we see the array two times, of course because I'm creating it here and then I'm assigning it here

30

00:02:29.380  -->  00:02:30.030
.

31

00:02:30.690  -->  00:02:38.970
Now the interesting part is if I change the array and I'll use a method here to push a new item on

32

00:02:38.970  -->  00:02:42.990
it and I'll come back to array methods in the next module

33

00:02:42.990  -->  00:02:46.880
and now I print both arrays again,

34

00:02:47.850  -->  00:02:50.420
what do you expect to see?

35

00:02:51.750  -->  00:02:56.920
Well, you see that we got 1, 2, 3, 1, 2, 3 and then 1, 2, 3, 4 two times.

36

00:02:57.180  -->  00:03:02.380
So even though we didn't change another array, it still got changed

37

00:03:02.400  -->  00:03:05.720
and the reason for this is the behavior I just described.

38

00:03:06.120  -->  00:03:08.040
Objects are reference types,

39

00:03:08.100  -->  00:03:14.040
therefore array only holds a reference to this value, to this object

40

00:03:14.160  -->  00:03:20.590
and when we assign array to another array, we copy that reference, this pointer.

41

00:03:20.610  -->  00:03:26.170
Now when I push a new item on array, the value itself is changed,

42

00:03:26.190  -->  00:03:34.260
the two pointers aren't changed and therefore both point to the new value with the additional 4, that

43

00:03:34.310  -->  00:03:37.060
is important to understand.

44

00:03:37.110  -->  00:03:44.560
Now I'll get rid of these two logs and I'll change this code if I don't push a new item on this array

45

00:03:44.570  -->  00:03:44.680
but

46

00:03:44.820  -->  00:03:53.100
instead I set array to let's say an array which holds a and b, two strings.

47

00:03:53.100  -->  00:03:56.330
What do you expect to happen if I now click run?

48

00:03:57.990  -->  00:04:02.340
Well now you see I got a, b and then still 1, 2, 3.

49

00:04:02.340  -->  00:04:05.580
Isn't that against the logic I just planned out?

50

00:04:05.580  -->  00:04:13.590
No, because now I'm creating a new object here and therefore I'm not changing any object to which this

51

00:04:13.680  -->  00:04:17.620
variable was pointing to or to which this pointer was pointing to

52

00:04:17.760  -->  00:04:22.660
but instead, I'm creating a new value with a new pointer. Another array

53

00:04:22.680  -->  00:04:27.540
still has the old pointer to the old value which is still there in memory.

54

00:04:27.540  -->  00:04:35.070
I didn't overwrite it, I just reset or reassigned the array variable with a new pointer to a new value,

55

00:04:35.070  -->  00:04:35.370
therefore

56

00:04:35.460  -->  00:04:37.860
I can now print out both

57

00:04:37.860  -->  00:04:40.680
and that's the difference. With array push,

58

00:04:40.800  -->  00:04:44.220
I was editing an existing object,

59

00:04:44.400  -->  00:04:51.580
so both variables with the identical pointer were therefore updated

60

00:04:51.990  -->  00:04:57.160
and with this approach here, I'm actually creating a new value,

61

00:04:57.180  -->  00:05:00.550
therefore another array doesn't care about this.

62

00:05:00.630  -->  00:05:07.080
It's very important that you understand this difference between primitives and reference types because

63

00:05:07.080  -->  00:05:15.180
the behavior of reference types can lead to many bugs or to confusion at least when your code doesn't

64

00:05:15.180  -->  00:05:21.990
work the way you expect it to work because suddenly, a value doesn't have the value you expect it to have

65

00:05:21.990  -->  00:05:28.590
or a variable doesn't have the value you expect it to have because you forgot that the variable was

66

00:05:28.650  -->  00:05:35.380
actually holding a pointer to a value which got changed in some other place in your app,

67

00:05:35.380  -->  00:05:37.120
maybe in another file.

68

00:05:37.440  -->  00:05:45.810
So this is extremely important to keep in mind and to understand. This is how Javascript works and how

69

00:05:45.810  -->  00:05:49.600
these two different types of types,

70

00:05:49.620  -->  00:05:53.140
these two different categories of types, work.
