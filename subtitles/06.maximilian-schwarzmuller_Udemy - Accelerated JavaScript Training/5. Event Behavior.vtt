WEBVTT
1

00:00:02.720  -->  00:00:09.690
Now in Javascript events, there are certain behaviors you need to know. I'll add some new HTML code

2

00:00:09.690  -->  00:00:10.560
in here

3

00:00:10.740  -->  00:00:16.710
and this code will result in creating two divs and I added some styling here just to make them different

4

00:00:16.710  -->  00:00:21.860
sizes and you'll notice that I have this inner div, the smaller one which sits on the green div,

5

00:00:21.900  -->  00:00:28.560
the outer div here which is yellow of course and yes the outer div holding this inner div and they are

6

00:00:28.560  -->  00:00:36.270
also nested like this in the HTML code, so that these smaller div here is inside

7

00:00:36.360  -->  00:00:39.000
the bigger one.

8

00:00:39.480  -->  00:00:47.740
Let's say I want to add a click listener to the yellow div here, so the inner one which has an ID

9

00:00:47.740  -->  00:00:59.490
of inner. I can select this div by using my query selector and I'm selecting by ID which I do with a hashtag

10

00:00:59.490  -->  00:01:05.630
tag as the CSS selector for selecting, IDs also uses a hashtag.

11

00:01:06.300  -->  00:01:10.110
I can then add an event listener here, 

12

00:01:14.010  -->  00:01:19.980
listen to one click event for example and then I'll name it innerListener.

13

00:01:20.820  -->  00:01:28.650
Now of course this doesn't exist yet, so I will create this function named innerlistener and I'll get the

14

00:01:28.660  -->  00:01:38.460
event object here and in here what I want to do is I want to log clicked inner and this of course should

15

00:01:38.460  -->  00:01:39.510
be inner,

16

00:01:39.540  -->  00:01:41.300
the ID is inner, not ID.

17

00:01:41.580  -->  00:01:48.570
If I now run this code and I click on the yellow div here, you see clicked inner,

18

00:01:48.570  -->  00:01:51.570
if I click on the green one, you don't see anything,

19

00:01:51.570  -->  00:01:53.350
so this works.

20

00:01:53.550  -->  00:02:08.400
However if I add another event listener to the outer div, I'll name it outerListener and of course I

21

00:02:08.400  -->  00:02:16.180
have to select this div here by the ID outer which is set up here and

22

00:02:16.990  -->  00:02:18.510
I'll copy my listener here,

23

00:02:21.840  -->  00:02:22.230
outer,

24

00:02:24.980  -->  00:02:26.800
clicked outer,

25

00:02:27.210  -->  00:02:33.550
now one interesting question is where does this event argument here come from?

26

00:02:33.630  -->  00:02:41.190
Javascript passes this event argument, this event object automatically to your listeners and this object

27

00:02:41.190  -->  00:02:43.180
will depend on the type of event,

28

00:02:43.200  -->  00:02:49.290
so there are mouse click events, mouse enter events, different types of events to which you can listen

29

00:02:49.500  -->  00:02:55.090
and all those types will have their own properties and methods which you can access on the event object

30

00:02:55.110  -->  00:02:56.640
you're getting passed here.

31

00:02:56.790  -->  00:03:02.700
You don't have to use this object but you may to find out more which properties and methods are available

32

00:03:02.700  -->  00:03:04.370
for each event object,

33

00:03:04.380  -->  00:03:08.090
you may a) either log it to the console and have a look there

34

00:03:08.370  -->  00:03:09.380
or b)

35

00:03:09.450  -->  00:03:13.290
and again, I'm in this series, this is a good approach,

36

00:03:13.470  -->  00:03:20.160
Google for Javascript mouse click event and you'll find articles covering all the properties and methods

37

00:03:20.160  -->  00:03:21.860
you have available there.

38

00:03:21.870  -->  00:03:27.420
For now, it's only important to know you're getting this passed automatically when handling or listening

39

00:03:27.420  -->  00:03:31.660
to events in Javascript and I click on run,

40

00:03:32.060  -->  00:03:35.320
what do you think will happen if I click the yellow div here?

41

00:03:35.510  -->  00:03:39.600
I get inner and outer.

42

00:03:39.630  -->  00:03:42.300
Now you probably expected only to see inner

43

00:03:42.360  -->  00:03:49.030
and if I click the green one, you only see outer but why do we see both if I click the yellow one?

44

00:03:49.080  -->  00:03:56.190
The reason is that events in Javascript by default propagate, which means if I click on the yellow

45

00:03:56.190  -->  00:04:03.720
one here, I also of course kind of click on the green one since the green one holds the yellow one and

46

00:04:04.020  -->  00:04:12.660
the event propagates up from the yellow div which is the deepest nested element possible on which I click

47

00:04:12.990  -->  00:04:17.650
up to the other elements holding this clicked element,

48

00:04:17.700  -->  00:04:23.930
so the green one in this case. Therefore both event listeners are fired

49

00:04:23.960  -->  00:04:26.890
since I technically click on both

50

00:04:28.290  -->  00:04:32.430
but what if I don't want to trigger the green event listener,

51

00:04:32.430  -->  00:04:35.350
I only want to trigger the yellow one.

52

00:04:35.640  -->  00:04:43.230
Well then I have to go to the inner event listener function here and I have to use my event object

53

00:04:43.560  -->  00:04:50.600
and here I can call stopPropagation. By calling this method here,

54

00:04:50.640  -->  00:04:54.030
I make sure that the event doesn't bubble up,

55

00:04:54.030  -->  00:04:57.840
so it isn't continuing up to the next element,

56

00:04:57.990  -->  00:05:04.200
it stops. It's handled with this listener and all other listeners won't get a chance to handle it.

57

00:05:04.530  -->  00:05:09.460
So now if I run this and if I click on the yellow one, you only see clicked inner

58

00:05:09.630  -->  00:05:14.910
and on the green one, you see clicked outer but you don't see this double handling if I click on the

59

00:05:14.910  -->  00:05:21.240
yellow one and this might be the behavior we want, so stopPropagation is a very important method here

60

00:05:21.250  -->  00:05:21.670
.

61

00:05:22.080  -->  00:05:27.080
You can also check if the event has the goal of bubbling up,

62

00:05:27.090  -->  00:05:34.260
so this is how you call it that it travels up over all the different layers of elements until there

63

00:05:34.260  -->  00:05:39.900
is no higher layer by accessing event bubbles.

64

00:05:41.100  -->  00:05:46.620
If I run this and click on the yellow div, you'll see true. That is why we have to stop the propagation

65

00:05:46.620  -->  00:05:50.720
because otherwise, it would bubble up and also trigger the event on the green div

66

00:05:50.750  -->  00:05:51.010
here.
