1

00:00:01,890  -->  00:00:10,480
So with all the prototyping going on, let's go back to object create and I'll create a new object, I'll

2

00:00:10,550  -->  00:00:19,610
name it Max and I'll create it with object create and I'll pass person as the prototype

3

00:00:19,620  -->  00:00:29,710
I want to set for Max, I'll then log Max name.

4

00:00:29,880  -->  00:00:37,260
Now what do you expect to happen if I hit run? We see Max, even though I didn't set the name on this Max

5

00:00:37,260  -->  00:00:38,220
object,

6

00:00:38,310  -->  00:00:44,310
it has person as a prototype and this prototype has this name field.

7

00:00:44,400  -->  00:00:46,780
Now, another interesting question,

8

00:00:47,040  -->  00:00:53,630
what happens if I call Max.greet, what will show up in the console?

9

00:00:54,630  -->  00:00:56,090
Hello there.

10

00:00:56,100  -->  00:00:58,080
Now that might be confusing,

11

00:00:58,080  -->  00:01:01,750
we set the prototype to person and person doesn't have greet,

12

00:01:01,950  -->  00:01:03,990
why does this still work?

13

00:01:03,990  -->  00:01:09,430
Because of the prototype chain I was just showing. Javascript will work its way up,

14

00:01:09,540  -->  00:01:14,850
it doesn't find greet on Max, so it looks in person. It doesn't find it here too,

15

00:01:15,060  -->  00:01:20,910
so it looks in the prototype of person and the prototype of person is of course Object.prototype

16

00:01:21,030  -->  00:01:23,670
and here it does find the greet method

17

00:01:23,870  -->  00:01:26,240
and that shows the advantage of prototypes.

18

00:01:26,340  -->  00:01:29,610
I can copy this and create another object,

19

00:01:29,970  -->  00:01:30,710
Anna.

20

00:01:31,080  -->  00:01:35,180
Now Anna should probably have her own name, so I'll set this to Anna

21

00:01:37,980  -->  00:01:46,060
and if I now copy this here for Anna, what do you think we'll see in the console?

22

00:01:47,190  -->  00:01:48,590
Hello there two times,

23

00:01:48,630  -->  00:01:54,040
so Anna does have this greet function as well and that's the advantage of prototypes.

24

00:01:54,060  -->  00:02:01,260
We can create multiple objects of a certain blueprint kind of, of a certain prototype and they all

25

00:02:01,260  -->  00:02:05,040
have access to the methods of this prototype.

26

00:02:05,040  -->  00:02:07,230
I could go in this a bit further.

27

00:02:07,560  -->  00:02:11,890
Let's say I want to greet with my name and say Hello there, I am,

28

00:02:12,380  -->  00:02:17,780
I skip out of the string here and then I access this.name.

29

00:02:17,790  -->  00:02:24,720
Here is this this keyword again with which I was able to access properties of the object.

30

00:02:24,720  -->  00:02:29,970
Now the prototype object probably doesn't have a name field,

31

00:02:30,210  -->  00:02:35,690
so what do you think we'll see if I hit run? Max and Anna.

32

00:02:35,820  -->  00:02:45,640
So this refers to the object on which we're calling this greet method, not to the prototype here

33

00:02:45,930  -->  00:02:54,210
and that is an important behavior of this. It refers to the object on which you're calling this function

34

00:02:54,210  -->  00:02:54,500
here,

35

00:02:54,510  -->  00:03:03,360
this greet function and I'm calling it on Max and Anna and Max has a name and Anna has a name and therefore,

36

00:03:03,720  -->  00:03:12,570
this name refers to the respective names and doesn't search for a name property in the prototype of

37

00:03:13,170  -->  00:03:14,140
Anna or Max,

38

00:03:14,160  -->  00:03:16,580
so not in the Object.prototype.

39

00:03:17,400  -->  00:03:18,180
What will print

40

00:03:18,180  -->  00:03:28,800
if I remove Anna's name here? I get Max because now Anna doesn't have her own name anymore

41

00:03:29,040  -->  00:03:33,270
and again with the prototype chain, we start at the bottom with this,

42

00:03:33,360  -->  00:03:37,000
we start at the Anna object, we don't find the name here,

43

00:03:37,050  -->  00:03:44,010
so we go up one level to the prototype of Anna which is Max or person, excuse me, which is person and

44

00:03:44,010  -->  00:03:49,300
here the name is Max, so therefore we're seeing Max two times here.

45

00:03:49,300  -->  00:03:57,300
I know I'm really dive in deep into that but it's so important to understand how prototypes work and that

46

00:03:57,330  -->  00:03:59,370
they're really easy to be honest,

47

00:03:59,370  -->  00:04:04,980
you often read a lot of articles that make it look like prototypes are the most difficult thing in Javascript

48

00:04:05,250  -->  00:04:12,000
but in the end, it's all about blueprints from which you can build different objects and which have the

49

00:04:12,000  -->  00:04:19,920
advantage of providing you with functions or with properties you would not have access to in your object

50

00:04:19,920  -->  00:04:21,260
here on its own

51

00:04:21,300  -->  00:04:24,270
since it doesn't have a name here for example.

52

00:04:24,540  -->  00:04:31,430
That's what prototypes are about in its core and that's key to understand at this point here.
