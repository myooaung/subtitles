1

00:00:01,980  -->  00:00:08,350
So back in JSBin for this module, I'll use a service named JSON placeholder and

2

00:00:08,370  -->  00:00:14,290
you can find more about it at jsonplaceholder@type.com

3

00:00:14,340  -->  00:00:24,120
and basically what this is it allows you to simulate web requests or send web requests to the server and

4

00:00:24,140  -->  00:00:28,400
it will give you back some dummy data and this is of course great for testing.

5

00:00:28,530  -->  00:00:34,230
Sometimes it has some performance issues, this test service but it's free and hey, just give

6

00:00:34,230  -->  00:00:36,480
it some time and it will work.

7

00:00:36,480  -->  00:00:38,120
So how do we create such

8

00:00:38,460  -->  00:00:40,760
a request? 

9

00:00:40,810  -->  00:00:48,360
I'll create a variable and I'll name it http and I'll create a new XMLHttpRequest and that's just the name of

10

00:00:48,360  -->  00:00:54,950
this request object and as already mentioned, it's not only there for sending or getting XML, that's

11

00:00:54,960  -->  00:00:59,230
just an historic name or the name is like that for historic reasons.

12

00:00:59,730  -->  00:01:01,290
So that creates this request

13

00:01:01,350  -->  00:01:03,340
but it isn't sent yet.

14

00:01:03,600  -->  00:01:11,670
I'll next add a variable with URL and here, I'll point to the service I was just mentioning and this service

15

00:01:11,670  -->  00:01:14,370
has several API endpoints you may access,

16

00:01:14,370  -->  00:01:18,860
for example it has these posts endpoint and you can just visit

17

00:01:18,870  -->  00:01:24,410
this webpage and find more information about the available API endpoints.

18

00:01:24,600  -->  00:01:25,990
So those will be the URL

19

00:01:26,010  -->  00:01:27,660
I'll send the request to

20

00:01:27,660  -->  00:01:31,690
and I'll also specify the HTTP method I want to use, get

21

00:01:31,710  -->  00:01:34,870
in this case since I will send a get request.

22

00:01:34,920  -->  00:01:42,030
Now with that, I can wire these things up. I'll take my HTTP object, so this XMLHttpRequest object

23

00:01:42,030  -->  00:01:44,680
here and I'll open a connection.

24

00:01:44,790  -->  00:01:51,720
This open method then requires at least two arguments, the method which should be used and the URL,

25

00:01:51,720  -->  00:02:00,840
you may specify more arguments and you can find out more in the XMLHttpRequest article on the Mozilla

26

00:02:00,840  -->  00:02:02,180
Developer Network,

27

00:02:02,230  -->  00:02:08,490
here where you'll find all the available properties and methods and also explanations on how to set everything

28

00:02:08,490  -->  00:02:09,330
up.

29

00:02:09,330  -->  00:02:15,690
There's also another article on the Mozilla Developer Network which literally describes how to use an

30

00:02:15,800  -->  00:02:22,570
XMLHttpRequest and you of course find both links or links to both articles in the cheatsheet attached

31

00:02:22,570  -->  00:02:24,210
to this module.

32

00:02:24,400  -->  00:02:28,880
So with that, you open this request but still it's not sent,

33

00:02:28,890  -->  00:02:32,740
it's kind of open and prepared but it hasn't been sent yet.

34

00:02:33,090  -->  00:02:38,010
Next, you probably want to do something once the request comes back,

35

00:02:38,190  -->  00:02:42,290
so you will want to listen to that.

36

00:02:42,300  -->  00:02:46,480
Here we have the onreadystatechange 

37

00:02:46,620  -->  00:02:54,120
event handler here and I'll add a function here to handle this event and then in here,

38

00:02:54,120  -->  00:03:02,120
I can do whatever I want to do once this request finished successfully or also unsuccessfully and

39

00:03:02,160  -->  00:03:03,500
you could get an error.

40

00:03:03,780  -->  00:03:05,630
So I will check this first,

41

00:03:05,640  -->  00:03:15,190
I will check if the ready state, that's another built-in property here equals XMLHttpRequest.DONE,

42

00:03:15,210  -->  00:03:16,870
that's just a static field

43

00:03:16,880  -->  00:03:23,990
I can use to check because ready state will just be and I can show you this in the official documentation

44

00:03:24,000  -->  00:03:28,590
here, will just be a number 0 to 4

45

00:03:28,690  -->  00:03:33,440
and as you can see, it's either unsent, opened, headers_received, loading or done.

46

00:03:33,570  -->  00:03:35,060
We want to check if it's done, so

47

00:03:35,070  -->  00:03:43,290
we could also just check if it's equal to 4 but XMLHttpRequest.DONE simply returns 4, it's just

48

00:03:43,290  -->  00:03:47,080
a more literal way to describe this.

49

00:03:47,520  -->  00:03:49,260
But it being done isn't everything,

50

00:03:49,260  -->  00:03:51,650
I also want to check if it was successful.

51

00:03:51,690  -->  00:03:53,940
So I'll use a boolean and operator

52

00:03:54,150  -->  00:04:02,610
and then I will check if the status, another property equals 200 which of course is the HTTP status code

53

00:04:02,610  -->  00:04:03,430
code for

54

00:04:03,450  -->  00:04:08,380
OK. If that is the case, then I went to print the data

55

00:04:08,400  -->  00:04:14,750
I got back and I can access the data I got on my HTTP object here

56

00:04:14,970  -->  00:04:18,210
and then the response text,

57

00:04:18,390  -->  00:04:21,180
so this will be the body of my response.

58

00:04:21,180  -->  00:04:30,030
I can also specify an else/if condition here where I want to set up the condition to handle the case that

59

00:04:30,030  -->  00:04:31,060
I got an error.

60

00:04:31,200  -->  00:04:33,420
So I still want to check if it's done

61

00:04:33,540  -->  00:04:37,790
but if it is done, then I want to check if it's unlike status,

62

00:04:37,830  -->  00:04:45,720
so if the status code is unlike 200, in this case, I would simply print out error.

63

00:04:46,620  -->  00:04:52,230
Now with that, what do you think will happen if I hit run?

64

00:04:52,230  -->  00:04:55,290
Nothing does happen because I'm not sending it.

65

00:04:55,290  -->  00:05:01,350
I opened it and I set up what I want to do if I get back data but I'm not sending the request.

66

00:05:01,400  -->  00:05:03,640
So this is the final step I have to do here,

67

00:05:03,660  -->  00:05:07,100
I have to send it. Now if I hit run,

68

00:05:07,260  -->  00:05:09,870
let's see what happens.

69

00:05:09,990  -->  00:05:14,540
You should get back a response like this, these are just some dummy posts

70

00:05:14,550  -->  00:05:20,730
and what you get back here is JSON, so it looks like a Javascript object and it can be used as

71

00:05:20,730  -->  00:05:24,710
such, it's just a string representation of such an object

72

00:05:24,960  -->  00:05:27,600
and this is a common format to send data,

73

00:05:27,690  -->  00:05:34,390
so to take Javascript objects and turn them into strings, you recognize this by the escaping slashes

74

00:05:34,390  -->  00:05:37,550
here for example around the quotation marks.

75

00:05:37,590  -->  00:05:44,010
So to take JSON to send data and this is the data we got back and which we could now use and imagine this

76

00:05:44,010  -->  00:05:45,990
were a real list of posts,

77

00:05:46,080  -->  00:05:51,170
then you could extract the data here and use it throughout your application.

78

00:05:51,330  -->  00:05:58,890
So for example as these are dummy posts here and it is JSON data we get here in the end, so it is Javascript

79

00:05:58,890  -->  00:06:00,640
representation,

80

00:06:00,660  -->  00:06:09,240
what we can do is we can call JSON.parse on our response text here and

81

00:06:09,780  -->  00:06:10,590
let's see what happens

82

00:06:10,590  -->  00:06:11,520
now if I hit run.

83

00:06:14,520  -->  00:06:17,650
Now you'll see it's no longer just a string,

84

00:06:17,700  -->  00:06:23,750
it actually got transformed into Javascript object which you now can use,

85

00:06:23,750  -->  00:06:28,180
so now you can simply access the title or something like that.

86

00:06:28,320  -->  00:06:32,000
So since this is an array of objects, we could just access

87

00:06:32,040  -->  00:06:37,480
the first object or the first element with an index of zero,

88

00:06:37,480  -->  00:06:40,730
so this object here and then print the

89

00:06:41,070  -->  00:06:44,070
ID, so which should be 1,

90

00:06:44,240  -->  00:06:50,630
so like this. If I now hit run, you'll see one.

91

00:06:50,640  -->  00:06:55,490
So this is how this works, how you can use the data you get back and how you can send requests

92

00:06:55,530  -->  00:07:02,640
and as I explained, this allows you to create web applications where you load dynamic content and display

93

00:07:02,640  -->  00:07:05,200
it in your application.
