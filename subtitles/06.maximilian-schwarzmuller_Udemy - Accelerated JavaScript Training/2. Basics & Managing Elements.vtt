WEBVTT
1

00:00:01.370  -->  00:00:12.230
I'll start by creating a simple array here at the top, 1, 2, 3 and then I'll just log out the length

2

00:00:12.240  -->  00:00:12.570
and

3

00:00:13.080  -->  00:00:20.030
it shouldn't be surprising that if I hit run, we see three as explained a few seconds ago,

4

00:00:20.190  -->  00:00:23.700
3 is the length here since we have three elements.

5

00:00:24.090  -->  00:00:31.750
I access an element by using square brackets after the variable,

6

00:00:31.860  -->  00:00:38.550
so after array in this case and then specifying the index I want to access, for example 1 to access

7

00:00:38.550  -->  00:00:40.280
the second element.

8

00:00:40.860  -->  00:00:49.080
If I now hit run, you see three as length and then 2 which is the second element accessed through index 1

9

00:00:49.170  -->  00:00:52.180
since the index starts at 0.

10

00:00:53.160  -->  00:00:55.970
I'll print out the complete array here

11

00:00:55.980  -->  00:00:59.380
but before doing this, I want to try something.

12

00:00:59.700  -->  00:01:05.510
What happens if I access my array and I access the index one,

13

00:01:05.790  -->  00:01:12.810
so this element here and I set this equal to 100?

14

00:01:12.930  -->  00:01:19.110
What do you think will happen if I hit run? You get a new array, 1, 

15

00:01:19.110  -->  00:01:21.020
100 and 3,

16

00:01:21.030  -->  00:01:26.300
so we just replaced the second element with 100 which of course is possible.

17

00:01:26.340  -->  00:01:29.120
You can not only access elements to print them out,

18

00:01:29.250  -->  00:01:31.210
you can also replace them like this.

19

00:01:31.620  -->  00:01:36.730
What happens if I replace the element with the index 3, with 100?

20

00:01:36.750  -->  00:01:39.450
Remember we only have three items in this array,

21

00:01:39.450  -->  00:01:42.910
therefore the highest index available is two.

22

00:01:43.170  -->  00:01:46.620
What do you think will show up in a console

23

00:01:46.620  -->  00:01:55.570
if I click run? 1, 2, 3 and then 100 because I entered a new value like this.

24

00:01:55.710  -->  00:02:02.250
Remember earlier in the course when I tried to access values in the array which weren't there, we didn't get

25

00:02:02.250  -->  00:02:04.980
an error, we got undefined.

26

00:02:04.980  -->  00:02:14.070
So you can kind of think of an array as an infinite collection where all unoccupied places I simply

27

00:02:14.340  -->  00:02:22.410
undefined and therefore if I access the element with the index three, I'm just replacing one undefined

28

00:02:22.410  -->  00:02:24.960
space with an actual value.

29

00:02:24.960  -->  00:02:31.080
Now of course Javascript is a bit more efficient than polluting your memory with infinite arrays but

30

00:02:31.140  -->  00:02:36.140
you can think of this to understand how accessing arrays work.

31

00:02:36.180  -->  00:02:39.300
Therefore if I replace three with five,

32

00:02:39.600  -->  00:02:44.850
so I try to replace the element with an index of 5 with 100,

33

00:02:44.880  -->  00:02:51.030
you'll notice that the elements between three and the new element aren't touched.

34

00:02:51.030  -->  00:02:53.990
So what do you think we'll now print?

35

00:02:55.680  -->  00:02:58.210
1, 2, 3 undefined, undefined, 100,

36

00:02:58.350  -->  00:03:05.230
so I'm just leaving out these two elements here and I replace the sixth element in my array.

37

00:03:05.460  -->  00:03:11.710
And again, this is because you can think of this array as being filled up with undefined spaces

38

00:03:11.850  -->  00:03:18.990
and I'm just replacing the space with the index 6 and I'm not touching the spaces with index 4 or 5

39

00:03:19.000  -->  00:03:19.780
.

40

00:03:20.670  -->  00:03:22.220
excuse me, 3 or 4,

41

00:03:22.230  -->  00:03:24.130
I'm replacing index 5.

42

00:03:24.660  -->  00:03:30.350
So this is how you can work with arrays and replace or access 

43

00:03:30.350  -->  00:03:31.620
their elements.
