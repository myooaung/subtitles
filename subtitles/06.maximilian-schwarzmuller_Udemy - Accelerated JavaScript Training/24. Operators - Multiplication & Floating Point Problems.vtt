WEBVTT
1

00:00:01.200  -->  00:00:04.230
Let's have a look at multiplication next.

2

00:00:04.720   -->  00:00:08.510
Again, the very basics, let's say b is 2,

3

00:00:09.150  -->  00:00:11.530
I can print out a

4

00:00:11.700  -->  00:00:17.310
and I also have this short syntax for multiplying a with b,

5

00:00:17.460  -->  00:00:21.850
therefore if I print this, I of course get 24.

6

00:00:21.900  -->  00:00:25.300
Do I also have this syntax here?

7

00:00:25.320  -->  00:00:25.790
Let's see,

8

00:00:25.790  -->  00:00:28.330
what do you think happens?

9

00:00:28.410  -->  00:00:29.380
We get an error,

10

00:00:29.520  -->  00:00:32.060
so that's not possible here.

11

00:00:32.070  -->  00:00:35.550
What do you think happens if I get rid of this

12

00:00:35.580  -->  00:00:44.160
and I again add my multiplication here where I print out the result and I change a to be 1.3,

13

00:00:44.160  -->  00:00:46.500
what

14

00:00:46.590  -->  00:00:49.360
do you think is printed out if I hit run?

15

00:00:50.190  -->  00:00:52.290
Well 2.6 of course.

16

00:00:52.320  -->  00:00:55.890
Now what do you think happens if I change 2 to 2.2?

17

00:00:55.890  -->  00:00:59.460
Let's see what happens if I hit run,

18

00:01:00.690  -->  00:01:03.470
that is very strange.

19

00:01:03.510  -->  00:01:05.310
That clearly is not the correct answer,

20

00:01:05.310  -->  00:01:09.690
the answer should be 2.86 and all of that stuff shouldn't be there

21

00:01:10.020  -->  00:01:18.450
and that's a bug in Javascript, it has its issues with floating point numbers and it has the bug of

22

00:01:18.470  -->  00:01:18.610
adding

23

00:01:18.720  -->  00:01:28.840
this strange part here, so making a more complex number out of this than it actually is,

24

00:01:29.010  -->  00:01:32.730
which of course is a big problem if you were doing the following

25

00:01:32.730  -->  00:01:43.710
for example. Let's say you have an if statement and you were checking if a * b equals 2.86

26

00:01:43.810  -->  00:01:48.350
which of course you would expect to be true,

27

00:01:48.570  -->  00:01:55.500
so like this and you certainly would not expect

28

00:01:59.070  -->  00:02:00.500
to get false.

29

00:02:00.510  -->  00:02:06.600
However if you run this code, you would get false because it's not equal in Javascript's world,

30

00:02:06.930  -->  00:02:10.470
even though you know in the real world, it's very equal.

31

00:02:10.800  -->  00:02:13.650
So this is a common bug with Javascript.

32

00:02:13.720  -->  00:02:23.120
Now a good fix for this problem is to put this calculation into parentheses here and use the toFixed

33

00:02:23.130  -->  00:02:24.720
method on it.

34

00:02:24.720  -->  00:02:31.050
Now this method here takes an argument where you define to how many numbers you want to or decimal places

35

00:02:31.050  -->  00:02:35.430
you want to basically round or fix there.

36

00:02:35.450  -->  00:02:41.120
Therefore now if I run this, we get true because we're not getting this number anymore

37

00:02:41.140  -->  00:02:46.290
when comparing it here but instead we're fixing it and we're cutting off all the part

38

00:02:46.290  -->  00:02:52.710
we don't want. This is a fix you should use when doing calculations with floating point numbers since

39

00:02:52.710  -->  00:02:58.980
it might be a source of very annoying and hard to trace down bugs because who would expect for Javascript

40

00:02:58.980  -->  00:03:00.380
to behave this way,

41

00:03:00.390  -->  00:03:00.940
right?

42

00:03:00.960  -->  00:03:05.650
So with this very important bug out of the way, let's have a look at some other calculations.

43

00:03:05.700  -->  00:03:12.030
Imagine you have a number and a number as a string,

44

00:03:12.030  -->  00:03:14.010
what do you think will happen?

45

00:03:14.850  -->  00:03:17.730
Well we get 4.4. As before,

46

00:03:17.820  -->  00:03:23.600
Javascript is not able to build strings out of multiplication operations,

47

00:03:23.700  -->  00:03:27.080
so it tries to cast a string into a number instead.

48

00:03:27.090  -->  00:03:34.020
Therefore if I change this to something which can't be cast to a number, I'll get NaN because

49

00:03:34.020  -->  00:03:42.560
it's not able to finish this calculation and as well, I also can't multiply two strings,

50

00:03:42.660  -->  00:03:45.870
this will also result in NaN.

51

00:03:45.870  -->  00:03:50.330
Now what do you think happens if I have a number and then here,

52

00:03:50.340  -->  00:03:52.460
I have null?

53

00:03:53.340  -->  00:03:59.330
Well let's see it, well it gets zero because null gets interpreted as zero as before.

54

00:03:59.700  -->  00:04:08.550
So basically, these types of casting or interpretating of values haven't changed, the most important part

55

00:04:08.550  -->  00:04:08.610
to

56

00:04:08.610  -->  00:04:15.750
take away here is the issue about floating point numbers and be aware that this is also the case when

57

00:04:15.750  -->  00:04:18.250
dividing floating point numbers.

58

00:04:18.450  -->  00:04:25.140
Now there is one value I haven't shown you yet and this is infinity,

59

00:04:25.230  -->  00:04:29.720
sounds strange but what do you think we'll print if I hit run?

60

00:04:30.030  -->  00:04:31.100
We get infinity,

61

00:04:31.140  -->  00:04:34.780
so that's basically a representation of an infinite value

62

00:04:34.860  -->  00:04:39.480
and if we multiply something with infinity, we of course get infinity.
