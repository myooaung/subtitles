1

00:00:02,130  -->  00:00:08,170
So now that you know how to run the code, how to embed it in your HTML document and use it there,

2

00:00:08,370  -->  00:00:14,610
let's actually dive into Javascript itself, into the fundamentals of the language and how it works

3

00:00:14,610  -->  00:00:15,360
.

4

00:00:15,390  -->  00:00:22,530
I'll start with the fundamental thing existing, variables. Variables are very basic thing in each

5

00:00:22,530  -->  00:00:25,860
language and without them, probably no code would work.

6

00:00:25,860  -->  00:00:32,170
So what are variables? Variables are basically little data structures or storages which allow you

7

00:00:32,160  -->  00:00:34,690
to store values to a stored

8

00:00:34,710  -->  00:00:40,910
data if you want to put it like this. You create a variable in Javascript by using the var keyword

9

00:00:41,550  -->  00:00:46,560
and then give this a name, following the var keyword like variable

10

00:00:46,620  -->  00:00:52,560
and there are some reserved names but most of the names are free and you will get errors if you try

11

00:00:52,560  -->  00:00:59,880
to use reserved names and then you assign a value by typing equals and then the value we want to assign,

12

00:01:00,060  -->  00:01:02,100
for example 5.

13

00:01:02,280  -->  00:01:04,400
Now what's the benefit of doing this?

14

00:01:04,590  -->  00:01:07,400
I can use this variable throughout my code,

15

00:01:07,620  -->  00:01:17,350
so for example I can use console log and write variable here and now if I hit command enter, you'll

16

00:01:17,370  -->  00:01:24,780
see 5 in a console, which of course happens because we're printing the value of the variable by using

17

00:01:24,780  -->  00:01:30,520
the variable here in this function, I'll come back to functions in a later point of course too.

18

00:01:30,870  -->  00:01:33,870
So variables are places to store data,

19

00:01:33,870  -->  00:01:39,270
this of course throws the question, which data can be stored? Here,

20

00:01:39,380  -->  00:01:41,600
you see a number, 5, 

21

00:01:41,610  -->  00:01:44,670
notice that we just typed a number like this.

22

00:01:44,700  -->  00:01:50,680
Imagine I wanted to store some text, let's say text,

23

00:01:50,730  -->  00:01:51,930
what do you think will happen,

24

00:01:51,930  -->  00:01:57,460
what will I see in the console if I click run? I get an error that

25

00:01:57,510  -->  00:02:08,310
text is not defined, because by using text or characters like this, Javascript expects this to be

26

00:02:08,310  -->  00:02:11,550
a variable, like we defined variable here,

27

00:02:11,550  -->  00:02:14,540
this also is just some text we entered here.

28

00:02:14,670  -->  00:02:21,330
So Javascript would expect a variable of name text to be set equal to variable

29

00:02:21,360  -->  00:02:23,620
and of course we don't have such a variable here,

30

00:02:23,640  -->  00:02:32,100
we didn't initialize a variable named text, so this won't work. If we want to print actual text,

31

00:02:32,100  -->  00:02:40,060
so a string of characters, here in the console, we would have to put quotation marks around text.

32

00:02:40,200  -->  00:02:46,320
If I I now clear the console and click run again, you see that we print text here instead,

33

00:02:46,320  -->  00:02:53,070
so the real text we wanted to print and this of course is important to know and understand, that if you

34

00:02:53,070  -->  00:02:56,870
don't have quotation marks and it's not a number,

35

00:02:56,940  -->  00:03:02,360
Javascript expects a variable with this name or a function or something like that

36

00:03:02,460  -->  00:03:07,140
and therefore, we would get an error if this variable doesn't exist.

37

00:03:07,140  -->  00:03:14,140
So we saw numbers and now we see text, which other types do we have?

38

00:03:14,970  -->  00:03:23,760
Well we also have booleans, which means true or false and we can easily set this like this, true.

39

00:03:23,760  -->  00:03:25,090
Now wait a second,

40

00:03:25,140  -->  00:03:30,080
a minute ago I said that you have to put quotation marks around text if you want to use it

41

00:03:30,210  -->  00:03:34,680
and that now Javascript would look for a variable named true.

42

00:03:35,310  -->  00:03:36,420
Theoretically yes,

43

00:03:36,450  -->  00:03:37,610
practically no,

44

00:03:37,740  -->  00:03:43,250
I also said that there are some keywords which are reserved and can't be used for variable names,

45

00:03:43,260  -->  00:03:50,490
true is such a keyword and therefore, true here will not resolve to a variable or Javascript won't look

46

00:03:50,550  -->  00:03:53,200
for a variable named true, instead

47

00:03:53,220  -->  00:03:56,930
true is a value, like 5 is a value

48

00:03:57,210  -->  00:04:03,100
and if I clear this, what do you think we'll see in the console? We see

49

00:04:03,120  -->  00:04:04,010
True,

50

00:04:04,020  -->  00:04:10,010
notice that we don't have any quotation marks here or something like this because True is a value, like

51

00:04:10,110  -->  00:04:14,930
5 is a number or the text you saw a few seconds ago was a string,

52

00:04:14,940  -->  00:04:18,140
this is a boolean and this is its own data type

53

00:04:18,180  -->  00:04:26,190
we can use and of course we not only have true, we also have false.

54

00:04:26,190  -->  00:04:27,720
Now with all that being explained,

55

00:04:27,750  -->  00:04:35,610
would it work if I renamed variable to my number one var, like this 1var?

56

00:04:36,150  -->  00:04:38,050
No, this won't work,

57

00:04:38,100  -->  00:04:43,000
I must not have a number at the beginning of a variable name, that will not work.

58

00:04:43,140  -->  00:04:50,160
I may have a number in my variable name but not at the beginning of it and var is also a reserved keyword,

59

00:04:50,410  -->  00:04:51,170
though

60

00:04:51,330  -->  00:04:56,200
var1 would work because now I have a new variable name,

61

00:04:56,250  -->  00:04:59,940
it's not just var and the number is not at the beginning.

62

00:04:59,940  -->  00:05:04,050
Therefore if I clear this and hit run, this would work,

63

00:05:04,200  -->  00:05:08,390
since now we're again having a valid variable name.

64

00:05:08,780  -->  00:05:11,760
But back to the basic types we have,

65

00:05:11,760  -->  00:05:15,570
we saw a number, text and boolean.

66

00:05:15,570  -->  00:05:16,990
What about the following,

67

00:05:17,010  -->  00:05:25,620
if I have 6.5 here, what do you think I'll see in the console?

68

00:05:26,250  -->  00:05:34,410
Well I see a 6.5 but the question is, what is this? Is this also a number or is it a float like in

69

00:05:34,410  -->  00:05:35,950
some other languages?

70

00:05:35,970  -->  00:05:39,210
Was the first number, 5, an integer?

71

00:05:39,330  -->  00:05:45,840
Because if you are coming from another programming language, you might know the concept of having integers

72

00:05:46,410  -->  00:05:51,040
and floating point numbers and there is a difference between both.

73

00:05:51,390  -->  00:05:52,810
Well let's see what this is,

74

00:05:52,830  -->  00:05:57,960
we cannot only print the value, we can also print typeof

75

00:06:01,290  -->  00:06:07,600
and if I print this, we see this is of type number.

76

00:06:07,620  -->  00:06:14,210
Now since we're at it, let's see what 5 is,

77

00:06:14,220  -->  00:06:20,380
it's also a number. So a floating point number like 6.5 and 5,

78

00:06:20,550  -->  00:06:22,060
both have the same type,

79

00:06:22,080  -->  00:06:25,320
Javascript doesn't know integers and floating point numbers,

80

00:06:25,320  -->  00:06:27,180
it's all just a number.

81

00:06:27,480  -->  00:06:31,770
And by the way, since I didn't check this earlier, what was the typeof text?

82

00:06:34,890  -->  00:06:35,710
String,

83

00:06:35,880  -->  00:06:38,680
so this is of type string

84

00:06:38,870  -->  00:06:40,950
and just to finish the line here,

85

00:06:40,950  -->  00:06:41,940
if I check

86

00:06:41,940  -->  00:06:43,140
True,

87

00:06:43,500  -->  00:06:45,530
you see this is boolean as I explained.
