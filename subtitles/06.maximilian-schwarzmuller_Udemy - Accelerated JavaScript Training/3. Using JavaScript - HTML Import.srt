1

00:00:02,370  -->  00:00:08,040
So until now, we had a look at how we could place Javascript code in our HTML document and execute

2

00:00:08,040  -->  00:00:08,940
it,

3

00:00:08,940  -->  00:00:14,790
now imagine you have a more complex application with a lot more code than one single line, like we

4

00:00:14,790  -->  00:00:16,130
currently do.

5

00:00:16,350  -->  00:00:22,480
In this case, it would not be that great if all of that code would be in your HTML document.

6

00:00:22,590  -->  00:00:23,810
Why wouldn't that be great?

7

00:00:23,970  -->  00:00:31,650
Well first of all, because it would be very hard for you yourself as the developer to work with that 

8

00:00:31,650  -->  00:00:38,730
big file of Javascript code, therefore it's very common and indeed best practice of course

9

00:00:39,030  -->  00:00:46,620
to actually outsource your Javascript code in separate files which you then import into your HTML document

10

00:00:46,860  -->  00:00:52,710
so that you don't have the Javascript code in the HTML document itself.

11

00:00:52,710  -->  00:01:01,270
An easy way to outsource this is to simply import another file where you hold your code.

12

00:01:01,350  -->  00:01:09,150
Now unfortunately, I can't really demonstrate this here with JSBin, therefore for this example, we're

13

00:01:09,150  -->  00:01:11,460
heading to another page, plnkr,

14

00:01:11,470  -->  00:01:14,500
without a u, .co,

15

00:01:15,330  -->  00:01:17,710
which is kind of similar tool but

16

00:01:17,970  -->  00:01:20,660
follows a different approach in some places

17

00:01:20,970  -->  00:01:28,050
and here as you can see, it looks a bit similar here but it doesn't have that extra console in here,

18

00:01:28,200  -->  00:01:32,590
instead we just see the webpage here being loaded. Here

19

00:01:32,580  -->  00:01:40,030
you can already see we get such an import here and we're importing, as it looks like this, script.js

20

00:01:40,120  -->  00:01:41,040
file.

21

00:01:41,040  -->  00:01:47,130
Now as you see for the import, we still use script tags and notice that we have an opening and closing

22

00:01:47,130  -->  00:01:54,930
tag even though there is no code between the tags and we have this source or src attribute on the

23

00:01:54,960  -->  00:02:02,220
opening script tag where we specify the path to the file we want to import, script.js in this case

24

00:02:02,220  -->  00:02:02,840
.

25

00:02:02,970  -->  00:02:06,920
Now script.js can hold any code we might want to have,

26

00:02:07,110  -->  00:02:14,330
so if I enter console log 'hello there' here, what do you think we'll see in the console?

27

00:02:14,460  -->  00:02:16,740
Well first, we need to have a console to begin with,

28

00:02:16,740  -->  00:02:24,150
so I'll open my developer tools here in Chrome, which I can do with hitting command, alt and then i or

29

00:02:24,260  -->  00:02:28,870
control alt and i on Windows or of course, open them from the menu by

30

00:02:29,000  -->  00:02:36,030
going to view, developer, developer tools or just the Javascript console here and there you

31

00:02:36,030  -->  00:02:37,690
can see we also got this

32

00:02:37,740  -->  00:02:38,920
'hello there'

33

00:02:39,240  -->  00:02:46,230
text, even though of course in the index.html file, we don't have that 'hello there' in there but

34

00:02:46,230  -->  00:02:50,430
we're importing this file which again will be executed immediately,

35

00:02:50,490  -->  00:02:55,890
so the behavior does not change. If you have code in an external file,

36

00:02:55,890  -->  00:03:02,340
this code will be executed as soon as Javascript finds this file and therefore, it's really just a way

37

00:03:02,340  -->  00:03:06,290
to restructure your code and get rid of the code in your HTML

38

00:03:06,280  -->  00:03:08,210
file.

39

00:03:08,310  -->  00:03:14,490
Now of course, you might not only import this in the head section but in the body section as well, which

40

00:03:14,730  -->  00:03:20,870
as it was before, is a good practice to make sure that your code actually gets executed last.

41

00:03:21,450  -->  00:03:25,470
As you see, we have this opening and closing tag and nothing between,

42

00:03:25,470  -->  00:03:31,390
can't we just write this?

43

00:03:31,590  -->  00:03:39,450
Well let's test this. I clear my console here and make this a bit bigger

44

00:03:41,950  -->  00:03:45,170
and let's see what happens if I click this refresh button.

45

00:03:46,290  -->  00:03:47,040
Nothing happens,

46

00:03:47,040  -->  00:03:50,750
we don't see hello there, so the code is not getting executed

47

00:03:50,970  -->  00:03:57,050
and the reason for this is that the script tag always has to have an opening and closing tag.

48

00:03:57,300  -->  00:04:04,590
That's kind of a historic thing, that it used to be written like this with code between the opening

49

00:04:04,590  -->  00:04:09,070
and closing tag and it's still the case, as you see it now prints again

50

00:04:09,120  -->  00:04:14,640
and we have to provide the opening and closing tag when referencing external files, even though there

51

00:04:14,640  -->  00:04:18,600
is no code between the two tags.

52

00:04:18,690  -->  00:04:23,030
That being said, what does happen if we put code between the opening and closing tag?

53

00:04:23,160  -->  00:04:25,440
So let's say I write 'Hello

54

00:04:30,960  -->  00:04:36,000
from between' here and I save this.

55

00:04:36,360  -->  00:04:39,910
Well as you see, we still only got 'Hello there' here,

56

00:04:39,940  -->  00:04:47,340
we're not seeing 'Hello from between' even though it has a typo. So why is this the case?

57

00:04:47,340  -->  00:04:52,400
Why don't we see this code being executed? Because the browser will do that,

58

00:04:52,560  -->  00:04:57,600
the browser sees that we import a file here and therefore it will still execute that file,

59

00:04:57,690  -->  00:04:58,980
it doesn't care what we write

60

00:04:58,980  -->  00:05:04,200
between the opening and closing tags, it will indeed just ignore everything between the opening and closing

61

00:05:04,200  -->  00:05:08,550
tag and only execute the code in the imported file.

62

00:05:08,700  -->  00:05:15,150
So this code would only run if we would get rid of the import here, like this,

63

00:05:15,150  -->  00:05:18,100
now you see we're getting 'Hello from between'.

64

00:05:18,540  -->  00:05:25,170
So I'll get back to importing from script.js and I'll get rid of this code between the opening and closing

65

00:05:25,170  -->  00:05:26,160
tag.

66

00:05:26,670  -->  00:05:29,490
Now can we also import multiple files?

67

00:05:29,850  -->  00:05:31,090
Let's try it.

68

00:05:31,110  -->  00:05:32,640
I'm going to copy this import

69

00:05:35,670  -->  00:05:42,870
and I'll name this file script2. Now as you see, I'm currently getting an error that there is no script2.js

70

00:05:42,900  -->  00:05:50,100
file and if I click on one new file here and create the script2.js file and in here I write

71

00:05:51,050  -->  00:05:57,370
console log script2 and

72

00:05:58,080  -->  00:06:00,150
I save this, you see we get

73

00:06:00,150  -->  00:06:06,080
Hello there and script2 and I'll clear my console to see this a bit better,

74

00:06:06,780  -->  00:06:08,330
Hello there and script2.

75

00:06:08,640  -->  00:06:14,790
So both scripts are getting executed and they get executed in the order we specify the imports here

76

00:06:14,800  -->  00:06:15,060
,

77

00:06:15,300  -->  00:06:16,780
that of course is important.

78

00:06:17,010  -->  00:06:23,340
If you have one file depending on the other code being run, then you need to put the file depending

79

00:06:23,340  -->  00:06:23,850
on that

80

00:06:23,910  -->  00:06:25,490
after the first file,

81

00:06:25,540  -->  00:06:28,450
otherwise this code would not be executed yet.

82

00:06:28,740  -->  00:06:32,400
So this ordering here is pretty clear and pretty important.

83

00:06:32,400  -->  00:06:37,800
Also often times, you might use third-party libraries, like for example jQuery

84

00:06:37,800  -->  00:06:43,560
and if you want to use functions from jQuery, you have to make sure that the jQuery import comes

85

00:06:43,560  -->  00:06:47,700
first, before you import your code depending on it.

86

00:06:47,700  -->  00:06:49,990
Now you can change this behavior,

87

00:06:50,010  -->  00:06:52,320
there is another attribute you can use,

88

00:06:52,650  -->  00:06:57,440
I can put the defer attribute on this first script here

89

00:06:57,990  -->  00:07:02,480
and as you see now, script2 gets executed first before hello there.

90

00:07:02,670  -->  00:07:10,010
So defer basically tells the browser wait with this script and only load it after the other scripts

91

00:07:10,020  -->  00:07:13,480
which don't have defer on them were executed.

92

00:07:14,100  -->  00:07:20,910
Now you can use this but honestly, it's really better to just change the ordering because that is just

93

00:07:20,910  -->  00:07:21,850
confusing

94

00:07:22,080  -->  00:07:29,570
and if you are working together with other developers or you yourself forget that you put defer on such an import,

95

00:07:29,580  -->  00:07:29,690
you

96

00:07:29,850  -->  00:07:35,460
might be wondering why this isn't working the way it should and therefore, I would strongly

97

00:07:35,460  -->  00:07:41,250
recommend not using defer and instead just placing the imports in the order they should be placed.
