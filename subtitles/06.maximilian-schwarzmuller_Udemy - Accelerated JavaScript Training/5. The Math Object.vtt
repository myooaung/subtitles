WEBVTT
1

00:00:01.350  -->  00:00:06.390
In Javascript, there are also some important built-in objects you may use

2

00:00:06.570  -->  00:00:07.550
and in this lecture, I'll

3

00:00:07.580  -->  00:00:11.160
have a look at the math object.

4

00:00:11.160  -->  00:00:17.970
So the math object gives us access to some built-in properties or functions

5

00:00:18.480  -->  00:00:22.090
connected to the topic of mathematics.

6

00:00:22.140  -->  00:00:27.810
So if I create a new variable here for example and I call it pi and as you might be aware, this is something

7

00:00:27.810  -->  00:00:30.270
like 3.14

8

00:00:30.300  -->  00:00:31.250
and so on

9

00:00:31.380  -->  00:00:37.020
but probably you don't do it by heart and maybe you need more decimal places than just the first two.

10

00:00:37.230  -->  00:00:41.620
So a great way to get access to pi is to use the math object

11

00:00:41.790  -->  00:00:44.020
and then the pi property

12

00:00:44.340  -->  00:00:49.800
and now if I log pi to the console, what you think we'll get?

13

00:00:52.500  -->  00:00:58.480
We get Pi with a lot more decimal places than just the first two.

14

00:00:58.770  -->  00:01:02.100
The same is there for E,

15

00:01:03.540  -->  00:01:08.340
so if we log this, we got E.

16

00:01:08.430  -->  00:01:16.440
So we get these very important mathematical symbols built-in and available with the built-in math object

17

00:01:16.440  -->  00:01:18.440
which you may use like this.

18

00:01:18.510  -->  00:01:25.980
We not only got some built-in properties or important math symbols, we also got some useful functions

19

00:01:25.980  -->  00:01:32.680
or methods which we can use, for example imagine we have a which is -3

20

00:01:32.710  -->  00:01:35.720
and we wanted to get the absolute value of it,

21

00:01:36.010  -->  00:01:39.990
we could use the abs method and just pass a.

22

00:01:40.350  -->  00:01:43.500
Now what do you think will happen if I hit run?

23

00:01:44.060  -->  00:01:49.600
Of course we get 3, so the absolute value ignoring the minus sign here, just the distance to zero

24

00:01:49.610  -->  00:01:50.800
.

25

00:01:51.480  -->  00:02:02.340
We also could have a value, a floating point number and we could call round, if I now hit run,

26

00:02:02.630  -->  00:02:05.900
of course we get one.

27

00:02:05.970  -->  00:02:07.990
We also have Math.ceil,

28

00:02:08.040  -->  00:02:12.090
what do you think this function does?

29

00:02:12.090  -->  00:02:14.920
What do you think will happen if I hit run?

30

00:02:15.630  -->  00:02:17.500
I get two, this function

31

00:02:17.500  -->  00:02:22.340
always rounds the number but it always rounds it up to the next full integer,

32

00:02:22.470  -->  00:02:24.860
so 2 in this case.

33

00:02:25.630  -->  00:02:30.960
On the other hand, we also have floor which would if we have 1.99

34

00:02:33.470  -->  00:02:34.480
still give us 1,

35

00:02:34.500  -->  00:02:41.220
so this function always rounds the number down to the closest integer.

36

00:02:41.640  -->  00:02:53.640
We also can use some exponential calculations by using the exp method and passing 2, I'm not asking

37

00:02:53.640  -->  00:02:56.270
what we'll get but we get this,

38

00:02:56.280  -->  00:03:02.260
so this is e to the power of a, which is two in this case, e to the power of two

39

00:03:02.270  -->  00:03:02.700
within

40

00:03:02.720  -->  00:03:06.970
therefore. We also might use the logarithm, by default

41

00:03:06.990  -->  00:03:08.970
the natural logarithm here

42

00:03:09.180  -->  00:03:16.580
and if I again use e here and note of course that this has to be a capital E

43

00:03:16.780  -->  00:03:23.200
and now I hit run, now I'm asking what will we see in the console because this is solvable in the head?

44

00:03:24.080  -->  00:03:31.450
Well we get one because the natural logarithm of E is one, you learned that in math, didn't you?

45

00:03:31.460  -->  00:03:34.790
So these are some built-in useful functions,

46

00:03:34.800  -->  00:03:37.040
now there are some more useful functions,

47

00:03:37.080  -->  00:03:43.200
for example the max function where I just pass a list of arguments and this list may be as long as I

48

00:03:43.230  -->  00:03:44.230
need it

49

00:03:44.790  -->  00:03:50.530
and now what you think we'll get if I hit run? I think it shouldn't be too difficult, I get 1000, 

50

00:03:50.550  -->  00:03:52.300
so the highest possible value

51

00:03:52.500  -->  00:03:58.030
and of course I have min which unsurprisingly will give me one here.

52

00:03:59.400  -->  00:04:04.600
We also have, and this an important of one, Math.random,

53

00:04:04.650  -->  00:04:06.490
now what do you think we'll get here?

54

00:04:06.660  -->  00:04:12.000
Well hard to guess but we get a random number and the random number will be, and that's important to understand,

55

00:04:12.000  -->  00:04:13.580
between 0 and 1

56

00:04:13.590  -->  00:04:21.000
and as you can see, it also uses or is a floating point number and random numbers are of course something

57

00:04:21.000  -->  00:04:26.910
you'll often need in applications because a lot of applications use some kind of random effects. You might

58

00:04:26.910  -->  00:04:30.370
have a lottery application or a quiz or whatever,

59

00:04:30.420  -->  00:04:36.120
oftentimes you'll need a random number but oftentimes, you also need a random number which is not between

60

00:04:36.330  -->  00:04:37.410
0 and 1

61

00:04:37.410  -->  00:04:39.260
and using floating point numbers

62

00:04:39.390  -->  00:04:43.020
but for example between 1 and 10 or 1 and 100.

63

00:04:43.050  -->  00:04:45.530
How could you generate such a number?

64

00:04:45.840  -->  00:04:52.340
Well Math.random only gives you this kind of number but it's easy to transform it. I'll create a new variable

65

00:04:52.380  -->  00:04:57.190
called random and I'll generate a random number here

66

00:04:57.420  -->  00:05:00.820
but then I'll multiply that with 100

67

00:05:01.020  -->  00:05:09.510
if I want to have a number between 1 and 100 because now if I log this,

68

00:05:12.870  -->  00:05:17.370
you'll see that we get higher numbers,

69

00:05:17.370  -->  00:05:20.630
so numbers between 0 and 100

70

00:05:20.820  -->  00:05:25.380
or specifically, 0 and 99.9999,

71

00:05:25.380  -->  00:05:27.390
so 100 would be excluded.

72

00:05:27.630  -->  00:05:30.580
However I want them to be including 100

73

00:05:30.660  -->  00:05:41.740
and I also want to have them from 1 to 100, not 0 to 99.9999, in order to do this, I'll add plus 1.

74

00:05:41.790  -->  00:05:47.970
This makes sure that I started one, not at zero because I'm adding one to the possible smallest number

75

00:05:47.970  -->  00:05:49.170
which is zero

76

00:05:49.560  -->  00:05:54.010
and I also go up to 100.9999 as the highest number.

77

00:05:54.330  -->  00:05:56.620
Now I also don't want that,

78

00:05:56.700  -->  00:06:05.160
so we're almost there but I don't want to have 100.999 as the highest number and I also don't want 

79

00:06:05.160  -->  00:06:06.300
floating numbers,

80

00:06:06.600  -->  00:06:14.160
so now I can use Math.floor on the expression where I multiply it with 100 to make sure that I only

81

00:06:14.160  -->  00:06:18.280
get integers and that the highest possible number is 100

82

00:06:18.450  -->  00:06:23.400
because 100.99999 would get rounded down to 100

83

00:06:23.820  -->  00:06:28.680
and of course 0.99999 would also get rounded down to zero

84

00:06:28.680  -->  00:06:35.490
but since I add plus 1, I start at 1 and here of course just to make sure that you understand it, 100

85

00:06:35.490  -->  00:06:38.400
is excluded by default or the highest number is excluded,

86

00:06:38.550  -->  00:06:44.760
therefore the highest possible number here would 99.99999, I round it down to 99, add 1, so

87

00:06:44.760  -->  00:06:46.730
100 is the highest possible.

88

00:06:46.750  -->  00:06:49.500
So now if I hit clear and then run it,

89

00:06:49.740  -->  00:06:55.540
we got 100 right away but we also get a lot of other numbers as you see.

90

00:06:55.560  -->  00:06:57.820
So this is how you can play around with that

91

00:06:57.870  -->  00:07:04.690
and here you see that we're using two different math functions as well with some logical thinking to generate

92

00:07:04.690  -->  00:07:08.130
the range of numbers we want to have for our random number

93

00:07:08.340  -->  00:07:17.820
and as already mentioned, random numbers are probably something you often use in your application.
