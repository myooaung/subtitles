WEBVTT
1

00:00:01.200  -->  00:00:05.350
Welcome to the next module which is about types and scope.

2

00:00:05.370  -->  00:00:10.770
Now you already learned something about types in the previous module, about different types variables

3

00:00:10.800  -->  00:00:16.970
can have but the types you saw there can be categorized into categories

4

00:00:16.980  -->  00:00:21.980
and I want to talk about that and I'll explain what scope is and why it is important,

5

00:00:22.020  -->  00:00:27.780
so let's start with the types. In Javascript, we have, as I said, two categories and the first category

6

00:00:27.780  -->  00:00:34.920
are primitive types. Primitive types are for example numbers but also strings or booleans.

7

00:00:34.920  -->  00:00:42.000
If we use such a primitive type and assign it to a variable, like here where I give my variable a the value

8

00:00:42.000  -->  00:00:49.170
5, then in the memory, this variable will be stored or this value will be stored.

9

00:00:49.200  -->  00:00:53.550
So somewhere in the memory, a value of 5 will be stored.

10

00:00:53.550  -->  00:01:02.060
If I now retrieve this value or try to log this variable for example, I'm accessing this memory.

11

00:01:02.430  -->  00:01:13.120
I could add another variable, b and I assign a to that. In memory, what happens is that a copy is created,

12

00:01:13.530  -->  00:01:14.880
which means b

13

00:01:14.910  -->  00:01:20.790
now also has a value of 5 but it's not pointing to the variable a

14

00:01:20.790  -->  00:01:24.790
but instead the value is actually copied.

15

00:01:25.290  -->  00:01:31.420
This means if I were to change a to let's say 10, then b would still be 5

16

00:01:31.440  -->  00:01:40.620
because again, we copied the value. That's different with the second group of types, reference types. Reference

17

00:01:40.620  -->  00:01:42.350
types are

18

00:01:42.450  -->  00:01:49.830
for example arrays or arrays in the end are just objects, so you could say objects are reference types.

19

00:01:49.830  -->  00:01:56.160
The special thing about reference types is if I create a variable here and notice that here, I assign

20

00:01:56.160  -->  00:02:03.770
an object which again has a field named a with a value of 5. In memory,

21

00:02:04.050  -->  00:02:06.610
yes this object is stored,

22

00:02:06.690  -->  00:02:16.380
this object I created here but the variable does not actually hold this value but it holds a pointer

23

00:02:16.560  -->  00:02:19.610
pointing towards this value.

24

00:02:19.620  -->  00:02:27.580
So the object is created in memory and the variable actually only has a pointer to this value.

25

00:02:27.780  -->  00:02:33.400
That's the difference to primitive types where the variable would directly hold the value.

26

00:02:33.900  -->  00:02:42.960
If I now create a new variable, b and I again assign a to it, then I'm not actually copying the value,

27

00:02:42.990  -->  00:02:50.430
not the object in the memory but the pointer and this approach is of course taken because objects can

28

00:02:50.430  -->  00:02:57.120
be very complex data structures and in order not to pollute the memory with thousands of copies

29

00:02:57.150  -->  00:03:04.260
of these structures, instead only pointers are saved and only one instance of the actual object is

30

00:03:04.260  -->  00:03:05.520
generated.

31

00:03:05.880  -->  00:03:12.340
But this behavior does have some implications as I will show you now.
