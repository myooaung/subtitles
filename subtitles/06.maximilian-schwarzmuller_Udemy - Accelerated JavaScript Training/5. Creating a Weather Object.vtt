WEBVTT
1

00:00:01.300  -->  00:00:02.180
So let's explain it,

2

00:00:02.190  -->  00:00:05.240
now it's time to work on the logic

3

00:00:05.250  -->  00:00:06.350
I want to execute

4

00:00:06.360  -->  00:00:14.730
if we do get back the weatherData. Now, I will get back some data here and I will parse it into JSON

5

00:00:14.730  -->  00:00:20.820
because I will get back a string and I know that this service here will send me back

6

00:00:20.820  -->  00:00:23.140
JSON data which looks like this

7

00:00:23.160  -->  00:00:27.750
and I know this because the documentation tells me that I will get back data in this format,

8

00:00:27.750  -->  00:00:31.970
however as I said, as a string. Now I won't work with a string,

9

00:00:31.980  -->  00:00:37.980
I want to work with Javascript object, therefore I'm parsing this string with JSON.parse

10

00:00:38.280  -->  00:00:40.390
into a Javascript object,

11

00:00:40.470  -->  00:00:46.100
so I will parse my responseText the string into a Javascript object here.

12

00:00:46.670  -->  00:00:50.060
Now with that, I could access all the data and so on

13

00:00:50.190  -->  00:00:57.350
but hey why have we learned object oriented programming with Javascript if not to use it now?

14

00:00:57.630  -->  00:01:06.000
So I will actually create a new file here and I'll name it weather-data.js. I'll import this

15

00:01:06.000  -->  00:01:09.680
file between init and app, so

16

00:01:09.690  -->  00:01:15.030
source is weather-data.js and in this file,

17

00:01:15.060  -->  00:01:23.370
I'll set up a constructor function for my weatherData. So I'll use strict mode here too and then I'll

18

00:01:23.370  -->  00:01:27.250
create a new function named Weather with a capital W

19

00:01:27.300  -->  00:01:33.060
since this should be a constructor function and I want to indicate this by having a capital W at the beginning,

20

00:01:33.450  -->  00:01:33.900
this will

21

00:01:34.170  -->  00:01:41.430
take a city name and a description and in here, I'll set up some properties, so my city name will be the

22

00:01:41.430  -->  00:01:48.960
city name I pass into this constructor function and the description should be the description.

23

00:01:48.990  -->  00:01:52.550
Now city name and description, city name is clear, description however, if

24

00:01:52.580  -->  00:02:00.540
we have a look at the data we get back from our weather service, will be this part here, description broken

25

00:02:00.540  -->  00:02:02.040
clouds for example,

26

00:02:02.040  -->  00:02:04.780
so I want to retrieve this weather description here.

27

00:02:05.040  -->  00:02:11.170
I also want to retrieve the temperature later on, the temperature of course is also available here,

28

00:02:11.310  -->  00:02:18.330
we can find it in the main field here and here, we will have the temperature. Now in this service,

29

00:02:18.330  -->  00:02:25.460
you can also control if you want to get our temperature or any formats, in the American format or

30

00:02:25.710  -->  00:02:33.600
in the metric format, so if we have for example temperature in Fahrenheit or in Celsius and

31

00:02:33.630  -->  00:02:40.710
the default is Kelvin indeed and we can change this. Now I will later on change it to get it back in

32

00:02:40.830  -->  00:02:48.030
metric format but I'm only doing this so that I can then convert it to Fahrenheit in my app.

33

00:02:48.030  -->  00:02:54.720
Now of course, that doesn't make the most sense but consider a service where you don't have the choice

34

00:02:54.780  -->  00:02:58.680
and you would have to do it on your own and I want to show this.

35

00:02:58.800  -->  00:03:02.950
Now in order to do this, I'll add a third field here,

36

00:03:03.000  -->  00:03:10.650
this._description and I'm just using the underscore here to indicate that this is kind of

37

00:03:10.650  -->  00:03:11.660
a private field,

38

00:03:11.650  -->  00:03:17.930
it's not set upon creating this weather object, it's not passed in a constructor here,

39

00:03:18.060  -->  00:03:19.950
it's not passed as an argument.

40

00:03:19.980  -->  00:03:22.470
We set it up and we set it to an empty string

41

00:03:22.620  -->  00:03:24.900
but yes, it's not initialized here.

42

00:03:24.930  -->  00:03:31.710
The reason for this is that I want to create a getter and a setter for this field to make sure that

43

00:03:31.710  -->  00:03:36.690
whenever I pass a value to this field, it is converted to Fahrenheit,

44

00:03:36.690  -->  00:03:42.160
since as I said, I will retrieve the metric version in Celsius.

45

00:03:42.330  -->  00:03:54.360
For this to work, I'll use the Object.defineProperty method here and I'll access my Weather.prototype,

46

00:03:54.390  -->  00:04:03.450
I'll add it to my weather prototype, temperature should be the name of the property I want to define

47

00:04:03.450  -->  00:04:06.680
and of course this should be _temperature here as well.

48

00:04:06.840  -->  00:04:10.150
So this _temperature, this is just temperature,

49

00:04:10.170  -->  00:04:14.640
this will be the field we actually access and then in the background, it will access and change this

50

00:04:14.650  -->  00:04:17.080
field and as a third argument,

51

00:04:17.100  -->  00:04:22.850
I will configure this property here with a Javascript object. How do I configure it?

52

00:04:23.070  -->  00:04:30.680
I provide a get function and whenever I want to get this, I will simply return this temperature

53

00:04:31.080  -->  00:04:35.330
but if I want to set it, that's the interesting part,

54

00:04:35.340  -->  00:04:41.250
this will also be a function, I will not just pass the value I get here

55

00:04:41.430  -->  00:04:48.120
but instead, I will set this temperature equal to be equal to value times

56

00:04:48.150  -->  00:04:51.180
1.8 plus 32,

57

00:04:51.210  -->  00:04:57.880
that happens to be the conversion formula from Celsius to Fahrenheit and then set it toFixed to round it

58

00:04:57.900  -->  00:05:03.750
to two decimal places and prevent any possible floating point errors

59

00:05:04.170  -->  00:05:10.170
and then I'll attach the F. at the end to indicate the unit.

60

00:05:11.030  -->  00:05:16.290
So with this setter, I'm making sure that no matter what I pass here, it will be converted to Fahrenheit

61

00:05:16.320  -->  00:05:20.820
all the time and as I explained of course with this service, you could fetch it in Fahrenheit in the

62

00:05:20.820  -->  00:05:27.480
first place but I think you get my point. So that is the weather constructor I prepared

63

00:05:27.600  -->  00:05:33.210
and with that in the next step, I'll actually use that to create a new weather object and use all those

64

00:05:33.210  -->  00:05:34.790
fields to store the data

65

00:05:34.830  -->  00:05:36.570
I get back from my service. 
