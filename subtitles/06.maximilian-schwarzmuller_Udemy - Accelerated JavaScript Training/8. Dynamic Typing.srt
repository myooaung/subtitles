1

00:00:01,330  -->  00:00:05,010
So I'll leave this open because I'll need it again soon

2

00:00:05,100  -->  00:00:06,820
but for now I'll get back to

3

00:00:06,960  -->  00:00:08,710
JSBin.

4

00:00:09,240  -->  00:00:15,000
So I'll change this to a better code style as well

5

00:00:15,000  -->  00:00:17,190
and now let's have a look at something else. 

6

00:00:17,250  -->  00:00:19,400
We have var1 which is five,

7

00:00:19,620  -->  00:00:26,350
what happens if I also create var1, set this equal to 10

8

00:00:26,370  -->  00:00:29,940
but notice that I have a capital V at the beginning.

9

00:00:30,330  -->  00:00:32,320
If I now copy this line here and

10

00:00:32,310  -->  00:00:34,090
also print var1,

11

00:00:34,320  -->  00:00:37,560
what do you think I'll see in the console if I hit run?

12

00:00:40,500  -->  00:00:45,600
Well we get 5 and 10 because these two variables are two different variables,

13

00:00:45,600  -->  00:00:48,270
so Javascript is case sensitive.

14

00:00:48,270  -->  00:00:54,570
We have two different variables even though it's the same name but the capital V does matter

15

00:00:54,570  -->  00:00:56,850
and actually creates a new variable,

16

00:00:57,030  -->  00:01:01,050
therefore two different values are printed to the console here.

17

00:01:01,080  -->  00:01:08,820
Now what happens if I have var1 here? I'll get rid of the second variable here and I'll also will print

18

00:01:08,820  -->  00:01:10,050
it out anymore

19

00:01:10,380  -->  00:01:19,150
but now after printing it out, I am setting var1 equal to 10 and then I print it out again.

20

00:01:19,500  -->  00:01:23,090
What do you think I'll now see in the console?

21

00:01:24,960  -->  00:01:32,910
5 and 10 because now here, I'm reassigning the variable. Notice that I don't have the var keyword here

22

00:01:33,030  -->  00:01:39,340
and I don't need it because I'm not creating a new variable, var is only needed when creating a new variable,

23

00:01:39,340  -->  00:01:39,360
so

24

00:01:39,360  -->  00:01:47,310
for declaring a variable but instead, I'm using an existing one and I'm reassigning it here. Therefore

25

00:01:47,310  -->  00:01:49,010
I'm changing the value

26

00:01:49,140  -->  00:01:54,690
and that is how you can do this and this of course is also something you will probably do in your code,

27

00:01:54,900  -->  00:02:01,890
that your variables might not keep their initial value but instead might receive new values throughout your

28

00:02:01,890  -->  00:02:02,870
code.

29

00:02:03,390  -->  00:02:11,700
What do you think will happen if I turn this 10 here into a string by adding quotation marks?

30

00:02:11,760  -->  00:02:14,540
What do you think we'll now see in the console?

31

00:02:15,810  -->  00:02:18,410
Well we see 5 and then a string of 10.

32

00:02:18,420  -->  00:02:24,180
So even though the variable was a number at the beginning, we can change it to a string

33

00:02:24,180  -->  00:02:30,620
and indeed we can see this type switch if we print the types instead of the values.

34

00:02:30,690  -->  00:02:34,740
So if I now hit run, you'll see that we get number and string,

35

00:02:34,740  -->  00:02:42,240
so the type of the variable was actually changed because Javascript uses dynamic typing, which means

36

00:02:42,450  -->  00:02:45,350
variables may change their types.

37

00:02:45,360  -->  00:02:49,770
That is something most languages or many languages don't offer,

38

00:02:49,820  -->  00:02:55,470
there you would create a variable of type integer and then you would only be allowed to assign integers or

39

00:02:55,680  -->  00:03:00,530
strings or whatever the type is of the variable to that variable. In Javascript,

40

00:03:00,660  -->  00:03:05,790
it doesn't care, therefore you're not telling it which type this variable should be,

41

00:03:05,820  -->  00:03:11,670
you just set it to an initial value and then it has a type of value but it has no problems of switching

42

00:03:11,670  -->  00:03:13,680
the type type later on.

43

00:03:13,680  -->  00:03:20,280
This might be useful in some situations but generally, it's also a good practice to not do this, to not

44

00:03:20,280  -->  00:03:23,810
switch types constantly but instead stick to the initial type. 
