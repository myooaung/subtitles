1

00:00:01,470  -->  00:00:08,550
With that I'm back in JSBin and I want to talk about the other part I was mentioning, the possibility

2

00:00:08,550  -->  00:00:18,240
that you don't have a bug in your application but you might have a code in your app where

3

00:00:18,240  -->  00:00:21,240
you don't know if it will throw an error or not.

4

00:00:21,240  -->  00:00:26,880
Imagine that you are reaching out to some kind of server and you try to get data and the server

5

00:00:26,880  -->  00:00:28,070
might be offline.

6

00:00:28,080  -->  00:00:33,110
You can't control this, you might get an error and you don't notice at the time you write your code

7

00:00:33,130  -->  00:00:33,630
.

8

00:00:33,820  -->  00:00:36,450
Javascript got some helpers for this;

9

00:00:36,520  -->  00:00:43,820
it got the try/catch statement and it works like this; you specify or you write

10

00:00:43,820  -->  00:00:50,370
try, this keyword and then you have curly braces, to indicate which code you want to try and you can

11

00:00:50,370  -->  00:00:54,450
take this word literally, it will try to execute this code

12

00:00:54,810  -->  00:00:58,310
but if it fails, it catches an error

13

00:00:58,410  -->  00:01:03,230
in parentheses and then it will execute this code,

14

00:01:03,240  -->  00:01:11,130
this one here if this error happened and you can use this error which gets passed here in this code execution

15

00:01:11,130  -->  00:01:15,860
for example to simply log it to see what happened

16

00:01:15,990  -->  00:01:21,710
but of course in a real application, you might want to do more with that and not just log it. Then

17

00:01:21,720  -->  00:01:28,560
you can also add another statement finally where you say OK, no matter if this was successful, in which

18

00:01:28,560  -->  00:01:32,660
case this catch block would not get executed or if this failed,

19

00:01:32,670  -->  00:01:35,030
in which case this will get executed,

20

00:01:35,250  -->  00:01:37,980
execute this code here at any time,

21

00:01:37,980  -->  00:01:40,760
so this should always get executed.

22

00:01:40,860  -->  00:01:44,520
So because you might have some cleanup work here or anything like that,

23

00:01:44,520  -->  00:01:50,090
so here you might just print anything or do anything which should always be done.

24

00:01:50,130  -->  00:01:55,930
Now what could I try here which will throw an error as I will demonstrate this?

25

00:01:56,340  -->  00:02:00,080
Well I'll just try to call a function which doesn't exist.

26

00:02:00,140  -->  00:02:06,720
Now of course, this is an error you should be able to prevent when writing your code because you should

27

00:02:06,720  -->  00:02:08,960
know which functions you do have or not

28

00:02:09,030  -->  00:02:11,080
but I think you get my point, that I'm

29

00:02:11,190  -->  00:02:17,000
just demonstrating a way or just want to show a way where we will get an error.

30

00:02:17,380  -->  00:02:21,290
So now if I hit run, what do you think we'll see?

31

00:02:22,950  -->  00:02:27,750
Well, we get the error printed out here and then we get finally.

32

00:02:28,080  -->  00:02:37,710
So this is a really cool way of making sure that in the case of an error, your code doesn't just quit or your

33

00:02:37,710  -->  00:02:44,610
program doesn't just crash but instead, it continues and you can use that error or ignore it if you don't

34

00:02:44,610  -->  00:02:45,360
want to use it

35

00:02:45,360  -->  00:02:50,940
but main important thing is you can prevent your application from crashing and you can make sure that

36

00:02:50,940  -->  00:02:56,120
you have some code which will be executed in either case, in the finally statement here.

37

00:02:56,340  -->  00:03:04,830
So try/catch/finally, really useful tool in your application and certainly do take care or do use this

38

00:03:05,070  -->  00:03:12,090
if you do have code where you're not sure if it will run fine or not.
