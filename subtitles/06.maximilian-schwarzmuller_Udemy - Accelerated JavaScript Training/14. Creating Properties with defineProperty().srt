1

00:00:01,450  -->  00:00:08,640
Now with this out of the way and prototypes, constructors and so on, you really learned a lot about objects,

2

00:00:08,700  -->  00:00:12,420
all the key parts already have been covered.

3

00:00:12,450  -->  00:00:19,200
Now it's about the finetuning and what you can do with object, how you can configure them and work with

4

00:00:19,200  -->  00:00:20,330
them.

5

00:00:20,430  -->  00:00:28,320
I want to have a look at how you can create and delete properties on objects, which can be done in a

6

00:00:28,320  -->  00:00:32,320
more powerful way than you currently know it.

7

00:00:32,370  -->  00:00:39,990
Here, I have an example object which has a cash property and a withdrawal function which basically

8

00:00:40,260  -->  00:00:46,410
reduces the cash property by the amount passed to the function and then prints out the new amount,

9

00:00:46,410  -->  00:00:54,090
so if I run this, we get that I withdrew that 1000 and therefore the new reserve is 11000. Now it would be great

10

00:00:54,090  -->  00:00:56,330
to also have a deposit method

11

00:00:56,610  -->  00:01:02,720
and I could create it by simply writing account deposit equals function,

12

00:01:02,880  -->  00:01:12,600
whatever. I could do this but I also have another method of doing this, I can use the static built-in object

13

00:01:13,980  -->  00:01:18,350
and call the defineProperty method.

14

00:01:18,360  -->  00:01:26,280
With that, I pass as a first argument the object on which I want to define a new property, account and

15

00:01:26,280  -->  00:01:30,800
then as a string, the name of the property I want to create,

16

00:01:30,890  -->  00:01:37,530
deposit for example. The third argument then is the interesting part,

17

00:01:37,530  -->  00:01:39,700
it's a Javascript object

18

00:01:39,720  -->  00:01:45,270
and here I configure this property because until now, you might probably ask yourself 'why would you

19

00:01:45,270  -->  00:01:45,780
choose

20

00:01:45,780  -->  00:01:50,330
this way', it's much longer than by simply doing it with dot notation.

21

00:01:50,760  -->  00:01:58,620
Well here, you can configure this property and there are some keys available which you can set, for example

22

00:01:58,620  -->  00:01:59,690
the value key

23

00:01:59,790  -->  00:02:07,500
and of course these keys are built-in and you can't enter any arbitrary names here but the value is available

24

00:02:07,520  -->  00:02:07,790
and

25

00:02:08,010  -->  00:02:13,390
here I can set the value of this property, like I could do it with dot notation still.

26

00:02:13,620  -->  00:02:20,370
So I could set that a function should be the value of this property which takes an amount and all it

27

00:02:20,370  -->  00:02:26,020
does is it increases cash by this amount.

28

00:02:26,790  -->  00:02:39,630
So now if I call account deposit and I deposit 3000 and then I withdraw some money

29

00:02:39,720  -->  00:02:44,460
right after that, I'm depositing 3000, then I'm getting 1000,

30

00:02:44,670  -->  00:02:49,430
I would expect to see a new cash reserve of 14000.

31

00:02:49,650  -->  00:02:51,630
Let's see what happens.

32

00:02:52,590  -->  00:02:54,590
Yes, that's exactly the case,

33

00:02:54,600  -->  00:02:56,550
so the deposit worked.

34

00:02:56,670  -->  00:02:59,250
Still the question remains why would you do that,

35

00:02:59,250  -->  00:03:01,960
it's a bit complicated task, right,

36

00:03:01,980  -->  00:03:10,380
to do it like this? You cannot only configure the value, you get other keys as well. I'll demonstrate this

37

00:03:10,380  -->  00:03:18,150
with another property, I'll name it name here and the value will not be a function, just the name of account, like

38

00:03:18,510  -->  00:03:21,110
something like this.

39

00:03:21,120  -->  00:03:32,410
Now of course I can log this account name to the console and if I run this, you'll see this name.

40

00:03:32,760  -->  00:03:34,040
So far, so good.

41

00:03:34,200  -->  00:03:43,620
Now I'll change the name to let's say ID000-3 and I'll print it out again.

42

00:03:44,070  -->  00:03:48,540
Now that's pretty straightforward of course but you'll see what I want to get soon.

43

00:03:48,810  -->  00:03:53,690
So what happens if I print this?

44

00:03:54,630  -->  00:03:57,440
Somehow, this didn't get updated,

45

00:03:57,480  -->  00:03:59,500
it's still the old name.

46

00:03:59,730  -->  00:04:06,820
The reason is if we create a property with defineProperty, by default it's read-only,

47

00:04:07,440  -->  00:04:10,780
so I have to pass another configuration here,

48

00:04:10,800  -->  00:04:15,240
I can make it writable by setting writable to true.

49

00:04:15,240  -->  00:04:22,230
Now if I run this code, you'll see the name changed and this should be the point where you understand where

50

00:04:22,230  -->  00:04:26,430
the value of defineProperty lines.

51

00:04:26,790  -->  00:04:32,900
It's useful if you want to create a property with a more detailed configuration,

52

00:04:32,940  -->  00:04:40,230
you can't do this with the normal dot notation but here, you can use the default by not specifying anything

53

00:04:40,230  -->  00:04:45,050
here which would make it read-only or you set it to be writable.

54

00:04:45,510  -->  00:05:00,270
You also got other fields you can set, for example you can set it to be innumerable and this will come

55

00:05:00,270  -->  00:05:09,540
in handy in the next few lectures where I talk about how you can loop through all the fields in an 

56

00:05:09,540  -->  00:05:09,950
object,

57

00:05:09,990  -->  00:05:15,960
this basically will allow you to use switch this on and off if this should appear when looping through

58

00:05:15,960  -->  00:05:15,990
but

59

00:05:15,990  -->  00:05:18,360
I'll come back to that as I said.

60

00:05:18,420  -->  00:05:21,920
You can also create getters and setters,

61

00:05:22,410  -->  00:05:29,580
so I can create or set the get field here and set this equal to a function.

62

00:05:29,580  -->  00:05:35,640
This function will be called whenever I try to access this name value here.

63

00:05:36,030  -->  00:05:39,070
Then I can define what should happen when this gets called,

64

00:05:39,390  -->  00:05:41,920
I could for example return

65

00:05:43,210  -->  00:05:44,230
Hello.

66

00:05:44,940  -->  00:05:51,600
Now for this to work, I'll get rid of the value because I can't set this together with get and now if I run

67

00:05:51,600  -->  00:05:52,860
this code,

68

00:05:53,190  -->  00:05:55,170
you'll see Hello there.

69

00:05:55,170  -->  00:05:57,110
So I'm getting

70

00:05:57,130  -->  00:06:00,160
Hello whenever I try to get the value of name.

71

00:06:00,210  -->  00:06:07,230
I can also specify a setter which could do something but for this to be more useful, I'll go up to my

72

00:06:07,230  -->  00:06:15,160
account up here and I'll add a property here too, _name where I will have a default

73

00:06:15,180  -->  00:06:17,280
value let's say.

74

00:06:17,310  -->  00:06:25,980
So this is a property on my object and I'm creating a new property, also named name but without the

75

00:06:25,980  -->  00:06:26,160
prefix

76

00:06:26,250  -->  00:06:28,140
and that's just the naming convention I'm using here,

77

00:06:28,140  -->  00:06:32,410
both names are totally up to you. In the setter,

78

00:06:32,440  -->  00:06:39,240
I'll then set this._name equal to name

79

00:06:39,480  -->  00:06:45,250
and here in the getter, I'll return this._name, I'll

80

00:06:45,270  -->  00:06:51,120
also sure that here I'm passing name

81

00:06:51,120  -->  00:06:54,600
and here I should add a comma after this field.

82

00:06:54,870  -->  00:07:03,540
So if I now click on run, you'll see we get default and then the new ID but we get this getter and setter

83

00:07:03,540  -->  00:07:04,480
in between

84

00:07:04,560  -->  00:07:14,180
and if I return Hello here again and I run this again, I see Hello all over the place.

85

00:07:15,000  -->  00:07:23,400
So with getters and setters, you can control how values in your object are being set or fetched whenever

86

00:07:23,410  -->  00:07:26,900
is something else from outside tries to access them.

87

00:07:27,120  -->  00:07:30,210
This can be used to filter values for example,

88

00:07:30,240  -->  00:07:37,230
so let's say I'm always returning this name but I'm not always setting it, I want to check if name equals

89

00:07:37,640  -->  00:07:38,880
Max,

90

00:07:39,330  -->  00:07:46,260
only in this case will I set the name.

91

00:07:46,260  -->  00:07:54,270
This of course means if I run this now, it stays default because here where I tried to set the name, it's

92

00:07:54,270  -->  00:08:00,110
not successful since this if check here is not successful whenever I'm not setting this name.

93

00:08:00,120  -->  00:08:07,500
This however is important because this name here is what I retrieve when I try to access this name property,

94

00:08:07,500  -->  00:08:07,720
so this

95

00:08:07,770  -->  00:08:15,840
name property is kind of like a filter which bridges the outside of this object

96

00:08:15,850  -->  00:08:22,460
and the inside, so which controls the access we have on this object.

97

00:08:22,590  -->  00:08:29,900
That being said, what's always possible in Javascript is to simply print account_name.

98

00:08:29,940  -->  00:08:38,220
If I run this, you'll always see I do get access to this and you will see this clearer if I print hello

99

00:08:38,220  -->  00:08:40,920
in all the other cases, here

100

00:08:40,980  -->  00:08:42,570
I'm still able to access

101

00:08:42,750  -->  00:08:45,270
default.

102

00:08:45,290  -->  00:08:52,410
Nonetheless, if you choose a set up where you provide getters and setters and in the end, you are the

103

00:08:52,410  -->  00:08:54,540
person writing your source code,

104

00:08:54,540  -->  00:09:01,470
you can make sure that you implement such filters and prevents certain values from being set and even

105

00:09:01,470  -->  00:09:08,100
besides getters and setters, as you learned, this defineProperty allows you to set up and configure

106

00:09:08,100  -->  00:09:10,920
your own properties for your objects

107

00:09:11,010  -->  00:09:12,740
and again in the cheatsheet,

108

00:09:12,840  -->  00:09:20,040
you'll learn more about this and you'll find links which explain you which configuration you may use

109

00:09:20,100  -->  00:09:22,360
with the defineProperty method here.

110

00:09:22,410  -->  00:09:25,730
Of course there's more than just get, set and writable.
