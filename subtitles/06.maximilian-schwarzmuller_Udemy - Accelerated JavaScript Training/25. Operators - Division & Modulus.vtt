WEBVTT
1

00:00:01.380  -->  00:00:05.160
So let's head on to dividing values.

2

00:00:05.160  -->  00:00:15.060
Now of course still, just for completeness sake, you get this syntax to quickly do some divisions

3

00:00:15.060  -->  00:00:22.800
here and therefore you get back 6 because I'm dividing 12 by 2 and just use the shorthand syntax

4

00:00:22.800  -->  00:00:23.500
here.

5

00:00:23.910  -->  00:00:25.370
So I'll get rid of this,

6

00:00:25.380  -->  00:00:27.250
just wanted to show that it's there

7

00:00:27.630  -->  00:00:33.180
and now let's check what we can divide and where we can't.

8

00:00:33.270  -->  00:00:38.110
If I turn two into a string, so b is now referring to a string

9

00:00:38.280  -->  00:00:45.420
and if I hit run, I still get 6 because again, Javascript is not able to create strings out of that,

10

00:00:45.420  -->  00:00:47.150
that only works for addition.

11

00:00:47.160  -->  00:00:52.890
Therefore it tries to turn this into a number which it successfully can do for 2

12

00:00:53.160  -->  00:00:55.540
which is why we get back 6.

13

00:00:55.650  -->  00:01:02.070
Now what happens if I have 3.3 and 2.2?

14

00:01:03.250  -->  00:01:05.970
Well let's run this

15

00:01:05.970  -->  00:01:10.350
and again, we get this floating point error here,

16

00:01:10.380  -->  00:01:12.480
so that's really annoying.

17

00:01:12.480  -->  00:01:20.730
Of course we still can use our fix from before, by adding toFixed with two decimal places,

18

00:01:20.730  -->  00:01:22.860
we make sure that we cut off everything we don't need

19

00:01:22.860  -->  00:01:24.490
and that we round this

20

00:01:24.540  -->  00:01:32.040
and now we got 1.5. By the way if I turned this to three decimal places, I of course get three decimal places

21

00:01:32.040  -->  00:01:37.100
here but I'm still getting the correct value, so it gets rounded and then cut off,

22

00:01:37.740  -->  00:01:44.800
that's important to understand.

23

00:01:45.210  -->  00:01:47.150
We also got another operation.

24

00:01:47.610  -->  00:01:54.180
If I have 10 and 3 and I divide this, I of course get this value.

25

00:01:54.180  -->  00:01:57.050
Now we also got the modulus,

26

00:01:57.670  -->  00:02:01.140
so if I use this with the percentage sign, what do you think we'll get

27

00:02:01.140  -->  00:02:08.440
now? I get one because modulus gives me the rest of a division,

28

00:02:08.670  -->  00:02:13.470
so 10 divided by 3 is of course three point something

29

00:02:13.530  -->  00:02:19.360
but the basic thing is three fits into ten three times

30

00:02:19.710  -->  00:02:23.650
and then we have a value of nine because 3*3 is 9,

31

00:02:23.760  -->  00:02:28.320
so the remaining value which was not able to be divided is 1

32

00:02:28.500  -->  00:02:31.630
and that's exactly what the modulus is returning us here.

33

00:02:31.680  -->  00:02:37.800
The remaining value which wasn't able to be divided by three here

34

00:02:38.460  -->  00:02:44.180
but back to the division, there are some interesting cases.

35

00:02:44.550  -->  00:02:47.090
What if I divide by zero?

36

00:02:47.190  -->  00:02:48.430
What do you think we'll get,

37

00:02:48.450  -->  00:02:50.280
will we get an error?

38

00:02:51.180  -->  00:02:52.850
We get infinity.

39

00:02:52.950  -->  00:02:58.320
So when we try to divide by zero, Javascript will not throw us an error,

40

00:02:58.590  -->  00:03:01.610
instead it will give us the limit value,

41

00:03:01.620  -->  00:03:09.090
so what this value would approach to if we had a number very tiny close to zero, which would

42

00:03:09.090  -->  00:03:16.650
be infinity because ten divided by something extremely small is something extremely big, base mathematics

43

00:03:16.650  -->  00:03:16.950
here,

44

00:03:17.010  -->  00:03:17.970
right?

45

00:03:17.970  -->  00:03:22.100
So we get infinity in this case, which is interesting in my opinion.

46

00:03:22.590  -->  00:03:26.130
Of course when multiplying with zero, we get zero,

47

00:03:26.280  -->  00:03:28.280
so no worries there.

48

00:03:28.320  -->  00:03:32.470
So if we get infinity by dividing through zero, what do we get

49

00:03:32.490  -->  00:03:39.880
if I divide by infinity? What do you think we'll get here? Well we get zero,

50

00:03:39.930  -->  00:03:46.380
again the limit value. We're trying to divide something by something extremely big and the limit of

51

00:03:46.380  -->  00:03:48.350
this of course is zero

52

00:03:48.600  -->  00:03:54.240
and that's interesting in my opinion, how Javascript works with this and automatically gives us back these

53

00:03:54.240  -->  00:03:58.190
values instead of errors or something like this.
