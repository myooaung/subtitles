1

00:00:01,350  -->  00:00:05,130
Back to the object creation, here's another way to create a new object.

2

00:00:05,130  -->  00:00:09,470
I'll get rid of person1 here and I'll get rid of the check

3

00:00:09,900  -->  00:00:16,560
and also of this but I will still create another person but I can use the built-in object but now not

4

00:00:16,560  -->  00:00:23,130
with the new keyword but instead the static method create.

5

00:00:23,400  -->  00:00:25,650
This allows me to create a new object,

6

00:00:25,710  -->  00:00:28,820
however I do have to pass something here and I will pass

7

00:00:28,830  -->  00:00:31,770
null for now, I'll come back to it though.

8

00:00:32,190  -->  00:00:39,760
I can still say anotherPerson.name equals Anna and I won't set the age

9

00:00:39,780  -->  00:00:41,390
but of course I could do this too

10

00:00:41,480  -->  00:00:47,100
and if I log out another person here, let's see what happens,

11

00:00:47,940  -->  00:00:51,200
we got an object with the name, so object create.

12

00:00:51,270  -->  00:00:56,910
Why do we have this, we already had another method we're not using so why would we need object create?

13

00:00:56,910  -->  00:00:57,660
This

14

00:00:57,660  -->  00:01:05,970
method actually makes sense to have, it's longer than the literal notation but it does have an advantage,

15

00:01:05,970  -->  00:01:06,270
you'll

16

00:01:06,270  -->  00:01:14,200
be able to grasp more once we reach the lectures on prototypes.

17

00:01:14,370  -->  00:01:20,060
To talk a little bit about this right now without going into depth because I'll do that later,

18

00:01:20,310  -->  00:01:24,820
prototypes are kind of Javascript's form of inheritance,

19

00:01:24,930  -->  00:01:31,410
so basically prototypes allow you to have a prototype of an object and then creates create objects of

20

00:01:31,470  -->  00:01:32,810
that prototype

21

00:01:32,970  -->  00:01:39,330
and if that prototype has a certain function, all the objects based on that prototype would have that

22

00:01:39,330  -->  00:01:40,580
function too.

23

00:01:40,770  -->  00:01:44,880
So that is what a prototype is and each object you create,

24

00:01:44,880  -->  00:01:48,750
also that object here for example has a prototype,

25

00:01:48,870  -->  00:01:54,730
the default object prototype is Object.prototype.

26

00:01:54,870  -->  00:02:02,720
That's a built-in object on its own which is the root prototype of all objects here.

27

00:02:03,150  -->  00:02:07,720
So that's just a side information and I will come back to prototypes later.

28

00:02:08,010  -->  00:02:16,220
With object create, you see me pass an argument which is null and this argument specifies which prototype

29

00:02:16,220  -->  00:02:19,230
we want to set for the object we create.

30

00:02:19,500  -->  00:02:23,820
As I just explained, the default is Object.prototype,

31

00:02:23,820  -->  00:02:32,070
this object would have the prototype. This object will not because I am passing null and now the interesting

32

00:02:32,070  -->  00:02:34,080
thing is I cannot only pass

33

00:02:34,080  -->  00:02:42,030
null, I can pass any other object which I want to be the prototype for this object.

34

00:02:42,090  -->  00:02:49,860
So if I pass person here, I can now try to log anotherPerson.age

35

00:02:49,920  -->  00:02:58,050
and would you think that this works now? Let's see it. It works, we get 27 even though another person doesn't

36

00:02:58,050  -->  00:03:05,250
have an age property but its prototype, person which we set here, does have it

37

00:03:05,250  -->  00:03:11,250
and again if you're not 100% sure what this is all about, I'll get back to prototype soon

38

00:03:11,400  -->  00:03:20,250
but object create is a useful way of creating new objects where you can control what the prototype

39

00:03:20,430  -->  00:03:22,110
should be.

40

00:03:22,140  -->  00:03:27,330
We'll also learn about yet another method of creating objects later where you can also control what

41

00:03:27,330  -->  00:03:28,540
the prototype is

42

00:03:28,590  -->  00:03:33,810
but this here is a very useful method if you need to set the prototype on your own.

43

00:03:33,810  -->  00:03:38,520
If you don't need that, if you don't care, if you just need an object like that to work with, then the literal

44

00:03:38,520  -->  00:03:42,480
notation is still absolutely fine.

45

00:03:42,480  -->  00:03:45,350
So that have been very basics about object,

46

00:03:45,420  -->  00:03:52,260
it's time to dive deeper into one key topic when we're talking about Javascript objects,

47

00:03:52,260  -->  00:03:53,190
prototypes.
