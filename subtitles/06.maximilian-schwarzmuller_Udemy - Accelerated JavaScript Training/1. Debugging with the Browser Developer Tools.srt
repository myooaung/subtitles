1

00:00:01,560  -->  00:00:02,820
Welcome to another module.

2

00:00:02,820  -->  00:00:04,850
So we already covered a lot

3

00:00:05,010  -->  00:00:12,810
and now in this module, I want to touch on a very important topic which is key to develop successful

4

00:00:12,810  -->  00:00:14,520
Javascript applications.

5

00:00:14,550  -->  00:00:20,410
Now which topic might that be? Errors and debugging. When you write your code,

6

00:00:20,460  -->  00:00:21,870
you will get errors,

7

00:00:21,870  -->  00:00:23,540
that's just a normal thing,

8

00:00:23,580  -->  00:00:28,460
you won't write perfect code all the time. So you will have some nasty bugs

9

00:00:28,470  -->  00:00:36,600
and in order to find them, you will have to debug or you also might have parts in your program where

10

00:00:36,600  -->  00:00:43,500
you can't control if you will eventually get an error or something like this, in such a case you need a

11

00:00:43,500  -->  00:00:47,320
built-in way to handle errors. In this module,

12

00:00:47,340  -->  00:00:49,830
we'll have a look at both things.

13

00:00:50,430  -->  00:00:57,840
I'll start with the debugging and for this, I'm here in my editor, Web Storm because I need to create

14

00:00:57,870  -->  00:00:59,820
a local project but no worries,

15

00:00:59,820  -->  00:01:01,260
it's really simple.

16

00:01:01,260  -->  00:01:03,530
I'll only create two files here,

17

00:01:03,840  -->  00:01:07,510
the first one will be an index.html file

18

00:01:08,070  -->  00:01:16,730
and here I'll just create a very basic HTML5 skeleton

19

00:01:17,120  -->  00:01:18,930
where I have my doctype, my HTML

20

00:01:18,930  -->  00:01:25,710
tag, my head section here and my body and I won't write any HTML code

21

00:01:25,710  -->  00:01:32,070
besides that, all I will do is later I'll import a script file, a script file I'm creating now.

22

00:01:32,070  -->  00:01:37,800
So I'm just creating my script.js file file and in this file, I'll copy

23

00:01:37,860  -->  00:01:39,550
some prepared code.

24

00:01:39,570  -->  00:01:42,810
Now of course, you'll find the code attached to this lecture,

25

00:01:42,810  -->  00:01:44,010
that's for sure.

26

00:01:44,010  -->  00:01:46,980
So this will be the code and

27

00:01:47,010  -->  00:01:51,810
all I'm doing here is I'm setting some variables or initializing some variables here, then I have

28

00:01:51,810  -->  00:01:58,260
a for loop where I mess around with my values here and reassign some of them or assign them for the

29

00:01:58,260  -->  00:02:03,160
first time, like C for example and then I log them all, so

30

00:02:03,330  -->  00:02:10,720
not a really useful program but great for demonstrating how you can debug your applications

31

00:02:10,920  -->  00:02:12,600
with various tools.

32

00:02:12,980  -->  00:02:14,940
So in my index.html file,

33

00:02:15,060  -->  00:02:18,350
I'll then just add a script tag and import

34

00:02:18,400  -->  00:02:25,890
this file I just created, so the script.js file so that I'm loading it in my program. Next,

35

00:02:25,980  -->  00:02:27,570
I will simply run it,

36

00:02:27,600  -->  00:02:32,960
so load it in my browser and don't get confused

37

00:02:32,960  -->  00:02:37,680
by the URL, it's just a little service of Web Storm, it's like hosting a little mini server here

38

00:02:37,920  -->  00:02:42,920
but you may just open your HTML file in your browser,

39

00:02:42,930  -->  00:02:48,380
so just right clicking on it in the explorer for example or double clicking and auto executing it, so

40

00:02:48,400  -->  00:02:51,790
just run this file in your browser.

41

00:02:52,470  -->  00:02:57,540
Now you won't see anything here of course because it's just an empty page

42

00:02:57,630  -->  00:03:04,920
and now the important part comes. I'm using Chrome here and Chrome has great developer tools built-in, you

43

00:03:04,920  -->  00:03:08,050
might of course also use Firefox or Internet Explorer,

44

00:03:08,070  -->  00:03:10,600
both of them also ship with developer tools,

45

00:03:10,680  -->  00:03:16,980
however the part of showing here only refers to Chrome since I strongly recommend Chrome for development

46

00:03:16,980  -->  00:03:19,180
because it really has a good support.

47

00:03:19,500  -->  00:03:27,330
If you want to use another browser, simply look up how the developer tools there work. In general, developer

48

00:03:27,330  -->  00:03:31,680
tools all share some basic functionalities

49

00:03:31,860  -->  00:03:41,430
and I'll open up my developer tools here in Chrome by hitting command alt and I or control alt and I on Windows

50

00:03:42,420  -->  00:03:46,340
and this will open up my developer tools here.

51

00:03:46,470  -->  00:03:53,160
Now in these developer tools, you most likely start on the elements page in Chrome here where you can

52

00:03:53,160  -->  00:04:00,000
see your HTML element, the various elements you've got there, so the HTML code or the DOM, you will

53

00:04:00,000  -->  00:04:03,710
later come to that in the course and so on, 

54

00:04:03,710  -->  00:04:06,380
so that's not really the interesting part. Here

55

00:04:06,390  -->  00:04:13,410
you'll see that we log something to the console and that of course is due to these four statements

56

00:04:13,410  -->  00:04:13,780
here.

57

00:04:13,860  -->  00:04:15,990
So our code is running which is great

58

00:04:16,320  -->  00:04:23,620
but in order to debug the Javascript code, you can either click in Chrome, on this link here,

59

00:04:23,640  -->  00:04:27,780
this shows which line and which file was responsible for this log

60

00:04:27,990  -->  00:04:35,420
or you go to the sources tab here and then you will find the sources of your project

61

00:04:35,730  -->  00:04:40,450
and if you don't see it there, simply hit reload one more time and you should see this script.js

62

00:04:40,450  -->  00:04:41,710
file here.

63

00:04:41,970  -->  00:04:47,970
So that's the script file and Chrome identified that this file is being imported and therefore run by

64

00:04:48,000  -->  00:04:50,070
your index.html

65

00:04:50,090  -->  00:04:51,470
file in this case.

66

00:04:51,750  -->  00:04:53,450
So now you can see your code here

67

00:04:53,460  -->  00:05:00,850
and that's great but you can do even more, for example you can click on multiple line numbers to set a breakpoint

68

00:05:00,850  -->  00:05:01,300
.

69

00:05:01,420  -->  00:05:07,900
Now the next time this script gets executed, the code execution will stop here and give you a chance

70

00:05:07,900  -->  00:05:13,540
to have a look at the current values of the variables and so on during runtime 

71

00:05:13,660  -->  00:05:14,960
and I'll demonstrate this.

72

00:05:15,160  -->  00:05:18,080
So I set a breakpoint on that if condition here

73

00:05:18,400  -->  00:05:21,180
and I will reload my page.

74

00:05:21,260  -->  00:05:28,620
Now you see I have this paused in debugger message here and the page hasn't finished loading, as you can also

75

00:05:28,620  -->  00:05:31,350
see in the console where I'm currently not logging something,

76

00:05:31,350  -->  00:05:34,060
these are still the old logs.

77

00:05:34,210  -->  00:05:41,800
So now you can see, we're pausing here, this line is highlighted and here, you got

78

00:05:41,800  -->  00:05:44,410
some interesting analysis.

79

00:05:44,440  -->  00:05:51,400
You for example can analyze that your global scope, the window, has certain properties, quite a lot as

80

00:05:51,400  -->  00:05:53,140
it is the window of course

81

00:05:53,890  -->  00:05:59,190
and amongst them here you will also find your variables, a, b and so on.

82

00:05:59,200  -->  00:06:02,200
So that is one thing, you can check your scopes

83

00:06:02,230  -->  00:06:07,130
and if we would have a local scope here due to a function, you would see that here too.

84

00:06:07,390  -->  00:06:13,770
You also see your breakpoints like the one we're pausing here and if we're here,

85

00:06:13,810  -->  00:06:18,320
you can hover over your variables and you will see their current values,

86

00:06:18,340  -->  00:06:26,570
for example the B is 5 or I is currently 0 because we're in the first iteration of this loop.

87

00:06:27,040  -->  00:06:32,260
Now with these buttons here, you can now continue with the code execution.

88

00:06:32,290  -->  00:06:40,000
You can either hit this blue play button here to resume script execution and let it run until

89

00:06:40,000  -->  00:06:42,210
the end or the next breakpoint

90

00:06:42,460  -->  00:06:49,900
or you can now step through it step-by-step or if you have a function call, even step into that call

91

00:06:49,900  -->  00:06:55,930
so that you get into that function, instead of just returning or continuing with the return value and

92

00:06:55,930  -->  00:06:58,890
have a look into that function.

93

00:06:58,900  -->  00:07:03,850
So I can now click step over next function call and you will see that

94

00:07:03,850  -->  00:07:06,460
now the blue line jumped to the next if statement.

95

00:07:06,610  -->  00:07:15,070
Of course it didn't go into the if statement because the condition is not satisfied, I is 0, A is

96

00:07:15,930  -->  00:07:16,360
2,

97

00:07:16,360  -->  00:07:21,610
so I is not greater than A and therefore the condition already fails because with a boolean operator

98

00:07:21,610  -->  00:07:26,350
which requires both conditions to be true and therefore it doesn't matter that the second

99

00:07:26,350  -->  00:07:28,740
condition here would be true,

100

00:07:28,840  -->  00:07:31,480
so I 0 is of course smaller than 5.

101

00:07:31,660  -->  00:07:37,420
But the first one fails, therefore we get to the next if statement where we check if I is equal to 3.

102

00:07:37,500  -->  00:07:42,570
That of course is also not the case since I is 0.

103

00:07:42,880  -->  00:07:49,980
So we'll skip over this and start with the next loop round.

104

00:07:50,440  -->  00:08:02,760
So we can now step into that, to not only skip over it and now we see I is 1. So we can go ahead,

105

00:08:02,770  -->  00:08:07,810
click on this button all the time to get into it

106

00:08:07,810  -->  00:08:16,170
and here you just see the various parts which are executed and now we see that I is 3 and A is 2.

107

00:08:16,390  -->  00:08:20,860
So I is now greater than A and it's also still smaller than B,

108

00:08:20,890  -->  00:08:28,870
so now we should get into this if statement and we do. So now C is still undefined because we haven't

109

00:08:28,870  -->  00:08:30,140
finished this line yet

110

00:08:30,280  -->  00:08:36,310
but if I click this button one more time, you'll see that now C is equal to 1000

111

00:08:36,490  -->  00:08:42,130
and this is how you can check your code and check during runtime

112

00:08:42,130  -->  00:08:45,690
what the values of your variables are.

113

00:08:45,910  -->  00:08:49,070
You can even go ahead and I will show you this

114

00:08:49,090  -->  00:08:50,700
if I add another breakpoint and

115

00:08:50,700  -->  00:08:56,020
now click the play button to continue until the next breakpoint and I will remove this one simply

116

00:08:56,020  -->  00:08:57,530
by clicking on it.

117

00:08:57,790  -->  00:09:02,730
So now it stops here and the value of A currently is 2.

118

00:09:03,310  -->  00:09:12,850
Well the cool thing is you can select A and then, you can either watch it to open up a new watcher

119

00:09:12,850  -->  00:09:16,160
on the right here or to constantly track the value of A

120

00:09:16,600  -->  00:09:23,000
or you can also evaluate in the console to print it

121

00:09:23,410  -->  00:09:25,330
and now in the console, set A

122

00:09:28,540  -->  00:09:33,050
equals 3, hit enter

123

00:09:34,870  -->  00:09:37,220
and now A is set equal to 3

124

00:09:37,570  -->  00:09:44,350
and if I continue, you see it get updated here and I also printed 3. So you can also change the values

125

00:09:44,380  -->  00:09:50,110
during runtime, you cannot only watch them, you can also change them to simulate some other scenarios

126

00:09:50,110  -->  00:09:51,540
for example.

127

00:09:51,550  -->  00:09:58,600
So now I can just let this finish and now I will see the screen unlocks again and we finished the script

128

00:09:59,080  -->  00:10:04,880
and this is a very useful tool to help debug your code and to find your errors

129

00:10:05,230  -->  00:10:11,990
and one you will probably oftentimes use in your code or when creating your applications.
