1

00:00:01,740  -->  00:00:04,280
Now there are more array functions available.

2

00:00:04,890  -->  00:00:12,120
I'll get rid of the slicing here or of this new array altogether and let me just print out the array as

3

00:00:12,120  -->  00:00:13,170
we get it now,

4

00:00:13,290  -->  00:00:15,660
so old, 1, 2, 3, 4

5

00:00:17,070  -->  00:00:23,530
and now let's say I only want to logout values which are greater than two.

6

00:00:23,580  -->  00:00:28,940
Now of course, I could create a for loop and loop through all these values and then filter out the ones

7

00:00:28,980  -->  00:00:30,150
I want to print

8

00:00:30,510  -->  00:00:34,270
but I can also use the filter method on the array.

9

00:00:34,290  -->  00:00:41,440
This method also takes an anonymous function, like the forEach method did

10

00:00:41,940  -->  00:00:50,760
and I also pass an argument here which I will name value and what this method will do is it will call

11

00:00:50,760  -->  00:00:57,030
this for all the elements here, pass the value of the element and I can do something with that element,

12

00:00:57,030  -->  00:00:57,270
I

13

00:00:57,300  -->  00:01:00,200
have to return something with my function here

14

00:01:00,210  -->  00:01:03,600
though, I have to return true or false,

15

00:01:03,630  -->  00:01:10,110
so if the value I'm currently looking at should be included in the array returned by this method call

16

00:01:10,110  -->  00:01:11,940
here or not.

17

00:01:11,940  -->  00:01:16,430
So here I will return if value is greater than 2.

18

00:01:17,210  -->  00:01:23,580
If I run this code, you'll see that I only get 3 and 4 because only these two values are greater than

19

00:01:23,580  -->  00:01:24,510
2.

20

00:01:25,170  -->  00:01:29,200
So as before with forEach, this function gets executed on each value

21

00:01:29,220  -->  00:01:35,460
but here it's important to return true or false to let the filter method know if it should include or

22

00:01:35,460  -->  00:01:40,960
exclude the value I just passed into this function.

23

00:01:40,980  -->  00:01:42,390
So that's one function,

24

00:01:42,770  -->  00:01:49,280
another useful function is the map function here.

25

00:01:49,320  -->  00:01:56,360
This allows me to do something with each value often or with each element of an array. I'll again pass

26

00:01:56,370  -->  00:02:03,420
in each element and again, it doesn't matter if you name this value or element or elephant or whatever

27

00:02:03,420  -->  00:02:08,820
you want, this name is purely up to you, it's just important that you pass an argument with which you

28

00:02:08,820  -->  00:02:11,430
can work inside of this function.

29

00:02:11,460  -->  00:02:15,360
So map for example allows me to return value times two

30

00:02:15,450  -->  00:02:23,000
and again it is important to return something because map will also, like filter did, create a new array

31

00:02:23,070  -->  00:02:26,860
and it needs to know what to do with each element of that array.

32

00:02:27,240  -->  00:02:33,690
So here, I'm basically saying with that new array you create double each value.

33

00:02:33,690  -->  00:02:41,730
Therefore if I run this code, you'll see 2, 4, 6 and 8 and at the beginning, we have not a number because I

34

00:02:41,730  -->  00:02:42,940
have new here

35

00:02:43,140  -->  00:02:51,450
and as you learned in the operators module, you can't multiply a string, that will result in not a number

36

00:02:51,450  -->  00:02:53,730
.

37

00:02:53,730  -->  00:02:59,640
Keep in mind that with map as well as with filter, we're creating a new array here.

38

00:02:59,670  -->  00:03:01,340
I'm not assigning it to a variable,

39

00:03:01,350  -->  00:03:07,740
I'm directly printing it out but it's not changing the original array, as you can see if I print this

40

00:03:07,770  -->  00:03:10,890
array right after running map here.

41

00:03:10,890  -->  00:03:19,250
If I run this again, you'll see the old array is untouched, only this printed out new array was changed,

42

00:03:20,130  -->  00:03:22,100
that is important to keep in mind.

43

00:03:22,500  -->  00:03:25,540
Now I get some more interesting methods up my sleeve,

44

00:03:25,980  -->  00:03:30,140
I also got the reverse method.

45

00:03:30,330  -->  00:03:31,550
Now that's a simple one,

46

00:03:31,560  -->  00:03:38,340
it doesn't take an argument but you might be able to guess what it does if I hit run here

47

00:03:39,020  -->  00:03:40,960
and of course it reverses this array.

48

00:03:41,190  -->  00:03:46,990
And now here, please recognize that the array itself was reversed,

49

00:03:47,010  -->  00:03:53,790
this is not returning a new array which is reversed but it's doing this reverse operation on the array

50

00:03:53,790  -->  00:03:54,450
itself,

51

00:03:54,480  -->  00:03:59,970
that's the difference to map or filter where new arrays were created, here

52

00:04:00,000  -->  00:04:06,330
the original array is changed. That is very important of course to know because you might get unwanted

53

00:04:06,330  -->  00:04:10,440
results if you are thinking this would create a new array, it doesn't,

54

00:04:10,440  -->  00:04:12,560
it changes the old one.
