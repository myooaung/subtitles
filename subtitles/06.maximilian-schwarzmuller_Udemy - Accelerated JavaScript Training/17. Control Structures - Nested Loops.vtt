WEBVTT
1

00:00:01.320  -->  00:00:05.120
You can also nest loop inside loops.

2

00:00:05.160  -->  00:00:12.240
So now I'm nesting another loop where I specify another variable and I can't use i here because i is

3

00:00:12.240  -->  00:00:16.210
already taken here. So I'll use j,

4

00:00:16.830  -->  00:00:23.860
also set this to equal and run this only two times,

5

00:00:23.910  -->  00:00:32.160
so as long as j is smaller than two and then I will increment this

6

00:00:32.190  -->  00:00:33.880
as well.

7

00:00:33.900  -->  00:00:35.280
Now I want to print

8

00:00:38.130  -->  00:00:40.210
i times j,

9

00:00:40.710  -->  00:00:44.230
what do you think we'll now see if I hit run?

10

00:00:45.240  -->  00:00:47.140
Well we got quite a lot of values,

11

00:00:47.280  -->  00:00:51.780
we got 0,0,0,1,0,2,0,3,0,4,

12

00:00:51.810  -->  00:00:54.030
so what's happening here?

13

00:00:54.900  -->  00:01:01.010
Well this code here is executed in each round of this outer loop,

14

00:01:01.110  -->  00:01:08.860
so the first time we get into here, i is zero and j is zero and therefore, we have i times 

15

00:01:08.880  -->  00:01:09.070
j,

16

00:01:09.240  -->  00:01:12.330
zero times zero, we get zero.

17

00:01:12.330  -->  00:01:16.360
Now before we go to the next loop round of this outer loop,

18

00:01:16.590  -->  00:01:23.880
we still got two rounds to go inside here, so we increase j by 1 and we do the same thing again,

19

00:01:23.940  -->  00:01:26.140
multiply 0 times 1,

20

00:01:26.220  -->  00:01:29.250
we still get 0, then we increase it one more time,

21

00:01:29.250  -->  00:01:33.500
we got two and therefore we quit out of the loop since

22

00:01:33.600  -->  00:01:36.890
now j is two and no longer smaller than 2.

23

00:01:37.020  -->  00:01:42.240
So we now continue with the next round of this outer loop and i is incremented and therefore, we have

24

00:01:42.330  -->  00:01:44.600
i being equal to 1.

25

00:01:44.880  -->  00:01:51.270
We go into our inner loop again and J is set back to zero, so we have one times zero and therefore

26

00:01:51.270  -->  00:01:53.570
we get zero.

27

00:01:53.580  -->  00:01:59.040
Now j is increased by 1 and we get 1 times 1 and therefore get 1

28

00:01:59.190  -->  00:02:00.200
and so on.

29

00:02:00.300  -->  00:02:07.530
So the inner loop is executed upon each iteration of the outer loop and before the inner loop isn't finished,

30

00:02:07.530  -->  00:02:07.580
the outer

31

00:02:07.620  -->  00:02:09.550
loop won't continue.
