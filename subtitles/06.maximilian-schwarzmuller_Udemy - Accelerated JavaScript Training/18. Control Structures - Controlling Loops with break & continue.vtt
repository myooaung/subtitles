WEBVTT
1

00:00:01.660  -->  00:00:07.200
Now I want to demonstrate something else here with this loop, we can also write an if statement inside

2

00:00:07.200  -->  00:00:19.540
this loop of course and check if let's say i equals 1. If i equals 1, then I will print one,

3

00:00:19.620  -->  00:00:20.800
so now if I execute this,

4

00:00:20.820  -->  00:00:23.680
we of course see one.

5

00:00:24.000  -->  00:00:28.140
We have some keywords we can use in loops as well.

6

00:00:28.140  -->  00:00:35.050
So let's say I am removing this log and I put this after this if statement again and I just print out

7

00:00:35.110  -->  00:00:36.400
i

8

00:00:37.830  -->  00:00:47.180
but now here if i equals 1, I'll use the break keyword.

9

00:00:47.730  -->  00:00:56.550
What do you think we'll now see if I hit run? We just see zero because zero is the initial value,

10

00:00:56.550  -->  00:01:00.430
this if statement isn't triggered and therefore, we print zero.

11

00:01:00.540  -->  00:01:04.290
Now i is incremented and therefore 1,

12

00:01:04.320  -->  00:01:06.300
so we get inside this if statement

13

00:01:06.540  -->  00:01:14.520
and as with the switch statement, break tells Javascript to exit out of the current control structure,

14

00:01:14.530  -->  00:01:14.600
so

15

00:01:14.670  -->  00:01:25.260
out of this loop here. On the other hand, what happens if I type continue here? Let's see what happens

16

00:01:25.260  -->  00:01:30.530
if I hit run now, I get 0,2,3,4,

17

00:01:30.570  -->  00:01:32.920
so 1 is not printed out.

18

00:01:32.970  -->  00:01:40.290
The reason for this is that if i equals 1, we immediately continue with the next iteration and the code

19

00:01:40.380  -->  00:01:44.300
after this here is no longer executed

20

00:01:44.310  -->  00:01:47.230
but only for the current iteration of course.

21

00:01:47.310  -->  00:01:51.870
So we're not skipping out of the complete control structure, like we did with break,

22

00:01:52.080  -->  00:01:58.260
we're only finishing the current iteration and to tell Javascript to continue with the next one.

23

00:01:58.620  -->  00:02:03.100
That's nice but what happens if I have a loop inside a loop?

24

00:02:03.330  -->  00:02:16.830
So I'll add my loop from before again and I'll take all that code and put it inside here or that should

25

00:02:16.830  -->  00:02:18.790
actually stay outside.

26

00:02:18.840  -->  00:02:22.880
So if I hit run now, what do you think will happen?

27

00:02:24.480  -->  00:02:27.770
Well, I still see all these values

28

00:02:28.010  -->  00:02:29.490
and why is this happening?

29

00:02:29.610  -->  00:02:34.830
Because this continue statement here which is triggered if i is 1, which certainly is the case

30

00:02:34.830  -->  00:02:40.590
upon the second iteration, will only refer to this inner loop,

31

00:02:40.690  -->  00:02:46.740
so this inner loop will continue which doesn't really matter because we weren't executing code here anyways

32

00:02:46.740  -->  00:02:47.120
.

33

00:02:47.310  -->  00:02:59.610
So if I print something here inside inner loop, j equals and then j and we can combine a string and a number

34

00:03:00.000  -->  00:03:04.030
by adding a plus sign between string and number

35

00:03:04.070  -->  00:03:08.700
variable by the way or we can add any variable, not just numbers like this, so

36

00:03:08.700  -->  00:03:15.350
we can combine a string and a variable by adding plus and can print this out,

37

00:03:15.360  -->  00:03:18.970
so what do you think will happen now if I hit run?

38

00:03:20.310  -->  00:03:20.580
OK,

39

00:03:20.580  -->  00:03:23.640
we get the inner loop, j equals zero

40

00:03:23.700  -->  00:03:24.880
and so on

41

00:03:25.020  -->  00:03:26.940
and then we print 0

42

00:03:27.060  -->  00:03:36.120
but notice that we then only print 1. So for the case that i is 1, this part here is never executed

43

00:03:36.240  -->  00:03:42.420
which is why we have this gap here where we were missing this output.

44

00:03:42.420  -->  00:03:44.830
So continue refers to the inner loop,

45

00:03:45.150  -->  00:03:48.800
what happens if I type break here, let me clear this,

46

00:03:48.850  -->  00:03:52.540
what do you think we'll see.

47

00:03:52.710  -->  00:03:54.290
It's the same behavior,

48

00:03:54.390  -->  00:04:00.270
we're breaking out of the inner loop, not of the loop overall, not of the outer loop, just of the inner loop

49

00:04:00.280  -->  00:04:01.290
.

50

00:04:02.370  -->  00:04:04.070
So that's important to understand, that the

51

00:04:04.080  -->  00:04:11.010
continue and break only refer to the loop in which they are written, not to any other wrapping

52

00:04:11.010  -->  00:04:13.740
loops you might have around them.
