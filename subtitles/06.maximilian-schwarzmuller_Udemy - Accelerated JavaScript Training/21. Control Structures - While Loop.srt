1

00:00:00,690  -->  00:00:02,910
So we had to look at the for loop

2

00:00:02,940  -->  00:00:08,850
but there is another loop built-in and actually, there are two other loops but one loop is something I'll have a look

3

00:00:08,850  -->  00:00:11,540
at when we talk about objects. The other loop

4

00:00:11,610  -->  00:00:20,490
I want to talk about right now is the while loop. The while loop works like this; I set a variable,

5

00:00:20,640  -->  00:00:29,850
let's say number, equal to 5 and then I want to create a while loop with the while keyword and then parentheses

6

00:00:29,850  -->  00:00:30,400
.

7

00:00:30,540  -->  00:00:36,660
Now between the parentheses here, I specify the condition which defines how long this loop will keep

8

00:00:36,660  -->  00:00:37,150
running,

9

00:00:37,170  -->  00:00:38,820
so you can read this like

10

00:00:38,850  -->  00:00:45,020
while this condition here is true, I will execute the code between the curly braces,

11

00:00:45,120  -->  00:00:54,320
so as a condition here, I'll specify that number should be smaller than 7. Inside this loop,

12

00:00:54,330  -->  00:00:59,850
I'll log number and I will increase number by 1.

13

00:00:59,910  -->  00:01:02,600
So it is kind of like this for loop

14

00:01:02,610  -->  00:01:08,310
I created a couple of minutes ago but written in a different way.

15

00:01:08,340  -->  00:01:09,270
What do you think happens

16

00:01:09,270  -->  00:01:15,600
if I hit run? I get 5 and 6 because currently it's 5,

17

00:01:15,630  -->  00:01:16,770
I print 5,

18

00:01:16,830  -->  00:01:23,080
it gets incremented so it's 6 which is still smaller than 7, I print 6,

19

00:01:23,160  -->  00:01:28,160
it gets incremented to 7 which is no longer smaller than 7

20

00:01:28,170  -->  00:01:30,420
therefore we quit the loop.

21

00:01:30,420  -->  00:01:35,380
So you might think, OK that's just another way to write what we already learned.

22

00:01:35,670  -->  00:01:38,030
Well that is just one example of course,

23

00:01:38,160  -->  00:01:44,810
you not only can check if something is smaller than something else but you might check some condition

24

00:01:45,180  -->  00:01:47,640
and you might set condition inside this loop,

25

00:01:47,670  -->  00:01:50,570
well conditionally depending on something else.

26

00:01:50,610  -->  00:01:58,890
So while really is a generic loop which you can use to check any condition you might have to keep running

27

00:01:59,160  -->  00:02:04,390
until a condition is fulfilled or is no longer fulfilled to be precise,

28

00:02:04,380  -->  00:02:07,630
so until this is no longer true.

29

00:02:07,770  -->  00:02:15,420
For example if you write while true and don't execute this, you would write an infinite loop here because

30

00:02:15,420  -->  00:02:17,200
this will never get changed,

31

00:02:17,340  -->  00:02:18,630
it's always true,

32

00:02:18,630  -->  00:02:22,400
this loop will keep running which certainly is not what you want,

33

00:02:22,470  -->  00:02:26,670
of course you can combine multiple control structures here.

34

00:02:26,670  -->  00:02:33,190
I'm setting condition to true here and I'll use condition inside here,

35

00:02:33,210  -->  00:02:40,300
next I'll also create another variable called i which is set to 2 and inside this condition here,

36

00:02:40,410  -->  00:02:43,020
I'll check if i equals 3.

37

00:02:43,110  -->  00:02:47,510
If this is the case, I'll set condition to false,

38

00:02:47,810  -->  00:02:52,290
otherwise I'll print i

39

00:02:53,550  -->  00:02:55,800
and I'll increment i thereafter.

40

00:02:56,310  -->  00:02:59,180
What do you think we'll get if I hit run?

41

00:03:00,210  -->  00:03:07,350
Well we get 2 and 3, 2 is the starting value of course and then we increment it to 3 which is when

42

00:03:07,350  -->  00:03:09,130
we set condition to false

43

00:03:09,240  -->  00:03:14,490
but we're not instantly skipping out of the loop of course, we're just setting condition to false,

44

00:03:14,490  -->  00:03:16,290
we still execute this code

45

00:03:16,290  -->  00:03:22,410
but then when we reach the next iteration, we again check the condition and as it was set to false, 

46

00:03:22,410  -->  00:03:24,810
now the loop is finished.

47

00:03:24,900  -->  00:03:32,080
Now sometimes, you also do have a case where your initial condition might be false right from the beginning

48

00:03:32,090  -->  00:03:32,250
but

49

00:03:32,340  -->  00:03:38,130
you nonetheless want to execute at least one iteration of the loop.

50

00:03:38,130  -->  00:03:43,020
So for example if I set condition to false and I get rid of all the other stuff here

51

00:03:46,290  -->  00:03:50,490
and I write log,

52

00:03:51,200  -->  00:03:52,980
execute it here,

53

00:03:53,640  -->  00:03:55,480
what do you think I'll see?

54

00:03:56,190  -->  00:04:01,670
Nothing of course because condition is set to false but let's say condition is not hardcoded to

55

00:04:01,720  -->  00:04:06,480
false but instead set through your program and it might be true

56

00:04:06,660  -->  00:04:14,700
and nonetheless, not depending on its value, you want to at least execute the code here at least once.

57

00:04:15,510  -->  00:04:24,760
For this case, we get another loop, the do/while loop and it's basically the while loop but we add another

58

00:04:24,840  -->  00:04:31,720
keyword, do, then curly braces and then the while condition at the end followed by a semi-colon.

59

00:04:32,160  -->  00:04:39,110
So we're still use this while condition but we specify that we want to execute this code anyways,

60

00:04:39,180  -->  00:04:42,650
so even if it is false right from the beginning.

61

00:04:43,020  -->  00:04:51,570
So if I now hit run, we see executed, even though the condition is false, we only see it getting executed

62

00:04:51,600  -->  00:04:52,450
once

63

00:04:52,560  -->  00:04:57,180
but this one time is executed at least, which is what the do

64

00:04:57,180  -->  00:04:59,620
keyword here allows us to do.

65

00:05:00,660  -->  00:05:07,080
So that have been control structures, if statement, switch statement, for loop and while loop

66

00:05:07,170  -->  00:05:13,740
and how you can combine them, how you can control them with break and continue and setting the conditions

67

00:05:13,740  -->  00:05:20,940
for the while loop for example. Control structures are very important and allow you to change the flow

68

00:05:20,940  -->  00:05:22,820
of code execution or

69

00:05:22,850  -->  00:05:30,480
also of course dependently execute some code, which is something you'll probably need in most of your applications

70

00:05:30,490  -->  00:05:31,950
.
