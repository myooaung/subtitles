WEBVTT
1

00:00:01.740  -->  00:00:08.640
Speaking of strings, so text, there are more things we can do with that because a string is kind of

2

00:00:08.640  -->  00:00:09.830
a special thing.

3

00:00:10.020  -->  00:00:17.820
If I create a string here, so any text here, I can of course log it to the console, that shouldn't be

4

00:00:17.820  -->  00:00:19.000
too surprising,

5

00:00:19.020  -->  00:00:20.200
neither should the result be,

6

00:00:20.200  -->  00:00:26.920
I'll of course get any text here but a string is basically just an array of characters.

7

00:00:26.970  -->  00:00:33.980
So you could imagine this of being an array which has the a, the n, the y, this whitespace, t and so on.

8

00:00:34.050  -->  00:00:38.200
Therefore we can also access string.length

9

00:00:38.470  -->  00:00:41.680
and if I hit run, I get eight.

10

00:00:41.760  -->  00:00:45.340
So I get the number of characters including the whitespace here

11

00:00:45.900  -->  00:00:53.160
and this is important to know, that you can use a string like a character, so you can even go ahead and

12

00:00:53.160  -->  00:00:59.340
add square brackets and access the element or let's say with the index two, the element with

13

00:00:59.340  -->  00:01:00.560
an index of two.

14

00:01:00.570  -->  00:01:03.590
What do you think we'll get if I hit run? We get

15

00:01:03.790  -->  00:01:04.490
y

16

00:01:04.650  -->  00:01:08.030
because remember, an array starts with the index of 0,

17

00:01:08.040  -->  00:01:11.800
so A is 0, n is 1

18

00:01:11.940  -->  00:01:13.950
and y has the index of 2.

19

00:01:14.250  -->  00:01:20.200
Yes and again, we can use a string like an array here. Alternative to this approach,

20

00:01:20.220  -->  00:01:27.000
we could have also used the charAt function which basically allows me to do the same,

21

00:01:27.000  -->  00:01:31.800
so if I hit run now, I also get y. On a string,

22

00:01:31.800  -->  00:01:40.670
we also can use the concat method and add a new string to it.

23

00:01:40.680  -->  00:01:48.480
So now if I hit run, we get any text add a new string where it certainly isn't the perfect English but

24

00:01:48.480  -->  00:01:54.630
I think you understand the point, that we can combine two arrays in the end here.

25

00:01:55.740  -->  00:02:04.440
Of course we can also use slice and so on but we also get some special string methods, like 

26

00:02:04.740  -->  00:02:06.040
toUppercase.

27

00:02:06.450  -->  00:02:12.630
What do you think I'll now get if I hit run? The same text but now converted to uppercase and of

28

00:02:12.630  -->  00:02:15.480
course the same is available for lowercase.

29

00:02:15.930  -->  00:02:22.540
I also could run split and then the character on which I want to split,

30

00:02:22.560  -->  00:02:24.860
for example the whitespace.

31

00:02:24.960  -->  00:02:33.810
What do you think we'll now see if I hit run? We get back an array which contains two strings as elements

32

00:02:33.810  -->  00:02:34.720
in this array,

33

00:02:34.860  -->  00:02:37.470
so we split this string

34

00:02:37.470  -->  00:02:44.190
or this array kind of, on a certain character, the whitespace, therefore this whitespace isn't included

35

00:02:44.190  -->  00:02:46.240
in any of the two elements here

36

00:02:46.470  -->  00:02:53.310
but the element before and after the whitespace shows up as an individual element in the resulting array.

37

00:02:54.090  -->  00:03:00.120
We also could have a case where we have a string with many whitespaces and if I log this string,

38

00:03:02.580  -->  00:03:05.810
you see the whitespaces are part of the text here.

39

00:03:06.270  -->  00:03:14.160
Now maybe I have some string where I don't want that excess whitespace, so I could call the trim function

40

00:03:14.170  -->  00:03:14.440
and

41

00:03:14.790  -->  00:03:17.730
what do you think we'll now get if I hit run?

42

00:03:18.930  -->  00:03:25.110
Well, we don't have all these excess whitespaces in the end. Notice that we still have the whitespace in

43

00:03:25.110  -->  00:03:32.690
the middle of the text but all the excess whitespaces at the end or beginning as you will see will get

44

00:03:32.700  -->  00:03:33.970
stripped out

45

00:03:34.260  -->  00:03:41.010
which for example is very useful when handling user input in some kind of form where users might be

46

00:03:41.060  -->  00:03:46.190
or might have an extra whitespace before or after their name,

47

00:03:46.230  -->  00:03:52.650
for example maybe they used their mobile phone and mobile phones might add an extra whitespace because

48

00:03:52.650  -->  00:03:56.810
they expect the next word and they enter the whitespace for you.

49

00:03:56.910  -->  00:04:02.020
So the user might submit a form where the name does have that extra whitespace

50

00:04:02.220  -->  00:04:08.100
and that might lead to problems if you save this whitespace to the database or anything like that

51

00:04:08.280  -->  00:04:14.220
and a simple check like this or a simple function like this can make sure that you trim out any excess

52

00:04:14.220  -->  00:04:24.150
whitespaces and only have the raw text without the leading or trailing whitespaces. So that are

53

00:04:24.150  -->  00:04:27.050
some important or useful string functions

54

00:04:27.060  -->  00:04:32.370
and again check out the cheatsheet for links to resources where you can learn all of the available

55

00:04:32.370  -->  00:04:33.100
functions

56

00:04:33.150  -->  00:04:36.790
but generally as a string is treated like an array,

57

00:04:36.870  -->  00:04:43.080
you might also try out all the array functions on a string and as just explained, some useful string

58

00:04:43.140  -->  00:04:47.600
extra functions where it wouldn't make sense to go through them all here

59

00:04:47.760  -->  00:04:55.640
but I think you get the point and you saw some of the most important ones in this lecture.
