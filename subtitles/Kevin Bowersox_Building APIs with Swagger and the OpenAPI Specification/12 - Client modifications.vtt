WEBVTT
1
00:00:00.050 --> 00:00:01.090
- [Instructor] There's one final piece

2
00:00:01.090 --> 00:00:04.090
of our course project that we need to put in place.

3
00:00:04.090 --> 00:00:08.010
We need to set up our Angular application

4
00:00:08.010 --> 00:00:13.040
to use the Apigee proxy URL so that the application

5
00:00:13.040 --> 00:00:17.050
accesses the production instance of our API.

6
00:00:17.050 --> 00:00:19.000
So, within Apigee,

7
00:00:19.000 --> 00:00:21.010
navigate to the proxies

8
00:00:21.010 --> 00:00:25.070
and we'll grab the hsports-catalog proxy.

9
00:00:25.070 --> 00:00:28.010
And inside of the configuration,

10
00:00:28.010 --> 00:00:31.070
we can grab the production URL.

11
00:00:31.070 --> 00:00:33.090
So just copy this address,

12
00:00:33.090 --> 00:00:36.060
and now we're going to head over

13
00:00:36.060 --> 00:00:40.000
to Visual Studio Code, where I have the

14
00:00:40.000 --> 00:00:43.060
hsports client application loaded.

15
00:00:43.060 --> 00:00:46.010
So within this Angular application,

16
00:00:46.010 --> 00:00:48.080
we're going to expand the source directory,

17
00:00:48.080 --> 00:00:50.050
and then the app directory,

18
00:00:50.050 --> 00:00:52.000
followed by rest,

19
00:00:52.000 --> 00:00:53.080
and then API.

20
00:00:53.080 --> 00:00:55.030
Inside of this directory,

21
00:00:55.030 --> 00:00:59.090
you'll find the product.service.ts class.

22
00:00:59.090 --> 00:01:01.070
Go ahead and open this class,

23
00:01:01.070 --> 00:01:05.010
and then I'm going to hide the sidebar

24
00:01:05.010 --> 00:01:07.030
so we can get a better view.

25
00:01:07.030 --> 00:01:09.060
If we take a look at the class,

26
00:01:09.060 --> 00:01:12.020
you'll notice, within this TypeScript file,

27
00:01:12.020 --> 00:01:15.070
we are still pointing to the mock API server

28
00:01:15.070 --> 00:01:17.050
running on SwaggerHub.

29
00:01:17.050 --> 00:01:20.000
Now, this worked out great before we had

30
00:01:20.000 --> 00:01:23.000
an API implementation in production.

31
00:01:23.000 --> 00:01:27.040
It allowed us to develop before the API was ready

32
00:01:27.040 --> 00:01:30.040
using the contract-first approach.

33
00:01:30.040 --> 00:01:32.070
Now that we have a production API,

34
00:01:32.070 --> 00:01:35.090
we're going to go ahead and switch over

35
00:01:35.090 --> 00:01:39.010
to point at the production implementation.

36
00:01:39.010 --> 00:01:43.030
So just paste the URL that we copied from Apigee

37
00:01:43.030 --> 00:01:45.070
that points to our API proxy,

38
00:01:45.070 --> 00:01:47.090
and save the file.

39
00:01:47.090 --> 00:01:52.040
Now we can go ahead and use the ng serve command

40
00:01:52.040 --> 00:01:55.080
to run our Angular application.

41
00:01:55.080 --> 00:01:59.040
This will cause Angular to build and serve the application

42
00:01:59.040 --> 00:02:03.040
so that we can access it within a browser.

43
00:02:03.040 --> 00:02:05.090
It appears Angular's completed its work,

44
00:02:05.090 --> 00:02:08.060
so let's navigate over to the browser

45
00:02:08.060 --> 00:02:11.090
and now we're going to access the application

46
00:02:11.090 --> 00:02:16.020
on our localhost at port4200.

47
00:02:16.020 --> 00:02:19.040
You'll notice that when accessing the application,

48
00:02:19.040 --> 00:02:25.050
all of the products served by the hplus sports catalog API

49
00:02:25.050 --> 00:02:27.070
are displayed on the webpage,

50
00:02:27.070 --> 00:02:33.010
so our Angular app was able to leverage the API

51
00:02:33.010 --> 00:02:36.090
that we built using all of Swagger's tooling,

52
00:02:36.090 --> 00:02:42.050
as well as Azure and the Apigee API management platform.

53
00:02:42.050 --> 00:02:44.070
At this point, we have a working app

54
00:02:44.070 --> 00:02:47.000
and our course project is complete.

