WEBVTT
1
00:00:00.080 --> 00:00:02.030
- [Instructor] Swagger's open source tools

2
00:00:02.030 --> 00:00:04.080
are a great way to design, document

3
00:00:04.080 --> 00:00:08.020
and build definitions for RESTful web services.

4
00:00:08.020 --> 00:00:11.000
Let's take a closer look at these tools.

5
00:00:11.000 --> 00:00:14.040
There are three tools within the open source toolbox,

6
00:00:14.040 --> 00:00:18.080
the Swagger Editor, Swagger UI, and Swagger Codegen.

7
00:00:18.080 --> 00:00:20.040
The editor acts like an IDE

8
00:00:20.040 --> 00:00:23.080
for building API definition files.

9
00:00:23.080 --> 00:00:27.060
Swagger UI can consume API definition files

10
00:00:27.060 --> 00:00:31.000
to produce interactive API documentation.

11
00:00:31.000 --> 00:00:34.080
Finally, Swagger Codegen can build API clients

12
00:00:34.080 --> 00:00:37.090
or server stubs in several languages

13
00:00:37.090 --> 00:00:41.000
based off of the API definition files.

14
00:00:41.000 --> 00:00:44.040
The most important takeaway is that Swagger's tooling

15
00:00:44.040 --> 00:00:47.060
centers around API definition files

16
00:00:47.060 --> 00:00:51.050
that conform to the open API specification.

17
00:00:51.050 --> 00:00:53.050
On the Swagger website is a live

18
00:00:53.050 --> 00:00:55.060
demo of each of these tools.

19
00:00:55.060 --> 00:00:57.090
Let's take a closer look at the demos

20
00:00:57.090 --> 00:01:00.020
to get more familiar with the tooling.

21
00:01:00.020 --> 00:01:03.030
The first tool we'll look at is the Swagger Editor.

22
00:01:03.030 --> 00:01:05.060
You'll notice on the left side of the screen,

23
00:01:05.060 --> 00:01:07.090
we have the editor itself.

24
00:01:07.090 --> 00:01:11.070
It provides us with auto completion features

25
00:01:11.070 --> 00:01:16.070
that we can use to quickly build out our API definitions.

26
00:01:16.070 --> 00:01:23.090
You'll also notice that as we update our API definition,

27
00:01:23.090 --> 00:01:27.050
the interactive documentation on the right hand side

28
00:01:27.050 --> 00:01:30.050
will update with the changes that we've made.

29
00:01:30.050 --> 00:01:33.070
This allows us to quickly see the changes

30
00:01:33.070 --> 00:01:36.070
we make to our API definitions.

31
00:01:36.070 --> 00:01:39.000
Another nice feature of the editor

32
00:01:39.000 --> 00:01:40.060
is the fact that it can alert us

33
00:01:40.060 --> 00:01:43.060
to errors within our API definition.

34
00:01:43.060 --> 00:01:45.060
So you'll notice when we introduce an error,

35
00:01:45.060 --> 00:01:48.010
we get flagged on the right hand side

36
00:01:48.010 --> 00:01:50.070
so that we can correct the issue.

37
00:01:50.070 --> 00:01:53.050
Think of the Swagger editor as a code editor,

38
00:01:53.050 --> 00:01:56.010
just like Eclipse or Visual Studio.

39
00:01:56.010 --> 00:01:59.030
However this editor is specifically designed

40
00:01:59.030 --> 00:02:03.040
to build OES compliant API definition files.

41
00:02:03.040 --> 00:02:07.080
On the website, we can also get a preview of Swagger UI.

42
00:02:07.080 --> 00:02:10.010
Swagger UI hosts the API

43
00:02:10.010 --> 00:02:14.000
documentation generated from our API definition file.

44
00:02:14.000 --> 00:02:17.030
Here, we see that Swagger has provided us

45
00:02:17.030 --> 00:02:22.000
with documentation for a fictional pet store API.

46
00:02:22.000 --> 00:02:25.040
On this documentation, we're able to see the endpoints

47
00:02:25.040 --> 00:02:29.010
or the operations exposed by the API.

48
00:02:29.010 --> 00:02:32.060
If we were a consumer or a client of this API,

49
00:02:32.060 --> 00:02:35.030
this is extremely valuable, because we're able

50
00:02:35.030 --> 00:02:38.060
to dive into the different endpoints,

51
00:02:38.060 --> 00:02:41.070
see the request bodies that we need to send

52
00:02:41.070 --> 00:02:44.090
to the endpoint in order to invoke the operation,

53
00:02:44.090 --> 00:02:48.090
and then we're also able to see what responses

54
00:02:48.090 --> 00:02:51.090
are provided by the API.

55
00:02:51.090 --> 00:02:55.020
Another nice feature of the API documentation

56
00:02:55.020 --> 00:02:57.060
is that we have this try it out feature

57
00:02:57.060 --> 00:03:02.070
which allows us to send calls against a mocked version

58
00:03:02.070 --> 00:03:04.050
of the API.

59
00:03:04.050 --> 00:03:08.070
The final tool we'll look at is Swagger Codegen.

60
00:03:08.070 --> 00:03:10.060
You'll notice within the editor,

61
00:03:10.060 --> 00:03:13.060
we have these two menu options, generate server

62
00:03:13.060 --> 00:03:15.040
and generate client.

63
00:03:15.040 --> 00:03:18.040
If we take a look, you'll see many languages

64
00:03:18.040 --> 00:03:22.070
and frameworks that Swagger Codegen supports.

65
00:03:22.070 --> 00:03:25.010
For each of these languages or frameworks,

66
00:03:25.010 --> 00:03:29.020
we're able to generate a client SDK for our API,

67
00:03:29.020 --> 00:03:32.000
or we can generate a server stub.

68
00:03:32.000 --> 00:03:36.010
So let's generate a spring framework server stub

69
00:03:36.010 --> 00:03:38.070
for our pet store API.

70
00:03:38.070 --> 00:03:41.000
Once we click on the option, you'll notice

71
00:03:41.000 --> 00:03:44.050
that the code downloads and then if we inspect

72
00:03:44.050 --> 00:03:48.040
the zip file, we'll see the source code that we can use

73
00:03:48.040 --> 00:03:51.080
to build our API implementation.

74
00:03:51.080 --> 00:03:54.010
Throughout this course, we're going to be working

75
00:03:54.010 --> 00:03:56.070
with all three of these tools, and I'll teach you

76
00:03:56.070 --> 00:04:00.000
the tricks in order to be successful with them.

