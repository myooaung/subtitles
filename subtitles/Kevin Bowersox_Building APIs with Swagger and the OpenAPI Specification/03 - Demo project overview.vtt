WEBVTT
1
00:00:13.000 --> 00:00:13.000
This is an angular application that receives its data

2
00:00:13.000 --> 00:00:17.000
This is an angular application that receives its data

3
00:00:17.000 --> 00:00:22.009
and capabilities from the H Plus Sport Catalog API.

4
00:00:22.009 --> 00:00:25.008
So all the information that you see

5
00:00:25.008 --> 00:00:28.008
regarding the products within this page

6
00:00:28.008 --> 00:00:28.080
is provided by an API implementation

7
00:00:28.080 --> 00:00:32.005
is provided by an API implementation

8
00:00:32.005 --> 00:00:38.001
that we designed and defined using Swagger and OAS.

9
00:00:38.001 --> 00:00:42.004
The API definition is created in Swagger Hub.

10
00:00:42.004 --> 00:00:46.002
So we defined the different operations on that API

11
00:00:46.002 --> 00:00:48.003
and described the different data

12
00:00:48.003 --> 00:00:52.004
that those operations expect, and the data that they return

13
00:00:52.004 --> 00:00:54.007
to the API consumer.

14
00:00:54.007 --> 00:00:57.000
With that definition file we were able

15
00:00:57.000 --> 00:00:59.007
to generate documentation.

16
00:00:59.007 --> 00:01:05.002
So this documentation is beneficial for any API consumer

17
00:01:05.002 --> 00:01:10.008
that's looking to invoke those operations on the API.

18
00:01:10.008 --> 00:01:13.005
We were also able to use Swagger Hub

19
00:01:13.005 --> 00:01:16.007
and our API definition file to generate

20
00:01:16.007 --> 00:01:20.005
two different components within the solutions architecture.

21
00:01:20.005 --> 00:01:25.002
So we built out a client SDK based upon

22
00:01:25.002 --> 00:01:27.003
type script and angular,

23
00:01:27.003 --> 00:01:32.002
and that client SDK's used within the angular application

24
00:01:32.002 --> 00:01:36.000
to communicate with the API.

25
00:01:36.000 --> 00:01:36.000
The API implementation was created based upon

26
00:01:36.000 --> 00:01:40.008
The API implementation was created based upon

27
00:01:40.008 --> 00:01:44.006
a server stub that we generated through Swagger Hub

28
00:01:44.006 --> 00:01:49.000
using its generation capabilities for the spring framework.

29
00:01:49.000 --> 00:01:51.006
So we generated the server stub

30
00:01:51.006 --> 00:01:53.004
that uses the spring framework,

31
00:01:53.004 --> 00:01:56.009
and then we provided some additional implementation

32
00:01:56.009 --> 00:01:59.006
that served the data for the products

33
00:01:59.006 --> 00:02:02.000
and provided some additional capabilities

34
00:02:02.000 --> 00:02:04.004
that would allow you to create a product.

35
00:02:04.004 --> 00:02:07.009
Once we had that API implementation completed

36
00:02:07.009 --> 00:02:11.003
we packaged it into a jar file,

37
00:02:11.003 --> 00:02:13.009
and we needed a place to host and run

38
00:02:13.009 --> 00:02:16.001
that API implementation,

39
00:02:16.001 --> 00:02:16.010
so we turned to Microsoft Azure.

40
00:02:16.010 --> 00:02:19.007
so we turned to Microsoft Azure.

41
00:02:19.007 --> 00:02:22.005
Within Microsoft Azure we were able

42
00:02:22.005 --> 00:02:26.000
to provision a Linux BM and we deployed

43
00:02:26.000 --> 00:02:28.004
our API implementation to it.

44
00:02:28.004 --> 00:02:31.005
We then ran that implementation on the BM

45
00:02:31.005 --> 00:02:36.004
and we put DNS in front of the API implementation

46
00:02:36.004 --> 00:02:40.001
so that we had an easy way to send all of our traffic there.

47
00:02:40.001 --> 00:02:42.005
So here you can see some of the traffic

48
00:02:42.005 --> 00:02:45.006
that has gone to our API implementation.

49
00:02:45.006 --> 00:02:48.009
Once we had the implementation up and running on Azure,

50
00:02:48.009 --> 00:02:53.006
with DNS, we turned to another tool, Google Apigee.

51
00:02:53.006 --> 00:02:53.060
So Google Apigee is an API management solution.

52
00:02:53.060 --> 00:02:57.009
So Google Apigee is an API management solution.

53
00:02:57.009 --> 00:03:01.004
So if you're an organization with a large catalog

54
00:03:01.004 --> 00:03:05.003
of APIs Apigee can help you centralize

55
00:03:05.003 --> 00:03:09.002
the management of some API concerns.

56
00:03:09.002 --> 00:03:13.002
So things like security, throttling, and monitoring

57
00:03:13.002 --> 00:03:17.003
can be handled in a central solution

58
00:03:17.003 --> 00:03:20.008
that you proxy all of your API traffic through.

59
00:03:20.008 --> 00:03:23.006
So here you can see some of the capabilities

60
00:03:23.006 --> 00:03:25.002
provided by Apigee.

61
00:03:25.002 --> 00:03:31.003
It provides you with a area to develop and proxy APIs,

62
00:03:31.003 --> 00:03:33.001
and then you can also do things

63
00:03:33.001 --> 00:03:36.002
like monitor their performance, see some geo mapping

64
00:03:36.002 --> 00:03:38.006
about where your traffic is coming from.

65
00:03:38.006 --> 00:03:41.007
So all sorts of great management tools

66
00:03:41.007 --> 00:03:44.005
for a catalog of APIs.

67
00:03:44.005 --> 00:03:49.002
So the key take away here is this entire solution

68
00:03:49.002 --> 00:03:52.007
was enabled by the API definition files

69
00:03:52.007 --> 00:03:56.000
that we created using Swagger's tools

70
00:03:56.000 --> 00:03:58.005
and the open API specification.

71
00:03:58.005 --> 00:04:01.004
It allowed us to quickly and efficiently

72
00:04:01.004 --> 00:04:06.005
deliver a solution that had high quality documentation

73
00:04:06.005 --> 00:04:08.003
that would attract developers

74
00:04:08.003 --> 00:04:11.000
and promote high adoption rates.

