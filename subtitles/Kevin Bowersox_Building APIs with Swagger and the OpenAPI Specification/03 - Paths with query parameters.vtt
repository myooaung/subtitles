WEBVTT
1
00:00:00.050 --> 00:00:02.070
- In this lesson, we'll learn how to describe

2
00:00:02.070 --> 00:00:06.010
query parameters within an API definition.

3
00:00:06.010 --> 00:00:07.090
In the first demonstration,

4
00:00:07.090 --> 00:00:11.000
we build a simple end point that listed all the products

5
00:00:11.000 --> 00:00:14.020
available in the H Plus Sports catalog.

6
00:00:14.020 --> 00:00:18.040
It did not require API clients to provide additional data,

7
00:00:18.040 --> 00:00:21.090
which isn't the case for most API operations.

8
00:00:21.090 --> 00:00:24.020
Let's enhance that operation

9
00:00:24.020 --> 00:00:27.000
to accept two additional query parameters,

10
00:00:27.000 --> 00:00:29.020
page size and page number,

11
00:00:29.020 --> 00:00:33.040
that introduce a paging capability into the API.

12
00:00:33.040 --> 00:00:37.040
We'll introduce the new parameters using Swagger Editor.

13
00:00:37.040 --> 00:00:41.090
When we describe parameters for an API definition,

14
00:00:41.090 --> 00:00:45.040
we place them underneath the operation.

15
00:00:45.040 --> 00:00:48.060
So I'm going to create a new line below get,

16
00:00:48.060 --> 00:00:52.030
and here I can rely upon the auto-completion

17
00:00:52.030 --> 00:00:56.040
to specify the parameters object.

18
00:00:56.040 --> 00:01:00.000
Now inside of the parameters object,

19
00:01:00.000 --> 00:01:04.000
we can provide an array of parameters.

20
00:01:04.000 --> 00:01:08.080
The way we do that is by specifying a dash nested two spaces

21
00:01:08.080 --> 00:01:11.010
within the parameters object,

22
00:01:11.010 --> 00:01:18.020
then we use the in property to define the type of parameter.

23
00:01:18.020 --> 00:01:20.030
You'll see that we have several options,

24
00:01:20.030 --> 00:01:23.070
query, header, path, and cookie.

25
00:01:23.070 --> 00:01:27.060
In this case, we want to use the query option

26
00:01:27.060 --> 00:01:32.050
and this means that the parameter is going to be provided

27
00:01:32.050 --> 00:01:34.080
within the query string.

28
00:01:34.080 --> 00:01:39.030
Once we've specified the type of the parameter,

29
00:01:39.030 --> 00:01:43.030
we then go ahead and specify its name.

30
00:01:43.030 --> 00:01:48.060
The name of our first parameter is going to be page number,

31
00:01:48.060 --> 00:01:52.000
and then we can go ahead and provide a description

32
00:01:52.000 --> 00:01:53.010
of this parameter,

33
00:01:53.010 --> 00:01:56.060
so we can see the page number to return,

34
00:01:56.060 --> 00:02:00.060
and then we specify whether or not it's required.

35
00:02:00.060 --> 00:02:04.020
In this case, we're not going to require the parameter

36
00:02:04.020 --> 00:02:08.020
to be supplied when the operation is invoked.

37
00:02:08.020 --> 00:02:11.060
Then we can provide the schema,

38
00:02:11.060 --> 00:02:15.040
which outlines what the data type looks like

39
00:02:15.040 --> 00:02:19.000
that our API expects to consume.

40
00:02:19.000 --> 00:02:22.090
In this case, it's going to expect a simple integer

41
00:02:22.090 --> 00:02:27.060
and we can give an example of what that integer looks like.

42
00:02:27.060 --> 00:02:31.040
We're then going to add another item to this array

43
00:02:31.040 --> 00:02:34.060
for the second query parameter,

44
00:02:34.060 --> 00:02:37.080
and this query parameter is going to have

45
00:02:37.080 --> 00:02:40.070
a name of page size,

46
00:02:40.070 --> 00:02:43.090
and its description is going to state

47
00:02:43.090 --> 00:02:48.040
that it is the number of results in the page,

48
00:02:48.040 --> 00:02:54.040
and then we can go ahead and specify that it is not required

49
00:02:54.040 --> 00:02:56.040
using the required property,

50
00:02:56.040 --> 00:03:00.010
and then finally we can describe the type of data

51
00:03:00.010 --> 00:03:02.000
we expect to consume.

52
00:03:02.000 --> 00:03:04.010
It's going to be an integer,

53
00:03:04.010 --> 00:03:08.080
and then we can provide an example of that data.

54
00:03:08.080 --> 00:03:11.070
Let's say that it's going to be 10,

55
00:03:11.070 --> 00:03:14.040
and then another thing that we can look at

56
00:03:14.040 --> 00:03:18.000
is the various constraints that we can place

57
00:03:18.000 --> 00:03:19.060
on this parameter.

58
00:03:19.060 --> 00:03:22.060
We can set something like a minimum, a maximum,

59
00:03:22.060 --> 00:03:26.020
a max length, you can even provide a pattern here,

60
00:03:26.020 --> 00:03:29.070
in order to constrain the type of data provided.

61
00:03:29.070 --> 00:03:33.080
Let's just go ahead and specify that they can only request

62
00:03:33.080 --> 00:03:39.000
a maximum of 100 items within the page.

63
00:03:39.000 --> 00:03:42.070
If we look at our interactive API documentation,

64
00:03:42.070 --> 00:03:46.040
you'll now see that these two parameters

65
00:03:46.040 --> 00:03:49.050
are contained within the documentation

66
00:03:49.050 --> 00:03:53.000
for this API operation.

