WEBVTT
1
00:00:00.050 --> 00:00:03.050
- [Instructor] The component section of an API definition

2
00:00:03.050 --> 00:00:06.090
can include objects other than schemas.

3
00:00:06.090 --> 00:00:12.030
Using the auto-completion feature,

4
00:00:12.030 --> 00:00:15.060
that we can define as reusable components.

5
00:00:15.060 --> 00:00:17.080
You'll notice that we're able to specify

6
00:00:17.080 --> 00:00:21.040
request bodies, headers, and responses.

7
00:00:21.040 --> 00:00:29.080
Let's go ahead and build out a standard response

8
00:00:29.080 --> 00:00:33.030
You'll notice that we could define these errors

9
00:00:33.030 --> 00:00:36.030
within each operation themselves,

10
00:00:36.030 --> 00:00:43.010
buy putting a status code underneath the operation

11
00:00:43.010 --> 00:00:45.070
Instead, we're going to create the response

12
00:00:45.070 --> 00:00:49.010
within the component section for reusability.

13
00:00:49.010 --> 00:00:52.040
The first thing we'll need to do under the response object

14
00:00:52.040 --> 00:00:57.090
is name our new response.

15
00:00:57.090 --> 00:01:01.080
a response named 500 API error,

16
00:01:01.080 --> 00:01:05.060
and then we'll go ahead and underneath that object,

17
00:01:05.060 --> 00:01:10.070
we'll define what it looks like.

18
00:01:10.070 --> 00:01:15.040
so we'll say this is an unexpected error,

19
00:01:15.040 --> 00:01:20.060
and then we'll go ahead and describe what the actual data

20
00:01:20.060 --> 00:01:24.050
returned to the API client will look like.

21
00:01:24.050 --> 00:01:27.060
So we can specify the content object

22
00:01:27.060 --> 00:01:32.010
and within that we can still specify a media type.

23
00:01:32.010 --> 00:01:34.040
We're going to be using json once again,

24
00:01:34.040 --> 00:01:39.090
and then we start to define that schema object.

25
00:01:39.090 --> 00:01:43.090
So underneath the schema object, we specify

26
00:01:43.090 --> 00:01:46.040
the type of the data we're going to return,

27
00:01:46.040 --> 00:01:48.060
in this case it's going to be an object,

28
00:01:48.060 --> 00:01:52.070
and that object's going to contain two properties.

29
00:01:52.070 --> 00:02:03.000
One being a status code, which is of type string.

30
00:02:03.000 --> 00:02:10.000
so we'll say it is a 500,

31
00:02:10.000 --> 00:02:12.080
returned to the API client.

32
00:02:12.080 --> 00:02:15.090
This is also going to be of type string,

33
00:02:15.090 --> 00:02:17.080
and we'll just provide something really generic

34
00:02:17.080 --> 00:02:20.000
like this is an error.

35
00:02:20.000 --> 00:02:25.010
Okay, now that we have our 500 API error described,

36
00:02:25.010 --> 00:02:29.040
we can reuse it across our API definitions.

37
00:02:29.040 --> 00:02:35.040
So what we'll do, is within each of our operations,

38
00:02:35.040 --> 00:02:40.000
we can specify a 500 status code as a response,

39
00:02:40.000 --> 00:02:46.080
and then we use the ref property

40
00:02:46.080 --> 00:02:49.004
So I'm just going to go ahead and copy this,

41
00:02:49.004 --> 00:02:53.009
and then navigate to our next API operation

42
00:02:53.009 --> 00:02:53.090
within here, I'll specify what we return

43
00:02:53.090 --> 00:02:57.002
within here, I'll specify what we return

44
00:02:57.002 --> 00:03:01.003
in the event of a 500, and then we will add

45
00:03:01.003 --> 00:03:01.030
our final 500 status code to our last API operation.

46
00:03:01.030 --> 00:03:08.002
our final 500 status code to our last API operation.

47
00:03:08.002 --> 00:03:08.020
Now if we take a look at our documentation that was built,

48
00:03:08.020 --> 00:03:11.009
Now if we take a look at our documentation that was built,

49
00:03:11.009 --> 00:03:11.090
we will now see the 500 response defined

50
00:03:11.090 --> 00:03:16.004
we will now see the 500 response defined

51
00:03:16.004 --> 00:03:16.040
within each of our operations.

52
00:03:16.040 --> 00:03:20.003
within each of our operations.

53
00:03:20.003 --> 00:03:20.030
So there is the 500 error that we'll return.

54
00:03:20.030 --> 00:03:25.002
So there is the 500 error that we'll return.

55
00:03:25.002 --> 00:03:25.020
This is a great way to achieve a standard error response

56
00:03:25.020 --> 00:03:30.001
This is a great way to achieve a standard error response

57
00:03:30.001 --> 00:03:30.010
across the APIs that you build for your organization.

58
00:03:30.010 --> 00:03:34.000
across the APIs that you build for your organization.

