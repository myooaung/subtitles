WEBVTT
1
00:00:00.070 --> 00:00:01.070
- [Instructor] To kick things off,

2
00:00:01.070 --> 00:00:04.010
we'll discuss the overarching concepts

3
00:00:04.010 --> 00:00:07.070
that build the Swagger platform's foundation.

4
00:00:07.070 --> 00:00:09.040
To effectively use Swagger,

5
00:00:09.040 --> 00:00:11.090
you must understand the high level difference

6
00:00:11.090 --> 00:00:15.090
between Swagger and the OpenAPI Specification.

7
00:00:15.090 --> 00:00:18.000
It's a little confusing and developers

8
00:00:18.000 --> 00:00:21.020
often have trouble understanding the difference.

9
00:00:21.020 --> 00:00:24.030
Swagger is a toolset and structured approach

10
00:00:24.030 --> 00:00:27.070
that helps us design, document and generate code

11
00:00:27.070 --> 00:00:29.090
for RESTful APIs.

12
00:00:29.090 --> 00:00:33.090
The OpenAPI Specification provides a standard format

13
00:00:33.090 --> 00:00:38.060
for creating metadata that defines RESTful web services.

14
00:00:38.060 --> 00:00:40.080
Knowing the history behind these projects

15
00:00:40.080 --> 00:00:43.090
can help us better distinguish between the two.

16
00:00:43.090 --> 00:00:47.030
Swagger began in 2010 when Tony Tam started

17
00:00:47.030 --> 00:00:49.000
an opensource project

18
00:00:49.000 --> 00:00:52.020
to provide interactive API documentation

19
00:00:52.020 --> 00:00:56.020
and client SDKs for APIs at Wordnik,

20
00:00:56.020 --> 00:00:58.070
an online dictionary service.

21
00:00:58.070 --> 00:01:01.070
At this point in its history, Swagger included both

22
00:01:01.070 --> 00:01:04.090
the specification and the tooling.

23
00:01:04.090 --> 00:01:08.020
The Swagger specification provided a structured approach

24
00:01:08.020 --> 00:01:11.050
for documenting APIs and you will hear it referred to

25
00:01:11.050 --> 00:01:17.040
as OpenAPI Specification 2.0 or Swagger docs.

26
00:01:17.040 --> 00:01:20.020
As time passed, Swagger gained popularity

27
00:01:20.020 --> 00:01:23.080
amongst several competing API description languages

28
00:01:23.080 --> 00:01:27.010
and what's acquired by SmartBear in 2015.

29
00:01:27.010 --> 00:01:30.010
In order to keep the specification vendor neutral,

30
00:01:30.010 --> 00:01:33.020
SmartBear donated the Swagger specification

31
00:01:33.020 --> 00:01:36.050
to the OpenAPI Initiative who renamed it

32
00:01:36.050 --> 00:01:39.000
the OpenAPI Specification.

33
00:01:39.000 --> 00:01:43.010
The OpenAPI Initiative is a collaborative working group

34
00:01:43.010 --> 00:01:47.060
focused on development of the OpenAPI Specification

35
00:01:47.060 --> 00:01:50.090
which was formerly the Swagger specification.

36
00:01:50.090 --> 00:01:53.030
Members of the OpenAPI Initiative

37
00:01:53.030 --> 00:01:56.060
include prominent organizations such as Microsoft,

38
00:01:56.060 --> 00:02:00.060
Google, IBM, PayPal and SmartBear.

39
00:02:00.060 --> 00:02:03.000
So it's important to remember that Swagger

40
00:02:03.000 --> 00:02:06.010
allows us to easily design, document

41
00:02:06.010 --> 00:02:08.020
and generate code for APIs.

42
00:02:08.020 --> 00:02:12.030
Swagger's toolset helps us produce API definitions

43
00:02:12.030 --> 00:02:15.070
that adhere to the OpenAPI standard.

44
00:02:15.070 --> 00:02:18.070
Other tools can read those definition files

45
00:02:18.070 --> 00:02:21.070
to build documentation, server stubs

46
00:02:21.070 --> 00:02:25.000
and other client SDKs that are useful

47
00:02:25.000 --> 00:02:27.020
for working with APIs.

48
00:02:27.020 --> 00:02:30.010
On the other hand, the OpenAPI Specification

49
00:02:30.010 --> 00:02:33.000
provides a standard format for metadata

50
00:02:33.000 --> 00:02:37.000
used to describe or define RESTful web services.

51
00:02:37.000 --> 00:02:40.020
The metadata is machine readable so it can be consumed

52
00:02:40.020 --> 00:02:42.070
by tools or systems that are built

53
00:02:42.070 --> 00:02:47.020
to understand API definitions adhering to the standard.

54
00:02:47.020 --> 00:02:50.030
So at high-level, think of Swagger as a set of tools

55
00:02:50.030 --> 00:02:54.040
and OAS as the rules for describing APIs.

56
00:02:54.040 --> 00:02:56.040
The Swagger Toolbox can be broken down

57
00:02:56.040 --> 00:02:58.010
into two categories,

58
00:02:58.010 --> 00:03:01.010
the open-source tools and pro tools.

59
00:03:01.010 --> 00:03:04.050
The open-source tools are available to be downloaded

60
00:03:04.050 --> 00:03:06.090
and installed for free use.

61
00:03:06.090 --> 00:03:09.070
These tools provide the basics that you will need

62
00:03:09.070 --> 00:03:13.060
to build an API definition, API documentation

63
00:03:13.060 --> 00:03:15.080
and client SDKs.

64
00:03:15.080 --> 00:03:19.030
The pro tools provide a more comprehensive platform

65
00:03:19.030 --> 00:03:21.020
that includes collaboration features

66
00:03:21.020 --> 00:03:24.020
for teams that are building APIs.

67
00:03:24.020 --> 00:03:27.000
Additionally, you'll find the tools

68
00:03:27.000 --> 00:03:31.080
to build API definitions, generate code and documentation

69
00:03:31.080 --> 00:03:33.080
within the pro tools.

70
00:03:33.080 --> 00:03:37.070
The pro tools are available via a subscription service

71
00:03:37.070 --> 00:03:40.000
which includes a free plan.

72
00:03:40.000 --> 00:03:42.010
So at a high-level, this is an overview

73
00:03:42.010 --> 00:03:44.000
of the Swagger ecosystem.

74
00:03:44.000 --> 00:03:46.000
At the top level of the hierarchy,

75
00:03:46.000 --> 00:03:48.080
we need to distinguish between the Swagger toolset

76
00:03:48.080 --> 00:03:51.030
and the OpenAPI Specification.

77
00:03:51.030 --> 00:03:54.020
The Swagger toolset is further categorized

78
00:03:54.020 --> 00:03:57.030
by the open-source tools and the pro tools.

79
00:03:57.030 --> 00:03:59.020
Throughout the course, we'll be diving

80
00:03:59.020 --> 00:04:00.060
into each of these areas,

81
00:04:00.060 --> 00:04:05.000
so that you can build higher quality APIs in less time.

