WEBVTT
1
00:00:00.050 --> 00:00:02.070
- [Instructor] When building API definitions,

2
00:00:02.070 --> 00:00:06.000
some objects such as schemas or parameters

3
00:00:06.000 --> 00:00:10.020
may be found within more than one operation definition.

4
00:00:10.020 --> 00:00:13.030
Just like programming, it's important to keep it dry,

5
00:00:13.030 --> 00:00:15.050
meaning do not repeat yourself.

6
00:00:15.050 --> 00:00:19.070
To enforce this best practice, the OpenAPI Specification

7
00:00:19.070 --> 00:00:23.070
provides us with a way to reuse certain objects

8
00:00:23.070 --> 00:00:26.000
by making them reusable components

9
00:00:26.000 --> 00:00:28.080
within our API definition file.

10
00:00:28.080 --> 00:00:33.080
Let's look at our API, we find at least three instances

11
00:00:33.080 --> 00:00:38.000
where we define a data structure representing a product,

12
00:00:38.000 --> 00:00:41.030
one within the get operation for product,

13
00:00:41.030 --> 00:00:44.060
one within the post operation for product,

14
00:00:44.060 --> 00:00:48.080
and then one within our endpoint

15
00:00:48.080 --> 00:00:53.010
containing the template parameter

16
00:00:53.010 --> 00:00:54.050
It would be very helpful

17
00:00:54.050 --> 00:01:00.040
if we could reuse a data structure for this product,

18
00:01:00.040 --> 00:01:01.090
and that's what we're going to take a look at

19
00:01:01.090 --> 00:01:03.070
within this lesson.

20
00:01:03.070 --> 00:01:06.050
To begin, we're going to navigate to the bottom

21
00:01:06.050 --> 00:01:11.090
of our API definition file, and then using auto-completion,

22
00:01:11.090 --> 00:01:16.000
we're going to look for the components object,

23
00:01:16.000 --> 00:01:19.060
and then within that components object,

24
00:01:19.060 --> 00:01:24.070
we're able to specify the schemas object and here,

25
00:01:24.070 --> 00:01:30.000
we can use a name for our object we'd like to create,

26
00:01:30.000 --> 00:01:32.050
in this case, Product.

27
00:01:32.050 --> 00:01:36.010
Within the product, we need to specify

28
00:01:36.010 --> 00:01:39.070
what this data structure, or this reusable object,

29
00:01:39.070 --> 00:01:41.030
is going to look like.

30
00:01:41.030 --> 00:01:43.040
So, we have a really good idea

31
00:01:43.040 --> 00:01:46.080
because we've defined this multiple times,

32
00:01:46.080 --> 00:01:53.020
so we know it is an object that has a name and id property,

33
00:01:53.020 --> 00:02:11.040
so what I'm going to do is just copy this definition

34
00:02:11.040 --> 00:02:15.030
and then of course I need to line up this YAML

35
00:02:15.030 --> 00:02:22.000
to make sure it's valid,

36
00:02:22.000 --> 00:02:27.070
and once that's complete, we'll have a valid API definition.

37
00:02:27.070 --> 00:02:32.030
Now we have this Product object that we can refer to

38
00:02:32.030 --> 00:02:35.080
throughout our API, so let's scroll up,

39
00:02:35.080 --> 00:02:40.030
and here we see that we are defining Product,

40
00:02:40.030 --> 00:02:45.040
so at this point, we can remove this explicit definition

41
00:02:45.040 --> 00:02:50.060
of our schema, and we'll get introduced to a new property,

42
00:02:50.060 --> 00:02:54.010
and it's the $ref property,

43
00:02:54.010 --> 00:02:56.080
and once we've selected that property,

44
00:02:56.080 --> 00:03:02.090
just hit Control + Space and start typing Product,

45
00:03:02.090 --> 00:03:05.050
and then you can select the product

46
00:03:05.050 --> 00:03:08.080
that we defined within our components section.

47
00:03:08.080 --> 00:03:33.010
You'll notice there's a path pointing to that product,

48
00:03:33.010 --> 00:04:00.090
once again, introduce the reference,

49
00:04:00.090 --> 00:04:04.080
a reference to our product,

50
00:04:04.080 --> 00:04:09.060
and that will satisfy our API definition file.

51
00:04:09.060 --> 00:04:11.010
let's clean that up.

52
00:04:11.010 --> 00:04:14.050
Okay, so now if we look at our documentation,

53
00:04:14.050 --> 00:04:18.070
you can see we still have the same old product

54
00:04:18.070 --> 00:04:31.008
described for each of these operations,

55
00:04:31.008 --> 00:04:34.001
we only need to do it in one spot.

56
00:04:34.001 --> 00:04:39.003
So here, I'm adding a description for our product,

57
00:04:39.003 --> 00:04:39.030
and then I'm going to provide an example

58
00:04:39.030 --> 00:04:43.002
and then I'm going to provide an example

59
00:04:43.002 --> 00:04:47.007
and you will notice that each of our operations

60
00:04:47.007 --> 00:04:55.008
is now updated with our new property for our Product object.

61
00:04:55.008 --> 00:04:55.080
So, let's go ahead and we're going to add in

62
00:04:55.080 --> 00:04:59.009
So, let's go ahead and we're going to add in

63
00:04:59.009 --> 00:05:02.004
two more additional properties here

64
00:05:02.004 --> 00:05:05.008
that will be used by our API,

65
00:05:05.008 --> 00:05:10.007
the first that we're going to add is the image_title,

66
00:05:10.007 --> 00:05:16.001
so we're going to be able to provide some sort of image

67
00:05:16.001 --> 00:05:21.001
via this API, and the image_title's going to be a string,

68
00:05:21.001 --> 00:05:24.004
and, just as an example, we're going to say

69
00:05:24.004 --> 00:05:32.001
that it's mineral-water-lemon-lime,

70
00:05:32.001 --> 00:05:32.010
and then we can add another property,

71
00:05:32.010 --> 00:05:36.001
and then we can add another property,

72
00:05:36.001 --> 00:05:36.010
and this property is going to the image itself,

73
00:05:36.010 --> 00:05:39.009
and this property is going to the image itself,

74
00:05:39.009 --> 00:05:45.002
and here we're going to create a hyperlink

75
00:05:45.002 --> 00:05:51.002
to the actual image,

76
00:05:51.002 --> 00:05:54.007
and we'll just make up a fictional URL here

77
00:05:54.007 --> 00:05:54.070
to where that image resides.

78
00:05:54.070 --> 00:05:58.005
to where that image resides.

79
00:05:58.005 --> 00:05:58.050
Now, another neat thing that we can do

80
00:05:58.050 --> 00:06:00.007
Now, another neat thing that we can do

81
00:06:00.007 --> 00:06:00.070
within the component section is define some validations

82
00:06:00.070 --> 00:06:07.005
within the component section is define some validations

83
00:06:07.005 --> 00:06:07.050
for our different objects that we create.

84
00:06:07.050 --> 00:06:10.003
for our different objects that we create.

85
00:06:10.003 --> 00:06:10.030
So here you can see the required property,

86
00:06:10.030 --> 00:06:14.009
So here you can see the required property,

87
00:06:14.009 --> 00:06:14.090
and within that property, we can specify an array

88
00:06:14.090 --> 00:06:19.009
and within that property, we can specify an array

89
00:06:19.009 --> 00:06:19.090
of required fields on this object,

90
00:06:19.090 --> 00:06:23.002
of required fields on this object,

91
00:06:23.002 --> 00:06:23.020
so here we're saying that the name property

92
00:06:23.020 --> 00:06:26.009
so here we're saying that the name property

93
00:06:26.009 --> 00:06:26.090
is required anytime that we specify a Product object,

94
00:06:26.090 --> 00:06:32.009
is required anytime that we specify a Product object,

95
00:06:32.009 --> 00:06:32.090
and if we take a look at the schemas

96
00:06:32.090 --> 00:06:35.007
and if we take a look at the schemas

97
00:06:35.007 --> 00:06:35.070
defined within our documentation

98
00:06:35.070 --> 00:06:37.008
defined within our documentation

99
00:06:37.008 --> 00:06:37.080
that our API consumers can see,

100
00:06:37.080 --> 00:06:40.002
that our API consumers can see,

101
00:06:40.002 --> 00:06:44.003
you'll notice that name gets the required indicator.

102
00:06:44.003 --> 00:06:48.001
So, when a schema or object appears over and over again

103
00:06:48.001 --> 00:06:48.010
within your API definitions,

104
00:06:48.010 --> 00:06:50.003
within your API definitions,

105
00:06:50.003 --> 00:06:52.008
look to move it to the components section

106
00:06:52.008 --> 00:06:55.006
so that you can achieve that reusability

107
00:06:55.006 --> 00:07:01.000
and make your API definition files much more maintainable.

