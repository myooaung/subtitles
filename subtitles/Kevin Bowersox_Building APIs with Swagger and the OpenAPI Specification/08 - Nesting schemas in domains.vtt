WEBVTT
1
00:00:01.000 --> 00:00:03.080
- [Instructor] Domains are an extremely powerful concept

2
00:00:03.080 --> 00:00:05.070
within SwaggerHub.

3
00:00:05.070 --> 00:00:11.040
We're going to walk through another demonstration

4
00:00:11.040 --> 00:00:16.050
within domains and also nesting some of our schema objects.

5
00:00:16.050 --> 00:00:26.060
Let's navigate into the hplus domain

6
00:00:26.060 --> 00:00:41.020
to create version two.

7
00:00:41.020 --> 00:00:48.020
within our catalog API.

8
00:00:48.020 --> 00:00:52.000
that we're going to build within our domain.

9
00:00:52.000 --> 00:00:59.030
We'll define a new schema named Order.

10
00:00:59.030 --> 00:01:02.010
Within that schema object, we're going

11
00:01:02.010 --> 00:01:08.000
to have different properties including an ID

12
00:01:08.000 --> 00:01:20.070
We can give an example of this ID property.

13
00:01:20.070 --> 00:01:23.070
which will also be of type integer.

14
00:01:23.070 --> 00:01:26.090
We can give an example here.

15
00:01:26.090 --> 00:01:31.070
Then we're also going to grab the quantity.

16
00:01:31.070 --> 00:01:39.010
We want to know how many of these items were ordered

17
00:01:39.010 --> 00:01:43.060
Then we're going to specify an order date.

18
00:01:43.060 --> 00:01:46.090
This will tell us when the order was placed

19
00:01:46.090 --> 00:01:49.070
and this is going to be of type string.

20
00:01:49.070 --> 00:01:51.060
But we're going to do something different here

21
00:01:51.060 --> 00:01:54.040
where we specify a format property

22
00:01:54.040 --> 00:02:28.020
that says this string is using the date-time format.

23
00:02:28.020 --> 00:02:56.070
and that means we need to specify the year,

24
00:02:56.070 --> 00:03:02.004
and we're just going to add one additional property,

25
00:03:02.004 --> 00:03:02.040
The customer property is actually going to refer

26
00:03:02.040 --> 00:03:06.001
The customer property is actually going to refer

27
00:03:06.001 --> 00:03:06.010
to an existing schema with in our domain

28
00:03:06.010 --> 00:03:10.003
to an existing schema with in our domain

29
00:03:10.003 --> 00:03:10.030
and that's the Customer schema we see on line 36.

30
00:03:10.030 --> 00:03:14.004
and that's the Customer schema we see on line 36.

31
00:03:14.004 --> 00:03:14.040
In order to reference that, we use the hash sign

32
00:03:14.040 --> 00:03:19.005
In order to reference that, we use the hash sign

33
00:03:19.005 --> 00:03:22.006
and then we just specify the path to

34
00:03:22.006 --> 00:03:22.060
that schema object within our file.

35
00:03:22.060 --> 00:03:25.006
that schema object within our file.

36
00:03:25.006 --> 00:03:25.060
It will be within the components section of the file

37
00:03:25.060 --> 00:03:29.007
It will be within the components section of the file

38
00:03:29.007 --> 00:03:29.070
and then nested within that is schemas

39
00:03:29.070 --> 00:03:33.000
and then nested within that is schemas

40
00:03:33.000 --> 00:03:38.000
and then finally we have the Customer schema itself.

41
00:03:38.000 --> 00:03:41.006
If we inspect our API documentation

42
00:03:41.006 --> 00:03:41.060
you can see that the Order schema

43
00:03:41.060 --> 00:03:45.005
you can see that the Order schema

44
00:03:45.005 --> 00:03:45.050
has a nested Customer schema defined within it.

45
00:03:45.050 --> 00:03:49.006
has a nested Customer schema defined within it.

46
00:03:49.006 --> 00:03:49.060
Let's go ahead and save our domain

47
00:03:49.060 --> 00:03:52.001
Let's go ahead and save our domain

48
00:03:52.001 --> 00:03:52.010
and then we're going to publish

49
00:03:52.010 --> 00:03:54.003
and then we're going to publish

50
00:03:54.003 --> 00:03:54.030
the second version of our domain.

51
00:03:54.030 --> 00:04:00.002
the second version of our domain.

52
00:04:00.002 --> 00:04:03.003
Now that that's in place, we can navigate

53
00:04:03.003 --> 00:04:03.030
into the catalog API.

54
00:04:03.030 --> 00:04:06.007
into the catalog API.

55
00:04:06.007 --> 00:04:06.070
The catalog API is where we're going

56
00:04:06.070 --> 00:04:09.005
The catalog API is where we're going

57
00:04:09.005 --> 00:04:09.050
to place the order path,

58
00:04:09.050 --> 00:04:13.009
to place the order path,

59
00:04:13.009 --> 00:04:19.002
so that we can define a post operation to this path.

60
00:04:19.002 --> 00:04:22.009
Now, because this operation is going to allow

61
00:04:22.009 --> 00:04:25.001
an order to be placed, we need

62
00:04:25.001 --> 00:04:27.004
to put some security in place.

63
00:04:27.004 --> 00:04:33.001
To do that, we use the security property.

64
00:04:33.001 --> 00:04:36.006
Within the security property we're able

65
00:04:36.006 --> 00:04:40.004
to supply an array, where we can point

66
00:04:40.004 --> 00:04:43.008
to security schemes that we defined.

67
00:04:43.008 --> 00:04:47.008
We know we've defined our OAuth password flow

68
00:04:47.008 --> 00:04:50.000
within our security schema.

69
00:04:50.000 --> 00:04:55.005
We're going to protect this endpoint with the right scope.

70
00:04:55.005 --> 00:05:00.009
So, anybody invoking this needs to have the right scope.

71
00:05:00.009 --> 00:05:04.003
Now that security's in place the next thing

72
00:05:04.003 --> 00:05:08.009
that we specify is the request body.

73
00:05:08.009 --> 00:05:13.004
The request body details the data that an API consumer

74
00:05:13.004 --> 00:05:16.005
needs to send when invoking this operation.

75
00:05:16.005 --> 00:05:16.050
Inside of the request body, we specify

76
00:05:16.050 --> 00:05:20.000
Inside of the request body, we specify

77
00:05:20.000 --> 00:05:24.000
the content property followed by our media type.

78
00:05:24.000 --> 00:05:26.007
In this case, we're going to be using JSON.

79
00:05:26.007 --> 00:05:26.070
Then we can go ahead and specify our schema,

80
00:05:26.070 --> 00:05:29.008
Then we can go ahead and specify our schema,

81
00:05:29.008 --> 00:05:29.080
using the ref property.

82
00:05:29.080 --> 00:05:31.009
using the ref property.

83
00:05:31.009 --> 00:05:31.090
Here we can point to our order

84
00:05:31.090 --> 00:05:35.007
Here we can point to our order

85
00:05:35.007 --> 00:05:35.070
that we defined on the domain.

86
00:05:35.070 --> 00:05:37.009
that we defined on the domain.

87
00:05:37.009 --> 00:05:40.001
You'll see with auto-completion

88
00:05:40.001 --> 00:05:40.010
the SwaggerHub editor is able to supply that path,

89
00:05:40.010 --> 00:05:45.002
the SwaggerHub editor is able to supply that path,

90
00:05:45.002 --> 00:05:47.008
taking that burden away from us.

91
00:05:47.008 --> 00:05:47.080
Now, for any operation we also have to specify

92
00:05:47.080 --> 00:05:53.006
Now, for any operation we also have to specify

93
00:05:53.006 --> 00:05:53.060
the responses for that operation.

94
00:05:53.060 --> 00:05:58.000
the responses for that operation.

95
00:05:58.000 --> 00:06:01.009
Here we'll specify what a 200 response looks like.

96
00:06:01.009 --> 00:06:09.008
This is going to be a successful response from the API.

97
00:06:09.008 --> 00:06:09.080
And now we have that in place.

98
00:06:09.080 --> 00:06:12.004
And now we have that in place.

99
00:06:12.004 --> 00:06:12.040
If we would like, we can also return some data

100
00:06:12.040 --> 00:06:17.002
If we would like, we can also return some data

101
00:06:17.002 --> 00:06:19.003
from this operation.

102
00:06:19.003 --> 00:06:21.009
You just put the content property in place

103
00:06:21.009 --> 00:06:27.000
followed by a media type and then within that the schema

104
00:06:27.000 --> 00:06:27.000
and finally, we can specify a ref.

105
00:06:27.000 --> 00:06:30.004
and finally, we can specify a ref.

106
00:06:30.004 --> 00:06:33.004
Let's say that we just want to return

107
00:06:33.004 --> 00:06:38.004
the order object back to the API consumer

108
00:06:38.004 --> 00:06:44.002
to indicate that we have, in fact, processed their order.

109
00:06:44.002 --> 00:06:50.008
Now we can see the new order operation on our API

110
00:06:50.008 --> 00:06:55.003
and we can see that we get the Order schema

111
00:06:55.003 --> 00:06:59.004
that's provided via the response

112
00:06:59.004 --> 00:06:59.040
and also the Order schema being used

113
00:06:59.040 --> 00:07:02.002
and also the Order schema being used

114
00:07:02.002 --> 00:07:02.020
as the request body provided by the API consumer.

115
00:07:02.020 --> 00:07:07.000
as the request body provided by the API consumer.

116
00:07:07.000 --> 00:07:07.009
Excellent.

117
00:07:07.009 --> 00:07:12.009
Let's go ahead and we will save this catalog API

118
00:07:12.009 --> 00:07:15.009
because that concludes our work with domains

119
00:07:15.009 --> 00:07:15.090
and nested schemas within our domain definitions.

120
00:07:15.090 --> 00:07:22.000
and nested schemas within our domain definitions.

