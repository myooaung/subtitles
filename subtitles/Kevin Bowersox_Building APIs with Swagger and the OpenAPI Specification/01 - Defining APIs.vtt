WEBVTT
1
00:00:00.050 --> 00:00:02.010
- [Instructor] We took a small peek at the open

2
00:00:02.010 --> 00:00:04.000
API specification.

3
00:00:04.000 --> 00:00:06.070
However, there are many additional objects

4
00:00:06.070 --> 00:00:11.050
within the spec that can be used to create API definitions.

5
00:00:11.050 --> 00:00:14.060
Let's take a high-level look at the specification

6
00:00:14.060 --> 00:00:16.090
to explore these new objects.

7
00:00:16.090 --> 00:00:20.040
OAS-compliant definition files may contains seven

8
00:00:20.040 --> 00:00:22.050
sections at the root level.

9
00:00:22.050 --> 00:00:26.020
Within these seven objects we can nest additional

10
00:00:26.020 --> 00:00:30.010
properties to build a definition for an API.

11
00:00:30.010 --> 00:00:34.040
OAS definitions can be built with either YAML or JSON.

12
00:00:34.040 --> 00:00:37.040
However, in this course we will use YAML

13
00:00:37.040 --> 00:00:39.040
because it is the most common markup

14
00:00:39.040 --> 00:00:42.040
you will encounter when using Swagger.

15
00:00:42.040 --> 00:00:44.090
Of these initial sections, only the info

16
00:00:44.090 --> 00:00:48.000
and paths object are required.

17
00:00:48.000 --> 00:00:51.040
However, the paths and components objects

18
00:00:51.040 --> 00:00:53.090
are arguably the two most important

19
00:00:53.090 --> 00:00:56.000
within an API definition.

20
00:00:56.000 --> 00:00:58.040
We'll do most of the work within these sections

21
00:00:58.040 --> 00:01:00.000
throughout the course.

22
00:01:00.000 --> 00:01:02.060
We've had a glimpse at the info object.

23
00:01:02.060 --> 00:01:05.020
It contains general API information

24
00:01:05.020 --> 00:01:08.060
such as a name and description for the API.

25
00:01:08.060 --> 00:01:11.040
It also allows us to provide other details

26
00:01:11.040 --> 00:01:13.080
like the developer's contact information

27
00:01:13.080 --> 00:01:16.090
and a link to the license for the API.

28
00:01:16.090 --> 00:01:20.040
The server's object can identify the URL

29
00:01:20.040 --> 00:01:24.080
and a description of the servers hosting the API.

30
00:01:24.080 --> 00:01:29.000
This can be very useful for tagging development servers.

31
00:01:29.000 --> 00:01:31.080
Often we'll provide URLs to the multiple

32
00:01:31.080 --> 00:01:34.050
environments that are hosting our API

33
00:01:34.050 --> 00:01:39.020
implementations such as URLs to the dev, UAT,

34
00:01:39.020 --> 00:01:42.040
and production instances of our API.

35
00:01:42.040 --> 00:01:45.010
The security object allows you to describe

36
00:01:45.010 --> 00:01:49.030
how the API is secured by specifying information

37
00:01:49.030 --> 00:01:54.010
regarding API keys, OWA flows, or security cookies.

38
00:01:54.010 --> 00:01:56.060
When consumers of the API definition read

39
00:01:56.060 --> 00:01:59.000
this section, they will understand what

40
00:01:59.000 --> 00:02:01.040
is required from an authentication

41
00:02:01.040 --> 00:02:06.050
and authorization perspective for access to API resources.

42
00:02:06.050 --> 00:02:10.080
Within the paths object, we can specify multiple

43
00:02:10.080 --> 00:02:14.090
paths or end points that describe how to access

44
00:02:14.090 --> 00:02:17.000
resources on the API.

45
00:02:17.000 --> 00:02:19.080
The paths object probably requires the most

46
00:02:19.080 --> 00:02:23.000
information of all sections of the spec

47
00:02:23.000 --> 00:02:25.090
because we describe the incoming and outgoing

48
00:02:25.090 --> 00:02:28.050
data requirements in detail.

49
00:02:28.050 --> 00:02:31.090
Using the tags object, we can define tags

50
00:02:31.090 --> 00:02:35.070
that can be used to group API operations.

51
00:02:35.070 --> 00:02:39.030
The external doc section allows us to provide

52
00:02:39.030 --> 00:02:42.080
links to external resources about the API

53
00:02:42.080 --> 00:02:44.090
that are hosted elsewhere.

54
00:02:44.090 --> 00:02:47.060
Finally, the components object allows you

55
00:02:47.060 --> 00:02:51.000
to define common schema objects, parameters,

56
00:02:51.000 --> 00:02:54.050
request bodies, and responses that may be used

57
00:02:54.050 --> 00:02:56.050
throughout the API.

58
00:02:56.050 --> 00:02:59.000
This section creates the ability to reuse

59
00:02:59.000 --> 00:03:01.070
components as opposed to repeating the same

60
00:03:01.070 --> 00:03:04.000
definitions over and over.

61
00:03:04.000 --> 00:03:07.040
Without this reusability, API definitions

62
00:03:07.040 --> 00:03:09.070
would be much harder to manage.

63
00:03:09.070 --> 00:03:12.010
So that is a glimpse of the open API

64
00:03:12.010 --> 00:03:14.070
specification at the top level.

65
00:03:14.070 --> 00:03:17.000
We'll dive into the details for most

66
00:03:17.000 --> 00:03:20.010
of these sections so you can build your API

67
00:03:20.010 --> 00:03:23.000
definition files to suit your needs.

