WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Instructor] When working with Swagger,

2
00:00:02.000 --> 00:00:05.080
understanding the purpose of the OpenAPI Specification,

3
00:00:05.080 --> 00:00:10.020
or OAS, can be one of the toughest concepts to grasp.

4
00:00:10.020 --> 00:00:12.080
However, it's critical to your success,

5
00:00:12.080 --> 00:00:15.000
because Swagger tooling is centered around

6
00:00:15.000 --> 00:00:17.070
the OpenAPI specification.

7
00:00:17.070 --> 00:00:20.030
I'm going to provide you with clear understanding

8
00:00:20.030 --> 00:00:23.030
on why OAS exists, and its importance,

9
00:00:23.030 --> 00:00:25.090
so that you can be successful with Swagger.

10
00:00:25.090 --> 00:00:28.080
Here is how the OpenAPI specification

11
00:00:28.080 --> 00:00:32.050
describes itself within its own documentation.

12
00:00:32.050 --> 00:00:35.070
In a nutshell, OAS defines how we describe

13
00:00:35.070 --> 00:00:38.050
the interface of a RESTful API,

14
00:00:38.050 --> 00:00:41.050
regardless of the language in which it's built.

15
00:00:41.050 --> 00:00:43.030
That's still a little abstract,

16
00:00:43.030 --> 00:00:45.050
so let's dive a little deeper.

17
00:00:45.050 --> 00:00:49.050
Here we see a rough description of a REST API interface.

18
00:00:49.050 --> 00:00:52.070
A REST API interface exposes endpoints

19
00:00:52.070 --> 00:00:54.090
or operations that clients can use

20
00:00:54.090 --> 00:00:57.040
to access API resources.

21
00:00:57.040 --> 00:01:00.020
So here we see an API with three endpoints

22
00:01:00.020 --> 00:01:05.010
that expose operations on a single resource named product.

23
00:01:05.010 --> 00:01:07.020
A client sends an http call

24
00:01:07.020 --> 00:01:10.070
to invoke these operations on the API.

25
00:01:10.070 --> 00:01:13.070
Some of the API endpoints may require the client

26
00:01:13.070 --> 00:01:16.000
to provide data inputs in the request

27
00:01:16.000 --> 00:01:18.070
to properly invoke the operation.

28
00:01:18.070 --> 00:01:20.050
This is similar to how a method call

29
00:01:20.050 --> 00:01:23.030
may require arguments to be supplied.

30
00:01:23.030 --> 00:01:26.050
API endpoints can also send a response

31
00:01:26.050 --> 00:01:29.030
containing data for the client to consume,

32
00:01:29.030 --> 00:01:32.070
similar to how a method call can return an object.

33
00:01:32.070 --> 00:01:35.090
The key takeaway is that clients need information

34
00:01:35.090 --> 00:01:40.000
about the interface of the APIs they integrate with.

35
00:01:40.000 --> 00:01:43.010
At a minimum, they must know the available endpoints,

36
00:01:43.010 --> 00:01:44.060
what data to send to them,

37
00:01:44.060 --> 00:01:47.040
and what data they will receive from them.

38
00:01:47.040 --> 00:01:50.030
So we just saw a very simple API.

39
00:01:50.030 --> 00:01:54.030
Let's imagine that your coworker needs to call the REST API

40
00:01:54.030 --> 00:01:56.060
we just saw and they need your help.

41
00:01:56.060 --> 00:01:58.060
How would you describe the API

42
00:01:58.060 --> 00:02:00.070
or instruct them to call it?

43
00:02:00.070 --> 00:02:03.010
Now let's look at it from another perspective.

44
00:02:03.010 --> 00:02:05.080
Let's imagine that your coworker built the API,

45
00:02:05.080 --> 00:02:08.060
and they need to tell you how to consume it.

46
00:02:08.060 --> 00:02:11.030
How might they describe the API?

47
00:02:11.030 --> 00:02:13.060
Let's say you both go with some metadata

48
00:02:13.060 --> 00:02:16.010
to describe the API to facilitate

49
00:02:16.010 --> 00:02:17.070
the other's interaction with it.

50
00:02:17.070 --> 00:02:21.020
It's a nice approach, but there's some inconsistencies.

51
00:02:21.020 --> 00:02:23.040
Because you haven't agreed upon a format

52
00:02:23.040 --> 00:02:26.050
or standards for describing the APIs,

53
00:02:26.050 --> 00:02:29.060
your definitions may be completely different.

54
00:02:29.060 --> 00:02:32.020
Now, imagine if this API metadata

55
00:02:32.020 --> 00:02:36.070
needed to be consumed programmatically by a nonhuman client.

56
00:02:36.070 --> 00:02:40.030
How would it know how to consume each of these formats?

57
00:02:40.030 --> 00:02:42.060
What if another format came along,

58
00:02:42.060 --> 00:02:45.040
wouldn't that just add to the confusion?

59
00:02:45.040 --> 00:02:49.080
This is where the OpenAPI Specification comes into play.

60
00:02:49.080 --> 00:02:52.080
It provides us with a standard or rules

61
00:02:52.080 --> 00:02:55.040
that can be used to build definition files

62
00:02:55.040 --> 00:02:59.030
for an API so that both humans and computers

63
00:02:59.030 --> 00:03:03.040
can discover and understand the capabilities of a service.

64
00:03:03.040 --> 00:03:06.090
The API definition files conform to a standard,

65
00:03:06.090 --> 00:03:09.060
so no matter what our API looks like,

66
00:03:09.060 --> 00:03:12.000
it can be understood programmatically,

67
00:03:12.000 --> 00:03:15.030
allowing tools to help both humans and computers

68
00:03:15.030 --> 00:03:17.040
understand the API.

69
00:03:17.040 --> 00:03:19.090
Building OAS compliant definition files

70
00:03:19.090 --> 00:03:23.070
for APIs has many benefits for developers.

71
00:03:23.070 --> 00:03:26.050
First, API definition files can be used

72
00:03:26.050 --> 00:03:29.090
to generate documentation, API-related code,

73
00:03:29.090 --> 00:03:33.010
or used for a bunch of other use cases like testing.

74
00:03:33.010 --> 00:03:35.070
This alleviates a large portion of the work

75
00:03:35.070 --> 00:03:38.020
for API developers, and allows them

76
00:03:38.020 --> 00:03:42.090
to keep API documentation in sync with the implementation.

77
00:03:42.090 --> 00:03:46.010
Second, because the generated documentation

78
00:03:46.010 --> 00:03:49.070
provides examples, it is easier for consumers

79
00:03:49.070 --> 00:03:51.090
to integrate with your API.

80
00:03:51.090 --> 00:03:55.000
This results in a better developer experience,

81
00:03:55.000 --> 00:03:58.010
and increases API usage.

82
00:03:58.010 --> 00:04:01.030
Finally, strong API documentation supports

83
00:04:01.030 --> 00:04:03.030
contract-first development,

84
00:04:03.030 --> 00:04:06.010
allowing development teams to work independently

85
00:04:06.010 --> 00:04:08.020
of each other because they have agreed

86
00:04:08.020 --> 00:04:11.010
to a well-defined interface that governs

87
00:04:11.010 --> 00:04:14.070
the interaction of systems and components.

88
00:04:14.070 --> 00:04:17.010
So that's OAS in a nutshell,

89
00:04:17.010 --> 00:04:19.060
and armed with this understanding,

90
00:04:19.060 --> 00:04:23.000
we can be successful throughout the rest of the course.

