WEBVTT
1
00:00:00.060 --> 00:00:01.080
- [Instructor] Swagger can generate

2
00:00:01.080 --> 00:00:04.020
the server-side stub for a API

3
00:00:04.020 --> 00:00:06.040
however, we still need to code

4
00:00:06.040 --> 00:00:09.010
some of the API implementation.

5
00:00:09.010 --> 00:00:11.010
In this lesson, we will build out

6
00:00:11.010 --> 00:00:14.010
the remainder of the API implementation

7
00:00:14.010 --> 00:00:16.010
using Java and Spring.

8
00:00:16.010 --> 00:00:17.060
If you want to follow along,

9
00:00:17.060 --> 00:00:20.090
you must have a Java 8 JDK installed

10
00:00:20.090 --> 00:00:24.000
and Eclipse installed on your workstation.

11
00:00:24.000 --> 00:00:27.000
To get started, I'm going to navigate

12
00:00:27.000 --> 00:00:29.020
to our course workspace,

13
00:00:29.020 --> 00:00:34.040
where I have the hsports catalog server zip file.

14
00:00:34.040 --> 00:00:38.030
You may remember this from when we generated

15
00:00:38.030 --> 00:00:44.020
our server side stub for the hsports catalog API.

16
00:00:44.020 --> 00:00:47.030
We're going to go ahead and copy that zip file

17
00:00:47.030 --> 00:00:49.080
and then I'm going to paste it

18
00:00:49.080 --> 00:00:52.020
within my Eclipse workspace.

19
00:00:52.020 --> 00:00:56.010
I've placed my Eclipse workspace on my desktop.

20
00:00:56.010 --> 00:00:59.070
So inside the workspace, we just paste the zip file

21
00:00:59.070 --> 00:01:03.020
and then we go ahead and extract that zip file

22
00:01:03.020 --> 00:01:05.040
into the workspace.

23
00:01:05.040 --> 00:01:07.000
Once it's extracted,

24
00:01:07.000 --> 00:01:09.060
we can navigate back to Eclipse.

25
00:01:09.060 --> 00:01:13.060
And now we're going to import the project

26
00:01:13.060 --> 00:01:15.090
which was created using Maven.

27
00:01:15.090 --> 00:01:19.060
So just type existing Maven project

28
00:01:19.060 --> 00:01:22.020
and here you see the option to import

29
00:01:22.020 --> 00:01:24.020
a Maven project within Eclipse.

30
00:01:24.020 --> 00:01:26.010
So go ahead and hit next

31
00:01:26.010 --> 00:01:28.040
and then click on the browse button

32
00:01:28.040 --> 00:01:31.080
and it's going to open to our Eclipse workspace

33
00:01:31.080 --> 00:01:33.040
and then we can just select

34
00:01:33.040 --> 00:01:36.070
the hsports catalog server directory

35
00:01:36.070 --> 00:01:41.070
which contains the server stub generated by SwaggerHub

36
00:01:41.070 --> 00:01:44.070
and you'll notice it pulls in our palm.xml file

37
00:01:44.070 --> 00:01:47.060
because this is a Maven project.

38
00:01:47.060 --> 00:01:49.020
Just go ahead and hit finish

39
00:01:49.020 --> 00:01:51.070
and Eclipse will start to import

40
00:01:51.070 --> 00:01:55.040
the server stub into the workspace.

41
00:01:55.040 --> 00:01:58.000
Okay, we see it's imported

42
00:01:58.000 --> 00:01:59.080
and from here,

43
00:01:59.080 --> 00:02:04.050
we can see the code generated by SwaggerHub.

44
00:02:04.050 --> 00:02:09.000
Now this isn't the full API implementation.

45
00:02:09.000 --> 00:02:12.030
We still need to build out the code

46
00:02:12.030 --> 00:02:15.060
that provides our data and capabilities.

47
00:02:15.060 --> 00:02:18.090
So what I've done, is within the course workspace,

48
00:02:18.090 --> 00:02:22.080
I've placed a productservice.java file

49
00:02:22.080 --> 00:02:26.080
which you can find in the exercise files for the lesson.

50
00:02:26.080 --> 00:02:29.000
Just go ahead and copy that

51
00:02:29.000 --> 00:02:32.040
and then navigate over to your Eclipse workspace

52
00:02:32.040 --> 00:02:37.030
and into the hsports catalog server directory.

53
00:02:37.030 --> 00:02:38.070
Inside that directory,

54
00:02:38.070 --> 00:02:42.010
we're going to go to source, main, Java,

55
00:02:42.010 --> 00:02:45.090
IO, Swagger and then API.

56
00:02:45.090 --> 00:02:49.070
And here, we will paste the product service class

57
00:02:49.070 --> 00:02:53.000
alongside all the other API code.

58
00:02:53.000 --> 00:02:55.040
Now, if we return to Eclipse

59
00:02:55.040 --> 00:02:58.020
we can go ahead and refresh

60
00:02:58.020 --> 00:03:03.050
the project explorer to see the product service.

61
00:03:03.050 --> 00:03:06.000
Once we open the product service,

62
00:03:06.000 --> 00:03:09.040
we can take a look at the code within it.

63
00:03:09.040 --> 00:03:13.010
All we've done is provided the product data

64
00:03:13.010 --> 00:03:17.020
within an array of JSON Product Objects

65
00:03:17.020 --> 00:03:20.040
and we're using that array

66
00:03:20.040 --> 00:03:22.080
in order to serve up the various products.

67
00:03:22.080 --> 00:03:24.090
So all the data for our products

68
00:03:24.090 --> 00:03:27.000
is contained within this class.

69
00:03:27.000 --> 00:03:29.050
And then we just have two methods,

70
00:03:29.050 --> 00:03:31.030
the get products method,

71
00:03:31.030 --> 00:03:34.050
that provides the entire array of products

72
00:03:34.050 --> 00:03:39.020
and the get product method that accepts an integer,

73
00:03:39.020 --> 00:03:41.010
which is a product ID

74
00:03:41.010 --> 00:03:42.090
and we can use this to get

75
00:03:42.090 --> 00:03:45.060
a specific product within the array.

76
00:03:45.060 --> 00:03:49.070
So this is how we're kind of mocking out the catalog data.

77
00:03:49.070 --> 00:03:52.090
If we return back to the project explorer,

78
00:03:52.090 --> 00:03:56.010
we will need to provide some implementation

79
00:03:56.010 --> 00:03:59.040
within the product API controller class.

80
00:03:59.040 --> 00:04:00.060
So what we'll do,

81
00:04:00.060 --> 00:04:04.080
is we will autowire

82
00:04:04.080 --> 00:04:07.050
the product service

83
00:04:07.050 --> 00:04:09.050
within this class.

84
00:04:09.050 --> 00:04:13.010
So using Spring's autowiring capabilities,

85
00:04:13.010 --> 00:04:16.000
we can inject the product service

86
00:04:16.000 --> 00:04:19.000
and then we can leverage it within

87
00:04:19.000 --> 00:04:22.010
the implementation of this controller.

88
00:04:22.010 --> 00:04:27.000
So we'll need to modify these three controller methods

89
00:04:27.000 --> 00:04:32.000
that correspond with the API operations that we expose.

90
00:04:32.000 --> 00:04:34.010
You'll notice that at the moment,

91
00:04:34.010 --> 00:04:38.000
they're returning a not-implemented http status.

92
00:04:38.000 --> 00:04:40.030
Let's change all of these over

93
00:04:40.030 --> 00:04:47.070
to return a 200 OK.

94
00:04:47.070 --> 00:04:50.030
From there, we need to make adjustments

95
00:04:50.030 --> 00:04:52.060
to two of the controller methods.

96
00:04:52.060 --> 00:04:55.060
The first is the product get method

97
00:04:55.060 --> 00:04:59.030
which returns the entire catalog of products.

98
00:04:59.030 --> 00:05:02.090
We need to specify a list of products

99
00:05:02.090 --> 00:05:07.040
as the first argument to our response entity constructor.

100
00:05:07.040 --> 00:05:10.020
So here I'm going to use the product service

101
00:05:10.020 --> 00:05:12.020
to get a list of products

102
00:05:12.020 --> 00:05:16.030
that get returned from the API implementation.

103
00:05:16.030 --> 00:05:20.070
And then within the product ID get method,

104
00:05:20.070 --> 00:05:23.090
here we're returning a specific product

105
00:05:23.090 --> 00:05:28.010
for the operation that leveraged the template perimeter.

106
00:05:28.010 --> 00:05:31.050
So here we just use the product service

107
00:05:31.050 --> 00:05:34.010
to get a product

108
00:05:34.010 --> 00:05:37.000
by its product ID.

109
00:05:37.000 --> 00:05:38.020
And at this point,

110
00:05:38.020 --> 00:05:41.080
we've built out API implementation.

111
00:05:41.080 --> 00:05:45.060
All that's left is a little bit of configuration.

112
00:05:45.060 --> 00:05:48.080
So to finish off the configuration of the API,

113
00:05:48.080 --> 00:05:50.000
we're going to navigate

114
00:05:50.000 --> 00:05:52.060
to the source main resources directory

115
00:05:52.060 --> 00:05:56.010
and open the application.properties file.

116
00:05:56.010 --> 00:05:59.030
We need to switch the port from negative one

117
00:05:59.030 --> 00:06:01.090
over to 8080, where we're going

118
00:06:01.090 --> 00:06:05.040
to run our API implementation.

119
00:06:05.040 --> 00:06:10.070
Just go ahead and save the application.properties file

120
00:06:10.070 --> 00:06:14.050
and while we're here, I want you to note this context path.

121
00:06:14.050 --> 00:06:17.000
So this is the base path

122
00:06:17.000 --> 00:06:20.040
that's going to be exposed after our domain

123
00:06:20.040 --> 00:06:22.010
when we make an API call.

124
00:06:22.010 --> 00:06:24.010
You'll see what I'm talking about in a little bit.

125
00:06:24.010 --> 00:06:27.050
For now, just copy this context path.

126
00:06:27.050 --> 00:06:31.030
Now, we're going to start up the API implementation.

127
00:06:31.030 --> 00:06:33.040
To do that, we just right click

128
00:06:33.040 --> 00:06:35.070
on the Swagger2SpringBoot class

129
00:06:35.070 --> 00:06:38.040
within the source main Java folder.

130
00:06:38.040 --> 00:06:40.010
Once we right click on that,

131
00:06:40.010 --> 00:06:43.060
we go to run as and then Java application.

132
00:06:43.060 --> 00:06:48.000
This is going to start our API implementation.

133
00:06:48.000 --> 00:06:50.010
We can watch it in the console.

134
00:06:50.010 --> 00:06:52.040
And here you see that it's started

135
00:06:52.040 --> 00:06:55.010
and it's running on port 8080.

136
00:06:55.010 --> 00:06:57.050
So at this point, we can go ahead

137
00:06:57.050 --> 00:06:59.090
and open up a browser,

138
00:06:59.090 --> 00:07:03.010
navigate to local host on port 8080

139
00:07:03.010 --> 00:07:05.000
and then we need to specify

140
00:07:05.000 --> 00:07:08.030
that context path we talked about earlier

141
00:07:08.030 --> 00:07:11.000
and then we add forward slash product

142
00:07:11.000 --> 00:07:15.070
to invoke the product operation on our API.

143
00:07:15.070 --> 00:07:17.080
There we see all of the data

144
00:07:17.080 --> 00:07:20.040
for the product list

145
00:07:20.040 --> 00:07:22.080
and that's our entire product catalog

146
00:07:22.080 --> 00:07:26.020
exposed by the hsports catalog API

147
00:07:26.020 --> 00:07:29.060
and then we can leverage our operation

148
00:07:29.060 --> 00:07:32.000
that accepted the template perimeter

149
00:07:32.000 --> 00:07:37.010
by specifying a product ID within our URL.

150
00:07:37.010 --> 00:07:40.070
And here we see we can access a specific product

151
00:07:40.070 --> 00:07:43.060
through the API operation.

152
00:07:43.060 --> 00:07:44.060
So there you have it.

153
00:07:44.060 --> 00:07:47.090
We just built out our API implementation

154
00:07:47.090 --> 00:07:50.020
using the server stub,

155
00:07:50.020 --> 00:07:53.000
we generated from SwaggerHub.

