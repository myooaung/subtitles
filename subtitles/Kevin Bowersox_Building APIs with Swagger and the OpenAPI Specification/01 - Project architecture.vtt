WEBVTT
1
00:00:25.004 --> 00:00:27.001
I invite you to follow along,

2
00:00:27.001 --> 00:00:29.005
but you are also welcome to simply observe

3
00:00:29.005 --> 00:00:29.050
how the project is created.

4
00:00:29.050 --> 00:00:31.009
how the project is created.

5
00:00:31.009 --> 00:00:34.006
However you choose to handle the final chapter,

6
00:00:34.006 --> 00:00:37.003
I promise you will gain a better understanding

7
00:00:37.003 --> 00:00:41.000
of how API definition files built with Swagger

8
00:00:41.000 --> 00:00:41.000
and OAS can deliver API-based systems

9
00:00:41.000 --> 00:00:45.001
and OAS can deliver API-based systems

10
00:00:45.001 --> 00:00:47.009
more quickly and efficiently.

11
00:00:47.009 --> 00:00:47.090
At the core of our project

12
00:00:47.090 --> 00:00:49.004
At the core of our project

13
00:00:49.004 --> 00:00:53.003
is the H+ Sports catalog API definition file

14
00:00:53.003 --> 00:00:56.001
that we created on SwaggerHub.

15
00:00:56.001 --> 00:00:58.008
We'll use the API definition file

16
00:00:58.008 --> 00:01:01.007
to generate several components in the system.

17
00:01:01.007 --> 00:01:03.007
We'll build out a virtual server

18
00:01:03.007 --> 00:01:06.002
that can mock API calls,

19
00:01:06.002 --> 00:01:11.004
and an angular client SDK for calling that API.

20
00:01:11.004 --> 00:01:15.000
Also, we'll create a spring base server stub

21
00:01:15.000 --> 00:01:19.004
that provides the beginnings of an API implementation.

22
00:01:19.004 --> 00:01:19.040
We'll then integrate the client SDK

23
00:01:19.040 --> 00:01:21.009
We'll then integrate the client SDK

24
00:01:21.009 --> 00:01:24.005
into a small Angular Application,

25
00:01:24.005 --> 00:01:27.005
so that it can retrieve mock product data

26
00:01:27.005 --> 00:01:27.050
from the virtual server running on SwaggerHub.

27
00:01:27.050 --> 00:01:30.004
from the virtual server running on SwaggerHub.

28
00:01:30.004 --> 00:01:33.001
The Angular App will use the product data

29
00:01:33.001 --> 00:01:33.010
to build out a simple interface

30
00:01:33.010 --> 00:01:35.004
to build out a simple interface

31
00:01:35.004 --> 00:01:35.040
containing the H+ Sports product catalog.

32
00:01:35.040 --> 00:01:38.008
containing the H+ Sports product catalog.

33
00:01:38.008 --> 00:01:41.000
It's important to mention that we have not

34
00:01:41.000 --> 00:01:45.000
even created the API implementation at this point.

35
00:01:45.000 --> 00:01:47.001
Thanks to the mocking capabilities

36
00:01:47.001 --> 00:01:49.003
of SwaggerHub's virtual server,

37
00:01:49.003 --> 00:01:51.008
we can use design-driven development

38
00:01:51.008 --> 00:01:53.009
to build API consumers

39
00:01:53.009 --> 00:01:53.090
separate from the API implementation.

40
00:01:53.090 --> 00:01:57.000
separate from the API implementation.

41
00:01:57.000 --> 00:01:59.006
The sever stub generated by SwaggerHub

42
00:01:59.006 --> 00:02:03.001
will then be augmented to include API logic

43
00:02:03.001 --> 00:02:04.007
that provides product data

44
00:02:04.007 --> 00:02:07.007
for the key API operations.

45
00:02:07.007 --> 00:02:10.008
After we package the API implementation

46
00:02:10.008 --> 00:02:12.008
into an executable jar,

47
00:02:12.008 --> 00:02:14.004
we'll upload the artifact

48
00:02:14.004 --> 00:02:18.000
and host it on a Linux Server running in Azure.

49
00:02:18.000 --> 00:02:20.000
If you use another hosting environment,

50
00:02:20.000 --> 00:02:22.009
it can take the place of Azure in the project.

51
00:02:22.009 --> 00:02:26.001
Finally, we'll replace the SwaggerHub virtual server

52
00:02:26.001 --> 00:02:26.010
with an API Gateway named Apigee

53
00:02:26.010 --> 00:02:28.008
with an API Gateway named Apigee

54
00:02:28.008 --> 00:02:30.005
that proxies traffic to our

55
00:02:30.005 --> 00:02:33.006
API implementation on Azure.

56
00:02:33.006 --> 00:02:35.006
API Gateway's like Apigee

57
00:02:35.006 --> 00:02:38.008
can manage an organization's API catalog

58
00:02:38.008 --> 00:02:40.005
in a single platform,

59
00:02:40.005 --> 00:02:42.008
solving common API concerns,

60
00:02:42.008 --> 00:02:44.007
like throttling or security,

61
00:02:44.007 --> 00:02:46.006
in a sensual location.

62
00:02:46.006 --> 00:02:46.060
This project will help you better understand

63
00:02:46.060 --> 00:02:49.003
This project will help you better understand

64
00:02:49.003 --> 00:02:53.009
how Swagger and OAS can deliver API centric solutions

65
00:02:53.009 --> 00:02:57.001
while giving you a peek at some cloud-based platforms

66
00:02:57.001 --> 00:03:00.000
that support API development.

