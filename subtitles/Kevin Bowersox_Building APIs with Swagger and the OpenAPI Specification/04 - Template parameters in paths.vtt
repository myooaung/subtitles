WEBVTT
1
00:00:06.050 --> 00:00:12.090
REST APIs often require template parameters

2
00:00:12.090 --> 00:00:15.020
in the path of an endpoint.

3
00:00:15.020 --> 00:00:18.090
This helps us identify a specific resource instance

4
00:00:18.090 --> 00:00:31.030
in most cases.

5
00:00:31.030 --> 00:00:35.020
that captures a product ID within its path.

6
00:00:35.020 --> 00:00:43.090
That product ID can then be used

7
00:00:43.090 --> 00:00:46.050
To get started, we're going to create

8
00:00:46.050 --> 00:01:16.070
a new path within our Paths object.

9
00:01:16.070 --> 00:01:52.080
all we need to do is add the operation

10
00:01:52.080 --> 00:01:57.010
they're going to be required, so we set Require to True,

11
00:01:57.010 --> 00:02:00.080
and then we define the type of data using

12
00:02:00.080 --> 00:02:04.050
the schema and our datatype.

13
00:02:04.050 --> 00:02:10.002
And then as always, we can provide some sort of example.

14
00:02:10.002 --> 00:02:10.020
And then anytime we have an operation,

15
00:02:10.020 --> 00:02:13.000
And then anytime we have an operation,

16
00:02:13.000 --> 00:02:13.000
we know that the Responses object is required,

17
00:02:13.000 --> 00:02:18.007
we know that the Responses object is required,

18
00:02:18.007 --> 00:02:18.070
and since we've already defined a 200 response,

19
00:02:18.070 --> 00:02:23.006
and since we've already defined a 200 response,

20
00:02:23.006 --> 00:02:30.006
we're going to borrow from our other operation,

21
00:02:30.006 --> 00:02:35.008
and we'll just come up and provide that response.

22
00:02:35.008 --> 00:02:39.008
Now in this case, we're not going to be returning an array,

23
00:02:39.008 --> 00:02:42.007
so we'll have to do some modification here.

24
00:02:42.007 --> 00:02:45.009
Instead of our type being Array,

25
00:02:45.009 --> 00:02:45.090
we simply set that to Object, and that denotes

26
00:02:45.090 --> 00:02:49.005
we simply set that to Object, and that denotes

27
00:02:49.005 --> 00:02:53.008
that we're only going to be returning one object.

28
00:02:53.008 --> 00:03:02.000
And that means we can get rid of our items property,

29
00:03:02.000 --> 00:03:13.003
and here we just fix the indentation within our YAML markup,

30
00:03:13.003 --> 00:03:17.005
and now we've defined our new API operation

31
00:03:17.005 --> 00:03:21.001
that leverages the template parameter

32
00:03:21.001 --> 00:03:21.010
that we've defined within the path.

33
00:03:21.010 --> 00:03:24.004
that we've defined within the path.

34
00:03:24.004 --> 00:03:24.040
In addition to path variables, we can also specify

35
00:03:24.040 --> 00:03:28.003
In addition to path variables, we can also specify

36
00:03:28.003 --> 00:03:28.030
that a request header or cookie

37
00:03:28.030 --> 00:03:30.003
that a request header or cookie

38
00:03:30.003 --> 00:03:30.030
is expected to be sent to an endpoint

39
00:03:30.030 --> 00:03:33.000
is expected to be sent to an endpoint

40
00:03:33.000 --> 00:03:35.004
by changing the In property.

41
00:03:35.004 --> 00:03:39.003
So if we add another parameter to our operation,

42
00:03:39.003 --> 00:03:39.030
we can specify that we would like

43
00:03:39.030 --> 00:03:42.007
we can specify that we would like

44
00:03:42.007 --> 00:03:42.070
a header to be provided with each request.

45
00:03:42.070 --> 00:03:46.009
a header to be provided with each request.

46
00:03:46.009 --> 00:03:49.006
So let's say that we're putting some sort

47
00:03:49.006 --> 00:03:49.060
of custom security header in place for our request,

48
00:03:49.060 --> 00:03:56.009
of custom security header in place for our request,

49
00:03:56.009 --> 00:04:00.003
and let's say that it's not required.

50
00:04:00.003 --> 00:04:02.002
That's only in certain cases.

51
00:04:02.002 --> 00:04:02.020
And then what we can do is specify the schema

52
00:04:02.020 --> 00:04:05.003
And then what we can do is specify the schema

53
00:04:05.003 --> 00:04:05.030
for this header parameter by specifying its type

54
00:04:05.030 --> 00:04:10.000
for this header parameter by specifying its type

55
00:04:10.000 --> 00:04:10.000
and then giving another example.

56
00:04:10.000 --> 00:04:13.009
and then giving another example.

57
00:04:13.009 --> 00:04:13.090
So here we see another type of parameter,

58
00:04:13.090 --> 00:04:17.001
So here we see another type of parameter,

59
00:04:17.001 --> 00:04:20.002
a header parameter that can be provided.

60
00:04:20.002 --> 00:04:20.020
And if we now inspect our new API operation,

61
00:04:20.020 --> 00:04:24.000
And if we now inspect our new API operation,

62
00:04:24.000 --> 00:04:24.000
you'll see that our product ID, which is our template

63
00:04:24.000 --> 00:04:29.002
you'll see that our product ID, which is our template

64
00:04:29.002 --> 00:04:33.004
parameter, is required, and our header parameter

65
00:04:33.004 --> 00:04:35.007
is marked as Optional.

66
00:04:35.007 --> 00:04:35.070
You'll also notice that we get an example

67
00:04:35.070 --> 00:04:38.008
You'll also notice that we get an example

68
00:04:38.008 --> 00:04:38.080
of the response that is returned

69
00:04:38.080 --> 00:04:41.004
of the response that is returned

70
00:04:41.004 --> 00:04:41.040
by this API operation.

71
00:04:41.040 --> 00:04:45.000
by this API operation.

