0
1
00:00:00,980 --> 00:00:07,640
Now as this code gets longer, it doesn't really feel right to keep it inside the loading screen anymore.
1

2
00:00:08,060 --> 00:00:15,690
So let's refactor it and try to move our location getting code into a separate class.
2

3
00:00:16,010 --> 00:00:19,010
And I'd like you to do that as a challenge.
3

4
00:00:19,010 --> 00:00:24,620
I'd like you to refactor this code so that all the logic of getting the current location will be handled
4

5
00:00:24,680 --> 00:00:27,470
by a dedicated location object.
5

6
00:00:27,470 --> 00:00:32,170
This means creating a separate location class in the location.dart file.
6

7
00:00:32,210 --> 00:00:37,000
This class needs to have two properties, a latitude and longitude.
7

8
00:00:37,070 --> 00:00:41,190
It also needs to have a method could getCurrentLocation.
8

9
00:00:41,210 --> 00:00:44,920
This is where you'll need to move the try catch block from the loading screen.
9

10
00:00:46,360 --> 00:00:52,630
Back in the loading screen, update the getLocation method so that you create a new location object. You
10

11
00:00:52,630 --> 00:00:58,870
call the get current location method and then you print the value stored inside the latitude and longitude.
11

12
00:00:58,870 --> 00:01:02,100
This challenge will test your understanding of async and await.
12

13
00:01:02,140 --> 00:01:04,300
So keep those principles in mind.
13

14
00:01:04,300 --> 00:01:10,270
I'll give you a few seconds to pause the video before I walk you through the solution.
14

15
00:01:10,810 --> 00:01:11,890
OK, ready?
15

16
00:01:11,890 --> 00:01:13,130
Here's the solution.
16

17
00:01:13,150 --> 00:01:20,950
The first step is creating a new class in the location.dart file called Location. And this location
17

18
00:01:20,950 --> 00:01:23,990
class is going to have two properties.
18

19
00:01:24,070 --> 00:01:29,380
It's going to hold onto a latitude and also a longitude.
19

20
00:01:29,470 --> 00:01:34,990
Now they're both going to be doubles because that's the output from our geolocator
20

21
00:01:34,990 --> 00:01:40,960
when we do position.latitude or position.longitude, the data type will be a double.
21

22
00:01:40,960 --> 00:01:49,390
So now let's go ahead and create a class method and we'll call it getCurrentLocation and this is not
22

23
00:01:49,390 --> 00:01:56,060
gonna take any inputs, but it is going to use that geolocator package.
23

24
00:01:56,230 --> 00:02:03,430
So let's go ahead and cut our try catch block out of our get location method and instead paste it into
24

25
00:02:03,490 --> 00:02:10,020
this getCurrentLocation method. We're again gonna use the geolocator to get the current position.
25

26
00:02:10,120 --> 00:02:12,460
Now of course we need that await keyword,
26

27
00:02:12,490 --> 00:02:20,020
so we have to mark this as async so that we can await for the current position to be found before
27

28
00:02:20,080 --> 00:02:29,030
we return it as the output of this method. And instead of printing the position, we're going to assign
28

29
00:02:29,090 --> 00:02:33,750
the position.latitude and position.longitude to these two properties.
29

30
00:02:33,770 --> 00:02:41,750
So we're gonna say latitude is now gonna be equal to position.latitude and longitude is gonna be
30

31
00:02:41,750 --> 00:02:46,280
now equal to position.longitude.
31

32
00:02:46,360 --> 00:02:53,430
So now when we call getCurrentLocation, it should try to wait to get the current location and then
32

33
00:02:53,490 --> 00:02:57,550
assign those values to our latitude and longitude.
33

34
00:02:57,750 --> 00:03:04,440
Going back to our loading screen inside getLocation, we should be able to tap into that file by importing
34

35
00:03:04,560 --> 00:03:08,760
our services folder and then we're going to search for our location
35

36
00:03:08,760 --> 00:03:09,800
.dart file,
36

37
00:03:09,810 --> 00:03:18,150
so that's the full path to this file. And then we're going to create a new location object which we'll
37

38
00:03:18,150 --> 00:03:23,670
just call location and we're gonna set it to equal a new location object.
38

39
00:03:23,670 --> 00:03:31,060
And once we've initialized that location object, we're going to say location.getCurrentLocation.
39

40
00:03:31,080 --> 00:03:39,240
Now remember, if we want to use the result of the location.latitude or location.longitude which
40

41
00:03:39,240 --> 00:03:46,560
comes from this location object, we have to wait for this getCurrentLocation to complete.
41

42
00:03:47,070 --> 00:03:55,350
So ideally, we want to be able to mark this as await. But remember that we can only wait on methods that
42

43
00:03:55,350 --> 00:03:56,950
return futures.
43

44
00:03:57,210 --> 00:04:04,290
So over here instead of just returning a void, let's return a future void instead.
44

45
00:04:04,620 --> 00:04:12,180
And this way if we head back to our loading screen, you can see we can now wait on this to complete before
45

46
00:04:12,210 --> 00:04:21,540
we start tapping into the location.latitude or location.longitude. And it's only by waiting for this
46

47
00:04:21,540 --> 00:04:29,480
method to complete can we reliably actually get access to the latitude and longitude.
47

48
00:04:29,540 --> 00:04:35,540
So now let's hit run and see our code in action. So you can see we're able to tap into the latitude and
48

49
00:04:35,540 --> 00:04:38,410
longitude in our loading_screen
49

50
00:04:38,420 --> 00:04:39,180
.dart
50

51
00:04:39,410 --> 00:04:46,640
even though the location code is actually all located inside a separate file, the location.dart file.
51

52
00:04:48,720 --> 00:04:55,050
now asynchronous programming is notoriously hard in any programming language not just Dart.
52

53
00:04:55,050 --> 00:05:01,320
So if this was still confusing, I recommend heading back into the lesson we covered async in a way and
53

54
00:05:01,320 --> 00:05:06,750
just watching it again, maybe on double speed, just to make sure that you're revisiting those concepts
54

55
00:05:06,780 --> 00:05:07,250
again.
55

56
00:05:07,320 --> 00:05:13,040
It might take a couple of tries before all the pieces start coming together and it starts making sense.
56

57
00:05:13,950 --> 00:05:19,950
But if all of that was easy, then we're going to continue ahead to making API calls and actually using
57

58
00:05:19,950 --> 00:05:24,030
these latitude and longitude to get the weather for our current location.
58

59
00:05:24,060 --> 00:05:26,780
So for all of that and more, I'll see on the next lesson.
