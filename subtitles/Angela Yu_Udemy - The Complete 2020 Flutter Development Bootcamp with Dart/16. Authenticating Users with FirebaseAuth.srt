0
1
00:00:00,120 --> 00:00:06,660
In the last lesson we used Firebase authentication to register of very first user.
1

2
00:00:06,660 --> 00:00:12,570
So now that all user's has been registered, they've been allowed to go over to the chat screen.
2

3
00:00:12,570 --> 00:00:16,880
But what if I wanted to be able to login at a later date?
3

4
00:00:17,220 --> 00:00:20,250
Well currently I login screen doesn't do anything yet.
4

5
00:00:20,430 --> 00:00:21,750
So let's go ahead and fix that.
5

6
00:00:22,690 --> 00:00:25,680
And I'd like to pose that to you as a challenge.
6

7
00:00:25,690 --> 00:00:29,890
Can you use Firebase auth to login an existing user?
7

8
00:00:30,250 --> 00:00:34,660
You'll need to capture the email and password from the text fields similar to how we did things on the
8

9
00:00:34,660 --> 00:00:41,440
registration screen and then you'll need to use Firebase auth to sign in an existing user with their
9

10
00:00:41,440 --> 00:00:43,240
email and password.
10

11
00:00:43,240 --> 00:00:49,410
And therein lies the challenge. You'll have to figure out which method to use to sign a user in.
11

12
00:00:49,450 --> 00:00:54,250
Now I'll give you a few seconds to pause the video and channel your inner Sherlock Holmes before I show
12

13
00:00:54,250 --> 00:00:55,030
you the solution.
13

14
00:00:58,410 --> 00:00:59,270
Ready?
14

15
00:00:59,280 --> 00:01:00,960
Here's the solution.
15

16
00:01:00,960 --> 00:01:03,960
Go ahead and open up the login_screen.dart.
16

17
00:01:03,960 --> 00:01:11,400
And as usual, we're going to need to import the auth package that will need to rely on and we are again
17

18
00:01:11,460 --> 00:01:13,890
going to create a auth object.
18

19
00:01:13,890 --> 00:01:21,240
So we're going to have it as a private auth object and it's gonna be set to equal a Firebase auth object.
19

20
00:01:23,090 --> 00:01:32,480
And we'll need again to have a email variable and a password variable so that we can save the values
20

21
00:01:32,480 --> 00:01:34,960
that are created inside our text fields.
21

22
00:01:34,970 --> 00:01:44,190
So this one is going to be the email and this one is going to be the password.
22

23
00:01:44,330 --> 00:01:44,610
All right.
23

24
00:01:44,640 --> 00:01:51,570
So now that we've tied our values in our text fields to some variables, we can actually use it to log
24

25
00:01:51,570 --> 00:01:54,780
our user in inside our button.
25

26
00:01:54,780 --> 00:02:04,020
So right about here, we're going to create a new user which is going to be created using our auth object
26

27
00:02:04,380 --> 00:02:08,580
and we're going to sign in with email and password.
27

28
00:02:08,580 --> 00:02:10,320
So this is the method that we're going to use
28

29
00:02:10,320 --> 00:02:16,350
and this is the counterpart to the create user with email and password. And email is of course set to
29

30
00:02:16,350 --> 00:02:21,050
equal email and password is going to be password.
30

31
00:02:21,060 --> 00:02:28,970
Now again, we have to make sure that we change our onPressed to async so that we can wait for this sign
31

32
00:02:28,970 --> 00:02:35,430
in with email to finish before we go to the next step where we check to make sure that we actually
32

33
00:02:35,430 --> 00:02:37,980
did get a actual user back.
33

34
00:02:37,980 --> 00:02:41,370
So user is not equal to null.
34

35
00:02:41,460 --> 00:02:45,470
Well in this case then we should probably take the user to the chat screen right?
35

36
00:02:45,480 --> 00:02:52,250
They've gone through all the checks and we as the bouncer are going to admit them to the club.
36

37
00:02:52,350 --> 00:02:59,490
So we're going to use our pushNamed and our routeName is going to be our ChatScreen.id and to
37

38
00:02:59,490 --> 00:03:04,290
use it, we of course have to import the chat screen.
38

39
00:03:04,290 --> 00:03:12,390
And now the last thing we have to do is to wrap all of this inside our good old try catch block just
39

40
00:03:12,390 --> 00:03:19,620
to catch any exceptions that occur. And you might get exceptions such as if the user doesn't actually
40

41
00:03:19,620 --> 00:03:25,770
exist or if they typed in the wrong password, all sorts of things that you can save and put into widgets
41

42
00:03:25,800 --> 00:03:31,590
to show the user or you can create your own messages for them saying that something didn't go right,
42

43
00:03:31,590 --> 00:03:33,780
maybe they should try again.
43

44
00:03:33,780 --> 00:03:36,180
So now we're ready to check our log in.
44

45
00:03:36,240 --> 00:03:45,720
So let's go ahead and do a hot restart again and let's go ahead and log in our user. So my email that
45

46
00:03:45,720 --> 00:03:52,870
I registered where there was angela@email.com and the password was 123456.
46

47
00:03:52,890 --> 00:04:01,200
So now if I click on log in and I get taken to the chat, then I should see that email being printed again
47

48
00:04:01,470 --> 00:04:07,800
because whenever a new user comes over to chat, we always tried to print out the current logged in users
48

49
00:04:07,860 --> 00:04:08,880
email.
49

50
00:04:08,880 --> 00:04:14,780
So now that we've confirmed all of this, we can probably comment out or delete this line of code.
50

51
00:04:14,880 --> 00:04:20,230
So that wraps up the solution to the challenge and we're ready to tackle the very last part of our log
51

52
00:04:20,230 --> 00:04:27,750
in and registration flow, which is to be able to log the user out. Because you can only login once you
52

53
00:04:27,750 --> 00:04:28,260
log out
53

54
00:04:28,260 --> 00:04:28,590
right?
54

55
00:04:28,620 --> 00:04:36,150
So we've got this little cross button here created with an icon in our chat screen and we can implement
55

56
00:04:36,270 --> 00:04:40,310
the log out functionality really really easily.
56

57
00:04:40,680 --> 00:04:43,500
So here's our icon button right here
57

58
00:04:43,620 --> 00:04:48,900
and when our button gets pressed, we want our user to log out.
58

59
00:04:48,900 --> 00:04:55,950
So we're going to tap in to that auth instance and we're simply going to use the method sign out.
59

60
00:04:55,950 --> 00:04:59,350
And it's as simple as just telling it to sign out.
60

61
00:04:59,610 --> 00:05:06,750
And once the users have signed out though, we'll need to use the navigator to pop them back to the previous
61

62
00:05:06,750 --> 00:05:08,200
screen.
62

63
00:05:08,910 --> 00:05:17,040
And now we can simply click on the cross button to log back out. And that takes us straight back to the
63

64
00:05:17,040 --> 00:05:21,090
log in page if we want to go back into the chat app.
64

65
00:05:21,180 --> 00:05:26,190
So in the next lesson, we're going to upgrade the log in experience because at the moment when we log
65

66
00:05:26,190 --> 00:05:30,360
in, everything kind of just stops and then we see the chat screen.
66

67
00:05:30,360 --> 00:05:35,890
We're going to add a loading indicator to show the user that something's happening in the background
67

68
00:05:35,890 --> 00:05:40,590
and they should be patient until it's done when we'll take them to the chat screen.
68

69
00:05:40,590 --> 00:05:43,650
So all of that and more, I'll see you on the next lesson.
