0
1
00:00:00,540 --> 00:00:06,180
So now that we've learned a little bit about what application programming interfaces are, let's go ahead
1

2
00:00:06,180 --> 00:00:10,750
and interact with a real one and get some data back from Open Weather Map.
2

3
00:00:10,800 --> 00:00:18,860
So in order to fetch data from the Internet, there's a really handy cookbook document on how to do this.
3

4
00:00:19,170 --> 00:00:24,160
And it takes you step by step through how to use the http package.
4

5
00:00:24,300 --> 00:00:30,550
And this is a Flutter package that has been created by the Dart team.
5

6
00:00:30,630 --> 00:00:35,470
So you know it's good and it's really simple to use as well.
6

7
00:00:35,490 --> 00:00:43,020
So we're going to be using this http library to make our requests to Open Weather Map to grab the current
7

8
00:00:43,020 --> 00:00:44,630
weather data.
8

9
00:00:44,640 --> 00:00:48,570
Let's take a look at how we would use this library.
9

10
00:00:48,570 --> 00:00:52,680
So as always we're going to add it as a dependency to our project.
10

11
00:00:52,710 --> 00:00:55,810
So we're going to open up our pubspec.yaml
11

12
00:00:55,920 --> 00:01:01,680
and we're going to add another dependency under geolocator and then we're going to hit packages.get
12

13
00:01:01,740 --> 00:01:08,870
to incorporate all the code from the library into our project. And now all we have to do is import the
13

14
00:01:08,870 --> 00:01:09,670
library.
14

15
00:01:10,190 --> 00:01:13,340
So let's go ahead and do that in our loading screen.
15

16
00:01:14,500 --> 00:01:22,560
Right under where we've imported our location.dart, I'm gonna import the http library and it's the
16

17
00:01:22,560 --> 00:01:31,830
one that's http/http.dart which is what they say we should import here. And now I can start using
17

18
00:01:31,860 --> 00:01:42,010
some code from that library. In order to make a network request, all we have to do is to call the get method
18

19
00:01:42,100 --> 00:01:51,290
from the http library and then we in the URL that we want to fetch data from. So let's create a new
19

20
00:01:51,350 --> 00:02:00,560
method here and I'm gonna call it getData. Now inside this method getData, I'm going to use that get
20

21
00:02:00,560 --> 00:02:07,760
method that we now have access to because we imported our http.dart package.
21

22
00:02:08,030 --> 00:02:16,940
So this gets method expects a URL as one of the inputs, and it will try to grab the data from that
22

23
00:02:16,940 --> 00:02:21,170
URL and it returns a future response.
23

24
00:02:21,170 --> 00:02:27,350
So this is a asynchronous method because it can take any amount of time to go through all the wires
24

25
00:02:27,470 --> 00:02:30,050
and talk to Open Weather Map servers,
25

26
00:02:30,110 --> 00:02:32,210
so this method might take a while.
26

27
00:02:32,330 --> 00:02:39,980
So that's why it's going to work asynchronously. The URL that I'm going to pass in as the input to
27

28
00:02:39,980 --> 00:02:43,790
this get method is going to come from Open Weather Map.
28

29
00:02:43,790 --> 00:02:50,090
So if you scroll down on the API docs for current weather data, you can see that you can also fetch the
29

30
00:02:50,120 --> 00:02:57,290
weather data by geographic coordinates. So you can pass in the location of your interest by adding a
30

31
00:02:57,350 --> 00:03:00,640
lat value and a lon value.
31

32
00:03:00,800 --> 00:03:04,550
And here's an example of an API that they've already structured for us.
32

33
00:03:04,940 --> 00:03:11,540
So if you click on this example API call, you can see that it's tapping into something called samples
33

34
00:03:11,540 --> 00:03:12,350
.openweathermap
34

35
00:03:12,350 --> 00:03:19,590
.org and it's passing in a latitude of 35 and a longitude of 139.
35

36
00:03:19,640 --> 00:03:23,780
And it's also got some sort of app ID in here.
36

37
00:03:23,780 --> 00:03:29,780
Now we're going to register our own app ID a little bit later on as well so that we can make requests
37

38
00:03:29,900 --> 00:03:35,780
to any latitude and longitude so that we don't have to use the samples subdomain.
38

39
00:03:36,050 --> 00:03:43,070
But for now all we want is to be able to make sure that our app can actually make this request to this
39

40
00:03:43,070 --> 00:03:50,210
URL so that we can get back the corresponding data in the same way that our browser is able to hit
40

41
00:03:50,210 --> 00:03:53,660
up that URL and make a get request for this data.
41

42
00:03:54,080 --> 00:04:00,200
So all we're going to do is we're going to copy this URL from the URL bar and we're going to
42

43
00:04:00,200 --> 00:04:04,010
paste it into our getMethod as a string,
43

44
00:04:04,010 --> 00:04:05,800
so with some single quotes around it.
44

45
00:04:06,500 --> 00:04:11,950
Now this get method remember returns a future response
45

46
00:04:11,960 --> 00:04:12,260
right?
46

47
00:04:12,680 --> 00:04:19,970
So that means if we wanted to hold on to the data that we get back, we have to create a new variable
47

48
00:04:20,030 --> 00:04:27,580
that is of type response and we can call it anything we want. We can call it the response if you want.
48

49
00:04:28,100 --> 00:04:35,340
And now notice that this future response can't be assigned to type response.
49

50
00:04:35,330 --> 00:04:42,250
So because this method is going to work asynchronously, it might resolve at any time in the future.
50

51
00:04:42,320 --> 00:04:50,000
So if we wanted to use this response somewhere, say for example printing it into the console, then we
51

52
00:04:50,000 --> 00:04:57,740
have to turn or get data into an async method just as we have done in other places. And then also add
52

53
00:04:57,740 --> 00:05:05,060
that await keyword in front of the get method so that we wait for this to resolve before we try to print
53

54
00:05:05,090 --> 00:05:14,070
the response. Now at this stage if we go ahead and trigger our code getData, we can either added into
54

55
00:05:14,070 --> 00:05:21,600
the initState, getData, or if you don't want to have to hot restart your app every time
55

56
00:05:21,600 --> 00:05:27,690
you can also put it inside the build method which we know gets called every single time we hit save
56

57
00:05:27,780 --> 00:05:29,970
or when we hit hot reload.
57

58
00:05:29,970 --> 00:05:31,320
So either way is fine.
58

59
00:05:31,950 --> 00:05:35,100
I'm going to put it in here because we're going to be testing it quite a lot.
59

60
00:05:35,220 --> 00:05:39,760
And this is quite an easy way of re-triggering this method, getData.
60

61
00:05:40,680 --> 00:05:44,310
So now if we run our app and we take a look inside the console,
61

62
00:05:49,180 --> 00:05:54,910
you can see that we're getting an instance of response printed.
62

63
00:05:54,920 --> 00:05:58,730
Now what exactly is a response object?
63

64
00:05:59,270 --> 00:06:04,550
Let's take a look at the http package docs to see what that object actually looks like.
64

65
00:06:05,000 --> 00:06:11,690
So if we go into the About section you can see there's an API reference. And this takes us to the documentation
65

66
00:06:11,720 --> 00:06:14,360
for the http package.
66

67
00:06:14,360 --> 00:06:19,950
Now here let's go ahead and search for our response class that we're using.
67

68
00:06:20,390 --> 00:06:27,140
And you can see that this is an http response where the entire response body is known in advance.
68

69
00:06:27,290 --> 00:06:33,150
So this is the response that we're getting back. When we create a new response object,
69

70
00:06:33,160 --> 00:06:39,160
it has a number of properties. It has a body which is the body of the response as a string,
70

71
00:06:40,070 --> 00:06:48,680
and it's also got things such as headers or request or status code. The part that we're actually interested
71

72
00:06:48,680 --> 00:06:54,550
in, the part that contains the data, is actually held in the body of the response.
72

73
00:06:54,590 --> 00:06:58,250
So let's print response.body instead.
73

74
00:06:58,250 --> 00:07:00,410
So now let's hit run again.
74

75
00:07:03,880 --> 00:07:09,360
And you can see that we're getting back exactly the same data as we're seeing over here.
75

76
00:07:09,400 --> 00:07:10,990
So here is the response
76

77
00:07:10,990 --> 00:07:12,720
body.
77

78
00:07:13,100 --> 00:07:20,220
Now there's also this thing called status code which we can access as a property on the response object.
78

79
00:07:20,390 --> 00:07:23,680
And this gives us the statusCode of the response.
79

80
00:07:23,840 --> 00:07:32,310
So if we print that out instead, you can see that what we're getting back is the code 200.
80

81
00:07:32,460 --> 00:07:34,260
So what are status codes?
81

82
00:07:34,350 --> 00:07:41,700
Well, when we're interacting with an external server, they need a short and unified way of telling us
82

83
00:07:42,000 --> 00:07:45,240
what exactly happened when we interacted with them.
83

84
00:07:45,270 --> 00:07:48,840
It's kind of like a code for a particular outcome.
84

85
00:07:48,840 --> 00:07:51,360
Now we've all seen 404 pages
85

86
00:07:51,360 --> 00:07:51,690
right?
86

87
00:07:51,720 --> 00:08:00,090
So there's some famous ones from Pixar or from Lego or from various designers on Dribbble. And essentially
87

88
00:08:00,090 --> 00:08:07,140
a 404 status code means that the resource that you tried to access from the external server doesn't
88

89
00:08:07,140 --> 00:08:08,300
actually exist.
89

90
00:08:09,790 --> 00:08:16,810
So there's a whole bunch of different codes that can be sent back and anything that's in the 200 means
90

91
00:08:16,810 --> 00:08:21,550
that your request was successful. And specifically, the code
91

92
00:08:21,570 --> 00:08:27,760
200 means OK, everything is a OK and here's your result.
92

93
00:08:27,760 --> 00:08:34,690
Anything in the 404 means that something bad happened when you tried to make a request. And
93

94
00:08:34,750 --> 00:08:38,890
anything in the 500 means that there's actually an issue with their server.
94

95
00:08:39,520 --> 00:08:45,340
So I'll include a link to this website where it talks in detail about what each of these codes mean.
95

96
00:08:45,340 --> 00:08:50,050
And you can refer to it when you're trying to figure out what a statusCode that you're getting back
96

97
00:08:50,050 --> 00:08:51,840
actually is trying to tell you.
97

98
00:08:52,750 --> 00:08:58,420
But there's actually this cheat sheet by Sander Hoogendoorn in one of the talks that he gave which
98

99
00:08:58,420 --> 00:08:59,700
I think is fantastic.
99

100
00:08:59,720 --> 00:09:03,710
Where it tells you that any code that comes back that starts with a one means 
100

101
00:09:03,730 --> 00:09:06,790
hold on, wait, something's happening.
101

102
00:09:06,790 --> 00:09:08,830
Anything that comes back with a two means
102

103
00:09:08,830 --> 00:09:09,570
here you go
103

104
00:09:09,580 --> 00:09:15,970
when successfully. Anything that starts with a three means go away, you are not authorized to view this
104

105
00:09:15,970 --> 00:09:17,390
particular resource.
105

106
00:09:17,570 --> 00:09:22,810
Anything that starts with a four means that you screwed up. Anything that starts with a five means I
106

107
00:09:22,810 --> 00:09:27,930
screwed up, I being that external server who's sending you that message.
107

108
00:09:28,140 --> 00:09:32,010
So for example let's try and fetch a resource that doesn't exist.
108

109
00:09:32,400 --> 00:09:37,800
Instead of trying to get something like weather, let's you know try to get something like heather. And
109

110
00:09:38,010 --> 00:09:43,680
this will now refer to something that the API doesn't actually know how to handle.
110

111
00:09:43,680 --> 00:09:51,120
So now if we hit save again and we rerun our get data, you'll see that what's printed is our classic
111

112
00:09:51,200 --> 00:09:59,470
404 as the status code. So it's usually a good idea to check what the status code is before we
112

113
00:09:59,470 --> 00:10:03,210
start presuming that the response.body is what we think it is.
113

114
00:10:03,340 --> 00:10:09,220
Because right now if I tried to tap into the response.body and do something with it, then you can
114

115
00:10:09,220 --> 00:10:11,990
see that what I'm actually getting is just nothing.
115

116
00:10:12,190 --> 00:10:14,680
I'm not getting anything back as the body.
116

117
00:10:14,860 --> 00:10:21,060
And if I tried to render that in my app to display it, then it's also going to be an unexpected error.
117

118
00:10:22,540 --> 00:10:30,730
Let's instead go ahead and check to see if the response.statusCode is equal to 200 which means
118

119
00:10:30,730 --> 00:10:33,000
that everything went perfectly.
119

120
00:10:33,100 --> 00:10:38,980
Then in this case, we're going to create a new string that's called data and it's going to be set to
120

121
00:10:38,980 --> 00:10:40,980
response.body.
121

122
00:10:40,990 --> 00:10:48,520
But if their response status code was not 200, then else we're going to simply print out the response
122

123
00:10:48,790 --> 00:10:54,920
.statusCode just to see what actually went wrong.
123

124
00:10:54,940 --> 00:11:02,260
Now at this point, there's one thing that you might realize which is that our get method looks very weird.
124

125
00:11:02,320 --> 00:11:05,350
It doesn't look like it came from a package right?
125

126
00:11:05,380 --> 00:11:10,750
Because usually when we're using an external package, we're having to tap into some sort of object that's
126

127
00:11:10,750 --> 00:11:12,330
created in the package.
127

128
00:11:12,430 --> 00:11:19,450
But if we take a look at this get method and where it lives, which is in the http.dart file.
128

129
00:11:19,540 --> 00:11:26,920
So let's hold down COMMAND and click on get, and we land on our http.dart file which we've incorporated
129

130
00:11:27,340 --> 00:11:30,640
into our loading screen right here.
130

131
00:11:30,700 --> 00:11:35,290
Then you can see that here there's actually no classes that have been created.
131

132
00:11:35,290 --> 00:11:37,440
There's no http class.
132

133
00:11:37,450 --> 00:11:41,410
Instead, it's giving us access to a whole bunch of methods,
133

134
00:11:41,410 --> 00:11:46,570
get method or the head method or the post method.
134

135
00:11:46,570 --> 00:11:53,710
And this makes our code look almost like as if we created a method called get somewhere and we're using
135

136
00:11:53,710 --> 00:11:59,710
our own. Which is kind of confusing if somebody else came along and they didn't realize that this actually
136

137
00:11:59,710 --> 00:12:02,120
comes from the http package.
137

138
00:12:02,620 --> 00:12:10,510
So one of the most common ways of using this http.dart package in Flutter code is to add the keyword
138

139
00:12:10,690 --> 00:12:16,500
'as' and give that package a name, usually it'll be http.
139

140
00:12:16,630 --> 00:12:22,750
So now we can use anything that's inside this package by using that word http.
140

141
00:12:23,320 --> 00:12:30,940
So now instead of just get, we can write http.get and instead of response, we can write http.
141

142
00:12:30,940 --> 00:12:35,400
respons,e because all of these things came from that package.
142

143
00:12:35,440 --> 00:12:41,650
So now the next time you look at this code or somebody else looks at this code, it's quite obvious where
143

144
00:12:41,680 --> 00:12:48,040
this get method comes from, it comes from that http package, and where this object response comes from,
144

145
00:12:48,100 --> 00:12:49,950
it also comes from the http
145

146
00:12:49,960 --> 00:12:56,200
package. Because if you didn't know that and you try to figure out what that response object
146

147
00:12:56,260 --> 00:13:03,080
is, had we just gone on to the Flutter docs and we try to search for this thing called response, it
147

148
00:13:03,130 --> 00:13:05,210
doesn't actually exist here
148

149
00:13:05,230 --> 00:13:06,370
right?
149

150
00:13:06,430 --> 00:13:13,450
It's not the same as the documentation for that http package because here is where that response object
150

151
00:13:13,510 --> 00:13:15,340
comes from.
151

152
00:13:15,340 --> 00:13:23,980
So now if we print out that data again and hit save to view it in the console, you can see that this
152

153
00:13:24,220 --> 00:13:31,270
is structured as a string but it's more than that. It's actually formatted in a way for you to be able
153

154
00:13:31,270 --> 00:13:41,090
to tap into certain things based on a key value pair. And this is what we would call a JSON formatted
154

155
00:13:41,270 --> 00:13:48,620
API response. And in the next lesson we're going to learn a bit more about what that actually means and
155

156
00:13:48,620 --> 00:13:49,540
how to use it.
