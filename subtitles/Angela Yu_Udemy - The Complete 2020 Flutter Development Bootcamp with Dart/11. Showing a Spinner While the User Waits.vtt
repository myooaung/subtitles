WEBVTT
0
1
00:00:00.720 --> 00:00:04.140
Now we've been writing a lot of code recently.
1

2
00:00:04.140 --> 00:00:09.450
Let's quickly review what we're actually trying to build. The final app that we're looking to build is
2

3
00:00:09.440 --> 00:00:11.190
going to look like this.
3

4
00:00:11.370 --> 00:00:16.920
The part I want to draw your attention to is the fact that we have a loading screen where we're fetching
4

5
00:00:16.920 --> 00:00:23.460
the location and the weather data, and we have the location screen where we're displaying the weather
5

6
00:00:23.460 --> 00:00:29.700
information to the user. In this lesson we're going to improve that transition between the loading screen
6

7
00:00:29.820 --> 00:00:35.520
and the location screen by adding a little spinner. In terms of our code,
7

8
00:00:35.520 --> 00:00:43.320
here's what we've implemented so far. In the last lesson we created our networking.dart helper class
8

9
00:00:43.320 --> 00:00:51.240
here where we pass over a URL when we initialize this class and then we use that URL to make
9

10
00:00:51.340 --> 00:00:53.630
a http get request.
10

11
00:00:53.760 --> 00:01:01.110
Then we check to see if the response was favorable namely if it was 200 and the request was received
11

12
00:01:01.110 --> 00:01:09.840
successfully. And we take the body of the response and use jsonDecode to decode that data and pass
12

13
00:01:09.840 --> 00:01:13.070
it back out into wherever it's needed.
13

14
00:01:13.110 --> 00:01:17.070
So notice how this network helper is really flexible.
14

15
00:01:17.190 --> 00:01:23.400
It doesn't just have to work on weather data, it can do anything that is networking related. And we've
15

16
00:01:23.400 --> 00:01:29.700
split off that functionality into its own custom location so that we can use it for other things in
16

17
00:01:29.700 --> 00:01:34.030
the future, if we need more networking functionality.
17

18
00:01:34.340 --> 00:01:40.730
Now in our getLocationData method, we're getting the current location of the user and then we're using
18

19
00:01:40.730 --> 00:01:48.560
our networkHelper to fetch the weather data for that location. And then we end up with a weather data
19

20
00:01:48.860 --> 00:01:51.920
object that we can use somewhere else.
20

21
00:01:51.980 --> 00:01:56.490
So the somewhere else that we need it is our location screen.
21

22
00:01:56.720 --> 00:02:04.080
We need to put that data into these text widget so that we can display it on the screen for the user.
22

23
00:02:04.160 --> 00:02:10.580
Now in order to pass that data over to the location screen, we're going to have to use something that
23

24
00:02:10.580 --> 00:02:18.410
we learnt previously, which is using the navigator to push a route onto the screen.
24

25
00:02:18.410 --> 00:02:21.260
So the context is going to be kept as the context.
25

26
00:02:21.290 --> 00:02:27.800
The route is going to be created using the MaterialPageRoute, and the builder is going to expect a
26

27
00:02:27.800 --> 00:02:28.520
callback.
27

28
00:02:28.520 --> 00:02:36.650
So something that has an input of context and it's going to return the screen that we want to show which
28

29
00:02:36.650 --> 00:02:38.900
is the location screen.
29

30
00:02:39.260 --> 00:02:47.060
And of course it doesn't know about the location screen unless we import the location_screen.dart
30

31
00:02:47.060 --> 00:02:58.730
file into here. And now we have the location screen route setup. So now if we run our app again, so hot
31

32
00:02:58.730 --> 00:03:06.020
restart, then it should start out in this black screen. And once it's gotten the location and it's gotten
32

33
00:03:06.020 --> 00:03:11.900
the weather data, it should push over the next screen which is the location screen.
33

34
00:03:11.900 --> 00:03:13.840
Now that takes a little while
34

35
00:03:13.850 --> 00:03:14.200
right?
35

36
00:03:14.240 --> 00:03:18.380
And the user's kind of staring at a blank screen for a while.
36

37
00:03:18.410 --> 00:03:23.080
So that might make them think that the app has crashed or is not working.
37

38
00:03:23.240 --> 00:03:30.290
So let's add a loading indicator onto the loading screen so that they actually know that something is
38

39
00:03:30.290 --> 00:03:36.970
happening in the background and we're waiting to get some data or get some location. The package that
39

40
00:03:36.970 --> 00:03:40.150
we're going to use is called Flutter SpinKit.
40

41
00:03:40.150 --> 00:03:46.930
And what it does is it gives us access to a whole bunch of different animated loading indicators that
41

42
00:03:46.930 --> 00:03:49.450
we can use in our app.
42

43
00:03:49.450 --> 00:03:55.060
And the one that I particularly fancy is this double bound here, which shows that something's happening,
43

44
00:03:55.060 --> 00:03:58.270
wait for it and will make the screen transition.
44

45
00:03:58.270 --> 00:04:02.970
So let's go ahead and add this as a dependency to our app.
45

46
00:04:03.100 --> 00:04:12.310
So let's go into our pubspec.yaml again and add that below our http. And then I'm gonna remove
46

47
00:04:12.400 --> 00:04:19.570
the quotes as per usual to keep my formatting consistent and I'm gonna run packages.get to fetch
47

48
00:04:19.570 --> 00:04:20.800
that package.
48

49
00:04:21.130 --> 00:04:29.470
Now once that's done, I can imported into my loading screen, so right at the top here. And we're going
49

50
00:04:29.470 --> 00:04:33.900
to use it inside our build method.
50

51
00:04:34.110 --> 00:04:40.560
So the way that we use it is to tap into the particular widget that we want, be it's SpinKit rotating
51

52
00:04:40.560 --> 00:04:46.020
circle or SpinKit double bounds or SpinKit wave, whatever it is that we need.
52

53
00:04:46.230 --> 00:04:49.950
And then we can set a color, we can set a size.
53

54
00:04:50.010 --> 00:04:56.520
So that's what I'm going to do inside my scaffold. So my scaffold is simply going to have a body which
54

55
00:04:56.520 --> 00:04:58.320
is going to be a center widget.
55

56
00:04:58.320 --> 00:05:06.480
So I can center my SpinKit animator and the center widget has a child property which I'll set to the
56

57
00:05:06.810 --> 00:05:14.610
SpinKitDoubleBounce. And I can use this widget just like any other Flutter widget.
57

58
00:05:14.610 --> 00:05:16.410
I simply add some properties,
58

59
00:05:16.410 --> 00:05:18.860
so I'm gonna give it color property,
59

60
00:05:18.960 --> 00:05:27.240
gonna set that to maybe just white. And I'll also give it a size property which I'll set to a 100pixels
60

61
00:05:27.490 --> 00:05:29.670
to make it relatively large.
61

62
00:05:29.670 --> 00:05:32.750
So now let's rerun our app from the start,
62

63
00:05:32.790 --> 00:05:37.790
so hot restart and it should start out from the blank screen.
63

64
00:05:37.830 --> 00:05:43.610
It's gonna use the loading indicator for a little while before it fetches the location and the weather
64

65
00:05:43.770 --> 00:05:45.350
and it pushes onto the screen.
65

66
00:05:45.430 --> 00:05:52.560
So our app now looks a lot more user friendly. But we still have a problem because we have our weather
66

67
00:05:52.560 --> 00:05:58.090
data in our loading screen, but where we actually need it is our location screen.
67

68
00:05:58.140 --> 00:06:05.670
So how can we parse it over? Now parsing data from the loading screen to the location screen and displaying
68

69
00:06:05.670 --> 00:06:08.250
that data is what we'll cover in the next lesson.
69

70
00:06:08.430 --> 00:06:09.350
So I'll see you there.
