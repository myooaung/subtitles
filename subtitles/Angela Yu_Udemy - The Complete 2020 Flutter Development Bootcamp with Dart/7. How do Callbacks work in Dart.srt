0
1
00:00:00,510 --> 00:00:08,880
Now in the last lesson we managed to lift the state of our isChecked property up into a widget that's
1

2
00:00:08,880 --> 00:00:16,380
higher up in the widget tree. And in order to pass an action that happened lower down in the tree we
2

3
00:00:16,380 --> 00:00:19,110
used a callback to achieve it.
3

4
00:00:19,110 --> 00:00:22,500
But how do callbacks actually work?
4

5
00:00:22,530 --> 00:00:29,370
Well let's take a look at the code that we wrote in the last lesson in a little bit more detail.
5

6
00:00:29,370 --> 00:00:36,180
Now this is a simplified version of our code so that it can fit onto the same screen because I really
6

7
00:00:36,180 --> 00:00:41,640
want to show it to you side by side and I want to be able to animates some of the values of these properties
7

8
00:00:41,880 --> 00:00:47,190
to show you how they flow through our code so we can better understand what's actually happening behind
8

9
00:00:47,190 --> 00:00:48,300
the scenes.
9

10
00:00:48,300 --> 00:00:56,250
Firstly notice up here I've got my task tile state class and this is the one that is stateful, so
10

11
00:00:56,280 --> 00:01:03,260
it can change its property's values. And the property that we're most concerned about is this isChecked
11

12
00:01:03,270 --> 00:01:09,900
property which is the one that we lifted up from the task checkbox into the parent widget which is the
12

13
00:01:09,900 --> 00:01:11,560
task tile state.
13

14
00:01:11,850 --> 00:01:18,840
And we did that to be able to use the value of that property to rebuild the text widget as well as our
14

15
00:01:18,840 --> 00:01:20,370
checkbox widget.
15

16
00:01:20,430 --> 00:01:22,850
So it's actually used right here.
16

17
00:01:23,250 --> 00:01:32,430
So the value of this property is used when I create my task checkbox. So every time I rebuild my task
17

18
00:01:32,490 --> 00:01:40,710
checkbox it looks to see the value of the isChecked property and it passes over into the constructor
18

19
00:01:41,340 --> 00:01:48,840
and that goes then into the isChecked property inside my task checkbox.
19

20
00:01:48,840 --> 00:01:58,020
So now that value can now be used inside the task checkbox and the purpose for it is to determine the
20

21
00:01:58,020 --> 00:02:05,940
state of my checkbox widget whether if that box should be empty or whether if it should show a little
21

22
00:02:05,940 --> 00:02:07,170
tick mark.
22

23
00:02:07,170 --> 00:02:13,430
So when the value property is false it's going to be an empty square, when it's true then it's gonna
23

24
00:02:13,440 --> 00:02:18,030
show the check mark. So that's easy enough to understand.
24

25
00:02:18,260 --> 00:02:25,820
But the difficult part is how did we manage to get the user interaction which remember lives in the
25

26
00:02:25,860 --> 00:02:33,710
checkbox widget which is in a downstream child widget of the task tile state because we first have the
26

27
00:02:33,710 --> 00:02:38,330
task tile state and then we have the task checkbox.
27

28
00:02:38,420 --> 00:02:45,640
So how did we manage to pass this information up the tree to the parent widget?
28

29
00:02:45,680 --> 00:02:53,660
Well it's actually not quite passing data up. All that we're doing is we're saying well here is a callback
29

30
00:02:53,660 --> 00:03:02,060
method that we've created called toggle check state and we're going to pass over this method and its
30

31
00:03:02,060 --> 00:03:07,990
implementation into the task checkbox when it gets created.
31

32
00:03:08,000 --> 00:03:15,050
So in exactly the same way as we did for the isChecked property, we're passing this function into this
32

33
00:03:15,110 --> 00:03:22,530
task checkbox stateless widget so that we can use this function inside the onChanged property.
33

34
00:03:22,610 --> 00:03:31,370
So that means when this checkbox changes then is going to trigger this callback and pass in the latest
34

35
00:03:31,370 --> 00:03:40,520
version of the current state of the checkbox. So that callback is sitting there waiting to jump into
35

36
00:03:40,520 --> 00:03:48,980
action and the event that it's waiting for is the moment when a user taps on that checkbox because that's
36

37
00:03:48,980 --> 00:03:55,940
the moment when it's going to trigger its onChanged property and it's gonna call back this method and
37

38
00:03:56,000 --> 00:03:59,550
pass in the current state of the checkbox.
38

39
00:03:59,660 --> 00:04:07,250
So that method gets triggered so we can update the isChecked property to the latest value that got
39

40
00:04:07,250 --> 00:04:16,310
passed over and we now have true. And our checkbox as well as all text widget are both able to update
40

41
00:04:16,310 --> 00:04:25,820
the state based on this property. So if you imagine let's say that we had an App Brewery travel agent
41

42
00:04:26,000 --> 00:04:30,700
and there was A which is us and then B which is you.
42

43
00:04:30,770 --> 00:04:33,470
And in order for you to book a holiday with us,
43

44
00:04:33,500 --> 00:04:39,650
well we actually have to fill in this really long form. And in order for this form to be filled in
44

45
00:04:39,680 --> 00:04:42,530
we need a couple of pieces of information from you.
45

46
00:04:42,530 --> 00:04:46,330
So we give you a quick call and we send the form over to you.
46

47
00:04:46,460 --> 00:04:51,650
Now you take a look at this form and you see that there's a couple of pieces information in there that
47

48
00:04:51,650 --> 00:04:53,200
you don't actually know
48

49
00:04:53,300 --> 00:04:55,820
for example your passport number.
49

50
00:04:55,820 --> 00:04:59,920
So you have to go and search for your passport around your house.
50

51
00:04:59,930 --> 00:05:06,080
So we have to wait for you to go home from work and then look through your drawers, find your passport
51

52
00:05:06,350 --> 00:05:08,330
before you can fill in this form.
52

53
00:05:08,750 --> 00:05:16,850
But once you have, then you were able to send it back to us and we can now get hold of your information
53

54
00:05:17,330 --> 00:05:22,790
and continue the implementation of booking your travel tickets.
54

55
00:05:23,120 --> 00:05:29,520
So this is kind of similar to a how a callback works. And the whole reason why we use it is because there's
55

56
00:05:29,540 --> 00:05:33,540
usually an event that requires a little bit of waiting.
56

57
00:05:33,710 --> 00:05:40,970
So similar to how when we talked about async and await, we were waiting for the network to give us the
57

58
00:05:40,970 --> 00:05:42,560
data we need.
58

59
00:05:42,560 --> 00:05:47,000
Well in this case we're actually waiting for the user interaction.
59

60
00:05:47,180 --> 00:05:54,200
So we're already pre-specifying well this is what should happen when the user taps on the checkbox and
60

61
00:05:54,200 --> 00:06:02,290
we're waiting for that event to actually happen in real life before we trigger that callback. So I hope
61

62
00:06:02,290 --> 00:06:07,360
that cleared up callbacks a little bit for you and it might be a good idea to have a play around with
62

63
00:06:07,360 --> 00:06:09,430
the code as it is at the moment
63

64
00:06:09,580 --> 00:06:16,480
just to be able to see how it works, what you can do with callbacks and understand how we're able to
64

65
00:06:16,540 --> 00:06:22,420
lift our state up and pass the information upstream through the use of callbacks.
65

66
00:06:22,480 --> 00:06:31,230
So in the next lesson, we have a challenge for you to implement lifting state up and managing state yourself.
66

67
00:06:31,250 --> 00:06:34,270
So for all of that and more, II'll see on the next lesson.
