WEBVTT
0
1
00:00:00.680 --> 00:00:08.300
Now in the last lesson in order to implement our animations we had to add something called a Single
1

2
00:00:08.300 --> 00:00:16.160
TicketProviderStateMixin to our welcome screen state class and we did that using the 'with' keyword.
2

3
00:00:16.910 --> 00:00:23.930
And so in this lesson we're going to do a deep dive on exactly what these mixins are and why we need
3

4
00:00:23.930 --> 00:00:25.390
them. Now
4

5
00:00:25.400 --> 00:00:32.120
the first thing to keep in mind is this sentence that you find on the Dart language tool and it tells
5

6
00:00:32.120 --> 00:00:39.770
you that mixins are a way of reusing a class's code in multiple class hierarchies.
6

7
00:00:39.770 --> 00:00:46.710
So while we're going through this lesson, keep this sentence. In mind in order to explain how mixin work
7

8
00:00:46.800 --> 00:00:49.180
I'm going to dive straight into the code.
8

9
00:00:49.350 --> 00:00:52.740
So let's build a new class and let's call it Animal.
9

10
00:00:53.070 --> 00:01:00.250
Now animals have this one behavior that they share and it's the fact that they can move.
10

11
00:01:00.270 --> 00:01:07.860
So we're going to build a method for our animal class to describe how they behave, namely how they move
11

12
00:01:08.060 --> 00:01:08.400
right?
12

13
00:01:08.430 --> 00:01:16.590
So if you're an animal you might move by, let's say for simplicity's sake, you'll print changed position
13

14
00:01:16.620 --> 00:01:16.890
right?
14

15
00:01:16.920 --> 00:01:21.480
So every time you move, you're probably going to have changed your position.
15

16
00:01:21.480 --> 00:01:29.250
So now if we create a new animal, we say animal.move, then what we'll get out put it into the console
16

17
00:01:29.400 --> 00:01:32.160
is that animal changed position right.
17

18
00:01:32.160 --> 00:01:35.700
That's what you're telling it to do when you tell it to move.
18

19
00:01:35.730 --> 00:01:44.400
Now let's say that we create another class and this is a fish class and this class is going to inherit
19

20
00:01:44.430 --> 00:01:46.230
from our animal class.
20

21
00:01:46.230 --> 00:01:54.990
And the key word in Dart is extends, so the class of fish will extend from the animal class and this
21

22
00:01:54.990 --> 00:02:00.350
means that it now gets access to all of the behavior that's in the animal class.
22

23
00:02:00.360 --> 00:02:08.760
So that means we could create a new fish and I could say fish move straight away without having to rewrite
23

24
00:02:08.760 --> 00:02:12.720
the code that defined how move worked right?
24

25
00:02:13.140 --> 00:02:20.700
So now you can see that when I say fish.move in my main function it will also change position.
25

26
00:02:20.700 --> 00:02:31.590
So this is how we are reusing a class's is code because we are able to inherit from that class.
26

27
00:02:31.590 --> 00:02:34.890
Now let's say that we had another class right?
27

28
00:02:35.010 --> 00:02:42.690
Let's say this is the class of birds and birds are also able to move and they're also going to inherit
28

29
00:02:42.690 --> 00:02:44.090
from animal.
29

30
00:02:44.160 --> 00:02:50.170
But if we think about it the way that a fish moves versus the way that a bird moves is quite different
30

31
00:02:50.190 --> 00:02:50.550
right?
31

32
00:02:50.970 --> 00:02:57.150
So we might want to override the move method that we inherited from animal.
32

33
00:02:57.150 --> 00:03:06.810
So we can do that by using the @override annotation and then we can specify our move method which
33

34
00:03:06.870 --> 00:03:08.920
is what we're going to override.
34

35
00:03:09.150 --> 00:03:14.340
And now we can start off by saying, let's do what our superclass does.
35

36
00:03:14.340 --> 00:03:22.860
So in the superclass definition of move, we print change position. But after we've done that, after we've
36

37
00:03:22.860 --> 00:03:26.180
called that then we're going to do our own thing too.
37

38
00:03:26.280 --> 00:03:35.460
We're going to say maybe print change position by swimming.
38

39
00:03:36.540 --> 00:03:40.310
And for our bird class we're going to do exactly the same thing.
39

40
00:03:40.470 --> 00:03:48.390
We're going to override the parents version of move which is to simply just change position, but then
40

41
00:03:48.390 --> 00:03:51.240
we're also going to print by flying.
41

42
00:03:51.630 --> 00:03:58.510
So now our fish can move and it can also swim, our birds can move and it can also fly.
42

43
00:03:58.620 --> 00:04:02.930
And when I decide to print my fish.move,
43

44
00:04:02.940 --> 00:04:06.980
you can see it's now gonna say change position by swimming.
44

45
00:04:07.080 --> 00:04:18.700
And when I print my bird.move then in this case it's going to say change position by flying.
45

46
00:04:18.700 --> 00:04:21.830
Now we have seen how we can inherit.
46

47
00:04:22.150 --> 00:04:23.780
Well let's create another class.
47

48
00:04:23.800 --> 00:04:28.130
Well this class is going to be a class of ducks right?
48

49
00:04:28.240 --> 00:04:34.030
And ducks at least wild ducks, can both fly as well as swim.
49

50
00:04:34.030 --> 00:04:38.950
So what do we inherit exactly? Do inherit from fish
50

51
00:04:39.070 --> 00:04:47.880
or do we inherit from bird? Because we kind of need ducks to be able to swim and also fly. So in Dart
51

52
00:04:48.040 --> 00:04:51.860
and also a lot of modern object oriented programming languages,
52

53
00:04:51.940 --> 00:04:54.100
there is a single inheritance pattern.
53

54
00:04:54.130 --> 00:04:56.980
So you can only extend one class.
54

55
00:04:57.010 --> 00:04:58.300
You can have your pick.
55

56
00:04:58.420 --> 00:05:05.140
You can choose an animal or you can choose fish or you can choose bird but you can't say extends fish
56

57
00:05:05.260 --> 00:05:12.940
and extend bird and extend animal and for every other class whose code you want to reuse, doesn't work
57

58
00:05:12.940 --> 00:05:13.470
like this.
58

59
00:05:13.480 --> 00:05:16.210
We can only extend one class.
59

60
00:05:16.210 --> 00:05:18.820
So we have to make a choice.
60

61
00:05:19.180 --> 00:05:27.310
Now even if we were able to extend fish and bird, well if we were to implement the move method for our
61

62
00:05:27.310 --> 00:05:35.890
duck, well is it going to use the birds move method where it flies or is it gonna use the move that inherited
62

63
00:05:35.890 --> 00:05:38.350
from fish where it swims?
63

64
00:05:38.350 --> 00:05:46.660
If we were to inherit that move method from two classes which method do we end up actually getting because
64

65
00:05:46.660 --> 00:05:49.060
they both have a move method
65

66
00:05:49.060 --> 00:05:49.980
right?
66

67
00:05:50.050 --> 00:05:53.310
So this is what mixins actually solve.
67

68
00:05:53.680 --> 00:06:02.530
Instead of having a class of fish which has the move method and a class of bird which has a move method,
68

69
00:06:02.950 --> 00:06:11.830
we can actually instead create a mixin and we can call it CanSwim. So CanSwim  basically has a method
69

70
00:06:12.100 --> 00:06:13.960
called swim.
70

71
00:06:13.960 --> 00:06:25.340
And when you use this, it will print changing position by swimming. And we can create another mixin called
71

72
00:06:25.460 --> 00:06:37.380
CanFly and so now we can have a fly method in the CanFly and we can change position by flying.
72

73
00:06:37.380 --> 00:06:39.220
So now our duck,
73

74
00:06:39.330 --> 00:06:47.670
it could inherit by extending from our animal class maybe we want to be able to use a basic move where
74

75
00:06:47.670 --> 00:06:56.610
the duck just waddles and changes position, but we can also give it the CanFly  and CanSwim  ability
75

76
00:06:56.880 --> 00:07:04.560
by adding in the mixin. And we incorporate a mix into a class by adding the keyword 'with' after any
76

77
00:07:04.620 --> 00:07:09.550
class extensions and then we specify the names of our mixins.
77

78
00:07:09.630 --> 00:07:17.170
So we have our CanSwim  mixin followed by a comma and then we can add our CanFly  mixin.
78

79
00:07:17.220 --> 00:07:26.310
And so now our duck class not only has a move method so it's reusing this code that we wrote here, but
79

80
00:07:26.310 --> 00:07:29.700
it's also able to swim and fly.
80

81
00:07:29.820 --> 00:07:34.840
So we're reusing code from lots of different classes.
81

82
00:07:34.920 --> 00:07:43.290
So now if we were to create a duck object not only can it move, but it can also fly and it can also
82

83
00:07:43.320 --> 00:07:45.420
swim.
83

84
00:07:45.690 --> 00:07:54.810
Now the benefit of this is that we can now reuse a class's code in multiple class hierarchies so it
84

85
00:07:54.810 --> 00:08:00.440
doesn't really matter who you inherit from. You don't even have to inherit from anybody.
85

86
00:08:00.480 --> 00:08:07.830
You can reuse bits of code that you've created for other classes in lots of different classes.
86

87
00:08:07.830 --> 00:08:15.120
So for example I might create another class later on called Airplane right? And airplane can simply just
87

88
00:08:15.240 --> 00:08:18.240
add that mixin of CanFly.
88

89
00:08:18.240 --> 00:08:25.230
And already my airplane is able to fly without me having to write extra code and repeating that code
89

90
00:08:25.530 --> 00:08:28.100
that I wrote inside here.
90

91
00:08:28.110 --> 00:08:33.240
Now these are all very trivial examples because I'm just putting in one line print statements, but you
91

92
00:08:33.240 --> 00:08:38.790
can imagine if you were programming a robot to be able to swim, to be able to say how the propellers
92

93
00:08:38.790 --> 00:08:45.930
would move or how you would displace water or how you would even worse try to figure out how to make
93

94
00:08:45.930 --> 00:08:48.420
something flap its wings and fly,
94

95
00:08:48.420 --> 00:08:52.020
that involves a lot of code and you want to try and keep it modular
95

96
00:08:52.020 --> 00:08:52.300
right?
96

97
00:08:52.320 --> 00:08:58.710
By keeping the implementation of methods and properties and things that belonged to a particular class
97

98
00:08:58.980 --> 00:09:06.300
together in one class and then being able to simply just add it in into any classes that need it as a
98

99
00:09:06.310 --> 00:09:14.070
mixin, and this is the key you keep the implementation when using a mixin. You keep all the functionality
99

100
00:09:14.070 --> 00:09:18.210
that you've coded up in the fly method and the swim methods.
100

101
00:09:18.210 --> 00:09:22.920
This is what the documentation means with adding features to a class.
101

102
00:09:23.250 --> 00:09:30.180
So mixins are really powerful and often they provide you with an alternative to using a subclass. For
102

103
00:09:30.180 --> 00:09:35.230
example instead of getting our fish to override the parent move method,
103

104
00:09:35.370 --> 00:09:42.660
we could change the fish class to a class that now can swim by using that with keyword together with
104

105
00:09:42.660 --> 00:09:44.060
the mixin.
105

106
00:09:44.070 --> 00:09:46.020
Well why is this useful?
106

107
00:09:46.050 --> 00:09:52.570
Well big benefits tend to be with large programs with lots of classes that need to share some capabilities.
107

108
00:09:52.710 --> 00:09:58.690
Having that shared capability split out into a mixin makes it easier to maintain too.
108

109
00:09:58.740 --> 00:10:04.440
For example if you need to make a change to the swim method, then both the duck and the fish will know
109

110
00:10:04.440 --> 00:10:09.630
about that change without you having to change the fish or the duck class.
110

111
00:10:09.630 --> 00:10:16.500
So if we're creating a large module with lots of classes that share capabilities and properties, then
111

112
00:10:16.500 --> 00:10:23.430
coming back to this definition mixins, they're a way of getting you to reuse a class as code in multiple
112

113
00:10:23.430 --> 00:10:24.240
hierarchies.
113

114
00:10:24.240 --> 00:10:30.390
So it's kind of agnostic to what you inherit or where you are in the class hierarchy, it doesn't matter
114

115
00:10:30.420 --> 00:10:34.790
who your parents are or who your siblings are or who your children are.
115

116
00:10:34.860 --> 00:10:37.560
You can always add these capabilities.
116

117
00:10:37.560 --> 00:10:39.790
It's a bit like learning a new skill right?
117

118
00:10:39.810 --> 00:10:43.940
Your parents don't have to be doctors for you to be able to learn how to become a doctor
118

119
00:10:43.940 --> 00:10:44.190
right?
119

120
00:10:44.190 --> 00:10:48.210
It's a skill that you can have instead of something that you have to inherit.
