0
1
00:00:00,270 --> 00:00:06,330
So now that we've done all the fiddly bits of incorporating Firebase into our Flutter app, it's finally
1

2
00:00:06,330 --> 00:00:12,420
time to actually use Firebase and tap into all of its potential. And its good point to mention that
2

3
00:00:12,420 --> 00:00:18,270
make sure that you've actually run and tested the app before this stage because this is when things start
3

4
00:00:18,270 --> 00:00:24,930
getting complicated and it can get really hairy if you haven't got a clean start namely everything is
4

5
00:00:24,930 --> 00:00:30,570
actually working up to this point. But once you're ready let's go into our registration screen.
5

6
00:00:30,750 --> 00:00:37,260
And if you've still got some of these gradle files etc open, then be sure to close them down. So we're
6

7
00:00:37,260 --> 00:00:44,040
ready to go ahead and actually receive some of the data that the user typed into these text fields.
7

8
00:00:44,040 --> 00:00:51,110
And the first text field which says 'Enter your email' is going to obviously contain the email
8

9
00:00:51,140 --> 00:00:51,780
right?
9

10
00:00:51,810 --> 00:00:54,690
And the second one is going to contain the password.
10

11
00:00:54,690 --> 00:00:58,370
So let's store that value that the user typed in here
11

12
00:00:58,500 --> 00:01:02,040
when that text file gets changed inside a variable.
12

13
00:01:02,040 --> 00:01:07,290
So inside our registration screen state, let's create two new variables.
13

14
00:01:07,290 --> 00:01:08,880
Both are going to be strings.
14

15
00:01:08,970 --> 00:01:10,770
One is gonna be called email and
15

16
00:01:10,800 --> 00:01:13,390
the other is going to be called password.
16

17
00:01:13,440 --> 00:01:19,050
Now once we've created these variables, we're going to set them equal to the value that the user types
17

18
00:01:19,050 --> 00:01:19,440
in here.
18

19
00:01:19,470 --> 00:01:22,320
So the first one is going to be email
19

20
00:01:22,320 --> 00:01:28,780
and the second one is going to be the password.
20

21
00:01:28,800 --> 00:01:32,430
Now we're able to save what the users typed into here.
21

22
00:01:32,490 --> 00:01:38,700
And the moment when they press on the register button, we should have a value for the password and a
22

23
00:01:38,700 --> 00:01:40,020
value for the email.
23

24
00:01:40,320 --> 00:01:42,090
So let's go ahead and test that out.
24

25
00:01:42,120 --> 00:01:50,430
So inside this onPressed for our button, let's print out the email and also the password.
25

26
00:01:53,030 --> 00:01:59,630
And now let's hit save to hot refresh our app and let's go in to register and try to register ourselves
26

27
00:01:59,720 --> 00:02:01,280
as a new user.
27

28
00:02:01,310 --> 00:02:07,820
So I'm going to call myself angela@gmail.com and I'm going to put in my password as 123
28

29
00:02:07,820 --> 00:02:08,940
456.
29

30
00:02:09,170 --> 00:02:14,810
And I'm gonna hit register and now if we look inside our console, you can see those two values have been
30

31
00:02:14,810 --> 00:02:19,430
captured and they're now available for use inside our onPressed.
31

32
00:02:19,610 --> 00:02:27,290
And this is where we're going to be using those values to register our user with an email and a password.
32

33
00:02:27,290 --> 00:02:33,200
Now while we here though, if we take a look at the current appearance of our text field, they look very
33

34
00:02:33,200 --> 00:02:37,930
basic and there's a couple of things that we can do to make it just a little bit better.
34

35
00:02:37,940 --> 00:02:44,600
One of the first things I'd like to do is to center align the text in here and you can do that really
35

36
00:02:44,600 --> 00:02:52,160
easily by adding it as a property on the text field. So we can add a textAlign property and we can set
36

37
00:02:52,160 --> 00:02:58,550
it to text align center and we can do the same for our password field.
37

38
00:02:58,550 --> 00:03:06,650
So I'm just going to paste it into this other text field. So now if I perform a hot restart, you can see
38

39
00:03:06,650 --> 00:03:10,790
that my place holder or my hintText is now centered.
39

40
00:03:10,910 --> 00:03:16,540
And also when I start typing, it's also centred as well and it looks a lot better.
40

41
00:03:16,820 --> 00:03:22,340
Now if you try to hot reload and you've got some funny behavior and some weird text in here, just be
41

42
00:03:22,340 --> 00:03:28,280
sure to hot restart the app from scratch so that the text field can actually update.
42

43
00:03:28,400 --> 00:03:34,220
Now once we've done that, the second thing that you'll notice is the password is kind of just out there
43

44
00:03:34,220 --> 00:03:35,560
in the open right?
44

45
00:03:35,600 --> 00:03:43,910
We can turn this into a standard password field by changing the second text field's property called obscure
45

46
00:03:43,910 --> 00:03:44,750
text.
46

47
00:03:44,900 --> 00:03:52,820
And if we set this to true, then you'll see that when I start typing inside this field then all my letters
47

48
00:03:52,850 --> 00:03:55,280
or numbers become these little dots.
48

49
00:03:55,280 --> 00:04:00,730
So if somebody is looking over my shoulder, they won't be to see what my super secret password is.
49

50
00:04:00,950 --> 00:04:08,240
The final thing I want to show you is that whenever we use these text fields, we get a bog standard keyboard
50

51
00:04:08,300 --> 00:04:09,120
showing up here.
51

52
00:04:09,200 --> 00:04:15,900
And if you don't see that soft keyboard coming up, then on a Mac you can hit COMMAND + K and when you are
52

53
00:04:15,920 --> 00:04:21,350
on Android and you click on one of these text fields, you should see a little keyboard icon show up here
53

54
00:04:21,650 --> 00:04:27,170
and you should be able to toggle the keyboard on and off depending on that show virtual keyboard toggle.
54

55
00:04:29,670 --> 00:04:31,590
Coming back to our code,
55

56
00:04:31,620 --> 00:04:38,100
I mentioned that the keyboard that you see here is the same for both fields and it makes it quite awkward
56

57
00:04:38,160 --> 00:04:44,220
when you're typing an email if you have to go into the symbols in order to get that @ sign.
57

58
00:04:44,220 --> 00:04:52,110
So what we can do is inside the e-mail text field which is this one, we can add one more property which
58

59
00:04:52,110 --> 00:05:01,770
is the keyboard type. And we can specify that the keyboard type should be a text input type and the type
59

60
00:05:01,830 --> 00:05:04,810
is going to be .emailAddress.
60

61
00:05:04,830 --> 00:05:08,670
And when I hit save and you take a look at the difference.
61

62
00:05:08,830 --> 00:05:16,080
Now when I activate the keyboard on the top one, you can see that it's actually the e-mail typing keyboard
62

63
00:05:16,380 --> 00:05:23,970
with a space and the @ sign and also if you hold down the .  you'll get all the common endings, the
63

64
00:05:23,970 --> 00:05:25,790
com, net et cetera.
64

65
00:05:25,890 --> 00:05:27,980
So this just makes it easier for our users
65

66
00:05:27,990 --> 00:05:34,440
and these are really very minor adjustments. So now that we've added these to our text fields in the
66

67
00:05:34,440 --> 00:05:39,570
registration screen, you'll probably realize that we'll need the same things in our log in screen.
67

68
00:05:39,600 --> 00:05:43,480
So let's just copy these over to the log in screen.
68

69
00:05:43,530 --> 00:05:50,490
So the first text field is going to get the keyboard type and the second text field is going to get
69

70
00:05:50,490 --> 00:05:56,880
the obscure text and text align, so we can put those inside these two text fields.
70

71
00:05:57,060 --> 00:06:04,460
And now let's head back to our registration screen and actually do the registering of our users.
71

72
00:06:04,770 --> 00:06:11,610
Now in order to authenticate our users, we're going to be importing one of those packages that we installed
72

73
00:06:11,790 --> 00:06:12,560
earlier on.
73

74
00:06:12,720 --> 00:06:16,140
And that's the Firebase authentication package.
74

75
00:06:16,140 --> 00:06:22,200
And in order to use authentication, let's import that into our registration screen.
75

76
00:06:22,200 --> 00:06:29,090
So if you type auth you should be able to find the firebase_auth.dart package.
76

77
00:06:29,130 --> 00:06:33,740
Now the next step is to create a new authentication instance.
77

78
00:06:33,930 --> 00:06:38,470
And we do that inside our registration screen state right here.
78

79
00:06:38,580 --> 00:06:44,560
I'm going to create it as a final because I'm never going to change it once I've created it, and I'm
79

80
00:06:44,560 --> 00:06:51,430
going to call it _auth to keep it as a private property so that other classes can't accidentally
80

81
00:06:51,520 --> 00:06:53,100
mess with this variable.
81

82
00:06:53,260 --> 00:07:02,950
And I'm gonna set it to equal the FirebaseAuth.instance and you can see that this is a static instance
82

83
00:07:03,310 --> 00:07:04,430
of this class.
83

84
00:07:05,300 --> 00:07:11,060
So we're going to be using this auth object to actually authenticate the users.
84

85
00:07:11,060 --> 00:07:16,430
We're going to be using the associated methods namely the sign in with email and password and also create
85

86
00:07:16,430 --> 00:07:19,370
user with email and password methods.
86

87
00:07:19,370 --> 00:07:27,320
So once we've created our auth instance, we're going to go down to the onPressed here where we have
87

88
00:07:27,320 --> 00:07:28,790
our email and password.
88

89
00:07:28,790 --> 00:07:34,550
We don't really need to print them out but we need to be able to use it to register our user.
89

90
00:07:34,550 --> 00:07:39,550
Now in order to register our user, we're going to tap into that auth object that we created just now.
90

91
00:07:39,770 --> 00:07:46,280
And we're going to use one of its associated methods which is create user with email and password. And
91

92
00:07:46,280 --> 00:07:54,200
you can see it takes only two required field, email and a password both as strings. And it returns a future
92

93
00:07:54,500 --> 00:07:59,190
because it can take any amount of time to authenticate and create our user.
93

94
00:07:59,510 --> 00:08:05,900
So we don't want the user interface to be hanging while that's happening. Do let's hit enter and let's
94

95
00:08:05,900 --> 00:08:11,360
put in our email variable as the email and password as the password.
95

96
00:08:11,480 --> 00:08:19,970
And because this is going to return a future, let's keep a hold of that future and capture it in a final
96

97
00:08:20,210 --> 00:08:20,720
variable.
97

98
00:08:20,750 --> 00:08:27,390
So let's call it the newUser and we'll set it to equal the output of this method.
98

99
00:08:27,530 --> 00:08:35,010
Now because this is an asynchronous method, we don't want to continue on without knowing whether if our
99

100
00:08:35,030 --> 00:08:37,040
new user has been created.
100

101
00:08:37,040 --> 00:08:44,180
So we're going to turn onPressed into an async method and we're going to add the keyword await in front
101

102
00:08:44,240 --> 00:08:47,030
of our create user with email and password.
102

103
00:08:47,030 --> 00:08:53,630
This way we can be sure that we definitely have finished authenticating and creating our user before
103

104
00:08:53,630 --> 00:08:55,510
we proceed to the next step.
104

105
00:08:56,710 --> 00:09:03,700
Because this can fail for a number of reasons, a user could have entered an email that's already been
105

106
00:09:03,700 --> 00:09:09,410
registered, they could have entered an invalid email or an invalid password etc..
106

107
00:09:09,490 --> 00:09:16,070
We want to be able to use our try and catch blocks to be able to cut any exceptions that might occur.
107

108
00:09:16,120 --> 00:09:19,570
And for now, I'm simply just going to print the exception.
108

109
00:09:19,590 --> 00:09:22,070
There is far more fancy ways of dealing with it
109

110
00:09:22,210 --> 00:09:27,000
but this is good enough for now because we're focusing on the creating user part.
110

111
00:09:27,400 --> 00:09:35,080
So if this async and await seems unfamiliar, then be sure to review the entire module where we focused
111

112
00:09:35,080 --> 00:09:41,370
on talking about asynchronous methods and how we deal with it in Dart which is the Clima module.
112

113
00:09:41,620 --> 00:09:47,470
But if all of this looks good to you then we can proceed onto the next step where we're going to check
113

114
00:09:47,470 --> 00:09:51,670
to make sure that new user is not equal to null.
114

115
00:09:51,670 --> 00:09:58,630
So we actually managed to get a user who is registered back and in that case we're going to navigate
115

116
00:09:58,690 --> 00:10:01,300
the user to our chat screen.
116

117
00:10:01,300 --> 00:10:09,670
So we're going to use pushNamed and we're going to use the route name which is our ChatScreen.id
117

118
00:10:10,030 --> 00:10:14,850
and this is of course that static variable which comes from the chat class.
118

119
00:10:14,860 --> 00:10:17,470
So we have to import that chat_screen.dart.
119

120
00:10:21,010 --> 00:10:27,310
Now that the user navigates to the chat screen, well we can pick it up from over here and we want to
120

121
00:10:27,310 --> 00:10:33,970
be able to print out the current user's email address because we're going to need that when we start
121

122
00:10:33,970 --> 00:10:36,000
sending messages in their name.
122

123
00:10:36,040 --> 00:10:41,050
We're going to have to tag our messages with the sender and what better way of doing it than using the
123

124
00:10:41,050 --> 00:10:42,850
signed in user's email?
124

125
00:10:42,850 --> 00:10:50,140
So over here we're also going to import the auth package and we're also going to create another one
125

126
00:10:50,200 --> 00:10:52,180
of those auth instances.
126

127
00:10:52,210 --> 00:11:02,780
So it's going to be equal to the Firebase auth.instance and then we're going to create a method
127

128
00:11:02,840 --> 00:11:05,610
called getCurrentUser.
128

129
00:11:06,020 --> 00:11:13,010
And this method is not going to take any input or have any outputs but what it will do though is it
129

130
00:11:13,010 --> 00:11:24,320
will check to see if there is a current user who is signed in. So previously if our registration was successful,
130

131
00:11:24,710 --> 00:11:32,420
then this user actually gets saved into the authentication object as a current user,
131

132
00:11:32,450 --> 00:11:40,610
so somebody who's signed in. Inside the chat screen, we can actually create a new final variable called
132

133
00:11:40,670 --> 00:11:49,530
the user and we'll set it to equal the auth object .currentUser.
133

134
00:11:50,780 --> 00:11:54,670
So this will be null if nobody is currently assigned in.
134

135
00:11:54,830 --> 00:12:00,290
But if somebody has registered or if somebody is logged in, then this will correspond to the current
135

136
00:12:00,290 --> 00:12:05,420
user and we'll be able to tap into that user's email or password.
136

137
00:12:05,420 --> 00:12:13,390
Now because this is also an asynchronous method, it returns a future, in order to use this user,
137

138
00:12:13,400 --> 00:12:20,380
we again have to mark this as async and make sure that we wait on this line to complete.
138

139
00:12:20,480 --> 00:12:27,380
So now that that's complete we're going to check to see if user is not equal to null, then that means we
139

140
00:12:27,380 --> 00:12:30,270
do have a currently signed in user.
140

141
00:12:31,280 --> 00:12:33,790
Well in that case we're going to create a new variable,
141

142
00:12:33,800 --> 00:12:44,750
so a new FirebaseUser and we're going to call this the loggedIn user and we're going to assign this
142

143
00:12:44,750 --> 00:12:49,310
user that we got back from the current user to the loggedIn user
143

144
00:12:49,310 --> 00:12:51,610
as long as it's not null.
144

145
00:12:51,740 --> 00:13:00,380
And again because this can fail, we should wrap this inside a try and catch block so that we catch any
145

146
00:13:00,380 --> 00:13:03,880
exceptions that might happen.
146

147
00:13:04,160 --> 00:13:07,390
And finally we have to trigger this method somewhere.
147

148
00:13:07,520 --> 00:13:16,270
And what a better place to trigger it than when our state is initialized? So let's delete that and let's
148

149
00:13:16,270 --> 00:13:25,550
go ahead and call get current user. And once we call get current user, we're going to print the logged
149

150
00:13:25,550 --> 00:13:26,270
in user
150

151
00:13:29,590 --> 00:13:37,540
.email property into our console just to confirm that we actually managed to get access to the
151

152
00:13:37,540 --> 00:13:45,530
user who just recently registered so that the whole process worked. Now the very last thing we have to
152

153
00:13:45,530 --> 00:13:51,860
do before we test our app is we actually have to enable this particular logging in method.
153

154
00:13:51,980 --> 00:13:59,450
So we do that by going to our project on Firebase and then going into the Develop section and clicking
154

155
00:13:59,540 --> 00:14:05,760
on authentication. So here we have currently no sign in methods
155

156
00:14:05,760 --> 00:14:13,320
so let's go ahead and set one up under the sign in method tab. And you can see that you can use a whole
156

157
00:14:13,320 --> 00:14:17,710
wide array of different social sign ins or anonymous sign in even,
157

158
00:14:17,820 --> 00:14:21,410
but the one that we want to enable is the Email/Password.
158

159
00:14:21,540 --> 00:14:27,760
So let's click on this toggle to enable it and go ahead and hit save.
159

160
00:14:27,850 --> 00:14:34,930
Now we're actually finally ready to test our app and I'm just gonna click Run to do a hot restart.
160

161
00:14:37,820 --> 00:14:41,400
And once it's ready, it's going to drop me on the welcome screen.
161

162
00:14:41,480 --> 00:14:48,560
We're going to click on register and I'm going to register my first user as angela@email.com
162

163
00:14:49,030 --> 00:14:52,650
and the password is 123456.
163

164
00:14:52,670 --> 00:14:59,390
Now mind you when you're registering a user, make sure your password is also at least six characters.
164

165
00:14:59,870 --> 00:15:05,870
Firebase passwords needs to be at least six characters long, short passwords will cause the registration
165

166
00:15:05,870 --> 00:15:15,800
to fail. Let's hit register and you see that I progress to the chat screen automatically and that's because
166

167
00:15:15,800 --> 00:15:18,030
of that navigator that we put in here.
167

168
00:15:18,200 --> 00:15:22,640
And once I'm on the chat screen, I should be seeing my email,
168

169
00:15:22,640 --> 00:15:27,950
so that user who just registered, being printed into the console.
169

170
00:15:27,950 --> 00:15:35,390
And if I take a look on Firebase and I go into the users tab, I can see that new user who's just been
170

171
00:15:35,390 --> 00:15:39,650
created right here. So perfect.
171

172
00:15:39,680 --> 00:15:45,760
You've created your very first user and you've registered them using Firebase authentication.
172

173
00:15:45,830 --> 00:15:52,010
Now in the next lesson, we're going to look at how we can log in users who have registered by updating
173

174
00:15:52,010 --> 00:15:54,140
the code in the log in screen.
174

175
00:15:54,200 --> 00:15:57,260
So for all of that and more, I'll see on the next lesson.
