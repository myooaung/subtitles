0
1
00:00:00,450 --> 00:00:08,340
In previous lessons, we saw how we could incorporate a drop down button with a bunch of dropdown items.
1

2
00:00:08,580 --> 00:00:12,090
And this is of course the Android appearance,
2

3
00:00:12,120 --> 00:00:19,410
so the material design widget. And in the last lesson we looked at how we can use a Cupertino picker
3

4
00:00:19,860 --> 00:00:24,960
which is the iOS appearance for the iOS picker.
4

5
00:00:24,960 --> 00:00:32,190
Now let's create two methods where we can either create a Cupertino picker or we can create a dropdown
5

6
00:00:32,190 --> 00:00:32,980
button.
6

7
00:00:33,180 --> 00:00:41,560
So I'm gonna cut this code for my dropdown button and I'm going to incorporate it into a separate method.
7

8
00:00:41,640 --> 00:00:50,130
So we're gonna call this get dropdown button. And inside this method is where I'm going to paste what
8

9
00:00:50,130 --> 00:00:56,400
I copied over, so everything that's the code for the dropdown button. And then I'm going to uncomment it
9

10
00:00:56,670 --> 00:01:00,420
and return this as the output.
10

11
00:01:00,420 --> 00:01:07,350
So I'm going to add that semicolon at the end and also change the return type here to a dropdown button
11

12
00:01:07,620 --> 00:01:11,230
that contains string items.
12

13
00:01:11,250 --> 00:01:17,670
So now let's hit save for Dart to reformat our code and add some comments to make that reformatting look
13

14
00:01:17,670 --> 00:01:18,990
a bit prettier.
14

15
00:01:18,990 --> 00:01:25,980
So now we have all get dropdown button which is going to use get dropdown items to fill its items.
15

16
00:01:26,010 --> 00:01:31,160
Well it seems a bit extra to have two separate methods just to get a dropdown button.
16

17
00:01:31,530 --> 00:01:35,220
So let's refactor this and combine them into one.
17

18
00:01:35,250 --> 00:01:41,110
So I'm going to cut all of this code inside my get dropdown items.
18

19
00:01:41,130 --> 00:01:49,050
I'm going to paste it at the very top of the get dropdown button and instead of returning the dropdown
19

20
00:01:49,140 --> 00:01:54,930
items, I'm simply going to put that inside here.
20

21
00:01:54,980 --> 00:02:02,240
So now we've combined all of this into one method which grabs the items and puts them in a dropdown
21

22
00:02:02,240 --> 00:02:06,090
button and returns it as the output.
22

23
00:02:06,110 --> 00:02:10,310
So now it's time to do the same for our Cupertino picker.
23

24
00:02:10,400 --> 00:02:18,260
So I'm going to cut it out of the code in my build method and I'm going to create a new method that
24

25
00:02:18,260 --> 00:02:27,090
will output a Cupertino picker and I'm going to call this simply iOS picker. And then inside this
25

26
00:02:27,090 --> 00:02:32,460
method I'm going to paste what I copied over and use this as the output,
26

27
00:02:32,460 --> 00:02:39,060
so returning a Cupertino picker. And then in the same way I'm going to take all of this and I'm going
27

28
00:02:39,060 --> 00:02:46,740
to paste it into my iOS picker and instead of returning the picker items, I'm going to use the picker
28

29
00:02:46,770 --> 00:02:51,060
items as the children of my Cupertino picker.
29

30
00:02:51,060 --> 00:02:57,280
So now we can also delete this get picker items method as well.
30

31
00:02:57,310 --> 00:03:05,590
So now I have a way of getting my iOS picker through my iOS picker method or I could get a Android picker
31

32
00:03:05,680 --> 00:03:12,400
maybe or Android dropdown. Maybe we should change this to a Android dropdown and because we deleted that
32

33
00:03:12,400 --> 00:03:17,620
method get dropdown items, then we have to delete it from our build method here as well to get rid of
33

34
00:03:17,620 --> 00:03:20,470
that error we're seeing in the right hand side here.
34

35
00:03:21,070 --> 00:03:27,010
So now inside my container I can either choose to display a Android dropdown,
35

36
00:03:27,030 --> 00:03:34,930
so if I hit save you'll see that I'm getting my dropdown list being rendered here, or if I choose to
36

37
00:03:34,960 --> 00:03:37,610
I could change to an iOS picker.
37

38
00:03:37,690 --> 00:03:43,230
So let's hit save and we see now a iOS style picker.
38

39
00:03:43,240 --> 00:03:48,930
So wouldn't it be nice if I could simply just create a method here,
39

40
00:03:49,540 --> 00:04:02,160
let's call it get picker which simply returns a widget and the get picker is simply going to check to
40

41
00:04:02,160 --> 00:04:05,670
see if I'm running my app on iOS.
41

42
00:04:05,670 --> 00:04:19,620
Well then we're going to return the iOS picker. But if I was running it on Android, well then I'm going
42

43
00:04:19,620 --> 00:04:22,950
to return the Android dropdown.
43

44
00:04:22,950 --> 00:04:24,800
Wouldn't that be cool?
44

45
00:04:24,810 --> 00:04:28,560
Well with Flutter you can do exactly that.
45

46
00:04:28,590 --> 00:04:35,310
We can actually check in our code to see which platform our app is currently being run on.
46

47
00:04:35,340 --> 00:04:41,950
So we can plan ahead to see that if our code is being run on an iOS device,
47

48
00:04:42,030 --> 00:04:44,120
then we could return an iOS picker.
48

49
00:04:44,280 --> 00:04:51,180
But if our code is being run on an Android device, we can return the Android dropdown. And to check to
49

50
00:04:51,180 --> 00:04:54,710
see which platform our code is being run on
50

51
00:04:54,720 --> 00:05:02,730
we need a Dart library called dart:io and you don't have to add this to your pubspec.yaml. All you need
51

52
00:05:02,730 --> 00:05:11,420
to do is just to import it like how we imported the Dart maths or the Dart convert libraries.
52

53
00:05:11,430 --> 00:05:18,110
Now I don't actually want everything that's inside the dart:io package to be available inside my price
53

54
00:05:18,110 --> 00:05:26,460
screen.dart. Because if we take a look at our Dart SDK and we actually go into the IO package, then
54

55
00:05:26,460 --> 00:05:28,710
you can see it's got a lot of Dart files right.
55

56
00:05:28,710 --> 00:05:34,980
It's got things such as how to handle reading from file or how to handle the directory or how to do
56

57
00:05:34,980 --> 00:05:41,300
various other io functionality. All that I want is actually this platform
57

58
00:05:41,310 --> 00:05:48,240
.dart file because it has these boolean properties that tell me whether if I'm running my app on iOS 
58

59
00:05:48,390 --> 00:05:54,650
on Android, on Windows, or Mac OS, whole bunch of things. And this is what I need.
59

60
00:05:54,720 --> 00:06:04,980
So instead of incorporating the entire io library, I'm going to say only show me the platform class. And
60

61
00:06:04,980 --> 00:06:08,630
that platform class of course lives inside our platform
61

62
00:06:08,640 --> 00:06:12,030
.dart file and it's right here,
62

63
00:06:12,030 --> 00:06:13,480
this platform class.
63

64
00:06:13,500 --> 00:06:15,750
That's where that capital P comes from.
64

65
00:06:15,870 --> 00:06:22,930
But say if I only wanted a different class say the ProcessInfo class, well I could also say that we'll
65

66
00:06:22,950 --> 00:06:33,090
only show me the process info class. So this way, we're able to narrow down in a library and only incorporate
66

67
00:06:33,210 --> 00:06:34,420
into our file
67

68
00:06:34,500 --> 00:06:37,910
the relevant part, which is just the platform class.
68

69
00:06:38,100 --> 00:06:42,160
Now there's another keyword that's quite helpful which is called hide.
69

70
00:06:42,420 --> 00:06:49,530
What this line is saying import everything that's inside dart:io, so everything inside here, all the classes
70

71
00:06:49,530 --> 00:06:55,830
I want to be able to use it in this file but hide this thing called platform. I don't want to see this
71

72
00:06:55,830 --> 00:06:57,240
platform class.
72

73
00:06:57,240 --> 00:07:05,190
So you're gonna be using show more than hide and you've also seen as which simply just renames this
73

74
00:07:05,190 --> 00:07:07,140
entire package to give it a name,
74

75
00:07:07,140 --> 00:07:14,610
for example when we did it for the http package. So we have a name for the http package which we can specify
75

76
00:07:14,670 --> 00:07:16,560
after that keyword as.
76

77
00:07:16,590 --> 00:07:19,440
So there's as, there's show and there's hide.
77

78
00:07:19,530 --> 00:07:26,310
So we're going to be using show to just expose the platform class from dart:io. And then down here in
78

79
00:07:26,310 --> 00:07:26,920
our code,
79

80
00:07:26,970 --> 00:07:36,870
we can literally use our IF and ELSE IF statement to check if the platform.isiOS. Well then we're
80

81
00:07:36,870 --> 00:07:45,900
going to return the iOS picker, but else if the platform is Android well then we're going to return the
81

82
00:07:45,900 --> 00:07:47,580
Android dropdown.
82

83
00:07:47,580 --> 00:07:54,940
So now inside here instead of choosing iOS picker or Android picker, well we can choose both.
83

84
00:07:54,990 --> 00:08:04,530
We can say get picker and now if I hit save, because I'm running this on a iOS, device I will get a picker
84

85
00:08:04,560 --> 00:08:06,100
shown in here.
85

86
00:08:06,210 --> 00:08:15,510
So if we have the same app, the same code running on both Android and iOS, you can see that it detects
86

87
00:08:15,690 --> 00:08:22,020
that this is on an Android emulator and this is on a iOS simulator and exactly the same thing happens
87

88
00:08:22,050 --> 00:08:23,770
on physical devices too.
88

89
00:08:23,850 --> 00:08:30,600
As long as the operating system is Android or iOS, then we will get the Android dropdown being rendered
89

90
00:08:30,600 --> 00:08:34,260
here while the iOS picker is being shown right here.
90

91
00:08:34,260 --> 00:08:41,170
Isn't that cool? Now we can make our code even easier without having the need for this
91

92
00:08:41,190 --> 00:08:50,250
get picker method. If we simply just go into here where the child property expects a value and we use
92

93
00:08:50,250 --> 00:08:51,940
that ternary operator
93

94
00:08:52,050 --> 00:08:57,050
we say if the platform.isiOS,
94

95
00:08:57,120 --> 00:09:03,930
well if that is true, well then we're going to render the iOS picker. But if that's not true,
95

96
00:09:03,960 --> 00:09:09,990
so for Android or Windows phone or wherever the app might be run on, we're going to render the Android
96

97
00:09:10,110 --> 00:09:12,360
dropdown instead.
97

98
00:09:12,420 --> 00:09:18,510
So in a single line of code, we've checked the platform and it's only pretty much the iOS platform that
98

99
00:09:18,510 --> 00:09:25,050
actually needs that unique sort of iOS style picker. And for everything else, we can just put a dropdown
99

100
00:09:25,050 --> 00:09:28,430
list into this container instead.
100

101
00:09:28,470 --> 00:09:35,850
So that's how you can check to see what platform your code is being run on and to respond to that check
101

102
00:09:35,940 --> 00:09:41,040
by providing a different user interface element depending on that platform.
