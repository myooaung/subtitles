WEBVTT
0
1
00:00:00.650 --> 00:00:01.070
All right.
1

2
00:00:01.110 --> 00:00:07.890
So now that we've pretty much completed all of the user interface, we're ready to add some functionality
2

3
00:00:07.890 --> 00:00:08.920
to our app.
3

4
00:00:09.210 --> 00:00:15.390
And you'll notice that currently there's one warning that we still have that we haven't gotten rid of.
4

5
00:00:15.570 --> 00:00:18.570
And it's related to our checkbox.
5

6
00:00:18.570 --> 00:00:26.490
And when we try to use it inside our simulator or our emulator, notice that absolutely nothing happens.
6

7
00:00:26.760 --> 00:00:29.690
It doesn't have any functionality yet.
7

8
00:00:29.970 --> 00:00:35.880
In order to understand how to make the checkbox work, we first have to understand a little bit more about
8

9
00:00:35.880 --> 00:00:37.310
state.
9

10
00:00:37.380 --> 00:00:40.260
So what exactly is state?
10

11
00:00:40.260 --> 00:00:49.350
Well you can think of it as the values of all the variables that together make up the user interface.
11

12
00:00:49.350 --> 00:00:56.760
So for example, in our Todoey app at the moment, we have a whole bunch of empty checkboxes. And those
12

13
00:00:56.760 --> 00:01:05.810
checkboxes have a property called value and that value determines what you see in the checkbox.
13

14
00:01:05.820 --> 00:01:09.560
So if it's equal to false, then we see an empty checkbox.
14

15
00:01:09.690 --> 00:01:14.490
But if it's equal to true then we'll see a checked checkbox.
15

16
00:01:14.490 --> 00:01:16.170
But this is very manual
16

17
00:01:16.200 --> 00:01:16.530
right?
17

18
00:01:16.860 --> 00:01:19.650
So how can we do this automatically?
18

19
00:01:19.650 --> 00:01:23.900
Well in that case we would need to have a variable which can change.
19

20
00:01:24.210 --> 00:01:31.500
Let's say we create a variable called isChecked and we set it to false by default, and then we set each
20

21
00:01:31.500 --> 00:01:39.990
of these checkboxes to use this variable as the state of the checkbox. If isChecked equals false, then
21

22
00:01:39.990 --> 00:01:48.060
all the checkboxes are empty. But when the user taps on one of the checkboxes and I change that variables
22

23
00:01:48.060 --> 00:01:57.180
value to true, then it should update the user interface and show us the latest version of our app based
23

24
00:01:57.270 --> 00:02:01.230
on that updated state of the checkbox.
24

25
00:02:01.230 --> 00:02:04.950
Now generally we tend to think of two types of state.
25

26
00:02:05.110 --> 00:02:12.450
There's local state, which is information that while useful is say for example the current page the user
26

27
00:02:12.450 --> 00:02:19.140
is on if you have an app that allows pagination but it's generally not information that we need elsewhere
27

28
00:02:19.140 --> 00:02:20.230
within the app.
28

29
00:02:20.280 --> 00:02:27.840
So it's not a piece of data or a variable that we would need to save its value to be used across the
29

30
00:02:27.840 --> 00:02:28.770
app.
30

31
00:02:28.800 --> 00:02:37.090
So in local state, it's pretty easy to use a set state to toggle the value of a variable.
31

32
00:02:37.110 --> 00:02:44.250
Say in this case the user tapped on one of the checkboxes and we use set state to change isChecked
32

33
00:02:44.340 --> 00:02:46.240
from false to true.
33

34
00:02:46.470 --> 00:02:53.430
Then as soon as that happens then our checkbox is redrawn and we get a little tick because the state
34

35
00:02:53.490 --> 00:02:56.010
of the checkbox has changed.
35

36
00:02:56.070 --> 00:02:58.150
We've set it to something new.
36

37
00:02:58.170 --> 00:03:02.810
Now we can toggle this by changing is checked back and forth.
37

38
00:03:02.940 --> 00:03:09.900
But in this case we're not going to be saving this value of isChecked for use anywhere else in the
38

39
00:03:09.900 --> 00:03:11.070
app.
39

40
00:03:11.100 --> 00:03:15.580
So currently our checkbox doesn't have a lot of code in it.
40

41
00:03:15.600 --> 00:03:20.030
It's a pretty simple checkbox but let's maybe add one property.
41

42
00:03:20.040 --> 00:03:27.210
Let's change the active color to light blue accent to be consistent with the rest of the app. And then let's
42

43
00:03:27.210 --> 00:03:32.190
go ahead and extract this checkbox as a separate widget.
43

44
00:03:32.190 --> 00:03:40.080
So I'm going to call this a TaskCheckbox to differentiate it from the bog standard checkbox and now
44

45
00:03:40.200 --> 00:03:46.830
that I've extracted it, I'm gonna go ahead and actually delete the constructor and I'm gonna convert
45

46
00:03:46.890 --> 00:03:55.560
from a stateless widget to a stateful widget because I am now going to use my set state inside this
46

47
00:03:55.560 --> 00:04:03.390
checkbox to be able to update its state. And its state is whether if the value of the checkbox should be
47

48
00:04:03.390 --> 00:04:11.910
false or whether if it should be true. And I want that value to be based on a user input.
48

49
00:04:11.910 --> 00:04:20.940
So in this case the checkbox has a property called onChanged and it will send the new value of the checkbox
49

50
00:04:21.300 --> 00:04:31.170
over into this callback and we can actually create, up here, a boolean variable which we'll call isChecked.
50

51
00:04:32.460 --> 00:04:40.890
And we can maybe, by default, actually set it to false and then down here when the user does in fact change
51

52
00:04:40.890 --> 00:04:48.840
the checkbox which means flipping it from false to true, then we're going to change the isChecked to
52

53
00:04:48.840 --> 00:04:50.910
equal that new value.
53

54
00:04:51.720 --> 00:04:59.800
So now we can change the state of the checkbox to use this variable isChecked.
54

55
00:04:59.860 --> 00:05:07.750
And then finally, we're going to add the set state that we know and love so that we can call the build
55

56
00:05:07.750 --> 00:05:15.870
method once we change this isChecked variable to the new value that the user selected. That way it'll
56

57
00:05:15.880 --> 00:05:23.290
build a brand new CheckBox using the latest value of the state of the checkbox.
57

58
00:05:23.290 --> 00:05:33.770
So now if I hit save, I'm able to check and uncheck each of my checkboxes separately. So that's pretty
58

59
00:05:33.770 --> 00:05:40.730
much local state because it's kept very much under wraps within the same stateful widget. It's very
59

60
00:05:40.730 --> 00:05:47.900
low down in the widget tree so that the rebuilds are not very costly and we're not moving the value
60

61
00:05:47.900 --> 00:05:54.030
of isChecked anywhere else. So what about global states?
61

62
00:05:54.210 --> 00:06:01.080
Well when you're managing global state, you're essentially keeping the values of some of your variables
62

63
00:06:01.590 --> 00:06:05.790
and you're using it across different parts of your app.
63

64
00:06:05.790 --> 00:06:10.680
For example, we can represent our app as a very simple widget tree.
64

65
00:06:10.710 --> 00:06:18.050
We have a list screen at the top which branches off into an avatar screen as well as a task list.
65

66
00:06:18.120 --> 00:06:26.040
The task list is populated with task tiles and each of the tiles have a checkbox and a piece of text
66

67
00:06:26.130 --> 00:06:28.810
which is the title of the task.
67

68
00:06:28.810 --> 00:06:36.270
Now if I only needed that information within the checkbox widget, then I can just use a stateful widget
68

69
00:06:36.330 --> 00:06:42.250
and use set state to rebuild my checkbox whenever the state changes.
69

70
00:06:42.510 --> 00:06:49.530
But if I needed the value of isChecked somewhere else within my app, say for example if I wanted to
70

71
00:06:49.830 --> 00:06:57.990
maybe put a strikethrough through the title of my task that got checked off, so that not only does my
71

72
00:06:57.990 --> 00:07:06.630
checkbox update its State but also the text widget updates its state using the value of the same variable,
72

73
00:07:06.840 --> 00:07:09.370
namely this isChecked variable.
73

74
00:07:09.540 --> 00:07:19.830
So how could I achieve this? Let's start out by moving this variable isChecked up a level into the task
74

75
00:07:19.830 --> 00:07:20.720
tile widget.
75

76
00:07:21.100 --> 00:07:29.410
So let's make some space over here and then I'm just going to drag it over to here. And now you'll see
76

77
00:07:29.410 --> 00:07:35.080
that the task tile widget is giving us a warning because this is currently a stateless widget.
77

78
00:07:35.440 --> 00:07:43.780
So let's convert it into a stateful widget so that we can actually have a property that actually varies.
78

79
00:07:43.780 --> 00:07:48.280
Now that we've actually moved this isChecked property up here,
79

80
00:07:48.280 --> 00:07:56.170
we're getting some errors down here in our checkbox. If we have a stateful widget that's managing what
80

81
00:07:56.170 --> 00:08:01.550
kind of checkbox to render as well as what kind of text widget to create,
81

82
00:08:01.570 --> 00:08:08.110
then we don't actually need this checkbox widget to be a stateful widget. We can actually convert it
82

83
00:08:08.110 --> 00:08:14.860
back into a stateless widget and keep it relatively simple.
83

84
00:08:14.860 --> 00:08:21.250
So now if I go ahead and add a boolean that is gonna be a final boolean
84

85
00:08:21.340 --> 00:08:30.940
so it's going to stay constant but every time we change the isChecked value here, then we're going to
85

86
00:08:30.940 --> 00:08:36.270
redraw and rebuild our checkbox using the value of this boolean.
86

87
00:08:36.760 --> 00:08:48.070
So I'm going to call this the checkboxState and I'm going to initialize my TaskCheckbox using this
87

88
00:08:48.220 --> 00:08:49.090
checkboxState .
88

89
00:08:51.820 --> 00:08:52.390
Cool.
89

90
00:08:52.400 --> 00:09:00.440
So now I can go ahead and replace all the places where I was previously using isChecked but I'm going
90

91
00:09:00.440 --> 00:09:09.260
to leave this set state part for now. Because we now have a stateless widget, we can't set the state of
91

92
00:09:09.260 --> 00:09:12.570
a stateless widget because it doesn't have a state.
92

93
00:09:12.650 --> 00:09:20.180
So we're going to sort that out just in a moment but for now, we're simply turning this TaskCheckbox
93

94
00:09:20.330 --> 00:09:28.940
into a dumber widget and all it needs to do is to rebuild itself using the value of checkboxState that
94

95
00:09:28.940 --> 00:09:37.260
gets passed in when it's initialized. So if you remember the difference between a stateful and a state
95

96
00:09:37.290 --> 00:09:40.470
less widget is kind of like this.
96

97
00:09:40.500 --> 00:09:48.390
So a stateful widget you can think of as something that can change and it can vary its state depending
97

98
00:09:48.390 --> 00:09:50.450
on the value of those variables.
98

99
00:09:50.460 --> 00:09:56.040
So recently I've been coming across a lot of really addictive gifs where there's all sorts of tables
99

100
00:09:56.040 --> 00:10:02.380
that seem to collapse and expand and they do it in various crazy different ways.
100

101
00:10:02.610 --> 00:10:06.840
And we can think of that as a stateful table right?
101

102
00:10:06.840 --> 00:10:13.950
It can change and it can update and we can change it at a moment's notice depending on what we want.
102

103
00:10:14.520 --> 00:10:18.760
But a stateless widget is kind of just like a normal table.
103

104
00:10:18.870 --> 00:10:24.840
And the difference between them is that this table cost something like $2,000 whereas
104

105
00:10:24.840 --> 00:10:27.050
this table cost $200.
105

106
00:10:27.240 --> 00:10:32.390
And the reason is because this stateful table needs a lot more material,
106

107
00:10:32.400 --> 00:10:38.200
it's a lot more expensive to produce and it takes a lot of effort to build it.
107

108
00:10:38.220 --> 00:10:41.880
So that's the same with our widgets.
108

109
00:10:41.940 --> 00:10:49.680
So more precisely, it's actually not the stateful widget that's changing but it's actually the state object
109

110
00:10:49.770 --> 00:10:55.920
that is changing. Wen we have our object as a stateless widget,
110

111
00:10:56.030 --> 00:10:57.900
it just stays as it is
111

112
00:10:57.980 --> 00:11:03.460
and when we need to change it, we simply just get rid of this one and build a new one.
112

113
00:11:03.560 --> 00:11:10.610
But when we have a state object, then it has state and that state can change.
113

114
00:11:10.610 --> 00:11:16.850
So that means the variables inside the state are usually not marked as final because we change them
114

115
00:11:17.150 --> 00:11:18.880
to update the user interface.
115

116
00:11:19.760 --> 00:11:25.970
And once we're done changing the properties of the state object, then we make a copy of it and that is
116

117
00:11:26.060 --> 00:11:34.330
our stateful widget. So you can see over here that we have our stateful widget class which has very
117

118
00:11:34.330 --> 00:11:42.580
little code in it other than to create the stateful widget from the state. And down here we have our
118

119
00:11:42.670 --> 00:11:45.970
actual state object, the TaskTileState.
119

120
00:11:46.060 --> 00:11:51.610
And this is where we have our variables that can change its value which is why it's not marked with
120

121
00:11:51.610 --> 00:11:52.660
the final.
121

122
00:11:52.660 --> 00:12:00.400
And we use the changes to update our user interface in the build method whereas in a stateless widget
122

123
00:12:00.850 --> 00:12:03.520
all the properties need to be final.
123

124
00:12:03.520 --> 00:12:11.260
We can't change any of these properties but if we do need to update this, then we'll initialize a brand
124

125
00:12:11.260 --> 00:12:16.870
new version of this TaskCheckbox and we'll throw away the last one.
125

126
00:12:19.710 --> 00:12:26.690
Now notice how our TaskCheckbox initializer is requiring a single argument,
126

127
00:12:26.790 --> 00:12:34.050
and that's the state. So we can go in here and we can pass in that isChecked value.
127

128
00:12:34.050 --> 00:12:36.470
It could be true or it could be false
128

129
00:12:36.510 --> 00:12:45.590
and that gets passed in to our checkbox to be able to display a tick or an empty box. So now that we've
129

130
00:12:45.650 --> 00:12:51.800
lifted the state up to the parent of the TaskCheckbox,
130

131
00:12:51.800 --> 00:12:58.970
well we can now access this property both inside our text widget as well as passing it over to our task
131

132
00:12:59.060 --> 00:13:00.230
checkbox.
132

133
00:13:00.260 --> 00:13:07.580
So that means that we can do things like adding a text style to our text widget and the one that I want
133

134
00:13:07.580 --> 00:13:09.790
to add is the decoration.
134

135
00:13:10.010 --> 00:13:18.650
I want to be able to cross out my text when my task is checked off, so the decoration I'm gonna use is
135

136
00:13:18.710 --> 00:13:22.720
a TextDecoration.lineThrough.
136

137
00:13:22.730 --> 00:13:29.150
And if I rerun my app right now, remember every time you switch a stateful widget into a stateless
137

138
00:13:29.300 --> 00:13:35.020
or vice versa, you'll need to actually rerun it from start. Hot  reload is not gonna be enough.
138

139
00:13:35.030 --> 00:13:42.530
Now you can see that I've got all three text widgets with a line through it but this is obviously not
139

140
00:13:42.530 --> 00:13:45.140
how I want my task app to be.
140

141
00:13:45.410 --> 00:13:51.140
I want the decoration to be dependent upon the value of this property,
141

142
00:13:51.140 --> 00:13:52.960
that's why we need it over here.
142

143
00:13:53.240 --> 00:14:00.380
So instead of simply just adding my decoration in here, I'm going to check it to see whether if isChecked
143

144
00:14:00.500 --> 00:14:05.840
is true and if so, then I'm going to add that line through decoration.
144

145
00:14:05.840 --> 00:14:11.870
But if it's not true, then I'm going to set the decoration as null or no decoration.
145

146
00:14:11.870 --> 00:14:13.340
So now if I hit save.
146

147
00:14:13.670 --> 00:14:22.130
But if I change that property to say true, then all the tasks will be crossed out as well as all the
147

148
00:14:22.170 --> 00:14:24.240
checkboxes ticked.
148

149
00:14:24.260 --> 00:14:32.240
So this property now has been lifted up and the state is now being used in all of the downstream widgets,
149

150
00:14:32.270 --> 00:14:35.210
the text and the task checkbox.
150

151
00:14:35.300 --> 00:14:37.630
So that's all very well and good.
151

152
00:14:37.640 --> 00:14:40.070
Let's just quickly restore that to false.
152

153
00:14:40.190 --> 00:14:48.950
But the problem is that how do we get this user interaction back up to the parent widget? Because we've
153

154
00:14:48.950 --> 00:14:56.870
lifted the state up which means we now have this stateless task checkbox which can't change and therefore
154

155
00:14:56.870 --> 00:14:59.560
it can't set its own state.
155

156
00:15:00.140 --> 00:15:09.050
So how do we get the user interaction back up into the task tiles state? Because I still want these checkboxes
156

157
00:15:09.050 --> 00:15:09.960
to work right?
157

158
00:15:10.460 --> 00:15:13.700
But at the moment nothing is changing.
158

159
00:15:13.700 --> 00:15:21.700
So one of the ways that we can bring this data back up to the parent is through the use of a callback.
159

160
00:15:21.860 --> 00:15:28.880
And we've been using callbacks pretty much left, right and center and in fact every single time we have
160

161
00:15:28.940 --> 00:15:36.680
some sort of user interaction say the onChanged property of the checkbox or the onTap of a button
161

162
00:15:37.010 --> 00:15:45.710
then we always put in a callback in there to wait for the user interaction and then trigger that function
162

163
00:15:45.890 --> 00:15:50.420
only once the user has performed that particular action,
163

164
00:15:50.420 --> 00:15:52.910
say changed the checkbox.
164

165
00:15:53.210 --> 00:16:01.060
So if we want to create a callback, we can simply take all of the code that is in this onChanged property
165

166
00:16:01.760 --> 00:16:06.470
and we can go ahead and bring it up to our task tile state.
166

167
00:16:06.470 --> 00:16:14.680
So I'm going to create a new function called toggle checkbox which is going to be called checkboxCallback.
167

168
00:16:15.110 --> 00:16:21.140
And I'm simply going to paste in what I copied over just now and I'm going to uncomment the parts which
168

169
00:16:21.140 --> 00:16:22.990
are still commented.
169

170
00:16:23.030 --> 00:16:31.160
And now that I've got my checkboxCallback which is to be more precise actually takes a boolean data
170

171
00:16:31.160 --> 00:16:37.880
type and we've called it new value down here because it was the new value of the checkbox but maybe
171

172
00:16:37.880 --> 00:16:44.990
to make it easier to understand, we can call it the checkbox states or the current checkbox states because
172

173
00:16:45.260 --> 00:16:47.090
that's essentially what it's going to be.
173

174
00:16:47.090 --> 00:16:55.310
It's going to be triggered over here in the onChanged and when the checkbox gets changed, then it will
174

175
00:16:55.370 --> 00:17:03.770
call this callback and it's going to pass in the new checkboxState and then we're going to use that
175

176
00:17:03.770 --> 00:17:07.670
value to update our boolean isChecked.
176

177
00:17:07.700 --> 00:17:15.230
So now that I've created my checkboxCallback, I now have to use it and I'm going to use it by passing
177

178
00:17:15.230 --> 00:17:19.750
it over to my TaskCheckbox when I create it.
178

179
00:17:19.760 --> 00:17:27.370
So I'm going to add a final property which is gonna be of type function and let's call it toggleCheck
179

180
00:17:27.370 --> 00:17:36.260
boxState. And then I'm going to add it inside the constructor for the TaskCheckbox so I can pass in
180

181
00:17:36.590 --> 00:17:45.030
a function when I construct a new task checkbox and that gets saved inside here and I can now use it in the
181

182
00:17:45.030 --> 00:17:45.970
onChanged.
182

183
00:17:45.990 --> 00:17:50.280
So I'm going to pass that function right here in the onChanged.
183

184
00:17:50.310 --> 00:17:56.600
So now we got a little red squiggly line here because it requires two arguments
184

185
00:17:56.790 --> 00:18:03.060
and the second argument is a function which is going to be used as the callback here when the checkbox
185

186
00:18:03.090 --> 00:18:04.240
gets changed.
186

187
00:18:04.320 --> 00:18:14.700
So the name of our function is checkboxCallback and if I hit save, you'll see my errors do go away.
187

188
00:18:14.760 --> 00:18:23.190
Now if you want this TaskCheckbox constructor to have some named parameters to make it a little bit
188

189
00:18:23.280 --> 00:18:27.240
less error prone or easier to understand what's going on,
189

190
00:18:27.240 --> 00:18:30.080
well then we can simply go ahead and add it here.
190

191
00:18:30.480 --> 00:18:40.360
So we've got our checkboxState and also our toggleCheckboxState. All right.
191

192
00:18:40.390 --> 00:18:50.260
So now we have our TaskCheckbox being created in the trailing part of our ListTile and we're passing
192

193
00:18:50.260 --> 00:18:52.440
over the current value of the
193

194
00:18:52.440 --> 00:19:00.720
isChecked property via this checkbox state property. And then we're also passing over our callback, our
194

195
00:19:00.730 --> 00:19:10.120
checkbox callback. And that checkbox callback gets triggered when the checkbox changes when it will pass
195

196
00:19:10.150 --> 00:19:18.740
over an input into this callback namely the latest state of the checkbox and then we're gonna use that to
196

197
00:19:18.780 --> 00:19:19.300
update
197

198
00:19:19.300 --> 00:19:21.210
the state of our property.
198

199
00:19:21.430 --> 00:19:28.660
And so that means anywhere where that property is used namely in the text widget as well as in the task
199

200
00:19:28.750 --> 00:19:34.330
checkbox widget, then both of these widgets are going to be rebuilt and we're going to see it update.
200

201
00:19:34.660 --> 00:19:38.050
So let me go ahead and run my app as it is.
201

202
00:19:38.200 --> 00:19:46.870
And now when I click check, notice how both my text widget as well as my checkbox now update their stae.
202

203
00:19:47.530 --> 00:19:53.710
And it is all down to our checkbox callback here. Now
203

204
00:19:53.720 --> 00:20:01.640
notice how in this case we're actually creating a named function. But normally when we use callbacks,
204

205
00:20:01.850 --> 00:20:04.430
we're actually using them anonymously
205

206
00:20:04.430 --> 00:20:08.020
so without the name and without the return type.
206

207
00:20:08.240 --> 00:20:10.550
So we can do that here as well.
207

208
00:20:10.550 --> 00:20:19.010
So if I take all of the rest of my callback and I just cut it and I replace it over here, then I can
208

209
00:20:19.010 --> 00:20:20.990
delete all of that.
209

210
00:20:20.990 --> 00:20:30.260
And now I have my callback which is being sent over to my TaskCheckbox right over here and used inside
210

211
00:20:30.380 --> 00:20:36.350
the onChanged property. So we're now pretty certain that it works.
211

212
00:20:36.430 --> 00:20:44.500
But if you want a refresher or just a little bit more in depth on how callbacks actually work in Dart,
212

213
00:20:44.950 --> 00:20:48.180
then in the next lesson we're going to do a deep dive on that.
213

214
00:20:48.550 --> 00:20:54.370
But if you're pretty comfortable with how the code is working so far then you can go ahead and skip
214

215
00:20:54.370 --> 00:20:57.370
the next lesson and continue building out
215

216
00:20:57.430 --> 00:21:00.820
our Todoey app. So for all that and more,
216

217
00:21:00.820 --> 00:21:01.900
I'll see on the next lesson.
