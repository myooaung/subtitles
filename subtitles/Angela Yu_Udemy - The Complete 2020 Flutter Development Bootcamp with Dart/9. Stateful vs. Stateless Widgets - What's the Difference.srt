0
1
00:00:00,420 --> 00:00:08,160
Now so far, we have a flap button on the left that encloses a dice image. And we've got a flap button
1

2
00:00:08,220 --> 00:00:16,230
on the right that encloses a dice image. And we click on the left dice, we get 'Left button got pressed'
2

3
00:00:16,310 --> 00:00:22,290
we click on the right dice, we get 'Right button got pressed' because our onPressed listener is being
3

4
00:00:22,290 --> 00:00:29,490
triggered so a button is constantly listening to see if somebody will click on it or in an app, namely
4

5
00:00:29,490 --> 00:00:37,980
tap on it. And when it happens, it will do whatever we tell it to do inside the onPressed listener, or
5

6
00:00:38,040 --> 00:00:40,180
inside these curly braces.
6

7
00:00:40,230 --> 00:00:41,440
So far so good.
7

8
00:00:41,550 --> 00:00:48,930
Now the next problem though is that we need to link that action of clicking on a button to the image
8

9
00:00:49,080 --> 00:00:56,460
actually changing. And we got some other way there by updating our image. Instead of getting the image
9

10
00:00:56,460 --> 00:00:59,590
file name just based on whatever we typed,
10

11
00:00:59,640 --> 00:01:05,940
we're now getting the image file name from a variable called leftDiceNumber. And that's for the left
11

12
00:01:06,000 --> 00:01:07,300
dice here.
12

13
00:01:07,320 --> 00:01:14,550
Now we've created a variable and based on what we learned in the last lesson about Dart variables, we
13

14
00:01:14,550 --> 00:01:20,280
now know that we probably want to change that to the specific data type that we're going to be storing
14

15
00:01:20,370 --> 00:01:21,750
in that variable.
15

16
00:01:21,750 --> 00:01:28,110
And in this case, if it's going to be the dice numbers from 1 to 6, then it's probably best to store it
16

17
00:01:28,320 --> 00:01:30,210
as an integer data type.
17

18
00:01:30,930 --> 00:01:37,710
So now this line creates a new variable called leftDiceNumber which can only store integer data types.
18

19
00:01:38,070 --> 00:01:40,520
And we're currently setting it to five.
19

20
00:01:41,160 --> 00:01:49,770
Now this line of code creates our variable, and we probably don't want to create it every time our dice
20

21
00:01:49,770 --> 00:01:51,660
page gets rebuilt.
21

22
00:01:51,660 --> 00:01:58,560
So we probably want to move it out of this build method here. And we probably only want to create it
22

23
00:01:58,650 --> 00:02:05,820
once, the first time when our dice page gets created and every subsequent time, say when somebody taps
23

24
00:02:05,820 --> 00:02:12,690
on a button or when we hot reload, we can update the leftDiceNumber instead.
24

25
00:02:12,690 --> 00:02:19,990
So if we wanted it to update here, we can simply write leftDiceNumber now = 2.
25

26
00:02:20,160 --> 00:02:26,650
And now when I hit save and hot reload happens, this side will change to 2.
26

27
00:02:26,670 --> 00:02:32,820
So we're separating out the part where we create the variable, and parts when we need to change the variable.
27

28
00:02:32,820 --> 00:02:42,120
Now notice that as soon as I've placed my leftDiceNumber into my stateless widget, I have a warning
28

29
00:02:42,120 --> 00:02:50,940
here, and it tells me that this class inherits from a class marked as immutable, and therefore should be
29

30
00:02:51,210 --> 00:02:52,500
immutable.
30

31
00:02:52,500 --> 00:02:55,080
Now what does all of that mean in English?
31

32
00:02:55,410 --> 00:03:03,390
Well, here in order to create this dice page with the center and the row and the buttons and the images,
32

33
00:03:03,900 --> 00:03:07,130
we've used a stateless widget to do that.
33

34
00:03:07,350 --> 00:03:11,880
And so far all that we've been using are stateless widgets.
34

35
00:03:11,880 --> 00:03:18,030
So as you can imagine, if there are stateless widgets there's probably stateful widgets.
35

36
00:03:18,030 --> 00:03:24,930
And the difference between the two is that the state of the stateless widgets are not really meant to
36

37
00:03:24,930 --> 00:03:26,030
change.
37

38
00:03:26,040 --> 00:03:32,460
So if you create a row, it's always going to be a row. If you create a center, it's always going to have
38

39
00:03:32,460 --> 00:03:34,100
something in the center.
39

40
00:03:34,290 --> 00:03:43,260
If you create an image which you'd need to change and update, it's best to create that inside a stateful
40

41
00:03:43,260 --> 00:03:44,760
widget.
41

42
00:03:44,760 --> 00:03:50,350
Now what exactly is this thing that we keep referring to, the state of the app?
42

43
00:03:51,060 --> 00:03:57,000
Well thinking back to when I was growing up, my mom always told me that my room was in such a state. And
43

44
00:03:57,510 --> 00:04:05,630
it might be a helpful analogy to show you the state basically just refers to the way that things are.
44

45
00:04:05,670 --> 00:04:14,220
So let's say if this is our room, and we decide to move our plant pot from the coffee table to this footstool,
45

46
00:04:14,790 --> 00:04:17,820
then we've changed the state of the room.
46

47
00:04:17,820 --> 00:04:22,410
The room is no longer the same way as it used to be.
47

48
00:04:22,500 --> 00:04:24,680
And this is what we're trying to do to our app.
48

49
00:04:24,690 --> 00:04:32,700
We're trying to change the image that's being displayed. And to do that, we need to update the state.
49

50
00:04:32,700 --> 00:04:39,570
Now there are certain places where you might not want to ever change the state. If your app is always
50

51
00:04:39,570 --> 00:04:47,580
going to have a top app bar, then the state of that app bar is not going to change. And to continue our
51

52
00:04:47,580 --> 00:04:54,630
analogy of room states, there are certain places where the state of the room or the layout of the room is
52

53
00:04:54,630 --> 00:04:56,520
not really meant to change.
53

54
00:04:56,520 --> 00:05:02,490
For example a museum where everything is kind of meant to stay exactly where they're placed,
54

55
00:05:02,490 --> 00:05:05,790
you're only meant to look at things and not touch anything.
55

56
00:05:05,790 --> 00:05:09,900
And the state of the room is meant to stay consistent.
56

57
00:05:09,900 --> 00:05:19,680
The point being, if you are creating a user interface where the state of the widget isn't going to change,
57

58
00:05:20,070 --> 00:05:23,070
then you would use a stateless widget.
58

59
00:05:23,640 --> 00:05:30,330
But if you're creating something which is going to change especially when it's dependent on user interaction,
59

60
00:05:30,640 --> 00:05:37,680
so a user taps on a button something changes or a user pulls in some data from the Internet, something
60

61
00:05:37,680 --> 00:05:45,840
on the screen updates. Then you're going to need to use a stateful widget. So let's go ahead and collapse
61

62
00:05:45,900 --> 00:05:51,540
our stateless widget and instead, let's create a stateful widget.
62

63
00:05:51,540 --> 00:05:58,920
And as you can imagine, along with stateless, there's also a shortcut for creating a new stateful widget.
63

64
00:05:59,010 --> 00:06:06,460
So the shortcut is stful, stateful. And if you had enter, it create the stateful widget for you.
64

65
00:06:06,660 --> 00:06:13,170
And there's two parts to a stateful widget. There's the widget part, which is very similar to what we
65

66
00:06:13,170 --> 00:06:14,070
had before.
66

67
00:06:14,490 --> 00:06:21,910
But there's also a state part, which will track and update the screen as the state changes.
67

68
00:06:21,930 --> 00:06:28,020
Now when you first create the state for a widget using the shortcut, you can see that my cursor here is
68

69
00:06:28,020 --> 00:06:29,470
flashing red.
69

70
00:06:29,520 --> 00:06:36,180
And what this is telling me is that it'll insert whatever I type here into all of the places that needs
70

71
00:06:36,180 --> 00:06:37,490
to have it.
71

72
00:06:37,590 --> 00:06:43,530
So I'm going to call my stateful widget the same name as what I called my stateless widget.
72

73
00:06:43,530 --> 00:06:49,830
I'm going to call it dice page. Because I want my stateful widget to actually replace the stateless
73

74
00:06:49,830 --> 00:06:56,910
widget. And I'm going to expand this, and I'm going to copy everything that's inside our stateless
74

75
00:06:56,910 --> 00:06:57,380
widget.
75

76
00:06:57,390 --> 00:07:02,970
So from beginning to end, everything that's inside these curly braces basically.
76

77
00:07:02,970 --> 00:07:07,540
So starting from here all the way going up to our left dice number.
77

78
00:07:07,770 --> 00:07:13,380
And once I cut it out of the page, all that remains is the shell of our stateless widget.
78

79
00:07:13,950 --> 00:07:17,280
And I'm gonna paste that into our brand new dice state.
79

80
00:07:17,910 --> 00:07:22,520
And first, I'm going to delete the parts that I already have, which is our build method.
80

81
00:07:22,800 --> 00:07:28,860
And I'm going to paste in what we used to have from our stateless widget and now I can delete this
81

82
00:07:28,860 --> 00:07:30,290
widget.
82

83
00:07:30,450 --> 00:07:36,390
So as you can see, we've basically just transplanted all of the code that we used to have in our stateless
83

84
00:07:36,390 --> 00:07:41,070
widget, into our new dice page state.
84

85
00:07:41,130 --> 00:07:47,580
Now, we've got our left dice number. And you can see, this no longer triggers any sort of a warning.
85

86
00:07:47,700 --> 00:07:53,340
There's no curly underlined warning us about something being immutable because the whole point of this
86

87
00:07:53,430 --> 00:07:58,620
state is that it can change. It is mutable.
87

88
00:07:58,620 --> 00:08:08,100
So here, we create our left dice number and let's go ahead and change our starting dice face to be one.
88

89
00:08:08,430 --> 00:08:12,960
So that when our app starts, we actually see the first dice on the left.
89

90
00:08:12,960 --> 00:08:18,720
Now remember that when you've changed up and switched a stateless into a stateful widget, you can't
90

91
00:08:18,720 --> 00:08:20,390
just use hot reload.
91

92
00:08:20,430 --> 00:08:26,180
You actually have to use hot restart, by clicking it here or here.
92

93
00:08:26,180 --> 00:08:27,210
It will do the same thing.
93

94
00:08:27,900 --> 00:08:32,300
So now we've got the first dice showing up on the left.
94

95
00:08:32,430 --> 00:08:37,200
We can start to change the state of our left dice number.
95

96
00:08:37,650 --> 00:08:46,230
So instead of printing 'Left button got pressed', I'm going to set the leftDiceNumber to equal a new
96

97
00:08:46,230 --> 00:08:54,000
value. Let's make it equal to five let's say. When the flat button gets pressed, the press is detected, and
97

98
00:08:54,000 --> 00:08:57,340
then we update the left dice number to five.
98

99
00:08:57,360 --> 00:09:00,770
And this should automatically update.
99

100
00:09:00,810 --> 00:09:08,470
Now there's just one last thing we need to do. In addition to updating the left dice number,
100

101
00:09:08,490 --> 00:09:16,680
we actually need to specifically specify that we're updating the state by calling a method called set
101

102
00:09:16,770 --> 00:09:25,740
state. And inside set state is where we need theleftDiceNumber or the thing that will change something
102

103
00:09:25,740 --> 00:09:26,850
that's being displayed.
103

104
00:09:27,750 --> 00:09:37,890
And this is because when our leftDiceNumber updates, we want to call build again, so that it'll build
104

105
00:09:38,310 --> 00:09:47,250
our user interface and look to see where that change has affected. Namely this line right here, and rebuild
105

106
00:09:47,250 --> 00:09:50,040
it and redraw it onto the screen.
106

107
00:09:50,040 --> 00:09:57,570
So if I go ahead and hit save right now, you can see that when I click on this button, that image updates
107

108
00:09:57,690 --> 00:09:59,750
to the fifth dice.
108

109
00:10:00,000 --> 00:10:07,620
But if I didn't mark this particular variable as having the potential to change our user interface, then
109

110
00:10:07,830 --> 00:10:16,380
even though the left dice number, the variable, will update. So let's print diceNumber =, and then
110

111
00:10:16,380 --> 00:10:27,120
we'll use our string interpolation to put our leftDiceNumber in here. And let's change that from five
111

112
00:10:27,120 --> 00:10:28,680
to three this time.
112

113
00:10:28,680 --> 00:10:33,900
So let me hit save. And I'll show you the console.
113

114
00:10:33,930 --> 00:10:41,280
Now when I click on the button here, my flat button is going to be triggered. My onPressed is going to
114

115
00:10:41,280 --> 00:10:49,930
be called, and my leftDiceNumber gets set from what it currently is which is five, to three. But this image
115

116
00:10:49,930 --> 00:10:57,850
won't update because I haven't called set state. But we can see that the variable has updated because
116

117
00:10:57,850 --> 00:11:01,300
we can see it in the console.
117

118
00:11:01,300 --> 00:11:10,450
Now if I go ahead and click on hot reload to call our build function again so that it looks to see what
118

119
00:11:10,450 --> 00:11:17,970
has updated in here since the last time it was run, then it will update that image to 3.
119

120
00:11:18,130 --> 00:11:29,560
So when we have the set state method being called, it will basically trigger a rebuild. So it will look
120

121
00:11:29,650 --> 00:11:35,890
within these curly braces of the build method and see what has changed.
121

122
00:11:35,890 --> 00:11:42,730
Well the only thing that has changed is our images should no longer be displaying the previous dice
122

123
00:11:42,760 --> 00:11:44,250
based on the previous leftDice
123

124
00:11:44,250 --> 00:11:45,120
Number.
124

125
00:11:45,220 --> 00:11:47,440
And now it should update.
125

126
00:11:47,470 --> 00:11:53,080
So when we call set state and we update a value, it will see where it needs the updates and it will
126

127
00:11:53,080 --> 00:11:54,900
do so accordingly.
127

128
00:11:55,210 --> 00:12:02,030
Now and we change that to a six and we save. As soon as I click the button,
128

129
00:12:02,300 --> 00:12:04,760
our dice updates.
129

130
00:12:04,760 --> 00:12:07,880
Now it all seems a little bit mysterious how that works.
130

131
00:12:08,270 --> 00:12:11,540
So I want to quickly explain it using four puppies.
131

132
00:12:11,870 --> 00:12:13,790
So here we have four puppies.
132

133
00:12:13,790 --> 00:12:16,970
One of them, as you can see, went outside and got really dirty
133

134
00:12:17,000 --> 00:12:26,610
so it's a dirty puppy. And what the set state does is that it will mark certain things as dirty.
134

135
00:12:26,990 --> 00:12:35,570
So in the case of our code, when we call set state and we update our leftDiceNumber, it will mark all
135

136
00:12:35,570 --> 00:12:40,250
of the places where it's being used as dirty.
136

137
00:12:40,250 --> 00:12:48,020
And that means that when we call build again and everything inside here gets re-evaluated, it'll find
137

138
00:12:48,050 --> 00:12:55,220
the things that are marked dirty, and it will redraw it namely pull out the second dice.
138

139
00:12:55,940 --> 00:13:03,710
So if this was our current app structure, then as soon as I click on the flat button, it tells the app
139

140
00:13:03,740 --> 00:13:10,670
that the left dice number got changed. And that means that everywhere that that leftDiceNumber is used
140

141
00:13:11,180 --> 00:13:21,950
needs to be updated. And it marks it as dirty and then it redraws the entire screen and updates the dice
141

142
00:13:22,040 --> 00:13:23,910
to the new value.
142

143
00:13:24,050 --> 00:13:32,120
Be it dice2.png or dice5.png, whatever we set the leftDiceNumber to. So the important
143

144
00:13:32,120 --> 00:13:38,210
concepts here to grasp is that when we want to update something onscreen, we will give it something
144

145
00:13:38,210 --> 00:13:46,910
that can change, namely a variable, right? Something that can vary. And then will change the variable inside
145

146
00:13:47,000 --> 00:13:53,080
a set state triggered by some sort of user action. In this case,
146

147
00:13:53,130 --> 00:13:58,910
when I click on the button, I want to update the leftDiceNumber to two.
147

148
00:13:59,010 --> 00:14:08,220
Then I call set state which looks inside the entire curly braces of my build method to see where is
148

149
00:14:08,220 --> 00:14:09,210
that used.
149

150
00:14:09,210 --> 00:14:11,210
And it finds this line right here.
150

151
00:14:11,400 --> 00:14:15,770
So it sees that the image depends on this left dice number.
151

152
00:14:15,810 --> 00:14:22,170
So this gets marked as dirty, and it needs to be cleaned or it needs to be updated
152

153
00:14:22,170 --> 00:14:27,090
in this case. Then it redraws this entire image.
153

154
00:14:27,090 --> 00:14:33,450
So the effect is I click on this and the image updates, almost instantaneously.
154

155
00:14:33,450 --> 00:14:40,050
Now all we have to do is figure out how we can stop manually setting the leftDiceNumber, and actually
155

156
00:14:40,050 --> 00:14:45,490
get the computer to generate a random one for us. In the next lesson,
156

157
00:14:45,570 --> 00:14:53,190
we're going to learn how we can use the Dart math library to update our leftDiceNumber by generating
157

158
00:14:53,340 --> 00:14:56,870
a random number. For all of that and more,
158

159
00:14:56,970 --> 00:14:58,080
I'll see you on the next lesson.
