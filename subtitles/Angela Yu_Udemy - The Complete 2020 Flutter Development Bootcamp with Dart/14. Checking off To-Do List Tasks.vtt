WEBVTT
0
1
00:00:00.690 --> 00:00:01.000
All right.
1

2
00:00:01.060 --> 00:00:06.110
So now that we can read tasks, we can add tasks.
2

3
00:00:06.120 --> 00:00:09.690
Now it's time to figure out how we can check off a task.
3

4
00:00:09.810 --> 00:00:13.690
Now the actual checking off happens in the task title.
4

5
00:00:13.770 --> 00:00:21.890
And we need that to be reflected inside our task provider to check off the correct task.
5

6
00:00:22.020 --> 00:00:25.750
And then we need it to be reflected on the task list.
6

7
00:00:25.800 --> 00:00:29.530
So the task list is going to be the one listing for that change.
7

8
00:00:29.550 --> 00:00:36.690
Now there's a little bit more to it than just that because in this case we want to keep the task tile
8

9
00:00:36.780 --> 00:00:38.280
relatively simple.
9

10
00:00:38.280 --> 00:00:44.190
So what we want to keep it as a stateless widget and we don't want it to know about all these things
10

11
00:00:44.190 --> 00:00:47.920
like the data provider or the provider package.
11

12
00:00:47.970 --> 00:00:54.450
What if we could just have it as a sort of dumb widget which just gets information from the task list
12

13
00:00:54.750 --> 00:00:57.860
and renders a task tile as and when needed?
13

14
00:00:57.870 --> 00:01:03.810
So how can we get that checking off behavior while keeping the task tile
14

15
00:01:03.810 --> 00:01:09.610
a very simple widget without it being involved with the provider?
15

16
00:01:09.790 --> 00:01:14.980
So firstly notice how currently our task tile is a stateless widget.
16

17
00:01:15.160 --> 00:01:24.760
It gets passed a isChecked boolean, a task tile string, a callback to notify the parent when the checkbox
17

18
00:01:24.790 --> 00:01:30.940
gets changed. And then inside the parent which is the tasks_list.dart
18

19
00:01:31.300 --> 00:01:41.790
well here we used to have a set state which exists inside the checkbox callback to update our tasks.
19

20
00:01:41.800 --> 00:01:47.470
Now in this case we don't really have set state anymore because we're no longer inside a stateful
20

21
00:01:47.470 --> 00:01:47.940
widget.
21

22
00:01:48.340 --> 00:01:55.900
So how can we keep this task list being the place where we update the state because we already have
22

23
00:01:55.900 --> 00:01:58.090
access to our consumer widget
23

24
00:01:58.090 --> 00:02:07.720
so we already can modify our task data object and how can we keep it all limited here keeping this widget
24

25
00:02:07.960 --> 00:02:15.280
being the complex clever sort of conductor and keeping our task tile simple and just implementing the
25

26
00:02:15.280 --> 00:02:17.120
things that it gets told to do?
26

27
00:02:17.290 --> 00:02:23.680
So similar to a large company, you might have a middle manager which is in this case the task list then
27

28
00:02:23.680 --> 00:02:30.130
you might have an employee which just does what the middle manager tells it to do without it needing
28

29
00:02:30.160 --> 00:02:33.830
to decide and be aware of the bigger picture.
29

30
00:02:34.120 --> 00:02:36.650
So keep its job quite simple.
30

31
00:02:36.700 --> 00:02:43.460
So how could we achieve that using what we know about provider? Well the first thing we're going to do
31

32
00:02:43.550 --> 00:02:51.170
is we're going to delete this set state inside our checkbox callback. And instead we're going to do that
32

33
00:02:51.170 --> 00:02:54.120
inside our provided task data.
33

34
00:02:54.620 --> 00:03:01.140
So inside here, we're going to create a new method. We'll call that updateTask.
34

35
00:03:01.400 --> 00:03:07.490
And in this method we're going to pass over the task that needs the updating.
35

36
00:03:07.490 --> 00:03:12.750
And when we get hold of it we're going to call task.toggle
Done.
36

37
00:03:12.980 --> 00:03:16.280
And that if you remember comes from our task.dart
37

38
00:03:16.550 --> 00:03:23.900
so when we defined how a particular task should behave we created a property called isDone which can
38

39
00:03:23.900 --> 00:03:26.130
be switched to the opposite of itself
39

40
00:03:26.150 --> 00:03:31.200
using that toggleDone method. And that's what we're using right here.
40

41
00:03:31.280 --> 00:03:38.240
But once we're done toggling the task property isDone, then we're going to call that really important
41

42
00:03:38.240 --> 00:03:38.950
method
42

43
00:03:38.990 --> 00:03:45.510
notifyListeners to update the widgets that are listening to that particular task
43

44
00:03:45.530 --> 00:03:53.450
state so that they rebuild and reflect the current doneness or the checkedoffness of that task.
44

45
00:03:53.450 --> 00:03:59.660
Now all we have to do is to use it. As I said we're going to keep our task tiles simple.
45

46
00:03:59.660 --> 00:04:01.820
So we're going to keep it exactly the same.
46

47
00:04:01.940 --> 00:04:03.660
It's still going to have a callback,
47

48
00:04:03.680 --> 00:04:11.330
it's going to report back to its superior which in this case is task list and it's going to have this
48

49
00:04:11.500 --> 00:04:16.670
callback which it triggers whenever the user changes the checkbox.
49

50
00:04:16.670 --> 00:04:23.330
so when it checks it off or unchecks it. And inside this callback is where we're going to tap in to our
50

51
00:04:23.330 --> 00:04:30.710
task data and call that method update task. And the task that we're going to pass over is going to be
51

52
00:04:30.710 --> 00:04:34.160
the TaskData.tasks
52

53
00:04:34.160 --> 00:04:38.000
and it's going to be the one at the current index.
53

54
00:04:38.090 --> 00:04:42.170
So the task tile gets built from our list view builder
54

55
00:04:42.170 --> 00:04:46.130
and for each item in the task tile, it gets assigned an index.
55

56
00:04:46.130 --> 00:04:48.520
So zero will be the one at the very top
56

57
00:04:48.530 --> 00:04:50.510
and then 1 and 2 etc..
57

58
00:04:50.630 --> 00:04:56.120
So in order to get the right task to update, we also have to use that index.
58

59
00:04:56.540 --> 00:04:59.910
But notice how we're using this taskData.tasks[index]...
59

60
00:04:59.930 --> 00:05:01.870
now in three places.
60

61
00:05:01.970 --> 00:05:09.530
So we can actually refactor this quite easily by going just above the return statement creating a task
61

62
00:05:09.860 --> 00:05:10.790
item
62

63
00:05:10.790 --> 00:05:18.080
and we're going to set it to equal taskData.tasks at the current index.
63

64
00:05:18.080 --> 00:05:23.660
And now that we have a hold of that task we can use it in all of these places.
64

65
00:05:23.690 --> 00:05:34.160
So it'll be task.name, task.isDone and also task is going to go inside here as the one that
65

66
00:05:34.160 --> 00:05:36.040
needs to be updated.
66

67
00:05:36.050 --> 00:05:42.180
So this also simplifies our code and keeps it short and sweet.
67

68
00:05:42.450 --> 00:05:51.120
So now if we hit save and we rerun our app, then we can go into our Todoey app, let's just add a new
68

69
00:05:51.120 --> 00:06:00.060
task and we can check it off or check off any of the other ones and we can uncheck them as we need to.
69

70
00:06:00.060 --> 00:06:06.720
So now all that's left is, what if we wanted to delete a task because at the moment even when we check
70

71
00:06:06.720 --> 00:06:13.170
them off it just says it's done? And we don't want to just check it off and delete it because we don't
71

72
00:06:13.170 --> 00:06:19.920
want to deprive our users of the joy in checking off a list making sure that everything is crossed off.
72

73
00:06:19.920 --> 00:06:25.650
In fact sometimes I think I just do things to check things off my list and it looks really nice when
73

74
00:06:25.650 --> 00:06:27.090
they're all ticked off.
74

75
00:06:27.090 --> 00:06:29.930
But what if they wanted to clean up this to do list?
75

76
00:06:30.150 --> 00:06:37.800
Well, what if we could get them to click and hold on one of the items and then it just deletes it out
76

77
00:06:37.800 --> 00:06:38.870
of the list?
77

78
00:06:38.910 --> 00:06:41.830
So that's what we're going to tackle in the next lesson.
78

79
00:06:41.850 --> 00:06:44.580
So for all of that and more, I'll see you there.
