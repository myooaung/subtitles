0
1
00:00:00,690 --> 00:00:09,120
Well you saw previously that we could parse data forwards through our routes by adding it as a property
1

2
00:00:09,330 --> 00:00:12,900
to the widget. So we could add a property here,
2

3
00:00:12,960 --> 00:00:20,190
we could call it final and we call that variable locationWeather. Because a little bit later on we're
3

4
00:00:20,190 --> 00:00:22,690
going to get the weather from a different source as well.
4

5
00:00:23,670 --> 00:00:30,770
Now when this stateful widget is initialized, we can happen to the location screen.
5

6
00:00:31,200 --> 00:00:36,590
And here we can add our this.locationWeather.
6

7
00:00:36,900 --> 00:00:45,780
So now when we initialize our location screen, we have a property that is the locationWeather and we
7

8
00:00:45,780 --> 00:00:48,690
can set it to a new variable.
8

9
00:00:48,750 --> 00:00:56,240
And this is where I'm going to parse over that weather data.
9

10
00:00:56,250 --> 00:01:03,350
Now I can get that location data over as soon as I initialize a new location screen.
10

11
00:01:03,410 --> 00:01:07,040
But how do I access that from my location
11

12
00:01:07,040 --> 00:01:14,840
state? This is the central problem and this is fundamental to understanding how Flutter works.
12

13
00:01:15,170 --> 00:01:20,780
We need to display the weather information received from the loading screen inside the text widget of
13

14
00:01:20,780 --> 00:01:22,250
the location screen.
14

15
00:01:22,250 --> 00:01:28,860
And this means getting the data from the location screen object into the location screen's state object.
15

16
00:01:29,090 --> 00:01:35,780
Remember the location screen's stateful widget is actually a separate object from its state. And the
16

17
00:01:35,780 --> 00:01:39,830
text widgets don't live inside our location screen.
17

18
00:01:39,890 --> 00:01:44,420
Instead the text widgets live in the build method of the state object.
18

19
00:01:44,420 --> 00:01:50,820
However, the location screen object and the location screen's state object are linked.
19

20
00:01:50,870 --> 00:01:57,080
In other words, the state object knows which stateful widget it belongs to. The state object has a property
20

21
00:01:57,110 --> 00:02:01,700
called widget which will point to its parent stateful widget.
21

22
00:02:02,120 --> 00:02:04,880
Let me show you how this works in our code.
22

23
00:02:04,880 --> 00:02:12,090
I'm going to print our weather data to the console via the widget property of the location screen's state.
23

24
00:02:12,470 --> 00:02:19,340
If we go ahead and add a init state, so that we tap into the moment where the state object is initialized,
24

25
00:02:20,240 --> 00:02:25,460
here we can print out a widget object.
25

26
00:02:25,460 --> 00:02:34,910
Now you get access to this widget object inside every single state object. And what it is, is the current
26

27
00:02:35,060 --> 00:02:36,620
configuration.
27

28
00:02:36,620 --> 00:02:43,450
So a state object's configuration is the corresponding stateful widget instance.
28

29
00:02:43,460 --> 00:02:51,290
So basically if we tap in to widget, we'll get access to the location screen stateful widget which
29

30
00:02:51,290 --> 00:02:59,420
has a property of locationWeather. So we can say print widget.locationWeather. And now we're able
30

31
00:02:59,420 --> 00:03:08,810
to pass this hot potato from our loading screen over to our location screen. And from our location screen
31

32
00:03:08,810 --> 00:03:15,340
state, we can tap into the location screen through widget and tap into that property through location
32

33
00:03:15,420 --> 00:03:16,640
Weather right here.
33

34
00:03:16,700 --> 00:03:19,040
So two parses in order to get it here.
34

35
00:03:21,470 --> 00:03:26,750
So let's just print it to confirm that we've actually got that weather passed over from here.
35

36
00:03:26,870 --> 00:03:30,820
So notice there's no print statements in our loading screen
36

37
00:03:30,950 --> 00:03:39,080
and when I take a look at my console, as soon as it's moved over to a location screen, I've got that location
37

38
00:03:39,080 --> 00:03:42,080
weather printed in the console here.
38

39
00:03:42,080 --> 00:03:48,970
So it's definitely working. I'm definitely accessing that location weather here.
39

40
00:03:49,170 --> 00:03:56,460
So now all we have to do is to use that location weather and get the temperature and get the condition
40

41
00:03:56,460 --> 00:03:58,310
code and get the city name from it.
41

42
00:03:58,680 --> 00:04:05,520
So I'm going to copy these three lines of code that I had from before, and I'm going to paste it into
42

43
00:04:05,550 --> 00:04:10,440
a new method called updateUI.
43

44
00:04:10,440 --> 00:04:18,180
So I'm going to use it to update the user interface and this updateUI is going to have a single input
44

45
00:04:18,450 --> 00:04:27,400
which is going to be something called weatherData. And you can add the data type of that input as dynamic
45

46
00:04:28,180 --> 00:04:35,180
because remember that locationWeather is a var that comes from this weather data var.
46

47
00:04:35,200 --> 00:04:38,850
So it's dynamic here, it's dynamic here
47

48
00:04:39,040 --> 00:04:41,080
and it's also going to be dynamic here
48

49
00:04:41,110 --> 00:04:49,970
when we pass it in. So now we can paste in those three lines of code and we can update it so that instead
49

50
00:04:49,970 --> 00:04:56,590
of using decoded data, we're using weatherData in order to tap into that weather data object.
50

51
00:04:58,420 --> 00:05:04,780
So now if we wanted to use these properties inside our widget, we're going to have to create some properties
51

52
00:05:04,990 --> 00:05:06,940
inside our state object.
52

53
00:05:06,940 --> 00:05:14,080
So we're going to have a double that's going to be called temperature and a int that's going to be
53

54
00:05:14,080 --> 00:05:19,690
the condition and a string that's going to be the cityName.
54

55
00:05:19,690 --> 00:05:26,620
And now we can set temperature to equal weatherData, conditioned equalweatherData and city name.
55

56
00:05:26,620 --> 00:05:36,040
So now let's reformat our code with a CONTROL + save and we now have a updateUI. At this stage instead
56

57
00:05:36,040 --> 00:05:44,350
of printing the widget.locationWeather, we can pass it over to our updateUI method and provide
57

58
00:05:44,440 --> 00:05:50,390
that widget.locationWeather as the input to that method.
58

59
00:05:50,470 --> 00:05:57,700
So when our location screen gets initialized, we pass over the locationWeather which we can tap in to
59

60
00:05:57,700 --> 00:06:06,140
through widget.locationWeather and we call updateUI, again passing over that weather data. And then we pass
60

61
00:06:06,140 --> 00:06:11,060
it to get the temperature condition and city name out of it. Now
61

62
00:06:11,080 --> 00:06:21,700
at this point, if we try and print out temperature value, so let's hit run again and hot restart our
62

63
00:06:21,700 --> 00:06:26,860
app, you can see that the temperature that gets printed out is in Kelvin,
63

64
00:06:26,860 --> 00:06:30,470
so it's not Celsius and it's not Fahrenheit.
64

65
00:06:30,550 --> 00:06:39,680
Now we could either convert this temperature from Kelvin into Celsius by subtracting two hundred and
65

66
00:06:39,680 --> 00:06:41,440
seventy three point one.
66

67
00:06:41,570 --> 00:06:50,870
So let's take our temperature here, 285.61 and if we subtract 273, we get 12 degrees
67

68
00:06:51,410 --> 00:06:54,960
Celsius or 54 degrees Fahrenheit.
68

69
00:06:55,010 --> 00:07:01,810
But this is such a common functionality that Open Weather Map actually already knows how to handle it.
69

70
00:07:01,850 --> 00:07:08,600
So if we go into the API docs and we take a look at the unit format, you can see that it can return the
70

71
00:07:08,600 --> 00:07:18,890
temperature as a metric value or as an imperial value simply by adding a unit equals metric to the end
71

72
00:07:19,010 --> 00:07:22,030
or units equals imperial to the end.
72

73
00:07:22,040 --> 00:07:24,500
So I want my unit in metric,
73

74
00:07:24,530 --> 00:07:26,220
so I want it as Celsius.
74

75
00:07:26,330 --> 00:07:32,660
So I'm going to copy that and I'm going to paste that to add to our URL.
75

76
00:07:32,690 --> 00:07:40,940
So at the very end after the API key, I'm going to paste a ampersand and I'm gonna say and units equals
76

77
00:07:41,030 --> 00:07:42,050
metric.
77

78
00:07:42,050 --> 00:07:46,360
So now if we hot restart again, you can see that the temperature
78

79
00:07:46,370 --> 00:07:50,000
I'm gonna get printed out is now in Celsius.
79

80
00:07:50,000 --> 00:07:57,040
And you can change that to imperial if you need the temperature in Fahrenheit. So now that we've sorted
80

81
00:07:57,040 --> 00:08:03,970
out that little niggling thing, we can now use our temperature inside our widget. And the place where
81

82
00:08:03,970 --> 00:08:10,970
we display it is right here and instead of 32 degrees, I'm gonna delete the 32 and I'm going
82

83
00:08:10,970 --> 00:08:17,380
to add my temperature variable here with a dollar sign. And I'm going to keep that little degree symbol
83

84
00:08:17,440 --> 00:08:18,100
as a string.
84

85
00:08:18,820 --> 00:08:25,480
So now if we hit save and we take a look at our app, you can see that we're getting twelve point four
85

86
00:08:25,480 --> 00:08:30,640
four degrees and the rest of the content is being pushed off of the screen.
86

87
00:08:30,790 --> 00:08:36,980
Now nobody needs to know the temperature of where they are to that degree of accuracy right?
87

88
00:08:38,140 --> 00:08:42,480
All we want is just the first number without any decimal places.
88

89
00:08:42,490 --> 00:08:47,280
So how can we do this? Well instead of storing temperature as a double,
89

90
00:08:47,320 --> 00:08:55,810
we can change it to an integer, a whole number with no decimal places. And now we can create a local variable
90

91
00:08:56,200 --> 00:09:03,070
that stores the double temperature, so we'll just call that temp. And then we can store the actual value
91

92
00:09:03,070 --> 00:09:10,170
in the temperature variable as the temp.toInt
92

93
00:09:10,360 --> 00:09:14,080
and this will convert our double to an integer.
93

94
00:09:14,230 --> 00:09:20,350
And now if we hit hot restart, you can see that when our temperature displays, we only get a whole number.
94

95
00:09:20,370 --> 00:09:25,960
So we get 12 degrees without the rest of the decimal places.
95

96
00:09:25,970 --> 00:09:33,530
So now we successfully parsed the weather data for our current location into our location screen and
96

97
00:09:33,530 --> 00:09:37,730
we're able to pass it to get the temperature, the condition and the city name
97

98
00:09:37,730 --> 00:09:43,970
and we already started using the temperature in our widgets. The very last thing I want to do is just
98

99
00:09:43,970 --> 00:09:46,980
to refactor this loading screen a little bit.
99

100
00:09:47,150 --> 00:09:52,700
Instead of having to have the latitude and longitude stored up here as doubles and instead of having
100

101
00:09:52,700 --> 00:10:03,160
to create so many variables, I can simply use the location.latitude right here and location.longitude
101

102
00:10:03,220 --> 00:10:04,420
in here.
102

103
00:10:04,420 --> 00:10:11,500
Now the only problem is that you see when we use a single dollar sign to insert a variable value, it
103

104
00:10:11,500 --> 00:10:17,300
can only take one step. So we can only take that first variable that it identifies.
104

105
00:10:17,650 --> 00:10:25,090
If we wanted to tap into location.latitude or location plus three or do something with it, we have
105

106
00:10:25,090 --> 00:10:27,960
to add a set of curly braces around it.
106

107
00:10:28,000 --> 00:10:35,050
So we're going to add some curly braces around location.latitude and also some around location.
107

108
00:10:35,170 --> 00:10:36,670
longitude.
108

109
00:10:36,670 --> 00:10:41,860
So this way, we can further simplify our code by deleting those two lines
109

110
00:10:41,860 --> 00:10:49,450
and also we got rid of those variables right up there. And now our code is a lot shorter and it's still
110

111
00:10:49,540 --> 00:10:55,600
just as expressive. We're passing in a latitude that's equal to the location we got back
111

112
00:10:55,600 --> 00:11:04,080
.latitude and longitude is location.longitude. And our loading screen is now pretty much complete.
112

113
00:11:04,180 --> 00:11:12,580
So in the next lesson, we're going to explore how we can get the other part of our screen updated using
113

114
00:11:12,700 --> 00:11:15,400
the data that we got back from Open Weather Map.
114

115
00:11:15,640 --> 00:11:18,670
So all that and more, I'll see you on the next lesson.
