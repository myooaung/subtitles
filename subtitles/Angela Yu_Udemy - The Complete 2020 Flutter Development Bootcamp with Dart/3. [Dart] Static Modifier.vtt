WEBVTT
0
1
00:00:00.330 --> 00:00:06.200
Now in the last lesson we came across a new keyword, this thing called static.
1

2
00:00:06.210 --> 00:00:12.090
Now we've seen quite a few keywords already such as class or extends or return.
2

3
00:00:12.090 --> 00:00:18.050
And if you take a look at this URL you can see that there's actually quite a few keywords that Dart
3

4
00:00:18.060 --> 00:00:20.010
holds to be special.
4

5
00:00:20.010 --> 00:00:27.870
And we've talked about a lot of them already such as enum or else or in or show or hide.
5

6
00:00:27.870 --> 00:00:35.520
But the one that we're going to dive deeper into right now in this lesson is static. And static allows
6

7
00:00:35.520 --> 00:00:39.510
you to implement class wide variables and methods.
7

8
00:00:39.510 --> 00:00:40.680
Now what does this mean?
8

9
00:00:41.010 --> 00:00:48.000
Well previously we saw that we could create classes by using the class keyword followed by some definition
9

10
00:00:48.060 --> 00:00:50.000
of a property.
10

11
00:00:50.160 --> 00:00:53.730
And also we could create methods inside our classes.
11

12
00:00:53.820 --> 00:01:02.390
Now later on we could construct a object from this class such as a car from a car blueprint.
12

13
00:01:02.520 --> 00:01:08.310
And remember we construct a new object from a class with this syntax the name of the class followed
13

14
00:01:08.310 --> 00:01:10.590
by a set of parentheses.
14

15
00:01:10.740 --> 00:01:17.820
And it's this set of parentheses that cause the constructor of the class which by default is just an
15

16
00:01:17.820 --> 00:01:19.920
empty constructor that we get for free.
16

17
00:01:20.280 --> 00:01:24.980
But if we wanted to create our own constructor of course we can.
17

18
00:01:25.020 --> 00:01:31.560
And we could say something like car with this.numberOfDoors to say that when we construct a new
18

19
00:01:31.560 --> 00:01:36.120
car out of this car class we create the object out of the blueprint.
19

20
00:01:36.270 --> 00:01:41.280
Then we have to specify a value for the number of doors property.
20

21
00:01:41.340 --> 00:01:44.230
So let's say that my car is a 3-door car.
21

22
00:01:44.310 --> 00:01:49.740
Well in this case it modifies how my object gets constructed from this class.
22

23
00:01:50.010 --> 00:01:56.760
But either way in order to construct a new object, we always put a set of parentheses there to show that
23

24
00:01:56.760 --> 00:02:04.440
we're actually creating a whole new object and initializing it with properties and giving it capabilities.
24

25
00:02:04.530 --> 00:02:06.720
But what if we had a different class?
25

26
00:02:06.750 --> 00:02:14.310
Let's say we had a class called Square and this class has only two properties, the numberOfSides which
26

27
00:02:14.310 --> 00:02:18.540
is by default set to 4, and a color property.
27

28
00:02:18.540 --> 00:02:25.020
Now when I create mySquare object out of the square blueprint and then I create yourSquare object
28

29
00:02:25.170 --> 00:02:31.170
out of the square blueprint, it makes sense for mySquare and yourSquare to probably have different
29

30
00:02:31.230 --> 00:02:32.340
color properties
30

31
00:02:32.340 --> 00:02:32.940
right?
31

32
00:02:33.000 --> 00:02:38.720
So it makes sense that I should be able to change the color of my square to red and your square to blue.
32

33
00:02:38.910 --> 00:02:44.100
But what about a property like the number of sides of a square?
33

34
00:02:44.100 --> 00:02:48.340
Well that's gonna be common across all squares right?
34

35
00:02:48.480 --> 00:02:54.120
For it to be a square, it kind of by definition needs four sides.
35

36
00:02:54.120 --> 00:02:57.720
It's not really unique to the square object.
36

37
00:02:57.720 --> 00:02:58.720
It's not like this square
37

38
00:02:58.720 --> 00:03:02.540
can have three sides but this other square can have four.
38

39
00:03:02.970 --> 00:03:10.200
So if in my main function I wanted to know the number of sides a square has, well at the moment I would
39

40
00:03:10.200 --> 00:03:19.110
have to first initialize a brand new object out of my square just to be able to tap into that property
40

41
00:03:19.140 --> 00:03:20.890
called number of sides.
41

42
00:03:20.910 --> 00:03:23.400
Now that seems awfully wasteful doesn't it?
42

43
00:03:23.400 --> 00:03:28.920
It takes a lot of resources to create a new object from a class. We have to give it properties not just
43

44
00:03:28.920 --> 00:03:36.210
the number of sides, but also a color property and maybe as is in most classes it might have lots and
44

45
00:03:36.210 --> 00:03:38.940
lots of methods and lots of things going on.
45

46
00:03:39.330 --> 00:03:46.920
So it seems like a lot of effort to create a brand new square object just to be able to get a property
46

47
00:03:46.920 --> 00:03:53.620
on it such as the numberOfSides. Now you might say that why would you ever want to know the number
47

48
00:03:53.620 --> 00:03:54.640
of sides of a square?
48

49
00:03:54.640 --> 00:03:56.050
It's pretty obvious isn't it?
49

50
00:03:56.050 --> 00:04:01.060
It's gonna be 4. Well let's create a different class to make the use case a bit clearer.
50

51
00:04:01.180 --> 00:04:05.220
So let's say that I had a class called a Icosagon,
51

52
00:04:05.230 --> 00:04:07.900
just make sure that I spell that right.
52

53
00:04:08.050 --> 00:04:12.460
And let me ask you, how many sides does an Icosagon have?
53

54
00:04:12.460 --> 00:04:15.040
Well according to Wikipedia, it has
54

55
00:04:17.800 --> 00:04:19.360
has 20.
55

56
00:04:19.400 --> 00:04:22.520
Now you might not be able to remember that,
56

57
00:04:22.640 --> 00:04:28.820
you know just off the top of your head. So you might actually legitimately have a real need to be able
57

58
00:04:28.820 --> 00:04:33.290
to use or print out the number of sides of an 
58

59
00:04:33.290 --> 00:04:39.380
Icosagon. So you might need to initialize it and then we tap in to number of sides and then we
59

60
00:04:39.380 --> 00:04:42.920
print that out and we get, oh yeah it was 20.
60

61
00:04:42.920 --> 00:04:44.350
Of course now I remember.
61

62
00:04:44.870 --> 00:04:52.450
But again, same situation. We're having to initialize a whole Icosagon object where it's never gonna
62

63
00:04:52.490 --> 00:04:58.880
be used again. We're not even bothering to say this object into a variable so that we can tap into it
63

64
00:04:58.990 --> 00:05:00.860
at a later point.
64

65
00:05:00.980 --> 00:05:06.110
And you've seen code like this before where we've needed to create an object just to be able to get
65

66
00:05:06.110 --> 00:05:08.470
the value of one of its properties.
66

67
00:05:08.540 --> 00:05:15.650
So how can we be more efficient with our code and with the resources that our code is going to run on?
67

68
00:05:15.650 --> 00:05:21.160
Well in this case, we can change number of sides into a static property.
68

69
00:05:21.740 --> 00:05:25.760
So to do that we just add the word static in front.
69

70
00:05:25.760 --> 00:05:32.510
And this is of course a modifier which now modifies this variable from just a bog standard, what we would
70

71
00:05:32.510 --> 00:05:39.060
call an instance variable, because it's associated with an instance of this class,
71

72
00:05:39.170 --> 00:05:46.650
so the Icosagon object that gets created. Well now by adding that static keyword in front,
72

73
00:05:46.680 --> 00:05:56.520
well we've now turned it into a class-wide variable. And to use a class variable, we don't actually need
73

74
00:05:56.520 --> 00:05:59.080
to create an object to be able to do that.
74

75
00:05:59.130 --> 00:06:03.450
We could just say, "Well what is the property of this class?"
75

76
00:06:03.450 --> 00:06:09.420
And if you think about it, whenever we create a new square it's always going to have 4 as the number
76

77
00:06:09.420 --> 00:06:09.950
of sides.
77

78
00:06:10.260 --> 00:06:15.450
Whenever we create a new Icosagon, it's always going to have 20 as number of sides.
78

79
00:06:15.450 --> 00:06:19.570
This is not something that will change from object to object.
79

80
00:06:19.590 --> 00:06:24.550
It's going to be universal for all objects created from that class.
80

81
00:06:24.660 --> 00:06:30.400
So numberOfSides makes the perfect static variable.
81

82
00:06:30.670 --> 00:06:32.660
Now let's create another class.
82

83
00:06:32.710 --> 00:06:36.070
So I'm going to create a class called Circle.
83

84
00:06:36.070 --> 00:06:42.520
And if you remember anything from high school maths, to do anything with circles, it's pretty essential
84

85
00:06:42.580 --> 00:06:45.260
that you use the constant pi
85

86
00:06:45.280 --> 00:06:45.610
right?
86

87
00:06:46.360 --> 00:06:52.510
So whenever we need to work with circles or anything that's in that category, we probably want to have
87

88
00:06:52.540 --> 00:07:03.080
pi as a constant handy. Well let's create a constant that is of type double called pi in our Circle class
88

89
00:07:03.230 --> 00:07:10.130
and let's set it to 3.141592.
89

90
00:07:10.220 --> 00:07:14.290
I think this is as many decimal places I can remember for pi.
90

91
00:07:14.390 --> 00:07:23.300
Now as soon as we do this, we get an error telling us that only static fields can be declared as a const
91

92
00:07:23.660 --> 00:07:25.320
inside a class.
92

93
00:07:25.490 --> 00:07:32.340
Previously when we've been using consts, we've always been creating it outside of classes just as some
93

94
00:07:32.360 --> 00:07:35.840
sort of free floating constant, usually in a constants file.
94

95
00:07:36.200 --> 00:07:41.850
But what if we actually wanted to associate a constant value with a class?
95

96
00:07:41.930 --> 00:07:47.430
Well in order to do that you have to turn it into a static const.
96

97
00:07:47.480 --> 00:07:51.020
Why is that? Why does it have to be static?
97

98
00:07:51.020 --> 00:07:59.000
Well the reason is because by having a const that already has a default value, that means that every
98

99
00:07:59.000 --> 00:08:06.450
object that gets created from this circle class will have the same value for this property called Pi
99

100
00:08:06.650 --> 00:08:09.220
and it will never be changed.
100

101
00:08:09.260 --> 00:08:15.110
So if you think about that, that sounds an awful lot like how static variables work right?
101

102
00:08:15.500 --> 00:08:21.140
So it doesn't make sense to create a constant that is a property on a circle
102

103
00:08:21.680 --> 00:08:24.420
if it's not going to be static.
103

104
00:08:24.560 --> 00:08:31.910
So whenever you want a constant value to be associated with a class, you have to make it into a static
104

105
00:08:32.000 --> 00:08:34.630
const.
105

106
00:08:34.700 --> 00:08:42.490
Now we've only been looking at applying the static modifier to properties concepts and variables but
106

107
00:08:42.550 --> 00:08:45.140
you can also apply it to methods.
107

108
00:08:45.220 --> 00:08:54.730
So let's say that we had a method called workOutCircumference and we had to provide an input in the
108

109
00:08:54.730 --> 00:09:02.800
form of a radius of the circumference of the circle's circumference that we want to work out. And inside
109

110
00:09:02.800 --> 00:09:06.340
the body of the method we're going to work out the circumference
110

111
00:09:06.640 --> 00:09:15.670
By using that age old formula of two pi r, so 2 * the value of pi times the radius. And that for
111

112
00:09:15.760 --> 00:09:19.180
every circle will equal the circumference.
112

113
00:09:19.180 --> 00:09:25.630
Finally our method is going to print out the circumference into the console.
113

114
00:09:25.640 --> 00:09:32.980
So now if we go back up to our main and we comment out the previous print function, we go ahead and create
114

115
00:09:33.040 --> 00:09:34.930
a new circle.
115

116
00:09:35.080 --> 00:09:42.590
Then we can call the workOutCircumference method that comes from that class and let's provide a radius.
116

117
00:09:42.610 --> 00:09:47.050
So let's say that the radius is equal to 15.6,
117

118
00:09:47.050 --> 00:09:47.410
why not?
118

119
00:09:48.130 --> 00:09:57.550
So now if we hit run then you can see that we get 98 point something printed into the console as the
119

120
00:09:57.550 --> 00:10:02.800
circumference of our circle with a radius of 15.6.
120

121
00:10:02.800 --> 00:10:09.150
Now in this case again I'm creating a circle just to be able to use that method.
121

122
00:10:09.160 --> 00:10:10.870
That's associated with that class.
122

123
00:10:11.260 --> 00:10:17.980
I'm not going to need that circle class later on because if I did I would have created a variable that
123

124
00:10:17.980 --> 00:10:21.740
would have held on to that circle object.
124

125
00:10:22.150 --> 00:10:30.910
And so that later on I could use that circle object again in another scenario or be able to access
125

126
00:10:30.910 --> 00:10:34.660
one of its properties and that's how proper objects are used right?
126

127
00:10:34.660 --> 00:10:41.560
We store an object inside a variable and then we use it again and again for various tasks. But very often
127

128
00:10:41.560 --> 00:10:48.090
you find yourself just needing a method or a property that comes from the class.
128

129
00:10:48.160 --> 00:10:53.350
And in this case whenever you're writing code like this whenever you're constructing an object in line
129

130
00:10:53.560 --> 00:11:00.400
just to be able to immediately use that object's method or property, then you would probably benefit from
130

131
00:11:00.460 --> 00:11:03.980
adding a static keyword to whatever it may be.
131

132
00:11:04.000 --> 00:11:09.460
And in this case we can add that static keyword to our method as well.
132

133
00:11:09.460 --> 00:11:12.030
So now it becomes a static void
133

134
00:11:12.070 --> 00:11:19.690
and so this method is now a method that's associated with the class rather than with the object that's
134

135
00:11:19.690 --> 00:11:22.040
constructed from the class.
135

136
00:11:22.060 --> 00:11:27.130
So instead of creating a brand new Circle object just to be able to use that method,
136

137
00:11:27.310 --> 00:11:33.030
I can just use the class method like so and I don't have to construct anything.
137

138
00:11:33.190 --> 00:11:39.040
And it's far more efficient this way if I just wanted to be able to use that method that's associated
138

139
00:11:39.040 --> 00:11:40.240
with the circle class.
139

140
00:11:42.850 --> 00:11:47.260
Now coming back to our example in our welcome screen,
140

141
00:11:47.470 --> 00:11:55.330
if I want to be able to tap into that welcome screen id in my main.dart, then unless this was a
141

142
00:11:55.330 --> 00:12:03.100
static variable then in order to just do something very simple like that I would have to instantiate
142

143
00:12:03.250 --> 00:12:10.270
an entire welcome screen object and that involves creating a welcome screen state and of course that
143

144
00:12:10.270 --> 00:12:16.150
means we have to build our widget which has scaffolds, padding, whole bunch of things that's getting created
144

145
00:12:16.420 --> 00:12:24.700
just so that I could access that one measly string. By changing it into a static variable,
145

146
00:12:24.880 --> 00:12:33.190
I can now bypass all of that heavy lifting and instead just hop into that property that's associated
146

147
00:12:33.190 --> 00:12:34.110
with my class,
147

148
00:12:34.510 --> 00:12:42.310
so far more efficient. And even better, I can turn this into a static const so that I can't accidentally
148

149
00:12:42.310 --> 00:12:48.670
change it somewhere else in another class such as my main or my registration screen so that that stays
149

150
00:12:48.790 --> 00:12:51.090
always as this value.
150

151
00:12:51.160 --> 00:12:58.180
So we only have that string as a string in one place and everywhere else that we refer to it,
151

152
00:12:58.180 --> 00:13:00.250
we use that static property.
