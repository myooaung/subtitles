WEBVTT
0
1
00:00:00.180 --> 00:00:07.830
In the last lesson was the first time that we actually came across this thing called a stream. And you
1

2
00:00:07.830 --> 00:00:14.500
can see the effects of using it where we were getting our method being called again
2

3
00:00:14.610 --> 00:00:21.690
every time we got a new piece of data that went into our messages collection. And I mentioned that this
3

4
00:00:21.690 --> 00:00:28.710
is now effectively like we are subscribed to this collection and whenever there's new data going in
4

5
00:00:28.710 --> 00:00:38.190
there, we're getting notified in our app. So what exactly are these Dart streams that we're using?
5

6
00:00:38.190 --> 00:00:41.790
Well let's start off with an analogy.
6

7
00:00:42.030 --> 00:00:45.350
And knowing me, it's going to be a food analogy.
7

8
00:00:45.420 --> 00:00:50.910
Now let's imagine that you're in a Japanese restaurant and you decide that you really fancy having some
8

9
00:00:50.910 --> 00:00:52.050
sushi.
9

10
00:00:52.050 --> 00:00:55.660
Now of course it takes time for the chef to prepare your food.
10

11
00:00:55.670 --> 00:01:01.990
You have to cut up the fish and make the rice balls etc. So you're going to have to wait a little bit.
11

12
00:01:02.010 --> 00:01:05.000
Now there's two ways of waiting on this right?
12

13
00:01:05.010 --> 00:01:10.180
One is that you could say, 'Well here are all the things that I would like to eat.'
13

14
00:01:10.320 --> 00:01:12.810
And you make your order and you get a receipt.
14

15
00:01:12.810 --> 00:01:14.050
This is your order number.
15

16
00:01:14.070 --> 00:01:16.760
Once it's ready you'll be able to collect it.
16

17
00:01:16.950 --> 00:01:19.570
And this is effectively how futures work.
17

18
00:01:19.650 --> 00:01:25.080
And we already saw that and went into that in a lot of detail in the Clima module.
18

19
00:01:25.080 --> 00:01:27.340
But consider another scenario.
19

20
00:01:27.510 --> 00:01:35.220
Instead of saying, 'I want all my order in one go Please give me everything I've requested' in one go.
20

21
00:01:35.220 --> 00:01:38.730
What if instead you had a seat at the table?
21

22
00:01:39.630 --> 00:01:47.610
So let's imagine you're in a conveyor belt sushi shop and the chef will make these dishes.
22

23
00:01:47.610 --> 00:01:54.840
And as he makes them, they get sent down the conveyor belt and you sitting somewhere downstream of the
23

24
00:01:54.840 --> 00:02:01.030
conveyor belt will be able to pick up these pieces of sushi as he's making it.
24

25
00:02:01.050 --> 00:02:09.240
This is kind of more like a stream now, because again, there is an event which you're waiting for namely
25

26
00:02:09.270 --> 00:02:17.430
the chef having to finish preparing the sushi. But he's sending those bits of sushi out as soon as he's
26

27
00:02:17.520 --> 00:02:19.180
finished preparing with it.
27

28
00:02:19.200 --> 00:02:26.250
So by subscribing to this stream or by sitting down at this conveyor belt sushi table, you're essentially
28

29
00:02:26.250 --> 00:02:33.510
able to get the pieces of data as they come in and as they get added to the stream.
29

30
00:02:33.800 --> 00:02:39.230
So this way there is still an event that you're waiting on depending on how long it takes for the chef
30

31
00:02:39.230 --> 00:02:45.890
to make the sushi. But instead of getting everything in one go and waiting for that final order to take
31

32
00:02:45.890 --> 00:02:46.420
home,
32

33
00:02:46.580 --> 00:02:50.280
well here you kind of just getting it as it comes through.
33

34
00:02:50.330 --> 00:02:57.230
So that's how our messages have been coming through. We're subscribing to a stream of messages and that
34

35
00:02:57.230 --> 00:03:01.290
code lives inside the snapshots method.
35

36
00:03:01.300 --> 00:03:06.980
When we have a look inside the definition for that method, you can see that they're creating a method
36

37
00:03:07.250 --> 00:03:12.200
which returns a stream of query snapshots.
37

38
00:03:12.200 --> 00:03:18.890
And as more data get added to this collection, then the data will come in through our messages stream
38

39
00:03:19.310 --> 00:03:28.310
and we can listen to it to either print out the latest piece of data or just print out all of the data
39

40
00:03:28.730 --> 00:03:33.930
as it is inside our messages collection.
40

41
00:03:33.950 --> 00:03:40.300
Now another way of thinking about this is if you thought of this as maybe a 2 x 2 matrix right?
41

42
00:03:40.370 --> 00:03:44.000
So let's say that we have things that are already available,
42

43
00:03:44.150 --> 00:03:49.700
so things like your normal objects, your int, your doubles, your strings.
43

44
00:03:49.700 --> 00:03:55.220
And then there are things which you need to wait for. And let's say we wanted the singular version of
44

45
00:03:55.220 --> 00:03:56.180
those things.
45

46
00:03:56.240 --> 00:04:01.730
Well a singular version of something that's already available might just be a piece of data that's a
46

47
00:04:01.730 --> 00:04:03.050
string object right?
47

48
00:04:03.050 --> 00:04:05.690
Like a variable or a constant.
48

49
00:04:05.690 --> 00:04:10.400
But what if we had a singular object that we needed to wait for?
49

50
00:04:10.430 --> 00:04:14.510
Well that might be a future String object.
50

51
00:04:14.510 --> 00:04:18.220
So this is something that will be processed asynchronously.
51

52
00:04:18.230 --> 00:04:24.530
It might take a while for us to grab it from the internet but once it arrives, then we can use it as
52

53
00:04:24.530 --> 00:04:26.270
a normal string.
53

54
00:04:26.270 --> 00:04:31.910
But meanwhile when we're will encoding it up and when we're planning for it, the data type is a future string.
54

55
00:04:32.660 --> 00:04:36.260
But what about plural items or multiple items?
55

56
00:04:36.260 --> 00:04:41.740
So the readily available multiple version of a string would be a list of strings,
56

57
00:04:41.810 --> 00:04:42.080
right?
57

58
00:04:42.080 --> 00:04:45.800
It would just be a list that contains many strings.
58

59
00:04:45.800 --> 00:04:51.220
But what if we have to wait for this list of strings to come through?
59

60
00:04:51.770 --> 00:04:55.700
What is the plural version of a future string?
60

61
00:04:55.700 --> 00:05:02.360
Well that's a stream of strings, just like sushi that's being added to the conveyor belt that could be
61

62
00:05:02.360 --> 00:05:04.450
added to the stream at any time.
62

63
00:05:04.580 --> 00:05:11.450
And as long as we are subscribed to that stream, we'll get notified every time there's a new piece of
63

64
00:05:11.450 --> 00:05:21.130
data that's been added to the pipeline or the stream. And if you haven't had enough of food related analogies,
64

65
00:05:21.610 --> 00:05:27.430
there's this really awesome thing called Nagashi-somen which is this thing that people do in Japan in the
65

66
00:05:27.430 --> 00:05:35.200
summer where they split a bamboo open and they run water down it like a little stream. And somebody will
66

67
00:05:35.200 --> 00:05:43.780
be upstream putting usually noodles down the stream and they'll flow down in through the stream.
67

68
00:05:43.780 --> 00:05:46.890
And people who have subscribed to the stream
68

69
00:05:47.020 --> 00:05:54.670
well they can catch the noodle as it flows down and add it to their bowl. So they're effectively using
69

70
00:05:54.730 --> 00:05:59.150
a stream and listening to the data that's coming through.
70

71
00:05:59.290 --> 00:06:02.980
Now you don't know how regularly the data is going to come through right?
71

72
00:06:02.980 --> 00:06:04.270
It could be every second,
72

73
00:06:04.270 --> 00:06:07.710
it could be one second and then maybe five minutes later.
73

74
00:06:07.810 --> 00:06:13.200
But as long as you're subscribed, you're gonna get notified of when data is coming through.
74

75
00:06:15.070 --> 00:06:22.530
So similarly over here, we know that the rate at which users will type messages is kind of irregular,
75

76
00:06:22.540 --> 00:06:22.940
right?
76

77
00:06:22.940 --> 00:06:28.240
Maybe I'll message my mom today but then I won't message her like for a month.
77

78
00:06:28.240 --> 00:06:35.200
Well it doesn't make sense to keep pulling the data by using something like get documents because then
78

79
00:06:35.200 --> 00:06:37.580
you would have to maybe put it on a timer.
79

80
00:06:37.660 --> 00:06:43.300
Maybe we would have to check are there messages now? Are their messages? Are their messages? And you'd probably
80

81
00:06:43.300 --> 00:06:48.410
have to do that every second or every fraction of a second which is really really intensive.
81

82
00:06:48.550 --> 00:06:56.380
But instead, if we had a stream, then we would basically just be notified as soon as there's new data
82

83
00:06:56.710 --> 00:06:58.900
and then we can process the data
83

84
00:06:58.900 --> 00:07:07.030
namely by adding it into our app. So I hope that clears up streams a little bit more or at least tells
84

85
00:07:07.030 --> 00:07:10.360
you a little bit more about what's going on over here.
85

86
00:07:10.360 --> 00:07:15.250
And once you're done messing around with the code, head over to the next lesson where we're going to
86

87
00:07:15.250 --> 00:07:22.480
talk about how we can turn our stream of data into actual widgets that we can display on screen.
