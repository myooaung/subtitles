0
1
00:00:00,230 --> 00:00:00,510
All right.
1

2
00:00:00,540 --> 00:00:07,230
So now that we're pretty much done with getting weather from the location data in various ways, the next
2

3
00:00:07,230 --> 00:00:15,060
step is to move on to the city screen. And you can find that under the screens folder. And we can navigate
3

4
00:00:15,060 --> 00:00:22,980
to it when the user taps on this city icon which should take us to the city screen. And that icon lives
4

5
00:00:23,040 --> 00:00:31,220
over here in this flat button where the icon is icons.location_city. See if you can remember how
5

6
00:00:31,220 --> 00:00:39,800
we can use routes and the navigator to push the city screen on top of this current location screen. You
6

7
00:00:39,800 --> 00:00:45,080
might have to do a quick google to be able to remember the code that's required to do this. But pause
7

8
00:00:45,080 --> 00:00:48,660
the video and give that a go.
8

9
00:00:48,740 --> 00:00:49,040
All right.
9

10
00:00:49,070 --> 00:00:55,700
So in order to push a new screen, we have to use the navigator. And we're going to use the push method
10

11
00:00:56,090 --> 00:01:03,120
where we pass the current context over and we build a material page route.
11

12
00:01:03,200 --> 00:01:06,050
Now this builder expects a callback,
12

13
00:01:06,050 --> 00:01:13,460
so it takes a context as the input and inside the callback we say what we want to return,
13

14
00:01:13,460 --> 00:01:19,640
so the screen that we want to push. And this is of course going to be the city screen.
14

15
00:01:19,820 --> 00:01:25,610
And in order for our current file to recognize that we of course have to import it right at the top.
15

16
00:01:26,000 --> 00:01:33,680
So import the city_screen.dart file and now it should recognize what a city screen is.
16

17
00:01:33,680 --> 00:01:41,210
And finally we can end this with a semicolon and add our commas so that dart will reformat this code
17

18
00:01:41,210 --> 00:01:43,700
for us to be easily readable.
18

19
00:01:43,700 --> 00:01:47,420
So now let's hit save and let's check it out.
19

20
00:01:47,420 --> 00:01:54,710
Let's go ahead and click on the city icon and it pushes us towards the next screen which as you can
20

21
00:01:54,710 --> 00:01:56,660
see is pretty simple.
21

22
00:01:56,660 --> 00:02:02,690
All it has is a single back button which should take us back to the previous screen.
22

23
00:02:02,900 --> 00:02:05,890
And it's also got a get weather button.
23

24
00:02:06,080 --> 00:02:12,470
Now what we need here is a text field where the user can actually enter the city that they want to get
24

25
00:02:12,470 --> 00:02:15,730
the weather for.
25

26
00:02:15,880 --> 00:02:22,990
So in the Flutter cookbook, there's a whole bunch of articles relating to text field. And text field is
26

27
00:02:23,020 --> 00:02:29,230
just a text input widget. So it's a widget similar to every other widget that we've been using to style our
27

28
00:02:29,230 --> 00:02:29,750
UI.
28

29
00:02:30,520 --> 00:02:37,450
And we can use various properties such as decoration and style and border to change how it looks.
29

30
00:02:37,450 --> 00:02:38,640
So let's do that now.
30

31
00:02:38,650 --> 00:02:41,950
Let's create our text field widget.
31

32
00:02:42,250 --> 00:02:49,960
So I'm going to keep my app over on the right so that I can hot reload and update my style as I edit it
32

33
00:02:49,990 --> 00:02:50,740
in my code.
33

34
00:02:51,160 --> 00:02:58,190
So let's go into our city screen and right inside this container which currently contains null
34

35
00:02:58,210 --> 00:03:03,400
as a child, we're going to change that to contain our text field.
35

36
00:03:03,400 --> 00:03:10,210
Now this text field, if we save, you can see it show up which is just a single line. And it's following
36

37
00:03:10,270 --> 00:03:15,950
our Dart style that we defined at the beginning for our material app.
37

38
00:03:16,120 --> 00:03:22,030
The first thing I'm going to do is I'm going to change the decoration property. And you can see this
38

39
00:03:22,030 --> 00:03:28,870
expects a widget that's called an input decoration. An input decoration has a whole bunch of properties
39

40
00:03:28,870 --> 00:03:36,070
that we can change including things such as the content padding or has a floating placeholder or a
40

41
00:03:36,070 --> 00:03:38,150
hint text, et cetera.
41

42
00:03:38,290 --> 00:03:45,310
And what we're going to change is we're going to change it's fill property and this will make the
42

43
00:03:45,310 --> 00:03:48,900
container filled with color instead of just a single line.
43

44
00:03:49,180 --> 00:03:53,040
So let's set that to true, hit save.
44

45
00:03:53,200 --> 00:03:58,440
And now we should get a little bit of filledness to our text field.
45

46
00:03:58,660 --> 00:04:02,470
And now let's change the fill color to a white color.
46

47
00:04:05,250 --> 00:04:11,300
And now that should go from this sort of transparent white to a fully opaque white.
47

48
00:04:11,580 --> 00:04:15,580
And then we're going to give our field a icon as well.
48

49
00:04:15,690 --> 00:04:24,220
And this is going to use the icon creator which is going to be Icons.location_city.
49

50
00:04:24,270 --> 00:04:29,850
So the same icon that we had from before is going to go into our text field
50

51
00:04:29,880 --> 00:04:35,420
right on the left to indicate what should go in here.
51

52
00:04:35,480 --> 00:04:42,370
Now we're going to change the color of our icon to a white color to fit in with our current theme.
52

53
00:04:42,810 --> 00:04:51,000
So colors.whites, let's hit save and now that should look more matchy matchy with the rest of our
53

54
00:04:51,120 --> 00:04:55,930
app. And then I'm going to add what's called a hint text.
54

55
00:04:55,930 --> 00:05:02,740
So this is the placeholder text that's gonna go in here to tell the user what they should type in here.
55

56
00:05:03,340 --> 00:05:10,680
And the hint text is going to say, 'Enter City Name'. Once we hit save
56

57
00:05:10,690 --> 00:05:12,700
you'll notice that nothing changes.
57

58
00:05:12,700 --> 00:05:16,860
Well the reason is because hint text, by default, is white.
58

59
00:05:17,260 --> 00:05:25,390
So we have to change the hint style to change that color. And hint style takes a text style widget as the
59

60
00:05:25,390 --> 00:05:26,320
value.
60

61
00:05:26,320 --> 00:05:36,450
And we can change the color here to a colors.gray maybe.
61

62
00:05:36,620 --> 00:05:44,480
Now let's hit save and we should see or hint text appear just like that.
62

63
00:05:44,660 --> 00:05:50,320
So now we've got this sort of weird shape at the moment for our text field.
63

64
00:05:50,320 --> 00:05:55,320
It's got a single line at the bottom and then it's kind of got a rectangle.
64

65
00:05:55,750 --> 00:05:59,740
Let's round that off by adding a border.
65

66
00:05:59,860 --> 00:06:06,360
So we're going to tap into the border property of our input declaration and we're going to use a out
66

67
00:06:06,380 --> 00:06:09,650
line input border.
67

68
00:06:10,210 --> 00:06:16,360
And of course this comes from reading the documentation for that border property on the Flutter docs.
68

69
00:06:16,620 --> 00:06:22,510
And then we're going to add a border radius which I'm going to set to a radius that is going to cover
69

70
00:06:22,600 --> 00:06:23,980
all four sides.
70

71
00:06:23,980 --> 00:06:28,860
And it's going to be a circular radius, so radius.circular.
71

72
00:06:29,290 --> 00:06:36,270
And the value I'm going to put in there is about a 10 for the radius. And let's add our commas  and
72

73
00:06:36,270 --> 00:06:37,260
hit save.
73

74
00:06:37,260 --> 00:06:44,910
So now it rounds off all the corners to look a bit more like an actual text field, and we can now add
74

75
00:06:44,970 --> 00:06:46,740
our border side.
75

76
00:06:46,770 --> 00:06:53,470
So I'm going to try and get rid of that bottom line there by changing the border side to none,
76

77
00:06:53,490 --> 00:07:02,820
so BorderSide.none. So now that should get rid of that border side
77

78
00:07:02,890 --> 00:07:11,410
right here and it looks more like a normal text field now. So the very last thing I have to fix is that
78

79
00:07:11,500 --> 00:07:16,060
previously we had a dark background without this white fill color.
79

80
00:07:16,390 --> 00:07:22,040
So when we had a white text going in here as I type it's fully visible.
80

81
00:07:22,060 --> 00:07:26,560
But now it's no longer visible because it's the same color as the background.
81

82
00:07:26,590 --> 00:07:32,100
So let's go into our text field and update the text style that goes in there.
82

83
00:07:32,170 --> 00:07:38,220
So I'm going to add a text style and this is going to have a color of black,
83

84
00:07:38,230 --> 00:07:42,730
so colors.black.
84

85
00:07:42,750 --> 00:07:51,720
Now let's hit save and you can see my text should now show up and be fully visible. Now that we've created
85

86
00:07:51,840 --> 00:07:57,320
all of these things that is pretty much going to stay constant for our text field,
86

87
00:07:57,390 --> 00:08:06,020
why don't we take all of this input decoration and move it into our constants file? So let's open up
87

88
00:08:06,080 --> 00:08:08,450
our constants file in our utilities
88

89
00:08:08,660 --> 00:08:18,530
and I'm going to add a new const variable which is going to be a kTextFieldInputDecoration and I'm
89

90
00:08:18,530 --> 00:08:24,650
going to set it to equal that input decoration that we created just now and cap it off with a semicolon.
90

91
00:08:26,760 --> 00:08:33,870
And then going back to our city screen, I'm going to change the decoration to that kTextFieldInput
91

92
00:08:33,960 --> 00:08:40,420
Decoration, and hopefully when we hit save nothing will have changed.
92

93
00:08:40,540 --> 00:08:44,570
Now how do we get the value that we enter into here
93

94
00:08:44,680 --> 00:08:49,750
out of the text field? Because that's essentially what we need if we want to be able to grab the weather
94

95
00:08:49,990 --> 00:08:53,100
for the city location that the user type in.
95

96
00:08:53,200 --> 00:08:55,840
So let's say I typed in the word London right?
96

97
00:08:55,840 --> 00:08:59,170
How do I get that value out?
97

98
00:08:59,230 --> 00:09:05,370
Well in the text field, there's also a property called onChanged.
98

99
00:09:05,440 --> 00:09:11,310
Just like how our buttons have a property called onTap or onPressed or onHold,
99

100
00:09:11,470 --> 00:09:19,870
we have a onChanged for our text field. And this will trigger and pass in the value that's in the text
100

101
00:09:19,870 --> 00:09:23,720
field into this anonymous callback that we put in here.
101

102
00:09:24,100 --> 00:09:30,820
So if we go ahead and print the value, then you'll see that every single time that the text in the text
102

103
00:09:30,820 --> 00:09:38,700
field changes, it will trigger the onChanged and it'll print out the value. So let's start off with a
103

104
00:09:38,820 --> 00:09:47,160
L, so L goes in printed. L O L O and then L N D O N. So you can see that for every single change, I'm getting
104

105
00:09:47,160 --> 00:09:52,500
the print statement to trigger and print it into my console.
105

106
00:09:52,530 --> 00:10:00,660
Now all we have to do is to store that value and pass it to our weather model to be able to get the
106

107
00:10:00,660 --> 00:10:03,080
weather for that particular city.
107

108
00:10:03,090 --> 00:10:06,560
So for all of that, I'll see you on the next lesson.
