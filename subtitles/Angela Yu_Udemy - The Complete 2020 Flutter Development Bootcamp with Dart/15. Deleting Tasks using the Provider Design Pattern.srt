0
1
00:00:00,450 --> 00:00:08,040
Now that we can check off tasks and add tasks and read tasks, we're on to the very last thing we have
1

2
00:00:08,040 --> 00:00:15,600
to implement which is how can we allow users to be able to delete tasks from the app? And I want to be
2

3
00:00:15,600 --> 00:00:21,100
able to do that when a user simply touches and holds a particular item.
3

4
00:00:21,300 --> 00:00:23,820
And as long as they've held it long enough
4

5
00:00:23,820 --> 00:00:26,070
so a long touch,
5

6
00:00:26,070 --> 00:00:33,390
then I want that item to delete off the list. So we know that our task is being provided right at the
6

7
00:00:33,390 --> 00:00:35,060
top of our widget tree
7

8
00:00:35,370 --> 00:00:39,970
and we know that that interaction is also being detected inside
8

9
00:00:39,990 --> 00:00:43,110
our task tile, so low down in the tree.
9

10
00:00:43,110 --> 00:00:50,880
How can we use what we know and what we've seen in the last lesson to be able to delete that task out
10

11
00:00:50,880 --> 00:00:53,370
of our task list?
11

12
00:00:53,370 --> 00:00:59,340
So in this case that behavior is gonna be detected right at the bottom of the tree in the task tile
12

13
00:01:00,060 --> 00:01:07,260
and then it has to be able to take that information and give it over to the task list so that it's able
13

14
00:01:07,260 --> 00:01:15,600
to update the task data and remove that task that the user selected. And then that information needs
14

15
00:01:15,600 --> 00:01:21,830
to filter through the tree for all the interested parties, namely the task screen and the task list.
15

16
00:01:23,170 --> 00:01:30,100
I recommend giving this one a go and try to implement that functionality and deleting that very item where
16

17
00:01:30,100 --> 00:01:32,050
the long top is detected.
17

18
00:01:32,560 --> 00:01:38,980
And if you get stuck along the way, just use Stack Overflow or search through Google and overcome those
18

19
00:01:38,980 --> 00:01:41,260
hurdles that come your way.
19

20
00:01:41,350 --> 00:01:45,190
And by the end, I promise you'll be a stronger developer for it.
20

21
00:01:45,790 --> 00:01:51,280
And once you're done you can also come back and check with me where I'm gonna go through a version of
21

22
00:01:51,280 --> 00:01:54,490
the solution. Pause the video now and give that a go.
22

23
00:01:57,540 --> 00:02:03,980
The first thing we have to do is figure out well how we can actually detect that long press.
23

24
00:02:03,990 --> 00:02:12,270
Now luckily for us, the list tile actually has a property called onLongPress which as it suggests, will
24

25
00:02:12,300 --> 00:02:16,560
trigger a callback when it detects a long press,
25

26
00:02:16,740 --> 00:02:23,260
so a couple of seconds. Now we can use exactly the same thing that we did with the checkbox callback.
26

27
00:02:23,310 --> 00:02:31,740
We can create a new final function called a longPressCallback and we're also going to initialize it
27

28
00:02:31,890 --> 00:02:34,350
inside the constructor
28

29
00:02:34,350 --> 00:02:40,890
so right here. And we're going to pass it over to the onLongPress.
29

30
00:02:40,890 --> 00:02:48,150
So when the list tile detects a long press, it's gonna trigger the callback and the callback is going
30

31
00:02:48,150 --> 00:02:54,960
to come from the parent of the task tile which is of course our task list where our consumer exists
31

32
00:02:55,260 --> 00:03:00,540
and where we do all of the updating to our provided task data.
32

33
00:03:00,570 --> 00:03:08,670
So in addition to our checkbox callback, I'm now also going to add a longPressCallback. And in this
33

34
00:03:08,670 --> 00:03:17,340
case what I'm going to trigger is simply a call to a delete method in our task data.
34

35
00:03:17,910 --> 00:03:24,420
So I'm going to create another method called deleteTask and I'm going to pass over the task that needs
35

36
00:03:24,420 --> 00:03:32,070
to be deleted. And then I'm going to tap into my list of tasks and I'm going to call the remove method
36

37
00:03:32,580 --> 00:03:40,380
and I'm going to remove a particular object which is going to be the task that the user wanted to delete
37

38
00:03:40,380 --> 00:03:42,450
which is passed in right here.
38

39
00:03:42,450 --> 00:03:49,440
And of course I also need to notify all my listeners so that they can update as needed.
39

40
00:03:49,440 --> 00:03:55,710
Now if I hit save over here and I go to my task list inside my long press callback,
40

41
00:03:55,740 --> 00:04:03,630
so when somebody long presses on my task tile, what I want to happen is I want it to tap into my task
41

42
00:04:03,690 --> 00:04:04,460
data,
42

43
00:04:04,620 --> 00:04:12,370
call that method deleteTask and pass in that task which is the current task in the task tile.
43

44
00:04:12,510 --> 00:04:14,970
So that's all I need to do.
44

45
00:04:15,000 --> 00:04:24,960
And if I hit save and head over to my Todoey app and simply press and hold then, you'll see that my
45

46
00:04:24,990 --> 00:04:32,010
items will get deleted. And it doesn't matter if it's completed or not completed doesn't matter if it's
46

47
00:04:32,280 --> 00:04:36,330
higher up in the list, it all just works.
47

48
00:04:36,330 --> 00:04:43,650
And it also updates right here where I'm listening for the number of tasks in my task list.
48

49
00:04:43,650 --> 00:04:44,920
So that's it.
49

50
00:04:45,030 --> 00:04:54,270
That's all we need to do to build our Todoey app which allows us to add tasks, checkoff tasks and
50

51
00:04:54,390 --> 00:04:55,490
delete tasks.
51

52
00:04:55,650 --> 00:05:03,330
So brilliant. We've managed to use provider to manage the state of our tasks and we've managed to learn
52

53
00:05:03,330 --> 00:05:11,220
about a number of new things such as the list view builder or lifting state up and understand exactly
53

54
00:05:11,220 --> 00:05:12,820
what state management is
54

55
00:05:12,840 --> 00:05:19,860
anyways. Have a play around with the code and try and see if you can make some small tweaks or try to
55

56
00:05:19,860 --> 00:05:26,120
extend the app so that you get more practice using state management with the provider package.
56

57
00:05:26,130 --> 00:05:32,280
I hope you've had fun building this app with me and be sure to complete the questionnaire where you
57

58
00:05:32,280 --> 00:05:38,130
can vote for the next topic you want to see in the course. And if there's enough students who are interested
58

59
00:05:38,130 --> 00:05:40,230
in it, then I will build it.
59

60
00:05:40,290 --> 00:05:44,650
So that's all from me for now and I'll see you on the next course that
60

61
00:05:44,730 --> 00:05:45,180
you take.
