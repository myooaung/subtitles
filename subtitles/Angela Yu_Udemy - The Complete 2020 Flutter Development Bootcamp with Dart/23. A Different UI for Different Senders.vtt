WEBVTT
0
1
00:00:01.000 --> 00:00:06.960
In this lesson, we'll continue making additional cosmetic improvements to our app to improve the styling.
1

2
00:00:07.000 --> 00:00:12.880
In particular we will change both the colour and the alignment of our message bubbles dependent on the
2

3
00:00:12.880 --> 00:00:13.820
sender.
3

4
00:00:13.930 --> 00:00:17.050
But there are some other issues that we have to tackle too.
4

5
00:00:17.050 --> 00:00:23.080
For example, we need to ensure that the hero image on our registration and login screen can handle different
5

6
00:00:23.080 --> 00:00:25.150
screen sizes and aspect ratios.
6

7
00:00:26.350 --> 00:00:33.670
So here I have our app running both on Android and iOS and the first thing that I want to show you that
7

8
00:00:33.670 --> 00:00:41.350
we have to fix is, if you notice that on iOS especially in the later iPhones, the aspect ratio is a little
8

9
00:00:41.350 --> 00:00:42.190
bit different to
9

10
00:00:42.190 --> 00:00:48.040
Android. So we've got quite a lot of space in the vertical with less on the horizontal.
10

11
00:00:48.040 --> 00:00:54.640
So this means that when I go into the register screen in the Android version and when the keyboard gets
11

12
00:00:54.640 --> 00:01:01.030
popped up through that little icon and I enable the virtual keyboard or the soft keyboard, you can see
12

13
00:01:01.030 --> 00:01:04.750
that much of our button is actually off the screen.
13

14
00:01:04.750 --> 00:01:07.030
So how can we fix this?
14

15
00:01:07.030 --> 00:01:15.400
Well we can actually wrap our hero widget inside a flexible widget and what this does is that it says,
15

16
00:01:15.400 --> 00:01:18.570
'Well, this is the size that it should try to take up,
16

17
00:01:18.580 --> 00:01:20.890
so about 200 pixels.
17

18
00:01:20.890 --> 00:01:28.120
But if it can't, then it can be flexible about it and be smaller so that other parts of the screen is
18

19
00:01:28.120 --> 00:01:29.230
visible.'
19

20
00:01:29.230 --> 00:01:36.400
So it's a good idea to wrap our log in screen hero inside a flexible widget as well so that we cover
20

21
00:01:36.400 --> 00:01:37.590
that basis too.
21

22
00:01:38.470 --> 00:01:45.760
So now let's hit save and if we now take a look at our emulator, you'll notice that our hero widget which
22

23
00:01:45.760 --> 00:01:52.600
contains our image will actually get smaller when the keyboard pops up and we pop down the keyboard
23

24
00:01:52.840 --> 00:01:55.350
then it'll come back to its actual size.
24

25
00:01:55.360 --> 00:02:02.110
So this way we don't have any of those terrible yellow and black stripes on screen telling us a part
25

26
00:02:02.110 --> 00:02:04.330
of our UI has actually overflowed.
26

27
00:02:05.500 --> 00:02:11.350
Now that we've done that, we will change both the color and the alignment of our message bubbles depending
27

28
00:02:11.350 --> 00:02:12.340
on the sender.
28

29
00:02:12.430 --> 00:02:16.190
This is quite important from a user experience point of view.
29

30
00:02:16.310 --> 00:02:20.010
Let's take a look at what our app is like to use with more than one user.
30

31
00:02:20.540 --> 00:02:28.800
I'm going to log in as angela@email.com on my iOS  simulator. And then I'm going to go over to
31

32
00:02:28.800 --> 00:02:38.670
the emulator and I'm going to register a new user. We'll call it jack@jackbauer.com and let's
32

33
00:02:38.670 --> 00:02:47.850
type a password and hit register.
33

34
00:02:48.100 --> 00:02:57.130
So now I've got both users shown on screen and you can tell that if I type a message over here, say 'Hello
34

35
00:02:57.160 --> 00:03:05.110
Jack' and send it, then you'll see that that message appears over here but not mentioning the order, which
35

36
00:03:05.110 --> 00:03:07.150
is out of order, which we'll fix.
36

37
00:03:07.150 --> 00:03:11.650
But it's also really hard to tell who sent that message right?
37

38
00:03:11.650 --> 00:03:16.660
Like it looks like it's all from the same person even though there's lots of people in this group chat.
38

39
00:03:17.980 --> 00:03:21.290
A much better user experience would be something like this.
39

40
00:03:21.490 --> 00:03:28.190
Here our message bubbles are both aligned and colored differently depending on the sender.
40

41
00:03:28.240 --> 00:03:34.610
Also you can see that we've styled the corner of the message bubble to point towards the sender.
41

42
00:03:34.630 --> 00:03:35.900
This is what we're aiming for
42

43
00:03:35.920 --> 00:03:42.250
by the end of the lesson. Let's tackle the appearance of our message bubbles on our chat screen first.
43

44
00:03:43.240 --> 00:03:45.540
Instead of having a bubble,
44

45
00:03:45.580 --> 00:03:50.260
I want to have it have a little almost like a speech arrow right? So that it's a bubble
45

46
00:03:50.260 --> 00:03:56.080
but then there's a little corner here showing which side it came from or showing which sender it came from.
46

47
00:03:56.170 --> 00:04:01.750
To do that we have to split up our border radius for that blue material.
47

48
00:04:01.780 --> 00:04:08.800
So instead of just having a all round circular border, we can actually change it to use something called
48

49
00:04:09.010 --> 00:04:11.350
BorderRadius.only.
49

50
00:04:11.920 --> 00:04:19.150
And this allows us to set a different border radius for each of the corners. So we can say that we want
50

51
00:04:19.240 --> 00:04:23.890
a top left of probably circular 30,
51

52
00:04:26.980 --> 00:04:38.520
and we want a bottom left of the same 30 circular radius. And we finally also want one on the bottom
52

53
00:04:38.610 --> 00:04:39.420
right
53

54
00:04:39.450 --> 00:04:43.140
that's also going to be the same 30 pixels.
54

55
00:04:43.740 --> 00:04:51.450
So now, we should have a broader radius that has a round border for the top left, bottom left and bottom
55

56
00:04:51.450 --> 00:04:52.450
right
56

57
00:04:52.470 --> 00:04:59.160
and if we had save now, you'll see that our speech bubbles now have a little pointy part that points
57

58
00:04:59.160 --> 00:05:01.360
to the user that sent it.
58

59
00:05:01.410 --> 00:05:09.180
So now that we've got it like this, it would be nice if we could change the appearance for any messages
59

60
00:05:09.180 --> 00:05:12.920
that came from other users other than ourselves.
60

61
00:05:12.930 --> 00:05:18.900
So for example, the messages could have a different color and they could maybe be on the left rather
61

62
00:05:18.900 --> 00:05:19.950
than on the right.
62

63
00:05:20.070 --> 00:05:25.560
And the little pointy arrow could be pointing to the top left corner and all sorts of things that we
63

64
00:05:25.560 --> 00:05:30.510
can change to differentiate which messages came from us versus from other people.
64

65
00:05:31.050 --> 00:05:33.420
Now how can we do this?
65

66
00:05:33.450 --> 00:05:38.600
Well we know that over here, we have this thing called loggedInUser
66

67
00:05:38.640 --> 00:05:39.180
right?
67

68
00:05:39.210 --> 00:05:44.250
The current user saved inside this Firebase user object.
68

69
00:05:44.430 --> 00:05:52.620
So that means that if we move this loggedInUser out to the same place where we've got our Firestore,
69

70
00:05:53.010 --> 00:06:01.440
then we can access it inside our messages stream. And what we can do here is once we've gotten access
70

71
00:06:01.500 --> 00:06:12.920
to these senders email, well we can also create a currentUser and we can send that to the logged in
71

72
00:06:12.920 --> 00:06:15.470
user's email address.
72

73
00:06:15.560 --> 00:06:21.650
So we've got an email of the person who sent this particular message that we're looping through and
73

74
00:06:21.650 --> 00:06:25.400
we've got the email of the user who's currently logged in.
74

75
00:06:25.430 --> 00:06:32.660
So it's not difficult to compare whether if these to match to see whether if this message that we're
75

76
00:06:32.660 --> 00:06:39.820
going through at the moment is in fact sent by the person who's currently logged into the app. We could
76

77
00:06:39.820 --> 00:06:46.470
simply just make an IF statement checking if currentUser is equal to messageSender.
77

78
00:06:46.660 --> 00:06:49.150
Well that means that they match,
78

79
00:06:49.150 --> 00:06:49.920
right?
79

80
00:06:49.930 --> 00:06:54.850
This means that the message is going to be from the logged in user.
80

81
00:06:57.620 --> 00:07:04.130
So how can we send a variable over to our message bubble?
81

82
00:07:04.130 --> 00:07:06.180
Maybe we can have something that's a boolean
82

83
00:07:06.180 --> 00:07:15.710
called isMe and it could be set to True or false depending on whether if the message is from the current
83

84
00:07:15.770 --> 00:07:16.340
user.
84

85
00:07:16.820 --> 00:07:24.260
So we have this isMe variable and we initialize it when we create our message bubbles. And we can send
85

86
00:07:24.260 --> 00:07:27.410
it over based off our IF statement.
86

87
00:07:27.530 --> 00:07:34.820
But instead of using an IF statement, we can just use the condition. The double equals will test for equality
87

88
00:07:34.820 --> 00:07:41.040
between the current user and the logged in user's email and give us either true or false.
88

89
00:07:41.330 --> 00:07:44.050
If the currentUser is equal to the messageSender 
89

90
00:07:44.300 --> 00:07:47.690
and if that's the case, then isMe should be set to true.
90

91
00:07:47.750 --> 00:07:51.300
And if that's false, then isMe should be set to false.
91

92
00:07:51.320 --> 00:07:58.160
So now that means inside our build method for our message bubble, we have access to this boolean called
92

93
00:07:58.190 --> 00:07:59.050
isMe.
93

94
00:07:59.060 --> 00:08:04.890
So we know when we're building a bubble that consists of a message from me.
94

95
00:08:04.940 --> 00:08:13.580
So how's  a challenge? I want you to change the color of the message bubble based off that property.
95

96
00:08:13.640 --> 00:08:22.100
So if it is me, the bubble should have that light blue accent. But if it isn't me, then it should be a
96

97
00:08:22.100 --> 00:08:24.020
white bubble instead.
97

98
00:08:24.020 --> 00:08:29.450
So pause the video and see if you can complete this challenge. All right.
98

99
00:08:29.480 --> 00:08:33.080
So again we're going to need to use that ternary operator.
99

100
00:08:33.080 --> 00:08:41.450
And now we're checking the value of isMe. If it's true, then my messages will be light blue and if it's
100

101
00:08:41.480 --> 00:08:46.190
not sent by me then we're going to set it's background color to white.
101

102
00:08:46.700 --> 00:08:53.660
So now if we hit save and once you've restarted the app, you'll see that all the messages that are sent
102

103
00:08:53.660 --> 00:09:00.740
by the current user who's logged into the iPhone, which is angela@email.com, is blue. But all the
103

104
00:09:00.740 --> 00:09:06.680
ones that were sent by other users like angela@gmail.com or jack@jackbauer.com, well they're
104

105
00:09:06.680 --> 00:09:07.670
white.
105

106
00:09:07.670 --> 00:09:12.630
The only problem is that we can't see the message in it because it's also white.
106

107
00:09:12.650 --> 00:09:19.300
So let's go ahead and change the color of the text of the message bubbles which are sent by other users
107

108
00:09:19.550 --> 00:09:23.010
and we'll change it to a black54.
108

109
00:09:23.360 --> 00:09:30.440
So we can delete our IF statement now and inside where we have our TextStyle, instead of having it all
109

110
00:09:30.440 --> 00:09:31.250
as white,
110

111
00:09:31.250 --> 00:09:37.520
we're going to check to see if isMe is true, then it's white but otherwise the color is going to be
111

112
00:09:37.520 --> 00:09:40.330
colors.black54.
112

113
00:09:40.370 --> 00:09:46.700
Now the next thing that we want to change is to move all the messages that are sent by other people
113

114
00:09:46.910 --> 00:09:51.960
over to the left so that we keep all the messages that we've sent on the right.
114

115
00:09:52.010 --> 00:09:58.920
So pause the video and see if you can figure out how to do that.
115

116
00:09:58.950 --> 00:09:59.310
All right.
116

117
00:09:59.340 --> 00:10:05.550
So we've got this property for our messages which is called CrossAxisAlignment. And it's by default
117

118
00:10:05.610 --> 00:10:15.300
set to end which means it's on the right side. And we can change this to change it to CrossAxisaAlignment.
118

119
00:10:15.570 --> 00:10:21.090
start, if we want it to be lined up on the left.
119

120
00:10:21.370 --> 00:10:28.510
So now if we restart our app and log in again, you'll see that the messages are sent by other people
120

121
00:10:28.510 --> 00:10:34.410
are on the left, they have black text and white background and it's now looking pretty good.
121

122
00:10:34.450 --> 00:10:38.150
The only odd thing out is this little corner here.
122

123
00:10:38.350 --> 00:10:44.260
It would be great if this little straight corner was over here pointing at the center of the message
123

124
00:10:44.680 --> 00:10:52.750
on the top left corner when it sent by somebody else. So pause the video and solve that one last challenge.
124

125
00:10:56.350 --> 00:10:56.650
All right.
125

126
00:10:56.680 --> 00:11:01.370
So we've got this thing called border radius which is determining where that point is.
126

127
00:11:01.450 --> 00:11:06.270
And we're basically saying that it's circular on the top left, bottom left and bottom right.
127

128
00:11:06.310 --> 00:11:11.380
Which means that the pointy bit, the only bit that's still left as square, is the top
128

129
00:11:11.380 --> 00:11:21.500
right. Now we need to change that so that when it is me, this is the case. But when it's not me
129

130
00:11:21.550 --> 00:11:25.660
well then in that case, we have to provide a different border radius.
130

131
00:11:26.800 --> 00:11:30.370
So we're again going to go for a BorderRadius.only
131

132
00:11:30.580 --> 00:11:34.450
and we need to have a bottom left and bottom right
132

133
00:11:34.540 --> 00:11:37.480
both as rounded corners.
133

134
00:11:37.480 --> 00:11:41.770
And the only one that has to be a non-rounded corner is the top left.
134

135
00:11:41.800 --> 00:11:45.980
So the last one that we have to make rounded is the top right.
135

136
00:11:46.000 --> 00:11:48.680
It's kind of confusing and there's a lot of corners.
136

137
00:11:48.730 --> 00:11:52.090
But if you think about, it it should make sense.
137

138
00:11:53.710 --> 00:12:02.170
So now when I type a message over here as jack@jackbauer.com and I hit send, then it comes in as a white
138

139
00:12:02.170 --> 00:12:02.930
message.
139

140
00:12:03.100 --> 00:12:10.810
But if I type over here as angela@email.com, then you can see it comes in as a blue message and
140

141
00:12:10.930 --> 00:12:15.340
all the bubbles are looking exactly the way they should do.
141

142
00:12:15.400 --> 00:12:15.880
Good stuff.
142

143
00:12:15.910 --> 00:12:17.410
So what else is left?
143

144
00:12:17.410 --> 00:12:19.420
What other issues should we fix?
144

145
00:12:19.420 --> 00:12:22.270
Well let's think about our user experience again.
145

146
00:12:22.420 --> 00:12:28.730
Typically in a chat app you would expect to see the most recent messages at the bottom of the list.
146

147
00:12:28.840 --> 00:12:35.690
Also when a new message arrives, you would expect your screen to update and show you the newest message.
147

148
00:12:35.710 --> 00:12:41.860
In other words, we would need our list view to scroll down to the bottom every time it updates.
148

149
00:12:41.860 --> 00:12:48.660
Speaking of having the newest messages show up at the bottom, why are our chat messages not ordered chronologically?
149

150
00:12:48.660 --> 00:12:54.760
Why all the orders are so strange, why is it coming in right down here?
150

151
00:12:54.760 --> 00:13:02.020
Well this is because we initialized our Firebase database a long time ago and we've been doing various
151

152
00:13:02.020 --> 00:13:06.420
changes and we've been messing around with it throughout this module.
152

153
00:13:06.520 --> 00:13:12.790
So in order to fix the ordering, the first thing we have to do is to go into Firebase and actually delete
153

154
00:13:12.880 --> 00:13:14.480
the entire collection.
154

155
00:13:14.550 --> 00:13:22.520
And because this is so outrageous, they actually ask you to confirm by typing in the name of that collection.
155

156
00:13:22.660 --> 00:13:28.000
We're going to leave this collection as blank because we're going to be filling in all the data over
156

157
00:13:28.030 --> 00:13:34.420
from our app. And you can see that as soon as I've deleted the collection, our apps have responded by
157

158
00:13:34.420 --> 00:13:36.620
wiping the messages too.
158

159
00:13:36.640 --> 00:13:46.270
So now over here, I'm going to type the inaugural message from the Jack account and I'll type one from
159

160
00:13:46.630 --> 00:13:48.610
the Angela account.
160

161
00:13:48.730 --> 00:13:58.120
Now at this point there's one other problem, which is why is it that the messages are being ordered in
161

162
00:13:58.120 --> 00:13:59.800
such a strange way?
162

163
00:13:59.950 --> 00:14:03.200
Why are they all appearing right at the top?
163

164
00:14:03.460 --> 00:14:12.640
And you can see that as I add more messages in here, that at some point it's going to go beyond what
164

165
00:14:12.640 --> 00:14:17.590
is visible on the screen. So you can see that that message already went down all the way to there.
165

166
00:14:17.620 --> 00:14:23.620
So if I add another message, you can see that it's not going to show up and it's not going to scroll
166

167
00:14:23.620 --> 00:14:24.130
to it.
167

168
00:14:24.130 --> 00:14:25.770
So how can we make it do that?
168

169
00:14:25.780 --> 00:14:30.260
How can we make it scroll to a position?
169

170
00:14:30.370 --> 00:14:36.460
Well the way that we can do this is by adding a property to our list view.
170

171
00:14:36.460 --> 00:14:41.830
So at the moment we have a list view that only has two properties, padding and children.
171

172
00:14:41.950 --> 00:14:46.120
One of the properties we can add in here is something called reverse.
172

173
00:14:46.120 --> 00:14:54.870
And if we set this to true, then you can see now my list view is sticky towards the bottom of the view.
173

174
00:14:54.910 --> 00:14:59.740
So that means if I type a message in here, it doesn't really matter what it is,
174

175
00:14:59.860 --> 00:15:07.030
it always goes right to the top but we always have the bottom of the list view showing instead of previously
175

176
00:15:07.060 --> 00:15:10.660
when it was always trying to stay at the top.
176

177
00:15:10.660 --> 00:15:17.140
So now we have a different problem though namely that all our messages get added but they go right to
177

178
00:15:17.140 --> 00:15:18.140
the top.
178

179
00:15:18.160 --> 00:15:22.070
So how can we reverse our list of messages?
179

180
00:15:22.090 --> 00:15:29.980
Well when we get our messages from our snapshot.data.documents, we know that this is a list of
180

181
00:15:29.980 --> 00:15:35.890
document snapshots so we can use something called 'reversed' on any list.
181

182
00:15:35.890 --> 00:15:41.470
And what this does is it will reverse the order of the list.
182

183
00:15:41.500 --> 00:15:50.860
That means that whenever we create a new message now, it will go in into our list, our list will get reversed.
183

184
00:15:50.860 --> 00:15:58.490
So now when we hit send, you'll see it appears at the very bottom which is exactly what we want.
184

185
00:15:58.510 --> 00:16:04.900
So all the new messages come in at the very end and it shows at the very bottom of the list which has
185

186
00:16:04.900 --> 00:16:11.080
now reversed in order but is also the bottom of the list view that's always shown on screen without
186

187
00:16:11.080 --> 00:16:12.770
having to scroll.
187

188
00:16:12.800 --> 00:16:18.400
Now all we need to do is tidy up the last bits of our code including the parts that we commented out
188

189
00:16:18.490 --> 00:16:24.250
previously when we were testing our code, and also deleting the parts which we no longer need including
189

190
00:16:24.250 --> 00:16:30.610
the getMessages method and the messagesStream because we've now replaced it with our messagesStream
190

191
00:16:30.690 --> 00:16:36.560
widget. And we can delete it from our onPressed as well.
191

192
00:16:36.560 --> 00:16:37.280
Brilliant.
192

193
00:16:37.280 --> 00:16:42.920
So we've made quite a few styling and user experience improvements in this lesson by configuring our
193

194
00:16:42.920 --> 00:16:46.260
message bubbles and list view. In the next lesson,
194

195
00:16:46.280 --> 00:16:52.460
we're going to tackle the last part of our chat app namely setting the rules around authentication and
195

196
00:16:52.460 --> 00:16:53.210
security.
