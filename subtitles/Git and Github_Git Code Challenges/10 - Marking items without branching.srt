1
00:00:00,002 --> 00:00:03,008
(tones ringing)

2
00:00:03,008 --> 00:00:04,006
- [Instructor] Most projects have

3
00:00:04,006 --> 00:00:06,000
what we call a main branch,

4
00:00:06,000 --> 00:00:08,003
and this is where the canonical history

5
00:00:08,003 --> 00:00:09,007
of the project lives.

6
00:00:09,007 --> 00:00:12,003
Now, occasionally, you need a way to establish

7
00:00:12,003 --> 00:00:15,003
that certain commits in that main commit history

8
00:00:15,003 --> 00:00:17,007
are finished versions of the project.

9
00:00:17,007 --> 00:00:19,005
How does Git help you do that?

10
00:00:19,005 --> 00:00:21,001
I'll give you a couple of seconds to think about

11
00:00:21,001 --> 00:00:23,001
how you would do something like this.

12
00:00:23,001 --> 00:00:23,009
(tones ringing)

13
00:00:23,009 --> 00:00:25,006
(upbeat music)

14
00:00:25,006 --> 00:00:27,001
(tones ringing)

15
00:00:27,001 --> 00:00:29,007
Now the answer to this is tags,

16
00:00:29,007 --> 00:00:32,006
and this is how you can create an identifier

17
00:00:32,006 --> 00:00:35,004
for a specific commit that will show you later

18
00:00:35,004 --> 00:00:38,003
that you have reached a version of the project.

19
00:00:38,003 --> 00:00:41,004
So if I do a git log command,

20
00:00:41,004 --> 00:00:44,004
you can see all of the different commits right here.

21
00:00:44,004 --> 00:00:47,004
So I can choose a specific commit and identify it

22
00:00:47,004 --> 00:00:49,008
as a current version of the project.

23
00:00:49,008 --> 00:00:52,002
Now if you just use the git tag command

24
00:00:52,002 --> 00:00:54,001
and then you add a version,

25
00:00:54,001 --> 00:00:56,009
and typically the versions are named like this,

26
00:00:56,009 --> 00:00:58,006
use the keyword v,

27
00:00:58,006 --> 00:01:02,005
and then you specify a large version number,

28
00:01:02,005 --> 00:01:04,008
and then sort of another medium version number,

29
00:01:04,008 --> 00:01:07,000
and a small version number.

30
00:01:07,000 --> 00:01:09,006
This is called semver and it means that,

31
00:01:09,006 --> 00:01:12,007
the last number means that you're creating a change

32
00:01:12,007 --> 00:01:15,005
in your project that doesn't break the project.

33
00:01:15,005 --> 00:01:19,002
The second number would be a new version

34
00:01:19,002 --> 00:01:21,005
that is not a major version of the project,

35
00:01:21,005 --> 00:01:22,007
so it's sort of a little bit better

36
00:01:22,007 --> 00:01:26,007
that it's not like a bug fix for the current project,

37
00:01:26,007 --> 00:01:30,001
but some sort of big change that may break some things.

38
00:01:30,001 --> 00:01:32,002
And then updating this first number means

39
00:01:32,002 --> 00:01:35,008
that this is a major change in your project.

40
00:01:35,008 --> 00:01:38,001
So I'm just going to hit return right here,

41
00:01:38,001 --> 00:01:39,007
and it doesn't look like it did anything,

42
00:01:39,007 --> 00:01:42,007
but now if I just issue the git tag command by itself,

43
00:01:42,007 --> 00:01:45,003
I can see that there is one version

44
00:01:45,003 --> 00:01:48,006
of this project, version 2.0.1.

45
00:01:48,006 --> 00:01:51,007
So I'm going to hit Q and I'm going to do a git log.

46
00:01:51,007 --> 00:01:56,003
I'll do the one line version here, and that's going to show me

47
00:01:56,003 --> 00:02:01,005
that the last commit that I have has a tag of 2.0.1.

48
00:02:01,005 --> 00:02:04,009
And that's going to show up on GitHub as a release.

49
00:02:04,009 --> 00:02:07,009
I can pick another version here.

50
00:02:07,009 --> 00:02:10,000
So let's say that I wanted to identify this

51
00:02:10,000 --> 00:02:13,008
as maybe version 2.0 of that project,

52
00:02:13,008 --> 00:02:15,006
and then I'm going to hit Q,

53
00:02:15,006 --> 00:02:18,001
and once again I'll do a git tag.

54
00:02:18,001 --> 00:02:25,003
I'll do v2.0.0, and this time I'm going to paste the ID

55
00:02:25,003 --> 00:02:29,009
of the commit that I want to specify as having that tag.

56
00:02:29,009 --> 00:02:31,006
So if I hit return,

57
00:02:31,006 --> 00:02:33,002
again, it doesn't look like it did anything,

58
00:02:33,002 --> 00:02:36,003
but I'll issue the git tag command again,

59
00:02:36,003 --> 00:02:38,004
and now I can see that there's two versions.

60
00:02:38,004 --> 00:02:39,008
Let's do one more.

61
00:02:39,008 --> 00:02:42,007
So git log --oneline.

62
00:02:42,007 --> 00:02:44,007
It's going to show me this long history

63
00:02:44,007 --> 00:02:47,004
and I'll just keep on scrolling until I see

64
00:02:47,004 --> 00:02:51,002
that there is sort of a place where I appear

65
00:02:51,002 --> 00:02:53,006
to have finished my project right here.

66
00:02:53,006 --> 00:02:55,000
So this is say the final state.

67
00:02:55,000 --> 00:02:57,005
So I'm going to consider this as version one.

68
00:02:57,005 --> 00:03:01,001
So I'm going to copy that hash, hit the Q key,

69
00:03:01,001 --> 00:03:05,006
and I'll just back up, hitting the up arrow until I get

70
00:03:05,006 --> 00:03:08,007
to this right here, and I'll paste that new commit.

71
00:03:08,007 --> 00:03:11,008
I want to make sure that I say that this is version one,

72
00:03:11,008 --> 00:03:13,004
not version two.

73
00:03:13,004 --> 00:03:17,004
I hit Enter, and now in my git tag command

74
00:03:17,004 --> 00:03:19,007
I can see three different commits.

75
00:03:19,007 --> 00:03:21,001
Now, if I want to delete a commit

76
00:03:21,001 --> 00:03:24,002
because these can be rearranged at any point in time,

77
00:03:24,002 --> 00:03:27,005
then all I do is git tag -d,

78
00:03:27,005 --> 00:03:31,001
and then one of the names of the tag

79
00:03:31,001 --> 00:03:32,001
that you want to delete.

80
00:03:32,001 --> 00:03:36,002
So this will be like v1.0.0.

81
00:03:36,002 --> 00:03:41,002
And now that tag is gone, so if I issue a git tag command,

82
00:03:41,002 --> 00:03:44,009
it's going to no longer be on this list.

83
00:03:44,009 --> 00:03:50,001
So tags will help you identify a point in your main branch

84
00:03:50,001 --> 00:03:53,005
where you have reached a version of the project.

85
00:03:53,005 --> 00:03:54,008
And again, if you go to GitHub

86
00:03:54,008 --> 00:03:58,001
that's going to show up as a release,

87
00:03:58,001 --> 00:04:01,000
and you can always rearrange these, rename these,

88
00:04:01,000 --> 00:04:08,000
or just assign any part of your commit as a new tag.

