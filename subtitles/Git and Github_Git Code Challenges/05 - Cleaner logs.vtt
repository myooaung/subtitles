WEBVTT
1
00:00:00.000 --> 00:00:01.000
(videogame chiming)

2
00:00:01.000 --> 00:00:01.008
(bell dinging)

3
00:00:01.008 --> 00:00:03.009
(videogame chiming)

4
00:00:03.009 --> 00:00:05.001
- [Instructor] Git logs are a great way

5
00:00:05.001 --> 00:00:06.008
to take a peek at your history,

6
00:00:06.008 --> 00:00:09.003
but sometimes the history is too long,

7
00:00:09.003 --> 00:00:11.005
and you don't want to go through all of it.

8
00:00:11.005 --> 00:00:13.008
How can you get a more concise commit history

9
00:00:13.008 --> 00:00:17.002
within a date range containing a specific keyword?

10
00:00:17.002 --> 00:00:18.008
I'll give you a couple of seconds to think

11
00:00:18.008 --> 00:00:20.007
about how you would do something like this.

12
00:00:20.007 --> 00:00:23.003
(vidiogame whirling) (8-bit music)

13
00:00:23.003 --> 00:00:24.006
(vidiogame whirling)

14
00:00:24.006 --> 00:00:27.009
Most of us take the git log command for granted.

15
00:00:27.009 --> 00:00:30.005
It gives us a list of all of the commits

16
00:00:30.005 --> 00:00:33.002
along with the messages, the dates

17
00:00:33.002 --> 00:00:37.001
and these longer hashtags that we can use to refer to them.

18
00:00:37.001 --> 00:00:40.000
Let me go ahead and hit the Q key to get back.

19
00:00:40.000 --> 00:00:42.003
There's a lot of power in the git log statement

20
00:00:42.003 --> 00:00:44.008
that you can use by accessing different flags.

21
00:00:44.008 --> 00:00:47.008
So the first, and my favorite, is the oneline flag.

22
00:00:47.008 --> 00:00:53.003
So if I say git log oneline here, and I'm always

23
00:00:53.003 --> 00:00:56.005
mistyping this by forgetting that E, just saying online,

24
00:00:56.005 --> 00:00:58.002
cause I'm used to typing that word.

25
00:00:58.002 --> 00:01:00.006
So be careful there, and if you take a look at that,

26
00:01:00.006 --> 00:01:03.008
it gives you a much more concise history

27
00:01:03.008 --> 00:01:06.002
with a shorter hashtag right here

28
00:01:06.002 --> 00:01:10.001
as well as the branch info and the short message.

29
00:01:10.001 --> 00:01:12.009
So that's a little bit more useful, but we can improve

30
00:01:12.009 --> 00:01:16.006
on that even more by adding some additional flags.

31
00:01:16.006 --> 00:01:18.006
So let's try one that I really love,

32
00:01:18.006 --> 00:01:24.008
and that's the git log oneline, and we can use date flags.

33
00:01:24.008 --> 00:01:28.006
So we can say after, and in here we can type

34
00:01:28.006 --> 00:01:30.007
in pretty much English commands.

35
00:01:30.007 --> 00:01:33.004
So I know that I didn't do a commit yesterday,

36
00:01:33.004 --> 00:01:34.004
but we can type that in

37
00:01:34.004 --> 00:01:36.003
and see if we did anything yesterday.

38
00:01:36.003 --> 00:01:37.005
So I can do that.

39
00:01:37.005 --> 00:01:39.005
Notice that it just says "END" right there,

40
00:01:39.005 --> 00:01:41.002
and if I want to, I can switch that

41
00:01:41.002 --> 00:01:46.003
to pretty much anything else that makes sense to me.

42
00:01:46.003 --> 00:01:48.003
So I can say something like last week

43
00:01:48.003 --> 00:01:51.004
and looks like I had one commit last week.

44
00:01:51.004 --> 00:01:53.005
So let's try some more.

45
00:01:53.005 --> 00:01:59.003
So I could say something like six months ago

46
00:01:59.003 --> 00:02:02.007
and looks like this isn't a particularly active one.

47
00:02:02.007 --> 00:02:07.009
So let's try something much longer, 24 months ago.

48
00:02:07.009 --> 00:02:11.001
So that gives me a lot more information there,

49
00:02:11.001 --> 00:02:11.009
and that's pretty cool.

50
00:02:11.009 --> 00:02:15.006
I can narrow that down to a specific time frame,

51
00:02:15.006 --> 00:02:17.003
but I can do better than that.

52
00:02:17.003 --> 00:02:21.005
I can say I want to search for a specific keyword.

53
00:02:21.005 --> 00:02:27.001
So instead of after, I can type in grep,

54
00:02:27.001 --> 00:02:29.007
and that is a Linux type of search,

55
00:02:29.007 --> 00:02:33.006
and type in a keyword right here.

56
00:02:33.006 --> 00:02:35.004
So now it's finding these two commits

57
00:02:35.004 --> 00:02:37.003
that have the keyword "animation."

58
00:02:37.003 --> 00:02:38.008
Now I know I did another commit

59
00:02:38.008 --> 00:02:40.005
with the keyword "animation."

60
00:02:40.005 --> 00:02:46.000
Let's type Q again, but I probably had an uppercase letter.

61
00:02:46.000 --> 00:02:50.000
So you can use any sort of grepping commands here.

62
00:02:50.000 --> 00:02:53.001
So I can type in brackets and then put the capital

63
00:02:53.001 --> 00:02:56.001
and the lowercase A, and it's going to find a commit

64
00:02:56.001 --> 00:02:58.009
with either a capital or a lowercase A,

65
00:02:58.009 --> 00:03:02.001
and if I had Return, it's going to find all three of them.

66
00:03:02.001 --> 00:03:05.001
So this is a super way to find

67
00:03:05.001 --> 00:03:08.005
a specific commit with some parameters.

68
00:03:08.005 --> 00:03:11.005
Grep makes it even more powerful,

69
00:03:11.005 --> 00:03:13.005
and you should go into the.

70
00:03:13.005 --> 00:03:16.007
Rephrase, and I suggest that you look at the documentation

71
00:03:16.007 --> 00:03:19.004
because this is one of the richest commands

72
00:03:19.004 --> 00:03:22.000
in Git and the more you explore it,

73
00:03:22.000 --> 00:03:25.000
the better you'll be able to find your older commits.

