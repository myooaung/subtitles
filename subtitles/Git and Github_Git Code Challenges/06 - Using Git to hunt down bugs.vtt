WEBVTT
1
00:00:03.007 --> 00:00:06.007
- Bugs can be tough to find when you've got a large history

2
00:00:06.007 --> 00:00:10.000
and it's not clear when you introduced that bug.

3
00:00:10.000 --> 00:00:12.009
So how can Git help you track down a specific bug

4
00:00:12.009 --> 00:00:14.007
with a long history?

5
00:00:14.007 --> 00:00:16.004
I'll give you a couple of seconds to think

6
00:00:16.004 --> 00:00:22.007
about how you approach something like this.

7
00:00:22.007 --> 00:00:26.005
Now Git has a little known feature called git bisect,

8
00:00:26.005 --> 00:00:28.008
and it's really good for tracking these things down.

9
00:00:28.008 --> 00:00:30.007
So here I have a project that I did

10
00:00:30.007 --> 00:00:32.007
and I know that in the past,

11
00:00:32.007 --> 00:00:36.002
this text would fade out as I scrolled up

12
00:00:36.002 --> 00:00:37.008
and that's not happening anymore.

13
00:00:37.008 --> 00:00:41.006
So at some point I made some change that modified that.

14
00:00:41.006 --> 00:00:45.005
So let's see if we can use this feature to figure that out.

15
00:00:45.005 --> 00:00:48.004
So I'm going to start a bisecting session

16
00:00:48.004 --> 00:00:52.009
by issuing a git bisect start command.

17
00:00:52.009 --> 00:00:56.003
Now I know that this current commit is a bad commit.

18
00:00:56.003 --> 00:01:02.006
So I'm going to mark this commit as bad.

19
00:01:02.006 --> 00:01:03.004
Now, once you do that,

20
00:01:03.004 --> 00:01:05.009
you need to find a commit where you know

21
00:01:05.009 --> 00:01:10.000
that the project was working, so that bug did not exist.

22
00:01:10.000 --> 00:01:12.007
So I'm going to issue a git log command,

23
00:01:12.007 --> 00:01:16.001
and I'm going to scroll down through this stuff right here

24
00:01:16.001 --> 00:01:20.003
to see where I can find another commit that was working.

25
00:01:20.003 --> 00:01:25.001
So what I'm going to do is I think over here it was working.

26
00:01:25.001 --> 00:01:29.006
So I'm going to grab this commit ID from here and copy it.

27
00:01:29.006 --> 00:01:32.002
And then I'll hit the Q key to get out,

28
00:01:32.002 --> 00:01:35.007
and I'll do a git checkout command just to see

29
00:01:35.007 --> 00:01:37.009
if it was working at that time,

30
00:01:37.009 --> 00:01:41.001
and I'll paste that commit ID.

31
00:01:41.001 --> 00:01:45.001
So now let's go back into our project

32
00:01:45.001 --> 00:01:47.001
and we'll try scrolling this up

33
00:01:47.001 --> 00:01:48.004
and you can see that it's working now.

34
00:01:48.004 --> 00:01:51.007
Like when I scroll up, it's disappearing as I scroll,

35
00:01:51.007 --> 00:01:53.007
which is really what I want.

36
00:01:53.007 --> 00:01:57.003
So what I can do now is, let's go ahead

37
00:01:57.003 --> 00:02:03.003
and checkout main again.

38
00:02:03.003 --> 00:02:04.002
All right.

39
00:02:04.002 --> 00:02:05.005
And I can do, let's clear this out,

40
00:02:05.005 --> 00:02:09.001
and I can do a git bisect good,

41
00:02:09.001 --> 00:02:13.000
and then paste the ID of that, rephrase,

42
00:02:13.000 --> 00:02:16.003
and then paste the ID of that commit.

43
00:02:16.003 --> 00:02:18.006
Now it's going to take me through all

44
00:02:18.006 --> 00:02:22.003
of the other commits until I mark them

45
00:02:22.003 --> 00:02:24.004
as being good or bad.

46
00:02:24.004 --> 00:02:27.007
So now it's at a different commit.

47
00:02:27.007 --> 00:02:31.000
It moved up the list to the animation tweak.

48
00:02:31.000 --> 00:02:34.001
And let's see, if I scroll up, is that working?

49
00:02:34.001 --> 00:02:36.000
No, still no.

50
00:02:36.000 --> 00:02:41.005
So I'm going to say git bisect bad, again.

51
00:02:41.005 --> 00:02:42.009
And every time I do this, it's going

52
00:02:42.009 --> 00:02:45.007
to go through my commits and I can test

53
00:02:45.007 --> 00:02:46.009
to see if it's working.

54
00:02:46.009 --> 00:02:48.008
You can see that it's working right now.

55
00:02:48.008 --> 00:02:52.002
So it actually found the commit where it is working.

56
00:02:52.002 --> 00:02:57.004
So I'm going to mark that as git bisect good,

57
00:02:57.004 --> 00:03:00.005
and now it's going to tell me, yeah, this is the commit

58
00:03:00.005 --> 00:03:05.002
that is the problem, or when that mistake was made.

59
00:03:05.002 --> 00:03:11.007
So now I can grab this commit and let's clear this out,

60
00:03:11.007 --> 00:03:16.009
and do a git show, paste this in there,

61
00:03:16.009 --> 00:03:20.005
and it's going to show me everything

62
00:03:20.005 --> 00:03:22.005
that was changed in that commit.

63
00:03:22.005 --> 00:03:26.001
So it looks like I remove these two lines of text

64
00:03:26.001 --> 00:03:31.002
after I'm transforming the sort of position

65
00:03:31.002 --> 00:03:32.004
of the element here.

66
00:03:32.004 --> 00:03:35.002
So I just remove this opacity.

67
00:03:35.002 --> 00:03:38.009
And so I need to probably put that back in the code.

68
00:03:38.009 --> 00:03:40.007
I'm going to hit the Q key.

69
00:03:40.007 --> 00:03:43.005
And since I figured it out,

70
00:03:43.005 --> 00:03:49.009
I'm going to do a git bisect reset here.

71
00:03:49.009 --> 00:03:52.001
Now it's going to put everything back to where it used

72
00:03:52.001 --> 00:03:53.008
to be at the beginning.

73
00:03:53.008 --> 00:03:56.005
And I can go into my script.js file

74
00:03:56.005 --> 00:04:00.004
and I'll find the place where I did this,

75
00:04:00.004 --> 00:04:03.001
so looks like it's right here, right?

76
00:04:03.001 --> 00:04:06.003
And I need it to just paste that code.

77
00:04:06.003 --> 00:04:08.004
And I got to remove this minus sign because

78
00:04:08.004 --> 00:04:13.004
this is just Git telling me that it was,

79
00:04:13.004 --> 00:04:16.000
something I deleted from that list.

80
00:04:16.000 --> 00:04:20.005
So I'm going to add that, and I'll hit Save.

81
00:04:20.005 --> 00:04:21.008
And now when I scroll this up,

82
00:04:21.008 --> 00:04:23.008
you can see it disappearing like it did before.

83
00:04:23.008 --> 00:04:25.008
So now this is perfect.

84
00:04:25.008 --> 00:04:31.008
And I can just say, I'll add a commit now.

85
00:04:31.008 --> 00:04:35.002
I'll clear this out.

86
00:04:35.002 --> 00:04:37.007
Git add period,

87
00:04:37.007 --> 00:04:50.006
and git commit, Fixed Issue With Opacity When Scrolling.

88
00:04:50.006 --> 00:04:51.008
And that's it.

89
00:04:51.008 --> 00:04:54.004
So git bisect is a fantastic way

90
00:04:54.004 --> 00:04:57.002
to go through all your commits in sequence

91
00:04:57.002 --> 00:05:00.002
from a good commit, sequentially,

92
00:05:00.002 --> 00:05:04.007
until you find a commit where you no longer have an error.

93
00:05:04.007 --> 00:05:07.006
And it's just a really convenient way to fix things

94
00:05:07.006 --> 00:05:11.000
while having Git help you go through the different pieces.

