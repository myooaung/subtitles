WEBVTT
1
00:00:00.002 --> 00:00:02.000
(beeping)

2
00:00:02.000 --> 00:00:03.008
(upbeat music)

3
00:00:03.008 --> 00:00:05.004
- [Instructor] Let's say that you valiantly did

4
00:00:05.004 --> 00:00:09.001
a git reset with the hard flag and then panic strikes.

5
00:00:09.001 --> 00:00:11.005
You realize that you didn't mean to do that.

6
00:00:11.005 --> 00:00:14.002
Is there a way to undo a hard reset?

7
00:00:14.002 --> 00:00:15.009
I'll give you a couple of seconds to think about

8
00:00:15.009 --> 00:00:17.008
how you would do something like this.

9
00:00:17.008 --> 00:00:18.006
(beeping)

10
00:00:18.006 --> 00:00:21.008
(upbeat music)

11
00:00:21.008 --> 00:00:25.000
Now have no fear, advanced users of git know

12
00:00:25.000 --> 00:00:28.009
that there is another way to get out of a hard reset.

13
00:00:28.009 --> 00:00:31.005
So let's take a look at our git log.

14
00:00:31.005 --> 00:00:33.007
We'll do a git log one line here.

15
00:00:33.007 --> 00:00:35.004
And you'll see that my log

16
00:00:35.004 --> 00:00:38.001
shows a number of different commits,

17
00:00:38.001 --> 00:00:42.006
and let's just find a commit that is way farther back

18
00:00:42.006 --> 00:00:44.003
and we'll do a hard reset here.

19
00:00:44.003 --> 00:00:51.000
So let's clear this out, and we'll do a git reset,

20
00:00:51.000 --> 00:00:54.000
and the hard flag will let us rewind

21
00:00:54.000 --> 00:00:56.006
to this particular commit.

22
00:00:56.006 --> 00:00:59.007
So now we're back somewhere in our history,

23
00:00:59.007 --> 00:01:04.004
and if I do another git log, one line here,

24
00:01:04.004 --> 00:01:08.002
you'll see that my earlier history is now gone.

25
00:01:08.002 --> 00:01:10.006
So I used to think that there is no way

26
00:01:10.006 --> 00:01:13.008
of getting out of this or no way to retrieving

27
00:01:13.008 --> 00:01:16.001
like a previous history, but in reality,

28
00:01:16.001 --> 00:01:18.000
there is a pretty simple way.

29
00:01:18.000 --> 00:01:22.006
There's another secret log that advanced users know about

30
00:01:22.006 --> 00:01:24.005
that will track all of your changes,

31
00:01:24.005 --> 00:01:26.005
even the ones that you've seemingly messed up

32
00:01:26.005 --> 00:01:27.009
by doing a hard reset.

33
00:01:27.009 --> 00:01:32.000
So that command is call git reflog,

34
00:01:32.000 --> 00:01:33.009
some people pronounce it ref log,

35
00:01:33.009 --> 00:01:36.009
and you could see that I've been doing this a little bit

36
00:01:36.009 --> 00:01:38.000
or I've been doing this for a while.

37
00:01:38.000 --> 00:01:39.006
So you could see that I have

38
00:01:39.006 --> 00:01:42.002
all of these resets that I'm doing

39
00:01:42.002 --> 00:01:43.007
and all kinds of other things.

40
00:01:43.007 --> 00:01:46.004
So it's like a much deeper log

41
00:01:46.004 --> 00:01:47.004
that takes into account

42
00:01:47.004 --> 00:01:50.006
anything that you've been doing for a while.

43
00:01:50.006 --> 00:01:54.009
So if I want to, I can just find another previous commit,

44
00:01:54.009 --> 00:01:56.001
like say this one right here,

45
00:01:56.001 --> 00:01:59.005
where I had upgraded things to Bootstrap version five,

46
00:01:59.005 --> 00:02:02.000
and then let's go ahead and q out of this,

47
00:02:02.000 --> 00:02:03.007
so we'll hit the q key.

48
00:02:03.007 --> 00:02:05.005
I like to clear things out.

49
00:02:05.005 --> 00:02:12.005
And then we can do a git reset hard and go to that commit.

50
00:02:12.005 --> 00:02:14.000
And now we get everything back.

51
00:02:14.000 --> 00:02:18.007
If I do a get log, I'll see all of the previous commits

52
00:02:18.007 --> 00:02:21.008
that I thought I deleted are all sitting there

53
00:02:21.008 --> 00:02:24.006
just like they would before,

54
00:02:24.006 --> 00:02:26.009
and I was able to undo that pretty easily,

55
00:02:26.009 --> 00:02:28.002
but it's one of those features

56
00:02:28.002 --> 00:02:32.006
that I think only advanced users have ever even heard of.

57
00:02:32.006 --> 00:02:34.000
It can be quite a lifesaver

58
00:02:34.000 --> 00:02:36.005
when you've done things that you think are permanent,

59
00:02:36.005 --> 00:02:38.002
but are still stored in that log.

60
00:02:38.002 --> 00:02:43.008
It's also a good reason to commit as much as possible

61
00:02:43.008 --> 00:02:47.002
because even if you commit, even if you rebase,

62
00:02:47.002 --> 00:02:49.003
the reflog or the ref log

63
00:02:49.003 --> 00:02:51.000
will be there for you to go back to.

