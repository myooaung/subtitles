1
00:00:00,002 --> 00:00:03,008
(video game music)

2
00:00:03,008 --> 00:00:05,009
- [Instructor] We all do quick fixes on our work,

3
00:00:05,009 --> 00:00:08,006
and that can create a very messy look in history.

4
00:00:08,006 --> 00:00:11,001
So how do you rewrite your commit history

5
00:00:11,001 --> 00:00:13,000
to clean or combine quick fixes

6
00:00:13,000 --> 00:00:15,003
that you may have made along the way?

7
00:00:15,003 --> 00:00:16,005
I'll give you a couple seconds to think

8
00:00:16,005 --> 00:00:19,000
about how you would do something like this.

9
00:00:19,000 --> 00:00:23,001
(video game music)

10
00:00:23,001 --> 00:00:25,003
All right, so anytime we want to rewrite history

11
00:00:25,003 --> 00:00:27,007
in a more complete manner,

12
00:00:27,007 --> 00:00:30,005
you want to use a command called a rebase,

13
00:00:30,005 --> 00:00:33,007
and it look something like this, git rebase.

14
00:00:33,007 --> 00:00:36,008
And then you can choose an interactive option,

15
00:00:36,008 --> 00:00:39,002
which is really always the best one to use.

16
00:00:39,002 --> 00:00:41,008
And then we can also specify how many commits

17
00:00:41,008 --> 00:00:43,005
we want to go back to.

18
00:00:43,005 --> 00:00:45,006
You can see that I'm in the fixup branch.

19
00:00:45,006 --> 00:00:48,002
Let's take a look at the log,

20
00:00:48,002 --> 00:00:51,007
and we'll do a oneline option here.

21
00:00:51,007 --> 00:00:54,003
And I've got three different commits

22
00:00:54,003 --> 00:00:56,003
that I've placed right here,

23
00:00:56,003 --> 00:00:59,009
and I want to rewrite them so that they are a single commit.

24
00:00:59,009 --> 00:01:02,007
So let's go ahead and hit Q to get out of here.

25
00:01:02,007 --> 00:01:06,003
And so I'll go ahead and issue a git rebase

26
00:01:06,003 --> 00:01:10,000
with the minus i option for interactive.

27
00:01:10,000 --> 00:01:14,006
And then I'm only going to be looking at the last four commits.

28
00:01:14,006 --> 00:01:16,000
So when I issue this command,

29
00:01:16,000 --> 00:01:18,004
it's going to open up your default editor.

30
00:01:18,004 --> 00:01:22,000
Now, that can be just an editor in your terminal

31
00:01:22,000 --> 00:01:23,008
where you can modify that if you want to.

32
00:01:23,008 --> 00:01:25,007
I happen to use one called Atom.

33
00:01:25,007 --> 00:01:27,001
It's a little bit easier.

34
00:01:27,001 --> 00:01:29,000
You can also configure Visual Studio code

35
00:01:29,000 --> 00:01:30,000
to be your editor.

36
00:01:30,000 --> 00:01:32,008
I like to have a separate place that I use

37
00:01:32,008 --> 00:01:34,006
rather than the editor that I'm working with,

38
00:01:34,006 --> 00:01:35,006
and that's why I choose Atom.

39
00:01:35,006 --> 00:01:37,005
It's just a different editor, right?

40
00:01:37,005 --> 00:01:38,003
So from here, you can see

41
00:01:38,003 --> 00:01:42,003
that we have these different commits, last four commits,

42
00:01:42,003 --> 00:01:44,002
and they are in reverse order.

43
00:01:44,002 --> 00:01:47,001
Remember, this one was sort of at the top before,

44
00:01:47,001 --> 00:01:48,006
and now it's kind of at the bottom.

45
00:01:48,006 --> 00:01:50,004
And then we have these other commits.

46
00:01:50,004 --> 00:01:52,003
You'll notice there was a keyword called pick

47
00:01:52,003 --> 00:01:54,004
at the beginning of all these.

48
00:01:54,004 --> 00:01:57,006
This just means that you are not going to really do anything

49
00:01:57,006 --> 00:01:59,006
with those commits.

50
00:01:59,006 --> 00:02:00,008
You can see the explanation here.

51
00:02:00,008 --> 00:02:04,000
You're just going to use the commit whenever you say pick.

52
00:02:04,000 --> 00:02:06,006
If you wanted to do something with these other commits,

53
00:02:06,006 --> 00:02:09,008
you can then change what it says instead of pick

54
00:02:09,008 --> 00:02:11,000
to something else.

55
00:02:11,000 --> 00:02:13,002
You can see the different options right here.

56
00:02:13,002 --> 00:02:16,004
The one that we're interested in is called a squash commit.

57
00:02:16,004 --> 00:02:17,005
It's going to use the commit,

58
00:02:17,005 --> 00:02:20,001
but it's going to meld it into the previous one.

59
00:02:20,001 --> 00:02:23,004
So if I want to, I can type in squash right here,

60
00:02:23,004 --> 00:02:25,008
or just type in the first letter right here,

61
00:02:25,008 --> 00:02:29,009
it's just an s, so we can just do s here and s here,

62
00:02:29,009 --> 00:02:32,000
and then we'll leave this one alone.

63
00:02:32,000 --> 00:02:35,007
Now, this editor lets you pretty much do whatever you want

64
00:02:35,007 --> 00:02:37,003
with your commit history.

65
00:02:37,003 --> 00:02:39,006
So I can reorder the history

66
00:02:39,006 --> 00:02:41,009
by just putting it somewhere else.

67
00:02:41,009 --> 00:02:45,002
So I can maybe move this pick right over here,

68
00:02:45,002 --> 00:02:46,005
or whatever else I want to do.

69
00:02:46,005 --> 00:02:49,000
And you can see that all these different other options

70
00:02:49,000 --> 00:02:50,007
are available to you, as well.

71
00:02:50,007 --> 00:02:54,009
But what I want to do is squash these two into this commit,

72
00:02:54,009 --> 00:02:57,007
and I'm going to save now,

73
00:02:57,007 --> 00:02:59,007
and then I'm going to close out of here.

74
00:02:59,007 --> 00:03:02,009
So when I close, it's actually going to open up

75
00:03:02,009 --> 00:03:07,006
the editor again to let me edit the commit messages.

76
00:03:07,006 --> 00:03:10,005
And so because I'm combining three commits,

77
00:03:10,005 --> 00:03:12,009
it's going to let me edit the messages

78
00:03:12,009 --> 00:03:16,000
that would go into this new commit.

79
00:03:16,000 --> 00:03:17,003
And what I really want to do here

80
00:03:17,003 --> 00:03:19,007
is just go ahead and have a single message.

81
00:03:19,007 --> 00:03:24,003
So I'm going to comment the commit messages out,

82
00:03:24,003 --> 00:03:29,002
and then just change this one to say update it

83
00:03:29,002 --> 00:03:32,003
to bootstrap 5, right?

84
00:03:32,003 --> 00:03:34,001
So I'm going to save this,

85
00:03:34,001 --> 00:03:36,008
and then I'll close out of this again.

86
00:03:36,008 --> 00:03:42,007
And you could see that it's going to create a new commit

87
00:03:42,007 --> 00:03:46,000
for me and rebase everything.

88
00:03:46,000 --> 00:03:48,004
You could see that it's going to do a lot of things for me,

89
00:03:48,004 --> 00:03:50,006
including combining all those files

90
00:03:50,006 --> 00:03:52,006
and making everything into one commit.

91
00:03:52,006 --> 00:03:57,000
So if I do a git log --oneline here,

92
00:03:57,000 --> 00:04:00,001
I'll be able to see that my three commits

93
00:04:00,001 --> 00:04:04,005
are now combined into this single commit, new hashtag here,

94
00:04:04,005 --> 00:04:07,004
and then the other commit that I had after that

95
00:04:07,004 --> 00:04:08,005
is still there.

96
00:04:08,005 --> 00:04:11,008
All my commits before are also still there.

97
00:04:11,008 --> 00:04:16,003
And I'm able to completely rewrite the history of my project

98
00:04:16,003 --> 00:04:18,001
using this technique.

99
00:04:18,001 --> 00:04:21,003
And that's usually pretty good to clean things up

100
00:04:21,003 --> 00:04:23,005
whenever I have a complicated commit.

101
00:04:23,005 --> 00:04:26,001
It's better to create a lot of commits

102
00:04:26,001 --> 00:04:29,003
and then come back and clear your history

103
00:04:29,003 --> 00:04:32,004
because that way you're just making small changes

104
00:04:32,004 --> 00:04:33,008
at each commit.

105
00:04:33,008 --> 00:04:36,002
And then you can really control what you want

106
00:04:36,002 --> 00:04:41,000
your history to look like with this rebase command,

107
00:04:41,000 --> 00:04:43,009
knowing that you can use squash whenever you want

108
00:04:43,009 --> 00:04:46,003
to sort of get rid of extra commits

109
00:04:46,003 --> 00:04:48,000
and combine them all into one.

