WEBVTT
1
00:00:02.051 --> 00:00:05.402
And now is the time to wrap up this module.

2
00:00:05.402 --> 00:00:07.969
So what did you learn in this module?

3
00:00:07.969 --> 00:00:08.311
Well,

4
00:00:08.311 --> 00:00:15.328
the first point was why is the Reflection API considered slow by many people?

5
00:00:15.328 --> 00:00:18.707
Now you need to be a little worried about that because,

6
00:00:18.707 --> 00:00:22.333
in fact, performance needs to be measured,

7
00:00:22.333 --> 00:00:27.321
and it needs to be measured, not on your development computer,

8
00:00:27.321 --> 00:00:29.620
but really in production.

9
00:00:29.620 --> 00:00:31.484
And most of the time,

10
00:00:31.484 --> 00:00:36.145
performance issues in business applications do not come from the Reflection API,

11
00:00:36.145 --> 00:00:40.606
and it is useless to try to optimize things if the

12
00:00:40.606 --> 00:00:44.217
performance issues you may have in your business application

13
00:00:44.217 --> 00:00:49.467
do not come from the Reflection API, but comes from other places.

14
00:00:49.467 --> 00:00:55.433
Now if you really have performance issues measured in production and that

15
00:00:55.433 --> 00:00:59.405
are really a pain in using your business application,

16
00:00:59.405 --> 00:01:02.429
then you can switch to the MethodHandle API.

17
00:01:02.429 --> 00:01:04.797
It is quite a technical API.

18
00:01:04.797 --> 00:01:08.743
It is probably harder to use than the Reflection API,

19
00:01:08.743 --> 00:01:11.839
but it is much more efficient.

20
00:01:11.839 --> 00:01:16.618
We also saw a little hint on how to use VarHandles.

21
00:01:16.618 --> 00:01:20.696
VarHandles are to be used in a concurrent context.

22
00:01:20.696 --> 00:01:26.868
So if you are not in that context, you can stick with the MethodHandle API.

23
00:01:26.868 --> 00:01:32.916
And since this is the last module of this course, let us quickly wrap it up.

24
00:01:32.916 --> 00:01:35.239
What you saw in this course is, in fact,

25
00:01:35.239 --> 00:01:41.421
two ways to access data from objects and classes using two API,

26
00:01:41.421 --> 00:01:46.311
the Reflection API, which is the historical API from the JDK,

27
00:01:46.311 --> 00:01:54.054
and the MethodHandle API introduced in Java 7 and updated in 8 and 9.

28
00:01:54.054 --> 00:01:59.277
You saw all the technical details you need to understand to use the

29
00:01:59.277 --> 00:02:04.070
Reflection API or the MethodHandle API in your applications.

30
00:02:04.070 --> 00:02:08.571
You saw the two most important applications of the Reflection API.

31
00:02:08.571 --> 00:02:12.553
The first one is Hibernate with the object relational mapping,

32
00:02:12.553 --> 00:02:18.687
and the second one is dependency injection with CDI or Spring.

33
00:02:18.687 --> 00:02:21.659
We talked a little about performances,

34
00:02:21.659 --> 00:02:27.532
and the idea I would like you to keep in mind is that if you do not have

35
00:02:27.532 --> 00:02:30.323
observed performance issues in your business application,

36
00:02:30.323 --> 00:02:33.380
do not try to optimize it.

37
00:02:33.380 --> 00:02:35.280
It is just a waste of time.

38
00:02:35.280 --> 00:02:37.343
You do not need to do that.

39
00:02:37.343 --> 00:02:39.758
But if you have performance issues,

40
00:02:39.758 --> 00:02:43.946
then you can use method handles to fix those issues.

41
00:02:43.946 --> 00:02:50.026
And you also saw a side API to the MethodHandle API called the VarHandle API

42
00:02:50.026 --> 00:02:54.761
if you need to have concurrent access using Reflection.

43
00:02:54.761 --> 00:02:57.008
And that's it for this course.

44
00:02:57.008 --> 00:02:59.348
Thank you so much for watching it.

45
00:02:59.348 --> 00:03:01.387
I hope you found it interesting.

46
00:03:01.387 --> 00:03:05.902
Don't forget that you can use the comments on this course if you have questions.

47
00:03:05.902 --> 00:03:09.212
I check them regularly, so you should have a fast answer.

48
00:03:09.212 --> 00:03:14.290
You can also follow me on Twitter for information in the Java space and

49
00:03:14.290 --> 00:03:26.000
check my GitHub account for more open-source Java content. Thank you, and I hope to see you on another course here on Pluralsight.

