1
00:00:02,006 --> 00:00:06,687
We saw how to use the MethodHandle API to get a reference on a class.

2
00:00:06,687 --> 00:00:12,982
We saw how to create method handles on constructors and methods.

3
00:00:12,982 --> 00:00:16,654
So now we are going to see how to create method

4
00:00:16,654 --> 00:00:19,682
handles on the fields of a class.

5
00:00:19,682 --> 00:00:22,567
The lookup class has also these two methods,

6
00:00:22,567 --> 00:00:25,889
and I put a warning sign here for a reason.

7
00:00:25,889 --> 00:00:28,783
The first method is called findGetter,

8
00:00:28,783 --> 00:00:33,963
and the second method is called findSetter.

9
00:00:33,963 --> 00:00:40,079
Now you may think that findGetter will give you a reference on the getter

10
00:00:40,079 --> 00:00:45,909
method on a field and findSetter on a setter method on a field,

11
00:00:45,909 --> 00:00:47,929
and it is not the case.

12
00:00:47,929 --> 00:00:52,646
The getter method returns a method handle directly on a

13
00:00:52,646 --> 00:00:55,994
field to get read access to that field,

14
00:00:55,994 --> 00:01:00,696
and the setter method to get write access to that field,

15
00:01:00,696 --> 00:01:06,291
but they have nothing to do with getters and setters from

16
00:01:06,291 --> 00:01:10,095
the bean specification from the JDK.

17
00:01:10,095 --> 00:01:15,755
How can you create this read method handle and write method handle?

18
00:01:15,755 --> 00:01:19,738
Well, it all starts with this lookup object.

19
00:01:19,738 --> 00:01:24,104
You can call the findGetter method, passing the name of the class,

20
00:01:24,104 --> 00:01:28,464
the name of the field, and the type of that field.

21
00:01:28,464 --> 00:01:34,896
And this nameReader method handle will give you read access on a field.

22
00:01:34,896 --> 00:01:39,719
The pattern to get write access uses the findSetter method,

23
00:01:39,719 --> 00:01:44,542
takes the Person as a parameter, the name of the field,

24
00:01:44,542 --> 00:01:46,821
and the type of the field.

25
00:01:46,821 --> 00:01:51,132
And what you can see is that getting read access and getting

26
00:01:51,132 --> 00:01:54,912
write access is done with two different objects,

27
00:01:54,912 --> 00:01:59,000
but that have the same type, which is the MethodHandle type.

28
00:01:59,000 --> 00:02:04,031
So we need to be extra careful here because if you are using this

29
00:02:04,031 --> 00:02:08,000
nameReader object to write a value to the corresponding field,

30
00:02:08,000 --> 00:02:13,000
you will get an exception, and the same for the nameWriter object.

31
00:02:13,000 --> 00:02:17,313
If you try to read the value of that field using that object,

32
00:02:17,313 --> 00:02:19,500
you also get an exception.

33
00:02:19,500 --> 00:02:32,000
The problem is that those two objects are the same type so the type does not carry the information and what this object can do exactly.

