1
00:00:02,177 --> 00:00:04,222
But then there is a question.

2
00:00:04,222 --> 00:00:09,992
What about the fact that the name field that we are setting is private?

3
00:00:09,992 --> 00:00:12,990
If you are outside of the Person class,

4
00:00:12,990 --> 00:00:17,726
you do not have access to the private elements of that class.

5
00:00:17,726 --> 00:00:23,745
So the question is, is the Reflection API breaking encapsulation?

6
00:00:23,745 --> 00:00:27,832
Is it giving you access to the private members of a class,

7
00:00:27,832 --> 00:00:35,132
and in that way, bypassing all the security checks that can be done by the JVM.

8
00:00:35,132 --> 00:00:41,305
In fact, the answer is a little subtle and is a yes and no.

9
00:00:41,305 --> 00:00:46,762
If the given field is private and you call the previous code just like that,

10
00:00:46,762 --> 00:00:49,603
then you will have an exception which is an

11
00:00:49,603 --> 00:00:54,331
IllegalAccessException just because you are not allowed to read

12
00:00:54,331 --> 00:00:58,151
a private field from outside of the Person class.

13
00:00:58,151 --> 00:01:01,908
So no, the encapsulation is not broken, and yes,

14
00:01:01,908 --> 00:01:06,114
there is a security check if you want to access a private

15
00:01:06,114 --> 00:01:08,700
member to a class using Reflection.

16
00:01:08,700 --> 00:01:16,013
But you have a method on the Field class, which is called setAccessible.

17
00:01:16,013 --> 00:01:18,661
And if you pass true to this method,

18
00:01:18,661 --> 00:01:22,934
you will not have this IllegalAccessException anymore.

19
00:01:22,934 --> 00:01:26,279
Now the reason for that is a little subtle,

20
00:01:26,279 --> 00:01:31,790
calling setAccessible true does not make a private field public.

21
00:01:31,790 --> 00:01:35,419
If you call the getModifiers on that field and you

22
00:01:35,419 --> 00:01:39,724
check if this field is private, indeed, it is still private.

23
00:01:39,724 --> 00:01:45,516
What the setAccessible true call really does is that it

24
00:01:45,516 --> 00:01:49,053
suppresses the access control on that field.

25
00:01:49,053 --> 00:01:50,557
And if you do not want that,

26
00:01:50,557 --> 00:01:53,853
if you want to prevent this kind of thing in your application,

27
00:01:53,853 --> 00:01:58,855
you can set a security manager and configure it to prevent

28
00:01:58,855 --> 00:02:02,185
people to be able to do this kind of thing.

29
00:02:02,185 --> 00:02:05,026
So yes, there is still a security check,

30
00:02:05,026 --> 00:02:11,336
and no, this API does not completely break encapsulation.

31
00:02:11,336 --> 00:02:14,881
It just gives you a control access to the private

32
00:02:14,881 --> 00:02:18,305
members of a class if you need it.

33
00:02:18,305 --> 00:02:22,770
So what we need to do in the previous pattern is just add

34
00:02:22,770 --> 00:02:27,055
this field.setAccessible true here, thus,

35
00:02:27,055 --> 00:02:30,862
making possible to set the value to this private

36
00:02:30,862 --> 00:02:33,922
field from outside the Person class.

37
00:02:33,922 --> 00:02:37,874
And by the way, the same goes for the read pattern.

38
00:02:37,874 --> 00:02:44,955
You have a field.getValue method pass the instance of the person as a parameter,

39
00:02:44,955 --> 00:02:58,000
and it is going to read that field, that name field, and return the value of that field in an object that you can cast to a string.

