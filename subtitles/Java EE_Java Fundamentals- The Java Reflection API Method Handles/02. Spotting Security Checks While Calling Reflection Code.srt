1
00:00:02,019 --> 00:00:05,073
So first, let us set up the problem.

2
00:00:05,073 --> 00:00:10,146
Let us see where do those performance issues come from.

3
00:00:10,146 --> 00:00:13,006
Let us consider this code very simple.

4
00:00:13,006 --> 00:00:19,304
We are just creating an instance of the Person class using the classical Java

5
00:00:19,304 --> 00:00:24,171
Reflection API pattern that we covered in a previous module.

6
00:00:24,171 --> 00:00:26,837
How does this code work?

7
00:00:26,837 --> 00:00:31,219
Well, if we deep dive in the code called by those methods,

8
00:00:31,219 --> 00:00:34,280
we will discover this kind of thing.

9
00:00:34,280 --> 00:00:39,916
There are security checks, a SecurityManager is looked for,

10
00:00:39,916 --> 00:00:45,911
and if there is one, we have this checkMemberAccess method that is called.

11
00:00:45,911 --> 00:00:49,822
And then later on, we have more security checks.

12
00:00:49,822 --> 00:00:51,121
Here,

13
00:00:51,121 --> 00:00:56,208
Reflection.ensureMemberAccess that will check if the caller is

14
00:00:56,208 --> 00:01:00,847
allowed to use the Reflection API on the subject.

15
00:01:00,847 --> 00:01:05,550
So every time you are calling a method from the Reflection API,

16
00:01:05,550 --> 00:01:10,717
several security checks are conducted to check if your code is

17
00:01:10,717 --> 00:01:14,223
allowed to access a class using Reflection.

18
00:01:14,223 --> 00:01:19,797
And all those checks are checked again every time an access is made.

19
00:01:19,797 --> 00:01:25,978
So if the same code is calling the same Reflection method again and again,

20
00:01:25,978 --> 00:01:29,775
those security checks will be done again and again

21
00:01:29,775 --> 00:01:32,820
just to return the same result.

22
00:01:32,820 --> 00:01:36,067
This has been spotted quite a long time ago.

23
00:01:36,067 --> 00:01:41,544
All those checks are costly, and they have a noticeable impact on performance.

24
00:01:41,544 --> 00:01:42,176
In fact,

25
00:01:42,176 --> 00:01:49,677
this is the main reason the Java Reflection API is considered as a slow API.

26
00:01:49,677 --> 00:01:52,618
This issue has been spotted a long time ago,

27
00:01:52,618 --> 00:02:07,000
and it took some time to fix it, mainly because security is at stake, and of course, you do not want to give all the rights possible to untrusted code.

