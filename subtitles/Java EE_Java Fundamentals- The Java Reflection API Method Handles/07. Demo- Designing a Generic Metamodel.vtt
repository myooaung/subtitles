WEBVTT
1
00:00:02.338 --> 00:00:07.440
Let us now put all those elements together in a little live demo.

2
00:00:07.440 --> 00:00:10.678
You are going to see now some code in action.

3
00:00:10.678 --> 00:00:13.662
We are going to annotate our person bean,

4
00:00:13.662 --> 00:00:18.304
and for that, create our own custom annotations.

5
00:00:18.304 --> 00:00:21.372
And you are going to see that it is a very simple process.

6
00:00:21.372 --> 00:00:27.602
And then use the Reflection to read the correct fields in the correct order,

7
00:00:27.602 --> 00:00:33.764
first, the primary key and then the regular fields.

8
00:00:33.764 --> 00:00:38.467
Let us begin by creating a metamodel on our Person class.

9
00:00:38.467 --> 00:00:40.719
We have here a Person class.

10
00:00:40.719 --> 00:00:44.849
It is a very classical JavaBean with three properties,

11
00:00:44.849 --> 00:00:45.367
id,

12
00:00:45.367 --> 00:00:51.554
which is longer and bound to be the primary key of this Person object; the name,

13
00:00:51.554 --> 00:00:55.809
which is a string; and an age, which is an integer.

14
00:00:55.809 --> 00:00:57.385
We have two constructors,

15
00:00:57.385 --> 00:01:02.328
and empty one and a constructor that takes the name and the age; a

16
00:01:02.328 --> 00:01:07.191
classical set of getters and setters; and a toString method.

17
00:01:07.191 --> 00:01:11.764
So what we want to do is create a metamodel on this Person class.

18
00:01:11.764 --> 00:01:15.961
We want to call this metamodel in this way, Metamodel.

19
00:01:15.961 --> 00:01:19.406
Of course, for the moment, this class does not exist.

20
00:01:19.406 --> 00:01:21.907
Metamodel of Person.class.

21
00:01:21.907 --> 00:01:24.683
This is the Person class we are using.

22
00:01:24.683 --> 00:01:25.995
And from this Metamodel,

23
00:01:25.995 --> 00:01:30.645
we want to be able to query this Person class for its

24
00:01:30.645 --> 00:01:34.349
primary key and the different fields that are going to be

25
00:01:34.349 --> 00:01:36.366
mapped to Column in the database.

26
00:01:36.366 --> 00:01:40.878
So we want to be able to call the getPrimaryKey and getColumns,

27
00:01:40.878 --> 00:01:48.984
and we want this getPrimaryKey method to return the PrimaryKeyField object.

28
00:01:48.984 --> 00:01:51.678
Let us call it primaryKeyField.

29
00:01:51.678 --> 00:01:54.647
And the same goes for this getColumns method.

30
00:01:54.647 --> 00:02:00.920
We want this getColumns method to return the List of, let's say, ColumnField.

31
00:02:00.920 --> 00:02:03.687
We are going to call it columnFields.

32
00:02:03.687 --> 00:02:09.153
None of those methods or types exist, so we need to create everything.

33
00:02:09.153 --> 00:02:12.824
Let us just import this list, and this is okay.

34
00:02:12.824 --> 00:02:15.810
Let us begin by creating this Metamodel class.

35
00:02:15.810 --> 00:02:21.759
We are going to create it in the org.paumard .reflection .util package.

36
00:02:21.759 --> 00:02:22.147
Fine.

37
00:02:22.147 --> 00:02:26.534
We need a factory method of that is going to take a class.

38
00:02:26.534 --> 00:02:29.143
So public static Metamodel.

39
00:02:29.143 --> 00:02:31.931
We are going to rename this in that way.

40
00:02:31.931 --> 00:02:35.287
And, in fact, here, we need a Class of T,

41
00:02:35.287 --> 00:02:40.895
so we need to add this type definition here on the declaration of the method.

42
00:02:40.895 --> 00:02:45.438
This of method can just return the new Metamodel instance,

43
00:02:45.438 --> 00:02:48.607
passing the class as a parameter.

44
00:02:48.607 --> 00:02:50.471
This constructor does not exist,

45
00:02:50.471 --> 00:02:56.728
so let us use this Ctrl+1 magical shortcut to create that constructor,

46
00:02:56.728 --> 00:02:59.832
thus, making Metamodel a generic class.

47
00:02:59.832 --> 00:03:03.684
I'm going to move this constructor declaration after

48
00:03:03.684 --> 00:03:06.783
the static method just created.

49
00:03:06.783 --> 00:03:09.130
This is going to return a Metamodel of T,

50
00:03:09.130 --> 00:03:13.440
and this constructor parameter here will be mapped to a field,

51
00:03:13.440 --> 00:03:19.570
so once again, Eclipse can help us in doing that by creating the field for us.

52
00:03:19.570 --> 00:03:27.000
And I think that we are good to go with the first steps of the creation of this method.

