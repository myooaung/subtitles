WEBVTT
1
00:00:01.946 --> 00:00:04.440
Now that we have a reference on a Class object,

2
00:00:04.440 --> 00:00:07.739
let us see what we can do with it.

3
00:00:07.739 --> 00:00:13.760
First, we are going to see how to get information on that class itself.

4
00:00:13.760 --> 00:00:17.549
The first method we are going to see on this Class object is

5
00:00:17.549 --> 00:00:22.110
the get super class method that returns a reference on the

6
00:00:22.110 --> 00:00:24.769
super class of that Class object.

7
00:00:24.769 --> 00:00:29.742
All the classes we see in Java have at least one super class,

8
00:00:29.742 --> 00:00:34.404
which is the object class, the default super class.

9
00:00:34.404 --> 00:00:40.827
It can also have other super classes explicitly declared in the class file.

10
00:00:40.827 --> 00:00:47.401
And you can also get a reference on the implemented interfaces if there are any.

11
00:00:47.401 --> 00:00:53.172
In fact, interfaces are seen as types by the Reflection API,

12
00:00:53.172 --> 00:00:57.563
and they are also modeled as Class object.

13
00:00:57.563 --> 00:01:03.332
A Class object can, in fact, be modeled of a proper class,

14
00:01:03.332 --> 00:01:06.196
but also of an interface.

15
00:01:06.196 --> 00:01:13.757
So suppose we have a reference on an existing class, here, the String class.

16
00:01:13.757 --> 00:01:17.642
We can call the getSuperClass on this Class object.

17
00:01:17.642 --> 00:01:20.718
It will return another Class object.

18
00:01:20.718 --> 00:01:22.903
Let us call it superClass.

19
00:01:22.903 --> 00:01:27.509
In that case, since string extends object,

20
00:01:27.509 --> 00:01:30.753
it will be the Object class itself,

21
00:01:30.753 --> 00:01:37.009
and we can also call getInterfaces to get an array of interfaces,

22
00:01:37.009 --> 00:01:41.086
which are also modeled by Class object.

23
00:01:41.086 --> 00:01:47.799
In that case, since the String class implements CharSequence and comparable,

24
00:01:47.799 --> 00:01:51.356
those are the interfaces we will have in this array.

25
00:01:51.356 --> 00:01:55.487
If the class does not implement any interface,

26
00:01:55.487 --> 00:02:00.379
then the getInterfaces method will return an empty array.

27
00:02:00.379 --> 00:02:04.919
This is not the case for the getSuperClass method call.

28
00:02:04.919 --> 00:02:07.660
If you call this method on the Object class,

29
00:02:07.660 --> 00:02:19.000
which is the only class in Java that does not have any super class, then the reference you will get will be null.

