1
00:00:02,055 --> 00:00:05,703
Let us first introduce the MethodHandle API.

2
00:00:05,703 --> 00:00:10,721
First, the entry point of the MethodHandle API is the Lookup object.

3
00:00:10,721 --> 00:00:16,588
We saw that the main issue of the Java Reflection API is that the security

4
00:00:16,588 --> 00:00:21,079
checks are done again and again on each method call.

5
00:00:21,079 --> 00:00:26,529
So this Lookup object is going to encapsulate all the security information.

6
00:00:26,529 --> 00:00:28,750
We'll check it once.

7
00:00:28,750 --> 00:00:32,574
And since those information are not going to change,

8
00:00:32,574 --> 00:00:36,867
it will be used all the time when accessing a class,

9
00:00:36,867 --> 00:00:38,861
a field, or a method.

10
00:00:38,861 --> 00:00:40,728
From this Lookup object,

11
00:00:40,728 --> 00:00:46,514
you can create MethodHandle instances to access the class itself,

12
00:00:46,514 --> 00:00:51,933
the methods within that class, and the fields within that class.

13
00:00:51,933 --> 00:00:57,050
So this single method handle will give you access to all the

14
00:00:57,050 --> 00:01:00,908
content of the class that was distributed among several

15
00:01:00,908 --> 00:01:05,464
objects in the Java Reflection API, namely,

16
00:01:05,464 --> 00:01:09,167
method, constructor, and field objects.

17
00:01:09,167 --> 00:01:15,487
You can also create VarHandle instances to gain access to fields.

18
00:01:15,487 --> 00:01:21,613
Now we just saw that the MethodHandle object also gives you access to field,

19
00:01:21,613 --> 00:01:24,041
but the VarHandle does it differently.

20
00:01:24,041 --> 00:01:35,000
You can use this object to access fields in a concurrent way. We will be covering this point at the end of this module.

