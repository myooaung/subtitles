WEBVTT
1
00:00:01.693 --> 00:00:06.047
Following the same pattern we saw for the fields of a class,

2
00:00:06.047 --> 00:00:10.134
we can also get the methods from within a class.

3
00:00:10.134 --> 00:00:13.753
Suppose we have a Person class called Class.

4
00:00:13.753 --> 00:00:18.903
We have three methods to get the methods from that Person class.

5
00:00:18.903 --> 00:00:21.631
The first one is the getMethod.

6
00:00:21.631 --> 00:00:24.873
That is going to return a single method.

7
00:00:24.873 --> 00:00:30.661
We pass the name of that method to the getMethod method call and then

8
00:00:30.661 --> 00:00:34.701
the types of the parameters in the right order.

9
00:00:34.701 --> 00:00:35.438
So here,

10
00:00:35.438 --> 00:00:42.281
what we want to get is the setName method that takes a string as a parameter,

11
00:00:42.281 --> 00:00:47.483
which is, obviously, the setter method of the name field of that class.

12
00:00:47.483 --> 00:00:50.590
If this method takes several parameters,

13
00:00:50.590 --> 00:00:56.313
then we will add the other types of the other parameters after the first one.

14
00:00:56.313 --> 00:01:01.336
And we also have a getDeclaredMethod that is going to return

15
00:01:01.336 --> 00:01:05.909
all the methods from within that class, whether they are public,

16
00:01:05.909 --> 00:01:07.686
protected, or private,

17
00:01:07.686 --> 00:01:13.483
and a getMethods method that is going to return all the public methods

18
00:01:13.483 --> 00:01:18.971
declared on that class and all the super classes of that class.

19
00:01:18.971 --> 00:01:22.750
So if you try this getMethods on any class,

20
00:01:22.750 --> 00:01:27.433
you will see all the methods from the Object class since they

21
00:01:27.433 --> 00:01:32.616
are public and since all the classes in Java are inheriting

22
00:01:32.616 --> 00:01:35.513
this Object class by default.

23
00:01:35.513 --> 00:01:39.652
And then we have patterns to get the constructors of a class.

24
00:01:39.652 --> 00:01:45.065
A constructor can be seen as some kind of a method, but, in fact, it is not.

25
00:01:45.065 --> 00:01:47.945
And within the context of the Reflection API,

26
00:01:47.945 --> 00:01:52.443
it is modeled by a class that is the constructor class.

27
00:01:52.443 --> 00:01:57.650
The first pattern is the same as the method or the field ones.

28
00:01:57.650 --> 00:02:03.046
It is just a getConstructor method that takes the types of

29
00:02:03.046 --> 00:02:05.553
the parameters taken by this constructor.

30
00:02:05.553 --> 00:02:10.087
If we want to reference on the empty constructor of that class,

31
00:02:10.087 --> 00:02:15.959
then we do not need to pass anything to this getConstructor method call.

32
00:02:15.959 --> 00:02:22.358
And then we have a clss.getDeclaredConstructors that is going to return

33
00:02:22.358 --> 00:02:28.840
the array of all the constructors defined within that class and

34
00:02:28.840 --> 00:02:35.808
getConstructors with an S that returns the array of all the public

35
00:02:35.808 --> 00:02:38.919
constructors declared in the Person class.

36
00:02:38.919 --> 00:02:43.792
The constructors of the super classes are not included in this array,

37
00:02:43.792 --> 00:02:57.000
which is a difference with the corresponding methods, getFields or getMethods, that do return elements from the super classes.

