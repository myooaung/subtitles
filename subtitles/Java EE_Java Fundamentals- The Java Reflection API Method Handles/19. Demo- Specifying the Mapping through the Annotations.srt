1
00:00:01,670 --> 00:00:07,551
The metamodel we have created so far works in a way where a given

2
00:00:07,551 --> 00:00:11,051
field is mapped to a column of the same name.

3
00:00:11,051 --> 00:00:14,642
If the field is id, then the column has to be id.

4
00:00:14,642 --> 00:00:21,268
Let us change that and update our annotations in a way where I can pass

5
00:00:21,268 --> 00:00:24,802
the name attributes here telling that this column,

6
00:00:24,802 --> 00:00:32,179
for instance, should be named k_id, and this column should be named c_name,

7
00:00:32,179 --> 00:00:36,027
for instance, and this one c_age.

8
00:00:36,027 --> 00:00:40,520
It is possible indeed to attributes to annotations.

9
00:00:40,520 --> 00:00:45,400
Adding attributes to an annotation is just a matter of adding an

10
00:00:45,400 --> 00:00:49,093
abstract method in the corresponding interface.

11
00:00:49,093 --> 00:00:50,746
Let us do that.

12
00:00:50,746 --> 00:00:57,172
And now you can see that my primaryKey annotation is working correctly.

13
00:00:57,172 --> 00:01:01,370
Let us do the same with this Column annotation.

14
00:01:01,370 --> 00:01:05,080
Copy/paste the name method, and that's it.

15
00:01:05,080 --> 00:01:08,048
Now how can we leverage this attribute?

16
00:01:08,048 --> 00:01:12,061
Well, we have this getName method in the PrimaryKeyField class,

17
00:01:12,061 --> 00:01:14,066
and, in fact,

18
00:01:14,066 --> 00:01:18,829
this getName method should probably read the name

19
00:01:18,829 --> 00:01:21,660
attribute from the corresponding annotation.

20
00:01:21,660 --> 00:01:26,641
So let us add a field here, a PrimaryKeyField.

21
00:01:26,641 --> 00:01:28,444
Let us call it PrimaryKey,

22
00:01:28,444 --> 00:01:33,153
and this getName method should instead return primaryKey.name,

23
00:01:33,153 --> 00:01:39,516
thus, reading the name from the annotation we are reading.

24
00:01:39,516 --> 00:01:48,019
And of course, we can add this field, .getAnnotation PrimaryKey.class,

25
00:01:48,019 --> 00:01:50,445
and this is going to be the primaryKey.

26
00:01:50,445 --> 00:01:53,195
Let us do the same in the ColumnField.

27
00:01:53,195 --> 00:01:56,136
Add a field of type Column.

28
00:01:56,136 --> 00:01:57,886
Let us call it Column.

29
00:01:57,886 --> 00:02:02,031
This field can be read directly from the field that is

30
00:02:02,031 --> 00:02:05,320
passed to create this ColumnField object,

31
00:02:05,320 --> 00:02:08,086
get Annotation, Column.

32
00:02:08,086 --> 00:02:11,379
And now this getName method, instead of returning the field,

33
00:02:11,379 --> 00:02:15,689
is going to return the column.name attribute that

34
00:02:15,689 --> 00:02:18,563
has been set in the Person class.

35
00:02:18,563 --> 00:02:23,485
So we now have a Person class supposed to be mapped to a Person

36
00:02:23,485 --> 00:02:27,837
table in our database with the field k_id,

37
00:02:27,837 --> 00:02:29,809
c_name, and c_age.

38
00:02:29,809 --> 00:02:33,086
So let us create the corresponding table.

39
00:02:33,086 --> 00:02:38,816
Connect to the H2 server, create table Person.

40
00:02:38,816 --> 00:02:41,928
The name of the primary key is k_id.

41
00:02:41,928 --> 00:02:49,700
We have c_age, which is an int, and c_name, which is varchar, let's say, 40.

42
00:02:49,700 --> 00:02:56,080
Let us execute this code, and now the Person table has been recreated.

43
00:02:56,080 --> 00:02:57,676
Let us see the content.

44
00:02:57,676 --> 00:03:00,387
Of course, this table is empty.

45
00:03:00,387 --> 00:03:04,925
Let us disconnect, run our WritingObjects once again,

46
00:03:04,925 --> 00:03:08,384
and this code does not need to be change because,

47
00:03:08,384 --> 00:03:14,371
in fact, the name of the column is read dynamically from the metamodel.

48
00:03:14,371 --> 00:03:15,922
Let us run this code.

49
00:03:15,922 --> 00:03:16,382
And indeed,

50
00:03:16,382 --> 00:03:19,945
you can see that the four people we have created have

51
00:03:19,945 --> 00:03:22,896
been properly returned to the database.

52
00:03:22,896 --> 00:03:26,257
Let us check the content of the table,

53
00:03:26,257 --> 00:03:32,622
and here are our four people written in the proper columns of the database.

54
00:03:32,622 --> 00:03:37,899
Let us disconnect from here and test now the reading of those objects.

55
00:03:37,899 --> 00:03:42,008
Once again, this code should not change, so let us run it.

56
00:03:42,008 --> 00:03:46,939
And indeed, you can see that those people can be read back in the same way.

57
00:03:46,939 --> 00:03:50,501
So this is one way of extending the system,

58
00:03:50,501 --> 00:03:55,651
adding more metainformation in the annotations that can be read at

59
00:03:55,651 --> 00:04:06,000
runtime by the metamodel and leveraged to add more functionalities to our basic object relational mapper.

