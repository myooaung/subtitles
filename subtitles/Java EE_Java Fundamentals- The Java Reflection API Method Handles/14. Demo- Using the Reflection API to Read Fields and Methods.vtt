WEBVTT
1
00:00:01.660 --> 00:00:05.869
So now is the time to see some code in action.

2
00:00:05.869 --> 00:00:08.212
Let me show you all this in action.

3
00:00:08.212 --> 00:00:12.361
We are going to create a simple bean, a simple person bean,

4
00:00:12.361 --> 00:00:16.584
and just play with the Reflection API to get information to get

5
00:00:16.584 --> 00:00:20.406
information on the content of this class,

6
00:00:20.406 --> 00:00:24.403
method, and fields.

7
00:00:24.403 --> 00:00:29.080
Let us see the first elements we have seen from the Reflection API,

8
00:00:29.080 --> 00:00:35.062
and for that, I just created a Person class here with two fields,

9
00:00:35.062 --> 00:00:39.518
name and age; a String; and an integer.

10
00:00:39.518 --> 00:00:41.804
This Person has two constructors,

11
00:00:41.804 --> 00:00:45.445
an empty one and a constructor that takes two arguments,

12
00:00:45.445 --> 00:00:47.936
a name and an age.

13
00:00:47.936 --> 00:00:53.945
It also has the static factory method and then two

14
00:00:53.945 --> 00:00:57.035
getters and setters for the two properties,

15
00:00:57.035 --> 00:01:00.976
name and age, and at last, a toString method.

16
00:01:00.976 --> 00:01:03.827
This is a very classical JavaBean.

17
00:01:03.827 --> 00:01:07.238
I just created a PlayWithReflection class,

18
00:01:07.238 --> 00:01:11.996
and we are going to type in some code in that class.

19
00:01:11.996 --> 00:01:16.567
So the first thing I would like to show you is how to get

20
00:01:16.567 --> 00:01:19.421
a reference on a class from its name.

21
00:01:19.421 --> 00:01:23.907
I'm going to type in the name of that class in a string of characters,

22
00:01:23.907 --> 00:01:32.137
and this class is org.paumard .reflection .model .Person.

23
00:01:32.137 --> 00:01:35.819
From this string characters, I can use Class.forName,

24
00:01:35.819 --> 00:01:39.876
pass this personClassName as a parameter.

25
00:01:39.876 --> 00:01:43.940
Of course, this method is going to throw exceptions.

26
00:01:43.940 --> 00:01:46.604
We are not interested in those exceptions,

27
00:01:46.604 --> 00:01:50.037
so let me throw them through the main class.

28
00:01:50.037 --> 00:01:54.056
Of course, you should never do this kind of thing in a production code.

29
00:01:54.056 --> 00:01:58.481
Let us put the result in a variable, this is the personClass,

30
00:01:58.481 --> 00:02:05.197
and let me print out the result, Person class = personClass,

31
00:02:05.197 --> 00:02:06.489
and run the code.

32
00:02:06.489 --> 00:02:11.573
And you can see that we have loaded this class and we have

33
00:02:11.573 --> 00:02:15.568
obtained a reference on that class using Reflection and

34
00:02:15.568 --> 00:02:18.185
using this forName method call.

35
00:02:18.185 --> 00:02:21.215
Now let us get some information from this class.

36
00:02:21.215 --> 00:02:27.433
The first thing we are going to get is the fields from that class, getFields.

37
00:02:27.433 --> 00:02:33.548
This returns an array of fields, lets me print out the content of this array,

38
00:02:33.548 --> 00:02:37.504
those are the Fields, and I'm going to print out.

39
00:02:37.504 --> 00:02:42.716
I've got this very useful method, Arrays.toString.

40
00:02:42.716 --> 00:02:44.609
I can pass any array to it,

41
00:02:44.609 --> 00:02:47.819
and it will automatically iterate over the elements of

42
00:02:47.819 --> 00:02:50.572
the array and print each element.

43
00:02:50.572 --> 00:02:55.039
Let me run this code, and you can see that, in fact, this array is empty.

44
00:02:55.039 --> 00:02:55.587
Why?

45
00:02:55.587 --> 00:03:01.100
Because the getFields method returns only the public fields of the Person

46
00:03:01.100 --> 00:03:04.852
class and all the super classes of this person class.

47
00:03:04.852 --> 00:03:07.299
And since there are no such fields,

48
00:03:07.299 --> 00:03:11.002
this getFields method just returns an empty array.

49
00:03:11.002 --> 00:03:17.166
Let me do the same, but this time, calling the getDeclaredFields.

50
00:03:17.166 --> 00:03:20.949
We are going to call this array declaredFields.

51
00:03:20.949 --> 00:03:23.954
Those are the DeclaredFields.

52
00:03:23.954 --> 00:03:27.576
Copy/Paste this here, run the code,

53
00:03:27.576 --> 00:03:33.220
and you can see that this time we have two fields that have been printed out.

54
00:03:33.220 --> 00:03:36.256
The first one is the name field of the Person class,

55
00:03:36.256 --> 00:03:40.484
and the second one is the age field of the Person class.

56
00:03:40.484 --> 00:03:42.651
Those are two private fields,

57
00:03:42.651 --> 00:03:49.348
and indeed the declared fields of a class are the private fields of that class.

58
00:03:49.348 --> 00:03:51.637
Let me do the same for the methods.

59
00:03:51.637 --> 00:03:54.727
We are going to get the methods from the Person class,

60
00:03:54.727 --> 00:03:58.826
put this in an array, let us call it Methods,

61
00:03:58.826 --> 00:04:02.346
and this time, I'm going to iterate over this array,

62
00:04:02.346 --> 00:04:05.035
foreach method in methods.

63
00:04:05.035 --> 00:04:10.818
Just print out this method, and I'm going to print out here,

64
00:04:10.818 --> 00:04:12.900
Methods, run this code.

65
00:04:12.900 --> 00:04:17.866
And here, you can see that we have a much longer list than expected probably.

66
00:04:17.866 --> 00:04:22.096
First, we have the public methods from the Person class,

67
00:04:22.096 --> 00:04:26.405
toString, getName, of, setName, setAge, and getAge,

68
00:04:26.405 --> 00:04:31.048
and then the public methods from the Object class.

69
00:04:31.048 --> 00:04:33.273
When you call the getMethods on a class,

70
00:04:33.273 --> 00:04:37.185
you get all the public methods from that class and all

71
00:04:37.185 --> 00:04:39.906
the classes this class is extending.

72
00:04:39.906 --> 00:04:43.952
So since every class in Java is extending,

73
00:04:43.952 --> 00:04:44.705
by default,

74
00:04:44.705 --> 00:04:48.924
the Object class you always have the methods from the Object

75
00:04:48.924 --> 00:04:52.680
class when you called getMethods on a class.

76
00:04:52.680 --> 00:04:56.685
Let us go back here and do the same for the Declared Methods.

77
00:04:56.685 --> 00:05:02.773
We are going to call it declaredMethods and call the getDeclaredMethods here,

78
00:05:02.773 --> 00:05:07.686
and here, this is the getDeclaredMethods.

79
00:05:07.686 --> 00:05:10.058
Let us run this code.

80
00:05:10.058 --> 00:05:14.157
I can see that the declaredMethods are only the methods from

81
00:05:14.157 --> 00:05:18.066
the Person class including the private, package protected,

82
00:05:18.066 --> 00:05:20.534
and protected methods, if any.

83
00:05:20.534 --> 00:05:25.583
Let me filter out the non-static method of this class.

84
00:05:25.583 --> 00:05:28.236
We are going to do things like that,

85
00:05:28.236 --> 00:05:31.630
create a stream on this declaredMethod array,

86
00:05:31.630 --> 00:05:36.839
and filter out all the methods that are non-static,

87
00:05:36.839 --> 00:05:40.655
so I'm going to get the modifiers of that method.

88
00:05:40.655 --> 00:05:43.318
This getModifiers is an int.

89
00:05:43.318 --> 00:05:49.569
And if I want to know if this int of modifiers contains the bit,

90
00:05:49.569 --> 00:05:51.581
let's state that this method is static.

91
00:05:51.581 --> 00:05:58.929
I need to pass it to Modifier.isStatic factory

92
00:05:58.929 --> 00:06:03.962
method and then print out the result.

93
00:06:03.962 --> 00:06:09.047
Let me just add Static Declared Method, run the code,

94
00:06:09.047 --> 00:06:13.639
and here, you can see that we have only one Declared Method that is Static,

95
00:06:13.639 --> 00:06:19.266
which is of factory method that we added to the Person class.

96
00:06:19.266 --> 00:06:24.329
So here are the basic methods and basic patterns offered by

97
00:06:24.329 --> 00:06:35.000
the Reflection API that you can use to introspect a class and get information from that class.

