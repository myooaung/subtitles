WEBVTT
1
00:00:02.081 --> 00:00:04.214
Let us now jump in the code.

2
00:00:04.214 --> 00:00:06.765
Let us see the code in action.

3
00:00:06.765 --> 00:00:10.158
First, let us build this simple system.

4
00:00:10.158 --> 00:00:13.638
We are going to first create this in-memory database,

5
00:00:13.638 --> 00:00:17.475
then a Person table in it,

6
00:00:17.475 --> 00:00:21.170
and then provide an implementation of this EntityManager interface,

7
00:00:21.170 --> 00:00:25.988
and write and read some data in this table.

8
00:00:25.988 --> 00:00:29.523
Now that we created a Metamodel on the Person class,

9
00:00:29.523 --> 00:00:30.966
and by the way,

10
00:00:30.966 --> 00:00:36.078
this Metamodel could work on any class other than the Person class,

11
00:00:36.078 --> 00:00:40.843
let us create our simple object relational mapper.

12
00:00:40.843 --> 00:00:45.626
There is some preparation to do before jumping in the code because

13
00:00:45.626 --> 00:00:49.469
to be able to create an object relational mapper,

14
00:00:49.469 --> 00:00:52.397
we need to have a database to talk to,

15
00:00:52.397 --> 00:00:55.371
a database in which we are going to write objects and

16
00:00:55.371 --> 00:00:59.392
from which we are going to read objects back to the

17
00:00:59.392 --> 00:01:01.843
memory of the Java virtual machine.

18
00:01:01.843 --> 00:01:07.569
The database server I chose to use is the H2 database

19
00:01:07.569 --> 00:01:10.590
that you can find on this page.

20
00:01:10.590 --> 00:01:15.167
This is a very simple database engine that you can use

21
00:01:15.167 --> 00:01:19.278
through JDBC so in any Java application.

22
00:01:19.278 --> 00:01:23.050
You do not need to install anything to use this

23
00:01:23.050 --> 00:01:25.976
database in this live coding session.

24
00:01:25.976 --> 00:01:33.666
All you need to do is to download from here the Java file from the maven.org.

25
00:01:33.666 --> 00:01:36.056
If you click on this link there,

26
00:01:36.056 --> 00:01:40.360
it will download this JAR automatically and put this JAR

27
00:01:40.360 --> 00:01:43.593
in this lib folder of your project.

28
00:01:43.593 --> 00:01:45.211
And by the way,

29
00:01:45.211 --> 00:01:49.276
this JAR is already there along with the license that you

30
00:01:49.276 --> 00:01:53.401
need to accept if you want to use H2.

31
00:01:53.401 --> 00:01:55.058
So this project, in fact,

32
00:01:55.058 --> 00:01:59.473
is the same project as the one we used in a previous module.

33
00:01:59.473 --> 00:02:03.594
I just copy/pasted all the elements, the annotation,

34
00:02:03.594 --> 00:02:13.000
the Person class, and the Metamodel, along with this JAR to connect to the H2 database.

