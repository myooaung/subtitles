WEBVTT
1
00:00:01.788 --> 00:00:03.985
Let us have a look at the code.

2
00:00:03.985 --> 00:00:05.790
Let us have a look at the pattern.

3
00:00:05.790 --> 00:00:06.348
In fact,

4
00:00:06.348 --> 00:00:09.730
it follows the same kind of pattern as the

5
00:00:09.730 --> 00:00:12.499
MethodHandles patterns that we already saw.

6
00:00:12.499 --> 00:00:17.924
Suppose we have a lookup object and a classical person bean,

7
00:00:17.924 --> 00:00:22.896
we can create a nameVarHandle on the name field of that

8
00:00:22.896 --> 00:00:25.655
Person class by using the findVarHandle,

9
00:00:25.655 --> 00:00:30.774
passing the class as a parameter, the name of the field,

10
00:00:30.774 --> 00:00:32.632
and the type of the field.

11
00:00:32.632 --> 00:00:33.803
Most of the time,

12
00:00:33.803 --> 00:00:39.105
you will want to invoke this findVarHandle on a private lookup object

13
00:00:39.105 --> 00:00:44.051
since the field of a class are most of the time private.

14
00:00:44.051 --> 00:00:48.471
If what you need to do is just read the value of the field,

15
00:00:48.471 --> 00:00:51.909
you have a get method on this VarHandle object that is

16
00:00:51.909 --> 00:00:57.692
going to return the value of the field, and this is the normal mode access.

17
00:00:57.692 --> 00:01:01.548
But you also have volatile access with the getVolatile

18
00:01:01.548 --> 00:01:07.664
method of this VarHandle object, passing the person as a parameter.

19
00:01:07.664 --> 00:01:08.517
And this time,

20
00:01:08.517 --> 00:01:13.616
the read you are going to do is a volatile read that is

21
00:01:13.616 --> 00:01:15.812
guaranteeing that in concurrent access,

22
00:01:15.812 --> 00:01:20.617
the value you get is the last value that has been returned

23
00:01:20.617 --> 00:01:27.280
somewhere else on some other thread, including on another core of your CPU.

24
00:01:27.280 --> 00:01:30.033
If you are not familiar with this kind of volatile access,

25
00:01:30.033 --> 00:01:34.875
you can check my other course on Java concurrent programming.

26
00:01:34.875 --> 00:01:37.760
This point is very precisely covered.

27
00:01:37.760 --> 00:01:43.930
And the third access is a compare on get or compare and swap type access.

28
00:01:43.930 --> 00:01:49.000
This is also the concurrent notion also covered in my

29
00:01:49.000 --> 00:01:51.500
other course that I just mentioned.

30
00:01:51.500 --> 00:01:54.000
And there are several methods to implement this.

31
00:01:54.000 --> 00:02:00.000
The first one here is a getAndAdd that will read the value of the

32
00:02:00.000 --> 00:02:04.750
age field and add one to it in an atomic way.

33
00:02:04.750 --> 00:02:11.500
This is how you can use the concurrent pattern offered by this VarHandle class.

34
00:02:11.500 --> 00:02:22.000
We will not go any further in that course on this point since concurrency is not really in the scope of this course.

