WEBVTT
1
00:00:02.145 --> 00:00:07.252
We are going to work on this example injecting a database connection.

2
00:00:07.252 --> 00:00:08.025
And for that,

3
00:00:08.025 --> 00:00:12.390
we are going to go back to the previous example we have created in the

4
00:00:12.390 --> 00:00:17.034
previous module about the object relational mapper.

5
00:00:17.034 --> 00:00:22.262
In that previous example, we created an object called an EntityManager,

6
00:00:22.262 --> 00:00:29.489
which is some kind of very simplified EntityManager from JPA or from Hibernate.

7
00:00:29.489 --> 00:00:36.122
This EntityManager deals with the writing and reading of objects in a database,

8
00:00:36.122 --> 00:00:39.269
so it needs a database connection.

9
00:00:39.269 --> 00:00:44.417
And since we did not have dependency injection in the previous module,

10
00:00:44.417 --> 00:00:51.213
we just created the DB connection inside this EntityManager implementation.

11
00:00:51.213 --> 00:00:58.379
It means that, in fact, we created a dependency between the EntityManager,

12
00:00:58.379 --> 00:01:02.638
which deals with reading and writing objects to a

13
00:01:02.638 --> 00:01:05.555
database and the database itself.

14
00:01:05.555 --> 00:01:07.989
We chose the H2 database.

15
00:01:07.989 --> 00:01:15.393
We could have chosen MySQL or any other database, and the H2 database we chose.

16
00:01:15.393 --> 00:01:16.761
What does it mean?

17
00:01:16.761 --> 00:01:21.910
It means that since this dependency is hard coded inside the EntityManager,

18
00:01:21.910 --> 00:01:24.589
if we need to change the database,

19
00:01:24.589 --> 00:01:29.090
we need to change this EntityManager class itself.

20
00:01:29.090 --> 00:01:32.902
So we will end up with an H2 EntityManager,

21
00:01:32.902 --> 00:01:36.684
a MySQL EntityManager, a Postgres EntityManager,

22
00:01:36.684 --> 00:01:39.653
and so on, and so forth.

23
00:01:39.653 --> 00:01:42.559
And this is what we do not want to do.

24
00:01:42.559 --> 00:01:56.000
We need to have an EntityManager that is unique on one hand, and on the other hand, a service that will encapsulate the access to a database.

