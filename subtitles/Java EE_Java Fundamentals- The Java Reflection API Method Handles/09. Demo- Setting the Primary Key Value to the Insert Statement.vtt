WEBVTT
1
00:00:01.618 --> 00:00:04.792
What is the role of this method?

2
00:00:04.792 --> 00:00:07.786
This method nulls the statement,

3
00:00:07.786 --> 00:00:13.703
which is just for the moment a wrapper on the SQL request that we just created.

4
00:00:13.703 --> 00:00:19.748
In this SQL request, we have three question marks in the case of a Person class.

5
00:00:19.748 --> 00:00:21.376
And for each question mark,

6
00:00:21.376 --> 00:00:26.059
we need to provide a value for the corresponding parameter.

7
00:00:26.059 --> 00:00:31.339
So those three parameters are the id, the name, and the age.

8
00:00:31.339 --> 00:00:35.377
And all those three parameters are held by the t object

9
00:00:35.377 --> 00:00:37.669
that we are getting as a parameter.

10
00:00:37.669 --> 00:00:42.229
At runtime, we do not know that this t object is a Person class.

11
00:00:42.229 --> 00:00:44.931
For the moment, it's just of type t.

12
00:00:44.931 --> 00:00:51.565
So we need to discover that using our metamodel and the Reflection API.

13
00:00:51.565 --> 00:00:59.999
So first, let us get the reference on the metamodel, Metamodel.of t .getClass.

14
00:00:59.999 --> 00:01:04.997
Here, we do not know which class we are dealing with at compile time,

15
00:01:04.997 --> 00:01:10.544
but at runtime, this t object will be indeed an instance of a class.

16
00:01:10.544 --> 00:01:12.948
And now, from this metamodel,

17
00:01:12.948 --> 00:01:17.538
we can get the PrimaryKey and the type of this PrimaryKey,

18
00:01:17.538 --> 00:01:24.170
and this is going to be a class, and we are going to call it primaryKeyType.

19
00:01:24.170 --> 00:01:29.297
Now here, we can really have any kind of type for the primaryKeyType.

20
00:01:29.297 --> 00:01:32.203
It could be a long, an integer, It could be a string.

21
00:01:32.203 --> 00:01:33.189
It could be an object.

22
00:01:33.189 --> 00:01:35.273
It could really be anything.

23
00:01:35.273 --> 00:01:40.196
The PreparedStatement only knows how to deal with primitive type,

24
00:01:40.196 --> 00:01:43.839
string, and the different dates that we can use.

25
00:01:43.839 --> 00:01:50.012
Here, in our case, it is longer because we created the Person class in that way.

26
00:01:50.012 --> 00:01:53.857
So I'm just going to write a single test,

27
00:01:53.857 --> 00:02:01.899
if primaryKeyType == long.class, then I am going to do something,

28
00:02:01.899 --> 00:02:06.750
and this something is that I need to set the value of this long,

29
00:02:06.750 --> 00:02:12.744
setLong, to the first parameter of the sql query we created.

30
00:02:12.744 --> 00:02:13.519
And remember,

31
00:02:13.519 --> 00:02:18.108
the first parameter was precisely the primaryKey and then

32
00:02:18.108 --> 00:02:21.788
the value id that we are going to set.

33
00:02:21.788 --> 00:02:25.057
If we want to write a really general EntityManager,

34
00:02:25.057 --> 00:02:29.494
then we will need to add the handling of all the different

35
00:02:29.494 --> 00:02:33.164
types of that primaryKey including int, string,

36
00:02:33.164 --> 00:02:34.999
and the like.

37
00:02:34.999 --> 00:02:37.677
Here, since we are only dealing with the Person class,

38
00:02:37.677 --> 00:02:41.240
we are just going to write the handling of the

39
00:02:41.240 --> 00:02:43.909
primaryKey in the case it is a long.

40
00:02:43.909 --> 00:02:49.798
Now we need to make a decision about how we are going to handle those IDs.

41
00:02:49.798 --> 00:02:54.373
The idea here is that the EntityManager is going to take

42
00:02:54.373 --> 00:02:57.442
care of the generation of the primary keys.

43
00:02:57.442 --> 00:02:59.352
This is a decision that we need to make,

44
00:02:59.352 --> 00:03:02.700
and this is probably a reasonable decision.

45
00:03:02.700 --> 00:03:05.092
If you check Hibernate, and EclipseLink,

46
00:03:05.092 --> 00:03:07.941
and all the JPA implementations,

47
00:03:07.941 --> 00:03:12.749
they all provide a way to generate the primary keys for you.

48
00:03:12.749 --> 00:03:15.174
Now they may have different strategies,

49
00:03:15.174 --> 00:03:18.420
strategies that realize on sequences from the database,

50
00:03:18.420 --> 00:03:19.323
for instance.

51
00:03:19.323 --> 00:03:21.819
Here, we are going to create something really simple.

52
00:03:21.819 --> 00:03:27.751
We are going to create a private AtomicLong field.

53
00:03:27.751 --> 00:03:34.588
Let us call it idGenerator, new AtomicLong, and let us start from 0.

54
00:03:34.588 --> 00:03:41.570
So now this id will be idGenerator.incrementAndGet so that we will

55
00:03:41.570 --> 00:03:45.199
generate a different value every time we persist an object.

56
00:03:45.199 --> 00:03:49.717
Now this method is going to throw the SQLException.

57
00:03:49.717 --> 00:04:02.000
Once again, we are not interested in that exception, so let us throw it away. So now we have endured the first field of our request, which is the primaryKey.

