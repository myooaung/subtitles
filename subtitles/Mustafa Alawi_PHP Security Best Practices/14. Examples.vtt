WEBVTT
1
00:00:02.430 --> 00:00:03.120
Welcome back.

2
00:00:03.480 --> 00:00:09.600
Now, what I'm going to do is that I'm going to show you a real example of a scale injection and what

3
00:00:10.410 --> 00:00:12.270
hackers could do to your application.

4
00:00:12.600 --> 00:00:22.080
So here I have this very simple application that is a application that is usually used in colleges and

5
00:00:22.980 --> 00:00:32.700
in many systems, actually, not just colleges, but in many systems they use a kind of a a searching

6
00:00:32.700 --> 00:00:41.430
functionality that allows users to find their results or their information or query about something

7
00:00:41.520 --> 00:00:43.050
about a specific thing.

8
00:00:43.560 --> 00:00:50.280
So this is an example of finding a user or a student information.

9
00:00:50.370 --> 00:00:54.900
It could be our results, exam results or other information.

10
00:00:55.470 --> 00:01:07.650
But hackers could use this to harm cause harm to the to the site or to the organization or other even

11
00:01:07.650 --> 00:01:08.640
other students.

12
00:01:09.030 --> 00:01:10.470
So let me show you an example.

13
00:01:10.650 --> 00:01:11.610
Here we have this.

14
00:01:12.900 --> 00:01:13.260
Good.

15
00:01:13.260 --> 00:01:21.480
And suppose that you have a beach because that gets user information or student information.

16
00:01:21.930 --> 00:01:28.170
So he suppose that first you need to include remember, we need to include the include once we need

17
00:01:28.170 --> 00:01:33.930
to include the configuration to connect the database config that BHP.

18
00:01:34.860 --> 00:01:36.600
And then suppose that you have your.

19
00:01:39.400 --> 00:01:43.630
Because that's going to get the that's going to get the.

20
00:01:45.380 --> 00:01:46.850
Let's use get.

21
00:01:48.270 --> 00:01:51.030
That's going to get the idea from here.

22
00:01:51.030 --> 00:01:52.770
That's going to get the ID from the user.

23
00:01:53.460 --> 00:01:58.140
So this is going to take the ID from from the user and get their information.

24
00:01:58.560 --> 00:02:01.350
So here I'm going to say user I.D..

25
00:02:03.210 --> 00:02:07.020
So if you are the asset and is not empty.

26
00:02:09.380 --> 00:02:09.930
I'm here.

27
00:02:09.950 --> 00:02:10.460
Get.

28
00:02:14.800 --> 00:02:15.400
User ID.

29
00:02:17.410 --> 00:02:19.780
So this is going to get the user I.D. limit here and get.

30
00:02:20.440 --> 00:02:26.350
I'm going to say user I.D. is equal to.

31
00:02:27.890 --> 00:02:29.270
Get user I.D..

32
00:02:31.910 --> 00:02:34.040
And suppose that you have your equity.

33
00:02:34.250 --> 00:02:36.260
Suppose that you have my is I.

34
00:02:37.950 --> 00:02:38.520
Query.

35
00:02:40.090 --> 00:02:47.830
That takes the connection from the remember the connection from the config here this connection invaluable

36
00:02:48.580 --> 00:02:53.950
and it takes also the and for example select.

37
00:02:55.230 --> 00:02:55.920
Select.

38
00:02:58.430 --> 00:02:59.000
From.

39
00:02:59.510 --> 00:03:01.700
Select all from.

40
00:03:04.010 --> 00:03:14.110
Users where user ID is equal to the user ID user ID.

41
00:03:16.120 --> 00:03:18.460
And then this is going to obviously return result.

42
00:03:18.520 --> 00:03:20.080
This is going to return result.

43
00:03:20.560 --> 00:03:25.810
The result is going to be equal to this as opposed to you just want to display the result to the user.

44
00:03:25.810 --> 00:03:29.950
You could say while we're all.

45
00:03:31.750 --> 00:03:34.930
Is equal to my scale, I.

46
00:03:37.530 --> 00:03:40.770
And then fetch us results.

47
00:03:41.850 --> 00:03:50.550
And then you could just echo the result or display the results basically here echo the raw.

48
00:03:51.930 --> 00:03:54.030
Say your first.

49
00:03:54.030 --> 00:03:56.520
We have the user name.

50
00:03:57.240 --> 00:03:58.410
User underscore name.

51
00:04:01.210 --> 00:04:02.800
And Echo.

52
00:04:07.980 --> 00:04:08.910
Space here.

53
00:04:12.140 --> 00:04:13.850
Let's let's have them in one line.

54
00:04:13.850 --> 00:04:17.900
I'm going to say your space and then that.

55
00:04:20.120 --> 00:04:24.110
And then here I'm going to add also that the concatenate you has to contain it and then I'm going to

56
00:04:24.110 --> 00:04:24.620
say row.

57
00:04:26.280 --> 00:04:29.700
And then user email.

58
00:04:32.380 --> 00:04:34.180
So this is what this code is going to do.

59
00:04:34.510 --> 00:04:39.310
And here for for this, we need to say here the name is user ID.

60
00:04:40.120 --> 00:04:41.050
User underscore ID.

61
00:04:41.860 --> 00:04:46.990
And the the method is going to be get and the action is going to be for slash.

62
00:04:47.560 --> 00:04:48.760
So this is this.

63
00:04:48.940 --> 00:04:53.800
This script is just going to get a user from a database given their their ID.

64
00:04:53.890 --> 00:04:55.810
So the user is going to give you their ID.

65
00:04:56.480 --> 00:05:04.060
And your responsibility is to go to the do your database, end up in the user's table and get the information,

66
00:05:04.090 --> 00:05:05.830
get their user name and email.

67
00:05:06.580 --> 00:05:08.140
So here, let's test this.

68
00:05:08.140 --> 00:05:14.730
Let me here refresh and suppose that you are an ethical user and you just want to get your information.

69
00:05:14.740 --> 00:05:16.150
You would just type your ID.

70
00:05:16.300 --> 00:05:21.040
So suppose that I type you one, I'm going to say here one and then I'm going to click on find.

71
00:05:21.490 --> 00:05:25.180
If I click on find, I'm going to get my name and my email.

72
00:05:25.870 --> 00:05:27.270
There's nothing wrong with this.

73
00:05:27.280 --> 00:05:34.270
As you can see, if my ID was one, I would get my name and my my email.

74
00:05:34.660 --> 00:05:40.630
If my I.D. was to say two, I would get my email, add my my name.

75
00:05:40.630 --> 00:05:42.310
There is no problem with this at all.

76
00:05:42.820 --> 00:05:46.870
And of course, each user must have a unique ID and they should.

77
00:05:47.350 --> 00:05:58.600
It's it's a student's responsibility to keep their ID safe and not to give their IDs to other to other

78
00:05:58.600 --> 00:06:00.140
students so that they don't.

79
00:06:01.760 --> 00:06:03.940
Query each other's information.

80
00:06:05.450 --> 00:06:10.700
But let's now talk about hackers and what hackers could do to your application.

81
00:06:11.060 --> 00:06:13.340
So here you can see this code.

82
00:06:13.730 --> 00:06:14.480
Base code is fine.

83
00:06:14.480 --> 00:06:15.440
There is no problem with it.

84
00:06:15.830 --> 00:06:25.010
But hackers could instead of passing here, instead of passing an I.D., for example, 1 to 3 or even

85
00:06:25.010 --> 00:06:34.730
a long ID, they could pass an obscure ill query that could do something about your application.

86
00:06:35.450 --> 00:06:37.250
So they could, for example, say.

87
00:06:39.010 --> 00:06:44.170
One or or one is equal to one.

88
00:06:45.250 --> 00:06:48.670
So if you click on find here, guess what you are going to get?

89
00:06:49.160 --> 00:06:53.520
Everybody's everybody's name and email.

90
00:06:53.530 --> 00:06:59.410
As you can see, I got all people's all students emails and names.

91
00:06:59.800 --> 00:07:04.690
So hackers, good with just a simple command, could get everything from your database.

92
00:07:04.990 --> 00:07:05.790
This is one.

93
00:07:05.800 --> 00:07:14.020
This is just one of so many problems they could cause or do to your application.

94
00:07:14.380 --> 00:07:15.040
So they could.

95
00:07:15.520 --> 00:07:18.330
This one is is simple.

96
00:07:18.460 --> 00:07:21.640
Getting information getting information from your database.

97
00:07:21.640 --> 00:07:27.430
And this information could be could be important information.

98
00:07:27.970 --> 00:07:33.970
And they could use this against you or they could use this against students or users.

99
00:07:34.150 --> 00:07:41.350
They could use their emails for to to access their accounts and other websites.

100
00:07:41.380 --> 00:07:45.370
So this is one only one of so many problems that they could do.

101
00:07:45.850 --> 00:07:49.450
Another thing that they could do is that they could delete your database.

102
00:07:49.450 --> 00:07:51.040
They could delete your users.

103
00:07:51.370 --> 00:07:58.570
Imagine you are you run a business and you have a very important table that contains maybe payments.

104
00:07:58.940 --> 00:08:00.280
It could contains orders.

105
00:08:00.880 --> 00:08:02.230
They could delete everything.

106
00:08:02.260 --> 00:08:03.580
Let me show you what they could do.

107
00:08:03.970 --> 00:08:12.820
So suppose here that you have your my askew ill here my ask ill multi multi underscore query.

108
00:08:13.510 --> 00:08:19.630
So if you are using this to, for example, instead of here, I'm going to show me this.

109
00:08:20.170 --> 00:08:23.740
Suppose that now you are you are not displaying results.

110
00:08:23.740 --> 00:08:32.860
You are just taking maybe something from the user in order to do something in the back end without displaying

111
00:08:32.860 --> 00:08:35.110
anything to the user without displaying anything.

112
00:08:36.430 --> 00:08:42.490
So here, suppose that you are here a business.

113
00:08:44.530 --> 00:08:54.490
That maybe here you are asking users to give to give their order.

114
00:08:55.870 --> 00:09:00.580
Order it in order to do something with that ID in the back end.

115
00:09:00.730 --> 00:09:10.120
Maybe maybe you are just going to say yea if result is correct, if result if this is true, you may

116
00:09:10.120 --> 00:09:13.300
just say echo and then.

117
00:09:17.700 --> 00:09:18.960
Successful.

118
00:09:22.220 --> 00:09:27.710
Your request re west was.

119
00:09:29.490 --> 00:09:30.210
Ross.

120
00:09:31.390 --> 00:09:32.320
Processed.

121
00:09:36.450 --> 00:09:37.500
Successfully.

122
00:09:42.620 --> 00:09:44.870
So this is another example you are just getting.

123
00:09:45.770 --> 00:09:51.200
So here, supposing that you are getting an order here, I'm just going to keep using it because I'm

124
00:09:51.260 --> 00:09:57.800
going to keep using the user ID because in this example I still have the user I.D., so I need to use

125
00:09:57.800 --> 00:09:58.340
the user I.D..

126
00:09:58.340 --> 00:10:00.350
But suppose that this is an order.

127
00:10:00.920 --> 00:10:06.740
You get the point, but suppose that this is an order and your your responsibility is to get that order

128
00:10:06.740 --> 00:10:10.760
ID in order to do something behind the scenes and just return the result.

129
00:10:11.510 --> 00:10:11.930
So.

130
00:10:13.030 --> 00:10:14.720
A hacker, what the hacker could do.

131
00:10:14.740 --> 00:10:16.720
Let me show you what an ethical user could do.

132
00:10:16.720 --> 00:10:19.030
First, an ethical user name.

133
00:10:19.030 --> 00:10:20.050
You remove all of this.

134
00:10:22.260 --> 00:10:31.860
An ethical user, which would just type the order in and just click on request or find or whatever it

135
00:10:31.860 --> 00:10:32.160
is.

136
00:10:32.430 --> 00:10:35.880
And here it's just going to say your order was processed successfully.

137
00:10:35.880 --> 00:10:36.810
There is no problem with it.

138
00:10:37.320 --> 00:10:40.530
However, however, what the hacker could do.

139
00:10:41.540 --> 00:10:43.910
Is that we could inject battery.

140
00:10:43.940 --> 00:10:47.240
Let me show you what we could do to delete this table completely.

141
00:10:48.140 --> 00:10:53.840
So this table, I want you to click on this table and show you that this table now exists.

142
00:10:56.540 --> 00:10:58.400
As you can see, the user's table exists.

143
00:10:58.820 --> 00:11:06.050
Now, if I am a bad user name, let's suppose that I'm a hacker and I'm going to say here four and then

144
00:11:06.050 --> 00:11:13.400
semicolon, and then I'm going to say drop, drop table users and then I'm going to click on Find.

145
00:11:13.430 --> 00:11:13.970
Guess what?

146
00:11:14.300 --> 00:11:16.130
Guess what's going to happen if I save it?

147
00:11:16.700 --> 00:11:20.080
If I click on find here, I'm going to get this result.

148
00:11:20.090 --> 00:11:22.520
Your your request was processed successfully.

149
00:11:22.910 --> 00:11:25.640
However, the table was deleted.

150
00:11:25.670 --> 00:11:28.360
Leave limit refresh and show you that the table has been deleted.

151
00:11:28.370 --> 00:11:35.480
As you can see, if you click on your database, you will find that no tables found in database.

152
00:11:35.900 --> 00:11:37.700
So the user table was deleted.

153
00:11:38.030 --> 00:11:39.230
Who deleted the table?

154
00:11:39.590 --> 00:11:48.860
I because I here was acting as a hacker and they injected a bad request, a bad excuse that deleted

155
00:11:49.520 --> 00:11:50.780
the table completely.

156
00:11:51.110 --> 00:11:52.820
And suppose imagine that table.

157
00:11:53.210 --> 00:12:05.330
Imagine that this table contains maybe it contains important information, important info such as payments

158
00:12:05.810 --> 00:12:12.110
or orders or could be deliveries.

159
00:12:13.410 --> 00:12:14.090
Delivery.

160
00:12:14.100 --> 00:12:19.800
So many important things could be in your in your table and a hacker could just.

161
00:12:20.220 --> 00:12:21.150
Or a bad user.

162
00:12:21.360 --> 00:12:22.880
It doesn't have to be a hacker.

163
00:12:22.890 --> 00:12:27.180
Even there are bad user users who aren't qualified to be hackers.

164
00:12:27.510 --> 00:12:29.040
Could do this to your application.

165
00:12:29.490 --> 00:12:36.930
So these were just simple examples of what users could do to harm your application or do bad things

166
00:12:36.930 --> 00:12:37.980
to your application.

167
00:12:38.430 --> 00:12:44.760
And next, I'm going to be showing you how to protect your application against these types of bad practices

168
00:12:44.760 --> 00:12:47.420
and against these types of attacks.
