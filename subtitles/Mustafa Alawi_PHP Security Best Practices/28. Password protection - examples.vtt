WEBVTT
1
00:00:00.980 --> 00:00:01.640
Welcome back.

2
00:00:02.210 --> 00:00:08.330
Now, what I'm going to show you is that I'm going to show you a simple registration system that doesn't

3
00:00:08.330 --> 00:00:12.260
take into account hashing, password, encrypting passwords.

4
00:00:12.860 --> 00:00:14.360
And this is a big problem.

5
00:00:14.690 --> 00:00:25.820
And if you don't do this, any hacker who could who steals your your database will be able to get passwords

6
00:00:25.820 --> 00:00:29.060
and use passwords of different users you have in the system.

7
00:00:29.690 --> 00:00:31.290
So let me show you what you can do.

8
00:00:31.310 --> 00:00:36.980
First of all, let me show you the bad practice that many developers follow and how you can avoid this.

9
00:00:37.280 --> 00:00:44.690
First of all, we have this registration system that allows users to register using their username,

10
00:00:44.690 --> 00:00:45.770
email, a password.

11
00:00:46.520 --> 00:00:47.720
There is no problem with this.

12
00:00:47.730 --> 00:00:50.890
With this user interface, there's no problem with it.

13
00:00:50.900 --> 00:00:58.070
We would normally have any any website would normally have a user name, email, a password to allow

14
00:00:58.070 --> 00:00:59.180
users to register.

15
00:00:59.480 --> 00:01:06.030
But the problem, the main problem is in the script itself, that registers users here.

16
00:01:06.350 --> 00:01:08.960
First of all, we have the here the I'm using here.

17
00:01:08.960 --> 00:01:16.760
They might really object to use the prepared statement to avoid any excusable injection.

18
00:01:17.330 --> 00:01:24.800
And then here I have a statement that's going to check if a user has provided me with the username and

19
00:01:24.800 --> 00:01:25.880
the email or the password.

20
00:01:26.890 --> 00:01:33.520
And then here I got the email and the password and and the and the name and stored them in valuables.

21
00:01:33.940 --> 00:01:41.500
And then here I have that a prepared statement, a escrow statement that insert into user's table.

22
00:01:42.100 --> 00:01:47.860
And what I'm going to insert is the user name, which is, which is this column username.

23
00:01:48.900 --> 00:01:53.250
Use a name and then use an email, which is this column.

24
00:01:54.030 --> 00:02:00.660
And finally, the user password, which is this column and then values and then question marks because

25
00:02:00.660 --> 00:02:04.470
I'm using the prepare statement and then here bind param.

26
00:02:04.890 --> 00:02:09.870
And what I'm binding is that I'm binding three strings.

27
00:02:10.230 --> 00:02:16.350
The first string is the name which is which is this which is going to be stored under the username,

28
00:02:16.830 --> 00:02:20.340
the email which is going to be stored under the user email.

29
00:02:20.580 --> 00:02:25.980
And finally the password which is going to be stored under, under the password field in the database.

30
00:02:26.280 --> 00:02:29.310
And as you can see, you need to follow the the order.

31
00:02:29.310 --> 00:02:30.660
You need to have these in order.

32
00:02:30.660 --> 00:02:33.600
So if you start with the username, you need to say name.

33
00:02:34.470 --> 00:02:40.740
If the user email is the second parameter here, you need to say email.

34
00:02:41.670 --> 00:02:45.030
If the password is this third parameter, you need to say password.

35
00:02:45.720 --> 00:02:50.280
Then I just have here a excuse to exclude this statement.

36
00:02:50.670 --> 00:02:56.520
And then in case of success, I'm going to say here success or I'm going to say, let's say account

37
00:02:57.540 --> 00:02:58.260
created.

38
00:03:00.550 --> 00:03:01.870
And as.

39
00:03:03.120 --> 00:03:06.360
Been successfully false.

40
00:03:06.360 --> 00:03:09.270
In case of false, I'm going to say failed.

41
00:03:10.630 --> 00:03:13.240
To get an account.

42
00:03:17.020 --> 00:03:21.760
So this is the this is the script that's going to get the account.

43
00:03:22.180 --> 00:03:25.000
And by the way, there is absolutely no problems with it.

44
00:03:25.540 --> 00:03:29.210
The script is perfect, except for only one thing.

45
00:03:29.260 --> 00:03:31.990
There's only one, I would say.

46
00:03:33.040 --> 00:03:35.980
There is one problem with this problem.

47
00:03:36.070 --> 00:03:37.000
There is one problem.

48
00:03:37.330 --> 00:03:38.440
So what is the problem?

49
00:03:39.980 --> 00:03:44.570
Probably we will find out what the problem is shortly.

50
00:03:44.570 --> 00:03:48.730
ZELENY Use this script to register a user letting you create an account.

51
00:03:48.740 --> 00:03:51.620
I'm going to say here, let me here zoom in.

52
00:03:52.430 --> 00:03:53.390
Let's get you that account.

53
00:03:53.390 --> 00:04:00.680
So here I'm going to say admin and then the email say admin at example.

54
00:04:02.330 --> 00:04:02.930
Dot com.

55
00:04:03.440 --> 00:04:08.720
And then the password, let's say one, two, three, four, five, and then I'm going to click on register.

56
00:04:09.200 --> 00:04:14.960
So in case of success, as you can see, it's going to say account has been created successfully, I

57
00:04:14.960 --> 00:04:15.760
should say here.

58
00:04:15.770 --> 00:04:16.110
By the way.

59
00:04:16.110 --> 00:04:17.090
You should say here.

60
00:04:18.080 --> 00:04:19.490
Successfully.

61
00:04:21.940 --> 00:04:25.930
So in case of success, it's going to it's going to say account has been created successfully.

62
00:04:26.350 --> 00:04:29.680
And, of course, if you heading over to the database, you should find that account.

63
00:04:30.190 --> 00:04:36.010
Let me refresh the table at the user's table and see whether this account has been created or not.

64
00:04:36.610 --> 00:04:39.940
And, of course, the the account has been created.

65
00:04:40.420 --> 00:04:44.980
However, the problem is the problem is the user name of the user.

66
00:04:45.280 --> 00:04:48.580
The user password is a plain text.

67
00:04:48.610 --> 00:04:53.380
As you can see, the password has been stored as well as is one, two, three, four, five.

68
00:04:53.710 --> 00:04:55.210
And this is a big problem.

69
00:04:55.510 --> 00:04:55.870
Why?

70
00:04:55.870 --> 00:04:56.920
This is a big problem.

71
00:04:57.610 --> 00:05:06.970
This is a big problem because if a hacker steals your database, they will be able to to get the the

72
00:05:06.970 --> 00:05:09.100
passwords of any user you have in the database.

73
00:05:09.400 --> 00:05:12.910
And this is a terrible mistake that many developers do.

74
00:05:17.400 --> 00:05:17.840
Make.

75
00:05:18.390 --> 00:05:22.950
This is a big mistake that many developers make, and you have to avoid this mistake.

76
00:05:23.370 --> 00:05:27.510
How can you avoid this mistake and never make this mistake ever again?

77
00:05:27.780 --> 00:05:29.820
Well, you can here.

78
00:05:29.820 --> 00:05:30.510
And you should.

79
00:05:30.810 --> 00:05:33.030
You should encrypt your password.

80
00:05:33.150 --> 00:05:34.350
You should encrypt the password.

81
00:05:34.680 --> 00:05:36.210
So how can you encrypt password?

82
00:05:36.630 --> 00:05:38.430
There are many ways to encrypt the password.

83
00:05:39.240 --> 00:05:41.790
According to BHP, the best the.

84
00:05:43.050 --> 00:05:51.150
The best way to to to hash or encrypt a password is to use a function called password.

85
00:05:51.900 --> 00:05:53.340
Underscore hash.

86
00:05:57.010 --> 00:06:00.190
And they pass pass this year.

87
00:06:00.850 --> 00:06:04.270
Pass the password here and then the second.

88
00:06:05.560 --> 00:06:09.040
The second parameter is a.

89
00:06:11.400 --> 00:06:15.720
Is a VI is a constant called password default.

90
00:06:16.260 --> 00:06:19.590
And then all you need to do is to store this in the password.

91
00:06:19.600 --> 00:06:26.550
So instead of saying instead of storing the password as is, we need to use the password hash and then

92
00:06:26.550 --> 00:06:28.650
store it in the password variable.

93
00:06:29.160 --> 00:06:35.130
Let me now click on free on file and then see all the let me now test one more time.

94
00:06:35.700 --> 00:06:37.470
So let me now create a new account.

95
00:06:37.530 --> 00:06:38.790
Now let me refresh.

96
00:06:39.790 --> 00:06:41.400
Let me let me go back first.

97
00:06:42.000 --> 00:06:44.040
Let me refresh and let's create a new account.

98
00:06:44.730 --> 00:06:52.830
So I'm going to say here admin one and then I'm going to say admin one at example dot com and then I'm

99
00:06:52.830 --> 00:06:55.050
going to say one, two, three, four, five.

100
00:06:55.560 --> 00:06:59.120
Now let me click on register and show you the difference here.

101
00:06:59.130 --> 00:07:02.100
As you can see, it's going to say account has been created successfully.

102
00:07:02.460 --> 00:07:10.800
However, in the database now, if I refresh my user stable, you will find that as you can see, the

103
00:07:10.800 --> 00:07:15.540
password is not has not been stored as a plaintext.

104
00:07:16.020 --> 00:07:17.480
The password has been hashed.

105
00:07:17.490 --> 00:07:25.590
As you can see, the password is a big combination of characters that a hacker would not be able to

106
00:07:26.070 --> 00:07:27.120
know what this is.

107
00:07:27.570 --> 00:07:32.580
And by the way, it's very difficult to kind of decrypt this.

108
00:07:34.140 --> 00:07:38.790
This is very difficult for hackers to do so.

109
00:07:39.240 --> 00:07:45.270
So this is how you can you can you can encrypt your password and you should always do this.

110
00:07:45.870 --> 00:07:49.310
And you might be wondering, how can you verify the password?

111
00:07:49.320 --> 00:07:51.630
Well, in order to verify the password.

112
00:07:52.650 --> 00:07:55.740
Once the user tries to log in.

113
00:07:56.280 --> 00:08:04.530
So I'm assuming that the user has has registered and maybe you have a log in form in order to log users

114
00:08:04.530 --> 00:08:10.200
and you need to use a function called pass or underscore verifying.

115
00:08:11.160 --> 00:08:17.430
This function is going to take the passwords from the user password.

116
00:08:19.840 --> 00:08:26.740
And that's going to verify this password against against the password that you have in your database.

117
00:08:27.130 --> 00:08:30.340
So upon logging in, you need to get the password from the database.

118
00:08:30.970 --> 00:08:37.870
You will get the password from the database and they pass it year by year and verify it against the

119
00:08:37.870 --> 00:08:43.780
password that will be passed by the user and check whether whether they match or not.

120
00:08:43.780 --> 00:08:46.540
If they match, then you need to log users in.

121
00:08:46.930 --> 00:08:54.280
Otherwise you need to block users from logging in because because the passwords don't match.

122
00:08:54.880 --> 00:09:00.600
So let me show you the manual given by BHP, by the official manual given by BHP.

123
00:09:00.610 --> 00:09:03.730
As you can see here, this is the password, the hash function.

124
00:09:04.540 --> 00:09:05.860
So this is the password hash.

125
00:09:05.860 --> 00:09:06.760
It takes the password.

126
00:09:07.330 --> 00:09:10.390
And the second parameter is the password algorithms.

127
00:09:11.380 --> 00:09:17.350
And here what I wanted to show you is that I wanted to show you the verification here.

128
00:09:17.590 --> 00:09:21.610
In order to verify the user, you need to use the function here.

129
00:09:21.610 --> 00:09:22.150
The.

130
00:09:23.620 --> 00:09:30.550
The this function the password to verify this password to verify the extra parameters.

131
00:09:30.550 --> 00:09:33.970
It takes the password and it takes the hash to password.

132
00:09:34.300 --> 00:09:39.790
So in order to log user in, you need to get the hash password and then compare it with the password

133
00:09:39.790 --> 00:09:44.920
that will be given by your by your user.

134
00:09:46.330 --> 00:09:50.560
And this is a way this is only one way to encrypt passwords.

135
00:09:50.890 --> 00:09:58.360
There is other there is another way that you can use and these functions are the MD5 as well as the

136
00:10:00.160 --> 00:10:04.210
is h a function which is this function.

137
00:10:06.070 --> 00:10:09.490
Which is also this function is a one.

138
00:10:10.030 --> 00:10:16.300
And this function can also be used for or for passwords.

139
00:10:16.660 --> 00:10:18.400
So these two functions can be used.

140
00:10:18.400 --> 00:10:22.230
And I'm going to be showing you an example right now how to use these two functions.

141
00:10:22.240 --> 00:10:23.140
It's very simple.

142
00:10:23.620 --> 00:10:31.180
All you need to do is just replace the password wi fi with the S one or the MD5.

143
00:10:32.680 --> 00:10:35.260
So let me show you how you can use the MD5 function.

144
00:10:35.680 --> 00:10:43.330
So for the modify function you just need to replace the password hash with empty five and it takes only

145
00:10:43.330 --> 00:10:43.900
one parameter.

146
00:10:43.900 --> 00:10:49.300
So I'm going to remove the second parameter and whenever you want to log the user and you just need

147
00:10:49.300 --> 00:10:50.380
to use the function again.

148
00:10:50.680 --> 00:10:56.740
So this function, you should be used both in the log, in script and in the registration script.

149
00:10:57.040 --> 00:10:57.670
Very simple.

150
00:10:57.700 --> 00:10:59.140
You don't need to do anything special.

151
00:10:59.470 --> 00:11:06.580
All you need to do is to get the user password from the user opposite to the MD5 in both in the registration,

152
00:11:06.580 --> 00:11:07.450
which is the script.

153
00:11:07.780 --> 00:11:13.660
And if you have a log in script, you need to do the same thing and leaning out this and show you how

154
00:11:13.660 --> 00:11:14.800
this is going to work.

155
00:11:15.580 --> 00:11:18.130
So let me refresh and let's get another account.

156
00:11:18.550 --> 00:11:24.550
I'm going to say admin three and then I'm going to say admin at three at example.

157
00:11:26.090 --> 00:11:26.600
Dot com.

158
00:11:29.490 --> 00:11:32.490
And then I'm going to type a password and then I'm going to click on register.

159
00:11:32.940 --> 00:11:35.670
Here it says, account has been created successfully.

160
00:11:36.210 --> 00:11:41.130
Now in the database, let me refresh and show you the new account.

161
00:11:41.580 --> 00:11:46.740
So the new account was the new account is is admin three.

162
00:11:46.740 --> 00:11:51.960
And as you can see, it has the password has been encrypted and this is the password.

163
00:11:52.290 --> 00:11:54.360
Obviously, this is not the password that I typed.

164
00:11:54.690 --> 00:11:56.160
So this is the encrypted password.

165
00:11:56.700 --> 00:11:59.160
So this is how you can encrypt passwords.

166
00:11:59.490 --> 00:12:03.660
And you need to follow you need to follow this technique.

167
00:12:03.870 --> 00:12:11.850
Otherwise, your your database will be vulnerable against attacks from several developers, several

168
00:12:12.060 --> 00:12:17.700
hackers who could steal your your database and could steal passwords of different people.
