WEBVTT
1
00:00:00.750 --> 00:00:01.350
Welcome back.

2
00:00:01.860 --> 00:00:09.720
Now I'm going to show you how to use the password, a hash in a complete log in registration system.

3
00:00:10.170 --> 00:00:15.450
So I have you created these two files, one file called register that BHP and the other file is log

4
00:00:15.450 --> 00:00:16.140
in that BHP.

5
00:00:16.860 --> 00:00:23.220
So here what I changed is that this form is going to be handled by using the register that BGP, which

6
00:00:23.220 --> 00:00:23.910
is this file.

7
00:00:24.420 --> 00:00:26.340
So we I have already shown you this code.

8
00:00:26.700 --> 00:00:33.330
So here what I'm doing is that I'm taking the password from the user, this password, and I'm hashing

9
00:00:33.330 --> 00:00:35.700
this password using the password hash.

10
00:00:36.390 --> 00:00:37.680
So this is what I'm doing here.

11
00:00:38.250 --> 00:00:44.550
Whereas in the log in, the difference is that here in the log in, what I'm doing is that after I get

12
00:00:44.550 --> 00:00:50.190
the password from the database, I'm using a function called password to verify.

13
00:00:50.460 --> 00:00:54.500
And then I'm verifying the password that I was given by the user.

14
00:00:54.510 --> 00:00:56.760
This is the password that I was given by the user.

15
00:00:57.630 --> 00:01:03.840
And as you can see, what I'm doing here is that I'm using the real scape string function to escape

16
00:01:04.020 --> 00:01:10.740
the string and make sure that the user will not be using any script instead of the password.

17
00:01:11.280 --> 00:01:12.420
And then I'm here.

18
00:01:12.980 --> 00:01:17.670
Here, I'm a match, and I'm trying to match the password that the user has given me with it.

19
00:01:17.700 --> 00:01:24.810
With the with the password that has already been stored in the database by Y.

20
00:01:26.040 --> 00:01:31.530
Once the user created the password, once the user data the account, because once the user huskey that

21
00:01:31.530 --> 00:01:34.050
an account a password was stored.

22
00:01:34.050 --> 00:01:34.380
Right.

23
00:01:35.190 --> 00:01:42.000
And here I'm getting the password using the select username email password from the database where the

24
00:01:42.000 --> 00:01:44.190
user email is equal to the email.

25
00:01:44.610 --> 00:01:48.810
And then I'm getting the name and the email and the password from the database.

26
00:01:49.200 --> 00:01:55.530
And then here I'm trying to match whether the password match or whether the password that, that the

27
00:01:55.530 --> 00:01:59.940
user has just given me matches the password that the user registered with or not.

28
00:02:00.330 --> 00:02:06.810
So if the password, the user that the user has just given me matches the one that the matches the password

29
00:02:06.810 --> 00:02:12.840
that the user has created while registering then logged in will be successful.

30
00:02:13.260 --> 00:02:15.660
Else here I'm going to say failed.

31
00:02:16.380 --> 00:02:19.350
So this is all of what the script is going to do.

32
00:02:19.890 --> 00:02:24.030
And the most important part here is verifying the password.

33
00:02:24.030 --> 00:02:25.740
So here I'm using the password verify.

34
00:02:26.130 --> 00:02:29.070
And again, notice that I'm using the real escape stream.

35
00:02:29.430 --> 00:02:31.050
And also it's better to use here.

36
00:02:31.710 --> 00:02:32.310
To use.

37
00:02:33.510 --> 00:02:35.730
My excu il i.

38
00:02:36.360 --> 00:02:37.050
And again.

39
00:02:38.050 --> 00:02:45.880
Real escape stream because again, because whenever the user provides you with with with something you

40
00:02:45.880 --> 00:02:49.000
need to escape, use their escape stream.

41
00:02:49.420 --> 00:02:54.910
And whenever you are echoing something, it's better to use HD email entities.

42
00:02:58.570 --> 00:03:01.540
It's the email entities and then.

43
00:03:02.630 --> 00:03:03.590
User email.

44
00:03:04.650 --> 00:03:11.010
And also here it's email entities, user username.

45
00:03:12.000 --> 00:03:18.600
And similarly with the registration we need, it's better here to use the the minus ill.

46
00:03:18.600 --> 00:03:23.880
I real skip string even though I'm using here the proper function.

47
00:03:23.880 --> 00:03:33.630
But it's important to use their use the skip string in order to avoid the the the excess attacks.

48
00:03:33.630 --> 00:03:37.050
It's it's a great way an easy way to.

49
00:03:38.400 --> 00:03:40.380
To protect against that type of attack.

50
00:03:46.310 --> 00:03:53.630
And also also here, whenever you are echoing something, it's important to use the real skip sink unless

51
00:03:53.630 --> 00:03:56.000
you are echoing something that you have typed.

52
00:03:56.000 --> 00:04:05.180
For example, here I am echoing a simple text that I have written, so there is no need to use the e-mail

53
00:04:05.180 --> 00:04:06.380
entities here in this case.

54
00:04:07.070 --> 00:04:10.280
Let me now save and let me show you how this is going to work.

55
00:04:11.030 --> 00:04:12.740
So here, let me give you the new account.

56
00:04:13.160 --> 00:04:15.350
First, I'm going to go to four slash register.

57
00:04:16.320 --> 00:04:17.160
That BHP.

58
00:04:19.770 --> 00:04:24.330
Because remember I created a new file called Register that BHP.

59
00:04:25.880 --> 00:04:27.860
Now let me create an account, a new account.

60
00:04:28.520 --> 00:04:31.520
I'm going to say here, Mark on.

61
00:04:33.370 --> 00:04:41.500
And then mark one at example dot com and then here I'm going to give you the new password and then I'm

62
00:04:41.500 --> 00:04:42.970
going to click on register.

63
00:04:43.690 --> 00:04:47.410
As you can see, it's going to say your account has been created successfully.

64
00:04:47.800 --> 00:04:49.360
Let's check that in the database.

65
00:04:49.840 --> 00:04:56.140
Now, if I click on users, if I refresh the user stable, a new account should be there, as you can

66
00:04:56.140 --> 00:04:57.010
see in your account.

67
00:04:57.040 --> 00:05:01.220
Mark one mark at the example account and the password is hashed.

68
00:05:01.240 --> 00:05:03.670
As you can see, the password is encrypted.

69
00:05:04.180 --> 00:05:10.180
Now, in order to in order to log in, suppose that Mark wants to log in, Denmark would have to go

70
00:05:10.180 --> 00:05:12.800
to log in that each week.

71
00:05:13.660 --> 00:05:19.060
So now in the log in, that B2B mark would have to type his email and password.

72
00:05:19.570 --> 00:05:28.750
So let me here say mark one at example dot com because this is Mark's account, this is Mark's email

73
00:05:29.500 --> 00:05:30.400
and then the password.

74
00:05:30.430 --> 00:05:33.100
I'm going to type the password that I just registered with.

75
00:05:33.700 --> 00:05:39.610
Now if the password is correct, if I click on log in and the password is correct, it's going to say

76
00:05:39.610 --> 00:05:45.010
logged in successfully and it's going to provide me with my email and my user name.

77
00:05:46.420 --> 00:05:53.620
And as you can see, this function in the log in this function password to verify would verify whether

78
00:05:54.010 --> 00:06:02.050
a user whether the password matches the one that is in the database or not, because this function is

79
00:06:02.050 --> 00:06:11.860
going to is going to kind of decrypt the the password and try to match that password with the with the

80
00:06:11.860 --> 00:06:13.510
password that the user is going to provide me.

81
00:06:14.560 --> 00:06:18.070
And if the password is incorrect, let me show you what's going to happen.

82
00:06:18.070 --> 00:06:21.490
So let me refresh the log in page one more time.

83
00:06:21.940 --> 00:06:22.360
Allow me.

84
00:06:22.360 --> 00:06:23.230
Here, try to.

85
00:06:24.210 --> 00:06:25.560
Type incorrect password.

86
00:06:25.680 --> 00:06:31.920
I'm going to say mark one at the example that com and then I'm going to type a wrong password here and

87
00:06:31.920 --> 00:06:33.990
then I'm going to click on log in.

88
00:06:34.530 --> 00:06:37.020
If the password is wrong, it's going to say failed.

89
00:06:37.710 --> 00:06:46.050
So this is going to this is how it works and this is going to prevent users who provide us with wrong

90
00:06:46.050 --> 00:06:47.100
passwords to log in.

91
00:06:48.000 --> 00:06:58.410
So this is how you can store passwords in your database in a in a in a in an encrypted form.

92
00:06:58.740 --> 00:07:06.810
And also, this is how you can verify, verify their their their accounts when they try to log into

93
00:07:06.810 --> 00:07:07.590
your system.

94
00:07:08.070 --> 00:07:10.140
So these things are very important.

95
00:07:10.140 --> 00:07:12.480
You need to make sure that the password is hashed.

96
00:07:12.480 --> 00:07:16.140
You need to make sure that you are using the these functions.

97
00:07:16.150 --> 00:07:19.440
You need to make sure that you are using your following the techniques that they have shown you.

98
00:07:19.440 --> 00:07:24.240
You need to make sure that you are using the entities function whenever you are echoing something.

99
00:07:24.660 --> 00:07:32.130
All of these things are important in order to avoid any potential attacks and modifying your code and

100
00:07:32.400 --> 00:07:39.120
re reviewing your code regularly is important because you always need to make sure that your code is

101
00:07:40.140 --> 00:07:48.210
secure enough and will not be attacked from any hacker.

102
00:07:48.210 --> 00:07:54.930
And any hacker would not be able to break into your system because of bad practices that you have in

103
00:07:54.930 --> 00:07:56.700
your website or web application.
