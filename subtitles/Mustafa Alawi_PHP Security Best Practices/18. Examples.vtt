WEBVTT
1
00:00:01.300 --> 00:00:01.990
Welcome back.

2
00:00:02.500 --> 00:00:12.310
Now, let me show you an example of what a hacker could do to your website using the cross cross scripting

3
00:00:12.340 --> 00:00:13.030
technique.

4
00:00:13.210 --> 00:00:15.310
This technique, they cross-site scripting.

5
00:00:16.030 --> 00:00:23.200
So let me give refresh and suppose that you have a simple application that allows users to search for

6
00:00:23.200 --> 00:00:23.710
something.

7
00:00:24.100 --> 00:00:26.460
So a normal user would search for something.

8
00:00:26.470 --> 00:00:26.830
Here.

9
00:00:27.430 --> 00:00:30.040
Here, let me show you the code.

10
00:00:30.220 --> 00:00:31.030
So this is the goods.

11
00:00:31.390 --> 00:00:31.690
Here.

12
00:00:31.690 --> 00:00:34.030
I'm not connecting to a database or something.

13
00:00:34.060 --> 00:00:44.260
I'm creating a very, very basic script because the process of of of attacking a website using cross-site

14
00:00:44.260 --> 00:00:48.040
scripting is not as simple as is injection.

15
00:00:48.310 --> 00:00:51.400
It's more complicated and requires experience.

16
00:00:51.400 --> 00:00:55.930
And only experienced, experienced hackers could do it.

17
00:00:56.380 --> 00:01:04.090
And it requires a lot of study of your website in order to find how to attack your website.

18
00:01:04.330 --> 00:01:10.690
So here I'm just giving you, I'm assuming, things that had a lot that have already happened to your

19
00:01:10.690 --> 00:01:13.990
website and the hacker would use these things.

20
00:01:14.440 --> 00:01:20.320
So what I'm assuming is that a hacker has already injected something into your database.

21
00:01:20.350 --> 00:01:21.550
This is what I am assuming.

22
00:01:22.150 --> 00:01:22.630
And.

23
00:01:23.660 --> 00:01:25.610
Yea a normal user.

24
00:01:25.610 --> 00:01:33.930
Suppose that I am I am now a normal user and I, I, I headed over to my through this website and I

25
00:01:33.930 --> 00:01:35.390
you just want to search for something.

26
00:01:35.750 --> 00:01:37.850
So here, for example, I'm going to search for something.

27
00:01:37.940 --> 00:01:43.120
I'm going to see that, for example, suppose that this is going to allow me to search for products.

28
00:01:43.130 --> 00:01:47.730
So I'm going to say your hat and then I'm going to click on Find and here it's just going to display

29
00:01:47.730 --> 00:01:47.980
hat.

30
00:01:47.990 --> 00:01:53.390
So this is a very simple script that takes that word and display it displays that word here.

31
00:01:54.080 --> 00:01:58.700
But suppose that a hacker has already injected something into your database.

32
00:01:58.700 --> 00:02:07.880
And now as a user, if I search for that thing, what I'm going to get is that I'm going to get a bad

33
00:02:07.980 --> 00:02:17.630
code that could steal my cookies or could I display something that could steal my password or my email

34
00:02:17.630 --> 00:02:20.300
or any sensitive information.

35
00:02:20.420 --> 00:02:22.820
So the process starts with injecting a code.

36
00:02:23.480 --> 00:02:25.430
So a hacker would inject in JavaScript.

37
00:02:25.430 --> 00:02:25.600
Good.

38
00:02:25.670 --> 00:02:28.760
For example, I'm going to inject here each one.

39
00:02:28.760 --> 00:02:29.600
I'm going to inject here.

40
00:02:29.600 --> 00:02:30.170
It's one.

41
00:02:31.650 --> 00:02:32.220
Each one.

42
00:02:33.490 --> 00:02:35.710
And then I'm going to say hat.

43
00:02:36.550 --> 00:02:39.280
Now if I click on find, guess what?

44
00:02:39.820 --> 00:02:42.070
Hat here will be displayed.

45
00:02:42.730 --> 00:02:47.760
But it's not going to be it's it's not going to be displayed as hat it's going to be displayed as an

46
00:02:48.160 --> 00:02:48.860
email code.

47
00:02:48.880 --> 00:02:54.550
As you can see, it's an email code, which is what we use, what what a hacker could do.

48
00:02:54.550 --> 00:02:57.250
So a hacker could inject the email code.

49
00:02:57.730 --> 00:03:02.620
The hacker could inject the JavaScript guard so the hacker here could pass any JavaScript function.

50
00:03:03.590 --> 00:03:11.210
So a hacker could inject JavaScript could if a hacker could inject if any person could inject into email.

51
00:03:11.240 --> 00:03:17.360
It means that any person could inject JavaScript so he or a hacker could say Script.

52
00:03:17.960 --> 00:03:20.990
And then could you just inject here a script?

53
00:03:22.120 --> 00:03:22.690
Script.

54
00:03:23.230 --> 00:03:26.860
So imagine how detrimental this is to your website.

55
00:03:27.190 --> 00:03:30.850
So a hacker could inject something intimidatory such as a function.

56
00:03:31.570 --> 00:03:32.020
Let's see.

57
00:03:32.020 --> 00:03:33.780
Let's here inject alert function.

58
00:03:33.790 --> 00:03:34.570
I'm going to say alert.

59
00:03:35.050 --> 00:03:37.590
I, for example, let's say blackout.

60
00:03:37.590 --> 00:03:38.710
So I'm going to say blackout.

61
00:03:39.520 --> 00:03:41.320
So if I inject this code, guess what?

62
00:03:41.410 --> 00:03:42.430
If I click on find.

63
00:03:42.850 --> 00:03:48.490
As you can see, the code has been injected into the browser and now is being displayed to me.

64
00:03:49.240 --> 00:03:54.070
And of course, of course, the process, as I told you, is not it doesn't happen this way.

65
00:03:54.070 --> 00:04:00.880
The process is that this good, this code that the that the hacker is going to type will be injected

66
00:04:00.880 --> 00:04:01.690
into your database.

67
00:04:02.020 --> 00:04:05.950
And then once a user comes over, let me show you again this example.

68
00:04:06.430 --> 00:04:10.510
A hacker would inject that code into your database or your website somewhere.

69
00:04:10.840 --> 00:04:16.480
It could be stored in a session or or a cookie or in a in your database.

70
00:04:16.480 --> 00:04:24.610
And then when a user, for example, this user, for example, when this user when this user comes to

71
00:04:24.610 --> 00:04:32.140
your website, when this user comes over to your website and tries to ethically find something or say

72
00:04:32.140 --> 00:04:40.090
or for something, they would get that injected code because because they because the code is, is stored

73
00:04:40.090 --> 00:04:48.340
in the database and will be returned by your database because they searched this user, this poor user

74
00:04:48.760 --> 00:04:55.180
would get not good that would still steal their information or do something bad to their information

75
00:04:55.180 --> 00:04:57.370
because the code has been injected into a database.

76
00:04:57.670 --> 00:05:06.460
So this is just a simple example of what cross-site scripting could do to your website.

77
00:05:06.940 --> 00:05:12.250
This example that I have shown you assumes that the code has already been injected, so they could.

78
00:05:12.250 --> 00:05:20.140
If the code is injected and I'm searching for something and, and the code is injected and I'm searching

79
00:05:20.140 --> 00:05:22.360
for it, it's going to return that code to me.

80
00:05:22.360 --> 00:05:28.030
As you can see, the code will be returned and that could be a JavaScript function that could steal

81
00:05:28.030 --> 00:05:35.980
my information and or could steal my cookie or my email or my password, whatever it is.

82
00:05:36.670 --> 00:05:43.330
So this is very, very one of the worst attacks that could happen to your website.

83
00:05:43.330 --> 00:05:47.260
And I'm going to be showing you how to overcome this problem.
