WEBVTT

00:02.380 --> 00:08.860
Knowing the list were rendering here our list items are as wide as the list because we're wrapping list

00:10.090 --> 00:12.140
on this view here around our scroll you.

00:12.140 --> 00:17.290
Therefore this sets the width for the scroll you add that sets the width 40 items in there.

00:17.290 --> 00:22.330
Now let's say we had a different width here on the list and let's say the width of a list item should

00:22.330 --> 00:24.330
be just 60 percent of the list.

00:24.340 --> 00:30.760
So it's not 100 percent which is the default but just 60 percent if we do that and we get started you

00:30.760 --> 00:35.570
see now this sits on the left which makes sense the default positioning here.

00:35.620 --> 00:42.400
If you set a with on an item which is inside of a flex box and list items are instead of a flex box

00:42.400 --> 00:49.420
because scroll view internally also uses flex box in the end even though there are some differences

00:49.600 --> 00:55.550
compared to the normal flex box and I'll come back to those but it still uses flex box and Day offers

00:55.580 --> 01:03.250
since we set up with the default of stretching child items along the cross axis and the cross axis would

01:03.250 --> 01:08.950
be the horizontal axis because we have flex direction column as a default but the default of stretching

01:08.950 --> 01:14.890
is overwritten because we have a width on our list item so in our child elements now we still might

01:14.890 --> 01:20.620
want to center these items in the list though and for this you can go to the scroll you and assign a

01:20.620 --> 01:21.430
style there.

01:21.430 --> 01:28.000
Though not food a style prop which you can use but which doesn't allow you to stall anything but to

01:28.000 --> 01:34.720
style the content in a scroll view and apply for example flex settings for the content you need to use

01:34.720 --> 01:40.090
to content container style and that's just something to memorize or to look up a new official docs of

01:40.090 --> 01:47.260
course for a scroll view and for a flat list you have that content container style that you use to control

01:47.260 --> 01:50.140
the layout inside of that scroll view.

01:50.230 --> 01:56.620
Now here on that content container style we can now refer to styles list and therefore let me actually

01:56.620 --> 02:02.320
rename this current list style we're applying that and wrapping view to list container because in the

02:02.320 --> 02:06.670
end it's a container around our list and this year is to list itself.

02:06.670 --> 02:11.750
Alternatively you could have named this list content of course but I'll just name it list and rename

02:11.750 --> 02:16.810
the Abra thing to list container they have for this year will be written renamed to list container and

02:16.810 --> 02:21.700
now we can add a new list property here to the style sheet and that's now inside of the scroll view

02:21.760 --> 02:28.060
styling our container or laying out our container content to be precise and there since this uses flex

02:28.060 --> 02:34.750
books internally you can use a line items to control the alignment along the cross axis and set this

02:34.810 --> 02:41.380
to centre and destroyed now make sure that items are centered again in case they are smaller and that's

02:41.380 --> 02:43.440
indeed what's happening here.

02:43.510 --> 02:50.170
So with that you know how to control and lay out the content inside of a scrolled view or all follow

02:50.170 --> 02:58.660
list in general now what if you also want to control the Flex box along the main axis though.

02:58.660 --> 03:06.520
Let's say our list here actually shouldn't start right below this box here with our controls but a little

03:06.520 --> 03:11.620
bit further down it should start at the bottom of the screen and then grow up to the top and then only

03:11.620 --> 03:14.500
be scroll label when it reaches the top.

03:14.520 --> 03:21.590
This can all be controlled with our list style which is the style applied to content container style.

03:21.590 --> 03:27.350
So with this content container style you can control this too by adding justify content because justify

03:27.350 --> 03:33.440
content allows you to position content along the main axis of the Flex box and flex box main axis by

03:33.440 --> 03:38.430
default is the vertical axis because the default direction is column.

03:38.600 --> 03:45.410
So here let's now use flex end instead of the default which is flex start and flex and should now actually

03:45.410 --> 03:47.350
move the items to the end of the list.

03:47.360 --> 03:48.740
So let's see where that works.

03:49.870 --> 03:50.480
Huh.

03:50.570 --> 03:52.590
Doesn't seem to work right.

03:52.610 --> 03:59.670
The problem here is that the scroll view only grows this internal view which it wraps in the end when

03:59.670 --> 04:01.360
new items are added.

04:01.370 --> 04:06.310
Now we want that internal view to grow automatically on a normal view.

04:06.320 --> 04:08.800
We would achieve this by adding flex 1.

04:08.990 --> 04:14.170
So let's try this here on this list styling we add to the scroll view as well.

04:14.180 --> 04:21.570
We added here now you see this behaves correctly it starts here at the bottom and now lets grotesque

04:21.600 --> 04:23.860
and hope we don't solve this too early.

04:24.450 --> 04:32.870
And you see we can scroll so this actually is growing and works and exactly the way we want it's scroll

04:32.890 --> 04:39.000
lable and generally works in the way we want but you'll notice that you actually can't read scroll it's

04:39.000 --> 04:45.420
such that you always see the most recent item you can scroll there but then it jumps back up and that's

04:45.420 --> 04:48.270
probably not what we want on Android.

04:48.270 --> 04:50.370
It also doesn't work there.

04:50.370 --> 04:53.340
If we now start guessing you'll see the same behavior.

04:53.340 --> 04:59.110
Well if I would get there there the only difference is that it's broken for a different reason.

04:59.140 --> 05:05.320
I can't even scroll so flex one doesn't really do the job.

05:05.320 --> 05:11.170
What you can use there instead is something we haven't used before and that's flex grow now flex grow.

05:11.230 --> 05:17.230
Also make sure that the item to which you add this grows and takes up as much space as it can.

05:17.230 --> 05:23.150
Just like flex one the differences that flex grow works a bit differently internally.

05:23.260 --> 05:26.250
It's more flexible than flex flex.

05:26.290 --> 05:32.050
Simply says take all the available space in all directions you can get flex grow basically instructs

05:32.050 --> 05:38.980
the container to be able to grow to be able to take as much space as it can get and it will but it keeps

05:38.980 --> 05:39.580
D.

05:39.780 --> 05:45.280
Our behavior it has normally in this case of the scroll view where does this scroll lable and can exceed

05:45.310 --> 05:47.300
the boundaries of the screen as well.

05:47.320 --> 05:53.080
So it's a bit more flexible and you probably don't need that that often on a normal view but on a scroll

05:53.080 --> 05:54.720
view it's exactly what we need.

05:54.820 --> 06:00.340
And I'm just showing this here because this is a special case which you just have to know or which you

06:00.340 --> 06:01.680
might stumble over.

06:01.760 --> 06:07.420
And typically you then find solutions on stack overflow and so on here you find it in this course because

06:07.660 --> 06:12.520
it is a scenario which you might encounter therefore hopefully you can then recall this lecture and

06:12.520 --> 06:14.140
see how to solve this.

06:14.170 --> 06:20.410
So I added flex grow to that list property and now let's give this another try here on Io s.

06:20.530 --> 06:30.520
If we start guessing numbers here now you see I can actually strolled such that the latest item is visible

06:30.610 --> 06:33.750
and it can still also scroll such that the oldest item is visible.

06:33.760 --> 06:37.620
So now it is showing you behavior we want things to flex grow.

06:37.750 --> 06:41.480
And on Android it'll be the same if we start a game there.

06:45.510 --> 06:52.140
You see now I can scroll is here as well and I can see both the most recent guess and the oldest guess.

06:52.200 --> 06:58.860
So this is now working in the way it should here on Android and I was and I was showing all of this

06:59.070 --> 07:05.490
simply so that you are aware of these patterns of these special content container style on scroll view.

07:05.670 --> 07:09.960
And I also wanted to make sure that you were aware of some of the issues you can run into when you start

07:09.960 --> 07:15.180
styling list and when you want to add your own layout there then these are some tricks which can be

07:15.180 --> 07:18.510
very handy if you encountered that situation in your app.
