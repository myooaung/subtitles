WEBVTT

00:02.760 --> 00:05.100
We had a first look at the dimensions API,

00:05.130 --> 00:09.330
we can use it to get the height but it's not responsive right now,

00:09.330 --> 00:15.710
it doesn't adjust, it just allows us to set different layouts which is nice, you see how you can use it

00:15.930 --> 00:18.450
and by the way, this is of course only one way of using it,

00:18.450 --> 00:25.110
you could also add such a check here to just render totally different content as we do it here for

00:25.110 --> 00:33.300
example with the main text but it would be more interesting if we could adjust our styles on the fly,

00:33.460 --> 00:42.460
so if we can react to changes in the UI, and turns out we can do that. For that, I will add a constructor

00:42.460 --> 00:43.080
here

00:43.840 --> 00:52.250
to the auth screen component, the constructor receives the props and we first of all have to call super props,

00:52.260 --> 00:53.980
you always have to do that.

00:54.300 --> 00:57.530
Then I'll add dimensions and add an event listener

00:57.540 --> 01:00.560
and I'll listen to the Change event, now

01:00.570 --> 01:09.780
then I'll execute some arrow function here and in that arrow function, I'll receive an object with new dimensions.

01:10.050 --> 01:16.120
Let's simply log this to the console for now, with that let's go back and let's reload our app,

01:16.140 --> 01:22.340
let me clear the log here on the right and let's view what happens if I rotate the screen,

01:22.380 --> 01:26.130
you see we get this object and that's coming from this listener

01:26.130 --> 01:31.620
and there, we get a window and screen object and in there, we get all these information which we before

01:31.640 --> 01:32.730
also checked

01:32.880 --> 01:38.520
but now this will be fired whenever the orientation or in general, the dimensions change.

01:38.520 --> 01:45.150
So here you see now it's back to portrait mode and therefore all the dimensions have basically switched,

01:45.150 --> 01:46.800
so for height now is width

01:46.890 --> 01:48.530
and the other way around.

01:49.050 --> 01:59.850
Now that allows us to do something and to update our code upon changes, for that I'll add state because

01:59.860 --> 02:04.610
I need to update state to be able to change something in my UI,

02:04.620 --> 02:06.180
that's how react works right,

02:06.180 --> 02:09.510
we have to change state or props to re-render to screen,

02:09.510 --> 02:10.880
we want to re-render something

02:10.920 --> 02:15.500
if that changes. So therefore here in state, we can do multiple things,

02:15.720 --> 02:19.410
we could manage the values we want to assign as styles,

02:19.560 --> 02:25.480
let's start with that approach. Instead of using our stylesheet down there for password container and

02:25.490 --> 02:26.980
password wrapper,

02:27.150 --> 02:34.620
we could populate these values in inline styles, so where we use password container, here on the view

02:34.620 --> 02:42.360
wrapping our views for the password fields, here I'll add an object to serve some inline styles and no

02:42.360 --> 02:45.120
longer use the stylesheet

02:45.330 --> 02:52.210
and then I'll add the same to properties we use here, flex direction and justify content and in this

02:52.210 --> 02:56.480
object, I'll set flex direction to this state,

02:56.590 --> 03:05.070
let's say there we have some styles property, pw container direction, that could be a property where

03:05.070 --> 03:09.420
we manage that.

03:09.460 --> 03:17.990
Let me re-structure this and bring this into a new line and then I'm going to add a second property,

03:18.090 --> 03:20.630
the other property we have down there, justify content,

03:20.700 --> 03:26.340
we didn't even change this depending on the ratio or on the dimensions but we can do it here.

03:26.370 --> 03:29.390
So justify content can be this state styles

03:29.520 --> 03:34.170
pw container justify content.

03:35.260 --> 03:41.380
Now we also need to change the style on this view which wraps the individual input so there,

03:41.390 --> 03:48.460
I'm also going to add an inline style and if we scroll down to our stylesheet, we see that there we

03:48.460 --> 03:53.130
set the width dynamically to 100 or 55%,

03:53.240 --> 03:59.420
so I'm going to set the width here to this state styles pw

03:59.470 --> 04:07.750
wrapper width, maybe that, of course I'm going to use the same approach on the second view here instead of using

04:07.750 --> 04:11.140
the style stylesheet. With that,

04:11.230 --> 04:15.070
all we have to do is we have to initialize these things in our state,

04:15.070 --> 04:20.470
so if we have a look, we try to access this state and then there, we should have a styles property which

04:20.470 --> 04:26.710
holds another object where we have pw container direction, justify content and wrapper width.

04:27.100 --> 04:33.440
So let's add that, let's first of all add a styles property in here and then let's add pw container

04:33.460 --> 04:41.610
direction and let's maybe set it to a default of column which would be the default,

04:41.640 --> 04:44.950
let's then add pw container justify content,

04:45.240 --> 04:49.270
let's set this to a default of flex start

04:49.590 --> 04:56.160
and I'm renaming styles to resp styles for responsive styles so that I get the right coloring from

04:56.160 --> 05:00.610
my ID which doesn't like the word styles, so resp styles is used here,

05:00.660 --> 05:03.750
therefore I replace it down there in my jsx code,

05:03.750 --> 05:10.920
this state resp styles should be accessed here on the view which wraps our wrapper views and then

05:10.920 --> 05:17.190
in the views which directly wrap the inputs, we also access this state resp styles pw wrapper width

05:17.460 --> 05:20.480
and on the second input as well.

05:20.490 --> 05:25.550
So with that back to it, there I added pw container justify content and direction,

05:25.650 --> 05:32.720
let's now also add pw wrapper width and let's set this to a default of 100%.

05:32.770 --> 05:34.900
So these are defaults we start with,

05:34.900 --> 05:43.080
now whenever a change occurs, what we can do is we can simply call this set state and now set our resp

05:43.180 --> 05:51.230
styles to a new object where I copy the default styles but now I change column to row,

05:51.370 --> 05:55.090
change flex start to space between

05:55.300 --> 05:59.260
and this wrapper width to 45%.

05:59.290 --> 06:03.040
And with this, this should update our change whenever our dimensions change,

06:03.040 --> 06:12.180
so whenever we for example rotate the device and since we access our state properties here in inline styles, this

06:12.240 --> 06:17.650
should automatically be reflected because the state changes, hence our UI is re-rendered

06:17.740 --> 06:19.800
and it takes the new values.

06:19.810 --> 06:28.220
Now one thing we have to do however is right now we always change our styles to that state when we detect

06:28.470 --> 06:29.880
a change in the dimensions

06:29.960 --> 06:30.980
but that's of course wrong,

06:30.980 --> 06:33.800
we only want to do that if it's appropriate.

06:33.830 --> 06:41.270
So we can use our check from before where we check dimensions, height if it's greater than 500 because

06:41.360 --> 06:47.610
if it's greater than 500 here, then we actually want to leave this at column or we set it to column

06:47.630 --> 06:54.170
if we were at row because we rotated it before and the same for justify content,

06:54.170 --> 07:03.460
if we are greater than 500, so if we have more height than 500 then I want to set this to flex start,

07:03.520 --> 07:09.960
it should only be space between if we have less than 500 height available and the same for the wrapper width.

07:10.150 --> 07:14.380
If we have more than 500 height, then this should be 100%

07:17.850 --> 07:23.580
because we can afford to place these elements on top of each other, only if we have less than that,

07:23.610 --> 07:25.500
we take 45.

07:25.530 --> 07:30.600
So with that, that's our finished code, I just automatically restructured this to make it a bit easier

07:30.600 --> 07:31.280
to read,

07:31.290 --> 07:35.150
these are our three properties and their respective styles.

07:35.430 --> 07:42.070
Let's now save this file and reload our apps,

07:42.220 --> 07:44.030
so both look good here 

07:44.050 --> 07:47.070
if we are in the normal mode,

07:47.140 --> 07:54.380
so if we are in portrait mode. If we rotate the device though, you see now it adjusts, the heading disappears

07:54.520 --> 07:58.130
and we order our elements differently.

07:58.270 --> 07:59.560
So that's pretty cool, with that

07:59.560 --> 08:06.610
we got a truly responsive design but we can do better or we can use an alternative which tends to be

08:06.610 --> 08:10.410
better. Let's have a look at that alternative in the next lecture.
