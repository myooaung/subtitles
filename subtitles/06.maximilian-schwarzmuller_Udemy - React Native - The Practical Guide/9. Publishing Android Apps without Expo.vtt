WEBVTT

00:02.580 --> 00:05.010
Now you learn how you can build your app for ISIS.

00:05.010 --> 00:06.840
What about Android.

00:06.840 --> 00:09.870
Again and the official reaction of docs under a guides android.

00:09.870 --> 00:14.310
You find instructions on how to publish your app to the Google Play store.

00:14.310 --> 00:18.720
In the end you can just follow the instructions you find here.

00:18.730 --> 00:23.890
It all starts with creating such a key store which I already mentioned in the Expo managed workflow

00:23.920 --> 00:27.100
but there Expo did that for us on their servers.

00:27.130 --> 00:33.220
Here we need to do that and we can do this instead of our project or on Windows as it says here.

00:33.220 --> 00:38.740
Make sure to run this command while navigate it in this folder you can copy your key store into your

00:38.740 --> 00:41.140
project thereafter or store it anywhere else.

00:41.140 --> 00:45.820
You will need to have key store which is generated for signing your app and for signing updates to the

00:45.820 --> 00:46.220
app.

00:46.300 --> 00:47.710
So make sure you don't lose it.

00:47.740 --> 00:51.730
Otherwise you'll not be able to well rebuild your app or update your app.

00:51.760 --> 00:57.370
So here you can enter an arbitrary password what you want and she was and then some information about

00:57.370 --> 01:03.970
you which technically could be wrong but which well should be correct kind of since this is your identifier

01:03.970 --> 01:08.780
with instance since this is used for assigning your app in the end.

01:08.780 --> 01:15.820
And once you entered all this and confirmed it and you chose your passwords this now creates this my

01:15.820 --> 01:23.950
upload key key store file here and now you can use that to sign your application next you need to set

01:23.950 --> 01:29.900
up some great all variables as you see here and for dad make sure you move the key storage of the Android

01:29.960 --> 01:30.670
app folder.

01:30.680 --> 01:37.910
So from this folder here move it up into Android and then into the app folder so that you file the stair

01:39.740 --> 01:49.300
and then go to the cradled properties file the android graded properties file so here under Android

01:49.300 --> 01:53.200
we have degraded properties file and in their

01:56.570 --> 02:04.330
you can add these entries and as it says there replace the stars you with the password you chose for

02:04.330 --> 02:05.620
the keys store.

02:05.890 --> 02:09.250
Once you did that you can close that file.

02:09.470 --> 02:15.140
You should go to the Android app build grateful files and not build great all here but in the app folder

02:15.170 --> 02:23.710
and they de built cradle file and add this configuration in the Android node as you can see so you can

02:23.710 --> 02:31.980
just copy this and then your search for the Android node which is this node

02:34.810 --> 02:38.260
there you got the default concept what you should not touch.

02:39.740 --> 02:47.270
But you got your signing config where you should in the end ad does release part.

02:47.720 --> 02:54.600
So not the leads the debug part but ad does release part and then under Bill types release.

02:54.600 --> 02:56.280
Add this line here.

02:56.640 --> 03:04.720
So if we scroll down for a types release there we can add this line signing config release and now you

03:04.720 --> 03:09.390
can generate your AP okay with these commands.

03:09.390 --> 03:14.230
So by navigating into the Android folder and then by running this command let's do that.

03:14.230 --> 03:19.350
Let's first of all navigate into the Android folder here with CDE Android and then run this greatly

03:19.360 --> 03:20.800
w command.

03:20.800 --> 03:26.170
And this should now build your app and sign it for production give you such a app bundle in the end

03:27.180 --> 03:29.660
which you can then upload to the Google Play store.

03:29.670 --> 03:36.160
So let's wait for that to finish and once this build succeeded you can actually take that app bundle

03:36.280 --> 03:39.850
which you now find under app build generated

03:43.310 --> 03:49.910
outputs bundle this failure that's a release bundle that's what you can upload to the Google Play store

03:50.770 --> 03:55.640
for Dad you can search for a Google Play console and you need a Google Developer account for that which

03:55.700 --> 03:56.740
all the costs you money.

03:56.750 --> 04:04.670
But unlike Apple's program it's not a subscription it's a one time fee of twenty five dollars and here

04:04.670 --> 04:09.530
in the Google Play console you can now create a new application once you're locked in with your paid

04:09.530 --> 04:18.540
account choose an app name like this created and then here you can manage your entire store appearance

04:18.540 --> 04:22.410
or entire app how it looks like an android app releases

04:25.100 --> 04:33.070
there you can click on production track product production manage create a release their and now here

04:33.070 --> 04:38.050
you need to upload your app online you can click continue here with the default settings normally but

04:38.050 --> 04:43.420
in general I would recommend that you dive into the Google Play store where a Google Play console documentation

04:43.730 --> 04:49.090
to learn all about the things you can set up here but in the end this is now where you can upload the

04:49.090 --> 04:51.270
bundle which you built.

04:51.400 --> 04:57.130
So here you would upload this bundle file and thereafter you can finish up your store appearance and

04:57.130 --> 04:59.940
you can publish your app in the Google Play store as well.

05:01.830 --> 05:06.600
Now of course you might wonder how do you add icons and so on because I haven't touched on this yet

05:07.180 --> 05:11.160
a convenient and easy way of doing that is with the help of Android Studio.

05:11.160 --> 05:17.610
There you can open an existing Android Studio project and open your android folder in your react native

05:17.610 --> 05:24.440
project here with Android Studio just the Android folder not the entire rack native project in there

05:24.440 --> 05:32.980
you'll find your android part of this project and here to add icons you can go to the app folder source

05:33.490 --> 05:37.410
main rest and there.

05:37.580 --> 05:45.410
Wait for this initialization the build to finish which starts up when you opens this and once this initialization

05:45.410 --> 05:52.330
is done in that app folder if you click on the rest folder right click on it you can select new and

05:52.370 --> 06:00.290
their image asset and this opens an editor where you can conveniently add and generate new image assets

06:00.380 --> 06:06.420
you icons for example there you can choose launch or icons adaptive in legacy.

06:06.420 --> 06:08.490
And now what you can do you can leave the name.

06:08.580 --> 06:14.580
You can setup your I can you can configure it there you can choose a foreground layer and there you

06:14.580 --> 06:23.050
can for example choose the path of an image you want to use a background layer where you can set a solid

06:23.050 --> 06:29.050
color or all the image you want that you want to use in the background and then therefore generate your

06:29.050 --> 06:35.170
icon with that tool simply click finish and of course provide your own image there if you want to and

06:35.170 --> 06:42.720
it will set everything up for you to have a nice icon which of course is pretty sweet now regarding

06:42.720 --> 06:48.470
how to customize the splash screen attached you find some documentation on how you may do this on Android

06:48.470 --> 06:53.630
you set your own splash screen of course whenever you change your icons and or your splash screen you

06:53.640 --> 07:00.150
will need to rerun this build with that great LW command and then also redeploy your new app bundle

07:00.180 --> 07:05.400
to the Google Play store with the Google Play console and with that this is how you would build and

07:05.400 --> 07:12.030
deploy react native only apps of course a bit more manual work a bit more cumbersome than in the Expo

07:12.030 --> 07:17.970
manager workflow but now you know both options and you can go for with the ever approach you need for

07:17.970 --> 07:18.870
your application.
