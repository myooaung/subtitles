WEBVTT

00:02.290 --> 00:09.060
So I'm back in our demo application and thus far we manage all of our applications state in the app.js

00:09.070 --> 00:11.170
file in our app container,

00:11.170 --> 00:14.710
here we have the state of the places and the selected place.

00:14.710 --> 00:21.820
We also manage some state in place input, here where we manage whatever the user entered but I will leave

00:21.850 --> 00:27.610
that here because that's really just some local UI state relevant for this input,

00:27.610 --> 00:33.520
we could also manage that through redux but you can always make an argument for either direction,

00:33.610 --> 00:38.750
I'll leave it in this component because it's not a state that is important application wide.

00:38.950 --> 00:41.260
The one in app.js is though,

00:41.560 --> 00:46.870
so let's add redux and adding redux first of all means that we need to install some third party

00:46.870 --> 00:50.510
libraries, some normal javascript libraries I should say

00:50.770 --> 00:51.820
and that's important.

00:52.030 --> 00:58.570
We install libraries that we could add to any javascript project because our javascript code is going

00:58.570 --> 01:02.650
to run on the native device in this extra thread.

01:02.710 --> 01:08.070
So I can use npm which we also used to install create react native app

01:08.290 --> 01:15.910
and in this project, I now run npm install --save to add a new dependency to the project and

01:16.240 --> 01:21.040
the save flag ensures that it gets stored in the package.json file so that the reference

01:21.040 --> 01:25.890
to it gets stored there and now the package name I want to install is redux,

01:26.020 --> 01:27.650
that's all, that's the name.

01:27.910 --> 01:34.450
I also will install a second package because redux standalone doesn't know about react or react native,

01:35.020 --> 01:40.850
in order to connect it to react apps and it doesn't matter if that's a web app or a native app,

01:40.900 --> 01:45.150
I will also install react-redux,

01:45.210 --> 01:47.220
that's a second package.

01:47.220 --> 01:54.640
So these two libraries get installed, just hit enter and they will allow us to add redux to this app.

01:54.660 --> 02:00.810
Now if you have worked with react for web apps, you might see that these are the exact same packages

02:00.840 --> 02:01.740
you use there

02:01.860 --> 02:03.350
and there really is no difference,

02:03.360 --> 02:08.390
you use redux and react redux in exactly the same way.

02:08.400 --> 02:14.600
Now to add redux, I'll first of all create a new folder in my source folder and I'll name it

02:14.610 --> 02:16.050
store, there

02:16.050 --> 02:20.250
I want to add my redux related files and so on.

02:20.250 --> 02:27.510
In that new store folder, I'll add a reducers folder even though for now we'll only add one but this will

02:27.510 --> 02:30.610
grow over the course of this course,

02:30.630 --> 02:34.410
the second folder I add is the actions folder.

02:34.460 --> 02:41.970
Now I mention that actions and reducers are important, actions are these messages we dispatch, reducers

02:42.060 --> 02:47.220
are the places where we accept these messages and change our state.

02:47.490 --> 02:52.200
Now in our case we will only have one reducer, I'll name it

02:52.250 --> 03:00.600
root.js because it's our root reducer handling our main, well application logic we have which is

03:00.600 --> 03:03.940
just managing our places right now.

03:04.150 --> 03:06.260
Well therefore why don't we name it places.js,

03:06.300 --> 03:08.490
I think that also makes sense.

03:08.490 --> 03:12.330
So we at the places.js file, now in there,

03:12.460 --> 03:22.030
I simply will set it up as we set up a reducer in a normal react app, so in a web react app, the reducer

03:22.090 --> 03:30.060
is just a function and I'll use an ES6 arrow function here, I'll name the function reducer and it will accept

03:30.090 --> 03:31.080
two arguments,

03:31.140 --> 03:35.190
the first one is the old state so that we can update it,

03:35.280 --> 03:41.400
the second one is the action we got because the reducer function here will be executed whenever we receive

03:41.400 --> 03:42.990
an action.

03:42.990 --> 03:51.170
Now inside the reducer, we then can find out which action occured and manipulate the state accordingly,

03:51.810 --> 03:58.160
I will export this reducer function as the default of this file, like this.

03:59.650 --> 04:04.580
I will also add some other constant which I'll name initial state,

04:04.750 --> 04:06.790
that's just a javascript object

04:06.790 --> 04:13.000
and here I want to set up the state with which we start in this application before any action has occurred.

04:13.000 --> 04:17.510
We also have an initial state right now in the app.js file, there

04:17.620 --> 04:24.250
we have our state object where we have the places array and the selected place which is null.

04:24.250 --> 04:29.980
I'm just going to copy these two properties and put them into my initial state here in the reducer

04:29.980 --> 04:36.540
file, in the places.js file and then I'm going to take advantage of next generation javascript feature,

04:36.760 --> 04:44.680
I can set this state argument in my reducer function to a default value which is initial state so that

04:44.710 --> 04:49.310
if we don't have an existing state, we start with this one.

04:49.570 --> 04:55.410
Now inside the reducer, we create a typical switch case statement as you probably know it from other react

04:55.440 --> 04:58.720
apps, we switch the action type,

04:58.720 --> 05:02.960
each action does have to have at least the type property

05:03.190 --> 05:07.450
and then we can find out which action occured and react accordingly.

05:07.450 --> 05:12.470
First of all I'm going to set up a default case in which I just want return the existing state unchanged

05:12.850 --> 05:16.690
but then we can react to different other action types,

05:16.720 --> 05:19.010
we have no way action types yet though.

05:19.300 --> 05:24.110
So let's make sure that we do have some by adding actions.

05:24.130 --> 05:26.070
Let's do that in the next lecture.
