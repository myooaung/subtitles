WEBVTT

00:02.860 --> 00:09.760
Let's adjust our store in our components. If we have a look at our store, the action types, we don't have

00:09.760 --> 00:11.060
to adjust that much,

00:11.170 --> 00:17.770
I still want to be able to add a place and to delete a place, selecting and deselecting, I won't need

00:17.770 --> 00:19.260
that anymore,

00:19.660 --> 00:25.300
we could still leave it here and implement that approach which uses these actions but I'll use a different

00:25.300 --> 00:26.160
approach.

00:26.590 --> 00:32.710
So add place and delete place are the two remaining action types, therefore I'll go to my places.js

00:32.760 --> 00:38.200
file and remove the deselect and select place action creators,

00:38.640 --> 00:43.340
I'll also remove the imports of select place and deselect place from there.

00:43.420 --> 00:48.140
Now I will edit the action creators later a little bit because I need to do something

00:48.160 --> 00:50.890
but for now, I'll leave it as it is, in index.js

00:50.950 --> 00:52.970
where I bundle all exports,

00:53.050 --> 01:00.110
I of course no longer export select and deselect place. In the places reducer,

01:00.250 --> 01:04.550
I no longer import deselect and select place because we don't need that

01:04.960 --> 01:07.040
and I can also remove the cases here,

01:07.060 --> 01:15.850
select and deselect, we no longer get these actions, so we can remove that. So with that, the reducer is a bit leaner,

01:15.850 --> 01:19.990
now let's add some functionality to SharePlace.js

01:20.000 --> 01:27.850
to actually be able to share a place and there, we already got our PlaceInput.js file, right

01:27.880 --> 01:33.990
where we already have an input, where we can click add and get a place and why don't we continue to use that,

01:34.000 --> 01:35.730
it has all we need for now.

01:36.070 --> 01:43.090
So in share place, I'm going to import that component and I'm not registering this as a component for

01:43.090 --> 01:46.310
my navigation because I'm not loading it as a screen,

01:46.330 --> 01:50.570
I'm embedding it into a screen just as we did before.

01:51.070 --> 02:05.530
So I'll import place input from my components folder, place input place input and now, I'll simply add this

02:05.530 --> 02:08.790
here so I'll add place input, like that.

02:08.830 --> 02:10.660
Now obviously the place 

02:10.670 --> 02:19.300
input component needs me to implement something because there eventually, I will trigger this on place added

02:19.320 --> 02:22.630
property which I probably should set on this component

02:22.630 --> 02:28.100
therefore to be able to react to a new place being added.

02:28.360 --> 02:34.600
So for that, I need to go to share place and listen to on place added,

02:34.660 --> 02:40.730
so that's this property I just had a look at and there, I'll get the place name as an argument

02:41.070 --> 02:48.850
and I of course want to handle this in a way to then dispatch an action which is handled by redux.

02:48.850 --> 02:54.210
For that we need to connect to the share place screen to redux with the connect middleware, we connected

02:54.200 --> 02:59.070
the component to redux already in the register component part

02:59.140 --> 03:01.370
but that's only one half of it,

03:01.390 --> 03:09.570
we also need to connect it here. So I'll import connect from react redux and do what we always did,

03:09.850 --> 03:18.090
so here I will simply wrap my export with the result of the connect function call and then create a

03:18.090 --> 03:22.410
new const which is map dispatch to props,

03:22.410 --> 03:28.230
there I get the dispatch function as an argument and as we learned it before or in another course,

03:28.470 --> 03:32.010
we return a javascript object and in that object,

03:32.010 --> 03:40.110
I want to bind something which I can then use on props, so maybe on add place which is a function where

03:40.110 --> 03:48.220
we will actually receive the place name and then call dispatch and now I need to import my action creator,

03:48.310 --> 03:54.720
so something from, now let me reach out to store actions and there to the index.js

03:54.830 --> 04:02.400
file where I export all my action creator exports and there I will import the add place action creator.

04:02.500 --> 04:10.840
Now with that imported, let's dispatch the result of add place being executed and we should pass the place

04:10.840 --> 04:13.440
name to add place.

04:13.450 --> 04:16.660
So this now would allow us to dispatch this action,

04:16.660 --> 04:22.720
hopefully add a new place to our store, for that I need to pass map dispatch to props to connect

04:22.720 --> 04:29.440
though, we also could pass map state to props to it but I don't need that here so I will just pass null

04:29.440 --> 04:30.180
instead

04:30.310 --> 04:34.330
and then the second argument is map dispatch to props.

04:34.330 --> 04:41.190
So now we should be able to dispatch something to the store, on my find place component,

04:41.260 --> 04:48.790
I want to be able to render all my places, conveniently we already got this place list component here

04:48.850 --> 04:50.470
which use a flat list,

04:50.470 --> 04:52.540
so I'm going to reuse that,

04:52.630 --> 04:56.540
so I simply need to pass my places to it.

04:58.600 --> 05:00.690
So what I'll do in find place is

05:01.030 --> 05:09.190
I'll also import connect from react redux because I need to get the places from my redux store,

05:09.460 --> 05:16.990
then at the bottom I'll add map state to props because I need to get something from my redux state and

05:16.990 --> 05:19.830
map it to to props of this component,

05:20.230 --> 05:30.130
return my mapping object here and there, I expect to get my places which I get from state places places.

05:30.180 --> 05:31.470
Same as before,

05:31.500 --> 05:41.940
first places reaches out to my places here in the root reducer and then inside my places reducer, I'm reaching

05:41.940 --> 05:43.770
out to this places array.

05:44.310 --> 05:46.280
So this is what I'm doing here too,

05:46.650 --> 05:53.040
reaching out to the places and with that, I can now use my custom component,

05:53.240 --> 06:00.050
so let me quickly import place list from

06:00.110 --> 06:09.900
and now let's simply go to components, not place detail but place list, here import the place list. I'm going

06:09.900 --> 06:18.340
to render this here, so place list expects to get a prop which is places, I guess, let me quickly check,

06:19.620 --> 06:27.500
yeah places and this should be the places I just fetched. So I'm going to go back here

06:29.090 --> 06:33.490
and send down this props places.

06:33.560 --> 06:40.430
Now of course I need to connect this so I'll execute connect down there and wrap find place screen with the

06:40.430 --> 06:46.270
result of that call and there, I will pass maps state to props as an argument,

06:46.310 --> 06:50.070
I don't pass map dispatch to props because I don't need that yet.

06:50.570 --> 06:58.610
So with that we got find places set up here, we pass it down to the list, we get share places, we are not doing

06:58.610 --> 07:01.250
anything on place added here though right now

07:01.640 --> 07:07.100
and one thing I noticed in the reducer, we of course can get rid of the selected place here in the initial

07:07.100 --> 07:11.600
state, just a minor thing, wouldn't have been super horrible to leave it there,

07:11.600 --> 07:16.990
we can also get rid of it when deleting a place but we also don't need it anymore.

07:17.420 --> 07:18.800
But back to share place,

07:18.830 --> 07:22.100
we need to connect the on place added method.

07:22.280 --> 07:30.890
So here I'll add a method to the share place screen which is the place added handler, there

07:30.960 --> 07:39.230
I'll get the place name because place input actually emits this name when on place added is triggered,

07:40.860 --> 07:42.540
so I get the name here

07:43.990 --> 07:51.300
and in the body of this method here, I will execute this props on place added,

07:51.340 --> 07:53.250
so it's supposed to be on add place,

07:53.260 --> 07:59.440
so this prop down there, on add place and pass on the place name.

07:59.440 --> 08:05.380
So with that the functionality to add place it should be finished, here we're able to fetch a slice of our

08:05.380 --> 08:11.740
state and pass it down to place list to render a list of places, we're not handing a touch on a single

08:11.740 --> 08:12.530
place item

08:12.550 --> 08:13.930
but this should all work,

08:13.930 --> 08:19.940
so make sure to save all files and here, I get an error.

08:20.160 --> 08:25.000
Oh, that make sense, in share place of course I should hook this up so on place added should

08:25.030 --> 08:27.520
execute on place added handler.

08:27.580 --> 08:33.600
So now make sure to save this, go back and reload your applications if needed,

08:33.820 --> 08:38.480
now let's login and I'm getting the error that no store was found

08:38.500 --> 08:42.870
and the reason for this is in app.js, I'm importing provider from redux,

08:42.950 --> 08:50.910
I need to import this from react redux. So let's save this, reload this app, login again,

08:50.950 --> 08:52.420
looks better.

08:52.420 --> 08:55.390
Now let's share a new place here,

08:55.450 --> 09:01.520
you click in there and type Munich and click add, let's see under find places if that worked,

09:01.530 --> 09:10.070
here is Munich, let's now also add San Francisco and we can work on the visuals of all of that later,

09:10.110 --> 09:15.340
so let's add San Francisco, here San Francisco. Let's try the same on Android,

09:15.720 --> 09:19.940
let's share a place so let's add Munich here,

09:22.160 --> 09:29.770
close the keyboard and go back and I added it twice because I clicked twice, let's add it once here to prove

09:29.800 --> 09:31.580
that it only is added once.

09:31.600 --> 09:33.210
So this is working,

09:33.250 --> 09:37.870
now what's not working is clicking on the items, we get an error then because we're not handling on item

09:37.870 --> 09:38.850
selected.

09:39.190 --> 09:41.670
That's something I'll do in the next lecture.
