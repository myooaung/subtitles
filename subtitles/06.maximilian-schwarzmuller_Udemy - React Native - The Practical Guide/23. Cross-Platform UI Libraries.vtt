WEBVTT

00:02.300 --> 00:05.850
We had to look at the platform API and the different entry points you can use

00:06.050 --> 00:07.740
and we end up with applications

00:07.760 --> 00:14.210
that yeah looks similar but in the end really are different, we can tell by the buttons, by the icons,

00:14.360 --> 00:19.130
so we get differences there and it's of course on purpose that there is some similarity,

00:19.160 --> 00:26.150
I don't want to build two totally independent and different apps. But one thing we already noticed is

00:26.150 --> 00:32.230
that we have to do a lot of manual platform checking and then use different icons,

00:32.450 --> 00:39.620
now thankfully react native navigation automatically adjusts the navigation features to the different

00:39.620 --> 00:43.790
platforms like the side drawer or the nav bar and the tabs in general,

00:43.940 --> 00:45.290
so we don't have to do that,

00:45.320 --> 00:49.040
we get nice looks out of the box there.

00:49.070 --> 00:55.850
Now sometimes you want to get a complete UI building block library that just uses different styles

00:55.850 --> 00:59.150
for different platforms and does all the heavy lifting for you,

00:59.300 --> 01:05.930
so that you just use one component like a card component and behind the scenes, it's automatically styled

01:05.930 --> 01:12.620
for the platform the app runs on. React native doesn't have too many such libraries that really work

01:12.620 --> 01:18.240
well, some of them are in early phases and some are not maintained anymore.

01:18.290 --> 01:25.280
There are projects like NativeBase which promise to give you one way of writing the app and offering

01:25.280 --> 01:28.620
just that, different layouts for different apps

01:28.880 --> 01:33.440
and I strongly recommend diving into such projects to learn more about them and see if they are a good

01:33.440 --> 01:35.540
fit for your next project,

01:35.540 --> 01:42.260
just be aware that many of them are in early stages or still have quite a way to go because building

01:42.260 --> 01:50.030
such cross-platform libraries is not straightforward, react native is changing a lot and you also have

01:50.030 --> 01:51.290
a lot of edges

01:51.380 --> 01:57.320
you have to take care about if you are developing such a platform. But these projects exist and I can

01:57.320 --> 02:04.310
only recommend for you to dive into them to get some nice components which work on both platforms and

02:04.310 --> 02:08.400
automatically get the right styling depending on where you run them,

02:08.570 --> 02:10.850
so it is something I recommend checking out,

02:10.850 --> 02:16.120
you'll find a link to NativeBase at the end of this lecture and you can always find more alternatives

02:16.250 --> 02:24.830
if you just search for react native cross-platform UI library. There you will find multiple projects

02:24.920 --> 02:30.050
which try to fix this problem and try to provide some cross-platform components,

02:30.050 --> 02:33.920
some projects are also just focusing on one or a few components,

02:33.920 --> 02:35.790
some try to cover them all.

02:36.200 --> 02:39.200
So that's what I wanted to add to this topic,

02:39.200 --> 02:44.180
now let's have a look at the other problem we faced regarding device orientation and so on.
