WEBVTT

00:02.550 --> 00:04.670
To make sure that they load again.

00:04.710 --> 00:10.080
We need to go back to the action creator and add a brand new action in the orders action creator excuse

00:10.080 --> 00:10.260
me.

00:11.590 --> 00:18.880
One identified I need is set orders just as we had one for a set product to set the loaded orders and

00:18.880 --> 00:21.340
then here I have my fetch orders.

00:21.340 --> 00:28.120
Action creator which takes no arguments but which then returns my async dispatch function here thanks

00:28.140 --> 00:36.580
to redux func and dear ultimately I dispatch where I send a new action where to type is set orders and

00:36.580 --> 00:41.250
where I have my loaded orders and of course that should not be an empty array.

00:41.290 --> 00:47.050
Instead we can borrowed a logic from the products action creator from fetch products there we can take

00:47.110 --> 00:55.850
all that logic copy all of that here and move it over to the order action creator and run that before

00:55.850 --> 00:57.180
we dispatch.

00:57.410 --> 01:04.000
Here now of course we need to fine tune this for example the request needs to be sent to orders.

01:04.190 --> 01:07.940
You won and again Dad will be replaced later with a dynamic value.

01:07.940 --> 01:13.880
For now it's hard coded to fetch to orders for this user should be a get request I want to check this.

01:13.880 --> 01:14.930
That's fine.

01:14.930 --> 01:16.250
Here I got my response data.

01:16.250 --> 01:19.450
Now here I got my low debt orders.

01:19.460 --> 01:21.550
That seems to be a more appropriate name.

01:21.560 --> 01:27.170
Still a loop through all the data I got and I want to set my loaded orders down there.

01:27.230 --> 01:30.050
But now there's one important difference.

01:30.050 --> 01:34.210
I don't create new products here which I add to loaded orders instead.

01:34.340 --> 01:37.680
Of course I need to create new orders here.

01:37.890 --> 01:43.510
And for Dad you need to import order from the order model now.

01:43.520 --> 01:48.990
Also I see there's a missing curly brace now before I proceed with that by the way.

01:49.020 --> 01:57.550
I need to make sure that I also catch any errors I might be getting and there I want to throw the error.

01:57.550 --> 01:59.220
Basically rephrase it.

01:59.260 --> 02:04.530
Make sure it reaches my component and I need one more a closing curly brace

02:07.350 --> 02:11.480
but now back to our logic here where I create new orders there.

02:11.490 --> 02:18.920
The idea is to keep justice for the products the items can be found in my response data because we get

02:18.920 --> 02:24.420
to basically get back this year right so the response data will hold a card items Key for example which

02:24.420 --> 02:30.360
holds my card items which I need so respond state of 40 given key and their dot card items.

02:30.360 --> 02:38.200
That's where I find my items because that's what we send here in the end to store the card items then

02:38.200 --> 02:42.610
my order which I create here of course also needs the total amount.

02:42.640 --> 02:48.700
I get that from rest data key and then there if we have a look at Firebase it's that total amount field

02:48.700 --> 02:48.970
here

02:52.220 --> 02:53.290
and the date.

02:53.330 --> 03:00.520
Well for that I create a new data object but I initialize this with the rest data key target date.

03:00.540 --> 03:05.760
Now we need to create a new data object because arrest data keyboards date is just a date string here

03:05.850 --> 03:08.190
and I need a date object not a date string.

03:08.190 --> 03:13.800
Hence we wrap it this string we wrap it with the date object creation here and therefore we get a data

03:13.800 --> 03:14.220
object.

03:14.250 --> 03:17.130
That's the order which I add here to load it orders.

03:17.130 --> 03:22.470
We do it for all the orders we're fetching and with that we can dispatch this and now we just need to

03:22.470 --> 03:24.950
handle it in the orders reducer.

03:25.080 --> 03:32.230
So there if I handle set orders and for Dad you of course need to import this action identifier.

03:32.290 --> 03:37.500
The only thing I need to do is I need to return and use state object where orders is equal to action.

03:37.570 --> 03:39.280
Orders and that's all we need to do.

03:39.280 --> 03:40.640
So really simple.

03:40.720 --> 03:42.250
And why is it that simple.

03:42.280 --> 03:47.530
Because in the action creator we do all the work there we map our orders and then here I just have the

03:47.530 --> 03:50.290
orders key on my action which holds all the mapped orders.

03:50.440 --> 03:53.740
So that's just what I need to store here.

03:54.150 --> 04:03.570
Now the remaining step is that we dispatch fetch orders here in our orders screen so let's go there

04:03.840 --> 04:10.560
and let's actually at use a fact again to do that and to dispatch.

04:10.560 --> 04:14.470
We also need to import use dispatch from react redux.

04:14.730 --> 04:20.050
And then here we can get access to that dispatch function by executing us dispatch.

04:20.250 --> 04:28.420
And then here and use a fact we add dispatch as a dependency because in this effect function here I

04:28.420 --> 04:31.640
dispatch and now I need my order actions.

04:31.660 --> 04:39.730
So let me import everything as orders actions from the store folder from the actions folder from the

04:39.730 --> 04:50.840
orders file and with that imported here we can say orders actions whips orders actions dot fetch orders

04:51.110 --> 04:56.690
like that that will go ahead and make that request and therefore now if we save does and we go to the

04:56.690 --> 05:05.790
orders screen it's initially empty but very very fast it loads all the orders which we stored and that

05:05.790 --> 05:14.260
are these free orders which I have here and of course we can expand this justice before now a loading

05:14.260 --> 05:15.790
spinner would be nice as well.

05:15.790 --> 05:18.830
And of course you can all the past a video here and tried it on your own.

05:18.830 --> 05:24.830
All quickly do it the same way as before import use state from react.

05:24.900 --> 05:36.120
Then here set up the is loading state and set is loading by executing use state and setting this to

05:36.120 --> 05:42.540
falls initially and then here into effect in the end I want to use async await.

05:42.550 --> 05:50.920
Now I said that you can't or shouldn't at async here so we can ever use then here simply or wrap this

05:50.920 --> 05:52.150
in a helper function.

05:52.150 --> 06:01.320
Now I will just use the then call so we'll set is loading to true here and then add then here and once

06:01.320 --> 06:05.880
this is done I know we have a response so here it will set is loading to false.

06:05.880 --> 06:08.680
Now please note that I'm not having error handling here.

06:08.700 --> 06:11.050
So if this fails we're not handling this.

06:11.070 --> 06:13.530
Instead we'll always be in the loading state.

06:13.530 --> 06:18.200
So of course you might want to consider adding error handling as well or just not doing it here because

06:18.200 --> 06:21.570
they showed how it works to not bloat this module too much.

06:21.660 --> 06:23.360
I'll not implement it but I can.

06:23.370 --> 06:28.710
But of course you could handle errors here if you would want to use this then approach here by also

06:28.710 --> 06:30.400
adding catch.

06:30.420 --> 06:32.790
This is something you can absolutely do here.

06:33.430 --> 06:35.340
All focus on the loading part.

06:35.350 --> 06:43.000
However now since I have all of that set up we can import the activity indicator and import the view

06:43.000 --> 06:45.560
component and for some styling.

06:45.570 --> 06:55.340
Also import the stall sheet API from react native and then check whether we're in the loading state

06:55.370 --> 07:04.890
in which case I want to return my centered activity indicator here with the size of large and a color

07:04.920 --> 07:12.180
which should be colors which you need to import data for primary so make sure you have that colors import

07:12.220 --> 07:23.620
added And with that added here I'll add styles equal to ops style equals two styles dots centered or

07:23.620 --> 07:32.190
however you want to name it and now add dead styles object here with the help of style sheet create

07:32.840 --> 07:44.750
and they're centered should have setup of flex one justify content center and align items center like

07:44.750 --> 07:53.980
this with Dad if we save it we have a look at orders we see the spinner again it's loading very fast

07:54.010 --> 07:59.890
but you can see it if you look closely here's the spinner for a fraction of a second and there after

07:59.980 --> 08:06.850
the orders are loaded so that's now working storing and fetching orders all the works.

08:07.030 --> 08:13.770
And with that we implemented H to the p requests and using a server for storing the data in this app.
