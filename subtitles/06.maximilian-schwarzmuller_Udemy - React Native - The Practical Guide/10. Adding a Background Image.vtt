WEBVTT

00:02.690 --> 00:07.760
We made good progress here on the auth screen and you learned a lot of useful patterns for working with

00:07.760 --> 00:14.310
styling and making sure that you have a good and reusable way of styling your components,

00:14.690 --> 00:20.060
let's now improve the styling of this auth page by adding a background image.

00:21.860 --> 00:24.160
To dive into the official documentation,

00:24.420 --> 00:32.160
you can dive into the images guide there and there, they'll actually mention that they have a built-in,

00:32.190 --> 00:39.250
so they the react native team, they have a built-in background image element here,

00:39.290 --> 00:46.700
Imagebackground. So let's use that, let's go back to our application and on the auth screen, let's import

00:47.730 --> 00:58.340
image background, now image background should wrap the entire content of our view so let's try using

00:58.340 --> 01:03.520
it like this let's add image background here inside of our container view

01:04.040 --> 01:08.330
and let's wrap everything with image background, like this.

01:08.330 --> 01:14.840
And now we need to set a source and source is just set as on a normal image, could fetch it from the network

01:15.230 --> 01:22.620
or here, I actually attached a file to this lecture, background.jpeg which I want to use,

01:22.940 --> 01:29.450
so let's import. Let's import it and store it maybe in a variable essentially named background image

01:29.930 --> 01:34.200
from and now I'll simply navigate to assets background.jpeg,

01:34.250 --> 01:39.550
react can then automatically figure out all the details about this image

01:39.590 --> 01:42.200
and let's now pass background image as a source

01:42.330 --> 01:44.140
and let's see what we end up with.

01:44.270 --> 01:51.350
Now strangely enough, here we get an error that width is undefined, the reason for this error is that

01:51.380 --> 01:57.830
when using image background, we actually need to set a width, so on image background,

01:57.830 --> 02:02.410
we actually need to add a style where we set the width of it.

02:02.450 --> 02:11.780
So let's quickly add this, background image seems to be an appropriate style property, let's set the width

02:11.780 --> 02:15.850
to maybe 100% and then let's assign this here,

02:15.850 --> 02:24.450
so I'll reach out to styles background image. Restructure this and save it and now if we reload the app,

02:24.560 --> 02:31.130
now we got our background image but only behind our text inputs and not anywhere else, not behind our

02:31.130 --> 02:37.250
buttons and also not behind our text here, on Android it looks a bit different

02:37.280 --> 02:41.900
so it's a styling thing on iOS as it seems

02:41.900 --> 02:46.310
but still we also see that our text is now messed up, our whole centering is now messed up.

02:47.130 --> 02:53.740
That actually makes a lot of sense if you consider the fact that we wrapped all our content with image

02:53.790 --> 02:58.320
background but that we are inside our container view here.

02:58.480 --> 03:05.850
Now keep in mind, it's that container view that uses flex box and centers all its child elements but only

03:05.850 --> 03:08.140
the direct child elements

03:08.260 --> 03:15.610
and the only child element now is image background, so correctly it is centered, the child elements of

03:15.640 --> 03:18.850
image background then are not centered.

03:19.060 --> 03:20.900
So how can we break this up?

03:21.250 --> 03:24.340
Let's first of all try to wrap our view with it,

03:26.950 --> 03:33.280
so reverse the order here, restructure the code and now reload,

03:33.400 --> 03:34.870
now it's completely broken,

03:34.900 --> 03:37.650
so this certainly didn't fix it.

03:37.930 --> 03:39.510
Now why is it broken?

03:39.790 --> 03:43.910
Because now we wrap everything with image background

03:44.350 --> 03:50.170
but the view in there tries to take up all the space it has with flex 1,

03:50.320 --> 03:56.920
now the direct parent of the view is no longer our screen wrapper which actually would have provided that

03:57.100 --> 03:59.620
because it implicitly also set flex 1

03:59.830 --> 04:02.420
but now the parent of the view is image background.

04:02.770 --> 04:08.590
So we need to go to image background and now actually set flex one here too,

04:08.840 --> 04:12.860
so that now the container can actually really take a lot of space

04:13.180 --> 04:18.210
and now all of a sudden, this looks much better and we've got quite a nice login screen here,

04:18.430 --> 04:23.470
well if we ignore the fact that this looks very ugly on iOS.

04:23.710 --> 04:27.890
So let's quickly toggle the inspector and let's have a look at this,

04:27.940 --> 04:30.560
if we have a look at this text element here,

04:30.760 --> 04:34.670
we see that we don't set a white background color.

04:35.080 --> 04:44.040
Let's try a little trick here and let's set background color here to transparent, that looks much better,

04:44.040 --> 04:56.610
so what we should do is we should go to our main text component and now add background color transparent,

04:56.650 --> 04:57.520
that's pretty awesome,

04:57.520 --> 05:02.680
now we already see one advantage of this. By changing it in one place,

05:02.680 --> 05:08.230
we will actually be able to use that whenever we well want to have transparent background and wrap any

05:08.230 --> 05:11.680
text with it to always avoid this issue.

05:11.740 --> 05:18.130
Now on the button we got the same issue, we got this white background, not a transparent one,

05:18.130 --> 05:23.780
now to fix this let's go to our auth.js file and let's actually style our buttons,

05:23.780 --> 05:29.630
let's try to style them. So let's add a style handler here, style property,

05:30.010 --> 05:33.870
let's try some inline style first so I'm just assigning an object here

05:34.060 --> 05:40.450
and set the background color to transparent. Save this,

05:40.700 --> 05:42.600
let's wait for this to reload

05:42.670 --> 05:43.840
and this didn't fix it,

05:43.850 --> 05:45.930
so this still looks ugly.

05:47.520 --> 05:54.080
Actually the issue here is that the whole idea behind this button is that it automatically provides

05:54.080 --> 05:58.560
some styling for both iOS and Android that automatically adapts,

05:58.560 --> 06:04.890
for that reason we can't change that styling from outside which of course is our problem here. The solution

06:04.890 --> 06:09.750
of course is to create our own custom button which we can do.

06:09.870 --> 06:14.490
So let's create such a custom button element in the next lecture,

06:14.520 --> 06:21.100
we'll later then also revisit it to make sure that it also adjusts itself to different environments.
