WEBVTT

00:02.650 --> 00:09.830
In the last lectures we added this list we added flat list to have a really, well performing way of rendering

00:09.830 --> 00:11.040
lists.

00:11.040 --> 00:15.960
Now what else should we have a look at if we dive into the basics of react native?

00:16.250 --> 00:20.060
In my opinion, it would be nice to also work with images,

00:20.060 --> 00:23.050
after all we're talking about awesome places here,

00:23.090 --> 00:23.940
right?

00:24.050 --> 00:29.000
So let me show you how we can include an image in our list item

00:29.150 --> 00:35.030
and I also want to change our list here a little bit and make sure that if we click on one of these

00:35.030 --> 00:42.880
items, we actually open a modal in which we render both the name of the element and also the image.

00:42.960 --> 00:50.600
For now I will hard code an image in there but we'll later in this course also use a way of getting an

00:50.600 --> 00:54.290
image from the image gallery on the phone or from the camera.

00:54.500 --> 01:00.030
Now for hard coding an image in here, I also want to show you two different approaches,

01:00.380 --> 01:05.370
let's start with approach number one, an image we got on our machine,

01:05.710 --> 01:11.480
for that let's first of all search one, I already found a nice one on google image search,

01:11.510 --> 01:13.580
simply pick any image you like

01:13.760 --> 01:16.910
and therefore I'll now download and store it.

01:17.090 --> 01:22.760
I downloaded and stored the image here in this assets folder in my source folder.

01:22.760 --> 01:26.940
Now my goal is to render it as part of my list item

01:27.250 --> 01:33.320
and even though I will always use the same image for all my list items, I at least want to fake that

01:33.320 --> 01:38.040
it is like a dynamically loaded image and that it belongs to each list item,

01:38.090 --> 01:44.900
so I won't hardcode it into my jsx code but instead in my app container in the app.js file where we

01:44.900 --> 01:53.310
add new items to our places array, I want to not just set a name for these places,

01:53.330 --> 01:56.000
the name we enter in the text input,

01:56.000 --> 01:58.920
I also want to store the image instead.

01:59.340 --> 02:05.600
Now for including the image, there is actually a pretty neat way we can do this in react native, we

02:05.600 --> 02:11.950
can essentially import it with an import statement or with a required statement,

02:12.290 --> 02:19.290
so what we can do is we can import our place image from

02:19.310 --> 02:22.530
and now we simply enter the path to the image,

02:22.580 --> 02:29.210
so to the beautiful-place.jpg in my case. Here you need to add the file extension because jpg and so

02:29.210 --> 02:33.630
on is not a file extension the build workflow will add automatically.

02:33.980 --> 02:41.500
Once you've got it here, you can assign this as a value to the image property in our place object

02:41.750 --> 02:44.830
and I also now want to change the value to name,

02:44.840 --> 02:46.340
this seems more appropriate

02:46.340 --> 02:52.310
now that we also got an image property. Now with value being changed to name, I need to make sure

02:52.310 --> 02:58.990
that in my list item where I output this, excuse me, in a place list where I forward it,

02:59.090 --> 03:06.320
I no longer access the value but instead name and I now also want to forward my place image.

03:06.320 --> 03:11.440
So there, I will actually forward info item image and now image,

03:11.480 --> 03:12.860
that's the cool thing,

03:12.860 --> 03:21.020
when imported like this is not just like the path in a string or something like that, instead the build

03:21.050 --> 03:27.740
workflow we're using here and therefore react native in the end will turn this import or whatever gets

03:27.740 --> 03:29.130
stored in these element 

03:29.130 --> 03:31.360
here, in this constant so to say,

03:31.670 --> 03:38.540
will set this to a javascript object where it essentially will dynamically generate a path to the

03:38.540 --> 03:40.700
image which will also be correct

03:40.700 --> 03:46.250
once this is deployed on the phone because you have to keep in mind that our nice folder structure here

03:46.550 --> 03:51.520
won't be matched on the phone in the end, everything will be bundled and optimized.

03:51.530 --> 03:58.040
So this single line does a lot of magic for us and will actually create a javascript object where we

03:58.040 --> 04:00.460
will get the path as a property,

04:00.620 --> 04:04.330
the path pointing to where this image will end up in the end,

04:04.550 --> 04:05.670
so that's really neat.

04:05.690 --> 04:12.080
So place image is like our magic object holding the path where we will be able to find the image on the

04:12.080 --> 04:14.350
device when we run our app,

04:14.420 --> 04:16.730
that's why we store place image,

04:16.730 --> 04:19.030
it is an object, not just a path.

04:19.220 --> 04:24.660
So this object is then passed on in place list, here we pass it on

04:24.890 --> 04:27.400
and therefore in the list item, we can now use it.

04:27.780 --> 04:31.790
I want to render my image next to the text here

04:32.180 --> 04:36.560
and for that I first of all need to be able to create an image.

04:36.590 --> 04:39.150
Thankfully react native has an image component

04:39.350 --> 04:42.780
and as always you can check out the docs to learn more about it.

04:42.980 --> 04:44.590
So I'll add my image here,

04:44.600 --> 04:53.220
it's a self-closing element and image, unlike the web equivalent doesn't have a src attribute,

04:53.480 --> 05:00.980
instead we bind source to set the source of this image and the source should be place image,

05:01.010 --> 05:07.500
so the property we set here, place image with an E at the end therefore.

05:07.560 --> 05:13.950
So that's a property which passes on the image we store in our place object and that is what we set

05:14.000 --> 05:15.820
image to with the source.

05:16.890 --> 05:23.070
Now with that we got image and text, to position them next to each other, we need to touch and work on

05:23.100 --> 05:26.010
our list item styles. There

05:26.040 --> 05:31.950
we should make sure that we actually set the flex direction to row because I want to position these

05:31.950 --> 05:39.540
two elements next to each other in a row and the default would be column and I also want to set align

05:39.630 --> 05:47.340
items to center to center them vertically because if the direction is row, the cross axis will be the

05:47.340 --> 05:51.030
vertical axis, align items refers to the cross axis

05:51.150 --> 05:55.000
so therefore center will center the items vertically.

05:55.440 --> 06:03.410
I also want to give my image a certain style so I'll add my place image property here,

06:03.480 --> 06:11.820
I simply want to give it a margin right of let's say 8 pixels and I can now assign this here, style

06:11.880 --> 06:14.750
equals styles

06:15.990 --> 06:23.520
place image. Make sure to save all files and then go back to your running application and reload your

06:23.520 --> 06:26.790
app so that it reloads correctly.

06:26.820 --> 06:28.120
If you now add this,

06:28.500 --> 06:33.690
well I got an image here but it's taking up a little bit too much space.

06:34.080 --> 06:39.610
Well that behavior actually happens because we didn't assign a width and a height to the image

06:39.670 --> 06:41.320
and now here's an important thing,

06:41.550 --> 06:50.580
if you're importing a local image as we do here with our import statement, react native will automatically

06:50.580 --> 06:55.440
take the width and height of the image which is rather big in this case and use that as a width and

06:55.440 --> 07:01.650
height in the place where it renders it, you can of course override this. If you would fetch the

07:01.650 --> 07:02.780
image from the web,

07:02.910 --> 07:09.080
so if you would construct this magic object manually, I will show you how this works in a second,

07:09.180 --> 07:12.190
you always need to set width and height because there, react native

07:12.180 --> 07:14.840
doesn't even have a way of calculating itself.

07:15.030 --> 07:15.750
Here it does

07:15.780 --> 07:17.830
but it ends up with dimensions we don't want,

07:17.910 --> 07:20.260
well maybe we want them but here I don't.

07:20.640 --> 07:29.500
So since I want to override this, I'll go to list item and on my place image style, I'll actually set a maximum

07:29.500 --> 07:31.630
height of let's say 30.

07:31.840 --> 07:34.770
If we now save this and we go back to the application,

07:35.050 --> 07:39.640
you see the height is now 30 but we still have a lot of width,

07:39.670 --> 07:42.840
so let's also maybe set the width to 30.

07:42.850 --> 07:43.800
If we do that,

07:43.960 --> 07:45.640
now this looks better.

07:45.860 --> 07:53.650
It by the way automatically uses the cover mode you might know from web css image styling where it keeps

07:53.650 --> 07:55.330
the aspect ratio you define,

07:55.330 --> 08:02.980
so 30 pixels high and wide but then cuts off parts of the image so that it doesn't stretch the

08:02.980 --> 08:03.280
image

08:03.280 --> 08:09.760
unnecessary or something like that. You can override this and you can learn more about this if you dive

08:09.760 --> 08:12.740
into the documentation, there

08:12.760 --> 08:16.040
you can dive into images to learn more about images in general,

08:16.060 --> 08:21.800
for example how you can also define different versions of an image to let react native automatically pick

08:21.810 --> 08:24.230
the right one for the device you're running on,

08:24.250 --> 08:32.770
so by device width but if you go down to components and go to image there, you can also learn if you

08:32.770 --> 08:33.610
scroll down

08:37.660 --> 08:44.770
that you can set the resize mode property, you can set it to cover which is the default as I just mentioned but

08:44.770 --> 08:47.160
you can also set it to contain for example.

08:47.320 --> 08:48.610
So let's try this out,

08:48.780 --> 08:57.700
if I go to the image here and I set resize mode equal to contain and I save this,

08:57.720 --> 09:03.630
now you see it doesn't take a height of 30 pixels even though we set this as a style because it contains

09:03.630 --> 09:07.350
the original image overwriting our height

09:07.350 --> 09:08.200
in this case,

09:08.340 --> 09:12.030
so therefore our height and width only act as borders

09:12.060 --> 09:18.480
so to say now. It will always keep the aspect ratio and whichever border it hits first will be the

09:18.480 --> 09:22.450
border that decides, well which value, the other value

09:22.500 --> 09:28.100
so height or width gets. So I'll switch this back to cover which was the default

09:28.110 --> 09:30.750
anyways, I just wanted to highlight this.

09:31.170 --> 09:36.930
So this is how you can include a static image, an image you have on your operating system or in your

09:36.930 --> 09:42.240
project to be precise, you import it and react native sorts out the rest.

09:42.240 --> 09:44.860
Now what about images you fetch from the web,

09:45.000 --> 09:47.420
let's have a look at this in the next lecture.
