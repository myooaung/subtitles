WEBVTT

00:02.250 --> 00:07.800
So now to come to an end in this module I want to make sure that we also save orders on a server.

00:07.800 --> 00:10.530
And of course that we fetched him from there as well.

00:10.540 --> 00:16.810
Now we have two orders action creator here and there we can again take advantage of redux thunk and

00:16.810 --> 00:22.780
return our function here which gets that dispatch function which should be a synchronous with the async

00:22.810 --> 00:25.280
keyword so that we can use async await.

00:25.570 --> 00:32.110
And in that function here which we return ultimately of course I will dispatch my action object.

00:32.110 --> 00:38.320
But before we do that we can now send the request to store that order on a server and we can borrow

00:38.320 --> 00:41.650
that request from the products action creator there.

00:41.710 --> 00:46.930
It's not really a big difference of whether we create a product or an order so we can copy this entire

00:46.930 --> 00:55.120
product creation code here all the way up to your and moved it over to the orders.

00:55.160 --> 00:59.170
Jazz fall now of course you can also add error handling here.

00:59.180 --> 01:00.450
I'm not having it here.

01:00.470 --> 01:05.530
One thing I want to at least add is that I don't get a check if the response is not okay.

01:05.540 --> 01:07.880
In which case I'm one of fro And you error.

01:07.880 --> 01:13.130
Something went wrong but that should not be the focus here because we covered error handling and loading

01:13.130 --> 01:14.500
spinners not read the part.

01:14.510 --> 01:16.410
I want to focus on here instead.

01:16.440 --> 01:20.420
Let's make sure that we're sending this request to the right address and that should not be the product

01:20.450 --> 01:21.080
node.

01:21.110 --> 01:25.150
But let's say the orders note which kind of makes sense I guess because.

01:25.520 --> 01:32.260
Well we want to store our orders maybe we all want to store our orders specific to that user so we could

01:32.260 --> 01:38.740
stored it at slash orders slash you one which is my dummy user I.D. I assume here later that we'll be

01:38.740 --> 01:42.040
different later we'll have a real I.D. here at the Nemec I.D..

01:42.040 --> 01:48.350
For now let's just hard code this here so that we have some sub folder 1 sub folder per user later.

01:48.610 --> 01:53.980
It should be a post request because we're adding where appending some new data we're adding a new order.

01:53.980 --> 01:55.360
This had or needs to be set.

01:55.360 --> 01:58.170
And of course the data we're sending is different though there.

01:58.210 --> 02:05.020
I want to send my card items and my total amount and one other important thing the date of the order

02:05.890 --> 02:12.820
I want to send my data here converted to a string with two ISO string on the date object.

02:12.820 --> 02:17.530
So did we create does locally in the app and then we save the timestamp on the server.

02:17.530 --> 02:22.180
Now in your app you also might want to do that date creation on the server but since this course shouldn't

02:22.180 --> 02:27.100
focus on service site programming we'll just do it here and send it to the server and not worry too

02:27.100 --> 02:29.450
much about what else a server could do for us.

02:29.530 --> 02:34.500
Instead let's do all the things here and just send that finished timestamp to the server.

02:34.570 --> 02:40.300
Now it is will add a order here and once we're done we get back our response data which will include

02:40.330 --> 02:46.090
that automatically generated I.D. If you remember we did that on the product creation as well.

02:46.090 --> 02:51.820
So therefore now when we add a order we of course forward our items in the amount.

02:51.820 --> 02:55.990
But now I also want to forward the idea which I get from rest data not name.

02:56.170 --> 03:02.710
That's the same logic we used when we created a product and there's one additional thing my date snapshot

03:02.710 --> 03:05.040
of course should be the same as created here.

03:05.050 --> 03:14.010
So actually what I'll do is I will create my snapshot here date with new date and then use this constant

03:14.010 --> 03:20.840
here to create my string version and use the same constant here to forwarded with my order data.

03:20.850 --> 03:23.730
So here date refers to the state constant.

03:23.730 --> 03:29.400
So today value is wanted the same time stamp both locally in my data managed with redux which is the

03:29.400 --> 03:35.670
data I work with here in this running app and of course also have the same timestamp on the server which

03:35.670 --> 03:41.880
is the data I will load into future or other devices will load and now we just need to work on these

03:41.900 --> 03:45.500
orders reducer for ad order.

03:45.500 --> 03:48.450
The idea is not something I get from outside.

03:48.470 --> 03:52.910
So here I have ordered data data I.D. because that's what we're forwarding here.

03:52.940 --> 03:58.700
It's that automatically generated ideas firebase gives us and the day does all the received from outside

03:58.910 --> 04:06.100
here we can now use order data dot data like this and with that we have all the logic to hopefully add

04:06.250 --> 04:07.600
an order.

04:07.630 --> 04:14.710
Now let's go back here and add this to the cart and click order now just seems to work if we go back

04:14.740 --> 04:20.890
we now see orders note here on firebase with a U 1 sub folder for our user with the generated unique

04:20.890 --> 04:27.400
idea and in there the order data with the timestamp with the price with the card items which was this

04:27.400 --> 04:31.570
one white shirt and that all doesn't look too bad I'd say.
