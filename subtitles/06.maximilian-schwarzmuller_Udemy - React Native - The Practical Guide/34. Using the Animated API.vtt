WEBVTT

00:02.290 --> 00:09.310
We added this search button, now I want to animate it when we click it so that the places actually

00:09.310 --> 00:11.900
are loaded nicely animated.

00:11.910 --> 00:16.210
Now I did mention the official documentation which I strongly recommend checking out to dive really

00:16.210 --> 00:20.100
deeply into animations because there is super much to it

00:20.410 --> 00:22.910
but I'll also cover quite a lot of it here.

00:23.380 --> 00:29.320
To understand react native animations, we have to understand how animations work in general, if our goal

00:29.320 --> 00:32.620
is to make the button bigger and transparent,

00:32.620 --> 00:38.610
we need to understand that the size of it and the transparency gradually increases.

00:38.830 --> 00:45.490
Now that sounds super obvious but it means that we constantly need to update the style for both opacity

00:45.850 --> 00:48.010
and the scale.

00:48.040 --> 00:55.440
Now if we manually would do this, would be super hard and probably lead to very bad performance, react

00:55.450 --> 01:02.020
native actually provides a hook into the native animations API and therefore can render high performance

01:02.110 --> 01:05.200
animations and it makes it easy for us,

01:05.200 --> 01:13.750
it makes it easy for us to control the values, the opacity and scale of an item should have at a given

01:13.750 --> 01:18.910
moment. We control these values in the state

01:19.180 --> 01:21.910
and I will actually play two animations,

01:21.910 --> 01:26.120
the first is the remove animation when we remove the button,

01:26.330 --> 01:30.430
so I'll name it removeAnim but the name is totally up to you.

01:30.460 --> 01:36.020
I now need to import something from react native and that is the animated API,

01:36.220 --> 01:46.380
this API here, removeAnim instantiates a new animated values, so animated.value,

01:46.410 --> 01:55.380
this is such a value we can use on some styling property that it will be managed automatically by react.

01:55.410 --> 02:01.460
We can then later start an animation and react will automatically over a time span defined by us change

02:01.480 --> 02:05.750
that value as required for our animation.

02:05.850 --> 02:10.510
You pass an argument to this constructor and that's the value with which you initialize that.

02:10.530 --> 02:18.020
Now for removing my button, I plan on starting at the scale 1 and opacity 1,

02:18.060 --> 02:18.870
so I start at

02:18.870 --> 02:20.800
value 1 here but no worries,

02:20.820 --> 02:27.170
you can also map these two different values so you don't have to define a dozen of values here

02:27.300 --> 02:34.570
if you actually want to animate from scale 2 to 1 and from opacity 0 to 1 at the same time.

02:34.770 --> 02:42.730
So I shall start at 1 here for removing this, then next thing we do is that in our place

02:42.760 --> 02:46.640
search handler where we currently just switch the state,

02:46.840 --> 02:49.370
I now want to play my animation,

02:49.380 --> 02:59.290
the animation to remove the button. To do this, I'll remove this set state call and instead use the animated 

02:59.350 --> 03:00.510
API

03:00.910 --> 03:09.230
and there, we got a couple of functions for different animation ways or ways of animating things,

03:09.250 --> 03:14.980
the most important one is the timing function which allows you to define a timing over which the animation

03:14.980 --> 03:16.420
will occur.

03:16.420 --> 03:22.810
There also are other methods, alternatives to timing and you can find out more in the official documentation,

03:23.050 --> 03:30.670
for example functions instead don't take a clear timing but try to play a physically correct animation.

03:30.670 --> 03:36.610
Now here, I'm interested in timing though and that is the one you will probably use most often, now to timing

03:36.610 --> 03:37.980
you pass the value

03:38.020 --> 03:43.180
react should change automatically and that would be this state removeAnim.

03:43.300 --> 03:49.870
Now no worries about passing this state, react will do this in an efficient way, it will not manipulate

03:49.900 --> 03:55.080
your state in a way that would not be ok just because immutability is important and so on,

03:55.160 --> 03:57.050
react native will take care about that.

03:58.120 --> 04:02.910
The second argument here then configures the animation you want to play, here

04:02.920 --> 04:07.440
you add to value, the value you want to animate to.

04:07.450 --> 04:10.190
Now we started at value 1 here,

04:10.420 --> 04:16.030
I want to animate to value zero, makes sense for me with opacity and so on

04:16.030 --> 04:21.740
but again, you can also map this differently and I will show this later.

04:21.760 --> 04:26.610
Now we can also set a duration and I'll set it to 500 milliseconds,

04:26.620 --> 04:31.320
so the value here is an integer which specifies the duration in milliseconds

04:31.540 --> 04:38.070
and one important setting is use native driver which you normally should set to true to hook into the

04:38.080 --> 04:44.900
native animation driver which is more performant than doing this all in javascript.

04:45.100 --> 04:53.950
Once you are done, you can call start and start will then simply, you guessed it, start the animation, with

04:53.950 --> 04:57.550
that we're almost done with our first animation step,

04:57.610 --> 05:03.400
now we just have to wrap the element we want to animate in a special view.

05:03.550 --> 05:06.560
So let's go down to our content in the render function

05:06.800 --> 05:10.000
and now I have to wrap the button which I want to animate.

05:10.140 --> 05:20.020
You use the animated API and it exposes a special component, animated.view, wrap your to be animated value

05:20.020 --> 05:24.230
with that component and then animated view

05:24.430 --> 05:31.770
takes some extra set up or specifically it takes the style property. Now on style here,

05:31.870 --> 05:36.440
you can use that dynamically managed value

05:36.630 --> 05:40.910
you set up here in the state which will be updated by react native

05:40.930 --> 05:43.370
depending on where in the animation you are,

05:43.390 --> 05:47.270
so over the duration of 500 milliseconds in our case.

05:47.650 --> 05:55.290
So here, style can take a javascript object of course and I now here want to animate the opacity,

05:56.280 --> 06:00.560
the opacity that's the cool thing about the values I chose should indeed start

06:00.560 --> 06:08.840
by one, the button is fully opaque, so non-transparent at the beginning but should end at zero,

06:09.030 --> 06:17.010
so I can directly use that value. So I can set opacity equal to this state and then removeAnim, removeAnim

06:17.100 --> 06:20.060
remember is created with that

06:20.310 --> 06:22.510
and that is not a number actually

06:22.770 --> 06:28.770
but if we use style on the animated view here and that is where we have to use it, it will automatically

06:28.770 --> 06:36.140
pull out the important information from that property and style the opacity of the wrapped element.

06:36.300 --> 06:42.040
So you can't use opacity this state removeAnim on another component and expect the same behavior,

06:42.120 --> 06:44.640
it would fail because this is not a number,

06:44.700 --> 06:48.150
it's animated view that knows what to do with that.

06:48.150 --> 06:50.060
Now let's see what this does,

06:50.070 --> 06:53.700
I saved the file and I will reload this page,

06:54.830 --> 07:00.840
now let's go to find place and let's click the button. And you see the first blink was simply because

07:00.870 --> 07:06.540
we have touchable opacity, you see thereafter it became transparent.

07:06.540 --> 07:10.430
Now I also want to have it increase in size,

07:10.530 --> 07:15.650
so besides changing the opacity, I'll also change transform

07:15.960 --> 07:22.860
and there, you can use a special syntax, you can pass an array to transform to transform multiple values,

07:22.890 --> 07:25.830
each is represented with a javascript object

07:26.100 --> 07:28.740
and then for example you want to transform the scale,

07:28.740 --> 07:32.770
you then just use this as a property in that object.

07:32.810 --> 07:33.460
The scale

07:33.450 --> 07:40.570
now could use this state removeAnim but since that moves from one to zero,

07:40.680 --> 07:42.180
it would actually shrink,

07:42.180 --> 07:50.190
let me show this to you. If we save this, we reload our application,

07:50.230 --> 07:53.790
if I click the button, it now shrinks and becomes transparent.

07:54.010 --> 07:58.090
Nice effect but I want to have the opposite one, now on removeAnim

07:58.100 --> 08:04.650
you can call a couple of functions, that proves that it's not a number I guess, one important function is

08:04.720 --> 08:05.930
interpolate,

08:06.310 --> 08:16.190
this allows you to basically use the value which is managed by react, which moves from one to zero and

08:16.560 --> 08:24.320
convert it to a different value for this property only. For that you specify the input range and

08:24.320 --> 08:30.330
that is 0 to 1 for example and react native will figure out how to map this to your value,

08:30.530 --> 08:35.200
of course the values you specify here should meet the values you really use,

08:35.240 --> 08:40.050
like here we have one as a value and we move to zero.

08:40.310 --> 08:46.850
So if we define an input range of zero to one, that works with the values we actually use.

08:46.910 --> 08:55.010
You can then map this to an output range where you say ok if we reach zero, then I actually want to use

08:55.010 --> 09:02.080
a value of 12 for this property, so for this scale, so whilst for opacity,

09:02.210 --> 09:07.340
we want to use 0 if we reach zero because zero is transparent and that is what we want to have at the

09:07.340 --> 09:09.220
end, here

09:09.230 --> 09:11.180
I actually want to have bigger button.

09:11.270 --> 09:16.250
so zero should equal 12, you could have picked 10 or whatever scale you want,

09:16.250 --> 09:20.240
so here it will be 12 times as big and one should equal one,

09:20.240 --> 09:29.020
so it should start at the default size. If you save this and you now reload the application and submit

09:29.020 --> 09:29.450
this,

09:29.470 --> 09:33.220
if you click the button it now grows towards you and fades out

09:33.220 --> 09:34.940
and that's a nice effect,

09:35.110 --> 09:38.760
and that's our first animation, animating the button.

09:38.770 --> 09:41.430
Now the next animation is to fade in the list,

09:41.650 --> 09:43.750
let's do this in the next lecture.
