WEBVTT

00:02.450 --> 00:08.430
Now before we add more logic let's work on the user interface on what we output.

00:08.450 --> 00:11.670
So here all return a View.

00:11.700 --> 00:23.190
In the end and in that view I want to have a text where I say opponents guess so what the computer guessed.

00:23.230 --> 00:27.760
And then we can reuse that number of container to nicely present that guest number.

00:27.760 --> 00:34.330
So that's a huge advantage of having such reusable components because well you can reuse them I guess.

00:34.330 --> 00:36.040
So that's what we're doing here.

00:36.040 --> 00:42.400
We'll use that number a container again below that opponents guests text here to have our own number

00:42.400 --> 00:44.510
of container and nicely output.

00:44.650 --> 00:47.810
The current guess here current guesses is our state.

00:47.830 --> 00:52.130
Remember that's what we initialize here and what we'll soon be able to change as well.

00:52.210 --> 01:00.340
So that's what's getting output here below that we can now also present maybe our card with two buttons

01:00.340 --> 01:02.290
that allow the user to give the computer a hint.

01:02.950 --> 01:11.320
So here all import card from components card to wrap these buttons in there and therefore we can already

01:11.320 --> 01:15.850
also import button from risk native because we'll need that in a second too.

01:16.200 --> 01:25.880
And then simply have our card here and in that card I want to have a button with a title of lower at

01:25.880 --> 01:33.860
a no button where we say writer These are two directions in which we can give a hint.

01:33.890 --> 01:37.070
So is the number you guessed too low is too high.

01:37.070 --> 01:44.520
Then we can give the computer a hint with these buttons and on press all at the moment just register

01:44.820 --> 01:49.500
an empty function that doesn't do anything that will of course soon change and will effectively generate

01:49.500 --> 01:57.060
a new random number and with that it's now time to add some styles here.

01:57.110 --> 02:02.450
I want to have a style for my overall screen and ask before does we'll get flex one to take all the

02:02.450 --> 02:06.950
available space on the screen below the header which we have at the top.

02:07.070 --> 02:12.410
Add a padding of tend to have some space around the contents so that it doesn't sit directly on the

02:12.410 --> 02:23.370
edges and also use a line items here to center our content horizontally and that screen properties used

02:23.370 --> 02:29.190
on the surrounding view here to add styles screen there so that the content on this overall screen is

02:29.190 --> 02:36.400
nicely positioned now for these buttons it would be nice if they would be sitting next to each other.

02:36.470 --> 02:43.480
So on the card we can add a style maybe use button container as a name here and they offer add that

02:43.480 --> 02:47.320
same name here in our install sheet because that's what we're referring to.

02:47.560 --> 02:54.160
And set the Flex direction here to row and we can set a flex direction here because I'm doing this on

02:54.160 --> 02:54.930
my card.

02:55.060 --> 03:01.570
But if we have a look in that card we distribute these styles on a view and a view uses flex box so

03:01.570 --> 03:06.820
we can set a flex direction here and that's what I'm doing they're setting flex direction to row to

03:06.820 --> 03:13.780
position items next to each other horizontally justified content with space around maybe to have the

03:13.780 --> 03:21.760
free space around the buttons on the left and right equally distributed and also add a margin top of

03:21.760 --> 03:29.080
20 so that this card with our buttons isn't sitting directly next to the guest number but there is some

03:29.080 --> 03:35.770
spacing in between and also maybe give this a width of three hundred and a max width of 80 percent to

03:35.770 --> 03:43.530
make sure that this can never exceed the boundaries of the parent view now if we saved as it would be

03:43.530 --> 03:47.460
nice to see that and for that we need a way of going to the game screen.

03:47.460 --> 03:53.070
Now we're using the start game screen in the app component so we'll have to use the game screen there

03:53.070 --> 03:58.830
as well and manage the selected number in that app component because that's the only component which

03:58.830 --> 04:00.720
is on the screen all the time.

04:00.720 --> 04:06.120
Well besides the header but the app component is also the component which will hold the start game screen

04:06.330 --> 04:07.680
and the game screen soon.

04:07.680 --> 04:12.540
Therefore it is the component where we can all do pass data down to the start games screen and to the

04:12.660 --> 04:13.730
game screen.

04:13.860 --> 04:22.680
So let's import the game screen here from screens game screen and of course I want to render my game

04:22.680 --> 04:29.010
screen here but not if the start game screen is still visible I want to have either of the two and side

04:29.010 --> 04:34.110
note there also is a totally different way of loading different components and we'll dive into debt

04:34.110 --> 04:37.540
in a separate module in a navigation module.

04:37.560 --> 04:43.050
Now whilst we'll cover different navigation solutions later there is a way of rendering either of the

04:43.050 --> 04:44.840
two screens right now.

04:45.030 --> 04:49.620
We also have a way of only rendering one of these two screens right now already and for that we need

04:49.620 --> 04:52.040
no special tool or anything like that.

04:52.380 --> 04:56.770
We can use normal react logic we can render this content conditionally.

04:56.940 --> 05:00.980
All we need to do for dead is we need to manage some state in our app component.

05:00.990 --> 05:04.950
We need to manage the selected number in here as well.

05:04.950 --> 05:14.250
So I'll add use state here and then simply use my state here and initialize this with wealth no value

05:14.250 --> 05:15.010
in the end.

05:15.260 --> 05:24.000
And there I want to get the selected number or the user number and have set user number as updating

05:24.000 --> 05:25.280
function here.

05:25.380 --> 05:27.250
And initially that's undefined.

05:27.300 --> 05:29.870
And now here I need a function where we can change this.

05:30.030 --> 05:30.920
Like start.

05:30.930 --> 05:31.920
Game handler.

05:31.920 --> 05:38.610
That sounds like a fitting name because we'll have such a number if the user presses D start game button

05:38.610 --> 05:40.550
here and you start game screen.

05:40.800 --> 05:45.240
So to start game handler will then get the selected number as input.

05:45.240 --> 05:51.860
That's an assumption we have to make here and set the user number to be that selected number here now

05:51.920 --> 05:56.330
whenever debt is the case whenever we have a user number we know that the game is running and we know

05:56.330 --> 06:00.320
that we can render the game screen instead of the start game screen.

06:00.350 --> 06:06.530
So here we can use content variable for example and say our default content is start.

06:06.530 --> 06:07.140
Game screen.

06:07.250 --> 06:13.130
And that is normal react code as you know it from react for web to you can store components like this

06:13.190 --> 06:16.710
in variables and then simply output the variable down there.

06:16.730 --> 06:23.050
It's also what we already do into start game screen with the confirmed output so start games screen

06:23.050 --> 06:24.120
is our default output.

06:24.130 --> 06:28.730
But now we can add if check and check if content is true ish.

06:28.740 --> 06:33.510
That's what does check checks so it will be false ish initially if it's undefined.

06:33.630 --> 06:40.260
But now if it is true we can set content here was we not content to user numbers so I checked if user

06:40.260 --> 06:42.060
number is true ish.

06:42.060 --> 06:48.330
If that is true ish then we know a number was selected it will be undefined and therefore false initially

06:48.510 --> 06:49.700
but if it is true ish.

06:49.710 --> 06:56.450
If a number was chosen then we'll set the content here to be the game screen and then we render whatever

06:56.470 --> 07:01.370
is in content down there and then we'll be able to game screen or discard game screen.

07:01.380 --> 07:07.350
So now when we click Start Game here with a number chosen this should switch here.

07:07.470 --> 07:09.110
If and that's the important thing.

07:09.210 --> 07:15.840
If we make sure that the start game handler can be triggered from inside the start game screen now for

07:15.840 --> 07:23.120
Dad we use a default react pattern of passing down a reference to his handler to that component maybe

07:23.130 --> 07:28.200
on the on start game prop that sounds like a fitting name to me we forward to start.

07:28.200 --> 07:34.350
Game handler just the reference without parentheses here just a reference a pointer at this function

07:34.740 --> 07:39.240
and on start game is now a property we can use in the start game screen.

07:39.300 --> 07:46.410
So here in the start game screen when we click on the start game button here I want to trigger that

07:46.590 --> 07:47.370
prop in the end.

07:47.370 --> 07:57.090
So here I have on press and they are in the end I want to execute on Star Game and forward the currently

07:57.090 --> 08:01.440
selected number here which is managed in the state of star game screen.

08:01.440 --> 08:08.310
So here I forward this to on start game and on star game is bound to the start game handler which expects

08:08.370 --> 08:11.190
and then receives that selected number.

08:11.190 --> 08:16.690
So that is how we make sure that clicking that button to start game screen triggers this method or does

08:16.690 --> 08:17.700
function here.

08:17.700 --> 08:20.570
And when his function is triggered we set the user number.

08:20.580 --> 08:26.160
This makes sure that content is the game screen and therefore we should be seeing the game screen now

08:26.160 --> 08:33.120
missing piece is that in the game screen I need the user choice to generate my initial random number

08:33.150 --> 08:38.130
and exclude dead users choice correct before that first random number.

08:38.130 --> 08:44.070
And therefore we need to pass a property named user choice down to the game screen so we can add to

08:44.070 --> 08:49.920
user choice prop here and pass user number which is the state we're managing and the app component which

08:49.920 --> 08:53.040
is that selected number we're storing into state here.

08:53.040 --> 08:55.580
Pass that down to the game screen.

08:55.830 --> 09:02.280
So I hope that flow of data is clear we get that selected number from start to game screen when that

09:02.280 --> 09:05.240
button the start game button is pressed.

09:05.280 --> 09:10.440
We then store it in the state of the app component here in the use number of state with the help of

09:10.440 --> 09:16.170
set the user number and we then use the user number to pass it down to the game screen which is only

09:16.170 --> 09:21.510
rendered if we have a user numbers so if the game is running if the game was started so late in the

09:21.510 --> 09:27.690
game screen we can use the user number which is received on the user choice Prop 2 then generate the

09:27.780 --> 09:33.870
new random number which the computer guessed where it is user choice is user number is excluded so that

09:33.870 --> 09:41.050
for the very first computer guests the computer can't instantly guess the user is number a lot of talking

09:41.050 --> 09:43.020
let's save all of that and have a look at it.

09:43.060 --> 09:50.660
Let's enter 55 and confirm and click Start Game and we can find a variable on start game.

09:50.710 --> 09:57.820
So the problem here is that I execute Yeah that should be props on start.

09:57.820 --> 10:03.080
Game here on the start game button into start game component because of course that's a property we're

10:03.080 --> 10:03.450
getting.

10:03.450 --> 10:05.270
It's not a function defined in here.

10:05.380 --> 10:07.340
It's defined on the props.

10:07.420 --> 10:10.500
It's this prop in the end.

10:10.780 --> 10:12.990
So small mistake.

10:13.000 --> 10:15.330
Let's try it again after fixing this.

10:15.430 --> 10:17.410
Start game and that's looking good.

10:17.410 --> 10:18.620
Now we see the opponents.

10:18.620 --> 10:20.610
Guess we can give some hints here.

10:20.620 --> 10:27.240
Which right now have no effect but which soon will have an effect and therefore we're on the next screen

10:27.250 --> 10:28.570
we're in the game screen.

10:28.570 --> 10:35.320
Now let's make sure we actually can give the computer some hints here and make sure that the computer

10:35.320 --> 10:38.740
has a chance of solving this and off guessing our number.
