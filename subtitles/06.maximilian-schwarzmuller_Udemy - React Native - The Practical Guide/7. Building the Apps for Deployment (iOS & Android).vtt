WEBVTT

00:02.410 --> 00:05.880
When building for the app stores the Expos Seelye.

00:05.920 --> 00:10.780
So what we type here in the command line can help you or will help you but you might need to tweak your

00:10.780 --> 00:17.070
configuration in the app Chase and fall depending on which features your application uses.

00:17.110 --> 00:24.160
So our application here uses a bunch of native modules these modules all need to request permissions

00:24.250 --> 00:32.020
and we kind of do this with the permissions API like for example in the image picker here when we ask

00:32.020 --> 00:38.590
for permissions but for Android for example you also need to provide a list of the permissions your

00:38.590 --> 00:46.510
app needs in a configuration file which you when you use React Native only half but which you don't

00:46.510 --> 00:53.890
have when using Expo because Expo provides this wrapper and does all of that for you in the Expo client.

00:53.890 --> 00:57.030
But now we don't plan on using the expo client anymore.

00:57.070 --> 01:03.610
And whilst it will include this into your standalone app as I mentioned you now need to tell Expo which

01:03.610 --> 01:05.630
permissions it should request there.

01:05.890 --> 01:11.860
In addition for example if you're using Google Maps you also need to provide your Google Maps API key

01:12.400 --> 01:17.350
and with that I don't mean as we're doing it here which we use in some parts of our jobs good code but

01:17.350 --> 01:19.680
to use the react native maps package.

01:19.720 --> 01:27.160
Again the expo client app basically uses its own key for development and so on but as soon as you plan

01:27.190 --> 01:33.670
on offering a standalone app you need to bring your own keys so that the actual wrapper which will be

01:33.670 --> 01:37.480
included in your stand alone app will use your key.

01:37.510 --> 01:41.720
Because the expo team won't give you a key owned by them for that.

01:42.090 --> 01:44.620
Again the overall docs are your friends.

01:44.620 --> 01:48.020
Dairy can learn what you can set up in the app Chase and fall.

01:48.490 --> 01:54.580
And let's start with Android because there you'll have to configure a bit more before we dive into what's

01:54.670 --> 01:57.190
specific about ISIS.

01:57.190 --> 02:04.210
So for Android besides icon and so on what you can configure dear are the permissions now.

02:04.210 --> 02:10.930
The thing is you can just omit the permissions key and in that case as you see here expert will actually

02:10.930 --> 02:14.200
setup your app to request all permissions.

02:14.200 --> 02:19.600
Now I would not recommend doing that because people will look at your app in the App Store and if they

02:19.600 --> 02:26.980
see that your basic place management app wants permissions to read their contacts or make calls.

02:26.980 --> 02:30.070
Well I don't know about you but I wouldn't download such app.

02:30.070 --> 02:35.680
So my recommendation would be that you are specific regarding the permissions your app needs and you

02:35.680 --> 02:41.860
do that by going to your app Chase and file and they are in the Android node you at the permissions

02:42.130 --> 02:45.030
key and now you add permissions.

02:45.040 --> 02:51.130
Now some base permissions will always be requested you find these permissions here for example permissions

02:51.130 --> 02:57.040
to get data from the Internet and so on but you can also for example add permissions to use the user

02:57.040 --> 03:01.100
location and access to camera because that's something we will do.

03:01.100 --> 03:06.670
So let's add these keys here to permissions like this to string keys with double quotes by the way that's

03:06.670 --> 03:07.960
important in this file.

03:07.990 --> 03:09.480
Added to this permissions array.

03:10.520 --> 03:20.350
Now we will also need the right external storage permission to save our image so we should add that

03:20.350 --> 03:21.520
as well.

03:21.520 --> 03:26.410
And with that we should be good for a design application but of course depending on the application

03:26.410 --> 03:29.940
your building carefully check which permissions your app will need.

03:30.010 --> 03:36.190
You can always consult the documentation pages of the native module packages you're using there you

03:36.190 --> 03:38.570
should normally find a description of the permissions.

03:38.620 --> 03:43.430
This package needs so permissions are one thing.

03:43.650 --> 03:48.840
In addition if you're using Google Maps you should add Google Maps.

03:48.840 --> 03:51.530
Note to your Android configuration.

03:51.690 --> 03:52.170
So here.

03:52.170 --> 04:00.210
After permissions we can add Google maps like this which also holds an object as a value add in that

04:00.270 --> 04:00.740
object.

04:00.750 --> 04:02.440
You set up the API key.

04:02.490 --> 04:09.480
Again you didn't need that for the Expo client when we published the app to this expo page and used

04:09.510 --> 04:15.190
the expo Clyde app because they're the expert who basically gives you their own Google Maps key.

04:15.330 --> 04:18.480
But if you're building a standalone app you need to provide your own one.

04:18.480 --> 04:27.000
So for dad make sure you use your key here like this and all the important and I mentioned is in the

04:27.360 --> 04:29.530
non Expo module already.

04:29.580 --> 04:40.260
Make sure that in the Google API is so in the Google cloud console when you check your api library you

04:40.260 --> 04:47.390
make sure that the maps SDK for Android is enabled for this project 4 2 which does API key you provided

04:47.400 --> 04:48.080
belongs.

04:48.090 --> 04:49.440
So here it is enabled.

04:49.440 --> 04:54.720
This has to belong to the project for which you created that API key which you now are providing here.

04:54.720 --> 05:00.770
Otherwise this won't work so these are the permissions and Google Maps settings and you might need our

05:00.770 --> 05:02.980
specific settings which you can learn about.

05:02.980 --> 05:06.710
He and the app change and evolve depending on which features you're using.

05:06.710 --> 05:10.220
You can also configure Of course everything else and so many things.

05:10.220 --> 05:18.540
One thing you absolutely need to provide to build your app is also this package key.

05:18.540 --> 05:21.940
This is something you always have to add no matter what your app uses.

05:22.050 --> 05:27.800
Here in the Android node you need to provide the package key and this now has to have a certain format.

05:27.810 --> 05:33.870
It's basically a in words you are L a fictional you are L which doesn't have to exist but which acts

05:33.870 --> 05:37.110
as a unique identifier across the entire Google Play store.

05:37.110 --> 05:42.060
So it should be a inverse you are L which no one else has used before and therefore typically if you

05:42.120 --> 05:48.210
own a domain you would use your domain for example com that academy and so an inverse domain and then

05:48.270 --> 05:53.700
a unique identifier like great places you can come up with any you or l you want here.

05:53.790 --> 05:58.920
But of course again it should be unique and you should therefore use your own domain where a fictional

05:58.920 --> 06:00.890
domain which isn't owned by anyone.

06:00.990 --> 06:07.530
So not Academy and because I do owned is so any other domain any are a fictional identifier which should

06:07.530 --> 06:08.880
have this format.

06:08.880 --> 06:10.790
That's what you provide here.

06:10.860 --> 06:14.860
You also need to provide something similar on Iowa's deer.

06:14.970 --> 06:21.480
If you go to Iowa as you don't need to provide this permission setting stuff because I w permissions

06:21.480 --> 06:22.580
work differently.

06:22.650 --> 06:28.020
You would need to provide a Google Maps API key if you use to Google Maps where you know if the maps

06:28.020 --> 06:33.600
package for I was the default of this package however is to use Apple Maps and I haven't changed as

06:33.600 --> 06:37.200
in my app so I don't need to provide Google Maps API here.

06:37.440 --> 06:45.260
But what you definitely need to provide here is a bundle identifier so replace package with bundled

06:45.260 --> 06:47.240
identifier and the format is the same.

06:47.240 --> 06:54.050
You have to is in words you are L syntax here and a name ID column Academy in great places cause and

06:54.080 --> 06:56.630
also use that dash course edition here on Android.

06:56.810 --> 07:02.090
So bundle identifier for ISIS and package for Android needs to be set to such a inverse unique you are

07:02.090 --> 07:07.830
El and besides these identifiers you also need to set something else on.

07:07.840 --> 07:15.290
IOW you need to add a build no all here the IRS note therefore and the build number should be a string

07:15.290 --> 07:23.020
which identifies your build the error you should have a build number just like this version up there

07:23.530 --> 07:25.800
and working in the way I explained it up there.

07:25.810 --> 07:33.100
So it should be a no consisting of three digits where you have a patch number four.

07:33.110 --> 07:39.780
Well patches back fixes then this minor update number for new features which don't break everything

07:39.780 --> 07:41.820
though enters major update number.

07:41.850 --> 07:46.260
You can change this however you want but you should change it for every new words and you publish and

07:46.260 --> 07:51.910
you deploy and you should of course change it such that you reflect what changed.

07:51.920 --> 07:53.970
Now you need something similar for Android.

07:53.970 --> 08:01.710
If we go back to the Android documentation there we all need a working code so here we add word in code.

08:01.870 --> 08:07.030
And now here this is not a string but a number which you should simply increment by one for every new

08:07.030 --> 08:07.810
release.

08:07.810 --> 08:09.170
So you started one.

08:09.190 --> 08:14.950
The next version you release even if it's just containing some tiny fixes should be two and then two

08:14.950 --> 08:15.910
free ends on.

08:15.910 --> 08:20.890
So that's what you should set up here does how it works for Android y'all to find that description here

08:20.950 --> 08:23.000
in the documentation.

08:23.140 --> 08:28.000
And with that we're now prepared to deploy this or to build it first.

08:28.000 --> 08:32.860
And as I mentioned the cool thing about Expo managed is that now you can build this on exposed cloud

08:32.860 --> 08:33.960
servers.

08:34.150 --> 08:41.440
So what you should do is you should run Expo publish to publish the latest version of your app to expose

08:41.500 --> 08:46.100
servers just like that which will not yet build it as a standalone app.

08:47.370 --> 08:54.190
Now what it get here are a couple of warnings or errors that we see that Android should not have additional

08:54.190 --> 08:55.360
property Google Maps

08:59.710 --> 09:02.300
Yeah because that should be in a conflict note.

09:02.410 --> 09:03.490
My mistake.

09:03.490 --> 09:08.890
So you should add config here and in config you might have to Google Maps key.

09:08.890 --> 09:15.780
That's a tiny mistake on my side and here for the package Android actually doesn't like dashes in there

09:15.850 --> 09:24.170
but you may use underscores so let's use this with that fixed now let's run Expo publish again to again

09:24.170 --> 09:27.230
validate this and then publish the most recent version.

09:27.320 --> 09:33.890
Q expos servers which again will not start to build process yet but which is an important preparation.

09:35.170 --> 09:40.360
And once this is done you're ready to also build your app for Android.

09:40.390 --> 09:41.120
And I was.

09:41.170 --> 09:45.910
Now the difference between publishing and building is that publishing just pushes your code and configuration

09:45.910 --> 09:50.540
to exports servers and you can then scan the barcode with the expo client and so on.

09:50.560 --> 09:56.590
Building means that you'll leverage expos cloud build service to really build an Android app bundle

09:56.830 --> 09:59.480
or an ISIS IPA file.

09:59.500 --> 10:04.090
These are the files which you then upload to the app stores thereafter so there is a huge difference

10:04.090 --> 10:06.780
here noticed bundles which you build.

10:06.800 --> 10:10.220
As mentioned before include the expo client.

10:10.220 --> 10:15.290
So to say they include this as a wrapper around your app but it's a real native app there for after

10:15.290 --> 10:15.520
all.

10:15.530 --> 10:19.410
So it's a native app with just as little extra tiny wrapper around it.

10:19.490 --> 10:24.840
Taking into account the configuration you set up here for example regarding the permissions.

10:24.870 --> 10:31.890
In addition these apps which you build on exposed servers which you then can distribute through the

10:31.890 --> 10:39.300
app stores will talk to expos servers for you over the air updating functionality so you will still

10:39.300 --> 10:45.750
just publish new updates with Expo published thereafter and your standalone apps which are running on

10:45.750 --> 10:48.900
other devices will get these published updates.

10:48.900 --> 10:53.820
So publishing is still important even if you're building standalone apps if you're building app bundles

10:54.000 --> 10:59.160
because these app bundles will continue to talk to export servers to get new versions.

10:59.280 --> 11:01.720
But speaking of that how do we build these panels.

11:01.720 --> 11:07.770
Now you do this with the expo build command and there you have built coal and Android and built coal

11:07.770 --> 11:08.780
and Iowa.

11:08.880 --> 11:16.020
Well let's start with build coal and Android and as the name suggests this builds an app for Android.

11:16.020 --> 11:21.540
You can learn all about the standalone build process in the building standalone apps Expo docs which

11:21.540 --> 11:27.210
you all to find attached here and there you find the basic configuration you need and what you should

11:27.210 --> 11:33.710
take into account their for Android here you find that you all are right now at least can choose whether

11:33.710 --> 11:39.200
you want to build an API K or app bundle file building an app bundle file is recommended because that

11:39.260 --> 11:40.780
is the preferred format.

11:40.850 --> 11:47.330
Google once and for this you can run instead of just Expo build Android you run Expo build Android dash

11:47.330 --> 11:54.710
t app add dash bundle if you now had entered this will in the end validate your setup and then push

11:54.710 --> 12:00.350
your code queue exposed cloud build servers where this will now be scheduled.

12:00.350 --> 12:05.330
Now first of all it will ask you because apps need to be signed.

12:05.360 --> 12:10.210
That happens with a private public key pair which in the end is used to identify us.

12:10.220 --> 12:13.200
You offer off the app future updates of the app.

12:13.220 --> 12:18.250
And with that I don't mean updates which you published to expose servers with the expo published command.

12:18.410 --> 12:23.600
But when you rebuilt the app when you rebuilt the package which you then reapplied to the app stores

12:23.900 --> 12:28.940
which you'll occasionally need to do if you for example change the icon or something else which can't

12:28.940 --> 12:30.670
be shared with Expo publish.

12:30.740 --> 12:36.890
In such cases you need to sign the update with the same keys you used for creating the original app

12:37.130 --> 12:39.050
to identify USDA offer.

12:39.050 --> 12:45.530
Otherwise the app store will deny does update it will not accept your next words off the app so therefore

12:45.530 --> 12:50.120
you need to sign your app and if you know what you're doing you can create and upload your own keys

12:50.120 --> 12:50.770
store.

12:50.810 --> 12:54.090
But here I will stick to version 1 and let Expo handle that.

12:54.170 --> 13:00.300
Which means it will create such a key for assigning and do all the signing stuff for you on their servers.

13:00.350 --> 13:01.520
So that's what I choose here

13:04.640 --> 13:13.820
now with that ID again builds the app justice for publishing and even though I'm building Android app

13:13.820 --> 13:19.700
it still builds it for I w here because in the end what it does here is it publishes the app so let's

13:19.700 --> 13:27.160
wait for this to finish now it's just doing the same as export published it.

13:27.190 --> 13:32.310
But there after it will schedule this to be built on exposed service.

13:32.350 --> 13:38.060
So now publishing is done and now it schedules such a build and it queues it up.

13:38.170 --> 13:42.670
By the way is a process you can now quit as it says here you can always check the status of your build

13:42.940 --> 13:44.570
by entering this you are.

13:44.620 --> 13:48.720
You'll need to log in with your export account there and then you can see the build status.

13:48.880 --> 13:49.700
Now important.

13:49.810 --> 13:51.380
This build can take very long.

13:51.430 --> 13:57.100
The build itself not so much but until your build is built because it's scheduled.

13:57.100 --> 13:59.260
Keep in mind that this is a free service.

13:59.380 --> 14:03.800
So of course it's not built immediately but when the exposed servers have room for it.

14:03.910 --> 14:08.240
This can take a couple of minutes even hours until that happens.

14:08.320 --> 14:13.030
So don't worry if that takes some time you can always check this you well which you're seeing in your

14:13.060 --> 14:16.490
command line to see what's happening so you can quit this.

14:16.500 --> 14:20.740
This is all of the you are L where you will later find the built files.

14:20.740 --> 14:26.830
So here's my build status if we check it you see it's cute.

14:26.830 --> 14:28.380
And right now nothing else is happening.

14:28.380 --> 14:33.820
We can revisit this later to see the build process and download it to finished our panel and for now

14:33.820 --> 14:35.890
let's do the same for hours they offer.

14:35.950 --> 14:38.500
This can be done by running Expo build.

14:38.610 --> 14:44.890
IOW no important to build ISIS apps you need a paid Apple Developer account.

14:44.890 --> 14:46.270
That's a must have.

14:46.690 --> 14:53.590
So you will need to go to developer dot apple dot com and there you will need to log in with your Apple

14:53.590 --> 14:59.650
I.D. and then basically get such a paid accounts you will need to add your credit card and pay a fee

14:59.650 --> 15:02.050
of ninety nine dollars that is required.

15:02.050 --> 15:03.230
There is no way around that.

15:03.310 --> 15:07.930
Apple requires that for you to build apps which you want to publish during stores.

15:07.930 --> 15:10.210
You don't need that during development.

15:10.210 --> 15:13.200
But now for sharing the app you need to have that.

15:13.240 --> 15:20.290
It's basically a fee that's there to only allow people to the store who have at least some kind of Syria's

15:20.680 --> 15:22.510
gold stare I guess.

15:22.510 --> 15:28.210
So make sure you sign in here and set up your paid Apple Developer account to join the Apple Developer

15:28.210 --> 15:31.490
Program and thereafter you can run this command.

15:31.560 --> 15:38.440
It will ask you to log in with your apple developer account so you log in with your Apple I.D. and password

15:38.500 --> 15:42.880
and that data will not be stored on expos servers.

15:42.880 --> 15:43.960
No worries.

15:43.960 --> 15:49.660
But it needs it to set up everything to build your app because for the Apple build process you need

15:49.660 --> 15:54.550
special certificates and so on which it can request on your behalf with this data.

15:54.640 --> 15:59.800
Once you did log in it asks you how you want to handle your credentials justice before if you don't

15:59.800 --> 16:04.330
know what you're doing you should let Expo handle all of that because as I mentioned you need a couple

16:04.330 --> 16:11.920
of special certificates to in the end build your ISIS app and expo can request all of that for you and

16:11.920 --> 16:17.650
said all set up for use all live export duties for all these steps.

16:17.960 --> 16:21.080
And now it will basically do all that for you.

16:21.080 --> 16:26.500
Now this cell also builds my app here for us and publishes it again first.

16:26.510 --> 16:33.940
That's the same we did before for Android and now we also got a build scheduled for just justice before

16:33.960 --> 16:40.020
does this cued up you can quit that and just watch your build here in the browser.

16:40.030 --> 16:45.660
So now we don't just have that cued up Android build but we also have that cued up IOW build and both

16:45.660 --> 16:48.680
will take a while until they're finished.

16:48.690 --> 16:53.460
Now there is one important thing you also have to do after this android build is done which it isn't

16:53.460 --> 16:54.510
yet.

16:54.510 --> 17:00.300
You should run Expo fetch colon Android colon key store.

17:00.300 --> 17:05.580
Again this only works after the build completed because this will then fetched is automatically generated

17:05.580 --> 17:12.900
key store which Expo generates for you if you chose that in the setup which you need for future updates

17:13.030 --> 17:17.420
of this app you will definitely need that and in future updates when you rebuild the app.

17:17.460 --> 17:22.070
You then have to choose that you provide your own key stored and you need to provide this key stored

17:22.070 --> 17:22.310
in.

17:22.320 --> 17:25.330
So entered a path to this key store which you then download.

17:25.350 --> 17:30.630
So this command will in the end download a file generated on exposed servers which you need to store

17:30.630 --> 17:33.570
on your system for future update of the same app.

17:33.600 --> 17:35.980
Otherwise you'll not be able to update.

17:36.000 --> 17:41.040
So that's some important command you'll need to run once the spill is done well and with that let's

17:41.040 --> 17:42.600
wait for it to be finished.

17:42.600 --> 17:46.610
ISIS actually is already building Android is still queued up.

17:46.620 --> 17:49.120
But ISIS is already on the go.

17:49.120 --> 17:53.830
So let's wait for the Iaw Bill to finish and now it is it's done.

17:53.830 --> 17:57.200
Now my IAW build is done.

17:57.330 --> 18:02.730
Now you can also check your official docs on how you can continue with testing this on your device or

18:02.730 --> 18:08.720
simulator or then go to the part where you upload the app to the Apple App Store and Google Play store.

18:08.730 --> 18:09.690
So we built the app.

18:09.690 --> 18:16.930
Now you can upload it by running Expo upload colon Iowa's this will by default use your latest app and

18:17.020 --> 18:18.630
upload it to the app store.

18:18.640 --> 18:24.100
Now it's the part which I will not do here because I don't really want to publish this app here but

18:24.100 --> 18:25.710
it is what you would now do.

18:25.780 --> 18:30.570
It would use this application which was just built here for ISIS or for Android.

18:30.580 --> 18:36.160
Andrew Bolt is now also running as a seasoned would use this and then published as ever with this command

18:36.160 --> 18:40.780
to ISIS or with this command to the Android to the Google Play store.

18:40.780 --> 18:45.970
Now follow these steps you find here in the docs to create the appropriate accounts and setup everything

18:45.970 --> 18:49.150
correctly so that this command can succeed.

18:49.150 --> 18:55.450
And with that you will have your app deployed the Apple App Store and to the Google Play store so that

18:55.450 --> 19:02.140
you can well get your app to any user around the world as a standalone app not dependent on the export

19:02.140 --> 19:05.440
client being installed on the devices which is pretty neat.
