WEBVTT

00:02.370 --> 00:08.650
In the last lecture we made items deleteable but still we can end up with lists that are too long

00:08.650 --> 00:10.270
to fit on one page

00:10.270 --> 00:13.860
and unlike in the web, we don't get scrolling bars automatically.

00:14.330 --> 00:16.470
Let's have a look at the official documentation again,

00:16.570 --> 00:18.440
there is a useful component,

00:18.550 --> 00:20.060
do you see it here?

00:22.110 --> 00:24.580
It's scroll view, scroll

00:24.580 --> 00:32.860
view can be used to wrap a container to automatically allow us to scroll, to basically add scrolling functionality

00:33.490 --> 00:38.830
because you have to keep in mind, on a native app scrolling in the end is just handling touch events

00:38.830 --> 00:39.850
correctly,

00:39.850 --> 00:45.520
you have to be able to handle the fact that the user pushes the screen down with his finger and therefore

00:45.520 --> 00:51.580
scroll view is basically a component which handles these touch events for you to automatically change

00:51.580 --> 00:52.610
your viewport.

00:52.860 --> 00:54.920
So let's go back to our application

00:55.360 --> 01:07.580
and in the place list here maybe, let's import scroll view instead of the normal view.

01:07.600 --> 01:13.350
So now let's use scroll view here and replace the view in jsx with scroll view and 

01:13.990 --> 01:14.720
let's see,

01:14.740 --> 01:16.200
let's go back to our application.

01:17.420 --> 01:28.680
If I now reload it, let's add a couple of Munichs to this page and now you see I can scroll this list,

01:28.820 --> 01:32.610
so I got this nice scrolling behavior which really looks and feels native,

01:32.830 --> 01:35.390
Now I can delete the item if I click on it,

01:35.420 --> 01:40.280
so that also works but it's also intelligent to recognize when I want to scroll,

01:40.430 --> 01:42.390
and when I want to delete.

01:42.620 --> 01:44.320
So let's delete a couple of ones,

01:44.330 --> 01:50.470
now we're back and I still can scroll of course but I can't scroll outside of well where it makes sense

01:50.470 --> 01:51.210
essentially,

01:51.260 --> 01:55.070
also notice that the input stays inline, stays in place.

01:55.100 --> 01:59.900
So let's do the same for Android, we decrease that, there

01:59.900 --> 02:00.970
I can scroll too

02:00.980 --> 02:02.420
yes you see.

02:02.420 --> 02:05.990
So this is all working nice, this is all working as it should

02:06.290 --> 02:14.490
and it's nice to have a solution for cases where your items exceed the space on the device.

02:14.510 --> 02:19.800
More about how to manage the space you have available can be found in the styling section later

02:19.830 --> 02:27.770
in the course by the way but scroll view is really only great in places where you basically know how

02:27.770 --> 02:35.450
many elements you are going to have. For this list, we can add thousands of elements theoretically and here, you

02:35.450 --> 02:37.580
won't really notice an issue

02:37.880 --> 02:46.940
but on slower devices, for very long lists, using the scroll view is not ideal because it's very inefficient,

02:46.940 --> 02:49.160
it renders all items at once

02:49.340 --> 02:53.870
and if you have a very long list, this can eat up a lot of performance.

02:53.870 --> 02:56.830
Therefore there's a better solution to that,

02:56.870 --> 02:59.380
let's have a look at it in the next lecture.
