WEBVTT

00:02.290 --> 00:05.300
So let's work on the things we outlined in the last lecture,

00:05.350 --> 00:13.030
maybe starting with the activity indicator. For that we can use this UI state we already used in the http

00:13.030 --> 00:16.970
section where we dispatch start and stop loading,

00:17.290 --> 00:21.600
so I will use them here in my auth action creator too

00:21.790 --> 00:24.560
and for that I of course need to import them. I'll

00:24.610 --> 00:33.300
import them from the index file here in the same folder and I want to import

00:33.360 --> 00:34.530
UI start

00:34.560 --> 00:39.840
and UI stop loading, so these action creators. With that here in auth sign up,

00:39.840 --> 00:42.870
I will use them, before fetching

00:42.870 --> 00:50.100
I will dispatch UI start loading and execute that method and I will execute stop loading here

00:50.100 --> 00:51.960
in case we get an error,

00:52.740 --> 01:00.050
whoops, not like this, dispatch UI stop loading, like this and I will also dispatch that

01:00.130 --> 01:04.780
if we got a response because we're done, no matter what the response was.

01:04.780 --> 01:09.840
Now we can use the activity indicator we already used before on the auth screen,

01:10.180 --> 01:17.530
so there I want to import activity indicator from react native and then I want to render the activity

01:17.530 --> 01:19.920
indicator instead of the submit button

01:20.020 --> 01:29.660
if we are well waiting for our request to go through. Now we have this submit button here at the bottom,

01:29.680 --> 01:30.590
here it is,

01:30.680 --> 01:38.790
button with background, now I only want to render this if we are not waiting for our request to finish.

01:39.100 --> 01:47.080
So I'll add a new variable here at the top of the render function, I'll name it submit button and here I will

01:47.080 --> 01:50.310
enter this button with background code we used before,

01:50.650 --> 01:58.360
however I will override this submit button if we are currently waiting for our request to finish.

01:58.360 --> 02:03.500
So for that we need to find out if we're waiting to use this in this if request,

02:03.640 --> 02:11.530
if we scroll to the bottom that means that we also need to connect this auth screen to our state in redux,

02:11.530 --> 02:13.920
we already use map dispatch to props,

02:14.050 --> 02:20.880
now I'll add map state to props to get access to the information whether we are loading or not.

02:21.040 --> 02:28.800
In here I return my javascript mapping object and I will set up an isLoading prop I can use in this component

02:28.800 --> 02:31.060
here and bind it to state

02:31.140 --> 02:41.010
UI isLoading, therefore I'll refer to my UI reducer and the isLoading prop in the UI slice of

02:41.010 --> 02:42.750
our state.

02:42.810 --> 02:50.630
So with that in place, we can use isLoading, first of all I have to pass map state to props to the connect

02:50.640 --> 02:51.880
function though

02:52.290 --> 02:59.070
and now if we scroll up to the render function, we can use this in this if check, we can check if this props

02:59.160 --> 03:00.930
isLoading is true,

03:01.170 --> 03:10.550
if it is, then the submit button should actually be the activity indicator like that and now we can just

03:10.550 --> 03:15.560
render the submit button at the bottom of our form, here

03:16.070 --> 03:21.780
I will render submit button. If we save that file and we reload the app,

03:21.830 --> 03:28.080
we should still see the submit button and I can enter something here and now you have to watch closely

03:28.080 --> 03:29.860
because firebase is pretty fast

03:30.030 --> 03:35.880
but for a fraction of a second, you could see the activity indicator and firebase is just too fast

03:36.000 --> 03:41.130
but obviously a good thing to have it in case it's slower or you're using some other backend.

03:41.640 --> 03:48.120
So we get this added, still we always forward the user to the main tabs even though we got an error

03:48.120 --> 03:49.570
here at the bottom right

03:49.970 --> 03:55.950
and of course we're not really handling the case that we got an error because as I mentioned the catch block

03:55.980 --> 03:57.490
is not fired,

03:57.660 --> 04:05.910
so therefore what I want to do is the next step and we'll do it right now is I want to check if parsed

04:05.910 --> 04:08.870
response actually holds an error.

04:09.390 --> 04:18.580
So to find out whether that's the case or not, I'll simply see if parsed response error exists,

04:18.830 --> 04:21.220
if we have a look at our response, here

04:21.240 --> 04:27.600
we get this error property and this will only be there if we got this error object,

04:27.600 --> 04:30.850
so if this doesn't exist it means we don't have an error.

04:30.870 --> 04:34.040
So I'll see if parsed response error is true

04:34.320 --> 04:40.140
and if it is, then I want to throw basically the same alert message.

04:40.170 --> 04:48.130
Now you could add or implement a more elaborate approach because you actually get the error code here,

04:48.150 --> 04:57.960
email exists and you can check against the firebase docs to find out what sample errors are and then

04:58.050 --> 05:00.460
map or show an appropriate error message,

05:00.460 --> 05:02.570
I'll use this generic one,

05:02.580 --> 05:07.560
the important part is however that this also should determine how we proceed.

05:07.770 --> 05:10.550
We may still log this but you can of course also remove this,

05:10.710 --> 05:17.000
we definitely also still want to stop loading, I'll actually do this first in all circumstances

05:17.460 --> 05:24.900
but only if we got no error, only then I want to forward the user to my tabs. So I'll add an else block here

05:24.990 --> 05:26.990
and remove the console log statement

05:27.300 --> 05:29.320
and now I want to load my tabs

05:29.340 --> 05:32.240
if we did create a user successfully.

05:32.550 --> 05:39.180
Now remember how we forwarded the user to the tabs, we can have a look at the auth screen and there to

05:39.210 --> 05:41.330
our login handler,

05:41.760 --> 05:49.500
we actually just call start main tabs which we import from our tabs screen here, from start main

05:49.500 --> 05:51.540
tabs in main tabs folder,

05:51.990 --> 05:59.010
I will remove that from the auth screen and I will remove that logic down there in the login handler

06:00.040 --> 06:04.240
so that we don't call start main tabs, we just should try to login

06:04.720 --> 06:11.750
and instead what I'll do is in my auth action handler, there I want to call start main tabs.

06:12.160 --> 06:17.320
So I will import start main tabs from

06:17.410 --> 06:24.640
and now we just need to go up and then into the screens folder, into the main tabs folder and then import

06:24.700 --> 06:26.380
start main tabs.

06:26.800 --> 06:28.940
And now we can just execute that method

06:29.050 --> 06:34.810
if we did create a user successfully, start main tabs like this.

06:34.810 --> 06:37.990
Now we can save everything and reload this application

06:38.350 --> 06:45.250
and now if we try this again, you'll see we actually get this error and we're not forwarded

06:45.340 --> 06:47.750
and that's exactly what I want.

06:47.770 --> 06:54.130
Now what we also should do as a next step is make sure that we actually do have two different approaches

06:54.130 --> 06:59.680
for signing up because right now we're actually using the login screen and logging in which we are

06:59.680 --> 07:01.070
not really supporting right now,

07:01.090 --> 07:03.000
we can only create users as of now.

07:03.220 --> 07:05.820
So let's add this functionality next.
