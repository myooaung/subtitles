WEBVTT

00:02.230 --> 00:04.920
Sometimes however you just can't get the layout right.

00:04.930 --> 00:10.720
With percentage with and hardcoded pixels like this sometimes you really need to know how many pixels

00:10.720 --> 00:12.210
you have a whale.

00:12.340 --> 00:18.130
For example here on the buttons where we set a width of one hundred we said one hundred no matter what

00:18.130 --> 00:19.990
the device size is.

00:19.990 --> 00:24.460
No actually we know that we want to have cute buttons sit next to jobber.

00:24.550 --> 00:31.960
So what we can do is we can simply ensure that we take a button with that always fits on the screen

00:31.960 --> 00:33.830
no matter how small that is.

00:33.850 --> 00:39.460
And for Dad we need to find out how many pixels we have a weight level in width and that's something

00:39.460 --> 00:44.170
we can find out with the help of React Native there from React Native.

00:44.170 --> 00:48.880
You can import de dimensions object here dimensions is the name.

00:48.940 --> 00:55.720
Now this is now not a component which you use instead this object that allows you to find out how much

00:55.810 --> 00:58.380
with you have a weight level.

00:58.420 --> 01:04.270
Now we can use this for example down there where we set our button with instead of setting it like this

01:04.780 --> 01:07.080
we can set our with two dimensions.

01:07.210 --> 01:12.850
And then there is a get method where you can get the dimensions of the window.

01:12.850 --> 01:14.440
You can always get it off the screen.

01:14.440 --> 01:21.700
The difference between window and screen only matters on Android Wear with window the status bar height

01:21.700 --> 01:23.640
will be excluded from the calculation.

01:23.740 --> 01:26.110
And therefore this will be really well.

01:26.260 --> 01:28.720
The part of the screen where your content will live.

01:28.780 --> 01:32.130
So you should typically use window here because on ice it does matter.

01:32.130 --> 01:38.800
On Android is guaranteed to be well the part of the screen your UI really sits in without that status

01:38.800 --> 01:40.110
bar at the top.

01:40.180 --> 01:46.390
So typically you might want to use window here to get the real room you have a level for your layout.

01:46.390 --> 01:52.600
The real dimensions you can use for your layout and what this gives you as an object where you can get

01:52.750 --> 01:56.470
a couple of properties for to be precise.

01:56.470 --> 02:01.540
The fun scale the user set up so for example if users want to have a bigger funds than you could get

02:01.540 --> 02:03.560
the multiplier here with F1 scale.

02:03.670 --> 02:09.610
But most important you get the width and the height and if we get the width here then we get the overall

02:09.610 --> 02:11.050
width of the device.

02:11.050 --> 02:12.580
This app runs on.

02:12.580 --> 02:19.390
Now we know we want to squeeze at least two buttons into this device here so we could simply divide

02:19.390 --> 02:19.800
this pie.

02:19.800 --> 02:25.730
Q So now that each button is half as wide as the device.

02:25.730 --> 02:30.190
Now if we saved as we don't really get the look we want because of course that's too big.

02:30.190 --> 02:35.620
But if we divide this by free for example then this already looks better on the small screen not on

02:35.620 --> 02:37.060
the big one though.

02:37.060 --> 02:42.520
But how about for if we take forward and we have plenty of space for all the other space we need like

02:42.520 --> 02:49.690
the spacing around our container and we ensure that our buttons always kind of respect the device size.

02:49.720 --> 02:55.510
Now of course here you could have achieved something similar by setting with to a percentage like 40

02:55.510 --> 03:00.760
percent here but all of them wanted to introduce two dimensions API here which we will use later as

03:00.760 --> 03:01.550
well.

03:01.570 --> 03:07.480
It's a great API for finding out how many pixels you have away lable on the width and on the height

03:07.870 --> 03:09.140
on the device or running on.

03:09.190 --> 03:15.670
And that's important where percentage here always refers to the direct parent to you and not always

03:15.670 --> 03:17.560
to the away label width of the device.

03:17.650 --> 03:20.880
That only is the case on the mode topmost parent.

03:20.890 --> 03:28.330
So to say is on the topmost view your rendering dimensions get window always gives you dimensions for

03:28.330 --> 03:30.750
the entire device no matter where you use it.

03:30.760 --> 03:38.480
So with here always is the width of our screen on the device and never off the parent or anything else.

03:38.560 --> 03:43.390
So this can be really useful if you want to style something in a certain way or size something in a

03:43.390 --> 03:48.100
certain way because this tells you how much with you have available.
