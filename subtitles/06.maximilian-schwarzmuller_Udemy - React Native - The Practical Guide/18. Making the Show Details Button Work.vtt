WEBVTT

00:02.060 --> 00:06.950
Pressing the detail button here in the order items should expose all items we have and for this I want

00:06.950 --> 00:08.810
to use the card item here.

00:08.840 --> 00:14.150
One way of doing this is to handle some internal state here with the help of the U.S. State Local which

00:14.150 --> 00:20.000
we import from react where we control where we're currently viewing the details are not so named as

00:20.120 --> 00:22.730
show details and set show details here.

00:24.300 --> 00:29.680
And initialize this with used state to be false so that we don't show the details initially.

00:30.000 --> 00:38.190
And now when we press this button here I of course want to change this state so dear in this function

00:38.200 --> 00:43.690
I will call set show details and basically invert the value for this we use the special syntax where

00:43.690 --> 00:51.370
we pass a function to that state setting function here where we get the previous state and we then return

00:51.370 --> 00:53.610
and use state based on that previous state.

00:53.680 --> 00:59.290
And here keep in mind that previous state is indeed false or true depending on what show details was.

00:59.290 --> 01:05.320
So here I will return not previous state to convert this if it was false I will return true as a new

01:05.320 --> 01:11.200
state if it was true I'll return false as a new state and I'll set this to show details.

01:11.200 --> 01:18.130
Now we can use that information here to output some content conditionally we can check show details

01:18.730 --> 01:22.930
and if data is true and this is now our reacts index we can use here.

01:22.930 --> 01:29.200
So if this is true Dan we return this view here might look strange at first but with Dad we're saying

01:29.200 --> 01:34.340
if this is true and this is true and is a shortcut for JavaScript to check if this is true.

01:34.480 --> 01:38.380
Well this is always true ish because this is optic and so this will then be rendered.

01:38.380 --> 01:39.830
That's how javascript works.

01:39.850 --> 01:45.430
The alternative would be a ternary expression or a variable which you set up here which you'd change

01:45.430 --> 01:47.920
with if check and then output down there.

01:47.920 --> 01:53.500
So all used as inline expression here where output this view if show details is true.

01:53.560 --> 01:57.400
And in this view I want to output all the items.

01:57.490 --> 02:02.650
So in this view I'll have a dynamic output where I go for all my items which I expect to get on the

02:02.650 --> 02:05.920
items prop of this order item component.

02:05.920 --> 02:12.400
And there we can map our data into a list of JSA X elements into a list of components.

02:13.150 --> 02:21.640
So here I of course get my card item in the end because items in order are just the items we had in

02:21.640 --> 02:27.610
the card so map executes this function on every card item so to say and gives us that a card item it's

02:27.610 --> 02:33.190
currently looking at an L for desired and we have to return a new J as X element we want to output and

02:33.190 --> 02:35.810
that's where I use my card item to output debt.

02:35.860 --> 02:45.490
So here I output card item like a note card but cart item like this not a card item if you have a look.

02:45.530 --> 02:51.920
Took the quantity and the title as inputs and also wanted the amount.

02:51.920 --> 02:57.050
In addition we had to delete button there which I don't want on the order items all we have to do something

02:57.050 --> 02:57.970
about that.

02:58.250 --> 03:04.610
But let's focus on quantity title and amount for the moment and pass in these data pieces.

03:04.610 --> 03:13.810
So here a quantity is card item dot quantity amount is a card item dot.

03:13.820 --> 03:20.810
And now remember that whatever we store hidden orders and items is in the end what we get as items here

03:20.810 --> 03:22.550
in our orders reducer.

03:22.550 --> 03:27.430
So what we get in our action so we get our card items there and if we have a look at the card screen

03:27.430 --> 03:33.950
and have a look at what we pass in there then for ADD order we pass and discard items constant which

03:33.950 --> 03:36.970
holds this array we generate here the end.

03:37.010 --> 03:39.970
So in the end we have an array of such objects in there.

03:40.010 --> 03:45.110
So we have the product titled A Product Price to quantity and to sum in there and that's what we can

03:45.110 --> 03:52.970
now work with here in order item where I create my card items I pass and the card item quantity for

03:52.970 --> 03:59.850
the amount I pass in court card item some and last but not least in the card item.

03:59.860 --> 04:08.810
We also need to title so Dad will be card item dot product title what I pass in here.

04:10.420 --> 04:16.130
Note A remaining problem as I said is that a card item has it is touchable.

04:16.130 --> 04:20.680
I can hear to delete it does only make sense if we use this component instead of a card.

04:20.690 --> 04:25.890
Not when we use it inside of an order we want to output which is of course read only.

04:26.030 --> 04:34.430
So the solution is that here in card item we wrap this and simply expect to get a prop that says for

04:34.430 --> 04:37.990
example the league table and only if Data's true.

04:38.000 --> 04:41.780
Same shortcut as a second ago we all would put this touchable opacity.

04:41.810 --> 04:43.130
So as I can in general.

04:43.220 --> 04:45.060
Otherwise we don't.

04:45.080 --> 04:51.150
So now we have to a legal prop in the card item which needs to be set to show that trash icon.

04:51.170 --> 04:57.260
This means that in the card screen where we want to have that trash icon when we use the card item there

04:57.620 --> 05:01.790
we do need to set delete table and setting it like this suffices.

05:01.790 --> 05:07.280
This sets it to true and we'll show it on the other hand in our order item.

05:07.430 --> 05:12.830
When I also use the card item there I don't set delete table and they offer will not render disk trash

05:12.830 --> 05:16.530
I can so let's have a look at this.

05:16.530 --> 05:20.550
Let's save it and let's add these items to the cart.

05:20.550 --> 05:27.760
Press order now and then go to the orders click show details and I get an error props.

05:27.780 --> 05:32.310
Items map can't be called because undefined is not an object.

05:32.500 --> 05:37.800
A reason for data instead I'm trying to loop for all my items here on the order item but in the orders

05:37.860 --> 05:41.640
screen I'm never setting the items prop here.

05:41.640 --> 05:47.280
So in the orders screen for the order item besides passing in the amount and date we also need to pass

05:47.280 --> 05:53.460
on the items for that order item or outputting and that of course can be received or can be gotten from

05:53.550 --> 05:56.350
our item data item which is a single order.

05:56.350 --> 06:03.030
And now if you have a look at the order model in there we'll have those items property here so we can

06:03.030 --> 06:05.930
access dot items here.

06:06.040 --> 06:10.570
And now we pass the items into the order item and therefore now we can also output it there.

06:10.570 --> 06:17.720
So now if you give us a number try and replace and you ordered here and we simply have a look at this.

06:17.740 --> 06:22.540
Now this works we got a problem with the key here which we'll fix in a second.

06:22.540 --> 06:27.020
Let's first of all all the tried is on Android click order now.

06:27.310 --> 06:33.220
Then go to orders show the details get the same warning but I've written that it generally works though

06:33.220 --> 06:40.410
it would be nice if these order items were a bit broader so that's also something I want to fix so to

06:40.410 --> 06:41.430
fix these errors.

06:41.430 --> 06:48.840
We have the warning stems from the fact that here I'm mapping my data into react components and if we

06:48.840 --> 06:55.230
do this manually with map here we need to assign that key prop that's a core react requirement which

06:55.230 --> 06:57.840
you'll have in react for a web as well.

06:57.840 --> 07:05.100
So here you need to point at a unique identifier and every card item here in the end has a product I.D.

07:05.100 --> 07:10.950
we can use and you can confirm doesn't a card screen where you create that array of card items in the

07:10.950 --> 07:12.030
end there.

07:12.030 --> 07:18.350
We store that product I.D. and that will be unique per row so that is fine.

07:18.390 --> 07:28.740
Now regarding the width of this well we can add a style here detail items for example and add that down

07:28.740 --> 07:30.400
there in the style sheet.

07:30.470 --> 07:35.370
And here simply make sure that we set a width of 100 percent so did we take the full away label width

07:35.580 --> 07:43.820
for the card items and now if we give us a number try and we order it is and then we go to our orders

07:43.880 --> 07:45.450
screen and show the details.

07:45.470 --> 07:50.630
Now it is looks the way it should look and now we can view the details and hide them tiny improvement

07:50.630 --> 07:52.840
maybe is that this text should update.

07:52.880 --> 07:57.800
So when we view the details this should say height details and not show details.

07:57.800 --> 08:02.950
And of course that's also easy to implement and order items there we have this button.

08:03.020 --> 08:09.230
We just need to set this text dynamically and check whether show details which is our internal state

08:09.230 --> 08:10.610
here is true.

08:10.610 --> 08:19.620
If that's the case then here I want to say height details otherwise I'll say show details.

08:19.620 --> 08:25.010
And now this text should switch dynamically as we show or hide our details.

08:25.070 --> 08:28.400
So if we ordered this one last time here we have a look at this.

08:28.400 --> 08:31.170
Now it's show details now its height details.

08:31.280 --> 08:34.700
Now it is really works in the way that it should work.

08:34.710 --> 08:41.630
Now it's all the place another order just to confirm that this really works if we order this here we

08:41.630 --> 08:48.000
go to the orders screen now you see that second order as well and you can control them independently.

08:48.080 --> 08:53.330
So this is the order screen and how we can output orders there and how we can even reuse the card item

08:53.330 --> 08:53.540
here.
