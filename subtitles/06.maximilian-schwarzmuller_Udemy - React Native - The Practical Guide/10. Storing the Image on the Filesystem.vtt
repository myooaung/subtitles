WEBVTT

00:02.090 --> 00:05.970
To a white that the image eventually gets removed.

00:06.140 --> 00:11.180
We need to store it in a more permanent POV on our local device filesystem.

00:11.180 --> 00:15.350
Of course we could also upload it to a server but we already talked about service and so on.

00:15.410 --> 00:21.970
Here I want to focus on all the native device capabilities now to work with our native file system.

00:22.100 --> 00:23.660
Expo has got us covered.

00:23.690 --> 00:26.180
We can use the file system package here.

00:26.270 --> 00:32.900
To do that you install it just like you install the other native packages with Expo install expos dash

00:32.900 --> 00:34.320
file dash system.

00:34.320 --> 00:41.030
So let's do that here your expo install again just a wrapper around NPM installed which you could alternatively

00:41.030 --> 00:41.470
use.

00:41.510 --> 00:48.950
Just need to make sure you're using the right words for your expo SDK wherein you're using and with

00:48.950 --> 00:52.980
that we have that installed.

00:53.010 --> 00:56.000
Now we can move the image after we took it.

00:56.010 --> 00:59.080
Now there are various places in the app where we could do that.

00:59.160 --> 01:04.080
We could do it in the image picker right after we took the image but at this point of time we don't

01:04.080 --> 01:09.720
know yet if we will actually submit the forum if we actually keep that image.

01:09.720 --> 01:15.330
So what if we just took a image here but then we discard this and we go back.

01:15.330 --> 01:20.460
I don't want to have the image moved to a permanent place in that case it should definitely be cleaned

01:20.460 --> 01:24.300
up and that's the default behavior so I don't want to move it.

01:24.300 --> 01:25.390
At this point yet.

01:25.740 --> 01:28.330
Instead I want to move it once we submitted the forum.

01:28.560 --> 01:32.610
Hence we could do it here in the new place screen and a safe place handler.

01:32.610 --> 01:38.280
But then we would add all this filesystem logic to this component which is possible but which adds a

01:38.280 --> 01:41.190
lot of logic into this component which I don't really want to have there.

01:41.190 --> 01:43.930
I want to keep this component relatively lean.

01:44.280 --> 01:47.640
A great place for this however is the action creator.

01:47.730 --> 01:53.220
We already used this in the past for having side effects like sending HP requests.

01:53.220 --> 01:58.680
Now moving a file is basically the same category of thing we're doing instead of sending a request to

01:58.680 --> 01:59.180
a server.

01:59.190 --> 02:00.200
We're moving a file.

02:00.200 --> 02:01.620
Well it's not that different.

02:03.390 --> 02:12.210
So therefore in this file here in the places actions J S file I'll import everything as file system

02:12.210 --> 02:19.500
from Expo file systems from this new package we installed and here at at place I'll now use this alternative

02:19.500 --> 02:26.970
syntax of dispatching or F of having action creator which utilizes redux thunk where we return our internal

02:26.970 --> 02:34.230
function here that receives the dispatch function as an argument so that in this internal function we

02:34.230 --> 02:44.970
can dispatch this action by calling dispatch here and passing our action object and I will add async

02:44.970 --> 02:50.670
here so that we can use async await because we're going to do some asynchronous work here in here.

02:50.670 --> 02:53.030
I now want to move the file right.

02:53.220 --> 02:58.980
So for that I want to use this file system package now moving the file actually involves a couple of

02:58.980 --> 03:00.060
things.

03:00.060 --> 03:05.160
First of all we need to derived a new path of the file and that should of course be a more permanent

03:05.160 --> 03:12.270
directory for Dad we can use file system and there you've got a couple of directories you can access.

03:12.270 --> 03:16.980
You've got the cache directory which is actually the directory where the file is already stored in out

03:16.980 --> 03:25.200
of the box the bundle directory which is not really a good directory for storing files your app uses

03:25.200 --> 03:28.080
either but you also got the document directory.

03:28.080 --> 03:34.140
This is the main directory for any files that your app needs which are guaranteed to survive.

03:34.140 --> 03:38.000
Now when you install your app this folder will all be erased.

03:38.010 --> 03:45.540
So then these files are lost but until then they will persist across app restarts across long pauses

03:45.540 --> 03:47.070
where people haven't used your app.

03:47.400 --> 03:49.470
So here the files will survive.

03:50.220 --> 03:55.620
So the file system document directory is the path I want to move my file to and now there's one important

03:55.620 --> 04:01.570
thing to know your path also needs to include the file name you want to use in the future.

04:01.710 --> 04:07.410
Of course you also get a temporary file name when you take the image but when you move a file this name

04:07.410 --> 04:14.570
is actually not kept out of the box instead it will assume this path here as a name so to say so therefore

04:14.570 --> 04:18.050
this should not just be a pointer at the folder you want to move to file to.

04:18.150 --> 04:20.990
It should instead also include the file name.

04:21.060 --> 04:24.530
Now for that I'm happy with keeping the order generated image name.

04:24.540 --> 04:31.220
Of course you could also now generate your own unique image names here but for that all derive the following

04:31.290 --> 04:33.560
from the image which I got here.

04:33.570 --> 04:38.120
Keep in mind that image here is a path the temporary path to the image.

04:38.160 --> 04:44.880
So here I'll actually use image which is a string and called split on this to split it by slashes because

04:44.880 --> 04:52.440
this path of course involves a couple of slashes in the end and split converts this string into an array

04:52.440 --> 04:58.620
of string segments where each segment is well a segment before and after such a slash in the string

04:59.040 --> 05:00.420
and thereby calling pop.

05:00.420 --> 05:01.850
I get the last segment.

05:01.860 --> 05:09.090
So what this code here does is it takes a look at our image path splits it by slashes which kind of

05:09.300 --> 05:13.140
makes up our full path there and by popping the lost element.

05:13.140 --> 05:15.830
Well what is the last element that is our file name.

05:15.870 --> 05:26.060
Right so if you have a path like some folder slash my image dot Todd Shea pack then what we do with

05:26.060 --> 05:34.880
split is we get an array with some folder and with my image structure pack and by calling Pop on this

05:35.180 --> 05:36.920
we get my image dots.

05:36.950 --> 05:39.250
J pack so that's what we get here.

05:40.590 --> 05:42.630
So this will return us our file name.

05:42.630 --> 05:49.300
This code snippet here and now we can append this here to our path by simply adding it like this.

05:49.320 --> 05:53.730
So now does generates a path which both includes a folder and then the file name.

05:53.730 --> 06:00.900
This is where I want to move to file two and now we can move it by accessing filesystem dot move async.

06:00.990 --> 06:04.130
That's a method which moves a file from a to b.

06:04.260 --> 06:09.540
And it also uses a promise because moving that follow can take a bit longer and therefore it will tell

06:09.540 --> 06:10.730
us when it's done.

06:11.750 --> 06:18.100
Now move async takes the object with two pieces of information from and two which is pretty straightforward

06:18.140 --> 06:19.010
I guess.

06:19.010 --> 06:25.070
So from his image because image is the path to the temporary directory so that's the from thing that's

06:25.070 --> 06:32.290
where the file currently sits and Q of course is our new path like this now is a set does returns a

06:32.290 --> 06:32.770
promise.

06:32.800 --> 06:36.420
So we can await this and that's it.

06:36.430 --> 06:41.200
Now we should wrap this into a try catch block because this could fail because for example there is

06:41.200 --> 06:48.090
no not enough space on the device or somehow we have a permissions error or anything else is wrong.

06:48.160 --> 06:55.690
So we definitely should try catch our filesystem actions because operations on the file system can always

06:55.690 --> 06:56.400
fail.

06:56.620 --> 06:59.520
And there we then might want to do something here.

06:59.530 --> 07:04.680
I'm logging the error and I'm read flowing it but of course you could do other things there as well

07:04.690 --> 07:09.310
you could kind of store it is on your own analytics server whatever you need to do.

07:09.610 --> 07:15.100
Now you ultimately might want to handle this in a component to to show an alert there or not do it but

07:15.100 --> 07:20.650
you would handle it in the same way as you do for example handle H to the p errors which is something

07:20.650 --> 07:22.160
I had a look at India.

07:22.200 --> 07:24.040
TTP module.

07:24.040 --> 07:28.980
So here we're assuming that this will mostly work or that this will always work.

07:29.050 --> 07:31.350
We're moving the file now.

07:31.420 --> 07:34.870
Once it was moved we know it'll be in the new path.

07:34.900 --> 07:41.140
So of course it's the new path which I now want to store here in my place.

07:41.140 --> 07:46.320
Data were in my redux store that's all nice.

07:46.330 --> 07:50.040
This should store our image in a permanent directory.

07:50.140 --> 07:56.110
But what we're not doing is we're not storing our data itself in a permanent place.

07:56.110 --> 08:01.510
We're of course using redux here and that means it's stored in memory but whenever we close and restart

08:01.510 --> 08:08.010
our app all our data will be lost because that's not stored on the device or on a server or in the database

08:08.010 --> 08:12.730
it's just in memory which is active as long as our app runs and thereafter that's cleared.

08:12.730 --> 08:19.630
So as a next step I want to show you how to use sequel light which is a on the wise database both available

08:19.630 --> 08:25.360
on ISIS and Android to store more than just files but to also store where our data like the title and

08:25.360 --> 08:26.800
the image path ends on.
