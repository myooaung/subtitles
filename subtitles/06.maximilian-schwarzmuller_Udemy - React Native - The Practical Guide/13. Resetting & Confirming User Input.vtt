WEBVTT

00:02.350 --> 00:06.760
So we spend some time on the input but handling user input is important.

00:06.760 --> 00:09.970
You want to do it in a way that feels natural to the user.

00:09.970 --> 00:11.470
That makes sense to the user.

00:11.590 --> 00:17.000
And where you'll never trust your user and you'll always validate what the user interests.

00:17.020 --> 00:19.750
And we'll dive deeper into this whole validation thing.

00:19.750 --> 00:24.760
User input handing things later in the course where we also accept more complex input than a simple

00:24.760 --> 00:25.520
number.

00:25.540 --> 00:31.030
But for now this was a great first look at how you can styles such a input and how you can make sure

00:31.210 --> 00:37.910
you get the data you need with that I don't know about you but I think it's time to also progressed

00:37.920 --> 00:40.710
with our game because we're kind of stuck here.

00:40.710 --> 00:45.600
These were all important steps but we're not really progressing with our game or with our app here.

00:45.600 --> 00:49.520
So let's make sure we do that as a next step and we're dead.

00:49.530 --> 00:56.690
Why don't we make sure that our buttons do something let's start with the reset button real quick because

00:56.690 --> 00:58.760
that will be a simple one when you press it.

00:58.790 --> 01:04.400
I of course simply want to reset the entered value so I'll register a new function up there in the start

01:04.410 --> 01:10.310
game screen component name it reset Input handler and that's just the naming convention I like name

01:10.310 --> 01:17.450
these functions which are triggered upon a user event something handler at the end just to make it clear

01:17.450 --> 01:19.840
that these handles certain events.

01:19.970 --> 01:26.210
It's not a must do just a preference I have for react apps in general and therefore all the We Act native

01:26.210 --> 01:27.040
apps.

01:27.260 --> 01:34.040
This will be a function which then calls set entered value which is our state setting function here

01:34.220 --> 01:39.370
to update the state we feed back into the input and set this to an empty string.

01:39.460 --> 01:46.690
And yeah with that we can connect this to the reset button here on Press should now simply execute.

01:46.700 --> 01:49.540
Do you reset Input handler like that.

01:49.700 --> 01:50.780
Let's give it a quick try.

01:50.780 --> 01:53.760
Let's enter something here reset and it's gone.

01:53.780 --> 01:55.110
That's looking good.

01:55.310 --> 01:57.440
And also make sure Dad.

01:57.470 --> 01:58.790
This button here to confirm.

01:58.790 --> 02:09.390
Button does something for Dad I'll add and no button confirm Input handler and we could simply start

02:09.420 --> 02:12.600
the game immediately here but all just a practice does.

02:12.600 --> 02:20.030
I want to give the user one final chance of changing his choice so here I just want to kind of output.

02:20.200 --> 02:21.090
This is your choice.

02:21.090 --> 02:27.050
Do you want to start message where then the user gets a button to start to game just the extra step.

02:27.360 --> 02:30.910
So we have some extra practice here for that.

02:30.930 --> 02:38.800
I'll add a new state which manages there has to user confirmed yet state and initially dead is false.

02:38.910 --> 02:43.020
But of course we can change this and we want to be able to get the current state.

02:43.020 --> 02:45.980
So here we get Weber to user has confirmed they're not.

02:45.990 --> 02:52.410
And we can set this conference state with that second element in the array we're extracting so down

02:52.410 --> 03:00.160
data and confirm Input handler I set confirm to true on the reset Input handler by the way I set this

03:00.160 --> 03:05.710
to false because the user clicks reset the user certainly hasn't confront the values so we should reset

03:05.710 --> 03:09.110
this at this year and to confirm Input handler.

03:09.160 --> 03:12.750
I also wanted to do two different things to other things.

03:12.880 --> 03:20.530
One is reset the entered value but all of course safety entered value as the value with which we would

03:20.530 --> 03:22.300
start the game.

03:22.390 --> 03:24.840
We can do that with yet another state.

03:24.880 --> 03:34.430
We're managing which initially holds nothing has no value is undefined initially because dad should

03:34.430 --> 03:40.370
be the selected number and dad should know all to really be a number and not some text.

03:40.910 --> 03:44.400
So here we have to select a number and a function to set it.

03:44.480 --> 03:51.560
And when the user clicked confirm before I reset my entered value though this year will all be batch

03:51.610 --> 03:57.290
together anyway so we can all do use the entered value here after setting it to an empty string because

03:57.470 --> 04:02.540
this will only be done in the next render cycle and not immediately after this line is executed.

04:02.540 --> 04:07.530
So we can still safely execute or access does entered value thereafter if you want to.

04:07.730 --> 04:17.930
Because here I want to set my entered value with parse and by passing the entered value so I set this

04:18.050 --> 04:19.300
to be my selected number.

04:19.340 --> 04:24.980
And again I can still access entered value here even though we reset it because this reset thing here

04:25.190 --> 04:30.740
will basically be queued by react and will only be processed the next time the component is rendered

04:30.740 --> 04:31.480
thereafter.

04:31.580 --> 04:38.660
And these free state changes are all batch to gather to result in one renderer cycle so we can safely

04:38.660 --> 04:42.850
access entered value here but we can also simply do it before we reset it.

04:42.860 --> 04:44.200
It does not matter.

04:44.210 --> 04:49.520
The important thing is however that we past does as a integer so that we convert this text to a number

04:49.520 --> 04:57.050
here and actually I'll add yet another extra step before I do that right at the beginning.

04:57.140 --> 05:00.410
I'll have my chosen number here which is the past number.

05:00.410 --> 05:08.660
And before I do anything I want to check if chosen number is not a number which is a default javascript

05:08.660 --> 05:09.110
value.

05:09.110 --> 05:16.550
So if it somehow is still not a number even though we're trying to check for invalid characters or if

05:16.550 --> 05:20.730
chosen number is smaller or equal to zero.

05:21.200 --> 05:24.140
If it is then I just want to return.

05:24.140 --> 05:25.430
I don't want to continue.

05:25.460 --> 05:31.580
So return will finish the function execution and will not confirm will not use this as a value because

05:31.850 --> 05:33.710
the value is invalid.

05:33.830 --> 05:39.010
Only positive numbers are allowed and no invalid numbers are allowed.

05:39.020 --> 05:46.340
In addition I also want to add one extra check and check if the chosen number maybe is greater than

05:46.350 --> 05:48.770
99 because that would also not be allowed.

05:48.770 --> 05:56.600
I want to have a number between 1 and 99 and it should be a number if it's not fitting that criteria

05:56.840 --> 06:03.740
then will return now otherwise we'll set this chosen number as the selected number and then resets the

06:03.740 --> 06:09.440
input and then D Free set state calls will be batch together and the component will re render and we'll

06:09.440 --> 06:17.790
have our new state that has this number taken into account as the selected number so now we can connect

06:17.790 --> 06:23.700
you confirm input handler to the confirm button here and now some visual feedback would all be nice

06:23.700 --> 06:32.220
to see that confirming worked or to also get an error or if we violated one of these rules here so that

06:32.220 --> 06:34.440
we don't just return but also show an alert.

06:35.320 --> 06:41.870
Now let's maybe start with the feedback before we then work on the alert for the feedback.

06:42.650 --> 06:51.710
Here below dysfunction but inside of our functional component I want to check if we have confirmed and

06:51.710 --> 06:54.990
then set some special content that should be output.

06:55.010 --> 06:58.900
So here we have the confirmed output which normally is just undefined.

06:58.970 --> 07:07.340
But if we have confirmed then confirmed output is some J is X code where we kind of summarize what the

07:07.340 --> 07:11.330
user entered and give the user a d start game button.

07:11.330 --> 07:18.990
Now just to see where it works let's go that with some text here and just say chosen number and output

07:19.020 --> 07:22.470
these selected number here selected number.

07:22.470 --> 07:25.700
This is our estate we're managing here.

07:25.770 --> 07:32.100
So since we call set confirmed it's on the component will re render Windows is chosen.

07:32.100 --> 07:38.010
So this whole component function will execute again and that means that confirmed will then be true

07:38.040 --> 07:43.470
for this next run because we set it to true here and therefore will set confirmed output to be that

07:43.500 --> 07:44.310
text.

07:44.310 --> 07:51.820
And now we can add the confirmed output let's say here below our cart.

07:51.820 --> 07:57.340
So there I want to output two confirmed output and that's even undefined not printing anything to the

07:57.340 --> 07:57.940
screen.

07:58.060 --> 08:05.900
Or it's this text with that saved if we go back back and I enter number and confirm it here we see the

08:05.900 --> 08:06.410
number.

08:06.950 --> 08:10.210
If I enter something invalid like zero we don't see it.

08:10.250 --> 08:15.360
So our check seems to work and a valid number is output though.

08:15.400 --> 08:19.200
Now that's not the final design I want to have but that proves that it works.

08:19.390 --> 08:26.170
Before we finalize this to sign let's make sure that we also show an alert if something invalid is entered.
