WEBVTT

00:02.530 --> 00:05.110
So how else can we optimize this.

00:05.110 --> 00:11.350
Well you might notice that this J has X code here in yen can be repeated over and over again every input

00:11.360 --> 00:12.590
looks like this.

00:12.640 --> 00:18.130
We have a view where the label with text input itself and we might also want some error text which we

00:18.130 --> 00:19.140
can display.

00:19.270 --> 00:22.900
So it would make sense to outsource this into a separate component.

00:22.990 --> 00:25.370
And that's exactly what I want to do.

00:25.480 --> 00:32.230
I'll go to my components folder and there in the UI folder I'll add a input J.S. file which will hold

00:32.230 --> 00:38.410
a react component so I import react from react of course and then import a couple of things from React

00:38.410 --> 00:45.460
Native and these things in the end are my view text component to text input component and the style

00:45.460 --> 00:54.210
sheet because I'll need this as well from Raich native with that here we can create de input component

00:54.210 --> 01:01.410
here which gets props and needs to return some J JS X we'll have a styles object with style sheets create

01:02.780 --> 01:08.230
and of course in the end we export this as a default here this component.

01:08.340 --> 01:18.420
Now if we go back to the edit product screen we can cut this title J is X code so the surrounding view

01:18.440 --> 01:23.890
the text the text input enters error message part cut it out of here out of the edit product screen

01:24.250 --> 01:32.700
and move that into the input screen and there use it as a return value in the input component here.

01:32.740 --> 01:37.210
Now of course we'll need to adjust as a little bit but that's our general skeleton which I want to use

01:37.210 --> 01:37.720
there.

01:37.960 --> 01:42.720
Now also from the edit product screen I'll take the styling there.

01:42.770 --> 01:49.270
This form control label and input styling can all be removed and should be moved over into the input

01:49.270 --> 01:55.440
component and they're into the style sheet.

01:55.460 --> 02:00.740
So now with that of course this only can be used for a title and I want to create a input component

02:00.740 --> 02:07.580
which can be used for any input debt for example means that the label here needs to be dynamic.

02:07.710 --> 02:10.830
So I'll expect to get this on a prop named label maybe

02:13.740 --> 02:18.420
I also in general want to make sure that the text input can be configured from outside.

02:18.420 --> 02:25.800
So I will forward all props I get on my input component here to the text input so that on this input

02:25.800 --> 02:31.060
component we'll be able to set things like the keyboard type because I don't want to hard code does

02:31.070 --> 02:31.570
in here.

02:31.570 --> 02:36.720
Instead this should be a reusable wrapper around the text input component which can be configured from

02:36.720 --> 02:37.570
outside.

02:37.800 --> 02:43.990
So these settings here for example I will cut them from here so that we can set them from outside.

02:44.010 --> 02:46.530
I'll also get rid of these listeners because we don't really need them

02:52.130 --> 02:57.230
the error text here should all be sellable from outside so we'll check for props.

02:57.230 --> 02:58.640
Error or text here.

02:58.640 --> 03:02.720
And of course you can as always give these props any names you want.

03:02.720 --> 03:07.570
Of course we'll all have to change what we assign here as a value and so on.

03:07.570 --> 03:08.800
That will also change.

03:09.350 --> 03:11.720
But now we can already start using that input here.

03:11.720 --> 03:23.200
Let's go to the edit product screen and dear I will just go to the top and import input from the components

03:23.200 --> 03:27.210
folder of course and there from the UI folder and there from input.

03:27.550 --> 03:32.770
And then we can start using the input component in the place where it previously had my text input component

03:32.770 --> 03:33.910
here.

03:34.000 --> 03:40.510
So there I will just add input and now on input we can add to setting which I cut like the keyboard

03:40.510 --> 03:43.000
type and so on because it will be forwarded.

03:43.180 --> 03:50.950
We can set our tile label like title and alter our possible error a text like Please enter a valid title

03:51.550 --> 03:55.470
though that's not all we'll do regarding validation but it's a start.

03:55.510 --> 03:57.250
This is how we can then use this input.

03:59.130 --> 04:02.970
And of course is also how we can now use it to replace the other inputs.

04:02.970 --> 04:11.400
So for example here the image your l here I set this to image your l Please enter a valid image you

04:11.400 --> 04:17.910
are L maybe keyboard type T fold it's okay auto capitalization auto correction is not required return

04:17.910 --> 04:18.480
key type.

04:18.480 --> 04:23.070
Next we can leave fled we're not doing anything with it we could add some logic but I'm not doing it

04:23.070 --> 04:29.990
here for the prize I'll leave de conditional rendering but in there I can add my input here

04:33.510 --> 04:42.300
set this to prize Please enter a valid prize keyboard type here should of course not be default but

04:42.330 --> 04:49.380
decimal Pat don't need auto capitalization on auto correction so let's get rid of that inverted description

04:49.380 --> 04:58.740
here I'll also add my input here description please enter a valid description keyboard type can be default

04:58.980 --> 05:05.700
I can use auto capitalization auto correction however I'll not set a return key type but here I want

05:05.700 --> 05:14.330
to set multi line just like this which allows for multi-level editing and set number of lines to let's

05:14.330 --> 05:15.830
say free.

05:15.830 --> 05:20.630
This however is only used by Android but data it will restrict the number of lines you can enter when

05:20.630 --> 05:25.580
I Westerners will not have an effect but this is how you can use this input component and still configure

05:25.580 --> 05:27.470
it from outside.

05:27.470 --> 05:30.240
That being said as I said we're not done though.

05:30.260 --> 05:35.710
What about the value end does change text listener.

05:35.840 --> 05:42.030
There are different ways of how you could handle this text input or the text values here.

05:42.050 --> 05:47.960
You could still simply forward it to the parent component and only used as input component as a visual

05:48.080 --> 05:49.020
wrapper.

05:49.310 --> 05:55.850
But I will take it a bit further and I want to manage this value and the validity of this single input

05:56.180 --> 05:58.460
inside of the input component.

05:58.460 --> 06:05.280
So today then only reports back to my parent component so to the added product screen in the end what

06:05.280 --> 06:07.900
the current value is and whether it's valid or not.

06:07.940 --> 06:11.980
So that validation doesn't need to happen instead of the parent component.

06:12.170 --> 06:17.480
But again dad is totally up to you whether you want to do that or not here.

06:17.480 --> 06:25.520
I will add a new constant in the input component text change handler where I get this enter text because

06:25.550 --> 06:31.400
that's now what I bind or what is already bound and I will generally keep it like this though we don't

06:31.400 --> 06:33.380
need the identifier here anymore.

06:33.620 --> 06:39.560
Don't need blind therefore because well this is inside of a single input we don't need an identifier

06:39.560 --> 06:40.810
there.

06:40.880 --> 06:44.150
This will Naledi for trigger on every keystroke and hence.

06:44.150 --> 06:56.140
Now here I want to check whether this is valid or not and also manage my value off that input now for

06:56.140 --> 07:02.270
that we can again use a reducer or individual states managed with using state or created with you state

07:02.300 --> 07:03.920
but all go for a road user.

07:04.090 --> 07:12.300
And here I have my input reducer name is up to you gets the state gets action and returns and you state

07:12.300 --> 07:13.110
in the end.

07:13.440 --> 07:20.390
Then here into the input I can call use reducer and forward or set this to the input reducer.

07:20.550 --> 07:28.200
In my initial state for as input here will be a simple javascript object with free values the value

07:28.260 --> 07:34.470
which you currently have which initially can be empty but actually I want to allow myself to set an

07:34.470 --> 07:37.230
initial value from outside because we will need this.

07:37.260 --> 07:41.570
For example when we're editing products so I check Weber props.

07:41.610 --> 07:43.700
Initial value is set.

07:43.700 --> 07:46.980
Again this is of course a name you can choose however you want.

07:46.980 --> 07:49.220
And if this is the case I'll set this to props.

07:49.230 --> 07:50.040
Initial value.

07:50.130 --> 07:53.460
Otherwise I'll set out to set this to an empty string.

07:53.460 --> 08:03.600
Then I will all manage whether it is valid or not and there again I can check if props initially valid

08:03.630 --> 08:05.160
let's say is set.

08:05.160 --> 08:08.780
If that's the case then I will automatically take that value which should be true or false.

08:08.790 --> 08:11.750
If it's not the case this will automatically be treated as false.

08:13.420 --> 08:16.440
And I will also manage where it is has been touched yet or not.

08:16.450 --> 08:23.170
So whether the user did actually type here and this can be useful for helping us with providing a better

08:23.260 --> 08:26.850
user experience regarding when we show validation errors.

08:27.100 --> 08:33.760
And here I will set this to fault initially.

08:33.780 --> 08:40.260
Now of course this will return us the input state snapshot and a dispatch function which I here can

08:40.260 --> 08:46.920
alter named dispatch because we will have no name clash and the text change handler of course I will

08:46.920 --> 08:54.420
dispatch an action action which I therefore will create here with the action identifier input change

08:54.420 --> 09:00.040
for example that should be dispatched here.

09:00.040 --> 09:08.930
Type input change and then here India reducer we can add a switch statement to mix things up check the

09:08.960 --> 09:16.150
action type and for the case input change we want to do something in the default case I will just return

09:16.190 --> 09:22.400
my state so we'll not do anything but here of course I want to do something else.

09:22.630 --> 09:27.730
Now here in the text change handler obviously I dispatch input change and I want to forward the value

09:27.760 --> 09:29.320
which has store now value key.

09:29.410 --> 09:35.320
But now here I also want to do input specific validation and forward to information whenever the input

09:35.350 --> 09:39.550
is valid or not and for it is attached.

09:39.570 --> 09:45.040
You find some validation setup or some validation code which I'll now walk you through.

09:45.210 --> 09:50.760
Here I have a constant that sets up by email regular expressions so a regular expression that allows

09:50.760 --> 09:52.710
us to validate email addresses.

09:52.710 --> 09:58.290
We have no email address input yet but later when we add authentication we will have that and then I

09:58.290 --> 10:00.670
want to be able to use this input component.

10:00.780 --> 10:04.580
So then this component should be prepared to also validate emails.

10:04.740 --> 10:10.140
Then I have to is valid helper variable here because then we have a bunch of checks here.

10:10.140 --> 10:16.610
Now I want to make sure that we can set the criteria we want to use from outside with the help of props.

10:16.620 --> 10:21.030
So for example I'd check if a required props is set if that's set to true.

10:21.030 --> 10:26.610
So if it's set at all and if that is the case then this check will be performed if the required prop

10:26.610 --> 10:31.620
is not set does check will not be performed and therefore this validation is not performed and that's

10:31.620 --> 10:33.870
the case for all my different validations here.

10:34.080 --> 10:40.180
So we can set the required prop to check whether it's not empty if it is empty we said is valid to false.

10:40.440 --> 10:46.140
We can set up email a prop on the input component to validated for being a valid email address.

10:46.320 --> 10:48.330
If it's not we set it to false.

10:48.450 --> 10:55.260
We can check a number for being too small or too big or a string for being too short with the min length

10:55.260 --> 10:56.070
validator.

10:56.070 --> 11:01.950
And of course you could add more logic here possibly of that with a package like validate JSA which

11:01.950 --> 11:09.800
I already mentioned earlier now with that I will have is valid in the end which is true by default but

11:09.940 --> 11:16.520
falls as soon as one validation fails and therefore now we can add is valid to this dispatched action

11:16.520 --> 11:17.060
as well.
