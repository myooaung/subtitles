WEBVTT

00:02.470 --> 00:09.580
Let's replace the categories dummy screen content here with a grade of categories because that's the

00:09.580 --> 00:13.090
idea behind this screen after all now.

00:13.090 --> 00:18.140
For that we can use a component we used before and that's the flat list.

00:18.160 --> 00:20.980
Thus far we use that for normal lists.

00:20.980 --> 00:25.490
You can actually also render grids with it and that's exactly what we'll do here.

00:25.730 --> 00:34.960
And for that in this category screen all replace everything with flat list here and only output my flat

00:34.960 --> 00:35.530
list.

00:35.530 --> 00:42.520
Here in this screen which I return in the end and I will set num columns here which is a new property

00:42.520 --> 00:47.950
we haven't seen before 2 2 and this defines how many columns we want if the default is 1 which is a

00:47.950 --> 00:53.610
normal list but you can't have more than one column in there and this gives you a grid effectively.

00:53.620 --> 00:55.080
Now with that we could render a grid.

00:55.090 --> 00:57.070
But of course we need some data for that.

00:57.070 --> 00:59.340
Otherwise it's still hard to render a grid.

00:59.350 --> 00:59.640
Right.

01:00.590 --> 01:06.290
For that I'll add a new folder which are named data and in there I'll add a dummy dash data dot jazz

01:06.290 --> 01:10.040
file because in the end it is just some dummy data which I'm supplying here.

01:10.040 --> 01:16.740
We're not loading this from a server or anything like that right now just loaded like this instead.

01:16.920 --> 01:23.340
I want to have a bunch of categories in there and 4D I'll add yet another folder which I name models

01:23.520 --> 01:29.550
which is in the end of folder where I want to define how my data is shaped in this app how it looks

01:29.550 --> 01:30.440
like.

01:30.450 --> 01:36.810
So there we can add a category dot J.S. file for example and in this fall all I want to have is a class

01:36.840 --> 01:43.920
which I'll name category and classes are default javascript features and modern javascript which I export

01:44.040 --> 01:52.800
and dare I will simply define how a Category object in my application should look like so that we basically

01:52.920 --> 01:59.110
have an easier way of creating these objects in well without mis typing and so on.

01:59.130 --> 02:05.670
So here this Category class will take a constructor and you can use this constructor which is a default

02:05.700 --> 02:06.610
method you can ask.

02:06.630 --> 02:11.790
You can add to any class in javascript to initialize an object based on this class.

02:12.000 --> 02:16.350
You do this by expecting some arguments here in the constructor and for a category I want to get an

02:16.350 --> 02:22.200
idea for the category a title and a color which I'll use as a background color in the grid for this

02:22.200 --> 02:23.880
grid item for this category.

02:24.060 --> 02:29.460
And I we'll store all this data in properties with the help of the this keyword in case this is totally

02:29.460 --> 02:35.670
brand new to you definitely dive into some javascript courses or resources first because this has nothing

02:35.670 --> 02:38.550
to do with react navigation or with React Native.

02:38.580 --> 02:42.470
This is vanilla modern javascript.

02:42.480 --> 02:44.470
Now why did I create this.

02:44.490 --> 02:52.650
Because now I can import my category class from the models folder from the category just fall into the

02:52.650 --> 02:56.460
dummy data file and then use this to create some dummy data.

02:56.460 --> 03:04.650
Now you find that dummy data attached attached you find JavaScript file with these dummy categories

03:04.860 --> 03:09.070
which I store in a constant which had then export as a named export here.

03:09.240 --> 03:14.200
This is some dummy category data for two categories in this app this.

03:14.520 --> 03:19.290
These categories I want to have in this app These are the categories I will use in this app and these

03:19.290 --> 03:25.590
are the categories we can now therefore use instead of our screens in the categories screen to be precise

03:26.540 --> 03:37.110
so in their I want to add import and import category as from data dummy data.

03:37.120 --> 03:40.640
So that's importing that named constant we're exporting there.

03:40.660 --> 03:44.020
Now this is an array of JavaScript objects in the end right.

03:44.050 --> 03:45.610
That's what we stored in there.

03:45.640 --> 03:51.850
It's just an array of JavaScript objects which you can now use to render our list or to be precise our

03:51.850 --> 03:53.090
grid here.

03:53.170 --> 04:01.240
So data for this flat list is simply my categories arrays all just point at categories.

04:01.240 --> 04:08.510
And of course we now also need render item to define how a single great item should be rendered which

04:08.510 --> 04:15.380
component should be rendered their for this I'll add a new function here render grid item which is a

04:15.380 --> 04:22.580
function that will receive some item data in the end here and that should return J as X element should

04:22.580 --> 04:25.460
return some react component here.

04:25.460 --> 04:33.950
And I will point at render grid item heater now in there all render of view and to keep things simple

04:33.950 --> 04:39.380
for now it is will be a view with a text in there and then that text I want to render item data dot

04:39.500 --> 04:40.160
item.

04:40.160 --> 04:42.400
That's what we have a way to blow on a flat list.

04:42.410 --> 04:48.250
If you remember early on modules the item data object here has a hot has an item property react made

04:48.250 --> 04:55.520
of flat list gives you decide and property and then there will have title property because the item

04:55.520 --> 05:01.940
we're getting here is just a category we're getting from our data we're feeding into the flat list so

05:01.970 --> 05:05.490
we'll have such a javascript object as item there.

05:05.630 --> 05:12.000
And this javascript object is based on our model here and there we set up a title a color and a deep

05:12.040 --> 05:12.820
property.

05:12.980 --> 05:19.160
Hence we have a title property hence we can extract the title here like this we'll use to color later

05:20.250 --> 05:22.010
so that's the first thing.

05:22.080 --> 05:26.850
This should work now in New wordings of React Native.

05:26.850 --> 05:35.340
You also don't need to inform React Native bed your I.D. is not named key but is actually named I.D.

05:35.400 --> 05:42.270
because newer versions of React Native accept I.D. as an I.D. on list data as well.

05:42.270 --> 05:48.300
If you would follow along in a older version you would need to add a key extractor here which is a function

05:48.630 --> 05:54.660
that gets D item in the index and needs to return the value that should be used as a key.

05:54.720 --> 05:56.980
So in this case that would be item dot I.D..

05:57.030 --> 06:03.030
Again newer versions of React Native don't need this but just for reference and for older versions I'll

06:03.030 --> 06:05.150
still at this here.

06:05.160 --> 06:08.610
So now we return our flat list here with our data.

06:08.610 --> 06:11.930
If we now save this we should already see our data here.

06:11.940 --> 06:15.320
Of course not really that beautiful but a grid.

06:15.330 --> 06:16.960
We have Italian next to it.

06:17.040 --> 06:20.000
Quick and Easy hamburgers next to a German.

06:20.130 --> 06:23.690
It just doesn't look like a grid but it technically is.

06:24.030 --> 06:32.250
Now to make it look a bit more like grid we of course need to add more styling now to change that styling

06:32.250 --> 06:33.080
a little bit.

06:33.090 --> 06:40.830
We can go to our grid items here to single grid item and add to stall bra prop here and add a grid item

06:40.830 --> 06:42.620
stall or whatever you want to name it.

06:43.430 --> 06:50.700
And then down later I'll add grid item to mall style sheet and give this property of flex want to take

06:50.700 --> 06:52.250
as much space as it can get.

06:53.390 --> 06:57.530
Safeties now it just looks already a bit more like a grid.

06:57.530 --> 07:00.640
Now some margin around each item would also be nice of your dad.

07:00.650 --> 07:08.450
We can just add margin and maybe add 15 as a margin around each item so that we have more spacing in

07:08.450 --> 07:10.070
all directions.

07:10.070 --> 07:12.500
And with that it's not too bad.

07:12.500 --> 07:18.080
Of course we can also change the general look and for example give each item a height of let's say one

07:18.080 --> 07:24.230
hundred and fifty and it's totally up to you which values should choose their but I'd say with that

07:24.230 --> 07:25.610
it's quite nice.

07:25.610 --> 07:26.400
Great.

07:26.450 --> 07:31.310
Certainly doesn't win a style award yet but we're going in the right direction.

07:32.920 --> 07:38.830
Now before we finished the styling of this and we definitely have some work left to do for that let's

07:38.830 --> 07:44.950
make sure that we can tap these items and we then go to the detail screen for debt specific item again

07:45.090 --> 07:50.770
let's stay deal for all we'll see how we can actually set a title in the header so did we have a better

07:50.770 --> 07:52.780
idea of where we're currently at.
