WEBVTT

00:02.510 --> 00:05.510
So we added this auto sign in functionality here

00:05.540 --> 00:10.850
and with that, we can automatically sign the user in if we have a token in async storage

00:10.880 --> 00:15.200
and if we don't have a token in the redux store then this is relevant,

00:15.200 --> 00:22.670
however what if our token expired? We have this expiry time of one hour which I mentioned and this of course

00:22.670 --> 00:29.870
can be a big problem because it means that we might sign the user in so allow access to some of our

00:29.870 --> 00:36.170
screens which will actually send a token to the backend without a valid token because there will be

00:36.170 --> 00:38.010
a token but it expired.

00:38.210 --> 00:44.600
We can still send requests to the backend but there, we will get back an error because the token,

00:44.600 --> 00:50.210
keep in mind is always verified on the server and there, it will fail if it's invalid, if it expired,

00:50.300 --> 00:53.440
the server will check this and will deny access,

00:53.450 --> 00:59.450
this is a very unpleasant user experience and in our app, we wouldn't even show the login screen because

00:59.450 --> 01:04.090
we have the token in storage, so that is something we definitely don't want to end up in.

01:04.130 --> 01:08.120
So we need to take this expiry time into account

01:09.380 --> 01:14.740
and of course that is relevant when we store the token in async storage,

01:14.780 --> 01:19.760
we should also store the time when it expires at this point of time. For that,

01:19.760 --> 01:26.580
let's not only pass the ID token to auth store token but also parsed response

01:26.780 --> 01:35.050
and then it was expiresIn, this was the key under which we can get the time in seconds.

01:35.060 --> 01:41.060
Now as I said, 3600 seconds is the default by firebase, you can't change that,

01:41.060 --> 01:42.610
now we want to use this here,

01:42.680 --> 01:46.220
so in auth store token, we no longer get just the token,

01:46.220 --> 01:54.750
we also get the expiry time here or let's name it expiresIn here too. Now I want to use that information

01:54.770 --> 02:02.330
and of course storing that time does make absolutely no sense because that is still always just 3600

02:02.330 --> 02:04.940
seconds no matter how many have passed,

02:04.940 --> 02:09.770
so instead we need to find out when this is, so when it will expire.

02:09.770 --> 02:14.630
So let's for this get now which is just new date,

02:14.630 --> 02:17.820
this gives us the current date and we can use this in react native

02:18.320 --> 02:24.850
and then the expiry date is simply now plus,

02:25.040 --> 02:29.180
now here, this would be the date object,

02:29.180 --> 02:35.930
I need to get the time though which will be in milliseconds and now I add this one hour, so I add expiresIn,

02:35.930 --> 02:38.150
this however is in seconds

02:38.240 --> 02:44.240
so I multiply this with 1000 to have it in milliseconds and now we have the expiry date.

02:44.240 --> 02:55.580
Now I'll add a console log and output the current date and also new date and pass expiry date because

02:55.580 --> 03:00.440
that is a date in millisecond format, this converts it into a readable date.

03:00.440 --> 03:05.300
Now of course our application can't be reloaded because we're already logged in so we never run this

03:05.300 --> 03:06.340
code,

03:06.350 --> 03:08.420
so what I'll do is I'll simply uninstall the app

03:08.430 --> 03:10.050
here on the simulator

03:11.470 --> 03:15.220
and then rerun npm run ios to rebuild it and reinstall it.

03:15.220 --> 03:21.310
Now if you don't want to repeat this for every change, you can temporarily comment out this storage code

03:21.310 --> 03:24.360
here so that you don't have to reload it all the time,

03:24.400 --> 03:26.140
I'll go with this approach.

03:26.170 --> 03:28.600
Now make sure to attach this to the debugger,

03:28.600 --> 03:37.360
this new app here which you installed and then let's simply login and scroll up and there you now see the

03:37.360 --> 03:39.110
object get back from the backend

03:39.130 --> 03:46.850
but there, you also see the current date and then the expiry date which as you can see is one hour after

03:46.870 --> 03:48.220
the current date.

03:48.220 --> 03:49.940
And this is exactly what I want,

03:49.940 --> 03:51.580
this is exactly what I need,

03:51.760 --> 03:57.410
with that we get the logic to store the expiry date too.

03:57.460 --> 04:03.530
So let's also store that in the async storage, I set another item related to auth

04:03.760 --> 04:10.850
and that is the expiry date or expiration date, whatever you want to call it

04:10.940 --> 04:14.620
and there I will store my expiry date.

04:14.620 --> 04:20.170
Now the interesting thing will be to always check that expiry date when we try to automatically log

04:20.170 --> 04:27.370
the user in or when we get this token to be precise, here we get the token and we clearly want to reject

04:27.370 --> 04:30.540
if we don't have a token, however

04:30.630 --> 04:32.820
so this check here is always important,

04:32.890 --> 04:37.950
however if we do have a token here, we're still not safe, here I then

04:37.960 --> 04:41.510
also want to check if that token is still valid.

04:41.800 --> 04:44.710
So here I will access async storage again,

04:46.900 --> 04:54.270
call get item and get ap auth and then it was expiry date,

04:54.280 --> 05:02.040
so essentially the key we added up here. Now I will return this check here to not to create an unnecessarily

05:02.040 --> 05:07.960
deep nested promise chain here and instead add another then call which will be executed,

05:08.250 --> 05:14.310
also add a catch block where we get an error and simply reject if we do get an error. In the then block

05:14.310 --> 05:17.750
however, we get the expiry date,

05:18.760 --> 05:26.240
there I theoretically want to set the token in my redux storage, in my redux store

05:26.330 --> 05:31.030
but before I do this, I will have to check if expiry date is actually in the future.

05:31.520 --> 05:40.400
So I will create a parsed expiry date because what I get out of my async storage will be a string,

05:40.590 --> 05:44.920
so here I will call date parse and parse the expiry date

05:44.940 --> 05:45.970
I get here,

05:46.010 --> 05:50.300
so I parse the string into a real date and then I will also get

05:50.300 --> 05:57.940
now new date and I will check if the expiry date is greater than the current date,

05:58.070 --> 06:05.660
so if the parsed expiry date is greater than now. If that's the case then we know the token is still valid

06:05.690 --> 06:08.000
because the expiry date lies in the future,

06:08.000 --> 06:12.560
so now I can dispatch auth set token and resolve token from storage,

06:12.860 --> 06:19.070
otherwise if that's not the case, I'll reject here because then the token is not valid,

06:19.190 --> 06:22.890
you might have a token but it is expired.

06:23.030 --> 06:29.120
Now there is one other case where we also want to reject or to be precise, there's only one case where we want

06:29.120 --> 06:34.300
to continue, the parsed expiry date has to be greater than now,

06:34.360 --> 06:41.530
this will also fail if it is null and expiry date can be null if we don't find it because keep in mind,

06:41.950 --> 06:49.150
the catch block here is simply triggered if we have issues during accessing the storage, not if we don't

06:49.150 --> 06:50.250
find this,

06:50.320 --> 06:56.500
so if we don't find this, expiry date here will be null, parsed expiry date then will be not a number,

06:56.500 --> 06:57.670
therefore this will fail

06:57.670 --> 07:03.130
so we're safe in this condition too which we can prove by simply reloading

07:03.350 --> 07:04.040
the app.

07:04.510 --> 07:10.960
It fails because we never stored an expiry date because we added this code after we already had a date

07:11.020 --> 07:12.560
in the storage.

07:12.580 --> 07:21.780
So with that, let's now try logging in here and submit this and we get an error that NSNumber cannot

07:21.780 --> 07:24.300
be converted to NSString.

07:24.300 --> 07:30.870
Now we get this error because we try to store the token, excuse me, the date like this,

07:30.900 --> 07:36.770
the date is a number object though and async storage only accepts strings.

07:37.140 --> 07:43.950
So what we can do is we can simply call toString, just like that, to really turn this into a string before

07:43.950 --> 07:45.570
trying to save it.

07:45.570 --> 07:52.200
So now if we reload the application and try this again with the updated code saved of course,

07:55.310 --> 07:56.700
now we're logged in

07:56.870 --> 08:00.430
and now if I reload it, it still fails,

08:00.570 --> 08:07.030
so why? It fails because in the then block where we get the expiry date, date

08:07.030 --> 08:11.100
parse would only work if we had stored a date string,

08:11.100 --> 08:12.630
that's a tiny mistake though,

08:12.750 --> 08:16.470
what we store is the expiry date in this millisecond format right,

08:16.470 --> 08:19.340
we never turn it into a date object.

08:19.390 --> 08:25.230
We could do that but we can also simply replace date parse with new date to take that amount in

08:25.230 --> 08:27.810
milliseconds and construct the new date from it,

08:27.810 --> 08:32.440
then however we have to turn expiry date which will be a string into a number

08:32.630 --> 08:38.770
and that of course can be done with the parseInt function

08:38.820 --> 08:40.490
we can simply use here.

08:40.740 --> 08:47.670
So now if we wrap expiry date with parseInt and use new date here, if we now reload the application, then it

08:47.670 --> 08:48.870
still doesn't load

08:49.050 --> 08:53.490
but that's simply due to the reason that we dispatch token from storage,

08:53.730 --> 08:56.760
well we don't have that in here right, we're in a different then block.

08:57.000 --> 09:04.770
So we can use the same solution we used earlier, here I create a variable, maybe fetched token and then

09:04.770 --> 09:12.570
here when we get token from storage, we set fetched token equal to token from storage and then we can use

09:12.570 --> 09:15.570
the fetch token in the other then block here.

09:15.680 --> 09:21.960
And with this finally if we reload everything, we're redirected, let's also see if find places worked,

09:21.990 --> 09:26.120
yes it did, we would have gotten an error earlier otherwise.

09:26.430 --> 09:34.480
Now to quickly debug that, let's temporarily override our logic where we set it to expiresIn

09:34.500 --> 09:36.360
times 1000

09:36.720 --> 09:48.930
and let's instead set it to 60 times 1000, so to one minute instead of one hour. Now or maybe even just 20

09:49.020 --> 09:56.340
to have a short waiting period, then I will uninstall this application to clear the async storage again

09:56.700 --> 09:59.080
and I will rebuild the app of course

09:59.300 --> 10:06.380
and now I just want to check if the first time I tried, the login succeeds because I'm within that 20 second

10:06.380 --> 10:07.050
period

10:08.110 --> 10:12.770
but the second time after 20 seconds, it shouldn't succeed anymore.

10:12.800 --> 10:18.240
So let me quickly sign in here,

10:18.350 --> 10:25.970
now we got 20 seconds ticking so if I reload this, I'm also taken back here and I can reload it like this,

10:26.090 --> 10:31.640
I also should be able to clear it and reload it like this

10:31.820 --> 10:37.740
but now after 20 seconds are gone and passed by which should be the case soon,

10:40.340 --> 10:44.030
now I just make it to the login screen because it expired.

10:44.030 --> 10:45.530
So that's working as it should,

10:45.530 --> 10:46.440
really great.

10:46.700 --> 10:49.100
Let's revert this to expiresIn now.
