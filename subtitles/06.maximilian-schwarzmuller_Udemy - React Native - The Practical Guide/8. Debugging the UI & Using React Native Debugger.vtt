WEBVTT

00:02.240 --> 00:09.740
Now there also is one thing in that developer overlay you can open which is extremely helpful for debugging

00:09.740 --> 00:11.030
your user interface.

00:11.030 --> 00:17.780
And that's the toggle Inspector option to toggle this you'll see does overlay at the bottom here.

00:17.780 --> 00:22.710
And now you can click onto items in your user interface to get information about them.

00:22.730 --> 00:24.260
For example here A button.

00:24.260 --> 00:29.990
Now you see the margin around the button the padding you see its position in the component componentry

00:30.440 --> 00:35.130
you see some configuration of the button and you can all have a look at the surroundings and therefore

00:35.130 --> 00:38.780
you get a feeling for why things are laid out on the screen.

00:38.900 --> 00:45.200
They are you can always close this again by opening the developer overlay and then again clicking toggle

00:45.200 --> 00:51.410
inspector and of course that's also a way lable here on ISIS where you can also get a feeling for how

00:51.410 --> 00:56.180
things are positioned and why they are positioned in that way.

00:56.180 --> 01:02.670
However there is a even better tool for inspecting this data for all closed doors here and that's to

01:02.690 --> 01:04.800
react native debugger.

01:05.060 --> 01:10.580
You can search for React Native debugger and you should find this github page here.

01:10.580 --> 01:18.280
And on this page you can download do you react native debugger you find installation instructions here

01:18.780 --> 01:21.070
and you can simply go to the release page and the end

01:24.380 --> 01:27.990
you're to download one of these binaries for your operating system.

01:27.990 --> 01:35.070
So for Windows x e file here setup file for Mako is a DMC file and so on.

01:35.070 --> 01:37.860
So these are different things you can download.

01:37.890 --> 01:46.460
I'll go with the DMC file to download the latest version here save this and wait for this download to

01:46.460 --> 01:53.730
finish and then let me simply execute this and finish up the installation by simply walking through

01:53.730 --> 02:00.000
the installer or in my case here on Mako is simply dragging this into the applications directory and

02:00.000 --> 02:07.620
now it can open up the react native debugger here and here it is now it's not working right now because

02:07.620 --> 02:12.410
for this to work you need to enable remote javascript debugging on the devices.

02:12.420 --> 02:16.820
Just what we did before to debug this in chrome.

02:16.820 --> 02:22.270
Now this essentially replaces does chrome debugging experience you could say or enhances it.

02:22.280 --> 02:30.140
Now with this opened up press command t on mac or control t on Windows or Linux in here to open a new

02:30.140 --> 02:38.690
tab and open and confirm that React Native debugger report which the chrome tab also used before and

02:38.690 --> 02:46.730
confirmed this and now it's trying to connect there and to make this succeed open up your developer

02:46.730 --> 02:49.920
tools let's say on Android now and debug javascript remotely.

02:50.000 --> 02:57.030
And now this should connect here and you'll see your console output here now in the debugger tools.

02:57.020 --> 03:05.240
You'll also see sponsors that and sources you can again dive into your code here if you want to just

03:05.250 --> 03:05.960
as before.

03:06.650 --> 03:10.520
And the big difference of course is not that you can do this because that's the same you could do in

03:10.520 --> 03:15.770
the browser but Dad here you now have the pretty neat tools here on the left.

03:15.770 --> 03:17.950
So you can still of course set breakpoints and everything.

03:17.960 --> 03:23.480
But here you now for one got your X debugging tools and we're not using redux here so they're pretty

03:23.480 --> 03:23.840
empty.

03:23.840 --> 03:28.790
Nothing going on here but at the bottom you have these elements debugging tool.

03:28.790 --> 03:37.760
And this allows you to explore your React Native J.S. X code so to say so you were element you a component

03:37.790 --> 03:45.140
tree in this nice user interface which is definitely nicer than the inspector.

03:45.140 --> 03:52.660
You could toggle here because now here you really can have a look at what's going on you can dive into

03:52.660 --> 04:00.200
the root component to then find our app component down there and in there we find our view with that

04:00.200 --> 04:06.080
button we can click on the button and we see the props that we're using on the button like on press

04:07.720 --> 04:09.170
and the title that we set.

04:09.250 --> 04:14.020
We can click on our own component where we see the props were forwarding there we can even change the

04:14.140 --> 04:18.720
visible prop to toggle this model like this if we want to.

04:18.790 --> 04:20.220
That's really nice.

04:20.290 --> 04:25.070
We see the hooks we're using in there like the state we're currently managing in our component.

04:25.150 --> 04:31.540
And if I open that model here you see that state that props your changes.

04:31.540 --> 04:37.870
And if I start typing here like learn react native you'll see that this all is up there's here on the

04:37.870 --> 04:39.220
right light.

04:39.280 --> 04:42.730
Slight delay but that shouldn't be an issue that's really neat.

04:42.820 --> 04:46.600
We can add this and see the state changes here.

04:46.600 --> 04:51.340
We can of course dive deeper into our goal input to see the model here.

04:51.400 --> 04:57.490
You can explore the flat list and what's configured there and dive deeper into this view if you want

04:57.490 --> 05:04.600
to read a lot of stuff you can do there and you can overall explore your componentry there to find out

05:04.660 --> 05:10.780
what's going on on elements very you directly added a style like on the surrounding view for example

05:10.780 --> 05:11.970
where I set this padding.

05:11.980 --> 05:17.320
You can even inspect the style and not just see the style but also change it for example to increase

05:17.320 --> 05:18.960
the padding or reduce it.

05:19.030 --> 05:24.010
And this gives you an easy way of testing different looks and layouts on the screen to find out what's

05:24.010 --> 05:27.190
looking good for you and what you want to change.

05:27.250 --> 05:33.310
You can also go to the profiler tab here and start a profiling session then do something on the screen

05:33.310 --> 05:39.760
like open and close to modal and stop this and you'll get the default react def tools experience here

05:39.760 --> 05:45.400
where you see which of your components were repaint it and you can dive into that to get an idea for

05:45.400 --> 05:51.640
what was replaced repainted which props it had at the time and how many rebranded cycles you had to

05:51.640 --> 05:57.070
for example find out if there are unnecessary repaint going on obviously a bit of a more advanced thing

05:57.070 --> 06:02.800
to do and something you might want to do when you're closer to finishing up your app to make sure you're

06:02.800 --> 06:08.230
optimizing performance and you're avoiding unnecessary rerun or cycles but these tools can really be

06:08.230 --> 06:13.870
helpful for spotting little issues in your app and for making sure that everything is working in the

06:13.870 --> 06:16.360
way it should work in your app.

06:16.360 --> 06:20.890
Now whenever a cool thing you can do with the react native debugger you can right click anywhere here

06:21.130 --> 06:24.110
and say Here you can enable network inspect.

06:24.250 --> 06:29.800
And if you do this then you can go to the network tab and you'll see outgoing network requests.

06:29.800 --> 06:35.770
Now these are all just debugging related requests but later in the course when we'll add our own network

06:35.770 --> 06:42.070
requests where we send requests to our own Web server we can even inspect those here and look into them

06:42.070 --> 06:47.140
and see where sending and receiving the right data something which is otherwise pretty hard to do with

06:47.380 --> 06:48.560
native apps here.

06:48.580 --> 06:55.480
It's a breeze so React Native debugger really is a cool tool for looking into your app for setting breakpoints

06:55.720 --> 07:02.860
viewing the console viewing your componentry viewing the stars you're using data and so much more it

07:02.860 --> 07:10.570
really allows you to dive deeply into your application code into your UI into your logic and find out

07:10.660 --> 07:15.490
if everything is working the way it should work and you can even go in year and change certain things

07:15.490 --> 07:21.220
like the styling as you saw to experiment with different settings and find out where you need to tweak

07:21.220 --> 07:23.380
your app for it to work correctly.
