WEBVTT

00:02.130 --> 00:03.280
Now what about the styling.

00:03.280 --> 00:07.130
What about these buttons now for these buttons.

00:07.130 --> 00:10.600
You might notice that you now have a strange behavior.

00:10.610 --> 00:18.600
If you wrote it back to portrait mode all here on Android on the other hand if we change something and

00:18.690 --> 00:24.000
undo that just so that the app restarts and we start in portrait mode you'll see it looks good.

00:24.000 --> 00:28.240
But now if we go to landscape mode it looks bad again.

00:28.260 --> 00:36.060
So basically the width of our buttons gets locked in when the app starts and doesn't adjust when our

00:36.060 --> 00:41.670
screen size changes and of course it changes when we rotate the device because width and height get

00:41.670 --> 00:42.320
swapped.

00:42.330 --> 00:47.280
So we have more with the weight to if we're in landscape mode than we have in portrait mode.

00:47.280 --> 00:53.730
The problem is that currently on the start game screen when we set the width of our buttons which we

00:53.730 --> 00:59.970
do down there we use dimensions get and this and that's very important to keep in mind this is only

00:59.970 --> 01:02.970
calculated when your app starts.

01:02.970 --> 01:08.220
So when the app starts for the first time this has a look at the available width and if it starts in

01:08.220 --> 01:08.910
portrait mode.

01:08.910 --> 01:13.980
That's the portrait mode with if it starts in landscape mode it's the landscape mode with and it locks

01:13.980 --> 01:20.390
this in and when you then rotate the device and if you then rotate the device this doesn't recalculate.

01:20.550 --> 01:25.970
Now of course you would want us to recalculate and there is a simple fix for that.

01:26.100 --> 01:33.530
If you have a width or height anything you get from dimensions which should respect orientation changes.

01:33.570 --> 01:41.430
So which should recalculate when the orientation changes then you should not use dimensions with down

01:41.430 --> 01:50.250
there in your stall sheet but instead you need to manage though the width or whatever property it is

01:50.570 --> 01:57.230
that can change dynamically and that should re render the UI when it changes with state.

01:57.230 --> 02:00.960
So here in the start game string we already half use state.

02:01.130 --> 02:11.470
We can now also manage our button with your set button with with use state and initialized as two dimensions

02:11.500 --> 02:18.290
get window with divided by four which is the default.

02:18.300 --> 02:21.220
I started with.

02:21.330 --> 02:27.660
Now you can set up a listener here on dimensions instead of using get by calling add event listener

02:28.020 --> 02:32.640
and listen to the change event which fires whenever you dimensions change which typically is the case

02:32.640 --> 02:35.000
when the user rotates the device.

02:35.010 --> 02:43.950
So here we can set up a function Update layout for example which is a function which I call set button

02:43.950 --> 02:50.760
width and we'll set it again to my width year but do dimensions with will be different based on the

02:50.760 --> 02:52.470
width of the screen.

02:52.470 --> 02:58.020
When we rotated and its dysfunction which I want to call here so it's update layout which I want to

02:58.020 --> 03:02.430
call here without parentheses here because we just want to point at this function.

03:02.460 --> 03:07.530
So that's called for us when New Dimensions change and this will make sure that this read runs whenever

03:07.830 --> 03:11.160
our dimensions changed and therefore this component will be rendered.

03:11.160 --> 03:16.100
Now we just have to make sure we use that dynamically recalculated button with state here.

03:16.230 --> 03:20.130
We can do this by using inline styles instead of histology to object.

03:20.130 --> 03:25.770
Now if you had other styles set up for the button which do not depend on the dimensions then you could

03:25.770 --> 03:28.170
leave them here in the style sheet of course.

03:28.170 --> 03:32.910
In this case I don't have that that I'll just call this out and you could then merged that with some

03:32.910 --> 03:36.120
inline styles here since we have no default our styles.

03:36.120 --> 03:41.550
I'll just replace this style sheet object we're pointing at with the inline style object where I said

03:41.550 --> 03:47.070
with equal to button with and do the same of course for my second button with dead.

03:47.130 --> 03:51.390
We now have styling that changes whenever we rotate the device.

03:51.390 --> 03:55.550
So if we save this you'll see this now looks good no matter how we rotate.

03:55.550 --> 04:00.350
This all is on Android because this gets re rendered.

04:00.570 --> 04:07.050
Now one important note here though right now at the moment I'm setting up a bunch of event listeners

04:07.050 --> 04:07.320
here.

04:07.350 --> 04:11.670
I always add a new event listener whenever it is component rewording reminders and that's not what I

04:11.670 --> 04:12.500
want to do.

04:12.720 --> 04:19.320
And we can use use a fact which has all the built into react and which you should be aware of to have

04:19.410 --> 04:23.540
code that we run whenever our component renders.

04:23.620 --> 04:31.020
So now I can use use a fact here at the function which I want to run on every render is a function which

04:31.020 --> 04:36.210
in the end creates does update layout function here and adds My event listener.

04:36.270 --> 04:41.580
So I'll cut this and added here in use affect function and if we then return something here and use

04:41.580 --> 04:46.950
effect that's our clean up function which runs right before use effect runs in there.

04:46.950 --> 04:54.940
I want to clean up my listener because here I can then call dimensions remove imminent event listener

04:54.950 --> 04:57.900
change for update layout.

04:57.900 --> 05:02.840
So now we cleaned us up and set up a new one when our component renders clean up the old one set up

05:02.840 --> 05:06.610
a new one and therefore we always only have one running event listener.

05:06.770 --> 05:13.350
If we do it like this that's simply cleaner and therefore if we now safeties and we go back we have

05:13.350 --> 05:19.650
the same behavior as before but now in a clean way by utilizing use state and use effect and most importantly

05:19.950 --> 05:26.370
the event listening capabilities off the dimensions API which allow us to not only set dimensions once

05:26.610 --> 05:29.040
but recalculate them when they change.
