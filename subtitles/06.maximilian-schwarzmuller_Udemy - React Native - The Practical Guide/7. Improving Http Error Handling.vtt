WEBVTT

00:02.720 --> 00:11.630
With the changes we implemented, we added lot of useful things. Now I want to focus on my action creator

00:11.640 --> 00:15.690
for adding places and optimize the code here a little bit.

00:15.720 --> 00:22.740
It works but the error handling can be better or to be precise, there's some cases where we could run into

00:22.740 --> 00:24.100
that ends.

00:24.540 --> 00:31.030
I briefly showed how to possibly handly errors in the http section,

00:31.110 --> 00:34.230
now one problem you might have is that

00:34.230 --> 00:43.330
here with the catch block chained after a fetch request here, this only catches network errors,

00:43.360 --> 00:48.220
so this does not catch 400 or 500 error codes.

00:48.220 --> 00:50.130
Therefore we reached this then block

00:50.290 --> 00:54.980
even if the previous request failed due to a server error.

00:55.240 --> 01:03.640
So what we can do is, we can for example not immediately return response.json here but instead we can

01:03.640 --> 01:05.380
check if res

01:05.810 --> 01:10.530
ok, that's a little helper property to tell us if the response was 

01:10.630 --> 01:12.830
ok and then we can return response.json

01:12.850 --> 01:15.250
otherwise

01:15.490 --> 01:21.880
we could for example throw a new error which will trigger the next possible catch block.

01:23.410 --> 01:26.250
Now we won't get into this then block if it failed

01:26.380 --> 01:34.260
instead this catch block would take care and the same pattern can of course be used in the second then block

01:34.430 --> 01:35.350
here,

01:35.890 --> 01:44.290
there we also can use this better approach of making sure we only get there or we only get into this

01:44.320 --> 01:46.440
then block if we really did succeed.

01:46.720 --> 01:52.690
Now that's a tiny improvement but one which really can help our app to make sure we're not running code

01:52.990 --> 01:59.730
which would then of course also fail but running code on something that well doesn't make a lot of sense.

01:59.860 --> 02:05.050
So I'll actually copy this pattern here and use it in my other places too

02:05.050 --> 02:08.520
and you could outsource this into a separate function or something like this,

02:08.560 --> 02:13.540
I deliberately use the more verbose way to be really clear about what's happening here.

02:13.540 --> 02:19.460
And with that, our final catch blocks which we always have at the end here are able to catch errors

02:19.480 --> 02:28.990
we get due to well 400 or 500 responses. The same of course can be used in the auth file where we also have

02:28.990 --> 02:31.070
fetch requests, there

02:31.120 --> 02:36.610
if we fail on a fetch request, we probably also want to make sure we don't continue

02:36.700 --> 02:41.290
though here I always had a check to make sure we only continue if we did get a token,

02:41.380 --> 02:46.930
so no real need to do it here I guess because we already handle errors differently here. But I wanted

02:46.930 --> 02:50.780
to share it especially for the places. This is an improvement,

02:50.870 --> 02:57.130
the app would have worked before too, we wouldn't have done anything with the errors, we would have gotten

02:57.130 --> 02:58.530
into another error

02:58.540 --> 03:01.060
but this is a better way of handling it.

03:01.420 --> 03:07.330
So now we save this, let's see if our app still works, for one here if we find places,

03:07.330 --> 03:08.480
we still do,

03:08.650 --> 03:13.740
if we delete a place this also still works and if we share a new place,

03:20.170 --> 03:24.160
this also works. So with that, we optimized our catch blocks a little bit.
