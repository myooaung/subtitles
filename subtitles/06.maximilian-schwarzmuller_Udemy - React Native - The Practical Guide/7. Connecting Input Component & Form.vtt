WEBVTT

00:02.390 --> 00:07.550
Now with this action being dispatched we can go to the reducer and write some code here in input change

00:08.170 --> 00:09.440
and that's very simple code.

00:09.440 --> 00:18.650
We return a new state where I copy my old state and I want to update the value with action dot value

00:19.400 --> 00:25.650
because value is one property I have on is action the other is is valid and that's the other thing which

00:25.650 --> 00:30.710
I also want to update on every keystroke is valid for dis input not for the entire forum but for dis

00:30.710 --> 00:38.420
input managed internally I'll not update touched here instead touch should be updated when we actually

00:38.930 --> 00:43.490
lose focus because that means the user is done entering content for the moment.

00:43.490 --> 00:52.550
So now I want to mark this as touched and possibly show validation errors so here lost focus Handler

00:52.580 --> 00:56.690
is a function which I add and there I will dispatch

00:59.970 --> 01:01.890
an action now for that.

01:01.890 --> 01:04.470
I'll create a action identifier up here.

01:04.710 --> 01:16.170
Input blur like this input blur like this and now we can dispatch input blur here don't need to attach

01:16.170 --> 01:24.060
any data and now in our reducer we can use that with a number of case input blur and if that is the

01:24.060 --> 01:29.280
case I return unused state where I copy old state because I want to keep value and is valid and not

01:29.280 --> 01:36.620
change that but I want to set touched to true so as soon as we blur input it is treated as touched.

01:36.750 --> 01:44.110
Now we just need to hook up this function so we'll set the on blur listener here and point at lost focus

01:44.110 --> 01:46.870
handler so that this triggers when this input blurs

01:49.850 --> 01:57.100
not that is all nice and this will manage the state inside of this input of course I still need to forward

01:57.190 --> 02:03.370
the value and information whether that input is valid or not to my parent though so to the added product

02:03.370 --> 02:14.700
screen hence what we can do is we can add use a fact here as a input in the input component and maybe

02:14.700 --> 02:15.310
add it here

02:18.430 --> 02:28.070
and in the use affect function I want to call a function which I expect to get via props maybe on input

02:28.130 --> 02:40.980
change name is up to you and it will just execute this and for word my input state value and my input

02:40.980 --> 02:48.540
state is valid information so that in the parent component we can add a function here that listens to

02:48.540 --> 02:53.790
that and that is triggered which receives these two arguments and then in the parent so in the screen

02:53.790 --> 03:00.310
component we can update our state dear now the important thing is when should this use affect run and

03:00.310 --> 03:07.420
it shouldn't run after every keystroke instead this should run whenever our input state value or is

03:07.420 --> 03:17.780
valid changes of course because that's what we depend on or to be precise we might even only sent this

03:17.780 --> 03:25.910
information if input state touched is true because otherwise the parent component might not care.

03:26.100 --> 03:31.680
So now our dependency here is the entire input state because we use all values but we still will only

03:31.680 --> 03:36.600
fire dysfunction on the parent component if touched is true so it does effect will run more often but

03:36.600 --> 03:42.240
most of the time it won't do anything as long as touched is not true and props of course also our dependency

03:42.480 --> 03:49.170
now to a wide and infinite rendering loop here we can use the object D structuring syntax and pull out

03:49.650 --> 03:56.640
on input change so that if our props change we don't refire does effect because on input changes what

03:56.640 --> 04:01.890
we need down there and now we can add this is a dependency and the other things other changes in the

04:01.890 --> 04:03.820
props will not trigger does.

04:04.260 --> 04:10.620
So now or we call this on the parent component whenever does is touched and then we forward the value

04:10.650 --> 04:13.470
and the validity of this input to the parent component

04:16.680 --> 04:23.400
so let's now make use of that in the edit product screen there on our inputs like on the tightly input

04:23.400 --> 04:29.670
we can add the on input change prop and that's the prop which I target here right so you need to get

04:29.670 --> 04:34.230
that naming right and this expects to get a function as a value which then in turn will receive two

04:34.230 --> 04:38.140
arguments when called the value and the validity of that input.

04:38.220 --> 04:44.490
So here I want to point at a function and that can be our let's say input change handler we can recycle

04:44.490 --> 04:46.910
this I just rename it to be more fitting.

04:47.130 --> 04:55.070
So the input change handler can be triggered here like this there I want to still pass in my identifier

04:55.100 --> 04:59.930
because I want to reuse that for all my inputs and now as in some indie screen component we will have

04:59.930 --> 05:07.940
multiple inputs and there we don't forget our identifier and then we get the value and the is valid

05:07.940 --> 05:09.410
information right.

05:09.410 --> 05:15.740
So input value and input validity that's what we get.

05:15.740 --> 05:15.940
Right.

05:15.950 --> 05:19.940
Because that's what we forward from inside the input component here.

05:19.940 --> 05:22.510
That's what we pass to this on input change.

05:22.580 --> 05:31.110
Function so therefore here we don't need to do validation we just need to forward that information we

05:31.110 --> 05:38.310
forward the input value we forward the input validity and this will only happen when the input is touched

05:38.310 --> 05:38.760
by the way.

05:38.790 --> 05:40.320
So when it loses focus

05:43.310 --> 05:48.010
and of course that's just a restriction I added here that you need to have lost focus you could have

05:48.020 --> 05:53.060
for of course all to go to the input component and removed as if check to update developed to add value

05:53.060 --> 05:59.260
in the parent component for every input for every keystroke now one additional thing which I want to

05:59.260 --> 06:07.390
do I want to wrap this in a used callback call here so that this function isn't rebuilt unnecessarily

06:07.510 --> 06:13.050
because keep in mind that we passed this function to on input change in the input component and data

06:13.060 --> 06:13.630
on the other hand.

06:13.630 --> 06:15.400
This is a dependency of this effect.

06:15.430 --> 06:18.190
So this in fact will rerun whatever just changes.

06:18.190 --> 06:22.780
So it shouldn't change too often to a wide unnecessary effect runs.

06:22.810 --> 06:28.900
And here we definitely to state our dependencies and the only dependency we have is dispatch from state

06:29.080 --> 06:31.690
form state which will actually never change.

06:31.690 --> 06:32.430
So we're good.

06:32.430 --> 06:35.620
This should never rebuild because the logic in there doesn't change.

06:35.680 --> 06:43.690
We get all values that we need as arguments with that in my edit product screen.

06:43.690 --> 06:50.310
I still have my forms that of course with all the forum values and the form validity is but I only managed

06:50.310 --> 06:55.600
this here because I need to submit it later and because I need to derive the overall form validity I

06:55.600 --> 06:58.280
don't do it because I need to manage every input here.

06:58.390 --> 07:05.100
We do that from inside the input component instead for submissions on we still need the information

07:05.100 --> 07:06.460
about every store value.

07:06.500 --> 07:18.810
However now if I go back to the input don't forget that you also need to set the initial value prop

07:19.320 --> 07:22.600
and whether this should be initially valid.

07:22.680 --> 07:31.290
So if I go back to the edit product screen now we should set initial value here to what.

07:31.320 --> 07:35.640
Well we can check if we have added that product and if we do it and the initial value here should be

07:35.640 --> 07:37.150
added the product title.

07:37.170 --> 07:44.760
Otherwise it's an empty string and it should be initially valid.

07:45.480 --> 07:47.480
So use this prop here.

07:49.830 --> 07:51.860
If we have added that product.

07:51.870 --> 08:00.780
So if this is with the double bang your if this is true if we have no additive product then this can't

08:00.780 --> 08:01.530
be initially valid.

08:01.530 --> 08:03.390
So then that pass falls which is good.

08:03.390 --> 08:07.210
Which is just what should be the case.

08:07.280 --> 08:13.040
Now we can copy these two lines although to the image you are l there of course we forward the image

08:13.040 --> 08:20.400
you are l value as a default value Albert and that can stay light like it is for the price will never

08:20.400 --> 08:25.650
have an initial value and it will never be initially valid for description on the other hand we can

08:25.660 --> 08:28.950
again at this end here point at the script.

08:32.270 --> 08:39.050
Now with that there is one thing I need to fix any input component which I also just thought about of

08:39.050 --> 08:43.450
course here the form estate is not a way to live anymore.

08:43.450 --> 08:47.950
Instead we have our internal state here and I named this input state.

08:47.960 --> 08:49.870
That's what my reducer returns.

08:50.120 --> 08:51.700
So we should use that here of course.

08:51.700 --> 08:57.830
So here we have input state DOT value as a value it's as simple as that.

08:57.920 --> 09:03.590
And here we have input state DOT is valid as a check and that should be all.

09:03.590 --> 09:10.060
Now if he's safe doesn't have a look at this let's see whether that works we go here we have all the

09:10.060 --> 09:13.360
error messages initially which makes sense because they're all invalid initially.

09:13.790 --> 09:20.500
If I start typing here I get an error can find variable is valid in my input component that has to be

09:20.500 --> 09:26.910
in that handler that fires for every keystroke probably here.

09:26.920 --> 09:29.490
Yeah introducer of course I should check.

09:29.490 --> 09:30.000
Action.

09:30.000 --> 09:32.490
Dot is valid not just as valid.

09:32.730 --> 09:37.470
I have to get this from the action so is that fixed here.

09:37.480 --> 09:42.240
Let's go back and let's try this again start typing does this cleared fire.

09:42.270 --> 09:46.530
Reverse this my error doesn't come back.

09:46.530 --> 09:50.800
Those that that's a little error we'll have to fix for the price.

09:50.800 --> 09:55.330
0 is not treated as valid one.

09:55.350 --> 09:58.590
All these and so validation has some issues.

09:58.590 --> 10:03.490
But entering and on works but let's see what's wrong with validation now.

10:03.500 --> 10:07.090
Well of course the way validation works here we're not using it.

10:07.100 --> 10:12.290
Please keep in mind that I always check whether this type of validation is enabled for this input or

10:12.290 --> 10:17.000
disk type or this type and we do this with the help of these special props which we need to set right

10:17.030 --> 10:22.980
now no validation is enabled so only the default invalid values are taken into account.

10:23.060 --> 10:28.610
So if I go to the edit product screen we now enabled this special validation by setting the right props

10:28.610 --> 10:39.170
for example here on the title input required on the image your all the required on the price here required

10:39.470 --> 10:47.540
and also maybe men equal to zero so that zero is the minimum number we have to enter or a number greater

10:47.540 --> 10:48.350
than it actually.

10:48.380 --> 10:58.480
So maybe 0 1 is our minimum number for the description should also be required and maybe also Min length

10:58.540 --> 11:05.100
equal to 5 to have at least 5 characters there also is one additional thing we need to do here in the

11:05.100 --> 11:11.070
edit product screen does on input change handler here also needs to be added to every input of course

11:11.130 --> 11:16.870
not just to the title input so we need to add this for the image you are L otherwise we'll get an error

11:16.870 --> 11:26.760
or later we'll need to add this here to the price input will also need to add this here obviously to

11:26.760 --> 11:30.580
the description input and replace the identifier in the right way.

11:32.810 --> 11:36.010
Let's test this and you'll notice something strange.

11:36.040 --> 11:39.000
If you type here that works.

11:39.000 --> 11:41.210
Type in the image your l doesn't work right.

11:41.220 --> 11:47.300
Do you validation doesn't update and you can't go back either at least as might be stuck.

11:47.310 --> 11:54.990
So if you reload this with command error or double pressing R on Android we give this another try here.

11:55.010 --> 12:00.950
Let's say on the price you'll notice how this works but why doesn't it work and the same would be the

12:00.950 --> 12:05.630
case by the way if you tried to on D on the image URL here.

12:05.670 --> 12:10.200
This works why doesn't work if a previously edited no input because now for example it doesn't work

12:10.200 --> 12:15.100
on a title anymore and the problem is related to this being stuck here.

12:15.390 --> 12:22.500
We're re rendering this component way too often and the reason for that is really hard to trace down

12:23.010 --> 12:24.980
in the end we have kind of an infinite loop here.

12:24.990 --> 12:27.290
The problem is our input change handler.

12:27.420 --> 12:34.290
We're using callback here to a white unnecessary recreation but by then binding it like this we kind

12:34.290 --> 12:40.710
of rendered is obsolete it's making no difference now because this will create a new function binding

12:40.800 --> 12:42.230
for every render cycle.

12:42.750 --> 12:49.590
So in the end what we have to do is we have to remove bind here remove it here in all these places because

12:49.590 --> 12:51.550
this will break our capital costs.

12:51.780 --> 12:56.980
Too many re render cycles because of use callback not having an effect.

12:57.210 --> 13:01.200
And instead we might want to forward an idea.

13:01.200 --> 13:05.850
Prop of title ends on cue our input component.

13:06.050 --> 13:14.200
So let's add does on all these inputs this I.D. prop is basically what I added in the bind call before.

13:14.260 --> 13:18.860
So we just forward this to the input component so that we can use it in there.

13:18.880 --> 13:23.430
Let's do this for all these inputs here and now how can we use that.

13:23.470 --> 13:27.910
Well instead of the input we now have this idea prop a weight label right.

13:27.910 --> 13:30.820
So there we can simply attached this.

13:30.880 --> 13:38.280
So here we can forward prop start I.D. or simply ideas so that we don't have to project props here and

13:38.280 --> 13:44.370
instead pull out ideas out of props here just as we did it with on input change and add ideas.

13:44.470 --> 13:50.470
As a dependency of this effect or after and now with that we still forward that identifier of this input

13:50.830 --> 13:55.630
but in a more elegant way that avoids using bind which in the end recreates does function for every

13:55.630 --> 13:59.000
render cycle and hence leads to an infinite loop.

13:59.140 --> 14:03.430
Different now if we reload this and we go to the admin section here

14:06.890 --> 14:15.490
now I can enter something here and older here and now it is works because now we are white as infinite

14:15.490 --> 14:19.660
render cycle and we get the validation as we wanted.

14:19.690 --> 14:26.170
So now this is my approach or this is the approach I wanted to show you here would you can use to have

14:26.170 --> 14:31.630
a reusable input component which does its own validation which you can configure from outside and where

14:31.630 --> 14:33.960
you can still manage the overall form.

14:34.060 --> 14:36.120
With that let's dive into some fine tuning.

14:36.220 --> 14:42.070
Like for example styling this error message we're displaying this validation error message and all the

14:42.070 --> 14:45.310
controlling when we displayed because it don't want to show it all the time.
