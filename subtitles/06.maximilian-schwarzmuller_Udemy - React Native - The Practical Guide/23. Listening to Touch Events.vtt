WEBVTT

00:02.480 --> 00:08.360
Over the last lectures and the last assignment, we split up our app into multiple components and

00:08.460 --> 00:12.320
now we got a decent looking app where we can add our favorite places.

00:12.390 --> 00:18.960
Now what if we actually want to remove a place though? Let's say by clicking on a place, we want to get

00:18.960 --> 00:20.720
rid of it. Now right

00:20.760 --> 00:24.520
now if you click on the places, obviously nothing happens,

00:24.540 --> 00:28.050
now let's try a first possible solution,

00:28.050 --> 00:32.120
let's go to our place list component where we have the list items,

00:32.160 --> 00:34.090
let's say if we click a list item,

00:34.110 --> 00:36.520
so let's go into that, into our list item component.

00:36.690 --> 00:38.350
If we essentially click on that view,

00:38.370 --> 00:47.710
so anywhere on that list item, we want to do something. For that, let's add an onPress property to that view

00:48.010 --> 00:59.900
here and there, let's say we want to fire props on item pressed, any prop name you want. Now in the place list

00:59.960 --> 01:02.860
which is where we use our list item, there

01:02.870 --> 01:09.500
we can now add this prop to the list item because we just added it to it and therefore we can react

01:09.500 --> 01:10.110
to it,

01:10.120 --> 01:16.500
this should now occur whenever we press the list item in the list item component and here, we could execute

01:16.500 --> 01:26.810
an arrow function where we simply throw an alert, item pressed Id: and then output the index

01:26.810 --> 01:29.620
of the item which we also used as a key here.

01:29.960 --> 01:34.030
So I just split this up over multiple lines, this is the line I just added.

01:34.340 --> 01:35.480
Let's see if that works,

01:35.540 --> 01:37.230
let's save this,

01:37.220 --> 01:42.380
notice that my javascript hook here is still running so the app should still get updated and I will even reload

01:42.380 --> 01:44.550
it to be really sure that it works.

01:44.810 --> 01:47.400
If I now re-add Munich,

01:47.570 --> 01:49.960
nothing happens if I click this, right?

01:50.710 --> 01:58.250
The reason is by default, your views text and so on aren't touchable,

01:58.330 --> 02:02.050
you can't register onPress on any component you want,

02:02.080 --> 02:07.330
that's not like it works on the web where you can register on click on a div, on a span, whatever you

02:07.330 --> 02:08.090
want

02:08.470 --> 02:16.210
and even on the web, it's not like the default behavior, every html element simply has a couple of properties

02:16.240 --> 02:23.890
and events you can listen to and the click event happens to be present on pretty much all html elements.

02:24.460 --> 02:30.940
On react native it's the same, every react native component has its own set of properties and events

02:31.300 --> 02:38.150
and the view component doesn't happen to have an onPress property or event.

02:38.230 --> 02:40.410
You can always confirm this in the documentation,

02:40.630 --> 02:48.130
if you go to components and you search for the view component there, if you click on it, there you can scroll

02:48.130 --> 02:55.550
down and you will see that as you go over that, you get a lot of properties you can use but actually

02:55.600 --> 03:00.260
got no onPress property.

03:01.170 --> 03:04.440
To be honest, it got some touch related properties,

03:04.470 --> 03:12.380
all these on responder things are related to touching but since manually connecting to this isn't straightforward

03:12.450 --> 03:18.540
and you would have to do a lot of heavy lifting, react native gives you some nice wrapper components which

03:18.540 --> 03:26.130
you can wrap around any component you want if you want to react to touch events on it.

03:26.130 --> 03:35.090
These components are all called touchable something, touchable like this is the simplest one,

03:35.270 --> 03:42.770
so I import touchable from react native in my list item component and I will now wrap my view with

03:43.250 --> 03:44.890
touchable, like this

03:48.780 --> 03:50.210
Now on touchable,

03:50.280 --> 03:52.260
we can register onPress,

03:52.350 --> 03:54.170
it does expose this,

03:54.270 --> 04:02.420
you can again go back to documentation and have a look at the touchable components you see here.

04:02.820 --> 04:05.330
Now touchable is actually the base component,

04:05.430 --> 04:09.640
I'll come back to the components you should really use in a second.

04:09.960 --> 04:11.820
So that's touchable,

04:11.820 --> 04:14.680
now if we save this and we go back to the application,

04:14.790 --> 04:19.110
if I now enter my component there, you see we get an error.

04:19.440 --> 04:26.910
The reason for this is that touchable is basically a parent class from which multiple subclasses inherit,

04:27.240 --> 04:29.810
for example touchable without feedback,

04:30.150 --> 04:35.940
so let's replace touchable with touchable without feedback and save the list item.

04:35.940 --> 04:37.160
Let's now try this again,

04:37.170 --> 04:43.070
let's reload our app here, add Munich and touch it

04:43.210 --> 04:48.970
and now you see I get this alert and if I add Munich again and click on that, you'll see the ID is a different

04:49.030 --> 04:52.760
one. And the same for Android, the app is just stuck but

04:52.780 --> 04:56.290
if I reload manually, I can add it there too

04:56.470 --> 05:04.900
and also click there to get the alert. So touchable without feedback basically allows us to register touch

05:04.900 --> 05:06.860
events on the element

05:06.970 --> 05:12.980
it wraps and you must only have one child element, not adjacent ones.

05:13.030 --> 05:19.420
This typically is a view or often is a view but theoretically, it could also just be a text, it doesn't have

05:19.420 --> 05:25.030
to be a view. Now touchable without feedback is named like this because you get no visual feedback

05:25.030 --> 05:26.160
when touching,

05:26.590 --> 05:36.280
if you inspect its documentation, you'll see all the properties you can set to determine how long you

05:36.280 --> 05:39.540
actually have to press to trigger certain events

05:39.700 --> 05:46.450
and then you see the events, like onLongPress, an alternative to onPress or when the press starts, when

05:46.450 --> 05:47.710
it finishes

05:47.830 --> 05:52.600
and so on. So touchable without feedback doesn't give us feedback,

05:52.650 --> 05:56.490
we also have touchable highlight,

05:56.760 --> 06:02.040
let's try this out. Let's replace touchable without feedback with touchable highlight, let's save the

06:02.130 --> 06:03.530
file

06:03.560 --> 06:11.270
and now if I click an item, you see that once I click it, it actually gets darker and here also the

06:11.270 --> 06:18.950
margin below it gets really dark, really black which is just just how react styles this behind the scenes.

06:18.950 --> 06:25.040
The margin counts towards the object and it basically paints the entire object in my way darker and white

06:25.100 --> 06:26.350
just becomes black,

06:26.510 --> 06:28.330
therefore it looks like this.

06:28.340 --> 06:39.100
So now we at least get a feedback, what we can also use is touchable opacity, touchable opacity doesn't

06:39.100 --> 06:43.300
change the background color but the opacity.

06:43.300 --> 06:47.220
Now you see that clicking it basically reduces the opacity,

06:47.380 --> 06:52.660
so we get this feedback when we touch it and the same by the way of course on Android.

06:52.660 --> 06:56.820
Now on Android, you might also want to have this ripple effect

06:56.890 --> 07:03.070
and for that you can use touchable native feedback, so we can use that.

07:03.320 --> 07:09.160
If we now save this and we go back to Android, you'll see we get the ripple effect

07:09.440 --> 07:13.190
and on the right, on iOS, you see it's not supported there.

07:13.280 --> 07:19.040
This actually is a component you may only use on Android and in the later section, I will show you how

07:19.040 --> 07:24.700
you can find out on which device you're running on so that you can render this on Android

07:24.800 --> 07:27.510
and an alternative on iOS.

07:27.830 --> 07:33.470
For now I will simply revert to touchable opacity because I think that looked the nicest and it works

07:33.470 --> 07:35.360
on both platforms.

07:35.360 --> 07:38.930
So all these touchable classes have the same events,

07:38.960 --> 07:41.270
they just do different things visually.

07:41.300 --> 07:45.450
Sometimes you want the without feedback one, sometimes you want the opacity, well

07:45.500 --> 07:47.470
choose whichever one you like.

07:47.540 --> 07:49.360
Here I'll go with opacity

07:49.460 --> 07:51.440
and now we got a nice feedback.

07:51.830 --> 07:58.850
This by the way is also how you can create your own buttons and to be honest, it's just how this button

07:58.850 --> 08:00.210
here was created,

08:00.440 --> 08:07.730
it's just in the end a text or maybe a view with a text inside of it wrapped with a touchable component

08:08.150 --> 08:15.030
and then that view inside of it is styled like a button. Voila, you're done, that's your finished button.

08:15.560 --> 08:20.720
And this is how you can create your own buttons or any other touchable element you want,

08:20.720 --> 08:23.460
keep in mind, touchable opacity and so on,

08:23.510 --> 08:28.720
these are the elements which you use if you want to react to some touch events.
