WEBVTT

00:02.120 --> 00:07.130
Let's start with managing the loading state here on the off screen because obviously I want to give

00:07.130 --> 00:10.570
the user some feedback when we're currently waiting for a response.

00:10.670 --> 00:17.060
For this we can import the activity indicator which you already know and manage the loading state here

00:17.810 --> 00:26.990
by adding another state here is loading and set is loading which we initialize to false because initially

00:26.990 --> 00:36.470
we aren't loading and now here when we are and is off handler I can add async here because of course

00:37.370 --> 00:39.860
sign up here returns a promise the same for logging.

00:39.920 --> 00:46.040
So these actions create or functions return promises so we can await for the result of dispatch which

00:46.070 --> 00:52.820
ultimately uses these promises which we get and basically kicks off this entire process.

00:52.820 --> 00:56.890
And before we await this I can set is loading to true.

00:56.900 --> 01:02.720
So when we start this whole process before we sent the request and their offer set is loading to falls

01:02.840 --> 01:06.480
once we're done with this request no matter if it failed or not.

01:07.720 --> 01:10.320
And now is loading can be used to display a loading spinner.

01:10.330 --> 01:15.760
It's up to you where you displayed as for example you could say that you want to replace this sign up

01:15.760 --> 01:17.890
button with the loading spinner.

01:17.890 --> 01:21.420
So here we could say if is loading is true.

01:21.490 --> 01:25.010
I want to show the activity indicator like that.

01:25.090 --> 01:27.520
Otherwise I'll show the button.

01:27.520 --> 01:29.590
So this is a syntax we could use.

01:29.590 --> 01:38.510
Set the size here to LA at 2:00 too small and to color two collars primary let's say now if we give

01:38.510 --> 01:47.660
that a try and we go back here on IAW if I try logging in indeed as you the loading spinner and then

01:47.900 --> 01:48.410
I'm back.

01:48.410 --> 01:54.800
So that works now for the error handling for the error handling you all to learn how it works.

01:54.830 --> 01:58.900
You can of course manage your error state here as well.

01:58.940 --> 02:05.180
You could again also use use reducer to merge loading and error a state into one object but I'll do

02:05.180 --> 02:06.250
it like this.

02:06.470 --> 02:11.540
Error and set error with the help of use state which initially doesn't assign a value so that this is

02:11.570 --> 02:22.010
undefined initially and then here we can wrap try catch around this dispatching here where we get a

02:22.010 --> 02:27.140
potential error and set our error to does.

02:27.140 --> 02:34.640
Error message we're getting back and before we send the request I also want to my set my error back

02:34.640 --> 02:41.420
to to null is now we're storing a potential error here in set error.

02:41.610 --> 02:45.620
And I just want to throw an alert show an alert to the user if we get an error.

02:45.630 --> 02:52.110
So for this you need to make sure that you import alert from react native and also use effect from react

02:52.110 --> 02:58.860
because use effect allows us react to changes in the error state and show the error alert if we have

02:58.860 --> 03:09.340
an error so maybe here after setting up the reducer we can add use effect and my dependency here is

03:09.340 --> 03:14.620
the error state variable or constant and if we have an error.

03:14.620 --> 03:23.190
So if this is true ish then I want to show an alert with the alert API where I say an error occurred

03:23.910 --> 03:29.580
and my message is the error which should be a string and I will add a button where I have a text of

03:29.940 --> 03:34.840
OK and of course you could add more buttons where you do different things.

03:34.930 --> 03:41.950
Now we can simulate this in the action creator by going there and for logging in let's say we remove

03:42.370 --> 03:49.350
that D here so that this is incorrect you are Elena and if we now try logging in here

03:52.500 --> 03:54.790
I get this error.

03:54.810 --> 03:55.340
Then that's good.

03:55.350 --> 04:01.920
But there also are other kind of errors which I want to handle for example what if I log in with the

04:01.920 --> 04:08.930
e-mail address that doesn't exist of course I want to show an error to the user or two and I do but

04:08.930 --> 04:15.670
I only show something went wrong which is not exactly the error I would like to show.

04:15.700 --> 04:21.850
Now I was showing this error because indie action creator here if the response is not okay I froze something

04:21.850 --> 04:22.690
went wrong.

04:22.690 --> 04:27.910
No the problem is when we send out incorrect e-mail or incorrect password also by the way for signing

04:27.910 --> 04:35.410
up if we send something which isn't the email or a password which is too short if that happens then

04:35.410 --> 04:42.890
we'll get back a response with a status code of 400 something and we get some error details as part

04:42.890 --> 04:43.750
of the response.

04:43.760 --> 04:46.490
And right now with our error handling we don't see those.

04:46.740 --> 04:50.590
So we need to change this instead of immediately throwing an error here.

04:50.600 --> 04:53.730
If the response is not okay I still want to look into it.

04:53.870 --> 04:57.980
So I will have my error response data which I get by a waiting for response.

04:57.980 --> 05:06.230
Jason here so I do the same as in the success case but I extract that into a different field and now

05:06.250 --> 05:09.550
here I want a console locked to our response data.

05:09.580 --> 05:12.710
So did we get a feeling for how it is looks like.

05:12.720 --> 05:20.680
So now let's try entering a e-mail address which doesn't exist again and now we get our strange error

05:20.680 --> 05:25.600
which you just saw but now we have this interesting output here and you see does this the error object

05:25.600 --> 05:26.870
firebase returned to me.

05:26.920 --> 05:30.130
And of course it depends on the API you're talking to.

05:30.130 --> 05:35.560
Which kind of error you're getting and when you're getting it and what details it includes this as you

05:35.560 --> 05:43.060
see is the object which has an error key which is yet another object which has an error code some details

05:43.060 --> 05:48.490
about the errors and then this message which is for example email not found and that's the part I'm

05:48.490 --> 05:53.060
interested in the official docs by the way you'll find more potential error identifiers.

05:53.080 --> 05:55.860
You could be getting so in yeah.

05:55.890 --> 06:04.800
That's what I want to check now I want to get my error idea let's say from the error response data by

06:04.800 --> 06:11.160
accessing the error field there which is this field which gives me access to this object which then

06:11.160 --> 06:12.580
has this message field.

06:12.720 --> 06:19.470
So therefore here I then access message to get this message and now we can check this we can check if

06:20.040 --> 06:27.260
our I.D. is equal to email not found if that's the case I want to set my own customized message.

06:27.270 --> 06:33.090
So here I'll will add a variable message which is just something went wrong by default.

06:33.300 --> 06:38.580
But then here if we know the problem is that we didn't find the e-mail address we could say this email

06:38.610 --> 06:44.550
could not be found and I'll add more if checks in a second.

06:44.550 --> 06:49.650
So this is something I want to check here and in the end they offer I have a message which I now want

06:49.650 --> 06:50.100
to throw.

06:50.130 --> 06:55.860
So now I will throw a new error with my own customized message though so never check.

06:55.860 --> 07:03.890
I want to add with Ailes of statement here is whoever the error idea is for signing in invalid password

07:03.890 --> 07:15.050
let's say so I can check for that and set the message equal to this password is not valid and now let's

07:15.050 --> 07:16.480
give this a number try.

07:16.580 --> 07:23.240
Let's go back and enter the e-mail address which doesn't exist quick log in and we get this e-mail address

07:23.250 --> 07:26.210
could not be found or this e-mail could not be found.

07:26.430 --> 07:35.030
Now let's try a valid e-mail address but actually a password which is invalid like this and we get this

07:35.030 --> 07:36.550
password is not valid.

07:36.590 --> 07:39.370
So now we give the user a better feedback.

07:39.410 --> 07:46.880
Now let's implement the same for signing up so I'll copy that and go to my sign up case here and there

07:46.880 --> 07:49.310
I just have different error codes there.

07:49.310 --> 07:52.130
I have codes like email exists.

07:52.130 --> 07:54.270
If that e-mail address exists already.

07:54.560 --> 08:02.370
So I extract my air I.D. the same way but then I check for email exists and if desist ERISA this email

08:03.300 --> 08:04.740
exists already

08:08.000 --> 08:09.710
there is actually only thing I want to check here.

08:09.710 --> 08:15.830
There are obvious errors too which you could get and you can for example simply turn off your validation

08:15.830 --> 08:20.860
here and see which area you're getting if you're sending e invalid e-mail address by logging that error

08:20.870 --> 08:22.950
I.D. and then you can check for that.

08:22.960 --> 08:28.850
Here I'll just implement this message and then for now if a try signing up here with an e-mail address

08:28.850 --> 08:37.070
which I already did use like this I get this e-mail exists already on the other hand if I use a valid

08:37.100 --> 08:44.250
e-mail address of course this just goes through and on firebase then indeed you go to authentication

08:44.250 --> 08:47.530
and refresh this you will see that second user.

08:47.580 --> 08:52.040
So this is how you can add a loading spinner and error handling with authentication.

08:52.080 --> 08:57.420
That's all nice but now it would finally be nice to always leave that screen and go to our app and then

08:57.420 --> 08:59.670
start working with that token which we're getting.
