WEBVTT

00:02.320 --> 00:10.150
Storing the token is great but we need it here in places when we try to send requests to add a place

00:10.210 --> 00:13.520
or to get a place and so on

00:13.540 --> 00:21.440
and the question also is how do we pass the token to these firebase database requests?

00:21.460 --> 00:27.630
The latter is something we can find out, if you search for firebase database auth rest,

00:27.670 --> 00:30.180
there you find the article on how to authenticate

00:30.210 --> 00:31.570
rest requests

00:31.570 --> 00:32.480
and that is what we're doing,

00:32.470 --> 00:43.410
we're sending requests to some restful endpoints to get access to our database, our firebase database.

00:43.470 --> 00:52.340
And there you see that you can authenticate with firebase ID tokens by appending a query parameter which

00:52.340 --> 00:53.200
is auth

00:53.330 --> 00:56.170
and then this ID token which we just stored.

00:56.240 --> 01:00.800
So we need to append this query parameter to our requests,

01:00.890 --> 01:04.380
that of course means that we also need to get access to the token here.

01:04.970 --> 01:12.680
We can get access to this state by turning our redux thunk functions here into a function which just

01:12.680 --> 01:18.520
receives dispatch like here for example of deleting a place into a function that receives dispatch as

01:18.530 --> 01:22.680
the first argument and a get state function as the second. Now

01:22.720 --> 01:25.730
you can name these arguments what you want but that is what they are,

01:25.730 --> 01:28.770
the first is a function that allows you to dispatch actions,

01:28.820 --> 01:32.500
the second is a function that allows you to get access to the state.

01:32.540 --> 01:38.900
The alternative to this pattern would be to simply get this access to the state in the place where you

01:38.900 --> 01:43.430
dispatch these actions, so where you dispatch delete state and so on.

01:43.430 --> 01:51.260
Now with that, what you could do is you could get the token by accessing get state, executing this and

01:51.260 --> 01:53.130
then there you could access the auth slice

01:53.140 --> 01:58.850
we just added and there, this token property and you should check if it's null or if you've got a valid

01:58.850 --> 02:02.180
one and then you could append it to your requests.

02:02.420 --> 02:04.810
So let me prove this to you,

02:04.940 --> 02:12.750
maybe not here for deleting a place, I'll revert it here but where we get the places, here.

02:13.010 --> 02:14.730
Let's update this

02:14.730 --> 02:19.570
accordingly, add the get state argument, get the token here,

02:25.120 --> 02:29.110
auth token and as I said, we should check if it's null or not,

02:29.110 --> 02:39.350
so if token if this is not true-ish, then we might simply return, of course we should maybe also throw

02:39.350 --> 02:46.100
some error but we also should never really reach that point here because we only get to the part where

02:46.100 --> 02:52.030
we can dispatch all these places right at actions if we made it through the auth screen

02:52.040 --> 03:03.900
but anyways. If you got a token here and fix this here by the way, I'll add auth equals token here.

03:04.940 --> 03:12.600
Now with that if we save this file and we reload the app, let's login with valid credentials again

03:13.790 --> 03:20.270
and now you see we don't get an error and I can indeed load my places here because now the token was

03:20.270 --> 03:24.900
indeed successfully attached and that authenticated us to the backend.

03:25.670 --> 03:29.640
Still, this is not the approach I want to use here, 

03:29.900 --> 03:36.050
so let me in the next lecture show you a very reusable way of getting access to the token which will

03:36.080 --> 03:38.600
also be of great advantage later.

03:38.840 --> 03:46.250
For now I will remove this part here, not append the token like this, not get it from the state like this and

03:46.250 --> 03:47.780
get rid of this.

03:47.840 --> 03:50.290
So let me show you how else it could work.
