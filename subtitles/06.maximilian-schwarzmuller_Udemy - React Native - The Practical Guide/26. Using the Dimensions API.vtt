WEBVTT

00:02.290 --> 00:04.500
So we learned that we can use the dimensions API,

00:04.600 --> 00:10.370
let's use it to actually provide a different layout here on the login screen

00:10.510 --> 00:13.890
if we change our device orientation.

00:14.080 --> 00:21.850
So for that, I'll go into my auth screen which is the screen I just talked about and there, the issue we're

00:21.850 --> 00:29.200
actually facing is that we got our view here with all these inputs and then we got the button

00:29.290 --> 00:31.410
and another button and the main text

00:31.690 --> 00:39.120
and that also organized here through this view with flex box and we center everything in the middle

00:39.310 --> 00:45.010
but if we rotate the device, we just don't have enough space and therefore, it still tries to center

00:45.010 --> 00:52.860
everything but the topmost and the bottommost element actually overlap our screen borders.

00:52.870 --> 01:00.060
So what we actually need to do is we need to use a different layout when we rotate the screen,

01:00.070 --> 01:05.500
so if we go back, let's analyze what could we change here in this mode.

01:05.500 --> 01:14.480
Well for example, we could set password and confirm password next to each other because if we take a

01:14.480 --> 01:18.760
closer look, we probably don't need the full width for that.

01:18.770 --> 01:25.340
Now if we move these two besides each other, then we shouldn't have the problem of having too little

01:25.340 --> 01:27.830
space for our button,

01:27.850 --> 01:34.990
additionally we can also remove the please login text here to gain even more space because we have

01:34.990 --> 01:36.250
login up here,

01:36.250 --> 01:38.460
we say switch to login here,

01:38.530 --> 01:41.930
I think it's clear what we want from the user.

01:42.040 --> 01:43.900
So this is our goal,

01:43.960 --> 01:51.550
we want to move password and confirm password next to each other and we want to remove that text

01:51.550 --> 01:52.320
up here,

01:52.660 --> 01:55.910
so how can we achieve this?

01:55.940 --> 02:03.560
Let's move back in our code and let's first of all import the dimensions API from react native,

02:03.570 --> 02:06.580
now let's start by only rendering this text

02:06.750 --> 02:11.880
if we have enough space for it and for that, we need to check the available height.

02:12.300 --> 02:19.110
So what I'll do is I'll add a variable here which we'll name heading text and I'll set this to null by

02:19.110 --> 02:23.760
default but then I'll check if dimensions get

02:23.970 --> 02:26.300
and that I said we can check window and screen,

02:26.370 --> 02:28.930
here you want to pick window most of the time and

02:28.950 --> 02:36.710
we do so here and there we get a width and a height as well as a font scale and a scale property, though

02:36.740 --> 02:43.440
I'm interested in the height we have at our disposal. And here let's say only if we have at least 500

02:43.440 --> 02:44.970
pixels of height,

02:45.030 --> 02:52.260
I want to render my main text so I'm going to cut this from my jsx which I return and set my heading

02:52.260 --> 02:59.400
text variable equal to that main text content here only if this condition is fulfilled.

02:59.680 --> 03:05.230
Then down there in the jsx code which we return, I'll dynamically output heading text which either is

03:05.250 --> 03:09.210
null or indeed our main text.

03:09.210 --> 03:15.030
Now if we save this and we go back and we reload this screen, you now see the heading text is gone and

03:15.030 --> 03:16.470
for this device width,

03:16.740 --> 03:19.240
we now got a UI that works.

03:19.290 --> 03:22.550
Now let's achieve the same for password and confirm password,

03:22.590 --> 03:25.000
let's align both next to each other.

03:25.940 --> 03:29.690
We get them down there and to align them next to each other,

03:29.810 --> 03:35.220
I actually want to wrap them in the view, like this

03:35.460 --> 03:42.080
and now this view should get a different styling depending on well, our dimensions.

03:42.070 --> 03:44.380
Right now if I save this and I reload

03:44.430 --> 03:45.150
the app,

03:46.950 --> 03:52.120
it looks like it did before because they are still ordered from top to bottom

03:54.850 --> 04:04.860
but now let me add a new styling down there which I'll name password container and there, I will set flex

04:04.860 --> 04:07.470
direction to row

04:07.470 --> 04:16.270
if we don't have enough space, so there I'll reach out to dimensions, get window, get the height and if it's

04:16.270 --> 04:25.960
bigger than 500, then I want to use column which would be the default, if it's smaller I'll use row. Now I'll

04:26.020 --> 04:34.420
assign password container to this view I wrap around the two password inputs, so there I'll add a style and reach out

04:34.430 --> 04:36.590
to styles password container

04:37.350 --> 04:41.310
and now let's save this file and reload our page.

04:41.310 --> 04:46.740
Now what you see is that once you reload, they are next to each other but of course they're taking too

04:46.740 --> 04:47.760
much space.

04:48.650 --> 04:58.820
Now what we can do to fix this is we can wrap our inputs here in a view each so that each input has

04:58.820 --> 05:00.490
its own wrapping

05:00.640 --> 05:01.280
view

05:06.450 --> 05:09.210
and then we give each of these views a new style,

05:13.630 --> 05:21.330
password wrapper maybe where the width is let's say 45%,

05:21.490 --> 05:24.080
we assign this to our wrapping view,

05:24.090 --> 05:31.060
reset style, styles to password wrapper

05:34.820 --> 05:41.070
and now with that, we also go back to the password container which wraps these two wrapper views

05:41.570 --> 05:50.300
and there, we now set justify content to align it along the main axis to space between, to have some

05:50.300 --> 05:51.560
well, space between,

05:51.560 --> 05:56.980
now if we go back, this is what it would look like.

05:56.980 --> 05:58.410
Now that looks good,

05:58.410 --> 06:04.480
it was a little bit of effort due to flex box where we had to do some wrapping here to have everything

06:04.480 --> 06:05.710
look good,

06:05.710 --> 06:09.610
the main issue we have with that approach is it looks good here,

06:09.760 --> 06:15.670
we respect the dimensions and if we would have more height available, it wouldn't look like this.

06:15.680 --> 06:23.280
The problem just is if we go back, it doesn't adjust if we rotate the device, if we reload it here,

06:24.010 --> 06:25.640
it now looks as it should though

06:25.690 --> 06:33.820
here we now got the problem that this is wrong but that can easily be fixed by simply adjusting our

06:34.820 --> 06:43.520
width on the wrapper here for example by also adding this check and only using the 45% if we do have

06:43.520 --> 06:45.150
less height available than this,

06:45.150 --> 06:46.980
use 100% otherwise.

06:47.030 --> 06:53.130
So if we do this and we now reload, we go back to the original layout

06:53.300 --> 06:55.880
but the problem is it never adjusts,

06:55.910 --> 07:00.050
if we rotate we always stay in that mode and only if we reload,

07:00.050 --> 07:07.100
so if the user would start the app in that mode, he would get the right set up. So that is not really

07:07.110 --> 07:08.210
responsive,

07:08.250 --> 07:09.940
only partly

07:10.170 --> 07:11.930
so we should improve this.

07:11.940 --> 07:13.430
How can we improve this?
