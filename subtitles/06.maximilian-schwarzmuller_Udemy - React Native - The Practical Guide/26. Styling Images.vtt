WEBVTT

00:02.240 --> 00:07.730
Now the good thing is of course you don't have to use this default width and height.

00:07.730 --> 00:14.310
You can set your own so you can get a gift this image of style and I'll do this here.

00:14.350 --> 00:22.490
I'll add an image property in the style sheet and give this a width of let's say 80 percent of the parent

00:22.550 --> 00:28.850
views so 80 percent of this screen view so 80 percent of the screen with therefore and maybe a height

00:28.880 --> 00:30.260
of 300 pixels.

00:30.260 --> 00:36.380
And now we can assign this image style here to this image component by using the style prop there and

00:36.380 --> 00:38.990
pointing at Styles image like this.

00:39.000 --> 00:46.850
If we do that now we see that's way better and now the image fits onto the screen and is resized accordingly.

00:46.850 --> 00:50.560
Now by the way you can also control how the image is resized.

00:50.570 --> 00:56.420
If you define a width and height that doesn't meet the aspect ratio of the original image.

00:56.420 --> 01:02.750
So if you're with two height aspect ratio isn't the same as the image file and chances are that you

01:02.750 --> 01:04.470
have a different aspect ratio.

01:04.610 --> 01:12.670
Well then you can set a resize mode here and this simply is a string where you can choose from different

01:12.730 --> 01:13.550
options.

01:13.630 --> 01:20.260
And for example cover is an option where you will resize to image to keep its aspect ratio and fit it

01:20.260 --> 01:26.980
into this box here for contain it's similar but for contain it will not necessarily take the entire

01:26.980 --> 01:28.330
box as you can see here.

01:28.360 --> 01:33.430
Here it contains the image and simply shrinks it so that it doesn't exceed the width and height of the

01:33.430 --> 01:35.950
box we reserve for it for a cover.

01:35.950 --> 01:41.740
It also keeps the aspect ratio but doesn't necessarily shrink the image to fit into this box instead

01:41.740 --> 01:48.430
of just the crops the image beyond the boundaries of the access it would exceed otherwise.

01:48.490 --> 01:53.880
So we can simply play around with easier different settings to get to the setup you want.

01:53.920 --> 02:01.480
Cover is the default but in case you want to keep the whole image and you don't want to crop it on any

02:02.050 --> 02:06.770
axis then you could set this to contained and you can play around with the other values too.

02:06.790 --> 02:09.110
I'll go with cover which again is the default.

02:09.140 --> 02:13.960
So you could remove this prop here but to show that you can set this or leave it here.

02:13.960 --> 02:20.390
Now this allows you to add an image here on the screen and of course you can assign more styles.

02:20.410 --> 02:24.010
For example we could try to give it as rounded corners by now.

02:24.010 --> 02:30.940
Also adding a border radius here and setting this to let's say 200 so really large border radius to

02:30.940 --> 02:32.800
render a rounded image.

02:32.800 --> 02:39.580
Now that's looking a bit strange though a better way of setting this is to simply wrap the image into

02:39.580 --> 02:48.740
a surrounding view like this and then assign to styles that should add rounded corners or drop shadows

02:48.740 --> 02:51.670
or anything like that to date surrounding view.

02:51.680 --> 02:58.130
So there you could refer to the image container prop or anything like that and add this down here in

02:58.130 --> 03:05.560
your style sheet and now on that image container you could set up a border radius of let's say two hundred

03:06.240 --> 03:10.050
maybe also border width of three and a border.

03:10.080 --> 03:11.480
Color of black.

03:11.490 --> 03:13.660
Soledad we also have a visual border.

03:13.800 --> 03:21.000
And if we do that and safeties we get this strange look the reason for this is that we haven't set a

03:21.000 --> 03:25.770
width and height on the container and therefore we should do this and actually use width and height.

03:25.770 --> 03:30.480
We were sitting on the image set it on the container instead and on the image we can now simply use

03:30.480 --> 03:36.630
a width of one hundred percent and a height of 100 percent because the image is inside of this container.

03:36.630 --> 03:40.230
So a 100 percent here and here means it takes the width and height.

03:40.230 --> 03:41.610
We're setting up on the container.

03:41.730 --> 03:47.280
But now the container also has these values so that the container is sized appropriately.

03:47.280 --> 03:51.660
Now what you can see is something strange though the image overlaps the container.

03:51.660 --> 03:53.510
We see the rounded corners.

03:53.520 --> 03:59.700
We see the circle here in the background here with these black corners or edges here.

03:59.700 --> 04:03.670
But the image isn't corrupt into that circle.

04:03.750 --> 04:04.900
So to say.

04:04.900 --> 04:09.120
And that can be achieved by adding another property on the container that holds the image.

04:09.410 --> 04:12.650
And that's the overflow property with the value of hidden.

04:12.660 --> 04:18.030
That means that any child inside of the container that would kind of break out of the container that

04:18.030 --> 04:23.510
would go beyond the boundaries of that container is actually clipped is cut off.

04:23.760 --> 04:30.420
So that now we actually squeezed the image nicely into that container with the rounded corners we got

04:30.420 --> 04:31.440
here.

04:31.470 --> 04:36.490
Now what we can also add in addition is a little bit of margin on the vertical axis.

04:36.660 --> 04:41.350
Maybe a 30 to have some spacing around the image top and bottom.

04:41.520 --> 04:44.910
And with that this doesn't look too bad I'd say.

04:44.910 --> 04:51.420
Now one thing you'll notice is that it's not looking like a perfect circle here on Android.

04:51.430 --> 04:55.990
The reason for data is that our border radius isn't calculated perfectly.

04:55.990 --> 04:58.570
The border radius should be a half of your width and height.

04:58.570 --> 05:01.060
And the problem is width and height aren't equal.

05:01.060 --> 05:06.380
So we should actually render a square here and then add a border radius to get a perfect circle.

05:06.490 --> 05:13.510
So disillusion could be that we set the width of 300 here on the image container and have the same with

05:13.510 --> 05:13.960
as height.

05:13.980 --> 05:18.640
Therefore and now use a border radius that is half of that which is one hundred and fifty and now we'll

05:18.640 --> 05:21.600
get a perfect circle on both devices.

05:21.600 --> 05:28.480
This also means that on very small devices our image here our circle might not fit on the screen if

05:28.480 --> 05:35.590
the devices have a screen that's smaller than 300 pixels regarding its width but will learn about tools

05:35.590 --> 05:41.830
how to find out which device with our device has and how we can adjust cells to that in the next module.

05:41.830 --> 05:47.380
For now let's go with the hardcoded value here which looks good on these screens here and we'll again

05:47.500 --> 05:50.950
cover tools that help us with our device screens later.

05:50.950 --> 05:56.380
So this is how you can add image and how you can style it how you can make it rounded like you do here

05:56.380 --> 05:59.680
which of course don't have to do but which looks nice in this case here.

05:59.680 --> 06:03.420
Think how you can do this if you have to image as a file here.

06:03.430 --> 06:05.530
Now what if the image is coming from the Web though.
