WEBVTT

00:02.180 --> 00:06.790
So you learned how you can use to React Native seal ie to create React Native projects.

00:06.800 --> 00:12.260
These are projects which have no connection to Expo and which are therefore totally managed by you and

00:12.260 --> 00:19.880
where you can get for at any third party package actually including some Expo packages which are available

00:19.940 --> 00:21.710
outside of the Managed workflow as well.

00:22.160 --> 00:23.980
But you need to configure everything on your own.

00:24.020 --> 00:28.850
That can be easy depending on the package you're using but it also can be harder.

00:28.850 --> 00:34.150
Now there is kind of a middle away between the expo managed workflow and the pure.

00:34.160 --> 00:40.120
You need to do everything on your own workflow and that's the expo bear workflow.

00:40.130 --> 00:42.820
Now what's the bare workflow here.

00:42.980 --> 00:49.880
The bare workflow includes react native app as you would created with the react native seal.

00:49.890 --> 00:58.040
I so not a managed app with Expo as a wrapper but a native app debt however is already pre configured

00:58.310 --> 01:01.470
to support a lot of the Expo packages.

01:01.490 --> 01:06.770
Not all but the expo team is working on making more and more available outside of the managed workflow

01:07.190 --> 01:12.560
but a lot of them are already included and you could check these supported API is page here to get an

01:12.560 --> 01:17.230
idea for which features you can use in the bare workflow as well.

01:17.240 --> 01:23.150
The idea behind the better workflow is that you have is raw native development experience where you

01:23.150 --> 01:30.140
need to use Android Studio and X code so you don't have to expose Seelye and the Expo client helping

01:30.140 --> 01:33.610
you as a you need to do that manually with the help of three act native Seelye.

01:34.040 --> 01:38.420
But we're adding native functionality is easier.

01:38.450 --> 01:44.390
So where you need to do less configuration may be where you can use these powerful native packages that

01:44.420 --> 01:50.700
Expo offers you where you can use all of that without having the limitations Expo gives you.

01:50.750 --> 01:56.480
Though I want to put limitations into quotes because you don't have that many limitations actually in

01:56.480 --> 01:57.900
the managed workflow.

01:58.100 --> 02:03.530
So let me show you a how to get started with that bare workflow and of course for Dad you can also check

02:03.530 --> 02:06.250
the official docs here.

02:06.290 --> 02:11.750
You need to have the expo seal I installed and we installed that at the beginning of the course of course

02:11.750 --> 02:13.830
for creating our managed project.

02:14.030 --> 02:20.810
And you also need to have t react native seal I installed in addition and that's all important.

02:20.900 --> 02:26.660
You should generally have to setup which is described here on the react native docs under react native

02:26.660 --> 02:32.780
seal ie quick start so make sure you set up your system as described here for the different platforms

02:32.780 --> 02:38.300
the different operating systems you're targeting so make sure you install Android Studio and X code

02:38.300 --> 02:43.700
and all the dependencies you'll find here because you will use this workflow you just get a little bit

02:43.700 --> 02:52.720
more than this raw empty project you have here so once you have all of that installed you can create

02:52.960 --> 03:01.850
a new better workflow package with this command or in general by running Expo init and then any project

03:01.850 --> 03:11.390
name of your choice like r n with Expo bear and make sure you're running this command in a path where

03:11.390 --> 03:13.640
you want to create this project folder.

03:13.880 --> 03:20.600
So if you run this now this will create a new export project and this is also the prompt we saw at the

03:20.600 --> 03:22.110
beginning of the course there.

03:22.250 --> 03:24.090
I chose blank.

03:24.260 --> 03:28.670
And please note that this of course was part of the Managed workflow.

03:28.670 --> 03:30.500
What I chose at the beginning of the course.

03:30.620 --> 03:36.500
Now we can choose the better workflow by going to the bare minimum selection here and hit enter.

03:36.500 --> 03:42.980
And what this does is it now creates a new project and we can now enter a name here for the app that's

03:42.980 --> 03:49.310
visible on the home screen air an R and bare in here all.

03:49.630 --> 03:51.870
And here also are in bear.

03:51.900 --> 03:55.260
So she was stabbed here hit enter and now this creates a new project.

03:55.260 --> 03:57.920
I don't want to use yarn and I'll use NPM instead.

03:58.050 --> 04:01.090
This will create a new project a new react native project.

04:01.170 --> 04:09.480
Pretty much like react native init would do so if you only used direct native Seelye but pre configured

04:09.870 --> 04:16.930
such that you can already use a lot of these supported or all of these supported API is not important

04:17.500 --> 04:23.170
the projects add up we're getting here it could all to be achieved with this react native seal I created

04:23.280 --> 04:28.660
set up where I didn't use the exposed seal I had all because the magic happens with the help of these

04:28.900 --> 04:31.710
react native uni modules here.

04:31.870 --> 04:38.440
This is a package in the end provided by the export team which helps you tap into the native device

04:38.440 --> 04:44.680
features you can get in the managed workflow outside of the Managed workflow as well.

04:44.680 --> 04:50.230
Now important if you visit to get a page of the react native uni modules and you can simply search for

04:50.230 --> 04:58.140
this name to find it you'll also find instructions on how to add this to an existing react native app.

04:58.190 --> 05:03.620
Here you find instructions how you need to configure this and all this configuration which is described

05:03.620 --> 05:03.980
here.

05:03.980 --> 05:09.170
So all these things here right which you need to do if you would want to use this package and therefore

05:09.170 --> 05:13.450
the expo native features in a normal react native non Expo app.

05:13.610 --> 05:17.880
You would have to do the manually for such a project created with three act native Seelye.

05:18.160 --> 05:20.050
And that's exactly what Expo init.

05:20.060 --> 05:26.930
With this bear workflow does for us it gives us such a react native project as if we would have created

05:26.930 --> 05:32.720
it with three native Seelye and it reconfigure is it falling all these steps.

05:32.750 --> 05:34.480
So then we don't have to do that.

05:34.640 --> 05:37.580
So that's something we can take advantage of of course.

05:37.580 --> 05:40.460
So let me open this project.

05:40.510 --> 05:46.660
This is now the R N with Expo bear project I just created and there you'll find some similarities to

05:46.690 --> 05:49.660
the react native project we created with the Seelye.

05:49.690 --> 05:57.400
Pretty much the same conflict files the same starting app J.S. content now here actually Axl used an

05:57.400 --> 06:01.990
older version of React Native to create this which is why this looks a little bit different but in the

06:01.990 --> 06:05.170
end you'll get the same setup as with did you react native seal.

06:05.160 --> 06:11.230
I but as I mentioned with the android and I w folder with these Android I w projects pre configured

06:11.560 --> 06:15.440
as described on the uni modules page so that you don't have to do this.

06:15.730 --> 06:24.010
And with this pre configuration you can now easily add third party packages you can add any third party

06:24.010 --> 06:26.030
package you could for example now.

06:26.050 --> 06:29.260
Also again use to react native image picker.

06:29.260 --> 06:34.030
So what we added before what we couldn't add to a managed workflow app.

06:34.030 --> 06:40.330
This package here you can easily add this to a better workflow app because it is just react native app

06:40.360 --> 06:47.770
without expo so you can add this but now unlike in a normal react native only app without export you

06:47.770 --> 06:54.220
can also bring any of the Expo API which are listed here like the expo location package which we used

06:54.220 --> 06:55.320
earlier in the course.

06:55.420 --> 07:01.600
You can now easily install this by following the installation instructions you're linked to here for

07:01.600 --> 07:05.950
the better workflow you would then have to follow the installation attractions you find here on the

07:05.950 --> 07:12.340
Expo location package there you learn that you can install it with this command then run port install

07:12.340 --> 07:16.240
in the IOW directory and no extra setup for Android is required.

07:16.290 --> 07:22.360
So fair enough not too difficult and therefore you could maybe say you get the best of both worlds.

07:22.570 --> 07:30.060
You have a native app With React Native Seelye and you can still tap into some Expo features though

07:30.070 --> 07:36.370
be aware of course that if you run this app you do this of course with React Native run Android for

07:36.370 --> 07:42.900
example and therefore does requires Android Studio it builds it locally on your system you different

07:42.930 --> 07:48.130
takes a bit longer you need to set up everything on your system and for deploying the app and so on

07:48.130 --> 07:55.360
you also have to manage it all here in on your local machine so you get no convenience features which

07:55.390 --> 08:00.370
Expo gives you and new managed workflow where this building and testing is super quick where you can

08:00.370 --> 08:02.760
quickly tested on the real device and so on.

08:02.860 --> 08:04.560
All of that is missing here too.

08:04.690 --> 08:10.450
You have to react native project without Expo but using certain Expo API AIS is easier.

08:10.450 --> 08:17.580
That's the idea behind the bare workflow and since Expo has many amazing API is that of course is a

08:17.580 --> 08:25.050
pretty good reason for using it because these API as these packages are also pretty guaranteed to be

08:25.050 --> 08:26.340
continued and maintained.

08:26.400 --> 08:30.660
Which is not necessarily the case for all other third party packages.

08:30.660 --> 08:32.700
You might be adding to your react native apps.
