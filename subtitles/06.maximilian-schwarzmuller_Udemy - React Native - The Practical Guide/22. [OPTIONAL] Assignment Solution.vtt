WEBVTT

00:02.960 --> 00:09.660
So word is successful Let's now split this component up into subcomponents together.

00:10.180 --> 00:18.190
Four days of first of all create components in the components folder one will be the place in Port component.

00:18.590 --> 00:28.460
Let's add a place in Port touchiest Falder and one will be the Les's list component.

00:28.730 --> 00:31.240
So let's add a place list chase folder.

00:31.520 --> 00:33.680
Let's start with the place input.

00:33.680 --> 00:39.540
Now the place input will of course handle user input through text input.

00:39.590 --> 00:42.390
We got two options for creating this component.

00:42.400 --> 00:49.860
Now we can create a CLOS based component where we handle two were binding inside of that component so

00:49.870 --> 00:53.760
that we still handle the important state in the app component.

00:53.790 --> 00:56.070
The place is aere buddy.

00:56.150 --> 01:02.330
You will hide related state what the user entered is managed in the subcomponent.

01:02.570 --> 01:09.690
Alternatively you handle both states and the app component and pass it and receive it with props to

01:09.690 --> 01:12.110
and from last input.

01:12.110 --> 01:17.720
Now I would go for the approach where place input is a class based component and we handle the user

01:17.720 --> 01:18.990
input there.

01:19.040 --> 01:29.050
So let's import react and component pulled out as a separate named import from react.

01:29.720 --> 01:39.290
And there are no trade clause which name lays input which extends component and which I then export

01:39.560 --> 01:41.290
as the default of this fall.

01:41.330 --> 01:45.080
Just like you do it in a web based re-act app.

01:45.080 --> 01:47.540
So that's my place input.

01:47.540 --> 01:54.110
Now the goal is to bring over the relevant GSX code into the render functional place and put.

01:54.440 --> 01:57.280
And of course managed the relevant state here.

01:57.410 --> 01:59.590
Now for this let's go back to Yapp component.

01:59.780 --> 02:01.760
Let's start with the J is X code.

02:01.910 --> 02:05.480
We're talking about this the container the input container.

02:05.660 --> 02:13.130
Let's catgut out of the app component and add it to place inputs render function to the return statement

02:13.130 --> 02:14.840
there to be precise.

02:14.840 --> 02:19.130
Keep in mind that you of course need to have a wrapping element like this view just like in web based

02:19.220 --> 02:25.160
re-act apps though you can use that work arounds reacts 16 office you like auxiliary components.

02:25.640 --> 02:27.780
So we get this view here.

02:28.100 --> 02:31.200
We should also bring the styling into the component.

02:31.340 --> 02:37.720
So in our app component we're talking about the input container place and put in place button styles.

02:37.880 --> 02:39.880
Let's cut them from the stylesheet here.

02:40.890 --> 02:48.970
And let's go over to last input and create a new constant styles in here where we use Stahl's she'd

02:49.330 --> 02:55.210
create and pass that to the object we passed to create.

02:55.450 --> 03:01.620
So now we have these styles and here and therefore our GSX code where we access these styles on the

03:01.620 --> 03:04.660
styles constant will still work.

03:04.840 --> 03:11.650
Now for it to work we also need to import stylesheet and we need to import the new button and text and

03:11.650 --> 03:15.960
put all these things are of course imported from re-act native.

03:16.090 --> 03:18.090
So let's import them from there.

03:18.160 --> 03:20.420
That's at the airport to read native.

03:20.590 --> 03:29.880
And then there let's import new text and put Latin and style sheet.

03:29.920 --> 03:36.180
The things we're using in this component here with that we got a nice place in what but we need to handle

03:36.180 --> 03:41.080
the state when the user types and the value we bind to the text input.

03:41.100 --> 03:47.700
So back to the app component let's copy the place name changed handler and state they've finished definition

03:47.700 --> 03:48.440
there.

03:48.840 --> 03:57.180
And let's head over to place input and there I now want to add both add to state remove the places array

03:57.180 --> 04:04.640
though and all that place name changed handler no bouffe already is hooked up to the exact same names.

04:04.680 --> 04:10.530
So as long as you didn't change the names in the state or of the handler you're copied J as X code should

04:10.530 --> 04:12.110
still work.

04:12.120 --> 04:18.540
Now we also need to make sure that when we click the button we actually do pass that information to

04:18.540 --> 04:22.170
whichever components implements plate's input.

04:23.590 --> 04:25.760
So for this all change deeper up.

04:25.780 --> 04:28.620
I target on press there.

04:28.810 --> 04:36.370
I will fire on plays at it for example you can name this for all your whatever you want.

04:36.880 --> 04:45.110
Now when using plays it but you just have to add on Place at it and triggers some handlers some method.

04:45.160 --> 04:52.550
When this occurs and you will receive Well what but now you would receive the default press event which

04:52.550 --> 04:55.830
might hold interesting formation but not the one we need.

04:56.300 --> 05:03.320
So instead what I want to do here is I'll use an inline arrow function and it will instead emit this

05:03.410 --> 05:05.750
state last name here.

05:05.750 --> 05:11.290
So the latest place name we have will be admitted up on a click on this button.

05:11.450 --> 05:16.630
The alternative and you're able reverse all of that and go back to place mid handler.

05:16.970 --> 05:26.740
The alternative is to also copy the plays submit handler from our app component added to lace and put

05:27.250 --> 05:34.350
below the place name changed handler still check if the place name is valid and then not set the stage

05:34.390 --> 05:37.810
thereafter but instead execute this prompts.

05:37.830 --> 05:47.080
Now maybe on Place at it whichever name you want to use and pass this state police name on this is maybe

05:47.080 --> 05:52.340
the more elegant solution because it allows you to check the validity of the name inside the place and

05:52.340 --> 05:57.360
put component which might be the place where it makes more sense logically.

05:57.400 --> 06:04.810
So on place added the property which will be fired on our place input component whenever we entered

06:04.960 --> 06:11.600
a valid place and hit that button that allows us to now implement to place input component.

06:11.800 --> 06:17.020
Let's go back to the app component and let's import our newly created component there.

06:17.200 --> 06:25.060
It's called place in pote and we ordered from source components place input place and put like this.

06:25.300 --> 06:33.340
Let's now use place in Port here where we previously had our place in Port area like this can be a self-closing

06:33.340 --> 06:34.110
component.

06:34.950 --> 06:45.980
And now there we need to hook up on Les's Adut or whichever property name you chose here in your place

06:45.980 --> 06:51.170
and put a component on place added will give us the name of the place.

06:51.230 --> 06:58.880
So it is here that I want to trigger some method which actually adds displays to our places array.

06:59.030 --> 07:00.590
Now we already get such a method.

07:00.620 --> 07:07.540
The place submit handler let's name it place added handler to be in line with the proper name and in

07:07.540 --> 07:09.960
there we no longer need to check if the place misspell it.

07:09.980 --> 07:11.750
We know that it will be.

07:11.750 --> 07:17.630
Instead we need to be able to receive the last name as an argument here because we will get it by our

07:17.630 --> 07:23.990
place and put component and that we still set the state and we'll will keep the old approach of doing

07:23.990 --> 07:24.450
that.

07:24.530 --> 07:32.350
But we concat the place name we receive as an argument of course we can now get rid of the place name

07:32.350 --> 07:38.270
changed Taylor because we no longer handle data component and of the place name here in our state.

07:39.410 --> 07:40.920
Now we get to place input.

07:40.930 --> 07:41.850
Implement that.

07:41.900 --> 07:47.420
Now to make this work let's take place at at hÃ¤ndler and make sure that this is the method which is

07:47.420 --> 07:53.030
executed on the place at event here on our custom component.

07:53.060 --> 07:57.240
Once you do it this save all the falls and go back to your application.

07:58.070 --> 08:06.730
Reload it and get an error cannot find variable components might have a typo in place input.

08:06.780 --> 08:07.150
I do.

08:07.170 --> 08:13.510
We should of course extend component here not components so let's save this and then it should reload.

08:13.530 --> 08:16.450
If it doesn't do it manually.

08:16.620 --> 08:18.160
And now let's try this again.

08:18.240 --> 08:19.270
So you're on the right tonight.

08:19.290 --> 08:22.480
I guess it did a full reload which is why my old place are gone.

08:22.800 --> 08:26.140
But adding them again seems to work nice.

08:26.140 --> 08:32.950
Saw a custom input component works and as you see from a styling perspective there is no difference.

08:32.970 --> 08:36.060
This still all works just nice.

08:36.060 --> 08:37.340
We do it like this.

08:37.410 --> 08:41.880
It works ask before but we got a leaner app component.

08:41.940 --> 08:44.250
Now the same for the list item.

08:44.250 --> 08:46.090
This can be a functional add.

08:46.170 --> 08:49.980
The place list excuse me this can be a functional component.

08:50.130 --> 08:55.890
We don't need to manage any state in here so place list will just receive some props and then render

08:55.890 --> 09:04.560
some j as X. so therefore let's import re-act from react to be able to write J as X will also need some

09:04.560 --> 09:07.270
components from re-act native for sure.

09:07.290 --> 09:14.890
So let's add these import to and then export this as a default place list.

09:15.830 --> 09:22.140
Let's now go back to the app component and copy that view here which renders our list.

09:22.270 --> 09:25.540
And let's head over to the place list.

09:25.870 --> 09:30.910
I will actually use a real function body with curly braces there and the return statement not to use

09:30.910 --> 09:32.030
the shortcut.

09:32.560 --> 09:40.240
I want to render my view and this of course uses places output which is my array of list items.

09:40.240 --> 09:43.830
So let's go back to the component there.

09:43.930 --> 09:46.820
Here we create this place output constant.

09:46.960 --> 09:52.570
Let's cut it from the render function the app component and let's add it to the place list in front

09:52.570 --> 09:53.900
of the return statement.

09:54.070 --> 09:57.910
So that displaces output concept can now be output here.

09:58.100 --> 10:01.630
For that we now need to import our a custom list item component.

10:01.810 --> 10:06.140
And of course the view component from re-act native because we're using that here too.

10:06.400 --> 10:09.970
So let's add both imports we got that from the view already.

10:10.000 --> 10:17.110
Let's now import list items from let's go up one level into the list item folder and the list item file

10:17.830 --> 10:21.380
and we can therefore remove that import from the app component.

10:21.430 --> 10:23.530
We no longer need that there.

10:23.750 --> 10:31.460
Now styling Wise I want to make sure that my placeless container still receives the list container styling.

10:31.850 --> 10:41.040
So will all the imports style sheet in my place list component then create a new constant Stahl's your

10:41.770 --> 10:43.390
style sheet.

10:43.570 --> 10:57.250
Create and copy over the list container style from my app component into this stalls here hear so that

10:57.250 --> 11:05.140
my J is X code where I refer to it works again and gives this list to correct Stolley.

11:05.250 --> 11:12.980
Now last but not least we need to be able to receive deep places why up props for that.

11:13.140 --> 11:19.900
This state places needs to be replaced with this crop's places and that this keyword is removed at shust

11:19.920 --> 11:22.460
proper place because we got props here.

11:22.830 --> 11:27.590
So now we just expect to get a place of sprawl on our custom component.

11:28.050 --> 11:35.210
Let's use our custom component back in the app component we can import it.

11:35.330 --> 11:46.040
So let's import place a list from an out source folder components place list and their place list.

11:46.190 --> 11:48.500
Let's use it in our is X code here.

11:48.510 --> 11:55.520
Place list self-closing element and we need to pass a places property to it if you remember because

11:55.520 --> 12:01.690
we got it here on our prop's the last prop we pass.

12:01.790 --> 12:05.630
Of course referring to does state license.

12:05.930 --> 12:11.240
And now we get a nice approach where Arap important is to container managing the state.

12:11.240 --> 12:15.100
And then we use our custom components to pass the state down there.

12:15.990 --> 12:23.400
We have a very clean app component therefore And if we have a look at our GSX code we only use the you

12:23.400 --> 12:29.340
from Riak native and stylesheet so we can remove the text import.

12:29.340 --> 12:38.450
We can also remove text input and button with that save all these faults make sure all files were saved.

12:38.780 --> 12:43.350
And now if you reload both apps really ensured that we have the latest code running.

12:43.640 --> 12:44.680
Let's try this again.

12:44.690 --> 12:47.870
Let's output Munich here on Android.

12:48.110 --> 12:53.640
And let's maybe add Mumbai and let's do the same here.

12:53.650 --> 13:03.450
Here maybe with San Francisco and their ofter let's output New York.

13:03.670 --> 13:12.220
So we now got a working input analyst and we see how we can work with custom components and react native

13:12.220 --> 13:15.480
components in a re-act native Vare.

13:15.670 --> 13:17.450
We made great progress.

13:17.590 --> 13:19.820
Let's now see what else we can do here.
