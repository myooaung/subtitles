WEBVTT

00:02.260 --> 00:08.030
To make sure that we can all have orders in his application we'll repeat something we did before.

00:08.050 --> 00:13.940
We'll work on the orders screen and we'll work on our redux logic so that we can store orders.

00:14.020 --> 00:15.980
So let's start by adding in your reducer.

00:16.060 --> 00:22.060
The orders jazz fall which holds our orders reducer and of course will all the to actions follow where

00:22.060 --> 00:26.280
we manage our order related actions to orders shares fall as well.

00:27.010 --> 00:33.910
So let's start with the orders J.S. reducer is fall here and again as always will want to have some

00:33.910 --> 00:41.020
initial state here which also kind of defines how our data is shaped in there and orders will be really

00:41.020 --> 00:42.640
simple in this application.

00:42.640 --> 00:46.660
It'll be just an array of orders that that's really all we need.

00:47.390 --> 00:53.630
Then we can export a default function here which is our reducer which of course has a state that's initialized

00:53.630 --> 01:00.830
with the initial state that receives an action and that of course is all handled by redux and we return

01:00.830 --> 01:01.520
our state here.

01:01.520 --> 01:07.580
But of course typically we also then want to switch on the action type and handle a couple of different

01:08.300 --> 01:13.350
cases here as we can already add this switch statement now.

01:13.380 --> 01:19.130
Regarding the cases we want to handle at the actions we want to handle all there is.

01:19.130 --> 01:26.500
There is one action I want to handle right now and that is my ADD order actions so add order.

01:26.510 --> 01:34.390
Also looks like a fitting identifier and then I'll export my ADD order.

01:34.910 --> 01:40.450
Action creator here which should receive two things now.

01:40.550 --> 01:47.180
My card items or the items that are part of the order but these are my card items the end and of course

01:47.180 --> 01:52.240
the total amount and that's of course all the data we have in the card in the end we manage the card

01:52.270 --> 01:52.550
right.

01:52.550 --> 01:58.760
We have a card total amount and we have the items of the card and since we order our whole card it of

01:58.760 --> 02:03.380
course makes sense that this data ends up in the order.

02:03.520 --> 02:08.900
Now here in the action creator we get for return our new action object and this action object has a

02:08.900 --> 02:17.240
type which is at order and then for example order data key where we merge our card items store them

02:17.240 --> 02:23.270
in a card and items property and then amount holds total amount for example.

02:23.270 --> 02:29.660
Now it's up to you whether you passed us in one merged order data property or if you have two or more

02:30.140 --> 02:33.690
properties as part of your action object.

02:33.720 --> 02:37.710
This is the action back to the reducer what should happen when we get an order.

02:38.580 --> 02:45.040
Well I want to create a new order object and for this justice before I'll work with my own models.

02:45.090 --> 02:52.110
Let's go to the models folder and there add a ordered jazz file where we have a class order which will

02:52.110 --> 02:52.800
export.

02:52.830 --> 02:58.890
So today again don't forget this in there we get a constructor that allows us to create a new order.

02:58.890 --> 03:04.320
Now how should the order look like our order should have an I.D. of course which is not the product

03:04.320 --> 03:04.700
that.

03:04.770 --> 03:10.970
Because we can of course order the same product multiple times and therefore order is totally detached.

03:11.040 --> 03:13.650
In addition order can hold more than one product.

03:13.650 --> 03:16.380
In the end we order our whole cart there.

03:16.380 --> 03:18.570
So order has a standalone I.D..

03:18.750 --> 03:26.160
It will it gets the items the total amount and order all needs a date of course because when we make

03:26.160 --> 03:29.430
an order we want to store that state when it was made.

03:29.940 --> 03:31.500
And then I'll store all that data.

03:31.500 --> 03:42.160
Get my d get my items here get the total amount and also get the date with that.

03:42.170 --> 03:49.310
Let's go back to the reducer to the orders reducer and see what we can do with the order a stair India.

03:49.340 --> 03:53.260
I want to handle the add order a case right now which is the only action I have.

03:53.270 --> 04:01.140
So you need to import does action identifier of course and there I want to create a new order store

04:01.160 --> 04:01.820
in the New Order.

04:01.820 --> 04:07.960
Constant with the order model we just created which India for all to have to import.

04:08.030 --> 04:14.030
Now if the new keyword we can create a new javascript object based on that class and there we need to

04:14.180 --> 04:17.330
I.D. the items the total amount and to create a date.

04:17.330 --> 04:23.040
Now we only get the items in the total amount as part of our action here as you can tell.

04:23.240 --> 04:28.630
Now the idea is something will later generate dynamically on a server for the moment.

04:28.640 --> 04:36.530
I'll use a dummy pseudo unique I.D. with new date to string a date of course is a built in javascript

04:36.560 --> 04:42.140
object and this in the end generates an I.D. which is kind of unique.

04:42.140 --> 04:48.230
Technically we could create two orders at the exact same timestamp at the exact same millisecond though

04:48.230 --> 04:52.340
in our app where we cleared a card after pressing add order or order.

04:52.340 --> 04:54.230
Now this will not really be possible.

04:54.230 --> 04:57.470
So this is a good dummy idea for the moment.

04:57.470 --> 04:59.050
It should be a string so that's important.

05:00.110 --> 05:06.170
And in addition to that the items of course that can be stored we get this on our action right.

05:06.170 --> 05:10.770
The action has to use this order data property and in there we'll have the items.

05:11.060 --> 05:16.580
So action order data dot items gives us the items for the total amount we can use.

05:16.580 --> 05:17.280
Action Dot.

05:17.330 --> 05:20.250
Order data dot.

05:20.450 --> 05:23.810
And then there we have to surmount property which we can extract.

05:23.810 --> 05:25.650
So there we can use this.

05:25.850 --> 05:31.700
Last but not least for the date I of course want to generate the timestamp here with new Date.

05:31.700 --> 05:37.730
This built in JavaScript constructor if we executed like this gives us the current timestamp stored

05:37.940 --> 05:41.060
in a javascript object at the end.

05:41.060 --> 05:46.700
Now it is New Order just needs to be added to our orders array so we return and use state snapshot here

05:47.000 --> 05:48.960
where we copy the old state again.

05:49.010 --> 05:53.650
We don't really have any other state in here so copying it is redundant.

05:53.750 --> 05:55.410
If we replace it anyways.

05:55.460 --> 06:01.160
But in case you had a more complex state snapshot here for this slice of your redux store you would

06:01.160 --> 06:04.550
want to make sure you copy the average state so that you don't lose it.

06:04.550 --> 06:11.510
That's why I added here and then I said orders equal to state orders and now call cone cat on this array

06:11.510 --> 06:17.450
which is a built in javascript function that adds a new item to an array and returns a new array that

06:17.450 --> 06:18.530
includes that item.

06:18.560 --> 06:24.040
So the old array stays untouched the new Array is returned and that of course allows us to update this

06:24.040 --> 06:29.450
in an immutable way where we never touched your original data but we set the new state by creating a

06:29.450 --> 06:36.590
brand new Array that includes the new object and they are simply concatenate my new order with that

06:36.770 --> 06:45.590
we can go to the app J.S. file and import the orders reduce our data from the store folder to rid users

06:45.590 --> 06:52.040
folder and there the orders js file of course and merge that into our route to reduce or maybe without

06:52.100 --> 06:57.750
orders identifier and then pointing at the orders reducer.

06:57.780 --> 07:04.160
Now this should be a way label and now we can dispatch actions namely here our ad ordered action.

07:04.230 --> 07:11.740
And of course tap into that states lies and get our orders dispatching actions as the first thing I

07:11.740 --> 07:18.220
want to do I want to do that from insert the card screen when we press this order now button.

07:18.220 --> 07:19.990
Right now we're not doing anything there.

07:20.020 --> 07:26.790
Now the goal is to well place and order and all to clear our cart so you're in a card screen.

07:26.800 --> 07:33.270
We already do import use dispatch and we're executing it so that we have to dispatch function.

07:33.340 --> 07:45.490
All we therefore need to do is we need to import everything as order actions from store actions orders

07:45.520 --> 07:50.140
and I'll therefore named as orders actions to be super precise.

07:50.290 --> 07:57.450
And now a year when we click does button this order now button we can execute a function and in this

07:57.450 --> 08:05.500
function we dispatch a redux action the orders action add order.

08:05.580 --> 08:10.500
With this action creator now there we need to pass two things de card items into total amount of course

08:10.500 --> 08:16.680
both is available here total amount is stored in the card total amount constant card items as this year.

08:16.680 --> 08:23.580
So we just forward this we forward card total amount and what's the second argument.

08:23.580 --> 08:32.420
So as a first argument actually the card items like this now please note that with that of course I'm

08:32.430 --> 08:37.620
forwarding card items I'm the storing card items which aren't in the Ray and not in the format I have

08:37.620 --> 08:40.310
it in my card redux store there.

08:40.380 --> 08:48.130
I do have an object but storing such an array of orders should out of card items in order should actually

08:48.130 --> 08:48.900
be fine.

08:48.970 --> 08:52.500
So no need to kind of get debt unchanged.

08:52.510 --> 08:53.340
Object as well.

08:53.340 --> 08:56.690
I'll stick to that array which I know store.

08:56.720 --> 08:58.460
So now we dispatched us to view it.

08:58.460 --> 09:00.860
We now need to add our orders screen of course.

09:00.980 --> 09:06.140
And for Dad I also want to add a menu button and a drawer that allows us to get there as alternative

09:06.140 --> 09:07.520
to our shop screens here.
