WEBVTT

00:02.220 --> 00:06.510
Let's make sure we can go to the product detail screen this screen here.

00:06.510 --> 00:09.870
And for that first of all in the product detailed screen component.

00:09.870 --> 00:13.170
Well I'll set up a component by importing react from.

00:13.170 --> 00:15.590
React then.

00:15.620 --> 00:21.150
In there we probably also need some things from React Native.

00:21.210 --> 00:26.940
For example it can't really hurt to have a view and a text in here and also a style sheet.

00:27.150 --> 00:32.880
And also the image component by the way the order of these imports here of course does not matter.

00:32.890 --> 00:38.430
I also want to have a button in there because I want to have an Add To Cart button in here as well and

00:38.610 --> 00:47.250
actually also a scroll view because this detail page could have a very long product description or could

00:47.250 --> 00:52.440
be viewed on a very small device and therefore it should definitely be scroll so we can always see all

00:52.440 --> 00:55.950
the content with that.

00:55.950 --> 01:03.940
Here I'll add my product detail screen component again a functional component where we receive props

01:04.210 --> 01:10.420
all set up my style sheet here with stylus you create and store it in a styles constant.

01:10.420 --> 01:17.440
And of course export the product details screen as a default with that.

01:17.500 --> 01:26.340
Let's start simple and return a View here with a text where we say the product detail screen which is

01:26.340 --> 01:29.570
just there so that we can see the we successfully navigate it there.

01:29.610 --> 01:34.500
And so that we can actually use this because we have to return J is X to have a valid component because

01:34.500 --> 01:39.750
the first thing I want to do is adjust the navigation for Dad and the shop navigator jazz file in the

01:39.750 --> 01:42.290
navigation folders of navigation folder.

01:42.420 --> 01:51.020
We can import the product detail screen here from our screens folder to shop folder and there product

01:51.020 --> 01:51.760
detailed screen.

01:51.770 --> 01:58.750
So that's the file we just worked it off course and map this to an identifier here all name it product

01:58.750 --> 01:59.830
detail here.

01:59.830 --> 02:03.640
These keys as you learned in the navigation section are always up to you.

02:03.640 --> 02:06.070
So now we mapped this screen.

02:06.220 --> 02:09.570
This will be our starting screen because that's the first key value pair.

02:09.580 --> 02:14.170
This is a screen we can go to though we can navigate to and to go there.

02:14.170 --> 02:20.440
We need to go to our products overview screen and when we click on View detail this is the end the signal

02:20.440 --> 02:24.700
that we want to go to that product detail screen.

02:24.700 --> 02:32.140
So here in this function we can call props navigation navigate this navigate function which you learn

02:32.140 --> 02:35.260
about in the navigation section and then there.

02:35.320 --> 02:40.170
I showed you one syntax where you pass in a javascript object where you set up a root.

02:40.180 --> 02:46.340
Name that could be product detail a dad will take you to the screen.

02:46.340 --> 02:47.920
So now we save this.

02:47.930 --> 02:55.430
We click on View details and did we go to the prime detailed screen now as an annotation in the navigation

02:55.430 --> 02:55.980
section.

02:55.990 --> 03:02.270
I also showed you to of course that the alternative syntax to that is that you just pass in the screen

03:02.270 --> 03:03.970
name as a first argument to navigate.

03:03.980 --> 03:09.080
So you can do that as well and it will just work as well if we all to test this on Android.

03:09.080 --> 03:11.750
This is how we can go there.

03:11.940 --> 03:19.410
Now obviously the goal is not just to go there but to also forward our data where our ideas of the product

03:19.410 --> 03:25.200
at least so that we can load the product data inside of that component hence as a second argument here

03:25.710 --> 03:30.380
I pass on a javascript object which will be my parents for this navigation action.

03:30.510 --> 03:36.060
And there you can have any key value pairs you want I'll add a product I.D. field here again this name

03:36.090 --> 03:42.120
is totally up to you though and this will be item data dot item dot I.D. because item data dot item

03:42.120 --> 03:48.480
points at a single product which has the to look we set up here in models and this has I.D. prop so

03:48.480 --> 03:55.350
of course we can access this here and forwarded with that and the product detailed screen we can extract

03:55.380 --> 04:01.410
this of course that's also something you learned earlier and which you can just practice here.

04:01.410 --> 04:11.880
We can get our product idea here by simply calling props navigation get param product I.D. and this

04:11.880 --> 04:17.160
will extract our product I.D. from the parameters we received.

04:17.180 --> 04:22.580
Now we can use that I.D. to get our product and of course our products are stored and Redux.

04:22.640 --> 04:29.510
So in the end we need to import use selector here from react redux so that we can use it to select a

04:29.510 --> 04:30.830
single product.

04:30.830 --> 04:37.220
Our let's say select the product as constant name is of course all up to you is now selected with the

04:37.220 --> 04:43.010
help of use selector which receives our state our redux state and then we can drill into the products

04:43.070 --> 04:51.420
slice again that slice name is what you use here in combined with users products in my case and there

04:51.470 --> 04:54.650
we can get access to all available products.

04:54.680 --> 04:59.230
But of course here I don't want to load all available products but instead I can use to find method

04:59.240 --> 05:06.650
to find a single product with that function at a pass to find which runs on every item India array where

05:06.650 --> 05:12.560
we get the product where dysfunction returns true and it should return true if the idea of the product

05:12.560 --> 05:18.290
I'm looking at is equal to the product I.D. I extract that from the root parameters.

05:18.290 --> 05:23.470
This is how we select a single product and this single product can then be used here.

05:23.470 --> 05:32.930
So here we could output select the product dot title for example if you know safety ad and we do the

05:32.930 --> 05:33.860
details.

05:33.860 --> 05:37.970
Indeed here is see Richard if I do that for the blue carpet I see blue carpet here.

05:37.970 --> 05:41.590
So that's working would be nice to see that in the header as well.

05:41.720 --> 05:43.110
And there are two options.

05:43.280 --> 05:53.810
We could now use navigation maps props dog navigation set param here and all the Raptors in they use

05:53.810 --> 05:55.030
a fact call of course.

05:55.030 --> 06:01.880
That would be better to set our title with set Paramount and use it here in the navigation options which

06:01.880 --> 06:07.690
we have to add to product detail to extract it or actually a bit easier.

06:07.700 --> 06:12.710
We go to product overview which is where we go to that page and besides passing the product ideas we

06:12.710 --> 06:17.000
all do pass the product title because here we have it easily available.

06:17.000 --> 06:20.120
We get it with the help of item data of item the title.

06:20.150 --> 06:25.400
Now we set this param as well and this makes it super easy to extract it and the product details screen

06:25.820 --> 06:31.490
there in the navigation options we can just now add product detail screen navigation

06:33.930 --> 06:40.440
options and this is now the functional form because we need to extract this in a dynamic way from our

06:40.440 --> 06:41.730
root parents.

06:41.730 --> 06:48.390
So here we get this NAF data object which also has a navigation prop we need to return our javascript

06:48.420 --> 06:55.590
object our navigation options conflict object here Websters should be options of course and in there

06:55.620 --> 07:07.770
we can set the header title to NAV data dot navigation dot get param product title or whatever you chose

07:07.830 --> 07:11.170
as an identifier for this.

07:11.190 --> 07:17.060
So here I'm using product title because in the product overview screen I'm setting this to product title

07:19.600 --> 07:25.600
with that we're setting this header let's see where that works if we tried to go through that screen

07:25.900 --> 07:27.130
that's looking good.

07:27.130 --> 07:34.560
Now we also see the the title of the product here in the header that is working.

07:34.560 --> 07:39.420
Now I mentioned earlier that we should not just be able to go there by pressing view details but maybe

07:39.420 --> 07:41.840
also by pressing the product in general.

07:42.170 --> 07:47.930
And for Dad we can go to the product item and there of course we have to view detail button.

07:47.930 --> 07:51.310
But now we can wrap the entire item of course in a touchable.

07:51.440 --> 08:01.000
And there we can use touchable opacity and wrap this entire item with touchable opacity.

08:01.160 --> 08:04.430
So wrap this around our entire view here.

08:04.430 --> 08:09.110
These buttons still will be triggered standalone but now we can all the press anywhere else and there

08:09.130 --> 08:09.900
on press.

08:09.920 --> 08:15.710
I now also want to trigger the same the view details button does I want to trigger to function we receive

08:15.740 --> 08:22.730
on on view detail so I will simply forward this to on view detail and that with dead simple change we

08:22.730 --> 08:28.970
can press anywhere on this item to be taken to the detail screen all is on Android Wear this however

08:28.970 --> 08:34.080
looks a bit ugly and in general it would be nice to have a ripple effect there.

08:34.220 --> 08:36.980
Now you all learned how you can implement this.

08:37.070 --> 08:44.760
We need to import touchable native feedback for that and platform API so this platform object.

08:44.760 --> 08:52.980
And now here in product item we can setup are touchable component here or whatever you want to name

08:52.980 --> 08:58.650
it should have a capital character though so that we can use it as a j is X element and this by default

08:58.660 --> 09:00.710
points at touchable opacity let's say.

09:00.720 --> 09:10.050
But if platform OS X is equal to Android and the platform wording is greater or equal than 21 which

09:10.050 --> 09:13.240
is the android version we need to support the ripple effect.

09:13.440 --> 09:22.410
We can set touchable comp equal to touchable native feedback and now we can replace touchable opacity

09:22.410 --> 09:23.100
down there.

09:24.210 --> 09:28.120
With touchable CMB.

09:28.220 --> 09:34.040
So with that variable which holds two different kinds of components depending on where it's running

09:34.850 --> 09:40.330
and now if we do this we still have to add opacity of fact here but we have a ripple effect on Android.

09:40.340 --> 09:48.980
However only down they are not on the image and also not respecting our rounded corners as you can maybe

09:48.980 --> 09:49.930
see.

09:50.390 --> 09:52.770
Now to fix the issue that is not on the image.

09:52.850 --> 09:56.500
All we have to do is we have to change some configuration there.

09:56.690 --> 10:01.990
We just have to add the use for ground prop here.

10:02.050 --> 10:07.570
Now on touchable opacity this will have no effect but on touchable native feedback this makes sure that

10:07.570 --> 10:12.850
the ripple effect does not apply to the background but actually to while the foreground which means

10:12.910 --> 10:19.180
all the two elements that are placed on top of our touchable or inside of our touchable component.

10:19.180 --> 10:25.360
So therefore now it is all on the image and to respect the the corners the rounded corners all actually

10:25.360 --> 10:27.560
do this a bit differently.

10:27.670 --> 10:33.840
I'll add the touchable component inside of my surrounding view instead of outside like that.

10:35.550 --> 10:42.860
And now here I'll add overflow hidden on that product style which is on that view which is now around

10:42.870 --> 10:48.260
my touchable component with that however my shadow is lost as you can tell.

10:48.260 --> 10:55.710
And here I now even get an error that I need a single react child therefore let's actually tweak this

10:55.710 --> 11:01.590
a little bit and let's add an extra view in here an extra view that wraps everything my entire touchable

11:01.590 --> 11:11.370
component inside of that outer view and on that extra view will add a style of styles touchable whatever

11:11.370 --> 11:19.090
you want to name it and this touchable style is now added down here in my style sheet.

11:19.180 --> 11:21.260
This now gets the overflow.

11:21.370 --> 11:28.090
Hidden prop so if we add this here and this now all the receives the same border radius we have on the

11:28.090 --> 11:36.000
entire card so board arrays of 10 here and this will now make sure that we keep our shadow so that still

11:36.000 --> 11:41.220
works because overflow hidden would have cropped this and now to get rid of that other error here as

11:41.220 --> 11:47.230
well we can simply wrap yet another view around all the content inside of touchable component so that

11:47.240 --> 11:52.890
will fulfill this criteria of having only one child item in touchable component.

11:52.890 --> 11:58.620
And now with that we have the same behavior as before on I 2 cards by the way does not trigger this

11:58.620 --> 12:01.940
details navigation which is good on Android.

12:02.070 --> 12:06.780
We now also have the ripple effect which respects our rounded corners which takes us to the detail view

12:07.050 --> 12:12.270
and to card also does not do that which it shouldn't.

12:12.270 --> 12:15.050
So with that now we have the navigation we need.

12:15.060 --> 12:17.210
We have to look we need here.

12:17.490 --> 12:23.490
Now we can go to the detail page and we should now maybe make sure that this detail page looks the way

12:23.490 --> 12:24.020
it should look.
