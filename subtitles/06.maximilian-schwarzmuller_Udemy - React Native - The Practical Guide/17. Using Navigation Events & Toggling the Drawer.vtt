WEBVTT

00:02.460 --> 00:04.840
When working with react native navigation,

00:04.890 --> 00:08.320
you can also listen to some events during the navigation

00:08.400 --> 00:16.280
and we will need such an event to actually open our side drawer. I'm in share place in the shared place component

00:16.560 --> 00:22.830
and to listen to such an event, we simply have to set up a listener which I first of all do by adding

00:22.830 --> 00:27.350
a constructor to this component, in this constructor

00:27.370 --> 00:33.190
I will get the props and first of all, we always have called super props to execute the parent constructor

00:33.760 --> 00:43.600
and then I can reach out to this props navigator and there, we actually have a set on navigator event

00:43.750 --> 00:51.320
method where we specify a method that should be executed whenever some navigation event occurs.

00:51.700 --> 00:53.650
So I'm going to add this method here,

00:53.950 --> 00:55.760
you can name the method whatever you want,

00:55.750 --> 00:59.090
I'll name it on navigator event, 

00:59.290 --> 01:07.410
I will get the event here and I'll use the modern syntax of using a property where I assign an arrow function,

01:07.450 --> 01:15.100
so there I get the event and let's first of all simply log this and we can use the debugger to see what's

01:15.100 --> 01:16.690
inside of it.

01:16.750 --> 01:22.990
Now I need to assign this so I'll bind this on navigator event and since I use this modern syntax of using

01:22.990 --> 01:27.700
this property with arrow function style, I don't need to bind this.

01:27.820 --> 01:33.700
If you would use the other method syntax where you don't have the equal sign and don't use the arrow function, you

01:33.700 --> 01:35.260
would have to bind this,

01:35.290 --> 01:37.260
that's just a side note though.

01:37.390 --> 01:39.600
So we added this to share place,

01:39.610 --> 01:45.450
let's go back to our app and make sure that we actually debug this remotely

01:45.610 --> 01:52.720
and since I just want to see the console log, I simply open the debugger in chrome here, click on login and

01:52.720 --> 01:56.850
now let's click on share place, I'll clear the console before I do that

01:57.400 --> 01:59.500
and you see these outputs here.

01:59.500 --> 02:03.660
These are all coming from a shared place line 15,

02:03.840 --> 02:07.880
if we have a look at line 15, that's our console log statement where we log the event.

02:08.170 --> 02:15.640
These are the various navigator events, you see one was bottom tab selected, one was screen changed

02:15.970 --> 02:20.180
and the ID was will appear and did appear,

02:20.200 --> 02:22.390
so you've got lifecycle hooks here too,

02:22.590 --> 02:27.590
will appear right before a screen is loaded, did appear after it was loaded.

02:27.910 --> 02:34.270
You'll find more about the available events here on the official documentation under screen API all the

02:34.270 --> 02:37.480
way down there to listen to visibility events,

02:37.510 --> 02:42.820
there you see will appear, did appear, will disappear and did disappear.

02:42.820 --> 02:49.540
These are independent of the normal lifecycle hook of your components because the react native navigator

02:49.720 --> 02:54.180
will actually cache some of your components in some circumstances,

02:54.400 --> 03:02.050
so component did mount might not actually be executed, will appear and did appear will run though,

03:02.080 --> 03:08.300
so these are the best places to use if you need to run something whenever a screen becomes visible.

03:08.380 --> 03:11.390
But how does this help us with the side drawer

03:11.400 --> 03:19.350
now? The side drawer also emits an event or the button emits one, watch the log on the right,

03:19.390 --> 03:20.460
I clean it,

03:20.710 --> 03:29.920
if I tap this menu button, you see we got an event of type nav bar button press with an ID of null.

03:30.490 --> 03:36.050
So we want to listen to that to know that one of our nav bar buttons was pressed,

03:36.070 --> 03:43.040
now all we need to do additionally is give one of the buttons or this button here an ID which then occurs

03:43.060 --> 03:46.770
here which allows us to find out which button was pressed.

03:46.780 --> 03:48.040
It's easy here of course

03:48.100 --> 03:53.690
but if we had multiple buttons, this would allow us to clearly identify the button which was pressed.

03:53.710 --> 04:02.410
So what I'll do is I'll go back to my start main tabs file and there where I register my buttons, next

04:02.410 --> 04:05.360
to icon and title for the menu button,

04:05.590 --> 04:13.780
I'm going to add the id property and I'm going to get this ID of side drawer toggle, you can use any

04:13.780 --> 04:19.720
ID you want, I'm going to assign this for both the buttons because they're the same button, they're handling

04:19.720 --> 04:22.740
the same button just on the different pages.

04:22.750 --> 04:27.350
Now we get all the pieces we need in the share place file,

04:27.490 --> 04:34.050
we now get this event and in here, we now simply have to check if it's an event of type nav bar or a

04:34.060 --> 04:37.810
button press and then check the ID.

04:37.810 --> 04:40.720
So first of all, I'll check if event type,

04:40.720 --> 04:49.720
you just saw in the console that this exists, this property, if it's equal to nav bar button press here,

04:49.820 --> 04:50.770
that's this event

04:55.150 --> 04:58.290
and if it is, we know that a navigation button was pressed.

04:58.290 --> 05:04.470
Now we only have one but in case we had more than one, I'll check the ID and I'll see if it's equal to

05:05.070 --> 05:12.820
side drawer toggle, the ID I just set up here in the start main tabs file.

05:15.900 --> 05:23.040
Inside this if block, I then know that it's safe to open the side drawer because we really pressed this button,

05:23.040 --> 05:31.040
so now we can reach out to props navigator and there, we actually have a toggle drawer method,

05:31.110 --> 05:35.310
you can also find this in the documentation of course, it's all very well documented here,

05:35.310 --> 05:42.180
toggle drawer. You can configure this for example to say I only want to open it, if it's open don't close

05:42.180 --> 05:43.510
it up on a button press,

05:43.620 --> 05:49.770
if you don't specify the to prop here as a configuration, it would actually do a real toggle and open

05:49.770 --> 05:56.580
it if it's close and close it if it's opened, you can define if it should be animated and where the drawer

05:56.580 --> 05:58.170
is coming in.

05:58.170 --> 06:03.480
Now here I'm going to pass some configuration, going to set the side to left which you need to do to

06:03.480 --> 06:04.390
avoid errors

06:04.410 --> 06:09.720
on Android which would otherwise fail, I won't set any other options.

06:09.750 --> 06:14.470
And now with that let's reload our app here on iOS,

06:14.490 --> 06:16.410
let's go there and click this button,

06:16.650 --> 06:18.120
looks fine.

06:18.120 --> 06:23.370
Now if we try it on Android, there chances are high it won't work,

06:23.370 --> 06:24.670
it's a little bug

06:24.750 --> 06:26.040
but it's easy to fix

06:26.040 --> 06:28.440
thankfully, if you know how to fix it

06:28.470 --> 06:35.010
but I'll tell you. You need to go to your side drawer and you need to explicitly set a width on it,

06:36.030 --> 06:41.130
for that, I'll first of all import something from react native into which I'll dive deeper in the styling

06:41.130 --> 06:41.850
section,

06:41.850 --> 06:42.970
it's dimensions,

06:43.140 --> 06:48.810
it's a helper object which allows us to dynamically find out the dimensions of the device we're running

06:48.810 --> 06:49.840
on.

06:49.860 --> 06:52.820
Then on the view which wraps my drawer so to say,

06:52.920 --> 06:54.350
I'll set the style

06:56.550 --> 07:03.760
to an object where we need to set the width, that's required. And then you use dimensions,

07:03.840 --> 07:08.900
there you get the window dimensions, window is a string here,

07:08.910 --> 07:10.440
there you access the width,

07:10.440 --> 07:15.960
this gives you the width of the current window and you multiply with .8 for example, the value is

07:15.960 --> 07:16.750
up to you,

07:17.010 --> 07:23.550
this will take 80% of the current window. With that if you then reload your app on Android,

07:23.550 --> 07:26.860
now you should be able to click this button and get a drawer.

07:27.030 --> 07:32.850
Now as you see, it has no background so it doesn't have the default styling which you do have on iOS.

07:33.210 --> 07:36.740
So therefore I'll add a stylesheet to it

07:36.740 --> 07:41.700
here to give this drawer some stylin. We'll do this in the next lecture.
