WEBVTT

00:02.350 --> 00:03.850
We added quite some logic

00:03.850 --> 00:09.820
but managing the state is complex, so it's no wonder that this is also a bit more complex code with a

00:09.820 --> 00:12.730
lot of promises and checks and conditions

00:12.940 --> 00:18.960
but we're coming along, we're making good progress and always keep in mind, we only make it into this

00:18.970 --> 00:20.560
complex block here

00:20.620 --> 00:26.800
if we got no token in our redux state, that however should be the case the majority of the time in our

00:26.850 --> 00:27.500
app.

00:27.570 --> 00:33.110
Now one other thing I want to do however is I want to clean up my aysnc storage

00:33.190 --> 00:34.420
if we fail,

00:34.450 --> 00:43.760
so essentially if we have no token or if we have no valid token because it expired, essentially whenever

00:43.790 --> 00:50.520
this runs, this catch block here becomes active, then I want to clean up.

00:50.710 --> 00:56.320
However this catch block would be the wrong position because we use dispatch auth get token a couple of

00:56.320 --> 00:57.600
times in our app,

00:57.820 --> 01:04.870
so a better place should be here, that we use the promise right before returning it and add a catch block

01:05.260 --> 01:14.950
and then we add some cleanup functionality, auth clear storage maybe and there, I simply want to execute

01:14.950 --> 01:15.900
two methods,

01:17.700 --> 01:28.560
async storage remove item, ap auth token and do the same for ap auth expiry date

01:28.570 --> 01:30.210
so that we clean that up.

01:30.220 --> 01:32.050
Not strictly required,

01:32.080 --> 01:35.370
it doesn't take up that much space but I guess it makes sense,

01:35.380 --> 01:43.060
so auth clear storage, I will simply dispatch this here, if we got some kind of error, I'll dispatch auth clear

01:43.060 --> 01:52.160
storage, this function here however I should therefore also return dispatch and execute the function like this

01:52.210 --> 01:57.030
even though I don't dispatch anything here, it's really just a helper function.

01:57.070 --> 01:58.600
We could turn it into such a function

01:58.610 --> 02:01.890
we just called there, either way is ok.

02:02.020 --> 02:06.710
So now with that, we get a clear storage functionality too.

02:06.880 --> 02:11.450
One other thing we should work on in the next lecture is that

02:11.710 --> 02:15.010
we do now recognize when the token expires

02:15.010 --> 02:19.960
but wouldn't it be great if we could prolong the expiry time?

02:19.960 --> 02:25.630
Now I said we can't change this, it's always one hour but actually firebase gives us one additional

02:25.630 --> 02:31.900
piece we can use to refresh this token when it is about to expire.

02:31.900 --> 02:35.080
Now let's dive into that in the next lecture.
