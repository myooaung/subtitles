WEBVTT

00:02.200 --> 00:06.380
So we spend loads of time on this first screen but obviously for a good reason.

00:06.400 --> 00:11.950
Discourse is about learning React Native after all and you'll learn a lot about layout things styling

00:11.980 --> 00:16.810
connecting components using multiple components and configuring built in components already.

00:16.810 --> 00:23.920
And that is a core part of risk native and what allows you to build real apps and yet nonetheless it's

00:23.920 --> 00:26.840
now time to continue working on the Zap end.

00:27.190 --> 00:31.630
Before we dive deeper into other things we could style which I'll do later.

00:31.840 --> 00:36.640
I want to make sure that this starts game button works because right now we're always stuck on this

00:36.640 --> 00:43.030
start game screen but now I'll add a second component to the screens folder the game screen itself so

00:43.210 --> 00:49.390
the screen the content I want to show on the screen when the game is running and that is the screen

00:49.390 --> 00:54.940
that is responsible for showing the gas off the computer and allowing the user to tell the computer

00:54.940 --> 00:58.780
whether that's right or wrong if the value should be lower or greater.

00:58.930 --> 01:01.070
So that's the goal here.

01:01.120 --> 01:04.660
Now as I mentioned before it's a regular component nonetheless.

01:04.660 --> 01:11.620
So we need to import react for sure and we'll also import some stuff from native.

01:12.010 --> 01:17.640
Most importantly of course the view and the text you can never go wrong with these altered established

01:17.650 --> 01:20.260
of course you typically always need these.

01:20.590 --> 01:28.150
Then here we can add our games as game screen Functional Component create the styles object here by

01:28.150 --> 01:38.310
using style sheets create like that and in the end export our game screen here as the default and get

01:38.310 --> 01:40.790
rid of that plus here at the top.

01:40.800 --> 01:45.340
So now we have that game screen component defined here.

01:45.370 --> 01:49.980
Now let's really pause and think about what needs to happen here.

01:50.190 --> 01:55.620
Now in the end what needs to happen is that the computer needs to make a guess and it needs to make

01:55.620 --> 01:56.460
a guess.

01:56.520 --> 02:04.400
Initially when this screen first loads but then all the whenever the user basically presses the business

02:04.410 --> 02:05.230
to lower.

02:05.310 --> 02:07.020
This is too high a button.

02:07.020 --> 02:13.460
So whenever the user gives a hint regarding Weber that guesses in which direction of the real number

02:13.490 --> 02:18.990
this guess is so to say whenever that happens we want to generate a new guess.

02:19.080 --> 02:27.240
Now the guess itself should be a random number and therefore all start by creating a new function outside

02:27.360 --> 02:28.740
of my functional component.

02:28.740 --> 02:35.700
Now because it will not use any data from in there so it shouldn't be recreated on every rendering of

02:35.700 --> 02:38.190
the components simply to save some performance.

02:38.250 --> 02:44.820
If you don't rely on props or state you can also simply have a function that resides outside of your

02:44.820 --> 02:48.210
component and I'll named is generate

02:51.000 --> 02:52.770
random between.

02:52.770 --> 02:54.920
Because that's what this function will do.

02:54.930 --> 03:00.360
It's a function it will generate a random number between a minimum and a maximum and which also allows

03:00.360 --> 03:02.010
us to exclude certain numbers.

03:02.070 --> 03:09.510
For example the first number we generate should exclude dissolution so that the vice D.D. app can never

03:09.510 --> 03:14.010
guess the user's choice on the first try.

03:14.010 --> 03:21.210
Now in here minimum will be normalized to MOF seal minimum.

03:21.210 --> 03:31.160
So to basically have a integer number here if a non integer is entered and rounded up and Max will be

03:31.160 --> 03:42.000
flawed to do the same but rounded down then I'll have my random number which I generate with moth random

03:42.810 --> 03:45.920
and MOF random gives us a random number between 0 and 1.

03:45.930 --> 03:54.470
So to have a number between men and Max we have to multiply this with max type minus min and then also

03:54.970 --> 04:05.880
in the end ad men here year but also make sure that you call moth floor on the result of this entire

04:05.880 --> 04:10.410
operation here and this will give you a random number between this minimum and maximum

04:13.340 --> 04:14.620
now with that generated.

04:14.630 --> 04:20.750
I want to check if the random number is equal to the number we want to exclude which would of course

04:20.750 --> 04:28.200
be a very rare coincidence but it can happen in which case I will return to risk with the result of

04:28.200 --> 04:33.300
a never generate random between call where I simply forward min max and exclude which we got.

04:33.300 --> 04:39.440
So I will simply repeat generate random between and return to value of that repeated run if we dare

04:39.460 --> 04:43.700
get the excluded value again we'll repeat it one more time so ultimately we'll get there.

04:43.920 --> 04:49.140
And if we don't have to exclude a number which should be the case in most cases then I'll just returned

04:49.140 --> 04:51.030
at random number right away.

04:51.030 --> 04:55.940
So this is now a function which generates us a random number.

04:56.050 --> 05:06.070
Now here in the game screen I want to manage some states so I'll import the U.S State hook from react

05:06.700 --> 05:12.040
and initialize some state here with the random number because the state I want to manage here is to

05:12.040 --> 05:15.400
guess off the computer the current guess.

05:15.490 --> 05:21.640
And that also needs a set current guest's function so that we can change this whenever the user gives

05:21.640 --> 05:22.900
a new hint.

05:22.900 --> 05:29.410
So here we can call generate random between to generate an initial state which will be saved and this

05:29.410 --> 05:31.990
will then only be considered as an initial state.

05:31.990 --> 05:37.540
So in this component rebuilds and therefore use state is called again will generate a number random

05:37.540 --> 05:43.810
number again but this will then not overwrite that state because once the state is set initially it

05:43.810 --> 05:47.560
will not be overwritten again by adding value derived here.

05:47.570 --> 05:54.190
This will only be considered by react if we have no initial state yet there after this initial or updated

05:54.190 --> 06:00.400
state will be managed detach from the component and will not be overwritten again by this call here.

06:00.400 --> 06:05.640
Initially however we need to make this call we want to get a random number between 1 and 100 one hundred

06:05.650 --> 06:08.170
is excluded with the logic we wrote up there.

06:08.200 --> 06:12.700
So it will be a number between one and ninety nine ninety nine included.

06:12.790 --> 06:15.580
And I want to exclude the choice of the user.

06:16.210 --> 06:19.040
I expect to get this on my props here.

06:19.150 --> 06:25.480
So user choice could be a prop name we use here and that's the value I want to execute because that's

06:25.480 --> 06:26.350
the solution.

06:26.440 --> 06:30.310
In the end and we won't be able to get I guess the solution right away.

06:30.310 --> 06:31.480
That would be a bit unfair.
