WEBVTT

00:02.130 --> 00:06.200
Now of course when storing an order it would also be nice if we see a little spinner here.

00:06.210 --> 00:11.640
When we clicked the order now button until this is done we can implement this as well we just need to

00:11.640 --> 00:16.030
go to the card screen which is where we dispatched his action to send an order.

00:16.050 --> 00:20.800
Here we dispatch and now dispatch here of course returns a promise in the end.

00:20.970 --> 00:29.020
Right because removed from card which is the case when we click this button and order and order will

00:29.020 --> 00:33.580
return a promise in the end thanks to our change so dispatch will therefore return a promise.

00:33.580 --> 00:36.780
So it's here where we can control our loading state.

00:36.940 --> 00:41.590
Now to make that a bit more readable I'll move it out of this anonymous function here and actually create

00:41.590 --> 00:46.150
a new function stored in our constant here in my component.

00:46.160 --> 00:53.590
But outside of the j as x3 and all named is send order handler or anything like that.

00:53.660 --> 00:56.440
That's the same function I used before.

00:56.510 --> 01:04.520
Now will just mind this to descend order handler and now the idea is simple here add order will return

01:04.520 --> 01:10.400
a promise as I said dispatch therefore returns a promise so we can add async here so that we can again

01:10.400 --> 01:16.440
use a single weight and manage the loading and possibly also the error state as we did before.

01:16.460 --> 01:23.940
So we just need to import use state from react and of course stay up for initialize our state again.

01:23.940 --> 01:33.150
So here we have is loading and set is loading and initially that's false and if you want which I'll

01:33.150 --> 01:33.800
not do here.

01:33.810 --> 01:39.810
But if you want You can also add error handling in the same way we did it before with used state error.

01:39.810 --> 01:43.610
Maybe use a fact to then show an alert and so on.

01:43.650 --> 01:45.530
I'll focus on the loading part.

01:45.690 --> 01:47.970
So now you're in send order handler.

01:48.000 --> 01:50.970
I'll call set is loading and set this to true.

01:51.210 --> 01:56.610
Then we await this dispatching so well we wait till this promise is finished.

01:56.610 --> 02:02.760
And again this just invisibly wraps the parts thereafter into then block because they're after I will

02:02.760 --> 02:04.290
set loading back to FALSE.

02:04.290 --> 02:10.160
We're not loading anymore and now we can use that to show an activity indicator.

02:10.250 --> 02:19.880
So let's import activity indicator from React Native here and what I want to do is here instead of the

02:19.910 --> 02:22.170
order now button I want to show that indicator.

02:22.190 --> 02:30.320
Whilst I am loading so here I can check if is loading is true if it is the case I'll show my activity

02:30.320 --> 02:40.100
indicator with a size of let's say small and a color of colors which you need to make sure that's imported.

02:40.150 --> 02:45.200
Primary and that self closing and otherwise of not loading.

02:45.240 --> 02:47.260
Well then I will show this button of course.

02:47.340 --> 02:53.690
So here I want to render this button in the else case and now let's give this a try.

02:53.720 --> 02:55.370
Let's save that.

02:55.430 --> 02:59.030
Add this to the card maybe twice click order now.

02:59.150 --> 03:06.560
We saw the spinner for a fraction of a second here and now if we have a look at orders here's our order.

03:06.560 --> 03:10.250
Now let's make sure that the orders also load when we visit the screen.
