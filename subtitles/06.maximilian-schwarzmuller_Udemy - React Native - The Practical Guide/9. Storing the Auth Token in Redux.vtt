WEBVTT

00:02.170 --> 00:08.580
In the last lecture we turned on authentication on the firebase database by setting the rules to these

00:08.580 --> 00:10.070
rules here, now

00:10.080 --> 00:17.130
our frontend fails and we therefore updated our catch blocks in the places file to catch the right

00:17.160 --> 00:18.120
errors here.

00:18.360 --> 00:23.640
Now whilst it's nice to see that our error checking is working and that our backend is protected,

00:23.820 --> 00:25.750
how could we now access it?

00:25.930 --> 00:30.120
For this we need to use that token we get when logging in,

00:30.120 --> 00:33.480
remember that we there, if we have a look at auth,

00:33.750 --> 00:38.490
we got a response that actually contained this ID token property,

00:38.670 --> 00:41.740
that's the token we need to send to the backend.

00:42.120 --> 00:49.740
So it would make sense to kind of store that token so that we can use it to send it to the backend, I'll

00:49.980 --> 00:56.730
quickly add a console log statement here in the auth action creator again so that we can see the exact

00:56.730 --> 00:58.920
data we got back when logging in.

00:58.920 --> 01:01.500
So if I login one more time,

01:07.970 --> 01:12.990
you see that before we get this error, if we scroll up, we get this object and there we have this ID

01:12.980 --> 01:15.490
token thing we're interested in,

01:15.500 --> 01:23.360
so this is what I want to store. Now we can of course store it in our redux store, for that I'll add a

01:23.360 --> 01:33.090
new action type here in my action types file and I will export a const which I'll name auth set token and

01:33.090 --> 01:35.720
that will of course also be my identifier,

01:35.730 --> 01:40.830
this is an action I want to dispatch which should contain the token so that I can store it in my redux

01:40.920 --> 01:41.720
store.

01:42.090 --> 01:49.290
So first of all, I'll import that here at the top, auth set token and then I'll add a new method,

01:49.290 --> 01:55.410
so export const auth set token maybe where I do get this token

01:58.690 --> 01:59.680
and where I then

02:02.630 --> 02:11.660
return a javascript object where the type is auth set token and where I pass on the token. I can now dispatch

02:11.720 --> 02:15.350
auth set token when we do successfully login,

02:15.500 --> 02:23.390
so here, here I will dispatch auth set token and in parsed response, this is what we just saw,

02:23.480 --> 02:28.820
we now got this ID token property we can access that will hold the token.

02:28.820 --> 02:35.180
So now I pass this on and I return this object, auth set token and to make sure that I can never execute

02:35.180 --> 02:40.240
this code without having one, I'll switch my first div check to not check if we got an error

02:40.530 --> 02:47.470
but to check if we don't have the ID token field because if that's not there, we should never execute

02:47.470 --> 02:50.660
this and we should always return authentication failed

02:50.730 --> 02:55.740
and as I said before, you can of course change this, you can add another catch block after this to catch all

02:55.740 --> 02:56.400
errors,

02:56.550 --> 02:59.700
you can use this part here to not immediately return the

02:59.710 --> 03:04.470
json so the extracted body but check the response status first,

03:04.470 --> 03:08.070
status is another property you got on this response object,

03:08.070 --> 03:09.920
so these are all things you can do.

03:10.170 --> 03:11.900
I will go with that approach,

03:11.910 --> 03:14.810
I now set the token or dispatch this action,

03:14.970 --> 03:22.380
I can now add a fitting reducer so I will add auth.js in the reducers file and in there, I'll import

03:22.380 --> 03:29.760
something from my actions, from the action types, that something is of course auth set token

03:29.760 --> 03:38.640
then I'll add my reducer function here where I get action and excuse me, where I get state and action and

03:38.640 --> 03:40.530
then do something with that.

03:40.680 --> 03:48.540
I will set up an initial state, so initial state which is a javascript object where I will have a token,

03:48.540 --> 03:54.930
so where I will add a token property that is null initially and the state is set to this initial state

03:55.680 --> 04:01.110
and then here in the reducer, I'll add my switch case statement where I switch the action type and

04:01.110 --> 04:11.690
I then see if the case is auth set token, if it's not or in default cases, I just want to return the

04:11.770 --> 04:19.850
state, if it is auth set token then I'll return a new javascript object where for immutability reasons

04:19.940 --> 04:27.470
I distribute the old state first and then as a second step, I'll set the token to the token we get with

04:27.470 --> 04:29.700
our auth set token action.

04:32.560 --> 04:40.270
With all that, I can export this reducer so export default reducer here and I can now use it in configure

04:40.270 --> 04:45.280
store to add it to the other reducers into our root reducer.

04:45.280 --> 04:57.260
So I'll import auth reducer from reducers auth and I will add an auth property to our combined reducers and

04:57.260 --> 04:59.420
add the auth reducer here.

04:59.840 --> 05:06.140
So now we get the auth reducer in the game and we can store the token there, with the token stored there,

05:06.140 --> 05:09.930
we can then later use it but first of all, let's see if that all works.

05:09.950 --> 05:18.370
So let's save this and in the debugging tools, I'll expand the redux section here and I'll reload the app and

05:18.370 --> 05:21.010
I'll try to login,

05:21.010 --> 05:27.140
so I'll use the credentials from before and we do trigger auth set token and

05:27.140 --> 05:29.840
we still do get the error because we don't use the token

05:30.050 --> 05:36.460
but if we click on auth set token and inspect the state and there the auth state, we see that the token indeed

05:36.470 --> 05:37.660
was stored there

05:37.850 --> 05:41.040
and that's this json web token I was talking about.

05:41.570 --> 05:44.520
So with that we're storing the token if we login,

05:44.720 --> 05:47.370
let's now also try it for signing up,

05:47.390 --> 05:51.610
so for that I need to use a new email address here,

05:53.730 --> 05:58.940
sign up and there, we also call auth set token, so this also works

05:59.010 --> 06:04.870
in this case, here we also have the token. So the token is stored, in the next lecture

06:04.870 --> 06:06.930
let's make sure that we also can fetch it.
