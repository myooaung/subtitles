WEBVTT

00:02.250 --> 00:05.910
We obviously want to pass some feedback to the user

00:06.210 --> 00:08.880
and how can we do that?

00:08.910 --> 00:14.460
I want to dispatch an action when we start with this whole process to basically for example show a

00:14.460 --> 00:22.480
spinner and then once we're done to hide it. For this, I'll add new action types here, I'll export a

00:22.630 --> 00:29.460
const and I'll name it UI I because it's a pure UI task, start loading

00:29.880 --> 00:34.180
and then we can decide what we want to do on a per screen basis,

00:34.380 --> 00:42.590
so here, the identifier is going to be UI start loading and I'll add a second one which should be UI

00:42.970 --> 00:45.110
stop loading.

00:45.140 --> 00:46.670
So these are two new actions,

00:46.820 --> 00:53.180
I'll also create action creators to basically have the same pattern throughout the app application, here I'll

00:53.190 --> 00:59.540
then import these from action types, so the two action types I just created, going to import

00:59.780 --> 01:06.530
UI start loading and UI stop loading and then I'm going to export a constant here which I'll name UI

01:06.530 --> 01:09.290
start loading written like this.

01:09.290 --> 01:15.200
I expect no arguments but I will return a javascript object here which is just the action we're creating, so

01:15.290 --> 01:18.760
the action object where the type will be

01:19.160 --> 01:25.260
UI start loading, so the type we're importing from action types and that I'm going to copy that

01:25.550 --> 01:32.740
and add it below that UI stop loading is the name now and type is UI stop loading.

01:32.750 --> 01:34.610
Now what's the idea behind that?

01:34.610 --> 01:41.450
The idea is that we can use that in the reducer to switch some property that we then connect to one of

01:41.450 --> 01:44.100
our screens to then show a spinner,

01:44.120 --> 01:49.910
this might look super verbose but is actually a very elegant way of handling such a loading state

01:49.940 --> 01:51.560
when using redux.

01:51.650 --> 01:58.010
So I'm going to add a new reducer and I'm naming it ui.js because it's related or it's important

01:58.010 --> 02:06.200
for UI related tasks and in there, I first of all will import my action types from actions action

02:06.200 --> 02:11.890
types, the actions I want to import are of course the same as before, UI start

02:11.910 --> 02:19.050
and UI stop loading and then in here, I'll also initialize my state with an initial state object.

02:19.350 --> 02:20.880
Here I simply want to have

02:20.890 --> 02:22.290
an isLoading prop

02:22.380 --> 02:26.970
and you can name this whatever you want which I set to false initially because we're not loading by

02:26.970 --> 02:34.410
default, then I'll add my reducer function where I get the state that starts with the initial state and

02:34.410 --> 02:39.630
then I also get the action I receive and then in that reducer function,

02:39.630 --> 02:47.240
I of course switch the action type and then I got my case UI start loading and I got my case

02:47.250 --> 02:53.150
UI stop loading and I got my default case.

02:53.160 --> 02:54.890
Now there I will just return the state,

02:54.900 --> 03:02.140
I can already write this, in the other cases like here UI start loading, there I will return an object where

03:02.130 --> 03:07.620
I copy the old state even though here we only have one property but still, it's a good pattern

03:07.620 --> 03:09.950
and then I will set isLoading to true here

03:11.640 --> 03:20.120
and I'm going to copy that to my stop loading case where I set isLoading to false. And with that I can

03:20.120 --> 03:25.290
simply export the reducer function as the default of this file.

03:25.580 --> 03:35.110
Now in configure store where we combine reducers, I will import this new reducer, the UI reducer from reducers

03:35.140 --> 03:35.960
UI

03:37.200 --> 03:43.290
and I will add it to combine reducers, give it an identifier of UI, the UI reducer

03:43.380 --> 03:47.760
and with that we can access its state and it's hooked into redux.

03:47.790 --> 03:53.540
Finally I'll go into the index.js file in the actions folder and export my UI actions here,

03:53.580 --> 04:05.450
so from ./UI, I will export UI start and UI stop loading.

04:05.480 --> 04:10.220
Now we can use that in the rest of our application, like here in the places.js

04:10.360 --> 04:14.480
file, here I will first of all import these new actions,

04:14.480 --> 04:24.850
so from the index file, I will import UI start and UI stop loading and I will dispatch

04:24.850 --> 04:25.790
UI start loading

04:25.810 --> 04:27.790
right before we send the first

04:28.010 --> 04:34.120
fetch request. This is where I use the dispatch argument I'm getting which is a function which I execute

04:34.410 --> 04:41.290
to then execute UI start loading as a function and therefore send this action and I want to stop

04:41.290 --> 04:44.200
loading in all error cases,

04:44.230 --> 04:52.820
so for example here I'll wrap console log error with curly braces so that I can also execute the dispatch

04:52.840 --> 04:57.630
UI stop loading because even though we got an error, we don't want to show the spinner anymore,

04:57.640 --> 05:00.290
the user should be able to interact again.

05:00.340 --> 05:04.220
So this is what I do here and what I'll do in the second error block too

05:04.720 --> 05:11.050
but then of course we also have this success case here at the end where we were finally done, there

05:11.060 --> 05:16.270
I will also dispatch UI stop loading because there, we clearly also don't want to show a spinner

05:16.270 --> 05:17.270
anymore.

05:17.770 --> 05:20.490
So with that, we got ways to manipulate the state,

05:20.500 --> 05:26.290
now we need that state information in our screens. For that,

05:26.320 --> 05:33.610
let's go to the share place screen which is where we have this share place button in the end

05:33.840 --> 05:36.340
and there I want to replace this button with a spinner

05:36.340 --> 05:41.860
if we are loading. For that, I first of all need to connect this to my state,

05:41.940 --> 05:43.790
so I'll add a new const at the bottom,

05:43.800 --> 05:51.270
map state to props where I get the redux state as an argument and where I then return my mapping object

05:51.810 --> 05:56.420
and where I have the isLoading prop which I map to state,

05:56.580 --> 05:57.680
then UI,

05:57.720 --> 06:04.380
this was the identifier we assigned to UI reducer in combined reducers, in the UI

06:04.440 --> 06:11.820
and there we have isLoading. Now I need to pass maps state to props instead of null to the connect function

06:11.820 --> 06:13.070
here

06:13.180 --> 06:19.530
and with that we can use the isLoading prop. Now a first simple check can be to either show the button

06:19.710 --> 06:21.790
or the loading text,

06:21.810 --> 06:32.170
so in the render function I'll add a submit button variable which is null initially and then I will check

06:32.200 --> 06:36.630
if this props isLoading is true

06:36.770 --> 06:44.120
because if it is, then I want to set submit button here to loading.

06:44.360 --> 06:46.340
And by default of course it shouldn't be null,

06:46.340 --> 06:47.190
that's a mistake,

06:47.210 --> 06:49.800
it should be this button here at the bottom,

06:49.880 --> 06:55.070
so I'll set it equal to this button here, like that.

06:55.080 --> 06:55.940
So that's our default,

06:55.950 --> 06:59.230
the button I just cut out from the jsx code at the bottom,

06:59.250 --> 07:03.240
the alternative is of course loading but that's of course not correct,

07:03.240 --> 07:11.290
you could now render a string but it should be a text element where we just say loading of course, like

07:11.290 --> 07:17.720
this, text for that needs to be imported at the top but it is.

07:17.850 --> 07:21.380
So that's the text element,

07:21.530 --> 07:28.910
now with that, we can render this at the bottom, I wrap my button with this view here, I'll do so again with just

07:28.910 --> 07:34.940
my auto-formatting tool turn this into a self-closing tag and in-between the view, I will output my

07:34.950 --> 07:36.650
submit button.

07:37.130 --> 07:39.890
Now let's save this file and let's try it out,

07:40.040 --> 07:42.730
I'll go back to iOS and reload the app there,

07:42.950 --> 07:52.660
let's quickly log in as always, share the place, pick an image from the camera roll, a different image

07:52.680 --> 07:55.380
maybe this one,

07:55.430 --> 07:59.820
let's locate ourselves, testing again

07:59.980 --> 08:07.680
and now let's click share the place. Now you see it becomes loading and it should stay loading as long

08:07.680 --> 08:08.730
as this is well

08:08.730 --> 08:14.700
submitting the image. So this takes a while because this image is very big but then it jumps back to share

08:14.700 --> 08:15.950
the place.

08:16.050 --> 08:21.810
So this is working great but I want to show a real spinner and if we're back on the react native docs, we can

08:21.810 --> 08:28.350
see that on our components, there is this activity indicator component we can use and that's just what

08:28.350 --> 08:29.640
I want to use.

08:29.850 --> 08:38.700
It is a component we can use that will simply render a spinner that uses the default platform style so

08:38.700 --> 08:41.410
it will differentiate between iOS and Android,

08:41.550 --> 08:46.920
so activity indicator is a component we can use out of the box in a react native app

08:47.090 --> 08:50.850
and here are the various tools you can use for configuring it.

08:51.360 --> 08:59.390
So let's simply import that from react native in the share place screen, activity indicator, let's copy

08:59.390 --> 09:03.790
that and instead of my loading text, I want to use that,

09:03.830 --> 09:09.860
so here I will replace text with activity indicator as a self-closing tag and that is all I want to do

09:09.860 --> 09:10.540
for now.

09:10.580 --> 09:15.490
Let's now see how this looks like, if I reload my application here again

09:18.260 --> 09:22.560
and I do choose to share someplace here too,

09:25.810 --> 09:30.130
let's click share the place and now we get this activity indicator here.

09:30.350 --> 09:40.060
Let's now do the same on Android, so I'm going to reload here whilst iOS is working,

09:40.190 --> 09:42.150
let's take a photo here,

09:42.170 --> 09:43.040
maybe this one,

09:46.310 --> 09:54.050
locate ourselves, testing from Android again

09:55.890 --> 10:00.240
and let's click share the place here too and here you see, you get the Android style loader and here

10:00.240 --> 10:01.750
it's much faster

10:02.680 --> 10:04.600
simply because the image is much slower,

10:04.600 --> 10:10.870
the ones on the iOS simulator are really huge. Now on firebase,

10:10.870 --> 10:13.360
we can confirm that all of that was uploaded,

10:13.360 --> 10:15.760
I uploaded the Android thing twice,

10:15.760 --> 10:21.810
the one from iOS once and we got the nice activity indicator.
