WEBVTT

00:02.180 --> 00:06.770
Now of course here I'm using a scroll view and you'll learn that a flat list is better if you have a

00:06.770 --> 00:10.160
list where you don't know how many items you'll have in there.

00:10.190 --> 00:16.490
Now for our game a scroll you actually will be fine because yes we don't know how many items it will

00:16.490 --> 00:24.320
be and few radically for guessing very poorly we'll have around 100 items in there but that will happen

00:24.380 --> 00:34.020
almost never and therefore typically this list will not hold more than 10 15 20 at most items.

00:34.110 --> 00:38.480
And therefore this will very likely never cause us any performance issues.

00:38.520 --> 00:45.210
And using a scroll view here is absolutely fine because yes it's a list dad holds multiple items that

00:45.450 --> 00:52.140
will exceed our screen boundaries but it will rarely be a list with a lot of items it will never be

00:52.140 --> 00:56.370
a list with more than 100 items due to the way our game works.

00:56.370 --> 01:01.770
So scroll you would be fine here but in case you still want to use a flat list let me show you this

01:01.800 --> 01:03.050
as well.

01:03.060 --> 01:08.460
For Dad we can add flat list here and that of course means that we need to import flat list from React

01:08.460 --> 01:08.910
Native.

01:09.390 --> 01:13.020
So you're all import flat lists like this.

01:13.020 --> 01:19.590
And with flat list import did you learned that flat list takes a data prop which points at the data

01:19.670 --> 01:22.630
that you want to feed in and in our case here.

01:22.680 --> 01:31.710
Dad would be our past guesses array and that you then have a render item prop which allows you to well

01:31.860 --> 01:37.350
output the items for every item in the data you are feeding in so output components for every item in

01:37.350 --> 01:38.250
the data.

01:38.250 --> 01:42.870
And here I can point at render list item which should be called now.

01:42.870 --> 01:48.390
Right now it is willing to work for a couple of reasons for one render list item expects two values

01:48.750 --> 01:55.620
but render item here on flat list will only forward one item and that's that item data which holds information

01:55.620 --> 01:59.950
about the index and about the item we're about to print.

01:59.970 --> 02:03.510
The other thing that will cause us problems is the key.

02:03.540 --> 02:10.710
You might remember that flat list expects to get objects in the array you're passing in where each object

02:10.740 --> 02:16.130
has a key property it can extract and use as a key for efficient rendering.

02:16.140 --> 02:21.880
Now we don't have an array of objects here we have an array of numbers and that's not going to work.

02:21.960 --> 02:28.680
Now we can add a key extractor here to flat list to overwrite its default key extractor or takes a function

02:28.770 --> 02:35.070
which gets our item in the end and then we have to tell flat list where to find our key and by default

02:35.070 --> 02:38.170
it looks for item dot key or for item thought idea.

02:38.280 --> 02:41.860
Here we want to tell it while the item itself is key.

02:42.090 --> 02:46.580
Now flat list however once a key which is a string and not a number.

02:46.590 --> 02:48.510
Otherwise we'll get a warning.

02:48.510 --> 02:54.480
So the next thing we have to do is the past guesses were managing should be strings and that's no problem

02:54.480 --> 02:58.800
because we're only using them for printing them to the screen anyways so we don't really care if they're

02:58.800 --> 03:03.750
technically stored as a number or as a string and hence here when we add a new guess we can simply call

03:03.750 --> 03:09.630
to string which has a built in JavaScript method on the number to convert it to a string type and do

03:09.630 --> 03:16.490
the same for the initial value of course here where I add my initial guess call to string there as well

03:16.500 --> 03:19.140
and now we have strings and they can be used as numbers.

03:19.140 --> 03:26.030
Therefore now as I said Render list item is expecting the wrong arguments though name of round won't

03:26.030 --> 03:31.940
work like this value all the work won't work like this instead we're getting the item data and we can

03:31.940 --> 03:34.430
still expect an extra argument though.

03:34.550 --> 03:42.440
This however then has to be expected as the first argument because we can now simply go down to render

03:42.740 --> 03:49.280
item here on the flat list and bind arguments that should be passed in so we can't add additional arguments

03:49.460 --> 03:55.330
besides the default argument which will be passed in now bind expects this as the first argument so

03:55.350 --> 04:00.210
that we set what this should refer to in the function we're calling we don't care here so I'll just

04:00.210 --> 04:00.920
add it to this.

04:00.920 --> 04:03.720
You could also set it to null it does matter.

04:03.750 --> 04:10.350
The second argument we add here then will be the first argument received by that function and that should

04:10.350 --> 04:14.830
be our round number which should be passed.

04:14.860 --> 04:21.510
Yes this stored length previously I deducted the index here but that doesn't work anymore because I

04:21.510 --> 04:23.640
don't have access to the index anymore.

04:23.640 --> 04:27.430
We're not mapping manually so I'll just pass the length in there.

04:27.700 --> 04:34.170
And the good thing is I can get the index inside of render item out of the item data.

04:34.170 --> 04:39.780
This default argument will all be passed in by react and the default argument automatically is passes

04:39.840 --> 04:40.960
to last argument.

04:41.010 --> 04:43.890
So the first arguments will be the arguments you set up and bind.

04:43.890 --> 04:45.840
In this case that's only one argument.

04:45.830 --> 04:52.620
Our number of rounds or our length of the array and then any default arguments which would have been

04:52.620 --> 04:58.500
passed normally will be added as additional arguments at the end of your argument list here.

04:58.500 --> 05:01.500
Now here are a number of round also isn't a fitting name anymore.

05:01.500 --> 05:07.530
Instead it's the list length that sounds like a better name because that's what we're getting.

05:07.580 --> 05:13.970
But then here we can calculate our number of rounds by using list length and then by deducting item

05:13.970 --> 05:20.120
data dot index because the item data or getting automatically by React Native is an object which also

05:20.120 --> 05:27.440
has an index property which is the index of the item you're outputting and you also get item data dot

05:27.920 --> 05:31.740
item and Dad's the item itself which in our case is the guess.

05:32.000 --> 05:37.700
We now also no longer have to add a key here because that key thing will be done by React Native thanks

05:37.700 --> 05:41.740
to the flat list so that was a lot of work.

05:41.750 --> 05:43.940
Now we should be able to output a list again.

05:43.940 --> 05:46.590
So let's save this and let's give it a try.

05:46.590 --> 05:48.860
Here and that seems to work.

05:49.320 --> 05:55.440
However of course we lost to positioning though previously what we did is we added content container

05:55.440 --> 05:58.300
style styles list here to the scroll view.

05:58.320 --> 06:04.200
The good thing is you can do that on the flat list too whilst you can add a style just like on the scroll

06:04.200 --> 06:10.320
view this style allows you for example to add a margin around the list but it doesn't allow you to align

06:10.320 --> 06:12.510
the content inside of the list for Dad.

06:12.510 --> 06:16.900
Instead use the content container style which is supported by flatness as well.

06:16.980 --> 06:22.200
And therefore here we can alter point at Styles list and therefore this should now just work as our

06:22.200 --> 06:23.750
scroll you did before.

06:23.760 --> 06:32.650
So let's give this a try and you'll see we start at the bottom here and we can now start adding items.

06:32.650 --> 06:35.390
Now let's see if scrolling also works as it should.

06:36.050 --> 06:39.820
Yes it does and we can see the latest item and the oldest item.

06:39.950 --> 06:43.400
And yes there is something wrong with the positioning of the items in the list item.

06:43.420 --> 06:49.010
I'll come back to this but generally this works let's all the tested on Android.

06:49.010 --> 06:50.130
So there.

06:50.150 --> 06:54.610
Let's start guessing and hope we don't solve this too early.

06:54.630 --> 06:55.740
Note that works.

06:55.740 --> 07:02.200
And here we can also scroll as you can see so that works with the flat list as well.

07:02.200 --> 07:08.160
Now what about these strange distribution of content here in our list items.

07:08.170 --> 07:15.070
Well you'll notice that the list items themselves are bigger than they were before.

07:15.160 --> 07:21.010
The content is distributed as if the list item would end here though and that's indeed the problem.

07:21.010 --> 07:27.910
We have a width of 60 percent off the list item and our content respects this but our borders.

07:27.910 --> 07:29.510
Strangely enough doesn't.

07:29.590 --> 07:34.870
To fix this strange flat list behavior what you can do is you can go to your list container that holds

07:34.870 --> 07:41.110
the overall list and set the width there to your desired list with at the end like let's say 60 percent

07:41.860 --> 07:45.810
and give your list items of width of 100 percent.

07:45.820 --> 07:52.300
So now the list container overall is smaller is less wide and therefore you list items assume that width

07:52.300 --> 07:53.850
and half well the same width.

07:53.950 --> 07:58.840
And since you rarely have to use case where your list container needs to be wider than the list items

07:59.230 --> 08:04.150
because what else would be in there in the list container that should be a fine solution.

08:04.180 --> 08:11.300
Now if you do that you'll notice that the width looks better but actually the positioning now is a problem.

08:11.320 --> 08:17.080
Well since we now have the width controlled on the outside list container we can get rid of all line

08:17.080 --> 08:20.740
items center here on the list itself.

08:20.740 --> 08:25.760
So list don't forget wants to sell add a 2 content container style.

08:25.810 --> 08:30.810
We keep the style there but I removed a line items center because there is nothing to center now.

08:31.060 --> 08:35.050
We have the width set on the list container not on the list items.

08:35.050 --> 08:41.890
So thanks to them having 100 percent they're well centered automatically because to take up the full

08:41.890 --> 08:45.070
with anyways and therefore now if we give this a number try.

08:45.070 --> 08:52.420
This seems to work way better and the list items are actually laid out in the way they should be.

08:52.420 --> 08:57.760
So if we have a number around here which maybe takes a bit longer.

08:57.760 --> 08:57.940
Yeah.

08:57.940 --> 09:04.230
Looking good then here we can see we get the same behavior as before we get the nice style and we also

09:04.240 --> 09:09.760
worked around that different behavior flatness gives us let's all give this a try on Android here and

09:09.760 --> 09:10.930
start a new game there.

09:12.670 --> 09:14.290
Oh this will not be a long game.

09:16.120 --> 09:17.020
Long enough.

09:17.020 --> 09:19.800
So there also everything works as it should.

09:19.960 --> 09:25.780
And this is how you could do this with flat list as you see works a bit differently we have to work

09:25.780 --> 09:27.600
around it's different behavior there.

09:27.610 --> 09:33.550
When it comes to adjusting the width of the list items but Indian ultimately does now all the works

09:34.090 --> 09:40.330
and therefore you now learned how to lay your things out with flat list with scroll view what's special

09:40.330 --> 09:46.990
about these list views or those scroll views in general and how you can still layout your things in

09:46.990 --> 09:47.970
the way you want.
