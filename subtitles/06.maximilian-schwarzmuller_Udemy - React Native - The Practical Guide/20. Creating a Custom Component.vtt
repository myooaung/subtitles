WEBVTT

00:02.730 --> 00:09.750
So over the last lectures, our app made good progress but still we only work with one component, the root

00:09.750 --> 00:16.380
component and we don't really have a nice looking list, our list items are just some text nodes here

00:16.380 --> 00:17.170
in the end.

00:17.580 --> 00:19.140
So let's fix both,

00:19.380 --> 00:23.950
let's actually create a new component which encapsulate a list item

00:24.240 --> 00:31.880
and for that, I'll first of all create a new folder in our project, I'll name it source. In there,

00:31.900 --> 00:34.960
I want to create all future source code.

00:35.080 --> 00:38.520
You don't necessarily need to create this, you could also create all the folders 

00:38.520 --> 00:43.810
I am to create now on the top level but I believe this set up makes your structure a bit more easier

00:43.810 --> 00:49.150
to read and makes sure that your top level of the project doesn't get too crowded.

00:49.210 --> 00:57.430
So in source, I'll add components to add my reusable components and then there, I'll add my list item component,

00:57.870 --> 01:04.750
in list item I'll add ListItem.js and this is pretty much the same set up

01:04.750 --> 01:09.250
you might know from a web based react app. In there,

01:09.250 --> 01:15.040
I will also create a functional component and not a class based one because just like in web based react

01:15.040 --> 01:19.610
apps, you can create functional components in react native apps too.

01:19.960 --> 01:27.610
So I'll create a new constant list item which holds an arrow function which then should render something

01:27.610 --> 01:28.380
in the end

01:28.600 --> 01:33.400
and there, I will now also import react from react,

01:33.400 --> 01:36.620
we need to add this import to be able to use jsx,

01:36.640 --> 01:44.160
so this is all like in web based react and I export list item as the default of this file.

01:44.170 --> 01:47.230
So inside here, I now want to render a list item

01:47.590 --> 01:52.780
and I actually want to have a list item which is not just a text node but a real view

01:53.080 --> 02:02.920
because if we were to use this here as a list item, we would have very limited styling options because

02:02.950 --> 02:09.760
if you try to style a text for example by giving it a border, it will just not work, the text node is

02:09.760 --> 02:16.300
not as styleable as the view component is, that's just how it is in react native.

02:16.300 --> 02:23.430
Therefore if you want to apply any significant styling, you need a view to which you apply the styling,

02:23.530 --> 02:31.100
so I'll import something from react native therefore and that something will be view

02:31.180 --> 02:37.030
and of course, a text I wrap in the view because keep in mind, if you want to output some written text,

02:37.180 --> 02:39.440
you can never do this directly in the view,

02:39.490 --> 02:42.400
you always need a text node for this.

02:42.400 --> 02:43.840
So here in the list item,

02:43.840 --> 02:49.840
notice that I use the shortcut of having just parentheses here to immediately return whatever I enter

02:49.840 --> 02:54.990
between them, there I will output a view

02:55.210 --> 03:02.940
and in this view, I will eventually also have a text. Now the text I want to output will be received on

03:03.210 --> 03:04.590
the props we get.

03:04.600 --> 03:11.060
here just like in a normal react component because it is just the normal react component and I can

03:11.150 --> 03:12.420
then output it here,

03:12.770 --> 03:17.170
props and then maybe place name, any property name you want,

03:17.220 --> 03:20.670
you just have to make sure that you bind this name later.

03:21.060 --> 03:25.560
Now to style this view, I'll also import stylesheet again,

03:25.770 --> 03:33.000
this helper API which allowed us to create such objects we could bind to style. So I will add a new

03:33.000 --> 03:41.010
property styles here, use stylesheet and there, the create method and then pass a javascript object

03:41.010 --> 03:44.910
to that method where we set up our stylesheet object

03:44.910 --> 03:51.830
and there. I want to have a, let's say a list item property which is a javascript object where we could

03:51.830 --> 03:55.170
then style this element however we want to style it.

03:55.290 --> 04:02.100
For example we could define that it should stretch the full available width, we could give it some padding

04:02.100 --> 04:04.110
of maybe 10,

04:04.160 --> 04:13.420
we could also set the background color and there, react native supports things like black or red or hex

04:13.420 --> 04:14.340
codes,

04:14.340 --> 04:24.610
so I'll use this light gray here with #eee and I will then assign this with the style property to my view here

04:25.000 --> 04:26.830
by accessing styles,

04:26.830 --> 04:33.370
so this constant here and then list item, this property in a constant.

04:33.850 --> 04:37.610
Now to see how this looks like, we need to use our component,

04:37.690 --> 04:45.370
so back in the app component, I will actually add it as an import here at the top, so I'll import list

04:45.370 --> 04:52.600
item with a capital L just like in web based react apps, your custom components need to start with

04:52.600 --> 04:54.430
capital characters.

04:54.430 --> 05:01.690
So import list item from and then reach out to source components list item and there, the list item

05:01.690 --> 05:02.340
file,

05:02.380 --> 05:10.380
you can omit the file extension, the build workflow we're using here will automatically add .js

05:10.390 --> 05:12.030
if you don't specify it.

05:13.030 --> 05:14.610
Now we can use the list item,

05:14.750 --> 05:22.480
so let's go down here where we render a list item and let's replace this one with our custom list item

05:22.480 --> 05:28.860
element, let's still set a key property to i so that react doesn't complain

05:29.230 --> 05:32.890
and now we also need to bind the place name prop,

05:33.100 --> 05:39.730
that's the custom prop we expect to get, the one we output here in our list item.

05:39.760 --> 05:47.230
So let's bind place name and let's just bind it to place, this element from our places array.

05:48.450 --> 05:53.210
With that let's save all components, both app.js and ListItem.js

05:53.280 --> 05:53.990
.

05:54.330 --> 05:59.250
and let's go back to our application and you already see the change styling.

05:59.250 --> 06:07.860
However you also see that despite us setting up list item to take the full width, it doesn't seem to

06:07.860 --> 06:10.120
stretch over the entire page,

06:10.140 --> 06:11.900
now why is that?

06:13.720 --> 06:16.810
That is related to the wrapping container,

06:16.810 --> 06:26.110
if we go back to our application, we see that in app.js, we render our list in this view and this

06:26.200 --> 06:29.640
view doesn't have any special styling attached,

06:29.710 --> 06:37.690
the default will then for it be not to take the full available width but only as much width as its child

06:37.750 --> 06:44.120
elements need and therefore, only as much width as San Francisco needs.

06:44.200 --> 06:48.930
So to fix this, we simply need to change the style of this view.

06:49.210 --> 06:54.210
For that I'll add another style property to my stylesheet,

06:54.250 --> 07:00.880
I'll name it list container and there, I'll take a width of 100%.

07:00.880 --> 07:05.920
We could also set flex to 1 but then it will also take the full height,

07:05.920 --> 07:06.910
certainly an option if

07:06.940 --> 07:07.570
we want that

07:07.690 --> 07:12.410
but here I just want to take as much height as needed and therefore only set the width.

07:12.640 --> 07:14.260
So width 100%,

07:14.380 --> 07:17.660
now we need to assign this to this view here,

07:17.890 --> 07:19.720
so let's add style here,

07:19.720 --> 07:23.120
let's set it to styles list container.

07:23.380 --> 07:26.310
Save that file and go back

07:26.500 --> 07:33.100
and now there, as it updates, you see now our list items take the full width. Now maybe some margin would

07:33.100 --> 07:35.270
be nice between the list items,

07:35.440 --> 07:42.910
so we could also go to our list item component and add a margin of 5 for example which of course will be applied

07:43.090 --> 07:44.450
in all directions.

07:45.840 --> 07:51.110
If you just want to have a margin to the bottom, you can of course also say margin bottom here,

07:51.330 --> 07:53.050
so now it would look like this.

07:53.520 --> 07:55.580
So this looks quite nice,

07:55.590 --> 07:59.830
you can of course play around with that, add a border and so on

08:00.330 --> 08:07.620
but what I want to do is I just want to split up my app component into more sub-components because I don't

08:07.620 --> 08:09.740
really like how crowded this is.

08:09.900 --> 08:17.100
It would make more sense to really take the strength of react and create more components, one for handling

08:17.100 --> 08:22.790
the input and one for rendering the entire list, not just list item components.

08:23.100 --> 08:26.390
Let's do these changes in the next lecture

08:26.490 --> 08:29.220
and actually, here's the challenge for you,

08:29.310 --> 08:30.460
do it on your own,

08:30.510 --> 08:31.980
that is your first assignment.

08:31.980 --> 08:34.140
Let's dive into it in the next lecture.
