WEBVTT

00:02.380 --> 00:04.460
Now to validate what the user entered.

00:04.480 --> 00:07.680
I of course want to do something on every keystroke.

00:07.690 --> 00:11.740
Now we already got on changed text here as a listener on the title for example.

00:11.740 --> 00:15.700
And what we do right now is we set the title in our state.

00:15.790 --> 00:18.700
Now the next step is to not just do that.

00:18.700 --> 00:25.270
So to not just save the input but to also validated and also kind of manage the validity of this input

00:25.510 --> 00:26.780
in a state.

00:26.860 --> 00:36.620
So therefore I'll add a new function here title change handler for example which gets the entered text

00:36.620 --> 00:41.870
and then can do something and I'll just outsourced is into a separate named function to have a bit of

00:41.870 --> 00:48.830
a cleaner easier to follow along code because now I will bind this listener here to my on changed text

00:48.830 --> 00:55.610
event so that this function virus where every keystroke and dear of course I will still set my title

00:55.610 --> 00:56.290
with the text.

00:56.300 --> 01:00.220
But now in addition as I said I also want to manage de validity.

01:00.230 --> 01:03.590
And for Dad we can add no state which you want to manage.

01:03.590 --> 01:10.580
So maybe here after managing the title value we can always have the title is valid state or whatever

01:10.580 --> 01:16.100
you want to call it and add set title is valid here as a setter function.

01:16.280 --> 01:18.780
And then this state here initially could be false.

01:18.800 --> 01:27.000
So did we initially treat this as not valid now for every keystroke here and the title change handler

01:27.630 --> 01:33.180
before we may be stored as an update our title state we can validate this of course.

01:33.210 --> 01:36.320
And now it's totally up to you how you want to validate this.

01:36.390 --> 01:45.130
Now for example you could say this is only valid if you have a text which is not empty so if text length

01:45.130 --> 01:47.990
with greater than 0 text is a string of course.

01:48.000 --> 01:51.650
So if the length is zero then this means that it's an empty string.

01:51.660 --> 01:58.920
We can also call text dot trim to trim excess whitespace so that just a bunch of whitespace also isn't

01:58.920 --> 02:00.630
treated as valid.

02:00.660 --> 02:05.760
Of course you could also add min or max length validation by checking the length here.

02:05.790 --> 02:10.420
You could add regular expression validation to check the text for certain patterns.

02:10.440 --> 02:12.820
It's actually something we'll do later as well.

02:13.170 --> 02:15.620
But to get started I'll just check it like this.

02:16.110 --> 02:19.490
And now here if we're greater than zero we're fine.

02:19.500 --> 02:23.550
But actually if we are having a length of zero we're not fine.

02:23.550 --> 02:25.100
So here I want to set.

02:25.320 --> 02:30.870
Title is valid to False else.

02:30.880 --> 02:31.810
We set set.

02:31.810 --> 02:34.810
Title is valid to true of course.

02:34.810 --> 02:40.420
So if we do have a valid input and we'll always set the title itself we always need to store Dad.

02:40.420 --> 02:42.580
We must never lose that user input.

02:42.580 --> 02:44.410
Otherwise we break the app.

02:44.410 --> 02:50.890
And now with the title validity stored in a state we can use it of course here in our J as X code to

02:50.890 --> 02:56.980
check if the title is not valid for example and if that's the case we can dynamically output a text

02:56.980 --> 03:04.000
here where we for example say Please enter a valid title to show a little error message here which of

03:04.000 --> 03:06.670
course all the code assigns I'm styling too.

03:06.700 --> 03:11.530
With that you see that if we go to our input here we see that the error message right from the start

03:11.560 --> 03:15.900
because we start an invalid state and if we start typing this disappears.

03:15.910 --> 03:22.330
But if I remove all input it reappears and this is some basic validation you could add to show a little

03:22.390 --> 03:27.910
error message or a little hint to your user to make sure that the users get at least an idea of which

03:27.910 --> 03:29.790
kind of input you want.

03:29.800 --> 03:36.700
Now of course you can then not just use this validity to output error messages but also to a wide that

03:36.700 --> 03:39.780
your form gets submitted if it's invalid.

03:39.820 --> 03:47.230
So here in the submit handler where I do always submit my data and create or update a product no matter

03:47.230 --> 03:51.190
if the input is valid there we can use the validity data we gathered.

03:51.190 --> 03:56.530
And for example check if title is valid and if it is not valid.

03:56.550 --> 03:58.000
Hence the exclamation mark.

03:58.060 --> 03:59.500
Then we just return.

03:59.500 --> 04:04.770
Which means we cancel the function execution and the code thereafter won't run.

04:04.850 --> 04:07.490
And in addition we might not just want to return.

04:07.510 --> 04:13.630
Of course we can also import alert from React Native and throw a nice native alert here so we can simply

04:13.630 --> 04:24.520
show alert with a message of wrong input and or a title off that and a message of please check the errors

04:25.090 --> 04:32.620
in the form and then simply add one button there where we say okay because there's nothing else to do

04:32.620 --> 04:33.870
then to confirm.

04:34.180 --> 04:39.760
Well with that we have a nice flow here where we warn the user that the input is invalid.

04:39.760 --> 04:45.570
So for example now if I tried to submit this input with my invalid Title I get this error.

04:45.580 --> 04:51.250
And only if I enter a valid title I can submit it because I haven't added validation for the other inputs

04:51.250 --> 04:53.140
yet which we of course should.

04:53.140 --> 04:56.410
So this is how easy you can get started with validation.

04:56.440 --> 05:02.260
Now since you used javascript here you can of course also bring in our third party validation libraries

05:02.950 --> 05:09.250
like for example validate J.S. which is a package you can install into your project and start using

05:09.250 --> 05:15.310
it to then easily validate strings for certain patterns if you wanted to do that in this module.

05:15.310 --> 05:15.900
All right.

05:15.910 --> 05:21.760
The basic patterns we use manually so did you get a clear understanding of what's really happening there

05:21.790 --> 05:26.370
but you can absolutely bring in such third party libraries as well.

05:26.380 --> 05:31.850
Well and now with that basic understanding about validation and so on.

05:31.990 --> 05:38.530
Let's make sure that we now actually also move towards form an input management that is more scalable

05:38.620 --> 05:42.550
and doesn't involve tons of states which we have to manage manually.
