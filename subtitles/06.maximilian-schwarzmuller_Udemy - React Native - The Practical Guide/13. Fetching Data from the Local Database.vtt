WEBVTT

00:02.120 --> 00:08.120
Fetching data from our local database is not that different from fetching it from a web server.

00:08.150 --> 00:11.690
Instead of reaching onto a Web server we just reach out to our local database.

00:11.690 --> 00:13.010
But that's it.

00:13.040 --> 00:18.950
So let's start by writing a function in the DB helper file that allows us to fetch data from the database

00:19.700 --> 00:26.750
for this in there I'll export a new constant fetch places which should do what the name suggests takes

00:26.750 --> 00:31.880
no arguments and in there of course I want to reach out to my database and get all places so I'll copy

00:31.880 --> 00:35.660
that code here from insert place with the promise so on.

00:35.980 --> 00:41.840
But the query will change now and all the arguments I need no arguments because will not inject any

00:41.840 --> 00:43.110
arguments here.

00:43.340 --> 00:48.620
Instead of running insert into you we need to run a different query and there will be a very simple

00:48.620 --> 00:55.520
query I want to select all places in my places table which is done by running select star which means

00:55.520 --> 01:02.170
I want to get all columns all fields in this database from places.

01:02.180 --> 01:09.740
Now if you know a bit of sequel now you could also add a where clause to say where idea greater one

01:09.740 --> 01:11.780
for example ends on but I'll not do it here.

01:11.780 --> 01:16.150
I want to get all places so I'll run discovery and leave the rest as it is.

01:16.310 --> 01:20.870
And now we just need to go to our actions and make sure we have action for this.

01:21.530 --> 01:25.670
So first of all I'll add a new identifier here and you action.

01:25.700 --> 01:33.740
Then the FA set places just as we did in the HBP module for setting the places we fetched from a server.

01:33.970 --> 01:46.020
And with that I can create a new action creator here where I say load places maybe where does the name

01:46.860 --> 01:54.980
and in this action creator I will return his inner function and I use async await in there.

01:54.990 --> 02:01.590
So this function looks like this where in the end of course we dispatch a action object where the type

02:01.590 --> 02:05.300
should be set places and where we set all the places we loaded.

02:06.020 --> 02:14.340
But of course that's the part that's missing we get to places by running this fetch places function

02:14.340 --> 02:17.700
which I just justified in the helpers file and DDP file there.

02:17.700 --> 02:19.570
So let's imported from there.

02:20.370 --> 02:26.870
And then here in the load place is action creator we can run fetch places like this.

02:26.940 --> 02:28.970
This returns a promise so we can await this.

02:28.970 --> 02:32.300
And again we get our DB result here.

02:32.390 --> 02:37.820
Now we kennels wrap as into a try catch block to make sure we catch any errors that could occur.

02:37.820 --> 02:40.580
So here if we have an error I will just throw it.

02:41.270 --> 02:43.900
So we need to handle it in the component actually.

02:44.210 --> 02:48.620
I'm not doing that here but he could handle it in the same way you handle it indicates the p module

02:48.620 --> 02:50.420
for example.

02:50.540 --> 02:58.000
And with that here eventually all in the try block we can dispatch to places which we fetch for Dad

02:58.010 --> 03:00.980
it's important for us to understand how the database result looks like.

03:00.980 --> 03:07.490
So I will console log DB result here so that we can look into it and now I want to execute load places

03:07.520 --> 03:11.800
in my places list screen because dad is where I need all the places right.

03:11.840 --> 03:23.020
So in here I will import star as places actions from the store folder and there the places actions file

03:23.410 --> 03:30.670
and we need to dispatch an action so I will import use dispatch from react redux and then here we create

03:30.700 --> 03:34.680
that dispatch function by executing use dispatch.

03:34.900 --> 03:41.830
And now when this component loads which we can in the end find out with the help of use effect I want

03:41.830 --> 03:44.520
to dispatch this data loading action.

03:44.520 --> 03:49.800
So here we can run use effect and then the function that we pass to use effect.

03:49.840 --> 03:56.170
I want to dispatch places actions start load places.

03:56.180 --> 04:05.090
Right like this now that means that for this effect we have one this pet dependency that's the dispatch

04:05.090 --> 04:07.040
action which should never change.

04:07.100 --> 04:11.960
So therefore this should only run once when the component is created which is exactly the behavior I

04:11.960 --> 04:12.610
want here.

04:13.910 --> 04:19.400
So now the load place is action should be dispatched when our app starts up and indeed it did start

04:19.400 --> 04:25.160
up here and I was already and now all is on Android and therefore here in the log I see some output

04:25.160 --> 04:29.820
and that's the android log and that's the result from the load places action yet.

04:29.820 --> 04:32.960
And as you see it that's the result of our database action.

04:32.960 --> 04:38.100
Insert ideas undefined because we didn't insert something we instead just got something.

04:38.300 --> 04:43.820
We have that Rose field and that's no object which has an underscore array field which holds an array

04:43.820 --> 04:46.990
of objects and in the end that's our place data right.

04:47.000 --> 04:49.300
This object in here that's our place data.

04:49.310 --> 04:52.940
It has to address the I.D. image your eye ends on.

04:52.940 --> 04:57.830
So it's in the result in rows and then underscore array.

04:57.830 --> 04:59.410
That's where our data lives.

04:59.450 --> 05:06.110
So that's what we need in the places actions file here when we dispatch our places that we want to display

05:06.110 --> 05:08.150
that we want to load into redux.

05:08.150 --> 05:14.600
That should be D.B. result dot Rose dot underscore array.

05:14.680 --> 05:21.790
Now of course that trend triggers to set places actions so now in the places reducer we need to care

05:21.790 --> 05:22.820
about this.

05:22.840 --> 05:27.140
So here I add a case set places.

05:27.250 --> 05:35.210
Make sure you import to set places identifier here and into set place as case I can return and use state

05:35.210 --> 05:41.310
snapshot where my places are basically set to the places I got back from the database.

05:41.750 --> 05:47.510
And I do this by setting it to action dot places because in my actions file I have to place this key

05:47.510 --> 05:48.300
in the action right.

05:48.320 --> 05:50.410
Which is the loaded place data.

05:51.380 --> 05:59.520
And there I just want to map disarray into a new array to transform the data to transform every single

05:59.520 --> 06:07.170
place into a new place that follows my place model where I for example converge the idea of the place

06:07.230 --> 06:09.680
we loaded to a string which is optional.

06:09.690 --> 06:13.670
I just want to show you how you could also then transform the data if you needed to.

06:13.710 --> 06:17.440
You can do this with the map method which maps disarray into a new array.

06:17.670 --> 06:18.140
So there.

06:18.150 --> 06:24.660
I do that I keep the title though I keep the image you or I and I just don't need address and latitude

06:24.660 --> 06:25.650
and so on right now.

06:26.190 --> 06:29.520
That's also why I'm mapping this so that I can draw up some data.

06:29.520 --> 06:35.720
So now I map this array of places I load into a new array of places where I only care about the idea

06:35.720 --> 06:36.900
title and image you or I.

06:37.970 --> 06:43.670
Now if that if we saved as we should actually be able to see our places being loaded here on Android

06:43.880 --> 06:49.880
that one place which we stored before and indeed here it is so that's our place.

06:49.890 --> 06:53.180
That's place loaded with debt.

06:53.410 --> 06:57.850
Now we can focus on also getting the user location of course.
