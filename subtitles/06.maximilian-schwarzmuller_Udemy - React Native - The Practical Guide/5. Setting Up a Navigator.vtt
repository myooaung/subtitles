WEBVTT

00:02.120 --> 00:07.100
So I'll go to the product overview screen because before I add a navigator I want to be able to at least

00:07.100 --> 00:09.590
see something on that screen.

00:09.590 --> 00:18.380
And therefore here we now need to import use selector from react read X because Dad will allow us to

00:18.380 --> 00:22.630
tap into the redux store and get our products from there.

00:22.640 --> 00:28.790
So here in the end what we can do is we can get our product and store them in a constant products by

00:28.790 --> 00:30.800
calling use selector.

00:30.800 --> 00:36.950
And as you learned in the previous module about state management and Redux use selector takes a function

00:36.950 --> 00:44.060
which automatically receives the state the redux state as I input and which then returns whatever data

00:44.060 --> 00:45.470
you want to get from there.

00:45.770 --> 00:47.360
And there in the regex state.

00:47.360 --> 00:53.780
I want to tap into my products slice and you have to use the name you use here and combine road users

00:53.990 --> 00:57.990
to get this data to data managed with the products where the user.

00:58.010 --> 01:05.180
So you're I'll say state products and now in that slice of our state I want to get away label products

01:06.220 --> 01:10.270
so let's get dot available products here.

01:10.270 --> 01:15.460
And this is this short arrow function syntax where the part on the right side of the arrow is automatically

01:15.460 --> 01:17.020
returned.

01:17.020 --> 01:21.870
So that's what's now stored in products and data for here on the flat list.

01:21.880 --> 01:28.870
We can of course set the data prop equal to our products here which we selected because that will be

01:28.870 --> 01:31.790
an array and that's exactly what data needs.

01:31.810 --> 01:36.730
I will also add two key extractor here depending on the wording of reignite if you're using you won't

01:36.790 --> 01:43.450
need this because every product in our app has an I.D. and newer versions of flat list also look for

01:43.450 --> 01:49.900
I.D. and not just for a key key but in case you are working with an older version then you need to set

01:49.900 --> 01:51.940
up this key extractor function.

01:51.940 --> 01:56.230
And this takes a function which gives you the item it's looking at and you need to tell it what should

01:56.230 --> 02:00.100
be your unique key on that item and of course that's item dot I.D..

02:00.160 --> 02:07.410
Again newer wordings of React Native don't need that now with that we also need to provide the render

02:07.410 --> 02:14.720
item prop which points at a function debt renders our different list items and inhere here I'll start

02:14.720 --> 02:21.650
simple and we'll refine this later and for the moment I'll just import the the text component from React

02:21.650 --> 02:25.590
Native and output the title of the product in a text component.

02:25.610 --> 02:31.580
So here we get our item data and the return value of that function which we have to provide to render

02:31.580 --> 02:33.580
item should return.

02:33.900 --> 02:35.780
Well j is X element in the Indians.

02:35.810 --> 02:42.890
So here I will return a text element and in their output item data dot item dot title and I can do this

02:42.890 --> 02:48.680
because item data is received by req native does has the item prop that's also something rec native

02:48.680 --> 02:53.000
gives you and each item here of course is just one item in our products.

02:53.000 --> 02:58.640
So therefore it is of this type of data and therefore it has a title prop of course because that is

02:58.640 --> 02:59.830
what I'm assigning here.

02:59.960 --> 03:05.300
So we will have a title prop here which I can output and of course this is not the final form of how

03:05.300 --> 03:10.100
a product should look like in the list but it is what I use to get started so that we see something

03:10.100 --> 03:16.900
on the screen with Dad talking off the screen it's of course time to set up the navigator so that we

03:16.900 --> 03:20.920
can really see something on the screen and that we have screens.

03:21.160 --> 03:28.240
Hence here in the navigation folder I'll add my shop navigator dot jazz file and in there will add a

03:28.240 --> 03:36.020
bunch of navigation for this module so we'll definitely need to import from reactive navigation and

03:36.050 --> 03:42.470
I will of course start simple with the normal stack Navigator which we can create with the help of the

03:42.470 --> 03:48.740
Create stack navigator function and then we'll simply trade this year and I'll name it the product's

03:48.860 --> 03:50.280
navigator.

03:50.420 --> 03:51.700
That's what I store here.

03:51.710 --> 03:57.320
The result of create stack navigator and the result is a react component if you remember and if you

03:57.320 --> 04:03.800
all remember create stack navigator takes a javascript object as the first argument where we map screen

04:03.860 --> 04:08.710
identifiers to react components that should be loaded as screens.

04:08.810 --> 04:16.040
So here of course I will start with the product overview screen and I import dad from the screens folder

04:16.040 --> 04:23.930
and there from the shop part and there from the products overview screen file and they offer the first

04:24.020 --> 04:26.120
thing I want to map in this stack.

04:26.120 --> 04:33.630
Navigator here is products overview or however you want to name this which is mapped to products or

04:33.640 --> 04:34.800
view screen.

04:34.790 --> 04:41.510
Now of course for this stack Navigator which will eventually have multiple screens I'll also pass a

04:41.510 --> 04:46.790
second argument to create stack Navigator which is object that allows us to configure the entire navigator

04:47.180 --> 04:52.550
and there we can for example set up default navigation options for every screen and there I want to

04:52.550 --> 04:56.660
set up my my head her background color and so on.

04:57.350 --> 05:05.060
So you're all set up a javascript object where I can set the headers style to an ever jousted object

05:05.060 --> 05:09.620
where we can set the background color to any color of your choice.

05:09.620 --> 05:16.000
And that's now where the constants folder will come into play where I will add a colors jazz file rise

05:16.010 --> 05:23.330
simply want to export a default javascript object with a primary color and accent color and you can

05:23.330 --> 05:25.760
name these keys whatever you want.

05:25.760 --> 05:30.730
And now I selected some nice colors which I want to use here but you can use whichever color you want.

05:30.920 --> 05:42.890
My primary color will be having us hex code of see 2 1 8 5 b and d Axon color has a hex code of F F

05:42.890 --> 05:46.940
C 1 0 7.

05:47.130 --> 05:52.920
Now they offer back in the shop navigator we can import from that Constance folder still from colors

05:54.020 --> 06:00.230
which we find in the constants folder like this and then here the background color.

06:00.230 --> 06:04.240
I'll set up for a header style here is color start.

06:04.250 --> 06:07.470
Primary now with that.

06:07.530 --> 06:15.630
EDIT I'll also add a header tint color which colors the title text for example and I'll set this to

06:16.470 --> 06:24.900
white because this primary color which is set up is like a pretty strong pink reddish color and therefore

06:24.900 --> 06:33.080
White is the color we should use so that it's clearly readable and I actually want to differ regarding

06:33.080 --> 06:37.110
how to head or looks like based on the platform we're running on.

06:37.160 --> 06:44.450
So it's time to import platform from react native and one side note here in this practice app I will

06:44.450 --> 06:49.700
actually not focus too much on platform differences and responsive design.

06:49.700 --> 06:55.160
I will do it to a certain extent so that there is some basic difference between the different platforms

06:55.190 --> 06:58.580
and that the app looks good on different device sizes.

06:58.790 --> 07:02.630
But I will not tested on a broad variety of device sizes.

07:02.660 --> 07:06.910
You'll learn everything you need to make it as responsive as possible.

07:06.980 --> 07:12.230
So definitely feel free to always tweak this more than I do it here in this module.

07:12.230 --> 07:16.710
In the end I just want to make sure that this module doesn't take hundreds of hours.

07:16.730 --> 07:19.250
Therefore I'll keep this to a minimum.

07:19.250 --> 07:24.080
With that set platform here seems to be important to me because I really want to have a different look

07:24.440 --> 07:28.790
on the header based on whether we're running on IAW or Android.

07:28.790 --> 07:34.940
So the background color is actually not always the primary color but instead I will only set this if

07:34.940 --> 07:38.320
the operating system we're running on is Android.

07:38.360 --> 07:43.820
Otherwise I'll set back one color to an empty string which means the default will be taken and de offer

07:43.820 --> 07:45.540
for the header tint color.

07:45.570 --> 07:47.420
This also should only be white.

07:47.450 --> 07:54.780
If we're on Android otherwise I'll not set it to an empty string though but instead I want to use the

07:54.780 --> 07:57.720
primary color as a text color on Iaw.

07:57.720 --> 08:04.150
So if we're not an android with that the products navigator is set up.

08:04.200 --> 08:09.240
Now as you'll learn in the navigation module you don't exports does navigator.

08:09.240 --> 08:14.940
Instead you wrap this in an app container which you create with the create app container function you

08:14.940 --> 08:16.970
get from react navigation.

08:16.980 --> 08:24.510
So here we can now export default create app container and pass in the products navigator like this.

08:24.510 --> 08:27.510
This is now the export navigation setup.

08:27.630 --> 08:30.240
And this is what we can now use an app chars.

08:30.510 --> 08:37.260
So in app J.S. we can now import our shop navigator from

08:39.770 --> 08:46.700
navigation shop navigator and that's now what I use inside of my provider tax here.

08:46.700 --> 08:52.670
So the shop navigator like this does all the means that we can get rid of these reignite of imports

08:52.700 --> 09:00.020
because we use non of these react native components in this component anywhere with all that work we

09:00.020 --> 09:07.130
should now be able to actually run our app and hopefully land on the products overview screen where

09:07.130 --> 09:12.390
we see a basic and styled list of product titles.

09:12.470 --> 09:17.840
So if I save that now save all these changes and you make sure that you have NPM start running and you

09:17.840 --> 09:20.520
have emulators up and running where you'll load this.

09:20.870 --> 09:26.980
I get an error that object is not a constructor evaluating new product default.

09:26.980 --> 09:35.270
The problem should be that in my model folder here I forgot to export my product class as a default.

09:35.300 --> 09:36.970
That of course needs to be added here.

09:36.980 --> 09:39.250
Otherwise you can't import from this fall.

09:39.290 --> 09:40.640
Makes sense.

09:40.640 --> 09:42.670
So now it is works now indeed here.

09:42.740 --> 09:44.780
I see my product titles.

09:44.780 --> 09:46.420
We all see the different header.

09:46.430 --> 09:51.500
What we don't see is a header title because I haven't added any hence in the products overview screen

09:51.500 --> 09:57.770
we can of course add our special screen only navigation options which will be merged with the default

09:57.770 --> 10:04.490
navigation options we set up directly on the navigator by using products overview screen are a constant

10:04.490 --> 10:10.050
here which holds are a component and adding the navigation options property.

10:10.070 --> 10:17.870
And here we can use static navigation options for the moment add a header title and set this to all

10:17.870 --> 10:19.630
products for example.

10:19.810 --> 10:24.470
And if we now as safeties we see all products here in the header.

10:24.680 --> 10:28.870
So this is now actually looking decent we can see our products.

10:28.970 --> 10:32.720
Of course these products do not really look the way they should look.

10:32.720 --> 10:38.810
So the next step will be to make sure that here we actually do get the look we need in this application.
