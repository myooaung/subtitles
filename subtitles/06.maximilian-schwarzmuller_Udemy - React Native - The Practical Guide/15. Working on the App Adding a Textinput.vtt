WEBVTT

00:02.260 --> 00:05.010
So outputting something changed is not our goal,

00:05.020 --> 00:09.500
let's dive into the official documentation of react native and let's scroll down.

00:09.550 --> 00:11.700
We've got all these components here,

00:11.800 --> 00:17.740
so let's finally use some of them and let's do more than just outputting views and text.

00:17.740 --> 00:19.680
I explained that you have to work with these,

00:19.690 --> 00:23.390
that you can't use the web elements like divs and so on

00:23.500 --> 00:26.080
but of course we have more than text and view.

00:26.260 --> 00:33.030
So let's say we want to handle some user input and create a new item, by the end of the course,

00:33.040 --> 00:38.870
our app will be about storing places users like, with images and a position on the map.

00:38.920 --> 00:44.620
We're not entirely there yet but we already can allow the user to enter the name of a place and add

00:44.620 --> 00:48.810
a button to then store this and maybe output a list of these places,

00:48.940 --> 00:55.420
that sounds like a good start. For this I'll keep that view which has this container style attached and

00:55.420 --> 01:04.150
I'll dive into the style here soon but I will replace the text and I want to replace it with a text

01:04.300 --> 01:05.330
input component,

01:05.470 --> 01:09.520
that simply is the react native solution to handling user input,

01:09.520 --> 01:14.350
the alternative to the web input component basically.

01:14.440 --> 01:17.230
So let's import that from react native,

01:17.260 --> 01:21.390
it's called TextInput with a capital T and a capital I

01:21.850 --> 01:25.650
and then you simply add it here, TextInput like this,

01:25.650 --> 01:30.270
it's a self-closing tag because we don't put anything between opening and closing tags.

01:30.280 --> 01:34.210
The question just is how do we configure text input?

01:34.600 --> 01:40.210
Well you can always dive into the docs for this and I'm not saying this because I'm lazy but because

01:40.210 --> 01:45.380
react native is all about you exploring the different options you have

01:45.400 --> 01:50.710
and working with the components you need for your application, therefore you need to be able to work

01:50.710 --> 01:52.000
with the docs.

01:52.000 --> 01:56.380
So let's click on text input here and there, you see a summary of text input,

01:56.500 --> 01:58.240
you'll see how it works,

01:58.360 --> 02:06.220
you see that you can use onChangeText to react to changes to the text and if you scroll down, you'll

02:06.220 --> 02:12.880
not only see some examples, by the way interactive examples which you can edit right here but you will

02:12.940 --> 02:18.490
also see that you get a list of all the props this text input has,

02:18.520 --> 02:24.620
so this shows you how you may configure it. By the way you sometimes in the documentation

02:24.640 --> 02:31.950
also see props or events which are annotated with Android or iOS as you can see here

02:32.290 --> 02:38.170
and this means that you can set these values but they will only work if the app runs on the platform

02:38.170 --> 02:39.540
which is specified here.

02:39.700 --> 02:44.740
So here you can set up some settings that will only take effect on Android because iOS doesn't

02:44.740 --> 02:45.620
support them,

02:45.670 --> 02:50.360
the majority of the props here run on both devices, on both platforms though.

02:50.380 --> 02:57.910
So what we can learn from this documentation here and from the examples we see up there is that we can

02:57.910 --> 03:01.480
essentially set a value and listen to onChangeText.

03:01.510 --> 03:04.220
So it's very similar to the web input element,

03:04.390 --> 03:07.110
there it was just onChange

03:07.120 --> 03:09.790
and then we could also bind the value,

03:09.790 --> 03:11.470
so let's do that.

03:11.470 --> 03:18.160
First of all I'll register some state in this app component so that we can use two-way binding

03:18.160 --> 03:19.850
to also store the user input.

03:20.170 --> 03:24.440
I do this like in any react app because it's a normal react component in the end,

03:24.610 --> 03:31.270
I set up this state property using this modern javascript syntax of setting this up directly in the

03:31.270 --> 03:33.610
component itself, in the class itself

03:34.000 --> 03:42.130
and there, I will simply name this place name and it's an empty string initially. On text input, I'll then

03:42.130 --> 03:46.500
bind the value to this state

03:46.630 --> 03:47.860
place name

03:47.860 --> 03:55.480
and again this is totally equal to what you know from web apps with react, just using react native components

03:55.480 --> 03:56.140
here.

03:56.680 --> 04:05.730
I'll then also add a method to handle changes to the input, I'll name it place name changed handler and

04:05.740 --> 04:12.490
use this modern syntax for creating a method in the class by basically creating a property and assigning

04:12.490 --> 04:14.500
an arrow function as a value,

04:14.500 --> 04:18.970
I did cover this in my react complete guide in case you didn't take this,

04:18.970 --> 04:22.310
this simply creates a method where the javascript

04:22.360 --> 04:29.450
this keyword will always refer to the class, a problem you would have if you use the other method syntax,

04:29.500 --> 04:35.920
this one. If you use this syntax there, the this keyword will actually not refer to the class

04:35.920 --> 04:38.770
if this method would be triggered through an event,

04:38.980 --> 04:44.410
that's why I use the more modern syntax with equal sign and the arrow function. Anyways,

04:44.680 --> 04:48.870
the goal here is to set the state to whatever the user entered.

04:48.880 --> 04:54.990
First of all, let's see what we actually get here as an event or as a value

04:55.090 --> 04:57.690
when we hook this up to the text input,

04:57.880 --> 04:59.500
so therefore let's do one thing,

04:59.500 --> 05:04.540
let's throw an alert where we output the event, alert not console log,

05:04.550 --> 05:06.630
you'll see why in a second.

05:06.830 --> 05:07.990
So we got this,

05:08.030 --> 05:15.050
let's now connect it to the text input by adding the onChangeText prop which is on the documentation

05:15.530 --> 05:21.650
and binding it to this place name changed handler and I'll also split this up over multiple lines to make

05:21.650 --> 05:23.330
it easier to read.

05:23.330 --> 05:30.380
Now with that, let's also assign some styles so that we can see it and style simply is a javascript

05:30.380 --> 05:36.860
object, so the outer curly braces tell react that some dynamic content is to follow, the inner ones are

05:36.860 --> 05:44.930
there to create a javascript object and there, let's simply give this a width of 100,

05:44.930 --> 05:48.210
this will be 100 pixels or maybe let's use 300

05:48.590 --> 05:57.750
and let's give it a border color of black, the border syntax where you just use border and then say

05:57.750 --> 06:00.540
one pixel solid black and so on won't work here,

06:00.570 --> 06:05.310
so let's use border color black and let's add border width one for one pixel.

06:05.490 --> 06:08.520
Let's save all that and go back to our app,

06:08.790 --> 06:15.990
now it should reload automatically, in case it doesn't or you see some error, press command R on the

06:16.050 --> 06:21.810
iOS app and on Android, control M or command M and then reload manually.

06:21.810 --> 06:26.000
So you should see an input field here and you can type in there,

06:26.310 --> 06:32.820
you should get an alert as you do so with the characters you typed. The text input will not be updated

06:32.820 --> 06:40.170
with your input because you don't have code to bind your text input the user enters back to the input,

06:40.200 --> 06:42.360
you don't have two-way binding set up.

06:42.720 --> 06:44.400
So let's quickly fix this,

06:44.730 --> 06:50.510
let's go back to our code editor and let's make sure that we don't just alert the event,

06:50.640 --> 06:54.310
we did this to see what's inside right and we saw it's the value itself,

06:54.330 --> 06:56.470
so it's actually the value the user entered.

06:56.640 --> 07:04.770
So let's not alert this but let's instead call this set state and there, let's set place name equal

07:04.770 --> 07:07.290
to val which is the value the user entered

07:07.320 --> 07:10.910
and keep in mind, this all works like in normal react apps,

07:10.920 --> 07:13.470
it uses the default react features,

07:13.560 --> 07:18.560
so set state here works exactly as it does in a normal web react app.

07:18.810 --> 07:21.030
Save your changes and go back

07:21.030 --> 07:22.410
and now if you type here,

07:22.530 --> 07:23.580
I still get the alert

07:23.580 --> 07:29.640
so hot reloading not working that great. You might need to turn on live reload too and you can always reload

07:29.790 --> 07:31.210
manually of course, so

07:31.230 --> 07:32.620
let's do that quickly

07:32.730 --> 07:37.430
and I will say that react native sometimes has its edges during development,

07:37.530 --> 07:40.630
so definitely reload your app if you see something strange.

07:40.650 --> 07:46.800
Feel free to kill this process here in the console and restart it if you, so rerun npm run Android or

07:46.800 --> 07:48.510
iOS if you've got problems,

07:48.510 --> 07:50.690
sometimes that fixes the issue.

07:51.060 --> 07:57.030
So here, what I can now do is I can type and you see the output in the input here,

07:57.300 --> 08:01.690
you also see that you get very minimal styling out of the box.

08:01.770 --> 08:05.140
For Android you at least get this colored underline here

08:05.310 --> 08:11.700
but besides that, there isn't much you you get, so react native in general doesn't provide you with a

08:11.700 --> 08:17.000
lot of built-in styles. This input style is relatively ugly though,

08:17.190 --> 08:23.170
so let's see what else we can change about this input and how we can style it in the next lecture.
