WEBVTT

00:02.400 --> 00:09.660
Now that our error messages will get error messages during development and reading them is a super important

00:09.660 --> 00:14.180
thing to do because they really can help us find out what's wrong.

00:14.310 --> 00:21.870
Now let's move on to errors which don't necessarily throw error messages or where you need to dig a

00:21.870 --> 00:30.840
bit deeper to find the root cause and let's for example say that in app Jesus we wanted to find out

00:30.840 --> 00:39.390
if we were really deleting the right goal here to find out whether that's the case we can console log

00:40.500 --> 00:50.900
our goal I.D. here maybe add some info text like to be deleted in front of this so that we get some

00:50.900 --> 00:59.840
information about what's getting printed here and then we have our list of course goals here.

00:59.930 --> 01:03.360
So that's the list without the item being deleted.

01:03.770 --> 01:06.710
And then we would want to see it after that being deleted.

01:06.710 --> 01:12.170
But the way this set state function here works the end the way react updates to state.

01:12.170 --> 01:17.350
Just printing the course goals again and this line won't give us the already updated course goals instead

01:17.370 --> 01:20.390
that will only be updated in the next renderer cycle.

01:20.390 --> 01:23.480
So we'll not see our course cold stare but that's no problem.

01:23.480 --> 01:30.860
We just need to lock this at a different place we locked is right here in our component there we locked

01:30.860 --> 01:35.920
the core Scholes and this entire component will be re rendered when we update our core Scholes with

01:35.920 --> 01:36.630
this line.

01:36.730 --> 01:46.090
So this will rerun so we can maybe just also add a little console log re rendering component so that

01:46.090 --> 01:54.370
we know that the course goal list we're printing after this one is to list after every referendum cycle

01:54.610 --> 01:59.890
whereas the course goal list we're printing after it is to be deleted line is the course call list before

01:59.890 --> 02:04.270
we delete it of course goal and now we added some console log statements that allow us to dive into

02:04.270 --> 02:10.390
the flow of our code with that if I saved as the app restarts and we already see rendering component

02:10.480 --> 02:14.650
which makes sense it's getting rendered for his time and we see we have an empty array which also makes

02:14.650 --> 02:17.210
sense because we haven't added anything.

02:17.320 --> 02:26.400
Now let's add a new goal maybe here an android finish the course if we do that we see the component

02:26.470 --> 02:33.810
re renders makes sense because we added something and then most importantly for the other rendering

02:33.810 --> 02:39.810
where we added an item we see that item here India Ray we all see the idea of that item and the value

02:39.810 --> 02:51.780
which looks all right now let's add no item maybe learn React Native and add this and we see this here

02:51.780 --> 02:55.350
we just now see that it's an array with two items.

02:55.350 --> 03:01.770
If we expand this year so we're now able to look into our code and now let's delete item by clicking

03:01.770 --> 03:07.560
on it and let's delete the finished core site and with the I.D. 0 thought 8 1 8 and so on.

03:08.310 --> 03:11.070
So if I click finish the course you see it gets removed.

03:11.070 --> 03:14.380
So it seems to work correctly and our consular confirms this.

03:14.400 --> 03:20.940
We are re rendering Where re rendering our array with this idea only so with the other item which we

03:20.940 --> 03:25.830
didn't delete and up there we see to be deleted as this idea here.

03:25.950 --> 03:29.220
This log is coming from this line before be deleted it.

03:29.250 --> 03:35.490
So it's still included but for the next render cycle we see that this idea here is indeed not included

03:35.490 --> 03:36.320
anymore.

03:36.390 --> 03:38.250
Of course that's a bit of a made up example.

03:38.250 --> 03:43.290
We of course see that that's behaving correctly here but simply imagine you have a more complex flow

03:43.290 --> 03:48.540
in your code you want to debug then such console log statements can really help you understand how your

03:48.540 --> 03:53.310
code is running how often it's running and if the correct values are getting used.

03:53.520 --> 03:58.470
So console log statements can really be helpful if you dumped them into your code just don't forget

03:58.470 --> 04:03.900
tools or remove them eventually so that you don't crowd your code with tons of console log statements.
