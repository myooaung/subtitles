WEBVTT

00:02.440 --> 00:07.590
So to make sure that the computer can actually finished that game and guess the right number.

00:07.720 --> 00:12.000
We need to check what the computer guessed and then kind of end the game.

00:12.010 --> 00:17.590
If it's the number we entered for Dad we can use a number react hook and that's to use a fact hook use

00:17.590 --> 00:25.670
effect allows you to run side effects or in general allows you to run logic after every renderer cycle.

00:25.810 --> 00:31.300
And just as mentioned before if this whole react hoax thing is relatively new for you definitely check

00:31.300 --> 00:36.790
out some dedicated react hoax resources or dive into my react complete guide course where I cover hooks

00:36.850 --> 00:42.660
in detail so what I'll do with you is effect now as I'll call it here.

00:42.770 --> 00:49.370
After initializing my state and my ref here and in there we've has a function I use effect fact takes

00:49.370 --> 00:54.950
a function and dysfunction by default runs after every render cycle for this component so every time

00:54.950 --> 00:59.750
it has been rendered dysfunctional executed after it has been rendered that's all is important.

00:59.750 --> 01:03.150
Not before not simultaneously after.

01:03.200 --> 01:10.290
Now in there I want to check if the current guest computer made is equal to the user choice because

01:10.290 --> 01:11.980
that means the game is over.

01:12.120 --> 01:16.830
Now that can't be the case for the first render cycle of course because we exclude the user choice from

01:16.830 --> 01:19.940
the Gasol numbers but from the second roll on.

01:19.940 --> 01:25.790
So once we clicked lower or greater for the first time that can happen.

01:25.860 --> 01:29.220
So in there I didn't want you kind of fire.

01:29.220 --> 01:35.970
The game is over message and send it to app J.S. so that we can swap the game screen for a game over

01:35.970 --> 01:36.890
a screen.

01:36.970 --> 01:39.000
Now we don't have that screen yet so let's add it.

01:39.000 --> 01:45.300
Let's add a game over screen here in the screens folder and let's create a very simple one for now we'll

01:45.300 --> 01:47.250
find unit later in there.

01:47.250 --> 01:50.660
I'll simply have a view and a text and a style sheet.

01:50.700 --> 02:00.760
So what we typically import from React Native then have the game over screen component in there which

02:00.760 --> 02:04.000
take some props and then return some J as X in the end.

02:04.000 --> 02:12.270
Here we have these styles with style sheet create and then we export the game over screen as a default.

02:12.370 --> 02:17.170
Now in there as a set I want to keep this symbol for now I'll just have a view in there with a text

02:17.170 --> 02:22.220
of the game is over and will output more details there later for now.

02:22.230 --> 02:28.090
Here I'll just assign some style my screen style which I'll add to this object we passed to the style

02:28.090 --> 02:28.560
sheet.

02:28.690 --> 02:37.720
Here at the bottom set flex to 1 and maybe justify content to center and then align items to centers

02:37.750 --> 02:40.410
so that this text is centered for the moment.

02:40.420 --> 02:44.440
Now we have to game over screen and we want to render this instead of the game screen.

02:44.440 --> 02:53.050
Well if the game is over so let's go back to the app J.S. file and import the game over a screen from

02:53.050 --> 02:56.100
the screens folder and there from game over screen.

02:56.240 --> 03:04.240
And the question now of course is what's our condition for rendering this well in the end we'll need

03:04.390 --> 03:07.000
one additional piece of information anyways.

03:07.000 --> 03:12.570
And that's the number of rounds it took to computer to finish the game.

03:12.700 --> 03:18.720
So one thing I want to store here in the app component is a no state.

03:18.730 --> 03:24.580
I manage and that is the number of rounds it took two fewer to finish which is sero initially because

03:24.580 --> 03:26.120
we haven't started the game yet.

03:26.260 --> 03:31.540
And I'll name this guess rounds and set guess rounds and you can name is whatever you want.

03:31.540 --> 03:34.130
Now the goal is to set this when the game is over.

03:34.140 --> 03:38.230
So for Dad I'll also add another function here to the app component.

03:38.230 --> 03:45.790
Game over handler and there I want to get my number of rounds as are arguments so I expect to get this

03:45.790 --> 03:50.010
here so that I can call set guess rounds to my number of Rollins.

03:50.020 --> 03:56.440
I got here noted game over handler should be triggered from inside the game screen obviously.

03:56.560 --> 04:01.390
So here on the game screen I want to pass on a prop which I'll name on Game over.

04:01.420 --> 04:06.430
Sounds like a fitting name which can be called from inside the game screen then or which holds a function

04:06.430 --> 04:10.960
reference which can then be called from inside the game screen and the function reference is a reference

04:10.960 --> 04:13.600
at this game over a handler function of course.

04:13.600 --> 04:19.450
So inside of game screen we can now use the ON GAME OVER prop to execute this function and pass the

04:19.450 --> 04:22.720
number of rounds it took the computer to guess our number.

04:22.720 --> 04:29.460
Then we set this number of rounds here stored in our guess rounds state and now in the app component.

04:29.470 --> 04:37.480
We know that if guests rounds is sero the game hasn't started yet or it's running if it's greater than

04:37.480 --> 04:40.560
0 then the game over a handler executed.

04:40.720 --> 04:41.970
And the game is over.

04:41.980 --> 04:43.840
So we want to show the game over screen.

04:43.870 --> 04:46.490
If guess rounds is greater than zero.

04:46.540 --> 04:52.180
By the way if we start a new game I also want to reset my guess rounds to zero because of a new game

04:52.180 --> 04:52.570
starts.

04:52.570 --> 04:56.350
We want to reset the number of rounds the computer took to 0.

04:56.470 --> 04:58.600
So if it's greater than zero the game is over.

04:58.630 --> 05:02.110
So in that case I want to show the game over screen.

05:02.110 --> 05:07.540
So here if I check if we have a user number in which case I showed a game screen that's only correct

05:07.960 --> 05:13.110
if guess rounds is smaller or equal than zero.

05:13.120 --> 05:16.780
Smaller is not possible but still we can check for that.

05:16.900 --> 05:20.770
So if that's the case then we know the game is certainly running.

05:20.770 --> 05:28.650
Else if gas rounds is greater than zero then we know the game is over and therefore content will be

05:28.650 --> 05:31.960
equal to game over a screen right now.

05:31.980 --> 05:37.160
That's just a component like this without any props which we pass in.

05:37.180 --> 05:43.270
So now we have a condition where we render the game over screen all we now need to do we need to use

05:43.270 --> 05:49.330
the on game over Prop here in our game screen too in the end call this function and forward the number

05:49.330 --> 05:51.010
of Rollins to the app component.

05:51.820 --> 05:59.510
So back in the game screen if use effect here determines that the right choice was made the right guest

05:59.530 --> 06:07.120
was made and therefore the game is over then and here I want to call props on game over as a function

06:07.240 --> 06:14.380
and forward the amount of rounds it took the computer to guess our result or our choice and that stay

06:14.410 --> 06:22.750
for a no state we have to manage here into game screen we have our rounds and set rounds and initially

06:22.810 --> 06:32.280
that is sero when this component is created for the first time does of course zero and Rollins a stay.

06:32.290 --> 06:37.390
For now whatever forward here because that's a no will increment with every guess because in the next

06:37.390 --> 06:43.510
guess handler if we're generating a next guess besides setting that guess here in our state I of course

06:43.540 --> 06:51.630
also want to set my rounds and they're used to function him where I get my current rounds and a return.

06:51.760 --> 06:53.330
Rounds plus one.

06:53.380 --> 06:59.560
So I add one to my current amount of rounds I've stored in my state so that the new state well is old

06:59.560 --> 07:05.930
rounds plus one because a new round started so if dad were managing the amount of rounds that we're

07:05.930 --> 07:12.530
using this as a condition in the app component to render the game over screen and then the game screen

07:12.740 --> 07:17.480
we check whoever the game is over here and use effect and right now we do it as whenever this component

07:17.490 --> 07:18.690
renders.

07:19.010 --> 07:26.240
Now we could do that but we can also simply be more honest or more direct regarding the dependencies

07:26.270 --> 07:31.640
of this effect and that's something you can be or you can do by adding a second argument to use effect

07:31.880 --> 07:37.550
first argument is to function it should execute after rendering the component second argument you past

07:37.560 --> 07:41.630
you use effect is an array of dependencies of this function.

07:41.630 --> 07:47.690
And here you have to specify any value that's coming from outside of this affect function.

07:47.690 --> 07:53.660
So in our case that would be the current guess that would be props user choice and props on game over

07:54.000 --> 07:57.260
and whenever such a value changes disaffected rerun.

07:57.290 --> 08:03.380
So whenever a task changed after Rand recycled the effect will rerun I should say if I render cycle

08:03.380 --> 08:06.840
occurred and the values you specified here are still the same.

08:06.860 --> 08:11.300
As for the previous render cycle then the effect will not rerun.

08:11.390 --> 08:17.120
So do fact will now only be run if one of our dependencies changed now as a set props user choice and

08:17.120 --> 08:24.230
props on game over are all the dependencies and to take care of these all use a modern javascript syntax

08:24.320 --> 08:32.720
where I use object D structuring to D structure my props and get user choice and on game over out of

08:32.720 --> 08:33.400
them.

08:33.440 --> 08:39.500
This syntax might look strange but it's like air raid restructuring just for objects we're pulling these

08:39.500 --> 08:45.860
properties so these property names out of this props object and stored them in constants with equal

08:45.860 --> 08:53.930
names so that here we can now just use user choice and just use on game over since we have these values

08:53.930 --> 09:00.350
now stored in constants off that name pulled out of props and I'm doing this because now we can add

09:00.350 --> 09:04.340
user choice and on game over as dependencies in this list.

09:04.340 --> 09:10.370
Otherwise we would have to add props here and that actually changes whenever de parent component changes.

09:10.420 --> 09:11.990
Therefore it's not a good check.

09:12.050 --> 09:16.430
This is a better check because now we make sure is anything else and props changes.

09:16.430 --> 09:23.300
We don't care only if one of these two values changes then disaffection rerun now with dead we have

09:23.300 --> 09:28.280
our check in place that should hopefully lead to the game over screen being percent it if the computer

09:28.280 --> 09:31.530
guessed our numbers so now let's save this and let's give it a try.

09:31.670 --> 09:42.580
Maybe here on Android to mix things up so enter a number here 30 to confirm start a game and it's to

09:42.580 --> 09:43.990
zone should be greater.

09:43.990 --> 09:46.710
Let me also show you how the warning looks like when I'm on android.

09:46.750 --> 09:50.280
This default Android alert so 30 to it was awesome.

09:50.290 --> 09:53.170
So they offer of course should be greater should still be greater.

09:53.200 --> 09:58.780
Now it should be lower should be lower should be greater should be lower should be lower should be greater

09:58.780 --> 09:59.780
should be greater.

09:59.830 --> 10:00.490
The game is over.

10:00.580 --> 10:05.590
That's looking good to guess probably while certain to what makes sense regarding the sequence of numbers

10:05.590 --> 10:08.800
we had here and therefore his output makes sense here.
