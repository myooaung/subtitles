WEBVTT

00:02.380 --> 00:06.940
So we can reach dad game screen now and the computer is guessing a number here.

00:06.970 --> 00:12.340
A random number which excludes our real number for the first initial guess.

00:12.370 --> 00:18.010
Now we need to make sure that subsequent guesses can be made when we pressed a lower or greater button

00:18.010 --> 00:21.350
here in the game screen for that.

00:21.400 --> 00:27.820
Let's add a function inside of our functional component because dysfunction will need access to the

00:27.820 --> 00:36.790
surrounding state and the surrounding component and give it any name you want like next guest's handler

00:36.790 --> 00:38.700
or whatever name you prefer.

00:38.710 --> 00:43.810
And this is a function which you actually should get an argument that direction in which the next guest

00:43.810 --> 00:47.390
should be so lower or greater now.

00:47.390 --> 00:54.060
The first thing I want to do here is I want to make sure that we validate the direction.

00:54.110 --> 00:59.600
Now this function here should be executed when the the button down there are pressed.

00:59.600 --> 01:04.970
But of course the direction value so the value we passing as an argument should differ based on the

01:05.240 --> 01:06.190
button.

01:06.200 --> 01:13.070
So here we have the next guest handler connected to on press without parentheses to just to provide

01:13.100 --> 01:19.140
that pointer at our function to on press so that this will execute eventually when the user presses

01:19.140 --> 01:26.060
this but I went to pre configure the argument which will be passed to next guest handler when this is

01:26.060 --> 01:27.350
executed.

01:27.350 --> 01:33.530
We can do this with BIND bind this because the first argument to bind is always what this should be

01:33.530 --> 01:38.450
referring to in the function that's getting called doesn't matter here so we can just bind it to this.

01:38.600 --> 01:44.780
The second value we pass here to bind will be the first argument received by our function though.

01:44.810 --> 01:51.580
Therefore this will be the direction received here and it's of course up to you which logic you use

01:51.580 --> 01:52.560
here.

01:52.600 --> 02:00.820
To me it makes sense to simply use a string where here we pass lower as a string and for the other button

02:00.970 --> 02:02.710
we pass greater.

02:02.740 --> 02:08.830
So did we have these two identifiers which are essentially passed to the next gas handler so the direction

02:08.830 --> 02:10.780
will be lower or greater.

02:10.900 --> 02:14.110
And now we want to validate whether Dad is correct.

02:14.110 --> 02:20.670
So for example if you selected a number of let's say 55 and the computer guessed 60.

02:20.800 --> 02:25.390
Then if you give a computer the hint of the numbers should be greater.

02:25.390 --> 02:30.190
That's obviously wrong because the number should be smaller Your number was 55.

02:30.190 --> 02:31.690
Guess what 60.

02:31.690 --> 02:37.290
It's incorrect if you tell the computer that the number it should gets next should be greater than 60.

02:37.290 --> 02:37.790
Right.

02:37.810 --> 02:39.340
So we want to validate this.

02:39.540 --> 02:43.370
Never here we can check if direction is equal to lower.

02:43.390 --> 02:54.870
So if you pressed the its lower button and the current guess however is smaller then props user choice.

02:54.880 --> 03:01.270
So the computer actually guessed the number that is smaller than our choice then lower is the wrong

03:01.270 --> 03:01.870
hint right.

03:01.900 --> 03:03.900
Because the number does need to be lower.

03:03.970 --> 03:11.100
It needs to be greater because the guess already was too low so that's one possible scenario where we're

03:11.100 --> 03:16.110
getting a wrong hint D alternative and I'll wrap this into parentheses to make it really clear that

03:16.110 --> 03:18.300
this is one condition here.

03:18.330 --> 03:20.440
So the alternative to that.

03:20.490 --> 03:26.010
The second condition when a check is that the direction here is actually greater.

03:26.250 --> 03:30.920
And at the same time the current guests already is greater than our choice.

03:30.930 --> 03:33.460
And then it's also an incorrect hint.

03:33.480 --> 03:35.600
Just in the opposite direction.

03:35.940 --> 03:41.220
In both cases where we're giving a incorrect hint I want to throw an alert and you learned that you

03:41.220 --> 03:48.300
can do this with the alert API the alert class you can import from risk native India and then in here

03:48.300 --> 03:55.460
in our check I will use alert alert to fro an alert with a title of let's say don't lie.

03:55.530 --> 03:57.820
Of course you can pick any name you want.

03:57.840 --> 04:03.240
I'm escaping that single quote which I went to print as a character here with a leading backslash because

04:03.240 --> 04:07.710
otherwise it would close the string because I'm using single quotes to surround my strings.

04:07.710 --> 04:09.010
So that's my title.

04:09.090 --> 04:13.230
And then the text could be you know that this is wrong.

04:13.230 --> 04:19.480
But of course you can have any text you want here can also be less moralistic if you want to know one

04:19.480 --> 04:25.260
two percent one button here and button says already explained are objects you pass to that third argument

04:25.320 --> 04:32.880
array which alert takes and there the text could be sorry and the style could be canceled and you don't

04:32.880 --> 04:39.120
need to provide on press handler if you don't provide one the only thing that will happen is that clicking

04:39.120 --> 04:41.400
the button will close the alert which is fine.

04:42.000 --> 04:47.550
So here we're giving the user a tap on his fingers so to say and making sure that no incorrect hints

04:47.550 --> 04:48.530
are given.

04:48.600 --> 04:50.040
And I want to return here.

04:50.040 --> 04:54.590
So I want to stop the function execution if we have such incorrect value.

04:54.780 --> 04:56.580
If we make it past does it block.

04:56.580 --> 05:01.330
So if we gave a correct hint then we want to generate a new random number.

05:01.920 --> 05:06.940
So here I want to check if direction is lower.

05:07.200 --> 05:08.850
And now we know that was correct.

05:08.850 --> 05:15.810
So that computer should guess a number that's lowered and the previous number then we know that a new

05:15.810 --> 05:22.170
random number should be generated toward a current guess is the maximum upper bound.

05:22.200 --> 05:29.940
So therefore we can call generate random between again and the minimum number.

05:30.060 --> 05:32.930
Well that is probably one.

05:32.940 --> 05:39.440
But what if the user already guessed no number where we told the computer that it was too small.

05:39.540 --> 05:44.410
And then when then we would have a problem here because the lowest boundary is not always one.

05:44.430 --> 05:48.430
What if the user guessed 10 and we said no it has to be greater.

05:48.480 --> 05:53.670
Well then the user guesses 50 and we say it should be lowered and at the computer should of course and

05:53.670 --> 05:54.410
guess again.

05:54.420 --> 06:00.240
But it should not gas below 10 because we already mentioned that this is too small earlier.

06:00.330 --> 06:08.700
So our current maximum and minimum should adjust over time as we give hints regarding whether the number

06:08.700 --> 06:11.080
two computer a guest is too small or too big.

06:12.130 --> 06:16.690
So F4 we can use a number hook provided by reactants to use ref hook.

06:16.690 --> 06:23.290
Now you might know dead hook as a hook that allows you to create a object which you can bind to inputs

06:23.350 --> 06:28.960
so to your input elements and jazz acts to get access to them in your code.

06:28.960 --> 06:33.870
That's one way of using it but use ref also allows you to do something else which is pretty cool.

06:34.120 --> 06:39.720
It allows you to define a value which survives component renders.

06:39.760 --> 06:42.810
So which survives to this component is rebuilt.

06:43.120 --> 06:48.940
And that's exactly what we need here because we want to lock in minimum and maximum which we can change

06:49.180 --> 06:53.320
but which isn't regenerated just because the component is rendered again.

06:53.320 --> 07:00.060
So here at the top of this component after initializing the state we can create a new constant current

07:00.360 --> 07:10.430
low maybe where a use ref is one and then another a constant current high where a use ref is one hundred.

07:10.440 --> 07:16.590
These are our initial boundaries we're using for the random number and now we can update these references

07:17.160 --> 07:18.240
in here.

07:18.390 --> 07:20.790
So we know the direction should be lower.

07:20.790 --> 07:27.450
What we can do in that case instead of instantly generating a new number we can set current high dot

07:27.450 --> 07:33.960
current because the references generated by react are objects that have a current property where the

07:33.960 --> 07:36.120
actual value is stored in.

07:36.150 --> 07:39.320
So we set current equal to current guests.

07:39.330 --> 07:45.570
So what we're saying is if I'm telling you the computer Dad number you guessed is too big and you should

07:45.570 --> 07:53.610
guess a lower one then I know this number which I guessed is my current high the number which is correct

07:53.610 --> 07:55.320
can't be hired in this one.

07:55.320 --> 07:58.780
So I saved a number I just guessed as my heard high.

07:58.800 --> 08:05.160
And again these reference constants here are not regenerated when this component is created again.

08:05.160 --> 08:11.700
Instead if they have been initialized once a bit like the state actually then they're stored detached

08:11.790 --> 08:17.490
from that component and react recognizes that they have been initialized already and it will not regenerate

08:17.490 --> 08:22.440
them but instead initialized current high with the previously stored value.

08:22.440 --> 08:28.240
So it's a bit like if you were managing this in a state the difference to the state instead if you changed

08:28.240 --> 08:32.290
the value stored in there the component thousand we render it because we don't want that here.

08:32.370 --> 08:37.890
I don't want to re render it component just because I'm saving on you high that has no impact on my

08:37.890 --> 08:39.780
view on my j as X code.

08:39.780 --> 08:44.020
It just has an impact on my logic but for Dad I don't need to re rendered a component.

08:44.070 --> 08:47.580
That's why I use a reference here instead of a state.

08:47.640 --> 08:50.730
So that's happening if it's lower else.

08:50.760 --> 08:55.980
So if we told the computer that the guest was too small and the actual numbers should be higher should

08:55.980 --> 08:57.060
be greater.

08:57.060 --> 09:04.970
Well in that case we set the current low to the current guests because then we know we have a lower

09:04.970 --> 09:06.020
boundary.

09:06.230 --> 09:12.230
And now the goal is or the trick is to generate a new random number which takes these boundaries into

09:12.230 --> 09:13.280
account.

09:13.280 --> 09:22.190
So where we used to current low with our ref and adult current as a minimum and current high dot current

09:22.190 --> 09:30.850
is a maximum and I want to exclude the current guests so we can't guess the same number again here so

09:30.850 --> 09:38.440
that for the next role will definitely get a different number so that stands something I store in a

09:38.440 --> 09:39.900
constant next number.

09:39.910 --> 09:41.200
This is generated here.

09:41.350 --> 09:46.020
When the next guest's handler is executed which happens when we treat tab one of these buttons.

09:46.240 --> 09:49.140
And now next number is the next number we want to use.

09:49.150 --> 09:54.370
So now we can simply do as we can call set current guests and add next number.

09:54.370 --> 10:01.660
Now nowadays component will be re rendered and it will output the next guests so let's give that a try.

10:01.660 --> 10:02.960
For now we have no.

10:02.980 --> 10:06.820
The game is over a condition but at least you can try guessing numbers here.

10:06.850 --> 10:09.250
So I entered 50 free as my number.

10:09.250 --> 10:12.040
Now we start in the computer guest a 5.

10:12.100 --> 10:18.220
If I now say greater we get the warning because we light we had 50 free as a number so to guess is too

10:18.220 --> 10:18.580
high.

10:18.580 --> 10:21.590
It should be lower now it's 28.

10:21.610 --> 10:23.260
Well that's too low it should be greater.

10:23.260 --> 10:28.830
So if I tap lower I get the warning if I tap greater we go up now 78.

10:28.840 --> 10:34.030
And now at this moment 20 free the previous guests will be our lower boundary.

10:34.030 --> 10:38.360
And now when I tap lower 78 the current guest will be our upper boundary.

10:38.380 --> 10:44.300
So the next guests will certainly not be above 78 and not be below 20 free.

10:44.430 --> 10:46.690
But it's still too slow and too low.

10:46.690 --> 10:48.460
That's too big.

10:48.460 --> 10:49.580
I mean that's too low.

10:49.600 --> 10:51.520
Let's use a greater one.

10:51.520 --> 10:53.460
Lower one and that would be the correct one.

10:53.500 --> 10:53.850
Now.

10:53.860 --> 10:56.560
For now we have nothing that checks Weber do you.

10:56.580 --> 10:57.820
Computer guessed correctly.

10:58.120 --> 11:00.130
So that's the next thing we'll have to implement here.
