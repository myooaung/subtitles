WEBVTT

00:02.060 --> 00:07.190
So in the create product action creator which currently is a function that just returns that action

00:07.550 --> 00:12.560
we can now tweak this a little bit instead of returning actually we can now return number another function

00:12.560 --> 00:13.050
in there.

00:13.070 --> 00:18.890
Thanks to redux thunk thanks to this package we can do this now and this will be a function which receives

00:18.890 --> 00:29.650
the dispatch function as an argument and then in turn needs to dispatch a action so in here in does

00:29.650 --> 00:31.100
return function.

00:31.180 --> 00:36.310
I now simply need to not return this but dispatch does action.

00:36.310 --> 00:42.090
That's the important difference and I'm missing a curly brace here.

00:42.130 --> 00:43.110
So what happened.

00:43.360 --> 00:50.230
I changed create product to be a function which we actually still can dispatch from inside our components

00:50.740 --> 00:53.500
but which now can still work as before.

00:53.530 --> 00:58.870
So we don't need to change all these action creators so you can stick to the old syntax but now thanks

00:58.870 --> 01:03.770
to redux thunk and alternative syntax so to say is also supported.

01:03.970 --> 01:10.180
Where does action creator function does not immediately return to action object but instead where it

01:10.180 --> 01:15.970
returns a function and if it does redux thunk will step in and make sure that everything is still works

01:16.510 --> 01:22.180
and if it returns a function then this is a function which has to receive an argument the dispatch function

01:22.390 --> 01:28.390
which will be passed and automatically by redux thunk so redux thunk will in the end called his function

01:28.390 --> 01:28.900
for you.

01:29.620 --> 01:35.560
And then therefore you can then dispatch a new action and here dispatch the actual action object which

01:35.560 --> 01:39.680
we previously wanted to dispatch about before you do that.

01:39.850 --> 01:47.170
You can now execute any async code you want and dad will be allowed and will not break your redux flow

01:47.200 --> 01:52.240
because redux thunk will take care about this and you can learn more about this in my react course for

01:52.240 --> 01:56.020
example or of course in the official redux func documentation.

01:56.110 --> 02:00.340
Also in the official redux docs actually.

02:00.350 --> 02:05.900
So now here we can send the H to the p request and then react native we can use to fetch API which is

02:05.900 --> 02:08.120
built in and fetch here.

02:08.120 --> 02:12.590
Works basically like the fetch API in the browser where it is all is available.

02:12.590 --> 02:17.210
It takes a U or L you want to send the request to and that's this you are all we got here.

02:17.210 --> 02:21.180
So I'll just copy that you l from Firebase and entered here.

02:21.380 --> 02:24.440
Now fetch sounds like it always just fetches data.

02:24.440 --> 02:30.440
So if it gets data but actually the name is a bit confusing here it's not just used for getting data.

02:30.440 --> 02:33.950
You can also use it to send a post request or a put request.

02:34.040 --> 02:40.640
So any kind of H2 DP request now although we don't just send a request to dis you are L but now as I

02:40.640 --> 02:47.930
said firebase translates your requests to kind of a database query and the database structure so you

02:47.930 --> 02:50.990
can add any node you want here any segment you want.

02:50.990 --> 02:57.230
Like for example products and firebase will kind of create a folder here in the database and store your

02:57.230 --> 02:58.410
data in there.

02:58.700 --> 03:03.800
Important and that's just a firebase specific thing you need to add dot Chasen here.

03:03.830 --> 03:11.140
So that's not required because of risk native or because of JavaScript or because it's HDP request does

03:11.140 --> 03:15.690
it's just a firebase specific thing by default.

03:15.700 --> 03:21.280
This would send a get request but to store data firebase once a post request and to send that we have

03:21.280 --> 03:27.610
to pass a second argument to fetch which should be a javascript object in that second argument.

03:27.610 --> 03:34.480
You can set up the method key and describe the H to the p method of this request and that can be get

03:34.480 --> 03:42.070
put and so on and here it should be post which adds this product we're about to send to this node which

03:42.070 --> 03:44.130
will be created there.

03:44.140 --> 03:47.760
Now you also can set up some headers there and we need to set a header.

03:47.920 --> 03:53.530
We need to add the content type header and you simply add headers as an object and then have key value

03:53.530 --> 03:58.950
pairs with your header identifiers as keys and the values as well values.

03:59.200 --> 04:04.290
And here the value is application slash Jason Central at Firebase noted we're about to send some Jason

04:04.360 --> 04:06.530
data and then we need to do that.

04:06.580 --> 04:11.680
We need to add a body with the data we want to spend to this request and the data should be in the Jason

04:11.680 --> 04:12.730
format.

04:12.730 --> 04:19.240
Thankfully react native supports that Jason object which browser side JavaScript also supports and there

04:19.240 --> 04:26.440
we can call string ify to turn a javascript array or object into Jason format so into a string in the

04:26.440 --> 04:28.040
end and there.

04:28.040 --> 04:33.210
I want to well append my product so in the end a want to string you Fi.

04:33.210 --> 04:37.420
I object here which holds my title my description.

04:39.100 --> 04:42.100
My image you are L and my price.

04:42.100 --> 04:47.830
Not the idea because actually firebase will generate an idea for us here which is really convenient

04:49.070 --> 04:49.370
now.

04:49.410 --> 04:54.610
This will send the request but of course I only want to create the product locally if that request succeeded

04:54.820 --> 05:00.490
because then I can actually also use stead automatically created I.D. which firebase will return to

05:00.490 --> 05:08.410
me and fetch conveniently returns a promise which is this javascript objects that will eventually resolve

05:08.410 --> 05:12.620
to a value in the future or fro an error in the future.

05:12.940 --> 05:19.290
So to wait for this response We can then add then here after fetch.

05:19.290 --> 05:26.170
So on this promise and we'll get our response here so we can do anything with the response.

05:26.190 --> 05:31.200
You can also listen to errors with catch and that's something you should actually already know because

05:31.200 --> 05:33.290
promises are not HREOC native specific.

05:33.300 --> 05:39.900
That's vanilla javascript and Rick native also supports the more moderate async await syntax instead

05:39.900 --> 05:46.270
of then and catch to use that you add async here in front of your function.

05:46.290 --> 05:53.700
This async keyword and now you can await your response here and store it in a constant with this syntax

05:53.700 --> 05:55.400
with the await keyword.

05:55.410 --> 05:59.520
Now behind the scenes this transforms this to the old syntax with then.

05:59.580 --> 06:05.640
So this is like if you added then here and you used your response in a callback you got there.

06:05.640 --> 06:09.480
But this is a bit easier to read which is why I will use this async await syntax.

06:09.480 --> 06:17.160
Just be aware of the fact that this is like adding then just more readable when you use async await

06:17.160 --> 06:22.770
by the way dysfunction here always will automatically return a promise day offered his entire tree create

06:22.770 --> 06:23.780
product function.

06:23.820 --> 06:25.880
Now returns a promise.

06:26.010 --> 06:27.330
It didn't do that before.

06:27.330 --> 06:28.300
Now it will.

06:28.350 --> 06:33.040
You see that here it now returns a promise so that's our response.

06:34.280 --> 06:38.960
This response now can be kind of unpacked to get the data in there.

06:39.140 --> 06:45.430
So the response data that's done by calling response thought Jason that's a method which is a way to

06:45.430 --> 06:50.730
build on that response object we're getting does again as an async task which we have to wait for.

06:51.050 --> 06:56.910
And now this will in the end give us the data returned by firebase when we add a product.

06:56.920 --> 07:03.620
Now we can for now simply locked at response data to see what's in there and I still dispatch my action

07:03.620 --> 07:03.790
here.

07:03.800 --> 07:09.320
But since we have a wait here and therefore it is like it was in multiple then blocks this will only

07:09.320 --> 07:13.520
be dispatched once D operations here are done.

07:13.520 --> 07:19.190
So with that let's say it doesn't let's add a new product by going to the admin section here and then

07:19.190 --> 07:21.580
I'll add white shirt.

07:21.830 --> 07:24.820
I picked a nice image you were L for dat.

07:24.820 --> 07:26.320
Here it is.

07:26.320 --> 07:34.510
Let's say that costs thirty nine point ninety nine DS a white shirt which is pretty stylish.

07:34.510 --> 07:39.110
If I now save this sneak to learn as first.

07:39.110 --> 07:40.130
Now this is added.

07:40.130 --> 07:41.130
Here it is.

07:41.210 --> 07:46.310
And now if you have a look at Firebase we also see that there now is a product snowed in there.

07:46.310 --> 07:50.430
Does this this unique idea and in Dare we have the data we submitted.

07:50.620 --> 07:53.440
And if you have a look at your console you see this is what we got back.

07:53.440 --> 07:55.100
That's this response data here.

07:55.120 --> 08:01.780
This holds a name key and then also holds this I.D. which firebase generated.

08:01.780 --> 08:08.670
This means that when we dispatch our data here we can actually add an I.D. key here and address state

08:08.720 --> 08:14.800
DOT name to access this name key on the response return by firebase to forward D service had generated

08:14.800 --> 08:21.330
I.D. to our create product reducer in the end or to the logic that runs in the reducer.

08:21.340 --> 08:28.960
So now in the products reducer we can actually not use this dummy I.D. here but instead expect that

08:28.960 --> 08:36.530
on our product data data we now get an I.D. field which is the service I generate that idea I will stick

08:36.530 --> 08:43.430
to the dummy user I do for now though but we'll get this service that generated idea here and here it

08:43.430 --> 08:48.910
is and therefore we use this on the front end as well which will be important for later when we also

08:48.920 --> 08:50.600
delete stuff and so on.

08:50.630 --> 08:55.460
So this adds a product but of course as soon as we reload the app it's gone because in the app it was

08:55.460 --> 08:56.810
only stored in memory.

08:56.810 --> 09:01.190
Now we also store it on a server but we're never fetching it from a server.

09:01.220 --> 09:03.170
So let's make sure we do that as well.
