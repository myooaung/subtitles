WEBVTT

00:02.220 --> 00:03.200
So what's redux

00:03.210 --> 00:07.490
and as I mentioned, only a brief refresher will be given,

00:07.650 --> 00:11.830
I don't give you a detailed walk through through redux in this course,

00:11.910 --> 00:15.500
there are other courses like my react complete guide which do that,

00:15.810 --> 00:19.270
so let's quickly refresh the basics.

00:19.390 --> 00:24.450
Redux is all about having some central store that manages your application state,

00:24.450 --> 00:30.270
the idea behind that is that you don't have to split up your state over multiple containers or pieces

00:30.270 --> 00:34.940
of your application, that you don't have to manage it in your react components.

00:34.950 --> 00:41.700
Now in our demo application thus far, we really only have one place where we manage our central state but

00:41.700 --> 00:48.300
as this application grows, we would run into the issue of having to manage it in different places and that's

00:48.300 --> 00:51.800
always something which can get cumbersome and hard to maintain,

00:51.960 --> 00:57.060
hence the idea of redux to have a central place where you do it. You still have your own components

00:57.060 --> 01:02.670
of course and these components do want to manipulate the state or want to get the latest state, that's an

01:02.670 --> 01:03.900
alternative.

01:03.900 --> 01:05.640
Let's start with manipulating it,

01:05.730 --> 01:08.880
how do components manipulate our central store?

01:08.940 --> 01:10.680
They don't reach out directly to it,

01:10.680 --> 01:15.310
it's not like the central store is a javascript object which we just change,

01:15.360 --> 01:20.990
instead we have a clearly defined process because redux is like a mini framework.

01:21.090 --> 01:23.040
It's a separate javascript package,

01:23.070 --> 01:29.310
you can use it in any javascript project and it has a clearly defined way of managing data and changing

01:29.310 --> 01:29.760
it.

01:30.150 --> 01:34.870
So the way to manipulate this state is to dispatch an action,

01:34.920 --> 01:40.530
actions are like messages we send to the store, messages where we say hey I want to do something to the

01:40.530 --> 01:44.620
store, I want to add a new to-do to our to-do list, something like that.

01:44.670 --> 01:47.950
So actions are predefined information packages,

01:48.000 --> 01:50.180
possibly also with a payload,

01:50.340 --> 01:56.280
so not just a message, I want to do something but also some data which you need to attach to the message,

01:56.580 --> 01:58.690
like I want to add a new to do,

01:58.740 --> 02:01.500
here is the content of it.

02:01.590 --> 02:05.440
These actions still don't directly manipulate the store,

02:05.460 --> 02:12.300
instead we have some central manipulation agencies, something like that you could call it, we reach our

02:12.330 --> 02:18.930
reducers and I'm saying reducers here even though technically there's only one route reducer in a redux

02:18.930 --> 02:25.100
app but we can combine multiple reducers into that root reducer.

02:25.140 --> 02:31.710
The idea behind a reducer is that it receives the actions and then updates the state and it does that

02:31.890 --> 02:36.380
by running a pure synchronous function where you don't have any side effects,

02:36.510 --> 02:42.450
side effects would be things like reaching out to the web, sending an Ajax request or loading a different

02:42.450 --> 02:43.410
page,

02:43.410 --> 02:50.460
none of that happens in a reducer. A reducer is all about getting a message, getting an action and then manipulating

02:50.580 --> 02:58.200
your central store, it updates the central store. Whenever the central store updates, it triggers some

02:58.260 --> 03:00.010
automatic subscriptions

03:00.300 --> 03:08.280
and that's where you can close the circle. Your component can connect or can subscribe to your store,

03:08.280 --> 03:14.390
can hook into this these automatic subscription so to say and it will then receive the update.

03:14.400 --> 03:21.240
That's the idea of redux with a pattern which consists of actions and reducers and also the subscriptions,

03:21.390 --> 03:27.300
now when combining it with react, we have a helpful package, another library which makes this connection

03:27.300 --> 03:31.570
very easy, so that we don't have to do the heavy lifting of subscribing.

03:31.800 --> 03:33.240
That's exactly what I will show you,

03:33.240 --> 03:37.320
I will show you how to connect redux to your react native app.

03:37.320 --> 03:41.050
So with that out of the way, let's add redux to our demo app.
