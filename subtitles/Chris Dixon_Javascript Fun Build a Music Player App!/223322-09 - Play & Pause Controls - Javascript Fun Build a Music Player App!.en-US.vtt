WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.410 --> 00:00:03.835
In this video, we're going to hook up our play

00:00:03.835 --> 00:00:07.275
and also our pause buttons for our audio player.

00:00:07.275 --> 00:00:09.870
Back over in our index page,

00:00:09.870 --> 00:00:11.460
within our controls wrapper,

00:00:11.460 --> 00:00:13.550
we have our two span elements.

00:00:13.550 --> 00:00:19.075
The first one is for our play button so we can add a onclick event handler,

00:00:19.075 --> 00:00:23.390
which is going to trigger a function called playAudio.

00:00:24.530 --> 00:00:27.270
Below this, we have our pause button,

00:00:27.270 --> 00:00:30.160
and this is going to have a click handler to.

00:00:30.160 --> 00:00:33.100
The function of this one is going to trigger,

00:00:33.100 --> 00:00:35.990
is going to be called pause audio.

00:00:37.570 --> 00:00:40.750
Save this file and now over to our script,

00:00:40.750 --> 00:00:43.330
we can set up our two functions.

00:00:43.330 --> 00:00:49.190
Right at the very bottom, the first one was playAudio.

00:00:50.240 --> 00:00:54.030
Inside of our play and also our pause functions,

00:00:54.030 --> 00:00:56.595
we need to access our audio player.

00:00:56.595 --> 00:00:59.060
Above in this onclick section,

00:00:59.060 --> 00:01:01.700
we already have a reference to our player.

00:01:01.700 --> 00:01:05.075
However, because this has been declared inside of this function,

00:01:05.075 --> 00:01:09.155
we can't access it in any other part of our program.

00:01:09.155 --> 00:01:13.560
To access this play from all of our sections or to make it global,

00:01:13.560 --> 00:01:16.005
we're going to cut this line of code,

00:01:16.005 --> 00:01:19.440
and we can place this at the very top.

00:01:19.440 --> 00:01:23.450
Now this play variable is not declared inside of a function.

00:01:23.450 --> 00:01:28.120
This is now in global scope so we can access it in any function.

00:01:28.120 --> 00:01:30.405
Just before we move on, will save this,

00:01:30.405 --> 00:01:33.350
and also check that our songs are still playing when we click

00:01:33.350 --> 00:01:36.180
on each one of these. That's fine.

00:01:36.180 --> 00:01:39.050
We can now move on to our playAudio function.

00:01:39.050 --> 00:01:41.585
Inside here we're going to create an if statement,

00:01:41.585 --> 00:01:46.295
and this if statement is going to check if the audio has finished loading.

00:01:46.295 --> 00:01:52.200
We can do this by accessing our player on a property called readyState,

00:01:52.250 --> 00:01:56.190
so readyState will return a true or false value.

00:01:56.190 --> 00:01:57.965
If ready state returns true,

00:01:57.965 --> 00:02:00.470
this means our audio has finished loading,

00:02:00.470 --> 00:02:03.550
and therefore, we can call player.play.

00:02:03.550 --> 00:02:08.520
After this, our second function is to pause our audio,

00:02:11.840 --> 00:02:15.710
and all we need to do inside here is call player.pause,

00:02:15.710 --> 00:02:19.565
give this file a save and now we can test this out over in the browser,

00:02:19.565 --> 00:02:21.715
give this file a refresh.

00:02:21.715 --> 00:02:25.150
First of all, click on any of our songs, begin playing.

00:02:25.150 --> 00:02:29.665
Once this begins, we can test out our pause function by clicking on this icon,

00:02:29.665 --> 00:02:31.465
our audio now stops,

00:02:31.465 --> 00:02:34.935
and if we click on play the audio begins once again.

00:02:34.935 --> 00:02:38.885
So our play and also our pause functions are now fully working.

00:02:38.885 --> 00:02:40.880
In the next video, we're going to move on to

00:02:40.880 --> 00:02:45.240
the volume slider to control the volume for our player.
