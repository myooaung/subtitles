WEBVTT
1
00:00:02.018 --> 00:00:05.074
Our demo project has the ability to run a sort of

2
00:00:05.074 --> 00:00:07.621
simulation for the hamsters and the races.

3
00:00:07.621 --> 00:00:11.048
Since this is kind of a realâ€‘time operation,

4
00:00:11.048 --> 00:00:13.961
I thought this was a good use of SQS.

5
00:00:13.961 --> 00:00:16.874
Normally you'd want to have another service on the

6
00:00:16.874 --> 00:00:19.901
other end consuming the messages, but, for our demo,

7
00:00:19.901 --> 00:00:23.968
we'll have the same application send and receive messages.

8
00:00:23.968 --> 00:00:25.883
Let's start with sending.

9
00:00:25.883 --> 00:00:32.610
In the lib/data/lib folder, there's an sqs.js file.

10
00:00:32.610 --> 00:00:37.592
This is the file that will send the results of each race simulation.

11
00:00:37.592 --> 00:00:41.777
As usual, replace your region first on line 3.

12
00:00:41.777 --> 00:00:47.351
Now, pushing a message to a queue requires you to have the full queue URL.

13
00:00:47.351 --> 00:00:52.146
I've abstracted this push function so it only requires a queueName,

14
00:00:52.146 --> 00:00:54.935
and then we will retrieve the queue URL.

15
00:00:54.935 --> 00:00:58.072
So our first step will be to do that.

16
00:00:58.072 --> 00:01:02.494
Inside the push function, create a params const object.

17
00:01:02.494 --> 00:01:04.618
It will only need one property, QueueName,

18
00:01:04.618 --> 00:01:09.368
which you can give the value of the queueName function argument.

19
00:01:09.368 --> 00:01:13.832
Inside the following Promise, we're going to call the function SQS.getQueueUrl,

20
00:01:13.832 --> 00:01:19.795
passing in params as the first argument and a callback with

21
00:01:19.795 --> 00:01:22.810
err and data arguments as the second.

22
00:01:22.810 --> 00:01:28.547
If there's an err object, call reject with it; otherwise, add an else block.

23
00:01:28.547 --> 00:01:35.460
Here, we will have a successful URL, so create a params const object.

24
00:01:35.460 --> 00:01:37.976
The first property is going to be MessageBody,

25
00:01:37.976 --> 00:01:40.671
which is the message we're going to send.

26
00:01:40.671 --> 00:01:43.903
We will need to turn the message into JSON,

27
00:01:43.903 --> 00:01:49.449
so call JSON.stringify and pass in the msg function argument.

28
00:01:49.449 --> 00:01:57.339
The next property is QueueUrl, and you can give it the value of data.QueueUrl.

29
00:01:57.339 --> 00:01:59.167
After the params object,

30
00:01:59.167 --> 00:02:04.378
we'll call sqs.sendMessage with the first argument being params and a

31
00:02:04.378 --> 00:02:07.998
callback function with an err argument as the second.

32
00:02:07.998 --> 00:02:13.113
If there's an err object, call reject with err; otherwise, just call resolve.

33
00:02:13.113 --> 00:02:16.077
This is all we need to do to send a message.

34
00:02:16.077 --> 00:02:18.663
In the params for our sendMessage call,

35
00:02:18.663 --> 00:02:21.942
we could have added something like delay seconds or

36
00:02:21.942 --> 00:02:25.872
visibility timeout if we wanted it to be different and

37
00:02:25.872 --> 00:02:28.933
override the queue defaults; and with that,

38
00:02:28.933 --> 00:02:37.000
we're done making our changes for sending the messages. In the next clip, we'll implement the polling part of our project.

