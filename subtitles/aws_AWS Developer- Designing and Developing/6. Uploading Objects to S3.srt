1
00:00:00,940 --> 00:00:05,210
History buckets are great for storing all types of objects, pictures,

2
00:00:05,210 --> 00:00:07,940
videos, text files, you name it.

3
00:00:07,940 --> 00:00:11,700
It's particularly nice for static assets for websites,

4
00:00:11,700 --> 00:00:14,540
and that's what we'll be using it for.

5
00:00:14,540 --> 00:00:21,220
We'll be using the file upload‑s3‑objects.js, so open that in your code editor.

6
00:00:21,220 --> 00:00:25,840
This file has a lot of precompleted code in it mainly because I didn't want you

7
00:00:25,840 --> 00:00:29,040
to bother with loading files from the file system.

8
00:00:29,040 --> 00:00:33,640
As usual, we'll just target some relevant operations to complete.

9
00:00:33,640 --> 00:00:37,540
Start out by entering your region on line 5.

10
00:00:37,540 --> 00:00:42,700
On line 9, replace the bucket name string with whatever name you used to

11
00:00:42,700 --> 00:00:47,440
create a bucket in the last clip, just the string is fine.

12
00:00:47,440 --> 00:00:50,880
The next few lines are where the code actually runs.

13
00:00:50,880 --> 00:00:55,190
A helper function is called that gets all the files in your public folder of

14
00:00:55,190 --> 00:01:01,260
the demo project, then the upload‑ S3‑objects function is called with those

15
00:01:01,260 --> 00:01:04,940
files, so let's go ahead and implement that function.

16
00:01:04,940 --> 00:01:08,720
This function will be a little different than usual because our SDK

17
00:01:08,720 --> 00:01:13,610
function has to be called for each file. For that reason, we'll build

18
00:01:13,610 --> 00:01:18,980
our params function in 2 parts, once on line 16 for the properties that

19
00:01:18,980 --> 00:01:23,660
are common for all files and then make a fresh copy with the unique

20
00:01:23,660 --> 00:01:25,740
file params on line 19.

21
00:01:25,740 --> 00:01:29,590
So on line 16, declare the params const object.

22
00:01:29,590 --> 00:01:34,050
We'll need to know which bucket to upload to so add the bucket property

23
00:01:34,050 --> 00:01:37,690
with the value as the bucket name function argument.

24
00:01:37,690 --> 00:01:39,030
The next property is ACL,

25
00:01:39,030 --> 00:01:42,940
similar to the property we added when we created the bucket.

26
00:01:42,940 --> 00:01:46,410
This ACL is specific to the file that's being uploaded, and since we

27
00:01:46,410 --> 00:01:49,630
want the files we upload to be exposed to all users,

28
00:01:49,630 --> 00:01:56,180
enter the string public‑read here and that's all the common params. On line

29
00:01:56,180 --> 00:02:00,600
21, we're mapping over each element of the files array, and ultimately,

30
00:02:00,600 --> 00:02:05,570
getting an array of promises back. On line 22, were copying the params

31
00:02:05,570 --> 00:02:08,380
object and adding a few more parameters.

32
00:02:08,380 --> 00:02:13,580
The first of these will be added on line 23 with the property key, body.

33
00:02:13,580 --> 00:02:16,380
This will be the actual file contents, which are

34
00:02:16,380 --> 00:02:20,040
available in the file.contents property.

35
00:02:20,040 --> 00:02:21,780
The next property is key,

36
00:02:21,780 --> 00:02:26,160
which is the object key identifier. We can use the file name

37
00:02:26,160 --> 00:02:29,990
for that found on the property file.name.

38
00:02:29,990 --> 00:02:34,640
The next property will be different for each file and its content type.

39
00:02:34,640 --> 00:02:37,260
This should match whatever file is being accessed.

40
00:02:37,260 --> 00:02:42,830
So I've created a helper function called helpers.getContentType. Call that

41
00:02:42,830 --> 00:02:47,660
function and then pass into it the file.name value and the helper function

42
00:02:47,660 --> 00:02:53,200
will return the correct ContentType based on the file extension. And all

43
00:02:53,200 --> 00:02:58,820
that was a very convoluted way of finally getting to a params object, but

44
00:02:58,820 --> 00:03:05,025
now it's complete. On line 29, let's upload the object to S3. Call the

45
00:03:05,025 --> 00:03:07,270
s3.putObject function.

46
00:03:07,270 --> 00:03:09,990
The first argument will be newParams,

47
00:03:09,990 --> 00:03:14,350
which we declared on line 22, and the next argument is our callback

48
00:03:14,350 --> 00:03:18,800
function with err and data arguments. As usual, if there is an err

49
00:03:18,800 --> 00:03:23,800
object, call reject with that err argument, and otherwise, call resolve

50
00:03:23,800 --> 00:03:28,600
with the data argument. On line 36, all of the individual file upload

51
00:03:28,600 --> 00:03:33,990
promises are called and return so we've completed this file now. Move

52
00:03:33,990 --> 00:03:35,540
over to your command line.

53
00:03:35,540 --> 00:03:38,320
We do need to build the project once so that the

54
00:03:38,320 --> 00:03:41,100
JavaScript in CSS files are generated.

55
00:03:41,100 --> 00:03:45,060
Run the command npm run build, this will run

56
00:03:45,060 --> 00:03:48,540
webpack to compile all of the assets.

57
00:03:48,540 --> 00:03:51,150
And once it's complete, we can upload the files,

58
00:03:51,150 --> 00:03:57,740
So execute the command node upload‑s3‑objects.js.

59
00:03:57,740 --> 00:04:01,490
This operation may take a little longer depending on your

60
00:04:01,490 --> 00:04:04,140
upload speed, but once it's complete,

61
00:04:04,140 --> 00:04:09,040
you'll see the E tags for each file output in an array.

62
00:04:09,040 --> 00:04:12,930
Our files are now in S3, but we aren't using them yet.

63
00:04:12,930 --> 00:04:17,540
We need to update our asset references in the demo project source code.

64
00:04:17,540 --> 00:04:22,250
Switch over to the AWS console and go to the S3 dashboard, click into the

65
00:04:22,250 --> 00:04:25,570
bucket we created, and select any one of the files here,

66
00:04:25,570 --> 00:04:29,750
such as application.min.js. In the Overview tab,

67
00:04:29,750 --> 00:04:32,310
there is a link property at the bottom.

68
00:04:32,310 --> 00:04:36,440
We really just want part of that for our purposes, and that's everything

69
00:04:36,440 --> 00:04:40,790
in the link until the file name. This will be the part of the path that

70
00:04:40,790 --> 00:04:43,540
we need to add to our asset references.

71
00:04:43,540 --> 00:04:48,720
We only have two places in our application where we need to modify the path

72
00:04:48,720 --> 00:04:53,850
for the assets, the first is in the handlers/template directory and the

73
00:04:53,850 --> 00:04:58,990
fileindex.html. On line 5, were importing a style sheet,

74
00:04:58,990 --> 00:05:04,520
and right now it's referencing public/stylesheet.css. Remove the public part

75
00:05:04,520 --> 00:05:08,940
of that path and paste in what you got from the S3 object.

76
00:05:08,940 --> 00:05:11,500
Your path should look something like this.

77
00:05:11,500 --> 00:05:15,210
Now on line 11, were bringing in the JavaScript, so again,

78
00:05:15,210 --> 00:05:18,210
remove public and paste over that path.

79
00:05:18,210 --> 00:05:21,960
The other place that we need to modify the path is in the

80
00:05:21,960 --> 00:05:25,640
util folder and the file is assets.js.

81
00:05:25,640 --> 00:05:26,800
At the very top of the file,

82
00:05:26,800 --> 00:05:32,280
there is a base const being created and it should have public right now. You can

83
00:05:32,280 --> 00:05:36,640
remove that completely and paste the S3 URL that you have.

84
00:05:36,640 --> 00:05:41,260
Just make sure that there is no slash at the end so that the final path for

85
00:05:41,260 --> 00:05:51,000
those images is created correctly. In the next clip, we're gonna look at some limits that you may run into with EBS and S3.

