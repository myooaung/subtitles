WEBVTT
1
00:00:00.840 --> 00:00:03.130
Now that we have a hosted zone created,

2
00:00:03.130 --> 00:00:07.080
we can add a record set to it. In your code editor, open

3
00:00:07.080 --> 00:00:11.240
the file create‑route53‑recordset.js.

4
00:00:11.240 --> 00:00:16.590
This is another fairly‑simple file with only one SDK call, but the rules

5
00:00:16.590 --> 00:00:20.140
in the record set itself are going to be quite long.

6
00:00:20.140 --> 00:00:24.580
So let's start by updating your region in line 4.

7
00:00:24.580 --> 00:00:29.060
On line 8, replace the string contents with the hostedzone id

8
00:00:29.060 --> 00:00:32.040
that you copied from the command line output.

9
00:00:32.040 --> 00:00:34.440
It's important this value is correct,

10
00:00:34.440 --> 00:00:37.815
since the route set won't know what to be applied to if

11
00:00:37.815 --> 00:00:42.748
it's not. Now in our createRecordSet function on line 13,

12
00:00:42.748 --> 00:00:45.540
create a new params const object.

13
00:00:45.540 --> 00:00:50.680
Make sure not to delete the comment on line 16 because we'll need that later.

14
00:00:50.680 --> 00:00:53.360
The first property will be HostedZoneId,

15
00:00:53.360 --> 00:00:58.040
which you can give the value of the hzId argument.

16
00:00:58.040 --> 00:01:02.540
The next property is required and it's ChangeBatch.

17
00:01:02.540 --> 00:01:04.790
Give it the value of an object.

18
00:01:04.790 --> 00:01:08.650
This object will have another required property called changes,

19
00:01:08.650 --> 00:01:13.330
which you can give the value of an array. With a single request, you could

20
00:01:13.330 --> 00:01:17.930
create multiple record sets by adding many objects to this array.

21
00:01:17.930 --> 00:01:21.740
For our case, just go ahead and add a single object.

22
00:01:21.740 --> 00:01:24.200
The object's first property is action,

23
00:01:24.200 --> 00:01:29.840
which we will assign the value of a string with CREATE all in caps.

24
00:01:29.840 --> 00:01:35.320
The next property is ResourceRecordSet, which has the value of an object.

25
00:01:35.320 --> 00:01:39.520
Now this is the object where we finally get to the nitty‑gritty details.

26
00:01:39.520 --> 00:01:44.640
The first property is Name, and this is the external DNS name.

27
00:01:44.640 --> 00:01:46.350
You could enter a sub domain here,

28
00:01:46.350 --> 00:01:50.410
but I'm just going to enter this string hbfl.online

29
00:01:50.410 --> 00:01:53.740
to route the basic domain itself.

30
00:01:53.740 --> 00:01:58.740
The next property is Type, and this is the type of DNS record to configure.

31
00:01:58.740 --> 00:02:02.840
You can enter the uppercase letter A here in quotes.

32
00:02:02.840 --> 00:02:06.800
Route 53 allows you to do basic DNS routing to IPs

33
00:02:06.800 --> 00:02:09.160
or more advanced alias routing,

34
00:02:09.160 --> 00:02:14.480
which we'll do. Alias routing lets you just point to an AWS resource and

35
00:02:14.480 --> 00:02:18.740
let Route 53 figure out all the IP and routing stuff.

36
00:02:18.740 --> 00:02:23.340
Add the property AliasTarget, and give it the value of an object.

37
00:02:23.340 --> 00:02:26.570
The first property is DNSName, and this is the

38
00:02:26.570 --> 00:02:30.010
internal AWS DNS name. In our case,

39
00:02:30.010 --> 00:02:33.410
we're going to send it to the load balancer that we've created.

40
00:02:33.410 --> 00:02:37.340
So go to your web browser and the EC2 dashboard.

41
00:02:37.340 --> 00:02:41.420
Select the Load Balancers menu option and then the load balancer that you

42
00:02:41.420 --> 00:02:46.580
created. Finally, copy the DNS name in the details panel.

43
00:02:46.580 --> 00:02:53.240
Now paste that DNS name as a string as the value to the DNSName property.

44
00:02:53.240 --> 00:02:56.060
The next property is EvaluateTargetHealth,

45
00:02:56.060 --> 00:03:01.140
which Route 53 can do to determine whether to route requests or not,

46
00:03:01.140 --> 00:03:04.440
We won't need that, so set this property to false.

47
00:03:04.440 --> 00:03:08.980
The last property is the hostedZoneId. Don't get this confused with the

48
00:03:08.980 --> 00:03:13.510
HostedZoneId at the root of our params object. This is actually the

49
00:03:13.510 --> 00:03:17.190
HostedZoneId of the elastic load balancer.

50
00:03:17.190 --> 00:03:21.140
Copy the URL I put in the comments and go to it in your browser.

51
00:03:21.140 --> 00:03:27.050
This page has all the hosted zones for any region in AWS for load

52
00:03:27.050 --> 00:03:29.790
balancers. Find the HostedzoneId for the region where you

53
00:03:29.790 --> 00:03:32.640
launched your load balancer and copy it.

54
00:03:32.640 --> 00:03:35.030
Now paste it as a string as the value for

55
00:03:35.030 --> 00:03:39.840
HostedZoneId, and that is our params object.

56
00:03:39.840 --> 00:03:41.050
Now move into the Promise,

57
00:03:41.050 --> 00:03:47.940
and to create this record set, we'll call route53.changeResourceRecordSets.

58
00:03:47.940 --> 00:03:49.530
It's an odd function name,

59
00:03:49.530 --> 00:03:53.880
but it's because you can do creates, changes, and deletes all with the same

60
00:03:53.880 --> 00:03:58.580
function, pass in the prams object as the first argument and a callback

61
00:03:58.580 --> 00:04:01.940
function with err and data arguments as the second.

62
00:04:01.940 --> 00:04:06.540
If there's an err object, than call reject, and pass it in;

63
00:04:06.540 --> 00:04:09.240
otherwise, call resolve with the data argument.

64
00:04:09.240 --> 00:04:13.340
Now switch over to your command line and we'll send this RecordSetCreation

65
00:04:13.340 --> 00:04:20.040
request by executing node create‑route53‑recordset.js.

66
00:04:20.040 --> 00:04:20.910
Once it's complete,

67
00:04:20.910 --> 00:04:25.760
you should get some output like this showing the status as PENDING. A

68
00:04:25.760 --> 00:04:28.910
quick note here, because these are DNS changes,

69
00:04:28.910 --> 00:04:31.040
they can take time to propagate.

70
00:04:31.040 --> 00:04:35.720
If we switch over to the AWS Console and go to the Route 53 dashboard,

71
00:04:35.720 --> 00:04:38.470
you'll see that we have our hosted zone here, and

72
00:04:38.470 --> 00:04:41.580
clicking into it, the record set we just created is also

73
00:04:41.580 --> 00:04:44.290
here. They may not be working yet,

74
00:04:44.290 --> 00:04:48.970
but there's nothing else you need to do in Route 53. And that's all for Route

75
00:04:48.970 --> 00:04:58.000
53. In the rest of this module, we're going to look at a different way of routing users to our application with API Gateway.

