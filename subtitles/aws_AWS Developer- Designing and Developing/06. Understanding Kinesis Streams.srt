1
00:00:00,940 --> 00:00:05,500
Sometimes SQS isn't good enough for your application use case.

2
00:00:05,500 --> 00:00:08,850
You could want to avoid the pulling process or you find

3
00:00:08,850 --> 00:00:11,840
that you want a more real‑time solution.

4
00:00:11,840 --> 00:00:15,160
There might be many reasons why SQS won't work,

5
00:00:15,160 --> 00:00:18,940
but Kinesis Streams might be perfect for you.

6
00:00:18,940 --> 00:00:23,950
Kinesis Streams is a service for real‑time data transfer. It scales

7
00:00:23,950 --> 00:00:27,660
easily and can have multiple producers and consumers.

8
00:00:27,660 --> 00:00:33,190
It doesn't have fine‑grain control over how messages are handled like with SQS,

9
00:00:33,190 --> 00:00:37,640
but that simplicity might make it better in some situations.

10
00:00:37,640 --> 00:00:41,320
Let's talk about one of the key concepts in Kinesis

11
00:00:41,320 --> 00:00:43,340
Streams, and that is sharding.

12
00:00:43,340 --> 00:00:47,740
Sharding is the capacity unit used with Kinesis Streams.

13
00:00:47,740 --> 00:00:52,630
One shard is equivalent to your Kinesis stream having 1 megabyte per

14
00:00:52,630 --> 00:00:56,920
second of input and 2 megabytes per second of output.

15
00:00:56,920 --> 00:01:01,540
If you need more input or output, you would add shards to your stream.

16
00:01:01,540 --> 00:01:05,140
We're going to use a Kinesis stream to push our hamster race results

17
00:01:05,140 --> 00:01:09,700
similar to the Q, but the consumer of the Kinesis Stream will update

18
00:01:09,700 --> 00:01:12,740
the races instead of the hamsters.

19
00:01:12,740 --> 00:01:13,420
In our case,

20
00:01:13,420 --> 00:01:17,160
we're going to use a lambda as the consumer. One of the main

21
00:01:17,160 --> 00:01:20,750
reasons is that because a stream is real time,

22
00:01:20,750 --> 00:01:23,120
it requires a dedicated consumer,

23
00:01:23,120 --> 00:01:26,460
and our web application is not really the right fit.

24
00:01:26,460 --> 00:01:30,260
Lambdas are actually a great fit as Kinesis consumers.

25
00:01:30,260 --> 00:01:39,000
So this will give you a taste of how that can work. Now, in the next clip, we're going to create our first Kinesis Stream.

