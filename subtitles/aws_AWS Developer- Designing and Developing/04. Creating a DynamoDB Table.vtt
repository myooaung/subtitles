WEBVTT
1
00:00:02.067 --> 00:00:05.442
The first step we need to accomplish is to create a table in

2
00:00:05.442 --> 00:00:07.868
DynamoDB that we can use to store data.

3
00:00:07.868 --> 00:00:08.796
In our case,

4
00:00:08.796 --> 00:00:14.400
we'll be creating two tables to store the data for hamsters and races.

5
00:00:14.400 --> 00:00:22.159
In the scripts/module_05 folder, open the create‑dynamo‑table.js file.

6
00:00:22.159 --> 00:00:23.249
Looking through this file,

7
00:00:23.249 --> 00:00:28.284
you can see on lines 9 and 10 that we'll be using the same createTable function

8
00:00:28.284 --> 00:00:33.049
twice to create a hamsters and a races table in DynamoDB.

9
00:00:33.049 --> 00:00:36.877
Both tables should have the same key schema,

10
00:00:36.877 --> 00:00:41.452
which is why we're able to do both operations so simply like this.

11
00:00:41.452 --> 00:00:45.375
So let's begin by updating the region on line 4.

12
00:00:45.375 --> 00:00:48.665
Then on line 7, we need our SDK object.

13
00:00:48.665 --> 00:00:52.365
In this case, declare a const variable named dynamo.

14
00:00:52.365 --> 00:00:56.382
The SDK library we'll be using is DynamoDB,

15
00:00:56.382 --> 00:01:03.203
so assign to that variable a new AWS.DynamoDB constructor call.

16
00:01:03.203 --> 00:01:07.488
On line 14, we'll create our params const object.

17
00:01:07.488 --> 00:01:11.453
The params used to create a Dynamo table take into

18
00:01:11.453 --> 00:01:14.487
consideration the schema and keys of the table,

19
00:01:14.487 --> 00:01:17.849
as well as the performance attributes of that table.

20
00:01:17.849 --> 00:01:21.089
We'll start with the first property called TableName and give it

21
00:01:21.089 --> 00:01:24.564
the value of the tableName function argument.

22
00:01:24.564 --> 00:01:28.353
A quick note here, table names do need to be unique in

23
00:01:28.353 --> 00:01:30.525
each region at the account level.

24
00:01:30.525 --> 00:01:35.015
If you use different regions, you can reuse a table name.

25
00:01:35.015 --> 00:01:39.664
The next property is AttributeDefinitions with the value of an array.

26
00:01:39.664 --> 00:01:42.720
These AttributeDefinitions aren't to define the whole

27
00:01:42.720 --> 00:01:46.574
table schema or anything; they're only to define the

28
00:01:46.574 --> 00:01:49.542
attributes we'll be using as our key.

29
00:01:49.542 --> 00:01:51.770
Inside the array, create an object.

30
00:01:51.770 --> 00:01:54.095
The first property here is AttributeName,

31
00:01:54.095 --> 00:01:58.310
which we'll give a string with the value id.

32
00:01:58.310 --> 00:02:00.781
The next property is AttributeType.

33
00:02:00.781 --> 00:02:08.582
Here we've got three options, S for string, N for number, or B for binary.

34
00:02:08.582 --> 00:02:10.776
In our case, our IDs will be numbers,

35
00:02:10.776 --> 00:02:14.854
so enter a string with the value of an uppercase N here.

36
00:02:14.854 --> 00:02:18.308
That's the only attribute we need to define.

37
00:02:18.308 --> 00:02:22.550
After AttributeDefinitions, add the property KeySchema.

38
00:02:22.550 --> 00:02:25.511
This will also be given the value of an array.

39
00:02:25.511 --> 00:02:31.120
Here is where we define our table keys based on the attributes we defined.

40
00:02:31.120 --> 00:02:33.258
Inside the array, add an object.

41
00:02:33.258 --> 00:02:39.042
The first property here will be AttributeName, which will be the string, id.

42
00:02:39.042 --> 00:02:44.776
This needs to match the attribute name defined in our AttributeDefinitions.

43
00:02:44.776 --> 00:02:49.093
The next property is KeyType, which we'll enter as HASH.

44
00:02:49.093 --> 00:02:52.658
Now after the KeySchema property, we'll add the last property,

45
00:02:52.658 --> 00:02:56.060
ProvisionedThroughput, which is an object.

46
00:02:56.060 --> 00:03:00.712
Add the property ReadCapacityUnits with the value of 5,

47
00:03:00.712 --> 00:03:05.582
then the property WriteCapacityUnits, also with the value of 5,

48
00:03:05.582 --> 00:03:09.699
and those are all the params needed to create our table.

49
00:03:09.699 --> 00:03:14.588
Come down to line 35 and call the dynamo.createTable function,

50
00:03:14.588 --> 00:03:17.857
passing in params as the first argument and a callback with

51
00:03:17.857 --> 00:03:20.449
err and data arguments as the second.

52
00:03:20.449 --> 00:03:23.720
Inside that function, if there's an err object,

53
00:03:23.720 --> 00:03:27.989
then call reject, passing in the err argument; otherwise,

54
00:03:27.989 --> 00:03:30.272
call resolve with the data argument.

55
00:03:30.272 --> 00:03:32.174
Now our script is complete.

56
00:03:32.174 --> 00:03:34.974
So switch over to your command line and make sure you're

57
00:03:34.974 --> 00:03:37.258
in the scripts/module_05 directory.

58
00:03:37.258 --> 00:03:43.472
Then execute the command node create‑dynamo‑table.js.

59
00:03:43.472 --> 00:03:44.196
When it's complete,

60
00:03:44.196 --> 00:03:47.352
you should get some output on the second table that was created.

61
00:03:47.352 --> 00:03:51.341
The tables will take a few minutes to be created in DynamoDB,

62
00:03:51.341 --> 00:03:54.348
but then we'll be able to use them.

63
00:03:54.348 --> 00:04:02.000
In the next clip, we're going to populate our table with some data that our demo project will use.

