1
00:00:00,940 --> 00:00:04,540
An empty Dynamo table is worse than an empty S3 bucket.

2
00:00:04,540 --> 00:00:06,040
Okay, maybe not, but still,

3
00:00:06,040 --> 00:00:10,620
we want to populate our Dynamo table with some data. In your scripts

4
00:00:10,620 --> 00:00:16,080
folder, open the file populate‑dynamo‑table.js. This file uses a helpers

5
00:00:16,080 --> 00:00:20,550
function to get some starting hamster and race data, and then it will put

6
00:00:20,550 --> 00:00:23,330
that data into the respective tables.

7
00:00:23,330 --> 00:00:27,540
Let's start with this file by replacing your region in line 5.

8
00:00:27,540 --> 00:00:31,300
On line 8, we need to create our SDK object,

9
00:00:31,300 --> 00:00:36,010
but we won't be using the dynamodb constructor we used in the last clip,

10
00:00:36,010 --> 00:00:41,360
Although you can use the regular dynamodb object to put items in a table,

11
00:00:41,360 --> 00:00:45,820
the SDK also provides a document client, which simplifies the

12
00:00:45,820 --> 00:00:49,340
putting, getting, and querying of a Dynamo table.

13
00:00:49,340 --> 00:00:50,490
To use this,

14
00:00:50,490 --> 00:00:55,320
first declare a new const with the identifier client. Then assign to it

15
00:00:55,320 --> 00:01:01,470
a new AWS.DynamoDB.DocumentClient constructor call.

16
00:01:01,470 --> 00:01:05,640
This will seriously simplify the calls we need to make. In our

17
00:01:05,640 --> 00:01:09,910
populateTable function, we will be creating a params object from all

18
00:01:09,910 --> 00:01:14,540
the items to insert and then call the batch write function. So we'll

19
00:01:14,540 --> 00:01:18,090
start by declaring our params const object.

20
00:01:18,090 --> 00:01:22,000
This one is a little weird because it has a single root property,

21
00:01:22,000 --> 00:01:27,060
RequestItems. Give it an empty object for the value. Then inside, our

22
00:01:27,060 --> 00:01:31,040
property key will be the name of the table we're inserting into.

23
00:01:31,040 --> 00:01:34,920
To get this from the tableName argument, use square brackets and

24
00:01:34,920 --> 00:01:39,000
put the tableName argument inside as the key.

25
00:01:39,000 --> 00:01:42,750
This is how you can reference a variable value for a property key.

26
00:01:42,750 --> 00:01:45,690
We'll build the value to this property dynamically.

27
00:01:45,690 --> 00:01:50,770
So call data.map and pass in a callback function with one argument called

28
00:01:50,770 --> 00:01:57,510
item. Inside we'll return an object with the property PutRequest. As a

29
00:01:57,510 --> 00:02:01,360
note, you could also make this a DeleteRequest, and the batch write

30
00:02:01,360 --> 00:02:06,230
function processes both. Now for the value, create another object and give

31
00:02:06,230 --> 00:02:11,480
it the property Item with the value of the item argument. With this, we'll

32
00:02:11,480 --> 00:02:15,640
dynamically build out the params object and add a put request for each

33
00:02:15,640 --> 00:02:21,490
item. Inside the next promise, we'll call the client.batchWrite function.

34
00:02:21,490 --> 00:02:23,620
The first argument will be params,

35
00:02:23,620 --> 00:02:26,960
and the second will be a callback function with err and data

36
00:02:26,960 --> 00:02:30,900
arguments. Inside that function, if there's an err object,

37
00:02:30,900 --> 00:02:33,450
call reject with the err argument.

38
00:02:33,450 --> 00:02:36,710
Otherwise, call resolve with the data argument.

39
00:02:36,710 --> 00:02:39,610
Let's go ahead and try this out in our command line.

40
00:02:39,610 --> 00:02:42,350
The table should be finished creating by now,

41
00:02:42,350 --> 00:02:48,010
so run the command node populate‑dynamo‑table.js. You'll

42
00:02:48,010 --> 00:02:50,750
get some empty array like this as output,

43
00:02:50,750 --> 00:02:54,230
which means you're good. In the AWS console,

44
00:02:54,230 --> 00:02:57,280
go to the DynamoDB dashboard.

45
00:02:57,280 --> 00:03:02,010
If you select either one of those tables and then look at the Items tab,

46
00:03:02,010 --> 00:03:05,210
you should see the data that we just pushed present

47
00:03:05,210 --> 00:03:07,230
in the table. In the next clip,

48
00:03:07,230 --> 00:03:14,000
we're going to connect our demo project up to this table to consume the data we just put there.

