WEBVTT
1
00:00:00.940 --> 00:00:04.580
We've created a security group in key pairs, so now we're going to create

2
00:00:04.580 --> 00:00:09.310
an EC2 instance that uses both of those resources. We've only got one

3
00:00:09.310 --> 00:00:13.190
unimplemented function in our file at line 86.

4
00:00:13.190 --> 00:00:17.440
This function takes in the security group name and key pair name

5
00:00:17.440 --> 00:00:21.250
that were used to create the other resources. Inside the function,

6
00:00:21.250 --> 00:00:24.290
we'll start by defining a params object.

7
00:00:24.290 --> 00:00:25.790
As you can probably imagine,

8
00:00:25.790 --> 00:00:30.470
this params object will have many more arguments than the other ones we've made.

9
00:00:30.470 --> 00:00:33.470
The first we'll need to add is ImageId.

10
00:00:33.470 --> 00:00:37.680
This is the AMI ID that will be used to create the instance.

11
00:00:37.680 --> 00:00:41.740
And for this, we're going to need to make a little side trip to the console.

12
00:00:41.740 --> 00:00:45.450
See, there are a couple of interesting things about AMIs?

13
00:00:45.450 --> 00:00:45.940
First,

14
00:00:45.940 --> 00:00:49.700
there is an SDK function called describeImages that can be

15
00:00:49.700 --> 00:00:52.790
used to search for AMIs that you can create.

16
00:00:52.790 --> 00:00:55.530
The problem is, the search takes a long time,

17
00:00:55.530 --> 00:00:59.080
and it's really just easier to go to the console directly

18
00:00:59.080 --> 00:01:01.170
if you know what you're looking for.

19
00:01:01.170 --> 00:01:05.560
The second thing about AMIs is that they are region specific. For instance,

20
00:01:05.560 --> 00:01:09.250
and Amazon Linux AMI will have different IDs

21
00:01:09.250 --> 00:01:11.370
depending on which region they're in.

22
00:01:11.370 --> 00:01:14.710
And you can't just reference the ID from one region to

23
00:01:14.710 --> 00:01:17.180
create an instance in a different region.

24
00:01:17.180 --> 00:01:21.840
They're basically unavailable, even if the image contents are the same.

25
00:01:21.840 --> 00:01:23.240
So for that reason,

26
00:01:23.240 --> 00:01:28.140
I'm going to show you how to find the AMI ID that you'll use in your code.

27
00:01:28.140 --> 00:01:32.640
Go to the AWS console and to the EC2 dashboard.

28
00:01:32.640 --> 00:01:34.910
Click on the Launch instance button,

29
00:01:34.910 --> 00:01:40.740
then Launch instance, and you'll be presented with the AMI selection screen.

30
00:01:40.740 --> 00:01:48.460
At the top, there's the Amazon Linux 2 AMI. At the end of that title is the ID.

31
00:01:48.460 --> 00:01:52.160
Yours may or may not be the same as mine based on when you're

32
00:01:52.160 --> 00:01:55.540
watching this or which region you're using.

33
00:01:55.540 --> 00:02:01.800
You may also see x86 and Arm options, like I see here. These are different

34
00:02:01.800 --> 00:02:07.420
types of architecture for the EC2 instance. And since we will be picking

35
00:02:07.420 --> 00:02:11.840
an EC2 instance that uses x86 architecture,

36
00:02:11.840 --> 00:02:19.390
I suggest you stick with the x86 AMI for this course. So copy that AMI ID.

37
00:02:19.390 --> 00:02:23.000
Now switch back to your code and paste that in a string

38
00:02:23.000 --> 00:02:26.840
as the value to the ImageId property.

39
00:02:26.840 --> 00:02:29.120
The next property is InstanceType.

40
00:02:29.120 --> 00:02:35.820
This is the type of instance such as t2.small or m4.extra large and defines

41
00:02:35.820 --> 00:02:40.530
the properties of the instance We've talked before about what these mean,

42
00:02:40.530 --> 00:02:46.140
and we can use one of the smallest here, t2.micro. Next we'll define the

43
00:02:46.140 --> 00:02:51.680
key pair name with the property KeyName, entering the value of keyName from

44
00:02:51.680 --> 00:02:53.540
the function arguments.

45
00:02:53.540 --> 00:02:55.180
Next is the MaxCount property,

46
00:02:55.180 --> 00:03:01.670
which tells AWS how many instances to create, enter 1, then the MinCount

47
00:03:01.670 --> 00:03:07.470
property, and enter 1 as the value for that again. Now add the property

48
00:03:07.470 --> 00:03:11.670
SecurityGroups and give it an array as the value.

49
00:03:11.670 --> 00:03:15.160
This is where we add any security groups to the instance.

50
00:03:15.160 --> 00:03:18.760
Enter the sgName argument into the array.

51
00:03:18.760 --> 00:03:22.480
You can add more than one security group here if you want to.

52
00:03:22.480 --> 00:03:26.500
There's also a SecurityGroups ID property that you could

53
00:03:26.500 --> 00:03:30.290
use instead and reference these security groups by their

54
00:03:30.290 --> 00:03:32.450
IDs rather than by their names.

55
00:03:32.450 --> 00:03:36.270
I find it a little easier to do it by name for this code.

56
00:03:36.270 --> 00:03:39.940
The last property in our params object is UserData.

57
00:03:39.940 --> 00:03:43.730
UserData has a couple of different uses with EC2 instances,

58
00:03:43.730 --> 00:03:49.030
but we will use it to run shell commands once the instance starts.

59
00:03:49.030 --> 00:03:55.260
If you open the file and the module_02 folder called ec2‑startup.sh,

60
00:03:55.260 --> 00:03:58.120
you'll see several shell script commands.

61
00:03:58.120 --> 00:03:58.700
Essentially,

62
00:03:58.700 --> 00:04:04.140
they're just installing Node and Git, cloning the demo project from my GitHub,

63
00:04:04.140 --> 00:04:06.540
installing dependencies, and then running it.

64
00:04:06.540 --> 00:04:10.610
You can't just put these shell scripts directly into the user data field,

65
00:04:10.610 --> 00:04:14.340
however, you have to Base64 encode it.

66
00:04:14.340 --> 00:04:14.770
Well,

67
00:04:14.770 --> 00:04:20.150
I've gone ahead and done that for you in this comment below, so copy that

68
00:04:20.150 --> 00:04:25.940
without the preceding hash symbol, then go back to the create‑ec2‑instance

69
00:04:25.940 --> 00:04:30.440
file and paste it into a string as the UserData value.

70
00:04:30.440 --> 00:04:31.090
And with that,

71
00:04:31.090 --> 00:04:35.640
we have all the params in place. In the next line, we'll return a new

72
00:04:35.640 --> 00:04:40.065
promise with the callback function with resolve and reject arguments.

73
00:04:40.065 --> 00:04:46.280
Inside that function, we'll call ec2.runInstances This is a function that

74
00:04:46.280 --> 00:04:49.640
actually does the EC2 instance creation.

75
00:04:49.640 --> 00:04:52.280
Pass in the params object as the first argument,

76
00:04:52.280 --> 00:04:57.140
and the second will be a callback function with err and data arguments.

77
00:04:57.140 --> 00:05:01.080
Call reject with the err argument if it exists; otherwise,

78
00:05:01.080 --> 00:05:03.940
call resolve with the data argument.

79
00:05:03.940 --> 00:05:06.670
And with that, we have completed our script.

80
00:05:06.670 --> 00:05:07.920
Now to the fun part,

81
00:05:07.920 --> 00:05:12.440
running it. Move over to your command line and navigate to the demo project.

82
00:05:12.440 --> 00:05:15.010
We haven't installed dependencies yet,

83
00:05:15.010 --> 00:05:18.370
and we'll need them for our script, so go ahead and run npm

84
00:05:18.370 --> 00:05:23.620
install at the demo project root. Once that completes, navigate

85
00:05:23.620 --> 00:05:26.040
down to where the script resides.

86
00:05:26.040 --> 00:05:31.660
Now you can run node create‑ec2‑instance.js to execute that

87
00:05:31.660 --> 00:05:34.860
script After a few seconds of nothing,

88
00:05:34.860 --> 00:05:39.420
it should print out the location of the key that was written locally and

89
00:05:39.420 --> 00:05:42.980
the details of the instance that was just created.

90
00:05:42.980 --> 00:05:46.370
The actual boot up of the instance can take a few minutes,

91
00:05:46.370 --> 00:05:48.610
so I'll skip to the future here.

92
00:05:48.610 --> 00:05:53.650
Here's the instance that was created. And if you copy the public IP address

93
00:05:53.650 --> 00:06:00.510
found here and visit it on port 3000, you should see Hamster Ball Fantasy

94
00:06:00.510 --> 00:06:06.040
League appear, running 100% in AWS. In the next clip,

95
00:06:06.040 --> 00:06:11.000
we're going to look at what we can do with this instance now that it's been created.

