WEBVTT
1
00:00:01.070 --> 00:00:04.110
An Auto Scaling policy defines when an Auto Scaling

2
00:00:04.110 --> 00:00:06.640
group should scale up or down.

3
00:00:06.640 --> 00:00:09.870
There are a few different types of Auto Scaling policies,

4
00:00:09.870 --> 00:00:11.940
so let's take a look at them.

5
00:00:11.940 --> 00:00:16.720
Simple scaling policies are the original way that Auto Scaling groups worked.

6
00:00:16.720 --> 00:00:20.620
This uses a CloudWatch alarm to monitor certain attributes

7
00:00:20.620 --> 00:00:24.400
and then perform an action once the alarm occurs. Only one

8
00:00:24.400 --> 00:00:26.950
action can be configured per alarm.

9
00:00:26.950 --> 00:00:29.460
Therefore, if you want true elasticity,

10
00:00:29.460 --> 00:00:34.840
you need a policy for scaling up and a policy for scaling down.

11
00:00:34.840 --> 00:00:37.860
Step scaling policies were added as a way to define multiple

12
00:00:37.860 --> 00:00:40.790
actions when a single alarm fires.

13
00:00:40.790 --> 00:00:44.210
This allows you to modify the behavior of a policy based on the

14
00:00:44.210 --> 00:00:46.740
severity of the alarm that's being fired.

15
00:00:46.740 --> 00:00:50.170
The policy will keep scaling even after it's been initiated,

16
00:00:50.170 --> 00:00:53.770
which differs from simple scaling policies.

17
00:00:53.770 --> 00:00:59.740
The newest scaling policy is target tracking policies, and it's what we'll use.

18
00:00:59.740 --> 00:01:04.180
Target tracking policies allow you to define a target for a metric attribute,

19
00:01:04.180 --> 00:01:09.440
and the policy will scale up or down to stay below that limit.

20
00:01:09.440 --> 00:01:14.630
It's the easiest policy, sort of a set‑and‑forget‑type operation,

21
00:01:14.630 --> 00:01:20.030
and it is the suggested policy type to use now with Auto Scaling groups. In

22
00:01:20.030 --> 00:01:24.540
your code editor, back in the create‑auto scaling.js file,

23
00:01:24.540 --> 00:01:29.660
we're going to implement the createASGPolicy function on line 40.

24
00:01:29.660 --> 00:01:34.300
We need a params const object, so go ahead and create that.

25
00:01:34.300 --> 00:01:37.390
We're going to put all of our policy details in here.

26
00:01:37.390 --> 00:01:43.440
The first property is AdjustmentType and defines what the policy should do.

27
00:01:43.440 --> 00:01:47.180
Enter the string ChangeInCapacity here.

28
00:01:47.180 --> 00:01:51.090
The next property is AutoScalingGroupName, and you can set

29
00:01:51.090 --> 00:01:55.140
the value to the asgName function argument.

30
00:01:55.140 --> 00:01:57.620
Next, add the property PolicyName,

31
00:01:57.620 --> 00:02:04.940
which is a unique identifier. Set the value to the policyName function argument.

32
00:02:04.940 --> 00:02:07.540
The next property is PolicyType.

33
00:02:07.540 --> 00:02:14.380
Enter the string TargetTrackingScaling. Other options are simple or step,

34
00:02:14.380 --> 00:02:16.440
which I explained earlier.

35
00:02:16.440 --> 00:02:16.950
Next,

36
00:02:16.950 --> 00:02:23.170
add the property TargetTrackingConfiguration and set the value to an object.

37
00:02:23.170 --> 00:02:27.940
These are the details about what attribute to use to track to.

38
00:02:27.940 --> 00:02:31.270
The first property for this object is TargetValue.

39
00:02:31.270 --> 00:02:33.070
We're going to be using CPU,

40
00:02:33.070 --> 00:02:37.530
so enter the number 5. It will scale up if the average CPU

41
00:02:37.530 --> 00:02:42.640
utilization for all the instances is above 5% or down if it falls

42
00:02:42.640 --> 00:02:47.680
below. The next property is PredefinedMetricSpecification, and

43
00:02:47.680 --> 00:02:50.440
give it an object as the value.

44
00:02:50.440 --> 00:02:55.160
This object has one property, PredefinedMetricType, with the value of

45
00:02:55.160 --> 00:03:00.830
a string with the text ASGAverageCPUUtilization.

46
00:03:00.830 --> 00:03:05.030
Because CPU utilization is a predefined metric and well

47
00:03:05.030 --> 00:03:09.040
understood by Auto Scaling groups, this is how we will use it.

48
00:03:09.040 --> 00:03:12.050
Now we can return a new promise with the resolve and

49
00:03:12.050 --> 00:03:15.040
reject arguments in a callback function.

50
00:03:15.040 --> 00:03:21.140
We'll use the Auto Scaling object and call the putScalingPolicy property on it.

51
00:03:21.140 --> 00:03:25.310
This will take our Auto Scaling policy and attach it to the Auto Scaling

52
00:03:25.310 --> 00:03:30.090
Group we defined. Pass in params as the first argument and a callback with

53
00:03:30.090 --> 00:03:33.240
err and data arguments as the second argument.

54
00:03:33.240 --> 00:03:36.570
If there's an err object, call reject passing it

55
00:03:36.570 --> 00:03:40.240
in. Otherwise, resolve with data.

56
00:03:40.240 --> 00:03:42.830
Now we have the group and policy being created,

57
00:03:42.830 --> 00:03:49.420
so let's run this file and watch it work. In your command line, execute

58
00:03:49.420 --> 00:03:54.130
node create‑auto‑scaling.js. After some processing,

59
00:03:54.130 --> 00:03:57.840
it should output the result of the policy creation.

60
00:03:57.840 --> 00:04:02.330
I'm going to skip in time a bit, and we can see that the Auto Scaling group was

61
00:04:02.330 --> 00:04:06.440
created and an instance has also been created for the group.

62
00:04:06.440 --> 00:04:09.370
If you go to the Load Balancers menu option and copy

63
00:04:09.370 --> 00:04:15.140
this DNS name into your browser, you'll see the demo project pull up.

64
00:04:15.140 --> 00:04:18.790
This is a result of each one of those pieces we put together.

65
00:04:18.790 --> 00:04:23.400
The load balancer is routing our request to an instance that was created

66
00:04:23.400 --> 00:04:27.840
by the Auto Scaling group using a launch configuration.

67
00:04:27.840 --> 00:04:34.000
In the next clip, let's look at limits we may run into when using Auto Scaling and load balancers.

