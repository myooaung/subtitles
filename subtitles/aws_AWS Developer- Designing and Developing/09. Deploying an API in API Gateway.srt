1
00:00:00,940 --> 00:00:04,620
Deployment in API Gateway is kind of unique.

2
00:00:04,620 --> 00:00:09,080
There are two key concepts, stages and deployments.

3
00:00:09,080 --> 00:00:12,950
API Gateway lets you create stages for your APIs.

4
00:00:12,950 --> 00:00:17,540
Think of stages like development, integration, staging, and production.

5
00:00:17,540 --> 00:00:20,290
You can deploy your API to different stages in order to

6
00:00:20,290 --> 00:00:22,940
have a healthy development lifecycle.

7
00:00:22,940 --> 00:00:24,950
Each time you deploy to a stage,

8
00:00:24,950 --> 00:00:29,450
a deployment is created These are saved in the history of each

9
00:00:29,450 --> 00:00:32,470
stage, so you can move between them easily,

10
00:00:32,470 --> 00:00:36,080
especially in cases where you might need to roll back. To make

11
00:00:36,080 --> 00:00:39,620
our REST API accessible, we need to deploy it.

12
00:00:39,620 --> 00:00:43,040
So, open up your code editor and open the file

13
00:00:43,040 --> 00:00:50,640
deploy‑api‑gateway.js. Start by updating your region on line 4.

14
00:00:50,640 --> 00:00:54,000
On line 8, we need to add the ID for your API.

15
00:00:54,000 --> 00:00:56,140
I'll show you where to find this.

16
00:00:56,140 --> 00:01:00,960
Go to the AWS console and in the API Gateway dashboard. You should

17
00:01:00,960 --> 00:01:05,540
see your API, hamster‑api, so click on that.

18
00:01:05,540 --> 00:01:09,950
And if you look in this title bar after the hamster‑api section,

19
00:01:09,950 --> 00:01:12,940
there's some ID in parentheses.

20
00:01:12,940 --> 00:01:14,760
This is your API ID.

21
00:01:14,760 --> 00:01:21,440
So, copy it. And back in your code, paste it inside the string on line 8.

22
00:01:21,440 --> 00:01:25,750
Deploying our API is as easy as just creating a deployment, so

23
00:01:25,750 --> 00:01:30,010
go ahead and create your params const object inside that

24
00:01:30,010 --> 00:01:32,040
function. We'll add the first property,

25
00:01:32,040 --> 00:01:38,680
which is restApiId, which you can give the value of the apiId function argument.

26
00:01:38,680 --> 00:01:40,020
Next is the stageName,

27
00:01:40,020 --> 00:01:43,940
which you can give the value of the stageName function argument.

28
00:01:43,940 --> 00:01:46,350
And if you look on line 10, you can see that we are

29
00:01:46,350 --> 00:01:49,480
passing in prod as the value for this.

30
00:01:49,480 --> 00:01:53,110
This is where you could differentiate prod and staging and dev,

31
00:01:53,110 --> 00:01:57,240
or however you like to differentiate your different environments.

32
00:01:57,240 --> 00:02:02,430
Now, come down into the Promise and we'll call apiG.createDeployment,

33
00:02:02,430 --> 00:02:06,720
passing in params as our first argument and a callback function with

34
00:02:06,720 --> 00:02:09,940
err and data arguments as our second.

35
00:02:09,940 --> 00:02:14,300
If there's an err object, call reject and pass it in, otherwise

36
00:02:14,300 --> 00:02:17,970
call resolve with the data argument. Each time this function is

37
00:02:17,970 --> 00:02:21,770
called, API Gateway will take the current state of your API

38
00:02:21,770 --> 00:02:24,790
resource and deploy it to that stage.

39
00:02:24,790 --> 00:02:29,260
Simple as that. Now let's move over to our command line and deploy our

40
00:02:29,260 --> 00:02:35,740
API by running the command node deploy‑api‑gateway.js.

41
00:02:35,740 --> 00:02:39,530
After it finishes, it'll output the ID of the deployment,

42
00:02:39,530 --> 00:02:42,840
which is actually pretty useless to us.

43
00:02:42,840 --> 00:02:47,700
To get the URL we can try, go back to your web browser and refresh the

44
00:02:47,700 --> 00:02:52,690
API Gateway dashboard. Under hamster‑api on the left‑hand side menu,

45
00:02:52,690 --> 00:02:57,210
click on Stages and you should see a prod stage.

46
00:02:57,210 --> 00:03:01,440
Expand that, and you will see the resources and methods that were deployed.

47
00:03:01,440 --> 00:03:06,640
You can see the any method for our proxy has turned into individual methods.

48
00:03:06,640 --> 00:03:09,970
If you click on the GET under the hbfl resource,

49
00:03:09,970 --> 00:03:12,430
you'll see a prominently displayed link,

50
00:03:12,430 --> 00:03:15,540
which is where the API Gateway was deployed.

51
00:03:15,540 --> 00:03:18,290
We do need to manually modify this just a bit,

52
00:03:18,290 --> 00:03:22,040
so copy the link and paste it in a new browser window.

53
00:03:22,040 --> 00:03:24,990
Our site needs to be accessed with a trailing slash,

54
00:03:24,990 --> 00:03:29,540
so add that at the end of your URL and hit Enter.

55
00:03:29,540 --> 00:03:34,410
Now we're in our demo project running directly through API Gateway.

56
00:03:34,410 --> 00:03:43,000
In the next clip, we'll look at limits and restrictions you may find when working with Route 53 and API Gateway.

