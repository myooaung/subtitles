WEBVTT
1
00:00:02.041 --> 00:00:02.832
In this video,

2
00:00:02.832 --> 00:00:06.786
we're going to continue our work from the last clip and create a

3
00:00:06.786 --> 00:00:12.047
key pair for an EC2 instance using the AWS SDK.

4
00:00:12.047 --> 00:00:18.161
Back in your code editor, on line 73 we have our createKeyPair function.

5
00:00:18.161 --> 00:00:22.771
This function will take a keyName argument, which is defined and passed above.

6
00:00:22.771 --> 00:00:27.693
Let's start by creating our trusty params object on line 74.

7
00:00:27.693 --> 00:00:30.192
A key pair only really needs one property,

8
00:00:30.192 --> 00:00:31.754
which is easy for us,

9
00:00:31.754 --> 00:00:36.810
and its KeyName to which you can assign the keyName argument.

10
00:00:36.810 --> 00:00:40.650
You may have noticed by now that all the property keys that

11
00:00:40.650 --> 00:00:43.715
the SDK expects are using Pascal case.

12
00:00:43.715 --> 00:00:47.778
All of my variables, however, are camel cased,

13
00:00:47.778 --> 00:00:49.963
following typical JavaScript convention.

14
00:00:49.963 --> 00:00:54.084
Just be aware that the SDK is absolutely case sensitive,

15
00:00:54.084 --> 00:00:57.469
so you can't get by swapping cases.

16
00:00:57.469 --> 00:01:00.155
After declaring your params object,

17
00:01:00.155 --> 00:01:03.609
let's return a new Promise with a callback function with

18
00:01:03.609 --> 00:01:06.776
arguments resolve and reject as the argument.

19
00:01:06.776 --> 00:01:11.990
Inside that callback function, we can call the EC2 function,

20
00:01:11.990 --> 00:01:15.879
createKeyPair, passing params as the first argument.

21
00:01:15.879 --> 00:01:20.938
The second argument is a callback function with the err and data objects.

22
00:01:20.938 --> 00:01:25.322
If there's an error, then call reject with the err object.

23
00:01:25.322 --> 00:01:29.250
In the else, call resolve with the data object.

24
00:01:29.250 --> 00:01:33.855
This data object is important because when the key pair is created in AWS,

25
00:01:33.855 --> 00:01:38.563
the function returns the contents of that key pair's private key.

26
00:01:38.563 --> 00:01:43.579
If you don't save this locally, the key pair is essentially useless.

27
00:01:43.579 --> 00:01:46.031
I've provided a helper function that will actually take this

28
00:01:46.031 --> 00:01:49.172
key pair data and save it locally as a file.

29
00:01:49.172 --> 00:01:52.032
If you don't resolve the data argument here,

30
00:01:52.032 --> 00:01:55.522
it basically throws away the created key pair.

31
00:01:55.522 --> 00:01:57.128
Now our key pair has been created.

32
00:01:57.128 --> 00:01:58.733
If you scroll up to line 15,

33
00:01:58.733 --> 00:02:01.347
you'll see the key pair persistence being called after

34
00:02:01.347 --> 00:02:03.016
the createKeyPair function is called.

35
00:02:03.016 --> 00:02:04.394
In the next clip,

36
00:02:04.394 --> 00:02:14.000
we'll take the work we've done creating a security group and key pair and create an EC2 instance using both.

