1
00:00:01,040 --> 00:00:03,280
Once your instance has been created,

2
00:00:03,280 --> 00:00:06,650
there are a few different operations that you can perform on

3
00:00:06,650 --> 00:00:09,640
the instance as you manage its lifecycle.

4
00:00:09,640 --> 00:00:15,140
The most obvious SDK function to use is modifyInstanceAttribute.

5
00:00:15,140 --> 00:00:18,990
Most of the attributes this method allows you to modify our pretty

6
00:00:18,990 --> 00:00:22,120
granular, like the kernel and RAMdisk,

7
00:00:22,120 --> 00:00:26,030
but a few more commonly used attributes are instance

8
00:00:26,030 --> 00:00:28,640
types and block device mapping.

9
00:00:28,640 --> 00:00:32,430
I honestly didn't think there was much for us to dig into with this call,

10
00:00:32,430 --> 00:00:36,470
so I thought we'd try out two other management functions.

11
00:00:36,470 --> 00:00:40,820
The function describeInstances is useful because it will list all the

12
00:00:40,820 --> 00:00:44,340
instances you currently have running in a given region.

13
00:00:44,340 --> 00:00:48,270
You can apply different filters to further filter the query and

14
00:00:48,270 --> 00:00:51,080
limit what types of instances are returned.

15
00:00:51,080 --> 00:00:55,480
I wanted us to give this function a try and see what we get. In your

16
00:00:55,480 --> 00:00:59,940
code editor, open the file manage‑ec2‑instance.js.

17
00:00:59,940 --> 00:01:05,510
We'll start modifying this file by importing the AWS SDK on line

18
00:01:05,510 --> 00:01:09,840
2 and assigning it to an AWS const variable.

19
00:01:09,840 --> 00:01:14,190
Next on line 4, we need to configure the region in the SDK.

20
00:01:14,190 --> 00:01:20,010
Do this by calling AWS.config.update and passing in an object with a

21
00:01:20,010 --> 00:01:25,520
region property with the region you're using as the value. Now on

22
00:01:25,520 --> 00:01:30,260
line 7, let's create our EC2 object that we'll call our operations

23
00:01:30,260 --> 00:01:36,430
on. Declare a const variable named ec2 and assign to it a new AWS.EC2

24
00:01:36,430 --> 00:01:38,640
constructed object.

25
00:01:38,640 --> 00:01:40,000
With our setup complete,

26
00:01:40,000 --> 00:01:44,790
we're ready to implement the listInstances method on line 9.

27
00:01:44,790 --> 00:01:47,900
The describeInstances function only has a few possible

28
00:01:47,900 --> 00:01:50,140
parameters in the params object.

29
00:01:50,140 --> 00:01:53,600
The main one is the filters to apply. These are things

30
00:01:53,600 --> 00:01:57,340
like instance type, VPC ID or tag.

31
00:01:57,340 --> 00:02:00,100
For our purposes, we're not going to use a filter,

32
00:02:00,100 --> 00:02:03,850
but I just want you to know that that functionality exists.

33
00:02:03,850 --> 00:02:06,520
Since we're using the promise pattern, start by returning

34
00:02:06,520 --> 00:02:09,850
a new promise and creating the argument function with

35
00:02:09,850 --> 00:02:12,240
resolve and reject arguments.

36
00:02:12,240 --> 00:02:16,130
Now we'll call the ec2.describeInstances function.

37
00:02:16,130 --> 00:02:19,360
The first params argument is basically going to be empty,

38
00:02:19,360 --> 00:02:21,440
so just enter an object.

39
00:02:21,440 --> 00:02:26,610
The second argument is the callback function with err and data arguments. Like

40
00:02:26,610 --> 00:02:32,270
usual, reject if there's an err object, otherwise resolve with data. Now, we

41
00:02:32,270 --> 00:02:34,810
will need to do something to this data object,

42
00:02:34,810 --> 00:02:38,610
but I just want you to return it as is to show you what the structure is

43
00:02:38,610 --> 00:02:44,400
like. On line 22, this listInstances function is called and the result

44
00:02:44,400 --> 00:02:49,090
logged, so we can just run the file to see the result. On a command

45
00:02:49,090 --> 00:02:54,620
line, make sure you're in the module_02 folder, and then execute node

46
00:02:54,620 --> 00:02:57,640
manage‑ec2‑instances.js.

47
00:02:57,640 --> 00:03:02,640
Once it's finished, it should print out a small piece of JSON to your console.

48
00:03:02,640 --> 00:03:05,410
This is the structure of that data argument that the

49
00:03:05,410 --> 00:03:08,370
describeInstances function returns.

50
00:03:08,370 --> 00:03:13,390
The top level property is called Reservations, and this is a little weird.

51
00:03:13,390 --> 00:03:17,750
A reservation in this context is essentially a request

52
00:03:17,750 --> 00:03:22,490
from some user to AWS to launch an EC2 instance. This

53
00:03:22,490 --> 00:03:24,880
could have come from the console, the SDK,

54
00:03:24,880 --> 00:03:28,640
the command line, or even something like an auto scaling group.

55
00:03:28,640 --> 00:03:31,300
If you have more than one instance on your account,

56
00:03:31,300 --> 00:03:35,370
there's a very high possibility that this array that is assigned to

57
00:03:35,370 --> 00:03:38,910
Reservations will have more than one object in it.

58
00:03:38,910 --> 00:03:43,140
In my case, there's only one because I'm on a clean account.

59
00:03:43,140 --> 00:03:44,850
You'll see each of the objects,

60
00:03:44,850 --> 00:03:48,760
and this Reservations array has an Instances array.

61
00:03:48,760 --> 00:03:51,190
This is the information we actually want.

62
00:03:51,190 --> 00:03:54,820
It's abstracted here just because the JSON printout doesn't

63
00:03:54,820 --> 00:03:58,160
actually go that deep. Back in your code editor,

64
00:03:58,160 --> 00:04:02,580
let's modify line 13 so we only get the instance information back.

65
00:04:02,580 --> 00:04:06,940
We're going to use a little JavaScripting to basically concatenate all

66
00:04:06,940 --> 00:04:09,940
the Instances arrays in every Reservation object.

67
00:04:09,940 --> 00:04:12,070
So, just stick with me here.

68
00:04:12,070 --> 00:04:17,240
First, add curly braces after else around our resolve call.

69
00:04:17,240 --> 00:04:19,690
Then, from the end of the data object,

70
00:04:19,690 --> 00:04:26,000
reference the Reservations property and then chain called to reduce.

71
00:04:26,000 --> 00:04:27,160
Inside this call,

72
00:04:27,160 --> 00:04:32,950
you'll create a new arrow function with two arguments, i and r. I is the

73
00:04:32,950 --> 00:04:37,280
aggregated instances and r is the current reservation.

74
00:04:37,280 --> 00:04:44,740
Inside that function, return a call to i.concat, passing in r.Instances.

75
00:04:44,740 --> 00:04:49,390
And don't miss the uppercase I on that r.Instances.

76
00:04:49,390 --> 00:04:54,190
Then, after the closing curly braces, add a comma and then an empty array,

77
00:04:54,190 --> 00:04:57,270
which is the seed for our reduce function.

78
00:04:57,270 --> 00:05:00,100
Now if we save that and go back to the command line and

79
00:05:00,100 --> 00:05:06,100
execute node manage‑ec2‑instance.js again, we will see all

80
00:05:06,100 --> 00:05:08,750
the instance image information output.

81
00:05:08,750 --> 00:05:13,140
You've got a ton of information here, like the InstanceType, the KeyName,

82
00:05:13,140 --> 00:05:17,360
the PublicIpAddress, and if you've got more than one instance,

83
00:05:17,360 --> 00:05:19,740
you should see them all listed up here.

84
00:05:19,740 --> 00:05:22,120
We'll use a piece of information here for our next

85
00:05:22,120 --> 00:05:25,140
management function, so let's go and grab it.

86
00:05:25,140 --> 00:05:28,250
Find the instance you just launched in the last clip.

87
00:05:28,250 --> 00:05:34,300
The easiest identifier will likely be the KeyName showing hamster_key.

88
00:05:34,300 --> 00:05:36,900
Copy the InstanceId property,

89
00:05:36,900 --> 00:05:41,350
which will be like a lowercase i‑, and then a bunch of letters and

90
00:05:41,350 --> 00:05:46,830
numbers. Swap over to your code editor and paste this instance ID into

91
00:05:46,830 --> 00:05:51,120
the parentheses on line 28 for terminateInstance.

92
00:05:51,120 --> 00:05:55,080
Ensure there are quotes around the ID in case you didn't copy them.

93
00:05:55,080 --> 00:05:58,490
Now, let's implement terminateInstance so that we can

94
00:05:58,490 --> 00:06:01,570
terminate the instance that we just created.

95
00:06:01,570 --> 00:06:04,900
This function is going to take an instanceId as an argument

96
00:06:04,900 --> 00:06:07,740
and tell AWS to terminate the instance.

97
00:06:07,740 --> 00:06:12,100
For the record, you can also stop an instance if you wanted to.

98
00:06:12,100 --> 00:06:15,550
The key difference between stopping and terminating an instance

99
00:06:15,550 --> 00:06:18,460
is that a stopped instance can be restarted,

100
00:06:18,460 --> 00:06:20,920
but a terminated instance cannot.

101
00:06:20,920 --> 00:06:25,045
We will need a params instance for our SDK call, so on

102
00:06:25,045 --> 00:06:29,540
line 23, declare a params const object.

103
00:06:29,540 --> 00:06:34,390
It will only take one property, InstanceIds, which is an array.

104
00:06:34,390 --> 00:06:39,210
This will let you terminate multiple instances with a single call. Inside this

105
00:06:39,210 --> 00:06:44,180
array, just enter the instanceId argument variable. Now make a new line after

106
00:06:44,180 --> 00:06:48,740
line 27 and we'll return our new Promise pattern.

107
00:06:48,740 --> 00:06:54,420
Inside the function argument, we'll make a call to ec2.terminateInstances,

108
00:06:54,420 --> 00:06:59,160
passing in params as the first argument and a callback as the second with

109
00:06:59,160 --> 00:07:02,430
err and data arguments. Do the usual here,

110
00:07:02,430 --> 00:07:07,590
rejecting if there's an err, otherwise resolve with data. And that's it.

111
00:07:07,590 --> 00:07:13,010
It's pretty simple to terminate instances. Now come down to line 37 and

112
00:07:13,010 --> 00:07:19,200
comment out lines 37 and 38. Then, uncomment lines 39 and 40.

113
00:07:19,200 --> 00:07:23,370
Then, switch over to your command line and we're going to terminate our

114
00:07:23,370 --> 00:07:30,340
hamster instance by running node manage‑ec2‑instance.js again.

115
00:07:30,340 --> 00:07:34,130
When it's complete, it'll output the report from what it terminated,

116
00:07:34,130 --> 00:07:38,400
which should contain that same instance ID that was passed in.

117
00:07:38,400 --> 00:07:40,870
And that's it for terminating instances.

118
00:07:40,870 --> 00:07:42,640
If you don't trust your command line,

119
00:07:42,640 --> 00:07:45,220
you can go back to the console and see that the

120
00:07:45,220 --> 00:07:53,000
instance in question is shutting down. In the next clip, we're going to launch an instance from the AWS Marketplace.

