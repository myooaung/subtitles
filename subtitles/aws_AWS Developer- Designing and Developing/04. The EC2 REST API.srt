1
00:00:01,040 --> 00:00:07,540
AWS provides a REST API to perform operations on services in your account.

2
00:00:07,540 --> 00:00:12,780
Just like any typical REST API, it lets you perform normal CRUD operations,

3
00:00:12,780 --> 00:00:19,070
such as creating EC2 instances or listing all available AMIs.

4
00:00:19,070 --> 00:00:23,050
The API seems very convenient before you discover the

5
00:00:23,050 --> 00:00:26,540
signing procedure required for each request.

6
00:00:26,540 --> 00:00:29,730
When sending any API request to AWS,

7
00:00:29,730 --> 00:00:34,200
you must first sign the entire request with your AWS credentials

8
00:00:34,200 --> 00:00:37,950
and add the generated value as a query parameter.

9
00:00:37,950 --> 00:00:40,730
This is actually common with secure APIs,

10
00:00:40,730 --> 00:00:44,540
but can make it difficult to work with manually.

11
00:00:44,540 --> 00:00:46,940
AWS understands this can be difficult,

12
00:00:46,940 --> 00:00:50,730
which is why they develop and maintain the SDKs.

13
00:00:50,730 --> 00:00:56,220
Inside the code of the SDKs, AWS is signing each request made for you.

14
00:00:56,220 --> 00:00:56,650
Indeed,

15
00:00:56,650 --> 00:01:02,440
most of the SDK is just a thin layer of code over the REST APIs. Making

16
00:01:02,440 --> 00:01:06,560
a request to this REST API, especially signing that request, is a

17
00:01:06,560 --> 00:01:10,200
convoluted process I wouldn't wish on anyone.

18
00:01:10,200 --> 00:01:14,330
It's a process that requires multiple levels of hashing, creating

19
00:01:14,330 --> 00:01:18,240
HMACs, and then actually making the request.

20
00:01:18,240 --> 00:01:21,650
But let's go ahead and take a look at the process involved so

21
00:01:21,650 --> 00:01:24,740
we can appreciate what the SDK does for us.

22
00:01:24,740 --> 00:01:29,560
First of all, you need to decide which version of signature you want to produce.

23
00:01:29,560 --> 00:01:34,780
Version 2 is the older version supported by many of the original services,

24
00:01:34,780 --> 00:01:38,660
but it's largely being deprecated in most places. Version

25
00:01:38,660 --> 00:01:41,720
4 is the preferred signature version.

26
00:01:41,720 --> 00:01:47,220
Certain newer AWS regions actually only support version 4,

27
00:01:47,220 --> 00:01:49,540
as do many newer services.

28
00:01:49,540 --> 00:01:55,310
Each signature version has a different process when signing requests. Version 4

29
00:01:55,310 --> 00:01:59,890
is the more secure, and therefore more complicated process.

30
00:01:59,890 --> 00:02:05,570
With a version 4 signature, you'll start by creating a canonical request.

31
00:02:05,570 --> 00:02:12,070
This is a combination of the HTTP method, the URI path, query parameters,

32
00:02:12,070 --> 00:02:17,490
any headers, and finally, the hashed contents of the request payload.

33
00:02:17,490 --> 00:02:22,080
The next step is to create a string that will be signed for your request.

34
00:02:22,080 --> 00:02:27,410
This string contains the hashing algorithm used, the date, the region,

35
00:02:27,410 --> 00:02:32,850
the service, and finally, the previously derived canonical request that

36
00:02:32,850 --> 00:02:37,550
has been hashed with SHAâ€‘256. And we're not done yet.

37
00:02:37,550 --> 00:02:42,060
Once we have this string, we need to actually sign it. To do this,

38
00:02:42,060 --> 00:02:45,670
we'll need to first calculate a signature by making several

39
00:02:45,670 --> 00:02:50,090
passes through an HMAC. And then finally, signing our string

40
00:02:50,090 --> 00:02:52,680
with the resulting signing string.

41
00:02:52,680 --> 00:02:54,840
That process gives a signature,

42
00:02:54,840 --> 00:03:00,670
which we will add as a query parameter to the actual request when we make it.

43
00:03:00,670 --> 00:03:04,940
This process is pretty difficult to get right as I myself

44
00:03:04,940 --> 00:03:09,720
experienced trying to manually sign a request. The errors

45
00:03:09,720 --> 00:03:14,590
when you get it wrong are unhelpful, and the documentation is not the clearest.

46
00:03:14,590 --> 00:03:18,540
Luckily for you, me, and every other developer in the world,

47
00:03:18,540 --> 00:03:23,810
you can instead just used the AWS SDK to make these requests. You won't

48
00:03:23,810 --> 00:03:26,900
have to sign anything at all, it does it all for you.

49
00:03:26,900 --> 00:03:31,450
The SDK uses your local credentials to make the request and then return

50
00:03:31,450 --> 00:03:34,940
the response to you. Due to the complexities involved, I'm sure you'll

51
00:03:34,940 --> 00:03:44,000
be grateful that we'll be using the SDK as our soul interface to the AWS REST APIs for this course.

