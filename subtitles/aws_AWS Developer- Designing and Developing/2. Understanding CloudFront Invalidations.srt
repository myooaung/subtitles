1
00:00:00,840 --> 00:00:04,740
Content coming from CloudFront is typically best when being served

2
00:00:04,740 --> 00:00:08,340
from the CloudFront cache and not from your origin.

3
00:00:08,340 --> 00:00:12,440
Getting this right will dramatically reduce latency to your user.

4
00:00:12,440 --> 00:00:14,000
But when configuring cache,

5
00:00:14,000 --> 00:00:19,060
you'll set a max time to live before the cash retrieves a new version of the

6
00:00:19,060 --> 00:00:24,080
content from the origin. Set the value too high, and when you release new code

7
00:00:24,080 --> 00:00:26,840
then users are still getting the cached version.

8
00:00:26,840 --> 00:00:31,670
Set it too low, and you're not taking advantage of what CloudFront can offer.

9
00:00:31,670 --> 00:00:36,840
There are two real solutions to make the most out of a high time‑to‑live value.

10
00:00:36,840 --> 00:00:41,940
The first is to invalidate content when you've got a new version available.

11
00:00:41,940 --> 00:00:45,550
This can be done by sending an invalidation to CloudFront,

12
00:00:45,550 --> 00:00:49,210
defining which files to replace with new versions.

13
00:00:49,210 --> 00:00:52,930
A single invalidation can have multiple files to invalidate,

14
00:00:52,930 --> 00:00:55,740
even referencing entire directories.

15
00:00:55,740 --> 00:00:59,510
But there are a couple of downsides to using invalidations

16
00:00:59,510 --> 00:01:02,490
exclusively for handling new content.

17
00:01:02,490 --> 00:01:05,320
The first is that there's a hard limit on the number of

18
00:01:05,320 --> 00:01:08,940
simultaneous invalidations you can process.

19
00:01:08,940 --> 00:01:11,890
While the number is high at 3000 objects,

20
00:01:11,890 --> 00:01:14,850
this essentially places an upper bound on the growth

21
00:01:14,850 --> 00:01:17,060
of your application. In addition,

22
00:01:17,060 --> 00:01:21,470
you're only allowed 1000 free invalidations per month.

23
00:01:21,470 --> 00:01:24,800
Anything above that has a price associated with it.

24
00:01:24,800 --> 00:01:28,500
And to top all this off invalidations can take some time.

25
00:01:28,500 --> 00:01:31,440
They aren't instant. While I've often experienced,

26
00:01:31,440 --> 00:01:35,790
it takes only a few minutes to process an invalidation, that was with only a few

27
00:01:35,790 --> 00:01:39,640
files. I can imagine it would take longer with more files.

28
00:01:39,640 --> 00:01:40,680
The second solution,

29
00:01:40,680 --> 00:01:43,870
which would work better for many applications using CloudFront,

30
00:01:43,870 --> 00:01:48,440
is to treat your assets as immutable and never change them.

31
00:01:48,440 --> 00:01:51,460
This way they can be cached the maximum time and

32
00:01:51,460 --> 00:01:53,940
never need a manual invalidation.

33
00:01:53,940 --> 00:01:57,230
The easiest way to achieve this is to generate a unique name for the

34
00:01:57,230 --> 00:02:01,330
object any time it changes. This might be something as simple as adding

35
00:02:01,330 --> 00:02:04,490
a hash to the file name or a date timestamp.

36
00:02:04,490 --> 00:02:04,900
Then,

37
00:02:04,900 --> 00:02:08,140
when you push a new version of the application, it only references

38
00:02:08,140 --> 00:02:11,340
the new files. The first time they're requested,

39
00:02:11,340 --> 00:02:13,870
CloudFront retrieves them from the origin and then

40
00:02:13,870 --> 00:02:17,370
caches them for the maximum time to live.

41
00:02:17,370 --> 00:02:21,280
This has been my chosen solution when working with CloudFront since it has

42
00:02:21,280 --> 00:02:25,540
the side benefit of solving client caching issues as well.

43
00:02:25,540 --> 00:02:31,000
In the next clip, we're going to actually create a CloudFront distribution for our static assets.

