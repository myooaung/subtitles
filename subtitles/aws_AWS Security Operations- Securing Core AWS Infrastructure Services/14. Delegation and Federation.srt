1
00:00:01,000 --> 00:00:07,927
In this clip we're going to take a look at delegation and federation to AWS.

2
00:00:07,927 --> 00:00:13,371
So federating external users, users that might need access to the backend of AWS,

3
00:00:13,371 --> 00:00:18,356
or they need access to resources, but they don't have IAM accounts,

4
00:00:18,356 --> 00:00:20,927
they don't have any permanent identities.

5
00:00:20,927 --> 00:00:23,574
Well users that already authenticate to a corporate network,

6
00:00:23,574 --> 00:00:28,740
well they can be linked to AWS resources through a process called federation.

7
00:00:28,740 --> 00:00:34,927
You're existing user identity can be linked or federate into AWS.

8
00:00:34,927 --> 00:00:38,427
The most common example is Active Directory Domain Services.

9
00:00:38,427 --> 00:00:42,727
So this can be quite useful when users have corporate credentials.

10
00:00:42,727 --> 00:00:47,127
AWS Directory Service allows you to establish a trust between the

11
00:00:47,127 --> 00:00:51,243
corporate network and the AWS account holding the resources.

12
00:00:51,243 --> 00:00:55,980
So that's one example and the common scenario would be

13
00:00:55,980 --> 00:00:58,327
that somebody is using Active Directory,

14
00:00:58,327 --> 00:01:00,427
they want access to a resource,

15
00:01:00,427 --> 00:01:05,063
we've talked about roles in the past and we'll talk about them in this clip,

16
00:01:05,063 --> 00:01:07,563
we're going to have to create a role that contains the

17
00:01:07,563 --> 00:01:09,705
resources that you want to allow access to.

18
00:01:09,705 --> 00:01:12,816
So the persons authenticates and once they authenticate,

19
00:01:12,816 --> 00:01:17,032
there's a level of trust and that level of trust will

20
00:01:17,032 --> 00:01:19,611
define who's allowed to assume the role,

21
00:01:19,611 --> 00:01:23,205
policy will then define the actions and the resources that

22
00:01:23,205 --> 00:01:25,149
the principle is allowed access to use.

23
00:01:25,149 --> 00:01:29,190
Now we've talked about the principle being an AWS account or a service,

24
00:01:29,190 --> 00:01:34,664
but it now can be, for example, a SAML provider or identity provider,

25
00:01:34,664 --> 00:01:35,927
an external user.

26
00:01:35,927 --> 00:01:40,063
So in that case the user could have an internet identity such as

27
00:01:40,063 --> 00:01:42,927
a mobile app and the backend is in Amazon.

28
00:01:42,927 --> 00:01:46,990
And so they can be identified using an identity provider such as Facebook,

29
00:01:46,990 --> 00:01:47,927
Google or OpenID.

30
00:01:47,927 --> 00:01:52,348
So we're overviewing this here so you get an idea of the

31
00:01:52,348 --> 00:01:54,927
authentication chain when they're an external user.

32
00:01:54,927 --> 00:01:58,070
So with an IAM role, I'm defining access to Resource 1,

33
00:01:58,070 --> 00:02:00,927
in this case, or Resource 2, and a federate user,

34
00:02:00,927 --> 00:02:05,427
they won't have a permanent identity in AWS the way the IAM users actually do,

35
00:02:05,427 --> 00:02:09,844
so we have to actually create a role providing temporary

36
00:02:09,844 --> 00:02:13,927
access through delegation to the AWS resource.

37
00:02:13,927 --> 00:02:16,727
So permissions are defined using IAM roles,

38
00:02:16,727 --> 00:02:19,527
the permissions are attached to the role,

39
00:02:19,527 --> 00:02:22,633
but not to an IAM user or group.

40
00:02:22,633 --> 00:02:24,751
We're going to use the authentication,

41
00:02:24,751 --> 00:02:28,986
the external authentication and that has to be vetted and approved first.

42
00:02:28,986 --> 00:02:31,103
So when the role gets assumed,

43
00:02:31,103 --> 00:02:34,398
what's different is that there are temporary security credentials

44
00:02:34,398 --> 00:02:38,162
provided for access to the requested AWS resource.

45
00:02:38,162 --> 00:02:43,032
So you don't have any long term security credentials that are

46
00:02:43,032 --> 00:02:45,980
stored with access keys and secret access keys,

47
00:02:45,980 --> 00:02:50,927
this is how we access resources at Amazon as an external user.

48
00:02:50,927 --> 00:02:56,177
So when I'm creating an IAM role, I'm going to have to be pretty precise,

49
00:02:56,177 --> 00:03:00,874
pretty careful, because after all it's an external user to my Amazon resources,

50
00:03:00,874 --> 00:03:06,260
and I'll have to define what's the resource that I need external access to?

51
00:03:06,260 --> 00:03:08,927
Then I'll define a trust policy.

52
00:03:08,927 --> 00:03:14,356
What are the actions and resources that the principal will be allowed to?

53
00:03:14,356 --> 00:03:17,927
Once I make that decision, who can assume the role?

54
00:03:17,927 --> 00:03:20,138
Then, how are they accessing it?

55
00:03:20,138 --> 00:03:23,453
We've talked about the AWS account accessing the role,

56
00:03:23,453 --> 00:03:28,302
but in this case we're talking about a SAML provider or an identity

57
00:03:28,302 --> 00:03:30,927
provider needing access to something at Amazon.

58
00:03:30,927 --> 00:03:33,705
Maybe you have a third party orchestration tool that needs

59
00:03:33,705 --> 00:03:36,927
access to your resources to manage those resources and so you

60
00:03:36,927 --> 00:03:40,594
have to give credentials for that access when they have to

61
00:03:40,594 --> 00:03:41,927
carry out their administration.

62
00:03:41,927 --> 00:03:46,205
Once we get these tasks done, we'll define the permission policy,

63
00:03:46,205 --> 00:03:48,927
save it, and put it in place.

64
00:03:48,927 --> 00:03:51,177
Now when we're using identity federation,

65
00:03:51,177 --> 00:03:54,927
we're using some sort of external provider to provide identity,

66
00:03:54,927 --> 00:03:55,348
i.

67
00:03:55,348 --> 00:03:55,769
e.

68
00:03:55,769 --> 00:03:59,138
using an identity provider and this provides that

69
00:03:59,138 --> 00:04:01,664
permission to the external user identity,

70
00:04:01,664 --> 00:04:06,865
but they don't need the IAM user account with credentials.

71
00:04:06,865 --> 00:04:11,927
Now the overall management of those external identities is

72
00:04:11,927 --> 00:04:14,927
carried out using your selected identity provider,

73
00:04:14,927 --> 00:04:17,927
where the user is first authenticating to.

74
00:04:17,927 --> 00:04:21,260
The common corporate example, Active Directory Domain Services,

75
00:04:21,260 --> 00:04:22,927
most companies have this.

76
00:04:22,927 --> 00:04:28,927
And well known identity providers include Google, Facebook, and Amazon Cognito.

77
00:04:28,927 --> 00:04:32,221
So creating that entity, that IAM identity provider,

78
00:04:32,221 --> 00:04:36,365
establishes trust between what you have in your account and

79
00:04:36,365 --> 00:04:39,865
the external identity provider where the authentication for

80
00:04:39,865 --> 00:04:42,927
the end user is first taking place.

81
00:04:42,927 --> 00:04:43,816
SAML 2.

82
00:04:43,816 --> 00:04:47,816
0, security association markup language, OpenID Connect, SAML 2.

83
00:04:47,816 --> 00:04:50,927
0 supported by Active Directory as well,

84
00:04:50,927 --> 00:04:52,927
and lots of third party identity providers.

85
00:04:52,927 --> 00:04:56,221
Now identity federation using the AWS Directory Services,

86
00:04:56,221 --> 00:04:58,280
this is a managed service,

87
00:04:58,280 --> 00:05:03,611
there's two other options that you could also use to connect your AWS resources.

88
00:05:03,611 --> 00:05:04,716
The first one,

89
00:05:04,716 --> 00:05:08,401
use your existing on-prem Active Directory Domain Services and create

90
00:05:08,401 --> 00:05:13,190
a standalone directory service in AWS and then you would have to sync

91
00:05:13,190 --> 00:05:15,038
it with something like Azure Connect.

92
00:05:15,038 --> 00:05:17,538
The managed service, which I don't have to install,

93
00:05:17,538 --> 00:05:20,240
I can just use, provides all the patches,

94
00:05:20,240 --> 00:05:23,302
all the backups and all the upgrades.

95
00:05:23,302 --> 00:05:26,327
In addition, the managed directory service infrastructure,

96
00:05:26,327 --> 00:05:29,927
that's replicated across multiple availability zones within your region.

97
00:05:29,927 --> 00:05:32,927
So you have a couple of choices.

98
00:05:32,927 --> 00:05:36,427
The behind scenes technology that's providing the

99
00:05:36,427 --> 00:05:39,427
authentication is the Security Token Service,

100
00:05:39,427 --> 00:05:39,927
STS,

101
00:05:39,927 --> 00:05:43,356
this provides the temporary security credentials when you're

102
00:05:43,356 --> 00:05:45,927
performing federation with a federated user.

103
00:05:45,927 --> 00:05:49,927
Now STS by default is a global service with a single endpoint.

104
00:05:49,927 --> 00:05:53,594
You can choose to send your requests to a specific region

105
00:05:53,594 --> 00:05:57,594
endpoint if you want to cut down the latency or for additional

106
00:05:57,594 --> 00:05:59,316
redundancy in your overall design.

107
00:05:59,316 --> 00:06:02,816
Now these temp credentials use a short-lived access key,

108
00:06:02,816 --> 00:06:05,927
a secret access key, and a session token.

109
00:06:05,927 --> 00:06:09,927
Customers can also specify how long the credentials are valid for.

110
00:06:09,927 --> 00:06:14,927
Now by default credentials expire after an hour when using SAML.

111
00:06:14,927 --> 00:06:17,260
The minimum duration credentials is 15 minutes.

112
00:06:17,260 --> 00:06:20,594
If I'm using a federated token or a session token,

113
00:06:20,594 --> 00:06:26,103
the minimum is, again, 15 minutes, the maximum could be 36 hours,

114
00:06:26,103 --> 00:06:28,927
and the default is 1 hour.

115
00:06:28,927 --> 00:06:33,348
So some of the features of using STS is we have secure

116
00:06:33,348 --> 00:06:35,559
access without requiring an AWS identity,

117
00:06:35,559 --> 00:06:38,784
therefore I don't have to distribute the security credentials,

118
00:06:38,784 --> 00:06:40,927
I can do it through STS.

119
00:06:40,927 --> 00:06:44,677
It supports the process of single sign on and also

120
00:06:44,677 --> 00:06:45,802
supports multi-factor authentication,

121
00:06:45,802 --> 00:06:58,000
and all calls are going to be logged in CloudTrail. So that's a look at federation and delegation at AWS.

