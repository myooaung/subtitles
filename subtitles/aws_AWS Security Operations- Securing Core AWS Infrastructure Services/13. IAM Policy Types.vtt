WEBVTT
1
00:00:01.000 --> 00:00:06.000
Now we'll take a look at the IAM policy types that are available at AWS,

2
00:00:06.000 --> 00:00:09.191
and we start off with a managed policy.

3
00:00:09.191 --> 00:00:15.342
A managed policy, the backend written in JSON and can be applied to the user,

4
00:00:15.342 --> 00:00:18.978
to the group, or to the role itself.

5
00:00:18.978 --> 00:00:25.578
Now a managed policy, it's created by AWS, and you can decide to use it.

6
00:00:25.578 --> 00:00:27.578
We also have inline policies,

7
00:00:27.578 --> 00:00:31.978
again this policy written in JSON could be for a user,

8
00:00:31.978 --> 00:00:34.083
a group, and/or a role.

9
00:00:34.083 --> 00:00:37.031
The distinct difference is that this policy,

10
00:00:37.031 --> 00:00:42.778
there's a copy of it for whatever principle that you select and when

11
00:00:42.778 --> 00:00:46.978
that principle is removed then the policy is discarded.

12
00:00:46.978 --> 00:00:51.256
We also can have a couple other ways of managing policies,

13
00:00:51.256 --> 00:00:54.614
policies are typically defined as hey there's two types,

14
00:00:54.614 --> 00:00:55.569
managed and custom,

15
00:00:55.569 --> 00:01:00.342
but I want to break them up more on how you can use some of

16
00:01:00.342 --> 00:01:03.549
the resources to get you thinking about how you can use

17
00:01:03.549 --> 00:01:04.978
policies best in your company.

18
00:01:04.978 --> 00:01:09.422
So with tag-based we can define, again written in JSON,

19
00:01:09.422 --> 00:01:12.978
a project and that project, say Project 203,

20
00:01:12.978 --> 00:01:17.919
can have a tag on it and that tag actually defines who

21
00:01:17.919 --> 00:01:19.978
can actually access that project.

22
00:01:19.978 --> 00:01:23.294
Remember when I create something in AWS,

23
00:01:23.294 --> 00:01:28.031
I usually have the option to create one or more

24
00:01:28.031 --> 00:01:33.684
tags describing what I'm creating, so these tags can be very powerful.

25
00:01:33.684 --> 00:01:36.978
The last example would be resource-based where,

26
00:01:36.978 --> 00:01:41.189
again, written in JSON and defined to the actual resource.

27
00:01:41.189 --> 00:01:45.328
Another way of defining this would be the role-based policy.

28
00:01:45.328 --> 00:01:48.478
But I can also think of this as resource-based,

29
00:01:48.478 --> 00:01:54.478
if it gives me clarity as to how I'm controlling access to maybe a bucket

30
00:01:54.478 --> 00:01:58.978
or to maybe a particular virtual machine or instance.

31
00:01:58.978 --> 00:02:01.978
So let's take these policies and expand them out a bit, shall we?

32
00:02:01.978 --> 00:02:07.578
So first of all, managed policy can be attached to multiple users,

33
00:02:07.578 --> 00:02:08.978
groups, and roles.

34
00:02:08.978 --> 00:02:11.873
This policy, you can think of it as you've created it,

35
00:02:11.873 --> 00:02:13.978
it's in your library, linked to your account,

36
00:02:13.978 --> 00:02:17.614
and you can use these policies as you see fit.

37
00:02:17.614 --> 00:02:21.978
Each policy is going to have its own ARN because we are

38
00:02:21.978 --> 00:02:25.089
defining a resource that we want to control.

39
00:02:25.089 --> 00:02:28.978
The managed policy is also defined as applied to identities,

40
00:02:28.978 --> 00:02:31.311
again the identity or the identification,

41
00:02:31.311 --> 00:02:35.978
oh I'm this user, I am this group, I am this role.

42
00:02:35.978 --> 00:02:39.978
The managed policies, first created and maintained by AWS.

43
00:02:39.978 --> 00:02:45.478
Think of it like a master list of possibilities of control of

44
00:02:45.478 --> 00:02:48.978
the AWS resources deployed by the customer.

45
00:02:48.978 --> 00:02:53.715
They're read-only and they're designed for the most common use

46
00:02:53.715 --> 00:02:57.767
cases and job functions and over time there's more and more

47
00:02:57.767 --> 00:02:59.978
example policies that you can deploy.

48
00:02:59.978 --> 00:03:01.978
Example, I want to set up administrator access,

49
00:03:01.978 --> 00:03:03.978
I don't want to write that from scratch,

50
00:03:03.978 --> 00:03:06.662
I want a policy to control security auditing,

51
00:03:06.662 --> 00:03:11.294
I want a policy that controls read-only access to S3 buckets,

52
00:03:11.294 --> 00:03:14.978
I want a policy that defines a level, i.

53
00:03:14.978 --> 00:03:15.378
e.

54
00:03:15.378 --> 00:03:17.778
a power user in my account.

55
00:03:17.778 --> 00:03:18.978
So common scenarios.

56
00:03:18.978 --> 00:03:23.478
Customer managed policies: created and managed by the customer,

57
00:03:23.478 --> 00:03:25.978
written by engineers at AWS,

58
00:03:25.978 --> 00:03:31.096
I choose which policies to take on and manage for my account.

59
00:03:31.096 --> 00:03:33.978
Now how many policies can I have?

60
00:03:33.978 --> 00:03:38.189
Up to 10 managed policies per user group or role.

61
00:03:38.189 --> 00:03:41.978
Now let's take a look at the inline policy.

62
00:03:41.978 --> 00:03:43.796
So with the inline policy,

63
00:03:43.796 --> 00:03:48.887
what we have here is a policy that is said to be linked directly,

64
00:03:48.887 --> 00:03:49.251
i.

65
00:03:49.251 --> 00:03:49.614
e.

66
00:03:49.614 --> 00:03:51.390
one-to-one, with a principle,

67
00:03:51.390 --> 00:03:56.566
a selected user or group or role that you want to

68
00:03:56.566 --> 00:03:57.978
manage specifically one-to-one.

69
00:03:57.978 --> 00:04:01.662
So if the principle is deleted, the policy is revoked,

70
00:04:01.662 --> 00:04:05.925
it's not applied to the principle because the principle is gone.

71
00:04:05.925 --> 00:04:09.715
The policy could still be in your account,

72
00:04:09.715 --> 00:04:15.728
but the inline policy, once created by the customer is managed by the customer,

73
00:04:15.728 --> 00:04:19.928
so a copy of that policy applied to principle and they're said

74
00:04:19.928 --> 00:04:22.452
to be embedded in the selected principle,

75
00:04:22.452 --> 00:04:26.873
so the copy of the policy is not shared with anybody else,

76
00:04:26.873 --> 00:04:31.278
so for example it's not like applying a policy to a group where it

77
00:04:31.278 --> 00:04:33.978
would be shared among the users of that group.

78
00:04:33.978 --> 00:04:38.566
So the number one reason for an inline policy is to manage and

79
00:04:38.566 --> 00:04:42.478
maintain that one-to-one relationship between the policy and the

80
00:04:42.478 --> 00:04:46.978
selected principle and you don't want any mix ups.

81
00:04:46.978 --> 00:04:49.504
Now let's take a look at tag-based policy.

82
00:04:49.504 --> 00:04:50.767
Well what's a tag?

83
00:04:50.767 --> 00:04:55.449
Remember if I create something in AWS, I can typically add many tags,

84
00:04:55.449 --> 00:04:59.978
in most cases up to 50 tags, describing what I'm creating.

85
00:04:59.978 --> 00:05:06.978
So tag-based access control restricts permissions based on the tag value.

86
00:05:06.978 --> 00:05:12.136
Maybe I want certain users or groups of users to be able to detach

87
00:05:12.136 --> 00:05:16.603
volumes from specific EC2 instances with the tag of Dev A.

88
00:05:16.603 --> 00:05:20.978
So I have that control through something that I describe.

89
00:05:20.978 --> 00:05:25.353
So I can enforce permissions when any new resources are

90
00:05:25.353 --> 00:05:27.978
created and assigned the same tag.

91
00:05:27.978 --> 00:05:30.978
So it's quite a handy option.

92
00:05:30.978 --> 00:05:34.978
So tag-based access control is supported for EC2,

93
00:05:34.978 --> 00:05:38.311
VPC, Elastic Block Storage, Relational Database Services,

94
00:05:38.311 --> 00:05:40.978
the Workflow Service, and Data Pipeline,

95
00:05:40.978 --> 00:05:44.978
and more to come in the future I'm sure.

96
00:05:44.978 --> 00:05:45.756
Another example,

97
00:05:45.756 --> 00:05:50.034
I want to assign permissions to Susan granting her permission to

98
00:05:50.034 --> 00:05:54.478
perform any actions on all resources tagged with Dev A,

99
00:05:54.478 --> 00:05:57.478
such as instances and storage resources,

100
00:05:57.478 --> 00:06:01.422
so something to think about when you're describing

101
00:06:01.422 --> 00:06:04.089
your instances and resources at AWS.

102
00:06:04.089 --> 00:06:09.901
Now let's take a look at policies that are directly attached to a

103
00:06:09.901 --> 00:06:14.978
resource and these can include a number of services in AWS.

104
00:06:14.978 --> 00:06:18.272
So when we're looking at a resource policy,

105
00:06:18.272 --> 00:06:20.743
they're attached directly to a resource,

106
00:06:20.743 --> 00:06:26.353
an AWS resource, and policies for resources are supported by an S3 Bucket,

107
00:06:26.353 --> 00:06:27.228
Glacier Vaults,

108
00:06:27.228 --> 00:06:33.286
which probably makes sense since that's an extension of the S3 ecosystem,

109
00:06:33.286 --> 00:06:35.978
SNS Topics, and SQS Queues.

110
00:06:35.978 --> 00:06:40.878
So we've got a couple of areas where I can define a resource policy,

111
00:06:40.878 --> 00:06:42.978
directly applying them to a bucket.

112
00:06:42.978 --> 00:06:45.873
So using a resource policy, again, I've got that granular control,

113
00:06:45.873 --> 00:06:48.346
I want to control access to a specific resource,

114
00:06:48.346 --> 00:06:51.662
and S3 is a pretty big deal at Amazon,

115
00:06:51.662 --> 00:06:54.610
that's ultimately where all storage ends up going,

116
00:06:54.610 --> 00:06:59.978
so these can be a pretty handy option to have in your back pocket.

117
00:06:59.978 --> 00:07:03.311
When I'm looking at the attachment of the policy to

118
00:07:03.311 --> 00:07:08.359
distinguish between resource and users, let's just do a bit of a comparison,

119
00:07:08.359 --> 00:07:13.121
that if it's user-based I might have a DevGroup1 and

120
00:07:13.121 --> 00:07:18.820
they need access to a resource, a queue service or a bucket,

121
00:07:18.820 --> 00:07:22.610
and I'll define the permissions access to that

122
00:07:22.610 --> 00:07:25.756
resource for the user-based policy, it's read,

123
00:07:25.756 --> 00:07:31.978
write, list in this case, and for the resource for the queue service it is list.

124
00:07:31.978 --> 00:07:33.083
In this case,

125
00:07:33.083 --> 00:07:36.767
this policy is attached either to the IAM user or

126
00:07:36.767 --> 00:07:38.978
to the group if it's user-based.

127
00:07:38.978 --> 00:07:42.272
What does a specific entity have access to?

128
00:07:42.272 --> 00:07:44.331
Well we're talking about DevGroup1,

129
00:07:44.331 --> 00:07:48.557
they have these resources that they need access to and the

130
00:07:48.557 --> 00:07:51.504
policy is attached to the user or group,

131
00:07:51.504 --> 00:07:52.978
in this case group.

132
00:07:52.978 --> 00:07:56.878
If I'm looking at resource-based, in this case we have an S3 Bucket,

133
00:07:56.878 --> 00:07:59.516
on the bucket itself I'm defining John read,

134
00:07:59.516 --> 00:08:01.670
list, write, Susan read.

135
00:08:01.670 --> 00:08:05.978
In this case it's attached to the resource.

136
00:08:05.978 --> 00:08:08.096
Who can access the particular resource?

137
00:08:08.096 --> 00:08:11.978
In this case, John and Sue can access the S3 Bucket.

138
00:08:11.978 --> 00:08:13.407
So we've looked at the policies,

139
00:08:13.407 --> 00:08:16.264
we've looked at the fact of how we can attach the policies,

140
00:08:16.264 --> 00:08:18.860
we've looked at a couple of examples.

141
00:08:18.860 --> 00:08:24.978
Let's look at the flow of how the policy is approved or not.

142
00:08:24.978 --> 00:08:28.294
So when we look at policy enforcement for Susan,

143
00:08:28.294 --> 00:08:31.978
Susan wants access to a resource, so first of all,

144
00:08:31.978 --> 00:08:34.835
first level is well deny until we check you out.

145
00:08:34.835 --> 00:08:38.390
So we'll retrieve the policies and we'll look at the policies and

146
00:08:38.390 --> 00:08:41.684
evaluate the policies and through that evaluation process,

147
00:08:41.684 --> 00:08:45.901
the first thing that is checked is the explicit deny,

148
00:08:45.901 --> 00:08:48.670
is there is an explicit deny?

149
00:08:48.670 --> 00:08:49.132
Yes.

150
00:08:49.132 --> 00:08:50.978
Well then explicit deny.

151
00:08:50.978 --> 00:08:53.978
No there's not an explicit deny, okay let's continue.

152
00:08:53.978 --> 00:09:00.500
So continuing from Susan's no, the next stage is is there an explicit allow?

153
00:09:00.500 --> 00:09:02.923
Yes there is, she will be allowed.

154
00:09:02.923 --> 00:09:05.000
No there isn't, she'll be denied.

155
00:09:05.000 --> 00:09:11.500
Amazon S3 supports policies for both IAM users and for resources.

156
00:09:11.500 --> 00:09:22.000
And the S3 resource policies are called bucket policies. We're applying them directly to the bucket itself.

