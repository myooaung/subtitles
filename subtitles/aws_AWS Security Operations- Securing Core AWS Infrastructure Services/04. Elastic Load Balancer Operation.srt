1
00:00:02,000 --> 00:00:02,926
In this clip,

2
00:00:02,926 --> 00:00:06,320
we're going to take a look at the elastic load balancer

3
00:00:06,320 --> 00:00:08,171
operation and some of its features.

4
00:00:08,171 --> 00:00:12,296
So probably the most popular use case for using this load

5
00:00:12,296 --> 00:00:14,171
balancer is internet-facing load balancer,

6
00:00:14,171 --> 00:00:16,671
where it's deployed in the public subnet,

7
00:00:16,671 --> 00:00:19,171
you're balancing traffic to the private subnet.

8
00:00:19,171 --> 00:00:21,171
So, let's look at a picture.

9
00:00:21,171 --> 00:00:25,171
We've got our VPC, we have a private subnet with our workload,

10
00:00:25,171 --> 00:00:29,877
we order the load balancer, it gets placed in the public subnet,

11
00:00:29,877 --> 00:00:33,171
and my workload remaining in the private subnet,

12
00:00:33,171 --> 00:00:35,091
how do I get to it?

13
00:00:35,091 --> 00:00:38,931
Well, a DNS name with public IP address of the load balancer,

14
00:00:38,931 --> 00:00:41,171
the VIP, and we have that communication.

15
00:00:41,171 --> 00:00:45,406
The other option, internal, where it's an intranet location,

16
00:00:45,406 --> 00:00:49,171
and we're hosted in the VPC, yet again,

17
00:00:49,171 --> 00:00:53,457
so we have a private subnet and a private subnet.

18
00:00:53,457 --> 00:00:55,171
We still have separation.

19
00:00:55,171 --> 00:00:58,700
In one of the private subnets goes my load balancer,

20
00:00:58,700 --> 00:01:01,171
in the other private subnet, my workload.

21
00:01:01,171 --> 00:01:05,885
DNS name with the private IP address of the load balancer

22
00:01:05,885 --> 00:01:10,521
versus the internet facing with the DNS name of the public

23
00:01:10,521 --> 00:01:12,621
IP address of the load balancer,

24
00:01:12,621 --> 00:01:17,626
so a little bit of a difference in the placement into what we're doing

25
00:01:17,626 --> 00:01:22,171
with our workload and the load balancing that we need.

26
00:01:22,171 --> 00:01:24,457
So we've eluded to some of the features of the load balancer.

27
00:01:24,457 --> 00:01:26,615
Let's go over some of the kind of classic features that

28
00:01:26,615 --> 00:01:28,171
apply to both of the load balancers.

29
00:01:28,171 --> 00:01:28,838
So, health checks,

30
00:01:28,838 --> 00:01:32,171
the ability of saying that instance has not responded three

31
00:01:32,171 --> 00:01:35,671
times within a particular period of time,

32
00:01:35,671 --> 00:01:41,406
so I'm not going to send any more traffic to that instance.

33
00:01:41,406 --> 00:01:43,877
When it comes to security features,

34
00:01:43,877 --> 00:01:48,771
managed by security groups and NACLs when it's hosted in a VPC.

35
00:01:48,771 --> 00:01:51,571
Why would we say when it's hosted?

36
00:01:51,571 --> 00:01:55,171
Well remember, we had classic networking from the past.

37
00:01:55,171 --> 00:02:00,347
Nowadays it's going to be in a VPC.

38
00:02:00,347 --> 00:02:03,583
It supports end-to-end traffic encryption,

39
00:02:03,583 --> 00:02:08,271
HTTPS/TLS, SSL offloading to take the workload off the web servers,

40
00:02:08,271 --> 00:02:11,271
so we have SSL termination support for the load balancer,

41
00:02:11,271 --> 00:02:14,053
and we can also have sticky sessions.

42
00:02:14,053 --> 00:02:20,171
So you've got a session and you're buying coffee with a particular server,

43
00:02:20,171 --> 00:02:23,266
and you want to ensure that you keep talking to the same server,

44
00:02:23,266 --> 00:02:25,727
you don't want to be directed to another server that

45
00:02:25,727 --> 00:02:27,393
doesn't know anything about your order.

46
00:02:27,393 --> 00:02:31,046
So sticky sessions are really kind of a commonality with load balancing,

47
00:02:31,046 --> 00:02:33,671
associating the session with usually cookies.

48
00:02:33,671 --> 00:02:37,449
So we have a session in that communication channel,

49
00:02:37,449 --> 00:02:40,227
how long that communication channel is going to be open,

50
00:02:40,227 --> 00:02:42,521
the client has authenticated to the load balancer,

51
00:02:42,521 --> 00:02:45,671
the client is known, we have the SSL offload,

52
00:02:45,671 --> 00:02:49,171
so hopefully you can see the benefit of using load

53
00:02:49,171 --> 00:02:52,171
balancing for our web servers.

54
00:02:52,171 --> 00:02:57,615
Now the advantage of the load balancer is that the work of encryption and

55
00:02:57,615 --> 00:03:01,171
decryption and authentication is taken over by the load balancer,

56
00:03:01,171 --> 00:03:05,171
so we end up with a single point of contact for managing

57
00:03:05,171 --> 00:03:08,971
the encryption and decryption process of all traffic that's

58
00:03:08,971 --> 00:03:13,171
being sent to all instances, and we're using HTTPS/TLS,

59
00:03:13,171 --> 00:03:18,171
a pretty standard way of dealing the end-to-end traffic encryption.

60
00:03:18,171 --> 00:03:20,359
Now, if I'm using TLS,

61
00:03:20,359 --> 00:03:25,171
the server certificate will be used to terminate the client connections.

62
00:03:25,171 --> 00:03:27,539
And that can be managed on the load balancer,

63
00:03:27,539 --> 00:03:30,171
and this helps out because it separates the job of

64
00:03:30,171 --> 00:03:33,936
authentication from the instance to the load balancer.

65
00:03:33,936 --> 00:03:38,633
The SSL offload allows me to have the HTTP-encrypted session

66
00:03:38,633 --> 00:03:41,863
between the client to the load balancer,

67
00:03:41,863 --> 00:03:44,171
and to the back-end instances.

68
00:03:44,171 --> 00:03:48,109
And in order to carry out this negotiation process,

69
00:03:48,109 --> 00:03:51,171
you're going to need a security policy.

70
00:03:51,171 --> 00:03:54,171
So these security policies require an SSL certificate to

71
00:03:54,171 --> 00:03:57,444
be installed on the load balancer, kind of makes sense,

72
00:03:57,444 --> 00:03:57,989
doesn't it,

73
00:03:57,989 --> 00:04:01,807
that the load balancer will work based on a set of rules that are

74
00:04:01,807 --> 00:04:05,539
defined by the level of security and at that certificate.

75
00:04:05,539 --> 00:04:12,471
So you can use the predefined policies, or you can have a custom security policy,

76
00:04:12,471 --> 00:04:16,071
maybe you want your own certificates to be on the load balancer,

77
00:04:16,071 --> 00:04:19,571
you don't want to use the ones provided by Amazon.

78
00:04:19,571 --> 00:04:25,171
So, the custom security policies can certainly be used for more security.

79
00:04:25,171 --> 00:04:29,171
So when the client authenticates, looks at that custom certificate,

80
00:04:29,171 --> 00:04:32,957
the load balancer terminates the connections at the load balancer,

81
00:04:32,957 --> 00:04:36,171
decrypts the request, sends it to the back-end instance.

82
00:04:36,171 --> 00:04:47,000
So there's a look at some of the features and some of the security options and some general rules of how the load balancing works at AWS.

