1
00:00:00,000 --> 00:00:03,746
Some of the additional features for ELB security is the

2
00:00:03,746 --> 00:00:05,618
order preference from the server,

3
00:00:05,618 --> 00:00:11,197
so the load balancer will choose the order for the

4
00:00:11,197 --> 00:00:13,742
SSL/TLS cyphers and protocols.

5
00:00:13,742 --> 00:00:17,163
What's happening here is that the cyphers are based on the priority from

6
00:00:17,163 --> 00:00:19,801
the server's point of view instead of the client's.

7
00:00:19,801 --> 00:00:24,742
Now by default, you've got that client wanting to connect with the load balancer,

8
00:00:24,742 --> 00:00:27,469
and they have a list of cyphers and protocols that

9
00:00:27,469 --> 00:00:29,106
they each talk in and support,

10
00:00:29,106 --> 00:00:33,464
and the default is that the first cipher on the client's list that

11
00:00:33,464 --> 00:00:36,575
matches any one of the load balancer's ciphers,

12
00:00:36,575 --> 00:00:38,599
that's selected for the SSL connection.

13
00:00:38,599 --> 00:00:41,742
Well you might say, well I don't want to do that,

14
00:00:41,742 --> 00:00:45,885
I want the load balancer to say, this is the security I'm talking,

15
00:00:45,885 --> 00:00:48,742
you don't want to comply, see you later.

16
00:00:48,742 --> 00:00:53,313
So we have a pretty handy way to ensure that there's a high level of security,

17
00:00:53,313 --> 00:00:56,055
rather than the client dragging the load balancer

18
00:00:56,055 --> 00:00:59,117
down to a lower level of security.

19
00:00:59,117 --> 00:01:01,742
Another feature is perfect forward secrecy.

20
00:01:01,742 --> 00:01:04,689
It prevents the decoding of the captured data,

21
00:01:04,689 --> 00:01:08,374
so there's no compromise of that session key because it's

22
00:01:08,374 --> 00:01:13,409
not going to be stored in a partition, it's going to be stored in RAM,

23
00:01:13,409 --> 00:01:18,028
so it's ephemeral storage, it's gone if the system shuts down,

24
00:01:18,028 --> 00:01:19,742
so no luck.

25
00:01:19,742 --> 00:01:22,367
So as we know, we can use the predefined,

26
00:01:22,367 --> 00:01:24,409
or we can have our own custom,

27
00:01:24,409 --> 00:01:28,617
so just a little more work on the security policies for the load balancer.

28
00:01:28,617 --> 00:01:32,330
It supports ciphers and protocols that are used through that negotiation,

29
00:01:32,330 --> 00:01:34,683
either SSL or TLS.

30
00:01:34,683 --> 00:01:39,977
There is a predefined security policy provided by AWS,

31
00:01:39,977 --> 00:01:45,742
created and updated according to the best AWS security practices at the time.

32
00:01:45,742 --> 00:01:48,142
Now these practices include TLS 1.

33
00:01:48,142 --> 00:01:49,342
1 and 1.

34
00:01:49,342 --> 00:01:51,131
2, setting the server order preference,

35
00:01:51,131 --> 00:01:54,186
and the end result is to have a high-secure cipher that

36
00:01:54,186 --> 00:01:56,507
matches with the bulk of Amazon customers.

37
00:01:56,507 --> 00:02:08,000
However, you can use a custom security policy defined by your needs, the customer needs, and matches your compliance standards.

