WEBVTT
1
00:00:00.000 --> 00:00:05.612
In this clip we're going to take a look at IAM groups.

2
00:00:05.612 --> 00:00:10.053
The grouping of users to manage security policy in AWS.

3
00:00:10.053 --> 00:00:14.603
Now if you are used to doing groups in a network operating system,

4
00:00:14.603 --> 00:00:17.553
this is probably old hat on the corporate network.

5
00:00:17.553 --> 00:00:22.353
But we get to do the same thing and should do the same thing in AWS.

6
00:00:22.353 --> 00:00:29.353
So first up, with our IAM groups, the groups can contain numerous users.

7
00:00:29.353 --> 00:00:35.353
Permissions apply to all of the members that are placed in a group.

8
00:00:35.353 --> 00:00:36.782
Now groups can't be nested,

9
00:00:36.782 --> 00:00:40.210
so you may be used to nesting groups say in Active Directory,

10
00:00:40.210 --> 00:00:42.496
you can't do that inside of AWS.

11
00:00:42.496 --> 00:00:47.829
And it has something to do with the way that the IAM policies are

12
00:00:47.829 --> 00:00:52.496
defined every single time a request is put in that I want access to this

13
00:00:52.496 --> 00:00:55.353
particular resource or to be able to do a task.

14
00:00:55.353 --> 00:00:58.728
There are no default groups, there's no everyone group,

15
00:00:58.728 --> 00:01:01.353
there's no authenticated users group, for example,

16
00:01:01.353 --> 00:01:03.453
like in a Windows operating system.

17
00:01:03.453 --> 00:01:08.353
Now users can belong to multiple groups and if you have a single user,

18
00:01:08.353 --> 00:01:11.553
their needs should be defined using a group.

19
00:01:11.553 --> 00:01:16.353
Meaning that if you set up IAM policy for a single user,

20
00:01:16.353 --> 00:01:20.774
don't be surprised if it gets more complicated because all of the sudden you

21
00:01:20.774 --> 00:01:26.242
want to have somebody else do that task and the temptation will be to give

22
00:01:26.242 --> 00:01:33.000
that user the password credentials for this account. Better to do this in a group.

