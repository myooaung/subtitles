WEBVTT
1
00:00:02.000 --> 00:00:05.141
In this clip, we're going to look at Route 53,

2
00:00:05.141 --> 00:00:08.597
the key service for any cloud provider, for any network really,

3
00:00:08.597 --> 00:00:08.911
DNS.

4
00:00:08.911 --> 00:00:12.911
So let's take a look at a bit of an overview of the product.

5
00:00:12.911 --> 00:00:15.911
Number 1, it's worldwide redundancy with an anycast network,

6
00:00:15.911 --> 00:00:20.411
which means the responsibilities of communication between the nodes

7
00:00:20.411 --> 00:00:26.467
and DNS ensures that the optimal root is going to be utilized to

8
00:00:26.467 --> 00:00:29.578
ensure that you have very fast response,

9
00:00:29.578 --> 00:00:33.753
100% availability SLA, they expect it to be up all the time.

10
00:00:33.753 --> 00:00:36.911
Now we can do some pretty advanced routing, latency-based routing.

11
00:00:36.911 --> 00:00:42.558
So, I'm running applications in multiple regions and I'm using Route 53,

12
00:00:42.558 --> 00:00:45.648
and customers wanting to access those applications,

13
00:00:45.648 --> 00:00:48.595
where do they get them through, ah yeah,

14
00:00:48.595 --> 00:00:49.700
the edge location,

15
00:00:49.700 --> 00:00:55.093
and Route 53 will route the end user to the region that's got the best latency.

16
00:00:55.093 --> 00:01:00.111
Now the Geo DNS that allows you to balance the load by taking the requests,

17
00:01:00.111 --> 00:01:04.111
and again based on where are you in the world,

18
00:01:04.111 --> 00:01:06.911
geographically, where was that request sent from?

19
00:01:06.911 --> 00:01:10.440
I'm going to send you to this endpoint, it's closer.

20
00:01:10.440 --> 00:01:12.911
And there's actually three levels of granularity.

21
00:01:12.911 --> 00:01:16.700
It can either be continent, country, or by state.

22
00:01:16.700 --> 00:01:18.806
We also have weighted round-robin,

23
00:01:18.806 --> 00:01:23.099
and so we can assign weights to our address records to say,

24
00:01:23.099 --> 00:01:25.911
to which server is going to do the response?

25
00:01:25.911 --> 00:01:30.911
Now changes made to Route 53 records are typically updated within 60 seconds.

26
00:01:30.911 --> 00:01:33.611
Now it may take longer depending on the internet,

27
00:01:33.611 --> 00:01:35.111
the world, what's going on,

28
00:01:35.111 --> 00:01:38.661
but this is where this 100% availability SLA comes into play,

29
00:01:38.661 --> 00:01:42.511
and this really means that we're trying to hit this level,

30
00:01:42.511 --> 00:01:46.122
and if we don't, then you can get a credit,

31
00:01:46.122 --> 00:01:47.227
a service credit.

32
00:01:47.227 --> 00:01:50.911
Lastly, anything I do, the API calls monitored via CloudTrail.

33
00:01:50.911 --> 00:01:54.211
So let's take a look at the operation of Route 53.

34
00:01:54.211 --> 00:01:54.511
Ultimately,

35
00:01:54.511 --> 00:01:56.911
it's providing the location of entry to your

36
00:01:56.911 --> 00:02:01.911
service at AWS through the quickest, the closest edge location.

37
00:02:01.911 --> 00:02:02.244
So,

38
00:02:02.244 --> 00:02:05.578
if I'm talking directly to an EC2 instance that has

39
00:02:05.578 --> 00:02:09.184
either a public or private IP address, that system is built,

40
00:02:09.184 --> 00:02:11.366
Route 53 is going to know about it.

41
00:02:11.366 --> 00:02:15.311
It will be updated on the IP addresses that are assigned to the instance,

42
00:02:15.311 --> 00:02:18.511
and therefore it knows where the instance is.

43
00:02:18.511 --> 00:02:22.911
Route 53 also works hand in hand with elastic load balancers.

44
00:02:22.911 --> 00:02:27.911
Health checks, all health checks are sent to all Route 53 servers.

45
00:02:27.911 --> 00:02:31.244
So if I have resources behind the elastic load balancers,

46
00:02:31.244 --> 00:02:34.735
Route 53 is involved with the elastic load balancers and

47
00:02:34.735 --> 00:02:37.205
the health checks of my instances.

48
00:02:37.205 --> 00:02:41.638
Now there's other services that Route 53 is obviously involved with,

49
00:02:41.638 --> 00:02:44.911
including the edge location services that we've talked about.

50
00:02:44.911 --> 00:02:49.711
Now we've used this term edge location service a couple of times,

51
00:02:49.711 --> 00:02:54.449
but specifically on the edge, a typical AWS service is an S3 bucket,

52
00:02:54.449 --> 00:02:56.911
so your S3 bucket can be made public.

53
00:02:56.911 --> 00:03:01.861
The name conventions of S3 buckets follow DNS format.

54
00:03:01.861 --> 00:03:07.911
In front of your buckets, you could have CloudFront content distribution.

55
00:03:07.911 --> 00:03:13.673
How do I find content outside of Amazon as a client?

56
00:03:13.673 --> 00:03:19.820
DNS, Route 53, Route 53 directing me to the closest caching server,

57
00:03:19.820 --> 00:03:23.911
that's the aspect of CloudFront behind the caching server.

58
00:03:23.911 --> 00:03:25.558
Oh my S3 bucket,

59
00:03:25.558 --> 00:03:30.911
or maybe an EC2 instance that is serving content off an EBS volume.

60
00:03:30.911 --> 00:03:33.536
So we can register domain names.

61
00:03:33.536 --> 00:03:37.911
The automatic configuration of DNS goes on all the time.

62
00:03:37.911 --> 00:03:41.961
The registered partner for Amazon Route 53 is Gandi.

63
00:03:41.961 --> 00:03:46.911
Now the primary job of Route 53 is a DNS service,

64
00:03:46.911 --> 00:03:50.340
where it's translating domain names into IP addresses,

65
00:03:50.340 --> 00:03:52.911
the same as DNS does anywhere.

66
00:03:52.911 --> 00:03:55.689
And as mentioned, we have health check integration with CloudWatch,

67
00:03:55.689 --> 00:03:58.744
where we can check the health of our resources,

68
00:03:58.744 --> 00:04:02.911
whether they're instances or containers.

69
00:04:02.911 --> 00:04:06.244
We can also take advantage of Route 53 monitoring services.

70
00:04:06.244 --> 00:04:10.036
For example, we can enable health checks on resources at AWS,

71
00:04:10.036 --> 00:04:12.661
and these are configured with CloudWatch metrics,

72
00:04:12.661 --> 00:04:16.511
so for example, web applications or endpoints can be monitored,

73
00:04:16.511 --> 00:04:20.111
and the health checks are enabled upon the alias

74
00:04:20.111 --> 00:04:22.911
records that are registered in Route 53.

75
00:04:22.911 --> 00:04:25.911
We can also take this a step further and say,

76
00:04:25.911 --> 00:04:27.411
well we'll do DNS failover,

77
00:04:27.411 --> 00:04:31.161
and we'll associated a health check with a resource record set,

78
00:04:31.161 --> 00:04:34.911
in fact, any resource record set found within Route 53.

79
00:04:34.911 --> 00:04:37.858
So, we set up an active-passive failover scheme,

80
00:04:37.858 --> 00:04:41.911
so we say in the primary record, this is the resource,

81
00:04:41.911 --> 00:04:46.911
that system doesn't seem to be up based on the health check on the response.

82
00:04:46.911 --> 00:04:48.625
What's the secondary record?

83
00:04:48.625 --> 00:04:52.911
Let's failover to that resource at the secondary record location.

84
00:04:52.911 --> 00:04:57.244
Now one of the interesting options that we can get through the console

85
00:04:57.244 --> 00:04:59.911
is the Route 53 traffic flow troubleshooting tool.

86
00:04:59.911 --> 00:05:02.482
So if we're using lots of resources at Amazon,

87
00:05:02.482 --> 00:05:04.482
and they all have records at DNS,

88
00:05:04.482 --> 00:05:08.638
it can be kind of challenging to manage this complex

89
00:05:08.638 --> 00:05:11.911
configuration that you may have defined.

90
00:05:11.911 --> 00:05:13.816
So one of the neat things about traffic flow is

91
00:05:13.816 --> 00:05:14.959
just what the name is suggesting,

92
00:05:14.959 --> 00:05:18.411
that you can set up policies to control traffic flow

93
00:05:18.411 --> 00:05:20.911
between your resources at AWS.

94
00:05:20.911 --> 00:05:26.054
So it's ultimately giving me global traffic management

95
00:05:26.054 --> 00:05:29.911
for application access for my clients.

96
00:05:29.911 --> 00:05:33.069
Now if I want to manage access to my applications,

97
00:05:33.069 --> 00:05:35.911
I can also define this based on the latency,

98
00:05:35.911 --> 00:05:38.911
the geography, and the endpoint health.

99
00:05:38.911 --> 00:05:44.911
So I create policies for my route traffic based on the constraints,

100
00:05:44.911 --> 00:05:49.861
based on my resources, based on the location of my resources.

101
00:05:49.861 --> 00:05:54.786
So I can use the visual policy builder within traffic flow

102
00:05:54.786 --> 00:05:57.411
to create a configuration that utilizes,

103
00:05:57.411 --> 00:05:59.161
for example, geolocation routing,

104
00:05:59.161 --> 00:06:03.711
to route all the users from the states to a specific

105
00:06:03.711 --> 00:06:06.511
endpoint to buy coffee at Wired Brain,

106
00:06:06.511 --> 00:06:12.511
and then use latency routing to route all the other users in Europe to send

107
00:06:12.511 --> 00:06:17.578
them to another region based on the latency between those users and the

108
00:06:17.578 --> 00:06:19.911
different regions where my application is hosted.

109
00:06:19.911 --> 00:06:23.578
I could also use failover routing to route users to a

110
00:06:23.578 --> 00:06:25.578
primary load balancer within each region.

111
00:06:25.578 --> 00:06:26.578
So in effect,

112
00:06:26.578 --> 00:06:31.078
I'm going to create what's called a rule set to route my user

113
00:06:31.078 --> 00:06:33.800
requests to the endpoint for my applications,

114
00:06:33.800 --> 00:06:45.000
and there's no charge for creating a traffic policy, it's really trying to help us out in setting up the complexities of DNS.

