1
00:00:01,000 --> 00:00:04,500
Well we've come to the end of a long module.

2
00:00:04,500 --> 00:00:09,991
Let's wrap it up with some best practices for planning our access control.

3
00:00:09,991 --> 00:00:13,880
So when we're creating individual users, we must use IAM.

4
00:00:13,880 --> 00:00:16,991
This way we get unique credentials per user,

5
00:00:16,991 --> 00:00:20,991
credential rotation per user, and we have individual unique permissions,

6
00:00:20,991 --> 00:00:25,991
and always start by granting least privilege.

7
00:00:25,991 --> 00:00:28,462
Make sure we manage permissions through groups.

8
00:00:28,462 --> 00:00:32,324
It's much easier to assign the same permission to multiple users.

9
00:00:32,324 --> 00:00:34,658
So it's kind of obvious isn't it?

10
00:00:34,658 --> 00:00:39,241
Easier to reassign to permissions as the responsibilities of your users change,

11
00:00:39,241 --> 00:00:42,991
and one change updates multiple users.

12
00:00:42,991 --> 00:00:46,324
Now in conditions there was one example condition we were

13
00:00:46,324 --> 00:00:48,991
looking at when we were dealing with resources,

14
00:00:48,991 --> 00:00:54,991
using an IP address range to be able to connect to some resource at AWS.

15
00:00:54,991 --> 00:00:59,991
Consider those sorts of conditions when you're trying to be absolutely granular.

16
00:00:59,991 --> 00:01:03,697
Restrict access from a specific IP address,

17
00:01:03,697 --> 00:01:08,991
as mentioned, restrict a database creation using a specific engine.

18
00:01:08,991 --> 00:01:09,462
Again,

19
00:01:09,462 --> 00:01:14,638
trying to narrow down where you can solve potential future security

20
00:01:14,638 --> 00:01:17,517
problems when you didn't lock something down,

21
00:01:17,517 --> 00:01:18,570
when you could have.

22
00:01:18,570 --> 00:01:21,465
Or maybe you want to set conditions that the user can

23
00:01:21,465 --> 00:01:24,241
create only specific EC2 instances.

24
00:01:24,241 --> 00:01:27,991
So again, that granular control.

25
00:01:27,991 --> 00:01:29,062
On to auditing.

26
00:01:29,062 --> 00:01:31,205
Get visibility into your users activity.

27
00:01:31,205 --> 00:01:32,991
How do I do that?

28
00:01:32,991 --> 00:01:36,948
Oh yeah, I enable CloudTrail to get the logs of the API calls,

29
00:01:36,948 --> 00:01:41,355
so I could log the calls to an S3 Bucket in my account

30
00:01:41,355 --> 00:01:44,991
and then I can see what's going on.

31
00:01:44,991 --> 00:01:46,491
Create strong passwords.

32
00:01:46,491 --> 00:01:50,991
Ensure you, your users, and your data is protected.

33
00:01:50,991 --> 00:01:56,591
So that strong password policy, there's a number of components to consider,

34
00:01:56,591 --> 00:01:59,591
password expiration, password strength, the reuse policy.

35
00:01:59,591 --> 00:02:03,591
You may find that your corporate policy is a good

36
00:02:03,591 --> 00:02:05,991
baseline to consider using in AWS.

37
00:02:05,991 --> 00:02:09,991
Remember, the password policy does not apply to the root user.

38
00:02:09,991 --> 00:02:11,324
Credential rotation.

39
00:02:11,324 --> 00:02:15,991
Ideally rotating those credentials on a schedule.

40
00:02:15,991 --> 00:02:18,610
We can find out the information on our users and the

41
00:02:18,610 --> 00:02:20,991
credentials that are active or the ones that should be

42
00:02:20,991 --> 00:02:23,991
rotated or deleted using credential reports.

43
00:02:23,991 --> 00:02:29,991
The IAM console will also display when the password was last used.

44
00:02:29,991 --> 00:02:34,412
So we have some tools and we can grant IAM user permission

45
00:02:34,412 --> 00:02:36,991
so a user can rotate their credentials.

46
00:02:36,991 --> 00:02:39,600
Now you and I know most users aren't going to do that,

47
00:02:39,600 --> 00:02:42,866
so you probably want to look at how you can automate that task.

48
00:02:42,866 --> 00:02:46,366
Lastly, if you're defining roles for EC2 instances,

49
00:02:46,366 --> 00:02:48,991
hey they rotate their credentials automatically.

50
00:02:48,991 --> 00:02:55,991
Multi-factor authentication, enable that for all privileged users, all users.

51
00:02:55,991 --> 00:02:59,366
Require a one-time code during authentication.

52
00:02:59,366 --> 00:03:07,991
And so we have choices, the virtual MFA, hardware devices, or an SMS feature.

53
00:03:07,991 --> 00:03:09,096
What about sharing?

54
00:03:09,096 --> 00:03:12,044
Well only use IAM roles to share access.

55
00:03:12,044 --> 00:03:14,991
There is no need to share security credentials,

56
00:03:14,991 --> 00:03:18,191
there's no need to store long term credentials.

57
00:03:18,191 --> 00:03:22,991
We want to analyze and implement these based on your use case.

58
00:03:22,991 --> 00:03:28,991
Cross account access potentially, account delegation, or federation.

59
00:03:28,991 --> 00:03:30,866
When looking at the IAM roles,

60
00:03:30,866 --> 00:03:33,991
we want to consider using those roles for EC2 instances.

61
00:03:33,991 --> 00:03:38,541
Again, the example, my instance needs to access a bucket on my behalf,

62
00:03:38,541 --> 00:03:42,191
let the instance carry out that request on my behalf.

63
00:03:42,191 --> 00:03:44,991
Access keys are stored on the instances.

64
00:03:44,991 --> 00:03:46,991
We have automatic key rotation.

65
00:03:46,991 --> 00:03:51,202
We get the automatic assigning of least privilege to the

66
00:03:51,202 --> 00:03:54,991
application if we manage IAM roles for our instances.

67
00:03:54,991 --> 00:03:56,866
And if you're a developer,

68
00:03:56,866 --> 00:04:00,991
it's fully integrated with the software development kits offered by AWS,

69
00:04:00,991 --> 00:04:02,991
and if you're an administrator,

70
00:04:02,991 --> 00:04:06,991
you can do this all at the command line interface.

71
00:04:06,991 --> 00:04:08,991
And oh yeah, the root account.

72
00:04:08,991 --> 00:04:10,991
Reduce or restrict the root account.

73
00:04:10,991 --> 00:04:13,658
We looked at certain ways of doing that,

74
00:04:13,658 --> 00:04:16,658
such as a random password that we don't save,

75
00:04:16,658 --> 00:04:19,491
locking up the email address of the root account.

76
00:04:19,491 --> 00:04:20,991
We have to do this.

77
00:04:20,991 --> 00:04:24,991
We want to remove the potential for misuse or these administrative credentials,

78
00:04:24,991 --> 00:04:26,991
they can do anything.

79
00:04:26,991 --> 00:04:29,299
Alright time for a wrap up.

80
00:04:29,299 --> 00:04:31,991
We looked at identity and access management.

81
00:04:31,991 --> 00:04:34,491
We looked at IAM users and groups.

82
00:04:34,491 --> 00:04:36,991
We looked at controlling access to resources.

83
00:04:36,991 --> 00:04:40,991
We took a look at understanding the role and purpose of access keys.

84
00:04:40,991 --> 00:04:43,791
We then created some IAM policies,

85
00:04:43,791 --> 00:04:47,991
we looked at the aspect of delegation and federation.

86
00:04:47,991 --> 00:04:52,991
And then we ended off with some best practices when planning access control.

87
00:04:52,991 --> 00:04:56,991
So thanks for hanging in, I know it's a long module, lots of information.

88
00:04:56,991 --> 00:04:58,991
Hopefully it's great benefit to you.

89
00:04:58,991 --> 00:05:08,000
Up next, securing core infrastructure. Hope you to see you in that module.

