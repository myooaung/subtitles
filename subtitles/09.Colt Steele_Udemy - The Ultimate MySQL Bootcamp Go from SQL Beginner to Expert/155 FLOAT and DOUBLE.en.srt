1
00:00:00,140 --> 00:00:06,450
OK so we discuss the decimal type and you've already seen type but we're focusing on the decimal type

2
00:00:06,960 --> 00:00:08,430
or we did focus on it.

3
00:00:08,460 --> 00:00:11,400
But like I said there's a bit of competition.

4
00:00:11,640 --> 00:00:16,950
So there are other types that we could use to represent similar data which is to say numbers that are

5
00:00:16,950 --> 00:00:19,260
not whole numbers.

6
00:00:19,310 --> 00:00:25,560
So there's also things like float and double.

7
00:00:25,870 --> 00:00:27,980
So we're going to talk about those in this video.

8
00:00:28,090 --> 00:00:33,560
The differences have to be upfront between all of them are quite technical.

9
00:00:33,610 --> 00:00:36,940
They have to do with how things are stored in memory.

10
00:00:37,180 --> 00:00:44,410
It would be difficult to explain without going all the way into how binary works and base 10 versus

11
00:00:44,410 --> 00:00:47,300
base 2 and how things are stored in memory.

12
00:00:47,350 --> 00:00:53,190
So I'm going to kind of skim over some of this because the honest answer is that it doesn't.

13
00:00:53,260 --> 00:00:56,230
Or the truth is that it doesn't really matter.

14
00:00:56,230 --> 00:00:58,830
All that matters is that you know functionally the differences.

15
00:00:58,840 --> 00:01:03,660
But if you do want to learn more about the difference between them there are some good resources online

16
00:01:03,670 --> 00:01:08,380
and highly recommend that you check out some YouTube videos and I would love to link you to a specific

17
00:01:08,380 --> 00:01:09,200
one.

18
00:01:09,280 --> 00:01:11,080
I've had some copyright claim issues.

19
00:01:11,110 --> 00:01:13,210
So last time I did that I'm not going to do it.

20
00:01:13,210 --> 00:01:15,730
Now if you're curious you can research it.

21
00:01:15,820 --> 00:01:19,000
But essentially like I said it boils down to how they're stored.

22
00:01:19,000 --> 00:01:26,880
So the big question is what is the difference between float and double is take them as a unit and decimal.

23
00:01:27,100 --> 00:01:33,290
If we go to the documentation there's a page that lays it out relatively plainly.

24
00:01:33,390 --> 00:01:38,840
It says the Decimal data type is a fixed point type and calculations are exact.

25
00:01:39,100 --> 00:01:45,090
The float and double data types are floating point types and calculations are approximate.

26
00:01:45,360 --> 00:01:49,420
So if get fixed point and floating point they are different.

27
00:01:49,590 --> 00:01:54,350
That has to do with what I was describing how they're stored and memory is different.

28
00:01:55,290 --> 00:01:58,640
That's not as important just knowing that they are different is important.

29
00:01:58,680 --> 00:02:05,610
However the side effect of how they're stored is that float and doubles are approximate which seems

30
00:02:05,610 --> 00:02:07,270
kind of weird.

31
00:02:07,500 --> 00:02:14,610
It doesn't seem like you would ever want to use them if they are not exact but essentially they're approximate

32
00:02:15,390 --> 00:02:25,180
and decimals are exact sort of boil it down float and double will store larger numbers using less space

33
00:02:25,190 --> 00:02:26,790
so that's an advantage.

34
00:02:27,030 --> 00:02:33,600
They can take gigantic numbers things that you can't store in a decimal and they'll use less space.

35
00:02:33,870 --> 00:02:35,530
However that comes at a big cost.

36
00:02:35,530 --> 00:02:40,010
It's a big but it comes to the cost of precision.

37
00:02:40,540 --> 00:02:43,890
So it doesn't mean that your numbers will be wildly inaccurate.

38
00:02:43,930 --> 00:02:49,710
If you're using a float or double but it does mean that they're not going to be as accurate as a decimal

39
00:02:51,450 --> 00:02:59,100
So here's a simple table that it just basically takes information from the documentation floats will

40
00:02:59,160 --> 00:03:00,750
have precision issues.

41
00:03:00,750 --> 00:03:03,430
After around 7 pages.

42
00:03:03,780 --> 00:03:05,490
So if we had something like

43
00:03:08,770 --> 00:03:14,980
this number here we could run into a problem where this one might not reliably be one when you retrieve

44
00:03:14,980 --> 00:03:17,110
it it might change.

45
00:03:17,380 --> 00:03:21,780
And that could be problematic if you need it to be precise.

46
00:03:22,030 --> 00:03:27,640
But if you're working with gigantic numbers something like this or it's even I didn't something like

47
00:03:27,640 --> 00:03:29,680
this.

48
00:03:29,680 --> 00:03:33,210
This one at the very end isn't going to be a deal breaker.

49
00:03:33,220 --> 00:03:36,700
Most of the time depending on what you're working with.

50
00:03:36,700 --> 00:03:41,800
With that said it's really important to know that there is a difference and there's a lot of kind of

51
00:03:42,130 --> 00:03:48,540
classic bugs and issues people have run into lots of blog posts around floating point math problems

52
00:03:49,180 --> 00:03:52,630
floating point math issues and bugs.

53
00:03:52,630 --> 00:03:55,410
Doubles are basically the same thing as a float.

54
00:03:55,540 --> 00:03:56,560
They're just bigger.

55
00:03:56,560 --> 00:04:01,400
They have larger capacity however they take up more space and memory.

56
00:04:02,080 --> 00:04:04,530
You can see four bytes versus eight bytes.

57
00:04:04,990 --> 00:04:07,450
A double however is more precise.

58
00:04:08,270 --> 00:04:12,720
So it's precise to roughly 15 digits rather than just 7.

59
00:04:13,280 --> 00:04:17,150
So if you do use one of these it's better to use doubles.

60
00:04:17,570 --> 00:04:24,080
Which brings us to the question what numeric data types should you use when you're storing information

61
00:04:24,080 --> 00:04:25,550
that has a decimal.

62
00:04:25,580 --> 00:04:31,430
And the answer at least in my opinion is you should always try and use decimal unless you know that

63
00:04:31,430 --> 00:04:32,660
precision doesn't matter.

64
00:04:32,870 --> 00:04:36,840
So if you're doing things like financial data prices.

65
00:04:36,920 --> 00:04:40,310
If you're a bank you need that precision Absolutely.

66
00:04:40,370 --> 00:04:45,580
You need to use decimal Otherwise you can get away by with floats or doubles.

67
00:04:45,710 --> 00:04:48,200
But for the most part I'll be using decimal.

68
00:04:48,250 --> 00:04:52,830
It's kind of my preferred data type when we're working with decimals.

69
00:04:52,840 --> 00:04:58,590
Oh and before I forget Actually I already forgot but this is after I recorded the video.

70
00:04:58,730 --> 00:05:00,330
I'm going and adding this in.

71
00:05:00,380 --> 00:05:07,280
I wanted to show you that you can actually see the inconsistency that in preciseness of using floats

72
00:05:07,730 --> 00:05:09,510
and doubles as well.

73
00:05:09,530 --> 00:05:21,570
So I'm going to create a simple table and I will just call it let's go with things right now.

74
00:05:21,810 --> 00:05:30,150
Critical thing isn't all that it's going to have and there is a price which will go with it.

75
00:05:30,570 --> 00:05:31,480
OK.

76
00:05:31,800 --> 00:05:38,670
So then we'll do our insert into Thing is and we'll do what we need to do.

77
00:05:38,670 --> 00:05:42,350
Price values.

78
00:05:42,690 --> 00:05:44,250
And let's start with a simple one.

79
00:05:44,360 --> 00:05:48,660
Let's do eighty eight point four five.

80
00:05:49,230 --> 00:05:50,570
And if we select that out of there

81
00:05:54,910 --> 00:06:02,470
good we get eighty eight point four or five but we'll run into problems if we start making more complex

82
00:06:02,470 --> 00:06:03,490
longer numbers.

83
00:06:03,670 --> 00:06:12,080
So let's do something like 88 seventy seven point forty five and that should still work.

84
00:06:12,610 --> 00:06:15,260
If we select it out you can see it's unchanged.

85
00:06:15,430 --> 00:06:22,050
Remember we're working with four five six characters here and we go back to that table that I had says

86
00:06:22,070 --> 00:06:28,870
around seven issues we run into precision problems seven characters run into position problems.

87
00:06:28,870 --> 00:06:39,880
So if we do something a little longer now 8 8 7 7 6 6 5 5 4 4 and we hit enter.

88
00:06:39,880 --> 00:06:41,950
Notice how we got stored.

89
00:06:41,950 --> 00:06:48,340
So it doesn't just truncate it doesn't chop things off but it only stores the first seven digits.

90
00:06:48,940 --> 00:06:55,480
And then it just puts these empty tent places not 10 spaces but multiplied by 10 zeros essentially at

91
00:06:55,480 --> 00:06:56,250
the end.

92
00:06:56,740 --> 00:07:05,450
So we end up with this which is very different than this and if we instead had this as a double instead

93
00:07:05,450 --> 00:07:10,610
of a float we would have that precision extended out to 15 characters.

94
00:07:10,610 --> 00:07:15,820
So it is significant and it makes a big impact depending on what you're doing and what you need.

95
00:07:16,280 --> 00:07:22,490
So that's why I recommend using decimal where you can control exactly what you need and how long you

96
00:07:22,490 --> 00:07:23,480
need things to be.

97
00:07:23,480 --> 00:07:28,220
However if you're working with gigantic numbers and you don't need to be that precise you can use double

98
00:07:29,060 --> 00:07:29,550
or float.

99
00:07:29,630 --> 00:07:35,960
But typically My rule of thumb is if you need to use one used double rather than float because you have

100
00:07:36,620 --> 00:07:44,320
you know 15 characters 15 places of precision rather than 7 you get double precision.

101
00:07:44,570 --> 00:07:44,790
OK.
