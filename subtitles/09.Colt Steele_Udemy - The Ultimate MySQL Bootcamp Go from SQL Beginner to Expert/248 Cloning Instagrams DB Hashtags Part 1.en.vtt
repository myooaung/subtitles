WEBVTT
1
00:00:00.120 --> 00:00:06.510
And finally we've arrived at our last entity to store which is hash tags or tags and we save this one

2
00:00:06.510 --> 00:00:12.620
for last because as I mentioned in the intro video it's the hardest I guess.

3
00:00:12.750 --> 00:00:15.600
Well it doesn't have to be but there's a couple different solutions.

4
00:00:15.600 --> 00:00:20.540
We could go about and I wanted to have a discussion about which is best if there is one answer.

5
00:00:20.550 --> 00:00:24.960
So let's step through three potential structures that we could use.

6
00:00:25.140 --> 00:00:31.280
And remember the way that this works is that one photo can have you know 10 20 50 hash tags.

7
00:00:31.290 --> 00:00:33.680
I do think there is a limit on Instagram.

8
00:00:33.680 --> 00:00:41.140
I mean you can keep adding them as many as you want but only 38 believe actually will show up or it's

9
00:00:41.160 --> 00:00:46.520
not that they won't show up but it's that when you search for a hash tag your photo will not show up.

10
00:00:46.800 --> 00:00:48.150
If you use less than 30.

11
00:00:48.150 --> 00:00:54.330
Anyway as for getting off track here but the idea is you can add hash tags to a photo but then you can

12
00:00:54.330 --> 00:00:59.140
also you know go click on a hash tag and see all the associated photos with it.

13
00:00:59.370 --> 00:01:06.180
So here's one way we could structure it which might seem maybe the least obvious to you which would

14
00:01:06.180 --> 00:01:14.310
be to do it like this where we actually just have our photos table but we add a column called tags and

15
00:01:14.340 --> 00:01:21.560
it's a string Savarkar that just has our tags and we can separate them by the hash sign the Octa Thorpe

16
00:01:21.560 --> 00:01:25.730
or by spaces or dashes or something but we're just storing them together.

17
00:01:26.040 --> 00:01:28.790
And this could work in places to use this.

18
00:01:28.800 --> 00:01:34.140
I've seen it suggested at least I haven't seen it in practice but you can imagine how would work you

19
00:01:34.140 --> 00:01:39.570
need to add a new tag into something you'd basically just take all the other tags and then concatenate

20
00:01:39.570 --> 00:01:41.280
in at the end a new tack.

21
00:01:41.280 --> 00:01:47.070
Or at the beginning and then you could have an order to you know figure out which ones were posted first

22
00:01:47.070 --> 00:01:51.560
I guess based off of that order that they're in and it's pretty simple.

23
00:01:51.600 --> 00:01:57.800
You know if you want to find all photos that are tagged with cute you just basically have to use the

24
00:01:57.800 --> 00:02:04.770
like where tags like cute but then as you can see down here there are a couple problems.

25
00:02:04.770 --> 00:02:07.740
Let's start with an advantage which is that it's very easy to implement.

26
00:02:07.740 --> 00:02:11.630
You don't need any other tables but there are a couple of disadvantages.

27
00:02:11.850 --> 00:02:17.520
One is that there's a limit to how many tags you can have in there which is the length of you know whatever

28
00:02:17.520 --> 00:02:22.450
the column is of a bar char whatever the maximum length is you can only put so many in there.

29
00:02:23.430 --> 00:02:28.920
The other problem or any other problem actually is that you can't store additional information like

30
00:02:29.370 --> 00:02:32.610
you know if we want to store the first time a hash tag was used.

31
00:02:32.990 --> 00:02:39.960
If I want to be able to see the first person to use the hash tag whatever cat or something I'm not storing

32
00:02:39.960 --> 00:02:45.800
the time that something was tag because you know on Instagram you can add hash tags after the fact.

33
00:02:45.840 --> 00:02:51.290
Sure they're storing that when they're tagged so that they can track trend as hash tags come and go.

34
00:02:51.330 --> 00:02:54.180
So it doesn't allow us to store additional information like that.

35
00:02:54.450 --> 00:02:59.910
And then the other thing that's kind of important is that you have to be careful when you're searching

36
00:02:59.910 --> 00:03:00.590
for stuff.

37
00:03:00.750 --> 00:03:06.360
So if I was trying to find the hash tag food and wanted to see nice food beautiful foods with the hash

38
00:03:06.360 --> 00:03:14.400
tags just food well it will return this which has said food if I'm just doing like food so I'd have

39
00:03:14.400 --> 00:03:21.070
to be careful and I need to add spaces maybe to make it easier to separate things out.

40
00:03:21.090 --> 00:03:23.580
Basically you have to be careful in those ways around it.

41
00:03:23.580 --> 00:03:26.810
We've seen them before how you used search with like.

42
00:03:26.970 --> 00:03:32.490
But the point is this is an easy solution but it's not going to be the best and it's not the best for

43
00:03:32.490 --> 00:03:34.130
us right now.

44
00:03:34.140 --> 00:03:37.220
So another solution is to use two tables.

45
00:03:37.380 --> 00:03:40.810
So we have our photos as our photos table currently is now.

46
00:03:40.820 --> 00:03:45.360
So then we have a tag's table where we have our tag name.

47
00:03:45.360 --> 00:03:48.890
In this case cute and then a corresponding photo ID.

48
00:03:49.080 --> 00:03:54.230
So you know if this photo with idea of one is tag's cute we put it there.

49
00:03:54.690 --> 00:03:58.110
And then a photo with ID 3 which is this selfie here.

50
00:03:58.530 --> 00:04:04.860
It's also tagged cute and then photo-ID too is tagged with a microwave and three with ego through smile

51
00:04:04.900 --> 00:04:05.890
too with gross.

52
00:04:05.970 --> 00:04:12.480
So as you can see we can have a single photo with multiple tags like here where we have this selfie

53
00:04:12.810 --> 00:04:15.270
D-3 is tagged with the smile.

54
00:04:15.270 --> 00:04:21.560
Ego and cute and we can also have tags that are applied to multiple photos like cute.

55
00:04:21.580 --> 00:04:24.200
It's applied to the first photo and the third photo.

56
00:04:24.570 --> 00:04:26.590
So this works.

57
00:04:26.590 --> 00:04:28.380
There's unlimited number of tags.

58
00:04:28.470 --> 00:04:29.970
You know that's an advantage.

59
00:04:29.970 --> 00:04:35.880
We don't have to worry about how many can fit into the string but a disadvantage is that for one thing

60
00:04:35.970 --> 00:04:41.850
we are storing you know these tagged names over and over and over and these are strings and that it's

61
00:04:41.850 --> 00:04:46.970
maybe not ideal to store all these different strings and have duplicated data but it's not a big deal.

62
00:04:46.990 --> 00:04:48.600
Duplication isn't the problem.

63
00:04:48.600 --> 00:04:53.640
Really what it comes down to is that this is actually slower than the previous solution when it comes

64
00:04:53.640 --> 00:04:57.250
to things like inserting or updating or deleting.

65
00:04:57.420 --> 00:05:01.240
But then another problem is that it's actually slower than the previous solution.

66
00:05:01.380 --> 00:05:06.330
So in just a moment I can show you a comparison that I didn't do but there's a great article that I

67
00:05:06.330 --> 00:05:12.570
found where somebody does a speed test between these three solutions to figure out when they perform

68
00:05:12.570 --> 00:05:13.470
best.

69
00:05:13.470 --> 00:05:22.110
So this is not one we're going to use either but solution 3 is which maybe you've got it involves three

70
00:05:22.110 --> 00:05:23.090
tables.

71
00:05:23.220 --> 00:05:25.960
So we have our photos table unchanged.

72
00:05:26.280 --> 00:05:32.660
We have a different tag's table so this tax table is just a tag name and an ID.

73
00:05:33.300 --> 00:05:40.230
And then we have a middle table a join table called Photo tags or tag photos or tagging or something.

74
00:05:40.230 --> 00:05:45.000
Whatever you want to call it which is an instance of a hash tag being applied to a photo and all that

75
00:05:45.000 --> 00:05:50.430
it is a photo ID and tag ID and that's it.

76
00:05:50.430 --> 00:05:59.040
So in this case you know photo I.D. one is my cat is being tagged with cute and then the same photo

77
00:05:59.040 --> 00:06:01.560
My cat is being tagged with pet.

78
00:06:01.770 --> 00:06:03.810
And then we have you know we can keep going.

79
00:06:03.900 --> 00:06:10.230
My meal is being tagged with microwave and my meal is being tagged with gross and so on.

80
00:06:10.230 --> 00:06:12.330
So we have these two columns.

81
00:06:12.340 --> 00:06:13.940
That's pretty much it.

82
00:06:14.010 --> 00:06:19.410
The advantage again just like the previous one there's an unlimited number of tags and we can also add

83
00:06:19.440 --> 00:06:20.400
additional information.

84
00:06:20.400 --> 00:06:26.670
So if I wanted to you know when a tag is created the first time over here I could store the first time

85
00:06:26.670 --> 00:06:33.840
it was created and then over here every time it subsequently used I could store the time it was used

86
00:06:33.840 --> 00:06:34.730
or something.

87
00:06:35.070 --> 00:06:41.170
And so I'm sure there's some interesting data you could garner from that or the location of where you

88
00:06:41.170 --> 00:06:45.930
know where in the world it was used or something like that at the time of the day.

89
00:06:45.930 --> 00:06:47.860
I don't know what day of the week whatever.

90
00:06:47.880 --> 00:06:50.830
And we also have less duplication of the tags over here.

91
00:06:51.240 --> 00:06:53.150
But then there are a couple of problems.

92
00:06:53.400 --> 00:06:56.100
And they really come down to just more work.

93
00:06:56.100 --> 00:07:01.500
So when we're inserting something if it's a first time it has been used and it's not in the database

94
00:07:01.500 --> 00:07:07.830
yet we have to create it and then we have to associate it with a photo using photo tags.

95
00:07:07.830 --> 00:07:10.230
And the same thing when updating we have to

96
00:07:12.950 --> 00:07:16.760
what she just vomited anyway.

97
00:07:17.040 --> 00:07:19.080
And then we also have to worry about orphans.

98
00:07:19.080 --> 00:07:24.690
We should always all be worried about orphans but in particular when we're talking about these tables

99
00:07:25.020 --> 00:07:30.740
when we're deleting something right if we delete a tag for some reason which Instagram does you know

100
00:07:30.750 --> 00:07:37.710
if there's a problem something is being misused her somehow being you know I don't know controversial.

101
00:07:37.950 --> 00:07:39.200
They can be removed.

102
00:07:39.390 --> 00:07:43.440
And so then we just have to make sure when we're removing it from here we also need to remove it from

103
00:07:43.770 --> 00:07:47.730
all associated photo tags so it can be a bit more complicated.

104
00:07:47.850 --> 00:07:54.900
But basically it comes down to this the cost of having this nicer structure is that it's just a little

105
00:07:54.900 --> 00:08:01.890
more work and just as an end note here I did mention earlier that there is this great article online.

106
00:08:02.050 --> 00:08:09.660
This guy who does speed test of different ways of doing tagging and it's written up include the link

107
00:08:10.680 --> 00:08:12.330
along with this video if you want to read it.

108
00:08:12.480 --> 00:08:14.270
I'll just spend 10 seconds talking about it.

109
00:08:14.280 --> 00:08:22.110
But basically he does some tests here to show that depending on the size of your data set this example

110
00:08:22.110 --> 00:08:23.640
with a smaller data set.

111
00:08:23.730 --> 00:08:28.950
The second and third approaches I showed you with multiple tables are actually faster but then we get

112
00:08:29.010 --> 00:08:33.840
a larger dataset with thousands of tags it actually changes.

113
00:08:33.840 --> 00:08:35.950
So it's just interesting to note that and to read.

114
00:08:36.150 --> 00:08:41.370
But also he talks about that you know how much time it takes to insert compared to you know compare

115
00:08:41.370 --> 00:08:43.720
to cross the three different versions.

116
00:08:43.740 --> 00:08:49.020
And it's just an interesting article but if you actually look at his conclusion section which is probably

117
00:08:49.020 --> 00:08:56.930
what most of you care about where said is that he actually thinks that it would be best to have if you're

118
00:08:56.930 --> 00:08:59.560
working on a huge app to have two versions.

119
00:08:59.900 --> 00:09:02.210
The first version I sure do.

120
00:09:02.240 --> 00:09:04.270
And the third version I showed you.

121
00:09:04.340 --> 00:09:10.670
And basically they are performed best in different situations and this is getting into the woods a little

122
00:09:10.670 --> 00:09:10.890
bit.

123
00:09:10.910 --> 00:09:16.640
But basically the version that we're going to go with the third one with three different tables is faster

124
00:09:16.640 --> 00:09:23.390
if you're working with common tags things that you know are used often but if you're searching or you're

125
00:09:23.390 --> 00:09:30.320
trying to do joints with rare rare is the wrong word but uncommon tanks it just aren't used very often

126
00:09:30.680 --> 00:09:35.630
then it's actually slower and it would be faster to do the first version I showed you where you store

127
00:09:35.630 --> 00:09:37.320
them as text.

128
00:09:37.400 --> 00:09:44.240
So this guy is suggesting to use a combination of the two which we're not going to get into but just

129
00:09:44.300 --> 00:09:50.480
interesting to know that there isn't one best way and that it really comes down to your needs and what

130
00:09:50.480 --> 00:09:53.390
your app needs the product needs dictate.

131
00:09:53.480 --> 00:10:00.530
And in all likelihood as an athlete Instagram grows especially when it started out to where it is now

132
00:10:01.070 --> 00:10:07.640
its schema its database has undergone multiple big overhauls and changes probably not just the schema

133
00:10:07.640 --> 00:10:09.940
itself but the database.

134
00:10:10.280 --> 00:10:16.040
Whether its going from something like my ask you all to another type of database or a bigger change

135
00:10:16.040 --> 00:10:21.130
going from a relational database like my ice cube to a non-relational database.

136
00:10:21.200 --> 00:10:26.220
So its really hard to say you know what's best but it's interesting to take a look at somebody who's

137
00:10:26.240 --> 00:10:31.970
actually crunched the numbers and even after doing that can't necessarily give you know a definitive

138
00:10:31.970 --> 00:10:34.280
answer because the answer is it depends.
