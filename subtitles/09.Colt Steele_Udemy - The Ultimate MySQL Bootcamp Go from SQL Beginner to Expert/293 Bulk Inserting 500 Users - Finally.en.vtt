WEBVTT
1
00:00:00.120 --> 00:00:00.560
All right.

2
00:00:00.600 --> 00:00:05.970
So we're finally at the end of the section where we're actually going to insert 500 users at once.

3
00:00:06.330 --> 00:00:11.970
And you'd think that'd be easy because we already saw how to insert a single user like this create a

4
00:00:11.970 --> 00:00:18.960
single object passed in email and created that and we just passed in that single one but then we have

5
00:00:18.960 --> 00:00:19.680
to worry about.

6
00:00:19.730 --> 00:00:25.980
OK well for trying to do 500 technically what we could do is repeat this entire process five hundred

7
00:00:25.980 --> 00:00:26.510
times.

8
00:00:26.550 --> 00:00:31.620
But there's a better way than that because if you think about this every time we're running a query

9
00:00:31.620 --> 00:00:34.040
here that's 500 separate queries.

10
00:00:34.170 --> 00:00:40.920
Inserting one at a time individually which is not ideal what would be much better is to generate all

11
00:00:40.920 --> 00:00:48.230
500 users at once and then do a bulk insert you know insert them all together like you know like this.

12
00:00:48.300 --> 00:00:54.900
Here we inserted two not five hundred but this is two people being inserted we're passing in a list.

13
00:00:54.900 --> 00:01:00.870
Now this is MY as well though now the way we do that node using this library is a bit different.

14
00:01:01.260 --> 00:01:02.460
So I'm going to show you.

15
00:01:02.490 --> 00:01:07.710
I dug through the documentation and found out how to do a bulk insert rather than passing in a single

16
00:01:07.710 --> 00:01:08.840
object like this.

17
00:01:08.970 --> 00:01:16.070
But it's actually expecting an array of arrays so something like this here.

18
00:01:16.280 --> 00:01:19.900
So I'll show you a better example would actually do it together.

19
00:01:20.120 --> 00:01:22.080
But rather than giving it an object.

20
00:01:22.160 --> 00:01:26.670
Here is an array called data inside of it three separate erase.

21
00:01:26.810 --> 00:01:28.430
The first thing is an e-mail.

22
00:01:28.430 --> 00:01:31.150
The second thing is created at.

23
00:01:31.400 --> 00:01:38.390
Then the queery that we're doing is now insert into users and we actually do have email Commack created

24
00:01:38.390 --> 00:01:44.840
at our traditional syntax followed by values and then this question mark will be replaced with whatever

25
00:01:44.840 --> 00:01:46.350
comes after it which is data.

26
00:01:46.490 --> 00:01:48.260
So then it will take this array here.

27
00:01:50.080 --> 00:01:55.210
And will stick it here and basically it will insert each one of these has its own row.

28
00:01:55.300 --> 00:01:56.460
So I will say this is e-mail.

29
00:01:56.470 --> 00:01:59.960
This is created an insert that here's email created at insert that.

30
00:01:59.980 --> 00:02:03.040
So this is the javascript way of bridging that gap.

31
00:02:03.070 --> 00:02:07.780
This is how it's done with this library and this is why it gets wonky and weird when you're working

32
00:02:07.780 --> 00:02:12.150
with other libraries and other languages where they don't you know the syntax is different.

33
00:02:12.160 --> 00:02:15.450
They don't support the exact same way that you would work with my Esky well.

34
00:02:15.580 --> 00:02:20.950
So it's kind of weird but once you do it and you have it done you can just refer back to the code you

35
00:02:20.950 --> 00:02:22.390
previously written.

36
00:02:22.690 --> 00:02:24.800
So let's test that it works first.

37
00:02:25.150 --> 00:02:25.440
OK.

38
00:02:25.450 --> 00:02:31.580
So we had inserting data take to comments that out and move down to the bottom.

39
00:02:31.630 --> 00:02:38.880
Inserting lots of data just make this a little easier to see the division.

40
00:02:39.370 --> 00:02:40.160
OK.

41
00:02:40.750 --> 00:02:44.300
So rather than just well we can leave it as Blyde email I guess.

42
00:02:44.400 --> 00:02:46.500
Ugh Hatchie mail and mad at gmail.

43
00:02:46.540 --> 00:02:51.610
So we have this array of her race only three but the difference between three and five hundred is basically

44
00:02:51.610 --> 00:02:52.360
nothing.

45
00:02:52.390 --> 00:02:57.170
It's the difference between doing one and two that we're trying to get around right now.

46
00:02:57.400 --> 00:03:05.140
We saw how to do one so this should be easy once we get three so we save this here and let's just make

47
00:03:05.140 --> 00:03:06.650
sure that it works.

48
00:03:06.670 --> 00:03:13.300
Also add my connection and involved make sure everything else has come out except the connection part

49
00:03:14.200 --> 00:03:19.730
and we'll run it from our app over here.

50
00:03:20.030 --> 00:03:22.110
OK it looks like three affected rows.

51
00:03:22.160 --> 00:03:23.280
That is good news.

52
00:03:23.280 --> 00:03:24.940
That means that they were inserted.

53
00:03:25.020 --> 00:03:31.420
If we go over here and do select star we can see meth is in there and blah.

54
00:03:32.000 --> 00:03:33.310
And where are you.

55
00:03:33.310 --> 00:03:35.280
Ugh is at the bottom here too.

56
00:03:35.360 --> 00:03:39.310
So this worked this successfully entered or inserted three.

57
00:03:39.350 --> 00:03:40.470
The syntax is weird.

58
00:03:40.580 --> 00:03:41.460
I totally agree.

59
00:03:41.480 --> 00:03:42.380
It's different.

60
00:03:42.380 --> 00:03:43.460
I totally get that.

61
00:03:43.490 --> 00:03:46.970
Especially if you're new to javascript this must all be overwhelming.

62
00:03:46.970 --> 00:03:50.070
Don't worry we're going to get through it we're going to make the app.

63
00:03:50.180 --> 00:03:53.110
But what I want to show is that again it's different.

64
00:03:53.120 --> 00:03:58.230
You have to be prepared to kind of play within the rules of whatever language you're working in.

65
00:03:58.680 --> 00:03:58.960
OK.

66
00:03:59.000 --> 00:03:59.800
So we've got this.

67
00:03:59.810 --> 00:04:07.480
But rather than these three what we really want to do is generate an array with 500 entries and each

68
00:04:07.480 --> 00:04:11.040
one is going to have fake or e-mail and a fake or date.

69
00:04:11.490 --> 00:04:19.240
So to start I'm actually going to make data empty just like that and all we would need to do is to add

70
00:04:19.240 --> 00:04:26.870
in our first fake array would be data up push and push would just add to the end of this array.

71
00:04:26.910 --> 00:04:29.180
It add inside of it whatever we tell it to.

72
00:04:29.230 --> 00:04:31.450
So we want a new array.

73
00:04:31.750 --> 00:04:33.400
I'll make some space here.

74
00:04:36.090 --> 00:04:37.740
And all we want to do is push in two things.

75
00:04:37.740 --> 00:04:42.980
The first is faker dot Internet email.

76
00:04:43.560 --> 00:04:48.780
And the second thing is faker that date dot past.

77
00:04:49.560 --> 00:04:58.320
So this will generate if we just do a single one ups and do a concert adult log data and don't do our

78
00:04:58.320 --> 00:04:59.190
query here.

79
00:05:00.360 --> 00:05:08.270
Comment that we run it wrong terminal we run it you can see right it did it.

80
00:05:08.310 --> 00:05:10.930
We've got our first result in there.

81
00:05:11.100 --> 00:05:18.450
So then logically if we just repeated this and did another push and another push and I rerun it now

82
00:05:18.450 --> 00:05:19.710
we end up with three.

83
00:05:19.950 --> 00:05:24.960
So we just need to do that five hundred times and we're not going to copy and paste 500 times.

84
00:05:25.140 --> 00:05:28.640
We're going to use a loop and it's just going to be a simple for loop.

85
00:05:28.650 --> 00:05:31.310
So for our eye it's equal to zero.

86
00:05:31.390 --> 00:05:35.390
While it's less than 500 add 1 to eyes.

87
00:05:35.410 --> 00:05:40.160
We saw one of these earlier if you're not familiar with javascript these are the bread and butter.

88
00:05:40.200 --> 00:05:41.480
It's a way of repeating code.

89
00:05:41.550 --> 00:05:45.340
So this basically says repeat whatever's inside of here 500 times.

90
00:05:45.570 --> 00:05:52.110
So we're just passed that in and this will now run 500 times each time.

91
00:05:52.110 --> 00:05:54.560
It's going to generate a new e-mail and a new date.

92
00:05:54.600 --> 00:06:00.180
It's going to push them into the data array so we end up with one giant data array so we can print that

93
00:06:00.180 --> 00:06:00.740
out.

94
00:06:01.020 --> 00:06:02.210
Let's see what happens.

95
00:06:03.950 --> 00:06:06.030
And you can see scroll through here.

96
00:06:06.170 --> 00:06:07.970
You'll have to trust that it's 500.

97
00:06:08.000 --> 00:06:11.560
We've got tons of results here tons and tons of them.

98
00:06:12.760 --> 00:06:13.350
Awesome.

99
00:06:14.230 --> 00:06:14.950
OK.

100
00:06:15.290 --> 00:06:22.280
So now all we need to do is uncomment this section when it comes to our constant log.

101
00:06:22.520 --> 00:06:28.130
But uncomment the part where we're actually taking that data which is our giant array full of fake data

102
00:06:28.850 --> 00:06:30.090
and we're inserting it.

103
00:06:31.010 --> 00:06:31.910
And nothing needs to change.

104
00:06:31.910 --> 00:06:34.140
We have e-mail first followed by created.

105
00:06:34.250 --> 00:06:34.660
Right.

106
00:06:34.790 --> 00:06:38.560
If you look at our last one e-mail created OK.

107
00:06:38.630 --> 00:06:39.860
Moment of Truth here.

108
00:06:40.340 --> 00:06:43.540
Let's try it save the file

109
00:06:46.340 --> 00:06:48.320
it looks like 500 effect grows.

110
00:06:48.320 --> 00:06:49.750
Look at how fast that was.

111
00:06:49.760 --> 00:06:52.370
Look at how short our code to do it was.

112
00:06:52.550 --> 00:06:56.040
If you ignore all the whitespace it's just this part.

113
00:06:56.050 --> 00:06:57.140
Now let's head over here.

114
00:06:57.220 --> 00:06:57.990
Let's do.

115
00:06:58.090 --> 00:07:00.700
Well let's start right selecting star.

116
00:07:00.700 --> 00:07:02.000
Awesome.

117
00:07:02.080 --> 00:07:08.320
Look at all of them there and I'm actually going to drop everything because we have some bad users in

118
00:07:08.320 --> 00:07:08.940
there.

119
00:07:09.170 --> 00:07:12.760
You know time created set to 000.

120
00:07:12.760 --> 00:07:20.950
So we're going to just do delete from users 518 of them gone.

121
00:07:20.950 --> 00:07:27.440
Now we do like Star nothing but don't worry I'm just going to rerun our code one more time.

122
00:07:28.440 --> 00:07:33.430
And so easy so fast we now have 500 users in there.

123
00:07:33.900 --> 00:07:34.440
Awesome.

124
00:07:34.590 --> 00:07:34.970
OK.

125
00:07:35.010 --> 00:07:36.530
So we'll end it here.

126
00:07:36.540 --> 00:07:39.830
I recommend that you delete everything and just remake it with five hundred.

127
00:07:39.830 --> 00:07:40.850
Exactly.

128
00:07:40.860 --> 00:07:43.130
We have a couple of exercises using these.

129
00:07:43.140 --> 00:07:44.530
Of course your data will vary.

130
00:07:44.550 --> 00:07:49.290
Right you're going have different e-mails different dates but it won't matter for the exercises.

131
00:07:49.320 --> 00:07:55.020
And once we get past those exercises we'll move on to working with this data in the context of a web

132
00:07:55.020 --> 00:07:56.130
application.

133
00:07:56.130 --> 00:07:58.040
So we saw a lot in this section.

134
00:07:58.200 --> 00:08:02.240
It's very disparate fast pace I'm aware.

135
00:08:02.370 --> 00:08:05.020
If you don't know javascript I can imagine it's quite intimidating.

136
00:08:05.100 --> 00:08:10.040
But hopefully the takeaway is not that your javascript genius that you could recreate this on your own

137
00:08:10.380 --> 00:08:17.950
but more that you see that we're able to use javascript to insert or select from a minuscule database.

138
00:08:18.060 --> 00:08:23.550
And that we can do things that we can do on our own like insert a single user but we can also do really

139
00:08:23.550 --> 00:08:29.160
powerful things that we couldn't do on our own or it would take forever like inserting 500 users that

140
00:08:29.160 --> 00:08:32.670
are randomly generated with just a couple lines of code.

141
00:08:32.700 --> 00:08:37.590
So this is really our first thing that we've seen that takes advantage of the power you get from using

142
00:08:37.590 --> 00:08:39.600
a language like javascript.

143
00:08:39.600 --> 00:08:39.970
Awesome.
