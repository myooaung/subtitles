WEBVTT
1
00:00:00.230 --> 00:00:07.140
OK so in the last video we saw our first join our first example which is actually something known as

2
00:00:07.140 --> 00:00:14.010
an implicit join which you'll see for a moment where it's called implicit and it's also in particular

3
00:00:14.310 --> 00:00:17.890
it is a CROSS JOIN useless basically.

4
00:00:18.030 --> 00:00:24.020
So it just think of it as multiplying our data across multiplying it takes every possible combination.

5
00:00:24.060 --> 00:00:26.880
So we have Boy George Well I don't need to go over that again.

6
00:00:26.910 --> 00:00:28.450
Bore bored to death.

7
00:00:28.470 --> 00:00:32.310
So now we want to focus on whittling it down to what's actually relevant.

8
00:00:32.310 --> 00:00:38.610
I want to see the name of the name first name my surname and email of every user who actually placed

9
00:00:38.610 --> 00:00:45.860
an order next to that order not just every arbitrary order I want the ones they placed.

10
00:00:46.060 --> 00:00:49.950
And so we're getting sort of close if we have all of it next to each other.

11
00:00:49.950 --> 00:00:58.530
Now we just want to only select the rows where what what condition is true where our user ID is equal

12
00:00:58.530 --> 00:00:59.320
to the order.

13
00:00:59.340 --> 00:01:00.760
Customer ID.

14
00:01:01.080 --> 00:01:06.320
So it's just like any other kind of select we've done where we just can add in a where.

15
00:01:06.360 --> 00:01:17.790
So it will be a select star from customers comma borders where and where what is true where ID from

16
00:01:17.790 --> 00:01:20.650
the customer is equal to customer ID.

17
00:01:20.910 --> 00:01:26.200
So we could do this where a customer equals customer underscore ID.

18
00:01:26.550 --> 00:01:29.300
But there's a problem and maybe you've identified it.

19
00:01:29.400 --> 00:01:35.860
We have two IDs remember we're just taking the customers table in the Orders table and putting them

20
00:01:35.860 --> 00:01:36.530
together.

21
00:01:36.580 --> 00:01:41.260
So we have I.T. from customers and ID from orders.

22
00:01:41.390 --> 00:01:43.290
So what does this refer to.

23
00:01:44.570 --> 00:01:45.420
That's a problem.

24
00:01:45.590 --> 00:01:47.120
Fortunately there's a workaround.

25
00:01:47.120 --> 00:01:48.950
It's very very simple.

26
00:01:48.950 --> 00:01:52.210
All we have to do is prepared the name at the tables.

27
00:01:52.460 --> 00:01:57.330
So this should be our customers idea right.

28
00:01:59.300 --> 00:02:01.060
It's coming from here.

29
00:02:01.230 --> 00:02:08.460
And just to make that clear what's happening we're saying where the customers table Id So where this

30
00:02:09.090 --> 00:02:11.310
is equal to customer ID.

31
00:02:11.580 --> 00:02:17.850
Now customer underscore ID and I realize there's a lot of saying customer and Id over and over but these

32
00:02:17.850 --> 00:02:18.880
are different.

33
00:02:18.960 --> 00:02:19.360
Right.

34
00:02:19.380 --> 00:02:25.050
This is the customers table ID that's referring to this customers dot.

35
00:02:25.080 --> 00:02:34.110
That dot means in the Customers table and this is customer underscore ID which is referring to this

36
00:02:34.110 --> 00:02:35.460
right here.

37
00:02:35.670 --> 00:02:43.210
So we dont have to say orders dot customer ID but its a good convention to follow to do that just to

38
00:02:43.230 --> 00:02:49.500
whenever you're working with two or more tables to be explicit about which table were which row.

39
00:02:49.520 --> 00:02:52.470
Richard excuse me which column belongs to which table.

40
00:02:53.320 --> 00:02:53.840
OK.

41
00:02:54.150 --> 00:02:55.770
So we have this line.

42
00:02:56.410 --> 00:02:57.820
Let's copy it over.

43
00:02:57.930 --> 00:03:06.390
So what this will do is select it's going to do this cross join but only where the customer's ID customer

44
00:03:06.390 --> 00:03:10.570
table ID is equal to the customer ID of the order.

45
00:03:10.780 --> 00:03:15.280
So now if we do this take a look at what we get.

46
00:03:15.430 --> 00:03:16.720
We have five orders.

47
00:03:16.780 --> 00:03:24.630
So we get these five different rows and we have a corresponding customer who placed it.

48
00:03:24.730 --> 00:03:28.140
So Boy George placed this order for $99.

49
00:03:28.210 --> 00:03:30.460
Boy George placed another order for $35.

50
00:03:30.460 --> 00:03:36.740
George Michael placed these two orders and Bette Davis placed this one order for $450.

51
00:03:37.240 --> 00:03:44.260
So you can see we have customer id over here and its matching the customer's ID and of course we could

52
00:03:44.260 --> 00:03:53.170
condense this a bit to maybe we dont want to start maybe we want first name and last name and then order

53
00:03:53.170 --> 00:03:56.560
date and amount and that's it.

54
00:03:56.560 --> 00:03:58.180
Just like that.

55
00:03:58.210 --> 00:04:06.630
So let's try it and now we get a more condensed table that has had information Boy George or George

56
00:04:07.290 --> 00:04:12.870
tourers George Michael one order George Michael another order Bette Davis another order.

57
00:04:13.320 --> 00:04:21.520
So what we've just done there we have joined them together using what's known as an implicit inner join.

58
00:04:21.630 --> 00:04:23.860
So I'll write that here.

59
00:04:27.090 --> 00:04:27.630
OK.

60
00:04:27.960 --> 00:04:29.820
And that's what we did appear as well.

61
00:04:29.830 --> 00:04:33.130
So this is just a more refined one.

62
00:04:33.160 --> 00:04:38.430
Kids we're not selecting star we're only citing a couple of things but we've joined them where they

63
00:04:38.430 --> 00:04:40.810
match if that makes sense.

64
00:04:41.130 --> 00:04:46.620
So I have a simple diagram it's very very ugly but a simple diagram to show you and I'm sorry it's so

65
00:04:46.620 --> 00:04:46.970
ugly.

66
00:04:46.980 --> 00:04:49.060
It was very difficult.

67
00:04:49.110 --> 00:04:51.430
It's filling in this shape.

68
00:04:51.450 --> 00:04:57.750
It's not a circle and the slides tool I used doesn't let you draw weird shapes you have to do circles.

69
00:04:57.750 --> 00:04:59.480
So I'm sorry I really am.

70
00:04:59.650 --> 00:05:05.280
But what's happening here is that we have two tables right customers and orders and what we did at first

71
00:05:05.910 --> 00:05:07.540
was select everything.

72
00:05:07.800 --> 00:05:09.670
Combine them and just take everything together.

73
00:05:09.810 --> 00:05:16.860
But all that we want to do with an inner join is take it inside where they overlap and that's what we

74
00:05:16.860 --> 00:05:17.530
did.

75
00:05:17.550 --> 00:05:27.110
We went from this monstrosity and we will down to where the customer's ID is equal to customer ID in

76
00:05:27.110 --> 00:05:30.490
the orders table and we get this right here.

77
00:05:31.700 --> 00:05:32.340
OK.

78
00:05:32.640 --> 00:05:34.380
Now I said this is implicit.

79
00:05:34.500 --> 00:05:37.970
And that's because there is an actual explicit syntax.

80
00:05:38.010 --> 00:05:40.040
There's a better way of doing this.

81
00:05:40.050 --> 00:05:44.550
And when I say better it really means that it is more conventional If you're not familiar with that

82
00:05:44.770 --> 00:05:51.220
it means it is they give it as like an unwritten rule that developers follow.

83
00:05:51.360 --> 00:05:57.490
They think it's cleaner it's more easily understood to do it this way which I'm about to show you.

84
00:05:57.600 --> 00:06:00.790
So I'm going to write that I do.

85
00:06:00.830 --> 00:06:01.570
Here you go.

86
00:06:01.620 --> 00:06:09.390
And when I write a comment explicit inner join and this will be the first time we see a new keyword

87
00:06:09.420 --> 00:06:11.000
called join.

88
00:06:11.550 --> 00:06:14.120
So we're going to do our same select star.

89
00:06:14.130 --> 00:06:18.230
We'll start with this one from customers.

90
00:06:18.480 --> 00:06:23.790
However we're not just going to do come orders we're going to start from customers and then we're going

91
00:06:23.790 --> 00:06:27.330
to add joyn orders.

92
00:06:27.420 --> 00:06:31.950
So we have some new syntax I'm just going to type it all first and then we're going to tell it where

93
00:06:32.440 --> 00:06:42.820
we're going to join on customers thought Id equals orders dot customer ID.

94
00:06:42.980 --> 00:06:44.140
OK.

95
00:06:44.190 --> 00:06:51.140
So if I copy this and I run this it does the exact same thing.

96
00:06:51.630 --> 00:06:56.490
And if we want to of course we could refine this more just like we did earlier so instead of selecting

97
00:06:56.490 --> 00:07:05.380
star let's do the same thing or we select first name last name order date and amount.

98
00:07:05.640 --> 00:07:06.350
OK.

99
00:07:06.750 --> 00:07:15.850
Copy this over and now we get this the same table in just to prove to you that it's the same.

100
00:07:15.930 --> 00:07:17.670
The ego can even see the difference when I.

101
00:07:17.690 --> 00:07:20.490
I just hit enter and it looks like the same thing is here.

102
00:07:20.890 --> 00:07:21.160
OK.

103
00:07:21.160 --> 00:07:23.440
So this is still an inner join.

104
00:07:23.800 --> 00:07:29.060
But this time it's explicit and it's really only explicit because we're writing the word join.

105
00:07:29.110 --> 00:07:36.030
So when we say join order so we say from customers join orders on this join condition.

106
00:07:36.190 --> 00:07:42.790
So take the left and the right to which customers and orders these two circles basically enjoying them

107
00:07:42.820 --> 00:07:50.580
create the Union table where customer ID is equal to orders customer ID.

108
00:07:50.680 --> 00:07:57.880
So where the ID from here matches the customer ID from here take that overlap and make this table for

109
00:07:57.880 --> 00:07:59.360
us.

110
00:07:59.530 --> 00:08:02.460
So I know it's a lot and I'm talking about here.

111
00:08:02.580 --> 00:08:07.280
Now the term inner join an explicit inner join implicit inner join.

112
00:08:07.280 --> 00:08:10.410
And we're going to next I'm talking about right joints left.

113
00:08:10.520 --> 00:08:12.140
It's can be overwhelming.

114
00:08:12.320 --> 00:08:20.360
So I want you to focus on is the key idea here that we are joining data together based off of a condition.

115
00:08:20.800 --> 00:08:21.380
Right.

116
00:08:21.400 --> 00:08:26.280
And we could join that off of some meaningless condition to just to show you.

117
00:08:26.280 --> 00:08:37.430
So if we go back to this this really ugly cross join where it takes everything and joins it together.

118
00:08:38.230 --> 00:08:45.880
So if I wanted to there's no meaning to be garnered from this but I could join it where the two ideas

119
00:08:45.940 --> 00:08:49.730
are the same or not customer ID but I can say where customers.

120
00:08:49.750 --> 00:08:51.860
Id is the same as orders that ID.

121
00:08:51.880 --> 00:08:54.280
So let me just show you that now.

122
00:08:55.300 --> 00:09:01.760
And I'll just comment this as arbitrary join.

123
00:09:02.470 --> 00:09:13.510
Don't do this but we could do this we could select star from customers join orders on not to say we're

124
00:09:13.510 --> 00:09:15.520
customers ID equals orders.

125
00:09:15.550 --> 00:09:20.270
Heidi there's nothing stopping me from doing this.

126
00:09:20.380 --> 00:09:27.540
And as you can see I just end up with this new table that has a matching IDs so we get.

127
00:09:27.820 --> 00:09:30.940
Let's take an example like George Michael.

128
00:09:30.940 --> 00:09:36.600
So George Michael is now matched he has an idea of two he's matched with the order of I.D. two.

129
00:09:36.700 --> 00:09:41.940
It doesn't matter that it was placed by customer with ID of one which is boy George.

130
00:09:42.010 --> 00:09:46.190
So I'm saying that we can just join things on arbitrary conditions.

131
00:09:46.240 --> 00:09:50.860
However you're typically what goes in here is you're filling in a foreign key.

132
00:09:50.860 --> 00:09:53.440
Matching is a primary key in another table.

133
00:09:53.500 --> 00:09:59.510
So primary key is a customer's I.D. a foreign key is the customer underscore I.D. in the Orders table

134
00:10:00.610 --> 00:10:05.660
and then the last thing that I'll wrap up with here is does the order matter.

135
00:10:06.160 --> 00:10:09.370
So if we go back to our cross join.

136
00:10:10.150 --> 00:10:16.420
What if I reverse order so I started with customers comp orders and so we get customers here and then

137
00:10:16.450 --> 00:10:18.850
orders tacked on on the right.

138
00:10:18.850 --> 00:10:30.520
So what if I switch it orders Khama customers and you can see well it looks very similar except it doesn't

139
00:10:30.520 --> 00:10:33.710
look similar we had the same data but it's been switched.

140
00:10:33.730 --> 00:10:40.300
So we start with every order first and then one customer tacked onto the end and then every order again

141
00:10:40.330 --> 00:10:41.670
and then the same customer.

142
00:10:41.890 --> 00:10:47.840
So the order does matter in a sense as to how your data is presented to you but it doesn't matter in

143
00:10:47.840 --> 00:10:54.430
the in the case of a cross join or in the case of an inner join it won't actually affect the result.

144
00:10:54.430 --> 00:10:57.250
It just affects what is printed out what it looks like.

145
00:10:57.250 --> 00:11:01.580
So let me show you if we take this same We've got a lot of them going on here.

146
00:11:01.600 --> 00:11:03.450
Let's take the same one here.

147
00:11:03.490 --> 00:11:10.390
This is kind of the most useful join we had right where we had the name and the order date and the amount.

148
00:11:10.390 --> 00:11:15.430
If I switch I'm just going to duplicate it so that we have the original Oswell.

149
00:11:15.580 --> 00:11:24.620
If I say from orders join customers on and we can leave this either way.

150
00:11:24.880 --> 00:11:25.960
But let's say do that.

151
00:11:25.960 --> 00:11:31.260
So I'm selecting from orders with joining customers onto it.

152
00:11:32.340 --> 00:11:33.640
And I hit enter.

153
00:11:33.640 --> 00:11:40.360
Nothing changes and that's because we are picking our data you know individually from a peer.

154
00:11:40.360 --> 00:11:41.890
Now if I just did a star

155
00:11:44.630 --> 00:11:49.450
it will look a little different because you can see we're actually getting order first so order ID order

156
00:11:49.450 --> 00:11:51.950
date amount and then customer.

157
00:11:52.170 --> 00:11:53.290
And if I switch that

158
00:11:57.160 --> 00:11:58.500
it would be the other way around.

159
00:11:58.610 --> 00:11:59.840
That doesn't really matter.

160
00:11:59.990 --> 00:12:08.160
It's just orders but you can see now we get customers and then orders.

161
00:12:08.160 --> 00:12:08.750
All right.

162
00:12:08.790 --> 00:12:16.290
So this has been long and a little difficult I imagine especially some of the syntax or keeping that

163
00:12:16.290 --> 00:12:17.600
jargon.

164
00:12:17.600 --> 00:12:23.700
What I do want to say is that basically when you're joining things don't do implicit joins which is

165
00:12:23.700 --> 00:12:24.690
what we have here.

166
00:12:24.930 --> 00:12:27.780
It's better to do it explicitly this way.

167
00:12:28.050 --> 00:12:34.920
So something like this or this where we have select something from a table join on another table on

168
00:12:35.090 --> 00:12:37.690
a condition OK.

169
00:12:37.730 --> 00:12:40.750
So that is kind of the bread and butter of joints doing an inner join.

170
00:12:40.760 --> 00:12:44.810
But I'm going to show you a couple of other examples that will be up next.
