WEBVTT
1
00:00:00.210 --> 00:00:04.320
OK so we're moving on now and it's time for brand new section.

2
00:00:04.320 --> 00:00:10.200
In this case we're spending some time revisiting something we've already discussed which is data types.

3
00:00:10.380 --> 00:00:16.530
So very early on one of the first videos once we got everything set up and installed one of the first

4
00:00:16.530 --> 00:00:19.220
videos was on very basic data types.

5
00:00:19.280 --> 00:00:25.750
We talked about how data takes different forms and you have text and numbers and I kind of laughed at

6
00:00:25.800 --> 00:00:26.610
that.

7
00:00:26.730 --> 00:00:32.780
We talked about our char and our two first data types but I showed you that there are a bunch more.

8
00:00:33.270 --> 00:00:39.060
Well now is it time that I promised feed revisit we'd returned to those data type and go into a bit

9
00:00:39.060 --> 00:00:44.880
more detail and depth around some of the important data types so we're still not going to go over every

10
00:00:44.880 --> 00:00:51.180
single one because a lot of them are just not used and some of them are very very similar with you know

11
00:00:51.210 --> 00:00:55.740
tiny differences that honestly won't make that aren't relevant to the score.

12
00:00:55.740 --> 00:01:00.030
So what we're going to do is focus on what will have the highest impact for you.

13
00:01:00.030 --> 00:01:04.770
What has the highest impact in you know my developer life and the people that I know enough to talk

14
00:01:04.770 --> 00:01:07.710
to and about how they use MY as well.

15
00:01:07.800 --> 00:01:12.990
So basically it boils down to a couple of different data types and a couple different broad categories

16
00:01:13.000 --> 00:01:18.880
so the first category is text or string data types.

17
00:01:19.190 --> 00:01:21.590
And then we also talk about numeric data types.

18
00:01:21.650 --> 00:01:24.560
We have a lot to talk about there because we've only worked with it.

19
00:01:24.680 --> 00:01:31.010
We need to talk about how we store decimal points or how we store you know non whole numbers came over

20
00:01:31.060 --> 00:01:32.560
the term for that.

21
00:01:32.870 --> 00:01:39.590
And also we need to talk about how we store things like dates and times really important part of using

22
00:01:39.800 --> 00:01:44.710
a database is typically at least in web applications or applications in general.

23
00:01:44.710 --> 00:01:49.520
You're usually storing some sort of date and time information about when a transaction happens when

24
00:01:49.520 --> 00:01:50.800
somebody signs up for your site.

25
00:01:50.810 --> 00:01:53.480
The last time something was updated and so on.

26
00:01:53.510 --> 00:01:55.000
So we'll be discussing that as well.

27
00:01:55.190 --> 00:01:59.290
But for now in this video we're focusing on storing text.

28
00:01:59.810 --> 00:02:03.900
So as you mentioned we've already seen var Charen of our car.

29
00:02:04.250 --> 00:02:12.470
However we want to say it I think most people actually say var car but how can I save our car doesn't

30
00:02:12.490 --> 00:02:15.820
really make sense I guess you say character not character.

31
00:02:15.950 --> 00:02:16.460
All right.

32
00:02:16.700 --> 00:02:18.320
So we've already talked about it.

33
00:02:18.320 --> 00:02:20.310
It's what we've been using to store text.

34
00:02:20.630 --> 00:02:28.170
But there's also Chaar our car which is an entirely different separate data type.

35
00:02:28.190 --> 00:02:32.220
Now they both store text but there's one really key difference.

36
00:02:33.390 --> 00:02:36.050
Well what is that difference.

37
00:02:36.480 --> 00:02:38.540
Char has a fixed length.

38
00:02:38.550 --> 00:02:45.030
So when we specify let's say we're working on let's say we're working with our books table and we want

39
00:02:45.030 --> 00:02:51.330
to have a column called Title we could have right now of our char and our existing books table but we

40
00:02:51.330 --> 00:02:58.590
could specify its char and give it a fixed length of 5 for title.

41
00:02:59.010 --> 00:03:05.220
And what that means is that every title that we add in is going to be five characters.

42
00:03:05.220 --> 00:03:09.340
So if it's greater than 5 characters if it's 10 characters it's going to be truncated is going to get

43
00:03:09.360 --> 00:03:15.250
chopped at that 5 character Mark and if it's fewer you'll see in a moment where it does actually add

44
00:03:15.250 --> 00:03:18.160
spaces to make it five characters.

45
00:03:18.420 --> 00:03:25.060
So char will always allocate the same amount of space for every row or every instance of that char versus

46
00:03:25.120 --> 00:03:26.620
var char can vary.

47
00:03:26.760 --> 00:03:32.940
And as you can see here if we did something like chars three only three characters are allowed in this

48
00:03:33.000 --> 00:03:34.320
example.

49
00:03:34.320 --> 00:03:36.710
So this is taken straight from the documentation.

50
00:03:36.720 --> 00:03:42.490
Some really boring explanatory text but has some important things to know the length of a char columnist's

51
00:03:42.510 --> 00:03:44.980
fixed to the length that you declared when you create the table.

52
00:03:45.030 --> 00:03:49.560
We've already discussed that the length can be any value from 0 to 255.

53
00:03:49.770 --> 00:03:58.020
So the longest char car whatever that you can have is 255 characters long when char values are stored.

54
00:03:58.020 --> 00:04:01.380
They are right padded with spaces to the specified length.

55
00:04:01.710 --> 00:04:03.880
So that's kind of what I was explaining.

56
00:04:03.900 --> 00:04:13.290
If we have a 10 character limit let's say char 10 and I say I insert something that has only five characters.

57
00:04:13.290 --> 00:04:15.410
It's going to add five spaces after it.

58
00:04:15.420 --> 00:04:22.430
On the right side of it pad it with these based spaces to make it exactly 10 characters.

59
00:04:23.520 --> 00:04:29.160
However it's kind of confusing because when you go to look at that string when you select it back in

60
00:04:29.170 --> 00:04:30.040
it's are treated.

61
00:04:30.210 --> 00:04:32.650
Those spaces are actually removed as you can see here.

62
00:04:32.760 --> 00:04:37.180
When char values are retrieved trailing spaces are removed in less blah blah blah.

63
00:04:37.200 --> 00:04:42.890
There is a way to get them to stay there but I'm not sure why you'd want that to happen.

64
00:04:42.900 --> 00:04:48.300
The only reason that I want to point that out is that I think it helps understand helps you understand

65
00:04:48.750 --> 00:04:50.140
or has helped other students.

66
00:04:50.140 --> 00:04:53.400
I've worked with understand how the fixed length works.

67
00:04:53.910 --> 00:04:59.340
If you think in memory that it's actually storing something the same size every time is always five

68
00:04:59.340 --> 00:05:02.840
or always 10 characters and you can't get around it.

69
00:05:02.850 --> 00:05:08.420
So if you give it something shorter it will along get it with spaces to make it 10 characters.

70
00:05:08.420 --> 00:05:10.280
Figure out something longer than 10 characters.

71
00:05:10.380 --> 00:05:13.160
It's going to truncate it to make it 10 characters.

72
00:05:13.200 --> 00:05:14.820
So why does it matter.

73
00:05:15.390 --> 00:05:22.470
Well char is faster for fixed length text so there's not a ton of uses.

74
00:05:22.470 --> 00:05:29.500
In my experience day to day for using char unless you know for sure that something is fixed length.

75
00:05:29.700 --> 00:05:35.730
So I tried to come up with some examples like state abbreviations is one at least in the US where we

76
00:05:35.730 --> 00:05:38.680
have two letter abbreviations for every state.

77
00:05:38.820 --> 00:05:41.680
There's no reason to make that a variable length of our char.

78
00:05:41.750 --> 00:05:50.570
You can save space and time essentially by using a chart or a yes or no flag wire and or any sort of

79
00:05:50.570 --> 00:05:51.680
a binary.

80
00:05:51.700 --> 00:05:55.540
It doesn't even have to be binary but something that has a fixed length.

81
00:05:55.550 --> 00:06:03.410
So you could do sex in this case if you're doing you know where a pounder would be called an animal

82
00:06:03.410 --> 00:06:08.730
shelter for keeping track of animals and their sex could use an F.

83
00:06:08.810 --> 00:06:15.470
However if we want to do things like male and female or unknown or whatever other options those aren't

84
00:06:15.500 --> 00:06:16.330
all the same length.

85
00:06:16.340 --> 00:06:18.780
So it makes more sense to use far char.

86
00:06:19.370 --> 00:06:23.270
So you probably come up with some other situations where this would make sense.

87
00:06:23.270 --> 00:06:26.970
But typically we use far too hard because it gives us a lot of flexibility.

88
00:06:28.560 --> 00:06:31.130
Otherwise you're smarter.

89
00:06:31.350 --> 00:06:36.180
So there's a little there's a table here that I actually took this from the docs just kind of blew it

90
00:06:36.210 --> 00:06:44.010
up and added it into my slides but it's from the documentation for char and varchar and what it's showing

91
00:06:44.010 --> 00:06:47.550
you here for a given value like it.

92
00:06:47.550 --> 00:06:57.590
Let's take a B if we have a column with data type char for you can see that it adds the two spaces so

93
00:06:57.590 --> 00:06:59.520
it's actually stored as AB space.

94
00:06:59.540 --> 00:07:09.310
Space and if we store the same thing string a B in a column with our chart for so far instead of char

95
00:07:09.940 --> 00:07:12.490
it just stores a B.

96
00:07:12.520 --> 00:07:18.700
But what I want to call your attention to is not just how it's stored but also the storage size how

97
00:07:18.700 --> 00:07:20.650
many bytes it takes up.

98
00:07:20.710 --> 00:07:30.010
So if we look at char when we declare char for every single string that we insert into that column will

99
00:07:30.010 --> 00:07:36.100
always be 4 bytes and you can see over here whether it's an empty string it will convert it to be four

100
00:07:36.100 --> 00:07:42.010
spaces if it's two characters it adds two spaces if it's four characters it leaves it alone if it's

101
00:07:42.010 --> 00:07:42.880
more than four.

102
00:07:42.880 --> 00:07:44.190
It truncates it.

103
00:07:44.290 --> 00:07:46.330
So we have a fixed size here.

104
00:07:46.480 --> 00:07:53.670
However with the bar chart for the same values all have different storage sizes.

105
00:07:53.800 --> 00:07:55.940
So they're unchanged when they're stored.

106
00:07:56.020 --> 00:08:02.890
We don't get spaces added We don't get anything truncated which is good but you can see that our storage

107
00:08:02.890 --> 00:08:09.600
size does start to blossom blossom starts to grow as the length of the strings grow.

108
00:08:09.700 --> 00:08:10.970
Now it's not a one to one thing.

109
00:08:11.080 --> 00:08:16.030
So it's not like if we have a ten character string here it's going to take up 10 bytes.

110
00:08:16.210 --> 00:08:17.820
But there is a difference.

111
00:08:17.830 --> 00:08:19.410
That's all that matters.

112
00:08:19.450 --> 00:08:24.780
With that said To be honest that difference won't make a big difference.

113
00:08:25.420 --> 00:08:26.480
Let me put it another way.

114
00:08:26.500 --> 00:08:33.020
The difference is insignificant for most applications that I have ever worked on.

115
00:08:33.070 --> 00:08:39.310
If you are working on some giant app you know you work a bank of America and you've got you know tens

116
00:08:39.310 --> 00:08:43.800
of millions of customers and hundreds of millions of records.

117
00:08:43.840 --> 00:08:45.850
That does make a significant difference.

118
00:08:45.940 --> 00:08:51.190
But if you're working on a personal project or your own hobby application you don't really need to fret

119
00:08:51.550 --> 00:08:52.770
over this sort of thing.

120
00:08:52.780 --> 00:08:57.550
In fact is it something sort of a common strategy that a lot of people would say is just get something

121
00:08:57.550 --> 00:08:58.110
working.

122
00:08:58.210 --> 00:09:01.680
And then when you get it when it comes time you can optimize things.

123
00:09:01.680 --> 00:09:08.080
So if you start to realize well this one thing is becoming kind of slow this query I'm writing or whatever

124
00:09:08.080 --> 00:09:14.700
it is maybe it makes sense for me to make this a fixed length and convert it to a char.

125
00:09:14.710 --> 00:09:16.330
OK so that's the difference.

126
00:09:16.330 --> 00:09:19.770
On paper you can go ahead skip the next video.

127
00:09:19.810 --> 00:09:22.940
I'm just going to show you in practice what it looks like.

128
00:09:23.110 --> 00:09:28.900
So I'm going to hop over to cloud nine and first thing I'll say I'm working on just a new database I

129
00:09:28.900 --> 00:09:32.460
made basically just a testing database.

130
00:09:32.470 --> 00:09:38.480
I didn't want to muddy the waters with our Instead of our book shop database I want to leave it alone.

131
00:09:38.620 --> 00:09:41.900
So I just made one called new testing DB.

132
00:09:42.040 --> 00:09:44.540
If you want to follow along just make a new database.

133
00:09:44.800 --> 00:09:46.860
Hopefully remember how to do that.

134
00:09:46.870 --> 00:09:47.710
Call it whatever you want.

135
00:09:47.710 --> 00:09:54.940
I'm just going to leave it at the end of this anyway so I'm going to create a table here and all I want

136
00:09:54.940 --> 00:10:00.400
to do is have two different columns one that a char one that's of our chart.

137
00:10:00.700 --> 00:10:09.850
We'll just do dogs that say create table dogs and we'll have a name which will be char a fixed length

138
00:10:10.390 --> 00:10:16.830
five characters and then we'll have breed which will be Vardar.

139
00:10:17.290 --> 00:10:21.800
And let's just say 10 there OK.

140
00:10:22.060 --> 00:10:27.490
Just like that and I'll go ahead and hit enter and I'm missing comma

141
00:10:30.890 --> 00:10:31.940
area.

142
00:10:32.600 --> 00:10:33.240
OK.

143
00:10:33.440 --> 00:10:35.160
So we have that Doug's table.

144
00:10:35.210 --> 00:10:37.700
Now let's insert some simple data.

145
00:10:37.700 --> 00:10:44.270
So the first thing that I'll do is insert into dogs and remember our syntax here spend a little while

146
00:10:44.270 --> 00:10:45.520
since we've started.

147
00:10:45.780 --> 00:10:52.040
We've been doing a lot of selects but we need to have our values and the values that will pass and we're

148
00:10:52.040 --> 00:10:56.970
going to start with something that is less than five characters.

149
00:10:56.990 --> 00:11:06.260
So for a name let's say Bob and breed will also be something short let's say.

150
00:11:06.690 --> 00:11:09.850
What is a short dog breed beagle.

151
00:11:10.010 --> 00:11:10.460
Yes.

152
00:11:10.520 --> 00:11:11.290
I don't know.

153
00:11:11.490 --> 00:11:16.080
OK get so do that and we'll do one more here.

154
00:11:16.400 --> 00:11:19.880
This time we'll have a name that's exactly five characters.

155
00:11:19.880 --> 00:11:26.840
Let's call it Rob be spelled that way apologize for an original names here.

156
00:11:26.850 --> 00:11:36.480
Just trying to work with the constraints and breed here will be a corgi.

157
00:11:37.440 --> 00:11:38.270
OK.

158
00:11:39.110 --> 00:11:42.570
And we'll do one more and this time we'll have a long name.

159
00:11:42.680 --> 00:11:57.010
How about Princess Jane and practice Jane is a man until that last year was another breed let's go with

160
00:11:57.280 --> 00:11:59.570
retriever.

161
00:11:59.670 --> 00:12:00.630
Is that right.

162
00:12:03.610 --> 00:12:04.720
If I remember.

163
00:12:04.740 --> 00:12:05.040
All right.

164
00:12:05.040 --> 00:12:07.190
Forgive me if it's spelled wrong.

165
00:12:08.930 --> 00:12:09.540
OK.

166
00:12:09.710 --> 00:12:11.630
So first thing first right off the bat.

167
00:12:11.790 --> 00:12:14.040
Notice we got a warning on this last one.

168
00:12:14.210 --> 00:12:15.670
Why do you think that happened.

169
00:12:16.280 --> 00:12:24.880
Well it's because Princess Jane exceeds the limit that we've set for our char which is five characters.

170
00:12:24.950 --> 00:12:28.970
So now if we do a simple select star from Dug's

171
00:12:32.020 --> 00:12:35.730
you'll see we have Bob ráby.

172
00:12:35.890 --> 00:12:42.360
They look good they look the same unchanged and Princess Jane unfortunately has been truncated.

173
00:12:42.550 --> 00:12:47.920
So unfortunately we can't actually tell that there are those trailing spaces because they are not actually

174
00:12:47.920 --> 00:12:52.000
here when the text is retrieved.

175
00:12:52.180 --> 00:12:58.690
Remember with that giant plugger tech said it said that they're stored with these two extra spaces in

176
00:12:58.690 --> 00:13:04.870
our case because this is three characters and we set up a five character fixed char so they're in memory

177
00:13:04.870 --> 00:13:06.380
are going to be two spaces here.

178
00:13:06.430 --> 00:13:11.070
But when it's pulled back out and displayed to us they're chopped off.

179
00:13:11.170 --> 00:13:17.620
Robbie is unchanged because Robbie has five characters long princess Jane unfortunately is cut off.

180
00:13:17.620 --> 00:13:24.400
However when we look over here beagle corgi and Retriever Vardar works how you expect it's a variable

181
00:13:24.400 --> 00:13:29.600
character like let's just do one more example here with Princess Jane.

182
00:13:29.820 --> 00:13:31.570
Yeah we'll just have another princess Jane.

183
00:13:31.750 --> 00:13:38.180
And the long retriever blah blah blah blah blah.

184
00:13:38.220 --> 00:13:40.560
Now I want to do a show like Star.

185
00:13:40.560 --> 00:13:42.260
Notice again what happened.

186
00:13:42.480 --> 00:13:44.180
This is what we expect to happen.

187
00:13:44.180 --> 00:13:47.190
We've already seen this how our chart works.

188
00:13:47.190 --> 00:13:50.580
It still has a maximum length that we can provide in this case.

189
00:13:50.580 --> 00:13:55.440
We did 10 I believe yes.

190
00:13:55.540 --> 00:13:59.450
So it can work similarly to char and that's it.

191
00:13:59.470 --> 00:14:01.360
In that sense where it will truncate things.

192
00:14:01.570 --> 00:14:08.530
So just to wrap up the entier char again is faster for fixed length text so if you know something is

193
00:14:08.620 --> 00:14:11.320
always going to be the same size use char.

194
00:14:11.470 --> 00:14:14.580
However if you have any doubt use of our char.

195
00:14:14.980 --> 00:14:19.660
And again the difference is relatively insignificant for most things.

196
00:14:20.050 --> 00:14:24.290
I don't want to be presumptuous but most of the time it's not going to be a deal breaker.

197
00:14:24.440 --> 00:14:28.290
OK so moving on we're not going to discuss numbers in the next video.

198
00:14:28.360 --> 00:14:28.740
This video.
