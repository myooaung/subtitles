WEBVTT
1
00:00:00.780 --> 00:00:03.270
So we saw the very basics of using faker.

2
00:00:03.450 --> 00:00:05.040
Really just a single line.

3
00:00:05.130 --> 00:00:07.350
You know it's the thing and that it's a package.

4
00:00:07.560 --> 00:00:12.830
Now our game plan from here on out is to use faker to generate our data for us.

5
00:00:12.840 --> 00:00:14.650
Get 500 users in there.

6
00:00:14.850 --> 00:00:20.240
But faker on its own won't do that so will use this favorite Internet e-mail.

7
00:00:20.660 --> 00:00:21.930
We want one of those.

8
00:00:22.170 --> 00:00:28.020
We want 500 of those actually and we'll use the date passed and the reason we need to use data past

9
00:00:28.350 --> 00:00:31.030
is that when a user is created.

10
00:00:31.140 --> 00:00:31.700
Yes.

11
00:00:31.860 --> 00:00:37.160
You know in the real world we want to store the current time when they actually signed up.

12
00:00:37.500 --> 00:00:43.080
But when we're inserting 500 fake users we don't want them all to have the exact same time that they're

13
00:00:43.080 --> 00:00:46.360
joining because then that throws off our data.

14
00:00:46.410 --> 00:00:49.850
Right for having 500 users who joined at the same exact instant.

15
00:00:50.070 --> 00:00:53.520
So we'd much rather spread them out so that we could try certain things with the data.

16
00:00:53.520 --> 00:00:54.560
Play around with it.

17
00:00:54.600 --> 00:00:56.850
So we're going to generate data using this.

18
00:00:56.850 --> 00:01:02.370
So then the next logical question is OK we know how to generate a single email and a single date.

19
00:01:02.370 --> 00:01:04.230
How do we do 500 of them.

20
00:01:04.230 --> 00:01:08.720
And more importantly how the heck do we get them in a minuscule database.

21
00:01:09.150 --> 00:01:11.580
So warning appear red letters.

22
00:01:11.580 --> 00:01:14.260
This is not really code that will work well.

23
00:01:14.310 --> 00:01:16.980
It's not code that will work that will work at all.

24
00:01:16.980 --> 00:01:18.410
But I just want to show you.

25
00:01:18.630 --> 00:01:21.270
We would want to do something like this right.

26
00:01:21.270 --> 00:01:24.380
Insert into user's e-mail and create it at.

27
00:01:24.720 --> 00:01:30.270
And the values you want a faker an Internet e-mail and fake or date date of past.

28
00:01:30.300 --> 00:01:34.350
This is sort of a hybrid between my as well and node.

29
00:01:34.350 --> 00:01:35.930
Unfortunately this doesn't work.

30
00:01:36.060 --> 00:01:38.040
But this is what we're going for right.

31
00:01:38.040 --> 00:01:39.800
We want to do something like this.

32
00:01:39.990 --> 00:01:43.950
Insert 500 of these where we get a fake e-mail a fake date.

33
00:01:43.950 --> 00:01:46.230
The problem is inserted into users.

34
00:01:46.230 --> 00:01:51.400
This syntax only exists in my as well and faker only exists in node.

35
00:01:51.510 --> 00:01:53.410
So how do we bridge that connection.

36
00:01:54.630 --> 00:01:56.650
Oh and we want to use that 500 times.

37
00:01:56.820 --> 00:01:57.600
Right.

38
00:01:57.600 --> 00:02:00.500
The answer is that we use something called My.

39
00:02:00.510 --> 00:02:07.110
Q Well and it's confusing because it's a node package like fakers and other package called my s.

40
00:02:07.110 --> 00:02:11.060
Q Well what it does is it connects to my as.

41
00:02:11.060 --> 00:02:14.330
Q Well the actual database and it talks to it.

42
00:02:14.580 --> 00:02:17.750
So every language there are a couple of different packages.

43
00:02:17.750 --> 00:02:19.960
You know PDP has a way of talking to mice.

44
00:02:20.090 --> 00:02:22.890
Mice Well Ruby has a couple of ways.

45
00:02:23.010 --> 00:02:24.820
They are kind of adapters.

46
00:02:24.840 --> 00:02:31.230
Think of it as a connector between the two a tube or a pipeline and there's a couple for node but the

47
00:02:31.230 --> 00:02:36.660
one we're using is the most popular It's called My as well which personally I find kind of confusing.

48
00:02:36.660 --> 00:02:39.780
I wish it was called you know minuscule node or Maia's.

49
00:02:39.780 --> 00:02:43.460
Q Well connecter or my s to LJ s or something.

50
00:02:43.530 --> 00:02:46.460
And here's a couple of diagrams of basically how it works.

51
00:02:46.470 --> 00:02:48.330
So we have node on unten.

52
00:02:48.330 --> 00:02:49.960
This is where we've been working.

53
00:02:50.100 --> 00:02:53.820
And then we have MY as well on its own our separate database.

54
00:02:53.890 --> 00:03:01.510
So this has are data stored in it and the Maia's queue package will be able to say things like hey my

55
00:03:01.560 --> 00:03:08.330
ask your database how many users are in there ask it to the database and then the my ask well database

56
00:03:08.370 --> 00:03:13.770
will be able to say Well looks like there are currently 518 users send that back to node and we can

57
00:03:13.770 --> 00:03:18.380
use it or might be something like this.

58
00:03:18.450 --> 00:03:19.200
Hey there it is.

59
00:03:19.210 --> 00:03:20.030
Q our database.

60
00:03:20.070 --> 00:03:21.560
How many users are in there.

61
00:03:21.840 --> 00:03:24.790
And my ask we all might say users.

62
00:03:24.990 --> 00:03:26.420
I have no idea what you're talking about.

63
00:03:26.420 --> 00:03:32.420
I don't have a users table in here in which case we would get that back to No.

64
00:03:32.440 --> 00:03:38.850
Yes and we'd be able to know that because of the package we're using my s q our package is both asking

65
00:03:38.850 --> 00:03:39.650
the questions.

66
00:03:39.650 --> 00:03:43.720
All right it's querying the database and it's handling the replies.

67
00:03:43.940 --> 00:03:49.470
So then in here we can write logic that says OK if we don't get a response if there's an error message

68
00:03:49.740 --> 00:03:50.980
let's do one thing.

69
00:03:51.150 --> 00:03:55.570
Otherwise do something else or a third scenario.

70
00:03:56.040 --> 00:04:03.110
Hey there may as well our adaptor or my ass Our connector might ask how many users are in your database.

71
00:04:03.390 --> 00:04:05.690
And there is no database.

72
00:04:06.000 --> 00:04:07.280
We don't get a spot.

73
00:04:07.530 --> 00:04:09.920
Well we need to figure out how to handle that node.

74
00:04:09.930 --> 00:04:16.110
Unfortunately fortunately the my as well package handles that so it will you know start by freaking

75
00:04:16.110 --> 00:04:16.260
out.

76
00:04:16.260 --> 00:04:17.020
Are you there.

77
00:04:17.040 --> 00:04:18.000
What's going on.

78
00:04:18.020 --> 00:04:21.230
Bunch of sad faces but then they will figure it out.

79
00:04:21.250 --> 00:04:26.180
It will basically time out and it will figure out there's no connection there's no database there.

80
00:04:26.490 --> 00:04:29.800
And we'll be able to handle that as well which is something that could happen.

81
00:04:30.030 --> 00:04:31.970
Your database server could go down.

82
00:04:32.250 --> 00:04:33.510
Something could go wrong.

83
00:04:33.780 --> 00:04:36.160
So these are different scenarios.

84
00:04:36.240 --> 00:04:41.070
Mainly we're working with this one right where there's good communication and everything's working how

85
00:04:41.070 --> 00:04:42.090
it should.

86
00:04:42.390 --> 00:04:49.520
But the key thing is that the package my rescue package works in node talks to a database.

87
00:04:49.740 --> 00:04:53.110
So without further ado let's see how that works.
