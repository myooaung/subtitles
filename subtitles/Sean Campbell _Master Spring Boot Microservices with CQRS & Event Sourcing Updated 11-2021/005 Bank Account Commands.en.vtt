WEBVTT
1
00:00:00.360 --> 00:00:05.730
In this lecture, we are going to create the bank account command objects.

2
00:00:05.910 --> 00:00:13.290
Now remember, a command is a combination of expressed intent that carries information that is required

3
00:00:13.290 --> 00:00:16.570
to undertake an action based on that intent.

4
00:00:16.890 --> 00:00:23.730
Simply put, it's the objects that we are going to use to tell the bank account command API what to

5
00:00:23.730 --> 00:00:24.170
do.

6
00:00:24.660 --> 00:00:31.380
We will create for command objects one for opening a bank account, another for depositing funds into

7
00:00:31.380 --> 00:00:39.990
an account, also one for withdrawing funds and yet another to close an account navigate to the command

8
00:00:39.990 --> 00:00:43.560
package under the bank account command API project.

9
00:00:45.420 --> 00:00:50.160
Let's create a new class and call it open account command.

10
00:00:53.860 --> 00:01:00.490
Again, go ahead and add the data annotation and the boulder annotation.

11
00:01:06.760 --> 00:01:15.340
Now, again, we are going to mark Idy field with the target aggregate, identify annotation, if you

12
00:01:15.340 --> 00:01:22.660
recall the target aggregate data for annotation tells the exact framework which instance of the aggregate

13
00:01:22.660 --> 00:01:24.940
should handle the command message.

14
00:01:31.340 --> 00:01:36.290
Now, let's add another field, one for the account holder.

15
00:01:37.550 --> 00:01:46.640
Now we will get the account holder ID from the user query API because the user query API has data sovereignty

16
00:01:46.670 --> 00:01:48.830
over the user database.

17
00:01:50.270 --> 00:01:52.820
It's also add an account type field.

18
00:02:03.430 --> 00:02:09.190
And then another field for specifying what the opening balance should be.

19
00:02:15.630 --> 00:02:22.620
It's open the door XML file and add a dependency to your bank account called Project.

20
00:02:30.210 --> 00:02:33.000
This will allow us to add the import statement.

21
00:02:38.700 --> 00:02:40.320
They just added manually

22
00:02:43.560 --> 00:02:52.440
come Dutch Spring Bank, Dutch bank account called Todd Models that can't type.

23
00:03:00.090 --> 00:03:06.600
Let's go ahead and add another clause and call it deposit funds Camonte.

24
00:03:11.670 --> 00:03:16.290
Let's go ahead and add the data and the boulder annotation again,

25
00:03:20.520 --> 00:03:25.110
and I'm just going to go and copy the ID field.

26
00:03:31.940 --> 00:03:39.740
And then we can add one more field, basically a field for specifying the amount that we want to deposit

27
00:03:39.740 --> 00:03:41.000
into the account.

28
00:03:43.910 --> 00:03:54.680
OK, let's create another command, let's call it withdraw funds command, and it will actually look

29
00:03:54.680 --> 00:04:02.360
exactly the same as to deposit funds command, copy the annotations and the fields.

30
00:04:03.290 --> 00:04:07.070
In this case, we will specify the amount that we want to withdraw.

31
00:04:16.730 --> 00:04:23.120
And then finally, let's create our last command, close account command,

32
00:04:29.660 --> 00:04:31.610
copy the annotations again.

33
00:04:34.660 --> 00:04:42.670
And we can go ahead and copy just the idea, because that's all we will need to specify the idea of

34
00:04:42.670 --> 00:04:44.950
the bank account that we want to close.

35
00:04:47.880 --> 00:04:54.570
And that concludes the creation of our command objects, so let's build a project.

36
00:05:01.340 --> 00:05:03.320
And if all goes well.

37
00:05:04.440 --> 00:05:06.720
Everything should build successfully.
