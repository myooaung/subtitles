WEBVTT
1
00:00:00.240 --> 00:00:07.230
In this lecture, we are going to set up our API Gateway project and we are going to configure routes

2
00:00:07.230 --> 00:00:09.150
for our user micro services.

3
00:00:09.750 --> 00:00:13.410
Again, we'll use the spring initialize to generate API.

4
00:00:13.410 --> 00:00:18.750
Gateway Project will use Mavin as a bolt automation tool.

5
00:00:18.750 --> 00:00:26.010
Again, Java as the language and version two point three point two is the latest table release version

6
00:00:26.010 --> 00:00:27.570
at the time of the recording.

7
00:00:28.290 --> 00:00:31.560
Change the group name to come the spring bank again.

8
00:00:32.600 --> 00:00:41.510
For the artifact name, we can simply call it API hyphen Gateway, and then let's give a description,

9
00:00:41.510 --> 00:00:46.220
something such as API Gateway Project.

10
00:00:47.690 --> 00:00:55.700
Change it to job 14 and then we'll add only a single dependancy, the spring cloud Gateway Dependancy

11
00:00:56.510 --> 00:00:57.740
click on Generate.

12
00:01:02.950 --> 00:01:12.910
I'm going to move the downloaded API Gateway project to where my other exercise files or you can basically

13
00:01:12.910 --> 00:01:17.920
extract in the same directory where user management MICRA services are located.

14
00:01:18.850 --> 00:01:20.890
Go ahead and open your idee.

15
00:01:24.040 --> 00:01:31.120
Now, the first thing we're going to do is to open up the XML file that you can see all our dependencies,

16
00:01:31.210 --> 00:01:34.930
amongst others, the sprinklered start a gateway dependency.

17
00:01:35.440 --> 00:01:40.270
Let's give our API gateway a proper version, 1.0 point zero.

18
00:01:41.200 --> 00:01:44.020
And then in A.J., you can simply right.

19
00:01:44.020 --> 00:01:47.980
Click on the name and click on ADD as Mavin project.

20
00:01:49.120 --> 00:01:56.290
Now go over to the resources directory, delete the application or properties file.

21
00:01:58.260 --> 00:02:05.910
And then we are going to add an application that waymouth so create a new file and call it application

22
00:02:08.340 --> 00:02:09.290
dot, why?

23
00:02:09.350 --> 00:02:17.760
Well, there are two ways in which you can configure API Gateway routes with sprinklered Gateway either

24
00:02:17.760 --> 00:02:25.770
by using Java base configuration to programmatically create routes or by using property based configuration.

25
00:02:26.190 --> 00:02:32.340
For the sake of simplicity, we will configure our routes using property based configuration only.

26
00:02:33.460 --> 00:02:37.210
Let's start by configuring a port for API Gateway.

27
00:02:39.730 --> 00:02:50.980
They choose Port 2000 and then they configure routes which start with Spring Cloud Gateway,

28
00:02:55.240 --> 00:02:58.420
and then we will start adding our routes.

29
00:02:58.930 --> 00:03:00.630
Every route needs an ID.

30
00:03:02.170 --> 00:03:11.470
So let's add an ID for our registered user API Gateway route, call it user CMD, API and register user,

31
00:03:13.000 --> 00:03:14.830
then add the URAI.

32
00:03:15.070 --> 00:03:23.140
This will basically be the Urai that we used to call the User Command API directly to register a user.

33
00:03:24.850 --> 00:03:34.180
API forward slash, V1 forward slash registered user, and then we need to add a predicate

34
00:03:40.510 --> 00:03:50.110
sprinklered gateway users predicates to match rudes as part of its spring web flux handler mapping infrastructure.

35
00:03:50.350 --> 00:03:57.460
OK, let's copy our route and then we're going to create another route for updating a user.

36
00:03:57.640 --> 00:04:01.000
Just change rageous to use it to update user.

37
00:04:01.720 --> 00:04:05.290
Just make sure also that the indentation is correct.

38
00:04:09.700 --> 00:04:21.550
Change raises the user there to update user and then add forward slash star star to ensure that everything

39
00:04:21.550 --> 00:04:27.520
off to the forward slash from the predicate is translated into the URAI.

40
00:04:29.730 --> 00:04:31.110
Copy that.

41
00:04:31.320 --> 00:04:41.760
And let's create yet another route for removing a user, change that to remove user and update user

42
00:04:41.760 --> 00:04:43.000
to remove users.

43
00:04:43.340 --> 00:04:47.970
Well, they we can change it for the predicate as well.

44
00:04:50.580 --> 00:04:55.890
And then finally, let's add a route for our query API.

45
00:05:01.870 --> 00:05:14.670
And change that to put 882 and controller is usually look up, keep the forward slash star star for

46
00:05:14.800 --> 00:05:17.740
everything because we have a few get a message the.

47
00:05:18.890 --> 00:05:26.930
OK, now we've added all of our routes for our music military services, so let's go ahead and build

48
00:05:26.930 --> 00:05:27.800
our project.

49
00:05:37.460 --> 00:05:40.490
And everything should build successfully.
