1
00:00:00,330 --> 00:00:06,690
In this lecture, we are going to create an account query handler to extend the query messages that

2
00:00:06,690 --> 00:00:08,860
we have created in the previous lecture.

3
00:00:09,270 --> 00:00:16,350
This account query handler will be responsible for querying data from the bank account re database via

4
00:00:16,350 --> 00:00:17,870
the account repository.

5
00:00:18,240 --> 00:00:25,090
Again, a bank account database is our MySQL database where our bank account records are stored.

6
00:00:25,890 --> 00:00:31,740
I want to emphasize the beauty of the database service approach that we are following in this course

7
00:00:32,190 --> 00:00:33,880
for our use of micro services.

8
00:00:33,900 --> 00:00:40,710
We have a Mongar DB Right database entry database and for our bank account micro services we have a

9
00:00:40,710 --> 00:00:46,100
Mongo DB Right database or event store and my sequel read database.

10
00:00:46,530 --> 00:00:49,830
We could really have had four different database types here.

11
00:00:50,130 --> 00:00:56,430
However, the focus of this course is to emphasize that since each micro service has data sovereignty

12
00:00:56,430 --> 00:01:04,230
over its data, your architecture becomes database agnostic, application driven rather than database

13
00:01:04,230 --> 00:01:12,840
driven guy to hand this package under the bank account query API project, let's create a new interface

14
00:01:13,710 --> 00:01:17,310
and call it account query handler.

15
00:01:21,150 --> 00:01:23,520
We are going to define four methods.

16
00:01:24,150 --> 00:01:28,980
Let's start by defining a method that will find an account by idee.

17
00:01:36,700 --> 00:01:40,740
It will take in the fight to count by Idy query.

18
00:01:45,330 --> 00:01:54,270
Now, let's copy the Kadlec up response name and create a new clause and the DTA, now the account lookup

19
00:01:54,270 --> 00:01:57,660
response DCO will extend the base response.

20
00:02:06,960 --> 00:02:10,140
Let's create a construct that matches the super.

21
00:02:15,390 --> 00:02:19,530
Then add a new private field, full list of bank account.

22
00:02:25,370 --> 00:02:26,960
Let's call it accounts.

23
00:02:28,570 --> 00:02:30,830
Let's just add the import statements there.

24
00:02:39,980 --> 00:02:46,800
Go ahead and copy the constructor and add a new one in the second constructor.

25
00:02:46,820 --> 00:02:49,910
We will also pass in the list of bank cards.

26
00:02:59,090 --> 00:03:00,950
Then we can do the assignment.

27
00:03:05,900 --> 00:03:15,530
OK, let's go back to Creary handler at the impact statement there, let's add a third constructor and

28
00:03:15,530 --> 00:03:20,810
this time one that takes the message as well as a single bank account.

29
00:03:22,100 --> 00:03:24,710
Let's change that to new array list.

30
00:03:30,110 --> 00:03:37,160
This to count start ed, and then we'll add the single account that is passed to the constructor.

31
00:03:40,140 --> 00:03:44,040
Now, we still need to create Sator and Gatemouth it

32
00:03:47,040 --> 00:03:51,510
the first set of cards then will pass in a list of bank account.

33
00:04:04,100 --> 00:04:08,480
And then our kids, that would get the list of accounts.

34
00:04:17,530 --> 00:04:24,400
OK, so that is all we have to do for the account lookup response, a second method will also return

35
00:04:24,400 --> 00:04:29,490
the Caleca response, let's call it find I can't buy a Holda ID.

36
00:04:30,790 --> 00:04:38,770
This will be the user ID of the user that holds the account and will pass in find account holder ID

37
00:04:38,770 --> 00:04:39,460
query.

38
00:04:43,110 --> 00:04:51,840
OK, and then our third method will return a countercoup response again, let's call it, find all accounts

39
00:04:52,800 --> 00:05:02,730
and we'll pass in, find all accounts, query, and then for our fourth and last method, return a cowardly

40
00:05:02,970 --> 00:05:07,380
response, find accounts with balance

41
00:05:11,370 --> 00:05:15,480
and we'll pass in the find accounts with balanced query.

42
00:05:19,560 --> 00:05:29,520
OK, now let's create a class that will implement the interface, call it accounts, query handler input.

43
00:05:32,190 --> 00:05:35,940
And then start by annotating it with the service annotation

44
00:05:39,660 --> 00:05:44,970
and then we can add a private field for the account repository.

45
00:06:03,180 --> 00:06:11,190
Again, we will use dependency injection to inject the account repository dependency into account,

46
00:06:11,190 --> 00:06:12,980
query handler EMPL.

47
00:06:13,980 --> 00:06:16,440
And don't forget to add or to what?

48
00:06:18,250 --> 00:06:27,120
OK, so now go ahead and add the query handler annotation for each of our query handler methods.

49
00:06:46,010 --> 00:06:53,450
Let's start by implementing the find account by Idy method, we can get a bank account from our bank

50
00:06:53,450 --> 00:07:03,380
account database by working account repository DOT fined by Idy and we can get our bank account ID from

51
00:07:03,380 --> 00:07:04,610
our query object.

52
00:07:06,140 --> 00:07:14,180
Now we need to make sure that we actually have a bank account, so for our response, we can go ahead

53
00:07:14,180 --> 00:07:22,700
and use the present method to see if we actually have a bank account, because Finbarr Idee returns

54
00:07:22,700 --> 00:07:24,040
an optional bank account.

55
00:07:27,360 --> 00:07:36,510
So if we do, we can return a new account Lookup responds with a message such as bank account successfully

56
00:07:36,510 --> 00:07:37,320
returned.

57
00:07:44,950 --> 00:07:52,570
And then we can pause in bank account dot gate if we do not have a bank account.

58
00:07:52,990 --> 00:07:59,770
We can return a new account lookup response with only a message such as no bank account found.

59
00:08:03,660 --> 00:08:08,640
For I.D., and then we can add the bank account I.D. to our message.

60
00:08:15,870 --> 00:08:23,340
And then we can return the response now let's copy the final account by dimethoate.

61
00:08:25,000 --> 00:08:32,740
Because the final count by Holda ID will look similar instead of query dot gate ID, will you get a

62
00:08:32,740 --> 00:08:40,720
card holder ID and will change messages to no bank account found for Holda Idee.

63
00:08:44,670 --> 00:08:52,560
But we also need to do one more thing, go to the account repository and add a new method that will

64
00:08:52,560 --> 00:08:56,190
return an optional bank account like the Finbarr ID.

65
00:09:01,410 --> 00:09:10,580
Let's call it fine by account holder Idy and spring day to JPA would make sure that everything after

66
00:09:10,580 --> 00:09:17,720
fined by the field name, in other words, will be translated into a sequel query.

67
00:09:24,210 --> 00:09:29,970
Let's go back and change our method to find by account holder idee.

68
00:09:35,050 --> 00:09:40,120
OK, so now let's implement the find all accounts method.

69
00:09:42,400 --> 00:09:52,180
So will add a bank account iterator because you'll see a current repository dot find all returns and

70
00:09:52,180 --> 00:10:01,810
iterable of bank account and then to check if we do have bank accounts or not, we can say not.

71
00:10:01,810 --> 00:10:06,430
Bank account iterated dot iterator dot has next.

72
00:10:10,570 --> 00:10:18,250
And if that's not true, then it means we don't have any bank accounts and then we can return a new

73
00:10:18,250 --> 00:10:23,350
account lookup response with a message that says no bank accounts were found.

74
00:10:34,820 --> 00:10:43,880
But if we do have next in The Iterator, we can get the bank accounts by creating a new array list of

75
00:10:43,880 --> 00:10:44,960
bank account.

76
00:10:53,440 --> 00:10:55,390
Just add the import statement, the.

77
00:10:59,430 --> 00:11:10,170
And then bank account iterator taught for each for each item in the iterator, we can say bank account

78
00:11:10,170 --> 00:11:16,650
Dot and I, we I would be a bank account, for instance.

79
00:11:17,870 --> 00:11:20,780
And then let's add a variable for the count.

80
00:11:23,530 --> 00:11:28,810
And we can simply say bank accounts that size to count the amount of bank accounts.

81
00:11:33,850 --> 00:11:39,850
Let's return a new account lookup response with a message that is successfully returned.

82
00:11:46,740 --> 00:11:48,630
And then we can add the count.

83
00:11:54,450 --> 00:11:56,310
Bank accounts.

84
00:12:03,530 --> 00:12:07,040
And also pass in the list of bank accounts.

85
00:12:08,110 --> 00:12:13,940
A final message that we need to implement is the final accounts with balance method.

86
00:12:14,450 --> 00:12:21,530
So we need to add two more methods to our current repository, one that returns a list of bank accounts

87
00:12:22,040 --> 00:12:23,930
and we'll call it Find.

88
00:12:26,740 --> 00:12:37,270
By balance, greater then and then we can pass in a balance now again, Spring JPA will ensure that

89
00:12:37,270 --> 00:12:40,450
that is translated into a sequel query.

90
00:12:45,350 --> 00:12:52,850
And then let's also add one full find by balance, less than make sure that you say less then and not

91
00:12:52,850 --> 00:12:57,620
smaller then, because Spring JPI expects less and not smaller.

92
00:12:58,820 --> 00:12:59,240
OK.

93
00:13:16,730 --> 00:13:24,590
So let's use query that kit, a quality type, if the quality type is greater, then then we invoke

94
00:13:24,590 --> 00:13:27,590
the find by a balance greater than method.

95
00:13:33,020 --> 00:13:39,350
And we can pass in the balance or else we can invoke the find by balance less than.

96
00:13:46,120 --> 00:13:48,190
And again, we'll pass in the ballots.

97
00:13:52,990 --> 00:14:00,310
Then we can do a check to see if we actually do have bank accounts by checking if the bank accounts

98
00:14:00,310 --> 00:14:04,860
or not now or if the size is greater than zero.

99
00:14:14,790 --> 00:14:20,010
And then we can return a new instance of a Kadlec up response with a message such as.

100
00:14:26,570 --> 00:14:28,190
Successfully returned.

101
00:14:33,780 --> 00:14:37,830
And then we can get the count again, bank accounts that size

102
00:14:40,920 --> 00:14:48,800
and bank accounts similarly to the find all accounts message that we are returning, they are supposed

103
00:14:48,810 --> 00:14:55,080
we could have also added a variable for the count, but nonetheless, both will work perfectly.

104
00:14:55,760 --> 00:15:02,610
And if we don't have any bank accounts, then we can say no bank accounts without just copy it from

105
00:15:02,610 --> 00:15:09,000
the above method and then go ahead and return the response.

106
00:15:11,280 --> 00:15:17,700
OK, we have implemented all of our query, had methods to go ahead and build your project.

107
00:15:25,150 --> 00:15:28,240
And everything should build successfully.
