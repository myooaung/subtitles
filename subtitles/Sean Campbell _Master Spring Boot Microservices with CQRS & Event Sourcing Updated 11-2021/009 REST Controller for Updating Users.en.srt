1
00:00:00,330 --> 00:00:07,320
In this lecture, we are going to implement the update, use a controller, this will provide a user

2
00:00:07,320 --> 00:00:12,210
command API with an endpoint that we can use to update users.

3
00:00:14,400 --> 00:00:22,230
Navigate to the controllers package and they use a command API project, let's create a new class and

4
00:00:22,230 --> 00:00:26,700
call it update user controller.

5
00:00:30,540 --> 00:00:40,830
Go ahead and add the race control annotation and then let's add our request mapping for the path we

6
00:00:40,830 --> 00:00:48,690
could make it forward, slash API, forward slash V1, forward slash update user.

7
00:00:52,480 --> 00:00:57,520
Again, let's create a private field for the command gateway.

8
00:01:03,030 --> 00:01:07,770
And a public constructor that takes in the command gateway as parameter

9
00:01:14,220 --> 00:01:15,720
dates to the assignment.

10
00:01:19,970 --> 00:01:27,920
And then remember the auto wide annotation to ensure that it gets injected via dependency injection.

11
00:01:28,940 --> 00:01:33,410
OK, we're going to use a put htp verb.

12
00:01:33,770 --> 00:01:41,960
So put is basically when you want to do a full update, you can also do a patch if you want to do a

13
00:01:41,960 --> 00:01:43,100
partial update.

14
00:01:43,580 --> 00:01:47,270
But for the purposes of this course, we will only do a put.

15
00:01:48,110 --> 00:01:56,900
Now for our path variable, we will pass in an ID that will basically specify the user that we want

16
00:01:56,900 --> 00:01:57,860
to update.

17
00:02:00,230 --> 00:02:08,360
Again, we will return the response entity and this time we will only return the base response.

18
00:02:10,500 --> 00:02:20,930
Let's call our method update user and then we will pass in a path variable with a value ID as per put

19
00:02:20,930 --> 00:02:21,470
mapping.

20
00:02:25,960 --> 00:02:27,400
Which should be a string.

21
00:02:31,550 --> 00:02:40,190
And let's go ahead and add a request party, basically taking in our update user command.

22
00:02:50,220 --> 00:02:58,620
At import, and we also want to add the vetted annotation to ensure that our object gets validated.

23
00:03:00,810 --> 00:03:10,110
Let's go to our user command object and specifically specify that we want to validate the user object.

24
00:03:10,500 --> 00:03:16,460
And if it's null, we want to tell the user the following.

25
00:03:17,220 --> 00:03:21,100
Let's copy the same message that we've used for the register.

26
00:03:21,120 --> 00:03:26,040
Use a command, no user details were supplied.

27
00:03:26,470 --> 00:03:30,150
OK, so let's start by adding a try catch.

28
00:03:40,050 --> 00:03:43,650
Let's copy the registered user controllers.

29
00:03:43,830 --> 00:03:44,760
Try catch.

30
00:03:50,900 --> 00:03:51,850
Posted there.

31
00:03:52,430 --> 00:03:57,170
Let's change it to error while processing update user request.

32
00:03:58,550 --> 00:04:05,510
And this time will only return a base response with the safe error message.

33
00:04:11,080 --> 00:04:21,220
Now, let's go ahead and set our command ID with the ID that we are passing in, then we can invoke

34
00:04:21,220 --> 00:04:31,210
the command gateway to send to dispatch the update, use a command, and then if all goes well, we'll

35
00:04:31,210 --> 00:04:33,940
return a base response.

36
00:04:35,700 --> 00:04:41,400
Where we can say user successfully updated.

37
00:04:47,170 --> 00:04:53,190
As well as return HDB status quo 200, OK?

38
00:04:57,860 --> 00:04:59,780
Now, let's at a break point the.

39
00:05:04,070 --> 00:05:07,730
And then let's debug our user command application.

40
00:05:11,470 --> 00:05:17,560
Also, go ahead and add a break point and the update user command handler.

41
00:05:27,840 --> 00:05:32,220
Also at a breakpoint under the user updated event handler.

42
00:05:39,550 --> 00:05:43,020
And let's debug our user query application as well.

43
00:05:48,970 --> 00:05:58,390
Go ahead and copy the request mapping for updated user open Posman, open a new tab.

44
00:05:59,550 --> 00:06:06,510
Change it to put HGP verb, say, copy the localhost, put 1881.

45
00:06:09,660 --> 00:06:14,730
Now, let's go and copy the Jason body from the registered user command.

46
00:06:18,960 --> 00:06:20,790
And change it to Jason.

47
00:06:21,750 --> 00:06:32,060
OK, let's change the email to Mike Dotto, the password to password 38, username to Mike Diabolo seven.

48
00:06:33,180 --> 00:06:37,350
And let's give Mike also the right privileges.

49
00:06:44,430 --> 00:06:45,170
OK.

50
00:06:49,470 --> 00:06:53,040
Let's first go and get the idea of Mike.

51
00:07:01,150 --> 00:07:03,610
Go ahead and copy the ID.

52
00:07:09,010 --> 00:07:13,120
And we can edit as a parameter to request Urai.

53
00:07:16,830 --> 00:07:24,030
Now, let's step through the code, dispatch the update, use a command there, you'll see the command

54
00:07:24,030 --> 00:07:24,650
handler.

55
00:07:25,860 --> 00:07:27,780
We can hash the password again.

56
00:07:29,040 --> 00:07:35,060
And let's add a breakpoint under the event, saucing handler for use an updated event as well.

57
00:07:38,470 --> 00:07:46,240
So that gets published to the event, plus the event handler consumes the event and we can invoke the

58
00:07:46,240 --> 00:07:48,550
save method of the user repository.

59
00:07:49,840 --> 00:07:57,070
Now they you'll see we got a status quo, 200 and a message user successfully updated.

60
00:07:58,430 --> 00:08:00,040
Let's go back to our database.

61
00:08:00,270 --> 00:08:01,240
It's a five.

62
00:08:03,860 --> 00:08:11,150
And they will see that the email is Michelotto and the username Mike Doubler saved, as well as the

63
00:08:11,150 --> 00:08:13,010
right privilege that's been added.

64
00:08:13,580 --> 00:08:18,180
Let's go to Demesne Events Collection, which represents events.

65
00:08:18,200 --> 00:08:20,930
To day, you'll see an additional event.

66
00:08:22,430 --> 00:08:33,890
And we can see that we first registered John Doe and then we registered Jane Doe and another user registered

67
00:08:33,890 --> 00:08:42,080
event for registering Mike Doe and a user updated event for updating Mike Doe.
