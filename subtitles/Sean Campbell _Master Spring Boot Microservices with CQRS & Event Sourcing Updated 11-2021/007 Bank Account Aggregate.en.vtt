WEBVTT
1
00:00:00.300 --> 00:00:07.860
In this lecture, we are going to create the bank account aggregate by now, you can tell that the aggregate

2
00:00:07.860 --> 00:00:10.930
is the primary component in a command API.

3
00:00:11.310 --> 00:00:17.340
It is where the commands are handled, the events are raised, the state of the aggregate is altered,

4
00:00:17.700 --> 00:00:21.840
and the events are stored to the event store and published to the event.

5
00:00:21.850 --> 00:00:28.680
Plus, of course, the publishing of the events to the event pass and the storing the of in the event

6
00:00:28.690 --> 00:00:32.580
store are totally abstracted by the action framework.

7
00:00:32.970 --> 00:00:39.360
That is why it was selected to ensure that we can focus on the business logic of a bank card domain,

8
00:00:40.320 --> 00:00:48.360
navigate to the aggregates package under the command API project, create a new class and call it account

9
00:00:48.360 --> 00:00:49.200
aggregate.

10
00:00:54.070 --> 00:01:01.670
Let's start by annotating it with the aggregate annotation, as well as the no ox constructor annotation.

11
00:01:02.710 --> 00:01:09.520
Again, we will add a field for the aggregate ID and we will annotated with the aggregate identifier

12
00:01:09.520 --> 00:01:16.780
annotation to market as the reference to the account aggregate that X1 uses to know which aggregate

13
00:01:16.780 --> 00:01:19.000
a given command is targeting.

14
00:01:19.780 --> 00:01:22.870
Also, add a field for the account holder ID

15
00:01:27.820 --> 00:01:32.110
and another field for the balance of type double.

16
00:01:36.220 --> 00:01:40.600
The first command that we are going to handle is the open account command.

17
00:01:40.900 --> 00:01:44.580
It is also the command that is going to create the aggregate.

18
00:01:44.620 --> 00:01:49.980
Therefore, we need to handle it on the constructor of the account aggregate.

19
00:01:50.230 --> 00:01:57.970
Go ahead and add the command handler annotation on the constructor of the account, aggregate in the

20
00:01:57.970 --> 00:01:58.890
constructor.

21
00:01:59.290 --> 00:02:02.230
We will pass the open account command.

22
00:02:05.760 --> 00:02:13.080
We will basically handle the open account command in the constructor, therefore let's raise an account

23
00:02:13.080 --> 00:02:14.160
open event.

24
00:02:19.990 --> 00:02:25.630
We can use the bulldozer to initialize the new instance, set the ID.

25
00:02:30.600 --> 00:02:34.920
Also said the account holder, Idy, that we get from the command,

26
00:02:38.940 --> 00:02:41.340
it's also said the account type.

27
00:02:50.140 --> 00:02:59.350
It's also set a creation date, basically just a new date, and it will take daytime now.

28
00:03:07.720 --> 00:03:10.030
And then set the opening bell is.

29
00:03:15.990 --> 00:03:25.290
And then you can invoke Bolt so that it returns the constructed account open event object now to notify

30
00:03:25.290 --> 00:03:28.630
the rest of the application that the bank account was opened.

31
00:03:28.920 --> 00:03:35.210
We need to invoke aggregate life-cycle that apply to publish the account open event to the event.

32
00:03:35.260 --> 00:03:35.670
Yes.

33
00:03:36.450 --> 00:03:41.880
OK, let's create an event saucing handler method for the account opened event.

34
00:03:42.360 --> 00:03:49.230
Start by annotating it with the event sourcing hand annotation so that Exon knows that the annotated

35
00:03:49.230 --> 00:03:50.670
method should be called.

36
00:03:50.940 --> 00:03:57.870
When the aggregate is sourced from its events, all event sourcing handlers together will form the aggregate.

37
00:03:58.230 --> 00:04:02.570
They are responsible for changing the state of the account aggregate.

38
00:04:03.300 --> 00:04:08.370
We will use the account, open the event to change the state of the aggregate.

39
00:04:08.970 --> 00:04:11.520
First we will set the aggregate idy.

40
00:04:12.180 --> 00:04:15.060
Then we will set the account holder idee.

41
00:04:21.630 --> 00:04:29.880
As well as the balance, we will use the opening balance on the account open event to set the initial

42
00:04:29.880 --> 00:04:30.600
balance.

43
00:04:39.150 --> 00:04:47.250
Then let's create another command had a method one for handling the deposit funds command.

44
00:04:53.360 --> 00:05:00.560
First, let's creates an amount variable and then we'll get the amount from the command object, but.

45
00:05:06.780 --> 00:05:15.690
And then we'll use the funds deposited event builder to construct the funds deposited event object first

46
00:05:15.690 --> 00:05:16.980
set the ID,

47
00:05:23.160 --> 00:05:24.990
also set the amount.

48
00:05:30.510 --> 00:05:32.970
Also, go ahead and set the balance.

49
00:05:34.770 --> 00:05:42.060
We will use the current balance of the aggregate and add the amount that we have deposited.

50
00:05:45.540 --> 00:05:53.160
And then you can call the boat to return the constructed funds to positive event and then to publish

51
00:05:53.160 --> 00:06:01.590
the funds, the positive event, the event, plus we can invoke aggregate life-cycle that apply now

52
00:06:01.590 --> 00:06:07.770
for each event sourcing hand the method again at the event sourcing handler annotation.

53
00:06:13.720 --> 00:06:16.720
They need to handle the funds deposited event.

54
00:06:28.160 --> 00:06:34.940
And we will basically alter the balance by adding the amount that was passed with the funds deposited

55
00:06:34.940 --> 00:06:35.510
event.

56
00:06:44.960 --> 00:06:52.100
Now, our third command has limited will be for handling the withdraw funds command.

57
00:07:00.470 --> 00:07:04.510
So, again, let's assign the amount to amount variable

58
00:07:10.510 --> 00:07:17.860
and then we'll add a condition to see if the balance minus the amount is smaller than zero.

59
00:07:26.000 --> 00:07:33.770
And if it is through a new illegal state exception, then add a message such as withdrawal declined

60
00:07:34.220 --> 00:07:35.690
insufficient funds.

61
00:07:51.450 --> 00:07:58.680
But if there is enough money in the account, they will use the funds withdrawn event builder to construct

62
00:07:58.680 --> 00:08:02.220
the Funfest drawn event again, set the ID,

63
00:08:07.770 --> 00:08:08.970
then the amount.

64
00:08:16.420 --> 00:08:23.110
Also set the balance, take the balance on the aggregate minus the withdrawal amount.

65
00:08:30.580 --> 00:08:38.380
And then to publish the fans with an event in aggregate life-cycle that apply, then we are going to

66
00:08:38.380 --> 00:08:42.520
add an event sourcing handler method for the fans with drawn event.

67
00:08:49.850 --> 00:08:55.780
We are basically going to use the funds withdrawn event to alter the state of the aggregate again,

68
00:08:56.440 --> 00:09:01.720
this time we will update the balance by deducting the withdrawal amount.

69
00:09:13.960 --> 00:09:19.570
And then our final command handling method will be one for handling the close account command.

70
00:09:34.240 --> 00:09:42.610
Again, we will use the account closed event builder to construct the account closed event, set the

71
00:09:42.610 --> 00:09:50.500
ID and then invoke Bolt to return the constructed account closed event again, aggregate life-cycle

72
00:09:50.500 --> 00:09:55.830
that apply to publish the closed account command to the event pass.

73
00:09:56.380 --> 00:10:02.890
And then finally, let's add an event sourcing handler method for the account closed the event

74
00:10:06.760 --> 00:10:07.850
when the account closed.

75
00:10:07.850 --> 00:10:09.190
The event is handled.

76
00:10:09.670 --> 00:10:14.710
We will actually use it to mark the aggregate as deleted.

77
00:10:18.330 --> 00:10:24.540
By invoking the aggregate life cycle that marked the lead method instead of the applied method.

78
00:10:28.180 --> 00:10:32.500
So now we have completed the implementation of count aggregate.

79
00:10:44.190 --> 00:10:45.690
Let's build our project.

80
00:10:58.260 --> 00:11:01.260
And everything should build successfully.
