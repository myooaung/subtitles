WEBVTT
1
00:00:00.240 --> 00:00:07.710
In this lecture, we are going to create two important configuration classes, including a Web security

2
00:00:07.710 --> 00:00:11.850
config class and an author server config class.

3
00:00:12.270 --> 00:00:18.570
Collectively, they form the greatest part of the authorization server and ensures that the correct

4
00:00:18.570 --> 00:00:26.190
user authentication mechanisms are applied and that the Jason Web token is generated using the specified

5
00:00:26.190 --> 00:00:29.490
token generation and validation parameters.

6
00:00:29.970 --> 00:00:38.130
Navigate to the configuration package and create a new class and call it web security config.

7
00:00:41.970 --> 00:00:50.250
Let's add the configuration annotation to mark the Web security config clause as a configuration class,

8
00:00:50.820 --> 00:00:58.500
then go ahead and add the enable web security annotation that will allow us to customize the Web security

9
00:00:58.500 --> 00:01:08.220
config for our OS 2.0 authorization server also at the enable global message security annotation.

10
00:01:13.480 --> 00:01:17.080
And said pre post enabled to true.

11
00:01:22.200 --> 00:01:31.890
Now, let's extend Web security configure adapter that will allow us to override a number of methods.

12
00:01:33.440 --> 00:01:41.240
We are going to use auto wired to inject our users service dependency and let's call our user service

13
00:01:41.240 --> 00:01:45.050
dependency custom details service.

14
00:01:47.270 --> 00:01:53.780
Now let's create a beam that returns the password in code.

15
00:01:54.500 --> 00:02:01.070
Now, importantly, we need to make sure that this encoder that we return here is exactly the same as

16
00:02:01.070 --> 00:02:04.270
the one we used to hash user passwords.

17
00:02:04.640 --> 00:02:10.840
So create a new instance of secret password encoded with exactly the same strength, which is strength

18
00:02:10.850 --> 00:02:11.540
12.

19
00:02:14.300 --> 00:02:22.460
Now we are going to override a number of overloaded configure methods first, which override the configure

20
00:02:22.460 --> 00:02:26.780
method that takes in the authentication Manager Baldor.

21
00:02:29.450 --> 00:02:38.870
Go ahead and add the auto wad annotation, and then in this method, we are basically going to tell

22
00:02:38.870 --> 00:02:47.060
the authorisation service to use our custom details service or use the service during authentication,

23
00:02:47.570 --> 00:02:54.470
basically telling it to use our user data that is created and managed by our user MICRA services.

24
00:03:00.470 --> 00:03:07.940
Now, let's override another configure method, one that takes in HTP security.

25
00:03:10.940 --> 00:03:16.580
Here we are basically going to specify which request should be authorized.

26
00:03:23.750 --> 00:03:30.530
Let's say any request should be authenticated and.

27
00:03:34.220 --> 00:03:35.600
Session management.

28
00:03:39.630 --> 00:03:43.200
And they said that sation create policy.

29
00:03:45.560 --> 00:03:54.200
And session creation policy that never said basically the reason we are doing this is to open up the

30
00:03:54.470 --> 00:04:02.270
north, to put authorisation server, to take in requests because it is actually responsible for creating

31
00:04:02.270 --> 00:04:11.180
the JWT token and not for expecting it to override another configure method that takes in wave security.

32
00:04:12.020 --> 00:04:16.730
And then we are going to say Web dot ignoring.

33
00:04:23.850 --> 00:04:28.860
OK, now let's override the authentication manager being.

34
00:04:33.170 --> 00:04:35.390
Also at the beon annotation.

35
00:04:40.070 --> 00:04:47.750
Now let's create another beam that turns data exis object authentication provider.

36
00:04:50.060 --> 00:04:53.000
Call it kit authentication provider.

37
00:04:58.770 --> 00:05:04.230
And then here we need to instantiate a new D.A. authentication provider.

38
00:05:10.990 --> 00:05:19.060
And then we are going to set the user detail service, which is our user detail service that we call

39
00:05:19.390 --> 00:05:21.040
custom details service.

40
00:05:27.910 --> 00:05:35.740
And that is so that it can use our password encoder, so said password in code, and then that will

41
00:05:35.740 --> 00:05:38.980
be applied to our user data.

42
00:05:39.140 --> 00:05:46.550
And that's why it was important to make sure that we use exactly the same strength for decrypt encoder.

43
00:05:46.930 --> 00:05:51.220
Okay, so let's create a second configuration class.

44
00:05:51.700 --> 00:06:01.420
The author server config class start by annotating it with the configuration annotation again and then

45
00:06:01.420 --> 00:06:07.360
we are going to extend authorization server configure adapter.

46
00:06:07.570 --> 00:06:13.050
Now this class is basically going to be responsible for generating the Jason Web token.

47
00:06:13.420 --> 00:06:18.670
So let's add a few fields that we are going to need for the token generation.

48
00:06:19.090 --> 00:06:24.460
Start with the client ID, then we also need a client secret

49
00:06:28.780 --> 00:06:31.180
as well as a signing key

50
00:06:36.040 --> 00:06:47.440
at a private integer field for the token validity in seconds and then another field for the refresh

51
00:06:47.440 --> 00:06:51.220
token validity field also in seconds.

52
00:06:52.020 --> 00:06:58.350
OK, so let's go ahead and open up our application or properties file.

53
00:06:59.590 --> 00:07:07.570
We can go ahead and copy the contents of the application or properties file of the User Command API

54
00:07:09.550 --> 00:07:10.440
pasted there.

55
00:07:10.960 --> 00:07:19.270
They change our port to 884 and then the Mongar divi settings stays the same.

56
00:07:19.990 --> 00:07:35.380
So let's add security dot oath to that client hyphen ID and then let's set that to Spring Bank client.

57
00:07:36.730 --> 00:07:37.210
OK.

58
00:07:43.120 --> 00:07:55.390
Now, go ahead and copy everything up until the client I.D. and the client hyphen secret and said that

59
00:07:55.390 --> 00:08:01.480
to spring bank secret, now please use more complex values during production.

60
00:08:08.970 --> 00:08:13.500
And then for a signing key, let's use Spring Bank signing key.

61
00:08:17.670 --> 00:08:20.520
And then for token validity.

62
00:08:24.260 --> 00:08:36.050
In seconds, they say that it's 300 seconds, which is five minutes, and then I refresh token validity

63
00:08:36.050 --> 00:08:37.160
in seconds.

64
00:08:37.580 --> 00:08:38.600
Copy that.

65
00:08:39.950 --> 00:08:44.110
It's make that 1500 seconds.

66
00:08:44.850 --> 00:08:45.260
OK.

67
00:08:57.180 --> 00:09:04.970
Now, to tell the spring framework to use those values, we can add the value, annotation and the dollar

68
00:09:05.520 --> 00:09:10.680
and then in curly brackets based that configuration field name.

69
00:09:19.020 --> 00:09:21.210
Do the same for the client secret.

70
00:09:23.050 --> 00:09:31.540
OK, just change the idea to secretly and then for signing, he will do simular.

71
00:09:34.370 --> 00:09:37.100
Copy signing Keyport the.

72
00:09:41.050 --> 00:09:51.610
OK, and then for token validity, the same copy that put the.

73
00:09:54.590 --> 00:09:55.100
OK.

74
00:10:03.420 --> 00:10:09.910
And finally, it's copy for Refresh Tolkan validity and ad refresh.

75
00:10:09.930 --> 00:10:12.930
Life and Liberty in seconds.

76
00:10:13.110 --> 00:10:19.180
OK, so now our config values will be mapped to our fields.

77
00:10:19.530 --> 00:10:23.680
We now need to add a field for the authentication manager.

78
00:10:24.600 --> 00:10:31.620
You can start by adding the Ottawa annotation, but also add a qualifier.

79
00:10:31.620 --> 00:10:39.690
Annotation now or toward the loan isn't always enough to disambiguate dependencies, but you can wire

80
00:10:39.690 --> 00:10:48.390
more accurately using the qualifier annotation and then set the name of the qualifier B, which is authentication

81
00:10:48.390 --> 00:10:49.230
manager PIN.

82
00:10:49.830 --> 00:10:53.810
And then let's create an authentication manager field.

83
00:10:54.550 --> 00:11:05.580
Okay, let's create a bean that returns JWT X's token convert, the JWT access token converter is a

84
00:11:05.580 --> 00:11:12.670
helper that translates between JWT encoded token values and OS authentication information.

85
00:11:13.290 --> 00:11:17.400
It also acts as a token enhancer with tokens are granted.

86
00:11:18.210 --> 00:11:22.460
So instantiate a new JWT access token to.

87
00:11:23.440 --> 00:11:30.610
And then we are going to set a signing key, which is basically the signing key that we are getting

88
00:11:31.030 --> 00:11:39.100
from our signing key field, which is coming from our application or property configuration file, and

89
00:11:39.100 --> 00:11:41.380
then go ahead and return convertor.

90
00:11:48.440 --> 00:11:54.350
We will create another being that returns JWT token store.

91
00:11:55.950 --> 00:12:06.630
And the token store is going to return a new instance of J w t token store.

92
00:12:10.190 --> 00:12:15.440
And then pass in the token convert to being.

93
00:12:16.970 --> 00:12:25.460
OK, and then we are going to override a configure method that takes in authorisation server endpoints

94
00:12:25.460 --> 00:12:26.450
configure.

95
00:12:28.360 --> 00:12:34.600
And change that to end points dot authentication manager.

96
00:12:35.800 --> 00:12:45.100
Pause in the authentication manager field and they dot tokens to passing the tokens to being the.

97
00:12:47.890 --> 00:12:54.160
And then dot access token converter box in the token convert to being the.

98
00:12:55.830 --> 00:13:08.290
OK, then override another configure method that takes an authorization server security configure.

99
00:13:12.340 --> 00:13:14.620
Change that to security

100
00:13:17.050 --> 00:13:24.250
dot tolkin key axis and then set it to permit all.

101
00:13:28.600 --> 00:13:36.100
And they don't check token access, said that to is authenticated.

102
00:13:40.740 --> 00:13:50.640
OK, and then override yet another configure method that takes in the client details service configure.

103
00:13:59.860 --> 00:14:04.660
And change that to clients start in memory.

104
00:14:05.950 --> 00:14:19.810
Start with client and sit the client ID field that secret, say, new secret password encoder again,

105
00:14:19.810 --> 00:14:25.090
make sure it's straight 12 dot in code, pass the client secret.

106
00:14:28.900 --> 00:14:34.120
The inside dot scope's say, read and write.

107
00:14:39.270 --> 00:14:42.300
Then not authorized grant types.

108
00:14:44.150 --> 00:14:54.770
Let's use Poshard Grant, comma, refresh toked, that is the two grant types that we want to support

109
00:14:56.570 --> 00:15:06.470
and dot access token validity in seconds, passing the token validity field that comes from config and

110
00:15:06.470 --> 00:15:13.220
passing the refresh token validity that also comes from our configuration files basically are applications

111
00:15:13.220 --> 00:15:14.390
that properties file.

112
00:15:15.080 --> 00:15:17.270
Let's go ahead and build our project.

113
00:15:23.050 --> 00:15:26.680
And everything should build successfully.

114
00:15:28.650 --> 00:15:38.490
OK, so now go ahead and run or debug your oath 2.0 authorization server.

115
00:15:40.170 --> 00:15:44.490
They can see that it is raining on Port 884.

116
00:15:45.630 --> 00:15:53.070
Now, before we can make a request or to point out authorization server, we need to get the base64

117
00:15:53.070 --> 00:15:57.540
encoding of the client I.D. and client secret combination.

118
00:15:58.170 --> 00:16:04.060
So copy Springburn client Kolon Spring Bank secret.

119
00:16:04.080 --> 00:16:08.190
Now I'm using base64 encoded OK to do the encoding.

120
00:16:11.350 --> 00:16:17.560
So copy the base64 encoded client, I declined secret combination.

121
00:16:20.320 --> 00:16:26.650
And then let's make sure that we have a breakpoint in late user by user name and our user service.

122
00:16:29.630 --> 00:16:41.480
Change the HDB verb to post and then your URL htp forward slash localhost 884, forward slash both forward

123
00:16:41.480 --> 00:16:42.830
slash toked.

124
00:16:43.580 --> 00:16:45.770
OK, that's our request urai.

125
00:16:46.280 --> 00:16:50.840
And then add a basic authorization header with the key authorization.

126
00:16:51.320 --> 00:16:53.210
Fairly basic space.

127
00:16:53.480 --> 00:16:58.670
The Base 64 encoded client ID client secret combination.

128
00:17:02.930 --> 00:17:09.700
Choose the form your are encoded body type for our grant type, let's use password.

129
00:17:10.390 --> 00:17:19.340
Now remember in our auth server config that we specified that our grant types, that we support this

130
00:17:19.340 --> 00:17:21.230
password and refresh token.

131
00:17:24.010 --> 00:17:32.020
And then for the username, we are going to use John D. that's John Doe's username, if you recall correctly,

132
00:17:32.500 --> 00:17:41.200
and for the password we made it password one where the P is capital, the A's and ET and the O is a

133
00:17:41.200 --> 00:17:42.880
zero, OK?

134
00:17:45.340 --> 00:17:49.720
And they hits our breakpoint and lead user by user name.

135
00:17:50.830 --> 00:17:55.510
And there you can see that it returns John Doe's user record.

136
00:17:56.680 --> 00:18:02.770
OK, you can see the pass is encrypted there and they are the rolls, OK?

137
00:18:02.890 --> 00:18:07.180
And then it will actually authenticate the user.

138
00:18:09.940 --> 00:18:19.060
And generate a JWT, this the access token and the type is a spirit, can we have a refresh token as

139
00:18:19.060 --> 00:18:24.060
well that expires and 299 seconds retried scope.

140
00:18:24.070 --> 00:18:26.140
And there's the jati I.

141
00:18:27.950 --> 00:18:35.510
OK, and let's not try and use JND.

142
00:18:39.090 --> 00:18:42.700
And her password was posted to like.

143
00:18:46.880 --> 00:18:56.190
Again, there you'll see that it returns Jane Doe's user record with all of the details user name.

144
00:18:57.020 --> 00:19:05.500
She's got repressively, just like you can see they and their returns at JWT for her as well.
