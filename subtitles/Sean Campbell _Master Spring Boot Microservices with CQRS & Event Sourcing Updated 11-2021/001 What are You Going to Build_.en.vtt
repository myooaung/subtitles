WEBVTT
1
00:00:00.150 --> 00:00:04.670
Before we get started, let me show you what you will build in this course.

2
00:00:05.070 --> 00:00:11.160
Here is the implementation and deployment viewpoint of the architecture of everything that you are going

3
00:00:11.160 --> 00:00:12.390
to build in this course.

4
00:00:12.840 --> 00:00:20.210
You're going to build for micro separated into two domains, a user domain and a bank account domain.

5
00:00:20.490 --> 00:00:27.990
The micro services of each of these domains will be segregated into command and query APIs as prescribed

6
00:00:27.990 --> 00:00:29.160
by Securus.

7
00:00:29.550 --> 00:00:36.390
You will create a user command API and a user query API and a bank account command and a bank account

8
00:00:36.390 --> 00:00:37.430
query API.

9
00:00:37.770 --> 00:00:44.970
You'll also create your own OS 2.0 authorization service and an API gateway with Spring Cloud Gateway

10
00:00:45.240 --> 00:00:49.530
that'll provide a unified entry point to your backend micro services.

11
00:00:49.710 --> 00:00:54.110
Now this might look a bit complex or confusing, but let me take you through it.

12
00:00:54.120 --> 00:00:58.130
If you do not understand what I'm talking about at this stage, do not worry.

13
00:00:58.230 --> 00:01:04.050
Although this is primarily a hands on coding course, we will start with just enough theory in this

14
00:01:04.050 --> 00:01:09.000
section to ensure that you gain a good understanding of all the important concepts.

15
00:01:09.480 --> 00:01:15.210
Let's assume that this yellow dot represents a request that is made from a client application.

16
00:01:15.360 --> 00:01:18.810
Let's say that a client wants to register a new user.

17
00:01:18.990 --> 00:01:24.120
The client application will make an HTTP request via the API gateway.

18
00:01:24.480 --> 00:01:30.060
The API gateway will receive the request and routed to the User Command API.

19
00:01:30.180 --> 00:01:34.470
The user Camonte API will interpret this request as a command.

20
00:01:34.560 --> 00:01:41.430
It will handle the command and once handled, it will raise an event such as user registered event.

21
00:01:41.910 --> 00:01:47.340
Then it will store to the event store, which is also known as the right database, and then it will

22
00:01:47.340 --> 00:01:49.230
publish the event to the event.

23
00:01:49.230 --> 00:01:54.480
Pass the user query API will then subscribe to the user register event.

24
00:01:54.690 --> 00:01:55.710
We need to take that.

25
00:01:55.710 --> 00:02:00.000
A new event of the specified type has been published to the event pass.

26
00:02:00.330 --> 00:02:05.560
It will handle the event and create a new record in the user database.

27
00:02:05.880 --> 00:02:13.080
Notice that both the event store and the user read databases are Mongo DB databases, but importantly,

28
00:02:13.080 --> 00:02:19.530
they are completely separate from each other and can be hosted on separate or on premise server or cloud

29
00:02:19.530 --> 00:02:20.440
infrastructure.

30
00:02:20.880 --> 00:02:28.770
Notice in the bank account domain we also have a Mongo DB event store, but for our database we have

31
00:02:28.770 --> 00:02:35.180
a MySQL database and that is to prove that these databases are totally decoupled from each other.

32
00:02:35.310 --> 00:02:41.370
An important thing to note is that there is a big difference in the way that data is stored in the event

33
00:02:41.370 --> 00:02:41.900
store.

34
00:02:42.330 --> 00:02:44.070
This is the Rete database.

35
00:02:44.610 --> 00:02:47.940
Events are stored as a sequence of immutable events.

36
00:02:48.120 --> 00:02:55.410
A new record or document is created for each event and these event records or documents are never modified.

37
00:02:55.800 --> 00:02:57.780
See it as an audit log.

38
00:02:57.810 --> 00:03:02.100
The database, on the other hand, contains the actual user record.

39
00:03:02.520 --> 00:03:09.210
In this use case, a user registry event is used to create the initial user record, a user updated

40
00:03:09.210 --> 00:03:14.940
event to modify the user record any user deleted event to delete a user record.

41
00:03:14.970 --> 00:03:22.470
But even if a user record is deleted from the database, the event that caused its deletion will always

42
00:03:22.470 --> 00:03:24.090
remain in the event store.

43
00:03:24.300 --> 00:03:30.980
This makes securest an event sourcing atomic and gives you the option to replay your event store.

44
00:03:31.200 --> 00:03:33.750
Now you might say, whoa, that's crazy.

45
00:03:34.080 --> 00:03:35.280
How can this work?

46
00:03:35.550 --> 00:03:41.370
So are you telling me that the User Command API is going to be responsible for supplying information

47
00:03:41.370 --> 00:03:45.750
to the user query API with the actual production records live?

48
00:03:45.900 --> 00:03:48.450
Yes, that is exactly what I'm saying.

49
00:03:48.570 --> 00:03:52.710
MICRA services are application driven and not database driven.

50
00:03:52.710 --> 00:03:58.740
And that is why we named our events in the past particle that since the events sourcing makes these

51
00:03:58.740 --> 00:04:01.470
transactions atomic, we can trust it.

52
00:04:01.920 --> 00:04:04.140
But you might say, hang on for a second.

53
00:04:04.320 --> 00:04:06.720
What if the user query API fails?

54
00:04:06.990 --> 00:04:11.100
How will that user database be populated and updated?

55
00:04:11.250 --> 00:04:17.520
And the simple answer is, without the user query API, you will not be able to retrieve data from the

56
00:04:17.520 --> 00:04:18.900
user database.

57
00:04:19.290 --> 00:04:22.830
It has data sovereignty over the user database.

58
00:04:23.160 --> 00:04:27.090
It is the only service allowed to access the user records.

59
00:04:27.270 --> 00:04:32.000
Therefore, if it goes down, the events will still be safe in the event pass.

60
00:04:32.070 --> 00:04:35.310
That's when the user query API starts up again.

61
00:04:35.550 --> 00:04:41.640
It will consume the events that are waiting in the queue and update the user records accordingly in

62
00:04:41.640 --> 00:04:43.380
very rare circumstances.

63
00:04:43.380 --> 00:04:48.930
If something goes wrong with the event, but the events will be safe in the event store and it can be

64
00:04:48.930 --> 00:04:55.830
replayed and republished to the event pass because events are first stored in the event store and only

65
00:04:55.830 --> 00:04:59.520
if persisted successfully will it be published to the event.

66
00:04:59.640 --> 00:05:06.450
US failing to assist the event to the events that would be reported back to the client application when

67
00:05:06.450 --> 00:05:09.390
a request was made to the User Command API.

68
00:05:10.460 --> 00:05:17.060
OK, so if the client application wants to retrieve the user data, it will again make a request via

69
00:05:17.060 --> 00:05:18.410
the API gateway.

70
00:05:18.800 --> 00:05:25.760
The HTTP request will be routed to the user query API, which will handle the query and retrieve the

71
00:05:25.760 --> 00:05:30.770
user record via a repository and respond back to the client application.

72
00:05:30.960 --> 00:05:34.130
The same scenario is valid for the bank account domain.

73
00:05:34.280 --> 00:05:39.200
Therefore, I will not go into detail regarding the bank account domain at this moment.

74
00:05:39.380 --> 00:05:44.560
The same principle as explained in the user domain are relevant for the bank account domain.

75
00:05:44.810 --> 00:05:51.500
So I hope that this gets you excited to start building your springboard micro services that can apply

76
00:05:51.620 --> 00:05:56.420
to securities and eventually I hope that you enjoy this course.
