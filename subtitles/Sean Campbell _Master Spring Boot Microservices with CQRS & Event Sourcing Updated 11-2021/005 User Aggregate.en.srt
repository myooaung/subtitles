1
00:00:00,390 --> 00:00:04,720
If you feel a bit confused at this point in time, do not despair.

2
00:00:05,070 --> 00:00:08,360
This is the lecture where everything will start to make sense.

3
00:00:08,820 --> 00:00:15,000
The aggregate is probably the most important domain driven design artifact in this lecture.

4
00:00:15,300 --> 00:00:21,570
We are going to create a user aggregate where the user commands will be handled and where the user events

5
00:00:21,570 --> 00:00:24,490
will be raised once the commands have been actioned.

6
00:00:24,990 --> 00:00:31,560
If you go to the aggregates package under the User Command API project, let's create a new class and

7
00:00:31,560 --> 00:00:33,810
call it user aggregate.

8
00:00:36,680 --> 00:00:42,500
The first thing that we need to do is to take the user aggregate class with the aggregate annotation,

9
00:00:42,500 --> 00:00:47,360
to tell the Xen framework that this is an aggregate for the user command API.

10
00:00:47,690 --> 00:00:49,580
Now let's create two private fields.

11
00:00:49,580 --> 00:00:55,520
Firstly, and I feel that we will annotate with the aggregate identify annotation.

12
00:00:55,880 --> 00:01:02,480
This annotation marks the idee field as the reference point to the user aggregate object that X1 uses

13
00:01:02,480 --> 00:01:06,050
to know which aggregate a given command is targeting.

14
00:01:06,210 --> 00:01:12,650
Remember, we mock the ideas of our command objects with at Target Aggregate Identifier.

15
00:01:13,040 --> 00:01:16,250
Secondly, let's add a user field to the aggregate.

16
00:01:22,320 --> 00:01:28,800
Now, Exxon requires that each aggregate object contains two constructor's one, taking in no arguments

17
00:01:28,830 --> 00:01:33,780
or parameters and another that takes in a command object as a parameter.

18
00:01:33,900 --> 00:01:36,290
This is the command that creates the aggregate.

19
00:01:36,300 --> 00:01:39,450
In our case, it will be the registered user command.

20
00:01:39,480 --> 00:01:43,440
Now let's create a constructor that takes in the registered user Camonte.

21
00:01:43,450 --> 00:01:50,370
Importantly, we need to mark the constructor with the command handler annotation to tell Xen that this

22
00:01:50,370 --> 00:01:52,440
is a command handlock constructor.

23
00:01:57,010 --> 00:02:04,330
Then we can add Camonte handling methods for other user commands, so let's add a command handler method,

24
00:02:04,330 --> 00:02:09,220
call it handle, that is going to take in the update, use a command.

25
00:02:15,180 --> 00:02:22,110
And then we also need to add another command handling method that will handle the remove user command.

26
00:02:22,980 --> 00:02:26,890
Now, once the commands are handled, events will be raised.

27
00:02:26,910 --> 00:02:30,860
So we need to add an event sourcing handler for each of these commands.

28
00:02:31,140 --> 00:02:37,020
So let's start with an event sourcing handler method for the user registry of it.

29
00:02:37,440 --> 00:02:43,470
Now, the event sourcing hand annotation is what tells the Exxon framework that the annotated function

30
00:02:43,470 --> 00:02:49,050
should be called when the aggregate is sourced from the events, as all the events sourcing handlers

31
00:02:49,050 --> 00:02:50,970
combined will form the aggregate.

32
00:02:51,360 --> 00:02:54,200
This is where all the state changes are going to happen.

33
00:02:54,390 --> 00:03:00,500
So let's add another event sourcing handler method that is going to take in the user updated event.

34
00:03:01,170 --> 00:03:06,000
And then finally, let's add an event sourcing handler method for handling the user.

35
00:03:06,000 --> 00:03:07,020
Remove the event.

36
00:03:18,960 --> 00:03:26,370
OK, now let's create a new variable and call it new user, and we can get it from registered use it

37
00:03:26,370 --> 00:03:27,000
command.

38
00:03:29,990 --> 00:03:37,430
So now let's set the user ID and we can use the command ID to set our user ID.

39
00:03:40,730 --> 00:03:45,480
And then we can go ahead and obtain the password from the command.

40
00:03:45,500 --> 00:03:53,770
So this is the plain text password that will be submitted with an HTP request to our controller method,

41
00:03:53,810 --> 00:03:55,630
which you will see in later lectures.

42
00:03:56,150 --> 00:03:58,130
So we need to hash this password.

43
00:03:58,130 --> 00:04:02,020
We can't save it into the database as plain text.

44
00:04:02,930 --> 00:04:12,920
So let's go ahead and create a new package in our User Command API project and call it security and

45
00:04:12,920 --> 00:04:20,150
then go ahead and create a new interface and call the interface password encoder.

46
00:04:25,850 --> 00:04:32,630
And we will define any a single message that will return a string, let's call it hashed password,

47
00:04:33,320 --> 00:04:37,340
and then it will take in a string parameter that we will call password.

48
00:04:41,690 --> 00:04:48,710
Let's implement the interface and intelligence allows us to automatically create the implementation

49
00:04:48,710 --> 00:04:49,280
class.

50
00:04:56,230 --> 00:05:02,590
Now, importantly, annotate the class with the service annotation, and then we are going to implement

51
00:05:02,590 --> 00:05:07,810
the hash passwd method, so create a new variable, call it encoder.

52
00:05:10,790 --> 00:05:19,760
And then instantiate a new B creped password in code, for instance, and set the strength to 12 and

53
00:05:19,760 --> 00:05:22,520
then create a new variable hash password

54
00:05:26,930 --> 00:05:32,690
and then say encoded dot in code and then pass in the password

55
00:05:36,440 --> 00:05:39,710
and then we will return the hashed password.

56
00:05:41,060 --> 00:05:44,410
OK, now let's go back to user aggregate.

57
00:05:45,900 --> 00:05:52,040
OK, so let's create a new private final field for our password in at.

58
00:05:57,930 --> 00:06:05,370
And then in our constructor, that takes in no arguments, let's instantiate a new password in the implementation.

59
00:06:18,400 --> 00:06:25,900
And then for the hashed password, let's call password encoded or hash password and pass in the password.

60
00:06:25,920 --> 00:06:29,470
Now, importantly, this is also a constructor.

61
00:06:29,470 --> 00:06:36,850
So since it's an overloaded constructor, we will also have to instantiate the password encoded implementation

62
00:06:36,850 --> 00:06:38,170
in this constructor.

63
00:06:38,830 --> 00:06:48,520
OK, so let's go ahead and replace the plaintext password with the hash password and then we need to

64
00:06:48,520 --> 00:06:53,980
raise an event so we will instantiate a new event using a fluid builder.

65
00:06:54,130 --> 00:06:56,610
Remember, we added the boulder annotation.

66
00:06:56,620 --> 00:07:01,150
So let's set the idea first from using command dot gate ID.

67
00:07:03,550 --> 00:07:07,870
And then the user and then passing the new user.

68
00:07:09,750 --> 00:07:18,120
And then you can invoke dart board, which return the constructed user registered event, if you invoke

69
00:07:18,120 --> 00:07:24,540
aggregate life-cycle the reply, it will store the event in the event store and publish it into the

70
00:07:24,540 --> 00:07:25,320
event bus.

71
00:07:28,320 --> 00:07:36,150
So now on the events sourcing Handyside, we will set the aggregate idy equal to the event ID, which

72
00:07:36,150 --> 00:07:37,950
comes all the way from the command.

73
00:07:40,670 --> 00:07:46,370
Then as well as the user filled to the user that we get from the event.

74
00:07:52,580 --> 00:08:01,280
OK, so now we can implement the update user command handler, create a new variable and call it updated

75
00:08:01,280 --> 00:08:08,210
use, it will look similar to the registered user command handler can get the user from the command

76
00:08:09,440 --> 00:08:14,300
and as well as set the user ID using the command ID.

77
00:08:17,160 --> 00:08:22,350
And then we will also get the password from the updated user's account.

78
00:08:27,840 --> 00:08:35,700
And go ahead and copy the line of code where we are getting the hashed password, then again can replace

79
00:08:35,730 --> 00:08:44,010
the normal plaintext password with the hash password, and this time we will raise a user activated

80
00:08:44,010 --> 00:08:53,080
event and we will again use a fluent builder to construct our updated user event object this time.

81
00:08:53,100 --> 00:09:00,980
Importantly, we will not use the command ID, but we will generate a random idea using you ID idiot

82
00:09:01,020 --> 00:09:08,160
random eweida to string and then set the user with the updated user.

83
00:09:11,780 --> 00:09:19,280
And they invoked God both to return the constructed event object and again aggregate life-cycle, the

84
00:09:19,280 --> 00:09:26,140
reply will store the user updated event in the event store and publish it in the event bus.

85
00:09:26,480 --> 00:09:32,720
And this time we will just update the user field of the aggregate since the correct aggregate instance

86
00:09:32,720 --> 00:09:36,410
was already selected when the update user command was handled.

87
00:09:36,500 --> 00:09:42,950
Remember, this is where the target aggregate identifier annotation on the command object comes into

88
00:09:42,950 --> 00:09:43,470
play.

89
00:09:43,490 --> 00:09:50,510
And then finally, for the remove user command handler, we will simply instantiate a new user, remove

90
00:09:50,510 --> 00:09:56,630
the event, we can set the event ID using the command ID

91
00:09:59,660 --> 00:10:04,790
and then we can invoke aggregate life-cycle to reply and pass the event.

92
00:10:05,240 --> 00:10:10,440
And again, the event will be stored in the event store and published to the event bus.

93
00:10:10,550 --> 00:10:14,720
And this time on the event saucing Handyside for the user removed event.

94
00:10:14,810 --> 00:10:21,770
We will invoke aggregate life-cycle that mark it to delete the actual aggregate.

95
00:10:22,400 --> 00:10:25,630
That concludes the implementation of our user aggregate.

96
00:10:25,940 --> 00:10:32,360
So let's open the terminal and build our user MICRA services using M.V. and clean install.

97
00:10:34,420 --> 00:10:37,240
And everything should build successfully.
