WEBVTT
1
00:00:00.450 --> 00:00:07.710
Most software engineers will argue that Microsoft services are hard, not even to mention the complexity

2
00:00:07.710 --> 00:00:14.520
that comes with the adoption of design patterns such as Securus, event sourcing and domain driven design.

3
00:00:15.030 --> 00:00:21.520
However, there are a number of ways in which even the most complex of architectures can be simplified.

4
00:00:22.020 --> 00:00:27.400
Two of the most effective measures include abstraction and separation of concerns.

5
00:00:27.870 --> 00:00:34.530
That is why we are going to utilize the Exxon platform in this course to simplify the implementation

6
00:00:34.530 --> 00:00:36.090
of our MICRA services.

7
00:00:36.930 --> 00:00:42.330
Exxon is a platform that consists of the Exxon framework and the Exxon server.

8
00:00:42.690 --> 00:00:49.050
The Exxon framework is a Java framework that is used to simplify the building of event driven micro

9
00:00:49.050 --> 00:00:54.770
services that are based in securest event sourcing and domain driven design.

10
00:00:55.260 --> 00:01:01.320
One of the most important aspects of the Exxon framework that differentiates it from other frameworks

11
00:01:01.710 --> 00:01:04.080
is the abstraction that it provides.

12
00:01:04.500 --> 00:01:11.370
More specifically, the Exxon framework has been designed to separate business logic from infrastructural

13
00:01:11.370 --> 00:01:13.440
concerns with Exxon.

14
00:01:13.800 --> 00:01:19.620
Business logic is implemented in classes that interact with the different message buses.

15
00:01:20.070 --> 00:01:26.520
Exxon framework provides a number of building blocks to assist developers in implementing this logic,

16
00:01:26.730 --> 00:01:31.130
such as aggregates, command handlers and event handlers.

17
00:01:31.740 --> 00:01:39.060
The Exxon server, on the other hand, is an out of the box message router and events store that requires

18
00:01:39.060 --> 00:01:41.160
no specific configuration.

19
00:01:41.760 --> 00:01:45.200
This means that Exxon already did the hard work for us.

20
00:01:45.660 --> 00:01:50.890
We do not need to create our own message, but nor set up our own event store.

21
00:01:51.360 --> 00:01:54.690
This is all part of a standard Exxon installation.

22
00:01:55.170 --> 00:01:59.730
Exxon does, however, provide you with a degree of customization.

23
00:02:00.150 --> 00:02:07.770
For example, in the next section we will configure Exxon to use the Monga DB event storage engine as

24
00:02:07.770 --> 00:02:11.340
opposed to the out of the box embedded event store.

25
00:02:12.180 --> 00:02:19.320
Before we can start to set up a micro service project and start coding, we need to have a clear understanding

26
00:02:19.320 --> 00:02:26.140
of the following concepts that Exxon takes from the domain driven design and securest design patterns.

27
00:02:26.580 --> 00:02:29.250
The first concept is a domain model.

28
00:02:29.550 --> 00:02:36.240
A domain model describes certain aspects of the system domain that can be used to solve problems within

29
00:02:36.240 --> 00:02:37.200
that domain.

30
00:02:37.620 --> 00:02:44.550
And then probably the most important concept is that of an aggregate, an aggregate is an entity or

31
00:02:44.550 --> 00:02:51.420
group of entities that is always kept in a consistent state within a single asset transaction.

32
00:02:51.810 --> 00:02:58.230
The aggregate root is the entity within the aggregate that is responsible for maintaining this consistent

33
00:02:58.230 --> 00:02:58.810
state.

34
00:02:59.250 --> 00:03:06.120
This makes the aggregate the prime building block for implementing a common model in any securities

35
00:03:06.120 --> 00:03:10.080
based application a more formal definition.

36
00:03:10.320 --> 00:03:15.390
According to Eric Evans, the author of the book Domain Driven Design.

37
00:03:15.390 --> 00:03:22.470
Tackling Complexity in the Heart of software in aggregate is a cluster of associated objects that are

38
00:03:22.470 --> 00:03:26.040
treated as a unit for the purpose of data changes.

39
00:03:26.430 --> 00:03:32.550
External references are restricted to one member of the aggregate designated as the root.

40
00:03:32.940 --> 00:03:37.560
A set of consistency rules applies within the aggregates boundaries.

41
00:03:38.220 --> 00:03:45.540
Now let's look at some of the messaging concepts I command is a combination of expressed intent which

42
00:03:45.540 --> 00:03:51.480
describes what you want to be done, as well as the information required to undertake action.

43
00:03:51.480 --> 00:03:52.950
Based on that intent.

44
00:03:53.460 --> 00:04:01.050
Commands are named with a verb in the imperative mood, for example, register user command or deposit

45
00:04:01.050 --> 00:04:03.870
funds command events.

46
00:04:03.870 --> 00:04:10.440
Another messaging concept are objects that describe something that has occurred in the application.

47
00:04:10.830 --> 00:04:13.710
A typical source of events is the aggregate.

48
00:04:14.010 --> 00:04:20.580
When something important has occurred within the aggregate, it will raise and event events are always

49
00:04:20.580 --> 00:04:22.740
named with the past particle verb.

50
00:04:23.010 --> 00:04:28.500
For example, use a registered event or funds deposited event.

51
00:04:29.490 --> 00:04:38.040
The final messaging concept queries expressed the desire for information, generally a specific representation

52
00:04:38.040 --> 00:04:39.720
of the state of the system.

53
00:04:41.170 --> 00:04:48.160
I hope that you now understand these concepts, if not 100 percent, do not worry too much at this point

54
00:04:48.160 --> 00:04:55.480
in time when we start to implement these in later lectures, the theory and practice will come together

55
00:04:55.480 --> 00:04:56.530
marvelously.
