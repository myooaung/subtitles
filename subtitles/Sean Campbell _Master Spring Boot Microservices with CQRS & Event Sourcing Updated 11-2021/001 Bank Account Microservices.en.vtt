WEBVTT
1
00:00:00.390 --> 00:00:03.790
Welcome to the bank account micro services section.

2
00:00:04.170 --> 00:00:07.370
Let's have a look at what you're going to build in the section.

3
00:00:08.130 --> 00:00:14.670
Again, let's have a look at the implementation and deployment view of our micro services architecture.

4
00:00:15.120 --> 00:00:20.280
In this section, we are going to create micro services for the bank account domain.

5
00:00:20.730 --> 00:00:27.450
Again, securest suggests that we should separate our bank account micro service into a command and

6
00:00:27.450 --> 00:00:28.560
query part.

7
00:00:28.830 --> 00:00:36.540
Therefore, we are going to create two restful APIs, including a bank account Camonte and a bank account

8
00:00:36.540 --> 00:00:37.860
query API.

9
00:00:38.400 --> 00:00:45.660
The bank account command API is going to handle a few bank account commands and often has handled these

10
00:00:45.660 --> 00:00:46.350
commands.

11
00:00:46.380 --> 00:00:52.140
It will raise corresponding events stored in the event store and publish it to the event.

12
00:00:52.140 --> 00:00:53.790
Pass the bank account.

13
00:00:53.790 --> 00:00:59.910
Query API, on the other hand, will subscribe to these events when new events are published to the

14
00:00:59.910 --> 00:01:00.240
event.

15
00:01:00.240 --> 00:01:07.350
But it will consume these events and use the event payload to create and alter the bank account table

16
00:01:07.560 --> 00:01:09.270
in the bank database.

17
00:01:09.630 --> 00:01:17.760
Notice this time the database is a MySQL database, while the event store or write database remains

18
00:01:17.760 --> 00:01:19.800
a Mongo DB database.

19
00:01:21.130 --> 00:01:27.580
Consider the component diagram that zooms in on all the projects, packages and software components

20
00:01:27.580 --> 00:01:29.980
that you're going to create and implement.

21
00:01:30.470 --> 00:01:37.330
First, we are going to create the bank account model and then the account type enum for indicating

22
00:01:37.330 --> 00:01:40.180
the type of bank card the day after.

23
00:01:40.480 --> 00:01:47.680
You're going to create the bank account command objects, including an open account, command, deposit

24
00:01:47.680 --> 00:01:52.440
funds command, withdraw funds command and close account command.

25
00:01:52.840 --> 00:02:00.190
We will then define the event objects including the account open the event funds deposited event funds

26
00:02:00.190 --> 00:02:03.060
with drawn event and account closed event.

27
00:02:03.490 --> 00:02:05.950
Then you will create the account aggregate.

28
00:02:06.220 --> 00:02:11.950
And as you know by now, the aggregate forms the core of a command type API.

29
00:02:12.280 --> 00:02:18.700
The account aggregate will handle the bank account commands and once handled the bank account events

30
00:02:18.700 --> 00:02:25.680
will be raised stored in the event store via the event sourcing repository and then publish to the event.

31
00:02:25.690 --> 00:02:32.830
But we will then implement the account event handler with the event handler methods that facilitates

32
00:02:32.830 --> 00:02:40.240
the subscription and handling of the bank account events where the account open event payload will be

33
00:02:40.240 --> 00:02:42.280
used to create a bank account.

34
00:02:42.670 --> 00:02:49.750
The funds deposited event to add to the bank balance the funds withdrawn event to subtract funds from

35
00:02:49.750 --> 00:02:55.450
the account and the account closed event to delete the account record.

36
00:02:56.170 --> 00:03:03.010
All of these database interactions will be facilitated via the account repository that will persist

37
00:03:03.010 --> 00:03:05.190
and update the bank account records.

38
00:03:05.620 --> 00:03:12.550
We will then implement for controllers in our bank account command API project, including an open account

39
00:03:12.550 --> 00:03:20.890
controller, a deposit funds controller, a withdraw funds controller and a close account controller.

40
00:03:21.280 --> 00:03:28.120
This is to provide restful endpoints that client applications can invoke to create a bank account,

41
00:03:28.120 --> 00:03:35.150
deposit funds into a bank account, withdraw funds from a bank account and close a bank account.

42
00:03:35.560 --> 00:03:42.080
We will again create a base response DCO object with a message field that will allow us to respond with

43
00:03:42.100 --> 00:03:44.720
a message from each of our control methods.

44
00:03:45.040 --> 00:03:53.170
However, from the post method of the open account controller, we would, in addition like to respond

45
00:03:53.170 --> 00:03:56.620
with the idea of the newly created bank account.

46
00:03:56.770 --> 00:04:04.360
Therefore, we are going to create an open account response DTO that will extend the best response DTA

47
00:04:04.600 --> 00:04:12.130
and include a field for the bank account idy they after we will define our query objects including the

48
00:04:12.130 --> 00:04:20.590
find all accounts query find all accounts by idy query find account but hold the idee query and find

49
00:04:20.590 --> 00:04:22.440
account with balance query.

50
00:04:22.840 --> 00:04:29.410
Then we will implement the account query handler that will handle these queries and use them to query

51
00:04:29.410 --> 00:04:35.360
bank account data from the bank database via the account repository.

52
00:04:35.710 --> 00:04:43.570
And finally, we will implement a account lookup controller that will provide an HTP endpoint for querying

53
00:04:43.570 --> 00:04:45.370
bank account information.

54
00:04:45.790 --> 00:04:48.250
It will return one or more bank accounts.

55
00:04:48.520 --> 00:04:51.910
Therefore we will create an account lookup response.

56
00:04:51.910 --> 00:04:54.400
Ditto for that very purpose.

57
00:04:54.760 --> 00:04:58.190
It will likewise extend the base response DTA.

58
00:04:58.840 --> 00:05:05.230
OK, I hope you are now eager to start implementing your bank account MICRA services.
