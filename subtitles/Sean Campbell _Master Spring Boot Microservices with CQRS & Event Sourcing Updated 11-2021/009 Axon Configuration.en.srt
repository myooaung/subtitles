1
00:00:00,480 --> 00:00:07,800
In this lecture, we are going to add the Exxon dependencies to the poem that XML file of each of our

2
00:00:07,800 --> 00:00:14,970
user projects, we are then going to create an Exxon config class where we will configure Exxon to use

3
00:00:14,970 --> 00:00:20,910
a Mongo DB event storage engine instead of the out of the box Exxon event store.

4
00:00:21,090 --> 00:00:28,650
OK, let's start by opening up the period of XML file of the User Command API project.

5
00:00:29,040 --> 00:00:33,780
Let's give it a proper version, version 1.0 point zero.

6
00:00:40,100 --> 00:00:51,050
And then we are going to add the Xen spring, which started dependancy with the group Idy org dot framework

7
00:00:51,050 --> 00:00:55,890
and version four point four as the latest version at the time of this recording.

8
00:00:55,910 --> 00:01:02,660
Let's copy that and then we'll open up the user core project, that XML file.

9
00:01:08,330 --> 00:01:13,370
Let's face it there and then we are going to add another dependancy.

10
00:01:16,150 --> 00:01:24,970
The Exxon on dependency, this time the group I.D. is awkward Exxon framework, that extension's that

11
00:01:24,970 --> 00:01:30,490
Mongar and version four point four is the latest version at the time of this recording.

12
00:01:31,540 --> 00:01:37,030
OK, let's head over to the user query API project.

13
00:01:37,040 --> 00:01:39,440
Open up the Pimlott XML file.

14
00:01:40,240 --> 00:01:44,980
Let's give it a proper version, version 1.0 point zero.

15
00:01:45,250 --> 00:01:50,530
And then we are only going to add the Exxon screen, which starts a dependency.

16
00:01:50,690 --> 00:01:53,170
Okay, let's just paste there.

17
00:01:53,950 --> 00:01:55,960
And that's all we have to do.

18
00:01:55,990 --> 00:02:01,750
Let's build see if everything builds with the inspiration space still.

19
00:02:02,930 --> 00:02:09,560
And everything should be fine, let's just say yes and everything, but successfully.

20
00:02:14,390 --> 00:02:24,200
OK, open up the configuration package and the user call project and create a new class and call it

21
00:02:24,200 --> 00:02:25,760
X on config.

22
00:02:26,600 --> 00:02:32,000
This is where we are going to configure Exon to use a Mongar DB storage engine.

23
00:02:32,170 --> 00:02:38,780
Okay, let's start by adding an add configuration annotation to tell the spring framework that this

24
00:02:38,780 --> 00:02:41,030
is a configuration class.

25
00:02:41,510 --> 00:02:44,300
Then we are going to add three private variables.

26
00:02:44,300 --> 00:02:55,310
First, private string Mongo host for the host address of our Monga DV database, then private int Wango

27
00:02:55,310 --> 00:03:02,050
Port and then finally private string Mongo database.

28
00:03:03,140 --> 00:03:12,020
We are going to add the values of these fields in the applications to properties files in the User Command

29
00:03:12,020 --> 00:03:13,220
API project.

30
00:03:13,580 --> 00:03:17,930
And then we'll start by giving it just a normal port.

31
00:03:18,300 --> 00:03:21,740
That's going to run on a server port.

32
00:03:21,770 --> 00:03:25,370
Let's use Port 1881.

33
00:03:25,940 --> 00:03:28,370
And now for the actual configuration.

34
00:03:28,730 --> 00:03:39,560
Just put a comment there, Mongo DB and then it's going to be spring dot data dot Mongo DB dot host

35
00:03:40,430 --> 00:03:48,100
equals let's use localhost, we are mongered bestriding and Dufka on our local machine.

36
00:03:48,120 --> 00:03:49,610
So just copy that first.

37
00:03:49,610 --> 00:03:58,640
But in the port is the default mongered report two seven zero one seven and then the database.

38
00:03:58,760 --> 00:04:07,850
It's called our database user because we are storing our user info the just copy that for the User Query

39
00:04:07,850 --> 00:04:14,890
API project to locate the applications that prompted this file.

40
00:04:14,900 --> 00:04:23,870
And the only difference is let's make the API Port 882 now go ahead and copy the spring DOT data that

41
00:04:23,870 --> 00:04:34,040
Mongar and then we are going to add the add value annotation to tell the spring frame to get the value

42
00:04:34,040 --> 00:04:37,790
of that field from the application that properties file.

43
00:04:37,790 --> 00:04:46,820
And 127 that that that one is obviously the same as localhost and that's basically the default value.

44
00:04:47,570 --> 00:04:57,710
And then we'll add the same for the port says copy that and will default to the same two seven zero

45
00:04:57,710 --> 00:04:59,510
one seven default port.

46
00:05:08,800 --> 00:05:19,540
And then the Mungai database will default to the user database, just change that database and use user.

47
00:05:20,220 --> 00:05:24,070
OK, now we are going to create a few methods.

48
00:05:24,250 --> 00:05:32,620
Let's add to add being annotation, the API annotation tools that A method produces a B to be managed

49
00:05:32,620 --> 00:05:34,060
by the screen container.

50
00:05:34,120 --> 00:05:37,690
OK, we are first going to return a Mongar client.

51
00:05:38,320 --> 00:05:49,180
Let's call our method Mongo and we will create a new instance of Mongo factory and we will use the Mongar

52
00:05:49,190 --> 00:05:54,300
factory to set our Mongar address.

53
00:05:54,760 --> 00:06:01,590
But before we can do that, we need to instantiate another factory, the Mongo's Settings Factory.

54
00:06:02,080 --> 00:06:09,250
So let's create a new instance of Mongar Settings factory and the Mongo's Settings factory is actually

55
00:06:09,250 --> 00:06:12,940
the one that we're going to use to set the Mongered races.

56
00:06:13,450 --> 00:06:15,620
In our case, only a single address.

57
00:06:15,640 --> 00:06:18,010
So let's use collections.

58
00:06:18,010 --> 00:06:19,570
Dot Singleton list.

59
00:06:25,990 --> 00:06:33,940
And then we pass in a new instance of severe dress that takes in the Mongar Hurst and the Mongar port.

60
00:06:43,790 --> 00:06:51,890
And then we say Mongar factory that set Mongo Clines settings and then we pass in Mongo Settings factory.

61
00:06:55,220 --> 00:07:02,420
Not create Mongo client settings, and then we can go ahead and return the Mongar client by invoking

62
00:07:02,420 --> 00:07:05,060
Mongar factory that create Mongo.

63
00:07:08,990 --> 00:07:18,770
Okay, the second method that we are going to declare, he will return a Monga template, let's call

64
00:07:18,770 --> 00:07:29,700
it X on Mongar template, and he will use a default mongerer template builder.

65
00:07:30,530 --> 00:07:36,380
So they should default mongered template dot builder

66
00:07:38,900 --> 00:07:44,960
and will pass in the Mongar database, which takes in a Mongar client.

67
00:07:44,960 --> 00:07:48,410
Let's call the Mongar method that we've declared just above.

68
00:07:48,410 --> 00:07:57,330
And then also it needs the database name DOT and that will return the constructed Mongar template object.

69
00:07:58,260 --> 00:08:06,890
OK, the third method that we are going to declare is will return a token stock in let's market with

70
00:08:06,890 --> 00:08:11,870
it being a return token store object.

71
00:08:12,140 --> 00:08:17,240
It's called a token store and it's passing in a serializer.

72
00:08:21,050 --> 00:08:29,660
And then we will use a Mongar token store builder to construct our tokens, to object that builder,

73
00:08:30,350 --> 00:08:34,880
and we will set a mongered template object.

74
00:08:35,450 --> 00:08:39,080
We can call the X on Mongo template to create just above.

75
00:08:39,890 --> 00:08:49,760
And then it also requires a serializer pass in the serializer parameter and call Duck-billed to return

76
00:08:49,760 --> 00:08:52,220
the constructed tokens to object.

77
00:08:53,210 --> 00:09:03,250
OK, now the two methods again will at the end annotation this time will return the event storage engine

78
00:09:03,290 --> 00:09:14,180
we will call our method storage engine and this time will pass in a Mongar client as a parameter and

79
00:09:14,180 --> 00:09:17,810
we will use a Monga event storage engine builder.

80
00:09:18,590 --> 00:09:21,140
This is all part of the Exon framework.

81
00:09:22,040 --> 00:09:34,160
Packages got bolder and will set the Mungai template actually use a default Mongar template build again.

82
00:09:35,920 --> 00:09:38,500
Set them on good database.

83
00:09:40,520 --> 00:09:41,650
Scott Dotts.

84
00:09:42,830 --> 00:09:44,510
Mongered database.

85
00:09:51,120 --> 00:09:59,450
Just fix the indentation there and then Duck-billed to ultimately return the constructed event story,

86
00:09:59,500 --> 00:10:02,960
change an object which is Mongar even story angel.

87
00:10:06,540 --> 00:10:12,480
OK, let's add it with add being a final method and will return.

88
00:10:13,470 --> 00:10:17,070
We'll call it public and return embedded events store.

89
00:10:18,240 --> 00:10:20,340
Let's call Method Event Store.

90
00:10:20,490 --> 00:10:32,340
It will take in two parameters event storage engine and as well as an X on configuration object.

91
00:10:34,810 --> 00:10:42,630
And this time we'll use an embedded event to build up to construct our embedded events to object.

92
00:10:45,840 --> 00:10:46,980
In Builder.

93
00:10:47,970 --> 00:10:52,960
It set the storage engine by passing the storage engine parameter.

94
00:10:54,490 --> 00:10:57,090
Then we'll set a message monitor.

95
00:10:58,800 --> 00:11:07,260
It needs a message, money to object to, we'll say configuration dot, message monitor will pass in

96
00:11:07,260 --> 00:11:09,870
the type events to that plus.

97
00:11:15,220 --> 00:11:21,880
And then it also requires a component name and we'll use the name events to.

98
00:11:26,780 --> 00:11:37,430
OK, now let's just add the import statement and then call Godbolt to return the constructed embedded

99
00:11:37,430 --> 00:11:39,120
events to object.

100
00:11:39,950 --> 00:11:47,240
The final thing that we have to do is to tell the user command and query API applications to make use

101
00:11:47,240 --> 00:11:49,100
of the X on conflict class.

102
00:11:52,660 --> 00:11:56,770
We can do that by using the import annotation.

103
00:12:00,190 --> 00:12:04,690
And as the type Xen conflict clause.

104
00:12:10,580 --> 00:12:19,070
We need to add a dependency in our PMed or XML file on the user core project, basically our library

105
00:12:19,070 --> 00:12:19,710
project.

106
00:12:20,090 --> 00:12:26,200
So let's go ahead and add a dependency for the user core project.

107
00:12:29,020 --> 00:12:32,740
Now, we should be able to add the import statement.

108
00:12:42,900 --> 00:12:48,000
OK, let's go over to the user query API application.

109
00:12:58,770 --> 00:13:07,740
And again, we will import the X on conflict clause, we need to add a dependency on the user coal project.

110
00:13:09,330 --> 00:13:14,880
I had it right at the bottom to just use it at call.

111
00:13:19,590 --> 00:13:22,980
OK, now we should be able to add the import statement.

112
00:13:26,140 --> 00:13:33,940
OK, now we have successfully ended the conflict clauses for command and query.

113
00:13:34,510 --> 00:13:41,710
Let's do a clean and a fresh build and see if everything built correctly.

114
00:13:42,220 --> 00:13:50,110
Importantly, at this point in time, you have to have Mongo DB up and running like I've shown you at

115
00:13:50,110 --> 00:13:53,680
the start of the section, how you can deploy it in DOCA.

116
00:13:54,460 --> 00:13:56,410
Everything both successfully.
