1
00:00:00,240 --> 00:00:06,180
In this lecture, I'm going to show you how to containerised your first Springburn military service,

2
00:00:06,630 --> 00:00:14,460
navigate to the user dot Oath 2.0 project, go ahead and add a new file to the root of the project and

3
00:00:14,460 --> 00:00:15,810
call it DOCA file.

4
00:00:18,180 --> 00:00:24,480
First, we're going to add the from instruction, the from instruction initializes and Newbold's stage

5
00:00:24,480 --> 00:00:27,960
and set the base image for subsequent instructions.

6
00:00:28,320 --> 00:00:31,680
For us, the base image will be a JDK image.

7
00:00:32,010 --> 00:00:42,990
I'm using open JDK 14, therefore my base image is going to be open JDK 14, JDK Alpine next line arge

8
00:00:43,560 --> 00:00:45,360
jor underscore file.

9
00:00:47,520 --> 00:00:51,120
He target forward slash Strix Daija.

10
00:00:53,930 --> 00:01:00,530
Then copy the copy instruction copies the new files or directories from the source and add into the

11
00:01:00,530 --> 00:01:04,580
file system of the container at the path destination.

12
00:01:09,060 --> 00:01:11,700
And then the last line entry point.

13
00:01:14,680 --> 00:01:18,580
They need square brackets and array of arguments, including Java.

14
00:01:22,950 --> 00:01:24,000
Hyphen Jor.

15
00:01:28,990 --> 00:01:30,830
Forward slash Dodger.

16
00:01:31,810 --> 00:01:38,860
OK, and that is all we have to do, so as you can see, the darker file is very simple, but is all

17
00:01:38,860 --> 00:01:41,650
we need to run a springboard application.

18
00:01:41,950 --> 00:01:45,450
It literally only needs Java and a jar file.

19
00:01:45,820 --> 00:01:50,400
The build will create a spring user and a spring group to run the application.

20
00:01:50,740 --> 00:01:57,940
It will then copy the project files into the container as a jar that'll be executed in the entry point.

21
00:01:58,060 --> 00:02:05,860
The array form of the Docker file entry point is used so that there is no shell wrapping the Java process.

22
00:02:06,800 --> 00:02:12,740
Now, let's open the application at properties file of a project at the moment we are connecting to

23
00:02:12,740 --> 00:02:14,240
our Mongar DBE database.

24
00:02:14,240 --> 00:02:19,020
Using localhost, however, localhost means something else to the container.

25
00:02:19,130 --> 00:02:24,920
Each container will interpret localhost is local to the container and not local to the host.

26
00:02:25,040 --> 00:02:29,390
Therefore, we need to change the host to the name of the container.

27
00:02:29,690 --> 00:02:34,940
We can get the name of the container by running the Docker P is command in Lennix.

28
00:02:34,940 --> 00:02:41,060
You need to add SEDAR at the start of the command and in windows the equivalent would be to run command

29
00:02:41,060 --> 00:02:43,640
prompt topower shell as administrator.

30
00:02:44,040 --> 00:02:48,220
OK, there you can see all of our containers that are running at the moment.

31
00:02:48,470 --> 00:02:55,070
Now, instead of overriding localhost in our application or properties file, we will make use of spring

32
00:02:55,070 --> 00:02:56,030
profiles.

33
00:02:56,060 --> 00:03:02,120
This will come in very handy because our local host will similarly not be able to resolve the container

34
00:03:02,120 --> 00:03:06,680
names when we try to build our projects locally from our ideas.

35
00:03:07,100 --> 00:03:14,240
Spring profiles provide a way to segregate parts of our application configuration and make it any available

36
00:03:14,240 --> 00:03:15,630
in certain environments.

37
00:03:15,920 --> 00:03:22,700
So let's go ahead and create a copy of our application or properties file and rename it to Application

38
00:03:22,700 --> 00:03:25,460
Hyphen Docker Properties.

39
00:03:25,880 --> 00:03:32,870
If we set our spring profile as DOCA, it will let this application hyphen Dockett or properties file.

40
00:03:33,200 --> 00:03:39,890
Thus, the profile name should be specified after application hyphen and before DOT properties.

41
00:03:40,220 --> 00:03:46,010
In the real world, you will most likely have development, staging and production profile names.

42
00:03:46,310 --> 00:03:52,460
I'm just using Dukkha to emphasise that profile names can be anything and to distinguish between our

43
00:03:52,460 --> 00:03:56,570
local development and Dukkha configuration files.

44
00:04:01,240 --> 00:04:05,390
Now, go ahead and open the application docket or properties file.

45
00:04:05,890 --> 00:04:10,120
Let's change localhost to monga container.

46
00:04:10,920 --> 00:04:14,110
OK, now let's go ahead and build our project.

47
00:04:25,090 --> 00:04:27,860
We are now ready to build our rocket image.

48
00:04:28,240 --> 00:04:37,210
This can be done by using the Duck-billed command, so let's type Dukkha bold hyphen T for tech and

49
00:04:37,210 --> 00:04:46,900
then the name of our container, let's call our container user hyphen OS two and then space dot.

50
00:04:47,110 --> 00:04:50,230
The DOT represents the present working directory.

51
00:04:50,470 --> 00:04:54,490
We are Dukkha file is located and then hit enter.

52
00:04:55,090 --> 00:04:58,510
The first time we do this it will download the base image.

53
00:05:03,970 --> 00:05:11,800
OK, the Donald has been completed and ought to 2.0 out service has been packaged together as a darker

54
00:05:11,800 --> 00:05:12,390
image.

55
00:05:12,850 --> 00:05:18,730
Now, importantly, a darker container will only be able to communicate with other Dukkha containers

56
00:05:18,730 --> 00:05:20,690
if they are in the same network.

57
00:05:21,100 --> 00:05:27,400
Therefore, we need to find out what the network name is that are Mongar DB container is running in.

58
00:05:27,850 --> 00:05:35,020
We can do this with the Dukkha Inspect Command, so let us type Dukkha inspect

59
00:05:37,360 --> 00:05:47,440
Monga container, which is our Monga DBE container hyphen if and then in quotes two sets of curly brackets

60
00:05:49,330 --> 00:05:51,160
and then in the curly brackets.

61
00:05:51,460 --> 00:05:56,110
Jason space dot network settings.

62
00:05:57,340 --> 00:05:58,540
Dot networks.

63
00:06:01,600 --> 00:06:02,900
OK, hit enter.

64
00:06:03,370 --> 00:06:08,090
So the very first field, the Spring Bank Net, is the name of the network.

65
00:06:08,560 --> 00:06:17,650
So now let's run our docker image as a dock, a container dock run Typhon defo detached so that it's

66
00:06:17,650 --> 00:06:19,920
not attached to this terminal window.

67
00:06:20,290 --> 00:06:25,090
Specify the ports, port 884, internal and external.

68
00:06:27,260 --> 00:06:30,750
Let's give it a name or two hyphen service.

69
00:06:30,770 --> 00:06:33,530
This doesn't have to be the same as the container name and.

70
00:06:36,030 --> 00:06:43,200
Then for network, let's specify Spring Bank Net, put it in the same network as the Monga DV container.

71
00:06:49,460 --> 00:06:56,720
We can then type Desh E to set an environmental variable, we want to set the active spring profile

72
00:06:56,720 --> 00:07:04,310
to DOCA so that the container will use the application DOCA that properties file that we have just created.

73
00:07:04,530 --> 00:07:12,770
You can do this by setting spring and the scope profiles underscore active equal to DOCA restart, saying

74
00:07:12,770 --> 00:07:15,080
that our container should always restart.

75
00:07:15,530 --> 00:07:22,630
Most importantly, I use this so that the container starts up when the host starts up or when it fails.

76
00:07:22,970 --> 00:07:29,360
Let's copy our image name right at the end and that gives a nice good.

77
00:07:29,870 --> 00:07:40,280
And if you run DOCA pace, you'll see that our oath to service is now running on Port 884 in Dukkha.

78
00:07:40,490 --> 00:07:44,240
OK, open up Posman and make a request.

79
00:07:44,240 --> 00:07:48,530
And there you can see that we have a JWT.

80
00:07:49,810 --> 00:07:58,300
Let's run the docker containers stop just so that you can see that we are actually connecting to the

81
00:07:58,300 --> 00:08:03,470
container and not our localhost, so let's stop our oath to service.

82
00:08:04,210 --> 00:08:05,650
Let's try again.

83
00:08:06,070 --> 00:08:07,210
Let me show you this.

84
00:08:07,570 --> 00:08:11,380
It's not running dry again and no connection.

85
00:08:11,530 --> 00:08:14,620
OK, let's clear our screen for more space.

86
00:08:18,970 --> 00:08:26,500
Then you can run pseudo docker containers, start all to life and service, and that'll start docker

87
00:08:26,500 --> 00:08:31,760
container get hit send and again we have a JWT.

88
00:08:32,260 --> 00:08:38,240
Now, you might ask me, but hang on, how do I get that image onto a server?

89
00:08:38,590 --> 00:08:41,400
And the answer is the Docker hub repo.

90
00:08:42,050 --> 00:08:49,780
So go ahead and open your browser and navigate to hub dot, dot, dot com and register a free docker

91
00:08:49,780 --> 00:08:50,800
hub account.

92
00:08:51,010 --> 00:08:54,340
I already have one, so I'm going to log into mine.

93
00:08:55,030 --> 00:09:01,210
Now I'm not going to give you my password, but this is also a free one, like the one that you are

94
00:09:01,210 --> 00:09:02,420
busy registering.

95
00:09:02,830 --> 00:09:10,960
So when you log in, you can see the repo and if you want to push images to it is the docker push command

96
00:09:10,960 --> 00:09:15,390
with my username, forward slash repo name, kolon tag name.

97
00:09:15,400 --> 00:09:22,750
So after you've done your registration, you can run the Docker login command, provide your username

98
00:09:23,230 --> 00:09:24,550
and your password.

99
00:09:29,640 --> 00:09:36,780
OK, and the doctors should give us a message saying that we are logged in, logging succeeded like

100
00:09:36,780 --> 00:09:37,550
you can see there.

101
00:09:38,040 --> 00:09:45,530
And then again, let's run Dr. Pace and we can also run duck tag.

102
00:09:45,540 --> 00:09:52,290
Now we are going to tag our image, our local image, to a Dark Reaper image.

103
00:09:52,290 --> 00:10:00,480
So copy everything just before the tag name pasted there and then our image name will use at the end

104
00:10:00,480 --> 00:10:00,740
there.

105
00:10:00,750 --> 00:10:08,410
So we are saying in my case, in the Campbell take rieper for the take Zeta username.

106
00:10:08,480 --> 00:10:15,360
So now let's push our image, copy everything from the user name all the way to the tag name at the

107
00:10:15,360 --> 00:10:15,690
end.

108
00:10:16,020 --> 00:10:22,690
Sudhakar push with that name and then it is going to push it into Rieper.

109
00:10:23,430 --> 00:10:29,190
So I've done this before and that's why it's saying like this, yours might take a little longer than

110
00:10:29,190 --> 00:10:29,670
mine.

111
00:10:30,100 --> 00:10:38,120
And then when it's done it will give you HHI 256 unique idea there and there you can see the user to

112
00:10:38,130 --> 00:10:40,350
image that we've just pushed.

113
00:10:40,350 --> 00:10:42,750
You could do a Dufka polls show you just now.

114
00:10:42,780 --> 00:10:49,710
Let's just go into the container image and there you will see all the contents, amongst others, the

115
00:10:49,710 --> 00:10:52,710
open JDK for base image cetera.

116
00:10:53,310 --> 00:10:56,390
So now let's consider Docker container.

117
00:10:56,400 --> 00:10:59,890
Alice, there you can see all of our containers.

118
00:10:59,890 --> 00:11:09,350
So let's clean out our local containers to sort of mimic a server where we don't yet have these images.

119
00:11:09,360 --> 00:11:13,480
So let's remove oath service container.

120
00:11:13,500 --> 00:11:17,760
It's going to say, hang on, you can't remove a container that is running.

121
00:11:22,530 --> 00:11:31,830
So let's first say docker containers stop with the container name, because obviously you need to first

122
00:11:31,920 --> 00:11:38,550
stop the container to be able to remove it and remove the container before we can remove an image again

123
00:11:38,550 --> 00:11:38,970
list.

124
00:11:42,630 --> 00:11:45,420
Let's just clear the screen and ran the docker image.

125
00:11:45,630 --> 00:11:46,500
And again.

126
00:11:49,140 --> 00:11:51,360
There you can see images.

127
00:11:51,380 --> 00:11:58,200
So let's run Docker image, aim four, remove copy the local image first.

128
00:12:01,890 --> 00:12:11,580
OK, and it's removed and take there and then let's also run Docker image, R.M. aim to remove our image

129
00:12:11,580 --> 00:12:18,240
that's in our repository and remember Kolan with the tag.

130
00:12:19,020 --> 00:12:24,560
OK, so this sort of mimics a server that doesn't have those images.

131
00:12:24,570 --> 00:12:28,760
OK, you can see we don't have it anymore.

132
00:12:28,800 --> 00:12:36,180
Just go back, copy the docker, pull command from your container image and pasted in your terminal

133
00:12:36,570 --> 00:12:40,300
and then it's going to pull that image on the server.

134
00:12:40,500 --> 00:12:47,490
Let's pretend for the first time and then the server will have that image in its local dock, a service.

135
00:12:49,100 --> 00:12:56,630
OK, now it has been downloaded so we can actually start our container with that image name again,

136
00:12:56,640 --> 00:13:06,800
doctorand detached port 80 84 again for external and the second one internal, the name again will use

137
00:13:06,800 --> 00:13:12,080
the same name OS to service space network.

138
00:13:12,650 --> 00:13:14,660
And it's the spring bank net.

139
00:13:19,420 --> 00:13:25,780
Again, as an environmental variable, let's set our active spring profile as Dukkha.

140
00:13:35,050 --> 00:13:38,590
Will specify the restart policy, we say always.

141
00:13:42,610 --> 00:13:48,700
And then right at the end, we need to put the image name, and that's going to be our full image name,

142
00:13:48,820 --> 00:13:55,330
including the user name Ford Slash Reaper, name tag, name or image name is Dr..

143
00:13:55,970 --> 00:14:00,010
Again, they can see our oath to service running.

144
00:14:00,310 --> 00:14:03,670
And there is the image full image name.

145
00:14:03,910 --> 00:14:05,760
So let's open Posman again.

146
00:14:05,770 --> 00:14:09,430
And they you can see again we get a JWT.
