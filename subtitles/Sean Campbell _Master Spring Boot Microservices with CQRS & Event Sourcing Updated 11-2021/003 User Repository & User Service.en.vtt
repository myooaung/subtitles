WEBVTT
1
00:00:00.390 --> 00:00:07.560
In this lecture, we are going to implement a user repository and a user service that extends the user

2
00:00:07.560 --> 00:00:16.230
details service so that the OS 2.0 authorization server can use our user data that we have created using

3
00:00:16.230 --> 00:00:20.010
our User Command API during authentication.

4
00:00:20.730 --> 00:00:25.110
Expand the source directory of your OS 2.0 application.

5
00:00:25.560 --> 00:00:29.640
Go ahead and create a new package and call it repositories.

6
00:00:32.610 --> 00:00:36.600
Now, let's create another package and call it services.

7
00:00:38.300 --> 00:00:42.680
And finally, let's create a package for configuration.

8
00:00:47.730 --> 00:00:50.910
Now, let's give an application of proper name.

9
00:00:52.820 --> 00:00:57.650
Call it an oath to application.

10
00:01:01.430 --> 00:01:10.000
OK, now create a new interface and other repositories package and call it user repository.

11
00:01:11.060 --> 00:01:18.320
We specifically want to create new user repository because we do not want to depend on the code of the

12
00:01:18.320 --> 00:01:20.300
user query API project.

13
00:01:20.870 --> 00:01:27.070
We will, however, use the user domain model that comes from the user core package.

14
00:01:27.500 --> 00:01:37.640
So let's go ahead and add the user core project as a dependency in the XML file of our oath to point

15
00:01:37.640 --> 00:01:39.740
out authorization server project.

16
00:01:52.850 --> 00:02:00.770
Go ahead and add the import now we are going to add a custom query by using the query annotation and

17
00:02:00.800 --> 00:02:05.330
yes, will tell Mongar DB that we want a query on an embedded field.

18
00:02:05.840 --> 00:02:10.660
We basically want to query and find a user by the user name.

19
00:02:17.960 --> 00:02:22.040
So that is how the syntax looks to accomplish that.

20
00:02:23.150 --> 00:02:25.910
So let's return a optional user

21
00:02:29.570 --> 00:02:38.140
and we can call our method find by user name and let's pause in a string username

22
00:02:40.790 --> 00:02:41.540
like.

23
00:02:46.680 --> 00:02:53.220
Now, let's create a new class under the services package and call it user service.

24
00:02:56.530 --> 00:03:01.290
The first thing that we are going to do is to add the service station.

25
00:03:06.490 --> 00:03:15.550
You can give it a specific name, like use a service if you like, and then we will add user repository

26
00:03:16.180 --> 00:03:23.380
as a private field that we will inject to our user service using dependency injection.

27
00:03:26.140 --> 00:03:28.180
Let's create a new constructor.

28
00:03:35.790 --> 00:03:38.460
And then we can do the assignment

29
00:03:43.890 --> 00:03:50.310
again, auto wired will ensure that their dependency gets injected.

30
00:03:53.310 --> 00:03:57.640
Importantly, let's implement the user detail service.

31
00:03:58.410 --> 00:04:06.780
It is basically used to retrieve user related data and it is used by the authentication provider to

32
00:04:06.780 --> 00:04:10.750
load user details that are required during authentication.

33
00:04:10.770 --> 00:04:15.480
So we are going to override the user by user name method.

34
00:04:16.710 --> 00:04:24.120
To ensure that we can actually use the user data that we have created in our user collection in Mongo

35
00:04:24.120 --> 00:04:24.720
DB.

36
00:04:25.620 --> 00:04:32.760
So let's call our user repository find by user name method and pass in the user name.

37
00:04:34.510 --> 00:04:43.270
Then let's check if we actually have a user, if we don't, we will assume that either the user name

38
00:04:44.260 --> 00:04:46.150
or the password was incorrect.

39
00:04:46.150 --> 00:04:51.400
So let's throw a new user not found exception.

40
00:04:58.640 --> 00:05:06.350
Let's give a message such as incorrect username and password supplied.

41
00:05:16.120 --> 00:05:25.810
Now, we are basically going to get the account details from our user object user DOT.

42
00:05:32.260 --> 00:05:33.010
To count.

43
00:05:38.210 --> 00:05:40.880
And then we will turn the user details.

44
00:05:44.860 --> 00:05:59.040
We can get it from OK, that spring framework, dot security, dot com, dot user details, dot user.

45
00:06:03.610 --> 00:06:06.100
Let's set our user name.

46
00:06:08.170 --> 00:06:09.670
It's basically a boulder.

47
00:06:14.250 --> 00:06:19.650
Now, let's set the password that we get from our account object

48
00:06:22.110 --> 00:06:24.960
also said the authorities.

49
00:06:27.290 --> 00:06:37.670
We get it from the roles that is based in the grant to the authorities that set the expired will just

50
00:06:37.670 --> 00:06:40.340
hardcoded for now and set it to false.

51
00:06:40.340 --> 00:06:48.470
But you can get the details from the database if it was supplied, locked, also false credentials expired,

52
00:06:48.470 --> 00:06:49.160
false

53
00:06:52.430 --> 00:06:56.180
and disabled is false.

54
00:06:58.310 --> 00:07:05.030
And then we can call boat to return the constructed user details object.

55
00:07:05.330 --> 00:07:10.220
OK, and that concludes the implementation of our user service.
