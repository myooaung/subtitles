1
00:00:00,240 --> 00:00:05,800
It is now time for us to create the controllers for our bank account command API.

2
00:00:06,270 --> 00:00:13,020
We will start by creating a controller that will expose a restful endpoint for opening a new bank account,

3
00:00:13,560 --> 00:00:19,630
like in the case of the user micro services, we always want to respond with at least a message.

4
00:00:19,950 --> 00:00:27,840
Therefore, let's navigate the DTA package and a bank account core project and create a new class and

5
00:00:27,840 --> 00:00:29,810
call it based response.

6
00:00:30,450 --> 00:00:34,110
Let's add a single field for returning a message.

7
00:00:40,700 --> 00:00:46,250
Also, go ahead and add the data and all construct annotations.

8
00:00:54,660 --> 00:01:06,570
OK, now let's go to the bank account command API project and create another DTA and call it open account

9
00:01:07,020 --> 00:01:07,940
response.

10
00:01:10,320 --> 00:01:13,020
We are going to extend the base response

11
00:01:20,160 --> 00:01:27,720
and let's add just a single field to return the idea of the newly created bank account.

12
00:01:30,840 --> 00:01:37,290
OK, let's also add a single constructor that takes in the ID and the message.

13
00:01:40,870 --> 00:01:48,400
We will pass the message to our base class and then we will sign our Idy,

14
00:01:51,220 --> 00:01:58,570
Lomborg does not work well with inheritance, so let's create the cities and get ourselves first for

15
00:01:58,570 --> 00:01:59,710
setting the idea

16
00:02:08,200 --> 00:02:13,750
and then our gater that gets the current state of the idy.

17
00:02:18,570 --> 00:02:18,850
Okay.

18
00:02:19,840 --> 00:02:20,350
Now.

19
00:02:21,570 --> 00:02:29,490
It creates a new class under the controllers package and call it open account controller

20
00:02:32,700 --> 00:02:40,320
annotated with the controller annotation as well as the request mapping.

21
00:02:45,090 --> 00:02:47,610
We can make our path forward.

22
00:02:47,610 --> 00:02:52,710
Slash API, forward slash version one forward slash open bank account.

23
00:02:56,470 --> 00:03:04,770
Now, let's create a private field, you can make it final, the command gateway, and we will use it

24
00:03:04,770 --> 00:03:08,490
to dispatch the open bank account command.

25
00:03:15,390 --> 00:03:16,740
They do the assignment

26
00:03:21,450 --> 00:03:28,650
and then add auto wired to ensure that the spring IOC container injects the command gateway dependency.

27
00:03:28,890 --> 00:03:36,840
Now we are going to create a post method at the post mapping annotation and then we will also secure

28
00:03:36,840 --> 00:03:42,390
our controller method to ensure that the requested user has rights privileges.

29
00:03:51,030 --> 00:03:56,450
We will return the response entity and the open account response.

30
00:03:59,970 --> 00:04:02,280
It's called our method open account.

31
00:04:05,660 --> 00:04:13,640
And we will do validation on the request body, which is our open account command.

32
00:04:21,380 --> 00:04:31,130
Now let's go to Ed validation annotations to open Camonte clause, you must ensure that account holders

33
00:04:31,130 --> 00:04:31,960
never know.

34
00:04:32,840 --> 00:04:41,020
And if it is, we will respond with a bad request and no account holder ID was supplied.

35
00:04:43,490 --> 00:04:48,320
Go ahead and copy that for the account type.

36
00:04:49,160 --> 00:04:53,570
We will simply change it to no account type was supplied.

37
00:04:59,010 --> 00:05:04,680
And then for our opening balance, we will change it to men.

38
00:05:06,900 --> 00:05:14,700
To ensure that the balance is always greater, the zero, and then if it's not zero, in other words,

39
00:05:14,730 --> 00:05:21,480
we want at least the balance of zero and not a negative balance, then we will reply with bad request

40
00:05:21,480 --> 00:05:24,120
and opening balance must be at least

41
00:05:28,320 --> 00:05:30,320
now let's change that to 50.

42
00:05:30,630 --> 00:05:37,890
Let's say they need to have at least fifty dollars, whatever your your currency is to open a new bank

43
00:05:37,890 --> 00:05:38,520
account.

44
00:05:40,110 --> 00:05:47,160
OK, now that we've done the validation, let's implement open account post control method.

45
00:05:47,760 --> 00:05:57,060
Let's generate a new random ID for our new bank account and then we will say command to set it will

46
00:05:57,060 --> 00:06:03,960
set that idea to the open account, common object and then let's do a try catch.

47
00:06:06,540 --> 00:06:16,860
And as always, let's first implement our catch where we will respond with internal server error and

48
00:06:16,860 --> 00:06:18,540
a safe error message.

49
00:06:18,540 --> 00:06:26,460
So the safe error message, let's make it something like error while processing request to open a new

50
00:06:26,460 --> 00:06:27,390
bank account

51
00:06:33,450 --> 00:06:39,000
for ID and then we can just add the newly generated bank account.

52
00:06:39,030 --> 00:06:47,550
If they say we will print out the actual error to the container log, you'll see when we deploy our

53
00:06:47,550 --> 00:06:53,160
military services to Docker that we can view that in the container log.

54
00:06:57,400 --> 00:07:03,610
And then if the error occurred, like we said, we will respond with a new idea as well as the safe

55
00:07:03,610 --> 00:07:10,090
error message and SCDP status code 500, which is internal server error.

56
00:07:15,380 --> 00:07:22,250
OK, to implement the actual method command gateway that said, we will dispatch the command object

57
00:07:26,540 --> 00:07:34,640
and then if everything went well, we will again respond with the open account response stating that

58
00:07:35,570 --> 00:07:38,150
we have successfully opened a new bank account.

59
00:07:49,790 --> 00:07:54,650
With HTP status code to one which is created.

60
00:07:57,980 --> 00:08:03,980
OK, now we have successfully completed the implementation of our open account controller method.

61
00:08:04,010 --> 00:08:07,460
Now open up the API Gateway project.

62
00:08:10,660 --> 00:08:16,420
Let's go and add an API gateway route for our new open account controller.

63
00:08:16,620 --> 00:08:27,720
So let's give it a unique ID, something like bank account, see the API hyphen open account

64
00:08:30,690 --> 00:08:31,870
for your eye.

65
00:08:31,920 --> 00:08:35,970
Let's go and copy the registered user command.

66
00:08:40,350 --> 00:08:44,030
And just make sure the indentation is correct.

67
00:08:45,450 --> 00:08:58,590
Change the port to 1991 and then request mapping to open bank account and also copy that to the predicate.

68
00:08:59,730 --> 00:09:03,900
OK, let's run our API Gateway application.

69
00:09:07,670 --> 00:09:15,650
It's Dybbuk Bank Account Camonte API, as well as a bank account query API.

70
00:09:23,920 --> 00:09:33,670
And we'll also have to run our Oath 2.0 authorization server to get a JWT or else we won't be able to

71
00:09:33,700 --> 00:09:35,140
open a bank account.

72
00:09:38,930 --> 00:09:39,380
OK.

73
00:09:45,730 --> 00:09:56,770
And also run the user query API because we need to get an account holder ID from our user query API.

74
00:10:00,190 --> 00:10:03,100
So we've got all our applications running.

75
00:10:03,640 --> 00:10:05,980
Let's start by getting a JWT.

76
00:10:18,430 --> 00:10:21,580
OK, so let's paste taken the.

77
00:10:25,380 --> 00:10:33,360
And then go ahead and copy John Doe's I.D., which is going to be our account holder I.D. at a new tab,

78
00:10:33,360 --> 00:10:36,750
they change it to post your eyes.

79
00:10:36,750 --> 00:10:45,390
HTP localhost 2000 through the API Gateway Forward Slash API V1 Open Bank Account.

80
00:10:47,950 --> 00:10:59,980
And then for our post body change to Jason, we will pass in an account holder ID and will use John

81
00:10:59,980 --> 00:11:01,870
Doe's user ID, the.

82
00:11:03,130 --> 00:11:13,120
OK, then, for our card type will say John's got a current account.

83
00:11:16,930 --> 00:11:19,710
And then for our opening bell, it's.

84
00:11:22,800 --> 00:11:26,460
Let's say John's got a balance of a hundred dollars.

85
00:11:29,530 --> 00:11:32,110
OK, let's get another JWT.

86
00:11:37,580 --> 00:11:39,560
Edit as a berry token.

87
00:11:44,540 --> 00:11:53,810
And then let's just make sure we add a breakpoint in our control method, as well as in our bank account

88
00:11:53,810 --> 00:11:54,620
aggregate.

89
00:11:58,550 --> 00:12:01,820
Well, the command handled and event sourcing handler.

90
00:12:05,700 --> 00:12:13,470
As well as a break point and our current event handler in our current event and implementation.

91
00:12:14,450 --> 00:12:22,850
And yes, let's go back to Posman and hit send there you'll see it hits our controller method, the

92
00:12:22,850 --> 00:12:29,360
command gets dispatched, the command handled, then it's published to the event, passed and stored

93
00:12:29,360 --> 00:12:30,440
in the event store.

94
00:12:30,560 --> 00:12:38,330
Then it's consumed and persisted to the Reed Bank account database, the U.S. status quo to one with

95
00:12:38,330 --> 00:12:42,950
a message successfully open a new bank account login to buy sequel.

96
00:12:47,340 --> 00:12:54,990
Then you'll see that we have a new entry into the bank, a card table, and they you'll see John Doe's

97
00:12:54,990 --> 00:12:59,430
I.D. with the balance of 100 also open Mongo DB.

98
00:13:00,090 --> 00:13:05,280
There you'll see a new collection that's been created with the tracking tokens of the bank account,

99
00:13:05,730 --> 00:13:10,080
as well as look into our right database at the main event database.

100
00:13:10,500 --> 00:13:14,640
They'll you'll see a new event, account, open event.

101
00:13:15,180 --> 00:13:20,490
And if we scroll down, you'll see it's the new account that was opened for John Doe.

102
00:13:21,120 --> 00:13:28,050
Now we have successfully completed the restful endpoint that will allow clients to create new bank accounts

103
00:13:28,050 --> 00:13:30,570
via a bank account command API.
