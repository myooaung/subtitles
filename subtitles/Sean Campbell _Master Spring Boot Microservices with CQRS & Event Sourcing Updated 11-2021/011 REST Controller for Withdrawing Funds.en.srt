1
00:00:00,540 --> 00:00:07,890
We have already implemented two race controllers, one for opening a bank account and another for depositing

2
00:00:07,890 --> 00:00:09,540
funds into a bank account.

3
00:00:09,960 --> 00:00:16,740
Now we need to add one that will allow us to withdraw funds from a bank account, navigate to the controllers

4
00:00:16,740 --> 00:00:25,470
package, and at the bank account command API project, let's create a new class and call it withdraw

5
00:00:25,590 --> 00:00:27,120
funds controller.

6
00:00:32,850 --> 00:00:40,260
Go ahead and annotated with the rest controller annotation as well as a request mapping annotation.

7
00:00:42,870 --> 00:00:50,820
For the path, we'll have forward slash API, forward slash V1, forward slash withdraw funds.

8
00:00:54,350 --> 00:01:01,250
Now, the withdraw funds controller will look much like the deposit funds controller, so let's copy

9
00:01:01,250 --> 00:01:05,390
everything up until the reauthorise annotation.

10
00:01:07,480 --> 00:01:17,170
Change the construct to name the and then we will add the signature return, a response entity based

11
00:01:17,170 --> 00:01:23,050
response, and then let's make the method name withdraw funds.

12
00:01:26,790 --> 00:01:31,980
It will likewise take in a pause variable, which will be the bank account ID.

13
00:01:41,120 --> 00:01:44,690
And we will also validate the request body,

14
00:01:48,020 --> 00:01:52,850
which is going to be the withdraw funds command object.

15
00:02:01,650 --> 00:02:06,270
Now, let's add the validation and attention to the amount of.

16
00:02:10,700 --> 00:02:10,870
But.

17
00:02:15,310 --> 00:02:21,130
We will say the withdrawal amount must be greater than zero

18
00:02:27,160 --> 00:02:34,140
now that withdraw funds controller method is going to look a lot like the deposit funds controller method.

19
00:02:34,480 --> 00:02:38,150
So let's go ahead and copy the entire method now.

20
00:02:38,470 --> 00:02:45,160
Very importantly, I have been using the normal same method of the command gateway because it just debunks

21
00:02:45,160 --> 00:02:45,730
better.

22
00:02:46,090 --> 00:02:53,230
And I wanted you to follow along in a synchronous way, however, rather use the sand and wait method

23
00:02:53,230 --> 00:02:54,140
in production.

24
00:02:54,610 --> 00:03:00,730
The reason I am pointing this out again is because there is an exception that will be generated that

25
00:03:00,730 --> 00:03:05,410
we have added to the account aggregate where we handle the withdrawal funds command.

26
00:03:05,800 --> 00:03:09,280
They will check if the balance is smaller than the withdrawal amount.

27
00:03:09,550 --> 00:03:16,990
And if it is, we throw an illegal status exception to say that the withdrawal is declined due to insufficient

28
00:03:16,990 --> 00:03:17,530
funds.

29
00:03:17,920 --> 00:03:23,740
Now, if we invoke the normal sane method like we have done with the previous controllers, the controller

30
00:03:23,740 --> 00:03:30,070
method will actually respond with a success message before it is able to report the exception that has

31
00:03:30,070 --> 00:03:39,040
occurred to ensure that this does not happen at DOT Gate Command gate that send is a computable future

32
00:03:39,310 --> 00:03:42,970
and the dot gate method blocks until the future is complete.

33
00:03:43,270 --> 00:03:48,910
Thus, if an exception occurs, it will hit our catch and respond correctly.

34
00:03:50,150 --> 00:03:57,410
Let's change our response message to withdraw successfully completed.

35
00:04:01,610 --> 00:04:10,220
And error message to error while processing request to withdraw funds from bank account for I.D., and

36
00:04:10,280 --> 00:04:11,390
that should do it.

37
00:04:12,590 --> 00:04:14,600
Let's go ahead and build our project.

38
00:04:20,590 --> 00:04:23,420
And everything should build successfully.

39
00:04:24,130 --> 00:04:33,760
Now let's go ahead and add an API gateway route for withdraw funds, control the message, we can copy

40
00:04:33,760 --> 00:04:35,650
the deposit funds method,

41
00:04:38,770 --> 00:04:42,700
and then they change the idee to withdraw funds

42
00:04:45,490 --> 00:04:57,040
and request mapping past to withdraw funds as well and leave the forward slash star and change that

43
00:04:57,040 --> 00:04:58,430
to withdraw funds as well.

44
00:04:59,350 --> 00:05:01,540
Let's run our API gateway.

45
00:05:04,000 --> 00:05:07,000
As well as a bank account command API.

46
00:05:09,840 --> 00:05:12,480
Also, our bank account query API.

47
00:05:26,330 --> 00:05:33,950
And then we also need to run our OS 2.0 authorisation server to get a JWT.

48
00:05:44,190 --> 00:05:46,920
Now, let's go to Ed Breakpoints.

49
00:05:49,180 --> 00:05:51,610
A break point in our control method.

50
00:05:53,090 --> 00:06:01,700
As well as in our account aggregate, where we handle the withdrawal defense command.

51
00:06:03,450 --> 00:06:15,900
Also with the event sourcing, handler is raised and then finally also add a breakpoint in the account

52
00:06:15,900 --> 00:06:17,100
event handler.

53
00:06:21,550 --> 00:06:24,350
Where we consume the funds withdrawn event.

54
00:06:25,510 --> 00:06:29,970
OK, so let's log into my school bank database again.

55
00:06:34,160 --> 00:06:41,030
Again, we want to go and get the idea of the bank accounts in the bank database, in the bank account

56
00:06:41,030 --> 00:06:46,250
table, then just go ahead and copy the bank account, the.

57
00:06:48,230 --> 00:07:00,470
Add a new tab in person and change it to put your HTP localhost for 2005, the API Gateway again API

58
00:07:00,470 --> 00:07:07,150
V1 withdrawal funds forward, slash the bank account idee.

59
00:07:08,180 --> 00:07:09,920
Let's get a JWT.

60
00:07:21,040 --> 00:07:23,650
Again, added as a parent, taken the.

61
00:07:27,170 --> 00:07:37,160
For our request body, we will add an amount so we know that John Doe's got 150 dollars, but let's

62
00:07:37,160 --> 00:07:40,580
try to withdraw 200 dollars from his account.

63
00:07:41,690 --> 00:07:45,800
He'd send now it will hit our break point.

64
00:07:47,100 --> 00:07:53,480
Also put a break point in the catch in the command handler will see that it raises an illegal status

65
00:07:53,480 --> 00:07:54,230
exception.

66
00:07:54,830 --> 00:07:56,030
It's a catch.

67
00:07:56,660 --> 00:08:03,380
And then it replies with 500 internal server error and error, word processing request to withdraw funds

68
00:08:03,380 --> 00:08:04,310
from bank account.

69
00:08:04,310 --> 00:08:08,900
For Idy, the actual error description will be in the container log.

70
00:08:09,680 --> 00:08:16,450
Now let's update the amount to ninety dollars and then let's try the withdrawal again.

71
00:08:17,410 --> 00:08:18,800
Again, it's our break point.

72
00:08:18,800 --> 00:08:26,840
Dispatch the command and ultimately the event handler considers the event and updates the balance in

73
00:08:26,840 --> 00:08:28,130
the database.

74
00:08:28,640 --> 00:08:32,470
And then you'll see the new balance for John Doe is sixty dollars.

75
00:08:33,170 --> 00:08:39,770
Let's check our right database or event store and there you'll see a new funds withdrawn event.
