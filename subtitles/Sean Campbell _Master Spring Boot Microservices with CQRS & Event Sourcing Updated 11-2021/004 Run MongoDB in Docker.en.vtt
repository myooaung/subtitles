WEBVTT
1
00:00:00.120 --> 00:00:03.600
The next thing that we are going to deploy in Docker is MongoDB.

2
00:00:03.990 --> 00:00:07.650
Again, the reason we want to do this is because of the simplicity.

3
00:00:08.040 --> 00:00:13.380
But more specifically, because we want our containers to be able to connect to MongoDB.

4
00:00:13.800 --> 00:00:18.630
You can see the Docker rank command that we are going to use to deploy MongoDB.

5
00:00:19.260 --> 00:00:26.550
So let's start with the command sudo docker run dash eity dash D4 detach again.

6
00:00:29.850 --> 00:00:33.270
Our container name, mango hyphen container.

7
00:00:37.460 --> 00:00:43.700
Then we'll use the standard MongoDB reports, 20, seven zero one seven internal and external.

8
00:00:44.240 --> 00:00:51.560
And we will also put the Mongo container in the same network, Springbank Net, as well as specify the

9
00:00:51.560 --> 00:00:53.270
restart policy as always.

10
00:00:53.690 --> 00:00:57.800
Now, Dash V allows us to specify a Docker volume.

11
00:00:58.100 --> 00:01:04.580
Now, in order to be able to save or persist data and also to share data between containers, Docker

12
00:01:04.580 --> 00:01:06.680
came up with the concept of volumes.

13
00:01:06.800 --> 00:01:14.090
Quite simply, volumes are directories of files that are outside of the default union file system and

14
00:01:14.090 --> 00:01:17.780
exists as normal directories and files on the host file system.

15
00:01:17.780 --> 00:01:24.410
So this is not in the container itself because if it was, we would lose the data every time the container

16
00:01:24.410 --> 00:01:25.640
is recreated.

17
00:01:25.640 --> 00:01:31.820
And that is something that we want the recreation of containers and that will make more sense when we

18
00:01:31.820 --> 00:01:34.940
get to the containerization section later in this course.

19
00:01:35.450 --> 00:01:42.620
OK, now the final thing is just to add the image name, which is Mongo, and then also specify the

20
00:01:42.620 --> 00:01:43.700
latest version.

21
00:01:47.390 --> 00:01:50.540
It seems like I'm unable to reach the Reaper.

22
00:01:50.570 --> 00:01:51.420
Let's try again.

23
00:01:51.440 --> 00:01:52.310
And there we go.

24
00:01:52.640 --> 00:01:58.280
You will see that the Monga latest image is being pulled from the Docker hub repo.

25
00:01:58.970 --> 00:01:59.520
OK.

26
00:01:59.810 --> 00:02:02.630
And now it has been deployed again.

27
00:02:02.630 --> 00:02:10.190
We can run sudo Docker place and they will see the excellent server and now the Mongo container deployed.

28
00:02:10.700 --> 00:02:11.240
OK.

29
00:02:11.270 --> 00:02:16.460
I've installed robo 3T as the client tools as indicated in the slide.

30
00:02:16.640 --> 00:02:22.010
But you can use the Mongo Shell or any other Mongo client that you prefer.

31
00:02:22.040 --> 00:02:27.320
But if you're using robo 3D like I am, you can go ahead and create a new connection.

32
00:02:27.530 --> 00:02:30.770
I'm going to call the connection Mongo in Docker.

33
00:02:32.810 --> 00:02:38.970
And in brackets local, you can keep the addresses local and then the port as the default port.

34
00:02:38.990 --> 00:02:43.820
Two seven zero one seven four Now we are not going to enable authentication.

35
00:02:43.850 --> 00:02:44.210
OK?

36
00:02:44.210 --> 00:02:45.200
Click on Taste.

37
00:02:45.260 --> 00:02:50.240
There you can see that robo treaty successfully connects to a MongoDB container.

38
00:02:50.340 --> 00:02:56.240
OK, now if you connect, you will see that we only have the default system databases.
