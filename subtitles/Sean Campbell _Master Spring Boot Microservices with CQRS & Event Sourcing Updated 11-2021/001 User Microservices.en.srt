1
00:00:00,420 --> 00:00:03,600
Welcome to the use of MICRA services section.

2
00:00:03,930 --> 00:00:06,810
This is the section that you have all been waiting for.

3
00:00:07,110 --> 00:00:13,650
Here we are going to start with hands on coding, but what exactly are you going to build?

4
00:00:14,950 --> 00:00:21,280
Let's again have a look at the implementation and deployment view of the architecture of everything

5
00:00:21,280 --> 00:00:27,610
that we are going to build in this course, in this section, we are going to implement micro services

6
00:00:27,610 --> 00:00:29,060
for our user domain.

7
00:00:29,560 --> 00:00:37,150
We are going to use securest to segregate a user domain into two micro services, including a user command

8
00:00:37,150 --> 00:00:40,120
API and the user query API.

9
00:00:40,600 --> 00:00:48,010
The User Command API is going to handle several user commands and once handled, it is going to raise

10
00:00:48,010 --> 00:00:54,820
user events and stored into an event store using a Mongo DB event storage engine.

11
00:00:54,820 --> 00:00:58,160
And then it is going to publish these events to the event.

12
00:00:58,160 --> 00:01:02,920
Plus the query API will then subscribe to these events.

13
00:01:03,220 --> 00:01:10,480
Once handled, it will use the event payload to create and update the user database, which will also

14
00:01:10,480 --> 00:01:12,850
be stored in a Mongo DB database.

15
00:01:13,330 --> 00:01:20,350
Our query API will also expose in a restful endpoint that will allow client applications to query our

16
00:01:20,350 --> 00:01:21,430
user data.

17
00:01:22,030 --> 00:01:24,880
Now let's zoom in a little further.

18
00:01:25,150 --> 00:01:31,240
The component diagram details all the projects, packages and software components that you're going

19
00:01:31,240 --> 00:01:32,910
to implement in the section.

20
00:01:33,340 --> 00:01:39,340
We will start by implementing the domain models, including the main user model, the account model,

21
00:01:39,730 --> 00:01:45,940
which will contain the user credentials such as username and password, and the role model, which is

22
00:01:45,940 --> 00:01:52,480
going to be an enum that we use for specifying the user roles for authorization purposes.

23
00:01:52,870 --> 00:01:58,990
They after we are going to create the user command objects, including the registered user command,

24
00:01:59,230 --> 00:02:03,060
update user command and remove user command objects.

25
00:02:03,460 --> 00:02:10,690
We will then define the event objects, including the user registered event user updated event and user

26
00:02:10,690 --> 00:02:11,860
removed event.

27
00:02:12,310 --> 00:02:17,770
Once our command and event objects are created, we will create the user aggregate.

28
00:02:18,190 --> 00:02:22,470
The user aggregate will form the core of the User Command API.

29
00:02:22,810 --> 00:02:29,260
It is where the commands will be handled and once handled, events will be raised stored into the event

30
00:02:29,260 --> 00:02:35,620
store via the event sourcing repository and published to the event press notice.

31
00:02:35,620 --> 00:02:42,550
The event sourcing repository is placed outside of the User Command API project because it forms part

32
00:02:42,550 --> 00:02:47,550
of the action framework and is abstracted for the sake of simplicity.

33
00:02:48,070 --> 00:02:53,290
We will then implement the user, event handler and initial user repository.

34
00:02:53,620 --> 00:03:00,130
The user event handler will subscribe to the event, pass and handle the User Register event to create

35
00:03:00,130 --> 00:03:05,440
a new user record via the user repository into the user database.

36
00:03:05,770 --> 00:03:12,430
In the same way it will handle the user updated event and use it to update the user record in the user

37
00:03:12,640 --> 00:03:17,890
database via the user repository and likewise use the user.

38
00:03:17,890 --> 00:03:23,170
Remove the event to delete a user record from the user read database.

39
00:03:23,680 --> 00:03:30,700
We will then create three controllers, including a registered user controller, update user controller

40
00:03:30,700 --> 00:03:37,420
and remove user controller to expose restful endpoints that client applications can use to create,

41
00:03:37,430 --> 00:03:39,610
update and delete users.

42
00:03:40,060 --> 00:03:46,900
We will also create a base response DTA object that will contain a message field that most of the command

43
00:03:46,900 --> 00:03:48,820
type controllers will return.

44
00:03:49,210 --> 00:03:56,230
However, for the registered user controller, we will create a registered user response DTA object

45
00:03:56,560 --> 00:04:02,380
that will extend the base response update to include the idea of the newly created user.

46
00:04:02,890 --> 00:04:10,360
The after we will define our query objects, including a find all users query, find user by idee,

47
00:04:10,360 --> 00:04:13,030
query and search users query.

48
00:04:13,450 --> 00:04:20,380
Then we will implement and user query handler that will handle these queries and query data from the

49
00:04:20,380 --> 00:04:24,310
user database via the user repository.

50
00:04:24,640 --> 00:04:32,530
At this point, we will be extending the user repository to add some custom query methods and finally

51
00:04:32,830 --> 00:04:39,290
we are going to implement a user lookup controller that will expose a racial endpoint, that will allow

52
00:04:39,340 --> 00:04:47,470
client applications to query user data and it will return a user lookup response Tyto that will contain

53
00:04:47,470 --> 00:04:51,760
a field for list of users which return one or more users.

54
00:04:52,090 --> 00:04:57,430
And likewise the user lookup response D2 will extend the base response.

55
00:04:57,430 --> 00:05:03,910
Teto, I hope you are now excited to start building your user Marcus services.
