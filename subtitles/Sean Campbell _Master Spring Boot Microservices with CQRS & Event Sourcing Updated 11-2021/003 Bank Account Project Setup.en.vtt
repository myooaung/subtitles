WEBVTT
1
00:00:00.210 --> 00:00:04.660
We are now ready to set up a bank account MICRA service projects.

2
00:00:04.830 --> 00:00:10.580
First, we are going to create a new parent project for our bank account projects.

3
00:00:11.010 --> 00:00:16.900
Then we are going to add each of our bank account projects as modules to the bank account parent period

4
00:00:16.920 --> 00:00:18.840
project the after.

5
00:00:19.170 --> 00:00:25.320
We will add the Exxon dependencies to the poem that XML files of each of our respective bank account

6
00:00:25.320 --> 00:00:32.250
projects, then we will structure our projects according to securest and domain driven design based

7
00:00:32.250 --> 00:00:36.120
practices by creating all of the required packages.

8
00:00:36.540 --> 00:00:43.170
We will also configure Exxon to make use of the Mongo DB event storage engine like we have done for

9
00:00:43.170 --> 00:00:44.810
the use of micro services.

10
00:00:45.240 --> 00:00:51.900
Then we will add micro service config to the application that Winmar files of our command and query

11
00:00:51.900 --> 00:00:52.730
APIs.

12
00:00:53.010 --> 00:00:59.940
And finally, we will convert the bank account core project into a library project in intelligence.

13
00:01:00.180 --> 00:01:11.220
You can create a new parent project by clicking on file new module Mavin and then lets browse to user

14
00:01:11.220 --> 00:01:12.630
micro services are.

15
00:01:15.730 --> 00:01:25.690
And then let's give a parent project a name such as Bank Hyphen Account, and they just put it in a

16
00:01:25.690 --> 00:01:26.630
new folder.

17
00:01:27.010 --> 00:01:37.090
Also, bank hyphen account group EDEK come that spring bank again and then give it a proper version,

18
00:01:37.090 --> 00:01:39.560
version 1.0 point zero.

19
00:01:40.210 --> 00:01:45.850
OK, now we can specify packaging type as poem.

20
00:01:52.700 --> 00:01:59.690
And then let's go ahead and move our bank account project to the new bank account directory where our

21
00:01:59.690 --> 00:02:02.290
parent period project is situated.

22
00:02:03.070 --> 00:02:04.580
It's extracted there.

23
00:02:10.340 --> 00:02:11.690
A query API.

24
00:02:16.670 --> 00:02:24.740
And then you see them, they delete the source folder as well as the bank account email file.

25
00:02:25.640 --> 00:02:33.050
OK, now let's add the three bank account projects as modules to appear parent project.

26
00:02:35.930 --> 00:02:39.590
First will add the bank account called Project.

27
00:02:42.770 --> 00:02:51.890
Secondly, we can add the bank account command API project, and then lastly, let's add the bank account

28
00:02:51.890 --> 00:02:53.570
query API project.

29
00:02:56.200 --> 00:03:02.290
OK, now you can go ahead and open the XML file.

30
00:03:06.280 --> 00:03:15.460
Let's give it a proper version, 1.0 Porgera as well, and then we can go ahead and add Exxon dependencies.

31
00:03:16.580 --> 00:03:27.200
So first, we can add the Xen spring, which starts a dependency to a bank account, command APIs or

32
00:03:27.230 --> 00:03:28.190
XML file.

33
00:03:29.030 --> 00:03:32.810
We also need to add the spring security dependencies.

34
00:03:33.140 --> 00:03:41.820
So go ahead and open the user command API projects aimed at XML file and copy the spring security or

35
00:03:41.900 --> 00:03:52.010
to spring security oath to auto configure and the spring security JWT dependencies pasted into our bank

36
00:03:52.010 --> 00:03:54.820
account command API that XML file.

37
00:03:55.250 --> 00:04:01.850
Now let's copy the Xen framework dependancy as well as the three spring security dependencies.

38
00:04:02.450 --> 00:04:06.950
Open up the Palm that XML file of the bank account query API.

39
00:04:09.540 --> 00:04:16.260
First, give it a proper version, one point zero point zero, and then let's paste our four dependencies

40
00:04:16.260 --> 00:04:19.640
that we've added to the bank account command API as well.

41
00:04:23.120 --> 00:04:31.400
The excellent spring which started dependancy, as well as the three spring security dependencies now

42
00:04:31.400 --> 00:04:32.030
again.

43
00:04:33.310 --> 00:04:42.220
This copy, the excellent spring which started Appignanesi only and open up the bank account core project

44
00:04:42.430 --> 00:04:43.810
aimed at XML file.

45
00:04:44.850 --> 00:04:51.090
Again, start by giving it a proper version, one point zero point zero.

46
00:04:54.130 --> 00:04:59.830
And then let's paste Exxon Spring, which started dependancy, they.

47
00:05:02.560 --> 00:05:07.330
And Ed, another excellent dependency, the ex on Mongo dependency.

48
00:05:08.730 --> 00:05:10.950
Select the latest version, the.

49
00:05:16.440 --> 00:05:23.280
Now, to make a bank account coal project, a library project, we need to delete the bald section in

50
00:05:23.280 --> 00:05:25.020
its XML file.

51
00:05:27.920 --> 00:05:34.220
And we also need to delete two more files, basically the application file.

52
00:05:36.630 --> 00:05:39.840
As well as the application taste's file.

53
00:05:41.170 --> 00:05:44.680
And that or to turn it into a library project.

54
00:05:48.780 --> 00:05:50.800
Let's create our packages.

55
00:05:51.540 --> 00:05:56.850
We can start with the models package in our bank account core project.

56
00:05:57.750 --> 00:06:07.200
Secondly, add a package for configuration with another package for events,

57
00:06:11.190 --> 00:06:13.740
yet another package for Teto.

58
00:06:16.840 --> 00:06:21.310
OK, now let's go to the bank account query API.

59
00:06:30.510 --> 00:06:35.640
First, let's rename the application file to bank query application.

60
00:06:46.460 --> 00:06:53.790
And then they can rename the application Fall of the bank account command API application as well.

61
00:06:54.410 --> 00:06:58.430
Change it to bank account command application.

62
00:07:02.460 --> 00:07:10.440
OK, let's just add the ICC to the bank query application, make it a bank account, query application

63
00:07:10.440 --> 00:07:13.620
bank, ICC query application.

64
00:07:14.310 --> 00:07:20.370
OK, so let's add the packages to our bank account command API.

65
00:07:20.380 --> 00:07:27.330
First, a package for commands, then it's a package for the aggregates

66
00:07:33.030 --> 00:07:35.760
and another package for our race controllers.

67
00:07:43.260 --> 00:07:46.980
And another package for the dittos.

68
00:07:48.000 --> 00:07:55.230
OK, now let's add the packages for bank account query API, first, a package for queries.

69
00:08:00.030 --> 00:08:09.450
Another package for handlers, we will add event and query handlers, another package for repositories,

70
00:08:15.220 --> 00:08:17.140
another package for controllers,

71
00:08:20.790 --> 00:08:23.770
and then finally, a package for DTL.

72
00:08:24.990 --> 00:08:32.190
OK, now we've added all of the packages that we are going to need for bank account projects.

73
00:08:32.460 --> 00:08:37.110
Let's go ahead and copy the excellent config file from the user code project.

74
00:08:44.310 --> 00:08:50.820
And we can actually just go ahead and pasted into our configuration package in a bank account called

75
00:08:50.820 --> 00:08:51.540
Project.

76
00:08:53.070 --> 00:09:00.210
And it will do the refactoring on our behalf, we will just change the database name, the default database

77
00:09:00.210 --> 00:09:01.380
name to bank.

78
00:09:02.940 --> 00:09:04.490
And the race stays the same.

79
00:09:08.200 --> 00:09:12.640
Now let's go to the bank account command application.

80
00:09:12.670 --> 00:09:13.600
Open it up.

81
00:09:14.990 --> 00:09:24.710
And then we need to add a few annotations first import to import the accent config clause from the bank

82
00:09:24.710 --> 00:09:32.510
account core project, and then secondly, we need to add enable resource server.

83
00:09:35.600 --> 00:09:40.490
As well as enable global message security.

84
00:09:46.090 --> 00:09:48.460
Pre post enabled to.

85
00:09:50.320 --> 00:09:55.150
And then we also need to add enable or configuration.

86
00:10:00.770 --> 00:10:06.230
And then we'll say exclude datasource or to configuration that Flosse.

87
00:10:12.770 --> 00:10:14.000
Copy all of that.

88
00:10:17.110 --> 00:10:21.430
And open up the bank account query application.

89
00:10:25.390 --> 00:10:34.150
Now, the reason that we have the excluded data sources that will only be on the bank account command

90
00:10:34.150 --> 00:10:43.480
API because we will only connect to a spring date to JPA enabled database on the query side, that will

91
00:10:43.480 --> 00:10:47.380
basically be our MySQL bank account database.

92
00:10:56.510 --> 00:11:05.200
OK, so now go ahead and open up the resources package and delete the applications that properties file,

93
00:11:05.990 --> 00:11:11.570
we are going to replace it with an application that we file, which is more popular.

94
00:11:21.600 --> 00:11:26.560
First, let's configure a port for our bank account command API.

95
00:11:27.180 --> 00:11:40.380
Let's use Port 1991 and then let's go ahead and add our Mongo DB config spring date, Mongo DB.

96
00:11:46.590 --> 00:11:57.720
Host, they choose local host Brookport two seven one seven, the default mongoloids report and then

97
00:11:57.720 --> 00:12:01.110
flood database will use bank.

98
00:12:02.850 --> 00:12:07.710
OK, let's add our security config security

99
00:12:10.020 --> 00:12:13.980
oath to resource

100
00:12:16.500 --> 00:12:17.790
JWT

101
00:12:20.400 --> 00:12:22.040
and key value.

102
00:12:22.920 --> 00:12:29.120
Let's go and copy this from our User Command APIs Application Properties file.

103
00:12:35.070 --> 00:12:40.050
OK, Spring Bank signing key now in production.

104
00:12:40.050 --> 00:12:42.120
Please use a beta key than that.

105
00:12:43.140 --> 00:12:47.190
OK, copy all the contents of application via email file.

106
00:12:53.340 --> 00:12:59.430
For the bank account query API, we are again going to delete the application that properties file and

107
00:12:59.430 --> 00:13:02.250
creates a new application that Vimal file

108
00:13:06.120 --> 00:13:10.050
based there and change the board to 1992.

109
00:13:10.650 --> 00:13:17.490
Now the bank account query API also needs configuration for my school database connection.

110
00:13:18.030 --> 00:13:21.600
So a JPA database platform.

111
00:13:26.830 --> 00:13:38.800
And then, OK, Todd, hibernate, dot dialect, dot, my sequel, eight dialect.

112
00:13:40.030 --> 00:13:46.210
So we basically specifying the MySQL dialect show sequel to.

113
00:13:52.210 --> 00:13:53.200
Hibernates.

114
00:13:57.330 --> 00:14:07.040
Dell'Orto said, sit to update, and that's basically going to create the bank account card table to

115
00:14:07.040 --> 00:14:14.210
mimic what we've defined in our bank account entity, and if we change it, it will update the table

116
00:14:14.210 --> 00:14:14.770
as well.

117
00:14:15.200 --> 00:14:27.170
Then add datasource your URL, see my sequel Forward Slash Forward Slash Localhost PT. three three zero

118
00:14:27.170 --> 00:14:28.670
six as the default.

119
00:14:28.670 --> 00:14:35.240
My sequel put forward slash bank, which is our database name for the user name, will use root.

120
00:14:38.590 --> 00:14:42.970
But for the password, we'll use spring bank route.

121
00:14:44.230 --> 00:14:52.930
P is W again, this is just for simplicity's sake, that in production, please use a stronger password.

122
00:14:53.740 --> 00:15:02.770
OK, let's try and build our projects and the boat should fail and I'll show you now why.

123
00:15:13.270 --> 00:15:20.800
Now, remember, the hibernates auto actually creates the table according to the bank account entity,

124
00:15:20.800 --> 00:15:25.000
but not the database and therefore this is unknown database bank.

125
00:15:28.640 --> 00:15:36.500
So let's log into my school database, copy the password, so for the username, it's root, paste the

126
00:15:36.500 --> 00:15:42.260
password in there and then if you log in, you'll only see the default system databases.

127
00:15:42.380 --> 00:15:45.140
Let's create a new database and call it bank.

128
00:15:46.410 --> 00:15:55.650
And safe now go back and then let's build again Mavin M.V., a clean install.

129
00:16:00.700 --> 00:16:03.970
And this time, everything should build successfully.
