1
00:00:00,240 --> 00:00:06,240
In this lecture, we are going to create the domain models for user micro services.

2
00:00:06,810 --> 00:00:16,710
We will start by creating the user model and the models package that we have created in the user core

3
00:00:16,710 --> 00:00:17,430
project.

4
00:00:17,970 --> 00:00:21,120
Let's create a new class and call it user.

5
00:00:22,260 --> 00:00:27,570
Now, the first thing that we are going to do is to add an ad data annotation.

6
00:00:28,110 --> 00:00:34,740
You will remember that we added Lombok as a dependency when we generated our springboard projects.

7
00:00:35,860 --> 00:00:43,480
When adding the ad data annotation, Lombok will automatically generate the Gators and Setas, the two

8
00:00:43,480 --> 00:00:48,700
string method and the equals and hash code method for the user model class.

9
00:00:49,450 --> 00:00:57,940
Next, we will add the ad Borlaug's construct constructor annotation to tell Lombok to generate a constructive

10
00:00:57,940 --> 00:01:04,780
for a user model class that takes in an argument or parameter for each of the fields that we are going

11
00:01:04,780 --> 00:01:05,680
to define.

12
00:01:06,280 --> 00:01:14,230
Let's also add an ADD No ARC's construct to generate an empty constructor that takes in no arguments

13
00:01:14,230 --> 00:01:15,400
or parameters.

14
00:01:16,030 --> 00:01:24,790
OK, now let's add the Etch Boulder annotation, which tells Lombok to generate a complex boulder for

15
00:01:24,790 --> 00:01:30,280
the user model class that complies to the Boulder creation of design pattern.

16
00:01:30,970 --> 00:01:39,610
Finally, let's add the document annotation, which is a Mongo DB annotation that is used to mark a

17
00:01:39,610 --> 00:01:48,430
class as a domain model that will be posted to the database Monga DB store such records as Jason like

18
00:01:48,430 --> 00:01:53,800
documents that is referred to as besoin documents or binary.

19
00:01:53,800 --> 00:02:00,580
Jason Monga DB is also referred to as a document oriented no siecle database.

20
00:02:01,120 --> 00:02:06,400
The document annotation also allows us to specify the name of the collection.

21
00:02:06,780 --> 00:02:10,820
We want to put or store our user documents.

22
00:02:11,230 --> 00:02:13,960
So let's call our collection users.

23
00:02:14,650 --> 00:02:17,780
Notice a collection is always in the plural.

24
00:02:18,610 --> 00:02:23,520
OK, now let's create a few private fields for our user model class.

25
00:02:24,010 --> 00:02:27,010
We can start by adding an add ID field.

26
00:02:27,610 --> 00:02:34,570
If you're familiar with Mongo DB, you will know that a Monga DB document contains an underscore ID

27
00:02:34,570 --> 00:02:41,920
field, which is a unique identifier that uniquely identifies each document in a collection.

28
00:02:42,490 --> 00:02:50,190
We can use the at Idy annotation to map idee field to the Mongo DB ID field.

29
00:02:50,980 --> 00:02:55,750
OK, next, let's add a private field for the first time of the user,

30
00:03:00,160 --> 00:03:01,840
another for the last name.

31
00:03:06,940 --> 00:03:08,580
An email address failed.

32
00:03:14,710 --> 00:03:17,340
And finally, an account field.

33
00:03:21,460 --> 00:03:25,930
Now let's create another class for our current model.

34
00:03:28,580 --> 00:03:32,210
We can create it under the same package models.

35
00:03:33,110 --> 00:03:42,650
Now, again, we are going to add the data annotation, the ad all arcs, constructor annotation, the

36
00:03:42,650 --> 00:03:48,350
ad no ARC's constructor annotation and the at Boulder annotation.

37
00:03:49,040 --> 00:03:52,310
Then we are going to add a few important fields.

38
00:03:52,340 --> 00:03:54,350
Let's start with a user name.

39
00:03:56,870 --> 00:03:58,850
We also need a password

40
00:04:01,490 --> 00:04:08,610
and then we need another important field that allows us to provide a user with one or more user roles.

41
00:04:09,020 --> 00:04:16,300
So let's add a list of role where role will be an enum that we are going to define just now.

42
00:04:21,050 --> 00:04:23,510
Let's create a new enum.

43
00:04:24,540 --> 00:04:35,160
And call it role to ensure that our roles complies to the granted authority roles that are part of the

44
00:04:35,160 --> 00:04:41,610
spring starter security package, we need to implement the granted authority interface.

45
00:04:45,590 --> 00:04:49,130
Let's just implement the interface.

46
00:04:52,570 --> 00:04:56,530
Get authority, miss, it will come back to just now.

47
00:04:57,400 --> 00:05:04,330
Now, if we think about how we are segregating our military services into Command API and the Query

48
00:05:04,340 --> 00:05:13,540
API, I think it is good to have a role that allows reads or queries and another role that allows rights

49
00:05:13,570 --> 00:05:14,610
or commands.

50
00:05:15,010 --> 00:05:19,300
So let's add the first role for read privilege.

51
00:05:25,970 --> 00:05:29,990
And the second role for right privilege.

52
00:05:36,730 --> 00:05:45,370
Now, for the Gate Authority method that we are overriding, we are just going to return the name,

53
00:05:46,690 --> 00:05:53,650
let's just make that case, OK, now our roll in is completed.

54
00:05:54,220 --> 00:05:56,680
Let's just add the import for the list.

55
00:05:57,610 --> 00:06:02,060
And current model is fine as well as our user model.

56
00:06:02,620 --> 00:06:07,690
That concludes the creation of our domain models.
