1
00:00:00,210 --> 00:00:07,090
In the previous lecture, we completed the creation of a registered user controller in this lecture.

2
00:00:07,380 --> 00:00:14,230
We are going to make an HTP request to the registered user controller to register our very first user.

3
00:00:14,370 --> 00:00:22,740
I will also show you how to query the right database or event store in Mongo DB as well as the database

4
00:00:22,740 --> 00:00:26,280
after we have successfully registered our first users.

5
00:00:27,980 --> 00:00:31,070
Now let's debug User Command API.

6
00:00:34,260 --> 00:00:41,340
In intelligence, you can simply right click on the user command application file and click on Debug.

7
00:00:47,540 --> 00:00:55,370
Now, you will notice that I use a command API is running on Port 1881, like we've configured it in

8
00:00:55,370 --> 00:00:57,530
the application that properties file.

9
00:00:58,010 --> 00:01:05,470
Now let's open postmen to make a HTP post request to use a command API.

10
00:01:06,200 --> 00:01:13,180
Remember the request mapping forward slash API, forward slash version one forward slash register user.

11
00:01:14,510 --> 00:01:24,000
Let's change it to a post htp zip and then select raw and body and change the content type to Jason.

12
00:01:24,710 --> 00:01:28,850
Now, for now, we only going to send an empty Jason body.

13
00:01:32,770 --> 00:01:38,140
Notice that we got a photo, one, which means our request is unauthorized.

14
00:01:38,590 --> 00:01:46,170
The reason we got a photo one is because we added the spring boots start to security dependency to use

15
00:01:46,180 --> 00:01:48,010
a command API project.

16
00:01:48,310 --> 00:01:50,940
In the end, this is exactly what we want.

17
00:01:51,310 --> 00:01:58,600
But first, we need to register a couple of users and we still have to create our own 2.0 authorization

18
00:01:58,600 --> 00:02:01,910
server, which we are going to do in the next section.

19
00:02:02,200 --> 00:02:09,670
For now, we can go ahead and create a security config clause where we will temporarily configure our

20
00:02:09,670 --> 00:02:14,740
User Command API project to accept all HTTP requests.

21
00:02:15,130 --> 00:02:22,050
This is a temporary class which we will remove once our OS 2.0 authorization server is ready.

22
00:02:22,360 --> 00:02:29,140
Go ahead and create a new package under the User Command API project and call it config.

23
00:02:31,950 --> 00:02:35,470
Let's create a new class and call it security Kornfield.

24
00:02:37,440 --> 00:02:41,340
Let's go ahead and add the ED configuration annotation

25
00:02:43,710 --> 00:02:47,880
and the ED enabled Web security annotation.

26
00:02:52,750 --> 00:03:00,400
Then we will extend the Web security configure adapter interface.

27
00:03:12,730 --> 00:03:17,950
Go ahead and override the configure method.

28
00:03:19,330 --> 00:03:27,010
The one that takes in HTP security, then you can say HTP that authorized request.

29
00:03:31,570 --> 00:03:33,250
Dirt and matches.

30
00:03:36,210 --> 00:03:41,100
Forward slash star, star, dot permit all.

31
00:03:45,090 --> 00:03:50,880
I'm just going to move these to the next slide, looks much better like that,

32
00:03:55,410 --> 00:04:01,140
and then dot any request dot authenticated.

33
00:04:04,990 --> 00:04:10,420
Dot and dot, see is our Earth

34
00:04:14,020 --> 00:04:21,730
dot disabled and that will basically allow that any HTP request will be authenticated.

35
00:04:22,280 --> 00:04:25,070
OK, now we are going to dbag again.

36
00:04:25,270 --> 00:04:27,700
Let's go ahead and add a few breakpoints.

37
00:04:28,120 --> 00:04:34,600
I'm going to change it to the second method instead of sending wait, I found that it's better when

38
00:04:34,750 --> 00:04:36,460
trying to step through your code.

39
00:04:37,390 --> 00:04:45,340
Then we can also go to the user aggregate and add a breakpoint in the command handling constructor as

40
00:04:45,340 --> 00:04:49,620
well as in the event sourcing handling method for the user registered event.

41
00:04:50,470 --> 00:05:00,070
We can also go to the user event, handle the implementation and add a breakpoint in the event handler,

42
00:05:00,070 --> 00:05:02,530
a method for the user registered event.

43
00:05:03,310 --> 00:05:03,850
OK.

44
00:05:06,130 --> 00:05:13,030
Now that we have all our breakpoints in place, let's debug the user query application.

45
00:05:17,190 --> 00:05:20,280
As well as the user command application.

46
00:05:29,180 --> 00:05:36,860
Now that both of them are running, let us go and look at the structure of a user domain object.

47
00:05:44,190 --> 00:05:51,090
As well as our can't object because we need to send a Jason request body that resembles the registered

48
00:05:51,090 --> 00:06:00,600
user command open postman again, we can start by adding the Jason body for the user object will use

49
00:06:00,600 --> 00:06:05,400
the infamous John Doe first name,

50
00:06:10,200 --> 00:06:10,740
John.

51
00:06:14,410 --> 00:06:18,010
Last name, though,

52
00:06:20,920 --> 00:06:22,360
for the email address,

53
00:06:27,100 --> 00:06:30,790
we can use John at Spring Bank dot com,

54
00:06:38,290 --> 00:06:40,450
then for the account credentials

55
00:06:44,830 --> 00:06:50,310
for the username, we can specify it as John D.

56
00:06:55,750 --> 00:07:00,480
And then for the password, something as simple as password.

57
00:07:00,490 --> 00:07:06,090
One way we can add a capital P and add sine and zero.

58
00:07:07,120 --> 00:07:16,170
And then finally, remember, for the roles, we have two roles, a privilege and a right privilege.

59
00:07:17,110 --> 00:07:24,550
Let's give John Doe both privileges, which effectively means that John will be able to make requests

60
00:07:24,550 --> 00:07:34,210
to the User Command API that represents the rights as well as the user query API that represents the

61
00:07:34,210 --> 00:07:34,780
reads.

62
00:07:40,850 --> 00:07:42,170
Let's click on Send.

63
00:07:44,340 --> 00:07:48,660
And there you can see that it hits a breakpoint in a post, makes it.

64
00:07:51,060 --> 00:08:00,300
It also invokes the common handler constructor in a user aggregate there we are getting the hashed password

65
00:08:01,050 --> 00:08:03,390
from password hashing algorithm.

66
00:08:05,930 --> 00:08:14,360
And then we can instantiate a new event object, and then when we invoke aggregate life cycle or apply

67
00:08:15,050 --> 00:08:17,510
the event, saucing handler will be raised.

68
00:08:19,220 --> 00:08:27,380
And once that happens, the event handler will consume the event that was published to the event store

69
00:08:27,830 --> 00:08:31,090
and save the user object into Mongo DB.

70
00:08:32,200 --> 00:08:39,350
OK, open robo three T or the Mongo's Shell and connect to your local Mongo DB instance that is running

71
00:08:39,350 --> 00:08:40,070
in Dukkha.

72
00:08:40,670 --> 00:08:47,810
Here you will see that two new databases were created, including Xen Framework and Yuzu, where the

73
00:08:47,810 --> 00:08:54,470
Xen framework is our event store or right database and the user database is Arete Database.

74
00:08:54,710 --> 00:08:59,720
Exon Storrar User Registered event at the moment that are event saucing.

75
00:08:59,720 --> 00:09:06,590
Handler was raised in the user aggregate and we're now event handler method was raised after the event

76
00:09:06,590 --> 00:09:07,910
was consumed from the event.

77
00:09:07,910 --> 00:09:15,380
But in our user event handler, we invoke the save method of our user repository to store the user record

78
00:09:15,380 --> 00:09:21,650
in the user database, expand the Exon Framework database to view our events.

79
00:09:21,920 --> 00:09:26,710
We can right click on the Domain Events collection and click on View documents.

80
00:09:27,320 --> 00:09:28,850
I like the adjacent view.

81
00:09:29,030 --> 00:09:34,280
Yeah, you can see our user register event with details in the serialized payload.

82
00:09:42,940 --> 00:09:48,490
Expand the user database and right, click on the user's collection and click on view documents.

83
00:09:48,880 --> 00:09:51,160
Again, I'm going to use the adjacent view.

84
00:09:51,730 --> 00:09:55,120
They can see John Doe we have just registered.

85
00:09:55,450 --> 00:09:59,260
And here you can see how the hash password is stored in the database.

86
00:09:59,840 --> 00:10:04,270
Let's register another user, Jane Doe.

87
00:10:04,750 --> 00:10:09,670
Let's change it to Jane at Spring Bank dot com Jane D..

88
00:10:10,390 --> 00:10:11,980
Let's make it past two.

89
00:10:12,640 --> 00:10:19,150
And now let's only give Jane Reid privileges, which means she will only be able to call the query APIs.

90
00:10:20,230 --> 00:10:25,930
Again, we can step through the code, the command gate, but we'll dispatch the command.

91
00:10:28,220 --> 00:10:31,430
Again, we will hash Jain's password.

92
00:10:38,160 --> 00:10:49,540
Publish, stole the event, consume the event and save it to the Mongo DB user database, press F5 and

93
00:10:49,540 --> 00:10:52,870
they you'll see Jane Doe was added to the database.

94
00:10:53,940 --> 00:11:01,440
We can also look in the domain events to see a new entry of user registered event that was used to create

95
00:11:01,440 --> 00:11:03,150
Jane's user record.

96
00:11:10,970 --> 00:11:15,420
Remember, we added the validation annotations to other main updates.

97
00:11:16,010 --> 00:11:23,750
Now, it will only work if we add the at valid annotation before our request body in our post method.

98
00:11:32,740 --> 00:11:39,520
We also need to add the Ed Fetich annotation to use a field in outrageous to use a common object.

99
00:11:40,330 --> 00:11:50,020
And let's also add a not no validation annotation to provide the user with the message that no user

100
00:11:54,310 --> 00:11:57,310
that no user details were supplied.

101
00:12:00,660 --> 00:12:09,570
We also need to add the at valid annotation for nested objects, we can go ahead and add it to the account

102
00:12:09,570 --> 00:12:10,170
object.

103
00:12:11,650 --> 00:12:15,280
OK, let's stop Dybek sessions.

104
00:12:21,320 --> 00:12:23,810
And let's restart a new session.

105
00:12:26,980 --> 00:12:31,450
For both the user query API and the User Command API.

106
00:12:34,320 --> 00:12:36,390
OK, if we go back to Postman.

107
00:12:39,400 --> 00:12:42,440
We can exclude some of our fields.

108
00:12:43,390 --> 00:12:46,360
Now let's first add a McDo.

109
00:12:54,170 --> 00:13:02,090
And let's add an incorrect email address there you will see that a default message states please provide

110
00:13:02,090 --> 00:13:03,710
a valid email address.

111
00:13:04,760 --> 00:13:09,880
OK, let's only give Mike a username, email.

112
00:13:12,000 --> 00:13:16,650
This time, it will say username must have a minimum of two characters.

113
00:13:18,660 --> 00:13:24,750
Let's give Mike a password of only three characters.

114
00:13:26,190 --> 00:13:30,180
Again, it would say it must have a minimum of seven characters.

115
00:13:34,690 --> 00:13:36,550
Now, let's take away the roles.

116
00:13:38,480 --> 00:13:48,800
This time, it'll say specify at least one user role, we can also take away the last name and we'll

117
00:13:48,800 --> 00:13:50,560
get a 400 bed request.

118
00:13:50,570 --> 00:13:52,400
Last name is mandatory.

119
00:13:54,420 --> 00:14:04,010
OK, now we've actually corrected everything and you should see Mike being created in our users collection.

120
00:14:07,490 --> 00:14:08,530
It's a five.

121
00:14:10,410 --> 00:14:22,350
And there you see Mike Doe in our database, also see the user register event for Mike, I realized

122
00:14:22,350 --> 00:14:30,570
that the ID was always null in our HTP responses in Posman, and that was because I forgot to add the

123
00:14:30,570 --> 00:14:34,860
ID field to the constructor of the registered user response.

124
00:14:36,120 --> 00:14:43,620
So let's go ahead and add it to our constructor as the first parameter and then we can assign it.

125
00:14:44,580 --> 00:14:48,220
This was because I used the Intellisense of intelligence.

126
00:14:48,720 --> 00:14:53,240
We had asked me if I wanted to create a matching constructor for the super.

127
00:14:54,720 --> 00:15:05,400
Let's create a new variable and assign a random, unique universal identifier to its variable.

128
00:15:12,330 --> 00:15:22,950
Let's set it to our command, Idy Positon is the first parameter there and also in our try catch and

129
00:15:22,950 --> 00:15:27,420
we can also exchange command that Kate ID with the Idy variable.
