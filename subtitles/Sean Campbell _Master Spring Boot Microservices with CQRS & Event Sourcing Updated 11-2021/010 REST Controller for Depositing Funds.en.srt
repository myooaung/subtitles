1
00:00:00,210 --> 00:00:07,050
In this lecture, we are going to create another risk controller, this time we will create one that

2
00:00:07,050 --> 00:00:15,000
exposes an HTP endpoint for depositing funds to a bank account, navigate to the controllers package

3
00:00:15,240 --> 00:00:23,970
and the bank account command API project creates a new class and call it deposit funds controller.

4
00:00:29,680 --> 00:00:37,690
Annotated with the race controller annotation, as well as the request mapping annotation.

5
00:00:42,420 --> 00:00:50,340
For the path, we'll use forward slash API, forward slash V1, forward slash deposit funds, we again

6
00:00:50,340 --> 00:00:52,050
need the command gateway.

7
00:00:52,350 --> 00:00:58,980
So let's go and copy the command gateway field and construct from the open account controller.

8
00:00:59,910 --> 00:01:02,460
They just change it to deposit funds controller.

9
00:01:02,850 --> 00:01:05,330
Then we are going to add a put method.

10
00:01:05,430 --> 00:01:14,490
So at the put mapping annotation with the path including an I.D., which should be the bank account

11
00:01:14,490 --> 00:01:15,000
ID.

12
00:01:19,170 --> 00:01:27,000
Again, we'll also add the reauthorise annotation to ensure that only authorized users can access this

13
00:01:27,000 --> 00:01:27,510
method.

14
00:01:27,900 --> 00:01:30,300
So let's copy that and paste that there,

15
00:01:33,060 --> 00:01:37,170
then we will again return a response entity.

16
00:01:37,170 --> 00:01:43,140
But this time only the base response called the method deposit funds.

17
00:01:47,090 --> 00:01:53,960
And then we will pass in a path variable, which is going to be the ID, which is the bank account ID,

18
00:02:03,410 --> 00:02:06,730
we will also pass in a request body.

19
00:02:07,610 --> 00:02:10,130
Again, we will validate the request by.

20
00:02:13,170 --> 00:02:17,340
We will add the validation annotations in a couple of minutes.

21
00:02:18,770 --> 00:02:22,320
OK, so let's add a try catch.

22
00:02:29,670 --> 00:02:36,840
Again, if a an exception occurs, we want to reply with a safe error message, so let's copy the entire

23
00:02:36,840 --> 00:02:44,100
catch section there and then we'll change the safe error message to error while processing request to

24
00:02:44,100 --> 00:02:45,090
deposit.

25
00:02:48,150 --> 00:02:57,960
Funds into a bank account for ID, and that would be the IDB policy, and let's just change that to

26
00:02:57,960 --> 00:02:59,430
their base response.

27
00:03:00,090 --> 00:03:03,970
And we weren't passing ID, only the safe error message.

28
00:03:04,800 --> 00:03:13,230
OK, now to implement the method further is we will set the ID, the command object to the idea that

29
00:03:13,230 --> 00:03:23,100
we pass and then we'll dispatch the deposit funds command and then if everything goes well, we can

30
00:03:23,100 --> 00:03:25,650
return a successful message.

31
00:03:28,470 --> 00:03:36,330
With the base response, a message such as fans successfully deposited

32
00:03:41,550 --> 00:03:45,690
and we can return HTP status code two hundred.

33
00:03:46,670 --> 00:03:48,490
Which is OK.

34
00:03:59,210 --> 00:04:03,090
Now, let's look at the validation parameters.

35
00:04:03,110 --> 00:04:11,600
We only need to add a single one, we will say that the deposit amount should be at least one dollars.

36
00:04:12,260 --> 00:04:20,060
And if it's not, we can provide the user with a message such as the deposit amount must be greater

37
00:04:20,060 --> 00:04:21,050
than zero.

38
00:04:23,280 --> 00:04:23,840
OK.

39
00:04:32,180 --> 00:04:40,580
Just remove the unused import statement and then we can go ahead and add an API gateway route for our

40
00:04:40,580 --> 00:04:44,420
controller method that we've just added for depositing funds.

41
00:04:52,460 --> 00:04:57,830
So let's just change our idea to something like deposit funds.

42
00:04:59,320 --> 00:05:06,400
And then also fix the request, Mappin, they change it to deposit funds, forward slash star star,

43
00:05:06,400 --> 00:05:12,940
which if you remember correctly, means that anything that we pass in after the forward slash will be

44
00:05:12,940 --> 00:05:19,330
translated into URAI later on our API Gateway application.

45
00:05:31,100 --> 00:05:37,730
At breakpoints, in the control method, in the aggregate command handler.

46
00:05:38,600 --> 00:05:39,410
Once again.

47
00:05:41,800 --> 00:05:45,970
Deposit funds Camonte as well as the event sourcing handler.

48
00:05:54,590 --> 00:06:01,100
And then we will also add breakpoints in our account event handler implementation.

49
00:06:02,760 --> 00:06:05,840
Let's go ahead and edit for funds deposited event.

50
00:06:06,870 --> 00:06:12,180
And then we can debug a bank account query application.

51
00:06:17,360 --> 00:06:20,240
As well as our bank account Camonte API.

52
00:06:29,930 --> 00:06:37,220
Also ran the Earth 2.0 authorization server so that we can get a JWT.

53
00:06:40,290 --> 00:06:43,110
And then finally, the user query API.

54
00:07:00,090 --> 00:07:06,300
In fact, we don't need to use a query application because we will only need the bank account ID, let's

55
00:07:06,300 --> 00:07:11,070
get the bank account ID from my school bank database.

56
00:07:12,090 --> 00:07:13,110
Just log in there.

57
00:07:20,530 --> 00:07:22,900
Then go into the bank account table.

58
00:07:24,200 --> 00:07:32,080
Then he will take the I.D., which is the bank account ID from our single record, so let's change it

59
00:07:32,080 --> 00:07:44,980
to put Method Urai localhost for 2005, the API Gateway Forward Slash API V1 deposit funds.

60
00:07:49,670 --> 00:07:57,650
And then we'll pass the I.D., which is the bank account ID there, it's go ahead and get a otherkin

61
00:07:57,650 --> 00:07:58,790
or JWT.

62
00:08:02,880 --> 00:08:06,990
And then we can add it as a token.

63
00:08:14,750 --> 00:08:25,460
And then for a request, body change to Jason then will simply specify an amount and let's deposit 50

64
00:08:25,460 --> 00:08:32,360
dollars into John Doe's bank account before we hit send, I just want to show you the balance is still

65
00:08:32,360 --> 00:08:34,490
a hundred dollars hit send.

66
00:08:35,380 --> 00:08:43,830
So it hits our break point now, the command is being dispatched, it's handled, you'll see that the

67
00:08:43,840 --> 00:08:46,890
map there is 50 and the balance is 100.

68
00:08:47,260 --> 00:08:51,340
It gets produced to the event bursts and stored in the event store.

69
00:08:51,340 --> 00:08:53,980
The balance is updated to 150.

70
00:08:54,310 --> 00:08:59,440
It hits the event handler and the change has persisted to the bank account.

71
00:08:59,440 --> 00:09:06,850
MySQL database status quo two hundred and success message funds successfully deposited there.

72
00:09:06,850 --> 00:09:11,940
You can see in the database that the amount has been updated to one hundred and fifty.

73
00:09:12,370 --> 00:09:14,260
It's also like in our event store.

74
00:09:14,410 --> 00:09:23,980
Then you'll see a new event fund deposited event and if we inspect the details, you'll see that an

75
00:09:23,980 --> 00:09:27,430
amount of fifty dollars was deposited.

76
00:09:27,430 --> 00:09:30,060
The updated balances, one hundred and fifty.

77
00:09:30,070 --> 00:09:35,190
So we have successfully completed the implementation of the deposit funds controller.
