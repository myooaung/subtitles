WEBVTT
1
00:00:00.300 --> 00:00:07.170
In the previous lecture, I showed you how to run a duck image using the duck run command, but that

2
00:00:07.170 --> 00:00:12.120
is just one way in which you can deploy docker containers in this lecture.

3
00:00:12.360 --> 00:00:18.780
I will show you how to deploy docker containers with Docker Campos and also how you can deploy docker

4
00:00:18.780 --> 00:00:24.150
containers as Docker services with Docker Stack deploy and docker swarm.

5
00:00:24.720 --> 00:00:32.190
The first thing that we need to do is to copy the Docker file that we created in the Point 2.0 authorization

6
00:00:32.200 --> 00:00:38.850
service into the route directories of each of our military services, starting with the User Command

7
00:00:38.850 --> 00:00:40.020
API project.

8
00:00:40.620 --> 00:00:44.700
Secondly, let's add it to the user query API.

9
00:00:46.800 --> 00:00:51.030
OK, and then we can add it to our API gateway.

10
00:00:56.920 --> 00:01:05.150
Then go ahead to the bank account command API and then finally to the bank account query API.

11
00:01:05.800 --> 00:01:12.470
Now, importantly, the Docker file is exactly the same for each of our micro services projects.

12
00:01:12.850 --> 00:01:18.060
Now go ahead and open the application that Winmar file of the bank account query API.

13
00:01:18.850 --> 00:01:21.400
We will again make use of spring profiles.

14
00:01:21.730 --> 00:01:28.240
So let's go ahead and make a copy of an application that Waymouth file and then change it to application

15
00:01:28.240 --> 00:01:31.750
hiw and DOCA to specify that this is the application.

16
00:01:31.750 --> 00:01:34.510
That why a mouthful of our Dukkha profile.

17
00:01:37.440 --> 00:01:41.560
Go ahead and change the Mongo DB host to Mongar container.

18
00:01:44.760 --> 00:01:51.060
So let's get the name of my school container and the X on container.

19
00:01:51.070 --> 00:01:56.150
So we've got my school container for my school and X on hyphen server, for example.

20
00:01:56.910 --> 00:02:03.990
And in the euro, all of the data source of the MySQL connection string change localhost to my school

21
00:02:03.990 --> 00:02:04.760
container.

22
00:02:05.160 --> 00:02:16.890
And then we need to explicitly specify the exact server with X on X on server servers and then add the

23
00:02:16.890 --> 00:02:19.770
container name X on hyphen server.

24
00:02:19.920 --> 00:02:26.850
Now if you connecting to localhost, you do not have to specify an X on server that lets KDDI into the

25
00:02:26.850 --> 00:02:29.880
bank account query API directory.

26
00:02:40.360 --> 00:02:47.530
Then go ahead and run Mavin clean install, importantly, every time before you build a Docker image,

27
00:02:47.710 --> 00:02:52.540
you must make sure that you build your project so that the change takes effect.

28
00:02:52.840 --> 00:02:55.870
OK, so I'm going to open my terminal.

29
00:02:55.870 --> 00:03:04.720
I'm going to see the into bank account query API and I am going to build my Docker image with Duck-billed

30
00:03:05.920 --> 00:03:10.540
Dashty for tag with our image name.

31
00:03:10.550 --> 00:03:17.890
Let's call it bank axi hyphen query hyphen api forward slash dot because that's where Dufka file is

32
00:03:17.890 --> 00:03:18.630
located.

33
00:03:18.640 --> 00:03:19.740
And there we go.

34
00:03:20.230 --> 00:03:25.280
We now have a docker image for our bank account query API.

35
00:03:25.630 --> 00:03:26.340
Okay.

36
00:03:26.350 --> 00:03:29.770
Navigate to the bank account command API project.

37
00:03:32.810 --> 00:03:36.800
And again, make a copy of the application at Vimal File.

38
00:03:40.710 --> 00:03:49.110
Also, call it application hyphen Dukkha for Dukkha profile and then make sure that you open the application

39
00:03:49.110 --> 00:03:54.390
docket or Winmar file, change the Monga TV host to Mongul contain as well.

40
00:03:56.070 --> 00:04:04.710
And then they just close some of those application files and copy the excellent server section to explicitly

41
00:04:04.710 --> 00:04:09.960
tell the bank account Camonte API to connect to the Xen server container.

42
00:04:10.750 --> 00:04:18.540
OK, now let's go ahead and build our project just into the bank account.

43
00:04:18.540 --> 00:04:20.310
Camonte API project the.

44
00:04:27.410 --> 00:04:30.020
And then ran everything clean install.

45
00:04:34.690 --> 00:04:35.350
OK.

46
00:04:40.070 --> 00:04:50.240
Let's go to into the bank account Camonte API directory and again to build the image Sido, Dukkha,

47
00:04:51.170 --> 00:05:00.590
bold, high Fanti for tech, let's give it an image name bank I.C.C. Hyphen, ACMD, hyphen API, space

48
00:05:00.590 --> 00:05:01.150
dot.

49
00:05:02.000 --> 00:05:04.220
And there we go.

50
00:05:04.700 --> 00:05:08.250
Docker image successfully but they.

51
00:05:09.020 --> 00:05:13.910
OK, so now let's navigate to the User Command API project

52
00:05:17.270 --> 00:05:17.750
again.

53
00:05:17.750 --> 00:05:21.020
Make a copy of the application or properties file.

54
00:05:27.800 --> 00:05:32.330
Call it application hyphen dot properties.

55
00:05:33.770 --> 00:05:34.210
OK.

56
00:05:39.890 --> 00:05:49.670
First, it's copy the Exxon server section now just changed the Waymouth format to Exxon dot Exxon server

57
00:05:51.110 --> 00:06:01.550
dot serve as equals to Exxon hyphen server and then also go ahead and change the Mungai DB host to Mongo

58
00:06:01.880 --> 00:06:03.230
hyphen container.

59
00:06:05.720 --> 00:06:11.270
OK, so now let's go ahead and build our User Command API project.

60
00:06:13.640 --> 00:06:24.950
I'm just going to see into the User Management and User Command API project again and then clean install

61
00:06:27.140 --> 00:06:29.580
and it should build successfully.

62
00:06:29.750 --> 00:06:33.350
So again, I'm using the terminal.

63
00:06:33.350 --> 00:06:40.880
You can do it straight in your head if you've got a terminal in your ID like intelligence, but I'd

64
00:06:40.880 --> 00:06:43.190
like to do it in the external terminal.

65
00:06:43.880 --> 00:06:53.750
Again, pseudo docker both hyphen tea and for image name let's use user hyphen KDDI hyphen API space

66
00:06:53.750 --> 00:06:54.290
dot.

67
00:06:55.270 --> 00:06:57.470
And there we go.

68
00:06:57.470 --> 00:07:00.380
We've got a docker image use a command API.

69
00:07:01.830 --> 00:07:05.610
Next up is our User Query API project.

70
00:07:06.800 --> 00:07:14.750
So, again, go ahead and make a copy of the application, not properties file, and we are again going

71
00:07:14.750 --> 00:07:21.510
to call it application hyphen Dukkha DOT properties for DOCA spring profile.

72
00:07:22.650 --> 00:07:26.690
OK, then copy the excellent service section.

73
00:07:30.760 --> 00:07:37.960
And copy the Mongar, contain a section for the Mungai TV host, and then we can go ahead and build

74
00:07:37.960 --> 00:07:49.360
our user query API project is going to go back and then KDDI into the user query API directory, M.V.

75
00:07:49.360 --> 00:07:50.640
and clean install.

76
00:07:51.730 --> 00:07:54.730
And again, everything should build successfully.

77
00:07:55.020 --> 00:07:57.470
Now let's just clear the screen there.

78
00:07:58.150 --> 00:08:06.760
OK, so just make sure that you go to the user query API directory.

79
00:08:07.210 --> 00:08:13.820
And again, let's build the docker image with pseudo docker, both hiw and T image name.

80
00:08:13.930 --> 00:08:22.000
Let's call it user query API space dot and we have a docker image.

81
00:08:22.840 --> 00:08:28.630
OK, so the last configuration file that we have to configure is for the API Gateway.

82
00:08:33.640 --> 00:08:40.360
So, again, go ahead and make a copy of the application at Winmar file and likewise call it application

83
00:08:40.360 --> 00:08:41.560
hyphen DOCA.

84
00:08:48.950 --> 00:08:56.920
And then in here, we are going to change localhost with the names that we are going to give our containers.

85
00:08:57.260 --> 00:09:03.150
So for the User Command API, we going to call it user hyphen CMD, hyphen API.

86
00:09:03.680 --> 00:09:05.360
So go ahead and copy that.

87
00:09:05.990 --> 00:09:12.280
And also pasted for the update user route, as well as to remove user route.

88
00:09:13.190 --> 00:09:19.700
And then for the user query API, we're going to call it user hyphen query hyphen API.

89
00:09:21.200 --> 00:09:24.710
OK, now for the bank account command API.

90
00:09:24.710 --> 00:09:30.620
Let's use bank I.C.C. hyphen CMB, hyphen API again.

91
00:09:30.650 --> 00:09:40.340
Copy that for the deposit funds route as well as the withdrawal funds rate and the close account rate.

92
00:09:41.030 --> 00:09:43.820
And then finally the bank account query API.

93
00:09:43.830 --> 00:09:50.150
We're going to call it bank axi hyphen query hyphen API.

94
00:09:52.580 --> 00:09:59.030
OK, so let's go ahead and KDDI into our API Gateway project.

95
00:10:04.610 --> 00:10:10.820
And then again, bolded with envy in cleaning stop and everything, but successfully.

96
00:10:11.860 --> 00:10:24.220
So now we can build a darker image for API Gateway as well, again with using darker pulled hyphenated

97
00:10:24.430 --> 00:10:27.100
color image API hyphen Gateway.

98
00:10:29.580 --> 00:10:38.070
Space thought for Dr. Farley is located, and there we go, the next thing that you have to do is to

99
00:10:38.070 --> 00:10:46.290
install Dr. Campos, navigate to Dr. Dr. Dot com forward slash Campo's forward slash install.

100
00:10:46.890 --> 00:10:55.740
There you can find installation guidelines on Mac, Windows, Windows Server, Linux and also alternative

101
00:10:55.740 --> 00:10:56.960
install options.

102
00:10:57.420 --> 00:11:07.080
I already have Dr. Campos installed, so I'm going to run the Dukkha Campo's version command.

103
00:11:08.130 --> 00:11:12.410
And then you can see I've got vision one point twenty five point zero.

104
00:11:12.840 --> 00:11:17.840
OK, now go ahead and create a folder somewhere on your computer.

105
00:11:18.330 --> 00:11:25.410
I'm going to call my doc the exercise files and then in there I'm going to create another folder called

106
00:11:25.410 --> 00:11:26.400
Spring Bank.

107
00:11:27.390 --> 00:11:34.950
OK, now I'm going to create a new text file and this is going to be the Dukkha Campo's file.

108
00:11:34.950 --> 00:11:38.370
So let's go ahead and save it into that directory.

109
00:11:39.780 --> 00:11:44.580
Just going to browse for that directory that I just created.

110
00:11:45.330 --> 00:11:46.020
There we go.

111
00:11:46.020 --> 00:11:54.960
The Spring Bank directory and the name should be exactly DOCA or lowercase hyphen composed dot y Emelle.

112
00:11:55.560 --> 00:12:02.250
OK, so now we can start to configure the darker Kapos file.

113
00:12:02.670 --> 00:12:06.000
OK, first let's set a version.

114
00:12:06.510 --> 00:12:13.290
We are going to use version three point seven and then DOCA Campo's allows us to specify one or more

115
00:12:13.290 --> 00:12:15.360
services or containers.

116
00:12:15.840 --> 00:12:18.540
So let's start with the user Camonte API.

117
00:12:19.140 --> 00:12:22.560
Let's call it user hyphen any hyphen API.

118
00:12:23.670 --> 00:12:28.470
And then the indentation is always two spaces for our container name.

119
00:12:29.110 --> 00:12:35.730
We need to use that very same name because importantly, that's the name that we used in our API gateway.

120
00:12:36.810 --> 00:12:43.940
So again, user simply API and then for image it is also user the API.

121
00:12:43.950 --> 00:12:50.370
That's what we used when we built our image and then specify the latest version then for the restart

122
00:12:50.370 --> 00:12:51.040
policy.

123
00:12:51.120 --> 00:12:52.590
Set it to always.

124
00:12:55.700 --> 00:13:08.460
Ports will use Port 881 for external as well as internal, and then we need to set our spring profile

125
00:13:08.670 --> 00:13:13.740
and we can do that by setting an environmental variables environment.

126
00:13:14.640 --> 00:13:23.760
And the next line, we will specify the spring profile that is active this spring and the school profiles

127
00:13:24.450 --> 00:13:33.090
and the school active equals Dukkha that will make sure that our application hyphen and docketed properties

128
00:13:33.090 --> 00:13:34.320
file will be loaded.

129
00:13:34.930 --> 00:13:37.230
OK, just go ahead and copy all of that

130
00:13:42.960 --> 00:13:44.130
and they change.

131
00:13:44.130 --> 00:13:48.330
User seemed to use a query.

132
00:13:49.350 --> 00:13:59.550
OK, so I'm just going to copy, query and replace it everywhere and then change the port to port to.

133
00:14:04.670 --> 00:14:15.260
OK, let's copy both of those to simplify our bank account APIs, so let's change user with bank I.C.C..

134
00:14:20.640 --> 00:14:32.630
I'll be back and see the exchange user with bank axi everywhere, OK, now for the ports 1991 external

135
00:14:33.290 --> 00:14:44.780
and 1991 Internal Bank Account Command API and the 1992 external and 1992 internal for the bank account

136
00:14:44.780 --> 00:14:45.920
query API.

137
00:14:46.070 --> 00:14:51.350
And then finally, let's add a service for the API Gateway.

138
00:14:59.370 --> 00:15:08.750
And then they just copy everything else there, the container name will simply be API hyphen Gateway.

139
00:15:13.730 --> 00:15:20.150
Go ahead and copy that name because we used that very same name for the image when we built our image

140
00:15:20.750 --> 00:15:27.730
and then changed the port to Port 2000 external and Port 2000 internal.

141
00:15:28.700 --> 00:15:35.510
We need to specify the network that all of our containers are going to be part of because we want to

142
00:15:35.510 --> 00:15:42.650
make sure that they can see the Mongar container as well as the MySQL container and the action server

143
00:15:42.650 --> 00:15:43.350
container.

144
00:15:43.730 --> 00:15:46.070
So all of those containers are in the spring.

145
00:15:46.070 --> 00:15:46.790
Banknorth

146
00:15:49.760 --> 00:15:53.380
So make sure that you set your network to Spring Banknorth.

147
00:15:57.890 --> 00:16:05.750
I see that I didn't overwrite that one user with bank I.C.C., so just make sure that it is bank account

148
00:16:05.750 --> 00:16:06.860
query API.

149
00:16:07.400 --> 00:16:15.600
So now I'm just going to see to the directory that spring bank directory inside of the Docker directory.

150
00:16:16.240 --> 00:16:26.180
OK, and in the command to deploy docker containers with Dukkha Campo's is Dukkha hyphen Campo's up

151
00:16:26.360 --> 00:16:28.130
hyphen D for detached.

152
00:16:30.600 --> 00:16:38.160
There you can see that a user query API, Command API, bank card command API, Backbreaker Query API

153
00:16:38.160 --> 00:16:44.820
and API, Gateway container has been deployed and let's run Docker Place again.

154
00:16:46.080 --> 00:16:49.830
And there you can see all of our containers that are running.

155
00:16:52.800 --> 00:16:56.160
Open Posman, let's get a JWT.

156
00:17:01.200 --> 00:17:09.510
And then let's first try the bank account, Look-Up, five point two thousand just at the JWT, they.

157
00:17:12.030 --> 00:17:16.440
And then we get a response successfully return three bank accounts.

158
00:17:16.920 --> 00:17:23.460
We can also try to hit it directly 1992 and we also get a response.

159
00:17:24.060 --> 00:17:27.540
And through the gateway again for use, look up.

160
00:17:27.900 --> 00:17:29.970
Let's use the same JWT.

161
00:17:30.570 --> 00:17:39.060
And we also get a response from the user query API and then directly attached to it.

162
00:17:39.060 --> 00:17:41.350
Likewise, we get a response.

163
00:17:41.970 --> 00:17:42.540
OK.

164
00:17:45.120 --> 00:17:54.060
The open bank account method is fine, it hits for one, we not going create a bank account now, nor

165
00:17:54.060 --> 00:18:01.530
are we going to deposit funds or withdraw funds, but it hits methods, close bank account the same.

166
00:18:01.530 --> 00:18:05.640
We don't want to close a case with dorkus.

167
00:18:05.640 --> 00:18:08.430
Swarm is the next step.

168
00:18:09.180 --> 00:18:14.220
You need to run the command docker's swarm in it to initialised dorkus swarm.

169
00:18:14.670 --> 00:18:20.100
Dorkus swarm is a mini container orchestration engine.

170
00:18:21.280 --> 00:18:30.670
Go ahead and run Dukkha composed down because we are now going to use DOCA swarm as the next step to

171
00:18:30.670 --> 00:18:36.460
deploy our Docky images as services, so create a new file.

172
00:18:36.480 --> 00:18:45.890
Dr. Campo's hyphens Tector Vimal and copy in the contents of the DOCA composed Vimal file.

173
00:18:46.480 --> 00:18:53.410
Now something that you can add to a Docker compose file that is going to be deployed as a stack is replicas.

174
00:18:53.950 --> 00:19:02.910
So with a swarm, if you add more than one replica, the Dockers swarm engine will basically auto load

175
00:19:02.920 --> 00:19:07.180
balance the different instances of your service.

176
00:19:07.210 --> 00:19:13.690
So if your services gets more hits, you can just simply add more replicas to it.

177
00:19:13.900 --> 00:19:15.940
And that's a very powerful feature.

178
00:19:16.450 --> 00:19:23.770
Now, the ports needs to change slightly because if we don't do that, Docker Swarm will actually make

179
00:19:23.770 --> 00:19:27.810
the mode ingress so we won't be able to access it.

180
00:19:27.820 --> 00:19:35.440
So change the port section to Target 881 the next line published 881.

181
00:19:35.440 --> 00:19:43.990
So that's terminal for the external internal port then specify protocol as TCP and then most importantly

182
00:19:43.990 --> 00:19:50.080
the mode as host so that we can actually access these containers or services.

183
00:19:50.740 --> 00:19:58.600
And that's just go ahead and copy those sections, deploy replicas and the ports over to the user,

184
00:19:58.600 --> 00:20:07.270
query API, change of containers or services, TCP, IP and then most importantly the mode change the

185
00:20:07.660 --> 00:20:09.100
to 882.

186
00:20:20.090 --> 00:20:28.580
And then go ahead and copy it over to the bank account, command API, change the port to nineteen ninety

187
00:20:28.610 --> 00:20:29.120
one.

188
00:20:32.460 --> 00:20:39.330
And then go ahead and copy everything up to deploy and post it for the bank account, query API as well,

189
00:20:39.340 --> 00:20:42.150
change the port to 1990 to.

190
00:20:53.390 --> 00:20:58.520
And then finally for the API Gateway and change support to 2000.

191
00:21:07.370 --> 00:21:17.510
So to just confirm that doorkeepers containers are not running and to deploy them with stack deploy

192
00:21:17.510 --> 00:21:20.510
the command is dorkus stack deploy.

193
00:21:27.690 --> 00:21:29.830
Campo's Hyphen filed.

194
00:21:32.260 --> 00:21:41.680
Dr. Hyphen Campo's, hyphen Steck, Todd Vimal, follow that stack file and then we need to give our

195
00:21:41.710 --> 00:21:42.700
Stecker name.

196
00:21:42.700 --> 00:21:44.260
Let's call it Spring Bank.

197
00:21:48.260 --> 00:21:56.840
And that creates all of our services so we can run the following command, dorkus services, police,

198
00:21:57.440 --> 00:22:03.740
and they you will see that all of our services are listed with replicas one out of one.

199
00:22:03.860 --> 00:22:10.610
But if you run a piece, you will see that the container name starts with Spring Bank and the school.

200
00:22:12.920 --> 00:22:20.030
Open basement again and again, you will see that we are getting a response, just get it, JWT.

201
00:22:27.950 --> 00:22:36.590
They try the bank account, look up and we get a response as well as the user look up by the JWT and

202
00:22:36.590 --> 00:22:38.210
we also get a look up.

203
00:22:38.950 --> 00:22:45.560
OK, so to remove a stack, you can type dorkus that Aughrim Spring Bank.

204
00:22:47.870 --> 00:22:58.490
And then run dorkiest service, Alice, you'll see no services, the pseudo appears, no containers

205
00:22:58.490 --> 00:23:03.020
of such, and then they just deploy our services again.
