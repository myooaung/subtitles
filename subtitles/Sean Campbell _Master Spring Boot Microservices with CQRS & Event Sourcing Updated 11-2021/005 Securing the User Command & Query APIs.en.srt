1
00:00:00,420 --> 00:00:07,420
Now that we have an oath to point out authorization service, we need to secure our user MICRA services.

2
00:00:08,020 --> 00:00:13,390
Let's start by opening the XML file of our User Command API.

3
00:00:14,070 --> 00:00:17,910
We need to add three spring security dependencies.

4
00:00:18,750 --> 00:00:25,400
Let's start with the spring security o auth dependency.

5
00:00:28,140 --> 00:00:29,550
Take the latest version.

6
00:00:30,390 --> 00:00:36,900
Secondly, we are going to add the spring security oath to auto configure dependency.

7
00:00:44,480 --> 00:00:54,140
Again, take the latest version, and then finally, we are going to add the spring security JWT dependancy

8
00:00:55,070 --> 00:01:01,340
again, take the latest version now go ahead and copy all of the three dependencies that we've just

9
00:01:01,340 --> 00:01:05,600
added and navigate to the user query API.

10
00:01:06,440 --> 00:01:10,070
We are also going to need it for the query API.

11
00:01:14,830 --> 00:01:22,120
The next thing that we need to do is to add the JWT signing key to the application of properties file

12
00:01:22,330 --> 00:01:24,490
of each of our user MICRA services.

13
00:01:24,910 --> 00:01:33,400
Now, if you recall, the JWT signing key is actually the key that we used in our OS 2.0 authorisation

14
00:01:33,400 --> 00:01:36,670
service for generating a JWT.

15
00:01:41,670 --> 00:01:47,790
There you can see it in the application or properties of yours to put authorization service.

16
00:01:51,900 --> 00:01:59,280
As well as in the oath server config, you'll see that that's exactly the signing key that we use during

17
00:01:59,280 --> 00:02:01,220
the JWT generation.

18
00:02:01,500 --> 00:02:09,090
So it's also the signing key that we will use within our user MICRA services by the Resource Service

19
00:02:09,480 --> 00:02:13,770
to actually verify if the JWT that is passed is correct.

20
00:02:14,070 --> 00:02:23,250
So let's add config to our application of properties for security oath to that resource, JWT, that

21
00:02:23,250 --> 00:02:31,470
key value, and then we can go ahead and actually post that spring bank signing key in there.

22
00:02:31,980 --> 00:02:38,250
Now, again, for simplicity's sake, I'm using a very easy signing key that in production, please

23
00:02:38,250 --> 00:02:45,930
use a much more complex one that will make it hard to crack pasted into the application of properties

24
00:02:45,930 --> 00:02:48,510
fall of the user query API as well.

25
00:02:50,780 --> 00:02:57,950
And then we can actually start by adding some needed annotations to our application files.

26
00:03:02,920 --> 00:03:10,960
First of all, go ahead and add the enable resource server annotation, enable resource server annotation

27
00:03:10,960 --> 00:03:19,000
is a convenient annotation for all to resource servers, enabling a spring security filter that authenticates

28
00:03:19,000 --> 00:03:28,600
requests via an incoming or to token also at the enable global message security annotation and say pre

29
00:03:28,600 --> 00:03:30,200
post enabled to choose.

30
00:03:30,730 --> 00:03:37,990
Let's copy these annotations and go to our user query application class and paste it in their.

31
00:03:39,710 --> 00:03:48,830
OK, now we've added all the needed configuration, so now we can actually go ahead and secure our wrist

32
00:03:49,020 --> 00:03:57,470
controller methods by adding the reauthorise annotation, and then we are going to say that it needs

33
00:03:57,980 --> 00:04:01,430
the following authority, so has authority.

34
00:04:02,210 --> 00:04:07,170
And then in there we are going to say that it needs the user role.

35
00:04:07,580 --> 00:04:08,540
In other words.

36
00:04:16,760 --> 00:04:23,040
Basically, it needs right privileges because it's the command side or the right side.

37
00:04:23,390 --> 00:04:25,860
So just go ahead and add right privilege there.

38
00:04:26,210 --> 00:04:34,940
So we are saying that only uses with right privileges will be able to register users and then we will

39
00:04:34,940 --> 00:04:43,850
add exactly the same requirement for our remove user control, as well as for our update user controller.

40
00:04:43,910 --> 00:04:47,720
That's all on the command API side, which is our right side.

41
00:04:48,230 --> 00:04:56,900
And then for user lookup controller, we are going to say that you only need to read privileges to read

42
00:04:57,140 --> 00:05:06,860
from the user, read database and basically access the query controller methods or read controller methods.

43
00:05:12,310 --> 00:05:16,030
OK, so let's go ahead and build our project.

44
00:05:23,710 --> 00:05:26,350
And everything should build successfully.

45
00:05:28,480 --> 00:05:32,260
OK, let's debug our User Command API.

46
00:05:33,740 --> 00:05:35,930
Also, I use a query API.

47
00:05:41,570 --> 00:05:46,280
And we also need to run our Earth 2.0 authorization service.

48
00:05:52,140 --> 00:05:58,630
OK, now that they are all running, let's go ahead and add breakpoints in our control methods.

49
00:06:00,570 --> 00:06:01,170
OK.

50
00:06:04,570 --> 00:06:07,210
Do the same for the user query API.

51
00:06:08,820 --> 00:06:12,330
It's at breakpoints in our user look controller methods.

52
00:06:16,580 --> 00:06:17,250
There we go.

53
00:06:17,630 --> 00:06:22,580
So now we have great points every way, open up, Postman.

54
00:06:23,900 --> 00:06:27,590
So first we are going to try and register a new user.

55
00:06:27,740 --> 00:06:29,390
Let's call him James Doe.

56
00:06:38,080 --> 00:06:46,610
Let's say James only has right privileges, it's not common to any give ride privileges, but we actually

57
00:06:46,630 --> 00:06:47,620
want to try that.

58
00:06:50,160 --> 00:06:57,840
So there we get an error, an authorized HDB status code for a one full authentication is required to

59
00:06:57,840 --> 00:07:04,490
access this resource that confirms that registered user control method is now secured.

60
00:07:05,100 --> 00:07:13,470
So let's go ahead and get a JWT for Jane, who's only got read privileges.

61
00:07:19,080 --> 00:07:32,580
So copy that and then go to authorization, so they buried Tokin and then paste the JWT in the.

62
00:07:34,220 --> 00:07:43,240
Try again, so Nazis' access denied because Jane only has read privileges and not right privileges,

63
00:07:43,790 --> 00:07:47,150
so let's get a token for John Doe.

64
00:07:48,350 --> 00:07:51,650
Was John Scott both read and write privileges?

65
00:07:54,530 --> 00:07:57,440
OK, let's copy the JWT, the.

66
00:08:03,250 --> 00:08:08,020
And let's just update that JWT token.

67
00:08:11,030 --> 00:08:13,700
And this time it heats up control and makes it.

68
00:08:15,000 --> 00:08:21,660
And then it's dispatched by the command gateway and uses successfully registered.

69
00:08:23,500 --> 00:08:30,830
So we can go and check it out, Mongo DB database, if the user was actually added first.

70
00:08:30,910 --> 00:08:32,760
It's like an event store.

71
00:08:33,640 --> 00:08:36,220
There's a new user register event.

72
00:08:37,090 --> 00:08:43,510
If we inspect the details, you'll see that it's new user James Doe.

73
00:08:44,940 --> 00:08:52,260
OK, and let's look in our database and the users, the use this collection and they you'll see we now

74
00:08:52,260 --> 00:08:55,590
three records with James Doe being added.

75
00:08:56,500 --> 00:09:00,120
OK, and James only has right privileges.

76
00:09:02,870 --> 00:09:08,420
OK, so let's now try to update a user.

77
00:09:13,880 --> 00:09:17,150
It's copy James Doe's user ID.

78
00:09:19,170 --> 00:09:20,270
Pasted in there.

79
00:09:26,170 --> 00:09:34,360
We can actually copy the entire body that we've just created because we're doing a put basically a full

80
00:09:34,360 --> 00:09:43,090
replace of the entire object, and let's change his email address to James Doe username to James Daewon

81
00:09:43,090 --> 00:09:45,280
and positive password 45.

82
00:09:48,670 --> 00:09:58,210
And authorized, OK, it proves it's secure, so let's get a JWT for John Doe with right privileges.

83
00:10:02,820 --> 00:10:08,220
Again, at the JWT is a spirit taken under authorization.

84
00:10:11,610 --> 00:10:18,450
And it hits our breakpoint and uses successfully updated status code 200.

85
00:10:20,250 --> 00:10:22,200
Now let's look in our database.

86
00:10:24,470 --> 00:10:31,880
Now you'll see the email address has been changed to James Tato and the username James Daewon password

87
00:10:31,880 --> 00:10:33,800
is encrypted, so we can't tell.

88
00:10:37,010 --> 00:10:45,290
And there you'll see new user updated event, and that is the event where we changed James's email address,

89
00:10:45,440 --> 00:10:47,120
username and password.

90
00:10:58,910 --> 00:11:02,960
OK, now let's try and delete a user.

91
00:11:04,720 --> 00:11:11,110
We can try and delete James Doe from our user database.

92
00:11:14,590 --> 00:11:22,210
Again, it proves that it's secure because it's telling us basically that we don't have a JWT, we're

93
00:11:22,210 --> 00:11:23,850
not going to delete anything.

94
00:11:23,860 --> 00:11:25,930
So let's just skip over.

95
00:11:26,910 --> 00:11:28,380
Just proves that secure.

96
00:11:29,760 --> 00:11:38,760
Now let's get James record from the user query military service, but we first need to get a token.

97
00:11:40,320 --> 00:11:44,940
Let's go ahead and get a token for James Doe with only right privileges.

98
00:11:46,920 --> 00:11:53,940
Now we are going to try and query with right privileges, so it should tell us that we can't.

99
00:12:00,170 --> 00:12:08,240
Just place the JWT there and it says Access denied because James can only write and not read.

100
00:12:09,540 --> 00:12:13,610
OK, there you can see he only has right privileges.

101
00:12:14,300 --> 00:12:16,850
So let's get a token for Jane Doe.

102
00:12:17,840 --> 00:12:26,930
Remember, Jane Scott only read privileges, so we should at least be able to query data with her JWT.

103
00:12:34,980 --> 00:12:41,880
Just update the very Tolkan there and it heats up Breakpoint for Searching by Folta.

104
00:12:44,490 --> 00:12:50,380
And they you'll see that we have a record for James Doe that was successfully returned.

105
00:12:51,300 --> 00:13:00,810
We can change that to DOE and their returns, all of the Doe's John, Jane and James.

106
00:13:03,120 --> 00:13:11,280
OK, let's try another controlled method using the by ID, it's copy John Doe's ID, the.

107
00:13:15,240 --> 00:13:22,320
It hits our break point because we already added the very token and it's still valid, the JWT is still

108
00:13:22,320 --> 00:13:33,390
valid and the AOC John Doe being returned, we can change it to use a look up to return all of them,

109
00:13:34,620 --> 00:13:42,930
get all users there, and it will return all of our users, all of our controller methods are now secured.
