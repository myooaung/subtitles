WEBVTT
1
00:00:00.180 --> 00:00:09.420
In this lecture, I'm going to introduce you to containerisation and Dr. Containerisation involves encapsulating

2
00:00:09.420 --> 00:00:16.710
or packaging up software code and all of its dependencies so that it can run uniformly and consistently

3
00:00:16.740 --> 00:00:18.510
on any infrastructure.

4
00:00:18.960 --> 00:00:27.150
Containerisation allows developers to create and deploy applications faster and more securely with traditional

5
00:00:27.150 --> 00:00:27.630
methods.

6
00:00:27.630 --> 00:00:34.110
Code is developed in a specific computing environment, which, when transferred to a new location,

7
00:00:34.350 --> 00:00:36.730
often results in bugs and errors.

8
00:00:37.080 --> 00:00:43.860
For example, when a developer transfers code from a desktop computer to a virtual machine or from a

9
00:00:43.860 --> 00:00:51.690
lie next to a Windows operating system, containerisation eliminates this problem by bundling the application

10
00:00:51.690 --> 00:00:59.100
code together with the related configuration files, libraries and dependencies required for it to run.

11
00:00:59.490 --> 00:01:06.600
This single package of software is called the container and is abstracted away from the host operating

12
00:01:06.600 --> 00:01:15.720
system and hence it stands alone and becomes portable, able to run across any platform or cloud free

13
00:01:15.720 --> 00:01:16.570
of issues.

14
00:01:17.220 --> 00:01:22.830
I will show you a diagram where we compare containers to virtual machines in a minute.

15
00:01:23.790 --> 00:01:28.080
This ought to give you an even better understanding of containerisation.

16
00:01:30.540 --> 00:01:38.790
Dufka is a containerisation technology that enables the creation of Linux containers, the docket technology

17
00:01:39.030 --> 00:01:46.290
uses the Linux kernel and features of the kernel like see groups and name spaces to segregate processes

18
00:01:46.290 --> 00:01:48.430
so that they can run independently.

19
00:01:48.930 --> 00:01:55.800
This independence is the intention of container's the ability to run multiple processes and apps separately

20
00:01:55.800 --> 00:02:02.730
from one another to make better use of your infrastructure while retaining the security that you would

21
00:02:02.730 --> 00:02:04.620
have had with separate systems.

22
00:02:05.190 --> 00:02:09.520
Dukkha has become the world's leading containerisation platform.

23
00:02:09.870 --> 00:02:13.320
It is seen by many as the de facto container's standard.

24
00:02:13.680 --> 00:02:20.730
And according to Docker, on average, companies using Dukkha experiences a seven times improvement

25
00:02:20.730 --> 00:02:24.030
in how frequently they are able to ship software.

26
00:02:24.870 --> 00:02:31.140
Consider the following diagram where containerised applications are compared to virtual machines.

27
00:02:31.530 --> 00:02:38.010
Containers and virtual machines have similar resource isolation and allocation benefits, but functions

28
00:02:38.010 --> 00:02:45.030
differently because containerised virtualize is the operating system instead of hardware, containers

29
00:02:45.030 --> 00:02:47.480
are thus more portable and efficient.

30
00:02:47.940 --> 00:02:56.250
Here you can see a HCF are running as containers on a docker engine containers on abstraction at the

31
00:02:56.250 --> 00:03:00.270
application layer that packages code and dependencies.

32
00:03:00.280 --> 00:03:06.540
Together they are less lightweight, and unlike virtual machines, each container does not come with

33
00:03:06.540 --> 00:03:08.250
its own operating system.

34
00:03:08.730 --> 00:03:15.960
Multiple containers can run on the same machine and share the kernel with other containers, each running

35
00:03:15.960 --> 00:03:17.970
as isolated processes.

36
00:03:18.450 --> 00:03:25.380
Containers takes up less space than virtual machines containing images are typically tens of megabytes

37
00:03:25.380 --> 00:03:32.750
in size, can handle more applications and require fewer virtual machines and operating systems.

38
00:03:33.240 --> 00:03:37.890
This significantly reduces infrastructure and licensing costs.

39
00:03:38.700 --> 00:03:45.720
As you can see, virtual machines, on the other hand, are an abstraction of physical hardware, turning

40
00:03:45.720 --> 00:03:47.850
one server into many servers.

41
00:03:48.270 --> 00:03:52.710
The hypervisor allows multiple VMS to run on a single machine.

42
00:03:53.250 --> 00:04:01.740
Each VM includes a full copy of an operating system, the application necessary binaries and libraries

43
00:04:02.100 --> 00:04:04.170
taking up tens of gigabytes.

44
00:04:04.650 --> 00:04:07.320
VMS can also be slow to boot.

45
00:04:08.160 --> 00:04:11.700
Let's have a quick look at what you are going to learn in the section.

46
00:04:12.180 --> 00:04:17.850
You will learn how to build Docker container images for the use of micro services, bank account, micro

47
00:04:17.850 --> 00:04:22.830
services authorization server, as well as the API Gateway.

48
00:04:23.280 --> 00:04:28.260
I'll then show you how to push these docker container images to a darker hub repo.

49
00:04:28.800 --> 00:04:35.400
Then I will show you how to pull Dukkha images from a Docker hub repo and then show you how to deploy

50
00:04:35.670 --> 00:04:38.100
these images as containers.

51
00:04:38.490 --> 00:04:42.300
And then finally, I will show you some useful Dukkha commands.
