WEBVTT
1
00:00:00.330 --> 00:00:08.370
In this lecture, I'm going to introduce you to Spring Security and the Oath 2.0 authorization framework.

2
00:00:09.120 --> 00:00:16.280
Spring security is a powerful and highly customizable authentication and access control framework.

3
00:00:16.650 --> 00:00:21.660
It is the de facto standard for securing spring based applications.

4
00:00:22.020 --> 00:00:29.880
Spring security is a framework that focuses on providing both authentication and authorization to Java

5
00:00:29.880 --> 00:00:30.960
applications.

6
00:00:31.380 --> 00:00:38.370
Like all spring projects, the real power of spring security is found and how easily it can be extended

7
00:00:38.370 --> 00:00:40.580
to meet customer requirements.

8
00:00:41.100 --> 00:00:48.150
Some of its features include comprehensive and extensible support for both authentication authorization,

9
00:00:48.660 --> 00:00:56.880
protection against attacks like session fixation, click checking cross site request forgery, etc..

10
00:00:57.420 --> 00:01:03.240
Server API integration and optional integration with Spring Web MVC.

11
00:01:06.310 --> 00:01:14.410
The North 2.0 authorization framework enables a third party application to obtain limited access to

12
00:01:14.410 --> 00:01:21.880
an HTP service, either on behalf of a resource owner by orchestrating an approval interaction between

13
00:01:21.880 --> 00:01:29.440
the resource owner and the HTP service, or by allowing the third party application to obtain access

14
00:01:29.440 --> 00:01:30.770
on its own behalf.

15
00:01:31.330 --> 00:01:34.680
This specification replaces an obsolete.

16
00:01:34.720 --> 00:01:37.090
The Oath 1.0 protocol.

17
00:01:37.480 --> 00:01:46.890
When the Oath 2.0 authorization server authenticates a user, it generates a JWT or Jason Webb token.

18
00:01:47.230 --> 00:01:49.840
But what is a Jason Webb token?

19
00:01:50.440 --> 00:02:00.280
JWT or Jason Webb token is based on the RF C7 five one nine standard that defines X's tokens can be

20
00:02:00.280 --> 00:02:08.290
generated and encoded as Jason objects to enable the secure transmission of data adjacent.

21
00:02:08.290 --> 00:02:15.340
Webb token consists of a set of claims which refers to information in the form of key value pairs that

22
00:02:15.340 --> 00:02:21.950
are generally used for authentication authorization and for exchanging sensitive information.

23
00:02:22.540 --> 00:02:30.160
Jason Webb tokens are trusted since they are digitally signed using a hash based message authentication

24
00:02:30.160 --> 00:02:39.910
code algorithm or a reverse Shamir, Eidelman or RSA signature with S.H. a two, five, six.

25
00:02:40.750 --> 00:02:43.210
What are we going to do in the section?

26
00:02:43.690 --> 00:02:49.810
We are going to generate an oath to point out authorization server project using the spring, initialize

27
00:02:49.810 --> 00:02:50.010
it.

28
00:02:50.530 --> 00:02:54.250
Then we are going to create to use a service and repository.

29
00:02:54.790 --> 00:03:02.320
The user service will extend the user details service so that the OS 2.0 authorization server can use

30
00:03:02.320 --> 00:03:05.410
our user data during authentication.

31
00:03:05.680 --> 00:03:12.070
They after we are going to implement customized web and auth server configuration classes.

32
00:03:12.550 --> 00:03:18.730
This is to ensure that the correct user authentication mechanisms are applied and that the adjacent

33
00:03:18.730 --> 00:03:25.210
web token is generated using the specified token generation and validation parameters.

34
00:03:25.780 --> 00:03:33.100
Then we are going to secure our MICRA services by configuring our MICRA services as OS 2.0 resource

35
00:03:33.100 --> 00:03:33.780
servers.

36
00:03:34.300 --> 00:03:40.630
This is required so that our military services will be able to validate the Jason with tokens that will

37
00:03:40.630 --> 00:03:44.860
be passed to it as barett token authentication headers.

38
00:03:46.490 --> 00:03:53.750
You might ask, why do we want to build our own OS 2.0 authorization server, shouldn't we just use

39
00:03:53.750 --> 00:03:56.030
a third party authorization server?

40
00:03:56.420 --> 00:04:03.250
Or you might say, hang on, didn't spring security deprecate or discontinued the authorization server

41
00:04:04.010 --> 00:04:06.510
now in November 2019?

42
00:04:06.830 --> 00:04:12.950
An announcement was made that the authorization server will no longer be supported by spring security

43
00:04:12.950 --> 00:04:14.330
in future releases.

44
00:04:14.690 --> 00:04:21.770
However, early in 2020, an announcement was made that, based on the community's feedback, that the

45
00:04:21.770 --> 00:04:27.470
decision to not support the authorization server going forward will be reviewed.

46
00:04:28.040 --> 00:04:35.540
Based on that feedback, Bob Winge from Pivotal announced the brand new spring authorization server

47
00:04:35.540 --> 00:04:36.950
in April 2013.

48
00:04:37.520 --> 00:04:44.480
Before we start to build and configure our Auth 2.0 authorization server, let's take a look at how

49
00:04:44.480 --> 00:04:48.170
the authentication authorization procedure will work.

50
00:04:48.710 --> 00:04:56.210
When a client application, which could be a website or mobile application, wants to make an API request,

51
00:04:56.690 --> 00:05:02.480
it will request a Jason Webb token from the OS 2.0 authorization server.

52
00:05:03.080 --> 00:05:10.130
The authorization server will then authenticate the requested user based on a given grant type, such

53
00:05:10.130 --> 00:05:11.090
as password.

54
00:05:11.510 --> 00:05:19.070
If the user is authenticated, it will generate a JWT and respond back to the client application.

55
00:05:19.490 --> 00:05:28.730
The client application will then add the JWT as a bearer token authorization http header and make an

56
00:05:28.730 --> 00:05:37.640
HTP request to a restful API, which in our case could be either the User Command API, user query API

57
00:05:37.940 --> 00:05:43.670
or the bank account command or query APIs that we are still going to build a little later.

58
00:05:44.240 --> 00:05:48.580
Our APIs will then have the resource server enabled.

59
00:05:48.920 --> 00:05:57.470
Therefore, once the API receives the HTTP request, it will validate the JWT authorized the user and

60
00:05:57.470 --> 00:06:04.250
if the user has been authorized, it'll process the request and respond back to the client application.
