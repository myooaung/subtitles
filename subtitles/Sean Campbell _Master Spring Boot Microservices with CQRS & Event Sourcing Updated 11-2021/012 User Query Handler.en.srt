1
00:00:00,330 --> 00:00:07,470
In this lecture, we are going to implement the user query handler query handling components, Akton,

2
00:00:07,470 --> 00:00:12,780
incoming query messages like the ones we have to find in the previous lecture.

3
00:00:13,200 --> 00:00:21,000
The purpose is generally to query data from the database, navigate to the handlers package under the

4
00:00:21,000 --> 00:00:23,190
user query API project.

5
00:00:24,660 --> 00:00:32,940
Now, let's go ahead and add a new interface, and we can call the interface user query handler.

6
00:00:37,130 --> 00:00:47,930
Now we are going to define three methods and we want to return a response DCO, so let's add a new clause

7
00:00:47,930 --> 00:00:53,690
to the DTA package and call it user Look-Up Response.

8
00:01:02,840 --> 00:01:06,110
Now, go ahead and add the data annotation.

9
00:01:08,310 --> 00:01:16,560
And then we will add a user field that will be used to return the user data that we are going to query

10
00:01:16,560 --> 00:01:18,060
from the database.

11
00:01:22,070 --> 00:01:25,760
Also at the edge, all ARC's constructor annotation.

12
00:01:31,040 --> 00:01:38,090
Now, let's define our first method, let's call it get user by I.D..

13
00:01:41,870 --> 00:01:48,290
And it will take in the fined user by Idy query.

14
00:01:56,110 --> 00:02:04,090
It's at a second method that will also return the user Look-Up response, let's call it search users

15
00:02:07,060 --> 00:02:10,240
and it will take in the search user query.

16
00:02:13,490 --> 00:02:22,970
And then a final message will also return the user Look-Up response, let's call it get all users and

17
00:02:22,970 --> 00:02:26,390
it'll take in, find all users query.

18
00:02:31,790 --> 00:02:39,350
Now, go ahead and add a new Java class and call it user query handler EMPL.

19
00:02:44,660 --> 00:02:48,140
Let's implement the user query handly interface.

20
00:02:59,750 --> 00:03:08,480
Importantly, we need to add the service annotation to use a query handle handler input clause to market

21
00:03:08,480 --> 00:03:09,510
as a service.

22
00:03:10,340 --> 00:03:15,800
We are going to need the user repository to query the user database.

23
00:03:16,160 --> 00:03:26,510
So let's add a private final user repository field and then we are going to use dependency injection

24
00:03:26,510 --> 00:03:28,640
to inject the user repository.

25
00:03:31,730 --> 00:03:36,860
It's added as a parameter to our constructor.

26
00:03:47,900 --> 00:03:49,310
Let's do the assignment.

27
00:03:53,660 --> 00:04:00,410
And then to ensure that the spring IOC container injects it, let's add the auto wird annotation.

28
00:04:01,550 --> 00:04:11,540
OK, now we are going to add the query handler annotations to each of our methods in X on an object

29
00:04:11,540 --> 00:04:18,740
made it clear one or more query handler methods by annotating them with the query handler annotation.

30
00:04:19,430 --> 00:04:27,800
The declared parameters of the methods define which query message it will receive in our case, find

31
00:04:27,800 --> 00:04:33,520
use about idee, query, search user query and find all users query.

32
00:04:34,880 --> 00:04:42,770
Let's start by implementing the get all users method creates a new variable and call it users and then

33
00:04:42,770 --> 00:04:45,530
we will return multiple users.

34
00:04:48,630 --> 00:04:56,460
By invoking the user repository dot find all method, which is, by the way, available out of the box

35
00:04:56,460 --> 00:05:00,840
when you inherit from the Mongo repository and then.

36
00:05:02,530 --> 00:05:07,660
We can return a new instance of the user Look-Up Response DTL.

37
00:05:13,480 --> 00:05:23,590
And pass in our users now they just go and modify our user Look-Up response because I originally added

38
00:05:24,250 --> 00:05:27,060
a single user as a field.

39
00:05:27,070 --> 00:05:29,710
So let's just change that to a list of user.

40
00:05:34,130 --> 00:05:37,910
And then let's change it to users at the airport.

41
00:05:38,960 --> 00:05:42,670
OK, now it should be happy.

42
00:05:43,430 --> 00:05:47,780
The next method that we are going to implement is the search uses method.

43
00:05:48,170 --> 00:05:53,270
Now, remember, the search uses query object contains a search filter.

44
00:05:53,600 --> 00:06:00,620
And we want to use the search filter to do a like query on a number of users and account fields.

45
00:06:01,220 --> 00:06:09,040
In order to do so, we need to extend the user repository by adding a custom Mongo DB query.

46
00:06:09,620 --> 00:06:16,730
We can do so by making use of the query annotation, which allows us to add our own query.

47
00:06:17,710 --> 00:06:26,260
Now we want to do the like query on a number of different fields so we can use the poor operator, you

48
00:06:26,260 --> 00:06:35,380
can do so by using dollar or and then we will use regular expressions to do a like on the first name.

49
00:06:42,200 --> 00:06:42,450
But

50
00:06:47,120 --> 00:06:52,010
if you are not familiar with Mongo DB, the syntax might be a bit confusing.

51
00:07:10,940 --> 00:07:12,760
Let's copy everything.

52
00:07:17,630 --> 00:07:21,770
Let's look at the main object again.

53
00:07:28,640 --> 00:07:32,330
Let's include the last name, as well as the email address.

54
00:07:34,330 --> 00:07:40,660
So let's change the first time there to last name, so we'll do it like on first name and last name

55
00:07:41,100 --> 00:07:45,430
and then go ahead and copy everything from the curly brackets.

56
00:07:50,290 --> 00:08:01,600
The second curly bracket, OK, and a comma basically included as part of the or OK, let's change that

57
00:08:01,900 --> 00:08:04,120
second last name to email address.

58
00:08:05,660 --> 00:08:12,040
Again, copy everything there and another comma to include it as part of the order.

59
00:08:14,330 --> 00:08:16,280
Let's go to the account object.

60
00:08:17,990 --> 00:08:20,150
We also want to do it on the username.

61
00:08:27,130 --> 00:08:30,010
So we can change the day to account.

62
00:08:32,370 --> 00:08:33,690
DOT username.

63
00:08:35,070 --> 00:08:41,970
And then the ore will also be done on the user name, so we've got the user name, the email address,

64
00:08:42,570 --> 00:08:44,310
the last name and the first name.

65
00:08:45,610 --> 00:08:48,160
So we will return a list of users.

66
00:08:51,510 --> 00:09:00,660
It's called out Method Find by Folta Radix, and we can pass in a string filter.

67
00:09:04,320 --> 00:09:05,970
At the airport statement.

68
00:09:10,920 --> 00:09:15,990
Now, let's go back to use a query handly implementation class.

69
00:09:22,730 --> 00:09:26,720
Again, we can add a variable for users

70
00:09:30,380 --> 00:09:43,970
and we will return a list of users, let's invoke user repository that find by Folta rejects and we

71
00:09:43,970 --> 00:09:48,080
can get the filter from the search user query.

72
00:09:51,770 --> 00:09:55,550
Can return in the instance of user Look-Up response.

73
00:09:57,550 --> 00:10:05,250
And we can pass in the users now the final message that we can implement is to get user by ID miss it.

74
00:10:06,130 --> 00:10:08,620
Yeah, we will only get a single user.

75
00:10:09,760 --> 00:10:17,410
We can invoke user repository dot fined by Idy, which is an out of the box method that's available

76
00:10:17,410 --> 00:10:20,350
when you extend the Mongered repository.

77
00:10:23,150 --> 00:10:25,820
It's going to add a new constructor.

78
00:10:27,960 --> 00:10:29,970
It'll take in a single user.

79
00:10:47,430 --> 00:10:50,760
And then we can basically instantiate a new list.

80
00:10:58,170 --> 00:11:07,710
And we can simply add the single user to the list of users, so when invoking the gate user by ID method,

81
00:11:08,340 --> 00:11:12,450
you always only have a single user in the list of users.

82
00:11:13,380 --> 00:11:15,670
OK, let's return a new instance.

83
00:11:17,880 --> 00:11:20,520
Let's see if a user is present.

84
00:11:21,390 --> 00:11:29,850
And if it is, we can instantiate a new instance of user lookup response, passing the user to our new

85
00:11:29,850 --> 00:11:31,830
constructor alse return.

86
00:11:32,010 --> 00:11:32,520
No.

87
00:11:38,020 --> 00:11:42,820
And just call doGet because the user is optional.

88
00:11:45,180 --> 00:11:47,820
OK, now let's build our project.

89
00:12:02,310 --> 00:12:06,240
And everything should build successfully.
