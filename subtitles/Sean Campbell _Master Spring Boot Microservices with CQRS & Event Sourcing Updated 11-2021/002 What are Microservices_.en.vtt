WEBVTT
1
00:00:00.390 --> 00:00:08.250
What exactly are MICRA services, MICRA services are small, loosely coupled applications or services

2
00:00:08.580 --> 00:00:11.250
that can fail independently from each other.

3
00:00:11.640 --> 00:00:18.660
When a micro service fails, only a single function or process in this system should become unavailable

4
00:00:19.020 --> 00:00:21.870
while the rest of the system remains unaffected.

5
00:00:22.200 --> 00:00:26.610
Now let's look at some of the core principles of micro services.

6
00:00:27.150 --> 00:00:30.570
Micro services should not shake code or data.

7
00:00:31.050 --> 00:00:33.990
As we have seen in the definition of a micro service.

8
00:00:34.320 --> 00:00:40.500
We only want to lose a very small part of our system functionality when a micro service fails.

9
00:00:40.830 --> 00:00:48.540
If micro services shake Kaido data, the shared code or data could lead to failure in multiple services.

10
00:00:48.840 --> 00:00:51.990
Therefore, it should be avoided at all costs.

11
00:00:52.320 --> 00:00:58.530
Elesha Micra service architecture would be nothing more than a traditional service oriented architecture

12
00:00:58.770 --> 00:01:00.750
that are tightly coupled together.

13
00:01:01.260 --> 00:01:07.380
Secondly, you should avoid unnecessary coupling between services and software components.

14
00:01:07.770 --> 00:01:12.480
A market service architecture should have low capling and high cohesion.

15
00:01:12.870 --> 00:01:20.490
Recoupling refers to the degree of dependence between software components and cohesion to the measure

16
00:01:20.700 --> 00:01:26.760
in which two or more parts of the system work together to obtain better results than each part.

17
00:01:26.760 --> 00:01:33.870
Individually, independence and autonomy are also more important than code reusability.

18
00:01:34.350 --> 00:01:40.290
While this sounds like a violation of the drive principle, that is, do not repeat yourself.

19
00:01:40.680 --> 00:01:47.330
It is better to duplicate code in certain circumstances than to compromise on independence.

20
00:01:48.090 --> 00:01:52.930
Each MICRA service should be responsible for a single system functional process.

21
00:01:53.400 --> 00:01:57.830
Remember, the goal is that each MICRA service should fail independently.

22
00:01:58.260 --> 00:02:04.440
Therefore, if a micro service is responsible for multiple system functions, you will lose all those

23
00:02:04.440 --> 00:02:05.970
functions when it fails.

24
00:02:06.420 --> 00:02:11.480
And then finally, MICRA services should not communicate directly with each other.

25
00:02:11.820 --> 00:02:17.000
They should make use of an event or message press to communicate with one another.

26
00:02:17.370 --> 00:02:22.750
In this way, the publishers and consumers need to know about each other.

27
00:02:23.160 --> 00:02:29.040
These are some of the core principles of micro services and they can be summarized by the following

28
00:02:29.040 --> 00:02:29.820
statement.

29
00:02:30.330 --> 00:02:35.160
Each MICRA service should believe it is the only service in the world.
