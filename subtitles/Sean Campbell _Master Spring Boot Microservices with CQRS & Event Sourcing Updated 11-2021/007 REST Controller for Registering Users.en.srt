1
00:00:00,590 --> 00:00:08,180
In this lecture, we are going to create a race controller for registering a user, let's create a new

2
00:00:08,180 --> 00:00:12,770
class under the controllers package of the User Command API project.

3
00:00:13,160 --> 00:00:16,860
We can call it registered user controller.

4
00:00:18,950 --> 00:00:26,350
Firstly, let's add the race controller annotation to indicate that this is our full controller.

5
00:00:26,780 --> 00:00:31,940
Then to set up our request mapping route, we can at the request mapping annotation.

6
00:00:32,480 --> 00:00:37,700
A common standard is to always add forward slash API

7
00:00:41,630 --> 00:00:42,590
the version.

8
00:00:45,130 --> 00:00:48,880
And then the name of the controller or controller method.

9
00:00:50,390 --> 00:00:57,110
Now, you can also add the request mapping on your method, however, I prefer to create it on class

10
00:00:57,110 --> 00:01:04,820
level because I try to keep the controller classes as small as possible, often only having a single

11
00:01:04,820 --> 00:01:10,640
method per class in an attempt to comply to the single responsibility principle.

12
00:01:11,390 --> 00:01:18,080
The single responsibility principle states that a class should only have one reason to change the single

13
00:01:18,080 --> 00:01:24,650
responsibility principle is, of course, part of the solid principles with solid is that abbreviation

14
00:01:24,650 --> 00:01:26,660
for single responsibility.

15
00:01:27,080 --> 00:01:35,100
Open, close principle, lisk of substitution, principle, interface, segregation and dependency inversion.

16
00:01:35,810 --> 00:01:41,540
So just to come back to the version in the request mapping, it is best practice to never change the

17
00:01:41,540 --> 00:01:45,440
signature of a restful endpoint once it has gone live.

18
00:01:46,010 --> 00:01:52,450
Therefore, the version is critically important, you might say, but change is inevitable.

19
00:01:52,760 --> 00:01:58,390
For example, a client might want you to return more fields in response DTO.

20
00:01:58,940 --> 00:02:02,910
Fortunately, the open closed principle can help us here.

21
00:02:03,490 --> 00:02:11,420
Now the open closed principle states that a class should be open for extension but closed for modification.

22
00:02:11,910 --> 00:02:16,760
Luckily, in object oriented programming, we have several options.

23
00:02:17,250 --> 00:02:25,940
A simple, practical way of extending is to extend your response DTA by creating a new response to object

24
00:02:26,270 --> 00:02:32,930
that inherits from the original DTA, effectively adding the additional fields without touching the

25
00:02:32,930 --> 00:02:34,120
original object.

26
00:02:34,760 --> 00:02:42,920
Then we can create a version too, of a controller that will have two as the version in the request.

27
00:02:42,920 --> 00:02:44,600
Mapping your path.

28
00:02:45,440 --> 00:02:49,370
Now let's create a private field for our common gateway.

29
00:02:49,730 --> 00:02:56,240
The common gateway is a command dispatching mechanism that will dispatch the registered user command

30
00:02:56,510 --> 00:03:03,350
and once dispatched, it will invoke the command handling constructor for the register user command

31
00:03:03,560 --> 00:03:07,460
and command handling methods for the other user commands.

32
00:03:08,030 --> 00:03:14,060
Let's create a public constructor that takes in the command gateway as parameter.

33
00:03:18,380 --> 00:03:19,880
Lets do the assignment.

34
00:03:28,630 --> 00:03:36,700
Now, let's create a post method by using the post mapping annotation, remember, a post is used for

35
00:03:36,700 --> 00:03:42,800
creating a resource and with the registered user command, we want to create a user.

36
00:03:43,420 --> 00:03:50,770
We are going to return the response entity, which basically allows you to return a response, Teto,

37
00:03:51,130 --> 00:03:54,820
as well as an HTTP status code.

38
00:03:55,300 --> 00:04:00,460
But we will return registered user response that we are going to create just now.

39
00:04:11,690 --> 00:04:17,780
And then for our request, buddy, we will pass in the Register User Command.

40
00:04:34,960 --> 00:04:42,340
Now, let's go ahead and create a new DTL, creates a new class and call it based response.

41
00:04:48,020 --> 00:04:57,950
For all of our commands, we want to return a message now, let's add a private field for our message.

42
00:05:02,160 --> 00:05:07,530
And then we can create a registered user response, Teto.

43
00:05:13,350 --> 00:05:22,320
Now, in this TTR, we want to extend the base response because we also want to return a message when

44
00:05:22,320 --> 00:05:23,600
registering a user.

45
00:05:24,450 --> 00:05:36,210
But for the registered user command, we also want to return an I.D. to say what the idea is of the

46
00:05:36,210 --> 00:05:38,160
user that was just registered.

47
00:05:38,880 --> 00:05:42,810
OK, now let's add the import statement.

48
00:05:43,680 --> 00:05:46,350
We can start by adding a try catch.

49
00:05:49,080 --> 00:05:58,040
When an exception occurs, we can basically respond with HDP status code 500.

50
00:05:58,050 --> 00:06:06,210
But before we do that, create a safe error message variable where we will return our custom message.

51
00:06:06,810 --> 00:06:15,930
We can say error while processing register user request for ID and then we can add the command ID.

52
00:06:17,430 --> 00:06:26,160
Now it's important to return a safe error message because sometimes the exception that the application

53
00:06:26,160 --> 00:06:29,670
generates could contain some sensitive information.

54
00:06:30,240 --> 00:06:40,620
But we can also go ahead and print the actual error to the container log by simply using the system

55
00:06:40,890 --> 00:06:41,820
to print line.

56
00:06:56,550 --> 00:07:03,420
Now, let's return a new instance of registered user response, where we will post the same error message.

57
00:07:14,380 --> 00:07:22,300
And then we can also return HTP status code 500, which is internal server error.

58
00:07:25,850 --> 00:07:30,110
Now we can set a unique command ID.

59
00:07:40,000 --> 00:07:41,710
By using you ID.

60
00:07:43,030 --> 00:07:49,990
Which stands for Universal Unique Identifier dot, random eweida dot to string.

61
00:08:04,670 --> 00:08:12,080
Then we can invoke the command gateway to send or send and wait.

62
00:08:12,500 --> 00:08:21,680
Now, if you use the send and wait method, it will actually only respond when the command handler has

63
00:08:21,680 --> 00:08:29,660
completed its work using send will immediately respond and assume that the user was registered.

64
00:08:31,450 --> 00:08:39,190
And we can return a new instance of registered user response and we'll add a message user successfully

65
00:08:39,190 --> 00:08:40,030
registered

66
00:08:44,530 --> 00:08:51,910
and then the correct HTP status code to return when you create a resource, the status quo, to one

67
00:08:52,390 --> 00:08:54,130
which is created.

68
00:08:55,510 --> 00:09:02,920
Also, we need to remember to add the auto wired annotation to our constructor to ensure that the spring

69
00:09:02,920 --> 00:09:09,670
IOC container injects the command gateway dependancy via dependency injection.

70
00:09:10,000 --> 00:09:17,830
At the moment, we are only returning to HTTP status codes, including the created HTP status and the

71
00:09:17,830 --> 00:09:19,360
internal server error.

72
00:09:19,540 --> 00:09:26,620
When an exception occurs, you might ask, hang on, shouldn't you add some logic to validate the registered

73
00:09:26,620 --> 00:09:28,060
user command object?

74
00:09:28,300 --> 00:09:33,010
And if the user makes a bad request, return status code 400.

75
00:09:33,760 --> 00:09:41,110
Instead of creating logic to validate each of the fields of our request object, we can use validation

76
00:09:41,110 --> 00:09:44,730
annotations to validate each of our fields.

77
00:09:44,980 --> 00:09:47,050
Let's open up our user object.

78
00:09:47,590 --> 00:09:52,180
We can validate our first name to ensure that it's not empty.

79
00:09:52,600 --> 00:09:58,370
And if it's empty, we can add a message that will be returned to the user.

80
00:09:58,990 --> 00:10:03,240
We can say first name is mandatory.

81
00:10:05,290 --> 00:10:07,330
We can do the same for the last name.

82
00:10:10,370 --> 00:10:22,460
Let's change it to last name is mandatory for the email address we can add at email and we can say,

83
00:10:24,620 --> 00:10:29,390
please provide a valid email address

84
00:10:33,620 --> 00:10:40,670
and for the account we can say not now and return a message.

85
00:10:43,340 --> 00:10:46,820
Please provide account credentials.

86
00:10:52,420 --> 00:11:01,300
Now, let's open the account object for the user name, we can say that we want to use a name that is

87
00:11:01,300 --> 00:11:04,390
at least two characters in size.

88
00:11:09,380 --> 00:11:21,170
And if it's not, we will return username must be at least must have a minimum of two characters,

89
00:11:25,760 --> 00:11:27,950
we can do the same for the password.

90
00:11:31,390 --> 00:11:37,300
But let's say a person needs to have a minimum of seven characters.

91
00:11:46,830 --> 00:11:51,540
And we can add the not null invitation for the rose.

92
00:11:53,460 --> 00:11:56,970
And for a message, we could say that.

93
00:11:58,930 --> 00:12:03,010
You should specify at least one row.

94
00:12:16,300 --> 00:12:19,180
OK, now let's build our project.

95
00:12:25,950 --> 00:12:33,870
You will notice that we have an exception, and that is because the validation dependency is not added

96
00:12:33,870 --> 00:12:34,920
by default.

97
00:12:35,490 --> 00:12:37,560
So let's add a new dependency.

98
00:12:42,670 --> 00:12:44,470
For Validation API.

99
00:12:46,390 --> 00:12:54,940
And we will use the latest version 2.0 point one final let's build again.

100
00:13:03,240 --> 00:13:07,080
And this time, everything should build successfully.
