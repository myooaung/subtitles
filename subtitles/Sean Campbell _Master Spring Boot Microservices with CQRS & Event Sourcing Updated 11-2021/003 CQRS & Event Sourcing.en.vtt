WEBVTT
1
00:00:00.420 --> 00:00:07.560
The main goal of this course is to ensure that you learn how to create micro services that comply to

2
00:00:07.560 --> 00:00:14.580
the securities and exchange sourcing patterns, therefore it is important that you have a clear understanding

3
00:00:14.580 --> 00:00:22.170
of what securities and event sourcing means and why we need these patterns to create a resilient architecture

4
00:00:22.440 --> 00:00:27.060
with micro services that are truly independent and highly scalable.

5
00:00:27.720 --> 00:00:30.180
Let's look at securest first.

6
00:00:30.390 --> 00:00:38.370
Security is a software design pattern that stands for command query responsibility segregation.

7
00:00:38.760 --> 00:00:46.770
As the name suggests, applications should be divided in a command and query part commands alters the

8
00:00:46.770 --> 00:00:53.490
status of an object or entity and queries return the state of an object or entity.

9
00:00:53.940 --> 00:01:01.020
Instead of having a single interface for read and write operations secrecy's, altering and querying

10
00:01:01.020 --> 00:01:03.890
of data as to separate concerns.

11
00:01:04.350 --> 00:01:06.390
But why do we need Securus?

12
00:01:06.810 --> 00:01:11.850
Securus allows us to scale up the command and query sites independently.

13
00:01:12.300 --> 00:01:19.710
This is a great advantage, for example, in systems where the reach outnumbers the rights or vice versa.

14
00:01:20.070 --> 00:01:26.510
Separating commands and queries thus allows us to optimize each for high performance.

15
00:01:27.390 --> 00:01:33.840
Now, events sourcing defines an approach with all the changes that are made to an object or entity

16
00:01:34.140 --> 00:01:40.890
are stored as a sequence of immutable events to an event store as opposed to storing just the current

17
00:01:40.890 --> 00:01:41.430
state.

18
00:01:42.000 --> 00:01:48.570
The event sourcing pattern is often used to the securest pattern to perform the data management tasks

19
00:01:48.570 --> 00:01:53.760
in response to events and by materializing views from the stored events.

20
00:01:54.270 --> 00:01:58.560
Let's take a look at the following diagram to make more sense of this.

21
00:01:59.070 --> 00:02:05.760
The micro services that you're going to build in this course will comply to both the security and event

22
00:02:05.770 --> 00:02:07.030
sourcing patterns.

23
00:02:07.500 --> 00:02:10.940
Notice how both of these patterns come into play here.

24
00:02:11.370 --> 00:02:17.430
Yeah, you see that we have a micro service segregated into a command and query API.

25
00:02:17.940 --> 00:02:25.020
Also notice that each MICRA service has its own database and event, store or right database on the

26
00:02:25.020 --> 00:02:30.660
command side and a retailer based on the query side, on the command side.

27
00:02:30.930 --> 00:02:35.960
Once a command is handled, it would typically alter the state of the domain model.

28
00:02:36.330 --> 00:02:42.750
When this happens, an event is raised and appended to the list of events in the event store or right

29
00:02:42.750 --> 00:02:43.620
database.

30
00:02:43.980 --> 00:02:47.430
At the same time, the event is published to the event.

31
00:02:47.430 --> 00:02:55.410
But the Query API has data sovereignty over the database and is thus responsible for subscribing to

32
00:02:55.410 --> 00:02:56.940
the relevant events.

33
00:02:57.480 --> 00:03:04.840
Once it consumes an event from the event PERSSE, it handles the event to update the record in the database.

34
00:03:05.490 --> 00:03:11.120
Notice that there's a difference in how the data is stored in the right versus rete databases.

35
00:03:11.640 --> 00:03:18.700
As already mentioned, the right database or event store contains a sequence of immutability events.

36
00:03:19.110 --> 00:03:27.000
It basically contains an entry for each event, consequently forming an audit trail, thus making it

37
00:03:27.000 --> 00:03:29.380
a topic on the right side.

38
00:03:29.670 --> 00:03:32.940
We only store the current state, for example.

39
00:03:33.330 --> 00:03:39.900
You would typically have a single record for a given user in the database, while you would have an

40
00:03:39.900 --> 00:03:46.990
event for each update that was made to the user record in the event, store or write database.

41
00:03:47.610 --> 00:03:52.940
I hope you have a clearer understanding of what securest and events sourcing are by now.

42
00:03:53.310 --> 00:03:59.400
However, we will discuss some of these terms further in the next lecture, which should clear it up

43
00:03:59.400 --> 00:04:00.180
even more.
