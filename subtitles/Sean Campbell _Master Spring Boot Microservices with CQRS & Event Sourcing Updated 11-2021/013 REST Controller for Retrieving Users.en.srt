1
00:00:00,240 --> 00:00:07,650
In this lecture, we are going to implement the user lookup controller to provide our user query API

2
00:00:07,680 --> 00:00:15,570
with a restful endpoint for retrieving or querying user data, navigate to the controllers package and

3
00:00:15,570 --> 00:00:17,880
through the user query API project.

4
00:00:18,180 --> 00:00:23,750
Let's create a new class and call it user lookup controller.

5
00:00:26,590 --> 00:00:36,530
Let's at the wrest control, annotation and our request mapping annotation for our path, we can use

6
00:00:36,530 --> 00:00:42,260
API forward slash V1 forward slash user Look-Up.

7
00:00:45,460 --> 00:00:52,960
Now, the next thing we are going to do is to add a private final query Gateway Field.

8
00:00:53,530 --> 00:01:00,550
Now the query gateway is a convenient interface and query despatching mechanism that allows you to send

9
00:01:00,550 --> 00:01:08,500
a query and wait for a single or multiple results, either synchronously with a timeout or asynchronously.

10
00:01:08,980 --> 00:01:16,690
Okay, let's add a constructor that takes in the query gateway and then we can do the assignment.

11
00:01:17,920 --> 00:01:26,620
I've also added Auto Wired to ensure that the user query gateway dependency gets injected.

12
00:01:27,370 --> 00:01:31,300
OK, now let's create our first gate mapping.

13
00:01:32,200 --> 00:01:36,830
A get htp verb is obviously used to retrieve data.

14
00:01:38,140 --> 00:01:46,360
So we will return a response entity and we can return a user lookup response.

15
00:01:49,530 --> 00:01:56,550
Let's call it get all users, and we won't have any parameters there.

16
00:01:57,200 --> 00:02:00,050
We can first do our try catch.

17
00:02:04,610 --> 00:02:14,330
And then, as with our previous controllers, we can create a safe error message variable where we can

18
00:02:14,330 --> 00:02:23,120
say failed to complete, get all users request.

19
00:02:26,540 --> 00:02:36,740
But again, we can print the actual error out and that will be printed out in the container log when

20
00:02:36,740 --> 00:02:39,710
we deploy our military services to DOCA.

21
00:02:41,150 --> 00:02:53,450
And then let's return a response entity and then we can instantiate a new user lookup response instance.

22
00:02:54,320 --> 00:02:58,900
Now, in this case, we actually also want to send a message.

23
00:02:59,510 --> 00:03:04,060
Remember, we use the base response that contains a message.

24
00:03:04,070 --> 00:03:13,220
So let's cut the base response and move it to the user core package so that both the user command API

25
00:03:13,220 --> 00:03:15,860
and Query API can access it.

26
00:03:16,700 --> 00:03:20,660
It's created DTL package and we can paste it in there.

27
00:03:21,470 --> 00:03:25,370
And intelligence allows you to refactor, which is quite nice.

28
00:03:26,430 --> 00:03:32,640
And then let's go back to our comptroller and then we can go and.

29
00:03:34,430 --> 00:03:36,860
Update user Look-Up Response.

30
00:03:44,100 --> 00:03:46,620
Let's extend the base response object.

31
00:03:47,700 --> 00:03:55,950
Now, unfortunately, Lomborg does not work so well when you inherit from another object, so will remove

32
00:03:55,950 --> 00:03:56,340
that

33
00:03:59,340 --> 00:04:08,970
and let's create a new constructor that takes in the message and a single user so you can use super

34
00:04:09,870 --> 00:04:13,470
to pass the message to the base class there.

35
00:04:15,240 --> 00:04:19,010
And let's copy that and create another constructor.

36
00:04:20,370 --> 00:04:22,230
And he takes in a message.

37
00:04:22,280 --> 00:04:24,360
That's the one we will use just now.

38
00:04:31,900 --> 00:04:36,070
In this case, we can say no to the base response class.

39
00:04:38,390 --> 00:04:43,460
And there we have Lombok annotations on our base response object.

40
00:04:47,810 --> 00:04:58,190
OK, now we can pass in the safe error message and we can return HDB status code 500 internal server

41
00:04:58,190 --> 00:04:58,710
error.

42
00:05:01,790 --> 00:05:07,430
OK, let's create a new instance of the find all users query,

43
00:05:11,420 --> 00:05:15,110
then create a new variable and call it response.

44
00:05:16,220 --> 00:05:22,820
And we will use the query gateway and invoke the query method.

45
00:05:24,210 --> 00:05:36,600
And we will go ahead and pass in our query instance and specify that we would want a response type.

46
00:05:39,600 --> 00:05:42,450
Of User Look-Up Response.

47
00:05:44,130 --> 00:05:54,480
Now, remember, in our user query handler, we implemented all those query methods, so the query Gateway

48
00:05:54,480 --> 00:06:02,370
knows exactly which one to invoke and then we can return a new response entity.

49
00:06:03,770 --> 00:06:14,720
And passing the response as well as HDB status code, OK, if all goes well, but obviously we can't

50
00:06:14,720 --> 00:06:15,650
assume that.

51
00:06:15,860 --> 00:06:20,440
So let's see if we actually have one or more uses in our response.

52
00:06:21,230 --> 00:06:28,460
Now, we remove the data annotation because we inherited from base response.

53
00:06:28,460 --> 00:06:33,210
So we need to go ahead and add the gates and setters ourselves.

54
00:06:33,740 --> 00:06:42,080
So let's start with gate users where we can return our list of users.

55
00:06:56,130 --> 00:07:06,600
And let's get ahead at the center where we will set our users policy on a list of user.

56
00:07:13,250 --> 00:07:19,280
And then we will just to sign it to users.

57
00:07:22,370 --> 00:07:24,380
OK, so if we go back.

58
00:07:26,220 --> 00:07:36,960
We can go and check if our response actually contains uses its first check of the responses now or if

59
00:07:37,010 --> 00:07:47,910
Kate uses is null, if either is true, we can return a new response entity.

60
00:07:49,720 --> 00:07:56,920
When we return, null and HDB status code two for no content.

61
00:08:04,960 --> 00:08:10,540
OK, now we can implement two more Gatemouth, it's.

62
00:08:13,180 --> 00:08:25,390
And kidnapping again, and this time we will actually add a parameter as part of our path, Heidi,

63
00:08:26,080 --> 00:08:29,890
this will be our Kate user by Idy method.

64
00:08:31,160 --> 00:08:37,150
Just copy everything and change the method name to Kate, user by idee.

65
00:08:47,550 --> 00:08:59,880
And then we can instantiate find usable I'd Creary, let's pause in a path variable, the value will

66
00:08:59,880 --> 00:09:10,200
be idy the same as our Kate mapping and will pass in the string ID as a parameter.

67
00:09:11,300 --> 00:09:16,970
And then we can pass in the I.D. for our find use of Bidi Creary.

68
00:09:19,750 --> 00:09:30,280
Let's just go to our query object and add in at all ARC's constructor, that'll take in an idea the.

69
00:09:31,730 --> 00:09:40,610
OK, then everything seems fine, let's just change our safe error message to fail to complete Katusa

70
00:09:40,610 --> 00:09:46,530
by Idy request, the rest of the code should remain the same.

71
00:09:47,240 --> 00:09:54,980
And then finally, let's implement a search uses method will take in a full to.

72
00:09:59,290 --> 00:10:10,030
Let's call it search user by Folta, our path variable will change to filter and will pass in the string

73
00:10:10,030 --> 00:10:10,750
filter.

74
00:10:11,410 --> 00:10:15,010
Change that to search users query.

75
00:10:23,110 --> 00:10:26,580
Let's just make sure that we have the name correct.

76
00:10:28,070 --> 00:10:36,560
Yes, search uses filter to copy that name also at the auction constructor, because we are going to

77
00:10:36,560 --> 00:10:37,130
need it.

78
00:10:43,310 --> 00:10:47,660
OK, and passing the floater to the constructor.

79
00:10:48,880 --> 00:10:50,420
The race remains the same.

80
00:10:50,440 --> 00:10:57,820
Let's change our safe error message to fail to complete user search request.

81
00:10:59,030 --> 00:10:59,660
OK.

82
00:11:00,570 --> 00:11:05,280
Now, let's go ahead and debug user query API.

83
00:11:06,610 --> 00:11:11,110
You only need to debug or run your user query application.

84
00:11:11,140 --> 00:11:12,790
Now we have an error there.

85
00:11:13,690 --> 00:11:23,370
Oh, yes, we need to go and add one more constructor because we no longer have the loan book at all.

86
00:11:23,840 --> 00:11:27,070
Instructor on our user lookup response object.

87
00:11:27,730 --> 00:11:37,390
So let's add a another constructor that takes in a list of user.

88
00:11:45,440 --> 00:11:49,880
And we'll just pause now as the message to the base response.

89
00:11:50,950 --> 00:11:52,690
And a sign that uses.

90
00:11:55,950 --> 00:11:58,570
And that should do it.

91
00:11:59,430 --> 00:12:01,160
OK, let's try again.

92
00:12:06,420 --> 00:12:11,010
Let's pull that application first to make sure that we have no errors.

93
00:12:23,300 --> 00:12:28,100
Go ahead and add a breakpoint on each of our Gatemouth, it's.

94
00:12:32,780 --> 00:12:35,990
Also in the query handly implementation.

95
00:12:38,610 --> 00:12:40,890
We query handly methods for.

96
00:12:43,910 --> 00:12:45,770
And now let's dbag again.

97
00:12:57,510 --> 00:13:02,940
OK, there you can see that application is running on Port 882.

98
00:13:05,660 --> 00:13:09,060
And copy the request mapping path.

99
00:13:09,080 --> 00:13:20,270
They open up postmen space that they go ahead and copy the HP localhost 881 and then just change that

100
00:13:20,270 --> 00:13:21,530
to 82.

101
00:13:23,560 --> 00:13:33,520
OK, now you will see that we got an unauthorized so we also need to add our temporary security conflict

102
00:13:33,520 --> 00:13:42,070
clause that we will remove when we have implemented the security on our APIs.

103
00:13:45,250 --> 00:13:45,970
OK.

104
00:13:48,580 --> 00:13:51,790
Stop the debug dbag again.

105
00:13:58,520 --> 00:14:06,440
Let's go back to Posman and send our request, you'll see it hits our kid will use this method.

106
00:14:08,790 --> 00:14:18,900
And they dispatched the query and they you'll see we actually have two users, John Doe and Jane Doe

107
00:14:19,860 --> 00:14:20,580
and.

108
00:14:22,130 --> 00:14:28,370
If we continue there, you'll see there you have John Doe and Jane Doe in our results.

109
00:14:31,910 --> 00:14:37,450
OK, now let's copy the idea of John and Postering.

110
00:14:37,910 --> 00:14:42,830
Send it and we get an internal server error.

111
00:14:45,870 --> 00:14:54,090
The reason is because the signature of Katusa by Idy and search users is the same.

112
00:14:54,120 --> 00:14:59,670
Both have a string, so let's rather add a method name in our path.

113
00:15:02,820 --> 00:15:05,130
Let's call it by faulter.

114
00:15:08,950 --> 00:15:13,900
Dbag again got by Idy for the Katusa by idee.

115
00:15:15,930 --> 00:15:28,980
Open up Posman again at by forward, slash the ID and now it hits our breakpoint in Katusa by Idee.

116
00:15:30,060 --> 00:15:31,260
Nice to see.

117
00:15:35,660 --> 00:15:45,320
There you'll see that we have one user, John Doe, and if we run, you'll see it returns John Doe back

118
00:15:46,730 --> 00:15:47,400
again.

119
00:15:47,750 --> 00:15:50,690
We can get both users to.

120
00:15:52,590 --> 00:15:56,670
And let's go and copy Jane Doe's ID

121
00:15:59,320 --> 00:16:06,570
plan, let's call the buy I.D. May 3rd party, Jane's ID, and there you can see Jane Doe being returned

122
00:16:07,320 --> 00:16:09,530
now to try the buy filter.

123
00:16:10,470 --> 00:16:11,900
Let's pass it, Jane.

124
00:16:12,630 --> 00:16:19,620
And it hits the search by filter method runit and Jane Doe is returned.

125
00:16:20,490 --> 00:16:23,810
This person Doe turns nasty.

126
00:16:25,020 --> 00:16:26,160
Let's try.

127
00:16:27,000 --> 00:16:30,390
John turns on John.

128
00:16:31,470 --> 00:16:35,790
Let's again try Spring Bank at Spring Bank

129
00:16:39,090 --> 00:16:46,620
there due to its birth, because birth email addresses are at Spring Bank, though it was needed to

130
00:16:46,620 --> 00:16:51,160
add a capital D for the last name.

131
00:16:51,210 --> 00:16:52,980
Seems like it's case sensitive.

132
00:16:52,980 --> 00:16:53,190
The.
