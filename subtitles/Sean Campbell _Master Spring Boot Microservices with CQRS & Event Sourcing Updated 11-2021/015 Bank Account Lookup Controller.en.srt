1
00:00:00,300 --> 00:00:05,430
In the previous lecture, we have implemented the account query handler.

2
00:00:05,850 --> 00:00:14,370
Now we are going to create a risk controller that will expose an HTP endpoint for querying data from

3
00:00:14,370 --> 00:00:16,370
the bank account database.

4
00:00:16,770 --> 00:00:23,850
It is going to use a query gateway that will dispatch the query object to the query handler methods

5
00:00:24,180 --> 00:00:27,100
that we have defined in the account query handler.

6
00:00:27,630 --> 00:00:35,640
These again will utilize the account repository to query the MySQL database where we are storing our

7
00:00:35,640 --> 00:00:43,740
bank account records, navigate to the controls package and the bank account query API, create a new

8
00:00:43,740 --> 00:00:48,160
class and call it account lookup controller.

9
00:00:50,460 --> 00:00:59,220
Start by annotating it with the rest controller annotation as well as the request mapping annotation

10
00:01:01,320 --> 00:01:02,450
for our path.

11
00:01:02,850 --> 00:01:11,640
We can use API forward slash V1 Forward slash bank account lookup.

12
00:01:15,790 --> 00:01:27,190
Now, let's add a private final field for the query gateway, we are again going to use dependency injection

13
00:01:27,190 --> 00:01:33,310
to inject the query gateway dependency into a card lookup controller constructor.

14
00:01:52,160 --> 00:01:59,870
Now, let's start by implementing our first kid method for our kid mapping, we can simply go ahead

15
00:01:59,870 --> 00:02:02,660
and add forward slash for our path.

16
00:02:03,860 --> 00:02:05,870
We also need to secure our gate.

17
00:02:06,200 --> 00:02:12,680
It therefore add the preauthorization annotation and make sure that the user that makes the request

18
00:02:13,010 --> 00:02:14,810
has read privileges.

19
00:02:39,770 --> 00:02:47,420
We will return the account lookup response as the response entity, let's call our method, get all

20
00:02:47,420 --> 00:02:51,910
accounts, it is not going to take in any parameters.

21
00:02:52,640 --> 00:02:54,680
So let's start with the try catch.

22
00:03:02,880 --> 00:03:06,980
As always, it's good to add a safe error message.

23
00:03:11,490 --> 00:03:18,120
We can add a message such as failed to complete get all accounts request.

24
00:03:24,690 --> 00:03:32,370
And then we will also log the actual error message to the container log by using system that OUTHRED

25
00:03:32,370 --> 00:03:42,630
print line, and then we are going to return a new instance of a card lookup response with a safe error

26
00:03:42,630 --> 00:03:48,870
message, as well as HDB status code 500 internal server error.

27
00:03:58,510 --> 00:04:03,190
Now, let's instantiate a new instance or find all accounts Creary.

28
00:04:10,280 --> 00:04:16,700
And then we can get the response with all of our accounts by invoking query, gateway, dot, query,

29
00:04:17,270 --> 00:04:24,380
passing in our query and specifying the response time as a card lookup response.

30
00:04:36,660 --> 00:04:40,890
That class and dot join.

31
00:04:42,900 --> 00:04:48,860
OK, and then let's make sure that we actually have a response.

32
00:04:49,440 --> 00:04:55,050
So if the response is no or response that get counts.

33
00:04:57,230 --> 00:04:58,040
Equals now.

34
00:04:59,300 --> 00:05:04,970
Then we can return the Icard lookup response.

35
00:05:06,370 --> 00:05:14,530
As now as well as SCDP status quo to for no content.

36
00:05:25,070 --> 00:05:32,900
But if we do have a response and we do have one or more accounts, we can return our response with HDB

37
00:05:32,900 --> 00:05:34,840
status code two hundred.

38
00:05:34,850 --> 00:05:35,750
Okay.

39
00:05:43,940 --> 00:05:52,910
Go ahead and copy the entire kit method and then we are going to change it to return the account by

40
00:05:52,910 --> 00:06:02,380
I.D. to change the path to buy Ida forward, slash Ida and then we'll pass in the account I sold.

41
00:06:02,450 --> 00:06:06,860
Also change the method name to get a count by Ida.

42
00:06:07,340 --> 00:06:13,340
And then we are going to pass in a path variable that is going to be the bank account Ida.

43
00:06:24,630 --> 00:06:32,610
And let's change the query that we instantiate to find it count by Idy query, and then we are going

44
00:06:32,610 --> 00:06:36,050
to pass in the ID, OK?

45
00:06:36,660 --> 00:06:38,140
The race stays the same.

46
00:06:38,400 --> 00:06:46,050
Just change the safe error message to fail to complete account, but by the request and then go ahead

47
00:06:46,050 --> 00:06:48,630
and copy the entire git method again.

48
00:06:55,750 --> 00:06:59,850
And then we are going to change it to buy whole dite.

49
00:07:00,850 --> 00:07:09,100
And also change that to account holder, the for a path variable and copy that across for the value

50
00:07:09,250 --> 00:07:14,740
of the path variable as well and change the parameter name as well.

51
00:07:15,190 --> 00:07:21,880
Also, change the method to get a card by Holder Idy and pass in the account holder ideas.

52
00:07:21,910 --> 00:07:25,650
Well, change the safe error message to fail to complete.

53
00:07:25,660 --> 00:07:28,990
Get a card by Holder ID request.

54
00:07:30,670 --> 00:07:39,880
And then it's copy the entire method and change it to with balance, and then we are going to pass in

55
00:07:39,880 --> 00:07:52,240
a quality time greater than or less then and another parameter, which is going to be the balance and

56
00:07:52,240 --> 00:07:58,480
then add that, change it to quality type enum.

57
00:07:59,290 --> 00:08:07,000
Also change the parameter name and add a second path variable for our balance.

58
00:08:15,640 --> 00:08:24,280
And then it's going to be a type double and balance and change the query to find a card with balance

59
00:08:24,280 --> 00:08:30,280
query plus in the equality type as well as the balance.

60
00:08:31,690 --> 00:08:40,450
OK, and then change the safe error message to fail to complete credit cards with balance request.

61
00:08:43,270 --> 00:08:50,710
OK, so that concludes the implementation of all our methods, so let's build our project.

62
00:09:02,260 --> 00:09:03,580
Both successfully.

63
00:09:04,250 --> 00:09:10,600
Now, let's go ahead and add API gateway routes for a new account lookup controller.

64
00:09:16,420 --> 00:09:25,330
So copy the user lookup API Gateway route and change it to bank I.C.C., query API.

65
00:09:29,770 --> 00:09:35,980
Port 1992 and change there, two bank account, look up

66
00:09:41,020 --> 00:09:48,190
this, just copy it over and make sure that it's the correct name and also changed it for the predicate.

67
00:09:49,810 --> 00:09:50,230
OK.

68
00:09:51,880 --> 00:09:56,230
Let's go ahead and run our API Gateway application.

69
00:10:01,330 --> 00:10:04,870
As well as our bank account query application.

70
00:10:12,520 --> 00:10:20,320
Also, go ahead and run the Health 2.0 authorisation server, we'll need to get JWT to get.

71
00:10:23,660 --> 00:10:33,710
And then go ahead and run the user query API as well, because we are going to need to get a few user

72
00:10:33,710 --> 00:10:43,610
IDs because remember, we deleted one and only bank account, so also ran the bank account command API.

73
00:10:54,160 --> 00:11:00,760
And then that should do it, so put a break point in all of our controller methods.

74
00:11:08,610 --> 00:11:10,170
Then open postman.

75
00:11:11,820 --> 00:11:22,590
So let's add a new tab, and for the year, I will use SCDP localhost 2000 through the API Gateway Forward

76
00:11:22,590 --> 00:11:28,100
Slash API forward slash fee, one bank account, Look-Up Forward Slash.

77
00:11:28,650 --> 00:11:31,200
So that's to return all bank accounts.

78
00:11:31,680 --> 00:11:34,310
That's going to say that we are unauthorized.

79
00:11:35,070 --> 00:11:37,830
So let's get a new JWT.

80
00:11:38,580 --> 00:11:40,160
We are using John Doe.

81
00:11:40,290 --> 00:11:41,340
That's got right.

82
00:11:41,340 --> 00:11:43,560
And probably just remember.

83
00:11:50,660 --> 00:11:58,910
That it is a period taken and then it hits control method and you'll see that we actually have no accounts

84
00:11:58,910 --> 00:12:03,800
left and we get a state escucha for no content.

85
00:12:04,490 --> 00:12:09,800
So now we need to go and create bank accounts for our users.

86
00:12:12,610 --> 00:12:17,320
Let's start by making a post to the open bank account controller, Messitte.

87
00:12:19,500 --> 00:12:25,710
But first, we need to get a user I.D. for account holder I.D..

88
00:12:35,160 --> 00:12:39,270
So for John Doe, that's copy his user ID.

89
00:12:40,670 --> 00:12:44,970
And then as the account holder item, we will pass in John Doe's.

90
00:12:45,920 --> 00:12:52,340
Let's give him a savings account, this time with an open balance of 100 dollars.

91
00:12:55,610 --> 00:13:00,460
OK, let's just make sure that that JWT hasn't expired yet.

92
00:13:02,740 --> 00:13:03,330
OK.

93
00:13:05,420 --> 00:13:10,700
Update the pyrotechnician and let's hit send.

94
00:13:12,170 --> 00:13:18,200
The bank account was successfully opened to one created.

95
00:13:19,040 --> 00:13:22,910
OK, now let's go ahead and add one for Jane Doe's well.

96
00:13:26,330 --> 00:13:28,760
So just update the account holder.

97
00:13:28,790 --> 00:13:35,810
I'd say it's given a current account with the balance of two hundred dollars.

98
00:13:37,750 --> 00:13:38,800
Hit send.

99
00:13:40,550 --> 00:13:43,990
And her account was opened successfully as well.

100
00:13:45,340 --> 00:13:47,080
And then for James Doe.

101
00:13:48,100 --> 00:13:57,610
Katie's user ID, they change the account holder ID, leave it a current account and change his balance

102
00:13:57,610 --> 00:13:59,350
to 300 dollars.

103
00:14:02,220 --> 00:14:04,860
No, let's give him a savings account, rather.

104
00:14:06,140 --> 00:14:15,950
OK, hit send and successfully open a new bank account for James Doe, log into your MySQL database.

105
00:14:21,380 --> 00:14:30,200
Into the bank database, bank account table, and then you'll see that we have three bank accounts and

106
00:14:30,200 --> 00:14:34,110
they are the balances that we gave each of our users.

107
00:14:34,820 --> 00:14:38,870
So for the bank account, Look-Up, get a new token.

108
00:14:43,100 --> 00:14:48,200
And then we will retrieve all bank cards, just update the period in the.

109
00:14:49,720 --> 00:14:58,000
And it hits a kid on the accounts query controller method, reads the query handler.

110
00:14:59,160 --> 00:15:07,190
And then it queries the MySQL database, returns the Kadlec response, we have response status code

111
00:15:07,200 --> 00:15:11,470
two hundred and successfully return three bank accounts.

112
00:15:11,470 --> 00:15:15,690
And you can see bank accounts for John, Jane and James.

113
00:15:26,500 --> 00:15:35,620
OK, so now let's look up by I.D. and then we'll pass in James's I.D., Remember, he's got three hundred

114
00:15:35,620 --> 00:15:46,440
dollars and then it hits it count by dimethoate and you'll see it hits Creary handling method as well.

115
00:15:52,010 --> 00:15:59,060
And then bank accounts successfully returned with status quo two hundred and they you can see the bank

116
00:15:59,210 --> 00:16:10,400
detail now again, they get all the cards, get the cardholder I.D. of Jane Doe's account

117
00:16:14,840 --> 00:16:19,800
ID, send it hit Skate's account by Holder idee.

118
00:16:20,780 --> 00:16:24,410
Now you'll see that there is actually a mistake.

119
00:16:24,650 --> 00:16:34,820
I made it find the account by Idy query that should be find a card holder idy query, see what copy

120
00:16:34,820 --> 00:16:35,870
and paste does.

121
00:16:36,680 --> 00:16:47,300
They just build our project again to make sure and everything should build successfully debug the bank

122
00:16:47,480 --> 00:16:49,730
account query application again.

123
00:16:59,930 --> 00:17:10,160
And let's go back to pressmen, try that again, it hits and try to make it dispatches, the query is

124
00:17:10,160 --> 00:17:11,630
the query handler method.

125
00:17:16,550 --> 00:17:22,370
And it successfully returns the bank account of Jane Doe.

126
00:17:23,300 --> 00:17:29,270
This is the bank account holder, Eyedea, that we queried with and that works.

127
00:17:29,840 --> 00:17:37,160
So let's try with balance, let's say with a balance greater than

128
00:17:39,710 --> 00:17:41,390
50 hit.

129
00:17:41,410 --> 00:17:44,540
Send it a controlling method.

130
00:17:46,420 --> 00:17:49,360
Gets dispatched, his secretary handling method.

131
00:17:50,750 --> 00:17:58,100
And it returns it, see what it returns, it actually returns all three accounts because all of them

132
00:17:58,100 --> 00:17:59,660
are greater than 50.

133
00:18:00,380 --> 00:18:04,460
Change that to a hundred and fifty.

134
00:18:06,780 --> 00:18:10,140
And then it's supposed to return to great.

135
00:18:11,140 --> 00:18:19,250
OK, so let's try greater than 200 and it only returns.

136
00:18:19,260 --> 00:18:22,870
James does a count of 300 dollars.

137
00:18:24,070 --> 00:18:26,550
It's less than 200.

138
00:18:27,120 --> 00:18:31,640
I only have one John Doe's account with 100 dollars.

139
00:18:32,130 --> 00:18:33,520
They said to 10.

140
00:18:33,570 --> 00:18:37,800
We get two hundred and hundred, John and Jane.

141
00:18:37,950 --> 00:18:40,080
And they nothing less than 50.

142
00:18:41,040 --> 00:18:42,120
Less than 300.

143
00:18:42,120 --> 00:18:45,200
Again, I need to 310.

144
00:18:45,810 --> 00:18:46,680
All three.
