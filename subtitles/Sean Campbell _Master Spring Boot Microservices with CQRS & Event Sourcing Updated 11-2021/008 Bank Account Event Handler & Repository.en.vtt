WEBVTT
1
00:00:00.330 --> 00:00:06.660
In this lecture, we are going to implement the account event handler with methods that subscribe to

2
00:00:06.660 --> 00:00:14.040
the event press to consume the bank account events once consumed, it will create or alter the state

3
00:00:14.040 --> 00:00:17.170
of bank accounts in the bank account read database.

4
00:00:17.550 --> 00:00:24.570
Thus, we will also need to implement the account repository to interact with the MySQL database, where

5
00:00:24.570 --> 00:00:31.380
we are going to store our bank account records, navigate to the hander's package under the bank account

6
00:00:31.380 --> 00:00:33.060
query API project.

7
00:00:34.030 --> 00:00:41.880
Let's create a new interface and call it account event handler.

8
00:00:46.120 --> 00:00:52.360
Now, let's define four methods each for handling one of the bank account events.

9
00:00:52.600 --> 00:00:55.570
Let's start with the account.

10
00:00:55.720 --> 00:00:56.800
Open the event.

11
00:00:59.950 --> 00:01:03.730
And let's add another one for the fans deposit to the event.

12
00:01:12.960 --> 00:01:15.980
Said one for the funds withdrawn event

13
00:01:20.120 --> 00:01:25.370
and then the last one for handling the account closed event.

14
00:01:34.060 --> 00:01:42.130
Now, let's create a class that implements the account event handler, and we can call it a current

15
00:01:42.130 --> 00:01:43.540
event handler, EMPL.

16
00:01:45.470 --> 00:01:54.980
Let's start by marking it with the service sanitation and also by marking it with a processing group

17
00:01:54.980 --> 00:02:03.260
annotation, remember, Exxon keeps track of the offset of each processing group to make sure that it

18
00:02:03.260 --> 00:02:05.540
always consumes the latest event.

19
00:02:06.020 --> 00:02:11.600
And as mentioned before, Exxon manages the consumer offsets for each processing group.

20
00:02:11.600 --> 00:02:15.650
Separately, let's add a field for the account repository.

21
00:02:24.290 --> 00:02:32.360
Now, we must still create the account repository, let's add a new interface and call it a card repository.

22
00:02:35.870 --> 00:02:39.530
It is going to extend the credit repository.

23
00:02:43.840 --> 00:02:51.070
Which will basically allow us to interact with MySQL database, where we are going to store our bank

24
00:02:51.070 --> 00:02:52.480
account records.

25
00:02:55.900 --> 00:02:57.210
That's all we have to do.

26
00:03:05.050 --> 00:03:16.180
And go ahead and create a public constructor and we will use Orta Wired so that it's injected via dependency

27
00:03:16.180 --> 00:03:16.900
injection.

28
00:03:24.950 --> 00:03:26.540
Let's do the assignment,

29
00:03:30.770 --> 00:03:31.240
OK?

30
00:03:31.850 --> 00:03:38.760
Now, also go ahead and add the event handler annotation on each of our methods.

31
00:03:38.990 --> 00:03:45.440
Now, remember, the event handlers basically defines the business logic to be performed within the

32
00:03:45.440 --> 00:03:47.750
event is consumed from the event.

33
00:03:51.710 --> 00:04:00.830
So for our first event handler method, when we consume the account open event, we want to create a

34
00:04:00.830 --> 00:04:04.670
new record in our bank account database.

35
00:04:04.680 --> 00:04:10.220
So let's use the builder to construct our bank account, domain model or entity.

36
00:04:10.910 --> 00:04:12.320
We can set the idee.

37
00:04:16.720 --> 00:04:20.500
Then our account holder idee.

38
00:04:26.210 --> 00:04:27.530
The creation date.

39
00:04:34.870 --> 00:04:36.340
Then the account type.

40
00:04:42.190 --> 00:04:44.530
And we can set the balance.

41
00:04:50.050 --> 00:04:58.000
And we can call bold so that the boulder returns the constructed entity and then we can simply use the

42
00:04:58.000 --> 00:05:04.570
save method of the account repository that's, by the way, available out of the box.

43
00:05:05.200 --> 00:05:09.260
OK, now let's implement the funds deposited event handler.

44
00:05:09.760 --> 00:05:19.780
Let's first get our bank account record from our MySQL database by calling the find by Idee method and

45
00:05:19.780 --> 00:05:22.210
we can get the idea from the event object.

46
00:05:23.280 --> 00:05:32.580
And then let's do a check to see if we actually have a bank account, we can use the is empty.

47
00:05:33.270 --> 00:05:44.640
If it is empty, then we will just return or else we are going to get the bank account and then we will

48
00:05:44.640 --> 00:05:51.900
update the balance to the balance that is carried with the event object, and then we'll simply invoke

49
00:05:51.900 --> 00:05:53.280
the save method again.

50
00:06:08.010 --> 00:06:17.070
OK, now let's copy the funds deposited positive event handlers code because for the funds withdrawn

51
00:06:17.070 --> 00:06:20.040
event, our code will look exactly the same.

52
00:06:20.220 --> 00:06:27.090
And then finally, let's implement our account closed event handler and we will simply invoke the delete

53
00:06:27.090 --> 00:06:30.420
by Idy method of our account repository.

54
00:06:32.290 --> 00:06:39.420
OK, that concludes the implementation of our account event handler and account repository.

55
00:06:41.460 --> 00:06:43.290
So let's build our projects.

56
00:06:51.250 --> 00:06:54.520
And then everything should build successfully.
