WEBVTT
1
00:00:02.115 --> 00:00:05.284
There are many other types of secrets apart from the user's

2
00:00:05.284 --> 00:00:09.201
credentials that will be required by your application from your

3
00:00:09.201 --> 00:00:12.955
database credentials to TLS certificates,

4
00:00:12.955 --> 00:00:15.861
keystore location, keystore passwords,

5
00:00:15.861 --> 00:00:18.820
tokens to various APIs your application will use.

6
00:00:18.820 --> 00:00:21.933
Now these are just as important to secure and manage,

7
00:00:21.933 --> 00:00:25.146
and they also need to be changed periodically.

8
00:00:25.146 --> 00:00:28.785
Often when happens is that a secret sprawl develops where

9
00:00:28.785 --> 00:00:32.132
these credentials are distributed to different places in plain

10
00:00:32.132 --> 00:00:37.117
text in a properties file perhaps, some environment variables,

11
00:00:37.117 --> 00:00:41.119
in the source code, in the configuration management like Jenkins,

12
00:00:41.119 --> 00:00:45.779
Ansible, Bamboo, Puppet, and ultimately they end up in source control,

13
00:00:45.779 --> 00:00:47.664
like Git or SVN.

14
00:00:47.664 --> 00:00:50.687
Now this often leads to duplication.

15
00:00:50.687 --> 00:00:54.598
Now one application might source the secrets from a property file,

16
00:00:54.598 --> 00:00:58.899
and another might source the same secret from a database.

17
00:00:58.899 --> 00:01:02.850
Basically, the credentials are spread across your infrastructure.

18
00:01:02.850 --> 00:01:05.223
Now this leads to a lot of uncertainty.

19
00:01:05.223 --> 00:01:08.209
It's difficult to know who has access to the actual credentials

20
00:01:08.209 --> 00:01:11.755
or to audit who accessed the credentials.

21
00:01:11.755 --> 00:01:15.924
And secret rotation become very risky because no one really knows

22
00:01:15.924 --> 00:01:18.790
what the impact is of changing a particular secret.

23
00:01:18.790 --> 00:01:22.257
Will our critical application just all of a sudden stop working because it

24
00:01:22.257 --> 00:01:25.848
used the password hard-coded in the configuration file?

25
00:01:25.848 --> 00:01:29.213
So in the end, we end up with stale secrets that never change.

26
00:01:29.213 --> 00:01:29.613
Hence,

27
00:01:29.613 --> 00:01:34.567
a good option is to centralize your secrets in one location and

28
00:01:34.567 --> 00:01:36.733
provide fine-grained access to those secrets,

29
00:01:36.733 --> 00:01:42.527
only giving clients the bare minimum access to secrets they need to use,

30
00:01:42.527 --> 00:01:45.297
so using things like access control lists.

31
00:01:45.297 --> 00:01:47.818
You also want your secrets to be encrypted,

32
00:01:47.818 --> 00:01:53.753
both at rest and in transit to the client and the ability to rotate the secrets,

33
00:01:53.753 --> 00:01:54.316
i.e.

34
00:01:54.316 --> 00:01:56.006
change them frequently.

35
00:01:56.006 --> 00:01:58.091
And finally, you want audit.

36
00:01:58.091 --> 00:02:01.495
By who and when was the secret accessed?

37
00:02:01.495 --> 00:02:05.949
Now fortunately, Spring provides a solution for this with Spring Vault,

38
00:02:05.949 --> 00:02:12.111
which is an abstraction around Vault by HashiCorp from the Spring Cloud project.

39
00:02:12.111 --> 00:02:15.872
Now Vault by HashiCorp meets all the requirements previously

40
00:02:15.872 --> 00:02:20.243
mentioned and additionally can be configured so that no one

41
00:02:20.243 --> 00:02:22.517
person can access the secrets.

42
00:02:22.517 --> 00:02:28.049
Root keys are changed regularly and are only stored in memory.

43
00:02:28.049 --> 00:02:30.545
It has a master switch to seal the vault in emergencies,

44
00:02:30.545 --> 00:02:35.695
key rolling so that keys can be changed at any time while allowing decryption of

45
00:02:35.695 --> 00:02:39.137
secrets encrypted with past key versions to still continue.

46
00:02:39.137 --> 00:02:44.179
It can use tokens that are assigned to a policy that can scope particular users,

47
00:02:44.179 --> 00:02:45.875
services, or applications.

48
00:02:45.875 --> 00:02:51.012
And it integrates with common identity stores, like LDAP, to obtain tokens, etc.

49
00:02:51.012 --> 00:02:54.585
So let's set up the Vault server for the purpose of this demo.

50
00:02:54.585 --> 00:02:57.263
You can download an unzipped vault from the following URL.

51
00:02:57.263 --> 00:03:03.326
Now in the folder where you unzip the vault, create a vault.conf file.

52
00:03:03.326 --> 00:03:08.296
Here we can add the configurations for our vault server, like the storage type.

53
00:03:08.296 --> 00:03:10.876
This is where the secrets will be persisted.

54
00:03:10.876 --> 00:03:13.228
For the demo, I have used an in-memory one.

55
00:03:13.228 --> 00:03:15.374
However, you wouldn't want to use that in production,

56
00:03:15.374 --> 00:03:21.385
and Vault supports many other types, as you can see from their site.

57
00:03:21.385 --> 00:03:23.606
The listener specifies the endpoint that the clients

58
00:03:23.606 --> 00:03:25.863
can use to create a Vault server.

59
00:03:25.863 --> 00:03:28.730
In this case, it'll be the localhost on port 8200.

60
00:03:28.730 --> 00:03:30.875
In the next property,

61
00:03:30.875 --> 00:03:36.564
we disable the TLS so that our location can connect to Vault over HTTP.

62
00:03:36.564 --> 00:03:40.967
This is to simplify the demo and for development purposes only.

63
00:03:40.967 --> 00:03:44.963
In production, you want TLS enabled as it is not difficult to do.

64
00:03:44.963 --> 00:03:46.449
Vault supports it by default,

65
00:03:46.449 --> 00:03:50.887
and all you have to do is pass in your certificate on startup.

66
00:03:50.887 --> 00:03:54.271
Now using just HTTP exposes your secret to anyone

67
00:03:54.271 --> 00:03:56.253
eavesdropping on network traffic.

68
00:03:56.253 --> 00:03:59.914
You can now start the Vault server using the following command.

69
00:03:59.914 --> 00:04:03.558
Now open another terminal and set the vault address

70
00:04:03.558 --> 00:04:06.988
environment variable to the URL in your config file.

71
00:04:06.988 --> 00:04:13.191
Next, you need to initialize Vault with the vault operator init command.

72
00:04:13.191 --> 00:04:17.547
Vault returns five unsealed keys and a root token.

73
00:04:17.547 --> 00:04:21.159
If we check the status of Vault, you can see that it is sealed,

74
00:04:21.159 --> 00:04:23.967
meaning it has no access to the encryption key to

75
00:04:23.967 --> 00:04:26.318
decrypt any of the secrets stored within.

76
00:04:26.318 --> 00:04:29.075
Hence, no operations are currently possible.

77
00:04:29.075 --> 00:04:32.052
The encryption key is encrypted with a master key.

78
00:04:32.052 --> 00:04:37.195
This is where the unsealed keys came into play when we initialized Vault.

79
00:04:37.195 --> 00:04:40.379
You need to provide at least three of these to Vault so that it can

80
00:04:40.379 --> 00:04:43.970
generate the master key to decrypt the encryption key.

81
00:04:43.970 --> 00:04:46.664
Now this makes Vault secure because you can actually distribute the

82
00:04:46.664 --> 00:04:49.822
five keys to separate individuals or systems.

83
00:04:49.822 --> 00:04:55.269
And on startup, three of them would have to provide the keys to unseal Vault.

84
00:04:55.269 --> 00:04:57.163
Now the command to unseal Vault is simple,

85
00:04:57.163 --> 00:05:00.745
vault operator unseal with the key passed in.

86
00:05:00.745 --> 00:05:03.768
Now if we view the status, we can see the progress.

87
00:05:03.768 --> 00:05:08.712
Currently one more unsealed key is required.

88
00:05:08.712 --> 00:05:10.301
Vault is now unsealed.

89
00:05:10.301 --> 00:05:14.838
So let's set the environment variable for Vault token with the

90
00:05:14.838 --> 00:05:18.185
master token returned when we initialized Vault,

91
00:05:18.185 --> 00:05:20.320
and now we can add a secret.

92
00:05:20.320 --> 00:05:23.349
So we can use the vault operator write secret/crypt

93
00:05:23.349 --> 00:05:25.854
and add the keystore_password.

94
00:05:25.854 --> 00:05:30.971
Now the format is secret/ your application name,

95
00:05:30.971 --> 00:05:32.483
in this case our application is called crypto,

96
00:05:32.483 --> 00:05:35.316
followed by the property you want to set.

97
00:05:35.316 --> 00:05:38.959
Now for our application to connect to Vault,

98
00:05:38.959 --> 00:05:43.414
we need to first add the Spring Cloud Vault dependencies and the spring-

99
00:05:43.414 --> 00:05:48.096
cloud-starter-vault-config to our Spring Boot POM file.

100
00:05:48.096 --> 00:05:54.487
Then we create a bootstrap.yml file in our resources folder.

101
00:05:54.487 --> 00:05:57.393
This is required by the Spring Cloud project.

102
00:05:57.393 --> 00:06:02.334
Now Spring will process the bootstrap.properties file before any other config.

103
00:06:02.334 --> 00:06:05.284
As in this case, our application.yml file,

104
00:06:05.284 --> 00:06:07.832
or any other properties files we have,

105
00:06:07.832 --> 00:06:12.839
might need to source some of the properties that are in the Vault config server.

106
00:06:12.839 --> 00:06:13.193
Hence,

107
00:06:13.193 --> 00:06:17.020
Spring Cloud Vault needs to initialize first before the

108
00:06:17.020 --> 00:06:18.550
application.yml file is processed.

109
00:06:18.550 --> 00:06:22.375
Now in the bootstrap file, we provide the application name,

110
00:06:22.375 --> 00:06:25.464
which needs to match the key entries we added to vault,

111
00:06:25.464 --> 00:06:31.380
the host and port of the listener we configured in our Vault config file,

112
00:06:31.380 --> 00:06:36.635
http for scheme as that's what we defined in the vault config file.

113
00:06:36.635 --> 00:06:40.934
But again, in production, you would want to use HTTPS.

114
00:06:40.934 --> 00:06:47.110
The authentication, in this case, token and the token value.

115
00:06:47.110 --> 00:06:51.080
Now Vault also allows you to generate multiple tokens for

116
00:06:51.080 --> 00:06:53.738
different applications with different permissions,

117
00:06:53.738 --> 00:06:54.284
etc.

118
00:06:54.284 --> 00:06:56.954
But in this demo, we'll just use the master token.

119
00:06:56.954 --> 00:07:01.346
You can now update the application.yml file with the keystore property,

120
00:07:01.346 --> 00:07:04.813
which will now be sourced from Vault.

121
00:07:04.813 --> 00:07:07.170
So now the password is no longer in the source

122
00:07:07.170 --> 00:07:09.662
control and is no longer in plain text.

123
00:07:09.662 --> 00:07:10.417
That's it.

124
00:07:10.417 --> 00:07:15.967
You can even access properties within your code using the @value annotation.

125
00:07:15.967 --> 00:07:19.501
Now one final thing that I'm sure you've noticed is that the master

126
00:07:19.501 --> 00:07:23.091
token is in plain text in the bootstrap.config file.

127
00:07:23.091 --> 00:07:23.324
Hence,

128
00:07:23.324 --> 00:07:27.442
anyone with access to the source code can simply use it to retrieve the secrets,

129
00:07:27.442 --> 00:07:27.952
right?

130
00:07:27.952 --> 00:07:34.046
Which is why you should also configure it as a variable and perhaps pass it in

131
00:07:34.046 --> 00:07:37.224
as an environment variable when starting your application.

132
00:07:37.224 --> 00:07:40.087
Now here I've added it as a JVM startup variable.

133
00:07:40.087 --> 00:07:49.000
Now Vault provides many other ways to access your token, so check out their site if you're interested for more details.

