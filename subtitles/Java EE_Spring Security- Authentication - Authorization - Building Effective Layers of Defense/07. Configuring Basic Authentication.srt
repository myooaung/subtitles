1
00:00:02,562 --> 00:00:07,781
The default implementation actually supports both Basic and formLogin.

2
00:00:07,781 --> 00:00:11,241
Let's configure the application to just use Basic.

3
00:00:11,241 --> 00:00:11,862
Now to do this,

4
00:00:11,862 --> 00:00:14,885
we will need a configuration class that extends the

5
00:00:14,885 --> 00:00:20,213
WebSecurityConfigurationAdapter and add the Configuration annotation.

6
00:00:20,213 --> 00:00:24,745
Recall the SpringBootWebSecurityConfiguration class,

7
00:00:24,745 --> 00:00:28,815
which was imported by the SecurityAutoConfiguration class.

8
00:00:28,815 --> 00:00:31,570
It will now detect that there is a bean of type

9
00:00:31,570 --> 00:00:37,251
WebSecurityConfigurerAdapter and will not configure the default one as a bean.

10
00:00:37,251 --> 00:00:37,739
This is important.

11
00:00:37,739 --> 00:00:40,840
Otherwise, we would have two filter chains configured.

12
00:00:40,840 --> 00:00:45,422
The default one will have an order of -5 with an AnyMatcher.

13
00:00:45,422 --> 00:00:48,997
Hence requests would not reach the new filter chain unless

14
00:00:48,997 --> 00:00:52,450
we specifically set a lower order value.

15
00:00:52,450 --> 00:00:55,212
We are going to override the configure method that

16
00:00:55,212 --> 00:00:58,501
accepts the HttpSecurity as a parameter.

17
00:00:58,501 --> 00:01:02,522
The parent method has the form and basic.

18
00:01:02,522 --> 00:01:04,991
We will override this and just have basic.

19
00:01:04,991 --> 00:01:14,394
(Working) Let's start the application at a breakpoint and

20
00:01:14,394 --> 00:01:17,227
try to access the portfolio site again.

21
00:01:17,227 --> 00:01:18,367
As you can see,

22
00:01:18,367 --> 00:01:20,799
the username and password authentication filter is

23
00:01:20,799 --> 00:01:24,890
no longer present in the chain, just the basic one.

24
00:01:24,890 --> 00:01:31,117
Also, the basic entry point is now the default in the exceptions filter.

25
00:01:31,117 --> 00:01:35,928
If we allow the request to progress, we get the browser's default login pop-up.

26
00:01:35,928 --> 00:01:36,994
I'll cancel for now.

27
00:01:36,994 --> 00:01:40,596
You can see that when we try to access the portfolio site,

28
00:01:40,596 --> 00:01:45,821
Spring returned a 401 Not Authorized, as well as a header property,

29
00:01:45,821 --> 00:01:50,620
WWW-Authenticate, with a value of Basic and Realm.

30
00:01:50,620 --> 00:01:55,130
This informed the client browser that basic authentication was required,

31
00:01:55,130 --> 00:01:58,010
hence the browser displaying the login pop-up.

32
00:01:58,010 --> 00:01:59,444
If we log in this time,

33
00:01:59,444 --> 00:02:02,996
you can see that the browser sends a response with a header

34
00:02:02,996 --> 00:02:07,616
property Authorization: Basic and an encoded string.

35
00:02:07,616 --> 00:02:11,635
The basic authentication filter will be looking out for this header.

36
00:02:11,635 --> 00:02:16,454
The value here can be a bit misleading as it looks encoded or encrypted.

37
00:02:16,454 --> 00:02:21,281
But in reality, it's encoded in base 64 and it's easy to convert back.

38
00:02:21,281 --> 00:02:24,823
I just Googled a random site that converts from base 64 to base 10,

39
00:02:24,823 --> 00:02:29,622
and here you can see the format, the username: password,

40
00:02:29,622 --> 00:02:33,458
which is why it is recommended to transmit basic over HTTPS so

41
00:02:33,458 --> 00:02:37,193
that a hacker sniffing network traffic cannot capture your

42
00:02:37,193 --> 00:02:40,703
credentials or perform replay attacks.

43
00:02:40,703 --> 00:02:43,686
Now the upside of basic is that you don't need a login page.

44
00:02:43,686 --> 00:02:53,000
You don't need session IDs, you don't need cookies, and the user can also embed the credentials directly into the URL.

