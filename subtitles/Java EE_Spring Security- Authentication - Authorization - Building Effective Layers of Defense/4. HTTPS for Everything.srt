1
00:00:02,158 --> 00:00:06,142
HTTPS is a protocol over which communication between the

2
00:00:06,142 --> 00:00:09,376
browser and the web server is encrypted.

3
00:00:09,376 --> 00:00:13,453
It protects your users from eavesdropping by third parties on the

4
00:00:13,453 --> 00:00:16,860
communication between the user's browser and your server,

5
00:00:16,860 --> 00:00:19,272
which could reveal some sensitive data,

6
00:00:19,272 --> 00:00:23,912
or the communication could be tampered with by injecting undesirable content,

7
00:00:23,912 --> 00:00:27,129
exposing your users to Trojans, viruses,

8
00:00:27,129 --> 00:00:30,453
malicious scripts, or even unwanted ads in fake news,

9
00:00:30,453 --> 00:00:33,932
which could damage the reputation of your brand.

10
00:00:33,932 --> 00:00:39,878
As of July 2108, Google Chrome now labels HTTP sites as not secured.

11
00:00:39,878 --> 00:00:42,721
There now really isn't any reason not to completely

12
00:00:42,721 --> 00:00:45,873
serve your content over HTTPS.

13
00:00:45,873 --> 00:00:46,510
In this module,

14
00:00:46,510 --> 00:00:51,786
you will learn just how easy it is to set up HTTPS with Spring Security.

15
00:00:51,786 --> 00:00:54,733
And I will also show you how to obtain a TLS certificate

16
00:00:54,733 --> 00:00:57,659
signed by a certificate authority for free.

17
00:00:57,659 --> 00:01:01,391
You will also learn how to protect your users from man-in-the-

18
00:01:01,391 --> 00:01:04,982
middle attacks and how to configure HSTS,

19
00:01:04,982 --> 00:01:11,484
HTTPS String Transport Security to enforce the use of HTTPS in your application,

20
00:01:11,484 --> 00:01:14,134
as well as public key pinning.

21
00:01:14,134 --> 00:01:16,799
Now let's clear up some of the terminology here.

22
00:01:16,799 --> 00:01:21,043
TLS stands for transport layer security and is the

23
00:01:21,043 --> 00:01:23,900
official protocol used to encrypt HTTPS.

24
00:01:23,900 --> 00:01:26,291
SSL is secure socket layer.

25
00:01:26,291 --> 00:01:28,282
It's the predecessor of TLS.

26
00:01:28,282 --> 00:01:32,221
However, these names can sometimes be used interchangeably.

27
00:01:32,221 --> 00:01:36,173
For development purposes, we can create a self-signed certificate.

28
00:01:36,173 --> 00:01:40,879
But in production, only use a certificate from a certified authority.

29
00:01:40,879 --> 00:01:43,096
I'll show you how to get one for free in the next section.

30
00:01:43,096 --> 00:01:50,017
The easiest way is to use the Java's Keytool with the following command.

31
00:01:50,017 --> 00:01:54,224
The alias is a unique name/identifier for this certificate.

32
00:01:54,224 --> 00:01:56,755
Then you have the keystore type.

33
00:01:56,755 --> 00:02:01,622
In this case, it will be RSA the size of the keystore,

34
00:02:01,622 --> 00:02:06,723
in this case, is 256-bit, and the password for the keystore,

35
00:02:06,723 --> 00:02:11,362
and the validity of the certificate in days.

36
00:02:11,362 --> 00:02:13,434
Now with Spring Security and Spring Boot,

37
00:02:13,434 --> 00:02:16,194
all we need to do is add the following properties to your

38
00:02:16,194 --> 00:02:18,867
application properties file or YAML file,

39
00:02:18,867 --> 00:02:23,569
the server port 443, which is the default HTTPS port,

40
00:02:23,569 --> 00:02:26,917
the keystore password, the location of the keystore,

41
00:02:26,917 --> 00:02:31,324
the type of the keystore, and the alias of the key store.

42
00:02:31,324 --> 00:02:37,058
If we restart our application, you can see that we can now connect via HTTPS.

43
00:02:37,058 --> 00:02:39,352
Now because this is a self-signed certificate and not

44
00:02:39,352 --> 00:02:42,219
one issued by a certificate authority,

45
00:02:42,219 --> 00:02:45,356
the browser complains and warns the user that they cannot

46
00:02:45,356 --> 00:02:48,436
verify the server is who they say they are.

47
00:02:48,436 --> 00:02:51,991
For now, we will proceed and add the exception.

48
00:02:51,991 --> 00:02:55,046
Again, you wouldn't want your users to do this.

49
00:02:55,046 --> 00:02:59,749
Generally, users omit the protocol when typing the URL into the browser.

50
00:02:59,749 --> 00:03:02,656
Now currently browsers will default to HTTP.

51
00:03:02,656 --> 00:03:05,474
So if we do this for our portfolio site,

52
00:03:05,474 --> 00:03:09,170
we get the error page as the application is no longer

53
00:03:09,170 --> 00:03:12,289
listening on port 80 for HTTP requests.

54
00:03:12,289 --> 00:03:15,526
One way to do this is to send a redirect response to the user

55
00:03:15,526 --> 00:03:19,700
instructing them to redirect to the HTTPS endpoint.

56
00:03:19,700 --> 00:03:22,191
Now Spring Boot will only allow us to configure one

57
00:03:22,191 --> 00:03:23,980
connector via the properties.

58
00:03:23,980 --> 00:03:27,913
And since we already used the one for port 443 using HTTPS,

59
00:03:27,913 --> 00:03:31,831
we need another one for HTTP in port 80,

60
00:03:31,831 --> 00:03:34,658
which will do the redirect to the HTTPS one.

61
00:03:34,658 --> 00:03:39,424
To do this, we need to access the TomcatServletWebServerFactory,

62
00:03:39,424 --> 00:03:43,853
which is used by Spring Boot to configure the embedded Tomcat Server.

63
00:03:43,853 --> 00:03:49,037
We will override the postProcessContext method and add the

64
00:03:49,037 --> 00:03:52,774
securityConstraints of CONFIDENTIAL for all requests,

65
00:03:52,774 --> 00:03:56,072
meaning that we want HTTPS for everything.

66
00:03:56,072 --> 00:04:01,749
We add the connector that will listen on port 80 for HTTP requests

67
00:04:01,749 --> 00:04:07,139
and redirect them to HTTPS on port 443 where our other connector

68
00:04:07,139 --> 00:04:09,958
configured by Spring is listening to.

69
00:04:09,958 --> 00:04:12,056
We then expose this factory as a bean,

70
00:04:12,056 --> 00:04:16,874
so Spring Boot uses it to create the embedded Tomcat Server.

71
00:04:16,874 --> 00:04:20,125
Now I have deployed this site on my AWS EC2 server,

72
00:04:20,125 --> 00:04:32,000
so it is now accessible through the web via the public host link. If we now access this site via HTTP, we get redirected to HTTPS.

