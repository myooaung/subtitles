WEBVTT
1
00:00:02.256 --> 00:00:06.549
Currently our demo is using an in-memory identity store with the

2
00:00:06.549 --> 00:00:11.036
credentials hard- coded in the configuration class.

3
00:00:11.036 --> 00:00:14.669
Let's persist the credentials in an identity store and create the

4
00:00:14.669 --> 00:00:18.561
ability for users to register with the application.

5
00:00:18.561 --> 00:00:20.081
Now for the purpose of the demo,

6
00:00:20.081 --> 00:00:23.923
we can use an embedded H2 database as this makes running

7
00:00:23.923 --> 00:00:27.496
the demo a lot simpler as you don't have to configure a

8
00:00:27.496 --> 00:00:29.387
separate database and manage it.

9
00:00:29.387 --> 00:00:32.390
Now Spring Boot makes this very simple.

10
00:00:32.390 --> 00:00:35.591
Just by adding the H2 dependency to our POM file,

11
00:00:35.591 --> 00:00:40.222
Spring automatically configures and starts the database on startup,

12
00:00:40.222 --> 00:00:42.675
which is great for development.

13
00:00:42.675 --> 00:00:45.076
And once you complete your development,

14
00:00:45.076 --> 00:00:49.029
you can simply remove those dependencies and update the configuration file

15
00:00:49.029 --> 00:00:53.861
with the connection details of the external database.

16
00:00:53.861 --> 00:00:55.218
Now for the embedded database,

17
00:00:55.218 --> 00:01:00.277
you can add a schema and data.sql file to your resources folder.

18
00:01:00.277 --> 00:01:05.940
Spring Boot will detect these files and execute the schema and SQL

19
00:01:05.940 --> 00:01:08.706
within them each time the application starts up,

20
00:01:08.706 --> 00:01:13.034
setting up the database and populating it with test data.

21
00:01:13.034 --> 00:01:16.937
Now we also need to update the application.yaml file with the following

22
00:01:16.937 --> 00:01:20.592
details to configure the data source for the H2 database.

23
00:01:20.592 --> 00:01:25.077
Now in order to get Spring Security to source the

24
00:01:25.077 --> 00:01:26.828
credentials from the users table,

25
00:01:26.828 --> 00:01:31.101
you just need to override the configure method that exposes

26
00:01:31.101 --> 00:01:34.294
the AuthenticationManagerBuilder object.

27
00:01:34.294 --> 00:01:38.262
You can then use the builder to instruct Spring Security that you

28
00:01:38.262 --> 00:01:42.672
require JDBC authentication and pass in the datasource,

29
00:01:42.672 --> 00:01:45.869
which you can autowire into the class.

30
00:01:45.869 --> 00:01:48.148
Now Spring Security will do the rest.

31
00:01:48.148 --> 00:01:51.095
And by default, it expects two database tables,

32
00:01:51.095 --> 00:01:56.205
the users table with the fields username and password and the

33
00:01:56.205 --> 00:01:59.968
authorities table with the fields username and authorities.

34
00:01:59.968 --> 00:02:02.633
Now if your table names and field names are different,

35
00:02:02.633 --> 00:02:09.001
you can specify the SQL required to return the username and password using the

36
00:02:09.001 --> 00:02:14.349
usersByUsernameQuery and authoritiesByUsernameQuery methods.

37
00:02:14.349 --> 00:02:17.832
And alternatively, you can programmatically configure all this,

38
00:02:17.832 --> 00:02:22.829
instructing Spring to create the default tables it requires with the

39
00:02:22.829 --> 00:02:26.325
withDefaultSchema method and populating the users,

40
00:02:26.325 --> 00:02:29.927
which is very useful for development and testing.

41
00:02:29.927 --> 00:02:30.686
That's it.

42
00:02:30.686 --> 00:02:34.501
Spring Security will now retrieve the credentials for

43
00:02:34.501 --> 00:02:37.147
authentication from these database tables.

44
00:02:37.147 --> 00:02:42.552
Now Spring Security supports a multitude of identity stores from LDAP,

45
00:02:42.552 --> 00:02:45.379
JDBC, you name it.

46
00:02:45.379 --> 00:02:50.664
But if your one is not supported, you can create a custom UserDetailsService.

47
00:02:50.664 --> 00:02:51.255
With Spring Boot,

48
00:02:51.255 --> 00:02:53.999
all you need to do is create a class that implements the

49
00:02:53.999 --> 00:02:59.392
UserDetailsService interface and annotate it with the Service tag.

50
00:02:59.392 --> 00:03:02.138
You then override the loadUserByUsername method,

51
00:03:02.138 --> 00:03:05.091
and here you can add the code to retrieve your

52
00:03:05.091 --> 00:03:07.150
credentials from your identity store.

53
00:03:07.150 --> 00:03:08.912
Now in this example,

54
00:03:08.912 --> 00:03:12.410
we are connecting to MongoDB through a repository to

55
00:03:12.410 --> 00:03:14.889
retrieve the users credentials.

56
00:03:14.889 --> 00:03:19.913
If the username is not found, you need to throw a UsernameNotFoundException.

57
00:03:19.913 --> 00:03:23.560
You can also use the User builder class to create the UserDetails

58
00:03:23.560 --> 00:03:26.619
object required by the authentication manager.

59
00:03:26.619 --> 00:03:30.947
We populate the Username and the Password with the roles.

60
00:03:30.947 --> 00:03:32.167
And that's it.

61
00:03:32.167 --> 00:03:34.456
Spring Boot will then detect and plug this

62
00:03:34.456 --> 00:03:37.380
UserDetailsService into the authentication manager,

63
00:03:37.380 --> 00:03:45.000
which will then use the UserDetailsService to retrieve the user credentials from MongoDB.

