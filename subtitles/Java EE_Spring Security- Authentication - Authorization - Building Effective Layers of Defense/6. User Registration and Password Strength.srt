1
00:00:02,690 --> 00:00:07,314
We now need a user registration page that accepts the email,

2
00:00:07,314 --> 00:00:12,230
username, password, and other details and persists them in our identity store.

3
00:00:12,230 --> 00:00:16,031
Here we have a regiser.html form.

4
00:00:16,031 --> 00:00:17,462
I'm using Thymeleaf,

5
00:00:17,462 --> 00:00:20,923
which submits to the RegistrationController class

6
00:00:20,923 --> 00:00:24,065
that handles the form submission.

7
00:00:24,065 --> 00:00:27,492
It then calls the user repository to persist the user.

8
00:00:27,492 --> 00:00:32,757
Now this all works fine, but there are some validations missing here.

9
00:00:32,757 --> 00:00:35,734
We need to ensure that all the mandatory fields are populated,

10
00:00:35,734 --> 00:00:39,289
that the password and the confirm password match,

11
00:00:39,289 --> 00:00:43,560
and that the username and email are unique and don't

12
00:00:43,560 --> 00:00:46,169
already exist in the identity store.

13
00:00:46,169 --> 00:00:46,510
Also,

14
00:00:46,510 --> 00:00:50,747
we need to apply some password strength rules so the user can't just

15
00:00:50,747 --> 00:00:53,957
simply submit a 1-character password for example.

16
00:00:53,957 --> 00:00:55,737
Now to do all this validation,

17
00:00:55,737 --> 00:01:01,776
we can use beans declarative validation with JSR303.

18
00:01:01,776 --> 00:01:03,475
Hence, in the UserDto,

19
00:01:03,475 --> 00:01:07,464
we can annotate all the fields that are mandatory with

20
00:01:07,464 --> 00:01:10,568
the NotEmpty or NotNull annotation.

21
00:01:10,568 --> 00:01:11,102
as well,

22
00:01:11,102 --> 00:01:14,155
we can use the Email annotation on the email field to

23
00:01:14,155 --> 00:01:16,775
ensure that that is in the correct format.

24
00:01:16,775 --> 00:01:18,401
Then in the RegistrationController,

25
00:01:18,401 --> 00:01:23,806
we add the Valid annotation around the UserDto object,

26
00:01:23,806 --> 00:01:26,849
and Spring will do the rest for us.

27
00:01:26,849 --> 00:01:29,539
Okay, let's give this a test.

28
00:01:29,539 --> 00:01:29,801
Hmm.

29
00:01:29,801 --> 00:01:32,335
Now it seems we can't access the registration page.

30
00:01:32,335 --> 00:01:36,045
The reason for this is that in our configuration class,

31
00:01:36,045 --> 00:01:38,934
any requests require authentication.

32
00:01:38,934 --> 00:01:41,495
Hence, Spring will redirect back to the login page.

33
00:01:41,495 --> 00:01:45,100
We need to allow the registration page to be accessed

34
00:01:45,100 --> 00:01:47,539
without requiring authentication.

35
00:01:47,539 --> 00:01:47,786
Hence,

36
00:01:47,786 --> 00:01:50,743
you need to let Spring know that the registration page does

37
00:01:50,743 --> 00:01:53,971
not require a user to be authenticated.

38
00:01:53,971 --> 00:01:54,856
To do this,

39
00:01:54,856 --> 00:01:59,259
we can use the antPath request matcher to specify that requests to

40
00:01:59,259 --> 00:02:05,004
/register or login are permitted to be accessed by everyone.

41
00:02:05,004 --> 00:02:09,845
However, the remainder of the application will still require authentication.

42
00:02:09,845 --> 00:02:12,383
So let's restart and test this.

43
00:02:12,383 --> 00:02:12,809
Hmm.

44
00:02:12,809 --> 00:02:14,942
It doesn't look quite right.

45
00:02:14,942 --> 00:02:18,024
It looks like the CSS is not loading here.

46
00:02:18,024 --> 00:02:18,269
Again,

47
00:02:18,269 --> 00:02:21,202
it looks like Spring is blocking everything from

48
00:02:21,202 --> 00:02:24,131
non-authenticated users by default.

49
00:02:24,131 --> 00:02:27,433
That seems to also include the static content to the resources

50
00:02:27,433 --> 00:02:31,935
folder like CSS and scripts that we need to configure so that CSS

51
00:02:31,935 --> 00:02:35,544
and JavaScript is made available to the registration page when the

52
00:02:35,544 --> 00:02:38,274
user is not yet authenticated.

53
00:02:38,274 --> 00:02:39,069
To do this,

54
00:02:39,069 --> 00:02:43,430
we can override the configure method that accepts the WebSecurity

55
00:02:43,430 --> 00:02:48,600
object and use the ignoring method for css and webjars.

56
00:02:48,600 --> 00:02:52,140
Now the reason for webjars is that I am using the webjars library

57
00:02:52,140 --> 00:02:56,726
for my Bootstrap in jQuery in my HTML pages.

58
00:02:56,726 --> 00:02:59,558
Spring Security will now ignore these paths.

59
00:02:59,558 --> 00:03:00,204
Now typically,

60
00:03:00,204 --> 00:03:07,351
you only want to use this for static content and not for any dynamic content.

61
00:03:07,351 --> 00:03:09,815
Now the registration page looks correct,

62
00:03:09,815 --> 00:03:12,602
and our validation messages are being displayed.

63
00:03:12,602 --> 00:03:16,048
Now to ensure that the email and the username are unique,

64
00:03:16,048 --> 00:03:18,956
we can create a custom validator.

65
00:03:18,956 --> 00:03:21,759
To do this, we create a class, UniqueUsername,

66
00:03:21,759 --> 00:03:27,204
and set the return type as the interface annotation to indicate

67
00:03:27,204 --> 00:03:30,669
to Java that this is an annotation class.

68
00:03:30,669 --> 00:03:33,447
Add a Target annotation to indicate that this

69
00:03:33,447 --> 00:03:36,514
annotation is for fields and methods only.

70
00:03:36,514 --> 00:03:37,903
In the constraints,

71
00:03:37,903 --> 00:03:43,432
we specify the validator that will do the validation to validate

72
00:03:43,432 --> 00:03:47,309
elements annotated with the UniqueUsername annotation.

73
00:03:47,309 --> 00:03:51,427
In this case, it will be the class UniqueUsernameValidator,

74
00:03:51,427 --> 00:03:54,949
which implements the constraint validator interface.

75
00:03:54,949 --> 00:04:00,236
You then override the isValid method where you can place the validation logic.

76
00:04:00,236 --> 00:04:04,007
Here we check the repository to see if we can find the existing user

77
00:04:04,007 --> 00:04:08,379
with the username and return either true or false.

78
00:04:08,379 --> 00:04:09,930
Now in our UserDto object,

79
00:04:09,930 --> 00:04:14,825
we can now annotate the username field with this annotation.

80
00:04:14,825 --> 00:04:15,317
That's it.

81
00:04:15,317 --> 00:04:18,595
Spring will now perform the checks when the registration form is

82
00:04:18,595 --> 00:04:21,991
submitted and ensure that the username is unique.

83
00:04:21,991 --> 00:04:26,168
Now we can do the same sort of thing for the email as well.

84
00:04:26,168 --> 00:04:33,046
Next, we need to validate that the password and the confirmed password matches.

85
00:04:33,046 --> 00:04:36,797
Now we can create another validator annotation for this and

86
00:04:36,797 --> 00:04:40,688
annotate the interface in a similar way as the others.

87
00:04:40,688 --> 00:04:43,333
However, in the target, we will have TYPE,

88
00:04:43,333 --> 00:04:45,943
which allows us to place it over the UserDto class.

89
00:04:45,943 --> 00:04:51,097
Now in the implementation of the PasswordConfirmedValidator class,

90
00:04:51,097 --> 00:04:55,706
we specify the property type is the UserDto object.

91
00:04:55,706 --> 00:04:56,063
Hence,

92
00:04:56,063 --> 00:04:59,794
our isValid method will then have access to the UserDto

93
00:04:59,794 --> 00:05:02,862
instance where we can retrieve both the password and

94
00:05:02,862 --> 00:05:09,003
confirmedPassword and then perform the matching.

95
00:05:09,003 --> 00:05:11,192
Okay, now let's give this a test.

96
00:05:11,192 --> 00:05:15,692
You can see the form displaying the appropriate validation errors.

97
00:05:15,692 --> 00:05:19,740
The last important thing that is missing here is password strength.

98
00:05:19,740 --> 00:05:22,873
If we look at the OWASP's website for guidance,

99
00:05:22,873 --> 00:05:26,007
the following recommendations are provided.

100
00:05:26,007 --> 00:05:31,659
The password must, at least, have three of the following four complexity rules,

101
00:05:31,659 --> 00:05:36,078
at least one uppercase character, at least one lowercase character,

102
00:05:36,078 --> 00:05:39,626
at least one digit, and at least one special character.

103
00:05:39,626 --> 00:05:43,402
Also, the password should be at least 10 characters long and,

104
00:05:43,402 --> 00:05:45,657
at most, 128 characters.

105
00:05:45,657 --> 00:05:50,444
Also, there should not be two identical characters consecutive in a row,

106
00:05:50,444 --> 00:05:51,592
example 111.

107
00:05:51,592 --> 00:05:53,092
So let's implement this.

108
00:05:53,092 --> 00:05:56,689
Now rather than reinventing the wheel here and creating a

109
00:05:56,689 --> 00:06:01,615
large number of complex validators, we can use the Passay Java library,

110
00:06:01,615 --> 00:06:04,814
which provides an API to validate password strength,

111
00:06:04,814 --> 00:06:08,262
as well as even generating passwords in accordance

112
00:06:08,262 --> 00:06:11,117
with the strength rules provided.

113
00:06:11,117 --> 00:06:12,889
Now in order to use this library,

114
00:06:12,889 --> 00:06:15,396
we just add the Passay dependency to our POM file.

115
00:06:15,396 --> 00:06:18,197
You can then create a single validator that

116
00:06:18,197 --> 00:06:19,936
contains your password strength rules.

117
00:06:19,936 --> 00:06:21,037
And in this case,

118
00:06:21,037 --> 00:06:27,453
we have called it the PasswordPolicy annotation at the method and field level.

119
00:06:27,453 --> 00:06:28,531
Now in the validator class,

120
00:06:28,531 --> 00:06:33,217
we can use the Passay library to create a list of rules.

121
00:06:33,217 --> 00:06:35,235
The first one is the length rule,

122
00:06:35,235 --> 00:06:38,130
which checks that the password is a minimum of 10

123
00:06:38,130 --> 00:06:41,138
characters and a maximum of 128 characters.

124
00:06:41,138 --> 00:06:45,112
Then to meet the requirements of a minimum of three of the following rules,

125
00:06:45,112 --> 00:06:49,249
we can use the CharacterCharacteristicsRule set to a

126
00:06:49,249 --> 00:06:52,922
minimum of three of the following rules must be met and add

127
00:06:52,922 --> 00:06:58,603
the rules as recommended by OWASP, at least one uppercase character,

128
00:06:58,603 --> 00:07:02,973
one lowercase, one digit, and one special character.

129
00:07:02,973 --> 00:07:08,977
Then finally, we add the maximum of two consecutive identifier characters rules.

130
00:07:08,977 --> 00:07:13,105
We then create an instance of the validator using the rules and

131
00:07:13,105 --> 00:07:16,784
then use the instance to validate their password.

132
00:07:16,784 --> 00:07:19,222
You can then return the output of the isValid method

133
00:07:19,222 --> 00:07:21,875
of the returned result set object.

134
00:07:21,875 --> 00:07:22,596
That's it.

135
00:07:22,596 --> 00:07:27,939
We have now implemented the password strength recommendations by OWASP.

136
00:07:27,939 --> 00:07:28,917
Easy peasy, right?

137
00:07:28,917 --> 00:07:31,627
You'll probably want to provide more meaningful

138
00:07:31,627 --> 00:07:34,744
messages though than I have done here.

139
00:07:34,744 --> 00:07:35,116
Okay,

140
00:07:35,116 --> 00:07:38,696
now that the password is secured and compliant with

141
00:07:38,696 --> 00:07:42,923
OWASP's strength recommendations, there is still one thing bugging me here,

142
00:07:42,923 --> 00:07:47,094
and that is the keystore password for the HTTPS in the

143
00:07:47,094 --> 00:07:49,854
application.yml file being in plain text,

144
00:07:49,854 --> 00:07:57,000
along with the database credentials. Now let's look at options to fix this in the next section.

