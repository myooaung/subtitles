1
00:00:01,567 --> 00:00:02,458
A CAPTCHA,

2
00:00:02,458 --> 00:00:07,185
which stands for completely automated public turing test to tell

3
00:00:07,185 --> 00:00:11,957
computers and humans apart is a computer program or system

4
00:00:11,957 --> 00:00:16,126
intended to distinguish human from machine input typically as a

5
00:00:16,126 --> 00:00:18,474
way of thwarting bot spam.

6
00:00:18,474 --> 00:00:23,427
Now you have probably them seen in many forms on the website you access.

7
00:00:23,427 --> 00:00:27,749
They sometimes can be a little bit annoying, but they do serve a purpose.

8
00:00:27,749 --> 00:00:30,673
Take, for example, our registration page.

9
00:00:30,673 --> 00:00:34,039
It wouldn't take much for someone to create a bot to

10
00:00:34,039 --> 00:00:36,469
spam post user registration requests.

11
00:00:36,469 --> 00:00:41,320
The operation of creating so many users would consume application resources,

12
00:00:41,320 --> 00:00:46,156
particularly in the data store or consume all the storage in the data store,

13
00:00:46,156 --> 00:00:48,563
degragading the performance of the application,

14
00:00:48,563 --> 00:00:49,080
effectively,

15
00:00:49,080 --> 00:00:53,806
a denial of service attack on your users or significantly

16
00:00:53,806 --> 00:00:56,846
increase the cost of running your infrastructure,

17
00:00:56,846 --> 00:01:00,627
particularly if you're using a cloud platform.

18
00:01:00,627 --> 00:01:03,742
Now CAPTCHAs won't completely protect you against this,

19
00:01:03,742 --> 00:01:07,661
but it will make life harder for the bots and will add

20
00:01:07,661 --> 00:01:10,832
another layer of defense on your site.

21
00:01:10,832 --> 00:01:14,411
Now rather than reinventing the wheel and creating our own CAPTCHA,

22
00:01:14,411 --> 00:01:18,046
we can use Google's free reCAPTCHA API.

23
00:01:18,046 --> 00:01:22,007
Now they have some of the very best developers looking at this problem and

24
00:01:22,007 --> 00:01:26,413
are constantly evolving the API using machine learning.

25
00:01:26,413 --> 00:01:32,237
Their slogan is tough on bots, easy on humans.

26
00:01:32,237 --> 00:01:33,698
To set up Google reCAPTCHA,

27
00:01:33,698 --> 00:01:38,980
you first need to create an API key from the admin panel,

28
00:01:38,980 --> 00:01:40,287
select reCAPTCHA.

29
00:01:40,287 --> 00:01:44,720
Now for demo purposes, the domain to add is localhost.

30
00:01:44,720 --> 00:01:48,771
This is because the browser and the code is running on the same PC.

31
00:01:48,771 --> 00:01:49,300
But in production,

32
00:01:49,300 --> 00:01:53,679
you would need to add a domain of your application or it won't work.

33
00:01:53,679 --> 00:01:54,502
Accept the terms.

34
00:01:54,502 --> 00:01:58,198
You will then get the site key and the secret key.

35
00:01:58,198 --> 00:02:01,616
Just like in two-factor authentication with Google Authenticator,

36
00:02:01,616 --> 00:02:04,647
keep your secret key secure.

37
00:02:04,647 --> 00:02:06,984
Now Vault is a great place to put it.

38
00:02:06,984 --> 00:02:08,425
If the key is breached,

39
00:02:08,425 --> 00:02:12,777
then hackers can get past your CAPTCHA security protection.

40
00:02:12,777 --> 00:02:16,264
Google makes adding the CAPTCHA widget very simple.

41
00:02:16,264 --> 00:02:17,965
In the registration HTML page,

42
00:02:17,965 --> 00:02:21,818
we add the following API script and then add the

43
00:02:21,818 --> 00:02:24,658
following div to our login form.

44
00:02:24,658 --> 00:02:27,607
You need to add your site key here.

45
00:02:27,607 --> 00:02:32,911
Now you need a service class to verify the CAPTCHA with Google.

46
00:02:32,911 --> 00:02:37,116
The service will need to make a REST call to Google to verify the code,

47
00:02:37,116 --> 00:02:39,064
so we need a RestTemplate.

48
00:02:39,064 --> 00:02:40,571
In your Configuration class,

49
00:02:40,571 --> 00:02:45,225
expose the RestTemplate as a bean using the RestTemplateBuilder.

50
00:02:45,225 --> 00:02:48,760
Now in the Google reCAPTCHA service class,

51
00:02:48,760 --> 00:02:52,216
you can autowire the RestTemplate for the constructor.

52
00:02:52,216 --> 00:02:56,894
Here I have the secret key hard-coded in the class for demo purposes.

53
00:02:56,894 --> 00:02:59,954
This is not good practice for a production site.

54
00:02:59,954 --> 00:03:01,632
Keep the secret secure.

55
00:03:01,632 --> 00:03:03,693
Pass it in as a property.

56
00:03:03,693 --> 00:03:08,081
Vault is a great place to put it, and we covered that in module 3.

57
00:03:08,081 --> 00:03:12,922
Next we have the Google VERIFY_URL where we pass in the secret,

58
00:03:12,922 --> 00:03:17,240
remoteip and recap response in the query string.

59
00:03:17,240 --> 00:03:22,776
In the verify method, we make a REST call to Google to verify the recap.

60
00:03:22,776 --> 00:03:29,613
Check for success and populate the RecaptchaDto and then return it.

61
00:03:29,613 --> 00:03:34,631
Now we could put the logic to verify the recap in the RegistrationController.

62
00:03:34,631 --> 00:03:40,059
But a better, cleaner, and reusable approach is to create a validator.

63
00:03:40,059 --> 00:03:46,359
You can create a recap validator annotation, Target is TYPE.

64
00:03:46,359 --> 00:03:52,188
Then for the implementation, you need access to the httpRequest object.

65
00:03:52,188 --> 00:03:56,122
So using the SpringBeanAutowiringSupport class,

66
00:03:56,122 --> 00:04:02,254
we can autowire the httpRequest from the thread local each time.

67
00:04:02,254 --> 00:04:09,768
In the isValid method, we check if the g- reaptcha-response parameter is present.

68
00:04:09,768 --> 00:04:10,567
If not,

69
00:04:10,567 --> 00:04:15,175
we fail the validator as there's no point in making an expensive REST call

70
00:04:15,175 --> 00:04:18,817
to Google if the CAPTCHA was not selected by the user.

71
00:04:18,817 --> 00:04:24,182
If it was, then we call our service class to verify the CAPTCHA with Google,

72
00:04:24,182 --> 00:04:27,319
returning if it was successful.

73
00:04:27,319 --> 00:04:33,393
Okay, now all we need to do is add the annotation to the UserDto class,

74
00:04:33,393 --> 00:04:36,936
and the validation will be done for us automatically before

75
00:04:36,936 --> 00:04:40,331
the RegistrationController is called.

76
00:04:40,331 --> 00:04:43,818
Okay, let's test this.

77
00:04:43,818 --> 00:04:48,652
The CAPTCHA now prevents registration if the user did not select it.

78
00:04:48,652 --> 00:04:52,900
If we select it, the user account is created.

79
00:04:52,900 --> 00:04:53,696
Easy peasy.

80
00:04:53,696 --> 00:05:00,217
And we can now reuse this annotation in other pages in our application.

81
00:05:00,217 --> 00:05:00,858
One improvement.

82
00:05:00,858 --> 00:05:05,201
You want to layer your validation for registration by grouping

83
00:05:05,201 --> 00:05:09,245
the validations and executing them in stages.

84
00:05:09,245 --> 00:05:09,684
First,

85
00:05:09,684 --> 00:05:13,954
check the mandatory fields and confirm the passwords and pins

86
00:05:13,954 --> 00:05:17,959
match as this uses the least amount of resources.

87
00:05:17,959 --> 00:05:22,747
Then if that passes, check the reCAPTCHA as that requires a REST call,

88
00:05:22,747 --> 00:05:25,667
which is a little bit more expensive.

89
00:05:25,667 --> 00:05:26,027
Next,

90
00:05:26,027 --> 00:05:31,851
validate the uniqueness of the password as that costs you a data store lookup.

91
00:05:31,851 --> 00:05:39,000
And finally, if everything passes, create the new user and request email verification.

