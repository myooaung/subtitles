1
00:00:01,992 --> 00:00:03,484
To enable method-level authorization,

2
00:00:03,484 --> 00:00:09,541
you need to add the @EnableGlobalMethodSecurity annotation.

3
00:00:09,541 --> 00:00:14,442
It has three properties you can set depending on the type your require,

4
00:00:14,442 --> 00:00:20,250
either secured, jsr250, and prePostEnabled.

5
00:00:20,250 --> 00:00:23,242
Now you can use the following annotations on any bean

6
00:00:23,242 --> 00:00:25,419
object in your application context.

7
00:00:25,419 --> 00:00:30,139
Pre and post are the most powerful and most commonly used as they

8
00:00:30,139 --> 00:00:33,681
allow you to take advantage of expressions.

9
00:00:33,681 --> 00:00:36,956
It consists of a PreAuthorize annotation,

10
00:00:36,956 --> 00:00:41,894
which allows you to check the user's role and authentication prior to

11
00:00:41,894 --> 00:00:47,671
executing a method and post authorization that executes after a

12
00:00:47,671 --> 00:00:52,290
method call and gives you the ability to interrogate the return

13
00:00:52,290 --> 00:00:55,443
object prior to returning the method.

14
00:00:55,443 --> 00:01:00,713
The Secured annotations are the original annotations used in Spring Security,

15
00:01:00,713 --> 00:01:04,398
but are more limited than the pre and postAuthorize.

16
00:01:04,398 --> 00:01:07,958
You can use them to verify if a user has one or more roles,

17
00:01:07,958 --> 00:01:11,457
but you cannot perform more complex operations.

18
00:01:11,457 --> 00:01:15,818
Spring also supports jsr250 standard annotations.

19
00:01:15,818 --> 00:01:19,680
However, they are not as powerful as Spring's annotations.

20
00:01:19,680 --> 00:01:24,502
You can basically just match roles, no expression support.

21
00:01:24,502 --> 00:01:27,293
Now once method-level security is enabled,

22
00:01:27,293 --> 00:01:29,784
you can use the PreAuthorize annotation.

23
00:01:29,784 --> 00:01:34,512
Here is the service that returns the portfolio for a user.

24
00:01:34,512 --> 00:01:39,066
Now it is used by two controllers, the MVC and the RestController,

25
00:01:39,066 --> 00:01:42,343
which use different URLs.

26
00:01:42,343 --> 00:01:46,519
We can use the PreAuthorize to enforce the principal must be

27
00:01:46,519 --> 00:01:51,738
authenticated and have the admin role, or they must have the user role,

28
00:01:51,738 --> 00:01:54,953
and the username parameter passed into the method must

29
00:01:54,953 --> 00:01:57,549
match the one in the Authentication object,

30
00:01:57,549 --> 00:02:03,309
basically the same check we performed in the configuration against this URL.

31
00:02:03,309 --> 00:02:03,782
Again,

32
00:02:03,782 --> 00:02:10,360
this is very powerful because two separate URLs were accessing this same method.

33
00:02:10,360 --> 00:02:14,352
So this provides an additional layer of security in case a developer

34
00:02:14,352 --> 00:02:18,691
were to change one of those configurations or simply add a new

35
00:02:18,691 --> 00:02:23,355
controller with a different URL accessing this method that does not

36
00:02:23,355 --> 00:02:26,490
add the appropriate authorization rules.

37
00:02:26,490 --> 00:02:28,918
This will protect against that.

38
00:02:28,918 --> 00:02:32,918
You can also reference other beans in this expression,

39
00:02:32,918 --> 00:02:40,866
like the isPortfolioOwnerOrAdmin, calling the check method on the username field.

40
00:02:40,866 --> 00:02:43,240
Now we can also change it to the postAuthorize,

41
00:02:43,240 --> 00:02:47,743
which will perform the validation after the method is called.

42
00:02:47,743 --> 00:02:50,734
Now in this case, that would not be very efficient.

43
00:02:50,734 --> 00:02:54,862
It is always best to perform validation prior to a method call.

44
00:02:54,862 --> 00:02:55,698
And in my experience,

45
00:02:55,698 --> 00:03:00,288
the PreAuthorization annotation is used a lot more frequently unless

46
00:03:00,288 --> 00:03:04,618
we want to authenticate based on the returnObject.

47
00:03:04,618 --> 00:03:05,430
Now in this case,

48
00:03:05,430 --> 00:03:10,179
we can check if the returnObject username property matches the principal's,

49
00:03:10,179 --> 00:03:13,758
adding that additional layer of protection.

50
00:03:13,758 --> 00:03:18,492
Now the PreFilter evaluates before a method is invoked.

51
00:03:18,492 --> 00:03:21,487
It accepts two properties, the value,

52
00:03:21,487 --> 00:03:24,969
which is the expression that will be evaluated for

53
00:03:24,969 --> 00:03:27,366
each element in the collection.

54
00:03:27,366 --> 00:03:31,039
If the expression returns false for any of the elements,

55
00:03:31,039 --> 00:03:34,053
it will be removed from the collection.

56
00:03:34,053 --> 00:03:36,381
And the option filterTarget element,

57
00:03:36,381 --> 00:03:39,684
it must be of type collection and have a remove method.

58
00:03:39,684 --> 00:03:43,085
If the method has more than one collection parameter,

59
00:03:43,085 --> 00:03:48,568
then we can use the filter target to identify the one we want to filter.

60
00:03:48,568 --> 00:03:51,395
Otherwise, we can just simply omit this.

61
00:03:51,395 --> 00:03:55,959
The reserved name filterObject can be used within the expression

62
00:03:55,959 --> 00:04:00,316
to refer to the current object being evaluated.

63
00:04:00,316 --> 00:04:06,186
Here we have a method, which allows you to save transactions to a portfolio.

64
00:04:06,186 --> 00:04:09,928
Let's restrict it to the principal with the role admin

65
00:04:09,928 --> 00:04:13,398
unless the user owns that portfolio.

66
00:04:13,398 --> 00:04:17,613
You can use the reserved filterObject to reference the

67
00:04:17,613 --> 00:04:20,450
transactions object username property.

68
00:04:20,450 --> 00:04:22,302
Then we compare against the authentication.username

69
00:04:22,302 --> 00:04:25,767
property for the current logged in user.

70
00:04:25,767 --> 00:04:30,382
This will evaluate this expression against every transaction in the list and

71
00:04:30,382 --> 00:04:34,088
remove the ones where the expression evaluates to false.

72
00:04:34,088 --> 00:04:37,042
Hence, unless the principal was an admin,

73
00:04:37,042 --> 00:04:42,718
the user cannot inject transactions with someone else's username.

74
00:04:42,718 --> 00:04:45,555
Now here we have a method that returns support queries.

75
00:04:45,555 --> 00:04:50,999
We can use the filter method to filter out any support queries that do

76
00:04:50,999 --> 00:04:54,830
not belong to the authenticated user and are active.

77
00:04:54,830 --> 00:04:57,118
Now if you're using the same expression frequently or

78
00:04:57,118 --> 00:04:59,877
they start to get very long and complex,

79
00:04:59,877 --> 00:05:02,606
then you can create an annotation.

80
00:05:02,606 --> 00:05:07,476
The target will be method, and add your filter annotation to it.

81
00:05:07,476 --> 00:05:11,237
Then you can simply annotate your methods with it.

82
00:05:11,237 --> 00:05:15,661
Now method-level annotations are very powerful and give you access to the

83
00:05:15,661 --> 00:05:19,696
parameters passed into the method and returned from the method,

84
00:05:19,696 --> 00:05:24,778
but not to any of the domain objects used within your methods.

85
00:05:24,778 --> 00:05:31,000
Now next we'll dive a little deeper and look at authorization at the domain level.

