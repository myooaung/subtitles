1
00:00:02,250 --> 00:00:05,236
It's time to test the site's security.

2
00:00:05,236 --> 00:00:09,019
So put on your hacker hoodies, and let's go down to the basement.

3
00:00:09,019 --> 00:00:13,301
The hacker is browsing their portfolio and comes across the following

4
00:00:13,301 --> 00:00:18,462
page with a search text field where you can enter in the crypto symbol

5
00:00:18,462 --> 00:00:20,891
you want to retrieve transactions for.

6
00:00:20,891 --> 00:00:23,791
Now these type of searches should always raise some alarm bells,

7
00:00:23,791 --> 00:00:26,745
and it's worth testing for injection.

8
00:00:26,745 --> 00:00:31,147
By simply submitting a single quote, ouch.

9
00:00:31,147 --> 00:00:33,461
Real back exception handling.

10
00:00:33,461 --> 00:00:37,110
The hacker now knows that there is a database back end and a

11
00:00:37,110 --> 00:00:40,647
definite opportunity for a SQL injection attack.

12
00:00:40,647 --> 00:00:43,740
Now through trial and error and different combinations of input

13
00:00:43,740 --> 00:00:48,454
or perhaps by viewing the source and getting some hints that

14
00:00:48,454 --> 00:00:51,271
this might be a Spring back end,

15
00:00:51,271 --> 00:00:56,206
the hacker tries to use the default table with the following query.

16
00:00:56,206 --> 00:01:02,220
Now this query closes the single quotes and adds a union with three rows of the

17
00:01:02,220 --> 00:01:04,894
typical field names you might use for username and password,

18
00:01:04,894 --> 00:01:07,752
as well as the users table.

19
00:01:07,752 --> 00:01:10,344
The hacker has now all the credentials from the site.

20
00:01:10,344 --> 00:01:13,023
Now there's a number of issues here.

21
00:01:13,023 --> 00:01:16,681
First, the site has poor exception handling.

22
00:01:16,681 --> 00:01:19,808
The exception should definitely not have been presented to the user,

23
00:01:19,808 --> 00:01:23,457
but perhaps may be a default exception page or simply

24
00:01:23,457 --> 00:01:26,235
just returning an empty result set.

25
00:01:26,235 --> 00:01:30,762
Now, of course, the second issue here is the SQL injection vulnerability.

26
00:01:30,762 --> 00:01:33,332
The developer should definitely have used a prepared

27
00:01:33,332 --> 00:01:35,940
statement or used the Spring CrudRepositories.

28
00:01:35,940 --> 00:01:38,939
Again, this is an obvious example.

29
00:01:38,939 --> 00:01:41,160
But again, as a tech lead,

30
00:01:41,160 --> 00:01:44,273
I still see this kind of code from time to time

31
00:01:44,273 --> 00:01:45,857
while performing technical reviews,

32
00:01:45,857 --> 00:01:50,610
particularly when the dev team is under pressure with tight deadlines.

33
00:01:50,610 --> 00:01:55,299
Corners are cut, perhaps with the intention of going back and refactoring it.

34
00:01:55,299 --> 00:01:57,700
But this is often forgotten.

35
00:01:57,700 --> 00:01:57,904
Hence,

36
00:01:57,904 --> 00:02:02,655
it is a good idea to keep credentials in a separate database or data store,

37
00:02:02,655 --> 00:02:06,433
behind an API or a microservice perhaps.

38
00:02:06,433 --> 00:02:06,811
Thirdly,

39
00:02:06,811 --> 00:02:11,015
the password strength is not inline with best practices and is very

40
00:02:11,015 --> 00:02:14,232
susceptible to brute force or dictionary attacks.

41
00:02:14,232 --> 00:02:17,279
And finally, the password is in plain text.

42
00:02:17,279 --> 00:02:20,671
It should be hashed so that it's useless to the hacker.

43
00:02:20,671 --> 00:02:29,000
Now fortunately, Spring Security has support for password hashing, which we'll discuss in the subsequent sections in this module.

