1
00:00:01,786 --> 00:00:05,346
Okay, let's have some fun and try to penetrate the site.

2
00:00:05,346 --> 00:00:10,326
So quickly put on your hacker hoodies and head down to the basement again.

3
00:00:10,326 --> 00:00:10,983
As mentioned,

4
00:00:10,983 --> 00:00:14,142
one of the issues with hash- based remember-me cookies

5
00:00:14,142 --> 00:00:16,836
is that if someone gets a hold of it,

6
00:00:16,836 --> 00:00:20,859
they will have access to the site until the cookie expires.

7
00:00:20,859 --> 00:00:23,105
Now, by default, for Spring, that's 2 weeks,

8
00:00:23,105 --> 00:00:26,498
and this could easily happen if the user is using a

9
00:00:26,498 --> 00:00:28,902
public computer or a shared computer.

10
00:00:28,902 --> 00:00:30,724
Here I have Postman.

11
00:00:30,724 --> 00:00:35,933
If I simply try to access the site, it redirects me back to the login page.

12
00:00:35,933 --> 00:00:40,944
But if I copy in the cookie from Chrome into Postman,

13
00:00:40,944 --> 00:00:46,835
you can see I now have access to the user's

14
00:00:46,835 --> 00:00:48,915
portfolio page until the cookie expires.

15
00:00:48,915 --> 00:00:54,496
The user would have to change their password to invalidate the cookie.

16
00:00:54,496 --> 00:00:56,425
Now if the cookie expires,

17
00:00:56,425 --> 00:01:00,707
the cookie could still be used to perform an offline brute force or

18
00:01:00,707 --> 00:01:05,080
dictionary attack to try and reveal the user's password.

19
00:01:05,080 --> 00:01:08,680
The hacker can simply copy and decode the content of the cookie,

20
00:01:08,680 --> 00:01:10,270
which reveals, in this case,

21
00:01:10,270 --> 00:01:13,830
that it's a hash-based remember-me cookie as you can see the three properties,

22
00:01:13,830 --> 00:01:17,353
the username, the expiry, and the MD5 hex.

23
00:01:17,353 --> 00:01:23,818
Now in the MD5 hex is the role password or a one-way hash of the password.

24
00:01:23,818 --> 00:01:28,649
Now it's worth a shot for the hacker to try and crack it as the encoding is MD5.

25
00:01:28,649 --> 00:01:33,013
And there is a chance the password could be in plain text,

26
00:01:33,013 --> 00:01:38,469
could have poor password strength, and the key strength might also be very poor.

27
00:01:38,469 --> 00:01:43,970
Now focusing on the key first, the hacker can register an account for themselves.

28
00:01:43,970 --> 00:01:46,815
Now since they know the password they used,

29
00:01:46,815 --> 00:01:48,857
they will have three pieces of the puzzle,

30
00:01:48,857 --> 00:01:51,530
the username, expiry, and password.

31
00:01:51,530 --> 00:01:53,240
Because it's MD5,

32
00:01:53,240 --> 00:01:57,456
it's quite cheap for the hacker to perform billions of hashes per second.

33
00:01:57,456 --> 00:02:00,756
Here I have a simple app that demonstrates this.

34
00:02:00,756 --> 00:02:02,489
I put in the cookie content.

35
00:02:02,489 --> 00:02:05,205
First, it decodes Base64.

36
00:02:05,205 --> 00:02:08,320
This gives the hacker the username and expiry.

37
00:02:08,320 --> 00:02:11,451
Next we do a sort of dictionary attack with different

38
00:02:11,451 --> 00:02:15,337
combinations of poor secret key choices.

39
00:02:15,337 --> 00:02:18,665
And our poor choice of keys reveals itself very quickly.

40
00:02:18,665 --> 00:02:24,466
The value of the secret key should've been much larger and more random.

41
00:02:24,466 --> 00:02:27,325
It should also not be hard-coded in the code.

42
00:02:27,325 --> 00:02:31,588
Vault would be a great place to put it, which is covered in the previous module.

43
00:02:31,588 --> 00:02:33,517
Now that the hacker has the key,

44
00:02:33,517 --> 00:02:35,796
they could focus on the password in the previous cookie

45
00:02:35,796 --> 00:02:38,616
much the same way as they cracked the key.

46
00:02:38,616 --> 00:02:43,569
Now the major weakness of hash-based Remember me is that if the identity store

47
00:02:43,569 --> 00:02:47,995
is hacked and the username and password hash were exposed,

48
00:02:47,995 --> 00:02:52,098
if the site used bcrypt with an appropriate work factor combined with

49
00:02:52,098 --> 00:02:55,786
strong password rules and additional security pin,

50
00:02:55,786 --> 00:02:58,455
it would be extremely difficult to crack,

51
00:02:58,455 --> 00:03:00,511
even for a single account.

52
00:03:00,511 --> 00:03:03,226
However, the way Remember me hash is configured,

53
00:03:03,226 --> 00:03:07,733
there is a backdoor into the site as the hacker could simply use the

54
00:03:07,733 --> 00:03:11,615
bcrypt hash to generate the remember-me cookie.

55
00:03:11,615 --> 00:03:15,296
All they would have to do is put all their effort in cracking the key,

56
00:03:15,296 --> 00:03:18,051
and that only needs to be done once.

57
00:03:18,051 --> 00:03:20,891
Then all the accounts are exposed to the hacker.

58
00:03:20,891 --> 00:03:21,108
Also,

59
00:03:21,108 --> 00:03:24,062
they don't have to worry about the pin because the pin is

60
00:03:24,062 --> 00:03:26,516
not included in the Remember me hash.

61
00:03:26,516 --> 00:03:30,088
Now only users with two- factor authentication enabled

62
00:03:30,088 --> 00:03:32,946
would be protected in this scenario.

63
00:03:32,946 --> 00:03:33,412
Fortunately,

64
00:03:33,412 --> 00:03:37,865
Spring provides an alternative way of enabling Remember me that addresses

65
00:03:37,865 --> 00:03:45,000
some of the shortcomings of hash-bashed token approach. We will cover this in the next section.

