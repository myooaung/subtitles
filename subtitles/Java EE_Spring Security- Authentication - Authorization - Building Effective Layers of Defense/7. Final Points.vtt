WEBVTT
1
00:00:02.095 --> 00:00:04.685
In summary, use well-established frameworks,

2
00:00:04.685 --> 00:00:07.425
like Spring Security, Spring tag library,

3
00:00:07.425 --> 00:00:09.600
and keep these up to date.

4
00:00:09.600 --> 00:00:12.670
The increased adoption of these frameworks has resulted in

5
00:00:12.670 --> 00:00:16.323
significant declines of occurrences of once-common threats,

6
00:00:16.323 --> 00:00:18.974
like cross-site request forgery, clickjacking,

7
00:00:18.974 --> 00:00:22.169
cross-site scripting, man-in-the-middle attacks.

8
00:00:22.169 --> 00:00:25.029
Use HTTPS for everything.

9
00:00:25.029 --> 00:00:26.762
There is no more excuses.

10
00:00:26.762 --> 00:00:31.855
Performance is no longer a factor with increased bandwidth and processing power,

11
00:00:31.855 --> 00:00:34.486
and you can get a free certificate with Let's Encrypt.

12
00:00:34.486 --> 00:00:38.661
Don't change any of the default security settings without knowing

13
00:00:38.661 --> 00:00:42.343
the implications to your users of doing so.

14
00:00:42.343 --> 00:00:46.861
Register your domain for preloading to significantly reduce the chances of

15
00:00:46.861 --> 00:00:51.085
a successful man-in-the-middle attack on your users.

16
00:00:51.085 --> 00:00:55.335
If you want to learn more about HTTPS or HSTS and any of

17
00:00:55.335 --> 00:00:57.517
the security headers we just discussed,

18
00:00:57.517 --> 00:01:01.111
I would recommend the following Pluralsight courses,

19
00:01:01.111 --> 00:01:05.010
What Every Developer Must Know About HTTPS and

20
00:01:05.010 --> 00:01:07.703
Introduction to Browser Security Headers.

21
00:01:07.703 --> 00:01:13.860
Now on the top of the list for OWASP 2017 threats is injections,

22
00:01:13.860 --> 00:01:15.831
like SQL injection.

23
00:01:15.831 --> 00:01:19.902
There are still many high-profile cases of these attacks being successful.

24
00:01:19.902 --> 00:01:28.000
Hence, in the next module, we will go over how to securely store your credentials with Spring Security.

