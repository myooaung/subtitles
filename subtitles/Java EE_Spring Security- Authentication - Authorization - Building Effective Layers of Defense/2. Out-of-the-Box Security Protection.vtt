WEBVTT
1
00:00:01.826 --> 00:00:04.621
Spring Security adds the following security headers,

2
00:00:04.621 --> 00:00:07.933
by default, to all responses.

3
00:00:07.933 --> 00:00:10.184
Let's break these down.

4
00:00:10.184 --> 00:00:12.853
The Cache-Control header instructs the browser to

5
00:00:12.853 --> 00:00:15.139
disable all caching completely.

6
00:00:15.139 --> 00:00:19.096
Caching can add efficiency by saving a round-trip to the server.

7
00:00:19.096 --> 00:00:19.310
However,

8
00:00:19.310 --> 00:00:23.358
it can also be a security risk to your users as cached pages are

9
00:00:23.358 --> 00:00:27.409
stored in the browser's temporary internet files and could be viewed

10
00:00:27.409 --> 00:00:30.067
by a third party after the user logs out.

11
00:00:30.067 --> 00:00:33.735
The information in these cached pages could be enough for

12
00:00:33.735 --> 00:00:38.155
identity theft or perhaps to reset the password.

13
00:00:38.155 --> 00:00:41.644
Content type options set to nosniff.

14
00:00:41.644 --> 00:00:44.445
This prevents the browser from trying to be a bit too clever

15
00:00:44.445 --> 00:00:47.537
and guessing the content type of responses that do not

16
00:00:47.537 --> 00:00:50.458
include the content type header.

17
00:00:50.458 --> 00:00:54.919
Now browsers have tended to do this to improve the user's experience.

18
00:00:54.919 --> 00:00:55.386
However,

19
00:00:55.386 --> 00:01:00.029
this can be exploited by hackers as they can create polyglot files

20
00:01:00.029 --> 00:01:03.151
that can be interpreted in multiple formats,

21
00:01:03.151 --> 00:01:07.104
example displayed as an image, but, at the same time,

22
00:01:07.104 --> 00:01:08.929
executed as a script.

23
00:01:08.929 --> 00:01:11.498
X-Frame-Options: DENY.

24
00:01:11.498 --> 00:01:16.057
This instructs the browser not to embed your web application in frames.

25
00:01:16.057 --> 00:01:19.551
This is to protect against clickjacking where your user is tricked into

26
00:01:19.551 --> 00:01:22.997
clicking something on your website without being aware of that.

27
00:01:22.997 --> 00:01:27.380
This is a popular attack in social media and even has its own name,

28
00:01:27.380 --> 00:01:27.813
likejacking,

29
00:01:27.813 --> 00:01:31.498
where users are tricked into liking posts and pages

30
00:01:31.498 --> 00:01:33.695
in their social media platform,

31
00:01:33.695 --> 00:01:37.863
giving the malicious site access to their friend list.

32
00:01:37.863 --> 00:01:40.545
Typically this is done by overlaying a malicious site

33
00:01:40.545 --> 00:01:42.815
over the top of the target site.

34
00:01:42.815 --> 00:01:45.786
Hence, if a user is logged into the target site,

35
00:01:45.786 --> 00:01:50.343
the malicious site can load the target site in the background.

36
00:01:50.343 --> 00:01:55.502
Any actions on the malicious site are actually taking place on the target site.

37
00:01:55.502 --> 00:01:58.805
In the demo, we'll demonstrate this attack.

38
00:01:58.805 --> 00:02:02.220
Reflective cross-site scripting protection, block.

39
00:02:02.220 --> 00:02:05.551
This instructs the browser to enable its built-in

40
00:02:05.551 --> 00:02:08.257
reflective cross-site scripting protection.

41
00:02:08.257 --> 00:02:11.771
Reflective cross-site scripting attacks are when content is

42
00:02:11.771 --> 00:02:15.109
submitted or injected into your web application and reflected

43
00:02:15.109 --> 00:02:17.773
back to whoever is viewing it.

44
00:02:17.773 --> 00:02:19.831
Now this could be a script.

45
00:02:19.831 --> 00:02:25.125
And instead of displaying it, the user's browser can decide to execute it.

46
00:02:25.125 --> 00:02:27.140
Cross-site request forgery.

47
00:02:27.140 --> 00:02:29.504
Spring also protects your site against cross-site

48
00:02:29.504 --> 00:02:31.750
request forgery or session writing,

49
00:02:31.750 --> 00:02:36.905
which is an attack that forces an end user to execute unwanted actions on a

50
00:02:36.905 --> 00:02:40.916
web application in which they're currently authenticated.

51
00:02:40.916 --> 00:02:45.246
The way it works is your user authenticates with your web site,

52
00:02:45.246 --> 00:02:47.211
the webserver will return a cookie,

53
00:02:47.211 --> 00:02:51.217
which is stored by the browser against that domain.

54
00:02:51.217 --> 00:02:55.658
This is so all future requests to that domain do not have to re-authenticate.

55
00:02:55.658 --> 00:02:58.071
The browser will just automatically include the cookie

56
00:02:58.071 --> 00:03:00.752
for all future requests to the server.

57
00:03:00.752 --> 00:03:04.156
If while the user is still logged in, they access a malicious site,

58
00:03:04.156 --> 00:03:07.866
perhaps in another tab, and submit something to that malicious site,

59
00:03:07.866 --> 00:03:12.663
the malicious site can submit a request to the target server domain,

60
00:03:12.663 --> 00:03:16.873
and the browser will automatically add the cookie to that request.

61
00:03:16.873 --> 00:03:18.906
Now cross-site request forgery attacks are only

62
00:03:18.906 --> 00:03:22.082
viable for state- changing operations, like PUT,

63
00:03:22.082 --> 00:03:27.350
POST, or DELETE as the response is returned back to the user's browser.

64
00:03:27.350 --> 00:03:31.895
However, the malicious site could submit a change of content,

65
00:03:31.895 --> 00:03:34.041
deleting content, transferring funds perhaps,

66
00:03:34.041 --> 00:03:37.107
or even trying to reset the password to give the

67
00:03:37.107 --> 00:03:39.675
hacker access to the user's account.

68
00:03:39.675 --> 00:03:40.631
Spring, by default,

69
00:03:40.631 --> 00:03:42.996
protects against cross- site request forgery using

70
00:03:42.996 --> 00:03:45.848
the synchronizer token pattern.

71
00:03:45.848 --> 00:03:49.143
The way it works is when a user logs into your web application,

72
00:03:49.143 --> 00:03:51.278
the server returns the response,

73
00:03:51.278 --> 00:03:56.869
which includes both the cookie and additionally a randomly generated token.

74
00:03:56.869 --> 00:04:00.097
The browser will store the cookie against the domain,

75
00:04:00.097 --> 00:04:04.931
but it has no knowledge of the token as it's application specific.

76
00:04:04.931 --> 00:04:08.317
Spring Security then expects both the cookie and the token

77
00:04:08.317 --> 00:04:10.674
to be returned for all future requests.

78
00:04:10.674 --> 00:04:14.394
The malicious site has no access to the token.

79
00:04:14.394 --> 00:04:17.519
Hence, when it submits the request to your domain,

80
00:04:17.519 --> 00:04:20.300
Spring Security will reject it.

81
00:04:20.300 --> 00:04:23.640
Like most things in Spring Security, there is a filter,

82
00:04:23.640 --> 00:04:26.022
the cross-site request forgery filter that performs the

83
00:04:26.022 --> 00:04:29.625
checks and adds the token to the response.

84
00:04:29.625 --> 00:04:30.355
For the most part,

85
00:04:30.355 --> 00:04:33.596
you shouldn't need to change any of the default security

86
00:04:33.596 --> 00:04:36.319
headers as there are there for a reason.

87
00:04:36.319 --> 00:04:39.794
However, there will be times when you might need to customize them,

88
00:04:39.794 --> 00:04:45.374
particularly the caching, or allow framing of your site for certain domains.

89
00:04:45.374 --> 00:04:47.592
Now like most things in Spring Security,

90
00:04:47.592 --> 00:04:50.699
you can easily configure these settings.

91
00:04:50.699 --> 00:04:55.402
From your configuration class that extends the WebSecurityConfigurerAdapter,

92
00:04:55.402 --> 00:05:00.727
overwriting the configure method that accepts the HttpSecurity object,

93
00:05:00.727 --> 00:05:06.484
there is a method to access the header and cross-cross request forgery filters.

94
00:05:06.484 --> 00:05:10.836
By default, the X frameOptions header is set to deny,

95
00:05:10.836 --> 00:05:14.264
indicating the site should not include any frames.

96
00:05:14.264 --> 00:05:17.478
If you do, however, want to allow framing,

97
00:05:17.478 --> 00:05:20.705
you can configure it with a less restrictive setting,

98
00:05:20.705 --> 00:05:25.001
like sameOrigin, which only allows framing in the same domain.

99
00:05:25.001 --> 00:05:28.455
Or you could specify a whitelist of all the domains you

100
00:05:28.455 --> 00:05:32.256
permit your site to be framed in.

101
00:05:32.256 --> 00:05:37.331
Similarly, the content type header can also be disabled if required.

102
00:05:37.331 --> 00:05:37.603
However,

103
00:05:37.603 --> 00:05:42.707
you will be reducing the cross- site scripting protection for your users.

104
00:05:42.707 --> 00:05:46.410
For caching you shouldn't need to disable the header as you can

105
00:05:46.410 --> 00:05:50.312
selectively enable the caching on static pages that do not have

106
00:05:50.312 --> 00:05:54.205
sensitive data in the controller classes.

107
00:05:54.205 --> 00:05:57.134
Take, for example, this pricing endpoint.

108
00:05:57.134 --> 00:06:01.736
It only contains the current price, so it has no sensitive user data.

109
00:06:01.736 --> 00:06:05.620
But caching it for a few seconds or minutes might reduce the

110
00:06:05.620 --> 00:06:08.427
number of roundtrips back to the server.

111
00:06:08.427 --> 00:06:14.486
Hence, on the response, you can enable the caching and add the duration.

112
00:06:14.486 --> 00:06:17.275
Spring will then automatically detect and adjust this

113
00:06:17.275 --> 00:06:18.774
header for that particular page,

114
00:06:18.774 --> 00:06:24.114
but continue to send the disabling header for all other pages.

115
00:06:24.114 --> 00:06:26.396
If you do, however, want to remove this header,

116
00:06:26.396 --> 00:06:31.023
you can do so using the disable property.

117
00:06:31.023 --> 00:06:35.161
For cross-site request forgery protection, there is a separate filter.

118
00:06:35.161 --> 00:06:38.668
You can remove the filter from service with the disable property,

119
00:06:38.668 --> 00:06:42.289
hence removing any cross-site request forgery protection completely,

120
00:06:42.289 --> 00:06:45.231
which is not recommended.

121
00:06:45.231 --> 00:06:47.318
The filter will add the cross-site request forgery

122
00:06:47.318 --> 00:06:49.750
token to the response property.

123
00:06:49.750 --> 00:06:53.545
You can then retrieve it and add it to your forms as a hidden field.

124
00:06:53.545 --> 00:06:56.471
I am actually using Thymeleaf, which is a templating engine,

125
00:06:56.471 --> 00:07:00.631
which detects the presence of the cross-site request forgery property in the

126
00:07:00.631 --> 00:07:05.366
response and automatically adds the token to all forms.

127
00:07:05.366 --> 00:07:09.467
Again, use the correct HTTP verbs in your application.

128
00:07:09.467 --> 00:07:12.658
You only need to add the token to state- changing operations,

129
00:07:12.658 --> 00:07:15.303
like PUT, POST, DELETE, OR PATCH.

130
00:07:15.303 --> 00:07:17.378
Other methods, like GET or HEAD,

131
00:07:17.378 --> 00:07:20.438
would require the token to be passed in the query string,

132
00:07:20.438 --> 00:07:23.481
which is not encrypted when using HTTPS,

133
00:07:23.481 --> 00:07:27.576
which greatly increases the chances of the token being exposed.

134
00:07:27.576 --> 00:07:32.580
If you are using a single-page application that perhaps uses JSON for the

135
00:07:32.580 --> 00:07:37.086
request and response like an AngularJS application,

136
00:07:37.086 --> 00:07:39.163
you can configure the cross-site request forgery

137
00:07:39.163 --> 00:07:42.216
token to be placed inside the cookie.

138
00:07:42.216 --> 00:07:42.977
That way,

139
00:07:42.977 --> 00:07:45.662
your application's JavaScript can remove the token from

140
00:07:45.662 --> 00:07:48.339
the cookie and add it to the request.

141
00:07:48.339 --> 00:07:49.966
At the other end,

142
00:07:49.966 --> 00:07:53.476
the cross-site request forgery filter will compare the token

143
00:07:53.476 --> 00:07:57.122
from the cookie against the one in the request.

144
00:07:57.122 --> 00:08:01.873
Now JavaScript handling this might make some people a little bit nervous.

145
00:08:01.873 --> 00:08:02.375
However,

146
00:08:02.375 --> 00:08:05.382
the browser restricts JavaScript to only have access

147
00:08:05.382 --> 00:08:07.449
to the cookies for their domain.

148
00:08:07.449 --> 00:08:12.466
Now for AngularJS, this just all works of the box with Spring Security.

149
00:08:12.466 --> 00:08:19.208
To configure this, set the token repository to CookieCsrfTokenRepository.

150
00:08:19.208 --> 00:08:23.113
If you need JavaScript to access the cookie to retrieve the token,

151
00:08:23.113 --> 00:08:25.630
then set the HTTP with only false.

152
00:08:25.630 --> 00:08:31.427
Otherwise, it's best to leave this default, which is disabled.

153
00:08:31.427 --> 00:08:32.174
An important note.

154
00:08:32.174 --> 00:08:35.813
If you're using stateless, basic, or digest authentication,

155
00:08:35.813 --> 00:08:39.046
you still need the cross-site request forgery protection as the

156
00:08:39.046 --> 00:08:42.429
browser will include the basic and digest authentications header by

157
00:08:42.429 --> 00:08:45.683
default just like it would the cookie.

158
00:08:45.683 --> 00:08:50.311
Finally, it's worth considering the use of the contentSecurityPolicy headers,

159
00:08:50.311 --> 00:08:54.367
which is a great way to protect your users from cross-site scripting attacks.

160
00:08:54.367 --> 00:08:58.554
It's currently supported by most popular browsers, including Internet Explorer.

161
00:08:58.554 --> 00:09:01.634
Configuring it with Spring Security is simple.

162
00:09:01.634 --> 00:09:05.241
You can access the CSP header with the header filter

163
00:09:05.241 --> 00:09:07.625
object in the configure method.

164
00:09:07.625 --> 00:09:20.000
You can then add the domain you permit various resources to originate from, anything from script, CSS, fonts, you name it.

