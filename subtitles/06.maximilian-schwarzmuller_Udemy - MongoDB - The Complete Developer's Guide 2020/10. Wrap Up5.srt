1
00:00:02,260 --> 00:00:08,110
Now one additional resource I want to draw your attention to which you also find a link to in the last

2
00:00:08,110 --> 00:00:13,590
lecture of this module is this article in the official mongodb documentation.

3
00:00:13,780 --> 00:00:18,860
It talks about how to model monetary data and that is essentially about the things we talked about in

4
00:00:18,870 --> 00:00:19,720
this module,

5
00:00:19,810 --> 00:00:22,870
so how you can get that precision you need and so on.

6
00:00:23,110 --> 00:00:31,300
There you also find an alternative approach to using that decimal 128 bit value we used in the last

7
00:00:31,380 --> 00:00:36,130
lectures and that is using a scale factor which is not the recommended method anymore,

8
00:00:36,160 --> 00:00:40,480
that is why I showed using the decimal type because that is preferable now

9
00:00:40,600 --> 00:00:48,160
but the scale factor method is essentially a way of using or working with numbers by multiplying them

10
00:00:48,520 --> 00:00:49,780
with the precision you need,

11
00:00:49,840 --> 00:00:55,360
so if you need for example here in this example, a tenth of a cent of precision, you could multiply your

12
00:00:55,360 --> 00:00:58,310
price value with 1000 to get that precision,

13
00:00:58,330 --> 00:01:03,180
so you essentially only work with integers there and never with floating point numbers

14
00:01:03,310 --> 00:01:08,960
and that is an alternative to the 128 decimal, though

15
00:01:09,160 --> 00:01:15,050
just to highlight this again, using the decimal is preferrable now but you can of course go for this approach

16
00:01:15,110 --> 00:01:16,110
too if you want to.

17
00:01:16,300 --> 00:01:19,210
So checking out this article is also worth your time

18
00:01:19,330 --> 00:01:23,560
if you're working with monetary data, you'll find a bit more information there.

19
00:01:23,650 --> 00:01:30,790
But I hope that with this module, it became clearer why we have these different number types, what you

20
00:01:30,790 --> 00:01:34,050
use them for, what their limitations and advantages are

21
00:01:34,210 --> 00:01:38,290
and therefore what you could choose in your next application you build.
