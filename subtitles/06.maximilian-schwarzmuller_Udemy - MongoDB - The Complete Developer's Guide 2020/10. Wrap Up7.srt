1
00:00:02,120 --> 00:00:02,830
So that's it

2
00:00:02,840 --> 00:00:08,690
for this module. You learned about performance and fault tolerance. For performance,

3
00:00:08,690 --> 00:00:13,010
there's one thing you could consider and that are capped collections for cases where you automatically

4
00:00:13,040 --> 00:00:16,900
want to clear old data or you're fine with old data being cleared,

5
00:00:17,000 --> 00:00:23,300
so for example for a short term caching mechanism. Performance in general is all about having efficient

6
00:00:23,300 --> 00:00:30,540
queries and operations, fitting data formats and of course, a best practice mongodb server configuration.

7
00:00:30,770 --> 00:00:38,150
You should be aware of replica sets now, which is basically a mechanism or a feature of mongodb

8
00:00:38,420 --> 00:00:41,680
that provides fault tolerance with automatic recovery

9
00:00:41,720 --> 00:00:47,030
with the election of a new primary node and improved read performance as well.

10
00:00:47,390 --> 00:00:53,720
You also have sharding at your disposal which is a way of scaling your mongodb server horizontally,

11
00:00:53,780 --> 00:00:58,750
so across multiple servers instead of running everything on just one machine.

12
00:00:58,810 --> 00:01:04,370
Now at some point, you want to get your mongodb server from localhost up into the web or onto a

13
00:01:04,370 --> 00:01:05,190
real server

14
00:01:05,400 --> 00:01:07,690
and that is called deployment.

15
00:01:07,760 --> 00:01:11,450
Now deployment is a complex matter since it involves many tasks,

16
00:01:11,450 --> 00:01:16,130
some of them like setting up the machine and securing the network,

17
00:01:16,190 --> 00:01:19,020
some of them are not even directly related to mongodb.

18
00:01:19,310 --> 00:01:25,400
Therefore unless you are an experienced admin or you got one, you work in a corporation, you should consider

19
00:01:25,430 --> 00:01:28,370
a managed solution like mongodb Atlas.

20
00:01:28,370 --> 00:01:33,320
Atlas is a managed service where you can configure a mongodb environment and you pay on by usage

21
00:01:33,320 --> 00:01:35,230
or on a per usage basis,

22
00:01:35,240 --> 00:01:36,470
you can always shut it down,

23
00:01:36,470 --> 00:01:39,410
you can always reconfigure, you can upgrade, downgrade

24
00:01:39,410 --> 00:01:45,290
so you got all that available. You've got a best practice mongodb server running in the cloud and especially

25
00:01:45,290 --> 00:01:47,410
when you're working on a project on your own,

26
00:01:47,480 --> 00:01:52,660
you should definitely consider that as a solution to deploying everything on your own which

27
00:01:52,880 --> 00:01:55,730
well as I said, is a very complex task.
