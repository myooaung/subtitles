1
00:00:01,440 --> 00:00:04,970
And now let's proceed with a demo and see how these

2
00:00:04,970 --> 00:00:10,140
visualizations can be implemented in AWS SageMaker.

3
00:00:10,140 --> 00:00:15,960
Here I am continuing on the same Jupyter Notebook we created in the last module.

4
00:00:15,960 --> 00:00:20,640
As you can note that we have imported Python package called seaborn.

5
00:00:20,640 --> 00:00:25,740
Seaborn is a high‑level packaged library,

6
00:00:25,740 --> 00:00:30,130
and it makes it easier for us to draw interactive visualizations.

7
00:00:30,130 --> 00:00:33,820
You can read more about seaborn here.

8
00:00:33,820 --> 00:00:36,780
To start the visualization process,

9
00:00:36,780 --> 00:00:43,050
let's start by first drawing a whisker and boxplot for the sale price to see

10
00:00:43,050 --> 00:00:48,990
the overall sale price distribution trends in Globomantics.

11
00:00:48,990 --> 00:00:49,950
And for that we,

12
00:00:49,950 --> 00:00:53,520
use the seaborn function called boxplot and give it the

13
00:00:53,520 --> 00:00:56,340
SalePrice column to display it vertically.

14
00:00:56,340 --> 00:01:00,040
And you need to assign that as our Y parameter.

15
00:01:00,040 --> 00:01:05,540
As you can see, we have a box and whisker plot with many outlier variables.

16
00:01:05,540 --> 00:01:09,220
This could be assigned that we need to do some work on outliers,

17
00:01:09,220 --> 00:01:11,880
such as observations removal.

18
00:01:11,880 --> 00:01:15,050
We will discuss that more in detail in the next module.

19
00:01:15,050 --> 00:01:19,170
Also note that we would expect the distribution of our data to be

20
00:01:19,170 --> 00:01:23,760
skewed as the median is not exactly in the middle.

21
00:01:23,760 --> 00:01:29,740
A symmetric dataset shows the median roughly in the middle of the box.

22
00:01:29,740 --> 00:01:36,010
Let's verify this assumption by looking at SalePrice distribution.

23
00:01:36,010 --> 00:01:40,580
And for that, we use the seaborn function called distplot.

24
00:01:40,580 --> 00:01:44,450
And, as you can see, the distribution is skewed as expected.

25
00:01:44,450 --> 00:01:47,480
This would warrant that we might need to do some

26
00:01:47,480 --> 00:01:50,440
data processing to fix this skew.

27
00:01:50,440 --> 00:01:54,300
After we have understood the shape of SalePrice data,

28
00:01:54,300 --> 00:01:57,060
let's try to figure out which features could be a

29
00:01:57,060 --> 00:02:00,390
good predictor of the sale price.

30
00:02:00,390 --> 00:02:07,040
And for this, we will need to use heat maps that help us to detect correlation.

31
00:02:07,040 --> 00:02:11,190
Here, I am telling matplotlib I want a larger figure.

32
00:02:11,190 --> 00:02:14,260
Remember, seaborn is based on matplotlib,

33
00:02:14,260 --> 00:02:18,240
and whatever we do there impacts seaborn drawings too.

34
00:02:18,240 --> 00:02:23,240
Let's now draw the heat map.

35
00:02:23,240 --> 00:02:26,210
And here I am drawing the heat map for the correlation

36
00:02:26,210 --> 00:02:29,030
metrics we calculated in the last module.

37
00:02:29,030 --> 00:02:34,740
And I am setting the annotations to True so that we see correlation values,

38
00:02:34,740 --> 00:02:39,490
and I make it nicely colored with a cmap parameter.

39
00:02:39,490 --> 00:02:41,480
As you can see in the last row,

40
00:02:41,480 --> 00:02:46,540
we have a correlation for SalePrice across all features.

41
00:02:46,540 --> 00:02:48,700
Also, as you can note in the legend,

42
00:02:48,700 --> 00:02:52,440
the dark colors refer to strong correlations,

43
00:02:52,440 --> 00:02:56,640
while the brighter colors refer to weaker correlations.

44
00:02:56,640 --> 00:02:57,650
For example,

45
00:02:57,650 --> 00:03:00,330
we can note that the following features are highly

46
00:03:00,330 --> 00:03:02,900
correlated with the SalePrice.

47
00:03:02,900 --> 00:03:06,630
The Overall Qual, which has a value point of 0.8,

48
00:03:06,630 --> 00:03:11,950
Gr Liv Area with a correlation value of 0.71.

49
00:03:11,950 --> 00:03:16,200
Let's try to create a smaller correlation heat map with a

50
00:03:16,200 --> 00:03:20,540
smaller set of the most interesting values.

51
00:03:20,540 --> 00:03:25,010
Here we are choosing the highest seven correlation values from the

52
00:03:25,010 --> 00:03:28,700
correlation metrics based on the SalePrice column.

53
00:03:28,700 --> 00:03:32,320
And we are only choosing values on the Sale column.

54
00:03:32,320 --> 00:03:34,570
Let's print that and see.

55
00:03:34,570 --> 00:03:38,410
As you can see, the following interesting facts.

56
00:03:38,410 --> 00:03:43,510
SalePrice correlation with itself is 1, which is obvious.

57
00:03:43,510 --> 00:03:46,670
Overall Qual, which is 0.79,

58
00:03:46,670 --> 00:03:52,030
which makes sense since the higher overall quality of the building,

59
00:03:52,030 --> 00:03:53,910
the more expensive it would be.

60
00:03:53,910 --> 00:03:58,130
Gr Liv Area, which is the above‑grade living area,

61
00:03:58,130 --> 00:04:03,420
and the correlation is 0.706, Garage Cars,

62
00:04:03,420 --> 00:04:07,230
0.64, Garage Area, 0.64.

63
00:04:07,230 --> 00:04:11,880
Note that it's most probably that Garage Cars and Garage

64
00:04:11,880 --> 00:04:16,250
Area are highly correlated features, since if you have more cars,

65
00:04:16,250 --> 00:04:19,150
you would need a bigger Garage Area, right?

66
00:04:19,150 --> 00:04:23,940
We can validate that by checking their values in the heat map.

67
00:04:23,940 --> 00:04:25,120
And as you can see,

68
00:04:25,120 --> 00:04:31,740
the intersection between the Garage Cars and Garage Area in the heat map,

69
00:04:31,740 --> 00:04:36,030
it's dark, which indicates that it's a high correlation.

70
00:04:36,030 --> 00:04:40,610
Highly correlated features would warrant removal,

71
00:04:40,610 --> 00:04:43,540
as we will discuss in the next module.

72
00:04:43,540 --> 00:04:47,640
Also, there is a Total Bsmt SF parameter,

73
00:04:47,640 --> 00:04:50,290
which is the total square feet of the basement area.

74
00:04:50,290 --> 00:04:56,480
It has a correlation of 0.632, and 1st Flr area, which is 0.62.

75
00:04:56,480 --> 00:05:01,220
Let's take a closer look at the relationship nature between

76
00:05:01,220 --> 00:05:04,980
SalePrice and some of its highly correlated variables.

77
00:05:04,980 --> 00:05:11,040
And for that, let's use a scatter plot with a trend line.

78
00:05:11,040 --> 00:05:16,120
First, let's examine the linear relationship between SalePrice and Overall Qual,

79
00:05:16,120 --> 00:05:21,740
and for that, we will use a seaborn function called regplot,

80
00:05:21,740 --> 00:05:27,630
which is a scatter plot with a trend or regression line.

81
00:05:27,630 --> 00:05:28,480
Hmm.

82
00:05:28,480 --> 00:05:32,750
We see that the general trend is an increase of the price as

83
00:05:32,750 --> 00:05:35,440
the overall quality increases (makes sense,

84
00:05:35,440 --> 00:05:39,610
right?) with a few values that could be potential outliers

85
00:05:39,610 --> 00:05:44,340
and the very big numbers of SalePrice.

86
00:05:44,340 --> 00:05:47,430
Let's also examine the linear relationship between

87
00:05:47,430 --> 00:05:53,640
price and above‑grade living area.

88
00:05:53,640 --> 00:05:58,000
We can also see that the overall direction is an increase of the price,

89
00:05:58,000 --> 00:06:02,800
with a grade living area increase with a few outliers prices

90
00:06:02,800 --> 00:06:10,500
and the prices between 100 K and 200 K, which would also deserve some attention.

91
00:06:10,500 --> 00:06:12,620
That's it for data visualization.

92
00:06:12,620 --> 00:06:14,500
If you are interested to do more,

93
00:06:14,500 --> 00:06:22,000
you can check seaborn documentation that covers all categories of visualization we discussed in this module.

