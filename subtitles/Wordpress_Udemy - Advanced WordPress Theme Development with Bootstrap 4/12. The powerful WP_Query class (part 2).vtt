WEBVTT

00:00.480 --> 00:04.200
Hello and begin up where we left off in the last lesson.

00:04.430 --> 00:07.890
That's Kreator first custom Querrey in wordpress.

00:08.070 --> 00:11.600
Before we begin let's create the HMS markup.

00:11.790 --> 00:17.560
First let's remove this paragraph here and we need to create a bootstrap rule here.

00:17.880 --> 00:24.360
You remember why from our last lesson and inside I said container.

00:24.940 --> 00:27.870
Let's open up the page with tags here.

00:27.890 --> 00:35.200
We are going to create a variable to identify the content we want here which will be a future news item.

00:35.260 --> 00:39.050
So let's call this variable future.

00:39.210 --> 00:45.810
If you have some little knowledge of object oriented programming you will not have much trouble understanding

00:45.900 --> 00:47.810
what I'm going to do here.

00:47.970 --> 00:54.360
If you don't pay close attention because it's not that difficult in the end everything will look like

00:54.360 --> 00:57.290
ingredients of a cake recipe.

00:57.330 --> 01:05.180
This variable will be a new instance of a WordPress class called The way you p underscore Querrey to

01:05.180 --> 01:06.530
identify this.

01:06.530 --> 01:15.150
We use the new command and pass declasse name with WP underscore Querrey.

01:15.230 --> 01:19.400
This is what we call a class instance or a class object.

01:19.400 --> 01:26.650
If you have access to several methods and also the variable of this class here but don't be scared.

01:26.660 --> 01:27.340
OK.

01:27.620 --> 01:30.200
We already know some methods of this class.

01:30.200 --> 01:37.720
For example half Bowse and the post are all methods of this WP Querrey class.

01:37.970 --> 01:41.670
But your understand that better as we create everything OK.

01:42.540 --> 01:48.300
What kind of value do we want to keep inside this object here we're going to keep the category to which

01:48.300 --> 01:49.950
the news belong.

01:49.990 --> 01:53.760
We can also save the category that we want to exclude from the list.

01:53.760 --> 01:59.460
For example let's say we don't want news coming from the social media category.

01:59.460 --> 02:05.340
The advantage of all this is that we don't need very deep knowledge of my cycle.

02:05.400 --> 02:12.930
That is we don't have to make a single select to get information about database about posts about pages

02:12.960 --> 02:19.500
taxonomies post time to search for there are two ways we can get this information.

02:19.500 --> 02:23.280
One is using query strings acquires string.

02:23.340 --> 02:25.100
It's something like this.

02:25.140 --> 02:32.740
We pass an argument and its value here followed by 10 percent and a new argument with its value new

02:32.800 --> 02:41.320
and present and so on until it gets to the end of a list of arguments the other way is to an array.

02:41.640 --> 02:44.300
And I'll be showing you both ways.

02:44.310 --> 02:48.260
Let's start with the first method that of the crisis string.

02:49.110 --> 02:52.920
So what we want to fetch from our database.

02:52.920 --> 02:57.730
Well we want a certain number of folks certain categories.

02:57.750 --> 03:04.740
The first argument we are going to pass then is post underscore type the both type here.

03:04.740 --> 03:08.890
In the case is posed it could be a base.

03:08.920 --> 03:17.850
But for now we are only interested in posts with typing in a percent and then we have a second argument.

03:17.970 --> 03:25.470
How many posts do you want to submit in this case since we want only one post which will be our future

03:25.500 --> 03:26.650
news item.

03:26.670 --> 03:34.600
This argument will have the value of one so posts per page equals one.

03:34.710 --> 03:41.530
Now the featured news items belongs to which category we have at least two ways to indicate this here.

03:41.850 --> 03:47.360
You can use the cat argument or category underscore name.

03:47.370 --> 03:55.520
The difference is that for the cat argument we would pass only the category numeric ID with for category

03:55.530 --> 03:59.910
underscore a name we would have to pass the category slug right.

03:59.930 --> 04:03.970
But how can retrieve this information.

04:04.020 --> 04:13.490
Very simple as go to the dashboard head which you posts categories if we hover over the link for each

04:13.490 --> 04:14.150
category.

04:14.150 --> 04:20.270
Pay attention to the link that is shown in the lower left for the Web development category.

04:20.270 --> 04:31.650
We have the ID wishes for for the Web Design category 11 for social media AIDS Otherwise if you want

04:31.650 --> 04:38.860
to use the category name parameter you can grab this slug that we have here in the category table we

04:38.920 --> 04:40.840
can work with both arguments.

04:40.860 --> 04:48.240
But in this case I think we'd better go with the cat argument because the category I.D. will never change.

04:48.240 --> 04:52.440
Meanwhile this law can be changed in the dashboard very easily.

04:52.440 --> 05:00.810
So I stick with the category I.D. let's pass the categories 4 and 11 and leave out the category number

05:00.930 --> 05:05.310
eight to press more than one category inside gross strength.

05:05.490 --> 05:12.730
We separate the values by comer's And now as we define the content we want to fetch that spew the word

05:12.800 --> 05:14.540
Breslov started.

05:15.310 --> 05:17.820
If I have posts

05:20.920 --> 05:27.610
while have posts the post.

05:27.860 --> 05:34.430
However since we're working with the custom Krave they have to indicate first which class object has

05:34.430 --> 05:36.970
the data coming from the database.

05:36.980 --> 05:42.260
In this case the featured object is the variable that is doing this.

05:42.260 --> 05:49.110
We have to pass it here before the name of disfunctions have posts and the post followed by a small

05:49.180 --> 05:54.550
arrow which in fact is nothing more than a hyphen and a greater than sign.

05:54.590 --> 05:59.840
I'm not going to explain technically what's happening here but the important thing to remember is that

05:59.900 --> 06:06.680
whenever we're creating a custom query we have to pass the object variable followed by the little arrow

06:07.220 --> 06:12.980
before half Beauce and the post functions as close to a block

06:15.670 --> 06:18.190
and the block as well.

06:18.220 --> 06:24.110
Right now what's happening here is that you're working with a copy of the original WordPress loop.

06:24.460 --> 06:29.280
That copy is represented by this future variable we created here.

06:30.170 --> 06:37.110
It will give us a huge power since we will be able to work with the same methods used by the original

06:37.110 --> 06:44.220
WordPress Querrey such as have posts and the polls to make the modifications to the equerry parameters

06:44.220 --> 06:49.370
such as the number of returns posts which by default is transpose.

06:49.410 --> 06:53.120
And here is changed to just one post.

06:53.130 --> 06:59.400
Anyway you can control several things using this copy of the loop but as an old man says with great

06:59.400 --> 07:02.020
power comes great responsibility.

07:02.320 --> 07:10.040
So have to pay close attention to not messing up with the default WordPress square UK to do that we

07:10.050 --> 07:16.340
have to reset this custom query and restart the main query to ensure this.

07:16.340 --> 07:23.030
We are going to use a function call will be reset post-edit at the end of our modifieds loop right here

07:23.100 --> 07:29.800
after the end while be very careful because this is very important.

07:29.900 --> 07:33.450
Not using this function can lead to unexpected results.

07:33.470 --> 07:40.730
OK well so far we've learned to create our custom loop but it only fetches information from the database.

07:40.740 --> 07:45.790
But it still doesn't show anything on screen in the next lesson.

07:45.850 --> 07:49.770
You'll learn how to do that and showed everything you want on screen.

07:49.760 --> 07:52.260
OK so see you later.
