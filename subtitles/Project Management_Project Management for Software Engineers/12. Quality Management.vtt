WEBVTT
1
00:00:02.000 --> 00:00:05.750
The last of the eight categories is quality management.

2
00:00:05.750 --> 00:00:09.500
This is the activity to ensure that the project

3
00:00:09.500 --> 00:00:16.337
deliverables meet quality expectations, and let's just see how we'll do that.

4
00:00:16.337 --> 00:00:18.808
Quality can sound a little fuzzy.

5
00:00:18.808 --> 00:00:23.337
The other seven categories were a little more succinct and quantifiable.

6
00:00:23.337 --> 00:00:25.670
Quality is always one of those slippery,

7
00:00:25.670 --> 00:00:28.004
fuzzier things to get a handle on,

8
00:00:28.004 --> 00:00:33.937
but you'll find on the next slide that it is actually quite easy.

9
00:00:33.937 --> 00:00:42.337
But you'll find, on the following slides, that it's not really all that hard.

10
00:00:42.337 --> 00:00:47.337
I'll show you the secret.

11
00:00:47.337 --> 00:00:51.337
Now we want to do quality management to ensure that

12
00:00:51.337 --> 00:00:55.337
you deliver what the customer wants, when they want it,

13
00:00:55.337 --> 00:00:58.572
and within the project parameters.

14
00:00:58.572 --> 00:01:06.337
Now remember, the best quality is planned for and not inspected afterward.

15
00:01:06.337 --> 00:01:10.737
Many times in the old fashion quality processes you design and

16
00:01:10.737 --> 00:01:14.337
build and at the end you test for quality.

17
00:01:14.337 --> 00:01:20.559
And, as you can see, throughout these modules we talk a lot about planning,

18
00:01:20.559 --> 00:01:21.448
process, planning,

19
00:01:21.448 --> 00:01:25.194
and process so when we finally do begin the project and start

20
00:01:25.194 --> 00:01:28.051
moving forward we have all the elements in place to,

21
00:01:28.051 --> 00:01:31.670
in fact, ensure a quality outcome.

22
00:01:31.670 --> 00:01:40.712
Now let's take a look at some quality management processes on the next slide,

23
00:01:40.712 --> 00:01:46.337
and you're going to be a bit surprised of what I'm going to show you.

24
00:01:46.337 --> 00:01:53.337
Let's see what it is.

25
00:01:53.337 --> 00:01:53.749
Question,

26
00:01:53.749 --> 00:01:57.866
what are the processes and artifacts that your project will

27
00:01:57.866 --> 00:02:02.337
use to ensure the greatest quality of the deliverables and

28
00:02:02.337 --> 00:02:03.837
meet customer expectations?

29
00:02:03.837 --> 00:02:06.337
Okay, this is real simple.

30
00:02:06.337 --> 00:02:10.337
Just do what I've been telling you to do for this entire module.

31
00:02:10.337 --> 00:02:12.115
If you design, plan,

32
00:02:12.115 --> 00:02:15.226
and develop the project control processes we

33
00:02:15.226 --> 00:02:18.337
discussed as shown here on the slide,

34
00:02:18.337 --> 00:02:21.487
rest assured your project outcomes will have great quality.

35
00:02:21.487 --> 00:02:21.837
Okay,

36
00:02:21.837 --> 00:02:27.337
here are a few more tips in the next slide I'd like to

37
00:02:27.337 --> 00:02:31.337
share with you to improve quality.

38
00:02:31.337 --> 00:02:35.337
Here's a sample of some simple yet very powerful

39
00:02:35.337 --> 00:02:39.337
techniques that I use every day with my teams.

40
00:02:39.337 --> 00:02:45.337
Okay, the first one, checklists, checklists, checklists, checklists.

41
00:02:45.337 --> 00:02:47.051
I could have millions of these.

42
00:02:47.051 --> 00:02:47.908
I love them.

43
00:02:47.908 --> 00:02:49.337
They are very helpful, simple.

44
00:02:49.337 --> 00:02:52.037
Maybe they're only a page long even at that.

45
00:02:52.037 --> 00:02:56.337
For example, how about a desk side checklist for unit testing of a screen?

46
00:02:56.337 --> 00:02:59.670
How about a checklist of things to do before you

47
00:02:59.670 --> 00:03:02.337
check source code back into TFS, for example?

48
00:03:02.337 --> 00:03:05.284
How about a checklist to make sure you've tested everything in terms of you've

49
00:03:05.284 --> 00:03:07.937
gone through the specs and you've checked everything off?

50
00:03:07.937 --> 00:03:10.337
You can never have enough checklists.

51
00:03:10.337 --> 00:03:14.337
It's so easy to forget things, and so we use lots and lots of checklists.

52
00:03:14.337 --> 00:03:16.799
It greatly improves quality.

53
00:03:16.799 --> 00:03:18.029
Next, templates.

54
00:03:18.029 --> 00:03:22.758
I love templates, spreadsheet template, Microsoft Project template,

55
00:03:22.758 --> 00:03:24.021
MS Word template,

56
00:03:24.021 --> 00:03:29.074
so it's the document that has everything in it that you're usually

57
00:03:29.074 --> 00:03:32.491
used to using that you can reuse over and over.

58
00:03:32.491 --> 00:03:34.337
Maybe it's a new requirement request.

59
00:03:34.337 --> 00:03:37.194
Maybe it's a project definition document like we

60
00:03:37.194 --> 00:03:39.337
talked about earlier in this class.

61
00:03:39.337 --> 00:03:42.653
All sorts of templates can be reused.

62
00:03:42.653 --> 00:03:48.337
Next is reviews, process by which software engineers will do code reviews.

63
00:03:48.337 --> 00:03:50.737
So, do you have them once a week?

64
00:03:50.737 --> 00:03:54.337
Do you have them after they've put something back in source control?

65
00:03:54.337 --> 00:03:57.866
When do you have those reviews to look at stored

66
00:03:57.866 --> 00:04:00.337
procedures or code and things like that?

67
00:04:00.337 --> 00:04:01.278
Regular reviews are great,

68
00:04:01.278 --> 00:04:03.396
especially for new hires to make sure they're conforming

69
00:04:03.396 --> 00:04:05.051
to your standards and best practices,

70
00:04:05.051 --> 00:04:09.337
but even also the more senior people who sometimes might cut corners.

71
00:04:09.337 --> 00:04:12.115
You never know, so you always want to do reviews.

72
00:04:12.115 --> 00:04:15.278
Typically it's the, maybe the technical project manager doing them,

73
00:04:15.278 --> 00:04:22.337
but as a PM you may require these to happen so you can ensure quality.

74
00:04:22.337 --> 00:04:22.705
Standards.

75
00:04:22.705 --> 00:04:25.653
Is there a standard way to do SQL?

76
00:04:25.653 --> 00:04:28.969
Is there a standard way to do C#, JavaScript,

77
00:04:28.969 --> 00:04:31.670
etc.? Are there common tools and standards that

78
00:04:31.670 --> 00:04:33.337
your organization's going to use?

79
00:04:33.337 --> 00:04:38.587
Pick the smallest set of tools to maximize functionality.

80
00:04:38.587 --> 00:04:40.337
Also, enterprise architecture.

81
00:04:40.337 --> 00:04:44.337
For example, there are probably API standards in your enterprise architecture.

82
00:04:44.337 --> 00:04:47.337
Or how is it that you do certain things if it's a corporate environment?

83
00:04:47.337 --> 00:04:51.781
You're going to have architecture that cuts across multiple projects

84
00:04:51.781 --> 00:04:55.337
and multiple systems that are already in production.

85
00:04:55.337 --> 00:05:00.004
You need to be aware of that architecture and how will your

86
00:05:00.004 --> 00:05:02.337
project play within that overall landscape.

87
00:05:02.337 --> 00:05:03.226
Audits are great too.

88
00:05:03.226 --> 00:05:06.337
Audit might sound like a bad word, but they don't have to be bad.

89
00:05:06.337 --> 00:05:07.670
It can be good.

90
00:05:07.670 --> 00:05:09.337
We're driving for quality, remember.

91
00:05:09.337 --> 00:05:13.973
So maybe you need an independent audit or inspection of a product or a process,

92
00:05:13.973 --> 00:05:17.519
and how we do that sometimes is we might bring in an outside

93
00:05:17.519 --> 00:05:19.701
vendor or consultant to do a quick review.

94
00:05:19.701 --> 00:05:24.337
We might have them audit the way we do SQL or the way we write our code.

95
00:05:24.337 --> 00:05:26.051
So audits are good.

96
00:05:26.051 --> 00:05:27.337
They improve quality.

97
00:05:27.337 --> 00:05:30.337
They raise people to a higher level.

98
00:05:30.337 --> 00:05:30.920
Completion criteria.

99
00:05:30.920 --> 00:05:34.712
How do you know when you are done with a task or a

100
00:05:34.712 --> 00:05:37.337
project or a module or a chunk of work?

101
00:05:37.337 --> 00:05:42.337
And we have a little saying in our company, are you done, or are you done, done?

102
00:05:42.337 --> 00:05:45.337
Done usually means you think you're done programming or coding.

103
00:05:45.337 --> 00:05:49.126
Done, done means that you've tested it, you've gone through your checklists,

104
00:05:49.126 --> 00:05:53.470
it's in TFS, you've made a Q/A build, and it's perfect.

105
00:05:53.470 --> 00:05:59.337
So come up with the completion criteria is for your organization.

106
00:05:59.337 --> 00:06:00.337
Again, that's a checklist.

107
00:06:00.337 --> 00:06:00.837
Business standards.

108
00:06:00.837 --> 00:06:03.766
Are there any business standards you need to be compliant with,

109
00:06:03.766 --> 00:06:06.337
such as HIPAA, PCI or SOX?

110
00:06:06.337 --> 00:06:09.337
And there are many others as well.

111
00:06:09.337 --> 00:06:10.925
So if you need to be compliant with those,

112
00:06:10.925 --> 00:06:12.337
maybe you could come up with a checklist.

113
00:06:12.337 --> 00:06:15.414
What does it mean to be SOX compliant?

114
00:06:15.414 --> 00:06:17.337
Is your application SOX compliant?

115
00:06:17.337 --> 00:06:18.337
Is it HIPAA compliant?

116
00:06:18.337 --> 00:06:20.337
Is there a checklist you can go through?

117
00:06:20.337 --> 00:06:25.792
So you want checklists, templates, reviews,

118
00:06:25.792 --> 00:06:29.428
standards, maybe enterprise architecture,

119
00:06:29.428 --> 00:06:31.537
audits, completion criteria,

120
00:06:31.537 --> 00:06:36.937
and business standards all standardized so every developer or

121
00:06:36.937 --> 00:06:41.004
analyst can follow along on all the same templates,

122
00:06:41.004 --> 00:06:46.004
and all the PMs can follow along on all the same templates and checklists so

123
00:06:46.004 --> 00:06:48.969
you have a standard way of doing things in your organization.

124
00:06:48.969 --> 00:06:58.000
People understand what a review is or what a checklist is, and you can have much, much better quality.

