WEBVTT
1
00:00:01.500 --> 00:00:06.712
The next element of project control is the configuration management plan.

2
00:00:06.712 --> 00:00:12.712
This is controlling the versions and content of the project deliverables.

3
00:00:12.712 --> 00:00:15.712
The project deliverables are those features that'll be in

4
00:00:15.712 --> 00:00:17.379
different releases of your project,

5
00:00:17.379 --> 00:00:21.888
so we want to manage and control the different versions of release one,

6
00:00:21.888 --> 00:00:22.594
release two,

7
00:00:22.594 --> 00:00:27.912
and release three and what features or elements will be

8
00:00:27.912 --> 00:00:32.712
included in each of those releases.

9
00:00:32.712 --> 00:00:35.712
Let's see why we should do configuration management.

10
00:00:35.712 --> 00:00:40.490
First and foremost, it's used to manage application releases and bug fixes.

11
00:00:40.490 --> 00:00:44.490
An application release may contain one or more features

12
00:00:44.490 --> 00:00:46.712
of the application you're building.

13
00:00:46.712 --> 00:00:49.212
And while you're building your application you might receive

14
00:00:49.212 --> 00:00:52.712
some bug fixes that you must attend to while you're making

15
00:00:52.712 --> 00:00:54.212
your application; therefore,

16
00:00:54.212 --> 00:00:58.712
you'll need a configuration management system to manage this.

17
00:00:58.712 --> 00:01:00.291
Secondly, protect your source code.

18
00:01:00.291 --> 00:01:04.712
You don't want the source code to only be on the desktop of a

19
00:01:04.712 --> 00:01:07.462
programmer in case the hard drive fails or things like that,

20
00:01:07.462 --> 00:01:11.617
so you want all the source code to ultimately be up in one place,

21
00:01:11.617 --> 00:01:17.712
on a server for example, so it can be maintained and managed and won't be lost.

22
00:01:17.712 --> 00:01:21.477
So there are many configuration management tools in

23
00:01:21.477 --> 00:01:25.712
the market such as Microsoft TFS, Team Foundation Server,

24
00:01:25.712 --> 00:01:27.812
Subversion, GIT, and there are many others.

25
00:01:27.812 --> 00:01:30.212
And my recommendation to you is pick one,

26
00:01:30.212 --> 00:01:34.862
one of these or some others, and use it and follow it.

27
00:01:34.862 --> 00:01:40.712
Now typically you can create a branch that represents one or more features.

28
00:01:40.712 --> 00:01:45.512
A branch is really going to be a copy of all the software in your application,

29
00:01:45.512 --> 00:01:45.812
typically,

30
00:01:45.812 --> 00:01:50.379
but you're going to give is a name like release one or something like

31
00:01:50.379 --> 00:01:53.712
that so that you can implement that within that branch,

32
00:01:53.712 --> 00:01:58.418
implement that feature or features or implement a big fix

33
00:01:58.418 --> 00:02:01.712
or several bug fixes within that branch.

34
00:02:01.712 --> 00:02:06.664
So here are some sample names like release 1 or bug fix 12345.

35
00:02:06.664 --> 00:02:09.712
Those would be the names of the branch.

36
00:02:09.712 --> 00:02:14.234
Next when the branch is complete you can merge it back into the

37
00:02:14.234 --> 00:02:17.712
test branch or back into a larger chunk of code.

38
00:02:17.712 --> 00:02:21.006
And you may have heard these terms before,

39
00:02:21.006 --> 00:02:22.241
branching and merging,

40
00:02:22.241 --> 00:02:26.212
and all good software configuration tools support these features.

41
00:02:26.212 --> 00:02:33.712
You need these features, and you need a process in order to manage your software.

42
00:02:33.712 --> 00:02:38.888
Then from within these branches then you can make builds or

43
00:02:38.888 --> 00:02:41.712
compiles to create releases for testing,

44
00:02:41.712 --> 00:02:42.975
executables for testing.

45
00:02:42.975 --> 00:02:48.870
And a little tip here is these tools may not be very good at

46
00:02:48.870 --> 00:02:50.771
managing non-software deliverables for release.

47
00:02:50.771 --> 00:02:55.359
So maybe a release is coordinated with some hardware or a release is

48
00:02:55.359 --> 00:02:58.045
coordinated with some training and things like that,

49
00:02:58.045 --> 00:03:02.712
so you may need to have an adjunct or a parallel task list or

50
00:03:02.712 --> 00:03:09.830
schedule that goes along with this if you have some other

51
00:03:09.830 --> 00:03:13.712
non-software deliverables to release as well.

52
00:03:13.712 --> 00:03:17.087
So here's your configuration road map or suggested plan.

53
00:03:17.087 --> 00:03:17.462
First,

54
00:03:17.462 --> 00:03:21.866
your plan would include selecting the configuration management tool like

55
00:03:21.866 --> 00:03:26.712
we discussed before like TFS or Subversion or GitHub.

56
00:03:26.712 --> 00:03:30.012
Your plan would include hey I going to need to train

57
00:03:30.012 --> 00:03:31.812
all of my software development staff,

58
00:03:31.812 --> 00:03:35.212
I'm going to then institute a configuration management process,

59
00:03:35.212 --> 00:03:37.712
I'm going to follow your process.

60
00:03:37.712 --> 00:03:41.712
In other words, you may have naming conventions,

61
00:03:41.712 --> 00:03:44.712
release cycles, and things like that.

62
00:03:44.712 --> 00:03:48.212
And a tip if the change management process adds or

63
00:03:48.212 --> 00:03:49.962
removes items from the requirements,

64
00:03:49.962 --> 00:03:54.481
you want to be sure that you update your configuration planning,

65
00:03:54.481 --> 00:03:57.712
your versioning's and releases, to reflect that.

66
00:03:57.712 --> 00:03:58.625
In other words,

67
00:03:58.625 --> 00:04:03.495
you may want to remove a task from a branch or maybe even remove a branch

68
00:04:03.495 --> 00:04:07.823
from your plans so if upstream some requirements have changed you'll want

69
00:04:07.823 --> 00:04:14.512
to makes sure you reflect those changes down into your planning process

70
00:04:14.512 --> 00:04:18.712
for configuration management.

71
00:04:18.712 --> 00:04:23.712
Here's a simple configuration management process as an example to get you going.

72
00:04:23.712 --> 00:04:29.712
Each release will contain a list of features or deliverables, you know, things.

73
00:04:29.712 --> 00:04:33.418
We want you to use very simple,

74
00:04:33.418 --> 00:04:37.124
business oriented descriptions to describe those deliverables

75
00:04:37.124 --> 00:04:40.923
and then assign a branch name to each release.

76
00:04:40.923 --> 00:04:42.396
For example, Release 1.

77
00:04:42.396 --> 00:04:45.712
0 (Branch) it's going to cover the order screen,

78
00:04:45.712 --> 00:04:49.979
order summary report, shopping cart, and user manual.

79
00:04:49.979 --> 00:04:52.112
Very simple English-oriented features,

80
00:04:52.112 --> 00:04:56.238
easy for a stakeholder or a customer to read and understand.

81
00:04:56.238 --> 00:04:59.396
You may have a variety of other detailed tasks under

82
00:04:59.396 --> 00:05:03.712
the hood that relate to this branch, but they don't need to see those.

83
00:05:03.712 --> 00:05:04.490
Release 1.

84
00:05:04.490 --> 00:05:04.879
1.

85
00:05:04.879 --> 00:05:08.379
We're going to do accounts receivable, open accounts report,

86
00:05:08.379 --> 00:05:11.712
and five new computers will be ordered as well.

87
00:05:11.712 --> 00:05:12.712
In other words,

88
00:05:12.712 --> 00:05:16.045
maybe those five new computers won't be part of your

89
00:05:16.045 --> 00:05:17.045
software configuration management,

90
00:05:17.045 --> 00:05:20.712
but they need to be part of your overall release management.

91
00:05:20.712 --> 00:05:23.985
Sometimes we use big, huge stickies like this on a white board,

92
00:05:23.985 --> 00:05:28.477
lay it all out so it's very easy for people to walk by and see exactly

93
00:05:28.477 --> 00:05:36.000
what's going to be in each release as we go forward. It's a great, simple example.

