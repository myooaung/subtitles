WEBVTT
1
00:00:00.006 --> 00:00:02.004
- [Instructor] This is a new class I added

2
00:00:02.004 --> 00:00:04.004
called RatingController.

3
00:00:04.004 --> 00:00:06.003
It invokes tourRatingService

4
00:00:06.003 --> 00:00:08.007
to look up the tour ratings in the database,

5
00:00:08.007 --> 00:00:11.004
which are converted into rating DTOs.

6
00:00:11.004 --> 00:00:15.005
The API is exposed as /ratings.

7
00:00:15.005 --> 00:00:18.000
This is RatingControllerTest.

8
00:00:18.000 --> 00:00:19.009
A pretty cool feature of Spring Boot

9
00:00:19.009 --> 00:00:23.008
is the ability to invoke an application controller's API

10
00:00:23.008 --> 00:00:25.007
in a real servlet environment

11
00:00:25.007 --> 00:00:28.007
without invoking the dependencies.

12
00:00:28.007 --> 00:00:32.008
In this case, tourRatingService is the dependency.

13
00:00:32.008 --> 00:00:34.002
Unlike other unit tests

14
00:00:34.002 --> 00:00:37.000
that directly invoke Java methods,

15
00:00:37.000 --> 00:00:39.008
this will actually invoke the URL.

16
00:00:39.008 --> 00:00:41.002
But how does it do that?

17
00:00:41.002 --> 00:00:43.004
It's basically an integration test,

18
00:00:43.004 --> 00:00:46.007
which starts up the entire Spring Boot web context

19
00:00:46.007 --> 00:00:49.008
but the tourRatingService is mocked out.

20
00:00:49.008 --> 00:00:54.001
The API is invoked by a RESTful web service client.

21
00:00:54.001 --> 00:00:56.007
Let's look at the annotations here at the beginning.

22
00:00:56.007 --> 00:01:02.004
Something is new and it's webEnvironment equals RANDOM_PORT.

23
00:01:02.004 --> 00:01:04.004
Instead of port 8080,

24
00:01:04.004 --> 00:01:06.009
which may already be in use,

25
00:01:06.009 --> 00:01:09.009
at runtime, the port is randomly generated

26
00:01:09.009 --> 00:01:13.006
to avoid other testing conflicts.

27
00:01:13.006 --> 00:01:16.005
@MockBean forces the Spring context

28
00:01:16.005 --> 00:01:18.003
to auto wire RatingController

29
00:01:18.003 --> 00:01:21.002
with a mock version of TourRatingService

30
00:01:21.002 --> 00:01:24.005
instead of the real TourRatingService.

31
00:01:24.005 --> 00:01:27.001
tourRatingMock and tourMock

32
00:01:27.001 --> 00:01:31.003
are simple mock POJO classes.

33
00:01:31.003 --> 00:01:34.007
TestRestTemplate is our client.

34
00:01:34.007 --> 00:01:36.003
This is a convenient alternative

35
00:01:36.003 --> 00:01:39.003
to RestTemplate for consuming RESTful web services

36
00:01:39.003 --> 00:01:41.003
within unit tests.

37
00:01:41.003 --> 00:01:43.000
The randomly generated port

38
00:01:43.000 --> 00:01:49.000
and full URL path are injected into TestRestTemplate.

39
00:01:49.000 --> 00:01:52.002
You can learn more about it in the public methods

40
00:01:52.002 --> 00:01:55.000
in the Spring.io Java doc.

41
00:01:55.000 --> 00:01:56.009
So before running each test,

42
00:01:56.009 --> 00:02:01.000
we set up expectations of the mock objects.

43
00:02:01.000 --> 00:02:05.002
And now, let's look at getRatings tests.

44
00:02:05.002 --> 00:02:06.009
We have an expectation

45
00:02:06.009 --> 00:02:10.006
that tourRatingServiceMock.lookupAll ratings

46
00:02:10.006 --> 00:02:14.006
will return three mocked tour ratings.

47
00:02:14.006 --> 00:02:18.006
Then we invoke restTemplate.getForEntity

48
00:02:18.006 --> 00:02:21.006
to invoke the /ratings API.

49
00:02:21.006 --> 00:02:25.009
Finally, we check that we get back the expected rating DTOs

50
00:02:25.009 --> 00:02:29.007
and that the HTTP status is okay.

51
00:02:29.007 --> 00:02:31.006
I have a breakpoint set at the beginning

52
00:02:31.006 --> 00:02:34.006
of that method and at the end of the method

53
00:02:34.006 --> 00:02:36.004
once the assertions have proven true

54
00:02:36.004 --> 00:02:40.003
and there's also a breakpoint within RatingController.

55
00:02:40.003 --> 00:02:44.006
When I'm in debug, I cannot step into getForEntity

56
00:02:44.006 --> 00:02:46.001
because that is running

57
00:02:46.001 --> 00:02:49.004
on a different thread from RatingController.

58
00:02:49.004 --> 00:02:54.004
So let's start it up.

59
00:02:54.004 --> 00:02:55.007
And in the console,

60
00:02:55.007 --> 00:02:58.003
you'll see that within this test,

61
00:02:58.003 --> 00:03:01.008
it actually starts the Spring Boot application

62
00:03:01.008 --> 00:03:06.004
as if it was running solo.

63
00:03:06.004 --> 00:03:14.001
And that's why this test takes a little longer to run.

64
00:03:14.001 --> 00:03:18.009
So here we are at the first breakpoint.

65
00:03:18.009 --> 00:03:21.006
And we set up our expectation

66
00:03:21.006 --> 00:03:25.003
and we're going to resume running the application.

67
00:03:25.003 --> 00:03:26.006
And now we're back

68
00:03:26.006 --> 00:03:32.005
in the actual RatingController getAll method

69
00:03:32.005 --> 00:03:34.009
and then resume.

70
00:03:34.009 --> 00:03:36.002
And we have completed the test

71
00:03:36.002 --> 00:03:39.005
and the assertions are true.

72
00:03:39.005 --> 00:03:42.001
Now let's look at getOne,

73
00:03:42.001 --> 00:03:51.007
which invokes the /ratings/id API.

74
00:03:51.007 --> 00:03:53.003
So while that's starting up,

75
00:03:53.003 --> 00:03:55.003
we set the expectation

76
00:03:55.003 --> 00:03:59.003
for the tourRatingServiceMock.lookupRatingByid

77
00:03:59.003 --> 00:04:04.000
to return a optional of tourRatingMock

78
00:04:04.000 --> 00:04:07.005
when ratingId is passed in.

79
00:04:07.005 --> 00:04:11.002
Then we invoke the REST template getForEntity

80
00:04:11.002 --> 00:04:13.004
and then we check our assertions

81
00:04:13.004 --> 00:04:15.008
to make sure the HTTP status is okay

82
00:04:15.008 --> 00:04:18.005
and that the contents of the response body

83
00:04:18.005 --> 00:04:21.007
have the details about the customer comment and score.

84
00:04:21.007 --> 00:04:25.003
So we're at our first breakpoint.

85
00:04:25.003 --> 00:04:27.000
Resume.

86
00:04:27.000 --> 00:04:28.007
It switches over to RatingController

87
00:04:28.007 --> 00:04:29.009
to look up by ID,

88
00:04:29.009 --> 00:04:33.009
which is actually going to be the mock tourRatingService.

89
00:04:33.009 --> 00:04:34.008
And then continue

90
00:04:34.008 --> 00:04:36.006
and then we're back at the bottom of that

91
00:04:36.006 --> 00:04:38.006
and our assertion's passed.

92
00:04:38.006 --> 00:04:41.001
And finally, I have a negative test here.

93
00:04:41.001 --> 00:04:43.008
To make sure that the code behaves properly

94
00:04:43.008 --> 00:04:45.008
if a rating ID's pass in

95
00:04:45.008 --> 00:04:50.004
for a rating that doesn't exist.

96
00:04:50.004 --> 00:04:52.008
So on my expectation for when the

97
00:04:52.008 --> 00:04:56.001
tourRatingServiceMock.lookupRatingbyId is called,

98
00:04:56.001 --> 00:04:57.009
return an optional empty.

99
00:04:57.009 --> 00:04:59.008
Just like in the previous test,

100
00:04:59.008 --> 00:05:02.006
we invoke the REST template .getForEntity

101
00:05:02.006 --> 00:05:05.003
for RATINGS_URL/RATING_ID.

102
00:05:05.003 --> 00:05:08.008
This time, we will expect that httpStatus.NOT_FOUND

103
00:05:08.008 --> 00:05:11.007
is returned and that the response body

104
00:05:11.007 --> 00:05:14.009
will be a string with an error message.

105
00:05:14.009 --> 00:05:18.006
So here we are at the first breakpoint.

106
00:05:18.006 --> 00:05:20.005
Here we are in the controller,

107
00:05:20.005 --> 00:05:23.002
invoking the tourRatingService.

108
00:05:23.002 --> 00:05:24.008
Resume.

109
00:05:24.008 --> 00:05:28.007
Now we're down into our exception handler,

110
00:05:28.007 --> 00:05:30.002
which will generate the error message

111
00:05:30.002 --> 00:05:33.000
whenever a no such element exception was thrown.

112
00:05:33.000 --> 00:05:36.007
We're going to return httpStatus.NOT_FOUND.

113
00:05:36.007 --> 00:05:39.000
And we're back in the test

114
00:05:39.000 --> 00:05:40.006
and we have passed our assertions

115
00:05:40.006 --> 00:05:42.001
that the status is not found

116
00:05:42.001 --> 00:05:45.009
and the body has that string in it.

117
00:05:45.009 --> 00:05:47.002
In the exercise files,

118
00:05:47.002 --> 00:05:51.000
I also created a TourRatingControllerTest.

119
00:05:51.000 --> 00:05:52.000
As a challenge,

120
00:05:52.000 --> 00:05:54.006
I encourage you to step through those on your own

121
00:05:54.006 --> 00:05:58.000
to understand how to test HTTP POST,

122
00:05:58.000 --> 00:06:01.000
PATCH and PUT APIs.

