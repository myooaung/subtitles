WEBVTT
1
00:00:00.070 --> 00:00:02.020
- [Instructor] Logging is a valuable tool

2
00:00:02.020 --> 00:00:04.080
for monitoring, accessing and debugging

3
00:00:04.080 --> 00:00:07.020
an application at runtime.

4
00:00:07.020 --> 00:00:10.020
In Java, the important artifacts for logging

5
00:00:10.020 --> 00:00:14.070
are the logger, which is responsible for capturing events,

6
00:00:14.070 --> 00:00:16.090
appender records the events,

7
00:00:16.090 --> 00:00:19.090
and layouts, which are responsible for the appearance

8
00:00:19.090 --> 00:00:21.090
of the data in the log entry.

9
00:00:21.090 --> 00:00:24.040
There are several logging frameworks available,

10
00:00:24.040 --> 00:00:29.070
like java.util.logging, Log4j, and Logback.

11
00:00:29.070 --> 00:00:33.050
An abstraction layer, such as SLF4J,

12
00:00:33.050 --> 00:00:36.020
decouples an application from any of these frameworks

13
00:00:36.020 --> 00:00:38.010
which allow it to bind to a specific

14
00:00:38.010 --> 00:00:40.010
logging framework at runtime.

15
00:00:40.010 --> 00:00:42.070
Logging events in code is very easy.

16
00:00:42.070 --> 00:00:46.000
Each class instantiates a class scoped logger,

17
00:00:46.000 --> 00:00:48.040
then calls methods on it to record the events

18
00:00:48.040 --> 00:00:51.070
according to its imports or severity.

19
00:00:51.070 --> 00:00:54.020
Explorecali uses the Logback framework

20
00:00:54.020 --> 00:00:56.040
where there are four kinds of events,

21
00:00:56.040 --> 00:01:01.070
error, warning, info, debug and trace.

22
00:01:01.070 --> 00:01:04.050
Error is the highest and most severe event

23
00:01:04.050 --> 00:01:08.010
meaning something really bad and unexpected happened.

24
00:01:08.010 --> 00:01:10.030
Trace is the lowest level event

25
00:01:10.030 --> 00:01:11.080
which may only be of interest

26
00:01:11.080 --> 00:01:14.080
to a developer trying to follow the logic flow.

27
00:01:14.080 --> 00:01:18.030
Info and warning share the same level of severity.

28
00:01:18.030 --> 00:01:20.050
Let's look at an example.

29
00:01:20.050 --> 00:01:21.090
In TourRatingController,

30
00:01:21.090 --> 00:01:25.060
we have a static logger which is instantiated

31
00:01:25.060 --> 00:01:27.050
by the logger factory

32
00:01:27.050 --> 00:01:30.010
and in createManyTourRatings,

33
00:01:30.010 --> 00:01:32.060
let's move down to that one,

34
00:01:32.060 --> 00:01:36.010
an info level event is recorded upon entry

35
00:01:36.010 --> 00:01:39.010
along with the URL parameters.

36
00:01:39.010 --> 00:01:43.010
And if I drill down into rateMany,

37
00:01:43.010 --> 00:01:47.010
in rateMany we also record another info event

38
00:01:47.010 --> 00:01:49.010
when entering the new method.

39
00:01:49.010 --> 00:01:51.020
And then there is a debug level event

40
00:01:51.020 --> 00:01:55.010
for which each customer in the customer array is shown.

41
00:01:55.010 --> 00:01:56.070
Something also new in this method

42
00:01:56.070 --> 00:01:59.060
is throwing a NoSuchElementException

43
00:01:59.060 --> 00:02:02.090
when invalid tourId is passed in.

44
00:02:02.090 --> 00:02:07.080
Back in TourRatingController,

45
00:02:07.080 --> 00:02:11.060
the return 404 method catches the exception

46
00:02:11.060 --> 00:02:14.070
and records an error level event.

47
00:02:14.070 --> 00:02:17.070
This is pretty intuitive and easy to apply.

48
00:02:17.070 --> 00:02:21.030
Now let's configure the appenders and the layouts.

49
00:02:21.030 --> 00:02:25.020
This setup is done in a file called logback.xml

50
00:02:25.020 --> 00:02:27.040
and it's in the resources folder.

51
00:02:27.040 --> 00:02:37.060
So, let's create one.

52
00:02:37.060 --> 00:02:41.030
And it's an XML file, so it needs a header.

53
00:02:41.030 --> 00:02:44.020
And we're using UTF-8.

54
00:02:44.020 --> 00:02:49.090
Now we need a configuration tag.

55
00:02:49.090 --> 00:02:51.090
Configuring the appenders and the layouts

56
00:02:51.090 --> 00:02:53.080
can get a little tricky.

57
00:02:53.080 --> 00:02:55.090
Each destination has its own appender

58
00:02:55.090 --> 00:02:59.030
and each appender could format the messages differently

59
00:02:59.030 --> 00:03:01.020
and for appender sent to a file,

60
00:03:01.020 --> 00:03:02.040
there are extra parameters

61
00:03:02.040 --> 00:03:03.090
such as where to store the file

62
00:03:03.090 --> 00:03:07.010
and creating new files as the log file grows.

63
00:03:07.010 --> 00:03:10.000
Spring Boot provides a shortcut

64
00:03:10.000 --> 00:03:13.080
to this by applying the most commonly used configuration

65
00:03:13.080 --> 00:03:17.010
into external resource files.

66
00:03:17.010 --> 00:03:19.060
So, I'm actually going to go on a browser.

67
00:03:19.060 --> 00:03:23.040
In GitHub, we can see in the Spring Boot Project

68
00:03:23.040 --> 00:03:27.080
where down in the springboot/source/main/resources

69
00:03:27.080 --> 00:03:32.060
org/framework/boot/logging/logback/base.xml

70
00:03:32.060 --> 00:03:36.030
a template that can be applied to our own application

71
00:03:36.030 --> 00:03:38.070
without doing all this coding ourselves.

72
00:03:38.070 --> 00:03:40.050
So, I'm actually going to cheat a little bit

73
00:03:40.050 --> 00:03:43.020
and copy this line here

74
00:03:43.020 --> 00:03:45.020
so I don't have to retype it

75
00:03:45.020 --> 00:03:48.080
and back in our logback file,

76
00:03:48.080 --> 00:03:55.090
I'm going to include that file.

77
00:03:55.090 --> 00:04:00.080
And then put base.xml.

78
00:04:00.080 --> 00:04:02.030
This creates a file appender

79
00:04:02.030 --> 00:04:04.010
and a console appender

80
00:04:04.010 --> 00:04:05.080
each with their own layouts.

81
00:04:05.080 --> 00:04:18.050
Lastly, we configure the package and the log level.

82
00:04:18.050 --> 00:04:23.020
And we're gonna have our log level as DEBUG.

83
00:04:23.020 --> 00:04:25.070
It has to be in uppercase.

84
00:04:25.070 --> 00:04:28.070
In production systems, you typically put the log level

85
00:04:28.070 --> 00:04:31.050
at info but since this is still in development,

86
00:04:31.050 --> 00:04:33.040
we'll set it at debug.

87
00:04:33.040 --> 00:04:35.070
Any events recorded at the debug level

88
00:04:35.070 --> 00:04:37.090
or higher are going to be logged.

89
00:04:37.090 --> 00:04:41.020
A file file appender requires a destination

90
00:04:41.020 --> 00:04:42.090
and the name of the log file,

91
00:04:42.090 --> 00:04:47.020
so let's set that up in the applications.properties file.

92
00:04:47.020 --> 00:04:49.030
We're gonna set up where the path of our log

93
00:04:49.030 --> 00:04:54.080
is going to be located.

94
00:04:54.080 --> 00:05:00.080
So, that's the directory where our logs will be recorded.

95
00:05:00.080 --> 00:05:02.060
And then we're going to give the file name

96
00:05:02.060 --> 00:05:16.000
of what the logs will be called.

97
00:05:16.000 --> 00:05:17.050
Now I think we're ready,

98
00:05:17.050 --> 00:05:26.010
yes, we're ready to run the application.

99
00:05:26.010 --> 00:05:28.050
So, the application is started

100
00:05:28.050 --> 00:05:30.070
and let's go over to Postman

101
00:05:30.070 --> 00:05:33.060
and we're going to execute the post

102
00:05:33.060 --> 00:05:35.070
to createManyTourRatings

103
00:05:35.070 --> 00:05:42.020
for tour three with these customers.

104
00:05:42.020 --> 00:05:43.070
And that executed correctly

105
00:05:43.070 --> 00:05:46.030
and we'll see that on the console,

106
00:05:46.030 --> 00:05:48.070
let me raise this up a little bit.

107
00:05:48.070 --> 00:05:53.010
On the console, we have our messages formatted.

108
00:05:53.010 --> 00:05:54.070
We're creating each tour rating

109
00:05:54.070 --> 00:05:58.060
for customer four, five, six, seven, three and eight

110
00:05:58.060 --> 00:06:06.080
and there is a logs folder now

111
00:06:06.080 --> 00:06:08.060
that has the same information formatted

112
00:06:08.060 --> 00:06:09.050
a little bit differently

113
00:06:09.050 --> 00:06:13.040
but that's specific for file logs.

114
00:06:13.040 --> 00:06:16.000
Now let's run Postman again

115
00:06:16.000 --> 00:06:17.040
and as we know ahead of time,

116
00:06:17.040 --> 00:06:19.040
this is going to actually fail

117
00:06:19.040 --> 00:06:23.040
because it's going to cause a database integrity error

118
00:06:23.040 --> 00:06:26.040
and we'll go look in the logs

119
00:06:26.040 --> 00:06:28.010
and there's our logging error.

120
00:06:28.010 --> 00:06:31.010
I've logged a lot more events in the exercise files

121
00:06:31.010 --> 00:06:33.020
than I wanted to demonstrate here.

122
00:06:33.020 --> 00:06:35.070
Logging should always be present in an application

123
00:06:35.070 --> 00:06:40.000
and it's easy to add thanks to Spring Boot defaults.

