WEBVTT
1
00:00:00.050 --> 00:00:02.080
- [Mary] Welcome to the Spring Security chapter.

2
00:00:02.080 --> 00:00:05.020
Spring Security is a framework

3
00:00:05.020 --> 00:00:06.050
that developers have used for many years

4
00:00:06.050 --> 00:00:11.090
to protect resources from the bad guys and the stupid guys.

5
00:00:11.090 --> 00:00:14.090
Honestly, it's enormous, the depth and breadth of which

6
00:00:14.090 --> 00:00:16.090
we can't cover in one chapter.

7
00:00:16.090 --> 00:00:18.070
But there are common abstractions

8
00:00:18.070 --> 00:00:20.010
that spring security follows

9
00:00:20.010 --> 00:00:23.030
no matter the type of implementation.

10
00:00:23.030 --> 00:00:25.020
We will demonstrate a simple example

11
00:00:25.020 --> 00:00:29.010
of security APIs with JSON webtokens.

12
00:00:29.010 --> 00:00:32.040
For an in depth explanation of spring security,

13
00:00:32.040 --> 00:00:35.000
I encourage you to watch Spring, Spring Security

14
00:00:35.000 --> 00:00:37.050
in the library which will fill in the gaps.

15
00:00:37.050 --> 00:00:40.010
Let's imagine the reception that we would receive

16
00:00:40.010 --> 00:00:42.050
if we wish to enter the White House.

17
00:00:42.050 --> 00:00:45.010
Do you think that the guard would say, come on in?

18
00:00:45.010 --> 00:00:48.030
I don't think so, it would probably go something like this,

19
00:00:48.030 --> 00:00:50.060
stop, who are you!

20
00:00:50.060 --> 00:00:52.070
Identification please.

21
00:00:52.070 --> 00:00:54.040
Who invited you?

22
00:00:54.040 --> 00:00:56.050
What's the reason for entering?

23
00:00:56.050 --> 00:01:00.010
After checking a list, the guard would either provide

24
00:01:00.010 --> 00:01:03.060
a badge, denoting the area and length of accessibility,

25
00:01:03.060 --> 00:01:05.090
or deny us access altogether.

26
00:01:05.090 --> 00:01:07.040
The guard's job is two-fold,

27
00:01:07.040 --> 00:01:11.010
verify our identity and control our access.

28
00:01:11.010 --> 00:01:13.010
Spring security's job is the same,

29
00:01:13.010 --> 00:01:17.040
but uses fancier words, authentication to verify identity.

30
00:01:17.040 --> 00:01:19.070
So the questions would be mapped to,

31
00:01:19.070 --> 00:01:24.030
who are you, identification please, who invited you,

32
00:01:24.030 --> 00:01:29.020
and authorization to control access

33
00:01:29.020 --> 00:01:31.090
would be what is your reason for entering?

34
00:01:31.090 --> 00:01:34.030
And checks a visitors list,

35
00:01:34.030 --> 00:01:38.040
and permit entry with special badge or deny entry.

36
00:01:38.040 --> 00:01:40.060
Let's start with authentication.

37
00:01:40.060 --> 00:01:44.030
We need to make a guest list in our database.

38
00:01:44.030 --> 00:01:49.040
So in the schema.sql and data.sql I've made some changes,

39
00:01:49.040 --> 00:01:53.070
in schema.sql I've created our guest list table

40
00:01:53.070 --> 00:01:57.000
called security_user, columns in the table

41
00:01:57.000 --> 00:02:00.090
are a generated ID, username, password,

42
00:02:00.090 --> 00:02:06.000
first_name and last_name, now let's see who our guests are

43
00:02:06.000 --> 00:02:10.040
in data.sql, we have a user called administrator

44
00:02:10.040 --> 00:02:14.070
with a username admin and a Jane Doe's username

45
00:02:14.070 --> 00:02:20.020
is csr_jane, Mark Smith is csr_mark,

46
00:02:20.020 --> 00:02:23.030
and Walter Adams is wally.

47
00:02:23.030 --> 00:02:26.010
The password column is populated with a hash

48
00:02:26.010 --> 00:02:29.050
to the string letmein, in a later video

49
00:02:29.050 --> 00:02:33.020
I'll show you how that is generated with the crypto tool.

50
00:02:33.020 --> 00:02:35.030
Now that we have our list of guests,

51
00:02:35.030 --> 00:02:39.010
let's peek into authorization, role based security is a way

52
00:02:39.010 --> 00:02:41.020
to separate users from an application

53
00:02:41.020 --> 00:02:43.080
instead of associating application services

54
00:02:43.080 --> 00:02:47.080
to a user, we associate application services to a role.

55
00:02:47.080 --> 00:02:54.040
So I've created a security role table

56
00:02:54.040 --> 00:03:00.060
in schema.sql, and it has an ID, a role name,

57
00:03:00.060 --> 00:03:05.000
and a description, now let's look at the data.sql.

58
00:03:05.000 --> 00:03:07.020
There I have introduced two types of roles

59
00:03:07.020 --> 00:03:10.030
in the security role table, administrator

60
00:03:10.030 --> 00:03:12.090
and customer service representative.

61
00:03:12.090 --> 00:03:14.040
A customer service representative

62
00:03:14.040 --> 00:03:16.040
for the Explore California Travel Agency

63
00:03:16.040 --> 00:03:19.000
records the feedback from the travelers.

64
00:03:19.000 --> 00:03:21.030
Before the API to rate tours was open,

65
00:03:21.030 --> 00:03:23.000
but we're going to restrict that API

66
00:03:23.000 --> 00:03:25.020
to customer service representatives.

67
00:03:25.020 --> 00:03:26.060
An administrator will be able

68
00:03:26.060 --> 00:03:29.020
to add customer service representative users

69
00:03:29.020 --> 00:03:31.020
to the security user table.

70
00:03:31.020 --> 00:03:34.020
Later we will associate roles to services.

71
00:03:34.020 --> 00:03:37.080
First let's associate roles to the users.

72
00:03:37.080 --> 00:03:42.030
In schema.sql we have a user role table

73
00:03:42.030 --> 00:03:47.000
and in user role table we map the user ID to a role ID

74
00:03:47.000 --> 00:03:49.070
and then we have a foreign key references back

75
00:03:49.070 --> 00:03:53.020
to the security_user table and the security_role table

76
00:03:53.020 --> 00:03:56.080
and in data.sql we see that the administrator user

77
00:03:56.080 --> 00:03:59.090
has the admin role, Jane, Mark,

78
00:03:59.090 --> 00:04:03.000
and Wally have the customer service representative role

79
00:04:03.000 --> 00:04:05.080
and Wally also has the admin role.

80
00:04:05.080 --> 00:04:08.060
Because a user can have many roles,

81
00:04:08.060 --> 00:04:12.070
so therefore let's go over to our JPA entities

82
00:04:12.070 --> 00:04:17.030
that map to these tables, we have a user class entity

83
00:04:17.030 --> 00:04:20.040
that's mapped to the security user table.

84
00:04:20.040 --> 00:04:23.060
We see the ID, username, password, first name,

85
00:04:23.060 --> 00:04:29.030
last name mappings, I added a @JsonIgnore annotation

86
00:04:29.030 --> 00:04:31.060
to the password so that the hash of the password

87
00:04:31.060 --> 00:04:34.000
will not be exposed to the API.

88
00:04:34.000 --> 00:04:37.040
Then we can leverage the @ManyToMany

89
00:04:37.040 --> 00:04:40.060
and JoinTable annotations to map

90
00:04:40.060 --> 00:04:43.010
a list of roles to the user.

91
00:04:43.010 --> 00:04:48.030
Now let's look at Role.Java which is an entity

92
00:04:48.030 --> 00:04:51.050
and it's associated with the security role table

93
00:04:51.050 --> 00:04:53.090
and here we have the role name,

94
00:04:53.090 --> 00:04:57.030
and a description and a generated ID.

95
00:04:57.030 --> 00:05:01.010
Now, finally let's look at the user repository

96
00:05:01.010 --> 00:05:03.050
which is a JPA repository.

97
00:05:03.050 --> 00:05:08.010
I have temporarily exported the repository as an API

98
00:05:08.010 --> 00:05:11.070
to Spring Data REST for demonstration purposes.

99
00:05:11.070 --> 00:05:14.010
I will remove that in a later video.

100
00:05:14.010 --> 00:05:20.070
So let's run the application and see our domain model.

101
00:05:20.070 --> 00:05:24.030
So I've launched a browser and I am referencing

102
00:05:24.030 --> 00:05:30.080
the /users API, and with that we see our list of users

103
00:05:30.080 --> 00:05:35.090
and the roles that are associated with that user.

104
00:05:35.090 --> 00:05:38.090
We've done all this setup, but nothing with Spring Security

105
00:05:38.090 --> 00:05:41.090
it's time we add that dependency to the pom.

106
00:05:41.090 --> 00:05:47.000
So in my pom file, I have commented out here

107
00:05:47.000 --> 00:05:51.020
the Spring Boot Starter Security dependency

108
00:05:51.020 --> 00:05:59.040
let me un-comment that, stop the application.

109
00:05:59.040 --> 00:06:01.000
Make sure you've rebuilt it because

110
00:06:01.000 --> 00:06:04.000
it has to load a new dependency

111
00:06:04.000 --> 00:06:09.070
and let's run the application.

112
00:06:09.070 --> 00:06:11.060
Our application has started,

113
00:06:11.060 --> 00:06:15.050
so let's try to access that users API again.

114
00:06:15.050 --> 00:06:16.050
What happened?

115
00:06:16.050 --> 00:06:20.000
Just by adding that pom, our browser actually

116
00:06:20.000 --> 00:06:25.020
redirected us to a Login with a Username and Password page.

117
00:06:25.020 --> 00:06:27.070
So what's happening here is, just by adding

118
00:06:27.070 --> 00:06:30.040
the Spring Security dependency, Spring Security

119
00:06:30.040 --> 00:06:32.040
makes a couple assumptions.

120
00:06:32.040 --> 00:06:35.000
First of all it assumes that all

121
00:06:35.000 --> 00:06:39.080
of our APIs must be forbidden, and protected,

122
00:06:39.080 --> 00:06:43.040
and second it assumes that the authentication scheme

123
00:06:43.040 --> 00:06:45.040
will be form-based authentication

124
00:06:45.040 --> 00:06:48.080
and each user will have a Servlet session.

125
00:06:48.080 --> 00:06:51.050
In the next video, we will override these defaults

126
00:06:51.050 --> 00:06:54.000
and configure Spring Security for our needs.

