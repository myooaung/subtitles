WEBVTT
1
00:00:00.050 --> 00:00:03.070
- [Instructor] Schema.SQL and data.SQL

2
00:00:03.070 --> 00:00:06.030
are good for initialization.

3
00:00:06.030 --> 00:00:09.070
But, real world databases change over time.

4
00:00:09.070 --> 00:00:13.010
Flyway is a database migration tool that controls

5
00:00:13.010 --> 00:00:16.050
triggering of version database migration scripts.

6
00:00:16.050 --> 00:00:18.060
So, let's add it to our application.

7
00:00:18.060 --> 00:00:22.050
So, I have it already in the pom.xml.

8
00:00:22.050 --> 00:00:26.010
There's the dependency, org.flywaydd.

9
00:00:26.010 --> 00:00:29.090
With the artifactID, flyway-core.

10
00:00:29.090 --> 00:00:34.020
And if you look at the resources folder,

11
00:00:34.020 --> 00:00:38.030
the data.SQL and schema.SQL are gone.

12
00:00:38.030 --> 00:00:43.090
And there's a new folder called db/migration.

13
00:00:43.090 --> 00:00:49.020
And what these files are, they are scripts that are taken

14
00:00:49.020 --> 00:00:52.010
from the schema and data files and they've been

15
00:00:52.010 --> 00:00:58.000
broken up into a series of versioned db scripts.

16
00:00:58.000 --> 00:01:00.020
And the order is defined by the version

17
00:01:00.020 --> 00:01:02.070
number prefix of the file.

18
00:01:02.070 --> 00:01:05.050
Flyway will know if a script is already been run

19
00:01:05.050 --> 00:01:06.060
on the database.

20
00:01:06.060 --> 00:01:07.080
So, there is no need

21
00:01:07.080 --> 00:01:10.070
for the spring.datasource.continueonerror

22
00:01:10.070 --> 00:01:14.010
setting in applications.property.

23
00:01:14.010 --> 00:01:17.030
So before we try it, we wanna make sure that the database

24
00:01:17.030 --> 00:01:22.090
container does not already exist and remove it if it is.

25
00:01:22.090 --> 00:01:25.080
So, the containers not running.

26
00:01:25.080 --> 00:01:37.080
So, let's grab the command line to actually launch it.

27
00:01:37.080 --> 00:01:40.040
And then we want

28
00:01:40.040 --> 00:01:43.070
to start the mysql client.

29
00:01:43.070 --> 00:01:53.010
To actually interact with that.

30
00:01:53.010 --> 00:01:59.090
So, we'll change to our explore Kali database.

31
00:01:59.090 --> 00:02:01.080
We don't have any tables set up yet,

32
00:02:01.080 --> 00:02:06.020
so let's run our application.

33
00:02:06.020 --> 00:02:11.000
Make sure you rebuild, get all the dependencies.

34
00:02:11.000 --> 00:02:17.030
Back to the mysql client.

35
00:02:17.030 --> 00:02:22.080
Now we see we have a new table called Flyway schema history.

36
00:02:22.080 --> 00:02:37.020
Let's look and see what's inside that table.

37
00:02:37.020 --> 00:02:41.000
And we see that all six migration scripts,

38
00:02:41.000 --> 00:02:44.040
each one creating a new version of the database have run.

39
00:02:44.040 --> 00:02:48.090
So, after running add users, the version of the database

40
00:02:48.090 --> 00:02:54.070
is 2.2 and we would relaunch this application.

41
00:02:54.070 --> 00:02:56.060
Only the scripts with the prefix

42
00:02:56.060 --> 00:02:59.080
later than 2.2 would run.

43
00:02:59.080 --> 00:03:01.080
So, let's actually make sure we're all good

44
00:03:01.080 --> 00:03:07.030
and see if we have our tours.

45
00:03:07.030 --> 00:03:08.090
Yep, just 30 rows.

46
00:03:08.090 --> 00:03:11.090
So, as you're data model evolves over time,

47
00:03:11.090 --> 00:03:14.020
use tools like Flyway Migrate

48
00:03:14.020 --> 00:03:16.000
to manage triggering of scripts.

