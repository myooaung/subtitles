WEBVTT
1
00:00:00.050 --> 00:00:02.040
- [Instructor] Spring profiles provide a way

2
00:00:02.040 --> 00:00:05.050
to segregate parts of your application configuration

3
00:00:05.050 --> 00:00:08.050
and make it available to only certain environments.

4
00:00:08.050 --> 00:00:11.010
We will learn how to define Spring profiles

5
00:00:11.010 --> 00:00:14.060
with properties files and enable them at runtime.

6
00:00:14.060 --> 00:00:16.020
So, I'd like to have a profile

7
00:00:16.020 --> 00:00:19.000
that uses H2 in memory database

8
00:00:19.000 --> 00:00:21.090
and another that interacts with MySQL.

9
00:00:21.090 --> 00:00:23.060
To do this with properties files,

10
00:00:23.060 --> 00:00:28.020
I created another file called application-mysql.properties

11
00:00:28.020 --> 00:00:30.020
in the resources folder,

12
00:00:30.020 --> 00:00:34.050
so this would be the profile called MySQL.

13
00:00:34.050 --> 00:00:36.040
And it contains the settings

14
00:00:36.040 --> 00:00:38.050
that are just for interacting

15
00:00:38.050 --> 00:00:41.070
with the MySQL database container.

16
00:00:41.070 --> 00:00:45.000
Back in application.properties,

17
00:00:45.000 --> 00:00:47.060
we need to set an active profile

18
00:00:47.060 --> 00:00:52.080
and so, the spring.profiles.active set to default

19
00:00:52.080 --> 00:00:56.040
means that whenever the application starts up,

20
00:00:56.040 --> 00:00:59.030
only these properties will be set.

21
00:00:59.030 --> 00:01:01.060
So, that is set at runtime

22
00:01:01.060 --> 00:01:04.010
either as a JVM parameter,

23
00:01:04.010 --> 00:01:06.030
an operating system environment

24
00:01:06.030 --> 00:01:08.060
or even a cloud configuration in a server

25
00:01:08.060 --> 00:01:10.040
or this way we have it just

26
00:01:10.040 --> 00:01:12.080
in the application.properties file.

27
00:01:12.080 --> 00:01:16.000
So, before running the application in default mode,

28
00:01:16.000 --> 00:01:23.010
let's make sure that the ec-mysql container is not running.

29
00:01:23.010 --> 00:01:23.090
Oh, it is running,

30
00:01:23.090 --> 00:01:40.070
so we need to stop the container and remove it.

31
00:01:40.070 --> 00:01:42.080
And so, it's no longer there.

32
00:01:42.080 --> 00:01:51.080
Now let's launch the application using the H2 Database.

33
00:01:51.080 --> 00:01:55.020
And we see that it does.

34
00:01:55.020 --> 00:01:57.000
Now let's change this

35
00:01:57.000 --> 00:02:03.090
in the application.properties file to mysql,

36
00:02:03.090 --> 00:02:06.060
so we'll stop this.

37
00:02:06.060 --> 00:02:08.050
The next time this runs,

38
00:02:08.050 --> 00:02:11.010
it will load the application.properties file

39
00:02:11.010 --> 00:02:12.090
and then afterwards we'll load

40
00:02:12.090 --> 00:02:15.060
the application-mysql properties.

41
00:02:15.060 --> 00:02:17.070
If there are any identical properties,

42
00:02:17.070 --> 00:02:26.020
the MySQL properties will override them.

43
00:02:26.020 --> 00:02:28.000
And it does not run

44
00:02:28.000 --> 00:02:32.030
because it tries to connect to the MySQL container

45
00:02:32.030 --> 00:02:34.090
and that container is not running.

46
00:02:34.090 --> 00:02:38.040
So, let's start that container again.

47
00:02:38.040 --> 00:02:40.030
We'll go to our README file

48
00:02:40.030 --> 00:02:51.070
to help us get that long command line.

49
00:02:51.070 --> 00:02:54.050
Wait for that for a moment to start up.

50
00:02:54.050 --> 00:02:56.080
There it is.

51
00:02:56.080 --> 00:03:00.030
So, let's start the application again

52
00:03:00.030 --> 00:03:02.060
and it connects to the database

53
00:03:02.060 --> 00:03:06.000
because it's now using these data source settings.

54
00:03:06.000 --> 00:03:08.080
So, this works but we don't wanna have to edit

55
00:03:08.080 --> 00:03:10.090
the spring.profiles.active

56
00:03:10.090 --> 00:03:13.090
in application.properties every time.

57
00:03:13.090 --> 00:03:16.050
We can override the property file setting

58
00:03:16.050 --> 00:03:19.080
with a system property at the command line.

59
00:03:19.080 --> 00:03:24.090
So, before we do that, let's set this back to default,

60
00:03:24.090 --> 00:03:26.050
and stop the application

61
00:03:26.050 --> 00:03:29.050
and then we're actually going to run the application

62
00:03:29.050 --> 00:03:31.070
at the command line with Maven.

63
00:03:31.070 --> 00:03:35.000
Let's make sure that Maven is installed correctly.

64
00:03:35.000 --> 00:03:39.010
So mvn -version,

65
00:03:39.010 --> 00:03:41.040
so it shows the version I'm running of Maven,

66
00:03:41.040 --> 00:03:43.040
if this is not running properly for you,

67
00:03:43.040 --> 00:03:46.080
refer to the installation instructions.

68
00:03:46.080 --> 00:03:50.010
So, the Spring Boot Maven plugin

69
00:03:50.010 --> 00:03:54.000
provides a task called spring-boot:run

70
00:03:54.000 --> 00:03:58.020
and we will use that to set a system property.

71
00:03:58.020 --> 00:04:09.020
Now let's set the spring.profiles.active.

72
00:04:09.020 --> 00:04:11.030
And then we're going to make sure

73
00:04:11.030 --> 00:04:14.040
that Maven doesn't try to run the unit tests,

74
00:04:14.040 --> 00:04:22.020
so we'll say skipTests equals true.

75
00:04:22.020 --> 00:04:24.060
And the application starts up.

76
00:04:24.060 --> 00:04:26.090
If you prefer, you could also build the jar

77
00:04:26.090 --> 00:04:30.000
with Maven and launch the jar with a JVM.

78
00:04:30.000 --> 00:04:31.040
The system property setting

79
00:04:31.040 --> 00:04:36.060
of -d springBoot.profiles.active equals mysql is the same

80
00:04:36.060 --> 00:04:41.010
and all of these are described in the README file

81
00:04:41.010 --> 00:04:45.000
in the Startup with Profile Settings section.

