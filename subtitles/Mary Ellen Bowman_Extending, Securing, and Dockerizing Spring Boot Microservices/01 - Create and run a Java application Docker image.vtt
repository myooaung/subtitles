WEBVTT
1
00:00:00.050 --> 00:00:02.020
- [Instructor] Now we're going to Dockerize

2
00:00:02.020 --> 00:00:05.030
the Explore California application itself.

3
00:00:05.030 --> 00:00:07.010
We will create a Docker image

4
00:00:07.010 --> 00:00:10.000
that includes a Linux operating system,

5
00:00:10.000 --> 00:00:12.040
Java JDK version 8

6
00:00:12.040 --> 00:00:14.080
and the explorecali jar.

7
00:00:14.080 --> 00:00:17.050
In this video, we will run the default profile

8
00:00:17.050 --> 00:00:19.040
which interacts with the H2 Database

9
00:00:19.040 --> 00:00:23.060
so a container of this image can run completely standalone.

10
00:00:23.060 --> 00:00:25.030
First, let's make sure that our jar

11
00:00:25.030 --> 00:00:36.000
for the explorecali application has been built.

12
00:00:36.000 --> 00:00:38.010
So, that built our jar, let's actually make sure

13
00:00:38.010 --> 00:00:41.070
in the target folder.

14
00:00:41.070 --> 00:00:43.080
And that's our jar there

15
00:00:43.080 --> 00:00:48.010
and now we have a Docker file

16
00:00:48.010 --> 00:00:51.000
that was created in the folder.

17
00:00:51.000 --> 00:00:56.050
Let's look at that.

18
00:00:56.050 --> 00:00:58.040
So, this is sort of the configuration

19
00:00:58.040 --> 00:01:01.010
for the setting up of the Docker image,

20
00:01:01.010 --> 00:01:02.070
so the starting point

21
00:01:02.070 --> 00:01:05.010
is we already have a Linux operating system.

22
00:01:05.010 --> 00:01:08.020
From that we're gonna use the Java 8 image,

23
00:01:08.020 --> 00:01:10.050
our WORKDIR is slash,

24
00:01:10.050 --> 00:01:13.040
then we're going to add our jar

25
00:01:13.040 --> 00:01:15.050
to the image

26
00:01:15.050 --> 00:01:18.070
and we're going to expose port 8080

27
00:01:18.070 --> 00:01:20.080
and that entry point is sort of the equivalent

28
00:01:20.080 --> 00:01:21.080
of a command line,

29
00:01:21.080 --> 00:01:25.000
so we're actually going to run Java

30
00:01:25.000 --> 00:01:26.080
with the option -jar

31
00:01:26.080 --> 00:01:30.030
and then provide the actual jar file name

32
00:01:30.030 --> 00:01:33.040
which is now within the image.

33
00:01:33.040 --> 00:01:36.010
So, now we're going to invoke another Docker command

34
00:01:36.010 --> 00:01:46.060
to create the image.

35
00:01:46.060 --> 00:01:50.090
So, it's downloading the Java 8 image.

36
00:01:50.090 --> 00:01:52.020
It says it's successful.

37
00:01:52.020 --> 00:01:56.080
Let's actually take a look at the images.

38
00:01:56.080 --> 00:02:00.000
And we see we now have an explorecali image

39
00:02:00.000 --> 00:02:02.010
with the latest tag.

40
00:02:02.010 --> 00:02:06.020
Lastly, let's run a container called ec-app

41
00:02:06.020 --> 00:02:09.080
off of the explorecali image

42
00:02:09.080 --> 00:02:15.070
and we'll publish port 8080 externally as the default port.

43
00:02:15.070 --> 00:02:19.010
So, ec-app it will be the name of our container,

44
00:02:19.010 --> 00:02:25.020
we're going to publish port 8080

45
00:02:25.020 --> 00:02:28.080
to localhost, the 8080 port

46
00:02:28.080 --> 00:02:32.060
within the container.

47
00:02:32.060 --> 00:02:42.020
And then we're going to use the explorecali image.

48
00:02:42.020 --> 00:02:48.030
Let's see if the container's there.

49
00:02:48.030 --> 00:02:50.000
It looks like it's there.

50
00:02:50.000 --> 00:02:52.050
The status is not saying that it exited.

51
00:02:52.050 --> 00:02:53.090
We can actually look at the log

52
00:02:53.090 --> 00:03:01.070
of that as it started up.

53
00:03:01.070 --> 00:03:03.040
And that looks familiar, that seems like the logs

54
00:03:03.040 --> 00:03:05.020
that we've seen at startup.

55
00:03:05.020 --> 00:03:06.080
If there was a problem,

56
00:03:06.080 --> 00:03:08.090
the status would be exited

57
00:03:08.090 --> 00:03:10.060
and you wouldn't even be able to see the logs

58
00:03:10.060 --> 00:03:12.030
because the image would not be running.

59
00:03:12.030 --> 00:03:14.090
If you do have one that's stopped

60
00:03:14.090 --> 00:03:15.080
or exited, not running,

61
00:03:15.080 --> 00:03:19.030
you still have the ability to inspect the image

62
00:03:19.030 --> 00:03:25.090
which gives you details.

63
00:03:25.090 --> 00:03:27.090
So, this is general information about the image,

64
00:03:27.090 --> 00:03:29.070
lots of details, like for example,

65
00:03:29.070 --> 00:03:36.040
if you wanted to see what was actually run,

66
00:03:36.040 --> 00:03:38.010
so if there was a typo here,

67
00:03:38.010 --> 00:03:39.070
you put the wrong jar file name,

68
00:03:39.070 --> 00:03:43.060
then you'd find out by running inspect.

69
00:03:43.060 --> 00:03:47.020
And finally, let's actually try to invoke the tours API

70
00:03:47.020 --> 00:03:53.080
which is now running as a Docker container.

71
00:03:53.080 --> 00:03:55.020
And there's our tours.

72
00:03:55.020 --> 00:03:57.090
Awesome, we've Dockerized our first application.

73
00:03:57.090 --> 00:03:59.080
Let's clean up after ourselves

74
00:03:59.080 --> 00:04:02.000
and stop and remove the image.

