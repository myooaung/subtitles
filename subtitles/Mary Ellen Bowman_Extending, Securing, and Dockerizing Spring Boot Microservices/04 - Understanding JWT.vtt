WEBVTT
1
00:00:00.050 --> 00:00:02.040
- [Instructor] We've seen how to authenticate a user

2
00:00:02.040 --> 00:00:04.020
with Spring Security

3
00:00:04.020 --> 00:00:06.050
and we know that we want to restrict certain APIs

4
00:00:06.050 --> 00:00:08.070
to users with certain roles,

5
00:00:08.070 --> 00:00:11.070
but we also know that RESTful APIs are stateless,

6
00:00:11.070 --> 00:00:15.060
meaning that they have no awareness between invocations.

7
00:00:15.060 --> 00:00:17.060
So, does that mean that clients must send

8
00:00:17.060 --> 00:00:21.030
the username and password to every restricted API?

9
00:00:21.030 --> 00:00:23.000
Thankfully no.

10
00:00:23.000 --> 00:00:26.000
There are other ways to have the concept of accession

11
00:00:26.000 --> 00:00:27.040
in RESTful APIs.

12
00:00:27.040 --> 00:00:31.010
A common method is to invoke an API to authenticate,

13
00:00:31.010 --> 00:00:32.090
like our sign in API,

14
00:00:32.090 --> 00:00:34.010
and then return to the client

15
00:00:34.010 --> 00:00:37.010
a special encoded string called a token.

16
00:00:37.010 --> 00:00:39.030
Then, subsequent client requests

17
00:00:39.030 --> 00:00:42.020
add the token to the HTTP header.

18
00:00:42.020 --> 00:00:45.010
OAuth is a frequently used implementation

19
00:00:45.010 --> 00:00:47.040
of this type of methodology.

20
00:00:47.040 --> 00:00:48.090
But since that's already presented

21
00:00:48.090 --> 00:00:52.000
in Spring:Spring Security course in the library,

22
00:00:52.000 --> 00:00:54.060
this application will use JSON Web Tokens,

23
00:00:54.060 --> 00:00:57.020
also known as JWT or jot.

24
00:00:57.020 --> 00:00:59.070
JSON web tokens are encrypted data packets

25
00:00:59.070 --> 00:01:01.090
that have the following structure,

26
00:01:01.090 --> 00:01:04.030
a header dot,

27
00:01:04.030 --> 00:01:06.000
a payload dot,

28
00:01:06.000 --> 00:01:07.050
and a signature.

29
00:01:07.050 --> 00:01:11.030
The header has the type, which is a JSON web token,

30
00:01:11.030 --> 00:01:14.060
and it also has the hashing algorithm.

31
00:01:14.060 --> 00:01:18.030
The payload has the subject of the token,

32
00:01:18.030 --> 00:01:22.080
the expiration of the token in terms of a date,

33
00:01:22.080 --> 00:01:27.030
the iat which is the time the JWT was issued

34
00:01:27.030 --> 00:01:30.040
and that can be used to determine the age of the token,

35
00:01:30.040 --> 00:01:34.060
the jti which is a unique identifier of the JWT

36
00:01:34.060 --> 00:01:38.040
and then any application-specific key value pairs

37
00:01:38.040 --> 00:01:40.070
separated by the colon.

38
00:01:40.070 --> 00:01:43.030
It is the payload that includes the information

39
00:01:43.030 --> 00:01:47.020
about the principle, in this case the username and roles.

40
00:01:47.020 --> 00:01:49.080
Plain text passwords should never be sent

41
00:01:49.080 --> 00:01:51.040
in the JWT payload.

42
00:01:51.040 --> 00:01:54.040
The signature has the hash value of a header and payload

43
00:01:54.040 --> 00:01:59.000
that is calculated with a secret string on the application.

44
00:01:59.000 --> 00:02:00.020
And as of this recording,

45
00:02:00.020 --> 00:02:02.040
Spring Security does not provide

46
00:02:02.040 --> 00:02:05.050
JWT authentication out of the box,

47
00:02:05.050 --> 00:02:07.050
so we need to add a third party library

48
00:02:07.050 --> 00:02:10.080
to create and decode JSON web tokens.

49
00:02:10.080 --> 00:02:13.040
We will also leverage Spring web filters

50
00:02:13.040 --> 00:02:15.080
to grab the tokens from their request header,

51
00:02:15.080 --> 00:02:17.030
interpret them and inject them

52
00:02:17.030 --> 00:02:20.000
into the user's security context.

