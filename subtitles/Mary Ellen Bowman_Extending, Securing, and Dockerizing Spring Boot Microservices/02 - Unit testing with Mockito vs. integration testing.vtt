WEBVTT
1
00:00:00.000 --> 00:00:00.080
- (Narrator)

2
00:00:00.080 --> 00:00:03.000
Frequent feedback I receive from learners

3
00:00:03.000 --> 00:00:06.030
about creating your first Spring Boot RESTful Microservice,

4
00:00:06.030 --> 00:00:11.000
was that it lacked Unit tests, I couldn't agree more.

5
00:00:11.000 --> 00:00:13.030
The goal of this course was to introduce

6
00:00:13.030 --> 00:00:16.030
several Spring frameworks, not to test them.

7
00:00:16.030 --> 00:00:20.090
However, it was difficult to shake that developer shame.

8
00:00:20.090 --> 00:00:22.050
Because I truly believe that,

9
00:00:22.050 --> 00:00:26.050
"Code isn't code unless it has code to test the code."

10
00:00:26.050 --> 00:00:29.020
So it is with great satisfaction,

11
00:00:29.020 --> 00:00:33.040
and sense of redemption that I present TESTS.

12
00:00:33.040 --> 00:00:35.060
I'm assuming you already know how to create

13
00:00:35.060 --> 00:00:38.040
and configure JUnit tests with Spring,

14
00:00:38.040 --> 00:00:41.030
but if not I suggest you check out Shana Smith's

15
00:00:41.030 --> 00:00:44.030
" Spring: Test-Driven Development with Junit"

16
00:00:44.030 --> 00:00:45.090
in the learning library.

17
00:00:45.090 --> 00:00:50.060
A Unit test will test a class in isolation,

18
00:00:50.060 --> 00:00:53.050
meaning to test only the code in the class,

19
00:00:53.050 --> 00:00:55.030
not its dependencies

20
00:00:55.030 --> 00:00:57.080
An integration test will invoke not just the class,

21
00:00:57.080 --> 00:01:00.030
but also its underlying dependencies.

22
00:01:00.030 --> 00:01:02.070
In the exercise files of this chapter,

23
00:01:02.070 --> 00:01:05.040
there are several Unit tests,

24
00:01:05.040 --> 00:01:08.060
but I want to focus on testing Tour Rating Service

25
00:01:08.060 --> 00:01:12.040
as a Unit test, and an integration test.

26
00:01:12.040 --> 00:01:15.050
Tour Rating Service is a Spring Service component

27
00:01:15.050 --> 00:01:18.040
that is auto-wired with Tour Rating Repository,

28
00:01:18.040 --> 00:01:20.040
and Tour Repository.

29
00:01:20.040 --> 00:01:23.030
How do we test just the code and Tour Rating Service

30
00:01:23.030 --> 00:01:25.030
and not those repositories.

31
00:01:25.030 --> 00:01:27.010
Mockito to the rescue!

32
00:01:27.010 --> 00:01:30.090
Mokito is a mocking framework for Unit tests in Java.

33
00:01:30.090 --> 00:01:32.000
We use it to stub out

34
00:01:32.000 --> 00:01:34.060
and override the default behavior of a class.

35
00:01:34.060 --> 00:01:36.080
Our application automatically includes

36
00:01:36.080 --> 00:01:41.030
the Mokito library as part of Spring Boot starter test.

37
00:01:41.030 --> 00:01:45.010
So here we are in Tour Rating Service test.

38
00:01:45.010 --> 00:01:48.060
First we set up the Mockito Junit runner

39
00:01:48.060 --> 00:01:50.050
as the test runner,

40
00:01:50.050 --> 00:01:52.050
next we tell Mockito

41
00:01:52.050 --> 00:01:54.020
to instantiate a mocked version

42
00:01:54.020 --> 00:01:57.020
of Tour Repository, and Tour Rating Repository,

43
00:01:57.020 --> 00:02:00.030
and inject them into the service.

44
00:02:00.030 --> 00:02:03.060
The service interacts with Tour, and Tour Rating objects,

45
00:02:03.060 --> 00:02:06.060
so we have mocks of them too.

46
00:02:06.060 --> 00:02:08.070
So, that sets up the mock objects

47
00:02:08.070 --> 00:02:11.030
that will make the Java compiler happy,

48
00:02:11.030 --> 00:02:14.010
but what about runtime?

49
00:02:14.010 --> 00:02:16.080
The when, then, return Mockito static method

50
00:02:16.080 --> 00:02:20.080
overrides the normal behavior of a method that returns data.

51
00:02:20.080 --> 00:02:22.090
Some of the when, then, returns

52
00:02:22.090 --> 00:02:25.040
are used in more than one test method,

53
00:02:25.040 --> 00:02:28.010
so we collect those in a setup method,

54
00:02:28.010 --> 00:02:30.060
which is invoked before each test.

55
00:02:30.060 --> 00:02:32.030
The first set of tests,

56
00:02:32.030 --> 00:02:40.080
verify the return value of service methods.

57
00:02:40.080 --> 00:02:44.020
In "Look Up Rating by ID look up all,

58
00:02:44.020 --> 00:02:45.090
and look up ratings method,

59
00:02:45.090 --> 00:02:50.000
we test the expected response with the actual response.

60
00:02:50.000 --> 00:03:02.080
So, lets run this "Look Up Rating by ID" test.

61
00:03:02.080 --> 00:03:07.040
How about service methods that return void?

62
00:03:07.040 --> 00:03:09.050
The next set of tests do just that.

63
00:03:09.050 --> 00:03:16.040
They verify delete, rate many, update, and update some.

64
00:03:16.040 --> 00:03:28.020
Let's run the "Delete" test.

65
00:03:28.020 --> 00:03:29.050
So this verifies that

66
00:03:29.050 --> 00:03:32.020
when we called the service.delete method

67
00:03:32.020 --> 00:03:36.030
that the Tour Rating Repository mock delete method

68
00:03:36.030 --> 00:03:37.080
is invoked.

69
00:03:37.080 --> 00:03:41.000
The test not only verifies that a dependency was invoked,

70
00:03:41.000 --> 00:03:43.030
but also checks the perameters passed

71
00:03:43.030 --> 00:03:45.070
in the dependency method.

72
00:03:45.070 --> 00:03:46.090
In "Create New"

73
00:03:46.090 --> 00:03:54.080
we need to check that a new Tour rating is instantiated,

74
00:03:54.080 --> 00:03:56.020
and that the proper values

75
00:03:56.020 --> 00:04:01.040
are set in the Tour rating upon resistance.

76
00:04:01.040 --> 00:04:04.040
So in create new we create a "Capture",

77
00:04:04.040 --> 00:04:07.090
which is we expect the Tour rating return value

78
00:04:07.090 --> 00:04:12.080
within a method, so we invoke the "service.create new",

79
00:04:12.080 --> 00:04:17.050
we verify that the repository mock save method is called,

80
00:04:17.050 --> 00:04:21.010
and then, afterwards we, using the Tour rating capture,

81
00:04:21.010 --> 00:04:26.090
verify the values actually passed into the create method.

82
00:04:26.090 --> 00:04:30.030
Let's run that.

83
00:04:30.030 --> 00:04:31.040
Works!

84
00:04:31.040 --> 00:04:34.030
Now let's move on to an integration test,

85
00:04:34.030 --> 00:04:40.060
which actually invokes the dependencies.

86
00:04:40.060 --> 00:04:46.010
I'm going to open Tour rating service integration test.

87
00:04:46.010 --> 00:04:47.090
Tour rating service integration test

88
00:04:47.090 --> 00:04:49.070
runs in the Spring container,

89
00:04:49.070 --> 00:04:54.010
so we can auto-wire Tour Rating Service,

90
00:04:54.010 --> 00:04:57.040
and know that the Tour Rating Repository

91
00:04:57.040 --> 00:05:02.000
and Tour Repository are also instantiated and injected.

92
00:05:02.000 --> 00:05:03.080
"Add Spring Boot Test" will

93
00:05:03.080 --> 00:05:07.080
actually start the explorecali @Spring Boot application,

94
00:05:07.080 --> 00:05:12.070
which creates the data source, and run the "schema.sql"

95
00:05:12.070 --> 00:05:15.010
and "data.sql" scripts.

96
00:05:15.010 --> 00:05:18.020
"@Transactional" instructs all transactions

97
00:05:18.020 --> 00:05:21.050
to be rolled back after the test completes.

98
00:05:21.050 --> 00:05:24.070
So, we can actually store something in the database,

99
00:05:24.070 --> 00:05:28.080
look it up, and erase it all within a test.

100
00:05:28.080 --> 00:05:31.040
Let's look at the Delete test.

101
00:05:31.040 --> 00:05:38.080
First, let's launch the Happy Path test, and run that.

102
00:05:38.080 --> 00:05:41.060
So, in Happy Path, we see...

103
00:05:41.060 --> 00:05:46.030
oh let's try to move up the console, it's actually starting.

104
00:05:46.030 --> 00:05:52.040
It actually starts the container and then runs a test,

105
00:05:52.040 --> 00:05:55.070
it deletes a Tour, and then finishes,

106
00:05:55.070 --> 00:05:57.090
and then, at the end

107
00:05:57.090 --> 00:06:00.080
that tour no longer exists in the database,

108
00:06:00.080 --> 00:06:03.010
but then just because we have transactional

109
00:06:03.010 --> 00:06:05.020
it will be existing again.

110
00:06:05.020 --> 00:06:07.000
Now let's test the UnHappy Path,

111
00:06:07.000 --> 00:06:13.080
where we expect no such element exception to be thrown.

112
00:06:13.080 --> 00:06:21.010
Again, starting the time-cap as part of the test,

113
00:06:21.010 --> 00:06:22.090
and it passes.

114
00:06:22.090 --> 00:06:26.000
I fell much better now that these tests are in place,

115
00:06:26.000 --> 00:06:29.020
but we still need to test the rest controller APIs.

116
00:06:29.020 --> 00:06:32.000
We'll cover that in the next video.

