WEBVTT
1
00:00:00.006 --> 00:00:02.000
- [Instructor] API clients hunger

2
00:00:02.000 --> 00:00:06.003
for well-described interfaces to avoid runtime errors.

3
00:00:06.003 --> 00:00:07.005
As a back end developer

4
00:00:07.005 --> 00:00:11.000
I know the irritation of being blamed for a broken service,

5
00:00:11.000 --> 00:00:14.006
only to learn that the service was not properly invoked.

6
00:00:14.006 --> 00:00:17.003
API documentation should relieve this pain,

7
00:00:17.003 --> 00:00:20.009
but keeping it in sync with the code is an annoyance.

8
00:00:20.009 --> 00:00:22.007
And that's why it's a best practice

9
00:00:22.007 --> 00:00:25.008
to keep documentation with the code.

10
00:00:25.008 --> 00:00:29.002
The Open API Specification is a standard for documenting,

11
00:00:29.002 --> 00:00:32.005
consuming, and visually interfacing with machines.

12
00:00:32.005 --> 00:00:34.004
Swagger is a tool that implements

13
00:00:34.004 --> 00:00:37.000
the Open API Specification.

14
00:00:37.000 --> 00:00:41.005
Springdoc-openapi is a library that includes Swagger

15
00:00:41.005 --> 00:00:46.000
to dynamically generate Spring Boot API documentation.

16
00:00:46.000 --> 00:00:48.008
Let's add the springdoc dependency to our application

17
00:00:48.008 --> 00:00:57.007
and see what happens.

18
00:00:57.007 --> 00:00:58.008
And the version that this recording

19
00:00:58.008 --> 00:01:04.000
will be using is 1.4.5.

20
00:01:04.000 --> 00:01:08.005
So this is the base Open API, that's UI specification.

21
00:01:08.005 --> 00:01:11.002
Since we are using REST repositories,

22
00:01:11.002 --> 00:01:13.002
there's actually a separate library

23
00:01:13.002 --> 00:01:23.000
for documenting Spring Data Rest repositories.

24
00:01:23.000 --> 00:01:27.007
So let's import those changes into our project.

25
00:01:27.007 --> 00:01:39.005
And rebuild it and run it.

26
00:01:39.005 --> 00:01:42.001
Now let's go to a web page

27
00:01:42.001 --> 00:01:44.005
from our local host 8080

28
00:01:44.005 --> 00:01:49.003
swagger-ui.html.

29
00:01:49.003 --> 00:01:51.001
And voila.

30
00:01:51.001 --> 00:01:52.007
Our Spring Boot application

31
00:01:52.007 --> 00:01:56.002
now has an interactive Swagger webpage.

32
00:01:56.002 --> 00:01:59.005
And we can scroll down here and we see all of our APIs

33
00:01:59.005 --> 00:02:01.000
that are public.

34
00:02:01.000 --> 00:02:02.005
The /ratings.

35
00:02:02.005 --> 00:02:04.008
The tour ratings,

36
00:02:04.008 --> 00:02:09.004
which is through the /tours/tourUI/ratings.

37
00:02:09.004 --> 00:02:12.005
/packages and /tours,

38
00:02:12.005 --> 00:02:16.008
which are from our REST repositories.

39
00:02:16.008 --> 00:02:22.007
And you can actually interact with this webpage to

40
00:02:22.007 --> 00:02:23.006
consume the API.

41
00:02:23.006 --> 00:02:26.007
So let's try getting all of our ratings.

42
00:02:26.007 --> 00:02:28.008
Open that and click try it out.

43
00:02:28.008 --> 00:02:30.009
And execute the GET on that.

44
00:02:30.009 --> 00:02:32.002
And there's the results

45
00:02:32.002 --> 00:02:37.005
of getting our ratings.

46
00:02:37.005 --> 00:02:41.000
And we can actually create a rating.

47
00:02:41.000 --> 00:02:43.009
And it's going to prompt us for the parameters on that.

48
00:02:43.009 --> 00:02:47.004
So we'll try this API out.

49
00:02:47.004 --> 00:02:50.003
Tour rating ID one.

50
00:02:50.003 --> 00:02:51.006
We'll give it a score of three,

51
00:02:51.006 --> 00:02:54.000
say that it was good.

52
00:02:54.000 --> 00:02:57.005
And that the customerId was one.

53
00:02:57.005 --> 00:03:01.003
And execute that API.

54
00:03:01.003 --> 00:03:04.003
And it created it.

55
00:03:04.003 --> 00:03:05.006
I like it.

56
00:03:05.006 --> 00:03:11.007
But at this stage right now, it's kind of generic.

57
00:03:11.007 --> 00:03:14.000
So this just shows what you can get out of the box,

58
00:03:14.000 --> 00:03:17.002
but I'm going to go and uncomment

59
00:03:17.002 --> 00:03:20.000
some Swagger annotations that are in the code

60
00:03:20.000 --> 00:03:22.005
and that's going to show some embellishment

61
00:03:22.005 --> 00:03:24.005
and more detail in this page

62
00:03:24.005 --> 00:03:27.009
that will be personalized for our application.

63
00:03:27.009 --> 00:03:31.005
So first we'll go to our ExploreCaliApplication.

64
00:03:31.005 --> 00:03:35.006
And I'm going to uncomment

65
00:03:35.006 --> 00:03:40.009
this OpenAPIDefinition

66
00:03:40.009 --> 00:03:41.007
annotation.

67
00:03:41.007 --> 00:03:45.000
And this will give an overall like title, description,

68
00:03:45.000 --> 00:03:48.009
and version of the API at the top of the webpage.

69
00:03:48.009 --> 00:03:51.004
In our writing controller,

70
00:03:51.004 --> 00:03:54.002
there's this tag annotation.

71
00:03:54.002 --> 00:03:57.008
Which gives an overall description and name

72
00:03:57.008 --> 00:03:59.004
for the /ratings.

73
00:03:59.004 --> 00:04:03.000
And then for each of the operations that we have here,

74
00:04:03.000 --> 00:04:05.006
we declare an operation with @Operation.

75
00:04:05.006 --> 00:04:07.005
And then @ApiResponses.

76
00:04:07.005 --> 00:04:09.007
And API response gives more detail

77
00:04:09.007 --> 00:04:14.004
about what's going to actually be returned.

78
00:04:14.004 --> 00:04:21.000
Import those definitions.

79
00:04:21.000 --> 00:04:23.008
And I'll show you what's happening here.

80
00:04:23.008 --> 00:04:27.006
These annotations actually come from io.swagger.

81
00:04:27.006 --> 00:04:32.003
Those are swagger annotations.

82
00:04:32.003 --> 00:05:05.007
We'll do the same thing in our tour rating controller.

83
00:05:05.007 --> 00:05:10.005
And finally our delete mapping.

84
00:05:10.005 --> 00:05:12.008
And finally,

85
00:05:12.008 --> 00:05:17.004
on our REST repositories,

86
00:05:17.004 --> 00:05:20.003
we can actually give a name to the overall repository

87
00:05:20.003 --> 00:05:29.002
using the tag.

88
00:05:29.002 --> 00:05:30.004
All right.

89
00:05:30.004 --> 00:05:34.003
So let's stop this.

90
00:05:34.003 --> 00:05:47.003
Rebuild it and rerun it.

91
00:05:47.003 --> 00:05:50.001
Okay, it started.

92
00:05:50.001 --> 00:05:53.007
Let's reload our Swagger page.

93
00:05:53.007 --> 00:05:57.006
And awesome we have the Explore Cali API description

94
00:05:57.006 --> 00:05:59.000
at the top.

95
00:05:59.000 --> 00:06:02.002
And now we have our controller APIs group.

96
00:06:02.002 --> 00:06:05.003
So we have our ratings grouped with the description

97
00:06:05.003 --> 00:06:07.004
and then each of the operations

98
00:06:07.004 --> 00:06:11.001
or end points having a description.

99
00:06:11.001 --> 00:06:16.004
And this was our tour package repository.

100
00:06:16.004 --> 00:06:21.005
And our tour repository REST APIs.

101
00:06:21.005 --> 00:06:24.001
All nice on one page.

102
00:06:24.001 --> 00:06:26.004
Springdocs is just one library

103
00:06:26.004 --> 00:06:28.008
to document your APIs in code.

104
00:06:28.008 --> 00:06:32.001
There are other libraries such as SpringFox,

105
00:06:32.001 --> 00:06:34.009
and even alternatives to Swagger.

106
00:06:34.009 --> 00:06:37.009
Documenting APIs programmatically is optional,

107
00:06:37.009 --> 00:06:41.001
and it's only included in this part of the course.

108
00:06:41.001 --> 00:06:43.005
Perhaps external documentation,

109
00:06:43.005 --> 00:06:45.007
which is difficult to keep current,

110
00:06:45.007 --> 00:06:47.004
better suits your needs.

111
00:06:47.004 --> 00:06:48.003
Either way,

112
00:06:48.003 --> 00:06:51.000
it's good to know there are options.

