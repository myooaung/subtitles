WEBVTT
1
00:00:00.000 --> 00:00:01.040
- [Instructor] In the last video,

2
00:00:01.040 --> 00:00:04.080
we saw how a user could provide their username and password

3
00:00:04.080 --> 00:00:08.000
to be authenticated with the authentication manager

4
00:00:08.000 --> 00:00:10.050
and a user detail service.

5
00:00:10.050 --> 00:00:13.000
But how was that password verified?

6
00:00:13.000 --> 00:00:16.000
The password let me in was not stored in the database.

7
00:00:16.000 --> 00:00:21.030
Instead, there was a long nonsensical string in data.sql.

8
00:00:21.030 --> 00:00:23.090
That long string is actually a hashed value

9
00:00:23.090 --> 00:00:27.060
created by the Spring BCrypt algorithm.

10
00:00:27.060 --> 00:00:31.050
The authentication manager requires a password encoder bean

11
00:00:31.050 --> 00:00:34.040
in order to encode the plain text password

12
00:00:34.040 --> 00:00:37.000
and then compares it to the previously encoded value

13
00:00:37.000 --> 00:00:39.000
in the database.

14
00:00:39.000 --> 00:00:42.010
I'm repeating a pattern from the Spring Security course

15
00:00:42.010 --> 00:00:44.080
by initializing it to 12.

16
00:00:44.080 --> 00:00:48.060
Now, how about creating a new user and encode the password?

17
00:00:48.060 --> 00:00:55.000
There's a new method in UserService that does just that.

18
00:00:55.000 --> 00:00:56.070
In this sign up method,

19
00:00:56.070 --> 00:01:00.020
it creates a new user with the CSR role

20
00:01:00.020 --> 00:01:03.080
as long as the username does not already exist.

21
00:01:03.080 --> 00:01:07.040
Now, let's run this method from an integration test.

22
00:01:07.040 --> 00:01:12.000
So, I have a UserServiceIntegrationTest

23
00:01:12.000 --> 00:01:14.030
and we will run this in debug mode.

24
00:01:14.030 --> 00:01:15.040
It's a Spring Boot test

25
00:01:15.040 --> 00:01:20.070
so it will run the Spring Boot container within this test.

26
00:01:20.070 --> 00:01:23.080
And what we're going to do is it's going to actually,

27
00:01:23.080 --> 00:01:25.060
let me make this bigger here,

28
00:01:25.060 --> 00:01:30.010
it will actually invoke the sign up method on the service

29
00:01:30.010 --> 00:01:33.060
passing in a dummy username, a dummy password,

30
00:01:33.060 --> 00:01:37.000
a first name John and a last name of Doe.

31
00:01:37.000 --> 00:01:41.090
And then we assert that the password is not dummy password.

32
00:01:41.090 --> 00:01:44.030
It will be an encrypted password.

33
00:01:44.030 --> 00:01:47.000
So, I'm gonna run this

34
00:01:47.000 --> 00:01:49.060
and then we'll look in the console

35
00:01:49.060 --> 00:01:54.050
for the actually encoded password.

36
00:01:54.050 --> 00:01:57.010
So, there's the encoded password

37
00:01:57.010 --> 00:01:59.080
that will actually be stored in the database,

38
00:01:59.080 --> 00:02:02.000
not dummy password.

