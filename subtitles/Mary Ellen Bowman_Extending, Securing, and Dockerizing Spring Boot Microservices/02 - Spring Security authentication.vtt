WEBVTT
1
00:00:00.050 --> 00:00:02.060
- [Instructor] So far we have created our guest list

2
00:00:02.060 --> 00:00:05.010
and permissions by adding users and roles

3
00:00:05.010 --> 00:00:06.060
to the domain model.

4
00:00:06.060 --> 00:00:09.030
We need a front door to our application for the users.

5
00:00:09.030 --> 00:00:14.090
I created a /users API in this user controller class,

6
00:00:14.090 --> 00:00:17.020
and a login method where users will provide

7
00:00:17.020 --> 00:00:19.080
their credentials to sign into the application.

8
00:00:19.080 --> 00:00:22.050
We'll get back to the implementation of this method,

9
00:00:22.050 --> 00:00:24.020
but I want you to recall what happened

10
00:00:24.020 --> 00:00:26.040
when we added Spring secured dependency.

11
00:00:26.040 --> 00:00:29.020
It blocked all the applications,

12
00:00:29.020 --> 00:00:32.020
but the sign-in API should always be open,

13
00:00:32.020 --> 00:00:34.020
so we need to configure Spring security

14
00:00:34.020 --> 00:00:37.000
to unblock it, as well as the /tours

15
00:00:37.000 --> 00:00:39.000
and /packages API.

16
00:00:39.000 --> 00:00:44.000
So let's see how we open those up.

17
00:00:44.000 --> 00:00:47.010
We have a new class in a new security package

18
00:00:47.010 --> 00:00:50.020
called webSecurityConfiguration.java.

19
00:00:50.020 --> 00:00:53.000
Web security configuration is a new class,

20
00:00:53.000 --> 00:00:55.020
and it will be the center point for setting up

21
00:00:55.020 --> 00:00:56.080
our security needs.

22
00:00:56.080 --> 00:00:59.030
It extends from Spring security class

23
00:00:59.030 --> 00:01:02.000
web security configuration adapter.

24
00:01:02.000 --> 00:01:04.040
It's annotated with @Configuration and

25
00:01:04.040 --> 00:01:07.020
@EnableGlobalMethodSecurity.

26
00:01:07.020 --> 00:01:10.040
We override web security configuration adapter's

27
00:01:10.040 --> 00:01:14.060
configure method in order to change the default behavior

28
00:01:14.060 --> 00:01:18.040
of the HTTP security object, so when we invoke

29
00:01:18.040 --> 00:01:22.000
the HTTP security object's authorize request methods,

30
00:01:22.000 --> 00:01:25.060
it will tell Spring security how to handle different APIs.

31
00:01:25.060 --> 00:01:29.000
We want /tours and /packages to be open,

32
00:01:29.000 --> 00:01:31.060
so with antMatcher, we say anything

33
00:01:31.060 --> 00:01:33.060
that starts with the pattern /tours

34
00:01:33.060 --> 00:01:36.020
and /packages will be permitted.

35
00:01:36.020 --> 00:01:38.090
The double asterisk achieves this.

36
00:01:38.090 --> 00:01:43.040
Next, we want to unblock our new /users/signin API.

37
00:01:43.040 --> 00:01:45.090
There's no wild card because we need

38
00:01:45.090 --> 00:01:48.080
to exactly match the entire input.

39
00:01:48.080 --> 00:01:52.000
Anything else will require authentication.

40
00:01:52.000 --> 00:01:55.030
Because we created a stateless restful API,

41
00:01:55.030 --> 00:01:57.090
we need to tell Spring security that cross-site

42
00:01:57.090 --> 00:02:00.060
request forgery detection should be disabled,

43
00:02:00.060 --> 00:02:04.000
and that no sessions should be created for it.

44
00:02:04.000 --> 00:02:07.050
So session creation policy is stateless.

45
00:02:07.050 --> 00:02:14.020
So let's try it out and see what we have so far.

46
00:02:14.020 --> 00:02:16.070
First, let's check to see if our /tours

47
00:02:16.070 --> 00:02:19.030
and /packages APIs are open.

48
00:02:19.030 --> 00:02:22.040
So let's get the tours.

49
00:02:22.040 --> 00:02:24.010
And that's working.

50
00:02:24.010 --> 00:02:27.020
And let's get the packages.

51
00:02:27.020 --> 00:02:29.050
And that's working.

52
00:02:29.050 --> 00:02:31.070
Next, let's see what happens when we invoke

53
00:02:31.070 --> 00:02:35.040
the user/signin method.

54
00:02:35.040 --> 00:02:38.050
So this is a post to the user sign in end point,

55
00:02:38.050 --> 00:02:44.030
and our body is a JSON body, so the username is admin

56
00:02:44.030 --> 00:02:47.030
and the password is letmein.

57
00:02:47.030 --> 00:02:49.010
We'll get back to the object

58
00:02:49.010 --> 00:02:50.080
that describes the administrator,

59
00:02:50.080 --> 00:02:55.060
but let's send this and see what we get.

60
00:02:55.060 --> 00:02:59.020
It contains a list of authorities,

61
00:02:59.020 --> 00:03:02.080
which in Spring security speak are roles,

62
00:03:02.080 --> 00:03:08.090
and for the admin user there is only the role_admin role.

63
00:03:08.090 --> 00:03:11.050
Authenticated is true.

64
00:03:11.050 --> 00:03:13.020
We also have a principal object.

65
00:03:13.020 --> 00:03:17.010
The principal is a generalized term that could be a user

66
00:03:17.010 --> 00:03:19.070
or another system that has credentials.

67
00:03:19.070 --> 00:03:22.030
Here, principal is the admin user,

68
00:03:22.030 --> 00:03:25.080
and again the authorities are listed.

69
00:03:25.080 --> 00:03:28.070
And there are settings about this user.

70
00:03:28.070 --> 00:03:30.090
Lastly is the user's name.

71
00:03:30.090 --> 00:03:33.090
Let's try it again with an invalid user.

72
00:03:33.090 --> 00:03:36.020
So I'm gonna just change the username to blah,

73
00:03:36.020 --> 00:03:41.070
which is not a user we have in our system.

74
00:03:41.070 --> 00:03:45.010
And we see a 403 Forbidden is returned.

75
00:03:45.010 --> 00:03:48.040
Let's try to log in again with an invalid password.

76
00:03:48.040 --> 00:03:53.070
So change the username back to admin.

77
00:03:53.070 --> 00:04:00.090
And just instead of letmein, letmeout.

78
00:04:00.090 --> 00:04:02.030
So again, we get a forbidden.

79
00:04:02.030 --> 00:04:05.070
So we see that somehow this API must look up

80
00:04:05.070 --> 00:04:08.040
the security user table for entry with the username

81
00:04:08.040 --> 00:04:11.030
as admin and verifies the password is correct,

82
00:04:11.030 --> 00:04:14.090
and returns information about that user in the permissions.

83
00:04:14.090 --> 00:04:16.040
Let's see how this is accomplished by

84
00:04:16.040 --> 00:04:19.010
running this application again in debug mode.

85
00:04:19.010 --> 00:04:23.000
So we'll stop the application, and this time,

86
00:04:23.000 --> 00:04:30.010
we'll run it again in debug mode.

87
00:04:30.010 --> 00:04:35.010
And I already have some break point set up.

88
00:04:35.010 --> 00:04:37.010
And at the start, we hit the break point

89
00:04:37.010 --> 00:04:39.030
in web security configuration, and that adds

90
00:04:39.030 --> 00:04:41.070
the configuration authentication manager

91
00:04:41.070 --> 00:04:44.020
as a bean in the applications context.

92
00:04:44.020 --> 00:04:50.090
You see that will execute down there.

93
00:04:50.090 --> 00:04:53.000
Okay, so our application is up and running.

94
00:04:53.000 --> 00:04:55.010
Now let's try to sign in again.

95
00:04:55.010 --> 00:05:02.040
We'll put in the correct credentials.

96
00:05:02.040 --> 00:05:04.090
So we hit a break point in the login method

97
00:05:04.090 --> 00:05:09.090
and we're going to invoke the user service sign-in method,

98
00:05:09.090 --> 00:05:12.070
and that user service sign-in method will

99
00:05:12.070 --> 00:05:18.070
run the authentication manager, that authenticate method.

100
00:05:18.070 --> 00:05:22.050
Authentication manager is a bean that we've instantiated.

101
00:05:22.050 --> 00:05:24.090
So let's invoke that, but we see that it's

102
00:05:24.090 --> 00:05:26.070
passing in the username and password into

103
00:05:26.070 --> 00:05:30.040
a username and password authentication token.

104
00:05:30.040 --> 00:05:34.070
Let's go in that, and now we have entered a new class.

105
00:05:34.070 --> 00:05:38.030
It's called ExploreCaliUserDetailsService.

106
00:05:38.030 --> 00:05:40.010
How did that happen?

107
00:05:40.010 --> 00:05:43.090
We didn't see the authentication manager actually call this.

108
00:05:43.090 --> 00:05:46.070
But the authentication manager requires an object

109
00:05:46.070 --> 00:05:51.060
that implements the user details service interface.

110
00:05:51.060 --> 00:05:55.050
It then invokes the object's load by username method,

111
00:05:55.050 --> 00:05:57.040
which we have overridden here.

112
00:05:57.040 --> 00:06:01.020
It invokes the userRepository.findByUser method

113
00:06:01.020 --> 00:06:04.020
to see if there is an entry in the security user table

114
00:06:04.020 --> 00:06:07.020
with that username, and we throw an exception

115
00:06:07.020 --> 00:06:09.000
if it's not found.

116
00:06:09.000 --> 00:06:13.030
If it is found, we invoke a withUsername static method,

117
00:06:13.030 --> 00:06:16.030
let me make this a little bigger there.

118
00:06:16.030 --> 00:06:20.030
And this creates a user details object.

119
00:06:20.030 --> 00:06:23.070
It populates it with a username, password, and roles,

120
00:06:23.070 --> 00:06:26.070
and then adds some more settings to the object.

121
00:06:26.070 --> 00:06:29.050
The authentication manager verifies the password

122
00:06:29.050 --> 00:06:31.080
and interprets the user settings.

123
00:06:31.080 --> 00:06:37.040
So we'll go back to, continue running there.

124
00:06:37.040 --> 00:06:41.020
And we'll see, we'll get the response of an OK.

125
00:06:41.020 --> 00:06:44.020
So there was a lot going on here, but the good news is,

126
00:06:44.020 --> 00:06:46.090
it's really not a lot of code on our part.

127
00:06:46.090 --> 00:06:49.040
Merely adding the authentication manger to

128
00:06:49.040 --> 00:06:51.060
the application context and implementing

129
00:06:51.060 --> 00:06:55.000
user details service was all we need for this step.

