WEBVTT
1
00:00:00.000 --> 00:00:02.000
- [Instructor] Before continuing you need

2
00:00:02.000 --> 00:00:07.050
to install Docker Community Edition at store.docker.com.

3
00:00:07.050 --> 00:00:11.000
Just drill down into Community Edition and install

4
00:00:11.000 --> 00:00:14.070
the appropriate version for your platform.

5
00:00:14.070 --> 00:00:16.070
I've already done this and to verify it

6
00:00:16.070 --> 00:00:24.010
let's go to a command prompt and type docker --version.

7
00:00:24.010 --> 00:00:29.060
I'm running Docker for Mac, version 18.06 Community Edition.

8
00:00:29.060 --> 00:00:33.040
So, now that we've got Docker installed, it's magic time.

9
00:00:33.040 --> 00:00:36.070
In one command line we will download the MySQL image

10
00:00:36.070 --> 00:00:39.020
from hub.docker.com repository.

11
00:00:39.020 --> 00:00:42.020
That's similar to the Maven Central Repository.

12
00:00:42.020 --> 00:00:45.060
Since it's such a long command line, I have it

13
00:00:45.060 --> 00:00:47.070
in a readme file.

14
00:00:47.070 --> 00:00:51.050
There is now a new readme markdown file

15
00:00:51.050 --> 00:00:56.010
in the exercise files.

16
00:00:56.010 --> 00:01:00.070
I have installed the Markdown plugin to view these.

17
00:01:00.070 --> 00:01:02.040
If you have it just as a text file,

18
00:01:02.040 --> 00:01:05.070
you can copy and paste directly from that as well.

19
00:01:05.070 --> 00:01:08.090
I'm going to copy this line here

20
00:01:08.090 --> 00:01:10.070
and paste it in my terminal.

21
00:01:10.070 --> 00:01:13.040
Now, what this one command will do,

22
00:01:13.040 --> 00:01:17.000
it will create and run a container in the background.

23
00:01:17.000 --> 00:01:20.040
Name the container ec-mysql.

24
00:01:20.040 --> 00:01:23.000
Set the root password to password.

25
00:01:23.000 --> 00:01:26.000
Create a database called explorecali.

26
00:01:26.000 --> 00:01:28.050
Set the username and password to the database

27
00:01:28.050 --> 00:01:33.020
as cali_user and cali_ pass, respectively.

28
00:01:33.020 --> 00:01:40.080
Publish the MySQL 3306 port to the localhost 6604 port.

29
00:01:40.080 --> 00:01:44.000
It'll take some time to run because it does not

30
00:01:44.000 --> 00:01:47.020
have the MySQL image downloaded locally,

31
00:01:47.020 --> 00:01:50.060
so it's downloading from hub.docker.com.

32
00:01:50.060 --> 00:01:55.020
And now we have the MySQL image running

33
00:01:55.020 --> 00:01:57.080
in its own Linux operating system.

34
00:01:57.080 --> 00:02:00.040
Let's see the image.

35
00:02:00.040 --> 00:02:04.070
I'm going to enter docker images.

36
00:02:04.070 --> 00:02:13.050
And there's the MySQL image in the running containers.

37
00:02:13.050 --> 00:02:16.090
Docker ps -a, A meeting all.

38
00:02:16.090 --> 00:02:23.010
And we have one MySQL image

39
00:02:23.010 --> 00:02:26.070
with the name ec-mysql.

40
00:02:26.070 --> 00:02:28.090
Now that our database is started it's time

41
00:02:28.090 --> 00:02:31.080
to modify the Explore California application

42
00:02:31.080 --> 00:02:35.010
to use MySQL database.

43
00:02:35.010 --> 00:02:39.050
So, in the pom.xml,

44
00:02:39.050 --> 00:02:43.090
we have the dependency for the MySQL connector

45
00:02:43.090 --> 00:02:47.080
and in application.properties we have

46
00:02:47.080 --> 00:02:49.090
the properties to connect to the database.

47
00:02:49.090 --> 00:02:53.010
We have the data source URL, the username

48
00:02:53.010 --> 00:02:56.070
and the password which all matches what we put in before.

49
00:02:56.070 --> 00:02:59.090
Since we are using a non-SQL data source we need to set

50
00:02:59.090 --> 00:03:03.000
the data source initialization mode to always.

51
00:03:03.000 --> 00:03:07.030
Finally we have spring.datasource.continue-on-error

52
00:03:07.030 --> 00:03:08.060
set to true.

53
00:03:08.060 --> 00:03:11.020
So, if we run the application multiple times,

54
00:03:11.020 --> 00:03:14.060
schema.sql will run multiple times and if there's already

55
00:03:14.060 --> 00:03:18.060
a database existing it will not stop the application

56
00:03:18.060 --> 00:03:20.030
it will just continue to run.

57
00:03:20.030 --> 00:03:24.020
So, let's build the project.

58
00:03:24.020 --> 00:03:25.090
And before we start the application

59
00:03:25.090 --> 00:03:28.050
let's check out the state of our running database.

60
00:03:28.050 --> 00:03:33.020
To do this, we call a Docker run command with --link option

61
00:03:33.020 --> 00:03:36.010
and it's also in the readme.

62
00:03:36.010 --> 00:03:39.080
This will link into

63
00:03:39.080 --> 00:03:43.080
the MySQL container.

64
00:03:43.080 --> 00:03:48.060
The ec-mysql container and execute the MySQL client.

65
00:03:48.060 --> 00:03:51.000
I'm copying that over.

66
00:03:51.000 --> 00:03:54.070
Clear the screen.

67
00:03:54.070 --> 00:03:57.050
Launching this.

68
00:03:57.050 --> 00:03:59.060
And it will connect with the correct username

69
00:03:59.060 --> 00:04:02.010
and password and port.

70
00:04:02.010 --> 00:04:08.080
So, let's show our databases.

71
00:04:08.080 --> 00:04:13.020
And we see the explorecali database is present.

72
00:04:13.020 --> 00:04:18.010
Let's use it.

73
00:04:18.010 --> 00:04:24.010
Let's show the tables that are available.

74
00:04:24.010 --> 00:04:26.040
We see that there are no tables yet

75
00:04:26.040 --> 00:04:29.000
and now we're going to launch our application

76
00:04:29.000 --> 00:04:35.080
which will create the tables and insert the proper values.

77
00:04:35.080 --> 00:04:39.060
Now that that's started, let's run that command again

78
00:04:39.060 --> 00:04:41.080
to show tables.

79
00:04:41.080 --> 00:04:46.000
There are our security_role, user, tour, tour_package,

80
00:04:46.000 --> 00:04:47.080
tour_rating and user tables.

81
00:04:47.080 --> 00:04:55.020
Now, let's look at the tours.

82
00:04:55.020 --> 00:04:56.090
There's all our tours, and we see that

83
00:04:56.090 --> 00:04:59.070
we got 30 rows back.

84
00:04:59.070 --> 00:05:04.050
Now, let's stop running the application.

85
00:05:04.050 --> 00:05:08.060
Run that command again.

86
00:05:08.060 --> 00:05:10.030
There's our tours, they're still there,

87
00:05:10.030 --> 00:05:12.000
this is completely brand new.

88
00:05:12.000 --> 00:05:15.060
The tours are persistent after the application terminated.

89
00:05:15.060 --> 00:05:19.020
I'm going to restart the application.

90
00:05:19.020 --> 00:05:22.060
I'm gonna see the tours.

91
00:05:22.060 --> 00:05:26.030
Now we see we have 60 rows of tours.

92
00:05:26.030 --> 00:05:29.090
So, the problem is that this script ran again

93
00:05:29.090 --> 00:05:32.030
so there are duplicate tours in the database

94
00:05:32.030 --> 00:05:34.030
with different ID's.

95
00:05:34.030 --> 00:05:37.090
So using schema.sql and data.sql are good

96
00:05:37.090 --> 00:05:41.080
for database initialization, but not migration.

97
00:05:41.080 --> 00:05:43.070
Before we leave, let's stop and remove

98
00:05:43.070 --> 00:05:46.090
the Docker container so we have a clean environment.

99
00:05:46.090 --> 00:05:50.020
We'll quit from MySQL, we're going to say,

100
00:05:50.020 --> 00:05:57.020
docker stop ec-mysql, that will stop the container.

101
00:05:57.020 --> 00:06:04.000
Now we want to remove it.

102
00:06:04.000 --> 00:06:09.010
Let's make sure it's gone.

103
00:06:09.010 --> 00:06:10.070
So it's gone.

104
00:06:10.070 --> 00:06:12.070
And we see the container is removed

105
00:06:12.070 --> 00:06:15.010
but the MySQL image is still available

106
00:06:15.010 --> 00:06:18.000
to create new containers as needed.

