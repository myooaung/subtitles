WEBVTT
1
00:00:00.050 --> 00:00:02.000
- [Instructor] In the last three videos,

2
00:00:02.000 --> 00:00:03.050
it was a very manual process

3
00:00:03.050 --> 00:00:07.070
of removing images, building jars and recreating images.

4
00:00:07.070 --> 00:00:08.080
Well, there's good news.

5
00:00:08.080 --> 00:00:11.070
There are Maven plugins to automate these tasks.

6
00:00:11.070 --> 00:00:14.030
We're going to use the Spotify plugin.

7
00:00:14.030 --> 00:00:16.050
With the Spotify plugin, we no longer need

8
00:00:16.050 --> 00:00:18.070
a Docker file in the project folder

9
00:00:18.070 --> 00:00:22.090
and the configuration is all inside the pom.xml.

10
00:00:22.090 --> 00:00:29.010
So, in the pom.xml at the bottom

11
00:00:29.010 --> 00:00:32.070
is where we have our Spotify plugin.

12
00:00:32.070 --> 00:00:35.090
And you see a lot of the similar items

13
00:00:35.090 --> 00:00:38.000
that were in the Docker file

14
00:00:38.000 --> 00:00:39.080
including the entry point,

15
00:00:39.080 --> 00:00:41.020
the base start name,

16
00:00:41.020 --> 00:00:43.090
that's where we start from Java 8,

17
00:00:43.090 --> 00:00:46.040
explorecali is the image name

18
00:00:46.040 --> 00:00:50.030
and we're going to have to establish the target folder

19
00:00:50.030 --> 00:00:53.090
and we can actually leverage some existing environment names

20
00:00:53.090 --> 00:00:56.030
that come from Maven which is like the final name

21
00:00:56.030 --> 00:00:59.010
whenever we build the jar

22
00:00:59.010 --> 00:01:01.050
and there's other tags here

23
00:01:01.050 --> 00:01:03.080
such as the force tag

24
00:01:03.080 --> 00:01:06.030
will force the image to be overwritten

25
00:01:06.030 --> 00:01:09.050
if it exists already so we don't have to manually remove it.

26
00:01:09.050 --> 00:01:12.020
If there's other settings and tags you can leverage here

27
00:01:12.020 --> 00:01:15.020
such as you can make it part of your process

28
00:01:15.020 --> 00:01:17.010
as you build the application,

29
00:01:17.010 --> 00:01:20.060
then trigger the image to be created

30
00:01:20.060 --> 00:01:23.080
or even push it up to Docker Hub

31
00:01:23.080 --> 00:01:26.070
or another repository or you can even pull things

32
00:01:26.070 --> 00:01:28.070
but this is just mimicking what we've already done

33
00:01:28.070 --> 00:01:30.010
in our Docker file.

34
00:01:30.010 --> 00:01:34.000
I've created a property called ec-profile

35
00:01:34.000 --> 00:01:36.080
and that's a command line option

36
00:01:36.080 --> 00:01:41.020
that I will pass in and so that that's actually substituted

37
00:01:41.020 --> 00:01:49.000
in different places in this pom file.

38
00:01:49.000 --> 00:01:51.040
Here's where I declare the property, ec-profile

39
00:01:51.040 --> 00:01:53.060
and by default the setting is default

40
00:01:53.060 --> 00:01:55.070
which means it would be a standalone application

41
00:01:55.070 --> 00:01:57.030
running the H2 database,

42
00:01:57.030 --> 00:02:00.030
the other valid value is MySQL

43
00:02:00.030 --> 00:02:03.040
and it would use the MySQL profile

44
00:02:03.040 --> 00:02:09.020
or Docker so that it would use the Docker profile.

45
00:02:09.020 --> 00:02:10.080
So, let's go into the README

46
00:02:10.080 --> 00:02:12.020
and I have the command lines

47
00:02:12.020 --> 00:02:14.080
that we're going to execute.

48
00:02:14.080 --> 00:02:21.000
First of all, I want to build the default image

49
00:02:21.000 --> 00:02:22.000
for our package

50
00:02:22.000 --> 00:02:23.070
and so, I'm going to copy this,

51
00:02:23.070 --> 00:02:27.000
so within Maven it's going to build the jar

52
00:02:27.000 --> 00:02:30.050
and then actually create the Docker image.

53
00:02:30.050 --> 00:02:35.000
I've already cleared out any images

54
00:02:35.000 --> 00:02:39.020
or containers that were left over from previous videos.

55
00:02:39.020 --> 00:02:41.090
We just have to have the database container running

56
00:02:41.090 --> 00:02:43.070
for these next examples,

57
00:02:43.070 --> 00:02:49.010
so now I'm going to package up the application

58
00:02:49.010 --> 00:02:51.070
and create an image.

59
00:02:51.070 --> 00:02:59.090
So, now it has built an image called explorecali-default.

60
00:02:59.090 --> 00:03:02.080
So, there's the explorecali-default image

61
00:03:02.080 --> 00:03:11.030
and we're actually going to run a container with that image.

62
00:03:11.030 --> 00:03:13.040
So, we're gonna run a container using

63
00:03:13.040 --> 00:03:15.090
the explorecali-default image

64
00:03:15.090 --> 00:03:20.060
and the container will be called ec-app-default.

65
00:03:20.060 --> 00:03:25.010
And it will be exposing tomcat at port 8080.

66
00:03:25.010 --> 00:03:32.010
The next one is if we want to use the

67
00:03:32.010 --> 00:03:34.070
MySQL profile.

68
00:03:34.070 --> 00:03:41.090
So, now that's building the image for MySQL.

69
00:03:41.090 --> 00:03:43.090
And there's the MySQL image

70
00:03:43.090 --> 00:03:46.010
and let's run that.

71
00:03:46.010 --> 00:03:51.070
And this one we're going to run

72
00:03:51.070 --> 00:03:56.080
against the explorecali-mysql image

73
00:03:56.080 --> 00:04:00.050
and we're going to create the ec-app-mysql container.

74
00:04:00.050 --> 00:04:01.060
A big difference here

75
00:04:01.060 --> 00:04:04.080
is we're going to publish port 8181

76
00:04:04.080 --> 00:04:08.030
as the application's port, so that's running

77
00:04:08.030 --> 00:04:10.090
and now the final one is our Docker profile.

78
00:04:10.090 --> 00:04:13.080
Now, remember, we have to have our migration scripts

79
00:04:13.080 --> 00:04:17.060
off of a home directory to run this

80
00:04:17.060 --> 00:04:23.080
whenever we get to the container command.

81
00:04:23.080 --> 00:04:30.070
And now let's run this very long string.

82
00:04:30.070 --> 00:04:35.070
So, this will run the explorecali-docker image

83
00:04:35.070 --> 00:04:39.080
as a container called ec-app-docker.

84
00:04:39.080 --> 00:04:43.090
We're publishing this on port 8282,

85
00:04:43.090 --> 00:04:45.060
as before we're setting the volume

86
00:04:45.060 --> 00:04:47.010
of where the migration scripts are

87
00:04:47.010 --> 00:04:49.030
as well as all of the connection parameters

88
00:04:49.030 --> 00:04:51.000
on our command line

89
00:04:51.000 --> 00:04:59.070
and then we're gonna link into the ec-mysql database.

90
00:04:59.070 --> 00:05:05.030
There's our three Docker images.

91
00:05:05.030 --> 00:05:07.030
And our containers

92
00:05:07.030 --> 00:05:11.030
and we see the mapping of the ports.

93
00:05:11.030 --> 00:05:14.080
82, 8082,

94
00:05:14.080 --> 00:05:17.080
8181 and 8080,

95
00:05:17.080 --> 00:05:19.010
so let's exercise the APIs,

96
00:05:19.010 --> 00:05:26.070
let's get the tours from port 8080.

97
00:05:26.070 --> 00:05:27.050
And there they are and that's fetching it

98
00:05:27.050 --> 00:05:32.030
from the H2 Database.

99
00:05:32.030 --> 00:05:38.090
This is on port 8181 for the MySQL profile.

100
00:05:38.090 --> 00:05:40.090
And there's the data there

101
00:05:40.090 --> 00:05:45.000
and now lastly, the Docker profile for 8282.

