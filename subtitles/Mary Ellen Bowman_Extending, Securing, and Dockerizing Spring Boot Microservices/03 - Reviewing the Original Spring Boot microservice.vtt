WEBVTT
1
00:00:00.006 --> 00:00:01.005
- [Instructor] Our launchpad

2
00:00:01.005 --> 00:00:04.005
is the completed capstone project built for my course,

3
00:00:04.005 --> 00:00:07.002
creating your first spring boot microservice.

4
00:00:07.002 --> 00:00:11.000
Which introduces spring boot, spring data repositories,

5
00:00:11.000 --> 00:00:15.008
spring data rest, and spring MVC rest controllers.

6
00:00:15.008 --> 00:00:17.002
You should flip over to that course

7
00:00:17.002 --> 00:00:20.008
if you are unfamiliar with any of these frameworks.

8
00:00:20.008 --> 00:00:22.009
The microservice provides backend support

9
00:00:22.009 --> 00:00:25.000
for an imaginary California tour company,

10
00:00:25.000 --> 00:00:27.000
called Explore California.

11
00:00:27.000 --> 00:00:29.000
And here's the website for it.

12
00:00:29.000 --> 00:00:31.006
Explore California is a tour operator

13
00:00:31.006 --> 00:00:34.004
that publishes several guided tours.

14
00:00:34.004 --> 00:00:37.008
Those with common themes are grouped into tour packages.

15
00:00:37.008 --> 00:00:42.005
So for example, there's a tour package based on backpacking,

16
00:00:42.005 --> 00:00:47.000
California calm, Hotsprings, et cetera.

17
00:00:47.000 --> 00:00:50.002
And then for each tour package,

18
00:00:50.002 --> 00:00:51.006
we have different tours

19
00:00:51.006 --> 00:00:54.000
such as the Big Sur Retreat,

20
00:00:54.000 --> 00:00:57.003
Channel Island excursion, et cetera.

21
00:00:57.003 --> 00:00:59.001
And for each tour, there are attributes

22
00:00:59.001 --> 00:01:02.007
such as the description, the duration of the tour, the cost,

23
00:01:02.007 --> 00:01:06.005
the difficulty rating and the locale.

24
00:01:06.005 --> 00:01:08.008
The exercise files for the course are available

25
00:01:08.008 --> 00:01:10.007
in my code repository.

26
00:01:10.007 --> 00:01:13.008
Each branch corresponds to a chapter video.

27
00:01:13.008 --> 00:01:16.007
You can view the repo in a browser

28
00:01:16.007 --> 00:01:19.008
or clone it to your desktop.

29
00:01:19.008 --> 00:01:21.007
And of course you can always download

30
00:01:21.007 --> 00:01:23.009
the entire archive as I have,

31
00:01:23.009 --> 00:01:27.004
from the exercise files link on the course page.

32
00:01:27.004 --> 00:01:30.003
Let's open the project with IntelliJ IDEA

33
00:01:30.003 --> 00:01:34.003
or you can use your IDE of choice, that's Maven aware.

34
00:01:34.003 --> 00:01:38.002
So I'm going to open the project

35
00:01:38.002 --> 00:01:41.004
in the desktop,

36
00:01:41.004 --> 00:01:45.008
exercise files, chapter one,

37
00:01:45.008 --> 00:01:47.006
zero one zero one,

38
00:01:47.006 --> 00:01:52.000
and there is the project exploreCali, Java project,

39
00:01:52.000 --> 00:01:54.001
and let's open it,

40
00:01:54.001 --> 00:01:58.001
and give it a moment to resolve dependencies.

41
00:01:58.001 --> 00:02:03.006
And I'm going to enable auto import with Maven on my IDE.

42
00:02:03.006 --> 00:02:07.001
Okay, so it seems like IntelliJ IDEA is happy.

43
00:02:07.001 --> 00:02:10.001
So in our project folder, let's go through

44
00:02:10.001 --> 00:02:13.004
and look at our domain model, in the domain folder

45
00:02:13.004 --> 00:02:18.002
under the com.example.ec package,

46
00:02:18.002 --> 00:02:22.002
we have the TourPackage entity.

47
00:02:22.002 --> 00:02:25.008
For a TourPackage, we have the ID,

48
00:02:25.008 --> 00:02:27.009
which is the code for the package

49
00:02:27.009 --> 00:02:31.000
and the name of the tour package.

50
00:02:31.000 --> 00:02:34.006
Then for a Tour entity,

51
00:02:34.006 --> 00:02:37.009
we have the generated ID,

52
00:02:37.009 --> 00:02:39.009
a title of the tour,

53
00:02:39.009 --> 00:02:43.006
description, blurb, the price,

54
00:02:43.006 --> 00:02:47.000
the duration, bullets about the tour,

55
00:02:47.000 --> 00:02:49.005
quick descriptions keywords,

56
00:02:49.005 --> 00:02:52.008
a reference back to the tour package that it's in,

57
00:02:52.008 --> 00:02:55.008
and two enums,

58
00:02:55.008 --> 00:02:59.002
one for the difficulty of the tour

59
00:02:59.002 --> 00:03:02.008
and one for the region of the tour.

60
00:03:02.008 --> 00:03:06.003
And lastly, we have a TourRating.

61
00:03:06.003 --> 00:03:10.004
A tour rating is the ability for a customer to rate a tour

62
00:03:10.004 --> 00:03:12.004
that they've been on.

63
00:03:12.004 --> 00:03:15.009
And that has an ID that it's an embedded PK,

64
00:03:15.009 --> 00:03:17.003
I'm going to drill down into that,

65
00:03:17.003 --> 00:03:18.009
It's a TourRatingPK,

66
00:03:18.009 --> 00:03:21.006
which has a reference back to the tour

67
00:03:21.006 --> 00:03:25.001
and the customer identifier.

68
00:03:25.001 --> 00:03:27.004
Going back to tour rating,

69
00:03:27.004 --> 00:03:29.006
and so the other attributes that TourRating,

70
00:03:29.006 --> 00:03:32.006
other than that PK primary key is the Score

71
00:03:32.006 --> 00:03:36.005
and a comment that the customer could leave.

72
00:03:36.005 --> 00:03:40.005
Let's look at our spring data repositories,

73
00:03:40.005 --> 00:03:44.002
TourPackageRepository is a credit repository

74
00:03:44.002 --> 00:03:48.007
and the ResourceRel is slash packages.

75
00:03:48.007 --> 00:03:51.007
And we are using Spring Data REST,

76
00:03:51.007 --> 00:03:57.005
so that API is exposed to HTTP.

77
00:03:57.005 --> 00:03:59.009
The same is true for TourRepository,

78
00:03:59.009 --> 00:04:02.002
is a Spring Data repository

79
00:04:02.002 --> 00:04:07.000
that exposes the methods

80
00:04:07.000 --> 00:04:09.006
of a Tour.

81
00:04:09.006 --> 00:04:12.008
And then TourRatingRepository,

82
00:04:12.008 --> 00:04:15.009
we do not export this to REST.

83
00:04:15.009 --> 00:04:18.008
This repository is only invoked

84
00:04:18.008 --> 00:04:21.009
by the TourRatingController.

85
00:04:21.009 --> 00:04:25.003
For RatingController has APIs in it,

86
00:04:25.003 --> 00:04:29.004
the API is, is tours slash tourID and then rating.

87
00:04:29.004 --> 00:04:31.009
And it injects the tourRatingRepository

88
00:04:31.009 --> 00:04:33.009
and the tourRepository.

89
00:04:33.009 --> 00:04:37.002
So for this RestController,

90
00:04:37.002 --> 00:04:40.004
we map API is to create a tour,

91
00:04:40.004 --> 00:04:42.003
to get ratings for a tour,

92
00:04:42.003 --> 00:04:45.009
get the average score for a tour,

93
00:04:45.009 --> 00:04:48.008
update a tour rating,

94
00:04:48.008 --> 00:04:52.007
with the put HTTP verb,

95
00:04:52.007 --> 00:04:57.000
update with patch HTTP verb,

96
00:04:57.000 --> 00:05:01.000
and then we can delete a tour rating.

97
00:05:01.000 --> 00:05:05.009
This demo application uses an in-memory H2 database,

98
00:05:05.009 --> 00:05:07.002
and it is initialized

99
00:05:07.002 --> 00:05:09.008
with a preexisting tours and tour package

100
00:05:09.008 --> 00:05:12.009
at startup in exploreCali application.

101
00:05:12.009 --> 00:05:17.003
So here's our main exploreCali Java class,

102
00:05:17.003 --> 00:05:19.008
that implements command line runner

103
00:05:19.008 --> 00:05:22.000
and within the run method,

104
00:05:22.000 --> 00:05:27.002
is where we create our tour packages at startup.

105
00:05:27.002 --> 00:05:31.003
And then in this importTours()

106
00:05:31.003 --> 00:05:34.007
we will actually import a Json file

107
00:05:34.007 --> 00:05:40.000
called exploreCalifornia.json in the resources folder.

108
00:05:40.000 --> 00:05:45.000
So the application will iterate through these Json objects

109
00:05:45.000 --> 00:05:49.002
and at runtime all of these tours and tour packages

110
00:05:49.002 --> 00:05:53.000
will be able to be invoked as HTTP APIs.

