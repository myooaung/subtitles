WEBVTT
1
00:00:00.050 --> 00:00:03.040
- [Instructor] Enough of this in-memory demo database stuff.

2
00:00:03.040 --> 00:00:06.030
Let's use a true data store that persist data

3
00:00:06.030 --> 00:00:08.050
after the application ends.

4
00:00:08.050 --> 00:00:11.040
Since creating your first Spring Boot microservice

5
00:00:11.040 --> 00:00:14.030
with JPA until now,

6
00:00:14.030 --> 00:00:16.050
H2 was our data store

7
00:00:16.050 --> 00:00:19.060
and it's good for demos or setting up a test bench,

8
00:00:19.060 --> 00:00:22.090
but that's not how applications are in the real world.

9
00:00:22.090 --> 00:00:23.070
You may be thinking,

10
00:00:23.070 --> 00:00:27.010
"Ugh great, to follow along, I need to download and install

11
00:00:27.010 --> 00:00:31.040
"and configure MySQL which will clutter my PC."

12
00:00:31.040 --> 00:00:32.070
I could have taken this approach,

13
00:00:32.070 --> 00:00:35.010
but I thought I would instead incorporate a product

14
00:00:35.010 --> 00:00:37.090
that's become wildly popular in software development

15
00:00:37.090 --> 00:00:41.070
and continuous integration and continuous delivery

16
00:00:41.070 --> 00:00:43.010
and that's Docker.

17
00:00:43.010 --> 00:00:46.060
Docker is used to build, deploy and run containers

18
00:00:46.060 --> 00:00:48.070
for software applications

19
00:00:48.070 --> 00:00:52.080
and it's simply an application delivery technology.

20
00:00:52.080 --> 00:00:54.020
In order to keep up with this course,

21
00:00:54.020 --> 00:00:56.050
I assume you are a Java developer.

22
00:00:56.050 --> 00:00:59.060
The goal of Java is to write once, run anywhere.

23
00:00:59.060 --> 00:01:02.060
You don't have to take Java source code written on a Mac

24
00:01:02.060 --> 00:01:05.040
and recompile it to run on a PC.

25
00:01:05.040 --> 00:01:07.050
You take bytecode.

26
00:01:07.050 --> 00:01:09.030
It could be in the form of .class files,

27
00:01:09.030 --> 00:01:12.010
.jar files, .war or .ear files.

28
00:01:12.010 --> 00:01:15.020
But as long as the Java virtual machine is installed,

29
00:01:15.020 --> 00:01:17.040
the applications will run,

30
00:01:17.040 --> 00:01:20.040
but applications aren't normally standalone.

31
00:01:20.040 --> 00:01:22.060
Infrastructures such as databases,

32
00:01:22.060 --> 00:01:26.080
messaging technology, platform-specific configurations,

33
00:01:26.080 --> 00:01:30.010
standalone UI deployments that include Node,

34
00:01:30.010 --> 00:01:31.080
must all play together nicely

35
00:01:31.080 --> 00:01:34.070
before an application is truly usable.

36
00:01:34.070 --> 00:01:36.010
Docker is used to manage

37
00:01:36.010 --> 00:01:38.060
all the interdependencies of the infrastructure

38
00:01:38.060 --> 00:01:42.020
and gather them together in one or more images,

39
00:01:42.020 --> 00:01:45.060
similar to a Java .jar file.

40
00:01:45.060 --> 00:01:49.070
And then Docker is the platform on which the image is run.

41
00:01:49.070 --> 00:01:52.060
A running image is known as a container.

42
00:01:52.060 --> 00:01:56.000
So, the goal of this chapter is to accomplish the following.

43
00:01:56.000 --> 00:01:58.000
We'll need to install Docker.

44
00:01:58.000 --> 00:02:00.090
Install the MySQL Docker image.

45
00:02:00.090 --> 00:02:04.050
Run the MySQL Docker container.

46
00:02:04.050 --> 00:02:08.000
And then have the Explorecali application

47
00:02:08.000 --> 00:02:11.050
integrate with that MySQL container.

48
00:02:11.050 --> 00:02:13.030
This is not a course on Docker.

49
00:02:13.030 --> 00:02:16.010
There are plenty of courses in the LinkedIn Learning library

50
00:02:16.010 --> 00:02:19.000
which will dig much deeper into the platform,

51
00:02:19.000 --> 00:02:20.060
but I'm gonna guide you through

52
00:02:20.060 --> 00:02:24.080
in a cookbook-type approach for certain usage scenarios.

53
00:02:24.080 --> 00:02:27.010
It's okay if you don't understand at first

54
00:02:27.010 --> 00:02:28.090
and it might just seem like magic,

55
00:02:28.090 --> 00:02:31.010
but be patient and maybe you would jump

56
00:02:31.010 --> 00:02:33.000
on the Docker bandwagon as well.

