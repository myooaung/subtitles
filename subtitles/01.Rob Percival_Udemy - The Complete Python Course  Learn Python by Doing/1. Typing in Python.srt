1
1

00:00:00,270  -->  00:00:02,220
<v Jose>Hi there and welcome back,</v>
2

2

00:00:02,220  -->  00:00:03,490
in this video we're looking at
3

3

00:00:03,490  -->  00:00:07,303
a more advanced Python concept called typing.
4

4

00:00:08,220  -->  00:00:12,400
Python is what's known as a dynamic language,
5

5

00:00:12,400  -->  00:00:16,060
in a dynamic language we don't specify what type
6

6

00:00:16,060  -->  00:00:19,240
of data a variable holds, for example,
7

7

00:00:19,240  -->  00:00:22,430
here we've got a cursor and we're not saying that
8

8

00:00:22,430  -->  00:00:25,100
this cursor has to be a specific type
9

9

00:00:25,100  -->  00:00:28,720
like an integer or a string or a cursor object.
10

10

00:00:28,720  -->  00:00:31,380
In other programming languages like Java for example,
11

11

00:00:31,380  -->  00:00:34,450
you would say Cursor cursor you know?
12

12

00:00:34,450  -->  00:00:39,290
This cursor has to be of type Cursor whatever class this is.
13

13

00:00:39,290  -->  00:00:41,660
But in Python you don't have to say that.
14

14

00:00:41,660  -->  00:00:45,180
Similarly if you create a variable with the value five
15

15

00:00:45,180  -->  00:00:48,173
in Java you would have to say int x is five,
16

16

00:00:49,070  -->  00:00:51,110
because that specifies that x has to be
17

17

00:00:51,110  -->  00:00:52,990
an integer at all times,
18

18

00:00:52,990  -->  00:00:55,870
and if you were to do this you would get an error.
19

19

00:00:55,870  -->  00:00:58,460
Because this string five is not an integer.
20

20

00:00:58,460  -->  00:01:01,900
Java is a statically typed language,
21

21

00:01:01,900  -->  00:01:04,930
a language where you have to specify the type of variables
22

22

00:01:04,930  -->  00:01:06,150
as you create them.
23

23

00:01:06,150  -->  00:01:08,800
But Python is a dynamically typed language,
24

24

00:01:08,800  -->  00:01:11,290
which means you don't have to do that.
25

25

00:01:11,290  -->  00:01:14,575
It means you are a bit more flexible
26

26

00:01:14,575  -->  00:01:17,190
because your variable can change types
27

27

00:01:17,190  -->  00:01:18,963
between executions if you want,
28

28

00:01:20,040  -->  00:01:22,860
and also there is a bit less code to write
29

29

00:01:22,860  -->  00:01:24,760
because you don't have to constantly define
30

30

00:01:24,760  -->  00:01:26,393
what every variable is.
31

31

00:01:27,360  -->  00:01:30,310
However it also has some drawbacks,
32

32

00:01:30,310  -->  00:01:33,610
and the main drawback is that sometimes you can use
33

33

00:01:33,610  -->  00:01:36,270
a variable, thinking it is one thing
34

34

00:01:36,270  -->  00:01:38,900
but it is really something else and you're not clear
35

35

00:01:38,900  -->  00:01:40,990
about that because you don't have anything
36

36

00:01:40,990  -->  00:01:42,673
that tells you what type it is.
37

37

00:01:43,830  -->  00:01:47,300
For example if you have a variable called friends
38

38

00:01:47,300  -->  00:01:49,373
and it's a tuple of your friends.
39

39

00:01:50,880  -->  00:01:53,090
At some point later on in the programme maybe you forget
40

40

00:01:53,090  -->  00:01:56,400
that it's a tuple and down here you try to do friends.append
41

41

00:01:56,400  -->  00:01:59,080
something, obviously this wouldn't work
42

42

00:01:59,080  -->  00:02:01,550
because you can't append on a tuple but because you weren't
43

43

00:02:01,550  -->  00:02:03,940
seeing this code at that moment in time
44

44

00:02:03,940  -->  00:02:05,140
you didn't realise that.
45

45

00:02:06,150  -->  00:02:08,800
That's one of the problems with dynamically typed languages
46

46

00:02:08,800  -->  00:02:13,700
like Python so Python has introduced in Python three,
47

47

00:02:13,700  -->  00:02:18,700
the concept of typing where you can tell your editor
48

48

00:02:19,030  -->  00:02:22,500
PyCharm and some other third party programmes
49

49

00:02:22,500  -->  00:02:27,460
what your functions return and what your parameter types
50

50

00:02:27,460  -->  00:02:29,861
should be so that when you're programming
51

51

00:02:29,861  -->  00:02:31,933
it's a bit clearer what you're doing.
52

52

00:02:33,340  -->  00:02:37,680
Here's an example on how you might tell Python
53

53

00:02:37,680  -->  00:02:38,920
what your function returns,
54

54

00:02:38,920  -->  00:02:42,760
for example this create book table returns none
55

55

00:02:42,760  -->  00:02:45,660
and we know that because all Python functions
56

56

00:02:45,660  -->  00:02:47,760
return none by default if you don't include
57

57

00:02:47,760  -->  00:02:51,500
a return statement, so what can you do?
58

58

00:02:51,500  -->  00:02:54,630
You can tell Python that when you call this function
59

59

00:02:54,630  -->  00:02:56,460
you expect it to return none.
60

60

00:02:56,460  -->  00:02:59,710
You do this like so.
61

61

00:02:59,710  -->  00:03:02,490
After the function definition, but before the colon
62

62

00:03:02,490  -->  00:03:06,653
you put this dash greater than, none.
63

63

00:03:09,320  -->  00:03:12,620
Now when you go back to app.py
64

64

00:03:12,620  -->  00:03:16,070
and you've got here database.create book table.
65

65

00:03:16,070  -->  00:03:20,219
You can say something like my variable equals that
66

66

00:03:20,219  -->  00:03:22,680
but notice how now PyCharm gives you this squiggly line
67

67

00:03:22,680  -->  00:03:25,040
underneath and it says create book table
68

68

00:03:25,040  -->  00:03:26,263
doesn't return anything.
69

69

00:03:27,200  -->  00:03:29,180
Therefore you probably don't want to assign it
70

70

00:03:29,180  -->  00:03:31,630
to a variable because that's pretty pointless.
71

71

00:03:31,630  -->  00:03:33,380
Since the value's going to be none.
72

72

00:03:34,470  -->  00:03:37,300
If you remove the none which you can do of course
73

73

00:03:37,300  -->  00:03:40,610
it's totally optional that now disappears,
74

74

00:03:40,610  -->  00:03:43,040
because PyCharm is not aware that the function
75

75

00:03:43,040  -->  00:03:44,240
doesn't return anything.
76

76

00:03:45,700  -->  00:03:50,700
Okay, so again you can include these type hints,
77

77

00:03:50,940  -->  00:03:52,930
that's what they're called.
78

78

00:03:52,930  -->  00:03:56,083
But, they are not enforced by Python.
79

79

00:03:56,930  -->  00:04:00,000
These are only useful when you're developing
80

80

00:04:00,000  -->  00:04:02,710
in PyCharm or when you use a couple other
81

81

00:04:02,710  -->  00:04:05,080
pieces of software that will analyse your code
82

82

00:04:05,080  -->  00:04:08,250
and tell you when you are doing things like assigning
83

83

00:04:08,250  -->  00:04:09,780
a variable to a function that is meant
84

84

00:04:09,780  -->  00:04:13,440
to return none, when you run your programme,
85

85

00:04:13,440  -->  00:04:16,000
Python completely ignores these type hints
86

86

00:04:16,000  -->  00:04:17,400
and it doesn't do anything with them.
87

87

00:04:17,400  -->  00:04:19,960
You won't get any errors for using them incorrectly,
88

88

00:04:19,960  -->  00:04:22,440
or for assigning to a variable the return value
89

89

00:04:22,440  -->  00:04:24,540
of this function even if it is none.
90

90

00:04:24,540  -->  00:04:26,550
So again these are only just for you,
91

91

00:04:26,550  -->  00:04:30,000
and the most common use case is when you are developing
92

92

00:04:30,000  -->  00:04:33,403
with PyCharm because PyCharm makes good use of these things.
93

93

00:04:35,580  -->  00:04:39,490
Okay similarly the add book function also returns none
94

94

00:04:39,490  -->  00:04:44,160
so we can make it return none there.
95

95

00:04:44,160  -->  00:04:46,450
Now when you call the function if you try to assign it
96

96

00:04:46,450  -->  00:04:48,500
to a variable, once again you'll get a wee message
97

97

00:04:48,500  -->  00:04:50,500
saying hey this function doesn't return anything,
98

98

00:04:50,500  -->  00:04:52,303
are you sure you want to do this?
99

99

00:04:54,570  -->  00:04:56,260
So that's for each function.
100

100

00:04:56,260  -->  00:04:59,990
Let's go and add a return value for each function
101

101

00:04:59,990  -->  00:05:01,803
in our database interface.
102

102

00:05:03,320  -->  00:05:05,740
I'm going to ignore the get all books for now,
103

103

00:05:05,740  -->  00:05:07,650
we'll do this one at the end.
104

104

00:05:07,650  -->  00:05:10,363
So as you can see all our functions return none,
105

105

00:05:14,160  -->  00:05:18,490
and we can add that in, now we can go back to get all books
106

106

00:05:18,490  -->  00:05:20,750
and we can say that this is going to return
107

107

00:05:22,030  -->  00:05:26,420
a list of dicts because it returns a list
108

108

00:05:27,258  -->  00:05:30,060
of dictionaries here, of course we get red squiggly lines,
109

109

00:05:30,060  -->  00:05:32,500
because PyCharm doesn't know what these two are.
110

110

00:05:32,500  -->  00:05:34,460
So we have to go and import them.
111

111

00:05:34,460  -->  00:05:37,030
Whenever you want to import anything that's related
112

112

00:05:37,030  -->  00:05:40,236
to type hinting like this here,
113

113

00:05:40,236  -->  00:05:42,770
we can import it from the typing module.
114

114

00:05:42,770  -->  00:05:44,070
This is new in Python 3.5,
115

115

00:05:49,070  -->  00:05:52,040
and there we have it, now it's happy that it's returning
116

116

00:05:52,040  -->  00:05:54,160
a list of dictionaries.
117

117

00:05:54,160  -->  00:05:57,640
If you want you can also tell it what each
118

118

00:05:57,640  -->  00:06:00,150
of the keys and values are.
119

119

00:06:00,150  -->  00:06:04,810
So you could say inside brackets, str which means string.
120

120

00:06:04,810  -->  00:06:07,573
This is the string class for the keys,
121

121

00:06:09,910  -->  00:06:11,840
and str for the values.
122

122

00:06:11,840  -->  00:06:14,160
That would say that every key is a string
123

123

00:06:14,160  -->  00:06:15,973
and every value is a string.
124

124

00:06:17,010  -->  00:06:19,120
Now of course we know that the red status
125

125

00:06:19,120  -->  00:06:20,173
can be an integer.
126

126

00:06:21,020  -->  00:06:23,110
Therefore we must do something else,
127

127

00:06:23,110  -->  00:06:26,180
we have to do that they keys can be strings,
128

128

00:06:26,180  -->  00:06:27,420
all of the keys are strings.
129

129

00:06:27,420  -->  00:06:30,770
Name author in red but the values are a union
130

130

00:06:31,680  -->  00:06:35,700
of string and integer, and again we have to import this
131

131

00:06:35,700  -->  00:06:38,773
of course from the typing module.
132

132

00:06:39,720  -->  00:06:42,511
Now this says that this function returns a list
133

133

00:06:42,511  -->  00:06:45,200
of dictionaries where each key is a string
134

134

00:06:45,200  -->  00:06:48,323
and each value is either a string or an integer.
135

135

00:06:49,320  -->  00:06:51,050
Notice that's what the union does
136

136

00:06:51,050  -->  00:06:52,653
and this is what the dict does.
137

137

00:06:53,600  -->  00:06:55,990
Now in order to simplify we can actually create
138

138

00:06:55,990  -->  00:06:58,730
our own types which is pretty exciting.
139

139

00:06:58,730  -->  00:07:02,180
We can cut this code here I'm gonna cut it with Command + X
140

140

00:07:02,180  -->  00:07:05,273
or Control + X in Windows and say that it's going to return
141

141

00:07:05,273  -->  00:07:08,630
a list of books, then we can go up to the top
142

142

00:07:09,840  -->  00:07:13,520
and say that Book is what we cut earlier.
143

143

00:07:13,520  -->  00:07:17,220
A Book type is a new type that is a dict
144

144

00:07:17,220  -->  00:07:19,260
of strings to strings or integers
145

145

00:07:20,200  -->  00:07:22,770
and then down here we can use our new Book type
146

146

00:07:22,770  -->  00:07:25,240
to simplify our code and make it a bit more explicit,
147

147

00:07:25,240  -->  00:07:26,440
exactly what's going on.
148

148

00:07:28,830  -->  00:07:31,240
Notice that when you create a new type
149

149

00:07:31,240  -->  00:07:33,530
because it's sort of like a class,
150

150

00:07:33,530  -->  00:07:36,350
even though it's not used as a class.
151

151

00:07:36,350  -->  00:07:40,411
You normally would give them a capital letter to begin with.
152

152

00:07:40,411  -->  00:07:41,820
This is just the convention you can of course give them
153

153

00:07:41,820  -->  00:07:44,783
lowercase letters if you want and that's totally fine.
154

154

00:07:46,720  -->  00:07:48,920
Okay now that we've looked at return values,
155

155

00:07:50,100  -->  00:07:52,558
we can now look at the parameters.
156

156

00:07:52,558  -->  00:07:55,210
The name is going to be a string,
157

157

00:07:55,210  -->  00:07:58,240
so you'd think that we would do this.
158

158

00:07:58,240  -->  00:08:00,870
However this dash and greater than is only used
159

159

00:08:00,870  -->  00:08:03,607
for return values, when you want to determine
160

160

00:08:03,607  -->  00:08:08,150
or define the type of a parameter you use the colon here.
161

161

00:08:08,150  -->  00:08:10,060
Mildly confusing because the colon's normally
162

162

00:08:10,060  -->  00:08:12,066
used to signal the start of a block.
163

163

00:08:12,066  -->  00:08:15,970
This is one of the few times where you use a colon
164

164

00:08:15,970  -->  00:08:17,450
to determine something else,
165

165

00:08:17,450  -->  00:08:19,780
this and list splicing are two examples
166

166

00:08:19,780  -->  00:08:21,390
that come to the top of my head.
167

167

00:08:21,390  -->  00:08:24,413
Author is also going to be a string, so that's that.
168

168

00:08:25,450  -->  00:08:27,670
Notice that if you go over to app.py
169

169

00:08:27,670  -->  00:08:31,770
into the add book function and you replace name
170

170

00:08:31,770  -->  00:08:34,470
by something that's not a string like five
171

171

00:08:34,470  -->  00:08:36,570
PyCharm now gives you that yellow background that
172

172

00:08:36,570  -->  00:08:40,360
is not so readable and it says expected type str
173

173

00:08:40,360  -->  00:08:43,600
got int, so it can help you when you are
174

174

00:08:43,600  -->  00:08:47,060
developing but Python is not going to enforce this
175

175

00:08:47,060  -->  00:08:49,580
when yo uare coding so if you do type five there
176

176

00:08:49,580  -->  00:08:50,520
and you run the programme
177

177

00:08:50,520  -->  00:08:53,230
you won't get any errors you'll just input
178

178

00:08:53,230  -->  00:08:55,060
the name as five and then you get an error
179

179

00:08:55,060  -->  00:08:58,777
in SQLite because the type is defined as a text.
180

180

00:09:02,400  -->  00:09:04,840
Going back to database we can do the same for any other
181

181

00:09:04,840  -->  00:09:08,130
functions that need parameters like mark book as read
182

182

00:09:08,130  -->  00:09:11,233
also a string and delete book also a string.
183

183

00:09:12,930  -->  00:09:17,060
Okay, not too many of Python's libraries
184

184

00:09:17,060  -->  00:09:19,430
and projects and things like that use type hinting.
185

185

00:09:19,430  -->  00:09:23,420
Because it is quite new, but I can recommend using it
186

186

00:09:23,420  -->  00:09:26,200
in your projects it will help you over time
187

187

00:09:26,200  -->  00:09:29,190
as your projects grow and also it sort of gives you
188

188

00:09:29,190  -->  00:09:30,570
a bit more readability in terms
189

189

00:09:30,570  -->  00:09:33,030
of okay what's going to happen with a name here?
190

190

00:09:33,030  -->  00:09:35,228
It's a strong so probably gonna use it as a string
191

191

00:09:35,228  -->  00:09:38,260
then you won't try to append things to it
192

192

00:09:38,260  -->  00:09:40,350
inside this function for example.
193

193

00:09:40,350  -->  00:09:44,940
Indeed if you try to do name.append it'll tell you
194

194

00:09:44,940  -->  00:09:48,390
that this is unlikely, unresolved reference append
195

195

00:09:48,390  -->  00:09:51,090
for class string PyCharm now thinks that
196

196

00:09:51,090  -->  00:09:54,510
name is a string even though it doesn't have any context
197

197

00:09:54,510  -->  00:09:57,160
on where it was defined just because you said
198

198

00:09:57,160  -->  00:09:58,900
that it should be a string.
199

199

00:09:58,900  -->  00:10:01,640
So if you try to append something as if it were a list,
200

200

00:10:01,640  -->  00:10:04,110
it will tell you this is wrong.
201

201

00:10:04,110  -->  00:10:06,123
Of course if you change this to a list,
202

202

00:10:07,290  -->  00:10:08,870
now you can do name.append
203

203

00:10:08,870  -->  00:10:10,350
and notice how it already likes it
204

204

00:10:10,350  -->  00:10:12,400
and it tells you hey you can append here.
205

205

00:10:13,490  -->  00:10:15,470
Okay so type hinting pretty useful,
206

206

00:10:15,470  -->  00:10:19,300
helps you helps PyCharm give you good suggestions
207

207

00:10:19,300  -->  00:10:21,020
and overall as your apps grow,
208

208

00:10:21,020  -->  00:10:24,890
it's gonna help them stay a bit more maintainable.
209

209

00:10:24,890  -->  00:10:27,280
So definitely a good thing to be doing.
210

210

00:10:27,280  -->  00:10:30,140
Feel free to do that for other functions in here,
211

211

00:10:30,140  -->  00:10:32,420
but the most important functions for you to do that in
212

212

00:10:32,420  -->  00:10:34,270
are those functions that you're going to call
213

213

00:10:34,270  -->  00:10:36,080
and receive values from.
214

214

00:10:36,080  -->  00:10:38,530
Your menus and things like that probably not so important
215

215

00:10:38,530  -->  00:10:40,580
since nothing's calling them and they are not taking
216

216

00:10:40,580  -->  00:10:43,460
any parameters, there's not much to define there.
217

217

00:10:43,460  -->  00:10:44,730
You could return the function,
218

218

00:10:44,730  -->  00:10:47,090
you could define the function returns none.
219

219

00:10:47,090  -->  00:10:48,870
But because nothing's calling this function
220

220

00:10:48,870  -->  00:10:52,500
other than you up here, it doesn't matter much
221

221

00:10:52,500  -->  00:10:54,650
I wouldn't worry too much about doing that.
222

222

00:10:55,530  -->  00:10:59,100
Okay we can go over to the database connection
223

223

00:10:59,100  -->  00:11:03,520
and we can also define that the enter method
224

224

00:11:03,520  -->  00:11:04,970
is going to return something
225

225

00:11:06,070  -->  00:11:09,960
and what it's going to return is not a type
226

226

00:11:09,960  -->  00:11:14,300
from the typing module but a type from the SQLite3 module
227

227

00:11:14,300  -->  00:11:18,020
that SQLite3.connection.
228

228

00:11:18,020  -->  00:11:22,650
Notice that the connection here is not a type per-se
229

229

00:11:22,650  -->  00:11:25,610
it is an actual class, it is something that you can
230

230

00:11:25,610  -->  00:11:28,070
create and that indeed this connection gets created
231

231

00:11:28,070  -->  00:11:30,290
when you call SQLite3.connect,
232

232

00:11:30,290  -->  00:11:32,077
and that's fine you can tell PyCharm
233

233

00:11:32,077  -->  00:11:35,470
that this is going to return a proper class.
234

234

00:11:35,470  -->  00:11:37,670
Totally cool it doesn't have to be a type
235

235

00:11:37,670  -->  00:11:41,130
from the typing model it doesn't have to be str or int.
236

236

00:11:41,130  -->  00:11:44,060
It can be an actual class that you have defined
237

237

00:11:44,060  -->  00:11:46,530
or that is defined in some other module.
238

238

00:11:46,530  -->  00:11:51,330
Now when we go over to database.py PyCharm will be able
239

239

00:11:51,330  -->  00:11:54,550
to advise us that the connection object
240

240

00:11:54,550  -->  00:11:57,550
has all these things from the SQLite module.
241

241

00:11:57,550  -->  00:11:59,423
Which is pretty handy, okay.
242

242

00:12:00,490  -->  00:12:02,870
So again good for you, good for PyCharm,
243

243

00:12:02,870  -->  00:12:04,490
good for your projects as they grow.
244

244

00:12:04,490  -->  00:12:06,443
Definitely recommend that you do this.
245

245

00:12:07,350  -->  00:12:08,620
So that's it for this video,
246

246

00:12:08,620  -->  00:12:10,243
and I'll see you in the next one.
