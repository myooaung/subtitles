0
1
00:00:01,390 --> 00:00:02,940
Hi guys and welcome back.
1

2
00:00:02,950 --> 00:00:07,820
In this video we're going to learn about first class functions in Python.
2

3
00:00:07,840 --> 00:00:14,020
Functions are first class citizens and that means that just like strings and integers and anything else
3

4
00:00:14,020 --> 00:00:21,100
really we can assign functions to variables and we can pass them in as arguments to other functions.
4

5
00:00:21,100 --> 00:00:24,370
We're going to learn more about doing just that in a later video.
5

6
00:00:24,370 --> 00:00:25,180
In this course.
6

7
00:00:25,270 --> 00:00:30,220
But for now let's focus on assigning them to variables and using them as values in lists and things
7

8
00:00:30,220 --> 00:00:33,690
like that and why that can be useful.
8

9
00:00:33,700 --> 00:00:41,680
Let's get started let's say that we've got a greet function that prints hello.
9

10
00:00:41,890 --> 00:00:45,900
You know that of course we can call the greet function and that's going to run it.
10

11
00:00:46,080 --> 00:00:51,390
And the calling of the function happens when you use the brackets after the function name.
11

12
00:00:51,420 --> 00:00:55,260
So what happens if you just use the function name.
12

13
00:00:55,260 --> 00:00:57,750
Well we know that that's not going to run the function.
13

14
00:00:57,990 --> 00:01:02,720
So we get no output but this is still valid python syntax.
14

15
00:01:02,730 --> 00:01:09,000
What this does python is that we're talking about this function here about the value of the function
15

16
00:01:09,000 --> 00:01:10,140
itself.
16

17
00:01:10,140 --> 00:01:12,890
We don't want to run it but we aren't talking about it.
17

18
00:01:12,900 --> 00:01:20,760
We are referring to it when we have a value just as a number a string or anything else including a function
18

19
00:01:21,090 --> 00:01:29,760
we can assign it to a variable we can say this name here this Hello name is now a name for the value
19

20
00:01:29,760 --> 00:01:33,160
that this references and that is the function.
20

21
00:01:33,180 --> 00:01:41,430
So now after this line hello and greet are the same value and therefore that means that we can run the
21

22
00:01:41,460 --> 00:01:46,100
Hello Function and you can see here that that's going to print out Hello.
22

23
00:01:46,230 --> 00:01:49,800
This is what I mean when I say that a function is a first class citizen.
23

24
00:01:49,800 --> 00:01:51,590
You can assign it to variables.
24

25
00:01:51,690 --> 00:01:57,950
And as we learn you can put it inside lists or dictionaries or anything else like I mentioned earlier
25

26
00:01:57,960 --> 00:02:03,870
you can also pass functions to other functions as arguments but we won't look at that until much later
26

27
00:02:03,870 --> 00:02:05,490
on in the course.
27

28
00:02:05,690 --> 00:02:07,850
And this is not a particularly useful example.
28

29
00:02:07,980 --> 00:02:11,560
So let's move on to a more useful one.
29

30
00:02:11,700 --> 00:02:12,440
Imagine that.
30

31
00:02:12,450 --> 00:02:18,360
I want to create a function that calculates the average of a sequence.
31

32
00:02:18,360 --> 00:02:27,630
So for example def average like that takes in a sequence and then returns the sum of sequence divided
32

33
00:02:27,630 --> 00:02:29,250
by the length of the sequence
33

34
00:02:31,860 --> 00:02:32,670
pretty normal function.
34

35
00:02:32,670 --> 00:02:34,060
We've seen this before.
35

36
00:02:34,170 --> 00:02:40,080
So we can recreate this as a lambda function just for shortness and we covered how to do this earlier
36

37
00:02:40,080 --> 00:02:46,410
on there would be lambda seq is a sum of that divided by that.
37

38
00:02:46,410 --> 00:02:50,040
So this is the same stuff just this one is as a lambda function.
38

39
00:02:50,040 --> 00:02:53,430
The reason why I'm making this a lambda function and not a normal function is just because a little
39

40
00:02:53,430 --> 00:02:59,490
bit shorter and these other functions that we're going to create here are also good lambda functions
40

41
00:03:06,900 --> 00:03:07,460
just like that.
41

42
00:03:07,460 --> 00:03:08,770
So now we've got three functions.
42

43
00:03:08,780 --> 00:03:10,470
Average total and top.
43

44
00:03:10,640 --> 00:03:13,280
The average one calculates the average total.
44

45
00:03:13,280 --> 00:03:18,790
Calculate the sum and top calculates the maximum value of a sequence.
45

46
00:03:18,800 --> 00:03:22,980
Now let's say we've got a list of students that I'm gonna paste in here.
46

47
00:03:23,210 --> 00:03:30,920
We've got a list of dictionaries and each student has a bunch of grades associated with them and that
47

48
00:03:30,950 --> 00:03:32,440
is a couple of numbers.
48

49
00:03:32,450 --> 00:03:35,900
So that's let's say the grades that they got in an exam.
49

50
00:03:35,900 --> 00:03:40,640
Let's use these functions now to operate on these grades.
50

51
00:03:40,640 --> 00:03:50,370
How we do it is we'd say for student in students we're going to get the name as a student name and the
51

52
00:03:50,370 --> 00:03:57,050
grades as a student grades just like that then we're going to print out the student name
52

53
00:04:00,130 --> 00:04:03,390
and finally we're going to ask the user what they want to do.
53

54
00:04:03,430 --> 00:04:05,830
Do they want to calculate the average of their grades.
54

55
00:04:05,920 --> 00:04:09,730
The total of their grades or the top value that they got.
55

56
00:04:09,730 --> 00:04:20,410
So we'll say that the operation is input and we'll ask them to enter either average total or top.
56

57
00:04:20,960 --> 00:04:25,670
I'm sorry that this has gone into two lines that I'm just gonna move that a bit.
57

58
00:04:25,720 --> 00:04:26,410
There we go.
58

59
00:04:26,410 --> 00:04:32,350
So now we're going to ask for each student what the user wants to do with their grades.
59

60
00:04:32,350 --> 00:04:39,250
Now comes the simple part which is to write an if statement that deals with this user input we know
60

61
00:04:39,250 --> 00:04:41,310
how to do this we've done this a lot of times before.
61

62
00:04:41,380 --> 00:04:47,050
If the operation is equal to average then we will print the average of grades.
62

63
00:04:47,050 --> 00:04:51,370
So nothing new here we're saying that if the user entered the word average.
63

64
00:04:51,370 --> 00:04:52,270
Exactly.
64

65
00:04:52,270 --> 00:04:59,170
Then we're going to print the result of calling the a v g function which was defined up here on the
65

66
00:04:59,170 --> 00:05:04,090
student grades which are each tuple for each student.
66

67
00:05:04,090 --> 00:05:10,960
So let's just run this at this point and of course if we enter average then we get the average grade
67

68
00:05:10,960 --> 00:05:12,030
for Roth.
68

69
00:05:12,030 --> 00:05:14,860
If we enter average again then we get the average grade for Bob.
69

70
00:05:15,220 --> 00:05:19,750
If we end does something else like total we get nothing because we haven't quoted that part of the if
70

71
00:05:19,750 --> 00:05:21,570
statement yet.
71

72
00:05:21,730 --> 00:05:23,470
Let me stop this here.
72

73
00:05:23,500 --> 00:05:26,140
If we completed the other operations they would look like this.
73

74
00:05:26,140 --> 00:05:28,750
If the operation is total then we print out the total.
74

75
00:05:28,750 --> 00:05:32,200
Otherwise if it stop we print out the top nothing new there.
75

76
00:05:32,200 --> 00:05:37,930
So how can we make this code a bit better a bit shorter a bit simpler.
76

77
00:05:37,930 --> 00:05:45,670
The first thing that we have to realize is that we're asking the user to select what they want to do
77

78
00:05:46,390 --> 00:05:49,520
using code language if you will.
78

79
00:05:49,550 --> 00:05:54,910
And so what we're doing here is we're giving the user a few specific options and then we're selecting
79

80
00:05:55,360 --> 00:05:59,800
one of those options that matches something in our code a function that we want to run.
80

81
00:06:00,700 --> 00:06:09,400
Therefore if we can say select whatever the user entered and run the function associated with that that's
81

82
00:06:09,400 --> 00:06:10,630
going to make our code a bit simpler.
82

83
00:06:10,990 --> 00:06:14,950
So how do we create associations in Python.
83

84
00:06:15,010 --> 00:06:15,910
We use dictionaries.
84

85
00:06:16,810 --> 00:06:25,810
So we'll create an operations dictionary and we'll associate each thing that the user can enter with
85

86
00:06:25,960 --> 00:06:28,090
one of the functions that we defined above
86

87
00:06:33,050 --> 00:06:33,590
just like that.
87

88
00:06:33,590 --> 00:06:41,520
So now we've got an operations dictionary that maps user inputs to functions and once we have that all
88

89
00:06:41,530 --> 00:06:48,820
we have to do is get the operation function by saying operations operation.
89

90
00:06:49,430 --> 00:06:56,300
So that is going to go into the operations dictionary and get us the key that matches the user's input.
90

91
00:06:56,300 --> 00:07:00,940
So if they entered average then that's going to get us a VIP.
91

92
00:07:01,010 --> 00:07:09,530
The ABC function not the result of running the ABC function but the ABC function itself and so on with
92

93
00:07:09,530 --> 00:07:10,640
the others.
93

94
00:07:10,640 --> 00:07:18,080
Therefore once we have the operation function we can call it with the student grades.
94

95
00:07:18,080 --> 00:07:22,250
So now if we run that you'll see that we can enter for example top.
95

96
00:07:22,610 --> 00:07:26,320
And we get one hundred which is the top grade for Ralf for Bob.
96

97
00:07:26,320 --> 00:07:30,440
We can enter average and we get seventy six which is their average.
97

98
00:07:30,500 --> 00:07:39,830
And if we enter something completely random like something else we get an error.
98

99
00:07:39,890 --> 00:07:46,370
Now this is the compromise that we're making when we use a dictionary instead of an if statement with
99

100
00:07:46,370 --> 00:07:50,600
a dictionary we're going to get an error when we're trying to access a key that doesn't exist.
100

101
00:07:50,900 --> 00:07:54,100
But with an if statement we would not get an error there.
101

102
00:07:54,710 --> 00:07:59,770
What we can do is we can use error handling to catch the error and print a nice error message instead.
102

103
00:07:59,990 --> 00:08:03,770
But we're going to learn how to do that later on in this course.
103

104
00:08:03,800 --> 00:08:07,130
Something else to remember is that we can make this code even shorter if we want.
104

105
00:08:07,220 --> 00:08:14,420
And if we're comfortable with that by in lining the lambda functions into this dictionary I'm not entirely
105

106
00:08:14,420 --> 00:08:15,780
sure how I feel about this.
106

107
00:08:15,800 --> 00:08:19,960
I think it's getting a bit complicated but you can do it if you want.
107

108
00:08:19,970 --> 00:08:26,030
With these functions that are relatively small and simple I think it's probably OK but if it gets more
108

109
00:08:26,030 --> 00:08:30,830
complicated if your functions are doing more things you'll definitely want to separate them out and
109

110
00:08:30,830 --> 00:08:37,070
use the operations dictionary to sort of compile them into one readable block of things that a user
110

111
00:08:37,070 --> 00:08:39,290
can do in your code.
111

112
00:08:39,710 --> 00:08:45,500
Something else that I wanted to mention at this point is that we've got here sort of like a proxy function
112

113
00:08:45,530 --> 00:08:53,120
something that we define as a function that just calls another function with the same arguments.
113

114
00:08:53,120 --> 00:09:00,890
So you can see that our function here is just receiving an argument passing it to the sum function and
114

115
00:09:00,890 --> 00:09:02,170
calling that.
115

116
00:09:02,180 --> 00:09:09,610
So instead of doing that we could just use the sum function directly.
116

117
00:09:09,700 --> 00:09:10,410
Why.
117

118
00:09:10,460 --> 00:09:17,690
Because now when we access the some function through these operations dictionary and we call it will
118

119
00:09:17,690 --> 00:09:22,230
essentially be calling some of grades which is what we were doing before.
119

120
00:09:22,310 --> 00:09:27,550
But just we've removed one layer of our own functions but wasn't really doing anything.
120

121
00:09:27,650 --> 00:09:30,850
So that's just the small optimization thing you can do there.
121

122
00:09:30,920 --> 00:09:35,780
You can use some and Max directly instead of coding your own lambda functions of course we can't do
122

123
00:09:35,780 --> 00:09:41,570
that for this one because it's not just passing the argument to another function it's actually using
123

124
00:09:41,570 --> 00:09:42,670
two functions there.
124

125
00:09:42,740 --> 00:09:46,460
So we can do that there but we can simplify those too.
125

126
00:09:46,580 --> 00:09:52,370
Now in lining the functions makes more sense because we're just using some buildings we're not really
126

127
00:09:52,370 --> 00:09:55,400
adding any complexity.
127

128
00:09:55,960 --> 00:09:56,350
All right.
128

129
00:09:56,400 --> 00:09:57,330
I hope this makes sense.
129

130
00:09:57,330 --> 00:10:02,580
I know it's a little bit tricky to deal with these first class functions but just remember any function
130

131
00:10:02,700 --> 00:10:07,770
is just a value and it just so happens that if you put a better brackets after its name it's going to
131

132
00:10:07,770 --> 00:10:12,900
run and it's going to execute the code inside it but you can still refer to them by name and use them
132

133
00:10:13,050 --> 00:10:13,930
as values.
133

134
00:10:14,670 --> 00:10:17,330
So I hope this has been useful and I'll see you in the next video.
