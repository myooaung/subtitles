WEBVTT
1
1

00:00:00.350  -->  00:00:02.430
<v ->Hi guys and welcome back.</v>
2

2

00:00:02.430  -->  00:00:05.410
Very often in our programmes, we'll be dealing with numbers.
3

3

00:00:05.410  -->  00:00:07.490
But almost as often, if not more,
4

4

00:00:07.490  -->  00:00:09.600
we will want to deal with text.
5

5

00:00:09.600  -->  00:00:11.490
The user will be giving us some text
6

6

00:00:11.490  -->  00:00:12.950
that we want to interact with.
7

7

00:00:12.950  -->  00:00:14.680
We will be doing some processing on it,
8

8

00:00:14.680  -->  00:00:17.740
we will be wanting to print some text out to the screen,
9

9

00:00:17.740  -->  00:00:20.493
and that is where the next datatype comes in.
10

10

00:00:21.370  -->  00:00:24.540
In Python, we've got another type called strings
11

11

00:00:24.540  -->  00:00:27.440
that are used to contain text like characters,
12

12

00:00:27.440  -->  00:00:30.760
symbols, numbers, or anything else we want.
13

13

00:00:30.760  -->  00:00:35.060
Here's our first string that I'm gonna call my string
14

14

00:00:35.060  -->  00:00:38.380
and it contains the value, hello world.
15

15

00:00:38.380  -->  00:00:40.140
So a couple of things about this string is
16

16

00:00:40.140  -->  00:00:43.820
that it is surrounded by double quotation marks.
17

17

00:00:43.820  -->  00:00:46.200
You can also use single quotations mark if you like,
18

18

00:00:46.200  -->  00:00:48.210
but it's important that the start
19

19

00:00:48.210  -->  00:00:50.160
and the end quotation mark match.
20

20

00:00:50.160  -->  00:00:51.370
So they have to be the same,
21

21

00:00:51.370  -->  00:00:53.240
you can't mix and match them.
22

22

00:00:53.240  -->  00:00:56.780
So this here would be invalid because the start quote
23

23

00:00:56.780  -->  00:00:58.380
and the end quote are different.
24

24

00:00:59.540  -->  00:01:02.180
I like using double quotation marks, but that's just me.
25

25

00:01:02.180  -->  00:01:03.940
You can use whichever one you like.
26

26

00:01:03.940  -->  00:01:08.940
This string here contains the characters H, E, L, L,
27

27

00:01:09.150  -->  00:01:11.420
and so on, including the comma and the space
28

28

00:01:11.420  -->  00:01:13.230
and the exclamation mark.
29

29

00:01:13.230  -->  00:01:16.440
When Python looks at this string, it knows nothing about it.
30

30

00:01:16.440  -->  00:01:18.280
It doesn't care what its contents are.
31

31

00:01:18.280  -->  00:01:21.760
It doesn't have any meaning like the number 30 does
32

32

00:01:21.760  -->  00:01:24.650
because you can do maths on it, for example.
33

33

00:01:24.650  -->  00:01:28.240
A string doesn't have any intrinsic meaning for Python.
34

34

00:01:28.240  -->  00:01:31.113
All it's used for is to carry these characters.
35

35

00:01:31.990  -->  00:01:35.410
For example, you can use it to print some information out
36

36

00:01:35.410  -->  00:01:37.360
to the user, like hello world.
37

37

00:01:37.360  -->  00:01:38.950
If you wanted to print that out,
38

38

00:01:38.950  -->  00:01:41.993
you can store it inside a string and then print it.
39

39

00:01:43.370  -->  00:01:46.330
As an aside, remember you can always use the value itself
40

40

00:01:46.330  -->  00:01:50.090
instead of a variable inside the print function here
41

41

00:01:50.090  -->  00:01:51.123
if you prefer.
42

42

00:01:52.110  -->  00:01:54.990
Sometimes you'll want to use one quotation mark
43

43

00:01:54.990  -->  00:01:57.440
or the other depending on the contents of the string.
44

44

00:01:57.440  -->  00:02:00.560
So if you've got a string with quotes,
45

45

00:02:00.560  -->  00:02:02.940
then you'll want to use the double quotes,
46

46

00:02:02.940  -->  00:02:05.120
such as, hello, it's me.
47

47

00:02:05.120  -->  00:02:07.760
Here, you definitely want to use the double quotation marks
48

48

00:02:07.760  -->  00:02:10.630
on the outside because you've got a single quotation mark
49

49

00:02:10.630  -->  00:02:11.990
on the inside.
50

50

00:02:11.990  -->  00:02:15.090
If you were to use single quotation marks throughout,
51

51

00:02:15.090  -->  00:02:18.430
then this part here is not included in the string
52

52

00:02:18.430  -->  00:02:20.790
because the string ends here.
53

53

00:02:20.790  -->  00:02:23.100
If you run this, you'll get an error.
54

54

00:02:23.100  -->  00:02:25.580
Similarly, you may want to use the single quotation marks
55

55

00:02:25.580  -->  00:02:27.920
on the outside and the double quotation marks
56

56

00:02:27.920  -->  00:02:29.823
on the inside in some occasions.
57

57

00:02:31.780  -->  00:02:34.323
For example, if you have something like this.
58

58

00:02:35.840  -->  00:02:37.690
Here we've got a string
59

59

00:02:37.690  -->  00:02:41.620
and inside the string we've got a bunch of characters.
60

60

00:02:41.620  -->  00:02:44.080
Once Python realises that you're dealing with a string
61

61

00:02:44.080  -->  00:02:46.430
you can put whatever you want inside it, and in this case
62

62

00:02:46.430  -->  00:02:48.960
we are putting the quotation marks inside it.
63

63

00:02:48.960  -->  00:02:52.740
He said, and then open quotes, you are amazing, yesterday.
64

64

00:02:52.740  -->  00:02:55.480
This is totally fine because these quotation marks
65

65

00:02:55.480  -->  00:02:58.510
here don't signal another string to Python,
66

66

00:02:58.510  -->  00:03:01.083
they are just a character inside the string.
67

67

00:03:01.950  -->  00:03:03.890
Finally, if you really wanted
68

68

00:03:03.890  -->  00:03:07.390
to always use the same quotation marks, you can do.
69

69

00:03:07.390  -->  00:03:09.980
So I'm gonna turn this into a double quotation mark string.
70

70

00:03:09.980  -->  00:03:13.050
And now you can see that these things here are not part
71

71

00:03:13.050  -->  00:03:15.150
of the string, they are coloured differently.
72

72

00:03:15.150  -->  00:03:18.770
However, if you put a backslash in front of these quotes,
73

73

00:03:18.770  -->  00:03:20.670
Python will no longer treat them
74

74

00:03:20.670  -->  00:03:23.730
as characters used to signal a string.
75

75

00:03:23.730  -->  00:03:25.970
Now they are part of the string itself.
76

76

00:03:25.970  -->  00:03:27.690
I highly discourage you from doing this,
77

77

00:03:27.690  -->  00:03:29.570
but you may see it every now and then in code
78

78

00:03:29.570  -->  00:03:32.173
so I wanted to tell you what it means.
79

79

00:03:33.100  -->  00:03:35.520
When you do this, this is called escaping
80

80

00:03:35.520  -->  00:03:38.330
and it's quite a common thing to do in some occasions.
81

81

00:03:38.330  -->  00:03:39.940
But when you're dealing with strings like this,
82

82

00:03:39.940  -->  00:03:43.040
I would always recommend that you invert the quotes.
83

83

00:03:43.040  -->  00:03:45.470
We also have multiline strings
84

84

00:03:45.470  -->  00:03:47.780
for when we wanna print something out that's much longer.
85

85

00:03:47.780  -->  00:03:50.390
So we will have something like a multiline variable
86

86

00:03:50.390  -->  00:03:53.483
and here we are gonna use three quotation marks.
87

87

00:03:54.480  -->  00:03:57.870
And then we can print whatever we want inside it.
88

88

00:03:57.870  -->  00:04:01.710
If we print this out and we run it,
89

89

00:04:01.710  -->  00:04:04.550
you'll see that we get multiple lines printed out.
90

90

00:04:04.550  -->  00:04:08.230
So we've got the hello world, then we've got an empty line,
91

91

00:04:08.230  -->  00:04:10.310
then we've got my name is Jose, welcome to my programme,
92

92

00:04:10.310  -->  00:04:12.960
and then we've got another empty line as well.
93

93

00:04:12.960  -->  00:04:14.900
Multiline strings are very useful
94

94

00:04:14.900  -->  00:04:16.830
when you have much longer pieces of text
95

95

00:04:16.830  -->  00:04:18.380
that you want to print out,
96

96

00:04:18.380  -->  00:04:23.380
and also they can be useful at times as comments.
97

97

00:04:23.880  -->  00:04:26.930
Earlier on in the course, we saw that a comment is signalled
98

98

00:04:26.930  -->  00:04:28.420
with a hash symbol.
99

99

00:04:28.420  -->  00:04:30.650
So you can write something here
100

100

00:04:30.650  -->  00:04:34.420
to tell yourself what this file is about.
101

101

00:04:34.420  -->  00:04:38.030
But similarly, sometimes you have a longer comment.
102

102

00:04:38.030  -->  00:04:40.730
You wanna write multiple lines of notes.
103

103

00:04:40.730  -->  00:04:42.760
And for that, it is quite common
104

104

00:04:42.760  -->  00:04:45.083
to use one of these multiline strings.
105

105

00:04:46.870  -->  00:04:47.850
So why is this?
106

106

00:04:47.850  -->  00:04:50.110
Why can you do this?
107

107

00:04:50.110  -->  00:04:53.003
Well, what this does in Python is it creates the string,
108

108

00:04:54.140  -->  00:04:55.970
and then, that's it.
109

109

00:04:55.970  -->  00:04:57.550
You don't assign it to a variable,
110

110

00:04:57.550  -->  00:04:58.800
you don't use it anywhere.
111

111

00:04:58.800  -->  00:05:01.100
This is totally fine to do in Python
112

112

00:05:01.100  -->  00:05:03.690
and we can use a multiline string like this
113

113

00:05:03.690  -->  00:05:06.570
that doesn't have any usefulness inside the programme
114

114

00:05:06.570  -->  00:05:10.003
to leave a comment for ourselves for later on.
115

115

00:05:10.960  -->  00:05:14.550
So often you'll be seeing multiline strings like this
116

116

00:05:14.550  -->  00:05:18.830
in my files with explanations about what things are.
117

117

00:05:18.830  -->  00:05:21.610
Just one more thing, you can add strings together.
118

118

00:05:21.610  -->  00:05:25.163
So if you've got a name, such as Jose, and a greeting,
119

119

00:05:26.930  -->  00:05:30.890
you can add it to name and then we will end up
120

120

00:05:30.890  -->  00:05:34.470
with hello comma space Jose.
121

121

00:05:34.470  -->  00:05:36.130
So when you add two strings together,
122

122

00:05:36.130  -->  00:05:39.710
they are joined and make up one final string.
123

123

00:05:39.710  -->  00:05:41.540
So I will print out this greeting here
124

124

00:05:41.540  -->  00:05:44.863
and run the file, and you'll see that we get hello, Jose.
125

125

00:05:45.850  -->  00:05:50.080
If you do age is 34 and then you try to add this
126

126

00:05:50.080  -->  00:05:54.960
to a string like here, you are plus 34,
127

127

00:05:54.960  -->  00:05:57.150
you will get an error because in Python,
128

128

00:05:57.150  -->  00:06:00.660
you cannot add integers and strings together.
129

129

00:06:00.660  -->  00:06:03.700
You must convert this to a string first
130

130

00:06:03.700  -->  00:06:06.190
before you can add them together.
131

131

00:06:06.190  -->  00:06:08.920
Fortunately, converting to a string is very straightforward.
132

132

00:06:08.920  -->  00:06:11.860
You can either add the quotation marks around it
133

133

00:06:11.860  -->  00:06:16.420
or you can do str and pass in age.
134

134

00:06:16.420  -->  00:06:20.070
What this does is it takes in the number 34,
135

135

00:06:20.070  -->  00:06:22.630
you give it to this str function,
136

136

00:06:22.630  -->  00:06:26.460
which has these brackets around it, to accept a value.
137

137

00:06:26.460  -->  00:06:29.430
So you're giving the age value to str
138

138

00:06:29.430  -->  00:06:32.250
and what you get back is a string
139

139

00:06:32.250  -->  00:06:34.420
with this content inside it.
140

140

00:06:34.420  -->  00:06:36.520
So then you can still run this
141

141

00:06:36.520  -->  00:06:41.520
because age as str is a string that you've converted.
142

142

00:06:41.640  -->  00:06:44.190
We will be learning more about converting data
143

143

00:06:44.190  -->  00:06:46.520
from one type to another as we move through the course
144

144

00:06:46.520  -->  00:06:49.020
and it's a very common thing to do.
145

145

00:06:49.020  -->  00:06:50.880
But for now, that's it for this video.
146

146

00:06:50.880  -->  00:06:53.743
Thank you for joining me and I'll see you in the next one.
