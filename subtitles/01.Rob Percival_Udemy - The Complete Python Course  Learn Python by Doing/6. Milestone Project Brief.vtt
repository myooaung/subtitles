WEBVTT
1
00:00:01.290 --> 00:00:02.880
Hola chicos y bienvenidos de nuevo.

2
00:00:02.880 --> 00:00:09.420
En este video vamos a hablar sobre el hito Proyecto número uno, esta será una aplicación de colección de

3
00:00:09.480 --> 00:00:10.110
películas.

4
00:00:10.110 --> 00:00:15.180
Y en este video le daremos una sesión informativa para el proyecto, así como algunas sugerencias

5
00:00:15.180 --> 00:00:18.070
que puede usar cuando esté desarrollando el proyecto.

6
00:00:18.090 --> 00:00:21.300
No vamos a completar el proyecto en este video.

7
00:00:21.300 --> 00:00:25.830
Eso es para que lo haga antes de mostrarle cómo lo haríamos nosotros mismos.

8
00:00:25.830 --> 00:00:32.100
Por lo tanto, todo está cubierto en esta breve presentación, por lo que los requisitos para el proyecto normalmente

9
00:00:32.100 --> 00:00:34.750
no se definen como historias de usuarios.

10
00:00:34.800 --> 00:00:41.610
Una historia de usuario es una frase en el formato de usuario que me gustaría poder hacer algo para

11
00:00:41.670 --> 00:00:42.970
poder lograr algo.

12
00:00:42.990 --> 00:00:49.170
Entonces, la primera historia de usuario es que, como usuario, me gustaría poder agregar nuevas películas a mi colección

13
00:00:49.170 --> 00:00:50.510
para poder seguirlas.

14
00:00:51.880 --> 00:00:53.040
Muy claro.

15
00:00:53.170 --> 00:00:59.050
El siguiente es que, como usuario, me gustaría poder enumerar todas las películas de mi colección para

16
00:00:59.050 --> 00:01:01.590
poder ver qué películas ya tengo.

17
00:01:01.600 --> 00:01:06.730
Estas son dos cosas diferentes que nuestros usuarios deberían poder hacer con nuestra aplicación.

18
00:01:06.820 --> 00:01:13.810
Algo importante aquí es que estas historias de usuario no definen la implementación si debe usar

19
00:01:13.810 --> 00:01:16.940
bases de datos o listas, etc.

20
00:01:17.110 --> 00:01:21.030
Simplemente dice que a un usuario le gustaría poder hacer estas cosas.

21
00:01:21.220 --> 00:01:26.500
Finalmente, como usuario, me gustaría poder encontrar esa película usando los títulos de las películas

22
00:01:26.500 --> 00:01:30.680
para poder localizar una película específica fácilmente cuando crecen las colecciones.

23
00:01:30.880 --> 00:01:34.610
Y eso nos permitirá hacer algunas búsquedas.

24
00:01:34.640 --> 00:01:38.070
Entonces, ¿cómo vamos a implementar este proyecto?

25
00:01:38.150 --> 00:01:42.440
En primer lugar, tenemos que decidir dónde vamos a almacenar películas en el código.

26
00:01:42.440 --> 00:01:46.940
De nuevo, eso es si vamos a usar una base de datos, ya sea que vamos a

27
00:01:46.940 --> 00:01:50.530
poner cosas en un diccionario o en una lista o variables como esas.

28
00:01:50.530 --> 00:01:55.640
Y entonces, ¿dónde van a ir los datos en los que se basa nuestro programa?

29
00:01:55.640 --> 00:02:01.160
Luego tenemos que decidir qué datos queremos almacenar para cada película, ya sea un diccionario que represente

30
00:02:01.160 --> 00:02:03.190
algunas propiedades de la película.

31
00:02:03.380 --> 00:02:06.280
Tal vez es una pareja con solo las propiedades en sí.

32
00:02:06.500 --> 00:02:12.850
Entonces, una vez que hayamos decidido estas dos cosas, estamos listos para comenzar a implementar. El primer paso

33
00:02:12.850 --> 00:02:17.110
será decidir qué verá el usuario cuando interactúe con nuestra aplicación.

34
00:02:17.110 --> 00:02:23.000
Entonces crearemos un menú y dejaremos que los usuarios elijan una opción fuera del menú.

35
00:02:23.470 --> 00:02:30.100
Luego implementaremos cada requisito para agregar una lista y buscar películas cada una como una función

36
00:02:30.100 --> 00:02:30.520
separada.

37
00:02:30.520 --> 00:02:32.600
Así es como vamos a implementar esto.

38
00:02:33.820 --> 00:02:38.140
Y finalmente, también tenemos que asegurarnos de que los usuarios puedan finalizar el programa

39
00:02:38.140 --> 00:02:42.400
y nos aseguraremos de que cuando escriban la tecla Q el programa finalice.

40
00:02:42.400 --> 00:02:46.580
Por lo tanto, estas tareas de implementación son algo que debe decidir cuando comienza un nuevo proyecto.

41
00:02:46.720 --> 00:02:50.970
Solo trazos amplios, no tiene que ser extremadamente específico.

42
00:02:51.130 --> 00:02:56.590
Aquí es bastante específico porque el proyecto es bastante pequeño, pero solo le da una guía

43
00:02:56.590 --> 00:03:04.250
sobre lo que desea hacer y en qué orden comencemos con el primero donde almacenar películas normalmente para casi cualquier proyecto en el

44
00:03:04.310 --> 00:03:06.810
que usaría una base de datos.

45
00:03:06.860 --> 00:03:08.710
Pero no hemos visto cómo hacer eso.

46
00:03:08.810 --> 00:03:13.790
Así que vamos a almacenarlos en una lista de Python, poner las cosas en una lista es fácil.

47
00:03:13.820 --> 00:03:20.080
Puede usar append para agregar elementos a la lista y puede revisar la lista usando un bucle muy fácilmente.

48
00:03:20.570 --> 00:03:25.450
Pero el problema es que las películas se eliminan de la colección cuando la aplicación finaliza.

49
00:03:25.610 --> 00:03:29.470
Eso va a ser temporalmente un compromiso que tenemos que hacer.

50
00:03:29.690 --> 00:03:34.280
Pero más adelante, cuando sepamos más sobre bases de datos, podremos superar esto.

51
00:03:34.280 --> 00:03:39.740
Entonces, por ahora, una vez que hemos decidido almacenar cosas en una lista, nuestro código esencialmente se ve así.

52
00:03:39.890 --> 00:03:45.540
Tenemos una variable de película y es igual a una lista vacía.

53
00:03:45.830 --> 00:03:48.490
Entonces, ¿qué vamos a almacenar para cada película?

54
00:03:48.620 --> 00:03:52.670
Puedes decidir aquí cómo quieres representar la película en tu código.

55
00:03:52.670 --> 00:03:59.450
Por ejemplo, podría crear un diccionario que tenga teclas donde cada tecla, por ejemplo, el título de la película o

56
00:03:59.480 --> 00:04:04.710
el director de la película, sea clave en el diccionario y tenga un valor asociado.

57
00:04:04.760 --> 00:04:08.420
Podría usar un par donde el primer valor es el título de la película.

58
00:04:08.420 --> 00:04:10.750
El segundo valor es el director de la película, etc.

59
00:04:10.760 --> 00:04:12.260
Eso depende totalmente de ti.

60
00:04:12.440 --> 00:04:19.100
Simplemente tome una decisión ahora para que luego pueda codificar basándose en esto para que sea la estructura de sus

61
00:04:20.060 --> 00:04:21.570
datos en este proyecto.

62
00:04:21.570 --> 00:04:25.820
Vamos a crear un diccionario para cada película y en el diccionario vamos a almacenar el

63
00:04:25.820 --> 00:04:28.860
director del título de la película y el año de lanzamiento.

64
00:04:29.360 --> 00:04:32.310
Entonces haremos algo como esto.

65
00:04:32.450 --> 00:04:38.830
Vamos a tomar el título del director y el año del usuario usando la función de entrada y luego vamos

66
00:04:38.830 --> 00:04:42.150
a agregar un diccionario a la lista de películas.

67
00:04:42.200 --> 00:04:46.670
Puede ver las llaves, entonces este es un diccionario con tres teclas.

68
00:04:46.670 --> 00:04:51.740
El director del título y el año y cada uno tiene lo que el usuario escribió.

69
00:04:51.740 --> 00:04:56.750
Esto es solo una pista de que no se verá exactamente así porque usaremos funciones y todo eso

70
00:04:56.750 --> 00:05:02.350
en nuestro código, sino solo para darle una idea de cómo podríamos hacer esto al tercero y al final La

71
00:05:04.630 --> 00:05:10.540
sugerencia es que tenemos que mostrarle al usuario un menú y para eso tenemos que obtener la entrada del usuario con

72
00:05:10.540 --> 00:05:12.400
respecto a lo que quiere hacer.

73
00:05:12.400 --> 00:05:17.140
Y luego queremos ejecutar un ciclo y obtener su entrada nuevamente al final para que

74
00:05:17.380 --> 00:05:22.910
podamos comenzar el ciclo nuevamente con alguna nueva entrada del usuario para que podamos hacer algo como esto.

75
00:05:22.990 --> 00:05:28.950
Aquí estoy definiendo una variable de solicitud de menú que le dice al usuario cuáles son las opciones para que pueda

76
00:05:28.950 --> 00:05:34.940
ingresar un dos en una película L para ver sus películas F para encontrar una película por título o q para salir.

77
00:05:34.990 --> 00:05:38.540
Luego obtenemos la entrada del usuario en esta línea.

78
00:05:38.950 --> 00:05:44.150
Y aunque la entrada no es igual a Q, eso significa que queremos ejecutar este ciclo.

79
00:05:44.170 --> 00:05:49.700
Queremos seguir preguntando al usuario qué quiere hacer y queremos hacer algo con esa información.

80
00:05:49.990 --> 00:05:53.710
Y en la parte inferior de este ciclo, le pedimos al usuario nuevamente su entrada.

81
00:05:53.710 --> 00:05:59.560
Si escriben Q, el bucle termina y detenemos la aplicación y, si pasa algo más, el

82
00:05:59.800 --> 00:06:05.660
bucle continúa y luego hacemos lo que sea que hayan seleccionado, estamos haciendo esto con la instrucción if.

83
00:06:06.220 --> 00:06:12.460
Entonces, mientras no ingrese Q, vamos a saltar aquí y luego, si lo que ingresaron fue a,

84
00:06:12.460 --> 00:06:13.910
entonces haremos algo.

85
00:06:14.020 --> 00:06:18.040
Si entraron en L. vamos a hacer otra cosa y si es f vamos a hacer otra cosa.

86
00:06:18.040 --> 00:06:19.880
Finalmente, si no es ninguno de los que vamos a imprimir.

87
00:06:19.900 --> 00:06:21.340
Este era un comando desconocido.

88
00:06:22.490 --> 00:06:28.760
Por cierto, la palabra clave pasada es algo nuevo que estamos aprendiendo ahora y solo significa no hacer nada,

89
00:06:28.760 --> 00:06:35.000
pero Python requiere un bloque sangrado debajo de una declaración if, puede ver que esto tiene más sangría.

90
00:06:35.000 --> 00:06:40.700
Por eso tenemos que poner algo en el bloque y pasar es el candidato perfecto solo para decirnos que

91
00:06:40.700 --> 00:06:42.790
queremos hacer algo aquí más tarde.

92
00:06:42.800 --> 00:06:46.650
Todavía no lo hemos implementado, así que también puedes usarlo en tu código.

93
00:06:48.430 --> 00:06:52.500
Ahora que tenemos esto, el siguiente paso es implementar cada requisito a su vez.

94
00:06:52.630 --> 00:06:56.390
Así que agregue películas, haga una lista de las películas y encuentre una película.

95
00:06:56.680 --> 00:07:01.280
Así que vayamos al editor de código en el próximo video y permitamos que los usuarios hagan esto.

96
00:07:01.450 --> 00:07:08.500
Pero antes de que debas probar esto tú mismo en este video, hemos vinculado la aplicación incompleta en la sección de recursos de

97
00:07:08.500 --> 00:07:13.530
esta conferencia, puedes echarle un vistazo a ese código y usarlo como código de inicio.

98
00:07:13.570 --> 00:07:16.810
Es solo el código que le mostramos en esta presentación.

99
00:07:16.810 --> 00:07:21.340
Una vez que haya probado eso y una vez que esté listo, pase al siguiente

100
00:07:21.340 --> 00:07:24.010
video y le mostraremos cómo implementaríamos este proyecto.

101
00:07:24.010 --> 00:07:26.560
Gracias por mirar y nos vemos en el próximo.
