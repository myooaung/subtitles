WEBVTT
1
00:00:02.150 --> 00:00:06.580
So we had a look at the essentials of the provider package and actually it's not just the essentials,

2
00:00:06.590 --> 00:00:13.100
it's pretty much all you have to know, provider of or consumer to set up a listener to a provider which

3
00:00:13.100 --> 00:00:18.470
you typically provide with ChangeNotifierProvider somewhere up in the widget tree, either

4
00:00:18.530 --> 00:00:24.050
as we do it here on the root level or as we do it in the products grid right above the widget where

5
00:00:24.050 --> 00:00:26.300
we need. It doesn't matter,

6
00:00:26.330 --> 00:00:31.600
in general you want to set up that provider on as low as a level as possible,

7
00:00:31.730 --> 00:00:37.850
so not necessarily up at the root level of your app but of course if you need it in the entire app provided

8
00:00:37.850 --> 00:00:38.730
here.

9
00:00:38.780 --> 00:00:44.540
So this is the provider and you also learned about how to listen to changes and that you have some optimization

10
00:00:44.540 --> 00:00:50.420
potential with listen: false and maybe also by using a consumer if only parts of your widget tree

11
00:00:50.420 --> 00:00:52.130
depend on it.

12
00:00:52.130 --> 00:00:57.610
A valid question now of course is, why do we not use a stateful widget here?

13
00:00:57.650 --> 00:01:02.900
We're now using the provider to manage whether our product is a favorite or not

14
00:01:03.200 --> 00:01:10.190
but we only need that information here to change the icon which I'm displaying. Now since I change that

15
00:01:10.190 --> 00:01:12.950
icon here in my product item widget,

16
00:01:12.950 --> 00:01:16.870
we could of course also turn this into a stateful widget,

17
00:01:17.210 --> 00:01:25.010
have an isFavorite or showFavorite property in here since this is a single item in our grid and then

18
00:01:25.010 --> 00:01:29.790
simply change that property when we click this button here.

19
00:01:29.990 --> 00:01:36.830
And yes, this would be absolutely the right thing to do if you have some state, some data which only affects

20
00:01:36.830 --> 00:01:38.190
this widget.

21
00:01:38.390 --> 00:01:43.100
Remember that slide, the bottom right area here? Widget local state.

22
00:01:43.100 --> 00:01:45.600
That's state which only affects a single widget

23
00:01:45.620 --> 00:01:51.160
and if you only want to switch the icon on a button in a widget, then of course you would typically manage

24
00:01:51.160 --> 00:01:53.240
that state only in that widget

25
00:01:53.240 --> 00:02:00.530
and therefore you would always use a stateful widget. Don't use provider or a provided class if you

26
00:02:00.560 --> 00:02:04.980
only want to change how something is displayed inside of a widget. Here,

27
00:02:05.300 --> 00:02:11.030
I'm using the provider package not because I want to use providers everywhere but because the data, the

28
00:02:11.030 --> 00:02:17.330
information whether this product is a favorite or not does not only matter to this widget. Right now

29
00:02:17.330 --> 00:02:23.280
in our app it does but that will now change. In the ProductsOverviewScreen, there,

30
00:02:23.360 --> 00:02:32.280
I now also want to add an icon or an option here in the appBar that allows us to switch between favorite

31
00:02:32.430 --> 00:02:39.690
and all products, so that we can actually take that favorite information and filter our grid here based

32
00:02:39.690 --> 00:02:40.710
on it

33
00:02:40.710 --> 00:02:46.110
and that of course means that the information about whether a product is a favorite or not does not

34
00:02:46.110 --> 00:02:52.890
just matter to the product item but to the entire app or at least to a significant part of that app.

35
00:02:52.890 --> 00:02:58.380
So let's now start implementing that. For this here in the appBar,

36
00:02:58.560 --> 00:03:05.060
I want to add actions or for the moment, one action and there, I'll add a widget which we haven't seen

37
00:03:05.060 --> 00:03:05.540
before,

38
00:03:05.600 --> 00:03:13.790
a PopMenuButton. That's a button which will basically open a kind of a drop over menu, a menu which

39
00:03:13.820 --> 00:03:16.460
opens up as an overlay.

40
00:03:16.460 --> 00:03:23.240
Now we give this a button which should be displayed in our appBar and that should be an icon widget

41
00:03:23.240 --> 00:03:23.590
and there

42
00:03:23.600 --> 00:03:31.130
I'll use the more_vert icon which are three dots aligned or positioned above each other vertically.

43
00:03:31.820 --> 00:03:37.880
The PopUpMenuButton then also needs an item builder which builds the entries for this pop up

44
00:03:37.880 --> 00:03:38.870
menu.

45
00:03:39.320 --> 00:03:47.600
There, you get the context which I don't need here, so I'll add an underscore and then you return a list

46
00:03:47.690 --> 00:03:53.760
of widgets, not a single widget but a list of widgets which will be added as entries in this pop up menu

47
00:03:53.840 --> 00:03:59.030
and here you should use PopUpMenuItems.

48
00:03:59.060 --> 00:04:04.790
Now each menu item here has a child and that typically is some text but could also be a row with an icon

49
00:04:04.790 --> 00:04:07.160
next to a text for example

50
00:04:07.160 --> 00:04:15.040
and here I'll say only favorites and besides that child, you also provide a value which is later important

51
00:04:15.040 --> 00:04:20.410
for finding out which choice was or which item was chosen by the user.

52
00:04:20.410 --> 00:04:21.860
So I'll give this a zero and

53
00:04:22.029 --> 00:04:27.010
you can use any identifier you want, could also be a string and I'll then copy this and create another

54
00:04:27.010 --> 00:04:31.750
PopUpMenuItem where I say show all and there, the value could be one.

55
00:04:34.440 --> 00:04:42.540
Now on the PopUpMenuButton, you'll also add onSelected function here, an anonymous function or a named

56
00:04:42.540 --> 00:04:47.610
function, it's up to you, where you will get the selected value.

57
00:04:47.610 --> 00:04:52.290
Now we know that we'll get an integer here, so we can add int here in front of that to make it really clear

58
00:04:52.290 --> 00:04:57.210
to Dart that selected value will be an integer, it will be this value depending on which option the

59
00:04:57.210 --> 00:04:58.470
user chose

60
00:04:58.470 --> 00:05:02.890
and for now, let's simply print the selected value to see whether that works.

61
00:05:02.940 --> 00:05:04.810
Now to see it in action, let's save that

62
00:05:04.890 --> 00:05:10.260
and now you should see three dots here and if you tap them, this pop up opens up and you can choose only

63
00:05:10.260 --> 00:05:11.970
favorites or show all

64
00:05:12.060 --> 00:05:18.510
and therefore here, you see the two print statements for the values we chose.

65
00:05:18.550 --> 00:05:23.350
Now first of all, such a scenario here is always a good place for an enum.

66
00:05:23.350 --> 00:05:29.080
Of course we can use 0 and 1 but to have a really easy way of working with that, we can define an enum,

67
00:05:29.230 --> 00:05:36.500
since we really only need it here, we can define it here in the same file and I'll name it FilterOptions

68
00:05:36.510 --> 00:05:38.030
but the name is totally up to you

69
00:05:38.100 --> 00:05:44.160
and there are two values I want to have - favorites and all. So these are the two values and as you learned,

70
00:05:44.210 --> 00:05:50.210
enums are really just ways of assigning labels to integers, so that behind the scenes, we still have

71
00:05:50.230 --> 00:05:56.730
integers but we as a developer can work with these labels. So therefore down there for this value, I'll

72
00:05:56.730 --> 00:05:59.970
have my FilterOptions.Favorites

73
00:06:00.000 --> 00:06:03.180
and here I'll have my FilterOptions.All,

74
00:06:07.320 --> 00:06:08.790
doesn't change the way this works,

75
00:06:09.510 --> 00:06:14.360
besides one thing, this here will now be of type FilterOptions.

76
00:06:14.370 --> 00:06:23.630
Now the idea of course is to filter the items we're displaying based on the filter we chose here and

77
00:06:23.630 --> 00:06:31.130
the most efficient way of doing this is to simply change the product we have here in our products class

78
00:06:31.730 --> 00:06:35.930
because we're consuming these products in the products_grid in the end.

79
00:06:35.930 --> 00:06:38.390
We're setting up a listener to products here,

80
00:06:38.390 --> 00:06:43.160
so if the products change, this will rebuild and it should of course rebuild when the products change

81
00:06:43.190 --> 00:06:46.850
because we will change the products when the user selects to filter them

82
00:06:46.850 --> 00:06:49.310
and that should affect our grid.

83
00:06:49.310 --> 00:06:54.660
So in the ProductsOverview here, we want to find out which option was chosen,

84
00:06:54.710 --> 00:07:02.340
so if selected value here is equal to FilterOptions.Favorites let's say and in that case, we want to

85
00:07:02.640 --> 00:07:11.200
do something that reduces the amount of items we're showing and else, we're showing all items.

86
00:07:11.950 --> 00:07:19.540
So now in the products.dart file in our provider class, I want to change this items list based on

87
00:07:19.540 --> 00:07:21.880
whether we set a filter or not.

88
00:07:21.910 --> 00:07:27.220
Now one way of managing this is to add a new property in this products class here,

89
00:07:30.280 --> 00:07:34.430
showFavoritesOnly which initially is false

90
00:07:34.630 --> 00:07:41.490
and then here where we get all the items, we take this into account to determine which items to return.

91
00:07:41.500 --> 00:07:45.420
So here we could now check if showFavoritesOnly

92
00:07:45.540 --> 00:07:50.830
and if that is true, then I want to return my items where,

93
00:07:54.120 --> 00:08:00.820
for my item which I'm looking at, isFavorite is true and then we convert this to a list.

94
00:08:00.850 --> 00:08:05.170
It's a new list automatically so we don't need to do that manually copying where down there.

95
00:08:05.260 --> 00:08:08.700
If we don't make it into there, we return all items.

96
00:08:09.020 --> 00:08:10.840
Now this is one approach we can take

97
00:08:10.840 --> 00:08:19.010
and now if you go to the product overview, here all we have to do is we have two access our products provider,

98
00:08:20.280 --> 00:08:30.400
so we get our products data or products container, whatever you want to name it, with provider for which

99
00:08:30.400 --> 00:08:35.549
you have to import the provider package of.

100
00:08:35.549 --> 00:08:37.210
Now I'm interested in products,

101
00:08:37.230 --> 00:08:45.410
so we need to import that class as well from the providers folder and there from products.dart and forward

102
00:08:45.440 --> 00:08:46.280
the context

103
00:08:48.950 --> 00:08:52.130
and that should be done in the build method of course.

104
00:08:52.190 --> 00:08:58.400
And now with products container down there, we can say if we're in here, then I want to call some method

105
00:08:58.730 --> 00:09:04.910
which switches showFavoritesOnly, which actually should be private, so let's add an underscore

106
00:09:04.910 --> 00:09:14.160
but then let's add a new method which you could name showFavoritesOnly and then there, we could set

107
00:09:14.910 --> 00:09:20.340
showFavoritesOnly to true and then we have show all

108
00:09:20.350 --> 00:09:26.590
and there we set showFavoritesOnly to false because we want to show all and back in the products

109
00:09:26.610 --> 00:09:27.780
overview screen,

110
00:09:27.970 --> 00:09:32.950
first of all I want to set up listen: false here because I'm not really interested in the data or whether

111
00:09:32.950 --> 00:09:33.850
it changes,

112
00:09:33.850 --> 00:09:39.400
I only need to get access to that container so that I can call these two new methods we added because

113
00:09:39.400 --> 00:09:51.090
then here if we are filtering for favorites, I can call showFavoritesOnly and here I can call show

114
00:09:51.870 --> 00:10:01.230
all, like this. If we do that and we do a full restart, I can now actually filter for only the favorites

115
00:10:01.800 --> 00:10:06.090
or for all but it doesn't make a difference.

116
00:10:06.090 --> 00:10:12.510
Reason for that is that in the products class, of course we also have to call notifyListeners to rebuild

117
00:10:12.540 --> 00:10:15.740
the parts that are interested in our products data here.

118
00:10:15.840 --> 00:10:20.380
So I do it both for showFavoritesOnly and show all and with notifyListeners

119
00:10:20.390 --> 00:10:21.300
added there,

120
00:10:21.300 --> 00:10:27.540
now if I select only favorites, I see nothing, if I select all, we see all. Looks good but has a flaw.

121
00:10:28.700 --> 00:10:33.710
We could implement it like this and I did it like this to also now show you what the problem would

122
00:10:33.710 --> 00:10:39.860
be. If we had another part of this app which we don't have yet but if we had another screen which also

123
00:10:39.860 --> 00:10:46.220
shows our products, then when we choose a filter here on the ProductsOverviewScreen and we then go

124
00:10:46.220 --> 00:10:53.060
to that other screen, our filter would still be applied there because our getter only returns data based

125
00:10:53.060 --> 00:10:57.440
on what we set here as a filter and that's what we control from that other screen.

126
00:10:57.440 --> 00:11:03.890
Now if you want to have an application-wide filter, this is your approach but often, you only want to

127
00:11:03.890 --> 00:11:10.250
filter on this screen and if you then go to some other screen, you don't want to apply that same filter.

128
00:11:10.310 --> 00:11:15.680
Let's say you have a screen where you manage your products and another screen where you view all products.

129
00:11:15.800 --> 00:11:21.290
If you filter on the all products screen, you probably don't want a filter on your

130
00:11:21.290 --> 00:11:24.740
these are all my products screen as well.

131
00:11:24.920 --> 00:11:32.570
So therefore managing something like this filtering here in our provided class can often be a problem

132
00:11:32.600 --> 00:11:38.390
because it's really an information that belongs to a single widget and not into the global app-wide state.

133
00:11:39.580 --> 00:11:42.980
So with that, we're back to this slide, we're more on the right side here

134
00:11:43.000 --> 00:11:49.450
with that filtering than on the left side. This actually is not the approach I want to use,

135
00:11:49.450 --> 00:11:56.650
I always want to return all my items here and I don't really want to have these methods here which control

136
00:11:56.680 --> 00:11:57.910
what is displayed or not,

137
00:11:57.910 --> 00:12:04.210
I don't want to manage what is displayed in my provided class here but inside of my widgets. And therefore

138
00:12:04.210 --> 00:12:14.920
here in the ProductsOverviewScreen, I don't really want to use my provided products data and switch

139
00:12:15.340 --> 00:12:18.640
my display state or my FilterOptions there,

140
00:12:18.820 --> 00:12:25.800
instead the better option here indeed would be to turn this into a stateful widget,

141
00:12:25.800 --> 00:12:31.170
the ProductsOverviewScreen is now a stateful widget and there in the state object,

142
00:12:31.300 --> 00:12:40.920
we can now manage this showOnlyFavorites data which is a boolean, initially set to false and I want

143
00:12:40.920 --> 00:12:44.870
to switch that when we actually select the value in the pop up menu.

144
00:12:44.910 --> 00:12:55.130
So if we did go for favorites, then I want to set showOnlyFavorites to true and otherwise, I want to

145
00:12:55.130 --> 00:12:57.850
set it to false.

146
00:12:57.870 --> 00:13:00.080
Now what do we do with that information here?

147
00:13:00.090 --> 00:13:06.390
Well we can now pass that down to the products grid because that actually is the widget which displays

148
00:13:06.570 --> 00:13:08.430
our products.

149
00:13:08.430 --> 00:13:11.070
So there, we can forward to showOnlyFavorites

150
00:13:11.070 --> 00:13:14.300
and now in the products_grid, we only need to expect this.

151
00:13:14.310 --> 00:13:20.850
So here, I have a final boolean, showFavs or whatever you want to name it

152
00:13:20.850 --> 00:13:27.090
and of course we now have to add our constructor to accept this showFavs argument and store it in

153
00:13:27.090 --> 00:13:28.260
this property

154
00:13:28.290 --> 00:13:32.370
and now here we can use showFavs. We're fetching the items

155
00:13:32.370 --> 00:13:38.280
but now I want to show only the favorites. And now to not have all the logic of filtering in here,

156
00:13:38.400 --> 00:13:44.520
we can still go to the products class and simply add another getter in there. A getter which still returns

157
00:13:44.520 --> 00:13:52.800
a list of products, of single product items which I'll name favorite items because here, I will return

158
00:13:53.520 --> 00:14:05.140
my filtering logic where I access all items, then use where and for every prod item, I return true if

159
00:14:05.230 --> 00:14:08.930
is favorite is true and then I convert this to a new list.

160
00:14:08.950 --> 00:14:10.450
So now we simply have an alternative

161
00:14:10.450 --> 00:14:18.830
getter, favorite items which does that filtering logic and I reach out to that getter in my products

162
00:14:18.840 --> 00:14:21.260
grid if showFavs is true.

163
00:14:21.900 --> 00:14:30.300
So instead of using items here, I simply can check showFavs and if that is true, then I don't use product

164
00:14:30.300 --> 00:14:34.410
data.items but I simply use 

165
00:14:34.410 --> 00:14:34.770
.

166
00:14:37.380 --> 00:14:43.500
productsData.favoriteItems and otherwise, I use items in general.

167
00:14:43.560 --> 00:14:47.990
So now we have a set up where we should still have a grid that changes

168
00:14:48.540 --> 00:14:52.880
but we're managing the import logic in our widgets now.

169
00:14:52.920 --> 00:14:59.790
Now one important fine tuning is of course in the ProductsOverviewScreen, you should wrap this part

170
00:14:59.820 --> 00:15:01.860
where you change showOnlyFavorites

171
00:15:01.950 --> 00:15:05.110
with set state so that the UI is rebuilt

172
00:15:05.130 --> 00:15:11.550
when you change it. So let's move this entire if block here into this.

173
00:15:11.550 --> 00:15:17.280
This is important because otherwise, you could change that data but it would not be reflected on the UI.

174
00:15:17.280 --> 00:15:22.540
And now with that, if we go back, we can choose our filtering logic here

175
00:15:22.650 --> 00:15:27.030
and as you see, if I mark something as a favorite, this also does work

176
00:15:27.090 --> 00:15:33.480
but now we're managing this in our widget because it really only affects this widget, the product overview

177
00:15:33.480 --> 00:15:36.030
widget and its children, like the products_grid

178
00:15:36.030 --> 00:15:37.560
here of course, most importantly.

