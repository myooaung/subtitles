WEBVTT
1
00:00:02.150 --> 00:00:05.310
Deleting is also pretty straightforward, in products

2
00:00:05.310 --> 00:00:07.680
here we have our delete product method

3
00:00:07.800 --> 00:00:13.830
and of course there, I also want to send a request, a HTTP request. The URL for that

4
00:00:13.860 --> 00:00:18.930
will be the same URL we used for updating because of course, I want to target an element with a specific

5
00:00:18.930 --> 00:00:24.300
ID and then we can send a delete request here to that URL.

6
00:00:24.450 --> 00:00:28.980
Now you don't need to add any body here and actually you can't because there is no data you would need

7
00:00:28.980 --> 00:00:33.570
to append, you just want to delete the resource at that URL and that's all

8
00:00:33.570 --> 00:00:39.450
and of course now, you can now also use async await here if you want to but you can also do something

9
00:00:39.750 --> 00:00:44.060
which is known as optimistic updating. Here,

10
00:00:44.180 --> 00:00:49.830
I'm executing this and I actually don't await the result,

11
00:00:49.830 --> 00:00:55.200
instead I immediately execute this because as you learned, Dart does not block code execution until this

12
00:00:55.200 --> 00:01:00.680
is done and it simply moves ahead to this line before we have a response from this line and therefore,

13
00:01:00.680 --> 00:01:04.769
it will remove that item from our items list.

14
00:01:04.769 --> 00:01:09.180
Now actually, I'll do something which is totally optional but which is also a pattern you see from time

15
00:01:09.180 --> 00:01:14.790
to time. Before I remove my item here and actually before I start sending the request therefore just

16
00:01:14.790 --> 00:01:16.950
to be safe, I'll copy it.

17
00:01:18.060 --> 00:01:31.310
So I'll create a new final variable, existing product and there, I want to get the first product where

18
00:01:31.700 --> 00:01:37.420
this condition here essentially is true or since I'll need to remove it later,

19
00:01:37.520 --> 00:01:42.610
we can also simply get the index, so maybe get the existing

20
00:01:45.280 --> 00:01:51.630
product index first and we get this with the help of items and then indexWhere

21
00:01:51.680 --> 00:01:55.940
and now use our function here to identify a product.

22
00:01:55.940 --> 00:01:58.670
So this gives us the index of the product we want to remove,

23
00:01:58.670 --> 00:02:10.979
then I'll add my existing product constant here, runtime constant, which is items for that existing product

24
00:02:10.979 --> 00:02:11.590
index.

25
00:02:12.360 --> 00:02:19.020
So with that, I now basically store a reference, a pointer to that product which is about to be deleted

26
00:02:19.290 --> 00:02:28.290
in this constant here and thereafter, I can call items remove at, because I now have the index, existing

27
00:02:29.160 --> 00:02:30.620
product index.

28
00:02:30.750 --> 00:02:34.010
So this will now remove the item from the list but important, not from memory,

29
00:02:34.020 --> 00:02:39.660
it only removes that from the list, the item, the object itself will live on in memory,

30
00:02:39.780 --> 00:02:45.270
Dart would normally clear it from memory if it finds no one who is still interested in the data, which

31
00:02:45.270 --> 00:02:47.880
would normally be the case if you remove it from the list

32
00:02:47.880 --> 00:02:53.400
but here since I stored a reference to the product in existing product, we still have someone interested

33
00:02:53.400 --> 00:02:57.210
in the existing product and therefore, we still keep that product.

34
00:02:57.210 --> 00:03:02.910
We only remove it from the list but in memory, it's still stored and we still have a reference to it

35
00:03:02.910 --> 00:03:03.180
here.

36
00:03:03.930 --> 00:03:10.530
So then I send that delete request and now I'm only interested in when that failed, so we could use async

37
00:03:10.530 --> 00:03:19.010
await but we can also use catch error here and if an error occurred, I'd only care about the error and

38
00:03:19.080 --> 00:03:23.310
I can use an underscore therefore, I just want to roll back the removal here.

39
00:03:23.430 --> 00:03:29.880
So then I will use items and then use insert and insert at my existing product index which is the index

40
00:03:29.880 --> 00:03:34.740
the product was at before and insert my existing product there.

41
00:03:35.470 --> 00:03:37.660
I can do that because existing product,

42
00:03:37.660 --> 00:03:42.700
this constant, holds a reference to the old product, so it will reinsert it into the list

43
00:03:42.700 --> 00:03:52.890
if we failed here. This is optimistic updating because this ensures that I re-add that product

44
00:03:52.890 --> 00:04:01.670
if we fail. Now if we succeed, so in then before catch error, I don't care about the data I get, there

45
00:04:01.740 --> 00:04:08.530
I simply want to set existing product equal to null and therefore, this of course shouldn't be a final,

46
00:04:08.740 --> 00:04:15.420
I'll use var instead, simply to clear up that reference and let Dart remove that object in memory because

47
00:04:15.420 --> 00:04:18.800
now, really no one is interested in it anymore.

48
00:04:18.839 --> 00:04:27.330
So with that, we have that optimistic updating pattern where I roll back if my product deletion should

49
00:04:27.330 --> 00:04:27.950
fail

50
00:04:28.110 --> 00:04:32.910
and of course, I want to notify listeners after that roll back as well.

51
00:04:33.020 --> 00:04:43.840
Now let's see whether that worked and for that, I'll reload my app here and then go to manage products and

52
00:04:43.840 --> 00:04:47.940
in there, let me quickly add a dummy product because I don't want to delete one of the other two products

53
00:04:47.940 --> 00:04:50.970
which are at least a bit more realistic.

54
00:04:50.970 --> 00:04:58.880
So this is a dummy product, let's add it here, save this and I want to delete that,

55
00:04:58.950 --> 00:05:04.170
so the test product here. If I click the trash button here, it's gone and it stays gone

56
00:05:04.260 --> 00:05:07.260
and on Firebase, you see it's not there anymore.

57
00:05:07.260 --> 00:05:09.570
Now let me add an error here,

58
00:05:09.600 --> 00:05:11.430
remove the JSON at the end again,

59
00:05:11.470 --> 00:05:14.410
it's a classic, refresh here

60
00:05:15.260 --> 00:05:24.150
and add another dummy here and now, this should actually fail to be deleted.

61
00:05:24.150 --> 00:05:30.570
So adding of course works but now if we delete this, it should disappear because we're not waiting for that

62
00:05:30.630 --> 00:05:35.670
request to finish, we immediately remove our items and by the way, we would also immediately remove it

63
00:05:35.940 --> 00:05:40.920
if I move that after HTTP delete as you learned because Dart doesn't wait for this to finish before

64
00:05:40.920 --> 00:05:48.030
it runs that. So it will not wait for that and hence it should now remove that but we'll then face an

65
00:05:48.090 --> 00:05:51.810
error and it should be re-added. So let me delete it

66
00:05:53.040 --> 00:05:55.590
but that's not happening.

67
00:05:55.740 --> 00:05:57.190
The logic here is correct,

68
00:05:57.240 --> 00:06:06.470
the only thing is that delete unfortunately does not throw an error if we get an error status code back

69
00:06:06.470 --> 00:06:08.210
from the server.

70
00:06:08.210 --> 00:06:14.360
Now the way the web works is that the server sends back status codes to tell us whether the operations

71
00:06:14.450 --> 00:06:15.940
succeeded or not

72
00:06:15.980 --> 00:06:18.580
and typically you have 200 status code,

73
00:06:18.590 --> 00:06:23.630
most importantly 200 and 201 which signal that everything worked.

74
00:06:23.630 --> 00:06:27.640
You have 300 status codes which signal that you were redirected,

75
00:06:27.680 --> 00:06:31.390
you have 400 status codes, so you have different values there,

76
00:06:31.550 --> 00:06:37.160
just as for 200 and 300, which signal that something went wrong and 500 codes basically do the same

77
00:06:37.160 --> 00:06:39.170
and of course there is some differentiation.

78
00:06:39.170 --> 00:06:43.040
If you want to learn more about that, attached you'll find a list of available status codes and what they

79
00:06:43.040 --> 00:06:47.930
mean and for get requests and also for post requests,

80
00:06:47.960 --> 00:06:55.010
the HTTP package we're using automatically throws an error if we have a status code that is

81
00:06:55.010 --> 00:06:56.810
greater or equal than 400,

82
00:06:56.900 --> 00:07:03.020
so for all these error status codes, it throws an error and we make it into catch error. For delete,

83
00:07:03.020 --> 00:07:08.660
it does not do that and therefore we end up in the then block. I can prove that if I add a response

84
00:07:08.660 --> 00:07:15.980
here which is the value we would get here and I print response, excuse me, not response but response status

85
00:07:15.980 --> 00:07:16.740
code.

86
00:07:17.000 --> 00:07:21.420
If we do that and we try that again, I reload,

87
00:07:27.150 --> 00:07:30.230
I reload, my data is here because it was stored.

88
00:07:30.230 --> 00:07:33.990
If I delete here, then you see 405 is printed,

89
00:07:34.000 --> 00:07:38.030
that's the status code we're getting and that signals that an error occurred.

90
00:07:38.030 --> 00:07:43.900
Now normally again for get and post, the HTTP package would have thrown an error and our code here would've

91
00:07:43.940 --> 00:07:45.240
kicked off, here

92
00:07:45.260 --> 00:07:51.620
that is not happening and therefore I want to throw my own error if that's the case. So we can basically

93
00:07:51.620 --> 00:07:59.540
check if response status code is greater or equal than 400 which

94
00:07:59.540 --> 00:08:05.000
means something went wrong and in that case, I want to throw my own error and not continue with this

95
00:08:05.000 --> 00:08:05.300
code.

