WEBVTT
1
00:00:02.220 --> 00:00:09.090
So now that we finished that set up, now that we're able to talk to Firebase and we saw that real time

2
00:00:09.090 --> 00:00:15.420
data in action, let's utilize what we learned to not set up this weird listener when we clicked the

3
00:00:15.420 --> 00:00:22.100
ad button, but to instead output our messages here with the help of the list view builder.

4
00:00:22.890 --> 00:00:29.460
And that will be super, super easy snapshots gives us a stream, as I mentioned.

5
00:00:29.610 --> 00:00:36.090
And a stream is simply a dart object which emits a new value whenever some data source changes, whenever

6
00:00:36.090 --> 00:00:38.340
a data source gives us a new value in the end.

7
00:00:39.090 --> 00:00:46.380
Now that entire stream thing is set up and managed automatically by Firebase Bidart firestorm packaged

8
00:00:46.380 --> 00:00:48.520
by the cloud firestorm package, we added.

9
00:00:48.660 --> 00:00:49.880
So that's very convenient.

10
00:00:49.890 --> 00:00:51.090
We don't need to do anything.

11
00:00:51.090 --> 00:00:53.730
They're even better than that.

12
00:00:53.730 --> 00:00:59.160
Flutter has a nice little widget, which you can utilize, and that's the stream builder widget here

13
00:00:59.160 --> 00:00:59.880
in the body.

14
00:01:00.060 --> 00:01:04.980
Instead of directly outputting the list you, I will output a stream builder widget.

15
00:01:05.519 --> 00:01:08.070
Now again, this comes with flutter.

16
00:01:08.370 --> 00:01:11.670
It's not part of Firebase and you don't have to add it on your own.

17
00:01:11.700 --> 00:01:14.610
It comes with flutter to stream.

18
00:01:14.610 --> 00:01:23.820
Builder Widget takes two key arguments here on its constructor, a stream named argument and a builder

19
00:01:23.820 --> 00:01:24.750
named argument.

20
00:01:25.320 --> 00:01:29.670
The stream argument, as the name suggests, wants a stream.

21
00:01:30.620 --> 00:01:38.690
So we can grab this code here all the way up to snapshots, including snapshots, but excluding the

22
00:01:38.690 --> 00:01:43.610
listen call, because that listening will be handled by flutter with the stream builder.

23
00:01:43.730 --> 00:01:49.850
So we take that code and cut it from down there and add this as a value for stream.

24
00:01:51.570 --> 00:01:59.790
Now, the builder then wants a function which takes to build context and which gets that latest snapshot

25
00:01:59.790 --> 00:02:03.950
we get from the stream, so that latest data snapshot we get from the stream.

26
00:02:04.800 --> 00:02:10.770
So here we have a function that gets to context and this stream snapshot.

27
00:02:13.300 --> 00:02:20.470
And we get a new snapshot whenever the stream changes, so this builder function is executed, whenever

28
00:02:20.470 --> 00:02:26.710
the stream gives us a new value, whenever we get a new value, this function is executed.

29
00:02:27.310 --> 00:02:33.900
And therefore, I'll put my list view builder inside of this function so that the list view is regenerated.

30
00:02:33.910 --> 00:02:39.820
When I get a new value now with regenerated, I still mean that flutter will not go ahead and update

31
00:02:39.850 --> 00:02:40.680
the entire UI.

32
00:02:40.810 --> 00:02:46.940
I just mean that flutter will go ahead and reevaluate DUI and check if something needs to update there.

33
00:02:47.080 --> 00:02:48.730
So this will be very efficient.

34
00:02:49.360 --> 00:02:56.470
So let's grab this list, view builder and return it here inside of this builder function like that.

35
00:02:57.620 --> 00:03:03.090
Now, here, let's actually close it like this year.

36
00:03:03.710 --> 00:03:10.640
So at this extra parenthesis here, remove it there, however, and we can also get rid of that code

37
00:03:10.640 --> 00:03:18.350
down there and get rid of these two closing parentheses here and of the semicolon, use a comma instead

38
00:03:18.650 --> 00:03:21.470
also here and save everything and reformat.

39
00:03:21.470 --> 00:03:23.480
And you should have this code.

40
00:03:26.390 --> 00:03:32.900
So essentially, we now add the stream Boulder connected it to our stream and the find which function

41
00:03:32.910 --> 00:03:35.540
should run whenever this stream gives us a new value.

42
00:03:35.960 --> 00:03:42.050
Now here Stream Snapshot will be our object to get access to that received data.

43
00:03:42.620 --> 00:03:48.620
And we can now replace the hard coded item count here with streams snapshot dot data, which gives us

44
00:03:48.620 --> 00:03:54.800
access to the concrete data we got from the stream dot documents dot length.

45
00:03:55.340 --> 00:04:00.950
The data field will have some documents because the data we're working with is our collection.

46
00:04:00.960 --> 00:04:04.430
So we'll have documents and those documents will have a certain length.

47
00:04:05.950 --> 00:04:13.120
And now is will render as many this works texts as we have documents, so if we save this now, we see

48
00:04:13.120 --> 00:04:14.140
an error down there.

49
00:04:14.140 --> 00:04:20.290
But nonetheless, you see two this works items here, which makes sense because we got two messages.

50
00:04:21.339 --> 00:04:25.680
Now we get an error because that data isn't there right from the start.

51
00:04:26.110 --> 00:04:32.080
Initially, when the request is sent behind the scenes at the data has received no data, is there?

52
00:04:32.950 --> 00:04:40.240
So actually here we should check on the stream snapshot if our connection state is equal to connection

53
00:04:40.250 --> 00:04:41.500
state dot waiting.

54
00:04:42.680 --> 00:04:49.400
Connection state is an object that also comes with flutter and that has this waiting property or to

55
00:04:49.400 --> 00:04:54.740
be precise at CNN, but it has this waiting value, which basically tells us that currently we're still

56
00:04:54.740 --> 00:05:01.700
waiting for some data here and we could return a center, which it with, let's say, a circular progress

57
00:05:01.700 --> 00:05:05.060
indicator here to show this whilst we're waiting for data.

58
00:05:05.690 --> 00:05:07.170
Now, we don't get an error.

59
00:05:07.190 --> 00:05:12.800
If we reload this application, we won't really see the indicator because it load super fast.

60
00:05:12.800 --> 00:05:16.880
But now we do handle that millisecond where no data is there as well.

61
00:05:18.340 --> 00:05:23.110
Now, besides outputting this works, it would, of course, be nicer to output the actual data we have

62
00:05:23.110 --> 00:05:23.470
here.

63
00:05:24.380 --> 00:05:26.000
We can get access to that.

64
00:05:26.970 --> 00:05:33.540
Here we know how to get access to all documents, so I'll actually grab that and stored it in a new

65
00:05:33.900 --> 00:05:36.020
variable here documents.

66
00:05:36.780 --> 00:05:39.630
So that's the documents I get from my stream snapshot.

67
00:05:39.630 --> 00:05:41.640
And I can use that here.

68
00:05:44.670 --> 00:05:50.220
But I can also use it here to get the actual data that's in that document, we can access documents

69
00:05:50.430 --> 00:05:59.340
for the given index index is provided here by the item builder and then access to text field to get

70
00:05:59.340 --> 00:06:03.030
access to the text that's stored inside of a message.

71
00:06:03.660 --> 00:06:09.270
And if we do that and save that and you now see the real messages being output here, and that's, of

72
00:06:09.270 --> 00:06:16.200
course, pretty, pretty nice because this now shows us the data we have here on the backend in our

73
00:06:16.200 --> 00:06:17.130
FIREBASE app.

74
00:06:17.700 --> 00:06:23.550
Lets next see how we can add a new entry and new document by clicking the plus button.

