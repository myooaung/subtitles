WEBVTT
1
00:00:02.190 --> 00:00:05.939
Now here in another Dart deep dive,

2
00:00:05.939 --> 00:00:08.320
I wanna explore another key value

3
00:00:08.320 --> 00:00:09.510
that we have in Dart

4
00:00:09.510 --> 00:00:11.580
and therefore, also in Flutter,

5
00:00:11.580 --> 00:00:14.410
and a relatively new concept

6
00:00:14.410 --> 00:00:16.950
that was added to Dart and Flutter.

7
00:00:16.950 --> 00:00:19.903
And that would be the value null

8
00:00:19.903 --> 00:00:21.750
or the value type null,

9
00:00:21.750 --> 00:00:25.280
and a concept called Null Safety.

10
00:00:25.280 --> 00:00:28.680
Now, let's understand what a null value is.

11
00:00:28.680 --> 00:00:31.040
It's a special kind of built-in value,

12
00:00:31.040 --> 00:00:32.840
and it can be very useful

13
00:00:32.840 --> 00:00:35.553
if you, for example, wanna reset a value.

14
00:00:36.640 --> 00:00:39.860
Let's say you have a variable userName

15
00:00:39.860 --> 00:00:42.803
and that initially has a value of Max.

16
00:00:43.700 --> 00:00:46.990
Now, you get that from some user input anywhere

17
00:00:46.990 --> 00:00:48.040
in your app,

18
00:00:48.040 --> 00:00:50.460
and at some point in your app,

19
00:00:50.460 --> 00:00:52.430
you wanna clear this.

20
00:00:52.430 --> 00:00:53.713
You wanna reset it.

21
00:00:54.580 --> 00:00:56.830
Now, what you could then do in such a case

22
00:00:56.830 --> 00:00:59.293
is you could set it back to an empty string.

23
00:01:00.240 --> 00:01:04.440
Another value you could use to express your intention

24
00:01:04.440 --> 00:01:07.780
that you don't want to have a value right now though

25
00:01:07.780 --> 00:01:11.100
would be the special null value.

26
00:01:11.100 --> 00:01:13.440
Now, if you use null here, I'm getting an error

27
00:01:13.440 --> 00:01:17.180
because I got Null Safety turned on here in DartPad.

28
00:01:17.180 --> 00:01:21.130
And in Flutter apps, you also might have this turned on.

29
00:01:21.130 --> 00:01:23.770
Now, I'll come back to Null Safety in a second.

30
00:01:23.770 --> 00:01:26.640
For the moment, we can turn it off here in DartPad

31
00:01:26.640 --> 00:01:28.853
by clicking on this toggle at the bottom.

32
00:01:30.030 --> 00:01:34.200
Now I'm assigning this special null value to userName,

33
00:01:34.200 --> 00:01:36.150
and with that, I'm saying hey,

34
00:01:36.150 --> 00:01:38.710
userName, at this point here,

35
00:01:38.710 --> 00:01:41.620
shouldn't have a value anymore

36
00:01:41.620 --> 00:01:43.930
because I don't need this name anymore

37
00:01:43.930 --> 00:01:46.080
because it was entered in a form,

38
00:01:46.080 --> 00:01:49.510
which now was reset, something like that.

39
00:01:49.510 --> 00:01:52.830
We'll see use cases where we might want

40
00:01:52.830 --> 00:01:56.300
to store a null value throughout this course.

41
00:01:56.300 --> 00:01:59.360
And therefore, null is a special kind of value.

42
00:01:59.360 --> 00:02:00.850
It simply expresses

43
00:02:00.850 --> 00:02:04.763
that we don't want to have a value at a certain point.

44
00:02:05.790 --> 00:02:09.350
We could assign it here to reset some value.

45
00:02:09.350 --> 00:02:12.160
Alternatively, if I comment this out,

46
00:02:12.160 --> 00:02:14.060
we could also have a scenario

47
00:02:14.060 --> 00:02:17.140
where we don't have a value initially

48
00:02:17.140 --> 00:02:21.100
where initially, userName doesn't contain a value,

49
00:02:21.100 --> 00:02:24.080
and therefore, initially this actually is null,

50
00:02:24.080 --> 00:02:26.700
and then only at a certain point,

51
00:02:26.700 --> 00:02:28.443
we assign a value to it.

52
00:02:29.360 --> 00:02:31.220
This would be the other way around.

53
00:02:31.220 --> 00:02:33.300
Now it's initially an empty value

54
00:02:33.300 --> 00:02:35.603
but at some point, we assign a value.

55
00:02:36.750 --> 00:02:39.180
By the way, this approach is also allowed

56
00:02:39.180 --> 00:02:41.840
if you enable Null Safety.

57
00:02:41.840 --> 00:02:44.090
But again, I'll come back to that in a second.

58
00:02:44.090 --> 00:02:46.340
Let's turn it off for now.

59
00:02:46.340 --> 00:02:49.100
So, null is a value that you could have initially

60
00:02:49.100 --> 00:02:51.330
if you haven't assigned a value yet,

61
00:02:51.330 --> 00:02:54.440
or which you assign explicitly at some point

62
00:02:54.440 --> 00:02:57.230
to reset or clear a variable

63
00:02:57.230 --> 00:03:00.190
or a property you might be working with.

64
00:03:00.190 --> 00:03:03.230
Now, this null value can especially be useful

65
00:03:03.230 --> 00:03:05.530
if you have Boolean comparisons,

66
00:03:05.530 --> 00:03:07.690
if you have a if check, for example.

67
00:03:07.690 --> 00:03:09.630
And you only wanna proceed

68
00:03:09.630 --> 00:03:12.890
if userName does have a value.

69
00:03:12.890 --> 00:03:14.680
You could, for example, check if userName

70
00:03:14.680 --> 00:03:16.550
is not equal to null,

71
00:03:16.550 --> 00:03:20.630
and only continue if it's not null.

72
00:03:20.630 --> 00:03:23.030
That is some code which you could write,

73
00:03:23.030 --> 00:03:26.560
and then you would only proceed if you have a value,

74
00:03:26.560 --> 00:03:29.760
and if, on the other hand, you deliberately set it to null,

75
00:03:29.760 --> 00:03:32.550
you would avoid executing such code.

76
00:03:32.550 --> 00:03:35.880
Again, I'm aware that this is pure theory here

77
00:03:35.880 --> 00:03:37.970
but we'll see use cases like this

78
00:03:37.970 --> 00:03:41.220
and we'll see the null value throughout this course.

79
00:03:41.220 --> 00:03:44.310
But with that, let's dive into another key topic,

80
00:03:44.310 --> 00:03:46.990
the topic of Null Safety.

81
00:03:46.990 --> 00:03:49.350
The idea behind Null Safety

82
00:03:49.350 --> 00:03:52.460
is a relatively new one in Dart,

83
00:03:52.460 --> 00:03:54.310
and therefore also in Flutter,

84
00:03:54.310 --> 00:03:57.710
and in the end, it's all about avoiding bugs

85
00:03:57.710 --> 00:03:59.760
that you might have in your application,

86
00:03:59.760 --> 00:04:03.050
so errors that you might have in your application,

87
00:04:03.050 --> 00:04:06.140
because you might be trying to work with a value

88
00:04:06.140 --> 00:04:11.140
in some place of your code where it might be null.

89
00:04:11.290 --> 00:04:13.320
If you use if checks like this

90
00:04:13.320 --> 00:04:17.089
where you explicitly check if something is null or not,

91
00:04:17.089 --> 00:04:19.269
you can avoid such errors

92
00:04:19.269 --> 00:04:22.240
because then you always know that inside of this if check,

93
00:04:22.240 --> 00:04:25.463
username won't be null because you're checking for it here.

94
00:04:26.470 --> 00:04:28.440
But you also might have other scenarios

95
00:04:28.440 --> 00:04:30.620
where you don't have such a if check,

96
00:04:30.620 --> 00:04:33.250
and where instead, you continue working

97
00:04:33.250 --> 00:04:34.910
with a certain value

98
00:04:34.910 --> 00:04:36.660
as you as a developer might know

99
00:04:36.660 --> 00:04:39.010
that at the point you're using it,

100
00:04:39.010 --> 00:04:40.870
it shouldn't be null

101
00:04:40.870 --> 00:04:42.950
but maybe you have some scenario

102
00:04:42.950 --> 00:04:44.950
in your code where it could be null,

103
00:04:44.950 --> 00:04:48.190
and then your application could crash at runtime.

104
00:04:48.190 --> 00:04:50.690
And the idea behind Null Safety simply is

105
00:04:50.690 --> 00:04:54.360
that Dart runs extra checks on your code

106
00:04:54.360 --> 00:04:58.490
behind the scenes to catch such scenarios.

107
00:04:58.490 --> 00:04:59.800
And let me show you a little bit

108
00:04:59.800 --> 00:05:01.960
of a more concrete example here.

109
00:05:01.960 --> 00:05:03.250
Up to this point in the course,

110
00:05:03.250 --> 00:05:05.130
we worked on outputting questions

111
00:05:05.130 --> 00:05:08.070
and answers for these questions.

112
00:05:08.070 --> 00:05:11.220
And if you did set up your project

113
00:05:11.220 --> 00:05:14.280
with these starting files I provided to you,

114
00:05:14.280 --> 00:05:16.510
that should work for you just fine.

115
00:05:16.510 --> 00:05:17.800
It's especially important

116
00:05:17.800 --> 00:05:20.170
that in your pubspec.yaml file,

117
00:05:20.170 --> 00:05:25.170
you have your environment set to sdk greater 2.11.0.

118
00:05:26.470 --> 00:05:28.620
If you have a different setting here,

119
00:05:28.620 --> 00:05:32.300
for example, greater than 2.12.0,

120
00:05:32.300 --> 00:05:34.800
if I change my setting to that,

121
00:05:34.800 --> 00:05:37.820
then you would actually be getting errors

122
00:05:37.820 --> 00:05:40.360
in the code we wrote thus far.

123
00:05:40.360 --> 00:05:41.620
You would be getting an error

124
00:05:41.620 --> 00:05:45.030
in answer.dart if you're using function here

125
00:05:45.030 --> 00:05:46.760
instead of VoidCallback

126
00:05:46.760 --> 00:05:50.880
but that's not related to this null thing here.

127
00:05:50.880 --> 00:05:52.870
That's only Flutter complaining

128
00:05:52.870 --> 00:05:55.860
that there is a more specific description of the kind

129
00:05:55.860 --> 00:05:59.860
of function that we expect for selectHandler available,

130
00:05:59.860 --> 00:06:02.830
that we want a function that doesn't return a value,

131
00:06:02.830 --> 00:06:05.250
a so-called VoidCallback.

132
00:06:05.250 --> 00:06:08.640
But you would also have an error in main.dart

133
00:06:08.640 --> 00:06:10.980
where we actually get the complaint

134
00:06:10.980 --> 00:06:14.113
that the argument of type Object?

135
00:06:15.185 --> 00:06:18.650
can't be assigned to the parameter type String.

136
00:06:18.650 --> 00:06:21.730
And that's Null Safety in action here.

137
00:06:21.730 --> 00:06:25.400
Null Safety in Flutter projects is enabled

138
00:06:25.400 --> 00:06:28.900
by setting this environment in the pubspec.yaml file

139
00:06:28.900 --> 00:06:32.343
to a value greater or equal to 2.12.

140
00:06:33.350 --> 00:06:35.770
And that's why I set it to 2.11

141
00:06:35.770 --> 00:06:38.780
because this disables Null Safety,

142
00:06:38.780 --> 00:06:40.660
and that's not a problem here

143
00:06:40.660 --> 00:06:43.340
because the code I show you will work.

144
00:06:43.340 --> 00:06:46.610
It doesn't crash, it will work just fine.

145
00:06:46.610 --> 00:06:49.180
But with enabled Null Safety,

146
00:06:49.180 --> 00:06:51.640
Dart runs some extra checks,

147
00:06:51.640 --> 00:06:54.190
which in this case complain about a problem

148
00:06:54.190 --> 00:06:56.280
that doesn't exist.

149
00:06:56.280 --> 00:06:57.640
It might still be an idea

150
00:06:57.640 --> 00:07:00.320
to get rid of that problem in the first place

151
00:07:00.320 --> 00:07:03.490
but I wanna emphasize that it's not an actual problem

152
00:07:03.490 --> 00:07:05.150
in our code here.

153
00:07:05.150 --> 00:07:08.460
And since I recorded the course before the release

154
00:07:08.460 --> 00:07:10.590
of this Null Safety feature,

155
00:07:10.590 --> 00:07:11.780
throughout this course,

156
00:07:11.780 --> 00:07:14.150
you'll have various situations

157
00:07:14.150 --> 00:07:16.910
where those Null Safety checks would complain

158
00:07:16.910 --> 00:07:20.150
about issues that aren't really issues

159
00:07:20.150 --> 00:07:23.130
and that won't lead to problems in the app.

160
00:07:23.130 --> 00:07:25.700
Here the problem it's complaining about

161
00:07:25.700 --> 00:07:29.860
is that questionText, the questionText I'm extracting here,

162
00:07:29.860 --> 00:07:31.810
could theoretically be null

163
00:07:31.810 --> 00:07:35.760
because Dart doesn't understand our code here good enough

164
00:07:35.760 --> 00:07:39.160
to see that it actually can't ever be null

165
00:07:39.160 --> 00:07:41.682
because the way we configure all those questions,

166
00:07:41.682 --> 00:07:45.940
every questionText has a non-null string value.

167
00:07:45.940 --> 00:07:49.540
But Dart doesn't understand our code good enough to see that

168
00:07:49.540 --> 00:07:53.230
and therefore, this question mark here after Object

169
00:07:53.230 --> 00:07:55.080
in this error message signals

170
00:07:55.080 --> 00:07:59.410
that Dart thinks that this could be an object value,

171
00:07:59.410 --> 00:08:01.480
so any kind of value,

172
00:08:01.480 --> 00:08:04.770
but it could also be null.

173
00:08:04.770 --> 00:08:07.440
And a null value would cause an error here,

174
00:08:07.440 --> 00:08:09.260
even though we as a developer, of course,

175
00:08:09.260 --> 00:08:11.330
know that in this case here,

176
00:08:11.330 --> 00:08:13.650
questionText can't ever be null

177
00:08:13.650 --> 00:08:16.560
because the way we set up our questions ensures

178
00:08:16.560 --> 00:08:18.390
that there is no question

179
00:08:18.390 --> 00:08:22.430
where the questionText would hold a null value.

180
00:08:22.430 --> 00:08:26.010
But that's exactly the problem you can get with Null Safety.

181
00:08:26.010 --> 00:08:28.420
You get extra errors in cases

182
00:08:28.420 --> 00:08:31.180
where your code is absolutely fine.

183
00:08:31.180 --> 00:08:33.020
And that is why for this course,

184
00:08:33.020 --> 00:08:35.429
I recommend that you turn off Null Safety

185
00:08:35.429 --> 00:08:37.140
because I recorded the course

186
00:08:37.140 --> 00:08:39.070
before this feature was released.

187
00:08:39.070 --> 00:08:41.270
Hence I didn't have those extra warnings,

188
00:08:41.270 --> 00:08:43.010
and hence, there are code snippets

189
00:08:43.010 --> 00:08:44.960
that would cause these errors,

190
00:08:44.960 --> 00:08:49.350
even though the code I show you is absolutely fine.

191
00:08:49.350 --> 00:08:52.780
Alternatively, you can also try to improve the code

192
00:08:52.780 --> 00:08:56.220
to convince Dart that this won't ever be null

193
00:08:56.220 --> 00:08:58.130
by adding an exclamation mark

194
00:08:58.130 --> 00:09:00.153
after a statement where Dart thinks

195
00:09:00.153 --> 00:09:02.180
that it could be null.

196
00:09:02.180 --> 00:09:06.170
Then here the only remaining problem is that Dart sees

197
00:09:06.170 --> 00:09:09.370
that this is any object, so any value,

198
00:09:09.370 --> 00:09:11.250
not necessarily a string,

199
00:09:11.250 --> 00:09:13.680
and it's also not too happy about that.

200
00:09:13.680 --> 00:09:16.400
And therefore, you can fix this issue as well

201
00:09:16.400 --> 00:09:19.150
by instead writing as String here

202
00:09:19.150 --> 00:09:21.520
just as one line below that,

203
00:09:21.520 --> 00:09:24.123
we're writing as List String.

204
00:09:25.320 --> 00:09:27.510
There we do that to convince Dart

205
00:09:27.510 --> 00:09:29.370
that this will be a list of strings.

206
00:09:29.370 --> 00:09:31.310
Now I'm doing this to convince Dart

207
00:09:31.310 --> 00:09:32.960
that this will be a string.

208
00:09:32.960 --> 00:09:37.030
And then I automatically, with that as String,

209
00:09:37.030 --> 00:09:39.570
tell Dart that it will always be a string,

210
00:09:39.570 --> 00:09:41.660
never null or anything like that.

211
00:09:41.660 --> 00:09:44.840
So with that, we then also fix this potential null issue

212
00:09:44.840 --> 00:09:47.320
in the same step because I tell Dart

213
00:09:47.320 --> 00:09:51.260
that I as a developer know that this will never be null.

214
00:09:51.260 --> 00:09:52.810
So that's how we could fix this

215
00:09:52.810 --> 00:09:54.240
but again, as mentioned before,

216
00:09:54.240 --> 00:09:56.700
my recommendation to follow along smoothly

217
00:09:56.700 --> 00:09:59.360
with exactly the same code you see in the videos

218
00:09:59.360 --> 00:10:02.700
is that you set your environment SDK version

219
00:10:02.700 --> 00:10:05.370
to greater or equal 2.11

220
00:10:05.370 --> 00:10:07.550
instead of a higher value,

221
00:10:07.550 --> 00:10:09.450
because that will then disable

222
00:10:09.450 --> 00:10:11.230
these extra Null Safety checks

223
00:10:11.230 --> 00:10:13.170
and the code you write is the same,

224
00:10:13.170 --> 00:10:14.690
the code works just fine.

225
00:10:14.690 --> 00:10:18.263
You just don't have these wrong error messages.

226
00:10:20.060 --> 00:10:22.610
Now, to conclude this lecture

227
00:10:22.610 --> 00:10:24.300
about null and Null Safety,

228
00:10:24.300 --> 00:10:26.770
I wanna come back to the example from the beginning,

229
00:10:26.770 --> 00:10:28.263
here in DartPad.

230
00:10:29.190 --> 00:10:30.970
You might remember that here,

231
00:10:30.970 --> 00:10:33.450
if Null Safety was turned on,

232
00:10:33.450 --> 00:10:36.101
if I did set my string to null here,

233
00:10:36.101 --> 00:10:38.280
I got an error here.

234
00:10:38.280 --> 00:10:41.430
I got an error because now it is a string

235
00:10:41.430 --> 00:10:45.170
and Dart infers that this variable should hold a string

236
00:10:45.170 --> 00:10:47.800
because we initialize it with a string,

237
00:10:47.800 --> 00:10:49.379
but I then set it to null.

238
00:10:49.379 --> 00:10:51.120
And null is not a string.

239
00:10:51.120 --> 00:10:54.450
It's a separate type, the type null.

240
00:10:54.450 --> 00:10:58.070
If we wanna allow that we set this to null,

241
00:10:58.070 --> 00:11:00.600
so if we wanna tell Dart that userName

242
00:11:00.600 --> 00:11:03.510
is either a string or a null,

243
00:11:03.510 --> 00:11:08.090
then we have to change the way we introduce this variable.

244
00:11:08.090 --> 00:11:09.778
Instead of writing it like this,

245
00:11:09.778 --> 00:11:11.840
we can write it like this

246
00:11:11.840 --> 00:11:14.947
with this question mark after the type name.

247
00:11:14.947 --> 00:11:16.930
With that, we're telling Dart

248
00:11:16.930 --> 00:11:20.610
that this should generally be a string,

249
00:11:20.610 --> 00:11:22.570
so we still wouldn't be allowed

250
00:11:22.570 --> 00:11:25.220
to store numbers or anything like that.

251
00:11:25.220 --> 00:11:28.270
But with the question mark, which is optional,

252
00:11:28.270 --> 00:11:32.850
we tell Dart that this might also hold a null value.

253
00:11:32.850 --> 00:11:34.150
So without the question mark,

254
00:11:34.150 --> 00:11:36.520
we still get the error we got before.

255
00:11:36.520 --> 00:11:40.000
With the question mark, we tell Dart it's okay,

256
00:11:40.000 --> 00:11:41.830
this should be a string

257
00:11:41.830 --> 00:11:44.527
but if it's null, that's also okay.

258
00:11:44.527 --> 00:11:47.370
So if you have Null Safety enabled,

259
00:11:47.370 --> 00:11:50.100
then you can use this question mark

260
00:11:50.100 --> 00:11:54.010
when introducing variables or function parameters

261
00:11:54.010 --> 00:11:56.201
or object properties

262
00:11:56.201 --> 00:12:00.290
to tell Dart that this variable, parameter

263
00:12:00.290 --> 00:12:04.540
or property may have its main value type

264
00:12:04.540 --> 00:12:06.523
but may also be null.

265
00:12:07.470 --> 00:12:09.060
And that's it for the null value

266
00:12:09.060 --> 00:12:10.940
and Null Safety at the moment.

267
00:12:10.940 --> 00:12:13.480
We will see now throughout this course

268
00:12:13.480 --> 00:12:14.880
in various examples,

269
00:12:14.880 --> 00:12:18.400
and as I mentioned, Null Safety is not covered in depth here

270
00:12:18.400 --> 00:12:20.130
because the course was recorded

271
00:12:20.130 --> 00:12:22.010
before that feature was released

272
00:12:22.010 --> 00:12:25.480
but the code we write won't have any problems with null.

273
00:12:25.480 --> 00:12:27.823
So we also don't need it for this course.

