WEBVTT
1
00:00:02.250 --> 00:00:04.590
Time for some alternative syntaxes.

2
00:00:04.650 --> 00:00:11.070
There's nothing wrong with the way we provided our packages or our data thus far, but I'm always a

3
00:00:11.070 --> 00:00:14.060
fan of showing you alternative ways of doing something.

4
00:00:14.790 --> 00:00:19.770
For example, here in the main Dardanelle, we're having our changed notifier provider where we need

5
00:00:19.770 --> 00:00:23.310
to provide that builder method and distend, actually.

6
00:00:24.360 --> 00:00:31.470
Runs this function, gets a context, returns the data we want to provide, if that data does not depend

7
00:00:31.470 --> 00:00:35.580
on the context as we do here, it's kind of redundant to get that.

8
00:00:36.040 --> 00:00:40.500
Of course, you can then use the underscore to signal that you're not interested in it.

9
00:00:41.010 --> 00:00:47.370
But actually, Geralt is a shortcut or an alternative constructor for a change notifier provider, which

10
00:00:47.370 --> 00:00:52.240
you could use, and that is the dot value constructor instead of a builder.

11
00:00:52.890 --> 00:00:57.000
This simply takes a value argument, a datastore value you want to provide.

12
00:00:57.000 --> 00:01:02.610
And if your value doesn't depend on the context, you can absolutely use this instead of the builder

13
00:01:02.610 --> 00:01:03.000
method.

14
00:01:03.340 --> 00:01:07.260
And of course, it's the same in here in product Scribd where I have to.

15
00:01:08.230 --> 00:01:14.350
Change notifier provider with that builder function, you can use that, but you can also use the value

16
00:01:14.350 --> 00:01:20.980
constructor of change notifier provider and simply provide a value, which in our case here is that

17
00:01:20.980 --> 00:01:22.270
single product.

18
00:01:22.750 --> 00:01:25.480
And if you do that and you do a full refresh your.

19
00:01:26.580 --> 00:01:33.330
Of course, you see, it still works as before, but now it's a bit shorter, so that's option number

20
00:01:33.330 --> 00:01:36.570
one, which makes sense if you're not really using the context.

21
00:01:37.530 --> 00:01:44.450
Now, there actually is an important difference between change, notifier provider, Daudt value and

22
00:01:44.450 --> 00:01:49.060
the approach we had before with the builder function, distort value approach.

23
00:01:49.080 --> 00:01:55.260
Here is the right approach you should use if you, for example, use a provider on something that's

24
00:01:55.260 --> 00:02:01.380
part of a list or a regret because of the issue I described in the last lecture where widgets are recycled

25
00:02:01.380 --> 00:02:01.980
by Flattr.

26
00:02:01.980 --> 00:02:08.460
But the data that's attached to the widget changes when using change notifier provider value.

27
00:02:08.639 --> 00:02:15.090
You actually make sure that the provider works even if data changes for the widget.

28
00:02:15.120 --> 00:02:21.000
If you had a builder function that would not work correctly here, it will work correctly because now

29
00:02:21.000 --> 00:02:29.220
the provider is tied to its data and is attached and detached to and from the widget instead of changing

30
00:02:29.220 --> 00:02:31.170
data being attached to the same provider.

31
00:02:31.410 --> 00:02:37.920
So distort value constructor Syntex is the approach you should use in this scenario here and in all

32
00:02:37.920 --> 00:02:45.960
scenarios where you have the provider package and you're providing your data on a single list or grid

33
00:02:45.960 --> 00:02:53.510
items where Flautre then actually will recycle the widgets you're attaching your provider to with this

34
00:02:53.520 --> 00:03:01.110
thought value constructor approach that will work without issues with the builder function we use before

35
00:03:01.290 --> 00:03:02.850
that would cost bux.

36
00:03:02.850 --> 00:03:08.520
As soon as you have more items that do actually go beyond the screen boundaries because of the way widgets

37
00:03:08.520 --> 00:03:14.850
are recycled and your data changes and your provider wouldn't keep up with that, the value constructor

38
00:03:14.850 --> 00:03:16.040
will keep up with that.

39
00:03:16.170 --> 00:03:17.600
That's just a little side note.

40
00:03:18.420 --> 00:03:18.630
No.

41
00:03:18.630 --> 00:03:24.420
One other important note about change notifier provider, although with the thought value approach here

42
00:03:24.810 --> 00:03:27.270
in Meinhardt where I'm also using this.

43
00:03:28.900 --> 00:03:36.700
Here, there, it's actually the better approach to not use this way of providing this products value,

44
00:03:36.970 --> 00:03:43.090
but instead here you should use that old approach of having the create or the builder method where you

45
00:03:43.090 --> 00:03:47.940
then get your context and create products like this.

46
00:03:48.280 --> 00:03:48.840
Why?

47
00:03:49.240 --> 00:03:56.380
Because whenever you instantiate a class, so whenever you create a new object based on a class, as

48
00:03:56.380 --> 00:04:02.860
we're doing it here, if you do that to provide that object to to change notifier provider, you should

49
00:04:02.860 --> 00:04:07.270
use the create method for efficiency into a white box.

50
00:04:07.780 --> 00:04:13.870
Whenever you reuse an existing object like we're doing it, integrate where we cycle through a list

51
00:04:13.870 --> 00:04:15.790
of products which already all exist.

52
00:04:16.060 --> 00:04:19.050
It's recommended that you use that value approach.

53
00:04:19.060 --> 00:04:20.959
So if the value constructor.

54
00:04:21.519 --> 00:04:23.110
Now, it would also work.

55
00:04:23.350 --> 00:04:30.370
If we would use the dot value constructor here in MAINARD, it just might be a little bit less efficient

56
00:04:30.370 --> 00:04:35.230
and maybe lead to unnecessary referendums or in some apps it might be buggy.

57
00:04:35.710 --> 00:04:41.890
Therefore, when you create a new instance of object and you want to provide is used to create or the

58
00:04:41.890 --> 00:04:44.400
builder method as I'm doing it here in Mainard.

59
00:04:44.410 --> 00:04:50.200
Now, if you reuse an existing object like we're doing it in the product script, you should use the

60
00:04:50.200 --> 00:04:56.790
dot value provider with the value you're providing as we're doing it here now over the next lecture's

61
00:04:56.800 --> 00:05:02.060
you actually see that I in the Mainard filed still use the dot value provider.

62
00:05:02.080 --> 00:05:07.130
So the one I told you is not the best possible way of doing it because it won't hurt.

63
00:05:07.130 --> 00:05:12.310
Does application just because it's not the best possible way does not mean that it doesn't work, that

64
00:05:12.310 --> 00:05:15.270
it crashes your app or that it's super inefficient.

65
00:05:15.640 --> 00:05:21.520
I just want to tell you this best practice which emerged since I recorded the course so that you are

66
00:05:21.520 --> 00:05:26.200
aware of it, you could also use the other approach, which I'm going to use over the next lectures.

67
00:05:26.380 --> 00:05:30.430
But using create if you are creating a new instance is recommended.

68
00:05:32.920 --> 00:05:38.680
There's another important thing if we navigate to a totally different screen, and with that, I don't

69
00:05:38.680 --> 00:05:44.770
mean the detailed screen which is pushed on top of the screen, but if we had tabs or if we used push

70
00:05:44.770 --> 00:05:51.490
replacement and we had a screen that replaces the old screen, then it's important that we clean up

71
00:05:51.490 --> 00:05:58.600
our provided data Flattr automatically for you, cleans up all the widgets it built so that they don't

72
00:05:58.600 --> 00:06:00.160
take up space and memory anymore.

73
00:06:00.400 --> 00:06:06.070
But your provided data would still end up in memory and that would be bad because the more often you

74
00:06:06.070 --> 00:06:10.900
then visit and leave that page, the more data is stored in memory.

75
00:06:10.900 --> 00:06:15.820
And that leads to memory leaks where your memory will at some point overflow.

76
00:06:16.660 --> 00:06:21.580
So it's important that you dispose of the data you are storing here and here.

77
00:06:21.580 --> 00:06:27.310
The good thing is change notify provider no matter if you use it with the value constructor or not,

78
00:06:27.610 --> 00:06:31.900
automatically cleans up that data for you when it's not required anymore.

79
00:06:32.410 --> 00:06:34.080
So you don't have to worry about that.

80
00:06:34.090 --> 00:06:38.020
It's just important to be aware of that because maybe you didn't think about that.

81
00:06:38.350 --> 00:06:42.250
And actually that would be pretty normal at this point that you don't think about this.

82
00:06:42.730 --> 00:06:48.340
But if you ever come to that point, you think, well, what's happening to my old data, no worries.

83
00:06:48.340 --> 00:06:50.830
Changed Notifier provider cleans it up for you.

