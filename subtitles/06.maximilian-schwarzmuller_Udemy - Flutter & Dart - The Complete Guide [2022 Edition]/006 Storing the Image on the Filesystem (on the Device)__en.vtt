WEBVTT
1
00:00:02.220 --> 00:00:08.100
Now it's storing that image in a variable is a nice first step, but of course, doesn't help us that

2
00:00:08.100 --> 00:00:08.580
much, right.

3
00:00:08.730 --> 00:00:14.490
So the first thing we can do, though, is, of course, we can call set state here because we're in

4
00:00:14.490 --> 00:00:17.250
a stateful widget and set our stored image.

5
00:00:17.280 --> 00:00:22.710
So this property up there, which is a file equal to the image file we took from the camera.

6
00:00:23.340 --> 00:00:24.960
Now, again, a little addition here.

7
00:00:24.960 --> 00:00:31.200
At this point, if you are using that newer version of the image picker and you're using that alternative

8
00:00:31.200 --> 00:00:34.320
approach of picking the image, which is optional, as I mentioned.

9
00:00:34.350 --> 00:00:35.670
But if you are doing that.

10
00:00:35.880 --> 00:00:40.860
So if your code looks like this, you're with get image.

11
00:00:42.240 --> 00:00:47.880
Then what you're getting back here from the get image method is not a file you can use like this.

12
00:00:47.910 --> 00:00:48.870
It's not a file.

13
00:00:48.900 --> 00:00:56.730
As you get it from Dart Io, it's instead picked file, which is a specific type provided by the image

14
00:00:56.730 --> 00:00:57.750
picker package.

15
00:00:58.380 --> 00:01:05.880
And in order to use that and convert it to a regular file, you should simply Rapides image file here

16
00:01:05.910 --> 00:01:09.390
with the file constructor and access the path on it.

17
00:01:09.720 --> 00:01:12.720
So this converts the picked file to a regular file.

18
00:01:13.150 --> 00:01:16.260
And with Dad, you've got to update some text with the latest version.

19
00:01:16.410 --> 00:01:20.550
Alternatively, as mentioned multiple times, you can stick to the code shown in the video.

20
00:01:20.790 --> 00:01:25.530
This is simply the more future proof code, which will work with future versions of Image Picker as

21
00:01:25.530 --> 00:01:25.860
well.

22
00:01:26.700 --> 00:01:30.030
This should at least allow us to see it here in our preview.

23
00:01:30.150 --> 00:01:30.370
Right.

24
00:01:30.390 --> 00:01:32.130
Because once stored image is set.

25
00:01:32.370 --> 00:01:37.770
We're trying to display that file here with the image widget, which has a file provider, basically.

26
00:01:38.820 --> 00:01:39.740
Let's give data try.

27
00:01:39.840 --> 00:01:42.150
Before we continue with saving the image on the device.

28
00:01:42.540 --> 00:01:49.270
So if I save this and I go back to take picture, let's take a picture here with that emulator camera

29
00:01:49.280 --> 00:01:49.740
prevue.

30
00:01:52.130 --> 00:01:54.310
And indeed, here is my picture.

31
00:01:54.340 --> 00:01:55.490
So that is looking good.

32
00:01:55.520 --> 00:01:56.510
That is working.

33
00:01:57.570 --> 00:02:00.210
But still, it's of course, not that useful.

34
00:02:00.420 --> 00:02:07.050
If we can only manage our image here in a variable and in memory, basically, because that means that

35
00:02:07.860 --> 00:02:09.539
we're not adding a place here.

36
00:02:09.600 --> 00:02:10.840
When we go back, it's lost.

37
00:02:10.840 --> 00:02:13.110
And when we restart the app, it's all the lost.

38
00:02:13.140 --> 00:02:15.000
And that's, of course, not the idea.

39
00:02:15.390 --> 00:02:22.710
Instead, we want a story that falls somewhere permanently on our device, hard drive so that we can

40
00:02:22.740 --> 00:02:26.070
then work with this image whenever we restart the app.

41
00:02:26.130 --> 00:02:26.820
And so on.

42
00:02:27.690 --> 00:02:34.530
Now, to store it on our hard drive, we need more packages that help us with that because interacting

43
00:02:34.530 --> 00:02:37.230
with the hard drive can be challenging.

44
00:02:37.890 --> 00:02:38.850
To be precise.

45
00:02:39.120 --> 00:02:42.900
Actually, it starts in a pretty straightforward way.

46
00:02:43.470 --> 00:02:49.410
Maybe here, after updating our preview image, you can use the image file, which you got up there,

47
00:02:49.440 --> 00:02:50.400
which is a file.

48
00:02:51.510 --> 00:02:56.400
And on that, you can call copy to copy this fall in a new location.

49
00:02:56.460 --> 00:02:57.090
So that's great.

50
00:02:57.570 --> 00:03:01.310
Now we need to enter a path on our device where we want to copy this, too.

51
00:03:01.440 --> 00:03:07.950
And this is the very tricky part, because, of course, as you can imagine on OS and Android, you

52
00:03:07.950 --> 00:03:12.510
can't write files to any place on the hard drive.

53
00:03:12.540 --> 00:03:18.060
Instead, there are a lot of restrictions regarding where you can write data to so that you don't clutter

54
00:03:18.060 --> 00:03:24.390
up the hard drive of the mobile device or start writing files into folders where you really shouldn't

55
00:03:24.390 --> 00:03:25.140
have access.

56
00:03:25.830 --> 00:03:31.350
So Dan, for both I was an android typically give you a certain path where you can store where your

57
00:03:31.470 --> 00:03:32.550
app related data.

58
00:03:33.320 --> 00:03:38.940
And that's a good thing, because since such a path is clearly defined by both operating systems, that

59
00:03:38.940 --> 00:03:40.950
means what, dead whenever you delete your app.

60
00:03:40.980 --> 00:03:44.700
These operating systems can erase all the data from that path.

61
00:03:45.000 --> 00:03:51.410
And they know that all your app specific data is gone to Gabber with the app and dad keeps your device

62
00:03:51.420 --> 00:03:55.110
hard, drive clean and a wides that you save files anywhere.

63
00:03:55.230 --> 00:04:01.050
And when you uninstall the app, these files are still there and therefore your hard drive would well

64
00:04:01.050 --> 00:04:03.240
reach its capacity at some point of time.

65
00:04:03.780 --> 00:04:08.910
So it's good that you have clearly defined Pops' where you can store your data.

66
00:04:09.060 --> 00:04:12.090
But of course, that also means that you need to find out which parts that are.

67
00:04:12.840 --> 00:04:19.790
And for dad, we can use a certain package which we can search for OMGPOP death and its path underscore

68
00:04:19.860 --> 00:04:23.250
provider has nothing to do with the provider package instead.

69
00:04:23.580 --> 00:04:30.660
This is a package which helps you get access to the Prof's, ISIS and Android give you to store data.

70
00:04:31.800 --> 00:04:34.530
So as always, let's go to the installing tap here.

71
00:04:34.560 --> 00:04:40.380
And at this entry to the Pops back at Yamal, fall below our image picker here like this.

72
00:04:40.920 --> 00:04:44.130
And before I had safe, I need yet another package.

73
00:04:44.130 --> 00:04:45.630
And that's the Poff package.

74
00:04:45.750 --> 00:04:46.650
Just Poff.

75
00:04:47.310 --> 00:04:49.600
This helps us with constructing pots.

76
00:04:49.770 --> 00:04:52.530
So one package helps us with finding paths.

77
00:04:52.830 --> 00:04:57.180
This package helps us with come combining POS basically.

78
00:04:57.180 --> 00:04:59.250
And you'll see why we need this in a second.

79
00:04:59.820 --> 00:05:04.320
So let's also install this at this entry here to the prospect of YAML file.

80
00:05:04.680 --> 00:05:05.800
And now SAFET is.

81
00:05:06.150 --> 00:05:09.780
And again, if it doesn't work, run Flattr packages get.

82
00:05:10.950 --> 00:05:16.780
So now with these two packages back and the image input widget here, we can import them both.

83
00:05:17.020 --> 00:05:20.170
We can import our package palls.

84
00:05:21.220 --> 00:05:22.820
And their tipoff dard fall.

85
00:05:23.010 --> 00:05:31.080
And maybe give us a pop prefix so that we can use all the methods it provides on the path thing here

86
00:05:31.080 --> 00:05:32.190
with Poff Dot.

87
00:05:32.460 --> 00:05:33.510
And then the method name.

88
00:05:34.260 --> 00:05:36.690
And that's all they import a package.

89
00:05:36.930 --> 00:05:40.470
The path provider package and dare to Paul provider dard fall.

90
00:05:41.250 --> 00:05:46.270
And I'll give does a prefix of sis pops for a system puff's.

91
00:05:46.380 --> 00:05:48.600
But you don't need to assign these prefixes.

92
00:05:48.840 --> 00:05:53.160
I just do this so that it's really clear which functionality is coming from which package.

93
00:05:54.000 --> 00:05:59.780
So now down there where I want to copy this, we need to find out where we're allowed to copy it.

94
00:05:59.790 --> 00:06:06.450
Cube and Dale, for we first of all need to find our app Dï¿½rer, our app directory, where we can store

95
00:06:06.450 --> 00:06:10.780
data and we can do this with the help offices payoff's.

96
00:06:12.100 --> 00:06:12.900
Object here.

97
00:06:13.090 --> 00:06:16.270
So in the end, with the help of the Poff provider, a package.

98
00:06:17.430 --> 00:06:21.120
A deer, we can use Babson's puffs.

99
00:06:21.390 --> 00:06:24.380
And there we can use to get application documents.

100
00:06:24.410 --> 00:06:27.290
Directory method, you see, you have a couple of methods there.

101
00:06:27.840 --> 00:06:33.030
For example, also for getting access to the external storage, which only works on Android, though,

102
00:06:33.120 --> 00:06:36.500
so not really an option if you build an app that should work for us too.

103
00:06:36.870 --> 00:06:42.390
This would give you access to an external SD card if a whale or the temporary directory.

104
00:06:42.390 --> 00:06:48.920
But as the name suggests, this is a temporary directory and it will regularly be cleaned up by your

105
00:06:48.920 --> 00:06:49.920
operating system.

106
00:06:50.100 --> 00:06:55.320
So don't store anything in there which should be a living a bit longer, at least as long as your app.

107
00:06:55.860 --> 00:07:01.500
The images we're taking right now with the camera, for example, also are stored in the temporary directory

108
00:07:01.890 --> 00:07:04.170
and therefore they get the lead that at some point of time.

109
00:07:04.620 --> 00:07:07.590
So we need access to the applications documents directory.

110
00:07:07.680 --> 00:07:12.780
That's a directory on the device which is reserved for app data.

111
00:07:13.260 --> 00:07:14.970
And that sounds just about right.

112
00:07:15.990 --> 00:07:19.860
Notice here actually gives us a future which then yields the directory.

113
00:07:20.190 --> 00:07:22.080
So I will await for this.

114
00:07:22.450 --> 00:07:27.170
And then for now, we'll have a handle to date directories stored in Apter.

115
00:07:27.780 --> 00:07:28.530
So that's one thing.

116
00:07:28.530 --> 00:07:35.010
But here for a copy, we need a poff, which is actually just a string, not a directory handle.

117
00:07:35.760 --> 00:07:43.120
But the good thing is that our app Dir directory has a path property which gives us the path as a stream.

118
00:07:43.830 --> 00:07:46.800
But I don't want to copy my image like this.

119
00:07:46.830 --> 00:07:51.750
Instead, you also have to provide the name of the image it should have.

120
00:07:52.440 --> 00:07:57.180
And for that I'm fine with the name that was automatically assigned by the camera, by the image picker.

121
00:07:57.540 --> 00:07:59.820
And to get debt we can use.

122
00:08:00.640 --> 00:08:01.170
Poff.

123
00:08:01.880 --> 00:08:06.100
And that's now using this prefix and dayle for referring to the pop package.

124
00:08:07.050 --> 00:08:10.440
Path dot based name, which gives you.

125
00:08:12.370 --> 00:08:18.620
The part of a poff ofter de los separator, which is a complex name for a saying, the foll name.

126
00:08:19.490 --> 00:08:21.050
So here we can enter.

127
00:08:22.860 --> 00:08:26.790
Image file dot poff debts to file.

128
00:08:26.910 --> 00:08:30.210
That's the path to where our image file is currently stored.

129
00:08:30.300 --> 00:08:32.760
So this temporary directory I just mentioned.

130
00:08:33.150 --> 00:08:39.179
And there the path does not just contain the folders where it's stored in, but also it it includes

131
00:08:39.330 --> 00:08:40.799
the name of the file.

132
00:08:40.799 --> 00:08:42.370
And with base name we get.

133
00:08:42.390 --> 00:08:50.040
Dead file name, including the file extension sold stored is in a file name, variable or constant here.

134
00:08:52.060 --> 00:08:55.640
And they have for now, you can copy this into this path.

135
00:08:56.270 --> 00:09:02.150
And then also at the fall name and therefore here I'll enter a string and then use string interpolation

136
00:09:02.690 --> 00:09:03.620
to get my.

137
00:09:04.700 --> 00:09:12.740
Apter Dort Path Theater and then a slash to basically tell flatter or dard that you want to navigate

138
00:09:12.740 --> 00:09:19.760
into this path, so to say, into the folder here, and then I'll use more string interpolation and

139
00:09:20.510 --> 00:09:22.160
output my file name here.

140
00:09:22.310 --> 00:09:27.020
So that means I basically copy the file into this path and I keep the following.

141
00:09:27.050 --> 00:09:28.160
That's what we're doing here.

142
00:09:29.150 --> 00:09:33.050
Now copy also is returning a future because this can take a while.

143
00:09:33.200 --> 00:09:34.340
Not too long, of course.

144
00:09:34.370 --> 00:09:36.920
But still, you don't want to block your Abara code.

145
00:09:37.530 --> 00:09:37.940
So you're.

146
00:09:38.000 --> 00:09:41.750
I will await for this because we're using async a weight to work with these futures.

147
00:09:42.170 --> 00:09:51.230
And here idea for half my Safet image and yet and desist now D image as its safet in its final destination.

148
00:09:52.470 --> 00:09:59.970
Now, it's this saved image which we then can work with in other parts of our application, for example,

149
00:09:59.970 --> 00:10:08.070
to store it to a on device database so that we can combine it with a title and have a permanent entry

150
00:10:08.280 --> 00:10:08.940
on our device.

151
00:10:08.970 --> 00:10:13.530
But before we do that, let's make sure we work with this in memory first.

