WEBVTT
1
00:00:02.160 --> 00:00:08.100
So we added a loading spinner that's nice and certainly helpful to our users, but what if things go

2
00:00:08.100 --> 00:00:08.700
wrong?

3
00:00:09.330 --> 00:00:14.550
If things go wrong, for example, when adding a product, then currently we're not doing anything.

4
00:00:15.550 --> 00:00:18.500
Now, here in this application, there is little that could go wrong.

5
00:00:18.520 --> 00:00:20.890
To be honest, I have a good Internet connection here.

6
00:00:20.890 --> 00:00:22.720
Firebase is a stable service.

7
00:00:22.930 --> 00:00:27.580
Errors are unlikely, but of course, reality errors will happen to your users.

8
00:00:27.580 --> 00:00:29.010
Lose the Internet connection.

9
00:00:29.290 --> 00:00:33.520
There is an error on the server or invalid data is sent somehow.

10
00:00:33.940 --> 00:00:37.420
And here I can simulate an error by removing Dargis at the end.

11
00:00:37.570 --> 00:00:40.540
Firebase will not like this and will actually throw an error.

12
00:00:40.570 --> 00:00:43.690
Now let me demonstrate this by now.

13
00:00:43.690 --> 00:00:50.450
Go to manage products and I try to add a new product, a book for twelve ninety nine.

14
00:00:50.890 --> 00:00:52.750
This is an awesome.

15
00:00:54.020 --> 00:00:58.340
Book, if I now try to add this with my.

16
00:00:59.610 --> 00:01:06.210
Dummy image here, and I would say if we see a spinner and now the spinner will not go away simply because

17
00:01:06.210 --> 00:01:12.360
if we go back, we see that there is an error, there is an error thrown by Firebase or returned by

18
00:01:12.360 --> 00:01:18.930
Firebase, and that then is ultimately caught by the DP package we're using and thrown as an error in

19
00:01:18.930 --> 00:01:19.680
our app.

20
00:01:20.130 --> 00:01:26.670
And the error we're getting here in the end is giving us an error message, which is quite helpful,

21
00:01:26.670 --> 00:01:29.360
which is actually nice and would help us fix that error.

22
00:01:29.370 --> 00:01:33.290
Since this, of course, is an error I introduced as a developer.

23
00:01:33.660 --> 00:01:36.480
We see IDs of type format exception in darts.

24
00:01:36.550 --> 00:01:41.940
There are different exception based clauses which are built into DART, which describe errors that can

25
00:01:41.940 --> 00:01:42.320
happen.

26
00:01:42.720 --> 00:01:44.940
And here we're having such an error.

27
00:01:45.390 --> 00:01:47.640
So this request here, isn't he?

28
00:01:47.640 --> 00:01:53.970
And now throwing an error and it's bubbling up and becomes a real error in our app, which is frio and

29
00:01:53.970 --> 00:01:58.340
here in the DBA console and crashes our app because we're not handling that error.

30
00:01:58.830 --> 00:02:05.850
We should handle such errors not only because we then awide the app crashing, but also because this

31
00:02:05.850 --> 00:02:11.400
of course, is not a great user experience showing that Spiner and not telling the user anything that's

32
00:02:11.400 --> 00:02:12.120
not that great.

33
00:02:12.900 --> 00:02:14.880
How can you handle errors?

34
00:02:15.570 --> 00:02:21.810
Well, we used then here on our future to define the function to code that should run Windows future

35
00:02:21.810 --> 00:02:22.540
succeeds.

36
00:02:23.310 --> 00:02:29.650
Now, similarly, you can also define a method that should run when that fails and you can simply add

37
00:02:30.030 --> 00:02:37.050
after then here you can add it after then because then itself returns a new future and dhafer whatever

38
00:02:37.050 --> 00:02:38.160
I call after that.

39
00:02:38.170 --> 00:02:43.620
So with a dot on the result of then is effectively called on the future returned by then.

40
00:02:43.740 --> 00:02:44.040
Right.

41
00:02:44.050 --> 00:02:47.370
So some calling this on that future object then returns.

42
00:02:47.730 --> 00:02:54.810
I could also call catch error here in front of them and then I would also had errors thrown by this

43
00:02:54.810 --> 00:02:58.620
post method, which is the method that yields this error here in the end.

44
00:02:58.860 --> 00:03:06.210
But if I call catch error here before I have my then block, then the logic in this then block will

45
00:03:06.210 --> 00:03:10.100
also execute once my logic and catch error is done.

46
00:03:10.410 --> 00:03:11.280
I don't want that.

47
00:03:11.490 --> 00:03:19.470
Instead, by adding catch error here, I can now define a function which will be called whenever an

48
00:03:19.470 --> 00:03:22.500
error is thrown, either here or here.

49
00:03:22.920 --> 00:03:27.990
And if an error is thrown here while setting the post request, the then block will be skipped and we

50
00:03:27.990 --> 00:03:31.550
immediately reach this function here in catch error.

51
00:03:32.040 --> 00:03:37.590
So here in catch error, you do indeed define a function which receives the error data, the error object

52
00:03:37.590 --> 00:03:43.740
which was frozen, which describes the error, which here in this case, as I mentioned, is an object

53
00:03:43.740 --> 00:03:50.070
based on the built in format except in class, and it contains the error message, which is automatically

54
00:03:50.070 --> 00:03:50.670
printed here.

55
00:03:50.970 --> 00:03:52.620
And we can now interact with that error.

56
00:03:52.710 --> 00:03:56.910
For example, with print error here, I can also print that error message.

57
00:03:57.300 --> 00:04:00.720
And now here we could do all kinds of things with that error that we want to do.

58
00:04:00.900 --> 00:04:07.050
The core thing is that now our app will not crash anymore because with this we're already handling direr.

59
00:04:07.140 --> 00:04:09.840
So we're telling Dart, it's fine, I got you covered.

60
00:04:09.840 --> 00:04:11.720
I'm doing something on that error.

61
00:04:11.730 --> 00:04:16.529
And that's already an improvement because the app does not crash technically anymore.

62
00:04:17.910 --> 00:04:23.730
Again, as I mentioned, the code in here in the then block will be skipped if the error is thrown instead

63
00:04:23.730 --> 00:04:26.670
of our postma from there, which is the case for this error.

64
00:04:26.700 --> 00:04:30.060
I added here, and therefore we make it straight to catch error.

65
00:04:30.660 --> 00:04:33.420
Now, of course, here we could do all kinds of error handling.

66
00:04:33.420 --> 00:04:39.360
For example, also send this to our custom analytic server to store this error message there and get

67
00:04:39.360 --> 00:04:45.810
notified about that error in one of our apps or just log it here, which isn't too useful because the

68
00:04:45.810 --> 00:04:46.820
user will not see that.

69
00:04:47.280 --> 00:04:54.180
So what we might want to do here is even not use catch error here at all or simply use the full keyword,

70
00:04:54.180 --> 00:04:58.320
which is built into DART to throw that error we're getting here again.

71
00:04:58.410 --> 00:05:04.530
So Frode takes an error object and we're getting an error object here and it will now create a new error.

72
00:05:04.950 --> 00:05:06.420
So we're handling the error here.

73
00:05:06.420 --> 00:05:07.680
And now I'm creating a new one.

74
00:05:07.680 --> 00:05:12.600
I'm only doing this because I have catch error here and I want to be able to add a never to catch error

75
00:05:12.780 --> 00:05:15.150
clause in another place.

76
00:05:15.330 --> 00:05:17.940
And that I replace is the added product screen.

77
00:05:18.480 --> 00:05:22.440
That's, of course, the screen where we sent that request right here.

78
00:05:22.440 --> 00:05:24.570
We call ad product dear.

79
00:05:24.600 --> 00:05:26.160
We handle the success case.

80
00:05:26.160 --> 00:05:30.830
And dare we now have the problem that we have no success case, but that we have an error.

81
00:05:31.590 --> 00:05:35.610
So what we can do here is we can add catch error here as well.

82
00:05:35.700 --> 00:05:38.870
And now it is will be reached because I'm throwing my error here again.

83
00:05:39.210 --> 00:05:44.160
Alternatively, if we would leave out catch error here altogether, we would also reach catch error

84
00:05:44.160 --> 00:05:44.460
here.

85
00:05:44.760 --> 00:05:50.310
So catch error is reached if there is an error, but only the first catch error in line will execute

86
00:05:50.310 --> 00:05:52.170
then and that will then handle the error.

87
00:05:52.830 --> 00:05:58.770
So here we now also get that error object and here we can also do with what we want.

88
00:05:59.170 --> 00:06:03.940
Here, of course, the great thing is we're now in the widget, so here we can now do something which

89
00:06:03.940 --> 00:06:06.760
the user sees to inform the user about the error.

90
00:06:07.330 --> 00:06:15.280
So here we could send or show a dialogue with show dialog and show dialogue takes a context.

91
00:06:15.550 --> 00:06:22.480
And then we can use the context property, which is available everywhere in your state object when your

92
00:06:22.480 --> 00:06:23.140
state class.

93
00:06:23.140 --> 00:06:24.640
And we're in the state clause here, of course.

94
00:06:25.400 --> 00:06:30.970
And besides, the contextual dialogue also takes a builder which is used to build this dialogue.

95
00:06:31.360 --> 00:06:34.930
It takes a function which gets its own context generated by flutter.

96
00:06:35.260 --> 00:06:41.890
And then here we typically return an alert dialog which allows us to configure such dialog box, which

97
00:06:41.890 --> 00:06:45.440
is presented to the user in that dialog box.

98
00:06:45.440 --> 00:06:46.470
Here, I'll set a title.

99
00:06:46.970 --> 00:06:49.000
An error occurred.

100
00:06:49.000 --> 00:06:53.890
Sounds like a fitting title, which should be a text widget, though, not just plain text.

101
00:06:56.040 --> 00:07:00.210
And besides the title, we also want to have a content here and there, I'll have another text widget

102
00:07:00.210 --> 00:07:02.520
where you say something.

103
00:07:03.940 --> 00:07:09.640
Went wrong, though, if we wanted to, instead of having our generic text here, we could also simply

104
00:07:09.640 --> 00:07:10.800
use the error here.

105
00:07:11.170 --> 00:07:19.000
Error is an object which will have a message inside of it, and it's configured all exception.

106
00:07:19.000 --> 00:07:22.630
Classes in DART are configured to have a huge string method.

107
00:07:22.960 --> 00:07:26.340
That's actually a method which every object in DARD has.

108
00:07:26.350 --> 00:07:33.400
So every custom object has to string as well, because Dart basically gives you this object base class

109
00:07:33.430 --> 00:07:37.150
on which every class in DART invisibly depends.

110
00:07:37.300 --> 00:07:44.830
So to string is available on every value in dart, but to string on error objects is specifically configured

111
00:07:45.040 --> 00:07:47.440
to simply print a readable error message.

112
00:07:47.500 --> 00:07:53.410
And that's why here in our error log, for example, you see this nice message that's coming from two

113
00:07:53.410 --> 00:07:58.690
string being called on the error, and it then gives us the error message, which in this case Firebase

114
00:07:58.690 --> 00:07:59.140
gave us.

115
00:07:59.800 --> 00:08:04.840
Now we could print this, but often these error messages are really technical or you don't even want

116
00:08:04.840 --> 00:08:08.690
to show them to your users because they might contain confidential information.

117
00:08:09.010 --> 00:08:12.670
So here I'll go with something went wrong for the moment.

118
00:08:12.910 --> 00:08:18.420
Later in the authentication section, we'll see more fine grained error handling in action.

119
00:08:19.000 --> 00:08:21.240
With that, I'm building that dialogue now.

120
00:08:21.250 --> 00:08:23.500
I also want to add an action to close it.

121
00:08:23.500 --> 00:08:29.980
For that, I add a flat button here where the child's a text, which is where I say OK, and upon pressing

122
00:08:30.220 --> 00:08:38.380
I just want to close the dialogue and we can close a dialogue simply by calling Navigator of Context

123
00:08:38.650 --> 00:08:39.850
Pop, as you learned.

124
00:08:40.179 --> 00:08:46.090
So we close overlays of any kind and dialogues are such overlays with pop.

125
00:08:46.270 --> 00:08:51.130
And just like removing the current screen of the stack, this removes the current overlay which is on

126
00:08:51.130 --> 00:08:52.990
that same stack, so to say.

127
00:08:53.850 --> 00:08:56.550
And here we can actually use the context we're getting here.

128
00:08:57.660 --> 00:09:01.550
So if that I'm closing that I was showing my dialogue when I get an error.

129
00:09:01.890 --> 00:09:06.410
The missing thing, though, is that I actually do want to remove the loading spinner and maybe also

130
00:09:06.420 --> 00:09:13.200
close to page if we are done, no matter if we got an error or not, because even with an error, we're

131
00:09:13.200 --> 00:09:13.920
done loading.

132
00:09:13.920 --> 00:09:16.010
And I want to give control back to the user.

133
00:09:16.020 --> 00:09:21.680
I just want to let the user know about that error now that let the user know part is finished here.

134
00:09:22.230 --> 00:09:24.630
We now also want to ensure that we reach then.

135
00:09:24.990 --> 00:09:30.600
And the good thing is that's what I mentioned earlier already catch error catches the error, but then

136
00:09:30.600 --> 00:09:34.610
you see catch error actually returns a new future.

137
00:09:35.370 --> 00:09:42.900
So then after a catch error, we'll also execute because we're calling this on a future which is automatically

138
00:09:42.900 --> 00:09:44.130
created by catch error.

139
00:09:44.310 --> 00:09:47.010
And therefore here we're actually fine here.

140
00:09:47.010 --> 00:09:53.700
We actually will trigger this code in there automatically because since then comes after catch error.

141
00:09:53.820 --> 00:09:56.860
It will be triggered once that error is handled.

142
00:09:57.030 --> 00:10:00.240
I just want to wait until the user made his choice.

143
00:10:00.540 --> 00:10:06.540
And right now we would immediately pop and actually change that state here.

144
00:10:06.690 --> 00:10:09.630
Instead, I want to wait until the user answered the dialog.

145
00:10:09.750 --> 00:10:13.770
And the good thing is that the dialog also returns a future out of the box.

146
00:10:13.920 --> 00:10:15.180
That's how Flattr configure.

147
00:10:16.110 --> 00:10:21.810
So here we can actually return the result of show dialog, which is just that future and that future

148
00:10:21.810 --> 00:10:25.860
will be resolved with the value we chose here for popping the dialog.

149
00:10:25.860 --> 00:10:26.140
Right.

150
00:10:26.160 --> 00:10:28.170
That's also something we did earlier in the course.

151
00:10:28.560 --> 00:10:33.150
So only as soon as user click the button and this is Pop, this future will be resolved.

152
00:10:33.450 --> 00:10:38.700
Since I returned a future here in this function that will be the future return by catch error and therefore

153
00:10:38.700 --> 00:10:44.880
it is then block will only execute once this dialogue was closed to once this button was pressed and

154
00:10:44.880 --> 00:10:46.420
we popped the dialog.

155
00:10:47.160 --> 00:10:53.310
So with that, we now have an error handling logic in place which should allow us to successfully handle

156
00:10:53.310 --> 00:10:53.730
that error.

157
00:10:54.060 --> 00:10:57.360
So now try this again with some dummy data here, maybe.

158
00:10:58.550 --> 00:11:00.260
This is some test.

159
00:11:01.820 --> 00:11:03.110
And I add my immature.

160
00:11:04.180 --> 00:11:05.540
Now you see that spinner.

161
00:11:05.590 --> 00:11:12.010
Now we get that overlay, that dialogue, but if I press OK, we actually close that page still and

162
00:11:12.010 --> 00:11:17.800
here we only see that shorter output instead of that crashing error message because our app now didn't

163
00:11:17.800 --> 00:11:18.300
crash.

164
00:11:18.310 --> 00:11:23.590
And that output here is only printed because I'm printing the error here and that princi error message,

165
00:11:23.590 --> 00:11:24.830
which happens to be that.

166
00:11:25.660 --> 00:11:29.170
So this is how that works and how we can handle errors in DART.

167
00:11:29.830 --> 00:11:35.070
A very useful tool, of course, because that helps us ensure that we provide a pleasant user experience.

168
00:11:35.560 --> 00:11:42.490
And with that back end product, start Oread Dot Jason here, because of course, here I want to make

169
00:11:42.490 --> 00:11:47.740
sure that we have a successful request again now in all section.

170
00:11:47.740 --> 00:11:53.860
By the way, I will also show you a different way or a way of throwing your own custom exceptions in

171
00:11:53.860 --> 00:11:59.470
case you don't have a technical error, in case Firebase doesn't report back and error with error status

172
00:11:59.470 --> 00:12:03.460
code and you are still not happy with the result in your section.

173
00:12:03.460 --> 00:12:04.760
I'll have a good example for that.

174
00:12:04.900 --> 00:12:07.330
So there are all the come back to this for now.

175
00:12:07.330 --> 00:12:09.190
We have all the error handling in place that we need.

