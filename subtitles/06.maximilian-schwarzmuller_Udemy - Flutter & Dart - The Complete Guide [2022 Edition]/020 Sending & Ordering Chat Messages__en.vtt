WEBVTT
1
00:00:02.090 --> 00:00:06.620
Of course, we need to be able to send new messages and therefore I'll add a new widget in the chat

2
00:00:06.620 --> 00:00:08.760
folder, a new message to start.

3
00:00:09.350 --> 00:00:16.790
Now, this can also be a state less widget, but it should be a stateful widget because I actually want

4
00:00:16.790 --> 00:00:25.170
to be able to validate the user input and disable the send button if nothing was entered.

5
00:00:25.910 --> 00:00:33.740
So here all named is new message and then, of course, import material, Dodge Dart from the flutter

6
00:00:33.740 --> 00:00:34.330
package.

7
00:00:34.970 --> 00:00:37.010
And what should we return here?

8
00:00:37.490 --> 00:00:45.290
Well, we can return a container actually should work fine with a little bit of margin, which I only

9
00:00:45.290 --> 00:00:48.890
want to have on the top, though.

10
00:00:49.340 --> 00:00:55.460
So we'll add some top margin here on this container so that there is some spacing between our TextField

11
00:00:55.460 --> 00:00:56.750
and the master list.

12
00:00:57.680 --> 00:01:05.990
And I'll also add some padding with Etch INSETs, all of eight as well, so that we also have some space

13
00:01:05.990 --> 00:01:08.900
inside of this text input box widget.

14
00:01:09.890 --> 00:01:14.210
And then the child here is a role because I actually want to have two items next to each other, the

15
00:01:14.210 --> 00:01:18.050
actual text input field and the button to send the message.

16
00:01:19.180 --> 00:01:26.320
So here we need two children and the first child is a TextField now here a regular TextField, because

17
00:01:26.320 --> 00:01:32.050
I'm not wrapping this in a forum, I'll just validated on the go, so to say, without a big forum,

18
00:01:32.050 --> 00:01:34.960
because we don't need this here for this very basic input field.

19
00:01:36.860 --> 00:01:41.120
Now, you would get an error like this, you actually need to wrap this into expand that as well.

20
00:01:41.210 --> 00:01:47.180
Otherwise, a TextField in a row will cause an error because it tries to take up too much space with

21
00:01:47.180 --> 00:01:48.260
expanded around it.

22
00:01:48.290 --> 00:01:54.830
This will work, however, now on the TextField, all at a declaration input declaration where I set

23
00:01:54.830 --> 00:01:55.940
a label of.

24
00:01:59.400 --> 00:02:00.210
Send.

25
00:02:01.780 --> 00:02:02.500
Message.

26
00:02:04.150 --> 00:02:10.479
To make it clear what this TextField does, in case it wasn't clear and I want to listen on every keystroke

27
00:02:10.479 --> 00:02:15.580
with the on changed event here, with the unchanged function where we get the user input and where we

28
00:02:15.580 --> 00:02:22.030
then can do something, for example, validated and unlocked a button to send it, which is the item

29
00:02:22.030 --> 00:02:25.710
I'll add next to the expanded widget here, icon button.

30
00:02:26.500 --> 00:02:28.140
And this would be to send Icon.

31
00:02:28.150 --> 00:02:32.320
So here I'll add a color or theme of context.

32
00:02:32.560 --> 00:02:33.640
Primary color.

33
00:02:34.000 --> 00:02:35.140
Primary color.

34
00:02:36.060 --> 00:02:42.090
And I'll add, Aykan, which should be the send I can hear.

35
00:02:44.080 --> 00:02:49.240
Now, of course, this button also needs a unpressed handler so that something happens or can happen

36
00:02:49.240 --> 00:02:50.020
when we click it.

37
00:02:52.180 --> 00:02:57.550
The button should also only be enabled if a message was entered there for a new message state, we can

38
00:02:57.790 --> 00:03:04.630
manage that state, we can have a variable entered message, which initially is an empty string.

39
00:03:05.800 --> 00:03:13.490
And here in unchanged, we call set state and set entered message equal to the value we got here.

40
00:03:13.600 --> 00:03:15.400
Now this will run on every keystroke.

41
00:03:15.400 --> 00:03:21.790
So we update the stored entered message with every keystroke and now we can use entered message to lock

42
00:03:21.790 --> 00:03:26.260
or unlock the icon button by only conditionally adding dysfunction.

43
00:03:26.890 --> 00:03:35.770
So on the icon button on Prestia, we can check if entered message trimmed is empty.

44
00:03:36.190 --> 00:03:42.700
If it is empty, we know we have no valid message even after removing all X's whitespace with trim.

45
00:03:43.060 --> 00:03:48.880
And if that's the case, all set on pressed to null, which means it has no function attached and this

46
00:03:48.880 --> 00:03:50.640
will automatically disable the button.

47
00:03:50.650 --> 00:03:51.820
That's how Flutter works.

48
00:03:52.570 --> 00:03:58.800
If the message is not empty, I will set dysfunction here as a value for unpressed.

49
00:03:58.810 --> 00:04:03.520
So now there is a function to execute when the buttons pressed and therefore the button will be enabled.

50
00:04:05.410 --> 00:04:08.750
Now, right now, we're not sending any message, but this should work already.

51
00:04:08.770 --> 00:04:16.450
So let's go to the chat screen and there we have a column with our messages now below the messages here.

52
00:04:17.880 --> 00:04:25.220
We can therefore now simply add our new message widget and of course, you need to import a new message,

53
00:04:25.230 --> 00:04:27.870
start from the respective POV here.

54
00:04:30.390 --> 00:04:36.420
So for safety's, we have this message here at the bottom and it is annoying floating action button,

55
00:04:36.960 --> 00:04:38.790
we can entirely delete this.

56
00:04:38.970 --> 00:04:42.450
We don't need the floating action button anymore, so let's get rid of it.

57
00:04:44.230 --> 00:04:49.930
Like that, and now here, here's the message, but it's disabled, but if I enter a valid message,

58
00:04:49.930 --> 00:04:51.640
it's enabled and I can press it.

59
00:04:52.020 --> 00:04:53.920
But of course, nothing happens right now.

60
00:04:54.130 --> 00:04:55.300
So we need to change this.

61
00:04:55.300 --> 00:05:01.780
We need to make sure that when we press this, we may be also unfocussed, this field, so that the

62
00:05:01.780 --> 00:05:05.770
keyboard goes away automatically, but then also that this message is being sent.

63
00:05:07.460 --> 00:05:13.040
Now, let's start with unfocussed here, dysfunction should be triggered and I don't want to write everything

64
00:05:13.040 --> 00:05:17.150
here in this anonymous function, so instead I'd rather add a function up here.

65
00:05:18.680 --> 00:05:20.300
Send a message.

66
00:05:22.150 --> 00:05:29.440
And in there, I'll, first of all, use focus, scope of context and call unfocussed to close the keyboard,

67
00:05:29.650 --> 00:05:37.360
which might be open, and it's sent a message which they offer is connected here like this without parentheses,

68
00:05:37.360 --> 00:05:38.440
just pointing at it.

69
00:05:39.760 --> 00:05:44.660
And instead of send a message, we now want to use fire store to create this new message.

70
00:05:45.370 --> 00:05:52.000
So for this, we import package cloud forest or a cloud fire store, Dodge Dart.

71
00:05:52.460 --> 00:05:59.250
And then here we can use fires, for instance, and target that Chet collection.

72
00:05:59.680 --> 00:06:03.970
And here we now want to add a new document, which we do with the ADD method.

73
00:06:05.140 --> 00:06:11.590
Now, this takes a map which describes the new document, and we want to have a TextField here because

74
00:06:11.590 --> 00:06:13.930
every chat message should have a TextField.

75
00:06:14.260 --> 00:06:15.970
Our Dommy message has one two.

76
00:06:17.090 --> 00:06:21.260
So here, text and the values should, of course, be the entered message.

77
00:06:21.290 --> 00:06:23.300
So what's stored in this variable?

78
00:06:24.390 --> 00:06:27.460
And that should be all we need to do to send a new message.

79
00:06:28.230 --> 00:06:31.830
Now, this gives us a future and we could wait for it to complete.

80
00:06:31.830 --> 00:06:33.380
We could show a loading spinner.

81
00:06:33.390 --> 00:06:36.230
But I think in a chat application, we don't really need this.

82
00:06:36.510 --> 00:06:38.250
So that should really be all we need.

83
00:06:38.550 --> 00:06:44.220
And please note that we also don't need to add any authentication token or anything like that.

84
00:06:44.400 --> 00:06:47.750
This is all managed behind the scenes by Firebase here.

85
00:06:48.570 --> 00:06:51.780
So if we simply save this, we should be able to send a new message.

86
00:06:52.830 --> 00:07:01.020
If I enter one, does this work and I click send you see, here's my message now, of course, the formatting

87
00:07:01.020 --> 00:07:02.910
is not final, but this is my message.

88
00:07:03.780 --> 00:07:06.450
So that works now to improvements.

89
00:07:06.630 --> 00:07:10.980
I think it would be nice if the message input field would be cleared thereafter.

90
00:07:11.370 --> 00:07:17.910
And I also want to make sure that the messages are ordered in the opposite direction so that the most

91
00:07:17.910 --> 00:07:21.390
recent message is here at the bottom and not at the top.

92
00:07:22.470 --> 00:07:27.200
To make sure that this happens, to make sure that the orderings correct, we can go to message just

93
00:07:27.210 --> 00:07:29.400
a dart and they're on the list view.

94
00:07:29.400 --> 00:07:32.340
There is a little extra field you can set.

95
00:07:32.880 --> 00:07:34.590
You can set the reverse to true.

96
00:07:34.590 --> 00:07:36.690
And this will do just what the name implies.

97
00:07:36.900 --> 00:07:39.780
It will order the messages or the fields differently.

98
00:07:39.810 --> 00:07:41.810
It will scroll from the bottom to the top.

99
00:07:42.690 --> 00:07:45.900
Now, you see hello's still is ordered below.

100
00:07:45.900 --> 00:07:50.310
Does this work simply because of how the auto ID was created?

101
00:07:50.310 --> 00:07:52.350
When I manually edit this document.

102
00:07:53.250 --> 00:07:55.880
But if I delete this document with hello.

103
00:07:55.920 --> 00:07:58.830
So if I enter hello here.

104
00:07:59.770 --> 00:08:06.490
You see now this is at the bottom, so that's nice now for clearing the input here in new message.

105
00:08:06.700 --> 00:08:10.720
I want to clear the message or the input whenever we send a new message.

106
00:08:11.410 --> 00:08:19.090
And to do that, we can add a controller to the text field here and create a new controller in our state

107
00:08:19.090 --> 00:08:19.390
here.

108
00:08:21.560 --> 00:08:22.490
A final.

109
00:08:23.470 --> 00:08:24.550
Controller.

110
00:08:26.350 --> 00:08:30.160
New text editing controller like this.

111
00:08:32.980 --> 00:08:36.820
And use this controller here and send a message.

112
00:08:38.059 --> 00:08:45.860
To call control are clear and now bind this controller to the textfield simply by pointing at it here

113
00:08:45.890 --> 00:08:47.570
on the controller argument.

114
00:08:48.530 --> 00:08:52.820
If we now safeties and I type, does this clear.

115
00:08:53.760 --> 00:08:57.480
You see, it clears and this is also closed.

116
00:08:58.630 --> 00:09:04.930
Now, one thing you also see, however, is the ordering here still is not working entirely as it should.

117
00:09:05.830 --> 00:09:12.670
And you see that also here in Firebase, by default, the oldest document is the topmost one and the

118
00:09:12.670 --> 00:09:14.340
most recent one is the bottommost one.

119
00:09:14.350 --> 00:09:16.840
And since we reverse this here, it's the opposite.

120
00:09:18.670 --> 00:09:26.110
Now, one way of ordering this correctly and making sure that we have a consistent order is that we

121
00:09:26.110 --> 00:09:33.100
all the store timestamp along with the text when a document is being created and we didn't order by

122
00:09:33.100 --> 00:09:33.960
that time stamp.

123
00:09:34.570 --> 00:09:40.480
So here on new message, we can then go to the place where we add a new document.

124
00:09:40.750 --> 00:09:44.650
And besides text, we can also add a created attfield.

125
00:09:44.890 --> 00:09:51.670
The name is up to you, doesn't have to be created that and you can then use timestamped up now to create

126
00:09:51.670 --> 00:09:52.560
a new timestamp.

127
00:09:52.570 --> 00:09:57.820
Now time stamp is a class that is available made available by the cloud firestorm package.

128
00:09:59.660 --> 00:10:04.040
Now, with this, we create the time stamp, which will be part of the document that's being stored

129
00:10:04.040 --> 00:10:06.330
and it's stored in a created ATTFIELD.

130
00:10:06.740 --> 00:10:12.890
So now when we retrieve the messages here before we actually set up that listener or that stream, before

131
00:10:12.890 --> 00:10:17.250
we get access to that stream on the collection, we can actually call order by.

132
00:10:17.600 --> 00:10:23.330
And this allows us to order the documents we're about to fetch by a certain field and we can order by

133
00:10:23.340 --> 00:10:26.360
created at so by that new field I just added.

134
00:10:26.930 --> 00:10:29.720
Now, of course, my existing methods just don't have that field.

135
00:10:29.990 --> 00:10:32.450
So I will quickly delete all those messages.

136
00:10:32.840 --> 00:10:36.560
If you have a lot of messages, you can also delete the entire chat collection.

137
00:10:36.560 --> 00:10:41.240
Instead, it will be recreated automatically as soon as you start adding messages again.

138
00:10:41.840 --> 00:10:47.440
But once it's empty, all safeties go back and send a new message.

139
00:10:47.450 --> 00:10:47.930
Hello?

140
00:10:49.430 --> 00:10:50.540
Does this work?

141
00:10:53.900 --> 00:10:59.150
And you see, it's still ordered correctly, but simply because we have to specify how we want to order

142
00:10:59.150 --> 00:11:06.110
this and by default, it's ordered an ascending way, I want to order in a descending way, though,

143
00:11:06.110 --> 00:11:08.290
so I'll set descending to true here.

144
00:11:08.840 --> 00:11:11.540
That's the second argument you can pass to order by.

145
00:11:12.380 --> 00:11:16.880
And if you set descending to Drew, you see now that this work is the second message here.

146
00:11:18.560 --> 00:11:21.800
So this message, which I submitted a little bit later than the first one.

147
00:11:23.120 --> 00:11:29.440
And if I add another new message and no new message, you will see that now this is the bottommost message.

148
00:11:29.660 --> 00:11:34.590
And even if I restart the disappear here, if I completely reloaded, you see this order is kept.

149
00:11:34.880 --> 00:11:40.460
So now we finally have the correct order here, which is, of course, super important and which is

150
00:11:40.460 --> 00:11:42.200
what we ultimately want here.

151
00:11:43.010 --> 00:11:46.870
With that out of the way, let's work on those chat messages.

152
00:11:46.880 --> 00:11:48.440
They look a bit ugly like this.

153
00:11:48.740 --> 00:11:53.570
And of course, we also want to make sure that we can quickly tell whoever this message is by us or

154
00:11:53.570 --> 00:11:54.650
by another user.

