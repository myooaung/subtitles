WEBVTT
1
00:00:02.330 --> 00:00:07.010
Now, the chat screen, of course, needs a couple of elements, it, of course, needs a list of existing

2
00:00:07.010 --> 00:00:12.530
messages, which is scrollable, but we also need the input field, which allows us to send a new message.

3
00:00:13.280 --> 00:00:20.120
And for that, here under widgets, I'll create a new subfolder chat where I'll add messages.

4
00:00:21.700 --> 00:00:22.690
The dart foul.

5
00:00:24.220 --> 00:00:32.229
And that should be a state less widget, which will name messages where we can import material that

6
00:00:32.229 --> 00:00:36.950
dart and here to goal is to output all those, you guessed it, messages.

7
00:00:37.580 --> 00:00:40.590
Now we can use CloudFlare, a store for that.

8
00:00:40.960 --> 00:00:46.510
So package cloud, forest or cloud, forest or dart, and then the good old stream builder, which we

9
00:00:46.510 --> 00:00:53.980
saw in action before, to connect it to our fires, for instance, and then here to a collection, which

10
00:00:53.980 --> 00:00:55.500
should be the chat's collection.

11
00:00:56.050 --> 00:01:03.700
Now, previously I had some documents here in Chat's for different chats, but actually will only have

12
00:01:03.700 --> 00:01:05.860
one chat in this entire application.

13
00:01:06.310 --> 00:01:13.690
So therefore it probably makes more sense to name this collection, just chat and of course there for

14
00:01:13.690 --> 00:01:18.940
all to make sure that in the rules it's just checked and not chat's.

15
00:01:20.220 --> 00:01:24.900
So now I just want to have a chat collection and in the chat collection, I want to have my messages

16
00:01:25.380 --> 00:01:31.230
so we can directly listen on chat, because that will be the collection and the messages will be the

17
00:01:31.230 --> 00:01:32.160
documents in there.

18
00:01:32.850 --> 00:01:35.280
And with snapshots, we therefore set up the stream.

19
00:01:35.490 --> 00:01:39.780
Now we need the boulder where we get the context and the chat snapshot.

20
00:01:41.880 --> 00:01:50.430
And here, justice, before we can check for the loading state so we can check if Chet Snapshot Connection

21
00:01:50.430 --> 00:01:58.080
State is in the waiting connection state, in which case we could return a center widget where we basically

22
00:01:58.740 --> 00:02:04.350
display a circular progress indicator and if we make it past the safe check, we're not loading.

23
00:02:04.590 --> 00:02:06.850
So then I want to return my list.

24
00:02:06.900 --> 00:02:07.140
You.

25
00:02:08.460 --> 00:02:13.140
So here I display list view builder.

26
00:02:15.360 --> 00:02:23.400
And for the item builder, we get the context and the index and then simply return, let's say again

27
00:02:23.400 --> 00:02:27.060
a text widget with the appropriate chat text at the moment.

28
00:02:27.900 --> 00:02:30.260
Now, for that, we need to know how many items we need.

29
00:02:30.270 --> 00:02:32.360
So we also need the item count here.

30
00:02:32.880 --> 00:02:35.580
And that should, of course, be checked snapshot.

31
00:02:36.820 --> 00:02:40.270
DOT data, dot documents, dot length.

32
00:02:41.220 --> 00:02:50.210
And then here we can output the appropriate text by accessing chat, snapshot, dot data, dot documents,

33
00:02:50.550 --> 00:02:55.410
and since I repeated this, let's actually grab it and put it into a separate variable here.

34
00:02:56.780 --> 00:02:57.890
Chad Dock's.

35
00:02:59.150 --> 00:03:08.090
Is my documents array here, so we use chat docs here and chat docs here for to give an index and now

36
00:03:08.090 --> 00:03:13.820
on every chat document, so on every message, in the end we should have a text, let's say, which

37
00:03:13.820 --> 00:03:14.650
should be displayed.

38
00:03:14.870 --> 00:03:16.910
So we want to output the text here.

39
00:03:18.190 --> 00:03:21.130
This could be how we render our list of messages.

40
00:03:22.410 --> 00:03:29.370
Now, back at the jet stream, Massachusetts should be rendered so here in the body, instead of having

41
00:03:29.370 --> 00:03:37.080
that stream builder, which we had before, we can get rid of that and instead render a container,

42
00:03:37.080 --> 00:03:41.940
let's say, where the child is actually a culham, where we then have children.

43
00:03:42.330 --> 00:03:48.060
And the first children I want to have is my messages, which had we just worked on.

44
00:03:48.630 --> 00:03:53.280
And for that to work, you need to make sure that you also import the message to start to file into

45
00:03:53.280 --> 00:03:54.780
the chat screenshots file.

46
00:03:56.800 --> 00:04:03.460
So with that, I'm rendering messages here and messages, of course, renders a list view in the end

47
00:04:03.700 --> 00:04:07.150
and a list view inside of a column will not work that well.

48
00:04:07.600 --> 00:04:13.680
You need to wrap this into an expanded widget, otherwise you'll get an error.

49
00:04:13.690 --> 00:04:18.550
But with expanded, you make sure that the list view only takes as much space as available on the current

50
00:04:18.550 --> 00:04:21.010
screen whilst still being scrollable.

51
00:04:23.150 --> 00:04:24.900
So that should display some messages.

52
00:04:25.040 --> 00:04:26.510
Let's reload the application.

53
00:04:28.020 --> 00:04:33.390
And we see nothing here, of course, that makes perfect sense because we have no messages yet.

54
00:04:34.890 --> 00:04:40.620
Let's maybe simulate a message by adding a new collection, and that is this Chet collection to which

55
00:04:40.620 --> 00:04:44.400
I want to listen and we add a new document with a new audio ID.

56
00:04:45.560 --> 00:04:49.050
And in there, a text field where I say hello.

57
00:04:49.100 --> 00:04:57.440
So this now could be a message sent by another user and savior, you see hello appear here on the screen

58
00:04:57.710 --> 00:05:00.310
because of our screen builder here in messages.

59
00:05:00.350 --> 00:05:02.630
So that is working exactly as it should.

60
00:05:03.170 --> 00:05:09.410
Next up, let's make sure we have a bar at the bottom that allows us to send a new message.

