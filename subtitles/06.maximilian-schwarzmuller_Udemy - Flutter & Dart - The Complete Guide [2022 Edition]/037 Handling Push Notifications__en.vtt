WEBVTT
1
00:00:02.070 --> 00:00:07.920
So we had a look at push notifications and were able to send these test messages to Android and iOS,

2
00:00:07.920 --> 00:00:12.030
which is of course right now, let's see what we can do with those messages.

3
00:00:12.330 --> 00:00:19.980
In the last lecture I added in its state here in the chat screen to request for notification permissions

4
00:00:20.370 --> 00:00:23.020
with help of that firebase messaging package.

5
00:00:23.460 --> 00:00:25.110
We need that on iOS.

6
00:00:25.110 --> 00:00:30.570
We don't need it on Android, but we need data loss in order to receive and work with messages.

7
00:00:30.600 --> 00:00:34.660
I also called Configure on that firebase messaging object.

8
00:00:35.400 --> 00:00:41.370
Now, of course, we're not limited to just getting messages, tapping on them and opening our app,

9
00:00:41.370 --> 00:00:43.920
even though that already is not too bad.

10
00:00:44.610 --> 00:00:51.780
But Configure here actually has a couple of arguments we can pass to it and those will be triggered

11
00:00:51.780 --> 00:00:52.920
upon different events.

12
00:00:52.920 --> 00:00:58.650
And you'll find more information in the firebase messaging flutter package documentation here.

13
00:00:58.650 --> 00:01:02.450
Under receiving messages, you learn when which method is triggered.

14
00:01:03.180 --> 00:01:09.390
You'll see that on message, which is another argument you can pass in is always triggered whenever

15
00:01:09.390 --> 00:01:12.860
you receive a message and the app is running in the foreground.

16
00:01:12.870 --> 00:01:18.000
So whenever the app is currently open, for example, if you have an app with different areas, you

17
00:01:18.000 --> 00:01:23.730
could use that to navigate the user from the profile part to the chat part or anything like that.

18
00:01:24.510 --> 00:01:30.060
Now, if the app is in the background or terminated on resume or on launch is fired.

19
00:01:30.480 --> 00:01:37.110
Now for Android, it is worth noting that this will only fire, if you did add does extra metadata to

20
00:01:37.110 --> 00:01:38.280
your outgoing message.

21
00:01:38.280 --> 00:01:40.020
And I will come back to that in a second.

22
00:01:41.370 --> 00:01:46.840
So let's configure that, let's add on message to handle messages, which we get whilst the app is running

23
00:01:46.840 --> 00:01:49.720
in the foreground and here will get our message.

24
00:01:49.740 --> 00:01:52.040
So let's just print message here.

25
00:01:52.950 --> 00:01:56.460
This message will be a map, by the way, full of different data.

26
00:01:58.320 --> 00:02:04.350
And it actually wants me to add a return statement here because it expects to get back a future.

27
00:02:05.220 --> 00:02:06.630
I can just return like this.

28
00:02:07.810 --> 00:02:14.580
I will also specify on launch, which should be triggered if the app was terminated and we got a message,

29
00:02:15.100 --> 00:02:18.220
so I'll also print my message here and return.

30
00:02:19.170 --> 00:02:20.820
And we also got.

31
00:02:21.710 --> 00:02:26.360
On resume, where we get our message, which we can print.

32
00:02:27.530 --> 00:02:28.880
And which we can return here.

33
00:02:29.270 --> 00:02:35.510
So these are these free handlers, these free functions you can define that will trigger upon different

34
00:02:35.510 --> 00:02:36.080
events.

35
00:02:36.780 --> 00:02:37.970
Now, let me save this.

36
00:02:39.100 --> 00:02:43.280
And kill the app and restart and rebuild it entirely for my iPhone here.

37
00:02:43.330 --> 00:02:45.770
So did I have the latest version on the iPhone?

38
00:02:45.790 --> 00:02:51.030
I want that so that I can also kill it's there and still see if that all works correctly.

39
00:02:51.790 --> 00:02:54.280
So let's wait for that rebuild process to finish.

40
00:02:55.780 --> 00:03:01.110
And now with Kiev running again on issues here on the right, let's test those different handlers.

41
00:03:01.150 --> 00:03:05.920
Now, the app is running in the foreground here, so I'll now send another message through this test

42
00:03:05.920 --> 00:03:08.710
console, duplicate this last notification.

43
00:03:09.670 --> 00:03:11.560
Review it and publish it.

44
00:03:12.620 --> 00:03:17.150
And you won't see anything here because the apples in the foreground, because of that, I also get

45
00:03:17.150 --> 00:03:18.350
no notification here.

46
00:03:20.020 --> 00:03:25.840
But you see information being printed here, you see that is in the end my message data, we get a sender

47
00:03:25.840 --> 00:03:28.420
ID and then here we got some information.

48
00:03:28.420 --> 00:03:30.040
We get the title, for example.

49
00:03:30.190 --> 00:03:31.960
We got the body here.

50
00:03:33.190 --> 00:03:39.230
Body does this work and we could have added more metadata, though, which data exactly you can add

51
00:03:39.230 --> 00:03:44.770
depends on the platform your targeting and you find more information on that and which fields you can

52
00:03:44.770 --> 00:03:48.040
set where in the firebase cloud messaging docs.

53
00:03:48.550 --> 00:03:55.390
But you see, we're getting information about our message here and therefore here in on message, which

54
00:03:55.390 --> 00:03:56.950
was the function being triggered.

55
00:03:57.160 --> 00:04:02.950
You can now do whatever you want to do up on this message, navigate somewhere else and your application,

56
00:04:02.950 --> 00:04:08.260
show some dialog to the user, do whatever you want to do with that incoming message.

57
00:04:09.540 --> 00:04:11.670
So next, I will switch to a different app.

58
00:04:12.480 --> 00:04:18.390
I'm switching to the browser here again, so the app is now not terminated, but it's running in the

59
00:04:18.390 --> 00:04:22.170
background and I will do this again, duplicate this.

60
00:04:23.900 --> 00:04:25.970
Review this and publish.

61
00:04:27.420 --> 00:04:34.200
And back here, we see the message coming in here at the top, so there's all the works and if I now

62
00:04:35.100 --> 00:04:37.140
tap on it, it opens my app.

63
00:04:37.140 --> 00:04:42.630
But now and that's the difference to before we again see that data being logged here, the same data

64
00:04:42.630 --> 00:04:43.230
as before.

65
00:04:43.230 --> 00:04:48.690
But this is now coming from on a resume from this function because that's getting triggered if your

66
00:04:48.690 --> 00:04:53.180
app is running in the background and the user then taps on an incoming notification.

67
00:04:53.430 --> 00:04:58.170
And again, you can now do whatever you want to do in there, navigate the user somewhere else and so

68
00:04:58.170 --> 00:04:58.440
on.

69
00:04:59.130 --> 00:05:06.180
Now, let's see on launch, which according to these docs here, will run whenever the app was terminated.

70
00:05:07.220 --> 00:05:07.730
So.

71
00:05:09.260 --> 00:05:14.390
Let me do that, so I killed the application off screen, now I'll duplicate this.

72
00:05:15.470 --> 00:05:20.570
Review this and publish it again, and we see the message coming in.

73
00:05:20.720 --> 00:05:24.140
And if I tap on it, I restart the app.

74
00:05:25.380 --> 00:05:30.690
And we don't see the law here, unfortunately, because by killing the FBI, well, lost the connection,

75
00:05:30.930 --> 00:05:35.810
but you would see it if we still had the connection and of course, this code executed on the device.

76
00:05:35.910 --> 00:05:40.740
So, again, you can do here whatever you want to do, show the user a message, do whatever you want

77
00:05:40.740 --> 00:05:41.010
to do.

78
00:05:41.550 --> 00:05:45.870
So that is I guess now let's test this on Android.

79
00:05:47.530 --> 00:05:53.510
And for this, I'll switch back to the pixel emulator here and now let's restart the app there.

80
00:05:53.800 --> 00:06:00.190
Now, one important note as mentioned in the firebase messaging docs, so in the docs for our flutter

81
00:06:00.190 --> 00:06:06.580
package we're using, you have to add this extra data to the notification in order to make sure that

82
00:06:06.580 --> 00:06:10.570
your code is on resume and on launch executes.

83
00:06:10.570 --> 00:06:17.200
And you get your message information, dear, if a user taps the notification with your app being terminated

84
00:06:17.200 --> 00:06:18.280
or in background.

85
00:06:18.460 --> 00:06:19.810
So that's something we'll have to do.

86
00:06:20.650 --> 00:06:23.740
Now, before we do that, let's see the foreground mode, though.

87
00:06:23.740 --> 00:06:29.080
Here is the app running now, Acleda, that so that we can see everything new that's coming in.

88
00:06:29.600 --> 00:06:37.570
And now, again, I will go back here and actually it's not enough to just duplicate the Android only

89
00:06:37.570 --> 00:06:41.800
notification because I only want to test it there and I'll publish this.

90
00:06:42.770 --> 00:06:45.750
And I don't see anything here because it's running in the foreground.

91
00:06:45.770 --> 00:06:47.480
That's why we don't get the message here.

92
00:06:48.360 --> 00:06:55.830
But in the log, you see notification data here now we still got that fatal, failed to find callback

93
00:06:55.830 --> 00:07:02.510
error, but we clearly did receive this notification object or this notification map here.

94
00:07:02.550 --> 00:07:09.090
So this on message code clearly executed and you could do whatever you want to do there.

95
00:07:09.100 --> 00:07:10.390
So this would work.

96
00:07:11.190 --> 00:07:18.030
So this most likely is not an error with your code, but some internal problem which still doesn't cause

97
00:07:18.030 --> 00:07:19.140
any problems here.

98
00:07:19.170 --> 00:07:19.980
It still works.

99
00:07:19.980 --> 00:07:22.370
As you can tell, this data here is visible.

100
00:07:22.500 --> 00:07:25.350
So the code and on message clearly executed.

101
00:07:26.370 --> 00:07:32.310
Now, if I would put this app into background mode, so it's still open and the task manager, but it's

102
00:07:32.310 --> 00:07:33.090
in the background.

103
00:07:33.510 --> 00:07:35.880
And I tried sending this again.

104
00:07:39.010 --> 00:07:40.090
If I published this.

105
00:07:42.490 --> 00:07:48.460
You will see that the message arrived here, but if I tap at the app opens, but we don't see any output

106
00:07:48.460 --> 00:07:52.740
here, so now our code in on resume that not execute.

107
00:07:53.020 --> 00:07:57.640
And that makes sense because we need to add this extra data to our outgoing message.

108
00:07:58.510 --> 00:08:03.720
So let's send another message by duplicating it again, but now, before reviewing and publishing,

109
00:08:04.120 --> 00:08:10.060
let's go to additional options and under a key here at Click Action.

110
00:08:12.900 --> 00:08:17.250
And as a value add flutter notification click written like this.

111
00:08:18.600 --> 00:08:25.710
And now review this before you publish, make sure you're running in the background, so now publish.

112
00:08:27.100 --> 00:08:31.180
Notifications there, click on it, app opens.

113
00:08:33.440 --> 00:08:40.909
And now, if a scroll up a bit this year is the notification information we got, the notification information

114
00:08:40.909 --> 00:08:43.039
we're printing here in on resume.

115
00:08:44.210 --> 00:08:47.140
Now, let's also see what happens if I killed his application.

116
00:08:49.170 --> 00:08:53.760
Of course, we won't see anything in the log here, but we should still get the notification and clicking

117
00:08:53.760 --> 00:08:55.680
it should at least open the app.

118
00:08:56.340 --> 00:09:01.410
And I can also tell you just this before, of course, on launch will execute in that case.

119
00:09:01.740 --> 00:09:05.820
So the notifications here, we click on it, the app restarts.

120
00:09:06.060 --> 00:09:11.700
Now, again, as I mentioned, we don't see anything in the log here because our app is disconnected,

121
00:09:11.850 --> 00:09:17.470
but the code and on launch would run and you could do whatever you want to do upon this notification.

122
00:09:18.540 --> 00:09:22.020
So that is push notifications in a nutshell.

123
00:09:22.030 --> 00:09:23.870
That is what you can do with them.

124
00:09:24.330 --> 00:09:28.380
This shows your options as a developer just shows you how to set them up.

125
00:09:28.620 --> 00:09:34.260
And of course, there are a lot of details which you can configure, a lot of things you can find tuned

126
00:09:34.260 --> 00:09:36.780
to your likings and to your requirements.

127
00:09:37.080 --> 00:09:42.690
And for that, check out the firebase messaging flutter package documentation here to learn more about

128
00:09:42.690 --> 00:09:50.010
it, but also make sure you die, for example, in the firebase cloud messaging documentation here to

129
00:09:50.010 --> 00:09:56.190
learn all about that, because dad also shares many useful details about what you can configure, which

130
00:09:56.190 --> 00:10:02.100
kind of messages you can send, which kind of data you can put into messages and much more.

