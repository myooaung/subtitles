WEBVTT
1
00:00:02.640 --> 00:00:03.840
So let's dive right in,

2
00:00:03.840 --> 00:00:12.510
what does responsive mean? What's a responsive app or a responsive layout? Responsiveness in 

3
00:00:12.510 --> 00:00:17.630
UI design and UI development is all about handling different sizes,

4
00:00:17.790 --> 00:00:25.590
for example for your app, you of course might most commonly have portrait mode users or devices so that

5
00:00:25.590 --> 00:00:30.150
users use your app on a phone, on a smartphone which is in portrait mode

6
00:00:30.240 --> 00:00:36.750
but obviously users can also rotate that device and view your app in landscape mode and maybe you want

7
00:00:36.750 --> 00:00:42.800
to adjust your app there a little bit to look better in landscape mode and be better usable there.

8
00:00:42.990 --> 00:00:49.450
And in addition, people might not just use your app on phones but also on on bigger phones or on tablets

9
00:00:49.460 --> 00:00:56.640
or on a desktop PC, wherever Android or iOS or whichever platform you're building for runs, you might

10
00:00:56.640 --> 00:01:01.980
want to support that and don't show the same layout and all different device sizes and therefore in

11
00:01:01.980 --> 00:01:07.770
this module, I'll introduce you to the general tools that enable you to build for these different device

12
00:01:07.770 --> 00:01:08.770
sizes.

13
00:01:09.210 --> 00:01:16.410
So that's responsive but what's adaptive? Adaptive is actually a term I came up with or you read it from

14
00:01:16.410 --> 00:01:22.830
time to time but it's not an official term but it typically, if you read it, is related to adapting your

15
00:01:22.830 --> 00:01:28.920
user interface to different operating systems your app runs on and that of course means you want to

16
00:01:28.920 --> 00:01:35.460
have a certain look on Android and you want to have a certain probably different look and feel on iOS.

17
00:01:35.520 --> 00:01:41.080
Still of course, we want to use one and the same project and one and the same codebase and therefore as

18
00:01:41.090 --> 00:01:47.670
you will learn in this module, Flutter also gives you tools to adjust the look of your app or the behavior

19
00:01:47.670 --> 00:01:53.100
of your app depending on the platform. For Android, you of course typically want that material design

20
00:01:53.110 --> 00:01:58.270
look and the material design styles which you have in Flutter apps out of the box by the way,

21
00:01:58.500 --> 00:02:05.370
so Android is the default operating system Flutter targets, probably because Flutter is developed by

22
00:02:05.370 --> 00:02:06.630
a Google team.

23
00:02:06.630 --> 00:02:11.430
You of course also want to have the typical Android animations when you're switching between different

24
00:02:11.430 --> 00:02:13.080
screens for example,

25
00:02:13.080 --> 00:02:18.420
now right now, we're not really switching between screens and we'll do that in a later course module

26
00:02:18.450 --> 00:02:24.360
but nonetheless, that will also be a part of adapting your design and you might also want to use certain

27
00:02:24.360 --> 00:02:29.800
Android specific fonts if you're not bringing your own fonts, as we are actually doing it.

28
00:02:29.970 --> 00:02:37.230
And on iOS, unsurprisingly you want to have that iOS or Cupertino look in your app. Cupertino because

29
00:02:37.290 --> 00:02:44.640
Apple sits in Cupertino and therefore this iOS look, the iOS design language is often also referred to

30
00:02:44.640 --> 00:02:48.820
as Cupertino design, Cupertino styling.

31
00:02:49.080 --> 00:02:54.030
You will obviously also want to have typical iOS animations when you're switching between pages and

32
00:02:54.030 --> 00:03:00.840
by the way, it's not just about animations, it's also tiny details, for example on iOS apps, you can swipe

33
00:03:00.900 --> 00:03:05.540
with your finger to go back and forth between different pages in your app. On Android,

34
00:03:05.550 --> 00:03:12.540
that's typically not supported, you could bring either feeling, either user experience to the other platform,

35
00:03:12.780 --> 00:03:18.360
you could add swiping to Android and you can get rid of it on iOS but typically you want to preserve

36
00:03:18.390 --> 00:03:20.180
that default behavior

37
00:03:20.180 --> 00:03:26.180
users of the platform are used to to make your app feel familiar to them.

38
00:03:26.240 --> 00:03:31.980
And last but not least, of course you also might want to use specific fonts, the iOS fonts on the different

39
00:03:31.980 --> 00:03:35.340
platforms and that would also be something we can refer to as adaptive.

40
00:03:36.270 --> 00:03:39.470
So that is what responsive and adaptive means

41
00:03:39.630 --> 00:03:46.020
and of course, our overall goal in Flutter is that we still only use one codebase, one project.

42
00:03:46.020 --> 00:03:52.260
We don't want to start building totally different apps just for the different platforms because then,

43
00:03:52.320 --> 00:03:58.290
we would be almost at the same point we are if we just use the native programming languages for the

44
00:03:58.290 --> 00:03:59.520
platforms.

45
00:03:59.520 --> 00:04:03.870
Obviously, you would still have the advantage of using only one programming language but if you have

46
00:04:03.870 --> 00:04:09.780
to manage different projects, of course it means that whenever you add a certain new feature, even if

47
00:04:09.780 --> 00:04:16.410
it doesn't directly impact the user interface, let's say you change the ordering logic for the transactions

48
00:04:16.410 --> 00:04:21.860
users can add, then you have to do that in two different codebases, in two different projects

49
00:04:21.959 --> 00:04:24.380
and that's typically something you would want to avoid.

50
00:04:24.390 --> 00:04:29.870
So we absolutely want to stick in that one codebase and therefore, we also will have one widget tree

51
00:04:29.910 --> 00:04:32.610
because Flutter is all about that widget tree

52
00:04:32.610 --> 00:04:39.330
and if you remember the previous sections, then you had one widget at the top and then all the other

53
00:04:39.330 --> 00:04:45.060
widgets are kind of nested inside of that widget by passing widgets into arguments of other widgets

54
00:04:45.180 --> 00:04:50.280
and we want to keep that idea, we want to keep that structure and indeed in a Flutter app, you can only

55
00:04:50.280 --> 00:04:51.930
have one root widget,

56
00:04:52.020 --> 00:04:59.870
you can't have two entry points in your app for example. Now with all these restrictions or all these

57
00:04:59.870 --> 00:05:09.290
goals, the only way for us to make our app responsive and/or adaptive is that we detect which platform

58
00:05:09.290 --> 00:05:15.950
we're running on or which device size we have available in our code, in our widget tree

59
00:05:15.950 --> 00:05:23.950
and then, we render certain sub-trees, certain individual widgets based on the platform or on the device

60
00:05:24.040 --> 00:05:24.950
size we have

61
00:05:24.950 --> 00:05:26.720
and therefore we have one widget tree

62
00:05:26.720 --> 00:05:33.290
but in certain points of that tree, we have an either/or decision where we render differently styled

63
00:05:33.290 --> 00:05:37.890
widgets or totally different widgets based on the size or on the platform

64
00:05:37.940 --> 00:05:43.250
and that is what I will now show you throughout this module at different examples, where we will go back

65
00:05:43.250 --> 00:05:50.830
to our application here and start working on it, so that we have a different look on iOS and also a

66
00:05:50.830 --> 00:05:53.450
different behavior based on the device size.

