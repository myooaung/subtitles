WEBVTT
1
00:00:02.050 --> 00:00:08.189
There is another alternative syntax which I want to show you that's related to how you listen to changes.

2
00:00:08.210 --> 00:00:10.540
Thus far, we always use provider of and

3
00:00:10.550 --> 00:00:15.980
to be honest, that's the most common way of doing it but there is another way which is totally equal which

4
00:00:15.980 --> 00:00:17.620
you could also use.

5
00:00:17.660 --> 00:00:25.040
You could also wrap the parts of your widget tree that are interested in an update into a new widget

6
00:00:26.690 --> 00:00:30.470
and that widget would be the consumer widget.

7
00:00:30.470 --> 00:00:35.930
Now for consumer to be available, you need to import your provider package because that is provided

8
00:00:36.080 --> 00:00:43.910
by the provider package and consumer then actually does not take just a child but actually a builder

9
00:00:43.910 --> 00:00:45.890
and you have to provide a builder.

10
00:00:46.040 --> 00:00:54.220
Now that builder takes a context, then something dynamic and then a widget. Now what's that?

11
00:00:54.440 --> 00:00:57.320
Now first of all, you have to know that consumer is a generic type

12
00:00:57.320 --> 00:01:02.270
and of course you should provide or mention which type of data you want to consume

13
00:01:02.270 --> 00:01:04.910
and then this is pretty equal to provider of.

14
00:01:04.910 --> 00:01:10.100
So this establishes the connection to your provided data and it looks for the nearest provider of that

15
00:01:10.130 --> 00:01:12.650
type up in the widget tree.

16
00:01:12.710 --> 00:01:20.060
This builder then receives a context, it receives an instance or the nearest instance it found of

17
00:01:20.060 --> 00:01:24.360
that data, so our product here

18
00:01:24.620 --> 00:01:28.760
and then it receives a child.

19
00:01:28.760 --> 00:01:33.800
Now let's worry about the child a second, let's first of all focus on what it should return

20
00:01:34.010 --> 00:01:37.220
and there, it should of course return what you returned before.

21
00:01:37.250 --> 00:01:44.180
So here, I'll cut all of that, get rid of this child here for the moment and simply return in the builder

22
00:01:44.180 --> 00:01:48.470
this widget tree which depends on our provided data.

23
00:01:49.130 --> 00:01:53.780
So now we can comment out this provider of thing up there and we're setting up a listener here with

24
00:01:53.780 --> 00:01:54.950
consumer.

25
00:01:54.950 --> 00:02:01.120
If you do a full refresh now, you'll see I can still click these hearts and have the same behavior as

26
00:02:01.120 --> 00:02:02.770
before.

27
00:02:02.770 --> 00:02:05.440
Now why would we use this approach then?

28
00:02:05.440 --> 00:02:07.750
Well generally, it's exactly the same,

29
00:02:07.750 --> 00:02:12.320
so it's up to you but it can have a couple of advantages depending on how you use it.

30
00:02:12.490 --> 00:02:18.050
When you use provider of, then the whole build method will rerun whenever that data changes.

31
00:02:18.670 --> 00:02:24.700
Now with clever widget splitting, you can split your widgets such that this isn't a problem because you

32
00:02:24.700 --> 00:02:28.100
want to run the entire build method when something changes

33
00:02:28.480 --> 00:02:35.080
but you could always have a case where you only want to run a subpart of your widgets tree when some

34
00:02:35.080 --> 00:02:38.660
data changes and then you could only wrap the subpart of the widget tree

35
00:02:38.680 --> 00:02:43.030
that depends on your product data with that listener.

36
00:02:43.030 --> 00:02:44.490
That would be an option

37
00:02:44.610 --> 00:02:51.490
and even here for example, you could get your product here with listen: false, to get all that one time data

38
00:02:51.520 --> 00:02:56.440
which you don't expect to change, like the title or the imageUrl and you could then use consumer,

39
00:02:56.530 --> 00:03:03.880
not up here but down there around your favorite button to wrap only that with that consumer because

40
00:03:03.910 --> 00:03:09.070
that's the only place in this widget which really does change when our product changes.

41
00:03:09.910 --> 00:03:18.340
So just to demonstrate this, we could get our product here with listen: false and then we use consumer

42
00:03:20.210 --> 00:03:32.270
product here, cut this, here still return ClipRRect and only wrap our leading icon button here with

43
00:03:32.690 --> 00:03:34.320
this consumer.

44
00:03:34.380 --> 00:03:39.800
Now of course, make sure you manage your parentheses correctly, remove one at the end and wrap the icon

45
00:03:39.800 --> 00:03:41.370
button in one more

46
00:03:41.420 --> 00:03:47.850
and now what I achieved here is I have that general product which I'm extracting from my provided, from

47
00:03:47.850 --> 00:03:50.680
my provided product but I don't listen to updates there.

48
00:03:50.780 --> 00:03:53.950
I need that general product because I'm getting the ID from there,

49
00:03:53.950 --> 00:03:59.600
the imageUrl and the title but then I have this part of my widget tree down there which actually

50
00:03:59.660 --> 00:04:06.140
also listens to my nearest product but here, I am interested in changes and consumer always listens to

51
00:04:06.140 --> 00:04:13.910
changes here and I then rebuild the icon button whenever my product changes. So I shrink the area of

52
00:04:13.910 --> 00:04:18.790
the widget which reruns when my product changes and to prove that,

53
00:04:19.040 --> 00:04:21.820
let me throw a little print statement in here.

54
00:04:21.890 --> 00:04:30.290
Product rebuilds and we should see that this now doesn't run when my heart here is clicked. So it runs initially

55
00:04:30.290 --> 00:04:35.970
here and now if I clear that and I press the heart,

56
00:04:36.000 --> 00:04:42.240
you see it doesn't run and that would change if I don't set this here to false of course, if I, just to prove

57
00:04:42.240 --> 00:04:44.130
this, do this real quick,

58
00:04:44.190 --> 00:04:49.210
now if I press the heart, you of course see product rebuilds there as well.

59
00:04:49.320 --> 00:04:50.600
So that's a tiny improvement

60
00:04:50.610 --> 00:04:54.790
we can actually implement here because consumer allows us to,

61
00:04:54.840 --> 00:05:00.360
since it's a widget, throw it somewhere into our widget tree and then only rebuild the nested children

62
00:05:00.960 --> 00:05:06.780
since this here is not a widget but simply a method or a way of extracting data and storing it in a

63
00:05:06.780 --> 00:05:07.380
variable,

64
00:05:07.440 --> 00:05:09.570
it always triggers the whole build method.

65
00:05:09.570 --> 00:05:16.050
Again you could achieve something similar to having a consumer down there by splitting your widgets

66
00:05:16.050 --> 00:05:17.190
in a efficient way,

67
00:05:17.190 --> 00:05:22.260
for example we could have outsourced the icon button here into a separate widget, then used provider

68
00:05:22.290 --> 00:05:27.510
of in there with listen to true or not defined at all since true is the default and we would have a

69
00:05:27.510 --> 00:05:33.660
similar setup but this here is another way where you can easily control a part of your widget tree and

70
00:05:33.660 --> 00:05:38.220
make it a listener whereas the majority of the tree is not a listener.

71
00:05:38.220 --> 00:05:45.960
Now what's up with that child you're getting here as a third argument? If you have parts in your widget

72
00:05:45.960 --> 00:05:52.680
tree, which then does update, which you don't actually want to rebuild when it generally rebuilds this,

73
00:05:53.160 --> 00:06:01.270
then on the consumer as an argument, you can pass in a child and that could be some data, like a text

74
00:06:01.270 --> 00:06:06.840
widget which never changes, which doesn't depend on the data you're generally listening to.

75
00:06:07.240 --> 00:06:12.030
And this child you're defining here which can also be a more complex widget tree or a custom widget

76
00:06:12.030 --> 00:06:17.290
of course is then ending up here in this child argument which is passed into this builder function

77
00:06:17.830 --> 00:06:20.530
and you can then reference it in there.

78
00:06:20.530 --> 00:06:27.670
Now here, I don't need it because all my parts here in the end are dynamic but if you had something else

79
00:06:27.670 --> 00:06:30.690
here, like a label which the IconButton doesn't have

80
00:06:30.720 --> 00:06:35.920
but if it would have a label and that should be your text widget there which shouldn't rebuild just

81
00:06:35.920 --> 00:06:42.520
because product changed, then you could refer to your child argument here and this child argument up

82
00:06:42.520 --> 00:06:48.220
there would refer to the value you stored here and it wouldn't rebuild when your consumer generally

83
00:06:48.220 --> 00:06:55.540
does rebuild its builder widget here or its builder function. So it can be a tiny optimization if in

84
00:06:55.540 --> 00:07:01.070
this part which generally should update, you still have parts that shouldn't update.

85
00:07:01.350 --> 00:07:07.240
It's a bit more advanced, we don't need it here, hence I'll add an underscore. The core takeaway here really

86
00:07:07.240 --> 00:07:12.430
is that consumers can be used to only rebuild parts of the widget tree instead of the entire widget

87
00:07:12.430 --> 00:07:18.000
tree. Again, something you could have also achieved with clever widget splitting and only provider of

88
00:07:18.070 --> 00:07:22.780
but it's up to you what you use and there generally is no better or worse option.

