WEBVTT
1
00:00:02.340 --> 00:00:09.060
So we added one provider, our products provider, which we use in the products grid, in the end we

2
00:00:09.060 --> 00:00:14.070
use it there because we're setting up a subscription and that subscription where that listener here

3
00:00:14.310 --> 00:00:21.030
with provider of works, because we're providing our products object, which manages our list of products

4
00:00:21.030 --> 00:00:22.950
here with changed notifier provider.

5
00:00:23.850 --> 00:00:28.200
Now I want to make sure that we can mark products as favorites.

6
00:00:28.470 --> 00:00:35.310
Now, if we have a look at the product model, which is not yet usable by a provider because we're not

7
00:00:35.310 --> 00:00:40.950
implementing with change notifier, which which means we couldn't trigger our listeners from inside

8
00:00:40.950 --> 00:00:41.110
it.

9
00:00:42.030 --> 00:00:47.150
This model has the favorite bullet here and it's also not a final boolean.

10
00:00:47.160 --> 00:00:48.630
So we could change that.

11
00:00:50.110 --> 00:00:56.950
Now, I think it would be pretty neat if the products we had here in our provider's package, which

12
00:00:56.950 --> 00:01:05.019
do use this product model, could use the product model such that if we changed favorite status of a

13
00:01:05.019 --> 00:01:15.790
product, we automatically notify all places in the app that require a single product and are interested.

14
00:01:15.820 --> 00:01:22.300
You always have to specify that you are interested with the help of provider of so that these widgets

15
00:01:22.300 --> 00:01:28.060
that depend on a single product and are interested are rebuilt whenever that single product changes,

16
00:01:28.210 --> 00:01:32.950
which in our case here means whenever the is favorite status changes, because that's the only thing

17
00:01:32.980 --> 00:01:34.150
which can change.

18
00:01:35.140 --> 00:01:41.890
Now, therefore, I'll move product here over into providers, alternatively, we could now both rename

19
00:01:41.890 --> 00:01:47.440
two models if we want to choose or rename that folder to models, but I'll simply move the product out,

20
00:01:47.440 --> 00:01:55.630
fall over into providers and add with change notifier here as well, which is available also thanks

21
00:01:55.630 --> 00:02:01.840
to the foundation dard import so you can use either the foundation dard import or the material import.

22
00:02:02.590 --> 00:02:06.520
Now here in the products Dardanelle fall, I'm referring to that product.

23
00:02:06.520 --> 00:02:10.389
So to that single product DARD Fall and it's now in the same folder.

24
00:02:10.400 --> 00:02:15.390
So do you import pop should change to dot product darte with that.

25
00:02:15.400 --> 00:02:22.570
I'm still creating products here, but these products now actually can notify listeners when they changed.

26
00:02:23.650 --> 00:02:27.510
Now what would be a place where I'm interested in a changing product?

27
00:02:28.570 --> 00:02:33.280
Now, you might think that would be the product detail page, but that's actually not the case there.

28
00:02:33.400 --> 00:02:41.740
I load a single product based on the ID, which I got, and thereafter I don't really care whether that

29
00:02:41.740 --> 00:02:42.430
changes or not.

30
00:02:42.460 --> 00:02:48.840
I'm I'm not displaying the favorite status on this screen and I also can't change it from on this screen.

31
00:02:49.000 --> 00:02:54.400
Well, right now it is screen is pretty empty, to be honest, will add more, but will not add anything

32
00:02:54.400 --> 00:02:57.280
that would allow us to change to favorite status on the screen.

33
00:02:57.730 --> 00:03:04.690
So the product detail screen here is not really a place where I want to reactively listen to changes

34
00:03:04.690 --> 00:03:05.710
in a single product.

35
00:03:06.400 --> 00:03:09.450
The product item, dark file is a different file.

36
00:03:09.580 --> 00:03:14.410
They are the product item widget, which is that great tool we're creating there.

37
00:03:14.440 --> 00:03:22.660
I do have this button which represents the favorite status of a product here and I actually want to

38
00:03:22.750 --> 00:03:27.670
switch that I can based on whatever this product already is, a favorite or not.

39
00:03:27.970 --> 00:03:35.170
So therefore here, of course, I need product data and I need specific data about whether this product

40
00:03:35.350 --> 00:03:36.670
now is a favorite or not.

41
00:03:36.680 --> 00:03:40.540
So I'm interested in hearing about changes in that product.

42
00:03:41.630 --> 00:03:42.800
What does this mean for us?

43
00:03:43.070 --> 00:03:48.680
It means that here I want to set up a listener to a single product and that's not important to a single

44
00:03:48.680 --> 00:03:54.290
product, not to all products, but to my single product here in that product class.

45
00:03:54.320 --> 00:04:02.540
We also need a way of manipulating this boolean here in a way that also allows us to call notify listeners.

46
00:04:02.960 --> 00:04:04.770
And of course, what else is missing?

47
00:04:04.790 --> 00:04:05.570
We have a listener.

48
00:04:05.570 --> 00:04:06.350
We have a class.

49
00:04:06.710 --> 00:04:08.390
We need to set up a provider.

50
00:04:08.400 --> 00:04:10.790
What we're doing in mind out here for products.

51
00:04:10.940 --> 00:04:13.940
We also need to do that for all our single products.

52
00:04:14.900 --> 00:04:23.410
Now, let's start by setting up provider in the products grid widget and listening to all my products,

53
00:04:23.840 --> 00:04:30.110
and then for every product we have, we're creating a product item here in the end tile in our grid.

54
00:04:31.100 --> 00:04:39.350
So in the end, it's here where I need to provide my product object based on the product class now in

55
00:04:39.350 --> 00:04:40.060
the main file.

56
00:04:40.100 --> 00:04:45.170
We're doing that here right at the top so that the entire app can, in the end, listen to changes in

57
00:04:45.170 --> 00:04:47.490
products because we need products in different places.

58
00:04:48.050 --> 00:04:52.630
Now, my single product here is actually really only needed in every product item list.

59
00:04:53.840 --> 00:05:00.230
So therefore, here, where I get all my products, I want to set up a new provider here above my product

60
00:05:00.230 --> 00:05:04.720
item so that inside of the product item, we can then listen to changes in that product.

61
00:05:05.030 --> 00:05:09.730
And since this runs, this builder here runs for every product in our products list.

62
00:05:09.920 --> 00:05:15.920
That's perfect because then we can set up different providers for our different product objects, because

63
00:05:15.920 --> 00:05:22.220
for products we really only have one object for the entire app to find here in Mainard for a single

64
00:05:22.220 --> 00:05:22.640
product.

65
00:05:22.670 --> 00:05:25.640
So for the individual product items, that's a bit different.

66
00:05:25.790 --> 00:05:31.240
We have multiple products there, multiple product items, so we can set up a single provider.

67
00:05:31.250 --> 00:05:33.980
We need multiple providers, one for each product.

68
00:05:34.550 --> 00:05:41.820
Now, we're not setting up the provider here inside of the products class because dad won't really work.

69
00:05:42.410 --> 00:05:44.660
Instead, we have to do the Darwiche, which a tree.

70
00:05:44.660 --> 00:05:52.040
But that's no problem because here we have access to all our products, to the product items stored

71
00:05:52.040 --> 00:05:53.240
in the products class.

72
00:05:53.900 --> 00:06:00.150
And therefore here we can set up a new change notifier provider, just as we did in the main article.

73
00:06:00.380 --> 00:06:02.870
This is what I'm now returning in my item builder.

74
00:06:04.080 --> 00:06:10.410
This takes a child and the child still is the product item here in the end, so we can still keep that

75
00:06:10.410 --> 00:06:10.860
code.

76
00:06:11.820 --> 00:06:17.930
But now I also want to set up a builder where I build my product object.

77
00:06:18.120 --> 00:06:23.390
Now, the thing, of course, here is I already have my product objects right there, built here.

78
00:06:23.490 --> 00:06:27.090
Here I instantiate my product objects.

79
00:06:27.090 --> 00:06:32.610
I do this inside of the products class, so I don't want to re instantiate product objects now.

80
00:06:32.610 --> 00:06:35.310
I don't want to build a new product object.

81
00:06:37.300 --> 00:06:43.840
But that's no problem in our builder here, where I get a new context passed in automatically, where

82
00:06:43.840 --> 00:06:48.910
I simply have to return to value, which I want to provide, I can simply return.

83
00:06:49.810 --> 00:06:50.650
Products.

84
00:06:51.820 --> 00:06:52.300
I.

85
00:06:54.130 --> 00:07:02.410
This will return a single product item as it's stored in the products class, and it will do this multiple

86
00:07:02.410 --> 00:07:06.100
times because it's inside of the item builder for all the product to have.

87
00:07:08.830 --> 00:07:15.610
Now, since I'm providing a single product here, that also means we could, but we don't have to receive

88
00:07:15.610 --> 00:07:19.000
our product data as arguments here in product item.

89
00:07:20.280 --> 00:07:26.160
Instead here, I'm not passing anything because instead of product item, we could now get rid of all

90
00:07:26.160 --> 00:07:29.850
of that and it wouldn't have been a problem to receive this before.

91
00:07:29.850 --> 00:07:35.670
But now, since I'm interested in some dynamic value in a single product, it makes sense to use a provider

92
00:07:35.670 --> 00:07:35.950
here.

93
00:07:36.570 --> 00:07:37.770
So now in here.

94
00:07:39.840 --> 00:07:46.560
I can again use provider off, and for that, of course, you need to import the provider package here

95
00:07:46.560 --> 00:07:54.750
in the product item Deadfall, so provider of and now of product because I'm interested in a single

96
00:07:55.020 --> 00:07:55.770
product.

97
00:07:56.310 --> 00:08:03.630
So let's import that provider now from the providers folder there from the product Dardanelle, not

98
00:08:03.630 --> 00:08:05.190
products but product.

99
00:08:05.760 --> 00:08:10.860
And it will now look for the nearest product which is provided, which simply happens here in the product

100
00:08:10.860 --> 00:08:17.430
script where I'm providing a product for this product item and a new product, a different product is

101
00:08:17.430 --> 00:08:23.010
provided for every different product item which is rendered so for every gret tile because we're repeating

102
00:08:23.010 --> 00:08:24.200
this code for all the product.

103
00:08:24.210 --> 00:08:29.280
So there's reruns for all the products we have, and hence we provide a brand new product for every

104
00:08:29.280 --> 00:08:32.220
product item, which of course is exactly what we want.

105
00:08:32.220 --> 00:08:38.460
We want to provide the correct product item or the correct product element for every product, item,

106
00:08:38.460 --> 00:08:38.860
widget.

107
00:08:39.360 --> 00:08:44.039
Now, there is actually one little problem you should be aware of when working with Nesto providers

108
00:08:44.039 --> 00:08:49.650
as we're doing it here, when you're using it in a list or in the as we're doing it here, where Flutter

109
00:08:49.650 --> 00:08:54.900
removes items when they leave the screen and reads them when they re-enter the screen.

110
00:08:55.320 --> 00:09:02.790
In such situations, what actually happens is that the widget itself is reused by flutter and just the

111
00:09:02.790 --> 00:09:04.970
data that's attached to it changes.

112
00:09:05.340 --> 00:09:07.710
So Flattr recycles the same widget.

113
00:09:07.710 --> 00:09:13.050
It doesn't destroy it and recreate it, which would work fine with our nested provider, but it recycles

114
00:09:13.050 --> 00:09:18.840
it, which means that we are actually attaching a provider to a widget here, which content changes

115
00:09:18.840 --> 00:09:21.480
over time and our provider won't pick this up.

116
00:09:21.660 --> 00:09:26.820
Therefore, the more items you have in your list, as soon as you have items that are not visible all

117
00:09:26.820 --> 00:09:32.430
the time, you will run into strange errors and bucks but will fix this in the next lecture.

118
00:09:32.550 --> 00:09:33.960
This is a good first step.

119
00:09:33.960 --> 00:09:38.130
And is this an approach you can always use if you're not using a list or a grid?

120
00:09:38.940 --> 00:09:41.490
So any product item, I can now listen to that.

121
00:09:42.940 --> 00:09:48.370
Past in my context, of course, which is this important communication channel and in here.

122
00:09:49.190 --> 00:09:54.050
I get my product or whatever you want to name it, so I have my product variable here.

123
00:09:54.990 --> 00:10:01.800
Which won't change in this build run here, hence its final, and then I can use product ID here to

124
00:10:01.800 --> 00:10:09.300
forward that, I can use product image, you are all here and I can use product title down there.

125
00:10:10.570 --> 00:10:11.710
If we saved at.

126
00:10:15.940 --> 00:10:20.750
You see, this still renders asked before, but now we're actually using a different pattern.

127
00:10:20.860 --> 00:10:23.860
The question, of course, is why are we using that pattern?

128
00:10:24.820 --> 00:10:30.640
Because I now, of course, want to make sure that when we tap that favorite button, we switch to favorite

129
00:10:30.640 --> 00:10:33.880
status of a single product for that.

130
00:10:33.880 --> 00:10:37.330
And our product provider foul up there and the provider's folder.

131
00:10:37.840 --> 00:10:43.240
Let's add a new method which doesn't return anything, which I'll name toggle favorite.

132
00:10:44.590 --> 00:10:46.880
Status and you can name does whatever you want.

133
00:10:47.260 --> 00:10:52.780
The idea here simply is that we invert disvalue of his favorite self.

134
00:10:52.780 --> 00:10:53.800
It's currently true.

135
00:10:53.830 --> 00:10:55.210
I want to set it to false.

136
00:10:55.210 --> 00:10:57.340
If it's set to false, I want to set it to true.

137
00:10:57.940 --> 00:11:06.040
So here al-Said is favorite equal to not is favorite, and the exclamation mark here is simply inverts

138
00:11:06.040 --> 00:11:06.630
to value.

139
00:11:06.790 --> 00:11:11.460
So if it is true then this here will return false and therefore the new value will be false.

140
00:11:11.530 --> 00:11:15.310
If it was false, the disenrolled return true and the new value is true.

141
00:11:16.340 --> 00:11:23.320
Now again, to let all listeners know we need to call notify listeners so you could kind of say that's

142
00:11:23.320 --> 00:11:25.920
like set state in the provider package.

143
00:11:25.960 --> 00:11:30.670
You let listening, which it's know that something changed and they should rebuild.

144
00:11:30.760 --> 00:11:36.220
It's the equivalent to set state and stateful widgets, which we now don't really need here when we're

145
00:11:36.220 --> 00:11:38.290
managing something with the provider package.

146
00:11:39.900 --> 00:11:44.080
Though you don't have to manage everything with the provider package, but I'll come back to this later.

147
00:11:44.730 --> 00:11:51.240
So we're notifying our listeners that this model changed, that we changed something in his object.

148
00:11:51.240 --> 00:11:53.160
We changed the favorite status.

149
00:11:53.550 --> 00:11:57.960
We can now use that favorite status and a product item for one year.

150
00:11:58.560 --> 00:12:03.690
When we press this button, of course, I want to use my product.

151
00:12:04.910 --> 00:12:06.650
Which I'm getting here with my Lessner.

152
00:12:07.730 --> 00:12:14.060
And call toggle favorite status, because that's one thing that should always happen, and I want to

153
00:12:14.060 --> 00:12:20.210
reflect the current favorite status here with the icon so we can simply check product is favorite.

154
00:12:20.210 --> 00:12:26.480
And if it is true, then I want to show that favorite icon, which is that filled out hard and otherwise

155
00:12:26.480 --> 00:12:29.800
I'll show favorite border, which is that hard to wear.

156
00:12:29.990 --> 00:12:31.040
We got no filling.

157
00:12:33.150 --> 00:12:39.090
If we now save lives and maybe do a full refresher to make sure that this really gets used, you now

158
00:12:39.090 --> 00:12:40.830
see we have empty hearts everywhere.

159
00:12:41.190 --> 00:12:45.870
But if a step it it gets filled out and again, then all the toggle it off.

160
00:12:46.200 --> 00:12:49.440
And that's correctly reflected on my different items.

161
00:12:50.010 --> 00:12:56.310
And this happens and this works thanks to the provider pattern where we are informed about changes here

162
00:12:56.310 --> 00:12:59.100
in product when we tap a heart.

163
00:12:59.850 --> 00:13:04.980
By the way, that's a nice use case or a nice place to show what happens if I said listen.

164
00:13:06.080 --> 00:13:12.680
To falls here now for every product item that gets rendered, Margaret, we only fetched a product data,

165
00:13:12.680 --> 00:13:14.890
but then we don't set up an ongoing listener.

166
00:13:15.410 --> 00:13:20.390
That means that when is favourite's changes here, it will still change behind the scenes.

167
00:13:20.630 --> 00:13:27.830
But notify listeners will not reach this build method in this widget because we opted out of updates,

168
00:13:27.830 --> 00:13:28.800
were not listening.

169
00:13:29.060 --> 00:13:33.980
So this product here will not received as updated is favorite status.

170
00:13:34.130 --> 00:13:38.310
Therefore, a build will not rerun and therefore will not see the new icon.

171
00:13:38.990 --> 00:13:41.780
So if we now do a full hard refresher.

172
00:13:43.840 --> 00:13:49.930
You see, I can tap these icons as long as I want, nothing changes there because we're not listening

173
00:13:49.930 --> 00:13:51.960
to updates, of course, here.

174
00:13:51.970 --> 00:13:53.650
That's not what we want to remove that.

175
00:13:53.830 --> 00:13:56.250
But it's important to understand what lesson false does.

176
00:13:56.830 --> 00:14:00.220
So now, with this changed, you see now does updates again.

