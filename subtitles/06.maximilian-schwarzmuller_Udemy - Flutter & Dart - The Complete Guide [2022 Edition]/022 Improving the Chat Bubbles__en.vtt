WEBVTT
1
00:00:02.060 --> 00:00:06.810
So let's make sure we can add our user I.D. to outgoing chat messages here.

2
00:00:07.340 --> 00:00:14.660
It's not too hard because thankfully we get that firebase off object now to utilize it, you need to

3
00:00:14.660 --> 00:00:21.580
make sure that you are importing the firebase off dart file from the firebase off package.

4
00:00:22.130 --> 00:00:25.930
And with that, you can tap into firebase off.

5
00:00:26.030 --> 00:00:30.680
So you can use this object here, their access to act, for instance.

6
00:00:30.890 --> 00:00:34.570
And on that instance, you'll find a current user method.

7
00:00:35.000 --> 00:00:40.340
This gives you access to the currently logged in user and that will that include data like the user

8
00:00:40.340 --> 00:00:40.720
I.D.?

9
00:00:41.630 --> 00:00:47.930
Now, current user actually gives us a future which will eventually resolve to our current firebase

10
00:00:47.930 --> 00:00:48.310
user.

11
00:00:48.740 --> 00:00:57.740
So therefore, here I'll add async so that I can await here and get access to the user like this.

12
00:00:57.770 --> 00:01:01.220
So then this line will only execute once we got the user.

13
00:01:03.440 --> 00:01:13.560
Now we can utilize that user and said user ID equal to user dot uid there is a you ID field on that

14
00:01:13.580 --> 00:01:19.730
user object which holds our current ID and with that we can clearly map this chat message to this user.

15
00:01:20.910 --> 00:01:26.940
Now, of course, the existing chat messages here don't have that solid manually go there and add a

16
00:01:26.940 --> 00:01:31.650
new field to each message where I basically said.

17
00:01:32.590 --> 00:01:33.700
The user ID.

18
00:01:36.000 --> 00:01:41.730
Equal to some dummy ID like a which of course, is not my user I.D., but that's fine, these messages

19
00:01:41.730 --> 00:01:43.000
simply aren't by me.

20
00:01:43.710 --> 00:01:49.200
So let's make sure we add all those fields here.

21
00:01:51.770 --> 00:01:56.600
And once we did that, we can go back and make sure that we render the message differently, depending

22
00:01:56.600 --> 00:01:58.580
on whether this is us or not.

23
00:01:59.270 --> 00:02:06.950
So in a message bubble widget, we can add a second property, a boolean maybe is me, which I also

24
00:02:06.950 --> 00:02:08.259
want to get from outside.

25
00:02:08.780 --> 00:02:13.490
So I also expect to get a value for is me through the constructor of message bubble.

26
00:02:14.000 --> 00:02:18.980
Hence you can go to the place where we create message bubble, which is the message to start fail.

27
00:02:19.280 --> 00:02:26.780
And besides passing the text, we now also have to pass Chet Dock's for the current index and then access

28
00:02:26.990 --> 00:02:28.130
user ID.

29
00:02:28.580 --> 00:02:32.150
User ID now is a field we have in every message.

30
00:02:32.420 --> 00:02:36.730
We have the idea of the user who wrote this message so we can access it here.

31
00:02:37.520 --> 00:02:39.920
Now, of course we don't want to forward the user I.D. though.

32
00:02:40.310 --> 00:02:43.520
Message Bubble instead wants to know whether this is us or not.

33
00:02:43.850 --> 00:02:45.920
And this is just a string, not a boolean.

34
00:02:46.700 --> 00:02:52.610
So to find out whether that's us or not, we all need to current idea of the locked in user here in

35
00:02:52.610 --> 00:02:58.640
this line so that we can compare the idea of the current locked in user with the idea of this message.

36
00:02:59.930 --> 00:03:06.350
Now, there are various ways of retrieving that, a very elegant way, in my opinion, is that we actually

37
00:03:06.350 --> 00:03:08.300
wrap list view builder.

38
00:03:09.250 --> 00:03:17.170
With a number of widget, which is now the future builder widget, now the future builder is a bit like

39
00:03:17.170 --> 00:03:23.310
the stream builder, the differences that a future builder wants a future and it calls its builder method.

40
00:03:23.320 --> 00:03:26.850
As soon as the future resolves, as soon as the future is done.

41
00:03:27.310 --> 00:03:32.410
Hence, we add a future argument and then a builder argument.

42
00:03:32.920 --> 00:03:40.600
And the builder argument wants a function which receives the context and then also the future snapshot.

43
00:03:40.960 --> 00:03:42.650
And then we should return a widget.

44
00:03:43.300 --> 00:03:46.600
Now, the future I want to set up here is firebase off.

45
00:03:47.020 --> 00:03:52.840
And for Dad, you need to make sure that you do import the firebase off package and firebase off darte

46
00:03:52.840 --> 00:04:00.160
file here, firebase off dot instant's and then call current user, as I explained a second ago.

47
00:04:00.220 --> 00:04:01.360
This gives us a future.

48
00:04:01.780 --> 00:04:07.490
Now, when this future resolves, this builder will execute and it will well build this list view.

49
00:04:08.470 --> 00:04:13.450
Now, actually, I don't always want to build that list view, so I'll wrap the list U builder here

50
00:04:13.480 --> 00:04:18.250
with curly braces and add a semicolon here because I want to check what's in the future.

51
00:04:18.250 --> 00:04:25.260
Snapshot if you if future snapshot connection state is equal to Conexion state waiting.

52
00:04:25.840 --> 00:04:28.150
We don't have information about the user yet.

53
00:04:28.510 --> 00:04:34.390
In this case, I'll return a center widget where I have a circular progress indicator.

54
00:04:36.410 --> 00:04:40.790
A bit like I have it up there, and yes, you could therefore, of course, create one widget which

55
00:04:40.790 --> 00:04:43.610
you reuse here or a builder method.

56
00:04:45.710 --> 00:04:49.940
I'll simply repeat some code here, so that's one check we could also check.

57
00:04:50.830 --> 00:04:58.570
If we maybe don't have data, so if that is wrong, but if that is the case, if we don't have a current

58
00:04:58.570 --> 00:05:03.300
user, we shouldn't be on the chat screen anyways because of the logic in the main dart file.

59
00:05:03.310 --> 00:05:05.470
We should be seeing the off screen in that case.

60
00:05:05.710 --> 00:05:08.980
So there shouldn't be a need to really check for that.

61
00:05:10.200 --> 00:05:16.890
Hence, here, at this point, we should indeed have a user and we can then return to this view builder

62
00:05:16.890 --> 00:05:22.950
here and there, we now get access to the future snapshot, which since we are basing this on the current

63
00:05:22.950 --> 00:05:26.920
user future in the end, just gives us access to the data off the current user.

64
00:05:27.480 --> 00:05:31.500
So then here we can compare if the user ID of that.

65
00:05:32.410 --> 00:05:44.140
Data we got from our messages collection is that is equal to future snapshot dot data dot uid future

66
00:05:44.140 --> 00:05:51.700
snapshot dot data is the current user object and that has a UID property, as you saw in the new message

67
00:05:52.570 --> 00:05:53.950
widget there.

68
00:05:53.950 --> 00:06:00.460
We also access user ID on the data returned by current user and we're doing the same here.

69
00:06:03.130 --> 00:06:09.190
Now, there's one thing I'm not too happy about, I have my future builder here instead of that stream

70
00:06:09.190 --> 00:06:15.280
builder, which means for every new message we got on the back end, I would fetch my data for the current

71
00:06:15.280 --> 00:06:16.660
user again and again.

72
00:06:16.660 --> 00:06:23.290
And that is a bit redundant, creating that new future and waiting for it to resolve on every new message

73
00:06:23.290 --> 00:06:25.570
that a cent doesn't sound that great.

74
00:06:26.170 --> 00:06:27.820
That's all restructured is a bit.

75
00:06:27.820 --> 00:06:34.900
And I'll grab this code here, the future builder code and move that up and actually return this year

76
00:06:34.900 --> 00:06:35.940
at the very beginning.

77
00:06:37.660 --> 00:06:38.530
And then.

78
00:06:39.590 --> 00:06:44.780
Here instead of the builder method of the future builder, I will.

79
00:06:46.480 --> 00:06:52.120
Check if the futures snapshot connection status waiting, so let's add this here.

80
00:06:53.160 --> 00:06:55.860
And if it's not waiting, I'll return to Stream Builder.

81
00:06:58.990 --> 00:06:59.890
And down there.

82
00:07:01.610 --> 00:07:06.440
We returned a list, you a builder again, but now that's instead of the stream builder, so I simply

83
00:07:06.440 --> 00:07:12.380
swapped Stream Builder and future builder to make sure that we don't create a new future just because

84
00:07:12.380 --> 00:07:16.880
something changed in our stream of data, which is coming from the fire story collection.

85
00:07:18.000 --> 00:07:23.260
And with that, we should be fine, though, and the rest works as it should, and now we're forwarding

86
00:07:23.260 --> 00:07:28.270
information, whatever that messages from us to the chat or to the message bubble widget.

87
00:07:28.810 --> 00:07:34.720
So in the message bubble widget, we can now use this information which is stored in This is my property.

88
00:07:35.980 --> 00:07:43.510
For example, on the color of this container, we can check if Isme is true and if it is, I don't want

89
00:07:43.510 --> 00:07:51.220
to use the exact color, but instead, let's say then I just want to use colors gray and there we can

90
00:07:51.220 --> 00:07:55.540
actually use this notation to use a specific shade of gray.

91
00:07:58.180 --> 00:08:04.690
So our own messages will be great and the messages of our users will be purple or we'll use that accent

92
00:08:04.690 --> 00:08:05.560
color simply.

93
00:08:07.070 --> 00:08:13.130
And for the text color, we should do something similar if it's us, I don't want to use the color that

94
00:08:13.130 --> 00:08:18.740
stands out against the accent color, but instead I'll use colors black, which stands out against a

95
00:08:18.740 --> 00:08:21.410
great and otherwise I'll use the accent.

96
00:08:21.410 --> 00:08:22.700
Color, contrast color.

97
00:08:25.480 --> 00:08:28.900
We can also work on the border radius a bit.

98
00:08:30.050 --> 00:08:38.510
And not set all borders to be rounded corners, but instead with border radius only, we can target

99
00:08:38.510 --> 00:08:39.530
specific borders.

100
00:08:39.919 --> 00:08:44.990
And let's say we always want the top left border to be circular.

101
00:08:45.230 --> 00:08:53.900
So to be rounded, we can target top left then and use radius, not circular, to set the radius of

102
00:08:53.900 --> 00:08:59.290
the top left corner to 12, and we'll do the same for the top right corner.

103
00:08:59.660 --> 00:09:01.090
But that's not important.

104
00:09:01.250 --> 00:09:03.800
I will do different things for the bottom corners.

105
00:09:04.490 --> 00:09:10.490
Let's say the bottom left corner should only be round it if it's not us, because I also want to move

106
00:09:10.490 --> 00:09:14.630
messages to the left and to the right based on whether they're from us or not.

107
00:09:15.550 --> 00:09:17.470
So I'll set bottom left.

108
00:09:18.570 --> 00:09:21.980
Equal to a check where a check if it's not us.

109
00:09:22.020 --> 00:09:24.120
So the exclamation mark matters.

110
00:09:24.120 --> 00:09:29.310
If it's not me and if it's not me, then I'll set the.

111
00:09:30.260 --> 00:09:33.910
Radius to zero, and otherwise, I'll set the radius here.

112
00:09:35.000 --> 00:09:39.830
To 12, so only if it's us, the bottom left corner will be rounded.

113
00:09:41.170 --> 00:09:47.280
And I'll do the opposite for the bottom right corner if it's us all set the radius here.

114
00:09:49.110 --> 00:09:50.220
Two zero.

115
00:09:51.140 --> 00:09:52.430
And otherwise.

116
00:09:54.190 --> 00:09:54.880
To 12.

117
00:09:57.110 --> 00:10:01.970
Now, as a result, the corners of this container will be round at differently based on whether it's

118
00:10:01.970 --> 00:10:03.520
a message from us or not.

119
00:10:04.540 --> 00:10:10.690
And this matters because on the roll, we can now say that the main axis alignment to control where

120
00:10:10.690 --> 00:10:17.110
the message is rendered, if it's on the left or on the right, by all checking for Isme and if it's

121
00:10:17.110 --> 00:10:20.110
us, let's say we want to move the message to the right.

122
00:10:20.560 --> 00:10:27.280
We can do this by setting the main axis alignment to end then or if it's not us, we set the main axis

123
00:10:27.280 --> 00:10:33.760
alignment to start and therefore messages should now be rendered on different sides of the checklist

124
00:10:34.720 --> 00:10:36.130
if we save all of that.

125
00:10:38.470 --> 00:10:39.280
And reload.

126
00:10:41.390 --> 00:10:44.330
This looks good because these are messages not sent by us.

127
00:10:45.290 --> 00:10:50.960
But if I now send a message by me, so if I now send a new message, you see it's on the right, it's

128
00:10:50.960 --> 00:10:54.140
gray, and we also have these different rounded corners.

129
00:10:54.530 --> 00:10:55.920
So that looks pretty neat.

130
00:10:56.480 --> 00:11:02.410
Now, there is one thing I want to improve to ensure that this always is rendered in an efficient way.

131
00:11:03.230 --> 00:11:04.670
Let's use some keys.

132
00:11:06.210 --> 00:11:11.520
You learned that when you were working with lists of data, there can be issues with flutter, updating

133
00:11:11.520 --> 00:11:18.150
your widgets and to ensure that Flutter is always able to efficiently update data and lists or widgets

134
00:11:18.150 --> 00:11:23.970
and lists, let's go to the message bubble widget, which is the widget we repeat in our list here.

135
00:11:24.870 --> 00:11:30.690
And let's add a key there, let's accept a key there, accepting a Kei's easy, we add a new property,

136
00:11:30.690 --> 00:11:32.820
which is of type key, and we name it key.

137
00:11:33.360 --> 00:11:35.550
And we simply didn't have a named.

138
00:11:36.440 --> 00:11:39.320
Argument here in the constructor where we point at Starkie.

139
00:11:40.690 --> 00:11:46.890
Now in messages Stoddart, we can now simply set this key here by targeting this newly added named argument

140
00:11:47.290 --> 00:11:53.560
and now we need a unique key we can created with the value key and use some unique value.

141
00:11:53.560 --> 00:11:56.460
And every message here has a unique value.

142
00:11:56.470 --> 00:12:03.550
It has a unique document ID so we can reach out to Chet Docs and for to give an index access document

143
00:12:04.060 --> 00:12:10.240
ID written like this on this document, every document will have an ID which can be accessed through

144
00:12:10.240 --> 00:12:10.810
this field.

145
00:12:11.620 --> 00:12:16.990
Now we won't see a difference here, but behind the scenes, this ensures that Flutter will always be

146
00:12:16.990 --> 00:12:19.980
able to efficiently render and update this list.

147
00:12:20.230 --> 00:12:21.430
It might not need that.

148
00:12:21.440 --> 00:12:26.200
It might be able to efficiently update this list even without the key, but it certainly also won't

149
00:12:26.200 --> 00:12:26.530
hurt.

