WEBVTT
1
00:00:02.220 --> 00:00:08.220
So we have the image picture, let's make sure we can upload it, and for this, if you Google for Firebase

2
00:00:08.220 --> 00:00:12.900
Flutter storage, you should find the firebase storage Flattr package.

3
00:00:13.320 --> 00:00:17.630
And we already saw some flutter firebase packages.

4
00:00:17.640 --> 00:00:25.050
We saw the cloud firestorm package and the firebase off package cloud firestorm helped us with the fire

5
00:00:25.050 --> 00:00:25.950
story database.

6
00:00:26.160 --> 00:00:33.330
Firebase also helped us with firebase authentication and Firebase Storage will help us with the firebase

7
00:00:33.330 --> 00:00:34.500
cloud storage.

8
00:00:35.580 --> 00:00:38.010
Now installing it again is fairly trivial.

9
00:00:38.010 --> 00:00:45.180
We just copied this dependency here and then go to our perspective YAML file and added.

10
00:00:46.150 --> 00:00:51.580
Now, we already saw in the past that adding new projects typically doesn't work on the already running

11
00:00:51.580 --> 00:00:52.260
application.

12
00:00:52.420 --> 00:00:56.430
So we'll go ahead, close it and restarted at this point already.

13
00:00:56.590 --> 00:00:57.490
So did later.

14
00:00:57.490 --> 00:00:58.570
It hopefully works.

15
00:00:59.880 --> 00:01:06.600
Now, with that, we added firebase storage and I want to upload the image whenever the user picked

16
00:01:06.600 --> 00:01:13.290
an image filled out the rest of the form and pressed this submit button we have in the form.

17
00:01:14.130 --> 00:01:16.380
So therefore, we need to do one main thing.

18
00:01:16.770 --> 00:01:22.530
We need to make sure that the picked user image, which we're managing in this user image picture widget

19
00:01:22.920 --> 00:01:30.800
is forwarded, is passed to the off forum because that's where we ultimately collect all entered data

20
00:01:30.930 --> 00:01:34.530
and then again forwarded to the off screen.

21
00:01:34.530 --> 00:01:40.140
In the end, with the help of that submit and property, which we manage all for him, that's how we

22
00:01:40.140 --> 00:01:43.050
get all our data to the off screen in the end.

23
00:01:43.860 --> 00:01:49.590
So we need to get the image to all form so that from there on we can forward it to the off screen.

24
00:01:50.190 --> 00:01:55.830
Now, to get the picked image to be off form, we can use the same approach we've used over and over

25
00:01:55.830 --> 00:01:56.730
throughout this course.

26
00:01:57.180 --> 00:02:03.900
We add a property to the user image picker widget and that property will be a function which we can

27
00:02:03.900 --> 00:02:08.789
call from inside this widget, which we will get past from outside the widget, though.

28
00:02:09.970 --> 00:02:15.160
So here we add a new property, a new final property, which will be of type function, which will name.

29
00:02:16.170 --> 00:02:16.800
Image.

30
00:02:18.170 --> 00:02:25.520
Pick even the name is up to you, though this function will not return anything but from an argument,

31
00:02:25.520 --> 00:02:30.140
from a parameter perspective, it will actually receive that picked image.

32
00:02:30.140 --> 00:02:31.490
It will receive a file.

33
00:02:32.480 --> 00:02:38.690
Picked image as an argument, and now we add the constructor of to user image picker, and there we

34
00:02:38.690 --> 00:02:44.930
make it clear that we expect to get a pointer at such a function as an argument and we then bind this

35
00:02:44.930 --> 00:02:45.500
function.

36
00:02:45.500 --> 00:02:49.160
We get as an argument to this image pick and property.

37
00:02:49.520 --> 00:02:55.460
And since this is bound and since we now have this property, we can call this function whenever an

38
00:02:55.460 --> 00:02:59.490
image was picked to let the surrounding form know about the image.

39
00:02:59.960 --> 00:03:05.540
So here, besides setting our state to preview the image, I will also call widget.

40
00:03:06.800 --> 00:03:14.660
Image pick fine and four words that picked image file, and now we need to go to the forum, which is

41
00:03:14.660 --> 00:03:19.710
where we in the end use our user image picker and pass such a function into that widget.

42
00:03:20.420 --> 00:03:25.010
So for Dadri, first of all, need to define a new function here, which doesn't return anything which

43
00:03:25.010 --> 00:03:25.580
will name.

44
00:03:27.250 --> 00:03:34.720
Picked a match or whatever you want to name it, which gets that image, which is of type file and that

45
00:03:34.720 --> 00:03:39.330
file type, as you learned, needs to be imported from Dart Io.

46
00:03:39.370 --> 00:03:42.520
So make sure you at the start io import your.

47
00:03:44.230 --> 00:03:45.310
And then here.

48
00:03:46.370 --> 00:03:54.110
We will receive that file and I want to store it in a variable here, so user image file.

49
00:03:56.070 --> 00:04:03.570
That's my variable, and that will be of type file and I simply said user image file equal to the image

50
00:04:03.900 --> 00:04:10.530
argument we're receiving here so that stores the image that is picked in the user image picker in that

51
00:04:10.530 --> 00:04:16.140
property of the off form state so that we have it available once we try to submit this form.

52
00:04:16.589 --> 00:04:23.910
Because when we do try to submit here, I want to check if the form is valid and if we have a user image

53
00:04:23.910 --> 00:04:24.290
file.

54
00:04:24.480 --> 00:04:29.790
So if that is unequal to null, because if it would be equal to null, no image was picked yet.

55
00:04:30.990 --> 00:04:33.150
And actually, I'll not do this here in this step.

56
00:04:33.420 --> 00:04:36.630
Instead, I'll add another step here where I check if.

57
00:04:37.760 --> 00:04:43.250
User image file is equal to now maybe, which means the user did not pick an image in this case, we

58
00:04:43.250 --> 00:04:45.610
can return here to avoid that.

59
00:04:45.620 --> 00:04:49.310
The other part here gets executed because I don't want to submit the form.

60
00:04:49.310 --> 00:04:55.100
I don't want to continue if no image was picked and instead we might want to show an error to the user,

61
00:04:55.100 --> 00:05:00.200
we might want to let the user know about the fact that we didn't find a valid image.

62
00:05:01.530 --> 00:05:07.200
And we could use the good old snack bar for this with scaffold of context.

63
00:05:07.350 --> 00:05:13.500
And here we can use this context, show snack bar and create a snack bar.

64
00:05:14.460 --> 00:05:15.150
In here.

65
00:05:17.140 --> 00:05:22.690
Where the content is simply a text widget, where we say, please pick an image.

66
00:05:25.080 --> 00:05:30.480
All the notes that we, of course, only care about the image if we are in sign up mode, so we should

67
00:05:30.480 --> 00:05:34.460
add something to the effect, we should make sure whenever we have image or not.

68
00:05:34.470 --> 00:05:40.120
And if we're not in log-in mode, because if we would be in log-in mode, we don't care about the image.

69
00:05:40.140 --> 00:05:44.250
We only care about it if we're not in log-in mode, if we are signing up.

70
00:05:44.670 --> 00:05:46.980
But if we are signing up, we should validate this.

71
00:05:47.010 --> 00:05:50.460
We should check if we have an image and then we should show it error.

72
00:05:50.460 --> 00:05:57.660
If we have no image, we can also set the background color here to theme of context, error color to

73
00:05:57.660 --> 00:05:59.780
color that snack bar appropriately.

74
00:06:00.450 --> 00:06:03.880
So with that, we should have watched that an invalid form gets submitted.

75
00:06:04.530 --> 00:06:10.560
Now, of course, one missing piece is still that we were up this picked image function to our user

76
00:06:10.560 --> 00:06:11.220
image picker.

77
00:06:11.520 --> 00:06:15.840
So we should forward that picked image function to that user image picker.

78
00:06:15.990 --> 00:06:22.380
So pass it as an argument to that constructor here and don't add parentheses here because indeed, we

79
00:06:22.380 --> 00:06:26.040
just want to pass a pointer to that function to user image picker.

80
00:06:28.270 --> 00:06:33.910
So with that, we don't have the upload yet, but the rest should be wired up and if I tried to create

81
00:06:33.910 --> 00:06:34.570
a new account.

82
00:06:35.510 --> 00:06:38.090
And I enter, let's say, a valid email address.

83
00:06:41.100 --> 00:06:48.990
And everything is valid here and a press sign up, I do get that, please pick an image error here because

84
00:06:48.990 --> 00:06:50.790
I indeed have no image.

85
00:06:51.330 --> 00:06:54.930
And only if I do pick an image, I should be able to submit this.

86
00:06:55.670 --> 00:06:56.830
So let's give it a try.

87
00:06:57.150 --> 00:07:02.100
Now, you see that works, but of course it works without actually uploading that image.

88
00:07:02.280 --> 00:07:04.110
And that's not our goal here.

89
00:07:04.140 --> 00:07:05.670
The image should be uploaded.

90
00:07:05.850 --> 00:07:08.930
So let's now work on the actual upload functionality.

