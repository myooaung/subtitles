WEBVTT
1
00:00:02.340 --> 00:00:09.350
Now of course there are different ways of approaching that, what we'll always have to do though is we'll

2
00:00:09.350 --> 00:00:18.080
have to manage our set filters in main.dart because that is the only place where we can in the end reach

3
00:00:18.080 --> 00:00:21.980
both the FiltersScreen and also reach

4
00:00:22.070 --> 00:00:27.670
the CategoryMealsScreen which is in the end where we need to pass our set filters.

5
00:00:28.160 --> 00:00:34.520
So I want to manage my filters globally in here and in the state management module as I already mentioned

6
00:00:34.520 --> 00:00:40.220
before, we'll learn about another approach that allows us to manage state that affects multiple pieces

7
00:00:40.220 --> 00:00:43.010
in the app in a global place.

8
00:00:43.010 --> 00:00:49.700
That's not the main widget here which always has the downside that the entire app will rebuild whenever

9
00:00:49.700 --> 00:00:53.840
we change state here, even though it might not affect the entire app.

10
00:00:53.870 --> 00:01:00.590
So here in my app, for the moment however, I'll have to manage all my state and therefore, I'll convert

11
00:01:00.620 --> 00:01:06.800
this from a stateless widget into a stateful widget, just like that by using the refactoring tool.

12
00:01:07.040 --> 00:01:14.810
Now up there, I want to store which filters the user set and I'll do this in a map with strings and boolean

13
00:01:14.810 --> 00:01:16.310
values.

14
00:01:16.310 --> 00:01:20.840
I'll name that map filters and I'll set an initial value here,

15
00:01:20.840 --> 00:01:27.800
in the end I have keys which are gluten for example and I'll set all these values to false initially.

16
00:01:28.430 --> 00:01:30.980
So that simply is my default setting for the filters

17
00:01:30.980 --> 00:01:34.510
as we start the app just like that.

18
00:01:37.820 --> 00:01:43.420
Now of course the goal is to update that map when the user sets the filters on the FiltersScreen.

19
00:01:43.430 --> 00:01:49.910
Now we could update this with every switch the user clicks there, so that if I click here, we automatically

20
00:01:49.970 --> 00:01:52.850
update our filters here in the main.dart file,

21
00:01:52.880 --> 00:01:56.720
that would be absolutely fine but it's not the approach I want to use.

22
00:01:56.750 --> 00:02:05.150
Instead, I want to make sure that the user has to click a button on the FiltersScreen which then updates

23
00:02:05.240 --> 00:02:09.350
the filters here in the main.dart file. For that,

24
00:02:09.350 --> 00:02:16.490
let's add a new method here in MyAppState, which won't return anything which I'll name set filters

25
00:02:17.130 --> 00:02:17.570
and there,

26
00:02:17.570 --> 00:02:25.160
I also expect to get a map with string keys and boolean values which I'll name filter data and as always,

27
00:02:25.160 --> 00:02:28.060
the name of that argument is totally up to you.

28
00:02:28.120 --> 00:02:33.240
Now that method should be called from inside the FiltersScreen,

29
00:02:33.860 --> 00:02:39.760
let's say it should be called when the user there clicks a button in the appBar.

30
00:02:39.800 --> 00:02:47.480
So in the FiltersScreen widget, I'll add actions to the appBar and I'll add an icon button there, where

31
00:02:47.480 --> 00:02:56.770
I set the icon to icons, to an icon where I use icons save which is this save icon here and when pressing

32
00:02:56.770 --> 00:03:02.650
this button, then I want to trigger this function which I'm just defining here in the main.dart

33
00:03:02.650 --> 00:03:09.400
file. Now passing that function here to the FiltersScreen is pretty simple because the FiltersScreen

34
00:03:09.430 --> 00:03:11.700
is configured here in the routes table,

35
00:03:11.830 --> 00:03:17.560
so that's now an advantage of using named routes. When managing your state here in the main widget, in

36
00:03:17.560 --> 00:03:18.830
the main.dart file,

37
00:03:18.940 --> 00:03:25.960
then you have all your widgets that you load through routes be created here in that same widget in that

38
00:03:25.960 --> 00:03:31.090
same file, so if you want to pass data there, like this property or this function here,

39
00:03:31.090 --> 00:03:37.270
so the set filters function or a pointer at that function, you can do that. Here, to the FiltersScreen

40
00:03:37.270 --> 00:03:38.130
constructor,

41
00:03:38.290 --> 00:03:45.680
I can pass a pointer at my set filters function and now that's passed into the FiltersScreen and

42
00:03:45.730 --> 00:03:46.710
available there.

43
00:03:46.780 --> 00:03:56.680
So in the FiltersScreen, I can now expect that, I can expect a function which I'll name save filters

44
00:03:57.580 --> 00:04:03.470
which is set through the constructor, so let's add the constructor here where I target this save filters

45
00:04:03.670 --> 00:04:10.030
and now this function I'm passing in in the main.dart file is forwarded here into the filters screen and

46
00:04:10.030 --> 00:04:18.880
is used there and therefore now here when pressing this button, I can refer to my widget because the reference

47
00:04:18.880 --> 00:04:25.240
to that save filters function is stored in a property of my widget, not of the state but you learned

48
00:04:25.240 --> 00:04:30.550
that you can reach out to your widget with the special widget property which Flutter gives you inside

49
00:04:30.550 --> 00:04:33.610
of your state objects in your state classes.

50
00:04:33.610 --> 00:04:39.940
So here I can reach out to the widget and then simply call save filters and not add parentheses but

51
00:04:39.940 --> 00:04:45.640
instead again just point at it and pass it as a pointer to onPressed, at least for now,

52
00:04:45.640 --> 00:04:51.130
that will soon change because I will need to pass some data to save filters but for now, that will do.

53
00:04:51.620 --> 00:04:53.050
Now back in main.dart,

54
00:04:53.050 --> 00:04:59.500
we now set up the connection between FiltersScreen and the main app here and we're able to call a method

55
00:04:59.530 --> 00:05:04.470
defined here into MyAppState in the filter screen which is pretty awesome.

56
00:05:04.630 --> 00:05:10.660
So now set filters is callable and later it will also get some data and then I want to use that data

57
00:05:10.660 --> 00:05:16.940
to update my filters here. Therefore here we can now call set state and in set state,

58
00:05:16.960 --> 00:05:23.060
I want to override my existing filters, so this property up there, with the filter data I'm getting because

59
00:05:23.060 --> 00:05:24.280
it will have the same format,

60
00:05:24.310 --> 00:05:28.610
it will be the exact same map, I will make sure that this is the case.

61
00:05:28.720 --> 00:05:34.720
If you want to be really sure, you don't use a map here but a custom object, a model you create,

62
00:05:34.720 --> 00:05:37.570
I'll take the more quick and dirty way of using a map here

63
00:05:37.690 --> 00:05:42.360
where you of course then have to make sure you're using the same keys, for an object

64
00:05:42.370 --> 00:05:49.360
you would get auto-completion by your IDE and extra type checking by Dart but for this scenario here,

65
00:05:49.360 --> 00:05:55.260
a map should do and I'm then overriding my filters here with the filtered data I get here.

66
00:05:57.010 --> 00:06:02.320
Now of course, we also have to make sure that we now adjust the meals we present to the user based

67
00:06:02.410 --> 00:06:04.070
on the filter.

68
00:06:04.120 --> 00:06:11.350
Now at the moment, the meals that are available here in category meals are fetch directly from the

69
00:06:11.350 --> 00:06:14.730
dummy_data.dart file, that has to change,

70
00:06:14.770 --> 00:06:23.620
instead I want to manage my available meals here in the main.dart file. So I'll add a list here, a list of meals

71
00:06:24.880 --> 00:06:34.790
which I'll name available meals and as a default, that should be dummy meals and for that of course you

72
00:06:34.790 --> 00:06:45.000
need to add an import to the dummy_data.dart file and again, I'll adjust this import path to be

73
00:06:45.000 --> 00:06:46.630
./dummy_data.dart.

74
00:06:46.680 --> 00:06:52.170
So now I import my meals here in the MyAppState or in the main.dart file and I use it here in the

75
00:06:52.170 --> 00:06:59.940
MyAppState to initialize my available meals. Now meal is my model which I also need to import here to

76
00:06:59.940 --> 00:07:00.870
be able to use it,

77
00:07:01.110 --> 00:07:05.500
it's in the models folder, meal.dart and with that import added,

78
00:07:05.520 --> 00:07:06.690
this works.

79
00:07:06.810 --> 00:07:12.990
So when the app starts, my available meals is basically just a pointer at the meals I got here.

80
00:07:12.990 --> 00:07:16.020
Now when I set a filter, I want to change that,

81
00:07:16.050 --> 00:07:20.820
then I want to set available meals equal to dummy meals

82
00:07:20.820 --> 00:07:26.090
but now I use where to filter the dummy meals and

83
00:07:26.100 --> 00:07:27.810
then I convert this back to a list.

84
00:07:30.450 --> 00:07:36.330
Now for filtering, we pass a function to where which receives every single meal and then has to return

85
00:07:36.330 --> 00:07:37.760
true if we want to keep it

86
00:07:37.770 --> 00:07:38.350
and false

87
00:07:38.370 --> 00:07:43.140
if we want to drop it and now we have to go through all the filters we can set to decide whether a

88
00:07:43.140 --> 00:07:45.600
meal should be kept or not.

89
00:07:45.600 --> 00:07:51.870
Now we'll add that in a second but first of all, let's make sure that we now use the available meals

90
00:07:52.260 --> 00:07:56.790
in our CategoryMealsScreen.

91
00:07:56.840 --> 00:08:05.620
That means that again down there where we set up the route for category meals, we can forward available

92
00:08:05.620 --> 00:08:11.450
meals and in the CategoryMealsScreen widget, we now just have to accept that.

93
00:08:11.470 --> 00:08:19.540
So here, I'll add a new final property which is a list of meals which I'll name available meals and

94
00:08:19.540 --> 00:08:26.470
then add the constructor of course and initialize available meals and now use widget available meals

95
00:08:26.680 --> 00:08:29.320
down there instead of dummy meals.

96
00:08:29.380 --> 00:08:35.110
So instead of dummy meals, I just use widget available meals and now the available meals are managed

97
00:08:35.110 --> 00:08:40.510
in the main.dart file which is exactly how it should be because there I can now filter them because

98
00:08:40.539 --> 00:08:41.850
that's also the place,

99
00:08:41.890 --> 00:08:44.540
the main.dart file, where my filters are managed,

100
00:08:44.590 --> 00:08:52.210
that's the global source of truth for the entire app. So we can get rid of the dummy data import

101
00:08:52.240 --> 00:08:58.480
now in the CategoryMealsScreen and now back in the main.dart file, we can work on the filtering logic

102
00:09:01.030 --> 00:09:03.340
up there. Now for filtering here,

103
00:09:03.340 --> 00:09:09.220
I simply want to check all my filters with if statements here. So I can check filters, _filters

104
00:09:09.250 --> 00:09:14.140
which is this property here and check if gluten is true.

105
00:09:14.860 --> 00:09:18.590
So just this here is equal to equals true,

106
00:09:18.610 --> 00:09:18.820
right,

107
00:09:18.820 --> 00:09:23.930
so if you just have if filters gluten, that automatically compares it to true.

108
00:09:24.190 --> 00:09:31.660
If that is set to true, we know that we want to exclude meals that do have gluten in it.

109
00:09:31.660 --> 00:09:41.320
Now in our meal model, we see that we have isGlutenFree, isLactoseFree, isVegan, isVegetarian as

110
00:09:41.410 --> 00:09:43.210
properties.

111
00:09:43.510 --> 00:09:49.540
So if a filter is set for isGlutenFree, we only want to include meals that are gluten free. So we can

112
00:09:49.540 --> 00:09:54.130
add another condition here and we check is this filter set

113
00:09:54.130 --> 00:10:00.640
and if yes, then the second part of this condition is also evaluated, then we check is the meal gluten

114
00:10:00.640 --> 00:10:02.920
free. If it is not,

115
00:10:03.070 --> 00:10:05.110
hence the exclamation mark at the beginning,

116
00:10:05.110 --> 00:10:09.160
then I know that I don't want to include it, so we can return false.

117
00:10:09.160 --> 00:10:14.650
Remember that in this where method or in the function we passed where, we have to return false if we

118
00:10:14.650 --> 00:10:20.950
don't want to include a certain item in the newly generated list and the newly generated list should

119
00:10:20.950 --> 00:10:22.710
respect all filters.

120
00:10:22.960 --> 00:10:29.200
Now therefore I check if a gluten filter is set and if it is, then if the meal I'm looking at is not

121
00:10:29.200 --> 00:10:32.240
gluten free, I know I certainly don't want to include it,

122
00:10:32.320 --> 00:10:34.570
I don't even have to check the other filters.

123
00:10:34.570 --> 00:10:35.890
It's not gluten free,

124
00:10:35.950 --> 00:10:38.290
I'm filtering for gluten free items,

125
00:10:38.290 --> 00:10:43.120
I don't need to include this one and I'll repeat that same logic.

126
00:10:43.120 --> 00:10:52.050
So if I have a filter for lactose set, then if my meal is not lactose free, hence the exclamation mark

127
00:10:52.050 --> 00:10:59.490
in front of this check, I want to exclude it. The same of course for vegan, if I'm filtering for vegan and

128
00:10:59.490 --> 00:11:07.770
my meal is not vegan, hence the exclamation mark, I want to exclude it. If I'm filtering for vegetarian

129
00:11:07.800 --> 00:11:15.690
here and my meal is not vegetarian, hence the exclamation mark, I want to exclude it. That's my logic.

130
00:11:15.960 --> 00:11:23.370
If I make it past all these if checks, then I know either I'm satisfying all these filters or no filters

131
00:11:23.400 --> 00:11:31.370
are set and therefore I will return true to keep the meal I'm looking at in my available meals. That

132
00:11:31.370 --> 00:11:32.550
was a lot of talking,

133
00:11:32.600 --> 00:11:39.410
now we can finally wire it up and for that, we need to make sure that set filters receives a filtered

134
00:11:39.410 --> 00:11:46.760
data map that looks like this map. So we can copy this map and go to the FiltersScreen and there, I'm

135
00:11:46.760 --> 00:11:53.810
calling widget save filters. Now actually of course, I want to do this in a way such that I forward the

136
00:11:53.810 --> 00:12:02.300
data I gather in here about which filters the user selected with these widgets on this page. So

137
00:12:02.330 --> 00:12:09.950
I'll actually use an anonymous function here so that I can call widgets save filters myself,

138
00:12:13.180 --> 00:12:18.990
like this and I want to pass my data to that.

139
00:12:18.990 --> 00:12:27.510
So my selected filters, that's a map and the values for each of these keys here, the values are of course

140
00:12:27.510 --> 00:12:29.530
the values I manage up there.

141
00:12:29.820 --> 00:12:35.820
So for gluten, I'll set this equal to gluten free, what the user chose there and the same for lactose

142
00:12:35.820 --> 00:12:47.070
free, for vegan and for vegetarian and then it's this selected filters data which I forward to save filters,

143
00:12:47.460 --> 00:12:56.610
which in the end triggers that set filters method here in MyAppState. Let's give that a try, let's save

144
00:12:56.610 --> 00:13:05.150
that all and do a full restart with the green arrow and as a default, no filters are set and let's now

145
00:13:05.150 --> 00:13:11.560
set vegetarian as a filter and hit save here,

146
00:13:11.560 --> 00:13:14.800
don't forget that, you need to save and then go to meals,

147
00:13:14.800 --> 00:13:20.690
quick and easy and indeed you might remember that previously we had a burger in here and the burger

148
00:13:20.840 --> 00:13:24.680
is not included anymore.

149
00:13:24.700 --> 00:13:29.890
Now what we're not doing at the moment is if I go back to filters, I don't reflect my currently set filters

150
00:13:29.890 --> 00:13:30.460
here,

151
00:13:30.550 --> 00:13:36.640
so let's do that as a next step to finish up that filtering logic. Of course it would be nice to see

152
00:13:36.640 --> 00:13:42.190
which filters we set here on the FiltersScreen and therefore we have to make sure that we don't always

153
00:13:42.190 --> 00:13:48.310
initialize these with false values but actually with the values that are set here in the main.dart file

154
00:13:48.430 --> 00:13:57.900
in MyAppState. So that means that I simply want to forward my filters here, my current filters to the

155
00:13:57.900 --> 00:13:59.430
FiltersScreen.

156
00:13:59.430 --> 00:14:06.720
So besides a pointer at the set filters method, I'll also forward the current filters and in the filters

157
00:14:06.780 --> 00:14:09.650
screen, we can therefore get that data.

158
00:14:09.660 --> 00:14:15.330
So here we'll get a map with string keys and bool values,

159
00:14:15.330 --> 00:14:16.610
the current filters,

160
00:14:16.610 --> 00:14:21.470
that sounds like a fitting name and that will be the first argument I get here,

161
00:14:21.480 --> 00:14:29.580
the current filters. And now here, we should actually not initialize this with false or at least not keep

162
00:14:29.580 --> 00:14:30.860
it set at false,

163
00:14:30.870 --> 00:14:39.390
instead we can now use initState to really set our own initial state when this state gets created with

164
00:14:39.480 --> 00:14:45.780
@Override and important, with super not initState

165
00:14:45.780 --> 00:14:55.740
and now in here, we can override these values based on the values we get in our widget current filters

166
00:14:56.100 --> 00:15:02.700
map and therefore for gluten, I'll set my gluten free value.

167
00:15:02.700 --> 00:15:11.220
Now we can repeat that for lactose free, access the lactose key on the current filters map we're getting,

168
00:15:11.820 --> 00:15:21.590
for vegetarian, access the vegetarian key and for vegan, access the vegan key

169
00:15:21.630 --> 00:15:27.690
and now when this state is created which happens when this page is loaded, we initialize our values here

170
00:15:27.750 --> 00:15:31.780
and therefore also our switches to match our currently set filters.

171
00:15:32.740 --> 00:15:35.960
So back in the app here, I restarted it completely,

172
00:15:36.220 --> 00:15:41.430
let me now again filter for vegetarian meals and save this,

173
00:15:41.440 --> 00:15:48.220
never forget that. Go to meals, quick and easy, the burger is not there.

174
00:15:48.260 --> 00:15:52.530
Now let's go back to filters here and we see that's also still saved.

175
00:15:52.970 --> 00:15:59.300
Let's now also filter for gluten free meals and save this, go back to meals and now the spaghetti

176
00:15:59.300 --> 00:16:01.160
are also gone as they should.

177
00:16:01.880 --> 00:16:04.070
So this should right now all be working

178
00:16:04.070 --> 00:16:12.020
and if we clear our filters here and save that, of course our other recipes are back.

179
00:16:12.200 --> 00:16:14.390
So that's looking pretty sweet,

180
00:16:14.420 --> 00:16:15.600
filtering works,

181
00:16:15.620 --> 00:16:17.300
let's now work on the favorites.

