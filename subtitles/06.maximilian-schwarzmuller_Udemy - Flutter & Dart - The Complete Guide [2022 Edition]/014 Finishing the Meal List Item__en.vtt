WEBVTT
1
00:00:02.260 --> 00:00:07.960
Please also note on every image that we have rounded corners at the top but not at the bottom and therefore

2
00:00:07.960 --> 00:00:10.060
at the bottom we have normal corners,

3
00:00:10.060 --> 00:00:16.000
even though theoretically, our card has rounded corners on all edges. You see this if you load a category

4
00:00:16.000 --> 00:00:18.640
for the first time and the image hasn't been loaded yet,

5
00:00:18.640 --> 00:00:24.370
then when you see that white box, you see rounded corners at the bottom too but thereafter once the image

6
00:00:24.370 --> 00:00:27.250
is there, the normal borders of the image overlap

7
00:00:27.250 --> 00:00:28.510
these rounded corners

8
00:00:28.510 --> 00:00:31.840
and that is what we fixed with ClipRRect.

9
00:00:31.840 --> 00:00:36.850
Now we're not fixing it on the bottom because as a next step, we'll add more content below the image as

10
00:00:36.850 --> 00:00:37.250
well

11
00:00:37.330 --> 00:00:41.470
and therefore the image will not take the entire height of the card or not be the only content of the

12
00:00:41.470 --> 00:00:45.870
card. So let's continue working on this now,

13
00:00:45.880 --> 00:00:48.400
let's continue working on our meal item.

14
00:00:48.430 --> 00:00:53.950
We have the image, we're clipping its top borders and keep in mind that the image is part of a stack.

15
00:00:53.980 --> 00:00:58.900
That means we can now also add another widget which sits on top of the image and that's the plan

16
00:00:58.900 --> 00:00:59.250
indeed.

17
00:00:59.860 --> 00:01:05.890
So on top of the image and therefore after ClipRRect but still in the widget array here or the

18
00:01:05.890 --> 00:01:07.480
widget list for stack,

19
00:01:07.720 --> 00:01:13.600
I want to add another widget which is placed on top of the image and that should be a text widget.

20
00:01:13.690 --> 00:01:20.600
The text should of course display the title of this image here and I also want to set some style here,

21
00:01:20.680 --> 00:01:25.070
not through a theme because I really will only use that style here.

22
00:01:25.090 --> 00:01:34.720
I want to have a font size of let's say 26 and then also set a color which should be white. Besides

23
00:01:34.720 --> 00:01:41.860
that I want to set softWrap to true so that the text, if it should be too long for the card container,

24
00:01:42.010 --> 00:01:49.670
is actually wrapped and I'll set overflow to TextOverflow.fade.

25
00:01:49.670 --> 00:01:56.930
So in case that it doesn't fit into its box even with wrapping, now it would just fade out and not overflow

26
00:01:56.930 --> 00:02:02.690
and basically look ugly but instead it would be cropped, would be clipped in its box that is reserved

27
00:02:02.690 --> 00:02:04.540
for it and just fade out

28
00:02:04.610 --> 00:02:10.539
if it needs to exceed that box. Shouldn't really happen, it's just a safety mechanism.

29
00:02:10.639 --> 00:02:16.520
With that, if we save this and we load Italian food, here's our text. Now that's okay

30
00:02:16.540 --> 00:02:23.980
but I would want that text placed differently, not on the top left. When you're in a stack and that's

31
00:02:23.980 --> 00:02:24.390
new,

32
00:02:24.400 --> 00:02:29.620
we haven't done this before but when you're in a stack, you can use a special widget which really only

33
00:02:29.620 --> 00:02:31.750
works inside of a stack.

34
00:02:32.020 --> 00:02:38.020
You can wrap text with that widget by using the refactoring tool and wrap with new widget and the name

35
00:02:38.020 --> 00:02:45.820
of that widget is positioned. Positioned allows us to position the child widget in an absolute coordinate

36
00:02:45.820 --> 00:02:52.880
space and for that, we can add a couple of properties - bottom, left, right and top. So we can tell how

37
00:02:52.880 --> 00:02:58.790
far away we want to be from the bottom, from the left, from the right and from the top in our stack and the

38
00:02:58.790 --> 00:03:05.630
stack container itself is defined by its biggest child which here clearly is our image.

39
00:03:05.630 --> 00:03:11.300
So effectively in the box of that widget here, of that image, we can now position that text and there we

40
00:03:11.300 --> 00:03:18.170
could say that we want to have 20 pixels distance from the bottom and 0 pixels or 10 pixels distance

41
00:03:18.350 --> 00:03:22.070
from the right to position it in the bottom right corner

42
00:03:22.160 --> 00:03:26.950
and now if you save this, this text moved down there which in my opinion looks better.

43
00:03:26.990 --> 00:03:31.910
So this is of course just my opinion, you can play around with that and position this differently if you

44
00:03:31.910 --> 00:03:32.590
want to

45
00:03:32.660 --> 00:03:34.860
but now we have the text down there.

46
00:03:34.970 --> 00:03:37.910
One thing we see for example here is that

47
00:03:37.910 --> 00:03:43.210
here this text still goes outside of the available box

48
00:03:43.370 --> 00:03:49.580
and to prevent this, we need to make sure that this text, which is configured to fade instead of to overflow,

49
00:03:49.880 --> 00:03:52.780
actually has a container that constrains it.

50
00:03:52.790 --> 00:03:57.810
So let's wrap the text here into a container widget and we can now give that container a width

51
00:03:58.070 --> 00:04:04.460
and I want to use a width of 250, maybe even 220 to be a a bit smaller than the image.

52
00:04:05.840 --> 00:04:10.670
Also to ensure that the text is always readable even on bright background,

53
00:04:10.760 --> 00:04:16.850
I'll add a background color here for the container with the color argument of colors

54
00:04:19.519 --> 00:04:29.120
black 54. That's basically black but with a certain amount of transparency, to be precise with 46%

55
00:04:29.150 --> 00:04:37.770
of transparency or 54% of opacity and with that if we now save this, now this looks way better,

56
00:04:37.800 --> 00:04:40.230
now we have that black background.

57
00:04:40.230 --> 00:04:44.730
Maybe we now want to have some padding in that container so that the text doesn't sit directly on the

58
00:04:44.820 --> 00:04:52.080
edges of the container, so we can add a padding of EdgeInsets.symmetric maybe to have different padding

59
00:04:52.510 --> 00:04:54.640
to top and bottom and left and right,

60
00:04:54.900 --> 00:05:03.250
so vertical padding could be 5 and horizontal padding could be 20 maybe and with that saved,

61
00:05:03.410 --> 00:05:04.560
this doesn't look too bad,

62
00:05:04.590 --> 00:05:06.450
looks quite nice to me.

63
00:05:06.450 --> 00:05:12.890
Well actually, I now ramp up the width of that container again because I of course had one mistake, the

64
00:05:12.890 --> 00:05:15.900
width of the image is not 250, that's the height,

65
00:05:16.010 --> 00:05:24.480
so we can certainly use more width here in the container and it will fit nicely here into our image.

66
00:05:24.480 --> 00:05:28.060
So now these are the images with title on top of it,

67
00:05:28.080 --> 00:05:30.090
I like that style, looks quite decent,

68
00:05:30.090 --> 00:05:35.100
of course you can style this even more, add rounded corners to that text container if you want to

69
00:05:35.100 --> 00:05:37.030
but I'm happy with that style.

70
00:05:37.050 --> 00:05:42.690
My next step is that I of course also want to add some information below that image title thing here.

71
00:05:44.820 --> 00:05:51.720
So below the image and title, so after this stack widget here which ends here but still inside of the

72
00:05:51.720 --> 00:05:56.360
column widget, child array, child list here, there

73
00:05:56.370 --> 00:06:02.580
I now want to add a row because now I want to have a couple of pieces of information sit next to each

74
00:06:02.580 --> 00:06:12.120
other below that image. Maybe add a padding widget around the row before we continue with the row itself

75
00:06:12.450 --> 00:06:14.650
to have some distance between the image,

76
00:06:14.730 --> 00:06:19.790
so a padding of let's say EdgeInsets.all 20,

77
00:06:19.800 --> 00:06:24.500
so 20 in all directions and then our actual row child.

78
00:06:24.550 --> 00:06:30.060
Now inside of the row, we of course have children, just as we have it in a column and now

79
00:06:30.070 --> 00:06:32.200
and that as always is totally up to you,

80
00:06:32.200 --> 00:06:35.590
I want to have three items next to each other here.

81
00:06:35.650 --> 00:06:42.600
Each item itself will be a row because each item itself will consist of two widgets and the two widgets

82
00:06:42.600 --> 00:06:53.160
that make up a single item here in our outer row is an icon and then also a text.

83
00:06:53.180 --> 00:06:54.710
So what's the icon?

84
00:06:54.710 --> 00:06:58.340
First, I want to display the duration, so the icon should fit that

85
00:06:58.400 --> 00:07:00.240
and for this, we can actually use

86
00:07:00.260 --> 00:07:03.520
Icons.schedule which displays a little clock.

87
00:07:03.770 --> 00:07:05.130
So that will be the icon,

88
00:07:05.240 --> 00:07:11.150
now I'll also add a SizedBox between the icon and the text to have some spacing with a width of let's

89
00:07:11.150 --> 00:07:13.130
say 6

90
00:07:13.250 --> 00:07:18.830
and then the text here will be the duration. The duration for every meal is just a number

91
00:07:19.010 --> 00:07:23.720
and in this app here, that will simply be the duration in minutes.

92
00:07:23.720 --> 00:07:30.800
So here, I want to output, with string interpolation so with this dollar sign, duration

93
00:07:30.800 --> 00:07:37.700
and if you only have one variable you're referring to or one property, you don't even need the curly braces

94
00:07:37.910 --> 00:07:43.880
and then to also give the user some idea of what this number means, I'll add min for minutes after this.

95
00:07:45.040 --> 00:07:52.160
If we save that, then we see this below our images and titles,

96
00:07:52.250 --> 00:07:54.050
that's exactly what I want.

97
00:07:54.380 --> 00:07:58.130
Now besides the duration, we'll have two other pieces of information.

98
00:07:58.220 --> 00:08:04.700
So in that outer row here, I'll then basically copy this row which makes up a single information item

99
00:08:04.700 --> 00:08:05.560
here in that row

100
00:08:05.630 --> 00:08:09.860
and yes, you could therefore also extract this into a widget if you wanted to.

101
00:08:09.890 --> 00:08:12.380
So here, let's repeat that

102
00:08:12.470 --> 00:08:16.960
and the second piece of information I want to output here is the complexity. For that,

103
00:08:16.960 --> 00:08:19.730
I think the work icon is is a good fit,

104
00:08:19.730 --> 00:08:23.330
of course you can explore other icons if you have another icon you prefer

105
00:08:24.060 --> 00:08:26.570
and now the question is, what is the text here?

106
00:08:26.570 --> 00:08:33.490
Because remember that complexity actually is an enum and these labels here are not strings,

107
00:08:33.500 --> 00:08:36.020
this is not text we can output in our app,

108
00:08:36.080 --> 00:08:39.140
these are just human readable labels for us as a developer,

109
00:08:39.200 --> 00:08:43.179
the actual value stored behind that is a number.

110
00:08:43.309 --> 00:08:48.500
Now I certainly don't want to output a number here though, I want to output a text that makes sense to

111
00:08:48.500 --> 00:08:49.550
humans.

112
00:08:49.550 --> 00:08:55.340
So now we need to translate our enum labels here into text which we can output

113
00:08:55.520 --> 00:09:03.000
and for this, I'll add a getter in my meal item class here, which will return a string because I want

114
00:09:03.000 --> 00:09:09.060
to have the text which I output, then we need the get keyword to create a getter and I'll name it complexity

115
00:09:09.060 --> 00:09:15.780
text because that is in the end what this getter derives, what it gives us. In here, we can now have a

116
00:09:15.780 --> 00:09:23.550
couple of if statements to check if complexity is simple and then we output text a, if it is challenging

117
00:09:23.700 --> 00:09:31.200
then we would output another text and so on. So we could have if statements like complexity, is it equal

118
00:09:31.560 --> 00:09:34.080
to Complexity.Simple.

119
00:09:34.170 --> 00:09:39.690
This is how we use an enum in a condition, we access the value with the dot notation and keep in mind,

120
00:09:39.690 --> 00:09:41.630
complexity here is of that type,

121
00:09:41.640 --> 00:09:44.670
so this stores such an enum value, such a number.

122
00:09:44.670 --> 00:09:50.370
So here we compare if that storage complexity is equal to this complexity and if this is the case, we

123
00:09:50.370 --> 00:09:54.150
could return simple as a text here.

124
00:09:54.180 --> 00:09:58.140
Now I say could because that is a perfectly fine approach of doing it

125
00:09:58.290 --> 00:10:04.080
but if you have multiple such if statements which you would have here, you would have one for challenging

126
00:10:04.290 --> 00:10:07.040
and one for hard and then have different texts here, 

127
00:10:07.530 --> 00:10:14.130
if that's what you have, then Dart also gives you a different language feature which we haven't used

128
00:10:14.130 --> 00:10:19.920
before, the switch statement. Switch statements also exist in other programming languages,

129
00:10:19.920 --> 00:10:26.250
they're not exclusive to Dart and they allow you to combine multiple alternative if statements into

130
00:10:26.250 --> 00:10:32.690
one single statement. For switch, you first of all define the value you want to analyze,

131
00:10:32.690 --> 00:10:34.940
so in our case that's the complexity variable,

132
00:10:34.940 --> 00:10:41.120
that's the part which we compared to other values in our if statement. Then you have curly braces and now

133
00:10:41.120 --> 00:10:45.020
you define multiple cases with the case keyword.

134
00:10:45.020 --> 00:10:48.520
Now these cases are simply the different values complexity could have,

135
00:10:48.980 --> 00:10:57.410
so one case is Complexity.Simple. If complexity is of type Complexity.Simple, then with a colon, we

136
00:10:57.410 --> 00:11:02.230
execute the code here below that case and that colon is important.

137
00:11:02.360 --> 00:11:09.020
So then we could return simple here and even though this code will not run, it's also typical that

138
00:11:09.020 --> 00:11:14.780
you add a break statement here. You need it if you don't return here, this avoids that other cases

139
00:11:14.780 --> 00:11:16.050
are hit as well

140
00:11:16.280 --> 00:11:20.990
but if you return, it's technically not required since you typically add it in switch case statements

141
00:11:21.020 --> 00:11:23.060
though, I'll add it here too.

142
00:11:23.240 --> 00:11:30.410
And now you can add your other cases like Complexity.Challenging, there I want to return challenging

143
00:11:32.170 --> 00:11:42.260
and also break thereafter and then also have a case of hard here, where in that case after the colon,

144
00:11:42.500 --> 00:11:49.790
I return hard and also break here and then you also typically provide a default case

145
00:11:49.820 --> 00:11:55.550
which is triggered if complexity has a value you're not covering in one of your cases and the default

146
00:11:55.550 --> 00:12:00.140
case here simply could be unknown or anything like that.

147
00:12:00.170 --> 00:12:04.910
Now in case the break statement is not totally clear, again when you're returning you don't need it because

148
00:12:04.910 --> 00:12:10.400
that will quit code execution here anyway and will not go to the next lines. If you would not return

149
00:12:10.400 --> 00:12:14.230
anything but do some calculation, update some other property,

150
00:12:14.240 --> 00:12:19.580
anything like that, then without break, another case could be entered as well,

151
00:12:19.580 --> 00:12:23.110
for example the default case could be triggered as well

152
00:12:23.240 --> 00:12:26.400
even though you already had this concrete case here.

153
00:12:26.420 --> 00:12:32.600
So to avoid such strange effects, you add break to make sure that no other case is considered in this

154
00:12:32.660 --> 00:12:34.130
switch case statement,

155
00:12:34.190 --> 00:12:35.290
again it's redundant

156
00:12:35.300 --> 00:12:42.560
if you're returning. So now we have ComplexityText here and that will just be one of these strings there

157
00:12:42.740 --> 00:12:47.760
and therefore now, we can use ComplexityText as a text value down there,

158
00:12:47.810 --> 00:12:55.130
so simply output ComplexityText. With that if we save this, we also see the ComplexityText here

159
00:12:55.310 --> 00:12:57.650
but now we also see a problem.

160
00:12:57.650 --> 00:13:05.740
These items sit way too close next to each other. Now a solution is to go to our row which holds all

161
00:13:05.740 --> 00:13:16.190
these items and add main axis alignment of main axis alignment, which by the way also is an enum

162
00:13:16.260 --> 00:13:23.100
built into Flutter of course, .spaceAround to use this enum value because now the items are positioned

163
00:13:23.100 --> 00:13:29.250
such that empty space in the row, in that overall row below our image is split up evenly.

164
00:13:29.250 --> 00:13:35.620
Side note, you now also see the bottom rounded corners because now the image is not overlapping them anymore.

165
00:13:35.710 --> 00:13:43.990
So with that, let's add our last item here, our last information item and there I want to output the affordability

166
00:13:43.990 --> 00:13:44.820
of this meal. 

167
00:13:45.640 --> 00:13:54.010
So a fitting icon could be attach_money which is this money symbol and then for outputting a text

168
00:13:54.010 --> 00:14:00.550
here, we again need to transform our enum value into some human readable text and therefore, I will create

169
00:14:00.550 --> 00:14:09.930
another getter here, get AffordabilityText and basically do the same as in the ComplexityText getter,

170
00:14:10.090 --> 00:14:16.600
take this switch statement but now of course switch on the affordability and then compare this

171
00:14:19.790 --> 00:14:28.130
to Affordability.Affordable and maybe output affordable here. Then here we could have

172
00:14:28.130 --> 00:14:29.570
Affordability.Pricey

173
00:14:33.150 --> 00:14:43.950
and output pricey down there and also Affordability.Luxurious and output expensive maybe, something

174
00:14:43.950 --> 00:14:50.010
like this. So of course the text you returned doesn't have to match your label name, also add a colon

175
00:14:50.010 --> 00:14:57.750
up here and with that, we can use the AffordabilityText in that third information item here, like that.

176
00:14:59.830 --> 00:15:05.740
So this looks pretty nice to me, I'd say these are decent meals we're outputting here in our list. The

177
00:15:05.740 --> 00:15:12.250
next step is to go back to navigation and make them clickable, so that on a tap onto these items, we actually

178
00:15:12.250 --> 00:15:18.040
do go to the detail page for this meal where we then see it full screen and we also see all the steps

179
00:15:18.040 --> 00:15:19.060
and ingredients.

