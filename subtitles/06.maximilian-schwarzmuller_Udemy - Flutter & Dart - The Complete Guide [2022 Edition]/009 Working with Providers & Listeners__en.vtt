WEBVTT
1
00:00:02.340 --> 00:00:10.110
If you search for flutter provider, you should end up on this page here on PUP, not death with the

2
00:00:10.110 --> 00:00:11.100
provider package.

3
00:00:11.490 --> 00:00:14.490
And there you find some documentation about how to use it.

4
00:00:14.520 --> 00:00:15.630
Definitely interesting.

5
00:00:15.930 --> 00:00:18.090
But of course, that's not what I will do to cover with you.

6
00:00:18.150 --> 00:00:19.260
We will start using it.

7
00:00:20.040 --> 00:00:25.440
And for that, you, first of all have to install it, which you do by simply copying this entry here

8
00:00:25.650 --> 00:00:27.930
and installing tap on the package page.

9
00:00:28.940 --> 00:00:35.780
Now, go back to your project there in the pub Speckled YAML file at this entry below your plodder dependancy

10
00:00:35.780 --> 00:00:39.140
here and make sure the indentation is correct because indentation matters.

11
00:00:39.860 --> 00:00:43.940
Once you save that file, flutter should automatically go ahead and fetch these packages.

12
00:00:44.150 --> 00:00:51.260
If it doesn't do that, you can run flutter packages, get in your terminal, navigated into this project

13
00:00:51.260 --> 00:00:54.770
folder with that, the provider packages installed.

14
00:00:54.770 --> 00:00:57.440
And of course, the question is now, how do we use it?

15
00:00:58.490 --> 00:01:04.970
Now, a provider in the end needs to be defined with the help of a class and you then build a new provider

16
00:01:04.970 --> 00:01:06.960
based on the class definition.

17
00:01:07.700 --> 00:01:14.330
Now, a provider or diskless you create is also often referred to as a model because you all the kind

18
00:01:14.330 --> 00:01:18.230
of model your data there, the data in your app, which then changes.

19
00:01:18.890 --> 00:01:26.240
Now, I'm already using the term model here, though, and I'm using it here to define my my data class

20
00:01:26.240 --> 00:01:28.940
as my data types, which I have like a product here.

21
00:01:29.270 --> 00:01:35.630
And that is not really something I want to provide because a single product is just a single object

22
00:01:35.630 --> 00:01:36.110
I use.

23
00:01:36.500 --> 00:01:42.710
What I want to manage here with the state management solution is something bigger, a list of all my

24
00:01:42.710 --> 00:01:44.630
products, not just a single product.

25
00:01:45.320 --> 00:01:50.120
Now, therefore, I will create a new subfolder here and name it providers to set up my classes that

26
00:01:50.120 --> 00:01:58.010
define these bigger state management definitions, these bigger data definitions for my app, so to

27
00:01:58.010 --> 00:02:02.150
say, the data, which also changes over time and which I want to reflect.

28
00:02:03.130 --> 00:02:05.980
So here in providers, I'll add a new file.

29
00:02:08.699 --> 00:02:09.660
And named at.

30
00:02:10.740 --> 00:02:17.730
Products, dot, dart, you can also name it products underscore provider if you want to make this differentiation

31
00:02:17.730 --> 00:02:18.340
really clear.

32
00:02:19.110 --> 00:02:21.720
Now in the products dot dart file.

33
00:02:23.350 --> 00:02:30.400
You define a new class and all name that class products, however, now here you don't just have a class

34
00:02:30.400 --> 00:02:30.960
like this.

35
00:02:31.210 --> 00:02:33.070
Instead, you need to add a mix in.

36
00:02:33.310 --> 00:02:38.910
I mentioned mix ins early and of course, already you add makes sense by adding the with keyword.

37
00:02:38.920 --> 00:02:45.230
And then the name of the mix in a mix in is a bit like extending Navarra class.

38
00:02:45.490 --> 00:02:51.970
The core difference is that you simply merge some properties or some methods into your existing class,

39
00:02:52.240 --> 00:02:57.920
but you don't return your class into an instance of that inherited class.

40
00:02:57.970 --> 00:03:01.210
It's a bit like inheritance lite, so to say.

41
00:03:01.990 --> 00:03:08.920
And the class we need to mix it here is to change notifier class, which is built into flatter and which

42
00:03:08.920 --> 00:03:12.820
you enabled by importing the flatter material dard package here.

43
00:03:13.660 --> 00:03:20.320
Change Notifier is basically kind of related to the inherited widget which the provider package uses

44
00:03:20.320 --> 00:03:25.780
behind the scenes and inherited widget, whilst we won't work with it directly, is simply a widget

45
00:03:25.780 --> 00:03:29.410
and flutter, which allows us to establish behind the scenes communication.

46
00:03:29.410 --> 00:03:33.400
Tunnell's with the help of the context object which we're getting in every widget.

47
00:03:34.330 --> 00:03:42.460
So this product class now mixes in the changed notifier here and you'll see why we add this mix in in

48
00:03:42.460 --> 00:03:43.030
a second.

49
00:03:44.170 --> 00:03:46.960
Now, you can define whatever you want at this class.

50
00:03:47.200 --> 00:03:51.600
And here I want to define a list of products.

51
00:03:52.420 --> 00:03:55.240
So I'll first of all, import.

52
00:03:56.650 --> 00:04:05.380
My product model whips only with one slash year, and I'll store a list of products here in the products

53
00:04:05.380 --> 00:04:05.860
class.

54
00:04:07.150 --> 00:04:13.750
So I'll have a list which will hold product data in the end, and I'll name does underscore items,

55
00:04:13.750 --> 00:04:15.900
you could also just name it items.

56
00:04:15.910 --> 00:04:21.760
I just want to make it really clear that this property here should never be directly accessible from

57
00:04:21.760 --> 00:04:22.410
outside.

58
00:04:22.420 --> 00:04:24.870
And I'll also show why do this in a second.

59
00:04:25.390 --> 00:04:31.930
So I have my underscore items in there and that's not a final list because it will change over time.

60
00:04:32.620 --> 00:04:37.660
And with that, I mean the value here in the items property, not just the items in the list, because

61
00:04:37.660 --> 00:04:40.840
as you learned, you can also change items in the list that is final.

62
00:04:40.840 --> 00:04:44.470
But here I really want to change the value that's stored in the property itself.

63
00:04:45.220 --> 00:04:50.590
Before we change anything, however, let's actually make sure we can fetch these items.

64
00:04:50.590 --> 00:04:56.080
And since I turned this into a private property by adding the underscore, which means it can't be accessed

65
00:04:56.080 --> 00:05:03.370
from outside, I'll add a letter here which will return a list of products and then it's a gater by

66
00:05:03.370 --> 00:05:07.180
adding to get keyword, which is named items without the underscore.

67
00:05:07.510 --> 00:05:10.930
And in there I return my items, but not like this.

68
00:05:10.940 --> 00:05:17.530
Instead I return a copy of them, which I do buy wrapping items here into square brackets and then by

69
00:05:17.530 --> 00:05:18.830
using the spread operator.

70
00:05:19.330 --> 00:05:20.910
Now why am I doing this?

71
00:05:21.700 --> 00:05:27.190
You have to remember that all these objects and flutter were entered are reference types.

72
00:05:27.310 --> 00:05:34.990
If I would return my items list here, then I would return a pointer at this object in memory.

73
00:05:35.020 --> 00:05:35.400
Right.

74
00:05:35.410 --> 00:05:37.300
That's what you learned earlier in the course.

75
00:05:37.780 --> 00:05:43.420
And that means that anywhere in the code where I get access to my products class here and where I then

76
00:05:43.420 --> 00:05:50.020
get access to the items, I get that address and therefore I get direct access to this list of items

77
00:05:50.020 --> 00:05:51.520
itself in memory.

78
00:05:51.760 --> 00:05:57.250
And hence I could start editing this list of items from anywhere else in the app where I tap into this

79
00:05:57.250 --> 00:05:58.150
product class.

80
00:05:58.990 --> 00:06:06.910
I don't want to do that and I don't want to do that because when my products change, I actually have

81
00:06:06.910 --> 00:06:08.680
to call a certain method.

82
00:06:09.830 --> 00:06:15.470
To tell all the listeners of this provider, remember to slide, you have the provider and you have

83
00:06:15.470 --> 00:06:17.480
listeners, that new data is available.

84
00:06:17.930 --> 00:06:24.030
So let's say we had an ad product method here which returns nothing and which for the moment doesn't

85
00:06:24.030 --> 00:06:24.910
take an argument.

86
00:06:25.580 --> 00:06:29.870
And then here we would simply add something to our items.

87
00:06:30.530 --> 00:06:35.810
Then, of course, we typically would have the problem that if we change data here in this class, how

88
00:06:35.840 --> 00:06:39.920
would we let all our widgets or the widgets that are interested know about this?

89
00:06:40.190 --> 00:06:46.820
And that's why we had this change notifier, because that gives us access to a notify listeners method,

90
00:06:47.210 --> 00:06:52.850
because always keep in mind, diskless will soon be used by the provider package, which uses inherited

91
00:06:52.850 --> 00:06:58.790
widget behind the scenes, and therefore it will establish a communication channel between diskless

92
00:06:58.790 --> 00:07:00.680
and widgets that are interested for us.

93
00:07:01.040 --> 00:07:07.610
And we need to let those widgets know about updates that we did with not notify listeners so that Indie's

94
00:07:07.610 --> 00:07:13.700
widgets, which are listening to disclose and to changes in this class, are then rebuilt and do actually

95
00:07:13.700 --> 00:07:15.340
get the latest data we have in there.

96
00:07:15.860 --> 00:07:21.500
And that's why I return a copy so that we can directly edit our items here from anywhere else in the

97
00:07:21.500 --> 00:07:27.080
app, because if we want to do that, we could not call notify listeners because we can only do this

98
00:07:27.080 --> 00:07:33.050
from inside this class, because there we added this mix in and hence our widgets that depend on the

99
00:07:33.050 --> 00:07:36.970
data and here would not rebuild correctly because they wouldn't know about the change.

100
00:07:37.520 --> 00:07:42.650
So we have to make sure that we only change data from inside the class because then we can trigger notify

101
00:07:42.650 --> 00:07:50.030
listeners and all the other parts of the app that are listening to this class will then get rebuilt.

102
00:07:50.810 --> 00:07:56.780
This might not be entirely clear yet because we're not listening yet, but that's the general idea of

103
00:07:56.780 --> 00:07:58.110
why I do it like this.

104
00:07:58.130 --> 00:08:02.090
And for the moment, I'll comment this out, because for the moment, we don't really know how to add

105
00:08:02.090 --> 00:08:02.660
products.

106
00:08:03.290 --> 00:08:08.240
But that's the idea why we have changed notifier and why we need to set up and why I return a copier.

107
00:08:08.810 --> 00:08:13.130
But we've said let's start listening and before we can start listening, we, first of all, need to

108
00:08:13.130 --> 00:08:14.030
provide this.

109
00:08:14.420 --> 00:08:21.620
Thus far we have to class, but now we need to turn this class here into a data container, into a provider

110
00:08:21.620 --> 00:08:28.900
which we can use in our app and in the different parts of our app and dare the products are important.

111
00:08:28.910 --> 00:08:32.690
A couple of places of this app, of course, they are important.

112
00:08:33.809 --> 00:08:39.690
In the product detail and the product overview screen for the moment, that means that I want to provide

113
00:08:39.690 --> 00:08:44.340
this in the main dart follow because that's important and that's something you have to know if the provider

114
00:08:44.340 --> 00:08:50.670
package, you need to provide a class which you then want to use from different widgets in your app

115
00:08:51.090 --> 00:08:56.880
at the highest possible point of all these widgets which will be interested, which means that if the

116
00:08:56.880 --> 00:09:02.460
product overview and the product details green are interested in the data, I have to provide the class

117
00:09:02.460 --> 00:09:07.170
in a widget that is above them, which in my case is this my app widget, my rude widget.

118
00:09:07.890 --> 00:09:14.190
If I had data which is only important to the product item widget, that I could provide that data in

119
00:09:14.190 --> 00:09:17.940
the product overview widget because that is where I create the product item.

120
00:09:18.120 --> 00:09:20.730
No need to then manage it in the main darte file.

121
00:09:21.600 --> 00:09:27.090
But here, since I have widgets which are registered on the root level, I need to also provide my data

122
00:09:27.090 --> 00:09:27.870
on the root level.

123
00:09:28.050 --> 00:09:33.600
By the way, that will not mean that the entire app will rebuild whenever something changes in the data

124
00:09:33.600 --> 00:09:33.760
though.

125
00:09:33.780 --> 00:09:35.050
But more than that in a second.

126
00:09:35.850 --> 00:09:41.670
So I want to provide my data here and therefore let's import our provider or disclose.

127
00:09:41.670 --> 00:09:49.230
We just worked on from providers and data from the product standard file and now we can set up a provider

128
00:09:49.230 --> 00:09:49.480
here.

129
00:09:49.620 --> 00:09:53.220
Now, how do we register a provider in our app then?

130
00:09:54.130 --> 00:09:59.740
To register a provider, you need to import something from that provider package because there is a

131
00:09:59.740 --> 00:10:01.390
reason why we added it after all.

132
00:10:01.390 --> 00:10:09.280
Right, so import provider D'Arte from the provider package and now here in your Myalup widget instead

133
00:10:09.280 --> 00:10:13.960
of returning material app, will actually wrap this into another widget.

134
00:10:15.000 --> 00:10:17.970
So rap with new widget and new widget.

135
00:10:18.900 --> 00:10:25.590
Is now a provider, and there you've got a couple of providers available, the most common provider,

136
00:10:25.740 --> 00:10:29.880
which I would recommend using, is to change notifier.

137
00:10:30.940 --> 00:10:37.300
Provider, and that's a clause provided by the provider package, which we installed, it allows us

138
00:10:37.300 --> 00:10:44.500
to register a class to which you can then listen in child widgets and whenever that class updates the

139
00:10:44.500 --> 00:10:50.800
widgets which are listening, and only these not all child widgets, only child widgets which are listening,

140
00:10:50.800 --> 00:10:51.590
will rebuild.

141
00:10:52.540 --> 00:10:53.710
So here.

142
00:10:55.710 --> 00:10:59.520
You then have to provide a builder method.

143
00:11:00.500 --> 00:11:09.350
That builder method will receive a built context, and it should return a new instance of your provided

144
00:11:09.350 --> 00:11:09.790
class.

145
00:11:09.830 --> 00:11:12.890
So not a widget, a new instance of your provided class.

146
00:11:12.950 --> 00:11:18.270
So in our case of the products class here, so here I simply return products like this.

147
00:11:18.890 --> 00:11:25.310
Now, one important note at this point, though, the builder method here is the right method to choose

148
00:11:25.550 --> 00:11:29.930
if you are using Worsham free of the provider package.

149
00:11:30.020 --> 00:11:36.530
So if you have, for example, this dependancy in your pop speckled YAML file, if you are using the

150
00:11:36.530 --> 00:11:41.300
latest version or specifically a version greater than or equal to four.

151
00:11:41.330 --> 00:11:47.960
So if you, for example, have this entry in your perspective YAML file, then this will not work with

152
00:11:47.960 --> 00:11:49.280
Builder instead.

153
00:11:49.280 --> 00:11:50.600
Then it's create.

154
00:11:51.050 --> 00:11:55.310
And just like that, you simply have to create instead of builder in that case.

155
00:11:56.210 --> 00:12:02.810
Now, I did record this cause with version three, which is why you will see Builder in this video and

156
00:12:02.810 --> 00:12:07.540
the next videos and you can absolutely use version free of the provider package.

157
00:12:07.700 --> 00:12:12.860
All you need to do is have this extra year in your perspective YAML file.

158
00:12:12.890 --> 00:12:18.890
For example, if you have this, you can just follow along with Builder, but if you want to use the

159
00:12:18.890 --> 00:12:21.370
latest version, then you have to use create here.

160
00:12:21.380 --> 00:12:25.420
So if you have version four or higher, then you need to create here.

161
00:12:25.670 --> 00:12:28.970
So don't be confused if you see something different in the next lecture's.

162
00:12:28.970 --> 00:12:31.100
That's just because I used a different version.

163
00:12:31.340 --> 00:12:37.270
Now, one thing that does not change is how the provider package works, what it does and so on.

164
00:12:37.280 --> 00:12:38.780
So that's all the same.

165
00:12:38.810 --> 00:12:41.280
Only this part here needs adjustment.

166
00:12:41.420 --> 00:12:43.190
Just wanted to point this out here.

167
00:12:44.910 --> 00:12:50.670
Now, we set up a provider which provides an instance and one in the same instance of this product,

168
00:12:50.670 --> 00:12:57.440
class to all child widgets, so material upon all its children, which are interested.

169
00:12:57.810 --> 00:13:03.060
So all child widgets can now set up a listener to this instance of this class, to this same instance,

170
00:13:03.060 --> 00:13:05.490
the same object of this class.

171
00:13:05.490 --> 00:13:10.770
And whenever we change something in the class and we then call notify listeners, the widgets which

172
00:13:10.770 --> 00:13:12.810
are listening will be rebuilt.

173
00:13:14.260 --> 00:13:18.310
And that's very important, only the widgets which are listening, not the whole material.

174
00:13:18.790 --> 00:13:24.160
So just because something changes in here will not rebuild material app, it will only rebuild widgets,

175
00:13:24.280 --> 00:13:25.330
which are listening.

176
00:13:26.730 --> 00:13:28.890
Now, where is the place where we could be interested?

177
00:13:29.220 --> 00:13:31.020
Well, the products overview, they're.

178
00:13:31.960 --> 00:13:39.310
Here in the products review, I have my grid view builder, so I need my products here now, actually,

179
00:13:39.310 --> 00:13:45.430
you could even argue to not unnecessarily rebuild the APA, which doesn't need any product data that

180
00:13:45.430 --> 00:13:46.420
we outsource.

181
00:13:46.420 --> 00:13:53.890
Does grid view builder into a separate widget so we can wrap this used to refactoring tool and use extract

182
00:13:53.890 --> 00:13:57.280
widget here and give us a name of products gret.

183
00:13:57.280 --> 00:14:00.910
Maybe now we have that new widget which is created for us.

184
00:14:01.770 --> 00:14:07.950
And that should actually not received the product as an argument, but get it itself by actually using

185
00:14:07.950 --> 00:14:08.910
our provider.

186
00:14:10.190 --> 00:14:14.190
Now, first of all, I'll move my product cred here into a new file.

187
00:14:14.480 --> 00:14:18.890
Technically, you don't need to do that, but I rather follow that convention.

188
00:14:19.690 --> 00:14:27.280
So when products grit foul in there, of course, you need to import your material, dart, fall from

189
00:14:27.280 --> 00:14:32.860
flutter and also import the product model because we're referring to it here.

190
00:14:34.280 --> 00:14:39.800
And that's important, the product model, so our normal model in the models folder, not the products

191
00:14:39.800 --> 00:14:42.410
file we just worked on, but the normal model here.

192
00:14:43.970 --> 00:14:49.430
I also need to reference product item in here because I'm using it, so let's import.

193
00:14:51.260 --> 00:14:52.670
Product item.

194
00:14:53.720 --> 00:14:59.240
In the products overview screen, we now don't need that product item import anymore.

195
00:14:59.990 --> 00:15:07.310
I also want to grab the dummy products we have in here and moved them away out of that widget into the

196
00:15:07.310 --> 00:15:13.460
product start fault in the provider's folder, because, dear, we have these products and I want to

197
00:15:13.460 --> 00:15:19.100
start with some dummy products for now so that in the products overview screen, we don't need that

198
00:15:19.100 --> 00:15:19.570
anymore.

199
00:15:19.940 --> 00:15:22.910
We don't need the product model import anymore.

200
00:15:22.910 --> 00:15:25.760
Therefore we just need to import that new.

201
00:15:27.590 --> 00:15:32.510
Products grade from the widgets folder, so products start.

202
00:15:34.650 --> 00:15:37.950
And we don't need a new keyword, so products grade.

203
00:15:39.810 --> 00:15:48.090
Products grid is what I should import, and now products grid is created here in the products grid widget

204
00:15:48.900 --> 00:15:51.450
don't need that constructor or anything off that.

205
00:15:51.810 --> 00:15:55.290
I want to fetch all my data in here instead by setting up such a listener.

206
00:15:56.120 --> 00:16:02.930
And for dad and to build method, we can now use another feature from the provider package and hence

207
00:16:02.930 --> 00:16:04.700
let's import package.

208
00:16:06.140 --> 00:16:13.440
Provider provider here and that our feature is provider of context.

209
00:16:13.880 --> 00:16:18.890
Now, we've seen that off context thing a couple of times throughout the course already with the theme

210
00:16:18.890 --> 00:16:20.740
with the navigator and so on.

211
00:16:21.260 --> 00:16:26.300
I've already explained there that this sets up a direct communication channel behind the scenes.

212
00:16:26.720 --> 00:16:33.590
And this year, the provider package allows us to set up a connection to one of the provided classes.

213
00:16:33.770 --> 00:16:40.610
And therefore, you can only use provider off in a widget which has some direct or indirect parranda

214
00:16:40.610 --> 00:16:43.390
widget which set up a provider, which we did here.

215
00:16:43.670 --> 00:16:49.130
So that needs to be set up first, that provider, but then we can listen with provider off to changes

216
00:16:49.130 --> 00:16:53.510
in that provided class or in that provided object to be precise.

217
00:16:53.960 --> 00:16:59.270
And this build method of this widget where I'm using provider off and only this build method and of

218
00:16:59.270 --> 00:17:07.790
course all the child widgets will rebuild whenever the object I'm listening to changes the build method

219
00:17:07.790 --> 00:17:09.500
of a parent widget of products.

220
00:17:09.500 --> 00:17:14.569
Gret, like the product overview here, will not rerun because we're not setting up a listener here.

221
00:17:14.750 --> 00:17:16.010
And that's of course, important.

222
00:17:16.220 --> 00:17:19.160
Not the entire widget tree does rebuild if data changes.

223
00:17:19.369 --> 00:17:21.010
Only the widget where I'm listening.

224
00:17:21.140 --> 00:17:26.510
And of course, then because this bill, it runs all the child widgets are rebuilt to, that's the normal

225
00:17:26.510 --> 00:17:27.050
behavior.

226
00:17:28.010 --> 00:17:33.530
The question, though, is how do we set up a connection between this widget and then this specific

227
00:17:33.530 --> 00:17:34.140
provider?

228
00:17:34.340 --> 00:17:39.320
Right now we only have one provider, but actually, as you will later also see, you can have more

229
00:17:39.320 --> 00:17:40.850
than one provider in your app.

230
00:17:41.510 --> 00:17:47.120
So I want to set up a listen to my provider, which actually provides me an instance of my products

231
00:17:47.120 --> 00:17:47.600
class.

232
00:17:50.440 --> 00:17:56.740
You tell Slotter or to provide a package that you're interested in an instance of that products class

233
00:17:57.160 --> 00:18:03.460
by taking advantage of the fact that the off method here on the provider class provided by the provider

234
00:18:03.460 --> 00:18:09.460
package is a generic method, which means you can add these Anglet brackets to let it know to which

235
00:18:09.460 --> 00:18:12.280
type of data you actually want to listen to.

236
00:18:13.030 --> 00:18:18.840
So here I want to listen to changes in products and now it's import that now has to be products.

237
00:18:19.240 --> 00:18:20.740
So here we import.

238
00:18:24.090 --> 00:18:27.420
From the providers folder there from the product Start Fall.

239
00:18:28.490 --> 00:18:34.010
With this piece of information, we're telling the provider package that we want to establish a direct

240
00:18:34.010 --> 00:18:41.030
communication channel to the provided instance of the products class and now the provider package goes

241
00:18:41.030 --> 00:18:46.550
ahead and looks at the parent of products caret the products overview screen, and there it finds no

242
00:18:46.550 --> 00:18:47.080
provider.

243
00:18:47.570 --> 00:18:51.070
So it goes ahead and has a look at the parent of the product or review screen.

244
00:18:51.380 --> 00:18:56.060
And that's, of course, are my app widget because that's where I'm instantiating the products overview

245
00:18:56.060 --> 00:18:56.450
screen.

246
00:18:56.870 --> 00:19:00.890
And there if it goes up the widget tree, it indeed defines a provider.

247
00:19:01.280 --> 00:19:07.010
And in that provider, thankfully, it finds a provider which thankfully provides an instance of type

248
00:19:07.010 --> 00:19:07.730
products.

249
00:19:08.210 --> 00:19:12.710
If we would create a different class here, then setting up this listener, of course, would fail.

250
00:19:13.340 --> 00:19:21.170
But since we do provide a new products object here, we can tap into it and listen to it here with provider

251
00:19:21.170 --> 00:19:22.670
of products context.

252
00:19:23.630 --> 00:19:26.990
So this here gives us access to this product object.

253
00:19:27.980 --> 00:19:33.860
So named as products data, and that's not our list of products, but to the object based on this class,

254
00:19:33.860 --> 00:19:37.610
and this will then have items, Geter, because we added it here.

255
00:19:38.450 --> 00:19:42.110
So the products we actually work with are then.

256
00:19:44.590 --> 00:19:47.200
Simply fetch from products data.

257
00:19:49.060 --> 00:19:56.770
By accessing items like this, and this now gives us a list of products and since type inference works

258
00:19:56.770 --> 00:20:02.620
here, we actually don't need a product model imported because we don't need the product itself here

259
00:20:02.620 --> 00:20:03.240
in the products.

260
00:20:04.270 --> 00:20:09.820
With that, we now get our products here and we can now use the products here to determine the length

261
00:20:09.820 --> 00:20:14.310
and then forward that data to the product item in the product item.

262
00:20:14.320 --> 00:20:19.270
As I explained earlier, in this module, I'm fine with getting the state as an argument because this

263
00:20:19.270 --> 00:20:23.920
is data which does widget itself needs, which we don't just get to forwarded, but which we want to

264
00:20:23.920 --> 00:20:25.030
output in that widget.

265
00:20:25.150 --> 00:20:27.280
And therefore it's fine to accept it like this.

266
00:20:27.290 --> 00:20:33.160
It's actually recommended to get it like this because then it's very clear to see which configuration

267
00:20:33.170 --> 00:20:35.050
does which it needs to work correctly.

268
00:20:35.320 --> 00:20:40.750
And you can drop this widget anywhere into your app where, you know, you get this data no matter if

269
00:20:40.750 --> 00:20:42.490
you have a provider above it or not.

270
00:20:43.420 --> 00:20:47.140
So with that was a lot of talking, but very important.

271
00:20:47.590 --> 00:20:49.420
Let's do a full restart now.

272
00:20:50.140 --> 00:20:57.130
And in our app, we now still see our items here, but now we're actually loading them with the help

273
00:20:57.130 --> 00:20:58.420
of our provider class.

274
00:20:59.110 --> 00:21:06.250
And the advantage, if not already evident, will become more and more clear the more complex our application

275
00:21:06.250 --> 00:21:06.760
gets.

