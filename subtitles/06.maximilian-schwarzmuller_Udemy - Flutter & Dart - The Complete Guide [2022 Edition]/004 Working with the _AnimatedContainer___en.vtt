WEBVTT
1
00:00:02.220 --> 00:00:07.230
Animated builders should be your go-to widget if you want to animate something on the screen, some part

2
00:00:07.230 --> 00:00:12.520
of your widget tree because it's much more efficient than manually controlling it with state and

3
00:00:12.520 --> 00:00:14.310
re-rendering the entire widget tree

4
00:00:14.430 --> 00:00:20.430
as I just explained in the last lecture. But for common things like changing the container, dimensions

5
00:00:20.430 --> 00:00:26.940
or changing a container look, in general Flutter has an even better built-in widget and that's the

6
00:00:27.630 --> 00:00:29.360
animated container. So

7
00:00:29.370 --> 00:00:31.030
let's use that instead of container and

8
00:00:31.030 --> 00:00:32.930
let's therefore get rid of the animated builder,

9
00:00:32.940 --> 00:00:37.050
just wanted to show this in cases where you have no better built-in widget

10
00:00:37.050 --> 00:00:38.180
but here we do.

11
00:00:38.250 --> 00:00:40.810
So let's get rid of the animated builder here,

12
00:00:40.820 --> 00:00:43.240
have the animated container therefore. Now

13
00:00:43.230 --> 00:00:47.280
the child of our container hence is the form again

14
00:00:47.280 --> 00:00:53.460
and with that, the question of course is how does animated container work? Animated container has all

15
00:00:53.460 --> 00:01:00.630
the heavy lifting built-in, so of efficiently running an animation and it automatically transitions

16
00:01:00.630 --> 00:01:03.750
between changes in its configuration.

17
00:01:03.780 --> 00:01:13.760
So if you go back to the old height setup here where we actually switch this when the auth mode changes and

18
00:01:14.240 --> 00:01:17.910
we do the same here for the constraints of course, so

19
00:01:17.930 --> 00:01:23.750
let me set min height here also to this dynamically calculated height, when you go back to that, animated

20
00:01:23.750 --> 00:01:29.060
container will not do the same the normal container does and make a hard switch between these values

21
00:01:29.300 --> 00:01:34.580
but instead, it will automatically detect that that value changed and will smoothly animate between

22
00:01:34.580 --> 00:01:39.970
the values and that does not just work for height or width but for things like padding and so on as well.

23
00:01:41.600 --> 00:01:46.310
Now since the animated container controls the entire animation, you don't even need your own controller

24
00:01:46.310 --> 00:01:50.150
there because it kicks off the animation and reverses it on its own,

25
00:01:50.150 --> 00:01:55.610
basically whenever these values change and you just need to tell it over which duration it should animate,

26
00:01:55.610 --> 00:02:02.120
so you have to set up a duration and here I'll again go for 300 milliseconds and you can also

27
00:02:02.120 --> 00:02:08.509
configure a curve and here for example, you could use easeIn, so to configure how that animation should

28
00:02:08.509 --> 00:02:10.139
look like and how long it should take.

29
00:02:10.729 --> 00:02:17.240
So for this you don't need the animation controller which we setup above and you don't need the height

30
00:02:17.240 --> 00:02:17.850
animation,

31
00:02:17.900 --> 00:02:22.910
I'll still leave that here because we'll need it later but for animated container, we don't need it and

32
00:02:22.910 --> 00:02:25.670
of course it's needless to say that if you want to animate a container,

33
00:02:25.670 --> 00:02:31.730
my suggestion would be that you use the built-in animated container because it's simply more efficient

34
00:02:31.790 --> 00:02:33.430
and does all the heavy lifting for you.

35
00:02:34.930 --> 00:02:38.500
So with that, we have the same animation as before

36
00:02:38.560 --> 00:02:45.390
as you can tell here but now controlled by Flutter's built-in animated container widget.

