WEBVTT
1
00:00:02.180 --> 00:00:07.850
Let's make sure we can deliver push notifications to an Android application, and for that we got all

2
00:00:07.850 --> 00:00:11.660
the steps required here in this official documentation of this package.

3
00:00:11.720 --> 00:00:18.290
And it is worth following along with that documentation in case some tiny step changed since I recorded

4
00:00:18.290 --> 00:00:18.880
this video.

5
00:00:19.640 --> 00:00:26.240
So the first goal is to create an Android project in the FIREBASE console and essentially link that

6
00:00:26.240 --> 00:00:28.130
project to your Flattr app.

7
00:00:28.250 --> 00:00:31.330
Now, we already did this at the very beginning of this module.

8
00:00:31.550 --> 00:00:37.310
So if you just came in here for the push notifications, at least go back to the beginning of the module

9
00:00:37.490 --> 00:00:43.800
and check out the firebase SDK set up steps there to see how to link Firebase to a flutter project.

10
00:00:44.510 --> 00:00:46.280
So we're already done with step one.

11
00:00:46.280 --> 00:00:49.850
Therefore, we all the completed parts of the next steps.

12
00:00:49.850 --> 00:00:52.540
But let's verify that everything is set up correctly there.

13
00:00:53.180 --> 00:00:58.100
For example, in our Android build gradle file, we should have these two dependencies.

14
00:00:58.610 --> 00:00:59.440
So let's go there.

15
00:00:59.450 --> 00:01:02.750
Let's go to the Android folder and then the build gradle file.

16
00:01:03.680 --> 00:01:10.640
And they are make sure that you have that Google services dependancy, which we have, and make sure

17
00:01:10.640 --> 00:01:14.230
that you also have that tools built gradle dependancy there.

18
00:01:14.510 --> 00:01:16.160
And I also do have that there.

19
00:01:16.160 --> 00:01:17.240
And you should have both.

20
00:01:17.240 --> 00:01:18.620
But again, verify it.

21
00:01:19.880 --> 00:01:27.370
Next, make sure you apply this plug in here in your Android app, built gradle file, so the app folder,

22
00:01:27.410 --> 00:01:33.230
there's another built gradle file and in there, make sure that at the bottom of the file you have this

23
00:01:33.230 --> 00:01:33.830
line.

24
00:01:37.110 --> 00:01:41.850
Now, I don't have it at the bottom, but actually here at the top, so to avoid any issues, let me

25
00:01:41.850 --> 00:01:43.980
just move that to the bottom of that file.

26
00:01:44.250 --> 00:01:46.670
But with that, we should be fine here as well.

27
00:01:47.980 --> 00:01:55.840
Now, with that, we are done with the basic setup, and in case you're wondering when this ID step

28
00:01:55.840 --> 00:01:59.060
between our app and the push notification server will happen?

29
00:01:59.410 --> 00:02:01.480
Well, that happened with those steps.

30
00:02:01.480 --> 00:02:09.039
We linked our FIREBASE project to our Android Flutter project, and that is this ID that ensures that

31
00:02:09.039 --> 00:02:15.910
only you do developer of the app who has access to both the app and your firebase project is authorized

32
00:02:15.910 --> 00:02:20.320
to send push notifications so that estï¿½s ID step for Android.

33
00:02:21.010 --> 00:02:24.550
Now also an important node to test push notifications.

34
00:02:24.790 --> 00:02:30.970
You need a device that has Google Play services installed, so you should ensure that this is the case

35
00:02:30.970 --> 00:02:34.930
on your real device, but also on your emulator.

36
00:02:35.800 --> 00:02:42.920
And to verify this on your emulator, you can bring up Android studio and they're simply open that Abeed

37
00:02:42.940 --> 00:02:43.750
manager.

38
00:02:46.680 --> 00:02:53.370
And here, make sure that the emulator you're running has displaced the Eichen.

39
00:02:54.410 --> 00:02:55.990
With that, you should be fine.

40
00:02:57.090 --> 00:02:57.570
So.

41
00:02:58.610 --> 00:03:03.860
With that, we're done with all of that, but there is one optional but recommended step, which we

42
00:03:03.860 --> 00:03:09.950
all will complete here, and this is a step that ensures that when we later receive a push notification

43
00:03:09.950 --> 00:03:17.660
and we tap on it when our app is not opened, the app will open up and we are able to handle this notification

44
00:03:17.660 --> 00:03:18.620
inside of the app.

45
00:03:18.630 --> 00:03:24.560
If you skip step four, you will be able to get notifications, but you won't be able to tap on them

46
00:03:24.560 --> 00:03:28.120
and then do something in your app based on the notification.

47
00:03:28.640 --> 00:03:36.440
So in order to be able to do that, make sure that you add this inten filter within the activity tag

48
00:03:36.440 --> 00:03:38.510
of your Android app stores.

49
00:03:38.530 --> 00:03:41.150
Maned Android manifest XML file.

50
00:03:43.090 --> 00:03:50.880
So let's go to Android app source, main Android manifest, and there there is this activity node and

51
00:03:50.890 --> 00:03:53.010
we already got one in filter here.

52
00:03:53.290 --> 00:03:59.920
Make sure you also add this other intent filter, which you just copied from that article I was just

53
00:03:59.920 --> 00:04:00.220
on.

54
00:04:00.550 --> 00:04:07.090
This ensures that incoming messages can be handled by tapping on them and by then doing something in

55
00:04:07.090 --> 00:04:07.600
your app.

56
00:04:08.890 --> 00:04:10.300
So this should be added here.

57
00:04:12.920 --> 00:04:19.279
And with that, you're done now, that background message is part is something different, not related

58
00:04:19.279 --> 00:04:25.220
to the push notifications we're going to handle and therefore we can skip all those background messages,

59
00:04:25.220 --> 00:04:25.810
steps.

60
00:04:25.880 --> 00:04:29.030
Now, if that is something you need in your app, you can, of course, add this.

61
00:04:29.240 --> 00:04:31.370
But again, here, we won't need this.

62
00:04:31.670 --> 00:04:34.310
So therefore, we're done with the Android setup.

63
00:04:34.850 --> 00:04:40.850
Now, before we dive into that guess set up, let's actually check whether it works and therefore we

64
00:04:40.850 --> 00:04:43.150
can scroll down to sending messages.

65
00:04:43.160 --> 00:04:46.170
We'll work on receiving and doing something with messages later.

66
00:04:46.190 --> 00:04:50.960
For now, let's scroll down to sending messages and follow the steps there.

67
00:04:51.080 --> 00:04:55.360
And thankfully, we can send a dummy message from inside the firebase console.

68
00:04:55.940 --> 00:05:00.620
So here in your FIREBASE project, which you created at the beginning of the module and where we have

69
00:05:00.620 --> 00:05:04.580
the database and everything, we can scroll down to cloud messaging.

70
00:05:05.060 --> 00:05:07.160
And if you click on cloud messaging.

71
00:05:09.480 --> 00:05:11.760
You can click on send your first message.

72
00:05:12.670 --> 00:05:20.050
Now, here you can enter a title like test and some text dusters work, you can include an image, but

73
00:05:20.050 --> 00:05:24.130
we're not going to do this here and a name which we're also not going to do here.

74
00:05:25.890 --> 00:05:30.420
And instead, we can click on next year, now we need to specify a target.

75
00:05:32.470 --> 00:05:37.540
And here we're going to target a user if app and then pick our Android app here.

76
00:05:38.780 --> 00:05:39.890
And click on next.

77
00:05:41.220 --> 00:05:43.030
Make sure to send it now.

78
00:05:43.080 --> 00:05:45.750
You could also schedule it, but I want to send it now.

79
00:05:48.630 --> 00:05:54.630
We can skip this step here and now in the last step, there is one thing we can set.

80
00:05:54.900 --> 00:06:01.500
We see that here, the official talks to we want to set a Catholic action field under a custom data

81
00:06:02.010 --> 00:06:05.850
to set this year this identifier as to click action.

82
00:06:06.060 --> 00:06:13.440
That is what will later connect to this intent filter to basically allow androids to make the link between

83
00:06:13.440 --> 00:06:18.210
this notification and our app and allow us to handle this inside of the app.

84
00:06:19.350 --> 00:06:25.830
For the moment, I'll send a message without that, though, and therefore let's review here.

85
00:06:27.080 --> 00:06:28.610
And then publish.

86
00:06:29.770 --> 00:06:35.860
Just one extra note about this cloud messaging console, which we're seeing here, this is not just

87
00:06:35.860 --> 00:06:36.860
for testing.

88
00:06:37.090 --> 00:06:44.290
This is actually a tool you can use if you want to send out push notifications to the users of your

89
00:06:44.290 --> 00:06:50.630
application, for example, for marketing or to share an important information with them.

90
00:06:50.830 --> 00:06:57.550
So this is your channel to your users, so to say, to send out push notifications to them.

91
00:06:57.730 --> 00:07:03.790
Now, of course, you can also automate this, for example, to send a push notification if a user sends

92
00:07:03.790 --> 00:07:04.740
a new chat message.

93
00:07:05.050 --> 00:07:07.090
But that's something we'll do later.

94
00:07:07.090 --> 00:07:14.560
And of course, whenever you want a test or you have the scenario that you, as the app owner and developer,

95
00:07:14.680 --> 00:07:21.970
want to send out push notifications to your users, this cloud messaging tool here, this cloud messaging

96
00:07:21.970 --> 00:07:28.330
console here in this firebase project is the tool you could use to send those messages.

97
00:07:30.250 --> 00:07:36.640
Now, you might not be seeing any notification here on your emulator, but you should see some error

98
00:07:36.640 --> 00:07:40.650
here, error while delivering the message service intent not found.

99
00:07:41.380 --> 00:07:46.990
So let's actually quit any running processes here and restart Europe because we added a new package

100
00:07:46.990 --> 00:07:49.390
and we even changed something in the Android config.

101
00:07:49.390 --> 00:07:51.880
And you should absolutely restart your app thereafter.

102
00:07:52.510 --> 00:07:54.010
So make sure you do that.

103
00:07:54.010 --> 00:07:58.750
You restart your application, you rebuild and restart your application, I should say.

104
00:07:59.690 --> 00:08:04.790
And once that's finished, let's go back and hear on your previous message, you can click on those

105
00:08:04.790 --> 00:08:11.240
free dots, click on duplicate notification to just send it again, click on review and publish.

106
00:08:14.310 --> 00:08:21.030
And now you'll see a different message here, fatal failed to find call back, so that's not a different

107
00:08:21.030 --> 00:08:21.540
message.

108
00:08:21.540 --> 00:08:26.160
And this in the end proves that something seemed to happen on our device.

109
00:08:27.560 --> 00:08:33.860
And please note that this is the case if the app is open in the foreground now, let's see what happens

110
00:08:33.860 --> 00:08:39.980
if we killed his application with the task manager and therefore, of course, this running process

111
00:08:39.980 --> 00:08:41.270
here finishes as well.

112
00:08:41.809 --> 00:08:47.480
And we duplicate this again, duplicate review and publish it.

113
00:08:50.530 --> 00:08:57.850
And now you will see here is your push notification arriving on this device, you now have it here with

114
00:08:57.850 --> 00:09:02.450
your app icon here, and that's just a flutter icon because that is the default app icon.

115
00:09:03.100 --> 00:09:09.040
Now, if we tap this, we're taken to our application so that it works, but right now will not be able

116
00:09:09.040 --> 00:09:13.470
to handle the notification in there, will not be able to do something with it here.

117
00:09:13.870 --> 00:09:15.190
So that's the missing part.

118
00:09:15.190 --> 00:09:16.870
That's what we'll take care about next.

119
00:09:16.880 --> 00:09:22.780
And of course, we'll then also make sure that we handle notifications when we get them whilst the app

120
00:09:22.780 --> 00:09:27.780
is running, because that is where we previously got this fatal failed to find callback error.

121
00:09:28.180 --> 00:09:32.440
But generally sending messages to Android works now.

122
00:09:32.870 --> 00:09:38.800
Now, before we integrate all the remaining steps and we set up some code to handle messages, let's

123
00:09:38.800 --> 00:09:41.980
make sure we also set up everything for iOS.

