WEBVTT
1
00:00:02.200 --> 00:00:09.160
Now it's always important to validate your apps also on real devices and on the different operating

2
00:00:09.160 --> 00:00:11.410
systems, the different platforms you're building for,

3
00:00:11.890 --> 00:00:17.290
that's especially important when working with native device features like the device camera with the

4
00:00:17.290 --> 00:00:19.740
user location, device storage,

5
00:00:20.110 --> 00:00:25.510
obviously because you want to ensure that this does not just work on your nice little Android emulator

6
00:00:25.510 --> 00:00:28.510
here but also on a real Android device

7
00:00:28.540 --> 00:00:34.990
and of course also on iOS and real iOS devices and therefore I'll now test this application here both

8
00:00:35.050 --> 00:00:39.250
on a real Android device and on the real iOS device.

9
00:00:39.250 --> 00:00:45.880
Now for iOS, I actually won't even test it on a emulator first because the iOS simulator doesn't support

10
00:00:45.910 --> 00:00:46.950
the camera,

11
00:00:46.960 --> 00:00:48.520
where here on Android,

12
00:00:48.520 --> 00:00:51.760
you have this dummy camera which you can use, on iOS,

13
00:00:51.760 --> 00:00:53.160
you got nothing like that

14
00:00:53.170 --> 00:00:57.580
and therefore on iOS, you can't work with the camera.

15
00:00:57.610 --> 00:01:02.770
So let me now test this application on iOS and therefore, I'll quit this running process.

16
00:01:02.770 --> 00:01:07.350
Now I attached my iPhone but unfortunately, it's not detected automatically here,

17
00:01:07.850 --> 00:01:12.820
it's no problem though, we can simply open up Xcode and I showed you how to launch the app on different

18
00:01:12.820 --> 00:01:14.940
devices earlier in a separate section,

19
00:01:14.950 --> 00:01:20.410
so go back to that section if you're not sure anymore how that worked. In the end with Xcode, you should

20
00:01:20.410 --> 00:01:27.830
open another project, go into your project folder and there under iOS, open that iOS folder and then

21
00:01:27.840 --> 00:01:30.310
here, select that runner project,

22
00:01:30.350 --> 00:01:36.140
make sure your iPhone, the connected iPhone is selected here and then click that play button

23
00:01:36.140 --> 00:01:39.720
but before you do that, make sure you choose a development team here,

24
00:01:39.770 --> 00:01:41.570
otherwise it will not work.

25
00:01:41.570 --> 00:01:44.640
So click play thereafter

26
00:01:44.780 --> 00:01:50.580
and in case you're getting an error here, like I do, go back into your project first and there in the terminal,

27
00:01:50.580 --> 00:01:57.300
run Flutter clean which will basically clean up your project and set it up from scratch again

28
00:01:58.570 --> 00:02:00.430
and thereafter, run Flutter

29
00:02:00.470 --> 00:02:08.539
build ios in here, so that it builds this for iOS one time before you try launching it with the help

30
00:02:08.539 --> 00:02:15.770
of Xcode because that will install some dependencies, some iOS dependencies which are then required

31
00:02:15.770 --> 00:02:16.460
by Xcode,

32
00:02:16.460 --> 00:02:21.690
so make sure you're running this first. If you're facing any issues during this step by the way,

33
00:02:21.690 --> 00:02:26.410
close Xcode and quit this running process and rerun Flutter build

34
00:02:26.460 --> 00:02:36.360
iOS here and now once this is all done, let's go back into Xcode here, open another project again and

35
00:02:36.360 --> 00:02:39.240
now select your entire iOS folder,

36
00:02:39.240 --> 00:02:46.800
so not just your runner Xcode project but the entire iOS folder. Open that, now in here with runner

37
00:02:46.800 --> 00:02:47.230
selected,

38
00:02:47.230 --> 00:02:51.970
make sure you have a team assigned, you have your iPhone selected here and then click the play button

39
00:02:51.970 --> 00:02:57.040
and now this should actually succeed in running your app, building your app again and then running your

40
00:02:57.040 --> 00:03:04.610
app on your connected iOS device. So let's wait for that to finish and wait for the app to come up on

41
00:03:04.610 --> 00:03:06.630
my connected iPhone and

42
00:03:06.660 --> 00:03:14.990
now here's the app running on my iPhone and now if I tap the plus here and I enter test here and I now

43
00:03:14.990 --> 00:03:20.570
take a picture, I may ask, in German because I'm German, whether I want to grant access to the

44
00:03:20.570 --> 00:03:29.570
camera and I will choose yes here and now as a proof, I'll take a picture of my monitor here. So let's confirm

45
00:03:29.570 --> 00:03:32.200
that, use that photo and here's the preview.

46
00:03:32.240 --> 00:03:39.230
Now you'll notice that this is now rotated here and if I add this place, it's very tiny here

47
00:03:39.440 --> 00:03:42.650
but this is actually the rotated picture.

48
00:03:42.650 --> 00:03:44.350
So that's it on iOS,

49
00:03:44.360 --> 00:03:51.850
let's now have a look at this on a real Android device. So I connected my Android device and Flutter

50
00:03:51.850 --> 00:03:53.240
is detecting it here,

51
00:03:53.290 --> 00:03:58.450
so let me now simply launch the app here through Visual Studio Code again on my connected Android

52
00:03:58.450 --> 00:04:01.450
device to test it there.

53
00:04:01.660 --> 00:04:03.570
So here's the app running on Android,

54
00:04:03.580 --> 00:04:07.780
let me go to a new screen there, enter test here,

55
00:04:07.780 --> 00:04:17.380
take a picture, also of my screen here, confirm that and click add place and here it's working as well.

56
00:04:17.380 --> 00:04:20.260
So this is working on both Android and iOS devices

57
00:04:20.290 --> 00:04:26.860
and with that tested, let's now continue working on this application and let's make sure we don't just save

58
00:04:26.920 --> 00:04:33.730
the file, the image on our device but that we actually save the whole place including the title and later

59
00:04:33.730 --> 00:04:35.170
also including the location.

