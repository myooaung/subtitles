WEBVTT
1
00:00:02.390 --> 00:00:10.000
I'm back on the bigger screen and added some dummy transactions again. Now the last responsive change

2
00:00:10.180 --> 00:00:16.300
which I want to take care of is that if we have more width available, like in this case here, maybe we

3
00:00:16.300 --> 00:00:21.880
want to show more information than on smaller screens. The concrete example I have in mind is that we

4
00:00:21.880 --> 00:00:25.800
could show some helper text next to that trash icon.

5
00:00:26.050 --> 00:00:31.960
It should be pretty clear what will happen if we press that trash icon but nonetheless, it could be

6
00:00:31.960 --> 00:00:33.020
interesting to

7
00:00:33.040 --> 00:00:39.730
add some extra meta information, also of course mostly that you learned how to build or add different

8
00:00:39.790 --> 00:00:46.450
items based on different screen size because thus far what we did is, we took the size of the screen

9
00:00:46.450 --> 00:00:49.900
into account to size things differently.

10
00:00:49.900 --> 00:00:55.210
Now I want to add content if we have more space available and that's a bit different of course.

11
00:00:55.210 --> 00:01:00.370
For that, let's go back to the transaction list widget which is where we output that ListTile and where

12
00:01:00.370 --> 00:01:02.160
we also have that trash

13
00:01:02.190 --> 00:01:07.050
icon here and in the end, it should be a normal IconButton like this

14
00:01:07.090 --> 00:01:12.340
if we have limited width available but when we have more width, I want to show a button with a text next

15
00:01:12.340 --> 00:01:13.270
to it.

16
00:01:13.270 --> 00:01:18.760
Now of course, you already know how you can find out if we're in landscape and portrait mode

17
00:01:18.760 --> 00:01:21.440
but let's say I don't really care about the orientation,

18
00:01:21.490 --> 00:01:27.280
I really only cared about the available width. So even if we are in portrait mode but let's say we have

19
00:01:27.280 --> 00:01:33.130
a very large device, like an iPhone xs plus or anything like that, then I might still want to show

20
00:01:33.130 --> 00:01:33.830
that text.

21
00:01:33.850 --> 00:01:37.430
So I really only care about the width and not about the orientation

22
00:01:37.510 --> 00:01:42.000
and that's why the orientation property on media query doesn't really help us but

23
00:01:42.290 --> 00:01:50.420
we can of course also use the size and there the width in a condition. For this here when we render our

24
00:01:50.420 --> 00:01:57.260
button, we can of course use MediaQuery.of(context) and then tap into the size and there into the

25
00:01:57.260 --> 00:01:58.160
width

26
00:01:58.550 --> 00:02:07.780
and now simply compare that and let's say if we have more width than let's say 400 pixels or 360, you can

27
00:02:07.780 --> 00:02:14.140
take any arbitrary value and find out what looks good, then I want to render a button that has an icon

28
00:02:14.140 --> 00:02:14.950
and a text,

29
00:02:14.950 --> 00:02:16.540
otherwise I only want to render that

30
00:02:16.540 --> 00:02:22.840
IconButton. Now for a button with icon and text, you can use a FlatButton and then there, a special

31
00:02:22.840 --> 00:02:28.210
constructor which we haven't seen before with dot, there is an icon constructor and that gives you a

32
00:02:28.210 --> 00:02:36.580
FlatButton which also has an icon but also a text. There, you can then set a color and of course, I

33
00:02:36.580 --> 00:02:44.530
want to use the same color as I did here, like this and most importantly of course, we want to set an

34
00:02:44.540 --> 00:02:49.890
icon which we do with an icon property but then also a label,

35
00:02:49.890 --> 00:02:55.970
so that's the text show next to the icon and label here if you inspect this is a widget

36
00:02:56.180 --> 00:03:02.890
but typically of course, you use a text widget here and there I could say delete.

37
00:03:02.940 --> 00:03:08.090
Now of course, I also want to add onPressed here and do the same as on the IconButton

38
00:03:08.400 --> 00:03:13.890
and now with that, we have a setup which should show us that button with icon and text if we have enough

39
00:03:13.890 --> 00:03:20.130
space and only show the icon if we have less space. So yes,

40
00:03:20.140 --> 00:03:21.370
this generally works.

41
00:03:21.400 --> 00:03:22.330
Small mistake,

42
00:03:22.330 --> 00:03:27.070
you shouldn't set color here but text color. If you set text color to red,

43
00:03:27.070 --> 00:03:30.200
now the icon in the text has the color instead of the background

44
00:03:30.340 --> 00:03:31.890
and now indeed we see both

45
00:03:32.130 --> 00:03:38.440
and if I would ramp this up to let's say 460, this device I think has 411, then we

46
00:03:38.440 --> 00:03:39.210
don't see that

47
00:03:39.670 --> 00:03:44.190
but if I go into landscape mode where we have more width available, we see both again.

48
00:03:44.230 --> 00:03:50.560
So this is also a useful pattern that you can show and hide content and render different widgets based

49
00:03:50.650 --> 00:03:56.490
on your device size, which of course allows you to build truly flexible apps.

50
00:03:56.500 --> 00:03:57.390
And for now I'll leave

51
00:03:57.400 --> 00:04:05.230
this at 460 here, so that we can see both the icon without the text and with the text, solely depending

52
00:04:05.440 --> 00:04:07.540
on the available device size.

