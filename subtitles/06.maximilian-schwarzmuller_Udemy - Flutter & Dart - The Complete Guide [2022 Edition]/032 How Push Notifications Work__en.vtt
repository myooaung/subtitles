WEBVTT
1
00:00:02.230 --> 00:00:09.160
So finally, we reached push notifications, so those little notifications and messages that show up

2
00:00:09.160 --> 00:00:15.190
on your device and prompt you to go to a certain app in the next lecturer's, I'll show you how you

3
00:00:15.190 --> 00:00:21.610
can integrate push notifications in flutter apps and how we can, for example, do that in a flutter

4
00:00:21.610 --> 00:00:23.370
app we built over this module.

5
00:00:24.010 --> 00:00:29.500
Now, for that, let's first of all understand how push notifications actually work behind the scenes.

6
00:00:30.310 --> 00:00:34.840
We got our application and does application is running on a bunch of devices.

7
00:00:34.870 --> 00:00:38.180
So on the devices of the users who installed our app.

8
00:00:38.860 --> 00:00:42.010
Now some event occurs, something happens.

9
00:00:42.310 --> 00:00:49.360
For example, a user sends a chat message to another user or you as the owner of the app, maybe want

10
00:00:49.360 --> 00:00:55.600
to send out a marketing message to all your users or you have a news app and something important happened

11
00:00:55.720 --> 00:00:58.190
and you want to let your users know about that.

12
00:00:58.450 --> 00:01:02.980
These are typical reasons for why you might want to send a push notification.

13
00:01:03.130 --> 00:01:08.830
And these are probably the push notification types, you know, from the apps you're using.

14
00:01:09.790 --> 00:01:15.760
So the natural thing would be that you come up with the message you want to send, the short text you

15
00:01:15.760 --> 00:01:21.400
want to send, for example, and you then send this message somehow to a device.

16
00:01:22.120 --> 00:01:23.950
Yeah, that's roughly how it works.

17
00:01:23.950 --> 00:01:26.270
But somehow part is important.

18
00:01:26.680 --> 00:01:33.610
You, as the app developer or as any developer, can't just directly send a message to a device.

19
00:01:33.760 --> 00:01:37.000
You can't directly send messages to devices.

20
00:01:37.000 --> 00:01:42.430
That is really important instead, of course, Apple and Google.

21
00:01:42.430 --> 00:01:52.120
So the owners of iOS and Android want to control who's able to send notifications to devices to avoid

22
00:01:52.120 --> 00:01:54.250
abuse and security issues.

23
00:01:54.730 --> 00:02:01.000
And therefore you have to use official push notification servers and or protocols.

24
00:02:01.330 --> 00:02:07.810
That means that you can't just go ahead and write your own server side code that directly targets devices.

25
00:02:07.960 --> 00:02:10.960
Instead, you have to use official service and protocols.

26
00:02:11.380 --> 00:02:20.380
And this is required by Google and by Apple to ensure that only you, as the developer of an app, can

27
00:02:20.380 --> 00:02:27.070
send notifications to users who got your app installed so that you can't target any other users with

28
00:02:27.070 --> 00:02:33.130
any other device that don't even have your app and that no one else can send messages to your users.

29
00:02:33.550 --> 00:02:41.020
Therefore, these push notification servers or these protocols which you have to use, require ID.

30
00:02:41.020 --> 00:02:49.360
So use the app developer need to kind of link your app to those notification servers and let Google

31
00:02:49.360 --> 00:02:53.350
and Apple know that you plan on using push notifications.

32
00:02:53.500 --> 00:02:55.330
So you have to be very clear here.

33
00:02:56.470 --> 00:03:03.040
Now, once all of that is set up and of course, I will show you how that setup works for both Android

34
00:03:03.040 --> 00:03:04.710
and iOS in this module.

35
00:03:04.960 --> 00:03:12.130
So once that is all set up, you can now point your event at such an official push notification server

36
00:03:12.670 --> 00:03:19.300
and draft your message in conjunction with that and let the server know which message should be sent

37
00:03:19.300 --> 00:03:20.560
out to which devices.

38
00:03:20.890 --> 00:03:25.270
And then the server will go ahead and do that for you.

39
00:03:25.270 --> 00:03:31.280
And it will then send that message and deliver that message to the devices you told it to send it to.

40
00:03:31.570 --> 00:03:34.840
This is how push notifications work behind the scenes.

41
00:03:35.620 --> 00:03:41.530
Now, how does this now translate to our firebase setup, which we have thus far, where we are using

42
00:03:41.530 --> 00:03:47.680
authentication, firestorm, cloud storage, security rules and all those beautiful things we added

43
00:03:47.680 --> 00:03:48.940
over the last lecture's.

44
00:03:49.900 --> 00:03:58.450
Well, there the great thing is that Firebase also has a cloud messaging service, which you can use

45
00:03:58.450 --> 00:04:05.050
for both Android and iOS apps and for Android apps, you actually have to use it there.

46
00:04:05.050 --> 00:04:09.940
It is the official push notification service for Android and for IWP.

47
00:04:09.970 --> 00:04:11.170
You can also use it.

48
00:04:11.170 --> 00:04:15.520
And then behind the scenes uses Apple's push notification service.

49
00:04:15.520 --> 00:04:16.600
You could say so.

50
00:04:16.600 --> 00:04:23.080
Therefore, the firebase cloud messaging service is a great choice, even if you're otherwise not using

51
00:04:23.080 --> 00:04:30.340
Firebase and you don't need to use any other firebase service to still use firebase cloud messaging.

52
00:04:30.550 --> 00:04:37.450
So you can always use the firebase push notification service for iOS and Android, even if you use no

53
00:04:37.450 --> 00:04:39.000
other firebase service.

54
00:04:39.100 --> 00:04:40.190
That's really important.

55
00:04:41.020 --> 00:04:46.720
So this firebase cloud messaging service is an important piece and it nicely works together with the

56
00:04:46.720 --> 00:04:52.110
Firebase Messaging Flutter SDK, which you install in your app, which you use in your app code.

57
00:04:52.480 --> 00:04:58.660
It works together with that to exchange push notifications and they offer firebase cloud messaging as

58
00:04:58.660 --> 00:05:06.700
an official push notification server or service integrates nicely into that entire Flattr firebase ecosystem.

59
00:05:07.240 --> 00:05:12.670
But again, let me make it clear that you don't need to use any other firebase service and that you

60
00:05:12.670 --> 00:05:16.890
also don't need to use Flattr just to use firebase cloud messaging.

61
00:05:17.140 --> 00:05:22.450
You can also use it with other native libraries for Android or apps that don't use Flautre.

62
00:05:22.630 --> 00:05:26.790
But since this is a flutter, of course, of course I'll focus on the Flattr integration.

63
00:05:27.610 --> 00:05:30.540
So this is how this will work behind the scenes.

64
00:05:30.550 --> 00:05:35.900
This is what we will use to deliver push notifications to our Flattr app.

65
00:05:36.340 --> 00:05:39.640
And with that, let's see how we get started with that.

