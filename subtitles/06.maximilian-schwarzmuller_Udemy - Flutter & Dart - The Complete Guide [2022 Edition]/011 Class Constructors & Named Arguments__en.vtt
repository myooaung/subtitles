WEBVTT
1
00:00:02.333 --> 00:00:08.500
With this first output on the screen, before we dig deeper into this app and build something more beautiful,

2
00:00:09.033 --> 00:00:14.700
let me take a step back and go back to Dart because it's so important that you also understand Dart

3
00:00:14.866 --> 00:00:16.866
whilst we are working on this.

4
00:00:17.233 --> 00:00:20.233
For one, let me go back to MaterialApp and text.

5
00:00:20.333 --> 00:00:28.300
I mentioned that these are not functions but classes and yet, I pass some data to them right,

6
00:00:28.300 --> 00:00:35.766
I passed the hello string to text and I even have this more strange looking home colon thing here for

7
00:00:35.766 --> 00:00:37.533
MaterialApp.

8
00:00:37.600 --> 00:00:43.000
Let's go back to our little Dart example here on DartPad which we started working on earlier.

9
00:00:43.266 --> 00:00:47.366
There we also have person and person has some default values here.

10
00:00:47.366 --> 00:00:53.800
Now we can override these defaults but what if our class should be a bit more generic, for example for

11
00:00:53.800 --> 00:00:57.933
a person it doesn't really make sense that the default would be Max and 30,

12
00:00:58.100 --> 00:01:04.599
if we're for example building an application where users can sign up, then why would we assume that the

13
00:01:04.666 --> 00:01:06.533
average user is named Max,

14
00:01:06.566 --> 00:01:08.800
that does not make any sense.

15
00:01:08.833 --> 00:01:16.166
So you might want a setup where you have no initial values but instead when this class gets created,

16
00:01:16.166 --> 00:01:20.166
we can pass the initial values here between the parentheses

17
00:01:20.266 --> 00:01:28.700
so that I have Max and 30 here and I have Manu and 31 here and then I don't need to override

18
00:01:28.700 --> 00:01:30.066
my name down there.

19
00:01:30.166 --> 00:01:33.033
That would be nice but right now, it's not supported,

20
00:01:33.266 --> 00:01:40.766
we can support it by adding a so-called constructor to this class. A constructor is a function inside

21
00:01:40.766 --> 00:01:46.700
of a class and therefore we could also call it a method because functions inside of classes are methods,

22
00:01:47.033 --> 00:01:48.833
it's just a different name,

23
00:01:48.966 --> 00:01:56.400
it's a function that of a class which is different to other functions inside of the class in that it always

24
00:01:56.400 --> 00:02:03.333
executes only once when we create a new object based on a class which happens when we call a class

25
00:02:03.333 --> 00:02:04.533
like this.

26
00:02:04.733 --> 00:02:11.100
You add a constructor by repeating the name of the class, in this case person like that. In other programming

27
00:02:11.100 --> 00:02:11.566
languages,

28
00:02:11.566 --> 00:02:17.100
you would write constructor for example but in Dart, it's really just the name repeated.

29
00:02:17.100 --> 00:02:22.200
You add parentheses, like for a normal function and then you add curly braces which holds the code that

30
00:02:22.200 --> 00:02:22.800
should run

31
00:02:22.900 --> 00:02:25.133
when this class gets created.

32
00:02:25.200 --> 00:02:35.533
Now here, you can accept arguments like name and like age or input name and input age to avoid confusion

33
00:02:36.533 --> 00:02:42.500
with the names we chose up there, though you could use the same names because Dart also has a feature

34
00:02:42.500 --> 00:02:49.733
called scoping, which means that if you had the same names as up here, here in the arguments, it would

35
00:02:49.733 --> 00:02:52.300
not override this or anything like that,

36
00:02:52.333 --> 00:02:57.266
instead it would simply just create new variables inside of person,

37
00:02:57.266 --> 00:03:01.900
it always creates new variables for every argument you get and these variables could have the same name

38
00:03:02.100 --> 00:03:07.633
and they would not clash because Dart would behind the scenes manage that separation between your

39
00:03:07.633 --> 00:03:12.400
class level variables and your function or constructor level variables.

40
00:03:12.466 --> 00:03:14.133
But here, to not confuse you,

41
00:03:14.166 --> 00:03:20.833
I chose different names and now inside of the constructor body, we could refer to our name up

42
00:03:20.833 --> 00:03:28.066
here by just typing name and assigning input name as a value and the same for the age.

43
00:03:34.233 --> 00:03:36.566
Now by the way, if you had the same name,

44
00:03:36.600 --> 00:03:43.733
so let's say I had age here, then of course Dart would not be able to figure out if we mean the age up

45
00:03:43.733 --> 00:03:49.800
here or the age here when we're using age in the body of the constructor and therefore, it gives us a

46
00:03:49.800 --> 00:03:53.900
special this keyword which refers to the class itself

47
00:03:53.966 --> 00:04:00.400
and with this .age, we can tell Dart that here, I want to refer to the class level age variable whereas

48
00:04:00.400 --> 00:04:05.700
without this, I want to refer to the function or constructor level variable.

49
00:04:05.700 --> 00:04:09.766
So this is the code we can use, we could do the same for name, just want to show the two different options

50
00:04:10.166 --> 00:04:17.065
and now with that, we have a constructor which allows us to create our object if I run this with different

51
00:04:17.200 --> 00:04:23.000
default values down there and which is of course pretty convenient and a feature you'll use quite a lot.

52
00:04:23.133 --> 00:04:28.633
That's also the feature text uses here which accepts a string which you can pass to the constructor

53
00:04:28.766 --> 00:04:34.466
which you will use to output something because having a default text in the text class would not make

54
00:04:34.466 --> 00:04:35.666
that much sense.

55
00:04:37.066 --> 00:04:46.300
Now besides using this syntax here, you can also use named arguments and that means that you simply wrap

56
00:04:46.300 --> 00:04:49.866
that here in curly braces.

57
00:04:49.866 --> 00:04:56.566
Now what this does is, it means that now these arguments are all optional and therefore of course you

58
00:04:56.566 --> 00:05:05.433
should write code that can live with no values being provided and that you do target them by name

59
00:05:05.466 --> 00:05:07.000
when you're creating your data.

60
00:05:07.033 --> 00:05:12.766
So here you would then target an argument by name, by repeating its name here when you create an instance

61
00:05:12.766 --> 00:05:22.733
based on that object, like this, inputName: and also age:.

62
00:05:22.866 --> 00:05:29.766
That concept of named arguments is also not only available for constructors but also for normal functions.

63
00:05:30.366 --> 00:05:31.333
Now if I repeat this,

64
00:05:31.366 --> 00:05:32.500
it still works.

65
00:05:32.500 --> 00:05:34.733
Now why would I use named arguments?

66
00:05:34.733 --> 00:05:41.700
It's especially great for constructors or functions that take a lot of arguments because if you have normal

67
00:05:41.866 --> 00:05:49.266
positional, so non-named arguments, you have to remember which argument goes into which position, that

68
00:05:49.266 --> 00:05:50.800
the name is the first and the age is

69
00:05:50.833 --> 00:05:55.400
the second argument. Now obviously for a constructor with two arguments, that is doable but if you had

70
00:05:55.433 --> 00:05:59.233
10 arguments, it would be more difficult. By using named arguments,

71
00:05:59.266 --> 00:06:03.800
you can simply use the name to assign it and you can also mix and match the order here if you wanted

72
00:06:03.800 --> 00:06:04.333
to.

73
00:06:04.333 --> 00:06:09.533
So here I could first assign the age and then name because I'm targeting it with the name, right,

74
00:06:09.533 --> 00:06:14.700
so with the name of the argument and therefore, the order doesn't matter, here for positional arguments

75
00:06:15.033 --> 00:06:21.600
as the name suggests, it does matter. Now since I mentioned that all named arguments automatically are

76
00:06:21.600 --> 00:06:22.900
also optional,

77
00:06:23.100 --> 00:06:30.566
you also should either define default values here with an equal sign, right in here in the argument list,

78
00:06:30.566 --> 00:06:34.033
that's something you can do. Now in case you don't provide an age,

79
00:06:34.166 --> 00:06:41.700
the default value would be used and that can of course be useful to avoid that your code breaks or

80
00:06:41.800 --> 00:06:49.766
you add a special annotation, the @required annotation which will ensure that the compiler yells at

81
00:06:49.766 --> 00:06:54.733
you if you don't provide a value for that named argument.

82
00:06:54.733 --> 00:07:00.566
So with that, you turn that optional named argument back into a required one.

83
00:07:00.566 --> 00:07:06.400
Now side note, required is not a feature built into Dart and therefore here, I get an error that Dart

84
00:07:06.433 --> 00:07:10.666
doesn't understand what @required means but it will be built into Flutter,

85
00:07:10.700 --> 00:07:14.833
so here we will be able to use that and with that, it's hopefully a bit clearer

86
00:07:14.866 --> 00:07:19.166
what named arguments are and what constructors are. Now

87
00:07:19.300 --> 00:07:20.733
one last side note,

88
00:07:20.866 --> 00:07:27.366
if I remove @required here, one last side note because it is important, let me add the default value

89
00:07:27.366 --> 00:07:30.866
again. Sometimes,

90
00:07:31.033 --> 00:07:37.600
this set up here where you get certain data and you want to assign it to variables of your class is

91
00:07:37.600 --> 00:07:41.533
so common that you don't have to write all that code,

92
00:07:41.533 --> 00:07:47.633
instead you can get rid of your constructor body, add a semicolon after it and now just make sure that

93
00:07:47.633 --> 00:07:53.466
you use your variable or your property names up here, so that you use name and age

94
00:07:53.766 --> 00:07:54.366
and now here,

95
00:07:58.466 --> 00:08:04.033
you can simply target this age and here also, this name, now without a type assignment because we

96
00:08:04.033 --> 00:08:10.533
got the types here already and this is a shortcut understood by Dart which tells Dart, okay what we receive

97
00:08:10.533 --> 00:08:13.633
as a name argument will be stored in a name property,

98
00:08:13.633 --> 00:08:17.400
what I receive as an age argument will be stored in the age property and

99
00:08:17.500 --> 00:08:22.666
now since I renamed this to name again because now the names here have to match, since I rename this

100
00:08:22.666 --> 00:08:29.200
to name, I also have to rename it down there of course. And now this works again and it's of course shorter

101
00:08:29.400 --> 00:08:33.200
than writing that extra function body for the constructor.

