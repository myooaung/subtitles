WEBVTT
1
00:00:02.270 --> 00:00:05.130
So time to add firebase authentication.

2
00:00:05.420 --> 00:00:11.330
Now, we do already have an authentication module in the course, but again, there I showed you the

3
00:00:11.330 --> 00:00:13.610
more generic way of authenticating.

4
00:00:13.790 --> 00:00:17.390
Yes, we did use Firebase there, but only as a dummy back.

5
00:00:17.390 --> 00:00:23.710
And we use the firebase rest API to send a regular HTP request to Firebase.

6
00:00:24.080 --> 00:00:30.050
And then, for example, we had to manage that token that identified the user on our own.

7
00:00:30.050 --> 00:00:33.620
We manually had to attach it to outgoing HTP requests.

8
00:00:33.800 --> 00:00:35.750
We had to manage its lifetime.

9
00:00:35.750 --> 00:00:37.490
We had to validate the token.

10
00:00:37.850 --> 00:00:39.950
All of that had to be done by us.

11
00:00:40.310 --> 00:00:45.830
Now, I did use that approach because I find it super important that, you know, this generic way of

12
00:00:45.830 --> 00:00:48.680
doing it, because you might not always be using Firebase.

13
00:00:48.710 --> 00:00:54.830
You might be working with any rest API that exposes such a sign up or a log in endpoint.

14
00:00:54.860 --> 00:00:57.330
And therefore that was crucial information.

15
00:00:57.860 --> 00:01:04.610
However, if you are using Firebase, you can have an easier life by simply using the FIREBASE Authentication

16
00:01:04.610 --> 00:01:12.020
SDK, an extra package that helps us with creating users, with signing users up, and most importantly,

17
00:01:12.050 --> 00:01:13.880
with managing that token.

18
00:01:15.240 --> 00:01:23.040
You can search for Flutter Firebase off to find that firebase off package, and you can simply go to

19
00:01:23.040 --> 00:01:29.670
the installation instructions here, grab that dependency and go back to our PUP Spectate YAML file

20
00:01:29.790 --> 00:01:32.670
and added their below cloud firestorm.

21
00:01:32.700 --> 00:01:38.040
And now this will download and add this firebase off package to the flutter project.

22
00:01:38.910 --> 00:01:42.300
And this package will make our lives much easier.

23
00:01:42.780 --> 00:01:48.120
Now, for that to work, we first of all need to go back to our Flattr project here in the Web console

24
00:01:48.420 --> 00:01:53.040
and go to authentication there and here under authentication.

25
00:01:53.400 --> 00:02:00.180
Click on set up Sinon method because we need to configure this FIREBASE project to support authentication

26
00:02:00.450 --> 00:02:03.380
before we can use authentication in our app.

27
00:02:03.960 --> 00:02:09.389
So click on set up Sinon method and you got plenty of Sinon methods to choose from.

28
00:02:09.600 --> 00:02:12.600
The official Firebase Docs help you with them.

29
00:02:12.840 --> 00:02:15.960
I will go for the traditional email password, sign up.

30
00:02:16.440 --> 00:02:21.810
So click and here leave the defaults then as they are and click on Save.

31
00:02:22.880 --> 00:02:32.420
And with that enabled, we can go back to our application and here in submit of form, I now want to

32
00:02:32.420 --> 00:02:39.230
use the firebase auth package, which we just added, to ever create a new user or to log a user in

33
00:02:39.950 --> 00:02:45.650
the form that we can check if is log in is true, in which case you want to log a user in, or if it's

34
00:02:45.650 --> 00:02:47.840
false, in which case we want to create a new user.

35
00:02:49.060 --> 00:02:57.220
Now, for that, we, first of all, need to import this package, the fire base off package and from

36
00:02:57.220 --> 00:02:59.740
that fire base off Dodge Dart.

37
00:03:00.900 --> 00:03:01.800
And then here.

38
00:03:04.200 --> 00:03:14.070
In the entire screen St. Clause, we can create a new final variable which will name off, which is

39
00:03:14.070 --> 00:03:23.310
fire based off dot instance like this, this will give us an instance to the fire base off object,

40
00:03:23.310 --> 00:03:27.830
which is automatically set up and managed by the fire base off package.

41
00:03:27.840 --> 00:03:29.820
We don't need to do anything for that.

42
00:03:29.850 --> 00:03:35.820
It's all managed behind the scenes because of that fire base configuration and linking we did earlier

43
00:03:35.820 --> 00:03:36.660
in this module.

44
00:03:38.020 --> 00:03:46.270
So now we get this off object here, we can now use this here and is log in case, for example, to

45
00:03:46.270 --> 00:03:50.440
call sign in with email and password.

46
00:03:50.920 --> 00:03:57.220
And this one's two arguments, surprisingly, the email and password so we can forward these two values,

47
00:03:57.220 --> 00:04:01.620
these two variables, email and password, which we're receiving here now.

48
00:04:01.720 --> 00:04:05.200
This will log a user in or it will try to do so.

49
00:04:06.130 --> 00:04:11.710
Now, sign in with Emelin, password actually returns a future.

50
00:04:13.700 --> 00:04:19.649
Here you can tell that it returns a future which will then unwrap itself to an all result in the end.

51
00:04:21.660 --> 00:04:28.380
Now, for that, I will add a new variable here, which will be of type of result and I'll name it all

52
00:04:28.410 --> 00:04:28.980
result.

53
00:04:30.430 --> 00:04:32.560
Which will simply hold that future here.

54
00:04:33.770 --> 00:04:38.870
And now the important thing is, as I just said, this gives us a future, not directly the result.

55
00:04:39.080 --> 00:04:46.490
So to get the result, I will turn this into an async function by adding async here between the argument

56
00:04:46.490 --> 00:04:47.990
list and the function body.

57
00:04:48.290 --> 00:04:49.790
And then we can await here.

58
00:04:49.940 --> 00:04:55.430
And as you all learned in the course, does, will basically wait for this future to complete and then

59
00:04:55.430 --> 00:04:58.010
stored the result in the off result variable.

60
00:04:58.760 --> 00:05:06.020
And we can do something similar here in the Ellis case, which is the sign up case there we call off

61
00:05:06.020 --> 00:05:13.610
and now it's create user with email and password, and we still pass to email and password as arguments

62
00:05:13.610 --> 00:05:14.510
to dysfunction.

63
00:05:15.810 --> 00:05:18.700
So that's pretty straightforward, not difficult.

64
00:05:18.720 --> 00:05:23.940
We have these two options, we send these requests and again, behind the scenes, Firebase will go

65
00:05:23.940 --> 00:05:31.170
ahead, sent the request and automatically stored to token if the request succeeds and managed to token

66
00:05:31.170 --> 00:05:32.160
lifetime for us.

67
00:05:32.190 --> 00:05:35.580
That's all taken care of now for the username.

68
00:05:35.580 --> 00:05:37.080
We're not doing anything with that yet.

69
00:05:37.080 --> 00:05:38.100
Will soon do so.

70
00:05:38.490 --> 00:05:41.850
And we're also not doing something with the off result here.

71
00:05:43.040 --> 00:05:44.900
Will do so soon to.

72
00:05:46.050 --> 00:05:51.720
One thing I want to do immediately is I want to add error, handling this here can fail.

73
00:05:51.750 --> 00:05:58.230
And when you're using a single weight, you can use try catch to try something and potentially catch

74
00:05:58.230 --> 00:05:58.800
errors.

75
00:05:59.160 --> 00:06:07.290
So here, I'll wrap all of that in a tribe lock and then down there catch any error, however, not

76
00:06:07.290 --> 00:06:08.100
any error.

77
00:06:08.100 --> 00:06:12.900
I want to catch a specific type of error and we can do this with the own keyword.

78
00:06:13.150 --> 00:06:17.180
I want to catch any error of type platform exception.

79
00:06:18.220 --> 00:06:24.550
That should essentially be errors that are thrown by Firebase because we, for example, entered an

80
00:06:24.550 --> 00:06:27.730
invalid email or an invalid password or anything like that.

81
00:06:29.770 --> 00:06:31.720
In that case, I'll set up a message.

82
00:06:32.630 --> 00:06:34.490
An error occurred.

83
00:06:35.570 --> 00:06:37.670
Please check your credentials.

84
00:06:37.790 --> 00:06:43.820
That's the general error message, but we'll also look into the error object we're getting and see if

85
00:06:43.820 --> 00:06:49.030
we have a more specific message there so we can check if an error message is unlike now.

86
00:06:49.460 --> 00:06:54.470
So if it's not equal to null, so if we have an error message, in which case I'll overwrite message

87
00:06:54.470 --> 00:06:56.450
and set it equal to error message.

88
00:06:57.680 --> 00:07:03.950
And then if we do have such a message, it would be nice to show, for example, a little message to

89
00:07:03.950 --> 00:07:11.500
the user, and for this we can use scaffold off context to show a snack bar.

90
00:07:11.900 --> 00:07:17.360
Now, the snack bar is this little message thing that comes up from the bottom of the screen and show

91
00:07:17.360 --> 00:07:18.420
is an error to the user.

92
00:07:19.040 --> 00:07:26.150
And here we create a snack bar by instantiating the snack bar widget, which chips with flutter and

93
00:07:26.150 --> 00:07:32.930
cute snack bar we can pass to content argument instead of a text widget which shows the message we want

94
00:07:32.930 --> 00:07:33.370
to show.

95
00:07:33.380 --> 00:07:35.990
So does value, which is stored in the message variable.

96
00:07:36.800 --> 00:07:40.030
And you can also set the background color of this snack bar.

97
00:07:40.280 --> 00:07:44.620
And here I'll use theme of context, dot air or color.

98
00:07:44.630 --> 00:07:48.290
And this should be a nice red color for this snack bar.

99
00:07:50.260 --> 00:07:57.760
Now, after this, so often is on platform exception catch block, I'll add another catch block which

100
00:07:57.760 --> 00:08:00.150
catches any other errors we might have.

101
00:08:00.610 --> 00:08:06.370
There shouldn't be many, but in case there are errors, I'll print them here so that we during development

102
00:08:06.370 --> 00:08:07.330
can see them at least.

103
00:08:09.790 --> 00:08:15.520
OK, that was a lot of work, we're not done, but let's see whether this works thus far.

104
00:08:15.910 --> 00:08:24.400
If I save this and I try to sign up and I enter, test a test of com and I enter a valid password and

105
00:08:24.400 --> 00:08:28.390
enter some username, the username is not getting stored anyways right now.

106
00:08:28.390 --> 00:08:29.230
So it doesn't matter.

107
00:08:29.230 --> 00:08:31.570
But if I enter some username and I click sign up.

108
00:08:32.940 --> 00:08:34.200
I see no error.

109
00:08:34.230 --> 00:08:41.610
At least I do see an error here regarding the missing plugin exception and a simple app restart should

110
00:08:41.610 --> 00:08:42.320
fix this.

111
00:08:42.330 --> 00:08:48.660
So let's close this running process and again, restart in general if you get such a missing plug in

112
00:08:48.780 --> 00:08:51.930
or simply restart the app entirely and try again.

113
00:08:52.350 --> 00:08:55.580
So let's wait for that to come up again.

114
00:08:57.320 --> 00:09:01.160
And if we now go back and try to create a new account again.

115
00:09:02.280 --> 00:09:04.590
And for all those credentials.

116
00:09:07.900 --> 00:09:11.860
Sign up again, no error here, but an error here.

117
00:09:13.220 --> 00:09:14.380
Let's see what's wrong.

118
00:09:15.760 --> 00:09:21.790
And we see that we have a problem with the scaffold off function.

119
00:09:24.120 --> 00:09:26.730
No scaffold ancestor could be found.

120
00:09:27.510 --> 00:09:30.810
That's essentially the problem we we have here.

121
00:09:32.500 --> 00:09:33.970
Now, before we tackle this.

122
00:09:35.120 --> 00:09:40.820
Let's switch to Firebase and go to users there under authentication, and you shouldn't see a user there

123
00:09:40.820 --> 00:09:42.570
because something went wrong.

124
00:09:42.620 --> 00:09:46.430
That's the reason why we tried to show that snack bar.

125
00:09:46.430 --> 00:09:48.980
But they're also something went wrong.

126
00:09:48.980 --> 00:09:50.400
So we got a couple of errors.

127
00:09:51.020 --> 00:09:53.690
The problem here is that on this scaffolded.

128
00:09:54.880 --> 00:10:00.500
I'm using a context here to basically tell Flutter, in which context to render the scaffold.

129
00:10:00.790 --> 00:10:08.470
The problem is here I'm using the context of this of a screen, and this is actually the wrong context

130
00:10:08.470 --> 00:10:08.710
here.

131
00:10:09.250 --> 00:10:17.470
Instead, we should accept the build context here as an extra argument in submit off form and use this

132
00:10:17.470 --> 00:10:18.500
context instead.

133
00:10:19.090 --> 00:10:22.450
So here, use this argument also for the theme.

134
00:10:22.990 --> 00:10:26.080
Now, you might be wondering, where is this build context coming from?

135
00:10:26.590 --> 00:10:27.760
Currently from nowhere.

136
00:10:27.770 --> 00:10:28.870
We have to pass it.

137
00:10:29.110 --> 00:10:35.650
So we have to go to the office for him and for one, make it clear here on this submit function property

138
00:10:36.220 --> 00:10:41.980
that we need to pass the context here because we want it in that other screen and therefore we need

139
00:10:41.980 --> 00:10:42.780
to pass it here.

140
00:10:42.790 --> 00:10:48.490
So when we call segment function as a lost argument, I'll forward my context, because this year from

141
00:10:48.490 --> 00:10:55.840
the OTH forum is the context that actually has access to the surrounding scaffold, which in turn is

142
00:10:55.840 --> 00:11:02.110
the context where the snack bar should be mounted on because offscreen context does not have access

143
00:11:02.110 --> 00:11:06.670
to this scaffold, because this scaffold here is rendered by the off screen.

144
00:11:07.000 --> 00:11:10.150
Now the context of the off screen is one level above that.

145
00:11:10.600 --> 00:11:15.910
So in order to have access to this scaffold on which the snack bar should be rendered, we have to dive

146
00:11:15.910 --> 00:11:21.250
into a widget which is inside that scaffold and the context of that which it is then the right one.

147
00:11:21.490 --> 00:11:23.890
And that's just the case for off for him.

148
00:11:24.970 --> 00:11:29.320
So with that, we should now at least see an error message, if I click sign up and I do, the email

149
00:11:29.320 --> 00:11:31.590
address is badly formatted now.

150
00:11:31.660 --> 00:11:36.220
It looks like a valid email address to me, but it is does extra white space at the end here, which

151
00:11:36.220 --> 00:11:37.330
is causing problems.

152
00:11:37.750 --> 00:11:43.090
Now, this is a bad user experience that we are not able to authenticate because of this.

153
00:11:43.450 --> 00:11:49.570
So therefore I'll go back to the offering widget and when a forward user email and so on, I will actually

154
00:11:49.570 --> 00:11:56.060
call Trem on those values to remove any X's whitespace at the beginning and end.

155
00:11:56.470 --> 00:12:02.290
So this will remove any excess white space on email, password and username and therefore will not get

156
00:12:02.290 --> 00:12:05.940
this error because I will not send this whitespace as part of the email.

157
00:12:06.340 --> 00:12:10.100
So if we now click sign up, this closes and now we get no error.

158
00:12:10.420 --> 00:12:17.110
And now if we go back to the Web console and you refresh this user's list, you should see your user

159
00:12:17.110 --> 00:12:18.720
here with your email address.

160
00:12:18.730 --> 00:12:23.020
And this was now created by this firebase of SDK.

161
00:12:23.740 --> 00:12:25.270
So that's pretty, pretty sweet.

162
00:12:25.360 --> 00:12:27.490
We also saw the error handling in action.

163
00:12:27.490 --> 00:12:30.100
So that's great to end with that.

164
00:12:30.100 --> 00:12:31.850
We can create users.

165
00:12:32.350 --> 00:12:33.670
That's a nice first step.

166
00:12:33.680 --> 00:12:40.060
They are now stored and this token, which is sent back by Firebase, is already managed by the FIREBASE

167
00:12:40.060 --> 00:12:40.510
package.

168
00:12:40.540 --> 00:12:41.920
We don't need to do anything, dear.

169
00:12:42.100 --> 00:12:47.240
It will even be automatically added to outgoing requests which were later going to send.

170
00:12:47.470 --> 00:12:52.720
So that's entirely happening behind the scenes, which is super, super awesome and takes a lot of work

171
00:12:52.720 --> 00:12:53.360
away from us.

172
00:12:53.980 --> 00:12:57.430
However, the authentication process is not fully finished.

173
00:12:58.000 --> 00:13:02.520
We will later also add image upload, but that will follow well, later.

174
00:13:02.770 --> 00:13:08.160
But one thing I want to do immediately is stored a user name and that's currently not happening.

175
00:13:08.170 --> 00:13:11.020
We're getting the user name, but we're not doing anything with it.

176
00:13:11.350 --> 00:13:13.450
So let's make sure we also store the user name.

