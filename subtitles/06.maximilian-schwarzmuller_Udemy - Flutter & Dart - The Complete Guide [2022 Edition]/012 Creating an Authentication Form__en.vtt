WEBVTT
1
00:00:02.260 --> 00:00:05.660
So time to continue with our forum here.

2
00:00:05.920 --> 00:00:12.220
There are a couple of places where you could start all start with the validation and with collecting

3
00:00:12.220 --> 00:00:13.960
all the user inputs.

4
00:00:14.650 --> 00:00:21.340
And for that, let's start with the very first text form field here for the email address there, I

5
00:00:21.340 --> 00:00:29.890
will add the validator argument, which is a function that validates the user input when prompted to.

6
00:00:30.730 --> 00:00:36.730
So we get the value here, which is the value entered by the user, and we can return a string, which

7
00:00:36.730 --> 00:00:42.970
will then be shown as an error message if we detect an error or return null if we have no error.

8
00:00:43.880 --> 00:00:49.610
So the validation logic of when I apply here is very simple, I'll check if value is empty.

9
00:00:52.050 --> 00:00:56.670
And a very, very, very naive email address validation.

10
00:00:57.120 --> 00:01:04.920
I'll check if the value does not contain hence the exclamation mark at the beginning does not contain

11
00:01:05.430 --> 00:01:08.560
at symbol if either of the two is true.

12
00:01:08.790 --> 00:01:15.570
So if it is empty or if we don't have an at in the value, then I'll return an error text where I say

13
00:01:15.570 --> 00:01:18.240
please enter a valid email.

14
00:01:19.580 --> 00:01:21.080
Address like this.

15
00:01:22.900 --> 00:01:28.830
Else, if we make it past this, if statement here, I will return null because then everything is all

16
00:01:28.830 --> 00:01:29.160
right.

17
00:01:31.370 --> 00:01:37.190
Now for the password there, of course, on the password, we also should add some validation.

18
00:01:38.260 --> 00:01:45.490
So let's at this validator function here and here, I'll check if the value is empty, same check as

19
00:01:45.490 --> 00:01:53.200
before and I'll also check the length if the length of the password is, let's say, smaller than six

20
00:01:53.200 --> 00:01:54.580
or smaller than seven.

21
00:01:54.880 --> 00:01:58.470
That, by the way, is also the minimum length firebase ones.

22
00:01:58.630 --> 00:02:03.310
So if it's smaller, if it's shorter than seven, then I'll return.

23
00:02:04.340 --> 00:02:10.400
And sorry, that's the username I want to check on the password, so I'll cut it and added on the password.

24
00:02:10.669 --> 00:02:14.150
So here, if we're shorter than seven, I'll say.

25
00:02:15.140 --> 00:02:23.030
Password must be at least seven characters, long and only otherwise I'll return null here.

26
00:02:26.160 --> 00:02:28.110
And here we need a semicolon.

27
00:02:29.090 --> 00:02:34.970
So now with that back to the user name field here, we have a validator where we also get the value

28
00:02:35.210 --> 00:02:37.520
and it's up to you which validation logic you want.

29
00:02:37.520 --> 00:02:43.110
I'll check for emptiness or also if the value length is, let's say, shorted in four.

30
00:02:43.340 --> 00:02:51.200
So if you have a very short username, then I will say, please enter at least four characters.

31
00:02:52.090 --> 00:02:55.510
And otherwise, justice and the other validators will return null.

32
00:02:56.390 --> 00:03:01.550
So we got these validators, but right now they're never going to get triggered now, they should be

33
00:03:01.550 --> 00:03:06.410
triggered when the user presses this submit button here, this race button.

34
00:03:07.720 --> 00:03:11.600
And we can trigger them all simultaneously through that forum.

35
00:03:11.620 --> 00:03:14.110
That's what you all learned earlier in the course.

36
00:03:14.710 --> 00:03:16.950
For that, we need such a global key.

37
00:03:16.990 --> 00:03:19.500
You might remember this from the forums module.

38
00:03:20.170 --> 00:03:27.390
We create a forum for that by instantiating a global key which will contain some form state in the end.

39
00:03:27.640 --> 00:03:33.220
And with this generic type, we can signal to darte that eventually some form state will be managed

40
00:03:33.220 --> 00:03:37.020
with this key and we need to connect this key to the forum.

41
00:03:37.030 --> 00:03:43.600
So for that, we go to the forum widget and set the key argument of the forum to our form key.

42
00:03:44.700 --> 00:03:48.330
And with that form, he added, we can also add a submit function.

43
00:03:49.650 --> 00:03:55.440
I'll name it, tries, submit, underscore, try to submit to Mark that it's private and should only

44
00:03:55.440 --> 00:04:01.020
be called from inside diskless and in to submit will use that form key.

45
00:04:02.260 --> 00:04:08.200
To validate the forum, we get access to the forum through the current state property and then we can

46
00:04:08.200 --> 00:04:13.780
call validate, and this will trigger all the validators of all the text form fields in the form.

47
00:04:15.160 --> 00:04:21.220
This will return a result, it will tell us whether the form is valid or not, so the store is in a

48
00:04:21.220 --> 00:04:21.880
final.

49
00:04:22.890 --> 00:04:24.990
Variable or constant, therefore?

50
00:04:26.180 --> 00:04:30.200
And we can then check if the form is valid and only if it is valid.

51
00:04:30.230 --> 00:04:37.400
So if all validators return, null, will continue and actually get the values and submit the form.

52
00:04:38.690 --> 00:04:46.190
Now, to get the values, we can again use the form key current state and call save, and what this

53
00:04:46.190 --> 00:04:53.390
will do is it will go to all the text form fields and on every text form field, it will trigger on

54
00:04:53.390 --> 00:04:54.170
saved.

55
00:04:55.360 --> 00:05:01.360
Function here, so we need to add this to every text form field to set up the logic that should run

56
00:05:01.510 --> 00:05:03.460
when the entire form is being saved.

57
00:05:04.240 --> 00:05:08.770
The function that is triggered gets a value, which is the value the user entered.

58
00:05:09.280 --> 00:05:12.370
And then in there we need to do something with that value.

59
00:05:12.790 --> 00:05:22.170
And that something I will do is I will store the entered value in a global or a class wide property.

60
00:05:22.840 --> 00:05:28.090
So for that, besides the Final Four key, I will add a string here, which is a true variable.

61
00:05:28.090 --> 00:05:31.750
So which is not constant, but variable user email.

62
00:05:32.830 --> 00:05:34.720
Which initially is an empty string, let's say.

63
00:05:35.680 --> 00:05:44.860
And I also get my user name here and also the user password, so we got these free properties to find

64
00:05:44.860 --> 00:05:49.090
here and these are the properties will now update you on safe methods.

65
00:05:49.360 --> 00:05:52.040
So, for example, said user email to value here.

66
00:05:52.090 --> 00:05:53.110
We know it's valid.

67
00:05:53.200 --> 00:05:56.890
Otherwise this wouldn't have executed because we only saved a forum.

68
00:05:56.890 --> 00:06:04.630
If we do have valid inputs and therefore we can save dented value, we don't need set state here because

69
00:06:04.780 --> 00:06:07.360
that state would only make one important difference.

70
00:06:07.390 --> 00:06:11.560
It would reevaluate the widget and possibly render the UI.

71
00:06:11.920 --> 00:06:15.910
But this is just some behind the scenes data which we need internally.

72
00:06:16.180 --> 00:06:23.080
And changing that data has no impact on the UI, so there is no need to re-evaluate and render the UI.

73
00:06:23.350 --> 00:06:24.910
Hence I'll just save it like this.

74
00:06:27.050 --> 00:06:33.260
Now, that's the logic we also need on all the other text form fields here for the username all set

75
00:06:33.500 --> 00:06:40.610
username equal to the entered value and here on the password, unsurprisingly, we set user password

76
00:06:40.610 --> 00:06:41.960
equal to the entered value.

77
00:06:44.100 --> 00:06:53.190
So all these properties are updated when safe is being called here, and therefore after safe was called,

78
00:06:53.400 --> 00:06:55.890
we can use those values to.

79
00:06:56.850 --> 00:07:01.060
Send our off request to Firebase or anything like that.

80
00:07:01.080 --> 00:07:03.210
We'll take care about this in a next step.

81
00:07:04.050 --> 00:07:11.790
Now, one other thing I want to do after validating before we actually save everything, I will use

82
00:07:11.790 --> 00:07:18.690
focus, scope, the focus scope class provided by flutter, which needs a context which we have available

83
00:07:18.690 --> 00:07:21.960
here in the state class to call unfocussed.

84
00:07:22.260 --> 00:07:27.810
But this will essentially just close the soft keyboard, which might still be open as soon as we submit

85
00:07:27.810 --> 00:07:33.360
the form so that the keyboard always closes because this will move the focus away from any input field

86
00:07:33.510 --> 00:07:35.550
to nothing, basically.

87
00:07:37.370 --> 00:07:44.780
And with all of that, for the moment, I'll just print user email here and I'll repeat this for user

88
00:07:45.410 --> 00:07:52.880
name and here for user password, so that we at least see the values and try to submit is now a method

89
00:07:52.910 --> 00:07:55.690
that should be connected to this race button here.

90
00:07:55.940 --> 00:08:03.080
So on prest will now point at Trie submit and we added like this without parentheses because we just

91
00:08:03.080 --> 00:08:08.720
want to point at it so that it's executed on our behalf when the buttons pressed by the user.

92
00:08:10.700 --> 00:08:18.080
If we save that and we go back and I enter some email address here and I leave out the username, but

93
00:08:18.080 --> 00:08:22.450
I do enter a password which is too short and I click login, you see these error messages.

94
00:08:22.760 --> 00:08:23.600
So that works.

95
00:08:24.410 --> 00:08:27.680
And if I then fix all these errors here.

96
00:08:28.550 --> 00:08:29.840
And I click login.

97
00:08:31.150 --> 00:08:36.340
It looks better and I clicked it twice, which is I see the outputs twice, so submitting and getting

98
00:08:36.340 --> 00:08:38.169
these inputs works and that's great.

99
00:08:39.280 --> 00:08:44.800
Now, of course, we don't just want to get and validate all these inputs, we also want to switch between

100
00:08:44.800 --> 00:08:46.510
log in and sign up mode.

101
00:08:47.140 --> 00:08:54.300
The mode we're in will change the labels on the buttons, but it will also change the text form fields.

102
00:08:54.610 --> 00:08:59.770
We only want to fetch the username if we are signing up, not if we're logging in.

103
00:09:00.720 --> 00:09:06.810
So therefore, in the off forum, we should also manage some state Hensel add a new variable here.

104
00:09:09.030 --> 00:09:16.570
Bull, or actually a bar here, because we can infer to type as we can down there since I set an initial

105
00:09:16.570 --> 00:09:21.790
type so AVAR, which I'll name is Log in, which initially, let's say is true.

106
00:09:21.910 --> 00:09:26.080
And this controls however, we currently are in log in mode or in sign up mode.

107
00:09:27.140 --> 00:09:32.300
And this should be changed whenever this flat button at the bottom is pressed, so whenever Desplat

108
00:09:32.300 --> 00:09:33.910
button here is pressed, I want to switch.

109
00:09:34.430 --> 00:09:44.810
So here in this anonymous function here, we can set is log in equal to what it's currently not to reverse

110
00:09:44.810 --> 00:09:51.290
it, but that should now be wrapped in a set state calls so that the UI is also updated because when

111
00:09:51.290 --> 00:09:52.910
we change the IS log in mode.

112
00:09:52.940 --> 00:09:54.790
This does affect the UI.

113
00:09:54.830 --> 00:09:57.800
So this needs to go into a set state called.

114
00:09:59.870 --> 00:10:03.410
Now, login, for example, has an impact on this text here.

115
00:10:04.720 --> 00:10:12.220
There we can check if is log in is true and with a ternary expression, we can return a different value

116
00:10:12.220 --> 00:10:18.130
for when it's true, then for when it's not true, because when it's true, we can switch to the Sign-Up

117
00:10:18.130 --> 00:10:18.460
Mode.

118
00:10:18.610 --> 00:10:23.230
So then we want to show create new account because that's the alternative to logging in.

119
00:10:23.680 --> 00:10:29.230
Otherwise, if it's false, we are in sign-off mode and we want to allow the user to switch to log in

120
00:10:29.230 --> 00:10:29.530
mode.

121
00:10:29.740 --> 00:10:34.630
So maybe a text like I already have an account is appropriate then.

122
00:10:35.840 --> 00:10:42.440
And also here for the race button, if we are in log-in mode, I want to show the log in text, but

123
00:10:42.440 --> 00:10:47.540
otherwise, if we are in sign up mode, I want to show sign up or sign up like this.

124
00:10:50.440 --> 00:10:56.860
And if we now safeties, we can click this button and these labels update now the user name field,

125
00:10:56.860 --> 00:11:00.840
as I mentioned, is all the only required if we are signing up.

126
00:11:01.300 --> 00:11:05.770
So this entire text form field here should only be added conditionally.

127
00:11:06.160 --> 00:11:13.270
And we can do this with this pretty nice dart, Syntex, where we add if statement in disarray in this

128
00:11:13.270 --> 00:11:14.710
widget array for to column.

129
00:11:15.190 --> 00:11:22.210
And this item is then added and removed dynamically to and from the list based on the condition in our

130
00:11:22.210 --> 00:11:22.820
IF statement.

131
00:11:23.260 --> 00:11:29.230
So here I can check if we're not in log in mode, log in.

132
00:11:30.430 --> 00:11:35.830
And only if we are not the field thereafter will be added to the array.

133
00:11:35.860 --> 00:11:38.210
So the value thereafter will be added to the array.

134
00:11:38.320 --> 00:11:45.080
So only if this is not true, this text from field will be part of the Cullum's array if this is true.

135
00:11:45.520 --> 00:11:46.540
So it is log.

136
00:11:46.540 --> 00:11:48.380
It is true and therefore this is false.

137
00:11:48.430 --> 00:11:49.720
This will not be added.

138
00:11:50.560 --> 00:11:55.270
Now you see some blue squiggly lines here because this is a dart feature which is only available since

139
00:11:55.270 --> 00:11:56.290
Worsham to free.

140
00:11:56.650 --> 00:11:58.360
You might not have those lines.

141
00:11:58.360 --> 00:12:04.450
If you do have them, you can go to perspectival and simply increase that minimum STK where you want

142
00:12:04.450 --> 00:12:05.980
here to Tuborg free.

143
00:12:06.370 --> 00:12:09.160
And with that just goes away, it rebuilds.

144
00:12:09.160 --> 00:12:16.660
And now you will see that if I click here, you'll see also that this input here appears and disappears.

145
00:12:16.690 --> 00:12:17.650
So that's pretty nice.

146
00:12:18.220 --> 00:12:19.840
But you will also notice a bug.

147
00:12:20.110 --> 00:12:23.740
You see, if I'm in logging mode, we got a password entered.

148
00:12:24.190 --> 00:12:27.460
But if I click on create new account that moves to username.

149
00:12:27.940 --> 00:12:33.580
So actually the value and username now switches between the username field and the password field.

150
00:12:34.120 --> 00:12:38.020
And that happens because we dynamically add and remove a text form field.

151
00:12:38.260 --> 00:12:44.860
And inside of this array, Flutter is not able to efficiently differentiate between these fields, which

152
00:12:44.860 --> 00:12:46.120
are always the same widget.

153
00:12:47.120 --> 00:12:52.730
I also covered this earlier in the course, and you might remember that keys are a solution here.

154
00:12:53.000 --> 00:12:59.050
Keys allow Flutter to uniquely identify an element if you have similar elements next to each other.

155
00:12:59.780 --> 00:13:05.300
So we can add a key here to all these text from fields and we can create a value key, which basically

156
00:13:05.300 --> 00:13:08.060
allows us to hard code our own identifier.

157
00:13:08.540 --> 00:13:13.820
And here we could add email on the email text form field and on the username text from field.

158
00:13:13.820 --> 00:13:20.150
We add a username value key and on the password field we add a password key.

159
00:13:20.870 --> 00:13:24.380
And with that you'll see that this bug is no longer dear.

160
00:13:24.380 --> 00:13:31.490
If I now add Maximilien here in the username, if I now switch, you see it's gone in login mode and

161
00:13:31.490 --> 00:13:36.800
it's all Zygon here because we removed the widget in the meantime, but it doesn't jump between password

162
00:13:36.800 --> 00:13:37.460
and username.

163
00:13:37.470 --> 00:13:39.410
So this bug is fixed.

164
00:13:40.290 --> 00:13:47.320
And with that fixed side note, you will also see that, for example, the password and on persists.

165
00:13:47.730 --> 00:13:50.860
So if I enter this, you will see I can switch and we keep it.

166
00:13:51.300 --> 00:13:59.340
So with that fixed, we now can work on really submitting that data and creating an actual user with

167
00:13:59.340 --> 00:14:00.150
Firebase.

