WEBVTT
1
00:00:02.180 --> 00:00:09.350
The app we built thus far works, but there is one thing which we can change for which I at least want

2
00:00:09.350 --> 00:00:16.850
to have you think about on the orders screen, we change this to be a stateful widget simply because

3
00:00:16.850 --> 00:00:17.720
I wanted to use it.

4
00:00:17.720 --> 00:00:18.410
It stayed here.

5
00:00:18.530 --> 00:00:23.930
And by the way, as I mentioned in a couple of annotations at the top of the video, during the videos,

6
00:00:24.200 --> 00:00:27.340
if you are using listen, Falls is we're doing it here.

7
00:00:27.590 --> 00:00:29.240
You don't even need Dettelbach.

8
00:00:29.390 --> 00:00:34.250
And you would be fine running that code without that future Delate around it.

9
00:00:34.250 --> 00:00:36.920
So you could actually get rid of all of that.

10
00:00:37.460 --> 00:00:41.930
Of course, you then can't away use a wait here, though, because you're not in the async function.

11
00:00:41.930 --> 00:00:44.600
And turning this into a async function is not what you should do.

12
00:00:44.900 --> 00:00:51.830
But of course you could then use then year to run your code that should run once the future is complete.

13
00:00:52.040 --> 00:01:00.260
So you could move that set state call here into here and does first set say said state call is obsolete

14
00:01:00.530 --> 00:01:01.980
because we don't need that.

15
00:01:02.720 --> 00:01:06.290
This will run before build runs without that future delayed work around.

16
00:01:06.470 --> 00:01:11.020
So we can just set is true then have this here and this will work as well.

17
00:01:11.030 --> 00:01:13.790
If you use listen falls here.

18
00:01:14.250 --> 00:01:20.450
That's also the difference to model wrote off and so on, which didn't work here and it stayed there.

19
00:01:20.450 --> 00:01:22.610
We simply don't have such a list, an option.

20
00:01:22.610 --> 00:01:28.160
The provider package simply internally gives you an option to opt out of certain functionalities that

21
00:01:28.160 --> 00:01:32.630
would normally be connected with the inherited widget and dust tunnel, which is established with the

22
00:01:32.630 --> 00:01:41.300
help of context and with these missing features which you deliberately opt out of with lists and false.

23
00:01:41.390 --> 00:01:49.070
You can use provider of context here because you basically use only a limited set of the features of

24
00:01:49.070 --> 00:01:51.170
that inherited widget thing behind the scenes.

25
00:01:51.590 --> 00:01:52.970
So you could do that here.

26
00:01:52.970 --> 00:01:54.820
You could do this in all places with provider.

27
00:01:54.840 --> 00:02:00.380
If you can't use lists and falls on things like Motor Rutan's on, that's not supported there.

28
00:02:00.830 --> 00:02:02.890
But that's not the main thing I wanted to focus on.

29
00:02:02.900 --> 00:02:05.060
It's just something I again want to mention here.

30
00:02:05.540 --> 00:02:11.660
The core thing I wanted to mention is that we're building a stateful widget here simply such we can

31
00:02:11.690 --> 00:02:13.880
use an estate state to initialize our data.

32
00:02:13.970 --> 00:02:19.280
And I think that makes sense because we want to have a place in our app where we can make that call,

33
00:02:19.280 --> 00:02:22.250
which only runs once when this screen gets rendered.

34
00:02:22.580 --> 00:02:28.280
For example, making that fetch to build method would be horrible because that method runs way too often.

35
00:02:28.460 --> 00:02:34.760
And actually we would even enter an infinite loop if we start calling Sad State and er or if we then

36
00:02:34.760 --> 00:02:37.850
fetched our orders and build runs again and we start fetching again.

37
00:02:37.850 --> 00:02:41.310
And so making the fetch and build certainly is not an option.

38
00:02:42.080 --> 00:02:48.440
There is, however, an alternative to turning this into a stateful widget and using in its state.

39
00:02:48.620 --> 00:02:51.740
And it's that alternative which I now want to show you.

40
00:02:52.370 --> 00:02:57.320
So let me comment this out here in its state, and therefore we have an interstate method, which,

41
00:02:57.410 --> 00:03:02.980
of course, could also remove a let me show you that alternative here in that body.

42
00:03:02.990 --> 00:03:08.570
In the end, the content we render depends on the question whether we're still fetching data or whether

43
00:03:08.570 --> 00:03:10.040
we already got a response.

44
00:03:10.070 --> 00:03:10.390
Right.

45
00:03:11.030 --> 00:03:17.090
So what we can do here is we can use a special widget which is built into flutter, and that's the future

46
00:03:17.090 --> 00:03:18.050
builder widget.

47
00:03:18.710 --> 00:03:24.280
The future builder widget takes a future and then automatically starts listening to that.

48
00:03:24.290 --> 00:03:31.370
So it adds the then and the catch error methods for you, you could say, and it takes a builder which

49
00:03:31.370 --> 00:03:38.270
will get the current snapshot to current state of your future so that you can build different content

50
00:03:38.270 --> 00:03:40.040
based on what your future return.

51
00:03:40.940 --> 00:03:43.490
So here we can set up a future.

52
00:03:43.640 --> 00:03:50.750
And our future, of course, is the future written by a provider of fetch and set orders.

53
00:03:52.240 --> 00:03:59.320
So we can copy that line here and then go down here and configure that as the future, because veterans

54
00:03:59.320 --> 00:04:01.710
at orders, of course, does return a future.

55
00:04:02.470 --> 00:04:04.790
So that's the future for our future builder.

56
00:04:05.200 --> 00:04:11.290
Now, with the future set up, we also have to define a builder, and that's a builder, as you generally

57
00:04:11.290 --> 00:04:11.960
already know it.

58
00:04:11.980 --> 00:04:14.560
It's a function which gets executed on your behalf.

59
00:04:15.250 --> 00:04:16.540
It receives a context.

60
00:04:16.540 --> 00:04:22.540
And here you also receive an extra argument, and that's your current data currently returned by your

61
00:04:22.540 --> 00:04:23.080
futures.

62
00:04:23.320 --> 00:04:28.960
So a data snapshot, you could say this should then return to where did you want to build?

63
00:04:28.960 --> 00:04:30.450
And now what did you want to build?

64
00:04:30.490 --> 00:04:35.560
Of course, simply depends on the state of that future.

65
00:04:36.100 --> 00:04:42.190
So let's actually use the more complex or to longer function definition without that arrow so that we

66
00:04:42.190 --> 00:04:44.250
can write a multiline function body.

67
00:04:44.710 --> 00:04:50.410
And here we can, first of all, have a look at the data snapshot to find out what's in there.

68
00:04:51.870 --> 00:05:00.240
The data snapshot here is of type async snapshot, and if you add a dot after it, you see that there

69
00:05:00.240 --> 00:05:06.810
you can find out if you have an error object or the data which you retrieved and also what the current

70
00:05:06.810 --> 00:05:10.890
connection status and that tells you what the future is currently doing.

71
00:05:12.660 --> 00:05:18.300
You can compare this to Conexion state and for example, there you can find out whether it's currently

72
00:05:18.300 --> 00:05:18.920
waiting.

73
00:05:19.050 --> 00:05:25.710
So whatever the future hasn't resolved yet or whatever it's done and when it's done, you will have

74
00:05:25.710 --> 00:05:27.930
to check whether you've got data or an error.

75
00:05:28.590 --> 00:05:34.710
So here we can check if data snapshot connection state is currently equal to Conexion state waiting,

76
00:05:34.710 --> 00:05:36.570
which means we're currently loading.

77
00:05:36.930 --> 00:05:43.890
So in that case, of course, I want to return decentered widget here, so I will return this year.

78
00:05:45.880 --> 00:05:54.490
Else I know we're done and then you could check if data snapshot error is equal to null, in which case,

79
00:05:54.490 --> 00:05:59.350
you know, you have no error or your other way around if it's not equal to null, in which case you

80
00:05:59.350 --> 00:06:07.150
have an error and then you wonder, do you error handling stuff here, which I'll not do here, but

81
00:06:07.150 --> 00:06:12.430
which you could do alternatively else, you know, you have no error.

82
00:06:12.620 --> 00:06:16.490
And then here I want to return that list.

83
00:06:16.510 --> 00:06:19.220
You so let's get rid of that down there.

84
00:06:19.240 --> 00:06:21.090
Now we don't need is loading anymore.

85
00:06:21.550 --> 00:06:29.080
So here I'll just return the list U builder and in case we should have an error, I'll just return a

86
00:06:29.080 --> 00:06:29.980
standard widget.

87
00:06:31.090 --> 00:06:37.180
With a child race, a text, an error occurred just to have something on the screen and return some

88
00:06:37.180 --> 00:06:43.000
which in that case, but I focus on the success case and here we return our list view builder with the

89
00:06:43.000 --> 00:06:47.450
order data, which should now be available because we're done fetching our orders.

90
00:06:48.280 --> 00:06:53.710
Now, one important note about this set up, though, right now, we would enter an infinite loop here,

91
00:06:54.220 --> 00:06:59.400
because when does this done fetching and setting the orders, it will notify listeners.

92
00:06:59.410 --> 00:07:03.850
And since we set up a listener to orders here, our whole build method would run again.

93
00:07:04.000 --> 00:07:09.100
We would build a new feel future builder here and send a new request and that would keep on going.

94
00:07:09.820 --> 00:07:15.040
So the solution here is to not set up the listener up here for the audio data because we don't need

95
00:07:15.040 --> 00:07:22.000
the audio data up there, but simply use a consumer of the audio data in here in that case here, because

96
00:07:22.000 --> 00:07:23.900
only here I'm interested in order data.

97
00:07:24.280 --> 00:07:26.170
So here we can set up a consumer.

98
00:07:27.670 --> 00:07:29.590
Of our orders.

99
00:07:31.120 --> 00:07:37.180
Where we intend to find a builder, where we get the context and our order data then and now, here

100
00:07:37.180 --> 00:07:45.070
it is where I actually want to render that list, because that's now the place where we actually need

101
00:07:45.250 --> 00:07:48.640
our orders and we want to where we want to set up a listener.

102
00:07:50.900 --> 00:07:55.730
And important, of course, here you have all day the third argument, that child dead, static child,

103
00:07:55.730 --> 00:07:57.310
which never changes, which you could use.

104
00:07:58.100 --> 00:08:03.890
Now, we should have a set up which actually works and fetches our orders without entering an infinite

105
00:08:03.890 --> 00:08:04.310
loop.

106
00:08:04.460 --> 00:08:10.360
And just to check this, I'll also add a print statement here in the build method, building orders.

107
00:08:10.670 --> 00:08:13.370
So this should now not run all the time.

108
00:08:14.000 --> 00:08:15.730
Let's now see whether that works.

109
00:08:16.130 --> 00:08:18.560
So here I'll go to my orders.

110
00:08:18.770 --> 00:08:23.630
We see the Spiner, we see the orders, and back here we see that this was only executed once.

111
00:08:24.230 --> 00:08:31.340
And this is now the more elegant alternative to using a stateful widget just to fetch orders and show

112
00:08:31.340 --> 00:08:32.350
a loading spinner.

113
00:08:32.780 --> 00:08:38.990
And the advantage is also that we don't just save that useless transformation to a stateful widget.

114
00:08:39.169 --> 00:08:44.090
We also don't have to manage the loading state on our own because we're letting the future builder do

115
00:08:44.090 --> 00:08:46.300
that by checking the connections state.

116
00:08:47.210 --> 00:08:53.600
So now what we can do here, of course, is we can get rid of in its state and of course, is loading

117
00:08:53.600 --> 00:08:56.360
property, get rid of our estate class.

118
00:08:58.870 --> 00:09:00.370
And convert this your back.

119
00:09:01.250 --> 00:09:08.090
To a state less widget, as it was before, and now this is a very lean widget, of course.

120
00:09:09.380 --> 00:09:16.250
And we can do a hot refresh to have the same application as before, but now with a more elegant setup

121
00:09:16.250 --> 00:09:22.790
for our orders and obviously you could use such a future builder as we're using it here in your average,

122
00:09:22.790 --> 00:09:28.580
it's too eager to turn them back into status widgets or if you had reasons for making them stateful

123
00:09:28.580 --> 00:09:34.640
widgets, even in such cases, to not manage to is loading variable on your own, but instead let the

124
00:09:34.640 --> 00:09:35.670
future builder do that.

125
00:09:35.870 --> 00:09:41.390
I'll leave that here and I'll also leave the other approaches in this app so that you can see and check

126
00:09:41.390 --> 00:09:41.870
both.

127
00:09:42.080 --> 00:09:47.250
But using the future builder is definitely the approach I would recommend because it's so elegant and

128
00:09:47.250 --> 00:09:49.460
it utilizes the tools Flattr gives you.

129
00:09:50.850 --> 00:09:55.950
As a side note, it, of course, also avoids rebuilding this entire widget trigger just because the

130
00:09:55.950 --> 00:09:57.030
loading state changed.

131
00:09:57.170 --> 00:10:01.710
Instead, it will really just rebuild the parts that do need rebuilding.

132
00:10:01.740 --> 00:10:03.480
So that's another benefit we get here.

133
00:10:04.470 --> 00:10:08.650
So we added future Beyler here and here, everything works as intended.

134
00:10:08.790 --> 00:10:18.030
However, I want to highlight one potential issue you could be facing in other applications and therefore

135
00:10:18.030 --> 00:10:20.580
a better way of using future builder.

136
00:10:21.180 --> 00:10:25.820
The way we use it here works absolutely fine in this app and in this widget.

137
00:10:26.370 --> 00:10:33.030
But if you had something in this widget which cause us to build method to run again, some other state

138
00:10:33.030 --> 00:10:40.140
you're managing or anything like that, then fetch and set orders would of course, also be executed.

139
00:10:40.350 --> 00:10:45.840
Right, because they've build runs again, this entire code here runs again and therefore this method

140
00:10:45.840 --> 00:10:46.540
would run again.

141
00:10:47.250 --> 00:10:50.970
This, of course, means that a new future would be obtained here.

142
00:10:51.180 --> 00:10:56.280
And that, of course, in turn means that a new future would be obtained.

143
00:10:57.410 --> 00:11:05.240
And then, of course, in turn means that this HTP request is sent again and so on, and that is something

144
00:11:05.240 --> 00:11:11.570
we might want to avoid if just something else changed in this widget, if there is no reason to fetch

145
00:11:11.750 --> 00:11:18.440
new orders, let's say you were presenting an overlay, a dialogue to the user, and hence the build

146
00:11:18.440 --> 00:11:25.100
method executes again, you definitely don't want to fetch new orders just because something else changed

147
00:11:25.100 --> 00:11:27.470
in this widget, which doesn't affect the orders.

148
00:11:28.130 --> 00:11:34.550
Therefore, it is considered a better practice to obtain this future differently.

149
00:11:34.700 --> 00:11:40.790
Even though I will emphasize that again, this approach will not cause any problems here, since we

150
00:11:40.790 --> 00:11:44.860
have no other state changing logic in this widget here.

151
00:11:45.230 --> 00:11:52.070
But if you had that, a better way of getting and using that future would be to convert your orders

152
00:11:52.070 --> 00:11:57.710
screen to a state full widget, which I quickly do here with refactoring.

153
00:11:58.320 --> 00:12:05.810
And with that converted in your state clause, you should add a property of type future, for example,

154
00:12:05.810 --> 00:12:06.440
named.

155
00:12:07.400 --> 00:12:09.050
Orders future.

156
00:12:10.140 --> 00:12:14.790
Then you add a new method which returns a future which you could name.

157
00:12:15.870 --> 00:12:17.970
Obtain orders.

158
00:12:19.520 --> 00:12:29.870
Future like this and in this method, you then return the result of this call to fetch and set orders,

159
00:12:30.170 --> 00:12:32.030
which of course will give you a future.

160
00:12:32.510 --> 00:12:34.750
So you return this future here.

161
00:12:35.480 --> 00:12:43.970
Now as a last step, you should add in its state here and before you call super in its state, you set

162
00:12:44.270 --> 00:12:45.860
orders future.

163
00:12:46.130 --> 00:12:51.560
So this property is equal to the result of calling obtain orders future.

164
00:12:53.770 --> 00:12:59.770
So with that, we just have a clean way of getting our future and storing it in a property when this

165
00:12:59.790 --> 00:13:08.170
widget is created and then you use disorders, orders, future property in your build method as a future

166
00:13:08.170 --> 00:13:09.550
here for the future builder.

167
00:13:10.740 --> 00:13:18.450
By using this approach, you ensure that no new future is created just because your which it rebuilds

168
00:13:18.660 --> 00:13:21.200
again, this is not a scenario we have here.

169
00:13:21.390 --> 00:13:24.390
This widget won't rebuild unintendedly.

170
00:13:24.810 --> 00:13:30.990
But if you had a scenario data, which it could be rebuilt and you don't want to fetch new orders just

171
00:13:30.990 --> 00:13:38.160
because something else changed, then using this approach is better and ensures that no unnecessary

172
00:13:38.160 --> 00:13:39.840
HTP requests are sent.

173
00:13:40.110 --> 00:13:44.820
And therefore this is considered to be a good practice, which I also wanted to show you.

