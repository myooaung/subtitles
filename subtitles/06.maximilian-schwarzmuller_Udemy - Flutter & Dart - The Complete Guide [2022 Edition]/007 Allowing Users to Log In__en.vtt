WEBVTT
1
00:00:02.230 --> 00:00:04.440
Let's work on the login next

2
00:00:04.450 --> 00:00:10.030
and of course, also feel free to pause the video at this point and try it on your own first because the

3
00:00:10.030 --> 00:00:13.030
general flow is pretty similar to signing users up.

4
00:00:13.690 --> 00:00:19.260
So here's your chance to pause the video and thereafter, we'll do it together. Were you successful?

5
00:00:19.720 --> 00:00:24.950
Let's add login together. For that, first step is to have a look at the official docs and there at sign

6
00:00:24.950 --> 00:00:30.550
in with e-mail and password to find out what the right URL is. It's this URL which is pretty

7
00:00:30.730 --> 00:00:34.720
similar to the last one but this segment here actually differs.

8
00:00:34.720 --> 00:00:40.990
If you directly compare it, that here we're sending a request to sign up new user in the end

9
00:00:40.990 --> 00:00:47.710
and down there we're sending a request to verify password. So let's copy that URL, the data you

10
00:00:47.710 --> 00:00:49.650
attach as a body is the exact same,

11
00:00:49.660 --> 00:00:55.390
it also should be a post request with a JSON data and the data you get back is also almost exactly

12
00:00:55.390 --> 00:00:55.900
the same,

13
00:00:55.900 --> 00:00:59.430
there's just one extra field which won't be important for us though.

14
00:01:00.630 --> 00:01:09.180
So now we can go again to the auth.dart file and in there, add another method which of course will also

15
00:01:09.180 --> 00:01:12.250
yield a future which then eventually will yield nothing

16
00:01:12.300 --> 00:01:14.060
and that's the login method.

17
00:01:14.130 --> 00:01:19.860
Now since you need to send the same data, it makes sense to also accept password and e-mail here as inputs

18
00:01:20.490 --> 00:01:28.950
and add the async keyword to use async await and then here, you can basically copy the code from up there.

19
00:01:28.960 --> 00:01:35.140
The only difference is the URL and there as I mentioned, this one segment here, verify password

20
00:01:35.410 --> 00:01:36.830
instead of sign up new user,

21
00:01:36.850 --> 00:01:39.490
so let me add that there. The rest is the same,

22
00:01:39.490 --> 00:01:41.450
your key here obviously is the same

23
00:01:41.620 --> 00:01:44.290
and therefore, this should work,

24
00:01:44.290 --> 00:01:47.610
this is all because we're attaching the same data. Now hence

25
00:01:47.650 --> 00:01:49.740
and that's of course optional, if you didn't do that,

26
00:01:49.750 --> 00:01:53.930
that's ok, since we have pretty much the same code,

27
00:01:53.950 --> 00:01:57.880
we can of course add a new method above or below that one, doesn't matter,

28
00:01:57.910 --> 00:02:05.500
ordering doesn't matter here which actually returns a future which we could name authenticate,

29
00:02:05.500 --> 00:02:11.650
_authenticate because it should only be called from inside that file, have the async keyword there as well

30
00:02:11.650 --> 00:02:20.130
and what I expect here is my e-mail and my password and then also, my let's say URL's segment,

31
00:02:20.170 --> 00:02:30.380
so that one thing that actually changes and that in this method here, we could have our logic here, let's

32
00:02:30.380 --> 00:02:36.980
copy that into there and we replace that one segment with string interpolation and use the URL segment

33
00:02:36.980 --> 00:02:42.080
which is this dynamically passed in value here to send the request to the right URL and other

34
00:02:42.080 --> 00:02:42.530
than that,

35
00:02:42.530 --> 00:02:50.810
this should just work and of course here, I can also print json.decode response body to see whether

36
00:02:50.810 --> 00:02:52.130
it really works.

37
00:02:52.130 --> 00:02:57.080
So now we can use _authenticate and call that from inside sign up and login.

38
00:02:57.290 --> 00:03:01.760
So here I can now just call authenticate and forward the e-mail and the password

39
00:03:04.950 --> 00:03:13.290
and set up that special segment here at the end which for signing up of course is sign up new user. So I

40
00:03:13.300 --> 00:03:16.560
would pass this as a third argument here,

41
00:03:16.600 --> 00:03:17.440
sign up new user,

42
00:03:17.440 --> 00:03:25.570
that's the segment and for login, we do the same but our segment now is verify password, so we pass

43
00:03:25.570 --> 00:03:26.110
this

44
00:03:26.260 --> 00:03:29.190
and now we can also delete all that code here.

45
00:03:29.320 --> 00:03:32.950
Hence we have leaner sign up and login function, they do the same,

46
00:03:32.980 --> 00:03:38.410
only the path to which this gets sent differs. So with that, we're almost there.

47
00:03:38.410 --> 00:03:44.890
One thing I want to do though I want to return the calls to authenticate because authenticate will return

48
00:03:44.890 --> 00:03:50.160
a future which yields nothing because we await in there and we are using async await, so this returns

49
00:03:50.160 --> 00:03:57.670
a future and I want to return this future because this is the future which actually wraps our HTTP request

50
00:03:57.670 --> 00:03:59.360
and waits for it to complete.

51
00:03:59.380 --> 00:04:03.910
So in order to have our loading spinner work correctly, we want to return the future which actually does

52
00:04:03.910 --> 00:04:06.220
the work. Without return,

53
00:04:06.220 --> 00:04:11.000
we would also return a future but this wouldn't wait for the future of authenticate to do its job,

54
00:04:11.020 --> 00:04:16.120
this only happens if we return this future instead of the autogenerated one which we would get

55
00:04:16.120 --> 00:04:21.100
in this method because the future returned by authenticate is the future that awaits and that takes a

56
00:04:21.100 --> 00:04:22.089
bit longer.

57
00:04:22.150 --> 00:04:25.990
So let's make sure we return authenticate in both sign up and login

58
00:04:25.990 --> 00:04:30.280
and with that, we should be good to go and use that. Now

59
00:04:30.340 --> 00:04:34.890
I just got an error up there because of course here I'm using const but this is no longer const,

60
00:04:34.900 --> 00:04:37.390
we have the dynamic URL segment in there.

61
00:04:37.420 --> 00:04:40.230
So it's a runtime constant, not a compilation time constant,

62
00:04:40.420 --> 00:04:42.910
hence we should use final instead of const here

63
00:04:42.910 --> 00:04:44.530
and with that, this all works

64
00:04:44.530 --> 00:04:51.740
and now we can start using our newly added login method. For that, let's go back to the AuthScreen and

65
00:04:51.780 --> 00:04:58.930
there in the login branch of this if statement, we can awaits provider of and connect that to the

66
00:04:58.930 --> 00:05:03.890
nearest auth object, context with listen set to false of course

67
00:05:03.920 --> 00:05:11.080
and here I'll call login and forward the exact same data I have in there, authData e-mail and authData

68
00:05:11.110 --> 00:05:12.140
password,

69
00:05:12.190 --> 00:05:18.760
so it's pretty similar but sends the login request. And we can also see whether that works, if we go back

70
00:05:18.870 --> 00:05:20.410
and we go to login instead,

71
00:05:20.670 --> 00:05:25.220
I still have my credentials entered here so let me press login with this,

72
00:05:25.330 --> 00:05:26.500
let's see,

73
00:05:26.500 --> 00:05:27.410
looks pretty good,

74
00:05:27.490 --> 00:05:34.300
got back a response and this indicates that this indeed worked and we did login. So we're able to login,

75
00:05:34.300 --> 00:05:37.710
before we now continue and change the screen we're showing,

76
00:05:37.720 --> 00:05:43.450
let's make sure we handle errors because right now for example if I would try to sign up again with

77
00:05:43.450 --> 00:05:51.360
the same e-mail address, you see I actually get an error here but it would be nice to not just print it

78
00:05:51.380 --> 00:05:58.460
here but to actually show that on the screen to the user, give the user an idea that something went wrong.

79
00:05:58.760 --> 00:06:00.770
So error handling is the next thing we'll do.

