WEBVTT
1
00:00:02.120 --> 00:00:08.780
So time to work on the favorites feature, let's start with the favorites

2
00:00:08.810 --> 00:00:11.540
screen. On the favoritesScreen,

3
00:00:11.570 --> 00:00:14.620
thus far I only say the favorites,

4
00:00:14.640 --> 00:00:20.930
it's not bad but maybe we want to show some more meaningful text if we have no favorites, like you have

5
00:00:20.930 --> 00:00:27.110
no favorites yet, start adding some

6
00:00:27.110 --> 00:00:33.350
but of course we also want to allow the user to add some and then also output the favorites here. For

7
00:00:33.350 --> 00:00:33.590
that,

8
00:00:33.590 --> 00:00:39.020
the first question is how do we save or where do we save

9
00:00:39.080 --> 00:00:43.080
which items, which meals the user marked as favorites?

10
00:00:43.250 --> 00:00:49.460
We could add a new field in our dummy data and therefore in the meal model here where we have something

11
00:00:49.460 --> 00:00:56.740
like a bool, isFavorite which can be edited.

12
00:00:57.050 --> 00:00:59.750
We could do that but it's a bit unrealistic,

13
00:00:59.750 --> 00:01:07.970
in reality we would probably fetch some data from a server and if we store the this is our favorite

14
00:01:07.970 --> 00:01:13.970
data directly on the meal, then this would not be scoped to our user,

15
00:01:13.970 --> 00:01:18.820
instead every user that fetches the data from the server would now have this as a favorite,

16
00:01:18.920 --> 00:01:22.710
so storing this on the meal itself might not be perfect.

17
00:01:22.730 --> 00:01:28.460
We could do it here of course for this dummy app but I'd rather use a different approach. In the main.dart

18
00:01:28.460 --> 00:01:31.880
file here where we manage our filters,

19
00:01:31.880 --> 00:01:34.970
I also want to manage a list of favorites,

20
00:01:35.000 --> 00:01:37.690
that's the approach I prefer.

21
00:01:37.700 --> 00:01:41.120
So there we have our list of meals which are the available meals,

22
00:01:41.120 --> 00:01:49.010
I want to have a second list of meals which are our favorited meals. Now by default,

23
00:01:49.010 --> 00:01:55.320
that's an empty list because at the beginning we have no favorite meals.

24
00:01:55.320 --> 00:02:01.620
So by default, we have no favorite meals but now I can forward these favorite meals here to our favorites

25
00:02:01.740 --> 00:02:09.350
screen. The problem with that of course is that the favoritesScreen is not part of our route registration

26
00:02:09.360 --> 00:02:14.820
here but it's part of our TabsScreen, right? In the TabsScreen,

27
00:02:14.930 --> 00:02:23.060
we get access to the favoritesScreen. So we can simply forward favorite meals to the TabsScreen and

28
00:02:23.060 --> 00:02:25.160
in the TabsScreen here,

29
00:02:25.430 --> 00:02:38.060
we now can accept this as an input. So here, we get our list of meals and the name here is favorite meals

30
00:02:39.220 --> 00:02:44.680
and meal is the model which we have to import by going to the models folder and then pointing at the

31
00:02:44.680 --> 00:02:46.500
meal.dart file

32
00:02:46.510 --> 00:02:51.760
and of course we add the constructor here to save our favorite meals.

33
00:02:51.760 --> 00:02:58.060
So now we have the favorite meals in the TabsScreen and there, we can forward them to the favorites

34
00:02:58.120 --> 00:03:04.060
screen which we are creating here. So we can go to favoritesScreen and now forward

35
00:03:04.060 --> 00:03:04.550
widget.favoriteMeals.

36
00:03:05.170 --> 00:03:11.710
So now in the favoritesScreen, we can also accept that and again in the state management module, we'll learn

37
00:03:12.040 --> 00:03:18.250
a different way of managing and passing our data around so that we don't have to go through multiple

38
00:03:18.250 --> 00:03:21.960
layers of widgets and pass our data through constructors

39
00:03:21.970 --> 00:03:24.250
but for the moment, it is what it is.

40
00:03:24.310 --> 00:03:28.070
So here, we also have a list of meals in the favoritesScreen,

41
00:03:28.300 --> 00:03:37.250
therefore we import our meal model from the models folder and I will name this favorite meals here as

42
00:03:37.250 --> 00:03:44.830
well, of course you could pick a different name and favoritesScreen receives these favorite meals

43
00:03:45.130 --> 00:03:46.340
as an input,

44
00:03:46.450 --> 00:03:52.120
so as an argument here in the constructor. Now we can work with the favorite meals here,

45
00:03:52.150 --> 00:03:58.330
however we'll have a problem in the TabsScreen, widget is not available here

46
00:03:58.330 --> 00:04:00.930
when we initialize our properties.

47
00:04:01.060 --> 00:04:07.090
You can use the widget property in the build method, you can use it in initState but you can't use

48
00:04:07.090 --> 00:04:10.450
it here when you initialize these properties.

49
00:04:10.450 --> 00:04:12.510
It's a problem that's easy to solve

50
00:04:12.520 --> 00:04:18.100
however, since we're in a stateful widget and therefore in the state object here, we can simply add

51
00:04:18.250 --> 00:04:24.940
initState here, the initState method and do our initialization of pages in there.

52
00:04:24.940 --> 00:04:31.840
So cut that code here and create this in a non-final way

53
00:04:32.100 --> 00:04:39.390
and then here initState, set pages equal to that list because here in initState, widget is available,

54
00:04:39.630 --> 00:04:42.600
it will still run before build executes,

55
00:04:42.600 --> 00:04:48.180
so we'll have no problem there with that screen not being loadable or anything like that.

56
00:04:48.420 --> 00:04:54.030
So we will have everything set up when build runs but we avoid that issue of widget, of that property

57
00:04:54.150 --> 00:04:59.540
not being available at the point of time we're initializing this class.

58
00:04:59.550 --> 00:05:05.770
And in general by the way, when you're initializing a class in this property, you can't refer to any other

59
00:05:05.780 --> 00:05:06.370
property,

60
00:05:06.370 --> 00:05:12.480
so for example I couldn't set this equal to pages here either. You can't refer to other properties because

61
00:05:12.480 --> 00:05:15.790
the creation of the class isn't fully finished and

62
00:05:15.840 --> 00:05:19.500
that's also why we can't refer to the widget property.

63
00:05:19.530 --> 00:05:25.380
So with that however by using initState, this should all work and now we can forward our favorite

64
00:05:25.380 --> 00:05:32.080
meals from the main file to the TabsScreen and from the TabsScreen to the favoritesScreen.

65
00:05:32.370 --> 00:05:39.330
Now in the main.dart file, we only need to add some logic to add or remove meals to and from the favorites.

66
00:05:40.890 --> 00:05:44.890
That logic for adding and removing favorites should be managed in

67
00:05:44.900 --> 00:05:51.440
the new method here in the main.dart file in our MyAppState class.

68
00:05:51.480 --> 00:05:55.890
The method will not return anything and I'll name it toggleFavorite.

69
00:05:55.920 --> 00:06:03.270
Now here, I expect to get the ID of the meal which is a string that should be turned into a favorite

70
00:06:03.300 --> 00:06:06.240
or unfavorited

71
00:06:06.330 --> 00:06:13.460
and with that information received, the goal now is to add it to this favorite meals list.

72
00:06:13.500 --> 00:06:18.660
However of course only add it if it's not already part of that list because if it already is part of

73
00:06:18.660 --> 00:06:25.350
that list, then I want to remove that meal because it's a toggle method that we should either add or remove.

74
00:06:26.450 --> 00:06:34.880
We can do this with favorite meals and then index where. This checks whether a certain element is part

75
00:06:34.910 --> 00:06:41.310
of that list and then automatically gives us the index of that meal if it is part,

76
00:06:41.330 --> 00:06:44.850
if it's not part, the index will simply be -1.

77
00:06:44.960 --> 00:06:49.760
So I'll store this in a final variable, existing index

78
00:06:52.380 --> 00:06:58.710
and here as so often, you pass a function which receives the meal so which runs on every element on the

79
00:06:58.710 --> 00:07:01.330
list your running index where on

80
00:07:01.530 --> 00:07:07.680
and this should return true or false, so I will compare the meal ID with the meal ID I'm getting

81
00:07:08.280 --> 00:07:14.670
and if I find a meal in favorite meals where this condition is met, then I know that then I will get

82
00:07:14.790 --> 00:07:20.600
the index of that meal in the favorite meals list and I need that index to then remove it there

83
00:07:20.630 --> 00:07:27.000
because if a meal with that ID is already part of favorite meals, then I want to remove it because

84
00:07:27.030 --> 00:07:28.520
it's a toggle method.

85
00:07:28.680 --> 00:07:36.910
If I don't find a meal, then existing index will be -1 and I know that I have to add that meal.

86
00:07:36.960 --> 00:07:45.720
So now here, I'll check if existing index is greater or equal than 0 because of it's -1, then I

87
00:07:45.720 --> 00:07:46.690
didn't find anything,

88
00:07:46.710 --> 00:07:52.430
if it's greater or equal than zero, than I know that I did find a meal and therefore if it is greater, then

89
00:07:52.440 --> 00:07:59.240
I want to remove a meal. So I will call set state here and in that function we pass to set state, I'll call

90
00:07:59.250 --> 00:08:06.300
favorite meals and use removeAt, which takes the index of the element I want to remove and that's my

91
00:08:06.300 --> 00:08:12.230
existing index. So this will now remove the element at that index from the favorite meals list

92
00:08:12.330 --> 00:08:18.360
and since it's in initState, it will rebuild, therefore rebuild the material app with the routes table

93
00:08:18.570 --> 00:08:25.380
and pass an updated favorite meals list to TabsScreen because that's all rebuilt. Now

94
00:08:25.390 --> 00:08:33.720
else if I didn't find the element, then I will also use set state and I will then use favorite meals add

95
00:08:33.809 --> 00:08:43.010
to add an element and there, I want to reach out to my dummy meals or to the available meals but I will

96
00:08:43.010 --> 00:08:48.860
use dummy meals so that filtering doesn't play a role because you should also be able to toggle recipes

97
00:08:49.040 --> 00:08:52.340
which are not matching your filters.

98
00:08:52.340 --> 00:09:01.160
So here, I'll use dummy meals and then first where to find the first element, the first meal in our data

99
00:09:01.160 --> 00:09:06.790
source, in our meal source which has the same ID with that good old function we pass there

100
00:09:06.800 --> 00:09:15.180
where we get the meal and where I then simply return meal ID equals meal ID.

101
00:09:15.180 --> 00:09:22.730
So that gives me the meal with the same ID in our data source, the first meal I find with that ID

102
00:09:22.730 --> 00:09:24.890
is then added to favorite meals.

103
00:09:24.890 --> 00:09:30.680
Now again, that of course means that whenever I toggle a meal as a favorite or turn it into a non-favorite,

104
00:09:31.340 --> 00:09:36.260
then this build method is called and therefore the entire app is rebuilt.

105
00:09:36.260 --> 00:09:43.730
Now this is of course not optimal as you can imagine because switching the favorite status of a meal

106
00:09:44.090 --> 00:09:50.690
should not necessarily impact the entire app and therefore this is the number one topic we'll toggle

107
00:09:50.780 --> 00:09:52.550
after this course section

108
00:09:52.550 --> 00:09:58.490
once we dive into state management because for bigger apps, you definitely need a more elegant way. For

109
00:09:58.490 --> 00:09:59.240
the moment,

110
00:09:59.240 --> 00:10:05.630
this is fine but it is definitely something we'll improve later in the next course section.

111
00:10:05.690 --> 00:10:10.970
So for the moment, it's fine that we rebuild everything though and we just need to make sure that toggle

112
00:10:10.970 --> 00:10:18.980
favorite actually reaches the detail page of a meal because there, I want to be able to toggle the favorite

113
00:10:18.980 --> 00:10:26.630
status. In the MealDetailScreen widget, instead of having that floating action button which deletes

114
00:10:26.810 --> 00:10:34.120
this meal, which was just a demo for showing you how you can pop data and so on, instead of having this,

115
00:10:34.220 --> 00:10:41.930
I want to use this floating action button to let the user favorite or unfavorite a meal.

116
00:10:44.690 --> 00:10:50.360
So on this floating action button here, when this gets pressed,

117
00:10:50.460 --> 00:10:57.560
I want to call this toggleFavorite function here in main.dart, this method.

118
00:10:57.870 --> 00:11:03.900
Hence we should pass a reference to this method down to the MealDetailScreen

119
00:11:03.900 --> 00:11:09.900
here in the constructor in our routes table and now in the MealDetailScreen there, I just need to

120
00:11:09.900 --> 00:11:20.800
accept this, so I'll add a new property here, a function, toggleFavorite seems to be a fitting name,

121
00:11:20.810 --> 00:11:22.860
of course you can pick any name you want

122
00:11:23.030 --> 00:11:26.160
and now add the constructor and bind the data,

123
00:11:26.180 --> 00:11:28.860
the argument we're getting to that property

124
00:11:29.150 --> 00:11:32.990
and then we can use toggleFavorite down there on the floating action button

125
00:11:33.230 --> 00:11:39.080
when this is pressed and simply use the reference to the function here without parentheses so that the

126
00:11:39.080 --> 00:11:43.220
function gets executed when the user presses the button.

127
00:11:43.220 --> 00:11:48.050
Now of course, we can also find a better icon and the icon should also reflect whether this currently

128
00:11:48.140 --> 00:11:50.270
is a favorite or not

129
00:11:50.270 --> 00:11:56.240
and for that I'll add another method in main because main has the information about which items are

130
00:11:56.240 --> 00:11:59.400
favorites and which not. There

131
00:11:59.420 --> 00:12:01.320
I'll add another function,

132
00:12:01.320 --> 00:12:06.380
another method in the main.dart file in the MyAppState

133
00:12:06.380 --> 00:12:13.850
class here, another method which will return a boolean and which I'll name isMealFavorite because it will

134
00:12:13.850 --> 00:12:20.950
check if a meal is a favorite or not. It receives the ID of a meal and then here I want to return true

135
00:12:20.950 --> 00:12:27.400
if that ID is part of my favorite meals list. So we can check if favorite meals

136
00:12:27.490 --> 00:12:31.150
and now there is an any method which you can use on lists,

137
00:12:31.150 --> 00:12:33.070
so you're learning a lot about list methods

138
00:12:33.080 --> 00:12:34.660
here in this course too.

139
00:12:34.660 --> 00:12:41.470
So there is an any method which you can use on any Dart list that also and so often takes a function which

140
00:12:41.470 --> 00:12:51.950
it runs on every list element and here, I want to return meal.id equals ID and what I'm doing

141
00:12:51.950 --> 00:12:57.980
here is I'm checking if the meal I'm looking at, because this function runs for every meal, has the ID

142
00:12:58.130 --> 00:13:02.830
I'm checking, I'm checking if that meal with that ID here is a favorite.

143
00:13:02.900 --> 00:13:09.260
So I'm running this function on every meal I have in favorite meals and any returns true if I find any

144
00:13:09.260 --> 00:13:15.170
element in here where this is true and it will stop after the first element it found. So it will essentially

145
00:13:15.170 --> 00:13:16.190
give me true

146
00:13:16.280 --> 00:13:23.840
if I have a meal in favorite meals which has the ID I get here in isMealFavorite and I will pass

147
00:13:23.840 --> 00:13:30.500
this method here, a reference a pointer at this method, to the MealDetailScreen as well, as a second

148
00:13:30.500 --> 00:13:39.370
argument and in the MealDetailScreen, we therefore now can also store this in a property, final function

149
00:13:39.370 --> 00:13:41.620
which I'll also name is favorite

150
00:13:41.630 --> 00:13:46.260
maybe, I get this here as a second argument, is favorite

151
00:13:46.270 --> 00:13:52.700
and now we can call is favourite to find out whether this meal we're currently looking at is a favorite or

152
00:13:52.700 --> 00:13:53.930
not.

153
00:13:53.930 --> 00:14:02.360
We can do that here in the floating action button to show a different icon based on whether it is a

154
00:14:02.360 --> 00:14:03.520
favorite or not.

155
00:14:03.680 --> 00:14:09.760
We can call is favorite and we just have to forward the ID of the meal we're looking at. Now

156
00:14:09.770 --> 00:14:15.770
that ID is something we have because we're extracting it here into meal ID based on the data we're

157
00:14:15.770 --> 00:14:17.590
getting when this route is loaded,

158
00:14:17.600 --> 00:14:23.270
we're getting this with the modal route of context approach. So meal ID is a variable we create here

159
00:14:23.270 --> 00:14:26.920
in build which has the ID of the meal we're looking at.

160
00:14:26.960 --> 00:14:33.200
So I parse meal ID to is favorite and this will return true if the meal is a favorite and return

161
00:14:33.200 --> 00:14:34.000
false

162
00:14:34.010 --> 00:14:34.550
otherwise.

163
00:14:37.690 --> 00:14:43.700
Now if it returns true and I'll use a ternary expression here, then the icon I want to render here

164
00:14:45.560 --> 00:14:49.650
should use the star icon which is that filled star,

165
00:14:49.730 --> 00:14:56.200
otherwise I want to use the star_border icon which is the empty star, so that when this is a favorite,

166
00:14:56.210 --> 00:15:00.650
we see the filled star, if it's not a favorite yet we see these empty star and

167
00:15:00.690 --> 00:15:06.380
when we tap this, this will of course change because then we'll add this meal to our favorites, thanks

168
00:15:06.380 --> 00:15:12.500
to toggleFavorite which is linked to that method here in the main.dart file, to that toggleFavorite

169
00:15:12.740 --> 00:15:20.890
method there. So that was a long story, with that we're not yet outputting our favorites on the favorites

170
00:15:20.950 --> 00:15:22.410
screen though.

171
00:15:22.540 --> 00:15:28.020
So on the favoritesScreen, to output that, we first of all need to check if we have favorites.

172
00:15:28.030 --> 00:15:31.150
So here I'll check if favorite meals,

173
00:15:31.180 --> 00:15:36.820
so if this property which is a list of favorites we're getting, if it is empty, we can do this with is

174
00:15:36.820 --> 00:15:41.640
empty property which Flutter or which Dart gives us automatically on every list

175
00:15:41.820 --> 00:15:46.200
and if it is empty, then I want to return this centered text here in the end.

176
00:15:47.380 --> 00:15:50.450
Else, I'll return something else in my build method,

177
00:15:50.530 --> 00:15:59.320
I'll return a list of meals. So then I want to return basically the same list I have here in the category

178
00:15:59.320 --> 00:16:06.330
meals screen. There, we have that ListView builder function call,

179
00:16:06.440 --> 00:16:11.150
I'll just copy that because that's exactly what I want to return here in the favorites

180
00:16:11.150 --> 00:16:18.520
screen. Of course, meal item is a widget I need to import in order to use it here,

181
00:16:18.730 --> 00:16:27.100
so I'll import from the widgets folder, meal_item.dart and now we have to pass in that data

182
00:16:27.410 --> 00:16:38.320
and of course instead of displayedMeals, that is favorite meals. So here, I'll use favorite meals in all

183
00:16:38.320 --> 00:16:40.860
these places down there, favorite meals index

184
00:16:40.930 --> 00:16:48.720
in all these places and when we remove an item, that's not required anymore simply. We can get rid

185
00:16:48.720 --> 00:16:49.460
of that,

186
00:16:49.470 --> 00:16:53.720
I only had this in there temporarily to show you how to pass data back,

187
00:16:53.730 --> 00:16:55.290
we don't need it anymore,

188
00:16:55.290 --> 00:17:01.980
we can also get rid of that remove item thing here in the CategoryMealsScreen and of course now also

189
00:17:01.980 --> 00:17:05.500
go to the meal item and not expect this anymore.

190
00:17:05.579 --> 00:17:12.960
So there on the constructor, we shouldn't expect this remove item thing here anymore, so let's remove

191
00:17:12.990 --> 00:17:16.839
that argument here and remove that final property

192
00:17:16.890 --> 00:17:20.740
and of course, comment this out,

193
00:17:20.760 --> 00:17:24.680
we don't need that anymore. With that, connection here crashed,

194
00:17:24.690 --> 00:17:33.030
let me restart the app here and we should now have a setup where we hopefully are able to mark our meals

195
00:17:33.060 --> 00:17:38.040
as favorites and see them in the favorites tab and then also of course switch them back to not being

196
00:17:38.040 --> 00:17:38.620
a favorite

197
00:17:38.640 --> 00:17:44.060
if you want to. So let's wait for this to finish and let's then see it in action.

198
00:17:44.130 --> 00:17:44.940
So here I am and

199
00:17:44.980 --> 00:17:48.260
if I go to favorites, I see you have no favorites yet

200
00:17:48.600 --> 00:17:51.990
which makes sense. If I now go here to quick and easy,

201
00:17:53.610 --> 00:18:04.030
then I get an error if I try to see the detail page and the problem I have is actually if you have

202
00:18:04.030 --> 00:18:10.600
a look at the error message, that type string void is not a subtype of type empty to void.

203
00:18:10.900 --> 00:18:18.970
So this means somewhere, we have a function where either we passed a string as an argument and it expected

204
00:18:19.150 --> 00:18:24.490
no argument or it expected a string as an argument and we passed nothing, it has to be one of the two

205
00:18:24.490 --> 00:18:31.090
things and we do, toggleFavorite. Here in meal detail,

206
00:18:31.150 --> 00:18:37.090
I am pointing at toggleFavorite and this is coming from the main.dart file and there, toggleFavorite

207
00:18:37.090 --> 00:18:39.890
indeed expects to get my ID

208
00:18:39.910 --> 00:18:45.750
which is a string. So just pointing at it as I'm doing it here will not work,

209
00:18:45.760 --> 00:18:51.930
instead we have to pass in a concrete value here. So we will wrap this in an anonymous function

210
00:18:52.090 --> 00:18:58.530
and then here I want to forward my meal ID of course because we need that in order to set the ID,

211
00:18:58.830 --> 00:19:03.110
to toggle this as a favorite. So with that, let's restart it

212
00:19:03.890 --> 00:19:08.020
and now if we go to quick and easy, toast hawaii, now I can load this page and

213
00:19:08.020 --> 00:19:10.320
now let me click that empty star,

214
00:19:10.390 --> 00:19:18.070
it's empty because it's not a favorite yet and now it's filled out. And let me do it the same for maybe,

215
00:19:19.410 --> 00:19:23.960
let's say here, for the delicious orange mousse,

216
00:19:24.070 --> 00:19:24.980
also a favorite

217
00:19:24.990 --> 00:19:27.940
now and let's go back now to the favorites tab

218
00:19:27.970 --> 00:19:30.090
and there we see these two items

219
00:19:30.220 --> 00:19:36.520
and now I can of course also go there and make this a non-favorite, the delicious orange mousse and

220
00:19:36.520 --> 00:19:44.610
if I go back, still part of that screen though.

221
00:19:44.650 --> 00:19:47.140
Now if I go to categories, I'm back to favorites,

222
00:19:47.140 --> 00:19:48.880
now it's gone.

223
00:19:48.880 --> 00:19:54.370
So why are items still a part of the favoritesScreen if I mark them as non-favorites

224
00:19:54.370 --> 00:19:55.660
when I then go back?

