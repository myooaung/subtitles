WEBVTT
1
00:00:02.170 --> 00:00:07.600
So we get the firebase admin at the Firebase Functions package available here in this function's folder

2
00:00:07.630 --> 00:00:10.090
for our JavaScript code to interact with.

3
00:00:10.270 --> 00:00:16.420
So this is now really all just a JavaScript world has nothing to do with Flutter because this function's

4
00:00:16.420 --> 00:00:22.900
code will later run on one of firebases servers so that in the end we can run some code there when something

5
00:00:22.900 --> 00:00:24.610
changes in the database, for example.

6
00:00:25.630 --> 00:00:32.049
So how could this functional look like if we dive into the official firebase stocks, which is always

7
00:00:32.049 --> 00:00:33.040
a great idea for that?

8
00:00:33.970 --> 00:00:36.460
So if you search for firebase cloud functions.

9
00:00:38.070 --> 00:00:43.710
You find, of course, plenty of documentation and what you will find here under trigger background

10
00:00:43.710 --> 00:00:49.950
functions is that you can use cloud fire stored triggers so that you can basically run a function as

11
00:00:49.950 --> 00:00:54.090
a response to some event that happened in your cloud forest or database.

12
00:00:54.390 --> 00:00:56.810
And as you can see, there are other triggers as well.

13
00:00:56.820 --> 00:01:02.130
You could also run a function because some file was uploaded, for example, with cloud storage triggers.

14
00:01:02.550 --> 00:01:06.720
But I care about a function that I want to run because something changed in the database.

15
00:01:06.960 --> 00:01:14.010
And here we got four triggers on create an update on the left and on right on right runs whenever on

16
00:01:14.010 --> 00:01:16.560
create an update or delete is triggered.

17
00:01:16.980 --> 00:01:22.560
Well, and Diovan triggers only run for the respective operation since I want to run some code whenever

18
00:01:22.560 --> 00:01:24.060
a new message is stored.

19
00:01:24.070 --> 00:01:31.110
So whenever a new message was sent, I'm interested in the on create trigger and you can see how it

20
00:01:31.110 --> 00:01:33.210
works in the examples below.

21
00:01:33.900 --> 00:01:40.140
In the end, we need to import this firebase functions package into our code file with this line of

22
00:01:40.140 --> 00:01:40.470
code.

23
00:01:40.950 --> 00:01:45.060
This is already happening here at the very top and there after.

24
00:01:45.060 --> 00:01:50.370
We need to export such a function here, which is set up with functions start fires store.

25
00:01:52.050 --> 00:01:56.470
Then that document and then a path to the document to which you want to listen.

26
00:01:56.490 --> 00:02:00.380
So where you want to listen to the creative end and then on right.

27
00:02:00.390 --> 00:02:02.120
Or in our case, on create.

28
00:02:02.430 --> 00:02:06.900
So I will copy this code here and moved it here into my function code.

29
00:02:07.970 --> 00:02:14.780
Like this and replace this with on create, and here the path is a different one, I'm interested in

30
00:02:14.780 --> 00:02:21.290
the Chett collection, but there in any message now you can name this however you want, but you need

31
00:02:21.290 --> 00:02:27.860
to curly braces to signal to Firebase that this is a placeholder that you don't know the exact document

32
00:02:27.860 --> 00:02:31.600
ID, but that instead you care about any document in there.

33
00:02:31.850 --> 00:02:37.480
So whenever a new document is added, no matter which idea it has, this uncreate function should run.

34
00:02:37.490 --> 00:02:38.750
That is what we're writing here.

35
00:02:39.440 --> 00:02:46.310
And that means that, well, whenever something new is added in our chat collection, whenever a new

36
00:02:46.310 --> 00:02:50.360
document is added here, so whenever a new message is added, our function will run.

37
00:02:51.610 --> 00:02:58.840
So maybe to see how that works, let's just cancel log, which is the JavaScript equivalent to print

38
00:02:58.840 --> 00:03:07.120
in flutter, let's just Kansa log the data we're getting upon this event and the data we are getting.

39
00:03:08.870 --> 00:03:16.130
Is described down there, you can get the data after the operation, complete it so often, the creation

40
00:03:16.130 --> 00:03:20.570
of the document finished with change after data, as you can learn here.

41
00:03:22.100 --> 00:03:25.760
And this is all just JavaScript code, in case you're wondering what it is.

42
00:03:25.790 --> 00:03:31.030
As you can see, it's not too far away from flutter, but for example, CONSED works differently.

43
00:03:31.040 --> 00:03:32.530
So don't be confused about that.

44
00:03:32.540 --> 00:03:34.250
It's all JavaScript code here.

45
00:03:35.400 --> 00:03:41.150
So I'm interested in the data after the riot finished, so I will copy, just change that after that

46
00:03:41.250 --> 00:03:43.050
data function call here.

47
00:03:44.280 --> 00:03:50.700
And lock the result here with console lock, so I have passed a value that is returned by calling data

48
00:03:50.910 --> 00:03:53.400
to console lock so that we can output it here.

49
00:03:54.350 --> 00:03:59.000
So now that we've finished writing this function, we have to deploy it, which means we have to upload

50
00:03:59.000 --> 00:04:02.970
it to firebase servers because it's not going to run on our local machine.

51
00:04:02.990 --> 00:04:04.990
It's going to run on firebase servers.

52
00:04:05.600 --> 00:04:12.380
So here in your project where you previously ran, Firebase in it, now run Firebase deploy, and this

53
00:04:12.380 --> 00:04:17.959
will take your function and upload it and initialize it to an on firebase servers.

54
00:04:20.740 --> 00:04:24.820
So you can see this process here, it can take a couple of seconds.

55
00:04:25.700 --> 00:04:31.010
And it will let you know once it's finished, now, what you actually see is that I'm getting an error

56
00:04:31.010 --> 00:04:35.060
here, a 403 unknown error now for free.

57
00:04:35.060 --> 00:04:37.610
Looks like I was denied access.

58
00:04:39.050 --> 00:04:41.840
So you can try running Firebase Log in if you're getting this.

59
00:04:43.700 --> 00:04:50.060
And thereafter, I reran Firebase deploy and now it looks better, looks like it's being uploaded.

60
00:04:51.800 --> 00:04:59.330
And with the deploy complete message, it guess what completed, so now our function is running on firebase

61
00:04:59.330 --> 00:05:04.820
servers and now whenever we have a new message in the database, the function should trigger there now

62
00:05:04.820 --> 00:05:09.330
to monitor our function and its output in our firebase web console.

63
00:05:09.350 --> 00:05:11.000
We can go back to functions.

64
00:05:12.120 --> 00:05:13.350
And reload this page.

65
00:05:14.330 --> 00:05:19.040
And you should see your function here, if you don't see it immediately, wait a few minutes and then

66
00:05:19.040 --> 00:05:19.800
try reloading.

67
00:05:20.060 --> 00:05:21.520
So that would be your function.

68
00:05:22.010 --> 00:05:27.410
And you can also view the logs of this function to see what's going on there.

69
00:05:27.710 --> 00:05:32.570
Now, as always, by the way, when you're working with FIREBASE features, check their pricing.

70
00:05:33.660 --> 00:05:39.240
For example, here in the case of cloud functions, you got a certain free tier, a certain free usage

71
00:05:39.240 --> 00:05:42.370
amount, and if you exceed that, you would be charged.

72
00:05:42.660 --> 00:05:44.070
So make sure you check that.

73
00:05:44.880 --> 00:05:47.030
So here we see some logs from this functional.

74
00:05:47.100 --> 00:05:48.680
And now let's see if something changes there.

75
00:05:48.700 --> 00:05:51.780
If I send a new message, does this work?

76
00:05:52.560 --> 00:06:00.420
If I send this message, it shows up here, of course, and it should show up in our database there.

77
00:06:00.420 --> 00:06:05.760
If we have a look at that chart collection, we should see this does this work message here.

78
00:06:06.670 --> 00:06:12.820
And what about our function now, the locks can always take some time until they update, so you might

79
00:06:12.820 --> 00:06:19.690
want to reload, wait a bit and come back at a later point of time, but eventually you should see something

80
00:06:19.690 --> 00:06:19.930
here.

81
00:06:20.870 --> 00:06:28.040
And I actually do see something I see an error cannot read property data of undefined, so our function

82
00:06:28.040 --> 00:06:31.300
executed, but something went wrong there.

83
00:06:31.370 --> 00:06:34.420
We were not able to retrieve some data here.

84
00:06:34.850 --> 00:06:39.550
So it looks like calling data on changed after did not work.

85
00:06:40.430 --> 00:06:48.050
Now, this was simply a little mistake from my side in the uncreate case, we actually don't have to

86
00:06:48.230 --> 00:06:49.870
do this change after a thing.

87
00:06:49.880 --> 00:06:54.950
Instead, we get a snapshot of the data anyways so we can just call snapshot.

88
00:06:56.470 --> 00:07:02.650
Top data, as you can see here, I was in the on update case where you, of course, have two states

89
00:07:02.650 --> 00:07:08.180
before and after the update, but if you create something, you just have to snapshot.

90
00:07:08.710 --> 00:07:11.920
So I decided to leave doesn't because this is easy to overlook.

91
00:07:12.220 --> 00:07:18.370
And therefore, now if we access a snapshot here, we should be able to really get the data we're interested

92
00:07:18.370 --> 00:07:18.520
in.

93
00:07:19.180 --> 00:07:22.630
So just to double check this, let's redeploy this.

94
00:07:22.810 --> 00:07:25.770
Whenever you make a change locally, you have to redeploy.

95
00:07:26.110 --> 00:07:29.520
So let's redeploy this and let's now validate this again.

96
00:07:29.680 --> 00:07:32.230
So let's wait for the redeployment to finish.

97
00:07:33.530 --> 00:07:36.440
And now that it finished, let me send another message.

98
00:07:38.220 --> 00:07:38.910
Like that.

99
00:07:39.860 --> 00:07:46.700
And let's then go back to our loks here and again, you might want to reload here, wait a little bit,

100
00:07:46.700 --> 00:07:52.980
reload again until the new log shows up here and eventually you should get your data.

101
00:07:53.210 --> 00:07:55.550
Now, we still have a warning here or an error.

102
00:07:55.580 --> 00:07:56.860
We'll take care about this later.

103
00:07:57.080 --> 00:08:00.470
But what we see here is this piece of data.

104
00:08:01.350 --> 00:08:06.030
So we see that's the data we got, and that's exactly the data that was stored in a database.

105
00:08:06.060 --> 00:08:09.990
So we get our username here, we get the text that is pretty cool.

106
00:08:09.990 --> 00:08:13.590
And that's the data which I now want to send as part of my notification.

107
00:08:14.370 --> 00:08:15.390
Now, one extra note.

108
00:08:15.390 --> 00:08:21.150
We also see that we got an error, that the functio returned undefined and that it should return a value

109
00:08:21.150 --> 00:08:21.900
or a promise.

110
00:08:21.900 --> 00:08:25.920
Instead, a promise is essentially the same as a future in dart.

111
00:08:25.950 --> 00:08:30.000
So in JavaScript, that's called a promise and our function does never.

112
00:08:30.540 --> 00:08:32.090
Now, that's not a huge problem.

113
00:08:32.100 --> 00:08:34.630
We can simply return anything here at the moment.

114
00:08:34.799 --> 00:08:40.460
This will soon change anyways, because now, of course, I don't want to return anything instead.

115
00:08:40.470 --> 00:08:43.020
Now I want to send my message.

116
00:08:43.380 --> 00:08:47.670
And for this we'll use that firebase amnestic, which we also have.

