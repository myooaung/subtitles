WEBVTT
1
00:00:02.230 --> 00:00:08.500
So we added this image validation and we show an error if we don't have the image, we also added the

2
00:00:08.500 --> 00:00:10.430
firebase storage package already.

3
00:00:10.720 --> 00:00:14.500
So let's now make sure we can also upload an image.

4
00:00:15.540 --> 00:00:23.490
For that back and forth for him, we do collect that user image file and we validated here, and if

5
00:00:23.490 --> 00:00:29.610
we make it past this validation and everything is valid, we want to make sure that we do actually also

6
00:00:29.610 --> 00:00:35.640
provides that image file to the off screen, because in the off screen we send all that data to Firebase

7
00:00:35.730 --> 00:00:39.930
and uploading the image will now simply be an extra step we should perform here.

8
00:00:40.900 --> 00:00:46.630
We can't, of course, past the image Kutty of screen, just as we passed the other data here, when

9
00:00:46.630 --> 00:00:51.970
we call that government function, which we get from the off screen besides passing in user email,

10
00:00:51.970 --> 00:00:55.990
password and username, we can also pass in our user image file.

11
00:00:56.260 --> 00:01:01.030
And this might be null if we are logging in, but we can simply make sure that we don't care about the

12
00:01:01.030 --> 00:01:03.560
file in the off screen, in the log, in case.

13
00:01:04.300 --> 00:01:08.880
Now, of course, this currently doesn't meet or doesn't fit our function signature.

14
00:01:09.280 --> 00:01:15.640
We should make it clear here when we define you submit a form that after the username we expect to get

15
00:01:16.030 --> 00:01:17.770
an image file.

16
00:01:18.580 --> 00:01:20.720
But now we also need to adjust this in the off screen.

17
00:01:20.740 --> 00:01:22.030
Of course, dear.

18
00:01:22.270 --> 00:01:26.950
We also need to add this on the submit off form method here.

19
00:01:27.220 --> 00:01:33.910
We should expect an image file and file, as you learned, is of course, imported from darte.

20
00:01:34.790 --> 00:01:36.320
I like this.

21
00:01:38.250 --> 00:01:42.990
So now we get this image file and yes, it might be null in the log in case, but we don't care about

22
00:01:42.990 --> 00:01:44.940
this, we won't use the image there anyways.

23
00:01:45.480 --> 00:01:49.650
But with that provided here, it should be available if we are signing up.

24
00:01:49.860 --> 00:01:55.020
And therefore, here in the sign up process, we now want to upload the image and I want to upload the

25
00:01:55.020 --> 00:02:02.010
image before we write all that extra data to our users collection, because a path to the uploaded image

26
00:02:02.100 --> 00:02:06.600
should also be something we also write to that users collection in the future.

27
00:02:06.930 --> 00:02:14.220
So we want to start or perform the image upload here before we write our extra user data to the users

28
00:02:14.220 --> 00:02:14.690
collection.

29
00:02:15.570 --> 00:02:18.900
Now, for that, we need this extra package.

30
00:02:20.170 --> 00:02:28.330
The firebase storage package and from there to Firebase Storage DARD File and that firebase storage

31
00:02:28.330 --> 00:02:30.240
package can now be used here.

32
00:02:31.000 --> 00:02:37.210
We use firebase storage and again, we got an instance property here just as we have it on fire store

33
00:02:37.210 --> 00:02:38.290
and firebase off.

34
00:02:38.650 --> 00:02:43.930
And this gives us access to this one global firebase storage instance, which is pre configured with

35
00:02:43.930 --> 00:02:45.280
the token and with everything.

36
00:02:46.000 --> 00:02:49.480
And there we now can call Reath.

37
00:02:50.730 --> 00:02:57.090
Reath gives us access to our route cloud storage bucket and to fully understand us, let's actually

38
00:02:57.090 --> 00:03:01.040
have a look at the firebase cloud storage in the firebase web console.

39
00:03:01.050 --> 00:03:04.660
First there, we had a look at authentication and database.

40
00:03:04.980 --> 00:03:06.900
Now we're going to work with the storage.

41
00:03:07.380 --> 00:03:09.690
So let's click on storage to see how that looks like.

42
00:03:10.330 --> 00:03:14.280
Now, as always here, you can learn more about it through the docs and so on.

43
00:03:14.610 --> 00:03:16.350
But we can just click on get started.

44
00:03:16.950 --> 00:03:22.920
And first of all, just as with the FIREBASE database, just as with Firestorm, we need to set up some

45
00:03:22.920 --> 00:03:25.520
rules and we can simply click next year.

46
00:03:25.770 --> 00:03:30.410
This will be the default rules and they will be fine for us and click on Down thereafter.

47
00:03:30.540 --> 00:03:36.350
And this does something which is called create a bucket in firebase storage.

48
00:03:36.360 --> 00:03:39.330
You can upload any kind of files, not just images.

49
00:03:39.510 --> 00:03:42.450
And those files will be organized in so-called buckets.

50
00:03:42.690 --> 00:03:45.700
And your firebase project comes with one bucket.

51
00:03:45.900 --> 00:03:51.390
Now in that bucket, you can have sub folders and so on, but you will have this one main bucket.

52
00:03:52.050 --> 00:03:54.870
And this main bucket is what Reft will refer to.

53
00:03:54.870 --> 00:03:59.040
If you call it like this, it will basically point at the root bucket.

54
00:04:01.710 --> 00:04:04.530
Now, in here, you can store your files.

55
00:04:04.560 --> 00:04:06.140
You can also upload them manually.

56
00:04:06.180 --> 00:04:09.670
You can create a folder here, as you can see, and you can do more things.

57
00:04:09.690 --> 00:04:13.230
You can also add a new bucket, but that would cost you extra money.

58
00:04:13.230 --> 00:04:17.850
So I wouldn't recommend doing it here, especially since you can create sub folders.

59
00:04:17.880 --> 00:04:21.290
One bucket should be fine for many kinds of projects.

60
00:04:21.959 --> 00:04:26.370
Now, just as your database, your storage also can be protected with rules.

61
00:04:26.370 --> 00:04:32.700
And the rules generally work in a similar way as they do on Firestar, where you can dive into the docks

62
00:04:32.700 --> 00:04:33.810
to learn all about them.

63
00:04:33.810 --> 00:04:37.090
But you can see it looks pretty much the same here.

64
00:04:37.110 --> 00:04:42.660
However, we don't operate on collections and documents, but instead on our buckets.

65
00:04:42.900 --> 00:04:45.840
And we only have one bucket here, but you could have more than one.

66
00:04:46.020 --> 00:04:49.830
And then our pops in the buckets, so our folders and files.

67
00:04:50.340 --> 00:04:52.550
But besides that, the rules are very similar.

68
00:04:52.560 --> 00:05:00.030
And here, for example, we're saying read, write, access to any file is granted if you are authenticated.

69
00:05:00.420 --> 00:05:05.550
So unauthenticated requests which are not coming from Lockton users are denied.

70
00:05:05.550 --> 00:05:11.040
And that's, of course, great, because we don't want anyone to upload files or to look at our files.

71
00:05:11.190 --> 00:05:14.160
Only authenticated users should be able to do so.

72
00:05:14.760 --> 00:05:16.340
And I will go one step further.

73
00:05:16.470 --> 00:05:19.920
I will not grant right to exist here, but only create access.

74
00:05:21.060 --> 00:05:27.240
So that deleting and changing files is actually not possible for anyone, because in December, let's

75
00:05:27.240 --> 00:05:33.480
say, we want to allow users to upload files and to view images, but we don't want them to be able

76
00:05:33.480 --> 00:05:34.550
to delete files.

77
00:05:34.680 --> 00:05:38.760
We can always do this manually here from the console if we want to clean up storage.

78
00:05:39.000 --> 00:05:41.670
But users won't be able to do this in this app.

79
00:05:41.910 --> 00:05:47.040
But of course, you can have a very granular control and you can fine tuned this to your needs and to

80
00:05:47.040 --> 00:05:51.510
your application needs with help of the official docs if you need a different setup.

81
00:05:52.200 --> 00:05:57.810
So with that, however, upload and viewing of files should be enabled for authenticated users.

82
00:05:58.170 --> 00:06:00.960
And now let's go back to code with Reft.

83
00:06:00.980 --> 00:06:05.550
We got access to this route bucket and on the roof we can now call child.

84
00:06:06.180 --> 00:06:12.870
Child simply allows us to set up a new path and that allows us to control where we want to store a file

85
00:06:13.110 --> 00:06:15.530
or from where we want to read a file.

86
00:06:16.110 --> 00:06:17.550
And here that would be a string.

87
00:06:17.820 --> 00:06:21.240
I will point at a user images pop.

88
00:06:21.810 --> 00:06:26.120
Now, this does not exist yet, but it should then automatically create such a path.

89
00:06:26.220 --> 00:06:31.710
So that will create a user images folder in the end in which the image should be stored.

90
00:06:32.460 --> 00:06:32.940
And Fernet.

91
00:06:32.940 --> 00:06:36.720
I'll change another child call because this year.

92
00:06:37.750 --> 00:06:39.830
Should be the folder where the image is stored.

93
00:06:39.940 --> 00:06:42.250
Now we need to give the image a name.

94
00:06:42.790 --> 00:06:49.840
So here, if I then store this as image PMG, it would create a image you file in that folder.

95
00:06:50.710 --> 00:06:55.390
Now, of course, I don't want to hardcoded the image name here, though, because otherwise we would

96
00:06:55.630 --> 00:06:59.380
quickly run into name clashes where we have multiple images with the same name.

97
00:06:59.710 --> 00:07:01.680
Instead, I want a unique name per image.

98
00:07:02.020 --> 00:07:05.740
And of course, all I want to make it easy to map this image to a user.

99
00:07:05.920 --> 00:07:08.900
Hence we can simply use the user ID as a image name.

100
00:07:09.550 --> 00:07:12.140
Now we get that ID from all the results here.

101
00:07:12.300 --> 00:07:19.390
There we have that user field with the UID field and UID is just a string.

102
00:07:19.750 --> 00:07:23.680
And all we need to do now is we need to append default extension.

103
00:07:23.980 --> 00:07:29.740
And that should be Chamique because by default images taken with the device camera will be of type Chamique.

104
00:07:31.840 --> 00:07:38.860
So what this does now is it sets up a pointer at this POV on our storage, but right now, of course,

105
00:07:38.860 --> 00:07:40.460
this path does not exist.

106
00:07:40.480 --> 00:07:44.440
We never have that folder, nor do we have that file there yet.

107
00:07:44.710 --> 00:07:46.720
And this alone won't start the upload.

108
00:07:47.020 --> 00:07:52.780
Instead, this returns a so-called storage reference, which is a pointer at a certain path.

109
00:07:53.900 --> 00:07:56.870
So we can say the word is in a constant.

110
00:07:57.320 --> 00:08:03.620
And now starts the actual upload to that path, which we now configured by calling Reath.

111
00:08:04.680 --> 00:08:11.580
Put file, and this will do what the name implies, it will put a file to that path and it will use

112
00:08:11.580 --> 00:08:15.180
this last segment of the path as the file name.

113
00:08:16.080 --> 00:08:18.900
So in this case, the user ID with Chamique at the end.

114
00:08:20.130 --> 00:08:25.230
Now, the argument we need to provide to put file is the file we want to put their.

115
00:08:26.440 --> 00:08:30.070
And that's, of course, this image we're getting here.

116
00:08:34.010 --> 00:08:35.880
So I'll just pass image here.

117
00:08:36.650 --> 00:08:42.679
Now, you also can provide a second argument, which is storage metadata, which you could set where

118
00:08:42.679 --> 00:08:46.850
you, for example, can add custom metadata, set the language of the file.

119
00:08:47.210 --> 00:08:48.760
But at the moment, I don't want to do that.

120
00:08:48.920 --> 00:08:51.200
Instead, I just want to upload the file like this.

121
00:08:51.320 --> 00:08:56.710
And of course, putting a file takes a bit longer, which is why this returns a storage upload task.

122
00:08:57.050 --> 00:09:01.790
This is not the same as a future, but it has the same idea.

123
00:09:01.790 --> 00:09:08.420
Basically, unfortunately, we can't await it because it isn't a future, but we can actually.

124
00:09:09.970 --> 00:09:17.230
Use the on complete property on it, which will give us a future and we can await this now, the task

125
00:09:17.230 --> 00:09:19.860
itself without on complete also has more.

126
00:09:19.960 --> 00:09:25.720
We can check if it's currently in progress, if it's cancelled, we can listen to various events which

127
00:09:25.720 --> 00:09:29.650
are omitted, which, for example, allows us to track the upload progress.

128
00:09:30.010 --> 00:09:36.340
But here I just care about the general completion, which is why I will listen to this on complete future.

129
00:09:37.650 --> 00:09:43.480
We'll end with this before we do anything else, let's save that and let's see whether this works.

130
00:09:43.480 --> 00:09:47.610
So let's create a new account with test forat test, dot com maybe.

131
00:09:50.340 --> 00:09:53.100
Some password and with an image, of course.

132
00:09:58.880 --> 00:10:04.970
Like this and let's click sign up groups, provide a valid username, let's click sign up.

133
00:10:06.420 --> 00:10:07.350
And we continue.

134
00:10:08.520 --> 00:10:15.120
I don't see an error here, so that's looking good and now let's reload our firebase storage view here

135
00:10:15.120 --> 00:10:18.120
in the Web console and you should not see a user image folder.

136
00:10:18.750 --> 00:10:20.630
And in there, this JPEG file.

137
00:10:20.940 --> 00:10:24.600
And if you click on it, you should also see a preview here on the right.

138
00:10:25.800 --> 00:10:33.300
And this is the file we just uploaded from our device, and that's great, because this now is the user

139
00:10:33.300 --> 00:10:35.010
image we just picked.

140
00:10:35.340 --> 00:10:37.620
So to file upload is working.

141
00:10:38.070 --> 00:10:39.720
But of course, now we want to do more.

142
00:10:39.730 --> 00:10:46.650
We want to make sure that we also get a link to this image, which we can use to load it, for example,

143
00:10:46.650 --> 00:10:50.210
in our chat screen to show our image next to every message.

144
00:10:50.670 --> 00:10:52.800
So that is what I want to work on next.

