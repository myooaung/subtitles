WEBVTT
1
00:00:02.600 --> 00:00:08.980
To work with Google Maps, we'll use the Google Maps Flutter plugin to which the location package conveniently

2
00:00:08.980 --> 00:00:10.070
links,

3
00:00:10.210 --> 00:00:16.420
you can also simply google for Google Maps Flutter and this is now actually a plugin managed by the official

4
00:00:16.420 --> 00:00:25.960
Flutter team and this package can also be installed by adding it to our pubspec.yaml file and

5
00:00:25.960 --> 00:00:29.170
you'll find full installation instructions of course on pub.dev,

6
00:00:29.440 --> 00:00:35.530
if you search for Google Maps there, then you should find that Google Maps Flutter package. Under installing,

7
00:00:35.820 --> 00:00:39.130
you can now pick that dependency version here,

8
00:00:39.130 --> 00:00:45.230
go to your pubspec.yaml file and add it here. As always, save this, run Flutter packages get

9
00:00:45.250 --> 00:00:48.130
if it doesn't run automatically, you know the game

10
00:00:48.280 --> 00:00:51.510
and with that, go to the README. There,

11
00:00:51.850 --> 00:00:59.100
we can see that we also need to adjust our manifest, our AndroidManifest and also something in iOS.

12
00:00:59.260 --> 00:01:06.790
So in the AndroidManifest, it's this metadata entry which you need to copy and for that, go to your Android

13
00:01:06.790 --> 00:01:07.470
folder,

14
00:01:07.510 --> 00:01:14.680
src folder, main, AndroidManifest and there, add this metadata entry in the application node.

15
00:01:14.680 --> 00:01:21.550
So not here in manifest but inside of application, maybe right here in front of that activity.

16
00:01:21.820 --> 00:01:28.720
Now here, you need to enter your Google API key and we got that key of course, we got it in the location

17
00:01:28.720 --> 00:01:31.750
helper. It's this key which I stored here in a constant,

18
00:01:31.810 --> 00:01:33.730
you also need to provide it here.

19
00:01:36.230 --> 00:01:41.090
We also need to work on the iOS setup, so let's close that here,

20
00:01:41.090 --> 00:01:46.280
the Android folder and let's go to the iOS folder and there in the runner folder to the

21
00:01:46.280 --> 00:01:55.770
AppDelegate.m file. In there, you need to add this one line here for now in front of this generated plugin

22
00:01:55.770 --> 00:01:57.720
registrant thing here,

23
00:01:57.760 --> 00:02:05.350
so let's add this here and add your API key here as well, so grab that API key again and go back to the

24
00:02:05.350 --> 00:02:12.330
AppDelegate file and replace this part here with your key and also important,

25
00:02:12.330 --> 00:02:17.980
make sure that you add this import here to GoogleMaps.h at the top,

26
00:02:18.030 --> 00:02:22.070
otherwise you'll face errors. Now with that,

27
00:02:22.160 --> 00:02:31.410
you also need to add a special key to the info.plist. So go to the info.plist file here and then somewhere

28
00:02:31.410 --> 00:02:32.640
in there,

29
00:02:32.640 --> 00:02:41.700
add a new key and of course also add this closing bracket with this name and then the value

30
00:02:41.700 --> 00:02:49.210
yes. You can also see an example if you search for Flutter Google Maps and you visit the official github

31
00:02:49.210 --> 00:02:52.160
repository where this open source package is managed,

32
00:02:52.210 --> 00:02:58.090
there you also find an example and there, if you go to the iOS folder, to the runner folder and the

33
00:02:58.090 --> 00:03:00.290
info.plist, you should see

34
00:03:00.310 --> 00:03:10.730
this entry, here it is. So you can also of course just copy that entry and use this here in your info.plist

35
00:03:10.730 --> 00:03:19.030
file. So now with that, we got all the setup in place to hopefully work with the map,

36
00:03:19.060 --> 00:03:24.070
it's now also worth pointing out that the emulator you're running here, if you want to test this on an

37
00:03:24.070 --> 00:03:30.240
Android emulator, this emulator should support Google Play Services.

38
00:03:30.290 --> 00:03:31.760
How do you find out?

39
00:03:32.120 --> 00:03:37.880
Open Android Studio and go to your AVD manager there and in the AVD manager,

40
00:03:37.880 --> 00:03:43.040
make sure you launch an emulator which has this play store icon.

41
00:03:43.110 --> 00:03:49.520
If you don't have such an emulator yet, create a new virtual device and pick an image which has this icon,

42
00:03:50.550 --> 00:03:54.880
you'll need this to have Google Maps work correctly on your device.

43
00:03:54.900 --> 00:03:58.500
So now with that, the plugin is installed and configured,

44
00:03:58.530 --> 00:04:02.980
now it's time to use it. To use the Google Maps plugin,

45
00:04:03.010 --> 00:04:09.400
I will actually add a new screen in the screens folder, the map screen because my goal is to present

46
00:04:09.400 --> 00:04:11.130
the map as a full screen map.

47
00:04:11.140 --> 00:04:12.310
You don't have to do that,

48
00:04:12.310 --> 00:04:15.610
you can also add it as a part of your screen

49
00:04:15.610 --> 00:04:22.170
but here I want to control the entire screen with it. So in the map screen however, we'll still create

50
00:04:22.170 --> 00:04:27.870
a normal widget and that will also be a stateful widget, lots of stateful widgets in this application

51
00:04:28.140 --> 00:04:33.390
because here I want to be able to handle taps on the map and save that as a location the user wants

52
00:04:33.390 --> 00:04:34.630
to pick.

53
00:04:34.830 --> 00:04:44.280
So I'll name this map screen and then of course, add the material.dart import and also already import

54
00:04:44.670 --> 00:04:45.800
another package

55
00:04:45.870 --> 00:04:51.560
and that would be the Google Maps Flutter package and there, the google_maps_flutter.dart file.

56
00:04:51.610 --> 00:04:56.890
Now here in the build method, I'll not return a container but a scaffold because even though it's a full

57
00:04:56.890 --> 00:04:59.430
screen map, I still want to have an appBar and so on,

58
00:04:59.440 --> 00:05:02.510
you don't need to of course but I want it here.

59
00:05:03.010 --> 00:05:11.610
So I'll add the appBar in there and set a title of your map or whatever you want to have here as a title

60
00:05:13.210 --> 00:05:17.470
and then add a body on the scaffold and the body should be the map.

61
00:05:17.560 --> 00:05:24.430
Now with the Google Maps Flutter package imported, you can create a Google map widget here and that does

62
00:05:24.430 --> 00:05:27.310
what it sounds like, it renders a Google map.

63
00:05:27.340 --> 00:05:32.770
Now on that map, you want to set up a couple of things, you want to setup an initial camera position which

64
00:05:32.770 --> 00:05:37.360
is basically the location which is focused when the app launches.

65
00:05:37.360 --> 00:05:42.850
Now this initial camera position here shouldn't always be the exact same position though because I want

66
00:05:42.850 --> 00:05:46.570
to be able to set this from outside as I want to use this maps

67
00:05:46.570 --> 00:05:52.630
screen here also to show the picked location and not just to pick a new location. So therefore on the

68
00:05:52.630 --> 00:06:00.940
maps screen widget, I expect to get an initial location and the type for that should actually be of type

69
00:06:00.940 --> 00:06:08.410
place location which we set up in our models folder and there in the place.dart file. There if you

70
00:06:08.410 --> 00:06:14.390
remember, we added this place location class which has a latitude, a longitude and address.

71
00:06:14.500 --> 00:06:18.550
So that's what I want here, my place location,

72
00:06:18.550 --> 00:06:27.000
that's an input I want to receive and I also want to get the information whether we are selecting a place,

73
00:06:27.010 --> 00:06:32.310
so that's a boolean or whether we're maybe just showing up already in selected place.

74
00:06:32.320 --> 00:06:38.290
So whether I want to let the user tap on the map and select a new place or whether it's a read-only

75
00:06:38.290 --> 00:06:46.570
map so to say. So let's now add the constructor and in there, of course I want to get my initial location

76
00:06:46.660 --> 00:06:53.560
and I want to get isSelecting. Now isSelecting should be optional though, so I'll wrap this in square

77
00:06:53.560 --> 00:07:00.970
brackets and assign a default value of false so that the default mode here is that we don't select but

78
00:07:00.970 --> 00:07:07.840
that we actually only show what was already selected and the initial location should actually also be

79
00:07:08.080 --> 00:07:08.740
optional.

80
00:07:09.280 --> 00:07:18.750
So I'll wrap both in square brackets and here, the default value will be a new place location and actually

81
00:07:19.020 --> 00:07:25.470
to have more flexibility regarding which argument we want to assign, I'll use named arguments by replacing

82
00:07:25.470 --> 00:07:27.830
the square brackets with curly braces

83
00:07:27.870 --> 00:07:35.760
but now here, I want to create a new place location as a default starting location where the latitude

84
00:07:36.510 --> 00:07:41.550
is this value and that's the value of the Googleplex in the end.

85
00:07:41.550 --> 00:07:43.140
You'll find this here as well,

86
00:07:43.140 --> 00:07:46.450
you can also use this shortened latitude here of course

87
00:07:46.650 --> 00:07:48.710
so that I have the same starting position here.

88
00:07:48.720 --> 00:07:52.590
Obviously you could pick a totally different one if you wanted to, longitude

89
00:07:52.600 --> 00:07:56.140
therefore will be this location here.

90
00:07:56.190 --> 00:07:59.330
Let's use that here and now I'm still getting an error here

91
00:07:59.340 --> 00:08:05.850
because if you do create this as a default value here in your constructor list, then this actually must

92
00:08:05.850 --> 00:08:13.560
be a constant because Dart must be able to rely on this never to change during runtime and you can turn

93
00:08:13.560 --> 00:08:18.840
this into a constant by going to the models folder, the place.dart file and adding const in front of

94
00:08:18.840 --> 00:08:23.350
this. We can turn this into a const constructor because all these fields are final,

95
00:08:23.370 --> 00:08:32.159
so this will never change at runtime and therefore here, we can also add const and everyone's happy. So with

96
00:08:32.159 --> 00:08:39.169
that, we're getting this initial location here on our widget, down there where we create the Google map

97
00:08:39.169 --> 00:08:43.880
and need that position, we can therefore use the widget property which is available in the state class

98
00:08:44.300 --> 00:08:46.900
and reach out to the initial location.

99
00:08:47.000 --> 00:08:52.910
However down there, we of course don't need a location like this but actually, initial camera position

100
00:08:52.910 --> 00:08:58.150
once a camera positioned an object. Creating that is relatively easy,

101
00:08:58.160 --> 00:09:05.510
we create a new camera position, a class that is made available by Google Maps Flutter package and there,

102
00:09:05.570 --> 00:09:11.300
we can set up a target and a target then is of type latlng

103
00:09:11.300 --> 00:09:16.640
and that's basically just another class provided by the Google Maps Flutter package which takes

104
00:09:16.820 --> 00:09:18.920
a latitude and a longitude coordinate.

105
00:09:19.520 --> 00:09:24.600
So here, it first wants the latitude followed by the longitude

106
00:09:24.670 --> 00:09:33.170
and here we can now use widget, initial location latitude and then widget, initial location longitude.

107
00:09:33.190 --> 00:09:40.600
And with that, we're initializing this camera position to this target position on the map with this coordinate

108
00:09:40.610 --> 00:09:43.810
pair, we're getting this coordinate pair from outside

109
00:09:43.810 --> 00:09:50.290
but if it's not set, we'll use this default here and now there's just one more thing. On that camera

110
00:09:50.290 --> 00:09:52.660
position, besides the target,

111
00:09:52.870 --> 00:09:56.740
we can also set if the camera should be tilted a bit

112
00:09:56.740 --> 00:10:02.500
or for example set the zoom and I want to set this to 16, the same zoom value as I used for the starting

113
00:10:02.500 --> 00:10:03.960
map.

114
00:10:04.000 --> 00:10:08.350
This will create a new Google map and for now, that's all we need.

115
00:10:08.650 --> 00:10:18.060
So now we can open that map screen here whenever users tap on that button in our location input, whenever

116
00:10:18.060 --> 00:10:21.420
users tap on that select on map button.

117
00:10:21.420 --> 00:10:26.070
So in there, let's actually make sure we open the Google map screen in that place

118
00:10:26.540 --> 00:10:33.740
and let's add a new method here in the location_input.dart file, which will return a future which eventually

119
00:10:33.740 --> 00:10:34.660
will yield nothing

120
00:10:34.670 --> 00:10:41.090
and I'll name this select on map, it'll be an async function hence the async keyword

121
00:10:41.150 --> 00:10:45.310
and now there, I want to use my navigator

122
00:10:45.470 --> 00:10:53.450
and of course push a new route and I'll create this route on the fly, MaterialPageRoute where

123
00:10:53.450 --> 00:10:56.210
the builder should build me that map screen.

124
00:10:56.360 --> 00:11:00.640
So we get the context here and I want to return a new instance of the map screen.

125
00:11:00.740 --> 00:11:06.550
So for that of course, we need to import that map screen here in the location input widget,

126
00:11:06.710 --> 00:11:10.730
so map_screen.dart from the screens folder is imported

127
00:11:10.730 --> 00:11:18.210
and then here, we create that map screen and here, I'll set isSelecting to true, which for now has no

128
00:11:18.210 --> 00:11:23.680
direct impact but which will become more important later.

129
00:11:23.680 --> 00:11:29.160
Now why do I return a future here and use async? Because you might remember that when we push a screen,

130
00:11:29.380 --> 00:11:37.000
once that screen is popped, we can return data with pop and then listen to that here with a then method

131
00:11:37.390 --> 00:11:41.120
or since I use async, simply with await.

132
00:11:41.140 --> 00:11:48.100
So I wait for this map screen to be popped and I expect to get the selected location back or at least

133
00:11:48.100 --> 00:11:49.600
that is what might happen,

134
00:11:49.640 --> 00:11:55.130
I'll first of all check if selected location is equal to null, so

135
00:11:55.150 --> 00:12:00.880
if the user didn't select the location because the user closed the map just like this, then I'll return,

136
00:12:01.400 --> 00:12:05.530
otherwise I'll later add code to use that selected location.

137
00:12:05.560 --> 00:12:09.820
Now first of all, let's connect select on map with that button down there,

138
00:12:09.820 --> 00:12:13.310
so here I'll point at the select on map method.

139
00:12:13.330 --> 00:12:18.550
So now let's test this and just as before, since we added a plugin that taps into native device features,

140
00:12:18.640 --> 00:12:24.400
quit the running process, do a full rebuild and restart and thereafter, let's test this on our emulator.

141
00:12:26.590 --> 00:12:27.930
So the app restarted,

142
00:12:27.940 --> 00:12:36.610
let's go to the add place screen and there select on map. This opens up a new screen with a map focused

143
00:12:36.610 --> 00:12:42.670
on the Googleplex which is the starting, the initial position I configured. We can go back there of course

144
00:12:42.880 --> 00:12:49.620
because we pushed to this map and go back and forth.

145
00:12:49.810 --> 00:12:54.480
Now one thing we can also configure here in the location input where I opened this map, on the 

146
00:12:54.480 --> 00:12:55.500
MaterialPageRoute,

147
00:12:55.560 --> 00:13:00.870
you can also add the full screen dialog argument and set this to true and then you'll get a different

148
00:13:00.930 --> 00:13:06.240
open animation and instead of the back button you have across, totally optional, just a different look

149
00:13:06.270 --> 00:13:07.310
to that

150
00:13:07.310 --> 00:13:11.080
but let me also show you that look since we haven't used that thus far in the course.

151
00:13:11.190 --> 00:13:17.070
Now if I click on select on map, this will have a slightly different animation and give us this x up

152
00:13:17.070 --> 00:13:17.490
there

153
00:13:17.490 --> 00:13:20.360
but again, it's totally optional to use that.

154
00:13:20.370 --> 00:13:26.500
The important thing is that here, we got a map and we can move around on this map here, it's a bit slow

155
00:13:26.500 --> 00:13:31.510
on the emulator, we'll be much faster on the real device but here, we have a map we can move around.

156
00:13:31.510 --> 00:13:36.460
If you hold command or control, you can also pinch and zoom here if you want to

157
00:13:36.730 --> 00:13:39.150
and this is an important first step.

158
00:13:39.190 --> 00:13:44.410
The next step is to make sure that we can tap on this map and then we place a marker at that position

159
00:13:44.410 --> 00:13:51.040
where the user tapped and we then allow the user to press a check icon up there to confirm this choice

160
00:13:51.250 --> 00:13:53.170
and go back and use that location.

