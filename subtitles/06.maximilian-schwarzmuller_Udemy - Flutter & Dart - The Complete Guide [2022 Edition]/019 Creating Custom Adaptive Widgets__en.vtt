WEBVTT
1
00:00:02.590 --> 00:00:05.810
We're coming to an end for this module. As you can tell,

2
00:00:05.860 --> 00:00:10.150
you can build a responsive and adaptive application with Flutter.

3
00:00:10.180 --> 00:00:11.520
You have one widget tree

4
00:00:11.590 --> 00:00:17.110
and in places where you want to build something different based on the device size or on the operating

5
00:00:17.110 --> 00:00:23.050
system, you use if conditions or ternary expressions to render different widgets or configure widgets

6
00:00:23.050 --> 00:00:23.560
differently,

7
00:00:23.560 --> 00:00:26.460
that's what we did throughout this entire module.

8
00:00:26.470 --> 00:00:32.950
Now of course, it's always a good idea to therefore split your overall widget tree into small, manageable

9
00:00:32.950 --> 00:00:39.080
pieces because here in the main.dart file, we have a rather big widget tree now, a rather big build function

10
00:00:39.250 --> 00:00:44.530
and there of course, we could think about splitting parts of that into separate widgets.

11
00:00:44.530 --> 00:00:50.260
One candidate you could outsource would be this part here in our main.dart file, this column where we

12
00:00:50.260 --> 00:00:57.220
render the switch in that either the chart and/or chart and the transaction list. That could go into a separate

13
00:00:57.220 --> 00:00:57.760
widget,

14
00:00:57.760 --> 00:01:02.170
that would have to be a stateful widget where you then control which mode you're in,

15
00:01:02.170 --> 00:01:04.180
do you want to show the chart or not,

16
00:01:04.300 --> 00:01:11.140
where you then also check for landscape mode and have your media query variable in there and creating

17
00:01:11.140 --> 00:01:16.090
that extra widget is certainly a nice practice, it would allow you to have a leaner widget here in the

18
00:01:16.090 --> 00:01:23.770
main.dart file. Another part where you can save extra code and have an easier time building your widget

19
00:01:23.770 --> 00:01:30.270
trees is when you have checks like we have it here in the new transaction widget, where we render either a

20
00:01:30.310 --> 00:01:32.240
CupertinoButton or a FlatButton.

21
00:01:32.440 --> 00:01:37.570
If you watch closely, we have the same configuration, the same text and the same handler here when the

22
00:01:37.570 --> 00:01:41.820
button is pressed but I'm rendering two different widgets

23
00:01:42.050 --> 00:01:47.300
and I have this check here deciding which widget to render. For such scenarios,

24
00:01:47.300 --> 00:01:50.020
you can build your own widgets, your adaptive widgets

25
00:01:50.030 --> 00:01:56.000
so to say. You could name this adaptive button, the name is totally up to you though and in my 

26
00:01:56.000 --> 00:01:57.230
adaptive_button.dart file,

27
00:01:57.290 --> 00:02:01.370
I would have a stateless widget which I'll name adaptive button

28
00:02:01.370 --> 00:02:07.100
and it's named adaptive button because it automatically adapts to the underlying platform and simply

29
00:02:07.100 --> 00:02:11.300
renders a button, maybe AdaptiveFlatButton.

30
00:02:11.300 --> 00:02:16.520
So for that, I'll import material here and also Cupertino because I'll need that as well,

31
00:02:16.610 --> 00:02:22.190
so import cupertino.dart and since I rename the class here, I'll also rename the file name

32
00:02:22.190 --> 00:02:28.000
to adaptive_flat_button

33
00:02:28.200 --> 00:02:35.190
and now we can grab that code here with Platform.isIOS and then the different buttons being rendered.

34
00:02:35.190 --> 00:02:40.890
Cut it here from new transaction and add it instead here as a return value in the 

35
00:02:40.890 --> 00:02:45.760
AdaptiveFlatButton class. For the platform class to be available,

36
00:02:45.770 --> 00:02:50.060
we now need to import dart:io 

37
00:02:50.540 --> 00:02:56.060
and now we just need to take these flexible parts or the configurable parts as inputs, so that we can

38
00:02:56.060 --> 00:03:02.060
use AdaptiveFlatButton anywhere in our application where you want to render a FlatButton which automatically

39
00:03:02.060 --> 00:03:07.270
is either the default material flat button or the iOS, the Cupertino FlatButton.

40
00:03:08.030 --> 00:03:12.020
So here, I'll add a final property which is a string text

41
00:03:16.630 --> 00:03:27.140
and another final property which will hold a function in the end, a handler and then

42
00:03:27.350 --> 00:03:33.980
a constructor here where we assign values to both the text and to the handler

43
00:03:34.020 --> 00:03:36.680
You can also use named arguments here if you want.

44
00:03:36.780 --> 00:03:43.530
and now the flexible parts down there, choose date for example, there I'm referring to my text property and

45
00:03:43.530 --> 00:03:50.300
for the handler here or for this function, I referred to my handler property which I defined.

46
00:03:50.430 --> 00:03:56.430
And now we just have to pass in values for these things and remove the trailing comma here and now we

47
00:03:56.430 --> 00:04:00.570
have an AdaptiveFlatButton which we can use just like that anywhere in our widget tree.

48
00:04:00.570 --> 00:04:02.550
So here I can now use

49
00:04:05.210 --> 00:04:06.140
AdaptiveFlatButton

50
00:04:06.140 --> 00:04:09.770
and of course add an import to your widget up there,

51
00:04:10.250 --> 00:04:14.630
let's fix the path like this

52
00:04:15.880 --> 00:04:20.360
and now we just import our AdaptiveFlatButton and then use it down there

53
00:04:23.280 --> 00:04:31.150
by passing in the data that's required, like the text for the button choose date and then here, our handler

54
00:04:31.180 --> 00:04:37.860
which is present date picker, like this. And with that,

55
00:04:38.040 --> 00:04:43.170
now we have one widget which we can dump anywhere in our widget tree to render a FlatButton which has

56
00:04:43.170 --> 00:04:46.500
the correct underlying widget based on the platform we're running on.

57
00:04:49.510 --> 00:04:54.730
Now this pattern does not work for every Cupertino widget but for a lot of widgets, you can easily build

58
00:04:54.730 --> 00:05:00.700
your own adaptive widgets to reduce the amount of boilerplate code you have to write and the amount

59
00:05:00.700 --> 00:05:01.750
of code duplication.

