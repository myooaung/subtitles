WEBVTT
1
00:00:02.530 --> 00:00:10.780
Let's talk about fire base fire storm rules, you probably didn't think about it yet, but wasn't it

2
00:00:10.780 --> 00:00:19.690
strange that we were able to read and write to Chet's collection earlier in this module before we added

3
00:00:19.690 --> 00:00:26.920
authentication and users and put in our words our aflutter app was able to communicate with this database

4
00:00:27.250 --> 00:00:28.910
without an authenticated user?

5
00:00:29.190 --> 00:00:35.050
Now, sure, we did connect our app to Firebase, so there is some connection there.

6
00:00:35.590 --> 00:00:43.060
But what if I would tell you that technically anyone who knew your project ID, let's say, would be

7
00:00:43.060 --> 00:00:44.880
able to talk to your database?

8
00:00:45.160 --> 00:00:51.700
Now, of course, knowing your ID is not something that's that easy, but it's definitely not advisable

9
00:00:51.700 --> 00:00:54.490
to leave your database open like this.

10
00:00:54.520 --> 00:00:57.240
Even if it's hard to find the exact address.

11
00:00:57.250 --> 00:00:58.850
It would be possible technically.

12
00:00:59.920 --> 00:01:07.300
So instead, you typically want to lock your database down to only your authenticated users, because

13
00:01:07.330 --> 00:01:13.000
then only users who were authenticated with your project, which happens through the Firebase SDK,

14
00:01:13.300 --> 00:01:19.840
only such authenticated users are able to write to your database and as a side effect, you then also

15
00:01:19.840 --> 00:01:21.070
have a clear trace.

16
00:01:21.070 --> 00:01:22.360
Who wrote what?

17
00:01:23.440 --> 00:01:29.150
Now, you can configure something like this through that rules tap here in the database area.

18
00:01:29.470 --> 00:01:37.570
Now, faster rules are pretty flexible and also pretty not complex, but got a lot of features.

19
00:01:37.780 --> 00:01:42.130
You can view the official docs to learn all about firebase rules.

20
00:01:42.520 --> 00:01:48.430
And I would strongly recommend that you do so if you plan on using Firebase in your app, because there's

21
00:01:48.430 --> 00:01:49.750
a lot you can configure.

22
00:01:50.140 --> 00:01:52.570
Basically, every use case is possible.

23
00:01:52.570 --> 00:01:53.980
You can configure that.

24
00:01:53.980 --> 00:02:00.050
Some collection is locked down to a specific user whilst other collections are open to everyone.

25
00:02:00.190 --> 00:02:06.070
So there's a lot you can configure and therefore the official docs are the place to go if you want to

26
00:02:06.070 --> 00:02:06.970
use Firebase.

27
00:02:07.150 --> 00:02:11.560
This is not a firebase course, so I will only scratch the surface here.

28
00:02:12.250 --> 00:02:19.510
Generally, the rules here are set up here in this rules tap and there is an extra little programming

29
00:02:19.510 --> 00:02:24.490
language you could say the FIREBASE team invented, which allows you to configure those rules.

30
00:02:24.910 --> 00:02:26.620
In the end, rules work like this.

31
00:02:27.070 --> 00:02:34.320
You have a match string here and you can also have nested matched strings like this one, which describe

32
00:02:34.330 --> 00:02:40.330
the path to which a request was sent and then the rules that apply for such a request.

33
00:02:40.840 --> 00:02:44.020
Now, this is the general request to your database.

34
00:02:44.260 --> 00:02:47.620
So you typically leave that unless you know what you want to do.

35
00:02:47.950 --> 00:02:54.650
But then you have these nested matches here which match individual parts inside of your project.

36
00:02:55.000 --> 00:03:02.980
So, for example, if we would want to lock down access to this chat's collection and for that, I'll

37
00:03:02.980 --> 00:03:03.400
open it.

38
00:03:03.400 --> 00:03:10.660
And you, if I would want to lock down access to this chat's collection, I could add a new match here.

39
00:03:11.800 --> 00:03:13.120
Let me delete all of that.

40
00:03:14.020 --> 00:03:22.420
I could add a new match here where I say, if we target chats and let me add this here in front of ever

41
00:03:22.420 --> 00:03:28.890
match, if we target chats, then a new set of rules should apply.

42
00:03:29.140 --> 00:03:34.000
You put your rules for this match between curly braces then and then.

43
00:03:34.000 --> 00:03:42.790
A rule is written like this year, you can allow certain kind of access if you don't match a certain

44
00:03:42.790 --> 00:03:44.860
path by default, nothing is allowed.

45
00:03:44.950 --> 00:03:50.440
So if I would remove this match, which grants access to all documents in any collection, that's what

46
00:03:50.440 --> 00:03:51.130
this means here.

47
00:03:51.640 --> 00:03:56.980
If it would delete this and it would delete this, then everything would be locked down as a default.

48
00:03:57.190 --> 00:04:02.830
But of course, then even we with authenticated users wouldn't be able to communicate because by default,

49
00:04:02.830 --> 00:04:06.040
it's locked down for everyone, including authenticated users.

50
00:04:06.590 --> 00:04:09.370
So I'll bring this back so that we can set the step by step.

51
00:04:10.300 --> 00:04:16.660
So here we now have a new match for Chat's and after allow, you can define what you want to allow,

52
00:04:16.660 --> 00:04:22.510
for example, read and write separated with commas, you could also be more specific and say, I want

53
00:04:22.510 --> 00:04:25.600
to allow read and I want to allow creating documents.

54
00:04:25.840 --> 00:04:28.420
But deleting and updating would not be allowed.

55
00:04:28.810 --> 00:04:29.410
Right.

56
00:04:29.410 --> 00:04:34.240
On the other hand, is basically allowing create update and delete.

57
00:04:34.810 --> 00:04:36.940
So you can't really be very granular here.

58
00:04:37.330 --> 00:04:39.790
And then after a column you have your condition.

59
00:04:39.970 --> 00:04:46.300
When this is allowed in here, for example, you can access a special request object which is available

60
00:04:46.300 --> 00:04:49.810
here in the rules where you can access the off information.

61
00:04:49.810 --> 00:04:56.080
And for example, if you say of unequal to null, you would say if there is some off information on

62
00:04:56.080 --> 00:04:56.790
the request.

63
00:04:57.070 --> 00:05:03.190
So if the user is authenticated, if this comes from an authentic headed user only, then such of information

64
00:05:03.190 --> 00:05:04.300
will be on the request.

65
00:05:04.660 --> 00:05:06.580
Then I want to allow, read and write.

66
00:05:06.910 --> 00:05:09.100
So put in other words, I'm authenticated.

67
00:05:09.100 --> 00:05:11.890
Users would now not be allowed to read and write.

68
00:05:12.400 --> 00:05:15.670
And that's, for example, what I'll now do down there, I will say.

69
00:05:16.890 --> 00:05:23.370
Access to my documents is by default only possible for authenticated users and as I just said, this

70
00:05:23.370 --> 00:05:27.930
here is a special syntax, which means all documents in all collections.

71
00:05:27.960 --> 00:05:30.720
It's a wild card placeholder, so to say.

72
00:05:31.080 --> 00:05:36.030
Now, of course, I can delete this extra rule because now we got this more general rule down there.

73
00:05:36.840 --> 00:05:40.620
And that is a change that makes sense here, in my opinion.

74
00:05:41.600 --> 00:05:46.820
But actually, I don't want to give this general access to everything, I want to be a bit more granular

75
00:05:46.820 --> 00:05:47.120
here.

76
00:05:47.810 --> 00:05:55.610
And for example, I would say it makes sense that we grant access to users to the user who owns a document

77
00:05:55.670 --> 00:06:01.290
so that not every authenticated user can manipulate any user that's being stored in users.

78
00:06:01.310 --> 00:06:03.910
No, you should only be able to edit yourself.

79
00:06:04.280 --> 00:06:12.350
So I only want to grant access to users or let's say I want to grant right access to users if you are

80
00:06:12.350 --> 00:06:17.180
to user with this ID so you can only edit your specific user document.

81
00:06:17.480 --> 00:06:19.100
And that's possible with rules.

82
00:06:19.760 --> 00:06:26.570
You can add a new match and say for the users collection for user I.D., which is of course flexible.

83
00:06:27.020 --> 00:06:28.340
There are multiple IDs.

84
00:06:28.640 --> 00:06:30.050
You can use such a placeholder.

85
00:06:30.060 --> 00:06:32.600
Therefore that basically means for any ID.

86
00:06:33.620 --> 00:06:40.250
We now want to have a rule and dear, I want to allow writing if request of.

87
00:06:41.140 --> 00:06:48.100
Unequal now, so if the request comes from an authenticated user and with the double ampersand symbol

88
00:06:48.100 --> 00:06:56.080
here, if request dot of dot uid, which is a field that is available on the off object on the incoming

89
00:06:56.080 --> 00:07:00.310
request, is equal to the UID we have here in the path.

90
00:07:00.670 --> 00:07:06.850
So you can specify placeholders like this in a POV and you can then reference them in your condition

91
00:07:06.850 --> 00:07:07.590
if you want to.

92
00:07:07.780 --> 00:07:14.920
And with that I'm saying only if the incoming request is authenticated and it's authenticated by the

93
00:07:14.920 --> 00:07:22.000
user with the user ID of the document, I'm trying to edit only then write access is granted.

94
00:07:23.460 --> 00:07:31.980
On the other hand, I'll say users for any user ID, I want to allow reader access for any authenticated

95
00:07:31.980 --> 00:07:35.550
user, so I'll just check if office unequal to null.

96
00:07:35.550 --> 00:07:41.640
I don't care if it's the user with the same ID so the user data can be read by anyone, but only written

97
00:07:41.640 --> 00:07:44.040
by the user to whom the ID belongs.

98
00:07:44.190 --> 00:07:47.010
That is one possible rule you could set up here.

99
00:07:47.340 --> 00:07:50.160
Now again, the official doc stiv way deeper than that.

100
00:07:50.250 --> 00:07:53.000
But this hopefully gives you a feeling for how this works.

101
00:07:54.290 --> 00:08:01.190
And with that, we can also add an extra a new match year where we target the Chet's collection and

102
00:08:01.190 --> 00:08:02.990
then any document in there.

103
00:08:03.110 --> 00:08:08.030
And for that, I'll again use this special Syntex here with the double asterisk.

104
00:08:08.240 --> 00:08:12.260
This means any nested collection and or any nested document.

105
00:08:13.270 --> 00:08:18.790
For any such document, I want to add a new rule and allow reading.

106
00:08:19.960 --> 00:08:27.880
By any authenticated user, so if request office unequal to null, anyone should be able to read my

107
00:08:27.880 --> 00:08:32.190
chats or any authenticated user should be able to read everything in chats.

108
00:08:32.919 --> 00:08:36.530
And in addition, every user should be able to create data in there.

109
00:08:36.580 --> 00:08:40.740
For example, new messages that should be possible for every user here.

110
00:08:41.530 --> 00:08:44.770
Now, we can always find yentas later, but this should be a good start.

111
00:08:44.990 --> 00:08:48.340
Now, you'll always need to publish your rules after you edited them.

112
00:08:48.670 --> 00:08:54.310
And you can also check if they're right with the rules playground there, you can send dummy requests

113
00:08:54.310 --> 00:08:59.980
which don't really added to the database, but basically simulate such a incoming request.

114
00:09:00.250 --> 00:09:04.170
And you can simulate, get, create update and delete requests.

115
00:09:04.360 --> 00:09:10.990
You can also simulate that this comes from an authenticated user and you can also, for example, add

116
00:09:10.990 --> 00:09:14.250
extra authentication data like the user ID.

117
00:09:14.380 --> 00:09:16.270
That's part of the incoming request.

118
00:09:16.510 --> 00:09:17.860
So you can play around with that.

119
00:09:17.860 --> 00:09:22.960
You see what will be part of the incoming request that's being simulated and that should allow you to

120
00:09:22.960 --> 00:09:24.650
validate your rules.

121
00:09:25.060 --> 00:09:30.100
Now, we'll, of course, also see if those rules fail, if we don't try to interact with the database,

122
00:09:30.220 --> 00:09:35.950
which we're going to do now with the rules set up, we can now finally continue working on our chat

123
00:09:35.950 --> 00:09:42.510
screen here and make sure that we're able to really send chat messages and read them here as well.

