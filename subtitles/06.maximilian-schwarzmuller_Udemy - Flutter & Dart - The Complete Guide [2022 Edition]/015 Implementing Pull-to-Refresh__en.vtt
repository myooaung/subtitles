WEBVTT
1
00:00:02.270 --> 00:00:04.500
So we're fetching products here on our shop page.

2
00:00:04.880 --> 00:00:06.570
And what about managed products?

3
00:00:06.590 --> 00:00:12.410
Now, the good thing is in this app, we technically can't really get to manage products without having

4
00:00:12.410 --> 00:00:17.990
been to the shop page first since we fetch our products here and we then store them in items in our

5
00:00:17.990 --> 00:00:19.670
products class here.

6
00:00:20.390 --> 00:00:25.570
When we reach Manege products, which uses the same items, we are guaranteed to have products.

7
00:00:25.820 --> 00:00:27.380
So we don't really need to fetch products.

8
00:00:27.380 --> 00:00:32.060
When we reach this page, though, of course, theoretically you could do that here on the user product

9
00:00:32.060 --> 00:00:32.390
page.

10
00:00:32.570 --> 00:00:34.870
You could turn this into a stateful widget as well.

11
00:00:34.880 --> 00:00:41.050
And then also use did change dependencies here word and its status to load products here as well.

12
00:00:41.330 --> 00:00:42.830
But as I said, I don't need it here.

13
00:00:43.310 --> 00:00:46.230
But there is one other thing which we could add here.

14
00:00:46.820 --> 00:00:52.430
It would be nice to have a pull to refresh logic here where we can pull the screen down to fetch the

15
00:00:52.430 --> 00:00:56.180
latest set of products or the latest values from the Web.

16
00:00:56.510 --> 00:01:02.090
And such a pull to refresh pattern is relatively easy to implement in Slotter.

17
00:01:03.010 --> 00:01:07.870
All you have to do is you have to go to the woodshed where you want to have that pattern, then to your

18
00:01:07.870 --> 00:01:13.150
body there in the scaffold, and then here in this case around the padding, you wrap this with a new

19
00:01:13.150 --> 00:01:19.930
widget and that new widget here is a refresh indicator and Nover widget that's built into flutter.

20
00:01:20.530 --> 00:01:27.070
The refresh indicator takes a child around which you wrap it and then you need to define on refresh

21
00:01:27.070 --> 00:01:27.670
function.

22
00:01:27.970 --> 00:01:33.160
So this takes a function, a function which gets no arguments, but which has to return a future.

23
00:01:33.160 --> 00:01:34.030
And that's important.

24
00:01:34.270 --> 00:01:40.780
And this function has to return a future so that the refresh indicator, which it knows when you're

25
00:01:40.780 --> 00:01:45.670
done fetching data because it will show a spinner automatically in the meantime and it needs to know

26
00:01:45.670 --> 00:01:46.790
when to dismiss this.

27
00:01:47.530 --> 00:01:50.710
So here you can even use a named function and point at that.

28
00:01:50.890 --> 00:01:53.770
And actually I'll do that or use an anonymous function.

29
00:01:54.130 --> 00:01:59.320
But here all use a named function which has to return a future which yields nothing in the end.

30
00:01:59.350 --> 00:02:00.180
That's important.

31
00:02:00.670 --> 00:02:07.360
And I'll turn this into a private function which is only available inside of this class and all named

32
00:02:07.360 --> 00:02:11.740
is refresh products to name is totally up to you, of course.

33
00:02:12.190 --> 00:02:14.980
And in there you now have to return a future.

34
00:02:16.010 --> 00:02:20.450
Now, that can be done by turning it into async function, then you learn this will always return a

35
00:02:20.450 --> 00:02:20.900
future.

36
00:02:21.150 --> 00:02:24.290
But of course I want to return a meaningful future that really does something.

37
00:02:24.530 --> 00:02:26.450
And for dad, we can use provider.

38
00:02:27.550 --> 00:02:34.660
For which you need to have to provide or package import it off and then connect it to products of context

39
00:02:34.660 --> 00:02:36.820
and then also call fetch and set products.

40
00:02:36.820 --> 00:02:37.290
Of course.

41
00:02:38.200 --> 00:02:44.280
Now, to have the context here, since I'm not in a state class here, I don't have it available everywhere.

42
00:02:44.440 --> 00:02:50.300
So here I need to now get this as an input, as an argument here and refresh products.

43
00:02:51.070 --> 00:02:56.260
So now here I can call, fetch and set products and then we simply wait for this to finish.

44
00:02:56.440 --> 00:03:02.080
Therefore, this overall method will only be done once this is done and only then this future which

45
00:03:02.080 --> 00:03:05.050
is automatically returned, will yield, will result.

46
00:03:07.110 --> 00:03:09.540
And with that, we're fetching our new products here.

47
00:03:09.930 --> 00:03:16.500
So now down there, we could now point at refresh products, what's the name?

48
00:03:16.830 --> 00:03:23.010
But actually, since I need my contacts there, I need to pass that in and therefore, I will wrap this

49
00:03:23.010 --> 00:03:28.650
in an honor in an anonymous function which referents is now stored in on refresh.

50
00:03:28.650 --> 00:03:35.550
And inside of that anonymous function, I return a call to refresh products where I can now forward

51
00:03:35.760 --> 00:03:39.540
the context, the context I'm getting here in the built method automatically.

52
00:03:41.280 --> 00:03:47.940
Now, one additional note about the way we're fetching our products here, we should actually add listen

53
00:03:48.210 --> 00:03:55.590
falls here in the refresh products method to ensure that this method, which we're calling on, our

54
00:03:55.590 --> 00:03:57.840
provider is being called.

55
00:03:57.960 --> 00:04:03.990
But we're not setting up a listener here because we don't really want to listen to updates and products

56
00:04:03.990 --> 00:04:05.220
here in this method.

57
00:04:05.370 --> 00:04:08.970
We just want to trigger the fetch and set products method.

58
00:04:09.420 --> 00:04:15.470
Therefore, I'm calling it here and I'm adding, listen, falls here to avoid any problems with debt.

59
00:04:15.780 --> 00:04:21.149
This is something we didn't add thus far, but something you should add in your code in this refresh

60
00:04:21.149 --> 00:04:26.930
products method to avoid unnecessary widget rebuilds Detriot already be everything.

61
00:04:26.940 --> 00:04:32.400
If I save this here, our products are lost because due to this hot reload, our state gets cleared.

62
00:04:32.580 --> 00:04:36.620
But that's good actually, because that allows me to demonstrate that fetching here.

63
00:04:36.630 --> 00:04:39.810
I can now pull down and you see that indicator up here, here.

64
00:04:39.970 --> 00:04:45.210
And if you pull down long enough or far enough, you'll see that starts loading.

65
00:04:45.210 --> 00:04:48.050
And as soon as the data is there, that spinner disappears.

66
00:04:48.420 --> 00:04:50.340
So that's the refresh indicator.

67
00:04:50.340 --> 00:04:54.390
And that Paultre refresh pattern, which, as you see, is pretty easy to implement.

