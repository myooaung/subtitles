WEBVTT

00:00.250 --> 00:01.220
Hai, selamat datang kembali.

00:01.380 --> 00:08.010
Jadi dalam video ini kita akan melihat satu cara mengingat atau menyimpan jawaban untuk subproblem yang diulang sehingga kita memecahkan lima

00:08.340 --> 00:10.650
dari lima sekali dan kita mengingatnya.

00:10.650 --> 00:14.750
Jadi lain kali kita tidak perlu melakukan semua ini dan itu akan mempercepat banyak hal.

00:14.880 --> 00:18.020
Jadi strategi yang akan saya tunjukkan kepada Anda sekarang disebut memoisasi.

00:18.180 --> 00:23.940
Dan idenya adalah bahwa kita memiliki beberapa struktur untuk menyimpan data dalam array atau objek biasanya dan kemudian kita

00:24.120 --> 00:29.730
melakukan fungsi mahal apa pun menyebutnya 4:55 dan kemudian kita menyimpannya dalam array itu sehingga kita dapat kembali dan

00:30.040 --> 00:35.460
lain kali jika ada lima dari lima panggilan lain alih-alih melakukan semua pekerjaan, kita cukup melihat di tabel

00:35.460 --> 00:40.720
kami atau array kami atau apa pun itu untuk melihat apakah sudah ada 55 di sana.

00:40.800 --> 00:42.770
Dan jika ada kita hanya menggunakan potongan itu.

00:42.930 --> 00:47.120
Jadi kita ingat kita sudah menyelesaikannya dan kita menguangkannya dan kita tidak harus melakukannya lagi.

00:47.130 --> 00:52.080
Jadi jika Anda ingin mencoba menerapkan versi ini, Anda dapat mengambil kode rekursif kami yang sama

00:52.080 --> 00:55.530
persis yang telah kami kerjakan untuk Fibonacci tetapi cukup ubah sedikit.

00:55.680 --> 00:59.810
Gunakan array atau objek dan lihat apakah Anda dapat menemukan cara untuk membuatnya bekerja.

00:59.820 --> 01:01.890
Saya akan menunjukkan solusi kepada Anda sekarang.

01:02.030 --> 01:04.910
Itu belum tentu solusi sesingkat mungkin.

01:04.950 --> 01:09.510
Saya ingin membuatnya menyenangkan dan mudah atau semudah mungkin untuk dipahami.

01:09.510 --> 01:10.940
Jadi mari kita bicara tentang cara kerjanya.

01:11.130 --> 01:15.930
Jadi kita memiliki fungsi fib mengambilnya dan katakanlah kita sedang mencari angka kelima.

01:16.200 --> 01:20.150
Ada juga memo hal kedua dan disinilah kita akan menyimpan jawabannya.

01:20.150 --> 01:24.990
Kami telah menemukan sub-masalah tersebut sehingga kami menyelesaikannya setelah kami menambahkan jawabannya di sini.

01:24.990 --> 01:30.310
Dan kemudian jika kita perlu mendapatkan data itu atau jawaban itu lagi kita melihat di sini daripada menghitung ulang.

01:30.540 --> 01:36.210
Katakanlah kita menemukan lima dari tiga jawaban yang akan kita simpan di indeks ketiga.

01:36.210 --> 01:42.300
Dalam memo kami jika kami menemukan angka ke-10 katakanlah kita sedang mencoba menghitung angka Fibonacci ke-20 tetapi jika kita sudah

01:42.490 --> 01:48.150
menemukan ke-10 di suatu tempat di bawah pohon rekursif yang kita simpan di sini di bawah indeks Kesepuluh

01:48.150 --> 01:50.760
sehingga kita kemudian dapat menemukan lebih mudah .

01:51.100 --> 01:51.370
BAIK.

01:51.420 --> 01:56.760
Jadi pada dasarnya kita menetapkan kasus dasar yang sama kita memiliki panggilan rekursif yang sama tetapi

01:56.760 --> 02:03.300
hal-hal sedikit berbeda karena hal pertama yang akan kita lakukan adalah memeriksa apakah kita sedang mencari Fibonacci lima apakah kita

02:03.300 --> 02:07.090
sudah menyelesaikan yang kita punya sesuatu indeks kelima di memo kami.

02:07.290 --> 02:09.240
Jika kami melakukannya, kami hanya mengembalikan nilai itu.

02:09.450 --> 02:11.460
Jadi itu sirkuit pendek segalanya.

02:11.460 --> 02:16.430
Jadi setelah pertama kali kami menemukan lima dari empat atau tiga atau apa pun itu akan disimpan

02:16.430 --> 02:19.890
dalam memo dan kita dapat melakukan hubungan pendek dengan menariknya keluar.

02:20.160 --> 02:21.510
Kami juga memiliki kasus dasar kami.

02:21.540 --> 02:24.060
Jadi kami sedang mencari digit pertama atau kedua.

02:24.060 --> 02:31.230
Kami mengembalikan satu tetapi lain kali di sini adalah panggilan rekursif kami melewati memo yang akan mengakumulasi data kami

02:31.260 --> 02:35.550
dan kami tidak harus melakukannya sebagai variabel terpisah seperti ini.

02:35.580 --> 02:37.140
Saya baru saja memecahnya untuk membuatnya lebih jelas.

02:37.230 --> 02:45.050
Jadi kami menghitung angka ini dan kemudian kami menyimpannya di bawah n di memo kami dan kemudian kami mengembalikannya juga.

02:45.060 --> 02:49.650
Jadi inilah animasi sederhana yang berjalan sesuai dengan apa yang saya bicarakan untuk Fitbit lima.

02:49.770 --> 02:50.800
Jadi, inilah memo.

02:51.030 --> 02:55.090
Secara teknis pada awalnya itu tidak akan terlihat seperti ini di mana kita memiliki slot kosong ini.

02:55.110 --> 02:56.960
Itu hanya akan benar-benar kosong.

02:56.970 --> 02:58.370
Tidak ada apa pun di dalamnya.

02:58.380 --> 03:00.570
Belum ada indeks kedua atau ketiga.

03:00.690 --> 03:03.490
Tapi bayangkan ini semua kosong.

03:03.510 --> 03:05.460
Perhatikan saya menaruh X sampai nol.

03:05.640 --> 03:08.730
Kami tidak menghitung nol dengan angka Fibonacci.

03:08.820 --> 03:10.740
Jadi saya hanya meninggalkan itu sendirian.

03:10.740 --> 03:12.810
Itu akan selalu tidak terdefinisi.

03:12.900 --> 03:16.020
Anda dapat mengubah logika kami sehingga kami selalu melakukannya.

03:16.140 --> 03:20.060
Anda tahu menyimpan sesuatu lebih dari menggesernya dengan 1 itu juga tidak masalah.

03:20.190 --> 03:21.220
Tapi ini berhasil.

03:21.330 --> 03:28.150
Jadi, ketika kita menghitung 4:55 panggilannya cocok sebelum ditambah 3 karena kita tidak tahu apa itu 4:55.

03:28.200 --> 03:34.260
Yah kita tidak tahu apakah hit sebelumnya adalah hal yang sama. Ini bukan kaskade baru sampai kita menekan

03:34.260 --> 03:37.730
angka yang kita tahu terlalu baik sehingga akan mengembalikan satu.

03:38.040 --> 03:42.690
Jadi yang kita lakukan adalah pergi ke memo kita dan bilang oke, aku tahu apa itu.

03:42.740 --> 03:44.700
Fib 2 adalah 1.

03:44.700 --> 03:48.900
Jadi kami menempatkannya di bawah indeks kedua dan kami selesai di sana.

03:48.900 --> 03:50.670
Sekarang kami menambahkan bersama ke 5 dari satu.

03:50.700 --> 03:51.560
Yah apa itu?

03:51.570 --> 03:58.590
Kita juga tahu itu karena ini adalah case dasar kita sehingga kita menyimpannya di dalam memo-nya indeks 1.

03:58.710 --> 04:04.860
Sekarang fiber 3 memiliki dua nilai tersebut satu dan satu ditambahkan bersama-sama dan kita dapatkan dua dan kemudian kita akan mengatakan

04:04.860 --> 04:08.400
apa yang benar dari tiga adalah mari kita mulai dari sana.

04:08.400 --> 04:13.430
Jadi, jika kita membutuhkan lagi yang berarti kita membutuhkan di sini kita dapat menemukannya juga.

04:13.590 --> 04:19.800
Jadi sekarang kembali ke kelima sebelum menambahkan bersama dua ditambah lima dari dua yang satu memberi kita tiga dan kemudian

04:19.800 --> 04:21.400
kita simpan dalam memo kita.

04:21.570 --> 04:25.880
Meskipun sebenarnya kita tidak akan pernah menggunakannya karena kita tidak membutuhkan serat lagi.

04:25.920 --> 04:27.450
Kami hanya perlu sekali di sini.

04:27.660 --> 04:29.520
Tapi toh kami menyimpannya di sana.

04:29.520 --> 04:34.530
Kemudian kita pergi ke sisi kanan dan di sinilah keajaiban terjadi karena kita tidak perlu melakukan semua

04:34.530 --> 04:34.920
ini.

04:34.980 --> 04:39.750
Apa pun yang ada di sini katakanlah berada pada skala yang jauh lebih besar yang akan sangat sulit.

04:39.750 --> 04:42.660
Diagram ini terlalu lama untuk mendapatkan semua animasi ini.

04:42.690 --> 04:46.860
Agak menyakitkan dengan slide yang mereka gunakan tetapi bayangkan seberapa cepat pohon itu tumbuh.

04:46.860 --> 04:50.220
Kami melihat bahwa beberapa video yang lalu itu berskala sangat cepat.

04:50.250 --> 04:56.190
Logikanya kali ini mengatakan OK 2:55 tunggu, apakah kita tahu lima dari tiga sebelum kita menghitung semuanya.

04:56.190 --> 04:56.860
Apakah kita tahu itu?

04:57.030 --> 04:59.160
Ya kita lakukan, kita sudah melakukannya di sini.

04:59.160 --> 05:02.900
Jadi kami menganggap jawaban kami dan kami melewatkan ini.

05:03.220 --> 05:08.860
Jadi dalam hal ini kita hanya melewatkan lima dari dua dan lima dari satu tetapi jika kita melakukan lima dari tujuh katakanlah

05:08.860 --> 05:10.470
itu akan menjadi perbedaan besar.

05:10.470 --> 05:12.900
Saya akan kembali ke slide yang menunjukkan itu sebentar lagi.

05:12.970 --> 05:18.130
Jadi kami hubung pendek itu dan kemudian kami mendapatkan jawaban kami yang lima dengan menambahkan tiga dan dua.

05:18.310 --> 05:24.210
Dan kemudian kita berpotensi menyimpan bagian itu tidak terlalu penting untuk ditambahkan atau tidak.

05:24.280 --> 05:28.890
Tetapi intinya adalah kita mengingat apa yang telah kita lakukan dan agar kita dapat menghemat pekerjaan.

05:28.990 --> 05:35.470
Jadi untuk kembali ke contoh lima dari tujuh ini bayangkan ini pertama kali kita menghitung lima dari lima kita

05:35.470 --> 05:39.230
dapat menyimpan apa pun jawaban itu yaitu lima saya percaya.

05:39.430 --> 05:44.500
Dan kemudian semua itu disimpan di sini kita tidak perlu melakukan pekerjaan ini lagi karena disimpan di

05:44.500 --> 05:45.340
memo kita.

05:45.340 --> 05:47.590
Hal yang sama sebelumnya disimpan di sana.

05:47.590 --> 05:53.890
Dan begitu kita sampai di sini sebelum di sini kita dapat menggunakannya dan kita bahkan tidak perlu menggunakannya di sini

05:53.890 --> 05:57.850
karena kita akan menyimpan lima dari lima yang menghapus seluruh bagian ini.

05:58.240 --> 06:05.100
Jadi sekarang bayangkan lima dari 100 kulit pohon besar dengan banyak anggota tubuh yang dipotong menghemat banyak waktu.

06:05.200 --> 06:07.580
Sekarang untuk menunjukkan kepada Anda betapa jauh lebih baik itu.

06:07.710 --> 06:12.550
Maksud saya untuk menjalankan ini dan kita bisa mulai dengan dasar-dasar lima.

06:12.880 --> 06:15.730
Kami mendapat lima keren lima dari sepuluh.

06:15.900 --> 06:17.120
Lima puluh lima.

06:17.180 --> 06:24.630
Sekarang ingat bahwa mereka mulai melakukan hal-hal seperti serat 30 membutuhkan lebih lama serat 40 mengambil seperti kelipatan kedua.

06:24.670 --> 06:26.740
Saya ingin mengatakan hampir 10 detik.

06:26.850 --> 06:32.160
Jika 100 browser saya rusak terakhir kali dan periksa seberapa cepat itu terjadi.

06:32.260 --> 06:35.440
Ini sebenarnya sudah dihitung bahkan sebelum saya menekan enter.

06:35.470 --> 06:41.080
Sekarang masalah terbesar yang kita hadapi adalah angka-angka Fibonacci tumbuh begitu cepat sehingga angka-angka

06:41.080 --> 06:44.420
seperti bilangan bulat di Javascript dapat benar-benar menahannya.

06:44.530 --> 06:46.470
Dan kemudian kita mulai kehilangan keakuratan.

06:46.630 --> 06:50.880
Tapi itu bekerja dengan cara yang lebih cepat.

06:50.890 --> 06:55.480
Peningkatan besar dalam video berikutnya kita akan berbicara tentang notasi Big-O sebenarnya.

06:55.810 --> 06:59.860
Namun dalam video ini saya hanya ingin memperkenalkan ide untuk menyimpan data Anda dalam memo.

06:59.920 --> 07:01.920
Ini bukan satu-satunya cara untuk melakukan itu.

07:02.080 --> 07:06.490
Kami bisa menggunakan objek yang kami bisa memiliki objek yang terlihat seperti ini di mana

07:06.520 --> 07:10.460
kami menyimpan Anda tahu ke nomor Fibonacci pertama yang kedua adalah satu.

07:10.510 --> 07:15.730
Yang ketiga adalah kita bisa melakukannya dengan koma yang sesuai.

07:15.730 --> 07:17.830
Hal lain yang bisa kami lakukan.

07:18.130 --> 07:21.900
Anda mungkin telah memperhatikan ini jika ada yang mencoba menjalankan ini atau dicetak.

07:21.980 --> 07:28.240
Jika kita mencetak seperti apa memo kita, saya pikir Chrome tidak akan menunjukkan kepada saya versi

07:28.240 --> 07:36.640
terakhirnya, tetapi jika saya melakukan enam dari enam Anda akan melihat bahwa kita tidak benar-benar menyimpan apa pun untuk nol tentu saja karena kita

07:36.640 --> 07:43.780
bukan kita tidak menggunakan itu tetapi satu dan dua tidak disimpan di sana karena kami hanya mengembalikan nilainya sehingga tidak.

07:43.870 --> 07:44.630
Tidak apa-apa.

07:44.830 --> 07:45.840
Ini kasus dasar.

07:46.060 --> 07:51.310
Tapi yang juga bisa kita lakukan untuk mempersingkat segalanya adalah ini.

07:51.310 --> 07:56.320
Saya hanya bisa meletakkan semuanya di sini sehingga defaultnya tidak terdefinisi.

07:56.330 --> 08:02.290
Satu dalam satu jenis program di dasar-dasar dan kemudian saya benar-benar dapat menyingkirkan kasus dasar sepenuhnya.

08:02.470 --> 08:06.580
Dan sekarang ketika saya menjalankan kode ini kita sudah memiliki satu dalam satu di sana.

08:06.640 --> 08:10.840
Jadi kita tidak memerlukan alas huruf karena jika kita mencari digit pertama atau kedua.

08:10.840 --> 08:13.210
Baris ini akan mengembalikan satu.

08:13.630 --> 08:15.390
Jadi itu hanya perubahan kecil.

08:15.550 --> 08:18.720
Jika ada yang bertanya-tanya beberapa orang akan berpikir ini agak kikuk.

08:18.970 --> 08:23.650
Dan hal lain yang saya tidak tunjukkan jika Anda sering melakukan ini untuk beberapa alasan dan

08:23.650 --> 08:28.600
menghitung angka-angka ini Anda ingin membuat ini mungkin variabel terpisah yang disimpan di tempat lain sehingga Anda

08:28.600 --> 08:33.260
tidak menghitung ulang setiap kali Anda menjalankan ini Anda hanya akan menyimpan angka-angka itu.

08:33.550 --> 08:35.660
Tapi itu bukan fokus di sini.

08:35.860 --> 08:41.530
Jadi itu untuk memo untuk saat ini dan video berikutnya saya akan menunjukkan kepada Anda bagaimana kami mengetahui acara besar dan

08:41.800 --> 08:43.210
seberapa baik sebenarnya itu.

08:43.210 --> 08:45.300
Ini kemajuan besar karena Anda sudah tahu.

08:45.400 --> 08:52.450
Tetapi untuk meringkas ide di balik memoisasi adalah menggunakan beberapa struktur di mana kita dapat mencatat hasil apa pun yang kita

08:52.450 --> 08:58.000
temukan untuk subproblem sehingga lain kali kita tidak perlu mengulang semua pekerjaan itu, kita hanya mencarinya

08:58.300 --> 08:59.360
di struktur data.

08:59.380 --> 09:00.460
Dalam kasus kami sebuah array.
