WEBVTT

00:00.240 --> 00:01.380
Baiklah, selamat datang kembali.

00:01.380 --> 00:02.760
Jadi mari kita terapkan prioritas kita.

00:02.760 --> 00:05.490
T Dengan menyalin apa yang sudah kami lakukan.

00:05.490 --> 00:07.110
Jadi, inilah tumpukan biner maks saya.

00:07.140 --> 00:14.580
Saya baru saja menyalinnya ke file baru dan saya akan mengubah dulu antrian prioritas nama dan kita

00:14.580 --> 00:16.680
akan membiarkannya sebagai nilai.

00:16.830 --> 00:24.600
Kemudian di bagian bawah atau di tempat lain saya akan mendefinisikan kelas kami Node dan node dan

00:24.990 --> 00:33.660
konstruktor mengambil nilai yang disebut vowel dan kami hanya mengatur titik ini Vau sama dengan Val dan kemudian kami juga punya.

00:33.830 --> 00:34.990
Itu juga mengambil prioritas.

00:35.000 --> 00:37.370
Kami tidak menambahkan itu dan kami mulai.

00:41.000 --> 00:41.490
BAIK.

00:41.790 --> 00:46.350
Jadi sekarang kita memiliki setiap node memiliki nilai dan prioritas terkait.

00:46.740 --> 00:48.270
Sekarang kami memiliki dua hal yang benar-benar perlu kami lakukan.

00:48.270 --> 00:54.780
Yang pertama adalah memastikan bahwa kita membandingkan berdasarkan prioritas di mana-mana daripada nilai atau sementara bahkan tidak

00:54.780 --> 00:57.330
menghargai bukan hanya elemen itu sendiri.

00:57.510 --> 01:00.780
Karena kita dulu tidak menggunakan kelas simpul ini sama sekali.

01:00.780 --> 01:06.300
Kami dulu hanya dalam hal-hal tertentu seperti itu jadi ketika kita memasukkan sesuatu kita tidak hanya akan

01:06.360 --> 01:08.690
memasukkan elemen kita akan memasukkan sesuatu.

01:08.790 --> 01:15.290
Jadi kita akan mengambil nilai dan prioritas dan kemudian kita akan membuat simpul baru.

01:15.820 --> 01:23.440
Jadi mari kita lakukan simpul baru sama dengan simpul baru Vau dan prioritas.

01:23.880 --> 01:30.410
Dan kemudian kita akan lulus bahwa dalam nilai ini digunakan push bukan elemen itu node baru.

01:30.840 --> 01:33.570
Jadi itu akan menambahkannya sampai akhir.

01:33.750 --> 01:36.120
Dan kemudian kita membutuhkannya untuk melebur yang kita miliki di sini.

01:36.450 --> 01:37.460
Jadi itu semua baik.

01:37.800 --> 01:42.200
Tapi kemudian ketika kita melihat bubble up kita memiliki properti kecil Yah itu lebih dari masalah kecil.

01:42.210 --> 01:45.120
Kode kami tidak akan berfungsi sama sekali karena kami tidak menggunakan prioritas.

01:45.180 --> 01:47.670
Kami hanya membandingkan nilai secara langsung.

01:48.060 --> 01:53.610
Jadi indeks akan menjadi elemen yang sama baik-baik saja sedangkan indeks lebih besar dari indeks induk nol.

01:53.610 --> 02:02.160
Ini semua baik-baik saja tetapi kami ingin membandingkan jika prioritas elemen titik kurang dari atau sama dengan prioritas induk.

02:03.940 --> 02:06.750
Yah istirahat kalau tidak nilai-nilai.

02:06.870 --> 02:07.240
BAIK.

02:07.270 --> 02:10.690
Dan itu sama saja jika kita mencoba menjadikan ini pria.

02:10.690 --> 02:14.620
Jadi saya benar-benar akan meninggalkan ini pertama sebagai tumpukan biner maks dan kami akan kembali ke sana

02:15.040 --> 02:18.160
Tetapi catat ini akan perlu diubah.

02:18.160 --> 02:23.780
Hal lain yang saya lupa lakukan adalah mengubah ini menjadi B dan Q Yang tidak terlalu penting.

02:23.800 --> 02:26.160
Itu bukan bagaimana Anda mengejanya, bukan.

02:26.340 --> 02:27.920
Saya tidak pernah bisa mengingatnya.

02:27.970 --> 02:28.510
Saya pikir hanya itu.

02:28.540 --> 02:33.050
Ya dan tidak D'Errico.

02:33.430 --> 02:35.380
Jadi enqueue menggembung.

02:35.410 --> 02:35.680
Baiklah.

02:35.680 --> 02:44.810
Dan bukannya ekstrak Max akan memiliki Q saya pikir itu benar saya harap.

02:45.120 --> 02:51.380
Dan kita akan melihat kita akan menghapus elemen nol.

02:51.790 --> 02:52.710
Di mana kita akan bertukar.

02:52.710 --> 02:54.120
Tidak apa-apa.

02:54.120 --> 02:55.740
Lalu kita akan tenggelam.

02:56.040 --> 03:02.910
Jadi di sink down kita mengambil elemen itu semua baik-baik saja indeks semuanya baik di sini.

03:02.940 --> 03:12.060
Tapi sekarang apa yang perlu kita periksa ada di sini jika prioritas anak kiri titik lebih besar dari prioritas elemen jika dan kemudian

03:12.960 --> 03:16.860
hal yang sama di sini di sini di sini.

03:16.860 --> 03:22.190
Prioritas anak lebih besar dari elemen prioritas.

03:22.250 --> 03:27.150
Hal yang sama sekali lagi meninggalkan prioritas Schild dot.

03:27.390 --> 03:27.620
BAIK.

03:27.630 --> 03:33.000
Jadi ingat sekarang ini adalah tumpukan biner maks masih dulu aku mungkin lupa sesuatu mari kita

03:33.000 --> 03:34.190
pastikan itu berfungsi.

03:34.200 --> 03:36.550
Jadi kita akan membuat yang baru. Kita akan menyebutnya.

03:36.750 --> 03:44.720
Katakanlah ada di rumah sakit jadi kita akan menyebutnya E. R. sama dengan antrian prioritas baru.

03:45.480 --> 03:48.080
Dan kemudian kita akan melakukan E. R. dot alih-alih memasukkan.

03:48.090 --> 03:55.260
Sekarang di Q dan hal pertama yang akan kita miliki adalah saya tidak tahu bagaimana dengan flu biasa.

03:55.380 --> 04:01.320
Prioritas jika kita melakukan tumpukan biner maks seperti sekarang ini akan menjadi

04:01.320 --> 04:07.530
angka yang rendah seperti katakanlah 1 dan kemudian mari kita lakukan beberapa lagi.

04:07.760 --> 04:09.680
Mari kita lakukan juga.

04:09.810 --> 04:11.500
Bagaimana dengan luka tembak.

04:11.570 --> 04:13.940
Ini akan menjadi prioritas seperti lima.

04:13.940 --> 04:21.190
Dan kemudian kita juga akan mengalami demam tinggi akan menjadi prioritas dua.

04:21.590 --> 04:23.380
OK jadi mari kita coba jalankan ini.

04:23.600 --> 04:28.050
Dan jika kita melihat E. kita R. pertama mari kita periksa pesanan.

04:28.310 --> 04:28.580
BAIK.

04:28.580 --> 04:34.210
Jadi Anda bisa melihat luka tembak daripada anak pertamanya yang biasa flu sehingga anak kedua mengalami demam tinggi.

04:34.310 --> 04:35.360
Bagian itu tidak masalah.

04:35.390 --> 04:35.710
Kanan.

04:35.720 --> 04:40.230
Dan itu tidak akan berjalan hanya dengan tiga elemen yang paling mungkin tetapi akan mengatur ulang.

04:40.250 --> 04:41.570
Semoga saat kami melakukannya.

04:41.600 --> 04:46.980
Jadi mari kita periksa dequeue kita, kita akan mendapatkan luka tembak.

04:47.060 --> 04:47.880
Baiklah.

04:48.110 --> 04:54.890
Selanjutnya kami berharap untuk mendapatkan demam tinggi yang Anda lakukan dan kemudian pilek dan kemudian tidak ada.

04:55.220 --> 04:55.670
BAIK.

04:55.820 --> 04:57.020
Jadi itu berhasil.

04:57.020 --> 05:02.630
Kami memiliki tumpukan biner maks di mana kami mendapatkan elemen yang Anda tahu berdasarkan prioritas nomor

05:02.630 --> 05:04.670
terbesar jika kami ingin mengubahnya.

05:04.700 --> 05:11.180
Ini hanya masalah datang ke sini dan mengubah tanda kurang dari ini menjadi lebih besar dari tanda.

05:11.390 --> 05:16.250
Hal yang sama di mana lagi yang lain di sini.

05:17.830 --> 05:21.810
Ubah itu menjadi kurang dari tanda atau hanya membalikkan logika kita.

05:21.880 --> 05:25.950
Dan satu perubahan lain yang harus kita lakukan di sini.

05:25.960 --> 05:31.520
Alih-alih memanggil variabel ini Max yang kami hapus sekarang merujuk ke para pria.

05:31.600 --> 05:36.510
Sebenarnya itu tidak membuat perbedaan secara fungsional, tetapi lebih baik menyebutnya laki-laki saja.

05:36.940 --> 05:43.440
OK jadi mari kita lakukan hal yang sama kecuali sekarang saya akan mengubah angka-angka prioritas

05:43.450 --> 05:48.820
ini karena sesuatu seperti luka tembak akan memiliki tingkat prioritas satu

05:49.210 --> 05:58.180
prioritas tinggi pilek mungkin Anda akan memiliki lima demam tinggi akan mendapat prioritas lebih lanjut mari kita lakukan flu biasa.

05:58.180 --> 06:00.910
Bagaimana dengan luka tembak.

06:01.180 --> 06:01.750
Saya tidak tahu

06:01.750 --> 06:02.950
Lengan yang patah.

06:03.310 --> 06:06.070
Jadi itu akan menjadi prioritas yang cukup tinggi tetapi tidak sama dengan tembakan.

06:06.070 --> 06:07.730
Jadi mari kita beri prioritas dua.

06:07.910 --> 06:12.350
Dan kemudian mari kita lakukan prioritas lain dari mari kita lakukan tiga.

06:12.390 --> 06:18.100
Jadi prioritas menengah tidak seburuk anggap saja seperti gelas di kaki.

06:18.130 --> 06:19.200
Saya tidak tahu

06:19.630 --> 06:20.290
BAIK.

06:20.670 --> 06:25.120
Saya tidak tahu apakah pemesanan ini masuk akal karena saya akan menjalankan kode dan kami akan melakukan dequeue

06:25.120 --> 06:27.400
pertama kami. Dan apa yang akan kami harapkan.

06:27.400 --> 06:30.920
Kami ingin nilai yang memiliki luka tembak prioritas terendah.

06:30.940 --> 06:32.230
Baiklah, itu berhasil.

06:32.230 --> 06:40.480
Selanjutnya kita mengharapkan nilai dengan yang terendah berikutnya yang patah lengan kemudian kaca dan kaki kemudian demam

06:41.020 --> 06:42.940
tinggi dan pilek.

06:43.120 --> 06:46.150
Jadi Anda dapat melihat bahwa tidak masalah urutan apa yang kami masukkan.

06:46.150 --> 06:51.970
Ini semua tentang prioritas dan memberi kita elemen prioritas tertinggi atau prioritas nilai terendah tetapi

06:52.010 --> 06:56.050
prioritas aktual tertinggi setiap saat dan ini adalah tumpukan biner.

06:56.050 --> 07:01.650
Sekarang secara logis hal yang sama kami hanya mengubah beberapa perbandingan dan mengganti nama variabel dari Max ke min.

07:01.990 --> 07:03.910
Kalau tidak, itu ide yang sama.

07:03.910 --> 07:08.410
Sekarang satu hal yang harus kita pertimbangkan adalah bagaimana jika sesuatu memiliki prioritas yang sama.

07:08.620 --> 07:11.000
Jika ada dua elemen di sini dengan prioritas yang sama.

07:11.440 --> 07:18.070
Baiklah sekarang kode kami tidak menjamin bahwa mereka benar-benar akan dikembalikan berdasarkan urutan penyisipan

07:18.070 --> 07:19.600
sehingga Anda tahu.

07:19.630 --> 07:25.360
T Jadi Anda akan mengharapkannya misalnya seseorang dengan flu biasa tiba di sana terlebih dahulu dan kemudian kita

07:25.360 --> 07:28.620
memiliki orang lain yang telah Anda kenal flu biasa lainnya.

07:28.620 --> 07:32.770
Tingkat prioritas yang sama dengan yang Anda harapkan untuk melayani atau membantu orang ini terlebih dahulu.

07:33.040 --> 07:34.590
Dan Anda dapat menambahkan logika untuk membuatnya bekerja.

07:34.600 --> 07:39.970
Tetapi secara default dengan bantuan kami itu tidak akan berfungsi seperti itu atau tidak ada urutan terjamin antara

07:39.970 --> 07:43.340
saudara kandung antara hal-hal yang berada di tingkat pohon yang sama.

07:43.480 --> 07:45.090
Semua tumpukan.

07:45.220 --> 07:50.730
Secara teknis pohon tetapi di tumpukan kami Hanya saja orang tua memiliki hubungan dengan dua anaknya.

07:50.740 --> 07:55.260
Tetapi kedua anak itu belum tentu saudara kandungnya tidak dalam urutan tertentu.

07:55.300 --> 08:01.380
Jadi yang bisa kita lakukan adalah menambahkan logika pada dasarnya untuk menambahkan dalam waktu di sini sehingga kita bisa melakukan seperti diet ini.

08:01.510 --> 08:07.030
Saya tidak tahu waktu memasukkan sama dengan tanggal sekarang atau sesuatu seperti itu.

08:07.300 --> 08:13.930
Dan kemudian ketika kita membandingkan bukan hanya membandingkan prioritas kita juga akan mengatakan jika prioritas

08:13.930 --> 08:19.860
itu identik mana yang dimasukkan pertama dan kemudian kita akan bertukar berdasarkan itu.

08:20.050 --> 08:25.020
Tapi itu tidak terlalu penting pada saat ini karena algoritma yang sebenarnya untuk Anda

08:25.060 --> 08:30.730
sebelum memberi tanda perbandingan itu sendiri kemungkinan akan berubah jika Anda pernah benar-benar menulis satu di dunia nyata.

08:30.730 --> 08:35.190
Biasanya Anda tidak hanya mengetahui tingkat prioritas, tetapi juga tingkat prioritas.

08:35.180 --> 08:41.800
Plus seperti berapa banyak sumber daya yang dibutuhkan atau seberapa intensif sumber daya itu, ditambah berapa lama waktu

08:42.190 --> 08:48.480
yang dihabiskan untuk menunggu hal-hal yang berbeda yang mungkin mempengaruhi perbandingan daripada hanya prioritas langsung versus prioritas.

08:48.810 --> 08:50.510
Pokoknya inilah antrian prioritas kami.

08:50.530 --> 08:52.750
Ini adalah tumpukan biner yang menyalakannya.

08:52.750 --> 08:58.390
Atau kami benar-benar mengimplementasikannya dengan Anda memasukkan hal-hal menggunakan enqueue dalam urutan apa pun yang mereka lakukan.

08:58.390 --> 08:59.610
Itu tidak masalah.

08:59.680 --> 09:01.790
Ini didasarkan dari tingkat prioritas mereka.

09:01.810 --> 09:03.250
Kurasa cukup bagus.

09:03.250 --> 09:09.400
Jauh lebih baik daripada mencoba melakukan ini dengan array atau daftar dan hanya melintasi semuanya untuk menemukan

09:09.400 --> 09:12.460
item berikutnya dengan angka terendah atau tertinggi.

09:12.460 --> 09:13.980
Ini jauh lebih cepat.

09:14.020 --> 09:19.470
Kita akan berbicara tentang big-O tetapi log dan untuk kompleksitas waktu untuk penyisipan dan penghapusan.

09:19.480 --> 09:21.220
Baiklah sebelum Q selesai.
