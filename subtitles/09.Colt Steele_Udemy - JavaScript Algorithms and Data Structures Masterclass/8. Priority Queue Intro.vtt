WEBVTT

00:00.330 --> 00:05.610
Baiklah, kita akan kembali begitu awal, saya pikir ini adalah video pertama di bagian yang saya bicarakan mengapa Anda

00:05.610 --> 00:07.720
harus tahu atau peduli tentang tumpukan biner.

00:07.740 --> 00:09.200
Ya mereka muncul dalam wawancara.

00:09.210 --> 00:14.400
Ya mereka diajarkan di hampir setiap kursus ilmu komputer tetapi juga mereka digunakan sangat umum untuk

00:14.400 --> 00:16.570
mengimplementasikan sesuatu yang disebut antrian prioritas.

00:16.800 --> 00:20.180
Dan saya memberikan daftar singkat lima detik tentang apa itu antrian prioritas.

00:20.370 --> 00:22.060
Dan saya katakan kami akan kembali lagi nanti.

00:22.080 --> 00:23.100
Kami sekarang melakukan hal itu.

00:23.100 --> 00:24.140
Kami akan kembali ke sana.

00:24.180 --> 00:26.870
Kami akan menjelaskan secara lebih rinci apa antrian prioritas itu.

00:27.030 --> 00:32.090
Berikan beberapa kasus penggunaan untuk itu tetapi kemudian juga menerapkan satu menggunakan kode tumpukan biner kami.

00:32.100 --> 00:33.800
Jadi kita tidak perlu menulis banyak kode baru.

00:33.810 --> 00:38.890
Ini benar-benar hanya memodifikasi apa yang telah kita lakukan atau menduplikasinya dan mengubah beberapa hal.

00:38.910 --> 00:40.190
Jadi itulah yang akan kita lakukan di sini.

00:40.200 --> 00:44.440
Tapi pertama mari kita pahami apa itu antrian prioritas.

00:44.460 --> 00:49.950
Jadi menurut Wikipedia itu hanya struktur data di mana setiap elemen memiliki prioritas yang terkait dengannya

00:49.950 --> 00:54.690
dan elemen dengan prioritas lebih tinggi dilayani sebelum elemen dengan prioritas lebih rendah.

00:54.690 --> 00:56.850
Jadi kami memiliki kumpulan data di setiap node.

00:56.850 --> 01:03.580
Setiap elemen memiliki prioritas yang terkait dengannya dan pada dasarnya kami ingin dilayani yaitu suara pasif yang mengatakan

01:03.580 --> 01:05.080
Ya, Anda ingin mengambilnya.

01:05.210 --> 01:10.500
Kami akan mengeluarkan satu elemen pada daftar ini atau struktur ini apa pun yang kami gunakan untuk

01:10.500 --> 01:10.980
menyimpannya.

01:11.070 --> 01:13.430
Kami ingin satu hal pada satu waktu yang akan kami tangani berikutnya.

01:13.440 --> 01:18.390
Sama seperti di ruang gawat darurat di rumah sakit Anda memiliki banyak orang yang menunggu semua

01:18.600 --> 01:24.150
orang ditugaskan secara internal setidaknya semacam tingkat prioritas dan kemudian seorang perawat atau dokter keluar dan mengambil satu orang

01:24.150 --> 01:26.880
pada suatu waktu berdasarkan dari tingkat prioritas itu.

01:26.880 --> 01:31.680
Jadi Anda tahu seseorang yang berjalan dengan luka tembak akan terlihat di depan seseorang

01:31.680 --> 01:33.630
dengan tenggorokan yang gatal misalnya.

01:33.630 --> 01:39.270
Jadi, setiap saat Anda perlu mengelola data atau informasi dengan berbagai prioritas dan memiliki hal-hal yang Anda tahu

01:39.270 --> 01:43.860
Anda sisipkan dan mereka mungkin bukan prioritas terendah yang tidak Anda masukkan secara berurutan.

01:43.980 --> 01:48.630
Anda mungkin menambahkan sesuatu seperti di E. R. Misalnya seseorang berjalan dengan luka tembak.

01:48.720 --> 01:52.830
Yah mungkin ada 100 orang yang ada di sana dulu tetapi mereka semua menderita flu.

01:52.920 --> 01:55.280
Orang dengan luka tembak akan dilihat terlebih dahulu.

01:55.500 --> 01:57.680
Jadi antrian prioritas harus menjelaskan itu.

01:57.690 --> 02:00.470
Selalu melayani elemen prioritas tertinggi.

02:00.680 --> 02:05.620
Inilah contoh dunia yang lebih nyata pada mesin Unix dengan baik di setiap mesin.

02:05.650 --> 02:09.810
Ada banyak proses yang terjadi di balik layar.

02:10.020 --> 02:15.630
Anda tahu ribuan hal berbeda yang berjalan di balik semua keajaiban komputer Anda dan Anda

02:15.630 --> 02:21.000
dapat melihatnya atau melihat banyak dari mereka setidaknya pada mesin Unix dengan mengetik perintah.

02:21.060 --> 02:26.280
Dan saya telah menambahkan dalam beberapa opsi tambahan tetapi apa yang ditunjukkannya kepada saya di sini adalah id

02:26.340 --> 02:32.460
proses dan kemudian di sini ini secara teknis tidak disebut prioritas itu disebut baik tetapi ini adalah tingkat prioritas dan Anda dapat

02:32.460 --> 02:33.930
melihat bahwa hampir semuanya sama.

02:33.930 --> 02:39.240
Tapi kemudian kita memiliki hal-hal tertentu yang memiliki level lebih tinggi atau nilai bagus yang lebih tinggi yang sebenarnya

02:39.240 --> 02:40.880
berarti prioritas yang lebih rendah.

02:40.920 --> 02:48.320
Jadi jika nol semua ini pada dasarnya akan disajikan dalam urutan yang ditambahkan tetapi

02:48.330 --> 02:50.990
kemudian sesekali ada sesuatu.

02:51.120 --> 02:54.590
Ada atau apa pun yang datang pada mereka.

02:54.690 --> 02:55.680
Ini dia.

02:55.680 --> 02:56.130
Daerah.

02:56.130 --> 02:58.650
Benda ini memiliki level 10 yang bagus.

02:58.650 --> 03:00.900
Ini hanya prioritas atau hal yang sama di sini.

03:00.930 --> 03:03.230
Tampaknya ini adalah hal lain untuk Adobe.

03:03.420 --> 03:07.210
Jadi saya bukan orang yang menjelaskan bagaimana semua ini bekerja.

03:07.230 --> 03:12.030
Saya tahu sedikit tentang Anda mengetahui dasar-dasar sistem operasi Anda dan apa yang terjadi di

03:12.030 --> 03:12.740
balik layar.

03:12.750 --> 03:15.530
Saya pada dasarnya tahu bagaimana menemukan salah satunya dan menghentikannya jika rusak.

03:15.540 --> 03:16.570
Dan itu saja.

03:16.740 --> 03:20.280
Tapi yang ingin saya ilustrasikan adalah bahwa ada banyak hal yang terjadi pada titik

03:20.280 --> 03:22.880
tertentu pada komputer Anda, tetapi pada akhirnya ada pesanan.

03:22.920 --> 03:25.690
Mereka tidak hanya pergi pada saat yang bersamaan.

03:25.770 --> 03:31.710
Hal-hal yang dilayani sedang dikerjakan secara berurutan dan ada prioritas yang didapat setiap elemen yang digunakan

03:31.800 --> 03:33.600
untuk menentukan urutan itu.

03:33.630 --> 03:37.470
Hal lain yang perlu diketahui adalah bahwa antrian prioritas terpisah dari tumpukan.

03:37.470 --> 03:44.310
Mereka hanya konsep abstrak Anda bisa mengimplementasikan antrian prioritas dengan array atau daftar yang akan saya tunjukkan

03:44.310 --> 03:45.580
hanya dalam sedetik.

03:45.600 --> 03:47.120
Ini bukan versi yang bagus.

03:47.170 --> 03:48.780
Pelan tapi itu mungkin.

03:48.840 --> 03:52.930
Sama seperti ketika kita mengatakan daftar ide daftar.

03:53.040 --> 03:55.140
Yah Anda bisa memiliki daftar sebagai daftar tertaut.

03:55.140 --> 03:57.440
Anda bisa menerapkan daftar sebagai array.

03:57.450 --> 03:59.590
Ada berbagai cara untuk mengimplementasikannya.

03:59.610 --> 04:03.280
Itu hanya semacam generik konsep abstrak antrian prioritas.

04:03.510 --> 04:05.040
Jadi Anda bisa melakukannya seperti ini.

04:05.040 --> 04:09.160
Anda bisa menggunakan array atau daftar dan hanya menyimpan barang-barang saat mereka masuk.

04:09.180 --> 04:14.160
Jadi ada sesuatu yang dimasukkan Anda letakkan di akhir atau di awal dan kemudian ketika

04:14.160 --> 04:19.410
Anda perlu menghapus sesuatu ketika tiba saatnya Anda tahu melayani item berikutnya, Anda hanya akan mengulangi seluruh

04:19.530 --> 04:22.900
hal dan hanya memeriksa apa prioritas tertinggi menjaga variabel restart

04:22.920 --> 04:25.310
OK prioritas 3 itu yang tertinggi.

04:25.440 --> 04:27.240
Dan kemudian kita kita memukul satu.

04:27.240 --> 04:32.300
Juga perlu dicatat bahwa angka yang lebih rendah sebenarnya menunjukkan prioritas yang lebih tinggi.

04:32.310 --> 04:35.850
Jadi dalam hal ini jika kita bekerja untuk angka terendah kita akan mulai di sini.

04:35.880 --> 04:38.240
OK angka terendah adalah tiga.

04:38.280 --> 04:39.390
Lalu kita sampai ke 1.

04:39.390 --> 04:42.620
OK baik itu lebih rendah Jadi ini adalah elemen baru kami yang akan kami layani.

04:42.630 --> 04:43.910
Tapi mari kita lanjutkan.

04:43.920 --> 04:44.470
Nggak.

04:44.790 --> 04:45.830
Ini masih lebih besar.

04:45.840 --> 04:46.700
Ini lebih besar.

04:46.860 --> 04:51.600
Ini lebih besar daripada kami mencapai akhir dan kami menyadari Baiklah ini adalah hal prioritas tertinggi yang akan

04:51.600 --> 04:52.410
kami layani.

04:52.500 --> 04:54.530
Angka terendah prioritas tertinggi.

04:54.660 --> 04:58.880
Jadi itu bukan pendekatan yang bagus karena setiap kali kita perlu mencari sesuatu yang baru.

04:59.170 --> 05:04.230
Harus melalui semua jalan dan membandingkan Anda tahu sesuatu untuk setiap item karena itu bisa di

05:04.230 --> 05:06.730
catatan terakhir itu bisa di item pertama.

05:06.810 --> 05:08.870
Itu bukan cara yang baik untuk melakukannya.

05:08.940 --> 05:11.210
Sederhana tapi naif.

05:11.580 --> 05:16.170
Jadi karena Anda mungkin sudah menduga kita akan menggunakan heap.

05:16.170 --> 05:18.390
Jadi inilah contoh bagaimana kita bisa melakukannya.

05:18.390 --> 05:25.380
Ini menggunakan semacam rumah sakit darurat metafora orang berjalan di dan mereka memiliki luka yang berbeda.

05:25.410 --> 05:27.600
Jadi pada awalnya dia kosong.

05:27.600 --> 05:32.740
Ada satu orang yang berjalan dengan demam rendah sehingga mereka akan menjadi orang berikutnya yang mendapatkan bantuan.

05:32.760 --> 05:36.440
Kami selalu menghapus dari atas atau dari akar tumpukan kami.

05:36.450 --> 05:37.560
Saat ini hanya ada satu elemen.

05:37.560 --> 05:38.370
Itu adalah akarnya.

05:38.400 --> 05:39.770
Jadi mereka mendapatkan bantuan terlebih dahulu.

05:39.840 --> 05:44.630
Tetapi katakanlah sebelum mereka ditolong orang lain masuk, mereka mengalami gegar otak.

05:44.850 --> 05:47.830
Itu adalah elemen atau nilai prioritas yang lebih tinggi.

05:47.860 --> 05:48.050
Kanan.

05:48.060 --> 05:51.160
Mereka perlu dilihat sebelum seseorang dengan demam rendah atau demam tinggi.

05:51.210 --> 05:51.930
Itu untuk diperdebatkan.

05:51.930 --> 05:53.690
Demam rendah meskipun saya pikir mereka bisa menunggu.

05:53.730 --> 05:55.000
Ambil sedikit Tylenol.

05:55.140 --> 05:57.880
Apa itu Motrin apa pun yang Anda ambil.

05:58.020 --> 06:02.670
Jadi mereka orang dengan gegar otak atau orang berikutnya yang mendapatkan bantuan sekarang mereka adalah akarnya.

06:02.670 --> 06:05.460
Seseorang masuk dan mereka memiliki prioritas yang lebih rendah.

06:05.550 --> 06:07.020
Kami tidak menempatkan mereka di root.

06:07.110 --> 06:11.600
Ini tumpukan sehingga nilai ini kurang dari prioritas ini.

06:11.640 --> 06:13.110
Jadi mereka akan berada di bawahnya.

06:13.170 --> 06:15.290
Ini adalah anak dari orang tua ini.

06:15.480 --> 06:20.880
Jadi kita masih mengikuti aturan apakah ini pohon manusia atau tumpukan manusia atau tumpukan maksimum itu

06:20.880 --> 06:22.580
tidak masalah selama kita konsisten.

06:22.860 --> 06:27.690
Jadi yang akhirnya kita dapatkan adalah bahwa gegar otak akan dilayani di sana orang berikutnya untuk

06:27.690 --> 06:31.230
mendapatkan bantuan tetapi kemudian seseorang datang dari jalan dengan kepala meledak.

06:31.380 --> 06:32.370
Itu tidak baik.

06:32.370 --> 06:34.110
Dan mereka butuh bantuan segera.

06:34.110 --> 06:39.120
Jadi ketika kita memasukkan sesuatu dengan prioritas yang lebih tinggi seperti ini, itu akan mengingat cara kerjanya.

06:39.120 --> 06:42.150
Kami menambahkannya ke akhir dan kemudian kami menggelembung di tumpukan kami.

06:42.180 --> 06:44.800
Jadi jika kita menambahkannya di sini, kita menggembungkannya ke atas.

06:45.030 --> 06:51.240
Kami berakhir dengan kepala meledak dengan prioritas merah adalah hal berikutnya untuk mendapatkan bantuan kemudian gegar otak

06:51.250 --> 06:52.410
adalah anak pertamanya.

06:52.410 --> 06:54.730
Kemudian orang yang mabuk kemudian demam rendah.

06:54.870 --> 06:57.710
Tetapi yang terpenting adalah apa hal selanjutnya.

06:58.320 --> 07:00.790
Dan kemudian orang lain masuk, mereka terserang flu.

07:00.960 --> 07:04.280
Yah, prioritas mereka tidak setinggi kepala yang meledak.

07:04.350 --> 07:06.240
Jadi kita akan meletakkannya di sini untuk saat ini.

07:06.240 --> 07:09.060
Jadi, katakanlah kepala orang yang meledak mendapat bantuan.

07:09.090 --> 07:12.450
Jadi apa yang terjadi ketika kita menghapus simpul ini dari tumpukan kita.

07:12.450 --> 07:17.340
Dan ingat apa yang kita lakukan adalah menukar dengan node terakhir dan kemudian kita tenggelam ke tempat yang

07:17.340 --> 07:17.900
benar.

07:17.970 --> 07:19.710
Dan inilah akhirnya kita.

07:19.710 --> 07:24.540
Jadi sekarang tumpukan kami melayani seseorang dengan prioritas tertinggi berikutnya dengan gegar otak.

07:24.540 --> 07:29.520
Dan jika kita menghapus yang ini lagi kita akan berakhir dengan rute baru sebagai flu.

07:29.820 --> 07:34.240
Jadi setiap orang yang memiliki prioritas kuning akan dilayani sebelum saya pergi ke prioritas hijau itu.

07:34.260 --> 07:37.630
Siapa pun dengan prioritas merah dilayani sebelum orang lain.

07:37.640 --> 07:41.550
Pokoknya itu semacam penjelasan yang berbelit-belit tapi begitulah antrian prioritas bekerja ketika Anda

07:41.550 --> 07:42.360
menggunakan heap.

07:42.360 --> 07:48.990
Yang kita pedulikan hanyalah elemen tingkat atas sebagai hal minimum atau maksimum dan setiap kali kita menambahkan sesuatu

07:48.990 --> 07:53.850
yang berpotensi diperbarui setiap kali kita menghapus sesuatu yang selalu kita hapus dari

07:53.850 --> 07:54.540
atas.

07:54.540 --> 07:57.620
Dan akan ada elemen baru di sana yang sebelumnya tidak ada.

07:57.630 --> 08:04.260
Jadi dia bekerja dengan sangat baik karena penyisipan dan penghapusan adalah mereka memiliki kompleksitas waktu log dan dibandingkan dengan jika

08:04.260 --> 08:10.680
kita hanya melakukan versi naif ini jika kita memiliki satu juta katakanlah seribu elemen di sini setiap kali kita

08:10.680 --> 08:15.330
ingin menghapus sesuatu jika tidak ada Untuk mereka, kami hanya membandingkan setiap prioritas

08:15.330 --> 08:17.620
untuk menemukan yang terendah atau tertinggi.

08:17.640 --> 08:20.370
Kami bekerja dengan 0 kompleksitas akhir zaman.

08:20.550 --> 08:23.710
Jadi, jika ada seribu elemen, kita berbicara tentang seribu perbandingan secara kasar.

08:23.910 --> 08:24.750
Jadi itu tidak baik.

08:24.900 --> 08:26.010
Itu bukan versi yang bagus.

08:26.010 --> 08:27.660
Itu akan berhasil tetapi gratis adalah tumpukan.

08:27.660 --> 08:28.900
Jauh lebih cepat.

08:29.100 --> 08:29.360
BAIK.

08:29.370 --> 08:34.410
Jadi itulah penjelasan tentang apa prioritas atau antrian prioritas menggunakan heap.

08:34.560 --> 08:40.560
Tetapi sekali lagi Anda dapat menerapkannya dengan cara lain tetapi heap adalah yang klasik di

08:40.560 --> 08:46.980
Wikipedia, lebih jauh mengatakan bahwa banyak orang membingungkan keduanya atau mengacaukan ide karena antrian prioritas biasanya

08:46.980 --> 08:48.230
dilakukan dengan heap.

08:48.330 --> 08:50.710
Tetapi sekali lagi ini adalah konsep abstrak.

08:50.910 --> 08:52.720
Anda dapat mengimplementasikannya dengan banyak cara.

08:52.770 --> 08:57.090
Baiklah jadi selanjutnya saya akan memberikan semacam gambaran umum saya kode pseudo untuk bagaimana kita bisa menerapkan

08:57.090 --> 08:57.720
kita sendiri

08:57.900 --> 08:59.400
Dan setelah itu saya akan punya solusi.
