WEBVTT

00:00.240 --> 00:00.990
Selamat datang kembali.

00:01.170 --> 00:05.870
Jadi seperti yang saya sebutkan beberapa tahun yang lalu ada lebih dari satu cara menerapkan tumpukan.

00:05.880 --> 00:13.080
Itu hanya gagasan umum tentang struktur data tempat kita dapat menambahkan data dan menghapus data menggunakan prinsip terakhir

00:13.080 --> 00:14.320
masuk pertama keluar.

00:14.470 --> 00:15.560
Lifeso.

00:16.170 --> 00:20.520
Anda tahu hal terakhir yang ditambahkan adalah hal pertama yang kami dapatkan dan saya tunjukkan cara

00:20.520 --> 00:21.580
melakukannya menggunakan array.

00:21.720 --> 00:22.510
Dan itu berhasil.

00:22.560 --> 00:27.480
Kami tidak harus menulis kode baru apa pun. Kami bahkan tidak mendefinisikan kelas, kami hanya menggunakan array dan menggunakan

00:27.480 --> 00:29.550
metode bawaan yang kami dapatkan secara gratis.

00:29.550 --> 00:30.560
Tidak ada yang salah dengan itu.

00:30.690 --> 00:32.640
Maksudku itu agak berat.

00:32.640 --> 00:36.720
Kami tidak perlu Anda tahu indeks misalnya yang kami dapatkan secara gratis.

00:36.780 --> 00:38.550
Kami tidak membutuhkan yang lain.

00:38.550 --> 00:41.750
Saya tidak tahu metode lusin plus yang dilengkapi dengan array.

00:41.790 --> 00:42.900
Kami tidak membutuhkan semua itu.

00:42.900 --> 00:48.360
Yang benar-benar kita butuhkan adalah metode untuk menambah dan menghapus dalam mode pertama keluar pertama.

00:48.360 --> 00:54.150
Jadi yang akan saya tunjukkan dalam video ini adalah bagaimana membangun kelas stack kami sendiri yang tidak menggunakan

00:54.150 --> 00:55.140
array sama sekali.

00:55.170 --> 00:59.270
Bahkan itu dibangun semacam mengikuti prinsip-prinsip daftar yang terhubung sendiri.

00:59.370 --> 01:03.900
Jadi, jika Anda tidak menonton bagian pada daftar yang terhubung sendiri, Anda harus kembali dan memeriksanya.

01:04.290 --> 01:08.790
Anda juga bisa melakukannya dengan melakukan transaksi dobel terlebih dahulu, tetapi saya tidak akan Anda tahu melakukan keduanya

01:08.790 --> 01:10.890
karena ini banyak waktu dan sangat mirip.

01:10.980 --> 01:14.490
Dan jika Anda melihat cara kerjanya dengan satu hal saya masih mendapatkannya dengan yang ganda.

01:14.820 --> 01:15.310
Baiklah.

01:15.450 --> 01:22.050
Jadi satu catatan ketika kita menggunakan dan mempelajari algoritma lain nanti beberapa dari mereka menggunakan stack dan Qs yang akan kita

01:22.050 --> 01:27.630
lihat sebentar lagi untuk membantu mereka menyimpan data semacam untuk melacak apa yang proses terbuka dan apa yang

01:27.630 --> 01:28.890
belum diproses .

01:29.070 --> 01:33.620
Dan kita bisa menggunakan implementasi array kita bisa menggunakan kelasnya sendiri untuk membuatnya singkat.

01:33.630 --> 01:35.610
Saya akan menggunakan implementasi array.

01:35.640 --> 01:38.650
Itu tidak berarti itu lebih baik meskipun itu lebih mudah dan lebih cepat.

01:38.850 --> 01:41.030
Tapi ini bagian tumpukan dan antrian.

01:41.070 --> 01:46.480
Jadi saya akan menunjukkan kepada Anda bagaimana membuat tumpukan terbaik dari awal dan harus bekerja

01:46.610 --> 01:47.880
terlihat seperti ini.

01:47.880 --> 01:56.460
Saya harus dapat menginisialisasi stack baru dan hanya ada dua metode yang kami pedulikan dengan push dan stack

01:56.550 --> 01:57.880
up pop.

01:57.990 --> 02:05.340
Jadi saya bisa mendorong sesuatu seperti pertama dan mendapatkan beberapa detik lagi melihat itu kembali kepada saya ukuran

02:05.340 --> 02:06.570
atau panjangnya.

02:07.320 --> 02:14.630
Dan kemudian saya melakukan yang terakhir dan kemudian ketika saya muncul tentu saja harus mengikuti Last In First Out.

02:14.940 --> 02:19.220
Jadi itu memberi saya keempat dan ketiga dan kedua lalu pertama dan kemudian tidak.

02:19.530 --> 02:20.160
Jadi begitu.

02:20.190 --> 02:25.920
Kita membutuhkan kelas yang disebut stack dan membutuhkan cara untuk menyimpan data.

02:26.070 --> 02:29.010
Jadi kita akan memiliki kelas simpul juga.

02:29.010 --> 02:35.040
Sepertinya ini sama seperti yang kita lakukan dengan daftar panjang penuh bukannya ujung dan panjang kepala dan ekor.

02:35.040 --> 02:40.410
Aku pergi dengan yang terakhir terakhir dan ukuran kepala dan ekor biasanya disediakan untuk daftar panjang.

02:40.410 --> 02:47.120
Meskipun ini adalah himpunan bagian atau kasus khusus dari daftar panjang saya suka menggunakan pertama dan terakhir tapi itu

02:47.130 --> 02:52.830
kepala dan ekor ide yang sama hanya pointer ada variabel dan kemudian kita memiliki kelas Node

02:52.830 --> 02:58.170
yang memiliki nilai untuk setiap node dan kemudian pointer ke node berikutnya di stack.

02:58.170 --> 03:02.540
Jadi pada titik ini Anda mungkin berpikir dengan baik kami sudah membuat daftar panjang tunggal.

03:02.700 --> 03:05.770
Itu memiliki banyak metode lain tetapi memiliki push dan pop.

03:05.820 --> 03:08.980
Jadi mengapa tidak menggunakan push dan pop sebagaimana adanya.

03:09.420 --> 03:15.810
Dan itu bisa bekerja kecuali untuk satu masalah kecil yaitu dalam push stack dan pop

03:15.810 --> 03:17.530
seharusnya waktu yang konstan.

03:17.730 --> 03:22.800
Dan jika kita jika Anda ingat jika Anda tidak menonton Stingley untuk bagian

03:22.800 --> 03:29.760
ini, ini mungkin tidak masuk akal tetapi pop khususnya bukan waktu yang konstan karena untuk pop sesuatu dari akhir

03:30.000 --> 03:35.870
daftar cara kerjanya kita punya untuk beralih ke seluruh daftar dan menghentikan satu simpul sebelum akhir.

03:35.880 --> 03:37.390
Satu not sebelum buntut.

03:37.470 --> 03:38.990
Itulah yang dilakukan kode ini di sini.

03:39.150 --> 03:43.010
Jadi ini bukan waktu yang konstan karena kita harus mengulang seluruh daftar.

03:43.140 --> 03:49.260
Jadi alih-alih lebih baik menggunakan shift dan unshipping kecuali ada seharusnya disebut push dan

03:49.260 --> 03:49.870
pop.

03:49.890 --> 03:51.380
Jadi saya akan menunjukkan kepada Anda.

03:51.480 --> 03:53.490
Saya akan benar-benar menulis kode tetapi memberi petunjuk.

03:53.490 --> 03:59.520
Anda pada dasarnya bisa mengganti nama shift dan shift untuk mendorong dan pop dan menyebutnya sehari.

03:59.760 --> 04:02.350
Tapi saya akan mendefinisikan kelas stack saya sendiri sekarang.

04:02.460 --> 04:06.930
Saya punya kode semu jika Anda ingin melakukan ini sendiri tetapi saya tidak ingin menyeretnya ke

04:06.930 --> 04:07.810
beberapa video.

04:07.920 --> 04:14.420
Jadi pada dasarnya push akan bekerja sedikit berbeda dari push yang kita tulis sebelumnya karena kita akan

04:14.430 --> 04:18.990
menambah awal daftar dan menghapus dari awal daftar daripada menambahkan ke akhir

04:18.990 --> 04:21.310
dan menghapus dari akhir .

04:21.330 --> 04:22.050
Ide yang sama

04:22.050 --> 04:27.810
Hanya saja ketika kita menambah dan menghapus dari awal, ini lebih cepat, ini adalah waktu yang konstan dalam daftar yang

04:27.810 --> 04:28.960
terhubung secara tunggal.

04:29.010 --> 04:31.860
Jika kita menggunakan daftar yang ditautkan dua kali lipat, maka itu tidak masalah.

04:31.860 --> 04:37.810
Ini akan menjadi waktu yang konstan untuk muncul juga dari akhir pula untuk menemukan fungsi yang disebut Push dan

04:38.070 --> 04:39.370
harus menerima nilai.

04:39.360 --> 04:43.120
Buat simpul baru dengan nilai itu jika tidak ada node di tumpukan.

04:43.170 --> 04:48.660
Jadi properti pertama dan terakhir adalah simpul baru jika setidaknya ada satu simpul membuat variabel yang

04:48.660 --> 04:55.560
menyimpan arus pertama dan kemudian mengatur ulang yang pertama menjadi simpul baru dan kemudian yang perlu kita lakukan adalah menghubungkan

04:55.620 --> 04:56.500
semuanya bersama-sama.

04:56.640 --> 05:01.920
Jadi atur properti berikutnya pada node menjadi variabel yang dibuat sebelumnya dan kemudian tambahkan

05:02.010 --> 05:03.630
ukurannya dengan 1.

05:03.660 --> 05:07.830
Jadi saya akan datang ke sini dan menentukan pertama saya, saya akan melakukan kelas simpul saya.

05:08.040 --> 05:09.630
Jadi simpul sangat sederhana.

05:09.720 --> 05:17.790
Ini disalin dari sebelum kita memiliki konstruktor atau fastforward yang terlihat seperti nilai ini masuk.

05:17.820 --> 05:24.930
Kami menetapkan nilai sama dengan apa pun yang dilewatkan di awal ini dimulai sebagai nol kemudian kita mulai dengan kelas

05:24.990 --> 05:30.170
kami yang disebut Stack yang juga sangat dasar di awal tidak mengambil apa-apa.

05:30.270 --> 05:35.500
Dan alih-alih kepala dan ekor, saya akan menetapkan yang pertama sampai yang terakhir untuk tahu.

05:35.640 --> 05:40.830
Dan kemudian saya akan pergi dengan ukuran bukan panjang hanya untuk membedakannya dan itu dimulai

05:40.830 --> 05:41.660
dari nol.

05:42.170 --> 05:42.710
BAIK.

05:42.810 --> 05:45.010
Jadi sekarang untuk mendorong.

05:45.060 --> 05:51.300
Perlu menerima avowe dan kemudian kita membuat simpul baru dengan nilai itu.

05:51.550 --> 06:00.730
Jadi mari kita lakukan simpul baru kita sama dengan simpul baru dengan apa pun yang diteruskan maka kita periksa apakah tidak ada

06:00.730 --> 06:02.120
simpul di stack.

06:02.230 --> 06:05.330
Jadi properti pertama dan terakhir menjadi simpul baru itu.

06:05.760 --> 06:12.030
Jadi kita hanya akan memeriksa apakah ada kita bisa memeriksa apakah ukurannya nol atau hanya jika tidak ada yang pertama.

06:12.310 --> 06:19.120
Jika tidak ada apa-apa di awal kita atur ini untuk menjadi simpul simpul baru dan kemudian melakukan

06:19.120 --> 06:21.870
hal yang sama untuk yang terakhir.

06:21.880 --> 06:22.640
Baiklah.

06:22.720 --> 06:29.740
Jadi itu yang berikutnya jika ada setidaknya satu node membuat variabel yang menyimpan properti pertama saat ini di stack dan

06:29.740 --> 06:31.660
kita bisa pergi dari sana

06:31.660 --> 06:37.290
Jadi kita perlu yang lain dan saya hanya akan membuat variabel bernama Temp sama dengan barang ini.

06:37.290 --> 06:41.090
Pertama saat ini dulu karena kami menambahkan ini ke awal.

06:41.380 --> 06:45.770
Maka kita hanya akan mengatakan ini dulu sekarang sama dengan simpul baru.

06:46.240 --> 06:50.020
Dan kemudian titik pertama ini selanjutnya sama dengan temp.

06:50.080 --> 06:56.160
Awal yang lama dan kemudian hal terakhir yang perlu kita lakukan adalah menambah ukuran tumpukan dengan 1.

06:56.230 --> 07:02.020
Dan saya tidak benar-benar menambahkan ini dalam kode semu tetapi saya menjelaskan ini sebelumnya bahwa yang terbaik adalah

07:02.080 --> 07:02.860
mengembalikan ukuran.

07:02.950 --> 07:05.960
Jadi saya akan melakukan itu dalam satu baris saja kembali.

07:06.040 --> 07:08.690
Plus plus ukuran dot ini.

07:08.860 --> 07:20.150
Dan jika saya menjalankan kode saya, saya harus bisa melakukan var stack sama dengan stack baru dan melakukan push.

07:20.310 --> 07:22.960
Mari kita masukkan beberapa angka acak.

07:23.050 --> 07:29.050
Sepertinya baik kita benar-benar dapat mengetahui apakah itu berfungsi tetapi pada titik ini urutan dalam

07:29.050 --> 07:32.980
tumpukan itu awal pertama harus 2 3 0 1.

07:33.190 --> 07:37.560
Dan kemudian itu harus menunjuk 2 hingga 30 dan kemudian itu harus menunjuk ke 23.

07:37.570 --> 07:43.120
Jadi sekarang kita hanya perlu mengimplementasikan pop yang akan dihapus dari awal yang lagi kita

07:43.120 --> 07:44.190
lakukan mundur.

07:44.440 --> 07:50.110
Semacam tanggapan terhadap apa yang kami lakukan dengan daftar yang ditautkan sendiri karena kami ingin waktu yang konstan untuk

07:50.110 --> 07:52.290
menambah dan menghapus untuk mendorong dan muncul.

07:52.340 --> 07:55.960
Jadi sekarang untuk mengimplementasikan Pop kita akan mendefinisikan fungsi yang disebut Pop.

07:56.230 --> 08:00.160
Dan kita akan memeriksa apakah ada atau tidak ada node di stack.

08:00.250 --> 08:01.930
Jika kosong, kembalikan no.

08:02.110 --> 08:07.360
Kalau tidak, kita akan mengambil apa pun properti pertama di stack dan menyimpannya dalam variabel

08:07.360 --> 08:09.230
untuk kembali di akhir.

08:09.680 --> 08:10.180
Aduh.

08:10.390 --> 08:14.130
Jika hanya ada satu simpul atur properti pertama dan terakhir menjadi no.

08:14.980 --> 08:19.160
Berarti jika yang pertama sekarang sama dengan yang terakhir, yang terakhir dan yang pertama menjadi tidak.

08:19.330 --> 08:24.610
Jika ada lebih dari satu simpul yang mengatur properti pertama menjadi properti berikutnya pada penurunan pertama

08:24.610 --> 08:28.540
saat ini diputuskan oleh 1 mengembalikan nilai dari node yang dihapus.

08:29.140 --> 08:32.130
Jadi Anda bisa menempatkan jika Anda ingin menerapkan ini sendiri.

08:32.140 --> 08:37.460
Tetapi sekali lagi keduanya sangat mirip dengan pergeseran dan pergeseran pada daftar kami yang terhubung sendiri.

08:37.480 --> 08:43.460
Kami hanya menggunakan pertama dan terakhir dan ukuran bukannya kepala dan ekor dan mengubah nama mereka push dan pop.

08:43.870 --> 08:44.100
BAIK.

08:44.110 --> 08:46.380
Jadi pop dulu kita akan periksa.

08:46.510 --> 08:47.270
Apa itu.

08:47.320 --> 08:50.110
Jika daftarnya kosong maka saya akan melakukannya.

08:50.410 --> 08:52.710
Kalau bukan barang ini dulu.

08:52.780 --> 08:55.060
Jika itu terjadi, kembalikan null.

08:55.060 --> 08:59.500
Itu berarti tidak ada yang bisa membatalkan kita atau tidak ada dalam tumpukan untuk muncul.

08:59.500 --> 09:04.500
Kalau tidak, aku akan menerima panggilan temp set yang sama dengan yang pertama.

09:04.510 --> 09:07.380
Inilah yang akan kami kembalikan di bagian paling akhir dan saya akan benar-benar melakukannya.

09:07.380 --> 09:12.010
Sekarang kembalikan Vau temp atau nilai.

09:12.100 --> 09:14.090
Jadi kami mengembalikan nilainya di akhir.

09:14.110 --> 09:17.180
Tapi sepanjang jalan kita perlu menambal hal-hal bersama.

09:17.290 --> 09:20.510
Jadi kami ingin memeriksa apakah hanya ada satu simpul.

09:20.650 --> 09:30.590
Berarti jika ini sama dengan ini dulu hidup lebih lama dari apa yang ingin kita lakukan ini terakhir.

09:30.800 --> 09:32.490
Sama dengan no.

09:33.080 --> 09:36.120
Dan itu hanya kasus tepi ketika hanya ada satu hal yang tersisa di sana.

09:36.170 --> 09:41.120
Kita perlu memastikan bahwa kita juga memperbarui terakhir karena pada langkah selanjutnya kita

09:41.640 --> 09:44.710
akan memperbarui pertama ini sama dengan ini pertama.

09:44.750 --> 09:45.720
Berikutnya.

09:45.800 --> 09:48.460
Jadi kami perlu melakukan ini sebelumnya.

09:48.560 --> 09:54.590
Jika ini adalah hal terakhir dalam daftar ini atau dalam tumpukan ini, kita perlu memastikan bahwa yang terakhir adalah nol sehingga ketika kita

09:54.590 --> 09:57.150
melakukan hal ini pertama sama dengan ini terlebih dahulu.

09:57.170 --> 10:00.210
Selanjutnya kita menetapkan pertama untuk menjadi tidak juga.

10:00.410 --> 10:06.410
Tetapi dalam kasus contoh ini di mana kita memiliki tiga hal dalam tumpukan kita, kita tidak akan berubah

10:06.410 --> 10:07.120
menjadi tidak.

10:07.340 --> 10:12.770
Alih-alih, kami hanya memperbarui dulu dan kemudian satu-satunya hal yang perlu dikurangi ukurannya.

10:12.830 --> 10:16.340
Jadi ukuran ini minus minus begitu saja.

10:16.580 --> 10:18.450
Dan kita harus baik-baik saja.

10:18.500 --> 10:19.630
Mari kita mengujinya.

10:19.700 --> 10:24.090
Jadi mari kita buat stack var stack baru sama dengan yang baru.

10:24.500 --> 10:26.240
Itu tidak seharusnya terjadi.

10:26.240 --> 10:27.890
Saya pikir saya akan melengkapi otomatis untuk saya.

10:27.890 --> 10:28.670
Ditumpuk.

10:28.750 --> 10:30.780
Bush mari kita lakukan dulu.

10:30.810 --> 10:33.960
Seperti ini kedua dan ketiga.

10:34.630 --> 10:38.900
Maaf kucing saya membuat banyak suara di sana apa yang sedang dilakukan.

10:39.650 --> 10:41.610
Dan kemudian akan melakukan tumpukan pop.

10:41.720 --> 10:45.710
Kita harus mendapatkan yang ketiga dan kemudian yang kedua dan yang pertama dan sekarang tidak ada.

10:46.220 --> 10:49.290
Dan kami telah berhasil mengimplementasikan tumpukan.

10:49.400 --> 10:52.700
Jadi mudah-mudahan Anda menonton bagian tautan tunggal.

10:52.820 --> 10:56.450
Kalau tidak, ini akan menjadi angin puyuh yang lengkap dan itu bukan maksud saya.

10:56.450 --> 11:01.310
Anda tidak seharusnya melihat ini kecuali Anda melewati bagian pertama itu karena ada banyak

11:01.310 --> 11:04.180
hal di sini yang tidak saya jelaskan.

11:04.220 --> 11:09.800
Jadi hanya untuk mengulangi mengapa kita melakukannya dengan cara ini daripada menggunakan push dan pop yang sudah kita tulis untuk daftar

11:09.830 --> 11:11.210
yang terhubung secara tunggal.

11:11.210 --> 11:12.030
Hanya untuk menegaskan kembali.

11:12.050 --> 11:17.330
Ingatlah untuk menambahkan ke ujung dan menghapus dari ujung itu bukan waktu yang konstan untuk menghapus dari

11:17.570 --> 11:23.120
ujung karena kita harus mengulangi seluruh daftar untuk sampai ke item kedua ke terakhir untuk menetapkan bahwa itu menjadi

11:23.120 --> 11:23.840
ekor baru.

11:24.470 --> 11:26.830
Dan tumpukan seharusnya menjadi waktu yang konstan.

11:26.840 --> 11:30.010
Jadi kami menambah dan menghapus dari awal daftar kami.

11:30.050 --> 11:33.020
Tapi kami menyebutnya push dan pop karena itu stack.

11:33.200 --> 11:33.480
Baiklah.
