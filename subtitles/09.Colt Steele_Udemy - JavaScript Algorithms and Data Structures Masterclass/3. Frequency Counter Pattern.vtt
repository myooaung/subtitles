WEBVTT

00:00.210 --> 00:01.090
Selamat datang kembali.

00:01.110 --> 00:02.980
Jadi pola pertama kita akan lihat.

00:03.090 --> 00:05.880
Ini tidak benar-benar disebut penghitung frekuensi.

00:05.880 --> 00:10.650
Saya tidak berpikir itu sebenarnya disebut apa pun secara resmi, tetapi itulah nama

00:10.650 --> 00:18.330
yang saya gunakan karena ide di baliknya adalah bahwa kita menggunakan objek yang biasanya dalam javascript pada dasarnya mengumpulkan banyak nilai dan

00:18.330 --> 00:19.410
frekuensi mereka.

00:19.470 --> 00:25.110
Jadi ini berguna dan dalam algoritma dan tantangan ketika Anda memiliki banyak data

00:25.140 --> 00:31.200
input ganda, Anda perlu membandingkannya untuk melihat apakah mereka terdiri dari nilai yang sama.

00:31.200 --> 00:37.470
Jika mereka adalah anagram satu sama lain jika suatu nilai terdapat di dalam nilai lain kapan pun

00:37.770 --> 00:43.570
Anda membandingkan potongan data dengan input atau lebih dari dua dan frekuensi hal-hal tertentu terjadi.

00:43.590 --> 00:48.480
Dan saya tahu itu terdengar sangat plin-plan dan tidak terlalu berguna, tetapi saya akan menunjukkan kepada Anda beberapa contoh.

00:48.510 --> 00:55.230
Jadi apa yang membuat ini pendekatan yang baik atau pola yang bagus adalah bahwa itu biasanya berakhir dan waktu dibandingkan dengan

00:55.530 --> 01:00.960
solusi yang lebih mudah yang sering melibatkan loop bersarang yang akan memberi kita waktu kuadratik dan

01:00.960 --> 01:01.570
kuadrat.

01:01.890 --> 01:05.930
Jadi izinkan saya menunjukkan contoh masalah karena ini mungkin belum masuk akal.

01:06.440 --> 01:08.010
OK jadi inilah tantangan.

01:08.010 --> 01:14.520
Tulis fungsi yang disebut sama yang menerima dua array dan fungsi tersebut harus mengembalikan true jika setiap nilai

01:14.760 --> 01:17.190
dalam array memiliki kuadratnya yang sesuai.

01:17.190 --> 01:18.180
Dalam array kedua.

01:18.300 --> 01:24.600
Jadi dalam array pertama ada banyak nilai dan kami ingin tahu apakah array kedua memiliki nilai yang

01:24.600 --> 01:27.690
sama persis tetapi kuadrat tetapi urutannya tidak masalah.

01:27.750 --> 01:30.390
Jadi tidak harus sama persis dengan kuadrat.

01:30.390 --> 01:34.600
Itu bisa digabungkan tetapi frekuensi nilai-nilai Malco harus sama.

01:34.650 --> 01:35.930
Jadi inilah sebuah contoh.

01:36.060 --> 01:40.470
1 2 dan 3 dan 4 1 dan 9 harus mengembalikan true.

01:40.770 --> 01:46.960
Jadi 1 kuadrat yang ada di sini dua kuadrat ada di sini empat dan tiga kuadrat ada di sini sembilan.

01:47.040 --> 01:49.370
Tapi pesanannya campur aduk dan tidak apa-apa.

01:50.010 --> 01:51.750
Namun sesuatu seperti ini.

01:51.870 --> 01:52.950
Mari kita lihat yang kedua.

01:52.950 --> 01:53.690
Satu dua tiga.

01:53.700 --> 02:05.400
Koma 1 9 salah karena tidak termasuk dua kuadrat yaitu 4 1 2 1 dan 4 4 1 juga salah karena

02:05.400 --> 02:07.540
frekuensinya harus sama.

02:07.680 --> 02:15.180
Jadi hanya karena satu kuadrat berantakan dan dua kuadrat berantakan tidak berarti frekuensinya

02:15.180 --> 02:15.930
sama.

02:15.960 --> 02:21.790
Jadi kita perlu punya satu di sini dua kali karena kita punya satu dan satu lagi.

02:21.960 --> 02:26.080
Kita perlu memiliki empat di sini satu kali karena itulah yang kita miliki di sini, benar.

02:26.100 --> 02:27.300
Dua ada di sini sekali.

02:27.450 --> 02:28.490
Jadi frekuensi penting.

02:28.500 --> 02:31.460
Bukan hanya memeriksa apakah ada.

02:31.500 --> 02:36.080
Jika ada 4 jika ada 9 itu memastikan ada nomor yang benar.

02:36.090 --> 02:42.330
Jadi, jika Anda ingin mencoba ini, silakan dan anggap Anda tidak perlu mencoba dengan pola penghitung frekuensi

02:42.330 --> 02:44.180
ini yang belum kami perkenalkan.

02:44.250 --> 02:47.930
Tetapi jika Anda mau, Anda bisa mencobanya atau menghasilkan solusi loop bersarang.

02:48.030 --> 02:55.800
Tapi inilah yang saya tidak suka menyebut solusi naif karena mereka sering tidak mudah untuk membuat bahkan ketika mereka

02:55.800 --> 02:58.250
diberi label sebagai naif naif.

02:58.290 --> 03:02.700
Lebih dari itu berarti bukan solusi terbaik dalam kasus ini.

03:02.700 --> 03:07.020
Jadi, inilah solusi naif di mana kami menggunakan loop bersarang.

03:07.020 --> 03:13.160
Secara teknis kami hanya menulis satu loop tetapi kemudian kami menggunakan indeks yang dengan sendirinya looping.

03:13.350 --> 03:19.130
Jadi saya akan melompat dan mendemonstrasikan bagaimana ini bekerja dulu hanya untuk memastikan kita sudah jelas tentang itu.

03:19.140 --> 03:21.060
Jadi idenya adalah kita memiliki dua array.

03:21.150 --> 03:23.640
Katakanlah saya menyebutnya dengan 1 2 3.

03:24.120 --> 03:27.290
Dan kemudian array saya berikutnya akan terlihat seperti.

03:27.690 --> 03:33.300
Mari kita mulai dengan 9 4 9 1 4 seperti ini.

03:33.690 --> 03:34.280
BAIK.

03:34.500 --> 03:39.050
Dan mari kita tambahkan dua lagi di sana dan empat lagi.

03:39.120 --> 03:42.030
Jadi ini harus mengembalikan true karena kita memiliki 1 kuadrat.

03:42.030 --> 03:43.620
Kami memiliki dua kuadrat.

03:43.620 --> 03:47.050
Kami memiliki tiga kuadrat dan kami memiliki dua kuadrat empat.

03:47.370 --> 03:47.890
BAIK.

03:48.090 --> 03:52.410
Jadi pendekatan di sini hal pertama yang bisa kita lakukan untuk memeriksa kasus tepi kecil yang

03:52.410 --> 03:58.230
bagus atau bahkan bukan kasus tepi hanya kita dapat segera memberitahu jika dua array memiliki panjang yang berbeda maka kita sudah selesai

03:58.260 --> 04:04.460
Tidak mungkin itu benar jika ada nilai tambahan di sini yang tidak ada di sini atau sebaliknya.

04:04.860 --> 04:06.420
Jadi kami mengembalikan false.

04:06.420 --> 04:07.450
Bagian itu mudah.

04:07.480 --> 04:11.130
Itu hubungan pendek yang bagus tapi di sini yang akan kita lakukan.

04:11.320 --> 04:14.120
Tidak yakin dengan hasil yang benar.

04:14.190 --> 04:18.500
Kita akan mengulang array pertama ini atau kita bisa melihat yang kedua sebagai gantinya.

04:18.780 --> 04:24.590
Dan kita akan memanggil indeks di mana kita melewati kuadrat dari setiap nilai.

04:24.690 --> 04:26.540
Jadi kita mengulang array ini.

04:26.550 --> 04:30.560
Kita mulai dari 1 dan 1 adalah contoh konyol karena satu kotak hanya satu.

04:30.630 --> 04:36.480
Tapi kita akan bertanya apa indeks 1 kuadrat dalam array 2.

04:36.480 --> 04:41.010
Jadi dalam kasus kami jika kami mengambil satu apa yang indeks 1 kuadrat dalam array ini.

04:41.020 --> 04:43.260
Ini indeks ini di sini yang merupakan indeks 1.

04:43.320 --> 04:44.300
Sangat membingungkan.

04:44.310 --> 04:45.380
Banyak sekali.

04:45.690 --> 04:52.340
Dan kemudian apa yang kita lakukan kita periksa apakah indeks yang benar negatif dan artinya tidak ada.

04:52.500 --> 04:59.940
Kami mengembalikan false dan kami selesai karena jika kami memiliki sesuatu di sini seperti lima dan kami mencoba untuk melihat apa dalam

05:00.270 --> 05:07.350
array array yang mengandung 25 lima persegi itu sementara tidak ada yang mengembalikan negatif yang berarti bahwa kami memiliki ketidakcocokan

05:07.350 --> 05:08.930
dan kami sudah selesai.

05:09.330 --> 05:16.680
Tetapi dalam kasus satu jika itu cocok dan ada di sini maka kita akan memanggil tingkat untuk memisahkan indeks

05:17.160 --> 05:23.190
yang benar koma 1 dan yang efektif apa yang dilakukan adalah menghapusnya dari array ini.

05:23.700 --> 05:27.690
Jadi kita beralih ke dua dan kemudian kita akan melihat dua kuadrat.

05:27.690 --> 05:30.480
Apa indeks dua kuadrat dalam array ini.

05:30.720 --> 05:33.350
Nah ada dua dari mereka hanya memberi kita yang pertama.

05:33.450 --> 05:36.300
Jadi ini akan mengubah indeks ini.

05:36.330 --> 05:38.030
Jadi ini tidak benar di sini.

05:38.040 --> 05:39.450
Kami tidak mengembalikan false.

05:39.450 --> 05:40.200
Kami terus berjalan.

05:40.200 --> 05:46.300
Kami tinggal satu hari lagi iterasi loop dan kami menghapusnya dari array menggunakan sambatan dan kemudian kita melihat tiga

05:46.300 --> 05:48.140
kuadrat dan ada di sana.

05:48.150 --> 05:55.210
Jadi kita menghapusnya kemudian kita sampai ke akhir array dan kita melihat apa indeks 2 kuadrat.

05:55.290 --> 05:56.420
Nah itu empat.

05:56.910 --> 05:58.020
Itu dia.

05:58.020 --> 05:58.620
Kami menghapusnya.

05:58.620 --> 06:01.740
Kami mencapai akhir array dan kami tidak pernah kembali ke false.

06:01.740 --> 06:03.060
Jadi kami mengembalikan true.

06:03.120 --> 06:05.570
Jadi Anda tidak perlu melakukan solusi ini dengan indeks.

06:05.580 --> 06:11.360
Anda bisa secara manual mengulangi seluruh array sendiri yang pada dasarnya adalah apa yang dilakukan indeks.

06:11.550 --> 06:18.090
Jadi kita memiliki satu loop dan kemudian satu detik untuk loop yang mengulangi saya perintah beberapa kali loop atas

06:18.090 --> 06:22.660
array ini dan mencari satu kuadrat hanya satu kuadrat apakah ini kuadrat.

06:22.680 --> 06:23.020
Ya.

06:23.070 --> 06:23.620
BAIK.

06:23.850 --> 06:29.700
Sekarang kita melihat dua dan kita mengulang seluruh array tetapi kita masih perlu splice atau kita

06:29.700 --> 06:36.370
perlu cara untuk mengingat berapa kali kita sudah menemukan ini untuk jadi kita juga dapat menerapkan ini untuk ini.

06:36.390 --> 06:39.840
Kita perlu memastikan bahwa ada frekuensi nilai yang sama.

06:40.140 --> 06:43.720
Ngomong-ngomong, hanya untuk menunjukkan kepada Anda cara kerjanya saat ini.

06:43.830 --> 06:46.250
Mengapa tidak hanya melakukan itu log array 2.

06:46.380 --> 06:48.470
Jadi Anda bisa melihatnya menyusut saat kita melangkah.

06:48.720 --> 06:54.060
Dan kemudian di sini saya akan memanggil yang sama pada keduanya dan mari kita jalankan.

06:54.060 --> 06:56.960
Dan Anda dapat melihat pertama kali melalui penampilan seperti ini.

06:57.210 --> 07:00.240
Dan kemudian kami sedang mencari satu jadi kami menghapus satu.

07:00.540 --> 07:02.400
Dan sekarang dua terlihat seperti ini.

07:02.400 --> 07:07.000
Lain kali melalui kami sedang mencari dua kuadrat jadi kami menghapus empat dan kami punya ini.

07:07.080 --> 07:09.410
Lain kali kita mencari tiga kuadrat yang sembilan.

07:09.450 --> 07:10.260
Kami menghapusnya.

07:10.260 --> 07:15.130
Kita berakhir dengan ini dan kemudian waktu berikutnya kita mencari dua kuadrat dan kemudian kita selesai.

07:15.270 --> 07:18.120
Kami mencapai ujung loop dan kami mengembalikan true.

07:18.660 --> 07:19.070
BAIK.

07:19.260 --> 07:24.630
Jadi itu pendekatan naif karena itu dari dan kuadrat sudah waktunya kuadratik.

07:24.690 --> 07:30.330
Indeks ini mengulangi seluruh array atau berpotensi iterasi atas seluruh array yang merupakan

07:30.390 --> 07:31.260
loop bersarang.

07:31.320 --> 07:38.520
Jadi, semakin panjang array kami, ini tumbuh seperti ini dan bersarang sehingga hubungan

07:38.520 --> 07:39.510
kuadrat.

07:39.660 --> 07:43.380
Kami selalu ingin mencoba dan menghindari loop bersarang kapan pun memungkinkan.

07:43.380 --> 07:46.300
Jadi di sinilah pola penghitung frekuensi masuk

07:46.620 --> 07:53.640
Alih-alih mengulang-ulang array pertama dan kemudian memeriksa setiap nilai dalam subkelompok atas array kedua, kita dapat

07:53.640 --> 07:59.550
mengulangi setiap array satu kali secara terpisah, itulah yang saya lakukan di sini.

07:59.550 --> 08:01.630
Jadi inilah satu loop. Ini loop lain.

08:01.680 --> 08:07.590
Ingat bahwa dua loop jauh lebih baik daripada dua loop bersarang.

08:07.650 --> 08:09.310
Dua loop terpisah.

08:09.330 --> 08:14.440
Ini akan menjadi Anda ketahui jika dan seribu karakter atau seribu elemen.

08:14.550 --> 08:21.210
Ini berarti dua ribu iterasi tetapi jika kita memiliki 1000 pada loop luar dan kemudian 1000

08:21.210 --> 08:28.880
kali pada loop dalam kita melihat 1000 kali 1000 yang merupakan satu juta dibandingkan dengan apa yang kita katakan 2000.

08:29.070 --> 08:34.120
Jadi saya tidak akan membuat Anda tahu mempelajari ini di browser di sini atau di slide.

08:34.110 --> 08:35.820
Saya akan menunjukkannya kepada Anda dan menunjukkan cara kerjanya.

08:35.820 --> 08:36.730
Tapi ini sudah berakhir.

08:36.750 --> 08:40.340
Dan itu waktu linier jauh lebih baik daripada jika dan kuadrat

08:40.530 --> 08:40.830
Baiklah.

08:40.830 --> 08:47.850
Jadi di sini disisipkan sama saya, baris saya sama yang sudah mengatakan sama.

08:47.850 --> 08:48.930
Sangat membingungkan.

08:49.290 --> 08:51.770
Dan mari kita melangkah melalui ide dasar di sini.

08:51.810 --> 08:57.660
Jadi kita menggunakan objek dan sebenarnya ada dua objek dan masing-masing akan membuat.

08:57.840 --> 09:02.170
Ini akan menghitung frekuensi nilai individual dalam array.

09:02.340 --> 09:05.790
Jadi kita akan berakhir dengan dua objek di akhir.

09:06.000 --> 09:08.270
Biarkan saya mencetaknya sehingga Anda bisa melihatnya.

09:08.330 --> 09:10.680
Sehingga penghitung frekuensi log 1.

09:10.740 --> 09:18.270
Jadi itu berlaku untuk array pertama kami dan kemudian membatalkan penghitung frekuensi log 2 dan juga mulai dengan menjalankan kode ini sehingga Anda dapat

09:18.270 --> 09:20.480
melihat apa yang akhirnya kami dapatkan.

09:20.520 --> 09:22.500
Inilah yang kami benar.

09:22.530 --> 09:28.360
Itu nilai pengembalian kita karena keduanya sama sesuai dengan apa yang seharusnya kita kembalikan benar.

09:28.380 --> 09:34.680
Itu yang kita inginkan tetapi jika kita melihat benda-benda yang dihasilkan kita berakhir dengan masing-masing objek memiliki

09:34.860 --> 09:37.110
nilai atau kunci seperti itu.

09:37.230 --> 09:43.080
Dan kemudian itu memberitahu kita berapa kali yang terjadi dalam daftar itu maka kita mendapatkan jumlah kali

09:43.080 --> 09:48.400
2 ada dalam daftar itu untuk melihat berapa kali tiga ada dalam daftar itu 1.

09:48.480 --> 09:48.870
Kanan.

09:48.880 --> 09:54.510
Jika kita melihat ini, kita sedang mengkompilasi objek yang hanya memberitahu kita berapa kali setiap nilai dalam array

09:54.930 --> 09:55.480
itu.

09:55.800 --> 09:58.830
Dan hal yang sama di sini kecuali kita melakukannya untuk array kedua.

09:59.180 --> 10:03.020
Jadi kita katakan ada satu sembilan ada dua merangkak.

10:03.060 --> 10:04.700
Ada satu.

10:05.370 --> 10:11.750
Kemudian keajaiban begitu membangun ini hanya satu iterasi di atas setiap array untuk membuat ini.

10:11.750 --> 10:19.010
Itu tidak sulit tapi kemudian bagian ajaibnya adalah kita hanya melakukan satu loop lagi dan kita mengulanginya.

10:19.010 --> 10:23.330
Anda dapat melakukannya dengan salah satu arah tetapi kami mengulangi objek pertama di sini.

10:23.660 --> 10:27.050
Dan untuk setiap hal yang kita lihat adalah satu.

10:27.080 --> 10:28.880
Ini adalah contoh sederhana yang seharusnya tidak saya gunakan.

10:28.880 --> 10:29.880
Mari kita lihat dua.

10:29.970 --> 10:34.250
Kami melihat dua dan kami melihat bahwa itu ada atau terjadi dua kali.

10:34.250 --> 10:38.680
Jadi itu memberitahu kita bahwa kita perlu memiliki 4 terjadi dua kali.

10:38.750 --> 10:44.960
Dan objek kita yang lain atau kita melihat tiga itu terjadi satu kali di objek pertama utama kita array pertama.

10:44.990 --> 10:50.450
Jadi itu memberitahu kita sembilan kebutuhan terjadi satu kali tiga kotak tiga kali tiga adalah sembilan di array

10:50.450 --> 10:50.940
kedua.

10:51.140 --> 10:52.820
Jadi itulah yang dilakukan logika ini di sini.

10:52.970 --> 10:57.400
Jadi untuk membantu saya menggambarkan ini, saya telah memperbarui ini, saya telah menambahkan 5 dan 11.

10:57.590 --> 11:04.040
Jadi ini adalah panjang yang sama tetapi mereka tidak sama sejauh kriteria kami karena 5 ini tidak

11:04.040 --> 11:06.020
memiliki 25 yang sesuai dengannya.

11:06.020 --> 11:07.020
Dan kami memiliki 11.

11:07.040 --> 11:10.100
Kami tidak memiliki apa pun akar kuadrat dari 11 di sini.

11:10.330 --> 11:10.570
BAIK.

11:10.580 --> 11:17.000
Jadi jika saya menjalankan ini sekarang saya juga memindahkan penasihat hukum saya yang log sehingga kita dapat melihat mereka karena saya punya mereka

11:17.000 --> 11:20.680
di sini dan kami kembali palsu dan kami tidak akan melihat mereka dicetak.

11:20.690 --> 11:26.040
Apa yang terjadi sekarang adalah kita mengulangi objek penghitung frekuensi pertama ini.

11:26.060 --> 11:29.710
Hal yang kami bangun ini relatif sederhana.

11:29.710 --> 11:31.100
Semoga bagian itu masuk akal.

11:31.130 --> 11:34.980
Kita mulai dengan objek kosong dan kemudian kita hanya mengulangi setiap nilai dalam array.

11:35.130 --> 11:35.980
Bisa menggunakan for for.

11:35.980 --> 11:40.970
Saya suka menggunakan bentuk jika Anda tidak terbiasa dengan empat sintaks itu hanya cara yang

11:40.970 --> 11:43.450
bagus untuk membalik seperti array atau string.

11:43.700 --> 11:48.460
Kami hanya membuat variabel placeholder seperti vokal dan yang sesuai dengan setiap elemen dalam array.

11:48.530 --> 11:55.000
Jadi untuk setiap vokal dalam array satu kita akan menambahkan satu ke penghitung frekuensi jika sudah ada di sana

11:55.430 --> 11:57.730
atau kita akan menginisialisasi ke 1.

11:57.860 --> 12:02.900
Jadi kita berakhir hanya dengan objek kecil ini yang memberitahu kita berapa kali setiap hal terjadi setiap elemen

12:02.960 --> 12:03.980
dalam daftar itu.

12:04.250 --> 12:08.580
Lalu kita lewati yang pertama ini dan kita akan melihat masing-masing kunci.

12:08.630 --> 12:11.820
Jadi kita akan melihat yang mana yang membosankan jadi saya akan melewatkannya.

12:11.840 --> 12:14.810
Kita akan melihat dua dan kita akan memeriksa dua kuadrat.

12:14.810 --> 12:16.090
Itu yang ini.

12:16.130 --> 12:18.720
Apakah itu kunci dalam hitungan frekuensi atau dua.

12:18.860 --> 12:20.430
Jadi dua kuadrat adalah empat.

12:20.480 --> 12:24.780
Jadi apakah ada empat di objek kedua kita dan ada.

12:24.890 --> 12:26.980
Jadi bagian ini tidak mengembalikan false.

12:27.020 --> 12:28.250
Lalu kita periksa OK.

12:28.310 --> 12:30.340
Apakah nilai sesuai.

12:30.430 --> 12:34.280
Jika ada dua pasangan, perlu ada dua kekuatan.

12:34.280 --> 12:37.260
Dan jika tidak ada jika ada ketidaksesuaian, kami mengembalikan false.

12:37.310 --> 12:41.450
Jadi bukan hanya soal memeriksa apakah ada 4.

12:41.480 --> 12:47.420
Kita perlu memastikan ada dua merangkak seperti yang kita diskusikan maka kita terus berjalan tahu bahwa kita

12:47.420 --> 12:54.920
memukul tiga dan kita periksa ada sembilan di objek kedua di Adis dan lakukan nilai cocok satu pertandingan satu lalu kita

12:54.950 --> 12:55.890
dapatkan lima.

12:56.000 --> 12:58.730
Apakah ada lima kotak yang 25.

12:58.730 --> 12:59.800
Apakah ada 25.

12:59.810 --> 13:00.520
Tidak.

13:00.830 --> 13:02.140
Jadi kami mengembalikan false.

13:02.210 --> 13:04.410
Jadi semoga Anda bisa melihat mengapa ini lebih baik.

13:04.580 --> 13:12.440
Setidaknya dalam hal kompleksitas O-besar ketika kita meningkatkan ukuran array ini kita berbicara tentang berapa banyak loop

13:12.440 --> 13:18.880
di sini tiga loop di atas seluruh ukuran array apa pun array terbesar.

13:18.950 --> 13:24.320
Katakan saja maksud saya ukurannya harus sama agar kita dapat mencapai titik ini karena jika mereka

13:24.320 --> 13:26.500
tidak cocok, kita berhenti di sini.

13:26.540 --> 13:28.400
Jadi dua array kami harus berukuran sama.

13:28.430 --> 13:35.690
Katakanlah seribu seperti 30 berbicara tentang seribu elemen yang kita miliki sekitar 3.000 iterasi Ini

13:35.690 --> 13:36.330
seribu.

13:36.500 --> 13:37.380
Ini 1000.

13:37.510 --> 13:38.760
Dan ini seribu lagi.

13:38.760 --> 13:43.360
Dan ingat bahwa sangat mudah untuk mengakses data di dalam suatu objek.

13:43.370 --> 13:45.560
Apakah penting berapa banyak hal di sana.

13:45.560 --> 13:49.630
Hanya cara benda bekerja kita benar-benar berbicara lebih banyak tentang ini nanti dalam kursus.

13:49.670 --> 13:56.040
Jadi ini adalah tiga dan kira-kira di mana panjang array dan kami menyederhanakannya.

13:56.040 --> 13:58.690
Hanya dua dari kompleksitas akhir.

13:58.760 --> 14:02.160
Bandingkan itu dengan pendekatan naif kami di mana kami telah kuadrat.

14:02.450 --> 14:09.140
Jadi jika kita berbicara tentang Anda tahu seribu panjang 1000 untuk setiap array itu sejuta iterasi.

14:09.140 --> 14:11.350
Jika kita memiliki loop bersarang Ya.

14:11.360 --> 14:12.580
Sekali lagi kami menggunakan indeks.

14:12.590 --> 14:15.980
Tapi kita sedang berbicara tentang loop bersarang yang merupakan indeks yang dilakukannya.

14:15.990 --> 14:21.590
Ini hanya jalan pintas jadi kita tidak perlu mengetik semuanya dalam satu lingkaran yang kira-kira sejuta

14:21.590 --> 14:22.310
operasi terburuk.

14:22.310 --> 14:25.470
Jadi ini jauh lebih buruk.

14:25.490 --> 14:26.670
Mengapa Anda tidak mengatakannya demikian.

14:26.990 --> 14:32.810
Jadi ide di balik penghitung frekuensi biasanya menggunakan objek dan Anda

14:33.080 --> 14:39.800
menggunakan objek itu untuk membangun semacam profil cara memecah konten array atau string.

14:39.800 --> 14:46.700
Biasanya semacam struktur linear seperti array atau string dan kemudian Anda dapat dengan cepat membandingkan

14:47.000 --> 14:50.230
kerusakan itu dengan bagaimana objek lain terlihat.

14:50.390 --> 14:52.740
Itu dibangun dari string atau array.

14:52.850 --> 14:54.030
Jadi kami punya dua array.

14:54.110 --> 14:59.470
Kami memecahnya menjadi objek yang mengelompokkan apa yang ada di array tersebut dan kemudian kami dapat membandingkan objek-objek

14:59.470 --> 15:03.140
itu dan ini memungkinkan kami untuk meningkatkan kode kami secara signifikan.

15:03.160 --> 15:06.850
Jadi saya akan menunjukkan contoh lain yang berhubungan dengan anagram.

15:06.850 --> 15:11.260
Semoga ini akan membantu memperkuat cara kerjanya dan kemudian kita akan beralih ke pola lain.
