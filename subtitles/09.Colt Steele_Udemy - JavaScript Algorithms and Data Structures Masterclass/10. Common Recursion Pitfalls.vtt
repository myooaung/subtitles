WEBVTT

00:00.180 --> 00:00.840
Selamat datang kembali.

00:00.900 --> 00:05.130
Jadi yang ingin saya lakukan sekarang dan video ini adalah berbicara tentang beberapa jebakan

00:05.130 --> 00:08.010
masalah umum yang muncul saat Anda menulis solusi rekursif.

00:08.010 --> 00:12.750
Jadi satu hal yang terjadi lebih sering daripada yang Anda pikirkan adalah Anda tidak memiliki

00:12.750 --> 00:14.700
kasing atau kasing Anda salah.

00:14.970 --> 00:21.600
Jadi apa yang saya maksud dengan itu adalah bahwa jika Anda kembali ke faktorial di sini tanpa ini kasus dasar di sini

00:21.600 --> 00:26.240
kode ini hanya terus berjalan dan pergi dan menambahkan panggilan fungsi ke stack berulang

00:26.280 --> 00:34.290
Jadi jika kita hanya memasukkan faktorial dua, maka akan mengembalikan dua kali faktorial dari satu faktorial satu akan mengembalikan

00:34.290 --> 00:40.080
1 kali faktorial dari nol faktorial dari nol membalikkan nol kali faktorial dari negatif

00:40.080 --> 00:42.910
1 dan itu terus berlangsung selamanya.

00:43.020 --> 00:44.840
Tidak ada akhir yang terlihat.

00:45.180 --> 00:54.370
Dan jika saya menjalankan ini sekarang Anda akan melihat apa yang kita dapatkan melebihi ukuran stack panggilan maksimum.

00:54.630 --> 01:00.090
Jadi ini berarti bahwa sebenarnya saya tidak tahu persis apa yang akan terjadi jika kita

01:00.770 --> 01:07.880
mencoba dan melangkah melalui ini tetapi jika saya jika saya mencobanya Anda akan melihat bahwa tumpukan kami terus tumbuh berulang-ulang.

01:07.980 --> 01:10.910
Jadi saya bisa terus mengklik selamanya dan melangkah melalui ini.

01:10.950 --> 01:18.880
Kami ada di 100 panggilan sesuatu di stack sekarang tetapi ada ukuran maksimum itu berbeda tergantung pada Node mesin

01:19.060 --> 01:20.940
apa yang Anda gunakan.

01:20.940 --> 01:25.510
Saya pikir itu sekitar 10.000 panggilan.

01:25.530 --> 01:26.400
Tapi tidak positif.

01:26.400 --> 01:28.950
Tapi ada yang maksimal dan kita akan melampauinya.

01:28.980 --> 01:35.130
Jadi jika saya hanya melanjutkan eksekusi skrip Anda akan melihat apakah kita mendapatkan ukuran stack panggilan maksimum kesalahan itu terlampaui.

01:35.220 --> 01:36.410
OK jadi itu masalah besar.

01:36.660 --> 01:41.220
Hal lain yang bisa kita temui adalah mengembalikan hal yang salah atau lupa

01:41.220 --> 01:41.960
untuk kembali.

01:42.360 --> 01:47.550
Jadi yang saya maksud dengan itu adalah jika alih-alih kembali Jadi katakanlah kita memiliki casing dasar casing ruang

01:47.550 --> 01:49.100
yang benar sehingga harus berhenti.

01:49.380 --> 01:53.180
Tetapi bagaimana jika kita hanya mengembalikan mati rasa berdasarkan faktor no.

01:53.620 --> 01:58.470
Dan ini adalah contoh sederhana itu mudah untuk mengidentifikasi masalah tetapi kadang-kadang kode jauh lebih lama dan

01:58.830 --> 02:01.820
kadang-kadang lebih sulit untuk berjalan melalui setiap langkah individu.

02:01.820 --> 02:06.540
Jika Anda tidak meluangkan waktu untuk memperhatikan apa yang sebenarnya Anda kembalikan karena meskipun kami memiliki

02:06.540 --> 02:10.550
kasing dasar, itu tidak membantu kami tidak akan pernah memukulnya karena kami kembali.

02:10.560 --> 02:17.100
Dalam kasus faktorial untuk kembali ke kali faktorial dua yang akan kembali ke sektoral

02:17.160 --> 02:18.690
untuk membatalkan selamanya

02:18.960 --> 02:20.000
Ya tidak selamanya.

02:20.070 --> 02:20.960
Seperti yang akan Anda lihat.

02:21.140 --> 02:29.160
Kami mengalami masalah di sana kami pergi ukuran tumpukan panggilan maksimum melebihi satu perangkap potensial lebih adalah jika bukannya kembali

02:29.160 --> 02:33.310
ke sini jika kita memiliki satu log konstan misalnya.

02:33.720 --> 02:37.130
Jadi kita masih jika kasus dasar mari kita ubah kembali ke angka minus 1

02:37.200 --> 02:42.270
Jadi semuanya terlihat bagus kecuali bahwa kami terus-menerus mencatat satu ketika jumlahnya sama dengan 1.

02:42.480 --> 02:44.350
Dan apa yang kita dapat.

02:44.380 --> 02:52.000
Ukuran tumpukan panggilan maksimum hal yang sama terlampaui karena kami mencetak satu di sini agar kami dapat menyegarkan

02:52.000 --> 02:55.400
dan melakukan hal yang sama melalui ini.

02:55.400 --> 02:56.640
Jika kita melihat tumpukan panggilan.

02:56.890 --> 02:57.190
BAIK.

02:57.190 --> 02:59.860
Jadi faktorial 2 disebut.

02:59.860 --> 03:05.590
Jadi kami kembali dua kali faktorial dari 1 faktorial 1 tidak mengembalikan apa pun.

03:05.620 --> 03:09.430
Jadi tidak menghentikan eksekusi di sini.

03:09.940 --> 03:14.370
Ingatlah bahwa cara kita membuang hal ini dari tumpukan adalah dengan kembali.

03:14.380 --> 03:16.260
Tapi kami tidak mengembalikannya.

03:16.300 --> 03:19.050
Jadi alih-alih ini hanya hal tambahan kecil yang menyenangkan.

03:19.060 --> 03:25.870
Oh omong-omong jika Gnome sama dengan 1 mencetak satu tetapi kemudian terus kembali 1 kali faktorial dari 0.

03:25.870 --> 03:28.850
Jadi, Anda akan melihat itulah yang terjadi sekarang.

03:28.860 --> 03:33.420
Sekarang kita kembali satu kali cek atau pahlawan lokal.

03:33.510 --> 03:34.760
Sekarang nama adalah nol.

03:34.970 --> 03:39.050
Dan kita terus berjalan dan jika saya terus mengklik Anda akan melihat tidak ada yang terus negatif 7.

03:39.050 --> 03:45.640
Sekarang kita berada di dan kita akan terus berjalan sampai kita mencapai ukuran tumpukan panggilan maksimum jika kita melebihi itu.

03:45.710 --> 03:48.740
Jadi saya akan memperbaikinya dan mengembalikannya sebagai pengembalian 1.

03:48.770 --> 03:51.740
Jadi pentingnya kembali adalah.

03:51.860 --> 03:57.530
Maksud saya, rekursi dibangun atas gagasan tumpukan panggilan ini di mana semua hal ini saling bergantung

03:57.530 --> 04:01.250
satu sama lain menunggu mereka dipasangkan dalam sebuah rantai.

04:01.250 --> 04:06.710
Tetapi kita masih harus mengembalikan beberapa nilai di akhir untuk kemudian mengirim kembali dan kemudian menambah atau mengalikan atau melakukan

04:06.710 --> 04:11.180
sesuatu dengan untuk mengirim kembali ke yang sebelumnya untuk terus berjalan sampai kita mendapatkan efek panggilan fungsi

04:11.180 --> 04:11.720
asli.

04:11.720 --> 04:13.560
Tauriel juga.

04:13.670 --> 04:13.880
Baiklah.

04:13.880 --> 04:21.530
Jadi mari kita pastikan itu masih berfungsi dan lakukan faktorial di 5 tetapi jika kita dapatkan satu 20 Oke itu berfungsi.

04:21.530 --> 04:28.790
Sekarang satu catatan di Chrome pesan yang diberikan kepada saya adalah berapa ukuran stack panggilan maksimum yang terlampaui.

04:28.790 --> 04:32.350
Ini umumnya dikenal sebagai stack overflow.

04:32.420 --> 04:33.370
Pikirkan tumpukan itu.

04:33.470 --> 04:34.540
Itu meluap.

04:34.640 --> 04:34.860
Kanan.

04:34.860 --> 04:36.620
Terlalu banyak bingkai pada tumpukan itu.

04:36.620 --> 04:38.650
Terlalu banyak fungsi yang mencoba dipanggil.

04:38.960 --> 04:41.520
Jadi mungkin Anda miliki dan Anda mungkin pernah menemukan istilah itu sebelumnya.

04:41.630 --> 04:45.160
Dan nama situs Web stack overflow populer dari mana asalnya.

04:45.440 --> 04:50.020
Ketika Anda memiliki biasanya itu adalah panggilan rekursif jika Anda melihat pesan itu hanya perlu diingat.

04:50.030 --> 04:52.600
Ini berarti rekursi Anda tidak berhenti.

04:53.000 --> 04:54.550
Tidak pernah ada dasar batu.

04:54.680 --> 04:54.990
BAIK.

04:55.010 --> 04:58.100
Itu berakhir tetapi saya ingin mengatakan tentang masalah umum.

04:58.280 --> 05:03.040
Anda tidak memiliki kasing atau Anda lupa mengembalikan nilainya atau mengembalikan yang salah.

05:03.050 --> 05:06.440
Semua itu dapat menghasilkan stack overflow yang tidak baik.
