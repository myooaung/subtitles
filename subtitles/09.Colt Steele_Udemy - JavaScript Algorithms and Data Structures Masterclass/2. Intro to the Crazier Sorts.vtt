WEBVTT

00:00.150 --> 00:01.400
Halo, selamat datang kembali.

00:01.410 --> 00:04.090
Ini adalah bagian kedua dari algoritma penyortiran.

00:04.140 --> 00:06.230
Ini adalah algoritma pemilahan menengah.

00:06.240 --> 00:07.740
Jadi kita harus melihat tiga lagi.

00:07.920 --> 00:13.470
Dan pada dasarnya kami mempelajari ini secara terpisah karena mereka jauh lebih cepat tetapi mereka juga

00:13.920 --> 00:20.610
sedikit lebih menantang. Mereka kurang intuitif untuk menulis sendiri. Mereka adalah meteor Giusi atau algoritma yang membutuhkan lebih banyak waktu

00:20.610 --> 00:25.740
untuk memahami tetapi mereka juga hasilnya adalah mereka lebih cepat dan saya akan membuktikannya kepada

00:25.740 --> 00:26.390
Anda.

00:26.430 --> 00:30.760
Saya akan menunjukkan kepada Anda setidaknya satu contoh seberapa cepat mereka dalam video ini.

00:30.960 --> 00:36.510
Tetapi pertama-tama saya ingin menambahkan catatan penting yang tidak perlu ditakuti ketika saya mengajarkan ini sebelum

00:36.930 --> 00:43.100
saya pikir banyak siswa merasa tidak enak karena mereka berjuang melalui algoritma pengurutan dasar awal sehingga mereka tidak dapat

00:43.110 --> 00:45.030
menulis semuanya pada mereka. sendiri.

00:45.090 --> 00:46.270
Itu sangat normal.

00:46.470 --> 00:50.820
Dan ketika Anda mencapai ketiga algoritma ini lebih sulit mereka meningkatkannya.

00:50.970 --> 00:57.050
Jangan merasa tertekan untuk menulis kode sendiri periode tetapi terutama bukan pertama kalinya.

00:57.240 --> 01:01.560
Jadi saya akan memberi Anda kode palsu untuk jiwa petualang yang ingin mencoba dan menerapkannya

01:01.560 --> 01:02.080
sendiri.

01:02.250 --> 01:06.300
Tetapi sebenarnya bagian ini lebih lanjut tentang menelusuri kode dan memahami cara kerjanya.

01:06.300 --> 01:11.730
Mampu menjelaskan algoritme yang tidak dapat menulis ulang kata demi kata karakter demi karakter.

01:11.730 --> 01:12.870
Pada percobaan pertama Anda.

01:13.050 --> 01:14.090
Jadi ingatlah itu.

01:14.250 --> 01:15.410
Kita akan membahasnya.

01:15.420 --> 01:16.590
Fokus pada cara kerjanya.

01:16.590 --> 01:21.580
Fokus untuk dapat menjelaskan kembali kepada saya misalnya apa yang dilakukan setiap baris kode saya.

01:21.720 --> 01:26.550
Daripada Anda merasakan tekanan untuk datang dengan segala sesuatu dari awal karena ini menantang dan ini

01:26.580 --> 01:31.270
adalah algoritma yang diciptakan oleh akademisi yang telah ada selama beberapa waktu yang telah

01:31.260 --> 01:32.320
dicoba dan diuji.

01:32.460 --> 01:35.130
Jadi tolong jangan khawatir jangan terlalu terintimidasi.

01:35.250 --> 01:37.020
Aku tidak mau, aku tidak memalingkan siapa pun.

01:37.030 --> 01:37.290
Baiklah.

01:37.290 --> 01:39.510
Jika bagian terakhir sulit bagi Anda, tidak apa-apa.

01:39.510 --> 01:41.650
Jangan merasa buruk karena yang ini disebut perantara.

01:41.940 --> 01:42.330
BAIK.

01:42.380 --> 01:47.030
Jadi tujuan kami pertama-tama memahami keterbatasan apa yang telah kami pelajari sejauh ini.

01:47.040 --> 01:48.990
Temukan dan penyisipan gelembung.

01:49.170 --> 01:49.990
Ada apa dengan.

01:50.000 --> 01:53.160
Yah kita harus mengatakan apa yang salah apa saja kekurangannya.

01:53.460 --> 01:58.460
Kita akan menerapkan tiga jenis implement menggabungkan jenis quicksort dan radix sort.

01:58.500 --> 02:03.600
Tetapi pertama-tama saya berjanji akan menunjukkan kepada Anda demonstrasi tentang seberapa cepat algoritma yang

02:03.600 --> 02:04.700
akan dipelajari sekarang.

02:05.160 --> 02:08.140
Jadi algoritma pengurutan yang telah kami pelajari sejauh ini tidak memiliki skala yang baik.

02:08.160 --> 02:12.500
Mereka benar-benar bekerja dengan sangat baik pada array 20 item kecil.

02:12.510 --> 02:18.480
Mereka bekerja sangat cepat tetapi mereka tidak skala dengan baik jika kita bekerja dengan 100000 elemen misalnya

02:18.480 --> 02:23.440
Jadi jika kita benar-benar mencoba semacam gelembung aku akan menurunkannya dan hanya melakukan 10.000 elemen.

02:23.520 --> 02:26.110
Butuh waktu cukup lama, saya akan menunjukkan kepada Anda sekarang.

02:26.460 --> 02:32.340
Jadi apa yang saya miliki di sini jadi inilah implementasi semacam gelembung saya dan di sini saya memiliki sedikit

02:32.340 --> 02:36.700
kode yang membuat array oh tidak, ini $ 100 dan saya tidak bisa menghitung.

02:36.700 --> 02:37.350
Sudahlah.

02:37.440 --> 02:41.490
Ini adalah 100.000 elemen dan saya akan mulai dengan menunjukkan Anda semacam gelembung

02:41.490 --> 02:43.070
Sekarang apa yang dilakukan kode ini.

02:43.290 --> 02:47.510
Saya hanya menyalin ini dan mengubah nomor ini menjadi 10.

02:47.580 --> 02:51.380
Itu hanya mengambil 10 angka acak dan menempelkannya dalam sebuah array.

02:51.390 --> 02:55.850
Jadi jika saya melakukan 100000 kita akan memiliki array yang 100000 angka acak.

02:55.980 --> 02:58.330
Seharusnya tidak ada periode pemesanan.

02:58.350 --> 03:04.440
Maksud saya secara teknis mungkin mereka sudah bisa disortir tetapi itu tidak mungkin dengan

03:04.440 --> 03:05.820
100000 item.

03:05.820 --> 03:07.800
Ok jadi saya akan melakukan ini sekarang saya akan tekan enter.

03:07.800 --> 03:13.320
Ini akan membuat array yang hanya membutuhkan sepersekian detik tetapi kemudian menyortir gelembung itu akan

03:13.310 --> 03:14.440
memakan waktu sedikit.

03:14.490 --> 03:16.620
Jadi Perintah masuk dimulai.

03:17.010 --> 03:20.910
Dan bagaimana saya akan berbicara tentang menghabiskan waktu di sini.

03:21.630 --> 03:27.030
Baiklah mari kita lihat ketika saya menulis apa yang akan saya katakan di sini.

03:27.560 --> 03:29.580
Dia punya waktu untuk lulus.

03:30.030 --> 03:34.960
Yah, ini hari yang menyenangkan di luar dan aku di sini merekam.

03:35.060 --> 03:36.760
Itu dia.

03:36.770 --> 03:40.990
Sepertinya baru saja selesai jadi saya tidak tahu persis berapa lama itu.

03:41.000 --> 03:45.950
Saya pikir saya juga memotong di tengah-tengah ini karena saya menyesap air dan kemudian saya

03:45.950 --> 03:49.700
menyadari bahwa saya akan terdengar sangat buruk pada kamera dari tegukan.

03:49.700 --> 03:54.070
Jadi, itu sekitar 20 detik dari waktu saya.

03:54.080 --> 03:57.650
Sekarang jika saya melakukan hal yang sama dengan Gabung yang sudah saya miliki di semacam penggabungan file ini.

03:57.650 --> 04:05.090
Kami belum, kami belum mempelajarinya tetapi hanya menonton dengan jelas dan membaca Anda menjalankan kode yang sama sehingga 100000 item tapi

04:05.150 --> 04:07.250
sekarang menularkannya ke semacam gabungan.

04:07.490 --> 04:08.390
Wow lihat itu.

04:08.390 --> 04:10.720
Maksudku itu gila, seberapa cepat itu.

04:10.750 --> 04:15.260
Itu seperti itu kurang dari satu detik dibandingkan dengan 20 detik.

04:15.260 --> 04:20.750
Sekarang jika saya menambahkan 0 lain di sini yang saya tidak akan ingat semacam gelembung kuadrat.

04:20.750 --> 04:28.860
Jadi itu memiliki implikasi serius ketika kita menambahkan nol lagi ketika kita mengkuadratkan waktu pada dasarnya.

04:29.030 --> 04:29.980
Itu sangat besar.

04:29.990 --> 04:31.730
Itu perbedaan besar jadi saya tidak akan melakukannya.

04:31.850 --> 04:36.420
Tapi dengan penggabungan, maksud saya kita masih akan melihat perbedaan tetapi tidak ada perbedaan waktu.

04:36.710 --> 04:40.310
Dan kita akan berbicara tentang apa sebenarnya Big O itu seperti penggabungan.

04:40.490 --> 04:43.550
Tapi saya hanya ingin menunjukkan kepada Anda di sana seberapa cepat itu.

04:43.790 --> 04:49.430
Mungkin mereka memberi Anda motivasi untuk mempelajarinya sehingga keluarga algoritma yang lebih cepat ini

04:49.430 --> 04:55.620
yang akan kita pelajari dapat meningkatkan kompleksitas waktu dari sekitar 0 dan 2 0 dan masuk.

04:55.640 --> 04:58.500
Jadi, jika Anda dapat berpikir kembali, saya akan menunjukkan kepada Anda bagan lagi.

04:58.520 --> 05:02.240
Tapi oh dari dan lagi ini tidak buruk itu cukup bagus.

05:02.240 --> 05:05.930
Ini jauh lebih baik daripada waktu kuadratik dan kuadrat.

05:05.930 --> 05:12.890
Ini tidak sebagus login dan tidak sebagus 0 dari N tetapi masih sangat bagus.

05:12.890 --> 05:17.810
Jadi di bagian ini kita akan belajar tiga algoritma yang meningkatkan kompleksitas waktu dan kita juga

05:17.840 --> 05:23.000
akan belajar mengapa itu dan Lagann misalnya dari mana log akhir dan berasal dari kita belum benar-benar

05:23.000 --> 05:23.330
membicarakannya.

05:23.330 --> 05:25.110
Kami memperkenalkan gagasan tentang log.

05:25.160 --> 05:27.420
Kami mengatakan bahwa semua login bagus.

05:27.430 --> 05:30.890
Ini cukup cepat tetapi kami belum benar-benar melihat dari mana asalnya.

05:30.890 --> 05:36.710
Jadi kita akan melihat bahwa ada tradeoff seperti yang saya sebutkan antara efisiensi dan kesederhanaan sayangnya.

05:37.070 --> 05:41.220
Jadi algoritma yang lebih efisien ini jelas lebih sulit.

05:41.240 --> 05:42.590
Mereka lebih panjang.

05:42.740 --> 05:47.600
Atau bahkan jika mereka tidak lagi dalam jumlah kode mereka hanya lebih aneh mereka bukan mereka bukan bagaimana kita

05:47.600 --> 05:50.660
berpikir sebagai manusia kebanyakan waktu bukanlah bagaimana Anda akan mengurutkan sesuatu.

05:50.750 --> 05:54.400
Jadi mereka butuh sedikit lebih lama untuk mengerti tetapi itu sepadan.

05:54.410 --> 05:58.370
Itu perbedaan yang sangat besar yang baru saja saya tunjukkan dan itu hanya 100000 item.

05:58.370 --> 06:02.870
Sekarang bayangkan satu juta atau 10 juta lembar data perbedaan besar dalam waktu.

06:02.870 --> 06:05.470
Jadi mari kita selami penggabungan video berikutnya.
