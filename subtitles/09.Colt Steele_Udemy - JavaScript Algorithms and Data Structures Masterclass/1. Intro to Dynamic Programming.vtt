WEBVTT

00:00.210 --> 00:01.560
Hai, selamat datang kembali.

00:01.560 --> 00:06.750
Saya akan sangat sangat jujur dengan Anda di muka topik yang kita bahas dalam

00:06.750 --> 00:10.890
bagian ini Pemrograman Dinamis adalah sedikit terkenal terkenal sulit untuk dipelajari.

00:11.100 --> 00:13.200
Dan juga sama sulitnya untuk mengajar.

00:13.380 --> 00:15.390
Saya bisa membuktikannya dengan pasti.

00:15.750 --> 00:16.900
Itu adalah topik yang sangat besar.

00:16.920 --> 00:19.020
Ini akan menjadi pengantar yang ringan.

00:19.050 --> 00:21.720
Kami tidak membaca sesuatu yang penting tetapi kami bisa menulis.

00:21.790 --> 00:22.540
Ya saya tidak bisa.

00:22.560 --> 00:27.510
Tetapi mungkin ada seluruh buku ada seluruh buku yang ditulis pada algoritma Pemrograman Dinamis.

00:27.540 --> 00:32.180
Ini hanya akan menunjukkan kepada Anda dasar-dasar tetapi itu masih bukan hal yang termudah di bumi.

00:32.370 --> 00:35.670
Tapi jangan takut, saya mungkin sedikit. Saya hanya bercanda.

00:35.670 --> 00:39.600
Saya sudah mengajarkannya beberapa kali dan Anda tahu setiap kali menjadi lebih baik tetapi itu

00:39.600 --> 00:43.580
masih salah satu topik yang saya rasa selalu bisa diperbaiki kuliah saya bisa menjadi lebih baik.

00:43.590 --> 00:44.370
Jadi saya tidak tahu.

00:44.370 --> 00:46.610
Tinggalkan umpan balik jika Anda memiliki sesuatu.

00:46.650 --> 00:51.780
Satu hal yang ingin saya katakan untuk mendapatkan apa pun dari bagian ini Anda benar-benar harus Anda

00:51.780 --> 00:54.500
ketahui agar percaya diri tetapi cukup nyaman dengan rekursi.

00:54.600 --> 00:59.160
Masalahnya akan mulai dengan tidak gila rumit tetapi Anda harus dapat memahami apa

00:59.340 --> 01:00.240
itu rekursi.

01:00.240 --> 01:05.010
Lihatlah salah satu solusi rekursif saya, saya akan menunjukkan kepada Anda dan semacam langkah melalui cara kerjanya.

01:05.010 --> 01:10.820
Jadi, jika Anda melewatkan salah satu konten tentang rekursi di sini, itu akan membuat segalanya sedikit lebih sulit.

01:11.090 --> 01:11.640
BAIK.

01:11.880 --> 01:13.640
Jadi mari kita mulai dengan tujuan sederhana kita.

01:13.800 --> 01:16.750
Tentu saja Anda ingin berbicara tentang apa itu pemrograman dinamis.

01:16.920 --> 01:21.960
Dan kemudian ada dua istilah yang Anda harus mendefinisikan subproblem yang tumpang tindih dan substruktur yang optimal.

01:21.960 --> 01:25.040
Jadi ini adalah dua kondisi di mana kita bisa menggunakan.

01:25.110 --> 01:28.950
Ada dua indikator yang bisa kita gunakan pemrograman dinamis pada masalah yang diberikan.

01:29.100 --> 01:30.250
Jadi kita akan kembali kepada mereka.

01:30.270 --> 01:34.370
Mereka memiliki video sendiri dan kemudian kami ingin menyelesaikan beberapa masalah yang lebih rumit.

01:34.410 --> 01:40.090
Tidak ada hal yang menghancurkan bumi tetapi kami ingin menyelesaikan beberapa masalah dengan pemrograman dinamis.

01:40.320 --> 01:45.810
Dan yang terakhir ini memberi kita petunjuk tentang pemrograman dinamis apa yang bisa kita gunakan untuk memecahkan

01:46.140 --> 01:47.420
masalah beberapa masalah.

01:47.430 --> 01:49.230
Jadi, inilah definisi sebenarnya.

01:49.410 --> 01:55.980
Ini adalah metode untuk memecahkan masalah yang rumit dengan memecahnya menjadi kumpulan subproblem sederhana memecahkan

01:56.310 --> 02:00.230
masing-masing subproblem hanya sekali dan menyimpan solusi mereka.

02:00.240 --> 02:06.540
Jadi kedengarannya agak gila, tetapi secara sederhana itu adalah pendekatan untuk memecahkan beberapa masalah yang sebagian besar masalah

02:06.540 --> 02:08.320
tidak dapat diselesaikan dengan itu.

02:08.370 --> 02:13.320
Ini adalah subset yang cukup kecil tetapi yang dapat diselesaikan dengan pemrograman emic dapat membuat

02:13.320 --> 02:15.390
perbedaan besar dalam kinerja mereka.

02:15.480 --> 02:20.130
Agak seperti ketika kita berbicara tentang memecah belah dan menaklukkan sebelumnya dalam kursus yang merupakan pendekatan untuk

02:20.130 --> 02:21.210
memecahkan beberapa masalah.

02:21.210 --> 02:25.100
Itu tidak berlaku untuk sebagian besar tetapi ketika Anda bisa menggunakannya Anda benar-benar dapat mempercepat kode Anda.

02:25.200 --> 02:26.970
Jadi kita akan kembali ke definisi ini.

02:27.000 --> 02:29.110
Saya tidak berharap itu masuk akal pada saat ini.

02:29.280 --> 02:35.130
Tapi kunci utama adalah pendekatan atau pola untuk memecahkan masalah di mana kita mengambil masalah itu

02:35.190 --> 02:40.980
dan memecahnya menjadi potongan-potongan kecil dan kemudian kita mengurangi duplikasi potongan-potongan kecil dengan mengingatnya atau

02:40.980 --> 02:42.450
menyimpannya entah bagaimana.

02:42.720 --> 02:44.000
Tapi kita akan kembali ke semua itu.

02:44.040 --> 02:50.580
Tapi saya ingin mulai dengan sekarang untuk membungkus video ini adalah sedikit titik rasa sakit dalam pengalaman saya

02:50.580 --> 02:53.790
dalam mengajarkan topik ini dengan nama pemrograman dinamis.

02:53.850 --> 03:00.210
Kedengarannya seperti sesuatu yang sejujurnya tidak terdengar seperti ketika saya mengatakan pemrograman dinamis atau kode makna

03:00.210 --> 03:06.900
pemrograman atau menulis Anda tahu pemrograman komputer yang dinamis terdengar seperti kita menulis kode yang melakukan hal-hal

03:06.900 --> 03:12.260
berbeda dengan itu memiliki berbagai jenis output yang berbeda atau entah bagaimana berubah.

03:12.300 --> 03:13.700
Bukan itu masalahnya.

03:13.710 --> 03:20.610
Sebenarnya nama pemrograman dinamis diciptakan kembali pada tahun 1940-an oleh orang ini Richard Belman untuk menggambarkan sesuatu yang

03:20.610 --> 03:25.020
tidak ada hubungannya dengan komputer atau pemrograman komputer atau ilmu komputer.

03:25.020 --> 03:31.380
Dia adalah saya percaya itu merujuk pada AS mengoptimalkan jadwal militer.

03:31.530 --> 03:38.220
Dan ada kutipan panjang yang dia miliki yang menjelaskan di sini, tetapi pada dasarnya dua istilah dinamis

03:38.220 --> 03:44.250
dipilih oleh Belman untuk menangkap berbagai aspek waktu dari masalah dan karena itu terdengar mengesankan.

03:44.250 --> 03:46.700
Dia berpikir bahwa dinamis adalah kata sifat yang baik.

03:46.770 --> 03:50.660
Sebenarnya dia mengatakan itu adalah sesuatu yang bahkan anggota Kongres tidak bisa keberatan.

03:50.670 --> 03:56.790
Jadi dia mencoba membuat frasa yang menyenangkan orang-orang sehingga dia akan mendapatkan dana pada dasarnya dan

03:57.900 --> 04:01.100
kemudian pemrograman lagi tidak mengacu pada pemrograman komputer.

04:01.110 --> 04:05.040
Ini mengacu pada menemukan program yang optimal dengan cara yang sama.

04:05.250 --> 04:11.490
Jika Anda pernah mendengar istilah pemrograman linier yang mengacu pada menemukan hasil yang baik, saya hanya membaca

04:11.490 --> 04:16.230
dari sini dengan cara hasil yang baik dalam model matematika yang persyaratannya diwakili

04:16.230 --> 04:17.500
oleh hubungan linear.

04:17.510 --> 04:19.040
Ini tidak ada hubungannya dengan kode.

04:19.100 --> 04:21.720
Pemrograman memiliki arti yang berbeda total di sini.

04:21.750 --> 04:26.700
Jadi ketika kita menyusun pemrograman dinamis, itu terdengar seperti sesuatu yang masuk akal

04:26.700 --> 04:32.450
di dunia modern saat ini di sekitar kode dan selalu mengubah algoritma gila yang serba cepat.

04:32.490 --> 04:38.910
Bukan itu yang sebenarnya tetapi sebenarnya mengacu pada datang dengan solusi optimal baik di luar dunia kode

04:38.910 --> 04:43.090
hanya dalam matematika secara umum dan perencanaan dan pengambilan keputusan.

04:43.110 --> 04:48.080
Tapi kemudian itu juga diterapkan ke dunia kode dan pemrograman seperti yang kita tahu yang akan

04:48.090 --> 04:49.000
kita bicarakan.

04:49.080 --> 04:50.660
Tapi saya hanya ingin menghindarinya.

04:50.670 --> 04:53.470
Istilah ini bisa sangat membingungkan. Kedengarannya seperti sesuatu yang bukan.

04:53.490 --> 04:56.580
Ngomong-ngomong itulah yang akan saya katakan tentang hal itu untuk saat ini di video berikutnya.

04:56.610 --> 05:02.090
Kita akan berbicara tentang salah satu dari kata-kata seram yang berhubungan dengan

05:02.180 --> 05:03.020
subproblem.
