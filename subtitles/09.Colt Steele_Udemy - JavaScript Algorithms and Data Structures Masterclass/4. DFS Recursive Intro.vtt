WEBVTT

00:00.210 --> 00:01.030
Selamat datang kembali.

00:01.110 --> 00:04.460
Jadi kita akan mulai dengan menerapkan traversal pertama kedalaman grafik.

00:04.470 --> 00:06.860
Dua cara secara rekursif dan intuitif.

00:06.870 --> 00:09.590
Tapi pertama-tama kita melakukan versi rekursif.

00:10.020 --> 00:16.190
Jadi saya memiliki sedikit kode pseudo yang lebih rinci setelah ini, tetapi inilah semacam penjelasan dasar.

00:16.230 --> 00:19.130
Jadi tentukan fungsi Anda metode Anda DFS.

00:19.150 --> 00:24.390
Anda mungkin ingin menyebutnya DFS rekursif sehingga Anda bisa melakukan iteratif dan rekursif dan dibutuhkan

00:24.480 --> 00:25.900
titik untuk memulai.

00:25.920 --> 00:29.880
Tidak ada Anda tahu titik awal yang melekat otomatis seperti pohon.

00:29.880 --> 00:31.970
Jadi katakanlah Anda melewati nilai A.

00:32.430 --> 00:36.030
Jadi kita perlu memiliki casing dasar ketika kita melakukan sesuatu secara rekursif.

00:36.090 --> 00:39.600
Jika Anda belum melihat bagian rekursif Anda pasti memeriksanya terlebih dahulu.

00:39.600 --> 00:41.830
Kalau tidak, ini tidak masuk akal.

00:41.880 --> 00:44.670
Jadi base case kami adalah ketika vertex kosong.

00:44.760 --> 00:50.040
Jadi pertama kali ini tidak akan terjadi karena kita melewati A atau B atau titik

00:50.040 --> 00:50.600
awal.

00:50.970 --> 00:55.620
Jika itu kasusnya kami mengembalikan sesuatu kembali tidak hanya keluar dari sana.

00:55.680 --> 00:58.370
Kalau tidak, kita akan memiliki daftar hasil.

00:58.380 --> 01:01.140
Jadi kami sedang membangun array ini untuk kembali di akhir.

01:01.140 --> 01:04.970
Jadi kami menambahkan titik ke daftar hasil yang berarti kami telah mengunjunginya.

01:05.010 --> 01:09.780
Jadi kami akan menambahkan dan kemudian kami menandai Virtex sebagai dikunjungi.

01:09.810 --> 01:12.690
Jadi apa yang akan kita lakukan agar pasar benar-benar dikunjungi.

01:12.690 --> 01:14.230
Saya hanya akan melakukan sesuatu seperti ini.

01:14.240 --> 01:21.830
Saya memiliki pasangan nilai kunci objek dan ketika kami mengunjungi F misalnya kami menambahkan F di sini dan menetapkannya benar.

01:22.170 --> 01:24.300
Anda tidak harus melakukan ini, Anda tidak harus menjadikannya benar.

01:24.300 --> 01:29.940
Anda dapat menggunakan hanya array lain dan menambahkan di sana tapi saya suka pendekatan ini lebih eksplisit

01:29.940 --> 01:35.450
dan juga nanti akan memungkinkan Anda untuk menandai sesuatu yang belum dikunjungi jika karena alasan tertentu Anda

01:35.490 --> 01:38.020
ingin dianggap salah tetapi tidak terlalu penting.

01:38.040 --> 01:39.330
Tapi beginilah cara saya akan melakukannya.

01:39.630 --> 01:46.770
Jadi tandai sebagai dikunjungi kemudian untuk setiap tetangga di tetangga simpul itu jadi untuk semua tetangga A

01:46.970 --> 01:51.500
jika tidak dikunjungi secara rekursif panggil DFS pada tetangga itu.

01:51.600 --> 01:57.070
Jadi kita akan memanggil pencarian kedalaman pertama pada B dan pada D jika mereka adalah dua tetangga.

01:57.600 --> 02:03.120
Dan kemudian untuk masing-masing dari kita melakukan hal yang sama kita menambahkannya ke daftar hasil dan kemudian kita pasarkan saat dikunjungi

02:03.150 --> 02:08.340
kita akan menambahkan ke sini sehingga kita tidak mengunjungi mengunjunginya lagi kita tidak menduplikasi pekerjaan kita tetapi tidak akan

02:08.500 --> 02:12.780
terjebak dalam lingkaran kecil yang akan saya tunjukkan kepada Anda bahwa itu mungkin jika Anda tidak

02:12.780 --> 02:15.770
menandai berpikir telah dikunjungi dan kemudian kami mengunjungi masing-masing tetangganya.

02:15.890 --> 02:20.850
Tetapi ketika kita melakukannya secara rekursif cara hal-hal ini dipesan pada panggilan stack saya akan berjalan

02:20.850 --> 02:24.270
melaluinya dan solusi video kita berakhir dengan kedalaman traversal pertama.

02:24.270 --> 02:25.050
Jadi beberapa hal.

02:25.080 --> 02:30.320
Berikut penjelasan yang sama seperti sebelumnya kami baru saja melewati ini dengan sangat cepat.

02:30.420 --> 02:34.950
Kami melihat bahwa ini adalah daftar adjacency yang mewakili struktur grafik ini di sini.

02:35.250 --> 02:39.960
Dan apa yang akan kita lakukan adalah saat kita mengunjungi, kita akan mulai dari sana.

02:39.960 --> 02:44.580
Saya akan menambahkannya ke pasangan nilai kunci objek yang dikunjungi dan kapan saja.

02:44.610 --> 02:47.990
Katakanlah kita sedang melihat lihat nanti kita akan memeriksa.

02:48.030 --> 02:51.320
Baiklah, yang mana dari tetangganya yang kita miliki sehingga kita lihat.

02:51.330 --> 02:51.600
Baiklah.

02:51.600 --> 02:53.450
Yah kita punya dan kita akan melihat.

02:53.490 --> 02:54.420
Oh sudah dikunjungi.

02:54.420 --> 02:56.300
Jadi kita tidak akan melakukan itu.

02:56.550 --> 02:58.530
Jadi kami memulai pasar telah dikunjungi.

02:58.680 --> 03:05.490
Jadi kemudian kita pergi ke anak-anak A dan kita melihat mereka berdua telah dikunjungi dan belum

03:05.490 --> 03:06.050
dikunjungi.

03:06.180 --> 03:13.020
Jadi kita akan secara rekursif disebut pencarian pertama kedalaman pada B dan C tetapi karena itu rekursif ini akan

03:13.020 --> 03:19.200
terjadi terlebih dahulu dan semua tetangga ini akan terjadi sebelum kita kembali untuk melihatnya akan menunggu di

03:19.200 --> 03:26.310
tumpukan panggilan kemudian kita pergi ke B kita kunjungi akan kita tambahkan ke daftar objek yang dikunjungi simpul dan kita

03:26.310 --> 03:28.500
melihat B dan memiliki 2 tetangga.

03:28.740 --> 03:30.460
Baik untuk masing-masing yang akan kita periksa.

03:30.480 --> 03:32.790
Sudah dikunjungi, sudah dikunjungi.

03:32.790 --> 03:33.480
Ya, sudah.

03:33.480 --> 03:36.760
Kami tidak akan menyebutnya secara rekursif D.

03:36.780 --> 03:37.860
Belum pernah.

03:37.900 --> 03:42.720
Jadi kami terus berjalan dan Anda dapat melangkah sendiri, tetapi ini adalah ide di mana kami akan melacak

03:42.720 --> 03:44.940
apa yang telah dikunjungi dan setiap kali melalui.

03:44.940 --> 03:48.850
Kami memiliki kode semu ini untuk setiap tetangga dalam satu putusan.

03:48.870 --> 03:54.870
Tetangga Vertex memeriksa apakah telah dikunjungi jika belum dikunjungi secara rekursif disebut pencarian pertama

03:54.870 --> 03:55.900
di dalamnya.

03:56.160 --> 04:00.140
Jadi ingatlah rekursi memanggil fungsi yang sama persis lagi.

04:00.180 --> 04:02.720
Sekarang saya akan menunjukkan pseudocode yang lebih rinci hanya dalam beberapa saat.

04:02.850 --> 04:04.870
Tapi pertama-tama saya ingin menunjukkan ini kepada Anda.

04:04.920 --> 04:09.770
Ini adalah kode dengan apa yang sudah kami tulis yang menghasilkan struktur grafik ini.

04:09.780 --> 04:14.400
Jadi, jika Anda ingin mengikuti sehingga Anda dapat menguji apakah semuanya berfungsi dengan benar, mungkin akan

04:14.400 --> 04:16.700
sedikit lebih sulit untuk membuat grafik sendiri.

04:16.710 --> 04:22.830
Mungkin lebih sulit untuk mengetahui apakah itu berfungsi karena lebih sedikit linear daripada pohon.

04:22.860 --> 04:25.910
Jadi lebih sulit untuk memikirkannya setidaknya untuk saya pribadi.

04:25.920 --> 04:31.050
Jadi Anda bisa menyalin kode ini dan memiliki struktur yang sama seperti saya ke grafik yang sama dan Anda harus mendapatkan

04:31.050 --> 04:31.890
urutan yang sama.

04:32.040 --> 04:37.940
Jadi sejauh kode pseudo yang lebih eksplisit, kode pseudo yang lebih terperinci untuk versi

04:37.950 --> 04:44.400
rekursif menulis fungsi yang menerima simpul awal dan kami hanya akan pergi dengan untuk sekarang tetapi jangan

04:44.440 --> 04:45.750
membuatnya tersirat standar.

04:45.900 --> 04:52.080
Anda lulus dan kemudian Anda akan membuat daftar kosong dalam array untuk menyimpan hasil akhir yang akan kembali di

04:52.080 --> 04:52.730
akhir.

04:52.740 --> 04:54.020
Jadi ini akan menyimpan pesanan.

04:54.030 --> 04:57.510
Seharusnya Anda tahu a dan kemudian B dan kemudian D dan seterusnya.

04:57.780 --> 05:04.100
Jika kita mulai dari mungkin membuat objek untuk menyimpan simpul yang dikunjungi sehingga sesuatu seperti ini

05:04.130 --> 05:05.920
tetapi harus mulai kosong.

05:06.740 --> 05:12.560
Ok maka bagian yang sedikit lebih rumit di dalam diri Anda tidak Anda tidak harus melakukannya di dalam

05:12.590 --> 05:17.560
fungsi yang sama tetapi saya akan melakukannya di dalamnya untuk membantu fungsinya yang menerima simpul.

05:17.780 --> 05:23.050
Jadi yang mungkin akan saya lakukan adalah menamai kedalaman fungsi luar pertama pencarian rekursif dan kemudian di dalam

05:23.060 --> 05:29.070
saya hanya akan memanggil DFS dan ini adalah bagian dari logika kami yang cocok dengan kode semu yang saya tunjukkan sebelumnya.

05:29.090 --> 05:31.170
Jadi ini adalah fungsi rekursif yang sebenarnya.

05:31.190 --> 05:36.500
Fungsi ini hanya mengatur array yang mengatur hasil yang akan kembali pada akhirnya.

05:36.590 --> 05:42.020
Pada awalnya awalnya disebut fungsi rekursif karena saya tidak tahu apakah Anda ingat dari bagian rekursif kita berbicara

05:42.020 --> 05:47.450
tentang rekursi metode pembantu di mana kadang-kadang Anda memerlukan beberapa data untuk bertahan sehingga Anda tidak bisa hanya

05:47.450 --> 05:50.060
memiliki satu fungsi rekursif yang memanggil dirinya sendiri.

05:50.210 --> 05:51.650
Anda mungkin perlu fungsi luar.

05:51.650 --> 05:52.880
Jadi itu masalahnya di sini.

05:53.180 --> 05:58.820
OK jadi fungsi bantuan Anda harus kembali lebih awal jika vertex kosong fungsi helper menerima vertex.

05:58.820 --> 06:00.230
Jika kosong Kita sudah selesai.

06:00.260 --> 06:06.440
Seluruh fungsi harus menempatkan simpul kecuali ke objek yang dikunjungi pasar telah dikunjungi dan mendorongnya

06:06.440 --> 06:11.840
ke hasil jauh dari array hasil daftar kami yang kami kembalikan pada akhirnya.

06:11.870 --> 06:15.770
Maka untuk loop simpul atas semua anak-anaknya anak-anak adalah istilah yang salah.

06:15.770 --> 06:22.820
Semua tetangganya dan untuk masing-masing jika mereka belum dikunjungi secara rekursif memanggil fungsi pembantu dengan simpul

06:22.820 --> 06:23.630
itu.

06:23.630 --> 06:24.870
Fungsi pembantu ini.

06:24.950 --> 06:31.010
Jadi kita tidak secara rekursif memanggil fungsi utama kita secara rekursif memanggil fungsi pembantu yang lebih kecil dan kemudian kita

06:31.190 --> 06:31.750
berevolusi.

06:31.750 --> 06:36.110
Anda tahu Tandai Masing-masing telah dikunjungi ditambahkan ke array memeriksa bahwa anak-anak dikunjungi dan terus

06:36.110 --> 06:37.480
melakukan hal yang sama.

06:37.700 --> 06:41.710
Maka bagian yang penting adalah bagian paling akhir memanggil fungsi helper di sini.

06:41.750 --> 06:44.780
Jadi Anda mendefinisikannya lalu memohonnya dengan titik awal.

06:44.780 --> 06:51.590
Jadi kita mengaturnya di jalan dan fungsi dalam ini akan memperbarui array hasil dan akan

06:51.590 --> 06:54.870
memperbarui objek yang dikunjungi setiap kali.

06:54.890 --> 06:56.070
Itu akan memiliki akses ke sana.

06:56.270 --> 06:59.260
Dan kemudian di bagian paling akhir mengembalikan array hasil.

06:59.270 --> 07:03.730
Inilah yang akan dibangun oleh fungsi rekursif ini.

07:03.860 --> 07:06.250
Jadi kita akan berakhir dengan b bla bla bla.

07:06.290 --> 07:08.090
Jika Anda menggunakan grafik yang sama yang saya gunakan.

07:08.090 --> 07:10.980
Dan lagi Anda dapat membuatnya dengan mudah hanya dengan menyalin ini.

07:11.240 --> 07:12.990
Baiklah, jadi Anda mencobanya.

07:13.280 --> 07:17.090
Rekursi mungkin sulit tetapi saya pikir saya mencoba menuliskannya dengan sangat jelas.

07:17.120 --> 07:19.410
Langkah demi langkah tetapi jika Anda tidak ingin mencoba.

07:19.430 --> 07:20.800
Tonton saja video berikutnya.

07:20.870 --> 07:24.990
Saat saya melangkah melalui tumpukan panggilan, kita akan melihat cara kerjanya dan mengapa itu sebenarnya lebih dulu.

07:25.040 --> 07:26.550
Itu akan terjadi selanjutnya.
