WEBVTT

00:00.150 --> 00:01.200
Baiklah kita akan kembali.

00:01.200 --> 00:07.020
Jadi dalam video ini kita akan mendefinisikan struktur data Q kita sendiri dari awal daripada menggunakan array.

00:07.410 --> 00:12.140
Dan seperti yang kami lakukan dengan struktur data stack, itu akan didasarkan pada daftar panjang.

00:12.240 --> 00:17.070
Jadi mudah-mudahan Anda berhasil melewati bagian daftar yang ditautkan sendiri dan kami melewatinya dengan cepat.

00:17.070 --> 00:22.010
Jadi jika Anda tidak menontonnya jika Anda tidak mengerti kode itu, beberapa hal ini mungkin membingungkan.

00:22.050 --> 00:27.890
Jadi saya sarankan untuk melakukan langkah pertama yang akan memiliki kelas q properti pertama dan terakhir dan Ukuran.

00:27.900 --> 00:33.960
Sama seperti dengan tumpukan kami dan kemudian kelas simpul untuk setiap elemen dalam antrian akan memiliki

00:33.960 --> 00:35.760
nilai dan pointer berikutnya.

00:35.760 --> 00:38.530
Begitu cepat untuk menyegarkan kembali memori Anda pada daftar yang tertaut.

00:38.700 --> 00:40.570
Apa yang bisa kita lakukan seperti dengan array.

00:40.620 --> 00:43.290
Kami memiliki dua jenis pasangan opsi.

00:43.440 --> 00:50.700
Kita dapat menambahkan ke ujung dan menghapus dari awal atau kita bisa menambahkan ke awal dan menghapus dari

00:50.700 --> 00:51.320
ujung.

00:51.360 --> 00:51.600
Kanan.

00:51.600 --> 00:59.170
Jadi kita bisa misalnya jika kita mari kita melakukan insert di akhir insert 80.

00:59.280 --> 01:00.220
Itu dia.

01:00.450 --> 01:04.320
Dan kami terus menyisipkan sisipan ini lagi 54.

01:04.680 --> 01:09.080
Hal pertama yang harus dihapus adalah hal pertama yang dimasukkan dalam isyarat.

01:09.120 --> 01:10.430
Jadi itu ada di sini.

01:10.430 --> 01:14.100
Jadi kita akan menghapus dari awal seperti ini.

01:14.100 --> 01:15.540
Jadi itu satu opsi.

01:15.540 --> 01:19.340
Opsi lainnya adalah untuk mengaktifkannya di awal.

01:19.440 --> 01:28.290
Jadi kami akan menyisipkan di awal seperti sembilan puluh sembilan di sana dan kemudian menghapus dari ujung yang secara teoritis akan menjadi

01:28.290 --> 01:29.930
hal pertama yang ditambahkan.

01:29.970 --> 01:36.330
Meskipun dalam hal ini bukan karena Anda tahu kami melakukannya mundur tetapi jika kami terus memasukkan daftar itu

01:36.480 --> 01:39.390
akan tumbuh atau tumpukan tumbuh dengan cara ini.

01:39.390 --> 01:41.740
Jadi ini harus menjadi hal pertama yang ditambahkan.

01:41.850 --> 01:44.900
Dan jika saya melepas dari sana dari ekor.

01:45.240 --> 01:46.000
Oh tidak.

01:46.020 --> 01:47.660
Lihatlah betapa lambatnya ini.

01:47.670 --> 01:53.870
Jadi ini adalah hal yang persis sama yang kami temui dalam video tumpukan di mana dalam daftar yang

01:53.880 --> 01:59.650
terhubung sendiri menghapus dari akhir menggunakan POP lambat karena kita harus beralih di seluruh daftar.

01:59.790 --> 02:00.950
Mari kita lakukan sekali lagi.

02:00.960 --> 02:02.370
Hapus dari ujung.

02:02.520 --> 02:03.370
Tidak baik.

02:03.720 --> 02:10.520
Jadi yang akan kita lakukan sebagai gantinya adalah menambahkan ke akhir dan menghapus dari awal.

02:11.330 --> 02:13.190
Jadi lebih terlihat seperti ini.

02:13.400 --> 02:17.710
Jadi metode kami bukan push dan pop yang merupakan stack.

02:17.720 --> 02:20.210
Terminologinya adalah Q dan dequeue.

02:20.290 --> 02:22.370
Jadi jika ini isyarat kita saat kita menambahkan.

02:22.410 --> 02:25.920
Sekarang, saya baru saja mengklik dequeue secara tidak sengaja.

02:25.940 --> 02:27.670
Jadi Anda bisa melihatnya dihapus dari awal.

02:27.680 --> 02:30.930
Tetapi ketika kita memasukkan isyarat sesuatu ditambahkan ke akhir.

02:31.040 --> 02:32.460
Jadi itu didorong.

02:32.540 --> 02:35.910
Jika kita menggunakan daftar yang terhubung sendiri, kita akan menyebutnya push.

02:35.960 --> 02:37.370
Kami menambahkan sampai akhir.

02:37.670 --> 02:42.650
Dan ketika kita keluar kita mulai dari awal yang kita sebut shift.

02:42.860 --> 02:47.590
Tetapi karena ini adalah isyarat yang akan kita gunakan dan Q dan dequeue.

02:47.660 --> 02:52.710
Jadi ini adalah ide kami untuk daftar yang terhubung secara tunggal atau sepertinya satu tetapi memiliki dua metode ini.

02:52.730 --> 02:57.130
Jadi kita tambahkan ke ujung ke ekor dan kita lepaskan dari kepala.

02:57.230 --> 02:58.000
Jadi mari kita lakukan itu.

02:58.010 --> 03:00.830
Sekarang inilah kelas yang akan kita ikuti.

03:00.830 --> 03:05.220
Saya akan mulai dengan mendefinisikan dua kelas dan kemudian kita akan menambahkan dua metode.

03:05.240 --> 03:10.400
Jadi saya membuat cuplikan baru dan saya akan maju cepat melalui definisi saya tentang kelas Node.

03:10.460 --> 03:10.730
Baiklah.

03:10.730 --> 03:13.200
Jadi kami memiliki simpul mengambil evaluasi.

03:13.250 --> 03:18.200
Kami menetapkan nilai menjadi nilai itu dan kemudian yang berikutnya adalah nol secara default.

03:18.230 --> 03:25.050
Sekarang dengan cepat untuk menemukan kerangka dasar kelas Q dan hanya memiliki konstruktor tidak memerlukan apa-apa.

03:25.310 --> 03:27.470
Dan kita memiliki yang pertama yaitu tidak.

03:27.650 --> 03:32.190
Kami memiliki yang terakhir yang tidak dan kemudian ukuran.

03:32.240 --> 03:35.030
Dan sekarang kita hanya perlu menambahkan dua metode sederhana kami.

03:35.150 --> 03:38.720
Jadi kita akan memiliki NQ yang menerima nilai.

03:38.810 --> 03:41.080
Jadi saya akan menyebutnya Val.

03:41.450 --> 03:43.940
Dan kemudian kita memiliki Q yang tidak.

03:44.030 --> 03:46.010
Aku benci harus mengetik itu.

03:46.010 --> 03:48.410
Saya harap saya katakan ya ampun, Anda lihat.

03:48.430 --> 03:49.680
Kamu melihat.

03:49.700 --> 03:50.690
Ini dia.

03:50.780 --> 03:53.840
Dan ini harus mengembalikan hal pertama yang ditambahkan.

03:53.840 --> 03:55.100
Jadi ini harus menambahkan sesuatu.

03:55.160 --> 04:00.790
Dan kemudian ini akan kembali dan menghapus hal pertama yang ditambahkan.

04:00.870 --> 04:04.260
Tidak terlalu bagus tentang tidak menjelaskannya dengan cara yang baik pula.

04:04.370 --> 04:06.610
Jadi ini akan menambah akhir dari panjang kita.

04:06.620 --> 04:08.710
Ini akan dihapus dari awal.

04:08.750 --> 04:10.360
Jadi mari kita mulai dengan mengantri.

04:10.460 --> 04:13.370
Jadi jika kita melihat kode pseudo, fungsi kita menerima nilainya.

04:13.400 --> 04:14.330
Kami sudah melakukannya.

04:14.480 --> 04:17.090
Buat simpul baru menggunakan nilai yang diteruskan.

04:17.540 --> 04:21.920
Dan kemudian jika tidak ada node dalam antrian mengatur simpul ini menjadi properti pertama dan terakhir.

04:21.920 --> 04:25.890
Jadi itu belum semuanya tapi mari kita mulai dengan membuat simpul baru.

04:25.980 --> 04:35.610
Jadi simpul baru kami sama dengan simpul baru dengan Val yang diteruskan dengan keren dan kemudian kita akan memeriksa apakah tidak ada

04:35.610 --> 04:36.970
dalam antrian.

04:37.500 --> 04:44.040
Jadi kita dapat memeriksa apakah ukurannya nol atau jika tidak ada ini pada awalnya.

04:44.130 --> 04:49.010
Dalam hal ini kita mengatur ini pertama sama dengan simpul baru.

04:49.400 --> 04:51.320
Ini sama dengan node baru.

04:51.330 --> 04:52.530
Ini adalah kasus tepi kami.

04:52.770 --> 04:54.460
Jika itu antrian kosong.

04:54.660 --> 04:57.890
Jadi kita atur simpul pertama dan terakhir menjadi simpul baru itu.

04:58.320 --> 05:04.800
Kalau tidak, atur properti berikutnya pada yang terakhir saat ini menjadi node baru dan kemudian pindahkan pointer terakhir

05:04.890 --> 05:09.390
menjadi node baru di akhir yang pada dasarnya menambahkannya ke akhir.

05:09.570 --> 05:16.930
Sehingga terlihat seperti ini lagi dan ini identik selain ukuran pertama dan terakhir.

05:17.190 --> 05:20.700
Anda dapat menggantinya dengan push pada daftar kami yang terhubung sendiri.

05:20.700 --> 05:24.720
Kami menambahkan sampai akhir kami hanya menggunakan kepala dan ekor dan panjang.

05:24.810 --> 05:26.640
Jadi itu logika yang sama.

05:26.640 --> 05:29.380
Jadi kalau tidak ini yang terakhir.

05:29.460 --> 05:33.530
Jadi akhir berikutnya sekarang sama dengan simpul baru.

05:33.780 --> 05:37.830
Dan kemudian kita hanya mengatakan yang terakhir ini sama dengan simpul baru itu.

05:37.980 --> 05:40.600
Jadi kami telah memindahkan pointer itu.

05:40.620 --> 05:42.280
Jadi kita sekarang melihat akhirnya.

05:42.570 --> 05:49.120
Dan akhirnya kita akan menambah ukuran q satu per satu dan mengembalikannya.

05:49.120 --> 05:53.310
Jadi saya akan mengembalikan plus plus ukuran.

05:53.780 --> 05:54.590
BAIK.

05:55.060 --> 06:00.790
Dan kemudian kita akan beralih ke dequeue dan dequeue harus menghapus dari awal untuk memberi kita yang terakhir atau

06:00.850 --> 06:03.630
permisi untuk memberi kita hal pertama yang ditambahkan

06:03.670 --> 06:06.130
Kami menambahkan sampai akhir menghapus dari awal.

06:06.340 --> 06:07.560
Jadi Diekema terlihat seperti ini.

06:07.570 --> 06:14.800
Kami mendefinisikan fungsi tidak mengambil argumen jika tidak ada properti pertama hanya mengembalikan tidak menyimpan properti pertama

06:14.800 --> 06:16.160
dalam suatu variabel.

06:16.170 --> 06:21.160
Ini identik dengan apa yang kami lakukan di bagian tumpukan.

06:21.160 --> 06:23.030
Bagian dari bagian ini.

06:23.110 --> 06:25.000
Jadi sangat mirip.

06:25.510 --> 06:27.760
Dan mari kita mulai dengan jujur.

06:27.790 --> 06:32.080
Jadi dequeue kita akan mulai dengan memeriksa apakah itu kosong.

06:32.080 --> 06:36.120
Jadi jika tidak ada ini, kembalilah yang pertama.

06:36.160 --> 06:43.630
Itu berarti tidak ada apa-apa di antrian kami. Kalau tidak, kita akan membuat variabel bernama temp untuk menyimpan

06:43.630 --> 06:46.050
barang-barang saat ini terlebih dahulu.

06:46.090 --> 06:50.980
Inilah yang akan kembali di akhir dan kemudian kita akan melakukan logika yang persis sama.

06:50.980 --> 07:02.170
Jadi, jika hal ini pertama sama dengan yang terakhir ini kita akan mengatur yang terakhir ini sama dengan tidak ada yang sebaliknya sebenarnya

07:02.350 --> 07:03.490
tidak sebaliknya.

07:03.490 --> 07:05.710
Tapi ini dulu saja.

07:05.830 --> 07:07.660
Jadi itulah kasus tepi kita.

07:07.660 --> 07:13.180
Jika Anda tahu hanya ada satu hal yang tersisa di sana, kami menetapkan item terakhir menjadi

07:13.180 --> 07:18.460
tidak, maka kami akan mengeluarkan ini terlebih dahulu di awal dan memperbaruinya menjadi item berikutnya.

07:18.700 --> 07:24.770
Jadi, apa pun yang dulu ada di sana misalnya jika ini adalah awal saat ini pertama kita sekarang

07:24.940 --> 07:32.080
akan mengatakan ini pertama berikutnya adalah sekarang ini barang pertama dan kemudian satu-satunya hal lain yang perlu kita lakukan adalah mengurangi

07:32.080 --> 07:35.020
ukuran dengan satu dan mengembalikan nilainya dari simpul.

07:35.020 --> 07:42.430
Jadi itu akan menjadi ukuran minus ini dan kemudian mengembalikan nilai temp.

07:43.480 --> 07:44.630
Dan seharusnya begitu.

07:44.710 --> 07:52.630
Dan jika kita melihat dequeue ini dan membandingkannya dengan stack kita yang disebut

07:52.630 --> 07:57.340
pop tapi ide yang sama kodenya identik.

07:57.480 --> 07:59.710
Mereka bahkan menggunakan variabel bernama TEMP.

08:00.080 --> 08:00.860
Ya.

08:01.200 --> 08:03.700
Itu harus persis sama.

08:03.930 --> 08:05.420
Dan itu benar.

08:05.420 --> 08:08.280
Begitulah seharusnya kita menerapkan antrian kami.

08:08.370 --> 08:11.750
Kami menghapus dari awal hal yang sama kami lakukan dengan tumpukan kami.

08:11.790 --> 08:16.200
Hanya saja di tumpukan kami, Kami juga menambahkan ke awal dalam antrian kami.

08:16.230 --> 08:22.500
Kami menambahkan sampai akhir dan kami menyebutnya dequeue bukannya pop dan antrian bukannya push.

08:22.830 --> 08:24.870
Jadi mari kita uji bayi ini.

08:25.080 --> 08:26.100
Jadi jalankan kode kita.

08:26.130 --> 08:34.590
Saya tidak tahu mengapa saya hanya menjalankan kode dan mari kita membuatnya Q Sebut

08:34.590 --> 08:42.010
saja q baru seperti itu dan kemudian kita akan melakukan NQ pertama.

08:42.190 --> 08:43.610
Apa yang terjadi di sini.

08:44.530 --> 08:47.670
Sepertinya ah saya punya masalah.

08:47.680 --> 08:51.580
Pertama-tama ini outsized perlu diatur ke nol.

08:51.710 --> 08:58.780
Jadi kita akan melakukan Q sama dengan Q baru. Lalu lakukan Q dan Q Pertama.

08:58.980 --> 09:07.170
Sepertinya itu berfungsi kedua dan ketiga dan kemudian kita akan melakukan dequeue titik-D yang seharusnya memberi saya hal pertama yang ditambahkan

09:07.170 --> 09:12.650
yang pertama dan kemudian kedua kemudian ketiga dan sekarang harus selalu menjadi No.

09:13.110 --> 09:16.210
Dan pertama dan terakhir diatur ke ukuran tidak kembali ke nol.

09:16.380 --> 09:19.440
Jadi saya bisa sekarang dan q sesuatu yang lain seperti halo.

09:19.440 --> 09:26.290
Dan kemudian saya bisa dequeue Halo lagi dan semuanya harus bahagia dan itu isyarat kita.

09:26.700 --> 09:29.430
Jadi q ini bisa tumbuh super besar.

09:29.440 --> 09:35.460
Tidak ada pengindeksan, tidak ada masalah yang akan menemui waktu konstan untuk setiap operasi yang

09:35.460 --> 09:37.750
benar-benar hanya menambah dan menghapus.

09:37.920 --> 09:44.490
Dan itu pertama dalam pertarungan FIFO pertama jadi saya tidak tahu apa pengucapan resmi dan itu

09:44.490 --> 09:49.760
dibandingkan dengan tumpukan yang merupakan lifeso atau Laveau yang terakhir masuk pertama.

09:49.950 --> 09:54.660
Jadi mereka sangat mirip tetapi juga sangat berbeda dalam bagaimana mereka sebenarnya berperilaku.

09:54.690 --> 09:59.590
Mereka serupa dalam kenyataan bahwa ada dua operasi menambah dan menghapus memasukkan sesuatu.

09:59.610 --> 10:00.610
Anda mendapatkan sesuatu.

10:00.630 --> 10:03.010
Hanya saja pesanannya sangat berbeda.

10:03.410 --> 10:06.200
OK jadi di video berikutnya saya akan membungkus semuanya.

10:06.290 --> 10:06.990
Dalam antrian.

10:06.990 --> 10:10.580
Bicara tentang notasi Big-O dan rangkum semuanya.

10:10.590 --> 10:14.270
Semoga ini masuk akal jika Anda melihat bagian tautan lajang.

10:14.280 --> 10:15.780
Ini sangat mirip.

10:15.780 --> 10:20.910
Kami hanya meletakkan pembungkus yang berbeda di atasnya disebut hal-hal yang sedikit berbeda nama tetapi

10:20.910 --> 10:23.630
selain itu fungsi yang sama hanya dipercepat.

10:23.670 --> 10:24.000
Baiklah.
