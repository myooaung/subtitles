WEBVTT

00:00.240 --> 00:01.420
Hai, selamat datang kembali.

00:01.680 --> 00:05.390
Jadi pada titik ini kita memiliki kemampuan untuk menyimpan data dalam struktur grafik.

00:05.400 --> 00:11.550
Kami menulis kelas grafik yang kami tambahkan dalam metode untuk menambah dan menghapus simpul dan tepi sehingga kami dapat menyimpan semua

00:11.550 --> 00:13.080
yang kami bisa mewakili grafik.

00:13.080 --> 00:19.200
Sekarang kita bisa pergi ke hal-hal penting berdaging benar-benar sangat juicy yang semua harus dilakukan dengan menelusuri

00:19.200 --> 00:23.060
grafik kami mencari atau mengunjungi tetangga dari node yang diberikan.

00:23.400 --> 00:25.870
Jadi kita akan masuk ke penggunaan dunia nyata untuk ini.

00:25.920 --> 00:28.710
Ada banyak dari mereka seperti dua sisi dari sekarang.

00:28.720 --> 00:29.520
Saya akan membicarakannya.

00:29.550 --> 00:34.420
Ini juga merupakan topik yang banyak muncul dalam buku teks sains komputer dan ujian akhir.

00:34.580 --> 00:39.390
Muncul dalam wawancara yang saya pikir itu adalah pertanyaan wawancara yang hebat karena berapa banyak aplikasi

00:39.390 --> 00:40.960
dunia nyata yang ada.

00:40.980 --> 00:44.600
Jadi ini bukan arbitrer yang Anda tahu hanya menguji seni Anda.

00:44.700 --> 00:47.530
Berapa banyak yang Anda ingat dari ilmu komputer di perguruan tinggi?

00:47.580 --> 00:50.820
Itu adalah sesuatu yang benar-benar relevan di dunia saat ini.

00:50.820 --> 00:57.360
Jadi kita akan berbicara tentang mengapa tetapi ketika kita mengatakan traversal untuk saat ini setidaknya maksud saya mengunjungi setiap

00:57.360 --> 00:59.510
simpul setiap simpul dalam grafik.

00:59.520 --> 01:01.570
Jadi ada banyak cara untuk melakukan ini.

01:01.590 --> 01:06.980
Biasanya seperti ketika kita berbicara tentang aplikasi dunia nyata, Anda mungkin tidak mengunjungi setiap node.

01:07.020 --> 01:12.540
Banyak hal yang dilakukan orang dalam menemukan tetangga terdekat atau tetangga paling mirip adalah menemukan jalur terpendek

01:12.540 --> 01:14.920
dari satu titik ke titik lainnya.

01:14.940 --> 01:17.150
Dalam hal arah GPS.

01:17.370 --> 01:23.130
Jadi biasanya lebih banyak kasus khusus daripada mengunjungi setiap node di seluruh grafik ini hanya untuk mengatakan bahwa

01:23.130 --> 01:24.270
Anda telah melakukannya.

01:24.330 --> 01:25.530
Tapi kita harus mulai dari suatu tempat.

01:25.620 --> 01:31.170
Dan banyak algoritma yang lebih maju berasal dari pendekatan traversal dasar kami prosedur yang akan

01:31.170 --> 01:32.720
kita bicarakan sekarang.

01:32.760 --> 01:39.000
Jadi, ketika kami mengatakan traversal, kami bermaksud mengunjungi memperbarui, mencari, mencetak, apa pun setiap titik dalam

01:39.030 --> 01:39.830
grafik.

01:39.990 --> 01:47.070
Jadi kita mulai dari satu titik yang jika kita kembali ke pohon ingat pohon adalah bagian khusus dari grafik di mana untuk

01:47.520 --> 01:53.130
setiap node yang ada hanya ada satu jalur satu dan hanya jalan untuk sampai ke simpul ini.

01:53.340 --> 01:59.790
Jadi dari 17 rute menuju 25 Ini adalah satu-satunya pilihan kami untuk mencapai 89.

01:59.910 --> 02:00.990
Ada satu pilihan.

02:00.990 --> 02:03.910
Sekarang jika kita bandingkan dengan beberapa grafik lain.

02:04.080 --> 02:09.720
Jadi grafik yang lebih umum pada dasarnya ini bukan pohon, setiap pohon adalah grafik tetapi ada banyak

02:09.720 --> 02:10.880
grafik yang tidak.

02:10.890 --> 02:16.260
Jadi misalnya yang ini, ini adalah grafik terarah yang belum banyak kami kerjakan tetapi itu hanya

02:16.260 --> 02:20.430
berarti bahwa sambungan-sambungan tersebut adalah mereka yang memiliki arah yang terkait dengannya.

02:20.430 --> 02:21.720
Mereka satu arah.

02:21.780 --> 02:29.010
Jadi katakanlah saya ingin beralih dari nol menjadi enam dan sebenarnya bahkan sebelum itu kita memiliki masalah karena tidak tahu dari mana

02:29.010 --> 02:29.980
kita mulai.

02:30.030 --> 02:31.480
Tidak ada root.

02:31.500 --> 02:37.320
Jadi ya mungkin sebagai manusia kita ingin memulai dari nol karena ini adalah angka terkecil tetapi tidak ada indikasi

02:37.320 --> 02:38.860
bahwa ini adalah titik awal.

02:39.000 --> 02:41.150
Kita bisa mulai dari sini atau dari sini.

02:41.370 --> 02:47.260
Jadi tidak seperti pohon ketika kita menulis kode untuk melintasi grafik, kita perlu menentukan titik awal kita.

02:47.580 --> 02:50.470
Jadi katakanlah saya ingin beralih dari 0 ke 6.

02:50.490 --> 02:56.280
Misalnya setidaknya ada Yah ada opsi ini 0 hingga 1 hingga 6.

02:56.280 --> 03:02.490
Kita bisa menuju 0 hingga 2 hingga 3 hingga 6 0 hingga 2 hingga 3 hingga 5 hingga 8 hingga 6 hingga 6.

03:02.490 --> 03:03.650
Dan saya pikir itu saja.

03:03.690 --> 03:07.140
Jika ini adalah grafik yang tidak diarahkan, kami akan memiliki beberapa opsi lain juga.

03:07.140 --> 03:09.540
Kita bisa pergi dari 5 kita bisa pergi dari 7.

03:09.630 --> 03:15.810
Jadi poin saya di sini adalah bahwa untuk setiap simpul dalam grafik tidak ada jaminan ada satu jalur unik untuk sampai

03:15.810 --> 03:16.670
ke sana

03:16.680 --> 03:22.400
Sekarang itu tidak berarti bahwa melintasi lebih sulit atau lebih sulit tetapi itu berarti bahwa kadang-kadang sementara

03:22.410 --> 03:26.900
ada beberapa pesanan tetapi juga Anda mungkin harus melakukan beberapa penelusuran ulang.

03:26.940 --> 03:32.310
Anda dapat mengunjungi kembali sebuah simpul yang hampir selalu Anda lakukan dan tidak banyak kode.

03:32.310 --> 03:34.690
Tetapi kita harus menulis kode untuk memperhatikan itu.

03:34.950 --> 03:38.070
Tetapi pertama-tama mari kita kembali dan berbicara tentang mengapa Anda harus peduli.

03:38.130 --> 03:43.980
Sebelum kita masuk ke algoritma spesifik, jadi kapan saja kita memiliki grafik apakah itu grafik jaringan untuk situs

03:44.400 --> 03:50.910
web torrent atau kita berbicara tentang perayap web di mana kita memiliki seperti Google di awal-awal kita hanya mengikuti setiap

03:51.030 --> 03:55.770
tautan dari yang masih melakukan ini tetapi akan pergi dari satu halaman web.

03:55.770 --> 03:58.970
Ikuti semua tautan di halaman web itu dan ikuti mereka keluar dan keluar.

03:59.190 --> 04:03.560
Dan pada kenyataannya itu bukan struktur pohon karena Anda memiliki banyak halaman web yang terhubung satu sama lain.

04:03.780 --> 04:06.450
Jadi, ikuti setiap tautan yang merupakan struktur grafik.

04:06.540 --> 04:11.930
Jadi sebenarnya proses traverse crawling itu hanya grafik traversal.

04:12.000 --> 04:17.370
Juga ketika kami berbicara tentang hal-hal seperti menemukan pasangan terdekat atau merekomendasikan jalur terpendek antara hal-hal

04:17.370 --> 04:20.010
dan kapan menunjukkan kepada Anda beberapa contoh.

04:20.010 --> 04:23.840
Ini semua harus dilakukan dengan melintasi dari satu titik ke titik lainnya.

04:24.450 --> 04:31.080
Jadi inilah visualisasi Wikipedia ini dari sekelompok kecil halaman Wikipedia untuk membuat seseorang ini atau beberapa kode dimulai dari

04:31.560 --> 04:36.720
satu halaman web. Saya tidak tahu dari mana mereka mulai dan katakanlah di sini

04:36.720 --> 04:44.160
dan mereka menulis kode untuk mengunjungi melintasi setiap tautan di grafik ini dan gambar sebuah titik kecil atau sesuatu seperti itu

04:44.160 --> 04:49.100
dan kemudian ikuti salah satu dari mereka mengikuti tautan ke sesuatu di sini.

04:49.320 --> 04:53.370
Dan yang terhubung dengan banyak hal lain dan dari sana Anda tahu kami terus dan terus

04:53.520 --> 04:55.160
dan melintasi semua halaman Wikipedia ini.

04:55.260 --> 05:01.820
Jadi hanya untuk menghasilkan ini melibatkan beberapa grafik traversal yang merupakan contoh dasar hanya untuk menggambar

05:01.830 --> 05:02.670
sesuatu.

05:03.130 --> 05:08.720
Jika Anda kembali ke contoh ini ketika kita berbicara tentang menggunakan struktur grafik untuk membantu membuat rekomendasi,

05:08.960 --> 05:14.120
ini adalah ilustrasi salah satu dari dua video game di mana saya mencoba menunjukkan bahwa ada

05:14.180 --> 05:16.630
beberapa tumpang tindih antara Borderlands dan Halo.

05:16.640 --> 05:21.920
Sekarang jika kami memiliki ini untuk 10.000 video game dan kami memiliki ribuan dan

05:21.920 --> 05:29.840
ribuan titik data untuk setiap game dan hal-hal seperti revues skor genre berapa banyak hal berapa banyak salinan dijual elemen yang berbeda

05:29.840 --> 05:31.020
dari permainan bermain.

05:31.340 --> 05:36.230
Jadi, jika seseorang mengatakan bahwa mereka menyukai Borderlands dan Anda ingin mencari permainan untuk merekomendasikan

05:36.230 --> 05:42.680
kepada mereka atau produk untuk merekomendasikan atau pada Netflix film untuk merekomendasikan kepada seseorang itu melibatkan mulai di sini dan

05:42.920 --> 05:47.570
mencoba menemukan sesuatu yang paling mirip yang Anda miliki paling tumpang tindih dengan.

05:47.570 --> 05:51.080
Jadi ini adalah grafik kecil sehingga kita hanya bisa memberi tahu satu opsi Halo.

05:51.170 --> 05:56.810
Tetapi jika ada jutaan titik data lain, kita mungkin perlu melintasiinya dan mencoba dan

05:57.020 --> 06:04.250
mentabulasikan apa yang paling dekat. Yang paling banyak memiliki simpul paling banyak kesamaan dengan Borderlands yang melibatkan melintasi

06:04.250 --> 06:07.580
dari satu node ke sekelompok node lain.

06:07.670 --> 06:08.860
Atau ini satu contoh lagi.

06:08.960 --> 06:15.320
Jika kita berbicara tentang teman-teman di Facebook seperti contoh sederhana ini hanya dari ini kita

06:15.320 --> 06:16.920
bisa membuat rekomendasi.

06:16.940 --> 06:18.030
Ayo lihat.

06:18.320 --> 06:25.960
Maria berteman dengan tentara, berteman dengan Nan dan Tim berteman dengan Maria dan tentara.

06:25.970 --> 06:33.140
Jadi, jika kita ingin menemukan rekomendasi kepada Tim, siapa yang mungkin dia tahu bahwa dia mungkin melihatnya di Facebook,

06:33.530 --> 06:34.270
mungkin.

06:34.340 --> 06:36.000
Saya tidak tahu persis apa yang dikatakannya lagi.

06:36.170 --> 06:43.010
Kami merekomendasikan orang ini atau Anda kenal X orang atau saran untuk teman-teman yang mungkin Anda rekomendasikan

06:43.280 --> 06:48.320
kemudian berdasarkan fakta bahwa dari Tim kita bisa mendapatkan dengan mudah.

06:48.320 --> 06:50.390
Nan satu langkah lagi.

06:50.480 --> 06:56.940
Kita pergi ke pasukan dengan baik ke Jump's. Kurasa satu dan kemudian dua, kita pergi ke Maria satu dan kemudian dua.

06:57.110 --> 07:03.920
Jadi kita bisa menulis beberapa algoritma melintasi mencari teman dari teman dan teman mana pun teman memiliki teman paling

07:03.920 --> 07:07.190
banyak teman itu cara yang lebih baik untuk menempatkannya.

07:07.250 --> 07:12.130
Siapa pun yang terlihat paling dekat siapa pun yang memiliki paling banyak teman dari teman merekomendasikan saya kepada mereka.

07:12.430 --> 07:12.830
BAIK.

07:12.920 --> 07:15.810
Jadi poin saya adalah ada banyak dan banyak aplikasi.

07:15.950 --> 07:18.660
Bahkan hal-hal seperti kecerdasan buatan.

07:18.950 --> 07:24.620
Jika kita berbicara tentang semua kemungkinan yang berbeda untuk permainan papan yang ditata dalam permainan seperti tic tac

07:24.620 --> 07:30.200
toe adalah contoh sederhana tetapi katakanlah sesuatu yang gila seperti Scrabble di mana ada begitu banyak opsi yang

07:30.200 --> 07:35.330
dapat Anda gunakan grafik untuk menyimpan berbagai gerakan permainan dan kemudian melintasi grafik itu untuk menemukan

07:35.330 --> 07:38.270
jalur terpendek menuju kemenangan, cara terpendek untuk memenangkan permainan.

07:38.270 --> 07:45.590
Misalnya navigasi GPS, kami memiliki jutaan atau milyaran simpul yang mewakili peta,

07:45.590 --> 07:47.600
persimpangan, dan bisnis.

07:47.600 --> 07:50.760
Bagaimana kita menemukan cara terbaik untuk pergi dari satu tempat ke tempat lain.

07:51.050 --> 07:56.840
Jadi itu tidak hanya melibatkan traversal langsung yang melibatkan menemukan jalur terpendek tidak hanya secara membabi buta melintasi

07:56.840 --> 08:02.250
seluruh grafik tetapi kita harus memulai suatu tempat sebelum kita dapat berbicara tentang algoritma jalur terpendek sebelum

08:02.300 --> 08:04.620
kita dapat berbicara tentang membuat rekomendasi.

08:04.760 --> 08:08.660
Kami hanya perlu dapat mengunjungi setiap node tunggal dan ada banyak cara untuk melakukan itu.

08:08.690 --> 08:09.820
Sama seperti dengan pohon.

08:09.950 --> 08:15.920
Jadi di bagian ini kita akan berbicara tentang pencarian first depth atau traversal first depth baik secara rekursif dan

08:15.950 --> 08:17.090
iteratif melarikan diri.

08:17.330 --> 08:19.870
Dan kita akan berbicara tentang luasnya traversal pertama.

08:19.940 --> 08:24.740
Sekarang tidak jauh berbeda dari apa yang kami lakukan dengan pohon tetapi ingat perbedaan yang saya tunjukkan.

08:24.800 --> 08:30.500
Ada saatnya Anda harus mengunjungi sebuah simpul lagi atau menyadari bahwa Anda telah

08:30.500 --> 08:33.060
mengunjungi simpul itu dan menyesuaikannya.

08:33.230 --> 08:34.490
Tapi aku terlalu terburu-buru.

08:34.640 --> 08:38.240
Sekarang mari kita bicara tentang pencarian pertama yang mendalam dan cara kerjanya di video berikutnya.
