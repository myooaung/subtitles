WEBVTT

00:00.230 --> 00:02.450
Jadi seleksi tidak terlalu efisien.

00:02.460 --> 00:05.370
Kita berbicara tentang kompleksitas waktu dan kuadrat.

00:05.580 --> 00:10.290
Kami akan meninjau kembali kompleksitas waktu pada akhir bagian ini untuk membandingkan mereka semua algoritma yang telah kami

00:10.290 --> 00:11.320
pelajari sejauh ini.

00:11.640 --> 00:16.340
Tapi ya kira-kira kita harus membandingkan setiap elemen dengan setiap elemen lain dalam array.

00:16.350 --> 00:21.090
Jadi, ketika panjang array bertambah, jumlah perbandingan tumbuh secara kasar pada laju akhir

00:21.090 --> 00:22.220
kali, dan kuadrat.

00:22.350 --> 00:24.860
Ya secara teknis pertama kali lewat.

00:24.900 --> 00:29.650
Kami membuat enam perbandingan, kemudian lima, empat, dan tiga, dan seterusnya.

00:29.820 --> 00:32.400
Tapi itu tidak terlalu penting dalam skema besar.

00:32.430 --> 00:34.410
Kami masih akan dengan lebih dan kuadrat.

00:34.410 --> 00:39.130
Ini jauh lebih buruk daripada jika kita hanya perlu membuat satu perbandingan untuk setiap item.

00:39.420 --> 00:44.790
Sekarang di mana pemilihan sortir berpotensi lebih baik daripada sesuatu seperti bubble sort.

00:45.000 --> 00:51.690
Sungguh hanya ada satu skenario yaitu jika karena alasan tertentu atau Anda dan Anda berada dalam situasi di mana

00:51.690 --> 00:54.980
Anda ingin meminimalkan jumlah swap yang Anda buat.

00:55.260 --> 00:58.660
Jadi ingat jenis gelembung itu jika Anda bisa mengingat cara kerjanya.

00:58.770 --> 01:03.510
Kami pada dasarnya bertukar berulang-ulang untuk mendapatkan item terbesar sampai akhir, kami terus bertukar

01:03.510 --> 01:08.130
dan bertukar sampai akhir dan berikutnya melalui kami bertukar jika kita perlu terus

01:08.360 --> 01:14.710
bertukar dalam jenis pilihan kita beralih kita membandingkan banyak tetapi kami hanya membuat satu swap pada akhir setiap loop.

01:15.120 --> 01:20.730
Jadi jika karena alasan tertentu kami khawatir tentang menulis ke memori, kami khawatir tentang benar-benar melakukan swap yang

01:21.090 --> 01:22.730
tidak terlalu umum menjadi item.

01:22.740 --> 01:25.180
Tetapi jika Anda kemudian memilih semacam itu lebih baik.

01:25.380 --> 01:28.720
Kalau tidak, itu tidak sangat tidak baik tetapi mudah.

01:28.800 --> 01:32.800
Yang merupakan hal yang baik dan membantu mempersiapkan kami untuk beberapa algoritma lain yang akan kita lihat.

01:33.060 --> 01:34.300
Jadi seleksi semacam itu.

01:34.320 --> 01:39.260
Selanjutnya kita memiliki satu lagi algoritma dasar yang dasar yang disebut penyisipan.

01:39.450 --> 01:40.310
Itu akan terjadi selanjutnya.
