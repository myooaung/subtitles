WEBVTT

00:00.210 --> 00:01.500
Baiklah kita akan kembali.

00:01.500 --> 00:05.160
Jadi dalam video ini kita akhirnya akan menulis fungsi rekursif pertama kita.

00:05.190 --> 00:06.150
Momen yang sangat besar.

00:06.450 --> 00:11.340
Dan hal pertama yang harus kita lakukan hanyalah membicarakan rencana permainan untuk fungsi rekursif apa pun.

00:11.340 --> 00:13.670
Ada dua hal yang harus ada.

00:13.710 --> 00:20.250
Jadi idenya adalah bahwa kita menjalankan fungsi yang sama berulang-ulang memiliki satu fungsi memanggil dirinya sendiri secara rekursif.

00:20.460 --> 00:25.320
Tetapi harus ada titik pemberhentian dan itulah bagian kedua yang disebut kasus dasar.

00:25.680 --> 00:27.890
Jadi base case adalah tempat rekursi berhenti.

00:27.990 --> 00:30.080
Harus ada batas akhir.

00:30.180 --> 00:33.670
Itu tidak hanya terus menyebut dirinya berulang-ulang.

00:33.810 --> 00:38.130
Itu akan menjadi masalah besar seperti pas liar untuk memiliki beberapa tempat untuk berhenti.

00:38.130 --> 00:41.250
Kalau tidak, itu hanya berlangsung selamanya dan membuat komputer Anda marah.

00:41.250 --> 00:47.430
Jadi, jika kita kembali ke contoh ini dengan Martin dan naga setiap kali katakanlah ini

00:47.430 --> 00:54.360
merepresentasikan panggilan fungsi tunggal, sebut saja memeriksa bilangan ganjil dan dipanggil berulang kali pada sepotong data yang

00:54.360 --> 00:56.290
lebih kecil setiap kali.

00:56.490 --> 00:58.030
Tapi itu tidak hanya berlangsung selamanya.

00:58.050 --> 00:59.710
Ada titik pemberhentian yang jelas.

00:59.880 --> 01:04.890
Kode jika kita menulis ini dan kita dapat melakukannya sedikit kode pada dasarnya akan memiliki

01:04.890 --> 01:08.750
syarat untuk memeriksa apakah daftar kosong adalah array kosong untuk angka.

01:08.970 --> 01:11.660
Jika itu masalahnya maka berhenti.

01:11.700 --> 01:17.250
Jadi dua bagian penting dari setiap fungsi rekursif alas kasus yang harus ada di sana adalah akhir dari

01:17.250 --> 01:17.890
garis.

01:17.910 --> 01:21.860
Di situlah rekursi berhenti dan input berbeda.

01:21.870 --> 01:26.310
Saya tidak dapat benar-benar memikirkan nama yang bagus untuk ini, tetapi pada dasarnya panggilan rekursif

01:26.310 --> 01:31.890
Anda akan memanggil fungsi yang sama berulang kali tetapi setiap kali Anda ingin menyebutnya dengan sepotong data yang berbeda, Anda

01:31.890 --> 01:37.410
tidak ingin gunakan daftar angka yang sama dan periksa item pertama dalam daftar itu untuk melihat apakah itu aneh

01:37.770 --> 01:41.750
berulang-ulang karena Anda tidak akan pernah mendapatkan apa pun yang ingin Anda lakukan.

01:41.800 --> 01:44.070
Dan dengan Martin itulah solusi yang menyeret.

01:44.070 --> 01:45.240
Kami mengubah daftar.

01:45.240 --> 01:50.460
Kami pada dasarnya memotong satu nomor di awal dan kemudian melewati daftar lagi dan mencoba melakukan

01:50.460 --> 01:53.180
hal yang sama sampai kami mencapai daftar kosong.

01:53.250 --> 01:56.360
Jadi ada input yang berbeda dan kemudian ada kasus dasar.

01:56.370 --> 01:58.180
Jadi mari kita lihat contoh nyata sekarang.

01:58.290 --> 02:01.950
Fungsi rekursif sederhana pertama kami disebut Countdown.

02:01.950 --> 02:06.880
Tidak banyak gunanya mencetak nomor mulai dari nomor apa pun yang kami lewati.

02:06.960 --> 02:11.440
Katakanlah 5 itu akan mencetak 5 4 3 2 1 dan kemudian semuanya selesai.

02:11.460 --> 02:13.540
Jadi saya memilikinya di potongan di sini.

02:13.920 --> 02:19.070
Jika saya menjalankan ini, Anda akan melihat hasilnya adalah 5 4 3 2 1.

02:19.110 --> 02:20.400
Semua selesai.

02:20.400 --> 02:22.690
Jadi kita bisa dengan mudah menulis ini tanpa rekursi.

02:22.690 --> 02:23.850
Lakukan iteratif sepenuhnya.

02:24.060 --> 02:25.280
Saya pergi ke depan dan mengetiknya.

02:25.330 --> 02:30.580
Saya bisa melakukan sesuatu seperti ini untuk membuat komentar bahwa satu fungsi menghitung mundur mengambil

02:30.600 --> 02:34.550
angka hanya akan memulai saya di nomor seperti 5 sementara I.

02:34.550 --> 02:36.450
Lebih besar dari nol.

02:36.900 --> 02:40.970
Kurangi satu dari setiap waktu dan mari kita verifikasi bahwa itu berhasil.

02:43.450 --> 02:48.010
Biarkan saya menghapus ini supaya kita bisa mengecek sana kita pergi.

02:48.030 --> 02:49.940
Jadi kita lanjutkan lima empat tiga dua satu.

02:50.040 --> 02:50.800
Semua selesai.

02:50.840 --> 02:51.080
BAIK.

02:51.090 --> 02:54.970
Jadi saya hanya ingin menunjukkan bahwa Anda dapat dengan mudah melakukan ini tanpa rekursi dan bukan itu intinya.

02:55.230 --> 02:59.470
Ini adalah sesuatu yang kita semua kenal hanya dengan mengulang dan mencetak angka.

02:59.580 --> 03:01.660
Tetapi untuk melakukannya secara rekursif sedikit berbeda.

03:01.680 --> 03:03.160
Jadi mari kita telusuri bagaimana cara kerjanya.

03:03.210 --> 03:08.430
Ketika saya memanggil mundur, mari kita lakukan sesuatu yang lebih sederhana, mari kita lakukan tiga menghitung mundur dengan tiga.

03:08.820 --> 03:10.470
Baiklah mari kita berjalan melalui baris demi baris.

03:10.470 --> 03:12.990
Apakah angka kurang dari atau sama dengan nol.

03:13.140 --> 03:14.370
Tidak, ini tiga.

03:14.400 --> 03:15.680
Jadi semua ini tidak terjadi.

03:15.840 --> 03:17.600
Jadi yang kita lakukan hanyalah mencetak tiga.

03:18.000 --> 03:23.960
Lalu kita kurangi satu dari mereka dan kemudian kita Cocq hitung dengan tidak ada yang sekarang 2.

03:24.300 --> 03:32.990
Jadi kami mencetak 3 sehingga kami dapat jika pada dasarnya kami mencetak 3 maka baris berikutnya adalah 2.

03:33.060 --> 03:36.390
Jadi kami memanggil mundur dengan dua.

03:37.140 --> 03:41.090
Jadi, mari kita mulai dari awal hingga kurang dari atau sama dengan nol.

03:41.260 --> 03:41.540
Tidak.

03:41.550 --> 03:42.900
Jadi kami lewati ini.

03:42.910 --> 03:44.070
Kami terus-menerus tidak mencatat apa pun.

03:44.070 --> 03:50.620
Jadi itu akan dicetak lagi kita kurangi satu dari sekarang aku mengubahnya menjadi satu dan kita

03:50.620 --> 03:51.810
panggil mundur

03:54.570 --> 03:57.340
dengan satu lalu mulai lagi mundur 1.

03:57.600 --> 04:01.810
Jika Nahm kurang dari atau sama dengan nol, itu masih salah dewan tentang LAGNADO.

04:01.860 --> 04:04.260
Jadi kita cetak satu.

04:04.690 --> 04:06.640
Saya tidak bisa mengeja cetak.

04:06.640 --> 04:07.440
Cetak 1.

04:07.530 --> 04:14.190
Dan kemudian hitung mundur dari 1 atau permisi saya isi nol karena kami mengurangi 1 dari mereka memberi kami nol.

04:14.250 --> 04:14.790
Mulai lagi dari awal.

04:14.790 --> 04:15.960
Hitung mundur dari nol.

04:16.140 --> 04:17.370
Sekarang ini adalah pangkalan kami.

04:17.370 --> 04:18.400
Ini adalah titik akhir.

04:18.420 --> 04:22.870
Kalau tidak, jika kita tidak memiliki ini, kita akan terus ke angka negatif dan selamanya.

04:22.890 --> 04:25.920
Jadi, apa basis kasus kita kurang dari atau sama dengan nol.

04:25.920 --> 04:26.240
Iya nih.

04:26.250 --> 04:27.180
Sekarang sudah.

04:27.280 --> 04:28.400
Angka itu nol.

04:28.590 --> 04:30.220
Jadi jumlahnya kurang dari atau sama dengan nol.

04:30.420 --> 04:32.460
Jadi kami membatalkan semua yang sudah dilakukan.

04:32.790 --> 04:36.270
Dan kemudian ini penting kita kembali dan kita tidak mengembalikan apa pun.

04:36.300 --> 04:42.930
Kita harus memiliki ini di sini karena jika kita tidak melakukannya jika kita baru saja mencetak semua selesai maka kita akan

04:43.240 --> 04:44.840
terus ke LOEG nol itu.

04:44.840 --> 04:49.160
Sekarang pikiran minus dikurangi akan menjadi angka negatif 1 dan disebut Hitung mundur dengan negatif 1.

04:49.170 --> 04:54.450
Jadi kita harus memiliki pengembalian ini untuk menghentikannya atau saya kira jika kita ingin kita bisa membungkus ini semua

04:54.450 --> 04:55.340
dan yang lainnya.

04:55.350 --> 04:57.160
Jadi mudah-mudahan itu jelas apa yang terjadi.

04:57.160 --> 05:01.250
Kami hanya menambahkan cetakan akhir kami semua dilakukan di sini.

05:02.580 --> 05:05.440
Jadi Anda bisa melihat ketika kami menyebutnya dengan tiga.

05:05.550 --> 05:09.410
Itu panggilan itu sendiri menghitung mundur dengan dua panggilan dan konten diri dari satu dengan nol.

05:09.420 --> 05:11.580
Dan kemudian kita menekan kasus dasar dan kita berhenti.
