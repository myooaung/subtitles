WEBVTT
1
00:00:00.004 --> 00:00:01.008
- [Instructor] One of the most common patterns

2
00:00:01.008 --> 00:00:07.006
when dealing with databases is the DAO pattern.

3
00:00:07.006 --> 00:00:10.003
Now, data access objects, or DAOs,

4
00:00:10.003 --> 00:00:14.007
provide an abstraction layer between the raw JDBC code

5
00:00:14.007 --> 00:00:18.005
and the rest of your code specifically, the business logic.

6
00:00:18.005 --> 00:00:21.000
Now, DAOs can really come in two forms,

7
00:00:21.000 --> 00:00:23.002
and it's really a personal preference.

8
00:00:23.002 --> 00:00:25.005
They can be a simple abstraction,

9
00:00:25.005 --> 00:00:28.004
or it can be a true object.

10
00:00:28.004 --> 00:00:32.001
Now, most people use DTOs with DAOs

11
00:00:32.001 --> 00:00:34.009
as a pure abstraction layer.

12
00:00:34.009 --> 00:00:36.009
Regardless of which way you use, however,

13
00:00:36.009 --> 00:00:38.009
it provides a clear separation

14
00:00:38.009 --> 00:00:43.002
of concerns in your code itself.

15
00:00:43.002 --> 00:00:46.000
Now, if you're using a DAO as a pure abstraction layer,

16
00:00:46.000 --> 00:00:49.008
you're going to have a DTO, or a data transfer object.

17
00:00:49.008 --> 00:00:52.000
Now, the data transfer object provides

18
00:00:52.000 --> 00:00:57.001
a single domain of data and it's fully encapsulated objects

19
00:00:57.001 --> 00:00:59.007
that may also contain subobjects.

20
00:00:59.007 --> 00:01:03.005
This often transforms itself in the concept of a table

21
00:01:03.005 --> 00:01:07.009
and sub tables or child tables that there are joins to.

22
00:01:07.009 --> 00:01:11.004
Now, the output and input of a single DAO

23
00:01:11.004 --> 00:01:17.002
should be a single DTO and all of its child objects.

24
00:01:17.002 --> 00:01:22.000
The DAO itself often leverages a common interface.

25
00:01:22.000 --> 00:01:24.009
And a concrete implementation reacts

26
00:01:24.009 --> 00:01:28.002
on a single data domain, now, what that means

27
00:01:28.002 --> 00:01:30.009
is you can have a customer who has addresses,

28
00:01:30.009 --> 00:01:34.004
and phone numbers and email addresses,

29
00:01:34.004 --> 00:01:37.006
and the customer DAO will respond

30
00:01:37.006 --> 00:01:41.004
to that entire data domain, that customer itself,

31
00:01:41.004 --> 00:01:44.002
with all of its phone numbers and other contact information

32
00:01:44.002 --> 00:01:46.004
that we just talked about.

33
00:01:46.004 --> 00:01:50.000
Now, this pattern can, and usually supports multiple tables,

34
00:01:50.000 --> 00:01:52.008
but it doesn't have to, it can be a single table.

35
00:01:52.008 --> 00:01:54.002
And a lot of times, if you find

36
00:01:54.002 --> 00:01:56.001
yourself doing single tables,

37
00:01:56.001 --> 00:01:57.008
you're actually creating a repository.

38
00:01:57.008 --> 00:02:00.008
And we're going to talk about that later.

39
00:02:00.008 --> 00:02:05.000
Now, these DAOs can provide you with solid encapsulation

40
00:02:05.000 --> 00:02:10.000
of complex join pass and aggregations.

41
00:02:10.000 --> 00:02:15.000
Now, the OO purists will often add a factory into this.

42
00:02:15.000 --> 00:02:17.001
Now, this factory provides the ability

43
00:02:17.001 --> 00:02:21.005
to leverage very common paths for basic CRUD operations.

44
00:02:21.005 --> 00:02:23.005
For instance, if you are adding objects,

45
00:02:23.005 --> 00:02:26.001
you can just simply call into the factory,

46
00:02:26.001 --> 00:02:29.001
get an object and call add on it without actually worrying

47
00:02:29.001 --> 00:02:32.005
about the instance of that object.

48
00:02:32.005 --> 00:02:36.006
And again, pure OO people really, really like this.

49
00:02:36.006 --> 00:02:38.002
For me, it's a little bit of overkill

50
00:02:38.002 --> 00:02:42.001
when you're doing DAOs, but I'll leave that up to you.

51
00:02:42.001 --> 00:02:44.003
To me, this loses value when you have

52
00:02:44.003 --> 00:02:47.002
a lot of custom methods and, in reality,

53
00:02:47.002 --> 00:02:49.000
if we only have credit operations,

54
00:02:49.000 --> 00:02:51.005
we're not really doing anything interesting

55
00:02:51.005 --> 00:02:54.007
with our data in the database and, if that's the case,

56
00:02:54.007 --> 00:02:57.008
then you probably should be using the repository pattern

57
00:02:57.008 --> 00:03:00.003
and not the DAO pattern but, again,

58
00:03:00.003 --> 00:03:02.005
we'll get into more of that later.

59
00:03:02.005 --> 00:03:04.003
The key here is that this really

60
00:03:04.003 --> 00:03:07.009
is a pure object oriented programming concept

61
00:03:07.009 --> 00:03:11.000
that you can apply to your data access.

