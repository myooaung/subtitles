WEBVTT
1
00:00:00.005 --> 00:00:03.001
- So now that we've talked about creating data

2
00:00:03.001 --> 00:00:04.008
and how result sets work.

3
00:00:04.008 --> 00:00:09.001
Let's jump in and actually read some data from our database.

4
00:00:09.001 --> 00:00:10.008
I'd Like you to jump into your IDE

5
00:00:10.008 --> 00:00:12.008
and go ahead and open up your project.

6
00:00:12.008 --> 00:00:16.000
And once again, we're going to go to source main Java,

7
00:00:16.000 --> 00:00:18.003
our base package,

8
00:00:18.003 --> 00:00:22.008
and we're going to start with our CustomerDAO.

9
00:00:22.008 --> 00:00:23.007
All right. So once again,

10
00:00:23.007 --> 00:00:27.006
we're going to create a sequel statement here

11
00:00:27.006 --> 00:00:28.004
and we're going to do it

12
00:00:28.004 --> 00:00:33.001
by creating a private static final string.

13
00:00:33.001 --> 00:00:39.001
And this time we're going to call it GET_ONE,

14
00:00:39.001 --> 00:00:42.009
and it will be a select.

15
00:00:42.009 --> 00:00:45.004
Now we're going to go ahead and numerate all of our values

16
00:00:45.004 --> 00:00:48.006
instead of using a star operator.

17
00:00:48.006 --> 00:00:53.000
When dealing with SQL queries in a bit of code,

18
00:00:53.000 --> 00:00:56.006
I find it much more efficient to actually go ahead

19
00:00:56.006 --> 00:00:58.008
and write them all out so that you can track

20
00:00:58.008 --> 00:01:01.004
what is what and where it is.

21
00:01:01.004 --> 00:01:04.008
It doesn't always play out the way you would expect

22
00:01:04.008 --> 00:01:09.009
if you don't do this. So it's just a lot easier to do.

23
00:01:09.009 --> 00:01:13.006
So go ahead and put all of our fields in.

24
00:01:13.006 --> 00:01:16.002
And we are going to select this from customer,

25
00:01:16.002 --> 00:01:21.007
where customer ID equals question mark.

26
00:01:21.007 --> 00:01:24.008
Go ahead and finish that up.

27
00:01:24.008 --> 00:01:29.004
Now let's go into this find by ID method.

28
00:01:29.004 --> 00:01:30.006
And the first thing that we're going to do

29
00:01:30.006 --> 00:01:33.009
is we're going to create our customer,

30
00:01:33.009 --> 00:01:37.000
set it equal to a new customer.

31
00:01:37.000 --> 00:01:38.001
And like we did before,

32
00:01:38.001 --> 00:01:41.002
we're going to do a try with resources,

33
00:01:41.002 --> 00:01:48.000
so prepared statement,

34
00:01:48.000 --> 00:01:51.002
this.connection.prepareStatement,

35
00:01:51.002 --> 00:01:56.004
and we will pass it our GET_ONE string.

36
00:01:56.004 --> 00:01:58.007
and we'll put some braces.

37
00:01:58.007 --> 00:02:01.008
And now that's going to show an error in my IDE

38
00:02:01.008 --> 00:02:04.002
until I actually catch the SQL exception

39
00:02:04.002 --> 00:02:07.002
being thrown from that.

40
00:02:07.002 --> 00:02:08.008
And just like we did before,

41
00:02:08.008 --> 00:02:12.003
we'll do the e.printStackTrace,

42
00:02:12.003 --> 00:02:16.007
and then we will throw a new RuntimeException,

43
00:02:16.007 --> 00:02:19.007
sending it that exception,

44
00:02:19.007 --> 00:02:23.006
and we're going to return our customer.

45
00:02:23.006 --> 00:02:24.005
We haven't built yet,

46
00:02:24.005 --> 00:02:27.000
but we're just getting our scaffolding done.

47
00:02:27.000 --> 00:02:28.005
We'll go ahead and close the sidebar

48
00:02:28.005 --> 00:02:30.001
and just make this a little bit easier to read

49
00:02:30.001 --> 00:02:32.008
cause we had a lot of typing to do.

50
00:02:32.008 --> 00:02:35.004
Okay, so now we're going to take our statement

51
00:02:35.004 --> 00:02:39.001
and we're going to set a long and it's the first value.

52
00:02:39.001 --> 00:02:42.005
And we're going to pass in the ID from the method,

53
00:02:42.005 --> 00:02:45.007
and then we're going to build a ResultSet.

54
00:02:45.007 --> 00:02:48.004
Now often you'll see this abbreviated as RS,

55
00:02:48.004 --> 00:02:51.008
and I'm not a big fan of abbreviating variables,

56
00:02:51.008 --> 00:02:53.002
but I'm going to go ahead and do that

57
00:02:53.002 --> 00:02:54.009
because we have a lot of typing to do,

58
00:02:54.009 --> 00:02:57.008
which is usually why people make shortcuts.

59
00:02:57.008 --> 00:03:00.004
When they're writing JDBC code like this.

60
00:03:00.004 --> 00:03:03.001
Though, it may not be elegant form in Java,

61
00:03:03.001 --> 00:03:04.008
sometimes it's just a necessity

62
00:03:04.008 --> 00:03:06.004
because you've got a lot to type.

63
00:03:06.004 --> 00:03:08.003
So consider doing it,

64
00:03:08.003 --> 00:03:12.000
even though it doesn't always make sense.

65
00:03:12.000 --> 00:03:15.002
So we're going to set that equal to statement.executeQuery.

66
00:03:15.002 --> 00:03:16.009
So now we're going to do this iteration

67
00:03:16.009 --> 00:03:19.002
that we talked about.

68
00:03:19.002 --> 00:03:25.000
So while results set.next,

69
00:03:25.000 --> 00:03:31.006
we're going to do a customer.setId equal to rs.getLong

70
00:03:31.006 --> 00:03:39.004
and we will set it to the value of customer_id.

71
00:03:39.004 --> 00:03:42.002
And we'll continue and go through all of our values.

72
00:03:42.002 --> 00:03:47.005
So setFirstName equals to rs.getString,

73
00:03:47.005 --> 00:03:51.005
and set it equal to first_name,

74
00:03:51.005 --> 00:03:56.004
and continue to the rest of our object.

75
00:03:56.004 --> 00:04:00.000
Okay, so now that we've typed all of that fun information,

76
00:04:00.000 --> 00:04:03.006
I actually want to scroll down just a little bit

77
00:04:03.006 --> 00:04:06.008
and we're going to go back to our create customer.

78
00:04:06.008 --> 00:04:09.005
And instead of returning null,

79
00:04:09.005 --> 00:04:16.004
we're going to get a value from the database.

80
00:04:16.004 --> 00:04:19.005
And it's that helper method that I provided earlier.

81
00:04:19.005 --> 00:04:23.000
We'll use the customer sequence,

82
00:04:23.000 --> 00:04:27.009
and then we can now return this.findById,

83
00:04:27.009 --> 00:04:30.003
passing at the ID.

84
00:04:30.003 --> 00:04:32.009
And then we're actually returning data that matters.

85
00:04:32.009 --> 00:04:34.004
And you can play with that on your own,

86
00:04:34.004 --> 00:04:36.000
but I just want them to go ahead and type that in

87
00:04:36.000 --> 00:04:38.001
as we were here.

88
00:04:38.001 --> 00:04:43.008
So now I want to go back to our JDBC executer

89
00:04:43.008 --> 00:04:49.008
and we're going to replace a large portion of this method.

90
00:04:49.008 --> 00:04:53.001
We want you to set our customer equal to

91
00:04:53.001 --> 00:04:56.000
our customerDAO.findById.

92
00:04:56.000 --> 00:04:59.006
And we're going to type in the value of 1000

93
00:04:59.006 --> 00:05:04.001
and then we will do a System.out.println,

94
00:05:04.001 --> 00:05:09.001
and we will return the customer.FirstName,

95
00:05:09.001 --> 00:05:16.000
put a space in there and customer.getLastName.

96
00:05:16.000 --> 00:05:17.005
Now we're going to go ahead and run this.

97
00:05:17.005 --> 00:05:19.000
And while we're doing that,

98
00:05:19.000 --> 00:05:20.006
I just want to give you a little tip.

99
00:05:20.006 --> 00:05:22.005
Often when I'm working with DTOs,

100
00:05:22.005 --> 00:05:24.003
I put a two string method on them

101
00:05:24.003 --> 00:05:26.003
to make this a little bit easier.

102
00:05:26.003 --> 00:05:29.001
So I don't have to do that System.out.println.

103
00:05:29.001 --> 00:05:30.005
I just put it on my object,

104
00:05:30.005 --> 00:05:32.004
but in this case we're good to go.

105
00:05:32.004 --> 00:05:34.003
And you'll see that when we run that method,

106
00:05:34.003 --> 00:05:35.008
we're now getting data out

107
00:05:35.008 --> 00:05:37.005
and that data equals Victor Woods.

108
00:05:37.005 --> 00:05:40.003
And if you'll look at the original SQL file,

109
00:05:40.003 --> 00:05:46.000
you will see Victor Woods listed in there with ID of 1000.

