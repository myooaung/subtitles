WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Instructor] So, as we start to come to a conclusion

2
00:00:02.002 --> 00:00:03.006
of this course,

3
00:00:03.006 --> 00:00:06.006
I would be remiss if I didn't at least point out

4
00:00:06.006 --> 00:00:09.003
that there is JPA and ORM,

5
00:00:09.003 --> 00:00:11.000
where they're similar, where they're different,

6
00:00:11.000 --> 00:00:14.003
and what they mean to an RDBMS system.

7
00:00:14.003 --> 00:00:15.007
Now, first I'm going to start by talking about

8
00:00:15.007 --> 00:00:19.002
why use JDBC itself?

9
00:00:19.002 --> 00:00:22.001
Now, technology itself is all about trade-offs.

10
00:00:22.001 --> 00:00:24.009
So, for every benefit you get from ORM,

11
00:00:24.009 --> 00:00:26.008
you're going to get a problem.

12
00:00:26.008 --> 00:00:29.008
And that's just the nature of what it does.

13
00:00:29.008 --> 00:00:31.007
I can show you in most ORMs,

14
00:00:31.007 --> 00:00:33.008
how to create a Cartesian product

15
00:00:33.008 --> 00:00:37.002
by doing a simple one to many join multiple times

16
00:00:37.002 --> 00:00:39.005
from a simple object itself.

17
00:00:39.005 --> 00:00:41.000
That's usually not what you want.

18
00:00:41.000 --> 00:00:43.003
Cartesian products are not a positive thing

19
00:00:43.003 --> 00:00:44.009
out of a database.

20
00:00:44.009 --> 00:00:47.009
So, every problem that you're solving with an ORM,

21
00:00:47.009 --> 00:00:49.008
you're also causing new ones.

22
00:00:49.008 --> 00:00:51.009
And that's one of the reasons why people like

23
00:00:51.009 --> 00:00:53.009
using raw JDBC.

24
00:00:53.009 --> 00:00:56.006
And one of the reasons that I personally advocate for it

25
00:00:56.006 --> 00:01:00.002
when dealing with an RDBMS system.

26
00:01:00.002 --> 00:01:03.001
JDBC gives you full control,

27
00:01:03.001 --> 00:01:06.001
but you're doing so with a lot of manual work.

28
00:01:06.001 --> 00:01:08.007
And a lot of that is repetitive work.

29
00:01:08.007 --> 00:01:11.007
Copy and paste is not your friend when you write code,

30
00:01:11.007 --> 00:01:15.000
but that often is what happens when we're doing JDBC,

31
00:01:15.000 --> 00:01:18.000
because it is so repetitive.

32
00:01:18.000 --> 00:01:21.006
And then JDBC gives your DBAs much more control.

33
00:01:21.006 --> 00:01:23.006
And that's such often on teams

34
00:01:23.006 --> 00:01:27.005
where the DBAs are very tight knit with the DevStack,

35
00:01:27.005 --> 00:01:31.008
JDBC becomes the flavored technology of choice.

36
00:01:31.008 --> 00:01:34.006
But not always.

37
00:01:34.006 --> 00:01:37.005
Object relational mapping, or ORM systems

38
00:01:37.005 --> 00:01:39.005
allow you to interact with the database

39
00:01:39.005 --> 00:01:41.006
through the use of objects.

40
00:01:41.006 --> 00:01:43.008
Now, technically it's a technique,

41
00:01:43.008 --> 00:01:45.003
but often when we say ORM,

42
00:01:45.003 --> 00:01:47.002
we're talking about the library

43
00:01:47.002 --> 00:01:49.007
that implements this technique.

44
00:01:49.007 --> 00:01:51.006
Now these tend to reduce code,

45
00:01:51.006 --> 00:01:54.009
especially when you're dealing with results at mapping,

46
00:01:54.009 --> 00:01:58.003
which is often what we find ourselves copy and pasting

47
00:01:58.003 --> 00:01:59.007
in JDBC code,

48
00:01:59.007 --> 00:02:03.000
and in fact, we did that in this course.

49
00:02:03.000 --> 00:02:05.009
Hibernate is one of the most common implementations

50
00:02:05.009 --> 00:02:10.003
of a library that uses ORM.

51
00:02:10.003 --> 00:02:13.003
Now, JPA or Java Persistence API,

52
00:02:13.003 --> 00:02:17.007
is the standard Java EE or Jakarta EE specification

53
00:02:17.007 --> 00:02:19.006
for an ORM.

54
00:02:19.006 --> 00:02:24.007
Once again, hibernate is an implementation of JPA.

55
00:02:24.007 --> 00:02:28.004
Now this streamlines persistence to a standard format

56
00:02:28.004 --> 00:02:32.009
and it reduces JDBC code with a focus on OOP.

57
00:02:32.009 --> 00:02:35.005
But again, there's trade-offs.

58
00:02:35.005 --> 00:02:38.000
What I find myself doing most often,

59
00:02:38.000 --> 00:02:40.008
now granted I am a Java Spring developer,

60
00:02:40.008 --> 00:02:43.007
is using JDBC with Spring

61
00:02:43.007 --> 00:02:48.002
and using a named parameter, JDBC template.

62
00:02:48.002 --> 00:02:52.000
By doing that, I get sort of the benefits of JPA

63
00:02:52.000 --> 00:02:53.005
because I get this roadmap

64
00:02:53.005 --> 00:02:56.009
where I write it once, and I use it many times.

65
00:02:56.009 --> 00:02:59.001
I also get the benefit of JDBC

66
00:02:59.001 --> 00:03:03.002
because I control all of my JDBC constructs,

67
00:03:03.002 --> 00:03:05.000
all those SQL statements,

68
00:03:05.000 --> 00:03:06.009
and I get named parameters,

69
00:03:06.009 --> 00:03:10.005
which allows me to have code that is very easy to read.

70
00:03:10.005 --> 00:03:12.007
So there is some middle ground that you can find

71
00:03:12.007 --> 00:03:15.000
if you use your imagination,

72
00:03:15.000 --> 00:03:18.001
and you'd look through different articles and details,

73
00:03:18.001 --> 00:03:20.006
but you have to be willing to try new things out.

74
00:03:20.006 --> 00:03:22.006
And the only way to know what you're going to like

75
00:03:22.006 --> 00:03:25.007
and what you're not going to like, is by playing with them.

76
00:03:25.007 --> 00:03:28.001
And we're going to talk about what's next coming up,

77
00:03:28.001 --> 00:03:29.006
but keep that in mind.

78
00:03:29.006 --> 00:03:31.000
Think about JPA.

79
00:03:31.000 --> 00:03:32.007
Think about simple ORM.

80
00:03:32.007 --> 00:03:36.006
Think about something like Spring data or Spring data JDBC

81
00:03:36.006 --> 00:03:39.008
and find out which pattern works best for you,

82
00:03:39.008 --> 00:03:44.004
as a developer, and your team, to increase productivity,

83
00:03:44.004 --> 00:03:45.004
increase security,

84
00:03:45.004 --> 00:03:48.000
and get you where you want to go faster.

