WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] So now we're to the last step

2
00:00:02.000 --> 00:00:04.009
of our CRUD operation: deleting data.

3
00:00:04.009 --> 00:00:08.008
So let's jump into JDBC and see how to do this operation.

4
00:00:08.008 --> 00:00:11.001
So I want you to jump back into your IDE

5
00:00:11.001 --> 00:00:13.007
and once again, go to src, main, java,

6
00:00:13.007 --> 00:00:17.000
our base package and our CustomerDAO.

7
00:00:17.000 --> 00:00:22.008
Once again, we're going to add a private static String.

8
00:00:22.008 --> 00:00:25.005
This time we will call DELETE.

9
00:00:25.005 --> 00:00:31.002
And it will be equal to the value DELETE FROM customer

10
00:00:31.002 --> 00:00:38.001
WHERE customer_id equals question mark.

11
00:00:38.001 --> 00:00:42.006
Now we can scroll down to our DELETE method.

12
00:00:42.006 --> 00:00:46.003
And we will implement this as we have done so many times

13
00:00:46.003 --> 00:00:52.004
with a try with resources, so PreparedStatement.

14
00:00:52.004 --> 00:00:56.009
Passing the DELETE.

15
00:00:56.009 --> 00:01:01.008
Catch the exception.

16
00:01:01.008 --> 00:01:03.009
And now we can implement the method.

17
00:01:03.009 --> 00:01:07.006
And this is a relatively simple one to implement.

18
00:01:07.006 --> 00:01:12.008
Statement.setLong equal to our id,

19
00:01:12.008 --> 00:01:16.005
and then we will simply call statement.execute

20
00:01:16.005 --> 00:01:19.004
because we don't need a return type on this.

21
00:01:19.004 --> 00:01:21.009
And that's all there is to our DELETE method.

22
00:01:21.009 --> 00:01:26.004
So let's go back to our JDBCExecutor.

23
00:01:26.004 --> 00:01:30.003
And we're going to get rid of most of the stuff.

24
00:01:30.003 --> 00:01:34.001
And we're going to go actually implement a full routine.

25
00:01:34.001 --> 00:01:35.003
But before we do that,

26
00:01:35.003 --> 00:01:39.005
we're going to go add a helper method to our customer.

27
00:01:39.005 --> 00:01:43.009
And I'm going to allow my IDE to generate a toString method.

28
00:01:43.009 --> 00:01:46.004
Now, every IDE that works with Java

29
00:01:46.004 --> 00:01:49.006
has a way to generate a toString method.

30
00:01:49.006 --> 00:01:51.009
I don't really care which method you do.

31
00:01:51.009 --> 00:01:53.003
Just generate a toString.

32
00:01:53.003 --> 00:01:54.003
That's all that matters

33
00:01:54.003 --> 00:01:57.009
is that we have an easy way to print out the contents

34
00:01:57.009 --> 00:01:58.009
of this customer

35
00:01:58.009 --> 00:02:02.000
so that we don't have to type it out 20 times.

36
00:02:02.000 --> 00:02:03.008
So now that that is done,

37
00:02:03.008 --> 00:02:06.007
let's go implement this routine.

38
00:02:06.007 --> 00:02:09.005
We'll go ahead and leave the CustomerDAO here.

39
00:02:09.005 --> 00:02:10.007
The first thing we will do

40
00:02:10.007 --> 00:02:15.005
is we will create a new customer.

41
00:02:15.005 --> 00:02:17.000
And we're going to put in some data here

42
00:02:17.000 --> 00:02:23.007
about our second president in the United States of America.

43
00:02:23.007 --> 00:02:24.007
All right, so now that we've got

44
00:02:24.007 --> 00:02:29.005
that bogus customer data created,

45
00:02:29.005 --> 00:02:32.008
we'll create a new customer called dbCustomer

46
00:02:32.008 --> 00:02:33.007
that we will use to manipulate

47
00:02:33.007 --> 00:02:36.003
throughout the rest of this method.

48
00:02:36.003 --> 00:02:39.000
So we'll go into our customerDAO

49
00:02:39.000 --> 00:02:42.002
and we will create our customer.

50
00:02:42.002 --> 00:02:46.004
And now we're going to do a System.out.println

51
00:02:46.004 --> 00:02:51.003
on our dbCustomer.

52
00:02:51.003 --> 00:03:03.007
And then we'll do a GET on that customer.

53
00:03:03.007 --> 00:03:05.006
And then we'll print this one out

54
00:03:05.006 --> 00:03:09.002
and we expect this to be the exact same.

55
00:03:09.002 --> 00:03:11.005
Now we will take our customer

56
00:03:11.005 --> 00:03:14.004
and we will change our email,

57
00:03:14.004 --> 00:03:29.000
and this time, we're going to do john.adams@whitehouse.gov.

58
00:03:29.000 --> 00:03:32.000
And we will update it.

59
00:03:32.000 --> 00:03:38.007
And then once again, we'll print it out.

60
00:03:38.007 --> 00:03:40.009
And then finally, we're going to go ahead

61
00:03:40.009 --> 00:03:49.008
and delete our customer.

62
00:03:49.008 --> 00:03:50.009
And now that we've got all that done,

63
00:03:50.009 --> 00:03:54.009
we'll go ahead and run our method.

64
00:03:54.009 --> 00:03:56.009
And then you can see we have some data that's spit out.

65
00:03:56.009 --> 00:03:58.004
Now, if your ID doesn't match mine,

66
00:03:58.004 --> 00:03:59.003
it probably just means

67
00:03:59.003 --> 00:04:01.006
that you've run create a couple other times,

68
00:04:01.006 --> 00:04:02.004
and that's okay.

69
00:04:02.004 --> 00:04:03.002
What really matters here

70
00:04:03.002 --> 00:04:05.003
is that we ran through the sequence,

71
00:04:05.003 --> 00:04:07.003
we added a customer, we got a customer,

72
00:04:07.003 --> 00:04:11.002
we updated our customer and we deleted it.

73
00:04:11.002 --> 00:04:12.009
So what we'll do is we're actually going to check

74
00:04:12.009 --> 00:04:15.004
that this value doesn't exist on our database.

75
00:04:15.004 --> 00:04:19.006
So we're going to do a psql -h

76
00:04:19.006 --> 00:04:30.007
localhost -U postgres -d for hplussport.

77
00:04:30.007 --> 00:04:32.000
When it prompts for our password,

78
00:04:32.000 --> 00:04:35.006
we'll use our uber secure password of password.

79
00:04:35.006 --> 00:04:38.004
And now we're at our Postgres prompt.

80
00:04:38.004 --> 00:04:43.001
So what we can do is a select star from customer

81
00:04:43.001 --> 00:04:45.007
where customer_id equals,

82
00:04:45.007 --> 00:04:48.008
in my case, 10001.

83
00:04:48.008 --> 00:04:50.005
You'll want to see whatever value you saw

84
00:04:50.005 --> 00:04:52.006
in your running console.

85
00:04:52.006 --> 00:04:54.005
End it with a semicolon.

86
00:04:54.005 --> 00:04:57.004
And you'll see I get zero rows returned.

87
00:04:57.004 --> 00:05:01.002
Now, if I do the same thing with our previous value,

88
00:05:01.002 --> 00:05:02.008
which was George Washington,

89
00:05:02.008 --> 00:05:04.005
you'll see that I get data back.

90
00:05:04.005 --> 00:05:06.000
And that's just to let us know

91
00:05:06.000 --> 00:05:07.004
that the data truly was deleted

92
00:05:07.004 --> 00:05:08.009
at the end of our test.

93
00:05:08.009 --> 00:05:12.000
And that's all there is to deleting data in JDBC.

