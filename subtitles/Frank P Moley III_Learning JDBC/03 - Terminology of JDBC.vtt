WEBVTT
1
00:00:00.005 --> 00:00:01.008
- [Instructor] Part of being a good steward

2
00:00:01.008 --> 00:00:04.002
in teaching JDBC is to make sure

3
00:00:04.002 --> 00:00:07.006
that we can baseline on the terminology of the API

4
00:00:07.006 --> 00:00:09.006
in order that when I make statements

5
00:00:09.006 --> 00:00:12.008
you'll understand exactly what they mean.

6
00:00:12.008 --> 00:00:14.002
One of the first things I want to talk

7
00:00:14.002 --> 00:00:16.003
about are all the ways to do connections

8
00:00:16.003 --> 00:00:19.002
and what these various terms mean.

9
00:00:19.002 --> 00:00:21.009
Now, DriverManager is sort of the legacy way

10
00:00:21.009 --> 00:00:25.003
of connecting to databases and throughout this course,

11
00:00:25.003 --> 00:00:27.008
we're going to actually leverage DriverManager

12
00:00:27.008 --> 00:00:29.002
because we're not doing anything

13
00:00:29.002 --> 00:00:32.006
that's too complex or that's multi threaded.

14
00:00:32.006 --> 00:00:35.009
As such DriverManager should operate with everything

15
00:00:35.009 --> 00:00:39.005
that we need in order to get simple connections.

16
00:00:39.005 --> 00:00:41.008
Now, in the real world, if you're building systems,

17
00:00:41.008 --> 00:00:45.002
especially those systems that have multiple threads running

18
00:00:45.002 --> 00:00:48.002
at once, you're going to want to use the data source classes

19
00:00:48.002 --> 00:00:50.009
in order to get your connection.

20
00:00:50.009 --> 00:00:53.005
These data source classes provide a modern way

21
00:00:53.005 --> 00:00:56.005
of interacting with the driver itself,

22
00:00:56.005 --> 00:00:59.000
providing things like thread pooling,

23
00:00:59.000 --> 00:01:01.000
and other metrics that make connecting

24
00:01:01.000 --> 00:01:03.008
to the database more efficient.

25
00:01:03.008 --> 00:01:06.001
The connection itself is the class

26
00:01:06.001 --> 00:01:08.002
that the developer interacts with

27
00:01:08.002 --> 00:01:11.002
that manages the actual communication

28
00:01:11.002 --> 00:01:13.001
between the client and the server.

29
00:01:13.001 --> 00:01:15.004
And, indeed, the connection is the most common thing

30
00:01:15.004 --> 00:01:19.008
that we will use throughout the rest of this course.

31
00:01:19.008 --> 00:01:21.007
Now, when we're dealing with executions

32
00:01:21.007 --> 00:01:24.003
there's a few terms that we need to know as well.

33
00:01:24.003 --> 00:01:28.002
Now, a statement is the representation of the SQL

34
00:01:28.002 --> 00:01:31.008
to be executed against the database itself.

35
00:01:31.008 --> 00:01:36.001
And it can either be a query or an actual SQL statement

36
00:01:36.001 --> 00:01:39.006
that is going to modify the database.

37
00:01:39.006 --> 00:01:43.006
A ResultSet is the response from the database

38
00:01:43.006 --> 00:01:46.007
in a logical tabular form and we're going to spin

39
00:01:46.007 --> 00:01:49.004
through that ResultSet to pull data out

40
00:01:49.004 --> 00:01:53.008
and also to manipulate the data as we get it out.

41
00:01:53.008 --> 00:01:57.006
A PreparedStatement is an extension of statement

42
00:01:57.006 --> 00:02:02.001
that is used for pre-compiled statements with inputs.

43
00:02:02.001 --> 00:02:05.002
This is a great way to improve your efficiency

44
00:02:05.002 --> 00:02:07.005
of your database, especially when you're dealing

45
00:02:07.005 --> 00:02:12.006
with large statements that need to be compiled at runtime.

46
00:02:12.006 --> 00:02:15.004
Now, a CallableStatement is an extension

47
00:02:15.004 --> 00:02:17.008
of PreparedStatement that references

48
00:02:17.008 --> 00:02:19.009
a stored procedure in the database.

49
00:02:19.009 --> 00:02:23.005
And a stored procedure has inputs and outputs.

50
00:02:23.005 --> 00:02:24.009
Now, most of the time in modern computing,

51
00:02:24.009 --> 00:02:27.004
we don't do a lot with PreparedStatements

52
00:02:27.004 --> 00:02:29.004
and that's because it's too difficult

53
00:02:29.004 --> 00:02:32.005
to manipulate your code in two different places.

54
00:02:32.005 --> 00:02:34.001
But just for the purposes of this course,

55
00:02:34.001 --> 00:02:36.005
we are going to manipulate PreparedStatements

56
00:02:36.005 --> 00:02:38.004
because I want to show you how that works

57
00:02:38.004 --> 00:02:40.001
in case you are in a development shop

58
00:02:40.001 --> 00:02:43.002
that does use PreparedStatements on a regular basis.

59
00:02:43.002 --> 00:02:47.002
And I know they're out there cause I see them all the time.

60
00:02:47.002 --> 00:02:50.006
Now, transactions are one of the most powerful parts

61
00:02:50.006 --> 00:02:53.009
of RDBMS, a transaction allows you to have

62
00:02:53.009 --> 00:02:56.006
a block of code that all executes

63
00:02:56.006 --> 00:02:59.009
together with a single commit.

64
00:02:59.009 --> 00:03:02.002
Now, there's multiple ways to make these commits happen.

65
00:03:02.002 --> 00:03:05.001
And the first is an auto-commit and this is a function

66
00:03:05.001 --> 00:03:08.006
of the database driver itself, where each statement

67
00:03:08.006 --> 00:03:11.008
is immediately readable, by all of the processes,

68
00:03:11.008 --> 00:03:14.004
once it's executed in the RDBMS.

69
00:03:14.004 --> 00:03:16.001
In other words, the statement

70
00:03:16.001 --> 00:03:18.005
is actually committed immediately

71
00:03:18.005 --> 00:03:21.003
when you call it into the database.

72
00:03:21.003 --> 00:03:24.005
A transaction is a series of statements

73
00:03:24.005 --> 00:03:28.005
that must be executed completely or not at all

74
00:03:28.005 --> 00:03:31.005
before other processes can read them.

75
00:03:31.005 --> 00:03:33.000
Now, there are ways to manipulate

76
00:03:33.000 --> 00:03:35.007
when I say other processes can read them,

77
00:03:35.007 --> 00:03:37.004
but for the basic rule of thumb,

78
00:03:37.004 --> 00:03:39.004
and the way that most of us will always interact

79
00:03:39.004 --> 00:03:43.000
with databases this transaction boundary allows us

80
00:03:43.000 --> 00:03:45.002
to have a guarantee that if I want

81
00:03:45.002 --> 00:03:49.002
to go execute five statements and all five must happen

82
00:03:49.002 --> 00:03:53.005
before we write them out of the database that I can do that.

83
00:03:53.005 --> 00:03:55.003
If there's a failure in that use case,

84
00:03:55.003 --> 00:03:57.008
that's where we get into the rollback segment.

85
00:03:57.008 --> 00:04:00.005
And this is a mechanism by which all of the statements

86
00:04:00.005 --> 00:04:04.004
of a transaction are removed from the database,

87
00:04:04.004 --> 00:04:06.003
such that it would appear to all current

88
00:04:06.003 --> 00:04:10.002
and future processes as this had never occurred.

89
00:04:10.002 --> 00:04:13.006
This is atomic transactions at its core.

90
00:04:13.006 --> 00:04:16.008
From a user perspective, I can guarantee

91
00:04:16.008 --> 00:04:19.008
that all the transactions happen or none of them do,

92
00:04:19.008 --> 00:04:22.001
which is what we want when we're dealing with systems

93
00:04:22.001 --> 00:04:25.007
that require this high level of coordination

94
00:04:25.007 --> 00:04:29.000
between multiple tables in an RDBMS.

