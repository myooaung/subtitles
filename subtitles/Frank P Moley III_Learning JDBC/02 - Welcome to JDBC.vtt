WEBVTT
1
00:00:00.000 --> 00:00:02.004
- [Speaker] And we talked a little bit about RDBMS

2
00:00:02.004 --> 00:00:03.009
in the previous video.

3
00:00:03.009 --> 00:00:08.004
And now it's time to start talking about JDBC itself.

4
00:00:08.004 --> 00:00:13.000
The JDBC or Java Database Connectivity is an API

5
00:00:13.000 --> 00:00:16.000
for client side access to a database.

6
00:00:16.000 --> 00:00:19.004
And again, that database is a relational database.

7
00:00:19.004 --> 00:00:22.000
And that's what we're really focused on.

8
00:00:22.000 --> 00:00:26.008
Now, the latest spec is defined in JSR 221

9
00:00:26.008 --> 00:00:28.004
at the time of this recording.

10
00:00:28.004 --> 00:00:32.003
And that relates around JDBC 4.

11
00:00:32.003 --> 00:00:34.007
Now one really cool thing about JDBC

12
00:00:34.007 --> 00:00:37.008
is it allows you to have universal data access.

13
00:00:37.008 --> 00:00:40.007
And indeed, if you write your SQL correctly,

14
00:00:40.007 --> 00:00:42.006
it's hot swappable.

15
00:00:42.006 --> 00:00:46.005
As long as your database has support for standard SQL

16
00:00:46.005 --> 00:00:49.009
and you use standard SQL, you should be able to swap

17
00:00:49.009 --> 00:00:54.007
between other databases that share that same characteristic.

18
00:00:54.007 --> 00:00:56.003
Now, in order to do this,

19
00:00:56.003 --> 00:00:59.000
there has to be JDBC drivers available.

20
00:00:59.000 --> 00:01:02.003
And indeed almost all databases you'll run into,

21
00:01:02.003 --> 00:01:06.003
there's a JDBC driver that is available, that you can use.

22
00:01:06.003 --> 00:01:10.007
Whether it's on server or embedded, they exist.

23
00:01:10.007 --> 00:01:12.006
Now, in theory, when you do this,

24
00:01:12.006 --> 00:01:16.004
you can run the same code against two different databases.

25
00:01:16.004 --> 00:01:18.004
And that really allows us

26
00:01:18.004 --> 00:01:20.006
to have a lot of power in our system.

27
00:01:20.006 --> 00:01:23.006
Because as a developer, I can write locally

28
00:01:23.006 --> 00:01:27.002
against Derby or MySQL or Postgre's,

29
00:01:27.002 --> 00:01:31.004
and then deploy into a world where we've got Oracle or DB2,

30
00:01:31.004 --> 00:01:35.007
as long as we're using ANSI standard SQL in both use cases.

31
00:01:35.007 --> 00:01:38.003
And throughout the course, I'm going to give you a few pointers

32
00:01:38.003 --> 00:01:40.004
on how to make those SQL statements

33
00:01:40.004 --> 00:01:42.009
a little bit more easy to manipulate

34
00:01:42.009 --> 00:01:45.006
so that your DBA's can tweak your queries

35
00:01:45.006 --> 00:01:49.004
without impacting your code.

36
00:01:49.004 --> 00:01:52.000
Now the basic flow of operations

37
00:01:52.000 --> 00:01:55.001
in a JDBC world is as such.

38
00:01:55.001 --> 00:01:57.009
Your application will mount the driver

39
00:01:57.009 --> 00:02:01.005
and using that driver will create a connection.

40
00:02:01.005 --> 00:02:04.008
From that connection, we can execute SQL statements,

41
00:02:04.008 --> 00:02:05.008
whether they're queries

42
00:02:05.008 --> 00:02:09.003
or actual execution statements themselves.

43
00:02:09.003 --> 00:02:11.002
Then we can either commit those changes

44
00:02:11.002 --> 00:02:13.006
if there were any or roll them back,

45
00:02:13.006 --> 00:02:15.004
and then we close the connection.

46
00:02:15.004 --> 00:02:18.007
And you'll see this pattern used over and over again.

47
00:02:18.007 --> 00:02:21.008
In fact, it's really going to become second nature.

48
00:02:21.008 --> 00:02:24.002
Now for some queries where we're getting data back,

49
00:02:24.002 --> 00:02:26.003
there's going to be an additional step

50
00:02:26.003 --> 00:02:28.003
after we do the execute SQL

51
00:02:28.003 --> 00:02:30.005
where we're going to unpack the results set.

52
00:02:30.005 --> 00:02:31.008
And we'll definitely show you that

53
00:02:31.008 --> 00:02:34.004
as we go throughout this course.

54
00:02:34.004 --> 00:02:35.004
Now one thing to note

55
00:02:35.004 --> 00:02:38.007
when you're dealing with exceptions in a JDBC world

56
00:02:38.007 --> 00:02:43.003
is that all JDBC operations throw a SQLException

57
00:02:43.003 --> 00:02:45.006
or some subclass of it.

58
00:02:45.006 --> 00:02:47.007
And then these are named exceptions.

59
00:02:47.007 --> 00:02:49.001
So you either have to catch it

60
00:02:49.001 --> 00:02:51.002
and perform some operations on it,

61
00:02:51.002 --> 00:02:53.008
or you have to throw it out of your system.

62
00:02:53.008 --> 00:02:57.001
Now I use a pattern where I convert all named exceptions

63
00:02:57.001 --> 00:02:58.009
that are runtime exceptions.

64
00:02:58.009 --> 00:03:01.000
At the top layer of my application,

65
00:03:01.000 --> 00:03:03.006
I will catch those runtime exceptions

66
00:03:03.006 --> 00:03:05.004
and actually do work on it

67
00:03:05.004 --> 00:03:07.005
because all too often throughout my code,

68
00:03:07.005 --> 00:03:10.000
I'm not going to do anything other than throw that exception

69
00:03:10.000 --> 00:03:11.006
to a higher level.

70
00:03:11.006 --> 00:03:14.001
Now that's just a pattern that I use personally.

71
00:03:14.001 --> 00:03:14.009
But in this course,

72
00:03:14.009 --> 00:03:18.000
we're going to focus on the named exceptions.

73
00:03:18.000 --> 00:03:21.000
Now, one thing that's really cool about the SQL exception

74
00:03:21.000 --> 00:03:24.004
is that you get a standardized SQLSTATE code

75
00:03:24.004 --> 00:03:26.003
that is available on the exception.

76
00:03:26.003 --> 00:03:31.000
And you can use that to determine what caused the error.

77
00:03:31.000 --> 00:03:33.004
In addition, there's an error code available

78
00:03:33.004 --> 00:03:35.001
on the SQL exception.

79
00:03:35.001 --> 00:03:38.005
Now this error code is very vendor specific.

80
00:03:38.005 --> 00:03:40.002
If you remember, when I talked about Oracle

81
00:03:40.002 --> 00:03:43.006
and how their error codes were different than system are,

82
00:03:43.006 --> 00:03:44.007
that's really the way it is

83
00:03:44.007 --> 00:03:46.007
throughout all the database vendors.

84
00:03:46.007 --> 00:03:48.004
They all have their own error codes

85
00:03:48.004 --> 00:03:50.005
for the same error condition.

86
00:03:50.005 --> 00:03:52.006
So those error codes really going to require you

87
00:03:52.006 --> 00:03:55.004
to go look up the error in the database,

88
00:03:55.004 --> 00:03:56.009
but they are very useful

89
00:03:56.009 --> 00:03:59.007
if you put them into your log messages.

90
00:03:59.007 --> 00:04:01.000
Now as we go throughout the course,

91
00:04:01.000 --> 00:04:02.005
you'll see examples of this.

92
00:04:02.005 --> 00:04:05.000
And I highly encourage you to develop a pattern

93
00:04:05.000 --> 00:04:09.000
for dealing with exceptions in a JDBC world.

