WEBVTT
1
00:00:00.005 --> 00:00:01.006
- [Instructor] Now up until this point

2
00:00:01.006 --> 00:00:03.008
and throughout the rest of this course actually,

3
00:00:03.008 --> 00:00:06.001
we've been looking into DAO pattern.

4
00:00:06.001 --> 00:00:08.009
But there's an alternate pattern that many people use

5
00:00:08.009 --> 00:00:10.005
especially in the web world

6
00:00:10.005 --> 00:00:13.005
and that's the repository pattern.

7
00:00:13.005 --> 00:00:15.008
Now the differences between the repository pattern

8
00:00:15.008 --> 00:00:17.005
and DAO pattern

9
00:00:17.005 --> 00:00:20.008
is that the repository pattern focuses only

10
00:00:20.008 --> 00:00:24.000
on single-table access per class.

11
00:00:24.000 --> 00:00:27.004
And in fact the DAO that we've worked with to date

12
00:00:27.004 --> 00:00:29.009
could be a repository in this use case

13
00:00:29.009 --> 00:00:33.001
cause we've only been interacting with the customer data.

14
00:00:33.001 --> 00:00:35.009
Now that's going to change throughout the rest of this course

15
00:00:35.009 --> 00:00:39.000
but keep in mind that a repository in a DAO,

16
00:00:39.000 --> 00:00:40.006
when you're dealing with a single-table

17
00:00:40.006 --> 00:00:43.009
are very, very similar.

18
00:00:43.009 --> 00:00:46.008
Now instead of doing joining in the database,

19
00:00:46.008 --> 00:00:50.003
in the repository pattern, you join in the code.

20
00:00:50.003 --> 00:00:53.003
So I would select everything from the orders namespace

21
00:00:53.003 --> 00:00:54.006
for instance,

22
00:00:54.006 --> 00:00:56.003
get the ID of the customer

23
00:00:56.003 --> 00:00:59.001
and then go to the customer repository

24
00:00:59.001 --> 00:01:01.003
and find the customer with that ID

25
00:01:01.003 --> 00:01:02.009
and then join it in code.

26
00:01:02.009 --> 00:01:04.007
Whereas of the DAO pattern,

27
00:01:04.007 --> 00:01:08.005
I would get the order and then I would take the customer

28
00:01:08.005 --> 00:01:10.004
and join it to the order table

29
00:01:10.004 --> 00:01:14.004
where that foreign key relationship exists.

30
00:01:14.004 --> 00:01:17.008
Now really, distribution is where repositories

31
00:01:17.008 --> 00:01:20.000
really have their strength.

32
00:01:20.000 --> 00:01:22.006
Complex joins in the database

33
00:01:22.006 --> 00:01:26.009
require a single instance of the database themselves.

34
00:01:26.009 --> 00:01:28.002
And in reality,

35
00:01:28.002 --> 00:01:31.009
that requires vertical scaling of your database.

36
00:01:31.009 --> 00:01:33.008
But when you're distributing around the world,

37
00:01:33.008 --> 00:01:36.002
vertical scaling doesn't always work.

38
00:01:36.002 --> 00:01:40.005
And the repository pattern allows you to shard your database

39
00:01:40.005 --> 00:01:44.001
in such a way that you can focus on single-table access

40
00:01:44.001 --> 00:01:47.007
instead of accessing the entire database as a whole.

41
00:01:47.007 --> 00:01:51.002
Now you can store one piece of data in a separate database

42
00:01:51.002 --> 00:01:53.006
to facilitate this distribution.

43
00:01:53.006 --> 00:01:56.009
For instance, if your customer data is need globally,

44
00:01:56.009 --> 00:01:58.006
but your order data isn't,

45
00:01:58.006 --> 00:02:00.003
then by separating them out and leveraging

46
00:02:00.003 --> 00:02:02.001
the repository pattern,

47
00:02:02.001 --> 00:02:05.003
you can achieve global distribution of one element

48
00:02:05.003 --> 00:02:08.004
while not so much on the other.

49
00:02:08.004 --> 00:02:10.005
Now really to decide which pattern to go with,

50
00:02:10.005 --> 00:02:13.005
you have to understand your constraints.

51
00:02:13.005 --> 00:02:16.008
Now if your application is DB constrained,

52
00:02:16.008 --> 00:02:20.000
the repository pattern can help

53
00:02:20.000 --> 00:02:23.000
because you don't do joins in the database.

54
00:02:23.000 --> 00:02:25.009
So if you're taking a lot of load on your web framework,

55
00:02:25.009 --> 00:02:28.000
but your database becomes the bottleneck,

56
00:02:28.000 --> 00:02:30.007
repository pattern could help.

57
00:02:30.007 --> 00:02:34.001
If your application is horizontally scalable,

58
00:02:34.001 --> 00:02:36.005
the repository pattern really fits in.

59
00:02:36.005 --> 00:02:38.009
But if it's vertically scalable,

60
00:02:38.009 --> 00:02:43.007
you may find yourself better value out of a DAO

61
00:02:43.007 --> 00:02:46.004
if your data is highly normalized.

62
00:02:46.004 --> 00:02:49.003
So if you've gone through the time in your relational model

63
00:02:49.003 --> 00:02:51.007
to get everything to third normal form,

64
00:02:51.007 --> 00:02:56.000
DAOs become very valuable because those joins are simple.

65
00:02:56.000 --> 00:02:58.000
And because those joins are simple,

66
00:02:58.000 --> 00:03:00.009
you should see some results of letting the database

67
00:03:00.009 --> 00:03:03.004
do the processing.

68
00:03:03.004 --> 00:03:07.004
And do you need atomic transactions that cross data tables?

69
00:03:07.004 --> 00:03:08.008
if you need atomic transactions,

70
00:03:08.008 --> 00:03:10.008
the repository pattern is out.

71
00:03:10.008 --> 00:03:13.007
It's very, very hard if not impossible

72
00:03:13.007 --> 00:03:17.007
with most modern frameworks to do truly atomic operations

73
00:03:17.007 --> 00:03:20.003
without bringing in extra transaction managers

74
00:03:20.003 --> 00:03:22.003
to handle cross table design,

75
00:03:22.003 --> 00:03:24.008
and then you can really get into trouble still.

76
00:03:24.008 --> 00:03:26.003
It's often easier

77
00:03:26.003 --> 00:03:28.006
when you're dealing with atomic transactions

78
00:03:28.006 --> 00:03:30.001
to just leverage the database.

79
00:03:30.001 --> 00:03:33.005
Now it's not impossible to do it in repository pattern

80
00:03:33.005 --> 00:03:35.003
and I've done it many times.

81
00:03:35.003 --> 00:03:39.005
I just find it myself significantly easier in a DAO world

82
00:03:39.005 --> 00:03:43.002
when you have atomic transactions across data tables.

83
00:03:43.002 --> 00:03:45.009
So the DAO pattern, the repository pattern,

84
00:03:45.009 --> 00:03:48.003
either way will work in modern systems.

85
00:03:48.003 --> 00:03:51.002
It's really where do you want to put your processing.

86
00:03:51.002 --> 00:03:54.006
A lot of times developers that don't know SQL very well

87
00:03:54.006 --> 00:03:57.006
find immediate value out of the repository pattern

88
00:03:57.006 --> 00:04:00.001
because they only needed a simple crud operations

89
00:04:00.001 --> 00:04:02.001
without any joins.

90
00:04:02.001 --> 00:04:05.005
However, database developers and people who have focused

91
00:04:05.005 --> 00:04:07.004
a lot of time on databases

92
00:04:07.004 --> 00:04:10.000
may find that leveraging indexes

93
00:04:10.000 --> 00:04:12.005
and leveraging functionality in the database

94
00:04:12.005 --> 00:04:16.000
can actually improve performance by using DAOs.

95
00:04:16.000 --> 00:04:17.008
So it's really up to your use case

96
00:04:17.008 --> 00:04:20.000
but you really have to focus on which of those

97
00:04:20.000 --> 00:04:23.000
adds the most value and go from there.

