WEBVTT
1
00:00:00.005 --> 00:00:02.001
- [Instructor] Transactions are a big part

2
00:00:02.001 --> 00:00:06.009
of the reason why people use RDBMS systems.

3
00:00:06.009 --> 00:00:08.004
Now, we're not going to dig too deep

4
00:00:08.004 --> 00:00:10.003
into transaction management,

5
00:00:10.003 --> 00:00:13.002
but I do want to help you understand what a transaction is,

6
00:00:13.002 --> 00:00:14.004
and when we would use it,

7
00:00:14.004 --> 00:00:17.005
and then sort of how we're going to play with them.

8
00:00:17.005 --> 00:00:19.009
Now, first of all, what is a transaction?

9
00:00:19.009 --> 00:00:24.001
Now, at its simplest form, a transaction is a unit of work.

10
00:00:24.001 --> 00:00:26.000
So think about a bank transfer.

11
00:00:26.000 --> 00:00:28.001
You have to withdraw from one account

12
00:00:28.001 --> 00:00:30.003
and deposit it into another.

13
00:00:30.003 --> 00:00:31.006
And all of that has to happen

14
00:00:31.006 --> 00:00:34.007
in one exact execution of time.

15
00:00:34.007 --> 00:00:37.004
If you do the withdrawal without the deposit,

16
00:00:37.004 --> 00:00:39.004
the customer is out of money.

17
00:00:39.004 --> 00:00:41.009
If you do the deposit without the withdrawal,

18
00:00:41.009 --> 00:00:43.002
you're out of money.

19
00:00:43.002 --> 00:00:44.008
Either way, that's not good.

20
00:00:44.008 --> 00:00:49.000
So that simple unit of work is a transaction.

21
00:00:49.000 --> 00:00:51.007
Now, the rule is that all work in that transaction

22
00:00:51.007 --> 00:00:55.004
is either completed 100% or it fails 100%.

23
00:00:55.004 --> 00:00:58.002
There is no in-between.

24
00:00:58.002 --> 00:00:59.008
Now, transactions themselves are very,

25
00:00:59.008 --> 00:01:03.004
very powerful concepts that must be managed,

26
00:01:03.004 --> 00:01:05.008
but you as the developer have to manage

27
00:01:05.008 --> 00:01:08.004
those transaction boundaries.

28
00:01:08.004 --> 00:01:09.008
Now, in a distributed system,

29
00:01:09.008 --> 00:01:12.002
transactions break down very quickly.

30
00:01:12.002 --> 00:01:15.000
And I'm not going to go into the concept

31
00:01:15.000 --> 00:01:18.001
of distributed system transactions because quite frankly,

32
00:01:18.001 --> 00:01:20.001
I feel that they don't work very well.

33
00:01:20.001 --> 00:01:22.005
and they bog down your application.

34
00:01:22.005 --> 00:01:24.001
In a distributed system,

35
00:01:24.001 --> 00:01:26.007
RDBMS just is not a good enough choice.

36
00:01:26.007 --> 00:01:28.006
And transaction management becomes really,

37
00:01:28.006 --> 00:01:30.009
really painful if not impossible.

38
00:01:30.009 --> 00:01:35.000
So we're going to leave that out of our conversation.

39
00:01:35.000 --> 00:01:36.006
Now, there's really two states

40
00:01:36.006 --> 00:01:38.005
as I told you in a transaction.

41
00:01:38.005 --> 00:01:41.006
Either it completes all the way or it fails.

42
00:01:41.006 --> 00:01:44.008
So when it completes, we do what is called a commit.

43
00:01:44.008 --> 00:01:49.004
And a commit tells the system that the transaction is done.

44
00:01:49.004 --> 00:01:52.009
And that all of the work can now be committed to disk.

45
00:01:52.009 --> 00:01:56.000
And often, this data in this interim state

46
00:01:56.000 --> 00:01:59.006
is stored in a swap disk or some sort of a swap file

47
00:01:59.006 --> 00:02:01.005
so that we know what the data will look like

48
00:02:01.005 --> 00:02:04.001
in the database before we actually write it.

49
00:02:04.001 --> 00:02:07.004
And the commit is the operation of writing that database.

50
00:02:07.004 --> 00:02:10.005
Now, I've overly simplified this whole process

51
00:02:10.005 --> 00:02:12.007
because I'm trying to keep it simple

52
00:02:12.007 --> 00:02:15.000
and easy for the average person to understand.

53
00:02:15.000 --> 00:02:18.001
If you really get how swap works and how commits work,

54
00:02:18.001 --> 00:02:20.006
this is an oversimplification on purpose.

55
00:02:20.006 --> 00:02:22.007
Please take that into consideration.

56
00:02:22.007 --> 00:02:26.005
This is just to give you an idea of what a commit does,

57
00:02:26.005 --> 00:02:27.003
pure and simple.

58
00:02:27.003 --> 00:02:29.007
There is no database that is that easy

59
00:02:29.007 --> 00:02:33.001
on how it does commits that I know of.

60
00:02:33.001 --> 00:02:34.006
Now, in the failure case,

61
00:02:34.006 --> 00:02:37.003
so we talked about the commits and that success case.

62
00:02:37.003 --> 00:02:40.008
In the failure case, we have what's called a rollback.

63
00:02:40.008 --> 00:02:43.004
Now, rollback returns the data to the state

64
00:02:43.004 --> 00:02:48.004
it was prior to the transaction starting with a caveat.

65
00:02:48.004 --> 00:02:49.009
And the caveat is this.

66
00:02:49.009 --> 00:02:53.003
If you did not lock the data before you started

67
00:02:53.003 --> 00:02:57.007
your transaction and a another transaction completed,

68
00:02:57.007 --> 00:03:00.009
that data is not lost, and it should not be lost.

69
00:03:00.009 --> 00:03:04.000
Only the current transaction data is lost.

70
00:03:04.000 --> 00:03:05.008
If you've got some dirty reads,

71
00:03:05.008 --> 00:03:09.001
and some dirty writes going on there, and you lose data,

72
00:03:09.001 --> 00:03:10.005
that's either a problem with the database

73
00:03:10.005 --> 00:03:13.000
or how you've configured your transactions.

74
00:03:13.000 --> 00:03:15.009
You should not lose data when the transaction rolls back

75
00:03:15.009 --> 00:03:19.007
outside the data of the current transaction.

76
00:03:19.007 --> 00:03:21.007
All uncommitted data is "purged."

77
00:03:21.007 --> 00:03:24.000
And I've put "purged" in quotes there on purpose

78
00:03:24.000 --> 00:03:27.008
because it does still exist in some system and some log.

79
00:03:27.008 --> 00:03:31.002
But from the perspective of the database, it is gone.

80
00:03:31.002 --> 00:03:33.004
Now, often, this is part of a failure scenario,

81
00:03:33.004 --> 00:03:35.005
but it's not always a failure.

82
00:03:35.005 --> 00:03:39.005
You can have scenarios that you control and you don't fail,

83
00:03:39.005 --> 00:03:42.005
but you want to roll back if you get to a certain scenario.

84
00:03:42.005 --> 00:03:45.001
So though, most of the time, we implement rollbacks

85
00:03:45.001 --> 00:03:47.005
as part of an exception handling routine,

86
00:03:47.005 --> 00:03:51.008
you may have a unique case where you have to control

87
00:03:51.008 --> 00:03:54.005
this situation rolls back the transaction.

88
00:03:54.005 --> 00:03:58.004
So it's a powerful tool to use in transaction management

89
00:03:58.004 --> 00:04:01.002
when you actually know when you want to start the commit

90
00:04:01.002 --> 00:04:03.004
or when you want to start to rollback

91
00:04:03.004 --> 00:04:06.005
outside of error handling.

92
00:04:06.005 --> 00:04:08.006
Now, I do want to talk about this third state.

93
00:04:08.006 --> 00:04:10.004
And this third state is what we've been leveraging

94
00:04:10.004 --> 00:04:13.000
up to this point in this course.

95
00:04:13.000 --> 00:04:14.001
And that's autocommit.

96
00:04:14.001 --> 00:04:19.002
For many databases, this is the default status.

97
00:04:19.002 --> 00:04:20.006
A connection to a database

98
00:04:20.006 --> 00:04:24.006
that leverages autocommit is not transactional.

99
00:04:24.006 --> 00:04:27.009
So though you may have a body of work that gets done,

100
00:04:27.009 --> 00:04:31.001
there is no guarantee that there's any atomic operation

101
00:04:31.001 --> 00:04:34.003
that occurs other than the single write itself

102
00:04:34.003 --> 00:04:36.003
is an atomic unit of work.

103
00:04:36.003 --> 00:04:39.001
But if you have five writes and you have autocommit on,

104
00:04:39.001 --> 00:04:41.009
those are not happening atomically.

105
00:04:41.009 --> 00:04:45.007
Data is immediately committed when autocommit is turned on,

106
00:04:45.007 --> 00:04:47.006
immediately committed.

107
00:04:47.006 --> 00:04:50.002
There is no concept of atomic transactions.

108
00:04:50.002 --> 00:04:52.009
So if I want to have five writes happen

109
00:04:52.009 --> 00:04:54.003
and it all happened at the same time,

110
00:04:54.003 --> 00:04:57.004
it just doesn't happen with autocommit.

111
00:04:57.004 --> 00:05:00.007
Now, while you're doing the learning, autocommit is great.

112
00:05:00.007 --> 00:05:03.001
But when you are doing a real use case,

113
00:05:03.001 --> 00:05:07.001
real work in the industry, most of the time, in fact,

114
00:05:07.001 --> 00:05:10.004
I would argue to say 99.99% of the time,

115
00:05:10.004 --> 00:05:13.000
you do not want to leverage autocommit.

116
00:05:13.000 --> 00:05:14.007
If you are using an RDBMS,

117
00:05:14.007 --> 00:05:18.002
you are using it for atomic transactions.

118
00:05:18.002 --> 00:05:19.008
Autocommit is the opposite of that.

119
00:05:19.008 --> 00:05:24.003
You don't need autocommit when you're managing transactions.

120
00:05:24.003 --> 00:05:28.001
So if you're using an RDBMS and you're using autocommit,

121
00:05:28.001 --> 00:05:29.007
you're probably using the wrong database

122
00:05:29.007 --> 00:05:32.003
or you don't really understand transaction management.

123
00:05:32.003 --> 00:05:36.001
That's okay. This is a great opportunity to go learn that.

124
00:05:36.001 --> 00:05:40.006
Now, often, either the driver or a setting

125
00:05:40.006 --> 00:05:45.001
on the connection is where we set the transactional.

126
00:05:45.001 --> 00:05:49.002
So the driver or the connection itself, not both,

127
00:05:49.002 --> 00:05:52.005
although you can, but usually we set autocommit either

128
00:05:52.005 --> 00:05:55.006
when we make the connection to the database, we turn it off.

129
00:05:55.006 --> 00:05:58.002
Or when we're actually given a handle to the connection

130
00:05:58.002 --> 00:05:59.009
and we want to start doing work.

131
00:05:59.009 --> 00:06:02.003
The first thing we may do is turn off autocommit

132
00:06:02.003 --> 00:06:07.001
in order to make sure we have a transaction boundary set up.

133
00:06:07.001 --> 00:06:09.001
So now that we've kind of talked about rollbacks,

134
00:06:09.001 --> 00:06:10.008
and commits, and transactions,

135
00:06:10.008 --> 00:06:14.007
let's go show you in code how simple it is to write one.

136
00:06:14.007 --> 00:06:17.009
Not how simple it is to create a transactional system,

137
00:06:17.009 --> 00:06:21.000
but to actually write a commit in a rollback block.

