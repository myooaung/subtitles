WEBVTT
1
00:00:00.005 --> 00:00:01.005
- [Instructor] We're going to jump into some more

2
00:00:01.005 --> 00:00:04.003
of the advanced concepts in JDBC

3
00:00:04.003 --> 00:00:08.002
by first of all working with stored procedures.

4
00:00:08.002 --> 00:00:10.000
Now, if you open up the exercise files,

5
00:00:10.000 --> 00:00:13.001
in the SQL scripts, I've modified the README,

6
00:00:13.001 --> 00:00:16.001
and added a new value.

7
00:00:16.001 --> 00:00:17.008
The README now has the steps

8
00:00:17.008 --> 00:00:21.000
to import the stored procedure that I've created

9
00:00:21.000 --> 00:00:24.009
as part of the stored_proc.sql file.

10
00:00:24.009 --> 00:00:27.002
So let's jump into terminal.

11
00:00:27.002 --> 00:00:29.007
And I've loaded this directory up.

12
00:00:29.007 --> 00:00:31.008
I have my database running.

13
00:00:31.008 --> 00:00:36.006
All right, so we we are going to execute psql -h

14
00:00:36.006 --> 00:00:49.007
localhost -U postgres -d hplussport -f stored_proc.sql.

15
00:00:49.007 --> 00:00:51.002
When it prompts for your password,

16
00:00:51.002 --> 00:00:53.007
put in the password of password.

17
00:00:53.007 --> 00:00:55.001
And now it's created the function,

18
00:00:55.001 --> 00:00:58.003
and now it's available for us to use.

19
00:00:58.003 --> 00:01:01.004
Go ahead and close all this down.

20
00:01:01.004 --> 00:01:03.004
And we're going to go into our OrderDAO

21
00:01:03.004 --> 00:01:08.005
that we did during our challenge exercise.

22
00:01:08.005 --> 00:01:11.005
Now, semantically, we created a function

23
00:01:11.005 --> 00:01:13.005
because it returns data.

24
00:01:13.005 --> 00:01:16.005
But functions and stored procedures really are synonymous

25
00:01:16.005 --> 00:01:19.007
in Postgres, so we're going to go ahead and move on.

26
00:01:19.007 --> 00:01:21.009
Now, there are two ways to call this.

27
00:01:21.009 --> 00:01:24.002
One is to create a callable statement,

28
00:01:24.002 --> 00:01:27.002
which in my opinion is much more painful.

29
00:01:27.002 --> 00:01:30.004
The simpler way is to leverage a prepared statement

30
00:01:30.004 --> 00:01:33.006
because the output of our function is a table

31
00:01:33.006 --> 00:01:36.005
and we set that up to be that way on purpose

32
00:01:36.005 --> 00:01:38.008
because it's easier to work with.

33
00:01:38.008 --> 00:01:39.009
So if you're dealing with someone

34
00:01:39.009 --> 00:01:41.007
who's creating your prepared statements

35
00:01:41.007 --> 00:01:43.006
and they're outputting data,

36
00:01:43.006 --> 00:01:46.005
it's often easier to have them output a table

37
00:01:46.005 --> 00:01:50.002
because then you can use simpler constructs in JDBC,

38
00:01:50.002 --> 00:01:53.001
especially in something like Postgres.

39
00:01:53.001 --> 00:01:54.007
So let's go ahead and do what we've done

40
00:01:54.007 --> 00:01:57.006
so many times before.

41
00:01:57.006 --> 00:02:02.006
And we will add a private static final String

42
00:02:02.006 --> 00:02:06.002
called GET_FOR_CUST,

43
00:02:06.002 --> 00:02:11.005
and we will set that equal to SELECT star

44
00:02:11.005 --> 00:02:18.008
FROM get_orders_by_customer,

45
00:02:18.008 --> 00:02:21.004
parenthesis, question mark.

46
00:02:21.004 --> 00:02:22.006
Now, you notice I'm doing two things.

47
00:02:22.006 --> 00:02:23.006
First of all, I'm doing star

48
00:02:23.006 --> 00:02:26.002
and that's because I want the whole table back out.

49
00:02:26.002 --> 00:02:27.009
I don't like to do that a lot of times

50
00:02:27.009 --> 00:02:31.001
with raw SQL but when I'm calling a stored procedure

51
00:02:31.001 --> 00:02:35.000
or a function, I have little issue doing a select star

52
00:02:35.000 --> 00:02:37.001
because it allows me to get all of the data out

53
00:02:37.001 --> 00:02:41.005
that I know I've already defined in my stored procedure.

54
00:02:41.005 --> 00:02:44.009
So now let's go ahead and create a method to handle this.

55
00:02:44.009 --> 00:02:47.000
So at the bottom of our class,

56
00:02:47.000 --> 00:02:49.008
we will create a method

57
00:02:49.008 --> 00:02:53.009
that returns a list of orders

58
00:02:53.009 --> 00:02:58.004
called getOrdersForCustomer,

59
00:02:58.004 --> 00:03:03.005
and we will pass it the customerId.

60
00:03:03.005 --> 00:03:11.003
And we will create an Order list.

61
00:03:11.003 --> 00:03:15.004
And now we are going to do our try.

62
00:03:15.004 --> 00:03:23.002
So we'll create a PreparedStatement.

63
00:03:23.002 --> 00:03:28.000
And we will pass it GET_FOR_CUST.

64
00:03:28.000 --> 00:03:33.006
And now we need to put in our catch block.

65
00:03:33.006 --> 00:03:37.005
Okay, so now we can actually go and execute our method.

66
00:03:37.005 --> 00:03:38.007
Now, this time my iteration

67
00:03:38.007 --> 00:03:39.009
is going to be a little bit different

68
00:03:39.009 --> 00:03:42.003
because of the data I'm dealing with.

69
00:03:42.003 --> 00:03:44.000
But we're going to start very much the same

70
00:03:44.000 --> 00:03:46.001
that we did on the getById.

71
00:03:46.001 --> 00:03:47.009
So we'll do our statement.

72
00:03:47.009 --> 00:03:49.006
That's setLong.

73
00:03:49.006 --> 00:03:53.007
Value of one and it'll be our customerId.

74
00:03:53.007 --> 00:04:00.000
And now we will create a ResultSet

75
00:04:00.000 --> 00:04:05.001
equal to statement.executeQuery.

76
00:04:05.001 --> 00:04:08.007
Now I'm going to set my orderId equal to zero,

77
00:04:08.007 --> 00:04:11.003
and I'm going to create an order handle

78
00:04:11.003 --> 00:04:13.006
but set it equal to null.

79
00:04:13.006 --> 00:04:18.004
Now I can iterate over my resultSet.

80
00:04:18.004 --> 00:04:19.006
Now, the first thing that I'm going to do

81
00:04:19.006 --> 00:04:22.003
is I'm going to create a localOrderId.

82
00:04:22.003 --> 00:04:24.001
So this will be the tuple that comes back

83
00:04:24.001 --> 00:04:26.007
from the resultSet.

84
00:04:26.007 --> 00:04:30.006
So I'll set it equal to resultSet.getLong,

85
00:04:30.006 --> 00:04:33.001
and this is the fourth value.

86
00:04:33.001 --> 00:04:34.002
Now, I know it's the fourth

87
00:04:34.002 --> 00:04:38.000
because I can pull up that stored procedure

88
00:04:38.000 --> 00:04:40.003
and look at the order of my tables.

89
00:04:40.003 --> 00:04:43.009
And on row six, which is the fourth return,

90
00:04:43.009 --> 00:04:46.009
that's the order_id.

91
00:04:46.009 --> 00:04:49.008
So we'll jump back into code here.

92
00:04:49.008 --> 00:04:53.007
And what I'm going to do is I'm going to say if orderId

93
00:04:53.007 --> 00:04:58.002
does not equal localOrderId,

94
00:04:58.002 --> 00:05:02.000
so this is how I'm going to know that I have a new order.

95
00:05:02.000 --> 00:05:04.007
So now I'm going to process all the order details

96
00:05:04.007 --> 00:05:07.004
and I'm going to start by setting my order

97
00:05:07.004 --> 00:05:11.009
equal to a new Order.

98
00:05:11.009 --> 00:05:13.008
And then I'm going to process the order details,

99
00:05:13.008 --> 00:05:16.004
and then I'll do the line details as I've done before,

100
00:05:16.004 --> 00:05:18.007
but this way I get a new order every time.

101
00:05:18.007 --> 00:05:21.002
So let's go ahead and go through the rest of our steps here

102
00:05:21.002 --> 00:05:23.009
but there's one other thing before we do that.

103
00:05:23.009 --> 00:05:29.004
Immediately, I want to add this order to my parent array.

104
00:05:29.004 --> 00:05:31.008
That way I know that I've got the handle

105
00:05:31.008 --> 00:05:34.001
but up above, it's added to the array

106
00:05:34.001 --> 00:05:36.008
so I don't have to deal with it after the fact

107
00:05:36.008 --> 00:05:39.002
so that I don't have to worry about adding it to the array

108
00:05:39.002 --> 00:05:41.008
right before I create a new instance of order

109
00:05:41.008 --> 00:05:44.003
when my order ID changes.

110
00:05:44.003 --> 00:05:47.000
So this is just a little bit of pointer manipulation

111
00:05:47.000 --> 00:05:47.009
that I'm doing.

112
00:05:47.009 --> 00:05:49.005
Now we're going to go ahead and populate the rest

113
00:05:49.005 --> 00:05:53.009
of this object.

114
00:05:53.009 --> 00:05:57.001
So now that I populated all of my order details,

115
00:05:57.001 --> 00:06:02.006
I'm going to create a OrderLine array.

116
00:06:02.006 --> 00:06:06.001
And I'm going to go ahead and set that on my order itself.

117
00:06:06.001 --> 00:06:08.003
Again, I'm going to use a little bit of pointer manipulation

118
00:06:08.003 --> 00:06:10.006
to make sure that I don't have to keep track

119
00:06:10.006 --> 00:06:12.004
of a whole bunch of things,

120
00:06:12.004 --> 00:06:15.009
and move them around right before I create new instances.

121
00:06:15.009 --> 00:06:17.008
So now that we populated the order details,

122
00:06:17.008 --> 00:06:21.000
now we can actually go and do the OrderLine details.

123
00:06:21.000 --> 00:06:22.004
So every time we get to this point,

124
00:06:22.004 --> 00:06:28.001
we know that we need a new OrderLine.

125
00:06:28.001 --> 00:06:30.003
And now we'll populate all of the details

126
00:06:30.003 --> 00:06:34.005
of that Orderline.

127
00:06:34.005 --> 00:06:35.009
All right, so now that we've gone ahead

128
00:06:35.009 --> 00:06:37.009
and populated our OrderLine details,

129
00:06:37.009 --> 00:06:39.000
what we can do now

130
00:06:39.000 --> 00:06:45.007
is do an order.getOrderLines.add and add our orderLine,

131
00:06:45.007 --> 00:06:48.009
so we're using that as a live list,

132
00:06:48.009 --> 00:06:49.009
which again is possible

133
00:06:49.009 --> 00:06:53.001
because of the way pointers work in Java.

134
00:06:53.001 --> 00:06:56.004
Now, at this point, all we need to do

135
00:06:56.004 --> 00:07:02.000
is return our orders themselves.

136
00:07:02.000 --> 00:07:05.007
So now let's jump back into our executor.

137
00:07:05.007 --> 00:07:10.000
And we're going to modify this method just a little bit.

138
00:07:10.000 --> 00:07:11.008
We'll delete those last two lines

139
00:07:11.008 --> 00:07:14.003
and now what I want to do is create a list

140
00:07:14.003 --> 00:07:17.008
of Order objects called orders.

141
00:07:17.008 --> 00:07:22.001
Go ahead and import that list from java.util.

142
00:07:22.001 --> 00:07:26.003
orderDAO.getOrdersForCustomer.

143
00:07:26.003 --> 00:07:29.004
Now, we're going to pass in customer 789,

144
00:07:29.004 --> 00:07:33.002
and there's a reason we're going to use that customer.

145
00:07:33.002 --> 00:07:34.007
And that's because this customer actually

146
00:07:34.007 --> 00:07:36.007
has multiple orders.

147
00:07:36.007 --> 00:07:40.005
So we'll do an orders.forEach.

148
00:07:40.005 --> 00:07:48.006
And we will simply do a System.out::println on that.

149
00:07:48.006 --> 00:07:54.008
And now we can run our method.

150
00:07:54.008 --> 00:07:57.000
And you'll see that this customer actually has

151
00:07:57.000 --> 00:07:58.004
two order IDs.

152
00:07:58.004 --> 00:08:01.006
1009 and 1064.

153
00:08:01.006 --> 00:08:04.002
And if we scroll over,

154
00:08:04.002 --> 00:08:06.002
you'll see that the creation dates are different,

155
00:08:06.002 --> 00:08:09.006
the totals are different, the statuses are different.

156
00:08:09.006 --> 00:08:12.001
And indeed, the order lines are different.

157
00:08:12.001 --> 00:08:15.002
So we've populated through our system multiple orders

158
00:08:15.002 --> 00:08:17.009
using a stored procedure in the database.

159
00:08:17.009 --> 00:08:20.000
Now again, this was a simple case

160
00:08:20.000 --> 00:08:23.000
and it was a relatively easy way to use a function,

161
00:08:23.000 --> 00:08:24.006
and it's not always that easy

162
00:08:24.006 --> 00:08:27.003
but if you can, and you can point this direction,

163
00:08:27.003 --> 00:08:29.003
this is a super convenient way

164
00:08:29.003 --> 00:08:33.000
if you have to use stored procedure to do so in JDBC.

