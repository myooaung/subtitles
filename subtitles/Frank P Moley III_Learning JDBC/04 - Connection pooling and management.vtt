WEBVTT
1
00:00:00.006 --> 00:00:02.008
- [Instructor] The concept of connection pooling

2
00:00:02.008 --> 00:00:04.001
is something that you'll run into

3
00:00:04.001 --> 00:00:06.003
when you're writing systems that actually

4
00:00:06.003 --> 00:00:09.003
receive multiple connections at a given time,

5
00:00:09.003 --> 00:00:12.009
and then connect to the database across multiple threads.

6
00:00:12.009 --> 00:00:15.004
This is very, very common, for instance,

7
00:00:15.004 --> 00:00:17.003
in Java web applications where you have

8
00:00:17.003 --> 00:00:20.004
a single web application that may have multiple connections

9
00:00:20.004 --> 00:00:23.003
to the database, as well as multiple users connecting

10
00:00:23.003 --> 00:00:27.003
to it at the same time, so connection pooling

11
00:00:27.003 --> 00:00:31.003
is a very common data access pattern that allows you

12
00:00:31.003 --> 00:00:35.009
to reuse connections from request to request.

13
00:00:35.009 --> 00:00:37.009
Now, this sort of works as a cache,

14
00:00:37.009 --> 00:00:40.007
so you have a pool, or cache of connections,

15
00:00:40.007 --> 00:00:43.003
and each time you need a connection,

16
00:00:43.003 --> 00:00:46.004
you go to the cache to get it, instead of creating

17
00:00:46.004 --> 00:00:50.006
it yourself and connecting to the database.

18
00:00:50.006 --> 00:00:53.002
Now, often this is managed by a pooling framework

19
00:00:53.002 --> 00:00:55.005
so you don't write the cache itself.

20
00:00:55.005 --> 00:00:57.004
You just reach out to the pooling framework

21
00:00:57.004 --> 00:01:00.004
and say, "Hey, I need a connection, give me one."

22
00:01:00.004 --> 00:01:03.003
And it will create one behind the scenes,

23
00:01:03.003 --> 00:01:06.007
if you don't have one, now, developers do

24
00:01:06.007 --> 00:01:09.008
often configure connection pooling,

25
00:01:09.008 --> 00:01:12.004
but that's beyond the scope of this course,

26
00:01:12.004 --> 00:01:14.000
but it's why I am bringing it up,

27
00:01:14.000 --> 00:01:16.005
so that you understand that it does exist.

28
00:01:16.005 --> 00:01:17.004
And you may need to, you know,

29
00:01:17.004 --> 00:01:18.007
read about it if you're working

30
00:01:18.007 --> 00:01:22.006
with connection pools in your application.

31
00:01:22.006 --> 00:01:25.006
So, why would we want to use connection pooling?

32
00:01:25.006 --> 00:01:29.001
Well, it's very simply a time-savings mechanism.

33
00:01:29.001 --> 00:01:32.000
The life cycle to create a connection

34
00:01:32.000 --> 00:01:36.001
to the database is very resource intensive.

35
00:01:36.001 --> 00:01:39.009
It's also a very costly operation as far as time goes.

36
00:01:39.009 --> 00:01:42.000
So, not only does it steal your resources,

37
00:01:42.000 --> 00:01:45.003
it steals your time and, in most instances,

38
00:01:45.003 --> 00:01:47.008
the cost of keeping connections open

39
00:01:47.008 --> 00:01:51.000
is much cheaper than actually creating new ones.

40
00:01:51.000 --> 00:01:52.001
And this is really, really true

41
00:01:52.001 --> 00:01:56.001
in high activity database applications

42
00:01:56.001 --> 00:01:58.009
that are constantly going back and forth to the database,

43
00:01:58.009 --> 00:02:01.001
especially things using repository patterns,

44
00:02:01.001 --> 00:02:04.007
where it's a bunch of quick hits to the database.

45
00:02:04.007 --> 00:02:07.009
So, a typical connection creation routine kind

46
00:02:07.009 --> 00:02:10.004
of follows this pattern, so the application makes

47
00:02:10.004 --> 00:02:13.006
a request which, ultimately, goes to the JVM.

48
00:02:13.006 --> 00:02:17.001
The JVM goes to the OS to get a TCP socket.

49
00:02:17.001 --> 00:02:20.006
It reaches out to the server and then does a TCP handshake,

50
00:02:20.006 --> 00:02:22.007
which is a two way connection between the client

51
00:02:22.007 --> 00:02:25.005
and the server, and they decide on which port

52
00:02:25.005 --> 00:02:26.009
they're actually going to communicate on,

53
00:02:26.009 --> 00:02:29.004
opening up yet, another socket.

54
00:02:29.004 --> 00:02:31.001
Now, once you get back to the client side,

55
00:02:31.001 --> 00:02:33.003
the OS has to hand that to the JVM.

56
00:02:33.003 --> 00:02:35.003
And then, the JVM to the client driver.

57
00:02:35.003 --> 00:02:38.004
So, all of this operation takes time,

58
00:02:38.004 --> 00:02:40.004
but it is very efficient when you look at it

59
00:02:40.004 --> 00:02:42.007
from the perspective of how fast that happens

60
00:02:42.007 --> 00:02:47.007
to a human but, to a computer, it is extremely slow.

61
00:02:47.007 --> 00:02:50.007
Now, when a connection pulling request happens,

62
00:02:50.007 --> 00:02:54.001
the request goes from the application directly to the pool.

63
00:02:54.001 --> 00:02:56.004
The pool will hand a connection handle

64
00:02:56.004 --> 00:03:00.003
to the application, and if none exists in the pool,

65
00:03:00.003 --> 00:03:03.001
or if the pool has run out of connections

66
00:03:03.001 --> 00:03:05.005
it will create them for you following

67
00:03:05.005 --> 00:03:07.006
the logic that we previously saw,

68
00:03:07.006 --> 00:03:09.008
but it can background some of that tasks

69
00:03:09.008 --> 00:03:12.005
because usually it doesn't create one connection,

70
00:03:12.005 --> 00:03:14.007
it creates a block of them at once.

71
00:03:14.007 --> 00:03:17.001
And then, you control how many total connections

72
00:03:17.001 --> 00:03:19.000
to have live, how many total have,

73
00:03:19.000 --> 00:03:22.006
and how often to recycle them.

74
00:03:22.006 --> 00:03:24.008
Now, I do want to point out that there's a couple

75
00:03:24.008 --> 00:03:29.003
of very common pooling libraries that you may run across.

76
00:03:29.003 --> 00:03:30.008
So, there's the Apache Commons

77
00:03:30.008 --> 00:03:34.003
DB Connection Pooling, or DBCP.

78
00:03:34.003 --> 00:03:36.007
There's also C3PO, which is my favorite,

79
00:03:36.007 --> 00:03:38.004
not only because of Star Wars,

80
00:03:38.004 --> 00:03:41.002
but because it's the one that I've used the most common.

81
00:03:41.002 --> 00:03:43.004
And then, there's HikariCP.

82
00:03:43.004 --> 00:03:45.007
Now, all three of these manage connection poolings

83
00:03:45.007 --> 00:03:48.000
in a very similar fashion and, again,

84
00:03:48.000 --> 00:03:50.001
it's beyond the scope of this course,

85
00:03:50.001 --> 00:03:52.000
but if you're really interested in 'em

86
00:03:52.000 --> 00:03:53.008
there's some great information you can read

87
00:03:53.008 --> 00:03:55.008
on all of their prospective sites

88
00:03:55.008 --> 00:03:58.006
on how pooling works and how to tune pooling

89
00:03:58.006 --> 00:04:02.000
to be most optimal for your application needs.

