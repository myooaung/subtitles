WEBVTT
1
00:00:00.005 --> 00:00:01.003
- [Instructor] The final thing

2
00:00:01.003 --> 00:00:02.005
that I really want to talk about

3
00:00:02.005 --> 00:00:05.004
before we jump into actually running a lot of code here

4
00:00:05.004 --> 00:00:09.006
is the concept of CRUD when dealing with databases.

5
00:00:09.006 --> 00:00:12.006
Now CRUD is an acronym for the four main functions

6
00:00:12.006 --> 00:00:15.004
that you do to data in a database:

7
00:00:15.004 --> 00:00:18.009
create, read, update, delete.

8
00:00:18.009 --> 00:00:19.007
Now this is all part

9
00:00:19.007 --> 00:00:23.001
of the data manipulation language, or DML.

10
00:00:23.001 --> 00:00:26.002
Most SQL statements, at least most of them

11
00:00:26.002 --> 00:00:28.009
that a developer will operate with on a regular basis,

12
00:00:28.009 --> 00:00:34.000
are extensions of these four main functions.

13
00:00:34.000 --> 00:00:36.001
Now, I have a few thoughts here

14
00:00:36.001 --> 00:00:39.001
about how to get really good at writing SQL,

15
00:00:39.001 --> 00:00:42.003
especially when you're dealing with CRUD operations.

16
00:00:42.003 --> 00:00:46.005
First and foremost is to learn SQL itself.

17
00:00:46.005 --> 00:00:50.006
A developer needs to understand how SQL works,

18
00:00:50.006 --> 00:00:54.001
how it operates, and how to optimize it.

19
00:00:54.001 --> 00:00:56.001
I do also believe that it's important

20
00:00:56.001 --> 00:00:58.009
at least at the base level for developers

21
00:00:58.009 --> 00:01:02.000
to learn a little bit about data theory.

22
00:01:02.000 --> 00:01:06.000
And more important than that is to learn relational algebra.

23
00:01:06.000 --> 00:01:08.002
Learning this allows you to understand

24
00:01:08.002 --> 00:01:11.004
how complex join patterns can actually

25
00:01:11.004 --> 00:01:15.000
cause data anomalies with what is returned.

26
00:01:15.000 --> 00:01:19.006
In addition, these complex join paths allow you to focus on

27
00:01:19.006 --> 00:01:23.003
what is actually slowing down your data operation.

28
00:01:23.003 --> 00:01:26.005
We always hear about striving for third normal form,

29
00:01:26.005 --> 00:01:29.000
and in reality, third normal form is great

30
00:01:29.000 --> 00:01:31.004
until you actually need to grab a whole bunch

31
00:01:31.004 --> 00:01:34.002
of data across a lot of data tables.

32
00:01:34.002 --> 00:01:37.002
I've actually seen higher performance systems

33
00:01:37.002 --> 00:01:39.006
with completely de-normalized data

34
00:01:39.006 --> 00:01:41.008
when you're dealing with things like printing,

35
00:01:41.008 --> 00:01:45.001
especially printing operations at high volume things

36
00:01:45.001 --> 00:01:49.003
like pharmacies and other healthcare situations.

37
00:01:49.003 --> 00:01:54.000
I also encourage you as a developer to understand indices.

38
00:01:54.000 --> 00:01:57.009
Database indexes are what really allow you

39
00:01:57.009 --> 00:02:01.008
to manipulate how rapidly you can get your data.

40
00:02:01.008 --> 00:02:03.002
And if you understand that

41
00:02:03.002 --> 00:02:06.000
and can communicate that to your DBAs,

42
00:02:06.000 --> 00:02:09.004
sometimes you can come up with more optimal solutions

43
00:02:09.004 --> 00:02:12.009
in dealing with databases.

44
00:02:12.009 --> 00:02:15.002
Now, that first operation creating data.

45
00:02:15.002 --> 00:02:18.007
This is typically seen in the form of an insert statement.

46
00:02:18.007 --> 00:02:21.006
Now it's important to know that any database constraints

47
00:02:21.006 --> 00:02:25.007
that are put on your schema must be honored when inserting.

48
00:02:25.007 --> 00:02:28.009
If you require a customer ID when you insert an order,

49
00:02:28.009 --> 00:02:31.000
that customer ID must be there

50
00:02:31.000 --> 00:02:34.003
and the customer record itself must also exist,

51
00:02:34.003 --> 00:02:37.008
assuming that you have a foreign key constraint.

52
00:02:37.008 --> 00:02:41.000
Isolation levels can impact results.

53
00:02:41.000 --> 00:02:42.006
Sometimes you will insert data,

54
00:02:42.006 --> 00:02:45.006
and if your isolation level isn't set up correctly,

55
00:02:45.006 --> 00:02:47.007
you can insert data on top of it

56
00:02:47.007 --> 00:02:51.007
because it hasn't actually been committed to the database.

57
00:02:51.007 --> 00:02:55.000
Insert statements are not idempotent operations

58
00:02:55.000 --> 00:02:58.003
in most situations.

59
00:02:58.003 --> 00:03:00.000
Now reading data.

60
00:03:00.000 --> 00:03:02.005
This is often seen in the form of a select statement.

61
00:03:02.005 --> 00:03:04.003
It can be a simple table read,

62
00:03:04.003 --> 00:03:08.005
or it can be a multi table read using complex join paths.

63
00:03:08.005 --> 00:03:13.005
Constraints are not important until you do join operations.

64
00:03:13.005 --> 00:03:17.001
Once again, isolation levels can impact consistency

65
00:03:17.001 --> 00:03:19.005
when you read data that hasn't been committed,

66
00:03:19.005 --> 00:03:21.009
or you can get dirty reads.

67
00:03:21.009 --> 00:03:24.002
Reads are always idempotent,

68
00:03:24.002 --> 00:03:26.008
and select for update is something

69
00:03:26.008 --> 00:03:27.008
that you need to understand

70
00:03:27.008 --> 00:03:30.002
when you're doing high throughput systems

71
00:03:30.002 --> 00:03:33.001
where you actually need to lock tables for an update,

72
00:03:33.001 --> 00:03:37.000
things like bank transactions or medical record transactions

73
00:03:37.000 --> 00:03:38.005
that are very critical to make sure

74
00:03:38.005 --> 00:03:41.000
that you lock that record.

75
00:03:41.000 --> 00:03:42.006
Now updating data.

76
00:03:42.006 --> 00:03:45.006
This is often sitting in the form of an update statement.

77
00:03:45.006 --> 00:03:48.006
Constraints can cause update anomalies,

78
00:03:48.006 --> 00:03:53.001
and often you try to remove those in your database design.

79
00:03:53.001 --> 00:03:56.002
Isolation levels as always can impact results

80
00:03:56.002 --> 00:03:58.001
of your update statements.

81
00:03:58.001 --> 00:04:00.007
And an update should be idempotent

82
00:04:00.007 --> 00:04:02.009
when it's executed over and over again,

83
00:04:02.009 --> 00:04:05.003
because the update statement itself contains

84
00:04:05.003 --> 00:04:09.000
the new tuple structure.

85
00:04:09.000 --> 00:04:11.008
And finally we're going to talk about the delete operations.

86
00:04:11.008 --> 00:04:14.006
And this is often seen in the form of a delete statement.

87
00:04:14.006 --> 00:04:18.004
Constraints can cause errors or update anomalies,

88
00:04:18.004 --> 00:04:21.003
so they need to be managed and understood.

89
00:04:21.003 --> 00:04:24.008
As we've seen before isolation levels can impact deletes.

90
00:04:24.008 --> 00:04:27.002
You can get a dirty read that you try to delete

91
00:04:27.002 --> 00:04:28.003
and the delete doesn't work

92
00:04:28.003 --> 00:04:31.008
because the data actually hasn't been committed from swap.

93
00:04:31.008 --> 00:04:35.007
And after the first execution, deletes are idempotent.

94
00:04:35.007 --> 00:04:37.004
Obviously the first execution is not

95
00:04:37.004 --> 00:04:39.003
because it removes the data.

96
00:04:39.003 --> 00:04:40.006
This is all we're going to talk about

97
00:04:40.006 --> 00:04:43.005
with credit operations from the high-level perspective.

98
00:04:43.005 --> 00:04:45.008
We're going to jump into code now and actually start

99
00:04:45.008 --> 00:04:49.000
executing these operations in our database.

