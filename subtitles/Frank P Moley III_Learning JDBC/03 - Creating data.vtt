WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Instructor] Now we're going to actually jump into code again

2
00:00:02.005 --> 00:00:06.003
and create some data in our database.

3
00:00:06.003 --> 00:00:07.008
Okay, so the first thing I'd like you to do

4
00:00:07.008 --> 00:00:11.005
is to open up src, main, java.

5
00:00:11.005 --> 00:00:14.000
And you'll notice that I've put a new folder in here

6
00:00:14.000 --> 00:00:16.004
called util, and I want to kind of walk through some

7
00:00:16.004 --> 00:00:18.009
of these objects that I've created.

8
00:00:18.009 --> 00:00:22.009
So the first is an abstract class called DataAccessObject.

9
00:00:22.009 --> 00:00:26.004
And it's going to extend a data transfer object

10
00:00:26.004 --> 00:00:28.004
to the generics interface.

11
00:00:28.004 --> 00:00:30.001
Now, there's a few things here that I've added

12
00:00:30.001 --> 00:00:31.002
to the beginning.

13
00:00:31.002 --> 00:00:33.005
I've given us a SELECT statement from LAST_VAL

14
00:00:33.005 --> 00:00:36.001
and we'll talk a little bit about what that's for later

15
00:00:36.001 --> 00:00:38.001
but Postgres uses sequences

16
00:00:38.001 --> 00:00:41.002
much the same way that Oracle uses sequences

17
00:00:41.002 --> 00:00:45.006
to give you incrementing values on your unique primary keys.

18
00:00:45.006 --> 00:00:48.007
So this is how I'm going to actually go get the value

19
00:00:48.007 --> 00:00:50.002
of the sequence when I update it.

20
00:00:50.002 --> 00:00:53.006
But again, we'll talk a lot more about that later.

21
00:00:53.006 --> 00:00:55.008
I've also defined our customer sequence name,

22
00:00:55.008 --> 00:00:58.002
and this can come from the SQL files

23
00:00:58.002 --> 00:01:01.004
that you originally imported into your database.

24
00:01:01.004 --> 00:01:03.003
The real meat and potatoes comes down below

25
00:01:03.003 --> 00:01:05.003
as I look at our constructor

26
00:01:05.003 --> 00:01:06.007
where we take a connection in

27
00:01:06.007 --> 00:01:09.003
and we're going to hold a handle to that connection

28
00:01:09.003 --> 00:01:11.005
in our DataAccessObject.

29
00:01:11.005 --> 00:01:13.008
We've also got several abstract methods,

30
00:01:13.008 --> 00:01:16.000
and these are things that you might expect

31
00:01:16.000 --> 00:01:18.000
to find in a DAO.

32
00:01:18.000 --> 00:01:21.001
So findById, that's the R or the read.

33
00:01:21.001 --> 00:01:23.008
findAll also goes along with that read

34
00:01:23.008 --> 00:01:26.008
and that gets all of the data from the database.

35
00:01:26.008 --> 00:01:28.002
Then there's the update method,

36
00:01:28.002 --> 00:01:30.007
which relates to the U in CRUD,

37
00:01:30.007 --> 00:01:32.007
the create method or the C,

38
00:01:32.007 --> 00:01:35.002
and then the D, delete.

39
00:01:35.002 --> 00:01:37.003
I've also got a function here predefined for you

40
00:01:37.003 --> 00:01:40.006
on getLastVal, and again, we'll use that later on

41
00:01:40.006 --> 00:01:42.008
but not quite right now.

42
00:01:42.008 --> 00:01:46.001
I've also created a DataTransferObject interface,

43
00:01:46.001 --> 00:01:48.002
and this interface has a single method

44
00:01:48.002 --> 00:01:50.005
and that's getId.

45
00:01:50.005 --> 00:01:52.005
The final class that I created for you

46
00:01:52.005 --> 00:01:55.005
is a customer itself.

47
00:01:55.005 --> 00:01:59.001
Now, the customer is nothing more than a data representation

48
00:01:59.001 --> 00:02:04.002
from our database that implements our DTO interface.

49
00:02:04.002 --> 00:02:07.003
So now we're ready to write a little bit of code.

50
00:02:07.003 --> 00:02:08.005
So what I'd like you to do

51
00:02:08.005 --> 00:02:11.002
is in the base package here,

52
00:02:11.002 --> 00:02:13.006
create a new Java class

53
00:02:13.006 --> 00:02:17.005
and we will call this CustomerDAO.

54
00:02:17.005 --> 00:02:19.007
Go ahead and select OK.

55
00:02:19.007 --> 00:02:22.002
So we're going to take this class,

56
00:02:22.002 --> 00:02:25.005
and we are going to extend

57
00:02:25.005 --> 00:02:29.001
the DataAccessObject abstract class,

58
00:02:29.001 --> 00:02:34.003
and we are going to pass it a generic of Customer.

59
00:02:34.003 --> 00:02:35.002
Now, it's going to tell me

60
00:02:35.002 --> 00:02:37.004
that I need to implement some methods.

61
00:02:37.004 --> 00:02:38.008
So I'm going to pop up a window here

62
00:02:38.008 --> 00:02:40.009
to implement the methods for me.

63
00:02:40.009 --> 00:02:43.008
Every IDE has some generate function.

64
00:02:43.008 --> 00:02:44.007
So I'm going to do use that

65
00:02:44.007 --> 00:02:47.005
and select the implement methods.

66
00:02:47.005 --> 00:02:51.003
I'm going to go ahead and implement all of them.

67
00:02:51.003 --> 00:02:53.006
And you'll notice that it's still having some issues

68
00:02:53.006 --> 00:02:56.003
and that's because I've got to give it a constructor.

69
00:02:56.003 --> 00:02:59.005
So go ahead and generate our constructor.

70
00:02:59.005 --> 00:03:03.000
And now we're good to go.

71
00:03:03.000 --> 00:03:04.007
Okay, so now that we've got the stub out,

72
00:03:04.007 --> 00:03:07.006
now we're ready to actually write some code.

73
00:03:07.006 --> 00:03:08.005
The first thing I'm going to do

74
00:03:08.005 --> 00:03:13.004
is I'm going to add a private static final String

75
00:03:13.004 --> 00:03:16.004
called INSERT, and INSERT

76
00:03:16.004 --> 00:03:18.003
is going to be as you might expect,

77
00:03:18.003 --> 00:03:20.006
our INSERT statement.

78
00:03:20.006 --> 00:03:26.008
So INSERT INTO customer

79
00:03:26.008 --> 00:03:31.007
and we're going to pass it a first_name,

80
00:03:31.007 --> 00:03:37.007
a last_name, an email address,

81
00:03:37.007 --> 00:03:43.001
a phone, an address, a city,

82
00:03:43.001 --> 00:03:46.001
a state, and a zipcode.

83
00:03:46.001 --> 00:03:49.001
And this all comes from the database itself.

84
00:03:49.001 --> 00:03:52.007
And then we are going to send it some values.

85
00:03:52.007 --> 00:03:54.003
Now, with raw JDBC,

86
00:03:54.003 --> 00:03:57.008
you don't really get a lot of fanciness in your values.

87
00:03:57.008 --> 00:03:59.007
And all we can do

88
00:03:59.007 --> 00:04:03.005
is set them equal to question marks.

89
00:04:03.005 --> 00:04:05.007
So each question mark has to match one

90
00:04:05.007 --> 00:04:08.003
of the values that you previously stated.

91
00:04:08.003 --> 00:04:10.007
And in this case, we are going to have first_name,

92
00:04:10.007 --> 00:04:13.009
last_name, email, phone, address, city, state and zip.

93
00:04:13.009 --> 00:04:15.004
That's eight values.

94
00:04:15.004 --> 00:04:20.001
So we need to have eight question marks.

95
00:04:20.001 --> 00:04:24.000
All right, we've got that entered.

96
00:04:24.000 --> 00:04:28.007
So now let's scroll down here to our create method.

97
00:04:28.007 --> 00:04:33.000
And we're going to go ahead and implement this method.

98
00:04:33.000 --> 00:04:35.003
Now, we're going to use a try with resources,

99
00:04:35.003 --> 00:04:37.008
so we're going to do a try

100
00:04:37.008 --> 00:04:42.001
and we are going to create a PreparedStatement.

101
00:04:42.001 --> 00:04:44.009
And the PreparedStatement

102
00:04:44.009 --> 00:04:53.000
is going to be equal to this.connection.prepareStatement.

103
00:04:53.000 --> 00:04:57.001
And we're going to send it our INSERT string.

104
00:04:57.001 --> 00:05:00.005
Go ahead and close that out.

105
00:05:00.005 --> 00:05:01.004
And create our method.

106
00:05:01.004 --> 00:05:04.001
Now, we need to do a little bit of importing here.

107
00:05:04.001 --> 00:05:07.004
So let's import the PreparedStatement.

108
00:05:07.004 --> 00:05:09.009
And you'll notice I've got an unhandled exception,

109
00:05:09.009 --> 00:05:12.008
which is something that we might expect.

110
00:05:12.008 --> 00:05:18.005
So we will do a catch down here on SQLException.

111
00:05:18.005 --> 00:05:21.007
And we will simply do an e.printStackTrace.

112
00:05:21.007 --> 00:05:24.007
And to keep our API relatively pure,

113
00:05:24.007 --> 00:05:28.002
we will throw a new RuntimeException

114
00:05:28.002 --> 00:05:30.000
and pass it that exception if it happens.

115
00:05:30.000 --> 00:05:33.000
That way I don't have to throw it out of my method.

116
00:05:33.000 --> 00:05:36.004
So now we're ready to go implement our statement.

117
00:05:36.004 --> 00:05:38.003
And implementing is actually relatively easy.

118
00:05:38.003 --> 00:05:40.007
We've already passed in the string itself.

119
00:05:40.007 --> 00:05:41.008
So now I just need to go in

120
00:05:41.008 --> 00:05:46.002
and do a statement.setString,

121
00:05:46.002 --> 00:05:48.002
and I pass it the value.

122
00:05:48.002 --> 00:05:49.009
Now, this is a little different.

123
00:05:49.009 --> 00:05:51.004
This is not a zero-based array.

124
00:05:51.004 --> 00:05:52.008
It actually starts with one.

125
00:05:52.008 --> 00:05:55.004
And in all honesty, everything in the SQL namespace

126
00:05:55.004 --> 00:05:58.002
that I'm familiar with is all one-based arrays,

127
00:05:58.002 --> 00:06:00.000
which I know is a little bit strange

128
00:06:00.000 --> 00:06:01.009
but that's what it is.

129
00:06:01.009 --> 00:06:06.003
So we are going to get this from the dto.getFirstName,

130
00:06:06.003 --> 00:06:13.000
and we're just going to continue down through the rest.

131
00:06:13.000 --> 00:06:15.001
Okay, so now that we manually have typed all

132
00:06:15.001 --> 00:06:16.007
of that information in,

133
00:06:16.007 --> 00:06:18.009
we just have one more thing to do.

134
00:06:18.009 --> 00:06:23.007
That is to type statement.execute.

135
00:06:23.007 --> 00:06:29.007
And then for now, we're just going to return null.

136
00:06:29.007 --> 00:06:32.006
At the very end, we've got a original return null.

137
00:06:32.006 --> 00:06:34.007
We'll go ahead and remove that.

138
00:06:34.007 --> 00:06:38.006
So now let's jump to our JDBCExecutor.

139
00:06:38.006 --> 00:06:40.003
And we're going to do a few changes here

140
00:06:40.003 --> 00:06:42.001
to the way that this works.

141
00:06:42.001 --> 00:06:45.003
And this is just to keep things nice and clean.

142
00:06:45.003 --> 00:06:50.002
So after we create our connection,

143
00:06:50.002 --> 00:06:59.003
we're then going to create a CustomerDAO

144
00:06:59.003 --> 00:07:03.000
with that connection.

145
00:07:03.000 --> 00:07:08.007
And now we're going to create a customer.

146
00:07:08.007 --> 00:07:10.002
And we're going to populate this customer

147
00:07:10.002 --> 00:07:13.000
with some made-up information based on the first president

148
00:07:13.000 --> 00:07:19.002
of the United States.

149
00:07:19.002 --> 00:07:21.001
Okay, I've gone ahead and finished creating all

150
00:07:21.001 --> 00:07:21.009
of that information.

151
00:07:21.009 --> 00:07:24.006
Obviously, you can make up whatever you want here.

152
00:07:24.006 --> 00:07:26.002
But now what we're simply going to do

153
00:07:26.002 --> 00:07:30.007
is call our customerDAO.create

154
00:07:30.007 --> 00:07:32.009
and pass our customer in.

155
00:07:32.009 --> 00:07:34.002
That's all there is to it.

156
00:07:34.002 --> 00:07:37.003
Let's go ahead and execute our method.

157
00:07:37.003 --> 00:07:39.009
Allow everything to compile and run.

158
00:07:39.009 --> 00:07:41.004
And we have a process finished.

159
00:07:41.004 --> 00:07:43.003
We have no idea that it was added,

160
00:07:43.003 --> 00:07:46.001
so let's go to our database.

161
00:07:46.001 --> 00:07:52.005
We're going to type psql -h localhost -U

162
00:07:52.005 --> 00:07:58.003
postgres -d hplussport.

163
00:07:58.003 --> 00:08:01.002
Type in our password of password,

164
00:08:01.002 --> 00:08:04.002
and now we're simply going to type in select star

165
00:08:04.002 --> 00:08:08.002
from customer where last_name

166
00:08:08.002 --> 00:08:14.008
equals single tick, Washington, semicolon,

167
00:08:14.008 --> 00:08:16.003
and you'll see we get two rows.

168
00:08:16.003 --> 00:08:18.008
The second one is the one that we just created

169
00:08:18.008 --> 00:08:21.000
with the sequence starting at 10,000.

