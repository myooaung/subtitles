WEBVTT
1
00:00:00.005 --> 00:00:01.003
- [Instructor] So now that we've put

2
00:00:01.003 --> 00:00:04.000
a stored function into the database and manipulated it,

3
00:00:04.000 --> 00:00:06.000
we're going to take a look at a different way of interacting

4
00:00:06.000 --> 00:00:07.007
with data in the database.

5
00:00:07.007 --> 00:00:10.000
And that's through ordering and limiting.

6
00:00:10.000 --> 00:00:13.009
And while this is not an actual JDBC operation,

7
00:00:13.009 --> 00:00:15.009
we're going to leverage it in the next video

8
00:00:15.009 --> 00:00:18.009
to do JDBC type operations.

9
00:00:18.009 --> 00:00:21.009
So we need to talk about how ordering and limiting works

10
00:00:21.009 --> 00:00:25.001
within SQL itself.

11
00:00:25.001 --> 00:00:28.001
So let's jump over to our IDE and we're going to open up

12
00:00:28.001 --> 00:00:30.000
our learning JDBC project,

13
00:00:30.000 --> 00:00:34.002
source main Java, our base package.

14
00:00:34.002 --> 00:00:37.003
And we're going to start in our customer DAO.

15
00:00:37.003 --> 00:00:39.007
So like we've done so many times before

16
00:00:39.007 --> 00:00:42.006
we're going to put a string at the beginning of our class.

17
00:00:42.006 --> 00:00:48.000
All right. So private static, final string.

18
00:00:48.000 --> 00:00:54.003
And we're going to call this one, get all limit,

19
00:00:54.003 --> 00:01:00.000
and then we'll set it equal to select customer ID.

20
00:01:00.000 --> 00:01:02.006
First name,

21
00:01:02.006 --> 00:01:05.003
last name,

22
00:01:05.003 --> 00:01:07.008
email,

23
00:01:07.008 --> 00:01:10.008
phone,

24
00:01:10.008 --> 00:01:13.005
address,

25
00:01:13.005 --> 00:01:18.000
city, state,

26
00:01:18.000 --> 00:01:22.003
zip code from customer,

27
00:01:22.003 --> 00:01:24.005
order by

28
00:01:24.005 --> 00:01:28.005
last name, comma, first name

29
00:01:28.005 --> 00:01:34.009
with a limit of our question mark and terminate.

30
00:01:34.009 --> 00:01:36.004
And that's the SQL statement

31
00:01:36.004 --> 00:01:38.006
that we're going to leverage.

32
00:01:38.006 --> 00:01:42.004
So let's jump down here

33
00:01:42.004 --> 00:01:45.007
and we will create a new method,

34
00:01:45.007 --> 00:01:49.006
public list of customer, call it,

35
00:01:49.006 --> 00:01:53.000
find all sorted,

36
00:01:53.000 --> 00:01:58.005
and we're going to pass in a value for the limit.

37
00:01:58.005 --> 00:02:00.003
And now, like we've done so many times,

38
00:02:00.003 --> 00:02:02.007
we're going to go ahead and actually execute our statements.

39
00:02:02.007 --> 00:02:05.004
So we will get a list of customers.

40
00:02:05.004 --> 00:02:09.005
We once said that he go to a new array list

41
00:02:09.005 --> 00:02:15.003
and then we will do our try

42
00:02:15.003 --> 00:02:21.006
and then we will catch our SQL exception

43
00:02:21.006 --> 00:02:24.007
and let's just go ahead and important that array list.

44
00:02:24.007 --> 00:02:26.005
Excellent. Okay.

45
00:02:26.005 --> 00:02:29.008
So now we can actually do our method itself.

46
00:02:29.008 --> 00:02:34.004
So we will passing it on our statement, the perimeter,

47
00:02:34.004 --> 00:02:35.009
and as you might guess,

48
00:02:35.009 --> 00:02:39.001
it's going to be the first one and it's going to be limit.

49
00:02:39.001 --> 00:02:41.002
And then we can just map everything back out.

50
00:02:41.002 --> 00:02:47.002
After we do our results set,

51
00:02:47.002 --> 00:02:49.004
I'm going to make this results at mapping a little bit faster.

52
00:02:49.004 --> 00:02:51.007
We're going to scroll up here towards the top,

53
00:02:51.007 --> 00:02:59.005
to our find by ID and we're going to copy this data.

54
00:02:59.005 --> 00:03:06.005
And then in our method, we will create a customer.

55
00:03:06.005 --> 00:03:09.003
We will paste that data,

56
00:03:09.003 --> 00:03:11.005
checking our parameters to make sure that everything

57
00:03:11.005 --> 00:03:15.008
is correct and in order.

58
00:03:15.008 --> 00:03:24.007
And then we will add to our array, our customer.

59
00:03:24.007 --> 00:03:25.008
And then at the end of the method,

60
00:03:25.008 --> 00:03:28.009
we can simply return our customers.

61
00:03:28.009 --> 00:03:34.007
So now let's test this out. Let's open up our JDBC executer.

62
00:03:34.007 --> 00:03:37.004
So we're going to swap out a little bit of code here.

63
00:03:37.004 --> 00:03:48.005
So after we get our connection, we'll do a customer DAO

64
00:03:48.005 --> 00:03:53.007
passing and of course our connection

65
00:03:53.007 --> 00:03:56.004
we will call the find all sorted method

66
00:03:56.004 --> 00:04:01.009
passing at 20 and now we do a for each.

67
00:04:01.009 --> 00:04:07.005
And we will do a system that out colon, colon prep, mine.

68
00:04:07.005 --> 00:04:11.004
So now we can run our method

69
00:04:11.004 --> 00:04:14.008
and you'll see we've got a set of results

70
00:04:14.008 --> 00:04:17.002
that set of results is sorted,

71
00:04:17.002 --> 00:04:18.004
and there's only 20 of them.

72
00:04:18.004 --> 00:04:20.004
There's actually a thousand in the database.

73
00:04:20.004 --> 00:04:22.000
So if we'd done a full get all,

74
00:04:22.000 --> 00:04:24.002
we would've gotten a thousand records back out,

75
00:04:24.002 --> 00:04:26.006
but instead we only got 20 and they're ordered,

76
00:04:26.006 --> 00:04:29.005
as we told to my last name, and then first name,

77
00:04:29.005 --> 00:04:31.007
as you can see here on the first couple of lines where we

78
00:04:31.007 --> 00:04:34.009
have Brandon Adams and then Deborah Adams,

79
00:04:34.009 --> 00:04:36.004
that's all there is to ordering and limiting.

80
00:04:36.004 --> 00:04:38.003
And now I'm going to show you how to use this

81
00:04:38.003 --> 00:04:40.000
in a real world application.

