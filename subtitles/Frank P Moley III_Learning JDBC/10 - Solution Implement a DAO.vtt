WEBVTT
1
00:00:00.001 --> 00:00:05.005
(upbeat music plays)

2
00:00:05.005 --> 00:00:06.007
- [Instructor] So now that you've had some time

3
00:00:06.007 --> 00:00:09.004
to implement this challenge,

4
00:00:09.004 --> 00:00:13.000
I want to show you my solution to this problem.

5
00:00:13.000 --> 00:00:17.001
I'm going to open up my IDE here and in source main Java

6
00:00:17.001 --> 00:00:20.007
and our base package, I've created a couple files.

7
00:00:20.007 --> 00:00:24.005
So let's start with our order file.

8
00:00:24.005 --> 00:00:25.009
Let's close this so we can have a little bit

9
00:00:25.009 --> 00:00:27.001
more real estate.

10
00:00:27.001 --> 00:00:30.000
So what you'll see here is I created an order object

11
00:00:30.000 --> 00:00:33.007
that implements the data transfer object interface,

12
00:00:33.007 --> 00:00:35.004
and I've got my customer information,

13
00:00:35.004 --> 00:00:37.005
my sales person information.

14
00:00:37.005 --> 00:00:39.008
I've also got the order specific information,

15
00:00:39.008 --> 00:00:43.004
such as the creation date and the due date, the status.

16
00:00:43.004 --> 00:00:46.008
And then I have a list of order lines.

17
00:00:46.008 --> 00:00:49.001
One of the things that I added to this object,

18
00:00:49.001 --> 00:00:51.002
was I went ahead and put a to string on it,

19
00:00:51.002 --> 00:00:54.004
so I can print this information out.

20
00:00:54.004 --> 00:00:57.002
Let's take a look at our order line object itself,

21
00:00:57.002 --> 00:00:59.000
and we'll shrink this back down.

22
00:00:59.000 --> 00:01:00.008
So now on the order line,

23
00:01:00.008 --> 00:01:04.004
you'll notice this time I did not implement the DTO

24
00:01:04.004 --> 00:01:06.004
and that's because this is a sub object

25
00:01:06.004 --> 00:01:10.001
that doesn't have its own DAO itself.

26
00:01:10.001 --> 00:01:12.008
On this, I have the quantity which comes from the order line

27
00:01:12.008 --> 00:01:15.001
or the order item table.

28
00:01:15.001 --> 00:01:17.002
I also have all of the product information.

29
00:01:17.002 --> 00:01:20.006
Remember it was a one-to-one relationship between those two.

30
00:01:20.006 --> 00:01:24.002
So all of our product information is also shown here.

31
00:01:24.002 --> 00:01:26.008
So now let's go to the actual working method

32
00:01:26.008 --> 00:01:30.003
that we're dealing with and that's in our DAO.

33
00:01:30.003 --> 00:01:33.006
So I took that query that I gave you and put all of that

34
00:01:33.006 --> 00:01:36.004
into a string called get by ID.

35
00:01:36.004 --> 00:01:40.001
So now let's take a look at the find by ID method.

36
00:01:40.001 --> 00:01:40.009
Now you'll see,

37
00:01:40.009 --> 00:01:43.004
I created an order on line 29

38
00:01:43.004 --> 00:01:45.009
and then as we've done so many times before,

39
00:01:45.009 --> 00:01:49.009
I do a try with resources and create my prepared statement.

40
00:01:49.009 --> 00:01:53.003
Now you may take a look at line 36.

41
00:01:53.003 --> 00:01:56.001
So if order ID equals zero,

42
00:01:56.001 --> 00:01:58.007
what I'm doing here is I'm putting in a guard

43
00:01:58.007 --> 00:02:00.007
so that I don't update the same data

44
00:02:00.007 --> 00:02:03.005
on the object multiple times.

45
00:02:03.005 --> 00:02:07.006
In reality, it's not going to impact the runtime that much,

46
00:02:07.006 --> 00:02:09.009
but there's no real reason for me to update it more

47
00:02:09.009 --> 00:02:12.006
than once, because there are order level details,

48
00:02:12.006 --> 00:02:14.008
and then there are order line details.

49
00:02:14.008 --> 00:02:18.002
And because everything comes in as an order ID,

50
00:02:18.002 --> 00:02:21.005
a single value comes out and that's the primary key.

51
00:02:21.005 --> 00:02:23.004
I don't have to worry about iterating over it.

52
00:02:23.004 --> 00:02:25.000
So this just gives me a guard

53
00:02:25.000 --> 00:02:27.006
so that I don't thrash the customer first name

54
00:02:27.006 --> 00:02:30.007
and last name and email, et cetera, et cetera.

55
00:02:30.007 --> 00:02:34.006
So I go ahead and I set all of those order details only once

56
00:02:34.006 --> 00:02:36.004
in this guard condition.

57
00:02:36.004 --> 00:02:38.004
So let's take a look at line 41.

58
00:02:38.004 --> 00:02:41.009
Now here, I set my guard equal to the value

59
00:02:41.009 --> 00:02:45.001
that came in from the result set.

60
00:02:45.001 --> 00:02:46.000
So in doing this,

61
00:02:46.000 --> 00:02:48.003
I can ensure that I don't thrash over this,

62
00:02:48.003 --> 00:02:49.005
over and over again.

63
00:02:49.005 --> 00:02:51.008
Again, that's just the whole purpose of this guard.

64
00:02:51.008 --> 00:02:53.007
So now let's go below that guard

65
00:02:53.007 --> 00:02:55.002
and this is where I'm actually setting all

66
00:02:55.002 --> 00:02:57.003
of my order line information.

67
00:02:57.003 --> 00:02:58.003
Now, what I'm doing here is,

68
00:02:58.003 --> 00:02:59.009
I'm setting the order line information

69
00:02:59.009 --> 00:03:02.005
and I'm adding it to a parent array.

70
00:03:02.005 --> 00:03:04.009
So then when I get out of the result set,

71
00:03:04.009 --> 00:03:09.000
I set that array on the order object on line 59,

72
00:03:09.000 --> 00:03:12.004
and this allows me to populate the order

73
00:03:12.004 --> 00:03:14.009
and the order items or the order lines

74
00:03:14.009 --> 00:03:17.009
in a way that I get the values completely out

75
00:03:17.009 --> 00:03:19.004
of the result set.

76
00:03:19.004 --> 00:03:22.001
And then I simply return the order.

77
00:03:22.001 --> 00:03:26.009
Now, the final thing that I did was in the JDBC executer,

78
00:03:26.009 --> 00:03:28.009
I went ahead and actually pulled an order out

79
00:03:28.009 --> 00:03:30.007
and I pulled the first order out.

80
00:03:30.007 --> 00:03:35.009
That's 1000 and let's go ahead and run that.

81
00:03:35.009 --> 00:03:38.009
So you'll see that I get an order of 1000.

82
00:03:38.009 --> 00:03:41.003
This is for Angela Crawford.

83
00:03:41.003 --> 00:03:45.003
There's her email, there's the creation date,

84
00:03:45.003 --> 00:03:49.004
the total due and the status, the salesperson,

85
00:03:49.004 --> 00:03:52.007
the salesperson last name, email address.

86
00:03:52.007 --> 00:03:55.007
Now look, we actually get into our order lines

87
00:03:55.007 --> 00:03:59.004
and each order line is specified in my output.

88
00:03:59.004 --> 00:04:03.005
So there's an order line for mineral water,

89
00:04:03.005 --> 00:04:05.009
cranberry flavored,

90
00:04:05.009 --> 00:04:08.005
and then there's an order for mineral water,

91
00:04:08.005 --> 00:04:10.004
lemon lime flavored.

92
00:04:10.004 --> 00:04:11.009
And that's how we actually spit out.

93
00:04:11.009 --> 00:04:14.004
So if you did the raw database query,

94
00:04:14.004 --> 00:04:17.003
you would've gotten two tuples out or two rows.

95
00:04:17.003 --> 00:04:20.000
Each of those corresponding to an order line

96
00:04:20.000 --> 00:04:21.007
because of the product.

97
00:04:21.007 --> 00:04:24.001
So by iterating over that order line,

98
00:04:24.001 --> 00:04:27.003
we got one value out and that's what you should get,

99
00:04:27.003 --> 00:04:30.000
if you execute this method the same way.

