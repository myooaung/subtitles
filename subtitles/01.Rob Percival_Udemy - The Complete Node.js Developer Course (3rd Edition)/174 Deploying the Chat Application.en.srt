1
00:00:00,450 --> 00:00:06,120
In this lesson you'll be deploying the chat application alive to a production server.

2
00:00:06,120 --> 00:00:11,790
Now this is gonna allow anyone with an internet connection to open up the app in the browser and start

3
00:00:11,790 --> 00:00:13,500
chatting with others.

4
00:00:13,500 --> 00:00:19,410
Now we've already gone through this deployment process twice in the course once for the weather web

5
00:00:19,410 --> 00:00:24,220
application and a second time for the task manager API.

6
00:00:24,330 --> 00:00:30,450
Doing it this third time is going to be a challenge for you to make sure you actually know how to deploy

7
00:00:30,480 --> 00:00:32,770
your node j s apps.

8
00:00:32,790 --> 00:00:37,050
So let's go ahead and get to it by heading over to chat dot in J.

9
00:00:37,050 --> 00:00:39,000
S right here up top.

10
00:00:39,000 --> 00:00:44,930
What I'm going to do is paste in the challenge comments outlining what I'd like you to do.

11
00:00:44,970 --> 00:00:49,200
So once again the big picture goal is to deploy the chat application.

12
00:00:49,200 --> 00:00:51,210
Step 1 is going to be a setup.

13
00:00:51,210 --> 00:00:55,710
Get in the chat app project and also commit your files.

14
00:00:55,710 --> 00:01:02,580
Now we want to commit every single file in the chat app project except for the contents of the node

15
00:01:02,610 --> 00:01:04,170
modules folder.

16
00:01:04,290 --> 00:01:08,510
So you're going to want to set up the ignore file like we've done before.

17
00:01:08,550 --> 00:01:09,000
Next up.

18
00:01:09,000 --> 00:01:15,420
Once you have that commit in place you're going to create a repository and then push your code up to

19
00:01:15,420 --> 00:01:23,480
that repository and you'll also create a Heroku application and push the code up to that as well.

20
00:01:23,490 --> 00:01:32,070
Now our code is already looking for process dot EMV dot port over here in index dot J S so there's actually

21
00:01:32,070 --> 00:01:36,110
no need to change any of our code to get this done.

22
00:01:36,210 --> 00:01:41,880
Now once you have the code deployed to Heroku the last thing you want to do is open up the live app

23
00:01:41,910 --> 00:01:43,430
and test your work.

24
00:01:43,530 --> 00:01:50,070
Try to join a chat room with a few different browser windows or share the you are with a friend and

25
00:01:50,070 --> 00:01:56,740
have them try to join and make sure you can actually chat on the production version of the app.

26
00:01:56,760 --> 00:02:01,770
All right take some time to knock that out and when you're done come back and click play

27
00:02:06,030 --> 00:02:06,810
how that go.

28
00:02:06,810 --> 00:02:08,340
Let's go ahead and get to it.

29
00:02:08,340 --> 00:02:14,760
By first shutting down the dev server from the terminal we're going to run and get in it to initialize

30
00:02:14,760 --> 00:02:18,540
the chat app folder as a get repository.

31
00:02:18,540 --> 00:02:24,090
Now from there we do want to set up our get ignore file to ignore the node modules folder.

32
00:02:24,390 --> 00:02:29,120
So in the chat after rectory you needed to create a new file Dot.

33
00:02:29,190 --> 00:02:31,750
Get ignore right here.

34
00:02:31,800 --> 00:02:36,190
The only thing we're going to Noor is the node modules folder.

35
00:02:36,300 --> 00:02:37,140
Perfect.

36
00:02:37,140 --> 00:02:43,520
Everything else is going to be committed including everything in the public and source directories.

37
00:02:43,560 --> 00:02:50,940
Now that we have the get ignore file created we can go ahead and use get add dot to add all files to

38
00:02:50,940 --> 00:02:57,660
the staging area and we can run get status just to make sure things look correct here if I scroll up

39
00:02:57,660 --> 00:03:00,220
through the list of things I'm about to add.

40
00:03:00,390 --> 00:03:03,400
I have my 3 files in the root of the project.

41
00:03:03,510 --> 00:03:09,020
Then I have a few different ones in public followed by a few others in the source directory.

42
00:03:09,060 --> 00:03:15,360
That all looks great so I can go ahead and move on to the final part of Step 1 which is to actually

43
00:03:15,360 --> 00:03:23,880
commit those files get commit with the M flag for my message and in it commit will be a good start here.

44
00:03:24,060 --> 00:03:30,110
Now that we have the comet in place we want to create a github repository and push our code up that's

45
00:03:30,120 --> 00:03:36,870
going to allow us to backup our code collaborate with others track issues and more so to do that we're

46
00:03:36,870 --> 00:03:42,600
gonna head over to the browser and go over to get hub dot com from here.

47
00:03:42,600 --> 00:03:50,970
What we want to do is create a new GitHub repository so in the top right that is new repository here

48
00:03:50,970 --> 00:03:56,180
we can create this as a public or private repo and we just need to provide a name.

49
00:03:56,400 --> 00:04:02,400
I could use something like node v 3 chat app as an example.

50
00:04:02,400 --> 00:04:04,930
Then I'll go ahead and actually create it.

51
00:04:04,980 --> 00:04:11,070
And like we've done before of the options we have available it is this second option that we want to

52
00:04:11,070 --> 00:04:11,760
take.

53
00:04:11,790 --> 00:04:18,780
We have an existing repository and we want to push our code up so I'll run this line to set up the remote

54
00:04:18,810 --> 00:04:20,010
correctly.

55
00:04:20,070 --> 00:04:25,580
Then I'll run this line to actually push that code up for the very first time.

56
00:04:25,770 --> 00:04:32,780
Once that's done we should be able to refresh the website and see our code showing up right here.

57
00:04:32,790 --> 00:04:34,950
I give things a refresh and what do we have.

58
00:04:34,950 --> 00:04:38,340
We have our project available which is great.

59
00:04:38,340 --> 00:04:44,340
Now the next thing we needed to do was also get our project up on her Roku so people can actually use

60
00:04:44,340 --> 00:04:52,740
the application to do that if you remember what you need to do is run Heroku create from the terminal.

61
00:04:52,740 --> 00:04:55,670
Now remember you can also choose to provide a name.

62
00:04:55,680 --> 00:04:59,340
Otherwise a name will be randomly generated for you.

63
00:04:59,730 --> 00:05:06,580
I'm going to use Mead node the 3 chat app for mine.

64
00:05:06,750 --> 00:05:13,110
Now I can go ahead and actually create that Heroku application and from there what I'm gonna do is push

65
00:05:13,110 --> 00:05:14,470
it up to the new remote.

66
00:05:14,520 --> 00:05:20,290
That's been added that is get push Heroku master.

67
00:05:20,400 --> 00:05:22,520
Now this is going to take all of our code.

68
00:05:22,550 --> 00:05:29,340
It's gonna get it up on the Heroku servers and Heroku is going to attempt to install those NPM modules

69
00:05:29,640 --> 00:05:33,190
and actually start up the application now in package dock.

70
00:05:33,210 --> 00:05:33,690
Jason.

71
00:05:33,690 --> 00:05:39,480
We already have our start script so all of that should go pretty well and in a few moments I should

72
00:05:39,480 --> 00:05:43,300
be given the U.R.L. I can visit in the browser right here.

73
00:05:43,350 --> 00:05:48,090
I can see that it is launching our app and I have my U.R.L. right here.

74
00:05:48,300 --> 00:05:54,060
I can alter click that or I can copy it to the clipboard and head over to the browser and all we're

75
00:05:54,060 --> 00:05:56,330
going to do is move on to Step 4.

76
00:05:56,340 --> 00:05:59,400
I want to visit it and make sure I can actually chat.

77
00:05:59,850 --> 00:06:03,090
So right here I visit the U.R.L. and what do I get.

78
00:06:03,090 --> 00:06:06,210
I get my join page which is great.

79
00:06:06,210 --> 00:06:12,440
I'm gonna go ahead and open up the production U.R.L. in a another window as well.

80
00:06:12,480 --> 00:06:18,010
Right here we have open in both and then I'm going to go ahead and try to join.

81
00:06:18,030 --> 00:06:22,370
So I will join over here as Jake to the room.

82
00:06:22,380 --> 00:06:27,800
Let's go ahead and join a room like Philly then in this window.

83
00:06:27,830 --> 00:06:35,060
I'm going to have someone else let's go ahead and have just joined that same room and right here I can

84
00:06:35,060 --> 00:06:42,890
see that both do have the names showing up and I should be able to share data so I could say hey and

85
00:06:42,950 --> 00:06:48,130
that shows up for both Windows and I should also be able to share my location.

86
00:06:48,230 --> 00:06:54,620
Now yes I do have to allow that but once I confirm after a few seconds I should see the location being

87
00:06:54,620 --> 00:06:57,680
shared and it is over here Jake.

88
00:06:57,680 --> 00:07:03,920
Got the location that just shared I can click on the link and it brings me over to Google Maps once

89
00:07:03,920 --> 00:07:06,140
again with my location.

90
00:07:06,140 --> 00:07:11,880
So now that we have this in place we have our chat application deployed to Heroku.

91
00:07:11,990 --> 00:07:18,170
Anyone with the U.R.L. l can go ahead and visit the chat application to actually use it.

92
00:07:18,230 --> 00:07:24,640
Now over inside of chat dot J s what I'm going to do is remove those challenge comments.

93
00:07:24,720 --> 00:07:29,060
Save the file and that's where we're gonna stop for this one.

94
00:07:29,060 --> 00:07:31,130
That is it for the end of this video.

95
00:07:31,220 --> 00:07:35,690
And that's also it for the end of this section in this section.

96
00:07:35,690 --> 00:07:43,250
You learned how to create a brand new type of application a real time application with web sockets and

97
00:07:43,250 --> 00:07:43,780
socket.

98
00:07:43,790 --> 00:07:44,870
Dot I O.

99
00:07:45,200 --> 00:07:52,070
This allowed us to setup an application with real time bi directional communication where the client

100
00:07:52,100 --> 00:08:00,080
can send information to the server and the server can send information to the client over this persistent

101
00:08:00,140 --> 00:08:01,460
connection.

102
00:08:01,460 --> 00:08:02,060
All right.

103
00:08:02,060 --> 00:08:03,610
That's it for this one.

104
00:08:03,620 --> 00:08:05,450
I'll see you in the next lesson.
