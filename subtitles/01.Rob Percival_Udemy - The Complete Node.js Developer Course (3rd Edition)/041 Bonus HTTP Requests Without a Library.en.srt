1
00:00:00,180 --> 00:00:06,180
In this video as promised earlier in the section you're going to learn how to make HDTV requests to

2
00:00:06,180 --> 00:00:10,590
a given U.R.L. without using the request NPM library.

3
00:00:10,680 --> 00:00:17,430
Request is just an NPM library and NPM libraries can't do anything that you could do with node anyways.

4
00:00:17,430 --> 00:00:20,180
Typically they just make it easier to do.

5
00:00:20,250 --> 00:00:23,330
And we saw that with yards and request.

6
00:00:23,370 --> 00:00:29,700
You don't need those to work with command line arguments or to make HDTV requests but it sure does make

7
00:00:29,700 --> 00:00:32,340
the process a whole lot easier.

8
00:00:32,370 --> 00:00:38,760
Now in this video we're going to explore how we can make requests using the modules that node provides.

9
00:00:38,760 --> 00:00:44,400
This is a completely optional video as we're not going to integrate what we learn here into the weather

10
00:00:44,400 --> 00:00:45,210
application.

11
00:00:45,210 --> 00:00:50,940
Instead we're going to just explore it over in the playground directory so we can get a better feel

12
00:00:50,940 --> 00:00:54,660
for what exactly the request module is doing to do this.

13
00:00:54,660 --> 00:00:56,310
Let's make a brand new file.

14
00:00:56,340 --> 00:01:02,460
I'll call this six hyphen raw Python HDTV dot J.

15
00:01:02,470 --> 00:01:09,690
S and in here we're going to essentially recreate one of our age TTP requests firing off the request

16
00:01:09,690 --> 00:01:15,630
to the server getting and passing the response and doing something meaningful with it to get this done.

17
00:01:15,630 --> 00:01:21,250
There are two core modules that we're going to explore we can find those by cracking open the node j

18
00:01:21,250 --> 00:01:27,770
asked documentation in the browser I'm going to close the map box and dark sky API tabs since we're

19
00:01:27,780 --> 00:01:34,590
done with those and I'm going to open up node j s dot org to explore the docs.

20
00:01:34,740 --> 00:01:40,620
Once we're here we're gonna go to the documentation page and we're gonna go to the docs for our version.

21
00:01:40,620 --> 00:01:44,510
Now here we have the table of contents which we've used before.

22
00:01:44,520 --> 00:01:50,600
For example we explored the file system module earlier in the class in this video.

23
00:01:50,700 --> 00:01:55,450
We're gonna take a peek at HDTV and H TTP s.

24
00:01:55,470 --> 00:01:58,250
Now already we can see a bit of an annoyance.

25
00:01:58,260 --> 00:02:04,790
There are separate modules depending on the protocol we're using with request the NPM library.

26
00:02:04,800 --> 00:02:10,890
That's not necessary in abstracts all of that behind the scenes allowing us to easily switch out the

27
00:02:10,890 --> 00:02:16,130
protocol we're using without needing to load in a completely separate library.

28
00:02:16,140 --> 00:02:21,630
Now if we crack both open which I will in a new tab we can take a quick moment to explore them before

29
00:02:21,630 --> 00:02:23,390
using them in our code.

30
00:02:23,400 --> 00:02:27,890
Now both of these modules can be used for both pieces to the puzzle.

31
00:02:28,020 --> 00:02:34,080
You can use these libraries to create a new server and we'll talk about server creation a bit later

32
00:02:34,080 --> 00:02:40,260
in the class and you can also use these modules to make requests to an existing server and that's what

33
00:02:40,260 --> 00:02:42,300
we're going to focus on in this video.

34
00:02:42,300 --> 00:02:48,030
As we scroll down through the table of contents for each near the bottom we're gonna see a couple of

35
00:02:48,030 --> 00:02:52,060
methods and the method we're looking for is request now.

36
00:02:52,090 --> 00:02:57,620
Right here we can use request with options or a U.R.L. with optional options.

37
00:02:57,630 --> 00:03:05,130
Either way it gets the job done and we're gonna see the exact same thing for the H TTP s module if I

38
00:03:05,130 --> 00:03:07,110
scroll down we have those two ways.

39
00:03:07,110 --> 00:03:15,270
That request can be called so we use the H TTP module for standard requests and we use H TTP as if we're

40
00:03:15,270 --> 00:03:18,550
making a request to a secure server.

41
00:03:18,570 --> 00:03:23,620
Now in this case both of our API eyes do use the H TTP s protocol.

42
00:03:23,730 --> 00:03:26,670
So that's what we're gonna go ahead and use as well.

43
00:03:26,730 --> 00:03:31,040
Now since it is a core module as a reminder there is no need to install it.

44
00:03:31,050 --> 00:03:35,970
We can simply load it in const H TTP S equals.

45
00:03:35,970 --> 00:03:39,630
We're gonna require the H TTP s core module.

46
00:03:39,630 --> 00:03:44,260
And once again the name I'm choosing to provide here comes from the documentation.

47
00:03:44,400 --> 00:03:49,080
If we scroll down to where we get to some examples you're gonna see that when they load it in.

48
00:03:49,080 --> 00:03:53,940
They use the H TTP s variable name as a standard.

49
00:03:53,940 --> 00:04:00,240
Now it's time to actually use the request function to fire off a request.

50
00:04:00,240 --> 00:04:06,000
In this case let's go ahead and get the forecast for a location though you could also use the same technique

51
00:04:06,000 --> 00:04:09,690
to geo code or interact with any other API.

52
00:04:09,690 --> 00:04:13,280
The first thing we need is a U R L to make the request too.

53
00:04:13,320 --> 00:04:15,360
So I'm gonna grab the forecast you are.

54
00:04:15,350 --> 00:04:22,350
All we had in forecast dot J S I'm gonna take the u are all variable in its entirety with the contents

55
00:04:22,350 --> 00:04:23,430
as well.

56
00:04:23,430 --> 00:04:28,540
I'm gonna copy the entire line and bring it over to our new file and paste it in.

57
00:04:28,590 --> 00:04:33,640
Now we are referencing variables which no longer exist so we can remove all of those.

58
00:04:33,690 --> 00:04:39,750
I'm gonna remove the latitude the comma and the longitude and all those replace that with some static

59
00:04:39,840 --> 00:04:41,250
inline values.

60
00:04:41,250 --> 00:04:47,640
For example I can used forty comma minus seventy five which is pretty close to where I am.

61
00:04:47,640 --> 00:04:51,720
Not exact but it's good enough for this example down below.

62
00:04:51,720 --> 00:04:59,550
It's now time to fire off the request and we start that process with H TTP s dot request.

63
00:04:59,580 --> 00:05:05,370
This is a function so we're gonna call it as such and we pass to it to arguments.

64
00:05:05,370 --> 00:05:12,510
The first is our you are L which we have access to the that you are L variable and the second is a callback

65
00:05:12,600 --> 00:05:13,190
function.

66
00:05:13,260 --> 00:05:17,340
And this callback function gets called with the response.

67
00:05:17,340 --> 00:05:21,810
Now the callback we use here is going to be very different from the callback we're used to.

68
00:05:21,810 --> 00:05:28,920
Like we had in the forecast or geo code file our core node modules typically operate at a lower level.

69
00:05:28,980 --> 00:05:35,520
Well NPM modules like request abstract away a lot of that complexity since we are using the core node

70
00:05:35,520 --> 00:05:36,670
module here.

71
00:05:36,720 --> 00:05:40,070
We're gonna have to setup things that you might not think should be necessary.

72
00:05:40,080 --> 00:05:45,610
For example in this callback we don't have access to the complete response body.

73
00:05:45,630 --> 00:05:52,380
Instead we can go ahead and grab the individual chunks that come through because h TTP data could be

74
00:05:52,380 --> 00:05:54,740
streamed in multiple parts.

75
00:05:54,810 --> 00:05:57,180
So right here what does that mean for us.

76
00:05:57,210 --> 00:06:00,540
It means we have to listen for these individual chunks to come in.

77
00:06:00,790 --> 00:06:05,550
And we also have to listen for when all chunks have arrived and the request is done.

78
00:06:05,800 --> 00:06:12,850
Right here we can start this process by using response on response done on is a function and it allows

79
00:06:12,850 --> 00:06:15,090
us to register a handler.

80
00:06:15,100 --> 00:06:21,340
Now there are a few different events we can register callback functions for one of them is data and

81
00:06:21,340 --> 00:06:26,610
we provide the event name as the first argument represented as a string.

82
00:06:26,620 --> 00:06:32,350
Now from here we can also provide the callback and that's going to fire when new data comes in and we

83
00:06:32,350 --> 00:06:34,070
get access to that data.

84
00:06:34,140 --> 00:06:41,350
The first and only argument commonly called chunk so this is a chunk of the response it might be the

85
00:06:41,350 --> 00:06:42,130
entire thing.

86
00:06:42,130 --> 00:06:47,010
Or it might not depending on exactly how the server has been set up.

87
00:06:47,050 --> 00:06:52,150
Now the other thing we're going to need to do in here is figure out when we're done and we can do that

88
00:06:52,210 --> 00:06:54,880
using another call to response dot on.

89
00:06:55,030 --> 00:06:59,030
Here we are waiting for the end event when things are over.

90
00:06:59,050 --> 00:07:02,940
This callback function is going to run and it doesn't get any arguments.

91
00:07:02,950 --> 00:07:06,460
Instead by running we just know we're done.

92
00:07:06,460 --> 00:07:12,100
So now it's time to put these two together to figure out how we can get the entire response body pass

93
00:07:12,100 --> 00:07:16,290
it from Jason to a javascript object and actually use it.

94
00:07:16,300 --> 00:07:20,380
So as mentioned this callback is going to fire when data comes in.

95
00:07:20,380 --> 00:07:23,820
Now this could happen one time or it could happen multiple times.

96
00:07:23,830 --> 00:07:26,390
Either way we need to take this chunk.

97
00:07:26,500 --> 00:07:32,200
We need to add it somewhere where we can store it until we have all of them then we can pass it as Jason

98
00:07:32,430 --> 00:07:33,250
to up above.

99
00:07:33,280 --> 00:07:35,660
Let's get that done by creating a new variable.

100
00:07:35,740 --> 00:07:39,020
Let data equal an empty string.

101
00:07:39,320 --> 00:07:44,970
So here I'm using left instead of const since I am going to reassign the value over time.

102
00:07:45,050 --> 00:07:51,040
Changing the string now inside of this callback we're gonna have access to that new chunk.

103
00:07:51,080 --> 00:07:53,160
Let's go ahead and see what the chunk looks like.

104
00:07:53,160 --> 00:07:54,690
By console dot logging it.

105
00:07:54,740 --> 00:07:56,910
So console dot log chunk.

106
00:07:56,990 --> 00:08:02,980
Now you'll notice that the program in its current state is actually never gonna run that code.

107
00:08:02,990 --> 00:08:04,350
Let's go ahead and prove it.

108
00:08:04,460 --> 00:08:11,330
S.D. dot dot forward slash playground to get into that folder I'll use clear to clear the terminal output

109
00:08:11,420 --> 00:08:12,620
and I'll run our script.

110
00:08:12,620 --> 00:08:17,150
That's these six raw HDTV J.S. file.

111
00:08:17,150 --> 00:08:18,090
Now when I run this.

112
00:08:18,090 --> 00:08:19,430
Things are just gonna hang.

113
00:08:19,520 --> 00:08:24,380
It's not going to print our message and it's not going to bring us back to the terminal for us to run

114
00:08:24,380 --> 00:08:25,310
another command.

115
00:08:25,300 --> 00:08:30,130
Instead it's stuck it's stuck because we don't have a complete request.

116
00:08:30,170 --> 00:08:35,760
There's another method we need to use to say we're actually ready to send this off to do that.

117
00:08:35,760 --> 00:08:37,940
We have to make a change to our program.

118
00:08:38,120 --> 00:08:44,410
What we get back from the request method is what you could refer to as the request itself.

119
00:08:44,450 --> 00:08:52,790
So console request can store this variable the variable that comes back as the return value from request.

120
00:08:52,790 --> 00:08:57,510
Now on here there's a method we can use to kick things off that is request dot.

121
00:08:57,620 --> 00:09:04,310
And so right here are just another example of how the low level API might not give us the exact tools

122
00:09:04,310 --> 00:09:05,180
we were hoping to.

123
00:09:05,180 --> 00:09:08,270
It can get a bit confusing even with a simple example.

124
00:09:08,300 --> 00:09:11,480
There's a lot going on here with very little progress.

125
00:09:11,510 --> 00:09:16,610
Now we can take things back to the terminal and rerun things by calling and it's going to see that we're

126
00:09:16,610 --> 00:09:21,330
done setting up our request and it will actually fire it off if I do this.

127
00:09:21,530 --> 00:09:22,500
What do I see.

128
00:09:22,520 --> 00:09:29,360
I can see that right here we have a few different console log calls printing various buffers three of

129
00:09:29,360 --> 00:09:30,760
them to the screen.

130
00:09:30,920 --> 00:09:34,790
So these chunk data that comes back is indeed a buffer.

131
00:09:34,820 --> 00:09:36,130
We want a string.

132
00:09:36,140 --> 00:09:41,450
So we're going to go ahead and convert the buffer to the string using the two string method as we've

133
00:09:41,450 --> 00:09:43,310
done earlier in the class.

134
00:09:43,310 --> 00:09:46,970
And we're going to add the data on to the data variable.

135
00:09:46,970 --> 00:09:52,790
So data is going to equal the old value for data plus the new chunk.

136
00:09:52,790 --> 00:09:58,430
So chunk dot right here to string to convert the buffer to a string.

137
00:09:58,520 --> 00:10:04,580
Now that we have this in place we're gonna have access to the entire value the entire body response

138
00:10:04,600 --> 00:10:07,010
in the data variable down below.

139
00:10:07,010 --> 00:10:11,460
In the end we can go ahead and access it console dot log data.

140
00:10:11,480 --> 00:10:17,870
Now the data callback ran multiple times once for each chunk and is going to run a single time once

141
00:10:17,870 --> 00:10:20,960
things are done down below in the terminal.

142
00:10:20,960 --> 00:10:22,820
I'm going to rerun the program again.

143
00:10:22,820 --> 00:10:23,900
And what do we get.

144
00:10:23,900 --> 00:10:26,120
We get one thing printing to the screen.

145
00:10:26,120 --> 00:10:28,520
It is a very long string.

146
00:10:28,520 --> 00:10:30,820
This is our Jason data.

147
00:10:30,860 --> 00:10:37,070
So from here we could go ahead and pass it to get an object that we could actually pull properties off.

148
00:10:37,700 --> 00:10:40,240
So let's go ahead and get that done.

149
00:10:41,450 --> 00:10:46,040
I'll call this something like response body or a body equals.

150
00:10:46,370 --> 00:10:53,240
I will use Jason dock pass to pass a Jason string which I have stored in the data variable.

151
00:10:53,240 --> 00:10:57,090
Then I'll just print body console dot log body.

152
00:10:57,140 --> 00:11:00,490
Now if I save things and rerun the program from the terminal.

153
00:11:00,500 --> 00:11:06,530
Once again we're going to see that instead of getting the long string we get our past object ivory around

154
00:11:06,530 --> 00:11:12,680
the program and right here our object prints and we could use this to grab the current temperature or

155
00:11:12,680 --> 00:11:17,060
grab the forecast for the next minutes days or hours.

156
00:11:17,060 --> 00:11:23,960
So this is what it takes to make a request with the core H TTP and H TTP s module and we're not even

157
00:11:23,960 --> 00:11:27,830
really done yet because we don't have any error handling set up.

158
00:11:27,830 --> 00:11:33,170
Let's go ahead and wrap the video up by seeing how you could get that done just up above between where

159
00:11:33,170 --> 00:11:37,180
we fire off their request and use end to actually send it.

160
00:11:37,220 --> 00:11:41,800
We're gonna use request dot on to set up a another listener.

161
00:11:41,840 --> 00:11:44,540
Now the event we're listening for here is error.

162
00:11:44,540 --> 00:11:50,450
This is going to get fired when an error occurs and our callback function which we provide is going

163
00:11:50,450 --> 00:11:53,210
to allow us to do something with that error.

164
00:11:53,210 --> 00:11:56,980
Now the error is the first and only argument and so we can go ahead and name it.

165
00:11:57,110 --> 00:12:00,010
And from here we could do whatever we needed to do with it.

166
00:12:00,050 --> 00:12:04,870
Now in our other files we used a bit of error handling to print one of two messages.

167
00:12:04,970 --> 00:12:08,590
In this case let's go ahead and just dump it to make sure this is even running.

168
00:12:08,720 --> 00:12:17,110
So console dot log in error then as the second argument will actually dump it to the console.

169
00:12:17,170 --> 00:12:21,840
Now with this in place we can go ahead and run the program generating an error to do that.

170
00:12:21,850 --> 00:12:25,720
We can do something simple like turn off our network connectivity.

171
00:12:25,720 --> 00:12:28,600
I'm going to disable Wi-Fi on my machine.

172
00:12:28,900 --> 00:12:31,840
Then down below I'm going to rerun the program and what do I get.

173
00:12:31,840 --> 00:12:37,390
I get the error message looking exactly like what we had much earlier in the class when we initially

174
00:12:37,570 --> 00:12:40,040
explored the error in request.

175
00:12:40,060 --> 00:12:47,160
So now that we have this in place we have a very basic HDTV s request with the core node module.

176
00:12:47,260 --> 00:12:52,840
As you can see this does provide you everything you need but at a much lower level than you probably

177
00:12:52,840 --> 00:12:53,730
expected.

178
00:12:53,740 --> 00:13:00,610
That's why in this class and in the real world people are making requests with those core modules instead

179
00:13:00,850 --> 00:13:07,540
they're using libraries like request access shows or others to make the request process much easier.

180
00:13:07,540 --> 00:13:13,690
Here are callback gets fired a single time when things are ready we either have the error or we have

181
00:13:13,690 --> 00:13:16,450
the response and the body is already sitting there.

182
00:13:16,450 --> 00:13:21,910
We don't have to do anything with it like concatenate together the individual chunks to get everything

183
00:13:22,000 --> 00:13:22,620
we need.

184
00:13:22,630 --> 00:13:28,270
Now you might be thinking why does it no just change how those core modules work to be easier to use

185
00:13:28,300 --> 00:13:31,600
and look a little bit more like a library such as a request.

186
00:13:31,610 --> 00:13:32,950
And that's missing the point.

187
00:13:32,980 --> 00:13:39,370
The core node modules are supposed to provide those low level implementations and Node comes bundled

188
00:13:39,370 --> 00:13:46,180
with NPM because you're supposed to be using NPM modules when you're building out your applications.

189
00:13:46,180 --> 00:13:49,100
That's where we're gonna stop for this bonus video.

190
00:13:49,120 --> 00:13:55,330
We took a dive into exactly how we could use the core node modules to make requests and we've learned

191
00:13:55,330 --> 00:14:02,640
a little bit more about why NPM libraries like request are so valuable to the node ecosystem.

192
00:14:02,680 --> 00:14:07,600
That is it for this video and that is it for this section in this section.

193
00:14:07,630 --> 00:14:13,900
We learned all about a synchronous node j s as we built out our little weather application.

194
00:14:13,900 --> 00:14:16,380
I'm excited to get to the next section.

195
00:14:16,390 --> 00:14:18,810
The section introduction is coming up next.

196
00:14:18,850 --> 00:14:20,380
So let's jump right in.
