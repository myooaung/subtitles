WEBVTT
1
00:00:00.150 --> 00:00:05.340
In this video we're going to take a quick break from our notes application to talk about a javascript

2
00:00:05.370 --> 00:00:07.890
feature that we're going to be using throughout the course.

3
00:00:07.890 --> 00:00:13.770
That is iOS 6 aero functions and we're going to take a moment to explore them over in the playground

4
00:00:13.770 --> 00:00:15.650
directory in isolation.

5
00:00:15.690 --> 00:00:21.750
Then once we know how they work and how they differ from standard yes five functions will actually integrate

6
00:00:21.750 --> 00:00:24.200
them into our node application.

7
00:00:24.210 --> 00:00:28.940
Let's kick things off by creating a brand new script in that playground directory.

8
00:00:28.980 --> 00:00:34.120
I'm going to call this to hyphen arrow function dot J S.

9
00:00:34.230 --> 00:00:36.570
And then here we're going to mess around with some examples.

10
00:00:36.600 --> 00:00:38.610
Exploring this new syntax.

11
00:00:38.800 --> 00:00:40.840
Let's start with a simple example.

12
00:00:40.860 --> 00:00:44.560
I'm going to make a standard function like the ones we've been creating so far.

13
00:00:44.640 --> 00:00:49.590
I'll create a constant called Square and this little square function is going to take in a number and

14
00:00:49.590 --> 00:00:51.710
return to the square of that number.

15
00:00:51.900 --> 00:00:59.340
So I can call this single argument something like X and all I need to do is return x times x and we're

16
00:00:59.340 --> 00:01:00.300
done.

17
00:01:00.300 --> 00:01:03.480
Now at this point we have a regular function which we can use.

18
00:01:03.540 --> 00:01:09.480
I'm going to consult dot log whatever comes back from calling square and I'll pass in a number like

19
00:01:09.480 --> 00:01:10.220
three.

20
00:01:10.230 --> 00:01:12.200
Now the square of three would be nine.

21
00:01:12.190 --> 00:01:14.140
It sends three times three is nine.

22
00:01:14.190 --> 00:01:16.320
Let's go ahead and make sure it's working.

23
00:01:16.320 --> 00:01:19.020
Down below in the terminal I'll use C D.

24
00:01:19.020 --> 00:01:24.540
Dot dot forward slash playground to navigate into the playground directory.

25
00:01:24.570 --> 00:01:32.010
Once I'm here I'm going to clear the terminal output and use node mom to fire up our script so no demand

26
00:01:32.040 --> 00:01:36.220
to hyphen arrow hyphen function dot J S.

27
00:01:36.330 --> 00:01:41.750
And once I run it I would expect to see the number nine print and that is exactly what we're getting.

28
00:01:41.790 --> 00:01:44.160
So we have a regular function in place.

29
00:01:44.160 --> 00:01:46.600
How do we create an arrow function.

30
00:01:46.620 --> 00:01:52.410
Let's comment out our existing square function and recreate it using the arrow function syntax.

31
00:01:52.410 --> 00:01:54.540
Now down below we're going to start that off.

32
00:01:54.540 --> 00:01:57.270
Much the same way by defining a variable.

33
00:01:57.300 --> 00:02:02.940
I'm going to create a constant called Square exactly like we did up above and then after the equals

34
00:02:02.940 --> 00:02:05.810
sign we define our arrow function.

35
00:02:05.820 --> 00:02:10.080
Now the arrow function syntax is slightly different than a standard function.

36
00:02:10.080 --> 00:02:13.870
The first difference is that we don't use the function keyword at all.

37
00:02:13.890 --> 00:02:16.500
We actually start with our arguments list.

38
00:02:16.500 --> 00:02:22.610
So right here after the equals sign the first thing I'm going to do is set up my arguments list.

39
00:02:22.680 --> 00:02:29.310
Next up we put the arrow in Arrow function by using the equal sign followed by the greater than symbol

40
00:02:29.340 --> 00:02:31.920
to create this little arrow from there.

41
00:02:31.920 --> 00:02:36.660
We can set up our curly braces and define what the function is supposed to do.

42
00:02:36.720 --> 00:02:40.380
So in our case we can set up the same argument we had up above.

43
00:02:40.380 --> 00:02:44.030
We're gonna have just a single one x though we could have zero.

44
00:02:44.040 --> 00:02:47.920
Or we could have forty four and inside of the function itself.

45
00:02:47.970 --> 00:02:54.870
All we're going to do is return x times x exactly like we were doing up above.

46
00:02:54.870 --> 00:03:00.510
Now if we go ahead and save the program we can see we're getting the exact same result down below the

47
00:03:00.510 --> 00:03:05.210
number nine is indeed printing even though we're using this new syntax.

48
00:03:05.260 --> 00:03:10.560
And now that we have a basic aero function in place let's start to explore some of its hidden features

49
00:03:10.560 --> 00:03:16.800
that make it a tool worth using and the first is its shorthand syntax with a lot of the functions we

50
00:03:16.800 --> 00:03:21.610
end up writing in JavaScript and node j s the end up being pretty simple.

51
00:03:21.660 --> 00:03:25.890
We take in some arguments and immediately return some result.

52
00:03:25.890 --> 00:03:30.780
Now this might not seem like the most real world function out there but we already have functions of

53
00:03:30.780 --> 00:03:33.990
a similar pattern in our application in notes.

54
00:03:34.020 --> 00:03:34.230
J.

55
00:03:34.260 --> 00:03:40.020
S for example we have one of those functions right here which we pass to filter it takes in an argument

56
00:03:40.230 --> 00:03:46.110
it immediately returns some result we did the same thing for our other filter call and it's something

57
00:03:46.110 --> 00:03:49.760
we'll be doing over and over again throughout the class.

58
00:03:49.770 --> 00:03:56.160
Now when we do this there is an alternative syntax we can use to create a more concise aero function

59
00:03:56.280 --> 00:03:58.250
and we're going to explore that now.

60
00:03:58.260 --> 00:04:03.550
So right here let's comment out our second version of square and create a third version.

61
00:04:03.570 --> 00:04:10.200
So const square equals and right here we're gonna start in much the same way as we did up above.

62
00:04:10.200 --> 00:04:16.020
We are going to set up our arguments list and once again we can take in as few or as many as we need

63
00:04:16.020 --> 00:04:22.590
in this case just one then after the arguments list we move on to our arrow once again exactly like

64
00:04:22.590 --> 00:04:23.950
we did up above.

65
00:04:23.970 --> 00:04:25.860
Now here's where things differ.

66
00:04:25.860 --> 00:04:31.830
If our function was just going to have a single statement which returned something we can put that something

67
00:04:31.920 --> 00:04:38.410
right here which means I can just type out x times x there's no need for curly braces.

68
00:04:38.430 --> 00:04:41.610
There's not even a need for the return keyword.

69
00:04:41.700 --> 00:04:46.170
Whatever you put right after the arrow is going to be implicitly returned.

70
00:04:46.200 --> 00:04:48.710
Now if I save the program what do we get down below.

71
00:04:48.720 --> 00:04:55.680
We get nine and if I were to switch up the value swapping three out for two I can see that four is showing

72
00:04:55.680 --> 00:04:56.780
up down below.

73
00:04:56.790 --> 00:05:02.180
Now you're not going to be able to use the shorthand syntax for every arrow function you create only

74
00:05:02.180 --> 00:05:06.640
for simpler ones where you immediately return some sort of value.

75
00:05:06.710 --> 00:05:11.870
If you have more complexity to your function such as an if statement or a for loop you would indeed

76
00:05:11.870 --> 00:05:18.110
use the long form version where you set up curly braces and add as many lines of code as you need right

77
00:05:18.110 --> 00:05:18.860
inside.

78
00:05:18.860 --> 00:05:24.500
So sometimes we'll use standard arrow functions and if we can we'll take advantage of the shorthand

79
00:05:24.500 --> 00:05:26.630
syntax when possible.

80
00:05:26.630 --> 00:05:33.080
Now I want to take a quick moment to switch gears and talk about how arrow functions work in the context

81
00:05:33.110 --> 00:05:38.500
of methods so arrow functions as properties on an object.

82
00:05:38.510 --> 00:05:43.790
Let's start by commenting out both of our lines from the previous example and moving on to our second

83
00:05:43.790 --> 00:05:45.770
one down below for this one.

84
00:05:45.770 --> 00:05:47.480
We're going to define an object.

85
00:05:47.510 --> 00:05:52.630
Let's create a concept and we'll create an object useful for someone like an event planner.

86
00:05:52.650 --> 00:05:55.340
So I'm going to name this variable event.

87
00:05:55.360 --> 00:06:00.890
The value is indeed going to be an object and for the moment we're going to set up two properties the

88
00:06:00.890 --> 00:06:04.000
first name is going to be a string.

89
00:06:04.040 --> 00:06:07.760
And for this we can just pick a name for our fictitious event.

90
00:06:07.760 --> 00:06:10.670
Let's go ahead and do something like a birthday party.

91
00:06:10.700 --> 00:06:16.370
So we'll say we're throwing a birthday party and the other property is going to have a function value.

92
00:06:16.370 --> 00:06:21.170
This method is going to be called something like print guest lists.

93
00:06:21.200 --> 00:06:26.600
Now for the moment we don't have a guest list but that's OK we're gonna set the property value equal

94
00:06:26.600 --> 00:06:29.120
to a standard function for now.

95
00:06:29.240 --> 00:06:35.870
And we're going to do is use console dialog to print a little title for our guest list saying something

96
00:06:35.870 --> 00:06:39.050
like guest list for followed by the event name.

97
00:06:39.050 --> 00:06:44.660
So guest list for birthday party to do this we're gonna use console dialog and we'll start off with

98
00:06:44.660 --> 00:06:51.480
some static text something like guest list for then a space followed by the actual event name.

99
00:06:51.500 --> 00:06:54.660
So we're gonna read that property value right here.

100
00:06:54.740 --> 00:07:01.250
We know that with our methods with our functions as object properties we have access to the original

101
00:07:01.280 --> 00:07:03.680
object via the this binding.

102
00:07:03.680 --> 00:07:10.610
So this is a reference to our object right here which means we can access properties on this like this

103
00:07:10.880 --> 00:07:12.210
dot name.

104
00:07:12.290 --> 00:07:13.200
And there we go.

105
00:07:13.220 --> 00:07:15.630
Now let's go ahead and use it down below.

106
00:07:15.890 --> 00:07:17.970
Event dot print.

107
00:07:18.050 --> 00:07:24.340
Guest list and then the end of the day when I save the script I would expect to see my one message printing

108
00:07:24.350 --> 00:07:26.630
and that is exactly what I get down below.

109
00:07:26.630 --> 00:07:29.170
We have guest list for birthday party.

110
00:07:29.180 --> 00:07:33.770
Now let's swap out our function for an arrow function like we did up above.

111
00:07:33.770 --> 00:07:38.840
So we're gonna take it from looking a bit like this to looking more like what we had here to do that

112
00:07:38.870 --> 00:07:44.510
we remove the function keyword starting off with our arguments list and all we need to do from there

113
00:07:44.510 --> 00:07:50.290
is put the arrow in between the arguments list and our curly brace that starts the code block.

114
00:07:50.330 --> 00:07:55.820
This is indeed valid syntax for getting this done but if we save the program we're going to notice we

115
00:07:55.820 --> 00:07:58.420
don't get the result we might be expecting.

116
00:07:58.430 --> 00:08:06.200
Down below I have a guest list for undefined printing so clearly it is unable to find the name property

117
00:08:06.410 --> 00:08:13.760
and put birthday party in there and that is because arrow functions they don't bind their own this value

118
00:08:13.940 --> 00:08:20.420
which means that we do not have access to this as a reference to this object because of the fact we're

119
00:08:20.420 --> 00:08:27.920
using an arrow function so arrow functions are well suited for methods properties that are functions

120
00:08:28.190 --> 00:08:30.410
when we want to access this.

121
00:08:30.410 --> 00:08:33.760
So in this case it would be best to use a standard function.

122
00:08:33.800 --> 00:08:36.770
I'm going to revert back to the code we had before.

123
00:08:36.770 --> 00:08:42.220
Now we have a working application but it doesn't mean we're stuck with this exact definition.

124
00:08:42.260 --> 00:08:49.330
There's actually an yes 6 method shorthand that allows us to use a shorter more concise syntax while

125
00:08:49.340 --> 00:08:54.110
still having access to standard function features like a this binding.

126
00:08:54.110 --> 00:09:01.000
So right here to do that what we do is we remove the function keyword and we also remove the colon.

127
00:09:01.070 --> 00:09:08.210
So it goes from the method name right into the arguments list quickly followed by the function body.

128
00:09:08.210 --> 00:09:12.080
This is indeed a standard function which does have this binding.

129
00:09:12.080 --> 00:09:17.990
It is not an arrow function it's just using an alternative syntax available to us when we're setting

130
00:09:17.990 --> 00:09:19.790
up methods on objects.

131
00:09:19.790 --> 00:09:25.910
If I save the program we are back to a working state using this more concise syntax.

132
00:09:25.910 --> 00:09:32.150
Now why exactly do arrow functions avoid their own this binding and there are plenty of examples.

133
00:09:32.210 --> 00:09:34.610
And we're going to explore one right now.

134
00:09:34.820 --> 00:09:37.760
Let's go ahead and add some more data onto event.

135
00:09:37.760 --> 00:09:39.310
We have the Name property.

136
00:09:39.350 --> 00:09:42.970
We're also going to add a guest list property.

137
00:09:43.010 --> 00:09:48.730
This is going to be an array of strings where each string is the name of a guest who's going to attend.

138
00:09:48.800 --> 00:09:52.370
I'm gonna go to my own birthday party so I'll toss myself in there.

139
00:09:52.370 --> 00:09:57.630
I'll also invite Jen and Mike will limit this one to three guests.

140
00:09:57.630 --> 00:10:04.140
A nice small gathering and now the goal is to print that guest list just below the summary.

141
00:10:04.140 --> 00:10:06.560
So we're going to add some code right here.

142
00:10:06.600 --> 00:10:08.970
We have guest list for birthday party.

143
00:10:08.970 --> 00:10:12.130
Now we're going to list out each individual guest.

144
00:10:12.150 --> 00:10:15.740
I'm gonna get that done using the for each method on arrays.

145
00:10:15.750 --> 00:10:20.760
So I have access to my array via this dot guest list on there.

146
00:10:20.760 --> 00:10:25.650
We have the for each method similar to filter it takes in a function.

147
00:10:25.680 --> 00:10:29.760
This function gets called one time for every array item.

148
00:10:29.760 --> 00:10:34.880
So once for each guest and we get access to the guest the this first argument.

149
00:10:34.920 --> 00:10:36.820
So each item could be called the guest.

150
00:10:36.870 --> 00:10:40.080
I could pick whatever name I wanted for this argument.

151
00:10:40.080 --> 00:10:43.890
From there we're gonna use console dialog to print a message.

152
00:10:43.950 --> 00:10:48.530
I'm gonna say something like Andrew is attending a birthday party.

153
00:10:48.540 --> 00:10:52.130
Then Jen is attending birthday party followed by Mike.

154
00:10:52.140 --> 00:10:57.810
So right here it will start off with the person's name which I can just access via this guest variable

155
00:10:58.140 --> 00:11:00.120
right here guest.

156
00:11:00.120 --> 00:11:01.420
So we start off with the name.

157
00:11:01.440 --> 00:11:04.150
Then we'll can contaminate on some static text.

158
00:11:04.170 --> 00:11:12.630
So Andrew is attending and right here after a space we will can keep an eye on the name of the event.

159
00:11:12.730 --> 00:11:14.710
That would be this dot name.

160
00:11:14.800 --> 00:11:17.320
Exactly like we had up above.

161
00:11:17.320 --> 00:11:21.910
Now if I go ahead and save the program we can see if things are working and clearly they're not.

162
00:11:22.270 --> 00:11:24.960
I have a guest list for a birthday party which looks great.

163
00:11:25.000 --> 00:11:29.730
Then I have an Andrew is attending undefined the same thing with Jen and Mike.

164
00:11:29.800 --> 00:11:31.080
The names are showing up.

165
00:11:31.090 --> 00:11:34.830
We're just not seeing the event name at the end of the string.

166
00:11:34.840 --> 00:11:38.590
This once again it has to do with this bindings.

167
00:11:38.650 --> 00:11:41.630
So standard functions like the one we've created here.

168
00:11:41.650 --> 00:11:46.720
As I mentioned are going to have their own this binding and that's a problem.

169
00:11:46.780 --> 00:11:50.650
We actually don't want this function to have its own this binding.

170
00:11:50.650 --> 00:11:55.120
I want to be able to access the this binding of its parent function which is print.

171
00:11:55.120 --> 00:11:59.920
Guest list because there I was able to use this dot name.

172
00:11:59.920 --> 00:12:03.580
Now in the past there were all sorts of work arounds for this one.

173
00:12:03.600 --> 00:12:10.500
I remember from my early javascript days was creating a variable called that setting and equal to this.

174
00:12:10.510 --> 00:12:16.180
So essentially creating a reference that we could access later then down below in the other function

175
00:12:16.360 --> 00:12:20.260
I would use that name and that would indeed work.

176
00:12:20.260 --> 00:12:23.710
So right here I can see the program works as expected.

177
00:12:23.710 --> 00:12:27.920
Now that's not ideal and that's when arrow functions solved this problem.

178
00:12:28.060 --> 00:12:30.460
So I'm going to undo this little that example.

179
00:12:30.460 --> 00:12:34.980
I'll switch that back to this and I'll remove the that constant up above.

180
00:12:35.110 --> 00:12:40.360
And now we're back to our broken example where we're getting on defined the solution here is to just

181
00:12:40.360 --> 00:12:43.700
swap out this standard function for an arrow function.

182
00:12:43.780 --> 00:12:49.180
So I'm going to remove the function keyword and I'm going to put an arrow between the arguments list

183
00:12:49.450 --> 00:12:55.510
and our curly braces when I do this and save the file we can see our program is working as expected

184
00:12:55.900 --> 00:13:02.710
arrow functions don't bind their own this value they access the this value in the context in which they're

185
00:13:02.710 --> 00:13:06.670
created which in this case is right inside of print guest list.

186
00:13:06.670 --> 00:13:11.500
That means we have access to this dot name pointing to the property up above.

187
00:13:11.500 --> 00:13:14.290
So there are three key takeaways from this video.

188
00:13:14.290 --> 00:13:16.390
One is the alternative syntax.

189
00:13:16.390 --> 00:13:19.490
So that is comparing this function to this function.

190
00:13:19.540 --> 00:13:23.760
The other is the fact that with aero functions we have this shorthand syntax.

191
00:13:23.890 --> 00:13:29.620
And the last of the three key takeaways is that arrow functions don't bind their own this value that

192
00:13:29.620 --> 00:13:31.740
makes them poor candidates for methods.

193
00:13:31.840 --> 00:13:35.010
And it makes them great candidates for pretty much everything else.

194
00:13:35.020 --> 00:13:40.150
So throughout this course we will never use a function where we have that function keyword we're either

195
00:13:40.150 --> 00:13:46.750
going to use arrow functions or when necessary we'll use the E6 method definition syntax which we've

196
00:13:46.750 --> 00:13:52.960
used right here and that's the approach I've taken with all of my personal and client projects as well.

197
00:13:52.960 --> 00:13:53.490
All right.

198
00:13:53.500 --> 00:13:59.350
So we've taken a quick look at Aero functions but you haven't gotten any experience actually using them

199
00:13:59.520 --> 00:14:00.710
in the next video.

200
00:14:00.700 --> 00:14:06.430
There's gonna be an arrow function challenge and we're also going to refactor our notes application

201
00:14:06.580 --> 00:14:09.180
to use aero functions everywhere we can.

202
00:14:09.190 --> 00:14:10.640
I'm excited to get to that.

203
00:14:10.660 --> 00:14:13.680
So let's go ahead and jump right in to the next video.
