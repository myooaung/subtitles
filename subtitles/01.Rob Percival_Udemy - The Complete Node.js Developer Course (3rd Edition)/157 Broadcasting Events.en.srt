1
00:00:00,180 --> 00:00:03,640
In this lesson you're going to learn how to broadcast your socket.

2
00:00:03,650 --> 00:00:04,890
Dot Iowa events.

3
00:00:04,890 --> 00:00:10,160
Now this is going to lead us to two practical features for our chat application.

4
00:00:10,170 --> 00:00:16,470
The first one when a new user joins all other connected users are gonna have a little message show up

5
00:00:16,710 --> 00:00:23,580
saying that a new user has entered the chat room and when a user leaves the chat room all connected

6
00:00:23,580 --> 00:00:29,160
users will see a message saying something like a user has left the chat room.

7
00:00:29,310 --> 00:00:34,980
Now for the moment there are no user names for the individual connected clients though that's something

8
00:00:34,980 --> 00:00:37,700
we'll fix a bit later on in the section.

9
00:00:37,740 --> 00:00:41,350
For now the goal is to just get those messages showing up.

10
00:00:41,440 --> 00:00:46,120
One when a user joins and a another when a user leaves.

11
00:00:46,200 --> 00:00:52,370
So let's go ahead and figure out how we're gonna do this by heading over to index dot J S as we're going

12
00:00:52,370 --> 00:00:57,710
to make some changes to the callback function for the connection event.

13
00:00:57,720 --> 00:01:01,560
Now when it comes to omitting events we have two ways to get that done.

14
00:01:01,560 --> 00:01:04,280
The first is to use the socket dammit.

15
00:01:04,350 --> 00:01:11,130
We know that amidst the event to these single client that we're referring to and we also have I O dot

16
00:01:11,140 --> 00:01:18,720
omit and we know this amidst the event to every single connected client when we broadcast an event we

17
00:01:18,720 --> 00:01:23,070
send it to everybody except the current client.

18
00:01:23,070 --> 00:01:30,720
So that's going to allow us to send a message saying something like a new user has joined to everybody

19
00:01:30,750 --> 00:01:33,620
except the new user who's joining.

20
00:01:33,630 --> 00:01:41,640
So right here what we're going to do is use the following that is socket dot broadcast dot emit now

21
00:01:41,670 --> 00:01:45,270
emit works here just like it works anywhere else.

22
00:01:45,270 --> 00:01:51,680
The only difference is that it's going to send it to everybody except this particular socket.

23
00:01:51,690 --> 00:01:59,460
So right here what I can do is emit a message and I can say something like the following a new user

24
00:01:59,700 --> 00:02:01,110
has joined.

25
00:02:01,110 --> 00:02:02,310
Perfect.

26
00:02:02,310 --> 00:02:05,250
Now let's go ahead and actually test this out.

27
00:02:05,250 --> 00:02:10,560
What I'm going to do is navigate over to Chrome and we have our two tabs opened up.

28
00:02:10,560 --> 00:02:15,470
I'm going to close down the second tab though I'll create a new tab first.

29
00:02:15,480 --> 00:02:21,780
So the whole browser window doesn't close then I'm going to refresh the first tab over here.

30
00:02:21,780 --> 00:02:27,300
As expected I see my welcome message now from the second browser window.

31
00:02:27,300 --> 00:02:29,840
What I'm gonna do is open up new developer tools.

32
00:02:29,850 --> 00:02:37,200
One more time and I'm going to navigate over to local host on port three thousand.

33
00:02:37,290 --> 00:02:42,090
Now when I do so I would expect to see just to the welcome message here.

34
00:02:42,090 --> 00:02:44,340
And that is exactly what I'm getting.

35
00:02:44,400 --> 00:02:51,760
And over here I would expect to see a message saying a new user has joined and I'm getting that as well.

36
00:02:51,780 --> 00:02:59,010
So now we have three ways that the server can emit an event I can use socket data emit to emit it to

37
00:02:59,010 --> 00:03:06,840
that particular connection I can use socket dot broadcast data emit to emit it to everybody but that

38
00:03:06,840 --> 00:03:08,470
particular connection.

39
00:03:08,490 --> 00:03:12,770
And finally I O dot omit to send it to everyone.

40
00:03:12,810 --> 00:03:18,020
So there are cases where you want to use all three it's not like one is better than the other.

41
00:03:18,060 --> 00:03:23,430
They just do different things and they're going to be used in different situations depending on who

42
00:03:23,430 --> 00:03:26,250
should be notified about what's going on.

43
00:03:26,250 --> 00:03:32,790
Now one more thing we're gonna do is make sure that all connected clients also get a message when a

44
00:03:32,790 --> 00:03:34,350
user leaves.

45
00:03:34,470 --> 00:03:40,590
Now to get that done we have to figure out how we can run some code when a user gets disconnected.

46
00:03:40,590 --> 00:03:44,070
For example when they close their browser tab.

47
00:03:44,070 --> 00:03:47,990
Now there are two main built in events and one we already explored.

48
00:03:48,000 --> 00:03:54,630
That was I O dot on connection which allowed us to run some code when a given client connected.

49
00:03:54,630 --> 00:04:01,140
We also have a another event that allows us to run some code when a given client gets disconnected.

50
00:04:01,140 --> 00:04:06,450
Now this can be a little confusing because it does not use I O dot on.

51
00:04:06,450 --> 00:04:14,070
We're only ever going to use I O dot on for connection if I want to run some code when a given socket

52
00:04:14,220 --> 00:04:20,510
gets disconnected we use socket dot on inside of our connection callback.

53
00:04:20,520 --> 00:04:26,550
Now in this case we're also using a built in event so the name and needs to match up exactly.

54
00:04:26,610 --> 00:04:28,740
That is disconnect.

55
00:04:28,890 --> 00:04:34,650
Now there's no need to omit either the connection event or the disconnect event from the client.

56
00:04:34,650 --> 00:04:41,970
These are built in events so the socket dot Io library takes control over actually emitting these all

57
00:04:41,970 --> 00:04:45,530
we have to do is setup the listener right here.

58
00:04:45,570 --> 00:04:53,070
Now we're going to run some code and this code is going to run whenever a client gets disconnected.

59
00:04:53,070 --> 00:05:00,000
Now in this case we actually don't need to use broadcast because the client has already been disconnected

60
00:05:00,270 --> 00:05:03,380
so there's no chance that they get the message.

61
00:05:03,390 --> 00:05:09,170
Now what we're going to do is send this message to every single client who is still connected.

62
00:05:09,270 --> 00:05:18,060
That is I O dot MIT right here emitting message and saying something like a user has left.

63
00:05:18,060 --> 00:05:19,140
Perfect.

64
00:05:19,140 --> 00:05:22,820
Now let's go ahead and see if this actually works as expected.

65
00:05:22,860 --> 00:05:29,340
What I'm going to do is save the file and over inside of the browser I'm going to take this second browser

66
00:05:29,340 --> 00:05:36,870
window once again create a new tab and close the old one then I'll refresh just the one page which is

67
00:05:36,900 --> 00:05:40,050
open at local host three thousand as expected.

68
00:05:40,050 --> 00:05:43,710
It's the first user and we get our welcome message from here.

69
00:05:43,710 --> 00:05:46,020
Let's bring that second one into the mix.

70
00:05:46,110 --> 00:05:49,100
That is a local host on port three thousand.

71
00:05:49,110 --> 00:05:56,970
Now when I join I can see a new user has joined and if I go ahead and close that browser window I see

72
00:05:56,970 --> 00:05:59,390
a user has left.

73
00:05:59,400 --> 00:06:06,510
So by adding just what four lines of code we're able to set up messages for when users join and leave

74
00:06:06,540 --> 00:06:08,640
our chat application.

75
00:06:08,640 --> 00:06:13,440
Now this is going to allow us to build all of the features you'd expect from a chat app.

76
00:06:13,440 --> 00:06:18,010
And we're going to continue to use socket dot Io to get that done.

77
00:06:18,030 --> 00:06:20,010
That's where we're going to stop for this one.

78
00:06:20,010 --> 00:06:21,870
I'll see you in the next lesson.
