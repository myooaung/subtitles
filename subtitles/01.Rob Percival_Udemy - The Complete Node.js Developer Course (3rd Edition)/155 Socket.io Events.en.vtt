WEBVTT
1
00:00:00.180 --> 00:00:02.910
In this lesson you're going to learn how to use a socket.

2
00:00:02.900 --> 00:00:08.620
Don I owe to transfer data between these server and the client in real time.

3
00:00:08.640 --> 00:00:14.210
Now together in this lesson we're going to work on a little side project so we're not actually going

4
00:00:14.210 --> 00:00:17.200
to set up what's necessary for the chat app.

5
00:00:17.220 --> 00:00:22.880
Instead we'll be creating a little counter application which we'll talk about in a couple of moments.

6
00:00:22.980 --> 00:00:29.640
Once we know how to use socket dot I in the next lesson it'll be your challenge to start creating the

7
00:00:29.640 --> 00:00:32.770
code necessary for the chat app.

8
00:00:32.790 --> 00:00:34.320
So let's go ahead and get started.

9
00:00:34.320 --> 00:00:40.500
In this lesson by creating our little counter application now the account Apple will be a very simple

10
00:00:40.500 --> 00:00:46.720
application allowing us to illustrate how we can use a sound get down I O for real time apps.

11
00:00:46.800 --> 00:00:53.430
The server is going to store a single number called the count and it will share that count with all

12
00:00:53.430 --> 00:00:55.190
connected clients.

13
00:00:55.200 --> 00:01:01.410
The client will render that count in the browser and it will also show the user a button that they can

14
00:01:01.410 --> 00:01:03.780
click to increment the account.

15
00:01:03.780 --> 00:01:09.900
Once the server has the incremented count it will share the new count with all connected clients and

16
00:01:09.900 --> 00:01:12.480
they'll all have their data updated.

17
00:01:12.960 --> 00:01:19.530
So let's go ahead and get started by figuring out how to transfer data from server to client because

18
00:01:19.530 --> 00:01:26.130
what we're going to do initially is share the current count with every connected client.

19
00:01:26.130 --> 00:01:27.390
So right here.

20
00:01:27.390 --> 00:01:32.070
Once a new connection comes in we want to send them the current account.

21
00:01:32.070 --> 00:01:35.120
Now we don't have a count so let's go ahead and create one.

22
00:01:35.190 --> 00:01:38.490
Let count equal zero and down below.

23
00:01:38.490 --> 00:01:44.850
The goal is to send that count back to the client that just opened the connection to get started.

24
00:01:44.850 --> 00:01:48.450
We have to change the parameters that this function accepts.

25
00:01:48.450 --> 00:01:53.430
Right now it's not accepting any though it does get called with an argument right here.

26
00:01:53.460 --> 00:02:01.080
We're going to call that socket socket is an object and it contains information about that new connection.

27
00:02:01.320 --> 00:02:07.530
So right here we can use methods on socket to communicate with that specific client.

28
00:02:07.530 --> 00:02:13.980
Remember if I have five clients connecting to the server this function is going to run five different

29
00:02:13.980 --> 00:02:17.850
times one time for each new connection.

30
00:02:17.850 --> 00:02:24.450
So all we're going to do is add a single line of code right here that sends some data back to that newly

31
00:02:24.450 --> 00:02:31.630
connected client and to do that we use a method on socket which is socket dot emit.

32
00:02:31.740 --> 00:02:38.100
So when we're working with socket dot I O and we're transferring data we are sending and receiving what

33
00:02:38.100 --> 00:02:39.800
are called events.

34
00:02:39.810 --> 00:02:46.710
So right now what I want to do is send an event from the server and I want to receive that event on

35
00:02:46.770 --> 00:02:48.090
the client.

36
00:02:48.090 --> 00:02:55.530
So right here to send an event we use socket dot admit on the server an event is made up of at least

37
00:02:55.530 --> 00:02:58.140
one thing the name of the event.

38
00:02:58.140 --> 00:03:01.460
So in this case there is a built in one called The Connection.

39
00:03:01.700 --> 00:03:04.440
We are going to go ahead and setup a custom one.

40
00:03:04.440 --> 00:03:09.940
Almost all of your events are gonna be custom fitting the needs of your application.

41
00:03:10.020 --> 00:03:14.680
Right here what we're going to do is create a count updated event.

42
00:03:14.700 --> 00:03:20.960
This will be used to send to the initial count to the client and it will also be used later on to send

43
00:03:20.970 --> 00:03:23.350
any changes to the account.

44
00:03:23.400 --> 00:03:26.360
Right here we could just have this in place.

45
00:03:26.370 --> 00:03:27.850
That would be a enough.

46
00:03:27.870 --> 00:03:31.620
We could also send some data which we'll talk about in just a moment.

47
00:03:31.620 --> 00:03:35.580
So right now we are omitting the event from the server to the client.

48
00:03:35.580 --> 00:03:39.950
The problem is that the client is not doing anything to accept it.

49
00:03:39.960 --> 00:03:42.980
So let's make some changes in chat dot J.S..

50
00:03:43.020 --> 00:03:48.940
First up the return value from the IO function that needs to be stored in a variable because we're going

51
00:03:48.940 --> 00:03:55.050
to want to access it in this file a new constant and for that we'll call the constant socket and we'll

52
00:03:55.050 --> 00:03:58.430
set it equal to the function's return value.

53
00:03:58.470 --> 00:04:04.500
So we already had socket on the server that's available right here when the new connection comes in

54
00:04:04.860 --> 00:04:05.790
on the client.

55
00:04:05.790 --> 00:04:10.740
When we initialize the connection we now also get access to socket.

56
00:04:10.740 --> 00:04:17.880
And this is going to allow us to send events and receive events from both the server and the client

57
00:04:18.210 --> 00:04:19.260
now down below.

58
00:04:19.320 --> 00:04:21.360
We don't want to send an event just yet.

59
00:04:21.360 --> 00:04:26.800
We want to receive the event that the server is sending to us and to do that.

60
00:04:26.910 --> 00:04:34.950
We use a different method available on socket which is socket dot on on like we've seen on the server

61
00:04:35.130 --> 00:04:36.570
except two arguments.

62
00:04:36.570 --> 00:04:43.950
The name of the event we call to this count updated and a function to run when that event occurs.

63
00:04:43.950 --> 00:04:51.400
Now it's important that the name right here matches up exactly with the name you picked over here inside

64
00:04:51.420 --> 00:04:58.800
of that function in chat dot J S we can go ahead and do something like render a little message the account

65
00:04:59.310 --> 00:05:01.620
has an updated.

66
00:05:01.620 --> 00:05:02.910
Perfect.

67
00:05:02.910 --> 00:05:04.290
Now then we have this in place.

68
00:05:04.290 --> 00:05:07.080
Let's make sure this message at least shows up.

69
00:05:07.140 --> 00:05:12.870
I would expect it to show up a single time when I first connect what I'm going to do is make sure all

70
00:05:12.870 --> 00:05:15.720
of my files are saved from the browser.

71
00:05:15.720 --> 00:05:18.180
I'm going to crack open the console.

72
00:05:18.180 --> 00:05:20.740
You can use the keyboard shortcut if you know it.

73
00:05:20.760 --> 00:05:24.360
Otherwise more tools developer tools.

74
00:05:24.360 --> 00:05:27.720
Right here we have the console tab which is great.

75
00:05:27.750 --> 00:05:32.670
I'm going to refresh the page to make sure I initialize that connection once again.

76
00:05:32.670 --> 00:05:33.800
And what do I get.

77
00:05:33.840 --> 00:05:36.600
The account has been updated is printing.

78
00:05:36.600 --> 00:05:37.950
So this is fantastic.

79
00:05:37.950 --> 00:05:42.370
It is our server sending some information to the client now.

80
00:05:42.440 --> 00:05:48.630
Currently it's not sending any data just to the event is occurring and the client knows that we could

81
00:05:48.630 --> 00:05:53.190
also transfer data such as the value for account to do that.

82
00:05:53.190 --> 00:05:55.650
We just provide it as a another argument.

83
00:05:55.650 --> 00:06:02.940
So right here count now anything we provide on a minute past that first argument which is the event

84
00:06:02.940 --> 00:06:07.860
name is gonna be available from the callback function on the client.

85
00:06:07.860 --> 00:06:12.810
So right here we're providing a single thing for that callback function count.

86
00:06:12.930 --> 00:06:18.000
And over in the client we can access that right here by providing a name.

87
00:06:18.000 --> 00:06:23.460
Now I could call it count since that makes sense but in reality I could call it whatever I wanted to.

88
00:06:23.550 --> 00:06:25.770
This name can be completely unique.

89
00:06:25.860 --> 00:06:27.870
It is the order that matters.

90
00:06:27.870 --> 00:06:32.820
So right here the second argument is the first argument for the callback function.

91
00:06:32.910 --> 00:06:39.900
I'm going to go ahead and save the server file and over in chat dot J S we're gonna make sure that we

92
00:06:39.900 --> 00:06:42.000
print this count as well.

93
00:06:42.120 --> 00:06:49.470
What I'm gonna do is just add a second argument on to console dialog to dump that count to the terminal

94
00:06:49.770 --> 00:06:55.470
and then we're gonna save all of our files and refresh the browser another time right here.

95
00:06:55.470 --> 00:07:02.160
I give it a refresh and what do I see I see my message with the number 0 right on the end.

96
00:07:02.160 --> 00:07:08.070
So at this point we are sending data from server to client and that is a great start.

97
00:07:08.070 --> 00:07:13.790
What we want to do now though is allow the client to send some data to the server.

98
00:07:13.920 --> 00:07:19.540
What we're going to do is allow the client to click a button to increment that count.

99
00:07:19.800 --> 00:07:22.650
Let's go ahead and figure out how we're gonna get this done.

100
00:07:22.650 --> 00:07:26.940
First up let's go ahead and create a button in index down HDL.

101
00:07:26.940 --> 00:07:31.450
So inside of the body I'm going to add the button just below my chat app.

102
00:07:31.450 --> 00:07:37.160
Text right here we'll create that new button and we'll provide the text plus one.

103
00:07:37.560 --> 00:07:43.940
And we're also going to set up an I.D. for this button so we can easily target it from javascript.

104
00:07:43.980 --> 00:07:49.830
I'll go ahead and set the I.D. equal to something like increment perfect.

105
00:07:49.910 --> 00:07:56.390
Now that we have the button in place let's go ahead and add an event listener and chat dot J S we want

106
00:07:56.390 --> 00:08:01.190
to do something every single time that button is clicked right here.

107
00:08:01.190 --> 00:08:04.300
Well we're going to do is first select it.

108
00:08:04.400 --> 00:08:07.320
So like we've done a few sections ago.

109
00:08:07.400 --> 00:08:14.510
We'll be using document dot query selector to grab just a single element by its I.D..

110
00:08:14.690 --> 00:08:22.950
So right here inside of quotes we start with the hash sign then the I.D. value which we called increment.

111
00:08:23.240 --> 00:08:30.110
And from there we can store this on a variable and access it later or we could simply chain a another

112
00:08:30.110 --> 00:08:35.570
method call to add event listener which is exactly what I'm going to do.

113
00:08:35.630 --> 00:08:42.400
Now the event we're trying to listen for is called click and then we'll set up the function to run whenever

114
00:08:42.410 --> 00:08:49.310
that button is clicked right here console dot log printing clicked to the terminal.

115
00:08:49.310 --> 00:08:54.860
Now let's go ahead and make sure we're at least seeing that show up and if we are that is a great start

116
00:08:55.370 --> 00:08:58.430
over here I can see we have a whole bunch of errors.

117
00:08:58.430 --> 00:09:01.010
This is perfectly normal sense node man.

118
00:09:01.040 --> 00:09:03.790
Shut down the server and restarted it.

119
00:09:03.860 --> 00:09:09.700
So we temporarily lost connection but the client did indeed auto reconnect.

120
00:09:09.770 --> 00:09:14.510
If I go ahead and refresh things I can see my plus one button.

121
00:09:14.510 --> 00:09:20.860
And if I click it I can see my clicked message showing up one time for each time it's clicked.

122
00:09:20.900 --> 00:09:28.620
Now what I want to do is emit an event from the client and have that event listen to for on the server.

123
00:09:28.670 --> 00:09:34.430
So essentially the opposite of what we just did where we emitted from the server and listened on the

124
00:09:34.430 --> 00:09:35.600
client.

125
00:09:35.600 --> 00:09:41.660
So right here when someone clicks that button what am I going to do I'm going to use socket dot emit

126
00:09:41.960 --> 00:09:45.110
this time though from the client right here.

127
00:09:45.110 --> 00:09:48.290
What I'm going to do is provide a name for this event.

128
00:09:48.290 --> 00:09:50.810
I'll call it something like increment.

129
00:09:50.810 --> 00:09:56.930
And in this case I don't need to send any data across since the server knows the current count.

130
00:09:56.960 --> 00:09:59.330
And it's just going to add one to it.

131
00:09:59.330 --> 00:10:03.100
So right here from the client this is enough.

132
00:10:03.110 --> 00:10:09.560
Next up we have to make sure we're listening for this event on the server and responding accordingly.

133
00:10:09.560 --> 00:10:16.700
So over inside of index dot J S if we want to listen of for an event what we do is we add something

134
00:10:16.700 --> 00:10:19.520
else inside of this function right here.

135
00:10:19.520 --> 00:10:28.100
So down below we have to use socket dot on this time using socket dot on from the server.

136
00:10:28.100 --> 00:10:29.570
Now what are we listening for.

137
00:10:29.570 --> 00:10:36.290
I am listening for an event called increment and when I get increment i will provide the function to

138
00:10:36.290 --> 00:10:37.340
run.

139
00:10:37.340 --> 00:10:40.000
Now the question is what do I want to do.

140
00:10:40.130 --> 00:10:43.760
Well in this case what I want to do is one increment the account.

141
00:10:43.790 --> 00:10:45.280
So let's start there.

142
00:10:45.350 --> 00:10:47.650
That is count plus plus.

143
00:10:47.690 --> 00:10:51.620
Next up I want to make sure that the client gets the updated count.

144
00:10:51.620 --> 00:10:54.840
So right here that'll be socket.

145
00:10:55.000 --> 00:11:03.140
I I'm going to emit count updated exactly like I did above and I will provide the account as the data

146
00:11:03.200 --> 00:11:04.670
that I'm sending.

147
00:11:04.670 --> 00:11:09.170
Now we should be able to see that count actually change.

148
00:11:09.200 --> 00:11:14.270
Make sure to save all of the files on both the server and the client from the browser.

149
00:11:14.270 --> 00:11:18.620
I'm going to give things a quick refresh right here.

150
00:11:18.620 --> 00:11:20.650
What I'm going to do is click that button.

151
00:11:20.660 --> 00:11:22.540
And what do I see down below.

152
00:11:22.640 --> 00:11:30.810
I can see that my count is indeed updating in real time which is a fantastic step in the right direction.

153
00:11:30.830 --> 00:11:35.330
Now what I want to take a moment to do is open up a another client as well.

154
00:11:35.810 --> 00:11:42.170
So right here what I'm gonna do is take local host three thousand and copy it to the clipboard and then

155
00:11:42.170 --> 00:11:49.740
going to open up a another browser I'm going to put this over on the right hand side so I can see both

156
00:11:49.740 --> 00:11:51.400
at the exact same time.

157
00:11:52.630 --> 00:11:58.840
And once I have both browser windows open I'll make sure both are navigated to local host three thousand

158
00:11:59.200 --> 00:12:06.150
and I'll crack open the dev tools for this second one now what I should see is a message saying that

159
00:12:06.150 --> 00:12:12.540
the account has been updated to four and that's true by the time that this particular client connects

160
00:12:12.630 --> 00:12:14.490
the account is indeed.

161
00:12:14.790 --> 00:12:22.390
Now the problem is that if this client changes the count only this client gets notified about the chain

162
00:12:22.470 --> 00:12:25.690
shed to prove that all we have to do is click the button.

163
00:12:25.770 --> 00:12:32.180
I'm seeing the message the account has been updated over here but I'm not seeing it over here and that's

164
00:12:32.180 --> 00:12:33.430
a problem.

165
00:12:33.480 --> 00:12:40.350
So to fix that all we need to do is make a small change to how we're emitting the event on the server

166
00:12:40.800 --> 00:12:47.670
when we use socket dot emit we are emitting the event to a particular connection in this case.

167
00:12:47.670 --> 00:12:51.180
We don't want to limit it to just a single connection.

168
00:12:51.180 --> 00:12:54.510
I want to emit it to every connection available.

169
00:12:54.510 --> 00:12:59.790
So we're going to comment out that line which is not working for us and we're going to replace it with

170
00:12:59.790 --> 00:13:04.620
a similar though slightly different one instead of calling socket dot emit.

171
00:13:04.650 --> 00:13:07.370
We'll be calling I O dot emit.

172
00:13:07.380 --> 00:13:12.510
This is going to emit the event to every single connection that's currently available.

173
00:13:12.510 --> 00:13:15.390
And we are going to emit the exact same event.

174
00:13:15.450 --> 00:13:19.170
That is count updated with the exact same data.

175
00:13:19.170 --> 00:13:22.870
So right here as the second argument I'll provide the account.

176
00:13:22.950 --> 00:13:25.090
So these two lines are very similar.

177
00:13:25.110 --> 00:13:28.710
This one emits an event to that specific connection.

178
00:13:28.710 --> 00:13:32.300
This one emits the event to every single connection.

179
00:13:32.340 --> 00:13:35.190
And in this case that is exactly what we want.

180
00:13:35.190 --> 00:13:39.510
So what we're going to do is make sure that we save these server file.

181
00:13:39.510 --> 00:13:45.300
I'm going to go over to Chrome and I'm going to refresh those browser windows right here I have the

182
00:13:45.300 --> 00:13:49.190
first one and in the background I have the second one.

183
00:13:49.260 --> 00:13:52.380
Now when I refresh them both of them start off at zero.

184
00:13:52.380 --> 00:13:53.220
And that's correct.

185
00:13:53.220 --> 00:13:54.960
The server has restarted.

186
00:13:55.080 --> 00:14:01.980
So that count has been reset over here what I'm going to do is click plus 1 and now both in real time

187
00:14:02.160 --> 00:14:07.640
have that data available even though this client wasn't the one that changed the count.

188
00:14:07.680 --> 00:14:13.790
It did get notified about that change and the same would be true if I clicked plus one over here.

189
00:14:13.920 --> 00:14:20.850
Both of the clients are indeed getting that data updated in real time as soon as the button is clicked

190
00:14:21.060 --> 00:14:23.510
we can see the data changing.

191
00:14:23.520 --> 00:14:30.900
So at this point we now know how to use socket dot I O to send data back and forth between the server

192
00:14:30.900 --> 00:14:32.010
and the client.

193
00:14:32.010 --> 00:14:39.120
If we wanted to we could always go ahead and take this count and actually render it to the user interface.

194
00:14:39.120 --> 00:14:45.750
But in this case this little count example is just being used to illustrate some of the basic principles

195
00:14:45.750 --> 00:14:46.920
of socket Don.

196
00:14:46.990 --> 00:14:52.650
Oh so for now that's where we're going to leave the user interface though don't worry when we create

197
00:14:52.730 --> 00:14:56.680
the chat app we will be building out a complete UI.

198
00:14:56.790 --> 00:15:02.070
Now with this in place let's take a quick moment to recap what we've just covered so we can make sure

199
00:15:02.070 --> 00:15:08.520
we actually understand what's going on as in the next lesson it's going to be up to you to emit and

200
00:15:08.520 --> 00:15:14.040
listen to custom events to create some functionality for that chat app.

201
00:15:14.070 --> 00:15:20.120
Right here what we really have is a socket Don Io server that does two things right here.

202
00:15:20.130 --> 00:15:21.920
We have those two things.

203
00:15:21.970 --> 00:15:25.520
These server emits an event that the client receives.

204
00:15:25.530 --> 00:15:32.640
This is called account updated and the client emits an event that the server receives and this is called

205
00:15:32.730 --> 00:15:33.300
increment.

206
00:15:33.330 --> 00:15:34.470
That's all we're doing.

207
00:15:34.920 --> 00:15:41.940
So when a new connection comes in the first thing the server does is it sends the current count to that

208
00:15:41.940 --> 00:15:43.740
specific connection.

209
00:15:43.740 --> 00:15:47.510
Notice I'm using socket dammit here and not I.

210
00:15:47.510 --> 00:15:55.570
Oh dammit if I used I 0 dammit here every time a new client joined old clients would get the account

211
00:15:55.590 --> 00:16:02.100
data and that's a waste because the account hasn't changed so there's no need to send it to everyone.

212
00:16:02.190 --> 00:16:09.160
Now the client receives this event over here and when it gets it it logs the data out to the terminal.

213
00:16:09.180 --> 00:16:15.090
Now that is the first event right here where the server omits any client receives the second one is

214
00:16:15.090 --> 00:16:22.740
when the client admits and the server receives in this case the client emits the increment event when

215
00:16:22.740 --> 00:16:24.250
the button is clicked.

216
00:16:24.270 --> 00:16:27.910
Now it doesn't provide any data but none is necessary.

217
00:16:27.930 --> 00:16:33.160
It's simply enough for the server to run the function when that event occurs.

218
00:16:33.240 --> 00:16:40.920
The function it changes the account incrementing it by one and then it goes ahead and uses I O dot omit

219
00:16:41.280 --> 00:16:48.570
to send that data to every single connected client because the account has changed all of them should

220
00:16:48.570 --> 00:16:50.040
get notified.

221
00:16:50.040 --> 00:16:55.770
Now we can go ahead and remove this line right here as it's commented out and not doing anything.

222
00:16:55.830 --> 00:17:00.840
And I'll also remove those comments that I just pasted in in the next lesson.

223
00:17:00.840 --> 00:17:06.790
It'll be up to you to do something similar though with functionality related to the chat app.

224
00:17:06.810 --> 00:17:08.490
I'm really excited to get to that.

225
00:17:08.490 --> 00:17:10.440
So stay tuned and I'll see you then.
