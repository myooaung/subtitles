1
00:00:00,240 --> 00:00:04,800
In this lesson you're going to learn about the Web socket protocol of the web socket.

2
00:00:04,800 --> 00:00:12,120
Protocol is what we're going to use to create real time applications with node j s now web sockets are

3
00:00:12,120 --> 00:00:14,250
not specific to node J.S..

4
00:00:14,250 --> 00:00:18,540
You could use web sockets with other programming languages as well.

5
00:00:18,540 --> 00:00:26,100
But in this case we'll be using web sockets with no JSA to create our real time chat application.

6
00:00:26,100 --> 00:00:31,770
So what I want to do in this video is just talk about exactly what web sockets are and how they're going

7
00:00:31,770 --> 00:00:36,600
to help us achieve our goal the goal of a real time application.

8
00:00:36,630 --> 00:00:43,800
Now like with the TTP protocol of the web socket protocol is going to allow us to set up communication.

9
00:00:44,040 --> 00:00:46,740
Let's go ahead and see what this is going to look like.

10
00:00:46,740 --> 00:00:49,020
So we'll start off with our server.

11
00:00:49,020 --> 00:00:55,440
In this case it'll be a node J.S. application that starts up a server and we'll learn how to actually

12
00:00:55,440 --> 00:00:58,500
do this with web sockets in the next lesson.

13
00:00:58,650 --> 00:01:02,380
And from here clients can connect to that server.

14
00:01:02,460 --> 00:01:07,190
So I might have one client connect then I might have a few others as well.

15
00:01:07,380 --> 00:01:11,940
For this example let's go ahead and add four clients into the mix.

16
00:01:12,030 --> 00:01:17,350
Now here we have four clients connected to our server using web sockets.

17
00:01:17,370 --> 00:01:20,930
So what exactly is this going to allow us to do.

18
00:01:20,970 --> 00:01:26,790
The first thing we're going to be able to do with the Web socket protocol is achieve what's known as

19
00:01:26,800 --> 00:01:29,520
full duplex communication.

20
00:01:29,520 --> 00:01:36,300
Now that's just a fancy term for bi directional communication which means that the client can initiate

21
00:01:36,330 --> 00:01:42,780
communication with the server and the server can initiate communication with the client.

22
00:01:42,780 --> 00:01:49,240
This is not something we had with each TTP requests with an H TTP request.

23
00:01:49,320 --> 00:01:55,830
It was the client's job to initiate the request asking for data from the server and then the server

24
00:01:55,830 --> 00:01:58,010
would go ahead and respond.

25
00:01:58,110 --> 00:02:03,930
But at any point in time the server couldn't just send data to the client if the client didn't make

26
00:02:03,930 --> 00:02:09,000
an HD TTP request the server had no way of communicating with it.

27
00:02:09,030 --> 00:02:13,440
All of that changes with web sockets with a web socket.

28
00:02:13,440 --> 00:02:19,710
We have a persistent connection which means that the client connects to the server and it stays connected

29
00:02:19,710 --> 00:02:21,840
for as long as it needs to.

30
00:02:21,840 --> 00:02:28,050
So if I'm creating a chat application I can connect to the client which in this case would be a browser

31
00:02:28,200 --> 00:02:35,040
to the server and then the client could send messages to the server and the server whenever it wanted

32
00:02:35,040 --> 00:02:38,790
to could send messages to a client.

33
00:02:38,790 --> 00:02:43,440
So first up very important we have full duplex communication.

34
00:02:43,440 --> 00:02:45,740
Next up Lulu web socket protocol.

35
00:02:45,750 --> 00:02:48,440
It's a separate protocol from each TTP.

36
00:02:48,450 --> 00:02:51,440
That is why we are seeing very different behavior.

37
00:02:51,540 --> 00:02:57,360
And then what we get is a persistent connection between the client and the server which I already talked

38
00:02:57,360 --> 00:02:58,150
about.

39
00:02:58,200 --> 00:03:04,460
So right here the two important things to note is that one we have a persistent connection and two.

40
00:03:04,470 --> 00:03:07,040
We have bi directional communication.

41
00:03:07,080 --> 00:03:14,150
If you understand that then you understand everything necessary to actually create a real time application.

42
00:03:14,160 --> 00:03:16,420
Let's go ahead and see how all of this would work.

43
00:03:16,440 --> 00:03:22,530
In an example to get started let's go ahead and ignore three of our clients focusing on just this one

44
00:03:22,590 --> 00:03:26,550
right here and its connection and communication with these server.

45
00:03:26,550 --> 00:03:31,980
Now in this example we're going to talk about what it would look like if we were creating a chat application

46
00:03:32,220 --> 00:03:34,780
which is exactly what we're going to do.

47
00:03:34,860 --> 00:03:40,230
So right here at the client end and the server are going to communicate and to the communication remember

48
00:03:40,260 --> 00:03:41,910
could be bi directional.

49
00:03:41,910 --> 00:03:46,590
So it goes from either client to server or from server to client.

50
00:03:46,590 --> 00:03:52,640
In this case we're going from client to the server and we're sending a new message across.

51
00:03:52,680 --> 00:03:58,500
So this particular user has typed something in the input field they've clicked the submit button to

52
00:03:58,500 --> 00:04:05,410
post the message to the chat room and that message goes from the client to the server.

53
00:04:05,430 --> 00:04:09,060
Now when the server gets the message it could do nothing.

54
00:04:09,060 --> 00:04:15,670
It could just print it to the terminal or do something else like dump it to a file on the file system.

55
00:04:15,720 --> 00:04:21,030
But what we really want to do is bring our other three clients into the mix.

56
00:04:21,030 --> 00:04:23,600
So the client has sent a message to the server.

57
00:04:23,610 --> 00:04:25,640
We're done with this component.

58
00:04:25,680 --> 00:04:31,560
The next thing we're gonna do is make sure that everyone else connected to that chatroom actually sees

59
00:04:31,590 --> 00:04:34,090
the message that this person typed.

60
00:04:34,140 --> 00:04:38,560
So right here we'll go ahead and bring those three clients into the mix.

61
00:04:38,670 --> 00:04:45,450
And this time we're also going to send some data around this time though it's going to go from the server

62
00:04:45,450 --> 00:04:50,310
to the client something we were not able to do in the past.

63
00:04:50,310 --> 00:04:56,060
So right here the server has said to this client I have a message from another user.

64
00:04:56,160 --> 00:05:02,080
It's going to send that message across to the client and the client can it in the browser the exact

65
00:05:02,080 --> 00:05:05,980
same thing is going to happen with our other two clients as well.

66
00:05:05,980 --> 00:05:09,940
So in this case we have client server communication.

67
00:05:09,940 --> 00:05:15,480
When someone types a message and hits enter and we have server to client communication.

68
00:05:15,550 --> 00:05:22,090
When that message needs to get sent to all other connected users and this is what allows for a real

69
00:05:22,090 --> 00:05:29,980
time application this client over here can get the chat data in real time as soon as the server gets

70
00:05:29,980 --> 00:05:37,550
it it sends it off to the other client and in reality for us it's going to look like it shows up instantly.

71
00:05:37,570 --> 00:05:39,580
So this is what we're working towards.

72
00:05:39,580 --> 00:05:44,980
We're going to work towards implementing the web socket protocol allowing for all of our clients to

73
00:05:44,980 --> 00:05:51,760
stay connected to the server and allowing for the clients and the server to communicate in both directions

74
00:05:51,760 --> 00:05:57,790
which as we've just seen is going to be really important client to server and server to client.

75
00:05:57,790 --> 00:06:03,520
Now we're gonna get that done using these socket dot I O library which we'll be setting up in the very

76
00:06:03,520 --> 00:06:04,790
next lesson.

77
00:06:04,840 --> 00:06:06,290
I'm excited to get to that.

78
00:06:06,310 --> 00:06:08,710
So let's jump right in to the next video.
