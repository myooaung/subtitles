1
00:00:00,240 --> 00:00:05,940
In the last video you learned how to get input from the user via a command line arguments in your note

2
00:00:06,000 --> 00:00:07,630
J.S. application.

3
00:00:07,680 --> 00:00:13,560
We saw that all of the arguments provided to node are passed through into our application and we can

4
00:00:13,560 --> 00:00:17,270
access them via a process dot ARG V.

5
00:00:17,370 --> 00:00:23,790
Now as we were exploring this we also saw that we don't necessarily get these values in the most useful

6
00:00:23,790 --> 00:00:25,280
way possible.

7
00:00:25,380 --> 00:00:32,520
Node doesn't provide any argument passing it's a very bare bones utility allowing us to just access

8
00:00:32,520 --> 00:00:34,080
the raw arguments.

9
00:00:34,110 --> 00:00:40,740
So when I provided this title option with the value things to buy it wasn't passed in a way that's particularly

10
00:00:40,800 --> 00:00:41,610
useful.

11
00:00:41,610 --> 00:00:47,790
I would need to write some code to extract the key and the value from this string something we're not

12
00:00:47,790 --> 00:00:55,170
going to do because most node j s applications use command line arguments in some way and there are

13
00:00:55,170 --> 00:01:01,800
a ton of great NPM packages out there that are gonna make it really easy to set up our commands and

14
00:01:01,830 --> 00:01:03,540
options as we want.

15
00:01:03,540 --> 00:01:07,920
And in this video we're going to explore one of them called yards.

16
00:01:07,920 --> 00:01:12,320
That is why a r g s Let's head over to the browser.

17
00:01:12,320 --> 00:01:16,350
Here I have my one tab on NPM J S dot com.

18
00:01:16,350 --> 00:01:23,730
I'm gonna go ahead and search for that yard's package and right here it is the first one yards is a

19
00:01:23,730 --> 00:01:31,560
pirate themed application which is where the y in args comes from and it is a fantastic utility with

20
00:01:31,560 --> 00:01:39,330
about twenty one million weekly downloads so it is a widely used well tested tool that we can easily

21
00:01:39,330 --> 00:01:41,410
integrate into our application.

22
00:01:41,430 --> 00:01:46,140
Now you might be saying Hey I thought this was a node course and it seems like we're using a lot of

23
00:01:46,140 --> 00:01:47,090
packages.

24
00:01:47,190 --> 00:01:54,000
We already saw that node doesn't provide a ton of argument passing and at this point that is intentional

25
00:01:54,210 --> 00:02:00,060
node has left it up to the community to create various packages each with their own way to solve the

26
00:02:00,060 --> 00:02:01,400
passing problem.

27
00:02:01,440 --> 00:02:06,780
You can then go out and pick the package right for you and args is one of my favorite and it happens

28
00:02:06,780 --> 00:02:09,480
to also be one of the most popular.

29
00:02:09,510 --> 00:02:15,120
So let's go ahead and install it into our project so we can make use of it from the notes app directory

30
00:02:15,180 --> 00:02:16,550
npm install.

31
00:02:16,590 --> 00:02:18,860
I'll be using AI which is the same thing.

32
00:02:18,860 --> 00:02:20,150
It is an alias.

33
00:02:20,280 --> 00:02:27,840
Then the module name yards and the latest version that is at twelve point zero point two.

34
00:02:27,840 --> 00:02:33,270
So we're gonna go ahead and install this into our application then we'll be able to use it to better

35
00:02:33,270 --> 00:02:36,480
pass our command line arguments.

36
00:02:36,480 --> 00:02:37,290
All right.

37
00:02:37,290 --> 00:02:42,950
Everything was installed down below and I'm just gonna take a quick moment to clear the terminal output.

38
00:02:42,960 --> 00:02:49,410
Now let's take advantage of this in app dot J S instead of manually looking at process dot ARG V on

39
00:02:49,410 --> 00:02:50,130
our own.

40
00:02:50,190 --> 00:02:52,590
The first thing we have to do is require it.

41
00:02:52,710 --> 00:02:55,890
And once again I like to go core modules first.

42
00:02:55,890 --> 00:02:56,740
We have none.

43
00:02:56,820 --> 00:03:00,230
Then NPM packages and then our own files.

44
00:03:00,240 --> 00:03:07,080
So right here I'm gonna load in another NPM package alongside of Chuck we're gonna call this variable

45
00:03:07,140 --> 00:03:14,520
yards and we are going to get it from the return value of using require to load in the Yas library.

46
00:03:14,520 --> 00:03:19,490
Now we can actually take advantage of it and that process is super easy.

47
00:03:19,500 --> 00:03:23,050
What I'd like to do is do a little comparing and contrasting.

48
00:03:23,250 --> 00:03:28,560
So to keep the output simple I'm gonna remove this command variable for the moment and I'm going to

49
00:03:28,560 --> 00:03:35,720
remove our if conditions down below and all we're going to do is print out process not ARG V.

50
00:03:35,820 --> 00:03:42,550
Then down below that we're also going to log out something from yards it's yards dot ARG V.

51
00:03:42,630 --> 00:03:48,290
So this is the version of process dot ARG V that yards has passed.

52
00:03:48,300 --> 00:03:51,220
Now we can see exactly how the two are gonna differ.

53
00:03:51,390 --> 00:03:57,900
So let's go ahead and start by running our script node space app dot J S and we're gonna run it with

54
00:03:57,900 --> 00:03:59,070
nothing additional.

55
00:03:59,070 --> 00:04:00,030
What do we get.

56
00:04:00,030 --> 00:04:03,380
We get a lot of information for the first version.

57
00:04:03,390 --> 00:04:07,610
The one that node provides and Jago provides almost nothing.

58
00:04:07,650 --> 00:04:10,550
Here we have an object with two properties.

59
00:04:10,650 --> 00:04:15,990
We have an underscore property which will get populated with various arguments in a little bit.

60
00:04:15,990 --> 00:04:22,930
Once we actually add them and we have dollar sign 0 which is the name of the file that we it.

61
00:04:23,100 --> 00:04:28,160
So let's go ahead and actually add some arguments into the mix and see how Jago is going to help us.

62
00:04:28,260 --> 00:04:34,130
Right here I'm gonna set up the ad command and I'm also going to set up that option once again.

63
00:04:34,200 --> 00:04:42,810
So hyphen hyphen title equals inside of double quotes a name for some note let's use things to buy things

64
00:04:42,840 --> 00:04:43,870
to buy.

65
00:04:43,920 --> 00:04:46,380
Maybe it's some sort of grocery list.

66
00:04:46,380 --> 00:04:51,320
And if I go ahead and run this now we're really going to start to see some of the advantages.

67
00:04:51,330 --> 00:04:56,660
So the first array from node itself contains what we've already seen before.

68
00:04:56,760 --> 00:04:59,010
We have information that's not too useful.

69
00:04:59,010 --> 00:05:05,360
We have our command and we have some unpassable option down below what you args provides us is much

70
00:05:05,420 --> 00:05:06,750
more useful.

71
00:05:06,800 --> 00:05:14,150
Our command shows up in the underscore property right here ad and we have an actual title property on

72
00:05:14,150 --> 00:05:22,310
this object that contains the string value so yards did all the heavy lifting of passing our options

73
00:05:22,310 --> 00:05:24,060
and putting them on this object.

74
00:05:24,080 --> 00:05:25,880
So they're easy to access.

75
00:05:25,880 --> 00:05:31,760
I can access the title property to do something with it like a create a new note and save it to our

76
00:05:31,760 --> 00:05:33,050
data store.

77
00:05:33,050 --> 00:05:39,140
Now this is the most barebones way to use yards since we haven't configured it to do anything special

78
00:05:39,350 --> 00:05:43,940
by default though we actually get some pretty useful behavior to explore that.

79
00:05:44,000 --> 00:05:47,720
Let's go to the terminal down below and clear the terminal output.

80
00:05:47,720 --> 00:05:54,920
We're going to run our script so node space app dot J S and we're going to do that with the help option

81
00:05:55,130 --> 00:06:01,490
something we haven't done anything to create and actually comes by default with yards and it displays

82
00:06:01,550 --> 00:06:05,840
some helpful information about what's going on with our little app.

83
00:06:05,840 --> 00:06:06,850
Now this first part.

84
00:06:06,860 --> 00:06:13,910
This is still coming from our console log on line 5 which we can go ahead and delete it is the second

85
00:06:13,910 --> 00:06:15,320
part we're interested in.

86
00:06:15,320 --> 00:06:21,050
This is what's coming from yards itself so it's printing a little cheat sheet about how to use our tool.

87
00:06:21,080 --> 00:06:25,050
It's showing two options that are available help which shows the help.

88
00:06:25,070 --> 00:06:26,940
That's what we're seeing right here.

89
00:06:27,020 --> 00:06:31,920
And hyphen hyphen version which shows the version number of the tool we're using.

90
00:06:31,970 --> 00:06:38,030
That means we can actually run node app dot J S with that version option.

91
00:06:38,030 --> 00:06:39,050
And what do I get.

92
00:06:39,050 --> 00:06:42,140
I get one point zero point zero.

93
00:06:42,140 --> 00:06:47,960
So by default yards it starts you off on that version and you can always customize it to fit your needs.

94
00:06:47,960 --> 00:06:56,740
Let's go ahead and do that up above I'll leave a little comment customize Yahoo's version and we do

95
00:06:56,740 --> 00:07:01,270
this by accessing yards and calling the version method.

96
00:07:01,270 --> 00:07:06,870
This takes to it a string as its one and only argument and we provide our new version no.

97
00:07:06,910 --> 00:07:10,760
So maybe I'm ready to move on to one point one point zero.

98
00:07:10,810 --> 00:07:12,100
As an example.

99
00:07:12,100 --> 00:07:17,620
Now if we were to save the program and do rerun in that version and command what do we get we get our

100
00:07:17,620 --> 00:07:19,850
new version no showing up.

101
00:07:20,140 --> 00:07:20,690
So yea.

102
00:07:20,700 --> 00:07:26,440
Was it comes with a ton of useful passing and features on its own but it can be configured to do pretty

103
00:07:26,440 --> 00:07:30,970
much anything you want and that's what we're gonna start to get into down below.

104
00:07:31,060 --> 00:07:37,030
I'm going to clear the output and we're going to focus on setting up yards to work with the commands.

105
00:07:37,030 --> 00:07:41,050
We need it to work with for example in the notes application.

106
00:07:41,050 --> 00:07:48,280
People should be able to add notes remove notes read individual notes and list out all their notes.

107
00:07:48,280 --> 00:07:52,450
These are four distinct commands we want to set up and customize.

108
00:07:52,480 --> 00:07:54,810
I want to display help options for each.

109
00:07:54,820 --> 00:08:00,840
I want options so I can pass in data all sorts of things and yards supports all of that.

110
00:08:00,850 --> 00:08:04,780
Let's start by working through one command together the ad command.

111
00:08:05,020 --> 00:08:09,210
So right here create ad command.

112
00:08:09,370 --> 00:08:16,870
And this starts by calling the command method on your ARGs that is yards dot command and we pass to

113
00:08:16,870 --> 00:08:18,310
it an object.

114
00:08:18,310 --> 00:08:24,070
This is our options object where we can customize exactly how this command should work.

115
00:08:24,100 --> 00:08:27,250
Now the first thing we have to provide is a name for the command.

116
00:08:27,260 --> 00:08:28,760
Does it add as it read.

117
00:08:28,780 --> 00:08:29,800
What is it.

118
00:08:29,860 --> 00:08:36,280
Right here we do that by setting up a command property setting its value equal to a string name.

119
00:08:36,550 --> 00:08:41,410
Now I'm gonna start with the ad command so I'll setup ad as the value.

120
00:08:41,410 --> 00:08:45,860
From there we can also add a description to describe exactly what this does.

121
00:08:45,940 --> 00:08:49,180
That happens via the describe property.

122
00:08:49,180 --> 00:08:56,680
This is also a string value and I could have something like add a new note as a way to describe exactly

123
00:08:56,680 --> 00:09:00,040
what this command is supposed to do.

124
00:09:00,070 --> 00:09:03,610
Now we can also set up a third property called handler.

125
00:09:03,610 --> 00:09:08,920
That's the code that's actually going to run when someone uses the ad command.

126
00:09:08,950 --> 00:09:13,830
So down below comma the next property handler.

127
00:09:13,890 --> 00:09:20,790
This needs to be set up with a function value and that function gets executed if the command ever gets

128
00:09:20,790 --> 00:09:21,420
used.

129
00:09:21,420 --> 00:09:24,600
So right here a brand new function.

130
00:09:24,600 --> 00:09:30,060
And for the moment we're gonna have a little place holder console dot log call and we'll just say something

131
00:09:30,060 --> 00:09:33,100
like adding a new note.

132
00:09:33,120 --> 00:09:34,130
Excellent.

133
00:09:34,140 --> 00:09:39,300
Now let's go ahead and see how all of this is going to change our application by running it from the

134
00:09:39,300 --> 00:09:40,730
command line to start.

135
00:09:40,740 --> 00:09:43,650
Let's go ahead and use that help option right here.

136
00:09:43,680 --> 00:09:49,080
I'm gonna run the file using the help option like we did previously and we're going to notice that because

137
00:09:49,080 --> 00:09:51,000
we've registered a new command.

138
00:09:51,090 --> 00:09:58,770
We have a new commands section in apt and J S I have access to the ad command which adds a new note.

139
00:09:58,770 --> 00:10:01,230
Now let's go ahead and actually use it.

140
00:10:01,230 --> 00:10:05,680
So node app dot J s ad and when we run it what do we get.

141
00:10:05,700 --> 00:10:10,250
We get our little message printing to the screen adding a new note is showing up.

142
00:10:10,320 --> 00:10:17,310
So this proves that our handler is indeed running when someone runs our application trying to perform

143
00:10:17,310 --> 00:10:22,010
that ad command which is a fantastic step in the right direction.

144
00:10:22,020 --> 00:10:26,070
Now let's go ahead and add a second command into the mix down below.

145
00:10:26,070 --> 00:10:35,360
We're going to add a remove command so create remove command and once again we are going to use yards

146
00:10:35,420 --> 00:10:38,750
dot command to set that up right here.

147
00:10:38,750 --> 00:10:43,280
Passing in the options object and we'll configure these same three properties.

148
00:10:43,280 --> 00:10:44,960
We need a command name.

149
00:10:45,050 --> 00:10:47,540
I'm gonna call this one remove.

150
00:10:47,540 --> 00:10:49,420
We have to describe our command.

151
00:10:49,430 --> 00:10:54,380
Well we actually don't have to describe it but it is a good idea to describe it.

152
00:10:54,380 --> 00:10:57,060
I'll say something simple like remove a note.

153
00:10:57,350 --> 00:10:59,650
Then we're going to set up our handler function.

154
00:10:59,660 --> 00:11:06,710
So right here setting that function up and providing some code to run when someone uses remove right

155
00:11:06,710 --> 00:11:07,040
here.

156
00:11:07,040 --> 00:11:12,700
Console dialogue removing the note perfect.

157
00:11:12,740 --> 00:11:16,670
Now we can use this second command from our program as well.

158
00:11:16,670 --> 00:11:20,710
And it's also gonna get ended up listed in our help options.

159
00:11:20,810 --> 00:11:25,580
So I'll rerun the command I ran two commands ago to use the help option.

160
00:11:25,580 --> 00:11:28,680
Right here I see remove showing up below add.

161
00:11:28,730 --> 00:11:31,830
Now let's use a remove node app.

162
00:11:31,890 --> 00:11:37,840
J S remove and when I do I can see that removing the note is printing which is great.

163
00:11:37,850 --> 00:11:40,320
That is exactly what we were hoping for.

164
00:11:40,400 --> 00:11:45,480
Now it's gonna be up to you to add two more commands for read and list.

165
00:11:45,680 --> 00:11:49,040
Let's go ahead and talk about what I'd like you to do right here.

166
00:11:49,040 --> 00:11:51,380
I'm going to paste in some challenged comments.

167
00:11:51,380 --> 00:11:54,040
There are three steps for getting this one done.

168
00:11:54,080 --> 00:11:59,630
The big picture goal add two new commands and you can do that right here below the remove command.

169
00:11:59,630 --> 00:12:06,620
Step 1 you're going to set up the list command and for now you can just print a place holder message

170
00:12:06,680 --> 00:12:11,990
saying something like listing out all the notes you want to use list as the name and then you can pick

171
00:12:11,990 --> 00:12:14,370
a description that makes sense something like.

172
00:12:14,380 --> 00:12:19,120
List the notes the other command you're going to create is the read command.

173
00:12:19,160 --> 00:12:23,540
Once again you want to set up the command name you want to give it a description and for the moment

174
00:12:23,600 --> 00:12:29,680
you're going to continue to print some sort of place holder message until we actually wire up the functionality.

175
00:12:29,690 --> 00:12:35,390
Now once you have both of those commands created using the command method I want you to test your work

176
00:12:35,420 --> 00:12:40,850
by running both of them from the terminal and ensuring that you get the correct output.

177
00:12:40,850 --> 00:12:45,650
All right take some time to knock that out when you're done come back and click play

178
00:12:49,390 --> 00:12:50,170
how'd that go.

179
00:12:50,170 --> 00:12:54,360
Let's go ahead and kick things off by working with step 1.

180
00:12:54,460 --> 00:13:00,780
Right here we are going to create that list command so create list command.

181
00:13:00,940 --> 00:13:07,810
We're going to call a yards dot command to register a brand new one and passing in our options object

182
00:13:08,140 --> 00:13:12,390
and we'll start by setting up that command property the name list.

183
00:13:12,430 --> 00:13:19,810
Then we'll set up a describe value something like list your notes or anything similar would have worked

184
00:13:20,070 --> 00:13:22,480
and last up we have to set up a handler.

185
00:13:22,480 --> 00:13:26,130
So I will do just that providing a function value.

186
00:13:26,200 --> 00:13:30,010
And once again I mentioned you can just use a placeholder message for now.

187
00:13:30,040 --> 00:13:34,820
So console dot log something like listing out all notes.

188
00:13:34,870 --> 00:13:35,940
Perfect.

189
00:13:35,980 --> 00:13:36,520
Next up.

190
00:13:36,520 --> 00:13:39,280
Step two we have to create the read command.

191
00:13:39,280 --> 00:13:41,640
So let's go ahead and do that as well.

192
00:13:41,920 --> 00:13:47,280
Create read command with a call to your args dot command.

193
00:13:47,280 --> 00:13:53,080
Down below passing in that same options object and setting up those same three properties.

194
00:13:53,080 --> 00:13:57,730
We're gonna have our command property the name for this one being read.

195
00:13:57,730 --> 00:14:05,590
I'm going to set up describe and right here we'll pick a description read a note and then finally we're

196
00:14:05,590 --> 00:14:11,280
going to set up handler because we want to do something when someone runs that command right here.

197
00:14:12,150 --> 00:14:16,260
A place holder console dot log reading a note.

198
00:14:16,260 --> 00:14:17,340
Excellent.

199
00:14:17,340 --> 00:14:21,120
Now that we have that in place it's time to move on to the most important step.

200
00:14:21,120 --> 00:14:27,990
Step three which is to make sure that the code we wrote actually works as expected and this is a very

201
00:14:27,990 --> 00:14:30,140
important part of every challenge.

202
00:14:30,150 --> 00:14:32,880
Let's go ahead and do just that down below.

203
00:14:32,880 --> 00:14:36,990
To start I'll clear the terminal output and we'll start with the list command.

204
00:14:36,990 --> 00:14:43,840
So node app dot J s list right here listing out all notes shows up.

205
00:14:44,040 --> 00:14:46,770
I misspoke because I spelt things wrong.

206
00:14:46,770 --> 00:14:48,800
It should be listing out all notes.

207
00:14:49,020 --> 00:14:50,040
Excellent.

208
00:14:50,070 --> 00:14:53,120
Then we're gonna go ahead and move on to the read command.

209
00:14:53,130 --> 00:14:55,640
So node app J.S. read.

210
00:14:55,770 --> 00:14:56,580
And what do I get.

211
00:14:56,580 --> 00:14:59,250
Reading a note shows up which is great.

212
00:14:59,250 --> 00:15:00,240
And there we go.

213
00:15:00,240 --> 00:15:07,320
We now have a basic configuration with four commands set up to run code when the command is actually

214
00:15:07,380 --> 00:15:09,170
used in the next video.

215
00:15:09,180 --> 00:15:14,700
We're going to wrap up our discussion of command line arguments by exploring how we can provide additional

216
00:15:14,700 --> 00:15:16,890
options for each of these commands.

217
00:15:16,890 --> 00:15:18,210
I'm excited to get to that.

218
00:15:18,240 --> 00:15:20,880
So let's go ahead and jump right in to the next one.
