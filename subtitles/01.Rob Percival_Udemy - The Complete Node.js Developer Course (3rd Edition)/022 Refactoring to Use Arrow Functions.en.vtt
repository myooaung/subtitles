WEBVTT
1
00:00:00.240 --> 00:00:05.730
In this video as promised we're going to start off with a quick challenge requiring you to use what

2
00:00:05.730 --> 00:00:07.490
you learned in the last one.

3
00:00:07.530 --> 00:00:13.350
Then we're actually going to integrate aero functions into the notes application to kick things off.

4
00:00:13.350 --> 00:00:17.970
Let's go ahead and create a new script in that playground folder where you're going to work through

5
00:00:17.970 --> 00:00:19.080
the challenge.

6
00:00:19.110 --> 00:00:24.330
I'll call it something like three hyphen arrow challenge dot J S.

7
00:00:24.420 --> 00:00:28.290
This is the script you're going to end up working with down below.

8
00:00:28.290 --> 00:00:34.920
We can use control C in a shut down node Mond for the old file and we can run node mod through the new

9
00:00:35.010 --> 00:00:35.700
empty one.

10
00:00:35.940 --> 00:00:44.100
So node on three arrow challenge dot J S Now currently it's not going to print anything but as you start

11
00:00:44.100 --> 00:00:47.850
to add code we'll start to see the output here.

12
00:00:47.940 --> 00:00:54.240
Now the actual challenge is going to require you to expand on a little example I've created and we can

13
00:00:54.240 --> 00:01:00.780
find that by heading over to the browser once again and going to the following You are out its links.

14
00:01:00.780 --> 00:01:08.910
Dot Mead dot I O forward slash arrow hyphen challenge when you visit this U.R.L. it's going to redirect

15
00:01:08.910 --> 00:01:15.570
you over to another Github Gist and right here we have the contents of this javascript file.

16
00:01:15.570 --> 00:01:21.930
Let's take the entire file from the first line and to the twenty first line and bring it over to the

17
00:01:21.960 --> 00:01:22.910
challenge file.

18
00:01:22.920 --> 00:01:24.270
We just created.

19
00:01:24.270 --> 00:01:31.100
So your job is gonna be to expand on the code we have here to get the project to actually work.

20
00:01:31.140 --> 00:01:35.820
If we were to save things in its current state we can see we're getting an error down below.

21
00:01:36.000 --> 00:01:40.110
Let's talk about why the goal here is to essentially fill in the blanks.

22
00:01:40.110 --> 00:01:46.950
I have this tasks object and down below we are trying to use a method on that object which doesn't exist.

23
00:01:46.980 --> 00:01:50.610
It's your job to actually create the method and get things working.

24
00:01:50.640 --> 00:01:55.120
So big picture goal Create method to get incomplete tasks.

25
00:01:55.140 --> 00:01:59.260
So this new method is going to be called get tasks to do.

26
00:01:59.340 --> 00:02:06.150
You're going to define it on the tasks object and the method itself is going to return an array of all

27
00:02:06.150 --> 00:02:09.000
of the tasks that are not completed.

28
00:02:09.000 --> 00:02:14.760
That would include clean yard which has a completed value of false and it would include film course

29
00:02:14.910 --> 00:02:17.880
which also has a completed value of faults.

30
00:02:17.880 --> 00:02:22.810
The method it should not return grocery shopping since that task is already done.

31
00:02:22.860 --> 00:02:27.150
So you can use filter to filter out just the tasks you want.

32
00:02:27.150 --> 00:02:33.240
Now once you have that in place and you are returning the new array of just the incomplete tasks you

33
00:02:33.240 --> 00:02:36.170
can go ahead and save the script to test your work.

34
00:02:36.240 --> 00:02:38.120
I already have a call to the new method.

35
00:02:38.130 --> 00:02:41.160
You'll be creating down below when you save the script.

36
00:02:41.220 --> 00:02:47.080
You should see an array with two objects printing and it should be these two objects right here.

37
00:02:47.100 --> 00:02:49.390
This first one should not show up.

38
00:02:49.560 --> 00:02:54.990
Take as much time as you need to knock that out test your work when you're done come back and click

39
00:02:54.990 --> 00:02:55.400
play

40
00:02:59.350 --> 00:03:00.320
how'd that go.

41
00:03:00.340 --> 00:03:02.870
I'm going to kick things off by defining this method.

42
00:03:02.890 --> 00:03:04.680
Get tasks to do.

43
00:03:04.750 --> 00:03:10.160
I'll do that right here either below or above the tasks property that already exists.

44
00:03:10.180 --> 00:03:11.450
Either way would work.

45
00:03:11.530 --> 00:03:12.750
I'll put it below.

46
00:03:12.940 --> 00:03:15.760
Get tasks to do.

47
00:03:15.970 --> 00:03:21.540
And in this case we do not want to use an arrow function since arrow functions are bad for methods.

48
00:03:21.550 --> 00:03:29.390
We're gonna use a standard function like so now we just learned about the iOS 6 method definition syntax

49
00:03:29.600 --> 00:03:30.950
so we can use that here.

50
00:03:30.950 --> 00:03:33.930
Remember we remove the function keyword and the colon.

51
00:03:33.980 --> 00:03:36.190
Defining our method like this.

52
00:03:36.380 --> 00:03:43.400
Now inside of the function we can move on to Step Two and use filter to return just the in completed

53
00:03:43.610 --> 00:03:44.150
tasks.

54
00:03:44.150 --> 00:03:53.630
So right here I'm going to create this new Array const tasks to do and we are going to set it equal

55
00:03:53.630 --> 00:04:00.260
to a new array which we'll get back from this dot tasks which is our array dot filter which is going

56
00:04:00.260 --> 00:04:02.370
to allow us to filter them.

57
00:04:02.390 --> 00:04:04.630
Now I wanted you to use an arrow function for this.

58
00:04:04.640 --> 00:04:06.780
So that is exactly what I'm going to do.

59
00:04:06.890 --> 00:04:13.880
I start with my arguments then my arrow then my curly braces and in here I want to return true when

60
00:04:13.880 --> 00:04:17.890
the completed value for the task is false.

61
00:04:17.900 --> 00:04:22.610
So right here I'm gonna have access to the individual task.

62
00:04:22.840 --> 00:04:31.490
I'm going to return true when task dot completed is equal to False if it is false.

63
00:04:31.540 --> 00:04:36.120
I want this item to stay in the new array because that's the tasks to do.

64
00:04:36.130 --> 00:04:42.960
All right now that we have that in place we can go ahead and return tasks to do.

65
00:04:43.000 --> 00:04:44.020
Excellent.

66
00:04:44.020 --> 00:04:47.620
If we save the program hopefully things are working and down below.

67
00:04:47.620 --> 00:04:50.350
I'm now seeing the results we expected.

68
00:04:50.350 --> 00:04:55.900
I have clean yard and film course showing up in grocery shopping is nowhere to be found.

69
00:04:55.900 --> 00:05:00.790
Now let's go ahead and make this more concise using what we learned about aero functions.

70
00:05:00.790 --> 00:05:03.730
I'm going to return this array directly.

71
00:05:03.880 --> 00:05:09.160
There's no need to create a variable if we're just going to return it as the next thing we do.

72
00:05:09.220 --> 00:05:14.800
Right here I can save the program and we have the exact same functionality we had before.

73
00:05:14.800 --> 00:05:20.680
From there we can use that shorthand syntax so remember if we have an arrow function that just returns

74
00:05:20.740 --> 00:05:26.740
some result right away we can take that result and we can put it in place of the curly braces.

75
00:05:26.860 --> 00:05:32.920
So I'm going to remove the curly braces and everything inside and we're gonna take task completed.

76
00:05:32.920 --> 00:05:36.490
Equals equals equals false and put it right here.

77
00:05:36.550 --> 00:05:39.120
So task dot completed.

78
00:05:39.430 --> 00:05:41.850
Triple equals false.

79
00:05:41.890 --> 00:05:45.370
Now we have the exact same functionality once again down below.

80
00:05:45.370 --> 00:05:50.620
Everything is still working but we're using that shorthand arrow function syntax.

81
00:05:50.620 --> 00:05:57.640
So for each task in the array this function is still getting called and the function is still returning

82
00:05:57.640 --> 00:05:58.360
true.

83
00:05:58.360 --> 00:06:05.320
If the task is not complete and it's still returning false if the task is complete and then we go we

84
00:06:05.320 --> 00:06:11.470
have completed the challenge getting just a bit more experience working with yes 6 methods and Arrow

85
00:06:11.470 --> 00:06:12.390
functions.

86
00:06:12.400 --> 00:06:17.800
Now I don't typically do challenges like this where I give you code and it's your job to expand on it

87
00:06:17.980 --> 00:06:20.050
but it is something I'm experimenting with.

88
00:06:20.050 --> 00:06:23.940
If you like this format let me know if you thought it was more confusing than helpful.

89
00:06:23.950 --> 00:06:25.830
I'd love to know that as well.

90
00:06:25.900 --> 00:06:29.390
You can just send me a private message through the Udemy platform.

91
00:06:29.410 --> 00:06:31.070
I'd love to hear what you think.

92
00:06:31.300 --> 00:06:35.620
Now that you have a bit more experience working with these we're actually going to integrate everything

93
00:06:35.620 --> 00:06:42.910
we learned into the notes application so I'm gonna close down our 2 files from the playground directory

94
00:06:43.180 --> 00:06:49.930
and we're going to turn our focus to app J S and two notes dot J S where we can take advantage of both

95
00:06:49.930 --> 00:06:50.780
of these.

96
00:06:50.890 --> 00:06:56.660
I'm gonna collapse the playground directory and I'm going to bring us back to the notes app folder.

97
00:06:56.770 --> 00:07:03.970
So from the terminal I'll use controls steed to shut down node man then C D dot dot forward slash Notes

98
00:07:04.060 --> 00:07:10.120
app to go back to the notes app directory and then I'll use clear to clear the terminal output.

99
00:07:10.120 --> 00:07:16.570
Now the goal for this second challenge is for you to refactor every single function in our app which

100
00:07:16.570 --> 00:07:18.090
is maybe only 10.

101
00:07:18.130 --> 00:07:23.500
We have functions in notes Don and ask that are indeed using that function keyword and the same thing

102
00:07:23.500 --> 00:07:29.910
is true in app dot J S every single the function is using the standard function definition.

103
00:07:29.980 --> 00:07:35.680
So over an app dot and J S let's talk about what I'd like you to do as I just mentioned goal refactor

104
00:07:35.740 --> 00:07:42.730
all functions every single function needs to change if that function is a method you're going to use

105
00:07:42.730 --> 00:07:49.670
the iOS 6 method definition syntax which is more concise now otherwise if it's not a method you're gonna

106
00:07:49.690 --> 00:07:53.110
use the most concise arrow function possible.

107
00:07:53.110 --> 00:07:58.840
So as an example let's look at add note when you go through this challenge add note is gonna become

108
00:07:58.870 --> 00:08:02.950
an arrow function as we're not defining it directly on an object.

109
00:08:02.950 --> 00:08:08.590
Now this can't take advantage of these shorthand syntax because there are plenty of statements inside

110
00:08:08.590 --> 00:08:10.500
of there and that's okay.

111
00:08:10.510 --> 00:08:16.930
Other functions like the one right here can indeed take that shorthand syntax into account and in that

112
00:08:16.930 --> 00:08:18.660
case you would want to use it.

113
00:08:18.670 --> 00:08:22.480
So just try to use the most concise syntax possible.

114
00:08:22.480 --> 00:08:28.450
Step 3 test your work whenever we refactor our code we want to make sure we didn't break anything.

115
00:08:28.540 --> 00:08:33.640
So none of the changes you're going to make here should change the app's functionality at all.

116
00:08:33.670 --> 00:08:38.560
Run a few commands just making sure that add and remove work correctly.

117
00:08:38.560 --> 00:08:41.350
All right take some time to knock this one out.

118
00:08:41.350 --> 00:08:45.820
Don't forget to test things out when you're done come back and click play

119
00:08:49.710 --> 00:08:50.610
Let's get to it.

120
00:08:50.620 --> 00:08:54.700
I'll be starting down below with the functions in app dot J S.

121
00:08:54.750 --> 00:08:56.420
These are all methods.

122
00:08:56.450 --> 00:09:02.550
So we're defining a function directly on an object and in all four cases we're going to use the E yes

123
00:09:02.610 --> 00:09:04.470
six shorthand syntax.

124
00:09:04.470 --> 00:09:08.750
So for this function we will remove the colon and the function keyword.

125
00:09:09.120 --> 00:09:13.670
And we're gonna do the same thing down below for the handler for remove.

126
00:09:13.680 --> 00:09:19.080
We'll do it for the handler for list which isn't currently filled out and we'll also do it with the

127
00:09:19.080 --> 00:09:23.350
handler for a read which once again is still something we'll end up building.

128
00:09:23.610 --> 00:09:29.640
That's actually it for app dot J s nothing too bad here we just had a couple of functions that could

129
00:09:29.640 --> 00:09:30.600
be improved.

130
00:09:30.630 --> 00:09:36.290
Now we're going to move on to Step Two work in the other file and actually use aero function.

131
00:09:36.300 --> 00:09:41.690
So over here let's just start from the top of the file and work down for each function.

132
00:09:41.700 --> 00:09:45.320
Now get notes get notes can indeed be an arrow function.

133
00:09:45.360 --> 00:09:50.010
So I'll remove the function keyword and then I'll go ahead and set up the arrow.

134
00:09:50.010 --> 00:09:56.190
Now in this case yes you could have definitely used these shorthand syntax but since I personally know

135
00:09:56.220 --> 00:09:57.950
we'll be adding more code to it.

136
00:09:58.140 --> 00:10:01.640
I'm going to not do that for the moment but if you did that is a.

137
00:10:01.680 --> 00:10:02.830
OK.

138
00:10:03.000 --> 00:10:05.760
Next up we have our ad note function.

139
00:10:05.760 --> 00:10:08.010
This one has plenty of statements inside of there.

140
00:10:08.010 --> 00:10:13.350
There's no chance we're gonna be able to use these shorthand syntax but I can still remove the function

141
00:10:13.380 --> 00:10:18.120
keyword add my arrow in and use the arrow function.

142
00:10:18.120 --> 00:10:20.440
Next up we have our filter method.

143
00:10:20.460 --> 00:10:24.740
So we call filter and we pass to it our callback function.

144
00:10:24.750 --> 00:10:29.880
This is something that can be an arrow function and it's something that can also use that shorthand

145
00:10:29.880 --> 00:10:31.010
syntax.

146
00:10:31.080 --> 00:10:36.660
So one way of refactoring especially when you are newer to a concept is to duplicate the code you're

147
00:10:36.660 --> 00:10:41.760
going to change then comment out a copy so you can see it as a reference.

148
00:10:41.760 --> 00:10:45.330
Now we can build things up using the arrow function.

149
00:10:45.330 --> 00:10:49.590
You didn't need to do this but it's just one approach that can make life a little easier.

150
00:10:49.590 --> 00:10:56.160
So right here for a filter we're going to set up the argument right here in our arrow functions argument

151
00:10:56.220 --> 00:10:56.620
list.

152
00:10:56.640 --> 00:11:02.130
I'll call it note like we did down below then I'm going to set up my arrow and I'll notice that all

153
00:11:02.130 --> 00:11:08.130
I was doing was returning a value so I can use these shorthand syntax and type that expression out right

154
00:11:08.130 --> 00:11:08.910
here.

155
00:11:08.910 --> 00:11:15.660
That was me checking if note dot title equals the title value passed in as the argument.

156
00:11:15.660 --> 00:11:21.920
Now we have the duplicate notes variable getting generated exactly as it was before.

157
00:11:22.020 --> 00:11:28.310
But using these shorter more concise syntax now is shorter and more concise isn't always a good thing.

158
00:11:28.320 --> 00:11:33.570
There are examples in programming where it's nice to actually have code that's readable.

159
00:11:33.630 --> 00:11:39.060
In this case though the arrow function is definitely readable if at first it seems like it's doing more

160
00:11:39.060 --> 00:11:42.720
harm than good in terms of your ability to read code.

161
00:11:42.720 --> 00:11:46.920
I promise that will get easier as you see it more and more down the list.

162
00:11:46.920 --> 00:11:49.140
We have remove note next.

163
00:11:49.140 --> 00:11:54.660
Once again can't use these shorthand syntax but I can still remove the function keyword add the arrow

164
00:11:54.660 --> 00:11:56.550
in and take advantage of that.

165
00:11:56.730 --> 00:12:02.940
From here we can indeed refactor the function we are passing to filter now ahead of time.

166
00:12:02.940 --> 00:12:05.840
I'm just going to take the expression we were returning.

167
00:12:05.970 --> 00:12:10.380
I'm gonna copy that to the clipboard so I can use it for my refactor right here.

168
00:12:10.500 --> 00:12:16.740
I'll remove everything we're passing into filter and I will set up my brand new era function pasting

169
00:12:16.740 --> 00:12:18.590
in this stuff I just cut out.

170
00:12:18.720 --> 00:12:22.160
The only thing left to do is to set up that argument which I had called.

171
00:12:22.170 --> 00:12:28.830
Note next up we keep going down the list we have save notes and we have load notes.

172
00:12:28.830 --> 00:12:33.510
Both can be converted over to aero functions even though they can't use that shorthand syntax.

173
00:12:33.510 --> 00:12:39.750
So right here in Arrow function then down below another arrow function.

174
00:12:39.810 --> 00:12:45.960
Now in this case maybe you made the argument that because we eventually put these on an object they

175
00:12:45.960 --> 00:12:48.690
should just be methods defined here.

176
00:12:48.750 --> 00:12:53.580
The reason we're not doing that is because these functions weren't designed to work with any specific

177
00:12:53.610 --> 00:12:54.240
object.

178
00:12:54.240 --> 00:12:55.760
None of them use this.

179
00:12:55.920 --> 00:12:58.750
So it's not important to maintain this in our case.

180
00:12:58.800 --> 00:13:03.960
This is exactly what we're gonna do here and it's the same approach we'll take and other similar files

181
00:13:04.050 --> 00:13:05.420
throughout the course.

182
00:13:05.430 --> 00:13:07.920
Now the last thing to do was test our work.

183
00:13:07.920 --> 00:13:13.680
So I'm going to remove the challenge comments I'm going to make sure all of my scripts are saved and

184
00:13:13.680 --> 00:13:19.830
we'll head over to notes Jason to see what test data we have to work with to start let's go ahead and

185
00:13:19.830 --> 00:13:21.620
remove the one note we have.

186
00:13:21.630 --> 00:13:26.170
So node app J S remove passing in a value for title.

187
00:13:26.400 --> 00:13:29.370
In this case the title of the one note is list.

188
00:13:29.370 --> 00:13:32.100
I'm gonna go ahead and remove it by running the command.

189
00:13:32.160 --> 00:13:34.250
And when do I get it seems that things work.

190
00:13:34.260 --> 00:13:36.620
The notes gone and we got our message.

191
00:13:36.630 --> 00:13:41.730
Now if I were to rerun it I would expect to see the error message since there are no notes and we can't

192
00:13:41.730 --> 00:13:43.320
remove this one.

193
00:13:43.320 --> 00:13:44.820
So remove is working.

194
00:13:44.880 --> 00:13:47.310
Let's go ahead and add a note right here.

195
00:13:47.310 --> 00:13:52.980
Note app dot J s ad we will pick a title for this new note.

196
00:13:53.070 --> 00:14:00.090
I'll set the title equal to the string T and then we'll set up the body as well equal to the string

197
00:14:00.210 --> 00:14:01.110
beat.

198
00:14:01.110 --> 00:14:05.870
Now if I go ahead and run that it should add the new note to my array and it's showing up.

199
00:14:05.970 --> 00:14:11.630
And if I were to rerun that command it should run the other code since a duplicate would be found.

200
00:14:11.640 --> 00:14:15.280
And right here I can see that note title is taken.

201
00:14:15.300 --> 00:14:16.140
So there we go.

202
00:14:16.140 --> 00:14:17.400
We did some refactoring.

203
00:14:17.430 --> 00:14:22.920
We made sure our refactoring didn't break anything and now we're ready to continue on to the next video.

204
00:14:22.920 --> 00:14:28.080
As we start to wrap up this little demonstration project showing off what node can do.

205
00:14:28.200 --> 00:14:29.420
I'm excited to get to that.

206
00:14:29.520 --> 00:14:31.570
Let's jump right in to the next one.
