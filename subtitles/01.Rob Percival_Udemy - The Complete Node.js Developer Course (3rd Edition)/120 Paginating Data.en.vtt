WEBVTT
1
00:00:00.210 --> 00:00:06.120
In this video we're going to continue to expand on our get tasks request adding other options that the

2
00:00:06.120 --> 00:00:11.820
consumer of the API can use to further refine the data that they get back.

3
00:00:11.820 --> 00:00:17.130
And in this lesson we're going to focus on enabling what's known as Pangea nation.

4
00:00:17.130 --> 00:00:21.150
Let's go ahead and move to Google to find a good page nation example.

5
00:00:21.270 --> 00:00:27.460
What I'm going to do is take one of my tabs and just google Paget nation examples and we'll go ahead

6
00:00:27.460 --> 00:00:29.990
and find a good result in the search results.

7
00:00:30.010 --> 00:00:32.310
And right here we actually have one.

8
00:00:32.470 --> 00:00:39.790
The Google search results use Paget nation the pageant nation examples search returned to six million

9
00:00:39.790 --> 00:00:40.540
results.

10
00:00:40.540 --> 00:00:44.110
I do not have six million results on this page.

11
00:00:44.110 --> 00:00:48.070
Instead I have the first 10 if I want to see more.

12
00:00:48.070 --> 00:00:55.240
Down at the bottom I can go to Page 2 to view the next 10 page three to view that third set of 10 and

13
00:00:55.240 --> 00:00:57.150
so on and so forth.

14
00:00:57.160 --> 00:00:59.110
This is pageant nation.

15
00:00:59.110 --> 00:01:03.640
It is the idea of creating pages of data that can be requested.

16
00:01:03.670 --> 00:01:06.280
So you're not fetching everything all at once.

17
00:01:06.310 --> 00:01:13.160
If I have 700 complete tasks I don't want to fetch and show seven hundred at the same time.

18
00:01:13.270 --> 00:01:18.600
I could show maybe the first ten or the first 50 then fetch more if needed.

19
00:01:18.610 --> 00:01:22.950
So in the case of Google they actually show you page numbers that you click between.

20
00:01:22.960 --> 00:01:26.230
But this is not the only way to implement pageant nation.

21
00:01:26.230 --> 00:01:31.420
You've probably seen other Web sites and applications show you a button when you get to the bottom of

22
00:01:31.420 --> 00:01:35.190
the list something that says load more or view more.

23
00:01:35.290 --> 00:01:41.290
You click the button and it depends more results right there and you continue to scroll down even other

24
00:01:41.290 --> 00:01:46.720
applications use what you would typically call something like an infinite scrolling application such

25
00:01:46.720 --> 00:01:53.800
as Instagram where it's automatically fetching the next pages of data behind the scenes as you're scrolling.

26
00:01:54.220 --> 00:01:59.890
So that means that the user never needs to manually request more data it's automatically fetched for

27
00:01:59.890 --> 00:02:06.220
you now regardless of what three of those approaches you actually want to implement for your app.

28
00:02:06.220 --> 00:02:08.320
The back end is going to be the same.

29
00:02:08.320 --> 00:02:16.060
We need a way for people requesting their tasks to specify which page of data they're trying to fetch.

30
00:02:16.060 --> 00:02:20.440
And we're going to do that by setting up two new options for this request.

31
00:02:20.440 --> 00:02:24.430
There are two options we're going to enable to add support for Paget nation.

32
00:02:24.430 --> 00:02:28.060
The first is limit and the second is Skip.

33
00:02:28.060 --> 00:02:33.670
Now both of these are going to get set equal to numbers and let's see how they would be used to recreate

34
00:02:33.670 --> 00:02:37.690
the behavior we're seeing with Pangea nation on Google right here.

35
00:02:37.690 --> 00:02:40.390
That is get forward slash tasks.

36
00:02:40.390 --> 00:02:46.870
We'll be setting up that query string and I will start with limit limit allows us to limit the number

37
00:02:46.870 --> 00:02:49.970
of results we get back for any given request.

38
00:02:49.990 --> 00:02:54.260
Now in the case of Google we saw that regardless of which page we go to.

39
00:02:54.340 --> 00:02:56.950
We're just getting Ted results right here.

40
00:02:57.070 --> 00:03:00.180
If that's what we wanted we would set it equal to 10.

41
00:03:00.190 --> 00:03:03.580
Now maybe you want to go way more than that like 50 or 100.

42
00:03:03.610 --> 00:03:04.510
That's fine too.

43
00:03:04.510 --> 00:03:07.630
You can set limit equal to that value.

44
00:03:07.630 --> 00:03:11.710
Now the other half of the equation is Skip right here.

45
00:03:11.710 --> 00:03:14.730
Skip is also going to get set equal to a number.

46
00:03:14.830 --> 00:03:18.160
And this is what allows you to iterate over pages.

47
00:03:18.160 --> 00:03:23.300
So if I skip zero and get 10 I'm getting the first 10 results.

48
00:03:23.410 --> 00:03:28.580
If I skip 10 and then get 10 I'm getting the second set of 10.

49
00:03:28.600 --> 00:03:32.300
So right here with zero I'm getting the first page on Google.

50
00:03:32.410 --> 00:03:38.260
If I set it equal to 10 I'm skipping that first page getting the second page on Google.

51
00:03:38.260 --> 00:03:43.330
And if I set it equal to 20 I get the third page and so on and so forth.

52
00:03:43.360 --> 00:03:45.970
Now you could customize it to be whatever you want it.

53
00:03:45.970 --> 00:03:52.240
You can have pages of 50 pages of 1 or pages of 1000 by adding support for limit.

54
00:03:52.270 --> 00:03:54.880
And skip the client making the request.

55
00:03:54.910 --> 00:03:58.490
We'll be able to customize how they want to use pages nation.

56
00:03:58.540 --> 00:04:01.390
That we've seen what you are El structure is going to look like.

57
00:04:01.390 --> 00:04:05.380
We need to figure out how we're going to provide this information to Mongoose.

58
00:04:05.410 --> 00:04:13.360
So Mongoose can correctly populate the tasks and the answer is that we provide an options property right

59
00:04:13.360 --> 00:04:14.010
here.

60
00:04:14.140 --> 00:04:20.170
This options property can be used for Padgett nation and it can also be used for sorting which is a

61
00:04:20.170 --> 00:04:22.690
topic we'll cover in the next lesson.

62
00:04:22.690 --> 00:04:25.220
For now though we're not going to worry about that.

63
00:04:25.240 --> 00:04:30.760
Well we have access to set on options is both limit and skip.

64
00:04:30.760 --> 00:04:38.020
So right here I can set limit equal to two to limit it to just two tasks.

65
00:04:38.020 --> 00:04:40.810
Let's go ahead and see if this actually works.

66
00:04:40.900 --> 00:04:42.700
I'm going to save the program.

67
00:04:42.700 --> 00:04:46.180
I'm going to head over to postmen and we'll try it out.

68
00:04:46.180 --> 00:04:51.640
Now I am going to remove the completed query parameter as I want to make sure that I am getting all

69
00:04:51.640 --> 00:04:55.720
four tasks back in terms of whether or not they're completed.

70
00:04:55.720 --> 00:04:58.080
But I should only see two cents.

71
00:04:58.090 --> 00:04:59.450
That's what I've asked for.

72
00:04:59.470 --> 00:05:04.030
Right here I get just first and second showing up.

73
00:05:04.030 --> 00:05:08.520
Now if I were to change limit to a different value I would see that many of it.

74
00:05:08.590 --> 00:05:11.290
But what we're going to do is allow the user to provide it.

75
00:05:11.740 --> 00:05:16.210
So what I'm gonna do right here is use the following I am going to use.

76
00:05:16.240 --> 00:05:17.380
Pass it.

77
00:05:17.380 --> 00:05:25.060
It's a function provided by javascript which allows us to pass a string that contains a number into

78
00:05:25.060 --> 00:05:26.430
an actual Sure.

79
00:05:26.540 --> 00:05:28.480
Which is what Mongoose expects.

80
00:05:28.490 --> 00:05:34.510
Remember when someone provides a value as part of that query string it's always going to be a string.

81
00:05:34.520 --> 00:05:40.100
We saw that with our value that we need to be a boolean right here and in the case of these numbers

82
00:05:40.130 --> 00:05:47.440
they're not numbers in JavaScript they are strings with the characters 10 0 or 2 0 inside of them.

83
00:05:47.480 --> 00:05:49.710
So we will pass the following integer.

84
00:05:49.760 --> 00:05:50.480
What do we have.

85
00:05:50.480 --> 00:05:54.330
We have request done query adopt limit.

86
00:05:54.350 --> 00:05:56.400
So here we're taking the limit if any.

87
00:05:56.510 --> 00:05:59.070
Passing it and sending an equal to the value.

88
00:05:59.090 --> 00:06:04.730
Now if limit isn't provided or it's not a number it's going to be ignored by Mongoose which means that

89
00:06:04.730 --> 00:06:08.320
we're only going to limit when it's actually a number that's provided.

90
00:06:08.360 --> 00:06:09.750
Which is handy.

91
00:06:09.800 --> 00:06:15.620
So right here we can save the task router we can head over to postmen and test this out.

92
00:06:15.650 --> 00:06:21.580
Now if I fire off the request in its current state I would expect to see all four results right here.

93
00:06:21.590 --> 00:06:23.560
That's exactly what I'm getting.

94
00:06:23.690 --> 00:06:25.110
Now let's go ahead and set up.

95
00:06:25.140 --> 00:06:26.660
Limit up above.

96
00:06:26.660 --> 00:06:33.710
I'm gonna set limit equal to I'll go ahead and start off with one I fire that off and right here I get

97
00:06:33.710 --> 00:06:39.740
just the first one I could change it to three if I wanted to pad unit in groups of three.

98
00:06:39.740 --> 00:06:45.900
Down below I get the first three results and I could set it to something even higher like 10.

99
00:06:45.920 --> 00:06:52.460
Now in this case I don't even have 10 results but down below I do get the first 10 that exist in this

100
00:06:52.460 --> 00:06:54.160
case it's just 4.

101
00:06:54.230 --> 00:06:59.200
If there were more though they would show up as the limit has been set to 10.

102
00:06:59.330 --> 00:07:05.420
Now that we have that in place we want to go ahead and also set up support for Skip currently all we

103
00:07:05.420 --> 00:07:10.880
can do is limit the number of tasks but we can't get the next group of whatever.

104
00:07:10.880 --> 00:07:17.780
So if I want to limit in pages of two I can get the first two but I have no way to get the second to

105
00:07:18.020 --> 00:07:21.890
what I'd want to do is set skip to two in order to get that done.

106
00:07:22.190 --> 00:07:26.000
Let's go ahead and actually enable this over in visual studio code.

107
00:07:26.150 --> 00:07:31.850
I'm going to switch over to visual studio code and this is gonna be your challenge for the video so

108
00:07:31.850 --> 00:07:38.270
I'll paste those challenge comments up above what you're gonna do is set up support for the skip option

109
00:07:38.450 --> 00:07:45.440
much like we just set up limit down below you want to make sure to pass the skip query parameter then

110
00:07:45.440 --> 00:07:49.040
you want to use that as the value for the skip option.

111
00:07:49.040 --> 00:07:53.260
Now once you have that in place like we do below you want to test things out.

112
00:07:53.420 --> 00:07:58.200
So over from post man first fetch the first page of two results.

113
00:07:58.340 --> 00:08:02.770
Then fetch the third page of two results for that first page.

114
00:08:02.780 --> 00:08:07.340
I would expect to see the first and second tasks for the third page.

115
00:08:07.340 --> 00:08:12.410
I would get nothing as there is no fifth or sixth task in the database.

116
00:08:12.560 --> 00:08:18.710
Then fetch the first page of three and the second page of three the first page of three should contain

117
00:08:18.710 --> 00:08:20.440
those first three tasks.

118
00:08:20.570 --> 00:08:27.440
And the second page of three should contain just one which would be the fourth task we have in the database.

119
00:08:27.440 --> 00:08:32.390
So take some time to knock that out and test your work when you're done come back and click play

120
00:08:36.430 --> 00:08:37.170
now that go.

121
00:08:37.180 --> 00:08:41.200
Let's go ahead and kick things off by setting up the skip option down below.

122
00:08:41.230 --> 00:08:45.880
So right here the option on the options object is Skip.

123
00:08:45.880 --> 00:08:53.290
And once again we're gonna use pass in because we have to provide a no request dot query dot right here.

124
00:08:53.290 --> 00:08:55.800
Skip will allow us to get that done.

125
00:08:55.990 --> 00:08:59.430
Now that's actually all we need to do in terms of code changes.

126
00:08:59.500 --> 00:09:04.650
Now though I do want to fetch the pages by two and then by three.

127
00:09:04.780 --> 00:09:08.930
Let's go ahead and kick that off over inside of post man.

128
00:09:08.950 --> 00:09:14.430
So right here I am limiting by two and I'm going to set up skip right here.

129
00:09:14.470 --> 00:09:21.100
I can set skip equal to zero or I could choose to leave it off altogether and this would give me the

130
00:09:21.100 --> 00:09:22.360
first two results.

131
00:09:22.390 --> 00:09:24.960
So down below that is exactly what I get.

132
00:09:24.970 --> 00:09:27.210
I'm getting my first page of two.

133
00:09:27.370 --> 00:09:31.530
Now if I wanted the second page of two I would set skip equal to two.

134
00:09:31.600 --> 00:09:36.400
But I asked you for the third page of two which would be to skip four.

135
00:09:36.460 --> 00:09:41.360
So right here if I fire that off it's grabbing the fifth and sixth task.

136
00:09:41.380 --> 00:09:42.510
Those don't exist.

137
00:09:42.520 --> 00:09:44.950
So down below we get nothing.

138
00:09:44.950 --> 00:09:48.010
Next up I wanted you to fetch by pages of three.

139
00:09:48.460 --> 00:09:55.180
So here I'll set limit to three and I'll start by fetching the first page by setting skip equal to zero.

140
00:09:55.320 --> 00:10:00.280
I fire that off and I get the first of these second and third tasks.

141
00:10:00.280 --> 00:10:01.930
That is all I'm getting back.

142
00:10:02.080 --> 00:10:07.690
If I wanted to get the second page which is what I asked you to do you would set skip to three.

143
00:10:07.690 --> 00:10:13.870
You skip those third three excuse me you skip those first three and you get the next three.

144
00:10:13.870 --> 00:10:17.680
Now we only have one item in that next page of three.

145
00:10:17.680 --> 00:10:23.640
It is fourth showing up though if there was a fifth and a sixth those would show up here as well.

146
00:10:23.680 --> 00:10:28.240
So now that we have this in place we have a page nations set up for tasks.

147
00:10:28.240 --> 00:10:34.690
Someone could use pages nation with the completed option at the exact same time to really customize

148
00:10:34.690 --> 00:10:35.280
their data.

149
00:10:35.740 --> 00:10:42.910
I could pageant over all of my incomplete tasks or I could pad unit over all of my completed tasks.

150
00:10:42.910 --> 00:10:44.910
The choice is mine.

151
00:10:44.920 --> 00:10:47.680
Next up we're going to focus on sorting data.

152
00:10:47.890 --> 00:10:54.580
So if we want to get our data back in a specific order such as with the oldest incomplete tasks first

153
00:10:54.880 --> 00:10:57.250
we need a way to actually get that done.

154
00:10:57.280 --> 00:10:59.850
We're going to set that up in the next lesson.

155
00:10:59.890 --> 00:11:03.400
So I'm going to save the file here and I'll see you in the next one.
