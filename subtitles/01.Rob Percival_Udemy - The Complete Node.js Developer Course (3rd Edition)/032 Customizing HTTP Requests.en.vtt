WEBVTT
1
00:00:00.270 --> 00:00:03.960
In this video we're going to continue to explore our request.

2
00:00:03.960 --> 00:00:08.130
We're going to learn how a request can automatically pass the Jason for us.

3
00:00:08.130 --> 00:00:13.680
We're also going to figure out how we can actually print a forecast using the response data.

4
00:00:13.890 --> 00:00:20.400
And finally we're going to explore some options for the dark sky API allowing us to do things like change

5
00:00:20.400 --> 00:00:27.150
the language from something like English to French and change the units from something like Imperial

6
00:00:27.150 --> 00:00:33.660
over to as I say you could get the temperature back in Celsius as opposed to Fahrenheit.

7
00:00:33.660 --> 00:00:39.750
Let's get started by having the request module automatically pass the Jason response for us.

8
00:00:39.750 --> 00:00:46.140
We can do this by customizing the options object and there is a list of all available options over in

9
00:00:46.140 --> 00:00:47.600
the documentation.

10
00:00:47.640 --> 00:00:54.150
So if I head back over to the request module page and scroll down to the table of contents way near

11
00:00:54.150 --> 00:00:56.990
the bottom we have all available options.

12
00:00:57.000 --> 00:01:01.620
If we click this this is going to list out all of the options we can use.

13
00:01:01.620 --> 00:01:06.100
Now up top we already have the you are Al option which we've already used.

14
00:01:06.180 --> 00:01:11.480
If we scroll down the list a little ways we're going to see a Jason option.

15
00:01:11.550 --> 00:01:19.770
Jason in lower case can get set to equal True or false in our case we're gonna set Jason to true which

16
00:01:19.770 --> 00:01:23.450
is going to have the request module automatically pass.

17
00:01:23.490 --> 00:01:25.860
Jason responses for us.

18
00:01:25.860 --> 00:01:28.540
So over inside of our code what do we need to do.

19
00:01:28.590 --> 00:01:31.500
We're going to add a second property onto this object.

20
00:01:31.500 --> 00:01:36.720
So right here alongside of you are L we'll set up Jason in lower case.

21
00:01:36.720 --> 00:01:38.160
This is important.

22
00:01:38.160 --> 00:01:40.710
If you use uppercase it's not gonna work.

23
00:01:40.950 --> 00:01:47.010
Then we're going to set it equal to the Boolean true saying we would like a request to pass this as

24
00:01:47.280 --> 00:01:48.280
Jason.

25
00:01:48.300 --> 00:01:50.500
Now from here that means response.

26
00:01:50.520 --> 00:01:53.100
That body is already going to be an object.

27
00:01:53.100 --> 00:01:56.130
There is no need to actually pass it.

28
00:01:56.130 --> 00:01:59.760
So let's go ahead and change what we're doing inside of our function.

29
00:01:59.760 --> 00:02:06.510
Right here I am going to use console dialog to print the same stuff using our new setup.

30
00:02:06.510 --> 00:02:14.060
That would be first up response response dot body still exists though since we've set Jason to true

31
00:02:14.220 --> 00:02:15.460
is no longer a string.

32
00:02:15.500 --> 00:02:22.520
It is now the past object from there we're going to access currently which is what we were already accessing

33
00:02:22.610 --> 00:02:23.330
and dumping.

34
00:02:23.330 --> 00:02:25.430
That's what we're seeing down below.

35
00:02:25.430 --> 00:02:27.220
Now we can save apt out in J.

36
00:02:27.210 --> 00:02:30.500
S. I can rerun the program and what do we get.

37
00:02:30.500 --> 00:02:32.560
We get the exact same response.

38
00:02:32.570 --> 00:02:38.720
I have my object showing up with my current information it's still clear and the temperature has increased

39
00:02:38.720 --> 00:02:43.060
a little bit to fifty seven point five five degrees.

40
00:02:43.520 --> 00:02:49.040
So now that request is passing the Jason for us we don't have to manually add that code every single

41
00:02:49.040 --> 00:02:54.140
time we're trying to make an HDTV request from node j s from here.

42
00:02:54.140 --> 00:02:57.860
I want to focus on printing a forecast to the user.

43
00:02:57.860 --> 00:03:03.050
Now that means we have to figure out what data to include and what to leave off and that can be tricky

44
00:03:03.050 --> 00:03:07.230
to do when you're looking at a dump of your data from the terminal.

45
00:03:07.250 --> 00:03:14.170
I find it much easier to use the browser to explore what data I want to include from a Jason response.

46
00:03:14.240 --> 00:03:20.300
Now currently the information we're seeing is very hard to pass since it is just a Jason string.

47
00:03:20.300 --> 00:03:26.810
There are chrome extensions out there though that allow you to see nice past formatted data that are

48
00:03:26.810 --> 00:03:31.940
extensions for other browsers as well like Chrome Firefox and Internet Explorer.

49
00:03:31.940 --> 00:03:39.630
So what I'm going to do is search chrome extension and the one we're going to use is called Jason for

50
00:03:39.660 --> 00:03:43.870
matter though there are literally dozens of different options out there.

51
00:03:43.920 --> 00:03:48.580
Right here I have the chrome extension and all I'm going to do is install it.

52
00:03:48.630 --> 00:03:55.890
I'll take a quick moment to add it to Chrome and once we have it installed successfully we can go ahead

53
00:03:55.890 --> 00:03:59.280
and move back to that page refresh things.

54
00:03:59.280 --> 00:04:05.280
And this time the chrome extension is going to notice that Jason has been returned and it's going to

55
00:04:05.280 --> 00:04:06.830
pass it for us.

56
00:04:06.870 --> 00:04:09.000
Now over here with this particular extension.

57
00:04:09.000 --> 00:04:15.120
I can also view the raw data should I want to but the whole goal is to view the past data.

58
00:04:15.120 --> 00:04:20.090
Now we can collapse the various properties easily navigating what we have here.

59
00:04:20.190 --> 00:04:21.870
So we have this root object.

60
00:04:21.870 --> 00:04:29.650
It starts up here on line 1 and it gets closed way way down below at the very end of this object.

61
00:04:29.670 --> 00:04:35.990
So way down here on the last line everything inside of there is part of that object.

62
00:04:36.000 --> 00:04:40.330
Now this object is accessible to us as body.

63
00:04:40.380 --> 00:04:47.820
So an unneccessary response body I am accessing this object from there I can grab any of its properties

64
00:04:47.880 --> 00:04:48.930
like currently.

65
00:04:48.990 --> 00:04:55.500
Which is the fourth one listed that's why response dot body dot currently works.

66
00:04:55.530 --> 00:05:02.490
I could also use response dot body dot time zone as shown here to get the time zone for the current

67
00:05:02.670 --> 00:05:03.830
location.

68
00:05:03.840 --> 00:05:09.420
So now we have a slightly better idea as to how we're accessing this information below.

69
00:05:09.420 --> 00:05:14.260
Currently we have a minute early so we can get a minute by minute forecast.

70
00:05:14.310 --> 00:05:20.820
If I was to collapse that we have hourly below that we have daily and below that we have some flags

71
00:05:20.970 --> 00:05:26.150
and we also have the offset which are not particularly useful for our purposes.

72
00:05:26.150 --> 00:05:27.900
Now what are we trying to do here.

73
00:05:27.900 --> 00:05:33.480
Well currently we're just going to use the currently property that we do have other forecast information

74
00:05:33.480 --> 00:05:37.770
we could use to get even more data which we'll explore a little later.

75
00:05:37.770 --> 00:05:44.070
So for now we're just going to focus on this object and all of the properties are values we can use.

76
00:05:44.100 --> 00:05:49.000
Let's go ahead and talk about exactly what type of forecast we'd like to print down below.

77
00:05:49.050 --> 00:05:51.160
I have some challenged comments.

78
00:05:51.240 --> 00:05:57.000
It's going to be up to you to use the information on currently to print a little message using that

79
00:05:57.030 --> 00:05:58.830
actual information.

80
00:05:58.860 --> 00:06:01.570
So in general the goal is to print something like this.

81
00:06:01.620 --> 00:06:08.490
It is currently fifty eight point five five degrees out there is a zero percent chance of rain.

82
00:06:08.940 --> 00:06:15.420
Now this piece of information the current temperature and this piece of information the chance of precipitation.

83
00:06:15.540 --> 00:06:18.450
They're both available on that currently object.

84
00:06:18.450 --> 00:06:20.050
I have a temperature property.

85
00:06:20.160 --> 00:06:25.300
This is where I get the temperature from and I also have properties related to precipitation.

86
00:06:25.410 --> 00:06:29.910
Right here I have pre sip probability currently at zero.

87
00:06:29.940 --> 00:06:35.000
So using these two pieces of information we want to generate the following forecast.

88
00:06:35.040 --> 00:06:41.310
That means you're going to comment out this line or remove it and add another council log call in to

89
00:06:41.310 --> 00:06:42.540
print your forecast.

90
00:06:42.600 --> 00:06:45.120
From there you're going to test your work.

91
00:06:45.120 --> 00:06:50.910
So you want to run the script and make sure you're seeing your string with the correct values added

92
00:06:51.090 --> 00:06:52.140
inside.

93
00:06:52.140 --> 00:06:57.930
Take as much time as you need to generate this string using those two pieces of dynamic information.

94
00:06:57.990 --> 00:07:02.120
And when you're done come back and click play and we'll work through it together.

95
00:07:06.130 --> 00:07:06.850
How that go.

96
00:07:06.850 --> 00:07:10.000
Let's get things started by working with our message.

97
00:07:10.000 --> 00:07:15.520
So I'm going to use console dot log to print something and that something is the string right here with

98
00:07:15.520 --> 00:07:17.920
those two dynamic values included.

99
00:07:17.920 --> 00:07:21.670
So we start off with some static text I'll create that in a string.

100
00:07:21.670 --> 00:07:28.560
It is currently followed by a space then we're going to concatenate on the actual temperature.

101
00:07:28.600 --> 00:07:29.950
So like we did before.

102
00:07:29.950 --> 00:07:33.960
That's going to be response dot body dot currently.

103
00:07:34.210 --> 00:07:37.310
That's going to bring us to this object right here.

104
00:07:37.390 --> 00:07:41.800
And on that object we have the temperature property which is the one we're looking for.

105
00:07:41.830 --> 00:07:45.410
So dot temperature Excellent.

106
00:07:45.570 --> 00:07:52.020
Now after the temperature we go back to some static text so I'll concatenate on another string and we

107
00:07:52.020 --> 00:07:57.000
will start with a space the space between the temperature and the D in degrees.

108
00:07:57.000 --> 00:08:06.230
Now I'll start typing out degrees out period followed by the start of the next sentence there is a space

109
00:08:06.500 --> 00:08:10.470
and in here we have to insert the percent chance of rain.

110
00:08:10.520 --> 00:08:19.650
So once again I'm going to concatenate on a value that will be a response dot body dot currently dot.

111
00:08:19.730 --> 00:08:23.250
And right here we are looking for pre-set probability.

112
00:08:23.390 --> 00:08:27.640
So precision using these shorthand for the word probability.

113
00:08:27.740 --> 00:08:35.600
And finally we can concatenate on the closing static text so after our probability it's percent chance

114
00:08:35.660 --> 00:08:36.330
of rain.

115
00:08:36.350 --> 00:08:42.380
So right here a percent chance of rain.

116
00:08:42.400 --> 00:08:43.350
Excellent.

117
00:08:43.360 --> 00:08:48.790
Now we have this really long string created and we can go ahead and actually test our work.

118
00:08:48.860 --> 00:08:54.550
So I'm going to rerun the program from the terminal down below to start I'll use clear to clear the

119
00:08:54.580 --> 00:09:00.970
current output then node Space Act J asked to rerun the program and what do I get I get.

120
00:09:01.000 --> 00:09:07.750
It is currently fifty eight point two two degrees out there is a zero percent chance of rain which is

121
00:09:07.750 --> 00:09:08.920
fantastic.

122
00:09:08.980 --> 00:09:16.090
We were able to make an H TTP request for data parts that data into a format that was usable and actually

123
00:09:16.120 --> 00:09:20.980
use it inside of our node J.S. application in a meaningful way from here.

124
00:09:20.980 --> 00:09:27.040
I want to go ahead and wrap up the video by exploring some of the options we can use with Dark Sky to

125
00:09:27.040 --> 00:09:29.620
customize the data that comes back.

126
00:09:29.620 --> 00:09:35.920
I'm going to remove those challenge comments and we're gonna head back over to the dark sky API dashboard

127
00:09:36.190 --> 00:09:42.220
where we originally got our secret key and the example you are all we're using from here we can head

128
00:09:42.220 --> 00:09:49.330
over to the docs page where we can learn how to customize the options available to us and what we want

129
00:09:49.330 --> 00:09:53.330
is a forecast request showing on the left hand side.

130
00:09:53.350 --> 00:09:57.120
Now if we click that it is going to show us the example request.

131
00:09:57.130 --> 00:10:03.790
Right here we can see we have the key the latitude and longitude all showing up in the list and we have

132
00:10:03.790 --> 00:10:06.310
an example response down below.

133
00:10:06.310 --> 00:10:13.060
Now if we scroll past that example response we get to the request parameters where we can start to customize

134
00:10:13.060 --> 00:10:14.850
exactly what's happening now.

135
00:10:14.860 --> 00:10:17.650
Key latitude and longitude.

136
00:10:17.650 --> 00:10:21.380
Those are provided directly in the you are well as we've seen here.

137
00:10:21.430 --> 00:10:28.590
It's forward slash forecast forward slash key then forward slash the LAT comma the law.

138
00:10:28.660 --> 00:10:34.930
Now what we want to do is use these other options for example we have exclude so we can leave off parts

139
00:10:34.930 --> 00:10:38.540
of the forecast we're not using to make our response faster.

140
00:10:38.590 --> 00:10:43.920
We have extend so we can extend the amount of our data we want to get back.

141
00:10:43.960 --> 00:10:51.370
We have laying so we can customize the language being used and we also have units so we can customize

142
00:10:51.400 --> 00:10:53.470
the units that are coming back.

143
00:10:53.500 --> 00:10:59.500
Now the two most common units are going to be us four imperial units and s i if you're trying to use

144
00:10:59.500 --> 00:11:05.280
the Celsius temperature and we're gonna go ahead and explore how we can actually set these up.

145
00:11:05.530 --> 00:11:14.190
So all of these optional options like units laying and excludes those are set up as query strings.

146
00:11:14.290 --> 00:11:19.030
So that means at the end of our you are well we're going to set up a query string which starts with

147
00:11:19.060 --> 00:11:22.410
a question mark followed by key value pairs.

148
00:11:22.420 --> 00:11:25.330
So its key equals value.

149
00:11:25.330 --> 00:11:31.660
Now you can add on multiple key value pairs by using the end sign right here and then adding another

150
00:11:31.660 --> 00:11:32.050
one.

151
00:11:32.110 --> 00:11:39.400
So other key equals other value we're gonna use this format to set up the options we want.

152
00:11:39.430 --> 00:11:42.540
It's important that this comes at the end of the you are L.

153
00:11:42.700 --> 00:11:48.940
So after the last number in the U.R.L. we're going to put a question mark then we're going to set up

154
00:11:48.940 --> 00:11:51.400
the one key value pair we want.

155
00:11:51.400 --> 00:11:57.040
The name is called units which matches up exactly with what we're seeing in the documentation.

156
00:11:57.220 --> 00:12:01.180
And we set that equal to the type of units we want to over here.

157
00:12:01.180 --> 00:12:04.420
I'm gonna go ahead and set it equal to S I.

158
00:12:04.450 --> 00:12:07.730
So I can see my temperature in Celsius.

159
00:12:07.810 --> 00:12:14.620
Now if we save the program we can rerun things down below and we get the exact same forecast with a

160
00:12:14.620 --> 00:12:16.210
difference in the temperature.

161
00:12:16.210 --> 00:12:22.550
It's now currently fourteen point seven one degrees out with still a zero percent chance of rain.

162
00:12:22.690 --> 00:12:28.690
If I do want to stick with the imperial units I can always hard hardcoded or fall back to its value

163
00:12:28.840 --> 00:12:31.420
since this is indeed the default.

164
00:12:31.420 --> 00:12:34.400
Now if I rerun any program again what do I get.

165
00:12:34.480 --> 00:12:39.790
I get the old temperature we had although it went up a fraction of a degree because I'm currently filming

166
00:12:39.790 --> 00:12:42.060
in the morning and it's getting warmer outside.

167
00:12:42.460 --> 00:12:48.730
So now that we have this in place we know how to customize the response we're getting back.

168
00:12:48.730 --> 00:12:54.790
I'm going to go ahead and remove units since the imperial units is indeed the default value if you're

169
00:12:54.790 --> 00:12:58.150
interested in seeing your weather information in Celsius.

170
00:12:58.240 --> 00:13:03.520
I recommend keeping units set up so you can print that temperature instead of Fahrenheit.

171
00:13:03.520 --> 00:13:07.980
Now before we go I want to pull in one more piece of information into our forecast.

172
00:13:07.990 --> 00:13:13.880
If we head back over to the data in the browser we can explore in more than just this currently object.

173
00:13:13.990 --> 00:13:19.020
Sure this contains some useful information but there are plenty of things that are not there.

174
00:13:19.030 --> 00:13:23.760
For example what's the temperature high for today or what's the temperature low.

175
00:13:23.860 --> 00:13:28.930
If we collapse currently we'll see there are three other main properties for getting weather information.

176
00:13:28.930 --> 00:13:35.300
We have minimally hourly and daily all of which contain a forecast of that type.

177
00:13:35.320 --> 00:13:41.890
So I have a minute by minute forecast in here and hour by hour and a day by day forecast now for all

178
00:13:41.890 --> 00:13:44.260
of those we have this data properties.

179
00:13:44.260 --> 00:13:46.180
So I have daily data.

180
00:13:46.210 --> 00:13:49.390
If I expand hourly I have hourly data.

181
00:13:49.390 --> 00:13:51.940
And lastly minute lead data.

182
00:13:51.940 --> 00:13:57.880
That is an array of objects where each object gives you some information about the thing you're looking

183
00:13:57.880 --> 00:13:58.480
at.

184
00:13:58.480 --> 00:13:59.730
So let's look at daily.

185
00:13:59.830 --> 00:14:03.280
We have an array of objects inside of the data property.

186
00:14:03.340 --> 00:14:07.950
The first object contains a bunch of information about today.

187
00:14:07.960 --> 00:14:13.900
So right here I have things like the visibility the temperature mean the temperature Max the apparent

188
00:14:13.900 --> 00:14:15.420
highs and lows.

189
00:14:15.550 --> 00:14:20.560
All of this information could be used in the forecast to describe today.

190
00:14:20.560 --> 00:14:25.370
Now the second object in this array would be information about tomorrow.

191
00:14:25.390 --> 00:14:29.860
So right here I can see the summary for tomorrow is clear throughout the day.

192
00:14:29.980 --> 00:14:35.510
And I have other information like the high and low which I could also incorporate into my project.

193
00:14:35.710 --> 00:14:42.570
What I'm going to do is pull in the first days summary so we access that data property on daily.

194
00:14:42.610 --> 00:14:48.550
From there we grab the first array item which is an object and we grab the summary property and we're

195
00:14:48.550 --> 00:14:50.740
just going to toss that right up front.

196
00:14:50.740 --> 00:14:59.920
So before our current string we are going to access right inside of console dot log response dot body

197
00:14:59.950 --> 00:15:08.130
to get to this object then dot daily then dot data and remember data is an array.

198
00:15:08.220 --> 00:15:12.100
I'm going to access items by index using bracket notation.

199
00:15:12.180 --> 00:15:18.450
I want to get the first one with the index of 0 that is going to point to this object and we're going

200
00:15:18.450 --> 00:15:22.740
to grab that summary property so dot summary.

201
00:15:22.740 --> 00:15:28.170
Now from here I am going to concatenate on the rest of our message using the plus sign and I will put

202
00:15:28.170 --> 00:15:29.670
a space before it.

203
00:15:29.700 --> 00:15:32.500
So our two sentences aren't crammed together.

204
00:15:32.550 --> 00:15:38.420
Now we have even more information about the forecast and we can rerun our program to see what we get.

205
00:15:38.420 --> 00:15:40.310
So right here if I rerun it.

206
00:15:40.320 --> 00:15:41.220
What do we get.

207
00:15:41.220 --> 00:15:45.270
We can see we now have the summary before the message we had before.

208
00:15:45.270 --> 00:15:46.980
So this is what we had before.

209
00:15:47.010 --> 00:15:48.410
This is the new stuff.

210
00:15:48.420 --> 00:15:50.730
It now reads clear throughout the day.

211
00:15:50.730 --> 00:15:52.740
It's currently fifty eight degrees out.

212
00:15:52.740 --> 00:15:55.100
There is a zero percent chance of rain.

213
00:15:55.170 --> 00:16:00.890
So that's a pretty good summary of today's weather giving you some useful information.

214
00:16:01.080 --> 00:16:08.490
Now that laying option would come into effect if we wanted to change the language we could do so obviously

215
00:16:08.490 --> 00:16:14.490
we would need to rewrite these static strings that we created but we could have dark sky automatically

216
00:16:14.520 --> 00:16:17.160
generate the summary in a different language.

217
00:16:17.160 --> 00:16:23.220
And that's the last thing we're going to do over in the dark sky documentation if we scroll up before

218
00:16:23.220 --> 00:16:29.000
units we had that laying option right here and there are all sorts of different languages.

219
00:16:29.100 --> 00:16:35.910
If we scroll down e end which is for English is the default I'm going to switch it over to E S for Spanish

220
00:16:36.210 --> 00:16:41.530
so I'm going to set up the laying option on the end of the U.R.L. so I'll scroll to the right.

221
00:16:41.700 --> 00:16:48.360
Now I don't currently have units set up so I do need to add the question mark then laying equals right

222
00:16:48.360 --> 00:16:54.180
here E S if you already had units you would just use the ampersand after units and set up the other

223
00:16:54.180 --> 00:16:59.370
key value pair now that we have this in place we can rerun our script once again.

224
00:16:59.370 --> 00:17:00.390
And what do we get.

225
00:17:00.390 --> 00:17:05.160
We get the summary shown in Spanish and the rest shown as it was before.

226
00:17:05.160 --> 00:17:10.680
So if we were creating an application for Spanish speaking individuals we would obviously write out

227
00:17:10.680 --> 00:17:16.730
our own Spanish for these static parts and have dark sky generate its text using the language we set

228
00:17:16.730 --> 00:17:17.090
up.

229
00:17:17.490 --> 00:17:22.140
Let's go ahead and remove that option unless you are interested in creating this program in a different

230
00:17:22.140 --> 00:17:23.040
language.

231
00:17:23.040 --> 00:17:25.350
And that's where we're going to stop for this one.

232
00:17:25.440 --> 00:17:27.060
We've done a few important things here.

233
00:17:27.060 --> 00:17:33.810
First up we got requested to do some more work for us by having it pass our Jason we also explored how

234
00:17:33.810 --> 00:17:40.770
we can explore data using the Jason format our extension in the rouser making it easier to see what

235
00:17:40.770 --> 00:17:47.220
data we can actually incorporate into our application and then we set up the forecast strain and we

236
00:17:47.220 --> 00:17:51.610
explored the options available to us now that we have this in place.

237
00:17:51.720 --> 00:17:55.050
It's time to talk about how we can change the location.

238
00:17:55.050 --> 00:18:01.950
You'll notice that the forecast API requires the latitude and longitude of the location you're trying

239
00:18:01.950 --> 00:18:03.580
to get a forecast for.

240
00:18:03.660 --> 00:18:07.700
It can't take in a string like Philadelphia or Belgium.

241
00:18:07.710 --> 00:18:13.740
It needs more detailed information the lat and long in the next video you're going to learn how to use

242
00:18:13.740 --> 00:18:21.240
another API that can indeed get the lat and long for us when we provide it some sort of English readable

243
00:18:21.360 --> 00:18:22.200
address.

244
00:18:22.200 --> 00:18:23.470
I'm excited to get to that.

245
00:18:23.490 --> 00:18:26.520
So let's go ahead and jump right in to the next one.
