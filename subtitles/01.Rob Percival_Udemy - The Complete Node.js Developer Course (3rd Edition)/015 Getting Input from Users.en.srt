1
00:00:00,240 --> 00:00:06,200
In this video you're going to learn how to get input from the user into your node j s application.

2
00:00:06,270 --> 00:00:09,720
And this is going to be essential for creating anything meaningful.

3
00:00:09,900 --> 00:00:12,280
So think about the notes application.

4
00:00:12,360 --> 00:00:18,330
If I'm the user and I'm trying to use the notes app to add a new note as an example I need to provide

5
00:00:18,330 --> 00:00:23,590
some information about that new note such as a title and a body.

6
00:00:23,640 --> 00:00:28,560
The same would be true with I'm trying to use this notes application to remove a note.

7
00:00:28,560 --> 00:00:34,530
I have 15 different notes I need to provide some information about which note I want to remove.

8
00:00:34,740 --> 00:00:40,590
Now for the moment we're going to handle getting input from the user via a command line arguments later

9
00:00:40,590 --> 00:00:44,180
on in the class as we get into node j s with web servers.

10
00:00:44,250 --> 00:00:50,510
You'll learn how to get input into your node application from a client such as a browser.

11
00:00:50,520 --> 00:00:55,530
For now though let's go ahead and get started with the fundamentals of getting input into your app with

12
00:00:55,530 --> 00:00:56,790
command line arguments.

13
00:00:56,910 --> 00:00:59,220
Let's go ahead and get started in the terminal.

14
00:00:59,220 --> 00:01:04,740
So down below I'm going gonna use clear to clear the terminal output and over going to do is run our

15
00:01:04,740 --> 00:01:09,760
script through the node command with one slight modification.

16
00:01:09,810 --> 00:01:12,210
So node space app dot J asked.

17
00:01:12,210 --> 00:01:13,980
We know exactly what this does.

18
00:01:13,980 --> 00:01:17,380
We get our your notes message and our blue success message.

19
00:01:17,460 --> 00:01:20,060
Let's go ahead and run that same command.

20
00:01:20,160 --> 00:01:25,500
This time though after we're done we're gonna type A another space followed by a value.

21
00:01:25,500 --> 00:01:28,380
So for the moment let's just use something like our first name.

22
00:01:28,380 --> 00:01:29,930
I'll type mine in Andrew.

23
00:01:30,360 --> 00:01:32,970
Now we're gonna run the program again and what do we get.

24
00:01:33,000 --> 00:01:34,560
The program still works.

25
00:01:34,560 --> 00:01:36,830
We get the exact same output.

26
00:01:36,840 --> 00:01:42,630
The only difference is that we've now provided additional information that our program could choose

27
00:01:42,630 --> 00:01:50,490
to use to do something dynamic like print a greeting with that name inside of the message that prints.

28
00:01:50,490 --> 00:01:55,620
Now the question is where exactly do we access those command line arguments.

29
00:01:55,620 --> 00:01:58,400
And the answer is that they're on that process.

30
00:01:58,410 --> 00:02:05,400
Global variable we explored in Section 2 in Section 2 if you remember we took a little time to illustrate

31
00:02:05,400 --> 00:02:11,400
some of the differences between JavaScript in the browser and JavaScript running in node j s I talked

32
00:02:11,400 --> 00:02:18,990
about how the browser has window and document and how node has global and process well on process.

33
00:02:18,990 --> 00:02:24,960
There is a property and that's where we can access all of the command line arguments passed in to our

34
00:02:24,960 --> 00:02:25,540
app.

35
00:02:25,560 --> 00:02:27,690
Let's start by dumping them to the console.

36
00:02:27,750 --> 00:02:31,560
So right here console dot log process Dot.

37
00:02:31,560 --> 00:02:36,120
Remember process is a big object with dozens of different methods and properties.

38
00:02:36,210 --> 00:02:38,390
We're looking for one specific one.

39
00:02:38,430 --> 00:02:45,960
It's called ARG V and that's an all lower case r v stands for argument vector and in the case of node

40
00:02:45,990 --> 00:02:46,610
j asked.

41
00:02:46,620 --> 00:02:50,160
It's just an array that contains all of the arguments provided.

42
00:02:50,340 --> 00:02:55,850
Right here I'm going to save apt J S just dumping all of the arguments to the console.

43
00:02:55,860 --> 00:02:59,240
Then we're going to rerun our script with Andrew appended.

44
00:02:59,430 --> 00:03:04,530
So right here I'm going to rerun the script and what do I get I get my two pieces of output that were

45
00:03:04,530 --> 00:03:07,200
expected and I get my one new Array.

46
00:03:07,200 --> 00:03:10,410
This is the value for ARG V and what do we have.

47
00:03:10,410 --> 00:03:12,970
We have three strings inside of there.

48
00:03:12,990 --> 00:03:16,850
Now there are three strings and two are always provided.

49
00:03:16,890 --> 00:03:21,990
The first one is the path to the node j s executable on your machine.

50
00:03:21,990 --> 00:03:26,110
Now this is obviously going to be different for each and every user.

51
00:03:26,130 --> 00:03:29,790
The second is the path to our app dot J S file.

52
00:03:29,790 --> 00:03:35,370
Once again this path is also gonna be slightly different depending on where exactly the file lives on

53
00:03:35,430 --> 00:03:36,110
your machine.

54
00:03:36,120 --> 00:03:39,860
But both of them should be paths to those two locations.

55
00:03:39,870 --> 00:03:43,290
The third is the value that we actually provided.

56
00:03:43,290 --> 00:03:48,720
Right here we have the string Andrew which means that we could take advantage of that in our program

57
00:03:48,750 --> 00:03:50,120
to do something meaningful.

58
00:03:50,130 --> 00:03:53,890
Let's go ahead and extract the individual value out of that array.

59
00:03:53,970 --> 00:04:00,050
So process dot ARG V is the array we want to grab an item from the array by its index.

60
00:04:00,120 --> 00:04:06,600
So I'll use javascript bracket notation to get that done and we put the index right inside where 0 is

61
00:04:06,600 --> 00:04:07,550
the first one.

62
00:04:07,590 --> 00:04:12,180
One would be the second one and two would be the third item right here.

63
00:04:12,180 --> 00:04:14,120
This is exactly what we want.

64
00:04:14,160 --> 00:04:19,740
Now if I were to save the script and rerun things we wouldn't get this long array with a lot of useless

65
00:04:19,740 --> 00:04:20,630
information.

66
00:04:20,700 --> 00:04:26,730
We just get our one piece of useful information we have the string Andrew and we can now use that to

67
00:04:26,730 --> 00:04:29,230
customize our program.

68
00:04:29,340 --> 00:04:36,390
Now in the case of the notes application we're gonna use this first value after the script name to actually

69
00:04:36,390 --> 00:04:38,900
determine what action we want to take.

70
00:04:38,910 --> 00:04:40,850
This will be known as our command.

71
00:04:40,860 --> 00:04:42,210
Am I trying to add a note.

72
00:04:42,210 --> 00:04:44,900
Am I trying to read a note or remove a note.

73
00:04:44,910 --> 00:04:48,570
What sort of action am I trying to take when running the program.

74
00:04:49,020 --> 00:04:56,310
So for example right here node space app dot J S space I could do something like ADD which would let

75
00:04:56,310 --> 00:05:03,640
the program know my intention is to add a new note right here I can see that ad now Prince and I could

76
00:05:03,640 --> 00:05:06,160
use this to run the write code.

77
00:05:06,160 --> 00:05:07,360
Let's see what that would look like.

78
00:05:07,720 --> 00:05:12,940
So up above I'm going to remove all of the code except for r to require calls.

79
00:05:12,940 --> 00:05:18,340
Those are going to stay as we'll continue to use them and all we're going to do for the moment is create

80
00:05:18,340 --> 00:05:24,970
a variable called command and we're gonna get its value from what we just printed to the console.

81
00:05:24,970 --> 00:05:30,270
That's a process dot ARG v grabbing the third item by index.

82
00:05:30,310 --> 00:05:36,580
Now we could actually use an if statement to conditionally run some code if the user who's running the

83
00:05:36,580 --> 00:05:40,990
app provided ad we could run the code necessary to add a note.

84
00:05:40,990 --> 00:05:43,660
Otherwise we won't try to add a note right here.

85
00:05:43,660 --> 00:05:49,550
If we'll set up our condition and the code block to run if that condition passes.

86
00:05:49,690 --> 00:05:54,390
And we're just going to check if command equals using triple equality.

87
00:05:54,450 --> 00:06:01,390
The string ad if it does we know the user is trying to add a new note and we could run the code necessary

88
00:06:01,390 --> 00:06:05,540
to create the note and save it to our data store for the moment.

89
00:06:05,560 --> 00:06:10,870
We're just going to console dot log a little message letting us know this code actually ran.

90
00:06:10,870 --> 00:06:17,500
I'll say something like adding notes now if I save the program and rerun what do I get I get adding

91
00:06:17,500 --> 00:06:20,170
note printing which is fantastic.

92
00:06:20,200 --> 00:06:26,790
Now we could also run this with a different command for example node space app dot J S space.

93
00:06:26,830 --> 00:06:30,470
Let's go ahead and use something like remove to remove a note.

94
00:06:30,580 --> 00:06:35,770
If I run this you'll notice I'm not getting any output because I haven't set up the program to actually

95
00:06:35,770 --> 00:06:39,340
do anything when that's the provided command value.

96
00:06:39,490 --> 00:06:46,920
I could always address that by setting up an else if statement checking if command equals the string

97
00:06:47,100 --> 00:06:47,790
right here.

98
00:06:47,850 --> 00:06:50,070
Remove if it does equal remove.

99
00:06:50,100 --> 00:06:50,950
That's great.

100
00:06:50,970 --> 00:06:54,200
We'll go ahead and run all of the code to get the removal done.

101
00:06:54,270 --> 00:06:57,030
Console that log right here.

102
00:06:57,030 --> 00:07:00,440
Removing note as a temporary placeholder.

103
00:07:00,480 --> 00:07:04,600
Now we could save the program we could rerun things again and there we go.

104
00:07:04,620 --> 00:07:11,610
We now support that second command allowing users of way to add notes and to remove notes from here.

105
00:07:11,640 --> 00:07:14,930
Let's figure out how to get even more information for each command.

106
00:07:15,000 --> 00:07:20,880
So knowing that the user is trying to add or remove a note is a good start but if someone is trying

107
00:07:20,880 --> 00:07:24,150
to add a note I need the notes title and I need the body.

108
00:07:24,150 --> 00:07:30,620
If someone is trying to remove a note I need the title as an example of the note that should be removed.

109
00:07:30,630 --> 00:07:32,820
So how are we going to get that done.

110
00:07:32,820 --> 00:07:36,580
Well once again we're going to start with the command we've been using throughout this section.

111
00:07:36,620 --> 00:07:42,870
So right here node act J s ad then we're going to provide command line options like you've probably

112
00:07:42,870 --> 00:07:49,140
seen with other command line tools so hyphen hyphen title could be where we set the title.

113
00:07:49,260 --> 00:07:53,540
I'll set that equal to inside of double quotes the following.

114
00:07:53,610 --> 00:08:00,030
This is my title I could run the program and now we're passing in even more information.

115
00:08:00,030 --> 00:08:06,990
It might not look like it but if we were to dump our V to the console once again we would see it console

116
00:08:07,020 --> 00:08:14,520
dialogue process dot ARG v just dumping the entire array of you on the program exactly as we had it

117
00:08:14,520 --> 00:08:21,630
with titles set up and now I'm getting as the third argument ad which we already had and as the fourth

118
00:08:21,630 --> 00:08:23,790
one I am getting title.

119
00:08:23,790 --> 00:08:28,230
Now one thing you'll notice here is that it's not something that gets passed for us.

120
00:08:28,230 --> 00:08:34,340
We have the exact text typed out over here as we do here minus the double quotes.

121
00:08:34,470 --> 00:08:40,930
We need to now add some code to manually pass that we have to figure out for example if title was actually

122
00:08:40,940 --> 00:08:41,840
provided.

123
00:08:41,940 --> 00:08:45,290
If we do see that title was provided we have to get the value.

124
00:08:45,330 --> 00:08:50,070
Now sure we could go ahead and write all of the code necessary to pass those arguments.

125
00:08:50,070 --> 00:08:55,710
It would result in maybe 12 of the most on interesting videos in this course where we didn't talk about

126
00:08:55,710 --> 00:08:59,900
no JSA at all but just talked about string passing.

127
00:08:59,910 --> 00:09:05,010
Now we're not going to do that and for a couple very good reasons one we would have to write test and

128
00:09:05,010 --> 00:09:10,980
maintain all of this code and that code it doesn't do anything unique passing command line arguments

129
00:09:11,010 --> 00:09:17,430
is not unique to our application so it would be best to look for it NPM package that can take care of

130
00:09:17,430 --> 00:09:24,060
that for us so we can get back to the task of writing what does make our application interesting which

131
00:09:24,060 --> 00:09:27,780
is in this case its ability to manage your notes.

132
00:09:27,780 --> 00:09:31,680
So in the next video we're going to look at how we can use a tool to pass.

133
00:09:31,680 --> 00:09:39,480
Process dot ARG v making it much easier to set up our arguments for our node j s applications.

134
00:09:39,480 --> 00:09:43,230
I'm excited to get to that and that video will include a challenge.

135
00:09:43,230 --> 00:09:45,270
So let's go ahead and jump right in.
