1
00:00:00,210 --> 00:00:06,090
Now that you have your SS H keys in place you're ready to start sharing your code with those third party

2
00:00:06,090 --> 00:00:07,140
services.

3
00:00:07,140 --> 00:00:12,780
In this video you're going to get your code pushed up to the get hub servers and in the next video you'll

4
00:00:12,780 --> 00:00:17,160
get your code pushed up to Heroku so your application can be deployed.

5
00:00:17,370 --> 00:00:20,330
To start let's head over to get hub dot com.

6
00:00:20,430 --> 00:00:26,040
Now you should already be logged into your account as we did that earlier in the section on the left

7
00:00:26,040 --> 00:00:26,610
hand side.

8
00:00:26,640 --> 00:00:29,350
You'll notice I have a list of repositories.

9
00:00:29,370 --> 00:00:34,250
These are projects that I've been working on for clients and for other classes.

10
00:00:34,260 --> 00:00:37,980
What we want to do is create a new repository.

11
00:00:37,980 --> 00:00:41,240
So we're going to have our local repository on our machine.

12
00:00:41,280 --> 00:00:46,200
It lives in that dot get directory which we explored earlier in the class.

13
00:00:46,200 --> 00:00:50,420
We're also going to create a repository for the project on Github.

14
00:00:50,430 --> 00:00:56,610
That is how github is going to be able to get access to our code so it can show it in the user interface.

15
00:00:56,640 --> 00:01:01,540
And so we can do other great things like track issues and collaborate with others.

16
00:01:01,580 --> 00:01:05,640
Now creating a repository on GitHub dot com is really easy.

17
00:01:05,640 --> 00:01:08,890
There is a plus icon near the top right of the screen.

18
00:01:08,910 --> 00:01:13,780
We click new repository and then we fill out a very simple form.

19
00:01:13,800 --> 00:01:17,600
The only thing we need to do is pick a repository name.

20
00:01:17,610 --> 00:01:22,460
Now this does not need to line up in any way with the name you chose for your project.

21
00:01:22,470 --> 00:01:28,200
Locally you can pick anything you'd like as long as you're not already using it for a repo name on your

22
00:01:28,200 --> 00:01:29,160
account.

23
00:01:29,190 --> 00:01:36,690
I'm going to go ahead and use Node 3 hyphen weather Web site once again you can pick whatever name makes

24
00:01:36,690 --> 00:01:38,350
the most sense for you.

25
00:01:38,370 --> 00:01:43,470
Next up we have an optional description which I'll leave blank and then we have the option to create

26
00:01:43,530 --> 00:01:50,460
a public repository where anyone can see the code or a private one which you could use for private proprietary

27
00:01:50,460 --> 00:01:51,660
projects.

28
00:01:51,660 --> 00:01:57,060
Now in this case you can stick with public as private does require you to be on a paid plan.

29
00:01:57,060 --> 00:02:03,240
I'm going to switch mine over to private though so I can keep this project hidden from students so no

30
00:02:03,240 --> 00:02:06,720
one will know I'm working on the course until the whole class is ready.

31
00:02:06,720 --> 00:02:09,840
Once again though you can just leave yours as public.

32
00:02:09,840 --> 00:02:16,040
Next up we have an option to initialize our project with various things like a read me file a get ignore

33
00:02:16,050 --> 00:02:17,670
file or a license.

34
00:02:17,670 --> 00:02:19,300
We're not going to do any of that.

35
00:02:19,320 --> 00:02:24,020
We're gonna move on to the next step which is to create the repository.

36
00:02:24,150 --> 00:02:29,860
So right here when we do that it's not gonna be able to show us our repo code because there is none.

37
00:02:29,910 --> 00:02:33,830
Get hub doesn't know what code is associated with this project.

38
00:02:33,930 --> 00:02:38,660
So it's simply giving us some instructions for the various ways we can get started.

39
00:02:38,730 --> 00:02:44,280
We can create a new repository from the command line and send that to get hub.

40
00:02:44,280 --> 00:02:50,820
We can push our existing repository up to get hub or we can import it from some other version control

41
00:02:50,820 --> 00:02:51,660
system.

42
00:02:51,750 --> 00:02:54,380
In this case the second option is what we want.

43
00:02:54,390 --> 00:02:58,460
We already have a repository with commits locally on our machine.

44
00:02:58,470 --> 00:03:01,680
We simply want to send it to the github servers.

45
00:03:01,680 --> 00:03:04,040
Now there are two commands here to get set up.

46
00:03:04,050 --> 00:03:06,870
But before we run them I want to explain what they do.

47
00:03:06,870 --> 00:03:09,650
So you can actually understand what you're doing.

48
00:03:09,750 --> 00:03:16,190
Right here we have the first command get remote add origin followed by a long you are well.

49
00:03:16,320 --> 00:03:21,840
So to start we are indeed using get like we've done from Visual Studio code plenty of times already

50
00:03:22,140 --> 00:03:28,320
and we're using remote to manipulate our remotes a remote is nothing more than a version of your project

51
00:03:28,350 --> 00:03:30,090
hosted somewhere else.

52
00:03:30,090 --> 00:03:37,500
So we're gonna have a version of our project hosted on GitHub dot coms servers and on her Rochas servers.

53
00:03:37,500 --> 00:03:40,140
Next up how are we trying to work with our remotes.

54
00:03:40,140 --> 00:03:41,710
We're trying to add them.

55
00:03:41,820 --> 00:03:45,530
For example you could also use remove to remove a remote.

56
00:03:45,540 --> 00:03:47,160
In this case though we don't have any.

57
00:03:47,160 --> 00:03:49,880
So we're setting up our very first one.

58
00:03:49,920 --> 00:03:52,560
Next up we choose a name for their remote.

59
00:03:52,560 --> 00:03:58,020
This value could be anything you like but by default your first remote should have the name origin.

60
00:03:58,020 --> 00:04:01,050
This is a common convention you'll see across the web.

61
00:04:01,080 --> 00:04:07,410
After that we have a nice long you are this you are L contains two nice pieces of information.

62
00:04:07,410 --> 00:04:09,450
It has our user name right here.

63
00:04:09,450 --> 00:04:14,670
You should see your user name and it has the name of the repository that you picked.

64
00:04:14,670 --> 00:04:17,160
So right here I have the name that I chose.

65
00:04:17,160 --> 00:04:21,330
Now when we run this command we're not actually sending our code to get hub.

66
00:04:21,330 --> 00:04:25,340
All this command does is it sets up that channel of communication.

67
00:04:25,500 --> 00:04:28,410
You can think about it like adding a contact in your cell phone.

68
00:04:28,650 --> 00:04:33,300
You pick a name for the contact and then you pick their phone number or in this case the U.R.L. but

69
00:04:33,300 --> 00:04:36,490
we're not actually sending anything to that or just setting that up.

70
00:04:36,510 --> 00:04:38,460
So it can be used in the future.

71
00:04:38,670 --> 00:04:40,840
Right here we're going to take that command.

72
00:04:40,950 --> 00:04:46,170
Copy it to the clipboard and from the terminal we're going to run it from the web server directory.

73
00:04:46,170 --> 00:04:50,670
Once again it's important that you run these commands from the right location.

74
00:04:50,730 --> 00:04:51,780
So I'm going to paste it in.

75
00:04:52,200 --> 00:04:53,090
I'm going to run it.

76
00:04:53,370 --> 00:04:57,550
And now we have a remote called origin which we can push too.

77
00:04:57,660 --> 00:05:03,700
And that's going to send our code to get as we add new commits we will push those new commits up to

78
00:05:03,700 --> 00:05:07,140
get hub making sure that get hub has the latest code.

79
00:05:07,420 --> 00:05:10,220
That's where the second command comes into play.

80
00:05:10,240 --> 00:05:15,820
We have get push with you flag origin master so get.

81
00:05:15,820 --> 00:05:22,540
Once again is just the Get Command followed by push push allows us to push our commits up to a given

82
00:05:22,540 --> 00:05:23,410
remote.

83
00:05:23,410 --> 00:05:30,550
Then we provide the remote name origin now Master is the default name for what's called a branch and

84
00:05:30,550 --> 00:05:31,040
get.

85
00:05:31,210 --> 00:05:35,590
We're not going to get into branching in this course as it's a more advanced concept.

86
00:05:35,740 --> 00:05:41,650
If you are interested in diving into the advanced workflows and get I recommend checking out a get course

87
00:05:41,710 --> 00:05:47,230
on udemy or checking out that free get book that I talked about earlier in the class.

88
00:05:47,240 --> 00:05:54,040
Now the EU flag allows us to set the upstream which is essentially the default and in this case we are

89
00:05:54,040 --> 00:05:58,510
setting the default to origin which is where we're going to push to the most.

90
00:05:58,510 --> 00:06:04,390
So in the future after we run this command once we could just use get push to send our latest commits

91
00:06:04,510 --> 00:06:10,240
up to get hub share we'll be pushing to other remotes like Heroku but we're not going to do that nearly

92
00:06:10,240 --> 00:06:11,320
as often.

93
00:06:11,320 --> 00:06:16,750
Now we're not actually ready to run this command yet if we tried to run it it would fail because GitHub

94
00:06:16,780 --> 00:06:23,890
isn't sure of exactly who's sending it the code but we need to do is finalize our SSA configuration

95
00:06:24,460 --> 00:06:30,190
so to get that done what we need to do is take the public key file and give that to get hub dot com

96
00:06:30,460 --> 00:06:32,640
so it can create that secure connection.

97
00:06:33,100 --> 00:06:37,940
We do this in our settings so up top I'm going to go to my little profile picture.

98
00:06:38,140 --> 00:06:42,800
We're gonna go down to settings and then the left hand sidebar you should see an option.

99
00:06:42,820 --> 00:06:51,130
SS H and GP G keys in our case we're trying to setup a new SS H key and we can go ahead and do just

100
00:06:51,130 --> 00:06:56,140
that by clicking new SS H key here it's asking for two things.

101
00:06:56,140 --> 00:07:00,250
First it's asking us for a name to identify this key.

102
00:07:00,280 --> 00:07:07,930
I typically use something like work laptop I have other keys like home desktop or home laptop.

103
00:07:07,930 --> 00:07:14,770
It just makes it easy to identify the given key and the next thing we need is the contents of that public

104
00:07:14,800 --> 00:07:23,050
key file that is I d underscore RSA a dot pub to get the contents of that file we can use the following

105
00:07:23,050 --> 00:07:29,000
command from the terminal that's going to be a cat which simply concatenate the contents of a file out

106
00:07:29,000 --> 00:07:29,860
to the terminal.

107
00:07:29,860 --> 00:07:36,790
So it's going to print the contents of our key file followed by the file to actually print that is Tilde

108
00:07:36,850 --> 00:07:43,890
forward slash dot SS H forward slash I d underscore RSA dot pop.

109
00:07:43,990 --> 00:07:46,650
Now when we do that we're going to get the following.

110
00:07:46,660 --> 00:07:54,400
It's a really long string which starts with SS H hyphen RSA and it ends with that value you put for

111
00:07:54,400 --> 00:07:57,280
the comment and in our case we put our email.

112
00:07:57,370 --> 00:08:03,420
We have to grab all of that including the SS H RSA all the way to the end of the email.

113
00:08:03,550 --> 00:08:08,590
We're gonna copy that to the clipboard and we're gonna bring that over to this big text field.

114
00:08:08,590 --> 00:08:14,470
We paste it in click Add SS H key and now that's been added to our account.

115
00:08:14,590 --> 00:08:18,870
Now right here you can notice it saying it's never been used and that's true.

116
00:08:18,910 --> 00:08:23,050
We have this key setup but we've never used it to communicate with get hub.

117
00:08:23,110 --> 00:08:27,190
We can test our connection by running the following command from the terminal.

118
00:08:27,190 --> 00:08:35,200
If you're on Windows make sure to use get bash for this one that is SS H hyphen the capital T then space

119
00:08:35,230 --> 00:08:38,080
get at get hub dot com.

120
00:08:38,080 --> 00:08:42,160
This is going to test our SS H connection to the get hub servers.

121
00:08:42,160 --> 00:08:47,440
If it works then we know our key has been setup successfully and we can push our commits up.

122
00:08:47,560 --> 00:08:48,330
If it doesn't work.

123
00:08:48,340 --> 00:08:50,590
Then we know we have a problem right here.

124
00:08:50,590 --> 00:08:53,080
I'm gonna run it and we're gonna get the following message.

125
00:08:53,080 --> 00:08:54,590
This is not an error.

126
00:08:54,760 --> 00:09:00,280
It's simply saying that it can't confirm the identity of the server but we can indeed accept that by

127
00:09:00,280 --> 00:09:00,880
typing.

128
00:09:00,880 --> 00:09:01,400
Yes.

129
00:09:01,480 --> 00:09:07,480
Since we can see that things look good and once we do that we can see the final line.

130
00:09:07,510 --> 00:09:08,050
Hi.

131
00:09:08,050 --> 00:09:10,580
Followed by your GitHub username.

132
00:09:10,690 --> 00:09:16,200
You've successfully authenticated but GitHub doesn't provide shell access if you're seeing this.

133
00:09:16,240 --> 00:09:18,040
That is a good thing.

134
00:09:18,040 --> 00:09:23,830
This means you are able to correctly authenticate with get hub and now we're ready to push our code

135
00:09:23,920 --> 00:09:24,500
up.

136
00:09:24,670 --> 00:09:30,370
No actually creating the SSA keys and configuring them with GitHub is something you only have to do

137
00:09:30,430 --> 00:09:34,620
once it's setup and we can use it for all of our future projects.

138
00:09:34,630 --> 00:09:37,820
I'm gonna head back over to the dashboard the home page.

139
00:09:38,020 --> 00:09:41,710
Then I'm going to grab that repository I just created.

140
00:09:41,710 --> 00:09:45,300
I can search for it over here Node 3.

141
00:09:45,310 --> 00:09:46,910
Weather Web site.

142
00:09:46,930 --> 00:09:47,620
I click it.

143
00:09:47,620 --> 00:09:52,100
It brings me back to those instructions and we can run that second command.

144
00:09:52,180 --> 00:09:57,220
This command is actually going to take our commits and it's going to push them up to whatever is at

145
00:09:57,220 --> 00:09:57,980
the following.

146
00:09:58,000 --> 00:10:00,370
You are L from the previous step.

147
00:10:00,430 --> 00:10:02,440
I'll bring that over to the terminal.

148
00:10:02,440 --> 00:10:05,340
I'm gonna paste that command in I'm gonna run it.

149
00:10:05,380 --> 00:10:08,710
And now our code it's getting sent off to the servers.

150
00:10:08,740 --> 00:10:14,860
We can see various pieces of output about that and we can see exactly at the end what happened.

151
00:10:14,920 --> 00:10:20,080
It set up a new master branch to coordinate with our local master branch.

152
00:10:20,080 --> 00:10:26,890
This is a good thing if we refresh get hub dot com we're actually gonna be able to see our project.

153
00:10:26,890 --> 00:10:29,970
No longer will we see these setup instructions.

154
00:10:30,010 --> 00:10:33,480
I'm gonna refresh the page now that there are commits to show.

155
00:10:33,490 --> 00:10:36,250
That is exactly what we see right here.

156
00:10:36,250 --> 00:10:37,810
I have a lot of great stuff.

157
00:10:37,840 --> 00:10:42,130
Obviously I have the files and folders that make up my project.

158
00:10:42,130 --> 00:10:46,050
If I dive into those I can see exactly how they've changed.

159
00:10:46,090 --> 00:10:48,220
I can see who's contributed to them.

160
00:10:48,220 --> 00:10:50,920
I can view the history of their changes.

161
00:10:50,920 --> 00:10:54,220
I can also use this service to track issues.

162
00:10:54,430 --> 00:11:00,360
So right here I could set up issues I could set up various projects outlining what I'd like to complete.

163
00:11:00,430 --> 00:11:03,640
I could set up a wiki for documentation.

164
00:11:03,640 --> 00:11:09,400
There are all sorts of great features that get provides when you're using their service.

165
00:11:09,460 --> 00:11:12,460
Now in our case we're just using them for a basic setup.

166
00:11:12,460 --> 00:11:15,140
We're going to keep our code backed up to get hub.

167
00:11:15,250 --> 00:11:19,440
So if things do go wrong locally we always have a backup of our copy.

168
00:11:19,840 --> 00:11:20,670
Oh right.

169
00:11:20,740 --> 00:11:23,170
That is where we're gonna stop before this one.

170
00:11:23,170 --> 00:11:25,940
We now have our code up on the Github servers.

171
00:11:25,960 --> 00:11:31,450
Don't worry a little bit later in the section we'll talk about how we can push our other changes up

172
00:11:31,450 --> 00:11:35,420
to the service and there'll also be a challenge will you have to do the same.

173
00:11:35,500 --> 00:11:41,650
For now though the goal was just to get that basic configuration set up with the SSA keys in place.

174
00:11:41,650 --> 00:11:47,740
We can now use the same setup with any other projects we end up creating the next video is all about

175
00:11:47,740 --> 00:11:52,770
pushing up to Heroku and getting our application deployed live to production.

176
00:11:52,780 --> 00:11:54,760
It's the grand finale of sorts.

177
00:11:54,820 --> 00:11:57,010
So let's go ahead and jump right at.
