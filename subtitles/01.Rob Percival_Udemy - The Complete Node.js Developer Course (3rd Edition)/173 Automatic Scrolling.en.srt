1
00:00:00,390 --> 00:00:06,020
In this lesson you'll be integrating auto scrolling into the chat application and to get this done.

2
00:00:06,030 --> 00:00:11,130
We're going to start with a quick visualization to make sure we're all on the same page as to what we're

3
00:00:11,130 --> 00:00:12,450
working towards.

4
00:00:12,480 --> 00:00:17,310
Then we'll head into our client side JavaScript and actually knock this out.

5
00:00:17,310 --> 00:00:23,220
So we have our lighter rectangle which represents all of the content that's available and then we have

6
00:00:23,220 --> 00:00:26,220
our sidebars representing what we're able to see.

7
00:00:26,550 --> 00:00:30,990
So in this case the height for both is the same and we're able to see everything.

8
00:00:30,990 --> 00:00:33,750
And that's true when our first message comes in.

9
00:00:33,760 --> 00:00:38,650
We can see it and same with the second and in this example the third.

10
00:00:38,880 --> 00:00:45,290
Now when a fourth message comes in the available content gets longer but we're not able to see it.

11
00:00:45,330 --> 00:00:50,520
We need to scroll through the content to see the chat messages.

12
00:00:50,520 --> 00:00:56,600
In this case what we're going to have the browser do is automatically scroll the user to the bottom

13
00:00:56,820 --> 00:01:00,350
so they're able to view the most recent content.

14
00:01:00,510 --> 00:01:05,850
The same thing is true when the next message comes in the next message comes in.

15
00:01:05,850 --> 00:01:12,790
We have more content available and we scroll the user to the bottom so they can see that latest message.

16
00:01:12,840 --> 00:01:18,990
Now this is great when the user is looking at the latest content but what happens if I go searching

17
00:01:18,990 --> 00:01:22,240
through the chat history to see what someone said.

18
00:01:22,290 --> 00:01:27,990
So I manually scroll up to the top to see what someone said about when we're meeting or where we're

19
00:01:27,990 --> 00:01:28,830
meeting.

20
00:01:28,830 --> 00:01:34,920
And in this case it would be really frustrating if every new message automatically brought me to the

21
00:01:34,950 --> 00:01:40,400
bottom since I've intentionally scrolled up looking for something specific.

22
00:01:40,410 --> 00:01:43,950
So in this case we are not scrolled to the bottom.

23
00:01:43,950 --> 00:01:48,150
So when a new message comes in we're not going to auto scroll.

24
00:01:48,180 --> 00:01:52,670
We're only going to auto scroll when the user is viewing the most recent content.

25
00:01:52,680 --> 00:01:53,970
In this case we're not.

26
00:01:53,970 --> 00:01:59,850
So if a new message comes in our content gets longer but we're not going to scroll them so they can

27
00:01:59,850 --> 00:02:02,100
keep looking at what they're looking at.

28
00:02:02,100 --> 00:02:09,120
Now later on if I was to manually scroll back to the most recent content then I am scrolled to the bottom

29
00:02:09,330 --> 00:02:12,120
and we would auto scroll for new messages.

30
00:02:12,120 --> 00:02:16,560
So right here I could go ahead and add a new message into the mix.

31
00:02:16,560 --> 00:02:20,430
And like we've seen before you would get auto scroll to the bottom.

32
00:02:20,520 --> 00:02:26,960
So we want to make sure that users can look through that chat history without getting constantly interrupted.

33
00:02:27,000 --> 00:02:31,800
And we also want to make sure that if someone's having a conversation with someone else they're able

34
00:02:31,800 --> 00:02:34,990
to see the latest messages as they come in.

35
00:02:35,100 --> 00:02:40,350
Now that we know what we're working towards let's go ahead and actually implement that into chat Dot.

36
00:02:40,350 --> 00:02:43,450
J.S. back inside of chat dot Jay Yes.

37
00:02:43,470 --> 00:02:46,940
We're going to make some changes to our javascript code.

38
00:02:46,980 --> 00:02:53,160
The first thing we want to do is figure out where we want to put all of this auto scrolling logic.

39
00:02:53,160 --> 00:02:59,850
Now we want to do this every single time we render a new message and we render new text messages right

40
00:02:59,850 --> 00:03:05,400
here in this callback function and new location messages down below.

41
00:03:05,400 --> 00:03:11,850
So instead of adding the logic into both locations I'll just create a function that we call in both

42
00:03:12,240 --> 00:03:18,380
right here a new constant called something like auto scroll is going to get the job done.

43
00:03:18,480 --> 00:03:25,290
This doesn't need any arguments and we're going to call it just after rendering our messages.

44
00:03:25,290 --> 00:03:32,250
So right here after we render our text messages I'm going to call auto scroll and I'm going to do the

45
00:03:32,250 --> 00:03:36,750
exact same thing after rendering those location messages.

46
00:03:36,840 --> 00:03:42,810
Now calling this function itself doesn't guarantee we're actually going to be auto scrolled but it's

47
00:03:42,810 --> 00:03:47,040
at least going to run the logic and figure out if we should if we should.

48
00:03:47,040 --> 00:03:49,100
It will indeed scroll us to the bottom.

49
00:03:49,560 --> 00:03:55,200
If someone was digging through that chat history then we won't auto scroll them which is the behavior

50
00:03:55,230 --> 00:03:56,370
that we want.

51
00:03:56,370 --> 00:04:02,970
The first thing we need to do is get that new message element that's going to allow us to run the calculation.

52
00:04:02,970 --> 00:04:07,100
So remember at this point in time the new message has already been added.

53
00:04:07,200 --> 00:04:12,960
So it's our job to figure out if they were scrolled to the bottom without this new message being in

54
00:04:12,960 --> 00:04:17,600
there which means we need the height of the New Message element.

55
00:04:17,610 --> 00:04:23,360
So right here I'm going to extensively comment this function since it can be quite confusing.

56
00:04:23,400 --> 00:04:27,420
First up let's go ahead and get the new message element.

57
00:04:27,420 --> 00:04:33,630
I'm going to create a constant called something like dollar sign new message using the dollar sign syntax

58
00:04:33,690 --> 00:04:35,710
since we're storing an element.

59
00:04:35,970 --> 00:04:46,710
And right here we are going to grab messages and we are going to use its last element child property

60
00:04:47,040 --> 00:04:53,910
that's going to grab the last element as a child which would be the new message sends new messages are

61
00:04:53,910 --> 00:04:55,680
added to the bottom.

62
00:04:55,710 --> 00:05:01,770
So in this case we have the New Message element and the next thing we need to do which is going to take

63
00:05:01,800 --> 00:05:08,110
a few different steps is to get the height of the last message.

64
00:05:08,160 --> 00:05:10,320
Actually let's just call that the new message.

65
00:05:10,350 --> 00:05:12,830
So we're using the same terminology.

66
00:05:12,900 --> 00:05:16,180
So we need to know how tall that message is.

67
00:05:16,200 --> 00:05:21,150
It's standard content including extra things like it's margin.

68
00:05:21,750 --> 00:05:28,290
So right here what we're going to do is start with the following constant last actually let's call it

69
00:05:28,290 --> 00:05:32,250
new new message height.

70
00:05:32,370 --> 00:05:35,350
And this is going to equal the following.

71
00:05:35,490 --> 00:05:42,350
We're going to grab that new message element and we're going to use a property off set height.

72
00:05:42,360 --> 00:05:44,280
Now this is a great start.

73
00:05:44,280 --> 00:05:49,310
The only problem is that this doesn't take into account the margin.

74
00:05:49,310 --> 00:05:53,670
Now we have to run it to extra statements in order to get that value.

75
00:05:53,670 --> 00:06:00,310
Now you might say the values hard coded in our C Ss so can't we just hard coded here as well.

76
00:06:00,510 --> 00:06:05,400
But that could cause problems if we choose to change these styles in the future.

77
00:06:05,400 --> 00:06:08,500
It would be really confusing to have to change that style.

78
00:06:08,610 --> 00:06:12,680
Then later on you'd figure out auto scroll broke but you wouldn't know why.

79
00:06:12,720 --> 00:06:16,440
So it's best to not hard code that value instead.

80
00:06:16,470 --> 00:06:22,980
We're going to look at that new message element and figure out what that margin bottom we set what's

81
00:06:23,370 --> 00:06:23,940
right here.

82
00:06:23,940 --> 00:06:30,660
I'm going to create a variable something along the lines of new message styles and to get the computed

83
00:06:30,660 --> 00:06:32,640
styles for a given element.

84
00:06:32,640 --> 00:06:41,270
We use the global get computed style which is made available to us by the browser we pass to the element.

85
00:06:41,280 --> 00:06:47,760
In this case I'm trying to get these styles for the new message so we can figure out what that margin

86
00:06:47,820 --> 00:06:50,730
bottom spacing value is.

87
00:06:50,760 --> 00:06:55,760
Now let's go ahead and dump this to the terminal to see exactly what we're getting.

88
00:06:55,830 --> 00:06:58,680
So that's console dot log.

89
00:06:58,990 --> 00:07:01,570
New message styles.

90
00:07:01,840 --> 00:07:04,420
I'm going to go ahead and save the chat app.

91
00:07:04,480 --> 00:07:10,820
I will refresh things over in the browser and open up the developer tools cracking open the console.

92
00:07:10,960 --> 00:07:15,540
And right here we can see that the longer we're looking for is from line 26.

93
00:07:15,550 --> 00:07:17,680
That is the log right here.

94
00:07:17,680 --> 00:07:19,840
If I crack that open what do we get.

95
00:07:19,840 --> 00:07:21,970
We have a whole bunch of different properties.

96
00:07:21,970 --> 00:07:26,980
It starts off with a list of all of the available styles that were applied.

97
00:07:27,000 --> 00:07:30,550
Then we have them by name in alphabetical order.

98
00:07:30,550 --> 00:07:38,170
And if we scroll all the way down to M for margin we can see that we have margin bottom with a value

99
00:07:38,170 --> 00:07:40,600
of 16 pixels.

100
00:07:40,600 --> 00:07:46,180
So in this case that's exactly what we want to extract that we want to convert it to a number so we

101
00:07:46,180 --> 00:07:50,770
can actually add it on to the offset height right here.

102
00:07:50,770 --> 00:07:53,250
Let's go ahead and do just that.

103
00:07:53,350 --> 00:08:00,110
I'm going to create a new constant called New Message margin and I'm going to start by using.

104
00:08:00,130 --> 00:08:05,640
Pass it pass it takes a string in and it passes it to a number.

105
00:08:05,770 --> 00:08:14,050
In this case 16 as the string will become 16 as a number and we're going to pass the value in that is

106
00:08:14,050 --> 00:08:21,140
new message styles accessing margin bottom as we saw before.

107
00:08:21,250 --> 00:08:25,570
Now with this in place we can go ahead and see what we get for that.

108
00:08:25,570 --> 00:08:31,870
So I'm going to log out new message margin to the console.

109
00:08:31,870 --> 00:08:36,100
I'm gonna save the file and refresh things from the browser right here.

110
00:08:36,100 --> 00:08:38,950
I have the number 16 which is great.

111
00:08:38,950 --> 00:08:42,580
Oh we're going to do is add that on right here.

112
00:08:42,580 --> 00:08:46,620
So new message margin.

113
00:08:46,640 --> 00:08:48,410
So we wrote a lot of code already.

114
00:08:48,440 --> 00:08:50,680
Let's quickly recap what we're doing.

115
00:08:50,720 --> 00:08:52,560
We grab the new message.

116
00:08:52,640 --> 00:08:56,090
We then go ahead and get the margin value.

117
00:08:56,090 --> 00:09:02,350
Then we take the margin and we added on to the height of the message getting its total height.

118
00:09:02,390 --> 00:09:07,370
And we store that right here in a variable that we're currently not using.

119
00:09:07,370 --> 00:09:13,370
Next up let's go ahead and get the visible height so the visible height is something that's not going

120
00:09:13,370 --> 00:09:14,990
to change often.

121
00:09:14,990 --> 00:09:17,690
So right here as an example the visible height.

122
00:09:17,690 --> 00:09:24,290
Let's just say is one hundred pixels as I add new messages in that doesn't change as those messages

123
00:09:24,290 --> 00:09:25,430
go off the screen.

124
00:09:25,430 --> 00:09:27,270
That doesn't change as well.

125
00:09:27,410 --> 00:09:33,410
The amount of space I can view stays the same even though the total content is a bit longer.

126
00:09:33,470 --> 00:09:39,230
So we need that value and we can get it with one line const visible height.

127
00:09:39,230 --> 00:09:44,050
I'm just storing things in a variable here to make it a little easier to work with.

128
00:09:44,210 --> 00:09:51,460
We are going to grab the messages element and we're going to access its offset height to get that value.

129
00:09:51,470 --> 00:09:54,980
Now the next thing we need is the total height of that container.

130
00:09:54,980 --> 00:10:00,820
So in this case the container height is much larger than the visible height as there are things I cannot

131
00:10:00,850 --> 00:10:01,820
see.

132
00:10:01,840 --> 00:10:04,820
So right here let's go ahead and get that done.

133
00:10:04,940 --> 00:10:07,010
A new comment right here.

134
00:10:07,010 --> 00:10:15,260
Height of messages container will create a new variable for that as well.

135
00:10:15,260 --> 00:10:17,860
Something like container height or content height.

136
00:10:21,110 --> 00:10:25,170
And right here we will once again access messages.

137
00:10:25,430 --> 00:10:31,970
This time though accessing a different property that is scroll height so this gives us the total height

138
00:10:32,000 --> 00:10:34,580
we are able to scroll through.

139
00:10:34,700 --> 00:10:40,040
Next up what we need is to figure out how far down we are scrolled so are we.

140
00:10:40,040 --> 00:10:46,760
Up top are we down below we need to figure out how far down we have actually scrolled in order to perform

141
00:10:46,790 --> 00:10:49,000
this calculation correctly.

142
00:10:49,100 --> 00:10:50,120
So right here.

143
00:10:50,120 --> 00:10:58,070
Something like How far have I scrawled we're going to store this in a variable and this is actually

144
00:10:58,070 --> 00:11:00,320
the last variable we're going to create.

145
00:11:00,350 --> 00:11:05,750
I'll call it scroll offset and we're going to start with the following that is.

146
00:11:05,750 --> 00:11:08,930
Messages dot scroll top.

147
00:11:08,930 --> 00:11:10,730
Now what exactly does scroll top.

148
00:11:10,730 --> 00:11:11,630
Give us.

149
00:11:11,630 --> 00:11:16,460
Well it gives us as a number the amount of distance we've scrolled from the top.

150
00:11:16,460 --> 00:11:18,240
So in this case it's zero.

151
00:11:18,320 --> 00:11:23,560
The top of my scroll bar is at the top of the content I can scroll through.

152
00:11:23,840 --> 00:11:26,660
And if I scrolled down the value gets larger.

153
00:11:26,660 --> 00:11:31,160
So in this case maybe it's something like 30 then 60 and so on.

154
00:11:31,160 --> 00:11:35,000
Now what we really want is to know how far from the bottom we are.

155
00:11:35,000 --> 00:11:40,860
But there is no scrolled bottom so we're going to work around that by taking these scroll top.

156
00:11:41,000 --> 00:11:45,980
That is the distance between the top of the content and the top of the scroll bar.

157
00:11:45,980 --> 00:11:51,170
And we're going to add on these scroll bars height which is just the visible height of the container

158
00:11:51,560 --> 00:11:55,610
that's going to give us a more accurate picture of how close to the bottom we are.

159
00:11:56,150 --> 00:12:01,520
So right here we take the scroll top and we add on our visible height.

160
00:12:01,550 --> 00:12:02,630
Perfect.

161
00:12:02,630 --> 00:12:08,270
Now with all of this in place we're actually ready to perform a little bit of conditional logic.

162
00:12:08,390 --> 00:12:14,870
This conditional logic is going to run some code and that code will scroll us to the bottom.

163
00:12:14,870 --> 00:12:17,330
Let's go ahead and talk about the condition.

164
00:12:17,390 --> 00:12:22,880
The first thing we're gonna do is we're going to take our container height so the total container height

165
00:12:22,940 --> 00:12:24,630
not just what's visible.

166
00:12:24,800 --> 00:12:28,130
And we're going to subtract the height of the last message.

167
00:12:28,370 --> 00:12:31,700
So that would be new message height.

168
00:12:31,700 --> 00:12:36,380
Now the reason we're doing this is because we want to figure out if we were scrolled to the bottom but

169
00:12:36,380 --> 00:12:38,630
before this message was added in.

170
00:12:38,810 --> 00:12:43,970
If we don't account for this we'll never be scrolled to the bottom because we're running this code just

171
00:12:44,000 --> 00:12:49,040
after adding the new message and the user would never get a chance to scroll down.

172
00:12:49,040 --> 00:12:52,570
So in this case we're just taking the new message out of the mix.

173
00:12:52,610 --> 00:12:58,640
So we're seeing if that container height is less than or equal to and in this case it's going to be

174
00:12:58,640 --> 00:13:00,860
our scroll offset.

175
00:13:00,860 --> 00:13:08,450
So we want to make sure that we were indeed at the bottom before the last message was added.

176
00:13:08,450 --> 00:13:13,180
Now if we were That's great we're going to auto scroll if not that's fine too.

177
00:13:13,180 --> 00:13:16,830
We're not going to auto scroll to auto scroll.

178
00:13:16,880 --> 00:13:21,260
All we do is we use messages dot scroll top.

179
00:13:21,260 --> 00:13:26,680
Now we already used that to read its value but we can also set its value.

180
00:13:26,720 --> 00:13:32,780
And in this case we're going to set it to these scroll height the total available content.

181
00:13:32,780 --> 00:13:41,220
We can scroll so right here messages dot scroll height and this is going to push us to the bottom.

182
00:13:41,300 --> 00:13:45,590
So we're setting a new value for how far down we're scrolled how far down.

183
00:13:45,590 --> 00:13:51,240
Well all the way now with this in place we should be able to test things out.

184
00:13:51,320 --> 00:13:56,810
Now it's important to note that a lot of the complexity here is to figure out if we were near the bottom

185
00:13:56,810 --> 00:13:57,430
or not.

186
00:13:57,530 --> 00:14:03,440
So we can provide the user with a nice user experience if you wanted to just always scroll them to the

187
00:14:03,440 --> 00:14:04,160
bottom.

188
00:14:04,160 --> 00:14:06,250
This function would be just one line.

189
00:14:06,260 --> 00:14:10,160
It would be this line always scroll to the bottom.

190
00:14:10,160 --> 00:14:16,280
In this case though we do want to provide that nicer user experience so they required a bit more code.

191
00:14:16,340 --> 00:14:21,320
But now that you know how to do this you could perform this in all of your applications over in the

192
00:14:21,320 --> 00:14:21,830
browser.

193
00:14:21,860 --> 00:14:23,630
Let's test things out.

194
00:14:23,630 --> 00:14:29,210
So right here I'm going to go ahead and provide some messages right here I can see that things are working

195
00:14:29,210 --> 00:14:30,540
as expected.

196
00:14:30,560 --> 00:14:35,630
Now the next message is going to get clipped but we can see we do scroll to the bottom.

197
00:14:35,750 --> 00:14:41,090
Then I'll add five six and seven and I'm scrolling to the bottom for all of those.

198
00:14:41,090 --> 00:14:46,820
Now I'm going to scroll up saying maybe I wanted to look through the history to see what the first message

199
00:14:46,820 --> 00:14:47,500
was.

200
00:14:47,600 --> 00:14:50,780
But during that time someone else sends a message.

201
00:14:50,810 --> 00:14:53,360
In this case we can just send it ourselves.

202
00:14:53,360 --> 00:14:56,990
I will send the message test exclamation mark.

203
00:14:56,990 --> 00:14:58,430
I send that off.

204
00:14:58,430 --> 00:15:05,240
It does get sent but you can see we haven't been automatically scrolled down since we manually scrolled

205
00:15:05,300 --> 00:15:06,170
up.

206
00:15:06,170 --> 00:15:12,470
Now in the future if I do scroll all the way down I am now seeing test and four new messages I would

207
00:15:12,470 --> 00:15:19,970
get auto scrolled so I can continue on with eight and then nine and I'm auto scrolled as expected.

208
00:15:19,970 --> 00:15:27,650
So this behavior just gives us a little more flexibility allowing us to provide a nice UI for that user.

209
00:15:27,650 --> 00:15:32,540
And it's something that's going to work even as we change the height and the width of the browser.

210
00:15:32,540 --> 00:15:39,200
So right here I add another message in and it is still auto scrolling since we recalculate all of those

211
00:15:39,200 --> 00:15:44,600
values every single time we perform that auto scrolling logic.

212
00:15:44,600 --> 00:15:49,730
Now if you're not into the front end or the browser this video might have been more frustrating than

213
00:15:49,730 --> 00:15:50,360
anything.

214
00:15:50,360 --> 00:15:54,590
But regardless it is all done and we have auto scrolling set.

215
00:15:54,680 --> 00:15:57,920
That's where we're going to stop for this one in the next lesson.

216
00:15:57,930 --> 00:16:00,800
We'll be deploying our chat app to production.

217
00:16:00,800 --> 00:16:02,510
So let's jump right into that.
