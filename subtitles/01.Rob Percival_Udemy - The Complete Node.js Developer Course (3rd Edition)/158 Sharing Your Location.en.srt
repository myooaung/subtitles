1
00:00:00,210 --> 00:00:06,120
In this lesson you'll be adding a new feature to the chat application which is going to allow users

2
00:00:06,120 --> 00:00:09,300
to share their exact location with one another.

3
00:00:09,330 --> 00:00:15,720
Now to actually get the user's location we'll be running a little client side JavaScript code using

4
00:00:15,720 --> 00:00:23,370
the browsers geo location API that gives us a way to fetch the location for a given user assuming of

5
00:00:23,370 --> 00:00:26,580
course they consent to sharing their location.

6
00:00:26,640 --> 00:00:33,120
We'll be using that from client side JavaScript to fetch their latitude and longitude and once we have

7
00:00:33,120 --> 00:00:39,840
those coordinates we'll share them with the server who will share them with all other connected clients.

8
00:00:39,840 --> 00:00:46,050
So it's similar to how we share a message though instead of the user typing a message and sharing that

9
00:00:46,470 --> 00:00:51,750
we'll be fetching coordinates using this browser API and sharing those.

10
00:00:51,750 --> 00:00:59,010
Now the exact API we're going to use can be found by cracking open a new browser tab right here.

11
00:00:59,010 --> 00:01:06,450
We're going to Google M.D. end geo location M.D. and standing for the Mozilla Developer Network.

12
00:01:06,450 --> 00:01:11,040
It is a great set of documentation for everything browser based.

13
00:01:11,100 --> 00:01:17,960
Right here we can view the API documentation which is going to show us how we can fetch that location.

14
00:01:17,970 --> 00:01:20,720
Now I'm only pulling this up show you so you know where it lives.

15
00:01:20,720 --> 00:01:24,080
Of course we're going to go through all of this together in the lesson.

16
00:01:24,270 --> 00:01:25,880
So let's go ahead and get started.

17
00:01:25,890 --> 00:01:30,780
And the first thing we need to do is make a change to the user interface.

18
00:01:30,840 --> 00:01:36,870
What we're gonna do is show them a another button which they can click to share their location and that

19
00:01:36,870 --> 00:01:40,980
will show up for other users like a regular chat message.

20
00:01:40,980 --> 00:01:45,640
Now let's go ahead and get that done by moving over to index dot HDL.

21
00:01:45,720 --> 00:01:53,100
We're going to create a new button just outside of the form so right down below I'll create a new button

22
00:01:53,130 --> 00:01:58,450
with the text of send location or something similar and you can use whatever you'd like.

23
00:01:58,500 --> 00:02:05,730
And we're also going to set up an I.D. so we can easily target this button from javascript right here.

24
00:02:05,730 --> 00:02:09,030
Let's go ahead and use something like send location.

25
00:02:09,030 --> 00:02:10,170
Perfect.

26
00:02:10,170 --> 00:02:17,570
Now we can go ahead and save the file and actually wire up a click event for this button over in chat

27
00:02:17,580 --> 00:02:25,740
dot J S when the button is clicked then we'll use that geo location API to actually fetch the user's

28
00:02:25,800 --> 00:02:28,160
location over in chat Dot.

29
00:02:28,160 --> 00:02:32,310
J Yes all of that is going to happen at the very bottom of the file.

30
00:02:32,340 --> 00:02:34,350
Right here we'll kick this off with code.

31
00:02:34,350 --> 00:02:35,620
We already know about.

32
00:02:35,640 --> 00:02:42,600
I'm just going to use document dot query selector to grab that button by its I.D. and the I.D. we picked

33
00:02:42,600 --> 00:02:51,120
was send location and from there I'll use add event listener and we are going to add the Click event

34
00:02:51,150 --> 00:02:55,430
listener and we'll run at the following function when the button is clicked.

35
00:02:55,440 --> 00:02:59,760
Now not every browser supports this geo location API.

36
00:02:59,760 --> 00:03:01,620
Most modern browsers do.

37
00:03:01,620 --> 00:03:07,140
But if they're using an older operating system and an older browser we want to make sure to show them

38
00:03:07,140 --> 00:03:11,690
a message if they're not going to be able to perform this operation.

39
00:03:11,820 --> 00:03:19,300
Now everything we need for geo location lives on navigator dot geo location.

40
00:03:19,390 --> 00:03:22,970
Now if this exists that means they have support for it.

41
00:03:22,990 --> 00:03:27,290
If this does not exist that means they don't have support for it.

42
00:03:27,340 --> 00:03:32,770
So what we're going to do is use this inside of an if statement to check if they don't have support

43
00:03:33,370 --> 00:03:33,970
right here.

44
00:03:33,970 --> 00:03:41,950
If we're going to look at that property once again that is navigator dot geo location and then we're

45
00:03:41,950 --> 00:03:46,710
going to use the logical not operator to check if it does not exist.

46
00:03:46,840 --> 00:03:50,690
If it does not exist we're going to run the following code.

47
00:03:50,770 --> 00:03:56,740
I'm gonna use a return to stop the function execution and we're just going to stick with an old school

48
00:03:56,770 --> 00:04:00,620
alert function call to print a little message.

49
00:04:00,640 --> 00:04:06,450
You could use a modal if you wanted to but for now an alert will get the job done right here.

50
00:04:06,460 --> 00:04:12,520
Something like geo location is not supported by your browser.

51
00:04:12,520 --> 00:04:13,760
Perfect.

52
00:04:13,760 --> 00:04:19,810
Now down below we'll run some code for a wind geo location is supported and the first and only thing

53
00:04:19,810 --> 00:04:22,880
we're going to do is get their location so we can share it.

54
00:04:22,900 --> 00:04:24,640
The location can be fetched.

55
00:04:24,640 --> 00:04:31,230
Using navigator dot geo location dot get current position.

56
00:04:31,440 --> 00:04:37,980
Now get current position is indeed a synchronous it takes a little time to get the location but unfortunately

57
00:04:37,980 --> 00:04:44,440
it currently does not support the promised API so we can't use promises or async await.

58
00:04:44,550 --> 00:04:50,170
Instead we'll be calling this function passing to it a single callback function.

59
00:04:50,190 --> 00:04:53,370
This could be a standard function or an arrow function.

60
00:04:53,370 --> 00:04:55,580
I'll stick with an arrow function.

61
00:04:55,680 --> 00:05:02,730
Now this function will eventually get called with an object called position and this contains the information

62
00:05:02,790 --> 00:05:04,130
we want to share.

63
00:05:04,170 --> 00:05:10,050
Now before we actually share it let's go ahead and long get to the console to see what exactly we have

64
00:05:10,050 --> 00:05:11,430
access to.

65
00:05:11,460 --> 00:05:16,650
So right here all I'm going to do is log out the position object.

66
00:05:16,650 --> 00:05:20,770
Now we can save chat dot J.S. and actually test things out.

67
00:05:20,910 --> 00:05:25,190
I'll make sure all my files are saved and I'll refresh the browser.

68
00:05:25,200 --> 00:05:28,270
Right here we have our send location button.

69
00:05:28,320 --> 00:05:33,690
Now when I click that I'm gonna have to consent to sharing my location right here.

70
00:05:33,690 --> 00:05:38,940
Chrome is letting me know that local host three thousand wants to know my location.

71
00:05:39,030 --> 00:05:45,090
I'll click allow and it's going to take maybe a couple of seconds for the location to get fetched and

72
00:05:45,090 --> 00:05:48,690
once it is we'll see the object down below.

73
00:05:48,690 --> 00:05:55,410
Now if I expand it we can see we have a timestamp property showing when the location was actually fetched

74
00:05:55,710 --> 00:05:57,590
and then we have courts.

75
00:05:57,600 --> 00:06:04,380
If I crack that open we can see we have the latitude and longitude and that is exactly what we want

76
00:06:04,410 --> 00:06:05,610
access to.

77
00:06:05,610 --> 00:06:11,970
Those are the two values we're going to share with the server as this is enough information to determine

78
00:06:12,030 --> 00:06:13,080
your location.

79
00:06:13,080 --> 00:06:18,000
Now getting the rest of this done is something that you already know how to do so we're not going to

80
00:06:18,000 --> 00:06:19,430
do it together instead.

81
00:06:19,440 --> 00:06:21,880
It'll be your challenge for the lesson.

82
00:06:21,990 --> 00:06:27,390
So down below I'm going to paste in the challenge comments describing what I'd like you to do.

83
00:06:27,440 --> 00:06:32,430
The big picture goal is to share those coordinates with the other users.

84
00:06:32,430 --> 00:06:38,430
Now later on in the section we'll learn how to share a link that links to a Google API map with your

85
00:06:38,430 --> 00:06:39,680
location pinned.

86
00:06:39,840 --> 00:06:45,360
But for now we're just going to share the latitude and longitude as a text.

87
00:06:45,390 --> 00:06:52,650
So step one you're going to have the client emit a new event called Send location and the data is going

88
00:06:52,650 --> 00:06:56,430
to be a single object with the following properties.

89
00:06:56,430 --> 00:07:04,200
The object should contain the latitude and longitude properties with the correct values off of the position

90
00:07:04,290 --> 00:07:08,380
object and you're going to emit that event right here.

91
00:07:08,400 --> 00:07:11,580
Now once the event is emitted from chat dot J asked.

92
00:07:11,580 --> 00:07:14,640
That's the only change you'll need to make to this file.

93
00:07:14,730 --> 00:07:19,920
The other change is going to be on the server since you're emitting this new event from the client.

94
00:07:19,920 --> 00:07:21,990
The server needs to listen for it.

95
00:07:22,110 --> 00:07:29,850
So set up the server to listen for send location when the server receives that it should fire off a

96
00:07:29,850 --> 00:07:38,430
message event to all connected clients a string in the following format location colon space then the

97
00:07:38,430 --> 00:07:43,590
actual longitude comma followed by the actual latitude.

98
00:07:43,590 --> 00:07:45,870
Actually I believe that's reversed.

99
00:07:45,870 --> 00:07:49,910
It should be the latitude followed by the long etude.

100
00:07:49,920 --> 00:07:51,210
Perfect.

101
00:07:51,210 --> 00:07:56,990
So once again you want to replace lat and long with the actual values that the server received.

102
00:07:57,060 --> 00:08:03,150
You're gonna send all of this as a string message like we're already sending our messages from server

103
00:08:03,180 --> 00:08:08,130
to client then you're going to test your work when you click send location.

104
00:08:08,130 --> 00:08:13,580
The result is that you should see a new message in the terminal with those coordinates showing up.

105
00:08:13,980 --> 00:08:21,850
If you had two users user one should be able to share the location and user 2 should see the coordinates.

106
00:08:21,960 --> 00:08:27,290
So take some time to knock that out test your work and when you're done come back and click play

107
00:08:31,360 --> 00:08:31,910
all right.

108
00:08:31,910 --> 00:08:32,650
How'd you do.

109
00:08:32,680 --> 00:08:38,030
Let's go ahead and kick things off by sending the location from the client to the server.

110
00:08:38,050 --> 00:08:44,000
So right here what do we want to do I want to use socket data emit to emit a new event.

111
00:08:44,110 --> 00:08:49,340
I said the name should be send location so I'll provide that as the first argument.

112
00:08:49,480 --> 00:08:56,640
And I said the only piece of data we need to send is an object so I'll provide that as the second argument.

113
00:08:56,710 --> 00:09:01,050
Now on here we want to get access to the latitude and longitude.

114
00:09:01,150 --> 00:09:07,150
So we'll go ahead and set up both of those properties grabbing them off of the position object we had

115
00:09:07,150 --> 00:09:09,370
dumped to the terminal earlier.

116
00:09:09,370 --> 00:09:10,020
So right here.

117
00:09:10,050 --> 00:09:16,780
Let's go ahead and start with the latitude we're going to grab that off of position now.

118
00:09:16,820 --> 00:09:23,780
That is position dot chords as we saw over here in the terminal for the Chrome developer tools.

119
00:09:23,780 --> 00:09:26,960
Then that is chords dot latitude.

120
00:09:27,320 --> 00:09:28,370
Perfect.

121
00:09:28,370 --> 00:09:30,110
Next up is the longitude.

122
00:09:30,140 --> 00:09:33,160
So right here we'll go ahead and list that one out.

123
00:09:33,500 --> 00:09:40,080
And once again position dot coords dot right here longitude excellent.

124
00:09:40,110 --> 00:09:41,040
And there we go.

125
00:09:41,040 --> 00:09:44,610
That's the only thing we need to do from the client.

126
00:09:44,610 --> 00:09:48,170
Everything else is going to go ahead and happen on the server.

127
00:09:48,210 --> 00:09:52,880
So we have latitude and latitude and longitude and longitude.

128
00:09:52,890 --> 00:09:56,850
Now we can go ahead and remove AUST COUNCIL dialoguing that position.

129
00:09:56,850 --> 00:09:59,500
There is no longer any need to actually do that.

130
00:09:59,580 --> 00:10:02,870
If you still have that in place just go ahead and remove it now.

131
00:10:03,030 --> 00:10:09,370
And next up we're going to receive this event on the server and make sure it gets shared correctly.

132
00:10:09,420 --> 00:10:15,060
So over here in index dot J s what I'm going to do is set up a new listener.

133
00:10:15,060 --> 00:10:17,760
So right here we have on send a message.

134
00:10:17,760 --> 00:10:22,020
This is where we send our messages out to all connected clients.

135
00:10:22,050 --> 00:10:28,910
We're going to set up a nother socket dot on call this time listening for send a location.

136
00:10:28,920 --> 00:10:32,390
And when that happens we're going to get access to our object.

137
00:10:32,400 --> 00:10:38,560
The one that we just set up and we could call that whatever we wanted to such as courts.

138
00:10:38,580 --> 00:10:39,700
Perfect.

139
00:10:39,720 --> 00:10:45,930
Next up we want to make sure we share that data with all connected clients and we know that when we

140
00:10:45,930 --> 00:10:49,040
want to do that we use I O dot emit.

141
00:10:49,290 --> 00:10:56,130
And right here we are going to emit the message event and we are going to provide our string and I'll

142
00:10:56,130 --> 00:11:00,610
use an E S6 template string to generate what we want to generate.

143
00:11:00,630 --> 00:11:04,050
Now I outlined that right over here in the challenge comments.

144
00:11:04,050 --> 00:11:06,810
So let's go ahead and knock that one out.

145
00:11:06,810 --> 00:11:11,520
We start off with location colon space followed by the latitude.

146
00:11:11,820 --> 00:11:21,610
So I will interpolate cords dot latitude then after latitude a comma and a space followed by right here

147
00:11:21,640 --> 00:11:23,740
coords dot longitude.

148
00:11:23,920 --> 00:11:24,580
Perfect.

149
00:11:24,580 --> 00:11:27,430
And with this in place we are all done.

150
00:11:27,490 --> 00:11:34,300
If the location gets shared from client to server and then the server shares it with everyone else let's

151
00:11:34,300 --> 00:11:38,070
go ahead and make sure we've saved all of our files and over in the browser.

152
00:11:38,080 --> 00:11:40,320
I'm going to give things a quick refresh.

153
00:11:40,360 --> 00:11:44,530
Now let's go ahead and create a second browser window as well.

154
00:11:44,530 --> 00:11:53,020
Right here I'll navigate over to local host on port three thousand and I'm also gonna open up the Chrome

155
00:11:53,020 --> 00:11:55,060
developer tools for this one.

156
00:11:55,080 --> 00:11:59,560
Now when we share the location again we're not going to have to tell the browser that we want to allow

157
00:11:59,560 --> 00:12:01,240
the site to access it.

158
00:12:01,240 --> 00:12:03,600
As we've already consented to it.

159
00:12:03,670 --> 00:12:09,070
So right here I'm gonna have user to share their location and I can see that we have the coordinate

160
00:12:09,070 --> 00:12:11,300
pair showing up for everyone.

161
00:12:11,320 --> 00:12:17,740
That means the location was fetched it was shared with the server and the server shared it with everyone

162
00:12:17,740 --> 00:12:18,420
else.

163
00:12:18,430 --> 00:12:19,770
Now to wrap up the lesson.

164
00:12:19,780 --> 00:12:23,070
Oh we're going to do is change the message we're sending back.

165
00:12:23,110 --> 00:12:28,740
So over in Visual Studio code we're going to send a link to google maps instead.

166
00:12:28,810 --> 00:12:32,650
This is going to show the exact location for these coordinates.

167
00:12:32,860 --> 00:12:36,460
So let's see what the U are L structure for this looks like.

168
00:12:36,460 --> 00:12:42,160
It is h TTP s followed by a colon forward slash forward slash.

169
00:12:42,280 --> 00:12:47,170
Then it is Google dot com forward slash maps.

170
00:12:47,350 --> 00:12:54,220
Right here we set up the question mark for our query string and we set up Q setting it equal to the

171
00:12:54,250 --> 00:13:00,550
latitude which I'll just set to zero followed by a comma followed by the longitude.

172
00:13:00,880 --> 00:13:06,940
So this is the U R L structure we want to use now when we visit that it's going to bring us over to

173
00:13:06,970 --> 00:13:12,470
Google Maps and right here I can see that it's dropped a pin at that exact location.

174
00:13:12,490 --> 00:13:15,340
Now in this case that is in the middle of the ocean.

175
00:13:15,430 --> 00:13:20,200
But once we actually change it to work with our real coordinates it should be pretty accurate as to

176
00:13:20,200 --> 00:13:22,150
where we are in the world.

177
00:13:22,150 --> 00:13:24,300
So let's go ahead and get that done.

178
00:13:24,340 --> 00:13:30,880
I'm going to close down this tab over inside a visual studio code I can remove these challenge comments

179
00:13:30,880 --> 00:13:33,400
as we're all done with the challenge.

180
00:13:33,490 --> 00:13:40,540
I'll save the file and in index dot J Yes we're going to change the string we're sending back now right

181
00:13:40,540 --> 00:13:41,000
here.

182
00:13:41,050 --> 00:13:44,570
We do still want the latitude followed by the longitude.

183
00:13:44,590 --> 00:13:51,240
So we can keep that in place but I'm gonna do though is remove this space from there.

184
00:13:51,270 --> 00:13:54,050
What we're going to do is change what's up front.

185
00:13:54,120 --> 00:13:59,850
We'll remove location colon space and this is where we'll put the rest of the U.R.L..

186
00:13:59,850 --> 00:14:08,790
So once again H TTP s colon forward slash forward slash Google dot com forward slash maps then question

187
00:14:08,790 --> 00:14:11,810
mark Q equals perfect.

188
00:14:11,850 --> 00:14:18,660
Now when we send the actual geo location information it's in a much more useful form.

189
00:14:18,660 --> 00:14:22,280
So right here I've saved the file restarting the server.

190
00:14:22,500 --> 00:14:29,010
I'm gonna head over to Google Chrome and just give both of those browser windows a quick refresh and

191
00:14:29,010 --> 00:14:35,640
we're going to share the location from one with the other when the location does show up we'll see it's

192
00:14:35,640 --> 00:14:42,200
now a clickable link and once again we'll be integrating all of this into the user interface up above.

193
00:14:42,360 --> 00:14:47,940
And if we actually click it it's going to open up Google Maps and it's going to put a pin at that exact

194
00:14:47,940 --> 00:14:49,920
location right here.

195
00:14:49,920 --> 00:14:57,000
This isn't exactly where I am but it's close enough so now that we have this in place we have the ability

196
00:14:57,000 --> 00:15:02,740
to share a user's location providing useful information to everyone else.

197
00:15:02,760 --> 00:15:08,820
That's where we're going to stop for this one in the next lesson we'll continue on with our chat application.

198
00:15:08,820 --> 00:15:10,970
So stay tuned and I'll see you soon.
