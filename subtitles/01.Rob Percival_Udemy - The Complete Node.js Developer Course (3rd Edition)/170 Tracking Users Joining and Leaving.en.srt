1
00:00:00,360 --> 00:00:05,670
In this lesson you'll be taking the functions you created in the last video and actually integrating

2
00:00:05,670 --> 00:00:07,000
them into index.

3
00:00:07,050 --> 00:00:13,500
J.S. remember the whole point of tracking the users was to make sure we had access to things like the

4
00:00:13,500 --> 00:00:18,510
user name and room name throughout our other event listeners as well.

5
00:00:18,510 --> 00:00:24,900
So we're going to alter these making sure that they do only emit messages to the correct chat room.

6
00:00:24,900 --> 00:00:30,960
We're also going to include Users User names along with their messages so we can render those to the

7
00:00:30,960 --> 00:00:32,770
screen as well.

8
00:00:32,790 --> 00:00:36,990
Now to get started the first thing we need to do is load those functions in.

9
00:00:37,020 --> 00:00:44,430
So up top I'm going to do just that and I'll go ahead and grab all four using a little bit of D structuring.

10
00:00:44,430 --> 00:00:51,480
We have an object coming back when we require that file that's dot forward slash utilize a forward slash

11
00:00:51,540 --> 00:00:52,740
users.

12
00:00:52,740 --> 00:00:54,630
And right here we're gonna get all of them.

13
00:00:54,870 --> 00:00:58,990
So we have add user we have remove user.

14
00:00:59,100 --> 00:01:00,930
We have a get user.

15
00:01:00,930 --> 00:01:04,790
And finally we have get users in room.

16
00:01:04,890 --> 00:01:10,620
So we want to make sure we have access to all four of these functions now that we do.

17
00:01:10,620 --> 00:01:14,340
We're going to go ahead and edit on join right here.

18
00:01:14,340 --> 00:01:18,840
The user is indeed joining the room using socket not join.

19
00:01:18,840 --> 00:01:24,000
This is where we want to use add user to start keeping track of them.

20
00:01:24,000 --> 00:01:29,460
Now I mentioned that every single connection has a unique I.D. associated with it.

21
00:01:29,520 --> 00:01:32,990
So we're going to learn where that lives as well right here.

22
00:01:33,000 --> 00:01:36,970
The first thing we're going to do is to try to use that function.

23
00:01:37,020 --> 00:01:44,970
I'm going to try to use ad user to add the user to that users array providing their socket I.D. the

24
00:01:44,970 --> 00:01:47,800
user name and the room name.

25
00:01:47,820 --> 00:01:53,940
Now I'm going to call this providing the options object setting up I.D. user name in Rome.

26
00:01:53,940 --> 00:01:57,070
Now the only one we don't know how to set is high deep.

27
00:01:57,140 --> 00:02:01,730
The value for this comes actually on the socket object itself.

28
00:02:01,800 --> 00:02:08,100
It is a socket dot I.D. That is the unique identifier for that particular connection.

29
00:02:08,100 --> 00:02:14,250
Now notice this is in the parent scope for all of our event listeners which means that inside of send

30
00:02:14,250 --> 00:02:20,780
a message I'm gonna be able to use get user to get the user by its socket I.D..

31
00:02:21,030 --> 00:02:25,840
They don't have access to their room name and their user name which I can use throughout.

32
00:02:25,920 --> 00:02:28,800
And that's exactly what we'll end up doing up above.

33
00:02:28,800 --> 00:02:31,380
So we have to finish off this function call.

34
00:02:31,380 --> 00:02:36,320
So we have the I.D. set then it is the user name and the room.

35
00:02:36,330 --> 00:02:42,750
Now we know we get back an object with either the error property if something went wrong or the user

36
00:02:42,750 --> 00:02:45,120
property if things went well.

37
00:02:45,270 --> 00:02:52,000
Right here what I'm gonna do is dish structure that object storing both in individual variables.

38
00:02:52,020 --> 00:02:57,230
So I potentially have an error or I have user only 1.

39
00:02:57,690 --> 00:03:05,010
No down below we can use a little conditional logic if the person was not able to successfully join

40
00:03:05,280 --> 00:03:11,190
then we're going to want to notify them of that saying something like that user names already taken

41
00:03:11,190 --> 00:03:15,690
or that they need to provide a user name and a room name right here.

42
00:03:15,720 --> 00:03:22,510
Let's go ahead and actually get that done a little conditional logic will allow us to get this done.

43
00:03:22,530 --> 00:03:28,290
We're going to see if there is an error and if there is we're going to send that back to the client

44
00:03:28,350 --> 00:03:30,380
using an acknowledgement now.

45
00:03:30,420 --> 00:03:34,880
Currently there is no acknowledgment setup for the join event.

46
00:03:34,890 --> 00:03:41,070
So right here when we admit it we're not providing a function that's going to run when it's been acknowledged.

47
00:03:41,070 --> 00:03:46,740
This is something we're doing for other events we admit like send location we provide our acknowledgement

48
00:03:46,740 --> 00:03:48,420
function right here.

49
00:03:48,420 --> 00:03:54,900
So all we need to do is provide a function as the final argument to omit this function is going to get

50
00:03:54,900 --> 00:03:57,420
called with an error if there is any.

51
00:03:57,510 --> 00:04:00,300
Otherwise it'll get called with no error.

52
00:04:00,300 --> 00:04:03,840
And that's just going to let the client know what exactly is going on.

53
00:04:04,170 --> 00:04:09,360
If something does go wrong the client will be able to use that information to show the message to the

54
00:04:09,360 --> 00:04:10,470
user.

55
00:04:10,560 --> 00:04:18,810
So over inside of index dot J S we now get access to that as the final argument to our event listener

56
00:04:18,840 --> 00:04:19,770
function.

57
00:04:19,770 --> 00:04:23,180
So right here I'm going to call this callback.

58
00:04:23,220 --> 00:04:29,610
This is the exact same pattern we used for send a message right here and force send location down below

59
00:04:29,640 --> 00:04:33,060
that and we call the callback whenever we want to.

60
00:04:33,060 --> 00:04:36,060
It's up to us to determine how we're going to use it.

61
00:04:36,210 --> 00:04:42,750
Right here I'm going to call the callback with the error if there is one letting the client know what

62
00:04:42,750 --> 00:04:44,100
exactly went wrong.

63
00:04:44,520 --> 00:04:48,750
And I'm going to use return it to stop the function execution.

64
00:04:48,750 --> 00:04:54,590
So none of the code down below runs I could alternatively not use return and use it.

65
00:04:54,600 --> 00:04:58,610
Else block instead either way gets the job done.

66
00:04:58,680 --> 00:05:04,680
So at this point the code down below is only running if the user was indeed added and we're going to

67
00:05:04,680 --> 00:05:10,410
end up doing some stuff pretty similar to what we're already doing right here we are still going to

68
00:05:10,410 --> 00:05:17,400
have them join the room and using socket dot join we're still going to emit that welcome message.

69
00:05:17,400 --> 00:05:23,820
And down below we are already correctly broadcasting that welcome message which is great.

70
00:05:23,820 --> 00:05:29,400
The only new thing we're going to do is we're going to call that callback function after all of this

71
00:05:29,460 --> 00:05:30,630
is complete.

72
00:05:30,630 --> 00:05:37,770
So down below right here I'm just going to call the callback letting the client know that they were

73
00:05:37,770 --> 00:05:44,430
able to join here I'm calling it without any arguments which means without an error down below I'll

74
00:05:44,430 --> 00:05:48,240
remove the comments from the previous video and there we go.

75
00:05:48,270 --> 00:05:53,220
We now have a joint event listener that is actually tracking the user.

76
00:05:53,220 --> 00:05:58,980
Actually there is one more change we need to make right here we have user name and the room name.

77
00:05:58,980 --> 00:06:04,020
Remember that these are going to be trimmed and converted by ad user.

78
00:06:04,170 --> 00:06:07,950
That means what we really want to do is use the output from AD user.

79
00:06:07,950 --> 00:06:13,860
The stuff that lives on the user object itself as that is the correct version.

80
00:06:13,860 --> 00:06:20,160
So down below instead of room that would be something like user dot room and the same would be true

81
00:06:20,160 --> 00:06:25,050
down here for our other instance of room and for our instance of user name.

82
00:06:25,530 --> 00:06:28,770
So that would be user dot user name.

83
00:06:28,770 --> 00:06:35,250
Now we're just making sure that we use the version that add user is actually storing in our little array

84
00:06:35,250 --> 00:06:36,600
of users.

85
00:06:36,600 --> 00:06:40,690
Now with this in place you could do a bit of restructuring of the arguments.

86
00:06:40,770 --> 00:06:44,190
It's really up to you to determine how you want to set things up.

87
00:06:44,250 --> 00:06:50,880
So obviously this approach works fine as an alternative approach maybe you don't de structure this first

88
00:06:50,970 --> 00:06:57,660
object and you just call it something like options then you could use the rest operator which we explored

89
00:06:57,690 --> 00:07:04,530
earlier in the class to put all of those on this object alongside of I.D. so no longer do we have user

90
00:07:04,530 --> 00:07:06,810
name and room as variables.

91
00:07:06,990 --> 00:07:12,880
Instead I would use the spread operator spreading out the options object like this.

92
00:07:13,020 --> 00:07:15,900
That would be a fine approach as well.

93
00:07:15,900 --> 00:07:21,630
Now before we can actually test out this functionality we should probably also clean up the user when

94
00:07:21,630 --> 00:07:27,480
they disconnect otherwise those user names are never going to be cleared out of the users array and

95
00:07:27,480 --> 00:07:30,360
will become unavailable for ever so.

96
00:07:30,360 --> 00:07:33,960
Down below inside of socket dot on disconnect.

97
00:07:33,960 --> 00:07:39,480
We're going to do something similar to what we did above though instead of using add user we'll be using

98
00:07:39,540 --> 00:07:41,250
remove user.

99
00:07:41,250 --> 00:07:47,640
Now we're still removing them by their I.D. That is socket dot I.D. exactly like we had used before

100
00:07:48,120 --> 00:07:52,770
and we know that remove user which we created will return one of two things.

101
00:07:52,920 --> 00:08:00,300
We either get back the user that was removed as an object or undefined if no user was removed.

102
00:08:00,300 --> 00:08:05,670
So right here I am removing the user and storing it in a user variable.

103
00:08:05,760 --> 00:08:11,780
Now down below we actually want to use a little conditional logic before sending this message.

104
00:08:11,810 --> 00:08:17,120
There's a chance that the person who's disconnecting was never actually part of a room.

105
00:08:17,280 --> 00:08:24,020
For example if they fire join from the client with invalid data and then saw the error and closed the

106
00:08:24,020 --> 00:08:24,920
browser.

107
00:08:25,040 --> 00:08:29,720
There and actually no one who needs to see this message as they never joined the room and no one needs

108
00:08:29,720 --> 00:08:31,110
to be notified.

109
00:08:31,160 --> 00:08:35,100
Right here though if we do have a user they were part of a room.

110
00:08:35,180 --> 00:08:42,870
So if there is a user then and only then are we going to send a message saying that the user has left.

111
00:08:43,040 --> 00:08:49,730
So I'll cut that out of its current location put it inside of our if code block and remove those extra

112
00:08:49,820 --> 00:08:51,520
empty lines.

113
00:08:51,650 --> 00:08:57,860
Now from here we could also choose to include the user's name since we have access to that data.

114
00:08:57,860 --> 00:09:06,500
I have user dot user name and I have user dot room so right here we're gonna go ahead and use the two

115
00:09:06,500 --> 00:09:11,330
method to make sure we're only sending this message to folks in the same room.

116
00:09:11,330 --> 00:09:17,990
That is I O dot to providing the name of the room user dot room.

117
00:09:17,990 --> 00:09:24,260
Then we emit the message and here we're just going to use a template string instead of our current static

118
00:09:24,320 --> 00:09:25,270
string.

119
00:09:25,400 --> 00:09:32,150
So I'll start off with the user name user dot user name followed by a space and then I could just say

120
00:09:32,150 --> 00:09:34,240
something like has left.

121
00:09:34,280 --> 00:09:42,020
So Andrew has left or Mike has left now with this in place we are adding users and removing users when

122
00:09:42,020 --> 00:09:43,230
we're supposed to.

123
00:09:43,310 --> 00:09:50,120
And we can now go ahead and test things out make sure to save all of your files including chat dot J.S.

124
00:09:50,180 --> 00:09:54,080
even though we're not doing anything in this callback just yet.

125
00:09:54,080 --> 00:10:01,300
And down below we're going to start up our chat app once again using NPM run Dev.

126
00:10:01,460 --> 00:10:07,130
I'm gonna start up that dev server and in the Chrome browser I'll refresh both of those tabs.

127
00:10:07,130 --> 00:10:11,210
Now if you remember we have two users in different chat rooms.

128
00:10:11,300 --> 00:10:18,170
So over here if I look at the U.R.L. Andrew is in South Philly then over here I have Jess in Center

129
00:10:18,170 --> 00:10:22,580
City now in the past when a user left from any room.

130
00:10:22,580 --> 00:10:27,970
Every other user was notified whether or not they were in the same room with the code.

131
00:10:27,980 --> 00:10:35,780
We just put in place that should have been fixed since we changed the image event inside of on disconnect.

132
00:10:35,870 --> 00:10:40,210
To use that to method sending it to a specific room.

133
00:10:40,430 --> 00:10:45,950
So over here what I'm going to do is open up a new tab and then close the old one and we can see that

134
00:10:45,950 --> 00:10:49,280
we're not notified over here which is correct.

135
00:10:49,280 --> 00:10:52,310
Then I'll head open to local host three thousand.

136
00:10:52,310 --> 00:10:57,710
Again I should have said head over but head open is a nice shorthand for what I was doing.

137
00:10:57,860 --> 00:11:01,070
And right here we're gonna have just joined the same room.

138
00:11:01,070 --> 00:11:02,090
Andrew is in.

139
00:11:02,450 --> 00:11:04,640
So that would be South Philly.

140
00:11:04,850 --> 00:11:11,060
Now when she joins I would expect to see the welcome message and once again sending those text messages.

141
00:11:11,060 --> 00:11:15,050
That's still going to everyone will focus on adjusting that shortly.

142
00:11:15,200 --> 00:11:22,910
But this time when Jess leaves I would expect to see the message since Jess is in the same room so I'm

143
00:11:22,910 --> 00:11:30,080
going to crack open that new tab and close the old one and I can see Jess has the left is printing.

144
00:11:30,080 --> 00:11:36,470
So now that we're tracking users were able to use that data to do what we want to do which is share

145
00:11:36,530 --> 00:11:40,190
the events with just people who should be notified.

146
00:11:40,190 --> 00:11:44,230
Just people in that same room now with this in place.

147
00:11:44,300 --> 00:11:50,090
What I want to do to wrap up the video is to actually handle errors that occur on the client.

148
00:11:50,330 --> 00:11:55,390
So right here if there is an error message that means someone wasn't able to join.

149
00:11:55,430 --> 00:12:02,060
Maybe the user name is already taken or there's no required data provided such as the user name or room

150
00:12:02,060 --> 00:12:02,870
name.

151
00:12:02,870 --> 00:12:08,840
In that case we'll show them a message and we'll redirect them back to the original page where they

152
00:12:08,840 --> 00:12:12,530
typed that information in so they could try again.

153
00:12:12,860 --> 00:12:18,650
If there is an error then and only then do we want to actually do something and we'll start by using

154
00:12:18,680 --> 00:12:21,770
alert to alert the error message.

155
00:12:21,770 --> 00:12:27,860
Now if you're using a different UI framework you could also choose to show this error inside of a modal

156
00:12:27,860 --> 00:12:30,610
window instead and then down below.

157
00:12:30,620 --> 00:12:33,700
We're just going to redirect them to the home page.

158
00:12:33,890 --> 00:12:36,570
Now for this we use the location global.

159
00:12:36,560 --> 00:12:42,890
Remember we read off of location dot search to get our query string that we passed if we want to redirect

160
00:12:42,890 --> 00:12:43,440
them.

161
00:12:43,460 --> 00:12:51,160
We set location dot H RAF equal to in this case forward slash to send them to the route of the site.

162
00:12:51,260 --> 00:12:53,420
That is the join page.

163
00:12:53,450 --> 00:12:55,580
Now let's try to generate an error.

164
00:12:55,580 --> 00:12:59,730
I'm gonna have two users with the same name join the same Roma.

165
00:13:00,020 --> 00:13:07,120
So over here in Google Chrome for this first tab I'll be heading over to local host three thousand.

166
00:13:07,120 --> 00:13:11,250
As Andrew I'm going to join a J.S. Rome.

167
00:13:11,450 --> 00:13:14,680
Now this person can join correctly which is good.

168
00:13:14,810 --> 00:13:21,970
Then I'm gonna open up local host three thousand in another tab and I'll have Andrew join the J.S. room

169
00:13:22,000 --> 00:13:23,930
and this time it should fail.

170
00:13:24,040 --> 00:13:26,150
Right here we can see our message.

171
00:13:26,170 --> 00:13:28,120
User name is in use.

172
00:13:28,120 --> 00:13:34,370
We click the OK button to accept and then it redirects us back to this page to try again.

173
00:13:34,390 --> 00:13:37,520
I could go ahead and use something like a different name.

174
00:13:37,600 --> 00:13:40,410
Let's say I use a nickname followed by J.S..

175
00:13:40,450 --> 00:13:42,280
And this time I should join.

176
00:13:42,280 --> 00:13:45,780
And now I see that joined message and they could communicate.

177
00:13:45,880 --> 00:13:51,060
So with this in place we have the very basics of user tracking all set up.

178
00:13:51,160 --> 00:13:56,580
We're able to track when a user joins inside of socket dot on join.

179
00:13:56,710 --> 00:14:01,360
And when they leave inside of socket dot on disconnect.

180
00:14:01,360 --> 00:14:06,750
Now we still want to use this information for our other events as well and we'll focus on doing that

181
00:14:06,760 --> 00:14:08,260
in the following videos.

182
00:14:08,260 --> 00:14:10,440
So let's go ahead and jump right in.
