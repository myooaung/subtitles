WEBVTT
1
00:00:00.210 --> 00:00:05.640
In this video you're going to learn how you can insert documents into Mongo D.B. now at the end of the

2
00:00:05.640 --> 00:00:12.000
last video we touched on that briefly by using insert one to insert our very first document.

3
00:00:12.000 --> 00:00:17.400
But in this video we'll dive into insert one in a bit more detail and you'll also learn how you can

4
00:00:17.400 --> 00:00:20.880
insert multiple documents at the exact same time.

5
00:00:20.880 --> 00:00:26.880
This video also includes a challenge where you're gonna have to insert some documents into a brand new

6
00:00:26.880 --> 00:00:28.010
collection.

7
00:00:28.050 --> 00:00:34.230
Let's go ahead and kick things off by continuing our discussion of insert one as you likely guessed

8
00:00:34.290 --> 00:00:36.500
insert one is not synchronous.

9
00:00:36.510 --> 00:00:38.200
It is indeed asynchronous.

10
00:00:38.280 --> 00:00:43.800
Now currently we don't have a callback registered because it's not completely necessary for the data

11
00:00:43.830 --> 00:00:50.310
to actually get inserted but it is necessary if we want to handle errors or confirm that our operation

12
00:00:50.310 --> 00:00:51.770
worked as expected.

13
00:00:51.780 --> 00:00:57.300
So this is something we definitely want to do in a production application right here we're going to

14
00:00:57.300 --> 00:01:04.050
pass a second argument to insert one a callback function which is going to get called when the operation

15
00:01:04.080 --> 00:01:05.290
is complete.

16
00:01:05.310 --> 00:01:11.000
Now the callback function for insertions gets called with one of two potential arguments.

17
00:01:11.070 --> 00:01:15.600
We either have the error if things went poorly or we have the result.

18
00:01:15.600 --> 00:01:22.780
If things went well now the result contains some interesting information including the operation result.

19
00:01:22.800 --> 00:01:29.540
So that's going to contain our data as well as the unique I.D. that was assigned to the document.

20
00:01:29.580 --> 00:01:34.800
So let's go ahead and actually fill out the callback function down below to do something meaningful.

21
00:01:34.800 --> 00:01:39.690
I'm going to set up an if condition and to check if there is an error if there is one.

22
00:01:39.690 --> 00:01:40.650
I will return.

23
00:01:40.650 --> 00:01:45.990
Well printing a message like we've done up above for connection errors and right here I'll just say

24
00:01:45.990 --> 00:01:49.240
something like unable to insert user.

25
00:01:49.290 --> 00:01:52.320
Let's go ahead and spell insert correctly though.

26
00:01:52.320 --> 00:01:58.150
Now if things did go well the code down below will run and we're going to dig into result.

27
00:01:58.150 --> 00:02:04.590
There's basically only one property on result we're ever going to end up using and that is UPS O P S

28
00:02:04.860 --> 00:02:09.630
this contains all of the documents that were inserted in this case just one.

29
00:02:09.630 --> 00:02:17.810
So let's go ahead and dump that to the console console log result dot ups.

30
00:02:17.820 --> 00:02:23.760
So right here we are printing ops which is an array of documents in this case an array with just one

31
00:02:23.760 --> 00:02:25.760
document inside.

32
00:02:25.770 --> 00:02:31.950
Now what I'm going to do is save Mongo D.B. Dutton J.S. with our callback function in place and from

33
00:02:31.950 --> 00:02:38.040
the terminal will restart things I'll use control C to shut it down and the up arrow key and enter to

34
00:02:38.040 --> 00:02:39.000
restart it.

35
00:02:39.090 --> 00:02:46.020
And right here we can see that basically instantly we're getting our output from the insert one operation.

36
00:02:46.020 --> 00:02:53.040
I have an array with a single object inside since we inserted just a single document and we have three

37
00:02:53.040 --> 00:03:02.490
properties I have name Andrew age 27 and our underscore I.D. property with a unique identifier for that

38
00:03:02.490 --> 00:03:03.750
document.

39
00:03:03.750 --> 00:03:10.440
Now if you're wondering how I knew that result has ups this is where the API documentation comes into

40
00:03:10.440 --> 00:03:18.330
play the documentation for this particular module the Mongo D.B. NPM module is quite extensive and it's

41
00:03:18.330 --> 00:03:19.680
super useful.

42
00:03:19.920 --> 00:03:25.170
So over in the browser we had pulled that up a bit earlier in the other tab.

43
00:03:25.170 --> 00:03:30.720
It was this documentation on the left hand side we have all sorts of interesting things.

44
00:03:30.720 --> 00:03:37.260
So for example if I scroll down to M we have Mongo client if I click on that we can learn how to use

45
00:03:37.260 --> 00:03:37.650
it.

46
00:03:37.710 --> 00:03:42.530
And one of the methods on mongo client is Connect which we already used.

47
00:03:42.600 --> 00:03:46.610
If I click on that it talks about exactly how we can use connect.

48
00:03:46.890 --> 00:03:52.440
So we have the U.R.L. as that first argument then we have options as the second argument.

49
00:03:52.440 --> 00:03:56.720
You can see all of the options available right here and what exactly they do.

50
00:03:57.120 --> 00:04:03.810
And then down below near the bottom of that list of options we can see we also pass in a callback function.

51
00:04:04.020 --> 00:04:08.950
Now for our purposes using insert one we don't want to look at Mongo client.

52
00:04:09.090 --> 00:04:12.900
We want to scroll down to collection when we go to collection.

53
00:04:12.960 --> 00:04:18.600
We're gonna be brought over to the documentation for that and under methods we have all of the collection

54
00:04:18.600 --> 00:04:25.380
methods we can access including the one that we've used insert one I'm going to click on that so we

55
00:04:25.380 --> 00:04:27.760
can view the documentation for it.

56
00:04:27.870 --> 00:04:34.110
We can see that the first argument is the document to insert we've already provided that the second

57
00:04:34.110 --> 00:04:38.160
argument is an optional options object which we have left off.

58
00:04:38.340 --> 00:04:40.970
And the third argument all the way down at the bottom.

59
00:04:41.070 --> 00:04:42.970
This is our callback.

60
00:04:43.050 --> 00:04:48.750
Now if you want to learn more about how callback is going to function when using insert one there is

61
00:04:48.750 --> 00:04:54.180
a link right here you can follow to see what arguments your callback is going to get called with.

62
00:04:54.630 --> 00:04:55.370
I click it.

63
00:04:55.500 --> 00:04:58.690
It brings me over to the documentation for that.

64
00:04:58.800 --> 00:05:00.920
I get an error I get a result.

65
00:05:01.030 --> 00:05:05.370
And those are the two arguments we've set up for our callback in insert one.

66
00:05:05.410 --> 00:05:07.450
So that is where these two come from.

67
00:05:07.450 --> 00:05:09.790
They come from the documentation.

68
00:05:09.820 --> 00:05:14.440
Now you're wondering what exactly is on the result or error for that matter.

69
00:05:14.440 --> 00:05:17.010
Well you can click those to see what you get.

70
00:05:17.110 --> 00:05:22.820
Right here I'm going to click next to result to bring me over to the documentation for that.

71
00:05:22.990 --> 00:05:28.870
And here I can view the five properties I have access to when working with result including the one

72
00:05:28.870 --> 00:05:29.570
we used.

73
00:05:29.620 --> 00:05:36.320
UPS I can see ops is an array and that array contains all of the documents that have been inserted.

74
00:05:36.490 --> 00:05:42.910
And it lists out some various methods including insert one which is the one that we've just used.

75
00:05:42.910 --> 00:05:49.100
We also have other properties available but none of them contain any particularly useful information.

76
00:05:49.120 --> 00:05:55.030
The only ones you might end up using are inserted count which contains the number of documents inserted

77
00:05:55.120 --> 00:05:59.930
and inserted I.D. which contains the idea of the document you inserted.

78
00:05:59.950 --> 00:06:05.680
But as we've already seen that I.D. is also available on ups since we're seeing it over here when we

79
00:06:05.680 --> 00:06:07.700
dump ops to the console.

80
00:06:07.720 --> 00:06:14.740
So this is insert one in a nutshell it allows you to insert a single document into a collection.

81
00:06:14.740 --> 00:06:19.900
Now we're gonna go ahead and comment this code out and we're going to look at how we can bulk insert

82
00:06:19.960 --> 00:06:23.170
documents instead of inserting just one user.

83
00:06:23.260 --> 00:06:28.540
We're going to insert two at the exact same time for this we will once again need to get a reference

84
00:06:28.570 --> 00:06:33.880
to the collection that's D.B. dot collection passing in the collection name.

85
00:06:33.940 --> 00:06:38.610
I still want to insert into that user's collection so let's type it out exactly.

86
00:06:38.920 --> 00:06:46.690
Then instead of using insert one we're gonna go ahead and use insert many now insert many is also listed

87
00:06:46.690 --> 00:06:48.620
over in the documentation.

88
00:06:48.640 --> 00:06:55.060
So once again we want to look at the documentation for collection go to methods and then go down to

89
00:06:55.060 --> 00:07:02.020
I for insert many and it's sitting right here just before insert one we can click that to learn how

90
00:07:02.020 --> 00:07:03.750
it's used right here.

91
00:07:03.790 --> 00:07:08.350
It expects the first argument to be an array of documents to insert.

92
00:07:08.350 --> 00:07:13.750
Then we have our options which we're not going to specify and down below we have our callback.

93
00:07:13.780 --> 00:07:20.870
So using the documentation we can get a feel for exactly how this works over inside of Mongo D.B. J.

94
00:07:20.880 --> 00:07:21.250
S..

95
00:07:21.280 --> 00:07:22.860
Let's go ahead and use it.

96
00:07:22.900 --> 00:07:29.320
I'm going to call insert many passing in an array for that first argument and we're gonna provide to

97
00:07:29.350 --> 00:07:31.390
new users right here.

98
00:07:31.450 --> 00:07:39.880
I'll go ahead and add a another user with the name Jen and I'll set her age equal to 28 and then we

99
00:07:39.880 --> 00:07:47.560
can add a second object to this array to insert a second document at the same time right here a second

100
00:07:47.590 --> 00:07:49.510
object name.

101
00:07:49.510 --> 00:07:56.060
I'll go ahead and use Gunther and for age I'll go ahead and use twenty seven.

102
00:07:56.060 --> 00:08:02.090
So the following insertion will insert two documents as opposed to just inserting the one.

103
00:08:02.090 --> 00:08:05.470
Now let's go ahead and set up that callback function once again.

104
00:08:05.480 --> 00:08:11.480
So right here after the closing for the array the second argument is going to be that callback function

105
00:08:12.910 --> 00:08:17.350
and once again we can refer to the documentation to figure out how things work.

106
00:08:17.470 --> 00:08:22.360
And the reason I'm bringing you over to the docs so many times is that it's really important to get

107
00:08:22.360 --> 00:08:28.210
comfortable using them so you can explore new features and customize everything to fit your needs.

108
00:08:28.210 --> 00:08:34.780
So right here insert many we go down to callback we click the option next to it to view what we get

109
00:08:35.020 --> 00:08:40.990
we get an error and a result like we did before and we can also click this to view what we have on their

110
00:08:40.990 --> 00:08:41.710
result.

111
00:08:41.800 --> 00:08:44.020
And right here we have the same stuff.

112
00:08:44.020 --> 00:08:50.620
The only difference is that we have inserted ideas plural since we are writing multiple documents.

113
00:08:50.650 --> 00:08:53.130
Let's go ahead and actually fill out the callback.

114
00:08:53.200 --> 00:08:56.940
We're gonna get a potential error and a potential result.

115
00:08:57.120 --> 00:09:04.090
And like we did above we will handle that error and right here we're gonna go ahead and print that message.

116
00:09:04.090 --> 00:09:07.300
I'll return and use console log on.

117
00:09:07.300 --> 00:09:15.550
Able to insert documents as my message and if things went well I will just print ops which is an array

118
00:09:15.580 --> 00:09:18.600
of the documents that were inserted right here.

119
00:09:18.850 --> 00:09:23.380
That would be console log result dot ops.

120
00:09:23.380 --> 00:09:24.390
Perfect.

121
00:09:24.400 --> 00:09:29.820
Let's go ahead and actually test things out so I'm going to save Mongo D.B. and from the terminal I'm

122
00:09:29.820 --> 00:09:33.910
going to shut things down now before we actually run the program.

123
00:09:33.940 --> 00:09:41.650
I'm gonna pull up rowboat 3 T as well that's sitting over here and the last time that we ran it we had

124
00:09:41.650 --> 00:09:44.530
just a single document inside of there.

125
00:09:44.530 --> 00:09:51.430
I can go ahead and refresh the page by either right clicking users and clicking view documents or using

126
00:09:51.430 --> 00:09:55.750
command R or control R depending on your operating system.

127
00:09:55.780 --> 00:10:02.020
And here I can see that I do have two documents the two users that I inserted with the exact same information

128
00:10:02.230 --> 00:10:06.450
since I had ran these same insert one command twice.

129
00:10:06.730 --> 00:10:11.830
Now from here we're going to actually run the new file with insert many getting called for the first

130
00:10:11.830 --> 00:10:20.350
time down below up and enter to rerun the last command and I can see that Ops is an array with two documents.

131
00:10:20.350 --> 00:10:28.330
I have Jen who's 28 with her unique I.D. and I have Gunther who's 27 with his unique I.D. over inside

132
00:10:28.360 --> 00:10:29.880
of robo 3 T.

133
00:10:30.010 --> 00:10:33.580
I can refresh things to view those records as well.

134
00:10:33.580 --> 00:10:37.460
And now we have four documents in that user's collection.

135
00:10:37.510 --> 00:10:44.680
Now that you know how to use insert and insert many it's time for a challenge over inside of Mongo D.B.

136
00:10:44.680 --> 00:10:49.530
adopting J S I'm gonna start by commenting out the call to insert many.

137
00:10:49.540 --> 00:10:56.320
So it doesn't run when we rerun this file and down below I'm gonna paste the challenge comments describing

138
00:10:56.350 --> 00:10:57.970
what I'd like it to do.

139
00:10:57.970 --> 00:11:02.020
I'll go ahead and indent these properly making things easier to read.

140
00:11:02.020 --> 00:11:07.390
So your goal is to add some code right here inside of the Connect callback.

141
00:11:07.390 --> 00:11:13.540
So right where we were adding our other calls to insert one and insert many and your job is to insert

142
00:11:13.540 --> 00:11:17.260
three tasks into a new tasks collection.

143
00:11:17.530 --> 00:11:20.950
So we have the user's collection with some data inside of there.

144
00:11:20.980 --> 00:11:27.010
You'll be creating that tasks collection and inserting some data you're going to use insert many to

145
00:11:27.010 --> 00:11:32.220
insert that should say three teenage R E documents.

146
00:11:32.380 --> 00:11:39.190
And for each document you want to have a description which will be a string and they completed status.

147
00:11:39.190 --> 00:11:41.470
True if it's completed or false.

148
00:11:41.470 --> 00:11:43.930
Otherwise for your three documents.

149
00:11:43.960 --> 00:11:47.110
Make sure to have a few different completed values.

150
00:11:47.110 --> 00:11:54.340
As an example make two completed and one incomplete or make two incomplete and one complete switch things

151
00:11:54.340 --> 00:11:55.540
up a bit though.

152
00:11:55.690 --> 00:11:56.230
Next up.

153
00:11:56.230 --> 00:11:57.130
Step two.

154
00:11:57.190 --> 00:11:59.710
You want to set up the callback for your insert.

155
00:11:59.710 --> 00:12:06.040
Many call to handle any potential errors or to print the ops if things went well similar to what we've

156
00:12:06.040 --> 00:12:07.180
done before.

157
00:12:07.360 --> 00:12:13.230
Then you're actually going to run the script and finally you're going to view the data in robo 3 T.

158
00:12:13.300 --> 00:12:19.510
You can refresh the database to view the new collection and you can view all of the data for that collection

159
00:12:19.660 --> 00:12:22.960
to make sure you're seeing your three tasks show up.

160
00:12:23.080 --> 00:12:29.200
Take as much time as you need to knock this out test your work and when you're done come back and click

161
00:12:29.200 --> 00:12:29.560
play

162
00:12:33.240 --> 00:12:34.020
how'd that go.

163
00:12:34.020 --> 00:12:35.880
Let's go ahead and kick things off.

164
00:12:35.880 --> 00:12:38.980
The first thing we need to do is use insert many.

165
00:12:39.150 --> 00:12:44.700
We know that we have to use D.B. dot collection to figure out which collection we're trying to insert

166
00:12:44.760 --> 00:12:46.350
the documents into.

167
00:12:46.440 --> 00:12:49.930
In this case I've decided to call it tasks.

168
00:12:49.980 --> 00:12:56.310
Next up on that collection will be using insert many to insert many documents in this case we're going

169
00:12:56.310 --> 00:12:57.730
to insert three.

170
00:12:57.750 --> 00:13:01.300
The first argument is the array of documents right here.

171
00:13:01.320 --> 00:13:03.990
Let's go ahead and set up three objects.

172
00:13:03.990 --> 00:13:09.210
I'm gonna have my first object with a description which will be a string.

173
00:13:09.480 --> 00:13:16.550
And I'm also going to have a completed value and that's going to be a Boolean true if the task is complete

174
00:13:16.640 --> 00:13:17.520
or false.

175
00:13:17.540 --> 00:13:22.910
Otherwise right here let's go ahead and pick a task description for this one.

176
00:13:23.060 --> 00:13:29.360
I'll use something like clean of the house which we just did so I can leave that as true.

177
00:13:29.480 --> 00:13:34.220
Then I'll go ahead and add a couple of other documents so I have description.

178
00:13:34.400 --> 00:13:38.210
I'll go ahead and say renew inspection.

179
00:13:38.240 --> 00:13:41.820
I have not done that for my motorcycle so that's going to be false.

180
00:13:43.860 --> 00:13:45.360
And one more document.

181
00:13:45.390 --> 00:13:52.110
The third document description I'll go ahead and say something like pot plants.

182
00:13:52.110 --> 00:13:54.130
I got some new plants for the office.

183
00:13:54.150 --> 00:13:55.710
Currently they're not in their pots.

184
00:13:55.710 --> 00:14:01.370
I want to go ahead and fix that but I haven't done it so far so completed can be false.

185
00:14:01.380 --> 00:14:07.420
So here we have some dummy data you could have picked any 3 description and completed values you liked.

186
00:14:07.470 --> 00:14:13.700
You did not need to have the same text as long as you had three objects with both description and complete

187
00:14:13.700 --> 00:14:14.840
it from here.

188
00:14:14.850 --> 00:14:21.380
We want to move on to Step Two and set up the callback to handle errors or to print the operation output.

189
00:14:21.600 --> 00:14:27.750
So I'll provide that callback as the second argument to insert many we know we get error and we know

190
00:14:27.780 --> 00:14:29.040
we get results.

191
00:14:29.130 --> 00:14:31.620
We're gonna check if there is an error first.

192
00:14:31.800 --> 00:14:39.470
If error what do we do we'll go ahead and set up a code block to run and we will use return to stop

193
00:14:39.470 --> 00:14:47.420
the function execution and I'll use console dialog to print a message unable to insert tasks or any

194
00:14:47.420 --> 00:14:50.320
other message would have worked.

195
00:14:50.530 --> 00:14:57.010
Next up if things did go well I just wanted you to print the operation output which as we've done before

196
00:14:57.010 --> 00:14:59.430
is console dialog printing.

197
00:14:59.560 --> 00:15:01.530
Result dot ups.

198
00:15:01.540 --> 00:15:02.620
Excellent.

199
00:15:02.620 --> 00:15:07.300
So that is the steps 1 and 2 step 3 is to run the script.

200
00:15:07.310 --> 00:15:09.310
So I'm gonna save the script.

201
00:15:09.310 --> 00:15:15.580
I'm gonna shut down the existing process with control C use up and enter to restart it.

202
00:15:15.580 --> 00:15:21.790
And right here I can see that I have three items showing up in that OPs array which is coming from the

203
00:15:21.790 --> 00:15:23.770
console dialog online.

204
00:15:23.790 --> 00:15:30.490
Sixty eight I have clean the house renew inspection and pot plants showing up correctly all with unique

205
00:15:30.580 --> 00:15:31.890
I.D..

206
00:15:31.900 --> 00:15:35.550
Now we can move on to the final step which is step 4.

207
00:15:35.620 --> 00:15:39.840
We want to refresh the database and view our data before I do that.

208
00:15:39.940 --> 00:15:45.520
I'll remove the challenge comments since we're all done with them and I'll shift over to robo 3.

209
00:15:45.910 --> 00:15:52.120
Now here we don't have the collection showing up but if I right click and click refresh we can open

210
00:15:52.120 --> 00:15:52.290
up.

211
00:15:52.290 --> 00:15:59.110
Task Manager and we can now see we do have that second collection tasks and I can view the data inside

212
00:15:59.110 --> 00:16:00.030
of there.

213
00:16:00.040 --> 00:16:02.590
All right click it click view documents.

214
00:16:02.590 --> 00:16:05.810
And right here we have our three documents showing up.

215
00:16:05.950 --> 00:16:12.100
If I want to see them at a quick glance I can switch over to that table view and I can view all of them.

216
00:16:12.120 --> 00:16:14.020
I have ideas for all of them.

217
00:16:14.050 --> 00:16:20.440
I have the correct descriptions and I have the completed values everything showing up correctly.

218
00:16:20.440 --> 00:16:21.540
So there we go.

219
00:16:21.550 --> 00:16:25.630
We now know how to insert documents into the database from here.

220
00:16:25.630 --> 00:16:29.170
We're going to talk about one of the other CRUD operations.

221
00:16:29.170 --> 00:16:33.450
So we've knocked out create which is C. We're gonna talk about Reed.

222
00:16:33.490 --> 00:16:37.480
How do we get documents out of the database so we can use them.

223
00:16:37.480 --> 00:16:39.990
We're gonna talk about that in the next video.

224
00:16:40.030 --> 00:16:41.860
So let's go ahead and jump right in.
