1
00:00:00,330 --> 00:00:06,750
You know how they join page in place and when you submit that form with a name and a room it brings

2
00:00:06,750 --> 00:00:10,020
you over to the chat page with that data.

3
00:00:10,020 --> 00:00:15,910
Now currently that data is not being used at all in this lesson we're going to fix that.

4
00:00:15,960 --> 00:00:22,320
You'll learn how to get access to this data from our client side JavaScript and we'll also talk about

5
00:00:22,320 --> 00:00:24,340
rooms in socket don't I.

6
00:00:24,460 --> 00:00:30,980
Oh that's going to allow us to omit events to a specific set of connections.

7
00:00:31,050 --> 00:00:33,960
So just people in the South Philly room.

8
00:00:34,080 --> 00:00:39,400
So we'll be able to have separate chat rooms for any topic you'd want to talk about.

9
00:00:39,420 --> 00:00:45,830
No the query string component in the you are around can be accessed via javascript using the following.

10
00:00:45,840 --> 00:00:50,730
I'm just going to crack open the dev tools real quick and we'll explore that from the console before

11
00:00:50,730 --> 00:00:52,330
integrating it into our code.

12
00:00:52,860 --> 00:00:55,970
So right here we have the console for this page.

13
00:00:55,970 --> 00:01:02,200
What we have access to is location which is a global made available to you.

14
00:01:02,250 --> 00:01:03,480
Dot right here.

15
00:01:03,480 --> 00:01:04,530
Search.

16
00:01:04,620 --> 00:01:11,890
This contains the query string for the U.R.L. and right here we're seeing exactly what we have up above.

17
00:01:11,910 --> 00:01:18,960
So what we're gonna do from our client side JavaScript is pass this string to get access to the individual

18
00:01:18,960 --> 00:01:21,990
pieces of data for user name and room.

19
00:01:22,110 --> 00:01:28,220
And we're going to send those off to the server now to get this done and we'll be using that third library.

20
00:01:28,230 --> 00:01:30,920
We included in our HDL file.

21
00:01:31,320 --> 00:01:38,250
So over in chat dot HDL near the bottom we've already used mustache for rendering templates and to moment

22
00:01:38,250 --> 00:01:39,800
for formatting time.

23
00:01:40,140 --> 00:01:46,730
It's now time to use Q S which is short for query string to pass our query strings.

24
00:01:46,950 --> 00:01:53,850
So this library makes it easy to pass this into an object with a user name and room property.

25
00:01:53,880 --> 00:01:56,930
Let's go ahead and get that done inside of chat Dot.

26
00:01:57,000 --> 00:01:57,730
J.

27
00:01:58,020 --> 00:02:03,820
And up top we're gonna go ahead and get that done right here where we're creating our templates.

28
00:02:03,840 --> 00:02:11,550
So just below that I'll create a new section for options and what we're going to do is use the following

29
00:02:11,800 --> 00:02:15,690
It is capital Q S dot pass.

30
00:02:15,690 --> 00:02:23,080
Now this takes the query string and we just saw we have access to that on location dot search.

31
00:02:23,370 --> 00:02:26,980
Now by default it's not going to remove that question mark.

32
00:02:27,000 --> 00:02:30,810
So it's actually going to create an object with two properties.

33
00:02:30,810 --> 00:02:32,150
One would be room.

34
00:02:32,430 --> 00:02:35,440
And the other would be a question mark user name.

35
00:02:35,490 --> 00:02:39,890
So there is a option we can use to make sure the question mark goes away.

36
00:02:39,990 --> 00:02:45,810
Right here we provide that option on the options object which is the second and final argument we'll

37
00:02:45,810 --> 00:02:53,880
be passing to pass that is ignore query prefix by default that is false.

38
00:02:53,880 --> 00:02:56,030
We're just going to set it to true.

39
00:02:56,100 --> 00:03:00,280
So all that's going to do is make sure the question mark goes away now.

40
00:03:00,300 --> 00:03:07,440
But we get back as mentioned is an object that object has all of the keys as properties and the value

41
00:03:07,470 --> 00:03:09,970
for those properties is the value.

42
00:03:09,990 --> 00:03:12,090
So we have the user name property the string.

43
00:03:12,090 --> 00:03:18,480
Andrew is the value and the room property the string South Philly being the value for that.

44
00:03:18,480 --> 00:03:24,510
So we could go ahead and do one of two things I could create a variable to store that object or I could

45
00:03:24,510 --> 00:03:30,040
go ahead and destructor those individual properties off of the object and that's the approach I'm gonna

46
00:03:30,060 --> 00:03:30,510
take.

47
00:03:31,110 --> 00:03:36,870
So right here I am de structuring the object that comes back from Q S dot pass.

48
00:03:37,290 --> 00:03:44,400
I'm gonna grab the user name and the room and we are going to use those sending them off to the server.

49
00:03:44,430 --> 00:03:50,850
Now we can go ahead and send this data off to the server by adding an image to call down below at the

50
00:03:50,850 --> 00:03:52,140
bottom of the file.

51
00:03:52,140 --> 00:03:58,830
The last thing we're going to do is use socket emit to emit a brand new event that the server is going

52
00:03:58,830 --> 00:04:06,150
to listen for and this is done to be called Join or something similar join is going to accept the user

53
00:04:06,150 --> 00:04:12,660
name you want to use and the room you're trying to join then on the back end it will attempt to get

54
00:04:12,660 --> 00:04:13,580
that done.

55
00:04:13,680 --> 00:04:16,010
Now later on we'll add some validation.

56
00:04:16,020 --> 00:04:21,000
So you can't use a name if someone in that chat room is already using that name.

57
00:04:21,090 --> 00:04:24,480
But for now let's just get the basics in place.

58
00:04:24,540 --> 00:04:30,480
So the second argument is going to be an object and we are going to add the user name and the room on

59
00:04:30,540 --> 00:04:31,350
to it.

60
00:04:31,350 --> 00:04:33,920
So we're sending that data off to the server.

61
00:04:34,050 --> 00:04:41,370
We can save this file and it's now these servers job to set up a listener for join and to do what it

62
00:04:41,370 --> 00:04:45,440
needs to do when that event actually occurs.

63
00:04:45,510 --> 00:04:50,380
So in index dot and J.S. we're going to set up a listener for join.

64
00:04:50,430 --> 00:04:58,230
So we have listeners for disconnect send location and send a message just above the 1 4 Send message.

65
00:04:58,230 --> 00:05:05,370
We'll be using socket dot on for a fourth time in this file and we're setting up a listener for join.

66
00:05:05,590 --> 00:05:10,400
Now we're gonna get access to that data right here in the callback function.

67
00:05:10,510 --> 00:05:14,910
And we're going to use it to set up those separate chat rooms right here.

68
00:05:14,920 --> 00:05:18,160
The object we get back is going to be d structured.

69
00:05:18,190 --> 00:05:23,110
So we have access to user name and room as individual variables.

70
00:05:23,110 --> 00:05:30,400
And then from here what we're going to do is use the socket dot Io features given to us to actually

71
00:05:30,400 --> 00:05:33,250
join these individual rooms.

72
00:05:33,250 --> 00:05:41,530
So to do that we use a method we can only use on the server that is socket dot joint socket dot join

73
00:05:41,560 --> 00:05:48,580
allows us to join a given chat room and we pass to the name of the room we're trying to join.

74
00:05:48,580 --> 00:05:54,930
So right here what we're going to do is pass in the room string as the value to join.

75
00:05:55,000 --> 00:06:01,720
Now what this is going to give us access to is a whole nother way to omit events where we're specifically

76
00:06:01,720 --> 00:06:04,280
emitting events to just that room.

77
00:06:04,420 --> 00:06:09,850
So only others in that room would actually see that whether they're messages or anything else we might

78
00:06:09,850 --> 00:06:12,680
be sending from server to client.

79
00:06:12,730 --> 00:06:17,370
Now so far we've sent events from a server to client using three methods.

80
00:06:17,380 --> 00:06:22,170
We had socket dammit that sends an event to a specific client.

81
00:06:22,180 --> 00:06:26,740
We then had I O dot omit which sends an event to every connected client.

82
00:06:26,740 --> 00:06:34,330
And finally we had socket dot broadcast dot emit which sends an event to every connected client except

83
00:06:34,480 --> 00:06:35,540
for this one.

84
00:06:35,620 --> 00:06:42,120
Now with the introduction of rooms we're going to have two new setups we'll be using for emitting messages.

85
00:06:42,160 --> 00:06:47,720
One is a variation of this and the other is a variation of this.

86
00:06:47,740 --> 00:06:53,190
So the first is the following I O dot to dot emit.

87
00:06:53,290 --> 00:06:57,200
Now two is indeed a function and we'll learn how to call it shortly.

88
00:06:57,280 --> 00:07:03,520
But essentially what this does is it emits an event to everybody in a specific room.

89
00:07:03,820 --> 00:07:09,310
So that's going to allow us to send a message to everyone in a room without sending it to people in

90
00:07:09,400 --> 00:07:10,980
other rooms.

91
00:07:11,020 --> 00:07:20,400
The other option we have is a variation on this that is socket dot broadcast dot to dot emit.

92
00:07:20,590 --> 00:07:22,290
So similar to above.

93
00:07:22,420 --> 00:07:29,260
This is sending an event to everyone except for the specific client but it's limiting it to a specific

94
00:07:29,350 --> 00:07:30,150
chat room.

95
00:07:30,460 --> 00:07:36,640
So these two approaches are how we're going to communicate with members of a specific room and we're

96
00:07:36,640 --> 00:07:39,600
going to start to incorporate those right now.

97
00:07:39,610 --> 00:07:45,280
So the first thing we're gonna do is take these two statements up above we send our welcome message

98
00:07:45,340 --> 00:07:47,970
and an alert that someone new has joined.

99
00:07:48,010 --> 00:07:51,810
These are not things we're going to send on connection any more.

100
00:07:51,940 --> 00:07:58,270
Now we're only going to send them when join fires because that's where we get access to the user name

101
00:07:58,450 --> 00:07:59,920
and the room name.

102
00:08:00,250 --> 00:08:06,280
So right here let's cut those two statements out of their current location remove those extra empty

103
00:08:06,280 --> 00:08:11,280
lines and we'll be pasting them down below in the callback function.

104
00:08:11,290 --> 00:08:14,780
Now this line right here is still perfectly fine.

105
00:08:14,830 --> 00:08:19,250
It's emitting the event to a specific socket and that's great.

106
00:08:19,270 --> 00:08:23,540
Down below what we have is our new user message.

107
00:08:23,620 --> 00:08:30,130
This is currently emitting the event to everyone but that specific client regardless of what room they're

108
00:08:30,130 --> 00:08:30,580
in.

109
00:08:30,640 --> 00:08:31,860
And that's a problem.

110
00:08:31,960 --> 00:08:36,680
We want to go ahead and limit it to just the room that was just joined.

111
00:08:36,760 --> 00:08:41,200
So right here we'll be using socket dot broadcast dot too.

112
00:08:41,230 --> 00:08:45,100
So right after the T in broadcast that is dot two.

113
00:08:45,160 --> 00:08:51,790
That's a function so we set up our parentheses and we pass to it this string name of the room that we're

114
00:08:51,790 --> 00:08:57,270
trying to emit that event to in this case it is stored in that variable.

115
00:08:57,340 --> 00:09:02,860
So we join the room right here then we emit the message to that same room.

116
00:09:02,860 --> 00:09:06,030
Now the message is a new user has joined.

117
00:09:06,130 --> 00:09:12,030
We could include the user name as well in that message since we now have access to it.

118
00:09:12,060 --> 00:09:17,180
Let's go ahead and remove the entire string and replace it with a template string.

119
00:09:17,260 --> 00:09:20,430
And right here what we're going to do is use the following.

120
00:09:20,430 --> 00:09:27,070
I'll start off with their user name followed by a space followed by the rest of the message.

121
00:09:27,070 --> 00:09:29,990
So something like Andrew has joined.

122
00:09:30,130 --> 00:09:35,470
And that's going to show up whenever a new user joins the specific room.

123
00:09:35,470 --> 00:09:37,350
Now that we have all of this in place.

124
00:09:37,450 --> 00:09:42,610
What I want to do is actually test out this behavior in the browser so you can see how it's going to

125
00:09:42,610 --> 00:09:49,480
play a pretty important role when it comes to us creating separate chat rooms for the individual users.

126
00:09:49,600 --> 00:09:50,180
Right here.

127
00:09:50,200 --> 00:09:57,040
Let's go ahead and narrow that browser window so we can open up our application twice side by side and

128
00:09:57,040 --> 00:10:01,730
over here we're just going to crack open local host three thousand a another time.

129
00:10:01,890 --> 00:10:07,540
This time we're gonna have a another user like Jess join that exact same room.

130
00:10:07,740 --> 00:10:15,120
So right here I'm gonna have her join South Philly typed out exactly like I had done for Andrew earlier

131
00:10:15,480 --> 00:10:22,530
and when she joins Andrew gets that message saying Jess has joined because she's joined the room that

132
00:10:22,530 --> 00:10:24,810
he is currently in.

133
00:10:24,870 --> 00:10:31,410
Now if she were to leave the room or send a message currently that functionality isn't using the two

134
00:10:31,470 --> 00:10:36,870
method so it would still get sent to everyone but at least this portion is working.

135
00:10:37,260 --> 00:10:44,520
So let's go ahead and prove that Andrew would not see the join message if Jess joined a different room.

136
00:10:44,970 --> 00:10:51,070
So right here what I'm going to do is open a new browser tab and close the old one right here I'm going

137
00:10:51,070 --> 00:10:54,130
to open up local host three thousand again.

138
00:10:54,330 --> 00:10:56,360
The name is still going to be Jess.

139
00:10:56,370 --> 00:10:58,080
The room will change though.

140
00:10:58,080 --> 00:11:01,980
I'll use a different neighborhood in Philadelphia like center city.

141
00:11:01,980 --> 00:11:09,780
And this time when Jess joins that chat room we don't see any message over here saying Jess has joined

142
00:11:10,050 --> 00:11:11,890
and that is correct.

143
00:11:11,910 --> 00:11:15,840
Now unfortunately that's the only place we're using the two method.

144
00:11:16,080 --> 00:11:20,940
So if I send messages from one of those rooms both rooms still get it.

145
00:11:20,940 --> 00:11:28,310
So for example if I send test from Center City the South Philly room is still getting that text message.

146
00:11:28,320 --> 00:11:33,390
This is something that we're definitely going to want to clean up but at least two is working in the

147
00:11:33,390 --> 00:11:36,980
one place we've wired up that welcome message.

148
00:11:36,990 --> 00:11:43,020
Now if we head back to visual studio code you'll notice that down below this is where we have our other

149
00:11:43,020 --> 00:11:45,460
amid calls that need to change.

150
00:11:45,480 --> 00:11:50,640
Here we're sending a message to every connected client instead of just those connected clients in the

151
00:11:50,640 --> 00:11:51,480
room.

152
00:11:51,480 --> 00:11:57,720
We do the same thing down below for location messages and for disconnection messages.

153
00:11:57,720 --> 00:12:00,210
So these are all things that need to change.

154
00:12:00,210 --> 00:12:06,710
The problem is that we don't have access to the necessary data inside of these functions.

155
00:12:06,720 --> 00:12:08,850
For example we need room.

156
00:12:08,850 --> 00:12:11,220
Room is scoped to this function.

157
00:12:11,220 --> 00:12:13,770
It's not accessible outside of it.

158
00:12:13,770 --> 00:12:19,980
So what we're gonna need to do in the long run is keep track of which users are in which rooms when

159
00:12:19,980 --> 00:12:21,720
we're tracking that data.

160
00:12:21,720 --> 00:12:27,870
It's going to allow us to use it anywhere in our application such as with new messages are sent.

161
00:12:27,950 --> 00:12:33,900
Now that'll be the topic of the next video for now just to show you what we're working towards.

162
00:12:33,960 --> 00:12:39,170
We're going to take these send message callback listener and tweak it down below.

163
00:12:39,270 --> 00:12:39,960
We have I.

164
00:12:39,990 --> 00:12:48,200
Oh dammit what we're gonna do is use I O dot to calling that then dot emit.

165
00:12:48,240 --> 00:12:52,770
Now once again we don't have access to the room variable right here.

166
00:12:52,770 --> 00:12:59,020
We'll fix that for now though let's just provide a string and type out one of the two rooms we're using.

167
00:12:59,040 --> 00:13:02,070
So right here I'm gonna type out center city.

168
00:13:02,070 --> 00:13:07,620
You should be typing out one of those two rooms that you're using over inside of the browser.

169
00:13:07,650 --> 00:13:13,410
Now the end result of this is that all text messages are going to go to that one room.

170
00:13:13,410 --> 00:13:19,070
That's not what we want long term but it will at least allow us to see this behavior in action.

171
00:13:19,110 --> 00:13:25,680
So I'm gonna save index dot J S we'll head over to the browser and we'll give things a refresh.

172
00:13:25,740 --> 00:13:29,490
I'm gonna refresh both of my clients so both reconnect.

173
00:13:29,640 --> 00:13:33,240
And now I'm going to send a text message from South Philly.

174
00:13:33,330 --> 00:13:35,690
I'll use from Andrew.

175
00:13:35,780 --> 00:13:37,820
This should only show up over here.

176
00:13:37,830 --> 00:13:41,400
Since this is the center city room and it does.

177
00:13:41,400 --> 00:13:47,350
And if I send a message from the center city room it should only show up here as well.

178
00:13:47,400 --> 00:13:53,070
So right now our server is emitting all of those messages to a single static room.

179
00:13:53,070 --> 00:14:00,060
That is not what we want long term but using two is going to allow us to achieve that behavior assuming

180
00:14:00,060 --> 00:14:02,510
we track the users who are joining.

181
00:14:02,550 --> 00:14:07,290
Since we have the data right here it is something we're able to track and that's what we're going to

182
00:14:07,290 --> 00:14:09,510
focus on in the next lesson.

183
00:14:09,510 --> 00:14:15,750
So what did we do in this one in this lesson we learned about the two method allowing us to target a

184
00:14:15,750 --> 00:14:17,190
specific room.

185
00:14:17,250 --> 00:14:19,200
Now how does someone join a room.

186
00:14:19,200 --> 00:14:22,040
Well we use socket dot join.

187
00:14:22,290 --> 00:14:28,890
So the client gets the user name and her room name it passes it off to the server and the server sets

188
00:14:28,920 --> 00:14:31,410
all of that room behavior up.

189
00:14:31,530 --> 00:14:36,000
We're going to continue on in the next lesson so stay tuned and I'll see you then.
