1
00:00:00,240 --> 00:00:06,440
In this lesson as promised it's going to be up to you to add it to new functions to users downtown J

2
00:00:06,480 --> 00:00:11,670
S one get user and a another get users in room.

3
00:00:11,880 --> 00:00:18,060
So right here what I'm going to do is remove everything below our 1 call to add a user we'll leave that

4
00:00:18,060 --> 00:00:22,350
in place and then I'm going to paste in the challenge comments.

5
00:00:22,350 --> 00:00:26,150
So right here the goal is to create those two new functions.

6
00:00:26,160 --> 00:00:33,810
The first one get user this accepts the I.D. of the user and it returns the user object.

7
00:00:33,810 --> 00:00:38,490
If there's a match otherwise you can just return undefined.

8
00:00:38,490 --> 00:00:43,860
Now in this case you can use the array find method to get that done down below.

9
00:00:43,860 --> 00:00:48,800
The other function you're going to create is get users in room.

10
00:00:48,810 --> 00:00:55,860
This is going to accept the room name and it's going to return an array of users that are in that room

11
00:00:56,040 --> 00:00:57,050
or an empty array.

12
00:00:57,060 --> 00:01:03,180
If no users are in that room and for this you could use the array filter method.

13
00:01:03,180 --> 00:01:05,310
Last up you're going to test your work.

14
00:01:05,460 --> 00:01:11,910
So let's go ahead and together add a another call to add user down below for this one.

15
00:01:11,910 --> 00:01:19,620
I'll change the I.D. to something like forty two and I will go ahead and add Mike to the south Philly

16
00:01:19,620 --> 00:01:20,610
chatroom.

17
00:01:20,820 --> 00:01:27,560
Then I'm going to add just one more user below that I'll change this idea to something like 32.

18
00:01:27,960 --> 00:01:30,170
And this person's name will be Andrew.

19
00:01:30,200 --> 00:01:34,080
But we'll put them in a different room like center city.

20
00:01:34,080 --> 00:01:37,350
So now we have some interesting data we can test with.

21
00:01:37,470 --> 00:01:43,770
I should be able to fetch any of these users by their I.D. And if I look for all of the users in Center

22
00:01:43,770 --> 00:01:45,620
City it should just be one.

23
00:01:45,750 --> 00:01:50,220
If I look for all of the users in South Philly I should get to back.

24
00:01:50,310 --> 00:01:56,370
So take some time to create those functions and then call them to test your work when you're done come

25
00:01:56,370 --> 00:01:57,690
back and click play

26
00:02:01,900 --> 00:02:02,800
how that go.

27
00:02:02,860 --> 00:02:04,710
Let's go ahead and kick things off.

28
00:02:04,720 --> 00:02:05,550
Up above.

29
00:02:05,560 --> 00:02:11,260
By creating our first of those two functions we'll test that out and then we'll move on to the other

30
00:02:11,260 --> 00:02:11,530
one.

31
00:02:11,590 --> 00:02:18,180
So right here this one is gonna be get user which I mentioned should accept the idea of the user.

32
00:02:18,310 --> 00:02:21,220
And it should return the match if any.

33
00:02:21,220 --> 00:02:23,870
Now I mentioned you could use find to get this done.

34
00:02:23,870 --> 00:02:26,330
Sure there are other ways as well.

35
00:02:26,470 --> 00:02:27,080
For us though.

36
00:02:27,090 --> 00:02:32,470
Well we're going to do is return a call to users dot find.

37
00:02:32,470 --> 00:02:34,690
Now remember find returns the match.

38
00:02:34,720 --> 00:02:35,820
If there is one.

39
00:02:35,840 --> 00:02:39,660
Otherwise it'll return undefined if there is no match.

40
00:02:39,670 --> 00:02:41,910
So this actually works out really well.

41
00:02:41,980 --> 00:02:46,240
We can directly return the result of the find method.

42
00:02:46,270 --> 00:02:48,650
Now we want to supply our function.

43
00:02:48,670 --> 00:02:51,550
So right here we'll go ahead and get that done.

44
00:02:51,640 --> 00:02:58,420
We get access to the user and we're looking for a user whose I.D. matches and I'll use the shorthand

45
00:02:58,420 --> 00:02:59,190
syntax.

46
00:02:59,200 --> 00:03:05,930
So right here that is user dot I.D. equaling the I.D. We are looking for.

47
00:03:05,980 --> 00:03:12,370
Now let's test this out before moving on to the second and slightly more complex one right here.

48
00:03:12,460 --> 00:03:17,620
We're gonna go ahead and get that done down below where our users are created.

49
00:03:17,830 --> 00:03:24,340
So I'll create a concept called a user and then I'll use get user with one of these three ideas I'll

50
00:03:24,340 --> 00:03:25,780
use forty two.

51
00:03:25,810 --> 00:03:33,160
So right here that is forty two and then we'll log the user out to make sure we actually get them back

52
00:03:33,610 --> 00:03:38,200
and let's go ahead and run the program to test this one out right here.

53
00:03:38,260 --> 00:03:41,510
I have that object returning which is excellent.

54
00:03:41,560 --> 00:03:47,980
Now if I change the I.D. to something like a four twenty one and save the program and rerun it we can

55
00:03:47,980 --> 00:03:52,050
see we do get undefined which is also what we want.

56
00:03:52,060 --> 00:03:58,060
Next up we're going to create the get users in Room function so up above.

57
00:03:58,060 --> 00:04:06,040
Let's go ahead and get that done right here constant get users in room.

58
00:04:06,110 --> 00:04:13,130
Remember this is what's going to allow us to show that users list in the sidebar in the browser.

59
00:04:13,130 --> 00:04:18,830
We are going to accept the name of the room that you're trying to look for and down below.

60
00:04:18,830 --> 00:04:22,660
We'll use the array filter method to get that done.

61
00:04:22,760 --> 00:04:28,970
So I'm going to return the result from calling users dot filter.

62
00:04:28,970 --> 00:04:33,860
We are going to get access to the individual user in the callback function.

63
00:04:33,860 --> 00:04:40,400
Now remember with filter we want to return true if the item should be considered something that gets

64
00:04:40,400 --> 00:04:45,870
returned and false if it should be filtered out and should not be returned.

65
00:04:45,920 --> 00:04:54,200
In this case we want to keep all of the users where the users room equals the room we're looking for.

66
00:04:54,260 --> 00:04:55,480
We want to return true.

67
00:04:55,490 --> 00:04:59,570
Keeping that as a match and sending it back in the array.

68
00:04:59,570 --> 00:05:03,860
Now with this in place let's go ahead and test our work here as well.

69
00:05:03,860 --> 00:05:04,920
Down below.

70
00:05:05,000 --> 00:05:09,530
We're going to go ahead and look for both rooms but we'll start with South Philly.

71
00:05:09,530 --> 00:05:19,040
So right here a new constant I can just create a list called User List setting and equal to I'll use

72
00:05:19,070 --> 00:05:26,140
get users in a room and we're going to provide one of our room names.

73
00:05:26,270 --> 00:05:32,180
Now right here we didn't do any sort of sanitization for this data because this data isn't going to

74
00:05:32,180 --> 00:05:33,680
be coming from the user.

75
00:05:33,710 --> 00:05:35,960
It's going to be all on the server.

76
00:05:35,960 --> 00:05:40,970
Now you could have added that code in there if you wanted to if you wanted to do that.

77
00:05:40,970 --> 00:05:42,840
It would look a little like this.

78
00:05:42,920 --> 00:05:50,420
That is room equals the existing room we're using trim and then we're using something like two lower

79
00:05:50,420 --> 00:05:51,290
case.

80
00:05:51,350 --> 00:05:55,760
This is not something you needed to do but you could add it if you wanted to.

81
00:05:55,790 --> 00:05:59,150
Now down below we're going to search for those rooms.

82
00:05:59,150 --> 00:06:05,180
I'll start with South Philly and then I'll go ahead and print that user list out to see what exactly

83
00:06:05,180 --> 00:06:11,100
we get back since there are two members in that room I would expect to see two showing up.

84
00:06:11,380 --> 00:06:17,360
I'll rerun the script right here we get our array with both Andrew and Mike which is great.

85
00:06:17,360 --> 00:06:19,610
Next up we'll look in Center City.

86
00:06:19,640 --> 00:06:22,490
So right here we have Center City.

87
00:06:22,490 --> 00:06:27,390
I'll save the program rerun things and we get just that one member.

88
00:06:27,590 --> 00:06:33,820
And if I were to type something else entirely let's go ahead and use a different neighborhood like Fairmount

89
00:06:34,800 --> 00:06:41,260
and rerun the program this time I would expect to see an empty list as there are no users in that room.

90
00:06:41,280 --> 00:06:43,570
And it's exactly what I'm getting.

91
00:06:43,620 --> 00:06:49,010
So now that we have this in place we have a really great system of for managing our users.

92
00:06:49,020 --> 00:06:53,610
We have four functions allowing us to keep track of them over time.

93
00:06:53,610 --> 00:06:56,720
Now we're just going to clean this file up a little bit.

94
00:06:56,760 --> 00:06:59,760
I'm going to remove my one comment up above.

95
00:06:59,760 --> 00:07:07,040
We then have our array our four methods and down below that we have the usage we just set up we're going

96
00:07:07,040 --> 00:07:09,530
to go ahead and remove all of that as well.

97
00:07:09,630 --> 00:07:13,590
As long as your code was working this is no longer necessary.

98
00:07:13,620 --> 00:07:19,680
So right after we create the final function we're going to export all of these from the file.

99
00:07:19,680 --> 00:07:23,390
So module dot exports equals an object.

100
00:07:23,490 --> 00:07:28,060
We have add user then we have remove user.

101
00:07:28,170 --> 00:07:29,850
We have get user.

102
00:07:29,850 --> 00:07:33,620
And finally we have get users in room.

103
00:07:33,690 --> 00:07:36,360
So here we're exporting all four.

104
00:07:36,360 --> 00:07:40,700
And then the next lesson we're going to take advantage of these in index dot J.

105
00:07:40,710 --> 00:07:43,880
S to wire up this room feature.

106
00:07:43,890 --> 00:07:50,310
Now I know the last two videos were in real time application or socket dot I O specific but they're

107
00:07:50,310 --> 00:07:55,980
just as necessary for building out a useful application now that we have this in place.

108
00:07:55,980 --> 00:07:57,690
Let's jump into the next one.
