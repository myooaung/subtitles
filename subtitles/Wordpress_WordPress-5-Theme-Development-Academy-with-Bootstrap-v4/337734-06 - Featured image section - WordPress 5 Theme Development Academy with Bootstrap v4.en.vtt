WEBVTT
X-TIMESTAMP-MAP=LOCAL:00:00:00.000,MPEGTS:0

00:00:00.480 --> 00:00:05.275
The next stage of our Header is to add this featured image,

00:00:05.275 --> 00:00:07.645
which is the background which we see here.

00:00:07.645 --> 00:00:10.780
Later in the course, will also allow us to be changed in

00:00:10.780 --> 00:00:14.690
the WordPress dashboard over a control by the user.

00:00:14.690 --> 00:00:16.660
First, we're going to go ahead and add

00:00:16.660 --> 00:00:20.410
a new section and still within this header element.

00:00:20.410 --> 00:00:23.845
Let's locate the closing header tag.

00:00:23.845 --> 00:00:27.305
Then we can create a new section.

00:00:27.305 --> 00:00:33.050
The section is going to have a Bootstrap class of container fluid.

00:00:37.240 --> 00:00:39.840
To lay out a page in Bootstrap,

00:00:39.840 --> 00:00:41.695
we use a series of containers,

00:00:41.695 --> 00:00:46.750
rows and columns, which uses the CSS flex box under the hood.

00:00:46.750 --> 00:00:49.540
There is a container class which groups

00:00:49.540 --> 00:00:53.455
the content into a responsive pixel width container,

00:00:53.455 --> 00:00:57.565
which leaves a gap on the right and left-hand side of the page.

00:00:57.565 --> 00:01:00.365
We will look at this alternative soon.

00:01:00.365 --> 00:01:04.135
There is this container fluid as we've just used here,

00:01:04.135 --> 00:01:07.660
which provides a fluid container which will stretch

00:01:07.660 --> 00:01:11.750
to 100 percent of the available screen width.

00:01:11.750 --> 00:01:18.580
With if type it can be used as a reference to center and part our content inside.

00:01:18.580 --> 00:01:20.785
Nested inside this container,

00:01:20.785 --> 00:01:22.875
we add a class of row.

00:01:22.875 --> 00:01:28.200
Rows allow us to NES content inside and sighs the content by using columns,

00:01:28.200 --> 00:01:29.985
and we'll look at this very soon.

00:01:29.985 --> 00:01:32.720
But for now we're going to go and add our row.

00:01:32.720 --> 00:01:36.390
This is going to be a class on a div wrapper.

00:01:36.860 --> 00:01:40.115
Inside here we can add our image,

00:01:40.115 --> 00:01:43.600
which is going to be the background image which we've seen before.

00:01:43.600 --> 00:01:45.980
The image source is going to be from

00:01:45.980 --> 00:01:49.730
the images folder which were provided with this course.

00:01:49.730 --> 00:01:54.290
Inside there, there's a image called Lake.JPEG.

00:01:54.290 --> 00:02:02.590
We can also add the old text of lake backgrounds then a class which is a custom class,

00:02:02.590 --> 00:02:06.070
we'll get to soon of header_IMG.

00:02:07.880 --> 00:02:11.930
Just after this image, we're also going to add a div.

00:02:11.930 --> 00:02:17.515
This div is going to be for the text which is laid over the image.

00:02:17.515 --> 00:02:22.895
Then inside we can add the p elements to add some text.

00:02:22.895 --> 00:02:32.375
I'm going to add fully responsive premiums path theme for WordPress.

00:02:32.375 --> 00:02:35.075
You can add any text you like inside here,

00:02:35.075 --> 00:02:37.310
and then let's add some break tags,

00:02:37.310 --> 00:02:40.025
just to split this up on two different lines.

00:02:40.025 --> 00:02:44.480
This after responsive and also after theme.

00:02:44.730 --> 00:02:48.140
We can control these texts in the CSS.

00:02:48.140 --> 00:02:50.045
We also need to add a class.

00:02:50.045 --> 00:02:54.610
This again is a custom class of feature text.

00:02:54.610 --> 00:03:00.050
Feature text is one of our own custom classes and nothing to do with Bootstrap.

00:03:00.050 --> 00:03:04.640
We simply going to take advantage of our own classes too so we can

00:03:04.640 --> 00:03:09.975
control these texts in the CSS, or to the browser.

00:03:09.975 --> 00:03:15.020
Then reload, there's our image and also our text.

00:03:15.020 --> 00:03:18.575
Our text is now seating below the image.

00:03:18.575 --> 00:03:22.060
This is not the result we want for our final project.

00:03:22.060 --> 00:03:23.765
We're going to go ahead and add

00:03:23.765 --> 00:03:28.670
some custom CSS classes and also some Bootstrap classes too,

00:03:28.670 --> 00:03:31.645
to make this text overlay the image.

00:03:31.645 --> 00:03:34.985
First let's set up the Bootstrap classes.

00:03:34.985 --> 00:03:39.685
We can set the surrounding row to be a position of relative.

00:03:39.685 --> 00:03:43.365
Let's go to our surrounding row which is just here,

00:03:43.365 --> 00:03:47.654
we can add the bootstrap position relative,

00:03:47.654 --> 00:03:54.005
and this is exactly the same as going into our CSS and set in a relative position,

00:03:54.005 --> 00:03:56.525
but this way it's just a bootstrap class,

00:03:56.525 --> 00:04:00.755
and then bootstrap takes care of adding all the CSS which we need.

00:04:00.755 --> 00:04:03.530
If we save this and then reload,

00:04:03.530 --> 00:04:06.550
open up the developer tools,

00:04:06.550 --> 00:04:11.630
you see the position relative class has added the CSS position value

00:04:11.630 --> 00:04:16.265
of relative,and then bootstrap is also added importance on the end.

00:04:16.265 --> 00:04:19.220
Just make sure that nothing overrides this.

00:04:19.220 --> 00:04:23.740
Next, we need to set the text to be a position absolute.

00:04:23.740 --> 00:04:27.275
In the div which surrounds our p elements,

00:04:27.275 --> 00:04:32.910
a class, our position absolute.

00:04:32.960 --> 00:04:35.485
They should now move the text.

00:04:35.485 --> 00:04:39.380
If we reload the browser over the top of the image,

00:04:39.380 --> 00:04:43.130
setting the text to be a position of absolute,

00:04:43.130 --> 00:04:46.924
we'll take the text out the normal flow of the webpage.

00:04:46.924 --> 00:04:50.705
It then position itself to the closest relative container,

00:04:50.705 --> 00:04:53.430
which is our row, the next stage,

00:04:53.430 --> 00:04:56.585
is to center this text in the middle of the image.

00:04:56.585 --> 00:05:01.040
Let's do this by going over to our row, which is just here.

00:05:01.040 --> 00:05:06.690
We can set the display type to be flexbox with the dash flux.

00:05:06.830 --> 00:05:13.140
We can also set the flexbox value of justify content center,

00:05:15.910 --> 00:05:21.455
which will align the content in the center of the main axis.

00:05:21.455 --> 00:05:23.750
Save and reload.

00:05:23.750 --> 00:05:25.350
This leaves us halfway there,

00:05:25.350 --> 00:05:28.865
we've now got the content in the center horizontally.

00:05:28.865 --> 00:05:31.705
Now we just need the vertical alignment too.

00:05:31.705 --> 00:05:35.435
I'm looking to do this by adding one more class to our row.

00:05:35.435 --> 00:05:38.000
This class is align items,

00:05:38.000 --> 00:05:43.690
center of the browser and there we go.

00:05:43.760 --> 00:05:48.920
Positioning like this used to be a lot more difficult before flexbox.

00:05:48.920 --> 00:05:51.784
Both the align items center property,

00:05:51.784 --> 00:05:56.105
will align our content now on the cross or opposite axis,

00:05:56.105 --> 00:06:00.415
which gives us perfect horizontal and vertical alignment.

00:06:00.415 --> 00:06:05.000
One little tweak we can make is to set the text to be centered too.

00:06:05.000 --> 00:06:08.650
At the moment it's all aligned to the left of the container.

00:06:08.650 --> 00:06:13.640
Again, we can apply this to our row just after the align items center.

00:06:13.640 --> 00:06:18.750
We can add text center and there we go.

00:06:18.750 --> 00:06:23.335
We can now finish off this section with a little custom CSS.

00:06:23.335 --> 00:06:28.795
We already have a custom class of header image which will use now.

00:06:28.795 --> 00:06:32.705
Now let's add one to our surrounding text div two.

00:06:32.705 --> 00:06:38.110
Here's our text and in the surrounding container, after position absolute.

00:06:38.110 --> 00:06:41.614
Let's add feature dash BG,

00:06:41.614 --> 00:06:45.265
this will be used to add the surrounding box.

00:06:45.265 --> 00:06:48.520
If we go to the finished version which surrounds the texts,

00:06:48.520 --> 00:06:52.120
so we can write a little bit more easily over the image.

00:06:52.120 --> 00:06:57.135
This background would also be 60 percent of the container on larger screens,

00:06:57.135 --> 00:07:01.875
and then jump up to be the full-width on smaller screens.

00:07:01.875 --> 00:07:05.975
Let's get to work over in the Custom CSS.

00:07:05.975 --> 00:07:12.760
First step is to set the image to be a max width of 100 percent.

00:07:12.760 --> 00:07:18.905
We can then use the feature BG class to begin to create our background.

00:07:18.905 --> 00:07:23.450
The background is going to be created using a RGBA color.

00:07:23.450 --> 00:07:27.805
So we give it this nice transparency we can see here.

00:07:27.805 --> 00:07:31.470
The four values is going to be 255,

00:07:31.470 --> 00:07:38.040
255, 255, and then the forth is for the opacity.

00:07:38.040 --> 00:07:40.500
I'm going to set this to be 30 percent,

00:07:40.500 --> 00:07:44.260
which is a value of 0.3.

00:07:44.330 --> 00:07:47.460
Make sure this is a dash.

00:07:47.460 --> 00:07:49.715
Now onto the width,

00:07:49.715 --> 00:07:54.275
the width is going to be 100 vw for the larger screens,

00:07:54.275 --> 00:07:58.130
which will span the full width of the browser or the view port.

00:07:58.130 --> 00:08:06.685
The border-radius of 10 pixels, gives us a save.

00:08:06.685 --> 00:08:10.125
Open up the tab and reload.

00:08:10.125 --> 00:08:11.880
Not much has changed there,

00:08:11.880 --> 00:08:16.340
I think we just need to save the index for the custom class.

00:08:16.340 --> 00:08:20.540
Give this a try. Now let's make this a little bit bigger.

00:08:20.540 --> 00:08:26.190
We have a surrounding div of feature text. Let's grab this.

00:08:28.240 --> 00:08:33.245
The font size is going to be two REMS.

00:08:33.245 --> 00:08:41.005
Also the line height that increase to be four REMS, reload.

00:08:41.005 --> 00:08:45.545
The next step is to add a minimum height to our header image.

00:08:45.545 --> 00:08:50.950
Let's scroll down to the header underscore IMG,

00:08:50.950 --> 00:08:57.890
All we're going to do here is set the minimum height of the image speed 25 VH.

00:08:57.890 --> 00:09:03.310
Meaning the image will always be a minimum of 25 percent of the view bar height.

00:09:03.310 --> 00:09:08.135
The last thing to do in our CSS is to create a media query.

00:09:08.135 --> 00:09:10.205
If we take look at the finished version,

00:09:10.205 --> 00:09:15.135
make the width of this background 60 percent on the largest screens.

00:09:15.135 --> 00:09:20.790
As media, let's target the screens.

00:09:20.790 --> 00:09:25.330
We can also match up our breakpoints with the Bootstrap breakpoints.

00:09:25.330 --> 00:09:33.730
The minimum width of 768 pixels.

00:09:34.360 --> 00:09:42.345
Going to grab the feature BG and set the width to be 60 vw.

00:09:42.345 --> 00:09:45.945
On larger screens, the background will be 60 percent,

00:09:45.945 --> 00:09:47.330
then on smaller screens,

00:09:47.330 --> 00:09:49.655
the background will be a 100 percent.

00:09:49.655 --> 00:09:53.995
Save this file, over to the browser.

00:09:53.995 --> 00:09:59.420
If we shrink it down and close the dev tools to get more space,

00:09:59.420 --> 00:10:03.185
the background and texts for our small screen is the full width.

00:10:03.185 --> 00:10:06.065
If we increase the screen space available,

00:10:06.065 --> 00:10:08.885
this now drops down to be 60 percent,

00:10:08.885 --> 00:10:11.290
which is exactly what we wanted.

00:10:11.290 --> 00:10:13.635
This is it for our header now.

00:10:13.635 --> 00:10:15.080
Just quickly before we go,

00:10:15.080 --> 00:10:20.035
I want to show you the difference between the container and the container fluid.

00:10:20.035 --> 00:10:23.710
Currently we've set the section to be container fluid.

00:10:23.710 --> 00:10:28.115
If we just set this to the container and then reload,

00:10:28.115 --> 00:10:32.205
this makes the container a fixed pixel based width,

00:10:32.205 --> 00:10:35.960
meaning there is a white space on the left and right-hand side.

00:10:35.960 --> 00:10:39.250
Where as container fluid which we had before,

00:10:39.250 --> 00:10:42.780
will stretch to the full width of the browser,

00:10:42.780 --> 00:10:47.760
and we'll make more use of these containers as we go through the rest of the course.
