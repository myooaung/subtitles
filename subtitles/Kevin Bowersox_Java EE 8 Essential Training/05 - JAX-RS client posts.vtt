WEBVTT
1
00:00:00.005 --> 00:00:04.000
- [Instructor] Within JAX-RS there is a fluent client API

2
00:00:04.000 --> 00:00:08.001
that we can use to make calls against a restful API.

3
00:00:08.001 --> 00:00:10.003
Now, in this lesson, we're going to take a look at how

4
00:00:10.003 --> 00:00:13.009
to do that, but first, let's look at it from a high level.

5
00:00:13.009 --> 00:00:16.000
In the last lesson, we were building out

6
00:00:16.000 --> 00:00:18.003
our rest API implementation.

7
00:00:18.003 --> 00:00:21.004
So we were the providers of the rest API.

8
00:00:21.004 --> 00:00:23.006
When we use the client, we're looking at it

9
00:00:23.006 --> 00:00:27.000
from a consumer of the API, so we're an individual

10
00:00:27.000 --> 00:00:31.000
that is interested in making a call to that API

11
00:00:31.000 --> 00:00:35.005
to maybe get some data or to perform some operation.

12
00:00:35.005 --> 00:00:38.008
Now, one thing I'm going to point out before we move ahead

13
00:00:38.008 --> 00:00:43.003
is that on our resource that we created last time,

14
00:00:43.003 --> 00:00:46.008
I've gone ahead and added some data persistence,

15
00:00:46.008 --> 00:00:51.004
in order to kind of support our work and provide state

16
00:00:51.004 --> 00:00:53.001
within our rest API.

17
00:00:53.001 --> 00:00:55.000
So you'll notice that, like for example,

18
00:00:55.000 --> 00:00:57.009
for this create method, I've gone ahead

19
00:00:57.009 --> 00:01:00.005
and persisted the inventory item

20
00:01:00.005 --> 00:01:03.001
that is passed into this method.

21
00:01:03.001 --> 00:01:06.000
And you'll see that occur throughout the API.

22
00:01:06.000 --> 00:01:08.007
I basically just filled out the implementation,

23
00:01:08.007 --> 00:01:12.003
it's all JPA and we've seen that in the previous lessons.

24
00:01:12.003 --> 00:01:15.006
Now let's kind of hone in on this create method.

25
00:01:15.006 --> 00:01:20.000
You'll notice that it is mapped to an HTTP post,

26
00:01:20.000 --> 00:01:23.001
and then it expects an inventory item to be passed in.

27
00:01:23.001 --> 00:01:24.008
That's going to be JSON.

28
00:01:24.008 --> 00:01:29.004
And that's going to create new inventory item resource

29
00:01:29.004 --> 00:01:32.008
by invoking this method on our API.

30
00:01:32.008 --> 00:01:35.004
Now let's go ahead and look at the backing beam

31
00:01:35.004 --> 00:01:38.006
for our form where we've created our catalog items

32
00:01:38.006 --> 00:01:39.008
in the past.

33
00:01:39.008 --> 00:01:42.006
You'll notice that on the backing beam

34
00:01:42.006 --> 00:01:44.007
there is this add item method.

35
00:01:44.007 --> 00:01:47.002
And while we're here, I'm just going to do a little bit

36
00:01:47.002 --> 00:01:51.002
of clean up, but this method is actually invoked

37
00:01:51.002 --> 00:01:53.005
when we submit the form

38
00:01:53.005 --> 00:01:57.008
and it's used to build a new catalog item object.

39
00:01:57.008 --> 00:02:02.000
And that item object is bound to a field

40
00:02:02.000 --> 00:02:04.004
on this backing beam named item.

41
00:02:04.004 --> 00:02:07.006
So I'm just going to pass that in to EJB.

42
00:02:07.006 --> 00:02:10.008
The catalog item will be created.

43
00:02:10.008 --> 00:02:12.002
And then we're going to go ahead

44
00:02:12.002 --> 00:02:16.003
and use our inventory service to create the inventory

45
00:02:16.003 --> 00:02:17.004
for that item.

46
00:02:17.004 --> 00:02:21.006
So here you can see our call to the inventory service,

47
00:02:21.006 --> 00:02:24.005
and we can take a look at the implementation

48
00:02:24.005 --> 00:02:26.008
for that inventory service.

49
00:02:26.008 --> 00:02:29.009
We're looking at the remote inventory service here.

50
00:02:29.009 --> 00:02:34.002
And what you can see is that we're backing it using a map.

51
00:02:34.002 --> 00:02:36.007
So that's not really what we want to do.

52
00:02:36.007 --> 00:02:40.004
So I'm going to go ahead and remove all of that code.

53
00:02:40.004 --> 00:02:45.004
And we're going to provide a different implementation here.

54
00:02:45.004 --> 00:02:50.006
So let's give ourselves some space.

55
00:02:50.006 --> 00:02:55.007
And what we're going to do is use the JAX-RS client

56
00:02:55.007 --> 00:02:58.002
to make a call against

57
00:02:58.002 --> 00:03:01.009
the inventory item resource

58
00:03:01.009 --> 00:03:05.001
on our JAX-RS API that we stood up.

59
00:03:05.001 --> 00:03:07.008
So in order to get a JAX-RS client,

60
00:03:07.008 --> 00:03:11.004
we can use a client builder object.

61
00:03:11.004 --> 00:03:14.009
And it has a factory method named new client.

62
00:03:14.009 --> 00:03:17.008
And that's how we get an instance of it.

63
00:03:17.008 --> 00:03:20.003
And then the next thing we need to think about is

64
00:03:20.003 --> 00:03:23.001
where do we want to send our HTTP traffic?

65
00:03:23.001 --> 00:03:26.008
So we're going to build an API URL.

66
00:03:26.008 --> 00:03:31.007
And this is basically going to be the base URL

67
00:03:31.007 --> 00:03:33.005
for our API.

68
00:03:33.005 --> 00:03:37.008
You remember that it was local host port 8080.

69
00:03:37.008 --> 00:03:43.001
And then hsports-catalog-jax.

70
00:03:43.001 --> 00:03:48.003
And then the base API URL was

71
00:03:48.003 --> 00:03:50.009
hsports/api.

72
00:03:50.009 --> 00:03:54.009
Okay, so we got our endpoint, or at least the base of it,

73
00:03:54.009 --> 00:03:58.004
established, and then what we do with the client

74
00:03:58.004 --> 00:04:00.005
is we set up a target.

75
00:04:00.005 --> 00:04:05.009
So I'm going to provide that URL as the base target

76
00:04:05.009 --> 00:04:07.004
that we'd like to access.

77
00:04:07.004 --> 00:04:09.005
And then we can further extend

78
00:04:09.005 --> 00:04:12.006
that URL by adding a path to it.

79
00:04:12.006 --> 00:04:17.006
And we want to target here the inventory items resource.

80
00:04:17.006 --> 00:04:21.000
So by using the path method, that will be concatenated

81
00:04:21.000 --> 00:04:24.000
to our API URL.

82
00:04:24.000 --> 00:04:27.001
Next, we're going to go ahead, we build the request

83
00:04:27.001 --> 00:04:30.004
and we indicate that it's going to be a post.

84
00:04:30.004 --> 00:04:34.008
And the post needs us to provide an entity.

85
00:04:34.008 --> 00:04:37.005
And what I'm going to do to make this easier to see,

86
00:04:37.005 --> 00:04:41.004
I'll put this on two lines.

87
00:04:41.004 --> 00:04:43.002
Actually three lines.

88
00:04:43.002 --> 00:04:47.004
And then I'm going to use the entity object,

89
00:04:47.004 --> 00:04:51.003
which has a static JSON method.

90
00:04:51.003 --> 00:04:55.003
And what this allows us to do is pass in an object

91
00:04:55.003 --> 00:04:59.006
and it's just going to serialize it into JSON.

92
00:04:59.006 --> 00:05:03.003
So we can then start to use our new

93
00:05:03.003 --> 00:05:06.001
inventory item constructor.

94
00:05:06.001 --> 00:05:08.005
And the first argument is going to be null

95
00:05:08.005 --> 00:05:12.005
because we're now relying upon our JPA provider

96
00:05:12.005 --> 00:05:15.002
to generate our surrogate key.

97
00:05:15.002 --> 00:05:18.007
The second item will be our catalog item ID.

98
00:05:18.007 --> 00:05:22.000
Then we pass in the name and then quantity.

99
00:05:22.000 --> 00:05:27.007
I'm going to make a new random integer for the quantity.

100
00:05:27.007 --> 00:05:35.006
And we'll just cast that over to a long.

101
00:05:35.006 --> 00:05:40.009
Okay, and there we have our call built

102
00:05:40.009 --> 00:05:42.009
to the rest API.

103
00:05:42.009 --> 00:05:46.001
Now that rest API is going to return a response

104
00:05:46.001 --> 00:05:49.004
and we can assign that to a response object.

105
00:05:49.004 --> 00:05:52.001
Just be careful when selecting the response type

106
00:05:52.001 --> 00:05:55.008
that you pick the JAX-RS type.

107
00:05:55.008 --> 00:05:57.000
Okay.

108
00:05:57.000 --> 00:05:59.006
And then from here, we're just going to go ahead

109
00:05:59.006 --> 00:06:05.003
and log some of the information we get from the response.

110
00:06:05.003 --> 00:06:07.003
There we get the status code.

111
00:06:07.003 --> 00:06:10.006
And then we're also going to go ahead and get a location

112
00:06:10.006 --> 00:06:12.001
that's sent back.

113
00:06:12.001 --> 00:06:14.004
And that location has a path that points

114
00:06:14.004 --> 00:06:16.007
to our newly created resource.

115
00:06:16.007 --> 00:06:19.004
Okay, so all of that's in place.

116
00:06:19.004 --> 00:06:21.007
Let's check our application.

117
00:06:21.007 --> 00:06:24.008
I'm going to remove the existing one.

118
00:06:24.008 --> 00:06:30.007
And then we'll start things up.

119
00:06:30.007 --> 00:06:33.002
Okay, there we see our application started.

120
00:06:33.002 --> 00:06:36.000
Let's make sure it's out there, yep.

121
00:06:36.000 --> 00:06:38.007
All right, and then we can watch the console.

122
00:06:38.007 --> 00:06:43.001
So I'll just go ahead and expand that.

123
00:06:43.001 --> 00:06:46.006
And then we can open a new browser window,

124
00:06:46.006 --> 00:06:48.005
hit the application.

125
00:06:48.005 --> 00:06:51.008
Let's go ahead we'll create some mittens.

126
00:06:51.008 --> 00:06:54.004
Select an available date.

127
00:06:54.004 --> 00:06:57.002
So here we're going to go ahead and post the form.

128
00:06:57.002 --> 00:06:59.004
And that's going to cause the client

129
00:06:59.004 --> 00:07:02.007
to call the inventory service API.

130
00:07:02.007 --> 00:07:05.003
And if we take a closer look here at our console output.

131
00:07:05.003 --> 00:07:07.007
You see we get the 201 status code,

132
00:07:07.007 --> 00:07:10.002
indicating a resource has been created.

133
00:07:10.002 --> 00:07:14.003
And then we get a path to that resource.

134
00:07:14.003 --> 00:07:18.009
So that's how we can build calls to rest APIs

135
00:07:18.009 --> 00:07:22.000
with the JAX-RS client.

