WEBVTT
1
00:00:00.005 --> 00:00:03.008
- [Instructor] The Servlet API is an essential component

2
00:00:03.008 --> 00:00:07.000
in Java EE's web-based technologies

3
00:00:07.000 --> 00:00:08.008
that provides critical features

4
00:00:08.008 --> 00:00:11.003
for building web applications.

5
00:00:11.003 --> 00:00:13.000
Let's start by taking a look at

6
00:00:13.000 --> 00:00:16.002
the overarching concept of a servlet.

7
00:00:16.002 --> 00:00:19.000
Servlets run in a servlet container,

8
00:00:19.000 --> 00:00:21.007
which is a web or application server

9
00:00:21.007 --> 00:00:23.008
that provides network services

10
00:00:23.008 --> 00:00:27.003
for receiving requests and sending responses.

11
00:00:27.003 --> 00:00:30.004
All Java EE application servers support

12
00:00:30.004 --> 00:00:33.007
the servlet spec and contain a servlet container

13
00:00:33.007 --> 00:00:36.002
where servlets can be initialized.

14
00:00:36.002 --> 00:00:38.009
Once initialized, a servlet is available

15
00:00:38.009 --> 00:00:40.006
for processing requests,

16
00:00:40.006 --> 00:00:45.001
which are typically HTTP requests sent by the web browser.

17
00:00:45.001 --> 00:00:49.000
Requests are processed using a servlet interface method

18
00:00:49.000 --> 00:00:53.002
that corresponds to the HTTP method of the request

19
00:00:53.002 --> 00:00:56.000
and then dynamic content is generated

20
00:00:56.000 --> 00:00:58.003
and sent to the browser.

21
00:00:58.003 --> 00:01:02.005
Servlet logic handles a variety of application concerns,

22
00:01:02.005 --> 00:01:04.009
such as writing data to a database

23
00:01:04.009 --> 00:01:08.004
or generating dynamic content, like HTML,

24
00:01:08.004 --> 00:01:10.006
to return to the browser.

25
00:01:10.006 --> 00:01:13.003
The servlet interface contains methods

26
00:01:13.003 --> 00:01:16.001
that we implement for processing requests

27
00:01:16.001 --> 00:01:20.002
with HTTP methods, such as GET and POST.

28
00:01:20.002 --> 00:01:24.001
The Servlet API allows developers to easily interact

29
00:01:24.001 --> 00:01:27.002
with HTTP requests and responses

30
00:01:27.002 --> 00:01:32.004
by providing easy access and creation of headers, cookies,

31
00:01:32.004 --> 00:01:35.006
parameters, and body content.

32
00:01:35.006 --> 00:01:38.006
Servlets must be configured in the application,

33
00:01:38.006 --> 00:01:41.009
which can be done using an annotation-based approach

34
00:01:41.009 --> 00:01:44.008
introduced in Java EE 7.

35
00:01:44.008 --> 00:01:48.004
Prior to that, a web.xml file was used

36
00:01:48.004 --> 00:01:50.007
for initializing a servlet.

37
00:01:50.007 --> 00:01:55.008
Java EE 7 also introduced asynchronous servlet processing,

38
00:01:55.008 --> 00:01:59.008
which allows the servlet container to process resources

39
00:01:59.008 --> 00:02:02.004
more efficiently by releasing threads

40
00:02:02.004 --> 00:02:05.005
while long-running operations occur.

41
00:02:05.005 --> 00:02:08.004
The main benefit of the Servlet API is

42
00:02:08.004 --> 00:02:12.002
the abstraction it provides over low-level interfaces

43
00:02:12.002 --> 00:02:14.008
for networking and request parsing,

44
00:02:14.008 --> 00:02:17.005
making it easier for Java developers

45
00:02:17.005 --> 00:02:19.009
to build web applications.

46
00:02:19.009 --> 00:02:22.001
Here you see an example of a servlet

47
00:02:22.001 --> 00:02:24.008
in its simple implementation of the doGET

48
00:02:24.008 --> 00:02:26.008
and doPOST methods.

49
00:02:26.008 --> 00:02:30.009
You will notice these methods gain access to request data

50
00:02:30.009 --> 00:02:35.000
using the HTTP servlet request interface.

51
00:02:35.000 --> 00:02:39.008
The content returned is created using the writer object

52
00:02:39.008 --> 00:02:43.008
found on the HTTP servlet response interface.

53
00:02:43.008 --> 00:02:47.001
These are two critical interfaces to understand

54
00:02:47.001 --> 00:02:49.007
when working with servlets.

55
00:02:49.007 --> 00:02:52.000
Within the servlet specification,

56
00:02:52.000 --> 00:02:55.007
there are other useful interfaces that we can use.

57
00:02:55.007 --> 00:02:58.008
For example, the HttpSession interface

58
00:02:58.008 --> 00:03:03.003
manages information spanning multiple requests for a user.

59
00:03:03.003 --> 00:03:06.001
The Cookie interface is used to pass data

60
00:03:06.001 --> 00:03:09.006
to and from the browser with every request,

61
00:03:09.006 --> 00:03:13.009
allowing some persistent state to reside on the browser.

62
00:03:13.009 --> 00:03:17.000
The ServletContext allows developers to interact

63
00:03:17.000 --> 00:03:19.004
with the underlying servlet container.

64
00:03:19.004 --> 00:03:22.006
And finally, Filters allow for additional tasks

65
00:03:22.006 --> 00:03:26.009
to be performed for every request when it's received

66
00:03:26.009 --> 00:03:30.007
or when a response is returned for it.

67
00:03:30.007 --> 00:03:32.002
As we work through this lesson,

68
00:03:32.002 --> 00:03:34.003
We'll see how servlets can be used

69
00:03:34.003 --> 00:03:36.005
to build Java web applications

70
00:03:36.005 --> 00:03:40.000
and explore these interfaces in more detail.

