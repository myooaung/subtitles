WEBVTT
1
00:00:00.008 --> 00:00:03.002
- [Instructor] Validation of data is frequently performed

2
00:00:03.002 --> 00:00:07.001
within application to ensure data provided by a user

3
00:00:07.001 --> 00:00:10.005
or another system meets certain requirements.

4
00:00:10.005 --> 00:00:12.008
These constraints are important for ensuring

5
00:00:12.008 --> 00:00:14.009
the integrity of the system's data

6
00:00:14.009 --> 00:00:18.003
and can aid in the application of security.

7
00:00:18.003 --> 00:00:22.003
The Java EE Bean Validation API provides a simple,

8
00:00:22.003 --> 00:00:25.002
annotation-based approach that allows developers

9
00:00:25.002 --> 00:00:28.006
to add validation constraints on beans.

10
00:00:28.006 --> 00:00:33.001
The Bean Validation API was introduced in Java EE 6

11
00:00:33.001 --> 00:00:37.007
and has received several updates as part of Java EE 8.

12
00:00:37.007 --> 00:00:39.008
Within the Bean Validation API,

13
00:00:39.008 --> 00:00:42.003
we'll find several annotations that provide

14
00:00:42.003 --> 00:00:45.008
built-in restraints for common validations.

15
00:00:45.008 --> 00:00:49.002
For more complex, or frequently used validations,

16
00:00:49.002 --> 00:00:51.008
the API allows developers to build

17
00:00:51.008 --> 00:00:54.002
their own custom constraints.

18
00:00:54.002 --> 00:00:57.000
The constraints can be applied on various elements

19
00:00:57.000 --> 00:01:00.008
of a class, such as fields, methods, constructors,

20
00:01:00.008 --> 00:01:04.003
method parameters, and other annotations.

21
00:01:04.003 --> 00:01:07.000
Applying constraints on beans provides

22
00:01:07.000 --> 00:01:10.005
a single source of validation that is integrated

23
00:01:10.005 --> 00:01:13.000
with various Java EE technologies

24
00:01:13.000 --> 00:01:17.004
to avoid duplication of validation logic.

25
00:01:17.004 --> 00:01:20.002
Java EE 8 implementations will adhere

26
00:01:20.002 --> 00:01:24.004
to Bean Validation 2.0, which added several features.

27
00:01:24.004 --> 00:01:27.006
First, there were additional built-in constraints

28
00:01:27.006 --> 00:01:30.005
added to the API which are quite useful.

29
00:01:30.005 --> 00:01:32.003
I'll show you these in a minute.

30
00:01:32.003 --> 00:01:35.007
The new version also allows validation to be applied

31
00:01:35.007 --> 00:01:40.004
on objects within container types, such as Lists and Maps.

32
00:01:40.004 --> 00:01:43.006
This also includes the keys of a map.

33
00:01:43.006 --> 00:01:47.007
The API also introduced support for new Java 8 types,

34
00:01:47.007 --> 00:01:52.002
such as optional and the new date/time data types.

35
00:01:52.002 --> 00:01:54.004
Within the API, you will find support

36
00:01:54.004 --> 00:01:59.002
for 28 built-in constraints seen over the following slides.

37
00:01:59.002 --> 00:02:02.006
The bolded annotations indicated built-in constraints

38
00:02:02.006 --> 00:02:05.006
that were added in Java EE 8.

39
00:02:05.006 --> 00:02:07.008
We won't discuss each of these in detail,

40
00:02:07.008 --> 00:02:10.004
but you can see there are constraints for null checks,

41
00:02:10.004 --> 00:02:14.007
Boolean validation, and numeric validation.

42
00:02:14.007 --> 00:02:17.004
The built-in annotations also contain support

43
00:02:17.004 --> 00:02:19.004
for checks on dates.

44
00:02:19.004 --> 00:02:21.009
I should also point out the Pattern annotation,

45
00:02:21.009 --> 00:02:24.003
which is very powerful because it allows

46
00:02:24.003 --> 00:02:27.003
a regular expression to be used for validation.

47
00:02:27.003 --> 00:02:30.002
So you can supply your own RegExs,

48
00:02:30.002 --> 00:02:32.004
which makes it extremely flexible

49
00:02:32.004 --> 00:02:35.006
for putting constraints on fields.

50
00:02:35.006 --> 00:02:37.008
Finally, you will notice support for e-mail,

51
00:02:37.008 --> 00:02:39.003
which is extremely important,

52
00:02:39.003 --> 00:02:42.008
and that was introduced in Java EE 8.

53
00:02:42.008 --> 00:02:45.009
Here is an example of several constraints applied

54
00:02:45.009 --> 00:02:49.001
at the field level on a simple student class.

55
00:02:49.001 --> 00:02:51.003
The example shows the ability to add

56
00:02:51.003 --> 00:02:53.006
multiple constraints on a field,

57
00:02:53.006 --> 00:02:55.005
such as the E-mail field,

58
00:02:55.005 --> 00:02:58.003
which ensures the field is not null

59
00:02:58.003 --> 00:03:01.001
and contains a valid e-mail address.

60
00:03:01.001 --> 00:03:04.000
You will also notice that some constraint annotations,

61
00:03:04.000 --> 00:03:07.008
such as the Size annotation on the Aliases field,

62
00:03:07.008 --> 00:03:10.006
require additional information to be supplied

63
00:03:10.006 --> 00:03:13.001
in the elements of the annotation.

64
00:03:13.001 --> 00:03:15.007
Additionally, we are able to apply constraints

65
00:03:15.007 --> 00:03:18.007
on the generic type arguments of the Alias list

66
00:03:18.007 --> 00:03:23.003
to ensure the elements of the list are not empty.

67
00:03:23.003 --> 00:03:26.006
The Bean Validation API also provides support

68
00:03:26.006 --> 00:03:29.002
for constraint groups, which can be used

69
00:03:29.002 --> 00:03:33.002
to only apply certain constraints on an object.

70
00:03:33.002 --> 00:03:36.001
Here we see a Constraint group that restricts

71
00:03:36.001 --> 00:03:38.009
the age of college students to 18

72
00:03:38.009 --> 00:03:41.004
and grade school students to five.

73
00:03:41.004 --> 00:03:43.007
This allows our validation to be applied

74
00:03:43.007 --> 00:03:47.000
for a particular context or situation

75
00:03:47.000 --> 00:03:49.002
within our application.

76
00:03:49.002 --> 00:03:51.008
We'll see how to apply many of these concepts

77
00:03:51.008 --> 00:03:54.000
in the upcoming lessons in the chapter.

