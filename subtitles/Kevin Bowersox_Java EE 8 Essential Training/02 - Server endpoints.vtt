WEBVTT
1
00:00:00.005 --> 00:00:02.007
- [Instructor] Java EE allows us to build

2
00:00:02.007 --> 00:00:06.001
web socket server endpoints using several annotations

3
00:00:06.001 --> 00:00:09.001
defined within the web socket API.

4
00:00:09.001 --> 00:00:11.000
Lets build our first server endpoint

5
00:00:11.000 --> 00:00:13.005
using an annotation based approach.

6
00:00:13.005 --> 00:00:17.005
To do that, we're going to work within our JSF project

7
00:00:17.005 --> 00:00:22.003
and create a new class in the com.linkedin.jsf package.

8
00:00:22.003 --> 00:00:24.000
So just go ahead, create a class

9
00:00:24.000 --> 00:00:28.008
and we're going to call this the help server socket endpoint

10
00:00:28.008 --> 00:00:30.005
and go ahead and create the class.

11
00:00:30.005 --> 00:00:33.006
And then on this class, we're going to add

12
00:00:33.006 --> 00:00:36.005
the server endpoint and you'll remember

13
00:00:36.005 --> 00:00:39.009
this is one of the web socket annotations

14
00:00:39.009 --> 00:00:45.006
that allow us to declare an endpoint for our web socket.

15
00:00:45.006 --> 00:00:48.005
Within that annotation, we need to provide

16
00:00:48.005 --> 00:00:51.005
a path for the web socket.

17
00:00:51.005 --> 00:00:56.003
In this case, it's going to be /socket/help.

18
00:00:56.003 --> 00:01:01.007
Now within this class, we're going to create three methods.

19
00:01:01.007 --> 00:01:04.004
The first is going to be onOpen

20
00:01:04.004 --> 00:01:09.003
and this method will be invoked when a session is opened.

21
00:01:09.003 --> 00:01:11.002
And then we're just going to go ahead,

22
00:01:11.002 --> 00:01:18.006
we'll copy this method and paste it three times

23
00:01:18.006 --> 00:01:21.008
and then we're going to change the name of the method

24
00:01:21.008 --> 00:01:24.008
in order to create our other methods

25
00:01:24.008 --> 00:01:28.006
which are going to listen in on the web socket life cycle.

26
00:01:28.006 --> 00:01:32.006
So an important one is the onMessage method

27
00:01:32.006 --> 00:01:35.000
and this receives two parameters.

28
00:01:35.000 --> 00:01:37.005
The first is going to be the message

29
00:01:37.005 --> 00:01:39.004
which will be of type string

30
00:01:39.004 --> 00:01:42.002
and then it also receives the session.

31
00:01:42.002 --> 00:01:45.006
And then our final method that we're going to create

32
00:01:45.006 --> 00:01:51.004
is onClose and we don't need to grab the session here.

33
00:01:51.004 --> 00:01:54.000
Okay, with these in place, lets go ahead,

34
00:01:54.000 --> 00:01:57.005
import the session type, make sure that you select

35
00:01:57.005 --> 00:02:01.005
the javax.websocket.session type

36
00:02:01.005 --> 00:02:03.005
or else you'll have some problems there.

37
00:02:03.005 --> 00:02:06.000
And now we can add those annotations

38
00:02:06.000 --> 00:02:09.004
that hook the method into the web socket life cycle

39
00:02:09.004 --> 00:02:12.001
so there's the onOpen annotation,

40
00:02:12.001 --> 00:02:15.004
here's the onMessage annotation

41
00:02:15.004 --> 00:02:18.007
and then you can probably guess, onClose.

42
00:02:18.007 --> 00:02:21.006
And now these methods will be invoked

43
00:02:21.006 --> 00:02:26.000
whenever these events occur in the life cycle

44
00:02:26.000 --> 00:02:28.002
of the web socket.

45
00:02:28.002 --> 00:02:34.007
So lets go ahead and we're going to create a new list.

46
00:02:34.007 --> 00:02:37.000
I'll make the list static of sessions

47
00:02:37.000 --> 00:02:41.007
and this list of sessions is going to hold

48
00:02:41.007 --> 00:02:44.003
all of the clients and their sessions

49
00:02:44.003 --> 00:02:47.004
connected to our server endpoint.

50
00:02:47.004 --> 00:02:49.001
And the reason we want to do this is

51
00:02:49.001 --> 00:02:52.004
so that we can broadcast out to every client

52
00:02:52.004 --> 00:02:54.006
when we do receive a message.

53
00:02:54.006 --> 00:02:58.005
So within the onOpen method, lets first

54
00:02:58.005 --> 00:03:00.001
just add some console output.

55
00:03:00.001 --> 00:03:04.005
We'll say connect it to the client and then from here,

56
00:03:04.005 --> 00:03:08.001
we're going to go ahead and actually add

57
00:03:08.001 --> 00:03:12.006
the session into our list and we can just kind of

58
00:03:12.006 --> 00:03:16.000
keep those sessions as they connect.

59
00:03:16.000 --> 00:03:19.006
Now inside of the onMessage method,

60
00:03:19.006 --> 00:03:21.008
we're going to do a couple things.

61
00:03:21.008 --> 00:03:23.008
This method is going to be invoked

62
00:03:23.008 --> 00:03:28.003
when our server endpoint receives a message from a client

63
00:03:28.003 --> 00:03:30.001
and we're just going to kind of reflect

64
00:03:30.001 --> 00:03:35.008
and broadcast that out to every client that is connected.

65
00:03:35.008 --> 00:03:39.006
So we can go ahead and use the Java eight stream

66
00:03:39.006 --> 00:03:45.001
and for every session within the list,

67
00:03:45.001 --> 00:03:47.009
we're going to send them the message

68
00:03:47.009 --> 00:03:51.006
that was received by the server endpoint.

69
00:03:51.006 --> 00:03:55.007
So we have the session here in our variable S

70
00:03:55.007 --> 00:03:58.008
and then we can use the get basic remote

71
00:03:58.008 --> 00:04:01.006
and that gets us a hook to the client

72
00:04:01.006 --> 00:04:06.000
and then we can use the send text message.

73
00:04:06.000 --> 00:04:07.001
And if you take a look,

74
00:04:07.001 --> 00:04:10.006
there's several send methods that we can use.

75
00:04:10.006 --> 00:04:13.006
In our case, we're just going to be sending some text

76
00:04:13.006 --> 00:04:15.007
and then we'll just pass in the message

77
00:04:15.007 --> 00:04:18.004
and that will be sent to all of the clients

78
00:04:18.004 --> 00:04:20.009
that we're holding in that list.

79
00:04:20.009 --> 00:04:25.005
Then we have to add some air handling on that method

80
00:04:25.005 --> 00:04:27.002
and that's everything we're going to do

81
00:04:27.002 --> 00:04:29.009
within the onMessage method.

82
00:04:29.009 --> 00:04:32.008
And then lets just give ourselves some console output here

83
00:04:32.008 --> 00:04:36.000
to say the connection was closed.

84
00:04:36.000 --> 00:04:38.002
That way we can kind of get some visibility

85
00:04:38.002 --> 00:04:42.003
into the life cycle of our web socket.

86
00:04:42.003 --> 00:04:44.007
Okay with that in place, lets go ahead,

87
00:04:44.007 --> 00:04:47.006
we're going to run the application.

88
00:04:47.006 --> 00:04:50.000
And while that starts up, I want to show you

89
00:04:50.000 --> 00:04:51.005
a tool called web socket.

90
00:04:51.005 --> 00:04:55.001
So if you've ever used postman or curl,

91
00:04:55.001 --> 00:04:57.007
it's kind of a way that we can force some traffic

92
00:04:57.007 --> 00:05:03.004
to a web socket and it's going to help us with testing.

93
00:05:03.004 --> 00:05:07.001
So lets go ahead, now I can see the application is up

94
00:05:07.001 --> 00:05:10.009
and we're going to create a connection to our web socket.

95
00:05:10.009 --> 00:05:13.005
So here's the URL to connect to it.

96
00:05:13.005 --> 00:05:15.008
You'll notice we're not using http,

97
00:05:15.008 --> 00:05:19.006
instead we're using the web socket protocol ws

98
00:05:19.006 --> 00:05:21.008
and then we just specify our domain

99
00:05:21.008 --> 00:05:24.008
followed by our context route and then here,

100
00:05:24.008 --> 00:05:29.006
you'll notice we're hitting the socket/help path.

101
00:05:29.006 --> 00:05:32.008
And if we take a look at our web socket,

102
00:05:32.008 --> 00:05:34.007
it's going to match what we provided

103
00:05:34.007 --> 00:05:36.007
in that server endpoint.

104
00:05:36.007 --> 00:05:39.007
Okay, so lets now take a peek at the console

105
00:05:39.007 --> 00:05:42.007
so we can see what's going on on the server.

106
00:05:42.007 --> 00:05:47.003
I'll clear that out and lets go ahead, we'll copy this

107
00:05:47.003 --> 00:05:50.008
and then we're going to add a new server

108
00:05:50.008 --> 00:05:53.006
and we'll make that connection.

109
00:05:53.006 --> 00:05:55.007
So there we can see we connected

110
00:05:55.007 --> 00:05:59.008
to the web socket server endpoint

111
00:05:59.008 --> 00:06:05.000
and then from here, we can send a message.

112
00:06:05.000 --> 00:06:10.001
And because this client is a client of the server endpoint,

113
00:06:10.001 --> 00:06:13.002
you'll notice the message was reflected back to it.

114
00:06:13.002 --> 00:06:17.004
So here the client sent this message, send a message

115
00:06:17.004 --> 00:06:21.007
and then the web socket server endpoint sent it back.

116
00:06:21.007 --> 00:06:25.006
So that's a look at how we can build server endpoints

117
00:06:25.006 --> 00:06:29.000
using Java EE support for web sockets.

