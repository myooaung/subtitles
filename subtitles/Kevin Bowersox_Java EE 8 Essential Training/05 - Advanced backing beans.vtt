WEBVTT
1
00:00:00.000 --> 00:00:02.004
- [Instructor] In this lesson we're going to take a look

2
00:00:02.004 --> 00:00:05.009
at some more advanced usage of data binding

3
00:00:05.009 --> 00:00:08.007
within JSF Backing Beans.

4
00:00:08.007 --> 00:00:11.006
To help us out I pre-positioned a couple things.

5
00:00:11.006 --> 00:00:14.007
First you'll notice the catalog item object.

6
00:00:14.007 --> 00:00:18.007
It's just a POJO that contains all the information

7
00:00:18.007 --> 00:00:20.006
for a catalog item.

8
00:00:20.006 --> 00:00:22.001
So you see several fields here

9
00:00:22.001 --> 00:00:24.007
and then we have a constructor that we can use

10
00:00:24.007 --> 00:00:27.009
to create an instance of a catalog item.

11
00:00:27.009 --> 00:00:31.000
Now over on the form.xhtml file

12
00:00:31.000 --> 00:00:35.000
I've basically created a form that has controls

13
00:00:35.000 --> 00:00:37.004
which correspond with each of the fields

14
00:00:37.004 --> 00:00:39.007
in the catalog item POJO.

15
00:00:39.007 --> 00:00:42.000
These elements were created

16
00:00:42.000 --> 00:00:46.007
using the HTML tag library within JSF.

17
00:00:46.007 --> 00:00:49.002
So what we can do to get started is navigate

18
00:00:49.002 --> 00:00:53.001
over to our catalog item form Backing Bean.

19
00:00:53.001 --> 00:00:56.001
And what we need to do is switch that Bean over

20
00:00:56.001 --> 00:00:58.001
to be session scoped.

21
00:00:58.001 --> 00:01:00.008
And this will cause information to persist

22
00:01:00.008 --> 00:01:06.004
across different HTTP requests for particular users.

23
00:01:06.004 --> 00:01:08.002
Now anytime we use session scope

24
00:01:08.002 --> 00:01:11.005
we need to make sure our Bean implements

25
00:01:11.005 --> 00:01:15.004
the Serializable interface, so let's go ahead and do that.

26
00:01:15.004 --> 00:01:18.001
And then I'm going to remove all of the code

27
00:01:18.001 --> 00:01:19.008
within this class.

28
00:01:19.008 --> 00:01:23.009
Because we're going to create an instance of a catalog item.

29
00:01:23.009 --> 00:01:28.000
I'll name that instance, item.

30
00:01:28.000 --> 00:01:30.006
And we'll use the new operator

31
00:01:30.006 --> 00:01:34.004
and the constructor to create it.

32
00:01:34.004 --> 00:01:41.001
And then we're going to create a list of catalog items.

33
00:01:41.001 --> 00:01:44.009
And that list is going to be instantiated

34
00:01:44.009 --> 00:01:47.002
using an array list.

35
00:01:47.002 --> 00:01:50.000
And basically what we have here

36
00:01:50.000 --> 00:01:54.001
is a catalog item that we're going to bind the form to

37
00:01:54.001 --> 00:01:58.000
and then our catalog, which will contain all the items,

38
00:01:58.000 --> 00:02:00.005
so when we do create a new item with the form

39
00:02:00.005 --> 00:02:03.006
we're going to add it to this list.

40
00:02:03.006 --> 00:02:08.005
Let me create accessors for both of these.

41
00:02:08.005 --> 00:02:12.004
And then we'll go ahead and save that Bean.

42
00:02:12.004 --> 00:02:15.002
And then navigate over to our form.

43
00:02:15.002 --> 00:02:20.002
So we have the catalog item object on our Bean,

44
00:02:20.002 --> 00:02:23.007
we can now go ahead and bind to it.

45
00:02:23.007 --> 00:02:26.004
We'll get some help here from the IDE,

46
00:02:26.004 --> 00:02:31.000
you'll notice we can traverse into the item field

47
00:02:31.000 --> 00:02:37.006
on that Bean and select the name field within the item.

48
00:02:37.006 --> 00:02:40.000
I'm just going to copy that and then we'll start

49
00:02:40.000 --> 00:02:42.003
binding all of our other fields.

50
00:02:42.003 --> 00:02:45.006
So we can bind the manufacturer.

51
00:02:45.006 --> 00:02:48.002
We have a new field available date.

52
00:02:48.002 --> 00:02:52.002
So if we take a quick look over at our catalog item,

53
00:02:52.002 --> 00:02:56.003
you'll see this is a type local date from Java 8.

54
00:02:56.003 --> 00:02:58.005
That's going to come into play here in a little bit.

55
00:02:58.005 --> 00:03:03.004
But first we'll just do the binding.

56
00:03:03.004 --> 00:03:07.008
And then we'll move on and bind our text area

57
00:03:07.008 --> 00:03:12.000
for our description.

58
00:03:12.000 --> 00:03:16.007
Okay, so now we have those bindings in place,

59
00:03:16.007 --> 00:03:21.003
let's talk about some other things that we need to consider.

60
00:03:21.003 --> 00:03:26.009
So first you'll notice that we have the name field,

61
00:03:26.009 --> 00:03:29.003
and it's really important that we get the name right

62
00:03:29.003 --> 00:03:33.003
because this is what a customer is going to see.

63
00:03:33.003 --> 00:03:39.005
So to help us with that we can use the validateRegex tag

64
00:03:39.005 --> 00:03:42.000
within the Facelets tag library.

65
00:03:42.000 --> 00:03:45.002
And this is really powerful because it allows us

66
00:03:45.002 --> 00:03:48.005
to specify a Regex.

67
00:03:48.005 --> 00:03:52.005
And that Regex will be used to validate input

68
00:03:52.005 --> 00:03:54.002
provided by the end user.

69
00:03:54.002 --> 00:03:57.003
So I'm just going to make an alphanumeric Regex

70
00:03:57.003 --> 00:03:59.007
that allows spaces.

71
00:03:59.007 --> 00:04:01.003
And then the next thing we're going to do,

72
00:04:01.003 --> 00:04:05.000
you'll notice there's an ID on this input text.

73
00:04:05.000 --> 00:04:09.000
We can grab that ID and leverage another tag

74
00:04:09.000 --> 00:04:13.002
within the HTML tag library, and that tag is message.

75
00:04:13.002 --> 00:04:16.005
And if we define the for attribute

76
00:04:16.005 --> 00:04:21.001
and place that ID within the value for that for attribute,

77
00:04:21.001 --> 00:04:24.004
what will happen is any validation issues

78
00:04:24.004 --> 00:04:29.009
will be displayed within this message element

79
00:04:29.009 --> 00:04:31.008
for the product name.

80
00:04:31.008 --> 00:04:34.005
Now something else we have to consider is that

81
00:04:34.005 --> 00:04:38.001
for our available date control,

82
00:04:38.001 --> 00:04:41.004
our user's just going to enter a string.

83
00:04:41.004 --> 00:04:44.002
How does that string get converted over

84
00:04:44.002 --> 00:04:46.002
to an actual date?

85
00:04:46.002 --> 00:04:47.003
Well you probably guessed,

86
00:04:47.003 --> 00:04:52.004
within JSF there is support for that conversion,

87
00:04:52.004 --> 00:04:55.004
so we an look at the Facelets tag library

88
00:04:55.004 --> 00:04:58.006
and there's the ConvertDateTime tag.

89
00:04:58.006 --> 00:05:01.005
And this allows us to specify the type

90
00:05:01.005 --> 00:05:06.002
we would like to convert to, as well as a pattern.

91
00:05:06.002 --> 00:05:08.001
So in this case we're going to have

92
00:05:08.001 --> 00:05:11.005
the user enter the date in a two digit date,

93
00:05:11.005 --> 00:05:15.001
two digit month, and a four digit year format.

94
00:05:15.001 --> 00:05:16.002
Okay.

95
00:05:16.002 --> 00:05:22.005
So we have our form controls bound to the catalog item

96
00:05:22.005 --> 00:05:24.001
within our Backing Bean.

97
00:05:24.001 --> 00:05:27.002
Let's turn our attention to the command button now.

98
00:05:27.002 --> 00:05:30.006
So the command button, we need to specify

99
00:05:30.006 --> 00:05:32.007
the action attribute.

100
00:05:32.007 --> 00:05:35.008
Instead of just binding this attribute

101
00:05:35.008 --> 00:05:39.001
to a static Facelet it will navigate to next,

102
00:05:39.001 --> 00:05:42.002
we're going to go back to our Backing Bean

103
00:05:42.002 --> 00:05:45.001
and define a new method.

104
00:05:45.001 --> 00:05:49.000
And this method's going to return a string.

105
00:05:49.000 --> 00:05:51.006
I'll name the method, addItem.

106
00:05:51.006 --> 00:05:54.008
And then we can return a string, it will be list,

107
00:05:54.008 --> 00:05:57.001
and that's going to be the name of the Facelet

108
00:05:57.001 --> 00:06:03.009
that we'll navigate to once this method's logic is executed.

109
00:06:03.009 --> 00:06:06.001
And then we're going to add a parameter here.

110
00:06:06.001 --> 00:06:11.000
It's faces-redirect, and we're going to set that to true.

111
00:06:11.000 --> 00:06:14.000
And that will cause the navigation to be performed

112
00:06:14.000 --> 00:06:16.005
via a redirect.

113
00:06:16.005 --> 00:06:22.009
Now we're just going to start to create our catalog item.

114
00:06:22.009 --> 00:06:26.004
To do that I'm going to create an ID,

115
00:06:26.004 --> 00:06:31.002
basically by incrementing the size of the collection by one.

116
00:06:31.002 --> 00:06:36.006
And then we can grab our collection, invoke its add method.

117
00:06:36.006 --> 00:06:40.003
And then use the catalog item constructor

118
00:06:40.003 --> 00:06:43.006
to create our new catalog item.

119
00:06:43.006 --> 00:06:45.005
Now remember all the form controls

120
00:06:45.005 --> 00:06:47.006
are bound to the catalog item,

121
00:06:47.006 --> 00:06:51.000
so we can just start accessing those fields

122
00:06:51.000 --> 00:06:53.008
in order to supply the different arguments

123
00:06:53.008 --> 00:06:58.006
to our constructor.

124
00:06:58.006 --> 00:07:00.008
There we get the description.

125
00:07:00.008 --> 00:07:04.003
And then finally we'll get the available date

126
00:07:04.003 --> 00:07:06.001
format or class.

127
00:07:06.001 --> 00:07:10.006
And then to help us out I'm going to stream

128
00:07:10.006 --> 00:07:14.008
the collection using the forEach method.

129
00:07:14.008 --> 00:07:19.004
And for each item we're just going to print out

130
00:07:19.004 --> 00:07:23.004
the item after we invoke the toString method.

131
00:07:23.004 --> 00:07:26.009
So we can kind of see what's in that collection.

132
00:07:26.009 --> 00:07:30.000
Okay, so we're going to save everything.

133
00:07:30.000 --> 00:07:32.004
And then one final thing we'll need to do

134
00:07:32.004 --> 00:07:36.003
if we navigate over to our list,

135
00:07:36.003 --> 00:07:40.003
you'll see that our binding here is no longer valid,

136
00:07:40.003 --> 00:07:45.007
so let's just point to the name field on the item

137
00:07:45.007 --> 00:07:48.006
which is on our Backing Bean.

138
00:07:48.006 --> 00:07:51.000
And then we'll go back to our form,

139
00:07:51.000 --> 00:07:57.009
and we'll bind to our action on the Bean.

140
00:07:57.009 --> 00:08:00.006
Okay, so we should be good to go.

141
00:08:00.006 --> 00:08:04.009
I'm going to then start the application.

142
00:08:04.009 --> 00:08:08.001
Let's first make sure our servers are ready.

143
00:08:08.001 --> 00:08:14.007
Yep, it's stopped.

144
00:08:14.007 --> 00:08:20.004
Now we can go to run as, run on server.

145
00:08:20.004 --> 00:08:23.006
Okay here we see the application starting.

146
00:08:23.006 --> 00:08:26.005
And then I'm just going to display our console.

147
00:08:26.005 --> 00:08:28.006
I'll actually clear it out and maximize it,

148
00:08:28.006 --> 00:08:31.006
that way we can see some of this output.

149
00:08:31.006 --> 00:08:33.001
So there's our form.

150
00:08:33.001 --> 00:08:39.008
Let's first just enter an invalid value.

151
00:08:39.008 --> 00:08:44.003
And you'll notice that our validation message displays.

152
00:08:44.003 --> 00:08:49.002
And now let's go ahead, we'll enter a real value, gloves.

153
00:08:49.002 --> 00:08:52.008
We'll say awesome gloves.

154
00:08:52.008 --> 00:08:55.007
And then we can leave our date.

155
00:08:55.007 --> 00:09:00.006
And then we can say these are awesome gloves.

156
00:09:00.006 --> 00:09:03.002
We'll create this new item and there you can see

157
00:09:03.002 --> 00:09:07.002
we navigate over to our list page, we display the name.

158
00:09:07.002 --> 00:09:09.009
And if we take a look within our console output,

159
00:09:09.009 --> 00:09:14.004
there you can see the output from our Backing Bean

160
00:09:14.004 --> 00:09:16.005
when we invoke that method.

161
00:09:16.005 --> 00:09:20.007
So looking at advanced use case here with Backing Beans

162
00:09:20.007 --> 00:09:22.005
should give you a good overview

163
00:09:22.005 --> 00:09:26.000
of how to construct those for your JSF applications.

