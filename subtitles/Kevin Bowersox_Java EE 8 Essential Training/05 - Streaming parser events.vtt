WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] The JSON Processing API

2
00:00:02.004 --> 00:00:05.009
features a parser as part of the Streaming API.

3
00:00:05.009 --> 00:00:09.004
The parser can be used to efficiently read JSON objects

4
00:00:09.004 --> 00:00:10.009
using a poll model.

5
00:00:10.009 --> 00:00:12.004
Let's take a look.

6
00:00:12.004 --> 00:00:14.004
We're going to be working with the JsonParser

7
00:00:14.004 --> 00:00:17.000
inside of our JmsConsumer.

8
00:00:17.000 --> 00:00:20.005
We still have some JAXB related code within the consumer,

9
00:00:20.005 --> 00:00:23.005
so I'm going to go ahead and clean up that code

10
00:00:23.005 --> 00:00:27.005
so we can focus on the JsonParser.

11
00:00:27.005 --> 00:00:29.001
So once we've cleaned things up,

12
00:00:29.001 --> 00:00:31.006
we can go ahead and create a parser,

13
00:00:31.006 --> 00:00:35.005
and we're going to do so within a try block.

14
00:00:35.005 --> 00:00:39.008
The JsonParser implements the AutoCloseable interface,

15
00:00:39.008 --> 00:00:43.003
so that once we're finished with the parser,

16
00:00:43.003 --> 00:00:46.009
we can be sure that the resources will be cleaned up.

17
00:00:46.009 --> 00:00:50.006
So once we create a JsonParser object,

18
00:00:50.006 --> 00:00:54.001
all we need to do is use the Json object

19
00:00:54.001 --> 00:00:58.004
and invoke its createParser method.

20
00:00:58.004 --> 00:01:02.004
The JsonParser method will accept a reader.

21
00:01:02.004 --> 00:01:05.007
So we're going to go ahead and use a StringReader,

22
00:01:05.007 --> 00:01:09.001
and we'll pass in the json

23
00:01:09.001 --> 00:01:14.003
that we receive from the Jms message.

24
00:01:14.003 --> 00:01:17.000
From here we're just going to iterate

25
00:01:17.000 --> 00:01:22.007
through the different events that the parser contains

26
00:01:22.007 --> 00:01:26.002
as it processes through the JSON document,

27
00:01:26.002 --> 00:01:29.008
and we can poll each of the events from the parser

28
00:01:29.008 --> 00:01:33.001
using an iterator-based approach.

29
00:01:33.001 --> 00:01:36.008
So you'll notice the parser has the hasNext method

30
00:01:36.008 --> 00:01:39.004
as well as the next method.

31
00:01:39.004 --> 00:01:41.008
The next method is going to return an event,

32
00:01:41.008 --> 00:01:44.007
and that's going to give us an indicator

33
00:01:44.007 --> 00:01:48.006
of what type of structure we are looking at

34
00:01:48.006 --> 00:01:51.006
within the JSON document.

35
00:01:51.006 --> 00:01:53.007
When importing the event type,

36
00:01:53.007 --> 00:01:54.009
be sure to choose the

37
00:01:54.009 --> 00:01:59.005
javax.json.stream.JsonParser.Event type.

38
00:01:59.005 --> 00:02:02.005
That way we don't have any compilation issues.

39
00:02:02.005 --> 00:02:03.008
Once we have the event,

40
00:02:03.008 --> 00:02:07.000
we can go ahead and print it out to the console.

41
00:02:07.000 --> 00:02:11.005
So let's start our application at this point.

42
00:02:11.005 --> 00:02:14.000
And I'm going to go ahead and clear the console,

43
00:02:14.000 --> 00:02:16.004
and then we'll run our PowerShell command

44
00:02:16.004 --> 00:02:18.009
which will send a message to the API,

45
00:02:18.009 --> 00:02:20.008
and then we can take a look at the output

46
00:02:20.008 --> 00:02:22.004
within the console.

47
00:02:22.004 --> 00:02:26.000
You'll notice that we get all of the events found

48
00:02:26.000 --> 00:02:29.009
by the parser within our small JSON document.

49
00:02:29.009 --> 00:02:33.001
It is quite verbose considering we only have

50
00:02:33.001 --> 00:02:35.009
a small piece of JSON.

51
00:02:35.009 --> 00:02:37.008
You'll notice the events include

52
00:02:37.008 --> 00:02:40.009
the start of arrays, the start of objects,

53
00:02:40.009 --> 00:02:44.004
as well as key names and value strings.

54
00:02:44.004 --> 00:02:47.004
If we match this up with our JSON document,

55
00:02:47.004 --> 00:02:51.005
you'd be able to see the different sections of the document

56
00:02:51.005 --> 00:02:54.009
and how they relate to these events.

57
00:02:54.009 --> 00:02:59.001
These are useful when parsing through JSON documents

58
00:02:59.001 --> 00:03:01.000
using the JsonParser.

