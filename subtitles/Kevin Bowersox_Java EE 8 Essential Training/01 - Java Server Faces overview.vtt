WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Instructor] Java Server Faces is a

2
00:00:02.003 --> 00:00:04.008
java based web application framework

3
00:00:04.008 --> 00:00:09.001
that simplifies the development of web based applications.

4
00:00:09.001 --> 00:00:11.003
JSF provides a more cohesive model

5
00:00:11.003 --> 00:00:15.000
than servlets and JSP for building web apps.

6
00:00:15.000 --> 00:00:19.000
It's model includes a server side UI component framework,

7
00:00:19.000 --> 00:00:23.005
templating support and the ability to bind UI components

8
00:00:23.005 --> 00:00:27.002
to java pojos known as backing beans.

9
00:00:27.002 --> 00:00:29.002
JFS has a pretty long history,

10
00:00:29.002 --> 00:00:32.007
so over time different terminology has come and gone.

11
00:00:32.007 --> 00:00:35.004
Let's set a baseline before our overview

12
00:00:35.004 --> 00:00:37.008
of the JSF architecture.

13
00:00:37.008 --> 00:00:41.003
Within JSF, we find a face's servlet,

14
00:00:41.003 --> 00:00:44.000
this servlet is responsible for orchestrating

15
00:00:44.000 --> 00:00:48.000
the different events within the JSF life cycle.

16
00:00:48.000 --> 00:00:51.009
Another key component is the JSF page, or view,

17
00:00:51.009 --> 00:00:54.000
known as a facelet.

18
00:00:54.000 --> 00:00:57.000
Facelets contain a server side component tree

19
00:00:57.000 --> 00:01:01.006
and are constructed using a mixture of XHTML,

20
00:01:01.006 --> 00:01:05.003
tag libraries, expressions, and templates.

21
00:01:05.003 --> 00:01:07.000
The components within a facelet

22
00:01:07.000 --> 00:01:09.003
represent server side representations

23
00:01:09.003 --> 00:01:11.005
of UI components that will be rendered

24
00:01:11.005 --> 00:01:14.006
as HTML on the browser.

25
00:01:14.006 --> 00:01:16.003
The components within the facelet

26
00:01:16.003 --> 00:01:20.005
are bound to backing beans which are pojos managed as beans

27
00:01:20.005 --> 00:01:24.009
that contain fields and methods to support the UI.

28
00:01:24.009 --> 00:01:27.004
Now let's look at the architecture.

29
00:01:27.004 --> 00:01:31.000
When a browser passes HTTP request to the face's servlet,

30
00:01:31.000 --> 00:01:34.000
it will build a component tree for the facelet

31
00:01:34.000 --> 00:01:36.002
identified by the URL.

32
00:01:36.002 --> 00:01:38.004
Then components in the component tree

33
00:01:38.004 --> 00:01:40.003
will have their values updated

34
00:01:40.003 --> 00:01:43.003
with corresponding information found in the request

35
00:01:43.003 --> 00:01:46.000
and the values will be validated.

36
00:01:46.000 --> 00:01:48.005
After validation, component values

37
00:01:48.005 --> 00:01:52.003
will update fields in the manage bean they are bound to

38
00:01:52.003 --> 00:01:54.003
with their values.

39
00:01:54.003 --> 00:01:58.005
Next, the face's servlet will invoke any action methods

40
00:01:58.005 --> 00:02:00.004
on the managed bean,

41
00:02:00.004 --> 00:02:03.007
the action methods will ultimately return a string

42
00:02:03.007 --> 00:02:07.001
which indicates the next facelet to render.

43
00:02:07.001 --> 00:02:10.009
The facelet bean returned will have its component tree

44
00:02:10.009 --> 00:02:14.006
updated with values from any backing bean it references

45
00:02:14.006 --> 00:02:18.004
and then its component tree will be written as HTML

46
00:02:18.004 --> 00:02:20.006
returned to the browser.

47
00:02:20.006 --> 00:02:25.008
So, just a recap, JSF is a java EE web application framework

48
00:02:25.008 --> 00:02:28.007
that is based upon MVC principles,

49
00:02:28.007 --> 00:02:31.003
within the technology we find a life cycle

50
00:02:31.003 --> 00:02:34.002
that orchestrates the request processing

51
00:02:34.002 --> 00:02:36.006
which involves a sequence of steps

52
00:02:36.006 --> 00:02:39.002
to bind server facelet components

53
00:02:39.002 --> 00:02:41.009
to pojo based backing beans.

54
00:02:41.009 --> 00:02:45.004
Within JSF, we'll also find a wide variety

55
00:02:45.004 --> 00:02:49.009
of component libraries such as prime faces and omni faces

56
00:02:49.009 --> 00:02:53.001
that provide us with out of the box components

57
00:02:53.001 --> 00:02:57.002
that can change the look and feel of our page.

58
00:02:57.002 --> 00:02:58.009
When creating a facelet's page,

59
00:02:58.009 --> 00:03:01.002
there are several tag libraries available

60
00:03:01.002 --> 00:03:04.004
out of the box for use with JSF applications.

61
00:03:04.004 --> 00:03:06.002
Here you see them all listed,

62
00:03:06.002 --> 00:03:08.003
I'm just going to highlight a few.

63
00:03:08.003 --> 00:03:12.000
The facelet's tag library is primarily for templating

64
00:03:12.000 --> 00:03:14.004
that creates the structure of a page.

65
00:03:14.004 --> 00:03:19.000
For instance, embedding some XHTML into a parent template,

66
00:03:19.000 --> 00:03:22.004
the HTML tag library provides components

67
00:03:22.004 --> 00:03:25.009
that correspond with typical HTML elements,

68
00:03:25.009 --> 00:03:30.005
however, these tags cause server side counter parts

69
00:03:30.005 --> 00:03:32.005
to be created.

70
00:03:32.005 --> 00:03:34.007
The pass through libraries were introduced

71
00:03:34.007 --> 00:03:38.007
to support HTML5, allowing certain attributes

72
00:03:38.007 --> 00:03:41.008
or elements not present in JSF tags

73
00:03:41.008 --> 00:03:44.006
to be passed to the browser.

74
00:03:44.006 --> 00:03:47.001
So here's a small example involving a facelet

75
00:03:47.001 --> 00:03:50.000
and a backing bean that ties everything together.

76
00:03:50.000 --> 00:03:52.009
The facelet leverages JSF tag libraries

77
00:03:52.009 --> 00:03:54.003
to build a simple form

78
00:03:54.003 --> 00:03:57.009
that is bound to fields and methods on the backing bean

79
00:03:57.009 --> 00:03:59.009
using expression language.

80
00:03:59.009 --> 00:04:02.009
You can see this indicated by the color coding.

81
00:04:02.009 --> 00:04:04.009
When the command button is clicked,

82
00:04:04.009 --> 00:04:07.005
the name string on the backing bean

83
00:04:07.005 --> 00:04:10.000
will be updated and the greet method

84
00:04:10.000 --> 00:04:12.008
on the backing bean will be invoked.

85
00:04:12.008 --> 00:04:15.009
The greet method returns a string, greet,

86
00:04:15.009 --> 00:04:20.005
which indicates the next facelet to render to the browser.

87
00:04:20.005 --> 00:04:23.002
So that's a high level look at JSF.

88
00:04:23.002 --> 00:04:27.000
We'll dive much deeper, during our hands on lessons.

