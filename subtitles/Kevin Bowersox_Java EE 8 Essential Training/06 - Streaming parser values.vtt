WEBVTT
1
00:00:00.005 --> 00:00:01.009
- [Instructor] In this lesson, we'll see

2
00:00:01.009 --> 00:00:05.009
how to use the JSON parser in order to retrieve

3
00:00:05.009 --> 00:00:08.004
the values for the different properties

4
00:00:08.004 --> 00:00:10.002
in our JSON document.

5
00:00:10.002 --> 00:00:12.001
So, right now we're iterating through

6
00:00:12.001 --> 00:00:16.007
all of the events within our JSON document.

7
00:00:16.007 --> 00:00:19.008
Not all of them are extremely important to us.

8
00:00:19.008 --> 00:00:23.001
So, we're going to go ahead and build a switch statement,

9
00:00:23.001 --> 00:00:27.006
that is going to inspect each event,

10
00:00:27.006 --> 00:00:32.001
and then we can handle those events which are important.

11
00:00:32.001 --> 00:00:36.001
So we can take a look at the key name event

12
00:00:36.001 --> 00:00:40.005
and this is going to be the name of a property.

13
00:00:40.005 --> 00:00:44.000
Once we see that we have a property or a key name

14
00:00:44.000 --> 00:00:49.008
within our JSON parser, we can go ahead and use the parser

15
00:00:49.008 --> 00:00:56.003
to get the particular value for that key name.

16
00:00:56.003 --> 00:00:58.009
And we just use the get string method.

17
00:00:58.009 --> 00:01:04.002
It will type the result of the parser.

18
00:01:04.002 --> 00:01:07.002
And then we can go look for other cases.

19
00:01:07.002 --> 00:01:10.009
So we can also have a value string.

20
00:01:10.009 --> 00:01:13.006
So this is going to be a property value

21
00:01:13.006 --> 00:01:19.002
within a JSON document and we can also send

22
00:01:19.002 --> 00:01:24.000
these to the console, by using the get string method

23
00:01:24.000 --> 00:01:26.008
and then you'll notice that the parser

24
00:01:26.008 --> 00:01:31.002
distinguishes between strings and numbers.

25
00:01:31.002 --> 00:01:34.002
So in the case where we have a number,

26
00:01:34.002 --> 00:01:39.000
we can use the parser's strongly typed methods

27
00:01:39.000 --> 00:01:41.008
that will return either a long or an int.

28
00:01:41.008 --> 00:01:44.002
Let's go ahead, return a long.

29
00:01:44.002 --> 00:01:45.006
And then we can go ahead,

30
00:01:45.006 --> 00:01:47.009
we'll add the break statement here.

31
00:01:47.009 --> 00:01:50.007
We'll also add one for a string.

32
00:01:50.007 --> 00:01:54.000
And then we'll add the default clause

33
00:01:54.000 --> 00:01:56.000
to our switch.

34
00:01:56.000 --> 00:01:58.006
And we'll just break if it's none of the items

35
00:01:58.006 --> 00:02:00.003
that we've listed above.

36
00:02:00.003 --> 00:02:03.001
Okay, so this is going to give us some insights

37
00:02:03.001 --> 00:02:06.005
into the content of that JSON document.

38
00:02:06.005 --> 00:02:08.007
Let's go ahead, we'll launch our application.

39
00:02:08.007 --> 00:02:12.007
We'll clear our console.

40
00:02:12.007 --> 00:02:14.003
And then we're going to go ahead

41
00:02:14.003 --> 00:02:16.008
and run our PowerShell command.

42
00:02:16.008 --> 00:02:21.001
And we can see that our API did receive

43
00:02:21.001 --> 00:02:25.009
the HTTP request and that caused our message

44
00:02:25.009 --> 00:02:28.001
to be sent to the JMS consumer.

45
00:02:28.001 --> 00:02:31.000
And now in the output, instead of seeing

46
00:02:31.000 --> 00:02:33.008
the event names, we're seeing the names

47
00:02:33.008 --> 00:02:38.004
of the JSON properties and their values.

48
00:02:38.004 --> 00:02:40.009
Okay, so that was a look at how we can use

49
00:02:40.009 --> 00:02:44.007
the JSON P streaming API's parser

50
00:02:44.007 --> 00:02:47.007
in order to pull out property names and values

51
00:02:47.007 --> 00:02:49.000
from a JSON document.

