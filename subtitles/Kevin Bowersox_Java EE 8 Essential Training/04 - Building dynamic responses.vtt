WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Instructor] When processing requests,

2
00:00:02.002 --> 00:00:05.002
servlets respond with dynamic content,

3
00:00:05.002 --> 00:00:07.009
meaning the response content may be different

4
00:00:07.009 --> 00:00:09.007
for each request.

5
00:00:09.007 --> 00:00:12.003
This contrasts with pure web servers

6
00:00:12.003 --> 00:00:16.000
that host static content that never changes.

7
00:00:16.000 --> 00:00:20.002
Let's create some dynamic content from our catalog servlet

8
00:00:20.002 --> 00:00:22.004
within this lesson.

9
00:00:22.004 --> 00:00:25.005
To help us out, I've positioned three files

10
00:00:25.005 --> 00:00:27.001
within our project.

11
00:00:27.001 --> 00:00:29.003
I'm going to have to do this throughout the course

12
00:00:29.003 --> 00:00:32.004
in order to keep us focused on Java EE.

13
00:00:32.004 --> 00:00:34.006
When I do, I'll be sure to let you know

14
00:00:34.006 --> 00:00:38.002
and you can find the files within the exercise files

15
00:00:38.002 --> 00:00:39.008
for the lesson.

16
00:00:39.008 --> 00:00:43.009
The first file I added was a catalog class

17
00:00:43.009 --> 00:00:47.003
and this class contains a map which basically holds

18
00:00:47.003 --> 00:00:51.004
the entire product catalog for the H+ sports store.

19
00:00:51.004 --> 00:00:56.007
You'll notice that the maps values are of type catalog item

20
00:00:56.007 --> 00:00:59.009
which is the next class I added.

21
00:00:59.009 --> 00:01:03.009
This is a simple POJO that represents an item in the catalog

22
00:01:03.009 --> 00:01:05.003
and it has three fields.

23
00:01:05.003 --> 00:01:08.006
Name, manufacturer and SKU.

24
00:01:08.006 --> 00:01:13.001
And then the final file I added was a form.htl file

25
00:01:13.001 --> 00:01:15.009
and within this HTML file,

26
00:01:15.009 --> 00:01:18.004
you will find a form that can be used

27
00:01:18.004 --> 00:01:21.003
to create a new catalog item

28
00:01:21.003 --> 00:01:26.006
and have that item be placed into the product catalog.

29
00:01:26.006 --> 00:01:29.003
So, we're going to start our work here.

30
00:01:29.003 --> 00:01:33.005
First, you'll notice that the form contains a control

31
00:01:33.005 --> 00:01:37.004
for each of the fields on the catalog item.

32
00:01:37.004 --> 00:01:41.008
So, we have the product name, the manufacturer and the SKU.

33
00:01:41.008 --> 00:01:45.005
Now, we need to post this form and have the request

34
00:01:45.005 --> 00:01:47.005
go to our servlet.

35
00:01:47.005 --> 00:01:51.001
So, to do that, we need to add the action attribute

36
00:01:51.001 --> 00:01:56.000
to the form and then we specify the path to the servlet

37
00:01:56.000 --> 00:02:00.002
which is the name of the servlet, catalog servlet.

38
00:02:00.002 --> 00:02:04.002
So, this catalog servlet string is going to be added

39
00:02:04.002 --> 00:02:06.005
to the end of the request URL

40
00:02:06.005 --> 00:02:10.000
and because we are using a post method,

41
00:02:10.000 --> 00:02:14.008
that is going to map to our servlet.

42
00:02:14.008 --> 00:02:19.008
So, our web servlet annotation is going to match the path

43
00:02:19.008 --> 00:02:23.002
in the URL which will cause the catalog servlet

44
00:02:23.002 --> 00:02:25.000
to process the request.

45
00:02:25.000 --> 00:02:29.001
And then because we're performing a post, our do post method

46
00:02:29.001 --> 00:02:30.006
will be invoked.

47
00:02:30.006 --> 00:02:33.009
So, let's go ahead and we're going to add some logic

48
00:02:33.009 --> 00:02:37.009
within our do post method.

49
00:02:37.009 --> 00:02:40.007
The first thing we're going to do is pull the name

50
00:02:40.007 --> 00:02:46.008
from the request and assign it to a string named, name.

51
00:02:46.008 --> 00:02:48.004
We're going to do the same thing

52
00:02:48.004 --> 00:02:53.007
for the manufacturer field as well.

53
00:02:53.007 --> 00:02:58.004
So, we'll pull the manufacturer parameter from the request

54
00:02:58.004 --> 00:03:03.006
and then assign it to a string named manufacturer

55
00:03:03.006 --> 00:03:10.009
and then we can do the same for the SKU.

56
00:03:10.009 --> 00:03:14.000
Okay, so we have collected the information

57
00:03:14.000 --> 00:03:16.004
from the HTTP request.

58
00:03:16.004 --> 00:03:19.008
Now, let's go ahead and use our catalog

59
00:03:19.008 --> 00:03:21.009
to add an item to the catalog.

60
00:03:21.009 --> 00:03:26.003
So, we're going to use the new operator and the constructor

61
00:03:26.003 --> 00:03:30.001
and then we simply pass in the fields

62
00:03:30.001 --> 00:03:34.005
that we assigned from the request.

63
00:03:34.005 --> 00:03:37.009
Okay, so now we've added a catalog item

64
00:03:37.009 --> 00:03:40.006
and it's time to start generating the response

65
00:03:40.006 --> 00:03:42.003
back to the browser.

66
00:03:42.003 --> 00:03:44.005
So, we're going to use our response

67
00:03:44.005 --> 00:03:47.003
and the first thing we're going to do is set a header

68
00:03:47.003 --> 00:03:49.001
on the response.

69
00:03:49.001 --> 00:03:53.000
So, we're going to name the header, some header

70
00:03:53.000 --> 00:03:55.008
and then we're going to give it a really generic value

71
00:03:55.008 --> 00:03:59.001
of some header value.

72
00:03:59.001 --> 00:04:02.009
And then the next thing we're going to do is add a cookie

73
00:04:02.009 --> 00:04:05.008
to the response

74
00:04:05.008 --> 00:04:08.006
and it's kind of the same way, we supply the name

75
00:04:08.006 --> 00:04:11.003
which I'm going to name, some cookie

76
00:04:11.003 --> 00:04:13.009
and then we provide the value

77
00:04:13.009 --> 00:04:17.003
which will be some cookie value.

78
00:04:17.003 --> 00:04:21.003
Okay, now that we've added a cookie and a header

79
00:04:21.003 --> 00:04:25.006
to our response, let's go ahead and start generating

80
00:04:25.006 --> 00:04:28.007
the actual response body.

81
00:04:28.007 --> 00:04:31.004
So, we're going to use a printwriter

82
00:04:31.004 --> 00:04:36.003
to send the content out in the response body

83
00:04:36.003 --> 00:04:38.003
and we can grab the printwriter

84
00:04:38.003 --> 00:04:42.001
by using the getwriter method on the response.

85
00:04:42.001 --> 00:04:46.002
And then from here, we start to build out our markup

86
00:04:46.002 --> 00:04:50.000
and we can send that markup out to the browser

87
00:04:50.000 --> 00:04:53.003
using the println method.

88
00:04:53.003 --> 00:04:58.006
And now, we need to basically write the mark-up within Java.

89
00:04:58.006 --> 00:05:01.005
So, we'll open our HTML tag

90
00:05:01.005 --> 00:05:04.001
then we're going to close our HTML tag

91
00:05:04.001 --> 00:05:08.004
then we're going to add the head tag

92
00:05:08.004 --> 00:05:11.003
and we can go ahead and close the head tag.

93
00:05:11.003 --> 00:05:16.000
The next tag we'll have to add will be the body tag

94
00:05:16.000 --> 00:05:19.001
and then we're going to close the body tag.

95
00:05:19.001 --> 00:05:22.006
Inside of the body tag, we're going to go ahead

96
00:05:22.006 --> 00:05:29.002
and create a table so we'll add that tag and close it.

97
00:05:29.002 --> 00:05:34.003
And then within our table, we're going to add a row

98
00:05:34.003 --> 00:05:37.005
for each of our inventory items.

99
00:05:37.005 --> 00:05:40.003
So, I'm going to go ahead and iterate through

100
00:05:40.003 --> 00:05:45.006
the items within our catalog

101
00:05:45.006 --> 00:05:48.007
and then for each item in the catalog,

102
00:05:48.007 --> 00:05:53.004
we're going to generate a table row.

103
00:05:53.004 --> 00:05:57.003
So, let's go ahead and create our table row

104
00:05:57.003 --> 00:06:01.004
and then we'll close that tag out right away.

105
00:06:01.004 --> 00:06:05.006
And then from here, we're going to create a table cell

106
00:06:05.006 --> 00:06:09.002
and we'll go ahead and close that tag

107
00:06:09.002 --> 00:06:13.002
and then we're going to use the print method

108
00:06:13.002 --> 00:06:17.003
in order to write the name of the item

109
00:06:17.003 --> 00:06:20.007
in our table cell.

110
00:06:20.007 --> 00:06:22.000
There we go.

111
00:06:22.000 --> 00:06:24.001
Okay, so with that in place,

112
00:06:24.001 --> 00:06:28.002
we are generating dynamic content that's going to

113
00:06:28.002 --> 00:06:32.008
be sent out from the servlet in the body of the response

114
00:06:32.008 --> 00:06:35.007
using the writer on the response.

115
00:06:35.007 --> 00:06:40.006
So, you can see generating HTML within Java,

116
00:06:40.006 --> 00:06:43.004
it is a little bit tedious and we'll see some solutions

117
00:06:43.004 --> 00:06:44.009
for that coming up

118
00:06:44.009 --> 00:06:48.008
but let's go ahead and run this application.

119
00:06:48.008 --> 00:06:53.003
So, I'm going to fire it up on the server.

120
00:06:53.003 --> 00:06:56.005
There we see our server starting

121
00:06:56.005 --> 00:06:58.004
and we'll grab the URL.

122
00:06:58.004 --> 00:07:01.000
I'm then going to go to a browser

123
00:07:01.000 --> 00:07:05.003
and let's go ahead and enter a new product.

124
00:07:05.003 --> 00:07:07.002
So, the product we'll enter,

125
00:07:07.002 --> 00:07:09.009
let's say it's going to be Vitamins

126
00:07:09.009 --> 00:07:14.000
and then the manufacturer will be Great Vitamins

127
00:07:14.000 --> 00:07:17.005
and we'll just enter an SKU of 123.

128
00:07:17.005 --> 00:07:19.008
Okay, now I'm going to go ahead

129
00:07:19.008 --> 00:07:22.008
and open up the developer tools

130
00:07:22.008 --> 00:07:26.003
so that we can take a look at this request.

131
00:07:26.003 --> 00:07:31.005
There you can see that we did generate the HTML

132
00:07:31.005 --> 00:07:33.004
and if we look at the elements,

133
00:07:33.004 --> 00:07:36.004
you can see our table as well as our table row

134
00:07:36.004 --> 00:07:38.009
and then the vitamins content generated.

135
00:07:38.009 --> 00:07:41.008
And then if we go over to the network tab,

136
00:07:41.008 --> 00:07:45.001
you can see that within the headers,

137
00:07:45.001 --> 00:07:52.002
we were able to send the cookie as well as our header value

138
00:07:52.002 --> 00:07:53.008
in the response.

139
00:07:53.008 --> 00:07:57.003
So, this was a look at how we can generate dynamic content

140
00:07:57.003 --> 00:07:58.006
with a servlet.

141
00:07:58.006 --> 00:08:01.005
We generated a lot of HTML markup within the servlet

142
00:08:01.005 --> 00:08:06.000
and saw how to add cookies and headers to a response.

