WEBVTT
1
00:00:00.005 --> 00:00:02.007
- [Instructor] It is important to understand servlets

2
00:00:02.007 --> 00:00:06.000
because many other Java EE web technologies

3
00:00:06.000 --> 00:00:10.003
are built on top of their request processing capabilities.

4
00:00:10.003 --> 00:00:12.005
In order to get a deeper look at servlets,

5
00:00:12.005 --> 00:00:15.002
we're going to go ahead and build out a project

6
00:00:15.002 --> 00:00:18.001
that contains a simple servlet.

7
00:00:18.001 --> 00:00:21.009
To do that, we can click on the file option within the menu

8
00:00:21.009 --> 00:00:25.007
and then go to new and then dynamic web project.

9
00:00:25.007 --> 00:00:29.002
And here, we're going to start to build out that project.

10
00:00:29.002 --> 00:00:32.004
The project requires a name which is going to be

11
00:00:32.004 --> 00:00:36.002
hsports-catalog-servlet.

12
00:00:36.002 --> 00:00:38.004
And then we want to check that we are using

13
00:00:38.004 --> 00:00:41.003
the Wildfly 17 runtime

14
00:00:41.003 --> 00:00:45.006
and that we're using the dynamic web module version 4.0.

15
00:00:45.006 --> 00:00:49.000
That corresponds with servlet specification 4.0

16
00:00:49.000 --> 00:00:52.004
which was released in Java EE 8.

17
00:00:52.004 --> 00:00:55.002
With those in place, just go ahead, hit next

18
00:00:55.002 --> 00:00:58.000
and then we're taken to the dialog

19
00:00:58.000 --> 00:01:00.003
to configure our source folders.

20
00:01:00.003 --> 00:01:02.001
We're going to change this up some

21
00:01:02.001 --> 00:01:04.007
so, select the source folder, hit remove

22
00:01:04.007 --> 00:01:10.000
and then we'll add a source folder named source main Java

23
00:01:10.000 --> 00:01:12.002
and then we're going to add another one named,

24
00:01:12.002 --> 00:01:14.009
source main resources.

25
00:01:14.009 --> 00:01:17.004
With those in place, we'll hit next

26
00:01:17.004 --> 00:01:20.008
and this takes us to the web module dialog

27
00:01:20.008 --> 00:01:25.009
and here, we configure the directory that's going to contain

28
00:01:25.009 --> 00:01:28.007
all of our different web content.

29
00:01:28.007 --> 00:01:31.005
In our case, we're going to switch up the content directory

30
00:01:31.005 --> 00:01:34.008
and we're going to make it source main web app

31
00:01:34.008 --> 00:01:38.003
and then we're going to go ahead and hit finish.

32
00:01:38.003 --> 00:01:40.007
You'll see that our project gets created,

33
00:01:40.007 --> 00:01:42.008
we have our source directories

34
00:01:42.008 --> 00:01:44.009
and then, we're going to go ahead and add a servlet

35
00:01:44.009 --> 00:01:47.008
to the source main Java directory.

36
00:01:47.008 --> 00:01:51.004
So, you can do that by right-clicking, hovering over new

37
00:01:51.004 --> 00:01:54.006
and then going to servlet or if you'd like,

38
00:01:54.006 --> 00:01:57.009
you can just hit Ctrl + N to open the new dialog

39
00:01:57.009 --> 00:02:01.008
and then type servlet and select it that way.

40
00:02:01.008 --> 00:02:05.005
Once we've selected the servlet, we'll hit next and here,

41
00:02:05.005 --> 00:02:07.009
we'll be able to configure that servlet.

42
00:02:07.009 --> 00:02:10.009
So, we need to provide a package for the servlet.

43
00:02:10.009 --> 00:02:14.008
It's going to be com.linkedin.servlet

44
00:02:14.008 --> 00:02:19.003
and then our servlet's name is going to be catalogservlet.

45
00:02:19.003 --> 00:02:21.009
And then I want to point out that you'll notice,

46
00:02:21.009 --> 00:02:25.004
we have a superclass of HTTP servlet

47
00:02:25.004 --> 00:02:28.002
so we're going to have inheritance here

48
00:02:28.002 --> 00:02:31.000
and we'll be overriding some of the methods

49
00:02:31.000 --> 00:02:35.000
on the HTTP servlet in a little bit here.

50
00:02:35.000 --> 00:02:37.003
Let's go ahead and proceed

51
00:02:37.003 --> 00:02:39.006
and then there's a very important configuration

52
00:02:39.006 --> 00:02:42.006
on this dialog, the URL mapping.

53
00:02:42.006 --> 00:02:48.002
So, when an HTTP request comes in to the servlet container,

54
00:02:48.002 --> 00:02:52.001
it's going to look at the URL on that request

55
00:02:52.001 --> 00:02:57.006
and if it notices this pattern, /catalogservlet,

56
00:02:57.006 --> 00:03:00.001
it is then going to route that request

57
00:03:00.001 --> 00:03:03.003
to our catalog servlet for processing.

58
00:03:03.003 --> 00:03:06.006
So, it's very important that we have the mappings correct

59
00:03:06.006 --> 00:03:10.002
that way, requests are routed to the appropriate servlet.

60
00:03:10.002 --> 00:03:13.000
So, we'll leave that as the default

61
00:03:13.000 --> 00:03:15.003
and we'll just move on from here.

62
00:03:15.003 --> 00:03:19.007
And then, here's where we can select the different methods

63
00:03:19.007 --> 00:03:24.007
that we would like to override on the HTTP servlet.

64
00:03:24.007 --> 00:03:27.002
You'll notice that many of those methods

65
00:03:27.002 --> 00:03:31.002
correspond with HTTP methods or operations,

66
00:03:31.002 --> 00:03:34.002
so, you see get, post, put, delete.

67
00:03:34.002 --> 00:03:35.008
In our case, we're just going to leave

68
00:03:35.008 --> 00:03:38.009
do get and do post selected and then I want to highlight

69
00:03:38.009 --> 00:03:41.002
the init and destroy methods.

70
00:03:41.002 --> 00:03:45.002
So, these two methods are involved with the lifecycle

71
00:03:45.002 --> 00:03:48.001
of the servlet so there's different events that occur

72
00:03:48.001 --> 00:03:51.006
when the servlet's created and these two methods

73
00:03:51.006 --> 00:03:55.005
provide hooks into that lifecycle so if there's logic

74
00:03:55.005 --> 00:03:59.009
that you want to execute when the servlet's initialized

75
00:03:59.009 --> 00:04:03.007
or when it's destroyed, you can override those methods

76
00:04:03.007 --> 00:04:06.005
and provide your application logic there.

77
00:04:06.005 --> 00:04:08.008
We're not going to do any of that in our example,

78
00:04:08.008 --> 00:04:10.004
we're just going to be using do get

79
00:04:10.004 --> 00:04:13.008
so, let's leave the defaults in place, hit finish.

80
00:04:13.008 --> 00:04:17.003
Here, we see our first servlet, the catalog servlet

81
00:04:17.003 --> 00:04:19.005
and let's just talk a little bit about it.

82
00:04:19.005 --> 00:04:23.000
You see our two methods that we're overriding.

83
00:04:23.000 --> 00:04:26.004
And take a look at the method signatures.

84
00:04:26.004 --> 00:04:30.005
You'll notice they accept an HTTP servlet request

85
00:04:30.005 --> 00:04:34.000
and an HTTP servlet response.

86
00:04:34.000 --> 00:04:39.009
So, the request represents that incoming HTTP request

87
00:04:39.009 --> 00:04:43.005
coming from the browser and we're able to pull information

88
00:04:43.005 --> 00:04:47.002
off of the request and use it within our application logic

89
00:04:47.002 --> 00:04:49.003
so we can grab things like parameters,

90
00:04:49.003 --> 00:04:52.006
we can also look at cookies that come in,

91
00:04:52.006 --> 00:04:53.006
there's all sorts of data

92
00:04:53.006 --> 00:04:56.007
that we can pull off that request for our use.

93
00:04:56.007 --> 00:04:59.007
And then the HTTP servlet response

94
00:04:59.007 --> 00:05:03.008
is what we're going to build and send back to the browser.

95
00:05:03.008 --> 00:05:07.005
And we can do things like add cookies, add headers

96
00:05:07.005 --> 00:05:09.004
and then ultimately what we're building

97
00:05:09.004 --> 00:05:12.005
is a response body that contains content

98
00:05:12.005 --> 00:05:16.006
that the browser will leverage in some way.

99
00:05:16.006 --> 00:05:20.001
So, let's go ahead and just do a little bit of work in here

100
00:05:20.001 --> 00:05:24.005
and I'll remove all the existing code

101
00:05:24.005 --> 00:05:26.006
and we'll just start from scratch.

102
00:05:26.006 --> 00:05:30.006
So, what we're going to look at is building a response

103
00:05:30.006 --> 00:05:34.000
and when we do that, we use the writer

104
00:05:34.000 --> 00:05:37.009
and the writers use to send content out to the browser

105
00:05:37.009 --> 00:05:42.004
via the response body and what we're going to do is,

106
00:05:42.004 --> 00:05:46.008
append some content to that response body

107
00:05:46.008 --> 00:05:49.004
and the content we're going to append

108
00:05:49.004 --> 00:05:51.004
is actually going to be a parameter

109
00:05:51.004 --> 00:05:54.004
that's coming in with the request.

110
00:05:54.004 --> 00:05:56.009
So, we're going to grab a parameter

111
00:05:56.009 --> 00:06:00.004
named name from the request and then simply,

112
00:06:00.004 --> 00:06:03.006
reflect it back out to the browser.

113
00:06:03.006 --> 00:06:06.005
With all of that in place, let's go ahead,

114
00:06:06.005 --> 00:06:10.001
we can right-click and then go to run as

115
00:06:10.001 --> 00:06:12.000
and then run on server.

116
00:06:12.000 --> 00:06:14.008
It's going to ask us to select our server.

117
00:06:14.008 --> 00:06:17.006
We would like the Wildfly 17 server

118
00:06:17.006 --> 00:06:20.002
and go ahead and hit finish.

119
00:06:20.002 --> 00:06:25.002
And there we see the application starting up.

120
00:06:25.002 --> 00:06:28.004
So, let's grab the URL to our application

121
00:06:28.004 --> 00:06:32.000
and I'm going to open it up in Chrome

122
00:06:32.000 --> 00:06:33.006
and then you'll remember,

123
00:06:33.006 --> 00:06:37.003
we need to send the request to the catalog servlet

124
00:06:37.003 --> 00:06:41.000
and then it expects a parameter named name

125
00:06:41.000 --> 00:06:43.005
and then I'm just going to provide my name

126
00:06:43.005 --> 00:06:45.009
as the value for that parameter.

127
00:06:45.009 --> 00:06:50.003
And when we do that, we get the content sent

128
00:06:50.003 --> 00:06:54.003
with the response that was generated by the servlet.

129
00:06:54.003 --> 00:06:57.001
So, that was our first look at servlets.

130
00:06:57.001 --> 00:06:58.008
Extremely important technology

131
00:06:58.008 --> 00:07:04.000
because of the web capabilities that they enable.

