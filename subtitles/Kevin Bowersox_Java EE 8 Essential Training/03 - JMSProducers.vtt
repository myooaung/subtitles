WEBVTT
1
00:00:00.005 --> 00:00:02.005
- [Announcer] Within the JMS API,

2
00:00:02.005 --> 00:00:05.005
the producer interface is used to send messages

3
00:00:05.005 --> 00:00:08.002
to a JMS Queue or topic.

4
00:00:08.002 --> 00:00:11.007
Since JMS 2.0, the approach for creating a producer

5
00:00:11.007 --> 00:00:15.000
and sending a message has been significantly simplified

6
00:00:15.000 --> 00:00:16.005
by annotations.

7
00:00:16.005 --> 00:00:17.007
Let's take a look.

8
00:00:17.007 --> 00:00:20.006
We're going to go ahead and create a new class

9
00:00:20.006 --> 00:00:26.005
within our JAX-RS project in the calm.LinkedIn package.

10
00:00:26.005 --> 00:00:29.008
So just use the dialogue to create a new class.

11
00:00:29.008 --> 00:00:33.008
And we're going to call this class JMS service.

12
00:00:33.008 --> 00:00:35.001
We'll go ahead and make it.

13
00:00:35.001 --> 00:00:38.005
And then we're going to add the application

14
00:00:38.005 --> 00:00:42.000
scoped annotation to this class

15
00:00:42.000 --> 00:00:45.005
to make it an application scoped bean.

16
00:00:45.005 --> 00:00:48.007
So we can go ahead, import that annotation.

17
00:00:48.007 --> 00:00:50.004
And then what we're going to do

18
00:00:50.004 --> 00:00:53.000
is add a method to this class

19
00:00:53.000 --> 00:00:55.008
that's simply going to be named send.

20
00:00:55.008 --> 00:01:00.008
And that method is going to take a string as a message.

21
00:01:00.008 --> 00:01:05.006
From here, we're going to inject the actual Queue

22
00:01:05.006 --> 00:01:08.002
that we would like to send the message to.

23
00:01:08.002 --> 00:01:11.008
To do that, we can use the resource annotation.

24
00:01:11.008 --> 00:01:15.001
And we're going to create a field of type Queue

25
00:01:15.001 --> 00:01:18.008
and we'll just call it the hsports Queue.

26
00:01:18.008 --> 00:01:22.008
Now, when we use the resource annotation,

27
00:01:22.008 --> 00:01:28.001
we can provide the JNDI name for the queue.

28
00:01:28.001 --> 00:01:30.005
So let's go ahead and specify that

29
00:01:30.005 --> 00:01:37.006
using the mapped name element on that annotation.

30
00:01:37.006 --> 00:01:40.004
And if you remember when we created the queue,

31
00:01:40.004 --> 00:01:43.005
we defined this JNDI name

32
00:01:43.005 --> 00:01:49.009
and it was /JMS/queue/HsportsQueue.

33
00:01:49.009 --> 00:01:53.000
Okay, now another thing that we'll do here

34
00:01:53.000 --> 00:01:56.004
is inject the JMS context.

35
00:01:56.004 --> 00:02:00.001
So we're going to use the inject annotation

36
00:02:00.001 --> 00:02:03.009
and then we're going to create a new field

37
00:02:03.009 --> 00:02:06.003
of type JMS context.

38
00:02:06.003 --> 00:02:10.006
This is a combination of the session and the connection.

39
00:02:10.006 --> 00:02:13.001
And then we're going to also add

40
00:02:13.001 --> 00:02:17.000
the JMS connection factory annotation.

41
00:02:17.000 --> 00:02:21.000
And this is going to allow us to get a hook

42
00:02:21.000 --> 00:02:22.009
to the JMS context.

43
00:02:22.009 --> 00:02:26.006
It also has a JNDI name which we'll specify

44
00:02:26.006 --> 00:02:30.007
and it's /connectionfactory.

45
00:02:30.007 --> 00:02:32.009
Okay, all this exists

46
00:02:32.009 --> 00:02:38.000
within our Java EE application server wildFly.

47
00:02:38.000 --> 00:02:42.001
Now that we have set up the different fields we need,

48
00:02:42.001 --> 00:02:44.004
we have our send method.

49
00:02:44.004 --> 00:02:46.009
Let's go ahead and write some code

50
00:02:46.009 --> 00:02:52.002
to send a message to our queue from our producer.

51
00:02:52.002 --> 00:02:55.007
So we'll just create a try catch block,

52
00:02:55.007 --> 00:02:59.003
in order to catch any exceptions that may occur.

53
00:02:59.003 --> 00:03:03.006
And if we get an exception we'll print out the stack trace.

54
00:03:03.006 --> 00:03:06.006
And then within this try-catch,

55
00:03:06.006 --> 00:03:10.001
we're going to go ahead and make a text message.

56
00:03:10.001 --> 00:03:14.005
So this is the message that JMS is going to pass

57
00:03:14.005 --> 00:03:17.001
from the producer to the consumer.

58
00:03:17.001 --> 00:03:21.002
And we can use the context to create a text message.

59
00:03:21.002 --> 00:03:25.007
And that method to do that is called create text message

60
00:03:25.007 --> 00:03:26.007
pretty obvious.

61
00:03:26.007 --> 00:03:31.004
And then within there we're just going to pass the message

62
00:03:31.004 --> 00:03:36.005
that we received as a parameter to our send method.

63
00:03:36.005 --> 00:03:38.009
And that will create our text message

64
00:03:38.009 --> 00:03:42.004
that we're going to use our producer to send.

65
00:03:42.004 --> 00:03:46.004
So to get the producer, we can use the context

66
00:03:46.004 --> 00:03:50.005
and there's a create producer method on the context.

67
00:03:50.005 --> 00:03:54.006
And that producer has a send method

68
00:03:54.006 --> 00:03:57.008
and it requires us to provide a destination,

69
00:03:57.008 --> 00:04:01.005
in this case it's going to be our hSportsqueue.

70
00:04:01.005 --> 00:04:04.000
And then we need to provide a message.

71
00:04:04.000 --> 00:04:05.007
So we created that text message,

72
00:04:05.007 --> 00:04:10.007
which will supply as the second argument to that method.

73
00:04:10.007 --> 00:04:12.008
And then I'm just going to add a little console output

74
00:04:12.008 --> 00:04:17.001
so we can see that the message was actually sent.

75
00:04:17.001 --> 00:04:20.004
And we'll just say the message was sent to the queue.

76
00:04:20.004 --> 00:04:21.006
So if we take a look here,

77
00:04:21.006 --> 00:04:24.001
we're getting an error on our send method.

78
00:04:24.001 --> 00:04:27.005
And that's because we imported the wrong queue.

79
00:04:27.005 --> 00:04:30.002
So I'm going to go ahead and remove that import.

80
00:04:30.002 --> 00:04:34.009
This time I'm going to be careful to select the JMS Queue.

81
00:04:34.009 --> 00:04:39.002
And now our producer is all set to send messages

82
00:04:39.002 --> 00:04:41.009
to the JMS Queue.

83
00:04:41.009 --> 00:04:43.009
So with our producer prepared,

84
00:04:43.009 --> 00:04:47.004
we need to find a way to actually send the message.

85
00:04:47.004 --> 00:04:51.008
So we're going to go to our inventory item endpoint class

86
00:04:51.008 --> 00:04:54.004
and you'll remember this is the resource

87
00:04:54.004 --> 00:04:58.006
that we created within JAX-RS.

88
00:04:58.006 --> 00:05:03.009
And we can inject our producer into this class.

89
00:05:03.009 --> 00:05:09.002
So let's create a new field of type JMS service.

90
00:05:09.002 --> 00:05:12.001
And we'll just call this the JMS service.

91
00:05:12.001 --> 00:05:14.007
And we can go ahead import those types.

92
00:05:14.007 --> 00:05:22.002
And now CDI has injected our JMS service into this resource

93
00:05:22.002 --> 00:05:24.008
that was created with JAX-RS.

94
00:05:24.008 --> 00:05:29.000
And we are able to then use our JMS service

95
00:05:29.000 --> 00:05:32.004
and it's send method to send a message.

96
00:05:32.004 --> 00:05:35.009
And in this case, we're just going to get the name

97
00:05:35.009 --> 00:05:39.008
of the newly created inventory item.

98
00:05:39.008 --> 00:05:42.006
So we have the inventory item being passed in,

99
00:05:42.006 --> 00:05:44.001
we can get its name

100
00:05:44.001 --> 00:05:48.000
and we're going to send that as a JMS text message.

101
00:05:48.000 --> 00:05:52.002
So here you can see that the JMS producer

102
00:05:52.002 --> 00:05:55.005
also qualifies for dependency injection

103
00:05:55.005 --> 00:05:57.006
if we make it a bean.

104
00:05:57.006 --> 00:06:00.008
Alright, so that concludes our look at the JMS Producer,

105
00:06:00.008 --> 00:06:02.006
we'll move on and create a consumer

106
00:06:02.006 --> 00:06:05.003
that's actually going to be able to read this message

107
00:06:05.003 --> 00:06:08.000
off of the queue that we created.

