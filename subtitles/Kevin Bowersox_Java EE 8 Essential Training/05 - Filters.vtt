WEBVTT
1
00:00:00.005 --> 00:00:02.002
- [Narrator] Filters are another component

2
00:00:02.002 --> 00:00:04.009
found in the Servlet specification.

3
00:00:04.009 --> 00:00:06.006
Filters sit in front of Servlets

4
00:00:06.006 --> 00:00:08.008
to allow transformations to be applied

5
00:00:08.008 --> 00:00:13.007
to request and responses process by a Java EE application.

6
00:00:13.007 --> 00:00:16.002
This is beneficial when building an application

7
00:00:16.002 --> 00:00:19.008
that requires some logic to be applied to every request.

8
00:00:19.008 --> 00:00:23.009
Logging and security are very common use cases for filters.

9
00:00:23.009 --> 00:00:26.008
Let's take a look at how we can put a filter in place

10
00:00:26.008 --> 00:00:28.008
within our application.

11
00:00:28.008 --> 00:00:29.009
It's really simple.

12
00:00:29.009 --> 00:00:30.009
All we need to do

13
00:00:30.009 --> 00:00:35.000
is go to the com dot LinkedIn dot Servlet package.

14
00:00:35.000 --> 00:00:37.006
Right click, and then hover over new,

15
00:00:37.006 --> 00:00:39.005
and then go to other.

16
00:00:39.005 --> 00:00:41.000
Within the new dialogue,

17
00:00:41.000 --> 00:00:42.004
we can simply type filter,

18
00:00:42.004 --> 00:00:45.006
and that will narrow down the selection

19
00:00:45.006 --> 00:00:47.006
to the filter object.

20
00:00:47.006 --> 00:00:50.001
And just select that and hit next.

21
00:00:50.001 --> 00:00:54.008
And then here we can supply a name for our filter,

22
00:00:54.008 --> 00:00:59.005
which I'm going to name the Parameter Logging Filter.

23
00:00:59.005 --> 00:01:02.005
Once that name's in place, we can hit next.

24
00:01:02.005 --> 00:01:06.000
And then you'll notice that filters have a mapping

25
00:01:06.000 --> 00:01:07.008
very similar to a Servlet.

26
00:01:07.008 --> 00:01:11.003
So this is a url pattern that we can specify

27
00:01:11.003 --> 00:01:14.008
that will cause the filter to be invoked

28
00:01:14.008 --> 00:01:17.008
within the request processing chain.

29
00:01:17.008 --> 00:01:21.004
Now, we're going to go ahead and edit the url pattern.

30
00:01:21.004 --> 00:01:24.001
And instead of parameter logging filter,

31
00:01:24.001 --> 00:01:29.000
we're going to specify forward slash asterisk.

32
00:01:29.000 --> 00:01:31.005
And that's going to cause this filter

33
00:01:31.005 --> 00:01:36.004
to be invoked for every request that we receive.

34
00:01:36.004 --> 00:01:38.003
Now, with that configuration in place,

35
00:01:38.003 --> 00:01:40.009
all we can do is hit finish.

36
00:01:40.009 --> 00:01:42.007
And that's going to cause

37
00:01:42.007 --> 00:01:46.008
our new parameter logging filter to be built.

38
00:01:46.008 --> 00:01:49.008
And you'll notice a few things about this class.

39
00:01:49.008 --> 00:01:53.005
First, it implements the filter interface.

40
00:01:53.005 --> 00:01:56.005
And you'll also see that is annotated

41
00:01:56.005 --> 00:01:59.002
with the web filter annotation

42
00:01:59.002 --> 00:02:04.005
which will cause this class to be initialized as a filter.

43
00:02:04.005 --> 00:02:07.005
You'll also see the url pattern

44
00:02:07.005 --> 00:02:11.002
that we have applied for the mapping for this filter

45
00:02:11.002 --> 00:02:16.006
at the first element within that web filter annotation.

46
00:02:16.006 --> 00:02:19.004
So that's how the filter gets configured.

47
00:02:19.004 --> 00:02:23.004
And then if we navigate further down

48
00:02:23.004 --> 00:02:26.005
within our filter class,

49
00:02:26.005 --> 00:02:30.002
you'll see that we have the do filter method.

50
00:02:30.002 --> 00:02:33.003
And this is the method implementation

51
00:02:33.003 --> 00:02:37.008
that will provide our application logic within.

52
00:02:37.008 --> 00:02:39.007
You'll also see that this method

53
00:02:39.007 --> 00:02:44.004
has access to the Servlet request and Servlet response

54
00:02:44.004 --> 00:02:46.006
as arguments pass to it.

55
00:02:46.006 --> 00:02:51.002
And what we're going to do is use that request object

56
00:02:51.002 --> 00:02:54.004
to get the parameter map.

57
00:02:54.004 --> 00:02:57.005
Now, the parameter map is just a map of the parameters

58
00:02:57.005 --> 00:03:01.009
that have been passed in with the HTTP request.

59
00:03:01.009 --> 00:03:06.004
And then we can grab the entry set from that map,

60
00:03:06.004 --> 00:03:10.009
and then use the string feature from Java 8

61
00:03:10.009 --> 00:03:19.006
in order to execute a method for every entry in that map.

62
00:03:19.006 --> 00:03:25.008
And we're simply going to print out the parameter name

63
00:03:25.008 --> 00:03:27.009
and the parameter value.

64
00:03:27.009 --> 00:03:31.004
And we can do that by printing it to the console,

65
00:03:31.004 --> 00:03:36.004
and using the string dot format method

66
00:03:36.004 --> 00:03:41.006
which allows us to pass in the values that we would like.

67
00:03:41.006 --> 00:03:45.007
So we can get the key from the map.

68
00:03:45.007 --> 00:03:51.005
And then we can also get the value from the map.

69
00:03:51.005 --> 00:03:55.001
And the value set that's going to be returned is an array.

70
00:03:55.001 --> 00:03:58.000
You can have parameters with the same name,

71
00:03:58.000 --> 00:04:00.002
and they'll be supplied as an array.

72
00:04:00.002 --> 00:04:04.007
So we're just going to grab the first element in that array.

73
00:04:04.007 --> 00:04:08.000
So there we have our filter implementation.

74
00:04:08.000 --> 00:04:10.004
And one thing that you will notice

75
00:04:10.004 --> 00:04:16.000
is that we call the do filter method on the filter chain.

76
00:04:16.000 --> 00:04:21.000
And this is simply telling the request processing

77
00:04:21.000 --> 00:04:23.002
to invoke the next filter in the chain,

78
00:04:23.002 --> 00:04:25.004
or if there are no other filters,

79
00:04:25.004 --> 00:04:28.004
the Servlet will then be invoked

80
00:04:28.004 --> 00:04:31.004
and have the application logic applied.

81
00:04:31.004 --> 00:04:32.008
So there's our filter.

82
00:04:32.008 --> 00:04:36.005
Let's now run our application.

83
00:04:36.005 --> 00:04:39.001
So we can right click on the project,

84
00:04:39.001 --> 00:04:43.006
go to run as, and then run on server.

85
00:04:43.006 --> 00:04:47.002
And there we see the server start up.

86
00:04:47.002 --> 00:04:53.004
And here we will get the url to our application.

87
00:04:53.004 --> 00:04:59.001
And what I'm actually going to do is take that url,

88
00:04:59.001 --> 00:05:01.009
and we'll go over to Chrome,

89
00:05:01.009 --> 00:05:04.006
and there we can see our application running.

90
00:05:04.006 --> 00:05:06.006
And then I'm going to head back to Eclipse

91
00:05:06.006 --> 00:05:08.007
so we can get a look at the console

92
00:05:08.007 --> 00:05:12.007
so that we can see our parameters being logged.

93
00:05:12.007 --> 00:05:14.002
So here's the console,

94
00:05:14.002 --> 00:05:16.007
let's go ahead, we'll say it's shoes.

95
00:05:16.007 --> 00:05:19.004
We'll say this time it's awesome shoes.

96
00:05:19.004 --> 00:05:23.003
And then we'll provide an SKU, hit submit.

97
00:05:23.003 --> 00:05:26.001
And there if we take a look,

98
00:05:26.001 --> 00:05:31.004
you will notice that our parameter logging filter

99
00:05:31.004 --> 00:05:35.001
intercepted the request and printed out all the parameters

100
00:05:35.001 --> 00:05:38.005
that were found within that HTTP request.

101
00:05:38.005 --> 00:05:41.002
So, there's how filters can be applied

102
00:05:41.002 --> 00:05:43.003
within our applications.

103
00:05:43.003 --> 00:05:46.006
If we would like to have some sort of logic

104
00:05:46.006 --> 00:05:50.000
that is applied to every request.

