WEBVTT
1
00:00:00.005 --> 00:00:03.004
- [Instructor] Once a web socket server endpoint is built,

2
00:00:03.004 --> 00:00:05.002
clients can connect to the endpoint

3
00:00:05.002 --> 00:00:07.008
to engage in full duplex communication

4
00:00:07.008 --> 00:00:11.008
that allows both sides of the connection to send a message.

5
00:00:11.008 --> 00:00:12.007
In this lesson,

6
00:00:12.007 --> 00:00:14.009
we're going to build out a JavaScript client

7
00:00:14.009 --> 00:00:16.009
that connects to our previously built

8
00:00:16.009 --> 00:00:19.004
web socket server endpoint.

9
00:00:19.004 --> 00:00:21.004
So within the JSF project,

10
00:00:21.004 --> 00:00:25.005
you'll see that I've created the help-js facelet,

11
00:00:25.005 --> 00:00:31.006
and this is a facelet that's going to facilitate a help chat

12
00:00:31.006 --> 00:00:36.006
that allows item managers to discuss product issues.

13
00:00:36.006 --> 00:00:39.000
It's a very simple JSF page.

14
00:00:39.000 --> 00:00:41.009
You'll notice we have a form named chat.

15
00:00:41.009 --> 00:00:45.000
Within chat are two controls that are text boxes.

16
00:00:45.000 --> 00:00:49.002
One is a name and the other is the message text.

17
00:00:49.002 --> 00:00:51.007
So the individual can enter their name

18
00:00:51.007 --> 00:00:53.002
and then the message they want to send,

19
00:00:53.002 --> 00:00:55.006
and then we're going to enter that

20
00:00:55.006 --> 00:00:58.003
into the message area here,

21
00:00:58.003 --> 00:01:00.009
which is just a div where we're going to allow

22
00:01:00.009 --> 00:01:02.009
the chat to take place.

23
00:01:02.009 --> 00:01:07.004
Now, in order to build out a JavaScript web socket client,

24
00:01:07.004 --> 00:01:11.008
we're going to need to add some script within our page.

25
00:01:11.008 --> 00:01:15.007
So we'll do that within the body of the page,

26
00:01:15.007 --> 00:01:17.007
and there is native support

27
00:01:17.007 --> 00:01:20.003
for web sockets within JavaScript,

28
00:01:20.003 --> 00:01:22.006
so it's very easy to use.

29
00:01:22.006 --> 00:01:25.002
The first thing we'll do is add an event handler

30
00:01:25.002 --> 00:01:29.001
to the onload event for the page,

31
00:01:29.001 --> 00:01:30.008
and this allows us to make sure

32
00:01:30.008 --> 00:01:32.007
that all of our elements are in place

33
00:01:32.007 --> 00:01:36.002
before we execute any script.

34
00:01:36.002 --> 00:01:38.004
Next we're going to go ahead

35
00:01:38.004 --> 00:01:40.000
and create a web socket,

36
00:01:40.000 --> 00:01:41.007
and here's where we can leverage

37
00:01:41.007 --> 00:01:43.004
some of that built-in support.

38
00:01:43.004 --> 00:01:46.008
There's a web socket object within JavaScript,

39
00:01:46.008 --> 00:01:50.001
and all we need to do is provide the URL

40
00:01:50.001 --> 00:01:53.001
to the web socket that we would like to communicate with,

41
00:01:53.001 --> 00:01:55.006
and that will establish the connection.

42
00:01:55.006 --> 00:01:58.008
So I'm just going to head over to Socket Wrench

43
00:01:58.008 --> 00:02:03.003
and grab the URL for our web socket

44
00:02:03.003 --> 00:02:09.003
and then paste it into our web socket constructor.

45
00:02:09.003 --> 00:02:10.003
Now from here,

46
00:02:10.003 --> 00:02:13.001
it's kind of like the work we did in Java.

47
00:02:13.001 --> 00:02:16.002
You're able to attach event handlers

48
00:02:16.002 --> 00:02:20.003
to specific events that occur on the socket.

49
00:02:20.003 --> 00:02:21.006
So that should look familiar.

50
00:02:21.006 --> 00:02:23.003
The onmessage event,

51
00:02:23.003 --> 00:02:27.008
so this is going to be invoked whenever a message is sent

52
00:02:27.008 --> 00:02:30.008
to the JavaScript web socket client,

53
00:02:30.008 --> 00:02:33.005
and it's going to be passed an event,

54
00:02:33.005 --> 00:02:36.002
and we can use that event to get the message

55
00:02:36.002 --> 00:02:42.004
that was sent to this JavaScript web socket client.

56
00:02:42.004 --> 00:02:48.004
So let's grab the message div,

57
00:02:48.004 --> 00:02:50.002
because that's where we want to place

58
00:02:50.002 --> 00:02:52.002
any messages we receive,

59
00:02:52.002 --> 00:02:57.006
and then we're just going to add to the markup of that div,

60
00:02:57.006 --> 00:03:01.007
and we'll place the data or the message that we received

61
00:03:01.007 --> 00:03:04.006
from our web socket server endpoint,

62
00:03:04.006 --> 00:03:05.009
and then just for styling,

63
00:03:05.009 --> 00:03:10.004
I'm going to go ahead and create a new line for each message.

64
00:03:10.004 --> 00:03:13.004
So there's our first piece of code

65
00:03:13.004 --> 00:03:16.009
to handle messages coming into our client.

66
00:03:16.009 --> 00:03:19.007
We now need to think about how our JavaScript

67
00:03:19.007 --> 00:03:22.005
web socket client is going to send messages

68
00:03:22.005 --> 00:03:24.006
to the server endpoint.

69
00:03:24.006 --> 00:03:28.000
So we're going to attach an event

70
00:03:28.000 --> 00:03:31.001
to our chat form when it's submitted.

71
00:03:31.001 --> 00:03:35.002
I'll just create this function that will be fired

72
00:03:35.002 --> 00:03:38.003
whenever the form gets submitted.

73
00:03:38.003 --> 00:03:41.000
And then here we're going to capture the information

74
00:03:41.000 --> 00:03:43.007
that was placed in the form,

75
00:03:43.007 --> 00:03:45.004
so just some simple JavaScript

76
00:03:45.004 --> 00:03:49.006
to go ahead and grab our message.

77
00:03:49.006 --> 00:03:54.004
And you'll remember the ID on that field was messageText.

78
00:03:54.004 --> 00:03:58.000
And then we just get the value of that particular field.

79
00:03:58.000 --> 00:03:59.007
We can do the same thing with the name

80
00:03:59.007 --> 00:04:03.001
so that we know who's sending it.

81
00:04:03.001 --> 00:04:04.002
And from here,

82
00:04:04.002 --> 00:04:07.008
it's very simple when working with the built-in

83
00:04:07.008 --> 00:04:10.003
support for web sockets in JavaScript.

84
00:04:10.003 --> 00:04:13.005
We just grab the socket and invoke the send message,

85
00:04:13.005 --> 00:04:16.004
and then whatever we pass in is going to be sent

86
00:04:16.004 --> 00:04:19.003
as a message to the server endpoint.

87
00:04:19.003 --> 00:04:21.000
So let's provide the name

88
00:04:21.000 --> 00:04:22.006
of the individual sending the message.

89
00:04:22.006 --> 00:04:26.004
We're then going to place a colon and then their message.

90
00:04:26.004 --> 00:04:29.001
So just trying to create the chat here

91
00:04:29.001 --> 00:04:31.000
between the end users.

92
00:04:31.000 --> 00:04:33.007
And then we're just going to return false, as well,

93
00:04:33.007 --> 00:04:35.002
so that we don't have that event

94
00:04:35.002 --> 00:04:37.007
propagate up through our DOM.

95
00:04:37.007 --> 00:04:40.004
All right, so that's everything that we need to put in place

96
00:04:40.004 --> 00:04:44.007
to establish a JavaScript web socket client.

97
00:04:44.007 --> 00:04:47.001
Let's go ahead, run the application,

98
00:04:47.001 --> 00:04:49.008
and while that's firing up,

99
00:04:49.008 --> 00:04:51.006
I'm going to open two browsers,

100
00:04:51.006 --> 00:04:54.004
because we're going to have two clients

101
00:04:54.004 --> 00:04:59.006
that are going to communicate via our help chat.

102
00:04:59.006 --> 00:05:02.000
So we can go ahead, open our application,

103
00:05:02.000 --> 00:05:05.004
go to the help form,

104
00:05:05.004 --> 00:05:07.006
and let's have two folks.

105
00:05:07.006 --> 00:05:11.006
We'll have Steve and we'll have Jane.

106
00:05:11.006 --> 00:05:17.004
And Steve's going to have a problem with one of the products,

107
00:05:17.004 --> 00:05:20.008
and you'll notice that they both get the message

108
00:05:20.008 --> 00:05:24.009
sent to them from the web socket server endpoint.

109
00:05:24.009 --> 00:05:27.002
Jane's going to ask what is wrong.

110
00:05:27.002 --> 00:05:31.009
And you can see how the web socket is able

111
00:05:31.009 --> 00:05:36.005
to send messages to both of these clients.

112
00:05:36.005 --> 00:05:38.007
Okay, so that was a look at building

113
00:05:38.007 --> 00:05:42.000
a JavaScript web socket client.

114
00:05:42.000 --> 00:05:46.000
Very simple with the built-in support we find in JavaScript.

