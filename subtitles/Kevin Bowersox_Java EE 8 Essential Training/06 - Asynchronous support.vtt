WEBVTT
1
00:00:01.002 --> 00:00:02.008
- [Instructor] Servlets can be expensive when events

2
00:00:02.008 --> 00:00:04.008
such as remote web service calls

3
00:00:04.008 --> 00:00:07.001
or database writes are required.

4
00:00:07.001 --> 00:00:09.005
When these operations occur frequently,

5
00:00:09.005 --> 00:00:12.006
the server can experience a poor quality of operations

6
00:00:12.006 --> 00:00:14.005
due to thread starvation.

7
00:00:14.005 --> 00:00:17.000
Threads are valuable resources for web containers

8
00:00:17.000 --> 00:00:19.007
so it's important to use them efficiently.

9
00:00:19.007 --> 00:00:22.001
Asynchronous servlet support was introduced

10
00:00:22.001 --> 00:00:25.009
in Java EE 7 to help us eliminate these problems.

11
00:00:25.009 --> 00:00:29.003
Let's take a quick look at how to use asynchronous support

12
00:00:29.003 --> 00:00:31.001
within servlets.

13
00:00:31.001 --> 00:00:33.009
So the first thing we'll need to do is modify our

14
00:00:33.009 --> 00:00:39.000
web servlet annotation in order to contain

15
00:00:39.000 --> 00:00:43.002
the support for async, so to do that you'll see

16
00:00:43.002 --> 00:00:48.003
the async supported element on the annotation.

17
00:00:48.003 --> 00:00:51.004
Just set that to true and when we do that,

18
00:00:51.004 --> 00:00:56.000
we'll have to specify the URL patterns element

19
00:00:56.000 --> 00:01:00.002
on that web servlet annotation as well

20
00:01:00.002 --> 00:01:02.002
and in order for this to work we'll have to do

21
00:01:02.002 --> 00:01:05.002
the same thing on our filter.

22
00:01:05.002 --> 00:01:09.001
So we'll set async supported to true there as well.

23
00:01:09.001 --> 00:01:11.001
That concludes our work on the filter.

24
00:01:11.001 --> 00:01:15.006
So let's return back to our servlet

25
00:01:15.006 --> 00:01:21.000
and then within the post method we're going to add

26
00:01:21.000 --> 00:01:26.003
a local variable for the async context

27
00:01:26.003 --> 00:01:32.003
and we're able to grab the async context from the request

28
00:01:32.003 --> 00:01:36.003
using the start async context method.

29
00:01:36.003 --> 00:01:40.001
So this is going to allow us to control

30
00:01:40.001 --> 00:01:45.009
some of the threading within our servlet.

31
00:01:45.009 --> 00:01:48.009
Another thing I'm going to do just to keep things tidy

32
00:01:48.009 --> 00:01:55.003
is create a new method that we will call return response

33
00:01:55.003 --> 00:02:02.000
and this is just going to house all of that logic

34
00:02:02.000 --> 00:02:05.008
that we created for creating that dynamic content

35
00:02:05.008 --> 00:02:07.007
we're going to return.

36
00:02:07.007 --> 00:02:12.000
Okay from there we'll continue our work within

37
00:02:12.000 --> 00:02:15.008
the post method and what we'll need to do

38
00:02:15.008 --> 00:02:19.001
is start a new thread.

39
00:02:19.001 --> 00:02:23.005
So to do that we use the async response

40
00:02:23.005 --> 00:02:28.006
and it has a start method that accepts a new runnable

41
00:02:28.006 --> 00:02:31.006
and once we specify that new runnable

42
00:02:31.006 --> 00:02:34.003
we'll have to add the run method

43
00:02:34.003 --> 00:02:37.003
which will contain the logic the thread

44
00:02:37.003 --> 00:02:40.000
is going to perform.

45
00:02:40.000 --> 00:02:42.004
Now I mentioned we do this in the case where there's a long

46
00:02:42.004 --> 00:02:46.001
kind of running pull maybe out to a web service

47
00:02:46.001 --> 00:02:47.009
or we're writing to a database.

48
00:02:47.009 --> 00:02:51.002
We don't have that yet so I'm just going to mock that

49
00:02:51.002 --> 00:02:55.000
by telling our thread to sleep and we'll tell it to sleep

50
00:02:55.000 --> 00:03:00.003
for roughly 5,000 milliseconds and that's going to require us

51
00:03:00.003 --> 00:03:03.001
to surround that in try catch block

52
00:03:03.001 --> 00:03:06.004
and then from there what we can do.

53
00:03:06.004 --> 00:03:10.001
We're going to print out just some logging to the console

54
00:03:10.001 --> 00:03:12.005
so we can see what thread we're in.

55
00:03:12.005 --> 00:03:17.005
So we'll say we're printing the response

56
00:03:17.005 --> 00:03:21.000
and then in another line what we can do is give

57
00:03:21.000 --> 00:03:24.003
the name of the thread for that response.

58
00:03:24.003 --> 00:03:29.007
So we'll say response returned by

59
00:03:29.007 --> 00:03:37.009
and then from here we can grab the current thread

60
00:03:37.009 --> 00:03:40.003
and get its name.

61
00:03:40.003 --> 00:03:44.000
Okay so this is all happening within a separate thread

62
00:03:44.000 --> 00:03:47.000
keep that in mind and then what we'll do

63
00:03:47.000 --> 00:03:52.009
is move the dynamic content generation into that method

64
00:03:52.009 --> 00:03:55.004
and we'll need to add another section

65
00:03:55.004 --> 00:03:58.005
to our catch clause in order for that to work.

66
00:03:58.005 --> 00:04:01.009
So we can catch the IO exception

67
00:04:01.009 --> 00:04:05.001
and then the final thing that we'll need to do

68
00:04:05.001 --> 00:04:11.001
is grab our async context within the new thread

69
00:04:11.001 --> 00:04:14.006
and mark it complete and that's going to cause

70
00:04:14.006 --> 00:04:19.002
the response to be returned back to the browser

71
00:04:19.002 --> 00:04:23.006
and then I'm going to add some additional logging here

72
00:04:23.006 --> 00:04:27.008
so we get some good insights into what's going on.

73
00:04:27.008 --> 00:04:33.006
At the bottom of the do post method I'm going to print out

74
00:04:33.006 --> 00:04:39.002
the name of a thread that handled the initial request

75
00:04:39.002 --> 00:04:42.008
so just a quick recap, we get a request in

76
00:04:42.008 --> 00:04:46.007
and that's handled in a thread one.

77
00:04:46.007 --> 00:04:50.006
We then use the async context to create thread two

78
00:04:50.006 --> 00:04:53.002
which is going to respond to the request.

79
00:04:53.002 --> 00:04:56.007
Now after we create our second thread,

80
00:04:56.007 --> 00:05:01.007
thread one keeps processing and we'll see it print out

81
00:05:01.007 --> 00:05:06.002
the console output here with its name.

82
00:05:06.002 --> 00:05:09.005
Okay so with all that in place, let's go ahead

83
00:05:09.005 --> 00:05:12.006
and we'll run our application.

84
00:05:12.006 --> 00:05:17.009
So I'll just right click, run as, and then run on server.

85
00:05:17.009 --> 00:05:23.004
There we can see our application starting up,

86
00:05:23.004 --> 00:05:29.005
and just so we can see this I'm going to open a browser.

87
00:05:29.005 --> 00:05:34.005
Okay so there's our form and then let's kind of get

88
00:05:34.005 --> 00:05:39.008
a side by side here with our console.

89
00:05:39.008 --> 00:05:45.008
Let me clear that and we'll use our responses

90
00:05:45.008 --> 00:05:51.003
shoes, awesome shoes and then 123 for the SKU.

91
00:05:51.003 --> 00:05:53.007
Now watch the delay here that happens.

92
00:05:53.007 --> 00:05:56.005
So there we see we started processing

93
00:05:56.005 --> 00:06:00.000
the initial request and now five seconds later

94
00:06:00.000 --> 00:06:03.005
we get the output back from the servlet.

95
00:06:03.005 --> 00:06:07.006
So this is a look at async support for servlets

96
00:06:07.006 --> 00:06:11.007
and we can leverage this when we need to conserve resources

97
00:06:11.007 --> 00:06:14.000
on our servlet container.

