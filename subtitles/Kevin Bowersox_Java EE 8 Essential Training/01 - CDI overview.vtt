WEBVTT
1
00:00:00.005 --> 00:00:04.001
- [Instructor] CDI or contexts and dependency injection

2
00:00:04.001 --> 00:00:07.002
was introduced in Java EE 6.

3
00:00:07.002 --> 00:00:10.001
The introduction of CDI provided Java developers

4
00:00:10.001 --> 00:00:14.001
with an alternative approach known as dependency injection

5
00:00:14.001 --> 00:00:16.006
for structuring their applications.

6
00:00:16.006 --> 00:00:19.003
There are two main concepts at the center of CDI,

7
00:00:19.003 --> 00:00:22.009
beans and dependency injection.

8
00:00:22.009 --> 00:00:24.000
Through Java's history

9
00:00:24.000 --> 00:00:26.005
there was always the concept of a bean.

10
00:00:26.005 --> 00:00:31.000
However, until Java EE 6 it wasn't clearly agreed upon.

11
00:00:31.000 --> 00:00:35.001
Java EE 6 introduced the managed bean standard

12
00:00:35.001 --> 00:00:38.006
which defines beans as non-static POJOs

13
00:00:38.006 --> 00:00:40.006
that contain business logic

14
00:00:40.006 --> 00:00:43.004
which are managed by a container.

15
00:00:43.004 --> 00:00:46.000
Managed beans can then be injected

16
00:00:46.000 --> 00:00:48.002
into other Java EE components,

17
00:00:48.002 --> 00:00:52.009
such as servlets, JAX-RS resources, and other beans.

18
00:00:52.009 --> 00:00:54.003
It's important to remember,

19
00:00:54.003 --> 00:00:56.008
that an object must be a bean

20
00:00:56.008 --> 00:00:59.009
to be used for dependency injection,

21
00:00:59.009 --> 00:01:04.002
which is the other core concept in CDI.

22
00:01:04.002 --> 00:01:08.001
Dependency injection changes how objects are created.

23
00:01:08.001 --> 00:01:09.005
Instead of creating objects

24
00:01:09.005 --> 00:01:11.007
using the new operator and constructor,

25
00:01:11.007 --> 00:01:16.001
the container instantiates objects as beans.

26
00:01:16.001 --> 00:01:19.005
Beans with dependencies on other objects

27
00:01:19.005 --> 00:01:23.004
rely upon the container to inject those objects

28
00:01:23.004 --> 00:01:26.005
instead of instantiating them themselves.

29
00:01:26.005 --> 00:01:29.002
So for example, the Bean A object

30
00:01:29.002 --> 00:01:31.008
has a dependency on Bean B.

31
00:01:31.008 --> 00:01:34.000
Using dependency injection

32
00:01:34.000 --> 00:01:38.007
the container injects Bean B into Bean A.

33
00:01:38.007 --> 00:01:41.005
We can indicate that a bean should be injected

34
00:01:41.005 --> 00:01:46.004
into a servlet or other bean using the Inject annotation.

35
00:01:46.004 --> 00:01:48.009
Where we place the Inject annotation

36
00:01:48.009 --> 00:01:51.008
is known as the injection point.

37
00:01:51.008 --> 00:01:53.009
When determining which bean to inject,

38
00:01:53.009 --> 00:01:57.000
the container considers the type of dependency

39
00:01:57.000 --> 00:02:01.001
and selects a bean of matching type for injection.

40
00:02:01.001 --> 00:02:02.006
Understanding these concepts

41
00:02:02.006 --> 00:02:06.001
will help you be successful with CDI.

42
00:02:06.001 --> 00:02:09.001
Within Java EE CDI's main features

43
00:02:09.001 --> 00:02:11.005
include dependency injection

44
00:02:11.005 --> 00:02:14.000
which is based upon the bean type.

45
00:02:14.000 --> 00:02:16.004
It also features contexts

46
00:02:16.004 --> 00:02:21.005
that define the scope of a bean within the CDI container.

47
00:02:21.005 --> 00:02:23.002
These features allow developers

48
00:02:23.002 --> 00:02:26.005
to create application code that is loosely coupled

49
00:02:26.005 --> 00:02:30.000
making the application more flexible and robust.

50
00:02:30.000 --> 00:02:32.007
Additionally CDI managed beans benefit

51
00:02:32.007 --> 00:02:34.008
from services provided by the container

52
00:02:34.008 --> 00:02:38.003
such as autodiscovery, qualifiers, scopes,

53
00:02:38.003 --> 00:02:42.004
and naming that can be leveraged by expression language.

54
00:02:42.004 --> 00:02:46.004
Within CDI there are two types of bean archives

55
00:02:46.004 --> 00:02:49.000
that use different discovery modes.

56
00:02:49.000 --> 00:02:52.004
The first type of bean archive is known as explicit

57
00:02:52.004 --> 00:02:55.004
because it explicitly defines the discovery mode

58
00:02:55.004 --> 00:03:00.003
in a beans.xml file located within the project.

59
00:03:00.003 --> 00:03:04.000
With discovery mode all every object is created

60
00:03:04.000 --> 00:03:06.008
as a bean within the archive.

61
00:03:06.008 --> 00:03:09.002
Implicit archives are the default.

62
00:03:09.002 --> 00:03:11.009
They do not contain a beans.xml file

63
00:03:11.009 --> 00:03:14.006
and they set the discovery mode to annotate it

64
00:03:14.006 --> 00:03:16.008
which causes only those beans

65
00:03:16.008 --> 00:03:19.003
with a bean defining annotation

66
00:03:19.003 --> 00:03:22.006
to be instantiated within the container.

67
00:03:22.006 --> 00:03:26.002
Bean-defining annotations include the scope annotations

68
00:03:26.002 --> 00:03:28.003
that we'll discuss next.

69
00:03:28.003 --> 00:03:32.001
Every bean has a scope which determines the life cycle

70
00:03:32.001 --> 00:03:36.006
of its instances and their visibility to other beans.

71
00:03:36.006 --> 00:03:38.009
The default scope is Dependent

72
00:03:38.009 --> 00:03:41.003
which causes a bean to assume the scope

73
00:03:41.003 --> 00:03:44.000
of the bean it's injected into.

74
00:03:44.000 --> 00:03:46.004
Request and Session scopes are used

75
00:03:46.004 --> 00:03:48.005
to tie the scope of a bean

76
00:03:48.005 --> 00:03:53.002
to either an HTTP request or an HTTP session.

77
00:03:53.002 --> 00:03:56.007
ApplicationScoped beans have a larger scope

78
00:03:56.007 --> 00:03:59.002
that causes a single instance of the bean

79
00:03:59.002 --> 00:04:02.008
to be shared across the entire application.

80
00:04:02.008 --> 00:04:06.008
Finally, the ConversationScoped bean is particular to JSF,

81
00:04:06.008 --> 00:04:09.004
and it's explicitly controlled by the developer

82
00:04:09.004 --> 00:04:11.008
through their application code.

83
00:04:11.008 --> 00:04:15.001
Now, sometimes we have ambiguity between our beans,

84
00:04:15.001 --> 00:04:17.004
they may share the same type.

85
00:04:17.004 --> 00:04:21.000
So within CDI you will find support for qualifiers

86
00:04:21.000 --> 00:04:22.006
which can instruct the container

87
00:04:22.006 --> 00:04:24.007
to inject a particular bean

88
00:04:24.007 --> 00:04:29.000
when multiple beans in the container have a similar type.

89
00:04:29.000 --> 00:04:32.004
This is necessary for resolving that ambiguity

90
00:04:32.004 --> 00:04:34.001
when we're injecting our beans

91
00:04:34.001 --> 00:04:37.005
because the default mechanism is type based.

92
00:04:37.005 --> 00:04:41.004
Additionally CDI allows us to build custom qualifiers

93
00:04:41.004 --> 00:04:45.004
which are type safe and they allow for more granular control

94
00:04:45.004 --> 00:04:48.007
of dependency injection within CDI.

95
00:04:48.007 --> 00:04:50.006
So that's an overview of CDI.

96
00:04:50.006 --> 00:04:53.000
Let's move into some examples.

