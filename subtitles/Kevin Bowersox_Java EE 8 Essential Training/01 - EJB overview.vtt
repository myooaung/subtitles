WEBVTT
1
00:00:00.005 --> 00:00:03.006
- Enterprise Java Beans, or EJBs,

2
00:00:03.006 --> 00:00:06.005
are another API within Java EE

3
00:00:06.005 --> 00:00:09.006
that provide a standard component architecture

4
00:00:09.006 --> 00:00:13.008
for building object-oriented business applications.

5
00:00:13.008 --> 00:00:17.005
An EJB is a reusable Java object

6
00:00:17.005 --> 00:00:19.009
that runs in a special runtime environment

7
00:00:19.009 --> 00:00:22.004
known as an EJB container.

8
00:00:22.004 --> 00:00:26.006
In the past EJBs needed to be accompanied by XML,

9
00:00:26.006 --> 00:00:29.004
or they needed to adopt a certain signature.

10
00:00:29.004 --> 00:00:31.004
But they've been greatly simplified

11
00:00:31.004 --> 00:00:34.009
in the latest versions of Java EE and have adopted

12
00:00:34.009 --> 00:00:38.006
a POJO-based approach that uses annotations.

13
00:00:38.006 --> 00:00:41.006
EJBs typically handle the application logic

14
00:00:41.006 --> 00:00:44.007
that supports business operations for a system,

15
00:00:44.007 --> 00:00:47.009
so you will typically find centralized processing logic

16
00:00:47.009 --> 00:00:50.003
that interacts with the database.

17
00:00:50.003 --> 00:00:52.009
This centralizes the system's business logic

18
00:00:52.009 --> 00:00:57.002
so that it can be reused by multiple clients.

19
00:00:57.002 --> 00:01:00.003
Because EJBs are managed in a container

20
00:01:00.003 --> 00:01:03.000
EJBs can benefit from additional services,

21
00:01:03.000 --> 00:01:05.009
such as transactions, connection pooling,

22
00:01:05.009 --> 00:01:10.009
or multithreading without writing explicit code.

23
00:01:10.009 --> 00:01:13.009
When architecting a system with EJBs

24
00:01:13.009 --> 00:01:16.007
an interface is defined for the EJB

25
00:01:16.007 --> 00:01:18.009
and an implementation is built.

26
00:01:18.009 --> 00:01:21.006
The EJBs often handle core logic

27
00:01:21.006 --> 00:01:24.002
and concerns like data persistence.

28
00:01:24.002 --> 00:01:28.006
The EJB implementation runs inside of the EJB container

29
00:01:28.006 --> 00:01:32.000
and is injected into other Java EE components,

30
00:01:32.000 --> 00:01:35.002
such as JSF backing beans or servlets

31
00:01:35.002 --> 00:01:39.000
through a JNDI lookup of the EJB.

32
00:01:39.000 --> 00:01:42.006
Once the EJB is injected into these components

33
00:01:42.006 --> 00:01:47.001
they can leverage the business services contained within EJB

34
00:01:47.001 --> 00:01:51.002
and benefit from the container-provided services.

35
00:01:51.002 --> 00:01:54.003
This pulls core business logic out of components

36
00:01:54.003 --> 00:01:55.005
running in the web tier

37
00:01:55.005 --> 00:01:58.007
so they can be centralized and reused.

38
00:01:58.007 --> 00:02:01.008
EJB has a long history with Java EE,

39
00:02:01.008 --> 00:02:05.009
and early versions of EJB were known to be quite complex

40
00:02:05.009 --> 00:02:08.003
requiring a substantial amount of XML

41
00:02:08.003 --> 00:02:10.002
to be written by the developer.

42
00:02:10.002 --> 00:02:14.007
As EJBs have matured they have become much simpler to use

43
00:02:14.007 --> 00:02:18.003
and deploy, mainly due to the annotation-based support

44
00:02:18.003 --> 00:02:21.008
introduced in EJB 3.0.

45
00:02:21.008 --> 00:02:24.004
I mentioned that EJBs can benefit from services

46
00:02:24.004 --> 00:02:26.001
provided by the container,

47
00:02:26.001 --> 00:02:28.003
here's a look at those services.

48
00:02:28.003 --> 00:02:32.001
When using EJBs we get features such as transactions,

49
00:02:32.001 --> 00:02:35.008
security, concurrency, networking, and persistence

50
00:02:35.008 --> 00:02:38.005
from the EJB container out of the box,

51
00:02:38.005 --> 00:02:41.005
and developers don't have to write out explicit code

52
00:02:41.005 --> 00:02:44.002
that handles these concerns.

53
00:02:44.002 --> 00:02:47.001
At a high level there are two types of EJBs,

54
00:02:47.001 --> 00:02:50.004
Session Beans and Message Driven Beans.

55
00:02:50.004 --> 00:02:53.008
Session Beans contain reusable application logic

56
00:02:53.008 --> 00:02:56.003
for our system and can be used by the client

57
00:02:56.003 --> 00:02:58.007
to perform core business operations.

58
00:02:58.007 --> 00:03:01.004
For example, an e-commerce application

59
00:03:01.004 --> 00:03:03.006
may have a Session Bean that manages

60
00:03:03.006 --> 00:03:07.004
the shopping cart interface for each client of the bean.

61
00:03:07.004 --> 00:03:10.005
Message Driven Beans are stateless components

62
00:03:10.005 --> 00:03:13.008
that run on the server side for processing messages

63
00:03:13.008 --> 00:03:18.000
delivered by the Java Messaging Service, or JMS.

64
00:03:18.000 --> 00:03:20.004
Let's see some of these concepts in action

65
00:03:20.004 --> 00:03:24.000
as we dive into the hands-on lessons.

66
00:03:24.000 --> 00:03:26.007
There are three distinct types of Session Beans

67
00:03:26.007 --> 00:03:29.002
that can be used in our applications.

68
00:03:29.002 --> 00:03:32.005
Stateful Session Beans are unique for every client

69
00:03:32.005 --> 00:03:35.000
and can contain state between calls

70
00:03:35.000 --> 00:03:37.006
that is specific to each client.

71
00:03:37.006 --> 00:03:41.002
Stateless Session Beans are not associated to the client

72
00:03:41.002 --> 00:03:45.002
and do not maintain any state specific to the client.

73
00:03:45.002 --> 00:03:47.008
Singleton Session Beans are instantiated

74
00:03:47.008 --> 00:03:50.005
once per the entire application,

75
00:03:50.005 --> 00:03:52.006
and any state within them is shared

76
00:03:52.006 --> 00:03:56.002
across all clients of the Singleton Bean.

77
00:03:56.002 --> 00:03:58.004
We'll see these concepts in action

78
00:03:58.004 --> 00:04:01.000
as we start to get hands on with EJBs.

