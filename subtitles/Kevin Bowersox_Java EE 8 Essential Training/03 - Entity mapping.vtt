WEBVTT
1
00:00:00.005 --> 00:00:03.007
- [Instructor] JPA providers use entity annotations

2
00:00:03.007 --> 00:00:07.009
to determine how to persist our entities to a database.

3
00:00:07.009 --> 00:00:10.007
Let's take a look at some of these annotations

4
00:00:10.007 --> 00:00:13.006
and map one of our entities.

5
00:00:13.006 --> 00:00:16.009
So here we have the catalog item class.

6
00:00:16.009 --> 00:00:19.001
It's just a basic POJO

7
00:00:19.001 --> 00:00:24.002
and we're going to turn this class into an entity

8
00:00:24.002 --> 00:00:28.007
by just adding the entity annotation.

9
00:00:28.007 --> 00:00:31.005
Another class-level annotation that we can add

10
00:00:31.005 --> 00:00:35.002
to our entities is the table annotation,

11
00:00:35.002 --> 00:00:39.001
and this allows us to specify the name of the table

12
00:00:39.001 --> 00:00:41.004
within the relational database

13
00:00:41.004 --> 00:00:44.000
that corresponds with this entity.

14
00:00:44.000 --> 00:00:47.009
So there you can see we are mapping the catalog item class

15
00:00:47.009 --> 00:00:52.002
to the catalog_item table within our database.

16
00:00:52.002 --> 00:00:55.004
Now we can move onto the field-level annotations,

17
00:00:55.004 --> 00:00:58.008
so we're going to use the ID annotation

18
00:00:58.008 --> 00:01:04.004
to indicate that the item ID is our primary key

19
00:01:04.004 --> 00:01:06.000
on this entity,

20
00:01:06.000 --> 00:01:09.007
and we can go ahead and specify the column name here.

21
00:01:09.007 --> 00:01:14.002
We'll just call this the catalog item underscore ID column.

22
00:01:14.002 --> 00:01:16.004
You'll notice it doesn't need to match up

23
00:01:16.004 --> 00:01:19.002
with the field name,

24
00:01:19.002 --> 00:01:20.005
and then for primary key columns,

25
00:01:20.005 --> 00:01:23.008
we use the generated annotation,

26
00:01:23.008 --> 00:01:28.005
and this is a way to indicate to the JPA provider

27
00:01:28.005 --> 00:01:33.002
that this key is going to be a surrogate key generated

28
00:01:33.002 --> 00:01:35.003
by some sort of mechanism.

29
00:01:35.003 --> 00:01:37.008
Relational databases have several different ways

30
00:01:37.008 --> 00:01:39.003
they can create these surrogate keys,

31
00:01:39.003 --> 00:01:43.000
whether that's through a sequence or an auto number.

32
00:01:43.000 --> 00:01:45.002
And in order to specify that,

33
00:01:45.002 --> 00:01:47.000
we can do several things.

34
00:01:47.000 --> 00:01:51.006
There's a strategy element on this annotation,

35
00:01:51.006 --> 00:01:53.002
and you can set it to several options.

36
00:01:53.002 --> 00:01:55.005
One of those is auto,

37
00:01:55.005 --> 00:02:01.005
and what that will do is specify a generation type,

38
00:02:01.005 --> 00:02:04.008
and that generation type has several options we can select.

39
00:02:04.008 --> 00:02:10.008
So auto will select the appropriate type just automatically

40
00:02:10.008 --> 00:02:15.004
and then identity is used when we have an auto number,

41
00:02:15.004 --> 00:02:17.006
and sequences are when we have a sequence

42
00:02:17.006 --> 00:02:19.005
within the database

43
00:02:19.005 --> 00:02:21.002
and then tables when the actual surrogate keys

44
00:02:21.002 --> 00:02:23.008
are tracked within a table in the database.

45
00:02:23.008 --> 00:02:25.003
That's not very common to use.

46
00:02:25.003 --> 00:02:29.002
So we're going to go ahead and set this to auto,

47
00:02:29.002 --> 00:02:35.007
so we'll allow the JPA provider to select the strategy

48
00:02:35.007 --> 00:02:40.004
based upon our underlying data store,

49
00:02:40.004 --> 00:02:42.009
and then we need to specify that annotation

50
00:02:42.009 --> 00:02:44.006
as generated value,

51
00:02:44.006 --> 00:02:47.007
and we can go ahead and import that.

52
00:02:47.007 --> 00:02:49.000
And then from here,

53
00:02:49.000 --> 00:02:52.006
it's as simple as mapping all of our columns.

54
00:02:52.006 --> 00:02:54.001
Now there are some defaults

55
00:02:54.001 --> 00:02:57.009
where it will automatically generate the column names.

56
00:02:57.009 --> 00:03:00.002
I like to explicitly provide these

57
00:03:00.002 --> 00:03:05.008
so that we can see the mapping to our underlying database.

58
00:03:05.008 --> 00:03:08.009
It definitely helps if you have other individuals working

59
00:03:08.009 --> 00:03:12.008
on the project and it can also be helpful for picking up

60
00:03:12.008 --> 00:03:15.009
on any errors that may be occurring.

61
00:03:15.009 --> 00:03:19.000
So we're just specifying the database column names

62
00:03:19.000 --> 00:03:22.008
that are associated with these different columns.

63
00:03:22.008 --> 00:03:27.008
So here, we'll assign the available date column

64
00:03:27.008 --> 00:03:30.005
to our available date field.

65
00:03:30.005 --> 00:03:33.003
Now one adjustment we need to make

66
00:03:33.003 --> 00:03:35.003
is you'll notice this constructor

67
00:03:35.003 --> 00:03:39.009
is now accepting an item ID.

68
00:03:39.009 --> 00:03:40.008
That's no longer going to be the case

69
00:03:40.008 --> 00:03:44.001
because instead of us kind of doing our own incrementing

70
00:03:44.001 --> 00:03:45.005
of the ID,

71
00:03:45.005 --> 00:03:49.007
we're going to allow the underlying relational database

72
00:03:49.007 --> 00:03:54.003
to create the surrogate key for our entity,

73
00:03:54.003 --> 00:03:55.006
so we're just going to go ahead,

74
00:03:55.006 --> 00:03:58.005
remove that logic from the constructor,

75
00:03:58.005 --> 00:04:01.001
and that's going to cause a few issues within our application,

76
00:04:01.001 --> 00:04:03.003
but it's nothing we can't fix.

77
00:04:03.003 --> 00:04:07.008
So there, you see an error within the JSF application

78
00:04:07.008 --> 00:04:10.006
and that's because we're calling this constructor

79
00:04:10.006 --> 00:04:14.000
and passing in our item ID.

80
00:04:14.000 --> 00:04:16.000
So let's just go ahead.

81
00:04:16.000 --> 00:04:17.002
We'll take that out

82
00:04:17.002 --> 00:04:19.004
and we no longer need this code.

83
00:04:19.004 --> 00:04:21.005
And then if we take a look,

84
00:04:21.005 --> 00:04:24.009
you'll see that our project compiles once again,

85
00:04:24.009 --> 00:04:29.006
and we have successfully mapped our first entity,

86
00:04:29.006 --> 00:04:30.007
the catalog item.

87
00:04:30.007 --> 00:04:35.009
So a JPA provider will be able to look at these annotations

88
00:04:35.009 --> 00:04:38.006
and generate the underlying SQL needed

89
00:04:38.006 --> 00:04:43.000
to perform all sorts of CRUD operations for this entity.

