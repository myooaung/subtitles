WEBVTT
1
00:00:00.005 --> 00:00:03.007
- [Instructor] The Java Persistence API, or JPA,

2
00:00:03.007 --> 00:00:08.000
is a Java EE API for accessing, persisting,

3
00:00:08.000 --> 00:00:12.002
and managing Java objects and a relational database.

4
00:00:12.002 --> 00:00:13.009
It is one of my favorite APIs

5
00:00:13.009 --> 00:00:15.008
because it makes it incredibly simple

6
00:00:15.008 --> 00:00:20.004
to perform CRUD operations against a relational data store.

7
00:00:20.004 --> 00:00:23.004
JPA supports object-relational mapping,

8
00:00:23.004 --> 00:00:27.003
which is a technique for using an annotated object model

9
00:00:27.003 --> 00:00:30.003
for persisting data to a relational database.

10
00:00:30.003 --> 00:00:33.009
This greatly simplifies how we read, write, update,

11
00:00:33.009 --> 00:00:37.005
and delete data in a database from our Java applications,

12
00:00:37.005 --> 00:00:40.008
which is also known as data persistence.

13
00:00:40.008 --> 00:00:42.007
Using object-relational mapping,

14
00:00:42.007 --> 00:00:45.003
it is possible to write Java applications

15
00:00:45.003 --> 00:00:47.007
that interact with a relational database

16
00:00:47.007 --> 00:00:50.001
without writing any SQL.

17
00:00:50.001 --> 00:00:53.004
When using JPA, developers only work with objects

18
00:00:53.004 --> 00:00:57.009
and the underlying SQL is handled by the JPA provider.

19
00:00:57.009 --> 00:01:01.005
It is important to note that JPA is just a specification

20
00:01:01.005 --> 00:01:02.008
or API.

21
00:01:02.008 --> 00:01:07.000
The underlying implementation is built by JPA providers.

22
00:01:07.000 --> 00:01:10.008
The most popular is hybernate, which is a JPA implementation

23
00:01:10.008 --> 00:01:12.008
provided by JBoss.

24
00:01:12.008 --> 00:01:16.008
JPA is typically broken down into four areas.

25
00:01:16.008 --> 00:01:20.003
the JPA API provides support for key objects

26
00:01:20.003 --> 00:01:22.000
such as the EntityManager,

27
00:01:22.000 --> 00:01:24.007
which is used to manage entities.

28
00:01:24.007 --> 00:01:26.009
We'll talk a little bit more about these concepts

29
00:01:26.009 --> 00:01:28.005
in a minute.

30
00:01:28.005 --> 00:01:32.003
The Java persistence query language, or JPQL,

31
00:01:32.003 --> 00:01:36.009
allows us to write a SQL-like query that is object-based.

32
00:01:36.009 --> 00:01:40.002
These queries work across database providers

33
00:01:40.002 --> 00:01:43.006
and are irrelevant to the underlying data store.

34
00:01:43.006 --> 00:01:48.003
The criteria API found in JPA provides a programmatic

35
00:01:48.003 --> 00:01:52.003
type-safe API for building queries against entities.

36
00:01:52.003 --> 00:01:54.004
It is very verbose to work with,

37
00:01:54.004 --> 00:01:56.004
but if you are looking for type-safety,

38
00:01:56.004 --> 00:01:58.007
it is the best option.

39
00:01:58.007 --> 00:02:01.002
Let's talk a little bit more about the concepts

40
00:02:01.002 --> 00:02:02.007
of an entity.

41
00:02:02.007 --> 00:02:06.003
An entity is an object that represents a table

42
00:02:06.003 --> 00:02:08.003
within your database schema.

43
00:02:08.003 --> 00:02:10.009
So if we have a customer table in the database,

44
00:02:10.009 --> 00:02:13.000
we'd normally create a customer class

45
00:02:13.000 --> 00:02:15.002
which would be the entity.

46
00:02:15.002 --> 00:02:19.004
Within the customer class, fields are created on the class

47
00:02:19.004 --> 00:02:23.008
that correspond with every column in the customer table.

48
00:02:23.008 --> 00:02:27.003
Annotations are then applied on the class and field

49
00:02:27.003 --> 00:02:31.004
to map them to the underlying relational database structure.

50
00:02:31.004 --> 00:02:34.000
These annotations denote the names of tables,

51
00:02:34.000 --> 00:02:35.009
columns, foreign keys,

52
00:02:35.009 --> 00:02:39.005
and information regarding relationships with other entities

53
00:02:39.005 --> 00:02:41.008
known as associations.

54
00:02:41.008 --> 00:02:44.003
When we execute a query with JPA,

55
00:02:44.003 --> 00:02:46.008
each row in the query will become an instance

56
00:02:46.008 --> 00:02:49.001
of the particular entity.

57
00:02:49.001 --> 00:02:52.000
It's also important to understand that entities work best

58
00:02:52.000 --> 00:02:53.004
with surrogate keys,

59
00:02:53.004 --> 00:02:58.008
so unique identifiers are created for each instance.

60
00:02:58.008 --> 00:03:00.009
Another key concept in the API

61
00:03:00.009 --> 00:03:04.001
is the EntityManager, which is the key interface

62
00:03:04.001 --> 00:03:08.005
for performing operations against the relational database.

63
00:03:08.005 --> 00:03:12.000
The EntityManager interface exposes a set of methods

64
00:03:12.000 --> 00:03:14.009
that accept entities or their IDs

65
00:03:14.009 --> 00:03:19.005
so they can be queried, inserted, updated, and deleted.

66
00:03:19.005 --> 00:03:22.006
Typically when working with the Java EE application server,

67
00:03:22.006 --> 00:03:25.006
the EntityManager is provided by the container

68
00:03:25.006 --> 00:03:30.004
and injected into beans as a dependency.

69
00:03:30.004 --> 00:03:31.006
So let's put it all together

70
00:03:31.006 --> 00:03:33.009
and introduce some more concepts.

71
00:03:33.009 --> 00:03:38.007
JPA applications are packaged with a persistence.xml file

72
00:03:38.007 --> 00:03:42.009
that provides configuration properties for the JPA provider

73
00:03:42.009 --> 00:03:46.003
and a definition of persistence units.

74
00:03:46.003 --> 00:03:49.004
The persistence unit is a logical grouping

75
00:03:49.004 --> 00:03:52.007
that contains metadata about the EntityManager,

76
00:03:52.007 --> 00:03:56.005
managed entities, and their associated mapping data.

77
00:03:56.005 --> 00:03:57.006
So just remember,

78
00:03:57.006 --> 00:04:00.003
the persistence unit contains all the information

79
00:04:00.003 --> 00:04:02.007
that can instruct an EntityManager

80
00:04:02.007 --> 00:04:07.004
on how to persist the entities into a relational database.

81
00:04:07.004 --> 00:04:10.003
An EntityManager is built using information

82
00:04:10.003 --> 00:04:11.008
in the persistence unit

83
00:04:11.008 --> 00:04:15.002
and associated with a persistence context.

84
00:04:15.002 --> 00:04:19.002
The persistence context contains the entity instances

85
00:04:19.002 --> 00:04:21.008
and manages their life cycle.

86
00:04:21.008 --> 00:04:24.003
Entities within the persistence context

87
00:04:24.003 --> 00:04:27.001
can then be persisted to the relational data store

88
00:04:27.001 --> 00:04:29.001
by the EntityManager.

89
00:04:29.001 --> 00:04:32.005
So that's an overview of how JPA works.

90
00:04:32.005 --> 00:04:35.007
Now let's talk a little bit more about JPQL.

91
00:04:35.007 --> 00:04:38.001
JPQL is very SQL-like,

92
00:04:38.001 --> 00:04:42.008
except the queries are written against the object model.

93
00:04:42.008 --> 00:04:45.005
Using JPQL, you can construct queries

94
00:04:45.005 --> 00:04:48.007
that perform select, update, and delete operations

95
00:04:48.007 --> 00:04:50.005
against the database.

96
00:04:50.005 --> 00:04:52.006
It's important to note the lack of support

97
00:04:52.006 --> 00:04:56.004
for insert operations with JPQL.

98
00:04:56.004 --> 00:05:00.000
Within JPQL queries, we can use corollaries

99
00:05:00.000 --> 00:05:01.009
for common relational functions

100
00:05:01.009 --> 00:05:05.003
like where clauses, like statements, parameters,

101
00:05:05.003 --> 00:05:09.003
aggregate operators, and even joins.

102
00:05:09.003 --> 00:05:12.007
Finally, let's talk about the CriteriaBuilder API.

103
00:05:12.007 --> 00:05:15.006
The CriteriaBuilder is limited to performing queries

104
00:05:15.006 --> 00:05:18.008
and is useful when a query needs to be dynamic

105
00:05:18.008 --> 00:05:22.001
such as when the where clause is built conditionally.

106
00:05:22.001 --> 00:05:24.005
Using the CriteriaBuilder for these situations

107
00:05:24.005 --> 00:05:28.002
is a little verbose, but it provides a type-safe way

108
00:05:28.002 --> 00:05:30.001
to build secure dynamic queries,

109
00:05:30.001 --> 00:05:33.003
which is a common requirement in applications.

110
00:05:33.003 --> 00:05:35.008
So that's a high-level look at JPA.

111
00:05:35.008 --> 00:05:38.001
Now we'll transition to the hands-on lessons

112
00:05:38.001 --> 00:05:41.000
to get some experience working with the API.

