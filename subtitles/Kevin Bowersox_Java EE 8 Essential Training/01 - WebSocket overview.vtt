WEBVTT
1
00:00:00.005 --> 00:00:02.003
- [Narrator] This chapter focuses on

2
00:00:02.003 --> 00:00:05.006
the Java EE WebSocket API.

3
00:00:05.006 --> 00:00:09.002
The WebSocket API is used to allow Java applications

4
00:00:09.002 --> 00:00:12.005
to communicate over the WebSocket protocol.

5
00:00:12.005 --> 00:00:13.006
Let's talk a little bit about

6
00:00:13.006 --> 00:00:15.006
that protocol before proceeding.

7
00:00:15.006 --> 00:00:17.008
Highly interactive web applications

8
00:00:17.008 --> 00:00:20.005
have increased the need for two-way communication

9
00:00:20.005 --> 00:00:23.002
between browsers and servers.

10
00:00:23.002 --> 00:00:25.006
These apps need data to be pushed

11
00:00:25.006 --> 00:00:28.000
from the server at will without

12
00:00:28.000 --> 00:00:30.008
the client initiating a request.

13
00:00:30.008 --> 00:00:33.004
The HTTP standard protocol for Internet communications

14
00:00:33.004 --> 00:00:37.000
is inefficient at filling this requirement

15
00:00:37.000 --> 00:00:39.009
and developers started building polling mechanisms

16
00:00:39.009 --> 00:00:41.007
that continuously ping the server

17
00:00:41.007 --> 00:00:44.008
from the browser to potentially retrieve data.

18
00:00:44.008 --> 00:00:46.003
Sometimes there was data,

19
00:00:46.003 --> 00:00:48.002
sometimes there wasn't.

20
00:00:48.002 --> 00:00:50.002
These mechanisms are inefficient,

21
00:00:50.002 --> 00:00:52.002
because many connections are created

22
00:00:52.002 --> 00:00:54.008
and HTTP headers were required to be sent

23
00:00:54.008 --> 00:00:56.008
with every request.

24
00:00:56.008 --> 00:00:59.001
The WebSockets Protocol was developed

25
00:00:59.001 --> 00:01:00.007
to address these needs,

26
00:01:00.007 --> 00:01:04.005
allowing bidirectional, full duplex communication

27
00:01:04.005 --> 00:01:08.005
between the browser and server over TCP.

28
00:01:08.005 --> 00:01:10.002
Under the WebSockets protocol,

29
00:01:10.002 --> 00:01:14.000
a client initiates the connection via HTTP,

30
00:01:14.000 --> 00:01:15.008
and then the connection is upgraded

31
00:01:15.008 --> 00:01:18.000
to the WebSockets protocol.

32
00:01:18.000 --> 00:01:20.007
Once connected, the server or client

33
00:01:20.007 --> 00:01:23.000
can send messages at any time

34
00:01:23.000 --> 00:01:26.003
without the client initiating the communication.

35
00:01:26.003 --> 00:01:28.002
This significantly reduces

36
00:01:28.002 --> 00:01:30.003
the number of connections required.

37
00:01:30.003 --> 00:01:32.002
The WebSockets protocol provides

38
00:01:32.002 --> 00:01:33.009
a better way to architect

39
00:01:33.009 --> 00:01:36.003
highly interactive web application,

40
00:01:36.003 --> 00:01:38.001
and support for the protocol is

41
00:01:38.001 --> 00:01:41.002
provided by Java EE's WebSockets API.

42
00:01:41.002 --> 00:01:43.005
Within the API,

43
00:01:43.005 --> 00:01:47.000
there are two approaches for working with WebSockets.

44
00:01:47.000 --> 00:01:50.000
The simplest approach is the annotation-based approach

45
00:01:50.000 --> 00:01:54.007
where annotations supporting WebSockets are added to POJOs.

46
00:01:54.007 --> 00:01:56.006
The programmatic approach requires

47
00:01:56.006 --> 00:02:00.000
developers to implement certain API interfaces

48
00:02:00.000 --> 00:02:02.002
for working with WebSockets.

49
00:02:02.002 --> 00:02:04.004
These interfaces handle connections,

50
00:02:04.004 --> 00:02:07.001
message sending, and consumption.

51
00:02:07.001 --> 00:02:08.007
Additionally, this approach requires

52
00:02:08.007 --> 00:02:11.005
some configuration classes to be created.

53
00:02:11.005 --> 00:02:13.000
It's a little bit more heavy weight than

54
00:02:13.000 --> 00:02:15.000
the annotation-based approach.

55
00:02:15.000 --> 00:02:17.005
We'll primarily be working with annotations

56
00:02:17.005 --> 00:02:19.004
throughout this chapter,

57
00:02:19.004 --> 00:02:22.002
and we'll use them to create WebSockets

58
00:02:22.002 --> 00:02:26.003
very easily and in a simplistic manner.

59
00:02:26.003 --> 00:02:28.007
In WebSockets, the connection is established

60
00:02:28.007 --> 00:02:32.009
between two peers who exchange messages bidirectionally.

61
00:02:32.009 --> 00:02:35.006
The Java EE API refers to the peer

62
00:02:35.006 --> 00:02:39.002
initiating the connection as the ClientEndpoint.

63
00:02:39.002 --> 00:02:43.002
An endpoint simply represents one side of the connection.

64
00:02:43.002 --> 00:02:45.009
The ServerEndpoint accepts the connection

65
00:02:45.009 --> 00:02:49.005
and then the two peers exchange messages over a session

66
00:02:49.005 --> 00:02:52.007
until one peer ends the connection.

67
00:02:52.007 --> 00:02:54.004
It's also important to understand

68
00:02:54.004 --> 00:02:56.004
that multiple peers may be connected

69
00:02:56.004 --> 00:02:58.002
to the ServerEndpoint.

70
00:02:58.002 --> 00:03:01.005
This allows the ServerEndpoint to broadcast messages

71
00:03:01.005 --> 00:03:04.005
to a group of peers simultaneously.

72
00:03:04.005 --> 00:03:07.001
When working with the Java WebSockets API,

73
00:03:07.001 --> 00:03:09.000
it is likely that you will be primarily

74
00:03:09.000 --> 00:03:11.000
working with ServerEndpoint,

75
00:03:11.000 --> 00:03:15.000
because the primary client is typically a web browser.

76
00:03:15.000 --> 00:03:17.001
Let's take a quick look at the annotations

77
00:03:17.001 --> 00:03:19.008
used to build WebSockets endpoints.

78
00:03:19.008 --> 00:03:21.009
The ServerEndpoint annotation

79
00:03:21.009 --> 00:03:25.004
is placed at the class level to create an endpoint.

80
00:03:25.004 --> 00:03:27.002
When the application is deployed,

81
00:03:27.002 --> 00:03:29.008
this class is then made available

82
00:03:29.008 --> 00:03:33.007
at the path specified in the annotation.

83
00:03:33.007 --> 00:03:36.008
The next four annotations that begin with on

84
00:03:36.008 --> 00:03:39.004
provide hooks into the different events

85
00:03:39.004 --> 00:03:41.006
in the endpoint's life cycle.

86
00:03:41.006 --> 00:03:43.003
They are annotated to a method

87
00:03:43.003 --> 00:03:46.000
to be invoked when a particular event occurs,

88
00:03:46.000 --> 00:03:47.009
sort of like a listener.

89
00:03:47.009 --> 00:03:50.001
These annotations provide hooks for

90
00:03:50.001 --> 00:03:52.004
when a Socket session is opened,

91
00:03:52.004 --> 00:03:54.003
we receive a message,

92
00:03:54.003 --> 00:03:56.000
or an error occurs,

93
00:03:56.000 --> 00:03:57.008
or the session is closed.

94
00:03:57.008 --> 00:03:59.005
Let's put this information to use

95
00:03:59.005 --> 00:04:02.000
as we get hands-on with some examples.

