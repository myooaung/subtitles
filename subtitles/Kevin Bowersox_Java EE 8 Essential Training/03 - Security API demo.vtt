WEBVTT
1
00:00:00.005 --> 00:00:02.004
- [Instructor] In this lesson, we're going to walk through

2
00:00:02.004 --> 00:00:07.000
a demonstration that uses the Java EE 8 security API

3
00:00:07.000 --> 00:00:09.000
to secure a servlet.

4
00:00:09.000 --> 00:00:11.005
Within the demonstration, we're going to use

5
00:00:11.005 --> 00:00:16.004
the three primary interfaces found within the security API.

6
00:00:16.004 --> 00:00:20.002
So we're going to build a custom identity store.

7
00:00:20.002 --> 00:00:24.000
We're also going to create a custom HTTP

8
00:00:24.000 --> 00:00:26.000
authentication mechanism.

9
00:00:26.000 --> 00:00:30.002
And then we're going to leverage the security context.

10
00:00:30.002 --> 00:00:34.006
So to get started, we're going to create a new class

11
00:00:34.006 --> 00:00:39.006
within the com.linkedin package found in our H Sports

12
00:00:39.006 --> 00:00:41.009
catalog security project.

13
00:00:41.009 --> 00:00:46.001
So just open up the dialogue to create a new class.

14
00:00:46.001 --> 00:00:50.002
And then we're going to name that class security config.

15
00:00:50.002 --> 00:00:52.000
We'll go ahead and create the class.

16
00:00:52.000 --> 00:00:55.000
And then we're going to apply some annotations here.

17
00:00:55.000 --> 00:00:58.007
We're going to add the named annotation

18
00:00:58.007 --> 00:01:03.000
and we're also going to specify that this class

19
00:01:03.000 --> 00:01:05.002
is application-scoped.

20
00:01:05.002 --> 00:01:07.007
So we've seen both of those before.

21
00:01:07.007 --> 00:01:11.008
And then we're going to introduce a new annotation

22
00:01:11.008 --> 00:01:14.002
from the security API.

23
00:01:14.002 --> 00:01:16.009
And that's the basic authentication

24
00:01:16.009 --> 00:01:19.008
mechanism definition annotation.

25
00:01:19.008 --> 00:01:24.002
And within that annotation, we're going to specify

26
00:01:24.002 --> 00:01:25.001
a realm name.

27
00:01:25.001 --> 00:01:27.005
And this points to a security realm

28
00:01:27.005 --> 00:01:31.004
within our WildFly server named local.

29
00:01:31.004 --> 00:01:35.003
So here we have established our authentication mechanism,

30
00:01:35.003 --> 00:01:38.007
very simple, using the annotation-based approach

31
00:01:38.007 --> 00:01:41.004
within the new security API.

32
00:01:41.004 --> 00:01:46.001
Now let's move on and we're going to create another class.

33
00:01:46.001 --> 00:01:48.004
And this class is going to be named

34
00:01:48.004 --> 00:01:51.006
the custom identity store.

35
00:01:51.006 --> 00:01:56.004
And we're going to implement the new identity

36
00:01:56.004 --> 00:01:58.000
store interface.

37
00:01:58.000 --> 00:01:59.005
So there you can see it within

38
00:01:59.005 --> 00:02:04.007
the java.security.enterprise.identitystore package.

39
00:02:04.007 --> 00:02:07.004
So we'll go ahead and put that in place.

40
00:02:07.004 --> 00:02:12.006
And then on that class, we're also going to add

41
00:02:12.006 --> 00:02:15.008
the named annotation as well as

42
00:02:15.008 --> 00:02:19.001
the application-scoped annotation.

43
00:02:19.001 --> 00:02:23.006
So these are going to be beans within our app.

44
00:02:23.006 --> 00:02:28.000
And then we're going to override one of the methods.

45
00:02:28.000 --> 00:02:32.007
So to do that just right-click, then go to source

46
00:02:32.007 --> 00:02:38.002
and then find the override method.

47
00:02:38.002 --> 00:02:40.009
And you'll see that right here.

48
00:02:40.009 --> 00:02:43.008
And then select the validate method.

49
00:02:43.008 --> 00:02:47.004
We're going to implement that method.

50
00:02:47.004 --> 00:02:50.008
Now, the first thing I'll do is remove the override

51
00:02:50.008 --> 00:02:53.006
because we're going to switch this up to use

52
00:02:53.006 --> 00:02:57.008
a username and password credential.

53
00:02:57.008 --> 00:03:00.006
And we'll go ahead, import that object.

54
00:03:00.006 --> 00:03:04.005
And now, we can use that credential to basically

55
00:03:04.005 --> 00:03:08.001
check that the user has valid credentials,

56
00:03:08.001 --> 00:03:11.001
that they are who they say they are and they are a valid

57
00:03:11.001 --> 00:03:12.006
user of the system.

58
00:03:12.006 --> 00:03:15.002
We're going to do a very simple check here.

59
00:03:15.002 --> 00:03:17.003
We're just going to take the credential,

60
00:03:17.003 --> 00:03:21.005
use its compare to method, and here we pass in the username,

61
00:03:21.005 --> 00:03:23.002
which is going to be Kevin.

62
00:03:23.002 --> 00:03:25.005
You can put your name if you'd like.

63
00:03:25.005 --> 00:03:29.007
And then we're going to specify a password of password.

64
00:03:29.007 --> 00:03:34.008
From here, this would be a successful login.

65
00:03:34.008 --> 00:03:43.001
So we can return a new credential validation result.

66
00:03:43.001 --> 00:03:48.002
And all we need to do is supply the name of the user

67
00:03:48.002 --> 00:03:52.008
and then we're going to create a hash set

68
00:03:52.008 --> 00:03:58.000
that is going to contain the roles of the user.

69
00:03:58.000 --> 00:04:01.005
So let's build out that new hash set.

70
00:04:01.005 --> 00:04:04.007
And we're just going to send in a list of the roles

71
00:04:04.007 --> 00:04:06.005
that the user has.

72
00:04:06.005 --> 00:04:08.008
So in this case, we're going to give this user

73
00:04:08.008 --> 00:04:15.005
the admin role as well as a basic user role.

74
00:04:15.005 --> 00:04:19.008
Okay, so there we have our logic in place

75
00:04:19.008 --> 00:04:24.004
that is going to check the user's name and password.

76
00:04:24.004 --> 00:04:29.002
And if they fail to provide a valid username

77
00:04:29.002 --> 00:04:32.006
and password, then we're going to use the credential

78
00:04:32.006 --> 00:04:37.007
validation result and you'll see a static invalid result

79
00:04:37.007 --> 00:04:39.006
that we can return.

80
00:04:39.006 --> 00:04:41.006
So we just want to indicate that

81
00:04:41.006 --> 00:04:44.000
it was an unsuccessful login.

82
00:04:44.000 --> 00:04:48.005
So that completes the setup of our custom identity store.

83
00:04:48.005 --> 00:04:51.009
Now we're going to turn to the servlet.

84
00:04:51.009 --> 00:04:54.004
And that's the actual resource

85
00:04:54.004 --> 00:04:56.006
that we're looking to protect.

86
00:04:56.006 --> 00:04:59.007
So on the servlet, we're going to do a few things.

87
00:04:59.007 --> 00:05:05.003
We're going to declare the roles that we will allow

88
00:05:05.003 --> 00:05:09.002
to access the servlet.

89
00:05:09.002 --> 00:05:12.003
And we can provide those as an array of strings.

90
00:05:12.003 --> 00:05:16.005
So admin as well as basic.

91
00:05:16.005 --> 00:05:18.006
And then the next thing we're going to do

92
00:05:18.006 --> 00:05:25.002
is add another annotation, the servlet security annotation.

93
00:05:25.002 --> 00:05:28.006
And here we're going to pass in a constraint.

94
00:05:28.006 --> 00:05:32.001
So these are the available roles and then this constraint

95
00:05:32.001 --> 00:05:37.003
is going to limit who can access the servlet.

96
00:05:37.003 --> 00:05:42.008
And on that HTTP constraint annotation, we're going

97
00:05:42.008 --> 00:05:47.001
to find a roles allowed element and we're simply

98
00:05:47.001 --> 00:05:50.009
going to specify that only the admin is allowed

99
00:05:50.009 --> 00:05:53.006
to access this servlet.

100
00:05:53.006 --> 00:05:57.006
Okay, so that has put our security in place.

101
00:05:57.006 --> 00:06:03.002
Now let's take a look at using the security context.

102
00:06:03.002 --> 00:06:08.004
So we can create a new field, security context,

103
00:06:08.004 --> 00:06:12.006
and be sure to choose the appropriate type.

104
00:06:12.006 --> 00:06:15.007
And we'll just call this our security context.

105
00:06:15.007 --> 00:06:20.004
And then we can go ahead and inject that object

106
00:06:20.004 --> 00:06:22.004
into our servlet.

107
00:06:22.004 --> 00:06:26.001
And that's going to contain information about the user

108
00:06:26.001 --> 00:06:28.003
such as their name.

109
00:06:28.003 --> 00:06:31.001
We can also get their roles from that.

110
00:06:31.001 --> 00:06:32.009
So let's do this.

111
00:06:32.009 --> 00:06:37.003
Let's within our output here, we're just going

112
00:06:37.003 --> 00:06:41.005
to identify the user, that way we can see

113
00:06:41.005 --> 00:06:44.007
that we have appropriately identified the user.

114
00:06:44.007 --> 00:06:49.001
We know who they are and we can print out their information.

115
00:06:49.001 --> 00:06:52.001
So we'll use the security context

116
00:06:52.001 --> 00:06:55.002
and on the security context, you'll see the get

117
00:06:55.002 --> 00:06:57.001
caller principle method.

118
00:06:57.001 --> 00:06:59.004
On there, we're going to get the name

119
00:06:59.004 --> 00:07:03.000
of the caller principle.

120
00:07:03.000 --> 00:07:06.006
Okay, so with all this in place, let's make sure

121
00:07:06.006 --> 00:07:10.003
everything is saved and then we're going to right-click

122
00:07:10.003 --> 00:07:13.004
on our H Sports catalog security project.

123
00:07:13.004 --> 00:07:17.003
Go to run as, run on server, and we're going to run it

124
00:07:17.003 --> 00:07:20.003
on our WildFly server.

125
00:07:20.003 --> 00:07:22.006
And I'll start opening a browser.

126
00:07:22.006 --> 00:07:27.001
And then it's going to be HTTP local host 8080

127
00:07:27.001 --> 00:07:33.004
and it will be at the context root hsports-catalog-security

128
00:07:33.004 --> 00:07:37.000
and then our servlet is accessed by providing

129
00:07:37.000 --> 00:07:41.002
the secure path after our context root, okay?

130
00:07:41.002 --> 00:07:45.000
So you can see I was prompted to provide credentials

131
00:07:45.000 --> 00:07:45.008
but let's go ahead.

132
00:07:45.008 --> 00:07:49.003
I'm going to enter something wrong here.

133
00:07:49.003 --> 00:07:51.008
And you'll notice that we are prevented

134
00:07:51.008 --> 00:07:54.005
from accessing the servlet.

135
00:07:54.005 --> 00:07:56.007
And then I'm going to go ahead and provide

136
00:07:56.007 --> 00:07:58.004
the right credentials.

137
00:07:58.004 --> 00:08:00.006
And you'll see that we were logged in.

138
00:08:00.006 --> 00:08:04.005
And the security context was able to identify us

139
00:08:04.005 --> 00:08:08.004
and we were able to retrieve information

140
00:08:08.004 --> 00:08:11.001
about the authenticated user.

141
00:08:11.001 --> 00:08:15.006
So that was a look at the Java EE 8 security API

142
00:08:15.006 --> 00:08:19.000
and how we can use it to protect our applications.

