WEBVTT
1
00:00:00.005 --> 00:00:03.004
- [Instructor] The Java API for RESTful web services

2
00:00:03.004 --> 00:00:05.009
or JAX-RS provides an API

3
00:00:05.009 --> 00:00:08.005
for development of web services built

4
00:00:08.005 --> 00:00:11.002
using the REST architectural style.

5
00:00:11.002 --> 00:00:13.008
Java EE developers can use JAX-RS

6
00:00:13.008 --> 00:00:15.005
to simplify the development

7
00:00:15.005 --> 00:00:18.009
of REST-based services using an approach centered

8
00:00:18.009 --> 00:00:23.007
around POJOs, annotations and the HTTP protocol.

9
00:00:23.007 --> 00:00:26.002
The JAX-RS API allows developers

10
00:00:26.002 --> 00:00:28.007
to built simple POJOs that are annotated

11
00:00:28.007 --> 00:00:31.008
to support the construction of a REST API.

12
00:00:31.008 --> 00:00:34.008
The annotations are primarily applied to classes known

13
00:00:34.008 --> 00:00:39.009
as resources and their methods known as resource methods.

14
00:00:39.009 --> 00:00:42.005
These classes provide an implementation

15
00:00:42.005 --> 00:00:45.007
for REST API resources and endpoints found

16
00:00:45.007 --> 00:00:48.003
in the design of an API.

17
00:00:48.003 --> 00:00:53.001
JAX-RS annotations map to parts of the HTTP request

18
00:00:53.001 --> 00:00:56.005
providing developers easy access to data sent

19
00:00:56.005 --> 00:00:57.008
in the request.

20
00:00:57.008 --> 00:00:59.003
This eliminates the need

21
00:00:59.003 --> 00:01:01.008
to parse an HTTP request.

22
00:01:01.008 --> 00:01:04.002
Most JAX-RS implementations

23
00:01:04.002 --> 00:01:06.009
are built on top of the servlet API.

24
00:01:06.009 --> 00:01:10.000
However, they abstract away lower level requests

25
00:01:10.000 --> 00:01:13.001
and response processing code necessary

26
00:01:13.001 --> 00:01:14.009
for working with servlets.

27
00:01:14.009 --> 00:01:18.002
Let's get a quick overview of how it works.

28
00:01:18.002 --> 00:01:20.008
The annotation-based approach in JAX-RS

29
00:01:20.008 --> 00:01:24.006
makes it easy to establish a JAX-RS application.

30
00:01:24.006 --> 00:01:27.009
Using the ApplicationPath annotation,

31
00:01:27.009 --> 00:01:31.001
we establish the base URI for endpoints

32
00:01:31.001 --> 00:01:34.006
or resource paths in the API.

33
00:01:34.006 --> 00:01:38.006
In this example, the HsportsRestApplication class

34
00:01:38.006 --> 00:01:42.001
is annotated with the ApplicationPath annotation

35
00:01:42.001 --> 00:01:45.000
and extends the Application class.

36
00:01:45.000 --> 00:01:52.009
This sets up the base path for the API as /hsports/api.

37
00:01:52.009 --> 00:01:56.006
JAX-RS REST APIs contain resources

38
00:01:56.006 --> 00:01:58.005
that correspond to objects

39
00:01:58.005 --> 00:02:03.000
within our domain that are exposed through API endpoints.

40
00:02:03.000 --> 00:02:06.001
To build a resource, we add the path annotation

41
00:02:06.001 --> 00:02:09.001
at the class level on a Java POJO

42
00:02:09.001 --> 00:02:13.003
to create an endpoint for accessing that resource.

43
00:02:13.003 --> 00:02:16.009
The path annotation is actually concatenated then

44
00:02:16.009 --> 00:02:18.007
with the base URI

45
00:02:18.007 --> 00:02:23.007
that we specified using the ApplicationPath annotation.

46
00:02:23.007 --> 00:02:25.003
Within the resource class,

47
00:02:25.003 --> 00:02:27.005
we create resource methods

48
00:02:27.005 --> 00:02:31.006
to handle the incoming HTTP calls to the API.

49
00:02:31.006 --> 00:02:34.007
When JAX-RS selects the appropriate resource method

50
00:02:34.007 --> 00:02:36.009
to handle an HTTP request,

51
00:02:36.009 --> 00:02:39.001
it uses these mapping annotations

52
00:02:39.001 --> 00:02:41.009
to determine which method to invoke.

53
00:02:41.009 --> 00:02:45.007
The GET annotation on our getItem resource method

54
00:02:45.007 --> 00:02:47.009
impacts this selection.

55
00:02:47.009 --> 00:02:51.003
It indicates that the getItem method

56
00:02:51.003 --> 00:02:54.006
will only handle HTTP GET requests

57
00:02:54.006 --> 00:02:57.004
so if we received an HTTP POST,

58
00:02:57.004 --> 00:03:00.001
this method would not be invoked.

59
00:03:00.001 --> 00:03:03.007
The Produces and Consumes annotations also impact

60
00:03:03.007 --> 00:03:07.002
how a resource method is selected.

61
00:03:07.002 --> 00:03:10.000
There is matching that occurs

62
00:03:10.000 --> 00:03:12.001
when we receive the request based

63
00:03:12.001 --> 00:03:15.007
upon the media types provided or consumed

64
00:03:15.007 --> 00:03:17.007
by a resource method.

65
00:03:17.007 --> 00:03:20.009
These map to the Accepts and Content-Type headers

66
00:03:20.009 --> 00:03:23.003
on the request.

67
00:03:23.003 --> 00:03:24.006
When building resources,

68
00:03:24.006 --> 00:03:27.001
we can apply the Path annotation

69
00:03:27.001 --> 00:03:29.002
at the resource method level

70
00:03:29.002 --> 00:03:33.008
to construct new endpoints within the resource class.

71
00:03:33.008 --> 00:03:37.000
Additionally, the Produces and Consumes annotations

72
00:03:37.000 --> 00:03:39.001
can be applied at the resource level

73
00:03:39.001 --> 00:03:43.004
for more granular control of our request mappings.

74
00:03:43.004 --> 00:03:47.003
The JAX-RS API contains additional annotations

75
00:03:47.003 --> 00:03:51.002
that allow us to map almost every part of the request,

76
00:03:51.002 --> 00:03:53.002
including path parameters,

77
00:03:53.002 --> 00:03:55.009
query parameters, cookies and headers

78
00:03:55.009 --> 00:03:58.003
from the HTTP request.

79
00:03:58.003 --> 00:04:00.005
You will see several of these in action

80
00:04:00.005 --> 00:04:02.006
in the upcoming lessons.

81
00:04:02.006 --> 00:04:04.006
Another great feature of JAX-RS

82
00:04:04.006 --> 00:04:07.002
is its support for custom serialization

83
00:04:07.002 --> 00:04:10.008
to the designated media type for custom objects.

84
00:04:10.008 --> 00:04:12.009
This example returns a custom POJO

85
00:04:12.009 --> 00:04:14.005
from the resource method

86
00:04:14.005 --> 00:04:20.008
which JAX-RS serializes to our defined media type JSON.

87
00:04:20.008 --> 00:04:23.008
So JAX-RS is able to handle the conversion

88
00:04:23.008 --> 00:04:27.001
from a Java object to a response format

89
00:04:27.001 --> 00:04:31.005
such as JSON without any code by the developer.

90
00:04:31.005 --> 00:04:35.004
On the contrary, JAX-RS supports deserialization

91
00:04:35.004 --> 00:04:38.003
of JSON to custom object types.

92
00:04:38.003 --> 00:04:40.008
This example deserializes the JSON

93
00:04:40.008 --> 00:04:44.007
in the request body to a custom item type specified

94
00:04:44.007 --> 00:04:47.007
as a parameter in the resource method.

95
00:04:47.007 --> 00:04:50.008
These features make JAX-RS a great option

96
00:04:50.008 --> 00:04:52.006
for Java EE developers

97
00:04:52.006 --> 00:04:56.009
that architect their applications using REST APIs.

98
00:04:56.009 --> 00:05:00.000
Let's take a closer look as we work throughout the chapter.

