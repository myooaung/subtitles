WEBVTT
1
00:00:00.005 --> 00:00:03.003
- [Instructor] The Java API for JSON processing,

2
00:00:03.003 --> 00:00:04.008
or JSON-P,

3
00:00:04.008 --> 00:00:08.006
is an API within Java EE that provides developers

4
00:00:08.006 --> 00:00:11.007
with additional support for working with JSON.

5
00:00:11.007 --> 00:00:12.007
Specifically,

6
00:00:12.007 --> 00:00:15.006
it provides support for parsing, generating,

7
00:00:15.006 --> 00:00:20.004
transforming, and querying JSON in Java applications.

8
00:00:20.004 --> 00:00:25.001
JSON-P contains two approaches JSON parsing and generation.

9
00:00:25.001 --> 00:00:27.000
One based on an object model

10
00:00:27.000 --> 00:00:29.008
and another based on a streaming model.

11
00:00:29.008 --> 00:00:32.003
The object model is a high-level API

12
00:00:32.003 --> 00:00:34.008
that is simple and easy to use.

13
00:00:34.008 --> 00:00:37.009
It provides the ability to read and create JSON

14
00:00:37.009 --> 00:00:40.002
using a key value based approach

15
00:00:40.002 --> 00:00:43.007
that is very similar to working with a map.

16
00:00:43.007 --> 00:00:46.006
While the object model is easier to use,

17
00:00:46.006 --> 00:00:49.007
it is not as efficient as the streaming-based API

18
00:00:49.007 --> 00:00:52.009
because objects are stored in memory.

19
00:00:52.009 --> 00:00:55.008
The streaming API is a low-level API

20
00:00:55.008 --> 00:00:59.003
designed to consume and produce large amounts of JSON

21
00:00:59.003 --> 00:01:02.007
using a parser based on an event model.

22
00:01:02.007 --> 00:01:04.008
It is more efficient because the processing

23
00:01:04.008 --> 00:01:08.002
avoids storing most of the JSON in memory.

24
00:01:08.002 --> 00:01:09.001
Additionally,

25
00:01:09.001 --> 00:01:11.000
within the API we'll find support

26
00:01:11.000 --> 00:01:13.007
for JSONPointer and JSONPatch.

27
00:01:13.007 --> 00:01:15.006
These allow us to traverse

28
00:01:15.006 --> 00:01:18.002
or modify sections of a JSON document

29
00:01:18.002 --> 00:01:21.001
with path-based expressions.

30
00:01:21.001 --> 00:01:24.007
Let's dive a little bit deeper into these approaches.

31
00:01:24.007 --> 00:01:27.004
Here we see an example of using the object model

32
00:01:27.004 --> 00:01:29.006
to build a JSON document.

33
00:01:29.006 --> 00:01:32.009
The object model uses a fluid builder API

34
00:01:32.009 --> 00:01:35.006
that allows us to easily chain message calls

35
00:01:35.006 --> 00:01:38.004
to build the two primary JSON structures,

36
00:01:38.004 --> 00:01:40.009
objects and arrays.

37
00:01:40.009 --> 00:01:43.005
Building a JSON object is pretty simple.

38
00:01:43.005 --> 00:01:45.004
We chain calls to the add method

39
00:01:45.004 --> 00:01:48.005
which accepts the property name as the first argument

40
00:01:48.005 --> 00:01:51.005
and the value as the second argument.

41
00:01:51.005 --> 00:01:54.006
You will notice objects can be nested within objects

42
00:01:54.006 --> 00:01:56.001
to build JSON documents,

43
00:01:56.001 --> 00:01:58.002
and the structure of our calls

44
00:01:58.002 --> 00:02:02.000
aligns to the format of a JSON document.

45
00:02:02.000 --> 00:02:03.001
Here we see an example

46
00:02:03.001 --> 00:02:06.008
of using the object model to read a JSON document.

47
00:02:06.008 --> 00:02:11.002
It uses a JSON reader to provide random access to properties

48
00:02:11.002 --> 00:02:13.001
using their property names.

49
00:02:13.001 --> 00:02:16.008
Similar to retrieving a value from a map with a key.

50
00:02:16.008 --> 00:02:18.007
When accessing property values,

51
00:02:18.007 --> 00:02:20.008
we have the option to access them

52
00:02:20.008 --> 00:02:23.004
via a JSON string for text values

53
00:02:23.004 --> 00:02:26.005
and a JSON number for numeric values.

54
00:02:26.005 --> 00:02:29.009
The JSON-P streaming API uses a different approach

55
00:02:29.009 --> 00:02:31.002
for working with JSON

56
00:02:31.002 --> 00:02:34.008
that is a little bit more verbose but more efficient.

57
00:02:34.008 --> 00:02:38.000
When using the streaming API to create a JSON object,

58
00:02:38.000 --> 00:02:39.007
we get a generator instance

59
00:02:39.007 --> 00:02:42.005
and then begin to write the object

60
00:02:42.005 --> 00:02:44.004
by invoking the write method

61
00:02:44.004 --> 00:02:48.001
with the property name and value as arguments.

62
00:02:48.001 --> 00:02:49.005
When using the generator,

63
00:02:49.005 --> 00:02:52.001
we need to explicitly start and end

64
00:02:52.001 --> 00:02:55.002
both objects and arrays.

65
00:02:55.002 --> 00:02:58.009
Let's now take a look at parsing using the streaming API.

66
00:02:58.009 --> 00:03:01.007
We'll use the same JSON document from the last slide

67
00:03:01.007 --> 00:03:03.005
in this example.

68
00:03:03.005 --> 00:03:06.000
When parsing using the streaming API,

69
00:03:06.000 --> 00:03:09.007
we must create a parser based off of a reader.

70
00:03:09.007 --> 00:03:10.005
From there,

71
00:03:10.005 --> 00:03:12.008
we use the parser to iterate the events

72
00:03:12.008 --> 00:03:14.007
in the JSON structure.

73
00:03:14.007 --> 00:03:16.005
If you look at the comments in the code

74
00:03:16.005 --> 00:03:19.000
you will see that as we iterate the object,

75
00:03:19.000 --> 00:03:20.007
we encounter different events

76
00:03:20.007 --> 00:03:23.006
that correspond with the document.

77
00:03:23.006 --> 00:03:26.004
The events indicate one of several types,

78
00:03:26.004 --> 00:03:30.000
including the start or close of an object or array,

79
00:03:30.000 --> 00:03:32.004
a key, or a value.

80
00:03:32.004 --> 00:03:35.002
If we want to retrieve a property name or value

81
00:03:35.002 --> 00:03:37.001
when iterating through the JSON,

82
00:03:37.001 --> 00:03:39.001
we can use several get methods

83
00:03:39.001 --> 00:03:41.007
that will type will type the value of that object

84
00:03:41.007 --> 00:03:45.005
at a particular location in the JSON structure.

85
00:03:45.005 --> 00:03:48.005
JSONPointer support is another feature found

86
00:03:48.005 --> 00:03:51.000
within the JSON-P API.

87
00:03:51.000 --> 00:03:54.002
It allows for easy access to JSON properties

88
00:03:54.002 --> 00:03:56.007
via a path-based expression,

89
00:03:56.007 --> 00:04:01.009
similar to how XPath can be used to access XML elements.

90
00:04:01.009 --> 00:04:03.007
So if we look at the JSON on the right,

91
00:04:03.007 --> 00:04:08.004
we can use our first expression to access the name property.

92
00:04:08.004 --> 00:04:11.006
Our second example illustrates how to traverse arrays

93
00:04:11.006 --> 00:04:14.000
using the expression.

94
00:04:14.000 --> 00:04:18.004
JSONPatch also uses the path-based expression approach.

95
00:04:18.004 --> 00:04:23.000
However, it uses it for modifications to the JSON document.

96
00:04:23.000 --> 00:04:24.003
Using JSONPatch,

97
00:04:24.003 --> 00:04:29.007
we can add, change, or remove properties on a JSON object.

98
00:04:29.007 --> 00:04:31.003
We'll see all of this in action

99
00:04:31.003 --> 00:04:34.000
as we work through the chapters in this lesson.

