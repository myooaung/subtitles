WEBVTT
1
00:00:00.005 --> 00:00:03.007
- [Narrator] JSON-P features an object model API

2
00:00:03.007 --> 00:00:06.004
that allows us to perform various operations

3
00:00:06.004 --> 00:00:09.003
for the JSON data type within Java.

4
00:00:09.003 --> 00:00:13.004
Using the object model API, we can create, read,

5
00:00:13.004 --> 00:00:16.004
and string JSON objects and array structures

6
00:00:16.004 --> 00:00:20.002
using its interface which follows a builder pattern.

7
00:00:20.002 --> 00:00:23.005
Let's take a look at how we can read JSON

8
00:00:23.005 --> 00:00:26.008
using the object model approach.

9
00:00:26.008 --> 00:00:30.001
Within our JAX-RS order resource,

10
00:00:30.001 --> 00:00:33.007
we've already written some JSON to a string.

11
00:00:33.007 --> 00:00:36.002
We're now going to go ahead and read that

12
00:00:36.002 --> 00:00:39.009
using JSON-P's object model.

13
00:00:39.009 --> 00:00:44.004
So to get started, we're going to create a JSON reader

14
00:00:44.004 --> 00:00:48.008
and the JSON reader implements the auto-closable interface

15
00:00:48.008 --> 00:00:52.003
so we're going to create it within a try block.

16
00:00:52.003 --> 00:00:57.003
To create a JSON reader, we simply use the JSON object

17
00:00:57.003 --> 00:01:01.004
and the create reader method to read an input stream

18
00:01:01.004 --> 00:01:05.000
and we're going to use a string reader

19
00:01:05.000 --> 00:01:09.001
in order to read the JSON string that we created.

20
00:01:09.001 --> 00:01:12.006
So let's go ahead, we'll import those types

21
00:01:12.006 --> 00:01:15.003
and now we have our JSON reader

22
00:01:15.003 --> 00:01:19.006
within the auto-closable syntax.

23
00:01:19.006 --> 00:01:23.006
Once we have our reader and it has the JSON string,

24
00:01:23.006 --> 00:01:26.007
we can create a JSON object

25
00:01:26.007 --> 00:01:30.002
and that JSON object's going to allow us

26
00:01:30.002 --> 00:01:34.007
to access the different properties of the JSON.

27
00:01:34.007 --> 00:01:38.008
So just declare a new object, of type JSON object,

28
00:01:38.008 --> 00:01:44.001
and then use the JSON reader to read the object

29
00:01:44.001 --> 00:01:46.007
and now we have a JSON object

30
00:01:46.007 --> 00:01:49.006
that uses JSON-P's object model

31
00:01:49.006 --> 00:01:54.002
and we can traverse into the different sections

32
00:01:54.002 --> 00:01:57.009
of our JSON document, so let's take a look at that.

33
00:01:57.009 --> 00:02:01.002
Here's our order, let's go ahead and retrieve

34
00:02:01.002 --> 00:02:03.008
the first name of the customer.

35
00:02:03.008 --> 00:02:09.007
So you'll notice that is nested within the customer property

36
00:02:09.007 --> 00:02:12.006
we can access the customer object

37
00:02:12.006 --> 00:02:17.002
by using the get JSON object method

38
00:02:17.002 --> 00:02:19.008
on our JSON object

39
00:02:19.008 --> 00:02:24.001
and here, we just specify the name of the property

40
00:02:24.001 --> 00:02:25.005
that we would like to access.

41
00:02:25.005 --> 00:02:30.009
So we're going to specify the customer property on the JSON

42
00:02:30.009 --> 00:02:34.000
and then from there, we can go ahead and print out

43
00:02:34.000 --> 00:02:39.001
the name of our customer by accessing the customer object

44
00:02:39.001 --> 00:02:43.001
which is a JSON object and then we can use

45
00:02:43.001 --> 00:02:46.002
one of the strongly typed get methods.

46
00:02:46.002 --> 00:02:48.003
So here, we can get a string,

47
00:02:48.003 --> 00:02:51.005
you see their support for various different types

48
00:02:51.005 --> 00:02:54.005
including numbers, and there's also integers.

49
00:02:54.005 --> 00:02:57.001
In our case, we're just fetching a string

50
00:02:57.001 --> 00:03:01.000
and all we have to do is provide the name of the property

51
00:03:01.000 --> 00:03:04.002
which, in our case, is first name.

52
00:03:04.002 --> 00:03:05.007
Okay, with that in place,

53
00:03:05.007 --> 00:03:08.009
we're ready to start our application and run a test

54
00:03:08.009 --> 00:03:10.004
and when we run our test,

55
00:03:10.004 --> 00:03:13.008
instead of seeing the entire JSON object printed out,

56
00:03:13.008 --> 00:03:18.000
we're just going to see the first name of the customer.

57
00:03:18.000 --> 00:03:21.006
'Kay, so there's our console starting up.

58
00:03:21.006 --> 00:03:24.005
Let's go ahead and we'll clear the console

59
00:03:24.005 --> 00:03:27.006
and then once again, I'm going to kick off the test

60
00:03:27.006 --> 00:03:29.006
with our power show

61
00:03:29.006 --> 00:03:34.007
and now if we take a look at our console output,

62
00:03:34.007 --> 00:03:40.005
we can scroll up and we see the customer name is printed out

63
00:03:40.005 --> 00:03:44.004
so we were able to use the JSON-P object model

64
00:03:44.004 --> 00:03:48.002
to access properties in a very math-like fashion

65
00:03:48.002 --> 00:03:51.000
just by using property names.

