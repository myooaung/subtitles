WEBVTT
1
00:00:00.005 --> 00:00:04.009
- The Java EE Security API is a new API introduced

2
00:00:04.009 --> 00:00:08.004
in Java EE 8 that simplifies and standardizes

3
00:00:08.004 --> 00:00:10.006
the security model.

4
00:00:10.006 --> 00:00:15.006
The Security API was introduced as part of JSR 375.

5
00:00:15.006 --> 00:00:18.000
It was meant to build a better security model

6
00:00:18.000 --> 00:00:22.004
that is portable across several Java EE technologies.

7
00:00:22.004 --> 00:00:25.004
The API takes an annotation-based approach,

8
00:00:25.004 --> 00:00:28.001
eliminating the need for configuration to be placed

9
00:00:28.001 --> 00:00:31.006
in a web.xml file moving forward.

10
00:00:31.006 --> 00:00:34.009
Prior to the Security API, container providers

11
00:00:34.009 --> 00:00:38.004
defined their own implementations which contain

12
00:00:38.004 --> 00:00:41.003
differing concepts and terminology.

13
00:00:41.003 --> 00:00:43.001
This made it difficult for developers

14
00:00:43.001 --> 00:00:45.006
to implement security.

15
00:00:45.006 --> 00:00:48.003
The changes introduced in the Security API

16
00:00:48.003 --> 00:00:50.007
allow security to be applied uniformly

17
00:00:50.007 --> 00:00:54.007
across containers for servlets and EJB.

18
00:00:54.007 --> 00:00:57.009
The first new interface introduced by the Security API

19
00:00:57.009 --> 00:01:02.003
that we'll cover is the HttpAuthenticationMechanism.

20
00:01:02.003 --> 00:01:05.002
It defines an interface for building authentication

21
00:01:05.002 --> 00:01:09.004
mechanisms that can be deployed using CDI.

22
00:01:09.004 --> 00:01:11.004
So, basically, this is a component

23
00:01:11.004 --> 00:01:14.000
that confirms the identity of a user,

24
00:01:14.000 --> 00:01:16.008
given their provided credentials.

25
00:01:16.008 --> 00:01:20.006
Within the Security API, there are three implementations

26
00:01:20.006 --> 00:01:24.006
provided out of the box that can be leveraged by developers.

27
00:01:24.006 --> 00:01:27.004
If none of the implementations are sufficient,

28
00:01:27.004 --> 00:01:30.003
developers can build their own implementation

29
00:01:30.003 --> 00:01:32.005
of the interface.

30
00:01:32.005 --> 00:01:34.005
The three built-in implementations

31
00:01:34.005 --> 00:01:39.003
of the HttpAuthenticationMechanism support basic, form,

32
00:01:39.003 --> 00:01:42.007
and a custom form authentication mechanism.

33
00:01:42.007 --> 00:01:45.004
On the interface, we find three methods,

34
00:01:45.004 --> 00:01:48.005
the most important of which is validateRequest,

35
00:01:48.005 --> 00:01:51.005
which is used to authenticate the caller.

36
00:01:51.005 --> 00:01:54.006
Another interface introduced by the Security API

37
00:01:54.006 --> 00:01:56.009
is the IdentityStore.

38
00:01:56.009 --> 00:01:59.009
The IdentityStore provides a uniform approach

39
00:01:59.009 --> 00:02:03.001
to working with stores of user credentials.

40
00:02:03.001 --> 00:02:05.008
So, typically we store credentials in something like

41
00:02:05.008 --> 00:02:07.009
a database or an LDAP,

42
00:02:07.009 --> 00:02:10.004
and the IdentityStore abstracts

43
00:02:10.004 --> 00:02:13.007
those user credential stores.

44
00:02:13.007 --> 00:02:16.000
The final major interface introduced

45
00:02:16.000 --> 00:02:20.007
by the Java EE Security API is the SecurityContext.

46
00:02:20.007 --> 00:02:23.007
It provides convenient access to information

47
00:02:23.007 --> 00:02:28.004
about the authenticated user within servlets and EJBs.

48
00:02:28.004 --> 00:02:31.005
Currently, servlets and EJBs have inconsistent

49
00:02:31.005 --> 00:02:34.004
approaches to obtaining the authenticated user

50
00:02:34.004 --> 00:02:38.000
and determining if they have specific roles.

51
00:02:38.000 --> 00:02:42.009
This inconsistency is remediated by the SecurityContext.

52
00:02:42.009 --> 00:02:46.004
Methods on the SecurityContext interface allow

53
00:02:46.004 --> 00:02:49.005
application code to retrieve user principles,

54
00:02:49.005 --> 00:02:52.000
check access to web resources,

55
00:02:52.000 --> 00:02:56.001
and determine if a caller has a particular role.

56
00:02:56.001 --> 00:02:57.007
Next, we're going to take a look

57
00:02:57.007 --> 00:03:00.000
at these interfaces in action.

