WEBVTT
1
00:00:00.000 --> 00:00:02.005
- [Narrator] The JSON processing API

2
00:00:02.005 --> 00:00:07.000
features a JSON generator as part of the streaming API.

3
00:00:07.000 --> 00:00:10.007
It can be used to write JSON objects to an output source

4
00:00:10.007 --> 00:00:12.006
in a streaming way.

5
00:00:12.006 --> 00:00:17.003
Let's take a look as we work within our order resource

6
00:00:17.003 --> 00:00:22.006
to use our JSON generator to build a new JSON object.

7
00:00:22.006 --> 00:00:26.002
So I'm going to remove all pre-existing code

8
00:00:26.002 --> 00:00:27.005
within this method

9
00:00:27.005 --> 00:00:32.004
and then what we'll do is build a streamlined order object

10
00:00:32.004 --> 00:00:35.009
that is generated using the JSON generator.

11
00:00:35.009 --> 00:00:37.003
Now there's better ways to do this,

12
00:00:37.003 --> 00:00:39.005
but it does give us a good experience

13
00:00:39.005 --> 00:00:42.003
working with the JSON generator

14
00:00:42.003 --> 00:00:46.000
so that we can see a lot of its features in action.

15
00:00:46.000 --> 00:00:48.007
Now when we work with the JSON generator,

16
00:00:48.007 --> 00:00:50.000
the first thing we need to do

17
00:00:50.000 --> 00:00:52.007
is have some sort of output source.

18
00:00:52.007 --> 00:00:56.009
In our case, that's going to be a string writer.

19
00:00:56.009 --> 00:01:00.008
So I'm going to go ahead and create a new string writer

20
00:01:00.008 --> 00:01:03.009
and then we can start to build our JSON generator.

21
00:01:03.009 --> 00:01:07.008
So we'll create an object of type JSON generator

22
00:01:07.008 --> 00:01:11.000
and I'm just going to name this 'generator'

23
00:01:11.000 --> 00:01:14.000
and then just like the other objects,

24
00:01:14.000 --> 00:01:19.000
we can create the generator from the JSON object

25
00:01:19.000 --> 00:01:22.006
and it accepts a writer that we can provide

26
00:01:22.006 --> 00:01:25.003
to that factory method

27
00:01:25.003 --> 00:01:28.007
and we'll just go ahead and import our JSON generator type

28
00:01:28.007 --> 00:01:31.004
and we're ready to start using it.

29
00:01:31.004 --> 00:01:34.006
I will point out that, like the other interfaces,

30
00:01:34.006 --> 00:01:37.003
it is using the AutoCloseable syntax

31
00:01:37.003 --> 00:01:41.001
so it's very nice that it cleans up the resources for us.

32
00:01:41.001 --> 00:01:43.003
All right, let's start writing some JSON.

33
00:01:43.003 --> 00:01:45.008
So using the generator,

34
00:01:45.008 --> 00:01:48.009
we start a JSON object

35
00:01:48.009 --> 00:01:53.008
by using the right start object method.

36
00:01:53.008 --> 00:01:57.004
And what I recommend is, any time you start an object,

37
00:01:57.004 --> 00:02:00.002
you immediately write the closing tag.

38
00:02:00.002 --> 00:02:05.006
It's very easy not to have these calls balanced out

39
00:02:05.006 --> 00:02:08.009
and then you generate a faulty JSON object.

40
00:02:08.009 --> 00:02:11.003
Once we've started our object,

41
00:02:11.003 --> 00:02:14.005
we can begin adding properties to it.

42
00:02:14.005 --> 00:02:17.005
Our first property's going to be the order ID

43
00:02:17.005 --> 00:02:21.000
so we can get the order ID from our order

44
00:02:21.000 --> 00:02:25.006
and then we're going to write another property

45
00:02:25.006 --> 00:02:29.009
on the object and it's going to be the store name.

46
00:02:29.009 --> 00:02:34.008
So we'll fetch the store name from the order

47
00:02:34.008 --> 00:02:38.008
and next, we're going to go ahead and use our generator

48
00:02:38.008 --> 00:02:42.009
to write the start of an array

49
00:02:42.009 --> 00:02:48.000
and we can provide a property name for the array.

50
00:02:48.000 --> 00:02:49.005
We're going to use items

51
00:02:49.005 --> 00:02:52.005
so that we match up with our object model

52
00:02:52.005 --> 00:02:54.008
and then we're immediately going to

53
00:02:54.008 --> 00:02:58.000
write the end of the array

54
00:02:58.000 --> 00:03:00.003
and then inside of the array,

55
00:03:00.003 --> 00:03:03.002
we're going to use the 'for each' construct

56
00:03:03.002 --> 00:03:07.006
and we're going to iterate through all of the items

57
00:03:07.006 --> 00:03:09.007
on the order.

58
00:03:09.007 --> 00:03:13.000
And then for each item in the order,

59
00:03:13.000 --> 00:03:17.005
we're going to build a new object.

60
00:03:17.005 --> 00:03:22.007
So let's create our start object,

61
00:03:22.007 --> 00:03:25.002
then from here,

62
00:03:25.002 --> 00:03:31.007
we can go ahead and write 'properties' on the object.

63
00:03:31.007 --> 00:03:36.005
So the first property that we're going to put on the object

64
00:03:36.005 --> 00:03:37.005
is the

65
00:03:37.005 --> 00:03:38.003
name

66
00:03:38.003 --> 00:03:41.005
of the item

67
00:03:41.005 --> 00:03:45.001
and then we're going to add one more property from the object

68
00:03:45.001 --> 00:03:47.007
and that is going

69
00:03:47.007 --> 00:03:55.006
to be the quantity that was ordered.

70
00:03:55.006 --> 00:03:56.009
Okay.

71
00:03:56.009 --> 00:04:00.003
So there we have our item

72
00:04:00.003 --> 00:04:02.001
and you'll notice I broke my own rule.

73
00:04:02.001 --> 00:04:05.000
I almost did not write the end of the object

74
00:04:05.000 --> 00:04:08.003
which would have caused an error

75
00:04:08.003 --> 00:04:13.001
and then let's make sure we write the end of our array

76
00:04:13.001 --> 00:04:17.007
and then we can proceed after that.

77
00:04:17.007 --> 00:04:22.005
And we're going to add another object here

78
00:04:22.005 --> 00:04:25.007
so we'll write the start of that object

79
00:04:25.007 --> 00:04:28.009
and this time, we're going to give that object

80
00:04:28.009 --> 00:04:30.008
a property name

81
00:04:30.008 --> 00:04:33.006
so we're going to have a customer property

82
00:04:33.006 --> 00:04:37.000
that has a value of an object

83
00:04:37.000 --> 00:04:40.003
and then on that object,

84
00:04:40.003 --> 00:04:44.000
we're going to add some more properties

85
00:04:44.000 --> 00:04:48.006
and this is going to be the customer's first name

86
00:04:48.006 --> 00:04:52.004
and then we can also go ahead, we'll add their last name.

87
00:04:52.004 --> 00:04:55.000
You can see how verbose this is.

88
00:04:55.000 --> 00:04:56.007
Now, it is very efficient

89
00:04:56.007 --> 00:05:00.002
so if you have a lot of JSON to be processing,

90
00:05:00.002 --> 00:05:02.001
this is definitely the best way to do it,

91
00:05:02.001 --> 00:05:04.003
from a resource perspective.

92
00:05:04.003 --> 00:05:07.003
And then let's write the end of that object

93
00:05:07.003 --> 00:05:12.001
and then at this point, let's just do a sanity check

94
00:05:12.001 --> 00:05:17.005
to make sure everything is closed out.

95
00:05:17.005 --> 00:05:21.002
Okay, our JSON appears to be balanced out.

96
00:05:21.002 --> 00:05:23.007
And now what we're going to do

97
00:05:23.007 --> 00:05:28.009
is we're going to call the flush method on the generator

98
00:05:28.009 --> 00:05:31.005
which will write the data out to the writer,

99
00:05:31.005 --> 00:05:33.002
if it already hasn't,

100
00:05:33.002 --> 00:05:36.008
and then we're going to use our JMS service

101
00:05:36.008 --> 00:05:38.000
to pass

102
00:05:38.000 --> 00:05:38.008
this

103
00:05:38.008 --> 00:05:40.002
message,

104
00:05:40.002 --> 00:05:42.003
or this JSON object,

105
00:05:42.003 --> 00:05:43.007
to

106
00:05:43.007 --> 00:05:45.009
our JMS queue.

107
00:05:45.009 --> 00:05:49.003
Okay, so we'll do that by invoking the two string method

108
00:05:49.003 --> 00:05:50.007
on the writer

109
00:05:50.007 --> 00:05:55.000
and now we're ready to go ahead and run this application.

110
00:05:55.000 --> 00:05:59.000
So let's spin up the console.

111
00:05:59.000 --> 00:06:01.001
Then I'm going to go ahead and we'll clear the console out

112
00:06:01.001 --> 00:06:03.004
so we can see our output.

113
00:06:03.004 --> 00:06:04.002
Okay,

114
00:06:04.002 --> 00:06:05.001
so

115
00:06:05.001 --> 00:06:06.008
the

116
00:06:06.008 --> 00:06:09.002
application is started.

117
00:06:09.002 --> 00:06:11.004
Let's watch our console, I'm going to clear it out

118
00:06:11.004 --> 00:06:13.005
so we can see our logging better.

119
00:06:13.005 --> 00:06:17.001
Then we'll go ahead, we'll run our PowerShell test

120
00:06:17.001 --> 00:06:20.003
and here we can see

121
00:06:20.003 --> 00:06:23.004
our console output, let's go ahead,

122
00:06:23.004 --> 00:06:26.000
take a look at what we got.

123
00:06:26.000 --> 00:06:30.003
So here you can see that we got our paired down order,

124
00:06:30.003 --> 00:06:34.005
we only received those items that we specified

125
00:06:34.005 --> 00:06:37.001
as far as the properties on that JSON

126
00:06:37.001 --> 00:06:39.008
that we've built with the JSON generator.

127
00:06:39.008 --> 00:06:43.007
So that concludes our lesson on using the JSON generator

128
00:06:43.007 --> 00:06:48.000
within the JSON-P streaming API.

