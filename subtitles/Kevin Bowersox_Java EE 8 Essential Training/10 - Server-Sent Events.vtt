WEBVTT
1
00:00:00.005 --> 00:00:04.000
- [Instructor] One of the feature found within Java EE 8

2
00:00:04.000 --> 00:00:08.007
is the support for server sent events within JAX-RS.

3
00:00:08.007 --> 00:00:11.002
Server sent events allow us to establish

4
00:00:11.002 --> 00:00:14.003
a one-way channel from a server to a client

5
00:00:14.003 --> 00:00:17.004
which can be reused to send multiple events.

6
00:00:17.004 --> 00:00:20.009
Let's take a look at how to use server sent events

7
00:00:20.009 --> 00:00:22.004
within our application.

8
00:00:22.004 --> 00:00:25.002
So, to get started, I'm going to open the

9
00:00:25.002 --> 00:00:29.007
"New" dialog and I'm going to create a resource.

10
00:00:29.007 --> 00:00:32.006
So, we'll advance to the next pane here

11
00:00:32.006 --> 00:00:34.008
and we'll provide a name for the resource.

12
00:00:34.008 --> 00:00:40.002
It's going to be the sseinventoryitemendpoint

13
00:00:40.002 --> 00:00:42.009
and then we can supply a path, which is going to be

14
00:00:42.009 --> 00:00:48.007
/sse/inventoryitems

15
00:00:48.007 --> 00:00:49.006
and then we're only going

16
00:00:49.006 --> 00:00:53.005
to support Jason, so I'm going to remove XML media type.

17
00:00:53.005 --> 00:00:56.005
And then we'll hit next and we can skip

18
00:00:56.005 --> 00:00:58.008
the creation of a JAX-RS application

19
00:00:58.008 --> 00:01:00.009
because we already have one.

20
00:01:00.009 --> 00:01:02.009
The first thing we'll do in this resource

21
00:01:02.009 --> 00:01:05.004
is change its scope to a singleton

22
00:01:05.004 --> 00:01:07.000
so there's going to be one instance

23
00:01:07.000 --> 00:01:09.000
for our entire application.

24
00:01:09.000 --> 00:01:14.004
Make sure you select the javx.inject.singleton type.

25
00:01:14.004 --> 00:01:18.007
Once that's in place, we can then go add a method

26
00:01:18.007 --> 00:01:21.005
that returns a void and we'll just call it

27
00:01:21.005 --> 00:01:26.006
sseitemquantity

28
00:01:26.006 --> 00:01:28.001
and then we can add

29
00:01:28.001 --> 00:01:30.008
some JAX-RS mapping annotations here.

30
00:01:30.008 --> 00:01:36.000
So it's going to respond to httpgets and then

31
00:01:36.000 --> 00:01:41.006
we're going to add a path on to this resource method.

32
00:01:41.006 --> 00:01:46.005
And that path is going to include a template parameter.

33
00:01:46.005 --> 00:01:51.009
And its going to be the InventoryItemId.

34
00:01:51.009 --> 00:01:55.004
And then the final annotation we need to add here

35
00:01:55.004 --> 00:01:59.008
is going to be the "produces" annotation,

36
00:01:59.008 --> 00:02:02.004
and it's really important for this

37
00:02:02.004 --> 00:02:06.001
server sent events method that we're building.

38
00:02:06.001 --> 00:02:11.003
We can specify the media type of SERVER_SENT_EVENTS,

39
00:02:11.003 --> 00:02:13.009
and that's definitely necessary for what we're

40
00:02:13.009 --> 00:02:16.002
going to be building here.

41
00:02:16.002 --> 00:02:18.001
And then we can start to build

42
00:02:18.001 --> 00:02:20.000
the parameter list here.

43
00:02:20.000 --> 00:02:23.009
So the first thing we'll do is get the PathParam,

44
00:02:23.009 --> 00:02:29.003
and that PathParam is associated with our InventoryItemId.

45
00:02:29.003 --> 00:02:32.003
We're going to assign that to a long,

46
00:02:32.003 --> 00:02:36.006
and we'll call that long the inventoryItemId.

47
00:02:36.006 --> 00:02:39.002
Then we'll hop down to another line here.

48
00:02:39.002 --> 00:02:40.009
The next thing, we're going to specify

49
00:02:40.009 --> 00:02:45.001
the context annotation because this next parameter,

50
00:02:45.001 --> 00:02:47.009
the SseEventSink is going to be

51
00:02:47.009 --> 00:02:53.002
injected into the method.

52
00:02:53.002 --> 00:02:56.009
And then the same for our next parameter,

53
00:02:56.009 --> 00:03:00.001
which is going to be the Sse parameter.

54
00:03:00.001 --> 00:03:02.004
So those are both types.

55
00:03:02.004 --> 00:03:04.007
We can go ahead and import them.

56
00:03:04.007 --> 00:03:09.007
And now we can start building out the body of this method.

57
00:03:09.007 --> 00:03:13.003
Let's give ourselves some space here.

58
00:03:13.003 --> 00:03:16.000
All right, so the first thing we're going to do is

59
00:03:16.000 --> 00:03:21.006
to create a try block because the SseEventSink

60
00:03:21.006 --> 00:03:24.001
needs to be closed once we're finished.

61
00:03:24.001 --> 00:03:29.002
So let's just assign that SseEventSink

62
00:03:29.002 --> 00:03:32.000
to an SseEventSink,

63
00:03:32.000 --> 00:03:33.004
and we can take advantage

64
00:03:33.004 --> 00:03:36.003
of the auto closeable nature there.

65
00:03:36.003 --> 00:03:41.000
All right, now we're going to create a for loop,

66
00:03:41.000 --> 00:03:44.007
and we'll just iterate, let's say 30 times,

67
00:03:44.007 --> 00:03:49.003
and then we're going to add some logic

68
00:03:49.003 --> 00:03:51.005
within the body of that for loop.

69
00:03:51.005 --> 00:03:54.001
I'm going to tell the thread to sleep

70
00:03:54.001 --> 00:03:57.000
just to add some lag here,

71
00:03:57.000 --> 00:03:59.008
and we'll sleep for about 1000 milliseconds.

72
00:03:59.008 --> 00:04:02.000
Surround that with a try catch,

73
00:04:02.000 --> 00:04:05.002
and then we can add some more logic.

74
00:04:05.002 --> 00:04:06.001
Okay.

75
00:04:06.001 --> 00:04:09.005
So, inside of the body of our for loop,

76
00:04:09.005 --> 00:04:14.001
we can add an OutboundSseEvent

77
00:04:14.001 --> 00:04:16.002
and we'll just name it event.

78
00:04:16.002 --> 00:04:22.001
And we can create that event using the SSE object.

79
00:04:22.001 --> 00:04:25.003
So here we can specify a new event,

80
00:04:25.003 --> 00:04:28.002
and then it just expects us to return some data

81
00:04:28.002 --> 00:04:29.008
of type: string.

82
00:04:29.008 --> 00:04:33.002
So, what I'm going to do is basically create

83
00:04:33.002 --> 00:04:37.003
a random integer with every iteration.

84
00:04:37.003 --> 00:04:41.001
So we can use a new random,

85
00:04:41.001 --> 00:04:44.009
and that random can give us the next int.

86
00:04:44.009 --> 00:04:49.003
We'll we get an integer between zero and 50,

87
00:04:49.003 --> 00:04:53.004
and at that point, we have created our event,

88
00:04:53.004 --> 00:04:58.000
and then we just use SseEventSink

89
00:04:58.000 --> 00:05:01.009
in order to send that event out to the client.

90
00:05:01.009 --> 00:05:04.000
So you're going to see the client connect

91
00:05:04.000 --> 00:05:07.002
and then it's going to continually get events

92
00:05:07.002 --> 00:05:10.009
and data sent by the server.

93
00:05:10.009 --> 00:05:14.004
Okay, with that in place, I'm going to go ahead

94
00:05:14.004 --> 00:05:19.002
and start our application.

95
00:05:19.002 --> 00:05:22.006
There we see the application start up.

96
00:05:22.006 --> 00:05:26.000
And let's open up a browser and then

97
00:05:26.000 --> 00:05:29.009
we're going to have to hit our JAX-RS application

98
00:05:29.009 --> 00:05:31.007
for this to work.

99
00:05:31.007 --> 00:05:35.006
So I'll just kind of cheat here and modify the URL

100
00:05:35.006 --> 00:05:40.006
for our JSF applications, so if you will recall

101
00:05:40.006 --> 00:05:45.008
the base for our API is hsports/api

102
00:05:45.008 --> 00:05:50.003
and then our path was sse/inventoryitems

103
00:05:50.003 --> 00:05:53.000
and then we had a path parameter.

104
00:05:53.000 --> 00:05:55.003
So let's go ahead send a get there

105
00:05:55.003 --> 00:05:56.005
and then you're going to see that we keep

106
00:05:56.005 --> 00:06:00.002
getting data roughly every second with a random number.

107
00:06:00.002 --> 00:06:02.007
And y'know, we're not requesting that every time.

108
00:06:02.007 --> 00:06:04.008
There's just a connection open and its being

109
00:06:04.008 --> 00:06:06.009
pushed by the server.

110
00:06:06.009 --> 00:06:09.006
So that's a look at how we can use the new

111
00:06:09.006 --> 00:06:12.009
server sent events feature found within JAX-RS

112
00:06:12.009 --> 00:06:16.000
that's included with Java EE 8.

