WEBVTT
1
00:00:00.005 --> 00:00:03.008
- [Instructor] JAX-RS 2.0 introduced the capability

2
00:00:03.008 --> 00:00:06.002
to make a resource method asynchronous,

3
00:00:06.002 --> 00:00:08.006
which allows developers to better utilize

4
00:00:08.006 --> 00:00:12.004
expensive resources like threads on a server.

5
00:00:12.004 --> 00:00:15.000
A typical resource method will hold a thread

6
00:00:15.000 --> 00:00:18.002
until a response is returned to the client.

7
00:00:18.002 --> 00:00:22.000
Using async, we can free up threads to perform processing

8
00:00:22.000 --> 00:00:25.002
while we wait for long running operations.

9
00:00:25.002 --> 00:00:29.005
Let's see this in action by adding an async resource method

10
00:00:29.005 --> 00:00:32.008
to our inventory items resource.

11
00:00:32.008 --> 00:00:35.004
To do that, we're going to create a copy

12
00:00:35.004 --> 00:00:39.009
of the find by catalog ID method

13
00:00:39.009 --> 00:00:43.002
on the class and once we do that,

14
00:00:43.002 --> 00:00:46.002
we'll need to change the name of the method.

15
00:00:46.002 --> 00:00:50.007
I'm just going to call it async find by catalog ID,

16
00:00:50.007 --> 00:00:54.001
and then async methods do not return anything,

17
00:00:54.001 --> 00:00:57.001
so we're going to change the type to void

18
00:00:57.001 --> 00:01:01.008
and then we'll go ahead and remove the body of the method.

19
00:01:01.008 --> 00:01:03.001
The next thing I'm going to do

20
00:01:03.001 --> 00:01:06.001
is remove the JAX-RS mapping annotations

21
00:01:06.001 --> 00:01:09.001
from the previous method.

22
00:01:09.001 --> 00:01:11.005
In order to indicate to JAX-RS

23
00:01:11.005 --> 00:01:14.005
that we would like a method to be asynchronous,

24
00:01:14.005 --> 00:01:18.004
we need to add the suspended annotation

25
00:01:18.004 --> 00:01:20.007
within the method's signature

26
00:01:20.007 --> 00:01:23.007
where we specify the method parameters

27
00:01:23.007 --> 00:01:28.006
and then we add a new object of type async response

28
00:01:28.006 --> 00:01:32.009
to the list of method parameters.

29
00:01:32.009 --> 00:01:35.005
So we'll go ahead and add that object

30
00:01:35.005 --> 00:01:40.000
and then we can start building out our asynchronous method.

31
00:01:40.000 --> 00:01:42.006
So the first thing we're going to do within this method

32
00:01:42.006 --> 00:01:47.003
is create a thread and we'll start that thread immediately.

33
00:01:47.003 --> 00:01:48.008
And then within the thread,

34
00:01:48.008 --> 00:01:52.000
we'll need to create a method named run

35
00:01:52.000 --> 00:01:54.009
that returns a void return type

36
00:01:54.009 --> 00:01:56.009
and then inside of that method,

37
00:01:56.009 --> 00:01:59.000
I'm just going to sleep the thread

38
00:01:59.000 --> 00:02:01.005
for about 5,000 milliseconds,

39
00:02:01.005 --> 00:02:05.005
and this is just to indicate a long running call.

40
00:02:05.005 --> 00:02:09.003
Now, once we've slept for 5,000 milliseconds,

41
00:02:09.003 --> 00:02:11.002
the next thing that we're going to do

42
00:02:11.002 --> 00:02:13.008
within the body of this method,

43
00:02:13.008 --> 00:02:17.006
is called the AR resume method.

44
00:02:17.006 --> 00:02:20.008
So this indicates to JAX-RS

45
00:02:20.008 --> 00:02:23.007
that our asynchronous resource method

46
00:02:23.007 --> 00:02:26.009
has a response to return.

47
00:02:26.009 --> 00:02:29.002
In this case, that's some point in the future,

48
00:02:29.002 --> 00:02:31.004
5,000 milliseconds.

49
00:02:31.004 --> 00:02:33.005
Now, we're going to leverage our existing

50
00:02:33.005 --> 00:02:37.001
find by catalog ID method.

51
00:02:37.001 --> 00:02:39.001
So we can just call that

52
00:02:39.001 --> 00:02:44.007
and it's going to return an inventory item.

53
00:02:44.007 --> 00:02:49.004
So that's the implementation for our async resource method.

54
00:02:49.004 --> 00:02:52.007
Now let's talk a little bit about how we call it.

55
00:02:52.007 --> 00:02:54.004
So to help us out with that,

56
00:02:54.004 --> 00:03:00.003
I've added a method onto our inventory service interface

57
00:03:00.003 --> 00:03:03.008
and it's the async get quantity method

58
00:03:03.008 --> 00:03:07.004
and that method is going to allow us

59
00:03:07.004 --> 00:03:11.008
to retrieve a future of type inventory item.

60
00:03:11.008 --> 00:03:14.005
So with a future, we're going to make the call

61
00:03:14.005 --> 00:03:16.007
and then at some point later,

62
00:03:16.007 --> 00:03:18.004
we will actually get the response.

63
00:03:18.004 --> 00:03:20.004
We're not sure when.

64
00:03:20.004 --> 00:03:24.008
Let's take a look at our remote inventory service

65
00:03:24.008 --> 00:03:29.002
and here we're going to build out the call

66
00:03:29.002 --> 00:03:32.006
to the asynchronous resource method on the API.

67
00:03:32.006 --> 00:03:35.003
So now we're looking at this from the client perspective,

68
00:03:35.003 --> 00:03:37.008
so somebody calling the API,

69
00:03:37.008 --> 00:03:41.009
and the JAX-RS client also allows us

70
00:03:41.009 --> 00:03:44.007
to make calls asynchronously.

71
00:03:44.007 --> 00:03:47.006
So what I'm going to do to provide that implementation

72
00:03:47.006 --> 00:03:53.002
is just copy the code within our get quantity method

73
00:03:53.002 --> 00:03:55.009
because it's going to be very similar

74
00:03:55.009 --> 00:03:59.007
and then we'll put that code into the body

75
00:03:59.007 --> 00:04:02.009
of our new async get quantity method.

76
00:04:02.009 --> 00:04:06.006
Okay, so in order to make a call asynchronous,

77
00:04:06.006 --> 00:04:11.002
we just add the async method

78
00:04:11.002 --> 00:04:15.003
between the request and the get methods.

79
00:04:15.003 --> 00:04:18.001
And we're no longer going to receive

80
00:04:18.001 --> 00:04:20.004
an inventory item immediately

81
00:04:20.004 --> 00:04:22.009
because the previous call was blocking.

82
00:04:22.009 --> 00:04:25.000
We were going to sit there, hold on to the thread

83
00:04:25.000 --> 00:04:27.008
until we got a response back from the API.

84
00:04:27.008 --> 00:04:29.009
We're no longer going to do that.

85
00:04:29.009 --> 00:04:31.004
We're going to get a future back

86
00:04:31.004 --> 00:04:33.008
that's going to say at some point later,

87
00:04:33.008 --> 00:04:38.002
you will get the response, it's just not going to be now.

88
00:04:38.002 --> 00:04:43.002
So we're going to go ahead and remove our return statement

89
00:04:43.002 --> 00:04:46.000
and then we're going to return

90
00:04:46.000 --> 00:04:50.003
the result of our asynchronous method call

91
00:04:50.003 --> 00:04:52.009
from our JAX-RS client.

92
00:04:52.009 --> 00:04:55.001
Okay, so that's going to change things

93
00:04:55.001 --> 00:04:58.005
in the backing bean that calls this method.

94
00:04:58.005 --> 00:05:00.009
So let's head over there

95
00:05:00.009 --> 00:05:04.002
and here we have the catalog item detail bean.

96
00:05:04.002 --> 00:05:06.004
You'll remember, this is the bean

97
00:05:06.004 --> 00:05:10.003
that is used to fetch the quantity

98
00:05:10.003 --> 00:05:13.006
for a particular item and it displays it

99
00:05:13.006 --> 00:05:15.002
on the user interface.

100
00:05:15.002 --> 00:05:16.009
Now within this method,

101
00:05:16.009 --> 00:05:18.008
we need to switch things up a little.

102
00:05:18.008 --> 00:05:21.003
So we're going to get our future

103
00:05:21.003 --> 00:05:25.007
that has a generic type of inventory item

104
00:05:25.007 --> 00:05:28.001
and we'll just call that future,

105
00:05:28.001 --> 00:05:29.005
and then here we'll invoke

106
00:05:29.005 --> 00:05:32.007
the asynchronous version of our method

107
00:05:32.007 --> 00:05:38.009
and we'll pass in the item ID.

108
00:05:38.009 --> 00:05:41.001
And then just so you can grasp the concept,

109
00:05:41.001 --> 00:05:42.007
what I'm going to do here

110
00:05:42.007 --> 00:05:46.005
is add a little bit of logging to our console,

111
00:05:46.005 --> 00:05:48.004
so we'll just say we're doing other work

112
00:05:48.004 --> 00:05:50.005
because we're no longer going to block here.

113
00:05:50.005 --> 00:05:53.006
We're going to make the call and then continue execution

114
00:05:53.006 --> 00:05:55.008
within our current thread.

115
00:05:55.008 --> 00:05:58.004
Now, eventually we will need to block

116
00:05:58.004 --> 00:06:02.003
so here where we assign the quantity,

117
00:06:02.003 --> 00:06:05.005
we're going to call the get method on the future

118
00:06:05.005 --> 00:06:10.007
that will cause the execution of the thread to block

119
00:06:10.007 --> 00:06:13.004
and we can get our inventory item

120
00:06:13.004 --> 00:06:14.003
and then I'm going to go ahead

121
00:06:14.003 --> 00:06:16.006
and retrieve the quantity from that.

122
00:06:16.006 --> 00:06:19.003
Now, the future can throw an exception

123
00:06:19.003 --> 00:06:22.004
so we need to add that to the throws clause

124
00:06:22.004 --> 00:06:25.000
on our method's signature,

125
00:06:25.000 --> 00:06:29.005
and then I'll just add a little bit more debugging here

126
00:06:29.005 --> 00:06:32.006
so that we can see that we completed the request.

127
00:06:32.006 --> 00:06:35.004
Okay, let's go ahead, save that

128
00:06:35.004 --> 00:06:40.007
and now we're going to start our application

129
00:06:40.007 --> 00:06:44.000
and then I'm going to go ahead and open up a web browser.

130
00:06:44.000 --> 00:06:47.004
So there we see the application starting.

131
00:06:47.004 --> 00:06:50.002
I'll go ahead and expand our console and clear it

132
00:06:50.002 --> 00:06:54.002
and then we're going to navigate to the application

133
00:06:54.002 --> 00:06:59.006
and we're just going to enter an item

134
00:06:59.006 --> 00:07:02.004
and then we'll submit the item so it's created.

135
00:07:02.004 --> 00:07:04.003
There we see the calls to the REST API

136
00:07:04.003 --> 00:07:06.002
to create the resource

137
00:07:06.002 --> 00:07:09.006
and now when we navigate to the item's page,

138
00:07:09.006 --> 00:07:13.000
you'll notice we're waiting about 5,000 seconds

139
00:07:13.000 --> 00:07:15.009
and then we transition over to the page

140
00:07:15.009 --> 00:07:18.003
and we get our quantity.

141
00:07:18.003 --> 00:07:19.003
Now let's take a look at

142
00:07:19.003 --> 00:07:21.005
what was happening in the logs here.

143
00:07:21.005 --> 00:07:26.008
So you can see we made the request to the API

144
00:07:26.008 --> 00:07:28.006
and then the thread continued.

145
00:07:28.006 --> 00:07:30.004
We were doing other work

146
00:07:30.004 --> 00:07:32.003
and then eventually the thread came back

147
00:07:32.003 --> 00:07:34.004
and completed the request.

148
00:07:34.004 --> 00:07:40.003
So this is an example of using the asynchronous features

149
00:07:40.003 --> 00:07:44.007
of JAX-RS including building asynchronous resource methods

150
00:07:44.007 --> 00:07:48.004
and also building out calls

151
00:07:48.004 --> 00:07:51.000
with the client in an async nature.

