WEBVTT
1
00:00:00.005 --> 00:00:02.006
- [Instructor] Within the Bean Validation API

2
00:00:02.006 --> 00:00:06.001
we're able to apply constraint annotations

3
00:00:06.001 --> 00:00:08.002
on other annotations.

4
00:00:08.002 --> 00:00:10.009
It's a way of building a custom validator

5
00:00:10.009 --> 00:00:13.007
within the Bean Validation API.

6
00:00:13.007 --> 00:00:16.007
This is very useful if we have some validation

7
00:00:16.007 --> 00:00:19.009
that's going to be applied over and over

8
00:00:19.009 --> 00:00:22.000
throughout our application.

9
00:00:22.000 --> 00:00:25.001
So for instance, here we have a regex

10
00:00:25.001 --> 00:00:29.000
that basically checks whether or not a string is alphabetic.

11
00:00:29.000 --> 00:00:31.007
That could be a very common validation.

12
00:00:31.007 --> 00:00:35.000
So let's go ahead and build another annotation

13
00:00:35.000 --> 00:00:38.008
that will apply that validation and make it reusable

14
00:00:38.008 --> 00:00:40.008
throughout our application.

15
00:00:40.008 --> 00:00:44.004
So what we're going to do within our com.linkedin package

16
00:00:44.004 --> 00:00:48.006
in the EJB project, we're just going to open the new dialog

17
00:00:48.006 --> 00:00:51.006
and we're going to create a plain annotation.

18
00:00:51.006 --> 00:00:54.002
So just select the Annotation under Java,

19
00:00:54.002 --> 00:00:56.005
hit Next, and then we're going to

20
00:00:56.005 --> 00:00:59.002
name this annotation Alphabetic.

21
00:00:59.002 --> 00:01:02.006
You'll want to set the retention to runtime.

22
00:01:02.006 --> 00:01:04.008
And then you can go ahead and select

23
00:01:04.008 --> 00:01:07.002
the Type, Field, Method, Parameter,

24
00:01:07.002 --> 00:01:11.001
Constructor, and Annotation type objects

25
00:01:11.001 --> 00:01:13.000
for the target of this annotation

26
00:01:13.000 --> 00:01:16.007
that specifies where it can be applied to.

27
00:01:16.007 --> 00:01:18.004
We'll then go ahead and hit finish.

28
00:01:18.004 --> 00:01:22.009
And that's going to build our alphabetic annotation,

29
00:01:22.009 --> 00:01:27.002
but we do need to add some additional annotations to this.

30
00:01:27.002 --> 00:01:31.004
So we're going to add the documented annotation.

31
00:01:31.004 --> 00:01:37.006
And then we're also going to add the constraint annotation.

32
00:01:37.006 --> 00:01:41.003
And here we'll have to specify the validatedBy element.

33
00:01:41.003 --> 00:01:43.005
We can just leave that as an empty array.

34
00:01:43.005 --> 00:01:46.003
It really doesn't apply here, but it's required.

35
00:01:46.003 --> 00:01:52.002
And then finally we're able to use the pattern annotation.

36
00:01:52.002 --> 00:01:56.007
So this annotation we've already seen it in action,

37
00:01:56.007 --> 00:02:00.000
but what we haven't seen is there's a list field

38
00:02:00.000 --> 00:02:02.008
on this annotation, and this allows us

39
00:02:02.008 --> 00:02:05.007
to list different patterns that we would like

40
00:02:05.007 --> 00:02:10.009
to apply when we use our new custom built validator.

41
00:02:10.009 --> 00:02:12.008
So we've already seen that pattern.

42
00:02:12.008 --> 00:02:16.005
So let's go over to the manufacturer field

43
00:02:16.005 --> 00:02:20.007
and grab the pattern we'd like to apply.

44
00:02:20.007 --> 00:02:22.009
So we can just reuse that.

45
00:02:22.009 --> 00:02:27.006
Okay, so now we need to add a couple elements

46
00:02:27.006 --> 00:02:29.005
within this annotation.

47
00:02:29.005 --> 00:02:36.002
The first, we need to add a String that is named message,

48
00:02:36.002 --> 00:02:39.002
and then we're going to default this

49
00:02:39.002 --> 00:02:41.008
to actually an expression.

50
00:02:41.008 --> 00:02:44.000
And we'll talk about that here in a minute.

51
00:02:44.000 --> 00:02:48.003
We'll just call it invalid alphabetic.

52
00:02:48.003 --> 00:02:51.009
Then we need to create an array of classes.

53
00:02:51.009 --> 00:02:55.002
And these are going to be the groups

54
00:02:55.002 --> 00:02:59.000
that we can provide for this annotation to apply to.

55
00:02:59.000 --> 00:03:02.004
We saw those in the overview.

56
00:03:02.004 --> 00:03:05.009
K, and we'll just default that to an empty array.

57
00:03:05.009 --> 00:03:13.001
And then finally we need to add the payload.

58
00:03:13.001 --> 00:03:15.002
And these are all just default things

59
00:03:15.002 --> 00:03:19.000
that typically get placed in every annotation

60
00:03:19.000 --> 00:03:25.007
that's going to be a constraint.

61
00:03:25.007 --> 00:03:28.006
We'll go ahead and import the payload type.

62
00:03:28.006 --> 00:03:31.003
And then let's grab this expression,

63
00:03:31.003 --> 00:03:36.007
and we're going to replace our static string that

64
00:03:36.007 --> 00:03:41.001
is serving us the message within our pattern annotation

65
00:03:41.001 --> 00:03:42.009
using that expression.

66
00:03:42.009 --> 00:03:45.009
Now the question is where does that value come from?

67
00:03:45.009 --> 00:03:50.000
Well, within the validation API

68
00:03:50.000 --> 00:03:52.004
we can use a properties file.

69
00:03:52.004 --> 00:03:55.003
And that properties file has to be located

70
00:03:55.003 --> 00:03:58.007
within the root of your class path.

71
00:03:58.007 --> 00:04:04.004
So let's just go ahead and we will make a new file.

72
00:04:04.004 --> 00:04:08.007
And within this file we can place different properties

73
00:04:08.007 --> 00:04:12.000
that allow us to pull out the validation messages.

74
00:04:12.000 --> 00:04:18.004
So this file is named ValidationMessages.properties.

75
00:04:18.004 --> 00:04:20.002
And this is by default.

76
00:04:20.002 --> 00:04:23.003
So if you want to go with the default name for this file

77
00:04:23.003 --> 00:04:25.002
that's what you'll have to use.

78
00:04:25.002 --> 00:04:27.004
And then clicking on Source here's where

79
00:04:27.004 --> 00:04:30.008
we can provide those property values.

80
00:04:30.008 --> 00:04:34.009
So here's our invalid.alphabetic property.

81
00:04:34.009 --> 00:04:40.000
And then we can just say that it must be letters.

82
00:04:40.000 --> 00:04:43.008
And with that message in place that completes

83
00:04:43.008 --> 00:04:47.001
the configuration of our custom validator.

84
00:04:47.001 --> 00:04:50.001
So there we can see the annotation,

85
00:04:50.001 --> 00:04:54.008
and we now just need to replace our pattern

86
00:04:54.008 --> 00:04:57.007
with our new custom validator.

87
00:04:57.007 --> 00:05:01.007
So much easier to put an alphabetic annotation on there

88
00:05:01.007 --> 00:05:04.001
than to actually write out the regex

89
00:05:04.001 --> 00:05:06.004
where you may make a mistake.

90
00:05:06.004 --> 00:05:09.007
So let's now

91
00:05:09.007 --> 00:05:11.009
run our application.

92
00:05:11.009 --> 00:05:15.001
So I'll just right click on the ear file,

93
00:05:15.001 --> 00:05:18.000
go to run as, run on server,

94
00:05:18.000 --> 00:05:19.006
and then I'll start opening a browser

95
00:05:19.006 --> 00:05:22.006
so we can test this out.

96
00:05:22.006 --> 00:05:25.002
Okay, so let's go ahead.

97
00:05:25.002 --> 00:05:27.005
We'll enter a product,

98
00:05:27.005 --> 00:05:30.003
and then we're going to enter some invalid value

99
00:05:30.003 --> 00:05:32.005
into the manufacturer.

100
00:05:32.005 --> 00:05:35.006
We'll make our available date valid

101
00:05:35.006 --> 00:05:38.004
and we'll keep our description valid.

102
00:05:38.004 --> 00:05:42.003
And there you can see our custom validator

103
00:05:42.003 --> 00:05:46.006
did step in and it flagged the value we provided.

104
00:05:46.006 --> 00:05:50.007
You'll also notice we got our custom validation message.

105
00:05:50.007 --> 00:05:55.000
So let's change this over to alphabetic.

106
00:05:55.000 --> 00:05:58.000
And if we do that our validation passes

107
00:05:58.000 --> 00:06:00.008
and we can proceed with our application logic.

108
00:06:00.008 --> 00:06:03.007
So that was a look at custom validators

109
00:06:03.007 --> 00:06:09.000
that can be used within the Bean Validation API.

