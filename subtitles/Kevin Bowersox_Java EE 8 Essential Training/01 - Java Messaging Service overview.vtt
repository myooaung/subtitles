WEBVTT
1
00:00:00.005 --> 00:00:03.003
- [Instructor] The Java Messaging Service, or JMS,

2
00:00:03.003 --> 00:00:07.001
has been a part of Java EE since version 1.2,

3
00:00:07.001 --> 00:00:10.003
so it's been a part of the platform for a while.

4
00:00:10.003 --> 00:00:13.005
The introduction of JMS version 2.0 simplified

5
00:00:13.005 --> 00:00:16.008
the JMS API, making it much easier to work

6
00:00:16.008 --> 00:00:19.001
with the messaging technology.

7
00:00:19.001 --> 00:00:22.002
Messaging is a common integration pattern used

8
00:00:22.002 --> 00:00:25.003
by Java applications, and there are many middle-tier

9
00:00:25.003 --> 00:00:27.009
messaging service implementations.

10
00:00:27.009 --> 00:00:31.009
The JMS API provides a common approach and schemantics

11
00:00:31.009 --> 00:00:35.002
for Java applications that use messaging.

12
00:00:35.002 --> 00:00:38.005
It also defines roles for messaging services,

13
00:00:38.005 --> 00:00:41.003
known as JMS providers.

14
00:00:41.003 --> 00:00:44.008
The messaging concepts in JMS can be applied by

15
00:00:44.008 --> 00:00:48.008
developers to use multiple JMS providers without

16
00:00:48.008 --> 00:00:51.007
specific knowledge of each of them.

17
00:00:51.007 --> 00:00:56.004
Within JMS we'll find support for two styles of messaging,

18
00:00:56.004 --> 00:00:59.003
point-to-point and publish subscribe.

19
00:00:59.003 --> 00:01:03.003
Let's dive into the details of these two styles.

20
00:01:03.003 --> 00:01:06.005
If we look at the point-to-point messaging style,

21
00:01:06.005 --> 00:01:09.004
you will see that it starts with the JMS producer

22
00:01:09.004 --> 00:01:12.000
writing a message to a queue.

23
00:01:12.000 --> 00:01:16.000
The message is then consumed off the queue by a single

24
00:01:16.000 --> 00:01:17.009
JMS consumer,

25
00:01:17.009 --> 00:01:22.008
so one producer sends a message to one consumer.

26
00:01:22.008 --> 00:01:26.003
The publish/subscribe messaging style uses a topic

27
00:01:26.003 --> 00:01:27.008
instead of a queue.

28
00:01:27.008 --> 00:01:31.007
The topic allows messages to be distributed to multiple

29
00:01:31.007 --> 00:01:35.007
JMS consumers instead of a single consumer.

30
00:01:35.007 --> 00:01:40.000
The structure of a JMS message contains three sections.

31
00:01:40.000 --> 00:01:43.005
The headers, properties, and body.

32
00:01:43.005 --> 00:01:48.001
The JMS headers are fixed across all JMS messages.

33
00:01:48.001 --> 00:01:51.008
These headers include the destination, delivery method,

34
00:01:51.008 --> 00:01:57.003
message ID, delivery time, and other envelope information.

35
00:01:57.003 --> 00:02:00.002
The properties section of the message allows producers

36
00:02:00.002 --> 00:02:04.005
or the JMS provider to add optional headers to the message

37
00:02:04.005 --> 00:02:07.001
that can be read by consumers.

38
00:02:07.001 --> 00:02:11.002
The body of a JMS message can be one of five types,

39
00:02:11.002 --> 00:02:15.008
providing support for streams, maps, text, objects,

40
00:02:15.008 --> 00:02:17.006
and bytes.

41
00:02:17.006 --> 00:02:21.007
Next, let's take a look at the JMS APIs that are used

42
00:02:21.007 --> 00:02:24.005
to send and receive messages.

43
00:02:24.005 --> 00:02:28.004
Within the JMS API, we primarily use four interfaces

44
00:02:28.004 --> 00:02:31.002
for sending and receiving messages.

45
00:02:31.002 --> 00:02:34.003
The ConnectionFactory can be used by a JMS client

46
00:02:34.003 --> 00:02:38.002
to obtain a connection with the JMS provider.

47
00:02:38.002 --> 00:02:41.005
It also contains all of the configuration information

48
00:02:41.005 --> 00:02:43.007
regarding the connection.

49
00:02:43.007 --> 00:02:48.000
The JMSContext combines a connection and a session

50
00:02:48.000 --> 00:02:51.007
which are used to create the producer and the consumer.

51
00:02:51.007 --> 00:02:55.003
Typically the JMSContext is container managed within

52
00:02:55.003 --> 00:02:58.000
a Java EE application.

53
00:02:58.000 --> 00:03:01.007
The consumer API is the interface used to read

54
00:03:01.007 --> 00:03:05.001
messages from a topic or a queue.

55
00:03:05.001 --> 00:03:09.000
Contrarily, the producer is used for sending messages.

56
00:03:09.000 --> 00:03:12.002
We'll see these APIs in action as we work through

57
00:03:12.002 --> 00:03:15.000
the remainder of the lessons in this chapter.

