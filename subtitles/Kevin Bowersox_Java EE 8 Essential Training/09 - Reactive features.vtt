WEBVTT
1
00:00:00.005 --> 00:00:02.000
- [Instructor] In Java EE 8,

2
00:00:02.000 --> 00:00:04.004
the JAX-RS client receives support

3
00:00:04.004 --> 00:00:06.007
for the Reactive programming style

4
00:00:06.007 --> 00:00:09.004
which provides developers with a more succinct way

5
00:00:09.004 --> 00:00:12.000
of handling asynchronous calls.

6
00:00:12.000 --> 00:00:13.006
Under the Reactive approach,

7
00:00:13.006 --> 00:00:16.006
we avoid the use of callbacks instead opting

8
00:00:16.006 --> 00:00:20.009
to use a completion stage that allows a chain of stages

9
00:00:20.009 --> 00:00:24.000
to be completed asynchronously.

10
00:00:24.000 --> 00:00:28.001
Let's take a look at using the Reactive programming style

11
00:00:28.001 --> 00:00:32.008
by working with the JAX-RS Reactive client.

12
00:00:32.008 --> 00:00:35.000
So we won't need to change anything

13
00:00:35.000 --> 00:00:36.002
within our resource.

14
00:00:36.002 --> 00:00:39.006
We're going to call the asynchronous resource method

15
00:00:39.006 --> 00:00:41.007
that we created previously

16
00:00:41.007 --> 00:00:45.002
but if we take a look at our InventoryService,

17
00:00:45.002 --> 00:00:47.008
you'll notice that we added a new method,

18
00:00:47.008 --> 00:00:50.005
the reactiveGetQuantityMethod

19
00:00:50.005 --> 00:00:54.001
and it returns an object of type completion stage

20
00:00:54.001 --> 00:00:59.002
which is generically typed to specify the InventoryItem

21
00:00:59.002 --> 00:01:01.006
as the generic parameter.

22
00:01:01.006 --> 00:01:04.001
The completion stage allows us

23
00:01:04.001 --> 00:01:09.007
to chain different calls together asynchronously.

24
00:01:09.007 --> 00:01:13.008
If you take a look at our RemoteInventoryService class,

25
00:01:13.008 --> 00:01:16.005
you'll see that we have provided a stub

26
00:01:16.005 --> 00:01:19.002
for the reactiveGetQuantity method.

27
00:01:19.002 --> 00:01:22.001
And it's really simple to make an asynchronous call.

28
00:01:22.001 --> 00:01:25.003
I'm just going to copy the code we used

29
00:01:25.003 --> 00:01:28.004
to create the asynchronous client.

30
00:01:28.004 --> 00:01:32.001
And then I'm going to paste it into the body of that method

31
00:01:32.001 --> 00:01:36.001
and all we need to do is switch the async method

32
00:01:36.001 --> 00:01:40.009
with the rx method and we've gone Reactive.

33
00:01:40.009 --> 00:01:44.005
Okay, so this is how we make the Reactive call

34
00:01:44.005 --> 00:01:46.004
with the JAX-RS client.

35
00:01:46.004 --> 00:01:48.008
Now, it's going to change a little bit

36
00:01:48.008 --> 00:01:52.000
in how we handle the return object

37
00:01:52.000 --> 00:01:55.003
from that call, so let's go over to our backing bean

38
00:01:55.003 --> 00:01:59.002
and currently we are using our async method

39
00:01:59.002 --> 00:02:01.005
but we need to change that up.

40
00:02:01.005 --> 00:02:04.006
So let's do a little bit of work in here

41
00:02:04.006 --> 00:02:06.007
and I'll just leave the async call there

42
00:02:06.007 --> 00:02:08.006
so you can kind of compare and contrast

43
00:02:08.006 --> 00:02:11.006
and then we'll clean it up when we're done.

44
00:02:11.006 --> 00:02:13.009
Okay, so the first thing we're going to do

45
00:02:13.009 --> 00:02:16.008
is create a CountDownLatch

46
00:02:16.008 --> 00:02:19.003
and that's so we can keep track of the number

47
00:02:19.003 --> 00:02:22.002
of calls that we expect to make

48
00:02:22.002 --> 00:02:25.009
as well as the number of calls

49
00:02:25.009 --> 00:02:27.001
that we receive back

50
00:02:27.001 --> 00:02:30.003
so we're just going to create a CountDownLatch

51
00:02:30.003 --> 00:02:34.007
with the constructor supplying an argument of one.

52
00:02:34.007 --> 00:02:37.001
Okay and the next thing that we need to do

53
00:02:37.001 --> 00:02:39.007
is use the inventoryService

54
00:02:39.007 --> 00:02:43.002
and the reactive method that we created

55
00:02:43.002 --> 00:02:45.002
and we'll pass in the itemId

56
00:02:45.002 --> 00:02:48.000
so we can get the appropriate catalog item

57
00:02:48.000 --> 00:02:51.006
and then you'll notice, we just start to chain method calls

58
00:02:51.006 --> 00:02:54.002
so there's the thenApply method

59
00:02:54.002 --> 00:02:56.006
and that's going to be executed once

60
00:02:56.006 --> 00:02:57.009
we get the response back

61
00:02:57.009 --> 00:02:59.003
from the API

62
00:02:59.003 --> 00:03:04.000
and we can provide a function here

63
00:03:04.000 --> 00:03:08.001
that will be executed once we get that response

64
00:03:08.001 --> 00:03:11.001
so it's going to return us the inventoryItem

65
00:03:11.001 --> 00:03:14.005
and then what we're going to do is get the quantity

66
00:03:14.005 --> 00:03:18.000
from that item and then we're going to go ahead

67
00:03:18.000 --> 00:03:19.007
and we'll do this on a separate line

68
00:03:19.007 --> 00:03:21.005
so it's easy to read.

69
00:03:21.005 --> 00:03:24.009
Then we're going to go ahead and chain another call here.

70
00:03:24.009 --> 00:03:27.001
So we're going to say thenAccept

71
00:03:27.001 --> 00:03:29.006
and that indicates it's our last call

72
00:03:29.006 --> 00:03:32.004
and then we provide another method,

73
00:03:32.004 --> 00:03:34.007
so we got the quantity

74
00:03:34.007 --> 00:03:39.003
and we're passing that over to this next method

75
00:03:39.003 --> 00:03:45.003
where we're going to go ahead and set the quantity

76
00:03:45.003 --> 00:03:48.006
on our backing bean

77
00:03:48.006 --> 00:03:51.001
and we can pass the quantity in

78
00:03:51.001 --> 00:03:52.009
and let's just print that out

79
00:03:52.009 --> 00:03:56.006
so we can see it in the console.

80
00:03:56.006 --> 00:03:59.007
We'll get the quantity from the backing bean.

81
00:03:59.007 --> 00:04:02.009
And now we call our latch

82
00:04:02.009 --> 00:04:06.002
and tell it to countDown.

83
00:04:06.002 --> 00:04:09.007
And then finally we just add our semicolon

84
00:04:09.007 --> 00:04:13.004
and from there, I'm going to add a little bit more debugging.

85
00:04:13.004 --> 00:04:14.007
We'll keep some of this

86
00:04:14.007 --> 00:04:17.007
so let's clear out our asynchronous calls

87
00:04:17.007 --> 00:04:20.001
since we're going Reactive here.

88
00:04:20.001 --> 00:04:24.006
And what we'll do is keep the completed request

89
00:04:24.006 --> 00:04:29.000
and then we do have to finally on the latch call await

90
00:04:29.000 --> 00:04:30.003
at the bottom of our method

91
00:04:30.003 --> 00:04:33.005
so that it waits to hear the CountDown.

92
00:04:33.005 --> 00:04:37.007
Okay, so this is an example of using the completion stage

93
00:04:37.007 --> 00:04:41.001
and the way we can chain different calls

94
00:04:41.001 --> 00:04:44.009
when we receive a response from an API.

95
00:04:44.009 --> 00:04:52.003
Let's go ahead and we can run this example.

96
00:04:52.003 --> 00:04:55.007
So there our application's started up.

97
00:04:55.007 --> 00:04:57.008
I'll start opening a browser

98
00:04:57.008 --> 00:05:00.000
and then we'll go back to our console here.

99
00:05:00.000 --> 00:05:01.009
Let me clear it out.

100
00:05:01.009 --> 00:05:08.001
And then we'll get to work here creating a product.

101
00:05:08.001 --> 00:05:10.002
So there the product was created

102
00:05:10.002 --> 00:05:11.005
and then we're going to go ahead

103
00:05:11.005 --> 00:05:13.005
and access the details.

104
00:05:13.005 --> 00:05:15.006
Once again, here we're blocking

105
00:05:15.006 --> 00:05:19.004
but you notice that it completed the request

106
00:05:19.004 --> 00:05:23.003
and then it came back and we got our quantity.

107
00:05:23.003 --> 00:05:25.002
Okay, so that was an example

108
00:05:25.002 --> 00:05:27.005
of the Reactive style of programming

109
00:05:27.005 --> 00:05:31.000
that is now supported within JAX-RS.

