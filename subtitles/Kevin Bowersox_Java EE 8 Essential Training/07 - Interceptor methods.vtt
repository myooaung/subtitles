WEBVTT
1
00:00:00.005 --> 00:00:03.007
- CDI provides support for interceptors

2
00:00:03.007 --> 00:00:07.001
that allow developers to implement cross-cutting

3
00:00:07.001 --> 00:00:08.008
concerns in their applications,

4
00:00:08.008 --> 00:00:10.002
such as logging,

5
00:00:10.002 --> 00:00:11.001
auditing,

6
00:00:11.001 --> 00:00:12.005
and security.

7
00:00:12.005 --> 00:00:14.006
Interceptors are triggered when methods

8
00:00:14.006 --> 00:00:17.000
on a particular bean are invoked,

9
00:00:17.000 --> 00:00:18.008
allowing the cross-cutting logic

10
00:00:18.008 --> 00:00:20.003
to be introduced.

11
00:00:20.003 --> 00:00:22.008
The first step for setting up an interceptor

12
00:00:22.008 --> 00:00:26.008
is to create an interceptor binding type,

13
00:00:26.008 --> 00:00:28.007
which is an annotation that is used

14
00:00:28.007 --> 00:00:30.008
to associate an interceptor

15
00:00:30.008 --> 00:00:33.004
with a bean or a bean method.

16
00:00:33.004 --> 00:00:37.001
We can just open up the new dialogue.

17
00:00:37.001 --> 00:00:38.008
Within the new dialogue,

18
00:00:38.008 --> 00:00:41.006
we can type interceptor,

19
00:00:41.006 --> 00:00:45.004
and we'll see the interceptor binding annotation.

20
00:00:45.004 --> 00:00:47.002
We want to select that.

21
00:00:47.002 --> 00:00:49.004
Then we're going to go ahead and specify

22
00:00:49.004 --> 00:00:53.009
the package as com.LinkedIn.jsf.

23
00:00:53.009 --> 00:00:54.009
Here,

24
00:00:54.009 --> 00:00:58.009
we can create a name for our interceptor binding.

25
00:00:58.009 --> 00:01:03.001
We're going to call this the logging interceptor binding.

26
00:01:03.001 --> 00:01:06.006
We'll just provide a name of logging.

27
00:01:06.006 --> 00:01:10.008
You'll notice that it's able to target different sections

28
00:01:10.008 --> 00:01:12.001
of a class.

29
00:01:12.001 --> 00:01:14.007
Here we're looking at the type and the method.

30
00:01:14.007 --> 00:01:17.007
That's where we can apply this interceptor.

31
00:01:17.007 --> 00:01:21.000
Then we can allow the interceptor bindings

32
00:01:21.000 --> 00:01:22.005
to be empty at this point.

33
00:01:22.005 --> 00:01:23.004
Let's go ahead,

34
00:01:23.004 --> 00:01:27.002
create the logging interceptor binding.

35
00:01:27.002 --> 00:01:30.006
Now we need to create a second object.

36
00:01:30.006 --> 00:01:33.009
This is actually our interceptor.

37
00:01:33.009 --> 00:01:36.004
We'll just once again open the new dialogue,

38
00:01:36.004 --> 00:01:38.005
type interceptor.

39
00:01:38.005 --> 00:01:40.008
Then we're going to provide a name

40
00:01:40.008 --> 00:01:44.008
of logging interceptor.

41
00:01:44.008 --> 00:01:46.005
You'll notice that we're able

42
00:01:46.005 --> 00:01:49.009
to add an interceptor binding.

43
00:01:49.009 --> 00:01:50.007
Here,

44
00:01:50.007 --> 00:01:53.002
we can go ahead and search for

45
00:01:53.002 --> 00:01:55.009
our logging interceptor binding.

46
00:01:55.009 --> 00:01:57.006
There you can see it.

47
00:01:57.006 --> 00:01:58.005
We'll select it.

48
00:01:58.005 --> 00:02:01.003
That associates that binding annotation

49
00:02:01.003 --> 00:02:02.009
with this interceptor

50
00:02:02.009 --> 00:02:06.001
so that when we use the binding annotation,

51
00:02:06.001 --> 00:02:11.006
it will cause this interceptors around invoke method

52
00:02:11.006 --> 00:02:14.000
to be invoked.

53
00:02:14.000 --> 00:02:16.007
That allows us to add that cross-cutting logic

54
00:02:16.007 --> 00:02:17.008
we talked about.

55
00:02:17.008 --> 00:02:19.000
Let's go ahead.

56
00:02:19.000 --> 00:02:20.009
We will create this interceptor.

57
00:02:20.009 --> 00:02:25.001
You will see that it's registered in our beans.xml file.

58
00:02:25.001 --> 00:02:28.001
Now if we take a look here,

59
00:02:28.001 --> 00:02:31.008
you'll see the around invoke annotation.

60
00:02:31.008 --> 00:02:36.002
That's basically specifying that we're able to

61
00:02:36.002 --> 00:02:40.004
add some logic around a method invocation

62
00:02:40.004 --> 00:02:43.004
in order to perform whatever cross-cutting concern

63
00:02:43.004 --> 00:02:44.006
we need to.

64
00:02:44.006 --> 00:02:46.000
In our case we're just going to do

65
00:02:46.000 --> 00:02:48.003
some logging.

66
00:02:48.003 --> 00:02:49.007
You can see,

67
00:02:49.007 --> 00:02:51.007
we'll write some out put to the console.

68
00:02:51.007 --> 00:02:54.004
We'll just say that the method invoked is,

69
00:02:54.004 --> 00:02:57.003
and then you can see we get this invocation context.

70
00:02:57.003 --> 00:02:59.006
That's referring to the actual method

71
00:02:59.006 --> 00:03:01.005
being invoked.

72
00:03:01.005 --> 00:03:03.001
So you can get all sorts of information,

73
00:03:03.001 --> 00:03:05.008
like the parameters sent to that message.

74
00:03:05.008 --> 00:03:07.004
You can look at the target.

75
00:03:07.004 --> 00:03:09.009
There's different context data.

76
00:03:09.009 --> 00:03:12.000
All of that information's available to you.

77
00:03:12.000 --> 00:03:14.007
It's kind of meta-data about the method call,

78
00:03:14.007 --> 00:03:16.007
so that you can apply security,

79
00:03:16.007 --> 00:03:19.003
or maybe you're logging whatever you're interested in.

80
00:03:19.003 --> 00:03:22.000
In our case we're just going to get the method,

81
00:03:22.000 --> 00:03:24.007
and then we can get the name of that method.

82
00:03:24.007 --> 00:03:26.005
We'll write it out to the console.

83
00:03:26.005 --> 00:03:29.000
Then the next thing we do is really important.

84
00:03:29.000 --> 00:03:32.005
We're going to invoke the proceed method,

85
00:03:32.005 --> 00:03:35.006
which will allow the execution of the method

86
00:03:35.006 --> 00:03:36.008
to proceed.

87
00:03:36.008 --> 00:03:38.009
Here's where if you were applying security,

88
00:03:38.009 --> 00:03:41.009
you would not allow the invocation of the method

89
00:03:41.009 --> 00:03:43.006
to proceed.

90
00:03:43.006 --> 00:03:44.008
With that in place,

91
00:03:44.008 --> 00:03:46.007
what we do now is,

92
00:03:46.007 --> 00:03:49.009
we need to add that interceptor binding

93
00:03:49.009 --> 00:03:53.000
to one of our services.

94
00:03:53.000 --> 00:03:57.008
I'm going to navigate to our local inventory service.

95
00:03:57.008 --> 00:03:58.006
Here,

96
00:03:58.006 --> 00:04:03.007
I'm going to add the logging interceptor binding

97
00:04:03.007 --> 00:04:06.006
to our create item method.

98
00:04:06.006 --> 00:04:10.000
That's going to cause that interceptor logic

99
00:04:10.000 --> 00:04:12.003
to be executed every time we invoke

100
00:04:12.003 --> 00:04:14.005
the create item method.

101
00:04:14.005 --> 00:04:15.006
The other thing we're going to do

102
00:04:15.006 --> 00:04:19.006
is we're going to remove the alternative annotation

103
00:04:19.006 --> 00:04:23.002
from the local inventory service.

104
00:04:23.002 --> 00:04:25.009
That's going to allow us to make sure

105
00:04:25.009 --> 00:04:29.001
that that service is injected as opposed to our

106
00:04:29.001 --> 00:04:31.003
remote inventory service.

107
00:04:31.003 --> 00:04:32.008
The other thing that we'll need to do

108
00:04:32.008 --> 00:04:34.003
in order to make sure that happens

109
00:04:34.003 --> 00:04:37.005
is go into our inventory service factory.

110
00:04:37.005 --> 00:04:40.000
We're going to remove this produces annotation

111
00:04:40.000 --> 00:04:42.009
so that it's no longer consulted

112
00:04:42.009 --> 00:04:46.002
when selecting our inventory service bean

113
00:04:46.002 --> 00:04:49.003
in the CDI container for injection.

114
00:04:49.003 --> 00:04:50.006
Okay.

115
00:04:50.006 --> 00:04:53.000
We have our logging interceptor

116
00:04:53.000 --> 00:04:54.008
that has our logging logic.

117
00:04:54.008 --> 00:04:57.003
Then we have our interceptor binding,

118
00:04:57.003 --> 00:05:02.007
and that is applied to the create item method

119
00:05:02.007 --> 00:05:07.002
on the local inventory service bean.

120
00:05:07.002 --> 00:05:09.004
With all that in place,

121
00:05:09.004 --> 00:05:14.005
let's go ahead and we can run our application.

122
00:05:14.005 --> 00:05:17.003
Then we'll open a browser.

123
00:05:17.003 --> 00:05:21.009
Then we can navigate to our application,

124
00:05:21.009 --> 00:05:24.005
select a product.

125
00:05:24.005 --> 00:05:26.002
There here,

126
00:05:26.002 --> 00:05:29.009
we can see if we look at our console output,

127
00:05:29.009 --> 00:05:33.006
that our method invocation

128
00:05:33.006 --> 00:05:34.006
was logged.

129
00:05:34.006 --> 00:05:37.000
We can see that the method invoked

130
00:05:37.000 --> 00:05:38.001
is create item.

131
00:05:38.001 --> 00:05:39.006
Looks like we're missing a space there.

132
00:05:39.006 --> 00:05:41.004
We can easily add that.

133
00:05:41.004 --> 00:05:43.002
This gives you a good example

134
00:05:43.002 --> 00:05:47.007
of how to use interceptors within CDI

135
00:05:47.007 --> 00:05:50.003
in order to implement those cross-cutting concerns,

136
00:05:50.003 --> 00:05:52.000
like logging or security.

