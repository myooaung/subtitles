1
00:00:00,630 --> 00:00:02,940
So why do we want to write unit tests?

2
00:00:03,060 --> 00:00:08,310
It's very quickly to run our application and just do manual testing to make sure that things work.

3
00:00:08,610 --> 00:00:12,240
So why write code to make sure that another code works?

4
00:00:12,660 --> 00:00:13,950
Why not test manually?

5
00:00:14,490 --> 00:00:19,200
And there are a few very big advantages of writing unit tests to test our code.

6
00:00:21,170 --> 00:00:24,240
We wrote unit tests to make sure that our code works.

7
00:00:24,260 --> 00:00:27,650
Now this is obvious, but this is not the biggest advantage.

8
00:00:28,220 --> 00:00:33,710
One of the reasons why we want to write unit tests is to make sure that the Java method we have written

9
00:00:33,890 --> 00:00:36,200
works well with different input values.

10
00:00:36,560 --> 00:00:41,390
We want to make sure that it works well with valid and pin valid input parameters.

11
00:00:41,750 --> 00:00:46,700
Now we can do manual testing and manually provide valid and invalid input parameters.

12
00:00:46,910 --> 00:00:52,700
But if we have a very large application with many features, then it is very easy to forget to test

13
00:00:52,700 --> 00:00:58,790
one of the features with one of inviolate parameters, especially when we have many developers working

14
00:00:58,790 --> 00:01:04,069
on the project, when changes to our application are made on a daily basis, and when we need to do

15
00:01:04,069 --> 00:01:10,880
frequent tests, manual testing or application that has many features becomes very difficult and it

16
00:01:10,880 --> 00:01:15,920
becomes very easy to forget to test the feature with a specific invalid input parameter.

17
00:01:16,760 --> 00:01:22,700
Another very big reason why we want to write unit tests is to make sure that our code works well now

18
00:01:22,940 --> 00:01:24,260
and in the future.

19
00:01:24,830 --> 00:01:27,350
Imagine that you have written a very complex method.

20
00:01:27,650 --> 00:01:32,960
This method is very useful and other developers started using it in their classes as well.

21
00:01:33,350 --> 00:01:38,480
How do you make sure that other developers who want to make changes to your code do not break anything?

22
00:01:38,780 --> 00:01:44,240
Unit tests that you have written for this method will give you confidence that future changes to this

23
00:01:44,240 --> 00:01:51,230
method do not break existing functionality and that this method still works as expected with all valid

24
00:01:51,230 --> 00:01:54,530
and invalid input parameters as it used to work before.

25
00:01:55,100 --> 00:02:01,460
It is also called regression testing, and unit tests help you feel more confident that the new code

26
00:02:01,460 --> 00:02:06,350
changes to existing application features do not break other working code.

27
00:02:06,740 --> 00:02:13,100
If you make changes to one of the method and it breaks functionality in another existing and will test

28
00:02:13,100 --> 00:02:15,650
that feature, then it is called regression.

29
00:02:15,980 --> 00:02:21,980
So you will want to write unit tests to make sure that there is no regression and all features still

30
00:02:22,010 --> 00:02:28,100
work as expected, even after you made the small change to existing and will work in code.

