1
00:00:00,180 --> 00:00:05,700
In this lesson, we will continue working with mock objects and we will try how exceptions type works.

2
00:00:06,270 --> 00:00:13,500
The method and testing is create user and it has a dependency on users repository because we want to

3
00:00:13,500 --> 00:00:17,880
test to create user method in isolation from its dependencies.

4
00:00:18,180 --> 00:00:23,790
We have mock that user repository object so the user's repository is now a more common you.

5
00:00:24,270 --> 00:00:27,360
Now let's open create user method for a moment.

6
00:00:27,900 --> 00:00:34,020
In this lesson I want to test that might create user method returns expect that result even when this

7
00:00:34,020 --> 00:00:36,060
save method throws an exception.

8
00:00:36,390 --> 00:00:43,230
And because user repository is now a mock object, I can configure it to always throw specific exception

9
00:00:43,230 --> 00:00:45,110
when the save method gets executed.

10
00:00:45,480 --> 00:00:52,560
So make in my users repository mock object to always throw an exception when the save method is invoked

11
00:00:52,860 --> 00:00:54,480
is called exception step.

12
00:00:54,990 --> 00:00:56,070
Let's see how it works.

13
00:00:56,070 --> 00:01:02,630
I'll go back to my test method and in this lesson I will test that the creators and method or method

14
00:01:02,640 --> 00:01:05,310
under test returns expected result.

15
00:01:05,489 --> 00:01:12,480
When the save method is invoked and throws an exception, I will actually create a new test method.

16
00:01:12,480 --> 00:01:16,020
For that I will scroll down and will create a new test method.

17
00:01:18,430 --> 00:01:24,430
I'm going to test the same creative semantics and then will test the use case that once saved method

18
00:01:24,430 --> 00:01:26,640
returns any random exception.

19
00:01:26,760 --> 00:01:31,120
Then it is called and the user series exception is thrown instead.

20
00:01:31,510 --> 00:01:35,110
So I will continue when save method throws exception.

21
00:01:39,250 --> 00:01:42,880
Then my method on the test throws use a serious exception.

22
00:01:43,150 --> 00:01:43,510
Okay.

23
00:01:43,510 --> 00:01:47,920
So I'm testing create as amended one save method throws exception.

24
00:01:48,190 --> 00:01:55,240
Then my method under test throws users an exception and they will create method, structure, arrange

25
00:01:55,290 --> 00:01:56,200
and assert.

26
00:01:59,570 --> 00:02:00,500
Something like this.

27
00:02:00,530 --> 00:02:04,340
Now, if you come up with a bird at this name, then it is even better.

28
00:02:05,000 --> 00:02:08,360
And that will also include this information in a display name.

29
00:02:14,730 --> 00:02:20,490
Simple like this, and in the arrange section I will work with my mock object and will do exemption

30
00:02:20,510 --> 00:02:20,940
stamping.

31
00:02:21,840 --> 00:02:29,370
I will use monkey this static method when then inside of one I will refer to more compute user repository

32
00:02:29,670 --> 00:02:37,440
and will invoke the save method with any instance of user class as a parent and one segment that is

33
00:02:37,440 --> 00:02:39,660
invoked on users repository object.

34
00:02:40,230 --> 00:02:43,230
Then I want to throw an exception.

35
00:02:43,780 --> 00:02:49,260
Now this project is currently not configured to work with any specific database, and I cannot fully

36
00:02:49,530 --> 00:02:51,900
use any specific database exception here.

37
00:02:52,260 --> 00:02:57,180
So for this demonstration, I'll make my segment that through a general runtime exception.

38
00:02:58,510 --> 00:02:59,040
Like this.

39
00:02:59,620 --> 00:03:07,270
And now in the ACT section, I will actually invoke my method under test and will assert that it throws

40
00:03:07,450 --> 00:03:08,800
users areas exception.

41
00:03:14,310 --> 00:03:20,970
And I will simply copy the invocation of Great Joseph from my different testament and pasted here and

42
00:03:20,970 --> 00:03:23,160
there will also add an optional error message.

43
00:03:27,770 --> 00:03:31,400
Something like this should have thrown use a service exemption instead.

44
00:03:31,790 --> 00:03:38,780
If create user is invoked and user service exception was not thrown, I will see this message in the

45
00:03:38,780 --> 00:03:39,230
report.

46
00:03:39,560 --> 00:03:42,140
Should have thrown a user service exception instead.

47
00:03:42,480 --> 00:03:42,860
All right.

48
00:03:42,860 --> 00:03:49,010
So we have configured our save method to throw a runtime exception when it is invoked permitted under

49
00:03:49,010 --> 00:03:50,450
test this create user.

50
00:03:50,540 --> 00:03:57,320
So we invoke it and then we assert that these on vacation should throw user service exception.

51
00:03:57,500 --> 00:04:03,110
If user service exception is not thrown, then we should see this error message in this report.

52
00:04:03,500 --> 00:04:04,040
Let's try.

53
00:04:04,040 --> 00:04:06,410
If it works, I will run this test method.

54
00:04:07,550 --> 00:04:10,760
And it fails because user Sara's assumption is not wrong.

55
00:04:11,150 --> 00:04:16,579
So let's minimize our test report and go inside of create user and have a look at it.

56
00:04:17,329 --> 00:04:23,050
Now, if save method throws runtime exemption, then we need to catch it and instead we need to throw

57
00:04:23,060 --> 00:04:24,290
user Sarah's exception.

58
00:04:24,590 --> 00:04:27,370
So let's add this try and catch block here.

59
00:04:33,490 --> 00:04:37,570
Something like this, except that maybe a piece in Stoicism is not required.

60
00:04:38,140 --> 00:04:43,900
All right, so now I will save changes to my code, and we'll go back to my test method and run it again.

61
00:04:46,870 --> 00:04:47,410
It worked.

62
00:04:47,460 --> 00:04:53,940
I can also run this test method in a department and check if the user serious exception is indeed thrown.

63
00:04:54,990 --> 00:04:56,340
I'll go back to my creators.

64
00:04:56,340 --> 00:05:02,820
I meant it and we'll put a debugger breakpoint inside of Try and catch where I catch the runtime exception.

65
00:05:03,290 --> 00:05:07,440
Now I'll go back to my test method and we'll run it in deep, dark mode.

66
00:05:08,810 --> 00:05:15,140
And here's my debugger breakpoint triggered inside of cache block and this also proves that my exception

67
00:05:15,140 --> 00:05:20,840
stabbing does work and the save method through runtime exception, just like I have configured it to

68
00:05:20,840 --> 00:05:21,080
do.

69
00:05:21,680 --> 00:05:28,220
All right, so let's resume programming as a cushion and switch back to console and unit test is now

70
00:05:28,220 --> 00:05:28,670
passing.

71
00:05:28,940 --> 00:05:29,240
All right.

72
00:05:29,240 --> 00:05:31,160
So it all worked very well for us.

73
00:05:31,520 --> 00:05:35,600
And you now know how to do more compute exception study with monkey to.

