1
00:00:00,180 --> 00:00:06,300
In previous lesson, we have prepared user details that we will use in a HTTP post request to create

2
00:00:06,300 --> 00:00:07,160
a new user.

3
00:00:07,170 --> 00:00:12,600
And in this lesson we will prepare and will perform this post request.

4
00:00:12,720 --> 00:00:20,700
Now, our request might also need to include a HTTP headers and we can build the B headers this way.

5
00:00:20,730 --> 00:00:25,680
Still in the arranged section, I will prepare a HTTP headers.

6
00:00:28,030 --> 00:00:34,190
My this, and now that I have a hundred subject, I can use it to set up headers.

7
00:00:34,210 --> 00:00:41,140
For example, one HTTP header that I might want to set is content type and it is going to be application

8
00:00:41,140 --> 00:00:41,770
JSON.

9
00:00:44,040 --> 00:00:50,880
And another header that I might want to set is accept header and it will also be application JSON.

10
00:00:50,880 --> 00:00:57,450
But in this case I will need to set a list of headers, so I will use arrays as list and then provide

11
00:00:57,450 --> 00:01:01,320
my HTTP header media type application.

12
00:01:01,320 --> 00:01:01,870
Geez.

13
00:01:02,130 --> 00:01:09,870
And now I'm ready to use this should be headers in a HTTP request and this time to send the request.

14
00:01:09,870 --> 00:01:13,710
I will use a HTTP client that is called risk template.

15
00:01:13,710 --> 00:01:16,740
So let's inject it into our test class.

16
00:01:18,540 --> 00:01:23,490
I will use the word annotation and will inject my client.

17
00:01:23,520 --> 00:01:29,610
Now I have mentioned that I'm going to use a rest template, but I have actually injected the stress

18
00:01:29,610 --> 00:01:30,300
template.

19
00:01:30,330 --> 00:01:36,960
If you are familiar with a rest template, then you know that it is an ACP client that allows us to

20
00:01:36,960 --> 00:01:44,430
send the requests and receive packaged responses and we can use the rest client to test our API as well.

21
00:01:44,730 --> 00:01:51,690
The test rest template object that I have injected here is an alternative to rest template.

22
00:01:51,690 --> 00:01:58,230
And although these two objects are very similar, the test dress template is a different object and

23
00:01:58,230 --> 00:02:01,420
it does not extend a regular template.

24
00:02:01,830 --> 00:02:08,280
So although we can use both of these objects to test our application for testing, it is easier and

25
00:02:08,280 --> 00:02:13,680
simpler to use test trace template, especially when user authentication is involved.

26
00:02:13,680 --> 00:02:16,410
And we need to include username and password.

27
00:02:16,680 --> 00:02:21,940
All right, so we have our recipe client and we can use it to send the request.

28
00:02:21,960 --> 00:02:28,450
So let me scroll down and to send the request with test template object.

29
00:02:28,470 --> 00:02:34,920
We need to put our headers and user details Jason into a single HTTP entity object.

30
00:02:34,980 --> 00:02:41,880
So I will continue working with a range section and here I will prepare a HTTP entity object.

31
00:02:46,700 --> 00:02:53,600
So the constructor of the entity that I'm using here accepts the user details as a string.

32
00:02:53,600 --> 00:02:55,730
So this is going to be a JSON string.

33
00:02:55,730 --> 00:03:03,560
And the HTTP headers that we have just prepared here, now that I have my entity object, I can use

34
00:03:03,560 --> 00:03:07,070
it with the template object to send a HTTP post request.

35
00:03:07,280 --> 00:03:16,010
So in the act section now I will use a test res template object to send the shape post request and get

36
00:03:16,010 --> 00:03:17,750
back response entity.

37
00:03:17,750 --> 00:03:22,280
And the method that I'm going to use is called post for entity.

38
00:03:22,730 --> 00:03:27,140
I will need to provide URL path, which is going to be users.

39
00:03:27,170 --> 00:03:33,770
I will need to provide request object that I have just prepared here and I will need to provide data

40
00:03:33,770 --> 00:03:38,420
type of the object that I want to get back as a response.

41
00:03:39,200 --> 00:03:48,050
So if I use string data type here, then in response back I will get JSON string which I can then convert

42
00:03:48,050 --> 00:03:50,960
into Java object and work with that Java object.

43
00:03:51,200 --> 00:03:59,360
Or I can ask my HTTP client test risk template to convert the JSON string to a needed Java object right

44
00:03:59,360 --> 00:03:59,810
away.

45
00:03:59,840 --> 00:04:05,270
So let's have a look at the rest controller and see what we are getting back.

46
00:04:05,270 --> 00:04:12,350
When we send the HTTP post request to four slash users, I'll go back to users controller and here's

47
00:04:12,350 --> 00:04:20,750
my create user method that handles HTTP post request and in response back it returns an object of a

48
00:04:20,750 --> 00:04:22,130
user as data type.

49
00:04:22,490 --> 00:04:28,610
This object will then be converted into a JSON string and returned in the body of response.

50
00:04:28,610 --> 00:04:37,610
So we can ask our client object to convert this JSON string right into an object of user data type.

51
00:04:37,610 --> 00:04:41,240
So let's go back to our test method and do that.

52
00:04:41,240 --> 00:04:45,890
So as a return value, I will specify response entity.

53
00:04:47,110 --> 00:04:53,080
That will hold user rest object and I will call it created user details and.

54
00:04:57,960 --> 00:05:02,180
My intense let's put things on their own lines.

55
00:05:02,190 --> 00:05:03,860
We have an underlining.

56
00:05:03,870 --> 00:05:06,180
It says that I have incompatible times.

57
00:05:06,180 --> 00:05:13,140
I'm expecting back user rest, but I have configured my rest template to return string data type so

58
00:05:13,140 --> 00:05:17,010
I will replace string with a user rest.

59
00:05:17,550 --> 00:05:24,420
Now the response entity object here will allow us to get information about HTTP response and we can

60
00:05:24,420 --> 00:05:32,160
use this object to get a HTTP status code, HTTP headers and the HTTP response body and the way we can

61
00:05:32,160 --> 00:05:37,770
get user rest object from a response entity object is this way.

62
00:05:40,410 --> 00:05:43,410
I will take responsibility object.

63
00:05:43,560 --> 00:05:52,200
And from this response and object I can get body of HTTP response and that body of which HTTP response

64
00:05:52,200 --> 00:05:55,230
will contain my user rest object.

65
00:05:55,320 --> 00:06:02,430
And now in the assert section I can check if this created user details object contains correct value

66
00:06:02,430 --> 00:06:03,690
and if needed.

67
00:06:03,690 --> 00:06:07,200
I can also validate HTTP response status code and headers.

68
00:06:07,200 --> 00:06:11,700
But for now, let me just validate stored status code as an example.

69
00:06:12,940 --> 00:06:22,300
The expected value is going to be HTTP status code 200, which is OC and the actual value I will read

70
00:06:22,300 --> 00:06:28,750
from create user details entity object by calling get status code method.

71
00:06:28,900 --> 00:06:35,380
And now I can validate that the return to the details object contains correct information, so I will

72
00:06:35,380 --> 00:06:37,180
use assertions again.

73
00:06:38,300 --> 00:06:39,680
Insert equals.

74
00:06:39,680 --> 00:06:47,930
And now as an expected value, I will use user details, request cheese and the original object.

75
00:06:48,200 --> 00:06:54,590
And from this object I can get a string value with key first name.

76
00:06:54,590 --> 00:07:01,790
So this is an expected value, but the actual value will be in the created user details object.

77
00:07:02,000 --> 00:07:06,020
We can get it by calling get first name like this.

78
00:07:06,020 --> 00:07:11,330
And if these two values do not match, then we can display a hint message.

79
00:07:11,330 --> 00:07:15,530
Like, for example, the returned user's first name seems to be incorrect.

80
00:07:17,990 --> 00:07:19,010
Something like this.

81
00:07:19,040 --> 00:07:26,000
So now I will add additional assertions to validate all the fields my class name, email and user ID.

82
00:07:29,020 --> 00:07:29,320
All right.

83
00:07:29,320 --> 00:07:34,150
So now I think we're ready to execute our test method and see how it works.

84
00:07:34,420 --> 00:07:35,020
Let's do it.

85
00:07:35,020 --> 00:07:35,950
And the following lesson.

