1
00:00:00,270 --> 00:00:06,000
In this lesson, we're going to create a new test method that will help us test if user entity object

2
00:00:06,000 --> 00:00:08,650
can be persisted in a database table.

3
00:00:08,670 --> 00:00:11,730
So I will start by creating a new test class.

4
00:00:14,770 --> 00:00:17,770
I'll call this class user entity integration test.

5
00:00:22,200 --> 00:00:29,130
And maybe I will move this class to IO package because my user entity is also in IO package.

6
00:00:29,130 --> 00:00:36,930
So I'll do right mouse click on it, choose refactor and then we'll select move class to a package that

7
00:00:36,930 --> 00:00:38,550
is called IO.

8
00:00:39,640 --> 00:00:42,020
Like this and we'll click on Refactor.

9
00:00:42,040 --> 00:00:45,250
Now I have my class in IO package.

10
00:00:45,250 --> 00:00:51,790
All right, so to help me test on the data layer of my application, I will need to annotate this class

11
00:00:51,790 --> 00:00:54,700
with data GPA, test annotation.

12
00:00:56,890 --> 00:00:58,300
Let's input it.

13
00:00:59,930 --> 00:01:05,690
Now when test classes are annotated with this annotation, spring framework will create application

14
00:01:05,690 --> 00:01:09,920
context only for those beans that are related to spring data.

15
00:01:09,920 --> 00:01:11,620
IGP Persistence Layer.

16
00:01:11,630 --> 00:01:18,590
It will create a put into application context our user entity object and it will also create and put

17
00:01:18,590 --> 00:01:25,580
into application context repository object, but it will not create any rest controllers for example.

18
00:01:25,720 --> 00:01:26,170
Right.

19
00:01:26,180 --> 00:01:30,380
So now that I have test class, I will create a new test method.

20
00:01:33,720 --> 00:01:39,750
With this test method, I'm going to test use an entity object with valid user information first.

21
00:01:39,750 --> 00:01:44,280
So my system under test or class under test will be user entity.

22
00:01:45,280 --> 00:01:51,100
And they all tested for a condition when valid user details provided, then it should return stored

23
00:01:51,100 --> 00:01:51,850
user details.

24
00:01:57,130 --> 00:02:03,760
Mind this now let's make it a little bit wider and that will create a range act and insert sections.

25
00:02:05,550 --> 00:02:12,420
In the arrange section, I will prepare a user entity object and this time with valid user details.

26
00:02:13,280 --> 00:02:16,550
So I will first create a new instance of user entity.

27
00:02:18,210 --> 00:02:20,880
And I will populate it with some sample data.

28
00:02:21,980 --> 00:02:25,910
For example, I will generate user ID using you id.

29
00:02:29,440 --> 00:02:31,060
I will said first name.

30
00:02:33,020 --> 00:02:34,040
Last name.

31
00:02:36,610 --> 00:02:38,770
Sample email address.

32
00:02:40,520 --> 00:02:41,990
And encrypted password.

33
00:02:41,990 --> 00:02:44,960
At this moment it will not be encrypted, but it's okay.

34
00:02:44,960 --> 00:02:51,410
I'm not testing encryption for now and in the next section I'm going to persist this object into a database.

35
00:02:51,440 --> 00:02:57,740
Now to persist entity object into a database table, I'll need to use test, entity, manager object

36
00:02:57,740 --> 00:03:04,370
and to make this object available to my test method, I will need to authorize it so I will scroll up

37
00:03:04,370 --> 00:03:07,670
and that will alter where my test entity manager object.

38
00:03:10,210 --> 00:03:10,830
Like this.

39
00:03:10,930 --> 00:03:18,520
Now this test entity manager object is an alternative object to entity manager and he will use it in

40
00:03:18,520 --> 00:03:20,710
test classes when testing data layer.

41
00:03:21,160 --> 00:03:27,040
It will allow us to persist information and then synchronize it with the database table right away.

42
00:03:27,310 --> 00:03:27,610
All right.

43
00:03:27,610 --> 00:03:32,110
So let's scroll down and let's use it in act section.

44
00:03:32,770 --> 00:03:40,210
Now we'll use this entity manager and I will call method that is called persist and flash as a parameter.

45
00:03:40,210 --> 00:03:42,730
It takes user entity object.

46
00:03:43,030 --> 00:03:43,510
All right.

47
00:03:43,510 --> 00:03:49,180
So if there is an issue with our entity object, it will not be persisted in a database.

48
00:03:49,180 --> 00:03:55,200
We will get an exception and our test method will fail the persist and flash method.

49
00:03:55,210 --> 00:04:03,730
It will return us back the source entity object, but it will be already updated with generated ID value

50
00:04:03,820 --> 00:04:09,640
so we can validate if the database ID was generated for this record and is present.

51
00:04:10,640 --> 00:04:18,560
So the data type of returned object will be also user entity and I will call it maybe stored user entity

52
00:04:19,190 --> 00:04:20,029
like this.

53
00:04:20,029 --> 00:04:25,340
And in the assert section I can validate the returned values.

54
00:04:25,340 --> 00:04:31,190
For example, I can assert that the Alta increment ID field has been assigned to value.

55
00:04:31,190 --> 00:04:41,300
And to do that I will use assertions I will maybe use assert true will take stored user entity object

56
00:04:41,450 --> 00:04:46,340
and will get the value of a field like this.

57
00:04:46,490 --> 00:04:50,690
Let's have a look at this ID now it is.

58
00:04:51,460 --> 00:04:53,610
Annotated with ID annotation.

59
00:04:53,620 --> 00:04:58,630
It is going to be a primary key and it is an auto generated value.

60
00:04:58,660 --> 00:05:03,220
Now in my test method, I do not set this field any value.

61
00:05:03,220 --> 00:05:05,080
I do not set an ID.

62
00:05:05,110 --> 00:05:13,630
This ID will be auto generated for us and for this value to be auto generated, I use this generated

63
00:05:13,630 --> 00:05:14,680
value annotation.

64
00:05:14,680 --> 00:05:21,790
So when my entity object gets persisted into a database table as a row, the very first ID that this

65
00:05:21,790 --> 00:05:24,100
row will have will have a value one.

66
00:05:24,100 --> 00:05:29,620
And when we persist next object, the next row will have value two and so on.

67
00:05:29,740 --> 00:05:33,040
All right, so let's go back to our test method.

68
00:05:33,040 --> 00:05:40,570
And if I had only one test method that stores the user entity, then the value of this ID member variable

69
00:05:40,570 --> 00:05:42,310
will be equal to one.

70
00:05:42,310 --> 00:05:48,160
But because I'm going to have more than one test method in this test class, and because I do not know

71
00:05:48,190 --> 00:05:55,690
which method will execute first, I cannot guarantee that the value that this ID method will return

72
00:05:55,690 --> 00:05:57,190
will always be one.

73
00:05:57,190 --> 00:06:03,760
So I will simply assume that this value is higher than zero, for example.

74
00:06:03,880 --> 00:06:10,630
And next I can validate all the fields in stored user entity object and make sure that they exactly

75
00:06:10,630 --> 00:06:16,660
the same as in the original user entity object that was persisted into a database table.

76
00:06:16,660 --> 00:06:19,210
So I can use assertions.

77
00:06:20,270 --> 00:06:23,560
And maybe use assert equals for each of them.

78
00:06:23,570 --> 00:06:28,580
For example, the expected value can be taken from original user entity object.

79
00:06:28,610 --> 00:06:36,770
Let's start with maybe get user ID and the actual value will be taken from stored user entity object.

80
00:06:37,280 --> 00:06:39,770
And these two values must be equal.

81
00:06:39,950 --> 00:06:43,460
And I will do exactly the same for the rest of the fields.

82
00:07:03,500 --> 00:07:08,300
And now we can run our test method and see if it works and if it passes.

83
00:07:14,150 --> 00:07:14,630
Okay.

84
00:07:14,630 --> 00:07:16,780
So it works and it passes.

85
00:07:16,790 --> 00:07:23,480
I can also assert that the ID value is exactly one because at this moment I have only one test method

86
00:07:23,600 --> 00:07:28,490
so I can assert that the other generated value is exactly one.

87
00:07:28,490 --> 00:07:29,350
Let's try.

88
00:07:32,310 --> 00:07:37,080
And it passes because the auto generated ID value is exactly one.

89
00:07:37,080 --> 00:07:43,110
But because I'm going to have all the test methods in this test class the next time I run my test methods,

90
00:07:43,110 --> 00:07:46,800
this will fail because there will be more than one record in a database table.

91
00:07:46,800 --> 00:07:50,160
So I will simply assert that it is greater than zero.

92
00:07:50,190 --> 00:07:53,760
Let's run it one more time to make sure we did not break anything.

93
00:07:55,590 --> 00:07:56,880
And it passes.

94
00:07:57,120 --> 00:07:57,450
All right.

95
00:07:57,450 --> 00:07:58,760
So let's continue.

96
00:07:58,770 --> 00:08:04,680
And in the following lesson, we will write a new test method to test how our entity object will work

97
00:08:04,680 --> 00:08:08,310
if we provide invalid value for one of these fields.

