1
00:00:00,180 --> 00:00:05,520
When it comes to naming the unit test methods, then technically you can give your union test method

2
00:00:05,520 --> 00:00:06,540
any name you like.

3
00:00:06,990 --> 00:00:12,060
But as you work with different teams and developers, you will notice that many developers follow a

4
00:00:12,060 --> 00:00:16,830
specific naming convention to help them make test methods more descriptive.

5
00:00:17,280 --> 00:00:20,970
And one of this common conventions I will share with you here in this lesson.

6
00:00:21,660 --> 00:00:26,880
It is good to make the name of the test that descriptive and speak for itself.

7
00:00:27,210 --> 00:00:32,880
And the goal is to understand what the test method is going to test just by looking at the method name

8
00:00:33,120 --> 00:00:39,990
rather than by looking at the code it contains and try to figure it out from the code and the pattern

9
00:00:39,990 --> 00:00:45,240
for naming testament that is this I will and then in the comments.

10
00:00:45,660 --> 00:00:51,210
So it starts with the test and then the name of the system under test or the name of the method and

11
00:00:51,210 --> 00:00:51,750
the test.

12
00:00:53,990 --> 00:00:57,560
Underscore condition or state change.

13
00:01:00,030 --> 00:01:02,760
Underscore and then expected result.

14
00:01:04,400 --> 00:01:07,130
So this is the template that we are going to follow.

15
00:01:07,850 --> 00:01:11,060
Let's apply this pattern to an integer division method.

16
00:01:11,420 --> 00:01:17,360
So instead of naming my mentored integer division, I will start with a test.

17
00:01:17,870 --> 00:01:22,670
Then I will continue with a name of the system under test or method.

18
00:01:22,670 --> 00:01:23,300
And there test.

19
00:01:23,300 --> 00:01:26,360
The method under test is integer division.

20
00:01:26,690 --> 00:01:28,460
So I will continue test.

21
00:01:28,580 --> 00:01:31,860
Integer division, then underscore.

22
00:01:32,240 --> 00:01:41,060
Then after the underscore goes condition or state change, for example, I can continue with something

23
00:01:41,060 --> 00:01:43,790
like when four is divided by two.

24
00:01:46,290 --> 00:01:54,840
Or I could say when divisor is a valid integer, then again underscore and after the underscore goes

25
00:01:54,840 --> 00:01:57,120
the expected result.

26
00:01:57,390 --> 00:02:02,640
What should the integer division method do if four is divided by two?

27
00:02:02,790 --> 00:02:06,000
The expected result is that it should return to.

28
00:02:07,540 --> 00:02:08,020
Like this.

29
00:02:08,770 --> 00:02:13,330
Let's consider and then get this and I will add a new test rate below.

30
00:02:14,610 --> 00:02:17,610
And I'm going to test the same integer division method.

31
00:02:17,970 --> 00:02:22,890
So I will start with test and then my method under the test is integer division.

32
00:02:24,280 --> 00:02:31,840
Underscore and then there will continue with when dividend is divided by zero, then it's a true arithmetic

33
00:02:31,840 --> 00:02:32,380
exemption.

34
00:02:36,460 --> 00:02:41,020
And the expected result should throw an enigmatic exception.

35
00:02:41,970 --> 00:02:42,300
All right.

36
00:02:42,300 --> 00:02:49,380
So the idea here is to make the test method name descriptive so that they can figure out what this test

37
00:02:49,380 --> 00:02:54,120
method is doing by reading its name and not by reading its code.

38
00:02:54,660 --> 00:03:00,240
So when I look at this test method mean then I write test integers.

39
00:03:00,240 --> 00:03:05,250
The reason I know that the system or the method under test is called integer division.

40
00:03:05,520 --> 00:03:11,190
When dividend is divided by zero, then it should throw arithmetic exception.

41
00:03:11,460 --> 00:03:13,770
And this sounds pretty clear to me.

42
00:03:14,370 --> 00:03:19,980
Now you might say that it is pretty obvious what this test method is doing by looking at its code.

43
00:03:20,010 --> 00:03:26,250
It is very small and simple, but believe me, not all test methods are short and simple like this one.

44
00:03:26,520 --> 00:03:32,190
And this grouping of testing will be very helpful as basically when you're reviewing test methods written

45
00:03:32,190 --> 00:03:33,180
by someone else.

46
00:03:33,510 --> 00:03:38,910
And there is a lot more test methods in the class and there is much more code in the test method itself.

47
00:03:39,300 --> 00:03:45,480
Now, one of the disadvantages of this approach is that a name of a test of length, this will look

48
00:03:45,480 --> 00:03:47,310
very well-known in the test report.

49
00:03:47,490 --> 00:03:50,220
Let's try running all of our tests in this class.

50
00:03:50,310 --> 00:03:55,410
To do that, I will click on the run button, which is next to the class name.

51
00:03:55,890 --> 00:03:57,780
I will run a calculator test.

52
00:03:58,800 --> 00:04:00,720
And here is my test report.

53
00:04:01,260 --> 00:04:06,300
And the names of these two methods now look very long.

54
00:04:06,870 --> 00:04:11,250
But there is a way to make this names look shorter and less technical.

55
00:04:11,490 --> 00:04:12,570
So let's continue.

56
00:04:12,570 --> 00:04:18,209
And in the following lecture, you will learn about another very useful plantation that will help you

57
00:04:18,209 --> 00:04:21,620
make the display name of your unit look better.

