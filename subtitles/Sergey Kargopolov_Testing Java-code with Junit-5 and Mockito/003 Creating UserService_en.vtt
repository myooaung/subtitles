WEBVTT
1
00:00:00.180 --> 00:00:07.770
My test method starts with test create user were create user is the name of a method under test.

2
00:00:07.770 --> 00:00:13.530
And this means that this test method will be testing code in the method that is called create user.

3
00:00:13.890 --> 00:00:19.110
I'll need to create this method, but a method cannot exist without the class, so I'll need to create

4
00:00:19.110 --> 00:00:19.950
class first.

5
00:00:20.640 --> 00:00:23.880
In the arranged section, I'll create an object of this new class.

6
00:00:24.060 --> 00:00:26.430
I'll call it user service.

7
00:00:27.720 --> 00:00:29.970
And to create a new instance of this class.

8
00:00:30.990 --> 00:00:32.590
Now my code does not compile.

9
00:00:32.610 --> 00:00:36.720
Which means that I need to stop writing my code and fix this problem first.

10
00:00:37.200 --> 00:00:43.230
And remember that in the test human development approach, we stopped working on a test method as soon

11
00:00:43.230 --> 00:00:45.360
as it does not compile or fails.

12
00:00:45.480 --> 00:00:48.180
So we need to fix this compiler issue first.

13
00:00:48.720 --> 00:00:52.680
And to fix it, I will need to create a class that is called user service.

14
00:00:53.190 --> 00:01:00.120
So in my application code, in the main package, in the Java folder, I will create a new class or

15
00:01:00.120 --> 00:01:02.130
I will create a new interface first.

16
00:01:02.250 --> 00:01:08.490
So I will choose new class and then I'll select interface and I will call it user service.

17
00:01:09.210 --> 00:01:14.910
It is a good code in practice to use interfaces for our service classes and the technique is called

18
00:01:14.910 --> 00:01:16.280
code to interface.

19
00:01:16.290 --> 00:01:19.620
And later in this project you will see how it is helpful.

20
00:01:19.860 --> 00:01:25.830
So I'll create the new interface and now I will create a clause that implements this interface.

21
00:01:26.100 --> 00:01:31.440
To do that, I will do right mouse click and then select show context action.

22
00:01:31.470 --> 00:01:34.890
And from the list of options, I will select implement interface.

23
00:01:35.190 --> 00:01:41.970
I will call this new class user service import or use a service implementation and will put it into

24
00:01:41.970 --> 00:01:48.090
a destination package which will be called Apps Developer BLOCK Build.

25
00:01:48.360 --> 00:01:54.300
Let's say I'm working on Easter application and I will put it into a service package.

26
00:01:54.450 --> 00:01:57.520
This is going to be a custom package that I'm creating.

27
00:01:57.540 --> 00:02:00.780
You can come up with a different package name for your project.

28
00:02:01.080 --> 00:02:01.410
All right.

29
00:02:01.410 --> 00:02:07.770
So this will create a new package and it will place my interface implementation clause into this new

30
00:02:07.770 --> 00:02:08.220
package.

31
00:02:08.850 --> 00:02:14.050
Now, I will refactor user service and I will move it into the same package as well.

32
00:02:14.070 --> 00:02:19.050
So select user series interface and simply drag and drop it into that package.

33
00:02:20.710 --> 00:02:21.190
And this.

34
00:02:21.430 --> 00:02:28.330
Now, both of my classes, the user service interface and the implementation of this interface is inside

35
00:02:28.450 --> 00:02:29.740
the same package.

36
00:02:30.010 --> 00:02:32.410
Com Developer BLOCK Easter Service.

37
00:02:32.980 --> 00:02:37.570
Now I'll move my user service this class into the same package.

38
00:02:37.960 --> 00:02:40.330
So I will select the user service.

39
00:02:40.330 --> 00:02:46.570
This class will do right mouse click on it, will choose the refactor and then will choose move class

40
00:02:47.200 --> 00:02:49.630
and I will move it into the same package.

41
00:02:49.630 --> 00:02:58.480
So it's come IBM's developer block then E-Store, then dot service and click on Refactor Runtime.

42
00:02:58.840 --> 00:03:05.860
Now my user service test class is in the same package as my user service interface and the service implementation.

43
00:03:05.980 --> 00:03:11.710
Okay, but my code in the user service test class still does not compile.

44
00:03:11.950 --> 00:03:16.210
And this time it is because I'm creating a new instance of user service interface.

45
00:03:16.420 --> 00:03:21.430
I need to be creating a new instance of a class that implements user service interface.

46
00:03:21.880 --> 00:03:29.470
So I will add ample new user service implementation and now my code compiles and this means that I can

47
00:03:29.470 --> 00:03:34.060
continue working on this test meant it could continue in the following lesson.

