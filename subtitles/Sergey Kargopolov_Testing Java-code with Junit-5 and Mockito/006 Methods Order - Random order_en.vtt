WEBVTT
1
00:00:00.210 --> 00:00:06.630
By default, test classes and methods will be older to use an algorithm that is deterministic but intentionally

2
00:00:06.630 --> 00:00:07.470
not on this.

3
00:00:07.710 --> 00:00:13.770
And although true, unit tests typically should not rely on the order in which they're executed, there

4
00:00:13.770 --> 00:00:18.180
are times when we do need to enforce a specific test method execution order.

5
00:00:18.420 --> 00:00:23.780
For example, when we work with integration tests and the following lessons, we will learn how to apply

6
00:00:23.790 --> 00:00:26.850
order on your unit test methods and classes.

7
00:00:27.270 --> 00:00:31.380
But first, let's learn how to run your unit tests in a run them order.

8
00:00:31.680 --> 00:00:34.410
And to demonstrate this, we'll create a new class.

9
00:00:35.920 --> 00:00:39.430
I will call this test class methods or the randomly.

10
00:00:40.890 --> 00:00:42.300
And test at the end.

11
00:00:43.020 --> 00:00:45.360
And now I will add to this class.

12
00:00:45.480 --> 00:00:46.950
For basic test methods.

13
00:00:47.280 --> 00:00:49.170
These test methods will not test anything.

14
00:00:49.290 --> 00:00:51.000
They will simply print out a string.

15
00:00:51.960 --> 00:00:55.470
Let's say we have test e that prints out.

16
00:00:56.580 --> 00:00:58.350
Something like running test eight.

17
00:00:59.660 --> 00:01:05.480
And now I will create three more test methods with very similar name, let's say test B.

18
00:01:06.570 --> 00:01:07.650
This scene.

19
00:01:09.820 --> 00:01:11.280
And Test D.

20
00:01:12.460 --> 00:01:16.210
Now to make sure that this test meant that's executed in random order.

21
00:01:16.510 --> 00:01:20.560
I will undertake this class with test, method or annotation.

22
00:01:21.250 --> 00:01:25.030
So it is test method order annotation.

23
00:01:25.330 --> 00:01:32.680
And this annotation allows us to use method order interface and we can use this interface to specify

24
00:01:32.680 --> 00:01:36.010
which order we would like to apply to this methods.

25
00:01:36.310 --> 00:01:44.140
For example, if I hit Dot, then using method order, we can order our methods by method mean by order

26
00:01:44.140 --> 00:01:44.890
annotation.

27
00:01:45.250 --> 00:01:48.770
Make them run in random order or order them.

28
00:01:48.790 --> 00:01:52.540
But in this planning for this demonstration, I will use random corner.

29
00:01:53.290 --> 00:01:59.080
And now if I run test methods in this class, I expect this method to run around the order.

30
00:01:59.080 --> 00:01:59.980
So let's try.

31
00:02:00.520 --> 00:02:04.630
I will click on run button to run all test methods in this class.

32
00:02:05.910 --> 00:02:09.300
And it looks like my methods to run in the random order.

33
00:02:09.539 --> 00:02:12.420
There's B, this C, A and D.

34
00:02:12.720 --> 00:02:18.180
Now, if I around this test methods one more time, I expect them to run in a different order.

35
00:02:18.480 --> 00:02:19.140
Let's try.

36
00:02:21.690 --> 00:02:23.550
And now the order is different.

37
00:02:23.640 --> 00:02:27.870
If I run again, it will be a different order again.

38
00:02:28.480 --> 00:02:28.740
Right.

39
00:02:28.740 --> 00:02:30.570
So it is working very well for us.

40
00:02:30.840 --> 00:02:32.760
And you now know how to make a unit.

41
00:02:32.760 --> 00:02:35.160
Tests run in a random order.

