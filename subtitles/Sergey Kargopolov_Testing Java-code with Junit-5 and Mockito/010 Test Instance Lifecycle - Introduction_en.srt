1
00:00:02,180 --> 00:00:08,480
In one of the previous video lessons, I have mentioned that by default you unit creates a new instance

2
00:00:08,480 --> 00:00:10,970
of this class for each test method.

3
00:00:11,510 --> 00:00:18,200
So if you have three test methods in a single test class, then when you run all test methods in this

4
00:00:18,200 --> 00:00:23,330
test class for each test method, you unit will create a new instance of a class.

5
00:00:23,660 --> 00:00:29,270
In this case, test methods are completely independent from each other and they can not share state.

6
00:00:29,660 --> 00:00:36,080
You cannot share information between these test methods and the changes made to instant state by one

7
00:00:36,080 --> 00:00:39,320
test method are not available in another test method.

8
00:00:39,770 --> 00:00:42,290
This is default behavior and it helps to.

9
00:00:42,290 --> 00:00:45,830
You need to run unit tests in isolation from each other.

10
00:00:46,190 --> 00:00:53,390
Now this default behavior can be changed and if needed we can configure g unit to run test methods in

11
00:00:53,390 --> 00:00:54,860
this same test instance.

12
00:00:56,650 --> 00:01:01,840
If you prefer G, you need to execute all test methods on the same test instance.

13
00:01:02,170 --> 00:01:09,370
Then you can annotate your test class with test instance annotation and indicate that instead of creating

14
00:01:09,370 --> 00:01:14,230
a new class instance permitted, you want the new test instance per class.

15
00:01:14,800 --> 00:01:19,540
When using this mode, only one test instance will be created per test class.

16
00:01:19,870 --> 00:01:25,840
And this is very helpful when working with integration tests because now your test methods can share

17
00:01:25,840 --> 00:01:28,780
state stored in object instance variables.

18
00:01:29,260 --> 00:01:35,020
In one of previous video lessons, you have learned how to configure your test methods to run in order

19
00:01:35,290 --> 00:01:36,460
one after another.

20
00:01:36,730 --> 00:01:43,060
Running order tests in a single class instance and being able to share instance variables between test

21
00:01:43,060 --> 00:01:48,220
methods gives you even more control when writing test methods that depend on each other.

22
00:01:48,640 --> 00:01:54,400
All right, so let's continue and let's learn how to make good test methods run in a single instance

23
00:01:54,400 --> 00:01:55,210
of a test class.

