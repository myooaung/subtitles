1
00:00:00,150 --> 00:00:05,640
When writing unit tests, developers tried to as much as possible for the first principle.

2
00:00:06,090 --> 00:00:11,400
It is a combination of multiple principles and in this lecture you will learn about these principles.

3
00:00:12,580 --> 00:00:20,020
The first letter in the first principle stands for fast unit tests are small pieces of code that perform

4
00:00:20,020 --> 00:00:27,730
one specific task because units are small and unlike integration tests, unit tests do not communicate

5
00:00:27,730 --> 00:00:31,030
over the network and do not perform database operations.

6
00:00:31,540 --> 00:00:37,570
And because unit tests do not communicate with remote servers or databases, they run very fast.

7
00:00:38,460 --> 00:00:41,760
The next letter in the first principle stands for independent.

8
00:00:42,300 --> 00:00:46,080
Ideally, a unit should be independent from each other.

9
00:00:46,470 --> 00:00:51,300
One unit test should not depend on the result produced by another unit test.

10
00:00:51,540 --> 00:00:54,900
In fact, by default, unit tests run in order.

11
00:00:55,140 --> 00:00:58,640
That is not obvious and we do not really know which we need.

12
00:00:58,650 --> 00:01:01,980
Test will run first and the white unit test will run second.

13
00:01:02,340 --> 00:01:08,910
The code you testing or the system under test should also be isolated from its dependencies, and this

14
00:01:08,910 --> 00:01:13,680
is to make sure that the back end dependency ownership does not influence a unit test.

15
00:01:14,070 --> 00:01:18,000
So dependencies are usually marked or stuffed with predefined data.

16
00:01:18,240 --> 00:01:25,140
And this way communities can test the system under test in isolation from its dependencies and produce

17
00:01:25,140 --> 00:01:26,490
a very accurate result.

18
00:01:27,760 --> 00:01:34,450
The next letter in the first principle stands for repeatable units should be repeatable and if I run

19
00:01:34,450 --> 00:01:41,050
the same unit test multiple times, it should produce the same result if unit test is run on a different

20
00:01:41,050 --> 00:01:41,590
computer.

21
00:01:41,800 --> 00:01:43,870
It should also produce the same result.

22
00:01:44,170 --> 00:01:49,780
This is why unit tests are made independent from environment and from other unit tests.

23
00:01:50,140 --> 00:01:56,100
The input parameters that the method under test requires are usually pretty find at hard coded, and

24
00:01:56,100 --> 00:02:01,000
the method that you are testing needs to be tested with valid and invalid input parameters.

25
00:02:01,210 --> 00:02:03,910
Then you will create two or three different unit tests.

26
00:02:04,270 --> 00:02:09,009
Each training test will test the method and the test with its own set of predefined parameters.

27
00:02:09,280 --> 00:02:11,650
And this way unit becomes repeatable.

28
00:02:11,830 --> 00:02:17,650
And if we run it multiple times in different environments on a different computer or different operating

29
00:02:17,650 --> 00:02:21,850
system, it will still produce the same result each time we run it.

30
00:02:22,750 --> 00:02:30,400
The next letter stands for self validating and this means that to learn if unit has passed or not develop

31
00:02:30,400 --> 00:02:37,000
or should not be doing any additional manual checks after the test completes, units will validate the

32
00:02:37,000 --> 00:02:37,660
result.

33
00:02:37,690 --> 00:02:44,470
That method under test has produced itself and it will itself make a decision whether this unit test

34
00:02:44,470 --> 00:02:46,030
is bouncing or is failing.

35
00:02:46,330 --> 00:02:54,160
So after unit test completes, the result will be clear and the next letter stands for thoro and developers

36
00:02:54,160 --> 00:02:58,030
who practice test driven development will also spell it as timely.

37
00:02:58,360 --> 00:02:59,560
Talking about Soto.

38
00:02:59,860 --> 00:03:05,080
This means that when testing the method, we should consider happy path as well as negative scenario.

39
00:03:05,440 --> 00:03:10,860
And this means that most of the time we create multiple unit tests to test a method that accepts input

40
00:03:10,870 --> 00:03:11,470
parameters.

41
00:03:11,830 --> 00:03:17,650
One unit test will test your method with while it can put parameters, and in other unit test will test

42
00:03:17,740 --> 00:03:19,750
method within valid input parameters.

43
00:03:20,080 --> 00:03:25,810
And if there is a range like minimum and maximum value, then we should create additional unit tests

44
00:03:26,050 --> 00:03:29,290
to test for minimum and or maximum values as well.

45
00:03:29,740 --> 00:03:36,040
And talking about time, it means that it is better to create unit test at the time you're working on

46
00:03:36,040 --> 00:03:37,090
application feature.

47
00:03:37,570 --> 00:03:43,300
This way you will have more confidence that the feature does work as expected, and there are less chances

48
00:03:43,300 --> 00:03:47,380
that you will introduce a bank and that BAC will be released to production.

49
00:03:47,710 --> 00:03:52,840
So before you promote your code to production, it should be covered with unit tests.

