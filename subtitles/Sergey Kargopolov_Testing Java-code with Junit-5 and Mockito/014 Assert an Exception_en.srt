1
00:00:00,270 --> 00:00:05,460
In this lesson you will learn how to where you find the method you are testing throws exception.

2
00:00:05,670 --> 00:00:12,930
And for this demonstration I will use the integer division method which we have disabled in a previous

3
00:00:12,930 --> 00:00:13,590
video lesson.

4
00:00:14,010 --> 00:00:19,980
All right, so what I'm going to do, I'm going to disable the disabled annotation or comment it out,

5
00:00:19,980 --> 00:00:24,150
and I will remove the fail assertion as well.

6
00:00:24,510 --> 00:00:28,650
I will also add the three sections arrange, act and insert.

7
00:00:30,970 --> 00:00:37,600
Mind this the purpose of this testimony that I can read from insane tests integer division method.

8
00:00:37,960 --> 00:00:42,430
When dividends is divided by zero, it should throw arithmetic exception.

9
00:00:42,700 --> 00:00:45,600
So let's work on it in the arranged section.

10
00:00:45,610 --> 00:00:47,620
I will prepare a few variables.

11
00:00:48,040 --> 00:00:50,260
I will need dividend and divisor.

12
00:00:52,870 --> 00:00:55,810
The dividend is going to be four and it is four.

13
00:00:55,810 --> 00:00:58,420
That is going to be divided by zero.

14
00:00:58,600 --> 00:01:04,989
And when we divide by zero and if medical exception takes place to invoke or a method under the test

15
00:01:04,989 --> 00:01:08,560
integer division, we will need an instance of calculator class.

16
00:01:08,860 --> 00:01:14,770
I can create an instance of calculator class here in the arranged section, but I don't need to do it

17
00:01:14,770 --> 00:01:20,350
because it will be created in the method that runs before each test method.

18
00:01:20,350 --> 00:01:27,340
Here in this method we already create a calculator object so I can use it to invoke my method under

19
00:01:27,340 --> 00:01:27,730
test.

20
00:01:29,490 --> 00:01:32,820
And that will give it the dividend and divisor.

21
00:01:33,990 --> 00:01:41,280
And now I need to assert that if integer division method is invoked with these two input parameters

22
00:01:41,280 --> 00:01:43,590
and arithmetic exception will get thrown.

23
00:01:43,950 --> 00:01:48,200
To do that, that will use a special assertion that is called assert throws.

24
00:01:50,040 --> 00:01:56,010
The first parameter that assert throws assertion accepts is the type or class name of the exception

25
00:01:56,010 --> 00:01:57,240
that we are expecting.

26
00:01:57,510 --> 00:01:59,710
We are expecting arithmetic exceptions.

27
00:01:59,710 --> 00:02:03,840
So I will type here arithmetic exception like this.

28
00:02:04,200 --> 00:02:11,070
The second parameter is executable and here I will provide lambda function that will invoke my method

29
00:02:11,070 --> 00:02:11,850
under test.

30
00:02:12,240 --> 00:02:18,150
I will create a new anchored section and here I will invoke my method under test.

31
00:02:18,150 --> 00:02:24,830
So I will copy and paste it here inside of my lambda function and I will rename this section.

32
00:02:24,840 --> 00:02:27,750
It will be act and assert like this.

33
00:02:28,200 --> 00:02:34,920
And the third parameter that we can include in this assert through the assertion is the optional message

34
00:02:35,160 --> 00:02:36,080
that will be printed.

35
00:02:36,090 --> 00:02:37,530
If this assertion fails.

36
00:02:38,130 --> 00:02:44,070
For example, as a message we can provide division by zero should have thrown a medical exception.

37
00:02:46,860 --> 00:02:50,310
In the assert section here that is below.

38
00:02:50,580 --> 00:02:55,710
I can check with the exception message that was returned is what I'm expecting to do.

39
00:02:55,710 --> 00:03:00,540
This I will assign the result of this assertion to a local variable.

40
00:03:01,790 --> 00:03:05,960
For example, I will create a local variable that is called actual exemption.

41
00:03:06,260 --> 00:03:11,150
And now when I have this exemption object, I can read from the actual error message.

42
00:03:11,510 --> 00:03:17,180
I will first create a new local variable that I will call expected exception message.

43
00:03:18,560 --> 00:03:23,750
When the arithmetic exception takes place, the default error message looks usually like this.

44
00:03:23,900 --> 00:03:31,610
It's a division signed by zero, division by zero, and it needs to be a string like this.

45
00:03:31,910 --> 00:03:40,040
So now I can compare the expected exception message with the actual exception message in the assert

46
00:03:40,130 --> 00:03:40,670
section.

47
00:03:41,060 --> 00:03:44,660
To do that I will use assert equals assertion.

48
00:03:45,170 --> 00:03:54,120
The expected error message is expected exception message and the actual error message I will use from

49
00:03:54,120 --> 00:03:56,540
the face a local wearable that I have created.

50
00:03:57,050 --> 00:04:04,730
Actual exception message get message my English and I can also provide a default error message that

51
00:04:04,730 --> 00:04:06,860
will be printed if this assertion fails.

52
00:04:07,070 --> 00:04:10,220
For example, I can say unexpected exception message.

53
00:04:11,940 --> 00:04:12,750
Something like this.

54
00:04:13,170 --> 00:04:19,079
All right, so now I can save changes in this test cause and they can run my test method and see if

55
00:04:19,079 --> 00:04:19,589
it works.

56
00:04:20,010 --> 00:04:24,330
To do that, that will click on this a run button, which is right next to the test name.

57
00:04:25,880 --> 00:04:32,720
And my test meant that this passing that's minimized test reports and if I change the value of divisor

58
00:04:32,780 --> 00:04:39,350
local variable and make it a valid integer, for example, two four divided by two will be two.

59
00:04:39,500 --> 00:04:43,910
In this case, no exception will be thrown and this test method should fail.

60
00:04:44,540 --> 00:04:48,680
So let's save changes and twists around this test method one more time.

61
00:04:49,880 --> 00:04:52,730
And now we have a failing union test.

62
00:04:53,030 --> 00:04:59,240
And if I look at the assertion error message, it says that the evasion by zero should have thrown if

63
00:04:59,240 --> 00:05:00,140
medical exemption.

64
00:05:01,590 --> 00:05:08,160
Which is an error message that we've provided and then a default error message that was provided by

65
00:05:08,190 --> 00:05:08,760
two union.

66
00:05:08,940 --> 00:05:12,990
Expected an immediate exception to be thrown, but nothing was thrown.

67
00:05:13,260 --> 00:05:13,590
All right.

68
00:05:13,590 --> 00:05:15,300
So it looks like it is working well.

69
00:05:15,600 --> 00:05:17,070
Let's make it pass again.

70
00:05:17,160 --> 00:05:20,310
I will change the value of Divisor Back to zero.

71
00:05:20,610 --> 00:05:23,190
Save changes and run this test again.

72
00:05:24,230 --> 00:05:26,060
And now we have a passing unity test.

73
00:05:26,480 --> 00:05:26,840
All right.

74
00:05:26,840 --> 00:05:32,360
So now you know how to verify if they meant that under the rules, correct the exception in the following

75
00:05:32,360 --> 00:05:38,090
lectures, we might come back to this assertion, assert gross one more time and use it with different

76
00:05:38,090 --> 00:05:38,780
unit tests.

77
00:05:38,960 --> 00:05:40,490
But for now, let's continue.

