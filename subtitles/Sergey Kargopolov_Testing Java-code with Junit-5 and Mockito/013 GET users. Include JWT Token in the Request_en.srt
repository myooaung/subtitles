1
00:00:00,180 --> 00:00:06,660
In this lesson, we will work on a test method that will test if we can fetch a list of users from protected

2
00:00:06,660 --> 00:00:07,710
API endpoint.

3
00:00:07,800 --> 00:00:10,920
So let's open risk controller for a minute.

4
00:00:11,430 --> 00:00:13,140
Here's my risk controller.

5
00:00:13,140 --> 00:00:18,120
And if I scroll down here, I have a method that is called get users.

6
00:00:18,120 --> 00:00:23,640
And in this lesson we will write a test method that will test this API endpoint.

7
00:00:23,670 --> 00:00:31,140
To invoke this method, we will need to send the HTTP, get request to a forward slash users URL path

8
00:00:31,140 --> 00:00:35,880
that is defined with this request mapping at the top of our controller class.

9
00:00:36,720 --> 00:00:39,750
This method also accepts to request parameters.

10
00:00:39,750 --> 00:00:46,920
These are page and limit, and because these parameters have default values assigned to them, it is

11
00:00:46,920 --> 00:00:49,560
optional to include them in our request.

12
00:00:49,560 --> 00:00:56,640
And if our HTTP request does not include any of this request parameters, then these default values

13
00:00:56,640 --> 00:00:57,600
will be used.

14
00:00:57,990 --> 00:01:05,850
And if everything is good, this method will return us a list of users that are represented by user

15
00:01:05,850 --> 00:01:07,140
rest data type.

16
00:01:07,140 --> 00:01:11,460
If I open this class then every user will have user ID.

17
00:01:11,460 --> 00:01:13,920
First name, last name and email.

18
00:01:15,200 --> 00:01:20,300
Also because at this point, both application uses print security by default.

19
00:01:20,330 --> 00:01:27,280
This API endpoint is protected and this means that for us to be able to invoke this method and to get

20
00:01:27,290 --> 00:01:34,640
list of users, our HTTP get request will need to contain a valid JWT access token in authorization

21
00:01:34,640 --> 00:01:35,150
header.

22
00:01:35,270 --> 00:01:41,390
Otherwise, instead of receiving a list of users, we will get back as HTTP status code four three,

23
00:01:41,420 --> 00:01:43,340
which stands for Forbidden.

24
00:01:43,730 --> 00:01:48,170
All right, so let's go back to our test class and create a new test method.

25
00:01:49,270 --> 00:01:55,120
Now because this test method will need to include authorization access token in http request.

26
00:01:55,150 --> 00:01:59,020
I'll need to run it after I perform user login.

27
00:01:59,020 --> 00:02:01,300
So after method number three.

28
00:02:02,080 --> 00:02:09,669
So I will annotate this test method with annotation order and provide index four because I want this

29
00:02:09,669 --> 00:02:11,360
method to run fourth.

30
00:02:11,710 --> 00:02:18,310
Next, I will provide this display name and as display name value I will use something like get user

31
00:02:18,310 --> 00:02:27,370
works, get for HTTP method, get forward slash users as URL path and just a label works something like

32
00:02:27,370 --> 00:02:27,940
this.

33
00:02:28,760 --> 00:02:31,700
And next I'll come up with a name for my test method.

34
00:02:35,250 --> 00:02:43,660
Something like this test get users when valid JWT provided returns users and that will add a range act

35
00:02:43,680 --> 00:02:44,940
and insert sections.

36
00:02:47,790 --> 00:02:55,350
Now the HTTP request that this method will perform will need to include JWT access token in authorization

37
00:02:55,350 --> 00:02:55,890
header.

38
00:02:55,890 --> 00:03:01,200
So I will need to prepare a IP headers and I will do it in a range section.

39
00:03:03,870 --> 00:03:10,860
And this time, just as an example, I will set the accept header using this set accept method.

40
00:03:10,860 --> 00:03:19,350
It accepts list of media type, so I will use arrays as list and then will provide one media type which

41
00:03:19,350 --> 00:03:23,340
will be application JSON like this.

42
00:03:23,580 --> 00:03:30,360
Now I keep on adding this accept should be header, but it's actually optional because by default spring

43
00:03:30,360 --> 00:03:32,910
framework supports JSON as a media type.

44
00:03:32,910 --> 00:03:38,700
So if your application is not configured to use XML for example, as default media type, then you can

45
00:03:38,700 --> 00:03:40,230
actually skip this header.

46
00:03:40,230 --> 00:03:44,880
And next I will set authorization header with a token value.

47
00:03:44,880 --> 00:03:53,310
And the way we can do it is to use set beer house method that accepts token as a parameter and I will

48
00:03:53,310 --> 00:03:55,890
call it authorization token.

49
00:03:55,890 --> 00:03:56,340
Maybe.

50
00:03:56,550 --> 00:04:03,150
So this method will add a ship header with a beer as a prefix to visibility token.

51
00:04:03,360 --> 00:04:06,420
And now we need to provide the token itself.

52
00:04:06,420 --> 00:04:12,900
Now the value of authorization token we receive in the method that performs user login.

53
00:04:13,700 --> 00:04:21,800
So if I scroll up, here's our method that tests user log in and when we receive response here in the

54
00:04:21,800 --> 00:04:26,720
assertion, we read the value of a GDB header with a name.

55
00:04:27,940 --> 00:04:28,930
Authorization.

56
00:04:30,310 --> 00:04:36,850
Now for me to be able to use this authorization header in all the test methods, I will need to assign

57
00:04:36,850 --> 00:04:38,980
it to a class member variable.

58
00:04:38,980 --> 00:04:40,600
So let's do it.

59
00:04:40,600 --> 00:04:44,170
I will create a class member variable on the top.

60
00:04:44,740 --> 00:04:50,320
That will be private string and I will call it authorization token.

61
00:04:50,320 --> 00:05:02,680
And now I will scroll down and I will assign in method number three that tests user log in this one

62
00:05:02,680 --> 00:05:04,420
in method number three.

63
00:05:04,420 --> 00:05:14,470
When I receive response, I can initialize this authorization token with a value that I read from the

64
00:05:14,470 --> 00:05:17,050
response header like this.

65
00:05:17,820 --> 00:05:21,600
And now I will use authorization token in that assertion.

66
00:05:21,600 --> 00:05:25,140
And there is one more change that I will need to make to make it work.

67
00:05:25,230 --> 00:05:31,320
Remember that by default for each test method that your unit executes, it creates a new instance of

68
00:05:31,320 --> 00:05:32,160
a test class.

69
00:05:32,160 --> 00:05:39,810
So once this test method test user login completes in the following test method, the value assigned

70
00:05:39,810 --> 00:05:42,960
to this member variable will be null again.

71
00:05:42,960 --> 00:05:48,690
And for this not to happen, I need to change the test instance lifecycle.

72
00:05:48,720 --> 00:05:56,040
To do that I will scroll up and I will annotate my test class with additional annotation that is called

73
00:05:56,040 --> 00:05:57,240
test instance.

74
00:05:58,110 --> 00:06:03,860
So by default, g unit will create a new instance of a test class per test method.

75
00:06:03,870 --> 00:06:07,740
So I will change this behavior to B per class.

76
00:06:09,070 --> 00:06:12,880
Test instance life cycle per class.

77
00:06:12,880 --> 00:06:18,940
And this will make all of our test methods in this class share the same instance of a class.

78
00:06:18,940 --> 00:06:25,540
And this means that the value that I assign to this authorization token member variable can be used

79
00:06:25,540 --> 00:06:26,890
in different test methods.

80
00:06:26,890 --> 00:06:30,520
So we assign this value in test method.

81
00:06:30,520 --> 00:06:38,590
Number three here we assign authorization token to a member variable and in the following method, method

82
00:06:38,590 --> 00:06:41,320
number four, we can use this value.

83
00:06:41,380 --> 00:06:47,920
So here I'm using authorization header member variable to set the value of authorization header.

84
00:06:48,010 --> 00:06:54,730
And now I can put this headers into HTTP entity and use it in the request.

85
00:06:59,520 --> 00:07:04,590
And next in the ACT section I can perform HDB get request.

86
00:07:12,560 --> 00:07:15,530
In response back, I want to get a list of users.

87
00:07:15,530 --> 00:07:21,950
So that's going to be a list of user arrest data type because this is what my method in the controller

88
00:07:21,950 --> 00:07:27,380
class returns and this will give me a response entity with a list of users.

89
00:07:30,070 --> 00:07:33,670
The same data type that I use here.

90
00:07:34,440 --> 00:07:38,850
I will assign it to a response variable like this.

91
00:07:39,180 --> 00:07:41,350
Let's give it a little more space.

92
00:07:41,370 --> 00:07:48,570
And now that I have my response object in the assert section, I can assert that the HTTP response status

93
00:07:48,570 --> 00:07:55,830
code is 200 because if the authorization access token that we are including here is missing or if it

94
00:07:55,830 --> 00:07:59,500
is invalid in response back, we will get four or three.

95
00:07:59,520 --> 00:08:04,010
But if everything is okay, our response status code will be to handle it.

96
00:08:04,020 --> 00:08:05,760
So let's assert for that.

97
00:08:08,280 --> 00:08:12,780
Expected value is a HTTP status code 200, which is okay.

98
00:08:12,780 --> 00:08:17,820
And the actual HTP status code, I will read from response object.

99
00:08:18,860 --> 00:08:23,210
And if these two values are not equal, how will this play an error message?

100
00:08:24,950 --> 00:08:27,230
Should be status quo should be 200.

101
00:08:27,440 --> 00:08:27,950
All right.

102
00:08:27,950 --> 00:08:35,090
And as a second assertion, I will check if the number of users returned in HTTP response, if this

103
00:08:35,539 --> 00:08:43,159
response contains at least one user, because there is only one user that we have created by executing

104
00:08:43,190 --> 00:08:45,800
test method number one, this one.

105
00:08:45,800 --> 00:08:48,650
So this will be the only user in our database.

106
00:08:49,250 --> 00:08:51,350
So I will add an assertion.

107
00:08:52,880 --> 00:08:54,860
Maybe assert true.

108
00:08:55,190 --> 00:09:04,220
I will use a response object to read response body and response body will give me a list of objects

109
00:09:04,220 --> 00:09:11,750
of user data type and because it is at least I can call size method on it and I want this size to be

110
00:09:11,750 --> 00:09:12,980
exactly one.

111
00:09:12,980 --> 00:09:19,700
And if it is not equal to one, I will display an error message that there should be exactly one user

112
00:09:19,700 --> 00:09:20,450
in the list.

113
00:09:22,570 --> 00:09:27,040
All right, so now we should be able to run this method and see if it passes.

114
00:09:27,040 --> 00:09:31,870
So I will scroll up and I will run all test methods in this class.

115
00:09:37,520 --> 00:09:39,320
Now my test method failed.

116
00:09:39,440 --> 00:09:47,180
Let's look at the error message and it says that the status code is 403 forbidden.

117
00:09:47,180 --> 00:09:49,860
And this is because I made a mistake here.

118
00:09:49,880 --> 00:09:58,190
The test instance lifecycle should be set, not permitted, but per class, because by default g unit

119
00:09:58,190 --> 00:10:01,620
will create a new instance of a test class per each method.

120
00:10:01,640 --> 00:10:07,820
So if I want my test methods to share the same instance of a test class, I'll need to set the test

121
00:10:07,820 --> 00:10:09,870
instance lifecycle two per class.

122
00:10:09,890 --> 00:10:16,430
I made a mistake here so I will save changes now and I will run my test methods one more time.

123
00:10:19,480 --> 00:10:21,550
And now it passes.

124
00:10:21,580 --> 00:10:23,110
All right, so it worked.

125
00:10:23,140 --> 00:10:25,150
Now let's make it fail.

126
00:10:25,180 --> 00:10:29,260
I will scroll down and I will remove authorization header.

127
00:10:29,290 --> 00:10:34,840
In our test method, we set authorization access token in authorization header.

128
00:10:34,840 --> 00:10:40,210
So I will comment this line out and we'll see if my test method still works.

129
00:10:40,210 --> 00:10:46,420
I expect it not to work because if authorization header is missing in response, I should receive a

130
00:10:46,420 --> 00:10:48,490
http status code for three.

131
00:10:50,360 --> 00:10:56,530
And it failed with an error message that HTTP status code should be to hang it.

132
00:10:56,540 --> 00:11:00,890
But we have received for three forbidden, which is correct.

133
00:11:01,040 --> 00:11:03,350
Now let's make it work again.

134
00:11:03,350 --> 00:11:10,310
I will provide valid authorization, token save changes and run my test methods one more time.

135
00:11:13,570 --> 00:11:15,720
And now my test method passes.

136
00:11:15,730 --> 00:11:18,070
All right, so it all worked very well.

137
00:11:18,070 --> 00:11:24,460
And you now know how to write a test method that includes authorization access token in HTTP request.

