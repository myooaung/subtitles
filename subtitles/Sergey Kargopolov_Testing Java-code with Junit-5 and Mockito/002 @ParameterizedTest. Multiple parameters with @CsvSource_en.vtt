WEBVTT
1
00:00:00.250 --> 00:00:06.960
G-Unit provides us with another very useful annotation that can be used to supplement arguments to a

2
00:00:06.960 --> 00:00:10.170
test mounted and it is called CSP source.

3
00:00:10.500 --> 00:00:17.430
I will comment out method source annotation and instead of method source, I will use C as resource.

4
00:00:18.950 --> 00:00:19.490
Like this.

5
00:00:19.910 --> 00:00:22.460
So this annotation sizzles.

6
00:00:22.790 --> 00:00:27.290
It allows us to supply a list of arguments as comma separated values.

7
00:00:27.620 --> 00:00:32.509
For example, let's supply a few arguments instead of brackets.

8
00:00:32.720 --> 00:00:38.600
I will add curly brackets, and inside of curly brackets I will add double quotes.

9
00:00:38.600 --> 00:00:42.260
And instead of double quotes, I will provide my parameters.

10
00:00:42.560 --> 00:00:48.500
For example, 33 takeaway one will be equal to 32.

11
00:00:48.860 --> 00:00:56.240
So notice that arguments are surrounded with curly brackets and they are grouped with double quotes

12
00:00:56.240 --> 00:00:57.860
but separated with comma.

13
00:00:58.070 --> 00:00:59.930
And we have three values here.

14
00:01:00.440 --> 00:01:09.620
33 will be matched to a menu and one will be matched to subtract and 32 will be matched to expected

15
00:01:09.620 --> 00:01:10.070
result.

16
00:01:10.550 --> 00:01:16.760
Now, if I want my test method to run and test additional set of values, I will then add a new set.

17
00:01:16.970 --> 00:01:25.660
Inside of curly brackets, I will add a new line and I will copy my first set of arguments at comma.

18
00:01:25.670 --> 00:01:29.330
And then and now I will add a new entry like this.

19
00:01:29.600 --> 00:01:33.710
So inside of curly brackets, I can add new entries.

20
00:01:34.070 --> 00:01:42.080
So let's say this one will be 24, which is going to be minu and then one will be subtract hand and

21
00:01:42.080 --> 00:01:49.490
expected result will be 23 and I will add one more entry separated with a comma.

22
00:01:50.120 --> 00:01:59.330
This one will be 54 take away, one will equal to 53 and because we use see as we source now and we

23
00:01:59.330 --> 00:02:06.230
no longer use method source, the methods or methods that we have added in previous lesson is not needed

24
00:02:06.230 --> 00:02:06.560
anymore.

25
00:02:06.560 --> 00:02:10.039
So I can either delete it or I will comment it out for now.

26
00:02:10.250 --> 00:02:10.820
Like this.

27
00:02:11.360 --> 00:02:15.650
Now I can save my changes and I can around this test method to see how it works.

28
00:02:15.950 --> 00:02:19.580
I will click on the run button and we'll run this test method.

29
00:02:20.680 --> 00:02:21.820
And it worked well.

30
00:02:22.240 --> 00:02:28.540
The same test meant method run three times and each time with a different set of arguments.

31
00:02:28.930 --> 00:02:34.300
Now let's assume that we have a test method and we need to test it with a string parameters rather than

32
00:02:34.300 --> 00:02:35.170
with integers.

33
00:02:35.500 --> 00:02:44.770
To do that, we will go back to our CSP source and I will comment it out for now and we'll add a new

34
00:02:44.770 --> 00:02:47.940
annotation which is still since we source.

35
00:02:48.250 --> 00:02:51.340
But instead of integers I will use string.

36
00:02:51.700 --> 00:02:59.770
So in brackets we will have curly brackets and inside of curly brackets we will have double quotes and

37
00:02:59.770 --> 00:03:01.140
then a set of values.

38
00:03:01.150 --> 00:03:03.160
So exactly the same approach.

39
00:03:03.160 --> 00:03:06.580
But this time not integers, but strings.

40
00:03:06.730 --> 00:03:10.060
For example, apple and orange, for example.

41
00:03:10.540 --> 00:03:16.600
With these values might a unique method will need to accept two parameters, and that will run one time

42
00:03:16.600 --> 00:03:19.060
on only to make it a run twice.

43
00:03:19.270 --> 00:03:26.530
I will need to add a new entry separating it with a comma, and then in double quotes I will add my

44
00:03:26.530 --> 00:03:27.010
values.

45
00:03:27.340 --> 00:03:33.340
Let's assume that the first parameter is still Apple, but the second one is empty.

46
00:03:33.670 --> 00:03:41.260
To supply empty value I will use single code but twice one two and that will be an empty string around

47
00:03:41.260 --> 00:03:41.380
it.

48
00:03:41.890 --> 00:03:49.150
And if I want to test my method with one value which is not empty but is equal to no, actually then

49
00:03:49.150 --> 00:03:53.170
I will use apple and then coma and then nothing.

50
00:03:53.410 --> 00:03:55.110
Not even single quotes.

51
00:03:55.120 --> 00:04:01.110
And in this case first parameter will be apple and the value of the second parameter will be no.

52
00:04:01.540 --> 00:04:04.540
All right, so let's make our method work again.

53
00:04:04.870 --> 00:04:12.160
I will remove string values and I will bring back the CSP source with integer values.

54
00:04:12.520 --> 00:04:17.440
And we'll run this method again just to make sure it works well and it passes.

55
00:04:17.950 --> 00:04:18.279
All right.

56
00:04:18.279 --> 00:04:22.150
So everything is working well and we're good to continue to the next lesson.

