1
00:00:00,270 --> 00:00:04,620
In this lesson, you will learn how to order execution of test classes.

2
00:00:05,040 --> 00:00:11,220
And for this demonstration, I have created a separate project and I have attached to this lecture.

3
00:00:11,640 --> 00:00:16,920
You can pose this video, lesson, download and open my project in your development environment.

4
00:00:17,310 --> 00:00:22,080
Or you can watch this video, listen first and then try practicing with your own classes.

5
00:00:22,590 --> 00:00:28,920
Now, once you open this project in your development environment, you'll see three test classes order

6
00:00:28,920 --> 00:00:34,440
a service test, product service test and user service test.

7
00:00:35,280 --> 00:00:39,600
We're going to order the execution of test methods in these three classes.

8
00:00:40,170 --> 00:00:46,410
Now, although those classes typically should not rely on the order in which they're executed, there

9
00:00:46,410 --> 00:00:51,500
are times when it is desirable to enforce a specific test class execution order.

10
00:00:51,990 --> 00:00:58,260
You might want to specifically indicate that this class should execute unit tests in a random order.

11
00:00:58,260 --> 00:01:04,379
For example, this is to ensure that there are no accidental dependencies between this test classes

12
00:01:04,830 --> 00:01:06,870
or when doing integration testing.

13
00:01:07,050 --> 00:01:13,860
You might want to control which this class executes first and which this class gets executed second.

14
00:01:14,520 --> 00:01:20,940
You might also want to consider execution of your test classes just to make your test reports look more

15
00:01:20,940 --> 00:01:21,630
organized.

16
00:01:22,200 --> 00:01:30,150
In each of those classes that I have on this project, I have an empty test method and also one setup

17
00:01:30,150 --> 00:01:36,690
method, and this attack method will run before test method and then class, and it will print a message.

18
00:01:37,110 --> 00:01:43,620
For example, in this user service test class, then one such ease test methods related to user.

19
00:01:44,130 --> 00:01:50,490
Similarly, in other test classes, for example, if I opened a product service test, the message that

20
00:01:50,490 --> 00:01:57,120
will be printed says test methods related to product service and the event Auckland Order Service.

21
00:01:57,360 --> 00:02:00,720
The message says Test methods related to Order Service.

22
00:02:01,290 --> 00:02:07,080
Now if I execute all test classes in this project, I don't really know which one will run first and

23
00:02:07,080 --> 00:02:08,520
which one will run second.

24
00:02:08,880 --> 00:02:09,919
So let's try.

25
00:02:09,930 --> 00:02:15,510
I will select test folder, I will do right click and then will choose run old tests.

26
00:02:17,290 --> 00:02:22,840
Now, if I look at the test report, then I see that product really did test run first.

27
00:02:23,170 --> 00:02:28,480
Then ordinarily two tests run first and then usually two tests at the end.

28
00:02:28,870 --> 00:02:34,360
If I'm doing the integration testing, then I want to use the related tests to execute first.

29
00:02:34,360 --> 00:02:39,940
Then this is because product cannot be ordered without an existing user account, for example.

30
00:02:40,360 --> 00:02:48,010
So the order in which I want these tests to be executed is I want all user related tests to run first,

31
00:02:48,460 --> 00:02:51,820
then I want product related tests to run first.

32
00:02:51,820 --> 00:02:55,420
And at the end I want all the related tests current.

33
00:02:55,840 --> 00:03:01,780
So to specify which this class will be executed first and which this class will be executed second,

34
00:03:02,050 --> 00:03:03,880
I will use order annotation.

35
00:03:04,300 --> 00:03:10,960
I will open user service test and will add order annotation above the class.

36
00:03:11,950 --> 00:03:17,800
For this class I will use index one because I want user related tests to run first.

37
00:03:18,430 --> 00:03:24,520
Once the user related unit tests complete, I want product related tests to run next.

38
00:03:24,520 --> 00:03:30,040
So I will annotate product service test with order annotation with index two.

39
00:03:30,460 --> 00:03:37,930
And at the end I want all the related tests to run and I will add order annotation above the order service

40
00:03:37,930 --> 00:03:39,580
class name with index three.

41
00:03:39,940 --> 00:03:47,410
Now I will save changes in all of my classes and in previous lessons we have used the method order to

42
00:03:47,410 --> 00:03:50,290
configure the execution order of our test methods.

43
00:03:50,530 --> 00:03:58,330
Now instead of configuring execution order for method or a class in each class g unit allows us to provide

44
00:03:58,330 --> 00:04:01,390
this configuration for entire project globally.

45
00:04:01,780 --> 00:04:08,080
And to do that we will use property from the property file will need to be placed into resources folder.

46
00:04:08,080 --> 00:04:10,840
I don't have it yet so I will need to create it.

47
00:04:11,470 --> 00:04:15,100
I will select test folder and will do right last week.

48
00:04:15,100 --> 00:04:17,290
Choose new and then package.

49
00:04:18,010 --> 00:04:20,019
I will call this package resources.

50
00:04:21,680 --> 00:04:27,920
And now I will do right models, click on resources and will choose open module settings.

51
00:04:28,520 --> 00:04:32,870
On the left side, I want modules to be selected then the current module.

52
00:04:33,290 --> 00:04:39,470
And on this panel here I will select resources package which is under test directory.

53
00:04:39,860 --> 00:04:48,050
And from the buttons above here I will click on Test Resources Button to mark this directory as a Test

54
00:04:48,050 --> 00:04:49,070
Resources throughout.

55
00:04:49,460 --> 00:04:55,850
Once I do it, the icon on the resources folder should slightly change once than I will click on a key

56
00:04:55,850 --> 00:05:01,040
button to close this window and now inside of Resources package.

57
00:05:01,310 --> 00:05:06,890
I will create a property file to do that I will do right mouse click, then choose new and then choose

58
00:05:06,890 --> 00:05:08,090
resources bundle.

59
00:05:08,900 --> 00:05:15,350
The name of this property file will be G Unit dash platform.

60
00:05:16,580 --> 00:05:22,640
No need to add those two properties, just unit dash platform and click on okay button.

61
00:05:23,840 --> 00:05:29,240
And so now I have two units planned for properties far created in this property file.

62
00:05:29,250 --> 00:05:36,380
I'll need to add the following property to you and Dot Jupiter dot first class.

63
00:05:36,560 --> 00:05:50,930
One word dot order dot default equals and the value is org dot g unit, dot jupiter dot api north and

64
00:05:50,930 --> 00:05:52,460
then class order.

65
00:05:52,610 --> 00:05:56,900
And finally I'll select order annotation like this.

66
00:05:57,680 --> 00:06:00,290
Okay if I want those classes, those are cute.

67
00:06:00,300 --> 00:06:05,030
Run them instead of using order annotation then I will use.

68
00:06:06,350 --> 00:06:12,920
A random instead, or if I want the order to be controlled by the closely, then instead of choosing

69
00:06:12,920 --> 00:06:15,110
a random, I will choose closely.

70
00:06:15,650 --> 00:06:16,040
Okay.

71
00:06:16,340 --> 00:06:20,720
But I will go with order annotation and will select order annotation.

72
00:06:21,110 --> 00:06:27,410
Now you can use exactly the same approach to configure method execution globally and to do that instead

73
00:06:27,410 --> 00:06:28,520
of death class.

74
00:06:28,520 --> 00:06:33,290
Here you will provide the same property with instead of first class.

75
00:06:33,290 --> 00:06:41,690
Here you will type this method right and the value will be org g unique jupyter and then API.

76
00:06:41,930 --> 00:06:50,120
And then instead of class order you will choose method order and then dot and select method order.

77
00:06:50,120 --> 00:06:53,810
For example, order annotation method, then a patient or random.

78
00:06:54,590 --> 00:06:58,910
All right, so I'm not going to configure method order.

79
00:06:58,910 --> 00:07:03,650
So I will do this and will continue only with the class order.

80
00:07:04,100 --> 00:07:10,970
Now I will save changes to my G unit plot from Properties file and I'm ready to run all tests in this

81
00:07:10,970 --> 00:07:12,800
project and see how it works.

82
00:07:13,190 --> 00:07:18,530
To do that I will do right mouse click on the test folder and then choose a run.

83
00:07:18,890 --> 00:07:19,760
All tests.

84
00:07:21,820 --> 00:07:29,380
I got an error message and I wonder why it says class not found exemption order annotation.

85
00:07:30,080 --> 00:07:33,380
Oh, I think I made a typo instead of dot.

86
00:07:33,400 --> 00:07:40,510
I should have used the dollar sign between class order and order annotation.

87
00:07:40,520 --> 00:07:43,900
So instead of gold here, we should use dollar sign.

88
00:07:44,110 --> 00:07:48,550
Now let's save this and let's try running this test again.

89
00:07:50,470 --> 00:07:51,640
Run all tests.

90
00:07:53,510 --> 00:07:55,190
And now all of them pass.

91
00:07:55,610 --> 00:07:58,970
The first class that got executed is user.

92
00:07:59,030 --> 00:08:03,560
The second is product and last is order, which is correct.

93
00:08:03,590 --> 00:08:09,650
All test classes got executed in the order that we have configured with order annotation.

94
00:08:09,770 --> 00:08:10,070
All right.

95
00:08:10,070 --> 00:08:11,480
So it is working very well.

96
00:08:11,720 --> 00:08:16,280
And you now know how to control execution order of test classes as well.

97
00:08:16,580 --> 00:08:16,880
All right.

98
00:08:16,880 --> 00:08:17,900
So let's continue.

