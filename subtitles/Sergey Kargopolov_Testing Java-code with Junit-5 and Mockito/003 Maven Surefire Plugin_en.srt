1
00:00:00,330 --> 00:00:06,930
Now in previous lesson, we've added the needs of MAVEN dependency and we were able to execute our test

2
00:00:06,930 --> 00:00:08,910
using our development environment.

3
00:00:09,540 --> 00:00:15,000
However, it is not always that we need to execute unit test using development environment.

4
00:00:15,300 --> 00:00:20,970
Sometimes we need our unit tests to be executed when we build our project using MAVEN.

5
00:00:21,720 --> 00:00:22,890
Let me show you what I mean.

6
00:00:23,130 --> 00:00:31,200
So if I open a terminal window by clicking on this button terminal and at least files to make sure that

7
00:00:31,200 --> 00:00:36,030
I'm in the right directorate, I need to be able to see SML file.

8
00:00:36,060 --> 00:00:38,760
So I'm in the home directory of my project.

9
00:00:39,150 --> 00:00:46,050
So if I want to build or package my project using Maven, I will run the following command maven space

10
00:00:46,200 --> 00:00:48,510
package and then hit enter.

11
00:00:48,960 --> 00:00:52,410
And this will compile and package my project into a jar file.

12
00:00:52,710 --> 00:00:54,610
And now they both are successful.

13
00:00:54,630 --> 00:01:01,320
But notice that even though the build is successful, there are zero tests that get executed.

14
00:01:01,860 --> 00:01:06,480
Now I can also run maven command to execute test phases separately.

15
00:01:06,840 --> 00:01:08,220
Let's see if this works.

16
00:01:08,760 --> 00:01:13,140
So the command is may one space and then test and hit enter.

17
00:01:15,070 --> 00:01:20,800
And again, even though the build is successful, there are zero tests executed.

18
00:01:21,310 --> 00:01:26,800
So Tony, will our application execute unit tests during in the MAVEN build lifecycle?

19
00:01:27,130 --> 00:01:30,190
We need to add a plug in to pull maximum file.

20
00:01:30,640 --> 00:01:38,500
So I will call the terminal window and I will go back to pull maximum file and right before the project

21
00:01:38,500 --> 00:01:39,790
element ends.

22
00:01:40,030 --> 00:01:44,710
So right after dependencies, I will add a new section that is called built.

23
00:01:45,990 --> 00:01:46,530
Like this.

24
00:01:47,040 --> 00:01:51,000
And inside of this build section, I will add plugins section.

25
00:01:53,210 --> 00:01:53,720
Like this.

26
00:01:54,900 --> 00:01:56,910
And inside of plug ins section.

27
00:01:57,210 --> 00:01:58,560
I will add a plug in.

28
00:02:00,150 --> 00:02:05,990
The plugin is called Sure Fire, and you can look for it in the Maven repository as well.

29
00:02:06,000 --> 00:02:11,670
So I will go back to my browser window and I will open me one repository dot com.

30
00:02:12,270 --> 00:02:13,800
Let's go to its home page.

31
00:02:13,800 --> 00:02:21,870
So it's Maven repository dotcom and then using this search bar at the top, I will search for Maven

32
00:02:21,870 --> 00:02:25,380
a sure fire plug in and click on Search Button.

33
00:02:25,860 --> 00:02:28,860
So the very first option at the top is what we need.

34
00:02:29,340 --> 00:02:30,380
Maven Sure.

35
00:02:30,420 --> 00:02:31,290
Fire a plug in.

36
00:02:31,290 --> 00:02:32,520
So I will click on it.

37
00:02:32,880 --> 00:02:38,880
I will select the latest version and from the Maven tab I will copy it.

38
00:02:38,880 --> 00:02:43,130
Not the entire dependency, but its MAVEN coordinates only.

39
00:02:43,530 --> 00:02:45,800
So I'll copy group any artifact.

40
00:02:45,940 --> 00:02:52,800
The end version I will copy and will go back to my homework sample file and paste it here.

41
00:02:53,310 --> 00:02:59,760
Now, because I have made changes to my following simple file, I will need to reload my Maven project

42
00:02:59,940 --> 00:03:04,440
so that anyone can face this dependency and make it available in my project.

43
00:03:04,830 --> 00:03:11,250
To do that, I will click on this button which is in the top right corner, or just like I did in my

44
00:03:11,250 --> 00:03:12,100
previous videos.

45
00:03:12,120 --> 00:03:20,010
And I can do right mouse click on my project or on public sample file and then choose Maven Reload Project.

46
00:03:20,580 --> 00:03:25,890
And now I should be able to execute my unit test using medium and command as well.

47
00:03:26,220 --> 00:03:26,860
Let's try.

48
00:03:26,880 --> 00:03:36,060
I will open terminal window again and in the terminal window I will run maven space package and hit

49
00:03:36,060 --> 00:03:36,510
enter.

50
00:03:39,730 --> 00:03:41,530
Now they built a successful.

51
00:03:41,740 --> 00:03:45,610
And this time I have one unit to execute it.

52
00:03:46,150 --> 00:03:50,230
I can also execute my unit tests by invoking the test phase.

53
00:03:50,650 --> 00:03:56,620
To do that, I will use maven, command maven, space test and hit enter.

54
00:03:58,790 --> 00:04:00,800
And they built a successful again.

55
00:04:01,040 --> 00:04:04,610
They have won a unit test that was successful.

56
00:04:04,610 --> 00:04:05,240
Execute it.

57
00:04:05,600 --> 00:04:05,900
All right.

58
00:04:06,350 --> 00:04:12,890
And just in case you need to build or package your project, but you do not want your new test to be

59
00:04:12,890 --> 00:04:13,430
executed.

60
00:04:13,820 --> 00:04:14,990
You can do it this way.

61
00:04:15,020 --> 00:04:19,810
Maven and then space package dash.

62
00:04:20,000 --> 00:04:23,930
Capital D and then continue without any spaces.

63
00:04:24,770 --> 00:04:26,990
Maven dot test.

64
00:04:27,230 --> 00:04:27,780
That's.

65
00:04:27,840 --> 00:04:29,540
Keep equals.

66
00:04:30,920 --> 00:04:36,380
Through this will package your product, but it will not execute any tests.

67
00:04:36,820 --> 00:04:37,570
Let's try.

68
00:04:38,760 --> 00:04:43,920
Now the building is successful, but there are no tests that were executed.

69
00:04:44,340 --> 00:04:44,860
All right.

70
00:04:44,880 --> 00:04:47,620
So it all works well and we're good to contain.

