1
00:00:00,120 --> 00:00:06,510
In previous lesson, we have introduced a dependency to our create user method and for creating the

2
00:00:06,520 --> 00:00:07,380
method to work.

3
00:00:07,380 --> 00:00:11,400
Now it needs to have a working user response to object.

4
00:00:11,820 --> 00:00:18,480
So in this video we will create user repository and a very simple save method to store users in memory.

5
00:00:18,930 --> 00:00:19,260
All right.

6
00:00:19,260 --> 00:00:23,820
So to do that, I will create a new package, maybe data package.

7
00:00:27,040 --> 00:00:30,370
And then this package concrete a new interface.

8
00:00:31,600 --> 00:00:34,390
I will call this interface user see to.

9
00:00:36,380 --> 00:00:39,230
And from the list of options I will select interface.

10
00:00:40,120 --> 00:00:44,950
Now at this moment, this interface will have only one method and I will call it save.

11
00:00:45,610 --> 00:00:54,100
It will accept user object and will return boolean value to or false but in producer only.

12
00:00:54,700 --> 00:00:55,090
Okay.

13
00:00:55,240 --> 00:01:00,280
So it will accept user object and it will return true if all is good and false.

14
00:01:00,310 --> 00:01:05,540
If user details could not be persisted next to or create a very simple implementation.

15
00:01:05,560 --> 00:01:11,710
And to do that, I will click on the interface name and then the right mouse click and choose show context

16
00:01:11,710 --> 00:01:16,510
actions from the list of options I will select implement interface.

17
00:01:17,660 --> 00:01:24,500
And I will give my interface in the I will call it the users repository simple, which stands for implementation.

18
00:01:24,920 --> 00:01:31,550
And that will put it into the same theater package and we'll click on okay button will make sure that

19
00:01:31,550 --> 00:01:33,860
my method is selected and click okay.

20
00:01:34,400 --> 00:01:34,760
Okay.

21
00:01:34,760 --> 00:01:41,210
So my development environment created for me a new class that implements users repository interface.

22
00:01:41,510 --> 00:01:48,350
And now I need to write some general code to make this save method store user details in memory and

23
00:01:48,350 --> 00:01:51,200
as a temporary storage, I will use hash map.

24
00:01:53,930 --> 00:01:54,530
Like this.

25
00:01:54,540 --> 00:01:55,660
That's impaired mop.

26
00:01:56,960 --> 00:02:01,490
And now I can check your face, as Schwab does have user details.

27
00:02:01,580 --> 00:02:05,270
If it doesn't, then it will put and you use an object there.

28
00:02:05,600 --> 00:02:14,360
To do that, I will use if statement and will check if users contains an object with a key that is equal

29
00:02:14,360 --> 00:02:21,620
to user ID and if it does not contain, I will add exclamation mark at the beginning.

30
00:02:21,620 --> 00:02:26,840
If it does not contain user object then it will add it to my hash map.

31
00:02:27,080 --> 00:02:27,800
Has a key.

32
00:02:27,800 --> 00:02:29,330
I will use user ID.

33
00:02:31,110 --> 00:02:34,320
And as the object it will be the user object.

34
00:02:34,560 --> 00:02:41,580
I have compilation error and this is because my hash map is configured to have stream data type as a

35
00:02:41,580 --> 00:02:46,530
key and stream and the object only to replace stream with user.

36
00:02:47,160 --> 00:02:54,450
And once user details are in the map, I will introduce a new local wearable called return value and

37
00:02:54,450 --> 00:03:00,630
will assign a boolean true to it and will make this method return this return value.

38
00:03:02,620 --> 00:03:03,000
All right.

39
00:03:03,000 --> 00:03:04,980
So let's save changes in this class.

40
00:03:05,460 --> 00:03:06,390
Let's continue.

41
00:03:06,390 --> 00:03:13,890
And in the following lesson, we will inject users repository as a dependency to our user serious class.

