1
00:00:00,180 --> 00:00:06,600
In this lesson we will start testing query methods in our GPA repository and I will start by creating

2
00:00:06,600 --> 00:00:09,000
a new test class in the same package.

3
00:00:09,000 --> 00:00:09,810
I o.

4
00:00:09,960 --> 00:00:11,910
I will create a new class.

5
00:00:13,230 --> 00:00:16,170
And I will call it users repository test.

6
00:00:18,450 --> 00:00:25,200
And because I'm going to test only GPA layer of my application, I will annotate this class with the

7
00:00:25,200 --> 00:00:26,700
GPA test annotation.

8
00:00:28,440 --> 00:00:29,220
Like this.

9
00:00:29,490 --> 00:00:32,369
All right, so now I will create a new test method.

10
00:00:34,240 --> 00:00:36,760
Let's input test annotation.

11
00:00:36,940 --> 00:00:40,800
I'm going to test one of the test methods in my user ship history.

12
00:00:40,810 --> 00:00:47,080
So let's have a look at it and we'll scroll up and I will open up users repository.

13
00:00:47,260 --> 00:00:52,240
So here's my users repository and currently it has a few methods.

14
00:00:52,360 --> 00:01:00,100
Most of these methods this three are query methods, meaning that Sprint framework will derive physical

15
00:01:00,100 --> 00:01:02,380
query from the method name.

16
00:01:02,380 --> 00:01:08,980
So for these methods to be able to communicate with a database, we do not need to write a scale query.

17
00:01:08,980 --> 00:01:16,660
Spring Framework will read the method name and it will derive SQL query from the method name.

18
00:01:16,660 --> 00:01:22,960
If the method name is complex, then it is possible that the method does compile and it does work.

19
00:01:22,960 --> 00:01:28,960
But because it is complex, we made a mistake and when we started using it it does not return expected

20
00:01:28,960 --> 00:01:29,530
result.

21
00:01:29,590 --> 00:01:32,110
So it is good to test a method like this.

22
00:01:32,350 --> 00:01:38,290
Most of my methods here are very simple, but since we're learning, we're going to create a couple

23
00:01:38,290 --> 00:01:39,640
of test methods anyways.

24
00:01:39,640 --> 00:01:48,670
So I will start with testing find by email method and I will go to my test class and we'll continue

25
00:01:48,670 --> 00:01:54,460
with the test method name by including into it the name of my method and the test.

26
00:01:54,970 --> 00:01:59,560
So I'm going to test find by email method for a condition.

27
00:01:59,560 --> 00:02:04,450
When given a correct email address, then it should return user entity.

28
00:02:07,800 --> 00:02:08,910
Something like that.

29
00:02:09,060 --> 00:02:12,480
And that will create a range act and insert sections.

30
00:02:14,650 --> 00:02:14,950
All right.

31
00:02:14,950 --> 00:02:20,440
So in that range section, I'll need to prepare objects that are needed to perform this test method.

32
00:02:20,560 --> 00:02:27,340
And with this test, I'm going to test a repository method that tries to find an existing record in

33
00:02:27,340 --> 00:02:28,090
a database.

34
00:02:28,090 --> 00:02:33,730
So for this method to pass my database table will need to have at least one record.

35
00:02:33,730 --> 00:02:40,090
So in the arranged section, I will prepare a user entity object and that will persist it into a database

36
00:02:40,090 --> 00:02:40,630
table.

37
00:02:54,460 --> 00:02:57,910
Now to persist this entity object into a database table.

38
00:02:57,940 --> 00:03:00,250
I need to use test entity manager.

39
00:03:00,250 --> 00:03:03,010
So let's inject it into our class.

40
00:03:04,680 --> 00:03:11,250
And now I will use this test entity manager to persist user entity into a database.

41
00:03:12,520 --> 00:03:16,060
All right, so this was tor one user into a database table.

42
00:03:16,090 --> 00:03:20,770
Now we can try testing if our query method can find this record.

43
00:03:20,860 --> 00:03:26,080
And to do that, I will need to inject into my test class users repository.

44
00:03:27,980 --> 00:03:33,500
Now I can use this user suppository to invoke my method on the test.

45
00:03:33,500 --> 00:03:38,210
So I will use user suppository and I'm testing find by email.

46
00:03:38,210 --> 00:03:42,770
So I will invoke it and I will need to give it email address as a parameter.

47
00:03:42,770 --> 00:03:50,900
So I will use user get email like this and if all is good, this should return me a stored user record.

48
00:03:52,860 --> 00:03:55,140
I will call it the steroid user.

49
00:03:55,170 --> 00:03:57,510
Let's make it a little bit larger.

50
00:03:57,900 --> 00:04:04,800
So we have invoked our method and the test, and now we can validate if the stored user record that

51
00:04:04,800 --> 00:04:11,340
is returned does contain user details that we expect, and we can do it by checking if it contains correct

52
00:04:11,340 --> 00:04:12,350
email address.

53
00:04:12,360 --> 00:04:16,230
So in that search section I will use assertions.

54
00:04:16,620 --> 00:04:25,560
The assertion that I will use will be assert equals expected value I will take from user object and

55
00:04:25,560 --> 00:04:30,300
the actual value I will take from stored user object like this.

56
00:04:30,300 --> 00:04:32,710
So these two must be equal.

57
00:04:32,730 --> 00:04:34,800
Otherwise test method will fail.

58
00:04:34,800 --> 00:04:39,150
And if it does fail, I will display a little message.

59
00:04:39,150 --> 00:04:44,130
Something like returned email address does not match expected value.

60
00:04:46,850 --> 00:04:47,870
Something like this.

61
00:04:47,900 --> 00:04:48,290
All right.

62
00:04:48,290 --> 00:04:51,680
So now we are ready to run this test method and see if it passes.

63
00:04:51,950 --> 00:04:53,630
I'll click on a run button.

64
00:04:57,780 --> 00:04:58,950
And it passes.

65
00:04:59,070 --> 00:05:04,050
Let's try failing it and see if it works as an expected value.

66
00:05:04,080 --> 00:05:05,790
I will provide something else.

67
00:05:05,790 --> 00:05:09,240
Test at test three dot com, something like this.

68
00:05:09,240 --> 00:05:11,100
And I will run it one more time.

69
00:05:14,510 --> 00:05:16,670
And it fails, which is expected.

70
00:05:16,670 --> 00:05:18,470
So let's make it pass again.

71
00:05:23,150 --> 00:05:24,950
And now it passes.

72
00:05:25,070 --> 00:05:25,430
All right.

73
00:05:25,430 --> 00:05:28,100
So it looks like everything is working well for now.

74
00:05:28,100 --> 00:05:34,460
And you now know how to test a very simple query method that you have added to your repository.

