1
00:00:00,270 --> 00:00:05,910
Now that we have created user service, implementation class and user series interface, we can work

2
00:00:05,910 --> 00:00:09,150
on the Create method in the ACT section.

3
00:00:09,630 --> 00:00:14,400
I will use the object of user service to invoke the creators amended.

4
00:00:15,450 --> 00:00:21,180
My code does not compile, which means that I need to stop writing unit test code and fix this problem

5
00:00:21,180 --> 00:00:21,570
first.

6
00:00:22,020 --> 00:00:28,380
And to fix this problem I will need to create the create user mounted and to do that that will open

7
00:00:28,380 --> 00:00:32,070
user service interface and will define a new method here.

8
00:00:33,520 --> 00:00:38,200
Now that I have updated my interface, I will update its implementation.

9
00:00:38,200 --> 00:00:44,200
I will click on the yellow bulb here or I will do right Maules Creek and choose short context actions

10
00:00:44,530 --> 00:00:48,700
and will choose implement method create user like this.

11
00:00:49,030 --> 00:00:54,760
Now my user series interface implementation is updated with a new method that is called Create User.

12
00:00:55,240 --> 00:01:01,870
Now I will save changes to my user service implementation and will go back to user service test class.

13
00:01:02,200 --> 00:01:06,550
My test method now compiles no error and I can continue.

14
00:01:06,880 --> 00:01:14,230
Now the next part of my test method name says that when user details provided, it should return the

15
00:01:14,230 --> 00:01:15,070
user object.

16
00:01:15,370 --> 00:01:19,600
So I need to provide user details to basically user method.

17
00:01:20,050 --> 00:01:22,300
What are these details that I want to provide?

18
00:01:22,600 --> 00:01:26,590
These are, for example, first name, last name, email and password.

19
00:01:27,010 --> 00:01:30,640
So in the arrange section I will prepare this user details.

20
00:01:31,030 --> 00:01:32,770
I will start with first name.

21
00:01:34,680 --> 00:01:35,520
The last name.

22
00:01:37,890 --> 00:01:38,610
Email.

23
00:01:40,940 --> 00:01:41,930
And password.

24
00:01:44,300 --> 00:01:50,090
And to make sure that there is no typo in the password, I will ask user to repeat their password.

25
00:01:52,730 --> 00:01:57,100
Now I can provide this user details to my CLI to limit.

26
00:02:01,520 --> 00:02:04,430
Mind it now my method does not compile again.

27
00:02:04,430 --> 00:02:09,889
And this means that I need to stop writing unit test code and fix this problem first.

28
00:02:10,250 --> 00:02:15,290
So to do that, that will update to create user method and will make it accept this parameters.

29
00:02:15,830 --> 00:02:19,250
I will go to user service interface and will update it.

30
00:02:20,150 --> 00:02:24,260
First name, last name, email.

31
00:02:25,470 --> 00:02:28,470
Password and repeat password.

32
00:02:29,430 --> 00:02:38,010
Now I will select these parameters and will update the series implementation class aswell by pasting

33
00:02:38,010 --> 00:02:38,520
them here.

34
00:02:38,880 --> 00:02:43,350
All right, so now let's save changes and go back to our user service test class.

35
00:02:43,680 --> 00:02:47,580
My test method compiles and this means that I can continue working on it.

36
00:02:47,940 --> 00:02:53,340
Now, the next part of my test method says that it should return user object.

37
00:02:53,490 --> 00:02:59,040
And this means that when create user method is invoked, it should return user object.

38
00:02:59,430 --> 00:03:07,590
So let's define user object and assign the result of create user method to the user object.

39
00:03:08,040 --> 00:03:12,810
My test method does not compile again because I do not have this user class.

40
00:03:13,080 --> 00:03:17,430
So I need to stop working on test method and create this user clause.

41
00:03:17,850 --> 00:03:25,830
To do that in the main Java folder of my application, I will create a new Java class and I will call

42
00:03:25,830 --> 00:03:26,850
it user.

43
00:03:27,960 --> 00:03:31,740
The glass is created and I will move it to a model package.

44
00:03:32,010 --> 00:03:38,070
To do that, they will select the class will do right most quick, will choose a factor and then move

45
00:03:38,070 --> 00:03:40,740
class to a package that I will call.

46
00:03:40,830 --> 00:03:48,630
Com hubs, developer block e-store and then model and will click on refactor button.

47
00:03:48,930 --> 00:03:50,550
This package does not exist.

48
00:03:50,580 --> 00:03:51,750
Do I want to create it?

49
00:03:51,870 --> 00:03:52,440
Yes.

50
00:03:52,740 --> 00:03:56,400
Destination directory is my source main java folder.

51
00:03:56,670 --> 00:03:57,150
I'll click.

52
00:03:57,300 --> 00:03:57,770
Okay.

53
00:03:58,380 --> 00:04:01,650
And now I have a new package that is called model.

54
00:04:01,920 --> 00:04:04,500
And inside of this package, I have a user class.

55
00:04:05,040 --> 00:04:06,720
All right, so we have all user class.

56
00:04:06,720 --> 00:04:11,100
Let's go back to user service test and import this class.

57
00:04:13,560 --> 00:04:15,720
Now our method does not compile again.

58
00:04:15,720 --> 00:04:22,680
And this is because the create user method that we have defined in user service interface is one.

59
00:04:22,770 --> 00:04:23,690
Let's have a look at it.

60
00:04:23,700 --> 00:04:28,800
I will open user series interface and it says that the user method is one.

61
00:04:28,800 --> 00:04:32,850
So we need to update it and we need to make it return user object.

62
00:04:33,210 --> 00:04:38,160
Let's import user class and now we need to update interface implementation as well.

63
00:04:38,430 --> 00:04:44,970
To do that I will do right mouse click, choose show context functions and then we'll select update

64
00:04:44,970 --> 00:04:48,030
implementation to reflect signature change.

65
00:04:48,420 --> 00:04:50,400
When this annual quick update.

66
00:04:51,700 --> 00:04:57,520
This will update the implementation of create user method inside of user service implementation class.

67
00:04:57,730 --> 00:05:00,440
Here it is, but it does not compile.

68
00:05:00,460 --> 00:05:04,600
We have an error because it does not return a user object.

69
00:05:04,870 --> 00:05:08,020
So let's make it return an empty user object first.

70
00:05:09,770 --> 00:05:13,360
Write it now or use a serious implementation class compact.

71
00:05:13,370 --> 00:05:15,260
I will save changes to this course.

72
00:05:15,830 --> 00:05:23,150
I will go to user service, save changes here and we'll go back to my user service test class and now

73
00:05:23,150 --> 00:05:28,520
my test method also compiles and I have no error in the ACT section.

74
00:05:28,910 --> 00:05:31,160
All right, so we're almost done with our method.

75
00:05:31,430 --> 00:05:38,150
The last section is assert and here we want to make sure that this value user object is not.

76
00:05:38,150 --> 00:05:42,680
Now to do that I will use assert not now assertion.

77
00:05:42,770 --> 00:05:43,880
Let's input it.

78
00:05:44,960 --> 00:05:45,510
From.

79
00:05:45,530 --> 00:05:48,530
Org to uni jupiter api assertions.

80
00:05:49,040 --> 00:05:55,640
The first parameter is our user object and the second parameter is optional error message.

81
00:05:55,880 --> 00:06:02,420
For example, the create user method should not have returned.

82
00:06:02,960 --> 00:06:04,240
No magnet.

83
00:06:04,670 --> 00:06:10,130
Now I will save changes to my use a serious this class and we are ready to run this test method and

84
00:06:10,130 --> 00:06:11,000
see if it works.

85
00:06:11,090 --> 00:06:11,750
Let's try.

86
00:06:17,100 --> 00:06:18,810
And we have a passing union test.

87
00:06:19,140 --> 00:06:19,500
All right.

88
00:06:19,500 --> 00:06:25,110
So now that we have a passing union test, the next step in the test, even development process, is

89
00:06:25,200 --> 00:06:25,980
refactor.

90
00:06:26,340 --> 00:06:28,230
I will minimize my panel here.

91
00:06:28,800 --> 00:06:31,380
And at this moment, I have only one unit test.

92
00:06:31,920 --> 00:06:36,990
It is very simple and I do not see much of code that I want to refactor at this moment.

93
00:06:37,410 --> 00:06:41,520
So I'll simply continue and will implement one more test method.

