1
00:00:00,330 --> 00:00:06,180
In this lesson, we will improve our unit test method and we will make it actually test the integer

2
00:00:06,180 --> 00:00:10,530
division method that we have in our calculator class.

3
00:00:11,100 --> 00:00:17,940
And this one to do that, I will go back to my calculator test and I will delete the fill assertion

4
00:00:18,300 --> 00:00:26,100
and I will first create an instance of calculator class, an instance of class, the method in which

5
00:00:26,130 --> 00:00:26,910
I am testing.

6
00:00:29,810 --> 00:00:34,430
Now I can use this calculator object to call the integer division method.

7
00:00:36,220 --> 00:00:43,510
As dividend, I will use value of four, for example, and as a divisor I will use two.

8
00:00:44,200 --> 00:00:47,020
And this means that four will be divided by two.

9
00:00:47,260 --> 00:00:53,710
And the result of this operation I will assign to a local variable, let's call it a result.

10
00:00:53,710 --> 00:00:57,930
For example, now four divided by two is equal to two.

11
00:00:57,940 --> 00:01:02,710
So I expect the result of this operation to be equal to two.

12
00:01:02,950 --> 00:01:04,690
Let's verify if it's true.

13
00:01:04,989 --> 00:01:12,490
To do it, I can use a special insertion that checks if the two values are equal, for example, assert

14
00:01:12,760 --> 00:01:20,050
equals, and the very first parameter that assert equals assertion accept is the expected value.

15
00:01:20,470 --> 00:01:23,860
So four divided by two should be equal to two.

16
00:01:24,010 --> 00:01:32,500
So the expected result is two, and the next parameter that assert equal assertion accepts is the actual

17
00:01:32,500 --> 00:01:35,740
value that will be returned from the integer division method.

18
00:01:35,980 --> 00:01:41,560
We have assigned this value to a viable result so I can use it.

19
00:01:42,750 --> 00:01:43,320
Like this.

20
00:01:43,950 --> 00:01:51,750
So if the result is not going to be equal to two, this assertion will fail and the unit test will also

21
00:01:51,750 --> 00:01:52,140
fail.

22
00:01:52,320 --> 00:01:58,770
If the two values are both equal to two, then this assertion will get successful and unit test will

23
00:01:58,770 --> 00:01:59,160
pass.

24
00:01:59,490 --> 00:02:00,180
Let's try.

25
00:02:00,450 --> 00:02:02,460
I will run this unit test.

26
00:02:04,880 --> 00:02:08,720
And we have a passing unit test in the test report.

27
00:02:08,990 --> 00:02:15,980
I have a calculator test class with a green checkmark and I have in the gene division test method with

28
00:02:15,980 --> 00:02:17,570
a green checkmark as well.

29
00:02:17,990 --> 00:02:25,220
Now I can try and intentionally break business logic inside of integer division method just to see how

30
00:02:25,220 --> 00:02:25,690
it works.

31
00:02:25,700 --> 00:02:29,840
So instead of division, I will use multiplication, for example.

32
00:02:30,350 --> 00:02:32,330
I will save this business logic.

33
00:02:32,340 --> 00:02:37,430
I will go to my integer division test method and we'll run it one more time.

34
00:02:39,130 --> 00:02:41,260
And we have a failing unit test.

35
00:02:41,650 --> 00:02:46,690
The unit test result is telling as that assertion has failed.

36
00:02:46,720 --> 00:02:52,180
The expected value is two, but the actual value returned is eight.

37
00:02:52,600 --> 00:02:54,010
All right, so let's fix it.

38
00:02:54,340 --> 00:03:02,920
I will go to my integer division method, fix my code, save it and run my unit test one more time.

39
00:03:03,810 --> 00:03:05,640
And we have a passing unit test.

40
00:03:06,030 --> 00:03:07,390
And this is it, actually.

41
00:03:07,500 --> 00:03:10,590
This is how simple it is to write a unit test meant it.

42
00:03:11,100 --> 00:03:17,430
Now the business logic inside of the method that we are testing inside of this integer division method,

43
00:03:17,760 --> 00:03:21,240
it could be very complex, but that does not matter to us.

44
00:03:21,420 --> 00:03:27,180
We should not be afraid of the business logic inside of the method that we are testing seems to be very

45
00:03:27,180 --> 00:03:27,690
complex.

46
00:03:28,110 --> 00:03:31,440
The method under test can have many lines of code.

47
00:03:31,440 --> 00:03:36,300
It can have a very complex business logic containing encryption and decryption algorithms.

48
00:03:36,720 --> 00:03:40,890
But that does not matter much when we are writing a unit test method.

49
00:03:41,190 --> 00:03:47,880
Even though the business logic inside of method under test can be very, very complex, our unit tests

50
00:03:47,880 --> 00:03:48,930
can be very small.

51
00:03:49,230 --> 00:03:55,470
So as a person who writes unit has made it, all you need to do is to verify that for a given input

52
00:03:55,470 --> 00:04:01,110
parameters, the method under test returns expected result and that's it.

53
00:04:01,650 --> 00:04:07,590
You do not really need to understand all the details of that complex business logic you are testing

54
00:04:07,980 --> 00:04:09,720
or be able to write it yourself.

55
00:04:10,050 --> 00:04:15,900
You just need to verify that for a given input parameters, it returns an expected result.

56
00:04:16,290 --> 00:04:22,200
Personally, when I have realized this very important detail, my level of confidence has doubled.

57
00:04:22,350 --> 00:04:29,610
I became very confident that I can write unit tests for any project, and it does not matter much how

58
00:04:29,610 --> 00:04:31,350
complex that business logic is.

59
00:04:31,680 --> 00:04:38,580
And I hope it also gives you some confidence that writing unit tests is not very difficult, but there

60
00:04:38,580 --> 00:04:39,320
is more to learn.

61
00:04:39,330 --> 00:04:42,330
Of course there are other use cases that we need to consider.

62
00:04:42,790 --> 00:04:48,300
You need testing is not difficult, but you do need to learn more about it and there are other details

63
00:04:48,300 --> 00:04:48,750
as well.

64
00:04:49,020 --> 00:04:54,720
So let's continue and let's learn more about TE Unit API and how it works.

