1
00:00:00,270 --> 00:00:03,210
Now that we have created a new Gradle based project.

2
00:00:03,450 --> 00:00:07,170
We can configure it to use the needed unit to find dependencies.

3
00:00:07,650 --> 00:00:14,610
To do that, we will need to open build to create file, which is currently already opened in my development

4
00:00:14,610 --> 00:00:15,120
environment.

5
00:00:15,510 --> 00:00:23,190
And here under the Dependencies section, we have two dependencies already added by default.

6
00:00:23,640 --> 00:00:28,890
Now if you're working with an existing project, then you might not have this dependencies or they might

7
00:00:28,890 --> 00:00:30,210
be of a different version.

8
00:00:30,630 --> 00:00:34,950
So you might want to make sure that these dependencies are key.

9
00:00:34,950 --> 00:00:38,430
You need to find dependencies and maybe empty their version.

10
00:00:38,850 --> 00:00:46,350
So for the test implementation property we need to use, you need five Jupyter API dependency.

11
00:00:46,530 --> 00:00:52,560
And if you have a different dependency here or you need to look up a newer version, then you can do

12
00:00:52,560 --> 00:00:59,970
so by opening a new browser window and go into maven repository dot com.

13
00:01:00,960 --> 00:01:02,800
Using Search bar at the top.

14
00:01:03,010 --> 00:01:04,810
Search for G Unit Jupiter.

15
00:01:08,220 --> 00:01:09,990
And click on the search button.

16
00:01:10,560 --> 00:01:15,030
And here we have a list of who you need to be, the dependencies.

17
00:01:15,390 --> 00:01:23,640
Now, if I go back to my project, the first dependency that I have here is key unit Jupyter API dependency.

18
00:01:23,910 --> 00:01:27,180
It's currently version 5.8.1.

19
00:01:27,180 --> 00:01:34,020
So if I want to obtain this version, I will go here and will look for key unit Jupyter API.

20
00:01:34,350 --> 00:01:39,390
We'll click on it and then we'll click on the new version that I want to use.

21
00:01:39,750 --> 00:01:42,330
For example, 5.8.2.

22
00:01:42,840 --> 00:01:48,330
If I click on it, then here we have a panel with different types.

23
00:01:48,600 --> 00:01:53,910
The first one is Me, Tom, and it has to copy Maven version of this dependency.

24
00:01:54,330 --> 00:02:01,890
The second one is agreed on top, which we can already use, and the third one is agreed assured, which

25
00:02:01,890 --> 00:02:06,810
is the format that is currently being used in our built gradle file.

26
00:02:06,960 --> 00:02:16,050
So I will copy these shorter version of this dependency and I will go back to my project and will replace

27
00:02:16,350 --> 00:02:19,800
an existing one with a new one I have just copied.

28
00:02:20,280 --> 00:02:28,140
And similarly, we can update the version of the other dependency, which is a G unit, Jupiter engine,

29
00:02:28,540 --> 00:02:30,840
because we already have this dependency here.

30
00:02:30,870 --> 00:02:32,820
I can simply update its version.

31
00:02:33,060 --> 00:02:41,760
I will change it from 5.8. 1 to 5 .8.2, and we cannot more dependencies if needed.

32
00:02:42,090 --> 00:02:48,840
For example, let's go back to our even the repository dotcom and search for G unit Jupiter.

33
00:02:49,880 --> 00:02:55,970
If our project needs to support parameterized Gini tests, for example, then we will need to add another

34
00:02:55,970 --> 00:02:58,790
dependency to our project which is called G.

35
00:02:58,790 --> 00:03:00,200
You need to be there params.

36
00:03:00,530 --> 00:03:08,210
So I will click on it and then I will click on the latest version, will select Gradle at the top and

37
00:03:08,210 --> 00:03:12,410
will copy this dependency to my project.

38
00:03:15,090 --> 00:03:15,750
Like this.

39
00:03:16,530 --> 00:03:16,860
All right.

40
00:03:16,860 --> 00:03:22,830
So as you learn more about G-Unit and as you learn more about this than you ever could with other laborers,

41
00:03:23,100 --> 00:03:29,760
you can use this build to gradle file to add the needed dependencies here one by one.

42
00:03:30,060 --> 00:03:36,450
But when it comes to G unit, then instead of fighting these three dependencies separately, you can

43
00:03:36,450 --> 00:03:38,940
also add a single dependency instead.

44
00:03:39,300 --> 00:03:44,550
It is an aggregate dependency and it contains all these three dependencies in one.

45
00:03:44,940 --> 00:03:50,070
So to find them dependency, I will go back to me when they point to dot com.

46
00:03:50,610 --> 00:03:57,510
I will go back a couple of pages in history and the aggregate dependency that I'm looking for is called

47
00:03:57,900 --> 00:04:00,240
G unit Jupiter aggregator.

48
00:04:00,510 --> 00:04:03,540
That is dependency number three in this list.

49
00:04:03,900 --> 00:04:07,950
So I will click on it and then I will copy its latest version.

50
00:04:08,130 --> 00:04:16,079
I will select Greenall short panel and then I will copied this dependency to my project.

51
00:04:16,350 --> 00:04:22,530
And instead of these three, I can add only one aggregator dependency.

52
00:04:23,040 --> 00:04:23,450
All right.

53
00:04:23,460 --> 00:04:31,050
And optionally, to enable the standard out and standard error streams, you can add the following property

54
00:04:31,380 --> 00:04:33,390
to the test section.

55
00:04:33,660 --> 00:04:42,870
So right under the use g unit platform, we can add test, log in and then show standard streams.

56
00:04:43,930 --> 00:04:46,150
And then assign it a boolean value.

57
00:04:46,150 --> 00:04:46,510
True.

58
00:04:46,840 --> 00:04:52,390
Now because we have changed this built gradle file to making this changes, take a think.

59
00:04:52,720 --> 00:04:59,230
I'll click on this button in the top right corner, which will load changes into anthology to make it

60
00:04:59,230 --> 00:05:00,250
work correctly.

61
00:05:00,850 --> 00:05:02,260
All right, so let's continue.

62
00:05:02,260 --> 00:05:07,510
And in the following lesson, we can try running a very simple unit test and see if it works.

