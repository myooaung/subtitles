1
00:00:00,150 --> 00:00:06,090
In this lecture, you will learn about a way or a pattern to structure your code inside of a test method.

2
00:00:06,510 --> 00:00:11,820
And if you follow this pattern consistently, then it will be easier to understand your test methods.

3
00:00:12,300 --> 00:00:12,600
All right.

4
00:00:12,600 --> 00:00:18,220
So this pattern is widely used by many developers, and it is known by two different names.

5
00:00:18,240 --> 00:00:23,280
And one of the names is a I will add it in a common here.

6
00:00:23,310 --> 00:00:26,730
So it's Triple A, which stands for a range.

7
00:00:27,760 --> 00:00:30,340
The first letter A stands for Arrange.

8
00:00:30,700 --> 00:00:33,270
The second letter A stands for ACT.

9
00:00:34,000 --> 00:00:37,030
And the third letter A stands for Assert.

10
00:00:37,540 --> 00:00:45,010
Okay, so now I will delete this triple A and will work with arrange act and assert sections.

11
00:00:45,370 --> 00:00:52,330
So the first section in your test method that is called arrange is where you prepare and initialize

12
00:00:52,360 --> 00:00:58,330
all the needed variables and objects that are needed by your system and their test or by your method

13
00:00:58,330 --> 00:01:01,780
under test to work and return expected result.

14
00:01:01,990 --> 00:01:05,830
For example, in this test method, I'm testing integer division.

15
00:01:06,250 --> 00:01:12,700
So to invoke my method under test, I first need to create an instance of calculator class.

16
00:01:12,970 --> 00:01:16,890
To do that, I can use a range section to prepare this object.

17
00:01:16,930 --> 00:01:24,640
So I will cut it from here and I will paste it under arrange section so I can use a range section to

18
00:01:24,640 --> 00:01:30,730
prepare input parameters that either calculator class or method under test accept.

19
00:01:31,090 --> 00:01:38,320
And in this particular case, the input parameters are just integers and I have passed them to my integer

20
00:01:38,320 --> 00:01:42,520
division method, right the way dividing four and divides the two.

21
00:01:42,820 --> 00:01:49,360
But if input parameters are complex object, then it is better to prepare them in the arrange section.

22
00:01:49,660 --> 00:01:54,940
For example, I could have written this test method this way integer and dividend.

23
00:01:55,960 --> 00:02:02,530
Equals four integer divisor equals two and integer.

24
00:02:02,650 --> 00:02:03,820
Expected result.

25
00:02:04,980 --> 00:02:06,000
Equals two.

26
00:02:06,510 --> 00:02:12,330
And then I will use this parameters to invoke integer division method under test.

27
00:02:14,130 --> 00:02:20,270
Let's rename results to actually result and use it in the absurd equals assertion.

28
00:02:20,790 --> 00:02:23,700
Expected result and actual result.

29
00:02:24,150 --> 00:02:28,080
All right, so the next main section is called ACT.

30
00:02:28,080 --> 00:02:31,830
And in this section you will actually invoke the methods you are testing.

31
00:02:32,130 --> 00:02:35,280
And in this case, it is going to be the integer division method.

32
00:02:35,850 --> 00:02:44,280
So you will use act section to invoke your method under test and receive back an actual result.

33
00:02:45,060 --> 00:02:51,420
And the next section, which is called assert, will be used to validate the return value which you

34
00:02:51,420 --> 00:02:54,210
have received from your method under test.

35
00:02:54,570 --> 00:02:59,940
All right, so in the assert section, you will write Java code that will validate the retained value

36
00:02:59,940 --> 00:03:01,710
from the integer division method.

37
00:03:02,130 --> 00:03:07,740
If the returned value is what is expected and is correct, then test method will pass.

38
00:03:07,890 --> 00:03:12,840
If the returned value is not what it was expected, then test method will fail.

39
00:03:13,350 --> 00:03:20,490
All right, so these are the three main sections of your unit test method, and they're meant to help

40
00:03:20,490 --> 00:03:21,900
us better organize code.

41
00:03:21,900 --> 00:03:23,040
In a test method.

42
00:03:23,610 --> 00:03:28,860
You might also come across this same pattern, but under a different name.

43
00:03:29,280 --> 00:03:33,720
So the arrange section will actually be called given.

44
00:03:34,290 --> 00:03:42,030
The Act section will be called when and the assert section will be called then.

45
00:03:42,540 --> 00:03:44,400
So it reads like this.

46
00:03:44,700 --> 00:03:52,650
Given that we have this information, these are preconditions when we use this information to invoke

47
00:03:52,650 --> 00:03:58,830
our method under test and let it act on it, then the following should be true.

48
00:03:59,090 --> 00:04:06,150
All right, so a very clear and descriptive test method main together with displaying annotation and

49
00:04:06,150 --> 00:04:08,250
arrange act and assert pattern.

50
00:04:08,490 --> 00:04:12,060
Help us easier understand what the test method is trying to test.

