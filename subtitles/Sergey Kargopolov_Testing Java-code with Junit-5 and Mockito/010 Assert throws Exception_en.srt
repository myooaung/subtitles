1
00:00:00,240 --> 00:00:06,689
And this lesson will create a new test method to check if they create user method through correct exception

2
00:00:06,960 --> 00:00:09,480
when one of the required fields is missing.

3
00:00:09,750 --> 00:00:16,550
For example, if a user's first name is missing, then we want our create user method to throw an elegant

4
00:00:16,560 --> 00:00:17,530
argument exception.

5
00:00:17,760 --> 00:00:17,940
Right.

6
00:00:18,330 --> 00:00:19,470
So let's work on it.

7
00:00:20,010 --> 00:00:25,350
In this section I practice test driven development, so I will start writing test code first.

8
00:00:25,350 --> 00:00:29,280
I will scroll down a little bit and here I will add a New Testament.

9
00:00:31,710 --> 00:00:34,170
I'm testing the same create user method.

10
00:00:34,530 --> 00:00:38,310
So the name of my method under test is create user.

11
00:00:38,580 --> 00:00:42,420
Now the use case I want to test is when first name is empty.

12
00:00:42,540 --> 00:00:47,640
So I will include it into the test method name as well when the first name is empty.

13
00:00:49,000 --> 00:00:49,810
Underscore.

14
00:00:49,930 --> 00:00:56,200
And the expected result is that the creators of minted in this case should throw an illegal argument

15
00:00:56,200 --> 00:00:56,740
exception.

16
00:00:56,920 --> 00:01:00,340
So I will continue throws illegal legal argument exemption.

17
00:01:02,520 --> 00:01:03,420
Something like this.

18
00:01:04,260 --> 00:01:06,900
I think I made a typo illegal.

19
00:01:07,260 --> 00:01:07,620
All right.

20
00:01:07,920 --> 00:01:10,290
And I will add this plane name as well.

21
00:01:11,320 --> 00:01:15,340
For example, empty firstname cozies correct exception.

22
00:01:18,440 --> 00:01:22,010
And I will create the arrange act and insert sections.

23
00:01:24,170 --> 00:01:24,470
All right.

24
00:01:24,470 --> 00:01:30,320
So I will need to call decreed using method and provide provided with the same parameters, which means

25
00:01:30,320 --> 00:01:33,590
that the arrange section will be almost the same again.

26
00:01:33,920 --> 00:01:40,040
So I will screw up and I will copy the arrange section from my previous test method.

27
00:01:41,340 --> 00:01:45,300
But the first name should be empty, so I'll make it empty.

28
00:01:45,990 --> 00:01:53,850
And now I can use the instance of user service implementation to invoke the method under test and provide

29
00:01:53,850 --> 00:01:55,080
it with this parameters.

30
00:01:55,170 --> 00:01:58,800
Create user and I will give it they needed parameters.

31
00:01:58,800 --> 00:02:02,640
The first name, last name, email password.

32
00:02:03,360 --> 00:02:04,350
Repeat password.

33
00:02:05,100 --> 00:02:05,400
All right.

34
00:02:05,670 --> 00:02:12,210
So now I need to assert that this call throws an argument exception and we can do it this way.

35
00:02:12,690 --> 00:02:17,670
We will use assertions and then assert throws assertion.

36
00:02:17,940 --> 00:02:21,480
The expected type is a legal argument exception.

37
00:02:23,200 --> 00:02:27,610
And then I need to provide the executable, which is going to be a lander.

38
00:02:28,420 --> 00:02:30,880
And at the end I will provide a message.

39
00:02:31,360 --> 00:02:35,350
For example, empty first name should have caused a legal argument exception.

40
00:02:40,410 --> 00:02:47,580
And I will move the invocation of my method under test inside of this alumni function.

41
00:02:48,030 --> 00:02:55,410
All right, so we have invoked the method under test, and we have an assertion that will validate if

42
00:02:55,410 --> 00:02:58,260
the call to create them entered through.

43
00:02:58,380 --> 00:03:00,000
And then we an argument exception.

44
00:03:00,300 --> 00:03:03,610
I'll change the section handler to act and assert.

45
00:03:03,840 --> 00:03:04,230
Okay.

46
00:03:04,500 --> 00:03:09,600
So at this point we did invoke method under test and we do have one assertion.

47
00:03:09,960 --> 00:03:13,920
So it's a good time to run our test method and see if it passes.

48
00:03:14,310 --> 00:03:14,930
Let's try.

49
00:03:19,240 --> 00:03:20,140
And it fails.

50
00:03:20,170 --> 00:03:22,990
Our assertion fails with a message.

51
00:03:23,260 --> 00:03:25,840
Empty first names should have coast to legal argument.

52
00:03:25,840 --> 00:03:26,380
Exception.

53
00:03:26,860 --> 00:03:30,430
Expect the exception is a legal argument exception.

54
00:03:30,730 --> 00:03:32,260
But nothing was thrown.

55
00:03:32,590 --> 00:03:38,140
And the next step in the testing and development process is to fix this issue and make our test method

56
00:03:38,140 --> 00:03:38,470
pass.

57
00:03:38,770 --> 00:03:45,210
So I will go to each of them and it will open its implementation and I will check.

58
00:03:45,220 --> 00:03:50,440
Why is it that it does not throw exception and it does not throw a legal argument exception because

59
00:03:50,440 --> 00:03:53,620
there is no code for it, so let's implement it.

60
00:03:53,710 --> 00:03:54,730
I will simply check it.

61
00:03:54,730 --> 00:03:56,110
First name is not now.

62
00:03:57,400 --> 00:04:00,040
Or if its lens is nonzero.

63
00:04:02,210 --> 00:04:05,870
And if it is, I will throw an illegal argument exception.

64
00:04:07,220 --> 00:04:10,190
With a message like user first name his empty.

65
00:04:11,830 --> 00:04:12,730
Something like this.

66
00:04:13,120 --> 00:04:15,310
Now our five changes to this class.

67
00:04:15,310 --> 00:04:19,540
And now I will go back to my test method and try running it again.

68
00:04:22,560 --> 00:04:24,630
And this time our test method passes.

69
00:04:24,870 --> 00:04:30,360
And since the test method is passing, the next step in testing in development is to refactor this.

70
00:04:30,360 --> 00:04:30,870
Test it.

71
00:04:31,820 --> 00:04:34,520
So what is it that they can improve in the assessment?

72
00:04:35,030 --> 00:04:40,970
What we can also check here is that the error message that the exception object contains is the one

73
00:04:40,970 --> 00:04:47,060
that we expect in the user service implementation with through a legal argument exception with a specific

74
00:04:47,060 --> 00:04:52,250
message so we can validate if our exception was which contains correct error message.

75
00:04:52,580 --> 00:04:58,130
So let's do that and we'll assign the result of assert throws to a remote.

76
00:05:00,340 --> 00:05:01,360
Something like this.

77
00:05:01,720 --> 00:05:09,280
And now I can use this object to read the exception message and I will do it in the assert section.

78
00:05:09,520 --> 00:05:16,270
I will use assert equals assertion and the first parameter that assert equals accepts is the expected

79
00:05:16,270 --> 00:05:16,690
value.

80
00:05:17,020 --> 00:05:21,280
The expected value I can take from user series implementation.

81
00:05:21,580 --> 00:05:26,320
I will copy it from argument exception and pasted here.

82
00:05:27,330 --> 00:05:31,620
Or I can actually create a new local variable in the arrange section.

83
00:05:32,280 --> 00:05:33,480
For example expected.

84
00:05:33,480 --> 00:05:34,440
Exception message.

85
00:05:37,220 --> 00:05:40,370
My this and now I will use this local variable instead.

86
00:05:41,750 --> 00:05:45,640
And the second parameter is the actual value and the actual value.

87
00:05:45,650 --> 00:05:47,570
I will read from the exception object.

88
00:05:49,680 --> 00:05:53,610
And now I can run my test method one more time and see if it works.

89
00:05:57,970 --> 00:05:58,810
And it passes.

90
00:05:59,140 --> 00:06:03,580
Let's minimize the panel and add an optional error message.

91
00:06:04,120 --> 00:06:06,850
For example, accepting an error message is not correct.

92
00:06:09,680 --> 00:06:11,150
I'll put it on a new line.

93
00:06:13,260 --> 00:06:16,560
And we'll run my test minute one more time to make sure it works.

94
00:06:17,630 --> 00:06:18,050
Okay.

95
00:06:18,050 --> 00:06:19,400
So it is working well.

96
00:06:20,090 --> 00:06:27,800
Now, if I look at this test method and if I look at this test method, then I see that the RNA section

97
00:06:27,800 --> 00:06:29,300
is pretty much the same again.

98
00:06:29,630 --> 00:06:35,540
So I can move some of the duplicate code into a lifecycle method that executes before each test.

99
00:06:36,290 --> 00:06:41,570
So let's create before each method I will use before each annotation.

100
00:06:41,840 --> 00:06:50,300
I will call it in it and I will use it to initialize the variable that my method under test needs.

101
00:06:50,600 --> 00:06:56,240
I will cut everything from here and I will move it here and I will define instance variables above.

102
00:06:59,030 --> 00:06:59,590
Like this.

103
00:07:00,020 --> 00:07:02,180
And now I will delete data types from here.

104
00:07:04,470 --> 00:07:04,780
Okay.

105
00:07:05,130 --> 00:07:08,850
And now I can delete duplicate code from my test methods.

106
00:07:09,240 --> 00:07:16,530
I have removed a range section from my first test method and I will do the same from for the second

107
00:07:16,530 --> 00:07:17,130
test method.

108
00:07:17,460 --> 00:07:24,450
But in this case, I will leave first name and I will leave the expected exception message because these

109
00:07:24,450 --> 00:07:27,990
two local variables are unique to this test method.

110
00:07:28,260 --> 00:07:33,540
All right, so now I can save changes in my test class, and I will run Old Testament ads in this test

111
00:07:33,540 --> 00:07:36,510
class to make sure that all of them still work.

112
00:07:40,830 --> 00:07:48,630
And both of my test methods pass use an object created and empty first name causes correct exception.

113
00:07:48,960 --> 00:07:52,710
All right, so everything is working well, and we're good to continue.

