1
00:00:00,300 --> 00:00:06,060
In this video lesson, we will start working on the test method that will test if the create user API

2
00:00:06,060 --> 00:00:09,270
endpoint works and if we can create a new user.

3
00:00:09,270 --> 00:00:11,640
So I will start creating a new method.

4
00:00:12,150 --> 00:00:18,390
I will also add display name and the display name will be something like user can be created.

5
00:00:19,800 --> 00:00:27,030
So this method will test create user method and this means that I will start my test method name with

6
00:00:27,060 --> 00:00:35,130
void test create user, which is the name of my method on the test when valid user details provided,

7
00:00:35,130 --> 00:00:37,950
then it should return the created user details.

8
00:00:41,930 --> 00:00:49,880
Something like this test create user method when valid user details provided returns created user details

9
00:00:49,970 --> 00:00:53,990
and they will also divide my method structure into arrange, act and assert.

10
00:00:56,890 --> 00:01:01,330
Now let's have a quick look at the create user method in the controller class.

11
00:01:01,480 --> 00:01:02,230
This one.

12
00:01:03,350 --> 00:01:09,500
So to invoke creative as a method, we will need to send a HTTP post request because it is annotated

13
00:01:09,500 --> 00:01:18,440
with post mapping to forward slash users API endpoint and this request will need to contain HTTP body

14
00:01:18,830 --> 00:01:26,360
because this method accepts request body and the content of HTTP request body will be converted into

15
00:01:26,360 --> 00:01:32,690
a Java object of user details, request, model, data type and the user details that we will need to

16
00:01:32,690 --> 00:01:40,040
send in the body of this HTTP post request are first name, last name, email password and repeat password.

17
00:01:40,160 --> 00:01:42,770
So let's prepare this HTTP request.

18
00:01:42,770 --> 00:01:46,940
I'll go back to my test method and we'll work on the request.

19
00:01:46,940 --> 00:01:53,840
Now when testing controller method with mock MVC, we are not going to send an actual relationship request

20
00:01:53,840 --> 00:01:55,070
over the network.

21
00:01:55,100 --> 00:02:01,430
Spring Framework provides us with a clause which we can use to configure a mortgage request and it is

22
00:02:01,430 --> 00:02:03,770
called more MVC Request Builder.

23
00:02:05,130 --> 00:02:13,590
More can we see request builders and then I can invoke a HTTP post with a URI and here I can simply

24
00:02:13,590 --> 00:02:17,520
provide path to a user's API endpoint like this.

25
00:02:17,550 --> 00:02:21,660
Now this is a builder and I can continue building this request.

26
00:02:21,780 --> 00:02:27,870
For example, I can provide content type header, which in this case I want the application JSON.

27
00:02:28,830 --> 00:02:31,470
And I can provide it should be Heather.

28
00:02:31,500 --> 00:02:36,990
That's called accept which I also want to be application Jason.

29
00:02:38,600 --> 00:02:39,110
Okay.

30
00:02:39,290 --> 00:02:45,500
And now I will configure the content of HTTP body, which is going to be the JSON string with the user

31
00:02:45,500 --> 00:02:46,220
details.

32
00:02:46,310 --> 00:02:52,940
Now I can type JSON string manually or I can use user details, request model class to create a Java

33
00:02:52,940 --> 00:02:56,640
object and then convert this Java object into a string.

34
00:02:56,660 --> 00:02:58,380
And this is what I'm going to do.

35
00:02:58,400 --> 00:03:03,740
So maybe above here I will create a new object of user details.

36
00:03:03,740 --> 00:03:04,580
Request model.

37
00:03:04,580 --> 00:03:05,390
Data type.

38
00:03:07,810 --> 00:03:11,800
And we'll use certain methods to populate it with information.

39
00:03:12,700 --> 00:03:14,680
I will set first name.

40
00:03:17,300 --> 00:03:18,260
Last name.

41
00:03:21,520 --> 00:03:22,960
Email and password.

42
00:03:27,030 --> 00:03:33,900
And now I can use object mapper to convert this object into a string and set the string as a content

43
00:03:33,900 --> 00:03:35,460
of http request by.

44
00:03:36,630 --> 00:03:44,130
So I'll go back to my request builder and I will use a content method and now I will use object mapper

45
00:03:44,130 --> 00:03:47,040
to convert Java object into a string.

46
00:03:48,390 --> 00:03:57,270
And the object that I'm going to convert is my user details request model, and this will build as a

47
00:03:57,270 --> 00:03:58,710
request builder object.

48
00:04:00,390 --> 00:04:07,860
Now let's move mouse over, write value as a string and it wants us to add exception to our method signature.

49
00:04:07,860 --> 00:04:09,180
So I'll do it.

50
00:04:09,270 --> 00:04:15,150
And this will add throws adjacent process and exception to my test method signature.

51
00:04:15,480 --> 00:04:17,700
All right, so request builder is ready.

52
00:04:17,700 --> 00:04:22,680
And now in the ACT section, I can perform this request.

53
00:04:22,680 --> 00:04:26,970
And to do that, I will need to use another object that is called Mock MVC.

54
00:04:27,240 --> 00:04:32,250
I will scroll up and I will inject Mock MVC into my test class.

55
00:04:35,290 --> 00:04:41,800
And now I will scroll down and I will use the smoke and visit to execute the request I have prepared.

56
00:04:44,880 --> 00:04:51,630
And in response I want to get a result and the result is returned in a form of more result object.

57
00:04:54,070 --> 00:04:54,550
All right.

58
00:04:54,550 --> 00:05:01,780
So this line will execute the request object that we have prepared and it will return us MVC result

59
00:05:01,780 --> 00:05:08,260
which we can use to read response object from and from this response object we can read content of response

60
00:05:08,260 --> 00:05:08,740
body.

61
00:05:08,740 --> 00:05:10,180
So let's do that.

62
00:05:10,390 --> 00:05:12,760
I will first read the response object.

63
00:05:14,450 --> 00:05:18,010
And now from this response object, I can get the status.

64
00:05:18,020 --> 00:05:20,360
It should be headers and it should be response body.

65
00:05:20,420 --> 00:05:28,220
So to get the content of response body, I will use the get content as string and this will return me

66
00:05:28,220 --> 00:05:30,140
the response body as a string.

67
00:05:33,350 --> 00:05:40,010
Now we have a couple of underlining if I move mouse over the perform method, it wants me to add one

68
00:05:40,010 --> 00:05:42,200
more exception to the method signature.

69
00:05:42,200 --> 00:05:43,250
I will do that.

70
00:05:43,370 --> 00:05:43,850
Okay.

71
00:05:43,850 --> 00:05:46,010
And now no more underlining.

72
00:05:46,160 --> 00:05:53,870
So this response body as string variable, it will contain the details of newly created user.

73
00:05:53,870 --> 00:06:00,020
And I can work now with this string and validate if it contains expected to the details.

74
00:06:00,020 --> 00:06:06,950
So what I can do, I can convert it back into a data type that my controller method returns.

75
00:06:07,040 --> 00:06:10,280
So let's have a look at what our controller method returns.

76
00:06:10,280 --> 00:06:14,510
I'll go back to user controller and here's the method I'm testing.

77
00:06:14,510 --> 00:06:20,030
And this method returns an object of user rest data type.

78
00:06:20,030 --> 00:06:26,870
So when this method returns back, an object of user data type, spring framework will convert this

79
00:06:26,870 --> 00:06:32,330
object back to adjacent string and then return it back in HTTP response body.

80
00:06:32,600 --> 00:06:39,410
And I do have response bodies three now so I can convert it back to an object of user data type.

81
00:06:39,410 --> 00:06:41,570
And to do that I will use object mapper.

82
00:06:41,570 --> 00:06:42,080
I can.

83
00:06:46,410 --> 00:06:52,620
And we'll use method that is called read value and it takes in the string that it needs to parse and

84
00:06:52,620 --> 00:06:56,910
a data type that it needs to convert this string into.

85
00:06:56,940 --> 00:06:59,730
And in my case, it is user arrest.

86
00:07:00,360 --> 00:07:04,260
And as a result, we will get back user rest object.

87
00:07:04,980 --> 00:07:06,960
I will call it created user.

88
00:07:08,540 --> 00:07:09,260
Like this.

89
00:07:09,950 --> 00:07:16,360
So now I can work with this created user object and validate if it contains correct user details.

90
00:07:16,370 --> 00:07:20,600
So in that search section of my test method, I will add a few assertions.

91
00:07:22,290 --> 00:07:27,450
I will first validate users first name and to do that I will use assert equals.

92
00:07:27,780 --> 00:07:35,130
Expected value is inside of user details, request, model, object, and the actual value is inside

93
00:07:35,130 --> 00:07:37,650
of the created user object.

94
00:07:38,940 --> 00:07:43,710
And if these two values are not equal, then I know something went wrong.

95
00:07:47,940 --> 00:07:49,740
I will provide a hint message.

96
00:07:49,770 --> 00:07:54,720
Something like the returned user's first name is most likely incorrect.

97
00:07:55,290 --> 00:08:01,620
And now I will add a few more insertions to the last name email and I will make sure that user ID was

98
00:08:01,620 --> 00:08:04,230
also created and returned back.

99
00:08:14,340 --> 00:08:17,640
And we'll make sure that user ID is not empty.

100
00:08:22,210 --> 00:08:27,730
And if it is empty, I will display a hint message that user ID should not be empty.

101
00:08:29,990 --> 00:08:30,530
Okay.

102
00:08:30,680 --> 00:08:32,150
Something like this.

103
00:08:32,360 --> 00:08:36,380
Now, before I run this test method, there is one more thing I want to do.

104
00:08:36,409 --> 00:08:39,710
Let's go back to a controller class one more time.

105
00:08:40,400 --> 00:08:43,190
This is our create user method that we're testing.

106
00:08:43,190 --> 00:08:51,410
So this creative digital's method has a dependency on users service object because I'm testing integration

107
00:08:51,410 --> 00:08:54,880
of my code with Sprint framework web layer only.

108
00:08:54,890 --> 00:09:02,270
I'm not interested in invoking code in the service layer, and I'm not interested in invoking code in

109
00:09:02,270 --> 00:09:03,350
the data layer.

110
00:09:03,350 --> 00:09:09,380
So instead of using a real implementation of user service object, I will move this object and use a

111
00:09:09,380 --> 00:09:10,610
mock object instead.

112
00:09:11,120 --> 00:09:13,370
So let's work on it in the following lesson.

