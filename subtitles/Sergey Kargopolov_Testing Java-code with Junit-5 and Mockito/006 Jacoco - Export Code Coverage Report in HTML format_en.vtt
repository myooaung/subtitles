WEBVTT
1
00:00:00.500 --> 00:00:06.890
Now that we have configured our MAVEN project to use Jica plugin to export code coverage, let's see

2
00:00:06.890 --> 00:00:07.700
how it works.

3
00:00:08.240 --> 00:00:14.810
To execute the Job Caucus Report goal, I'll need to execute Maven's test phase and it is done with

4
00:00:14.810 --> 00:00:16.250
the following MAVEN command.

5
00:00:16.640 --> 00:00:20.360
I'll bring the internal window and then we'll run maven test.

6
00:00:20.810 --> 00:00:28.940
Or if I need to clean previous build and run queen test, then I will use Maven clean space test and

7
00:00:28.940 --> 00:00:35.150
hit enter maven clean will first remove the target directory with all its previously compiled classes

8
00:00:35.150 --> 00:00:36.260
and generated reports.

9
00:00:36.470 --> 00:00:41.090
And the test option here will tell me when to execute test phase.

10
00:00:41.240 --> 00:00:46.880
And during the test phase who will have our code compiled and our unit tests will be executed.

11
00:00:47.570 --> 00:00:53.330
Now the built in successful, we have no errors and we should have a code coverage report expected as

12
00:00:53.330 --> 00:00:53.630
well.

13
00:00:53.780 --> 00:00:54.920
So let's open it.

14
00:00:55.220 --> 00:01:01.700
To find code coverage support, I will need to go to a finder window, go to my project user service,

15
00:01:01.700 --> 00:01:06.950
go to a target directory, and then I will have folder that is called site.

16
00:01:07.160 --> 00:01:15.710
And inside of the site folder will have a new folder that is called CheckBox and I can click on index.html

17
00:01:15.710 --> 00:01:16.430
to open it.

18
00:01:16.850 --> 00:01:21.530
So let's double click on it and here's our test report with code coverage.

19
00:01:22.650 --> 00:01:28.740
This report starts with a list of packages and for each package we see called coverage information.

20
00:01:28.770 --> 00:01:31.950
The first column here is with missed instructions.

21
00:01:32.190 --> 00:01:39.240
The covered instructions are in green and the instructions that are not covered with unitards are incorrect.

22
00:01:39.660 --> 00:01:43.680
And the little C AP abbreviation stands for coverage.

23
00:01:44.280 --> 00:01:50.190
The next column here displays code coverage information about missed branches.

24
00:01:50.490 --> 00:01:55.470
Missed branches are the if conditions in your code and switch statements, for example.

25
00:01:55.770 --> 00:02:03.360
The next column is called Coverage Information about Psychosomatic Complexity and the psychometric complexities

26
00:02:03.360 --> 00:02:08.009
of software, a metric that is used to indicate the complexity of your code.

27
00:02:08.400 --> 00:02:14.550
If your source code contains no control flow statements, then its psychosomatic complexity will be

28
00:02:14.550 --> 00:02:15.150
just one.

29
00:02:15.450 --> 00:02:21.930
But if your method contains at least one if condition for example, then the psychometric complexity

30
00:02:21.930 --> 00:02:27.390
will already be equal to two, because there are two possible ways the execution can go.

31
00:02:27.690 --> 00:02:34.260
So the more statements or switch statements you have in your code, the higher is the value of, say,

32
00:02:34.260 --> 00:02:35.340
climatic complexity.

33
00:02:35.820 --> 00:02:41.040
Then we have columns that display code coverage, information for all lines of code, and the package

34
00:02:41.430 --> 00:02:45.780
for all methods in the package and all classes in the package.

35
00:02:46.110 --> 00:02:51.750
If I click on the package name, for example, if I click on service package, then I will see code

36
00:02:51.750 --> 00:02:55.410
coverage information for all classes in this connected package.

37
00:02:55.830 --> 00:03:02.640
I can then dive deeper and click on the class me for example, user service implementation and I can

38
00:03:02.640 --> 00:03:06.360
go even deeper and see source code of a class.

39
00:03:07.680 --> 00:03:12.150
Now in the source code of the class, you might see diamonds of different colors.

40
00:03:12.270 --> 00:03:17.970
For example, here I have yellow diamond and I don't have other diamonds, but there are different colors.

41
00:03:18.270 --> 00:03:19.980
You might see a red diamond.

42
00:03:20.130 --> 00:03:23.070
Yellow diamond and green diamond.

43
00:03:23.430 --> 00:03:28.980
The red diamond will indicate that the code in the branch was not covered with a unit test.

44
00:03:29.370 --> 00:03:30.750
I don't have those branches.

45
00:03:31.290 --> 00:03:36.990
The yellow diamond will indicate that the code was only partially covered with unit tests.

46
00:03:37.140 --> 00:03:42.480
For example, some conditions were not tested and the green diamond will indicate that the highlighted

47
00:03:42.480 --> 00:03:46.170
code in the selected branch was executed with a unit test.

48
00:03:46.560 --> 00:03:48.600
All right, so it all worked for us.

49
00:03:48.930 --> 00:03:54.960
And you now know how to generate and how to exploit code coverage reported in your MAVEN based project.

