1
00:00:01,690 --> 00:00:07,960
When we execute test methods in a test class by default for each test method, do you need to create

2
00:00:07,960 --> 00:00:09,700
a new instance of a class?

3
00:00:10,090 --> 00:00:14,350
And the execution order of these methods by default is not obvious.

4
00:00:14,920 --> 00:00:21,430
The best practice in most cases is to think that this meant that a run in a random order now during

5
00:00:21,430 --> 00:00:24,790
the API also provides us with a few lifecycle methods.

6
00:00:25,240 --> 00:00:32,229
These methods help us manage a record within G unit class and execute the record at specific phase in

7
00:00:32,229 --> 00:00:33,280
at least lifecycle.

8
00:00:34,490 --> 00:00:40,460
You have learnt from previous video lessons that a regular test method is annotated with test annotation.

9
00:00:41,000 --> 00:00:46,940
If test class has a method that is not annotated with any annotation, then it is just a regular Java

10
00:00:46,940 --> 00:00:54,320
method and it does not have to do anything with G unit test API, but test methods that invoke method

11
00:00:54,320 --> 00:00:56,570
under test and assert results.

12
00:00:56,900 --> 00:00:59,450
They are annotated with test annotation.

13
00:01:00,200 --> 00:01:06,500
So if we go back to our little diagram, the three methods that we have here are annotated with test

14
00:01:06,500 --> 00:01:11,210
annotation, but lifecycle methods are annotated with different annotations.

15
00:01:11,510 --> 00:01:17,810
And one of the segmentations is, before all, a method that is annotated with before all annotation

16
00:01:18,080 --> 00:01:21,530
will be executed, before all test methods in the class.

17
00:01:21,770 --> 00:01:28,190
And you will use this method as a setup method to prepare and edit resources before any test methods

18
00:01:28,190 --> 00:01:28,970
can execute.

19
00:01:29,300 --> 00:01:35,270
For example, if you're working with a database, then this method can be used to create a database.

20
00:01:35,850 --> 00:01:43,730
Another lifecycle method annotation is called after all, and a method that is annotated with this annotation

21
00:01:44,000 --> 00:01:47,780
will be executed after all test methods at the very end.

22
00:01:48,170 --> 00:01:53,810
So you can use this method for cleanup purposes, for example, to clean up any resources that were

23
00:01:53,810 --> 00:01:55,880
needed for test methods to execute.

24
00:01:56,090 --> 00:02:02,210
For example, you can use this method to develop a database that was created in and setup method in

25
00:02:02,210 --> 00:02:08,509
that the lifecycle plantation is called before each and a method that they did with this annotation

26
00:02:08,780 --> 00:02:14,210
will execute before each unit test meant you will use this method for setup purposes.

27
00:02:14,570 --> 00:02:20,180
For example, if all of your test methods need to create the same object, then you will move this object

28
00:02:20,180 --> 00:02:22,250
creation to a before each meant it.

29
00:02:22,520 --> 00:02:27,470
This way you do not duplicate code in each of your test methods over and over again.

30
00:02:27,980 --> 00:02:34,700
In other lines, that commendation is called after each and a method that is annotated with this annotation

31
00:02:34,700 --> 00:02:37,640
will be executed after each unit test at it.

32
00:02:38,000 --> 00:02:43,970
And you will use this method for cleanup purposes, for example, to close database connection that

33
00:02:43,970 --> 00:02:45,920
was needed for test meant to execute.

34
00:02:46,340 --> 00:02:49,010
All right, so we have four lifecycle methods.

35
00:02:49,340 --> 00:02:55,580
The first one is called before all, and this method will execute before all test methods in a test

36
00:02:55,580 --> 00:02:56,360
lifecycle.

37
00:02:56,810 --> 00:03:02,420
The second lifecycle annotation is called before each and a method that is in the database with before

38
00:03:02,420 --> 00:03:04,550
each intention will be executed.

39
00:03:04,550 --> 00:03:11,450
Before each test meant that in a test class, the third line tachometer notation is called after each,

40
00:03:11,840 --> 00:03:16,790
and a method that is annotated with this annotation will be executed after each.

41
00:03:16,790 --> 00:03:23,930
This method in a test class and the fourth lifecycle method annotation is called after all, and it

42
00:03:23,930 --> 00:03:28,870
will be executed after all test methods in the test class complete at the very end.

43
00:03:29,360 --> 00:03:29,690
All right.

44
00:03:29,690 --> 00:03:30,740
So let's continue.

45
00:03:30,740 --> 00:03:35,900
And in the following lesson, we will see how each of this lifecycle, method and antigen works.

