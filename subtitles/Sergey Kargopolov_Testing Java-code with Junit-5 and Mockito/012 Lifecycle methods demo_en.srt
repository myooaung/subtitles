1
00:00:00,450 --> 00:00:06,390
In this lesson we will try how the life cycle method annotations work and I will start with annotation

2
00:00:06,390 --> 00:00:12,600
that is called Before all I will screw up and at the top of my class will add a new annotation.

3
00:00:13,910 --> 00:00:20,810
Before all and these are Bayesian will make your method execute one time only before old test methods.

4
00:00:21,350 --> 00:00:23,390
So let's at and you it.

5
00:00:24,860 --> 00:00:28,670
I will call this method set up and I will make it print something.

6
00:00:32,119 --> 00:00:34,160
Executing before all method.

7
00:00:34,520 --> 00:00:39,920
Also a method that is an updated with before all annotation will need to be static.

8
00:00:40,990 --> 00:00:43,690
Now note is that this is not a test method.

9
00:00:43,900 --> 00:00:49,540
It is not annotated with test annotation and this method will not be used to test anything.

10
00:00:50,050 --> 00:00:56,170
You will use this method as a setup method, for example, to prepare resources that need to exist before

11
00:00:56,170 --> 00:00:57,850
any test method can execute.

12
00:00:58,240 --> 00:01:03,670
For example, if you're working with a database, then this method can be used to create that database.

13
00:01:04,209 --> 00:01:04,599
All right.

14
00:01:05,019 --> 00:01:09,940
And the next method that I will add will be annotated with, after all, annotation.

15
00:01:13,100 --> 00:01:17,060
I will call this method clean up and I will also make it print something.

16
00:01:19,840 --> 00:01:28,540
So after all annotation we'll make a method execute one time only after all test methods complete so

17
00:01:28,540 --> 00:01:34,840
before all will be executed very first, then all of your test methods will execute and complete.

18
00:01:35,170 --> 00:01:40,390
And at the very end we'll run the method that is annotated with, after all, annotation.

19
00:01:40,660 --> 00:01:46,030
And you will use this method for cleanup purposes, for example, to clean up any resources that were

20
00:01:46,030 --> 00:01:49,270
needed to be created for your test methods to execute.

21
00:01:49,600 --> 00:01:56,860
If you needed a database to be created in setup method, then you can use cleanup method to delete that

22
00:01:56,860 --> 00:01:57,460
database.

23
00:01:57,910 --> 00:02:04,330
And also note, is that a method that is annotated with after all, annotation is also static.

24
00:02:04,540 --> 00:02:09,850
So these are the methods before all and after all they need to be static.

25
00:02:10,180 --> 00:02:14,500
The next method that I will add will be annotated with before each annotation.

26
00:02:15,640 --> 00:02:21,160
And you will use this annotation for a method that you want to run before each test method.

27
00:02:21,430 --> 00:02:23,320
So let's add a very simple method.

28
00:02:25,920 --> 00:02:28,360
I will also make it print out something.

29
00:02:28,380 --> 00:02:35,400
I will copy and paste this line and will replace after all annotation with before each annotation.

30
00:02:36,560 --> 00:02:36,890
All right.

31
00:02:36,890 --> 00:02:45,020
So you can use this method to initialize object or reset data to make sure that each test method works

32
00:02:45,020 --> 00:02:47,930
with objects that have a new and clean state.

33
00:02:48,500 --> 00:02:54,050
If you have code that needs to be executed before each test method, you can put this code here.

34
00:02:54,770 --> 00:03:00,620
Now, our test classes are very simple and they do not have much code, but we do have something to

35
00:03:00,620 --> 00:03:01,190
put here.

36
00:03:01,490 --> 00:03:08,750
For example, each of our test methods, the test integer division method and the integer subtraction

37
00:03:08,750 --> 00:03:12,710
method, both of this method create a new object of calculator class.

38
00:03:13,190 --> 00:03:20,690
We create calculator class object here and we create a calculator class object here so we can use this

39
00:03:20,690 --> 00:03:24,530
before each method to create a new instance of calculator class.

40
00:03:25,070 --> 00:03:26,090
So let's do it.

41
00:03:26,150 --> 00:03:31,070
I will first define a new property which is going to be a calculator.

42
00:03:33,030 --> 00:03:37,440
And I will initialize it inside of before each test method.

43
00:03:39,350 --> 00:03:45,380
And since there are calculated classes now created here instead of before each test method, we can

44
00:03:45,380 --> 00:03:48,290
delete it from either test methods.

45
00:03:52,230 --> 00:03:52,560
All right.

46
00:03:53,190 --> 00:04:00,840
So before this test method executes, before each will be executed, and they will create a new calculator

47
00:04:00,840 --> 00:04:03,990
object that will be used in a test mounted.

48
00:04:04,500 --> 00:04:07,350
The same is true for this test method.

49
00:04:07,440 --> 00:04:14,700
Before this test method executes, before each test method will run, calculator object will be created,

50
00:04:15,030 --> 00:04:19,620
and my test method will work with a newly created calculator object.

51
00:04:20,399 --> 00:04:20,730
All right.

52
00:04:21,149 --> 00:04:26,460
And there is one more annotation that will make a method execute after each test method.

53
00:04:26,760 --> 00:04:28,740
So let's add it as well.

54
00:04:30,220 --> 00:04:32,260
And then we'll create a method for it.

55
00:04:34,960 --> 00:04:37,360
I will also make it print out something.

56
00:04:43,110 --> 00:04:47,130
And you will use this method if you need to run business logic, right?

57
00:04:47,190 --> 00:04:53,520
After each this method completes like for example, closed database connection or clean up resources.

58
00:04:53,850 --> 00:04:59,430
If you are running integration test for example, and your test method made some changes in the database

59
00:04:59,430 --> 00:05:02,820
table, then you can use this method to delete those records.

60
00:05:03,450 --> 00:05:03,750
All right.

61
00:05:03,750 --> 00:05:07,740
So now we are ready to execute this test minutes and see how they work.

62
00:05:08,010 --> 00:05:13,650
But before I do, I will add a little print statement to each of my test methods as well.

63
00:05:16,850 --> 00:05:19,340
This one is for test integer division.

64
00:05:19,620 --> 00:05:22,520
The next one is for division by zero.

65
00:05:25,180 --> 00:05:26,320
And finally.

66
00:05:27,400 --> 00:05:28,810
Integer subtraction.

67
00:05:30,720 --> 00:05:36,840
And now I will save changes, crawl up and run old test methods in this class.

68
00:05:39,140 --> 00:05:40,670
And here's my concern.

69
00:05:41,150 --> 00:05:46,670
And if you trace the order in which these lines are printed, it should be according to the lifecycle

70
00:05:46,670 --> 00:05:54,470
method used in this test class before all method was executed, then before each method was executed,

71
00:05:54,800 --> 00:05:56,750
then we have a unit test.

72
00:05:57,140 --> 00:06:02,720
Then we have after each and again a new cycle started before each.

73
00:06:03,200 --> 00:06:05,210
Then we have g unit test executed.

74
00:06:05,540 --> 00:06:07,520
And then we have after each.

75
00:06:07,880 --> 00:06:09,890
And it looks like it is working very well.

76
00:06:10,280 --> 00:06:10,580
All right.

77
00:06:10,580 --> 00:06:16,100
So now that you're familiar with G unit lifecycle annotations, let's continue to the next lecture.

