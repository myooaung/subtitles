WEBVTT
1
00:00:00.470 --> 00:00:05.330
In the following lesson, you will learn how to test the data layer of your springboard application,

2
00:00:05.330 --> 00:00:08.090
and we will start with gpe entities.

3
00:00:09.760 --> 00:00:15.430
Sprint framework allows us to test each layer of spring boot application separately if needed.

4
00:00:15.430 --> 00:00:22.090
We can test the player of our application separately from surface layer and separately from data layer.

5
00:00:22.240 --> 00:00:29.530
We can test surface layer in isolation from data layer and we can test data layer of our application

6
00:00:29.530 --> 00:00:34.180
separately from web layer and separately from service layer.

7
00:00:34.660 --> 00:00:39.820
In the following lectures, you will learn how to write integration tests to test data layer of your

8
00:00:39.820 --> 00:00:43.120
springboard application separately from other layers.

9
00:00:43.420 --> 00:00:47.440
When it comes to data layer, there are two components that we are going to test.

10
00:00:47.440 --> 00:00:51.760
These are HP entity and GPA repository.

11
00:00:52.330 --> 00:00:57.700
Deep Entity Object will describe information that we need to store in our database.

12
00:00:57.790 --> 00:01:04.239
For example, if we need to store user details, then we will create a new user entity object and this

13
00:01:04.239 --> 00:01:09.610
object will contain user details like user's first name, last name, email and password.

14
00:01:09.670 --> 00:01:16.200
And you can think of this object as a regular Java object with member variables and gather and set our

15
00:01:16.210 --> 00:01:16.900
methods.

16
00:01:16.900 --> 00:01:19.930
But additionally to contain user details.

17
00:01:19.930 --> 00:01:24.790
This object will also contain information about database table schema.

18
00:01:25.750 --> 00:01:28.870
So what is it that we're going to test MGP entity?

19
00:01:29.260 --> 00:01:31.720
Here's an example of GPA entity class.

20
00:01:31.720 --> 00:01:37.570
And to make this class fit into the presentation slide, I have cut some of the details from it.

21
00:01:37.570 --> 00:01:43.180
So don't be confused if you do not see something that you expect GPA entity to have.

22
00:01:43.300 --> 00:01:51.250
But the truth is that it is not often that you will see developers write integration tests for GPA entities.

23
00:01:51.580 --> 00:01:58.780
Many developers feel that test in GPA repositories is sufficient enough because if GPA entity has issues,

24
00:01:58.780 --> 00:02:03.910
then most likely these issues will be caught during the GPA repository test.

25
00:02:03.910 --> 00:02:07.990
But if needed, you can still SGP entity as well.

26
00:02:08.169 --> 00:02:16.030
Now notice that this GPA entity class has a number variables annotated with some specific annotations.

27
00:02:16.030 --> 00:02:23.710
For example, the ID field is annotated with ID annotation and generated value annotation and other

28
00:02:23.710 --> 00:02:26.560
fields are annotated with column annotation.

29
00:02:26.650 --> 00:02:31.930
And additionally to this column annotation, it has properties specified.

30
00:02:32.050 --> 00:02:39.400
For example, user ID value cannot be null and must be unique and maximum lengths of the value that

31
00:02:39.400 --> 00:02:46.390
the first name column can have is 50 characters, and the value of email address that each user record

32
00:02:46.390 --> 00:02:50.110
can have in the database table must also be unique.

33
00:02:50.200 --> 00:02:56.470
So let's assume that we have this user entity class at the time when our Springwood application starts

34
00:02:56.470 --> 00:03:03.460
up, spring framework will scan packages of our application looking for classes with this kind of special

35
00:03:03.460 --> 00:03:10.240
annotations and depending on what annotations are used in the class, spring framework will process

36
00:03:10.240 --> 00:03:11.500
this class accordingly.

37
00:03:11.830 --> 00:03:17.950
For example, for this user entity class spring framework will check if there is a database table with

38
00:03:17.950 --> 00:03:25.060
the name users exist and this is because the class is annotated with table annotation and its name is

39
00:03:25.060 --> 00:03:25.900
users.

40
00:03:25.930 --> 00:03:31.960
If our database does not have a table called users, then Spring Framework will attempt to create this

41
00:03:31.960 --> 00:03:36.280
table using the information specified in the column annotations.

42
00:03:36.430 --> 00:03:42.580
So for this entity, class spring framework will create a new database table that is called users,

43
00:03:42.580 --> 00:03:51.340
and this database table will have columns called ID, user ID, first name, last name, email and encrypted

44
00:03:51.340 --> 00:03:51.940
password.

45
00:03:52.150 --> 00:03:59.560
Each database table column will be created accordingly to information specified in the column annotation.

46
00:03:59.680 --> 00:04:06.850
So as a developer, Hope works on a data layer in isolation from controllers or service classes.

47
00:04:07.090 --> 00:04:12.550
You need to make sure that the data layer is created according to business requirements.

48
00:04:12.940 --> 00:04:19.000
So what we can do is we can write test methods that validate these business requirements.

49
00:04:19.329 --> 00:04:25.000
For example, one of the test methods that we can write for this GPA entity is to validate that our

50
00:04:25.000 --> 00:04:29.650
database table does not allow duplicate values for user ID.

51
00:04:29.890 --> 00:04:36.880
And if we try to persist user object with already existing user ID, then we should get back an exception

52
00:04:36.880 --> 00:04:38.350
and another test method.

53
00:04:38.350 --> 00:04:41.860
We can write this to validate that we cannot persist.

54
00:04:41.860 --> 00:04:44.530
User object with duplicate email address.

55
00:04:44.530 --> 00:04:52.420
So there are things that we can test in GP entity before we start working on a repository and in the

56
00:04:52.420 --> 00:04:55.870
following lessons you will learn how to write this test methods.

57
00:04:57.620 --> 00:05:00.890
To SDP entity objects or GP repositories.

58
00:05:00.890 --> 00:05:05.300
We will need to annotate our class with data GPA test annotation.

59
00:05:05.480 --> 00:05:08.390
Now there are a few important details about this annotation.

60
00:05:08.390 --> 00:05:14.840
Like for example, this annotation will disable all the configuration and it will make Sprint framework

61
00:05:14.840 --> 00:05:21.930
create application context only for GPA related components because we're testing only data layer.

62
00:05:21.950 --> 00:05:27.140
Sprint framework will create application context with only GPA related bins.

63
00:05:27.350 --> 00:05:34.700
Also, this annotation will make our test methods transactional, and once our test method completes,

64
00:05:34.730 --> 00:05:40.670
all changes that were made to our database table will roll back and will be undone.

65
00:05:40.700 --> 00:05:46.730
And another important detail is that we do not need to have database server running and configure database

66
00:05:46.730 --> 00:05:50.100
connection to make our test method work by default.

67
00:05:50.120 --> 00:05:55.170
Our test methods will work with embedded in memory database if needed.

68
00:05:55.190 --> 00:06:01.610
We can of course use separate database server, but by default our test methods will use embedded in-memory

69
00:06:01.610 --> 00:06:06.470
database and we do not need to make any additional configuration for it to work.

70
00:06:06.950 --> 00:06:07.280
All right.

71
00:06:07.280 --> 00:06:10.040
So let's continue and let's see how it works.

