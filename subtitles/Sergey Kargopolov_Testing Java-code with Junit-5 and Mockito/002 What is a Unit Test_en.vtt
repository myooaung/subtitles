WEBVTT
1
00:00:02.520 --> 00:00:04.200
So what is a unit test?

2
00:00:04.800 --> 00:00:10.740
You need test is a very small, self-contained method that you write to test some part of your code.

3
00:00:11.310 --> 00:00:16.440
Let's say you have a method in your Java class that needs to be tested to make sure that this method

4
00:00:16.440 --> 00:00:17.670
works as expected.

5
00:00:17.940 --> 00:00:20.790
You will need to write one or more unit tests.

6
00:00:21.450 --> 00:00:25.200
Each unit test is a very small Java method that you create.

7
00:00:25.770 --> 00:00:32.250
It is a small piece of code that you write to invoke the method that you are testing in this particular

8
00:00:32.250 --> 00:00:35.760
example and test any method that is called is email wallet.

9
00:00:36.120 --> 00:00:42.810
So the unit method that they will create will invoke the is email valid method and it will validate

10
00:00:42.990 --> 00:00:45.420
that it has produced an expected result.

11
00:00:45.960 --> 00:00:49.530
To test application code, we usually write more than one unit test.

12
00:00:50.070 --> 00:00:56.370
One unit test will test your method with valid parameters, while another unit test will intentionally

13
00:00:56.370 --> 00:00:58.920
provide a method with invalid parameter values.

14
00:00:59.430 --> 00:01:05.489
And in both scenarios, your unit test methods will only date if the method you are testing produces

15
00:01:05.489 --> 00:01:06.450
expected result.

16
00:01:06.840 --> 00:01:10.890
Now the code and unit test the is very simple and is usually very short.

17
00:01:11.250 --> 00:01:18.210
And this is why on my slide on the right side I have illustrated each unit test has a much smaller element,

18
00:01:18.540 --> 00:01:21.390
then a method it is testing on the left side.

19
00:01:21.900 --> 00:01:25.980
The method on the left side may contain a very complex business logic.

20
00:01:26.280 --> 00:01:31.170
And this is why on my screen this element is represented as a very large element.

21
00:01:31.680 --> 00:01:37.410
So a unique test is also a code that you write, but it is very small and is very simple.

22
00:01:37.410 --> 00:01:44.400
Code that does not contain much of a business logic is very simple code because all it does is it calls

23
00:01:44.400 --> 00:01:49.980
your method and the test with specific input parameters and validates the returns result.

24
00:01:50.370 --> 00:01:56.220
And it is very important to keep in mind that unit test should be testing one particular functionality

25
00:01:56.220 --> 00:01:56.640
only.

26
00:01:56.880 --> 00:02:02.790
We should not try to make one single unit test method that tests multiple methods of your class at the

27
00:02:02.790 --> 00:02:03.360
same time.

28
00:02:03.780 --> 00:02:07.230
So to write unit tests we will use G unit.

29
00:02:07.710 --> 00:02:13.590
G unit provides us with an API to write small code snippets to test our Java methods.

30
00:02:14.930 --> 00:02:22.190
Now your job application will contain many classes, and each class may contain several methods to ensure

31
00:02:22.190 --> 00:02:24.020
that your application is well tested.

32
00:02:24.170 --> 00:02:28.520
You will want to write more than one unique test for most of the methods in your class.

33
00:02:28.970 --> 00:02:33.800
When you are on unit test and it successfully passes, it will be marked with green color.

34
00:02:34.070 --> 00:02:40.910
But if unit does not receive an expected result and it fails, then it will be marked with a red color.

35
00:02:41.240 --> 00:02:47.720
This is why on my slide I have some unique tests color in green color and some unique tests that have

36
00:02:47.720 --> 00:02:49.910
failed color with the red color.

37
00:02:50.300 --> 00:02:54.140
Now let's zoom in and have a look at an example of one single unit test.

38
00:02:56.230 --> 00:03:01.810
Now let's start with a very simple code example first, and then as we become more comfortable with

39
00:03:01.810 --> 00:03:05.230
unit testing, we will look at more complex code examples.

40
00:03:05.680 --> 00:03:10.750
Let's assume that we have a German class that is called calculator, and it has a very simple method

41
00:03:11.050 --> 00:03:12.640
that is called integer division.

42
00:03:13.120 --> 00:03:19.500
It has a very simple business logic, and all we do here is we perform math division and we do white

43
00:03:19.510 --> 00:03:20.920
one number but another.

44
00:03:21.310 --> 00:03:26.110
But even though it is a very simple code example, this method can still be tested.

45
00:03:26.440 --> 00:03:34.120
For example, what if a developer made a typo and instead of division performed multiplication or addition?

46
00:03:34.360 --> 00:03:38.590
So we can write the unit test to make sure that this code works correctly.

47
00:03:38.980 --> 00:03:43.390
And to test this method we can write unit test that will look something like this.

48
00:03:44.020 --> 00:03:49.240
Now we will talk about test methods, structure, and all those details in full in video lessons.

49
00:03:49.360 --> 00:03:53.410
So please do not worry if it looks a little bit strange or confusing to you.

50
00:03:53.740 --> 00:03:58.390
For example, you might have noticed that the method name looks very unusual.

51
00:03:58.690 --> 00:04:01.510
It is very long and it has test notation.

52
00:04:01.990 --> 00:04:05.530
But don't worry, we will talk about it in the following video lessons.

53
00:04:05.860 --> 00:04:09.430
Now, this method is also divided into three main sections.

54
00:04:09.670 --> 00:04:11.590
The first one is called Arrange.

55
00:04:11.950 --> 00:04:15.010
In this section, I create a new instance of calculator class.

56
00:04:15.400 --> 00:04:21.880
The second section is called Act and in this section I actually invoke the integer division method and

57
00:04:21.880 --> 00:04:24.100
provided with two valid parameters.

58
00:04:24.520 --> 00:04:28.180
Now the image of division method is the method that I'm testing.

59
00:04:28.190 --> 00:04:29.890
It is called method and the test.

60
00:04:30.100 --> 00:04:35.650
And I want to make sure that this method works as expected and it performs integer division correctly.

61
00:04:36.070 --> 00:04:42.130
So I give it to parameters and I copied the return value into a new variable that is called result.

62
00:04:42.520 --> 00:04:49.570
The third section is called Assert and this is a section where I use special duty methods to verify

63
00:04:49.570 --> 00:04:51.010
that the result is correct.

64
00:04:51.400 --> 00:04:54.070
Four divided by two should produce two.

65
00:04:54.250 --> 00:05:00.370
So I use a special g unit method that is called assert equals to verify that this result is correct.

66
00:05:00.700 --> 00:05:03.970
The first parameter that it accepts is an expected value.

67
00:05:04.270 --> 00:05:06.310
I'm expecting the result to be equal to two.

68
00:05:06.610 --> 00:05:11.260
The second parameter is an actual value that was returned from integer division method.

69
00:05:11.350 --> 00:05:17.420
And the third parameter is an optional hint error message that will be printed in the console.

70
00:05:17.440 --> 00:05:19.000
If this test method fails.

71
00:05:19.300 --> 00:05:19.630
All right.

72
00:05:19.630 --> 00:05:23.110
So if four divided by two does not produce two.

73
00:05:23.440 --> 00:05:25.150
Then this unit test will fail.

74
00:05:25.270 --> 00:05:28.150
And the message four divided by two should have returned.

75
00:05:28.150 --> 00:05:30.040
Two will be printed in the console.

76
00:05:30.340 --> 00:05:33.790
Now, don't worry if it is still a little bit confusing at this moment.

77
00:05:34.090 --> 00:05:39.130
In the following lecture, school actually write this unit test in our development environment and we

78
00:05:39.130 --> 00:05:42.220
will run it and we'll actually see how it all works.

79
00:05:44.090 --> 00:05:47.700
If I run unit test in my Java development environment, for example.

80
00:05:48.050 --> 00:05:52.910
A And if this unit test passes, then I will see a green mark on its left side.

81
00:05:53.210 --> 00:06:00.200
But if my integer division meant it did not return expected result and my unit test fails, then I will

82
00:06:00.200 --> 00:06:06.050
see a red mark on its left side and there will be also more information printed in the console and also

83
00:06:06.050 --> 00:06:07.490
in the test result panel.

84
00:06:07.910 --> 00:06:13.580
Now different development environments will have different user interface for this report, but the

85
00:06:13.580 --> 00:06:18.800
successful unit test will always be green and the failed unit test will always be a red.

86
00:06:20.250 --> 00:06:27.390
So unit testing is a process where developers write and then a run very simple test methods that test

87
00:06:27.390 --> 00:06:29.640
individual parts of our application.

88
00:06:31.050 --> 00:06:31.440
You need.

89
00:06:31.440 --> 00:06:33.900
Tests are very small and they run very fast.

90
00:06:34.050 --> 00:06:39.780
They run very fast because when testing them entered, any dependencies that this method might have

91
00:06:39.930 --> 00:06:41.460
are replaced with more.

92
00:06:42.420 --> 00:06:48.900
For example, if the method I'm testing sends a ship request and depends on a ship client object, a

93
00:06:48.900 --> 00:06:55.320
real client object will need to be replaced with a thik or mock version of it, and there can be different

94
00:06:55.320 --> 00:07:00.780
kinds of these fake objects that can be a fake object, that can be mock object, or they can be a spy

95
00:07:00.780 --> 00:07:01.290
object.

96
00:07:01.380 --> 00:07:05.730
And we will talk more about these different kinds of fake objects later in this video course.

97
00:07:06.120 --> 00:07:12.300
So really, your client object will be replaced with a mock version of it and no relationship request

98
00:07:12.300 --> 00:07:12.960
will be sent.

99
00:07:13.380 --> 00:07:17.070
And this will make our unique test method run much faster.

100
00:07:17.340 --> 00:07:18.990
And we do it because you need test.

101
00:07:18.990 --> 00:07:22.320
Method is not actually testing how it should be cleaned works.

102
00:07:22.590 --> 00:07:28.470
You need test is focused only on tests in java code inside of the method that you are testing.

103
00:07:28.650 --> 00:07:34.620
If the method you are testing depends on another object, then dependency will need to be placed with

104
00:07:34.800 --> 00:07:35.520
more compute.

105
00:07:35.670 --> 00:07:41.700
And when all external dependencies are replaced with mock object, with predefined behavior or with

106
00:07:41.700 --> 00:07:48.270
hardcoded values, then the method we are testing will work very fast and our unit test will also work

107
00:07:48.270 --> 00:07:48.870
very fast.

108
00:07:49.050 --> 00:07:54.060
And this is why, if needed, I can write more than one unit test to test a single method.

109
00:07:54.330 --> 00:07:59.010
For example, one unit test will be to test method with valid input parameter values.

110
00:07:59.280 --> 00:08:03.450
Another unit test will be to test method with invalid input parameter values.

111
00:08:03.660 --> 00:08:09.030
And another unit test can be to test methods with invalid response from a Should you be clean?

112
00:08:09.390 --> 00:08:15.180
You can write different unit tests to make sure that the method you are testing works well and reliable

113
00:08:15.390 --> 00:08:19.440
under different conditions and always produces expected result.

