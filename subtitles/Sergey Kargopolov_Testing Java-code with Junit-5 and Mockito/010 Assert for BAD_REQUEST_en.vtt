WEBVTT
1
00:00:00.180 --> 00:00:05.670
In this lesson, we're going to continue testing or create user method, and we will create a new test

2
00:00:05.670 --> 00:00:13.260
method to check if the slash user API endpoint responds back with a HTTP status called 400 if we do

3
00:00:13.260 --> 00:00:15.330
not provide one of the required fields.

4
00:00:15.330 --> 00:00:23.130
And this will also confirm if being validations working properly for our forward slash users API endpoint.

5
00:00:23.340 --> 00:00:29.550
Now we have seen validation working in previous lesson, but we still need to create a separate test

6
00:00:29.550 --> 00:00:30.390
method for it.

7
00:00:30.390 --> 00:00:36.240
And this is because there is a chance that validation annotation can be accidentally deleted.

8
00:00:36.240 --> 00:00:42.450
And if we do not have a test method that validates this, then we will introduce a bug in our code that

9
00:00:42.450 --> 00:00:44.160
will remain unnoticed.

10
00:00:44.160 --> 00:00:51.360
So in this lesson we will write a test method that will validate that if users first name is not provided

11
00:00:51.360 --> 00:00:56.880
in the request, then our API endpoint returns HTTP status code 400.

12
00:00:57.030 --> 00:00:57.390
Right.

13
00:00:57.390 --> 00:01:00.960
So I will scroll down and I will create a new test method.

14
00:01:02.830 --> 00:01:04.599
I will also add this plane name.

15
00:01:06.630 --> 00:01:10.770
And this test method will be to check if the first name is not empty.

16
00:01:11.250 --> 00:01:16.890
So the test method name that I will come up with will start with test create user.

17
00:01:16.920 --> 00:01:22.680
This is my method under test and the condition will be when first name is not provided.

18
00:01:24.250 --> 00:01:26.660
Then it should return to the status quo.

19
00:01:26.680 --> 00:01:27.520
400.

20
00:01:29.670 --> 00:01:30.840
Something like this.

21
00:01:30.870 --> 00:01:34.800
Now I will also create a range act and insert sections.

22
00:01:37.500 --> 00:01:44.130
And the arrange section I can actually copy from previous test method because it is going to be very

23
00:01:44.130 --> 00:01:45.330
much similar.

24
00:01:45.330 --> 00:01:47.490
So I will need user details.

25
00:01:47.490 --> 00:01:48.600
Request model.

26
00:01:49.540 --> 00:01:57.220
I will copy it and paste it into my arrange section and I will intentionally set user's first name to

27
00:01:57.220 --> 00:01:58.360
an empty screen.

28
00:01:59.430 --> 00:02:00.220
Like this.

29
00:02:00.240 --> 00:02:05.400
Now in the ACT section, I will need to prepare each request, but I don't have it yet.

30
00:02:05.400 --> 00:02:11.550
So I will scroll up and I will copy request builder from a previous test method.

31
00:02:12.120 --> 00:02:15.510
Request builder will also go to arrange section.

32
00:02:15.510 --> 00:02:17.250
I have an underlining.

33
00:02:17.250 --> 00:02:22.140
Let's move mouse over and add and handle the exception to a method signature.

34
00:02:22.410 --> 00:02:27.870
Now we have this method declaring that it can throw cheese and process in exception.

35
00:02:28.200 --> 00:02:30.630
Let's make our screen a little bit wider.

36
00:02:30.630 --> 00:02:36.750
And now that I have Request Builder, I can perform this request in ACT section.

37
00:02:37.350 --> 00:02:44.100
To do that I will use mock MVC, will call perform method and will provide request builder.

38
00:02:44.670 --> 00:02:48.030
At the end I will add and return.

39
00:02:48.150 --> 00:02:50.880
This will return me MVC result.

40
00:02:52.440 --> 00:02:55.410
And I have a red underlining again.

41
00:02:55.410 --> 00:02:59.660
I will move mouse over and change a metal signature one more time.

42
00:02:59.670 --> 00:03:03.750
This time it will change it to throw a general exception.

43
00:03:04.440 --> 00:03:11.310
Now that I have MVC result, I can work with it to validate if it contains correct HTTP status code.

44
00:03:11.520 --> 00:03:18.690
So in the third section I will assert that it should be status code is 400, which stands for bad request.

45
00:03:18.930 --> 00:03:28.010
I will use assertions assert equals expected value is 400, but the actual value of which should be

46
00:03:28.020 --> 00:03:28.620
status code.

47
00:03:28.620 --> 00:03:30.960
I will read from MVC result.

48
00:03:32.010 --> 00:03:34.440
I will get response object.

49
00:03:34.440 --> 00:03:40.020
And from the response object I can get status like this.

50
00:03:40.020 --> 00:03:45.030
And if these two values are not equal, then I will print a hint message.

51
00:03:45.030 --> 00:03:48.180
Something like incorrect should be status code returned.

52
00:03:50.790 --> 00:03:57.840
Or instead of hard coding HTTP status code 400 here, I can use HTTP status now.

53
00:03:58.020 --> 00:04:01.950
So instead of 400, I will use HTTP status.

54
00:04:02.340 --> 00:04:10.500
This is enum and here I can look for badge request and I can get integer value from it.

55
00:04:10.890 --> 00:04:15.720
Let's put this on a new line and remove this extra pair of double quotes.

56
00:04:15.900 --> 00:04:21.360
All right, so now I can run this this method and see if my create user method is properly configured

57
00:04:21.360 --> 00:04:23.760
to validate users first name property.

58
00:04:24.210 --> 00:04:27.750
I will scroll up a little bit and run this test method.

59
00:04:31.490 --> 00:04:32.300
And it works.

60
00:04:32.300 --> 00:04:33.800
The test method passes.

61
00:04:33.830 --> 00:04:39.770
Now let's assume that we have accidentally remove validation annotation from the create user method

62
00:04:39.770 --> 00:04:42.490
or from user request model object.

63
00:04:42.500 --> 00:04:46.010
So I will go back to my controller class.

64
00:04:47.310 --> 00:04:55.410
This is my method under test create user and let's assume that I have accidentally removed this valid

65
00:04:55.410 --> 00:04:56.330
annotation.

66
00:04:56.340 --> 00:05:01.500
I will save this change and I will go back to my test method and run it one more time.

67
00:05:05.040 --> 00:05:07.170
And now my test method fails.

68
00:05:07.260 --> 00:05:12.330
All right, so if we were making changes to our method in the controller class and we have accidentally

69
00:05:12.330 --> 00:05:18.960
removed this annotation, then validation of a HTTP request body will not work and hopefully our test

70
00:05:18.960 --> 00:05:20.730
method will be able to catch it.

71
00:05:21.540 --> 00:05:26.610
So let's minimize it and let's bring back our valid annotation.

72
00:05:26.730 --> 00:05:33.000
And let's assume that we were making changes in the user details request model and we have accidentally

73
00:05:33.000 --> 00:05:35.550
removed this size annotation.

74
00:05:35.640 --> 00:05:42.000
That means the validation for users first name will not be made and this would also make our test method

75
00:05:42.000 --> 00:05:42.570
fail.

76
00:05:42.840 --> 00:05:44.760
Let's try running it again.

77
00:05:46.500 --> 00:05:50.460
And it fails, but it's make it pass again.

78
00:05:50.820 --> 00:05:57.090
I will go to my user details request model and I will fix the issue, save it and run my test method

79
00:05:57.090 --> 00:05:57.600
again.

80
00:05:59.320 --> 00:06:00.670
And it passes.

81
00:06:00.790 --> 00:06:06.910
Now we can continue testing or create user method and the user details, request, model, class and

82
00:06:06.910 --> 00:06:12.070
make sure that other requirements for other fields are also satisfied.

83
00:06:12.100 --> 00:06:19.390
For example, we started testing users first name and currently this field is annotated with size annotation

84
00:06:19.390 --> 00:06:25.270
and it is configured that the value that is going to be assigned to this field cannot be less than two

85
00:06:25.270 --> 00:06:26.070
characters.

86
00:06:26.080 --> 00:06:32.410
So we might want to create a separate test method to validate that if a user provides first name that

87
00:06:32.410 --> 00:06:39.430
is less than two characters, then in response our API endpoint will return HTTP status code 400 and

88
00:06:39.430 --> 00:06:42.700
we can write similar test method to validate other fields.

89
00:06:42.700 --> 00:06:48.490
For example, fields like last name password and repeat password.

90
00:06:48.520 --> 00:06:54.400
All these fields have requirements for a minimum lengths and fields like password, for example, and

91
00:06:54.400 --> 00:06:55.540
repeat password.

92
00:06:55.690 --> 00:07:00.580
These fields have a requirements for minimum and maximum lengths as well.

93
00:07:00.820 --> 00:07:07.060
So to make sure that our application works as expected, we might want to write separate test methods

94
00:07:07.060 --> 00:07:08.920
to validate each of these fields.

95
00:07:08.920 --> 00:07:14.800
And this is because there is a chance that while editing this class, you or someone else on your team

96
00:07:14.800 --> 00:07:20.590
might accidentally remove one of these validation annotations, or someone might accidentally change

97
00:07:20.590 --> 00:07:24.010
your requirement for password to be minimum eight characters loan.

98
00:07:24.070 --> 00:07:29.890
And if we do not have a separate test method to validate this requirement, then there is a chance that

99
00:07:29.890 --> 00:07:32.350
a serious bug can go through.

100
00:07:32.380 --> 00:07:32.920
All right.

101
00:07:32.920 --> 00:07:34.870
So let's continue to the next lesson.

