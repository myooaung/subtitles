1
00:00:00,240 --> 00:00:06,840
To avoid poor number conflicts in test environment, it is better to configure our web environment to

2
00:00:06,840 --> 00:00:08,700
use a random port number.

3
00:00:08,700 --> 00:00:14,160
So instead of a defined port, I will choose a random port.

4
00:00:14,250 --> 00:00:20,310
This will make the embedded server always start on a random port number and it will allow different

5
00:00:20,310 --> 00:00:22,680
integration tests to run in parallel.

6
00:00:23,010 --> 00:00:29,100
Also, when using a random port number, there is no need to define specific port number in application

7
00:00:29,100 --> 00:00:32,450
properties file or in application test properties.

8
00:00:32,460 --> 00:00:39,870
So if I open the application properties file now even though we have a defined port number here, when

9
00:00:39,870 --> 00:00:45,300
we run our test methods, our application will still start on a random port number.

10
00:00:45,330 --> 00:00:51,840
This is because in our test class, in the Springwood test configuration, we have specified that we

11
00:00:51,840 --> 00:00:58,460
want web environment to use a random port number and this configuration has a higher priority.

12
00:00:58,470 --> 00:01:05,700
So behind the scenes Sprint framework will make this defined port number to be zero because this is

13
00:01:05,700 --> 00:01:09,540
how we configure springboard applications to start on a random port number.

14
00:01:09,540 --> 00:01:14,490
But at the end when our embedded server starts, it will not start on port number zero.

15
00:01:14,490 --> 00:01:18,570
It will start on a random port number that will be available to use.

16
00:01:18,810 --> 00:01:19,140
All right.

17
00:01:19,140 --> 00:01:21,150
So I will undo this change.

18
00:01:21,450 --> 00:01:23,520
Let's go back to our test class.

19
00:01:23,520 --> 00:01:29,580
And if you need to know on which port number your embedded server is actually running, then you can

20
00:01:29,580 --> 00:01:34,040
inject the running port number into test class and you do it this way.

21
00:01:34,050 --> 00:01:40,740
There is a special annotation you can use that is called local server port and then you can assign this

22
00:01:40,740 --> 00:01:45,240
value to a member variable like for example, a local server port.

23
00:01:46,320 --> 00:01:49,230
So the locals report annotation.

24
00:01:49,230 --> 00:01:55,710
It will pick up the actual port number on which your embedded server is running and it will assign this

25
00:01:55,710 --> 00:01:57,000
value to this number.

26
00:01:57,680 --> 00:01:58,040
And right.

27
00:01:58,080 --> 00:02:05,670
So the value annotation will help us read value of server port property that is loaded from the properties

28
00:02:05,670 --> 00:02:13,050
file and the local server port annotation will allow us to read value of actual port number on which

29
00:02:13,050 --> 00:02:14,510
our server is running.

30
00:02:14,520 --> 00:02:16,950
Let's print this value as well.

31
00:02:20,550 --> 00:02:23,880
And let's run our test method to see how it works.

32
00:02:28,990 --> 00:02:36,970
Now if I scroll down the console and read the port number on which my server has started, then I see

33
00:02:36,970 --> 00:02:46,120
that my server started on port number 49440 and if I check the console of my test method, then it is

34
00:02:46,120 --> 00:02:51,610
exactly the same port number that I'm printing using a local server port annotation.

35
00:02:51,820 --> 00:02:57,670
All right, so it all worked for us and you now know how to configure your Springwood test web environment

36
00:02:57,670 --> 00:02:59,920
to run on a random port number.

37
00:02:59,920 --> 00:03:05,950
And this will help you avoid potential port number conflicts when you execute multiple integration tests

38
00:03:05,950 --> 00:03:07,810
in the same test environment.

39
00:03:08,050 --> 00:03:08,920
Let's continue.

