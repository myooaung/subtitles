WEBVTT
1
00:00:00.360 --> 00:00:04.110
In the following lessons you will learn how to test GPA repository.

2
00:00:05.500 --> 00:00:10.450
Now, before we start testing up a repository, I would like to tell you what we're going to test and

3
00:00:10.450 --> 00:00:13.570
what we're not going to test in GP repositories.

4
00:00:14.080 --> 00:00:21.520
So when we create a repository, we usually create an interface that extends another GP related interface.

5
00:00:21.670 --> 00:00:28.750
For example, in the code snippet you see on my screen, users repository extends CRUD repository interface

6
00:00:28.990 --> 00:00:35.710
and the repository that we're going to test in the following lessons, we'll extend paging and sorting

7
00:00:35.710 --> 00:00:37.060
and repository interface.

8
00:00:37.180 --> 00:00:44.320
Both of these interfaces are data layer related interfaces, and they define specific methods that we

9
00:00:44.320 --> 00:00:46.450
can use to work with our database.

10
00:00:46.540 --> 00:00:53.140
For example, current repository interface defines methods that can help us save record into a database

11
00:00:53.140 --> 00:00:59.680
table, find record or delete record, and a few other methods that are related to saving, finding

12
00:00:59.680 --> 00:01:05.710
and record and deleting records and paging and sorting repository interface.

13
00:01:05.800 --> 00:01:13.060
It extends current repository and provides additional methods that help us implement pagination in our

14
00:01:13.060 --> 00:01:13.930
application.

15
00:01:14.260 --> 00:01:19.650
So we are not going to test methods that are provided by these interfaces.

16
00:01:19.660 --> 00:01:24.280
We're not going to test, save, method, or save or delete method.

17
00:01:24.370 --> 00:01:30.090
These methods are provided to us by the framework and we will trust that they work well.

18
00:01:30.100 --> 00:01:37.600
So when testing GBA repositories, we usually test code that was written by us, for example.

19
00:01:37.640 --> 00:01:42.910
Notice the two methods and the repository that extends paging and sorting repository.

20
00:01:42.940 --> 00:01:48.100
These are query methods for a project that I have prepared for this course.

21
00:01:48.130 --> 00:01:54.160
I am the one who created this method and this means that they are good candidates for testing.

22
00:01:54.580 --> 00:02:01.120
Also for this video, of course, I assume you are familiar with query methods and how they work, but

23
00:02:01.120 --> 00:02:05.440
if you are not familiar with them, then please Google for additional information.

24
00:02:05.440 --> 00:02:13.330
But the way they work is that there is a special way in which a name of this query method is created,

25
00:02:13.330 --> 00:02:20.710
and based on the method name sprint framework will derive a skill query and it will execute the skill

26
00:02:20.740 --> 00:02:22.720
query against the database table.

27
00:02:23.050 --> 00:02:30.790
For example, the very first method is called find by email, and this means that Sprint framework will

28
00:02:30.790 --> 00:02:38.320
try to create a skill query that will select the record from a database table with the column name is

29
00:02:38.320 --> 00:02:45.580
email, and the value that sits in that column is equal to the value that we pass as a parameter to

30
00:02:45.580 --> 00:02:46.330
this method.

31
00:02:46.330 --> 00:02:52.960
Now, if the method name is completely incorrect, if you did not follow the pattern to create query

32
00:02:52.960 --> 00:02:58.780
methods and you have created method name that is completely incorrect, then spring framework will not

33
00:02:58.780 --> 00:03:02.320
even be able to start application context for your application.

34
00:03:02.320 --> 00:03:05.650
So you will learn that your code is failing pretty quickly.

35
00:03:05.980 --> 00:03:12.160
And because of this, many developers prefer not to write test methods, to test query methods as well,

36
00:03:12.190 --> 00:03:16.780
because if the method is incorrect, then your application will fail to start up.

37
00:03:16.960 --> 00:03:23.950
Now I personally still prefer to test some of these methods and this is because their names can become

38
00:03:23.950 --> 00:03:25.120
more complex.

39
00:03:25.120 --> 00:03:31.720
And just to make sure that the method does return information that I expect I will create a test method

40
00:03:31.720 --> 00:03:32.260
for it.

41
00:03:34.400 --> 00:03:40.070
Now I've mentioned in the previous slide that query method names can become more complex.

42
00:03:40.220 --> 00:03:50.240
For example, the find by user ID and email query method, or the find by first name and last name query

43
00:03:50.240 --> 00:03:50.840
method.

44
00:03:50.960 --> 00:03:57.800
These query methods look more complex, and as a new developer making changes to a very complex query

45
00:03:57.800 --> 00:04:05.180
method name, I might not be very sure that this method that I have just updated works as expected and

46
00:04:05.180 --> 00:04:07.120
returns the correct information.

47
00:04:07.130 --> 00:04:14.030
So in this case, creating a test method for it will give me some confidence that the query method name

48
00:04:14.030 --> 00:04:21.620
that I have just updated or created works as expected, and it returns me correct information.

49
00:04:21.800 --> 00:04:28.610
Although many developers prefer to test those methods that use a SQL query, let's have a look at one

50
00:04:28.610 --> 00:04:29.240
example.

51
00:04:30.120 --> 00:04:38.850
So here's an example of query method that uses GP SQL Query GB SQL stands for Java Persistence Query

52
00:04:38.850 --> 00:04:44.070
Language, and you will use it to write database independent SQL queries.

53
00:04:44.340 --> 00:04:48.810
And writing SQL queries is very helpful in those cases.

54
00:04:48.810 --> 00:04:52.830
When creating method, name becomes complex and confusing.

55
00:04:52.830 --> 00:04:59.790
So when you need to perform a complex SQL query, then creating query method can become more difficult

56
00:04:59.790 --> 00:05:02.760
than actually writing a SQL query itself.

57
00:05:02.760 --> 00:05:09.420
And in those cases, when you need to write a custom and very complex SQL query, you will usually also

58
00:05:09.420 --> 00:05:14.070
write a test method to make sure that your query selects correct information.

59
00:05:14.070 --> 00:05:20.430
And if someone in the future will edit and break this obscure query, then your test method will be

60
00:05:20.430 --> 00:05:21.450
able to catch it.

61
00:05:21.480 --> 00:05:23.580
All right, so let's continue.

62
00:05:23.580 --> 00:05:29.520
And in the following lessons, you will learn how to write test methods that test GPA repositories.

