1
00:00:00,440 --> 00:00:05,930
In this lesson, we will start working on a test method that will test if we can successfully log in

2
00:00:05,930 --> 00:00:11,720
and then get back authorization access token in later lessons, we will then use this authorization

3
00:00:11,720 --> 00:00:15,140
access token to communicate with protected API endpoints.

4
00:00:15,500 --> 00:00:15,640
Right.

5
00:00:15,680 --> 00:00:18,050
So let's start working on a new test method.

6
00:00:20,270 --> 00:00:21,350
As a display name.

7
00:00:21,350 --> 00:00:23,990
I will use something like logging works.

8
00:00:26,740 --> 00:00:28,330
I'm going to test user login.

9
00:00:28,330 --> 00:00:31,960
So I'm starting my test method name with test user login.

10
00:00:31,960 --> 00:00:38,530
And then when valid user credentials are provided, it should return JWT access token in authorization

11
00:00:38,530 --> 00:00:39,040
header.

12
00:00:39,370 --> 00:00:43,780
So I will continue with something like when valid credentials provided.

13
00:00:45,830 --> 00:00:48,830
Returns JWT in authorization header.

14
00:00:52,220 --> 00:00:56,000
My intense and I will set a range act and insert sections.

15
00:00:58,840 --> 00:01:04,810
Now in the arrange section, I'll need to prepare user login credentials and this is going to be JSON.

16
00:01:04,810 --> 00:01:12,490
And if I were to type this JSON manually, it would look something like this or I can use JSON object

17
00:01:12,490 --> 00:01:16,240
and set user login credentials using JSON object.

18
00:01:16,240 --> 00:01:17,860
And this is what I'm going to do.

19
00:01:17,890 --> 00:01:19,840
I'm going to use JS an object.

20
00:01:21,020 --> 00:01:23,120
I will call it login credentials.

21
00:01:24,700 --> 00:01:28,440
And they will set login credentials using this JSON object.

22
00:01:36,040 --> 00:01:38,920
And this chase and strain, I can comment out.

23
00:01:39,830 --> 00:01:45,380
Now I have a warning here and it wants me to add an exception to the method signature.

24
00:01:45,380 --> 00:01:52,280
So I'll click and that will add those GS and exemption to my test method signature.

25
00:01:53,060 --> 00:02:00,950
And now I can drop this user details into an HTTP entity so that I can use it in a HTTP request and

26
00:02:00,950 --> 00:02:03,230
I will do it in the arranged section as well.

27
00:02:08,710 --> 00:02:12,700
And in the ACT section I can perform this request.

28
00:02:12,910 --> 00:02:20,910
So to do that, I will use my test arrest template object and I will call method post for entity.

29
00:02:20,920 --> 00:02:23,830
Now this will need to be http post request.

30
00:02:23,830 --> 00:02:27,340
So this is why I'm going to select post for entity.

31
00:02:27,580 --> 00:02:31,920
And in response back it will give me a response entity object.

32
00:02:31,930 --> 00:02:38,590
I could also use post for object method, but because in response I want to receive an object from which

33
00:02:38,590 --> 00:02:40,510
I can read a status code.

34
00:02:40,510 --> 00:02:43,510
I need to select post for entity.

35
00:02:43,780 --> 00:02:47,260
So this method post entity accepts a few parameters.

36
00:02:47,260 --> 00:02:56,290
And the first parameter we need to provide your role and your path will be users for login and it needs

37
00:02:56,290 --> 00:03:03,370
to be users forward slash login because this is how I have configured it in my web security Java class

38
00:03:03,370 --> 00:03:04,240
in my application.

39
00:03:04,240 --> 00:03:11,410
So if I go to my application in the security package, I have web security, Java class.

40
00:03:11,410 --> 00:03:18,730
If I open it and scroll down here, I have a method that is called get authentication filter and here

41
00:03:18,730 --> 00:03:22,330
I configure the URL path to a login endpoint.

42
00:03:22,360 --> 00:03:30,430
Now the default URL path is going to be just log in like this and it is provided to us by default by

43
00:03:30,430 --> 00:03:31,360
sprint framework.

44
00:03:31,360 --> 00:03:35,930
So we do not need to create a separate method in the controller class that handles.

45
00:03:35,930 --> 00:03:39,670
This should be post request sent to for slash slogan.

46
00:03:39,670 --> 00:03:45,760
So this is provided to us by default, but if needed we can change this default URL path to something

47
00:03:45,760 --> 00:03:46,480
different.

48
00:03:46,480 --> 00:03:52,200
And in my case I have changed it to forward slash users for slash login.

49
00:03:52,600 --> 00:03:57,190
Okay, so let's close it and let's go back to our test method.

50
00:03:57,370 --> 00:04:01,480
The next parameter that I'm going to provide will be request.

51
00:04:01,480 --> 00:04:04,180
This is going to be our HTTP end here.

52
00:04:04,450 --> 00:04:10,390
And finally, the data type to which I want the response body to be converted and because there will

53
00:04:10,390 --> 00:04:17,170
be no JSON payload that will be sent back and the response body I will simply provide null here.

54
00:04:17,320 --> 00:04:24,250
If user login is successful, then response status code will be 200 and my application will add a couple

55
00:04:24,250 --> 00:04:29,620
of response headers and I do it in authentication filter in my application.

56
00:04:29,620 --> 00:04:35,830
So if I go back to my application code again in the security package here, I have class that is called

57
00:04:35,830 --> 00:04:37,270
authentication filter.

58
00:04:37,270 --> 00:04:45,520
If I go there and scroll down a little bit, then I have a method that is called successful authentication.

59
00:04:45,760 --> 00:04:52,240
So once user login is successful, Sprint framework will trigger this method for me.

60
00:04:52,240 --> 00:05:01,720
And here in this method I generate JWT access token and then I add this JWT access token as authorization

61
00:05:01,720 --> 00:05:10,420
header to the response and I also add user ID as additional HTTP header with a name user ID.

62
00:05:10,420 --> 00:05:17,620
And the first header is called authorization because this stream is constant that I have created and

63
00:05:17,620 --> 00:05:18,760
it holds value.

64
00:05:19,530 --> 00:05:20,560
Authorization.

65
00:05:21,320 --> 00:05:26,200
And so there's going to be authorization header with JWT token and user ID.

66
00:05:26,220 --> 00:05:26,750
Header.

67
00:05:26,760 --> 00:05:30,630
These two headers will be added to the response and return back.

68
00:05:30,660 --> 00:05:37,020
So in my test method to check if user authentication is successful, I will check first if the status

69
00:05:37,020 --> 00:05:42,150
code is to hungry and if it should be response contains these two headers.

70
00:05:42,210 --> 00:05:48,270
Authorization header and header with a name user ID and if the values are not empty.

71
00:05:48,510 --> 00:05:50,910
All right, so let's go back to our test method.

72
00:05:51,180 --> 00:05:58,320
So once I perform this people's request in response, I'll get back response entity.

73
00:05:59,290 --> 00:06:01,060
I will call it response.

74
00:06:01,720 --> 00:06:06,070
Let's put things on separate lines like this.

75
00:06:06,370 --> 00:06:10,150
And now that I have response and to the object, I can read from it.

76
00:06:10,150 --> 00:06:11,710
HTTP response headers.

77
00:06:11,710 --> 00:06:16,360
But first I will assert that HTTP status code is 200.

78
00:06:16,360 --> 00:06:19,990
So in the assert section I will use assertions.

79
00:06:20,850 --> 00:06:25,910
And I will use assert equals assertion as an expected value.

80
00:06:25,920 --> 00:06:29,310
I expect http status code 200.

81
00:06:29,580 --> 00:06:32,100
And this stands for OC.

82
00:06:33,120 --> 00:06:35,470
And actually that is good value.

83
00:06:35,490 --> 00:06:43,290
I will read from response object by calling get status code method and if these two values are not equal,

84
00:06:43,290 --> 00:06:46,140
then I will display a hint message in the console.

85
00:06:46,260 --> 00:06:49,620
Something like http status code should be 200.

86
00:06:51,190 --> 00:06:51,520
All right.

87
00:06:51,520 --> 00:06:58,270
So if this assertion is successful, then I can validate if a gdb response contains authorization header.

88
00:06:58,270 --> 00:07:03,670
And I can also check if authorization header and user ID values are not empty.

89
00:07:03,670 --> 00:07:07,240
So to do that I will use assert not non assertion.

90
00:07:08,960 --> 00:07:16,430
And to access value of authorization header I will need to use response object, then get headers from

91
00:07:16,430 --> 00:07:20,480
it, then get values as least.

92
00:07:20,480 --> 00:07:27,680
And I will need to provide a name of the header that I want to read and this is going to be authorization.

93
00:07:27,680 --> 00:07:33,620
Or I can actually use the same constant that I have used in my authentication filter.

94
00:07:33,950 --> 00:07:41,390
So instead of hard coding authorization, I will use the same header name that I have used in authentication

95
00:07:41,390 --> 00:07:41,990
filter.

96
00:07:43,110 --> 00:07:43,670
Okay.

97
00:07:43,680 --> 00:07:51,600
And finally, I will need to call get method with an index of zero to get its value.

98
00:07:52,170 --> 00:07:57,060
And if this is null, then I will display a message in the console.

99
00:07:59,800 --> 00:08:00,520
Like this.

100
00:08:00,520 --> 00:08:06,220
And just the same way I can check if a response contains value of user ID.

101
00:08:06,370 --> 00:08:17,200
So I will again use assertions assert not now to read user id header I will use response, get headers,

102
00:08:17,650 --> 00:08:25,330
get values as least provide a name of the header and the name of the header I can copy from authentication

103
00:08:25,330 --> 00:08:29,440
filter so I'll copy the name of the header and paste it here.

104
00:08:30,400 --> 00:08:33,789
And go and get with an index zero.

105
00:08:34,000 --> 00:08:34,480
All right.

106
00:08:34,480 --> 00:08:38,650
And if this is now, I will provide a message.

107
00:08:38,650 --> 00:08:43,150
Something like response should contain user ID in response header.

108
00:08:46,260 --> 00:08:47,160
Something like this.

109
00:08:47,190 --> 00:08:47,750
All right.

110
00:08:47,760 --> 00:08:52,610
So it looks like we're done with the test method and we can try running it.

111
00:08:52,620 --> 00:08:56,820
But if I do run it now, then there is no guarantee that it will pass.

112
00:08:56,820 --> 00:09:04,420
And this is because for it to pass, there must be a user with this credentials in the database with

113
00:09:04,420 --> 00:09:09,330
an email address that is equal to this email address and with this password.

114
00:09:09,390 --> 00:09:15,570
And if this test method runs very first, then it will fail because there is no such user in the database

115
00:09:15,570 --> 00:09:17,430
and my test method will fail.

116
00:09:17,430 --> 00:09:18,480
So let's try.

117
00:09:18,480 --> 00:09:23,760
I will scroll up and I will run all test methods in this test class.

118
00:09:27,110 --> 00:09:28,290
And it fails.

119
00:09:28,310 --> 00:09:36,020
I see that my login works test method did run very fast and if I check the reason why it failed.

120
00:09:36,900 --> 00:09:39,330
Then I see that we are expecting a big response.

121
00:09:39,330 --> 00:09:44,070
Dallas got 200, but the actual error code returned is 403.

122
00:09:44,070 --> 00:09:50,070
And this is because this this method was executed first even before a new user was created.

123
00:09:50,070 --> 00:09:56,520
So for this test method to pass, we will need to first create a new user and then perform a user login.

124
00:09:56,610 --> 00:10:04,020
Or we could reorder these test methods so that the test method that validates user login is executed

125
00:10:04,020 --> 00:10:06,480
after a new user is created.

126
00:10:06,480 --> 00:10:09,000
So let's work on it in the following lesson.

