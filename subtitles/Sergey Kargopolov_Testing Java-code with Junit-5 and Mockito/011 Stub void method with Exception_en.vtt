WEBVTT
1
00:00:00.330 --> 00:00:03.150
In this lecture, you will learn how to avoid methods.

2
00:00:03.600 --> 00:00:08.400
In previous lesson, we have created with method that is called keto email confirmation.

3
00:00:08.640 --> 00:00:14.790
And now we are going to assume that we need to mock the email verification series and we need to start

4
00:00:14.790 --> 00:00:18.000
this email confirmation method with exception.

5
00:00:18.420 --> 00:00:22.350
All right, so let's go back to our test class and I will create a new test.

6
00:00:22.350 --> 00:00:22.710
Meant it.

7
00:00:30.980 --> 00:00:37.730
I will be testing this same creed you cemented for a use case when email invocation exceptions drone

8
00:00:38.150 --> 00:00:46.190
then my method and the test create user throws user service exemption instead and add a short display

9
00:00:46.190 --> 00:00:46.430
name.

10
00:00:47.540 --> 00:00:50.540
Something like email notification exception is handbook.

11
00:00:53.450 --> 00:00:57.240
And we'll start with the orange section in the orange section.

12
00:00:57.260 --> 00:01:00.770
I will stop save method and I will simply make it return to.

13
00:01:03.950 --> 00:01:13.130
When user repository object is used to call save method to persist any object of user class, then my

14
00:01:13.130 --> 00:01:15.650
saved method should return and boolean value.

15
00:01:15.650 --> 00:01:15.970
True.

16
00:01:16.520 --> 00:01:21.530
Now if I use this same approach to stamp void method, then it will not compile.

17
00:01:21.770 --> 00:01:22.370
Let's try.

18
00:01:23.670 --> 00:01:25.470
To use email verification service.

19
00:01:25.470 --> 00:01:33.720
I will first need to inject it into my test class and I will scroll up and will create one more variable

20
00:01:33.990 --> 00:01:42.210
and it is going to be email verification service and I want to mock it so that I do not use a real implementation.

21
00:01:43.280 --> 00:01:50.540
So now that I have created this mock object, it will be injected when an instance of user service implementation

22
00:01:50.540 --> 00:01:51.470
object is created.

23
00:01:51.950 --> 00:01:58.880
Now let's go down to our test method and I'm going to use an instance of email verification service

24
00:01:59.270 --> 00:02:02.540
to call the queue email confirmation minute.

25
00:02:02.840 --> 00:02:06.320
The schedule email confirmation method accepts user object.

26
00:02:06.770 --> 00:02:10.729
So I will use a name and then will provide a user class.

27
00:02:11.090 --> 00:02:11.480
Okay.

28
00:02:11.900 --> 00:02:19.850
So this line already does not compile and this is because this email confirmation method is avoid these

29
00:02:19.850 --> 00:02:24.920
two expressions when then through and when then return.

30
00:02:25.250 --> 00:02:27.200
They do not work with both methods.

31
00:02:27.710 --> 00:02:36.470
So instead of using when then through I will need to use do throw when inside of the true I'll need

32
00:02:36.470 --> 00:02:37.970
to specify exception.

33
00:02:37.970 --> 00:02:39.050
They want to be thrown.

34
00:02:39.410 --> 00:02:42.230
Let's assume that we want to throw email edification.

35
00:02:42.230 --> 00:02:43.190
Service exemption.

36
00:02:45.510 --> 00:02:49.110
This is a new exception cause we're going to create it in just a moment.

37
00:02:49.470 --> 00:02:56.010
And inside of when we will specify an instance of more compute, in our case, it is email verification

38
00:02:56.010 --> 00:02:56.430
service.

39
00:02:56.940 --> 00:02:58.920
Let's also put it on a new line.

40
00:02:59.990 --> 00:03:05.000
And now I can invoke the void method that I want to stop with this expression.

41
00:03:06.500 --> 00:03:15.140
Scahill email confirmation and this method accepts use an object so I will use any user class like this

42
00:03:15.140 --> 00:03:17.030
and I'll also put it on a new line.

43
00:03:17.570 --> 00:03:17.930
All right.

44
00:03:17.930 --> 00:03:23.420
So if we read this expression left to right, then it says, do throw email education.

45
00:03:23.420 --> 00:03:24.380
Serious exception.

46
00:03:24.770 --> 00:03:31.250
One email verification serious mock object is used to invoke key your email confirmation method with

47
00:03:31.250 --> 00:03:33.110
any object of user class.

48
00:03:33.800 --> 00:03:34.190
Okay.

49
00:03:34.190 --> 00:03:40.790
So now if this Google email confirmation meant that these invoked, it should throw an exception and

50
00:03:40.790 --> 00:03:47.000
we can verify if our method under test can successfully handle this exception and throw different exception

51
00:03:47.000 --> 00:03:47.690
that we need.

52
00:03:48.140 --> 00:03:49.370
So let's do that.

53
00:03:49.910 --> 00:03:52.760
First, I will create email notification service exception.

54
00:03:53.060 --> 00:03:55.760
So inside of service package show create a new class.

55
00:03:56.920 --> 00:03:59.620
I'll call it email and vacation service exemption.

56
00:04:00.160 --> 00:04:05.320
I'll make it extend grant an exception will create constructor.

57
00:04:06.800 --> 00:04:12.230
Don't accept message and we'll call super with this message.

58
00:04:12.650 --> 00:04:12.980
Okay.

59
00:04:13.250 --> 00:04:18.160
So now we have a custom exception that we can throw and I can delete this finally.

60
00:04:19.160 --> 00:04:21.829
So now let's invoke our method under test.

61
00:04:22.760 --> 00:04:30.680
I can copy and paste this line and I can add assertion that my method under test throws correct exception.

62
00:04:31.730 --> 00:04:34.310
I'm expecting you to throw use a service exemption.

63
00:04:38.110 --> 00:04:40.840
And that will add an optional element such.

64
00:04:43.640 --> 00:04:48.080
Our renamed as section to and insert and below.

65
00:04:48.080 --> 00:04:54.890
I can add one more assertion to verify that the scheme email confirmation method was invoked exactly

66
00:04:54.890 --> 00:04:55.490
one time.

67
00:05:04.210 --> 00:05:04.690
Like this.

68
00:05:05.020 --> 00:05:08.350
And now I can run my test method and see if it works.

69
00:05:08.380 --> 00:05:08.950
Let's try.

70
00:05:12.090 --> 00:05:13.200
And it works very well.

71
00:05:13.620 --> 00:05:13.890
All right.

72
00:05:13.890 --> 00:05:18.780
So now you know how to use more compute to start with methods with an exception.

73
00:05:19.200 --> 00:05:19.980
Let's continue.

