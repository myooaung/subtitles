WEBVTT
1
00:00:00.150 --> 00:00:05.280
To test your application, you might want to write three different types of test code as illustrated

2
00:00:05.280 --> 00:00:06.090
in this pyramid.

3
00:00:06.510 --> 00:00:12.990
Notice that unit tests are at the bottom of the test pyramid, and this is because usually unit tests

4
00:00:12.990 --> 00:00:15.660
are written and run before another test code.

5
00:00:15.900 --> 00:00:22.980
So the first type of test code is unit test, and usually you will write a lot more unit tests for application

6
00:00:23.250 --> 00:00:24.630
than any other tests.

7
00:00:25.080 --> 00:00:29.820
When Orion test code unit tests are also the fastest among these three.

8
00:00:30.180 --> 00:00:35.940
This is because units do not need to connect to a database and they do not need to send that UDP request

9
00:00:35.940 --> 00:00:38.790
over the network and wait for a response.

10
00:00:39.390 --> 00:00:45.060
The next type of test code that you might want to write is called Integration Test, and these test

11
00:00:45.060 --> 00:00:50.700
methods are very similar to unit tests, except that in this case you will not use mock and you will

12
00:00:50.700 --> 00:00:53.820
not use fake objects instead of real objects.

13
00:00:54.240 --> 00:00:59.550
The method you are testing will actually send the ship request if it needs to, or it will actually

14
00:00:59.550 --> 00:01:01.740
write into a database if it needs to.

15
00:01:02.100 --> 00:01:07.260
And in this case, if you need as deep pass, then you are confident that the method you were testing

16
00:01:07.260 --> 00:01:11.430
will work well when it is integrated with other external systems.

17
00:01:11.910 --> 00:01:12.240
All right.

18
00:01:12.240 --> 00:01:17.850
So in case of integration tests, if your method needs to load data from a database or if your test

19
00:01:17.850 --> 00:01:24.120
method needs to send be request to fetch data from any more server, you will not use fake objects anymore,

20
00:01:24.120 --> 00:01:30.060
but you will actually let your function use a real database connection or send a real active request

21
00:01:30.240 --> 00:01:34.110
and work with a real cheap response that it gets from the server.

22
00:01:34.470 --> 00:01:40.410
Integration tests runs slower than unit tests because they need to communicate with other internal or

23
00:01:40.410 --> 00:01:41.520
external systems.

24
00:01:42.000 --> 00:01:46.170
The next level of testing that you will do is automated end to end testing.

25
00:01:46.590 --> 00:01:51.780
When doing end to end testing, you will their software functionality from beginning to end.

26
00:01:52.140 --> 00:01:57.540
If you a building mobile application, for example, or a web page, then you might want to write automated

27
00:01:57.540 --> 00:01:58.440
UI tests.

28
00:01:58.920 --> 00:02:05.850
These tests will test functionality of your application by actually invoking button clicks and evaluating

29
00:02:05.850 --> 00:02:09.360
if that button click did produce unexpected results.

30
00:02:09.750 --> 00:02:17.010
So automated end to end tests are even slower, and the number of end to end tests that we create will

31
00:02:17.010 --> 00:02:19.380
be a lot less than the number of unit tests.

