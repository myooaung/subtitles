1
00:00:00,150 --> 00:00:06,689
In this lesson, we will use an object of users repository implementation to save user details, and

2
00:00:06,689 --> 00:00:09,960
we will do it in the user service implementation class.

3
00:00:10,500 --> 00:00:17,160
Now there are different ways how we can make an object of this class available in our user service implementation.

4
00:00:17,490 --> 00:00:22,860
And the easiest way will be to create an object with right the way inside of the create user method.

5
00:00:26,820 --> 00:00:27,390
Like this.

6
00:00:27,570 --> 00:00:33,750
Now that they have an object of a clause that implements users, it puts the I can call slave method

7
00:00:33,840 --> 00:00:35,400
to proceed to say details.

8
00:00:35,790 --> 00:00:43,080
But this will be incorrect because in this case, if I called the creators method from my test method

9
00:00:43,080 --> 00:00:50,400
of the code inside of this save method will be executed and user will actually be persisted to no storage.

10
00:00:50,850 --> 00:00:55,260
And in this case is going to be not unit test anymore, but integration test.

11
00:00:55,950 --> 00:01:02,160
When writing the unit test to test this create user method, which is our method under test, we need

12
00:01:02,160 --> 00:01:08,700
to isolate this method from all its dependencies because we are not actually testing code inside of

13
00:01:08,700 --> 00:01:12,750
save method and we do not want to invoke a real save method.

14
00:01:13,170 --> 00:01:20,360
So instead of using a real user supposedly object, we want to replace this real object with a more

15
00:01:20,610 --> 00:01:20,870
chip.

16
00:01:21,360 --> 00:01:27,690
But if I create an instance of users who oppose the implementation this way, then there is no way I

17
00:01:27,690 --> 00:01:33,960
can make this method, create user method, use a mock object instead of a real one.

18
00:01:34,290 --> 00:01:40,290
So we need to use dependency injection and instead of creating a new object of users who opposed the

19
00:01:40,290 --> 00:01:45,990
implementation, this way we will need to inject it using constructor based dependency injection.

20
00:01:46,530 --> 00:01:50,580
So I will define a new instance of users repository.

21
00:01:51,090 --> 00:01:57,750
On a class level, it's going to be member variable and on create a constructor to initialize to do

22
00:01:57,750 --> 00:02:02,520
that, that will do right mouse click then choose, generate and choose constructor.

23
00:02:03,000 --> 00:02:03,390
Click.

24
00:02:03,390 --> 00:02:03,900
Okay.

25
00:02:03,900 --> 00:02:09,210
And now I have constructor for this class that will initialize user repository property.

26
00:02:09,780 --> 00:02:15,420
And this way, when creating a new instance of user series implementation clause, I can pass here and

27
00:02:15,420 --> 00:02:20,850
object of any clause as long as it implements user repository interface.

28
00:02:21,150 --> 00:02:21,530
Okay.

29
00:02:21,930 --> 00:02:27,540
And we'll use my key then to create a mock compute that implements this interface for answer chromatically.

30
00:02:27,960 --> 00:02:28,290
All right.

31
00:02:28,590 --> 00:02:35,310
So I will scroll down and I will delete this line and maybe add a little if statement to check for a

32
00:02:35,310 --> 00:02:36,090
boolean power.

33
00:02:37,080 --> 00:02:41,220
For example boolean resolve or boolean easy user Craig.

34
00:02:42,340 --> 00:02:43,150
And then check of.

35
00:02:43,150 --> 00:02:46,220
It's true he fuser was not created.

36
00:02:46,240 --> 00:02:47,860
I will add exclamation mark.

37
00:02:48,130 --> 00:02:53,890
Then I will throw a new, let's say, user service exception.

38
00:02:55,060 --> 00:02:57,610
With a message like I could not create user.

39
00:02:59,060 --> 00:03:05,510
Now I do not have user service exemption class in my project, so I will move mouse over the error message

40
00:03:05,660 --> 00:03:10,520
and then click on more actions and choose create class user service exemption.

41
00:03:10,970 --> 00:03:18,500
The destination package will be my absolute little bit block Easter service package and the target destination

42
00:03:18,500 --> 00:03:27,140
directory will be main application folder and not the test but source main java and then service package.

43
00:03:28,120 --> 00:03:28,970
And quick on.

44
00:03:29,020 --> 00:03:29,470
Okay.

45
00:03:29,830 --> 00:03:32,080
And now I have a new class.

46
00:03:32,080 --> 00:03:36,040
You serious exemption created in the service package?

47
00:03:36,180 --> 00:03:38,590
Yeah, it extends through Will.

48
00:03:38,620 --> 00:03:41,110
I'll make it extend runtime exception.

49
00:03:41,320 --> 00:03:48,400
I will remain parameter to be message and I will call super with this message.

50
00:03:49,330 --> 00:03:57,400
So now I have a custom exception that I'm throwing from the create user method if user was not successfully

51
00:03:57,400 --> 00:03:57,940
created.

52
00:03:58,450 --> 00:03:58,810
Okay.

53
00:03:58,810 --> 00:04:02,230
So our create user mentored now has a dependency.

54
00:04:02,230 --> 00:04:04,780
It depends on user repository object.

55
00:04:05,140 --> 00:04:12,190
We can now continue and use my to to create a more complete of users repository and use that mock object

56
00:04:12,490 --> 00:04:14,230
instead of a real one.

57
00:04:14,560 --> 00:04:16,720
To test this create user method.

58
00:04:17,110 --> 00:04:17,860
Let's continue.

