1
00:00:00,150 --> 00:00:05,640
In the following few lessons, he will learn how to write unit tests that accept input parameters.

2
00:00:06,120 --> 00:00:11,820
Notice that most of the units that we have written so far, they do not accept any input parameters.

3
00:00:12,240 --> 00:00:15,570
This test method does not accept any input parameters.

4
00:00:15,990 --> 00:00:23,070
This test method does not accept any input parameters and integer subtraction, and it also does not

5
00:00:23,070 --> 00:00:25,140
accept any input parameters.

6
00:00:25,590 --> 00:00:32,100
This is because we do not really invoke unit tests from our own code as we do it with regular Java methods.

7
00:00:32,340 --> 00:00:39,030
And we do not really parse input parameters to unit test methods as we do it with regular GI methods.

8
00:00:39,480 --> 00:00:46,350
But G unit does provide us with a way to invoke test method and make it accept input parameters.

9
00:00:46,740 --> 00:00:48,360
So let's see how it works.

10
00:00:48,630 --> 00:00:55,530
For this demonstration, I will use the integer subtraction method and in its current state this method

11
00:00:55,530 --> 00:00:58,920
will run only one time with a single pair of values.

12
00:00:59,280 --> 00:01:06,390
We have defined menu and we have defined subtree and inside of this method as a local variables.

13
00:01:06,780 --> 00:01:13,950
And then we use these local variables as input parameters into our integer subtraction method, which

14
00:01:13,950 --> 00:01:15,540
is our method under the test.

15
00:01:16,230 --> 00:01:21,960
But we can make our unit around with more input parameter variations than this too.

16
00:01:22,290 --> 00:01:27,990
And to do that, we will need to change our test annotation to be parameter each test.

17
00:01:29,540 --> 00:01:30,110
Like this.

18
00:01:30,440 --> 00:01:36,740
It is still going to be a test method, but it now can accept parameters and to provide multiple different

19
00:01:36,740 --> 00:01:38,750
variations of input parameters.

20
00:01:38,930 --> 00:01:43,370
But we'll need to add in another annotation and it is called method source.

21
00:01:45,280 --> 00:01:51,010
And in the double quotes provide a name of the method that will be used to provide input arguments.

22
00:01:51,310 --> 00:01:55,540
Let's say this method will be called integer subtraction input parameters.

23
00:01:57,310 --> 00:02:01,180
And now I will need to create a method with this line.

24
00:02:01,510 --> 00:02:05,920
So I will copy its name and I will create a new method.

25
00:02:06,580 --> 00:02:12,160
Now, this method will need to be static and it will need to return a stream of arguments.

26
00:02:13,060 --> 00:02:14,200
I'll make it private.

27
00:02:16,470 --> 00:02:22,620
It will return a stream of arguments and it would need to be called integer subtraction parameters,

28
00:02:23,040 --> 00:02:26,880
just as we named it here in this method.

29
00:02:26,880 --> 00:02:28,020
Source annotation.

30
00:02:28,500 --> 00:02:30,720
Let's define the return value.

31
00:02:32,390 --> 00:02:39,860
And input stream from Java audio stream package and input arguments from work to unit.

32
00:02:39,860 --> 00:02:42,110
Jupyter params provided a package.

33
00:02:42,590 --> 00:02:50,120
Now let's think of arguments that we want our integer subtraction method this one to accept.

34
00:02:50,420 --> 00:02:57,110
We want it to accept monument and we wanted to accept settlement and to be able to compare expected

35
00:02:57,110 --> 00:02:58,820
result with the actual result.

36
00:02:59,120 --> 00:03:02,450
We also wanted to accept the expected result value.

37
00:03:02,780 --> 00:03:05,170
So I will define this as method arguments.

38
00:03:05,540 --> 00:03:07,130
I will define monument.

39
00:03:08,560 --> 00:03:10,090
I will define settlement.

40
00:03:11,590 --> 00:03:13,840
And I will define expected result.

41
00:03:15,670 --> 00:03:20,620
And now I can provide these arguments in the return value of my stream.

42
00:03:22,390 --> 00:03:23,380
33.

43
00:03:23,650 --> 00:03:31,660
As imminent as the first mental argument, then one as second method argument, which is going to be

44
00:03:31,660 --> 00:03:39,700
my set hand, and then expect that the result which is going to be 32 and it is a third argument that

45
00:03:39,700 --> 00:03:42,010
my integer subtraction method accepts.

46
00:03:42,520 --> 00:03:50,050
And now because I do have menu and subtract an expected result defined as method arguments here I can

47
00:03:50,200 --> 00:03:53,500
delete these local warren and from my method.

48
00:03:53,860 --> 00:03:57,220
All right, so let's add a few more arguments.

49
00:03:57,520 --> 00:04:02,680
I will copy and paste this line as a second list of arguments I will provide.

50
00:04:03,370 --> 00:04:08,350
I'd say 24 takeaway one will be 23.

51
00:04:08,710 --> 00:04:15,550
And then one more least of arguments like, for example, 54 and then take away one, it will be equal

52
00:04:15,550 --> 00:04:16,540
to 53.

53
00:04:17,290 --> 00:04:19,810
Whoops, I have actually changed an existing list.

54
00:04:20,079 --> 00:04:21,010
Let's add one more.

55
00:04:21,430 --> 00:04:31,510
This one is going to be 24 as mentioned, one as separate and and then 23 as expected result like this.

56
00:04:31,570 --> 00:04:31,890
All right.

57
00:04:32,170 --> 00:04:38,980
So now if I run this this method, it will run three times each time with a different set of arguments.

58
00:04:39,220 --> 00:04:46,240
First time with this set of arguments, second time with this set of arguments and third time with this

59
00:04:46,240 --> 00:04:47,050
set of arguments.

60
00:04:47,680 --> 00:04:53,440
But before I do, I will have to do this planning of this method, because currently the display name

61
00:04:53,440 --> 00:04:59,890
mentions only one set of parameters with I'm using it with multiple different parameters, so I will

62
00:04:59,890 --> 00:05:02,450
rename it to be something like this.

63
00:05:02,530 --> 00:05:03,760
Integer subtraction.

64
00:05:05,330 --> 00:05:09,440
And then maybe in brackets I will provide menu and.

65
00:05:10,560 --> 00:05:14,700
Sceptre hand and then expected result.

66
00:05:15,000 --> 00:05:15,780
Something like this.

67
00:05:16,170 --> 00:05:16,520
All right.

68
00:05:16,530 --> 00:05:18,000
And now I can run it.

69
00:05:18,030 --> 00:05:21,900
So I will click on the run button which is next to test meant that name.

70
00:05:22,940 --> 00:05:28,920
And now I have the same method executed three times and all have successfully passed mount.

71
00:05:29,060 --> 00:05:36,110
Notice that in the methods or sanitation we have included the name of the method that is being used

72
00:05:36,110 --> 00:05:37,970
as a source of input parameters.

73
00:05:38,480 --> 00:05:44,720
If the name of this method is exactly the same as a test method name to use, it allows us to remove

74
00:05:44,720 --> 00:05:47,210
this name from a method source annotation.

75
00:05:47,870 --> 00:05:56,090
So what I can do, I can delete this name from here, and then I can rename the method source to be

76
00:05:56,090 --> 00:05:58,640
exactly integer subtraction.

77
00:05:59,000 --> 00:06:05,330
So I will rename this myth here to be the same as my G Union test name.

78
00:06:05,660 --> 00:06:11,870
So when these two are the same, two unique knows that they work together and my test method will still

79
00:06:11,870 --> 00:06:12,200
work.

80
00:06:12,470 --> 00:06:13,310
So let's try.

81
00:06:13,310 --> 00:06:17,540
I will save changes and I will run my test method one more time.

82
00:06:20,300 --> 00:06:21,260
And it still works.

83
00:06:21,800 --> 00:06:27,620
And maybe as a final change, I will change this line because currently the heart codes, the values

84
00:06:27,620 --> 00:06:27,890
here.

85
00:06:28,310 --> 00:06:37,460
So I will change 3 to 3 to be admitted argument instead and then take away scepter hand and equals to

86
00:06:37,460 --> 00:06:38,630
expected result.

87
00:06:39,760 --> 00:06:40,330
Like this.

88
00:06:40,660 --> 00:06:44,070
And now if I run it, it should make more sense.

89
00:06:44,080 --> 00:06:48,400
So I'll save changes, and I will run my test method one more time.

90
00:06:49,830 --> 00:06:52,920
Now I have a first iteration with 33.

91
00:06:52,930 --> 00:07:02,310
Take away 1/2 iteration with 54, take a11 and then throw iteration with 24, take away one.

92
00:07:02,910 --> 00:07:09,060
Now I do use System.out.println in my unit test method, but this is just for demonstration purposes.

93
00:07:09,390 --> 00:07:15,570
Usually we do not print anything in the test method, or if we do print something then it should be

94
00:07:15,570 --> 00:07:22,320
temporary and we should not rely on the information that we print using System.out.println in our test

95
00:07:22,320 --> 00:07:22,650
method.

96
00:07:22,890 --> 00:07:23,190
All right.

97
00:07:23,190 --> 00:07:29,430
So this was example of a method that accepts multiple variations of input parameters, and it was pretty

98
00:07:29,430 --> 00:07:29,940
advanced.

99
00:07:30,360 --> 00:07:35,130
Now, there's another way how we can do the same, but by using a different annotation.

100
00:07:35,370 --> 00:07:37,650
Let's have a look at what works in the following lesson.

