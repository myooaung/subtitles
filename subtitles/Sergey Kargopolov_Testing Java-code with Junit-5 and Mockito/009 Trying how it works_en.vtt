WEBVTT
1
00:00:00.450 --> 00:00:04.970
In this lesson, we're going to try how our create user integration test works.

2
00:00:04.980 --> 00:00:09.600
And before I execute this test method, I'll set a couple of debugger breakpoints.

3
00:00:09.690 --> 00:00:14.010
So I'll go back to my project and one debug breakpoint.

4
00:00:14.010 --> 00:00:21.750
I will set in the controller class right inside of the create user method, maybe on the line that invokes

5
00:00:21.750 --> 00:00:25.740
the creative, the method in the surface class and another breakpoint.

6
00:00:25.740 --> 00:00:31.860
I will set in the create user method of the service class, so I will go there.

7
00:00:31.860 --> 00:00:39.300
This is my user service implementation and I will set a debugger breakpoint right on the line that performs

8
00:00:39.540 --> 00:00:42.090
safe operation on Users Repository.

9
00:00:42.090 --> 00:00:45.900
This is where a user entity is persistent into a database.

10
00:00:45.900 --> 00:00:52.620
And if this debugger breakpoint triggers, then I know that the service code has been executed and user

11
00:00:52.620 --> 00:00:55.590
details will be persisted in the database table.

12
00:00:55.680 --> 00:01:01.380
Now, in the following lessons, we will create another test method that will test if we can read from

13
00:01:01.380 --> 00:01:02.820
a database table as well.

14
00:01:03.120 --> 00:01:09.150
But for now, seeing this debugger breakpoint trigger will tell us that this is no longer a unique test

15
00:01:09.150 --> 00:01:15.780
of a single method in the controller class and that the code in all layers of our application is also

16
00:01:15.780 --> 00:01:16.440
executed.

17
00:01:16.440 --> 00:01:22.170
All right, so now let's go back to our test method and run this test method.

18
00:01:22.170 --> 00:01:26.280
So we'll scroll up and we'll run it in a debug mode.

19
00:01:26.280 --> 00:01:31.560
So I will click on the play button here and I will choose and debug this test method.

20
00:01:34.850 --> 00:01:40.970
And here's my debugger breakpoint, which is in the controller class, create user method, which is

21
00:01:40.970 --> 00:01:42.590
in the user controller class.

22
00:01:42.770 --> 00:01:44.070
So this worked.

23
00:01:44.090 --> 00:01:46.010
Let's resume debugging.

24
00:01:47.600 --> 00:01:55.130
And the next debugger breakpoint is in the creators and method, which is in the user service implementation

25
00:01:55.130 --> 00:01:55.430
class.

26
00:01:55.430 --> 00:02:02.120
So this is our service layer and debugger breakpoint is right on the line where user details are about

27
00:02:02.120 --> 00:02:04.370
to be persisted to a database.

28
00:02:04.370 --> 00:02:06.140
So this also works.

29
00:02:06.350 --> 00:02:13.820
Now, if I step over one line, then user details should be persisted and this stored details object

30
00:02:13.820 --> 00:02:19.910
will contain information about user that was stored in the database table.

31
00:02:19.940 --> 00:02:24.620
Now if I resume debugging, hopefully my test method should pass.

32
00:02:24.620 --> 00:02:31.370
So I will go back to a console and here I have results of my test method which is successful.

33
00:02:31.610 --> 00:02:37.430
All right, so test method has passed and this means that our API end point did return you the details

34
00:02:37.430 --> 00:02:45.260
and that this utility tells do matches the details that were submitted in the original HTTP post request.

35
00:02:46.300 --> 00:02:47.020
Here.

36
00:02:47.620 --> 00:02:50.320
All right, so everything works, and we're good to continue.

