WEBVTT
1
00:00:00.430 --> 00:00:06.850
In this lesson, you will learn how to initialize mock objects with Mikita and how to inject mock objects

2
00:00:06.850 --> 00:00:09.640
as dependencies to our class under test.

3
00:00:10.060 --> 00:00:15.520
Now, before we can use Mikita in our test class, we will need to annotate our class with a special

4
00:00:15.520 --> 00:00:16.210
annotation.

5
00:00:16.630 --> 00:00:23.380
I will go to a user service test and above the class I will add one annotation.

6
00:00:23.740 --> 00:00:31.090
It is called extent width and in the brackets will specify Makita extension class.

7
00:00:31.870 --> 00:00:35.050
This will enable us use Mikita annotations in this class.

8
00:00:35.530 --> 00:00:37.870
Now our use here is implementation.

9
00:00:37.870 --> 00:00:41.770
Class expects a dependency which is a user repository.

10
00:00:41.800 --> 00:00:46.630
Here we will use Blanket to mock the behavior of users repository.

11
00:00:46.900 --> 00:00:49.300
But first we will need to create a more content.

12
00:00:49.630 --> 00:00:55.360
And to do that, I will define a new instance variable, maybe next to user service.

13
00:00:55.630 --> 00:00:57.880
And this will be users repository.

14
00:00:59.520 --> 00:01:04.410
Like this because we want my kid to create a mock object that implements this interface.

15
00:01:04.709 --> 00:01:09.480
Well, we'll need to annotate this instance fundable with mock annotation.

16
00:01:10.170 --> 00:01:10.500
Okay.

17
00:01:10.510 --> 00:01:15.990
So because we have annotated this member variable with more connotation, Marketo will automatically

18
00:01:15.990 --> 00:01:20.640
create a mock object to implement this a user repository interface.

19
00:01:20.910 --> 00:01:27.300
And now we can inject this user's repository object into our user service implementation object.

20
00:01:27.660 --> 00:01:33.930
Now, in this code example, we create an instance of our service class manually, but we can also let

21
00:01:33.930 --> 00:01:42.000
Mike to create a new instance of Sarah's class for us and inject the user's repository into this object

22
00:01:42.000 --> 00:01:43.500
automatically for us.

23
00:01:43.710 --> 00:01:49.830
And to do that, we will need to annotate user service property with another annotation that is called

24
00:01:49.830 --> 00:01:50.850
Inject Mock.

25
00:01:52.020 --> 00:01:58.410
We will also need to change data type of our user service from interface to a class that implements

26
00:01:58.410 --> 00:01:59.280
this interface.

27
00:01:59.400 --> 00:02:04.830
So instead of user service, we will need to change it to use the service implementation.

28
00:02:05.550 --> 00:02:11.700
And this will make my key to create a new instance of users here, its implementation clause, and inject

29
00:02:11.700 --> 00:02:15.360
an object of users repository into service class for us.

30
00:02:15.780 --> 00:02:16.170
Okay.

31
00:02:16.590 --> 00:02:23.460
So now I will scroll down and will delete this code where I create a new instance of user service cost

32
00:02:23.610 --> 00:02:24.270
manually.

33
00:02:24.660 --> 00:02:25.000
All right.

34
00:02:25.290 --> 00:02:32.910
So we have created user repository mock object and we have configured Kita to inject it into our user

35
00:02:32.910 --> 00:02:33.690
series object.

36
00:02:33.930 --> 00:02:40.380
But we still need to mould the behavior of the safe method that is provided by users repository interface.

37
00:02:40.620 --> 00:02:42.120
Let's do it in the following lesson.

