WEBVTT
1
00:00:00.390 --> 00:00:03.450
Assert equals is not the only assertion we can use.

2
00:00:03.600 --> 00:00:05.520
There can be other assertions as well.

3
00:00:05.550 --> 00:00:13.170
For example, the fail assertion that we have used earlier is also an assertion and this one is called

4
00:00:13.410 --> 00:00:15.390
conditional fail assertion.

5
00:00:15.690 --> 00:00:22.680
It unconditionally or intentionally fails test method without checking for any conditions and there

6
00:00:22.680 --> 00:00:24.840
are other assertions as well.

7
00:00:25.170 --> 00:00:32.159
This assertions are actually static methods that come from Jupyter API package, assertion class and

8
00:00:32.159 --> 00:00:37.470
I have imported them using the input statement here, imprint static.

9
00:00:37.800 --> 00:00:44.910
And then I have used star symbol to input all assertions from the assertions class.

10
00:00:45.180 --> 00:00:52.260
But if I remove this star symbol and look into this class, I'll see that there are many different overloaded

11
00:00:52.260 --> 00:00:54.750
versions of assert equals.

12
00:00:54.750 --> 00:01:01.200
For example, each version accepts different types of input parameters, and if I scroll down, I'll

13
00:01:01.200 --> 00:01:06.210
see many other assertions that I can use in this test method as well.

14
00:01:07.400 --> 00:01:12.230
And I can type the name of assertion to filter this list a little bit.

15
00:01:12.350 --> 00:01:18.470
For example, in this test method we have used assert equals, but there's also an opposite assertion

16
00:01:18.470 --> 00:01:21.230
that is called assert not equals.

17
00:01:21.620 --> 00:01:27.410
This assertion will help you verify if the two provided parameter values are not equal.

18
00:01:27.830 --> 00:01:34.250
If the are equal, then this test method will fail because this assertion will throw an exception.

19
00:01:34.460 --> 00:01:36.710
And there are other assertions as well.

20
00:01:37.010 --> 00:01:43.460
For example, there is an assertion that is called assert true and this assertion will help you validate

21
00:01:43.460 --> 00:01:46.280
if the provided value is true or false.

22
00:01:46.370 --> 00:01:48.860
If that is true, then the unit test will pass.

23
00:01:49.040 --> 00:01:53.630
Otherwise this assertion will throw an exception and unit test will fail.

24
00:01:53.960 --> 00:02:03.050
And there is also an assertion that is called assert false or assert now for example, and assert not

25
00:02:03.530 --> 00:02:11.150
now, for example, to validate if the object that method under test has returned is not now.

26
00:02:11.390 --> 00:02:17.450
And there is also a assertion that helps us to check if the method under test has thrown an expected

27
00:02:17.450 --> 00:02:21.770
exception and that assertion is called assert throws.

28
00:02:22.340 --> 00:02:27.890
Or if we want to validate that our method does not throw an exception, then we will use.

29
00:02:28.190 --> 00:02:30.380
Assert does not throw.

30
00:02:31.320 --> 00:02:31.650
All right.

31
00:02:31.650 --> 00:02:35.820
So currently our class interprets all of this assertions.

32
00:02:35.850 --> 00:02:38.640
Using Asterix or Star Symbol.

33
00:02:38.970 --> 00:02:46.740
And we can use this assertions to validate the result that our method under test has returned and make

34
00:02:46.740 --> 00:02:50.070
a decision whether this unit test should pass or fail.

35
00:02:50.460 --> 00:02:55.830
You will see how many of these assertions work as we create more tests in this video course.

36
00:02:56.190 --> 00:02:56.460
Right.

37
00:02:56.460 --> 00:02:58.590
So let's continue to the next lesson.

