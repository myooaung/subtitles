1
00:00:00,420 --> 00:00:06,330
In this lesson, I will give you a brief overview of the new units that they have added to my calculator

2
00:00:06,330 --> 00:00:06,689
class.

3
00:00:07,230 --> 00:00:12,780
So the new unit test method that I have just added is called integer subtraction.

4
00:00:13,080 --> 00:00:16,710
And this method is annotated with test annotation.

5
00:00:17,250 --> 00:00:25,620
Inside of this method, I first create an instance of calculator class and then I use an object of calculator

6
00:00:25,620 --> 00:00:31,140
class to invoke the integer subtraction method, which is my method.

7
00:00:31,170 --> 00:00:40,050
Under test, I'm testing integer subtraction method and I give it to parameters and value of 33 and

8
00:00:40,230 --> 00:00:48,090
after hand with value of one, one will be subtracted from 33 and the difference will be assigned to

9
00:00:48,390 --> 00:00:49,140
a result.

10
00:00:49,230 --> 00:00:50,070
Local learnable.

11
00:00:50,760 --> 00:00:55,240
All right, so the integer subtraction method is my method under test.

12
00:00:55,260 --> 00:01:00,480
It is this method that I'm testing with this unique test, and I want to make sure that this method

13
00:01:00,480 --> 00:01:03,690
works well and that it returns an expected result.

14
00:01:04,140 --> 00:01:07,410
So when one is taken away from 33.

15
00:01:07,710 --> 00:01:10,590
I expect the result to be 32.

16
00:01:10,980 --> 00:01:18,600
And to validate this, I use assert equals assertion to check if the result which is an actual value.

17
00:01:18,720 --> 00:01:23,940
Second input parameter is equal to 32, which is expected result.

18
00:01:24,450 --> 00:01:24,780
All right.

19
00:01:25,080 --> 00:01:33,660
And if I go into integer subtraction method here, I have a very simple business logic where I simply

20
00:01:33,660 --> 00:01:35,760
subtract one value from another.

21
00:01:36,270 --> 00:01:38,640
So the logic is very, very simple.

22
00:01:38,910 --> 00:01:45,150
But when writing unit test, I should not really worry how complex the business logic is inside of this

23
00:01:45,240 --> 00:01:46,440
method under test.

24
00:01:46,860 --> 00:01:51,780
Method under test can have long and complex code, but that should not worry me much.

25
00:01:51,930 --> 00:01:58,830
All I care about is that this method that I'm testing returns an expected result for providing the input

26
00:01:58,830 --> 00:01:59,400
parameters.

27
00:01:59,850 --> 00:02:03,000
All right, so let's run this unit test and see if it works.

28
00:02:03,330 --> 00:02:10,440
I will click on a run button, which is next to the method name and we'll choose a run integer subtraction

29
00:02:10,440 --> 00:02:10,710
method.

30
00:02:12,670 --> 00:02:13,540
And it passed.

31
00:02:14,230 --> 00:02:21,520
Now, when testing our integer subtraction method or when testing integer division method or when this

32
00:02:21,520 --> 00:02:28,240
than any other method under test, we should test it with both valid and invalid input parameters.

33
00:02:28,660 --> 00:02:35,290
We should think of all the possible input values that can make our method under test break or produce

34
00:02:35,290 --> 00:02:36,550
unexpected results.

35
00:02:37,180 --> 00:02:38,080
Will it still work?

36
00:02:38,080 --> 00:02:42,700
For example, if I give it values that are too large or values that are too small?

37
00:02:43,000 --> 00:02:45,070
If input parameters are strings.

38
00:02:45,310 --> 00:02:50,140
Then will it work if the string value is too short or if it is too long?

39
00:02:50,620 --> 00:02:55,750
If the input parameter is an object, then will my method under test still work?

40
00:02:55,900 --> 00:03:02,500
If I give it now instead of a real object and for each different, each case that can potentially make

41
00:03:02,500 --> 00:03:05,950
my method under test would return unexpected result.

42
00:03:06,130 --> 00:03:12,190
I should create a separate unit test method and this means that they can have several different test

43
00:03:12,190 --> 00:03:18,550
methods, each testing the same method under test, but with different input parameters.

44
00:03:19,250 --> 00:03:19,650
All right.

45
00:03:19,690 --> 00:03:23,650
So we will add a couple of more unique methods here a bit later.

46
00:03:23,920 --> 00:03:26,260
But for now, let's continue the next lecture.

