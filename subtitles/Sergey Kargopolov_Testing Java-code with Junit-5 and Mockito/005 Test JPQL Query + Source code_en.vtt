WEBVTT
1
00:00:00.330 --> 00:00:06.930
And this is how we are going to test if the HPCL query that we have in the GPA repository works well.

2
00:00:07.020 --> 00:00:10.260
So let's open up repository for a moment.

3
00:00:10.380 --> 00:00:17.430
I will go to my users repository and here I have a method that is called find users with email and in

4
00:00:17.430 --> 00:00:23.250
width and it uses GPC query that is defined above the method.

5
00:00:23.610 --> 00:00:27.370
Now because this method has a query defined above it.

6
00:00:27.390 --> 00:00:35.340
The method name does not need to be exactly find users with email ending with it doesn't need to follow

7
00:00:35.340 --> 00:00:38.540
this pattern that we use to create query methods.

8
00:00:38.550 --> 00:00:41.130
And you can give this method any name you like.

9
00:00:41.460 --> 00:00:48.000
All right, so let's write the test method that will test this method that uses a query above.

10
00:00:48.570 --> 00:00:52.830
And I will go back to my test course and we'll create a new test method.

11
00:01:00.790 --> 00:01:05.860
So we're going to test find users with email and with method for a condition.

12
00:01:05.860 --> 00:01:13.240
When it's given email domain, then it should return all users that use this given domain name and I

13
00:01:13.240 --> 00:01:16.000
will create a range act and assert sections.

14
00:01:17.680 --> 00:01:24.070
And by the time this test method executes, our database table will already have two users recorded.

15
00:01:24.100 --> 00:01:31.600
This is because in the setup method that is annotated with before each annotation, we create and persist

16
00:01:31.600 --> 00:01:32.620
to users.

17
00:01:32.650 --> 00:01:38.930
Now both of these users have email address that ends with test dotcom.

18
00:01:38.980 --> 00:01:43.810
And to make my test method more accurate, I will persist one more user.

19
00:01:43.810 --> 00:01:47.790
But I will do it in the range section of my new test method.

20
00:01:47.800 --> 00:01:50.560
So I'll first prepare a new user entity.

21
00:01:53.220 --> 00:01:55.800
And we'll populated with some sample data.

22
00:02:00.760 --> 00:02:01.120
Has.

23
00:02:01.150 --> 00:02:01.900
Email address.

24
00:02:01.900 --> 00:02:06.520
I will use a different email address that ends with gmail.com.

25
00:02:13.550 --> 00:02:17.180
Something like this and I will persist this new user.

26
00:02:19.190 --> 00:02:23.630
Next, I will define a variable that will hold the target email domain name.

27
00:02:23.870 --> 00:02:33.560
For example, string call it email domain name and the value will be at gmail.com.

28
00:02:33.560 --> 00:02:36.470
So this is my target email domain name.

29
00:02:36.740 --> 00:02:44.540
And now in the ACT section, I will invoke my method under test and I will use this domain name to query

30
00:02:44.540 --> 00:02:47.450
for users that use this email address.

31
00:02:47.450 --> 00:02:54.440
So I will use user repository and I will call my method under test, which is find users with email,

32
00:02:54.440 --> 00:02:59.900
address and in width and I will use email domain name as a method parameter.

33
00:02:59.900 --> 00:03:03.890
If everything is okay, this will return me a list of users.

34
00:03:05.480 --> 00:03:08.240
And I will call this list just users.

35
00:03:08.270 --> 00:03:09.860
Let's impact list.

36
00:03:10.840 --> 00:03:14.590
And in the assert section I will validate this result.

37
00:03:14.590 --> 00:03:22.570
So because I have persisted only one user that uses gmail dot com, I expect there to be only one user

38
00:03:22.570 --> 00:03:26.890
in the list, so I will validate it with the following assertion.

39
00:03:27.780 --> 00:03:36.180
I will use assert equals as expected value, I will use just one and actual value is the size of my

40
00:03:36.210 --> 00:03:38.640
users list like this.

41
00:03:38.640 --> 00:03:45.420
And if these two values are not equal, I will display a message, something like there should be only

42
00:03:45.420 --> 00:03:47.100
one user in the list.

43
00:03:49.070 --> 00:03:55.820
And with the next assertion, I will check if the user that is in the list does indeed use email address

44
00:03:55.820 --> 00:03:58.430
that ends with the target domain name.

45
00:03:59.900 --> 00:04:08.030
And to do that I will use a third through and I will first get user from the users list and now I will

46
00:04:08.030 --> 00:04:15.170
get their email address and now I will check if this email address ends with the target email domain

47
00:04:15.170 --> 00:04:16.970
name like this.

48
00:04:17.550 --> 00:04:17.940
Okay.

49
00:04:17.990 --> 00:04:22.160
So now I think we are ready to run this test method and see if it works.

50
00:04:22.280 --> 00:04:23.420
Let's try.

51
00:04:27.040 --> 00:04:28.330
And it passes.

52
00:04:28.360 --> 00:04:30.310
Now let's try failing it.

53
00:04:30.340 --> 00:04:33.880
I will change the value of target domain name.

54
00:04:33.880 --> 00:04:39.980
So we have a user in a database that uses email address with gmail.com.

55
00:04:40.000 --> 00:04:44.770
I will try searching for a user that uses live dot com.

56
00:04:44.800 --> 00:04:46.360
Let's see if it works.

57
00:04:48.970 --> 00:04:52.030
And it fails because it didn't find any users.

58
00:04:52.030 --> 00:04:58.720
And the error message that there should be only one user and the least expected value one, but the

59
00:04:58.720 --> 00:05:02.350
actual value is zero users that were found.

60
00:05:02.380 --> 00:05:05.520
Now let's try using domain names that we have.

61
00:05:05.530 --> 00:05:10.030
We have two users with domain name add test dot com.

62
00:05:11.140 --> 00:05:13.720
Let's see if our test method passes now.

63
00:05:15.480 --> 00:05:19.270
And it fails again because we have two users in the list.

64
00:05:19.290 --> 00:05:21.570
There should be only one user in the list.

65
00:05:22.050 --> 00:05:27.870
The expected result is one, but the actual number of users that were found is two, which is correct.

66
00:05:27.870 --> 00:05:32.220
We have two users with email address that ends with dot com.

67
00:05:32.220 --> 00:05:34.200
So let's make it pass again.

68
00:05:34.200 --> 00:05:40.260
I will change this dot com to gmail.com and run my test one more time.

69
00:05:42.370 --> 00:05:49.690
And it passes, which tells me that the query that I have provided above the method name does work and

70
00:05:49.690 --> 00:05:52.150
it does return correct number of users.

