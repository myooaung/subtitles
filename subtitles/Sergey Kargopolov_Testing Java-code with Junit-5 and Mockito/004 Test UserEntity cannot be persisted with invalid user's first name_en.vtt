WEBVTT
1
00:00:00.210 --> 00:00:06.080
In this lesson we will test if we can persist user entity with an invalid information.

2
00:00:06.090 --> 00:00:08.910
And to do that I will create a new test method.

3
00:00:11.650 --> 00:00:17.050
Let's test the user entity for a use case when first name is invalid, for example.

4
00:00:17.080 --> 00:00:20.530
So I will continue when the first name is too long.

5
00:00:22.540 --> 00:00:28.120
When the value of users first name is to loan, then we expect back an exception to be thrown.

6
00:00:28.120 --> 00:00:34.540
And this is because our database column cannot store value longer than the value we have configured

7
00:00:34.540 --> 00:00:35.880
in an entity class.

8
00:00:35.890 --> 00:00:39.010
So it should throw an exception.

9
00:00:40.900 --> 00:00:42.280
Like this we're testing.

10
00:00:42.310 --> 00:00:44.940
User entity one first name is stolen.

11
00:00:44.950 --> 00:00:50.980
Then it should throw an exemption message and I will add arrange act insert sections.

12
00:00:53.100 --> 00:00:55.950
In that range section, I'll need to prepare user details.

13
00:00:55.950 --> 00:01:02.660
And because this year's details are going to be almost exactly the same as in my previous test method,

14
00:01:02.670 --> 00:01:07.170
I will simply move them to a before each lifecycle method.

15
00:01:07.170 --> 00:01:11.520
So above my first test method I will create before each method.

16
00:01:12.850 --> 00:01:21.340
I will call it set up and I will move this user entity to this setup method.

17
00:01:26.010 --> 00:01:30.720
Like this, and in the arranged section of my new test method.

18
00:01:30.720 --> 00:01:37.770
Now we need to provide an invalid value for users first name and this value will need to be longer than

19
00:01:37.770 --> 00:01:38.940
the allowed value.

20
00:01:38.970 --> 00:01:41.890
Let's have a look at what is the allowed value.

21
00:01:41.910 --> 00:01:49.260
I will go back to user entity class and here's my users first name and the maximum length that the users

22
00:01:49.260 --> 00:01:53.760
first name Colon can have is 50 characters alone.

23
00:01:53.760 --> 00:02:00.180
This is a pretty long first name and I actually don't think that someone in the world does have a first

24
00:02:00.180 --> 00:02:01.680
name longer than this.

25
00:02:01.680 --> 00:02:04.920
But anyways, let's try 50 characters.

26
00:02:05.130 --> 00:02:11.250
So in my test method I'll need to provide a first name that is longer than 50 characters.

27
00:02:11.910 --> 00:02:18.810
I will refer to user entity and I will set users first name to something longer than 50 characters.

28
00:02:20.780 --> 00:02:22.070
Something like this.

29
00:02:22.370 --> 00:02:26.300
And in the ACT section, I can persist this entity.

30
00:02:26.630 --> 00:02:34.490
So I will use my test entity manager and I will call persist and flash method providing user entity

31
00:02:34.490 --> 00:02:35.690
as a parameter.

32
00:02:35.870 --> 00:02:42.290
And now I can assert that if we try to persist user object with the user's first name, that is very

33
00:02:42.290 --> 00:02:44.390
long, we will get back an exception.

34
00:02:44.390 --> 00:02:49.730
So this is going to be assert and act and I will use assertions.

35
00:02:50.710 --> 00:02:57.190
I said throws the data type of the exception that I will expect back will be persistence exception.

36
00:03:00.720 --> 00:03:05.340
And from inside of her throws, I can invoke my method under test.

37
00:03:06.170 --> 00:03:11.660
So I will cut this part, paste it here and delete section.

38
00:03:12.050 --> 00:03:12.680
All right.

39
00:03:12.680 --> 00:03:15.980
And if expected, exception does not take place.

40
00:03:15.980 --> 00:03:19.280
I will display an error message in the console.

41
00:03:19.280 --> 00:03:23.000
Something like was expecting persistent exception to be thrown.

42
00:03:26.160 --> 00:03:27.210
Something like this.

43
00:03:27.240 --> 00:03:31.530
All right, so now let's try running this test method and see if it works.

44
00:03:36.210 --> 00:03:37.170
And it passes.

45
00:03:37.170 --> 00:03:41.820
And this confirms that this test method did through a persistence exception.

46
00:03:41.850 --> 00:03:44.640
Now let's try running all test methods in this class.

47
00:03:44.640 --> 00:03:51.060
I will scroll up and we'll run both test methods and both of them should pass.

48
00:03:51.570 --> 00:03:52.510
And here we go.

49
00:03:52.530 --> 00:03:59.550
Both test methods are passing one test method with valid user details and one test method with invalid

50
00:03:59.550 --> 00:03:59.910
users.

51
00:03:59.910 --> 00:04:02.100
First name both of them pass.

52
00:04:02.100 --> 00:04:06.570
All right, so it all works and we're good to continue to the next lesson.

