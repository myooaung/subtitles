WEBVTT
1
00:00:00.240 --> 00:00:05.190
There might be a time when even though you have mocked an object, you still want to call a real method

2
00:00:05.190 --> 00:00:05.490
on it.

3
00:00:05.939 --> 00:00:11.250
Generally, you will always be able to step methods of your own mock object, especially when testing

4
00:00:11.250 --> 00:00:13.020
your own well-designed code.

5
00:00:13.560 --> 00:00:20.370
But when working with old and legacy code, or when testing code that needs complex refactoring, you

6
00:00:20.370 --> 00:00:23.520
might need to make liquidators call a real method instead.

7
00:00:24.060 --> 00:00:28.020
So in this video lesson, you will learn how to make Makita call a real method.

8
00:00:28.500 --> 00:00:31.890
And for this demonstration, create a simple demo method.

9
00:00:32.659 --> 00:00:36.030
I will scroll down below and will create a new test mounted.

10
00:00:38.900 --> 00:00:43.760
For example, one user created the scarjo email confirmation meant that this executed.

11
00:00:47.530 --> 00:00:48.930
Something like this and I will.

12
00:00:49.220 --> 00:00:49.750
This plane.

13
00:00:51.230 --> 00:00:54.380
For example, your email confirmation is executed.

14
00:00:57.790 --> 00:00:58.180
All right.

15
00:00:58.180 --> 00:01:02.770
And instead of a range section, I will first stab the submitted.

16
00:01:09.010 --> 00:01:11.920
And now I'm ready to execute my mandate on the test.

17
00:01:12.370 --> 00:01:18.100
But before I do, actually, I will tell my kids to call a real schedule email confirmation method.

18
00:01:18.430 --> 00:01:21.880
And to do that, I will use my key this do call real method.

19
00:01:22.210 --> 00:01:29.980
So it starts with to call real method dot when inside of when we will need to provide a mock object.

20
00:01:29.980 --> 00:01:35.800
In our case it is email verification service and then we will provide the method that we want to execute,

21
00:01:36.100 --> 00:01:38.680
which is key to email confirmation method.

22
00:01:39.310 --> 00:01:43.270
I'll put it on a new line and will provide a parameter using my key.

23
00:01:43.270 --> 00:01:44.800
This argument matcher.

24
00:01:46.350 --> 00:01:46.860
Like this.

25
00:01:47.640 --> 00:01:56.010
So when we invoke Scarjo email confirmation on email verification, we want my kid to call a real method.

26
00:01:56.460 --> 00:01:59.010
Now I will invoke method and the test.

27
00:02:00.450 --> 00:02:06.150
I will scroll up and will copy the line that invokes method and the test with the required parameters.

28
00:02:06.510 --> 00:02:13.920
And now I will assert that this key email confirmation method was called exactly one time when my method

29
00:02:13.920 --> 00:02:15.210
and the test executed.

30
00:02:23.140 --> 00:02:29.650
MENDES And now if I debug my application, I should see that even though the email verification service

31
00:02:30.100 --> 00:02:38.680
is a mock object, the real key email confirmation method is called When My Method The Test is executed.

32
00:02:39.010 --> 00:02:40.030
So let's try it.

33
00:02:40.060 --> 00:02:47.590
I will first go inside of Scarjo email confirmation method and I will put a debugger breakpoint inside.

34
00:02:48.130 --> 00:02:54.100
Now I will go back to my test method and I will run this test method in a department.

35
00:02:58.020 --> 00:03:02.130
My test method has successfully passed, but debugger breakpoint did not trigger.

36
00:03:02.580 --> 00:03:03.790
Let's see why.

37
00:03:03.810 --> 00:03:10.730
I will go inside of ski to email confirmation and I think I place debugger breakpoint on a wrong line.

38
00:03:10.740 --> 00:03:15.420
I will need to add System.out.println for it to be able to trigger.

39
00:03:15.780 --> 00:03:23.940
So for example, shiho email confirmation is called and I will put debugger breakpoint on this System.out.println

40
00:03:23.940 --> 00:03:26.280
line instead of on the common line.

41
00:03:26.610 --> 00:03:32.730
I'll save changes and we'll go back to my test method and run it again in debug mode.

42
00:03:35.330 --> 00:03:40.730
And now, mind you back a breakpoint, the trigger inside of your email confirmation method.

43
00:03:41.030 --> 00:03:46.430
And this proves that when key a deep call, a real method, a real implementation of this key, your

44
00:03:46.430 --> 00:03:47.720
email confirmation method.

45
00:03:48.320 --> 00:03:50.090
All right, so it all worked for us.

46
00:03:50.120 --> 00:03:51.320
Let's resume debugging.

47
00:03:51.950 --> 00:03:58.760
Go back to our test method and you now know how to make my kid a real method instead of stabbing it

48
00:03:59.000 --> 00:03:59.840
with predefined.

