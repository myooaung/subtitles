WEBVTT
1
00:00:00.510 --> 00:00:01.620
And the following lectures.

2
00:00:01.620 --> 00:00:07.860
I want us to start testing an existing springboard application that already has a few rest API points

3
00:00:07.860 --> 00:00:10.950
created and also Sprint Security enabled.

4
00:00:11.100 --> 00:00:16.890
The source code of this application is attached to this lecture and I'm going to use it in the following

5
00:00:16.890 --> 00:00:17.610
lectures.

6
00:00:17.610 --> 00:00:24.330
So before continuing to the next lecture, it would be good if you also download the same source code.

7
00:00:24.360 --> 00:00:30.030
Now in this lecture, I'll give you an overview of the application that we're going to start testing.

8
00:00:30.180 --> 00:00:36.030
So once you download the project that is attached to this lecture, open it in your development environment.

9
00:00:36.030 --> 00:00:43.080
As Maven project, I have it already opened in my intelligent ID and it is a Maven based springboard

10
00:00:43.080 --> 00:00:49.320
application and in this section we will start testing the rest controller and you will find this controller

11
00:00:49.320 --> 00:00:52.050
in source folder main java.

12
00:00:52.050 --> 00:00:56.850
And then if you expand G unit package, there will be a few more packages.

13
00:00:56.850 --> 00:00:59.820
The package that you're looking for is called UI.

14
00:00:59.910 --> 00:01:06.390
If you expand UI package, there will be controllers package and inside of controllers package they

15
00:01:06.390 --> 00:01:08.430
will be users controller.

16
00:01:09.590 --> 00:01:14.480
So this is a risk controller and it exposes a couple of API endpoints.

17
00:01:14.810 --> 00:01:16.120
It has two methods.

18
00:01:16.130 --> 00:01:23.930
One of them is annotated with post mapping, and it is used to create a new user and it has another

19
00:01:23.930 --> 00:01:29.570
method that is annotated with a git mapping and it is used to get a list of users.

20
00:01:29.600 --> 00:01:35.330
Now it is a very simple implementation, and if you see that this code does not have something that

21
00:01:35.330 --> 00:01:37.820
you usually implement, then it is fine.

22
00:01:37.850 --> 00:01:43.910
It is a simple code that will help us get started with our testing and if needed, you can change it

23
00:01:43.910 --> 00:01:45.980
and enhance this code as you wish.

24
00:01:46.010 --> 00:01:46.460
All right.

25
00:01:46.460 --> 00:01:50.510
So we'll start testing method that is called create user.

26
00:01:50.540 --> 00:01:58.430
This one, it is annotated with post mapping and it will be triggered when a HTTP post request is sent

27
00:01:58.430 --> 00:02:01.460
to forward slash users API endpoint.

28
00:02:01.490 --> 00:02:08.600
It will read payload from request body and it will convert the HTTP request body content into an object

29
00:02:08.600 --> 00:02:11.390
of user details, request, model and data type.

30
00:02:11.420 --> 00:02:18.080
Once we have this object, it will be passed to a create user method that is in a service class in the

31
00:02:18.090 --> 00:02:20.210
form of user data transfer object.

32
00:02:20.240 --> 00:02:23.060
Now let's open users service class.

33
00:02:23.330 --> 00:02:26.730
I will open interface and here I define a few methods.

34
00:02:26.750 --> 00:02:29.120
One of them is create user.

35
00:02:29.120 --> 00:02:30.530
So let's open it.

36
00:02:30.620 --> 00:02:34.730
So here's a class that is called user service implementation.

37
00:02:34.730 --> 00:02:41.060
In this class, I inject users repository using constructor based dependency injection.

38
00:02:41.060 --> 00:02:50.180
And then in the create user method, I use this users repository to save user details into a database.

39
00:02:50.180 --> 00:02:58.910
And before I store user details into a database, I generate new user ID, then I encrypt user password

40
00:02:58.910 --> 00:03:05.900
using this print security and then I store the entire user entity into a database using Sprint data

41
00:03:05.930 --> 00:03:07.670
HPA as a database.

42
00:03:07.670 --> 00:03:12.320
For this project, I use in memory each to database and for it to work.

43
00:03:12.320 --> 00:03:19.490
I have added a couple of dependencies to my XML file, so if I open some XML file and have a look at

44
00:03:19.490 --> 00:03:27.800
it, then here I have Sprint Boot, a web dependency and for each two database to work I have added

45
00:03:27.800 --> 00:03:33.380
H to database dependency and sprint boot starter data dependency.

46
00:03:33.530 --> 00:03:39.650
So these two dependencies are for database to work and to enable test in support for this project.

47
00:03:39.650 --> 00:03:42.470
I have also added a couple of dependencies.

48
00:03:42.470 --> 00:03:46.370
One of them is Sprint Boot Start a test dependency.

49
00:03:46.370 --> 00:03:53.240
And because this project uses Sprint security, I have also added sprint security test dependency.

50
00:03:54.200 --> 00:04:01.700
So at this moment this application does not have any test methods created except maybe the default one

51
00:04:01.820 --> 00:04:04.940
which gets added when you create Sprint Boot application.

52
00:04:05.030 --> 00:04:08.990
So let's go back to our test class.

53
00:04:08.990 --> 00:04:16.279
So here I have test folder and in test folder we have Java and then a root package and the only test

54
00:04:16.279 --> 00:04:16.850
class.

55
00:04:16.850 --> 00:04:23.210
Now I have disabled this test class so that it doesn't run, but if you create a new springboard application,

56
00:04:23.210 --> 00:04:29.810
you will have one test class created by default with a very simple test method that doesn't really do

57
00:04:29.810 --> 00:04:30.500
anything.

58
00:04:30.500 --> 00:04:34.610
So to disable this test, I have used disabled annotation.

59
00:04:34.790 --> 00:04:38.180
All right, so let's try running this application and see how it works.

60
00:04:38.180 --> 00:04:42.950
To do that, I will select its main class that is in the route package.

61
00:04:43.220 --> 00:04:47.570
If I open this class, it's called Users Service, Sprint Boot Application.

62
00:04:47.570 --> 00:04:54.290
It has public static void main and I can run it as a regular Java application.

63
00:04:54.320 --> 00:04:57.320
Now by default it will start on default.

64
00:04:57.320 --> 00:04:58.970
Port 88.

65
00:04:59.000 --> 00:05:07.250
My application is now up and running and if I look at the console, Tom got started on port 88, so

66
00:05:07.250 --> 00:05:13.610
now I should be able to open Postman and send the HTTP post request to create a new user.

67
00:05:13.610 --> 00:05:14.480
Let's try.

68
00:05:14.510 --> 00:05:16.460
I will bring in postman.

69
00:05:16.730 --> 00:05:22.070
I will start a new tab and this is going to be a HTTP post request.

70
00:05:22.310 --> 00:05:26.330
So from the dropdown menu I will select a HTTP method post.

71
00:05:26.330 --> 00:05:34.520
Again, I'm selecting post because the method in my controller class, this one that is called create

72
00:05:34.520 --> 00:05:38.210
user is annotated with post mapping annotation.

73
00:05:38.360 --> 00:05:41.150
So the method should be HTTP post.

74
00:05:41.150 --> 00:05:49.640
The request URL is going to be localhost because my tomcat is running on local host default port number

75
00:05:49.640 --> 00:05:58.430
88 because my application started on default port number 8080 and then forward slash users API endpoint

76
00:05:58.430 --> 00:06:05.600
because my controller risk controller is annotated with request mapping annotation and it defines a

77
00:06:05.600 --> 00:06:08.780
path forward slash users now.

78
00:06:09.010 --> 00:06:16.780
My creed use a method reads content of http request body and it converts it into this class user details

79
00:06:16.780 --> 00:06:17.590
request model.

80
00:06:17.590 --> 00:06:26.500
So if I look it up, the JSON payload that I will send in a HTTP request body will need to match the

81
00:06:26.500 --> 00:06:33.940
fields of this class so the field name in JS and payload will need to match field name in this class.

82
00:06:33.940 --> 00:06:40.330
So my JSON will need to have first name, last name, email password and repeat password fields.

83
00:06:40.360 --> 00:06:41.440
Let's add them.

84
00:06:41.440 --> 00:06:50.170
I'll go back to postman and from the top below here I will select Body to provide the body of this request.

85
00:06:50.170 --> 00:06:57.070
Then from this option below here I will select a row and then from the dropdown menu on the right here

86
00:06:57.070 --> 00:07:05.440
I will select JSON and now I can start typing my JSON document so it will need to have first name.

87
00:07:06.530 --> 00:07:07.460
Last name.

88
00:07:09.380 --> 00:07:10.130
Email.

89
00:07:11.110 --> 00:07:13.690
Let's go with test and test dot com.

90
00:07:14.380 --> 00:07:15.280
Password.

91
00:07:16.710 --> 00:07:18.290
And repeat password.

92
00:07:20.570 --> 00:07:20.750
Okay.

93
00:07:20.960 --> 00:07:25.490
So now I can try sending this HTTP post request on the right side.

94
00:07:25.490 --> 00:07:28.340
Here we have send button, so I will click on it.

95
00:07:29.570 --> 00:07:32.090
And I have successful HTTP response.

96
00:07:32.090 --> 00:07:39.500
The status code of this HTTP response is 200 OC and have details of the newly created user.

97
00:07:39.530 --> 00:07:45.740
Now, if I send this request with one of the required fields missing, for example, first name I will

98
00:07:45.740 --> 00:07:48.320
make empty and send it again.

99
00:07:48.320 --> 00:07:54.110
In response I should get back HTP Status Code 400 which stands for badge request.

100
00:07:54.140 --> 00:07:55.070
Let's try.

101
00:07:56.290 --> 00:07:58.180
And now I have a different response.

102
00:07:58.330 --> 00:08:03.310
HTTP status code is 400 by request and it looks like it is working well.

103
00:08:03.430 --> 00:08:03.790
All right.

104
00:08:03.790 --> 00:08:10.510
So let's continue and let's write a few test methods to test this API endpoint and the create user method.

