WEBVTT
1
00:00:00.760 --> 00:00:06.160
One of the main principles to follow when you need test animated is that we need to test this method

2
00:00:06.160 --> 00:00:08.410
in isolation from other dependencies.

3
00:00:09.010 --> 00:00:12.040
Let's have a look at a little diagram to understand what this means.

4
00:00:13.590 --> 00:00:19.080
Let's consider that we have a class with two methods and that we need to write unit tests for method

5
00:00:19.080 --> 00:00:23.370
E to test if this method works well and returns expected result.

6
00:00:23.820 --> 00:00:31.200
Our ideal scenario is that meant that E has a single responsibility and that this method is isolated

7
00:00:31.200 --> 00:00:33.240
from any other external classes.

8
00:00:33.660 --> 00:00:39.930
If it is isolated from external dependencies, then our unit test can easily create an instance of this

9
00:00:39.930 --> 00:00:43.920
cause and call its method to verify if it returns the expected result.

10
00:00:44.340 --> 00:00:46.400
But very often it's not the case.

11
00:00:46.650 --> 00:00:54.180
Often Method A creates an instance of another object, and to do its work method A needs to call one

12
00:00:54.180 --> 00:00:56.880
or two methods that belong to another object.

13
00:00:57.240 --> 00:01:03.060
And this complicates our testing very much, because if a failure takes place in the method that is

14
00:01:03.060 --> 00:01:06.540
in a different object, the unit test will also fail.

15
00:01:06.810 --> 00:01:14.160
And since our unit was test method E from Object A, we might mistakenly conclude that it is method

16
00:01:14.160 --> 00:01:20.790
E from object that is misbehaving while the actual error is taking place in a different method, in

17
00:01:20.790 --> 00:01:21.600
a different culture.

18
00:01:21.930 --> 00:01:26.340
So to avoid situations like this, we need to isolate the code we're testing.

19
00:01:27.000 --> 00:01:31.590
We create unit test to test business logic inside of method eight only.

20
00:01:31.800 --> 00:01:38.190
And since we're only interested in testing called the Method E, we need to find ways to isolate method

21
00:01:38.190 --> 00:01:43.470
E from other dependencies and tested in isolation from code in object B.

22
00:01:43.830 --> 00:01:45.030
Let's see how we can do it.

23
00:01:45.930 --> 00:01:49.650
To make our code better testable, we need to use dependency injection.

24
00:01:50.220 --> 00:01:57.540
Let's say we have an object e that depends on code into other objects b and C currently object e creates

25
00:01:57.540 --> 00:02:01.440
a new instance of class B and C in one of its methods.

26
00:02:01.830 --> 00:02:09.240
So instead of having Object E creating a new instance of Class B and C, we will need to lead this relationship

27
00:02:09.240 --> 00:02:17.430
around and inject into object e a ready to use object B and object C and this is called dependency injection.

28
00:02:17.910 --> 00:02:25.260
When dependencies are injected this way to isolate code in object A from code and object B and C, we

29
00:02:25.260 --> 00:02:31.800
can write unit test that injects into object A have fake or mock implementation of code in object B

30
00:02:31.800 --> 00:02:32.310
and C.

31
00:02:32.670 --> 00:02:39.630
This way we can test code in object in isolation, and this way we prevent situations when a back and

32
00:02:39.630 --> 00:02:47.250
code in object B fails, code in object E injecting mock implementation instead of real dependency helps

33
00:02:47.250 --> 00:02:52.470
us isolate code that we need to test and tested with different kinds of input values.

34
00:02:52.920 --> 00:02:59.310
If we need to test their method with a range of different input parameters, valid and invalid, we

35
00:02:59.310 --> 00:03:04.770
can create the unit test that works with mock implementations of those object or even simple stops that

36
00:03:04.770 --> 00:03:06.690
do not really do any business logic.

37
00:03:07.140 --> 00:03:11.790
You will learn how to create more computes and how to create stamps in the following video lessons.

38
00:03:11.970 --> 00:03:17.970
But for now, it's very important to understand that when our code under test has dependencies on other

39
00:03:17.970 --> 00:03:24.540
objects, we need to use dependency injection and inject mock implementations of the subjects so that

40
00:03:24.540 --> 00:03:28.170
we can test our code in isolation from those dependencies.

41
00:03:29.780 --> 00:03:31.550
Let's have a look at little code example.

42
00:03:31.910 --> 00:03:36.230
I have a method that is called process user sign up inside of this method.

43
00:03:36.500 --> 00:03:39.320
I create a new instance of sign up with service cost.

44
00:03:39.680 --> 00:03:46.340
So instead of our method creating a new instance of sign up service, we will make this method, accept

45
00:03:46.340 --> 00:03:48.470
this object as a method argument.

46
00:03:48.710 --> 00:03:54.890
Or we can use other dependency injection strategies and inject this dependency using constructor.

47
00:03:54.890 --> 00:03:58.340
We use dependency injection or field dependency injection.

48
00:03:59.120 --> 00:04:05.570
So when we need to write a unit and that test the behavior of a method, we need to isolate this method

49
00:04:05.570 --> 00:04:06.860
from other dependencies.

50
00:04:07.340 --> 00:04:13.460
These dependencies are injected into our methods as stamps or more complex with predefined behavior.

51
00:04:13.730 --> 00:04:16.220
We are not interested contestant this dependencies.

52
00:04:16.459 --> 00:04:22.970
We are only interested in testing code in the method under the test isolated from all other dependencies.

53
00:04:23.450 --> 00:04:24.140
This way.

54
00:04:24.140 --> 00:04:25.070
Or a unit test.

55
00:04:25.280 --> 00:04:25.880
That is test.

56
00:04:25.880 --> 00:04:31.610
And this particular method is more reliable and you will see how it all works in practice in following

57
00:04:31.610 --> 00:04:32.330
video lessons.

