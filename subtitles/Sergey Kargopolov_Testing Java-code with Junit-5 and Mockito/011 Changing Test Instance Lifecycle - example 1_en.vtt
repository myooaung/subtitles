WEBVTT
1
00:00:00.150 --> 00:00:03.390
To demonstrate how to change the test instance lifecycle.

2
00:00:03.390 --> 00:00:09.510
I will use calculator project where we have created the few test classes that demonstrate how to order

3
00:00:09.510 --> 00:00:10.260
test methods.

4
00:00:10.830 --> 00:00:14.460
So let's open test class that makes our test methods run in order.

5
00:00:14.760 --> 00:00:16.079
One after another.

6
00:00:16.350 --> 00:00:20.400
It's called methods ordered by order index test.

7
00:00:20.820 --> 00:00:27.360
If I run all test methods in this course by default, do you need to create a new test instance for

8
00:00:27.360 --> 00:00:28.500
each test method?

9
00:00:29.010 --> 00:00:32.729
And this lifecycle is called test instance per method.

10
00:00:33.000 --> 00:00:35.940
And it is equivalent to adding this annotation.

11
00:00:36.120 --> 00:00:44.100
It is called test instance, and in certain brackets you will use test instance, dot, lifecycle,

12
00:00:44.250 --> 00:00:46.560
dot, and then permitted.

13
00:00:46.650 --> 00:00:53.700
So this is a default configuration and to see if there is indeed a new instance of a class created for

14
00:00:53.700 --> 00:00:59.970
each test method, we can add the member variable and print it Steve in each test method.

15
00:01:00.300 --> 00:01:07.500
So let's try inside of my class and create a new instance variable which is going to be string builder

16
00:01:07.800 --> 00:01:09.180
data type for example.

17
00:01:09.720 --> 00:01:12.450
And I will call it completed maybe.

18
00:01:13.660 --> 00:01:16.510
And by default it's going to be empty.

19
00:01:16.900 --> 00:01:19.990
So I will use this string builder to open the string to it.

20
00:01:20.260 --> 00:01:22.120
When each test method executes.

21
00:01:22.150 --> 00:01:25.780
For example, when this D runs first.

22
00:01:25.780 --> 00:01:29.710
So it has order in this one and this method will run first.

23
00:01:30.100 --> 00:01:33.830
So once this method runs, it will append one to it.

24
00:01:33.850 --> 00:01:42.010
For example, I will use string builder object and now I will append a string value, which is just

25
00:01:42.010 --> 00:01:42.340
one.

26
00:01:42.580 --> 00:01:42.960
All right.

27
00:01:42.970 --> 00:01:46.420
One test to execute, which is my test.

28
00:01:46.420 --> 00:01:50.530
E So when this test executes is going to execute.

29
00:01:50.530 --> 00:01:58.810
Second, in order it will append two to my string builder and when the third test is going to execute,

30
00:01:59.230 --> 00:02:00.640
it will append three.

31
00:02:01.000 --> 00:02:05.400
And when the fourth test is going to execute, it will append four.

32
00:02:05.680 --> 00:02:06.160
Like this.

33
00:02:06.550 --> 00:02:12.850
And now I will add a lifecycle method that is going to print the state of this string builder object

34
00:02:13.270 --> 00:02:15.160
after each test completes.

35
00:02:15.760 --> 00:02:23.350
So I will screw up and here I will add a new method which is going to be called after each maybe.

36
00:02:23.890 --> 00:02:25.960
And it will simply print out.

37
00:02:27.090 --> 00:02:35.070
The state of this member of, for example, the state of instance, object he's completed.

38
00:02:35.640 --> 00:02:35.960
All right.

39
00:02:35.970 --> 00:02:40.170
So when this method runs, it will print this string.

40
00:02:40.410 --> 00:02:48.540
The state of instance object is and then whatever has been appended to this string builder that is called

41
00:02:48.540 --> 00:02:56.100
completed and doing this method, Iran, after each test that I will annotated with after each patient

42
00:02:56.700 --> 00:02:57.270
like this.

43
00:02:57.540 --> 00:02:57.840
All right.

44
00:02:57.840 --> 00:03:02.100
So now let's execute all test methods in this test class and see how it works.

45
00:03:02.610 --> 00:03:08.910
I will save changes and they will click on a run button and run all test methods in this class.

46
00:03:09.960 --> 00:03:19.290
And here I have my output when first method run the output is the state of instance object is one 1/2

47
00:03:19.350 --> 00:03:20.910
test method executed.

48
00:03:21.510 --> 00:03:28.890
The output is the state of instance, object is two and when the third test method executed, the state

49
00:03:28.890 --> 00:03:31.260
of instance object is three.

50
00:03:31.600 --> 00:03:31.890
Right?

51
00:03:31.890 --> 00:03:39.150
So even though I have executed all test methods and each, this method has appended one character to

52
00:03:39.150 --> 00:03:40.140
my string builder.

53
00:03:40.260 --> 00:03:47.400
The value of string builder is still a single character in each test method, which means that every

54
00:03:47.400 --> 00:03:55.110
time a new test method executes the initial state of my string builder object is empty.

55
00:03:55.480 --> 00:04:00.390
This is because test methods runs in a brand new instance with test class.

56
00:04:00.780 --> 00:04:07.620
Now let's change it and make our test method in the same single instance of a test class.

57
00:04:08.010 --> 00:04:16.350
And to do that, I will change the test instance lifecycle from permitted to B per class.

58
00:04:17.040 --> 00:04:21.990
Now if I save changes and execute all test methods in this class.

59
00:04:23.350 --> 00:04:25.090
I now have a different result.

60
00:04:25.540 --> 00:04:28.000
When first test method completed.

61
00:04:28.210 --> 00:04:31.540
The output is the state of instance.

62
00:04:31.540 --> 00:04:33.910
Object is one one character.

63
00:04:34.000 --> 00:04:42.010
But when the second test method executed, the output is already two characters one and two, and after

64
00:04:42.010 --> 00:04:44.710
test method for good executed.

65
00:04:45.070 --> 00:04:52.570
The value that my string builder object contains is already four characters one, two, three and four,

66
00:04:52.720 --> 00:04:56.590
which proves that test methods share the same class instance.

