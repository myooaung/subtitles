WEBVTT
1
00:00:00.240 --> 00:00:03.000
When doing integration testing of our application.

2
00:00:03.000 --> 00:00:06.960
Sometimes we need to make use of alternative configuration.

3
00:00:06.990 --> 00:00:12.570
For example, we might need to run our application on a different port number or connect to a database

4
00:00:12.570 --> 00:00:16.340
as a different user, or even connect to a different database.

5
00:00:16.350 --> 00:00:23.310
And one of the ways to make our test methods to use alternative configuration is to use test property

6
00:00:23.310 --> 00:00:24.480
source annotation.

7
00:00:24.600 --> 00:00:33.960
So I will delete properties from Springboard Test annotation and I will add another annotation that

8
00:00:33.960 --> 00:00:36.120
is called Test Property Source.

9
00:00:39.330 --> 00:00:45.540
And this annotation allows us to manually override certain configuration properties just the same way

10
00:00:45.540 --> 00:00:50.040
we used Springwood test sanitation and test property.

11
00:00:50.040 --> 00:00:56.240
So sanitation also allows us to load configuration properties from another configuration file.

12
00:00:56.340 --> 00:01:01.560
So let's see how it works to load configuration properties from another file.

13
00:01:01.560 --> 00:01:04.379
We will need to specify location of that file.

14
00:01:04.379 --> 00:01:11.970
So in brackets I can use locations, property and then in double quotes provide a path to a configuration

15
00:01:11.970 --> 00:01:12.270
file.

16
00:01:12.270 --> 00:01:16.890
I want to use, for example, application test properties.

17
00:01:17.310 --> 00:01:24.240
So this will make sprint framework load application properties from both files, from application test

18
00:01:24.240 --> 00:01:28.590
properties that I'm using here and from application properties file.

19
00:01:28.590 --> 00:01:36.600
But properties that are loaded from this file that is specified here, we'll have a higher precedence

20
00:01:36.600 --> 00:01:39.390
than the default application properties file.

21
00:01:40.350 --> 00:01:47.460
And you can also use this test property source annotation to manually override values for certain configuration

22
00:01:47.460 --> 00:01:48.180
properties.

23
00:01:48.330 --> 00:01:52.680
And to do that you will use already familiar to your properties.

24
00:01:52.680 --> 00:01:58.890
Attribute We have used exactly the same attribute with Springwood test annotation.

25
00:01:59.040 --> 00:02:04.530
So we will use properties attribute and in double quotes we'll provide the list of properties that we

26
00:02:04.530 --> 00:02:05.610
want to override.

27
00:02:05.610 --> 00:02:10.740
For example, I will override a single property that is called server port.

28
00:02:11.550 --> 00:02:14.010
And that will make it 8081.

29
00:02:14.010 --> 00:02:17.680
For example, let's have a look what we have in application properties.

30
00:02:17.700 --> 00:02:19.740
I have eight, eight, eight, eight.

31
00:02:19.740 --> 00:02:22.620
So here I will use a different port number.

32
00:02:23.040 --> 00:02:30.210
So this file, you will have the highest precedence higher than the value specified here and higher

33
00:02:30.210 --> 00:02:32.190
than the value specified here.

34
00:02:33.740 --> 00:02:35.510
So let's see how it works.

35
00:02:35.690 --> 00:02:42.390
I have defined several port here and they have defined server port in application properties file.

36
00:02:42.410 --> 00:02:48.710
So now I'm going to create application test properties and I will define server port in that file as

37
00:02:48.710 --> 00:02:49.220
well.

38
00:02:49.460 --> 00:02:56.900
I will scroll down and we'll select resources folder of my application and we'll create a new file here

39
00:02:57.170 --> 00:03:03.860
that is going to be New Resource Bundle and the name of it will be application dash test.

40
00:03:04.100 --> 00:03:04.640
Click on.

41
00:03:04.640 --> 00:03:05.200
Okay.

42
00:03:05.540 --> 00:03:13.850
And here I will define a new property that's called server port and I will give it a value, attach

43
00:03:13.880 --> 00:03:16.400
it to and we'll save changes.

44
00:03:16.400 --> 00:03:23.120
Go back to my test class and if you need to have access to the value that you load from configuration

45
00:03:23.120 --> 00:03:25.340
properties, you can inject it here.

46
00:03:25.340 --> 00:03:29.090
So above my test method, I will define a new member variable.

47
00:03:30.360 --> 00:03:36.670
I will call it silver port and I will annotate it with value annotation in double quotes.

48
00:03:36.690 --> 00:03:42.780
I'll need to provide the name of the property that I want to load from configuration file and assign

49
00:03:42.780 --> 00:03:44.220
to this member variable.

50
00:03:44.220 --> 00:03:45.750
And it's done this way.

51
00:03:45.780 --> 00:03:50.040
Dollar sign, curly brackets and inside the curly bracket.

52
00:03:50.040 --> 00:03:54.720
I will need to type the name of the property server port.

53
00:03:55.610 --> 00:04:03.170
So the same name that I use here and the same name that I use in other property files.

54
00:04:04.040 --> 00:04:07.040
So let's see which value is going to be assigned here.

55
00:04:07.040 --> 00:04:10.460
Instead of my test method, I'm going to print this value.

56
00:04:13.570 --> 00:04:15.580
I reformat my source code.

57
00:04:16.459 --> 00:04:20.450
Safe changes and now I can run this test method and see how it works.

58
00:04:20.459 --> 00:04:21.170
Let's try.

59
00:04:26.120 --> 00:04:33.290
Now if I select test method on the left side, I see that the value printed is 8081.

60
00:04:33.290 --> 00:04:40.820
So currently the property with a name server port has a highest precedence.

61
00:04:40.850 --> 00:04:41.240
All right.

62
00:04:41.240 --> 00:04:49.430
And if I look at the console and scroll down, I will see that my embedded server started on the same

63
00:04:49.430 --> 00:04:52.730
port number 80 and 81.

64
00:04:52.910 --> 00:04:55.340
Now let's comment out this.

65
00:05:00.120 --> 00:05:07.130
And remove properties from test property source and see which server port value is going to be used

66
00:05:07.140 --> 00:05:07.650
now.

67
00:05:07.920 --> 00:05:11.820
I'll save changes and we'll run my test method one more time.

68
00:05:14.040 --> 00:05:22.640
This time the value printed is 8082, and this is the value that is specified in application test properties.

69
00:05:22.650 --> 00:05:31.890
If I have a look at it, the value used is 8082 and my embedded Tomcat also should have started on port

70
00:05:31.890 --> 00:05:33.660
number 8082.

71
00:05:33.690 --> 00:05:40.470
So configuration properties that are specified in application test property file have higher precedence

72
00:05:40.470 --> 00:05:45.210
because they are loaded using test property source annotation.

73
00:05:45.210 --> 00:05:52.110
And finally, if I comment out test property source annotation, then my test class will use the port

74
00:05:52.110 --> 00:05:55.530
number that is specified in application properties file.

75
00:05:55.560 --> 00:05:56.490
Let's try.

76
00:06:00.590 --> 00:06:01.540
And here we go.

77
00:06:01.550 --> 00:06:07.160
The value of the port number is now eight, eight, eight, eight, which is defined in the application

78
00:06:07.160 --> 00:06:08.150
properties file.

79
00:06:08.390 --> 00:06:08.930
All right.

80
00:06:08.930 --> 00:06:15.770
So if you want to test the application with alternative configuration, you can use test property source

81
00:06:15.770 --> 00:06:22.160
annotation and configure it to load configuration properties from either a different file, or you can

82
00:06:22.160 --> 00:06:29.060
override certain properties manually by defining them right inside of the test property.

83
00:06:29.060 --> 00:06:34.850
Source Annotation All right, so it is all working for us and we're going to continue to the next lesson.

