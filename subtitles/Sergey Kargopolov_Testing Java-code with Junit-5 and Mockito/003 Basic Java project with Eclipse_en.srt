1
00:00:00,120 --> 00:00:00,780
In this video.

2
00:00:00,780 --> 00:00:05,640
Listen, I'll show you how to create a new interest in eclipse through open environment.

3
00:00:06,060 --> 00:00:10,500
If you do not use a crepes, then please feel free to skip this video lesson.

4
00:00:10,860 --> 00:00:17,220
All right, so I have eclipse development environment opened, and I will start by creating a new project.

5
00:00:17,310 --> 00:00:23,580
To do that, they will select file new and then I will select a simple Java project.

6
00:00:24,670 --> 00:00:26,470
From the list of wizards.

7
00:00:26,470 --> 00:00:30,370
I will select Java Project and will click on next.

8
00:00:31,960 --> 00:00:33,970
Now I will give my project a name.

9
00:00:33,970 --> 00:00:36,130
For example, calculator eclipse.

10
00:00:37,890 --> 00:00:43,680
And the rest of the options I will leave unchanged and they will click on Next Button.

11
00:00:44,100 --> 00:00:47,490
And finally we will click on Finish Button to create this project.

12
00:00:47,880 --> 00:00:50,970
Eclipse offers me to open Java perspective.

13
00:00:51,060 --> 00:00:54,060
This perspective was designed to support Java development.

14
00:00:54,390 --> 00:01:00,510
Oh, click on Open Perspective and now I have a very simple Java project opened.

15
00:01:00,840 --> 00:01:07,500
Let me expand to Project Folder and here I have source folder which is currently empty.

16
00:01:07,860 --> 00:01:09,600
Let's create a new general class.

17
00:01:09,780 --> 00:01:11,520
I will create a new class.

18
00:01:12,740 --> 00:01:14,740
I will put it into a package.

19
00:01:15,140 --> 00:01:17,780
For example, comm humps that will block.

20
00:01:19,320 --> 00:01:27,360
And then the name of the class will be calculator and the rest of the options are will also leave unchanged.

21
00:01:27,750 --> 00:01:29,930
I'll click on finish to screen this class.

22
00:01:31,020 --> 00:01:35,430
And I have a new class created in IBM's developer block package.

23
00:01:35,820 --> 00:01:42,540
Now I will add a method that I want to test, and it will be the same integer division method that I

24
00:01:42,540 --> 00:01:45,030
have created in one of the previous video lessons.

25
00:01:51,310 --> 00:01:57,130
Magnus Alright, so now that I have a method to test, I can create a unique test method for it.

26
00:01:57,640 --> 00:02:03,550
Now, because it is a brand new project, I do not even have a test folder for my test classes.

27
00:02:04,030 --> 00:02:06,400
So I will first create a test folder.

28
00:02:06,670 --> 00:02:13,720
To do that, I will select the project and then I will do right mouse click will select new and then

29
00:02:13,720 --> 00:02:16,030
choose source folder.

30
00:02:17,880 --> 00:02:23,880
I will call this folder test and will click on Finish Button to create this folder.

31
00:02:24,360 --> 00:02:27,270
Now I'm ready to create a new test class.

32
00:02:27,570 --> 00:02:34,500
To do it, I will select calculator from my IBM's developer block from the sources folder.

33
00:02:34,800 --> 00:02:41,220
I will do right mouse click on it, will select the new and then we'll select G unit test case.

34
00:02:42,880 --> 00:02:43,630
And the top.

35
00:02:43,630 --> 00:02:49,990
We have three different options that allow us to select the version of two units that we want to use.

36
00:02:49,990 --> 00:02:57,460
I will select the latest new do you need to beta test the source folder that comes right below?

37
00:02:57,460 --> 00:02:58,930
I want you to change it.

38
00:02:58,930 --> 00:03:06,910
Currently says I so c I will change it to test and this will please the new test class into the test

39
00:03:06,910 --> 00:03:08,320
folder that we have created.

40
00:03:08,750 --> 00:03:09,130
All right.

41
00:03:09,130 --> 00:03:15,670
So the package I will keep the scene and the name of the class will also stay the same.

42
00:03:15,670 --> 00:03:23,770
It is a common convention to use test at the end of the class name to specify that this class is a test

43
00:03:23,770 --> 00:03:24,130
class.

44
00:03:24,550 --> 00:03:29,320
The next panel, it allows me to generate one of this methods.

45
00:03:29,320 --> 00:03:31,160
I'm not going to do it at this moment.

46
00:03:31,160 --> 00:03:32,020
Then we'll skip it.

47
00:03:32,320 --> 00:03:38,920
We we'll talk about this method a little bit later and then we have class under test, which is calculator.

48
00:03:39,220 --> 00:03:40,030
This is correct.

49
00:03:40,030 --> 00:03:41,050
I'm not going to change it.

50
00:03:41,590 --> 00:03:41,870
All right.

51
00:03:41,870 --> 00:03:46,000
So now I can click on Finish Button to create this new test class.

52
00:03:47,340 --> 00:03:47,700
Now.

53
00:03:47,700 --> 00:03:51,570
Eclipse's letting me know that you need five is not on the growth path.

54
00:03:52,020 --> 00:03:53,280
Do I want to add it?

55
00:03:53,580 --> 00:03:56,340
And the answer is yes, I will need to add it.

56
00:03:56,580 --> 00:04:03,840
So I will keep the perform following action selected to add to Unit five library on the built path and

57
00:04:03,840 --> 00:04:05,250
will click on okay button.

58
00:04:06,840 --> 00:04:07,690
And here we go.

59
00:04:07,710 --> 00:04:14,160
Eclipse has created a new calculator quiz with an example of Test method, which currently doesn't test

60
00:04:14,160 --> 00:04:14,760
anything.

61
00:04:15,030 --> 00:04:19,890
If it wrong this method, it will fail because of this fail assertion.

62
00:04:20,310 --> 00:04:27,930
And one of the ways to run test methods in this class is to select the test class itself and then do

63
00:04:27,930 --> 00:04:34,350
right mouse click on it and then choose a run as and then select g unit test.

64
00:04:35,420 --> 00:04:41,630
It tells me that my calculator class is not saved and invites me to save changes to my calculator class

65
00:04:41,630 --> 00:04:44,330
whole week and the test all around now.

66
00:04:44,720 --> 00:04:44,990
All right.

67
00:04:44,990 --> 00:04:47,430
So it has failed on the left side.

68
00:04:47,450 --> 00:04:53,090
Here we have a unique panel active and the bar at the top is present.

69
00:04:53,480 --> 00:05:00,560
This means that the test has failed and it has failed because we have intentionally failed it with this

70
00:05:00,560 --> 00:05:01,730
fail assertion.

71
00:05:02,300 --> 00:05:02,660
All right.

72
00:05:02,930 --> 00:05:04,190
So let's make it pass.

73
00:05:04,550 --> 00:05:11,510
If you execute your unit test method and none of its assertions fail or it does not result in an exception

74
00:05:11,510 --> 00:05:14,390
thrown, then this g unit test will pass.

75
00:05:14,870 --> 00:05:17,110
It is a full g unit test behavior.

76
00:05:17,120 --> 00:05:19,700
If it does not fail, then it passes.

77
00:05:20,150 --> 00:05:27,320
All right, so to make it pass, I can simply comment out this fail assertion and let it print something

78
00:05:27,320 --> 00:05:27,830
instead.

79
00:05:27,860 --> 00:05:33,430
For example, we will add system out, print again and print the same message.

80
00:05:34,820 --> 00:05:36,930
And now I can run it again.

81
00:05:36,950 --> 00:05:39,290
I will switch to Package Explorer.

82
00:05:39,710 --> 00:05:44,150
It's safe changes first and then I will select my calculator.

83
00:05:44,150 --> 00:05:47,090
Test class will do right mouse click on it.

84
00:05:47,240 --> 00:05:49,400
Run as g unit test.

85
00:05:51,880 --> 00:05:53,950
And we have a passing unit test.

86
00:05:54,310 --> 00:06:00,670
The bar on the unit panel is green and this means that all is good and that unit has passed.

87
00:06:01,210 --> 00:06:04,780
If the bar is red, then this means that we have a failing test.

88
00:06:04,990 --> 00:06:08,080
But if the bar is green, then the test is successful.

89
00:06:08,470 --> 00:06:16,510
If I expand the calculator test, then here I have a single test method with a little checkmark in green

90
00:06:16,510 --> 00:06:19,570
indicating that this test method is passing.

91
00:06:19,930 --> 00:06:26,140
All right, so all this good and you now know how to create and how to run a very simple unit test method,

92
00:06:26,440 --> 00:06:28,510
use an eclipse development environment.

93
00:06:28,960 --> 00:06:33,310
Now, the unit test that is here, it doesn't really do anything.

94
00:06:33,310 --> 00:06:35,050
It doesn't really test anything.

95
00:06:35,410 --> 00:06:36,550
So let's continue.

96
00:06:36,550 --> 00:06:44,110
And in the following lessons, we will create a test method that will actually test our integer division

97
00:06:44,110 --> 00:06:46,090
method in the calculator class.

98
00:06:46,420 --> 00:06:50,470
But for the rest of the course I will use intelligent development environment.

