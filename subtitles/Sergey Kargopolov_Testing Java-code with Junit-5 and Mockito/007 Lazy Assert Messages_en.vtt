WEBVTT
1
00:00:00.330 --> 00:00:06.630
You might have noticed that the assert equals assertion that I have used in integer subtraction method

2
00:00:06.840 --> 00:00:15.210
does not have a message parameter as we have it in the assert equals assertion of the integer division

3
00:00:15.240 --> 00:00:15.600
method.

4
00:00:15.960 --> 00:00:24.090
Here we have used a message parameter, but in the integer subtraction method I have missed this message

5
00:00:24.090 --> 00:00:24.600
parameter.

6
00:00:24.930 --> 00:00:30.180
If you have noticed this difference, then this is a very good news because you are paying attention

7
00:00:30.180 --> 00:00:33.840
and you are already becoming better at using your unit.

8
00:00:34.260 --> 00:00:41.280
Now this message parameter is optional, but generally it is considered a good practice to include it.

9
00:00:41.400 --> 00:00:46.710
If this assertion fails the test, then the unit will provide its own error message.

10
00:00:47.100 --> 00:00:53.730
But if the default error message is not descriptive enough, then you can include additional parameters

11
00:00:53.730 --> 00:00:56.520
into your own custom error message.

12
00:00:56.850 --> 00:01:03.780
For example, you can include input parameters, the menu end and scepter hint and for example, expected

13
00:01:03.780 --> 00:01:08.190
result into the error message and to make it more descriptive.

14
00:01:08.550 --> 00:01:11.520
So my error message could look like this.

15
00:01:16.860 --> 00:01:19.290
And I will define this more embossed.

16
00:01:25.550 --> 00:01:28.710
And now we can use them to invoke the method under the test.

17
00:01:28.790 --> 00:01:31.880
So instead of 33, I will use minions.

18
00:01:32.810 --> 00:01:38.440
Instead of one I will use Septuagint and will update my assert equals as well.

19
00:01:38.450 --> 00:01:44.870
Instead of 32 I will use expected result and instead of result I will use actual result.

20
00:01:45.750 --> 00:01:51.300
In this case, if this assertion fails, the test method, the error message in the test report will

21
00:01:51.300 --> 00:01:55.050
have additional information for the person who reads this test report.

22
00:01:55.770 --> 00:02:00.840
In this particular test method, it might not look very helpful, but there will be other test methods

23
00:02:00.840 --> 00:02:07.380
in your practice when including this additional information into error message will be very helpful.

24
00:02:07.770 --> 00:02:15.420
Now, if you have read this methods and each test method has associations with this kind of dynamically

25
00:02:15.420 --> 00:02:22.530
computed message, this might slow down your test methods a little bit in a small application you will

26
00:02:22.530 --> 00:02:26.490
not even notice the difference, but in a much larger application.

27
00:02:26.490 --> 00:02:29.550
With many test methods, an assertion message is used.

28
00:02:29.670 --> 00:02:36.210
Developers like to optimize it, and the reason it might slow down your tests a little bit is because

29
00:02:36.450 --> 00:02:43.500
this message will get computed every time you test methods, grants, whether it passes or fails, this

30
00:02:43.500 --> 00:02:45.330
message will always be computed.

31
00:02:45.540 --> 00:02:48.540
It gets executed even though it might never be used.

32
00:02:48.990 --> 00:02:51.990
So to optimize performance of you need tests.

33
00:02:52.170 --> 00:02:58.620
Developers like to convert this test message into a lambda and it can be converted to lambda this way.

34
00:02:58.980 --> 00:03:05.280
Now this message is a one the function that will be executed only when this assertion fails the test

35
00:03:05.280 --> 00:03:05.640
method.

36
00:03:05.880 --> 00:03:11.910
Otherwise, if the test is passing, this lambda function will never get executed and no resources will

37
00:03:11.910 --> 00:03:13.980
be spent to compute this error message.

38
00:03:14.610 --> 00:03:14.970
All right.

39
00:03:14.970 --> 00:03:18.000
So again, using this message parameter is optional.

40
00:03:18.120 --> 00:03:21.090
You will see many test methods that do not use it at all.

41
00:03:21.300 --> 00:03:27.540
But generally it is considered a good practice to provide a short but descriptive error message to help

42
00:03:27.540 --> 00:03:33.360
the person who's reading this test report easier understand the reason why this test method has failed.

43
00:03:33.900 --> 00:03:38.130
So let's try running this test method and see if it works.

44
00:03:38.580 --> 00:03:41.670
And to see this error message, print it in the report.

45
00:03:41.820 --> 00:03:48.030
I'll need to make this assertion failed the test so I will intentionally break business logic inside

46
00:03:48.030 --> 00:03:50.010
of my integer subtraction method.

47
00:03:50.400 --> 00:03:54.720
I will go there and instead of subtraction I will use addition.

48
00:03:55.320 --> 00:04:00.690
I will see if changes will go back to my calculator test and will run my test method.

49
00:04:02.870 --> 00:04:07.310
And here we have a custom error message that we have created.

50
00:04:07.730 --> 00:04:18.410
33 minus one did not produce 32 and this information is provided by G unit expected 32, actual 34.

51
00:04:18.709 --> 00:04:24.470
Now let's fix our code and use subtraction instead of addition.

52
00:04:25.010 --> 00:04:27.740
That's a Ron Artest method to make it pass.

53
00:04:29.710 --> 00:04:31.180
And now we have a passing test.

54
00:04:31.480 --> 00:04:31.840
All right.

55
00:04:31.840 --> 00:04:33.500
So it is working well for us.

56
00:04:33.520 --> 00:04:39.940
And now you know how to make the description error message execute only when it is actually needed.

