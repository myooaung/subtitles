1
00:00:00,180 --> 00:00:07,260
If you remember from early video lessons by default, test methods are executed in deterministic but

2
00:00:07,260 --> 00:00:08,760
not obvious way.

3
00:00:08,940 --> 00:00:15,000
And because we did not apply any specific order to our test methods, we cannot really guarantee which

4
00:00:15,000 --> 00:00:19,460
test method will execute first and which test method will execute second.

5
00:00:19,470 --> 00:00:26,160
So by default, we cannot guarantee that test method that creates a new user will execute first.

6
00:00:26,160 --> 00:00:32,369
And the test method that performs user login will execute after the user is created.

7
00:00:32,369 --> 00:00:38,130
And in this particular case, I rely on the order in which test methods are executed.

8
00:00:38,130 --> 00:00:40,710
First, I want user to be created.

9
00:00:40,710 --> 00:00:45,660
Second, I want to perform user login and get authorization access token.

10
00:00:45,870 --> 00:00:52,110
And third, I want to use this access token to test communication with protected API endpoints.

11
00:00:52,260 --> 00:00:56,490
And if the order is different, my test methods will start failing.

12
00:00:56,580 --> 00:01:02,820
So in this lesson I will apply a specific order in which I want my test methods to execute.

13
00:01:02,820 --> 00:01:10,260
And to do that I will scroll up and I will annotate my test class with test method.

14
00:01:10,260 --> 00:01:11,490
Order annotation.

15
00:01:13,420 --> 00:01:17,770
Like this and in the brackets how specify method order.

16
00:01:18,590 --> 00:01:21,260
Which is going to be further annotation.

17
00:01:23,520 --> 00:01:29,790
Like this, and now I can use order annotation to apply order to my test methods.

18
00:01:29,790 --> 00:01:37,200
So I will scroll down to my very first method that creates a new user and I will add order annotation

19
00:01:37,200 --> 00:01:38,640
with index one.

20
00:01:38,640 --> 00:01:41,880
I want this method to execute first.

21
00:01:42,120 --> 00:01:49,200
Once the user is created, I will then scroll down and I will execute this method that validates.

22
00:01:49,200 --> 00:01:54,510
If JWT is missing, then my API endpoint responds back with four or three.

23
00:01:54,510 --> 00:01:56,790
So I will execute this test method.

24
00:01:56,790 --> 00:01:57,660
Second.

25
00:01:57,960 --> 00:02:04,920
Next I will scroll down and I will make my test method that performs user log in to execute third.

26
00:02:06,080 --> 00:02:06,440
All right.

27
00:02:06,440 --> 00:02:12,740
So now that I have applied specific order to my test methods, I can run all of them and see if they

28
00:02:12,740 --> 00:02:15,020
execute in this specific order.

29
00:02:15,020 --> 00:02:17,150
So I will scroll all the way up.

30
00:02:20,240 --> 00:02:23,900
And will execute all test methods in this test class.

31
00:02:26,610 --> 00:02:27,390
And here we go.

32
00:02:27,420 --> 00:02:32,550
My test methods are now being executed in the order that I wanted them to execute.

33
00:02:32,550 --> 00:02:41,100
But Logan fails and it fails for the same reason we are expecting it should be status quo 200, but

34
00:02:41,100 --> 00:02:48,240
we have received a HTTP status code for three and it could be because I'm using incorrect username and

35
00:02:48,240 --> 00:02:48,750
password.

36
00:02:48,750 --> 00:02:57,120
So I create user with email test test dot com and password is 1234, five, six, seven, eight.

37
00:02:57,330 --> 00:03:02,310
Now let's scroll down and see which user credentials I use to log in.

38
00:03:02,760 --> 00:03:07,560
Now email address is incorrect and password is correct.

39
00:03:07,860 --> 00:03:14,580
I will save changes and I will run all test methods one more time, this time with correct email address

40
00:03:14,580 --> 00:03:15,810
and correct password.

41
00:03:18,950 --> 00:03:25,430
And now all of my test methods pass now because my application uses in-memory database at this moment,

42
00:03:25,520 --> 00:03:31,130
after my test methods finish running, all data in in-memory database will be deleted.

43
00:03:31,130 --> 00:03:36,740
And this means that I should be able to run the same test methods again and again and again, and they

44
00:03:36,740 --> 00:03:37,760
should still pass.

45
00:03:37,790 --> 00:03:40,340
Let's try running it one more time.

46
00:03:42,490 --> 00:03:44,050
And they pass again.

47
00:03:44,230 --> 00:03:44,590
All right.

48
00:03:44,590 --> 00:03:47,860
So everything is working well and we're going to continue.

