WEBVTT
1
00:00:00.150 --> 00:00:06.390
In this lesson, we will work on the same forward slash users API endpoint, but this time will be sending

2
00:00:06.390 --> 00:00:14.370
a HTTP get request and if you follow rest API design guidelines, then HTTP get request that is sent

3
00:00:14.370 --> 00:00:15.950
to four slash users.

4
00:00:15.960 --> 00:00:19.320
API endpoint should return back a list of users.

5
00:00:19.320 --> 00:00:23.490
And usually this request is protected by protected.

6
00:00:23.490 --> 00:00:29.910
I mean that to communicate with this API endpoint, our request will need to include a valid authorization

7
00:00:29.910 --> 00:00:30.870
access token.

8
00:00:30.870 --> 00:00:37.110
And if we do not provide valid access token, then in response we will get back as HTTP status code

9
00:00:37.110 --> 00:00:40.050
403 which stands for Forbidden.

10
00:00:40.320 --> 00:00:46.800
So our new test method will need to make sure that the protected API endpoint does indeed return for

11
00:00:46.830 --> 00:00:47.940
three status code.

12
00:00:47.940 --> 00:00:55.230
If we do not include a valid access token and HTTP status code four three means that server understands

13
00:00:55.230 --> 00:00:58.110
the request but it refuses to authorize it.

14
00:00:58.110 --> 00:01:03.570
In the following lessons, we will learn how to acquire a valid access token, but at this moment,

15
00:01:03.570 --> 00:01:09.810
since we do not have it, I think it's a good moment to write a test method that validates if our API

16
00:01:09.810 --> 00:01:12.690
endpoint does indeed require access token.

17
00:01:12.690 --> 00:01:17.850
All right, so let's scroll down and start with a new test method.

18
00:01:20.130 --> 00:01:21.240
As a display name.

19
00:01:21.240 --> 00:01:29.160
I will come up with something like http kid two for users requires readability.

20
00:01:29.850 --> 00:01:31.050
Something like this.

21
00:01:32.040 --> 00:01:35.040
I'm going to test and get users API point.

22
00:01:35.040 --> 00:01:42.840
So my test method name will start with test get users and then when missing JWT token then returns a

23
00:01:42.840 --> 00:01:44.910
HTTP status code for a three.

24
00:01:48.050 --> 00:01:53.000
Something like this and I will split my method into arrange, act and assert.

25
00:01:56.020 --> 00:01:57.190
In the range section.

26
00:01:57.190 --> 00:02:02.050
I will prepare a shipping request and I will start with HTTP headers.

27
00:02:04.100 --> 00:02:11.060
At this moment, I will set maybe a one header which is going to be accept and I could use setter or

28
00:02:11.060 --> 00:02:17.930
I can use a set method and then include header name like this accept and then spell the content type.

29
00:02:17.930 --> 00:02:25.820
I want to include application forward slash JSON and I will put this should be headers into a entity

30
00:02:25.820 --> 00:02:26.360
object.

31
00:02:30.510 --> 00:02:30.740
Okay.

32
00:02:30.900 --> 00:02:35.640
So the constructor of gdb entity accepts request body and headers.

33
00:02:35.640 --> 00:02:41.130
But because I'm going to send the http get request, the body of request will be empty.

34
00:02:41.130 --> 00:02:48.810
So when I create a be entity, I can either provide null as a body or do not include it at all.

35
00:02:49.090 --> 00:02:49.400
Okay.

36
00:02:49.470 --> 00:02:56.670
So now that I have request entity in the ACT section, I can use rest template to send a request.

37
00:02:57.090 --> 00:02:59.760
So I will use my test rest template.

38
00:02:59.940 --> 00:03:06.090
And this time I'm going to use a slightly different method that is called exchange.

39
00:03:06.390 --> 00:03:12.060
And if you have experience working with a risk template declined, then you will recognize this method

40
00:03:12.060 --> 00:03:12.830
right away.

41
00:03:12.840 --> 00:03:19.170
So we can use this method to send the HTTP, get request and then get back a list of objects as the

42
00:03:19.170 --> 00:03:20.040
first parameter.

43
00:03:20.040 --> 00:03:23.690
I will provide URL path which is going to be users.

44
00:03:23.700 --> 00:03:28.530
Then I will provide a DB method which is going to be get.

45
00:03:28.890 --> 00:03:33.330
Then we'll go my request entity that I have just prepared here.

46
00:03:33.360 --> 00:03:36.720
Let's put things on their own lines.

47
00:03:36.720 --> 00:03:43.390
And finally, to specify that, I want to get back a list of objects of specific data type.

48
00:03:43.440 --> 00:03:45.810
I will use the following code snippet.

49
00:03:46.500 --> 00:03:53.370
Parameterized type preference is going to be at least of user arrest data type.

50
00:03:53.820 --> 00:03:58.050
Let's import list and put semicolon at the end.

51
00:03:59.430 --> 00:04:07.410
Mind this and this will return us a response entity that will contain a list of user rest objects.

52
00:04:11.520 --> 00:04:13.230
And I will call it response.

53
00:04:13.230 --> 00:04:20.190
So now that we have a response entity object, we can use it to access response status code, response

54
00:04:20.190 --> 00:04:22.070
headers and response body.

55
00:04:22.079 --> 00:04:26.070
And at this time we are only interested in HTTP status code.

56
00:04:26.070 --> 00:04:33.750
The status code of this HTTP response should be 403 so let's add an assertion for it in the assert section

57
00:04:33.750 --> 00:04:36.060
I will use assert equals.

58
00:04:36.840 --> 00:04:42.480
It will need to come from assertions the expected value is four or three.

59
00:04:42.480 --> 00:04:49.920
I can type it like this or I can use HTTP status and that is going to be forbidden.

60
00:04:49.980 --> 00:04:58.260
And the actual status code I will read from this response entity object to get status code like this.

61
00:04:58.620 --> 00:05:02.790
And then if these two are not equal, I will display an error message.

62
00:05:02.790 --> 00:05:06.960
For example, a HTTP status code for a three should have been returned.

63
00:05:10.280 --> 00:05:11.060
Like this.

64
00:05:11.390 --> 00:05:11.720
All right.

65
00:05:11.720 --> 00:05:16.730
So I think now we are ready to run this test method and see how it works.

66
00:05:16.760 --> 00:05:17.630
Let's run it.

67
00:05:22.450 --> 00:05:28.490
And it passes, which means that the status code of which response does equal to four three.

68
00:05:28.510 --> 00:05:33.190
The server does understand our request, but it refuses to authorize it.

69
00:05:33.250 --> 00:05:39.430
And for server to authorize this request we will need to provide a valid JWT access token.

70
00:05:39.430 --> 00:05:46.030
So let's continue and in the following lessons we will write a test method to perform user login and

71
00:05:46.030 --> 00:05:53.530
once the user successfully logs in HTTP response will contain a valid JWT access token and we can then

72
00:05:53.530 --> 00:05:56.110
write another test method to validate that.

73
00:05:56.110 --> 00:06:00.880
We can use this token to communicate with protected API endpoints.

74
00:06:01.120 --> 00:06:01.480
All right.

75
00:06:01.480 --> 00:06:03.340
So let's continue to the next lecture.

