1
00:00:00,120 --> 00:00:05,460
Monk objects allow us to verify how many times the method in the mock object was called.

2
00:00:05,790 --> 00:00:08,790
And this is very helpful, especially with the save method.

3
00:00:09,210 --> 00:00:12,020
We want to make sure that the user mounted.

4
00:00:12,390 --> 00:00:19,620
If I go inside, we want to make sure that the create user method invokes save method exactly one time.

5
00:00:19,860 --> 00:00:25,980
If this same amount was not called at all, or it was called more than one time, then we have a problem.

6
00:00:26,160 --> 00:00:33,030
So we want our test method to verify and make sure that this save method was called exactly one time.

7
00:00:33,270 --> 00:00:35,400
Otherwise, our test method should fail.

8
00:00:35,850 --> 00:00:41,640
And to do that with my kids, we can use a special market method that is called verify.

9
00:00:41,910 --> 00:00:45,180
I will add it in the assertion section and the bottom.

10
00:00:46,500 --> 00:00:48,120
My kids do it very fine.

11
00:00:48,300 --> 00:00:50,620
The refinement that takes two parameters.

12
00:00:50,640 --> 00:00:54,990
The first one is the more common, which is, in our case, user repository.

13
00:00:55,890 --> 00:00:58,500
And the second parameter is verification mode.

14
00:01:00,790 --> 00:01:05,560
And verification mode, which specified the desired number of method locations.

15
00:01:05,920 --> 00:01:12,790
In this particular case, it is one time and finally at the end, we need to specify the method that

16
00:01:12,790 --> 00:01:13,990
we expect to be called.

17
00:01:14,140 --> 00:01:19,660
In our case, it is a save method, but the same method accepts user object as a parameter.

18
00:01:19,900 --> 00:01:23,080
And to provide this parameter I will use my key this argument matcher.

19
00:01:24,920 --> 00:01:27,920
Mikey to duck any and then the user across.

20
00:01:28,100 --> 00:01:29,390
Let's put it on a new line.

21
00:01:30,200 --> 00:01:37,820
So with this line of code, we ask my kid to verify that the same method that is in the users repository

22
00:01:37,820 --> 00:01:40,400
mock object was called exactly one time.

23
00:01:40,580 --> 00:01:42,620
Otherwise, this test method should fail.

24
00:01:43,040 --> 00:01:43,880
So let's try.

25
00:01:43,880 --> 00:01:44,510
If it works.

26
00:01:44,720 --> 00:01:45,680
I will run this test.

27
00:01:48,210 --> 00:01:49,050
And it passes.

28
00:01:49,440 --> 00:01:50,910
Let's try to break it.

29
00:01:51,300 --> 00:01:57,420
For example, instead of one time, I will specify zero times and write again.

30
00:01:59,540 --> 00:02:00,620
And now it fails.

31
00:02:01,100 --> 00:02:02,690
Let's make it fast again.

32
00:02:06,010 --> 00:02:07,900
And now it passes over.

33
00:02:07,930 --> 00:02:10,870
And let's assume that the safe method was never caught.

34
00:02:10,900 --> 00:02:12,730
I will go inside of create user.

35
00:02:13,820 --> 00:02:19,940
And will either comment out or let's say it was invoked accidentally two times one time.

36
00:02:19,940 --> 00:02:25,490
And then again we made a mistake and we accidentally invoked save method two times.

37
00:02:25,790 --> 00:02:29,420
I'll save changes, go back to my test method and run it again.

38
00:02:31,070 --> 00:02:36,920
And now our test method fails with an error message that there were too many actual invocations.

39
00:02:37,310 --> 00:02:40,040
All right, so let's make it pass again.

40
00:02:40,250 --> 00:02:44,630
I will delete the extra line, save it and make my test method pass again.

41
00:02:46,360 --> 00:02:47,050
Then it works.

42
00:02:47,950 --> 00:02:52,150
Now there are other useful methods that allow us to verify the number of invocations.

43
00:02:52,420 --> 00:02:59,740
For example, if I add my Quito, then there is, for example, at least, which is the first method

44
00:02:59,740 --> 00:03:00,400
in the list.

45
00:03:00,640 --> 00:03:06,370
And you will use this method to verify that this saved meant it was called at least the number of times

46
00:03:06,430 --> 00:03:08,200
specified as the method argument.

47
00:03:08,380 --> 00:03:13,960
For example, at least two times it could be called more, but not less than the specified number of

48
00:03:13,960 --> 00:03:14,410
times.

49
00:03:14,680 --> 00:03:16,330
Or you can use at most.

50
00:03:16,570 --> 00:03:22,480
And you will use this method to verify that this save method was called not more than the specified

51
00:03:22,480 --> 00:03:23,290
number of times.

52
00:03:23,560 --> 00:03:29,800
It can be called less then, but not more than the number of times to specify as the parameter to this

53
00:03:29,800 --> 00:03:30,190
method.

54
00:03:30,430 --> 00:03:36,310
There is also at least one method, and you will use this method to verify that the saved method was

55
00:03:36,310 --> 00:03:43,510
called at least one time, and there is also at most once, for example, and you will use this method

56
00:03:43,510 --> 00:03:49,590
to verify that this save method was called maximum one time, if it was not called at all.

57
00:03:49,630 --> 00:03:55,630
And then it is also fine for if we wanted to make sure that a certain method was never called, then

58
00:03:55,630 --> 00:03:59,320
we could use, for example, never Mike either.

59
00:03:59,680 --> 00:04:00,190
Never.

60
00:04:00,370 --> 00:04:06,550
But in the case of this, this method, using Makita times to make sure that the save method was called

61
00:04:06,550 --> 00:04:09,100
exactly one time is a better option.

62
00:04:09,370 --> 00:04:13,930
So I will do read this one and there's one improvement that I can do to my method.

63
00:04:14,320 --> 00:04:22,420
We have used static methods like for example, Makita times is a static method and Makita is a static

64
00:04:22,420 --> 00:04:22,810
method.

65
00:04:23,110 --> 00:04:27,820
Every time we call this static methods, we need to refer my key to class.

66
00:04:28,210 --> 00:04:34,480
So instead of repeating Makita class, every time I need to call a static method, I will add a static

67
00:04:34,480 --> 00:04:36,970
input statement to my class instead.

68
00:04:37,000 --> 00:04:40,180
So I will scroll up and will add the static input.

69
00:04:43,130 --> 00:04:48,100
Playing this and now I can delete my key the class from my test it.

70
00:04:48,320 --> 00:04:55,070
So here when I use argument matcher, I can delete my kita and use just any.

71
00:04:56,200 --> 00:04:58,570
And here as well, I can do with my kid.

72
00:04:58,930 --> 00:05:02,350
Now let's execute this test method to make sure that it still works.

73
00:05:04,260 --> 00:05:05,160
And it passes.

74
00:05:06,970 --> 00:05:14,800
Now when we use myki to verify together with times verification mode, then if the value of the wanted

75
00:05:14,800 --> 00:05:20,380
number of times is only one, we can actually omit verification mode altogether.

76
00:05:20,650 --> 00:05:23,470
And this is because one is a default value.

77
00:05:23,860 --> 00:05:30,730
So when it is number of times only one, I can actually delete verification lock and it should still

78
00:05:30,760 --> 00:05:34,720
work and verify that the safe method was called exactly one time.

79
00:05:35,140 --> 00:05:36,910
Now will run this method one more time.

80
00:05:39,710 --> 00:05:40,490
And it works.

81
00:05:41,710 --> 00:05:47,230
So with this configuration, when we now do not have verification mode, when we use default value,

82
00:05:47,620 --> 00:05:51,910
if I accidentally invoke save method twice, it should also thing.

83
00:05:52,330 --> 00:05:53,220
So let's try.

84
00:05:53,230 --> 00:05:59,830
I'll go inside of create user method and I will add one more invocation of this save method.

85
00:05:59,860 --> 00:06:00,460
Save it.

86
00:06:01,240 --> 00:06:03,940
Go back to my test method and run it again.

87
00:06:05,990 --> 00:06:09,080
And now it fails because there are too many actual implications.

88
00:06:09,410 --> 00:06:09,740
All right.

89
00:06:09,740 --> 00:06:11,450
So let's make it pass again.

90
00:06:11,540 --> 00:06:17,780
I will go back to my user service implementation and we'll fix my code, save it, go back to my test

91
00:06:17,780 --> 00:06:19,190
method and run it again.

92
00:06:20,320 --> 00:06:21,040
And it works.

93
00:06:22,540 --> 00:06:22,870
All right.

94
00:06:22,870 --> 00:06:28,480
So now you know how to make sure that the dependency logic inside of the method that you are testing

95
00:06:28,780 --> 00:06:32,680
is used once, more than once, or it was never used at all.

96
00:06:32,920 --> 00:06:34,330
Well, let's continue to the next lesson.

