1
00:00:00,210 --> 00:00:01,320
In the following lessons.

2
00:00:01,320 --> 00:00:07,530
We are going to test GP entity and it is not often that developers write test methods to validate their

3
00:00:07,530 --> 00:00:12,030
entity classes, but if needed you can tell GP entities as well.

4
00:00:12,240 --> 00:00:18,390
So as an example we will use a user entity class which is a regular Java class with some properties

5
00:00:18,390 --> 00:00:26,220
getter and setter methods, but it will also have GP annotations in it and you can find this class in

6
00:00:26,220 --> 00:00:27,900
the i o package.

7
00:00:27,900 --> 00:00:32,580
Here it is user entity in the project that is provided for this section.

8
00:00:32,580 --> 00:00:38,400
So I have this class currently opened in my development environment and it has a few properties like

9
00:00:38,400 --> 00:00:45,660
for example, user ID, first name, last name, email, encrypted password and it has some getter and

10
00:00:45,660 --> 00:00:46,770
setter methods.

11
00:00:46,770 --> 00:00:52,710
Now notice that this class is also annotated with some persistence annotations.

12
00:00:52,710 --> 00:00:58,500
It is annotated with entity annotation which will mark this class as persistent entity.

13
00:00:58,710 --> 00:01:05,489
And this means that we will be able to use Sprint data IGP framework to persist an object of this class

14
00:01:05,489 --> 00:01:07,200
into a database table.

15
00:01:07,380 --> 00:01:12,720
So how it will work is when we start our springboard application.

16
00:01:12,720 --> 00:01:18,420
Spring Framework will scan all classes looking for classes with different annotations.

17
00:01:18,630 --> 00:01:26,040
And once it finds a class with annotations, depending on what annotations this class is using, Spring

18
00:01:26,040 --> 00:01:28,230
Framework will know how to deal with them.

19
00:01:28,260 --> 00:01:34,440
It will create an object of this class and it will place this object as a bean into sprint application

20
00:01:34,440 --> 00:01:35,220
context.

21
00:01:35,580 --> 00:01:42,210
Now, when it finds class that is annotated with entity annotation, it will process this class and

22
00:01:42,210 --> 00:01:44,850
will treat it as a persistent entity.

23
00:01:45,210 --> 00:01:53,040
Notice that this class is also annotated with table annotation with a name users, and this means that

24
00:01:53,040 --> 00:01:57,540
the framework will create a database table called users for us.

25
00:01:57,630 --> 00:02:02,910
We do not need to create this database table manually by running SQL queries.

26
00:02:02,940 --> 00:02:08,699
It will be created for us by the framework at the time when our application starts up.

27
00:02:08,759 --> 00:02:16,980
So you can think of Entity as a Java class that describes database table, and each property in this

28
00:02:16,980 --> 00:02:19,110
class is a database column.

29
00:02:19,140 --> 00:02:26,010
Notice that each property in this class is also annotated with column annotation, and this means that

30
00:02:26,010 --> 00:02:31,140
when users table is created for us, it will be created with these columns.

31
00:02:31,140 --> 00:02:37,620
It will have a column, user ID, it will have a column, first name, last name, email and so on.

32
00:02:37,620 --> 00:02:42,750
And it will also have a column ID which is on the top here.

33
00:02:42,780 --> 00:02:47,390
And this column will be a value which will be out generated for us.

34
00:02:47,400 --> 00:02:51,600
It will be a primary key with a value that will be auto generated.

35
00:02:51,840 --> 00:02:57,840
And once this entity object is persisted, we will get a new row recorded in a database table.

36
00:02:57,960 --> 00:03:04,470
So each entity object that you persist gets recorded as a new row in a database table.

37
00:03:04,470 --> 00:03:09,690
Now notice that column annotation also accepts some additional parameters.

38
00:03:09,840 --> 00:03:16,410
For example, we specified that the value of user's first name cannot be now and it cannot be longer

39
00:03:16,410 --> 00:03:21,360
than 50 characters and the value of email address, for example.

40
00:03:22,250 --> 00:03:27,400
It cannot be now and it cannot be longer than 120 characters.

41
00:03:27,410 --> 00:03:34,070
So what we can do is we can write test methods to validate that these fields are configured correctly

42
00:03:34,070 --> 00:03:40,370
and that if you try to persist an entity object that contains an invalid value, then you will get an

43
00:03:40,370 --> 00:03:41,240
error message.

44
00:03:41,540 --> 00:03:42,950
All right, so let's continue.

45
00:03:42,950 --> 00:03:48,200
And in the following lesson, we will create a new test method to test this user entity.

