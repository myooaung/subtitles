WEBVTT
1
00:00:00.210 --> 00:00:05.580
There is one more very important property that I would like my user object to return and it is the user

2
00:00:05.580 --> 00:00:05.850
ID.

3
00:00:06.540 --> 00:00:14.040
Usually when a new user is created the returned user object, it contains a unique I.D. of this new

4
00:00:14.040 --> 00:00:14.430
user.

5
00:00:14.790 --> 00:00:20.460
So in this video, listen, I'm going to make my create user method, generate user items.

6
00:00:20.490 --> 00:00:20.790
Well.

7
00:00:21.060 --> 00:00:25.050
And to do that, I will use these same this method.

8
00:00:25.290 --> 00:00:27.960
So I'm going to add one more assertion here.

9
00:00:28.320 --> 00:00:35.820
Now, ideally, we should always aim to have only one strong assertion per test method, because creating

10
00:00:35.820 --> 00:00:41.100
a very long list of different assertions in a single this method is a bad practice.

11
00:00:41.460 --> 00:00:47.700
The best practice is to have one test method, to test one specific functionality, and to have one

12
00:00:47.700 --> 00:00:49.020
strong assertion for it.

13
00:00:49.320 --> 00:00:54.360
But there use cases when it makes sense to add multiple assertions in a single test mounted.

14
00:00:54.630 --> 00:00:57.600
And in my opinion, this test method is a good example.

15
00:00:57.930 --> 00:01:04.319
I could create five separate test methods to validate each of these user properties separately.

16
00:01:04.709 --> 00:01:10.530
But since these assertions simply check that the user object is created and its values are set.

17
00:01:10.740 --> 00:01:17.070
In my opinion, it makes good sense to keep these assertions in this same test method for other use

18
00:01:17.070 --> 00:01:17.470
cases.

19
00:01:17.490 --> 00:01:19.890
I will, of course, create separate test methods.

20
00:01:20.370 --> 00:01:22.570
All right, so let's generate a user idea.

21
00:01:22.590 --> 00:01:28.080
I will continue to use intel driven development approach and I will start writing test first.

22
00:01:29.260 --> 00:01:31.990
I will use assert not now assertion.

23
00:01:32.740 --> 00:01:34.780
User get 80.

24
00:01:35.650 --> 00:01:42.490
Now my code does not compile because user object does not have a getter for property id, so I'll need

25
00:01:42.490 --> 00:01:43.570
to work on that.

26
00:01:43.570 --> 00:01:47.830
I will open who requires and I will add a new instance.

27
00:01:47.830 --> 00:01:48.370
Foreign ball.

28
00:01:49.770 --> 00:01:52.860
I will update constructor to initialize this property.

29
00:01:55.100 --> 00:01:58.460
And I will add a guitar method to return this volume.

30
00:02:05.040 --> 00:02:05.380
All right.

31
00:02:05.380 --> 00:02:10.240
So let's save changes in our other class and go back to test method.

32
00:02:10.570 --> 00:02:16.780
Now the compile error is now gone and I will also add a message that will be displayed if this assertion

33
00:02:16.780 --> 00:02:17.170
fails.

34
00:02:17.350 --> 00:02:22.250
For example, user ID is missing now because there are no more errors.

35
00:02:22.360 --> 00:02:24.100
I can try running my test method.

36
00:02:24.520 --> 00:02:25.240
Let's try.

37
00:02:28.630 --> 00:02:30.220
And my test meant that France.

38
00:02:31.770 --> 00:02:38.300
Using cannot be applied to given types and the errors taken in user service implementation class.

39
00:02:38.660 --> 00:02:46.110
Here I'm creating a user object and to be able to create it, I need to add one more parameter which

40
00:02:46.110 --> 00:02:47.310
is going to be user ID.

41
00:02:47.730 --> 00:02:51.000
Now I will use your ID to generate a unique value.

42
00:02:52.690 --> 00:02:53.230
Like this.

43
00:02:53.440 --> 00:03:00.160
Now I will save my user service implementation clause and I will try running my test method one more

44
00:03:00.160 --> 00:03:00.490
time.

45
00:03:05.920 --> 00:03:07.150
And now it passes.

46
00:03:07.840 --> 00:03:10.030
Let's minimize console.

47
00:03:10.630 --> 00:03:10.930
All right.

48
00:03:10.930 --> 00:03:16.630
So we have assertions to validate if the object is not now and we have assertions to validate it.

49
00:03:16.630 --> 00:03:19.270
First name, last name, email address are correct.

50
00:03:19.270 --> 00:03:21.220
And if ID is also set.

51
00:03:21.610 --> 00:03:27.550
If I need to validate other use cases like for example, if I need to validate the minimum length and

52
00:03:27.550 --> 00:03:34.270
the maximum length of user, first name or user, last name or any of this properties, then I will

53
00:03:34.270 --> 00:03:35.740
create separate test methods.

54
00:03:36.250 --> 00:03:37.960
Also create a separate test method.

55
00:03:37.960 --> 00:03:44.920
For example, if I need to validate the length or the strength of the password, or if I need to validate

56
00:03:44.920 --> 00:03:50.980
that email address has correct format, all of these formulations will be already separate use cases

57
00:03:51.280 --> 00:03:53.530
and that will use separate test methods for that.

58
00:03:53.950 --> 00:03:59.050
For example, in the following lesson, we will consider a negative scenario for which we will need

59
00:03:59.050 --> 00:04:01.780
to create a separate test meant Let's continue.

