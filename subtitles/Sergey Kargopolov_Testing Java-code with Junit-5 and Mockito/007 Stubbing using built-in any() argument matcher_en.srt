1
00:00:00,330 --> 00:00:05,730
In this lesson you will learn how to stop a method using Mikita's built in arguments manager.

2
00:00:06,270 --> 00:00:13,140
Now we have used more connotation to tell Mikita to create a mock object that implements users repository

3
00:00:13,140 --> 00:00:19,980
interface because user's repository is now a mock object and it is not a real one.

4
00:00:20,310 --> 00:00:25,680
We need to tell Mikita what to do when we invoke methods that are defined in this interface.

5
00:00:26,280 --> 00:00:28,620
So let's do it in one of our test methods.

6
00:00:28,650 --> 00:00:32,650
For example, the very first one, I do not have a range section here.

7
00:00:32,670 --> 00:00:40,650
I have moved it to the init method so I will create a new one and in the orange section I will use a

8
00:00:40,650 --> 00:00:43,980
special method that Mikita provides and it is called when.

9
00:00:45,720 --> 00:00:46,560
Inside of this.

10
00:00:46,560 --> 00:00:49,080
One minute I will invoke the save method.

11
00:00:49,500 --> 00:00:50,420
I will use use.

12
00:00:50,430 --> 00:00:51,630
Suppose the object.

13
00:00:52,230 --> 00:00:54,300
And then I will quote save method on it.

14
00:00:54,750 --> 00:01:02,970
Now, with this line of code, I see that when a save method is called on, uses three powers to object.

15
00:01:03,240 --> 00:01:05,489
Then I wanted to do something.

16
00:01:05,880 --> 00:01:12,420
And because save method returns above in volume, I will need to make it return a boolean value through.

17
00:01:13,020 --> 00:01:18,060
Okay, so in this particular example, the save method that is defined the end user.

18
00:01:18,060 --> 00:01:20,460
Suppose the interface returns a boolean value.

19
00:01:20,820 --> 00:01:26,580
But if you look at other options, then you will see that you can also request Makita to throw an exception.

20
00:01:26,580 --> 00:01:28,620
For example, when the saved method is called.

21
00:01:28,950 --> 00:01:34,830
Or we can even request Makita to call a real method when this save method is invoked.

22
00:01:35,350 --> 00:01:35,570
Right.

23
00:01:35,820 --> 00:01:42,330
But for now, when the save method is invoked, I wanted to return a predefined value which is going

24
00:01:42,330 --> 00:01:43,890
to be a boolean value.

25
00:01:43,890 --> 00:01:44,200
True.

26
00:01:44,790 --> 00:01:52,290
So with this line of code, I now see that when the saved method is called on the user repository object,

27
00:01:52,740 --> 00:01:55,290
then I want Makita to return to.

28
00:01:56,310 --> 00:02:02,010
Now the same method accepts a parameter, and in our case it is a user object.

29
00:02:02,400 --> 00:02:08,570
And because I do not invoke real slave method, it does not really what I I'm going to pass here as

30
00:02:08,580 --> 00:02:14,640
user object so we can create an object of user clause and then stub with with any values we want.

31
00:02:15,180 --> 00:02:15,570
Okay.

32
00:02:15,570 --> 00:02:21,970
So to start by I meant that in Makita we can use my built building arguments matcher and to do that

33
00:02:21,990 --> 00:02:29,940
inside of save method has it parameter I will type my ketone and then any which is an argument matcher

34
00:02:30,180 --> 00:02:35,610
and then I need to provide a data type or a name of the class which is going to be user class.

35
00:02:36,360 --> 00:02:36,690
All right.

36
00:02:36,690 --> 00:02:43,290
So with this line of code, we tell Makita that it can use any object of user clause and we do not really

37
00:02:43,290 --> 00:02:46,140
care about values that user object has.

38
00:02:46,590 --> 00:02:52,950
Okay, so let's save changes in this class and now we are ready to run our method and see if it passes.

39
00:02:53,370 --> 00:02:55,980
So I will run only this one method.

40
00:02:58,540 --> 00:03:00,190
And we have a and test method.

41
00:03:00,730 --> 00:03:02,770
Now let's run this method again.

42
00:03:02,800 --> 00:03:06,990
But this time we will configure save method to return value false.

43
00:03:07,000 --> 00:03:13,030
Assuming that when save method was called, it could not proceed to the details and the result is a

44
00:03:13,030 --> 00:03:14,320
boolean value false.

45
00:03:14,770 --> 00:03:15,790
Let's see what happens.

46
00:03:16,090 --> 00:03:19,510
I will save changes and then I will run this test method again.

47
00:03:21,130 --> 00:03:28,060
And now a testament that fails because saved method returned false and according to how we have implemented

48
00:03:28,420 --> 00:03:30,400
the create using method.

49
00:03:32,210 --> 00:03:39,920
Here if the save method returns false, we through user service exception with a message could not create

50
00:03:39,920 --> 00:03:40,250
user.

51
00:03:40,730 --> 00:03:42,170
And this is what we have here.

52
00:03:42,890 --> 00:03:46,730
A user service exception with the message could not create user.

53
00:03:47,240 --> 00:03:50,180
Okay, so let's make our test method pass again.

54
00:03:50,510 --> 00:03:55,280
And to do that, I will go back to my test method and will configure Makita to return.

55
00:03:55,280 --> 00:03:55,850
True.

56
00:03:56,060 --> 00:04:02,120
When saved method is involved now I will see changes and will run this test method again and now it

57
00:04:02,120 --> 00:04:02,570
passes.

58
00:04:02,960 --> 00:04:06,260
Now to see if the real save method is never called.

59
00:04:06,260 --> 00:04:13,730
I can execute this test method in engine backbone and to do that I will open saved method and will add

60
00:04:13,730 --> 00:04:16,220
in debugger breakpoint inside of saved method.

61
00:04:16,550 --> 00:04:22,580
I'm doing it just to see that the real segment that is never included and my key to always use a smoke

62
00:04:22,580 --> 00:04:24,170
object that I have created.

63
00:04:24,560 --> 00:04:29,990
Now I will go back to use a service test and I will run this test method, Ingeborg mode.

64
00:04:30,410 --> 00:04:33,710
I will click on the wrong button and then will choose debug.

65
00:04:35,460 --> 00:04:37,050
My test meant did wrong.

66
00:04:37,350 --> 00:04:42,120
It did pass, but a breakpoint in a real segment that never triggered.

67
00:04:42,570 --> 00:04:50,340
Okay, so this confirms that the business logic inside of my creative romantic was tested in isolation

68
00:04:50,340 --> 00:04:57,840
without invoking code dependencies, without executing real code inside of this save method.

69
00:04:58,230 --> 00:05:01,680
Okay, so everything is working well and we're good to continue.

