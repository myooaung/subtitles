1
00:00:00,180 --> 00:00:04,950
In this lesson, we will run our unit test and we will generate code coverage, report for it.

2
00:00:05,370 --> 00:00:10,170
And to do that, you can open any of your existing projects that have units created.

3
00:00:10,530 --> 00:00:14,580
Now, there are different ways to run unit tests and generate code cartridge report.

4
00:00:14,880 --> 00:00:22,470
And one of the ways is to simply do right mouse click and the open test class and then choose run unit

5
00:00:22,470 --> 00:00:24,240
test with coverage.

6
00:00:24,660 --> 00:00:27,810
If I do right mouse click outside of test method name.

7
00:00:28,170 --> 00:00:33,210
It should go for me to run all unit tests in the selected class with coverage.

8
00:00:33,570 --> 00:00:39,900
And then the way to run unit tests with coverage, I can simply do right mouse click on the test clause

9
00:00:40,110 --> 00:00:44,430
and then choose a run with this selected class with coverage.

10
00:00:44,820 --> 00:00:48,600
Or there's another icon on the toolbar above here.

11
00:00:48,840 --> 00:00:52,260
It looks like a water shield with a play button.

12
00:00:52,560 --> 00:00:59,160
I can click it to execute all union tests in the currently open text class and generate code coverage

13
00:00:59,160 --> 00:00:59,910
reports for it.

14
00:01:00,330 --> 00:01:00,950
Let's try.

15
00:01:00,990 --> 00:01:02,280
I will click on this icon.

16
00:01:03,770 --> 00:01:05,209
Whole unit tests run.

17
00:01:05,600 --> 00:01:10,820
And in the top right corner here, we have a new panel with a code coverage report.

18
00:01:11,270 --> 00:01:17,000
Now, this is the same panel screenshots of which you have seen in previous video that said it displays

19
00:01:17,000 --> 00:01:22,640
code coverage report organized by package, and you can double click on the package to see code coverage

20
00:01:22,640 --> 00:01:23,960
support for each class.

21
00:01:24,590 --> 00:01:26,930
Let me expand the panel a little bit.

22
00:01:27,350 --> 00:01:29,300
So here we have a package name.

23
00:01:29,630 --> 00:01:32,750
We have class method and line section.

24
00:01:33,020 --> 00:01:39,470
And if I go into the package here, I see a list of classes for which we have test coverage, support

25
00:01:39,470 --> 00:01:40,370
on the left side.

26
00:01:40,730 --> 00:01:47,060
And on the right side, we see test coverage report related to each class methods in this class and

27
00:01:47,330 --> 00:01:48,800
lines of code in this class.

28
00:01:49,070 --> 00:01:55,820
And a similar code college report you will see on the left side here in the project panel.

29
00:01:56,480 --> 00:02:01,010
Let's minimize the bottom panel so that we can see it better.

30
00:02:01,550 --> 00:02:07,550
So here we have code college report displayed for those classes that were involved during unit test

31
00:02:07,560 --> 00:02:12,590
execution and classes that were not involved during the test method execution.

32
00:02:13,070 --> 00:02:16,460
They do not have the code coverage report generated.

33
00:02:16,460 --> 00:02:22,550
So user repository and user reports, the implementation do not have a code camera ship or displayed

34
00:02:22,550 --> 00:02:22,880
for them.

35
00:02:23,420 --> 00:02:29,300
Now, if I open one of these classes that does have code coverage report generated for it, for example,

36
00:02:29,300 --> 00:02:38,210
user series implementation, if I open it, then here on the left side panel, I can see green bar for

37
00:02:38,210 --> 00:02:42,050
those line numbers that were executed during unit test execution.

38
00:02:42,230 --> 00:02:47,780
And if there are lines of code that were not executed, then there will be a red bar.

39
00:02:48,020 --> 00:02:53,560
But I don't have any red pass at the moment, so let's create one.

40
00:02:53,570 --> 00:02:55,040
I will type a new method.

41
00:02:55,280 --> 00:02:58,160
For example, public point test.

42
00:02:59,980 --> 00:03:02,320
Or let's not confuse it with test.

43
00:03:02,320 --> 00:03:04,060
Let's call it demo method.

44
00:03:05,280 --> 00:03:06,860
And System.out.println.

45
00:03:08,290 --> 00:03:10,150
For example, that moment.

46
00:03:10,900 --> 00:03:13,420
Not because I did not have a unit test for this.

47
00:03:13,420 --> 00:03:14,090
--, I meant it.

48
00:03:14,110 --> 00:03:21,310
And because this demo method is not called by any other of my methods in this class, if I run unit

49
00:03:21,310 --> 00:03:26,620
tests with coverage, this method should have a red bar indicator on the left side.

50
00:03:27,010 --> 00:03:27,610
Let's try.

51
00:03:27,660 --> 00:03:30,640
So I will run unit tests with coverage again.

52
00:03:32,450 --> 00:03:38,090
And that will minimize the panel under the bottom and I will minimize the, quote, coverage report

53
00:03:38,090 --> 00:03:38,510
panel.

54
00:03:38,840 --> 00:03:40,880
And here is my read bar.

55
00:03:41,360 --> 00:03:46,640
We have green bar indicator for those lines of code that were executed by unit test.

56
00:03:46,910 --> 00:03:53,660
And we have a red bar for those lines of code that were not covered by unit test, which tells me that

57
00:03:53,660 --> 00:03:57,500
this code is not tested and I might want to create a unit test for it.

58
00:03:57,860 --> 00:04:02,240
Now, if you don't like the color used here indicator, then you can change it.

59
00:04:02,660 --> 00:04:08,930
And to do that, it will click on the bar itself and then choose settings icon to edit coverage colors.

60
00:04:09,710 --> 00:04:16,880
And here you can choose a different color for the bar for those lines that were not covered, partially

61
00:04:16,880 --> 00:04:19,010
covered or fully covered.

62
00:04:19,550 --> 00:04:23,840
For example, I will change a color for those lines of code that are fully covered.

63
00:04:24,200 --> 00:04:29,810
And to do that for the foreground option, I'll choose the color option, and that will make it just

64
00:04:29,810 --> 00:04:30,890
a little bit brighter.

65
00:04:30,890 --> 00:04:33,020
GREEN Now I will click on.

66
00:04:33,020 --> 00:04:33,560
Okay.

67
00:04:34,520 --> 00:04:36,560
Will minimize code coverage report.

68
00:04:37,480 --> 00:04:43,120
And now I have a bright green color in the country for those lines of code that are fully covered with

69
00:04:43,120 --> 00:04:43,780
unit tests.

70
00:04:44,410 --> 00:04:44,770
All right.

71
00:04:44,770 --> 00:04:47,490
So now you know how to generate code coverage.

72
00:04:47,510 --> 00:04:53,170
You produce an intelligent development environment, and it should help you find classes and methods

73
00:04:53,170 --> 00:04:56,770
in your application that have not been covered with unit tests.

74
00:04:57,340 --> 00:05:03,520
Now let's continue and in the following lesson, you will learn how to export this report in each HTML

75
00:05:03,520 --> 00:05:10,690
format so that you can share it with your team members or even publish on corporate intranet for others

76
00:05:10,690 --> 00:05:11,140
to see.

