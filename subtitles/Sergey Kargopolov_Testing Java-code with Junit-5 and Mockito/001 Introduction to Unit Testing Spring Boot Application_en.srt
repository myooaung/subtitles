1
00:00:00,240 --> 00:00:05,400
In previous lessons, you have learned to write unit tests for a regular job application.

2
00:00:05,460 --> 00:00:11,160
In this lesson, we'll talk about unit testing, but this time in a spring boot application.

3
00:00:11,870 --> 00:00:18,560
Now let's say we have springboard application that exposes a few the API endpoints, and this application

4
00:00:18,560 --> 00:00:19,860
has three layers.

5
00:00:19,880 --> 00:00:27,440
The first layer is a web layer or presentation layer where we also sometimes call it UI layer or user

6
00:00:27,440 --> 00:00:28,490
facing layer.

7
00:00:28,640 --> 00:00:34,700
So this is where we have our risk controller class with methods that handle HTTP requests.

8
00:00:35,360 --> 00:00:41,630
For example, one of the methods will be to handle GDB gate request and return a list of users.

9
00:00:41,780 --> 00:00:47,140
There will be more methods that this controller class will have, like for example, a method to create

10
00:00:47,150 --> 00:00:51,490
user and a method to update you the details or delete user details.

11
00:00:51,500 --> 00:00:58,640
But to keep this diagram simple, I will use just one get users method and then we have service layer

12
00:00:58,640 --> 00:01:01,130
where we have users service class.

13
00:01:01,160 --> 00:01:05,420
The service class contains methods that perform main business logic.

14
00:01:05,450 --> 00:01:11,390
Any complex business logic like for example, sorting or filtering will be done in the service layer

15
00:01:11,390 --> 00:01:18,320
class and to do its work, service layer might need to communicate with other sources, like, for example,

16
00:01:18,320 --> 00:01:19,580
with a database.

17
00:01:19,820 --> 00:01:26,510
And this is when our service layer class will involve classes and interfaces from data, where, for

18
00:01:26,510 --> 00:01:33,920
example, in the data layer we will have data access objects or GP repositories to read and write information

19
00:01:33,920 --> 00:01:35,060
into database.

20
00:01:35,090 --> 00:01:42,710
Now let's assume that we need to unit test the git users method because I want to unit test the get

21
00:01:42,710 --> 00:01:45,480
users method only this one single method.

22
00:01:45,500 --> 00:01:50,930
This means that I want to isolate the business logic that is inside of this and get use this method

23
00:01:50,930 --> 00:01:52,970
from all external dependencies.

24
00:01:52,970 --> 00:02:00,410
And this means that I want to isolate the git users method from executing real business logic that is

25
00:02:00,410 --> 00:02:02,850
in a service or in a data layer.

26
00:02:02,870 --> 00:02:05,960
And to do that, I will need to more user service.

27
00:02:05,960 --> 00:02:14,540
And if I mock user service, then users repository will also not be invoked to test my get users method

28
00:02:14,540 --> 00:02:15,800
in isolation.

29
00:02:16,040 --> 00:02:23,150
I will also not start the web server because when I'm unit testing, I'm not sending real requests.

30
00:02:23,150 --> 00:02:29,810
And this means that annotations like risk controller or git mapping, they will also not be involved.

31
00:02:29,810 --> 00:02:36,050
My production application code will have this annotations, but my unit tests will not use them.

32
00:02:36,320 --> 00:02:42,200
In fact, one unit testing code in springboard application we will not even load sprint application

33
00:02:42,200 --> 00:02:42,920
context.

34
00:02:42,920 --> 00:02:49,310
So none of these annotations will really be used, including service annotation in the service layer.

35
00:02:49,430 --> 00:02:55,550
Because I'm not going to start a web server and because sprint application context will not be created

36
00:02:55,550 --> 00:03:01,580
and business logic in other layers like service layer and data layer will not even be involved.

37
00:03:01,580 --> 00:03:08,330
I will be able to unit test my get users method in isolation from all other layers and from all other

38
00:03:08,330 --> 00:03:09,290
dependencies.

39
00:03:09,950 --> 00:03:11,780
So that's unit testing.

40
00:03:11,780 --> 00:03:18,740
But sometimes we do need to test if our code is properly integrated with Sprint framework and this is

41
00:03:18,740 --> 00:03:21,290
when we will start writing integration tests.

42
00:03:21,410 --> 00:03:22,700
So let's continue.

43
00:03:22,700 --> 00:03:28,040
And in the following lecture we will talk about integration testing in Sprint application.

