WEBVTT
1
00:00:00.420 --> 00:00:06.600
In this lesson, I'll give you a brief overview of a test method that I have created to test this query

2
00:00:06.600 --> 00:00:09.330
method find by user ID.

3
00:00:09.840 --> 00:00:13.500
All right, so let's go to a test class and have a look at it.

4
00:00:13.530 --> 00:00:19.440
Now, I have updated my test class with new changes and you can download this new class from a resources

5
00:00:19.440 --> 00:00:22.500
section that is attached to this video lesson.

6
00:00:22.590 --> 00:00:22.950
All right.

7
00:00:22.950 --> 00:00:29.970
So one of the changes that I have made to my test class is that I have introduced a new method that

8
00:00:29.970 --> 00:00:31.800
is called before each.

9
00:00:31.800 --> 00:00:38.700
This is a lifecycle method that is annotated with before each annotation, and it is a setup method

10
00:00:38.700 --> 00:00:42.990
to create and persist into a database table to users.

11
00:00:42.990 --> 00:00:47.940
Now let's scroll down back to my new test method, this one.

12
00:00:48.940 --> 00:00:53.290
Because I have moved to code that creates a new user to a set up method.

13
00:00:53.350 --> 00:00:57.100
The range section of my new test method is empty.

14
00:00:57.280 --> 00:01:04.599
In the ACT section, I use user repository object and I invoke my method and the test which is found

15
00:01:04.599 --> 00:01:12.250
by user ID and as a parameter I give it user ID of a second user that I have persisted into a database

16
00:01:12.250 --> 00:01:12.870
table.

17
00:01:12.880 --> 00:01:19.990
And if the query method that I have created works well, and if there is a user with this user ID found

18
00:01:19.990 --> 00:01:26.110
in the database table, then in response back, I should get a user entity object containing details

19
00:01:26.110 --> 00:01:34.330
of my second user and in the assert section I first make sure that stored user object is not now and

20
00:01:34.330 --> 00:01:40.570
then I make sure that the received user entity object contains expected user ID.

21
00:01:40.840 --> 00:01:46.260
All right, so now let's run all test methods in my test class and see if they work.

22
00:01:46.270 --> 00:01:50.860
I'll scroll up and I will run both of my test methods.

23
00:01:52.630 --> 00:01:55.050
And I have both of my test methods passing.

24
00:01:55.060 --> 00:01:58.240
Now let's make the new test method fail.

25
00:01:58.440 --> 00:02:02.800
Let's assume that we have used a different user ID to find the user.

26
00:02:03.040 --> 00:02:08.380
I will provide an invalid user ID something like this and I will run it.

27
00:02:10.789 --> 00:02:16.960
And it fails because user with provided user ID was not found.

28
00:02:16.970 --> 00:02:19.190
The very first assertion triggered.

29
00:02:19.220 --> 00:02:22.280
Now let's provide user ID of a first user.

30
00:02:23.340 --> 00:02:25.860
User ID one and let's run it again.

31
00:02:26.550 --> 00:02:29.490
It should fail again, but with a different error message.

32
00:02:30.780 --> 00:02:38.890
Now it fails because user ID two and user ID one does not match and we get a display message returned.

33
00:02:38.910 --> 00:02:42.300
User ID does not match expected value.

34
00:02:42.480 --> 00:02:43.950
All right, so it all works.

35
00:02:43.950 --> 00:02:46.050
Let's make it pass again.

36
00:02:49.410 --> 00:02:50.640
And it passes.

37
00:02:50.730 --> 00:02:51.090
All right.

38
00:02:51.090 --> 00:02:53.510
So it looks like everything is working well for us.

39
00:02:53.520 --> 00:02:58.560
And you now know how to test GP query methods for your GP a repository.

