1
00:00:00,330 --> 00:00:04,770
In previous lessons you have learnt about two different types of tests in your unit.

2
00:00:04,980 --> 00:00:11,610
These are test methods that are annotated with test annotations and test methods that are annotated

3
00:00:11,610 --> 00:00:14,250
with parameterized tests on a patient.

4
00:00:14,520 --> 00:00:18,180
Now test methods that are annotated with test annotation.

5
00:00:18,780 --> 00:00:25,170
These are regular test methods and when executed they run one time on test matters that are annotated

6
00:00:25,170 --> 00:00:27,180
with parameterized test annotation.

7
00:00:27,600 --> 00:00:33,840
They accept method arguments and they can execute multiple times depending on how many sets of arguments

8
00:00:33,840 --> 00:00:40,020
we provide in other types of test methods is called a repeated test, and these test methods are annotated

9
00:00:40,020 --> 00:00:42,120
with repeated test retention.

10
00:00:42,540 --> 00:00:45,740
Let's actually create a new class for this demonstration.

11
00:00:45,750 --> 00:00:49,230
I will create a new Java class and we'll call it demo.

12
00:00:49,230 --> 00:00:50,070
Repeat a test.

13
00:00:52,240 --> 00:00:57,850
I will add it to it and I will copy and paste one of the existing test methods.

14
00:00:58,210 --> 00:00:59,470
For example, this one.

15
00:01:04,390 --> 00:01:10,750
I will also need to copy code that initializes calculator object so I will copy before each method.

16
00:01:12,950 --> 00:01:19,130
And we'll paste it into my demo repeat test class and we'll also define calculator property.

17
00:01:20,970 --> 00:01:21,670
I think this.

18
00:01:22,730 --> 00:01:23,060
All right.

19
00:01:23,060 --> 00:01:28,190
So this is a regular test method and it is annotated with test annotation.

20
00:01:28,700 --> 00:01:34,790
For this method to repeat multiple times, we will need to remove this test plantation and use repeated

21
00:01:34,790 --> 00:01:36,140
test annotation instead.

22
00:01:36,470 --> 00:01:41,180
So I will remove it and will use repeated test orientation instead.

23
00:01:41,510 --> 00:01:47,480
Now, in the brackets of repeated test annotation, we will need to provide the number of times that

24
00:01:47,480 --> 00:01:49,070
we want this test mandatory.

25
00:01:49,640 --> 00:01:50,960
For example, three times.

26
00:01:51,470 --> 00:01:51,770
Right?

27
00:01:51,770 --> 00:01:58,580
So repeated test annotation allows us to repeat the same test method multiple times and make sure that

28
00:01:58,580 --> 00:02:01,340
if it is repeated again, then it still passes.

29
00:02:01,670 --> 00:02:08,780
And if I run this test method now, it should run not one time but three times, and I expected to pass

30
00:02:08,780 --> 00:02:09,770
all three times.

31
00:02:10,220 --> 00:02:13,340
I will click on the run button and will run this test method.

32
00:02:15,180 --> 00:02:16,020
And here we go.

33
00:02:16,260 --> 00:02:21,570
The test meter ran three times and each repetition is successful.

34
00:02:21,810 --> 00:02:28,420
Now, each invocation of repeated test method behaves exactly like the execution of a regular test.

35
00:02:28,980 --> 00:02:35,730
This means that for each repetition, the lifecycle methods like, for example, before each or after

36
00:02:35,730 --> 00:02:37,350
each will also be executed.

37
00:02:37,830 --> 00:02:44,820
In this test class, I have added a method that is annotated with before each annotation, and I see

38
00:02:45,060 --> 00:02:49,800
a System.out.println in the console that this method has executed.

39
00:02:50,430 --> 00:02:56,820
Now, if needed, we can also get access to reputation information inside of our test method.

40
00:02:57,180 --> 00:03:05,280
And to do that unit allows us to inject repetition, formation object as a method argument to our test

41
00:03:05,280 --> 00:03:05,610
method.

42
00:03:05,880 --> 00:03:06,930
So let's do that.

43
00:03:07,410 --> 00:03:09,750
I will inject repetition and formation.

44
00:03:10,930 --> 00:03:12,490
We'll put it on a new one.

45
00:03:13,240 --> 00:03:19,900
And now that they have repetition formation object injected into my test method, I can get repetition

46
00:03:19,900 --> 00:03:20,980
information from it.

47
00:03:21,430 --> 00:03:27,850
For example, if I try to access it, I can get the total repetitions number and they can get the kinds

48
00:03:27,850 --> 00:03:31,990
repetition number and we can use this found in our test method if needed.

49
00:03:32,290 --> 00:03:34,030
Let's print them out for now.

50
00:03:34,390 --> 00:03:41,410
I will build in this line and maybe below I will add a new System.out.println and will print this values.

51
00:03:42,450 --> 00:03:44,340
For example, repetition number.

52
00:03:44,340 --> 00:03:46,170
And then I will add this number.

53
00:03:50,590 --> 00:03:51,820
Repetition number.

54
00:03:52,090 --> 00:03:57,640
And then I concatenate to you to the current repetition number of total repetitions.

55
00:03:58,270 --> 00:04:04,750
Now, additionally to injecting the repetition information to our test method, we can also inject test

56
00:04:04,750 --> 00:04:08,830
information, object and get information about the currently running test.

57
00:04:09,280 --> 00:04:14,830
To do that, I will inject the second method argument, which is going to be this information.

58
00:04:15,870 --> 00:04:21,120
And from this test information, I will rip the name of the currently running test method.

59
00:04:21,450 --> 00:04:29,310
For example, I will edit the System.out.println line above and will say running and then will use test

60
00:04:29,310 --> 00:04:32,940
information object and will get the test method name.

61
00:04:33,030 --> 00:04:39,210
And from that test method name I can get the name itself, but I could also use this test information

62
00:04:39,210 --> 00:04:43,470
object to access the display name of this test method.

63
00:04:43,920 --> 00:04:47,160
All right, so let's run this test mounted again and see how it works.

64
00:04:49,190 --> 00:04:57,110
And here's our output for each iteration we've printed, executing before each month, then a run in

65
00:04:57,650 --> 00:05:04,310
and then the test method name, the actual name of our test method and then repetition one of three.

66
00:05:04,520 --> 00:05:12,620
And then the cycle repeats again before each print in testament that name repetition to three and finally

67
00:05:12,620 --> 00:05:14,390
repetition three of the.

68
00:05:14,660 --> 00:05:22,310
So this confirms that these two lines work and we were able to get repetition information from the objects

69
00:05:22,310 --> 00:05:24,230
we have injected has made the arguments.

70
00:05:24,590 --> 00:05:31,580
Now you can also use repeated this limitation to change the display name of each repetition in the test

71
00:05:31,580 --> 00:05:32,450
report here.

72
00:05:32,450 --> 00:05:37,310
So currently the display name of the test method is division by zero.

73
00:05:37,310 --> 00:05:39,590
We have it here, so that works well.

74
00:05:39,890 --> 00:05:45,110
And then we have repetition, one of three, repetition to three and repetition three of three.

75
00:05:45,110 --> 00:05:47,690
So we can change this, this point name as well.

76
00:05:48,110 --> 00:05:55,070
And to do that, we will need to use a repeated test annotation and we can use its properties for example,

77
00:05:55,070 --> 00:06:01,820
instead of three, I could say value equals three and then comma and to provide constant use plane name,

78
00:06:01,820 --> 00:06:08,360
I will use name property and then in double quotes I'll provide the name and I can actually inject repetition

79
00:06:08,360 --> 00:06:13,910
information a right into this plane name to do that that will use complete variables like for example,

80
00:06:14,060 --> 00:06:16,850
in curly brackets, I will use this plane name.

81
00:06:18,160 --> 00:06:19,000
Repetition.

82
00:06:19,000 --> 00:06:22,720
And then another complete variable, which is current repetition.

83
00:06:24,530 --> 00:06:29,900
Oh, and then another template article, which is going to be total repetitions.

84
00:06:31,470 --> 00:06:38,040
Notice that to come up with a new display name, I have used template variables just plainly current

85
00:06:38,040 --> 00:06:41,160
repetition and total repetitions.

86
00:06:41,520 --> 00:06:47,820
These complete variables will be replaced with actual values and if you wonder what other template variables

87
00:06:47,820 --> 00:06:52,110
are there, then at the time of recording this realism, these are the only three.

88
00:06:52,470 --> 00:06:55,920
All right, so let's run our this method and see how it works.

89
00:06:57,400 --> 00:07:04,660
And now we have a new name for each reputation division by zero reputation one of three division one

90
00:07:04,660 --> 00:07:04,930
zero.

91
00:07:04,930 --> 00:07:07,930
Reputation two of three and division by zero.

92
00:07:07,930 --> 00:07:09,400
Reputation three of three.

93
00:07:09,790 --> 00:07:10,120
All right.

94
00:07:10,690 --> 00:07:12,220
So it works very well.

95
00:07:12,220 --> 00:07:19,090
And you now know how to use repeated test annotation and make your test method repeat a specific number

96
00:07:19,090 --> 00:07:24,370
of times to make sure that your method and the test still behaves consistently.

97
00:07:24,370 --> 00:07:30,880
And four provided input parameters still works as expected, even if you run it multiple times.

