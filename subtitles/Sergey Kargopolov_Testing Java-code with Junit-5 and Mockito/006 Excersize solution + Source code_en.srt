1
00:00:00,150 --> 00:00:05,939
In this lesson, I will give you a brief overview of how I have implemented this method to validate

2
00:00:05,939 --> 00:00:12,780
that user ID column accepts only unique values and there are different ways to implement this test method.

3
00:00:12,780 --> 00:00:16,470
And in this video lesson, I'll share with you just one of the ways.

4
00:00:16,470 --> 00:00:22,890
And if you need my source code, then you can download this class from resources folder that is attached

5
00:00:22,890 --> 00:00:24,090
to this video course.

6
00:00:24,360 --> 00:00:33,540
All right, so I have called my new test method test user entity when existing user ID provided it should

7
00:00:33,540 --> 00:00:35,190
throw exception.

8
00:00:35,310 --> 00:00:45,180
And in the arranged section I set a very easy value for user ID and the entity object that I use and

9
00:00:45,180 --> 00:00:52,830
persist into a database is created initially in the before each method.

10
00:00:52,830 --> 00:01:01,770
So in the before each method I create one instance of user entity and in my test method I update this

11
00:01:01,770 --> 00:01:05,160
instance with a very simple value one.

12
00:01:05,310 --> 00:01:09,180
And then I persist this user entity into a database table.

13
00:01:09,180 --> 00:01:17,310
But before that, in the same arranged section, I prepare a new user entity object and for this second

14
00:01:17,310 --> 00:01:23,940
user entity object, I also set exactly the same value of user ID just one.

15
00:01:23,940 --> 00:01:31,740
So now that I have two separate user entity objects with exactly the same value for user ID, if I attempt

16
00:01:31,740 --> 00:01:37,380
to persist them, then I should expect the exception to take place in a range section.

17
00:01:37,380 --> 00:01:46,320
I persist one instance of user entity and in the ACT section I persist the second instance of user entity

18
00:01:46,380 --> 00:01:53,490
and it is okay to persist user entity in the range section because the arranged section is used to prepare

19
00:01:53,520 --> 00:01:58,890
objects and systems state with information that is needed to test system under test.

20
00:01:58,890 --> 00:02:00,810
And this is exactly what I do.

21
00:02:00,810 --> 00:02:03,720
I prepare and persist one user entity.

22
00:02:03,720 --> 00:02:12,000
So now my system under test is set up and then I persist another user entity to test the use case I'm

23
00:02:12,000 --> 00:02:13,470
testing with this method.

24
00:02:13,650 --> 00:02:21,060
So for this method to pass right after I attempt to persist a new user entity with exactly the same

25
00:02:21,060 --> 00:02:26,010
value of user ID, I expect a persistence exception to take place.

26
00:02:26,010 --> 00:02:30,150
If exception does not take place, then this test method will fail.

27
00:02:30,150 --> 00:02:32,670
And this means that something is not right.

28
00:02:32,670 --> 00:02:38,070
And our database table does accept record with a duplicate user id.

29
00:02:38,100 --> 00:02:41,130
So let's try running this test method now.

30
00:02:44,250 --> 00:02:46,610
And we have a passing test method.

31
00:02:46,620 --> 00:02:54,300
Now let's assume that we have updated user entity and we have accidentally removed the constraint that

32
00:02:54,300 --> 00:02:58,050
makes our user ID column unique.

33
00:02:58,050 --> 00:03:06,360
So I will remove this constraint, save my user entity and I will run my test method one more time and

34
00:03:06,360 --> 00:03:09,420
I expect my test method to catch this issue.

35
00:03:12,550 --> 00:03:12,910
All right.

36
00:03:12,910 --> 00:03:19,540
And now my test method fails because both entity objects were successfully stored in a database table

37
00:03:19,540 --> 00:03:22,270
and no exception was thrown.

38
00:03:22,600 --> 00:03:30,040
All right, so let's go back to our user entity object and let's resolve the issue by making user ID

39
00:03:30,040 --> 00:03:36,010
column unique and go back to our test method and run it one more time.

40
00:03:37,860 --> 00:03:39,640
And now it passes again.

41
00:03:39,660 --> 00:03:40,050
All right.

42
00:03:40,050 --> 00:03:43,380
So everything is working well and we are going to continue.

