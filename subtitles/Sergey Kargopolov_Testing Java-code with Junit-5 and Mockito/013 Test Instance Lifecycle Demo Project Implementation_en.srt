1
00:00:00,480 --> 00:00:06,000
In this lesson, we're going to implement all four test methods in this class and I will start working

2
00:00:06,000 --> 00:00:07,920
on the before all method first.

3
00:00:08,340 --> 00:00:14,970
This method is not a test method and it is used to set up and prepare resources that are needed before

4
00:00:14,970 --> 00:00:16,980
your test methods start executing.

5
00:00:17,520 --> 00:00:22,560
And it is a good place to create a temporary database, for example, and establish a connection with

6
00:00:22,560 --> 00:00:23,310
that database.

7
00:00:23,790 --> 00:00:29,910
I do use user storage, so I will use this method to create an instance of that user storage.

8
00:00:30,420 --> 00:00:38,310
I will define a new member of our Invoke Users database and I will initialize it inside of set up method.

9
00:00:41,560 --> 00:00:46,600
I will also use this method to create a new instance of user service implementation class.

10
00:00:47,170 --> 00:00:49,390
So I will define a second member variable.

11
00:00:50,800 --> 00:00:53,740
And I will initialize it in the setup method.

12
00:00:57,270 --> 00:00:59,550
Mindset and inside of.

13
00:00:59,670 --> 00:01:04,620
After augmented, I can close data with connection or delete this database.

14
00:01:04,830 --> 00:01:11,760
I do not really use realty that we storage, but I do have a close method that destroys user storage.

15
00:01:12,150 --> 00:01:16,650
So I will use an object of users database until called the close method.

16
00:01:17,190 --> 00:01:17,490
All right.

17
00:01:17,490 --> 00:01:22,320
So now I can start working on a test method that creates new user.

18
00:01:22,530 --> 00:01:28,710
And in the arranged section of this test method, I will prepare user details that I want to be stored.

19
00:01:40,150 --> 00:01:44,170
In the ACT section, I will invoke my method under test.

20
00:01:48,530 --> 00:01:53,000
The heat user meant it will return the idea of created user.

21
00:01:53,330 --> 00:01:59,660
So I can check if this value is not now and I will do it in the search section.

22
00:02:06,960 --> 00:02:07,440
My desk.

23
00:02:07,860 --> 00:02:10,770
Now I can execute this method and see if it works.

24
00:02:16,070 --> 00:02:20,760
And it works now to properly test the creed using a method.

25
00:02:20,780 --> 00:02:25,730
Ideally, I should create additional test methods and test other details as well.

26
00:02:26,120 --> 00:02:30,020
But properly testing this method is not a goal of this demonstration.

27
00:02:30,170 --> 00:02:37,590
So I'll move on and we'll work on the update using method in the arranged section of test update using

28
00:02:37,610 --> 00:02:42,410
entered and prepare information that I want this user to be updated with.

29
00:02:58,030 --> 00:03:00,310
And this new user details.

30
00:03:00,310 --> 00:03:08,080
I have changed the first name only and I have left the last name unchanged and in the ACT section I

31
00:03:08,080 --> 00:03:09,850
will invoke method under test.

32
00:03:16,200 --> 00:03:20,670
Now for this method to work for the update use I meant it to work.

33
00:03:20,970 --> 00:03:28,800
I need to know the ID of already created user and to get this idea I will make first method the method

34
00:03:28,800 --> 00:03:35,460
that creates user details to store the idea of created user as a member variable.

35
00:03:35,820 --> 00:03:41,820
So I will scroll up and at the top of my class I will define a new member variable which is going to

36
00:03:41,820 --> 00:03:49,530
be stream and I will call it created user ID and I will initialize it to an empty stream.

37
00:03:50,070 --> 00:03:58,440
And now I will scroll down and in the first method I will delete the data type and I will make create

38
00:03:58,440 --> 00:04:02,310
user, assign the return value to a member variable.

39
00:04:02,640 --> 00:04:10,260
And in my second method that updates use a itself, I can now use this member variable the created user

40
00:04:10,260 --> 00:04:17,160
ID to invoke the update user method to obtain the details of this earlier created user.

41
00:04:17,430 --> 00:04:17,760
All right.

42
00:04:18,180 --> 00:04:24,090
So the test method that runs first will create a user and it will store user ID and a member variable.

43
00:04:24,450 --> 00:04:27,570
And the second method will use this user.

44
00:04:28,140 --> 00:04:32,130
And now I have to test methods that are tightly coupled.

45
00:04:32,700 --> 00:04:41,040
This second test method will only pass if the first method that creates user i.t execute successfully

46
00:04:41,040 --> 00:04:42,120
and also passes.

47
00:04:42,510 --> 00:04:42,780
All right.

48
00:04:42,780 --> 00:04:45,240
So now let's go back to our second test method.

49
00:04:45,600 --> 00:04:52,770
And in the assert section, I will assert that new user details matched the user details that were returned.

50
00:04:53,280 --> 00:04:55,740
To do that I will use assert equals.

51
00:04:57,010 --> 00:04:58,300
As expected value.

52
00:04:58,300 --> 00:05:06,070
I will use the object of new user details and I will get its first name, for example, and I will compare

53
00:05:06,070 --> 00:05:15,100
it with the actual first name that was returned after user was updated 9/10 and I will add an optional

54
00:05:15,100 --> 00:05:15,610
message.

55
00:05:16,650 --> 00:05:27,120
For example, the returned value of users first name is an correct input assert equals and they will

56
00:05:27,120 --> 00:05:28,530
do the same for the last name.

57
00:05:39,520 --> 00:05:39,880
All right.

58
00:05:40,210 --> 00:05:46,510
So the second test method depends on the first test method, and it will not pass if I run it alone.

59
00:05:46,810 --> 00:05:48,610
Let's try if I run this method.

60
00:05:50,940 --> 00:05:51,960
It does not pass.

61
00:05:52,530 --> 00:05:58,020
But if I execute all post methods in order, the second test method should pass.

62
00:05:58,030 --> 00:06:02,100
So I will scroll up and I will run all test methods in this class.

63
00:06:02,880 --> 00:06:09,390
And now I have all test methods passing the first two test methods to have assertions, but they still

64
00:06:09,390 --> 00:06:09,840
pass.

65
00:06:11,760 --> 00:06:18,540
And this proves that my test methods do run incorrect or they're one after another, and that these

66
00:06:18,540 --> 00:06:24,960
two test methods, the first test method and the second test method, they share the same class instance,

67
00:06:25,290 --> 00:06:31,680
the default g unit behavior where each test methods executes in its own instance of a test class has

68
00:06:31,680 --> 00:06:36,480
been changed, and both test methods now share the same instance of a test class.

69
00:06:36,780 --> 00:06:40,590
All right, now let's implement the find user details.

70
00:06:41,220 --> 00:06:44,130
In the end section, I will invoke method under test.

71
00:06:48,030 --> 00:06:52,920
And now I will assert that the return to object using details is not now.

72
00:06:58,270 --> 00:07:03,520
And I will also assert that the return to object user details has correct user ID.

73
00:07:11,380 --> 00:07:17,620
And now I have another dependent testament that I cannot execute this test testament at home and it

74
00:07:17,620 --> 00:07:20,950
will only pass the first test that is successful.

75
00:07:21,190 --> 00:07:24,460
So let's try running this test and that only.

76
00:07:26,330 --> 00:07:27,110
And it fails.

77
00:07:27,320 --> 00:07:31,460
But if there aren't alternate methods in the order, they are defined in this clause.

78
00:07:31,880 --> 00:07:32,930
Then they will pass.

79
00:07:33,230 --> 00:07:36,350
I will scroll up and we'll run all test methods.

80
00:07:39,490 --> 00:07:40,210
And it works.

81
00:07:40,540 --> 00:07:43,030
All right, so let's implement the last testament.

82
00:07:43,030 --> 00:07:43,210
It.

83
00:07:44,300 --> 00:07:46,850
Which is to test the delete user functionality.

84
00:07:47,240 --> 00:07:50,390
In the ACT section, I will invoke method under test.

85
00:07:53,500 --> 00:07:57,400
The delete user method is void and it does not return any value.

86
00:07:57,730 --> 00:08:01,030
So to check of this user has been successfully deleted.

87
00:08:01,240 --> 00:08:03,820
I will use the assert null assertion.

88
00:08:06,560 --> 00:08:10,640
And that will make it validate the returned value of get user details.

89
00:08:16,460 --> 00:08:19,970
And now I have another testament that needs to run in order.

90
00:08:20,360 --> 00:08:25,340
If it runs first, second or third, it will make all the test methods fail.

91
00:08:25,670 --> 00:08:32,000
And all test methods in this class will need to run in a single instance of a test class or everything

92
00:08:32,000 --> 00:08:32,390
fails.

93
00:08:32,870 --> 00:08:36,169
All right, so let's try executing this test along.

94
00:08:37,780 --> 00:08:38,679
It fails.

95
00:08:38,679 --> 00:08:41,710
And if I execute all test methods in this class.

96
00:08:44,620 --> 00:08:46,900
I have all test methods passing.

97
00:08:47,380 --> 00:08:47,680
All right.

98
00:08:47,680 --> 00:08:54,340
So I hope that this demonstration was helpful to you and you now know how to make your test methods

99
00:08:54,340 --> 00:09:00,100
execute in order and if needed, make them in a single instance of a test class.

