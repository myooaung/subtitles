1
00:00:00,210 --> 00:00:05,430
In this lesson, you will learn about new annotation that is called Mock Bean, and we will use this

2
00:00:05,430 --> 00:00:09,930
annotation to create a mock object for our user service.

3
00:00:10,080 --> 00:00:14,400
Now, you might wonder, why are we going to create mock object again?

4
00:00:14,430 --> 00:00:17,660
Are we not working on integration test in this section?

5
00:00:17,670 --> 00:00:22,100
And the answer is yes, we are working on the integration test.

6
00:00:22,110 --> 00:00:28,920
But in this section of the course we are testing web player only, only web slides of our application

7
00:00:28,920 --> 00:00:33,870
and we are not testing service layer and we are not testing data layer.

8
00:00:33,990 --> 00:00:41,400
We are testing if the create user method in the controller class is correctly integrated with a risk

9
00:00:41,400 --> 00:00:46,770
controller and with spring framework features related to risk controller.

10
00:00:46,770 --> 00:00:54,450
So because we are testing how our method under test which is create user works in integration with sprint

11
00:00:54,450 --> 00:00:58,770
framework components in the web player, it will be called an integration test.

12
00:00:58,770 --> 00:01:04,140
But I do agree because we start mocking dependencies, it does look like a unit test.

13
00:01:04,650 --> 00:01:12,120
So to isolate web player related code, the code inside of create user method that is annotated with

14
00:01:12,270 --> 00:01:17,520
post annotation from a real implementation of user service.

15
00:01:17,520 --> 00:01:22,620
I will need to mock user service object and to do that I will use mock bean annotation.

16
00:01:22,620 --> 00:01:29,790
So let's go back to our test method and I will scroll up a little bit and above the test method.

17
00:01:29,790 --> 00:01:36,990
On the class level, I will add one more field, I will use more bean annotation and I'm going to mock

18
00:01:37,020 --> 00:01:38,820
users service.

19
00:01:39,390 --> 00:01:39,670
Okay.

20
00:01:39,930 --> 00:01:48,090
So what this mock bean annotation will do is it will create a mock object for the object that implements

21
00:01:48,090 --> 00:01:49,770
user service interface.

22
00:01:49,770 --> 00:01:59,820
The user service is an interface and the only class that implements this interface is user service implementation.

23
00:01:59,820 --> 00:02:06,150
If there are other classes that implement the same interface, they will need to use qualifier annotation.

24
00:02:06,810 --> 00:02:11,280
Or you can also use mock bean annotation on the class level.

25
00:02:11,280 --> 00:02:19,140
In this case, what you're going to do, you can copy mung bean annotation and then define it on the

26
00:02:19,140 --> 00:02:20,070
class level.

27
00:02:20,070 --> 00:02:25,980
Inside of curly brackets, you will provide a list of all classes that it needs to mock.

28
00:02:25,980 --> 00:02:32,640
For example, in my case, it will be users service, implementation class, and then if there are more

29
00:02:32,640 --> 00:02:37,560
classes, then I will add comma and list other classes here.

30
00:02:37,560 --> 00:02:45,570
But I'm going to mock only one class and because I'm using mock bean here, then on the field level,

31
00:02:45,570 --> 00:02:51,180
I will simply need to also the mock object that I have created here.

32
00:02:51,660 --> 00:03:00,510
So it is either you list mock bins above the class and then auto wire them using auto annotation, or

33
00:03:00,510 --> 00:03:07,950
you do not use mock bean at the class level and simply use a single mock bean annotation above the field.

34
00:03:08,280 --> 00:03:11,550
So this will create a mock object for user service.

35
00:03:11,760 --> 00:03:17,970
Now the difference between mock bean annotation and a regular mikita's mock annotation.

36
00:03:18,120 --> 00:03:23,280
For example, in previous lessons we have used more connotation to create mock objects.

37
00:03:23,280 --> 00:03:27,120
So the difference between these two is that mock bean annotation.

38
00:03:27,120 --> 00:03:33,690
It will create mock object and it will automatically put this mock object into sprint application context.

39
00:03:33,960 --> 00:03:40,830
But this regular mikita's mock annotation that we have used earlier, it will not automatically place

40
00:03:40,830 --> 00:03:46,050
mock object into sprint application context, but because we're testing springboard application and

41
00:03:46,050 --> 00:03:52,230
we do need more object in Sprint application context, we will use mock being annotation instead of

42
00:03:52,230 --> 00:03:52,770
mock.

43
00:03:53,040 --> 00:03:53,370
All right.

44
00:03:53,370 --> 00:03:58,800
So now that we have created mock object for user service, we can mock its behavior.

45
00:03:58,800 --> 00:04:02,700
So let's go back to our users controller class and see what it does.

46
00:04:02,700 --> 00:04:09,950
So when our method in the controller class receives a HTTP post request sent to four slash users API

47
00:04:09,990 --> 00:04:18,420
endpoint, it will invoke this method and it will use user service object to invoke create user method

48
00:04:18,420 --> 00:04:22,740
on the service class because user's service is now a mock.

49
00:04:22,740 --> 00:04:30,990
We want to mock the create user method and we want to make it return a predefined user DTO object.

50
00:04:30,990 --> 00:04:32,550
So let's do that.

51
00:04:32,550 --> 00:04:40,050
Let's create a predefined user data object and make our user service mock object return a predefined

52
00:04:40,050 --> 00:04:40,470
object.

53
00:04:40,470 --> 00:04:43,110
Instead, I'll go back to my test class.

54
00:04:43,990 --> 00:04:50,170
We'll scroll down to the test method and maybe a right here and there user details request model.

55
00:04:50,170 --> 00:04:53,350
I will create a new user data object.

56
00:04:55,760 --> 00:04:59,900
And now I will use Setterfield to set user details information.

57
00:05:01,220 --> 00:05:02,150
First name.

58
00:05:04,360 --> 00:05:05,260
Last name.

59
00:05:07,010 --> 00:05:09,980
Email and user ID.

60
00:05:11,860 --> 00:05:18,110
Now here I create user data object and then I manually set each of the details separately.

61
00:05:18,130 --> 00:05:26,050
I can go this way, or because I do have user details already in this object and these are exactly same

62
00:05:26,050 --> 00:05:26,680
user details.

63
00:05:26,680 --> 00:05:32,980
What I can do, I can map all information from this object into user detail object.

64
00:05:32,980 --> 00:05:35,350
And this way my code will be shorter.

65
00:05:35,350 --> 00:05:37,000
So what I can do instead.

66
00:05:37,000 --> 00:05:41,980
Let me comment out this piece of code I can use model mapper.

67
00:05:42,870 --> 00:05:49,830
And I can mop information from the source object, which is going to be my user details request model

68
00:05:49,860 --> 00:05:53,610
to a new object of user DTO data type.

69
00:05:53,850 --> 00:05:58,770
And this will give me a user DTO object.

70
00:05:59,310 --> 00:06:08,400
This way my code is much shorter, but it doesn't have user ID, so I will need to set user ID manually.

71
00:06:10,820 --> 00:06:11,120
Okay.

72
00:06:11,120 --> 00:06:14,660
So now I can more create using method and make it return.

73
00:06:14,690 --> 00:06:25,250
This user DTO object lets input static method from work marketer marketer one then return user DTO.

74
00:06:25,250 --> 00:06:37,100
So when user service object is used to call create user method with any object of user DTO type as a

75
00:06:37,100 --> 00:06:42,080
parameter, then we will return the user data object.

76
00:06:42,080 --> 00:06:43,640
Let's input any.

77
00:06:44,700 --> 00:06:47,820
As a static from arguments my interest package.

78
00:06:47,820 --> 00:06:52,080
And now I think we can run this test method and see if it works.

79
00:06:52,260 --> 00:06:54,090
Let's do it in the following video lesson.

