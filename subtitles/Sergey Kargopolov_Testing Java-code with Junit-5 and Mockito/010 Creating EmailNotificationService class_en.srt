1
00:00:00,610 --> 00:00:07,330
To Stubbs save meant that with exception we've used my key this one then through method.

2
00:00:07,900 --> 00:00:15,820
Now if this same method was a void method, then this line would not even combine to stub both method,

3
00:00:15,820 --> 00:00:17,920
only to use slightly different approach.

4
00:00:18,310 --> 00:00:22,510
So in the following lectures you will learn how to stop avoid methods.

5
00:00:23,050 --> 00:00:28,900
Now, at this moment, I do not have any void methods in my project, so I'll create one.

6
00:00:29,320 --> 00:00:36,490
Now let's assume that after a user was created and persisted in our storage, we need to send this user

7
00:00:36,490 --> 00:00:40,030
an email message with request to confirm their email address.

8
00:00:40,330 --> 00:00:42,640
And this new method will be avoid method.

9
00:00:43,120 --> 00:00:47,630
All right, so let's quickly create a new service class inside of service package.

10
00:00:47,650 --> 00:00:49,330
I will create a new interface.

11
00:00:51,100 --> 00:00:53,650
And that will call it email verification series.

12
00:00:56,870 --> 00:00:59,570
Inside of this interface, I'll define one method.

13
00:01:00,290 --> 00:01:03,650
It's going to be VoIP and I will call it Scarjo.

14
00:01:03,650 --> 00:01:04,730
Email confirmation.

15
00:01:09,200 --> 00:01:11,450
So this new method is key to a male.

16
00:01:11,450 --> 00:01:18,230
Confirmation will be used to put your details into a queue so that email message can be sent to this

17
00:01:18,230 --> 00:01:18,620
user.

18
00:01:19,010 --> 00:01:24,680
When it's a Now let's implement this interface, I will do right mouse click on the interface name and

19
00:01:24,680 --> 00:01:27,620
then will choose implement interface.

20
00:01:28,670 --> 00:01:34,340
I will call this interface email verification service implementation and I will put it into the same

21
00:01:34,340 --> 00:01:35,440
destination package.

22
00:01:38,000 --> 00:01:39,710
I'll put a little comment into this.

23
00:01:43,390 --> 00:01:48,700
For example, put user details into email queue but will not write actual business logic for it.

24
00:01:48,700 --> 00:01:55,360
Now, at this moment, even having this empty voice method will be enough for us to write a unit test.

25
00:01:55,690 --> 00:02:02,020
But before we write our unit test, let's call this method from our user service implementation class.

26
00:02:02,410 --> 00:02:05,410
So inside of create user method.

27
00:02:06,660 --> 00:02:08,870
Right after a user was created.

28
00:02:08,889 --> 00:02:11,370
Right after I check if user was successful.

29
00:02:11,370 --> 00:02:17,610
Agreed, I will calls KGO email confirmation message and to do that they will need an instance of email

30
00:02:17,610 --> 00:02:18,810
verification service.

31
00:02:20,260 --> 00:02:24,400
And once they have it, he'll be able to call these kids your email confirmation method.

32
00:02:27,460 --> 00:02:29,980
And we're also surrounded with try and catch.

33
00:02:37,450 --> 00:02:37,750
All right.

34
00:02:37,750 --> 00:02:41,560
So now we'll need to create an instance of email verification, service cost.

35
00:02:41,950 --> 00:02:47,740
And to do that, they will need to first inject it into my user service implementation as dependency.

36
00:02:47,950 --> 00:02:49,990
So I will define a new member vulnerable.

37
00:02:51,730 --> 00:02:54,700
And I will initialize it in my constructor.

38
00:02:59,830 --> 00:03:00,310
Like this.

39
00:03:00,610 --> 00:03:07,600
So because I have injected email verification service as dependency into my user service implementation

40
00:03:07,600 --> 00:03:13,840
clause, I can now more email verification service and inject its mock version instead.

41
00:03:14,260 --> 00:03:21,340
This will allow me to test the user method in isolation from the real implementation of email notification

42
00:03:21,340 --> 00:03:21,820
service.

43
00:03:22,150 --> 00:03:24,430
Now it looks like I have a little typo here.

44
00:03:24,760 --> 00:03:25,750
Let's fix it.

45
00:03:26,530 --> 00:03:27,070
Scarjo.

46
00:03:27,070 --> 00:03:28,210
Email confirmation.

47
00:03:28,600 --> 00:03:31,810
And the app accepts user object as a parameter.

48
00:03:32,320 --> 00:03:33,700
All right, so let's continue.

49
00:03:33,700 --> 00:03:41,020
And in the following lesson, we will mock the email verification service object and will learn how

50
00:03:41,020 --> 00:03:46,240
to stamp the ski to email confirmation void method with exception.

51
00:03:46,570 --> 00:03:47,290
Let's continue.

