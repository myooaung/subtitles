1
00:00:00,210 --> 00:00:05,550
In the following lessons, we will look at one more example that demonstrates how you can use a single

2
00:00:05,550 --> 00:00:11,610
instance with this class, and this example is more interesting and a little bit more complex than a

3
00:00:11,610 --> 00:00:12,360
previous one.

4
00:00:12,990 --> 00:00:14,550
We're going to test for methods.

5
00:00:14,550 --> 00:00:22,020
We are going to test create user, we're going to test update user, we're going to test get user and

6
00:00:22,200 --> 00:00:23,550
delete user.

7
00:00:23,940 --> 00:00:30,600
In my development environment, I have a demo project opened that is called Test Lifecycle Per Class

8
00:00:30,600 --> 00:00:31,020
Demo.

9
00:00:31,620 --> 00:00:37,110
I have attached this project to this lecture and it would be good if you posed this video as a now.

10
00:00:37,500 --> 00:00:41,200
Download this project and open it in your development environment.

11
00:00:41,200 --> 00:00:42,720
This well are excellent.

12
00:00:42,720 --> 00:00:48,510
This project has a single test class that is called User Service Implementation Test.

13
00:00:48,510 --> 00:00:56,310
I have it opened right now and test methods in this class are currently use order annotation.

14
00:00:56,520 --> 00:01:06,060
I have four test methods and each test method runs in order and the class itself is annotated with test

15
00:01:06,060 --> 00:01:12,270
instance annotation that is configured to use test instance lifecycle per class.

16
00:01:12,870 --> 00:01:18,240
This means that when I execute this test class, there will be only one instance of the class created

17
00:01:18,570 --> 00:01:22,470
and all test meant that will share a single instance of this class.

18
00:01:22,890 --> 00:01:28,440
This allows us to make this test methods depend on each other and share information between each other.

19
00:01:28,770 --> 00:01:31,830
The first method is going to test create user.

20
00:01:32,220 --> 00:01:38,490
The second test method is going to test code that updates existing user details and for it to work,

21
00:01:38,490 --> 00:01:43,410
the first test method that creates user details needs to run first.

22
00:01:43,860 --> 00:01:48,620
And this is why my test methods are ordered also to update you the details.

23
00:01:48,660 --> 00:01:55,620
The second test method will need to have access to user ID, and this user idea will be created in the

24
00:01:55,620 --> 00:01:57,990
first test method when it executes.

25
00:01:58,920 --> 00:02:04,290
So all of this test methods depend on each other and need to be executed in specific order.

26
00:02:04,620 --> 00:02:11,280
And this is why they are annotated with order annotation and for this test methods to be able to access

27
00:02:11,280 --> 00:02:13,320
this same class instance variables.

28
00:02:13,800 --> 00:02:21,330
These classes annotated with test instance annotation and test instance validation is configured to

29
00:02:21,330 --> 00:02:24,270
use this instance lifecycle per class.

30
00:02:24,660 --> 00:02:30,810
Now because there is going to be only one single instance of this class before all.

31
00:02:30,960 --> 00:02:36,000
And after all, lifecycle test methods are not static.

32
00:02:36,680 --> 00:02:40,230
It is that these two methods are no longer static.

33
00:02:40,530 --> 00:02:46,740
If you remember from previous lessons for these two lifecycle methods to work, they needed to be static.

34
00:02:47,400 --> 00:02:55,320
If I comment out the test instance annotation and enable the default behavior where a new instance of

35
00:02:55,320 --> 00:02:57,720
a class is created for each test method.

36
00:02:57,960 --> 00:03:04,230
Then in that case, the before and after all methods will need to be static.

37
00:03:04,710 --> 00:03:12,210
But for a single instance of a class, or when you use this instance, lifecycle per class configuration,

38
00:03:12,570 --> 00:03:15,210
these two methods do not need to be static.

39
00:03:15,750 --> 00:03:16,080
All right.

40
00:03:16,530 --> 00:03:19,950
So the business logic to create, update and delete user.

41
00:03:19,950 --> 00:03:22,710
I have encapsulated in a service class.

42
00:03:23,100 --> 00:03:29,250
In a service package, I have user service interface that defines four different methods.

43
00:03:29,310 --> 00:03:33,870
Create user, update user, get user details and delete user.

44
00:03:34,170 --> 00:03:38,610
And its implementation is in a user service implementation class.

45
00:03:39,150 --> 00:03:46,650
This user service implementation class user service database that is injected into this class using

46
00:03:46,800 --> 00:03:48,810
constructor based dependency injection.

47
00:03:49,050 --> 00:03:56,970
And if I open user's database, this is also an interface that defines a few methods to initialize database,

48
00:03:57,180 --> 00:04:03,840
to close database, and then a few methods to save user update user, find user and delete user.

49
00:04:04,170 --> 00:04:08,640
And the implementation of this interface is inside of IO package.

50
00:04:09,030 --> 00:04:16,500
It is a user database map implementation class and this is completely custom and my own implementation.

51
00:04:16,950 --> 00:04:22,860
Instead of using actual database, I store users in a hash map that is kept in memory.

52
00:04:23,100 --> 00:04:29,400
Please don't worry much about how or why I implemented this class in this particular way.

53
00:04:29,610 --> 00:04:31,410
This is not important at this moment.

54
00:04:31,890 --> 00:04:39,690
The goal of this demonstration, if I go back to a test class, is to give you another example that

55
00:04:39,690 --> 00:04:47,190
demonstrate how you can use ordered test methods and a single instance of a test class which you enable

56
00:04:47,190 --> 00:04:54,030
with the test instance annotation configurator to use this instance lifecycle per class.

57
00:04:54,510 --> 00:04:54,810
All right.

58
00:04:55,200 --> 00:04:59,940
So let's continue and in the following lessons, we will implement all of.

59
00:05:00,000 --> 00:05:02,010
This four test methods.

