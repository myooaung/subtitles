WEBVTT
1
00:00:00.470 --> 00:00:06.830
If you project this Maven base project, then you can configure Maven to generate and export regular

2
00:00:06.830 --> 00:00:11.390
unit test reports or test report containing good coverage information as well.

3
00:00:11.870 --> 00:00:18.320
Making Maven generate good coverage report is very helpful when you use continuous integration and continuous

4
00:00:18.320 --> 00:00:24.170
deployment tools and those times when you do not use development environment to build your project and

5
00:00:24.320 --> 00:00:25.340
run unit tests.

6
00:00:25.820 --> 00:00:32.119
In this video lesson, we will consider our MAVEN Base Project to be able to export regular test reports

7
00:00:32.119 --> 00:00:38.210
first, and this report will contain information about parsed and failed test methods, but it will

8
00:00:38.210 --> 00:00:40.220
not contain code coverage information.

9
00:00:40.220 --> 00:00:45.830
Yet we will configure our project to export code coverage report in the following lesson.

10
00:00:46.430 --> 00:00:53.630
So to configure our MAVEN project to export a regular unit test report, well, we need to add one additional

11
00:00:53.630 --> 00:00:56.000
plug in to pull maximum file.

12
00:00:56.120 --> 00:01:03.830
So I will open for maximum file scroll and a little bit down to plug in section and to find the plug

13
00:01:03.830 --> 00:01:08.000
in that I need to aren't here I will open maven repository dot com.

14
00:01:13.700 --> 00:01:15.650
Using the search bar on the top.

15
00:01:15.650 --> 00:01:17.300
I will search for Maven.

16
00:01:17.300 --> 00:01:17.750
Sure.

17
00:01:17.750 --> 00:01:19.460
Fire report poignant.

18
00:01:22.000 --> 00:01:23.680
And we'll click on the search button.

19
00:01:24.130 --> 00:01:27.400
The plug in that I'm looking for is number one maven.

20
00:01:27.400 --> 00:01:29.350
Sure, fire report plugging.

21
00:01:29.680 --> 00:01:31.120
So I will open it.

22
00:01:31.480 --> 00:01:39.130
I will copy one of its latest versions and will copy its example code snippet from the MAVEN Tap.

23
00:01:39.700 --> 00:01:47.290
Now I'll go back to my project and I will add this code snippet into plug ins section that is inside

24
00:01:47.290 --> 00:01:48.430
of the build section.

25
00:01:48.850 --> 00:01:52.080
So here I have one plug in right below.

26
00:01:52.090 --> 00:01:58.780
I will add one more plug in and I will need to replace dependency with plug in.

27
00:02:00.290 --> 00:02:00.860
Like this.

28
00:02:01.490 --> 00:02:01.790
All right.

29
00:02:01.790 --> 00:02:08.090
So to make me even execute this plug in during the test phase, you need to add to this plug in one

30
00:02:08.090 --> 00:02:12.710
additional configuration, and this will go to execution section.

31
00:02:13.130 --> 00:02:16.550
So inside of this plug in, I will need to add executions.

32
00:02:16.970 --> 00:02:22.760
Inside of executions, I will need to add one execution and incentive execution.

33
00:02:22.760 --> 00:02:31.010
I'll need to configure phase, which is going to be test phase and one goal which will go into goals

34
00:02:31.070 --> 00:02:31.700
section.

35
00:02:34.450 --> 00:02:36.520
And the name of the girl is a report.

36
00:02:37.120 --> 00:02:37.420
All right.

37
00:02:37.420 --> 00:02:44.350
So with this configuration, we tell Maven that when we run Maven command to execute the test phase,

38
00:02:44.620 --> 00:02:48.910
we want this plug in to execute its code that is called Report.

39
00:02:49.390 --> 00:02:55.660
All right, so this configuration should already make Maven generate an expert regular unit as reported

40
00:02:55.900 --> 00:02:57.430
in the ammo format.

41
00:02:57.640 --> 00:03:04.180
If we execute the test phase, if all unit tests pass, then report will be generated.

42
00:03:04.510 --> 00:03:10.180
But if at least one unit test fails, then unfortunately the report will not be generated.

43
00:03:10.870 --> 00:03:17.170
And to make maven expert test report, even though there is a failing test, we'll need to add one more

44
00:03:17.170 --> 00:03:17.980
configuration.

45
00:03:18.250 --> 00:03:22.630
But this one will need to go into surefire plug in itself.

46
00:03:22.900 --> 00:03:29.920
So right under the version I will add one more configuration and it will go into a configuration section.

47
00:03:30.890 --> 00:03:34.160
The property that I want you to configure is called test failure.

48
00:03:34.160 --> 00:03:34.730
Ignore.

49
00:03:36.170 --> 00:03:37.880
And the volume is true.

50
00:03:38.390 --> 00:03:38.630
Right.

51
00:03:38.630 --> 00:03:45.970
So this configuration should make me even generate this report, even if there is a fairly intense now

52
00:03:45.980 --> 00:03:52.370
sleep bomb example file and I will click on this button here to load maven changes.

53
00:03:53.370 --> 00:03:57.330
So now let's see if we can already generate an expert our test report.

54
00:03:57.660 --> 00:04:01.470
To do that, I will open a terminal window by clicking on this button here.

55
00:04:02.400 --> 00:04:05.460
I need to make sure that I'm in the project root folder.

56
00:04:05.460 --> 00:04:06.180
So files.

57
00:04:06.180 --> 00:04:09.870
Files here I should be able to see pull SML file.

58
00:04:10.290 --> 00:04:20.459
And now I can run maven test or Maven clean test to first clear the target directory and then run the

59
00:04:20.459 --> 00:04:21.300
test phase.

60
00:04:23.200 --> 00:04:23.590
Okay.

61
00:04:23.590 --> 00:04:28.000
So my project is successfully built and if I screw up a little bit.

62
00:04:29.060 --> 00:04:35.660
And I see that there are six tests run and a half zero failures and zero errors.

63
00:04:36.050 --> 00:04:39.470
Now, let's see if we have our HMO report generated as well.

64
00:04:39.800 --> 00:04:46.430
And to find the report, I'll need to look into a target directory of this project so I can use the

65
00:04:46.610 --> 00:04:47.840
least files here.

66
00:04:47.870 --> 00:04:50.270
And then I will see current directory.

67
00:04:50.600 --> 00:04:53.720
I can list files inside of the target directory.

68
00:04:55.240 --> 00:04:59.080
And there I will see a folder that is called site.

69
00:04:59.590 --> 00:05:08.710
Then I can list files inside of that site folder and I will see a sure fire report h html or I can use

70
00:05:08.710 --> 00:05:12.270
find a window and then open this report there.

71
00:05:12.310 --> 00:05:14.230
So the project is called user service.

72
00:05:14.800 --> 00:05:17.500
Inside of user service they have target directory.

73
00:05:17.500 --> 00:05:21.400
And there I will have a new folder that is called site.

74
00:05:21.400 --> 00:05:23.410
And here's our HMO file.

75
00:05:23.800 --> 00:05:26.560
I will double click on this HTML file to open it.

76
00:05:26.860 --> 00:05:31.420
And here is my report in this section that is called Package List.

77
00:05:31.840 --> 00:05:35.740
We'll have a list of packages with test information for each package.

78
00:05:36.670 --> 00:05:44.380
And here we will see the number of tests per package, either any errors that took place and the total

79
00:05:44.380 --> 00:05:48.250
time it took for all test methods to execute.

80
00:05:48.730 --> 00:05:52.810
Then we will have a list of test classes we have at this moment.

81
00:05:52.810 --> 00:05:58.180
Only want this class that is called user service test with six unit tests in it.

82
00:05:58.750 --> 00:06:05.380
And then we will have a list of test methods for each class and how much it took to execute each unit

83
00:06:05.380 --> 00:06:05.740
test.

84
00:06:06.250 --> 00:06:10.540
Now there is a way to make this test report look just a little bit nicer.

85
00:06:10.780 --> 00:06:18.280
And to do that, I will go back to my terminal window and we'll run one more command maven side space

86
00:06:18.430 --> 00:06:23.380
dash capital D and then generate reports equals to false.

87
00:06:25.710 --> 00:06:26.250
Like this.

88
00:06:26.460 --> 00:06:27.870
So if I hit enter now.

89
00:06:28.870 --> 00:06:35.770
They built their successful and this should have added some images and CSF styling to this HTML report

90
00:06:35.770 --> 00:06:37.420
page and make it look nicer.

91
00:06:37.750 --> 00:06:42.790
And if I refresh this page now, we have this report looks a little bit nice.

92
00:06:43.270 --> 00:06:43.570
All right.

93
00:06:43.570 --> 00:06:44.610
So let's continue.

94
00:06:44.620 --> 00:06:50.770
And in the following lecture, we will learn how to configure our MAVEN project to export code coverage

95
00:06:50.770 --> 00:06:53.050
report in demo format as well.

