WEBVTT
1
00:00:00.090 --> 00:00:06.240
In this lesson, I'll give you an overview of a test method that I have created as an exercise described

2
00:00:06.240 --> 00:00:07.410
in previous lesson.

3
00:00:07.410 --> 00:00:12.030
And I'm also going to attach the source code of this test class to this lecture.

4
00:00:12.120 --> 00:00:19.180
All right, so here's my new test method that I have added, and I have called this new test method.

5
00:00:19.200 --> 00:00:20.940
Test create user.

6
00:00:20.940 --> 00:00:25.990
When first name is only one character returns 400 status cut.

7
00:00:26.280 --> 00:00:29.640
So it will test the create user method.

8
00:00:29.940 --> 00:00:36.480
When the value of first name is only one character, you should return HTTP status code 400, which

9
00:00:36.480 --> 00:00:38.160
stands for a bad request.

10
00:00:38.340 --> 00:00:47.520
Now first of all, I have moved all duplicate code from my arrange section from each test method up

11
00:00:47.790 --> 00:00:53.060
to a lifecycle method that is annotated with before each annotation.

12
00:00:53.070 --> 00:00:58.920
Here I initialize user details, request model and I set user values.

13
00:01:02.110 --> 00:01:09.760
Now in the orange section of my new test method, I set the value of users first name to one character

14
00:01:09.760 --> 00:01:10.300
only.

15
00:01:10.300 --> 00:01:16.990
And this is going to be an invalid value because in user details request model, this property is configured

16
00:01:16.990 --> 00:01:19.210
to be minimum two characters long.

17
00:01:19.540 --> 00:01:24.190
Let's open user details, request model and let's open this clause.

18
00:01:24.190 --> 00:01:29.830
So here is the first name and it is annotated with size annotation.

19
00:01:29.830 --> 00:01:37.270
And this size annotation is configured that the user's first name value length is minimum two characters.

20
00:01:37.270 --> 00:01:43.720
And because in my test method I set this value to one character only, I expect this validation to trigger

21
00:01:43.720 --> 00:01:44.830
an error message.

22
00:01:44.950 --> 00:01:47.710
All right, so let's go back to our test method.

23
00:01:47.800 --> 00:01:55.750
In the ACT section, I perform a request and in the assert section, I validate that the status code

24
00:01:55.750 --> 00:01:59.980
of response is set to 400 or by the request.

25
00:02:00.010 --> 00:02:03.250
Now let's run this test method and see if it works.

26
00:02:05.570 --> 00:02:11.450
And it passes, which confirms that a response that is good is set to a bad request.

27
00:02:11.840 --> 00:02:18.320
Now, if I provide a valid value for users first name, then I expect this test method to fail.

28
00:02:18.320 --> 00:02:24.920
Because if the value of first name is valid, then validation will be successful and we will get a different

29
00:02:24.920 --> 00:02:25.610
result.

30
00:02:25.670 --> 00:02:26.830
So let's try.

31
00:02:26.840 --> 00:02:30.380
Instead of one character, I will provide a longer name.

32
00:02:30.530 --> 00:02:37.100
Now, if I run this test method again, my test method will fail because the validation of user's first

33
00:02:37.100 --> 00:02:38.530
name is now successful.

34
00:02:38.540 --> 00:02:43.940
Create user method continues to execute and we no longer receive back expected results.

35
00:02:44.270 --> 00:02:46.610
All right, so let's make it work again.

36
00:02:46.630 --> 00:02:54.320
I'll provide a short and invalid name instead of a longer name, and we'll run my test method one more

37
00:02:54.320 --> 00:02:56.060
time to make it pass.

38
00:02:57.880 --> 00:02:59.800
And now my test method passes.

39
00:03:00.100 --> 00:03:05.240
All right, so there are other test methods you can write to properly test this request.

40
00:03:05.260 --> 00:03:11.860
For example, you can write a test method to validate if the minimum and maximum length of users password

41
00:03:11.860 --> 00:03:18.110
is checked, and if the value of users last name, for example, is within the allowed range.

42
00:03:18.130 --> 00:03:23.740
And now that we have written a couple of test methods for our create using method, you should be able

43
00:03:23.740 --> 00:03:27.430
to test other properties of user details on your own.

