1
00:00:00,090 --> 00:00:04,320
In this lesson, we will refactor the test method that we have just created.

2
00:00:04,320 --> 00:00:10,800
And the first change that I would like to do is to update the assertion that I have here by adding a

3
00:00:10,800 --> 00:00:11,550
message to it.

4
00:00:11,790 --> 00:00:17,340
If this assertion fails, then I want my own custom message to be included in the lock.

5
00:00:17,730 --> 00:00:25,710
For example, if the expected value of user first name does not match the actual value of user first

6
00:00:25,710 --> 00:00:31,350
name that we are getting from the user object, then I want to log a message like for example, user's

7
00:00:31,560 --> 00:00:32,610
first name is incorrect.

8
00:00:34,730 --> 00:00:35,510
Something like this.

9
00:00:35,870 --> 00:00:44,480
Now, if I look at these tests mounted and this second test method that they have here, then the RH

10
00:00:44,480 --> 00:00:51,680
section in these two methods, these are section and these are in section I exactly the same.

11
00:00:52,040 --> 00:00:54,320
And in this case, there are a couple of ways to go.

12
00:00:54,680 --> 00:01:00,560
I can either take the string section into a lifecycle method that executes before each test method,

13
00:01:00,980 --> 00:01:07,220
or if these two test methods are always the same, then I can merge them into one single test method.

14
00:01:07,310 --> 00:01:08,690
And this is what I'm going to do.

15
00:01:08,690 --> 00:01:11,900
I'm going to merge these two test methods into one.

16
00:01:12,260 --> 00:01:19,400
And to do that, I will simply copy the assertion from my second test method into my first test method

17
00:01:19,970 --> 00:01:21,830
and the second method here.

18
00:01:21,920 --> 00:01:25,580
This one now becomes redundant and I can delete it.

19
00:01:26,150 --> 00:01:26,480
All right.

20
00:01:26,480 --> 00:01:33,110
So when doing test driven development and implementing application code step by step by writing in test

21
00:01:33,110 --> 00:01:38,870
methods, first, you might come across these situations when one of test methods becomes redundant,

22
00:01:39,170 --> 00:01:45,710
your application features complete your refactoring test method and it is possible that two test methods

23
00:01:45,710 --> 00:01:47,690
will be almost exactly the same.

24
00:01:47,840 --> 00:01:54,950
And it is a valid practice to merge these two test methods into one, but provided they are almost exactly

25
00:01:54,950 --> 00:01:55,400
the same.

26
00:01:55,760 --> 00:01:58,190
All right, so I have updated this test method.

27
00:01:58,520 --> 00:02:00,710
I will also add a display name.

28
00:02:01,680 --> 00:02:09,150
With a display name, something like user object created and I will run this test to make sure that

29
00:02:09,150 --> 00:02:10,139
it still works.

30
00:02:11,900 --> 00:02:12,710
And it passed.

31
00:02:13,130 --> 00:02:13,430
All right.

32
00:02:13,430 --> 00:02:15,070
So let's continue to the next lesson.

